func	2:0	271:0	0	static void	vqa_decode_chunk
params	2:28	0:0	1	
param	2:29	2:42	2	VqaContext *	s
stmnts	0:0	270:4	1	
decl	4:4	4:27	2	unsigned int	chunk_type
decl	5:4	5:27	2	unsigned int	chunk_size
decl	6:4	6:17	2	int	byte_skip
decl	7:4	7:26	2	unsigned int	index
op	7:23	0:0	2	=
water	7:25	0:0	2	0
decl	8:4	8:9	2	int	i
decl	9:4	9:25	2	unsigned char	r
water	9:19	0:0	2	,
decl	9:4	9:25	2	unsigned char	g
water	9:22	0:0	2	,
decl	9:4	9:25	2	unsigned char	b
decl	10:4	10:19	2	int	index_shift
decl	12:4	12:23	2	int	cbf0_chunk
op	12:19	0:0	2	=
op	12:21	0:0	2	-
water	12:22	0:0	2	1
decl	13:4	13:23	2	int	cbfz_chunk
op	13:19	0:0	2	=
op	13:21	0:0	2	-
water	13:22	0:0	2	1
decl	14:4	14:23	2	int	cbp0_chunk
op	14:19	0:0	2	=
op	14:21	0:0	2	-
water	14:22	0:0	2	1
decl	15:4	15:23	2	int	cbpz_chunk
op	15:19	0:0	2	=
op	15:21	0:0	2	-
water	15:22	0:0	2	1
decl	16:4	16:23	2	int	cpl0_chunk
op	16:19	0:0	2	=
op	16:21	0:0	2	-
water	16:22	0:0	2	1
decl	17:4	17:23	2	int	cplz_chunk
op	17:19	0:0	2	=
op	17:21	0:0	2	-
water	17:22	0:0	2	1
decl	18:4	18:23	2	int	vptz_chunk
op	18:19	0:0	2	=
op	18:21	0:0	2	-
water	18:22	0:0	2	1
decl	20:4	20:12	2	int	x
water	20:9	0:0	2	,
decl	20:4	20:12	2	int	y
decl	21:4	21:17	2	int	lines
op	21:14	0:0	2	=
water	21:16	0:0	2	0
decl	22:4	22:17	2	int	pixel_ptr
decl	23:4	23:24	2	int	vector_index
op	23:21	0:0	2	=
water	23:23	0:0	2	0
decl	24:4	24:18	2	int	lobyte
op	24:15	0:0	2	=
water	24:17	0:0	2	0
decl	25:4	25:18	2	int	hibyte
op	25:15	0:0	2	=
water	25:17	0:0	2	0
decl	26:4	26:19	2	int	lobytes
op	26:16	0:0	2	=
water	26:18	0:0	2	0
decl	27:4	27:43	2	int	hibytes
op	27:16	0:0	2	=
water	27:18	0:0	2	s
op	27:19	0:0	2	->
water	27:21	0:0	2	decode_buffer_size
op	27:40	0:0	2	/
water	27:42	0:0	2	2
while	30:4	77:4	2	(index < s -> size)
cond	30:11	30:22	3	index < s -> size
water	30:11	0:0	4	index
op	30:17	0:0	4	<
water	30:19	0:0	4	s
op	30:20	0:0	4	->
water	30:22	0:0	4	size
stmts	30:28	77:4	3	
water	30:28	0:0	4	{
water	32:8	0:0	4	chunk_type
op	32:19	0:0	4	=
call	32:21	32:43	4	AV_RB32
arg	32:29	32:43	5	&s->buf[index]
op	32:29	0:0	6	&
water	32:30	0:0	6	s
op	32:31	0:0	6	->
water	32:33	0:0	6	buf
op	32:36	0:0	6	[
water	32:37	0:0	6	index
op	32:42	0:0	6	]
water	32:44	0:0	4	;
water	33:8	0:0	4	chunk_size
op	33:19	0:0	4	=
call	33:21	33:47	4	AV_RB32
arg	33:29	33:47	5	&s->buf[index+4]
op	33:29	0:0	6	&
water	33:30	0:0	6	s
op	33:31	0:0	6	->
water	33:33	0:0	6	buf
op	33:36	0:0	6	[
water	33:37	0:0	6	index
op	33:43	0:0	6	+
water	33:45	0:0	6	4
op	33:46	0:0	6	]
water	33:48	0:0	4	;
switch	35:8	73:8	4	(chunk_type)
cond	35:16	35:16	5	chunk_type
water	35:16	0:0	6	chunk_type
stmts	35:28	73:8	5	
water	35:28	0:0	6	{
label	37:8	37:21	6	case CBF0_TAG :
water	38:12	0:0	6	cbf0_chunk
op	38:23	0:0	6	=
water	38:25	0:0	6	index
water	38:30	0:0	6	;
break	39:12	39:17	6	
label	41:8	41:21	6	case CBFZ_TAG :
water	42:12	0:0	6	cbfz_chunk
op	42:23	0:0	6	=
water	42:25	0:0	6	index
water	42:30	0:0	6	;
break	43:12	43:17	6	
label	45:8	45:21	6	case CBP0_TAG :
water	46:12	0:0	6	cbp0_chunk
op	46:23	0:0	6	=
water	46:25	0:0	6	index
water	46:30	0:0	6	;
break	47:12	47:17	6	
label	49:8	49:21	6	case CBPZ_TAG :
water	50:12	0:0	6	cbpz_chunk
op	50:23	0:0	6	=
water	50:25	0:0	6	index
water	50:30	0:0	6	;
break	51:12	51:17	6	
label	53:8	53:21	6	case CPL0_TAG :
water	54:12	0:0	6	cpl0_chunk
op	54:23	0:0	6	=
water	54:25	0:0	6	index
water	54:30	0:0	6	;
break	55:12	55:17	6	
label	57:8	57:21	6	case CPLZ_TAG :
water	58:12	0:0	6	cplz_chunk
op	58:23	0:0	6	=
water	58:25	0:0	6	index
water	58:30	0:0	6	;
break	59:12	59:17	6	
label	61:8	61:21	6	case VPTZ_TAG :
water	62:12	0:0	6	vptz_chunk
op	62:23	0:0	6	=
water	62:25	0:0	6	index
water	62:30	0:0	6	;
break	63:12	63:17	6	
label	65:8	65:15	6	default :
call	66:12	71:22	6	av_log
arg	66:19	66:27	7	s->avctx
water	66:19	0:0	8	s
op	66:20	0:0	8	->
water	66:22	0:0	8	avctx
arg	66:29	66:41	7	AV_LOG_ERROR
water	66:29	0:0	8	AV_LOG_ERROR
arg	66:43	66:101	7	"  VQA video: Found unknown chunk type: %c%c%c%c (%08X)\n"
water	66:43	0:0	8	"  VQA video: Found unknown chunk type: %c%c%c%c (%08X)\n"
arg	67:12	67:37	7	(chunk_type>>24)&0xFF
water	67:12	0:0	8	(
water	67:13	0:0	8	chunk_type
op	67:24	0:0	8	>>
water	67:27	0:0	8	24
water	67:29	0:0	8	)
op	67:31	0:0	8	&
water	67:33	0:0	8	0
water	67:34	0:0	8	xFF
arg	68:12	68:37	7	(chunk_type>>16)&0xFF
water	68:12	0:0	8	(
water	68:13	0:0	8	chunk_type
op	68:24	0:0	8	>>
water	68:27	0:0	8	16
water	68:29	0:0	8	)
op	68:31	0:0	8	&
water	68:33	0:0	8	0
water	68:34	0:0	8	xFF
arg	69:12	69:37	7	(chunk_type>>8)&0xFF
water	69:12	0:0	8	(
water	69:13	0:0	8	chunk_type
op	69:24	0:0	8	>>
water	69:28	0:0	8	8
water	69:29	0:0	8	)
op	69:31	0:0	8	&
water	69:33	0:0	8	0
water	69:34	0:0	8	xFF
arg	70:12	70:37	7	(chunk_type>>0)&0xFF
water	70:12	0:0	8	(
water	70:13	0:0	8	chunk_type
op	70:24	0:0	8	>>
water	70:28	0:0	8	0
water	70:29	0:0	8	)
op	70:31	0:0	8	&
water	70:33	0:0	8	0
water	70:34	0:0	8	xFF
arg	71:12	71:22	7	chunk_type
water	71:12	0:0	8	chunk_type
water	71:23	0:0	6	;
break	72:12	72:17	6	
water	73:8	0:0	6	}
water	75:8	0:0	4	byte_skip
op	75:18	0:0	4	=
water	75:20	0:0	4	chunk_size
op	75:31	0:0	4	&
water	75:33	0:0	4	0
water	75:34	0:0	4	x01
water	75:37	0:0	4	;
water	76:8	0:0	4	index
op	76:14	0:0	4	+=
water	76:17	0:0	4	(
water	76:18	0:0	4	CHUNK_PREAMBLE_SIZE
op	76:38	0:0	4	+
water	76:40	0:0	4	chunk_size
op	76:51	0:0	4	+
water	76:53	0:0	4	byte_skip
water	76:62	0:0	4	)
water	76:63	0:0	4	;
water	77:4	0:0	4	}
if	80:4	85:4	2	(( cpl0_chunk != - 1 ) && ( cplz_chunk != - 1 ))
cond	80:8	80:47	3	( cpl0_chunk != - 1 ) && ( cplz_chunk != - 1 )
water	80:8	0:0	4	(
water	80:9	0:0	4	cpl0_chunk
op	80:20	0:0	4	!=
op	80:23	0:0	4	-
water	80:24	0:0	4	1
water	80:25	0:0	4	)
op	80:27	0:0	4	&&
water	80:30	0:0	4	(
water	80:31	0:0	4	cplz_chunk
op	80:42	0:0	4	!=
op	80:45	0:0	4	-
water	80:46	0:0	4	1
water	80:47	0:0	4	)
stmts	80:50	85:4	3	
water	80:50	0:0	4	{
call	83:8	83:96	4	av_log
arg	83:15	83:23	5	s->avctx
water	83:15	0:0	6	s
op	83:16	0:0	6	->
water	83:18	0:0	6	avctx
arg	83:25	83:37	5	AV_LOG_ERROR
water	83:25	0:0	6	AV_LOG_ERROR
arg	83:39	83:96	5	"  VQA video: problem: found both CPL0 and CPLZ chunks\n"
water	83:39	0:0	6	"  VQA video: problem: found both CPL0 and CPLZ chunks\n"
water	83:97	0:0	4	;
return	84:8	84:14	4	
water	85:4	0:0	4	}
if	88:4	92:4	2	(cplz_chunk != - 1)
cond	88:8	88:23	3	cplz_chunk != - 1
water	88:8	0:0	4	cplz_chunk
op	88:19	0:0	4	!=
op	88:22	0:0	4	-
water	88:23	0:0	4	1
stmts	88:26	92:4	3	
water	88:26	0:0	4	{
water	0:0	0:0	4	STATEMENTS
water	92:4	0:0	4	}
if	95:4	113:4	2	(cpl0_chunk != - 1)
cond	95:8	95:23	3	cpl0_chunk != - 1
water	95:8	0:0	4	cpl0_chunk
op	95:19	0:0	4	!=
op	95:22	0:0	4	-
water	95:23	0:0	4	1
stmts	95:26	113:4	3	
water	95:26	0:0	4	{
water	97:8	0:0	4	chunk_size
op	97:19	0:0	4	=
call	97:21	97:52	4	AV_RB32
arg	97:29	97:52	5	&s->buf[cpl0_chunk+4]
op	97:29	0:0	6	&
water	97:30	0:0	6	s
op	97:31	0:0	6	->
water	97:33	0:0	6	buf
op	97:36	0:0	6	[
water	97:37	0:0	6	cpl0_chunk
op	97:48	0:0	6	+
water	97:50	0:0	6	4
op	97:51	0:0	6	]
water	97:53	0:0	4	;
if	99:8	103:8	4	(chunk_size / 3 > 256)
cond	99:12	99:29	5	chunk_size / 3 > 256
water	99:12	0:0	6	chunk_size
op	99:23	0:0	6	/
water	99:25	0:0	6	3
op	99:27	0:0	6	>
water	99:29	0:0	6	256
stmts	99:34	103:8	5	
water	99:34	0:0	6	{
call	100:12	101:30	6	av_log
arg	100:19	100:27	7	s->avctx
water	100:19	0:0	8	s
op	100:20	0:0	8	->
water	100:22	0:0	8	avctx
arg	100:29	100:41	7	AV_LOG_ERROR
water	100:29	0:0	8	AV_LOG_ERROR
arg	100:43	100:105	7	"  VQA video: problem: found a palette chunk with %d colors\n"
water	100:43	0:0	8	"  VQA video: problem: found a palette chunk with %d colors\n"
arg	101:16	101:30	7	chunk_size/3
water	101:16	0:0	8	chunk_size
op	101:27	0:0	8	/
water	101:29	0:0	8	3
water	101:31	0:0	6	;
return	102:12	102:18	6	
water	103:8	0:0	6	}
water	104:8	0:0	4	cpl0_chunk
op	104:19	0:0	4	+=
water	104:22	0:0	4	CHUNK_PREAMBLE_SIZE
water	104:41	0:0	4	;
for	105:8	112:8	4	(i = 0 ;i < chunk_size / 3;i ++)
forinit	105:13	105:18	5	i = 0 ;
water	105:13	0:0	6	i
op	105:15	0:0	6	=
water	105:17	0:0	6	0
water	105:18	0:0	6	;
cond	105:20	105:37	5	i < chunk_size / 3
water	105:20	0:0	6	i
op	105:22	0:0	6	<
water	105:24	0:0	6	chunk_size
op	105:35	0:0	6	/
water	105:37	0:0	6	3
forexpr	105:40	105:41	5	i ++
water	105:40	0:0	6	i
op	105:41	0:0	6	++
stmts	105:45	112:8	5	
water	105:45	0:0	6	{
water	107:12	0:0	6	r
op	107:14	0:0	6	=
water	107:16	0:0	6	s
op	107:17	0:0	6	->
water	107:19	0:0	6	buf
op	107:22	0:0	6	[
water	107:23	0:0	6	cpl0_chunk
op	107:33	0:0	6	++
op	107:35	0:0	6	]
op	107:37	0:0	6	*
water	107:39	0:0	6	4
water	107:40	0:0	6	;
water	108:12	0:0	6	g
op	108:14	0:0	6	=
water	108:16	0:0	6	s
op	108:17	0:0	6	->
water	108:19	0:0	6	buf
op	108:22	0:0	6	[
water	108:23	0:0	6	cpl0_chunk
op	108:33	0:0	6	++
op	108:35	0:0	6	]
op	108:37	0:0	6	*
water	108:39	0:0	6	4
water	108:40	0:0	6	;
water	109:12	0:0	6	b
op	109:14	0:0	6	=
water	109:16	0:0	6	s
op	109:17	0:0	6	->
water	109:19	0:0	6	buf
op	109:22	0:0	6	[
water	109:23	0:0	6	cpl0_chunk
op	109:33	0:0	6	++
op	109:35	0:0	6	]
op	109:37	0:0	6	*
water	109:39	0:0	6	4
water	109:40	0:0	6	;
water	110:12	0:0	6	s
op	110:13	0:0	6	->
water	110:15	0:0	6	palette
op	110:22	0:0	6	[
water	110:23	0:0	6	i
op	110:24	0:0	6	]
op	110:26	0:0	6	=
water	110:28	0:0	6	0
water	110:29	0:0	6	xFF
op	110:33	0:0	6	<<
water	110:36	0:0	6	24
op	110:39	0:0	6	|
water	110:41	0:0	6	r
op	110:43	0:0	6	<<
water	110:46	0:0	6	16
op	110:49	0:0	6	|
water	110:51	0:0	6	g
op	110:53	0:0	6	<<
water	110:56	0:0	6	8
op	110:58	0:0	6	|
water	110:60	0:0	6	b
water	110:61	0:0	6	;
water	111:12	0:0	6	s
op	111:13	0:0	6	->
water	111:15	0:0	6	palette
op	111:22	0:0	6	[
water	111:23	0:0	6	i
op	111:24	0:0	6	]
op	111:26	0:0	6	|=
water	111:29	0:0	6	s
op	111:30	0:0	6	->
water	111:32	0:0	6	palette
op	111:39	0:0	6	[
water	111:40	0:0	6	i
op	111:41	0:0	6	]
op	111:43	0:0	6	>>
water	111:46	0:0	6	6
op	111:48	0:0	6	&
water	111:50	0:0	6	0
water	111:51	0:0	6	x30303
water	111:57	0:0	6	;
water	112:8	0:0	6	}
water	113:4	0:0	4	}
if	116:4	121:4	2	(( cbf0_chunk != - 1 ) && ( cbfz_chunk != - 1 ))
cond	116:8	116:47	3	( cbf0_chunk != - 1 ) && ( cbfz_chunk != - 1 )
water	116:8	0:0	4	(
water	116:9	0:0	4	cbf0_chunk
op	116:20	0:0	4	!=
op	116:23	0:0	4	-
water	116:24	0:0	4	1
water	116:25	0:0	4	)
op	116:27	0:0	4	&&
water	116:30	0:0	4	(
water	116:31	0:0	4	cbfz_chunk
op	116:42	0:0	4	!=
op	116:45	0:0	4	-
water	116:46	0:0	4	1
water	116:47	0:0	4	)
stmts	116:50	121:4	3	
water	116:50	0:0	4	{
call	119:8	119:96	4	av_log
arg	119:15	119:23	5	s->avctx
water	119:15	0:0	6	s
op	119:16	0:0	6	->
water	119:18	0:0	6	avctx
arg	119:25	119:37	5	AV_LOG_ERROR
water	119:25	0:0	6	AV_LOG_ERROR
arg	119:39	119:96	5	"  VQA video: problem: found both CBF0 and CBFZ chunks\n"
water	119:39	0:0	6	"  VQA video: problem: found both CBF0 and CBFZ chunks\n"
water	119:97	0:0	4	;
return	120:8	120:14	4	
water	121:4	0:0	4	}
if	124:4	130:4	2	(cbfz_chunk != - 1)
cond	124:8	124:23	3	cbfz_chunk != - 1
water	124:8	0:0	4	cbfz_chunk
op	124:19	0:0	4	!=
op	124:22	0:0	4	-
water	124:23	0:0	4	1
stmts	124:26	130:4	3	
water	124:26	0:0	4	{
water	126:8	0:0	4	chunk_size
op	126:19	0:0	4	=
call	126:21	126:52	4	AV_RB32
arg	126:29	126:52	5	&s->buf[cbfz_chunk+4]
op	126:29	0:0	6	&
water	126:30	0:0	6	s
op	126:31	0:0	6	->
water	126:33	0:0	6	buf
op	126:36	0:0	6	[
water	126:37	0:0	6	cbfz_chunk
op	126:48	0:0	6	+
water	126:50	0:0	6	4
op	126:51	0:0	6	]
water	126:53	0:0	4	;
water	127:8	0:0	4	cbfz_chunk
op	127:19	0:0	4	+=
water	127:22	0:0	4	CHUNK_PREAMBLE_SIZE
water	127:41	0:0	4	;
call	128:8	129:44	4	decode_format80
arg	128:24	128:43	5	&s->buf[cbfz_chunk]
op	128:24	0:0	6	&
water	128:25	0:0	6	s
op	128:26	0:0	6	->
water	128:28	0:0	6	buf
op	128:31	0:0	6	[
water	128:32	0:0	6	cbfz_chunk
op	128:42	0:0	6	]
arg	128:45	128:55	5	chunk_size
water	128:45	0:0	6	chunk_size
arg	129:12	129:23	5	s->codebook
water	129:12	0:0	6	s
op	129:13	0:0	6	->
water	129:15	0:0	6	codebook
arg	129:25	129:41	5	s->codebook_size
water	129:25	0:0	6	s
op	129:26	0:0	6	->
water	129:28	0:0	6	codebook_size
arg	129:43	129:44	5	0
water	129:43	0:0	6	0
water	129:45	0:0	4	;
water	130:4	0:0	4	}
if	133:4	145:4	2	(cbf0_chunk != - 1)
cond	133:8	133:23	3	cbf0_chunk != - 1
water	133:8	0:0	4	cbf0_chunk
op	133:19	0:0	4	!=
op	133:22	0:0	4	-
water	133:23	0:0	4	1
stmts	133:26	145:4	3	
water	133:26	0:0	4	{
water	135:8	0:0	4	chunk_size
op	135:19	0:0	4	=
call	135:21	135:52	4	AV_RB32
arg	135:29	135:52	5	&s->buf[cbf0_chunk+4]
op	135:29	0:0	6	&
water	135:30	0:0	6	s
op	135:31	0:0	6	->
water	135:33	0:0	6	buf
op	135:36	0:0	6	[
water	135:37	0:0	6	cbf0_chunk
op	135:48	0:0	6	+
water	135:50	0:0	6	4
op	135:51	0:0	6	]
water	135:53	0:0	4	;
if	137:8	141:8	4	(chunk_size > MAX_CODEBOOK_SIZE)
cond	137:12	137:25	5	chunk_size > MAX_CODEBOOK_SIZE
water	137:12	0:0	6	chunk_size
op	137:23	0:0	6	>
water	137:25	0:0	6	MAX_CODEBOOK_SIZE
stmts	137:44	141:8	5	
water	137:44	0:0	6	{
call	138:12	139:26	6	av_log
arg	138:19	138:27	7	s->avctx
water	138:19	0:0	8	s
op	138:20	0:0	8	->
water	138:22	0:0	8	avctx
arg	138:29	138:41	7	AV_LOG_ERROR
water	138:29	0:0	8	AV_LOG_ERROR
arg	138:43	138:102	7	"  VQA video: problem: CBF0 chunk too large (0x%X bytes)\n"
water	138:43	0:0	8	"  VQA video: problem: CBF0 chunk too large (0x%X bytes)\n"
arg	139:16	139:26	7	chunk_size
water	139:16	0:0	8	chunk_size
water	139:27	0:0	6	;
return	140:12	140:18	6	
water	141:8	0:0	6	}
water	142:8	0:0	4	cbf0_chunk
op	142:19	0:0	4	+=
water	142:22	0:0	4	CHUNK_PREAMBLE_SIZE
water	142:41	0:0	4	;
call	144:8	144:59	4	memcpy
arg	144:15	144:26	5	s->codebook
water	144:15	0:0	6	s
op	144:16	0:0	6	->
water	144:18	0:0	6	codebook
arg	144:28	144:47	5	&s->buf[cbf0_chunk]
op	144:28	0:0	6	&
water	144:29	0:0	6	s
op	144:30	0:0	6	->
water	144:32	0:0	6	buf
op	144:35	0:0	6	[
water	144:36	0:0	6	cbf0_chunk
op	144:46	0:0	6	]
arg	144:49	144:59	5	chunk_size
water	144:49	0:0	6	chunk_size
water	144:60	0:0	4	;
water	145:4	0:0	4	}
if	148:4	153:4	2	(vptz_chunk == - 1)
cond	148:8	148:23	3	vptz_chunk == - 1
water	148:8	0:0	4	vptz_chunk
op	148:19	0:0	4	==
op	148:22	0:0	4	-
water	148:23	0:0	4	1
stmts	148:26	153:4	3	
water	148:26	0:0	4	{
call	151:8	151:84	4	av_log
arg	151:15	151:23	5	s->avctx
water	151:15	0:0	6	s
op	151:16	0:0	6	->
water	151:18	0:0	6	avctx
arg	151:25	151:37	5	AV_LOG_ERROR
water	151:25	0:0	6	AV_LOG_ERROR
arg	151:39	151:84	5	"  VQA video: problem: no VPTZ chunk found\n"
water	151:39	0:0	6	"  VQA video: problem: no VPTZ chunk found\n"
water	151:85	0:0	4	;
return	152:8	152:14	4	
water	153:4	0:0	4	}
water	155:4	0:0	2	chunk_size
op	155:15	0:0	2	=
call	155:17	155:48	2	AV_RB32
arg	155:25	155:48	3	&s->buf[vptz_chunk+4]
op	155:25	0:0	4	&
water	155:26	0:0	4	s
op	155:27	0:0	4	->
water	155:29	0:0	4	buf
op	155:32	0:0	4	[
water	155:33	0:0	4	vptz_chunk
op	155:44	0:0	4	+
water	155:46	0:0	4	4
op	155:47	0:0	4	]
water	155:49	0:0	2	;
water	156:4	0:0	2	vptz_chunk
op	156:15	0:0	2	+=
water	156:18	0:0	2	CHUNK_PREAMBLE_SIZE
water	156:37	0:0	2	;
call	157:4	158:50	2	decode_format80
arg	157:20	157:39	3	&s->buf[vptz_chunk]
op	157:20	0:0	4	&
water	157:21	0:0	4	s
op	157:22	0:0	4	->
water	157:24	0:0	4	buf
op	157:27	0:0	4	[
water	157:28	0:0	4	vptz_chunk
op	157:38	0:0	4	]
arg	157:41	157:51	3	chunk_size
water	157:41	0:0	4	chunk_size
arg	158:8	158:24	3	s->decode_buffer
water	158:8	0:0	4	s
op	158:9	0:0	4	->
water	158:11	0:0	4	decode_buffer
arg	158:26	158:47	3	s->decode_buffer_size
water	158:26	0:0	4	s
op	158:27	0:0	4	->
water	158:29	0:0	4	decode_buffer_size
arg	158:49	158:50	3	1
water	158:49	0:0	4	1
water	158:51	0:0	2	;
if	161:4	162:23	2	(s -> vector_height == 4)
cond	161:8	161:28	3	s -> vector_height == 4
water	161:8	0:0	4	s
op	161:9	0:0	4	->
water	161:11	0:0	4	vector_height
op	161:25	0:0	4	==
water	161:28	0:0	4	4
stmts	162:8	162:23	3	
water	162:8	0:0	4	index_shift
op	162:20	0:0	4	=
water	162:22	0:0	4	4
water	162:23	0:0	4	;
else	163:4	164:23	2
stmts	164:8	164:23	3	
water	164:8	0:0	4	index_shift
op	164:20	0:0	4	=
water	164:22	0:0	4	3
water	164:23	0:0	4	;
for	165:4	216:4	2	(y = 0 ;y < s -> frame . linesize [ 0 ] * s -> height;y += s -> frame . linesize [ 0 ] * s -> vector_height)
forinit	165:9	165:14	3	y = 0 ;
water	165:9	0:0	4	y
op	165:11	0:0	4	=
water	165:13	0:0	4	0
water	165:14	0:0	4	;
cond	165:16	165:46	3	y < s -> frame . linesize [ 0 ] * s -> height
water	165:16	0:0	4	y
op	165:18	0:0	4	<
water	165:20	0:0	4	s
op	165:21	0:0	4	->
water	165:23	0:0	4	frame
op	165:28	0:0	4	.
water	165:29	0:0	4	linesize
op	165:37	0:0	4	[
water	165:38	0:0	4	0
op	165:39	0:0	4	]
op	165:41	0:0	4	*
water	165:43	0:0	4	s
op	165:44	0:0	4	->
water	165:46	0:0	4	height
forexpr	166:8	166:39	3	y += s -> frame . linesize [ 0 ] * s -> vector_height
water	166:8	0:0	4	y
op	166:10	0:0	4	+=
water	166:13	0:0	4	s
op	166:14	0:0	4	->
water	166:16	0:0	4	frame
op	166:21	0:0	4	.
water	166:22	0:0	4	linesize
op	166:30	0:0	4	[
water	166:31	0:0	4	0
op	166:32	0:0	4	]
op	166:34	0:0	4	*
water	166:36	0:0	4	s
op	166:37	0:0	4	->
water	166:39	0:0	4	vector_height
stmts	166:54	216:4	3	
water	166:54	0:0	4	{
for	168:8	215:8	4	(x = y ;x < y + s -> width;x += 4 , lobytes ++ , hibytes ++)
forinit	168:13	168:18	5	x = y ;
water	168:13	0:0	6	x
op	168:15	0:0	6	=
water	168:17	0:0	6	y
water	168:18	0:0	6	;
cond	168:20	168:31	5	x < y + s -> width
water	168:20	0:0	6	x
op	168:22	0:0	6	<
water	168:24	0:0	6	y
op	168:26	0:0	6	+
water	168:28	0:0	6	s
op	168:29	0:0	6	->
water	168:31	0:0	6	width
forexpr	168:38	168:64	5	x += 4 , lobytes ++ , hibytes ++
water	168:38	0:0	6	x
op	168:40	0:0	6	+=
water	168:43	0:0	6	4
water	168:44	0:0	6	,
water	168:46	0:0	6	lobytes
op	168:53	0:0	6	++
water	168:55	0:0	6	,
water	168:57	0:0	6	hibytes
op	168:64	0:0	6	++
stmts	168:68	215:8	5	
water	168:68	0:0	6	{
water	169:12	0:0	6	pixel_ptr
op	169:22	0:0	6	=
water	169:24	0:0	6	x
water	169:25	0:0	6	;
switch	173:12	206:12	6	(s -> vqa_version)
cond	173:20	173:23	7	s -> vqa_version
water	173:20	0:0	8	s
op	173:21	0:0	8	->
water	173:23	0:0	8	vqa_version
stmts	173:36	206:12	7	
water	173:36	0:0	8	{
label	175:12	175:18	8	case 1 :
water	176:16	0:0	8	lobyte
op	176:23	0:0	8	=
water	176:25	0:0	8	s
op	176:26	0:0	8	->
water	176:28	0:0	8	decode_buffer
op	176:41	0:0	8	[
water	176:42	0:0	8	lobytes
op	176:50	0:0	8	*
water	176:52	0:0	8	2
op	176:53	0:0	8	]
water	176:54	0:0	8	;
water	177:16	0:0	8	hibyte
op	177:23	0:0	8	=
water	177:25	0:0	8	s
op	177:26	0:0	8	->
water	177:28	0:0	8	decode_buffer
op	177:41	0:0	8	[
water	177:42	0:0	8	(
water	177:43	0:0	8	lobytes
op	177:51	0:0	8	*
water	177:53	0:0	8	2
water	177:54	0:0	8	)
op	177:56	0:0	8	+
water	177:58	0:0	8	1
op	177:59	0:0	8	]
water	177:60	0:0	8	;
water	178:16	0:0	8	vector_index
op	178:29	0:0	8	=
water	178:31	0:0	8	(
water	178:32	0:0	8	(
water	178:33	0:0	8	hibyte
op	178:40	0:0	8	<<
water	178:43	0:0	8	8
water	178:44	0:0	8	)
op	178:46	0:0	8	|
water	178:48	0:0	8	lobyte
water	178:54	0:0	8	)
op	178:56	0:0	8	>>
water	178:59	0:0	8	3
water	178:60	0:0	8	;
water	179:16	0:0	8	vector_index
op	179:29	0:0	8	<<=
water	179:33	0:0	8	index_shift
water	179:44	0:0	8	;
water	180:16	0:0	8	lines
op	180:22	0:0	8	=
water	180:24	0:0	8	s
op	180:25	0:0	8	->
water	180:27	0:0	8	vector_height
water	180:40	0:0	8	;
if	182:16	191:16	8	(hibyte == 0 xFF)
cond	182:20	182:31	9	hibyte == 0 xFF
water	182:20	0:0	10	hibyte
op	182:27	0:0	10	==
water	182:30	0:0	10	0
water	182:31	0:0	10	xFF
stmts	182:36	191:16	9	
water	182:36	0:0	10	{
while	183:20	189:20	10	(lines --)
cond	183:27	183:32	11	lines --
water	183:27	0:0	12	lines
op	183:32	0:0	12	--
stmts	183:36	189:20	11	
water	183:36	0:0	12	{
water	184:24	0:0	12	s
op	184:25	0:0	12	->
water	184:27	0:0	12	frame
op	184:32	0:0	12	.
water	184:33	0:0	12	data
op	184:37	0:0	12	[
water	184:38	0:0	12	0
op	184:39	0:0	12	]
op	184:40	0:0	12	[
water	184:41	0:0	12	pixel_ptr
op	184:51	0:0	12	+
water	184:53	0:0	12	0
op	184:54	0:0	12	]
op	184:56	0:0	12	=
water	184:58	0:0	12	255
op	184:62	0:0	12	-
water	184:64	0:0	12	lobyte
water	184:70	0:0	12	;
water	185:24	0:0	12	s
op	185:25	0:0	12	->
water	185:27	0:0	12	frame
op	185:32	0:0	12	.
water	185:33	0:0	12	data
op	185:37	0:0	12	[
water	185:38	0:0	12	0
op	185:39	0:0	12	]
op	185:40	0:0	12	[
water	185:41	0:0	12	pixel_ptr
op	185:51	0:0	12	+
water	185:53	0:0	12	1
op	185:54	0:0	12	]
op	185:56	0:0	12	=
water	185:58	0:0	12	255
op	185:62	0:0	12	-
water	185:64	0:0	12	lobyte
water	185:70	0:0	12	;
water	186:24	0:0	12	s
op	186:25	0:0	12	->
water	186:27	0:0	12	frame
op	186:32	0:0	12	.
water	186:33	0:0	12	data
op	186:37	0:0	12	[
water	186:38	0:0	12	0
op	186:39	0:0	12	]
op	186:40	0:0	12	[
water	186:41	0:0	12	pixel_ptr
op	186:51	0:0	12	+
water	186:53	0:0	12	2
op	186:54	0:0	12	]
op	186:56	0:0	12	=
water	186:58	0:0	12	255
op	186:62	0:0	12	-
water	186:64	0:0	12	lobyte
water	186:70	0:0	12	;
water	187:24	0:0	12	s
op	187:25	0:0	12	->
water	187:27	0:0	12	frame
op	187:32	0:0	12	.
water	187:33	0:0	12	data
op	187:37	0:0	12	[
water	187:38	0:0	12	0
op	187:39	0:0	12	]
op	187:40	0:0	12	[
water	187:41	0:0	12	pixel_ptr
op	187:51	0:0	12	+
water	187:53	0:0	12	3
op	187:54	0:0	12	]
op	187:56	0:0	12	=
water	187:58	0:0	12	255
op	187:62	0:0	12	-
water	187:64	0:0	12	lobyte
water	187:70	0:0	12	;
water	188:24	0:0	12	pixel_ptr
op	188:34	0:0	12	+=
water	188:37	0:0	12	s
op	188:38	0:0	12	->
water	188:40	0:0	12	frame
op	188:45	0:0	12	.
water	188:46	0:0	12	linesize
op	188:54	0:0	12	[
water	188:55	0:0	12	0
op	188:56	0:0	12	]
water	188:57	0:0	12	;
water	189:20	0:0	12	}
water	190:20	0:0	10	lines
op	190:25	0:0	10	=
water	190:26	0:0	10	0
water	190:27	0:0	10	;
water	191:16	0:0	10	}
break	192:16	192:21	8	
label	194:12	194:18	8	case 2 :
water	195:16	0:0	8	lobyte
op	195:23	0:0	8	=
water	195:25	0:0	8	s
op	195:26	0:0	8	->
water	195:28	0:0	8	decode_buffer
op	195:41	0:0	8	[
water	195:42	0:0	8	lobytes
op	195:49	0:0	8	]
water	195:50	0:0	8	;
water	196:16	0:0	8	hibyte
op	196:23	0:0	8	=
water	196:25	0:0	8	s
op	196:26	0:0	8	->
water	196:28	0:0	8	decode_buffer
op	196:41	0:0	8	[
water	196:42	0:0	8	hibytes
op	196:49	0:0	8	]
water	196:50	0:0	8	;
water	197:16	0:0	8	vector_index
op	197:29	0:0	8	=
water	197:31	0:0	8	(
water	197:32	0:0	8	hibyte
op	197:39	0:0	8	<<
water	197:42	0:0	8	8
water	197:43	0:0	8	)
op	197:45	0:0	8	|
water	197:47	0:0	8	lobyte
water	197:53	0:0	8	;
water	198:16	0:0	8	vector_index
op	198:29	0:0	8	<<=
water	198:33	0:0	8	index_shift
water	198:44	0:0	8	;
water	199:16	0:0	8	lines
op	199:22	0:0	8	=
water	199:24	0:0	8	s
op	199:25	0:0	8	->
water	199:27	0:0	8	vector_height
water	199:40	0:0	8	;
break	200:16	200:21	8	
label	202:12	202:18	8	case 3 :
water	204:16	0:0	8	lines
op	204:22	0:0	8	=
water	204:24	0:0	8	0
water	204:25	0:0	8	;
break	205:16	205:21	8	
water	206:12	0:0	8	}
while	208:12	214:12	6	(lines --)
cond	208:19	208:24	7	lines --
water	208:19	0:0	8	lines
op	208:24	0:0	8	--
stmts	208:28	214:12	7	
water	208:28	0:0	8	{
water	209:16	0:0	8	s
op	209:17	0:0	8	->
water	209:19	0:0	8	frame
op	209:24	0:0	8	.
water	209:25	0:0	8	data
op	209:29	0:0	8	[
water	209:30	0:0	8	0
op	209:31	0:0	8	]
op	209:32	0:0	8	[
water	209:33	0:0	8	pixel_ptr
op	209:43	0:0	8	+
water	209:45	0:0	8	0
op	209:46	0:0	8	]
op	209:48	0:0	8	=
water	209:50	0:0	8	s
op	209:51	0:0	8	->
water	209:53	0:0	8	codebook
op	209:61	0:0	8	[
water	209:62	0:0	8	vector_index
op	209:74	0:0	8	++
op	209:76	0:0	8	]
water	209:77	0:0	8	;
water	210:16	0:0	8	s
op	210:17	0:0	8	->
water	210:19	0:0	8	frame
op	210:24	0:0	8	.
water	210:25	0:0	8	data
op	210:29	0:0	8	[
water	210:30	0:0	8	0
op	210:31	0:0	8	]
op	210:32	0:0	8	[
water	210:33	0:0	8	pixel_ptr
op	210:43	0:0	8	+
water	210:45	0:0	8	1
op	210:46	0:0	8	]
op	210:48	0:0	8	=
water	210:50	0:0	8	s
op	210:51	0:0	8	->
water	210:53	0:0	8	codebook
op	210:61	0:0	8	[
water	210:62	0:0	8	vector_index
op	210:74	0:0	8	++
op	210:76	0:0	8	]
water	210:77	0:0	8	;
water	211:16	0:0	8	s
op	211:17	0:0	8	->
water	211:19	0:0	8	frame
op	211:24	0:0	8	.
water	211:25	0:0	8	data
op	211:29	0:0	8	[
water	211:30	0:0	8	0
op	211:31	0:0	8	]
op	211:32	0:0	8	[
water	211:33	0:0	8	pixel_ptr
op	211:43	0:0	8	+
water	211:45	0:0	8	2
op	211:46	0:0	8	]
op	211:48	0:0	8	=
water	211:50	0:0	8	s
op	211:51	0:0	8	->
water	211:53	0:0	8	codebook
op	211:61	0:0	8	[
water	211:62	0:0	8	vector_index
op	211:74	0:0	8	++
op	211:76	0:0	8	]
water	211:77	0:0	8	;
water	212:16	0:0	8	s
op	212:17	0:0	8	->
water	212:19	0:0	8	frame
op	212:24	0:0	8	.
water	212:25	0:0	8	data
op	212:29	0:0	8	[
water	212:30	0:0	8	0
op	212:31	0:0	8	]
op	212:32	0:0	8	[
water	212:33	0:0	8	pixel_ptr
op	212:43	0:0	8	+
water	212:45	0:0	8	3
op	212:46	0:0	8	]
op	212:48	0:0	8	=
water	212:50	0:0	8	s
op	212:51	0:0	8	->
water	212:53	0:0	8	codebook
op	212:61	0:0	8	[
water	212:62	0:0	8	vector_index
op	212:74	0:0	8	++
op	212:76	0:0	8	]
water	212:77	0:0	8	;
water	213:16	0:0	8	pixel_ptr
op	213:26	0:0	8	+=
water	213:29	0:0	8	s
op	213:30	0:0	8	->
water	213:32	0:0	8	frame
op	213:37	0:0	8	.
water	213:38	0:0	8	linesize
op	213:46	0:0	8	[
water	213:47	0:0	8	0
op	213:48	0:0	8	]
water	213:49	0:0	8	;
water	214:12	0:0	8	}
water	215:8	0:0	6	}
water	216:4	0:0	4	}
if	219:4	223:4	2	(( cbp0_chunk != - 1 ) && ( cbpz_chunk != - 1 ))
cond	219:8	219:47	3	( cbp0_chunk != - 1 ) && ( cbpz_chunk != - 1 )
water	219:8	0:0	4	(
water	219:9	0:0	4	cbp0_chunk
op	219:20	0:0	4	!=
op	219:23	0:0	4	-
water	219:24	0:0	4	1
water	219:25	0:0	4	)
op	219:27	0:0	4	&&
water	219:30	0:0	4	(
water	219:31	0:0	4	cbpz_chunk
op	219:42	0:0	4	!=
op	219:45	0:0	4	-
water	219:46	0:0	4	1
water	219:47	0:0	4	)
stmts	219:50	223:4	3	
water	219:50	0:0	4	{
call	221:8	221:96	4	av_log
arg	221:15	221:23	5	s->avctx
water	221:15	0:0	6	s
op	221:16	0:0	6	->
water	221:18	0:0	6	avctx
arg	221:25	221:37	5	AV_LOG_ERROR
water	221:25	0:0	6	AV_LOG_ERROR
arg	221:39	221:96	5	"  VQA video: problem: found both CBP0 and CBPZ chunks\n"
water	221:39	0:0	6	"  VQA video: problem: found both CBP0 and CBPZ chunks\n"
water	221:97	0:0	4	;
return	222:8	222:14	4	
water	223:4	0:0	4	}
if	225:4	246:4	2	(cbp0_chunk != - 1)
cond	225:8	225:23	3	cbp0_chunk != - 1
water	225:8	0:0	4	cbp0_chunk
op	225:19	0:0	4	!=
op	225:22	0:0	4	-
water	225:23	0:0	4	1
stmts	225:26	246:4	3	
water	225:26	0:0	4	{
water	227:8	0:0	4	chunk_size
op	227:19	0:0	4	=
call	227:21	227:52	4	AV_RB32
arg	227:29	227:52	5	&s->buf[cbp0_chunk+4]
op	227:29	0:0	6	&
water	227:30	0:0	6	s
op	227:31	0:0	6	->
water	227:33	0:0	6	buf
op	227:36	0:0	6	[
water	227:37	0:0	6	cbp0_chunk
op	227:48	0:0	6	+
water	227:50	0:0	6	4
op	227:51	0:0	6	]
water	227:53	0:0	4	;
water	228:8	0:0	4	cbp0_chunk
op	228:19	0:0	4	+=
water	228:22	0:0	4	CHUNK_PREAMBLE_SIZE
water	228:41	0:0	4	;
call	231:8	232:43	4	memcpy
arg	231:15	231:70	5	&s->next_codebook_buffer[s->next_codebook_buffer_index]
op	231:15	0:0	6	&
water	231:16	0:0	6	s
op	231:17	0:0	6	->
water	231:19	0:0	6	next_codebook_buffer
op	231:39	0:0	6	[
water	231:40	0:0	6	s
op	231:41	0:0	6	->
water	231:43	0:0	6	next_codebook_buffer_index
op	231:69	0:0	6	]
arg	232:12	232:31	5	&s->buf[cbp0_chunk]
op	232:12	0:0	6	&
water	232:13	0:0	6	s
op	232:14	0:0	6	->
water	232:16	0:0	6	buf
op	232:19	0:0	6	[
water	232:20	0:0	6	cbp0_chunk
op	232:30	0:0	6	]
arg	232:33	232:43	5	chunk_size
water	232:33	0:0	6	chunk_size
water	232:44	0:0	4	;
water	233:8	0:0	4	s
op	233:9	0:0	4	->
water	233:11	0:0	4	next_codebook_buffer_index
op	233:38	0:0	4	+=
water	233:41	0:0	4	chunk_size
water	233:51	0:0	4	;
water	235:8	0:0	4	s
op	235:9	0:0	4	->
water	235:11	0:0	4	partial_countdown
op	235:28	0:0	4	--
water	235:30	0:0	4	;
if	236:8	245:8	4	(s -> partial_countdown == 0)
cond	236:12	236:36	5	s -> partial_countdown == 0
water	236:12	0:0	6	s
op	236:13	0:0	6	->
water	236:15	0:0	6	partial_countdown
op	236:33	0:0	6	==
water	236:36	0:0	6	0
stmts	236:39	245:8	5	
water	236:39	0:0	6	{
call	239:12	240:45	6	memcpy
arg	239:19	239:30	7	s->codebook
water	239:19	0:0	8	s
op	239:20	0:0	8	->
water	239:22	0:0	8	codebook
arg	239:32	239:55	7	s->next_codebook_buffer
water	239:32	0:0	8	s
op	239:33	0:0	8	->
water	239:35	0:0	8	next_codebook_buffer
arg	240:16	240:45	7	s->next_codebook_buffer_index
water	240:16	0:0	8	s
op	240:17	0:0	8	->
water	240:19	0:0	8	next_codebook_buffer_index
water	240:46	0:0	6	;
water	243:12	0:0	6	s
op	243:13	0:0	6	->
water	243:15	0:0	6	next_codebook_buffer_index
op	243:42	0:0	6	=
water	243:44	0:0	6	0
water	243:45	0:0	6	;
water	244:12	0:0	6	s
op	244:13	0:0	6	->
water	244:15	0:0	6	partial_countdown
op	244:33	0:0	6	=
water	244:35	0:0	6	s
op	244:36	0:0	6	->
water	244:38	0:0	6	partial_count
water	244:51	0:0	6	;
water	245:8	0:0	6	}
water	246:4	0:0	4	}
if	248:4	270:4	2	(cbpz_chunk != - 1)
cond	248:8	248:23	3	cbpz_chunk != - 1
water	248:8	0:0	4	cbpz_chunk
op	248:19	0:0	4	!=
op	248:22	0:0	4	-
water	248:23	0:0	4	1
stmts	248:26	270:4	3	
water	248:26	0:0	4	{
water	250:8	0:0	4	chunk_size
op	250:19	0:0	4	=
call	250:21	250:52	4	AV_RB32
arg	250:29	250:52	5	&s->buf[cbpz_chunk+4]
op	250:29	0:0	6	&
water	250:30	0:0	6	s
op	250:31	0:0	6	->
water	250:33	0:0	6	buf
op	250:36	0:0	6	[
water	250:37	0:0	6	cbpz_chunk
op	250:48	0:0	6	+
water	250:50	0:0	6	4
op	250:51	0:0	6	]
water	250:53	0:0	4	;
water	251:8	0:0	4	cbpz_chunk
op	251:19	0:0	4	+=
water	251:22	0:0	4	CHUNK_PREAMBLE_SIZE
water	251:41	0:0	4	;
call	254:8	255:43	4	memcpy
arg	254:15	254:70	5	&s->next_codebook_buffer[s->next_codebook_buffer_index]
op	254:15	0:0	6	&
water	254:16	0:0	6	s
op	254:17	0:0	6	->
water	254:19	0:0	6	next_codebook_buffer
op	254:39	0:0	6	[
water	254:40	0:0	6	s
op	254:41	0:0	6	->
water	254:43	0:0	6	next_codebook_buffer_index
op	254:69	0:0	6	]
arg	255:12	255:31	5	&s->buf[cbpz_chunk]
op	255:12	0:0	6	&
water	255:13	0:0	6	s
op	255:14	0:0	6	->
water	255:16	0:0	6	buf
op	255:19	0:0	6	[
water	255:20	0:0	6	cbpz_chunk
op	255:30	0:0	6	]
arg	255:33	255:43	5	chunk_size
water	255:33	0:0	6	chunk_size
water	255:44	0:0	4	;
water	256:8	0:0	4	s
op	256:9	0:0	4	->
water	256:11	0:0	4	next_codebook_buffer_index
op	256:38	0:0	4	+=
water	256:41	0:0	4	chunk_size
water	256:51	0:0	4	;
water	258:8	0:0	4	s
op	258:9	0:0	4	->
water	258:11	0:0	4	partial_countdown
op	258:28	0:0	4	--
water	258:30	0:0	4	;
if	259:8	269:8	4	(s -> partial_countdown == 0)
cond	259:12	259:36	5	s -> partial_countdown == 0
water	259:12	0:0	6	s
op	259:13	0:0	6	->
water	259:15	0:0	6	partial_countdown
op	259:33	0:0	6	==
water	259:36	0:0	6	0
stmts	259:39	269:8	5	
water	259:39	0:0	6	{
call	262:12	264:48	6	decode_format80
arg	262:28	262:51	7	s->next_codebook_buffer
water	262:28	0:0	8	s
op	262:29	0:0	8	->
water	262:31	0:0	8	next_codebook_buffer
arg	263:16	263:45	7	s->next_codebook_buffer_index
water	263:16	0:0	8	s
op	263:17	0:0	8	->
water	263:19	0:0	8	next_codebook_buffer_index
arg	264:16	264:27	7	s->codebook
water	264:16	0:0	8	s
op	264:17	0:0	8	->
water	264:19	0:0	8	codebook
arg	264:29	264:45	7	s->codebook_size
water	264:29	0:0	8	s
op	264:30	0:0	8	->
water	264:32	0:0	8	codebook_size
arg	264:47	264:48	7	0
water	264:47	0:0	8	0
water	264:49	0:0	6	;
water	267:12	0:0	6	s
op	267:13	0:0	6	->
water	267:15	0:0	6	next_codebook_buffer_index
op	267:42	0:0	6	=
water	267:44	0:0	6	0
water	267:45	0:0	6	;
water	268:12	0:0	6	s
op	268:13	0:0	6	->
water	268:15	0:0	6	partial_countdown
op	268:33	0:0	6	=
water	268:35	0:0	6	s
op	268:36	0:0	6	->
water	268:38	0:0	6	partial_count
water	268:51	0:0	6	;
water	269:8	0:0	6	}
water	270:4	0:0	4	}
