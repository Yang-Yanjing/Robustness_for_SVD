func	1:0	222:0	0	static int	flashsv_decode_frame
params	1:31	0:0	1	
param	1:32	1:53	2	AVCodecContext *	avctx
param	1:55	1:65	2	void *	data
param	2:32	2:46	2	int *	got_frame
param	2:48	2:63	2	AVPacket *	avpkt
stmnts	0:0	221:19	1	
decl	4:4	4:36	2	int	buf_size
op	4:23	0:0	2	=
water	4:25	0:0	2	avpkt
op	4:30	0:0	2	->
water	4:32	0:0	2	size
decl	5:4	5:41	2	FlashSVContext	*s
op	5:23	0:0	2	=
water	5:25	0:0	2	avctx
op	5:30	0:0	2	->
water	5:32	0:0	2	priv_data
decl	6:4	6:53	2	int	h_blocks
water	6:16	0:0	2	,
decl	6:4	6:53	2	int	v_blocks
water	6:26	0:0	2	,
decl	6:4	6:53	2	int	h_part
water	6:34	0:0	2	,
decl	6:4	6:53	2	int	v_part
water	6:42	0:0	2	,
decl	6:4	6:53	2	int	i
water	6:45	0:0	2	,
decl	6:4	6:53	2	int	j
water	6:48	0:0	2	,
decl	6:4	6:53	2	int	ret
decl	7:4	7:20	2	GetBitContext	gb
decl	8:4	8:40	2	int	last_blockwidth
op	8:24	0:0	2	=
water	8:26	0:0	2	s
op	8:27	0:0	2	->
water	8:29	0:0	2	block_width
decl	9:4	9:41	2	int	last_blockheight
op	9:24	0:0	2	=
water	9:26	0:0	2	s
op	9:27	0:0	2	->
water	9:29	0:0	2	block_height
if	12:4	13:16	2	(buf_size == 0)
cond	12:8	12:20	3	buf_size == 0
water	12:8	0:0	4	buf_size
op	12:17	0:0	4	==
water	12:20	0:0	4	0
stmts	13:8	13:16	3	
return	13:8	13:16	4	0
water	13:15	0:0	5	0
if	14:4	15:17	2	(buf_size < 4)
cond	14:8	14:19	3	buf_size < 4
water	14:8	0:0	4	buf_size
op	14:17	0:0	4	<
water	14:19	0:0	4	4
stmts	15:8	15:17	3	
return	15:8	15:17	4	-1
op	15:15	0:0	5	-
water	15:16	0:0	5	1
call	17:4	17:48	2	init_get_bits
arg	17:18	17:21	3	&gb
op	17:18	0:0	4	&
water	17:19	0:0	4	gb
arg	17:23	17:34	3	avpkt->data
water	17:23	0:0	4	avpkt
op	17:28	0:0	4	->
water	17:30	0:0	4	data
arg	17:36	17:48	3	buf_size*8
water	17:36	0:0	4	buf_size
op	17:45	0:0	4	*
water	17:47	0:0	4	8
water	17:49	0:0	2	;
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	block_width
op	20:20	0:0	2	=
water	20:22	0:0	2	16
op	20:25	0:0	2	*
water	20:27	0:0	2	(
call	20:28	20:44	2	get_bits
arg	20:37	20:40	3	&gb
op	20:37	0:0	4	&
water	20:38	0:0	4	gb
arg	20:43	20:44	3	4
water	20:43	0:0	4	4
op	20:46	0:0	2	+
water	20:48	0:0	2	1
water	20:49	0:0	2	)
water	20:50	0:0	2	;
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	image_width
op	21:20	0:0	2	=
call	21:28	21:44	2	get_bits
arg	21:37	21:40	3	&gb
op	21:37	0:0	4	&
water	21:38	0:0	4	gb
arg	21:42	21:44	3	12
water	21:42	0:0	4	12
water	21:45	0:0	2	;
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	block_height
op	22:20	0:0	2	=
water	22:22	0:0	2	16
op	22:25	0:0	2	*
water	22:27	0:0	2	(
call	22:28	22:44	2	get_bits
arg	22:37	22:40	3	&gb
op	22:37	0:0	4	&
water	22:38	0:0	4	gb
arg	22:43	22:44	3	4
water	22:43	0:0	4	4
op	22:46	0:0	2	+
water	22:48	0:0	2	1
water	22:49	0:0	2	)
water	22:50	0:0	2	;
water	23:4	0:0	2	s
op	23:5	0:0	2	->
water	23:7	0:0	2	image_height
op	23:20	0:0	2	=
call	23:28	23:44	2	get_bits
arg	23:37	23:40	3	&gb
op	23:37	0:0	4	&
water	23:38	0:0	4	gb
arg	23:42	23:44	3	12
water	23:42	0:0	4	12
water	23:45	0:0	2	;
if	25:4	27:28	2	(last_blockwidth != s -> block_width || last_blockheight != s -> block_height)
cond	25:11	26:33	3	last_blockwidth != s -> block_width || last_blockheight != s -> block_height
water	25:11	0:0	4	last_blockwidth
op	25:27	0:0	4	!=
water	25:30	0:0	4	s
op	25:31	0:0	4	->
water	25:33	0:0	4	block_width
op	26:8	0:0	4	||
water	26:11	0:0	4	last_blockheight
op	26:27	0:0	4	!=
water	26:30	0:0	4	s
op	26:31	0:0	4	->
water	26:33	0:0	4	block_height
stmts	27:8	27:28	3	
call	27:8	27:27	4	av_freep
arg	27:17	27:27	5	&s->blocks
op	27:17	0:0	6	&
water	27:18	0:0	6	s
op	27:19	0:0	6	->
water	27:21	0:0	6	blocks
water	27:28	0:0	4	;
if	29:4	39:4	2	(s -> ver == 2)
cond	29:8	29:18	3	s -> ver == 2
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	ver
op	29:15	0:0	4	==
water	29:18	0:0	4	2
stmts	29:21	39:4	3	
water	29:21	0:0	4	{
call	30:8	30:24	4	skip_bits
arg	30:18	30:21	5	&gb
op	30:18	0:0	6	&
water	30:19	0:0	6	gb
arg	30:23	30:24	5	6
water	30:23	0:0	6	6
water	30:25	0:0	4	;
if	31:8	34:8	4	(get_bits1 (& gb ))
cond	31:12	31:25	5	get_bits1 (& gb )
call	31:12	31:25	6	get_bits1
arg	31:22	31:25	7	&gb
op	31:22	0:0	8	&
water	31:23	0:0	8	gb
stmts	31:28	34:8	5	
water	31:28	0:0	6	{
call	32:12	32:49	6	avpriv_request_sample
arg	32:34	32:39	7	avctx
water	32:34	0:0	8	avctx
arg	32:41	32:49	7	"iframe"
water	32:41	0:0	8	"iframe"
water	32:50	0:0	6	;
return	33:12	33:39	6	AVERROR_PATCHWELCOME
water	33:19	0:0	7	AVERROR_PATCHWELCOME
water	34:8	0:0	6	}
if	35:8	38:8	4	(get_bits1 (& gb ))
cond	35:12	35:25	5	get_bits1 (& gb )
call	35:12	35:25	6	get_bits1
arg	35:22	35:25	7	&gb
op	35:22	0:0	8	&
water	35:23	0:0	8	gb
stmts	35:28	38:8	5	
water	35:28	0:0	6	{
call	36:12	36:57	6	avpriv_request_sample
arg	36:34	36:39	7	avctx
water	36:34	0:0	8	avctx
arg	36:41	36:57	7	"Custom palette"
water	36:41	0:0	8	"Custom palette"
water	36:58	0:0	6	;
return	37:12	37:39	6	AVERROR_PATCHWELCOME
water	37:19	0:0	7	AVERROR_PATCHWELCOME
water	38:8	0:0	6	}
water	39:4	0:0	4	}
water	42:4	0:0	2	h_blocks
op	42:13	0:0	2	=
water	42:15	0:0	2	s
op	42:16	0:0	2	->
water	42:18	0:0	2	image_width
op	42:31	0:0	2	/
water	42:33	0:0	2	s
op	42:34	0:0	2	->
water	42:36	0:0	2	block_width
water	42:47	0:0	2	;
water	43:4	0:0	2	h_part
op	43:13	0:0	2	=
water	43:15	0:0	2	s
op	43:16	0:0	2	->
water	43:18	0:0	2	image_width
op	43:31	0:0	2	%
water	43:33	0:0	2	s
op	43:34	0:0	2	->
water	43:36	0:0	2	block_width
water	43:47	0:0	2	;
water	44:4	0:0	2	v_blocks
op	44:13	0:0	2	=
water	44:15	0:0	2	s
op	44:16	0:0	2	->
water	44:18	0:0	2	image_height
op	44:31	0:0	2	/
water	44:33	0:0	2	s
op	44:34	0:0	2	->
water	44:36	0:0	2	block_height
water	44:48	0:0	2	;
water	45:4	0:0	2	v_part
op	45:13	0:0	2	=
water	45:15	0:0	2	s
op	45:16	0:0	2	->
water	45:18	0:0	2	image_height
op	45:31	0:0	2	%
water	45:33	0:0	2	s
op	45:34	0:0	2	->
water	45:36	0:0	2	block_height
water	45:48	0:0	2	;
if	49:4	69:4	2	(s -> block_size < s -> block_width * s -> block_height)
cond	49:8	49:44	3	s -> block_size < s -> block_width * s -> block_height
water	49:8	0:0	4	s
op	49:9	0:0	4	->
water	49:11	0:0	4	block_size
op	49:22	0:0	4	<
water	49:24	0:0	4	s
op	49:25	0:0	4	->
water	49:27	0:0	4	block_width
op	49:39	0:0	4	*
water	49:41	0:0	4	s
op	49:42	0:0	4	->
water	49:44	0:0	4	block_height
stmts	49:58	69:4	3	
water	49:58	0:0	4	{
decl	50:8	50:64	4	int	tmpblock_size
op	50:26	0:0	4	=
water	50:28	0:0	4	3
op	50:30	0:0	4	*
water	50:32	0:0	4	s
op	50:33	0:0	4	->
water	50:35	0:0	4	block_width
op	50:47	0:0	4	*
water	50:49	0:0	4	s
op	50:50	0:0	4	->
water	50:52	0:0	4	block_height
water	52:8	0:0	4	s
op	52:9	0:0	4	->
water	52:11	0:0	4	tmpblock
op	52:20	0:0	4	=
call	52:22	52:59	4	av_realloc
arg	52:33	52:44	5	s->tmpblock
water	52:33	0:0	6	s
op	52:34	0:0	6	->
water	52:36	0:0	6	tmpblock
arg	52:46	52:59	5	tmpblock_size
water	52:46	0:0	6	tmpblock_size
water	52:60	0:0	4	;
if	53:8	56:8	4	(! s -> tmpblock)
cond	53:12	53:16	5	! s -> tmpblock
op	53:12	0:0	6	!
water	53:13	0:0	6	s
op	53:14	0:0	6	->
water	53:16	0:0	6	tmpblock
stmts	53:26	56:8	5	
water	53:26	0:0	6	{
call	54:12	54:80	6	av_log
arg	54:19	54:24	7	avctx
water	54:19	0:0	8	avctx
arg	54:26	54:38	7	AV_LOG_ERROR
water	54:26	0:0	8	AV_LOG_ERROR
arg	54:40	54:80	7	"Can't allocate decompression buffer.\n"
water	54:40	0:0	8	"Can't allocate decompression buffer.\n"
water	54:81	0:0	6	;
return	55:12	55:34	6	AVERROR(ENOMEM)
call	55:19	55:33	7	AVERROR
arg	55:27	55:33	8	ENOMEM
water	55:27	0:0	9	ENOMEM
water	56:8	0:0	6	}
if	57:8	68:8	4	(s -> ver == 2)
cond	57:12	57:22	5	s -> ver == 2
water	57:12	0:0	6	s
op	57:13	0:0	6	->
water	57:15	0:0	6	ver
op	57:19	0:0	6	==
water	57:22	0:0	6	2
stmts	57:25	68:8	5	
water	57:25	0:0	6	{
water	58:12	0:0	6	s
op	58:13	0:0	6	->
water	58:15	0:0	6	deflate_block_size
op	58:34	0:0	6	=
call	58:36	58:73	6	calc_deflate_block_size
arg	58:60	58:73	7	tmpblock_size
water	58:60	0:0	8	tmpblock_size
water	58:74	0:0	6	;
if	59:12	62:12	6	(s -> deflate_block_size <= 0)
cond	59:16	59:41	7	s -> deflate_block_size <= 0
water	59:16	0:0	8	s
op	59:17	0:0	8	->
water	59:19	0:0	8	deflate_block_size
op	59:38	0:0	8	<=
water	59:41	0:0	8	0
stmts	59:44	62:12	7	
water	59:44	0:0	8	{
call	60:16	60:84	8	av_log
arg	60:23	60:28	9	avctx
water	60:23	0:0	10	avctx
arg	60:30	60:42	9	AV_LOG_ERROR
water	60:30	0:0	10	AV_LOG_ERROR
arg	60:44	60:84	9	"Can't determine deflate buffer size.\n"
water	60:44	0:0	10	"Can't determine deflate buffer size.\n"
water	60:85	0:0	8	;
return	61:16	61:25	8	-1
op	61:23	0:0	9	-
water	61:24	0:0	9	1
water	62:12	0:0	8	}
water	63:12	0:0	6	s
op	63:13	0:0	6	->
water	63:15	0:0	6	deflate_block
op	63:29	0:0	6	=
call	63:31	63:81	6	av_realloc
arg	63:42	63:58	7	s->deflate_block
water	63:42	0:0	8	s
op	63:43	0:0	8	->
water	63:45	0:0	8	deflate_block
arg	63:60	63:81	7	s->deflate_block_size
water	63:60	0:0	8	s
op	63:61	0:0	8	->
water	63:63	0:0	8	deflate_block_size
water	63:82	0:0	6	;
if	64:12	67:12	6	(! s -> deflate_block)
cond	64:16	64:20	7	! s -> deflate_block
op	64:16	0:0	8	!
water	64:17	0:0	8	s
op	64:18	0:0	8	->
water	64:20	0:0	8	deflate_block
stmts	64:35	67:12	7	
water	64:35	0:0	8	{
call	65:16	65:78	8	av_log
arg	65:23	65:28	9	avctx
water	65:23	0:0	10	avctx
arg	65:30	65:42	9	AV_LOG_ERROR
water	65:30	0:0	10	AV_LOG_ERROR
arg	65:44	65:78	9	"Can't allocate deflate buffer.\n"
water	65:44	0:0	10	"Can't allocate deflate buffer.\n"
water	65:79	0:0	8	;
return	66:16	66:38	8	AVERROR(ENOMEM)
call	66:23	66:37	9	AVERROR
arg	66:31	66:37	10	ENOMEM
water	66:31	0:0	11	ENOMEM
water	67:12	0:0	8	}
water	68:8	0:0	6	}
water	69:4	0:0	4	}
water	70:4	0:0	2	s
op	70:5	0:0	2	->
water	70:7	0:0	2	block_size
op	70:18	0:0	2	=
water	70:20	0:0	2	s
op	70:21	0:0	2	->
water	70:23	0:0	2	block_width
op	70:35	0:0	2	*
water	70:37	0:0	2	s
op	70:38	0:0	2	->
water	70:40	0:0	2	block_height
water	70:52	0:0	2	;
if	73:4	75:4	2	(avctx -> width == 0 && avctx -> height == 0)
cond	73:8	73:46	3	avctx -> width == 0 && avctx -> height == 0
water	73:8	0:0	4	avctx
op	73:13	0:0	4	->
water	73:15	0:0	4	width
op	73:21	0:0	4	==
water	73:24	0:0	4	0
op	73:26	0:0	4	&&
water	73:29	0:0	4	avctx
op	73:34	0:0	4	->
water	73:36	0:0	4	height
op	73:43	0:0	4	==
water	73:46	0:0	4	0
stmts	73:49	75:4	3	
water	73:49	0:0	4	{
call	74:8	74:69	4	avcodec_set_dimensions
arg	74:31	74:36	5	avctx
water	74:31	0:0	6	avctx
arg	74:38	74:52	5	s->image_width
water	74:38	0:0	6	s
op	74:39	0:0	6	->
water	74:41	0:0	6	image_width
arg	74:54	74:69	5	s->image_height
water	74:54	0:0	6	s
op	74:55	0:0	6	->
water	74:57	0:0	6	image_height
water	74:70	0:0	4	;
water	75:4	0:0	4	}
if	78:4	84:4	2	(avctx -> width != s -> image_width || avctx -> height != s -> image_height)
cond	78:8	78:62	3	avctx -> width != s -> image_width || avctx -> height != s -> image_height
water	78:8	0:0	4	avctx
op	78:13	0:0	4	->
water	78:15	0:0	4	width
op	78:21	0:0	4	!=
water	78:24	0:0	4	s
op	78:25	0:0	4	->
water	78:27	0:0	4	image_width
op	78:39	0:0	4	||
water	78:42	0:0	4	avctx
op	78:47	0:0	4	->
water	78:49	0:0	4	height
op	78:56	0:0	4	!=
water	78:59	0:0	4	s
op	78:60	0:0	4	->
water	78:62	0:0	4	image_height
stmts	78:76	84:4	3	
water	78:76	0:0	4	{
call	79:8	80:66	4	av_log
arg	79:15	79:20	5	avctx
water	79:15	0:0	6	avctx
arg	79:22	79:34	5	AV_LOG_ERROR
water	79:22	0:0	6	AV_LOG_ERROR
arg	80:15	80:66	5	"Frame width or height differs from first frame!\n"
water	80:15	0:0	6	"Frame width or height differs from first frame!\n"
water	80:67	0:0	4	;
call	81:8	82:75	4	av_log
arg	81:15	81:20	5	avctx
water	81:15	0:0	6	avctx
arg	81:22	81:34	5	AV_LOG_ERROR
water	81:22	0:0	6	AV_LOG_ERROR
arg	81:36	81:76	5	"fh = %d, fv %d  vs  ch = %d, cv = %d\n"
water	81:36	0:0	6	"fh = %d, fv %d  vs  ch = %d, cv = %d\n"
arg	82:15	82:28	5	avctx->height
water	82:15	0:0	6	avctx
op	82:20	0:0	6	->
water	82:22	0:0	6	height
arg	82:30	82:42	5	avctx->width
water	82:30	0:0	6	avctx
op	82:35	0:0	6	->
water	82:37	0:0	6	width
arg	82:44	82:59	5	s->image_height
water	82:44	0:0	6	s
op	82:45	0:0	6	->
water	82:47	0:0	6	image_height
arg	82:61	82:75	5	s->image_width
water	82:61	0:0	6	s
op	82:62	0:0	6	->
water	82:64	0:0	6	image_width
water	82:76	0:0	4	;
return	83:8	83:34	4	AVERROR_INVALIDDATA
water	83:15	0:0	5	AVERROR_INVALIDDATA
water	84:4	0:0	4	}
water	87:4	0:0	2	s
op	87:5	0:0	2	->
water	87:7	0:0	2	is_keyframe
op	87:19	0:0	2	=
water	87:21	0:0	2	(
water	87:22	0:0	2	avpkt
op	87:27	0:0	2	->
water	87:29	0:0	2	flags
op	87:35	0:0	2	&
water	87:37	0:0	2	AV_PKT_FLAG_KEY
water	87:52	0:0	2	)
op	87:54	0:0	2	&&
water	87:57	0:0	2	(
water	87:58	0:0	2	s
op	87:59	0:0	2	->
water	87:61	0:0	2	ver
op	87:65	0:0	2	==
water	87:68	0:0	2	2
water	87:69	0:0	2	)
water	87:70	0:0	2	;
if	88:4	91:4	2	(s -> is_keyframe)
cond	88:8	88:11	3	s -> is_keyframe
water	88:8	0:0	4	s
op	88:9	0:0	4	->
water	88:11	0:0	4	is_keyframe
stmts	88:24	91:4	3	
water	88:24	0:0	4	{
water	89:8	0:0	4	s
op	89:9	0:0	4	->
water	89:11	0:0	4	keyframedata
op	89:24	0:0	4	=
call	89:26	89:65	4	av_realloc
arg	89:37	89:52	5	s->keyframedata
water	89:37	0:0	6	s
op	89:38	0:0	6	->
water	89:40	0:0	6	keyframedata
arg	89:54	89:65	5	avpkt->size
water	89:54	0:0	6	avpkt
op	89:59	0:0	6	->
water	89:61	0:0	6	size
water	89:66	0:0	4	;
call	90:8	90:56	4	memcpy
arg	90:15	90:30	5	s->keyframedata
water	90:15	0:0	6	s
op	90:16	0:0	6	->
water	90:18	0:0	6	keyframedata
arg	90:32	90:43	5	avpkt->data
water	90:32	0:0	6	avpkt
op	90:37	0:0	6	->
water	90:39	0:0	6	data
arg	90:45	90:56	5	avpkt->size
water	90:45	0:0	6	avpkt
op	90:50	0:0	6	->
water	90:52	0:0	6	size
water	90:57	0:0	4	;
water	91:4	0:0	4	}
if	92:4	94:55	2	(s -> ver == 2 && ! s -> blocks)
cond	92:7	92:26	3	s -> ver == 2 && ! s -> blocks
water	92:7	0:0	4	s
op	92:8	0:0	4	->
water	92:10	0:0	4	ver
op	92:14	0:0	4	==
water	92:17	0:0	4	2
op	92:19	0:0	4	&&
op	92:22	0:0	4	!
water	92:23	0:0	4	s
op	92:24	0:0	4	->
water	92:26	0:0	4	blocks
stmts	93:8	94:55	3	
water	93:8	0:0	4	s
op	93:9	0:0	4	->
water	93:11	0:0	4	blocks
op	93:18	0:0	4	=
call	93:20	94:54	4	av_mallocz
arg	93:31	94:54	5	(v_blocks+!!v_part)*(h_blocks+!!h_part)*sizeof(s->blocks[0])
water	93:31	0:0	6	(
water	93:32	0:0	6	v_blocks
op	93:41	0:0	6	+
op	93:43	0:0	6	!
op	93:44	0:0	6	!
water	93:45	0:0	6	v_part
water	93:51	0:0	6	)
op	93:53	0:0	6	*
water	93:55	0:0	6	(
water	93:56	0:0	6	h_blocks
op	93:65	0:0	6	+
op	93:67	0:0	6	!
op	93:68	0:0	6	!
water	93:69	0:0	6	h_part
water	93:75	0:0	6	)
op	94:32	0:0	6	*
op	94:34	0:0	6	sizeof
water	94:40	0:0	6	(
water	94:41	0:0	6	s
op	94:42	0:0	6	->
water	94:44	0:0	6	blocks
op	94:50	0:0	6	[
water	94:51	0:0	6	0
op	94:52	0:0	6	]
water	94:53	0:0	6	)
water	94:55	0:0	4	;
call	96:4	98:46	2	av_dlog
arg	96:12	96:17	3	avctx
water	96:12	0:0	4	avctx
arg	96:19	96:71	3	"image: %dx%d block: %dx%d num: %dx%d part: %dx%d\n"
water	96:19	0:0	4	"image: %dx%d block: %dx%d num: %dx%d part: %dx%d\n"
arg	97:12	97:26	3	s->image_width
water	97:12	0:0	4	s
op	97:13	0:0	4	->
water	97:15	0:0	4	image_width
arg	97:28	97:43	3	s->image_height
water	97:28	0:0	4	s
op	97:29	0:0	4	->
water	97:31	0:0	4	image_height
arg	97:45	97:59	3	s->block_width
water	97:45	0:0	4	s
op	97:46	0:0	4	->
water	97:48	0:0	4	block_width
arg	97:61	97:76	3	s->block_height
water	97:61	0:0	4	s
op	97:62	0:0	4	->
water	97:64	0:0	4	block_height
arg	98:12	98:20	3	h_blocks
water	98:12	0:0	4	h_blocks
arg	98:22	98:30	3	v_blocks
water	98:22	0:0	4	v_blocks
arg	98:32	98:38	3	h_part
water	98:32	0:0	4	h_part
arg	98:40	98:46	3	v_part
water	98:40	0:0	4	v_part
water	98:47	0:0	2	;
if	100:4	101:18	2	(( ret =ff_reget_buffer (avctx ,& s -> frame ) ) < 0)
cond	100:8	100:52	3	( ret =ff_reget_buffer (avctx ,& s -> frame ) ) < 0
water	100:8	0:0	4	(
water	100:9	0:0	4	ret
op	100:13	0:0	4	=
call	100:15	100:47	4	ff_reget_buffer
arg	100:31	100:36	5	avctx
water	100:31	0:0	6	avctx
arg	100:38	100:47	5	&s->frame
op	100:38	0:0	6	&
water	100:39	0:0	6	s
op	100:40	0:0	6	->
water	100:42	0:0	6	frame
water	100:48	0:0	4	)
op	100:50	0:0	4	<
water	100:52	0:0	4	0
stmts	101:8	101:18	3	
return	101:8	101:18	4	ret
water	101:15	0:0	5	ret
for	104:4	199:4	2	(j = 0 ;j < v_blocks + ( v_part ? 1 : 0 );j ++)
forinit	104:9	104:14	3	j = 0 ;
water	104:9	0:0	4	j
op	104:11	0:0	4	=
water	104:13	0:0	4	0
water	104:14	0:0	4	;
cond	104:16	104:46	3	j < v_blocks + ( v_part ? 1 : 0 )
water	104:16	0:0	4	j
op	104:18	0:0	4	<
water	104:20	0:0	4	v_blocks
op	104:29	0:0	4	+
water	104:31	0:0	4	(
water	104:32	0:0	4	v_part
water	104:39	0:0	4	?
water	104:41	0:0	4	1
water	104:43	0:0	4	:
water	104:45	0:0	4	0
water	104:46	0:0	4	)
forexpr	104:49	104:50	3	j ++
water	104:49	0:0	4	j
op	104:50	0:0	4	++
stmts	104:54	199:4	3	
water	104:54	0:0	4	{
decl	106:8	106:40	4	int	y_pos
op	106:19	0:0	4	=
water	106:21	0:0	4	j
op	106:23	0:0	4	*
water	106:25	0:0	4	s
op	106:26	0:0	4	->
water	106:28	0:0	4	block_height
decl	107:8	107:70	4	int	cur_blk_height
op	107:27	0:0	4	=
water	107:29	0:0	4	(
water	107:30	0:0	4	j
op	107:32	0:0	4	<
water	107:34	0:0	4	v_blocks
water	107:42	0:0	4	)
water	107:44	0:0	4	?
water	107:46	0:0	4	s
op	107:47	0:0	4	->
water	107:49	0:0	4	block_height
water	107:62	0:0	4	:
water	107:64	0:0	4	v_part
for	110:8	198:8	4	(i = 0 ;i < h_blocks + ( h_part ? 1 : 0 );i ++)
forinit	110:13	110:18	5	i = 0 ;
water	110:13	0:0	6	i
op	110:15	0:0	6	=
water	110:17	0:0	6	0
water	110:18	0:0	6	;
cond	110:20	110:50	5	i < h_blocks + ( h_part ? 1 : 0 )
water	110:20	0:0	6	i
op	110:22	0:0	6	<
water	110:24	0:0	6	h_blocks
op	110:33	0:0	6	+
water	110:35	0:0	6	(
water	110:36	0:0	6	h_part
water	110:43	0:0	6	?
water	110:45	0:0	6	1
water	110:47	0:0	6	:
water	110:49	0:0	6	0
water	110:50	0:0	6	)
forexpr	110:53	110:54	5	i ++
water	110:53	0:0	6	i
op	110:54	0:0	6	++
stmts	110:58	198:8	5	
water	110:58	0:0	6	{
decl	111:12	111:42	6	int	x_pos
op	111:22	0:0	6	=
water	111:24	0:0	6	i
op	111:26	0:0	6	*
water	111:28	0:0	6	s
op	111:29	0:0	6	->
water	111:31	0:0	6	block_width
decl	112:12	112:72	6	int	cur_blk_width
op	112:30	0:0	6	=
water	112:32	0:0	6	(
water	112:33	0:0	6	i
op	112:35	0:0	6	<
water	112:37	0:0	6	h_blocks
water	112:45	0:0	6	)
water	112:47	0:0	6	?
water	112:49	0:0	6	s
op	112:50	0:0	6	->
water	112:52	0:0	6	block_width
water	112:64	0:0	6	:
water	112:66	0:0	6	h_part
decl	113:12	113:28	6	int	has_diff
op	113:25	0:0	6	=
water	113:27	0:0	6	0
decl	116:12	116:40	6	int	size
op	116:21	0:0	6	=
call	116:23	116:39	7	get_bits
arg	116:32	116:35	8	&gb
op	116:32	0:0	9	&
water	116:33	0:0	9	gb
arg	116:37	116:39	8	16
water	116:37	0:0	9	16
water	118:12	0:0	6	s
op	118:13	0:0	6	->
water	118:15	0:0	6	color_depth
op	118:30	0:0	6	=
water	118:32	0:0	6	0
water	118:33	0:0	6	;
water	119:12	0:0	6	s
op	119:13	0:0	6	->
water	119:15	0:0	6	zlibprime_curr
op	119:30	0:0	6	=
water	119:32	0:0	6	0
water	119:33	0:0	6	;
water	120:12	0:0	6	s
op	120:13	0:0	6	->
water	120:15	0:0	6	zlibprime_prev
op	120:30	0:0	6	=
water	120:32	0:0	6	0
water	120:33	0:0	6	;
water	121:12	0:0	6	s
op	121:13	0:0	6	->
water	121:15	0:0	6	diff_start
op	121:30	0:0	6	=
water	121:32	0:0	6	0
water	121:33	0:0	6	;
water	122:12	0:0	6	s
op	122:13	0:0	6	->
water	122:15	0:0	6	diff_height
op	122:30	0:0	6	=
water	122:32	0:0	6	cur_blk_height
water	122:46	0:0	6	;
if	124:12	127:12	6	(8 * size >get_bits_left (& gb ))
cond	124:16	124:44	7	8 * size >get_bits_left (& gb )
water	124:16	0:0	8	8
op	124:18	0:0	8	*
water	124:20	0:0	8	size
op	124:25	0:0	8	>
call	124:27	124:44	8	get_bits_left
arg	124:41	124:44	9	&gb
op	124:41	0:0	10	&
water	124:42	0:0	10	gb
stmts	124:47	127:12	7	
water	124:47	0:0	8	{
call	125:16	125:40	8	av_frame_unref
arg	125:31	125:40	9	&s->frame
op	125:31	0:0	10	&
water	125:32	0:0	10	s
op	125:33	0:0	10	->
water	125:35	0:0	10	frame
water	125:41	0:0	8	;
return	126:16	126:42	8	AVERROR_INVALIDDATA
water	126:23	0:0	9	AVERROR_INVALIDDATA
water	127:12	0:0	8	}
if	129:12	177:12	6	(s -> ver == 2 && size)
cond	129:16	129:31	7	s -> ver == 2 && size
water	129:16	0:0	8	s
op	129:17	0:0	8	->
water	129:19	0:0	8	ver
op	129:23	0:0	8	==
water	129:26	0:0	8	2
op	129:28	0:0	8	&&
water	129:31	0:0	8	size
stmts	129:37	177:12	7	
water	129:37	0:0	8	{
call	130:16	130:32	8	skip_bits
arg	130:26	130:29	9	&gb
op	130:26	0:0	10	&
water	130:27	0:0	10	gb
arg	130:31	130:32	9	3
water	130:31	0:0	10	3
water	130:33	0:0	8	;
water	131:16	0:0	8	s
op	131:17	0:0	8	->
water	131:19	0:0	8	color_depth
op	131:34	0:0	8	=
call	131:36	131:51	8	get_bits
arg	131:45	131:48	9	&gb
op	131:45	0:0	10	&
water	131:46	0:0	10	gb
arg	131:50	131:51	9	2
water	131:50	0:0	10	2
water	131:52	0:0	8	;
water	132:16	0:0	8	has_diff
op	132:34	0:0	8	=
call	132:36	132:49	8	get_bits1
arg	132:46	132:49	9	&gb
op	132:46	0:0	10	&
water	132:47	0:0	10	gb
water	132:50	0:0	8	;
water	133:16	0:0	8	s
op	133:17	0:0	8	->
water	133:19	0:0	8	zlibprime_curr
op	133:34	0:0	8	=
call	133:36	133:49	8	get_bits1
arg	133:46	133:49	9	&gb
op	133:46	0:0	10	&
water	133:47	0:0	10	gb
water	133:50	0:0	8	;
water	134:16	0:0	8	s
op	134:17	0:0	8	->
water	134:19	0:0	8	zlibprime_prev
op	134:34	0:0	8	=
call	134:36	134:49	8	get_bits1
arg	134:46	134:49	9	&gb
op	134:46	0:0	10	&
water	134:47	0:0	10	gb
water	134:50	0:0	8	;
if	136:16	140:16	8	(s -> color_depth != 0 && s -> color_depth != 2)
cond	136:20	136:61	9	s -> color_depth != 0 && s -> color_depth != 2
water	136:20	0:0	10	s
op	136:21	0:0	10	->
water	136:23	0:0	10	color_depth
op	136:35	0:0	10	!=
water	136:38	0:0	10	0
op	136:40	0:0	10	&&
water	136:43	0:0	10	s
op	136:44	0:0	10	->
water	136:46	0:0	10	color_depth
op	136:58	0:0	10	!=
water	136:61	0:0	10	2
stmts	136:64	140:16	9	
water	136:64	0:0	10	{
call	137:20	138:81	10	av_log
arg	137:27	137:32	11	avctx
water	137:27	0:0	12	avctx
arg	137:34	137:46	11	AV_LOG_ERROR
water	137:34	0:0	12	AV_LOG_ERROR
arg	138:27	138:59	11	"%dx%d invalid color depth %d\n"
water	138:27	0:0	12	"%dx%d invalid color depth %d\n"
arg	138:61	138:62	11	i
water	138:61	0:0	12	i
arg	138:64	138:65	11	j
water	138:64	0:0	12	j
arg	138:67	138:81	11	s->color_depth
water	138:67	0:0	12	s
op	138:68	0:0	12	->
water	138:70	0:0	12	color_depth
water	138:82	0:0	10	;
return	139:20	139:46	10	AVERROR_INVALIDDATA
water	139:27	0:0	11	AVERROR_INVALIDDATA
water	140:16	0:0	10	}
if	142:16	158:16	8	(has_diff)
cond	142:20	142:20	9	has_diff
water	142:20	0:0	10	has_diff
stmts	142:30	158:16	9	
water	142:30	0:0	10	{
if	143:20	147:20	10	(! s -> keyframe)
cond	143:24	143:28	11	! s -> keyframe
op	143:24	0:0	12	!
water	143:25	0:0	12	s
op	143:26	0:0	12	->
water	143:28	0:0	12	keyframe
stmts	143:38	147:20	11	
water	143:38	0:0	12	{
call	144:24	145:63	12	av_log
arg	144:31	144:36	13	avctx
water	144:31	0:0	14	avctx
arg	144:38	144:50	13	AV_LOG_ERROR
water	144:38	0:0	14	AV_LOG_ERROR
arg	145:31	145:63	13	"inter frame without keyframe\n"
water	145:31	0:0	14	"inter frame without keyframe\n"
water	145:64	0:0	12	;
return	146:24	146:50	12	AVERROR_INVALIDDATA
water	146:31	0:0	13	AVERROR_INVALIDDATA
water	147:20	0:0	12	}
water	148:20	0:0	10	s
op	148:21	0:0	10	->
water	148:23	0:0	10	diff_start
op	148:35	0:0	10	=
call	148:37	148:52	10	get_bits
arg	148:46	148:49	11	&gb
op	148:46	0:0	12	&
water	148:47	0:0	12	gb
arg	148:51	148:52	11	8
water	148:51	0:0	12	8
water	148:53	0:0	10	;
water	149:20	0:0	10	s
op	149:21	0:0	10	->
water	149:23	0:0	10	diff_height
op	149:35	0:0	10	=
call	149:37	149:52	10	get_bits
arg	149:46	149:49	11	&gb
op	149:46	0:0	12	&
water	149:47	0:0	12	gb
arg	149:51	149:52	11	8
water	149:51	0:0	12	8
water	149:53	0:0	10	;
if	150:20	153:20	10	(s -> diff_start + s -> diff_height > cur_blk_height)
cond	150:24	150:57	11	s -> diff_start + s -> diff_height > cur_blk_height
water	150:24	0:0	12	s
op	150:25	0:0	12	->
water	150:27	0:0	12	diff_start
op	150:38	0:0	12	+
water	150:40	0:0	12	s
op	150:41	0:0	12	->
water	150:43	0:0	12	diff_height
op	150:55	0:0	12	>
water	150:57	0:0	12	cur_blk_height
stmts	150:73	153:20	11	
water	150:73	0:0	12	{
call	151:24	151:80	12	av_log
arg	151:31	151:36	13	avctx
water	151:31	0:0	14	avctx
arg	151:38	151:50	13	AV_LOG_ERROR
water	151:38	0:0	14	AV_LOG_ERROR
arg	151:52	151:80	13	"Block parameters invalid\n"
water	151:52	0:0	14	"Block parameters invalid\n"
water	151:81	0:0	12	;
return	152:24	152:50	12	AVERROR_INVALIDDATA
water	152:31	0:0	13	AVERROR_INVALIDDATA
water	153:20	0:0	12	}
call	154:20	156:62	10	av_log
arg	154:27	154:32	11	avctx
water	154:27	0:0	12	avctx
arg	154:34	154:46	11	AV_LOG_DEBUG
water	154:34	0:0	12	AV_LOG_DEBUG
arg	155:27	155:60	11	"%dx%d diff start %d height %d\n"
water	155:27	0:0	12	"%dx%d diff start %d height %d\n"
arg	156:27	156:28	11	i
water	156:27	0:0	12	i
arg	156:30	156:31	11	j
water	156:30	0:0	12	j
arg	156:33	156:46	11	s->diff_start
water	156:33	0:0	12	s
op	156:34	0:0	12	->
water	156:36	0:0	12	diff_start
arg	156:48	156:62	11	s->diff_height
water	156:48	0:0	12	s
op	156:49	0:0	12	->
water	156:51	0:0	12	diff_height
water	156:63	0:0	10	;
water	157:20	0:0	10	size
op	157:25	0:0	10	-=
water	157:28	0:0	10	2
water	157:29	0:0	10	;
water	158:16	0:0	10	}
if	160:16	161:79	8	(s -> zlibprime_prev)
cond	160:20	160:23	9	s -> zlibprime_prev
water	160:20	0:0	10	s
op	160:21	0:0	10	->
water	160:23	0:0	10	zlibprime_prev
stmts	161:20	161:79	9	
call	161:20	161:78	10	av_log
arg	161:27	161:32	11	avctx
water	161:27	0:0	12	avctx
arg	161:34	161:46	11	AV_LOG_DEBUG
water	161:34	0:0	12	AV_LOG_DEBUG
arg	161:48	161:72	11	"%dx%d zlibprime_prev\n"
water	161:48	0:0	12	"%dx%d zlibprime_prev\n"
arg	161:74	161:75	11	i
water	161:74	0:0	12	i
arg	161:77	161:78	11	j
water	161:77	0:0	12	j
water	161:79	0:0	10	;
if	163:16	170:16	8	(s -> zlibprime_curr)
cond	163:20	163:23	9	s -> zlibprime_curr
water	163:20	0:0	10	s
op	163:21	0:0	10	->
water	163:23	0:0	10	zlibprime_curr
stmts	163:39	170:16	9	
water	163:39	0:0	10	{
decl	164:20	164:46	10	int	col
op	164:28	0:0	10	=
call	164:30	164:45	11	get_bits
arg	164:39	164:42	12	&gb
op	164:39	0:0	13	&
water	164:40	0:0	13	gb
arg	164:44	164:45	12	8
water	164:44	0:0	13	8
decl	165:20	165:46	10	int	row
op	165:28	0:0	10	=
call	165:30	165:45	11	get_bits
arg	165:39	165:42	12	&gb
op	165:39	0:0	13	&
water	165:40	0:0	13	gb
arg	165:44	165:45	12	8
water	165:44	0:0	13	8
call	166:20	166:94	10	av_log
arg	166:27	166:32	11	avctx
water	166:27	0:0	12	avctx
arg	166:34	166:46	11	AV_LOG_DEBUG
water	166:34	0:0	12	AV_LOG_DEBUG
arg	166:48	166:78	11	"%dx%d zlibprime_curr %dx%d\n"
water	166:48	0:0	12	"%dx%d zlibprime_curr %dx%d\n"
arg	166:80	166:81	11	i
water	166:80	0:0	12	i
arg	166:83	166:84	11	j
water	166:83	0:0	12	j
arg	166:86	166:89	11	col
water	166:86	0:0	12	col
arg	166:91	166:94	11	row
water	166:91	0:0	12	row
water	166:95	0:0	10	;
water	167:20	0:0	10	size
op	167:25	0:0	10	-=
water	167:28	0:0	10	2
water	167:29	0:0	10	;
call	168:20	168:65	10	avpriv_request_sample
arg	168:42	168:47	11	avctx
water	168:42	0:0	12	avctx
arg	168:49	168:65	11	"zlibprime_curr"
water	168:49	0:0	12	"zlibprime_curr"
water	168:66	0:0	10	;
return	169:20	169:47	10	AVERROR_PATCHWELCOME
water	169:27	0:0	11	AVERROR_PATCHWELCOME
water	170:16	0:0	10	}
if	171:16	175:16	8	(! s -> blocks && ( s -> zlibprime_curr || s -> zlibprime_prev ))
cond	171:20	171:73	9	! s -> blocks && ( s -> zlibprime_curr || s -> zlibprime_prev )
op	171:20	0:0	10	!
water	171:21	0:0	10	s
op	171:22	0:0	10	->
water	171:24	0:0	10	blocks
op	171:31	0:0	10	&&
water	171:34	0:0	10	(
water	171:35	0:0	10	s
op	171:36	0:0	10	->
water	171:38	0:0	10	zlibprime_curr
op	171:53	0:0	10	||
water	171:56	0:0	10	s
op	171:57	0:0	10	->
water	171:59	0:0	10	zlibprime_prev
water	171:73	0:0	10	)
stmts	171:76	175:16	9	
water	171:76	0:0	10	{
call	172:20	173:38	10	av_log
arg	172:27	172:32	11	avctx
water	172:27	0:0	12	avctx
arg	172:34	172:46	11	AV_LOG_ERROR
water	172:34	0:0	12	AV_LOG_ERROR
arg	172:48	173:38	11	"no data available for zlib ""priming\n"
water	172:48	0:0	12	"no data available for zlib "
water	173:27	0:0	12	"priming\n"
water	173:39	0:0	10	;
return	174:20	174:46	10	AVERROR_INVALIDDATA
water	174:27	0:0	11	AVERROR_INVALIDDATA
water	175:16	0:0	10	}
water	176:16	0:0	8	size
op	176:20	0:0	8	--
water	176:22	0:0	8	;
water	177:12	0:0	8	}
if	179:12	187:12	6	(has_diff)
cond	179:16	179:16	7	has_diff
water	179:16	0:0	8	has_diff
stmts	179:26	187:12	7	
water	179:26	0:0	8	{
decl	180:16	180:21	8	int	k
decl	181:16	181:78	8	int	off
op	181:24	0:0	8	=
water	181:26	0:0	8	(
water	181:27	0:0	8	s
op	181:28	0:0	8	->
water	181:30	0:0	8	image_height
op	181:43	0:0	8	-
water	181:45	0:0	8	y_pos
op	181:51	0:0	8	-
water	181:53	0:0	8	1
water	181:54	0:0	8	)
op	181:56	0:0	8	*
water	181:58	0:0	8	s
op	181:59	0:0	8	->
water	181:61	0:0	8	frame
op	181:66	0:0	8	.
water	181:67	0:0	8	linesize
op	181:75	0:0	8	[
water	181:76	0:0	8	0
op	181:77	0:0	8	]
for	183:16	186:45	8	(k = 0 ;k < cur_blk_height;k ++)
forinit	183:21	183:26	9	k = 0 ;
water	183:21	0:0	10	k
op	183:23	0:0	10	=
water	183:25	0:0	10	0
water	183:26	0:0	10	;
cond	183:28	183:32	9	k < cur_blk_height
water	183:28	0:0	10	k
op	183:30	0:0	10	<
water	183:32	0:0	10	cur_blk_height
forexpr	183:48	183:49	9	k ++
water	183:48	0:0	10	k
op	183:49	0:0	10	++
stmts	184:20	186:45	9	
call	184:20	186:44	10	memcpy
arg	184:27	184:84	11	s->frame.data[0]+off-k*s->frame.linesize[0]+x_pos*3
water	184:27	0:0	12	s
op	184:28	0:0	12	->
water	184:30	0:0	12	frame
op	184:35	0:0	12	.
water	184:36	0:0	12	data
op	184:40	0:0	12	[
water	184:41	0:0	12	0
op	184:42	0:0	12	]
op	184:44	0:0	12	+
water	184:46	0:0	12	off
op	184:50	0:0	12	-
water	184:52	0:0	12	k
op	184:53	0:0	12	*
water	184:54	0:0	12	s
op	184:55	0:0	12	->
water	184:57	0:0	12	frame
op	184:62	0:0	12	.
water	184:63	0:0	12	linesize
op	184:71	0:0	12	[
water	184:72	0:0	12	0
op	184:73	0:0	12	]
op	184:75	0:0	12	+
water	184:77	0:0	12	x_pos
op	184:82	0:0	12	*
water	184:83	0:0	12	3
arg	185:27	185:79	11	s->keyframe+off-k*s->frame.linesize[0]+x_pos*3
water	185:27	0:0	12	s
op	185:28	0:0	12	->
water	185:30	0:0	12	keyframe
op	185:39	0:0	12	+
water	185:41	0:0	12	off
op	185:45	0:0	12	-
water	185:47	0:0	12	k
op	185:48	0:0	12	*
water	185:49	0:0	12	s
op	185:50	0:0	12	->
water	185:52	0:0	12	frame
op	185:57	0:0	12	.
water	185:58	0:0	12	linesize
op	185:66	0:0	12	[
water	185:67	0:0	12	0
op	185:68	0:0	12	]
op	185:70	0:0	12	+
water	185:72	0:0	12	x_pos
op	185:77	0:0	12	*
water	185:78	0:0	12	3
arg	186:27	186:44	11	cur_blk_width*3
water	186:27	0:0	12	cur_blk_width
op	186:41	0:0	12	*
water	186:43	0:0	12	3
water	186:45	0:0	10	;
water	187:12	0:0	8	}
if	190:12	197:12	6	(size)
cond	190:16	190:16	7	size
water	190:16	0:0	8	size
stmts	190:22	197:12	7	
water	190:22	0:0	8	{
if	191:16	196:75	8	(flashsv_decode_block (avctx ,avpkt ,& gb ,size ,cur_blk_width ,cur_blk_height ,x_pos ,y_pos ,i + j * ( h_blocks + ! ! h_part ) ))
cond	191:20	194:70	9	flashsv_decode_block (avctx ,avpkt ,& gb ,size ,cur_blk_width ,cur_blk_height ,x_pos ,y_pos ,i + j * ( h_blocks + ! ! h_part ) )
call	191:20	194:70	10	flashsv_decode_block
arg	191:41	191:46	11	avctx
water	191:41	0:0	12	avctx
arg	191:48	191:53	11	avpkt
water	191:48	0:0	12	avpkt
arg	191:55	191:58	11	&gb
op	191:55	0:0	12	&
water	191:56	0:0	12	gb
arg	191:60	191:64	11	size
water	191:60	0:0	12	size
arg	192:41	192:54	11	cur_blk_width
water	192:41	0:0	12	cur_blk_width
arg	192:56	192:70	11	cur_blk_height
water	192:56	0:0	12	cur_blk_height
arg	193:41	193:46	11	x_pos
water	193:41	0:0	12	x_pos
arg	193:48	193:53	11	y_pos
water	193:48	0:0	12	y_pos
arg	194:41	194:70	11	i+j*(h_blocks+!!h_part)
water	194:41	0:0	12	i
op	194:43	0:0	12	+
water	194:45	0:0	12	j
op	194:47	0:0	12	*
water	194:49	0:0	12	(
water	194:50	0:0	12	h_blocks
op	194:59	0:0	12	+
op	194:61	0:0	12	!
op	194:62	0:0	12	!
water	194:63	0:0	12	h_part
water	194:69	0:0	12	)
stmts	195:20	196:75	9	
call	195:20	196:74	10	av_log
arg	195:27	195:32	11	avctx
water	195:27	0:0	12	avctx
arg	195:34	195:46	11	AV_LOG_ERROR
water	195:34	0:0	12	AV_LOG_ERROR
arg	196:27	196:68	11	"error in decompression of block %dx%d\n"
water	196:27	0:0	12	"error in decompression of block %dx%d\n"
arg	196:70	196:71	11	i
water	196:70	0:0	12	i
arg	196:73	196:74	11	j
water	196:73	0:0	12	j
water	196:75	0:0	10	;
water	197:12	0:0	8	}
water	198:8	0:0	6	}
water	199:4	0:0	4	}
if	200:4	209:4	2	(s -> is_keyframe && s -> ver == 2)
cond	200:8	200:36	3	s -> is_keyframe && s -> ver == 2
water	200:8	0:0	4	s
op	200:9	0:0	4	->
water	200:11	0:0	4	is_keyframe
op	200:23	0:0	4	&&
water	200:26	0:0	4	s
op	200:27	0:0	4	->
water	200:29	0:0	4	ver
op	200:33	0:0	4	==
water	200:36	0:0	4	2
stmts	200:39	209:4	3	
water	200:39	0:0	4	{
if	201:8	207:8	4	(! s -> keyframe)
cond	201:12	201:16	5	! s -> keyframe
op	201:12	0:0	6	!
water	201:13	0:0	6	s
op	201:14	0:0	6	->
water	201:16	0:0	6	keyframe
stmts	201:26	207:8	5	
water	201:26	0:0	6	{
water	202:12	0:0	6	s
op	202:13	0:0	6	->
water	202:15	0:0	6	keyframe
op	202:24	0:0	6	=
call	202:26	202:72	6	av_malloc
arg	202:36	202:72	7	s->frame.linesize[0]*avctx->height
water	202:36	0:0	8	s
op	202:37	0:0	8	->
water	202:39	0:0	8	frame
op	202:44	0:0	8	.
water	202:45	0:0	8	linesize
op	202:53	0:0	8	[
water	202:54	0:0	8	0
op	202:55	0:0	8	]
op	202:57	0:0	8	*
water	202:59	0:0	8	avctx
op	202:64	0:0	8	->
water	202:66	0:0	8	height
water	202:73	0:0	6	;
if	203:12	206:12	6	(! s -> keyframe)
cond	203:16	203:20	7	! s -> keyframe
op	203:16	0:0	8	!
water	203:17	0:0	8	s
op	203:18	0:0	8	->
water	203:20	0:0	8	keyframe
stmts	203:30	206:12	7	
water	203:30	0:0	8	{
call	204:16	204:74	8	av_log
arg	204:23	204:28	9	avctx
water	204:23	0:0	10	avctx
arg	204:30	204:42	9	AV_LOG_ERROR
water	204:30	0:0	10	AV_LOG_ERROR
arg	204:44	204:74	9	"Cannot allocate image data\n"
water	204:44	0:0	10	"Cannot allocate image data\n"
water	204:75	0:0	8	;
return	205:16	205:38	8	AVERROR(ENOMEM)
call	205:23	205:37	9	AVERROR
arg	205:31	205:37	10	ENOMEM
water	205:31	0:0	11	ENOMEM
water	206:12	0:0	8	}
water	207:8	0:0	6	}
call	208:8	208:82	4	memcpy
arg	208:15	208:26	5	s->keyframe
water	208:15	0:0	6	s
op	208:16	0:0	6	->
water	208:18	0:0	6	keyframe
arg	208:28	208:44	5	s->frame.data[0]
water	208:28	0:0	6	s
op	208:29	0:0	6	->
water	208:31	0:0	6	frame
op	208:36	0:0	6	.
water	208:37	0:0	6	data
op	208:41	0:0	6	[
water	208:42	0:0	6	0
op	208:43	0:0	6	]
arg	208:46	208:82	5	s->frame.linesize[0]*avctx->height
water	208:46	0:0	6	s
op	208:47	0:0	6	->
water	208:49	0:0	6	frame
op	208:54	0:0	6	.
water	208:55	0:0	6	linesize
op	208:63	0:0	6	[
water	208:64	0:0	6	0
op	208:65	0:0	6	]
op	208:67	0:0	6	*
water	208:69	0:0	6	avctx
op	208:74	0:0	6	->
water	208:76	0:0	6	height
water	208:83	0:0	4	;
water	209:4	0:0	4	}
if	211:4	212:18	2	(( ret =av_frame_ref (data ,& s -> frame ) ) < 0)
cond	211:8	211:48	3	( ret =av_frame_ref (data ,& s -> frame ) ) < 0
water	211:8	0:0	4	(
water	211:9	0:0	4	ret
op	211:13	0:0	4	=
call	211:15	211:43	4	av_frame_ref
arg	211:28	211:32	5	data
water	211:28	0:0	6	data
arg	211:34	211:43	5	&s->frame
op	211:34	0:0	6	&
water	211:35	0:0	6	s
op	211:36	0:0	6	->
water	211:38	0:0	6	frame
water	211:44	0:0	4	)
op	211:46	0:0	4	<
water	211:48	0:0	4	0
stmts	212:8	212:18	3	
return	212:8	212:18	4	ret
water	212:15	0:0	5	ret
op	214:4	0:0	2	*
water	214:5	0:0	2	got_frame
op	214:15	0:0	2	=
water	214:17	0:0	2	1
water	214:18	0:0	2	;
if	216:4	218:51	2	((get_bits_count (& gb ) / 8 ) != buf_size)
cond	216:8	216:37	3	(get_bits_count (& gb ) / 8 ) != buf_size
water	216:8	0:0	4	(
call	216:9	216:27	4	get_bits_count
arg	216:24	216:27	5	&gb
op	216:24	0:0	6	&
water	216:25	0:0	6	gb
op	216:29	0:0	4	/
water	216:31	0:0	4	8
water	216:32	0:0	4	)
op	216:34	0:0	4	!=
water	216:37	0:0	4	buf_size
stmts	217:8	218:51	3	
call	217:8	218:50	4	av_log
arg	217:15	217:20	5	avctx
water	217:15	0:0	6	avctx
arg	217:22	217:34	5	AV_LOG_ERROR
water	217:22	0:0	6	AV_LOG_ERROR
arg	217:36	217:76	5	"buffer not fully consumed (%d != %d)\n"
water	217:36	0:0	6	"buffer not fully consumed (%d != %d)\n"
arg	218:15	218:23	5	buf_size
water	218:15	0:0	6	buf_size
arg	218:25	218:50	5	(get_bits_count(&gb)/8)
water	218:25	0:0	6	(
call	218:26	218:44	6	get_bits_count
arg	218:41	218:44	7	&gb
op	218:41	0:0	8	&
water	218:42	0:0	8	gb
op	218:46	0:0	6	/
water	218:48	0:0	6	8
water	218:49	0:0	6	)
water	218:51	0:0	4	;
return	221:4	221:19	2	buf_size
water	221:11	0:0	3	buf_size
