func	2:0	110:0	0	static int	decode_frame
params	2:23	0:0	1	
param	2:24	2:45	2	AVCodecContext *	avctx
param	2:47	2:57	2	void *	data
param	2:59	2:73	2	int *	data_size
param	2:75	2:90	2	AVPacket *	avpkt
stmnts	0:0	109:22	1	
decl	4:4	4:36	2	const uint8_t	*buf
op	4:23	0:0	2	=
water	4:25	0:0	2	avpkt
op	4:30	0:0	2	->
water	4:32	0:0	2	data
decl	5:4	5:46	2	const uint8_t	*buf_end
op	5:27	0:0	2	=
water	5:29	0:0	2	buf
op	5:33	0:0	2	+
water	5:35	0:0	2	avpkt
op	5:40	0:0	2	->
water	5:42	0:0	2	size
water	6:4	0:0	2	KgvContext
op	6:15	0:0	2	*
water	6:17	0:0	2	const
water	6:23	0:0	2	c
op	6:25	0:0	2	=
water	6:27	0:0	2	avctx
op	6:32	0:0	2	->
water	6:34	0:0	2	priv_data
water	6:43	0:0	2	;
decl	7:4	7:18	2	int	offsets[7]
decl	8:4	8:24	2	uint16_t	*out
water	8:17	0:0	2	,
decl	8:4	8:24	2	uint16_t	*prev
decl	9:4	9:26	2	int	outcnt
op	9:15	0:0	2	=
water	9:17	0:0	2	0
water	9:18	0:0	2	,
decl	9:4	9:26	2	int	maxcnt
decl	10:4	10:15	2	int	w
water	10:9	0:0	2	,
decl	10:4	10:15	2	int	h
water	10:12	0:0	2	,
decl	10:4	10:15	2	int	i
if	12:4	13:17	2	(avpkt -> size < 2)
cond	12:8	12:22	3	avpkt -> size < 2
water	12:8	0:0	4	avpkt
op	12:13	0:0	4	->
water	12:15	0:0	4	size
op	12:20	0:0	4	<
water	12:22	0:0	4	2
stmts	13:8	13:17	3	
return	13:8	13:17	4	-1
op	13:15	0:0	5	-
water	13:16	0:0	5	1
water	15:4	0:0	2	w
op	15:6	0:0	2	=
water	15:8	0:0	2	(
water	15:9	0:0	2	buf
op	15:12	0:0	2	[
water	15:13	0:0	2	0
op	15:14	0:0	2	]
op	15:16	0:0	2	+
water	15:18	0:0	2	1
water	15:19	0:0	2	)
op	15:21	0:0	2	*
water	15:23	0:0	2	8
water	15:24	0:0	2	;
water	16:4	0:0	2	h
op	16:6	0:0	2	=
water	16:8	0:0	2	(
water	16:9	0:0	2	buf
op	16:12	0:0	2	[
water	16:13	0:0	2	1
op	16:14	0:0	2	]
op	16:16	0:0	2	+
water	16:18	0:0	2	1
water	16:19	0:0	2	)
op	16:21	0:0	2	*
water	16:23	0:0	2	8
water	16:24	0:0	2	;
water	17:4	0:0	2	buf
op	17:8	0:0	2	+=
water	17:11	0:0	2	2
water	17:12	0:0	2	;
if	19:4	20:17	2	(av_image_check_size (w ,h ,0 ,avctx ))
cond	19:8	19:42	3	av_image_check_size (w ,h ,0 ,avctx )
call	19:8	19:42	4	av_image_check_size
arg	19:28	19:29	5	w
water	19:28	0:0	6	w
arg	19:31	19:32	5	h
water	19:31	0:0	6	h
arg	19:34	19:35	5	0
water	19:34	0:0	6	0
arg	19:37	19:42	5	avctx
water	19:37	0:0	6	avctx
stmts	20:8	20:17	3	
return	20:8	20:17	4	-1
op	20:15	0:0	5	-
water	20:16	0:0	5	1
if	22:4	23:43	2	(w != avctx -> width || h != avctx -> height)
cond	22:8	22:41	3	w != avctx -> width || h != avctx -> height
water	22:8	0:0	4	w
op	22:10	0:0	4	!=
water	22:13	0:0	4	avctx
op	22:18	0:0	4	->
water	22:20	0:0	4	width
op	22:26	0:0	4	||
water	22:29	0:0	4	h
op	22:31	0:0	4	!=
water	22:34	0:0	4	avctx
op	22:39	0:0	4	->
water	22:41	0:0	4	height
stmts	23:8	23:43	3	
call	23:8	23:42	4	avcodec_set_dimensions
arg	23:31	23:36	5	avctx
water	23:31	0:0	6	avctx
arg	23:38	23:39	5	w
water	23:38	0:0	6	w
arg	23:41	23:42	5	h
water	23:41	0:0	6	h
water	23:43	0:0	4	;
water	25:4	0:0	2	maxcnt
op	25:11	0:0	2	=
water	25:13	0:0	2	w
op	25:15	0:0	2	*
water	25:17	0:0	2	h
water	25:18	0:0	2	;
water	27:4	0:0	2	out
op	27:8	0:0	2	=
call	27:10	27:38	2	av_realloc
arg	27:21	27:27	3	c->cur
water	27:21	0:0	4	c
op	27:22	0:0	4	->
water	27:24	0:0	4	cur
arg	27:29	27:38	3	w*h*2
water	27:29	0:0	4	w
op	27:31	0:0	4	*
water	27:33	0:0	4	h
op	27:35	0:0	4	*
water	27:37	0:0	4	2
water	27:39	0:0	2	;
if	28:4	29:17	2	(! out)
cond	28:8	28:9	3	! out
op	28:8	0:0	4	!
water	28:9	0:0	4	out
stmts	29:8	29:17	3	
return	29:8	29:17	4	-1
op	29:15	0:0	5	-
water	29:16	0:0	5	1
water	30:4	0:0	2	c
op	30:5	0:0	2	->
water	30:7	0:0	2	cur
op	30:11	0:0	2	=
water	30:13	0:0	2	out
water	30:16	0:0	2	;
water	32:4	0:0	2	prev
op	32:9	0:0	2	=
call	32:11	32:40	2	av_realloc
arg	32:22	32:29	3	c->prev
water	32:22	0:0	4	c
op	32:23	0:0	4	->
water	32:25	0:0	4	prev
arg	32:31	32:40	3	w*h*2
water	32:31	0:0	4	w
op	32:33	0:0	4	*
water	32:35	0:0	4	h
op	32:37	0:0	4	*
water	32:39	0:0	4	2
water	32:41	0:0	2	;
if	33:4	34:17	2	(! prev)
cond	33:8	33:9	3	! prev
op	33:8	0:0	4	!
water	33:9	0:0	4	prev
stmts	34:8	34:17	3	
return	34:8	34:17	4	-1
op	34:15	0:0	5	-
water	34:16	0:0	5	1
water	35:4	0:0	2	c
op	35:5	0:0	2	->
water	35:7	0:0	2	prev
op	35:12	0:0	2	=
water	35:14	0:0	2	prev
water	35:18	0:0	2	;
for	37:4	38:23	2	(i = 0 ;i < 7;i ++)
forinit	37:9	37:14	3	i = 0 ;
water	37:9	0:0	4	i
op	37:11	0:0	4	=
water	37:13	0:0	4	0
water	37:14	0:0	4	;
cond	37:16	37:20	3	i < 7
water	37:16	0:0	4	i
op	37:18	0:0	4	<
water	37:20	0:0	4	7
forexpr	37:23	37:24	3	i ++
water	37:23	0:0	4	i
op	37:24	0:0	4	++
stmts	38:8	38:23	3	
water	38:8	0:0	4	offsets
op	38:15	0:0	4	[
water	38:16	0:0	4	i
op	38:17	0:0	4	]
op	38:19	0:0	4	=
op	38:21	0:0	4	-
water	38:22	0:0	4	1
water	38:23	0:0	4	;
while	40:4	96:4	2	(outcnt < maxcnt && buf_end - 2 > buf)
cond	40:11	40:44	3	outcnt < maxcnt && buf_end - 2 > buf
water	40:11	0:0	4	outcnt
op	40:18	0:0	4	<
water	40:20	0:0	4	maxcnt
op	40:27	0:0	4	&&
water	40:30	0:0	4	buf_end
op	40:38	0:0	4	-
water	40:40	0:0	4	2
op	40:42	0:0	4	>
water	40:44	0:0	4	buf
stmts	40:49	96:4	3	
water	40:49	0:0	4	{
decl	41:8	41:31	4	int	code
op	41:17	0:0	4	=
call	41:19	41:30	5	AV_RL16
arg	41:27	41:30	6	buf
water	41:27	0:0	7	buf
water	42:8	0:0	4	buf
op	42:12	0:0	4	+=
water	42:15	0:0	4	2
water	42:16	0:0	4	;
if	44:8	46:8	4	(! ( code & 0 x8000 ))
cond	44:12	44:27	5	! ( code & 0 x8000 )
op	44:12	0:0	6	!
water	44:13	0:0	6	(
water	44:14	0:0	6	code
op	44:19	0:0	6	&
water	44:21	0:0	6	0
water	44:22	0:0	6	x8000
water	44:27	0:0	6	)
stmts	44:30	46:8	5	
water	44:30	0:0	6	{
water	45:12	0:0	6	out
op	45:15	0:0	6	[
water	45:16	0:0	6	outcnt
op	45:22	0:0	6	++
op	45:24	0:0	6	]
op	45:26	0:0	6	=
water	45:28	0:0	6	code
water	45:32	0:0	6	;
water	46:8	0:0	6	}
else	46:10	95:8	4
stmts	46:15	95:8	5	
water	46:15	0:0	6	{
decl	47:12	47:21	6	int	count
decl	48:12	48:25	6	uint16_t	*inp
if	50:12	70:12	6	(( code & 0 x6000 ) == 0 x6000)
cond	50:16	50:36	7	( code & 0 x6000 ) == 0 x6000
water	50:16	0:0	8	(
water	50:17	0:0	8	code
op	50:22	0:0	8	&
water	50:24	0:0	8	0
water	50:25	0:0	8	x6000
water	50:30	0:0	8	)
op	50:32	0:0	8	==
water	50:35	0:0	8	0
water	50:36	0:0	8	x6000
stmts	50:43	70:12	7	
water	50:43	0:0	8	{
decl	52:16	52:43	8	int	oidx
op	52:25	0:0	8	=
water	52:27	0:0	8	(
water	52:28	0:0	8	code
op	52:33	0:0	8	>>
water	52:36	0:0	8	10
water	52:38	0:0	8	)
op	52:40	0:0	8	&
water	52:42	0:0	8	7
decl	53:16	53:25	8	int	start
water	55:16	0:0	8	count
op	55:22	0:0	8	=
water	55:24	0:0	8	(
water	55:25	0:0	8	code
op	55:30	0:0	8	&
water	55:32	0:0	8	0
water	55:33	0:0	8	x3FF
water	55:37	0:0	8	)
op	55:39	0:0	8	+
water	55:41	0:0	8	3
water	55:42	0:0	8	;
if	57:16	62:16	8	(offsets [ oidx ] < 0)
cond	57:20	57:36	9	offsets [ oidx ] < 0
water	57:20	0:0	10	offsets
op	57:27	0:0	10	[
water	57:28	0:0	10	oidx
op	57:32	0:0	10	]
op	57:34	0:0	10	<
water	57:36	0:0	10	0
stmts	57:39	62:16	9	
water	57:39	0:0	10	{
if	58:20	59:29	10	(buf_end - 3 < buf)
cond	58:24	58:38	11	buf_end - 3 < buf
water	58:24	0:0	12	buf_end
op	58:32	0:0	12	-
water	58:34	0:0	12	3
op	58:36	0:0	12	<
water	58:38	0:0	12	buf
stmts	59:24	59:29	11	
break	59:24	59:29	12	
water	60:20	0:0	10	offsets
op	60:27	0:0	10	[
water	60:28	0:0	10	oidx
op	60:32	0:0	10	]
op	60:34	0:0	10	=
call	60:36	60:47	10	AV_RL24
arg	60:44	60:47	11	buf
water	60:44	0:0	12	buf
water	60:48	0:0	10	;
water	61:20	0:0	10	buf
op	61:24	0:0	10	+=
water	61:27	0:0	10	3
water	61:28	0:0	10	;
water	62:16	0:0	10	}
water	64:16	0:0	8	start
op	64:22	0:0	8	=
water	64:24	0:0	8	(
water	64:25	0:0	8	outcnt
op	64:32	0:0	8	+
water	64:34	0:0	8	offsets
op	64:41	0:0	8	[
water	64:42	0:0	8	oidx
op	64:46	0:0	8	]
water	64:47	0:0	8	)
op	64:49	0:0	8	%
water	64:51	0:0	8	maxcnt
water	64:57	0:0	8	;
if	66:16	67:25	8	(maxcnt - start < count)
cond	66:20	66:37	9	maxcnt - start < count
water	66:20	0:0	10	maxcnt
op	66:27	0:0	10	-
water	66:29	0:0	10	start
op	66:35	0:0	10	<
water	66:37	0:0	10	count
stmts	67:20	67:25	9	
break	67:20	67:25	10	
water	69:16	0:0	8	inp
op	69:20	0:0	8	=
water	69:22	0:0	8	prev
op	69:27	0:0	8	+
water	69:29	0:0	8	start
water	69:34	0:0	8	;
water	70:12	0:0	8	}
else	70:14	88:12	6
stmts	70:19	88:12	7	
water	70:19	0:0	8	{
decl	72:16	72:48	8	int	offset
op	72:27	0:0	8	=
water	72:29	0:0	8	(
water	72:30	0:0	8	code
op	72:35	0:0	8	&
water	72:37	0:0	8	0
water	72:38	0:0	8	x1FFF
water	72:43	0:0	8	)
op	72:45	0:0	8	+
water	72:47	0:0	8	1
if	74:16	76:16	8	(! ( code & 0 x6000 ))
cond	74:20	74:35	9	! ( code & 0 x6000 )
op	74:20	0:0	10	!
water	74:21	0:0	10	(
water	74:22	0:0	10	code
op	74:27	0:0	10	&
water	74:29	0:0	10	0
water	74:30	0:0	10	x6000
water	74:35	0:0	10	)
stmts	74:38	76:16	9	
water	74:38	0:0	10	{
water	75:20	0:0	10	count
op	75:26	0:0	10	=
water	75:28	0:0	10	2
water	75:29	0:0	10	;
water	76:16	0:0	10	}
else	76:18	78:16	8
stmts	76:23	78:16	9	
if	76:23	78:16	10	(( code & 0 x6000 ) == 0 x2000)
cond	76:27	76:47	11	( code & 0 x6000 ) == 0 x2000
water	76:27	0:0	12	(
water	76:28	0:0	12	code
op	76:33	0:0	12	&
water	76:35	0:0	12	0
water	76:36	0:0	12	x6000
water	76:41	0:0	12	)
op	76:43	0:0	12	==
water	76:46	0:0	12	0
water	76:47	0:0	12	x2000
stmts	76:54	78:16	11	
water	76:54	0:0	12	{
water	77:20	0:0	12	count
op	77:26	0:0	12	=
water	77:28	0:0	12	3
water	77:29	0:0	12	;
water	78:16	0:0	12	}
else	78:18	82:16	8
stmts	78:23	82:16	9	
water	78:23	0:0	10	{
if	79:20	80:29	10	(buf_end - 1 < buf)
cond	79:24	79:38	11	buf_end - 1 < buf
water	79:24	0:0	12	buf_end
op	79:32	0:0	12	-
water	79:34	0:0	12	1
op	79:36	0:0	12	<
water	79:38	0:0	12	buf
stmts	80:24	80:29	11	
break	80:24	80:29	12	
water	81:20	0:0	10	count
op	81:26	0:0	10	=
water	81:28	0:0	10	4
op	81:30	0:0	10	+
op	81:32	0:0	10	*
water	81:33	0:0	10	buf
op	81:36	0:0	10	++
water	81:38	0:0	10	;
water	82:16	0:0	10	}
if	84:16	85:25	8	(outcnt < offset)
cond	84:20	84:29	9	outcnt < offset
water	84:20	0:0	10	outcnt
op	84:27	0:0	10	<
water	84:29	0:0	10	offset
stmts	85:20	85:25	9	
break	85:20	85:25	10	
water	87:16	0:0	8	inp
op	87:20	0:0	8	=
water	87:22	0:0	8	out
op	87:26	0:0	8	+
water	87:28	0:0	8	outcnt
op	87:35	0:0	8	-
water	87:37	0:0	8	offset
water	87:43	0:0	8	;
water	88:12	0:0	8	}
if	90:12	91:21	6	(maxcnt - outcnt < count)
cond	90:16	90:34	7	maxcnt - outcnt < count
water	90:16	0:0	8	maxcnt
op	90:23	0:0	8	-
water	90:25	0:0	8	outcnt
op	90:32	0:0	8	<
water	90:34	0:0	8	count
stmts	91:16	91:21	7	
break	91:16	91:21	8	
for	93:12	94:38	6	(i = 0 ;i < count;i ++)
forinit	93:17	93:22	7	i = 0 ;
water	93:17	0:0	8	i
op	93:19	0:0	8	=
water	93:21	0:0	8	0
water	93:22	0:0	8	;
cond	93:24	93:28	7	i < count
water	93:24	0:0	8	i
op	93:26	0:0	8	<
water	93:28	0:0	8	count
forexpr	93:35	93:36	7	i ++
water	93:35	0:0	8	i
op	93:36	0:0	8	++
stmts	94:16	94:38	7	
water	94:16	0:0	8	out
op	94:19	0:0	8	[
water	94:20	0:0	8	outcnt
op	94:26	0:0	8	++
op	94:28	0:0	8	]
op	94:30	0:0	8	=
water	94:32	0:0	8	inp
op	94:35	0:0	8	[
water	94:36	0:0	8	i
op	94:37	0:0	8	]
water	94:38	0:0	8	;
water	95:8	0:0	6	}
water	96:4	0:0	4	}
if	98:4	99:85	2	(outcnt - maxcnt)
cond	98:8	98:17	3	outcnt - maxcnt
water	98:8	0:0	4	outcnt
op	98:15	0:0	4	-
water	98:17	0:0	4	maxcnt
stmts	99:8	99:85	3	
call	99:8	99:84	4	av_log
arg	99:15	99:20	5	avctx
water	99:15	0:0	6	avctx
arg	99:22	99:34	5	AV_LOG_DEBUG
water	99:22	0:0	6	AV_LOG_DEBUG
arg	99:36	99:67	5	"frame finished with %d diff\n"
water	99:36	0:0	6	"frame finished with %d diff\n"
arg	99:69	99:84	5	outcnt-maxcnt
water	99:69	0:0	6	outcnt
op	99:76	0:0	6	-
water	99:78	0:0	6	maxcnt
water	99:85	0:0	4	;
water	101:4	0:0	2	c
op	101:5	0:0	2	->
water	101:7	0:0	2	pic
op	101:10	0:0	2	.
water	101:11	0:0	2	data
op	101:15	0:0	2	[
water	101:16	0:0	2	0
op	101:17	0:0	2	]
op	101:23	0:0	2	=
water	101:25	0:0	2	(
water	101:26	0:0	2	uint8_t
op	101:34	0:0	2	*
water	101:35	0:0	2	)
water	101:36	0:0	2	c
op	101:37	0:0	2	->
water	101:39	0:0	2	cur
water	101:42	0:0	2	;
water	102:4	0:0	2	c
op	102:5	0:0	2	->
water	102:7	0:0	2	pic
op	102:10	0:0	2	.
water	102:11	0:0	2	linesize
op	102:19	0:0	2	[
water	102:20	0:0	2	0
op	102:21	0:0	2	]
op	102:23	0:0	2	=
water	102:25	0:0	2	w
op	102:27	0:0	2	*
water	102:29	0:0	2	2
water	102:30	0:0	2	;
op	104:4	0:0	2	*
water	104:5	0:0	2	data_size
op	104:15	0:0	2	=
op	104:17	0:0	2	sizeof
water	104:23	0:0	2	(
water	104:24	0:0	2	AVFrame
water	104:31	0:0	2	)
water	104:32	0:0	2	;
op	105:4	0:0	2	*
water	105:5	0:0	2	(
water	105:6	0:0	2	AVFrame
op	105:13	0:0	2	*
water	105:14	0:0	2	)
water	105:15	0:0	2	data
op	105:20	0:0	2	=
water	105:22	0:0	2	c
op	105:23	0:0	2	->
water	105:25	0:0	2	pic
water	105:28	0:0	2	;
call	107:4	107:38	2	FFSWAP
arg	107:11	107:21	3	uint16_t*
water	107:11	0:0	4	uint16_t
op	107:20	0:0	4	*
arg	107:23	107:29	3	c->cur
water	107:23	0:0	4	c
op	107:24	0:0	4	->
water	107:26	0:0	4	cur
arg	107:31	107:38	3	c->prev
water	107:31	0:0	4	c
op	107:32	0:0	4	->
water	107:34	0:0	4	prev
water	107:39	0:0	2	;
return	109:4	109:22	2	avpkt->size
water	109:11	0:0	3	avpkt
op	109:16	0:0	3	->
water	109:18	0:0	3	size
