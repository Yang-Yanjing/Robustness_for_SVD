func	2:0	61:0	0	static int	read_tfra
params	2:20	0:0	1	
param	2:21	2:36	2	MOVContext *	mov
param	2:38	2:52	2	AVIOContext *	f
stmnts	0:0	60:12	1	
decl	4:4	4:34	2	MOVFragmentIndex	*index
op	4:28	0:0	2	=
water	4:30	0:0	2	NULL
decl	5:4	5:34	2	int	version
water	5:15	0:0	2	,
decl	5:4	5:34	2	int	fieldlength
water	5:28	0:0	2	,
decl	5:4	5:34	2	int	i
water	5:31	0:0	2	,
decl	5:4	5:34	2	int	j
decl	6:4	6:30	2	int64_t	pos
op	6:16	0:0	2	=
call	6:18	6:29	3	avio_tell
arg	6:28	6:29	4	f
water	6:28	0:0	5	f
decl	7:4	7:32	2	uint32_t	size
op	7:18	0:0	2	=
call	7:20	7:31	3	avio_rb32
arg	7:30	7:31	4	f
water	7:30	0:0	5	f
decl	8:4	8:13	2	void	*tmp
if	10:4	12:4	2	(avio_rb32 (f ) !=MKBETAG ('t' ,'f' ,'r' ,'a' ))
cond	10:8	10:50	3	avio_rb32 (f ) !=MKBETAG ('t' ,'f' ,'r' ,'a' )
call	10:8	10:19	4	avio_rb32
arg	10:18	10:19	5	f
water	10:18	0:0	6	f
op	10:21	0:0	4	!=
call	10:24	10:50	4	MKBETAG
arg	10:32	10:35	5	't'
water	10:32	0:0	6	't'
arg	10:37	10:40	5	'f'
water	10:37	0:0	6	'f'
arg	10:42	10:45	5	'r'
water	10:42	0:0	6	'r'
arg	10:47	10:50	5	'a'
water	10:47	0:0	6	'a'
stmts	10:53	12:4	3	
water	10:53	0:0	4	{
return	11:8	11:16	4	1
water	11:15	0:0	5	1
water	12:4	0:0	4	}
call	13:4	13:50	2	av_log
arg	13:11	13:18	3	mov->fc
water	13:11	0:0	4	mov
op	13:14	0:0	4	->
water	13:16	0:0	4	fc
arg	13:20	13:34	3	AV_LOG_VERBOSE
water	13:20	0:0	4	AV_LOG_VERBOSE
arg	13:36	13:50	3	"found tfra\n"
water	13:36	0:0	4	"found tfra\n"
water	13:51	0:0	2	;
water	14:4	0:0	2	index
op	14:10	0:0	2	=
call	14:12	14:47	2	av_mallocz
arg	14:23	14:47	3	sizeof(MOVFragmentIndex)
op	14:23	0:0	4	sizeof
water	14:29	0:0	4	(
water	14:30	0:0	4	MOVFragmentIndex
water	14:46	0:0	4	)
water	14:48	0:0	2	;
if	15:4	17:4	2	(! index)
cond	15:8	15:9	3	! index
op	15:8	0:0	4	!
water	15:9	0:0	4	index
stmts	15:16	17:4	3	
water	15:16	0:0	4	{
return	16:8	16:30	4	AVERROR(ENOMEM)
call	16:15	16:29	5	AVERROR
arg	16:23	16:29	6	ENOMEM
water	16:23	0:0	7	ENOMEM
water	17:4	0:0	4	}
water	19:4	0:0	2	tmp
op	19:8	0:0	2	=
call	19:10	21:52	2	av_realloc_array
arg	19:27	19:51	3	mov->fragment_index_data
water	19:27	0:0	4	mov
op	19:30	0:0	4	->
water	19:32	0:0	4	fragment_index_data
arg	20:27	20:56	3	mov->fragment_index_count+1
water	20:27	0:0	4	mov
op	20:30	0:0	4	->
water	20:32	0:0	4	fragment_index_count
op	20:53	0:0	4	+
water	20:55	0:0	4	1
arg	21:27	21:52	3	sizeof(MOVFragmentIndex*)
op	21:27	0:0	4	sizeof
water	21:33	0:0	4	(
water	21:34	0:0	4	MOVFragmentIndex
op	21:50	0:0	4	*
water	21:51	0:0	4	)
water	21:53	0:0	2	;
if	22:4	25:4	2	(! tmp)
cond	22:8	22:9	3	! tmp
op	22:8	0:0	4	!
water	22:9	0:0	4	tmp
stmts	22:14	25:4	3	
water	22:14	0:0	4	{
call	23:8	23:23	4	av_freep
arg	23:17	23:23	5	&index
op	23:17	0:0	6	&
water	23:18	0:0	6	index
water	23:24	0:0	4	;
return	24:8	24:30	4	AVERROR(ENOMEM)
call	24:15	24:29	5	AVERROR
arg	24:23	24:29	6	ENOMEM
water	24:23	0:0	7	ENOMEM
water	25:4	0:0	4	}
water	26:4	0:0	2	mov
op	26:7	0:0	2	->
water	26:9	0:0	2	fragment_index_data
op	26:29	0:0	2	=
water	26:31	0:0	2	tmp
water	26:34	0:0	2	;
water	27:4	0:0	2	mov
op	27:7	0:0	2	->
water	27:9	0:0	2	fragment_index_data
op	27:28	0:0	2	[
water	27:29	0:0	2	mov
op	27:32	0:0	2	->
water	27:34	0:0	2	fragment_index_count
op	27:54	0:0	2	++
op	27:56	0:0	2	]
op	27:58	0:0	2	=
water	27:60	0:0	2	index
water	27:65	0:0	2	;
water	29:4	0:0	2	version
op	29:12	0:0	2	=
call	29:14	29:23	2	avio_r8
arg	29:22	29:23	3	f
water	29:22	0:0	4	f
water	29:24	0:0	2	;
call	30:4	30:15	2	avio_rb24
arg	30:14	30:15	3	f
water	30:14	0:0	4	f
water	30:16	0:0	2	;
water	31:4	0:0	2	index
op	31:9	0:0	2	->
water	31:11	0:0	2	track_id
op	31:20	0:0	2	=
call	31:22	31:33	2	avio_rb32
arg	31:32	31:33	3	f
water	31:32	0:0	4	f
water	31:34	0:0	2	;
water	32:4	0:0	2	fieldlength
op	32:16	0:0	2	=
call	32:18	32:29	2	avio_rb32
arg	32:28	32:29	3	f
water	32:28	0:0	4	f
water	32:30	0:0	2	;
water	33:4	0:0	2	index
op	33:9	0:0	2	->
water	33:11	0:0	2	item_count
op	33:22	0:0	2	=
call	33:24	33:35	2	avio_rb32
arg	33:34	33:35	3	f
water	33:34	0:0	4	f
water	33:36	0:0	2	;
water	34:4	0:0	2	index
op	34:9	0:0	2	->
water	34:11	0:0	2	items
op	34:17	0:0	2	=
call	34:19	35:59	2	av_mallocz_array
arg	35:12	35:29	3	index->item_count
water	35:12	0:0	4	index
op	35:17	0:0	4	->
water	35:19	0:0	4	item_count
arg	35:31	35:59	3	sizeof(MOVFragmentIndexItem)
op	35:31	0:0	4	sizeof
water	35:37	0:0	4	(
water	35:38	0:0	4	MOVFragmentIndexItem
water	35:58	0:0	4	)
water	35:60	0:0	2	;
if	36:4	39:4	2	(! index -> items)
cond	36:8	36:16	3	! index -> items
op	36:8	0:0	4	!
water	36:9	0:0	4	index
op	36:14	0:0	4	->
water	36:16	0:0	4	items
stmts	36:23	39:4	3	
water	36:23	0:0	4	{
water	37:8	0:0	4	index
op	37:13	0:0	4	->
water	37:15	0:0	4	item_count
op	37:26	0:0	4	=
water	37:28	0:0	4	0
water	37:29	0:0	4	;
return	38:8	38:30	4	AVERROR(ENOMEM)
call	38:15	38:29	5	AVERROR
arg	38:23	38:29	6	ENOMEM
water	38:23	0:0	7	ENOMEM
water	39:4	0:0	4	}
for	40:4	57:4	2	(i = 0 ;i < index -> item_count;i ++)
forinit	40:9	40:14	3	i = 0 ;
water	40:9	0:0	4	i
op	40:11	0:0	4	=
water	40:13	0:0	4	0
water	40:14	0:0	4	;
cond	40:16	40:27	3	i < index -> item_count
water	40:16	0:0	4	i
op	40:18	0:0	4	<
water	40:20	0:0	4	index
op	40:25	0:0	4	->
water	40:27	0:0	4	item_count
forexpr	40:39	40:40	3	i ++
water	40:39	0:0	4	i
op	40:40	0:0	4	++
stmts	40:44	57:4	3	
water	40:44	0:0	4	{
decl	41:8	41:28	4	int64_t	time
water	41:20	0:0	4	,
decl	41:8	41:28	4	int64_t	offset
if	42:8	45:8	4	(version == 1)
cond	42:12	42:23	5	version == 1
water	42:12	0:0	6	version
op	42:20	0:0	6	==
water	42:23	0:0	6	1
stmts	42:26	45:8	5	
water	42:26	0:0	6	{
water	43:12	0:0	6	time
op	43:19	0:0	6	=
call	43:21	43:32	6	avio_rb64
arg	43:31	43:32	7	f
water	43:31	0:0	8	f
water	43:33	0:0	6	;
water	44:12	0:0	6	offset
op	44:19	0:0	6	=
call	44:21	44:32	6	avio_rb64
arg	44:31	44:32	7	f
water	44:31	0:0	8	f
water	44:33	0:0	6	;
water	45:8	0:0	6	}
else	45:10	48:8	4
stmts	45:15	48:8	5	
water	45:15	0:0	6	{
water	46:12	0:0	6	time
op	46:19	0:0	6	=
call	46:21	46:32	6	avio_rb32
arg	46:31	46:32	7	f
water	46:31	0:0	8	f
water	46:33	0:0	6	;
water	47:12	0:0	6	offset
op	47:19	0:0	6	=
call	47:21	47:32	6	avio_rb32
arg	47:31	47:32	7	f
water	47:31	0:0	8	f
water	47:33	0:0	6	;
water	48:8	0:0	6	}
water	49:8	0:0	4	index
op	49:13	0:0	4	->
water	49:15	0:0	4	items
op	49:20	0:0	4	[
water	49:21	0:0	4	i
op	49:22	0:0	4	]
op	49:23	0:0	4	.
water	49:24	0:0	4	time
op	49:29	0:0	4	=
water	49:31	0:0	4	time
water	49:35	0:0	4	;
water	50:8	0:0	4	index
op	50:13	0:0	4	->
water	50:15	0:0	4	items
op	50:20	0:0	4	[
water	50:21	0:0	4	i
op	50:22	0:0	4	]
op	50:23	0:0	4	.
water	50:24	0:0	4	moof_offset
op	50:36	0:0	4	=
water	50:38	0:0	4	offset
water	50:44	0:0	4	;
for	51:8	52:22	4	(j = 0 ;j < ( ( fieldlength >> 4 ) & 3 ) + 1;j ++)
forinit	51:13	51:18	5	j = 0 ;
water	51:13	0:0	6	j
op	51:15	0:0	6	=
water	51:17	0:0	6	0
water	51:18	0:0	6	;
cond	51:20	51:51	5	j < ( ( fieldlength >> 4 ) & 3 ) + 1
water	51:20	0:0	6	j
op	51:22	0:0	6	<
water	51:24	0:0	6	(
water	51:25	0:0	6	(
water	51:26	0:0	6	fieldlength
op	51:38	0:0	6	>>
water	51:41	0:0	6	4
water	51:42	0:0	6	)
op	51:44	0:0	6	&
water	51:46	0:0	6	3
water	51:47	0:0	6	)
op	51:49	0:0	6	+
water	51:51	0:0	6	1
forexpr	51:54	51:55	5	j ++
water	51:54	0:0	6	j
op	51:55	0:0	6	++
stmts	52:12	52:22	5	
call	52:12	52:21	6	avio_r8
arg	52:20	52:21	7	f
water	52:20	0:0	8	f
water	52:22	0:0	6	;
for	53:8	54:22	4	(j = 0 ;j < ( ( fieldlength >> 2 ) & 3 ) + 1;j ++)
forinit	53:13	53:18	5	j = 0 ;
water	53:13	0:0	6	j
op	53:15	0:0	6	=
water	53:17	0:0	6	0
water	53:18	0:0	6	;
cond	53:20	53:51	5	j < ( ( fieldlength >> 2 ) & 3 ) + 1
water	53:20	0:0	6	j
op	53:22	0:0	6	<
water	53:24	0:0	6	(
water	53:25	0:0	6	(
water	53:26	0:0	6	fieldlength
op	53:38	0:0	6	>>
water	53:41	0:0	6	2
water	53:42	0:0	6	)
op	53:44	0:0	6	&
water	53:46	0:0	6	3
water	53:47	0:0	6	)
op	53:49	0:0	6	+
water	53:51	0:0	6	1
forexpr	53:54	53:55	5	j ++
water	53:54	0:0	6	j
op	53:55	0:0	6	++
stmts	54:12	54:22	5	
call	54:12	54:21	6	avio_r8
arg	54:20	54:21	7	f
water	54:20	0:0	8	f
water	54:22	0:0	6	;
for	55:8	56:22	4	(j = 0 ;j < ( ( fieldlength >> 0 ) & 3 ) + 1;j ++)
forinit	55:13	55:18	5	j = 0 ;
water	55:13	0:0	6	j
op	55:15	0:0	6	=
water	55:17	0:0	6	0
water	55:18	0:0	6	;
cond	55:20	55:51	5	j < ( ( fieldlength >> 0 ) & 3 ) + 1
water	55:20	0:0	6	j
op	55:22	0:0	6	<
water	55:24	0:0	6	(
water	55:25	0:0	6	(
water	55:26	0:0	6	fieldlength
op	55:38	0:0	6	>>
water	55:41	0:0	6	0
water	55:42	0:0	6	)
op	55:44	0:0	6	&
water	55:46	0:0	6	3
water	55:47	0:0	6	)
op	55:49	0:0	6	+
water	55:51	0:0	6	1
forexpr	55:54	55:55	5	j ++
water	55:54	0:0	6	j
op	55:55	0:0	6	++
stmts	56:12	56:22	5	
call	56:12	56:21	6	avio_r8
arg	56:20	56:21	7	f
water	56:20	0:0	8	f
water	56:22	0:0	6	;
water	57:4	0:0	4	}
call	59:4	59:37	2	avio_seek
arg	59:14	59:15	3	f
water	59:14	0:0	4	f
arg	59:17	59:27	3	pos+size
water	59:17	0:0	4	pos
op	59:21	0:0	4	+
water	59:23	0:0	4	size
arg	59:29	59:37	3	SEEK_SET
water	59:29	0:0	4	SEEK_SET
water	59:38	0:0	2	;
return	60:4	60:12	2	0
water	60:11	0:0	3	0
