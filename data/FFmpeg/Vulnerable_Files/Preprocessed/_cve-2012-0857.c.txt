func	3:0	43:0	0	static int	get_qcx
params	3:18	0:0	1	
param	3:19	3:39	2	J2kDecoderContext *	s
param	3:41	3:46	2	int	n
param	3:48	3:64	2	J2kQuantStyle *	q
stmnts	0:0	42:12	1	
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	x
if	7:4	8:30	2	(s -> buf_end - s -> buf < 1)
cond	7:8	7:30	3	s -> buf_end - s -> buf < 1
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	buf_end
op	7:19	0:0	4	-
water	7:21	0:0	4	s
op	7:22	0:0	4	->
water	7:24	0:0	4	buf
op	7:28	0:0	4	<
water	7:30	0:0	4	1
stmts	8:8	8:30	3	
return	8:8	8:30	4	AVERROR(EINVAL)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	EINVAL
water	8:23	0:0	7	EINVAL
water	10:4	0:0	2	x
op	10:6	0:0	2	=
call	10:8	10:35	2	bytestream_get_byte
arg	10:28	10:35	3	&s->buf
op	10:28	0:0	4	&
water	10:29	0:0	4	s
op	10:30	0:0	4	->
water	10:32	0:0	4	buf
water	10:36	0:0	2	;
water	12:4	0:0	2	q
op	12:5	0:0	2	->
water	12:7	0:0	2	nguardbits
op	12:18	0:0	2	=
water	12:20	0:0	2	x
op	12:22	0:0	2	>>
water	12:25	0:0	2	5
water	12:26	0:0	2	;
water	13:6	0:0	2	q
op	13:7	0:0	2	->
water	13:9	0:0	2	quantsty
op	13:18	0:0	2	=
water	13:20	0:0	2	x
op	13:22	0:0	2	&
water	13:24	0:0	2	0
water	13:25	0:0	2	x1f
water	13:28	0:0	2	;
if	15:4	21:4	2	(q -> quantsty == J2K_QSTY_NONE)
cond	15:8	15:23	3	q -> quantsty == J2K_QSTY_NONE
water	15:8	0:0	4	q
op	15:9	0:0	4	->
water	15:11	0:0	4	quantsty
op	15:20	0:0	4	==
water	15:23	0:0	4	J2K_QSTY_NONE
stmts	15:37	21:4	3	
water	15:37	0:0	4	{
water	16:8	0:0	4	n
op	16:10	0:0	4	-=
water	16:13	0:0	4	3
water	16:14	0:0	4	;
if	17:8	18:34	4	(s -> buf_end - s -> buf < n)
cond	17:12	17:34	5	s -> buf_end - s -> buf < n
water	17:12	0:0	6	s
op	17:13	0:0	6	->
water	17:15	0:0	6	buf_end
op	17:23	0:0	6	-
water	17:25	0:0	6	s
op	17:26	0:0	6	->
water	17:28	0:0	6	buf
op	17:32	0:0	6	<
water	17:34	0:0	6	n
stmts	18:12	18:34	5	
return	18:12	18:34	6	AVERROR(EINVAL)
call	18:19	18:33	7	AVERROR
arg	18:27	18:33	8	EINVAL
water	18:27	0:0	9	EINVAL
for	19:8	20:58	4	(i = 0 ;i < n;i ++)
forinit	19:13	19:18	5	i = 0 ;
water	19:13	0:0	6	i
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:24	5	i < n
water	19:20	0:0	6	i
op	19:22	0:0	6	<
water	19:24	0:0	6	n
forexpr	19:27	19:28	5	i ++
water	19:27	0:0	6	i
op	19:28	0:0	6	++
stmts	20:12	20:58	5	
water	20:12	0:0	6	q
op	20:13	0:0	6	->
water	20:15	0:0	6	expn
op	20:19	0:0	6	[
water	20:20	0:0	6	i
op	20:21	0:0	6	]
op	20:23	0:0	6	=
call	20:25	20:52	6	bytestream_get_byte
arg	20:45	20:52	7	&s->buf
op	20:45	0:0	8	&
water	20:46	0:0	8	s
op	20:47	0:0	8	->
water	20:49	0:0	8	buf
op	20:54	0:0	6	>>
water	20:57	0:0	6	3
water	20:58	0:0	6	;
water	21:4	0:0	4	}
else	21:6	32:4	2
stmts	21:11	32:4	3	
if	21:11	32:4	4	(q -> quantsty == J2K_QSTY_SI)
cond	21:15	21:30	5	q -> quantsty == J2K_QSTY_SI
water	21:15	0:0	6	q
op	21:16	0:0	6	->
water	21:18	0:0	6	quantsty
op	21:27	0:0	6	==
water	21:30	0:0	6	J2K_QSTY_SI
stmts	21:42	32:4	5	
water	21:42	0:0	6	{
if	22:8	23:34	6	(s -> buf_end - s -> buf < 2)
cond	22:12	22:34	7	s -> buf_end - s -> buf < 2
water	22:12	0:0	8	s
op	22:13	0:0	8	->
water	22:15	0:0	8	buf_end
op	22:23	0:0	8	-
water	22:25	0:0	8	s
op	22:26	0:0	8	->
water	22:28	0:0	8	buf
op	22:32	0:0	8	<
water	22:34	0:0	8	2
stmts	23:12	23:34	7	
return	23:12	23:34	8	AVERROR(EINVAL)
call	23:19	23:33	9	AVERROR
arg	23:27	23:33	10	EINVAL
water	23:27	0:0	11	EINVAL
water	24:8	0:0	6	x
op	24:10	0:0	6	=
call	24:12	24:39	6	bytestream_get_be16
arg	24:32	24:39	7	&s->buf
op	24:32	0:0	8	&
water	24:33	0:0	8	s
op	24:34	0:0	8	->
water	24:36	0:0	8	buf
water	24:40	0:0	6	;
water	25:8	0:0	6	q
op	25:9	0:0	6	->
water	25:11	0:0	6	expn
op	25:15	0:0	6	[
water	25:16	0:0	6	0
op	25:17	0:0	6	]
op	25:19	0:0	6	=
water	25:21	0:0	6	x
op	25:23	0:0	6	>>
water	25:26	0:0	6	11
water	25:28	0:0	6	;
water	26:8	0:0	6	q
op	26:9	0:0	6	->
water	26:11	0:0	6	mant
op	26:15	0:0	6	[
water	26:16	0:0	6	0
op	26:17	0:0	6	]
op	26:19	0:0	6	=
water	26:21	0:0	6	x
op	26:23	0:0	6	&
water	26:25	0:0	6	0
water	26:26	0:0	6	x7ff
water	26:30	0:0	6	;
for	27:8	31:8	6	(i = 1 ;i < 32 * 3;i ++)
forinit	27:13	27:18	7	i = 1 ;
water	27:13	0:0	8	i
op	27:15	0:0	8	=
water	27:17	0:0	8	1
water	27:18	0:0	8	;
cond	27:20	27:29	7	i < 32 * 3
water	27:20	0:0	8	i
op	27:22	0:0	8	<
water	27:24	0:0	8	32
op	27:27	0:0	8	*
water	27:29	0:0	8	3
forexpr	27:32	27:33	7	i ++
water	27:32	0:0	8	i
op	27:33	0:0	8	++
stmts	27:36	31:8	7	
water	27:36	0:0	8	{
decl	28:12	28:56	8	int	curexpn
op	28:24	0:0	8	=
call	28:26	28:55	9	FFMAX
arg	28:32	28:33	10	0
water	28:32	0:0	11	0
arg	28:35	28:55	10	q->expn[0]-(i-1)/3
water	28:35	0:0	11	q
op	28:36	0:0	11	->
water	28:38	0:0	11	expn
op	28:42	0:0	11	[
water	28:43	0:0	11	0
op	28:44	0:0	11	]
op	28:46	0:0	11	-
water	28:48	0:0	11	(
water	28:49	0:0	11	i
op	28:50	0:0	11	-
water	28:51	0:0	11	1
water	28:52	0:0	11	)
op	28:53	0:0	11	/
water	28:54	0:0	11	3
water	29:12	0:0	8	q
op	29:13	0:0	8	->
water	29:15	0:0	8	expn
op	29:19	0:0	8	[
water	29:20	0:0	8	i
op	29:21	0:0	8	]
op	29:23	0:0	8	=
water	29:25	0:0	8	curexpn
water	29:32	0:0	8	;
water	30:12	0:0	8	q
op	30:13	0:0	8	->
water	30:15	0:0	8	mant
op	30:19	0:0	8	[
water	30:20	0:0	8	i
op	30:21	0:0	8	]
op	30:23	0:0	8	=
water	30:25	0:0	8	q
op	30:26	0:0	8	->
water	30:28	0:0	8	mant
op	30:32	0:0	8	[
water	30:33	0:0	8	0
op	30:34	0:0	8	]
water	30:35	0:0	8	;
water	31:8	0:0	8	}
water	32:4	0:0	6	}
else	32:6	41:4	2
stmts	32:10	41:4	3	
water	32:10	0:0	4	{
water	33:8	0:0	4	n
op	33:10	0:0	4	=
water	33:12	0:0	4	(
water	33:13	0:0	4	n
op	33:15	0:0	4	-
water	33:17	0:0	4	3
water	33:18	0:0	4	)
op	33:20	0:0	4	>>
water	33:23	0:0	4	1
water	33:24	0:0	4	;
if	34:8	35:34	4	(s -> buf_end - s -> buf < n)
cond	34:12	34:34	5	s -> buf_end - s -> buf < n
water	34:12	0:0	6	s
op	34:13	0:0	6	->
water	34:15	0:0	6	buf_end
op	34:23	0:0	6	-
water	34:25	0:0	6	s
op	34:26	0:0	6	->
water	34:28	0:0	6	buf
op	34:32	0:0	6	<
water	34:34	0:0	6	n
stmts	35:12	35:34	5	
return	35:12	35:34	6	AVERROR(EINVAL)
call	35:19	35:33	7	AVERROR
arg	35:27	35:33	8	EINVAL
water	35:27	0:0	9	EINVAL
for	36:8	40:8	4	(i = 0 ;i < n;i ++)
forinit	36:13	36:18	5	i = 0 ;
water	36:13	0:0	6	i
op	36:15	0:0	6	=
water	36:17	0:0	6	0
water	36:18	0:0	6	;
cond	36:20	36:24	5	i < n
water	36:20	0:0	6	i
op	36:22	0:0	6	<
water	36:24	0:0	6	n
forexpr	36:27	36:28	5	i ++
water	36:27	0:0	6	i
op	36:28	0:0	6	++
stmts	36:31	40:8	5	
water	36:31	0:0	6	{
water	37:12	0:0	6	x
op	37:14	0:0	6	=
call	37:16	37:43	6	bytestream_get_be16
arg	37:36	37:43	7	&s->buf
op	37:36	0:0	8	&
water	37:37	0:0	8	s
op	37:38	0:0	8	->
water	37:40	0:0	8	buf
water	37:44	0:0	6	;
water	38:12	0:0	6	q
op	38:13	0:0	6	->
water	38:15	0:0	6	expn
op	38:19	0:0	6	[
water	38:20	0:0	6	i
op	38:21	0:0	6	]
op	38:23	0:0	6	=
water	38:25	0:0	6	x
op	38:27	0:0	6	>>
water	38:30	0:0	6	11
water	38:32	0:0	6	;
water	39:12	0:0	6	q
op	39:13	0:0	6	->
water	39:15	0:0	6	mant
op	39:19	0:0	6	[
water	39:20	0:0	6	i
op	39:21	0:0	6	]
op	39:23	0:0	6	=
water	39:25	0:0	6	x
op	39:27	0:0	6	&
water	39:29	0:0	6	0
water	39:30	0:0	6	x7ff
water	39:34	0:0	6	;
water	40:8	0:0	6	}
water	41:4	0:0	4	}
return	42:4	42:12	2	0
water	42:11	0:0	3	0
