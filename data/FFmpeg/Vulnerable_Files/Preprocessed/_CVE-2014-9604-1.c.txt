func	1:0	49:0	0	static void	restore_median
params	1:26	0:0	1	
param	1:27	1:39	2	uint8_t *	src
param	1:41	1:49	2	int	step
param	1:51	1:61	2	int	stride
param	2:27	2:36	2	int	width
param	2:38	2:48	2	int	height
param	2:50	2:60	2	int	slices
param	2:62	2:71	2	int	rmode
stmnts	0:0	48:4	1	
decl	4:4	4:19	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:19	2	int	j
water	4:12	0:0	2	,
decl	4:4	4:19	2	int	slice
decl	5:4	5:15	2	int	A
water	5:9	0:0	2	,
decl	5:4	5:15	2	int	B
water	5:12	0:0	2	,
decl	5:4	5:15	2	int	C
decl	6:4	6:17	2	uint8_t	*bsrc
decl	7:4	7:33	2	int	slice_start
water	7:19	0:0	2	,
decl	7:4	7:33	2	int	slice_height
decl	8:4	8:28	2	const int	cmask
op	8:20	0:0	2	=
water	8:22	0:0	2	~rmode
for	10:4	48:4	2	(slice = 0 ;slice < slices;slice ++)
forinit	10:9	10:18	3	slice = 0 ;
water	10:9	0:0	4	slice
op	10:15	0:0	4	=
water	10:17	0:0	4	0
water	10:18	0:0	4	;
cond	10:20	10:28	3	slice < slices
water	10:20	0:0	4	slice
op	10:26	0:0	4	<
water	10:28	0:0	4	slices
forexpr	10:36	10:41	3	slice ++
water	10:36	0:0	4	slice
op	10:41	0:0	4	++
stmts	10:45	48:4	3	
water	10:45	0:0	4	{
water	11:8	0:0	4	slice_start
op	11:21	0:0	4	=
water	11:23	0:0	4	(
water	11:24	0:0	4	(
water	11:25	0:0	4	slice
op	11:31	0:0	4	*
water	11:33	0:0	4	height
water	11:39	0:0	4	)
op	11:41	0:0	4	/
water	11:43	0:0	4	slices
water	11:49	0:0	4	)
op	11:51	0:0	4	&
water	11:53	0:0	4	cmask
water	11:58	0:0	4	;
water	12:8	0:0	4	slice_height
op	12:21	0:0	4	=
water	12:23	0:0	4	(
water	12:24	0:0	4	(
water	12:25	0:0	4	(
water	12:26	0:0	4	(
water	12:27	0:0	4	slice
op	12:33	0:0	4	+
water	12:35	0:0	4	1
water	12:36	0:0	4	)
op	12:38	0:0	4	*
water	12:40	0:0	4	height
water	12:46	0:0	4	)
op	12:48	0:0	4	/
water	12:50	0:0	4	slices
water	12:56	0:0	4	)
op	12:58	0:0	4	&
water	12:60	0:0	4	cmask
water	12:65	0:0	4	)
op	12:67	0:0	4	-
water	13:23	0:0	4	slice_start
water	13:34	0:0	4	;
water	15:8	0:0	4	bsrc
op	15:13	0:0	4	=
water	15:15	0:0	4	src
op	15:19	0:0	4	+
water	15:21	0:0	4	slice_start
op	15:33	0:0	4	*
water	15:35	0:0	4	stride
water	15:41	0:0	4	;
water	18:8	0:0	4	bsrc
op	18:12	0:0	4	[
water	18:13	0:0	4	0
op	18:14	0:0	4	]
op	18:16	0:0	4	+=
water	18:19	0:0	4	0
water	18:20	0:0	4	x80
water	18:23	0:0	4	;
water	19:8	0:0	4	A
op	19:10	0:0	4	=
water	19:12	0:0	4	bsrc
op	19:16	0:0	4	[
water	19:17	0:0	4	0
op	19:18	0:0	4	]
water	19:19	0:0	4	;
for	20:8	23:8	4	(i = step ;i < width * step;i += step)
forinit	20:13	20:21	5	i = step ;
water	20:13	0:0	6	i
op	20:15	0:0	6	=
water	20:17	0:0	6	step
water	20:21	0:0	6	;
cond	20:23	20:35	5	i < width * step
water	20:23	0:0	6	i
op	20:25	0:0	6	<
water	20:27	0:0	6	width
op	20:33	0:0	6	*
water	20:35	0:0	6	step
forexpr	20:41	20:46	5	i += step
water	20:41	0:0	6	i
op	20:43	0:0	6	+=
water	20:46	0:0	6	step
stmts	20:52	23:8	5	
water	20:52	0:0	6	{
water	21:12	0:0	6	bsrc
op	21:16	0:0	6	[
water	21:17	0:0	6	i
op	21:18	0:0	6	]
op	21:20	0:0	6	+=
water	21:23	0:0	6	A
water	21:24	0:0	6	;
water	22:12	0:0	6	A
op	22:21	0:0	6	=
water	22:23	0:0	6	bsrc
op	22:27	0:0	6	[
water	22:28	0:0	6	i
op	22:29	0:0	6	]
water	22:30	0:0	6	;
water	23:8	0:0	6	}
water	24:8	0:0	4	bsrc
op	24:13	0:0	4	+=
water	24:16	0:0	4	stride
water	24:22	0:0	4	;
if	25:8	26:20	4	(slice_height == 1)
cond	25:12	25:28	5	slice_height == 1
water	25:12	0:0	6	slice_height
op	25:25	0:0	6	==
water	25:28	0:0	6	1
stmts	26:12	26:20	5	
continue	26:12	26:20	6	
water	28:8	0:0	4	C
op	28:17	0:0	4	=
water	28:19	0:0	4	bsrc
op	28:23	0:0	4	[
op	28:24	0:0	4	-
water	28:25	0:0	4	stride
op	28:31	0:0	4	]
water	28:32	0:0	4	;
water	29:8	0:0	4	bsrc
op	29:12	0:0	4	[
water	29:13	0:0	4	0
op	29:14	0:0	4	]
op	29:16	0:0	4	+=
water	29:19	0:0	4	C
water	29:20	0:0	4	;
water	30:8	0:0	4	A
op	30:17	0:0	4	=
water	30:19	0:0	4	bsrc
op	30:23	0:0	4	[
water	30:24	0:0	4	0
op	30:25	0:0	4	]
water	30:26	0:0	4	;
for	31:8	36:8	4	(i = step ;i < width * step;i += step)
forinit	31:13	31:21	5	i = step ;
water	31:13	0:0	6	i
op	31:15	0:0	6	=
water	31:17	0:0	6	step
water	31:21	0:0	6	;
cond	31:23	31:35	5	i < width * step
water	31:23	0:0	6	i
op	31:25	0:0	6	<
water	31:27	0:0	6	width
op	31:33	0:0	6	*
water	31:35	0:0	6	step
forexpr	31:41	31:46	5	i += step
water	31:41	0:0	6	i
op	31:43	0:0	6	+=
water	31:46	0:0	6	step
stmts	31:52	36:8	5	
water	31:52	0:0	6	{
water	32:12	0:0	6	B
op	32:21	0:0	6	=
water	32:23	0:0	6	bsrc
op	32:27	0:0	6	[
water	32:28	0:0	6	i
op	32:30	0:0	6	-
water	32:32	0:0	6	stride
op	32:38	0:0	6	]
water	32:39	0:0	6	;
water	33:12	0:0	6	bsrc
op	33:16	0:0	6	[
water	33:17	0:0	6	i
op	33:18	0:0	6	]
op	33:20	0:0	6	+=
call	33:23	33:58	6	mid_pred
arg	33:32	33:33	7	A
water	33:32	0:0	8	A
arg	33:35	33:36	7	B
water	33:35	0:0	8	B
arg	33:38	33:58	7	(uint8_t)(A+B-C)
call	33:38	33:57	8	(uint8_t)
arg	33:48	33:57	9	A+B-C
water	33:48	0:0	10	A
op	33:50	0:0	10	+
water	33:52	0:0	10	B
op	33:54	0:0	10	-
water	33:56	0:0	10	C
water	33:59	0:0	6	;
water	34:12	0:0	6	C
op	34:21	0:0	6	=
water	34:23	0:0	6	B
water	34:24	0:0	6	;
water	35:12	0:0	6	A
op	35:21	0:0	6	=
water	35:23	0:0	6	bsrc
op	35:27	0:0	6	[
water	35:28	0:0	6	i
op	35:29	0:0	6	]
water	35:30	0:0	6	;
water	36:8	0:0	6	}
water	37:8	0:0	4	bsrc
op	37:13	0:0	4	+=
water	37:16	0:0	4	stride
water	37:22	0:0	4	;
for	39:8	47:8	4	(j = 2 ;j < slice_height;j ++)
forinit	39:13	39:18	5	j = 2 ;
water	39:13	0:0	6	j
op	39:15	0:0	6	=
water	39:17	0:0	6	2
water	39:18	0:0	6	;
cond	39:20	39:24	5	j < slice_height
water	39:20	0:0	6	j
op	39:22	0:0	6	<
water	39:24	0:0	6	slice_height
forexpr	39:38	39:39	5	j ++
water	39:38	0:0	6	j
op	39:39	0:0	6	++
stmts	39:43	47:8	5	
water	39:43	0:0	6	{
for	40:12	45:12	6	(i = 0 ;i < width * step;i += step)
forinit	40:17	40:22	7	i = 0 ;
water	40:17	0:0	8	i
op	40:19	0:0	8	=
water	40:21	0:0	8	0
water	40:22	0:0	8	;
cond	40:24	40:36	7	i < width * step
water	40:24	0:0	8	i
op	40:26	0:0	8	<
water	40:28	0:0	8	width
op	40:34	0:0	8	*
water	40:36	0:0	8	step
forexpr	40:42	40:47	7	i += step
water	40:42	0:0	8	i
op	40:44	0:0	8	+=
water	40:47	0:0	8	step
stmts	40:53	45:12	7	
water	40:53	0:0	8	{
water	41:16	0:0	8	B
op	41:25	0:0	8	=
water	41:27	0:0	8	bsrc
op	41:31	0:0	8	[
water	41:32	0:0	8	i
op	41:34	0:0	8	-
water	41:36	0:0	8	stride
op	41:42	0:0	8	]
water	41:43	0:0	8	;
water	42:16	0:0	8	bsrc
op	42:20	0:0	8	[
water	42:21	0:0	8	i
op	42:22	0:0	8	]
op	42:24	0:0	8	+=
call	42:27	42:62	8	mid_pred
arg	42:36	42:37	9	A
water	42:36	0:0	10	A
arg	42:39	42:40	9	B
water	42:39	0:0	10	B
arg	42:42	42:62	9	(uint8_t)(A+B-C)
call	42:42	42:61	10	(uint8_t)
arg	42:52	42:61	11	A+B-C
water	42:52	0:0	12	A
op	42:54	0:0	12	+
water	42:56	0:0	12	B
op	42:58	0:0	12	-
water	42:60	0:0	12	C
water	42:63	0:0	8	;
water	43:16	0:0	8	C
op	43:25	0:0	8	=
water	43:27	0:0	8	B
water	43:28	0:0	8	;
water	44:16	0:0	8	A
op	44:25	0:0	8	=
water	44:27	0:0	8	bsrc
op	44:31	0:0	8	[
water	44:32	0:0	8	i
op	44:33	0:0	8	]
water	44:34	0:0	8	;
water	45:12	0:0	8	}
water	46:12	0:0	6	bsrc
op	46:17	0:0	6	+=
water	46:20	0:0	6	stride
water	46:26	0:0	6	;
water	47:8	0:0	6	}
water	48:4	0:0	4	}
