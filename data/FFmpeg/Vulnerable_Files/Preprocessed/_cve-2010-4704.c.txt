func	2:0	161:0	0	static int	vorbis_parse_setup_hdr_floors
params	2:40	0:0	1	
param	2:41	2:59	2	vorbis_context *	vc
stmnts	0:0	160:12	1	
decl	4:4	4:31	2	GetBitContext	*gb
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	vc
op	4:27	0:0	2	->
water	4:29	0:0	2	gb
decl	5:4	5:23	2	uint_fast16_t	i
water	5:19	0:0	2	,
decl	5:4	5:23	2	uint_fast16_t	j
water	5:21	0:0	2	,
decl	5:4	5:23	2	uint_fast16_t	k
water	7:4	0:0	2	vc
op	7:6	0:0	2	->
water	7:8	0:0	2	floor_count
op	7:20	0:0	2	=
call	7:22	7:36	2	get_bits
arg	7:31	7:33	3	gb
water	7:31	0:0	4	gb
arg	7:35	7:36	3	6
water	7:35	0:0	4	6
op	7:38	0:0	2	+
water	7:40	0:0	2	1
water	7:41	0:0	2	;
water	9:4	0:0	2	vc
op	9:6	0:0	2	->
water	9:8	0:0	2	floors
op	9:15	0:0	2	=
call	9:17	9:66	2	av_mallocz
arg	9:28	9:66	3	vc->floor_count*sizeof(vorbis_floor)
water	9:28	0:0	4	vc
op	9:30	0:0	4	->
water	9:32	0:0	4	floor_count
op	9:44	0:0	4	*
op	9:46	0:0	4	sizeof
water	9:52	0:0	4	(
water	9:53	0:0	4	vorbis_floor
water	9:65	0:0	4	)
water	9:67	0:0	2	;
for	11:4	159:4	2	(i = 0 ;i < vc -> floor_count;++ i)
forinit	11:9	11:14	3	i = 0 ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:24	3	i < vc -> floor_count
water	11:16	0:0	4	i
op	11:18	0:0	4	<
water	11:20	0:0	4	vc
op	11:22	0:0	4	->
water	11:24	0:0	4	floor_count
forexpr	11:37	11:39	3	++ i
op	11:37	0:0	4	++
water	11:39	0:0	4	i
stmts	11:42	159:4	3	
water	11:42	0:0	4	{
decl	12:8	12:50	4	vorbis_floor	*floor_setup
op	12:34	0:0	4	=
op	12:36	0:0	4	&
water	12:37	0:0	4	vc
op	12:39	0:0	4	->
water	12:41	0:0	4	floors
op	12:47	0:0	4	[
water	12:48	0:0	4	i
op	12:49	0:0	4	]
water	14:8	0:0	4	floor_setup
op	14:19	0:0	4	->
water	14:21	0:0	4	floor_type
op	14:32	0:0	4	=
call	14:34	14:49	4	get_bits
arg	14:43	14:45	5	gb
water	14:43	0:0	6	gb
arg	14:47	14:49	5	16
water	14:47	0:0	6	16
water	14:50	0:0	4	;
call	16:8	16:68	4	AV_DEBUG
arg	16:17	16:40	5	" %d. floor type %d \n"
water	16:17	0:0	6	" %d. floor type %d \n"
arg	16:42	16:43	5	i
water	16:42	0:0	6	i
arg	16:45	16:68	5	floor_setup->floor_type
water	16:45	0:0	6	floor_setup
op	16:56	0:0	6	->
water	16:58	0:0	6	floor_type
water	16:69	0:0	4	;
if	18:8	87:8	4	(floor_setup -> floor_type == 1)
cond	18:12	18:39	5	floor_setup -> floor_type == 1
water	18:12	0:0	6	floor_setup
op	18:23	0:0	6	->
water	18:25	0:0	6	floor_type
op	18:36	0:0	6	==
water	18:39	0:0	6	1
stmts	18:42	87:8	5	
water	18:42	0:0	6	{
decl	19:12	19:43	6	uint_fast8_t	maximum_class
op	19:40	0:0	6	=
water	19:42	0:0	6	0
decl	20:12	20:35	6	uint_fast8_t	rangebits
decl	21:12	21:43	6	uint_fast16_t	floor1_values
op	21:40	0:0	6	=
water	21:42	0:0	6	2
water	23:12	0:0	6	floor_setup
op	23:23	0:0	6	->
water	23:25	0:0	6	decode
op	23:32	0:0	6	=
water	23:34	0:0	6	vorbis_floor1_decode
water	23:54	0:0	6	;
water	25:12	0:0	6	floor_setup
op	25:23	0:0	6	->
water	25:25	0:0	6	data
op	25:29	0:0	6	.
water	25:30	0:0	6	t1
op	25:32	0:0	6	.
water	25:33	0:0	6	partitions
op	25:44	0:0	6	=
call	25:46	25:60	6	get_bits
arg	25:55	25:57	7	gb
water	25:55	0:0	8	gb
arg	25:59	25:60	7	5
water	25:59	0:0	8	5
water	25:61	0:0	6	;
call	27:12	27:86	6	AV_DEBUG
arg	27:21	27:50	7	" %d.floor: %d partitions \n"
water	27:21	0:0	8	" %d.floor: %d partitions \n"
arg	27:52	27:53	7	i
water	27:52	0:0	8	i
arg	27:55	27:86	7	floor_setup->data.t1.partitions
water	27:55	0:0	8	floor_setup
op	27:66	0:0	8	->
water	27:68	0:0	8	data
op	27:72	0:0	8	.
water	27:73	0:0	8	t1
op	27:75	0:0	8	.
water	27:76	0:0	8	partitions
water	27:87	0:0	6	;
for	29:12	36:12	6	(j = 0 ;j < floor_setup -> data . t1 . partitions;++ j)
forinit	29:17	29:22	7	j = 0 ;
water	29:17	0:0	8	j
op	29:19	0:0	8	=
water	29:21	0:0	8	0
water	29:22	0:0	8	;
cond	29:24	29:49	7	j < floor_setup -> data . t1 . partitions
water	29:24	0:0	8	j
op	29:26	0:0	8	<
water	29:28	0:0	8	floor_setup
op	29:39	0:0	8	->
water	29:41	0:0	8	data
op	29:45	0:0	8	.
water	29:46	0:0	8	t1
op	29:48	0:0	8	.
water	29:49	0:0	8	partitions
forexpr	29:61	29:63	7	++ j
op	29:61	0:0	8	++
water	29:63	0:0	8	j
stmts	29:66	36:12	7	
water	29:66	0:0	8	{
water	30:16	0:0	8	floor_setup
op	30:27	0:0	8	->
water	30:29	0:0	8	data
op	30:33	0:0	8	.
water	30:34	0:0	8	t1
op	30:36	0:0	8	.
water	30:37	0:0	8	partition_class
op	30:52	0:0	8	[
water	30:53	0:0	8	j
op	30:54	0:0	8	]
op	30:56	0:0	8	=
call	30:58	30:72	8	get_bits
arg	30:67	30:69	9	gb
water	30:67	0:0	10	gb
arg	30:71	30:72	9	4
water	30:71	0:0	10	4
water	30:73	0:0	8	;
if	31:16	32:75	8	(floor_setup -> data . t1 . partition_class [ j ] > maximum_class)
cond	31:20	31:62	9	floor_setup -> data . t1 . partition_class [ j ] > maximum_class
water	31:20	0:0	10	floor_setup
op	31:31	0:0	10	->
water	31:33	0:0	10	data
op	31:37	0:0	10	.
water	31:38	0:0	10	t1
op	31:40	0:0	10	.
water	31:41	0:0	10	partition_class
op	31:56	0:0	10	[
water	31:57	0:0	10	j
op	31:58	0:0	10	]
op	31:60	0:0	10	>
water	31:62	0:0	10	maximum_class
stmts	32:20	32:75	9	
water	32:20	0:0	10	maximum_class
op	32:34	0:0	10	=
water	32:36	0:0	10	floor_setup
op	32:47	0:0	10	->
water	32:49	0:0	10	data
op	32:53	0:0	10	.
water	32:54	0:0	10	t1
op	32:56	0:0	10	.
water	32:57	0:0	10	partition_class
op	32:72	0:0	10	[
water	32:73	0:0	10	j
op	32:74	0:0	10	]
water	32:75	0:0	10	;
call	34:16	34:109	8	AV_DEBUG
arg	34:25	34:62	9	" %d. floor %d partition class %d \n"
water	34:25	0:0	10	" %d. floor %d partition class %d \n"
arg	34:64	34:65	9	i
water	34:64	0:0	10	i
arg	34:67	34:68	9	j
water	34:67	0:0	10	j
arg	34:70	34:109	9	floor_setup->data.t1.partition_class[j]
water	34:70	0:0	10	floor_setup
op	34:81	0:0	10	->
water	34:83	0:0	10	data
op	34:87	0:0	10	.
water	34:88	0:0	10	t1
op	34:90	0:0	10	.
water	34:91	0:0	10	partition_class
op	34:106	0:0	10	[
water	34:107	0:0	10	j
op	34:108	0:0	10	]
water	34:110	0:0	8	;
water	36:12	0:0	8	}
call	38:12	38:58	6	AV_DEBUG
arg	38:21	38:43	7	" maximum class %d \n"
water	38:21	0:0	8	" maximum class %d \n"
arg	38:45	38:58	7	maximum_class
water	38:45	0:0	8	maximum_class
water	38:59	0:0	6	;
water	40:12	0:0	6	floor_setup
op	40:23	0:0	6	->
water	40:25	0:0	6	data
op	40:29	0:0	6	.
water	40:30	0:0	6	t1
op	40:32	0:0	6	.
water	40:33	0:0	6	maximum_class
op	40:47	0:0	6	=
water	40:49	0:0	6	maximum_class
water	40:62	0:0	6	;
for	42:12	62:12	6	(j = 0 ;j <= maximum_class;++ j)
forinit	42:17	42:22	7	j = 0 ;
water	42:17	0:0	8	j
op	42:19	0:0	8	=
water	42:21	0:0	8	0
water	42:22	0:0	8	;
cond	42:24	42:29	7	j <= maximum_class
water	42:24	0:0	8	j
op	42:26	0:0	8	<=
water	42:29	0:0	8	maximum_class
forexpr	42:44	42:46	7	++ j
op	42:44	0:0	8	++
water	42:46	0:0	8	j
stmts	42:49	62:12	7	
water	42:49	0:0	8	{
water	43:16	0:0	8	floor_setup
op	43:27	0:0	8	->
water	43:29	0:0	8	data
op	43:33	0:0	8	.
water	43:34	0:0	8	t1
op	43:36	0:0	8	.
water	43:37	0:0	8	class_dimensions
op	43:53	0:0	8	[
water	43:54	0:0	8	j
op	43:55	0:0	8	]
op	43:57	0:0	8	=
call	43:59	43:73	8	get_bits
arg	43:68	43:70	9	gb
water	43:68	0:0	10	gb
arg	43:72	43:73	9	3
water	43:72	0:0	10	3
op	43:75	0:0	8	+
water	43:77	0:0	8	1
water	43:78	0:0	8	;
water	44:16	0:0	8	floor_setup
op	44:27	0:0	8	->
water	44:29	0:0	8	data
op	44:33	0:0	8	.
water	44:34	0:0	8	t1
op	44:36	0:0	8	.
water	44:37	0:0	8	class_subclasses
op	44:53	0:0	8	[
water	44:54	0:0	8	j
op	44:55	0:0	8	]
op	44:57	0:0	8	=
call	44:59	44:73	8	get_bits
arg	44:68	44:70	9	gb
water	44:68	0:0	10	gb
arg	44:72	44:73	9	2
water	44:72	0:0	10	2
water	44:74	0:0	8	;
call	46:16	46:160	8	AV_DEBUG
arg	46:25	46:70	9	" %d floor %d class dim: %d subclasses %d \n"
water	46:25	0:0	10	" %d floor %d class dim: %d subclasses %d \n"
arg	46:72	46:73	9	i
water	46:72	0:0	10	i
arg	46:75	46:76	9	j
water	46:75	0:0	10	j
arg	46:78	46:118	9	floor_setup->data.t1.class_dimensions[j]
water	46:78	0:0	10	floor_setup
op	46:89	0:0	10	->
water	46:91	0:0	10	data
op	46:95	0:0	10	.
water	46:96	0:0	10	t1
op	46:98	0:0	10	.
water	46:99	0:0	10	class_dimensions
op	46:115	0:0	10	[
water	46:116	0:0	10	j
op	46:117	0:0	10	]
arg	46:120	46:160	9	floor_setup->data.t1.class_subclasses[j]
water	46:120	0:0	10	floor_setup
op	46:131	0:0	10	->
water	46:133	0:0	10	data
op	46:137	0:0	10	.
water	46:138	0:0	10	t1
op	46:140	0:0	10	.
water	46:141	0:0	10	class_subclasses
op	46:157	0:0	10	[
water	46:158	0:0	10	j
op	46:159	0:0	10	]
water	46:161	0:0	8	;
if	48:16	52:16	8	(floor_setup -> data . t1 . class_subclasses [ j ])
cond	48:20	48:59	9	floor_setup -> data . t1 . class_subclasses [ j ]
water	48:20	0:0	10	floor_setup
op	48:31	0:0	10	->
water	48:33	0:0	10	data
op	48:37	0:0	10	.
water	48:38	0:0	10	t1
op	48:40	0:0	10	.
water	48:41	0:0	10	class_subclasses
op	48:57	0:0	10	[
water	48:58	0:0	10	j
op	48:59	0:0	10	]
stmts	48:62	52:16	9	
water	48:62	0:0	10	{
call	49:20	49:103	10	GET_VALIDATED_INDEX
arg	49:40	49:80	11	floor_setup->data.t1.class_masterbook[j]
water	49:40	0:0	12	floor_setup
op	49:51	0:0	12	->
water	49:53	0:0	12	data
op	49:57	0:0	12	.
water	49:58	0:0	12	t1
op	49:60	0:0	12	.
water	49:61	0:0	12	class_masterbook
op	49:77	0:0	12	[
water	49:78	0:0	12	j
op	49:79	0:0	12	]
arg	49:82	49:83	11	8
water	49:82	0:0	12	8
arg	49:85	49:103	11	vc->codebook_count
water	49:85	0:0	12	vc
op	49:87	0:0	12	->
water	49:89	0:0	12	codebook_count
call	51:20	51:93	10	AV_DEBUG
arg	51:29	51:51	11	"   masterbook: %d \n"
water	51:29	0:0	12	"   masterbook: %d \n"
arg	51:53	51:93	11	floor_setup->data.t1.class_masterbook[j]
water	51:53	0:0	12	floor_setup
op	51:64	0:0	12	->
water	51:66	0:0	12	data
op	51:70	0:0	12	.
water	51:71	0:0	12	t1
op	51:73	0:0	12	.
water	51:74	0:0	12	class_masterbook
op	51:90	0:0	12	[
water	51:91	0:0	12	j
op	51:92	0:0	12	]
water	51:94	0:0	10	;
water	52:16	0:0	10	}
for	54:16	61:16	8	(k = 0 ;k < ( 1 << floor_setup -> data . t1 . class_subclasses [ j ] );++ k)
forinit	54:21	54:26	9	k = 0 ;
water	54:21	0:0	10	k
op	54:23	0:0	10	=
water	54:25	0:0	10	0
water	54:26	0:0	10	;
cond	54:28	54:78	9	k < ( 1 << floor_setup -> data . t1 . class_subclasses [ j ] )
water	54:28	0:0	10	k
op	54:30	0:0	10	<
water	54:32	0:0	10	(
water	54:33	0:0	10	1
op	54:35	0:0	10	<<
water	54:38	0:0	10	floor_setup
op	54:49	0:0	10	->
water	54:51	0:0	10	data
op	54:55	0:0	10	.
water	54:56	0:0	10	t1
op	54:58	0:0	10	.
water	54:59	0:0	10	class_subclasses
op	54:75	0:0	10	[
water	54:76	0:0	10	j
op	54:77	0:0	10	]
water	54:78	0:0	10	)
forexpr	54:81	54:83	9	++ k
op	54:81	0:0	10	++
water	54:83	0:0	10	k
stmts	54:86	61:16	9	
water	54:86	0:0	10	{
decl	55:20	55:54	10	int16_t	bits
op	55:33	0:0	10	=
call	55:35	55:49	11	get_bits
arg	55:44	55:46	12	gb
water	55:44	0:0	13	gb
arg	55:48	55:49	12	8
water	55:48	0:0	13	8
op	55:51	0:0	10	-
water	55:53	0:0	10	1
if	56:20	58:68	10	(bits != - 1)
cond	56:24	56:33	11	bits != - 1
water	56:24	0:0	12	bits
op	56:29	0:0	12	!=
op	56:32	0:0	12	-
water	56:33	0:0	12	1
stmts	57:24	58:68	11	
call	57:24	57:63	12	VALIDATE_INDEX
arg	57:39	57:43	13	bits
water	57:39	0:0	14	bits
arg	57:45	57:63	13	vc->codebook_count
water	57:45	0:0	14	vc
op	57:47	0:0	14	->
water	57:49	0:0	14	codebook_count
water	58:20	0:0	12	floor_setup
op	58:31	0:0	12	->
water	58:33	0:0	12	data
op	58:37	0:0	12	.
water	58:38	0:0	12	t1
op	58:40	0:0	12	.
water	58:41	0:0	12	subclass_books
op	58:55	0:0	12	[
water	58:56	0:0	12	j
op	58:57	0:0	12	]
op	58:58	0:0	12	[
water	58:59	0:0	12	k
op	58:60	0:0	12	]
op	58:62	0:0	12	=
water	58:64	0:0	12	bits
water	58:68	0:0	12	;
call	60:20	60:97	10	AV_DEBUG
arg	60:29	60:51	11	"    book %d. : %d \n"
water	60:29	0:0	12	"    book %d. : %d \n"
arg	60:53	60:54	11	k
water	60:53	0:0	12	k
arg	60:56	60:97	11	floor_setup->data.t1.subclass_books[j][k]
water	60:56	0:0	12	floor_setup
op	60:67	0:0	12	->
water	60:69	0:0	12	data
op	60:73	0:0	12	.
water	60:74	0:0	12	t1
op	60:76	0:0	12	.
water	60:77	0:0	12	subclass_books
op	60:91	0:0	12	[
water	60:92	0:0	12	j
op	60:93	0:0	12	]
op	60:94	0:0	12	[
water	60:95	0:0	12	k
op	60:96	0:0	12	]
water	60:98	0:0	10	;
water	61:16	0:0	10	}
water	62:12	0:0	8	}
water	64:12	0:0	6	floor_setup
op	64:23	0:0	6	->
water	64:25	0:0	6	data
op	64:29	0:0	6	.
water	64:30	0:0	6	t1
op	64:32	0:0	6	.
water	64:33	0:0	6	multiplier
op	64:44	0:0	6	=
call	64:46	64:60	6	get_bits
arg	64:55	64:57	7	gb
water	64:55	0:0	8	gb
arg	64:59	64:60	7	2
water	64:59	0:0	8	2
op	64:62	0:0	6	+
water	64:64	0:0	6	1
water	64:65	0:0	6	;
water	65:12	0:0	6	floor_setup
op	65:23	0:0	6	->
water	65:25	0:0	6	data
op	65:29	0:0	6	.
water	65:30	0:0	6	t1
op	65:32	0:0	6	.
water	65:33	0:0	6	x_list_dim
op	65:44	0:0	6	=
water	65:46	0:0	6	2
water	65:47	0:0	6	;
for	67:12	68:127	6	(j = 0 ;j < floor_setup -> data . t1 . partitions;++ j)
forinit	67:17	67:22	7	j = 0 ;
water	67:17	0:0	8	j
op	67:19	0:0	8	=
water	67:21	0:0	8	0
water	67:22	0:0	8	;
cond	67:24	67:49	7	j < floor_setup -> data . t1 . partitions
water	67:24	0:0	8	j
op	67:26	0:0	8	<
water	67:28	0:0	8	floor_setup
op	67:39	0:0	8	->
water	67:41	0:0	8	data
op	67:45	0:0	8	.
water	67:46	0:0	8	t1
op	67:48	0:0	8	.
water	67:49	0:0	8	partitions
forexpr	67:61	67:63	7	++ j
op	67:61	0:0	8	++
water	67:63	0:0	8	j
stmts	68:16	68:127	7	
water	68:16	0:0	8	floor_setup
op	68:27	0:0	8	->
water	68:29	0:0	8	data
op	68:33	0:0	8	.
water	68:34	0:0	8	t1
op	68:36	0:0	8	.
water	68:37	0:0	8	x_list_dim
op	68:47	0:0	8	+=
water	68:49	0:0	8	floor_setup
op	68:60	0:0	8	->
water	68:62	0:0	8	data
op	68:66	0:0	8	.
water	68:67	0:0	8	t1
op	68:69	0:0	8	.
water	68:70	0:0	8	class_dimensions
op	68:86	0:0	8	[
water	68:87	0:0	8	floor_setup
op	68:98	0:0	8	->
water	68:100	0:0	8	data
op	68:104	0:0	8	.
water	68:105	0:0	8	t1
op	68:107	0:0	8	.
water	68:108	0:0	8	partition_class
op	68:123	0:0	8	[
water	68:124	0:0	8	j
op	68:125	0:0	8	]
op	68:126	0:0	8	]
water	68:127	0:0	8	;
water	70:12	0:0	6	floor_setup
op	70:23	0:0	6	->
water	70:25	0:0	6	data
op	70:29	0:0	6	.
water	70:30	0:0	6	t1
op	70:32	0:0	6	.
water	70:33	0:0	6	list
op	70:38	0:0	6	=
call	70:40	70:112	6	av_mallocz
arg	70:51	70:112	7	floor_setup->data.t1.x_list_dim*sizeof(vorbis_floor1_entry)
water	70:51	0:0	8	floor_setup
op	70:62	0:0	8	->
water	70:64	0:0	8	data
op	70:68	0:0	8	.
water	70:69	0:0	8	t1
op	70:71	0:0	8	.
water	70:72	0:0	8	x_list_dim
op	70:83	0:0	8	*
op	70:85	0:0	8	sizeof
water	70:91	0:0	8	(
water	70:92	0:0	8	vorbis_floor1_entry
water	70:111	0:0	8	)
water	70:113	0:0	6	;
water	73:12	0:0	6	rangebits
op	73:22	0:0	6	=
call	73:24	73:38	6	get_bits
arg	73:33	73:35	7	gb
water	73:33	0:0	8	gb
arg	73:37	73:38	7	4
water	73:37	0:0	8	4
water	73:39	0:0	6	;
water	74:12	0:0	6	floor_setup
op	74:23	0:0	6	->
water	74:25	0:0	6	data
op	74:29	0:0	6	.
water	74:30	0:0	6	t1
op	74:32	0:0	6	.
water	74:33	0:0	6	list
op	74:37	0:0	6	[
water	74:38	0:0	6	0
op	74:39	0:0	6	]
op	74:40	0:0	6	.
water	74:41	0:0	6	x
op	74:43	0:0	6	=
water	74:45	0:0	6	0
water	74:46	0:0	6	;
water	75:12	0:0	6	floor_setup
op	75:23	0:0	6	->
water	75:25	0:0	6	data
op	75:29	0:0	6	.
water	75:30	0:0	6	t1
op	75:32	0:0	6	.
water	75:33	0:0	6	list
op	75:37	0:0	6	[
water	75:38	0:0	6	1
op	75:39	0:0	6	]
op	75:40	0:0	6	.
water	75:41	0:0	6	x
op	75:43	0:0	6	=
water	75:45	0:0	6	(
water	75:46	0:0	6	1
op	75:48	0:0	6	<<
water	75:51	0:0	6	rangebits
water	75:60	0:0	6	)
water	75:61	0:0	6	;
for	77:12	83:12	6	(j = 0 ;j < floor_setup -> data . t1 . partitions;++ j)
forinit	77:17	77:22	7	j = 0 ;
water	77:17	0:0	8	j
op	77:19	0:0	8	=
water	77:21	0:0	8	0
water	77:22	0:0	8	;
cond	77:24	77:49	7	j < floor_setup -> data . t1 . partitions
water	77:24	0:0	8	j
op	77:26	0:0	8	<
water	77:28	0:0	8	floor_setup
op	77:39	0:0	8	->
water	77:41	0:0	8	data
op	77:45	0:0	8	.
water	77:46	0:0	8	t1
op	77:48	0:0	8	.
water	77:49	0:0	8	partitions
forexpr	77:61	77:63	7	++ j
op	77:61	0:0	8	++
water	77:63	0:0	8	j
stmts	77:66	83:12	7	
water	77:66	0:0	8	{
for	78:16	82:16	8	(k = 0 ;k < floor_setup -> data . t1 . class_dimensions [ floor_setup -> data . t1 . partition_class [ j ] ];++ k , ++ floor1_values)
forinit	78:21	78:26	9	k = 0 ;
water	78:21	0:0	10	k
op	78:23	0:0	10	=
water	78:25	0:0	10	0
water	78:26	0:0	10	;
cond	78:28	78:109	9	k < floor_setup -> data . t1 . class_dimensions [ floor_setup -> data . t1 . partition_class [ j ] ]
water	78:28	0:0	10	k
op	78:30	0:0	10	<
water	78:32	0:0	10	floor_setup
op	78:43	0:0	10	->
water	78:45	0:0	10	data
op	78:49	0:0	10	.
water	78:50	0:0	10	t1
op	78:52	0:0	10	.
water	78:53	0:0	10	class_dimensions
op	78:69	0:0	10	[
water	78:70	0:0	10	floor_setup
op	78:81	0:0	10	->
water	78:83	0:0	10	data
op	78:87	0:0	10	.
water	78:88	0:0	10	t1
op	78:90	0:0	10	.
water	78:91	0:0	10	partition_class
op	78:106	0:0	10	[
water	78:107	0:0	10	j
op	78:108	0:0	10	]
op	78:109	0:0	10	]
forexpr	78:112	78:119	9	++ k , ++ floor1_values
op	78:112	0:0	10	++
water	78:114	0:0	10	k
water	78:115	0:0	10	,
op	78:117	0:0	10	++
water	78:119	0:0	10	floor1_values
stmts	78:134	82:16	9	
water	78:134	0:0	10	{
water	79:20	0:0	10	floor_setup
op	79:31	0:0	10	->
water	79:33	0:0	10	data
op	79:37	0:0	10	.
water	79:38	0:0	10	t1
op	79:40	0:0	10	.
water	79:41	0:0	10	list
op	79:45	0:0	10	[
water	79:46	0:0	10	floor1_values
op	79:59	0:0	10	]
op	79:60	0:0	10	.
water	79:61	0:0	10	x
op	79:63	0:0	10	=
call	79:65	79:87	10	get_bits
arg	79:74	79:76	11	gb
water	79:74	0:0	12	gb
arg	79:78	79:87	11	rangebits
water	79:78	0:0	12	rangebits
water	79:88	0:0	10	;
call	81:20	81:116	10	AV_DEBUG
arg	81:29	81:57	11	" %d. floor1 Y coord. %d \n"
water	81:29	0:0	12	" %d. floor1 Y coord. %d \n"
arg	81:59	81:72	11	floor1_values
water	81:59	0:0	12	floor1_values
arg	81:74	81:116	11	floor_setup->data.t1.list[floor1_values].x
water	81:74	0:0	12	floor_setup
op	81:85	0:0	12	->
water	81:87	0:0	12	data
op	81:91	0:0	12	.
water	81:92	0:0	12	t1
op	81:94	0:0	12	.
water	81:95	0:0	12	list
op	81:99	0:0	12	[
water	81:100	0:0	12	floor1_values
op	81:113	0:0	12	]
op	81:114	0:0	12	.
water	81:115	0:0	12	x
water	81:117	0:0	10	;
water	82:16	0:0	10	}
water	83:12	0:0	8	}
call	86:12	86:98	6	ff_vorbis_ready_floor1_list
arg	86:40	86:65	7	floor_setup->data.t1.list
water	86:40	0:0	8	floor_setup
op	86:51	0:0	8	->
water	86:53	0:0	8	data
op	86:57	0:0	8	.
water	86:58	0:0	8	t1
op	86:60	0:0	8	.
water	86:61	0:0	8	list
arg	86:67	86:98	7	floor_setup->data.t1.x_list_dim
water	86:67	0:0	8	floor_setup
op	86:78	0:0	8	->
water	86:80	0:0	8	data
op	86:84	0:0	8	.
water	86:85	0:0	8	t1
op	86:87	0:0	8	.
water	86:88	0:0	8	x_list_dim
water	86:99	0:0	6	;
water	87:8	0:0	6	}
else	87:10	155:8	4
stmts	87:15	155:8	5	
if	87:15	155:8	6	(floor_setup -> floor_type == 0)
cond	87:19	87:46	7	floor_setup -> floor_type == 0
water	87:19	0:0	8	floor_setup
op	87:30	0:0	8	->
water	87:32	0:0	8	floor_type
op	87:43	0:0	8	==
water	87:46	0:0	8	0
stmts	87:49	155:8	7	
water	87:49	0:0	8	{
decl	88:12	88:45	8	uint_fast8_t	max_codebook_dim
op	88:42	0:0	8	=
water	88:44	0:0	8	0
water	90:12	0:0	8	floor_setup
op	90:23	0:0	8	->
water	90:25	0:0	8	decode
op	90:32	0:0	8	=
water	90:34	0:0	8	vorbis_floor0_decode
water	90:54	0:0	8	;
water	92:12	0:0	8	floor_setup
op	92:23	0:0	8	->
water	92:25	0:0	8	data
op	92:29	0:0	8	.
water	92:30	0:0	8	t0
op	92:32	0:0	8	.
water	92:33	0:0	8	order
op	92:48	0:0	8	=
call	92:50	92:65	8	get_bits
arg	92:59	92:61	9	gb
water	92:59	0:0	10	gb
arg	92:64	92:65	9	8
water	92:64	0:0	10	8
water	92:66	0:0	8	;
water	93:12	0:0	8	floor_setup
op	93:23	0:0	8	->
water	93:25	0:0	8	data
op	93:29	0:0	8	.
water	93:30	0:0	8	t0
op	93:32	0:0	8	.
water	93:33	0:0	8	rate
op	93:48	0:0	8	=
call	93:50	93:65	8	get_bits
arg	93:59	93:61	9	gb
water	93:59	0:0	10	gb
arg	93:63	93:65	9	16
water	93:63	0:0	10	16
water	93:66	0:0	8	;
water	94:12	0:0	8	floor_setup
op	94:23	0:0	8	->
water	94:25	0:0	8	data
op	94:29	0:0	8	.
water	94:30	0:0	8	t0
op	94:32	0:0	8	.
water	94:33	0:0	8	bark_map_size
op	94:48	0:0	8	=
call	94:50	94:65	8	get_bits
arg	94:59	94:61	9	gb
water	94:59	0:0	10	gb
arg	94:63	94:65	9	16
water	94:63	0:0	10	16
water	94:66	0:0	8	;
water	95:12	0:0	8	floor_setup
op	95:23	0:0	8	->
water	95:25	0:0	8	data
op	95:29	0:0	8	.
water	95:30	0:0	8	t0
op	95:32	0:0	8	.
water	95:33	0:0	8	amplitude_bits
op	95:48	0:0	8	=
call	95:50	95:65	8	get_bits
arg	95:59	95:61	9	gb
water	95:59	0:0	10	gb
arg	95:64	95:65	9	6
water	95:64	0:0	10	6
water	95:66	0:0	8	;
if	98:12	102:12	8	(floor_setup -> data . t0 . amplitude_bits == 0)
cond	98:16	98:55	9	floor_setup -> data . t0 . amplitude_bits == 0
water	98:16	0:0	10	floor_setup
op	98:27	0:0	10	->
water	98:29	0:0	10	data
op	98:33	0:0	10	.
water	98:34	0:0	10	t0
op	98:36	0:0	10	.
water	98:37	0:0	10	amplitude_bits
op	98:52	0:0	10	==
water	98:55	0:0	10	0
stmts	98:58	102:12	9	
water	98:58	0:0	10	{
call	99:14	100:53	10	av_log
arg	99:21	99:35	11	vc->avccontext
water	99:21	0:0	12	vc
op	99:23	0:0	12	->
water	99:25	0:0	12	avccontext
arg	99:37	99:49	11	AV_LOG_ERROR
water	99:37	0:0	12	AV_LOG_ERROR
arg	100:21	100:53	11	"Floor 0 amplitude bits is 0.\n"
water	100:21	0:0	12	"Floor 0 amplitude bits is 0.\n"
water	100:54	0:0	10	;
return	101:14	101:23	10	-1
op	101:21	0:0	11	-
water	101:22	0:0	11	1
water	102:12	0:0	10	}
water	103:12	0:0	8	floor_setup
op	103:23	0:0	8	->
water	103:25	0:0	8	data
op	103:29	0:0	8	.
water	103:30	0:0	8	t0
op	103:32	0:0	8	.
water	103:33	0:0	8	amplitude_offset
op	103:50	0:0	8	=
call	103:52	103:66	8	get_bits
arg	103:61	103:63	9	gb
water	103:61	0:0	10	gb
arg	103:65	103:66	9	8
water	103:65	0:0	10	8
water	103:67	0:0	8	;
water	104:12	0:0	8	floor_setup
op	104:23	0:0	8	->
water	104:25	0:0	8	data
op	104:29	0:0	8	.
water	104:30	0:0	8	t0
op	104:32	0:0	8	.
water	104:33	0:0	8	num_books
op	104:50	0:0	8	=
call	104:52	104:66	8	get_bits
arg	104:61	104:63	9	gb
water	104:61	0:0	10	gb
arg	104:65	104:66	9	4
water	104:65	0:0	10	4
op	104:68	0:0	8	+
water	104:70	0:0	8	1
water	104:71	0:0	8	;
water	107:12	0:0	8	floor_setup
op	107:23	0:0	8	->
water	107:25	0:0	8	data
op	107:29	0:0	8	.
water	107:30	0:0	8	t0
op	107:32	0:0	8	.
water	107:33	0:0	8	book_list
op	107:43	0:0	8	=
call	108:16	108:56	8	av_malloc
arg	108:26	108:56	9	floor_setup->data.t0.num_books
water	108:26	0:0	10	floor_setup
op	108:37	0:0	10	->
water	108:39	0:0	10	data
op	108:43	0:0	10	.
water	108:44	0:0	10	t0
op	108:46	0:0	10	.
water	108:47	0:0	10	num_books
water	108:57	0:0	8	;
if	109:12	110:25	8	(! floor_setup -> data . t0 . book_list)
cond	109:16	109:38	9	! floor_setup -> data . t0 . book_list
op	109:16	0:0	10	!
water	109:17	0:0	10	floor_setup
op	109:28	0:0	10	->
water	109:30	0:0	10	data
op	109:34	0:0	10	.
water	109:35	0:0	10	t0
op	109:37	0:0	10	.
water	109:38	0:0	10	book_list
stmts	110:16	110:25	9	
return	110:16	110:25	10	-1
op	110:23	0:0	11	-
water	110:24	0:0	11	1
water	112:12	0:0	8	{
decl	113:16	113:23	8	int	idx
decl	114:16	114:37	8	uint_fast8_t	book_idx
for	115:16	119:16	8	(idx = 0 ;idx < floor_setup -> data . t0 . num_books;++ idx)
forinit	115:21	115:28	9	idx = 0 ;
water	115:21	0:0	10	idx
op	115:25	0:0	10	=
water	115:27	0:0	10	0
water	115:28	0:0	10	;
cond	115:30	115:57	9	idx < floor_setup -> data . t0 . num_books
water	115:30	0:0	10	idx
op	115:34	0:0	10	<
water	115:36	0:0	10	floor_setup
op	115:47	0:0	10	->
water	115:49	0:0	10	data
op	115:53	0:0	10	.
water	115:54	0:0	10	t0
op	115:56	0:0	10	.
water	115:57	0:0	10	num_books
forexpr	115:68	115:70	9	++ idx
op	115:68	0:0	10	++
water	115:70	0:0	10	idx
stmts	115:75	119:16	9	
water	115:75	0:0	10	{
call	116:20	116:98	10	GET_VALIDATED_INDEX
arg	116:40	116:75	11	floor_setup->data.t0.book_list[idx]
water	116:40	0:0	12	floor_setup
op	116:51	0:0	12	->
water	116:53	0:0	12	data
op	116:57	0:0	12	.
water	116:58	0:0	12	t0
op	116:60	0:0	12	.
water	116:61	0:0	12	book_list
op	116:70	0:0	12	[
water	116:71	0:0	12	idx
op	116:74	0:0	12	]
arg	116:77	116:78	11	8
water	116:77	0:0	12	8
arg	116:80	116:98	11	vc->codebook_count
water	116:80	0:0	12	vc
op	116:82	0:0	12	->
water	116:84	0:0	12	codebook_count
water	117:20	0:0	10	if
water	117:23	0:0	10	(
water	117:24	0:0	10	vc
op	117:26	0:0	10	->
water	117:28	0:0	10	codebooks
op	117:37	0:0	10	[
water	117:38	0:0	10	book_idx
op	117:46	0:0	10	]
op	117:47	0:0	10	.
water	117:48	0:0	10	dimensions
op	117:59	0:0	10	>
water	117:61	0:0	10	max_codebook_dim
water	117:77	0:0	10	)
water	118:24	0:0	10	max_codebook_dim
op	118:41	0:0	10	=
water	118:43	0:0	10	vc
op	118:45	0:0	10	->
water	118:47	0:0	10	codebooks
op	118:56	0:0	10	[
water	118:57	0:0	10	book_idx
op	118:65	0:0	10	]
op	118:66	0:0	10	.
water	118:67	0:0	10	dimensions
water	118:77	0:0	10	;
water	119:16	0:0	10	}
water	120:12	0:0	8	}
call	122:12	122:28	8	create_map
arg	122:23	122:25	9	vc
water	122:23	0:0	10	vc
arg	122:27	122:28	9	i
water	122:27	0:0	10	i
water	122:29	0:0	8	;
water	125:12	0:0	8	{
water	128:16	0:0	8	floor_setup
op	128:27	0:0	8	->
water	128:29	0:0	8	data
op	128:33	0:0	8	.
water	128:34	0:0	8	t0
op	128:36	0:0	8	.
water	128:37	0:0	8	lsp
op	128:41	0:0	8	=
call	129:20	130:45	8	av_malloc
arg	129:30	130:45	9	(floor_setup->data.t0.order+1+max_codebook_dim)*sizeof(float)
water	129:30	0:0	10	(
water	129:31	0:0	10	floor_setup
op	129:42	0:0	10	->
water	129:44	0:0	10	data
op	129:48	0:0	10	.
water	129:49	0:0	10	t0
op	129:51	0:0	10	.
water	129:52	0:0	10	order
op	129:57	0:0	10	+
water	129:58	0:0	10	1
op	129:60	0:0	10	+
water	129:62	0:0	10	max_codebook_dim
water	129:78	0:0	10	)
op	130:30	0:0	10	*
op	130:32	0:0	10	sizeof
water	130:38	0:0	10	(
water	130:39	0:0	10	float
water	130:44	0:0	10	)
water	130:46	0:0	8	;
if	131:16	132:29	8	(! floor_setup -> data . t0 . lsp)
cond	131:20	131:42	9	! floor_setup -> data . t0 . lsp
op	131:20	0:0	10	!
water	131:21	0:0	10	floor_setup
op	131:32	0:0	10	->
water	131:34	0:0	10	data
op	131:38	0:0	10	.
water	131:39	0:0	10	t0
op	131:41	0:0	10	.
water	131:42	0:0	10	lsp
stmts	132:20	132:29	9	
return	132:20	132:29	10	-1
op	132:27	0:0	11	-
water	132:28	0:0	11	1
water	133:12	0:0	8	}
call	135:12	135:69	8	AV_DEBUG
arg	135:21	135:41	9	"floor0 order: %u\n"
water	135:21	0:0	10	"floor0 order: %u\n"
arg	135:43	135:69	9	floor_setup->data.t0.order
water	135:43	0:0	10	floor_setup
op	135:54	0:0	10	->
water	135:56	0:0	10	data
op	135:60	0:0	10	.
water	135:61	0:0	10	t0
op	135:63	0:0	10	.
water	135:64	0:0	10	order
water	135:70	0:0	8	;
call	136:12	136:67	8	AV_DEBUG
arg	136:21	136:40	9	"floor0 rate: %u\n"
water	136:21	0:0	10	"floor0 rate: %u\n"
arg	136:42	136:67	9	floor_setup->data.t0.rate
water	136:42	0:0	10	floor_setup
op	136:53	0:0	10	->
water	136:55	0:0	10	data
op	136:59	0:0	10	.
water	136:60	0:0	10	t0
op	136:62	0:0	10	.
water	136:63	0:0	10	rate
water	136:68	0:0	8	;
call	137:12	138:48	8	AV_DEBUG
arg	137:21	137:49	9	"floor0 bark map size: %u\n"
water	137:21	0:0	10	"floor0 bark map size: %u\n"
arg	138:14	138:48	9	floor_setup->data.t0.bark_map_size
water	138:14	0:0	10	floor_setup
op	138:25	0:0	10	->
water	138:27	0:0	10	data
op	138:31	0:0	10	.
water	138:32	0:0	10	t0
op	138:34	0:0	10	.
water	138:35	0:0	10	bark_map_size
water	138:49	0:0	8	;
call	139:12	140:49	8	AV_DEBUG
arg	139:21	139:50	9	"floor0 amplitude bits: %u\n"
water	139:21	0:0	10	"floor0 amplitude bits: %u\n"
arg	140:14	140:49	9	floor_setup->data.t0.amplitude_bits
water	140:14	0:0	10	floor_setup
op	140:25	0:0	10	->
water	140:27	0:0	10	data
op	140:31	0:0	10	.
water	140:32	0:0	10	t0
op	140:34	0:0	10	.
water	140:35	0:0	10	amplitude_bits
water	140:50	0:0	8	;
call	141:12	142:51	8	AV_DEBUG
arg	141:21	141:52	9	"floor0 amplitude offset: %u\n"
water	141:21	0:0	10	"floor0 amplitude offset: %u\n"
arg	142:14	142:51	9	floor_setup->data.t0.amplitude_offset
water	142:14	0:0	10	floor_setup
op	142:25	0:0	10	->
water	142:27	0:0	10	data
op	142:31	0:0	10	.
water	142:32	0:0	10	t0
op	142:34	0:0	10	.
water	142:35	0:0	10	amplitude_offset
water	142:52	0:0	8	;
call	143:12	144:44	8	AV_DEBUG
arg	143:21	143:51	9	"floor0 number of books: %u\n"
water	143:21	0:0	10	"floor0 number of books: %u\n"
arg	144:14	144:44	9	floor_setup->data.t0.num_books
water	144:14	0:0	10	floor_setup
op	144:25	0:0	10	->
water	144:27	0:0	10	data
op	144:31	0:0	10	.
water	144:32	0:0	10	t0
op	144:34	0:0	10	.
water	144:35	0:0	10	num_books
water	144:45	0:0	8	;
call	145:12	146:44	8	AV_DEBUG
arg	145:21	145:53	9	"floor0 book list pointer: %p\n"
water	145:21	0:0	10	"floor0 book list pointer: %p\n"
arg	146:14	146:44	9	floor_setup->data.t0.book_list
water	146:14	0:0	10	floor_setup
op	146:25	0:0	10	->
water	146:27	0:0	10	data
op	146:31	0:0	10	.
water	146:32	0:0	10	t0
op	146:34	0:0	10	.
water	146:35	0:0	10	book_list
water	146:45	0:0	8	;
water	147:12	0:0	8	{
decl	148:14	148:21	8	int	idx
for	149:14	153:14	8	(idx = 0 ;idx < floor_setup -> data . t0 . num_books;++ idx)
forinit	149:19	149:26	9	idx = 0 ;
water	149:19	0:0	10	idx
op	149:23	0:0	10	=
water	149:25	0:0	10	0
water	149:26	0:0	10	;
cond	149:28	149:55	9	idx < floor_setup -> data . t0 . num_books
water	149:28	0:0	10	idx
op	149:32	0:0	10	<
water	149:34	0:0	10	floor_setup
op	149:45	0:0	10	->
water	149:47	0:0	10	data
op	149:51	0:0	10	.
water	149:52	0:0	10	t0
op	149:54	0:0	10	.
water	149:55	0:0	10	num_books
forexpr	149:66	149:68	9	++ idx
op	149:66	0:0	10	++
water	149:68	0:0	10	idx
stmts	149:73	153:14	9	
water	149:73	0:0	10	{
call	150:18	152:62	10	AV_DEBUG
arg	150:27	150:44	11	"  Book %d: %u\n"
water	150:27	0:0	12	"  Book %d: %u\n"
arg	151:27	151:32	11	idx+1
water	151:27	0:0	12	idx
op	151:30	0:0	12	+
water	151:31	0:0	12	1
arg	152:27	152:62	11	floor_setup->data.t0.book_list[idx]
water	152:27	0:0	12	floor_setup
op	152:38	0:0	12	->
water	152:40	0:0	12	data
op	152:44	0:0	12	.
water	152:45	0:0	12	t0
op	152:47	0:0	12	.
water	152:48	0:0	12	book_list
op	152:57	0:0	12	[
water	152:58	0:0	12	idx
op	152:61	0:0	12	]
water	152:63	0:0	10	;
water	153:14	0:0	10	}
water	154:12	0:0	8	}
water	155:8	0:0	8	}
else	155:10	158:8	4
stmts	155:15	158:8	5	
water	155:15	0:0	6	{
call	156:12	156:72	6	av_log
arg	156:19	156:33	7	vc->avccontext
water	156:19	0:0	8	vc
op	156:21	0:0	8	->
water	156:23	0:0	8	avccontext
arg	156:35	156:47	7	AV_LOG_ERROR
water	156:35	0:0	8	AV_LOG_ERROR
arg	156:49	156:72	7	"Invalid floor type!\n"
water	156:49	0:0	8	"Invalid floor type!\n"
water	156:73	0:0	6	;
return	157:12	157:21	6	-1
op	157:19	0:0	7	-
water	157:20	0:0	7	1
water	158:8	0:0	6	}
water	159:4	0:0	4	}
return	160:4	160:12	2	0
water	160:11	0:0	3	0
