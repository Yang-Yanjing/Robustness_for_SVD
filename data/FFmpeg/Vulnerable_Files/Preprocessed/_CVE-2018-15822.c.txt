func	1:0	198:0	0	static int	flv_write_packet
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
param	1:48	1:61	2	AVPacket *	pkt
stmnts	0:0	197:20	1	
decl	3:4	3:32	2	AVIOContext	*pb
op	3:25	0:0	2	=
water	3:27	0:0	2	s
op	3:28	0:0	2	->
water	3:30	0:0	2	pb
decl	4:4	4:68	2	AVCodecParameters	*par
op	4:27	0:0	2	=
water	4:29	0:0	2	s
op	4:30	0:0	2	->
water	4:32	0:0	2	streams
op	4:39	0:0	2	[
water	4:40	0:0	2	pkt
op	4:43	0:0	2	->
water	4:45	0:0	2	stream_index
op	4:57	0:0	2	]
op	4:58	0:0	2	->
water	4:60	0:0	2	codecpar
decl	5:4	5:39	2	FLVContext	*flv
op	5:25	0:0	2	=
water	5:27	0:0	2	s
op	5:28	0:0	2	->
water	5:30	0:0	2	priv_data
decl	6:4	6:67	2	FLVStreamContext	*sc
op	6:25	0:0	2	=
water	6:27	0:0	2	s
op	6:28	0:0	2	->
water	6:30	0:0	2	streams
op	6:37	0:0	2	[
water	6:38	0:0	2	pkt
op	6:41	0:0	2	->
water	6:43	0:0	2	stream_index
op	6:55	0:0	2	]
op	6:56	0:0	2	->
water	6:58	0:0	2	priv_data
water	7:4	0:0	2	unsigned
water	7:13	0:0	2	ts
water	7:15	0:0	2	;
decl	8:4	8:24	2	int	size
op	8:13	0:0	2	=
water	8:15	0:0	2	pkt
op	8:18	0:0	2	->
water	8:20	0:0	2	size
decl	9:4	9:24	2	uint8_t	*data
op	9:18	0:0	2	=
water	9:20	0:0	2	NULL
decl	10:4	10:35	2	int	flags
op	10:14	0:0	2	=
op	10:16	0:0	2	-
water	10:17	0:0	2	1
water	10:18	0:0	2	,
decl	10:4	10:35	2	int	flags_size
water	10:30	0:0	2	,
decl	10:4	10:35	2	int	ret
decl	11:4	11:38	2	int64_t	cur_offset
op	11:23	0:0	2	=
call	11:25	11:37	3	avio_tell
arg	11:35	11:37	4	pb
water	11:35	0:0	5	pb
if	13:4	15:22	2	(par -> codec_id == AV_CODEC_ID_VP6F || par -> codec_id == AV_CODEC_ID_VP6A || par -> codec_id == AV_CODEC_ID_VP6 || par -> codec_id == AV_CODEC_ID_AAC)
cond	13:8	14:62	3	par -> codec_id == AV_CODEC_ID_VP6F || par -> codec_id == AV_CODEC_ID_VP6A || par -> codec_id == AV_CODEC_ID_VP6 || par -> codec_id == AV_CODEC_ID_AAC
water	13:8	0:0	4	par
op	13:11	0:0	4	->
water	13:13	0:0	4	codec_id
op	13:22	0:0	4	==
water	13:25	0:0	4	AV_CODEC_ID_VP6F
op	13:42	0:0	4	||
water	13:45	0:0	4	par
op	13:48	0:0	4	->
water	13:50	0:0	4	codec_id
op	13:59	0:0	4	==
water	13:62	0:0	4	AV_CODEC_ID_VP6A
op	13:79	0:0	4	||
water	14:8	0:0	4	par
op	14:11	0:0	4	->
water	14:13	0:0	4	codec_id
op	14:22	0:0	4	==
water	14:25	0:0	4	AV_CODEC_ID_VP6
op	14:42	0:0	4	||
water	14:45	0:0	4	par
op	14:48	0:0	4	->
water	14:50	0:0	4	codec_id
op	14:59	0:0	4	==
water	14:62	0:0	4	AV_CODEC_ID_AAC
stmts	15:8	15:22	3	
water	15:8	0:0	4	flags_size
op	15:19	0:0	4	=
water	15:21	0:0	4	2
water	15:22	0:0	4	;
else	16:4	17:22	2
stmts	16:9	17:22	3	
if	16:9	17:22	4	(par -> codec_id == AV_CODEC_ID_H264 || par -> codec_id == AV_CODEC_ID_MPEG4)
cond	16:13	16:67	5	par -> codec_id == AV_CODEC_ID_H264 || par -> codec_id == AV_CODEC_ID_MPEG4
water	16:13	0:0	6	par
op	16:16	0:0	6	->
water	16:18	0:0	6	codec_id
op	16:27	0:0	6	==
water	16:30	0:0	6	AV_CODEC_ID_H264
op	16:47	0:0	6	||
water	16:50	0:0	6	par
op	16:53	0:0	6	->
water	16:55	0:0	6	codec_id
op	16:64	0:0	6	==
water	16:67	0:0	6	AV_CODEC_ID_MPEG4
stmts	17:8	17:22	5	
water	17:8	0:0	6	flags_size
op	17:19	0:0	6	=
water	17:21	0:0	6	5
water	17:22	0:0	6	;
else	18:4	19:22	2
stmts	19:8	19:22	3	
water	19:8	0:0	4	flags_size
op	19:19	0:0	4	=
water	19:21	0:0	4	1
water	19:22	0:0	4	;
if	21:4	36:4	2	(par -> codec_id == AV_CODEC_ID_AAC || par -> codec_id == AV_CODEC_ID_H264 || par -> codec_id == AV_CODEC_ID_MPEG4)
cond	21:8	22:32	3	par -> codec_id == AV_CODEC_ID_AAC || par -> codec_id == AV_CODEC_ID_H264 || par -> codec_id == AV_CODEC_ID_MPEG4
water	21:8	0:0	4	par
op	21:11	0:0	4	->
water	21:13	0:0	4	codec_id
op	21:22	0:0	4	==
water	21:25	0:0	4	AV_CODEC_ID_AAC
op	21:41	0:0	4	||
water	21:44	0:0	4	par
op	21:47	0:0	4	->
water	21:49	0:0	4	codec_id
op	21:58	0:0	4	==
water	21:61	0:0	4	AV_CODEC_ID_H264
op	22:12	0:0	4	||
water	22:15	0:0	4	par
op	22:18	0:0	4	->
water	22:20	0:0	4	codec_id
op	22:29	0:0	4	==
water	22:32	0:0	4	AV_CODEC_ID_MPEG4
stmts	22:51	36:4	3	
water	22:51	0:0	4	{
decl	23:8	23:25	4	int	side_size
op	23:22	0:0	4	=
water	23:24	0:0	4	0
decl	24:8	24:91	4	uint8_t	*side
op	24:22	0:0	4	=
call	24:24	24:90	5	av_packet_get_side_data
arg	24:48	24:51	6	pkt
water	24:48	0:0	7	pkt
arg	24:53	24:78	6	AV_PKT_DATA_NEW_EXTRADATA
water	24:53	0:0	7	AV_PKT_DATA_NEW_EXTRADATA
arg	24:80	24:90	6	&side_size
op	24:80	0:0	7	&
water	24:81	0:0	7	side_size
if	25:8	35:8	4	(side && side_size > 0 && ( side_size != par -> extradata_size ||memcmp (side ,par -> extradata ,side_size ) ))
cond	25:12	25:113	5	side && side_size > 0 && ( side_size != par -> extradata_size ||memcmp (side ,par -> extradata ,side_size ) )
water	25:12	0:0	6	side
op	25:17	0:0	6	&&
water	25:20	0:0	6	side_size
op	25:30	0:0	6	>
water	25:32	0:0	6	0
op	25:34	0:0	6	&&
water	25:37	0:0	6	(
water	25:38	0:0	6	side_size
op	25:48	0:0	6	!=
water	25:51	0:0	6	par
op	25:54	0:0	6	->
water	25:56	0:0	6	extradata_size
op	25:71	0:0	6	||
call	25:74	25:112	6	memcmp
arg	25:81	25:85	7	side
water	25:81	0:0	8	side
arg	25:87	25:101	7	par->extradata
water	25:87	0:0	8	par
op	25:90	0:0	8	->
water	25:92	0:0	8	extradata
arg	25:103	25:112	7	side_size
water	25:103	0:0	8	side_size
water	25:113	0:0	6	)
stmts	25:116	35:8	5	
water	25:116	0:0	6	{
call	26:12	26:34	6	av_free
arg	26:20	26:34	7	par->extradata
water	26:20	0:0	8	par
op	26:23	0:0	8	->
water	26:25	0:0	8	extradata
water	26:35	0:0	6	;
water	27:12	0:0	6	par
op	27:15	0:0	6	->
water	27:17	0:0	6	extradata
op	27:27	0:0	6	=
call	27:29	27:80	6	av_mallocz
arg	27:40	27:80	7	side_size+AV_INPUT_BUFFER_PADDING_SIZE
water	27:40	0:0	8	side_size
op	27:50	0:0	8	+
water	27:52	0:0	8	AV_INPUT_BUFFER_PADDING_SIZE
water	27:81	0:0	6	;
if	28:12	31:12	6	(! par -> extradata)
cond	28:16	28:22	7	! par -> extradata
op	28:16	0:0	8	!
water	28:17	0:0	8	par
op	28:20	0:0	8	->
water	28:22	0:0	8	extradata
stmts	28:33	31:12	7	
water	28:33	0:0	8	{
water	29:16	0:0	8	par
op	29:19	0:0	8	->
water	29:21	0:0	8	extradata_size
op	29:36	0:0	8	=
water	29:38	0:0	8	0
water	29:39	0:0	8	;
return	30:16	30:38	8	AVERROR(ENOMEM)
call	30:23	30:37	9	AVERROR
arg	30:31	30:37	10	ENOMEM
water	30:31	0:0	11	ENOMEM
water	31:12	0:0	8	}
call	32:12	32:50	6	memcpy
arg	32:19	32:33	7	par->extradata
water	32:19	0:0	8	par
op	32:22	0:0	8	->
water	32:24	0:0	8	extradata
arg	32:35	32:39	7	side
water	32:35	0:0	8	side
arg	32:41	32:50	7	side_size
water	32:41	0:0	8	side_size
water	32:51	0:0	6	;
water	33:12	0:0	6	par
op	33:15	0:0	6	->
water	33:17	0:0	6	extradata_size
op	33:32	0:0	6	=
water	33:34	0:0	6	side_size
water	33:43	0:0	6	;
call	34:12	34:41	6	flv_write_codec_header
arg	34:35	34:36	7	s
water	34:35	0:0	8	s
arg	34:38	34:41	7	par
water	34:38	0:0	8	par
water	34:42	0:0	6	;
water	35:8	0:0	6	}
water	36:4	0:0	4	}
if	38:4	39:30	2	(flv -> delay == AV_NOPTS_VALUE)
cond	38:8	38:22	3	flv -> delay == AV_NOPTS_VALUE
water	38:8	0:0	4	flv
op	38:11	0:0	4	->
water	38:13	0:0	4	delay
op	38:19	0:0	4	==
water	38:22	0:0	4	AV_NOPTS_VALUE
stmts	39:8	39:30	3	
water	39:8	0:0	4	flv
op	39:11	0:0	4	->
water	39:13	0:0	4	delay
op	39:19	0:0	4	=
op	39:21	0:0	4	-
water	39:22	0:0	4	pkt
op	39:25	0:0	4	->
water	39:27	0:0	4	dts
water	39:30	0:0	4	;
if	41:4	45:4	2	(pkt -> dts < - flv -> delay)
cond	41:8	41:25	3	pkt -> dts < - flv -> delay
water	41:8	0:0	4	pkt
op	41:11	0:0	4	->
water	41:13	0:0	4	dts
op	41:17	0:0	4	<
op	41:19	0:0	4	-
water	41:20	0:0	4	flv
op	41:23	0:0	4	->
water	41:25	0:0	4	delay
stmts	41:32	45:4	3	
water	41:32	0:0	4	{
call	42:8	43:74	4	av_log
arg	42:15	42:16	5	s
water	42:15	0:0	6	s
arg	42:18	42:32	5	AV_LOG_WARNING
water	42:18	0:0	6	AV_LOG_WARNING
arg	43:15	43:74	5	"Packets are not in the proper order with respect to DTS\n"
water	43:15	0:0	6	"Packets are not in the proper order with respect to DTS\n"
water	43:75	0:0	4	;
return	44:8	44:30	4	AVERROR(EINVAL)
call	44:15	44:29	5	AVERROR
arg	44:23	44:29	6	EINVAL
water	44:23	0:0	7	EINVAL
water	45:4	0:0	4	}
water	47:4	0:0	2	ts
op	47:7	0:0	2	=
water	47:9	0:0	2	pkt
op	47:12	0:0	2	->
water	47:14	0:0	2	dts
water	47:17	0:0	2	;
if	49:4	52:4	2	(s -> event_flags & AVSTREAM_EVENT_FLAG_METADATA_UPDATED)
cond	49:8	49:25	3	s -> event_flags & AVSTREAM_EVENT_FLAG_METADATA_UPDATED
water	49:8	0:0	4	s
op	49:9	0:0	4	->
water	49:11	0:0	4	event_flags
op	49:23	0:0	4	&
water	49:25	0:0	4	AVSTREAM_EVENT_FLAG_METADATA_UPDATED
stmts	49:63	52:4	3	
water	49:63	0:0	4	{
call	50:8	50:28	4	write_metadata
arg	50:23	50:24	5	s
water	50:23	0:0	6	s
arg	50:26	50:28	5	ts
water	50:26	0:0	6	ts
water	50:29	0:0	4	;
water	51:8	0:0	4	s
op	51:9	0:0	4	->
water	51:11	0:0	4	event_flags
op	51:23	0:0	4	&=
water	51:26	0:0	4	~AVSTREAM_EVENT_FLAG_METADATA_UPDATED
water	51:63	0:0	4	;
water	52:4	0:0	4	}
call	54:4	55:178	2	avio_write_marker
arg	54:22	54:24	3	pb
water	54:22	0:0	4	pb
arg	54:26	54:60	3	av_rescale(ts,AV_TIME_BASE,1000)
call	54:26	54:59	4	av_rescale
arg	54:37	54:39	5	ts
water	54:37	0:0	6	ts
arg	54:41	54:53	5	AV_TIME_BASE
water	54:41	0:0	6	AV_TIME_BASE
arg	54:55	54:59	5	1000
water	54:55	0:0	6	1000
arg	55:22	55:178	3	pkt->flags&AV_PKT_FLAG_KEY&&(flv->video_par?par->codec_type==AVMEDIA_TYPE_VIDEO:1)?AVIO_DATA_MARKER_SYNC_POINT:AVIO_DATA_MARKER_BOUNDARY_POINT
water	55:22	0:0	4	pkt
op	55:25	0:0	4	->
water	55:27	0:0	4	flags
op	55:33	0:0	4	&
water	55:35	0:0	4	AV_PKT_FLAG_KEY
op	55:51	0:0	4	&&
water	55:54	0:0	4	(
water	55:55	0:0	4	flv
op	55:58	0:0	4	->
water	55:60	0:0	4	video_par
water	55:70	0:0	4	?
water	55:72	0:0	4	par
op	55:75	0:0	4	->
water	55:77	0:0	4	codec_type
op	55:88	0:0	4	==
water	55:91	0:0	4	AVMEDIA_TYPE_VIDEO
water	55:110	0:0	4	:
water	55:112	0:0	4	1
water	55:113	0:0	4	)
water	55:115	0:0	4	?
water	55:117	0:0	4	AVIO_DATA_MARKER_SYNC_POINT
water	55:145	0:0	4	:
water	55:147	0:0	4	AVIO_DATA_MARKER_BOUNDARY_POINT
water	55:179	0:0	2	;
switch	57:4	78:4	2	(par -> codec_type)
cond	57:12	57:17	3	par -> codec_type
water	57:12	0:0	4	par
op	57:15	0:0	4	->
water	57:17	0:0	4	codec_type
stmts	57:29	78:4	3	
water	57:29	0:0	4	{
label	58:4	58:27	4	case AVMEDIA_TYPE_VIDEO :
call	59:8	59:38	4	avio_w8
arg	59:16	59:18	5	pb
water	59:16	0:0	6	pb
arg	59:20	59:38	5	FLV_TAG_TYPE_VIDEO
water	59:20	0:0	6	FLV_TAG_TYPE_VIDEO
water	59:39	0:0	4	;
water	61:8	0:0	4	flags
op	61:14	0:0	4	=
call	61:16	61:67	4	ff_codec_get_tag
arg	61:33	61:52	5	flv_video_codec_ids
water	61:33	0:0	6	flv_video_codec_ids
arg	61:54	61:67	5	par->codec_id
water	61:54	0:0	6	par
op	61:57	0:0	6	->
water	61:59	0:0	6	codec_id
water	61:68	0:0	4	;
water	63:8	0:0	4	flags
op	63:14	0:0	4	|=
water	63:17	0:0	4	pkt
op	63:20	0:0	4	->
water	63:22	0:0	4	flags
op	63:28	0:0	4	&
water	63:30	0:0	4	AV_PKT_FLAG_KEY
water	63:46	0:0	4	?
water	63:48	0:0	4	FLV_FRAME_KEY
water	63:62	0:0	4	:
water	63:64	0:0	4	FLV_FRAME_INTER
water	63:79	0:0	4	;
break	64:8	64:13	4	
label	65:4	65:27	4	case AVMEDIA_TYPE_AUDIO :
water	66:8	0:0	4	flags
op	66:14	0:0	4	=
call	66:16	66:38	4	get_audio_flags
arg	66:32	66:33	5	s
water	66:32	0:0	6	s
arg	66:35	66:38	5	par
water	66:35	0:0	6	par
water	66:39	0:0	4	;
call	68:8	68:23	4	av_assert0
arg	68:19	68:23	5	size
water	68:19	0:0	6	size
water	68:24	0:0	4	;
call	70:8	70:38	4	avio_w8
arg	70:16	70:18	5	pb
water	70:16	0:0	6	pb
arg	70:20	70:38	5	FLV_TAG_TYPE_AUDIO
water	70:20	0:0	6	FLV_TAG_TYPE_AUDIO
water	70:39	0:0	4	;
break	71:8	71:13	4	
label	72:4	72:30	4	case AVMEDIA_TYPE_SUBTITLE :
label	73:4	73:26	4	case AVMEDIA_TYPE_DATA :
call	74:8	74:37	4	avio_w8
arg	74:16	74:18	5	pb
water	74:16	0:0	6	pb
arg	74:20	74:37	5	FLV_TAG_TYPE_META
water	74:20	0:0	6	FLV_TAG_TYPE_META
water	74:38	0:0	4	;
break	75:8	75:13	4	
label	76:4	76:11	4	default :
return	77:8	77:30	4	AVERROR(EINVAL)
call	77:15	77:29	5	AVERROR
arg	77:23	77:29	6	EINVAL
water	77:23	0:0	7	EINVAL
water	78:4	0:0	4	}
if	80:4	85:4	2	(par -> codec_id == AV_CODEC_ID_H264 || par -> codec_id == AV_CODEC_ID_MPEG4)
cond	80:8	80:62	3	par -> codec_id == AV_CODEC_ID_H264 || par -> codec_id == AV_CODEC_ID_MPEG4
water	80:8	0:0	4	par
op	80:11	0:0	4	->
water	80:13	0:0	4	codec_id
op	80:22	0:0	4	==
water	80:25	0:0	4	AV_CODEC_ID_H264
op	80:42	0:0	4	||
water	80:45	0:0	4	par
op	80:48	0:0	4	->
water	80:50	0:0	4	codec_id
op	80:59	0:0	4	==
water	80:62	0:0	4	AV_CODEC_ID_MPEG4
stmts	80:81	85:4	3	
water	80:81	0:0	4	{
if	82:8	84:26	4	(par -> extradata_size > 0 && * ( uint8_t * ) par -> extradata != 1)
cond	82:12	82:68	5	par -> extradata_size > 0 && * ( uint8_t * ) par -> extradata != 1
water	82:12	0:0	6	par
op	82:15	0:0	6	->
water	82:17	0:0	6	extradata_size
op	82:32	0:0	6	>
water	82:34	0:0	6	0
op	82:36	0:0	6	&&
op	82:39	0:0	6	*
water	82:40	0:0	6	(
water	82:41	0:0	6	uint8_t
op	82:48	0:0	6	*
water	82:49	0:0	6	)
water	82:50	0:0	6	par
op	82:53	0:0	6	->
water	82:55	0:0	6	extradata
op	82:65	0:0	6	!=
water	82:68	0:0	6	1
stmts	83:12	84:26	5	
if	83:12	84:26	6	(( ret =ff_avc_parse_nal_units_buf (pkt -> data ,& data ,& size ) ) < 0)
cond	83:16	83:78	7	( ret =ff_avc_parse_nal_units_buf (pkt -> data ,& data ,& size ) ) < 0
water	83:16	0:0	8	(
water	83:17	0:0	8	ret
op	83:21	0:0	8	=
call	83:23	83:73	8	ff_avc_parse_nal_units_buf
arg	83:50	83:59	9	pkt->data
water	83:50	0:0	10	pkt
op	83:53	0:0	10	->
water	83:55	0:0	10	data
arg	83:61	83:66	9	&data
op	83:61	0:0	10	&
water	83:62	0:0	10	data
arg	83:68	83:73	9	&size
op	83:68	0:0	10	&
water	83:69	0:0	10	size
water	83:74	0:0	8	)
op	83:76	0:0	8	<
water	83:78	0:0	8	0
stmts	84:16	84:26	7	
return	84:16	84:26	8	ret
water	84:23	0:0	9	ret
water	85:4	0:0	4	}
else	85:6	94:4	2
stmts	85:11	94:4	3	
if	85:11	94:4	4	(par -> codec_id == AV_CODEC_ID_AAC && pkt -> size > 2 && (AV_RB16 (pkt -> data ) & 0 xfff0 ) == 0 xfff0)
cond	85:15	86:49	5	par -> codec_id == AV_CODEC_ID_AAC && pkt -> size > 2 && (AV_RB16 (pkt -> data ) & 0 xfff0 ) == 0 xfff0
water	85:15	0:0	6	par
op	85:18	0:0	6	->
water	85:20	0:0	6	codec_id
op	85:29	0:0	6	==
water	85:32	0:0	6	AV_CODEC_ID_AAC
op	85:48	0:0	6	&&
water	85:51	0:0	6	pkt
op	85:54	0:0	6	->
water	85:56	0:0	6	size
op	85:61	0:0	6	>
water	85:63	0:0	6	2
op	85:65	0:0	6	&&
water	86:15	0:0	6	(
call	86:16	86:33	6	AV_RB16
arg	86:24	86:33	7	pkt->data
water	86:24	0:0	8	pkt
op	86:27	0:0	8	->
water	86:29	0:0	8	data
op	86:35	0:0	6	&
water	86:37	0:0	6	0
water	86:38	0:0	6	xfff0
water	86:43	0:0	6	)
op	86:45	0:0	6	==
water	86:48	0:0	6	0
water	86:49	0:0	6	xfff0
stmts	86:56	94:4	5	
water	86:56	0:0	6	{
if	87:8	92:8	6	(! s -> streams [ pkt -> stream_index ] -> nb_frames)
cond	87:12	87:44	7	! s -> streams [ pkt -> stream_index ] -> nb_frames
op	87:12	0:0	8	!
water	87:13	0:0	8	s
op	87:14	0:0	8	->
water	87:16	0:0	8	streams
op	87:23	0:0	8	[
water	87:24	0:0	8	pkt
op	87:27	0:0	8	->
water	87:29	0:0	8	stream_index
op	87:41	0:0	8	]
op	87:42	0:0	8	->
water	87:44	0:0	8	nb_frames
stmts	87:55	92:8	7	
water	87:55	0:0	8	{
call	88:8	90:62	8	av_log
arg	88:15	88:16	9	s
water	88:15	0:0	10	s
arg	88:18	88:30	9	AV_LOG_ERROR
water	88:18	0:0	10	AV_LOG_ERROR
arg	88:32	90:62	9	"Malformed AAC bitstream detected: ""use the audio bitstream filter 'aac_adtstoasc' to fix it ""('-bsf:a aac_adtstoasc' option with ffmpeg)\n"
water	88:32	0:0	10	"Malformed AAC bitstream detected: "
water	89:15	0:0	10	"use the audio bitstream filter 'aac_adtstoasc' to fix it "
water	90:15	0:0	10	"('-bsf:a aac_adtstoasc' option with ffmpeg)\n"
water	90:63	0:0	8	;
return	91:8	91:34	8	AVERROR_INVALIDDATA
water	91:15	0:0	9	AVERROR_INVALIDDATA
water	92:8	0:0	8	}
call	93:8	93:57	6	av_log
arg	93:15	93:16	7	s
water	93:15	0:0	8	s
arg	93:18	93:32	7	AV_LOG_WARNING
water	93:18	0:0	8	AV_LOG_WARNING
arg	93:34	93:57	7	"aac bitstream error\n"
water	93:34	0:0	8	"aac bitstream error\n"
water	93:58	0:0	6	;
water	94:4	0:0	6	}
if	97:4	100:65	2	(par -> codec_id == AV_CODEC_ID_SPEEX && ts - sc -> last_ts > 160)
cond	97:8	97:65	3	par -> codec_id == AV_CODEC_ID_SPEEX && ts - sc -> last_ts > 160
water	97:8	0:0	4	par
op	97:11	0:0	4	->
water	97:13	0:0	4	codec_id
op	97:22	0:0	4	==
water	97:25	0:0	4	AV_CODEC_ID_SPEEX
op	97:43	0:0	4	&&
water	97:46	0:0	4	ts
op	97:49	0:0	4	-
water	97:51	0:0	4	sc
op	97:53	0:0	4	->
water	97:55	0:0	4	last_ts
op	97:63	0:0	4	>
water	97:65	0:0	4	160
stmts	98:8	100:65	3	
call	98:8	100:64	4	av_log
arg	98:15	98:16	5	s
water	98:15	0:0	6	s
arg	98:18	98:32	5	AV_LOG_WARNING
water	98:18	0:0	6	AV_LOG_WARNING
arg	98:34	100:64	5	"Warning: Speex stream has more than ""8 frames per packet. Adobe Flash ""Player cannot handle this!\n"
water	98:34	0:0	6	"Warning: Speex stream has more than "
water	99:34	0:0	6	"8 frames per packet. Adobe Flash "
water	100:34	0:0	6	"Player cannot handle this!\n"
water	100:65	0:0	4	;
if	102:4	103:24	2	(sc -> last_ts < ts)
cond	102:8	102:22	3	sc -> last_ts < ts
water	102:8	0:0	4	sc
op	102:10	0:0	4	->
water	102:12	0:0	4	last_ts
op	102:20	0:0	4	<
water	102:22	0:0	4	ts
stmts	103:8	103:24	3	
water	103:8	0:0	4	sc
op	103:10	0:0	4	->
water	103:12	0:0	4	last_ts
op	103:20	0:0	4	=
water	103:22	0:0	4	ts
water	103:24	0:0	4	;
if	105:4	109:4	2	(size + flags_size >= 1 << 24)
cond	105:8	105:32	3	size + flags_size >= 1 << 24
water	105:8	0:0	4	size
op	105:13	0:0	4	+
water	105:15	0:0	4	flags_size
op	105:26	0:0	4	>=
water	105:29	0:0	4	1
op	105:30	0:0	4	<<
water	105:32	0:0	4	24
stmts	105:36	109:4	3	
water	105:36	0:0	4	{
call	106:8	107:39	4	av_log
arg	106:15	106:16	5	s
water	106:15	0:0	6	s
arg	106:18	106:30	5	AV_LOG_ERROR
water	106:18	0:0	6	AV_LOG_ERROR
arg	106:32	106:71	5	"Too large packet with size %u >= %u\n"
water	106:32	0:0	6	"Too large packet with size %u >= %u\n"
arg	107:15	107:32	5	size+flags_size
water	107:15	0:0	6	size
op	107:20	0:0	6	+
water	107:22	0:0	6	flags_size
arg	107:34	107:39	5	1<<24
water	107:34	0:0	6	1
op	107:35	0:0	6	<<
water	107:37	0:0	6	24
water	107:40	0:0	4	;
return	108:8	108:30	4	AVERROR(EINVAL)
call	108:15	108:29	5	AVERROR
arg	108:23	108:29	6	EINVAL
water	108:23	0:0	7	EINVAL
water	109:4	0:0	4	}
call	111:4	111:35	2	avio_wb24
arg	111:14	111:16	3	pb
water	111:14	0:0	4	pb
arg	111:18	111:35	3	size+flags_size
water	111:18	0:0	4	size
op	111:23	0:0	4	+
water	111:25	0:0	4	flags_size
water	111:36	0:0	2	;
call	112:4	112:31	2	avio_wb24
arg	112:14	112:16	3	pb
water	112:14	0:0	4	pb
arg	112:18	112:31	3	ts&0xFFFFFF
water	112:18	0:0	4	ts
op	112:21	0:0	4	&
water	112:23	0:0	4	0
water	112:24	0:0	4	xFFFFFF
water	112:32	0:0	2	;
call	113:4	113:33	2	avio_w8
arg	113:12	113:14	3	pb
water	113:12	0:0	4	pb
arg	113:16	113:33	3	(ts>>24)&0x7F
water	113:16	0:0	4	(
water	113:17	0:0	4	ts
op	113:20	0:0	4	>>
water	113:23	0:0	4	24
water	113:25	0:0	4	)
op	113:27	0:0	4	&
water	113:29	0:0	4	0
water	113:30	0:0	4	x7F
water	113:34	0:0	2	;
call	114:4	114:31	2	avio_wb24
arg	114:14	114:16	3	pb
water	114:14	0:0	4	pb
arg	114:18	114:31	3	flv->reserved
water	114:18	0:0	4	flv
op	114:21	0:0	4	->
water	114:23	0:0	4	reserved
water	114:32	0:0	2	;
if	116:4	144:4	2	(par -> codec_type == AVMEDIA_TYPE_DATA || par -> codec_type == AVMEDIA_TYPE_SUBTITLE)
cond	116:8	117:27	3	par -> codec_type == AVMEDIA_TYPE_DATA || par -> codec_type == AVMEDIA_TYPE_SUBTITLE
water	116:8	0:0	4	par
op	116:11	0:0	4	->
water	116:13	0:0	4	codec_type
op	116:24	0:0	4	==
water	116:27	0:0	4	AVMEDIA_TYPE_DATA
op	116:45	0:0	4	||
water	117:8	0:0	4	par
op	117:11	0:0	4	->
water	117:13	0:0	4	codec_type
op	117:24	0:0	4	==
water	117:27	0:0	4	AVMEDIA_TYPE_SUBTITLE
stmts	117:51	144:4	3	
water	117:51	0:0	4	{
decl	118:8	118:21	4	int	data_size
decl	119:8	119:49	4	int64_t	metadata_size_pos
op	119:34	0:0	4	=
call	119:36	119:48	5	avio_tell
arg	119:46	119:48	6	pb
water	119:46	0:0	7	pb
if	120:8	134:8	4	(par -> codec_id == AV_CODEC_ID_TEXT)
cond	120:12	120:29	5	par -> codec_id == AV_CODEC_ID_TEXT
water	120:12	0:0	6	par
op	120:15	0:0	6	->
water	120:17	0:0	6	codec_id
op	120:26	0:0	6	==
water	120:29	0:0	6	AV_CODEC_ID_TEXT
stmts	120:47	134:8	5	
water	120:47	0:0	6	{
call	122:12	122:44	6	avio_w8
arg	122:20	122:22	7	pb
water	122:20	0:0	8	pb
arg	122:24	122:44	7	AMF_DATA_TYPE_STRING
water	122:24	0:0	8	AMF_DATA_TYPE_STRING
water	122:45	0:0	6	;
call	123:12	123:43	6	put_amf_string
arg	123:27	123:29	7	pb
water	123:27	0:0	8	pb
arg	123:31	123:43	7	"onTextData"
water	123:31	0:0	8	"onTextData"
water	123:44	0:0	6	;
call	124:12	124:48	6	avio_w8
arg	124:20	124:22	7	pb
water	124:20	0:0	8	pb
arg	124:24	124:48	7	AMF_DATA_TYPE_MIXEDARRAY
water	124:24	0:0	8	AMF_DATA_TYPE_MIXEDARRAY
water	124:49	0:0	6	;
call	125:12	125:27	6	avio_wb32
arg	125:22	125:24	7	pb
water	125:22	0:0	8	pb
arg	125:26	125:27	7	2
water	125:26	0:0	8	2
water	125:28	0:0	6	;
call	126:12	126:37	6	put_amf_string
arg	126:27	126:29	7	pb
water	126:27	0:0	8	pb
arg	126:31	126:37	7	"type"
water	126:31	0:0	8	"type"
water	126:38	0:0	6	;
call	127:12	127:44	6	avio_w8
arg	127:20	127:22	7	pb
water	127:20	0:0	8	pb
arg	127:24	127:44	7	AMF_DATA_TYPE_STRING
water	127:24	0:0	8	AMF_DATA_TYPE_STRING
water	127:45	0:0	6	;
call	128:12	128:37	6	put_amf_string
arg	128:27	128:29	7	pb
water	128:27	0:0	8	pb
arg	128:31	128:37	7	"Text"
water	128:31	0:0	8	"Text"
water	128:38	0:0	6	;
call	129:12	129:37	6	put_amf_string
arg	129:27	129:29	7	pb
water	129:27	0:0	8	pb
arg	129:31	129:37	7	"text"
water	129:31	0:0	8	"text"
water	129:38	0:0	6	;
call	130:12	130:44	6	avio_w8
arg	130:20	130:22	7	pb
water	130:20	0:0	8	pb
arg	130:24	130:44	7	AMF_DATA_TYPE_STRING
water	130:24	0:0	8	AMF_DATA_TYPE_STRING
water	130:45	0:0	6	;
call	131:12	131:40	6	put_amf_string
arg	131:27	131:29	7	pb
water	131:27	0:0	8	pb
arg	131:31	131:40	7	pkt->data
water	131:31	0:0	8	pkt
op	131:34	0:0	8	->
water	131:36	0:0	8	data
water	131:41	0:0	6	;
call	132:12	132:33	6	put_amf_string
arg	132:27	132:29	7	pb
water	132:27	0:0	8	pb
arg	132:31	132:33	7	""
water	132:31	0:0	8	""
water	132:34	0:0	6	;
call	133:12	133:41	6	avio_w8
arg	133:20	133:22	7	pb
water	133:20	0:0	8	pb
arg	133:24	133:41	7	AMF_END_OF_OBJECT
water	133:24	0:0	8	AMF_END_OF_OBJECT
water	133:42	0:0	6	;
water	134:8	0:0	6	}
else	134:10	137:8	4
stmts	134:15	137:8	5	
water	134:15	0:0	6	{
call	136:12	136:56	6	avio_write
arg	136:23	136:25	7	pb
water	136:23	0:0	8	pb
arg	136:27	136:50	7	data?data:pkt->data
water	136:27	0:0	8	data
water	136:32	0:0	8	?
water	136:34	0:0	8	data
water	136:39	0:0	8	:
water	136:41	0:0	8	pkt
op	136:44	0:0	8	->
water	136:46	0:0	8	data
arg	136:52	136:56	7	size
water	136:52	0:0	8	size
water	136:57	0:0	6	;
water	137:8	0:0	6	}
water	139:8	0:0	4	data_size
op	139:18	0:0	4	=
call	139:20	139:32	4	avio_tell
arg	139:30	139:32	5	pb
water	139:30	0:0	6	pb
op	139:34	0:0	4	-
water	139:36	0:0	4	metadata_size_pos
water	139:53	0:0	4	;
call	140:8	140:54	4	avio_seek
arg	140:18	140:20	5	pb
water	140:18	0:0	6	pb
arg	140:22	140:44	5	metadata_size_pos-10
water	140:22	0:0	6	metadata_size_pos
op	140:40	0:0	6	-
water	140:42	0:0	6	10
arg	140:46	140:54	5	SEEK_SET
water	140:46	0:0	6	SEEK_SET
water	140:55	0:0	4	;
call	141:8	141:31	4	avio_wb24
arg	141:18	141:20	5	pb
water	141:18	0:0	6	pb
arg	141:22	141:31	5	data_size
water	141:22	0:0	6	data_size
water	141:32	0:0	4	;
call	142:8	142:50	4	avio_seek
arg	142:18	142:20	5	pb
water	142:18	0:0	6	pb
arg	142:22	142:40	5	data_size+10-3
water	142:22	0:0	6	data_size
op	142:32	0:0	6	+
water	142:34	0:0	6	10
op	142:37	0:0	6	-
water	142:39	0:0	6	3
arg	142:42	142:50	5	SEEK_CUR
water	142:42	0:0	6	SEEK_CUR
water	142:51	0:0	4	;
call	143:8	143:36	4	avio_wb32
arg	143:18	143:20	5	pb
water	143:18	0:0	6	pb
arg	143:22	143:36	5	data_size+11
water	143:22	0:0	6	data_size
op	143:32	0:0	6	+
water	143:34	0:0	6	11
water	143:37	0:0	4	;
water	144:4	0:0	4	}
else	144:6	167:4	2
stmts	144:11	167:4	3	
water	144:11	0:0	4	{
call	145:8	145:27	4	av_assert1
arg	145:19	145:27	5	flags>=0
water	145:19	0:0	6	flags
op	145:24	0:0	6	>=
water	145:26	0:0	6	0
water	145:28	0:0	4	;
call	146:8	146:24	4	avio_w8
arg	146:16	146:18	5	pb
water	146:16	0:0	6	pb
arg	146:19	146:24	5	flags
water	146:19	0:0	6	flags
water	146:25	0:0	4	;
if	147:8	148:25	4	(par -> codec_id == AV_CODEC_ID_VP6)
cond	147:12	147:29	5	par -> codec_id == AV_CODEC_ID_VP6
water	147:12	0:0	6	par
op	147:15	0:0	6	->
water	147:17	0:0	6	codec_id
op	147:26	0:0	6	==
water	147:29	0:0	6	AV_CODEC_ID_VP6
stmts	148:12	148:25	5	
call	148:12	148:24	6	avio_w8
arg	148:20	148:22	7	pb
water	148:20	0:0	8	pb
arg	148:23	148:24	7	0
water	148:23	0:0	8	0
water	148:25	0:0	6	;
if	149:8	155:8	4	(par -> codec_id == AV_CODEC_ID_VP6F || par -> codec_id == AV_CODEC_ID_VP6A)
cond	149:12	149:66	5	par -> codec_id == AV_CODEC_ID_VP6F || par -> codec_id == AV_CODEC_ID_VP6A
water	149:12	0:0	6	par
op	149:15	0:0	6	->
water	149:17	0:0	6	codec_id
op	149:26	0:0	6	==
water	149:29	0:0	6	AV_CODEC_ID_VP6F
op	149:46	0:0	6	||
water	149:49	0:0	6	par
op	149:52	0:0	6	->
water	149:54	0:0	6	codec_id
op	149:63	0:0	6	==
water	149:66	0:0	6	AV_CODEC_ID_VP6A
stmts	149:84	155:8	5	
water	149:84	0:0	6	{
if	150:12	151:46	6	(par -> extradata_size)
cond	150:16	150:21	7	par -> extradata_size
water	150:16	0:0	8	par
op	150:19	0:0	8	->
water	150:21	0:0	8	extradata_size
stmts	151:16	151:46	7	
call	151:16	151:45	8	avio_w8
arg	151:24	151:26	9	pb
water	151:24	0:0	10	pb
arg	151:28	151:45	9	par->extradata[0]
water	151:28	0:0	10	par
op	151:31	0:0	10	->
water	151:33	0:0	10	extradata
op	151:42	0:0	10	[
water	151:43	0:0	10	0
op	151:44	0:0	10	]
water	151:46	0:0	8	;
else	152:12	154:70	6
stmts	153:16	154:70	7	
call	153:16	154:69	8	avio_w8
arg	153:24	153:26	9	pb
water	153:24	0:0	10	pb
arg	153:28	154:69	9	((FFALIGN(par->width,16)-par->width)<<4)|(FFALIGN(par->height,16)-par->height)
water	153:28	0:0	10	(
water	153:29	0:0	10	(
call	153:30	153:53	10	FFALIGN
arg	153:38	153:48	11	par->width
water	153:38	0:0	12	par
op	153:41	0:0	12	->
water	153:43	0:0	12	width
arg	153:51	153:53	11	16
water	153:51	0:0	12	16
op	153:55	0:0	10	-
water	153:57	0:0	10	par
op	153:60	0:0	10	->
water	153:62	0:0	10	width
water	153:67	0:0	10	)
op	153:69	0:0	10	<<
water	153:72	0:0	10	4
water	153:73	0:0	10	)
op	153:75	0:0	10	|
water	154:29	0:0	10	(
call	154:30	154:53	10	FFALIGN
arg	154:38	154:49	11	par->height
water	154:38	0:0	12	par
op	154:41	0:0	12	->
water	154:43	0:0	12	height
arg	154:51	154:53	11	16
water	154:51	0:0	12	16
op	154:55	0:0	10	-
water	154:57	0:0	10	par
op	154:60	0:0	10	->
water	154:62	0:0	10	height
water	154:68	0:0	10	)
water	154:70	0:0	8	;
water	155:8	0:0	6	}
else	155:10	156:26	4
stmts	155:15	156:26	5	
if	155:15	156:26	6	(par -> codec_id == AV_CODEC_ID_AAC)
cond	155:19	155:36	7	par -> codec_id == AV_CODEC_ID_AAC
water	155:19	0:0	8	par
op	155:22	0:0	8	->
water	155:24	0:0	8	codec_id
op	155:33	0:0	8	==
water	155:36	0:0	8	AV_CODEC_ID_AAC
stmts	156:12	156:26	7	
call	156:12	156:25	8	avio_w8
arg	156:20	156:22	9	pb
water	156:20	0:0	10	pb
arg	156:24	156:25	9	1
water	156:24	0:0	10	1
water	156:26	0:0	8	;
else	157:8	160:8	4
stmts	157:13	160:8	5	
if	157:13	160:8	6	(par -> codec_id == AV_CODEC_ID_H264 || par -> codec_id == AV_CODEC_ID_MPEG4)
cond	157:17	157:71	7	par -> codec_id == AV_CODEC_ID_H264 || par -> codec_id == AV_CODEC_ID_MPEG4
water	157:17	0:0	8	par
op	157:20	0:0	8	->
water	157:22	0:0	8	codec_id
op	157:31	0:0	8	==
water	157:34	0:0	8	AV_CODEC_ID_H264
op	157:51	0:0	8	||
water	157:54	0:0	8	par
op	157:57	0:0	8	->
water	157:59	0:0	8	codec_id
op	157:68	0:0	8	==
water	157:71	0:0	8	AV_CODEC_ID_MPEG4
stmts	157:90	160:8	7	
water	157:90	0:0	8	{
call	158:12	158:25	8	avio_w8
arg	158:20	158:22	9	pb
water	158:20	0:0	10	pb
arg	158:24	158:25	9	1
water	158:24	0:0	10	1
water	158:26	0:0	8	;
call	159:12	159:45	8	avio_wb24
arg	159:22	159:24	9	pb
water	159:22	0:0	10	pb
arg	159:26	159:45	9	pkt->pts-pkt->dts
water	159:26	0:0	10	pkt
op	159:29	0:0	10	->
water	159:31	0:0	10	pts
op	159:35	0:0	10	-
water	159:37	0:0	10	pkt
op	159:40	0:0	10	->
water	159:42	0:0	10	dts
water	159:46	0:0	8	;
water	160:8	0:0	8	}
call	162:8	162:52	4	avio_write
arg	162:19	162:21	5	pb
water	162:19	0:0	6	pb
arg	162:23	162:46	5	data?data:pkt->data
water	162:23	0:0	6	data
water	162:28	0:0	6	?
water	162:30	0:0	6	data
water	162:35	0:0	6	:
water	162:37	0:0	6	pkt
op	162:40	0:0	6	->
water	162:42	0:0	6	data
arg	162:48	162:52	5	size
water	162:48	0:0	6	size
water	162:53	0:0	4	;
call	164:8	164:44	4	avio_wb32
arg	164:18	164:20	5	pb
water	164:18	0:0	6	pb
arg	164:22	164:44	5	size+flags_size+11
water	164:22	0:0	6	size
op	164:27	0:0	6	+
water	164:29	0:0	6	flags_size
op	164:40	0:0	6	+
water	164:42	0:0	6	11
water	164:45	0:0	4	;
water	165:8	0:0	4	flv
op	165:11	0:0	4	->
water	165:13	0:0	4	duration
op	165:22	0:0	4	=
call	165:24	166:67	4	FFMAX
arg	165:30	165:43	5	flv->duration
water	165:30	0:0	6	flv
op	165:33	0:0	6	->
water	165:35	0:0	6	duration
arg	166:30	166:67	5	pkt->pts+flv->delay+pkt->duration
water	166:30	0:0	6	pkt
op	166:33	0:0	6	->
water	166:35	0:0	6	pts
op	166:39	0:0	6	+
water	166:41	0:0	6	flv
op	166:44	0:0	6	->
water	166:46	0:0	6	delay
op	166:52	0:0	6	+
water	166:54	0:0	6	pkt
op	166:57	0:0	6	->
water	166:59	0:0	6	duration
water	166:68	0:0	4	;
water	167:4	0:0	4	}
if	169:4	193:4	2	(flv -> flags & FLV_ADD_KEYFRAME_INDEX)
cond	169:8	169:21	3	flv -> flags & FLV_ADD_KEYFRAME_INDEX
water	169:8	0:0	4	flv
op	169:11	0:0	4	->
water	169:13	0:0	4	flags
op	169:19	0:0	4	&
water	169:21	0:0	4	FLV_ADD_KEYFRAME_INDEX
stmts	169:45	193:4	3	
water	169:45	0:0	4	{
switch	170:8	192:8	4	(par -> codec_type)
cond	170:16	170:21	5	par -> codec_type
water	170:16	0:0	6	par
op	170:19	0:0	6	->
water	170:21	0:0	6	codec_type
stmts	170:33	192:8	5	
water	170:33	0:0	6	{
label	171:12	171:35	6	case AVMEDIA_TYPE_VIDEO :
water	172:16	0:0	6	flv
op	172:19	0:0	6	->
water	172:21	0:0	6	videosize
op	172:31	0:0	6	+=
water	172:34	0:0	6	(
call	172:35	172:47	6	avio_tell
arg	172:45	172:47	7	pb
water	172:45	0:0	8	pb
op	172:49	0:0	6	-
water	172:51	0:0	6	cur_offset
water	172:61	0:0	6	)
water	172:62	0:0	6	;
water	173:16	0:0	6	flv
op	173:19	0:0	6	->
water	173:21	0:0	6	lasttimestamp
op	173:35	0:0	6	=
water	173:37	0:0	6	flv
op	173:40	0:0	6	->
water	173:42	0:0	6	acurframeindex
op	173:57	0:0	6	/
water	173:59	0:0	6	flv
op	173:62	0:0	6	->
water	173:64	0:0	6	framerate
water	173:73	0:0	6	;
if	174:16	181:16	6	(pkt -> flags & AV_PKT_FLAG_KEY)
cond	174:20	174:33	7	pkt -> flags & AV_PKT_FLAG_KEY
water	174:20	0:0	8	pkt
op	174:23	0:0	8	->
water	174:25	0:0	8	flags
op	174:31	0:0	8	&
water	174:33	0:0	8	AV_PKT_FLAG_KEY
stmts	174:50	181:16	7	
water	174:50	0:0	8	{
decl	175:20	175:68	8	double	ts
op	175:30	0:0	8	=
water	175:32	0:0	8	flv
op	175:35	0:0	8	->
water	175:37	0:0	8	acurframeindex
op	175:52	0:0	8	/
water	175:54	0:0	8	flv
op	175:57	0:0	8	->
water	175:59	0:0	8	framerate
decl	176:20	176:44	8	int64_t	pos
op	176:32	0:0	8	=
water	176:34	0:0	8	cur_offset
water	178:20	0:0	8	flv
op	178:23	0:0	8	->
water	178:25	0:0	8	lastkeyframetimestamp
op	178:47	0:0	8	=
water	178:49	0:0	8	flv
op	178:52	0:0	8	->
water	178:54	0:0	8	acurframeindex
op	178:69	0:0	8	/
water	178:71	0:0	8	flv
op	178:74	0:0	8	->
water	178:76	0:0	8	framerate
water	178:85	0:0	8	;
water	179:20	0:0	8	flv
op	179:23	0:0	8	->
water	179:25	0:0	8	lastkeyframelocation
op	179:46	0:0	8	=
water	179:48	0:0	8	pos
water	179:51	0:0	8	;
call	180:20	180:60	8	flv_append_keyframe_info
arg	180:45	180:46	9	s
water	180:45	0:0	10	s
arg	180:48	180:51	9	flv
water	180:48	0:0	10	flv
arg	180:53	180:55	9	ts
water	180:53	0:0	10	ts
arg	180:57	180:60	9	pos
water	180:57	0:0	10	pos
water	180:61	0:0	8	;
water	181:16	0:0	8	}
water	182:16	0:0	6	flv
op	182:19	0:0	6	->
water	182:21	0:0	6	acurframeindex
op	182:35	0:0	6	++
water	182:37	0:0	6	;
break	183:16	183:21	6	
label	185:12	185:35	6	case AVMEDIA_TYPE_AUDIO :
water	186:16	0:0	6	flv
op	186:19	0:0	6	->
water	186:21	0:0	6	audiosize
op	186:31	0:0	6	+=
water	186:34	0:0	6	(
call	186:35	186:47	6	avio_tell
arg	186:45	186:47	7	pb
water	186:45	0:0	8	pb
op	186:49	0:0	6	-
water	186:51	0:0	6	cur_offset
water	186:61	0:0	6	)
water	186:62	0:0	6	;
break	187:16	187:21	6	
label	189:12	189:19	6	default :
call	190:16	190:93	6	av_log
arg	190:23	190:24	7	s
water	190:23	0:0	8	s
arg	190:26	190:40	7	AV_LOG_WARNING
water	190:26	0:0	8	AV_LOG_WARNING
arg	190:42	190:76	7	"par->codec_type is type = [%d]\n"
water	190:42	0:0	8	"par->codec_type is type = [%d]\n"
arg	190:78	190:93	7	par->codec_type
water	190:78	0:0	8	par
op	190:81	0:0	8	->
water	190:83	0:0	8	codec_type
water	190:94	0:0	6	;
break	191:16	191:21	6	
water	192:8	0:0	6	}
water	193:4	0:0	4	}
call	195:4	195:16	2	av_free
arg	195:12	195:16	3	data
water	195:12	0:0	4	data
water	195:17	0:0	2	;
return	197:4	197:20	2	pb->error
water	197:11	0:0	3	pb
op	197:13	0:0	3	->
water	197:15	0:0	3	error
