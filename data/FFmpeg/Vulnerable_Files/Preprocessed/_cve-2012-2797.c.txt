func	2:0	71:0	0	static int	decode_frame_mp3on4
params	2:30	0:0	1	
param	2:31	2:53	2	AVCodecContext *	avctx
param	3:24	3:34	2	void *	data
param	3:36	3:50	2	int *	data_size
param	4:24	4:39	2	AVPacket *	avpkt
stmnts	0:0	70:19	1	
decl	6:4	6:36	2	const uint8_t	*buf
op	6:23	0:0	2	=
water	6:25	0:0	2	avpkt
op	6:30	0:0	2	->
water	6:32	0:0	2	data
decl	7:4	7:30	2	int	buf_size
op	7:17	0:0	2	=
water	7:19	0:0	2	avpkt
op	7:24	0:0	2	->
water	7:26	0:0	2	size
decl	8:4	8:45	2	MP3On4DecodeContext	*s
op	8:27	0:0	2	=
water	8:29	0:0	2	avctx
op	8:34	0:0	2	->
water	8:36	0:0	2	priv_data
decl	9:4	9:23	2	MPADecodeContext	*m
decl	10:4	10:43	2	int	fsize
water	10:13	0:0	2	,
decl	10:4	10:43	2	int	len
op	10:19	0:0	2	=
water	10:21	0:0	2	buf_size
water	10:29	0:0	2	,
decl	10:4	10:43	2	int	out_size
op	10:40	0:0	2	=
water	10:42	0:0	2	0
decl	11:4	11:19	2	uint32_t	header
decl	12:4	12:31	2	OUT_INT	*out_samples
op	12:25	0:0	2	=
water	12:27	0:0	2	data
decl	13:4	13:58	2	OUT_INT	decoded_buf[MPA_FRAME_SIZE*MPA_MAX_CHANNELS]
decl	14:4	14:24	2	OUT_INT	*outptr
water	14:19	0:0	2	,
decl	14:4	14:24	2	OUT_INT	*bp
decl	15:4	15:16	2	int	fr
water	15:10	0:0	2	,
decl	15:4	15:16	2	int	j
water	15:13	0:0	2	,
decl	15:4	15:16	2	int	n
if	17:4	18:17	2	(* data_size < MPA_FRAME_SIZE * MPA_MAX_CHANNELS * s -> frames * sizeof ( OUT_INT ))
cond	17:7	17:82	3	* data_size < MPA_FRAME_SIZE * MPA_MAX_CHANNELS * s -> frames * sizeof ( OUT_INT )
op	17:7	0:0	4	*
water	17:8	0:0	4	data_size
op	17:18	0:0	4	<
water	17:20	0:0	4	MPA_FRAME_SIZE
op	17:35	0:0	4	*
water	17:37	0:0	4	MPA_MAX_CHANNELS
op	17:54	0:0	4	*
water	17:56	0:0	4	s
op	17:57	0:0	4	->
water	17:59	0:0	4	frames
op	17:66	0:0	4	*
op	17:68	0:0	4	sizeof
water	17:74	0:0	4	(
water	17:75	0:0	4	OUT_INT
water	17:82	0:0	4	)
stmts	18:8	18:17	3	
return	18:8	18:17	4	-1
op	18:15	0:0	5	-
water	18:16	0:0	5	1
op	20:4	0:0	2	*
water	20:5	0:0	2	data_size
op	20:15	0:0	2	=
water	20:17	0:0	2	0
water	20:18	0:0	2	;
if	22:4	23:17	2	(buf_size < HEADER_SIZE)
cond	22:8	22:19	3	buf_size < HEADER_SIZE
water	22:8	0:0	4	buf_size
op	22:17	0:0	4	<
water	22:19	0:0	4	HEADER_SIZE
stmts	23:8	23:17	3	
return	23:8	23:17	4	-1
op	23:15	0:0	5	-
water	23:16	0:0	5	1
water	26:4	0:0	2	outptr
op	26:11	0:0	2	=
water	26:13	0:0	2	s
op	26:14	0:0	2	->
water	26:16	0:0	2	frames
op	26:23	0:0	2	==
water	26:26	0:0	2	1
water	26:28	0:0	2	?
water	26:30	0:0	2	out_samples
water	26:42	0:0	2	:
water	26:44	0:0	2	decoded_buf
water	26:55	0:0	2	;
water	28:4	0:0	2	avctx
op	28:9	0:0	2	->
water	28:11	0:0	2	bit_rate
op	28:20	0:0	2	=
water	28:22	0:0	2	0
water	28:23	0:0	2	;
for	30:4	64:4	2	(fr = 0 ;fr < s -> frames;fr ++)
forinit	30:9	30:15	3	fr = 0 ;
water	30:9	0:0	4	fr
op	30:12	0:0	4	=
water	30:14	0:0	4	0
water	30:15	0:0	4	;
cond	30:17	30:25	3	fr < s -> frames
water	30:17	0:0	4	fr
op	30:20	0:0	4	<
water	30:22	0:0	4	s
op	30:23	0:0	4	->
water	30:25	0:0	4	frames
forexpr	30:33	30:35	3	fr ++
water	30:33	0:0	4	fr
op	30:35	0:0	4	++
stmts	30:39	64:4	3	
water	30:39	0:0	4	{
water	31:8	0:0	4	fsize
op	31:14	0:0	4	=
call	31:16	31:27	4	AV_RB16
arg	31:24	31:27	5	buf
water	31:24	0:0	6	buf
op	31:29	0:0	4	>>
water	31:32	0:0	4	4
water	31:33	0:0	4	;
water	32:8	0:0	4	fsize
op	32:14	0:0	4	=
call	32:16	32:59	4	FFMIN3
arg	32:23	32:28	5	fsize
water	32:23	0:0	6	fsize
arg	32:30	32:33	5	len
water	32:30	0:0	6	len
arg	32:35	32:59	5	MPA_MAX_CODED_FRAME_SIZE
water	32:35	0:0	6	MPA_MAX_CODED_FRAME_SIZE
water	32:60	0:0	4	;
water	33:8	0:0	4	m
op	33:10	0:0	4	=
water	33:12	0:0	4	s
op	33:13	0:0	4	->
water	33:15	0:0	4	mp3decctx
op	33:24	0:0	4	[
water	33:25	0:0	4	fr
op	33:27	0:0	4	]
water	33:28	0:0	4	;
call	34:8	34:25	4	assert
arg	34:16	34:25	5	m!=NULL
water	34:16	0:0	6	m
op	34:18	0:0	6	!=
water	34:21	0:0	6	NULL
water	34:26	0:0	4	;
water	36:8	0:0	4	header
op	36:15	0:0	4	=
water	36:17	0:0	4	(
call	36:18	36:29	4	AV_RB32
arg	36:26	36:29	5	buf
water	36:26	0:0	6	buf
op	36:31	0:0	4	&
water	36:33	0:0	4	0
water	36:34	0:0	4	x000fffff
water	36:43	0:0	4	)
op	36:45	0:0	4	|
water	36:47	0:0	4	s
op	36:48	0:0	4	->
water	36:50	0:0	4	syncword
water	36:58	0:0	4	;
if	38:8	39:17	4	(ff_mpa_check_header (header ) < 0)
cond	38:12	38:42	5	ff_mpa_check_header (header ) < 0
call	38:12	38:38	6	ff_mpa_check_header
arg	38:32	38:38	7	header
water	38:32	0:0	8	header
op	38:40	0:0	6	<
water	38:42	0:0	6	0
stmts	39:12	39:17	5	
break	39:12	39:17	6	
call	41:8	41:63	4	ff_mpegaudio_decode_header
arg	41:35	41:55	5	(MPADecodeHeader*)m
water	41:35	0:0	6	(
water	41:36	0:0	6	MPADecodeHeader
op	41:52	0:0	6	*
water	41:53	0:0	6	)
water	41:54	0:0	6	m
arg	41:57	41:63	5	header
water	41:57	0:0	6	header
water	41:64	0:0	4	;
water	42:8	0:0	4	out_size
op	42:17	0:0	4	+=
call	42:20	42:57	4	mp_decode_frame
arg	42:36	42:37	5	m
water	42:36	0:0	6	m
arg	42:39	42:45	5	outptr
water	42:39	0:0	6	outptr
arg	42:47	42:50	5	buf
water	42:47	0:0	6	buf
arg	42:52	42:57	5	fsize
water	42:52	0:0	6	fsize
water	42:58	0:0	4	;
water	43:8	0:0	4	buf
op	43:12	0:0	4	+=
water	43:15	0:0	4	fsize
water	43:20	0:0	4	;
water	44:8	0:0	4	len
op	44:12	0:0	4	-=
water	44:15	0:0	4	fsize
water	44:20	0:0	4	;
if	46:8	62:8	4	(s -> frames > 1)
cond	46:11	46:23	5	s -> frames > 1
water	46:11	0:0	6	s
op	46:12	0:0	6	->
water	46:14	0:0	6	frames
op	46:21	0:0	6	>
water	46:23	0:0	6	1
stmts	46:26	62:8	5	
water	46:26	0:0	6	{
water	47:12	0:0	6	n
op	47:14	0:0	6	=
water	47:16	0:0	6	m
op	47:17	0:0	6	->
water	47:19	0:0	6	avctx
op	47:24	0:0	6	->
water	47:26	0:0	6	frame_size
op	47:36	0:0	6	*
water	47:37	0:0	6	m
op	47:38	0:0	6	->
water	47:40	0:0	6	nb_channels
water	47:51	0:0	6	;
water	49:12	0:0	6	bp
op	49:15	0:0	6	=
water	49:17	0:0	6	out_samples
op	49:29	0:0	6	+
water	49:31	0:0	6	s
op	49:32	0:0	6	->
water	49:34	0:0	6	coff
op	49:38	0:0	6	[
water	49:39	0:0	6	fr
op	49:41	0:0	6	]
water	49:42	0:0	6	;
if	50:12	55:12	6	(m -> nb_channels == 1)
cond	50:15	50:33	7	m -> nb_channels == 1
water	50:15	0:0	8	m
op	50:16	0:0	8	->
water	50:18	0:0	8	nb_channels
op	50:30	0:0	8	==
water	50:33	0:0	8	1
stmts	50:36	55:12	7	
water	50:36	0:0	8	{
for	51:16	54:16	8	(j = 0 ;j < n;j ++)
forinit	51:20	51:25	9	j = 0 ;
water	51:20	0:0	10	j
op	51:22	0:0	10	=
water	51:24	0:0	10	0
water	51:25	0:0	10	;
cond	51:27	51:31	9	j < n
water	51:27	0:0	10	j
op	51:29	0:0	10	<
water	51:31	0:0	10	n
forexpr	51:34	51:35	9	j ++
water	51:34	0:0	10	j
op	51:35	0:0	10	++
stmts	51:39	54:16	9	
water	51:39	0:0	10	{
op	52:20	0:0	10	*
water	52:21	0:0	10	bp
op	52:24	0:0	10	=
water	52:26	0:0	10	decoded_buf
op	52:37	0:0	10	[
water	52:38	0:0	10	j
op	52:39	0:0	10	]
water	52:40	0:0	10	;
water	53:20	0:0	10	bp
op	53:23	0:0	10	+=
water	53:26	0:0	10	avctx
op	53:31	0:0	10	->
water	53:33	0:0	10	channels
water	53:41	0:0	10	;
water	54:16	0:0	10	}
water	55:12	0:0	8	}
else	55:14	61:12	6
stmts	55:19	61:12	7	
water	55:19	0:0	8	{
for	56:16	60:16	8	(j = 0 ;j < n;j ++)
forinit	56:20	56:25	9	j = 0 ;
water	56:20	0:0	10	j
op	56:22	0:0	10	=
water	56:24	0:0	10	0
water	56:25	0:0	10	;
cond	56:27	56:31	9	j < n
water	56:27	0:0	10	j
op	56:29	0:0	10	<
water	56:31	0:0	10	n
forexpr	56:34	56:35	9	j ++
water	56:34	0:0	10	j
op	56:35	0:0	10	++
stmts	56:39	60:16	9	
water	56:39	0:0	10	{
water	57:20	0:0	10	bp
op	57:22	0:0	10	[
water	57:23	0:0	10	0
op	57:24	0:0	10	]
op	57:26	0:0	10	=
water	57:28	0:0	10	decoded_buf
op	57:39	0:0	10	[
water	57:40	0:0	10	j
op	57:41	0:0	10	++
op	57:43	0:0	10	]
water	57:44	0:0	10	;
water	58:20	0:0	10	bp
op	58:22	0:0	10	[
water	58:23	0:0	10	1
op	58:24	0:0	10	]
op	58:26	0:0	10	=
water	58:28	0:0	10	decoded_buf
op	58:39	0:0	10	[
water	58:40	0:0	10	j
op	58:41	0:0	10	]
water	58:42	0:0	10	;
water	59:20	0:0	10	bp
op	59:23	0:0	10	+=
water	59:26	0:0	10	avctx
op	59:31	0:0	10	->
water	59:33	0:0	10	channels
water	59:41	0:0	10	;
water	60:16	0:0	10	}
water	61:12	0:0	8	}
water	62:8	0:0	6	}
water	63:8	0:0	4	avctx
op	63:13	0:0	4	->
water	63:15	0:0	4	bit_rate
op	63:24	0:0	4	+=
water	63:27	0:0	4	m
op	63:28	0:0	4	->
water	63:30	0:0	4	bit_rate
water	63:38	0:0	4	;
water	64:4	0:0	4	}
water	67:4	0:0	2	avctx
op	67:9	0:0	2	->
water	67:11	0:0	2	sample_rate
op	67:23	0:0	2	=
water	67:25	0:0	2	s
op	67:26	0:0	2	->
water	67:28	0:0	2	mp3decctx
op	67:37	0:0	2	[
water	67:38	0:0	2	0
op	67:39	0:0	2	]
op	67:40	0:0	2	->
water	67:42	0:0	2	sample_rate
water	67:53	0:0	2	;
op	69:4	0:0	2	*
water	69:5	0:0	2	data_size
op	69:15	0:0	2	=
water	69:17	0:0	2	out_size
water	69:25	0:0	2	;
return	70:4	70:19	2	buf_size
water	70:11	0:0	3	buf_size
