func	1:0	67:0	0	static void	restore_median_il
params	1:29	0:0	1	
param	1:30	1:42	2	uint8_t *	src
param	1:44	1:52	2	int	step
param	1:54	1:64	2	int	stride
param	2:30	2:39	2	int	width
param	2:41	2:51	2	int	height
param	2:53	2:63	2	int	slices
param	2:65	2:74	2	int	rmode
stmnts	0:0	66:4	1	
decl	4:4	4:19	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:19	2	int	j
water	4:12	0:0	2	,
decl	4:4	4:19	2	int	slice
decl	5:4	5:15	2	int	A
water	5:9	0:0	2	,
decl	5:4	5:15	2	int	B
water	5:12	0:0	2	,
decl	5:4	5:15	2	int	C
decl	6:4	6:17	2	uint8_t	*bsrc
decl	7:4	7:33	2	int	slice_start
water	7:19	0:0	2	,
decl	7:4	7:33	2	int	slice_height
decl	8:4	8:40	2	const int	cmask
op	8:22	0:0	2	=
op	8:24	0:0	2	~
water	8:25	0:0	2	(
water	8:26	0:0	2	rmode
water	8:32	0:0	2	?
water	8:34	0:0	2	3
water	8:36	0:0	2	:
water	8:38	0:0	2	1
water	8:39	0:0	2	)
decl	9:4	9:35	2	const int	stride2
op	9:22	0:0	2	=
water	9:24	0:0	2	stride
op	9:31	0:0	2	<<
water	9:34	0:0	2	1
for	11:4	66:4	2	(slice = 0 ;slice < slices;slice ++)
forinit	11:9	11:18	3	slice = 0 ;
water	11:9	0:0	4	slice
op	11:15	0:0	4	=
water	11:17	0:0	4	0
water	11:18	0:0	4	;
cond	11:20	11:28	3	slice < slices
water	11:20	0:0	4	slice
op	11:26	0:0	4	<
water	11:28	0:0	4	slices
forexpr	11:36	11:41	3	slice ++
water	11:36	0:0	4	slice
op	11:41	0:0	4	++
stmts	11:45	66:4	3	
water	11:45	0:0	4	{
water	12:8	0:0	4	slice_start
op	12:23	0:0	4	=
water	12:25	0:0	4	(
water	12:26	0:0	4	(
water	12:27	0:0	4	slice
op	12:33	0:0	4	*
water	12:35	0:0	4	height
water	12:41	0:0	4	)
op	12:43	0:0	4	/
water	12:45	0:0	4	slices
water	12:51	0:0	4	)
op	12:53	0:0	4	&
water	12:55	0:0	4	cmask
water	12:60	0:0	4	;
water	13:8	0:0	4	slice_height
op	13:23	0:0	4	=
water	13:25	0:0	4	(
water	13:26	0:0	4	(
water	13:27	0:0	4	(
water	13:28	0:0	4	(
water	13:29	0:0	4	slice
op	13:35	0:0	4	+
water	13:37	0:0	4	1
water	13:38	0:0	4	)
op	13:40	0:0	4	*
water	13:42	0:0	4	height
water	13:48	0:0	4	)
op	13:50	0:0	4	/
water	13:52	0:0	4	slices
water	13:58	0:0	4	)
op	13:60	0:0	4	&
water	13:62	0:0	4	cmask
water	13:67	0:0	4	)
op	13:69	0:0	4	-
water	14:25	0:0	4	slice_start
water	14:36	0:0	4	;
water	15:8	0:0	4	slice_height
op	15:21	0:0	4	>>=
water	15:25	0:0	4	1
water	15:26	0:0	4	;
water	17:8	0:0	4	bsrc
op	17:13	0:0	4	=
water	17:15	0:0	4	src
op	17:19	0:0	4	+
water	17:21	0:0	4	slice_start
op	17:33	0:0	4	*
water	17:35	0:0	4	stride
water	17:41	0:0	4	;
water	20:8	0:0	4	bsrc
op	20:12	0:0	4	[
water	20:13	0:0	4	0
op	20:14	0:0	4	]
op	20:16	0:0	4	+=
water	20:19	0:0	4	0
water	20:20	0:0	4	x80
water	20:23	0:0	4	;
water	21:8	0:0	4	A
op	21:17	0:0	4	=
water	21:19	0:0	4	bsrc
op	21:23	0:0	4	[
water	21:24	0:0	4	0
op	21:25	0:0	4	]
water	21:26	0:0	4	;
for	22:8	25:8	4	(i = step ;i < width * step;i += step)
forinit	22:13	22:21	5	i = step ;
water	22:13	0:0	6	i
op	22:15	0:0	6	=
water	22:17	0:0	6	step
water	22:21	0:0	6	;
cond	22:23	22:35	5	i < width * step
water	22:23	0:0	6	i
op	22:25	0:0	6	<
water	22:27	0:0	6	width
op	22:33	0:0	6	*
water	22:35	0:0	6	step
forexpr	22:41	22:46	5	i += step
water	22:41	0:0	6	i
op	22:43	0:0	6	+=
water	22:46	0:0	6	step
stmts	22:52	25:8	5	
water	22:52	0:0	6	{
water	23:12	0:0	6	bsrc
op	23:16	0:0	6	[
water	23:17	0:0	6	i
op	23:18	0:0	6	]
op	23:20	0:0	6	+=
water	23:23	0:0	6	A
water	23:24	0:0	6	;
water	24:12	0:0	6	A
op	24:21	0:0	6	=
water	24:23	0:0	6	bsrc
op	24:27	0:0	6	[
water	24:28	0:0	6	i
op	24:29	0:0	6	]
water	24:30	0:0	6	;
water	25:8	0:0	6	}
for	26:8	29:8	4	(i = 0 ;i < width * step;i += step)
forinit	26:13	26:18	5	i = 0 ;
water	26:13	0:0	6	i
op	26:15	0:0	6	=
water	26:17	0:0	6	0
water	26:18	0:0	6	;
cond	26:20	26:32	5	i < width * step
water	26:20	0:0	6	i
op	26:22	0:0	6	<
water	26:24	0:0	6	width
op	26:30	0:0	6	*
water	26:32	0:0	6	step
forexpr	26:38	26:43	5	i += step
water	26:38	0:0	6	i
op	26:40	0:0	6	+=
water	26:43	0:0	6	step
stmts	26:49	29:8	5	
water	26:49	0:0	6	{
water	27:12	0:0	6	bsrc
op	27:16	0:0	6	[
water	27:17	0:0	6	stride
op	27:24	0:0	6	+
water	27:26	0:0	6	i
op	27:27	0:0	6	]
op	27:29	0:0	6	+=
water	27:32	0:0	6	A
water	27:33	0:0	6	;
water	28:12	0:0	6	A
op	28:30	0:0	6	=
water	28:32	0:0	6	bsrc
op	28:36	0:0	6	[
water	28:37	0:0	6	stride
op	28:44	0:0	6	+
water	28:46	0:0	6	i
op	28:47	0:0	6	]
water	28:48	0:0	6	;
water	29:8	0:0	6	}
water	30:8	0:0	4	bsrc
op	30:13	0:0	4	+=
water	30:16	0:0	4	stride2
water	30:23	0:0	4	;
if	31:8	32:20	4	(slice_height == 1)
cond	31:12	31:28	5	slice_height == 1
water	31:12	0:0	6	slice_height
op	31:25	0:0	6	==
water	31:28	0:0	6	1
stmts	32:12	32:20	5	
continue	32:12	32:20	6	
water	34:8	0:0	4	C
op	34:17	0:0	4	=
water	34:19	0:0	4	bsrc
op	34:23	0:0	4	[
op	34:24	0:0	4	-
water	34:25	0:0	4	stride2
op	34:32	0:0	4	]
water	34:33	0:0	4	;
water	35:8	0:0	4	bsrc
op	35:12	0:0	4	[
water	35:13	0:0	4	0
op	35:14	0:0	4	]
op	35:16	0:0	4	+=
water	35:19	0:0	4	C
water	35:20	0:0	4	;
water	36:8	0:0	4	A
op	36:17	0:0	4	=
water	36:19	0:0	4	bsrc
op	36:23	0:0	4	[
water	36:24	0:0	4	0
op	36:25	0:0	4	]
water	36:26	0:0	4	;
for	37:8	42:8	4	(i = step ;i < width * step;i += step)
forinit	37:13	37:21	5	i = step ;
water	37:13	0:0	6	i
op	37:15	0:0	6	=
water	37:17	0:0	6	step
water	37:21	0:0	6	;
cond	37:23	37:35	5	i < width * step
water	37:23	0:0	6	i
op	37:25	0:0	6	<
water	37:27	0:0	6	width
op	37:33	0:0	6	*
water	37:35	0:0	6	step
forexpr	37:41	37:46	5	i += step
water	37:41	0:0	6	i
op	37:43	0:0	6	+=
water	37:46	0:0	6	step
stmts	37:52	42:8	5	
water	37:52	0:0	6	{
water	38:12	0:0	6	B
op	38:21	0:0	6	=
water	38:23	0:0	6	bsrc
op	38:27	0:0	6	[
water	38:28	0:0	6	i
op	38:30	0:0	6	-
water	38:32	0:0	6	stride2
op	38:39	0:0	6	]
water	38:40	0:0	6	;
water	39:12	0:0	6	bsrc
op	39:16	0:0	6	[
water	39:17	0:0	6	i
op	39:18	0:0	6	]
op	39:20	0:0	6	+=
call	39:23	39:58	6	mid_pred
arg	39:32	39:33	7	A
water	39:32	0:0	8	A
arg	39:35	39:36	7	B
water	39:35	0:0	8	B
arg	39:38	39:58	7	(uint8_t)(A+B-C)
call	39:38	39:57	8	(uint8_t)
arg	39:48	39:57	9	A+B-C
water	39:48	0:0	10	A
op	39:50	0:0	10	+
water	39:52	0:0	10	B
op	39:54	0:0	10	-
water	39:56	0:0	10	C
water	39:59	0:0	6	;
water	40:12	0:0	6	C
op	40:21	0:0	6	=
water	40:23	0:0	6	B
water	40:24	0:0	6	;
water	41:12	0:0	6	A
op	41:21	0:0	6	=
water	41:23	0:0	6	bsrc
op	41:27	0:0	6	[
water	41:28	0:0	6	i
op	41:29	0:0	6	]
water	41:30	0:0	6	;
water	42:8	0:0	6	}
for	43:8	48:8	4	(i = 0 ;i < width * step;i += step)
forinit	43:13	43:18	5	i = 0 ;
water	43:13	0:0	6	i
op	43:15	0:0	6	=
water	43:17	0:0	6	0
water	43:18	0:0	6	;
cond	43:20	43:32	5	i < width * step
water	43:20	0:0	6	i
op	43:22	0:0	6	<
water	43:24	0:0	6	width
op	43:30	0:0	6	*
water	43:32	0:0	6	step
forexpr	43:38	43:43	5	i += step
water	43:38	0:0	6	i
op	43:40	0:0	6	+=
water	43:43	0:0	6	step
stmts	43:49	48:8	5	
water	43:49	0:0	6	{
water	44:12	0:0	6	B
op	44:30	0:0	6	=
water	44:32	0:0	6	bsrc
op	44:36	0:0	6	[
water	44:37	0:0	6	i
op	44:39	0:0	6	-
water	44:41	0:0	6	stride
op	44:47	0:0	6	]
water	44:48	0:0	6	;
water	45:12	0:0	6	bsrc
op	45:16	0:0	6	[
water	45:17	0:0	6	stride
op	45:24	0:0	6	+
water	45:26	0:0	6	i
op	45:27	0:0	6	]
op	45:29	0:0	6	+=
call	45:32	45:67	6	mid_pred
arg	45:41	45:42	7	A
water	45:41	0:0	8	A
arg	45:44	45:45	7	B
water	45:44	0:0	8	B
arg	45:47	45:67	7	(uint8_t)(A+B-C)
call	45:47	45:66	8	(uint8_t)
arg	45:57	45:66	9	A+B-C
water	45:57	0:0	10	A
op	45:59	0:0	10	+
water	45:61	0:0	10	B
op	45:63	0:0	10	-
water	45:65	0:0	10	C
water	45:68	0:0	6	;
water	46:12	0:0	6	C
op	46:30	0:0	6	=
water	46:32	0:0	6	B
water	46:33	0:0	6	;
water	47:12	0:0	6	A
op	47:30	0:0	6	=
water	47:32	0:0	6	bsrc
op	47:36	0:0	6	[
water	47:37	0:0	6	stride
op	47:44	0:0	6	+
water	47:46	0:0	6	i
op	47:47	0:0	6	]
water	47:48	0:0	6	;
water	48:8	0:0	6	}
water	49:8	0:0	4	bsrc
op	49:13	0:0	4	+=
water	49:16	0:0	4	stride2
water	49:23	0:0	4	;
for	51:8	65:8	4	(j = 2 ;j < slice_height;j ++)
forinit	51:13	51:18	5	j = 2 ;
water	51:13	0:0	6	j
op	51:15	0:0	6	=
water	51:17	0:0	6	2
water	51:18	0:0	6	;
cond	51:20	51:24	5	j < slice_height
water	51:20	0:0	6	j
op	51:22	0:0	6	<
water	51:24	0:0	6	slice_height
forexpr	51:38	51:39	5	j ++
water	51:38	0:0	6	j
op	51:39	0:0	6	++
stmts	51:43	65:8	5	
water	51:43	0:0	6	{
for	52:12	57:12	6	(i = 0 ;i < width * step;i += step)
forinit	52:17	52:22	7	i = 0 ;
water	52:17	0:0	8	i
op	52:19	0:0	8	=
water	52:21	0:0	8	0
water	52:22	0:0	8	;
cond	52:24	52:36	7	i < width * step
water	52:24	0:0	8	i
op	52:26	0:0	8	<
water	52:28	0:0	8	width
op	52:34	0:0	8	*
water	52:36	0:0	8	step
forexpr	52:42	52:47	7	i += step
water	52:42	0:0	8	i
op	52:44	0:0	8	+=
water	52:47	0:0	8	step
stmts	52:53	57:12	7	
water	52:53	0:0	8	{
water	53:16	0:0	8	B
op	53:25	0:0	8	=
water	53:27	0:0	8	bsrc
op	53:31	0:0	8	[
water	53:32	0:0	8	i
op	53:34	0:0	8	-
water	53:36	0:0	8	stride2
op	53:43	0:0	8	]
water	53:44	0:0	8	;
water	54:16	0:0	8	bsrc
op	54:20	0:0	8	[
water	54:21	0:0	8	i
op	54:22	0:0	8	]
op	54:24	0:0	8	+=
call	54:27	54:62	8	mid_pred
arg	54:36	54:37	9	A
water	54:36	0:0	10	A
arg	54:39	54:40	9	B
water	54:39	0:0	10	B
arg	54:42	54:62	9	(uint8_t)(A+B-C)
call	54:42	54:61	10	(uint8_t)
arg	54:52	54:61	11	A+B-C
water	54:52	0:0	12	A
op	54:54	0:0	12	+
water	54:56	0:0	12	B
op	54:58	0:0	12	-
water	54:60	0:0	12	C
water	54:63	0:0	8	;
water	55:16	0:0	8	C
op	55:25	0:0	8	=
water	55:27	0:0	8	B
water	55:28	0:0	8	;
water	56:16	0:0	8	A
op	56:25	0:0	8	=
water	56:27	0:0	8	bsrc
op	56:31	0:0	8	[
water	56:32	0:0	8	i
op	56:33	0:0	8	]
water	56:34	0:0	8	;
water	57:12	0:0	8	}
for	58:12	63:12	6	(i = 0 ;i < width * step;i += step)
forinit	58:17	58:22	7	i = 0 ;
water	58:17	0:0	8	i
op	58:19	0:0	8	=
water	58:21	0:0	8	0
water	58:22	0:0	8	;
cond	58:24	58:36	7	i < width * step
water	58:24	0:0	8	i
op	58:26	0:0	8	<
water	58:28	0:0	8	width
op	58:34	0:0	8	*
water	58:36	0:0	8	step
forexpr	58:42	58:47	7	i += step
water	58:42	0:0	8	i
op	58:44	0:0	8	+=
water	58:47	0:0	8	step
stmts	58:53	63:12	7	
water	58:53	0:0	8	{
water	59:16	0:0	8	B
op	59:34	0:0	8	=
water	59:36	0:0	8	bsrc
op	59:40	0:0	8	[
water	59:41	0:0	8	i
op	59:43	0:0	8	-
water	59:45	0:0	8	stride
op	59:51	0:0	8	]
water	59:52	0:0	8	;
water	60:16	0:0	8	bsrc
op	60:20	0:0	8	[
water	60:21	0:0	8	i
op	60:23	0:0	8	+
water	60:25	0:0	8	stride
op	60:31	0:0	8	]
op	60:33	0:0	8	+=
call	60:36	60:71	8	mid_pred
arg	60:45	60:46	9	A
water	60:45	0:0	10	A
arg	60:48	60:49	9	B
water	60:48	0:0	10	B
arg	60:51	60:71	9	(uint8_t)(A+B-C)
call	60:51	60:70	10	(uint8_t)
arg	60:61	60:70	11	A+B-C
water	60:61	0:0	12	A
op	60:63	0:0	12	+
water	60:65	0:0	12	B
op	60:67	0:0	12	-
water	60:69	0:0	12	C
water	60:72	0:0	8	;
water	61:16	0:0	8	C
op	61:34	0:0	8	=
water	61:36	0:0	8	B
water	61:37	0:0	8	;
water	62:16	0:0	8	A
op	62:34	0:0	8	=
water	62:36	0:0	8	bsrc
op	62:40	0:0	8	[
water	62:41	0:0	8	i
op	62:43	0:0	8	+
water	62:45	0:0	8	stride
op	62:51	0:0	8	]
water	62:52	0:0	8	;
water	63:12	0:0	8	}
water	64:12	0:0	6	bsrc
op	64:17	0:0	6	+=
water	64:20	0:0	6	stride2
water	64:27	0:0	6	;
water	65:8	0:0	6	}
water	66:4	0:0	4	}
