func	1:0	696:0	0	static int	decode_slice_header
params	1:30	0:0	1	
param	1:31	1:45	2	H264Context *	h
param	1:47	1:62	2	H264Context *	h0
stmnts	0:0	695:12	1	
decl	3:4	3:34	2	unsigned int	first_mb_in_slice
decl	4:4	4:23	2	unsigned int	pps_id
decl	5:4	5:45	2	int	num_ref_idx_active_override_flag
water	5:40	0:0	2	,
decl	5:4	5:45	2	int	ret
decl	6:4	6:38	2	unsigned int	slice_type
water	6:27	0:0	2	,
decl	6:4	6:38	2	unsigned int	tmp
water	6:32	0:0	2	,
decl	6:4	6:38	2	unsigned int	i
water	6:35	0:0	2	,
decl	6:4	6:38	2	unsigned int	j
decl	7:4	7:46	2	int	last_pic_structure
water	7:26	0:0	2	,
decl	7:4	7:46	2	int	last_pic_droppable
decl	8:4	8:19	2	int	must_reinit
decl	9:4	9:24	2	int	needs_reinit
op	9:21	0:0	2	=
water	9:23	0:0	2	0
water	11:4	0:0	2	h
op	11:5	0:0	2	->
water	11:7	0:0	2	me
op	11:9	0:0	2	.
water	11:10	0:0	2	qpel_put
op	11:19	0:0	2	=
water	11:21	0:0	2	h
op	11:22	0:0	2	->
water	11:24	0:0	2	h264qpel
op	11:32	0:0	2	.
water	11:33	0:0	2	put_h264_qpel_pixels_tab
water	11:57	0:0	2	;
water	12:4	0:0	2	h
op	12:5	0:0	2	->
water	12:7	0:0	2	me
op	12:9	0:0	2	.
water	12:10	0:0	2	qpel_avg
op	12:19	0:0	2	=
water	12:21	0:0	2	h
op	12:22	0:0	2	->
water	12:24	0:0	2	h264qpel
op	12:32	0:0	2	.
water	12:33	0:0	2	avg_h264_qpel_pixels_tab
water	12:57	0:0	2	;
water	14:4	0:0	2	first_mb_in_slice
op	14:22	0:0	2	=
call	14:24	14:49	2	get_ue_golomb_long
arg	14:43	14:49	3	&h->gb
op	14:43	0:0	4	&
water	14:44	0:0	4	h
op	14:45	0:0	4	->
water	14:47	0:0	4	gb
water	14:50	0:0	2	;
if	16:4	29:4	2	(first_mb_in_slice == 0)
cond	16:8	16:29	3	first_mb_in_slice == 0
water	16:8	0:0	4	first_mb_in_slice
op	16:26	0:0	4	==
water	16:29	0:0	4	0
stmts	16:32	29:4	3	
water	16:32	0:0	4	{
if	17:8	19:8	4	(h0 -> current_slice &&FIELD_PICTURE (h ))
cond	17:12	17:48	5	h0 -> current_slice &&FIELD_PICTURE (h )
water	17:12	0:0	6	h0
op	17:14	0:0	6	->
water	17:16	0:0	6	current_slice
op	17:30	0:0	6	&&
call	17:33	17:48	6	FIELD_PICTURE
arg	17:47	17:48	7	h
water	17:47	0:0	8	h
stmts	17:51	19:8	5	
water	17:51	0:0	6	{
call	18:12	18:26	6	field_end
arg	18:22	18:23	7	h
water	18:22	0:0	8	h
arg	18:25	18:26	7	1
water	18:25	0:0	8	1
water	18:27	0:0	6	;
water	19:8	0:0	6	}
water	21:8	0:0	4	h0
op	21:10	0:0	4	->
water	21:12	0:0	4	current_slice
op	21:26	0:0	4	=
water	21:28	0:0	4	0
water	21:29	0:0	4	;
if	22:8	28:8	4	(! h0 -> first_field)
cond	22:12	22:17	5	! h0 -> first_field
op	22:12	0:0	6	!
water	22:13	0:0	6	h0
op	22:15	0:0	6	->
water	22:17	0:0	6	first_field
stmts	22:30	28:8	5	
water	22:30	0:0	6	{
if	23:12	26:12	6	(h -> cur_pic_ptr && ! h -> droppable)
cond	23:16	23:38	7	h -> cur_pic_ptr && ! h -> droppable
water	23:16	0:0	8	h
op	23:17	0:0	8	->
water	23:19	0:0	8	cur_pic_ptr
op	23:31	0:0	8	&&
op	23:34	0:0	8	!
water	23:35	0:0	8	h
op	23:36	0:0	8	->
water	23:38	0:0	8	droppable
stmts	23:49	26:12	7	
water	23:49	0:0	8	{
call	24:16	25:83	8	ff_thread_report_progress
arg	24:42	24:61	9	&h->cur_pic_ptr->tf
op	24:42	0:0	10	&
water	24:43	0:0	10	h
op	24:44	0:0	10	->
water	24:46	0:0	10	cur_pic_ptr
op	24:57	0:0	10	->
water	24:59	0:0	10	tf
arg	24:63	24:70	9	INT_MAX
water	24:63	0:0	10	INT_MAX
arg	25:42	25:83	9	h->picture_structure==PICT_BOTTOM_FIELD
water	25:42	0:0	10	h
op	25:43	0:0	10	->
water	25:45	0:0	10	picture_structure
op	25:63	0:0	10	==
water	25:66	0:0	10	PICT_BOTTOM_FIELD
water	25:84	0:0	8	;
water	26:12	0:0	8	}
water	27:12	0:0	6	h
op	27:13	0:0	6	->
water	27:15	0:0	6	cur_pic_ptr
op	27:27	0:0	6	=
water	27:29	0:0	6	NULL
water	27:33	0:0	6	;
water	28:8	0:0	6	}
water	29:4	0:0	4	}
water	31:4	0:0	2	slice_type
op	31:15	0:0	2	=
call	31:17	31:40	2	get_ue_golomb_31
arg	31:34	31:40	3	&h->gb
op	31:34	0:0	4	&
water	31:35	0:0	4	h
op	31:36	0:0	4	->
water	31:38	0:0	4	gb
water	31:41	0:0	2	;
if	32:4	37:4	2	(slice_type > 9)
cond	32:8	32:21	3	slice_type > 9
water	32:8	0:0	4	slice_type
op	32:19	0:0	4	>
water	32:21	0:0	4	9
stmts	32:24	37:4	3	
water	32:24	0:0	4	{
call	33:8	35:43	4	av_log
arg	33:15	33:23	5	h->avctx
water	33:15	0:0	6	h
op	33:16	0:0	6	->
water	33:18	0:0	6	avctx
arg	33:25	33:37	5	AV_LOG_ERROR
water	33:25	0:0	6	AV_LOG_ERROR
arg	34:15	34:53	5	"slice type too large (%d) at %d %d\n"
water	34:15	0:0	6	"slice type too large (%d) at %d %d\n"
arg	35:15	35:25	5	slice_type
water	35:15	0:0	6	slice_type
arg	35:27	35:34	5	h->mb_x
water	35:27	0:0	6	h
op	35:28	0:0	6	->
water	35:30	0:0	6	mb_x
arg	35:36	35:43	5	h->mb_y
water	35:36	0:0	6	h
op	35:37	0:0	6	->
water	35:39	0:0	6	mb_y
water	35:44	0:0	4	;
return	36:8	36:17	4	-1
op	36:15	0:0	5	-
water	36:16	0:0	5	1
water	37:4	0:0	4	}
if	38:4	41:4	2	(slice_type > 4)
cond	38:8	38:21	3	slice_type > 4
water	38:8	0:0	4	slice_type
op	38:19	0:0	4	>
water	38:21	0:0	4	4
stmts	38:24	41:4	3	
water	38:24	0:0	4	{
water	39:8	0:0	4	slice_type
op	39:19	0:0	4	-=
water	39:22	0:0	4	5
water	39:23	0:0	4	;
water	40:8	0:0	4	h
op	40:9	0:0	4	->
water	40:11	0:0	4	slice_type_fixed
op	40:28	0:0	4	=
water	40:30	0:0	4	1
water	40:31	0:0	4	;
water	41:4	0:0	4	}
else	41:6	42:31	2
stmts	42:8	42:31	3	
water	42:8	0:0	4	h
op	42:9	0:0	4	->
water	42:11	0:0	4	slice_type_fixed
op	42:28	0:0	4	=
water	42:30	0:0	4	0
water	42:31	0:0	4	;
water	44:4	0:0	2	slice_type
op	44:15	0:0	2	=
water	44:17	0:0	2	golomb_to_pict_type
op	44:36	0:0	2	[
water	44:37	0:0	2	slice_type
op	44:47	0:0	2	]
water	44:48	0:0	2	;
water	45:4	0:0	2	h
op	45:5	0:0	2	->
water	45:7	0:0	2	slice_type
op	45:22	0:0	2	=
water	45:24	0:0	2	slice_type
water	45:34	0:0	2	;
water	46:4	0:0	2	h
op	46:5	0:0	2	->
water	46:7	0:0	2	slice_type_nos
op	46:22	0:0	2	=
water	46:24	0:0	2	slice_type
op	46:35	0:0	2	&
water	46:37	0:0	2	3
water	46:38	0:0	2	;
water	49:4	0:0	2	h
op	49:5	0:0	2	->
water	49:7	0:0	2	pict_type
op	49:17	0:0	2	=
water	49:19	0:0	2	h
op	49:20	0:0	2	->
water	49:22	0:0	2	slice_type
water	49:32	0:0	2	;
water	51:4	0:0	2	pps_id
op	51:11	0:0	2	=
call	51:13	51:33	2	get_ue_golomb
arg	51:27	51:33	3	&h->gb
op	51:27	0:0	4	&
water	51:28	0:0	4	h
op	51:29	0:0	4	->
water	51:31	0:0	4	gb
water	51:34	0:0	2	;
if	52:4	55:4	2	(pps_id >= MAX_PPS_COUNT)
cond	52:8	52:18	3	pps_id >= MAX_PPS_COUNT
water	52:8	0:0	4	pps_id
op	52:15	0:0	4	>=
water	52:18	0:0	4	MAX_PPS_COUNT
stmts	52:33	55:4	3	
water	52:33	0:0	4	{
call	53:8	53:73	4	av_log
arg	53:15	53:23	5	h->avctx
water	53:15	0:0	6	h
op	53:16	0:0	6	->
water	53:18	0:0	6	avctx
arg	53:25	53:37	5	AV_LOG_ERROR
water	53:25	0:0	6	AV_LOG_ERROR
arg	53:39	53:65	5	"pps_id %d out of range\n"
water	53:39	0:0	6	"pps_id %d out of range\n"
arg	53:67	53:73	5	pps_id
water	53:67	0:0	6	pps_id
water	53:74	0:0	4	;
return	54:8	54:17	4	-1
op	54:15	0:0	5	-
water	54:16	0:0	5	1
water	55:4	0:0	4	}
if	56:4	61:4	2	(! h0 -> pps_buffers [ pps_id ])
cond	56:8	56:31	3	! h0 -> pps_buffers [ pps_id ]
op	56:8	0:0	4	!
water	56:9	0:0	4	h0
op	56:11	0:0	4	->
water	56:13	0:0	4	pps_buffers
op	56:24	0:0	4	[
water	56:25	0:0	4	pps_id
op	56:31	0:0	4	]
stmts	56:34	61:4	3	
water	56:34	0:0	4	{
call	57:8	59:21	4	av_log
arg	57:15	57:23	5	h->avctx
water	57:15	0:0	6	h
op	57:16	0:0	6	->
water	57:18	0:0	6	avctx
arg	57:25	57:37	5	AV_LOG_ERROR
water	57:25	0:0	6	AV_LOG_ERROR
arg	58:15	58:49	5	"non-existing PPS %u referenced\n"
water	58:15	0:0	6	"non-existing PPS %u referenced\n"
arg	59:15	59:21	5	pps_id
water	59:15	0:0	6	pps_id
water	59:22	0:0	4	;
return	60:8	60:17	4	-1
op	60:15	0:0	5	-
water	60:16	0:0	5	1
water	61:4	0:0	4	}
water	62:4	0:0	2	h
op	62:5	0:0	2	->
water	62:7	0:0	2	pps
op	62:11	0:0	2	=
op	62:13	0:0	2	*
water	62:14	0:0	2	h0
op	62:16	0:0	2	->
water	62:18	0:0	2	pps_buffers
op	62:29	0:0	2	[
water	62:30	0:0	2	pps_id
op	62:36	0:0	2	]
water	62:37	0:0	2	;
if	64:4	69:4	2	(! h0 -> sps_buffers [ h -> pps . sps_id ])
cond	64:8	64:38	3	! h0 -> sps_buffers [ h -> pps . sps_id ]
op	64:8	0:0	4	!
water	64:9	0:0	4	h0
op	64:11	0:0	4	->
water	64:13	0:0	4	sps_buffers
op	64:24	0:0	4	[
water	64:25	0:0	4	h
op	64:26	0:0	4	->
water	64:28	0:0	4	pps
op	64:31	0:0	4	.
water	64:32	0:0	4	sps_id
op	64:38	0:0	4	]
stmts	64:41	69:4	3	
water	64:41	0:0	4	{
call	65:8	67:28	4	av_log
arg	65:15	65:23	5	h->avctx
water	65:15	0:0	6	h
op	65:16	0:0	6	->
water	65:18	0:0	6	avctx
arg	65:25	65:37	5	AV_LOG_ERROR
water	65:25	0:0	6	AV_LOG_ERROR
arg	66:15	66:49	5	"non-existing SPS %u referenced\n"
water	66:15	0:0	6	"non-existing SPS %u referenced\n"
arg	67:15	67:28	5	h->pps.sps_id
water	67:15	0:0	6	h
op	67:16	0:0	6	->
water	67:18	0:0	6	pps
op	67:21	0:0	6	.
water	67:22	0:0	6	sps_id
water	67:29	0:0	4	;
return	68:8	68:17	4	-1
op	68:15	0:0	5	-
water	68:16	0:0	5	1
water	69:4	0:0	4	}
if	71:4	93:4	2	(h -> pps . sps_id != h -> current_sps_id || h0 -> sps_buffers [ h -> pps . sps_id ] -> new)
cond	71:8	72:40	3	h -> pps . sps_id != h -> current_sps_id || h0 -> sps_buffers [ h -> pps . sps_id ] -> new
water	71:8	0:0	4	h
op	71:9	0:0	4	->
water	71:11	0:0	4	pps
op	71:14	0:0	4	.
water	71:15	0:0	4	sps_id
op	71:22	0:0	4	!=
water	71:25	0:0	4	h
op	71:26	0:0	4	->
water	71:28	0:0	4	current_sps_id
op	71:43	0:0	4	||
water	72:8	0:0	4	h0
op	72:10	0:0	4	->
water	72:12	0:0	4	sps_buffers
op	72:23	0:0	4	[
water	72:24	0:0	4	h
op	72:25	0:0	4	->
water	72:27	0:0	4	pps
op	72:30	0:0	4	.
water	72:31	0:0	4	sps_id
op	72:37	0:0	4	]
op	72:38	0:0	4	->
op	72:40	0:0	4	new
stmts	72:45	93:4	3	
water	72:45	0:0	4	{
water	73:8	0:0	4	h0
op	73:10	0:0	4	->
water	73:12	0:0	4	sps_buffers
op	73:23	0:0	4	[
water	73:24	0:0	4	h
op	73:25	0:0	4	->
water	73:27	0:0	4	pps
op	73:30	0:0	4	.
water	73:31	0:0	4	sps_id
op	73:37	0:0	4	]
op	73:38	0:0	4	->
op	73:40	0:0	4	new
op	73:44	0:0	4	=
water	73:46	0:0	4	0
water	73:47	0:0	4	;
water	75:8	0:0	4	h
op	75:9	0:0	4	->
water	75:11	0:0	4	current_sps_id
op	75:26	0:0	4	=
water	75:28	0:0	4	h
op	75:29	0:0	4	->
water	75:31	0:0	4	pps
op	75:34	0:0	4	.
water	75:35	0:0	4	sps_id
water	75:41	0:0	4	;
water	76:8	0:0	4	h
op	76:9	0:0	4	->
water	76:11	0:0	4	sps
op	76:26	0:0	4	=
op	76:28	0:0	4	*
water	76:29	0:0	4	h0
op	76:31	0:0	4	->
water	76:33	0:0	4	sps_buffers
op	76:44	0:0	4	[
water	76:45	0:0	4	h
op	76:46	0:0	4	->
water	76:48	0:0	4	pps
op	76:51	0:0	4	.
water	76:52	0:0	4	sps_id
op	76:58	0:0	4	]
water	76:59	0:0	4	;
if	78:8	83:28	4	(h -> mb_width != h -> sps . mb_width || h -> mb_height != h -> sps . mb_height * ( 2 - h -> sps . frame_mbs_only_flag ) || h -> avctx -> bits_per_raw_sample != h -> sps . bit_depth_luma || h -> cur_chroma_format_idc != h -> sps . chroma_format_idc)
cond	78:12	81:47	5	h -> mb_width != h -> sps . mb_width || h -> mb_height != h -> sps . mb_height * ( 2 - h -> sps . frame_mbs_only_flag ) || h -> avctx -> bits_per_raw_sample != h -> sps . bit_depth_luma || h -> cur_chroma_format_idc != h -> sps . chroma_format_idc
water	78:12	0:0	6	h
op	78:13	0:0	6	->
water	78:15	0:0	6	mb_width
op	78:25	0:0	6	!=
water	78:28	0:0	6	h
op	78:29	0:0	6	->
water	78:31	0:0	6	sps
op	78:34	0:0	6	.
water	78:35	0:0	6	mb_width
op	78:44	0:0	6	||
water	79:12	0:0	6	h
op	79:13	0:0	6	->
water	79:15	0:0	6	mb_height
op	79:25	0:0	6	!=
water	79:28	0:0	6	h
op	79:29	0:0	6	->
water	79:31	0:0	6	sps
op	79:34	0:0	6	.
water	79:35	0:0	6	mb_height
op	79:45	0:0	6	*
water	79:47	0:0	6	(
water	79:48	0:0	6	2
op	79:50	0:0	6	-
water	79:52	0:0	6	h
op	79:53	0:0	6	->
water	79:55	0:0	6	sps
op	79:58	0:0	6	.
water	79:59	0:0	6	frame_mbs_only_flag
water	79:78	0:0	6	)
op	79:80	0:0	6	||
water	80:12	0:0	6	h
op	80:13	0:0	6	->
water	80:15	0:0	6	avctx
op	80:20	0:0	6	->
water	80:22	0:0	6	bits_per_raw_sample
op	80:42	0:0	6	!=
water	80:45	0:0	6	h
op	80:46	0:0	6	->
water	80:48	0:0	6	sps
op	80:51	0:0	6	.
water	80:52	0:0	6	bit_depth_luma
op	80:67	0:0	6	||
water	81:12	0:0	6	h
op	81:13	0:0	6	->
water	81:15	0:0	6	cur_chroma_format_idc
op	81:37	0:0	6	!=
water	81:40	0:0	6	h
op	81:41	0:0	6	->
water	81:43	0:0	6	sps
op	81:46	0:0	6	.
water	81:47	0:0	6	chroma_format_idc
stmts	83:12	83:28	5	
water	83:12	0:0	6	needs_reinit
op	83:25	0:0	6	=
water	83:27	0:0	6	1
water	83:28	0:0	6	;
if	85:8	90:8	4	(h -> bit_depth_luma != h -> sps . bit_depth_luma || h -> chroma_format_idc != h -> sps . chroma_format_idc)
cond	85:12	86:43	5	h -> bit_depth_luma != h -> sps . bit_depth_luma || h -> chroma_format_idc != h -> sps . chroma_format_idc
water	85:12	0:0	6	h
op	85:13	0:0	6	->
water	85:15	0:0	6	bit_depth_luma
op	85:33	0:0	6	!=
water	85:36	0:0	6	h
op	85:37	0:0	6	->
water	85:39	0:0	6	sps
op	85:42	0:0	6	.
water	85:43	0:0	6	bit_depth_luma
op	85:58	0:0	6	||
water	86:12	0:0	6	h
op	86:13	0:0	6	->
water	86:15	0:0	6	chroma_format_idc
op	86:33	0:0	6	!=
water	86:36	0:0	6	h
op	86:37	0:0	6	->
water	86:39	0:0	6	sps
op	86:42	0:0	6	.
water	86:43	0:0	6	chroma_format_idc
stmts	86:62	90:8	5	
water	86:62	0:0	6	{
water	87:12	0:0	6	h
op	87:13	0:0	6	->
water	87:15	0:0	6	bit_depth_luma
op	87:33	0:0	6	=
water	87:35	0:0	6	h
op	87:36	0:0	6	->
water	87:38	0:0	6	sps
op	87:41	0:0	6	.
water	87:42	0:0	6	bit_depth_luma
water	87:56	0:0	6	;
water	88:12	0:0	6	h
op	88:13	0:0	6	->
water	88:15	0:0	6	chroma_format_idc
op	88:33	0:0	6	=
water	88:35	0:0	6	h
op	88:36	0:0	6	->
water	88:38	0:0	6	sps
op	88:41	0:0	6	.
water	88:42	0:0	6	chroma_format_idc
water	88:59	0:0	6	;
water	89:12	0:0	6	needs_reinit
op	89:33	0:0	6	=
water	89:35	0:0	6	1
water	89:36	0:0	6	;
water	90:8	0:0	6	}
if	91:8	92:22	4	(( ret =h264_set_parameter_from_sps (h ) ) < 0)
cond	91:12	91:53	5	( ret =h264_set_parameter_from_sps (h ) ) < 0
water	91:12	0:0	6	(
water	91:13	0:0	6	ret
op	91:17	0:0	6	=
call	91:19	91:48	6	h264_set_parameter_from_sps
arg	91:47	91:48	7	h
water	91:47	0:0	8	h
water	91:49	0:0	6	)
op	91:51	0:0	6	<
water	91:53	0:0	6	0
stmts	92:12	92:22	5	
return	92:12	92:22	6	ret
water	92:19	0:0	7	ret
water	93:4	0:0	4	}
water	95:4	0:0	2	h
op	95:5	0:0	2	->
water	95:7	0:0	2	avctx
op	95:12	0:0	2	->
water	95:14	0:0	2	profile
op	95:22	0:0	2	=
call	95:24	95:51	2	ff_h264_get_profile
arg	95:44	95:51	3	&h->sps
op	95:44	0:0	4	&
water	95:45	0:0	4	h
op	95:46	0:0	4	->
water	95:48	0:0	4	sps
water	95:52	0:0	2	;
water	96:4	0:0	2	h
op	96:5	0:0	2	->
water	96:7	0:0	2	avctx
op	96:12	0:0	2	->
water	96:14	0:0	2	level
op	96:22	0:0	2	=
water	96:24	0:0	2	h
op	96:25	0:0	2	->
water	96:27	0:0	2	sps
op	96:30	0:0	2	.
water	96:31	0:0	2	level_idc
water	96:40	0:0	2	;
water	97:4	0:0	2	h
op	97:5	0:0	2	->
water	97:7	0:0	2	avctx
op	97:12	0:0	2	->
water	97:14	0:0	2	refs
op	97:22	0:0	2	=
water	97:24	0:0	2	h
op	97:25	0:0	2	->
water	97:27	0:0	2	sps
op	97:30	0:0	2	.
water	97:31	0:0	2	ref_frame_count
water	97:46	0:0	2	;
water	99:4	0:0	2	must_reinit
op	99:16	0:0	2	=
water	99:18	0:0	2	(
water	99:19	0:0	2	h
op	99:20	0:0	2	->
water	99:22	0:0	2	context_initialized
op	99:42	0:0	2	&&
water	100:20	0:0	2	(
water	100:24	0:0	2	16
op	100:26	0:0	2	*
water	100:27	0:0	2	h
op	100:28	0:0	2	->
water	100:30	0:0	2	sps
op	100:33	0:0	2	.
water	100:34	0:0	2	mb_width
op	100:43	0:0	2	!=
water	100:46	0:0	2	h
op	100:47	0:0	2	->
water	100:49	0:0	2	avctx
op	100:54	0:0	2	->
water	100:56	0:0	2	coded_width
op	101:21	0:0	2	||
water	101:24	0:0	2	16
op	101:26	0:0	2	*
water	101:27	0:0	2	h
op	101:28	0:0	2	->
water	101:30	0:0	2	sps
op	101:33	0:0	2	.
water	101:34	0:0	2	mb_height
op	101:44	0:0	2	*
water	101:46	0:0	2	(
water	101:47	0:0	2	2
op	101:49	0:0	2	-
water	101:51	0:0	2	h
op	101:52	0:0	2	->
water	101:54	0:0	2	sps
op	101:57	0:0	2	.
water	101:58	0:0	2	frame_mbs_only_flag
water	101:77	0:0	2	)
op	101:79	0:0	2	!=
water	101:82	0:0	2	h
op	101:83	0:0	2	->
water	101:85	0:0	2	avctx
op	101:90	0:0	2	->
water	101:92	0:0	2	coded_height
op	102:21	0:0	2	||
water	102:24	0:0	2	h
op	102:25	0:0	2	->
water	102:27	0:0	2	avctx
op	102:32	0:0	2	->
water	102:34	0:0	2	bits_per_raw_sample
op	102:54	0:0	2	!=
water	102:57	0:0	2	h
op	102:58	0:0	2	->
water	102:60	0:0	2	sps
op	102:63	0:0	2	.
water	102:64	0:0	2	bit_depth_luma
op	103:21	0:0	2	||
water	103:24	0:0	2	h
op	103:25	0:0	2	->
water	103:27	0:0	2	cur_chroma_format_idc
op	103:49	0:0	2	!=
water	103:52	0:0	2	h
op	103:53	0:0	2	->
water	103:55	0:0	2	sps
op	103:58	0:0	2	.
water	103:59	0:0	2	chroma_format_idc
op	104:21	0:0	2	||
call	104:24	104:74	2	av_cmp_q
arg	104:33	104:43	3	h->sps.sar
water	104:33	0:0	4	h
op	104:34	0:0	4	->
water	104:36	0:0	4	sps
op	104:39	0:0	4	.
water	104:40	0:0	4	sar
arg	104:45	104:74	3	h->avctx->sample_aspect_ratio
water	104:45	0:0	4	h
op	104:46	0:0	4	->
water	104:48	0:0	4	avctx
op	104:53	0:0	4	->
water	104:55	0:0	4	sample_aspect_ratio
op	105:21	0:0	2	||
water	105:24	0:0	2	h
op	105:25	0:0	2	->
water	105:27	0:0	2	mb_width
op	105:37	0:0	2	!=
water	105:40	0:0	2	h
op	105:41	0:0	2	->
water	105:43	0:0	2	sps
op	105:46	0:0	2	.
water	105:47	0:0	2	mb_width
op	106:21	0:0	2	||
water	106:24	0:0	2	h
op	106:25	0:0	2	->
water	106:27	0:0	2	mb_height
op	106:37	0:0	2	!=
water	106:40	0:0	2	h
op	106:41	0:0	2	->
water	106:43	0:0	2	sps
op	106:46	0:0	2	.
water	106:47	0:0	2	mb_height
op	106:57	0:0	2	*
water	106:59	0:0	2	(
water	106:60	0:0	2	2
op	106:62	0:0	2	-
water	106:64	0:0	2	h
op	106:65	0:0	2	->
water	106:67	0:0	2	sps
op	106:70	0:0	2	.
water	106:71	0:0	2	frame_mbs_only_flag
water	106:90	0:0	2	)
water	107:20	0:0	2	)
water	107:21	0:0	2	)
water	107:22	0:0	2	;
if	108:4	109:23	2	(h0 -> avctx -> pix_fmt !=get_pixel_format (h0 ,0 ))
cond	108:8	108:52	3	h0 -> avctx -> pix_fmt !=get_pixel_format (h0 ,0 )
water	108:8	0:0	4	h0
op	108:10	0:0	4	->
water	108:12	0:0	4	avctx
op	108:17	0:0	4	->
water	108:19	0:0	4	pix_fmt
op	108:27	0:0	4	!=
call	108:30	108:52	4	get_pixel_format
arg	108:47	108:49	5	h0
water	108:47	0:0	6	h0
arg	108:51	108:52	5	0
water	108:51	0:0	6	0
stmts	109:8	109:23	3	
water	109:8	0:0	4	must_reinit
op	109:20	0:0	4	=
water	109:22	0:0	4	1
water	109:23	0:0	4	;
water	111:4	0:0	2	h
op	111:5	0:0	2	->
water	111:7	0:0	2	mb_width
op	111:17	0:0	2	=
water	111:19	0:0	2	h
op	111:20	0:0	2	->
water	111:22	0:0	2	sps
op	111:25	0:0	2	.
water	111:26	0:0	2	mb_width
water	111:34	0:0	2	;
water	112:4	0:0	2	h
op	112:5	0:0	2	->
water	112:7	0:0	2	mb_height
op	112:17	0:0	2	=
water	112:19	0:0	2	h
op	112:20	0:0	2	->
water	112:22	0:0	2	sps
op	112:25	0:0	2	.
water	112:26	0:0	2	mb_height
op	112:36	0:0	2	*
water	112:38	0:0	2	(
water	112:39	0:0	2	2
op	112:41	0:0	2	-
water	112:43	0:0	2	h
op	112:44	0:0	2	->
water	112:46	0:0	2	sps
op	112:49	0:0	2	.
water	112:50	0:0	2	frame_mbs_only_flag
water	112:69	0:0	2	)
water	112:70	0:0	2	;
water	113:4	0:0	2	h
op	113:5	0:0	2	->
water	113:7	0:0	2	mb_num
op	113:17	0:0	2	=
water	113:19	0:0	2	h
op	113:20	0:0	2	->
water	113:22	0:0	2	mb_width
op	113:31	0:0	2	*
water	113:33	0:0	2	h
op	113:34	0:0	2	->
water	113:36	0:0	2	mb_height
water	113:45	0:0	2	;
water	114:4	0:0	2	h
op	114:5	0:0	2	->
water	114:7	0:0	2	mb_stride
op	114:17	0:0	2	=
water	114:19	0:0	2	h
op	114:20	0:0	2	->
water	114:22	0:0	2	mb_width
op	114:31	0:0	2	+
water	114:33	0:0	2	1
water	114:34	0:0	2	;
water	116:4	0:0	2	h
op	116:5	0:0	2	->
water	116:7	0:0	2	b_stride
op	116:16	0:0	2	=
water	116:18	0:0	2	h
op	116:19	0:0	2	->
water	116:21	0:0	2	mb_width
op	116:30	0:0	2	*
water	116:32	0:0	2	4
water	116:33	0:0	2	;
water	118:4	0:0	2	h
op	118:5	0:0	2	->
water	118:7	0:0	2	chroma_y_shift
op	118:22	0:0	2	=
water	118:24	0:0	2	h
op	118:25	0:0	2	->
water	118:27	0:0	2	sps
op	118:30	0:0	2	.
water	118:31	0:0	2	chroma_format_idc
op	118:49	0:0	2	<=
water	118:52	0:0	2	1
water	118:53	0:0	2	;
water	120:4	0:0	2	h
op	120:5	0:0	2	->
water	120:7	0:0	2	width
op	120:14	0:0	2	=
water	120:16	0:0	2	16
op	120:19	0:0	2	*
water	120:21	0:0	2	h
op	120:22	0:0	2	->
water	120:24	0:0	2	mb_width
water	120:32	0:0	2	;
water	121:4	0:0	2	h
op	121:5	0:0	2	->
water	121:7	0:0	2	height
op	121:14	0:0	2	=
water	121:16	0:0	2	16
op	121:19	0:0	2	*
water	121:21	0:0	2	h
op	121:22	0:0	2	->
water	121:24	0:0	2	mb_height
water	121:33	0:0	2	;
water	123:4	0:0	2	ret
op	123:8	0:0	2	=
call	123:10	123:27	2	init_dimensions
arg	123:26	123:27	3	h
water	123:26	0:0	4	h
water	123:28	0:0	2	;
if	124:4	125:18	2	(ret < 0)
cond	124:8	124:14	3	ret < 0
water	124:8	0:0	4	ret
op	124:12	0:0	4	<
water	124:14	0:0	4	0
stmts	125:8	125:18	3	
return	125:8	125:18	4	ret
water	125:15	0:0	5	ret
if	127:4	137:4	2	(h -> sps . video_signal_type_present_flag)
cond	127:8	127:15	3	h -> sps . video_signal_type_present_flag
water	127:8	0:0	4	h
op	127:9	0:0	4	->
water	127:11	0:0	4	sps
op	127:14	0:0	4	.
water	127:15	0:0	4	video_signal_type_present_flag
stmts	127:47	137:4	3	
water	127:47	0:0	4	{
water	128:8	0:0	4	h
op	128:9	0:0	4	->
water	128:11	0:0	4	avctx
op	128:16	0:0	4	->
water	128:18	0:0	4	color_range
op	128:30	0:0	4	=
water	128:32	0:0	4	h
op	128:33	0:0	4	->
water	128:35	0:0	4	sps
op	128:38	0:0	4	.
water	128:39	0:0	4	full_range
op	128:49	0:0	4	>
water	128:50	0:0	4	0
water	128:52	0:0	4	?
water	128:54	0:0	4	AVCOL_RANGE_JPEG
water	129:52	0:0	4	:
water	129:54	0:0	4	AVCOL_RANGE_MPEG
water	129:70	0:0	4	;
if	130:8	136:8	4	(h -> sps . colour_description_present_flag)
cond	130:12	130:19	5	h -> sps . colour_description_present_flag
water	130:12	0:0	6	h
op	130:13	0:0	6	->
water	130:15	0:0	6	sps
op	130:18	0:0	6	.
water	130:19	0:0	6	colour_description_present_flag
stmts	130:52	136:8	5	
water	130:52	0:0	6	{
if	131:12	132:32	6	(h -> avctx -> colorspace != h -> sps . colorspace)
cond	131:16	131:47	7	h -> avctx -> colorspace != h -> sps . colorspace
water	131:16	0:0	8	h
op	131:17	0:0	8	->
water	131:19	0:0	8	avctx
op	131:24	0:0	8	->
water	131:26	0:0	8	colorspace
op	131:37	0:0	8	!=
water	131:40	0:0	8	h
op	131:41	0:0	8	->
water	131:43	0:0	8	sps
op	131:46	0:0	8	.
water	131:47	0:0	8	colorspace
stmts	132:16	132:32	7	
water	132:16	0:0	8	needs_reinit
op	132:29	0:0	8	=
water	132:31	0:0	8	1
water	132:32	0:0	8	;
water	133:12	0:0	6	h
op	133:13	0:0	6	->
water	133:15	0:0	6	avctx
op	133:20	0:0	6	->
water	133:22	0:0	6	color_primaries
op	133:38	0:0	6	=
water	133:40	0:0	6	h
op	133:41	0:0	6	->
water	133:43	0:0	6	sps
op	133:46	0:0	6	.
water	133:47	0:0	6	color_primaries
water	133:62	0:0	6	;
water	134:12	0:0	6	h
op	134:13	0:0	6	->
water	134:15	0:0	6	avctx
op	134:20	0:0	6	->
water	134:22	0:0	6	color_trc
op	134:38	0:0	6	=
water	134:40	0:0	6	h
op	134:41	0:0	6	->
water	134:43	0:0	6	sps
op	134:46	0:0	6	.
water	134:47	0:0	6	color_trc
water	134:56	0:0	6	;
water	135:12	0:0	6	h
op	135:13	0:0	6	->
water	135:15	0:0	6	avctx
op	135:20	0:0	6	->
water	135:22	0:0	6	colorspace
op	135:38	0:0	6	=
water	135:40	0:0	6	h
op	135:41	0:0	6	->
water	135:43	0:0	6	sps
op	135:46	0:0	6	.
water	135:47	0:0	6	colorspace
water	135:57	0:0	6	;
water	136:8	0:0	6	}
water	137:4	0:0	4	}
if	139:4	165:4	2	(h -> context_initialized && ( h -> width != h -> avctx -> coded_width || h -> height != h -> avctx -> coded_height || must_reinit || needs_reinit ))
cond	139:8	143:21	3	h -> context_initialized && ( h -> width != h -> avctx -> coded_width || h -> height != h -> avctx -> coded_height || must_reinit || needs_reinit )
water	139:8	0:0	4	h
op	139:9	0:0	4	->
water	139:11	0:0	4	context_initialized
op	139:31	0:0	4	&&
water	140:8	0:0	4	(
water	140:9	0:0	4	h
op	140:10	0:0	4	->
water	140:12	0:0	4	width
op	140:19	0:0	4	!=
water	140:22	0:0	4	h
op	140:23	0:0	4	->
water	140:25	0:0	4	avctx
op	140:30	0:0	4	->
water	140:32	0:0	4	coded_width
op	140:46	0:0	4	||
water	141:9	0:0	4	h
op	141:10	0:0	4	->
water	141:12	0:0	4	height
op	141:19	0:0	4	!=
water	141:22	0:0	4	h
op	141:23	0:0	4	->
water	141:25	0:0	4	avctx
op	141:30	0:0	4	->
water	141:32	0:0	4	coded_height
op	141:46	0:0	4	||
water	142:9	0:0	4	must_reinit
op	142:21	0:0	4	||
water	143:9	0:0	4	needs_reinit
water	143:21	0:0	4	)
stmts	143:24	165:4	3	
water	143:24	0:0	4	{
if	145:8	149:8	4	(h != h0)
cond	145:12	145:17	5	h != h0
water	145:12	0:0	6	h
op	145:14	0:0	6	!=
water	145:17	0:0	6	h0
stmts	145:21	149:8	5	
water	145:21	0:0	6	{
call	146:12	147:54	6	av_log
arg	146:19	146:27	7	h->avctx
water	146:19	0:0	8	h
op	146:20	0:0	8	->
water	146:22	0:0	8	avctx
arg	146:29	146:41	7	AV_LOG_ERROR
water	146:29	0:0	8	AV_LOG_ERROR
arg	146:43	147:31	7	"changing width/height on ""slice %d\n"
water	146:43	0:0	8	"changing width/height on "
water	147:19	0:0	8	"slice %d\n"
arg	147:33	147:54	7	h0->current_slice+1
water	147:33	0:0	8	h0
op	147:35	0:0	8	->
water	147:37	0:0	8	current_slice
op	147:51	0:0	8	+
water	147:53	0:0	8	1
water	147:55	0:0	6	;
return	148:12	148:38	6	AVERROR_INVALIDDATA
water	148:19	0:0	7	AVERROR_INVALIDDATA
water	149:8	0:0	6	}
call	151:8	151:22	4	flush_change
arg	151:21	151:22	5	h
water	151:21	0:0	6	h
water	151:23	0:0	4	;
if	153:8	154:22	4	(( ret =get_pixel_format (h ,1 ) ) < 0)
cond	153:12	153:45	5	( ret =get_pixel_format (h ,1 ) ) < 0
water	153:12	0:0	6	(
water	153:13	0:0	6	ret
op	153:17	0:0	6	=
call	153:19	153:40	6	get_pixel_format
arg	153:36	153:37	7	h
water	153:36	0:0	8	h
arg	153:39	153:40	7	1
water	153:39	0:0	8	1
water	153:41	0:0	6	)
op	153:43	0:0	6	<
water	153:45	0:0	6	0
stmts	154:12	154:22	5	
return	154:12	154:22	6	ret
water	154:19	0:0	7	ret
water	155:8	0:0	4	h
op	155:9	0:0	4	->
water	155:11	0:0	4	avctx
op	155:16	0:0	4	->
water	155:18	0:0	4	pix_fmt
op	155:26	0:0	4	=
water	155:28	0:0	4	ret
water	155:31	0:0	4	;
call	157:8	158:70	4	av_log
arg	157:15	157:23	5	h->avctx
water	157:15	0:0	6	h
op	157:16	0:0	6	->
water	157:18	0:0	6	avctx
arg	157:25	157:36	5	AV_LOG_INFO
water	157:25	0:0	6	AV_LOG_INFO
arg	157:38	158:30	5	"Reinit context to %dx%d, ""pix_fmt: %d\n"
water	157:38	0:0	6	"Reinit context to %dx%d, "
water	158:15	0:0	6	"pix_fmt: %d\n"
arg	158:32	158:40	5	h->width
water	158:32	0:0	6	h
op	158:33	0:0	6	->
water	158:35	0:0	6	width
arg	158:42	158:51	5	h->height
water	158:42	0:0	6	h
op	158:43	0:0	6	->
water	158:45	0:0	6	height
arg	158:53	158:70	5	h->avctx->pix_fmt
water	158:53	0:0	6	h
op	158:54	0:0	6	->
water	158:56	0:0	6	avctx
op	158:61	0:0	6	->
water	158:63	0:0	6	pix_fmt
water	158:71	0:0	4	;
if	160:8	164:8	4	(( ret =h264_slice_header_init (h ,1 ) ) < 0)
cond	160:12	160:51	5	( ret =h264_slice_header_init (h ,1 ) ) < 0
water	160:12	0:0	6	(
water	160:13	0:0	6	ret
op	160:17	0:0	6	=
call	160:19	160:46	6	h264_slice_header_init
arg	160:42	160:43	7	h
water	160:42	0:0	8	h
arg	160:45	160:46	7	1
water	160:45	0:0	8	1
water	160:47	0:0	6	)
op	160:49	0:0	6	<
water	160:51	0:0	6	0
stmts	160:54	164:8	5	
water	160:54	0:0	6	{
call	161:12	162:54	6	av_log
arg	161:19	161:27	7	h->avctx
water	161:19	0:0	8	h
op	161:20	0:0	8	->
water	161:22	0:0	8	avctx
arg	161:29	161:41	7	AV_LOG_ERROR
water	161:29	0:0	8	AV_LOG_ERROR
arg	162:19	162:54	7	"h264_slice_header_init() failed\n"
water	162:19	0:0	8	"h264_slice_header_init() failed\n"
water	162:55	0:0	6	;
return	163:12	163:22	6	ret
water	163:19	0:0	7	ret
water	164:8	0:0	6	}
water	165:4	0:0	4	}
if	166:4	182:4	2	(! h -> context_initialized)
cond	166:8	166:12	3	! h -> context_initialized
op	166:8	0:0	4	!
water	166:9	0:0	4	h
op	166:10	0:0	4	->
water	166:12	0:0	4	context_initialized
stmts	166:33	182:4	3	
water	166:33	0:0	4	{
if	167:8	171:8	4	(h != h0)
cond	167:12	167:17	5	h != h0
water	167:12	0:0	6	h
op	167:14	0:0	6	!=
water	167:17	0:0	6	h0
stmts	167:21	171:8	5	
water	167:21	0:0	6	{
call	168:12	169:79	6	av_log
arg	168:19	168:27	7	h->avctx
water	168:19	0:0	8	h
op	168:20	0:0	8	->
water	168:22	0:0	8	avctx
arg	168:29	168:41	7	AV_LOG_ERROR
water	168:29	0:0	8	AV_LOG_ERROR
arg	169:19	169:79	7	"Cannot (re-)initialize context during parallel decoding.\n"
water	169:19	0:0	8	"Cannot (re-)initialize context during parallel decoding.\n"
water	169:80	0:0	6	;
return	170:12	170:21	6	-1
op	170:19	0:0	7	-
water	170:20	0:0	7	1
water	171:8	0:0	6	}
if	173:8	174:22	4	(( ret =get_pixel_format (h ,1 ) ) < 0)
cond	173:12	173:45	5	( ret =get_pixel_format (h ,1 ) ) < 0
water	173:12	0:0	6	(
water	173:13	0:0	6	ret
op	173:17	0:0	6	=
call	173:19	173:40	6	get_pixel_format
arg	173:36	173:37	7	h
water	173:36	0:0	8	h
arg	173:39	173:40	7	1
water	173:39	0:0	8	1
water	173:41	0:0	6	)
op	173:43	0:0	6	<
water	173:45	0:0	6	0
stmts	174:12	174:22	5	
return	174:12	174:22	6	ret
water	174:19	0:0	7	ret
water	175:8	0:0	4	h
op	175:9	0:0	4	->
water	175:11	0:0	4	avctx
op	175:16	0:0	4	->
water	175:18	0:0	4	pix_fmt
op	175:26	0:0	4	=
water	175:28	0:0	4	ret
water	175:31	0:0	4	;
if	177:8	181:8	4	(( ret =h264_slice_header_init (h ,0 ) ) < 0)
cond	177:12	177:51	5	( ret =h264_slice_header_init (h ,0 ) ) < 0
water	177:12	0:0	6	(
water	177:13	0:0	6	ret
op	177:17	0:0	6	=
call	177:19	177:46	6	h264_slice_header_init
arg	177:42	177:43	7	h
water	177:42	0:0	8	h
arg	177:45	177:46	7	0
water	177:45	0:0	8	0
water	177:47	0:0	6	)
op	177:49	0:0	6	<
water	177:51	0:0	6	0
stmts	177:54	181:8	5	
water	177:54	0:0	6	{
call	178:12	179:54	6	av_log
arg	178:19	178:27	7	h->avctx
water	178:19	0:0	8	h
op	178:20	0:0	8	->
water	178:22	0:0	8	avctx
arg	178:29	178:41	7	AV_LOG_ERROR
water	178:29	0:0	8	AV_LOG_ERROR
arg	179:19	179:54	7	"h264_slice_header_init() failed\n"
water	179:19	0:0	8	"h264_slice_header_init() failed\n"
water	179:55	0:0	6	;
return	180:12	180:22	6	ret
water	180:19	0:0	7	ret
water	181:8	0:0	6	}
water	182:4	0:0	4	}
if	184:4	187:4	2	(h == h0 && h -> dequant_coeff_pps != pps_id)
cond	184:8	184:43	3	h == h0 && h -> dequant_coeff_pps != pps_id
water	184:8	0:0	4	h
op	184:10	0:0	4	==
water	184:13	0:0	4	h0
op	184:16	0:0	4	&&
water	184:19	0:0	4	h
op	184:20	0:0	4	->
water	184:22	0:0	4	dequant_coeff_pps
op	184:40	0:0	4	!=
water	184:43	0:0	4	pps_id
stmts	184:51	187:4	3	
water	184:51	0:0	4	{
water	185:8	0:0	4	h
op	185:9	0:0	4	->
water	185:11	0:0	4	dequant_coeff_pps
op	185:29	0:0	4	=
water	185:31	0:0	4	pps_id
water	185:37	0:0	4	;
call	186:8	186:29	4	init_dequant_tables
arg	186:28	186:29	5	h
water	186:28	0:0	6	h
water	186:30	0:0	4	;
water	187:4	0:0	4	}
water	189:4	0:0	2	h
op	189:5	0:0	2	->
water	189:7	0:0	2	frame_num
op	189:17	0:0	2	=
call	189:19	189:61	2	get_bits
arg	189:28	189:34	3	&h->gb
op	189:28	0:0	4	&
water	189:29	0:0	4	h
op	189:30	0:0	4	->
water	189:32	0:0	4	gb
arg	189:36	189:61	3	h->sps.log2_max_frame_num
water	189:36	0:0	4	h
op	189:37	0:0	4	->
water	189:39	0:0	4	sps
op	189:42	0:0	4	.
water	189:43	0:0	4	log2_max_frame_num
water	189:62	0:0	2	;
water	191:4	0:0	2	h
op	191:5	0:0	2	->
water	191:7	0:0	2	mb_mbaff
op	191:23	0:0	2	=
water	191:25	0:0	2	0
water	191:26	0:0	2	;
water	192:4	0:0	2	h
op	192:5	0:0	2	->
water	192:7	0:0	2	mb_aff_frame
op	192:23	0:0	2	=
water	192:25	0:0	2	0
water	192:26	0:0	2	;
water	193:4	0:0	2	last_pic_structure
op	193:23	0:0	2	=
water	193:25	0:0	2	h0
op	193:27	0:0	2	->
water	193:29	0:0	2	picture_structure
water	193:46	0:0	2	;
water	194:4	0:0	2	last_pic_droppable
op	194:23	0:0	2	=
water	194:25	0:0	2	h0
op	194:27	0:0	2	->
water	194:29	0:0	2	droppable
water	194:38	0:0	2	;
water	195:4	0:0	2	h
op	195:5	0:0	2	->
water	195:7	0:0	2	droppable
op	195:23	0:0	2	=
water	195:25	0:0	2	h
op	195:26	0:0	2	->
water	195:28	0:0	2	nal_ref_idc
op	195:40	0:0	2	==
water	195:43	0:0	2	0
water	195:44	0:0	2	;
if	196:4	198:4	2	(h -> sps . frame_mbs_only_flag)
cond	196:8	196:15	3	h -> sps . frame_mbs_only_flag
water	196:8	0:0	4	h
op	196:9	0:0	4	->
water	196:11	0:0	4	sps
op	196:14	0:0	4	.
water	196:15	0:0	4	frame_mbs_only_flag
stmts	196:36	198:4	3	
water	196:36	0:0	4	{
water	197:8	0:0	4	h
op	197:9	0:0	4	->
water	197:11	0:0	4	picture_structure
op	197:29	0:0	4	=
water	197:31	0:0	4	PICT_FRAME
water	197:41	0:0	4	;
water	198:4	0:0	4	}
else	198:6	209:4	2
stmts	198:11	209:4	3	
water	198:11	0:0	4	{
if	199:8	202:8	4	(! h -> sps . direct_8x8_inference_flag && slice_type == AV_PICTURE_TYPE_B)
cond	199:12	199:63	5	! h -> sps . direct_8x8_inference_flag && slice_type == AV_PICTURE_TYPE_B
op	199:12	0:0	6	!
water	199:13	0:0	6	h
op	199:14	0:0	6	->
water	199:16	0:0	6	sps
op	199:19	0:0	6	.
water	199:20	0:0	6	direct_8x8_inference_flag
op	199:46	0:0	6	&&
water	199:49	0:0	6	slice_type
op	199:60	0:0	6	==
water	199:63	0:0	6	AV_PICTURE_TYPE_B
stmts	199:82	202:8	5	
water	199:82	0:0	6	{
call	200:12	200:115	6	av_log
arg	200:19	200:27	7	h->avctx
water	200:19	0:0	8	h
op	200:20	0:0	8	->
water	200:22	0:0	8	avctx
arg	200:29	200:41	7	AV_LOG_ERROR
water	200:29	0:0	8	AV_LOG_ERROR
arg	200:43	200:115	7	"This stream was generated by a broken encoder, invalid 8x8 inference\n"
water	200:43	0:0	8	"This stream was generated by a broken encoder, invalid 8x8 inference\n"
water	200:116	0:0	6	;
return	201:12	201:21	6	-1
op	201:19	0:0	7	-
water	201:20	0:0	7	1
water	202:8	0:0	6	}
if	203:8	205:8	4	(get_bits1 (& h -> gb ))
cond	203:12	203:28	5	get_bits1 (& h -> gb )
call	203:12	203:28	6	get_bits1
arg	203:22	203:28	7	&h->gb
op	203:22	0:0	8	&
water	203:23	0:0	8	h
op	203:24	0:0	8	->
water	203:26	0:0	8	gb
stmts	203:31	205:8	5	
water	203:31	0:0	6	{
water	204:12	0:0	6	h
op	204:13	0:0	6	->
water	204:15	0:0	6	picture_structure
op	204:33	0:0	6	=
water	204:35	0:0	6	PICT_TOP_FIELD
op	204:50	0:0	6	+
call	204:52	204:68	6	get_bits1
arg	204:62	204:68	7	&h->gb
op	204:62	0:0	8	&
water	204:63	0:0	8	h
op	204:64	0:0	8	->
water	204:66	0:0	8	gb
water	204:69	0:0	6	;
water	205:8	0:0	6	}
else	205:10	208:8	4
stmts	205:15	208:8	5	
water	205:15	0:0	6	{
water	206:12	0:0	6	h
op	206:13	0:0	6	->
water	206:15	0:0	6	picture_structure
op	206:33	0:0	6	=
water	206:35	0:0	6	PICT_FRAME
water	206:45	0:0	6	;
water	207:12	0:0	6	h
op	207:13	0:0	6	->
water	207:15	0:0	6	mb_aff_frame
op	207:33	0:0	6	=
water	207:35	0:0	6	h
op	207:36	0:0	6	->
water	207:38	0:0	6	sps
op	207:41	0:0	6	.
water	207:42	0:0	6	mb_aff
water	207:48	0:0	6	;
water	208:8	0:0	6	}
water	209:4	0:0	4	}
water	210:4	0:0	2	h
op	210:5	0:0	2	->
water	210:7	0:0	2	mb_field_decoding_flag
op	210:30	0:0	2	=
water	210:32	0:0	2	h
op	210:33	0:0	2	->
water	210:35	0:0	2	picture_structure
op	210:53	0:0	2	!=
water	210:56	0:0	2	PICT_FRAME
water	210:66	0:0	2	;
if	212:4	227:4	2	(h0 -> current_slice != 0)
cond	212:8	212:29	3	h0 -> current_slice != 0
water	212:8	0:0	4	h0
op	212:10	0:0	4	->
water	212:12	0:0	4	current_slice
op	212:26	0:0	4	!=
water	212:29	0:0	4	0
stmts	212:32	227:4	3	
water	212:32	0:0	4	{
if	213:8	221:8	4	(last_pic_structure != h -> picture_structure || last_pic_droppable != h -> droppable)
cond	213:12	214:37	5	last_pic_structure != h -> picture_structure || last_pic_droppable != h -> droppable
water	213:12	0:0	6	last_pic_structure
op	213:31	0:0	6	!=
water	213:34	0:0	6	h
op	213:35	0:0	6	->
water	213:37	0:0	6	picture_structure
op	213:55	0:0	6	||
water	214:12	0:0	6	last_pic_droppable
op	214:31	0:0	6	!=
water	214:34	0:0	6	h
op	214:35	0:0	6	->
water	214:37	0:0	6	droppable
stmts	214:48	221:8	5	
water	214:48	0:0	6	{
call	215:12	217:59	6	av_log
arg	215:19	215:27	7	h->avctx
water	215:19	0:0	8	h
op	215:20	0:0	8	->
water	215:22	0:0	8	avctx
arg	215:29	215:41	7	AV_LOG_ERROR
water	215:29	0:0	8	AV_LOG_ERROR
arg	216:19	216:83	7	"Changing field mode (%d -> %d) between slices is not allowed\n"
water	216:19	0:0	8	"Changing field mode (%d -> %d) between slices is not allowed\n"
arg	217:19	217:37	7	last_pic_structure
water	217:19	0:0	8	last_pic_structure
arg	217:39	217:59	7	h->picture_structure
water	217:39	0:0	8	h
op	217:40	0:0	8	->
water	217:42	0:0	8	picture_structure
water	217:60	0:0	6	;
water	218:12	0:0	6	h
op	218:13	0:0	6	->
water	218:15	0:0	6	picture_structure
op	218:33	0:0	6	=
water	218:35	0:0	6	last_pic_structure
water	218:53	0:0	6	;
water	219:12	0:0	6	h
op	219:13	0:0	6	->
water	219:15	0:0	6	droppable
op	219:33	0:0	6	=
water	219:35	0:0	6	last_pic_droppable
water	219:53	0:0	6	;
return	220:12	220:38	6	AVERROR_INVALIDDATA
water	220:19	0:0	7	AVERROR_INVALIDDATA
water	221:8	0:0	6	}
else	221:10	226:8	4
stmts	221:15	226:8	5	
if	221:15	226:8	6	(! h0 -> cur_pic_ptr)
cond	221:19	221:24	7	! h0 -> cur_pic_ptr
op	221:19	0:0	8	!
water	221:20	0:0	8	h0
op	221:22	0:0	8	->
water	221:24	0:0	8	cur_pic_ptr
stmts	221:37	226:8	7	
water	221:37	0:0	8	{
call	222:12	224:40	8	av_log
arg	222:19	222:27	9	h->avctx
water	222:19	0:0	10	h
op	222:20	0:0	10	->
water	222:22	0:0	10	avctx
arg	222:29	222:41	9	AV_LOG_ERROR
water	222:29	0:0	10	AV_LOG_ERROR
arg	223:19	223:53	9	"unset cur_pic_ptr on %d. slice\n"
water	223:19	0:0	10	"unset cur_pic_ptr on %d. slice\n"
arg	224:19	224:40	9	h0->current_slice+1
water	224:19	0:0	10	h0
op	224:21	0:0	10	->
water	224:23	0:0	10	current_slice
op	224:37	0:0	10	+
water	224:39	0:0	10	1
water	224:41	0:0	8	;
return	225:12	225:38	8	AVERROR_INVALIDDATA
water	225:19	0:0	9	AVERROR_INVALIDDATA
water	226:8	0:0	8	}
water	227:4	0:0	4	}
else	227:6	392:4	2
stmts	227:11	392:4	3	
water	227:11	0:0	4	{
if	230:8	244:8	4	(h -> frame_num != h -> prev_frame_num)
cond	230:12	230:31	5	h -> frame_num != h -> prev_frame_num
water	230:12	0:0	6	h
op	230:13	0:0	6	->
water	230:15	0:0	6	frame_num
op	230:25	0:0	6	!=
water	230:28	0:0	6	h
op	230:29	0:0	6	->
water	230:31	0:0	6	prev_frame_num
stmts	230:47	244:8	5	
water	230:47	0:0	6	{
decl	231:12	231:57	6	int	unwrap_prev_frame_num
op	231:38	0:0	6	=
water	231:40	0:0	6	h
op	231:41	0:0	6	->
water	231:43	0:0	6	prev_frame_num
decl	232:12	232:70	6	int	max_frame_num
op	232:38	0:0	6	=
water	232:40	0:0	6	1
op	232:42	0:0	6	<<
water	232:45	0:0	6	h
op	232:46	0:0	6	->
water	232:48	0:0	6	sps
op	232:51	0:0	6	.
water	232:52	0:0	6	log2_max_frame_num
if	234:12	235:54	6	(unwrap_prev_frame_num > h -> frame_num)
cond	234:16	234:43	7	unwrap_prev_frame_num > h -> frame_num
water	234:16	0:0	8	unwrap_prev_frame_num
op	234:38	0:0	8	>
water	234:40	0:0	8	h
op	234:41	0:0	8	->
water	234:43	0:0	8	frame_num
stmts	235:16	235:54	7	
water	235:16	0:0	8	unwrap_prev_frame_num
op	235:38	0:0	8	-=
water	235:41	0:0	8	max_frame_num
water	235:54	0:0	8	;
if	237:12	243:12	6	(( h -> frame_num - unwrap_prev_frame_num ) > h -> sps . ref_frame_count)
cond	237:16	237:64	7	( h -> frame_num - unwrap_prev_frame_num ) > h -> sps . ref_frame_count
water	237:16	0:0	8	(
water	237:17	0:0	8	h
op	237:18	0:0	8	->
water	237:20	0:0	8	frame_num
op	237:30	0:0	8	-
water	237:32	0:0	8	unwrap_prev_frame_num
water	237:53	0:0	8	)
op	237:55	0:0	8	>
water	237:57	0:0	8	h
op	237:58	0:0	8	->
water	237:60	0:0	8	sps
op	237:63	0:0	8	.
water	237:64	0:0	8	ref_frame_count
stmts	237:81	243:12	7	
water	237:81	0:0	8	{
water	238:16	0:0	8	unwrap_prev_frame_num
op	238:38	0:0	8	=
water	238:40	0:0	8	(
water	238:41	0:0	8	h
op	238:42	0:0	8	->
water	238:44	0:0	8	frame_num
op	238:54	0:0	8	-
water	238:56	0:0	8	h
op	238:57	0:0	8	->
water	238:59	0:0	8	sps
op	238:62	0:0	8	.
water	238:63	0:0	8	ref_frame_count
water	238:78	0:0	8	)
op	238:80	0:0	8	-
water	238:82	0:0	8	1
water	238:83	0:0	8	;
if	239:16	240:58	8	(unwrap_prev_frame_num < 0)
cond	239:20	239:44	9	unwrap_prev_frame_num < 0
water	239:20	0:0	10	unwrap_prev_frame_num
op	239:42	0:0	10	<
water	239:44	0:0	10	0
stmts	240:20	240:58	9	
water	240:20	0:0	10	unwrap_prev_frame_num
op	240:42	0:0	10	+=
water	240:45	0:0	10	max_frame_num
water	240:58	0:0	10	;
water	242:16	0:0	8	h
op	242:17	0:0	8	->
water	242:19	0:0	8	prev_frame_num
op	242:34	0:0	8	=
water	242:36	0:0	8	unwrap_prev_frame_num
water	242:57	0:0	8	;
water	243:12	0:0	8	}
water	244:8	0:0	6	}
if	251:8	301:8	4	(h0 -> first_field)
cond	251:12	251:16	5	h0 -> first_field
water	251:12	0:0	6	h0
op	251:14	0:0	6	->
water	251:16	0:0	6	first_field
stmts	251:29	301:8	5	
water	251:29	0:0	6	{
call	252:12	252:34	6	assert
arg	252:19	252:34	7	h0->cur_pic_ptr
water	252:19	0:0	8	h0
op	252:21	0:0	8	->
water	252:23	0:0	8	cur_pic_ptr
water	252:35	0:0	6	;
call	253:12	253:45	6	assert
arg	253:19	253:45	7	h0->cur_pic_ptr->f.data[0]
water	253:19	0:0	8	h0
op	253:21	0:0	8	->
water	253:23	0:0	8	cur_pic_ptr
op	253:34	0:0	8	->
water	253:36	0:0	8	f
op	253:37	0:0	8	.
water	253:38	0:0	8	data
op	253:42	0:0	8	[
water	253:43	0:0	8	0
op	253:44	0:0	8	]
water	253:46	0:0	6	;
call	254:12	254:64	6	assert
arg	254:19	254:64	7	h0->cur_pic_ptr->reference!=DELAYED_PIC_REF
water	254:19	0:0	8	h0
op	254:21	0:0	8	->
water	254:23	0:0	8	cur_pic_ptr
op	254:34	0:0	8	->
water	254:36	0:0	8	reference
op	254:46	0:0	8	!=
water	254:49	0:0	8	DELAYED_PIC_REF
water	254:65	0:0	6	;
if	257:12	260:12	6	(h0 -> cur_pic_ptr -> tf . owner == h0 -> avctx)
cond	257:16	257:49	7	h0 -> cur_pic_ptr -> tf . owner == h0 -> avctx
water	257:16	0:0	8	h0
op	257:18	0:0	8	->
water	257:20	0:0	8	cur_pic_ptr
op	257:31	0:0	8	->
water	257:33	0:0	8	tf
op	257:35	0:0	8	.
water	257:36	0:0	8	owner
op	257:42	0:0	8	==
water	257:45	0:0	8	h0
op	257:47	0:0	8	->
water	257:49	0:0	8	avctx
stmts	257:56	260:12	7	
water	257:56	0:0	8	{
call	258:16	259:81	8	ff_thread_report_progress
arg	258:42	258:62	9	&h0->cur_pic_ptr->tf
op	258:42	0:0	10	&
water	258:43	0:0	10	h0
op	258:45	0:0	10	->
water	258:47	0:0	10	cur_pic_ptr
op	258:58	0:0	10	->
water	258:60	0:0	10	tf
arg	258:64	258:71	9	INT_MAX
water	258:64	0:0	10	INT_MAX
arg	259:42	259:81	9	last_pic_structure==PICT_BOTTOM_FIELD
water	259:42	0:0	10	last_pic_structure
op	259:61	0:0	10	==
water	259:64	0:0	10	PICT_BOTTOM_FIELD
water	259:82	0:0	8	;
water	260:12	0:0	8	}
if	263:12	270:12	6	(!FIELD_PICTURE (h ) || h -> picture_structure == last_pic_structure)
cond	263:16	263:61	7	!FIELD_PICTURE (h ) || h -> picture_structure == last_pic_structure
op	263:16	0:0	8	!
call	263:17	263:32	8	FIELD_PICTURE
arg	263:31	263:32	9	h
water	263:31	0:0	10	h
op	263:34	0:0	8	||
water	263:37	0:0	8	h
op	263:38	0:0	8	->
water	263:40	0:0	8	picture_structure
op	263:58	0:0	8	==
water	263:61	0:0	8	last_pic_structure
stmts	263:81	270:12	7	
water	263:81	0:0	8	{
if	266:16	269:16	8	(last_pic_structure != PICT_FRAME)
cond	266:20	266:42	9	last_pic_structure != PICT_FRAME
water	266:20	0:0	10	last_pic_structure
op	266:39	0:0	10	!=
water	266:42	0:0	10	PICT_FRAME
stmts	266:54	269:16	9	
water	266:54	0:0	10	{
call	267:20	268:82	10	ff_thread_report_progress
arg	267:46	267:66	11	&h0->cur_pic_ptr->tf
op	267:46	0:0	12	&
water	267:47	0:0	12	h0
op	267:49	0:0	12	->
water	267:51	0:0	12	cur_pic_ptr
op	267:62	0:0	12	->
water	267:64	0:0	12	tf
arg	267:68	267:75	11	INT_MAX
water	267:68	0:0	12	INT_MAX
arg	268:46	268:82	11	last_pic_structure==PICT_TOP_FIELD
water	268:46	0:0	12	last_pic_structure
op	268:65	0:0	12	==
water	268:68	0:0	12	PICT_TOP_FIELD
water	268:83	0:0	10	;
water	269:16	0:0	10	}
water	270:12	0:0	8	}
else	270:14	300:12	6
stmts	270:19	300:12	7	
water	270:19	0:0	8	{
if	271:16	280:16	8	(h0 -> cur_pic_ptr -> frame_num != h -> frame_num)
cond	271:20	271:53	9	h0 -> cur_pic_ptr -> frame_num != h -> frame_num
water	271:20	0:0	10	h0
op	271:22	0:0	10	->
water	271:24	0:0	10	cur_pic_ptr
op	271:35	0:0	10	->
water	271:37	0:0	10	frame_num
op	271:47	0:0	10	!=
water	271:50	0:0	10	h
op	271:51	0:0	10	->
water	271:53	0:0	10	frame_num
stmts	271:64	280:16	9	
water	271:64	0:0	10	{
if	276:20	279:20	10	(last_pic_structure != PICT_FRAME)
cond	276:24	276:46	11	last_pic_structure != PICT_FRAME
water	276:24	0:0	12	last_pic_structure
op	276:43	0:0	12	!=
water	276:46	0:0	12	PICT_FRAME
stmts	276:58	279:20	11	
water	276:58	0:0	12	{
call	277:24	278:86	12	ff_thread_report_progress
arg	277:50	277:70	13	&h0->cur_pic_ptr->tf
op	277:50	0:0	14	&
water	277:51	0:0	14	h0
op	277:53	0:0	14	->
water	277:55	0:0	14	cur_pic_ptr
op	277:66	0:0	14	->
water	277:68	0:0	14	tf
arg	277:72	277:79	13	INT_MAX
water	277:72	0:0	14	INT_MAX
arg	278:50	278:86	13	last_pic_structure==PICT_TOP_FIELD
water	278:50	0:0	14	last_pic_structure
op	278:69	0:0	14	==
water	278:72	0:0	14	PICT_TOP_FIELD
water	278:87	0:0	12	;
water	279:20	0:0	12	}
water	280:16	0:0	10	}
else	280:18	299:16	8
stmts	280:23	299:16	9	
water	280:23	0:0	10	{
if	282:20	292:20	10	(! ( ( last_pic_structure == PICT_TOP_FIELD && h -> picture_structure == PICT_BOTTOM_FIELD ) || ( last_pic_structure == PICT_BOTTOM_FIELD && h -> picture_structure == PICT_TOP_FIELD ) ))
cond	282:24	285:66	11	! ( ( last_pic_structure == PICT_TOP_FIELD && h -> picture_structure == PICT_BOTTOM_FIELD ) || ( last_pic_structure == PICT_BOTTOM_FIELD && h -> picture_structure == PICT_TOP_FIELD ) )
op	282:24	0:0	12	!
water	282:25	0:0	12	(
water	282:26	0:0	12	(
water	282:27	0:0	12	last_pic_structure
op	282:48	0:0	12	==
water	282:51	0:0	12	PICT_TOP_FIELD
op	282:66	0:0	12	&&
water	283:27	0:0	12	h
op	283:28	0:0	12	->
water	283:30	0:0	12	picture_structure
op	283:48	0:0	12	==
water	283:51	0:0	12	PICT_BOTTOM_FIELD
water	283:68	0:0	12	)
op	283:70	0:0	12	||
water	284:26	0:0	12	(
water	284:27	0:0	12	last_pic_structure
op	284:48	0:0	12	==
water	284:51	0:0	12	PICT_BOTTOM_FIELD
op	284:69	0:0	12	&&
water	285:27	0:0	12	h
op	285:28	0:0	12	->
water	285:30	0:0	12	picture_structure
op	285:48	0:0	12	==
water	285:51	0:0	12	PICT_TOP_FIELD
water	285:65	0:0	12	)
water	285:66	0:0	12	)
stmts	285:69	292:20	11	
water	285:69	0:0	12	{
call	286:24	288:71	12	av_log
arg	286:31	286:39	13	h->avctx
water	286:31	0:0	14	h
op	286:32	0:0	14	->
water	286:34	0:0	14	avctx
arg	286:41	286:53	13	AV_LOG_ERROR
water	286:41	0:0	14	AV_LOG_ERROR
arg	287:31	287:71	13	"Invalid field mode combination %d/%d\n"
water	287:31	0:0	14	"Invalid field mode combination %d/%d\n"
arg	288:31	288:49	13	last_pic_structure
water	288:31	0:0	14	last_pic_structure
arg	288:51	288:71	13	h->picture_structure
water	288:51	0:0	14	h
op	288:52	0:0	14	->
water	288:54	0:0	14	picture_structure
water	288:72	0:0	12	;
water	289:24	0:0	12	h
op	289:25	0:0	12	->
water	289:27	0:0	12	picture_structure
op	289:45	0:0	12	=
water	289:47	0:0	12	last_pic_structure
water	289:65	0:0	12	;
water	290:24	0:0	12	h
op	290:25	0:0	12	->
water	290:27	0:0	12	droppable
op	290:45	0:0	12	=
water	290:47	0:0	12	last_pic_droppable
water	290:65	0:0	12	;
return	291:24	291:50	12	AVERROR_INVALIDDATA
water	291:31	0:0	13	AVERROR_INVALIDDATA
water	292:20	0:0	12	}
else	292:22	298:20	10
stmts	292:27	298:20	11	
if	292:27	298:20	12	(last_pic_droppable != h -> droppable)
cond	292:31	292:56	13	last_pic_droppable != h -> droppable
water	292:31	0:0	14	last_pic_droppable
op	292:50	0:0	14	!=
water	292:53	0:0	14	h
op	292:54	0:0	14	->
water	292:56	0:0	14	droppable
stmts	292:67	298:20	13	
water	292:67	0:0	14	{
call	293:24	294:113	14	avpriv_request_sample
arg	293:46	293:54	15	h->avctx
water	293:46	0:0	16	h
op	293:47	0:0	16	->
water	293:49	0:0	16	avctx
arg	294:46	294:113	15	"Found reference and non-reference fields in the same frame, which"
water	294:46	0:0	16	"Found reference and non-reference fields in the same frame, which"
water	294:114	0:0	14	;
water	295:24	0:0	14	h
op	295:25	0:0	14	->
water	295:27	0:0	14	picture_structure
op	295:45	0:0	14	=
water	295:47	0:0	14	last_pic_structure
water	295:65	0:0	14	;
water	296:24	0:0	14	h
op	296:25	0:0	14	->
water	296:27	0:0	14	droppable
op	296:45	0:0	14	=
water	296:47	0:0	14	last_pic_droppable
water	296:65	0:0	14	;
return	297:24	297:51	14	AVERROR_PATCHWELCOME
water	297:31	0:0	15	AVERROR_PATCHWELCOME
water	298:20	0:0	14	}
water	299:16	0:0	10	}
water	300:12	0:0	8	}
water	301:8	0:0	6	}
while	303:8	339:8	4	(h -> frame_num != h -> prev_frame_num && ! h0 -> first_field && h -> frame_num != ( h -> prev_frame_num + 1 ) % ( 1 << h -> sps . log2_max_frame_num ))
cond	303:15	304:88	5	h -> frame_num != h -> prev_frame_num && ! h0 -> first_field && h -> frame_num != ( h -> prev_frame_num + 1 ) % ( 1 << h -> sps . log2_max_frame_num )
water	303:15	0:0	6	h
op	303:16	0:0	6	->
water	303:18	0:0	6	frame_num
op	303:28	0:0	6	!=
water	303:31	0:0	6	h
op	303:32	0:0	6	->
water	303:34	0:0	6	prev_frame_num
op	303:49	0:0	6	&&
op	303:52	0:0	6	!
water	303:53	0:0	6	h0
op	303:55	0:0	6	->
water	303:57	0:0	6	first_field
op	303:69	0:0	6	&&
water	304:15	0:0	6	h
op	304:16	0:0	6	->
water	304:18	0:0	6	frame_num
op	304:28	0:0	6	!=
water	304:31	0:0	6	(
water	304:32	0:0	6	h
op	304:33	0:0	6	->
water	304:35	0:0	6	prev_frame_num
op	304:50	0:0	6	+
water	304:52	0:0	6	1
water	304:53	0:0	6	)
op	304:55	0:0	6	%
water	304:57	0:0	6	(
water	304:58	0:0	6	1
op	304:60	0:0	6	<<
water	304:63	0:0	6	h
op	304:64	0:0	6	->
water	304:66	0:0	6	sps
op	304:69	0:0	6	.
water	304:70	0:0	6	log2_max_frame_num
water	304:88	0:0	6	)
stmts	304:91	339:8	5	
water	304:91	0:0	6	{
decl	305:12	305:71	6	Picture	*prev
op	305:26	0:0	6	=
water	305:28	0:0	6	h
op	305:29	0:0	6	->
water	305:31	0:0	6	short_ref_count
water	305:47	0:0	6	?
water	305:49	0:0	6	h
op	305:50	0:0	6	->
water	305:52	0:0	6	short_ref
op	305:61	0:0	6	[
water	305:62	0:0	6	0
op	305:63	0:0	6	]
water	305:65	0:0	6	:
water	305:67	0:0	6	NULL
call	306:12	307:50	6	av_log
arg	306:19	306:27	7	h->avctx
water	306:19	0:0	8	h
op	306:20	0:0	8	->
water	306:22	0:0	8	avctx
arg	306:29	306:41	7	AV_LOG_DEBUG
water	306:29	0:0	8	AV_LOG_DEBUG
arg	306:43	306:66	7	"Frame num gap %d %d\n"
water	306:43	0:0	8	"Frame num gap %d %d\n"
arg	307:19	307:31	7	h->frame_num
water	307:19	0:0	8	h
op	307:20	0:0	8	->
water	307:22	0:0	8	frame_num
arg	307:33	307:50	7	h->prev_frame_num
water	307:33	0:0	8	h
op	307:34	0:0	8	->
water	307:36	0:0	8	prev_frame_num
water	307:51	0:0	6	;
if	308:12	310:45	6	(! h -> sps . gaps_in_frame_num_allowed_flag)
cond	308:16	308:24	7	! h -> sps . gaps_in_frame_num_allowed_flag
op	308:16	0:0	8	!
water	308:17	0:0	8	h
op	308:18	0:0	8	->
water	308:20	0:0	8	sps
op	308:23	0:0	8	.
water	308:24	0:0	8	gaps_in_frame_num_allowed_flag
stmts	309:16	310:45	7	
for	309:16	310:45	8	(i = 0 ;i <FF_ARRAY_ELEMS (h -> last_pocs );i ++)
forinit	309:20	309:23	9	i = 0 ;
water	309:20	0:0	10	i
op	309:21	0:0	10	=
water	309:22	0:0	10	0
water	309:23	0:0	10	;
cond	309:25	309:54	9	i <FF_ARRAY_ELEMS (h -> last_pocs )
water	309:25	0:0	10	i
op	309:26	0:0	10	<
call	309:27	309:54	10	FF_ARRAY_ELEMS
arg	309:42	309:54	11	h->last_pocs
water	309:42	0:0	12	h
op	309:43	0:0	12	->
water	309:45	0:0	12	last_pocs
forexpr	309:57	309:58	9	i ++
water	309:57	0:0	10	i
op	309:58	0:0	10	++
stmts	310:20	310:45	9	
water	310:20	0:0	10	h
op	310:21	0:0	10	->
water	310:23	0:0	10	last_pocs
op	310:32	0:0	10	[
water	310:33	0:0	10	i
op	310:34	0:0	10	]
op	310:36	0:0	10	=
water	310:38	0:0	10	INT_MIN
water	310:45	0:0	10	;
if	311:12	312:25	6	(h264_frame_start (h ) < 0)
cond	311:16	311:38	7	h264_frame_start (h ) < 0
call	311:16	311:34	8	h264_frame_start
arg	311:33	311:34	9	h
water	311:33	0:0	10	h
op	311:36	0:0	8	<
water	311:38	0:0	8	0
stmts	312:16	312:25	7	
return	312:16	312:25	8	-1
op	312:23	0:0	9	-
water	312:24	0:0	9	1
water	313:12	0:0	6	h
op	313:13	0:0	6	->
water	313:15	0:0	6	prev_frame_num
op	313:29	0:0	6	++
water	313:31	0:0	6	;
water	314:12	0:0	6	h
op	314:13	0:0	6	->
water	314:15	0:0	6	prev_frame_num
op	314:30	0:0	6	%=
water	314:33	0:0	6	1
op	314:35	0:0	6	<<
water	314:38	0:0	6	h
op	314:39	0:0	6	->
water	314:41	0:0	6	sps
op	314:44	0:0	6	.
water	314:45	0:0	6	log2_max_frame_num
water	314:63	0:0	6	;
water	315:12	0:0	6	h
op	315:13	0:0	6	->
water	315:15	0:0	6	cur_pic_ptr
op	315:26	0:0	6	->
water	315:28	0:0	6	frame_num
op	315:38	0:0	6	=
water	315:40	0:0	6	h
op	315:41	0:0	6	->
water	315:43	0:0	6	prev_frame_num
water	315:57	0:0	6	;
call	316:12	316:69	6	ff_thread_report_progress
arg	316:38	316:57	7	&h->cur_pic_ptr->tf
op	316:38	0:0	8	&
water	316:39	0:0	8	h
op	316:40	0:0	8	->
water	316:42	0:0	8	cur_pic_ptr
op	316:53	0:0	8	->
water	316:55	0:0	8	tf
arg	316:59	316:66	7	INT_MAX
water	316:59	0:0	8	INT_MAX
arg	316:68	316:69	7	0
water	316:68	0:0	8	0
water	316:70	0:0	6	;
call	317:12	317:69	6	ff_thread_report_progress
arg	317:38	317:57	7	&h->cur_pic_ptr->tf
op	317:38	0:0	8	&
water	317:39	0:0	8	h
op	317:40	0:0	8	->
water	317:42	0:0	8	cur_pic_ptr
op	317:53	0:0	8	->
water	317:55	0:0	8	tf
arg	317:59	317:66	7	INT_MAX
water	317:59	0:0	8	INT_MAX
arg	317:68	317:69	7	1
water	317:68	0:0	8	1
water	317:70	0:0	6	;
if	318:12	320:26	6	(( ret =ff_generate_sliding_window_mmcos (h ,1 ) ) < 0 && h -> avctx -> err_recognition & AV_EF_EXPLODE)
cond	318:16	319:44	7	( ret =ff_generate_sliding_window_mmcos (h ,1 ) ) < 0 && h -> avctx -> err_recognition & AV_EF_EXPLODE
water	318:16	0:0	8	(
water	318:17	0:0	8	ret
op	318:21	0:0	8	=
call	318:23	318:60	8	ff_generate_sliding_window_mmcos
arg	318:56	318:57	9	h
water	318:56	0:0	10	h
arg	318:59	318:60	9	1
water	318:59	0:0	10	1
water	318:61	0:0	8	)
op	318:63	0:0	8	<
water	318:65	0:0	8	0
op	318:67	0:0	8	&&
water	319:16	0:0	8	h
op	319:17	0:0	8	->
water	319:19	0:0	8	avctx
op	319:24	0:0	8	->
water	319:26	0:0	8	err_recognition
op	319:42	0:0	8	&
water	319:44	0:0	8	AV_EF_EXPLODE
stmts	320:16	320:26	7	
return	320:16	320:26	8	ret
water	320:23	0:0	9	ret
if	321:12	323:42	6	(ff_h264_execute_ref_pic_marking (h ,h -> mmco ,h -> mmco_index ) < 0 && ( h -> avctx -> err_recognition & AV_EF_EXPLODE ))
cond	321:16	322:58	7	ff_h264_execute_ref_pic_marking (h ,h -> mmco ,h -> mmco_index ) < 0 && ( h -> avctx -> err_recognition & AV_EF_EXPLODE )
call	321:16	321:73	8	ff_h264_execute_ref_pic_marking
arg	321:48	321:49	9	h
water	321:48	0:0	10	h
arg	321:51	321:58	9	h->mmco
water	321:51	0:0	10	h
op	321:52	0:0	10	->
water	321:54	0:0	10	mmco
arg	321:60	321:73	9	h->mmco_index
water	321:60	0:0	10	h
op	321:61	0:0	10	->
water	321:63	0:0	10	mmco_index
op	321:75	0:0	8	<
water	321:77	0:0	8	0
op	321:79	0:0	8	&&
water	322:16	0:0	8	(
water	322:17	0:0	8	h
op	322:18	0:0	8	->
water	322:20	0:0	8	avctx
op	322:25	0:0	8	->
water	322:27	0:0	8	err_recognition
op	322:43	0:0	8	&
water	322:45	0:0	8	AV_EF_EXPLODE
water	322:58	0:0	8	)
stmts	323:16	323:42	7	
return	323:16	323:42	8	AVERROR_INVALIDDATA
water	323:23	0:0	9	AVERROR_INVALIDDATA
if	330:12	338:12	6	(h -> short_ref_count)
cond	330:16	330:19	7	h -> short_ref_count
water	330:16	0:0	8	h
op	330:17	0:0	8	->
water	330:19	0:0	8	short_ref_count
stmts	330:36	338:12	7	
water	330:36	0:0	8	{
if	331:16	336:16	8	(prev)
cond	331:20	331:20	9	prev
water	331:20	0:0	10	prev
stmts	331:26	336:16	9	
water	331:26	0:0	10	{
call	332:20	334:88	10	av_image_copy
arg	332:34	332:57	11	h->short_ref[0]->f.data
water	332:34	0:0	12	h
op	332:35	0:0	12	->
water	332:37	0:0	12	short_ref
op	332:46	0:0	12	[
water	332:47	0:0	12	0
op	332:48	0:0	12	]
op	332:49	0:0	12	->
water	332:51	0:0	12	f
op	332:52	0:0	12	.
water	332:53	0:0	12	data
arg	332:59	332:86	11	h->short_ref[0]->f.linesize
water	332:59	0:0	12	h
op	332:60	0:0	12	->
water	332:62	0:0	12	short_ref
op	332:71	0:0	12	[
water	332:72	0:0	12	0
op	332:73	0:0	12	]
op	332:74	0:0	12	->
water	332:76	0:0	12	f
op	332:77	0:0	12	.
water	332:78	0:0	12	linesize
arg	333:34	333:64	11	(constuint8_t**)prev->f.data
water	333:34	0:0	12	(
water	333:35	0:0	12	const
water	333:41	0:0	12	uint8_t
op	333:49	0:0	12	*
op	333:50	0:0	12	*
water	333:51	0:0	12	)
water	333:52	0:0	12	prev
op	333:56	0:0	12	->
water	333:58	0:0	12	f
op	333:59	0:0	12	.
water	333:60	0:0	12	data
arg	333:66	333:82	11	prev->f.linesize
water	333:66	0:0	12	prev
op	333:70	0:0	12	->
water	333:72	0:0	12	f
op	333:73	0:0	12	.
water	333:74	0:0	12	linesize
arg	334:34	334:51	11	h->avctx->pix_fmt
water	334:34	0:0	12	h
op	334:35	0:0	12	->
water	334:37	0:0	12	avctx
op	334:42	0:0	12	->
water	334:44	0:0	12	pix_fmt
arg	334:53	334:69	11	h->mb_width*16
water	334:53	0:0	12	h
op	334:54	0:0	12	->
water	334:56	0:0	12	mb_width
op	334:65	0:0	12	*
water	334:67	0:0	12	16
arg	334:71	334:88	11	h->mb_height*16
water	334:71	0:0	12	h
op	334:72	0:0	12	->
water	334:74	0:0	12	mb_height
op	334:84	0:0	12	*
water	334:86	0:0	12	16
water	334:89	0:0	10	;
water	335:20	0:0	10	h
op	335:21	0:0	10	->
water	335:23	0:0	10	short_ref
op	335:32	0:0	10	[
water	335:33	0:0	10	0
op	335:34	0:0	10	]
op	335:35	0:0	10	->
water	335:37	0:0	10	poc
op	335:41	0:0	10	=
water	335:43	0:0	10	prev
op	335:47	0:0	10	->
water	335:49	0:0	10	poc
op	335:53	0:0	10	+
water	335:55	0:0	10	2
water	335:56	0:0	10	;
water	336:16	0:0	10	}
water	337:16	0:0	8	h
op	337:17	0:0	8	->
water	337:19	0:0	8	short_ref
op	337:28	0:0	8	[
water	337:29	0:0	8	0
op	337:30	0:0	8	]
op	337:31	0:0	8	->
water	337:33	0:0	8	frame_num
op	337:43	0:0	8	=
water	337:45	0:0	8	h
op	337:46	0:0	8	->
water	337:48	0:0	8	prev_frame_num
water	337:62	0:0	8	;
water	338:12	0:0	8	}
water	339:8	0:0	6	}
if	344:8	369:8	4	(h0 -> first_field)
cond	344:12	344:16	5	h0 -> first_field
water	344:12	0:0	6	h0
op	344:14	0:0	6	->
water	344:16	0:0	6	first_field
stmts	344:29	369:8	5	
water	344:29	0:0	6	{
call	345:12	345:34	6	assert
arg	345:19	345:34	7	h0->cur_pic_ptr
water	345:19	0:0	8	h0
op	345:21	0:0	8	->
water	345:23	0:0	8	cur_pic_ptr
water	345:35	0:0	6	;
call	346:12	346:45	6	assert
arg	346:19	346:45	7	h0->cur_pic_ptr->f.data[0]
water	346:19	0:0	8	h0
op	346:21	0:0	8	->
water	346:23	0:0	8	cur_pic_ptr
op	346:34	0:0	8	->
water	346:36	0:0	8	f
op	346:37	0:0	8	.
water	346:38	0:0	8	data
op	346:42	0:0	8	[
water	346:43	0:0	8	0
op	346:44	0:0	8	]
water	346:46	0:0	6	;
call	347:12	347:64	6	assert
arg	347:19	347:64	7	h0->cur_pic_ptr->reference!=DELAYED_PIC_REF
water	347:19	0:0	8	h0
op	347:21	0:0	8	->
water	347:23	0:0	8	cur_pic_ptr
op	347:34	0:0	8	->
water	347:36	0:0	8	reference
op	347:46	0:0	8	!=
water	347:49	0:0	8	DELAYED_PIC_REF
water	347:65	0:0	6	;
if	350:12	355:12	6	(!FIELD_PICTURE (h ) || h -> picture_structure == last_pic_structure)
cond	350:16	350:61	7	!FIELD_PICTURE (h ) || h -> picture_structure == last_pic_structure
op	350:16	0:0	8	!
call	350:17	350:32	8	FIELD_PICTURE
arg	350:31	350:32	9	h
water	350:31	0:0	10	h
op	350:34	0:0	8	||
water	350:37	0:0	8	h
op	350:38	0:0	8	->
water	350:40	0:0	8	picture_structure
op	350:58	0:0	8	==
water	350:61	0:0	8	last_pic_structure
stmts	350:81	355:12	7	
water	350:81	0:0	8	{
water	353:16	0:0	8	h0
op	353:18	0:0	8	->
water	353:20	0:0	8	cur_pic_ptr
op	353:32	0:0	8	=
water	353:34	0:0	8	NULL
water	353:38	0:0	8	;
water	354:16	0:0	8	h0
op	354:18	0:0	8	->
water	354:20	0:0	8	first_field
op	354:32	0:0	8	=
call	354:34	354:49	8	FIELD_PICTURE
arg	354:48	354:49	9	h
water	354:48	0:0	10	h
water	354:50	0:0	8	;
water	355:12	0:0	8	}
else	355:14	368:12	6
stmts	355:19	368:12	7	
water	355:19	0:0	8	{
if	356:16	364:16	8	(h0 -> cur_pic_ptr -> frame_num != h -> frame_num)
cond	356:20	356:53	9	h0 -> cur_pic_ptr -> frame_num != h -> frame_num
water	356:20	0:0	10	h0
op	356:22	0:0	10	->
water	356:24	0:0	10	cur_pic_ptr
op	356:35	0:0	10	->
water	356:37	0:0	10	frame_num
op	356:47	0:0	10	!=
water	356:50	0:0	10	h
op	356:51	0:0	10	->
water	356:53	0:0	10	frame_num
stmts	356:64	364:16	9	
water	356:64	0:0	10	{
call	357:20	358:86	10	ff_thread_report_progress
arg	357:46	357:66	11	&h0->cur_pic_ptr->tf
op	357:46	0:0	12	&
water	357:47	0:0	12	h0
op	357:49	0:0	12	->
water	357:51	0:0	12	cur_pic_ptr
op	357:62	0:0	12	->
water	357:64	0:0	12	tf
arg	357:68	357:75	11	INT_MAX
water	357:68	0:0	12	INT_MAX
arg	358:46	358:86	11	h0->picture_structure==PICT_BOTTOM_FIELD
water	358:46	0:0	12	h0
op	358:48	0:0	12	->
water	358:50	0:0	12	picture_structure
op	358:67	0:0	12	==
water	358:69	0:0	12	PICT_BOTTOM_FIELD
water	358:87	0:0	10	;
water	362:20	0:0	10	h0
op	362:22	0:0	10	->
water	362:24	0:0	10	first_field
op	362:36	0:0	10	=
water	362:38	0:0	10	1
water	362:39	0:0	10	;
water	363:20	0:0	10	h0
op	363:22	0:0	10	->
water	363:24	0:0	10	cur_pic_ptr
op	363:36	0:0	10	=
water	363:38	0:0	10	NULL
water	363:42	0:0	10	;
water	364:16	0:0	10	}
else	364:18	367:16	8
stmts	364:23	367:16	9	
water	364:23	0:0	10	{
water	366:20	0:0	10	h0
op	366:22	0:0	10	->
water	366:24	0:0	10	first_field
op	366:36	0:0	10	=
water	366:38	0:0	10	0
water	366:39	0:0	10	;
water	367:16	0:0	10	}
water	368:12	0:0	8	}
water	369:8	0:0	6	}
else	369:10	372:8	4
stmts	369:15	372:8	5	
water	369:15	0:0	6	{
water	371:12	0:0	6	h0
op	371:14	0:0	6	->
water	371:16	0:0	6	first_field
op	371:28	0:0	6	=
call	371:30	371:45	6	FIELD_PICTURE
arg	371:44	371:45	7	h
water	371:44	0:0	8	h
water	371:46	0:0	6	;
water	372:8	0:0	6	}
if	374:8	379:8	4	(!FIELD_PICTURE (h ) || h0 -> first_field)
cond	374:12	374:37	5	!FIELD_PICTURE (h ) || h0 -> first_field
op	374:12	0:0	6	!
call	374:13	374:28	6	FIELD_PICTURE
arg	374:27	374:28	7	h
water	374:27	0:0	8	h
op	374:30	0:0	6	||
water	374:33	0:0	6	h0
op	374:35	0:0	6	->
water	374:37	0:0	6	first_field
stmts	374:50	379:8	5	
water	374:50	0:0	6	{
if	375:12	378:12	6	(h264_frame_start (h ) < 0)
cond	375:16	375:38	7	h264_frame_start (h ) < 0
call	375:16	375:34	8	h264_frame_start
arg	375:33	375:34	9	h
water	375:33	0:0	10	h
op	375:36	0:0	8	<
water	375:38	0:0	8	0
stmts	375:41	378:12	7	
water	375:41	0:0	8	{
water	376:16	0:0	8	h0
op	376:18	0:0	8	->
water	376:20	0:0	8	first_field
op	376:32	0:0	8	=
water	376:34	0:0	8	0
water	376:35	0:0	8	;
return	377:16	377:25	8	-1
op	377:23	0:0	9	-
water	377:24	0:0	9	1
water	378:12	0:0	8	}
water	379:8	0:0	6	}
else	379:10	381:8	4
stmts	379:15	381:8	5	
water	379:15	0:0	6	{
call	380:12	380:40	6	release_unused_pictures
arg	380:36	380:37	7	h
water	380:36	0:0	8	h
arg	380:39	380:40	7	0
water	380:39	0:0	8	0
water	380:41	0:0	6	;
water	381:8	0:0	6	}
if	384:8	387:8	4	(FIELD_PICTURE (h ))
cond	384:12	384:27	5	FIELD_PICTURE (h )
call	384:12	384:27	6	FIELD_PICTURE
arg	384:26	384:27	7	h
water	384:26	0:0	8	h
stmts	384:30	387:8	5	
water	384:30	0:0	6	{
for	385:12	386:123	6	(i = ( h -> picture_structure == PICT_BOTTOM_FIELD ) ;i < h -> mb_height;i ++)
forinit	385:16	385:63	7	i = ( h -> picture_structure == PICT_BOTTOM_FIELD ) ;
water	385:16	0:0	8	i
op	385:18	0:0	8	=
water	385:20	0:0	8	(
water	385:21	0:0	8	h
op	385:22	0:0	8	->
water	385:24	0:0	8	picture_structure
op	385:42	0:0	8	==
water	385:45	0:0	8	PICT_BOTTOM_FIELD
water	385:62	0:0	8	)
water	385:63	0:0	8	;
cond	385:65	385:70	7	i < h -> mb_height
water	385:65	0:0	8	i
op	385:66	0:0	8	<
water	385:67	0:0	8	h
op	385:68	0:0	8	->
water	385:70	0:0	8	mb_height
forexpr	385:81	385:82	7	i ++
water	385:81	0:0	8	i
op	385:82	0:0	8	++
stmts	386:16	386:123	7	
call	386:16	386:122	8	memset
arg	386:23	386:54	9	h->slice_table+i*h->mb_stride
water	386:23	0:0	10	h
op	386:24	0:0	10	->
water	386:26	0:0	10	slice_table
op	386:38	0:0	10	+
water	386:40	0:0	10	i
op	386:41	0:0	10	*
water	386:42	0:0	10	h
op	386:43	0:0	10	->
water	386:45	0:0	10	mb_stride
arg	386:56	386:58	9	-1
op	386:56	0:0	10	-
water	386:57	0:0	10	1
arg	386:60	386:122	9	(h->mb_stride-(i+1==h->mb_height))*sizeof(*h->slice_table)
water	386:60	0:0	10	(
water	386:61	0:0	10	h
op	386:62	0:0	10	->
water	386:64	0:0	10	mb_stride
op	386:74	0:0	10	-
water	386:76	0:0	10	(
water	386:77	0:0	10	i
op	386:78	0:0	10	+
water	386:79	0:0	10	1
op	386:80	0:0	10	==
water	386:82	0:0	10	h
op	386:83	0:0	10	->
water	386:85	0:0	10	mb_height
water	386:94	0:0	10	)
water	386:95	0:0	10	)
op	386:97	0:0	10	*
op	386:99	0:0	10	sizeof
water	386:105	0:0	10	(
op	386:106	0:0	10	*
water	386:107	0:0	10	h
op	386:108	0:0	10	->
water	386:110	0:0	10	slice_table
water	386:121	0:0	10	)
water	386:123	0:0	8	;
water	387:8	0:0	6	}
else	387:10	390:8	4
stmts	387:15	390:8	5	
water	387:15	0:0	6	{
call	388:12	389:75	6	memset
arg	388:19	388:33	7	h->slice_table
water	388:19	0:0	8	h
op	388:20	0:0	8	->
water	388:22	0:0	8	slice_table
arg	388:35	388:37	7	-1
op	388:35	0:0	8	-
water	388:36	0:0	8	1
arg	389:16	389:75	7	(h->mb_height*h->mb_stride-1)*sizeof(*h->slice_table)
water	389:16	0:0	8	(
water	389:17	0:0	8	h
op	389:18	0:0	8	->
water	389:20	0:0	8	mb_height
op	389:30	0:0	8	*
water	389:32	0:0	8	h
op	389:33	0:0	8	->
water	389:35	0:0	8	mb_stride
op	389:45	0:0	8	-
water	389:47	0:0	8	1
water	389:48	0:0	8	)
op	389:50	0:0	8	*
op	389:52	0:0	8	sizeof
water	389:58	0:0	8	(
op	389:59	0:0	8	*
water	389:60	0:0	8	h
op	389:61	0:0	8	->
water	389:63	0:0	8	slice_table
water	389:74	0:0	8	)
water	389:76	0:0	6	;
water	390:8	0:0	6	}
water	391:8	0:0	4	h0
op	391:10	0:0	4	->
water	391:12	0:0	4	last_slice_type
op	391:28	0:0	4	=
op	391:30	0:0	4	-
water	391:31	0:0	4	1
water	391:32	0:0	4	;
water	392:4	0:0	4	}
if	393:4	394:18	2	(h != h0 && ( ret =clone_slice (h ,h0 ) ) < 0)
cond	393:8	393:48	3	h != h0 && ( ret =clone_slice (h ,h0 ) ) < 0
water	393:8	0:0	4	h
op	393:10	0:0	4	!=
water	393:13	0:0	4	h0
op	393:16	0:0	4	&&
water	393:19	0:0	4	(
water	393:20	0:0	4	ret
op	393:24	0:0	4	=
call	393:26	393:43	4	clone_slice
arg	393:38	393:39	5	h
water	393:38	0:0	6	h
arg	393:41	393:43	5	h0
water	393:41	0:0	6	h0
water	393:44	0:0	4	)
op	393:46	0:0	4	<
water	393:48	0:0	4	0
stmts	394:8	394:18	3	
return	394:8	394:18	4	ret
water	394:15	0:0	5	ret
for	398:4	403:8	2	(i = 0 ;i < h -> slice_context_count;i ++)
forinit	398:9	398:14	3	i = 0 ;
water	398:9	0:0	4	i
op	398:11	0:0	4	=
water	398:13	0:0	4	0
water	398:14	0:0	4	;
cond	398:16	398:23	3	i < h -> slice_context_count
water	398:16	0:0	4	i
op	398:18	0:0	4	<
water	398:20	0:0	4	h
op	398:21	0:0	4	->
water	398:23	0:0	4	slice_context_count
forexpr	398:44	398:45	3	i ++
water	398:44	0:0	4	i
op	398:45	0:0	4	++
stmts	399:8	403:8	3	
if	399:8	403:8	4	(h -> thread_context [ i ])
cond	399:12	399:31	5	h -> thread_context [ i ]
water	399:12	0:0	6	h
op	399:13	0:0	6	->
water	399:15	0:0	6	thread_context
op	399:29	0:0	6	[
water	399:30	0:0	6	i
op	399:31	0:0	6	]
stmts	399:34	403:8	5	
water	399:34	0:0	6	{
water	400:12	0:0	6	ret
op	400:16	0:0	6	=
call	400:18	400:73	6	alloc_scratch_buffers
arg	400:40	400:60	7	h->thread_context[i]
water	400:40	0:0	8	h
op	400:41	0:0	8	->
water	400:43	0:0	8	thread_context
op	400:57	0:0	8	[
water	400:58	0:0	8	i
op	400:59	0:0	8	]
arg	400:62	400:73	7	h->linesize
water	400:62	0:0	8	h
op	400:63	0:0	8	->
water	400:65	0:0	8	linesize
water	400:74	0:0	6	;
if	401:12	402:26	6	(ret < 0)
cond	401:16	401:22	7	ret < 0
water	401:16	0:0	8	ret
op	401:20	0:0	8	<
water	401:22	0:0	8	0
stmts	402:16	402:26	7	
return	402:16	402:26	8	ret
water	402:23	0:0	9	ret
water	403:8	0:0	6	}
water	405:4	0:0	2	h
op	405:5	0:0	2	->
water	405:7	0:0	2	cur_pic_ptr
op	405:18	0:0	2	->
water	405:20	0:0	2	frame_num
op	405:30	0:0	2	=
water	405:32	0:0	2	h
op	405:33	0:0	2	->
water	405:35	0:0	2	frame_num
water	405:44	0:0	2	;
call	407:4	407:54	2	av_assert1
arg	407:15	407:54	3	h->mb_num==h->mb_width*h->mb_height
water	407:15	0:0	4	h
op	407:16	0:0	4	->
water	407:18	0:0	4	mb_num
op	407:25	0:0	4	==
water	407:28	0:0	4	h
op	407:29	0:0	4	->
water	407:31	0:0	4	mb_width
op	407:40	0:0	4	*
water	407:42	0:0	4	h
op	407:43	0:0	4	->
water	407:45	0:0	4	mb_height
water	407:55	0:0	2	;
if	408:4	412:4	2	(first_mb_in_slice <<FIELD_OR_MBAFF_PICTURE (h ) >= h -> mb_num || first_mb_in_slice >= h -> mb_num)
cond	408:8	409:32	3	first_mb_in_slice <<FIELD_OR_MBAFF_PICTURE (h ) >= h -> mb_num || first_mb_in_slice >= h -> mb_num
water	408:8	0:0	4	first_mb_in_slice
op	408:26	0:0	4	<<
call	408:29	408:53	4	FIELD_OR_MBAFF_PICTURE
arg	408:52	408:53	5	h
water	408:52	0:0	6	h
op	408:55	0:0	4	>=
water	408:58	0:0	4	h
op	408:59	0:0	4	->
water	408:61	0:0	4	mb_num
op	408:68	0:0	4	||
water	409:8	0:0	4	first_mb_in_slice
op	409:26	0:0	4	>=
water	409:29	0:0	4	h
op	409:30	0:0	4	->
water	409:32	0:0	4	mb_num
stmts	409:40	412:4	3	
water	409:40	0:0	4	{
call	410:8	410:69	4	av_log
arg	410:15	410:23	5	h->avctx
water	410:15	0:0	6	h
op	410:16	0:0	6	->
water	410:18	0:0	6	avctx
arg	410:25	410:37	5	AV_LOG_ERROR
water	410:25	0:0	6	AV_LOG_ERROR
arg	410:39	410:69	5	"first_mb_in_slice overflow\n"
water	410:39	0:0	6	"first_mb_in_slice overflow\n"
water	410:70	0:0	4	;
return	411:8	411:17	4	-1
op	411:15	0:0	5	-
water	411:16	0:0	5	1
water	412:4	0:0	4	}
water	413:4	0:0	2	h
op	413:5	0:0	2	->
water	413:7	0:0	2	resync_mb_x
op	413:19	0:0	2	=
water	413:21	0:0	2	h
op	413:22	0:0	2	->
water	413:24	0:0	2	mb_x
op	413:29	0:0	2	=
water	413:32	0:0	2	first_mb_in_slice
op	413:50	0:0	2	%
water	413:52	0:0	2	h
op	413:53	0:0	2	->
water	413:55	0:0	2	mb_width
water	413:63	0:0	2	;
water	414:4	0:0	2	h
op	414:5	0:0	2	->
water	414:7	0:0	2	resync_mb_y
op	414:19	0:0	2	=
water	414:21	0:0	2	h
op	414:22	0:0	2	->
water	414:24	0:0	2	mb_y
op	414:29	0:0	2	=
water	414:31	0:0	2	(
water	414:32	0:0	2	first_mb_in_slice
op	414:50	0:0	2	/
water	414:52	0:0	2	h
op	414:53	0:0	2	->
water	414:55	0:0	2	mb_width
water	414:63	0:0	2	)
op	414:65	0:0	2	<<
call	414:68	414:92	2	FIELD_OR_MBAFF_PICTURE
arg	414:91	414:92	3	h
water	414:91	0:0	4	h
water	414:93	0:0	2	;
if	415:4	416:46	2	(h -> picture_structure == PICT_BOTTOM_FIELD)
cond	415:8	415:32	3	h -> picture_structure == PICT_BOTTOM_FIELD
water	415:8	0:0	4	h
op	415:9	0:0	4	->
water	415:11	0:0	4	picture_structure
op	415:29	0:0	4	==
water	415:32	0:0	4	PICT_BOTTOM_FIELD
stmts	416:8	416:46	3	
water	416:8	0:0	4	h
op	416:9	0:0	4	->
water	416:11	0:0	4	resync_mb_y
op	416:23	0:0	4	=
water	416:25	0:0	4	h
op	416:26	0:0	4	->
water	416:28	0:0	4	mb_y
op	416:33	0:0	4	=
water	416:35	0:0	4	h
op	416:36	0:0	4	->
water	416:38	0:0	4	mb_y
op	416:43	0:0	4	+
water	416:45	0:0	4	1
water	416:46	0:0	4	;
call	417:4	417:37	2	av_assert1
arg	417:15	417:37	3	h->mb_y<h->mb_height
water	417:15	0:0	4	h
op	417:16	0:0	4	->
water	417:18	0:0	4	mb_y
op	417:23	0:0	4	<
water	417:25	0:0	4	h
op	417:26	0:0	4	->
water	417:28	0:0	4	mb_height
water	417:38	0:0	2	;
if	419:4	422:4	2	(h -> picture_structure == PICT_FRAME)
cond	419:8	419:32	3	h -> picture_structure == PICT_FRAME
water	419:8	0:0	4	h
op	419:9	0:0	4	->
water	419:11	0:0	4	picture_structure
op	419:29	0:0	4	==
water	419:32	0:0	4	PICT_FRAME
stmts	419:44	422:4	3	
water	419:44	0:0	4	{
water	420:8	0:0	4	h
op	420:9	0:0	4	->
water	420:11	0:0	4	curr_pic_num
op	420:24	0:0	4	=
water	420:26	0:0	4	h
op	420:27	0:0	4	->
water	420:29	0:0	4	frame_num
water	420:38	0:0	4	;
water	421:8	0:0	4	h
op	421:9	0:0	4	->
water	421:11	0:0	4	max_pic_num
op	421:24	0:0	4	=
water	421:26	0:0	4	1
op	421:28	0:0	4	<<
water	421:31	0:0	4	h
op	421:32	0:0	4	->
water	421:34	0:0	4	sps
op	421:37	0:0	4	.
water	421:38	0:0	4	log2_max_frame_num
water	421:56	0:0	4	;
water	422:4	0:0	4	}
else	422:6	425:4	2
stmts	422:11	425:4	3	
water	422:11	0:0	4	{
water	423:8	0:0	4	h
op	423:9	0:0	4	->
water	423:11	0:0	4	curr_pic_num
op	423:24	0:0	4	=
water	423:26	0:0	4	2
op	423:28	0:0	4	*
water	423:30	0:0	4	h
op	423:31	0:0	4	->
water	423:33	0:0	4	frame_num
op	423:43	0:0	4	+
water	423:45	0:0	4	1
water	423:46	0:0	4	;
water	424:8	0:0	4	h
op	424:9	0:0	4	->
water	424:11	0:0	4	max_pic_num
op	424:24	0:0	4	=
water	424:26	0:0	4	1
op	424:28	0:0	4	<<
water	424:31	0:0	4	(
water	424:32	0:0	4	h
op	424:33	0:0	4	->
water	424:35	0:0	4	sps
op	424:38	0:0	4	.
water	424:39	0:0	4	log2_max_frame_num
op	424:58	0:0	4	+
water	424:60	0:0	4	1
water	424:61	0:0	4	)
water	424:62	0:0	4	;
water	425:4	0:0	4	}
if	427:4	428:29	2	(h -> nal_unit_type == NAL_IDR_SLICE)
cond	427:8	427:28	3	h -> nal_unit_type == NAL_IDR_SLICE
water	427:8	0:0	4	h
op	427:9	0:0	4	->
water	427:11	0:0	4	nal_unit_type
op	427:25	0:0	4	==
water	427:28	0:0	4	NAL_IDR_SLICE
stmts	428:8	428:29	3	
call	428:8	428:28	4	get_ue_golomb
arg	428:22	428:28	5	&h->gb
op	428:22	0:0	6	&
water	428:23	0:0	6	h
op	428:24	0:0	6	->
water	428:26	0:0	6	gb
water	428:29	0:0	4	;
if	430:4	435:4	2	(h -> sps . poc_type == 0)
cond	430:8	430:27	3	h -> sps . poc_type == 0
water	430:8	0:0	4	h
op	430:9	0:0	4	->
water	430:11	0:0	4	sps
op	430:14	0:0	4	.
water	430:15	0:0	4	poc_type
op	430:24	0:0	4	==
water	430:27	0:0	4	0
stmts	430:30	435:4	3	
water	430:30	0:0	4	{
water	431:8	0:0	4	h
op	431:9	0:0	4	->
water	431:11	0:0	4	poc_lsb
op	431:19	0:0	4	=
call	431:21	431:61	4	get_bits
arg	431:30	431:36	5	&h->gb
op	431:30	0:0	6	&
water	431:31	0:0	6	h
op	431:32	0:0	6	->
water	431:34	0:0	6	gb
arg	431:38	431:61	5	h->sps.log2_max_poc_lsb
water	431:38	0:0	6	h
op	431:39	0:0	6	->
water	431:41	0:0	6	sps
op	431:44	0:0	6	.
water	431:45	0:0	6	log2_max_poc_lsb
water	431:62	0:0	4	;
if	433:8	434:55	4	(h -> pps . pic_order_present == 1 && h -> picture_structure == PICT_FRAME)
cond	433:12	433:69	5	h -> pps . pic_order_present == 1 && h -> picture_structure == PICT_FRAME
water	433:12	0:0	6	h
op	433:13	0:0	6	->
water	433:15	0:0	6	pps
op	433:18	0:0	6	.
water	433:19	0:0	6	pic_order_present
op	433:37	0:0	6	==
water	433:40	0:0	6	1
op	433:42	0:0	6	&&
water	433:45	0:0	6	h
op	433:46	0:0	6	->
water	433:48	0:0	6	picture_structure
op	433:66	0:0	6	==
water	433:69	0:0	6	PICT_FRAME
stmts	434:12	434:55	5	
water	434:12	0:0	6	h
op	434:13	0:0	6	->
water	434:15	0:0	6	delta_poc_bottom
op	434:32	0:0	6	=
call	434:34	434:54	6	get_se_golomb
arg	434:48	434:54	7	&h->gb
op	434:48	0:0	8	&
water	434:49	0:0	8	h
op	434:50	0:0	8	->
water	434:52	0:0	8	gb
water	434:55	0:0	6	;
water	435:4	0:0	4	}
if	437:4	442:4	2	(h -> sps . poc_type == 1 && ! h -> sps . delta_pic_order_always_zero_flag)
cond	437:8	437:40	3	h -> sps . poc_type == 1 && ! h -> sps . delta_pic_order_always_zero_flag
water	437:8	0:0	4	h
op	437:9	0:0	4	->
water	437:11	0:0	4	sps
op	437:14	0:0	4	.
water	437:15	0:0	4	poc_type
op	437:24	0:0	4	==
water	437:27	0:0	4	1
op	437:29	0:0	4	&&
op	437:32	0:0	4	!
water	437:33	0:0	4	h
op	437:34	0:0	4	->
water	437:36	0:0	4	sps
op	437:39	0:0	4	.
water	437:40	0:0	4	delta_pic_order_always_zero_flag
stmts	437:74	442:4	3	
water	437:74	0:0	4	{
water	438:8	0:0	4	h
op	438:9	0:0	4	->
water	438:11	0:0	4	delta_poc
op	438:20	0:0	4	[
water	438:21	0:0	4	0
op	438:22	0:0	4	]
op	438:24	0:0	4	=
call	438:26	438:46	4	get_se_golomb
arg	438:40	438:46	5	&h->gb
op	438:40	0:0	6	&
water	438:41	0:0	6	h
op	438:42	0:0	6	->
water	438:44	0:0	6	gb
water	438:47	0:0	4	;
if	440:8	441:51	4	(h -> pps . pic_order_present == 1 && h -> picture_structure == PICT_FRAME)
cond	440:12	440:69	5	h -> pps . pic_order_present == 1 && h -> picture_structure == PICT_FRAME
water	440:12	0:0	6	h
op	440:13	0:0	6	->
water	440:15	0:0	6	pps
op	440:18	0:0	6	.
water	440:19	0:0	6	pic_order_present
op	440:37	0:0	6	==
water	440:40	0:0	6	1
op	440:42	0:0	6	&&
water	440:45	0:0	6	h
op	440:46	0:0	6	->
water	440:48	0:0	6	picture_structure
op	440:66	0:0	6	==
water	440:69	0:0	6	PICT_FRAME
stmts	441:12	441:51	5	
water	441:12	0:0	6	h
op	441:13	0:0	6	->
water	441:15	0:0	6	delta_poc
op	441:24	0:0	6	[
water	441:25	0:0	6	1
op	441:26	0:0	6	]
op	441:28	0:0	6	=
call	441:30	441:50	6	get_se_golomb
arg	441:44	441:50	7	&h->gb
op	441:44	0:0	8	&
water	441:45	0:0	8	h
op	441:46	0:0	8	->
water	441:48	0:0	8	gb
water	441:51	0:0	6	;
water	442:4	0:0	4	}
call	444:4	444:66	2	ff_init_poc
arg	444:16	444:17	3	h
water	444:16	0:0	4	h
arg	444:19	444:44	3	h->cur_pic_ptr->field_poc
water	444:19	0:0	4	h
op	444:20	0:0	4	->
water	444:22	0:0	4	cur_pic_ptr
op	444:33	0:0	4	->
water	444:35	0:0	4	field_poc
arg	444:46	444:66	3	&h->cur_pic_ptr->poc
op	444:46	0:0	4	&
water	444:47	0:0	4	h
op	444:48	0:0	4	->
water	444:50	0:0	4	cur_pic_ptr
op	444:61	0:0	4	->
water	444:63	0:0	4	poc
water	444:67	0:0	2	;
if	446:4	447:54	2	(h -> pps . redundant_pic_cnt_present)
cond	446:8	446:15	3	h -> pps . redundant_pic_cnt_present
water	446:8	0:0	4	h
op	446:9	0:0	4	->
water	446:11	0:0	4	pps
op	446:14	0:0	4	.
water	446:15	0:0	4	redundant_pic_cnt_present
stmts	447:8	447:54	3	
water	447:8	0:0	4	h
op	447:9	0:0	4	->
water	447:11	0:0	4	redundant_pic_count
op	447:31	0:0	4	=
call	447:33	447:53	4	get_ue_golomb
arg	447:47	447:53	5	&h->gb
op	447:47	0:0	6	&
water	447:48	0:0	6	h
op	447:49	0:0	6	->
water	447:51	0:0	6	gb
water	447:54	0:0	4	;
water	450:4	0:0	2	h
op	450:5	0:0	2	->
water	450:7	0:0	2	ref_count
op	450:16	0:0	2	[
water	450:17	0:0	2	0
op	450:18	0:0	2	]
op	450:20	0:0	2	=
water	450:22	0:0	2	h
op	450:23	0:0	2	->
water	450:25	0:0	2	pps
op	450:28	0:0	2	.
water	450:29	0:0	2	ref_count
op	450:38	0:0	2	[
water	450:39	0:0	2	0
op	450:40	0:0	2	]
water	450:41	0:0	2	;
water	451:4	0:0	2	h
op	451:5	0:0	2	->
water	451:7	0:0	2	ref_count
op	451:16	0:0	2	[
water	451:17	0:0	2	1
op	451:18	0:0	2	]
op	451:20	0:0	2	=
water	451:22	0:0	2	h
op	451:23	0:0	2	->
water	451:25	0:0	2	pps
op	451:28	0:0	2	.
water	451:29	0:0	2	ref_count
op	451:38	0:0	2	[
water	451:39	0:0	2	1
op	451:40	0:0	2	]
water	451:41	0:0	2	;
if	453:4	480:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I)
cond	453:8	453:29	3	h -> slice_type_nos != AV_PICTURE_TYPE_I
water	453:8	0:0	4	h
op	453:9	0:0	4	->
water	453:11	0:0	4	slice_type_nos
op	453:26	0:0	4	!=
water	453:29	0:0	4	AV_PICTURE_TYPE_I
stmts	453:48	480:4	3	
water	453:48	0:0	4	{
water	454:8	0:0	4	unsigned
water	454:17	0:0	4	max
op	454:20	0:0	4	[
water	454:21	0:0	4	2
op	454:22	0:0	4	]
water	454:23	0:0	4	;
water	455:8	0:0	4	max
op	455:11	0:0	4	[
water	455:12	0:0	4	0
op	455:13	0:0	4	]
op	455:15	0:0	4	=
water	455:17	0:0	4	max
op	455:20	0:0	4	[
water	455:21	0:0	4	1
op	455:22	0:0	4	]
op	455:24	0:0	4	=
water	455:26	0:0	4	h
op	455:27	0:0	4	->
water	455:29	0:0	4	picture_structure
op	455:47	0:0	4	==
water	455:50	0:0	4	PICT_FRAME
water	455:61	0:0	4	?
water	455:63	0:0	4	15
water	455:66	0:0	4	:
water	455:68	0:0	4	31
water	455:70	0:0	4	;
if	457:8	458:57	4	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	457:12	457:33	5	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	457:12	0:0	6	h
op	457:13	0:0	6	->
water	457:15	0:0	6	slice_type_nos
op	457:30	0:0	6	==
water	457:33	0:0	6	AV_PICTURE_TYPE_B
stmts	458:12	458:57	5	
water	458:12	0:0	6	h
op	458:13	0:0	6	->
water	458:15	0:0	6	direct_spatial_mv_pred
op	458:38	0:0	6	=
call	458:40	458:56	6	get_bits1
arg	458:50	458:56	7	&h->gb
op	458:50	0:0	8	&
water	458:51	0:0	8	h
op	458:52	0:0	8	->
water	458:54	0:0	8	gb
water	458:57	0:0	6	;
water	459:8	0:0	4	num_ref_idx_active_override_flag
op	459:41	0:0	4	=
call	459:43	459:59	4	get_bits1
arg	459:53	459:59	5	&h->gb
op	459:53	0:0	6	&
water	459:54	0:0	6	h
op	459:55	0:0	6	->
water	459:57	0:0	6	gb
water	459:60	0:0	4	;
if	461:8	468:8	4	(num_ref_idx_active_override_flag)
cond	461:12	461:12	5	num_ref_idx_active_override_flag
water	461:12	0:0	6	num_ref_idx_active_override_flag
stmts	461:46	468:8	5	
water	461:46	0:0	6	{
water	462:12	0:0	6	h
op	462:13	0:0	6	->
water	462:15	0:0	6	ref_count
op	462:24	0:0	6	[
water	462:25	0:0	6	0
op	462:26	0:0	6	]
op	462:28	0:0	6	=
call	462:30	462:50	6	get_ue_golomb
arg	462:44	462:50	7	&h->gb
op	462:44	0:0	8	&
water	462:45	0:0	8	h
op	462:46	0:0	8	->
water	462:48	0:0	8	gb
op	462:52	0:0	6	+
water	462:54	0:0	6	1
water	462:55	0:0	6	;
if	463:12	465:12	6	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	463:16	463:37	7	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	463:16	0:0	8	h
op	463:17	0:0	8	->
water	463:19	0:0	8	slice_type_nos
op	463:34	0:0	8	==
water	463:37	0:0	8	AV_PICTURE_TYPE_B
stmts	463:56	465:12	7	
water	463:56	0:0	8	{
water	464:16	0:0	8	h
op	464:17	0:0	8	->
water	464:19	0:0	8	ref_count
op	464:28	0:0	8	[
water	464:29	0:0	8	1
op	464:30	0:0	8	]
op	464:32	0:0	8	=
call	464:34	464:54	8	get_ue_golomb
arg	464:48	464:54	9	&h->gb
op	464:48	0:0	10	&
water	464:49	0:0	10	h
op	464:50	0:0	10	->
water	464:52	0:0	10	gb
op	464:56	0:0	8	+
water	464:58	0:0	8	1
water	464:59	0:0	8	;
water	465:12	0:0	8	}
else	465:14	467:35	6
stmts	467:16	467:35	7	
water	467:16	0:0	8	h
op	467:17	0:0	8	->
water	467:19	0:0	8	ref_count
op	467:28	0:0	8	[
water	467:29	0:0	8	1
op	467:30	0:0	8	]
op	467:32	0:0	8	=
water	467:34	0:0	8	1
water	467:35	0:0	8	;
water	468:8	0:0	6	}
if	470:8	474:8	4	(h -> ref_count [ 0 ] - 1 > max [ 0 ] || h -> ref_count [ 1 ] - 1 > max [ 1 ])
cond	470:12	470:67	5	h -> ref_count [ 0 ] - 1 > max [ 0 ] || h -> ref_count [ 1 ] - 1 > max [ 1 ]
water	470:12	0:0	6	h
op	470:13	0:0	6	->
water	470:15	0:0	6	ref_count
op	470:24	0:0	6	[
water	470:25	0:0	6	0
op	470:26	0:0	6	]
op	470:27	0:0	6	-
water	470:28	0:0	6	1
op	470:30	0:0	6	>
water	470:32	0:0	6	max
op	470:35	0:0	6	[
water	470:36	0:0	6	0
op	470:37	0:0	6	]
op	470:39	0:0	6	||
water	470:42	0:0	6	h
op	470:43	0:0	6	->
water	470:45	0:0	6	ref_count
op	470:54	0:0	6	[
water	470:55	0:0	6	1
op	470:56	0:0	6	]
op	470:57	0:0	6	-
water	470:58	0:0	6	1
op	470:60	0:0	6	>
water	470:62	0:0	6	max
op	470:65	0:0	6	[
water	470:66	0:0	6	1
op	470:67	0:0	6	]
stmts	470:69	474:8	5	
water	470:69	0:0	6	{
call	471:12	471:138	6	av_log
arg	471:19	471:27	7	h->avctx
water	471:19	0:0	8	h
op	471:20	0:0	8	->
water	471:22	0:0	8	avctx
arg	471:29	471:41	7	AV_LOG_ERROR
water	471:29	0:0	8	AV_LOG_ERROR
arg	471:43	471:84	7	"reference overflow %u > %u or %u > %u\n"
water	471:43	0:0	8	"reference overflow %u > %u or %u > %u\n"
arg	471:86	471:103	7	h->ref_count[0]-1
water	471:86	0:0	8	h
op	471:87	0:0	8	->
water	471:89	0:0	8	ref_count
op	471:98	0:0	8	[
water	471:99	0:0	8	0
op	471:100	0:0	8	]
op	471:101	0:0	8	-
water	471:102	0:0	8	1
arg	471:105	471:111	7	max[0]
water	471:105	0:0	8	max
op	471:108	0:0	8	[
water	471:109	0:0	8	0
op	471:110	0:0	8	]
arg	471:113	471:130	7	h->ref_count[1]-1
water	471:113	0:0	8	h
op	471:114	0:0	8	->
water	471:116	0:0	8	ref_count
op	471:125	0:0	8	[
water	471:126	0:0	8	1
op	471:127	0:0	8	]
op	471:128	0:0	8	-
water	471:129	0:0	8	1
arg	471:132	471:138	7	max[1]
water	471:132	0:0	8	max
op	471:135	0:0	8	[
water	471:136	0:0	8	1
op	471:137	0:0	8	]
water	471:139	0:0	6	;
water	472:12	0:0	6	h
op	472:13	0:0	6	->
water	472:15	0:0	6	ref_count
op	472:24	0:0	6	[
water	472:25	0:0	6	0
op	472:26	0:0	6	]
op	472:28	0:0	6	=
water	472:30	0:0	6	h
op	472:31	0:0	6	->
water	472:33	0:0	6	ref_count
op	472:42	0:0	6	[
water	472:43	0:0	6	1
op	472:44	0:0	6	]
op	472:46	0:0	6	=
water	472:48	0:0	6	0
water	472:49	0:0	6	;
return	473:12	473:38	6	AVERROR_INVALIDDATA
water	473:19	0:0	7	AVERROR_INVALIDDATA
water	474:8	0:0	6	}
if	476:8	477:29	4	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	476:12	476:33	5	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	476:12	0:0	6	h
op	476:13	0:0	6	->
water	476:15	0:0	6	slice_type_nos
op	476:30	0:0	6	==
water	476:33	0:0	6	AV_PICTURE_TYPE_B
stmts	477:12	477:29	5	
water	477:12	0:0	6	h
op	477:13	0:0	6	->
water	477:15	0:0	6	list_count
op	477:26	0:0	6	=
water	477:28	0:0	6	2
water	477:29	0:0	6	;
else	478:8	479:29	4
stmts	479:12	479:29	5	
water	479:12	0:0	6	h
op	479:13	0:0	6	->
water	479:15	0:0	6	list_count
op	479:26	0:0	6	=
water	479:28	0:0	6	1
water	479:29	0:0	6	;
water	480:4	0:0	4	}
else	480:6	483:4	2
stmts	480:11	483:4	3	
water	480:11	0:0	4	{
water	481:8	0:0	4	h
op	481:9	0:0	4	->
water	481:11	0:0	4	list_count
op	481:22	0:0	4	=
water	481:24	0:0	4	0
water	481:25	0:0	4	;
water	482:8	0:0	4	h
op	482:9	0:0	4	->
water	482:11	0:0	4	ref_count
op	482:20	0:0	4	[
water	482:21	0:0	4	0
op	482:22	0:0	4	]
op	482:24	0:0	4	=
water	482:26	0:0	4	h
op	482:27	0:0	4	->
water	482:29	0:0	4	ref_count
op	482:38	0:0	4	[
water	482:39	0:0	4	1
op	482:40	0:0	4	]
op	482:42	0:0	4	=
water	482:44	0:0	4	0
water	482:45	0:0	4	;
water	483:4	0:0	4	}
if	484:4	489:4	2	(slice_type != AV_PICTURE_TYPE_I && ( h0 -> current_slice == 0 || slice_type != h0 -> last_slice_type ||memcmp (h0 -> last_ref_count ,h0 -> ref_count ,sizeof ( h0 -> ref_count ) ) ))
cond	484:8	487:73	3	slice_type != AV_PICTURE_TYPE_I && ( h0 -> current_slice == 0 || slice_type != h0 -> last_slice_type ||memcmp (h0 -> last_ref_count ,h0 -> ref_count ,sizeof ( h0 -> ref_count ) ) )
water	484:8	0:0	4	slice_type
op	484:19	0:0	4	!=
water	484:22	0:0	4	AV_PICTURE_TYPE_I
op	484:40	0:0	4	&&
water	485:8	0:0	4	(
water	485:9	0:0	4	h0
op	485:11	0:0	4	->
water	485:13	0:0	4	current_slice
op	485:27	0:0	4	==
water	485:30	0:0	4	0
op	485:32	0:0	4	||
water	486:9	0:0	4	slice_type
op	486:20	0:0	4	!=
water	486:23	0:0	4	h0
op	486:25	0:0	4	->
water	486:27	0:0	4	last_slice_type
op	486:43	0:0	4	||
call	487:9	487:72	4	memcmp
arg	487:16	487:34	5	h0->last_ref_count
water	487:16	0:0	6	h0
op	487:18	0:0	6	->
water	487:20	0:0	6	last_ref_count
arg	487:36	487:49	5	h0->ref_count
water	487:36	0:0	6	h0
op	487:38	0:0	6	->
water	487:40	0:0	6	ref_count
arg	487:51	487:72	5	sizeof(h0->ref_count)
op	487:51	0:0	6	sizeof
water	487:57	0:0	6	(
water	487:58	0:0	6	h0
op	487:60	0:0	6	->
water	487:62	0:0	6	ref_count
water	487:71	0:0	6	)
water	487:73	0:0	4	)
stmts	487:76	489:4	3	
water	487:76	0:0	4	{
call	488:8	488:39	4	ff_h264_fill_default_ref_list
arg	488:38	488:39	5	h
water	488:38	0:0	6	h
water	488:40	0:0	4	;
water	489:4	0:0	4	}
if	491:4	495:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I &&ff_h264_decode_ref_pic_list_reordering (h ) < 0)
cond	491:8	492:52	3	h -> slice_type_nos != AV_PICTURE_TYPE_I &&ff_h264_decode_ref_pic_list_reordering (h ) < 0
water	491:8	0:0	4	h
op	491:9	0:0	4	->
water	491:11	0:0	4	slice_type_nos
op	491:26	0:0	4	!=
water	491:29	0:0	4	AV_PICTURE_TYPE_I
op	491:47	0:0	4	&&
call	492:8	492:48	4	ff_h264_decode_ref_pic_list_reordering
arg	492:47	492:48	5	h
water	492:47	0:0	6	h
op	492:50	0:0	4	<
water	492:52	0:0	4	0
stmts	492:55	495:4	3	
water	492:55	0:0	4	{
water	493:8	0:0	4	h
op	493:9	0:0	4	->
water	493:11	0:0	4	ref_count
op	493:20	0:0	4	[
water	493:21	0:0	4	1
op	493:22	0:0	4	]
op	493:24	0:0	4	=
water	493:26	0:0	4	h
op	493:27	0:0	4	->
water	493:29	0:0	4	ref_count
op	493:38	0:0	4	[
water	493:39	0:0	4	0
op	493:40	0:0	4	]
op	493:42	0:0	4	=
water	493:44	0:0	4	0
water	493:45	0:0	4	;
return	494:8	494:17	4	-1
op	494:15	0:0	5	-
water	494:16	0:0	5	1
water	495:4	0:0	4	}
if	497:4	500:28	2	(( h -> pps . weighted_pred && h -> slice_type_nos == AV_PICTURE_TYPE_P ) || ( h -> pps . weighted_bipred_idc == 1 && h -> slice_type_nos == AV_PICTURE_TYPE_B ))
cond	497:8	499:47	3	( h -> pps . weighted_pred && h -> slice_type_nos == AV_PICTURE_TYPE_P ) || ( h -> pps . weighted_bipred_idc == 1 && h -> slice_type_nos == AV_PICTURE_TYPE_B )
water	497:8	0:0	4	(
water	497:9	0:0	4	h
op	497:10	0:0	4	->
water	497:12	0:0	4	pps
op	497:15	0:0	4	.
water	497:16	0:0	4	weighted_pred
op	497:30	0:0	4	&&
water	497:33	0:0	4	h
op	497:34	0:0	4	->
water	497:36	0:0	4	slice_type_nos
op	497:51	0:0	4	==
water	497:54	0:0	4	AV_PICTURE_TYPE_P
water	497:71	0:0	4	)
op	497:73	0:0	4	||
water	498:8	0:0	4	(
water	498:9	0:0	4	h
op	498:10	0:0	4	->
water	498:12	0:0	4	pps
op	498:15	0:0	4	.
water	498:16	0:0	4	weighted_bipred_idc
op	498:36	0:0	4	==
water	498:39	0:0	4	1
op	498:41	0:0	4	&&
water	499:9	0:0	4	h
op	499:10	0:0	4	->
water	499:12	0:0	4	slice_type_nos
op	499:27	0:0	4	==
water	499:30	0:0	4	AV_PICTURE_TYPE_B
water	499:47	0:0	4	)
stmts	500:8	500:28	3	
call	500:8	500:27	4	pred_weight_table
arg	500:26	500:27	5	h
water	500:26	0:0	6	h
water	500:28	0:0	4	;
else	501:4	504:4	2
stmts	501:9	504:4	3	
if	501:9	504:4	4	(h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	501:13	502:34	5	h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B
water	501:13	0:0	6	h
op	501:14	0:0	6	->
water	501:16	0:0	6	pps
op	501:19	0:0	6	.
water	501:20	0:0	6	weighted_bipred_idc
op	501:40	0:0	6	==
water	501:43	0:0	6	2
op	501:45	0:0	6	&&
water	502:13	0:0	6	h
op	502:14	0:0	6	->
water	502:16	0:0	6	slice_type_nos
op	502:31	0:0	6	==
water	502:34	0:0	6	AV_PICTURE_TYPE_B
stmts	502:53	504:4	5	
water	502:53	0:0	6	{
call	503:8	503:35	6	implicit_weight_table
arg	503:30	503:31	7	h
water	503:30	0:0	8	h
arg	503:33	503:35	7	-1
op	503:33	0:0	8	-
water	503:34	0:0	8	1
water	503:36	0:0	6	;
water	504:4	0:0	6	}
else	504:6	510:4	2
stmts	504:11	510:4	3	
water	504:11	0:0	4	{
water	505:8	0:0	4	h
op	505:9	0:0	4	->
water	505:11	0:0	4	use_weight
op	505:22	0:0	4	=
water	505:24	0:0	4	0
water	505:25	0:0	4	;
for	506:8	509:8	4	(i = 0 ;i < 2;i ++)
forinit	506:13	506:18	5	i = 0 ;
water	506:13	0:0	6	i
op	506:15	0:0	6	=
water	506:17	0:0	6	0
water	506:18	0:0	6	;
cond	506:20	506:24	5	i < 2
water	506:20	0:0	6	i
op	506:22	0:0	6	<
water	506:24	0:0	6	2
forexpr	506:27	506:28	5	i ++
water	506:27	0:0	6	i
op	506:28	0:0	6	++
stmts	506:32	509:8	5	
water	506:32	0:0	6	{
water	507:12	0:0	6	h
op	507:13	0:0	6	->
water	507:15	0:0	6	luma_weight_flag
op	507:31	0:0	6	[
water	507:32	0:0	6	i
op	507:33	0:0	6	]
op	507:37	0:0	6	=
water	507:39	0:0	6	0
water	507:40	0:0	6	;
water	508:12	0:0	6	h
op	508:13	0:0	6	->
water	508:15	0:0	6	chroma_weight_flag
op	508:33	0:0	6	[
water	508:34	0:0	6	i
op	508:35	0:0	6	]
op	508:37	0:0	6	=
water	508:39	0:0	6	0
water	508:40	0:0	6	;
water	509:8	0:0	6	}
water	510:4	0:0	4	}
if	517:4	522:34	2	(h -> nal_ref_idc &&ff_h264_decode_ref_pic_marking (h0 ,& h -> gb ,! ( h -> avctx -> active_thread_type & FF_THREAD_FRAME ) || h0 -> current_slice == 0 ) < 0 && ( h -> avctx -> err_recognition & AV_EF_EXPLODE ))
cond	517:8	521:50	3	h -> nal_ref_idc &&ff_h264_decode_ref_pic_marking (h0 ,& h -> gb ,! ( h -> avctx -> active_thread_type & FF_THREAD_FRAME ) || h0 -> current_slice == 0 ) < 0 && ( h -> avctx -> err_recognition & AV_EF_EXPLODE )
water	517:8	0:0	4	h
op	517:9	0:0	4	->
water	517:11	0:0	4	nal_ref_idc
op	517:23	0:0	4	&&
call	518:8	520:50	4	ff_h264_decode_ref_pic_marking
arg	518:39	518:41	5	h0
water	518:39	0:0	6	h0
arg	518:43	518:49	5	&h->gb
op	518:43	0:0	6	&
water	518:44	0:0	6	h
op	518:45	0:0	6	->
water	518:47	0:0	6	gb
arg	519:28	520:50	5	!(h->avctx->active_thread_type&FF_THREAD_FRAME)||h0->current_slice==0
op	519:28	0:0	6	!
water	519:29	0:0	6	(
water	519:30	0:0	6	h
op	519:31	0:0	6	->
water	519:33	0:0	6	avctx
op	519:38	0:0	6	->
water	519:40	0:0	6	active_thread_type
op	519:59	0:0	6	&
water	519:61	0:0	6	FF_THREAD_FRAME
water	519:76	0:0	6	)
op	519:78	0:0	6	||
water	520:28	0:0	6	h0
op	520:30	0:0	6	->
water	520:32	0:0	6	current_slice
op	520:46	0:0	6	==
water	520:49	0:0	6	0
op	520:52	0:0	4	<
water	520:54	0:0	4	0
op	520:56	0:0	4	&&
water	521:8	0:0	4	(
water	521:9	0:0	4	h
op	521:10	0:0	4	->
water	521:12	0:0	4	avctx
op	521:17	0:0	4	->
water	521:19	0:0	4	err_recognition
op	521:35	0:0	4	&
water	521:37	0:0	4	AV_EF_EXPLODE
water	521:50	0:0	4	)
stmts	522:8	522:34	3	
return	522:8	522:34	4	AVERROR_INVALIDDATA
water	522:15	0:0	5	AVERROR_INVALIDDATA
if	524:4	531:4	2	(FRAME_MBAFF (h ))
cond	524:8	524:21	3	FRAME_MBAFF (h )
call	524:8	524:21	4	FRAME_MBAFF
arg	524:20	524:21	5	h
water	524:20	0:0	6	h
stmts	524:24	531:4	3	
water	524:24	0:0	4	{
call	525:8	525:37	4	ff_h264_fill_mbaff_ref_list
arg	525:36	525:37	5	h
water	525:36	0:0	6	h
water	525:38	0:0	4	;
if	527:8	530:8	4	(h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	527:12	527:68	5	h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B
water	527:12	0:0	6	h
op	527:13	0:0	6	->
water	527:15	0:0	6	pps
op	527:18	0:0	6	.
water	527:19	0:0	6	weighted_bipred_idc
op	527:39	0:0	6	==
water	527:42	0:0	6	2
op	527:44	0:0	6	&&
water	527:47	0:0	6	h
op	527:48	0:0	6	->
water	527:50	0:0	6	slice_type_nos
op	527:65	0:0	6	==
water	527:68	0:0	6	AV_PICTURE_TYPE_B
stmts	527:87	530:8	5	
water	527:87	0:0	6	{
call	528:12	528:38	6	implicit_weight_table
arg	528:34	528:35	7	h
water	528:34	0:0	8	h
arg	528:37	528:38	7	0
water	528:37	0:0	8	0
water	528:39	0:0	6	;
call	529:12	529:38	6	implicit_weight_table
arg	529:34	529:35	7	h
water	529:34	0:0	8	h
arg	529:37	529:38	7	1
water	529:37	0:0	8	1
water	529:39	0:0	6	;
water	530:8	0:0	6	}
water	531:4	0:0	4	}
if	533:4	534:43	2	(h -> slice_type_nos == AV_PICTURE_TYPE_B && ! h -> direct_spatial_mv_pred)
cond	533:8	533:54	3	h -> slice_type_nos == AV_PICTURE_TYPE_B && ! h -> direct_spatial_mv_pred
water	533:8	0:0	4	h
op	533:9	0:0	4	->
water	533:11	0:0	4	slice_type_nos
op	533:26	0:0	4	==
water	533:29	0:0	4	AV_PICTURE_TYPE_B
op	533:47	0:0	4	&&
op	533:50	0:0	4	!
water	533:51	0:0	4	h
op	533:52	0:0	4	->
water	533:54	0:0	4	direct_spatial_mv_pred
stmts	534:8	534:43	3	
call	534:8	534:42	4	ff_h264_direct_dist_scale_factor
arg	534:41	534:42	5	h
water	534:41	0:0	6	h
water	534:43	0:0	4	;
call	535:4	535:34	2	ff_h264_direct_ref_list_init
arg	535:33	535:34	3	h
water	535:33	0:0	4	h
water	535:35	0:0	2	;
if	537:4	544:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I && h -> pps . cabac)
cond	537:8	537:57	3	h -> slice_type_nos != AV_PICTURE_TYPE_I && h -> pps . cabac
water	537:8	0:0	4	h
op	537:9	0:0	4	->
water	537:11	0:0	4	slice_type_nos
op	537:26	0:0	4	!=
water	537:29	0:0	4	AV_PICTURE_TYPE_I
op	537:47	0:0	4	&&
water	537:50	0:0	4	h
op	537:51	0:0	4	->
water	537:53	0:0	4	pps
op	537:56	0:0	4	.
water	537:57	0:0	4	cabac
stmts	537:64	544:4	3	
water	537:64	0:0	4	{
water	538:8	0:0	4	tmp
op	538:12	0:0	4	=
call	538:14	538:37	4	get_ue_golomb_31
arg	538:31	538:37	5	&h->gb
op	538:31	0:0	6	&
water	538:32	0:0	6	h
op	538:33	0:0	6	->
water	538:35	0:0	6	gb
water	538:38	0:0	4	;
if	539:8	542:8	4	(tmp > 2)
cond	539:12	539:18	5	tmp > 2
water	539:12	0:0	6	tmp
op	539:16	0:0	6	>
water	539:18	0:0	6	2
stmts	539:21	542:8	5	
water	539:21	0:0	6	{
call	540:12	540:70	6	av_log
arg	540:19	540:27	7	h->avctx
water	540:19	0:0	8	h
op	540:20	0:0	8	->
water	540:22	0:0	8	avctx
arg	540:29	540:41	7	AV_LOG_ERROR
water	540:29	0:0	8	AV_LOG_ERROR
arg	540:43	540:70	7	"cabac_init_idc overflow\n"
water	540:43	0:0	8	"cabac_init_idc overflow\n"
water	540:71	0:0	6	;
return	541:12	541:21	6	-1
op	541:19	0:0	7	-
water	541:20	0:0	7	1
water	542:8	0:0	6	}
water	543:8	0:0	4	h
op	543:9	0:0	4	->
water	543:11	0:0	4	cabac_init_idc
op	543:26	0:0	4	=
water	543:28	0:0	4	tmp
water	543:31	0:0	4	;
water	544:4	0:0	4	}
water	546:4	0:0	2	h
op	546:5	0:0	2	->
water	546:7	0:0	2	last_qscale_diff
op	546:24	0:0	2	=
water	546:26	0:0	2	0
water	546:27	0:0	2	;
water	547:4	0:0	2	tmp
op	547:8	0:0	2	=
water	547:10	0:0	2	h
op	547:11	0:0	2	->
water	547:13	0:0	2	pps
op	547:16	0:0	2	.
water	547:17	0:0	2	init_qp
op	547:25	0:0	2	+
call	547:27	547:47	2	get_se_golomb
arg	547:41	547:47	3	&h->gb
op	547:41	0:0	4	&
water	547:42	0:0	4	h
op	547:43	0:0	4	->
water	547:45	0:0	4	gb
water	547:48	0:0	2	;
if	548:4	551:4	2	(tmp > 51 + 6 * ( h -> sps . bit_depth_luma - 8 ))
cond	548:8	548:49	3	tmp > 51 + 6 * ( h -> sps . bit_depth_luma - 8 )
water	548:8	0:0	4	tmp
op	548:12	0:0	4	>
water	548:14	0:0	4	51
op	548:17	0:0	4	+
water	548:19	0:0	4	6
op	548:21	0:0	4	*
water	548:23	0:0	4	(
water	548:24	0:0	4	h
op	548:25	0:0	4	->
water	548:27	0:0	4	sps
op	548:30	0:0	4	.
water	548:31	0:0	4	bit_depth_luma
op	548:46	0:0	4	-
water	548:48	0:0	4	8
water	548:49	0:0	4	)
stmts	548:52	551:4	3	
water	548:52	0:0	4	{
call	549:8	549:66	4	av_log
arg	549:15	549:23	5	h->avctx
water	549:15	0:0	6	h
op	549:16	0:0	6	->
water	549:18	0:0	6	avctx
arg	549:25	549:37	5	AV_LOG_ERROR
water	549:25	0:0	6	AV_LOG_ERROR
arg	549:39	549:61	5	"QP %u out of range\n"
water	549:39	0:0	6	"QP %u out of range\n"
arg	549:63	549:66	5	tmp
water	549:63	0:0	6	tmp
water	549:67	0:0	4	;
return	550:8	550:17	4	-1
op	550:15	0:0	5	-
water	550:16	0:0	5	1
water	551:4	0:0	4	}
water	552:4	0:0	2	h
op	552:5	0:0	2	->
water	552:7	0:0	2	qscale
op	552:20	0:0	2	=
water	552:22	0:0	2	tmp
water	552:25	0:0	2	;
water	553:4	0:0	2	h
op	553:5	0:0	2	->
water	553:7	0:0	2	chroma_qp
op	553:16	0:0	2	[
water	553:17	0:0	2	0
op	553:18	0:0	2	]
op	553:20	0:0	2	=
call	553:22	553:51	2	get_chroma_qp
arg	553:36	553:37	3	h
water	553:36	0:0	4	h
arg	553:39	553:40	3	0
water	553:39	0:0	4	0
arg	553:42	553:51	3	h->qscale
water	553:42	0:0	4	h
op	553:43	0:0	4	->
water	553:45	0:0	4	qscale
water	553:52	0:0	2	;
water	554:4	0:0	2	h
op	554:5	0:0	2	->
water	554:7	0:0	2	chroma_qp
op	554:16	0:0	2	[
water	554:17	0:0	2	1
op	554:18	0:0	2	]
op	554:20	0:0	2	=
call	554:22	554:51	2	get_chroma_qp
arg	554:36	554:37	3	h
water	554:36	0:0	4	h
arg	554:39	554:40	3	1
water	554:39	0:0	4	1
arg	554:42	554:51	3	h->qscale
water	554:42	0:0	4	h
op	554:43	0:0	4	->
water	554:45	0:0	4	qscale
water	554:52	0:0	2	;
if	556:4	557:25	2	(h -> slice_type == AV_PICTURE_TYPE_SP)
cond	556:8	556:25	3	h -> slice_type == AV_PICTURE_TYPE_SP
water	556:8	0:0	4	h
op	556:9	0:0	4	->
water	556:11	0:0	4	slice_type
op	556:22	0:0	4	==
water	556:25	0:0	4	AV_PICTURE_TYPE_SP
stmts	557:8	557:25	3	
call	557:8	557:24	4	get_bits1
arg	557:18	557:24	5	&h->gb
op	557:18	0:0	6	&
water	557:19	0:0	6	h
op	557:20	0:0	6	->
water	557:22	0:0	6	gb
water	557:25	0:0	4	;
if	558:4	560:29	2	(h -> slice_type == AV_PICTURE_TYPE_SP || h -> slice_type == AV_PICTURE_TYPE_SI)
cond	558:8	559:25	3	h -> slice_type == AV_PICTURE_TYPE_SP || h -> slice_type == AV_PICTURE_TYPE_SI
water	558:8	0:0	4	h
op	558:9	0:0	4	->
water	558:11	0:0	4	slice_type
op	558:22	0:0	4	==
water	558:25	0:0	4	AV_PICTURE_TYPE_SP
op	558:44	0:0	4	||
water	559:8	0:0	4	h
op	559:9	0:0	4	->
water	559:11	0:0	4	slice_type
op	559:22	0:0	4	==
water	559:25	0:0	4	AV_PICTURE_TYPE_SI
stmts	560:8	560:29	3	
call	560:8	560:28	4	get_se_golomb
arg	560:22	560:28	5	&h->gb
op	560:22	0:0	6	&
water	560:23	0:0	6	h
op	560:24	0:0	6	->
water	560:26	0:0	6	gb
water	560:29	0:0	4	;
water	562:4	0:0	2	h
op	562:5	0:0	2	->
water	562:7	0:0	2	deblocking_filter
op	562:29	0:0	2	=
water	562:31	0:0	2	1
water	562:32	0:0	2	;
water	563:4	0:0	2	h
op	563:5	0:0	2	->
water	563:7	0:0	2	slice_alpha_c0_offset
op	563:29	0:0	2	=
water	563:31	0:0	2	52
water	563:33	0:0	2	;
water	564:4	0:0	2	h
op	564:5	0:0	2	->
water	564:7	0:0	2	slice_beta_offset
op	564:29	0:0	2	=
water	564:31	0:0	2	52
water	564:33	0:0	2	;
if	565:4	587:4	2	(h -> pps . deblocking_filter_parameters_present)
cond	565:8	565:15	3	h -> pps . deblocking_filter_parameters_present
water	565:8	0:0	4	h
op	565:9	0:0	4	->
water	565:11	0:0	4	pps
op	565:14	0:0	4	.
water	565:15	0:0	4	deblocking_filter_parameters_present
stmts	565:53	587:4	3	
water	565:53	0:0	4	{
water	566:8	0:0	4	tmp
op	566:12	0:0	4	=
call	566:14	566:37	4	get_ue_golomb_31
arg	566:31	566:37	5	&h->gb
op	566:31	0:0	6	&
water	566:32	0:0	6	h
op	566:33	0:0	6	->
water	566:35	0:0	6	gb
water	566:38	0:0	4	;
if	567:8	571:8	4	(tmp > 2)
cond	567:12	567:18	5	tmp > 2
water	567:12	0:0	6	tmp
op	567:16	0:0	6	>
water	567:18	0:0	6	2
stmts	567:21	571:8	5	
water	567:21	0:0	6	{
call	568:12	569:65	6	av_log
arg	568:19	568:27	7	h->avctx
water	568:19	0:0	8	h
op	568:20	0:0	8	->
water	568:22	0:0	8	avctx
arg	568:29	568:41	7	AV_LOG_ERROR
water	568:29	0:0	8	AV_LOG_ERROR
arg	569:19	569:60	7	"deblocking_filter_idc %u out of range\n"
water	569:19	0:0	8	"deblocking_filter_idc %u out of range\n"
arg	569:62	569:65	7	tmp
water	569:62	0:0	8	tmp
water	569:66	0:0	6	;
return	570:12	570:21	6	-1
op	570:19	0:0	7	-
water	570:20	0:0	7	1
water	571:8	0:0	6	}
water	572:8	0:0	4	h
op	572:9	0:0	4	->
water	572:11	0:0	4	deblocking_filter
op	572:29	0:0	4	=
water	572:31	0:0	4	tmp
water	572:34	0:0	4	;
if	573:8	574:37	4	(h -> deblocking_filter < 2)
cond	573:12	573:35	5	h -> deblocking_filter < 2
water	573:12	0:0	6	h
op	573:13	0:0	6	->
water	573:15	0:0	6	deblocking_filter
op	573:33	0:0	6	<
water	573:35	0:0	6	2
stmts	574:12	574:37	5	
water	574:12	0:0	6	h
op	574:13	0:0	6	->
water	574:15	0:0	6	deblocking_filter
op	574:33	0:0	6	^=
water	574:36	0:0	6	1
water	574:37	0:0	6	;
if	576:8	586:8	4	(h -> deblocking_filter)
cond	576:12	576:15	5	h -> deblocking_filter
water	576:12	0:0	6	h
op	576:13	0:0	6	->
water	576:15	0:0	6	deblocking_filter
stmts	576:34	586:8	5	
water	576:34	0:0	6	{
water	577:12	0:0	6	h
op	577:13	0:0	6	->
water	577:15	0:0	6	slice_alpha_c0_offset
op	577:37	0:0	6	+=
call	577:40	577:60	6	get_se_golomb
arg	577:54	577:60	7	&h->gb
op	577:54	0:0	8	&
water	577:55	0:0	8	h
op	577:56	0:0	8	->
water	577:58	0:0	8	gb
op	577:62	0:0	6	<<
water	577:65	0:0	6	1
water	577:66	0:0	6	;
water	578:12	0:0	6	h
op	578:13	0:0	6	->
water	578:15	0:0	6	slice_beta_offset
op	578:37	0:0	6	+=
call	578:40	578:60	6	get_se_golomb
arg	578:54	578:60	7	&h->gb
op	578:54	0:0	8	&
water	578:55	0:0	8	h
op	578:56	0:0	8	->
water	578:58	0:0	8	gb
op	578:62	0:0	6	<<
water	578:65	0:0	6	1
water	578:66	0:0	6	;
if	579:12	585:12	6	(h -> slice_alpha_c0_offset > 104 U || h -> slice_beta_offset > 104 U)
cond	579:16	580:46	7	h -> slice_alpha_c0_offset > 104 U || h -> slice_beta_offset > 104 U
water	579:16	0:0	8	h
op	579:17	0:0	8	->
water	579:19	0:0	8	slice_alpha_c0_offset
op	579:41	0:0	8	>
water	579:43	0:0	8	104
water	579:46	0:0	8	U
op	579:48	0:0	8	||
water	580:16	0:0	8	h
op	580:17	0:0	8	->
water	580:19	0:0	8	slice_beta_offset
op	580:41	0:0	8	>
water	580:43	0:0	8	104
water	580:46	0:0	8	U
stmts	580:49	585:12	7	
water	580:49	0:0	8	{
call	581:16	583:69	8	av_log
arg	581:23	581:31	9	h->avctx
water	581:23	0:0	10	h
op	581:24	0:0	10	->
water	581:26	0:0	10	avctx
arg	581:33	581:45	9	AV_LOG_ERROR
water	581:33	0:0	10	AV_LOG_ERROR
arg	582:23	582:74	9	"deblocking filter parameters %d %d out of range\n"
water	582:23	0:0	10	"deblocking filter parameters %d %d out of range\n"
arg	583:23	583:47	9	h->slice_alpha_c0_offset
water	583:23	0:0	10	h
op	583:24	0:0	10	->
water	583:26	0:0	10	slice_alpha_c0_offset
arg	583:49	583:69	9	h->slice_beta_offset
water	583:49	0:0	10	h
op	583:50	0:0	10	->
water	583:52	0:0	10	slice_beta_offset
water	583:70	0:0	8	;
return	584:16	584:25	8	-1
op	584:23	0:0	9	-
water	584:24	0:0	9	1
water	585:12	0:0	8	}
water	586:8	0:0	6	}
water	587:4	0:0	4	}
if	589:4	596:32	2	(h -> avctx -> skip_loop_filter >= AVDISCARD_ALL || ( h -> avctx -> skip_loop_filter >= AVDISCARD_NONKEY && h -> slice_type_nos != AV_PICTURE_TYPE_I ) || ( h -> avctx -> skip_loop_filter >= AVDISCARD_BIDIR && h -> slice_type_nos == AV_PICTURE_TYPE_B ) || ( h -> avctx -> skip_loop_filter >= AVDISCARD_NONREF && h -> nal_ref_idc == 0 ))
cond	589:8	595:28	3	h -> avctx -> skip_loop_filter >= AVDISCARD_ALL || ( h -> avctx -> skip_loop_filter >= AVDISCARD_NONKEY && h -> slice_type_nos != AV_PICTURE_TYPE_I ) || ( h -> avctx -> skip_loop_filter >= AVDISCARD_BIDIR && h -> slice_type_nos == AV_PICTURE_TYPE_B ) || ( h -> avctx -> skip_loop_filter >= AVDISCARD_NONREF && h -> nal_ref_idc == 0 )
water	589:8	0:0	4	h
op	589:9	0:0	4	->
water	589:11	0:0	4	avctx
op	589:16	0:0	4	->
water	589:18	0:0	4	skip_loop_filter
op	589:35	0:0	4	>=
water	589:38	0:0	4	AVDISCARD_ALL
op	589:52	0:0	4	||
water	590:8	0:0	4	(
water	590:9	0:0	4	h
op	590:10	0:0	4	->
water	590:12	0:0	4	avctx
op	590:17	0:0	4	->
water	590:19	0:0	4	skip_loop_filter
op	590:36	0:0	4	>=
water	590:39	0:0	4	AVDISCARD_NONKEY
op	590:56	0:0	4	&&
water	591:9	0:0	4	h
op	591:10	0:0	4	->
water	591:12	0:0	4	slice_type_nos
op	591:27	0:0	4	!=
water	591:30	0:0	4	AV_PICTURE_TYPE_I
water	591:47	0:0	4	)
op	591:49	0:0	4	||
water	592:8	0:0	4	(
water	592:9	0:0	4	h
op	592:10	0:0	4	->
water	592:12	0:0	4	avctx
op	592:17	0:0	4	->
water	592:19	0:0	4	skip_loop_filter
op	592:36	0:0	4	>=
water	592:39	0:0	4	AVDISCARD_BIDIR
op	592:56	0:0	4	&&
water	593:9	0:0	4	h
op	593:10	0:0	4	->
water	593:12	0:0	4	slice_type_nos
op	593:27	0:0	4	==
water	593:30	0:0	4	AV_PICTURE_TYPE_B
water	593:47	0:0	4	)
op	593:49	0:0	4	||
water	594:8	0:0	4	(
water	594:9	0:0	4	h
op	594:10	0:0	4	->
water	594:12	0:0	4	avctx
op	594:17	0:0	4	->
water	594:19	0:0	4	skip_loop_filter
op	594:36	0:0	4	>=
water	594:39	0:0	4	AVDISCARD_NONREF
op	594:56	0:0	4	&&
water	595:9	0:0	4	h
op	595:10	0:0	4	->
water	595:12	0:0	4	nal_ref_idc
op	595:24	0:0	4	==
water	595:27	0:0	4	0
water	595:28	0:0	4	)
stmts	596:8	596:32	3	
water	596:8	0:0	4	h
op	596:9	0:0	4	->
water	596:11	0:0	4	deblocking_filter
op	596:29	0:0	4	=
water	596:31	0:0	4	0
water	596:32	0:0	4	;
if	598:4	616:4	2	(h -> deblocking_filter == 1 && h0 -> max_contexts > 1)
cond	598:8	598:56	3	h -> deblocking_filter == 1 && h0 -> max_contexts > 1
water	598:8	0:0	4	h
op	598:9	0:0	4	->
water	598:11	0:0	4	deblocking_filter
op	598:29	0:0	4	==
water	598:32	0:0	4	1
op	598:34	0:0	4	&&
water	598:37	0:0	4	h0
op	598:39	0:0	4	->
water	598:41	0:0	4	max_contexts
op	598:54	0:0	4	>
water	598:56	0:0	4	1
stmts	598:59	616:4	3	
water	598:59	0:0	4	{
if	599:8	603:8	4	(h -> avctx -> flags2 & CODEC_FLAG2_FAST)
cond	599:12	599:31	5	h -> avctx -> flags2 & CODEC_FLAG2_FAST
water	599:12	0:0	6	h
op	599:13	0:0	6	->
water	599:15	0:0	6	avctx
op	599:20	0:0	6	->
water	599:22	0:0	6	flags2
op	599:29	0:0	6	&
water	599:31	0:0	6	CODEC_FLAG2_FAST
stmts	599:49	603:8	5	
water	599:49	0:0	6	{
water	602:12	0:0	6	h
op	602:13	0:0	6	->
water	602:15	0:0	6	deblocking_filter
op	602:33	0:0	6	=
water	602:35	0:0	6	2
water	602:36	0:0	6	;
water	603:8	0:0	6	}
else	603:10	615:8	4
stmts	603:15	615:8	5	
water	603:15	0:0	6	{
water	604:12	0:0	6	h0
op	604:14	0:0	6	->
water	604:16	0:0	6	max_contexts
op	604:29	0:0	6	=
water	604:31	0:0	6	1
water	604:32	0:0	6	;
if	605:12	609:12	6	(! h0 -> single_decode_warning)
cond	605:16	605:21	7	! h0 -> single_decode_warning
op	605:16	0:0	8	!
water	605:17	0:0	8	h0
op	605:19	0:0	8	->
water	605:21	0:0	8	single_decode_warning
stmts	605:44	609:12	7	
water	605:44	0:0	8	{
call	606:16	607:105	8	av_log
arg	606:23	606:31	9	h->avctx
water	606:23	0:0	10	h
op	606:24	0:0	10	->
water	606:26	0:0	10	avctx
arg	606:33	606:44	9	AV_LOG_INFO
water	606:33	0:0	10	AV_LOG_INFO
arg	607:23	607:105	9	"Cannot parallelize deblocking type 1, decoding such frames in sequential order\n"
water	607:23	0:0	10	"Cannot parallelize deblocking type 1, decoding such frames in sequential order\n"
water	607:106	0:0	8	;
water	608:16	0:0	8	h0
op	608:18	0:0	8	->
water	608:20	0:0	8	single_decode_warning
op	608:42	0:0	8	=
water	608:44	0:0	8	1
water	608:45	0:0	8	;
water	609:12	0:0	8	}
if	610:12	614:12	6	(h != h0)
cond	610:16	610:21	7	h != h0
water	610:16	0:0	8	h
op	610:18	0:0	8	!=
water	610:21	0:0	8	h0
stmts	610:25	614:12	7	
water	610:25	0:0	8	{
call	611:16	612:60	8	av_log
arg	611:23	611:31	9	h->avctx
water	611:23	0:0	10	h
op	611:24	0:0	10	->
water	611:26	0:0	10	avctx
arg	611:33	611:45	9	AV_LOG_ERROR
water	611:33	0:0	10	AV_LOG_ERROR
arg	612:23	612:60	9	"Deblocking switched inside frame.\n"
water	612:23	0:0	10	"Deblocking switched inside frame.\n"
water	612:61	0:0	8	;
return	613:16	613:24	8	1
water	613:23	0:0	9	1
water	614:12	0:0	8	}
water	615:8	0:0	6	}
water	616:4	0:0	4	}
water	617:4	0:0	2	h
op	617:5	0:0	2	->
water	617:7	0:0	2	qp_thresh
op	617:17	0:0	2	=
water	617:19	0:0	2	15
op	617:22	0:0	2	+
water	617:24	0:0	2	52
op	617:27	0:0	2	-
call	618:19	618:71	2	FFMIN
arg	618:25	618:49	3	h->slice_alpha_c0_offset
water	618:25	0:0	4	h
op	618:26	0:0	4	->
water	618:28	0:0	4	slice_alpha_c0_offset
arg	618:51	618:71	3	h->slice_beta_offset
water	618:51	0:0	4	h
op	618:52	0:0	4	->
water	618:54	0:0	4	slice_beta_offset
op	618:73	0:0	2	-
call	619:19	621:58	2	FFMAX3
arg	619:26	619:27	3	0
water	619:26	0:0	4	0
arg	620:26	620:58	3	h->pps.chroma_qp_index_offset[0]
water	620:26	0:0	4	h
op	620:27	0:0	4	->
water	620:29	0:0	4	pps
op	620:32	0:0	4	.
water	620:33	0:0	4	chroma_qp_index_offset
op	620:55	0:0	4	[
water	620:56	0:0	4	0
op	620:57	0:0	4	]
arg	621:26	621:58	3	h->pps.chroma_qp_index_offset[1]
water	621:26	0:0	4	h
op	621:27	0:0	4	->
water	621:29	0:0	4	pps
op	621:32	0:0	4	.
water	621:33	0:0	4	chroma_qp_index_offset
op	621:55	0:0	4	[
water	621:56	0:0	4	1
op	621:57	0:0	4	]
op	621:60	0:0	2	+
water	622:19	0:0	2	6
op	622:21	0:0	2	*
water	622:23	0:0	2	(
water	622:24	0:0	2	h
op	622:25	0:0	2	->
water	622:27	0:0	2	sps
op	622:30	0:0	2	.
water	622:31	0:0	2	bit_depth_luma
op	622:46	0:0	2	-
water	622:48	0:0	2	8
water	622:49	0:0	2	)
water	622:50	0:0	2	;
water	624:4	0:0	2	h0
op	624:6	0:0	2	->
water	624:8	0:0	2	last_slice_type
op	624:24	0:0	2	=
water	624:26	0:0	2	slice_type
water	624:36	0:0	2	;
call	625:4	625:72	2	memcpy
arg	625:11	625:29	3	h0->last_ref_count
water	625:11	0:0	4	h0
op	625:13	0:0	4	->
water	625:15	0:0	4	last_ref_count
arg	625:31	625:44	3	h0->ref_count
water	625:31	0:0	4	h0
op	625:33	0:0	4	->
water	625:35	0:0	4	ref_count
arg	625:46	625:72	3	sizeof(h0->last_ref_count)
op	625:46	0:0	4	sizeof
water	625:52	0:0	4	(
water	625:53	0:0	4	h0
op	625:55	0:0	4	->
water	625:57	0:0	4	last_ref_count
water	625:71	0:0	4	)
water	625:73	0:0	2	;
water	626:4	0:0	2	h
op	626:5	0:0	2	->
water	626:7	0:0	2	slice_num
op	626:17	0:0	2	=
op	626:19	0:0	2	++
water	626:21	0:0	2	h0
op	626:23	0:0	2	->
water	626:25	0:0	2	current_slice
water	626:38	0:0	2	;
if	628:4	629:70	2	(h -> slice_num)
cond	628:8	628:11	3	h -> slice_num
water	628:8	0:0	4	h
op	628:9	0:0	4	->
water	628:11	0:0	4	slice_num
stmts	629:8	629:70	3	
water	629:8	0:0	4	h0
op	629:10	0:0	4	->
water	629:12	0:0	4	slice_row
op	629:21	0:0	4	[
water	629:22	0:0	4	(
water	629:23	0:0	4	h
op	629:24	0:0	4	->
water	629:26	0:0	4	slice_num
op	629:35	0:0	4	-
water	629:36	0:0	4	1
water	629:37	0:0	4	)
op	629:38	0:0	4	&
water	629:39	0:0	4	(
water	629:40	0:0	4	MAX_SLICES
op	629:50	0:0	4	-
water	629:51	0:0	4	1
water	629:52	0:0	4	)
op	629:53	0:0	4	]
op	629:54	0:0	4	=
water	629:56	0:0	4	h
op	629:57	0:0	4	->
water	629:59	0:0	4	resync_mb_y
water	629:70	0:0	4	;
if	630:4	635:4	2	(h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] + 3 >= h -> resync_mb_y && h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] <= h -> resync_mb_y && h -> slice_num >= MAX_SLICES)
cond	630:11	632:27	3	h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] + 3 >= h -> resync_mb_y && h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] <= h -> resync_mb_y && h -> slice_num >= MAX_SLICES
water	630:11	0:0	4	h0
op	630:13	0:0	4	->
water	630:15	0:0	4	slice_row
op	630:24	0:0	4	[
water	630:25	0:0	4	h
op	630:26	0:0	4	->
water	630:28	0:0	4	slice_num
op	630:37	0:0	4	&
water	630:38	0:0	4	(
water	630:39	0:0	4	MAX_SLICES
op	630:49	0:0	4	-
water	630:50	0:0	4	1
water	630:51	0:0	4	)
op	630:52	0:0	4	]
op	630:54	0:0	4	+
water	630:56	0:0	4	3
op	630:58	0:0	4	>=
water	630:61	0:0	4	h
op	630:62	0:0	4	->
water	630:64	0:0	4	resync_mb_y
op	631:8	0:0	4	&&
water	631:11	0:0	4	h0
op	631:13	0:0	4	->
water	631:15	0:0	4	slice_row
op	631:24	0:0	4	[
water	631:25	0:0	4	h
op	631:26	0:0	4	->
water	631:28	0:0	4	slice_num
op	631:37	0:0	4	&
water	631:38	0:0	4	(
water	631:39	0:0	4	MAX_SLICES
op	631:49	0:0	4	-
water	631:50	0:0	4	1
water	631:51	0:0	4	)
op	631:52	0:0	4	]
op	631:54	0:0	4	<=
water	631:57	0:0	4	h
op	631:58	0:0	4	->
water	631:60	0:0	4	resync_mb_y
op	632:8	0:0	4	&&
water	632:11	0:0	4	h
op	632:12	0:0	4	->
water	632:14	0:0	4	slice_num
op	632:24	0:0	4	>=
water	632:27	0:0	4	MAX_SLICES
stmts	632:39	635:4	3	
water	632:39	0:0	4	{
call	634:8	634:164	4	av_log
arg	634:15	634:23	5	h->avctx
water	634:15	0:0	6	h
op	634:16	0:0	6	->
water	634:18	0:0	6	avctx
arg	634:25	634:39	5	AV_LOG_WARNING
water	634:25	0:0	6	AV_LOG_WARNING
arg	634:41	634:138	5	"Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n"
water	634:41	0:0	6	"Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n"
arg	634:140	634:152	5	h->slice_num
water	634:140	0:0	6	h
op	634:141	0:0	6	->
water	634:143	0:0	6	slice_num
arg	634:154	634:164	5	MAX_SLICES
water	634:154	0:0	6	MAX_SLICES
water	634:165	0:0	4	;
water	635:4	0:0	4	}
for	637:4	668:4	2	(j = 0 ;j < 2;j ++)
forinit	637:9	637:14	3	j = 0 ;
water	637:9	0:0	4	j
op	637:11	0:0	4	=
water	637:13	0:0	4	0
water	637:14	0:0	4	;
cond	637:16	637:20	3	j < 2
water	637:16	0:0	4	j
op	637:18	0:0	4	<
water	637:20	0:0	4	2
forexpr	637:23	637:24	3	j ++
water	637:23	0:0	4	j
op	637:24	0:0	4	++
stmts	637:28	668:4	3	
water	637:28	0:0	4	{
decl	638:8	638:23	4	int	id_list[16]
decl	639:8	639:69	4	int	*ref2frm
op	639:21	0:0	4	=
water	639:23	0:0	4	h
op	639:24	0:0	4	->
water	639:26	0:0	4	ref2frm
op	639:33	0:0	4	[
water	639:34	0:0	4	h
op	639:35	0:0	4	->
water	639:37	0:0	4	slice_num
op	639:47	0:0	4	&
water	639:49	0:0	4	(
water	639:50	0:0	4	MAX_SLICES
op	639:61	0:0	4	-
water	639:63	0:0	4	1
water	639:64	0:0	4	)
op	639:65	0:0	4	]
op	639:66	0:0	4	[
water	639:67	0:0	4	j
op	639:68	0:0	4	]
for	640:8	656:8	4	(i = 0 ;i < 16;i ++)
forinit	640:13	640:18	5	i = 0 ;
water	640:13	0:0	6	i
op	640:15	0:0	6	=
water	640:17	0:0	6	0
water	640:18	0:0	6	;
cond	640:20	640:24	5	i < 16
water	640:20	0:0	6	i
op	640:22	0:0	6	<
water	640:24	0:0	6	16
forexpr	640:28	640:29	5	i ++
water	640:28	0:0	6	i
op	640:29	0:0	6	++
stmts	640:33	656:8	5	
water	640:33	0:0	6	{
water	641:12	0:0	6	id_list
op	641:19	0:0	6	[
water	641:20	0:0	6	i
op	641:21	0:0	6	]
op	641:23	0:0	6	=
water	641:25	0:0	6	60
water	641:27	0:0	6	;
if	642:12	655:12	6	(j < h -> list_count && i < h -> ref_count [ j ] && h -> ref_list [ j ] [ i ] . f . buf [ 0 ])
cond	642:16	642:85	7	j < h -> list_count && i < h -> ref_count [ j ] && h -> ref_list [ j ] [ i ] . f . buf [ 0 ]
water	642:16	0:0	8	j
op	642:18	0:0	8	<
water	642:20	0:0	8	h
op	642:21	0:0	8	->
water	642:23	0:0	8	list_count
op	642:34	0:0	8	&&
water	642:37	0:0	8	i
op	642:39	0:0	8	<
water	642:41	0:0	8	h
op	642:42	0:0	8	->
water	642:44	0:0	8	ref_count
op	642:53	0:0	8	[
water	642:54	0:0	8	j
op	642:55	0:0	8	]
op	642:57	0:0	8	&&
water	642:60	0:0	8	h
op	642:61	0:0	8	->
water	642:63	0:0	8	ref_list
op	642:71	0:0	8	[
water	642:72	0:0	8	j
op	642:73	0:0	8	]
op	642:74	0:0	8	[
water	642:75	0:0	8	i
op	642:76	0:0	8	]
op	642:77	0:0	8	.
water	642:78	0:0	8	f
op	642:79	0:0	8	.
water	642:80	0:0	8	buf
op	642:83	0:0	8	[
water	642:84	0:0	8	0
op	642:85	0:0	8	]
stmts	642:88	655:12	7	
water	642:88	0:0	8	{
decl	643:16	643:21	8	int	k
decl	644:16	644:66	8	AVBuffer	*buf
op	644:30	0:0	8	=
water	644:32	0:0	8	h
op	644:33	0:0	8	->
water	644:35	0:0	8	ref_list
op	644:43	0:0	8	[
water	644:44	0:0	8	j
op	644:45	0:0	8	]
op	644:46	0:0	8	[
water	644:47	0:0	8	i
op	644:48	0:0	8	]
op	644:49	0:0	8	.
water	644:50	0:0	8	f
op	644:51	0:0	8	.
water	644:52	0:0	8	buf
op	644:55	0:0	8	[
water	644:56	0:0	8	0
op	644:57	0:0	8	]
op	644:58	0:0	8	->
water	644:60	0:0	8	buffer
for	645:16	649:20	8	(k = 0 ;k < h -> short_ref_count;k ++)
forinit	645:21	645:26	9	k = 0 ;
water	645:21	0:0	10	k
op	645:23	0:0	10	=
water	645:25	0:0	10	0
water	645:26	0:0	10	;
cond	645:28	645:35	9	k < h -> short_ref_count
water	645:28	0:0	10	k
op	645:30	0:0	10	<
water	645:32	0:0	10	h
op	645:33	0:0	10	->
water	645:35	0:0	10	short_ref_count
forexpr	645:52	645:53	9	k ++
water	645:52	0:0	10	k
op	645:53	0:0	10	++
stmts	646:20	649:20	9	
if	646:20	649:20	10	(h -> short_ref [ k ] -> f . buf [ 0 ] -> buffer == buf)
cond	646:24	646:61	11	h -> short_ref [ k ] -> f . buf [ 0 ] -> buffer == buf
water	646:24	0:0	12	h
op	646:25	0:0	12	->
water	646:27	0:0	12	short_ref
op	646:36	0:0	12	[
water	646:37	0:0	12	k
op	646:38	0:0	12	]
op	646:39	0:0	12	->
water	646:41	0:0	12	f
op	646:42	0:0	12	.
water	646:43	0:0	12	buf
op	646:46	0:0	12	[
water	646:47	0:0	12	0
op	646:48	0:0	12	]
op	646:49	0:0	12	->
water	646:51	0:0	12	buffer
op	646:58	0:0	12	==
water	646:61	0:0	12	buf
stmts	646:66	649:20	11	
water	646:66	0:0	12	{
water	647:24	0:0	12	id_list
op	647:31	0:0	12	[
water	647:32	0:0	12	i
op	647:33	0:0	12	]
op	647:35	0:0	12	=
water	647:37	0:0	12	k
water	647:38	0:0	12	;
break	648:24	648:29	12	
water	649:20	0:0	12	}
for	650:16	654:20	8	(k = 0 ;k < h -> long_ref_count;k ++)
forinit	650:21	650:26	9	k = 0 ;
water	650:21	0:0	10	k
op	650:23	0:0	10	=
water	650:25	0:0	10	0
water	650:26	0:0	10	;
cond	650:28	650:35	9	k < h -> long_ref_count
water	650:28	0:0	10	k
op	650:30	0:0	10	<
water	650:32	0:0	10	h
op	650:33	0:0	10	->
water	650:35	0:0	10	long_ref_count
forexpr	650:51	650:52	9	k ++
water	650:51	0:0	10	k
op	650:52	0:0	10	++
stmts	651:20	654:20	9	
if	651:20	654:20	10	(h -> long_ref [ k ] && h -> long_ref [ k ] -> f . buf [ 0 ] -> buffer == buf)
cond	651:24	651:78	11	h -> long_ref [ k ] && h -> long_ref [ k ] -> f . buf [ 0 ] -> buffer == buf
water	651:24	0:0	12	h
op	651:25	0:0	12	->
water	651:27	0:0	12	long_ref
op	651:35	0:0	12	[
water	651:36	0:0	12	k
op	651:37	0:0	12	]
op	651:39	0:0	12	&&
water	651:42	0:0	12	h
op	651:43	0:0	12	->
water	651:45	0:0	12	long_ref
op	651:53	0:0	12	[
water	651:54	0:0	12	k
op	651:55	0:0	12	]
op	651:56	0:0	12	->
water	651:58	0:0	12	f
op	651:59	0:0	12	.
water	651:60	0:0	12	buf
op	651:63	0:0	12	[
water	651:64	0:0	12	0
op	651:65	0:0	12	]
op	651:66	0:0	12	->
water	651:68	0:0	12	buffer
op	651:75	0:0	12	==
water	651:78	0:0	12	buf
stmts	651:83	654:20	11	
water	651:83	0:0	12	{
water	652:24	0:0	12	id_list
op	652:31	0:0	12	[
water	652:32	0:0	12	i
op	652:33	0:0	12	]
op	652:35	0:0	12	=
water	652:37	0:0	12	h
op	652:38	0:0	12	->
water	652:40	0:0	12	short_ref_count
op	652:56	0:0	12	+
water	652:58	0:0	12	k
water	652:59	0:0	12	;
break	653:24	653:29	12	
water	654:20	0:0	12	}
water	655:12	0:0	8	}
water	656:8	0:0	6	}
water	658:8	0:0	4	ref2frm
op	658:15	0:0	4	[
water	658:16	0:0	4	0
op	658:17	0:0	4	]
op	658:23	0:0	4	=
water	659:12	0:0	4	ref2frm
op	659:19	0:0	4	[
water	659:20	0:0	4	1
op	659:21	0:0	4	]
op	659:23	0:0	4	=
op	659:25	0:0	4	-
water	659:26	0:0	4	1
water	659:27	0:0	4	;
for	660:8	662:62	4	(i = 0 ;i < 16;i ++)
forinit	660:13	660:18	5	i = 0 ;
water	660:13	0:0	6	i
op	660:15	0:0	6	=
water	660:17	0:0	6	0
water	660:18	0:0	6	;
cond	660:20	660:24	5	i < 16
water	660:20	0:0	6	i
op	660:22	0:0	6	<
water	660:24	0:0	6	16
forexpr	660:28	660:29	5	i ++
water	660:28	0:0	6	i
op	660:29	0:0	6	++
stmts	661:12	662:62	5	
water	661:12	0:0	6	ref2frm
op	661:19	0:0	6	[
water	661:20	0:0	6	i
op	661:22	0:0	6	+
water	661:24	0:0	6	2
op	661:25	0:0	6	]
op	661:27	0:0	6	=
water	661:29	0:0	6	4
op	661:31	0:0	6	*
water	661:33	0:0	6	id_list
op	661:40	0:0	6	[
water	661:41	0:0	6	i
op	661:42	0:0	6	]
op	661:44	0:0	6	+
water	662:29	0:0	6	(
water	662:30	0:0	6	h
op	662:31	0:0	6	->
water	662:33	0:0	6	ref_list
op	662:41	0:0	6	[
water	662:42	0:0	6	j
op	662:43	0:0	6	]
op	662:44	0:0	6	[
water	662:45	0:0	6	i
op	662:46	0:0	6	]
op	662:47	0:0	6	.
water	662:48	0:0	6	reference
op	662:58	0:0	6	&
water	662:60	0:0	6	3
water	662:61	0:0	6	)
water	662:62	0:0	6	;
water	663:8	0:0	4	ref2frm
op	663:15	0:0	4	[
water	663:16	0:0	4	18
op	663:19	0:0	4	+
water	663:21	0:0	4	0
op	663:22	0:0	4	]
op	663:28	0:0	4	=
water	664:12	0:0	4	ref2frm
op	664:19	0:0	4	[
water	664:20	0:0	4	18
op	664:23	0:0	4	+
water	664:25	0:0	4	1
op	664:26	0:0	4	]
op	664:28	0:0	4	=
op	664:30	0:0	4	-
water	664:31	0:0	4	1
water	664:32	0:0	4	;
for	665:8	667:62	4	(i = 16 ;i < 48;i ++)
forinit	665:13	665:19	5	i = 16 ;
water	665:13	0:0	6	i
op	665:15	0:0	6	=
water	665:17	0:0	6	16
water	665:19	0:0	6	;
cond	665:21	665:25	5	i < 48
water	665:21	0:0	6	i
op	665:23	0:0	6	<
water	665:25	0:0	6	48
forexpr	665:29	665:30	5	i ++
water	665:29	0:0	6	i
op	665:30	0:0	6	++
stmts	666:12	667:62	5	
water	666:12	0:0	6	ref2frm
op	666:19	0:0	6	[
water	666:20	0:0	6	i
op	666:22	0:0	6	+
water	666:24	0:0	6	4
op	666:25	0:0	6	]
op	666:27	0:0	6	=
water	666:29	0:0	6	4
op	666:31	0:0	6	*
water	666:33	0:0	6	id_list
op	666:40	0:0	6	[
water	666:41	0:0	6	(
water	666:42	0:0	6	i
op	666:44	0:0	6	-
water	666:46	0:0	6	16
water	666:48	0:0	6	)
op	666:50	0:0	6	>>
water	666:53	0:0	6	1
op	666:54	0:0	6	]
op	666:56	0:0	6	+
water	667:29	0:0	6	(
water	667:30	0:0	6	h
op	667:31	0:0	6	->
water	667:33	0:0	6	ref_list
op	667:41	0:0	6	[
water	667:42	0:0	6	j
op	667:43	0:0	6	]
op	667:44	0:0	6	[
water	667:45	0:0	6	i
op	667:46	0:0	6	]
op	667:47	0:0	6	.
water	667:48	0:0	6	reference
op	667:58	0:0	6	&
water	667:60	0:0	6	3
water	667:61	0:0	6	)
water	667:62	0:0	6	;
water	668:4	0:0	4	}
if	670:4	670:60	2	(h -> ref_count [ 0 ])
cond	670:8	670:22	3	h -> ref_count [ 0 ]
water	670:8	0:0	4	h
op	670:9	0:0	4	->
water	670:11	0:0	4	ref_count
op	670:20	0:0	4	[
water	670:21	0:0	4	0
op	670:22	0:0	4	]
stmts	670:25	670:60	3	
water	670:25	0:0	4	h
op	670:26	0:0	4	->
water	670:28	0:0	4	er
op	670:30	0:0	4	.
water	670:31	0:0	4	last_pic
op	670:40	0:0	4	=
op	670:42	0:0	4	&
water	670:43	0:0	4	h
op	670:44	0:0	4	->
water	670:46	0:0	4	ref_list
op	670:54	0:0	4	[
water	670:55	0:0	4	0
op	670:56	0:0	4	]
op	670:57	0:0	4	[
water	670:58	0:0	4	0
op	670:59	0:0	4	]
water	670:60	0:0	4	;
if	671:4	671:60	2	(h -> ref_count [ 1 ])
cond	671:8	671:22	3	h -> ref_count [ 1 ]
water	671:8	0:0	4	h
op	671:9	0:0	4	->
water	671:11	0:0	4	ref_count
op	671:20	0:0	4	[
water	671:21	0:0	4	1
op	671:22	0:0	4	]
stmts	671:25	671:60	3	
water	671:25	0:0	4	h
op	671:26	0:0	4	->
water	671:28	0:0	4	er
op	671:30	0:0	4	.
water	671:31	0:0	4	next_pic
op	671:40	0:0	4	=
op	671:42	0:0	4	&
water	671:43	0:0	4	h
op	671:44	0:0	4	->
water	671:46	0:0	4	ref_list
op	671:54	0:0	4	[
water	671:55	0:0	4	1
op	671:56	0:0	4	]
op	671:57	0:0	4	[
water	671:58	0:0	4	0
op	671:59	0:0	4	]
water	671:60	0:0	4	;
water	672:4	0:0	2	h
op	672:5	0:0	2	->
water	672:7	0:0	2	er
op	672:9	0:0	2	.
water	672:10	0:0	2	ref_count
op	672:20	0:0	2	=
water	672:22	0:0	2	h
op	672:23	0:0	2	->
water	672:25	0:0	2	ref_count
op	672:34	0:0	2	[
water	672:35	0:0	2	0
op	672:36	0:0	2	]
water	672:37	0:0	2	;
if	674:4	693:4	2	(h -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	674:8	674:26	3	h -> avctx -> debug & FF_DEBUG_PICT_INFO
water	674:8	0:0	4	h
op	674:9	0:0	4	->
water	674:11	0:0	4	avctx
op	674:16	0:0	4	->
water	674:18	0:0	4	debug
op	674:24	0:0	4	&
water	674:26	0:0	4	FF_DEBUG_PICT_INFO
stmts	674:46	693:4	3	
water	674:46	0:0	4	{
call	675:8	692:102	4	av_log
arg	675:15	675:23	5	h->avctx
water	675:15	0:0	6	h
op	675:16	0:0	6	->
water	675:18	0:0	6	avctx
arg	675:25	675:37	5	AV_LOG_DEBUG
water	675:25	0:0	6	AV_LOG_DEBUG
arg	676:15	676:114	5	"slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n"
water	676:15	0:0	6	"slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n"
arg	677:15	677:27	5	h->slice_num
water	677:15	0:0	6	h
op	677:16	0:0	6	->
water	677:18	0:0	6	slice_num
arg	678:15	678:110	5	(h->picture_structure==PICT_FRAME?"F":h->picture_structure==PICT_TOP_FIELD?"T":"B")
water	678:15	0:0	6	(
water	678:16	0:0	6	h
op	678:17	0:0	6	->
water	678:19	0:0	6	picture_structure
op	678:37	0:0	6	==
water	678:40	0:0	6	PICT_FRAME
water	678:51	0:0	6	?
water	678:53	0:0	6	"F"
water	678:57	0:0	6	:
water	678:59	0:0	6	h
op	678:60	0:0	6	->
water	678:62	0:0	6	picture_structure
op	678:80	0:0	6	==
water	678:83	0:0	6	PICT_TOP_FIELD
water	678:98	0:0	6	?
water	678:100	0:0	6	"T"
water	678:104	0:0	6	:
water	678:106	0:0	6	"B"
water	678:109	0:0	6	)
arg	679:15	679:32	5	first_mb_in_slice
water	679:15	0:0	6	first_mb_in_slice
arg	680:15	680:54	5	av_get_picture_type_char(h->slice_type)
call	680:15	680:53	6	av_get_picture_type_char
arg	680:40	680:53	7	h->slice_type
water	680:40	0:0	8	h
op	680:41	0:0	8	->
water	680:43	0:0	8	slice_type
arg	681:15	681:48	5	h->slice_type_fixed?" fix":""
water	681:15	0:0	6	h
op	681:16	0:0	6	->
water	681:18	0:0	6	slice_type_fixed
water	681:35	0:0	6	?
water	681:37	0:0	6	" fix"
water	681:44	0:0	6	:
water	681:46	0:0	6	""
arg	682:15	682:62	5	h->nal_unit_type==NAL_IDR_SLICE?" IDR":""
water	682:15	0:0	6	h
op	682:16	0:0	6	->
water	682:18	0:0	6	nal_unit_type
op	682:32	0:0	6	==
water	682:35	0:0	6	NAL_IDR_SLICE
water	682:49	0:0	6	?
water	682:51	0:0	6	" IDR"
water	682:58	0:0	6	:
water	682:60	0:0	6	""
arg	683:15	683:21	5	pps_id
water	683:15	0:0	6	pps_id
arg	683:23	683:35	5	h->frame_num
water	683:23	0:0	6	h
op	683:24	0:0	6	->
water	683:26	0:0	6	frame_num
arg	684:15	684:43	5	h->cur_pic_ptr->field_poc[0]
water	684:15	0:0	6	h
op	684:16	0:0	6	->
water	684:18	0:0	6	cur_pic_ptr
op	684:29	0:0	6	->
water	684:31	0:0	6	field_poc
op	684:40	0:0	6	[
water	684:41	0:0	6	0
op	684:42	0:0	6	]
arg	685:15	685:43	5	h->cur_pic_ptr->field_poc[1]
water	685:15	0:0	6	h
op	685:16	0:0	6	->
water	685:18	0:0	6	cur_pic_ptr
op	685:29	0:0	6	->
water	685:31	0:0	6	field_poc
op	685:40	0:0	6	[
water	685:41	0:0	6	1
op	685:42	0:0	6	]
arg	686:15	686:30	5	h->ref_count[0]
water	686:15	0:0	6	h
op	686:16	0:0	6	->
water	686:18	0:0	6	ref_count
op	686:27	0:0	6	[
water	686:28	0:0	6	0
op	686:29	0:0	6	]
arg	686:32	686:47	5	h->ref_count[1]
water	686:32	0:0	6	h
op	686:33	0:0	6	->
water	686:35	0:0	6	ref_count
op	686:44	0:0	6	[
water	686:45	0:0	6	1
op	686:46	0:0	6	]
arg	687:15	687:24	5	h->qscale
water	687:15	0:0	6	h
op	687:16	0:0	6	->
water	687:18	0:0	6	qscale
arg	688:15	688:35	5	h->deblocking_filter
water	688:15	0:0	6	h
op	688:16	0:0	6	->
water	688:18	0:0	6	deblocking_filter
arg	689:15	689:48	5	h->slice_alpha_c0_offset/2-26
water	689:15	0:0	6	h
op	689:16	0:0	6	->
water	689:18	0:0	6	slice_alpha_c0_offset
op	689:40	0:0	6	/
water	689:42	0:0	6	2
op	689:44	0:0	6	-
water	689:46	0:0	6	26
arg	689:50	689:79	5	h->slice_beta_offset/2-26
water	689:50	0:0	6	h
op	689:51	0:0	6	->
water	689:53	0:0	6	slice_beta_offset
op	689:71	0:0	6	/
water	689:73	0:0	6	2
op	689:75	0:0	6	-
water	689:77	0:0	6	26
arg	690:15	690:28	5	h->use_weight
water	690:15	0:0	6	h
op	690:16	0:0	6	->
water	690:18	0:0	6	use_weight
arg	691:15	691:68	5	h->use_weight==1&&h->use_weight_chroma?"c":""
water	691:15	0:0	6	h
op	691:16	0:0	6	->
water	691:18	0:0	6	use_weight
op	691:29	0:0	6	==
water	691:32	0:0	6	1
op	691:34	0:0	6	&&
water	691:37	0:0	6	h
op	691:38	0:0	6	->
water	691:40	0:0	6	use_weight_chroma
water	691:58	0:0	6	?
water	691:60	0:0	6	"c"
water	691:64	0:0	6	:
water	691:66	0:0	6	""
arg	692:15	692:102	5	h->slice_type==AV_PICTURE_TYPE_B?(h->direct_spatial_mv_pred?"SPAT":"TEMP"):""
water	692:15	0:0	6	h
op	692:16	0:0	6	->
water	692:18	0:0	6	slice_type
op	692:29	0:0	6	==
water	692:32	0:0	6	AV_PICTURE_TYPE_B
water	692:50	0:0	6	?
water	692:52	0:0	6	(
water	692:53	0:0	6	h
op	692:54	0:0	6	->
water	692:56	0:0	6	direct_spatial_mv_pred
water	692:79	0:0	6	?
water	692:81	0:0	6	"SPAT"
water	692:88	0:0	6	:
water	692:90	0:0	6	"TEMP"
water	692:96	0:0	6	)
water	692:98	0:0	6	:
water	692:100	0:0	6	""
water	692:103	0:0	4	;
water	693:4	0:0	4	}
return	695:4	695:12	2	0
water	695:11	0:0	3	0
