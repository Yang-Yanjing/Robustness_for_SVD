func	5:15	46:0	0	int	decode_init
params	5:30	0:0	1	
param	5:31	5:53	2	AVCodecContext *	avctx
stmnts	7:4	45:12	1	
water	7:4	0:0	2	KmvcContext
op	7:16	0:0	2	*
water	7:17	0:0	2	const
water	7:23	0:0	2	c
op	7:25	0:0	2	=
water	7:27	0:0	2	avctx
op	7:32	0:0	2	->
water	7:34	0:0	2	priv_data
water	7:43	0:0	2	;
decl	8:4	8:9	2	int	i
water	10:4	0:0	2	c
op	10:5	0:0	2	->
water	10:7	0:0	2	avctx
op	10:13	0:0	2	=
water	10:15	0:0	2	avctx
water	10:20	0:0	2	;
if	12:4	15:4	2	(avctx -> width > 320 || avctx -> height > 200)
cond	12:8	12:46	3	avctx -> width > 320 || avctx -> height > 200
water	12:8	0:0	4	avctx
op	12:13	0:0	4	->
water	12:15	0:0	4	width
op	12:21	0:0	4	>
water	12:23	0:0	4	320
op	12:27	0:0	4	||
water	12:30	0:0	4	avctx
op	12:35	0:0	4	->
water	12:37	0:0	4	height
op	12:44	0:0	4	>
water	12:46	0:0	4	200
stmts	12:51	15:4	3	
water	12:51	0:0	4	{
call	13:8	13:71	4	av_log
arg	13:15	13:20	5	avctx
water	13:15	0:0	6	avctx
arg	13:22	13:34	5	AV_LOG_ERROR
water	13:22	0:0	6	AV_LOG_ERROR
arg	13:36	13:71	5	"KMVC supports frames <= 320x200\n"
water	13:36	0:0	6	"KMVC supports frames <= 320x200\n"
water	13:72	0:0	4	;
return	14:8	14:17	4	-1
op	14:15	0:0	5	-
water	14:16	0:0	5	1
water	15:4	0:0	4	}
water	17:4	0:0	2	c
op	17:5	0:0	2	->
water	17:7	0:0	2	frm0
op	17:12	0:0	2	=
call	17:14	17:34	2	av_mallocz
arg	17:25	17:34	3	320*200
water	17:25	0:0	4	320
op	17:29	0:0	4	*
water	17:31	0:0	4	200
water	17:35	0:0	2	;
water	18:4	0:0	2	c
op	18:5	0:0	2	->
water	18:7	0:0	2	frm1
op	18:12	0:0	2	=
call	18:14	18:34	2	av_mallocz
arg	18:25	18:34	3	320*200
water	18:25	0:0	4	320
op	18:29	0:0	4	*
water	18:31	0:0	4	200
water	18:35	0:0	2	;
water	19:4	0:0	2	c
op	19:5	0:0	2	->
water	19:7	0:0	2	cur
op	19:11	0:0	2	=
water	19:13	0:0	2	c
op	19:14	0:0	2	->
water	19:16	0:0	2	frm0
water	19:20	0:0	2	;
water	20:4	0:0	2	c
op	20:5	0:0	2	->
water	20:7	0:0	2	prev
op	20:12	0:0	2	=
water	20:14	0:0	2	c
op	20:15	0:0	2	->
water	20:17	0:0	2	frm1
water	20:21	0:0	2	;
for	22:4	24:4	2	(i = 0 ;i < 256;i ++)
forinit	22:9	22:14	3	i = 0 ;
water	22:9	0:0	4	i
op	22:11	0:0	4	=
water	22:13	0:0	4	0
water	22:14	0:0	4	;
cond	22:16	22:20	3	i < 256
water	22:16	0:0	4	i
op	22:18	0:0	4	<
water	22:20	0:0	4	256
forexpr	22:25	22:26	3	i ++
water	22:25	0:0	4	i
op	22:26	0:0	4	++
stmts	22:30	24:4	3	
water	22:30	0:0	4	{
water	23:8	0:0	4	c
op	23:9	0:0	4	->
water	23:11	0:0	4	pal
op	23:14	0:0	4	[
water	23:15	0:0	4	i
op	23:16	0:0	4	]
op	23:18	0:0	4	=
water	23:20	0:0	4	i
op	23:22	0:0	4	*
water	23:24	0:0	4	0
water	23:25	0:0	4	x10101
water	23:31	0:0	4	;
water	24:4	0:0	4	}
if	26:4	29:4	2	(avctx -> extradata_size < 12)
cond	26:8	26:32	3	avctx -> extradata_size < 12
water	26:8	0:0	4	avctx
op	26:13	0:0	4	->
water	26:15	0:0	4	extradata_size
op	26:30	0:0	4	<
water	26:32	0:0	4	12
stmts	26:36	29:4	3	
water	26:36	0:0	4	{
call	27:8	27:80	4	av_log
arg	27:15	27:19	5	NULL
water	27:15	0:0	6	NULL
arg	27:21	27:22	5	0
water	27:21	0:0	6	0
arg	27:24	27:80	5	"Extradata missing, decoding may not work properly...\n"
water	27:24	0:0	6	"Extradata missing, decoding may not work properly...\n"
water	27:81	0:0	4	;
water	28:8	0:0	4	c
op	28:9	0:0	4	->
water	28:11	0:0	4	palsize
op	28:19	0:0	4	=
water	28:21	0:0	4	127
water	28:24	0:0	4	;
water	29:4	0:0	4	}
else	29:6	31:4	2
stmts	29:11	31:4	3	
water	29:11	0:0	4	{
water	30:8	0:0	4	c
op	30:9	0:0	4	->
water	30:11	0:0	4	palsize
op	30:19	0:0	4	=
call	30:21	30:50	4	AV_RL16
arg	30:29	30:50	5	avctx->extradata+10
water	30:29	0:0	6	avctx
op	30:34	0:0	6	->
water	30:36	0:0	6	extradata
op	30:46	0:0	6	+
water	30:48	0:0	6	10
water	30:51	0:0	4	;
water	31:4	0:0	4	}
if	33:4	40:4	2	(avctx -> extradata_size == 1036)
cond	33:8	33:33	3	avctx -> extradata_size == 1036
water	33:8	0:0	4	avctx
op	33:13	0:0	4	->
water	33:15	0:0	4	extradata_size
op	33:30	0:0	4	==
water	33:33	0:0	4	1036
stmts	33:39	40:4	3	
water	33:39	0:0	4	{
decl	34:8	34:44	4	uint8_t	*src
op	34:21	0:0	4	=
water	34:23	0:0	4	avctx
op	34:28	0:0	4	->
water	34:30	0:0	4	extradata
op	34:40	0:0	4	+
water	34:42	0:0	4	12
for	35:8	38:8	4	(i = 0 ;i < 256;i ++)
forinit	35:13	35:18	5	i = 0 ;
water	35:13	0:0	6	i
op	35:15	0:0	6	=
water	35:17	0:0	6	0
water	35:18	0:0	6	;
cond	35:20	35:24	5	i < 256
water	35:20	0:0	6	i
op	35:22	0:0	6	<
water	35:24	0:0	6	256
forexpr	35:29	35:30	5	i ++
water	35:29	0:0	6	i
op	35:30	0:0	6	++
stmts	35:34	38:8	5	
water	35:34	0:0	6	{
water	36:12	0:0	6	c
op	36:13	0:0	6	->
water	36:15	0:0	6	pal
op	36:18	0:0	6	[
water	36:19	0:0	6	i
op	36:20	0:0	6	]
op	36:22	0:0	6	=
call	36:24	36:35	6	AV_RL32
arg	36:32	36:35	7	src
water	36:32	0:0	8	src
water	36:36	0:0	6	;
water	37:12	0:0	6	src
op	37:16	0:0	6	+=
water	37:19	0:0	6	4
water	37:20	0:0	6	;
water	38:8	0:0	6	}
water	39:8	0:0	4	c
op	39:9	0:0	4	->
water	39:11	0:0	4	setpal
op	39:18	0:0	4	=
water	39:20	0:0	4	1
water	39:21	0:0	4	;
water	40:4	0:0	4	}
call	42:4	42:38	2	avcodec_get_frame_defaults
arg	42:31	42:38	3	&c->pic
op	42:31	0:0	4	&
water	42:32	0:0	4	c
op	42:33	0:0	4	->
water	42:35	0:0	4	pic
water	42:39	0:0	2	;
water	43:4	0:0	2	avctx
op	43:9	0:0	2	->
water	43:11	0:0	2	pix_fmt
op	43:19	0:0	2	=
water	43:21	0:0	2	PIX_FMT_PAL8
water	43:33	0:0	2	;
return	45:4	45:12	2	0
water	45:11	0:0	3	0
