func	2:0	123:0	0	static int	apng_encode_frame
params	2:28	0:0	1	
param	2:29	2:50	2	AVCodecContext *	avctx
param	2:52	2:71	2	const AVFrame *	pict
param	3:29	3:59	2	APNGFctlChunk *	best_fctl_chunk
param	3:61	3:96	2	APNGFctlChunk *	best_last_fctl_chunk
stmnts	0:0	122:14	1	
decl	5:4	5:39	2	PNGEncContext	*s
op	5:21	0:0	2	=
water	5:23	0:0	2	avctx
op	5:28	0:0	2	->
water	5:30	0:0	2	priv_data
decl	6:4	6:11	2	int	ret
decl	7:4	7:18	2	unsigned int	y
decl	8:4	8:22	2	AVFrame	*diffFrame
decl	9:4	9:46	2	uint8_t	bpp
op	9:16	0:0	2	=
water	9:18	0:0	2	(
water	9:19	0:0	2	s
op	9:20	0:0	2	->
water	9:22	0:0	2	bits_per_pixel
op	9:37	0:0	2	+
water	9:39	0:0	2	7
water	9:40	0:0	2	)
op	9:42	0:0	2	>>
water	9:45	0:0	2	3
decl	10:4	10:58	2	uint8_t	*original_bytestream
water	10:32	0:0	2	,
decl	10:4	10:58	2	uint8_t	*original_bytestream_end
decl	11:4	11:54	2	uint8_t	*temp_bytestream
op	11:29	0:0	2	=
water	11:31	0:0	2	0
water	11:32	0:0	2	,
decl	11:4	11:54	2	uint8_t	*temp_bytestream_end
decl	12:4	12:33	2	uint32_t	best_sequence_number
decl	13:4	13:28	2	uint8_t	*best_bytestream
decl	14:4	14:42	2	size_t	best_bytestream_size
op	14:32	0:0	2	=
water	14:34	0:0	2	SIZE_MAX
decl	15:4	15:57	2	APNGFctlChunk	last_fctl_chunk
op	15:34	0:0	2	=
op	15:36	0:0	2	*
water	15:37	0:0	2	best_last_fctl_chunk
decl	16:4	16:47	2	APNGFctlChunk	fctl_chunk
op	16:29	0:0	2	=
op	16:31	0:0	2	*
water	16:32	0:0	2	best_fctl_chunk
if	18:4	25:4	2	(avctx -> frame_number == 0)
cond	18:8	18:31	3	avctx -> frame_number == 0
water	18:8	0:0	4	avctx
op	18:13	0:0	4	->
water	18:15	0:0	4	frame_number
op	18:28	0:0	4	==
water	18:31	0:0	4	0
stmts	18:34	25:4	3	
water	18:34	0:0	4	{
water	19:8	0:0	4	best_fctl_chunk
op	19:23	0:0	4	->
water	19:25	0:0	4	width
op	19:31	0:0	4	=
water	19:33	0:0	4	pict
op	19:37	0:0	4	->
water	19:39	0:0	4	width
water	19:44	0:0	4	;
water	20:8	0:0	4	best_fctl_chunk
op	20:23	0:0	4	->
water	20:25	0:0	4	height
op	20:32	0:0	4	=
water	20:34	0:0	4	pict
op	20:38	0:0	4	->
water	20:40	0:0	4	height
water	20:46	0:0	4	;
water	21:8	0:0	4	best_fctl_chunk
op	21:23	0:0	4	->
water	21:25	0:0	4	x_offset
op	21:34	0:0	4	=
water	21:36	0:0	4	0
water	21:37	0:0	4	;
water	22:8	0:0	4	best_fctl_chunk
op	22:23	0:0	4	->
water	22:25	0:0	4	y_offset
op	22:34	0:0	4	=
water	22:36	0:0	4	0
water	22:37	0:0	4	;
water	23:8	0:0	4	best_fctl_chunk
op	23:23	0:0	4	->
water	23:25	0:0	4	blend_op
op	23:34	0:0	4	=
water	23:36	0:0	4	APNG_BLEND_OP_SOURCE
water	23:56	0:0	4	;
return	24:8	24:40	4	encode_frame(avctx,pict)
call	24:15	24:39	5	encode_frame
arg	24:28	24:33	6	avctx
water	24:28	0:0	7	avctx
arg	24:35	24:39	6	pict
water	24:35	0:0	7	pict
water	25:4	0:0	4	}
water	27:4	0:0	2	diffFrame
op	27:14	0:0	2	=
call	27:16	27:31	2	av_frame_alloc
water	27:32	0:0	2	;
if	28:4	29:30	2	(! diffFrame)
cond	28:8	28:9	3	! diffFrame
op	28:8	0:0	4	!
water	28:9	0:0	4	diffFrame
stmts	29:8	29:30	3	
return	29:8	29:30	4	AVERROR(ENOMEM)
call	29:15	29:29	5	AVERROR
arg	29:23	29:29	6	ENOMEM
water	29:23	0:0	7	ENOMEM
water	31:4	0:0	2	diffFrame
op	31:13	0:0	2	->
water	31:15	0:0	2	format
op	31:22	0:0	2	=
water	31:24	0:0	2	pict
op	31:28	0:0	2	->
water	31:30	0:0	2	format
water	31:36	0:0	2	;
water	32:4	0:0	2	diffFrame
op	32:13	0:0	2	->
water	32:15	0:0	2	width
op	32:21	0:0	2	=
water	32:23	0:0	2	pict
op	32:27	0:0	2	->
water	32:29	0:0	2	width
water	32:34	0:0	2	;
water	33:4	0:0	2	diffFrame
op	33:13	0:0	2	->
water	33:15	0:0	2	height
op	33:22	0:0	2	=
water	33:24	0:0	2	pict
op	33:28	0:0	2	->
water	33:30	0:0	2	height
water	33:36	0:0	2	;
if	34:4	35:17	2	(( ret =av_frame_get_buffer (diffFrame ,32 ) ) < 0)
cond	34:8	34:53	3	( ret =av_frame_get_buffer (diffFrame ,32 ) ) < 0
water	34:8	0:0	4	(
water	34:9	0:0	4	ret
op	34:13	0:0	4	=
call	34:15	34:48	4	av_frame_get_buffer
arg	34:35	34:44	5	diffFrame
water	34:35	0:0	6	diffFrame
arg	34:46	34:48	5	32
water	34:46	0:0	6	32
water	34:49	0:0	4	)
op	34:51	0:0	4	<
water	34:53	0:0	4	0
stmts	35:8	35:17	3	
goto	35:8	35:17	4	fail
water	35:13	0:0	5	fail
water	37:4	0:0	2	original_bytestream
op	37:24	0:0	2	=
water	37:26	0:0	2	s
op	37:27	0:0	2	->
water	37:29	0:0	2	bytestream
water	37:39	0:0	2	;
water	38:4	0:0	2	original_bytestream_end
op	38:28	0:0	2	=
water	38:30	0:0	2	s
op	38:31	0:0	2	->
water	38:33	0:0	2	bytestream_end
water	38:47	0:0	2	;
water	40:4	0:0	2	temp_bytestream
op	40:20	0:0	2	=
call	40:22	40:77	2	av_malloc
arg	40:32	40:77	3	original_bytestream_end-original_bytestream
water	40:32	0:0	4	original_bytestream_end
op	40:56	0:0	4	-
water	40:58	0:0	4	original_bytestream
water	40:78	0:0	2	;
water	41:4	0:0	2	temp_bytestream_end
op	41:24	0:0	2	=
water	41:26	0:0	2	temp_bytestream
op	41:42	0:0	2	+
water	41:44	0:0	2	(
water	41:45	0:0	2	original_bytestream_end
op	41:69	0:0	2	-
water	41:71	0:0	2	original_bytestream
water	41:90	0:0	2	)
water	41:91	0:0	2	;
if	42:4	45:4	2	(! temp_bytestream)
cond	42:8	42:9	3	! temp_bytestream
op	42:8	0:0	4	!
water	42:9	0:0	4	temp_bytestream
stmts	42:26	45:4	3	
water	42:26	0:0	4	{
water	43:8	0:0	4	ret
op	43:12	0:0	4	=
call	43:14	43:28	4	AVERROR
arg	43:22	43:28	5	ENOMEM
water	43:22	0:0	6	ENOMEM
water	43:29	0:0	4	;
goto	44:8	44:17	4	fail
water	44:13	0:0	5	fail
water	45:4	0:0	4	}
for	47:4	109:4	2	(last_fctl_chunk . dispose_op = 0 ;last_fctl_chunk . dispose_op < 3;++ last_fctl_chunk . dispose_op)
forinit	47:9	47:39	3	last_fctl_chunk . dispose_op = 0 ;
water	47:9	0:0	4	last_fctl_chunk
op	47:24	0:0	4	.
water	47:25	0:0	4	dispose_op
op	47:36	0:0	4	=
water	47:38	0:0	4	0
water	47:39	0:0	4	;
cond	47:41	47:70	3	last_fctl_chunk . dispose_op < 3
water	47:41	0:0	4	last_fctl_chunk
op	47:56	0:0	4	.
water	47:57	0:0	4	dispose_op
op	47:68	0:0	4	<
water	47:70	0:0	4	3
forexpr	47:73	47:91	3	++ last_fctl_chunk . dispose_op
op	47:73	0:0	4	++
water	47:75	0:0	4	last_fctl_chunk
op	47:90	0:0	4	.
water	47:91	0:0	4	dispose_op
stmts	47:103	109:4	3	
water	47:103	0:0	4	{
for	52:8	108:8	4	(fctl_chunk . blend_op = 0 ;fctl_chunk . blend_op < 2;++ fctl_chunk . blend_op)
forinit	52:13	52:36	5	fctl_chunk . blend_op = 0 ;
water	52:13	0:0	6	fctl_chunk
op	52:23	0:0	6	.
water	52:24	0:0	6	blend_op
op	52:33	0:0	6	=
water	52:35	0:0	6	0
water	52:36	0:0	6	;
cond	52:38	52:60	5	fctl_chunk . blend_op < 2
water	52:38	0:0	6	fctl_chunk
op	52:48	0:0	6	.
water	52:49	0:0	6	blend_op
op	52:58	0:0	6	<
water	52:60	0:0	6	2
forexpr	52:63	52:76	5	++ fctl_chunk . blend_op
op	52:63	0:0	6	++
water	52:65	0:0	6	fctl_chunk
op	52:75	0:0	6	.
water	52:76	0:0	6	blend_op
stmts	52:86	108:8	5	
water	52:86	0:0	6	{
decl	56:12	56:83	6	uint32_t	original_sequence_number
op	56:46	0:0	6	=
water	56:48	0:0	6	s
op	56:49	0:0	6	->
water	56:51	0:0	6	sequence_number
water	56:66	0:0	6	,
decl	56:12	56:83	6	uint32_t	sequence_number
decl	57:12	57:53	6	uint8_t	*bytestream_start
op	57:38	0:0	6	=
water	57:40	0:0	6	s
op	57:41	0:0	6	->
water	57:43	0:0	6	bytestream
decl	58:12	58:34	6	size_t	bytestream_size
if	61:12	71:12	6	(last_fctl_chunk . dispose_op != APNG_DISPOSE_OP_PREVIOUS)
cond	61:16	61:46	7	last_fctl_chunk . dispose_op != APNG_DISPOSE_OP_PREVIOUS
water	61:16	0:0	8	last_fctl_chunk
op	61:31	0:0	8	.
water	61:32	0:0	8	dispose_op
op	61:43	0:0	8	!=
water	61:46	0:0	8	APNG_DISPOSE_OP_PREVIOUS
stmts	61:72	71:12	7	
water	61:72	0:0	8	{
call	62:16	63:73	8	memcpy
arg	62:23	62:41	9	diffFrame->data[0]
water	62:23	0:0	10	diffFrame
op	62:32	0:0	10	->
water	62:34	0:0	10	data
op	62:38	0:0	10	[
water	62:39	0:0	10	0
op	62:40	0:0	10	]
arg	62:43	62:65	9	s->last_frame->data[0]
water	62:43	0:0	10	s
op	62:44	0:0	10	->
water	62:46	0:0	10	last_frame
op	62:56	0:0	10	->
water	62:58	0:0	10	data
op	62:62	0:0	10	[
water	62:63	0:0	10	0
op	62:64	0:0	10	]
arg	63:23	63:73	9	s->last_frame->linesize[0]*s->last_frame->height
water	63:23	0:0	10	s
op	63:24	0:0	10	->
water	63:26	0:0	10	last_frame
op	63:36	0:0	10	->
water	63:38	0:0	10	linesize
op	63:46	0:0	10	[
water	63:47	0:0	10	0
op	63:48	0:0	10	]
op	63:50	0:0	10	*
water	63:52	0:0	10	s
op	63:53	0:0	10	->
water	63:55	0:0	10	last_frame
op	63:65	0:0	10	->
water	63:67	0:0	10	height
water	63:74	0:0	8	;
if	65:16	70:16	8	(last_fctl_chunk . dispose_op == APNG_DISPOSE_OP_BACKGROUND)
cond	65:20	65:50	9	last_fctl_chunk . dispose_op == APNG_DISPOSE_OP_BACKGROUND
water	65:20	0:0	10	last_fctl_chunk
op	65:35	0:0	10	.
water	65:36	0:0	10	dispose_op
op	65:47	0:0	10	==
water	65:50	0:0	10	APNG_DISPOSE_OP_BACKGROUND
stmts	65:78	70:16	9	
water	65:78	0:0	10	{
for	66:20	69:20	10	(y = last_fctl_chunk . y_offset ;y < last_fctl_chunk . y_offset + last_fctl_chunk . height;++ y)
forinit	66:25	66:53	11	y = last_fctl_chunk . y_offset ;
water	66:25	0:0	12	y
op	66:27	0:0	12	=
water	66:29	0:0	12	last_fctl_chunk
op	66:44	0:0	12	.
water	66:45	0:0	12	y_offset
water	66:53	0:0	12	;
cond	66:55	66:102	11	y < last_fctl_chunk . y_offset + last_fctl_chunk . height
water	66:55	0:0	12	y
op	66:57	0:0	12	<
water	66:59	0:0	12	last_fctl_chunk
op	66:74	0:0	12	.
water	66:75	0:0	12	y_offset
op	66:84	0:0	12	+
water	66:86	0:0	12	last_fctl_chunk
op	66:101	0:0	12	.
water	66:102	0:0	12	height
forexpr	66:110	66:112	11	++ y
op	66:110	0:0	12	++
water	66:112	0:0	12	y
stmts	66:115	69:20	11	
water	66:115	0:0	12	{
decl	67:24	67:106	12	size_t	row_start
op	67:41	0:0	12	=
water	67:43	0:0	12	s
op	67:44	0:0	12	->
water	67:46	0:0	12	last_frame
op	67:56	0:0	12	->
water	67:58	0:0	12	linesize
op	67:66	0:0	12	[
water	67:67	0:0	12	0
op	67:68	0:0	12	]
op	67:70	0:0	12	*
water	67:72	0:0	12	y
op	67:74	0:0	12	+
water	67:76	0:0	12	bpp
op	67:80	0:0	12	*
water	67:82	0:0	12	last_fctl_chunk
op	67:97	0:0	12	.
water	67:98	0:0	12	x_offset
call	68:24	68:93	12	memset
arg	68:31	68:61	13	diffFrame->data[0]+row_start
water	68:31	0:0	14	diffFrame
op	68:40	0:0	14	->
water	68:42	0:0	14	data
op	68:46	0:0	14	[
water	68:47	0:0	14	0
op	68:48	0:0	14	]
op	68:50	0:0	14	+
water	68:52	0:0	14	row_start
arg	68:63	68:64	13	0
water	68:63	0:0	14	0
arg	68:66	68:93	13	bpp*last_fctl_chunk.width
water	68:66	0:0	14	bpp
op	68:70	0:0	14	*
water	68:72	0:0	14	last_fctl_chunk
op	68:87	0:0	14	.
water	68:88	0:0	14	width
water	68:94	0:0	12	;
water	69:20	0:0	12	}
water	70:16	0:0	10	}
water	71:12	0:0	8	}
else	71:14	77:12	6
stmts	71:19	77:12	7	
water	71:19	0:0	8	{
if	72:16	73:28	8	(! s -> prev_frame)
cond	72:20	72:24	9	! s -> prev_frame
op	72:20	0:0	10	!
water	72:21	0:0	10	s
op	72:22	0:0	10	->
water	72:24	0:0	10	prev_frame
stmts	73:20	73:28	9	
continue	73:20	73:28	10	
call	75:16	76:73	8	memcpy
arg	75:23	75:41	9	diffFrame->data[0]
water	75:23	0:0	10	diffFrame
op	75:32	0:0	10	->
water	75:34	0:0	10	data
op	75:38	0:0	10	[
water	75:39	0:0	10	0
op	75:40	0:0	10	]
arg	75:43	75:65	9	s->prev_frame->data[0]
water	75:43	0:0	10	s
op	75:44	0:0	10	->
water	75:46	0:0	10	prev_frame
op	75:56	0:0	10	->
water	75:58	0:0	10	data
op	75:62	0:0	10	[
water	75:63	0:0	10	0
op	75:64	0:0	10	]
arg	76:23	76:73	9	s->prev_frame->linesize[0]*s->prev_frame->height
water	76:23	0:0	10	s
op	76:24	0:0	10	->
water	76:26	0:0	10	prev_frame
op	76:36	0:0	10	->
water	76:38	0:0	10	linesize
op	76:46	0:0	10	[
water	76:47	0:0	10	0
op	76:48	0:0	10	]
op	76:50	0:0	10	*
water	76:52	0:0	10	s
op	76:53	0:0	10	->
water	76:55	0:0	10	prev_frame
op	76:65	0:0	10	->
water	76:67	0:0	10	height
water	76:74	0:0	8	;
water	77:12	0:0	8	}
if	80:12	81:24	6	(apng_do_inverse_blend (diffFrame ,pict ,& fctl_chunk ,bpp ) < 0)
cond	80:16	80:75	7	apng_do_inverse_blend (diffFrame ,pict ,& fctl_chunk ,bpp ) < 0
call	80:16	80:71	8	apng_do_inverse_blend
arg	80:38	80:47	9	diffFrame
water	80:38	0:0	10	diffFrame
arg	80:49	80:53	9	pict
water	80:49	0:0	10	pict
arg	80:55	80:66	9	&fctl_chunk
op	80:55	0:0	10	&
water	80:56	0:0	10	fctl_chunk
arg	80:68	80:71	9	bpp
water	80:68	0:0	10	bpp
op	80:73	0:0	8	<
water	80:75	0:0	8	0
stmts	81:16	81:24	7	
continue	81:16	81:24	8	
water	84:12	0:0	6	ret
op	84:16	0:0	6	=
call	84:18	84:47	6	encode_frame
arg	84:31	84:36	7	avctx
water	84:31	0:0	8	avctx
arg	84:38	84:47	7	diffFrame
water	84:38	0:0	8	diffFrame
water	84:48	0:0	6	;
water	85:12	0:0	6	sequence_number
op	85:28	0:0	6	=
water	85:30	0:0	6	s
op	85:31	0:0	6	->
water	85:33	0:0	6	sequence_number
water	85:48	0:0	6	;
water	86:12	0:0	6	s
op	86:13	0:0	6	->
water	86:15	0:0	6	sequence_number
op	86:31	0:0	6	=
water	86:33	0:0	6	original_sequence_number
water	86:57	0:0	6	;
water	87:12	0:0	6	bytestream_size
op	87:28	0:0	6	=
water	87:30	0:0	6	s
op	87:31	0:0	6	->
water	87:33	0:0	6	bytestream
op	87:44	0:0	6	-
water	87:46	0:0	6	bytestream_start
water	87:62	0:0	6	;
water	88:12	0:0	6	s
op	88:13	0:0	6	->
water	88:15	0:0	6	bytestream
op	88:26	0:0	6	=
water	88:28	0:0	6	bytestream_start
water	88:44	0:0	6	;
if	89:12	90:25	6	(ret < 0)
cond	89:16	89:22	7	ret < 0
water	89:16	0:0	8	ret
op	89:20	0:0	8	<
water	89:22	0:0	8	0
stmts	90:16	90:25	7	
goto	90:16	90:25	8	fail
water	90:21	0:0	9	fail
if	92:12	107:12	6	(bytestream_size < best_bytestream_size)
cond	92:16	92:34	7	bytestream_size < best_bytestream_size
water	92:16	0:0	8	bytestream_size
op	92:32	0:0	8	<
water	92:34	0:0	8	best_bytestream_size
stmts	92:56	107:12	7	
water	92:56	0:0	8	{
op	93:16	0:0	8	*
water	93:17	0:0	8	best_fctl_chunk
op	93:33	0:0	8	=
water	93:35	0:0	8	fctl_chunk
water	93:45	0:0	8	;
op	94:16	0:0	8	*
water	94:17	0:0	8	best_last_fctl_chunk
op	94:38	0:0	8	=
water	94:40	0:0	8	last_fctl_chunk
water	94:55	0:0	8	;
water	96:16	0:0	8	best_sequence_number
op	96:37	0:0	8	=
water	96:39	0:0	8	sequence_number
water	96:54	0:0	8	;
water	97:16	0:0	8	best_bytestream
op	97:32	0:0	8	=
water	97:34	0:0	8	s
op	97:35	0:0	8	->
water	97:37	0:0	8	bytestream
water	97:47	0:0	8	;
water	98:16	0:0	8	best_bytestream_size
op	98:37	0:0	8	=
water	98:39	0:0	8	bytestream_size
water	98:54	0:0	8	;
if	100:16	103:16	8	(best_bytestream == original_bytestream)
cond	100:20	100:39	9	best_bytestream == original_bytestream
water	100:20	0:0	10	best_bytestream
op	100:36	0:0	10	==
water	100:39	0:0	10	original_bytestream
stmts	100:60	103:16	9	
water	100:60	0:0	10	{
water	101:20	0:0	10	s
op	101:21	0:0	10	->
water	101:23	0:0	10	bytestream
op	101:34	0:0	10	=
water	101:36	0:0	10	temp_bytestream
water	101:51	0:0	10	;
water	102:20	0:0	10	s
op	102:21	0:0	10	->
water	102:23	0:0	10	bytestream_end
op	102:38	0:0	10	=
water	102:40	0:0	10	temp_bytestream_end
water	102:59	0:0	10	;
water	103:16	0:0	10	}
else	103:18	106:16	8
stmts	103:23	106:16	9	
water	103:23	0:0	10	{
water	104:20	0:0	10	s
op	104:21	0:0	10	->
water	104:23	0:0	10	bytestream
op	104:34	0:0	10	=
water	104:36	0:0	10	original_bytestream
water	104:55	0:0	10	;
water	105:20	0:0	10	s
op	105:21	0:0	10	->
water	105:23	0:0	10	bytestream_end
op	105:38	0:0	10	=
water	105:40	0:0	10	original_bytestream_end
water	105:63	0:0	10	;
water	106:16	0:0	10	}
water	107:12	0:0	8	}
water	108:8	0:0	6	}
water	109:4	0:0	4	}
water	111:4	0:0	2	s
op	111:5	0:0	2	->
water	111:7	0:0	2	sequence_number
op	111:23	0:0	2	=
water	111:25	0:0	2	best_sequence_number
water	111:45	0:0	2	;
water	112:4	0:0	2	s
op	112:5	0:0	2	->
water	112:7	0:0	2	bytestream
op	112:18	0:0	2	=
water	112:20	0:0	2	original_bytestream
op	112:40	0:0	2	+
water	112:42	0:0	2	best_bytestream_size
water	112:62	0:0	2	;
water	113:4	0:0	2	s
op	113:5	0:0	2	->
water	113:7	0:0	2	bytestream_end
op	113:22	0:0	2	=
water	113:24	0:0	2	original_bytestream_end
water	113:47	0:0	2	;
if	114:4	115:74	2	(best_bytestream != original_bytestream)
cond	114:8	114:27	3	best_bytestream != original_bytestream
water	114:8	0:0	4	best_bytestream
op	114:24	0:0	4	!=
water	114:27	0:0	4	original_bytestream
stmts	115:8	115:74	3	
call	115:8	115:73	4	memcpy
arg	115:15	115:34	5	original_bytestream
water	115:15	0:0	6	original_bytestream
arg	115:36	115:51	5	best_bytestream
water	115:36	0:0	6	best_bytestream
arg	115:53	115:73	5	best_bytestream_size
water	115:53	0:0	6	best_bytestream_size
water	115:74	0:0	4	;
water	117:4	0:0	2	ret
op	117:8	0:0	2	=
water	117:10	0:0	2	0
water	117:11	0:0	2	;
label	119:0	119:4	2	fail :
call	120:4	120:29	2	av_freep
arg	120:13	120:29	3	&temp_bytestream
op	120:13	0:0	4	&
water	120:14	0:0	4	temp_bytestream
water	120:30	0:0	2	;
call	121:4	121:28	2	av_frame_free
arg	121:18	121:28	3	&diffFrame
op	121:18	0:0	4	&
water	121:19	0:0	4	diffFrame
water	121:29	0:0	2	;
return	122:4	122:14	2	ret
water	122:11	0:0	3	ret
