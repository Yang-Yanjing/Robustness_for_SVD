func	2:0	34:0	0	static int	decode_ihdr_chunk
params	2:28	0:0	1	
param	2:29	2:50	2	AVCodecContext *	avctx
param	2:52	2:68	2	PNGDecContext *	s
param	3:29	3:44	2	uint32_t	length
stmnts	5:4	33:12	1	
if	5:4	6:34	2	(length != 13)
cond	5:8	5:18	3	length != 13
water	5:8	0:0	4	length
op	5:15	0:0	4	!=
water	5:18	0:0	4	13
stmts	6:8	6:34	3	
return	6:8	6:34	4	AVERROR_INVALIDDATA
water	6:15	0:0	5	AVERROR_INVALIDDATA
if	8:4	11:4	2	(s -> state & PNG_IDAT)
cond	8:8	8:19	3	s -> state & PNG_IDAT
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	state
op	8:17	0:0	4	&
water	8:19	0:0	4	PNG_IDAT
stmts	8:29	11:4	3	
water	8:29	0:0	4	{
call	9:8	9:55	4	av_log
arg	9:15	9:20	5	avctx
water	9:15	0:0	6	avctx
arg	9:22	9:34	5	AV_LOG_ERROR
water	9:22	0:0	6	AV_LOG_ERROR
arg	9:36	9:55	5	"IHDR after IDAT\n"
water	9:36	0:0	6	"IHDR after IDAT\n"
water	9:56	0:0	4	;
return	10:8	10:34	4	AVERROR_INVALIDDATA
water	10:15	0:0	5	AVERROR_INVALIDDATA
water	11:4	0:0	4	}
water	13:4	0:0	2	s
op	13:5	0:0	2	->
water	13:7	0:0	2	width
op	13:14	0:0	2	=
water	13:16	0:0	2	s
op	13:17	0:0	2	->
water	13:19	0:0	2	cur_w
op	13:25	0:0	2	=
call	13:27	13:54	2	bytestream2_get_be32
arg	13:48	13:54	3	&s->gb
op	13:48	0:0	4	&
water	13:49	0:0	4	s
op	13:50	0:0	4	->
water	13:52	0:0	4	gb
water	13:55	0:0	2	;
water	14:4	0:0	2	s
op	14:5	0:0	2	->
water	14:7	0:0	2	height
op	14:14	0:0	2	=
water	14:16	0:0	2	s
op	14:17	0:0	2	->
water	14:19	0:0	2	cur_h
op	14:25	0:0	2	=
call	14:27	14:54	2	bytestream2_get_be32
arg	14:48	14:54	3	&s->gb
op	14:48	0:0	4	&
water	14:49	0:0	4	s
op	14:50	0:0	4	->
water	14:52	0:0	4	gb
water	14:55	0:0	2	;
if	15:4	19:4	2	(av_image_check_size (s -> width ,s -> height ,0 ,avctx ))
cond	15:8	15:57	3	av_image_check_size (s -> width ,s -> height ,0 ,avctx )
call	15:8	15:57	4	av_image_check_size
arg	15:28	15:36	5	s->width
water	15:28	0:0	6	s
op	15:29	0:0	6	->
water	15:31	0:0	6	width
arg	15:38	15:47	5	s->height
water	15:38	0:0	6	s
op	15:39	0:0	6	->
water	15:41	0:0	6	height
arg	15:49	15:50	5	0
water	15:49	0:0	6	0
arg	15:52	15:57	5	avctx
water	15:52	0:0	6	avctx
stmts	15:60	19:4	3	
water	15:60	0:0	4	{
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	width
op	16:17	0:0	4	=
water	16:19	0:0	4	s
op	16:20	0:0	4	->
water	16:22	0:0	4	height
op	16:29	0:0	4	=
water	16:31	0:0	4	0
water	16:32	0:0	4	;
call	17:8	17:58	4	av_log
arg	17:15	17:20	5	avctx
water	17:15	0:0	6	avctx
arg	17:22	17:34	5	AV_LOG_ERROR
water	17:22	0:0	6	AV_LOG_ERROR
arg	17:36	17:58	5	"Invalid image size\n"
water	17:36	0:0	6	"Invalid image size\n"
water	17:59	0:0	4	;
return	18:8	18:34	4	AVERROR_INVALIDDATA
water	18:15	0:0	5	AVERROR_INVALIDDATA
water	19:4	0:0	4	}
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	bit_depth
op	20:24	0:0	2	=
call	20:26	20:53	2	bytestream2_get_byte
arg	20:47	20:53	3	&s->gb
op	20:47	0:0	4	&
water	20:48	0:0	4	s
op	20:49	0:0	4	->
water	20:51	0:0	4	gb
water	20:54	0:0	2	;
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	color_type
op	21:24	0:0	2	=
call	21:26	21:53	2	bytestream2_get_byte
arg	21:47	21:53	3	&s->gb
op	21:47	0:0	4	&
water	21:48	0:0	4	s
op	21:49	0:0	4	->
water	21:51	0:0	4	gb
water	21:54	0:0	2	;
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	compression_type
op	22:24	0:0	2	=
call	22:26	22:53	2	bytestream2_get_byte
arg	22:47	22:53	3	&s->gb
op	22:47	0:0	4	&
water	22:48	0:0	4	s
op	22:49	0:0	4	->
water	22:51	0:0	4	gb
water	22:54	0:0	2	;
water	23:4	0:0	2	s
op	23:5	0:0	2	->
water	23:7	0:0	2	filter_type
op	23:24	0:0	2	=
call	23:26	23:53	2	bytestream2_get_byte
arg	23:47	23:53	3	&s->gb
op	23:47	0:0	4	&
water	23:48	0:0	4	s
op	23:49	0:0	4	->
water	23:51	0:0	4	gb
water	23:54	0:0	2	;
water	24:4	0:0	2	s
op	24:5	0:0	2	->
water	24:7	0:0	2	interlace_type
op	24:24	0:0	2	=
call	24:26	24:53	2	bytestream2_get_byte
arg	24:47	24:53	3	&s->gb
op	24:47	0:0	4	&
water	24:48	0:0	4	s
op	24:49	0:0	4	->
water	24:51	0:0	4	gb
water	24:54	0:0	2	;
call	25:4	25:30	2	bytestream2_skip
arg	25:21	25:27	3	&s->gb
op	25:21	0:0	4	&
water	25:22	0:0	4	s
op	25:23	0:0	4	->
water	25:25	0:0	4	gb
arg	25:29	25:30	3	4
water	25:29	0:0	4	4
water	25:31	0:0	2	;
water	26:4	0:0	2	s
op	26:5	0:0	2	->
water	26:7	0:0	2	state
op	26:13	0:0	2	|=
water	26:16	0:0	2	PNG_IHDR
water	26:24	0:0	2	;
if	27:4	31:71	2	(avctx -> debug & FF_DEBUG_PICT_INFO)
cond	27:8	27:23	3	avctx -> debug & FF_DEBUG_PICT_INFO
water	27:8	0:0	4	avctx
op	27:13	0:0	4	->
water	27:15	0:0	4	debug
op	27:21	0:0	4	&
water	27:23	0:0	4	FF_DEBUG_PICT_INFO
stmts	28:8	31:71	3	
call	28:8	31:70	4	av_log
arg	28:15	28:20	5	avctx
water	28:15	0:0	6	avctx
arg	28:22	28:34	5	AV_LOG_DEBUG
water	28:22	0:0	6	AV_LOG_DEBUG
arg	28:36	29:72	5	"width=%d height=%d depth=%d color_type=%d ""compression_type=%d filter_type=%d interlace_type=%d\n"
water	28:36	0:0	6	"width=%d height=%d depth=%d color_type=%d "
water	29:16	0:0	6	"compression_type=%d filter_type=%d interlace_type=%d\n"
arg	30:16	30:24	5	s->width
water	30:16	0:0	6	s
op	30:17	0:0	6	->
water	30:19	0:0	6	width
arg	30:26	30:35	5	s->height
water	30:26	0:0	6	s
op	30:27	0:0	6	->
water	30:29	0:0	6	height
arg	30:37	30:49	5	s->bit_depth
water	30:37	0:0	6	s
op	30:38	0:0	6	->
water	30:40	0:0	6	bit_depth
arg	30:51	30:64	5	s->color_type
water	30:51	0:0	6	s
op	30:52	0:0	6	->
water	30:54	0:0	6	color_type
arg	31:16	31:35	5	s->compression_type
water	31:16	0:0	6	s
op	31:17	0:0	6	->
water	31:19	0:0	6	compression_type
arg	31:37	31:51	5	s->filter_type
water	31:37	0:0	6	s
op	31:38	0:0	6	->
water	31:40	0:0	6	filter_type
arg	31:53	31:70	5	s->interlace_type
water	31:53	0:0	6	s
op	31:54	0:0	6	->
water	31:56	0:0	6	interlace_type
water	31:71	0:0	4	;
return	33:4	33:12	2	0
water	33:11	0:0	3	0
