func	1:0	139:0	0	static int	decode_block
params	1:23	0:0	1	
param	1:24	1:45	2	AVCodecContext *	avctx
param	1:47	1:58	2	void *	tdata
param	2:24	2:33	2	int	jobnr
param	2:35	2:47	2	int	threadnr
stmnts	0:0	138:12	1	
decl	4:4	4:36	2	EXRContext	*s
op	4:18	0:0	2	=
water	4:20	0:0	2	avctx
op	4:25	0:0	2	->
water	4:27	0:0	2	priv_data
water	5:4	0:0	2	AVFrame
op	5:12	0:0	2	*
water	5:13	0:0	2	const
water	5:19	0:0	2	p
op	5:21	0:0	2	=
water	5:23	0:0	2	s
op	5:24	0:0	2	->
water	5:26	0:0	2	picture
water	5:33	0:0	2	;
decl	6:4	6:49	2	EXRThreadData	*td
op	6:22	0:0	2	=
op	6:24	0:0	2	&
water	6:25	0:0	2	s
op	6:26	0:0	2	->
water	6:28	0:0	2	thread_data
op	6:39	0:0	2	[
water	6:40	0:0	2	threadnr
op	6:48	0:0	2	]
decl	7:4	7:44	2	const uint8_t	*channel_buffer[4]
op	7:37	0:0	2	=
water	7:39	0:0	2	{
water	7:41	0:0	2	0
water	7:43	0:0	2	}
decl	8:4	8:31	2	const uint8_t	*buf
op	8:23	0:0	2	=
water	8:25	0:0	2	s
op	8:26	0:0	2	->
water	8:28	0:0	2	buf
decl	9:4	9:43	2	uint64_t	line_offset
water	9:24	0:0	2	,
decl	9:4	9:43	2	uint64_t	uncompressed_size
decl	10:4	10:31	2	uint32_t	xdelta
op	10:20	0:0	2	=
water	10:22	0:0	2	s
op	10:23	0:0	2	->
water	10:25	0:0	2	xdelta
decl	11:4	11:19	2	uint16_t	*ptr_x
decl	12:4	12:16	2	uint8_t	*ptr
decl	13:4	13:28	2	uint32_t	data_size
water	13:22	0:0	2	,
decl	13:4	13:28	2	uint32_t	line
decl	14:4	14:22	2	const uint8_t	*src
decl	15:4	15:75	2	int	axmax
op	15:14	0:0	2	=
water	15:16	0:0	2	(
water	15:17	0:0	2	avctx
op	15:22	0:0	2	->
water	15:24	0:0	2	width
op	15:30	0:0	2	-
water	15:32	0:0	2	(
water	15:33	0:0	2	s
op	15:34	0:0	2	->
water	15:36	0:0	2	xmax
op	15:41	0:0	2	+
water	15:43	0:0	2	1
water	15:44	0:0	2	)
water	15:45	0:0	2	)
op	15:47	0:0	2	*
water	15:49	0:0	2	2
op	15:51	0:0	2	*
water	15:53	0:0	2	s
op	15:54	0:0	2	->
water	15:56	0:0	2	desc
op	15:60	0:0	2	->
water	15:62	0:0	2	nb_components
decl	16:4	16:52	2	int	bxmin
op	16:14	0:0	2	=
water	16:16	0:0	2	s
op	16:17	0:0	2	->
water	16:19	0:0	2	xmin
op	16:24	0:0	2	*
water	16:26	0:0	2	2
op	16:28	0:0	2	*
water	16:30	0:0	2	s
op	16:31	0:0	2	->
water	16:33	0:0	2	desc
op	16:37	0:0	2	->
water	16:39	0:0	2	nb_components
decl	17:4	17:36	2	int	i
water	17:9	0:0	2	,
decl	17:4	17:36	2	int	x
water	17:12	0:0	2	,
decl	17:4	17:36	2	int	buf_size
op	17:23	0:0	2	=
water	17:25	0:0	2	s
op	17:26	0:0	2	->
water	17:28	0:0	2	buf_size
decl	18:4	18:37	2	float	one_gamma
op	18:20	0:0	2	=
water	18:22	0:0	2	1
op	18:23	0:0	2	.
water	18:24	0:0	2	0
water	18:25	0:0	2	f
op	18:27	0:0	2	/
water	18:29	0:0	2	s
op	18:30	0:0	2	->
water	18:32	0:0	2	gamma
decl	19:4	19:11	2	int	ret
water	21:4	0:0	2	line_offset
op	21:16	0:0	2	=
call	21:18	21:50	2	AV_RL64
arg	21:26	21:50	3	s->gb.buffer+jobnr*8
water	21:26	0:0	4	s
op	21:27	0:0	4	->
water	21:29	0:0	4	gb
op	21:31	0:0	4	.
water	21:32	0:0	4	buffer
op	21:39	0:0	4	+
water	21:41	0:0	4	jobnr
op	21:47	0:0	4	*
water	21:49	0:0	4	8
water	21:51	0:0	2	;
if	23:4	24:34	2	(line_offset > buf_size - 8)
cond	23:8	23:33	3	line_offset > buf_size - 8
water	23:8	0:0	4	line_offset
op	23:20	0:0	4	>
water	23:22	0:0	4	buf_size
op	23:31	0:0	4	-
water	23:33	0:0	4	8
stmts	24:8	24:34	3	
return	24:8	24:34	4	AVERROR_INVALIDDATA
water	24:15	0:0	5	AVERROR_INVALIDDATA
water	26:4	0:0	2	src
op	26:9	0:0	2	=
water	26:11	0:0	2	buf
op	26:15	0:0	2	+
water	26:17	0:0	2	line_offset
op	26:29	0:0	2	+
water	26:31	0:0	2	8
water	26:32	0:0	2	;
water	27:4	0:0	2	line
op	27:9	0:0	2	=
call	27:11	27:26	2	AV_RL32
arg	27:19	27:26	3	src-8
water	27:19	0:0	4	src
op	27:23	0:0	4	-
water	27:25	0:0	4	8
water	27:27	0:0	2	;
if	28:4	29:34	2	(line < s -> ymin || line > s -> ymax)
cond	28:8	28:36	3	line < s -> ymin || line > s -> ymax
water	28:8	0:0	4	line
op	28:13	0:0	4	<
water	28:15	0:0	4	s
op	28:16	0:0	4	->
water	28:18	0:0	4	ymin
op	28:23	0:0	4	||
water	28:26	0:0	4	line
op	28:31	0:0	4	>
water	28:33	0:0	4	s
op	28:34	0:0	4	->
water	28:36	0:0	4	ymax
stmts	29:8	29:34	3	
return	29:8	29:34	4	AVERROR_INVALIDDATA
water	29:15	0:0	5	AVERROR_INVALIDDATA
water	31:4	0:0	2	data_size
op	31:14	0:0	2	=
call	31:16	31:31	2	AV_RL32
arg	31:24	31:31	3	src-4
water	31:24	0:0	4	src
op	31:28	0:0	4	-
water	31:30	0:0	4	4
water	31:32	0:0	2	;
if	32:4	33:34	2	(data_size <= 0 || data_size > buf_size)
cond	32:8	32:38	3	data_size <= 0 || data_size > buf_size
water	32:8	0:0	4	data_size
op	32:18	0:0	4	<=
water	32:21	0:0	4	0
op	32:23	0:0	4	||
water	32:26	0:0	4	data_size
op	32:36	0:0	4	>
water	32:38	0:0	4	buf_size
stmts	33:8	33:34	3	
return	33:8	33:34	4	AVERROR_INVALIDDATA
water	33:15	0:0	5	AVERROR_INVALIDDATA
water	35:4	0:0	2	s
op	35:5	0:0	2	->
water	35:7	0:0	2	ysize
op	35:22	0:0	2	=
call	35:24	35:73	2	FFMIN
arg	35:30	35:53	3	s->scan_lines_per_block
water	35:30	0:0	4	s
op	35:31	0:0	4	->
water	35:33	0:0	4	scan_lines_per_block
arg	35:55	35:73	3	s->ymax-line+1
water	35:55	0:0	4	s
op	35:56	0:0	4	->
water	35:58	0:0	4	ymax
op	35:63	0:0	4	-
water	35:65	0:0	4	line
op	35:70	0:0	4	+
water	35:72	0:0	4	1
water	35:74	0:0	2	;
water	36:4	0:0	2	uncompressed_size
op	36:22	0:0	2	=
water	36:24	0:0	2	s
op	36:25	0:0	2	->
water	36:27	0:0	2	scan_line_size
op	36:42	0:0	2	*
water	36:44	0:0	2	s
op	36:45	0:0	2	->
water	36:47	0:0	2	ysize
water	36:52	0:0	2	;
if	37:4	42:4	2	(( s -> compression == EXR_RAW && ( data_size != uncompressed_size || line_offset > buf_size - uncompressed_size ) ) || ( s -> compression != EXR_RAW && ( data_size > uncompressed_size || line_offset > buf_size - data_size ) ))
cond	37:8	40:68	3	( s -> compression == EXR_RAW && ( data_size != uncompressed_size || line_offset > buf_size - uncompressed_size ) ) || ( s -> compression != EXR_RAW && ( data_size > uncompressed_size || line_offset > buf_size - data_size ) )
water	37:8	0:0	4	(
water	37:9	0:0	4	s
op	37:10	0:0	4	->
water	37:12	0:0	4	compression
op	37:24	0:0	4	==
water	37:27	0:0	4	EXR_RAW
op	37:35	0:0	4	&&
water	37:38	0:0	4	(
water	37:39	0:0	4	data_size
op	37:49	0:0	4	!=
water	37:52	0:0	4	uncompressed_size
op	37:70	0:0	4	||
water	38:33	0:0	4	line_offset
op	38:45	0:0	4	>
water	38:47	0:0	4	buf_size
op	38:56	0:0	4	-
water	38:58	0:0	4	uncompressed_size
water	38:75	0:0	4	)
water	38:76	0:0	4	)
op	38:78	0:0	4	||
water	39:8	0:0	4	(
water	39:9	0:0	4	s
op	39:10	0:0	4	->
water	39:12	0:0	4	compression
op	39:24	0:0	4	!=
water	39:27	0:0	4	EXR_RAW
op	39:35	0:0	4	&&
water	39:38	0:0	4	(
water	39:39	0:0	4	data_size
op	39:49	0:0	4	>
water	39:51	0:0	4	uncompressed_size
op	39:69	0:0	4	||
water	40:33	0:0	4	line_offset
op	40:45	0:0	4	>
water	40:47	0:0	4	buf_size
op	40:56	0:0	4	-
water	40:58	0:0	4	data_size
water	40:67	0:0	4	)
water	40:68	0:0	4	)
stmts	40:71	42:4	3	
water	40:71	0:0	4	{
return	41:8	41:34	4	AVERROR_INVALIDDATA
water	41:15	0:0	5	AVERROR_INVALIDDATA
water	42:4	0:0	4	}
if	44:4	71:4	2	(data_size < uncompressed_size)
cond	44:8	44:20	3	data_size < uncompressed_size
water	44:8	0:0	4	data_size
op	44:18	0:0	4	<
water	44:20	0:0	4	uncompressed_size
stmts	44:39	71:4	3	
water	44:39	0:0	4	{
call	45:8	46:71	4	av_fast_padded_malloc
arg	45:30	45:52	5	&td->uncompressed_data
op	45:30	0:0	6	&
water	45:31	0:0	6	td
op	45:33	0:0	6	->
water	45:35	0:0	6	uncompressed_data
arg	46:30	46:52	5	&td->uncompressed_size
op	46:30	0:0	6	&
water	46:31	0:0	6	td
op	46:33	0:0	6	->
water	46:35	0:0	6	uncompressed_size
arg	46:54	46:71	5	uncompressed_size
water	46:54	0:0	6	uncompressed_size
water	46:72	0:0	4	;
call	47:8	47:72	4	av_fast_padded_malloc
arg	47:30	47:38	5	&td->tmp
op	47:30	0:0	6	&
water	47:31	0:0	6	td
op	47:33	0:0	6	->
water	47:35	0:0	6	tmp
arg	47:40	47:53	5	&td->tmp_size
op	47:40	0:0	6	&
water	47:41	0:0	6	td
op	47:43	0:0	6	->
water	47:45	0:0	6	tmp_size
arg	47:55	47:72	5	uncompressed_size
water	47:55	0:0	6	uncompressed_size
water	47:73	0:0	4	;
if	48:8	49:34	4	(! td -> uncompressed_data || ! td -> tmp)
cond	48:12	48:43	5	! td -> uncompressed_data || ! td -> tmp
op	48:12	0:0	6	!
water	48:13	0:0	6	td
op	48:15	0:0	6	->
water	48:17	0:0	6	uncompressed_data
op	48:35	0:0	6	||
op	48:38	0:0	6	!
water	48:39	0:0	6	td
op	48:41	0:0	6	->
water	48:43	0:0	6	tmp
stmts	49:12	49:34	5	
return	49:12	49:34	6	AVERROR(ENOMEM)
call	49:19	49:33	7	AVERROR
arg	49:27	49:33	8	ENOMEM
water	49:27	0:0	9	ENOMEM
water	51:8	0:0	4	ret
op	51:12	0:0	4	=
water	51:14	0:0	4	AVERROR_INVALIDDATA
water	51:33	0:0	4	;
switch	52:8	65:8	4	(s -> compression)
cond	52:16	52:19	5	s -> compression
water	52:16	0:0	6	s
op	52:17	0:0	6	->
water	52:19	0:0	6	compression
stmts	52:32	65:8	5	
water	52:32	0:0	6	{
label	53:8	53:21	6	case EXR_ZIP1 :
label	54:8	54:22	6	case EXR_ZIP16 :
water	55:12	0:0	6	ret
op	55:16	0:0	6	=
call	55:18	55:70	6	zip_uncompress
arg	55:33	55:36	7	src
water	55:33	0:0	8	src
arg	55:38	55:47	7	data_size
water	55:38	0:0	8	data_size
arg	55:49	55:66	7	uncompressed_size
water	55:49	0:0	8	uncompressed_size
arg	55:68	55:70	7	td
water	55:68	0:0	8	td
water	55:71	0:0	6	;
break	56:12	56:17	6	
label	57:8	57:20	6	case EXR_PIZ :
water	58:12	0:0	6	ret
op	58:16	0:0	6	=
call	58:18	58:73	6	piz_uncompress
arg	58:33	58:34	7	s
water	58:33	0:0	8	s
arg	58:36	58:39	7	src
water	58:36	0:0	8	src
arg	58:41	58:50	7	data_size
water	58:41	0:0	8	data_size
arg	58:52	58:69	7	uncompressed_size
water	58:52	0:0	8	uncompressed_size
arg	58:71	58:73	7	td
water	58:71	0:0	8	td
water	58:74	0:0	6	;
break	59:12	59:17	6	
label	60:8	60:22	6	case EXR_PXR24 :
water	61:12	0:0	6	ret
op	61:16	0:0	6	=
call	61:18	61:75	6	pxr24_uncompress
arg	61:35	61:36	7	s
water	61:35	0:0	8	s
arg	61:38	61:41	7	src
water	61:38	0:0	8	src
arg	61:43	61:52	7	data_size
water	61:43	0:0	8	data_size
arg	61:54	61:71	7	uncompressed_size
water	61:54	0:0	8	uncompressed_size
arg	61:73	61:75	7	td
water	61:73	0:0	8	td
water	61:76	0:0	6	;
break	62:12	62:17	6	
label	63:8	63:20	6	case EXR_RLE :
water	64:12	0:0	6	ret
op	64:16	0:0	6	=
call	64:18	64:70	6	rle_uncompress
arg	64:33	64:36	7	src
water	64:33	0:0	8	src
arg	64:38	64:47	7	data_size
water	64:38	0:0	8	data_size
arg	64:49	64:66	7	uncompressed_size
water	64:49	0:0	8	uncompressed_size
arg	64:68	64:70	7	td
water	64:68	0:0	8	td
water	64:71	0:0	6	;
water	65:8	0:0	6	}
if	66:8	69:8	4	(ret < 0)
cond	66:12	66:18	5	ret < 0
water	66:12	0:0	6	ret
op	66:16	0:0	6	<
water	66:18	0:0	6	0
stmts	66:21	69:8	5	
water	66:21	0:0	6	{
call	67:12	67:66	6	av_log
arg	67:19	67:24	7	avctx
water	67:19	0:0	8	avctx
arg	67:26	67:38	7	AV_LOG_ERROR
water	67:26	0:0	8	AV_LOG_ERROR
arg	67:40	67:66	7	"decode_block() failed.\n"
water	67:40	0:0	8	"decode_block() failed.\n"
water	67:67	0:0	6	;
return	68:12	68:22	6	ret
water	68:19	0:0	7	ret
water	69:8	0:0	6	}
water	70:8	0:0	4	src
op	70:12	0:0	4	=
water	70:14	0:0	4	td
op	70:16	0:0	4	->
water	70:18	0:0	4	uncompressed_data
water	70:35	0:0	4	;
water	71:4	0:0	4	}
water	73:4	0:0	2	channel_buffer
op	73:18	0:0	2	[
water	73:19	0:0	2	0
op	73:20	0:0	2	]
op	73:22	0:0	2	=
water	73:24	0:0	2	src
op	73:28	0:0	2	+
water	73:30	0:0	2	xdelta
op	73:37	0:0	2	*
water	73:39	0:0	2	s
op	73:40	0:0	2	->
water	73:42	0:0	2	channel_offsets
op	73:57	0:0	2	[
water	73:58	0:0	2	0
op	73:59	0:0	2	]
water	73:60	0:0	2	;
water	74:4	0:0	2	channel_buffer
op	74:18	0:0	2	[
water	74:19	0:0	2	1
op	74:20	0:0	2	]
op	74:22	0:0	2	=
water	74:24	0:0	2	src
op	74:28	0:0	2	+
water	74:30	0:0	2	xdelta
op	74:37	0:0	2	*
water	74:39	0:0	2	s
op	74:40	0:0	2	->
water	74:42	0:0	2	channel_offsets
op	74:57	0:0	2	[
water	74:58	0:0	2	1
op	74:59	0:0	2	]
water	74:60	0:0	2	;
water	75:4	0:0	2	channel_buffer
op	75:18	0:0	2	[
water	75:19	0:0	2	2
op	75:20	0:0	2	]
op	75:22	0:0	2	=
water	75:24	0:0	2	src
op	75:28	0:0	2	+
water	75:30	0:0	2	xdelta
op	75:37	0:0	2	*
water	75:39	0:0	2	s
op	75:40	0:0	2	->
water	75:42	0:0	2	channel_offsets
op	75:57	0:0	2	[
water	75:58	0:0	2	2
op	75:59	0:0	2	]
water	75:60	0:0	2	;
if	76:4	77:64	2	(s -> channel_offsets [ 3 ] >= 0)
cond	76:8	76:33	3	s -> channel_offsets [ 3 ] >= 0
water	76:8	0:0	4	s
op	76:9	0:0	4	->
water	76:11	0:0	4	channel_offsets
op	76:26	0:0	4	[
water	76:27	0:0	4	3
op	76:28	0:0	4	]
op	76:30	0:0	4	>=
water	76:33	0:0	4	0
stmts	77:8	77:64	3	
water	77:8	0:0	4	channel_buffer
op	77:22	0:0	4	[
water	77:23	0:0	4	3
op	77:24	0:0	4	]
op	77:26	0:0	4	=
water	77:28	0:0	4	src
op	77:32	0:0	4	+
water	77:34	0:0	4	xdelta
op	77:41	0:0	4	*
water	77:43	0:0	4	s
op	77:44	0:0	4	->
water	77:46	0:0	4	channel_offsets
op	77:61	0:0	4	[
water	77:62	0:0	4	3
op	77:63	0:0	4	]
water	77:64	0:0	4	;
water	79:4	0:0	2	ptr
op	79:8	0:0	2	=
water	79:10	0:0	2	p
op	79:11	0:0	2	->
water	79:13	0:0	2	data
op	79:17	0:0	2	[
water	79:18	0:0	2	0
op	79:19	0:0	2	]
op	79:21	0:0	2	+
water	79:23	0:0	2	line
op	79:28	0:0	2	*
water	79:30	0:0	2	p
op	79:31	0:0	2	->
water	79:33	0:0	2	linesize
op	79:41	0:0	2	[
water	79:42	0:0	2	0
op	79:43	0:0	2	]
water	79:44	0:0	2	;
for	80:4	136:4	2	(i = 0 ;i < s -> scan_lines_per_block && line + i <= s -> ymax;i ++ , ptr += p -> linesize [ 0 ])
forinit	80:9	80:14	3	i = 0 ;
water	80:9	0:0	4	i
op	80:11	0:0	4	=
water	80:13	0:0	4	0
water	80:14	0:0	4	;
cond	81:9	81:55	3	i < s -> scan_lines_per_block && line + i <= s -> ymax
water	81:9	0:0	4	i
op	81:11	0:0	4	<
water	81:13	0:0	4	s
op	81:14	0:0	4	->
water	81:16	0:0	4	scan_lines_per_block
op	81:37	0:0	4	&&
water	81:40	0:0	4	line
op	81:45	0:0	4	+
water	81:47	0:0	4	i
op	81:49	0:0	4	<=
water	81:52	0:0	4	s
op	81:53	0:0	4	->
water	81:55	0:0	4	ymax
forexpr	82:9	82:34	3	i ++ , ptr += p -> linesize [ 0 ]
water	82:9	0:0	4	i
op	82:10	0:0	4	++
water	82:12	0:0	4	,
water	82:14	0:0	4	ptr
op	82:18	0:0	4	+=
water	82:21	0:0	4	p
op	82:22	0:0	4	->
water	82:24	0:0	4	linesize
op	82:32	0:0	4	[
water	82:33	0:0	4	0
op	82:34	0:0	4	]
stmts	82:37	136:4	3	
water	82:37	0:0	4	{
decl	83:8	83:36	4	const uint8_t	*r
water	83:24	0:0	4	,
decl	83:8	83:36	4	const uint8_t	*g
water	83:28	0:0	4	,
decl	83:8	83:36	4	const uint8_t	*b
water	83:32	0:0	4	,
decl	83:8	83:36	4	const uint8_t	*a
water	85:8	0:0	4	r
op	85:10	0:0	4	=
water	85:12	0:0	4	channel_buffer
op	85:26	0:0	4	[
water	85:27	0:0	4	0
op	85:28	0:0	4	]
water	85:29	0:0	4	;
water	86:8	0:0	4	g
op	86:10	0:0	4	=
water	86:12	0:0	4	channel_buffer
op	86:26	0:0	4	[
water	86:27	0:0	4	1
op	86:28	0:0	4	]
water	86:29	0:0	4	;
water	87:8	0:0	4	b
op	87:10	0:0	4	=
water	87:12	0:0	4	channel_buffer
op	87:26	0:0	4	[
water	87:27	0:0	4	2
op	87:28	0:0	4	]
water	87:29	0:0	4	;
if	88:8	89:33	4	(channel_buffer [ 3 ])
cond	88:12	88:28	5	channel_buffer [ 3 ]
water	88:12	0:0	6	channel_buffer
op	88:26	0:0	6	[
water	88:27	0:0	6	3
op	88:28	0:0	6	]
stmts	89:12	89:33	5	
water	89:12	0:0	6	a
op	89:14	0:0	6	=
water	89:16	0:0	6	channel_buffer
op	89:30	0:0	6	[
water	89:31	0:0	6	3
op	89:32	0:0	6	]
water	89:33	0:0	6	;
water	91:8	0:0	4	ptr_x
op	91:14	0:0	4	=
water	91:16	0:0	4	(
water	91:17	0:0	4	uint16_t
op	91:26	0:0	4	*
water	91:27	0:0	4	)
water	91:29	0:0	4	ptr
water	91:32	0:0	4	;
call	94:8	94:30	4	memset
arg	94:15	94:20	5	ptr_x
water	94:15	0:0	6	ptr_x
arg	94:22	94:23	5	0
water	94:22	0:0	6	0
arg	94:25	94:30	5	bxmin
water	94:25	0:0	6	bxmin
water	94:31	0:0	4	;
water	95:8	0:0	4	ptr_x
op	95:14	0:0	4	+=
water	95:17	0:0	4	s
op	95:18	0:0	4	->
water	95:20	0:0	4	xmin
op	95:25	0:0	4	*
water	95:27	0:0	4	s
op	95:28	0:0	4	->
water	95:30	0:0	4	desc
op	95:34	0:0	4	->
water	95:36	0:0	4	nb_components
water	95:49	0:0	4	;
if	96:8	117:8	4	(s -> pixel_type == EXR_FLOAT)
cond	96:12	96:29	5	s -> pixel_type == EXR_FLOAT
water	96:12	0:0	6	s
op	96:13	0:0	6	->
water	96:15	0:0	6	pixel_type
op	96:26	0:0	6	==
water	96:29	0:0	6	EXR_FLOAT
stmts	96:40	117:8	5	
water	96:40	0:0	6	{
for	98:12	116:12	6	(x = 0 ;x < xdelta;x ++)
forinit	98:17	98:22	7	x = 0 ;
water	98:17	0:0	8	x
op	98:19	0:0	8	=
water	98:21	0:0	8	0
water	98:22	0:0	8	;
cond	98:24	98:28	7	x < xdelta
water	98:24	0:0	8	x
op	98:26	0:0	8	<
water	98:28	0:0	8	xdelta
forexpr	98:36	98:37	7	x ++
water	98:36	0:0	8	x
op	98:37	0:0	8	++
stmts	98:41	116:12	7	
water	98:41	0:0	8	{
decl	99:16	99:37	8	union av_intfloat32	t
water	100:16	0:0	8	t
op	100:17	0:0	8	.
water	100:18	0:0	8	i
op	100:20	0:0	8	=
call	100:22	100:44	8	bytestream_get_le32
arg	100:42	100:44	9	&r
op	100:42	0:0	10	&
water	100:43	0:0	10	r
water	100:45	0:0	8	;
if	101:16	102:46	8	(t . f > 0 . 0 f)
cond	101:20	101:29	9	t . f > 0 . 0 f
water	101:20	0:0	10	t
op	101:21	0:0	10	.
water	101:22	0:0	10	f
op	101:24	0:0	10	>
water	101:26	0:0	10	0
op	101:27	0:0	10	.
water	101:28	0:0	10	0
water	101:29	0:0	10	f
stmts	102:20	102:46	9	
water	102:20	0:0	10	t
op	102:21	0:0	10	.
water	102:22	0:0	10	f
op	102:24	0:0	10	=
call	102:26	102:45	10	powf
arg	102:31	102:34	11	t.f
water	102:31	0:0	12	t
op	102:32	0:0	12	.
water	102:33	0:0	12	f
arg	102:36	102:45	11	one_gamma
water	102:36	0:0	12	one_gamma
water	102:46	0:0	10	;
op	103:16	0:0	8	*
water	103:17	0:0	8	ptr_x
op	103:22	0:0	8	++
op	103:25	0:0	8	=
call	103:27	103:43	8	exr_flt2uint
arg	103:40	103:43	9	t.i
water	103:40	0:0	10	t
op	103:41	0:0	10	.
water	103:42	0:0	10	i
water	103:44	0:0	8	;
water	105:16	0:0	8	t
op	105:17	0:0	8	.
water	105:18	0:0	8	i
op	105:20	0:0	8	=
call	105:22	105:44	8	bytestream_get_le32
arg	105:42	105:44	9	&g
op	105:42	0:0	10	&
water	105:43	0:0	10	g
water	105:45	0:0	8	;
if	106:16	107:46	8	(t . f > 0 . 0 f)
cond	106:20	106:29	9	t . f > 0 . 0 f
water	106:20	0:0	10	t
op	106:21	0:0	10	.
water	106:22	0:0	10	f
op	106:24	0:0	10	>
water	106:26	0:0	10	0
op	106:27	0:0	10	.
water	106:28	0:0	10	0
water	106:29	0:0	10	f
stmts	107:20	107:46	9	
water	107:20	0:0	10	t
op	107:21	0:0	10	.
water	107:22	0:0	10	f
op	107:24	0:0	10	=
call	107:26	107:45	10	powf
arg	107:31	107:34	11	t.f
water	107:31	0:0	12	t
op	107:32	0:0	12	.
water	107:33	0:0	12	f
arg	107:36	107:45	11	one_gamma
water	107:36	0:0	12	one_gamma
water	107:46	0:0	10	;
op	108:16	0:0	8	*
water	108:17	0:0	8	ptr_x
op	108:22	0:0	8	++
op	108:25	0:0	8	=
call	108:27	108:43	8	exr_flt2uint
arg	108:40	108:43	9	t.i
water	108:40	0:0	10	t
op	108:41	0:0	10	.
water	108:42	0:0	10	i
water	108:44	0:0	8	;
water	110:16	0:0	8	t
op	110:17	0:0	8	.
water	110:18	0:0	8	i
op	110:20	0:0	8	=
call	110:22	110:44	8	bytestream_get_le32
arg	110:42	110:44	9	&b
op	110:42	0:0	10	&
water	110:43	0:0	10	b
water	110:45	0:0	8	;
if	111:16	112:46	8	(t . f > 0 . 0 f)
cond	111:20	111:29	9	t . f > 0 . 0 f
water	111:20	0:0	10	t
op	111:21	0:0	10	.
water	111:22	0:0	10	f
op	111:24	0:0	10	>
water	111:26	0:0	10	0
op	111:27	0:0	10	.
water	111:28	0:0	10	0
water	111:29	0:0	10	f
stmts	112:20	112:46	9	
water	112:20	0:0	10	t
op	112:21	0:0	10	.
water	112:22	0:0	10	f
op	112:24	0:0	10	=
call	112:26	112:45	10	powf
arg	112:31	112:34	11	t.f
water	112:31	0:0	12	t
op	112:32	0:0	12	.
water	112:33	0:0	12	f
arg	112:36	112:45	11	one_gamma
water	112:36	0:0	12	one_gamma
water	112:46	0:0	10	;
op	113:16	0:0	8	*
water	113:17	0:0	8	ptr_x
op	113:22	0:0	8	++
op	113:25	0:0	8	=
call	113:27	113:43	8	exr_flt2uint
arg	113:40	113:43	9	t.i
water	113:40	0:0	10	t
op	113:41	0:0	10	.
water	113:42	0:0	10	i
water	113:44	0:0	8	;
if	114:16	115:68	8	(channel_buffer [ 3 ])
cond	114:20	114:36	9	channel_buffer [ 3 ]
water	114:20	0:0	10	channel_buffer
op	114:34	0:0	10	[
water	114:35	0:0	10	3
op	114:36	0:0	10	]
stmts	115:20	115:68	9	
op	115:20	0:0	10	*
water	115:21	0:0	10	ptr_x
op	115:26	0:0	10	++
op	115:29	0:0	10	=
call	115:31	115:67	10	exr_flt2uint
arg	115:44	115:67	11	bytestream_get_le32(&a)
call	115:44	115:66	12	bytestream_get_le32
arg	115:64	115:66	13	&a
op	115:64	0:0	14	&
water	115:65	0:0	14	a
water	115:68	0:0	10	;
water	116:12	0:0	8	}
water	117:8	0:0	6	}
else	117:10	126:8	4
stmts	117:15	126:8	5	
water	117:15	0:0	6	{
for	119:12	125:12	6	(x = 0 ;x < xdelta;x ++)
forinit	119:17	119:22	7	x = 0 ;
water	119:17	0:0	8	x
op	119:19	0:0	8	=
water	119:21	0:0	8	0
water	119:22	0:0	8	;
cond	119:24	119:28	7	x < xdelta
water	119:24	0:0	8	x
op	119:26	0:0	8	<
water	119:28	0:0	8	xdelta
forexpr	119:36	119:37	7	x ++
water	119:36	0:0	8	x
op	119:37	0:0	8	++
stmts	119:41	125:12	7	
water	119:41	0:0	8	{
op	120:16	0:0	8	*
water	120:17	0:0	8	ptr_x
op	120:22	0:0	8	++
op	120:25	0:0	8	=
water	120:27	0:0	8	s
op	120:28	0:0	8	->
water	120:30	0:0	8	gamma_table
op	120:41	0:0	8	[
call	120:42	120:64	8	bytestream_get_le16
arg	120:62	120:64	9	&r
op	120:62	0:0	10	&
water	120:63	0:0	10	r
op	120:65	0:0	8	]
water	120:66	0:0	8	;
op	121:16	0:0	8	*
water	121:17	0:0	8	ptr_x
op	121:22	0:0	8	++
op	121:25	0:0	8	=
water	121:27	0:0	8	s
op	121:28	0:0	8	->
water	121:30	0:0	8	gamma_table
op	121:41	0:0	8	[
call	121:42	121:64	8	bytestream_get_le16
arg	121:62	121:64	9	&g
op	121:62	0:0	10	&
water	121:63	0:0	10	g
op	121:65	0:0	8	]
water	121:66	0:0	8	;
op	122:16	0:0	8	*
water	122:17	0:0	8	ptr_x
op	122:22	0:0	8	++
op	122:25	0:0	8	=
water	122:27	0:0	8	s
op	122:28	0:0	8	->
water	122:30	0:0	8	gamma_table
op	122:41	0:0	8	[
call	122:42	122:64	8	bytestream_get_le16
arg	122:62	122:64	9	&b
op	122:62	0:0	10	&
water	122:63	0:0	10	b
op	122:65	0:0	8	]
water	122:66	0:0	8	;
if	123:16	124:71	8	(channel_buffer [ 3 ])
cond	123:20	123:36	9	channel_buffer [ 3 ]
water	123:20	0:0	10	channel_buffer
op	123:34	0:0	10	[
water	123:35	0:0	10	3
op	123:36	0:0	10	]
stmts	124:20	124:71	9	
op	124:20	0:0	10	*
water	124:21	0:0	10	ptr_x
op	124:26	0:0	10	++
op	124:29	0:0	10	=
call	124:31	124:70	10	exr_halflt2uint
arg	124:47	124:70	11	bytestream_get_le16(&a)
call	124:47	124:69	12	bytestream_get_le16
arg	124:67	124:69	13	&a
op	124:67	0:0	14	&
water	124:68	0:0	14	a
water	124:71	0:0	10	;
water	125:12	0:0	8	}
water	126:8	0:0	6	}
call	129:8	129:30	4	memset
arg	129:15	129:20	5	ptr_x
water	129:15	0:0	6	ptr_x
arg	129:22	129:23	5	0
water	129:22	0:0	6	0
arg	129:25	129:30	5	axmax
water	129:25	0:0	6	axmax
water	129:31	0:0	4	;
water	131:8	0:0	4	channel_buffer
op	131:22	0:0	4	[
water	131:23	0:0	4	0
op	131:24	0:0	4	]
op	131:26	0:0	4	+=
water	131:29	0:0	4	s
op	131:30	0:0	4	->
water	131:32	0:0	4	scan_line_size
water	131:46	0:0	4	;
water	132:8	0:0	4	channel_buffer
op	132:22	0:0	4	[
water	132:23	0:0	4	1
op	132:24	0:0	4	]
op	132:26	0:0	4	+=
water	132:29	0:0	4	s
op	132:30	0:0	4	->
water	132:32	0:0	4	scan_line_size
water	132:46	0:0	4	;
water	133:8	0:0	4	channel_buffer
op	133:22	0:0	4	[
water	133:23	0:0	4	2
op	133:24	0:0	4	]
op	133:26	0:0	4	+=
water	133:29	0:0	4	s
op	133:30	0:0	4	->
water	133:32	0:0	4	scan_line_size
water	133:46	0:0	4	;
if	134:8	135:50	4	(channel_buffer [ 3 ])
cond	134:12	134:28	5	channel_buffer [ 3 ]
water	134:12	0:0	6	channel_buffer
op	134:26	0:0	6	[
water	134:27	0:0	6	3
op	134:28	0:0	6	]
stmts	135:12	135:50	5	
water	135:12	0:0	6	channel_buffer
op	135:26	0:0	6	[
water	135:27	0:0	6	3
op	135:28	0:0	6	]
op	135:30	0:0	6	+=
water	135:33	0:0	6	s
op	135:34	0:0	6	->
water	135:36	0:0	6	scan_line_size
water	135:50	0:0	6	;
water	136:4	0:0	4	}
return	138:4	138:12	2	0
water	138:11	0:0	3	0
