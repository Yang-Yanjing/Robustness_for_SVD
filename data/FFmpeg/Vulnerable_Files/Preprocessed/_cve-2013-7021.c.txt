func	2:0	93:0	0	static int	filter_frame
params	2:23	0:0	1	
param	2:24	2:44	2	AVFilterLink *	inlink
param	2:46	2:58	2	AVFrame *	buf
stmnts	0:0	92:14	1	
decl	4:4	4:41	2	AVFilterContext	*ctx
op	4:28	0:0	2	=
water	4:30	0:0	2	inlink
op	4:36	0:0	2	->
water	4:38	0:0	2	dst
decl	5:4	5:39	2	FPSContext	*s
op	5:28	0:0	2	=
water	5:30	0:0	2	ctx
op	5:33	0:0	2	->
water	5:35	0:0	2	priv
decl	6:4	6:45	2	AVFilterLink	*outlink
op	6:28	0:0	2	=
water	6:30	0:0	2	ctx
op	6:33	0:0	2	->
water	6:35	0:0	2	outputs
op	6:42	0:0	2	[
water	6:43	0:0	2	0
op	6:44	0:0	2	]
decl	7:4	7:17	2	int64_t	delta
decl	8:4	8:14	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:14	2	int	ret
water	10:4	0:0	2	s
op	10:5	0:0	2	->
water	10:7	0:0	2	frames_in
op	10:16	0:0	2	++
water	10:18	0:0	2	;
if	12:4	26:4	2	(s -> pts == AV_NOPTS_VALUE)
cond	12:8	12:18	3	s -> pts == AV_NOPTS_VALUE
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	pts
op	12:15	0:0	4	==
water	12:18	0:0	4	AV_NOPTS_VALUE
stmts	12:34	26:4	3	
water	12:34	0:0	4	{
if	13:8	19:8	4	(buf -> pts != AV_NOPTS_VALUE)
cond	13:12	13:24	5	buf -> pts != AV_NOPTS_VALUE
water	13:12	0:0	6	buf
op	13:15	0:0	6	->
water	13:17	0:0	6	pts
op	13:21	0:0	6	!=
water	13:24	0:0	6	AV_NOPTS_VALUE
stmts	13:40	19:8	5	
water	13:40	0:0	6	{
water	14:12	0:0	6	ret
op	14:16	0:0	6	=
call	14:18	14:44	6	write_to_fifo
arg	14:32	14:39	7	s->fifo
water	14:32	0:0	8	s
op	14:33	0:0	8	->
water	14:35	0:0	8	fifo
arg	14:41	14:44	7	buf
water	14:41	0:0	8	buf
water	14:45	0:0	6	;
if	15:12	16:26	6	(ret < 0)
cond	15:16	15:22	7	ret < 0
water	15:16	0:0	8	ret
op	15:20	0:0	8	<
water	15:22	0:0	8	0
stmts	16:16	16:26	7	
return	16:16	16:26	8	ret
water	16:23	0:0	9	ret
water	18:12	0:0	6	s
op	18:13	0:0	6	->
water	18:15	0:0	6	first_pts
op	18:25	0:0	6	=
water	18:27	0:0	6	s
op	18:28	0:0	6	->
water	18:30	0:0	6	pts
op	18:34	0:0	6	=
water	18:36	0:0	6	buf
op	18:39	0:0	6	->
water	18:41	0:0	6	pts
water	18:44	0:0	6	;
water	19:8	0:0	6	}
else	19:10	24:8	4
stmts	19:15	24:8	5	
water	19:15	0:0	6	{
call	20:12	21:33	6	av_log
arg	20:19	20:22	7	ctx
water	20:19	0:0	8	ctx
arg	20:24	20:38	7	AV_LOG_WARNING
water	20:24	0:0	8	AV_LOG_WARNING
arg	20:40	21:33	7	"Discarding initial frame(s) with no ""timestamp.\n"
water	20:40	0:0	8	"Discarding initial frame(s) with no "
water	21:19	0:0	8	"timestamp.\n"
water	21:34	0:0	6	;
call	22:12	22:30	6	av_frame_free
arg	22:26	22:30	7	&buf
op	22:26	0:0	8	&
water	22:27	0:0	8	buf
water	22:31	0:0	6	;
water	23:12	0:0	6	s
op	23:13	0:0	6	->
water	23:15	0:0	6	drop
op	23:19	0:0	6	++
water	23:21	0:0	6	;
water	24:8	0:0	6	}
return	25:8	25:16	4	0
water	25:15	0:0	5	0
water	26:4	0:0	4	}
if	29:4	31:4	2	(buf -> pts == AV_NOPTS_VALUE)
cond	29:8	29:20	3	buf -> pts == AV_NOPTS_VALUE
water	29:8	0:0	4	buf
op	29:11	0:0	4	->
water	29:13	0:0	4	pts
op	29:17	0:0	4	==
water	29:20	0:0	4	AV_NOPTS_VALUE
stmts	29:36	31:4	3	
water	29:36	0:0	4	{
return	30:8	30:42	4	write_to_fifo(s->fifo,buf)
call	30:15	30:41	5	write_to_fifo
arg	30:29	30:36	6	s->fifo
water	30:29	0:0	7	s
op	30:30	0:0	7	->
water	30:32	0:0	7	fifo
arg	30:38	30:41	6	buf
water	30:38	0:0	7	buf
water	31:4	0:0	4	}
water	34:4	0:0	2	delta
op	34:10	0:0	2	=
call	34:12	35:60	2	av_rescale_q_rnd
arg	34:29	34:46	3	buf->pts-s->pts
water	34:29	0:0	4	buf
op	34:32	0:0	4	->
water	34:34	0:0	4	pts
op	34:38	0:0	4	-
water	34:40	0:0	4	s
op	34:41	0:0	4	->
water	34:43	0:0	4	pts
arg	34:48	34:65	3	inlink->time_base
water	34:48	0:0	4	inlink
op	34:54	0:0	4	->
water	34:56	0:0	4	time_base
arg	35:29	35:47	3	outlink->time_base
water	35:29	0:0	4	outlink
op	35:36	0:0	4	->
water	35:38	0:0	4	time_base
arg	35:49	35:60	3	s->rounding
water	35:49	0:0	4	s
op	35:50	0:0	4	->
water	35:52	0:0	4	rounding
water	35:61	0:0	2	;
if	37:4	51:4	2	(delta < 1)
cond	37:8	37:16	3	delta < 1
water	37:8	0:0	4	delta
op	37:14	0:0	4	<
water	37:16	0:0	4	1
stmts	37:19	51:4	3	
water	37:19	0:0	4	{
decl	39:8	39:20	4	AVFrame	*tmp
decl	40:8	40:57	4	int	drop
op	40:17	0:0	4	=
call	40:19	40:39	5	av_fifo_size
arg	40:32	40:39	6	s->fifo
water	40:32	0:0	7	s
op	40:33	0:0	7	->
water	40:35	0:0	7	fifo
op	40:40	0:0	4	/
op	40:41	0:0	4	sizeof
water	40:47	0:0	4	(
water	40:48	0:0	4	AVFrame
op	40:55	0:0	4	*
water	40:56	0:0	4	)
call	42:8	42:65	4	av_log
arg	42:15	42:18	5	ctx
water	42:15	0:0	6	ctx
arg	42:20	42:32	5	AV_LOG_DEBUG
water	42:20	0:0	6	AV_LOG_DEBUG
arg	42:34	42:59	5	"Dropping %d frame(s).\n"
water	42:34	0:0	6	"Dropping %d frame(s).\n"
arg	42:61	42:65	5	drop
water	42:61	0:0	6	drop
water	42:66	0:0	4	;
water	43:8	0:0	4	s
op	43:9	0:0	4	->
water	43:11	0:0	4	drop
op	43:16	0:0	4	+=
water	43:19	0:0	4	drop
water	43:23	0:0	4	;
call	45:8	45:61	4	av_fifo_generic_read
arg	45:29	45:36	5	s->fifo
water	45:29	0:0	6	s
op	45:30	0:0	6	->
water	45:32	0:0	6	fifo
arg	45:38	45:42	5	&tmp
op	45:38	0:0	6	&
water	45:39	0:0	6	tmp
arg	45:44	45:55	5	sizeof(tmp)
op	45:44	0:0	6	sizeof
water	45:50	0:0	6	(
water	45:51	0:0	6	tmp
water	45:54	0:0	6	)
arg	45:57	45:61	5	NULL
water	45:57	0:0	6	NULL
water	45:62	0:0	4	;
call	46:8	46:26	4	flush_fifo
arg	46:19	46:26	5	s->fifo
water	46:19	0:0	6	s
op	46:20	0:0	6	->
water	46:22	0:0	6	fifo
water	46:27	0:0	4	;
water	47:8	0:0	4	ret
op	47:12	0:0	4	=
call	47:14	47:40	4	write_to_fifo
arg	47:28	47:35	5	s->fifo
water	47:28	0:0	6	s
op	47:29	0:0	6	->
water	47:31	0:0	6	fifo
arg	47:37	47:40	5	tmp
water	47:37	0:0	6	tmp
water	47:41	0:0	4	;
call	49:8	49:26	4	av_frame_free
arg	49:22	49:26	5	&buf
op	49:22	0:0	6	&
water	49:23	0:0	6	buf
water	49:27	0:0	4	;
return	50:8	50:18	4	ret
water	50:15	0:0	5	ret
water	51:4	0:0	4	}
for	54:4	86:4	2	(i = 0 ;i < delta;i ++)
forinit	54:9	54:14	3	i = 0 ;
water	54:9	0:0	4	i
op	54:11	0:0	4	=
water	54:13	0:0	4	0
water	54:14	0:0	4	;
cond	54:16	54:20	3	i < delta
water	54:16	0:0	4	i
op	54:18	0:0	4	<
water	54:20	0:0	4	delta
forexpr	54:27	54:28	3	i ++
water	54:27	0:0	4	i
op	54:28	0:0	4	++
stmts	54:32	86:4	3	
water	54:32	0:0	4	{
decl	55:8	55:24	4	AVFrame	*buf_out
call	56:8	56:69	4	av_fifo_generic_read
arg	56:29	56:36	5	s->fifo
water	56:29	0:0	6	s
op	56:30	0:0	6	->
water	56:32	0:0	6	fifo
arg	56:38	56:46	5	&buf_out
op	56:38	0:0	6	&
water	56:39	0:0	6	buf_out
arg	56:48	56:63	5	sizeof(buf_out)
op	56:48	0:0	6	sizeof
water	56:54	0:0	6	(
water	56:55	0:0	6	buf_out
water	56:62	0:0	6	)
arg	56:65	56:69	5	NULL
water	56:65	0:0	6	NULL
water	56:70	0:0	4	;
if	59:8	75:8	4	(!av_fifo_size (s -> fifo ) && i < delta - 1)
cond	59:12	59:50	5	!av_fifo_size (s -> fifo ) && i < delta - 1
op	59:12	0:0	6	!
call	59:13	59:33	6	av_fifo_size
arg	59:26	59:33	7	s->fifo
water	59:26	0:0	8	s
op	59:27	0:0	8	->
water	59:29	0:0	8	fifo
op	59:35	0:0	6	&&
water	59:38	0:0	6	i
op	59:40	0:0	6	<
water	59:42	0:0	6	delta
op	59:48	0:0	6	-
water	59:50	0:0	6	1
stmts	59:53	75:8	5	
water	59:53	0:0	6	{
decl	60:12	60:50	6	AVFrame	*dup
op	60:25	0:0	6	=
call	60:27	60:49	7	av_frame_clone
arg	60:42	60:49	8	buf_out
water	60:42	0:0	9	buf_out
call	62:12	62:60	6	av_log
arg	62:19	62:22	7	ctx
water	62:19	0:0	8	ctx
arg	62:24	62:36	7	AV_LOG_DEBUG
water	62:24	0:0	8	AV_LOG_DEBUG
arg	62:38	62:60	7	"Duplicating frame.\n"
water	62:38	0:0	8	"Duplicating frame.\n"
water	62:61	0:0	6	;
if	63:12	64:49	6	(dup)
cond	63:16	63:16	7	dup
water	63:16	0:0	8	dup
stmts	64:16	64:49	7	
water	64:16	0:0	8	ret
op	64:20	0:0	8	=
call	64:22	64:48	8	write_to_fifo
arg	64:36	64:43	9	s->fifo
water	64:36	0:0	10	s
op	64:37	0:0	10	->
water	64:39	0:0	10	fifo
arg	64:45	64:48	9	dup
water	64:45	0:0	10	dup
water	64:49	0:0	8	;
else	65:12	66:37	6
stmts	66:16	66:37	7	
water	66:16	0:0	8	ret
op	66:20	0:0	8	=
call	66:22	66:36	8	AVERROR
arg	66:30	66:36	9	ENOMEM
water	66:30	0:0	10	ENOMEM
water	66:37	0:0	8	;
if	68:12	72:12	6	(ret < 0)
cond	68:16	68:22	7	ret < 0
water	68:16	0:0	8	ret
op	68:20	0:0	8	<
water	68:22	0:0	8	0
stmts	68:25	72:12	7	
water	68:25	0:0	8	{
call	69:16	69:38	8	av_frame_free
arg	69:30	69:38	9	&buf_out
op	69:30	0:0	10	&
water	69:31	0:0	10	buf_out
water	69:39	0:0	8	;
call	70:16	70:34	8	av_frame_free
arg	70:30	70:34	9	&buf
op	70:30	0:0	10	&
water	70:31	0:0	10	buf
water	70:35	0:0	8	;
return	71:16	71:26	8	ret
water	71:23	0:0	9	ret
water	72:12	0:0	8	}
water	74:12	0:0	6	s
op	74:13	0:0	6	->
water	74:15	0:0	6	dup
op	74:18	0:0	6	++
water	74:20	0:0	6	;
water	75:8	0:0	6	}
water	77:8	0:0	4	buf_out
op	77:15	0:0	4	->
water	77:17	0:0	4	pts
op	77:21	0:0	4	=
call	77:23	78:54	4	av_rescale_q
arg	77:36	77:48	5	s->first_pts
water	77:36	0:0	6	s
op	77:37	0:0	6	->
water	77:39	0:0	6	first_pts
arg	77:50	77:67	5	inlink->time_base
water	77:50	0:0	6	inlink
op	77:56	0:0	6	->
water	77:58	0:0	6	time_base
arg	78:36	78:54	5	outlink->time_base
water	78:36	0:0	6	outlink
op	78:43	0:0	6	->
water	78:45	0:0	6	time_base
op	78:56	0:0	4	+
water	78:58	0:0	4	s
op	78:59	0:0	4	->
water	78:61	0:0	4	frames_out
water	78:71	0:0	4	;
if	80:8	83:8	4	(( ret =ff_filter_frame (outlink ,buf_out ) ) < 0)
cond	80:12	80:56	5	( ret =ff_filter_frame (outlink ,buf_out ) ) < 0
water	80:12	0:0	6	(
water	80:13	0:0	6	ret
op	80:17	0:0	6	=
call	80:19	80:51	6	ff_filter_frame
arg	80:35	80:42	7	outlink
water	80:35	0:0	8	outlink
arg	80:44	80:51	7	buf_out
water	80:44	0:0	8	buf_out
water	80:52	0:0	6	)
op	80:54	0:0	6	<
water	80:56	0:0	6	0
stmts	80:59	83:8	5	
water	80:59	0:0	6	{
call	81:12	81:30	6	av_frame_free
arg	81:26	81:30	7	&buf
op	81:26	0:0	8	&
water	81:27	0:0	8	buf
water	81:31	0:0	6	;
return	82:12	82:22	6	ret
water	82:19	0:0	7	ret
water	83:8	0:0	6	}
water	85:8	0:0	4	s
op	85:9	0:0	4	->
water	85:11	0:0	4	frames_out
op	85:21	0:0	4	++
water	85:23	0:0	4	;
water	86:4	0:0	4	}
call	87:4	87:22	2	flush_fifo
arg	87:15	87:22	3	s->fifo
water	87:15	0:0	4	s
op	87:16	0:0	4	->
water	87:18	0:0	4	fifo
water	87:23	0:0	2	;
water	89:4	0:0	2	ret
op	89:8	0:0	2	=
call	89:10	89:36	2	write_to_fifo
arg	89:24	89:31	3	s->fifo
water	89:24	0:0	4	s
op	89:25	0:0	4	->
water	89:27	0:0	4	fifo
arg	89:33	89:36	3	buf
water	89:33	0:0	4	buf
water	89:37	0:0	2	;
water	90:4	0:0	2	s
op	90:5	0:0	2	->
water	90:7	0:0	2	pts
op	90:11	0:0	2	=
water	90:13	0:0	2	s
op	90:14	0:0	2	->
water	90:16	0:0	2	first_pts
op	90:26	0:0	2	+
call	90:28	90:93	2	av_rescale_q
arg	90:41	90:54	3	s->frames_out
water	90:41	0:0	4	s
op	90:42	0:0	4	->
water	90:44	0:0	4	frames_out
arg	90:56	90:74	3	outlink->time_base
water	90:56	0:0	4	outlink
op	90:63	0:0	4	->
water	90:65	0:0	4	time_base
arg	90:76	90:93	3	inlink->time_base
water	90:76	0:0	4	inlink
op	90:82	0:0	4	->
water	90:84	0:0	4	time_base
water	90:94	0:0	2	;
return	92:4	92:14	2	ret
water	92:11	0:0	3	ret
