func	2:0	43:0	0	static int	asf_write_packet
params	2:27	0:0	1	
param	2:28	2:46	2	AVFormatContext *	s
param	2:48	2:61	2	AVPacket *	pkt
stmnts	0:0	42:12	1	
decl	4:4	4:34	2	ASFContext	*asf
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	priv_data
decl	5:4	5:27	2	AVIOContext	*pb
op	5:20	0:0	2	=
water	5:22	0:0	2	s
op	5:23	0:0	2	->
water	5:25	0:0	2	pb
decl	6:4	6:21	2	ASFStream	*stream
decl	7:4	7:25	2	AVCodecContext	*codec
decl	8:4	8:26	2	uint32_t	packet_number
decl	9:4	9:15	2	int64_t	pts
decl	10:4	10:17	2	int	start_sec
decl	11:4	11:26	2	int	flags
op	11:14	0:0	2	=
water	11:16	0:0	2	pkt
op	11:19	0:0	2	->
water	11:21	0:0	2	flags
decl	12:4	12:11	2	int	ret
decl	13:4	13:35	2	uint64_t	offset
op	13:20	0:0	2	=
call	13:22	13:34	3	avio_tell
arg	13:32	13:34	4	pb
water	13:32	0:0	5	pb
water	15:4	0:0	2	codec
op	15:11	0:0	2	=
water	15:13	0:0	2	s
op	15:14	0:0	2	->
water	15:16	0:0	2	streams
op	15:23	0:0	2	[
water	15:24	0:0	2	pkt
op	15:27	0:0	2	->
water	15:29	0:0	2	stream_index
op	15:41	0:0	2	]
op	15:42	0:0	2	->
water	15:44	0:0	2	codec
water	15:49	0:0	2	;
water	16:4	0:0	2	stream
op	16:11	0:0	2	=
op	16:13	0:0	2	&
water	16:14	0:0	2	asf
op	16:17	0:0	2	->
water	16:19	0:0	2	streams
op	16:26	0:0	2	[
water	16:27	0:0	2	pkt
op	16:30	0:0	2	->
water	16:32	0:0	2	stream_index
op	16:44	0:0	2	]
water	16:45	0:0	2	;
if	18:4	19:33	2	(codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	18:8	18:29	3	codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	18:8	0:0	4	codec
op	18:13	0:0	4	->
water	18:15	0:0	4	codec_type
op	18:26	0:0	4	==
water	18:29	0:0	4	AVMEDIA_TYPE_AUDIO
stmts	19:8	19:33	3	
water	19:8	0:0	4	flags
op	19:14	0:0	4	&=
water	19:17	0:0	4	~AV_PKT_FLAG_KEY
water	19:33	0:0	4	;
water	21:4	0:0	2	pts
op	21:8	0:0	2	=
water	21:10	0:0	2	(
water	21:11	0:0	2	pkt
op	21:14	0:0	2	->
water	21:16	0:0	2	pts
op	21:20	0:0	2	!=
water	21:23	0:0	2	AV_NOPTS_VALUE
water	21:37	0:0	2	)
water	21:39	0:0	2	?
water	21:41	0:0	2	pkt
op	21:44	0:0	2	->
water	21:46	0:0	2	pts
water	21:50	0:0	2	:
water	21:52	0:0	2	pkt
op	21:55	0:0	2	->
water	21:57	0:0	2	dts
water	21:60	0:0	2	;
call	22:4	22:36	2	av_assert0
arg	22:15	22:36	3	pts!=AV_NOPTS_VALUE
water	22:15	0:0	4	pts
op	22:19	0:0	4	!=
water	22:22	0:0	4	AV_NOPTS_VALUE
water	22:37	0:0	2	;
water	23:4	0:0	2	pts
op	23:8	0:0	2	*=
water	23:11	0:0	2	10000
water	23:16	0:0	2	;
water	24:4	0:0	2	asf
op	24:7	0:0	2	->
water	24:9	0:0	2	duration
op	24:18	0:0	2	=
call	24:20	24:68	2	FFMAX
arg	24:26	24:39	3	asf->duration
water	24:26	0:0	4	asf
op	24:29	0:0	4	->
water	24:31	0:0	4	duration
arg	24:41	24:68	3	pts+pkt->duration*10000
water	24:41	0:0	4	pts
op	24:45	0:0	4	+
water	24:47	0:0	4	pkt
op	24:50	0:0	4	->
water	24:52	0:0	4	duration
op	24:61	0:0	4	*
water	24:63	0:0	4	10000
water	24:69	0:0	2	;
water	26:4	0:0	2	packet_number
op	26:18	0:0	2	=
water	26:20	0:0	2	asf
op	26:23	0:0	2	->
water	26:25	0:0	2	nb_packets
water	26:35	0:0	2	;
call	27:4	28:51	2	put_frame
arg	27:14	27:15	3	s
water	27:14	0:0	4	s
arg	27:17	27:23	3	stream
water	27:17	0:0	4	stream
arg	27:25	27:54	3	s->streams[pkt->stream_index]
water	27:25	0:0	4	s
op	27:26	0:0	4	->
water	27:28	0:0	4	streams
op	27:35	0:0	4	[
water	27:36	0:0	4	pkt
op	27:39	0:0	4	->
water	27:41	0:0	4	stream_index
op	27:53	0:0	4	]
arg	28:14	28:22	3	pkt->dts
water	28:14	0:0	4	pkt
op	28:17	0:0	4	->
water	28:19	0:0	4	dts
arg	28:24	28:33	3	pkt->data
water	28:24	0:0	4	pkt
op	28:27	0:0	4	->
water	28:29	0:0	4	data
arg	28:35	28:44	3	pkt->size
water	28:35	0:0	4	pkt
op	28:38	0:0	4	->
water	28:40	0:0	4	size
arg	28:46	28:51	3	flags
water	28:46	0:0	4	flags
water	28:52	0:0	2	;
water	30:4	0:0	2	start_sec
op	30:14	0:0	2	=
call	30:16	31:36	2	(int)
arg	30:22	31:36	3	(PREROLL_TIME*10000+pts+ASF_INDEXED_INTERVAL-1)/ASF_INDEXED_INTERVAL
water	30:22	0:0	4	(
water	30:23	0:0	4	PREROLL_TIME
op	30:36	0:0	4	*
water	30:38	0:0	4	10000
op	30:44	0:0	4	+
water	30:46	0:0	4	pts
op	30:50	0:0	4	+
water	30:52	0:0	4	ASF_INDEXED_INTERVAL
op	30:73	0:0	4	-
water	30:75	0:0	4	1
water	30:76	0:0	4	)
op	31:14	0:0	4	/
water	31:16	0:0	4	ASF_INDEXED_INTERVAL
water	31:37	0:0	2	;
if	34:4	39:4	2	(( ! asf -> is_streamed ) && ( flags & AV_PKT_FLAG_KEY ))
cond	34:8	34:55	3	( ! asf -> is_streamed ) && ( flags & AV_PKT_FLAG_KEY )
water	34:8	0:0	4	(
op	34:9	0:0	4	!
water	34:10	0:0	4	asf
op	34:13	0:0	4	->
water	34:15	0:0	4	is_streamed
water	34:26	0:0	4	)
op	34:28	0:0	4	&&
water	34:31	0:0	4	(
water	34:32	0:0	4	flags
op	34:38	0:0	4	&
water	34:40	0:0	4	AV_PKT_FLAG_KEY
water	34:55	0:0	4	)
stmts	34:58	39:4	3	
water	34:58	0:0	4	{
decl	35:8	35:63	4	uint16_t	packet_count
op	35:30	0:0	4	=
water	35:32	0:0	4	asf
op	35:35	0:0	4	->
water	35:37	0:0	4	nb_packets
op	35:48	0:0	4	-
water	35:50	0:0	4	packet_number
water	36:8	0:0	4	ret
op	36:12	0:0	4	=
call	36:14	36:76	4	update_index
arg	36:27	36:28	5	s
water	36:27	0:0	6	s
arg	36:30	36:39	5	start_sec
water	36:30	0:0	6	start_sec
arg	36:41	36:54	5	packet_number
water	36:41	0:0	6	packet_number
arg	36:56	36:68	5	packet_count
water	36:56	0:0	6	packet_count
arg	36:70	36:76	5	offset
water	36:70	0:0	6	offset
water	36:77	0:0	4	;
if	37:8	38:22	4	(ret < 0)
cond	37:12	37:18	5	ret < 0
water	37:12	0:0	6	ret
op	37:16	0:0	6	<
water	37:18	0:0	6	0
stmts	38:12	38:22	5	
return	38:12	38:22	6	ret
water	38:19	0:0	7	ret
water	39:4	0:0	4	}
water	40:4	0:0	2	asf
op	40:7	0:0	2	->
water	40:9	0:0	2	end_sec
op	40:17	0:0	2	=
water	40:19	0:0	2	start_sec
water	40:28	0:0	2	;
return	42:4	42:12	2	0
water	42:11	0:0	3	0
