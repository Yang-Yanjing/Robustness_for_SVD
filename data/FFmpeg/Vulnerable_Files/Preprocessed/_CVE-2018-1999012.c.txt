func	1:0	99:0	0	static int	read_part_of_packet
params	1:30	0:0	1	
param	1:31	1:49	2	AVFormatContext *	s
param	1:51	1:63	2	int64_t *	pts
param	2:31	2:39	2	int *	len
param	2:41	2:51	2	int *	strid
param	2:53	2:68	2	int	read_packet
stmnts	0:0	98:12	1	
decl	3:4	3:27	2	AVIOContext	*pb
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	pb
decl	4:4	4:37	2	PVAContext	*pvactx
op	4:23	0:0	2	=
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	priv_data
decl	5:4	5:61	2	int	syncword
water	5:16	0:0	2	,
decl	5:4	5:61	2	int	streamid
water	5:26	0:0	2	,
decl	5:4	5:61	2	int	reserved
water	5:36	0:0	2	,
decl	5:4	5:61	2	int	flags
water	5:43	0:0	2	,
decl	5:4	5:61	2	int	length
water	5:51	0:0	2	,
decl	5:4	5:61	2	int	pts_flag
decl	6:4	6:46	2	int64_t	pva_pts
op	6:20	0:0	2	=
water	6:22	0:0	2	AV_NOPTS_VALUE
water	6:36	0:0	2	,
decl	6:4	6:46	2	int64_t	startpos
decl	7:4	7:11	2	int	ret
label	9:0	9:7	2	recover :
water	10:4	0:0	2	startpos
op	10:13	0:0	2	=
call	10:15	10:27	2	avio_tell
arg	10:25	10:27	3	pb
water	10:25	0:0	4	pb
water	10:28	0:0	2	;
water	12:4	0:0	2	syncword
op	12:13	0:0	2	=
call	12:15	12:27	2	avio_rb16
arg	12:25	12:27	3	pb
water	12:25	0:0	4	pb
water	12:28	0:0	2	;
water	13:4	0:0	2	streamid
op	13:13	0:0	2	=
call	13:15	13:25	2	avio_r8
arg	13:23	13:25	3	pb
water	13:23	0:0	4	pb
water	13:26	0:0	2	;
call	14:4	14:14	2	avio_r8
arg	14:12	14:14	3	pb
water	14:12	0:0	4	pb
water	14:15	0:0	2	;
water	15:4	0:0	2	reserved
op	15:13	0:0	2	=
call	15:15	15:25	2	avio_r8
arg	15:23	15:25	3	pb
water	15:23	0:0	4	pb
water	15:26	0:0	2	;
water	16:4	0:0	2	flags
op	16:13	0:0	2	=
call	16:15	16:25	2	avio_r8
arg	16:23	16:25	3	pb
water	16:23	0:0	4	pb
water	16:26	0:0	2	;
water	17:4	0:0	2	length
op	17:13	0:0	2	=
call	17:15	17:27	2	avio_rb16
arg	17:25	17:27	3	pb
water	17:25	0:0	4	pb
water	17:28	0:0	2	;
water	19:4	0:0	2	pts_flag
op	19:13	0:0	2	=
water	19:15	0:0	2	flags
op	19:21	0:0	2	&
water	19:23	0:0	2	0
water	19:24	0:0	2	x10
water	19:27	0:0	2	;
if	21:4	24:4	2	(syncword != PVA_MAGIC)
cond	21:8	21:20	3	syncword != PVA_MAGIC
water	21:8	0:0	4	syncword
op	21:17	0:0	4	!=
water	21:20	0:0	4	PVA_MAGIC
stmts	21:31	24:4	3	
water	21:31	0:0	4	{
call	22:8	22:53	4	pva_log
arg	22:16	22:17	5	s
water	22:16	0:0	6	s
arg	22:19	22:31	5	AV_LOG_ERROR
water	22:19	0:0	6	AV_LOG_ERROR
arg	22:33	22:53	5	"invalid syncword\n"
water	22:33	0:0	6	"invalid syncword\n"
water	22:54	0:0	4	;
return	23:8	23:27	4	AVERROR(EIO)
call	23:15	23:26	5	AVERROR
arg	23:23	23:26	6	EIO
water	23:23	0:0	7	EIO
water	24:4	0:0	4	}
if	25:4	28:4	2	(streamid != PVA_VIDEO_PAYLOAD && streamid != PVA_AUDIO_PAYLOAD)
cond	25:8	25:53	3	streamid != PVA_VIDEO_PAYLOAD && streamid != PVA_AUDIO_PAYLOAD
water	25:8	0:0	4	streamid
op	25:17	0:0	4	!=
water	25:20	0:0	4	PVA_VIDEO_PAYLOAD
op	25:38	0:0	4	&&
water	25:41	0:0	4	streamid
op	25:50	0:0	4	!=
water	25:53	0:0	4	PVA_AUDIO_PAYLOAD
stmts	25:72	28:4	3	
water	25:72	0:0	4	{
call	26:8	26:53	4	pva_log
arg	26:16	26:17	5	s
water	26:16	0:0	6	s
arg	26:19	26:31	5	AV_LOG_ERROR
water	26:19	0:0	6	AV_LOG_ERROR
arg	26:33	26:53	5	"invalid streamid\n"
water	26:33	0:0	6	"invalid streamid\n"
water	26:54	0:0	4	;
return	27:8	27:27	4	AVERROR(EIO)
call	27:15	27:26	5	AVERROR
arg	27:23	27:26	6	EIO
water	27:23	0:0	7	EIO
water	28:4	0:0	4	}
if	29:4	31:4	2	(reserved != 0 x55)
cond	29:8	29:21	3	reserved != 0 x55
water	29:8	0:0	4	reserved
op	29:17	0:0	4	!=
water	29:20	0:0	4	0
water	29:21	0:0	4	x55
stmts	29:26	31:4	3	
water	29:26	0:0	4	{
call	30:8	30:72	4	pva_log
arg	30:16	30:17	5	s
water	30:16	0:0	6	s
arg	30:19	30:33	5	AV_LOG_WARNING
water	30:19	0:0	6	AV_LOG_WARNING
arg	30:35	30:72	5	"expected reserved byte to be 0x55\n"
water	30:35	0:0	6	"expected reserved byte to be 0x55\n"
water	30:73	0:0	4	;
water	31:4	0:0	4	}
if	32:4	35:4	2	(length > PVA_MAX_PAYLOAD_LENGTH)
cond	32:8	32:17	3	length > PVA_MAX_PAYLOAD_LENGTH
water	32:8	0:0	4	length
op	32:15	0:0	4	>
water	32:17	0:0	4	PVA_MAX_PAYLOAD_LENGTH
stmts	32:41	35:4	3	
water	32:41	0:0	4	{
call	33:8	33:70	4	pva_log
arg	33:16	33:17	5	s
water	33:16	0:0	6	s
arg	33:19	33:31	5	AV_LOG_ERROR
water	33:19	0:0	6	AV_LOG_ERROR
arg	33:33	33:62	5	"invalid payload length %u\n"
water	33:33	0:0	6	"invalid payload length %u\n"
arg	33:64	33:70	5	length
water	33:64	0:0	6	length
water	33:71	0:0	4	;
return	34:8	34:27	4	AVERROR(EIO)
call	34:15	34:26	5	AVERROR
arg	34:23	34:26	6	EIO
water	34:23	0:0	7	EIO
water	35:4	0:0	4	}
if	37:4	40:4	2	(streamid == PVA_VIDEO_PAYLOAD && pts_flag)
cond	37:8	37:41	3	streamid == PVA_VIDEO_PAYLOAD && pts_flag
water	37:8	0:0	4	streamid
op	37:17	0:0	4	==
water	37:20	0:0	4	PVA_VIDEO_PAYLOAD
op	37:38	0:0	4	&&
water	37:41	0:0	4	pts_flag
stmts	37:51	40:4	3	
water	37:51	0:0	4	{
water	38:8	0:0	4	pva_pts
op	38:16	0:0	4	=
call	38:18	38:30	4	avio_rb32
arg	38:28	38:30	5	pb
water	38:28	0:0	6	pb
water	38:31	0:0	4	;
water	39:8	0:0	4	length
op	39:15	0:0	4	-=
water	39:18	0:0	4	4
water	39:19	0:0	4	;
water	40:4	0:0	4	}
else	40:6	90:4	2
stmts	40:11	90:4	3	
if	40:11	90:4	4	(streamid == PVA_AUDIO_PAYLOAD)
cond	40:15	40:27	5	streamid == PVA_AUDIO_PAYLOAD
water	40:15	0:0	6	streamid
op	40:24	0:0	6	==
water	40:27	0:0	6	PVA_AUDIO_PAYLOAD
stmts	40:46	90:4	5	
water	40:46	0:0	6	{
if	45:8	82:8	6	(! pvactx -> continue_pes)
cond	45:12	45:21	7	! pvactx -> continue_pes
op	45:12	0:0	8	!
water	45:13	0:0	8	pvactx
op	45:19	0:0	8	->
water	45:21	0:0	8	continue_pes
stmts	45:35	82:8	7	
water	45:35	0:0	8	{
decl	46:12	47:25	8	int	pes_signal
water	46:26	0:0	8	,
decl	46:12	47:25	8	int	pes_header_data_length
water	46:50	0:0	8	,
decl	46:12	47:25	8	int	pes_packet_length
water	46:69	0:0	8	,
decl	46:12	47:25	8	int	pes_flags
decl	48:12	48:46	8	unsigned char	pes_header_data[256]
water	50:12	0:0	8	pes_signal
op	50:35	0:0	8	=
call	50:37	50:49	8	avio_rb24
arg	50:47	50:49	9	pb
water	50:47	0:0	10	pb
water	50:50	0:0	8	;
call	51:12	51:22	8	avio_r8
arg	51:20	51:22	9	pb
water	51:20	0:0	10	pb
water	51:23	0:0	8	;
water	52:12	0:0	8	pes_packet_length
op	52:35	0:0	8	=
call	52:37	52:49	8	avio_rb16
arg	52:47	52:49	9	pb
water	52:47	0:0	10	pb
water	52:50	0:0	8	;
water	53:12	0:0	8	pes_flags
op	53:35	0:0	8	=
call	53:37	53:49	8	avio_rb16
arg	53:47	53:49	9	pb
water	53:47	0:0	10	pb
water	53:50	0:0	8	;
water	54:12	0:0	8	pes_header_data_length
op	54:35	0:0	8	=
call	54:37	54:47	8	avio_r8
arg	54:45	54:47	9	pb
water	54:45	0:0	10	pb
water	54:48	0:0	8	;
if	56:12	63:12	8	(pes_signal != 1 || pes_header_data_length == 0)
cond	56:16	56:61	9	pes_signal != 1 || pes_header_data_length == 0
water	56:16	0:0	10	pes_signal
op	56:27	0:0	10	!=
water	56:30	0:0	10	1
op	56:32	0:0	10	||
water	56:35	0:0	10	pes_header_data_length
op	56:58	0:0	10	==
water	56:61	0:0	10	0
stmts	56:64	63:12	9	
water	56:64	0:0	10	{
call	57:16	58:63	10	pva_log
arg	57:24	57:25	11	s
water	57:24	0:0	12	s
arg	57:27	57:41	11	AV_LOG_WARNING
water	57:27	0:0	12	AV_LOG_WARNING
arg	57:43	58:63	11	"expected non empty signaled PES packet, ""trying to recover\n"
water	57:43	0:0	12	"expected non empty signaled PES packet, "
water	58:42	0:0	12	"trying to recover\n"
water	58:64	0:0	10	;
call	59:16	59:40	10	avio_skip
arg	59:26	59:28	11	pb
water	59:26	0:0	12	pb
arg	59:30	59:40	11	length-9
water	59:30	0:0	12	length
op	59:37	0:0	12	-
water	59:39	0:0	12	9
water	59:41	0:0	10	;
if	60:16	61:39	10	(! read_packet)
cond	60:20	60:21	11	! read_packet
op	60:20	0:0	12	!
water	60:21	0:0	12	read_packet
stmts	61:20	61:39	11	
return	61:20	61:39	12	AVERROR(EIO)
call	61:27	61:38	13	AVERROR
arg	61:35	61:38	14	EIO
water	61:35	0:0	15	EIO
goto	62:16	62:28	10	recover
water	62:21	0:0	11	recover
water	63:12	0:0	10	}
water	65:12	0:0	8	ret
op	65:16	0:0	8	=
call	65:18	65:71	8	avio_read
arg	65:28	65:30	9	pb
water	65:28	0:0	10	pb
arg	65:32	65:47	9	pes_header_data
water	65:32	0:0	10	pes_header_data
arg	65:49	65:71	9	pes_header_data_length
water	65:49	0:0	10	pes_header_data_length
water	65:72	0:0	8	;
if	66:12	67:58	8	(ret != pes_header_data_length)
cond	66:16	66:23	9	ret != pes_header_data_length
water	66:16	0:0	10	ret
op	66:20	0:0	10	!=
water	66:23	0:0	10	pes_header_data_length
stmts	67:16	67:58	9	
return	67:16	67:58	10	ret<0?ret:AVERROR_INVALIDDATA
water	67:23	0:0	11	ret
op	67:27	0:0	11	<
water	67:29	0:0	11	0
water	67:31	0:0	11	?
water	67:33	0:0	11	ret
water	67:37	0:0	11	:
water	67:39	0:0	11	AVERROR_INVALIDDATA
water	68:12	0:0	8	length
op	68:19	0:0	8	-=
water	68:22	0:0	8	9
op	68:24	0:0	8	+
water	68:26	0:0	8	pes_header_data_length
water	68:48	0:0	8	;
water	70:12	0:0	8	pes_packet_length
op	70:30	0:0	8	-=
water	70:33	0:0	8	3
op	70:35	0:0	8	+
water	70:37	0:0	8	pes_header_data_length
water	70:59	0:0	8	;
water	72:12	0:0	8	pvactx
op	72:18	0:0	8	->
water	72:20	0:0	8	continue_pes
op	72:33	0:0	8	=
water	72:35	0:0	8	pes_packet_length
water	72:52	0:0	8	;
if	74:12	81:12	8	(pes_flags & 0 x80 && ( pes_header_data [ 0 ] & 0 xf0 ) == 0 x20)
cond	74:16	74:68	9	pes_flags & 0 x80 && ( pes_header_data [ 0 ] & 0 xf0 ) == 0 x20
water	74:16	0:0	10	pes_flags
op	74:26	0:0	10	&
water	74:28	0:0	10	0
water	74:29	0:0	10	x80
op	74:33	0:0	10	&&
water	74:36	0:0	10	(
water	74:37	0:0	10	pes_header_data
op	74:52	0:0	10	[
water	74:53	0:0	10	0
op	74:54	0:0	10	]
op	74:56	0:0	10	&
water	74:58	0:0	10	0
water	74:59	0:0	10	xf0
water	74:62	0:0	10	)
op	74:64	0:0	10	==
water	74:67	0:0	10	0
water	74:68	0:0	10	x20
stmts	74:73	81:12	9	
water	74:73	0:0	10	{
if	75:16	79:16	10	(pes_header_data_length < 5)
cond	75:20	75:45	11	pes_header_data_length < 5
water	75:20	0:0	12	pes_header_data_length
op	75:43	0:0	12	<
water	75:45	0:0	12	5
stmts	75:48	79:16	11	
water	75:48	0:0	12	{
call	76:20	76:65	12	pva_log
arg	76:28	76:29	13	s
water	76:28	0:0	14	s
arg	76:31	76:43	13	AV_LOG_ERROR
water	76:31	0:0	14	AV_LOG_ERROR
arg	76:45	76:65	13	"header too short\n"
water	76:45	0:0	14	"header too short\n"
water	76:66	0:0	12	;
call	77:20	77:40	12	avio_skip
arg	77:30	77:32	13	pb
water	77:30	0:0	14	pb
arg	77:34	77:40	13	length
water	77:34	0:0	14	length
water	77:41	0:0	12	;
return	78:20	78:46	12	AVERROR_INVALIDDATA
water	78:27	0:0	13	AVERROR_INVALIDDATA
water	79:16	0:0	12	}
water	80:16	0:0	10	pva_pts
op	80:24	0:0	10	=
call	80:26	80:58	10	ff_parse_pes_pts
arg	80:43	80:58	11	pes_header_data
water	80:43	0:0	12	pes_header_data
water	80:59	0:0	10	;
water	81:12	0:0	10	}
water	82:8	0:0	8	}
water	84:8	0:0	6	pvactx
op	84:14	0:0	6	->
water	84:16	0:0	6	continue_pes
op	84:29	0:0	6	-=
water	84:32	0:0	6	length
water	84:38	0:0	6	;
if	86:8	89:8	6	(pvactx -> continue_pes < 0)
cond	86:12	86:35	7	pvactx -> continue_pes < 0
water	86:12	0:0	8	pvactx
op	86:18	0:0	8	->
water	86:20	0:0	8	continue_pes
op	86:33	0:0	8	<
water	86:35	0:0	8	0
stmts	86:38	89:8	7	
water	86:38	0:0	8	{
call	87:12	87:64	8	pva_log
arg	87:20	87:21	9	s
water	87:20	0:0	10	s
arg	87:23	87:37	9	AV_LOG_WARNING
water	87:23	0:0	10	AV_LOG_WARNING
arg	87:39	87:64	9	"audio data corruption\n"
water	87:39	0:0	10	"audio data corruption\n"
water	87:65	0:0	8	;
water	88:12	0:0	8	pvactx
op	88:18	0:0	8	->
water	88:20	0:0	8	continue_pes
op	88:33	0:0	8	=
water	88:35	0:0	8	0
water	88:36	0:0	8	;
water	89:8	0:0	8	}
water	90:4	0:0	6	}
if	92:4	93:93	2	(pva_pts != AV_NOPTS_VALUE)
cond	92:8	92:19	3	pva_pts != AV_NOPTS_VALUE
water	92:8	0:0	4	pva_pts
op	92:16	0:0	4	!=
water	92:19	0:0	4	AV_NOPTS_VALUE
stmts	93:8	93:93	3	
call	93:8	93:92	4	av_add_index_entry
arg	93:27	93:49	5	s->streams[streamid-1]
water	93:27	0:0	6	s
op	93:28	0:0	6	->
water	93:30	0:0	6	streams
op	93:37	0:0	6	[
water	93:38	0:0	6	streamid
op	93:46	0:0	6	-
water	93:47	0:0	6	1
op	93:48	0:0	6	]
arg	93:51	93:59	5	startpos
water	93:51	0:0	6	startpos
arg	93:61	93:68	5	pva_pts
water	93:61	0:0	6	pva_pts
arg	93:70	93:71	5	0
water	93:70	0:0	6	0
arg	93:73	93:74	5	0
water	93:73	0:0	6	0
arg	93:76	93:92	5	AVINDEX_KEYFRAME
water	93:76	0:0	6	AVINDEX_KEYFRAME
water	93:93	0:0	4	;
op	95:4	0:0	2	*
water	95:5	0:0	2	pts
op	95:11	0:0	2	=
water	95:13	0:0	2	pva_pts
water	95:20	0:0	2	;
op	96:4	0:0	2	*
water	96:5	0:0	2	len
op	96:11	0:0	2	=
water	96:13	0:0	2	length
water	96:19	0:0	2	;
op	97:4	0:0	2	*
water	97:5	0:0	2	strid
op	97:11	0:0	2	=
water	97:13	0:0	2	streamid
water	97:21	0:0	2	;
return	98:4	98:12	2	0
water	98:11	0:0	3	0
