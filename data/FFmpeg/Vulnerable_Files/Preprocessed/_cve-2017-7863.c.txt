func	2:0	159:0	0	static int	decode_frame_common
params	2:30	0:0	1	
param	2:31	2:52	2	AVCodecContext *	avctx
param	2:54	2:70	2	PNGDecContext *	s
param	3:31	3:41	2	AVFrame *	p
param	3:43	3:58	2	AVPacket *	avpkt
stmnts	0:0	158:14	1	
decl	5:4	5:34	2	AVDictionary	*metadata
op	5:28	0:0	2	=
water	5:30	0:0	2	NULL
decl	6:4	6:24	2	uint32_t	tag
water	6:16	0:0	2	,
decl	6:4	6:24	2	uint32_t	length
decl	7:4	7:27	2	int	decode_next_dat
op	7:24	0:0	2	=
water	7:26	0:0	2	0
decl	8:4	8:11	2	int	ret
for	10:4	105:4	2	(;;)
forinit	10:9	10:9	3	;
water	10:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	10:13	105:4	3	
water	10:13	0:0	4	{
water	11:8	0:0	4	length
op	11:15	0:0	4	=
call	11:17	11:50	4	bytestream2_get_bytes_left
arg	11:44	11:50	5	&s->gb
op	11:44	0:0	6	&
water	11:45	0:0	6	s
op	11:46	0:0	6	->
water	11:48	0:0	6	gb
water	11:51	0:0	4	;
if	12:8	25:8	4	(length <= 0)
cond	12:12	12:22	5	length <= 0
water	12:12	0:0	6	length
op	12:19	0:0	6	<=
water	12:22	0:0	6	0
stmts	12:25	25:8	5	
water	12:25	0:0	6	{
if	13:12	18:12	6	(CONFIG_APNG_DECODER && avctx -> codec_id == AV_CODEC_ID_APNG && length == 0)
cond	13:16	13:88	7	CONFIG_APNG_DECODER && avctx -> codec_id == AV_CODEC_ID_APNG && length == 0
water	13:16	0:0	8	CONFIG_APNG_DECODER
op	13:36	0:0	8	&&
water	13:39	0:0	8	avctx
op	13:44	0:0	8	->
water	13:46	0:0	8	codec_id
op	13:55	0:0	8	==
water	13:58	0:0	8	AV_CODEC_ID_APNG
op	13:75	0:0	8	&&
water	13:78	0:0	8	length
op	13:85	0:0	8	==
water	13:88	0:0	8	0
stmts	13:91	18:12	7	
water	13:91	0:0	8	{
if	14:16	15:28	8	(! ( s -> state & PNG_IDAT ))
cond	14:20	14:41	9	! ( s -> state & PNG_IDAT )
op	14:20	0:0	10	!
water	14:21	0:0	10	(
water	14:22	0:0	10	s
op	14:23	0:0	10	->
water	14:25	0:0	10	state
op	14:31	0:0	10	&
water	14:33	0:0	10	PNG_IDAT
water	14:41	0:0	10	)
stmts	15:20	15:28	9	
return	15:20	15:28	10	0
water	15:27	0:0	11	0
else	16:16	17:34	8
stmts	17:20	17:34	9	
goto	17:20	17:34	10	exit_loop
water	17:25	0:0	11	exit_loop
water	18:12	0:0	8	}
call	19:12	19:65	6	av_log
arg	19:19	19:24	7	avctx
water	19:19	0:0	8	avctx
arg	19:26	19:38	7	AV_LOG_ERROR
water	19:26	0:0	8	AV_LOG_ERROR
arg	19:40	19:57	7	"%d bytes left\n"
water	19:40	0:0	8	"%d bytes left\n"
arg	19:59	19:65	7	length
water	19:59	0:0	8	length
water	19:66	0:0	6	;
if	20:12	22:30	6	(s -> state & PNG_ALLIMAGE && avctx -> strict_std_compliance <= FF_COMPLIANCE_NORMAL)
cond	20:19	21:51	7	s -> state & PNG_ALLIMAGE && avctx -> strict_std_compliance <= FF_COMPLIANCE_NORMAL
water	20:19	0:0	8	s
op	20:20	0:0	8	->
water	20:22	0:0	8	state
op	20:28	0:0	8	&
water	20:30	0:0	8	PNG_ALLIMAGE
op	21:16	0:0	8	&&
water	21:19	0:0	8	avctx
op	21:24	0:0	8	->
water	21:26	0:0	8	strict_std_compliance
op	21:48	0:0	8	<=
water	21:51	0:0	8	FF_COMPLIANCE_NORMAL
stmts	22:16	22:30	7	
goto	22:16	22:30	8	exit_loop
water	22:21	0:0	9	exit_loop
water	23:12	0:0	6	ret
op	23:16	0:0	6	=
water	23:18	0:0	6	AVERROR_INVALIDDATA
water	23:37	0:0	6	;
goto	24:12	24:21	6	fail
water	24:17	0:0	7	fail
water	25:8	0:0	6	}
water	27:8	0:0	4	length
op	27:15	0:0	4	=
call	27:17	27:44	4	bytestream2_get_be32
arg	27:38	27:44	5	&s->gb
op	27:38	0:0	6	&
water	27:39	0:0	6	s
op	27:40	0:0	6	->
water	27:42	0:0	6	gb
water	27:45	0:0	4	;
if	28:8	32:8	4	(length > 0 x7fffffff || length >bytestream2_get_bytes_left (& s -> gb ))
cond	28:12	28:77	5	length > 0 x7fffffff || length >bytestream2_get_bytes_left (& s -> gb )
water	28:12	0:0	6	length
op	28:19	0:0	6	>
water	28:21	0:0	6	0
water	28:22	0:0	6	x7fffffff
op	28:32	0:0	6	||
water	28:35	0:0	6	length
op	28:42	0:0	6	>
call	28:44	28:77	6	bytestream2_get_bytes_left
arg	28:71	28:77	7	&s->gb
op	28:71	0:0	8	&
water	28:72	0:0	8	s
op	28:73	0:0	8	->
water	28:75	0:0	8	gb
stmts	28:80	32:8	5	
water	28:80	0:0	6	{
call	29:12	29:57	6	av_log
arg	29:19	29:24	7	avctx
water	29:19	0:0	8	avctx
arg	29:26	29:38	7	AV_LOG_ERROR
water	29:26	0:0	8	AV_LOG_ERROR
arg	29:40	29:57	7	"chunk too big\n"
water	29:40	0:0	8	"chunk too big\n"
water	29:58	0:0	6	;
water	30:12	0:0	6	ret
op	30:16	0:0	6	=
water	30:18	0:0	6	AVERROR_INVALIDDATA
water	30:37	0:0	6	;
goto	31:12	31:21	6	fail
water	31:17	0:0	7	fail
water	32:8	0:0	6	}
water	33:8	0:0	4	tag
op	33:12	0:0	4	=
call	33:14	33:41	4	bytestream2_get_le32
arg	33:35	33:41	5	&s->gb
op	33:35	0:0	6	&
water	33:36	0:0	6	s
op	33:37	0:0	6	->
water	33:39	0:0	6	gb
water	33:42	0:0	4	;
if	34:8	39:45	4	(avctx -> debug & FF_DEBUG_STARTCODE)
cond	34:12	34:27	5	avctx -> debug & FF_DEBUG_STARTCODE
water	34:12	0:0	6	avctx
op	34:17	0:0	6	->
water	34:19	0:0	6	debug
op	34:25	0:0	6	&
water	34:27	0:0	6	FF_DEBUG_STARTCODE
stmts	35:12	39:45	5	
call	35:12	39:44	6	av_log
arg	35:19	35:24	7	avctx
water	35:19	0:0	8	avctx
arg	35:26	35:38	7	AV_LOG_DEBUG
water	35:26	0:0	8	AV_LOG_DEBUG
arg	35:40	35:71	7	"png: tag=%c%c%c%c length=%u\n"
water	35:40	0:0	8	"png: tag=%c%c%c%c length=%u\n"
arg	36:16	36:28	7	(tag&0xff)
water	36:16	0:0	8	(
water	36:17	0:0	8	tag
op	36:21	0:0	8	&
water	36:23	0:0	8	0
water	36:24	0:0	8	xff
water	36:27	0:0	8	)
arg	37:16	37:35	7	((tag>>8)&0xff)
water	37:16	0:0	8	(
water	37:17	0:0	8	(
water	37:18	0:0	8	tag
op	37:22	0:0	8	>>
water	37:25	0:0	8	8
water	37:26	0:0	8	)
op	37:28	0:0	8	&
water	37:30	0:0	8	0
water	37:31	0:0	8	xff
water	37:34	0:0	8	)
arg	38:16	38:36	7	((tag>>16)&0xff)
water	38:16	0:0	8	(
water	38:17	0:0	8	(
water	38:18	0:0	8	tag
op	38:22	0:0	8	>>
water	38:25	0:0	8	16
water	38:27	0:0	8	)
op	38:29	0:0	8	&
water	38:31	0:0	8	0
water	38:32	0:0	8	xff
water	38:35	0:0	8	)
arg	39:16	39:36	7	((tag>>24)&0xff)
water	39:16	0:0	8	(
water	39:17	0:0	8	(
water	39:18	0:0	8	tag
op	39:22	0:0	8	>>
water	39:25	0:0	8	24
water	39:27	0:0	8	)
op	39:29	0:0	8	&
water	39:31	0:0	8	0
water	39:32	0:0	8	xff
water	39:35	0:0	8	)
arg	39:38	39:44	7	length
water	39:38	0:0	8	length
water	39:45	0:0	6	;
switch	40:8	104:8	4	(tag)
cond	40:16	40:16	5	tag
water	40:16	0:0	6	tag
stmts	40:21	104:8	5	
water	40:21	0:0	6	{
water	41:8	0:0	6	case
call	41:13	41:37	6	MKTAG
arg	41:19	41:22	7	'I'
water	41:19	0:0	8	'I'
arg	41:24	41:27	7	'H'
water	41:24	0:0	8	'H'
arg	41:29	41:32	7	'D'
water	41:29	0:0	8	'D'
arg	41:34	41:37	7	'R'
water	41:34	0:0	8	'R'
water	41:38	0:0	6	:
water	42:12	0:0	6	if
water	42:15	0:0	6	(
water	42:16	0:0	6	(
water	42:17	0:0	6	ret
op	42:21	0:0	6	=
call	42:23	42:57	6	decode_ihdr_chunk
arg	42:41	42:46	7	avctx
water	42:41	0:0	8	avctx
arg	42:48	42:49	7	s
water	42:48	0:0	8	s
arg	42:51	42:57	7	length
water	42:51	0:0	8	length
water	42:58	0:0	6	)
op	42:60	0:0	6	<
water	42:62	0:0	6	0
water	42:63	0:0	6	)
water	43:16	0:0	6	goto
water	43:21	0:0	6	fail
water	43:25	0:0	6	;
break	44:12	44:17	6	
water	45:8	0:0	6	case
call	45:13	45:37	6	MKTAG
arg	45:19	45:22	7	'p'
water	45:19	0:0	8	'p'
arg	45:24	45:27	7	'H'
water	45:24	0:0	8	'H'
arg	45:29	45:32	7	'Y'
water	45:29	0:0	8	'Y'
arg	45:34	45:37	7	's'
water	45:34	0:0	8	's'
water	45:38	0:0	6	:
water	46:12	0:0	6	if
water	46:15	0:0	6	(
water	46:16	0:0	6	(
water	46:17	0:0	6	ret
op	46:21	0:0	6	=
call	46:23	46:49	6	decode_phys_chunk
arg	46:41	46:46	7	avctx
water	46:41	0:0	8	avctx
arg	46:48	46:49	7	s
water	46:48	0:0	8	s
water	46:50	0:0	6	)
op	46:52	0:0	6	<
water	46:54	0:0	6	0
water	46:55	0:0	6	)
water	47:16	0:0	6	goto
water	47:21	0:0	6	fail
water	47:25	0:0	6	;
break	48:12	48:17	6	
water	49:8	0:0	6	case
call	49:13	49:37	6	MKTAG
arg	49:19	49:22	7	'f'
water	49:19	0:0	8	'f'
arg	49:24	49:27	7	'c'
water	49:24	0:0	8	'c'
arg	49:29	49:32	7	'T'
water	49:29	0:0	8	'T'
arg	49:34	49:37	7	'L'
water	49:34	0:0	8	'L'
water	49:38	0:0	6	:
water	50:12	0:0	6	if
water	50:15	0:0	6	(
op	50:16	0:0	6	!
water	50:17	0:0	6	CONFIG_APNG_DECODER
op	50:37	0:0	6	||
water	50:40	0:0	6	avctx
op	50:45	0:0	6	->
water	50:47	0:0	6	codec_id
op	50:56	0:0	6	!=
water	50:59	0:0	6	AV_CODEC_ID_APNG
water	50:75	0:0	6	)
water	51:16	0:0	6	goto
water	51:21	0:0	6	skip_tag
water	51:29	0:0	6	;
if	52:12	53:25	6	(( ret =decode_fctl_chunk (avctx ,s ,length ) ) < 0)
cond	52:16	52:62	7	( ret =decode_fctl_chunk (avctx ,s ,length ) ) < 0
water	52:16	0:0	8	(
water	52:17	0:0	8	ret
op	52:21	0:0	8	=
call	52:23	52:57	8	decode_fctl_chunk
arg	52:41	52:46	9	avctx
water	52:41	0:0	10	avctx
arg	52:48	52:49	9	s
water	52:48	0:0	10	s
arg	52:51	52:57	9	length
water	52:51	0:0	10	length
water	52:58	0:0	8	)
op	52:60	0:0	8	<
water	52:62	0:0	8	0
stmts	53:16	53:25	7	
goto	53:16	53:25	8	fail
water	53:21	0:0	9	fail
water	54:12	0:0	6	decode_next_dat
op	54:28	0:0	6	=
water	54:30	0:0	6	1
water	54:31	0:0	6	;
break	55:12	55:17	6	
water	56:8	0:0	6	case
call	56:13	56:37	6	MKTAG
arg	56:19	56:22	7	'f'
water	56:19	0:0	8	'f'
arg	56:24	56:27	7	'd'
water	56:24	0:0	8	'd'
arg	56:29	56:32	7	'A'
water	56:29	0:0	8	'A'
arg	56:34	56:37	7	'T'
water	56:34	0:0	8	'T'
water	56:38	0:0	6	:
water	57:12	0:0	6	if
water	57:15	0:0	6	(
op	57:16	0:0	6	!
water	57:17	0:0	6	CONFIG_APNG_DECODER
op	57:37	0:0	6	||
water	57:40	0:0	6	avctx
op	57:45	0:0	6	->
water	57:47	0:0	6	codec_id
op	57:56	0:0	6	!=
water	57:59	0:0	6	AV_CODEC_ID_APNG
water	57:75	0:0	6	)
water	58:16	0:0	6	goto
water	58:21	0:0	6	skip_tag
water	58:29	0:0	6	;
if	59:12	62:12	6	(! decode_next_dat)
cond	59:16	59:17	7	! decode_next_dat
op	59:16	0:0	8	!
water	59:17	0:0	8	decode_next_dat
stmts	59:34	62:12	7	
water	59:34	0:0	8	{
water	60:16	0:0	8	ret
op	60:20	0:0	8	=
water	60:22	0:0	8	AVERROR_INVALIDDATA
water	60:41	0:0	8	;
goto	61:16	61:25	8	fail
water	61:21	0:0	9	fail
water	62:12	0:0	8	}
call	63:12	63:39	6	bytestream2_get_be32
arg	63:33	63:39	7	&s->gb
op	63:33	0:0	8	&
water	63:34	0:0	8	s
op	63:35	0:0	8	->
water	63:37	0:0	8	gb
water	63:40	0:0	6	;
water	64:12	0:0	6	length
op	64:19	0:0	6	-=
water	64:22	0:0	6	4
water	64:23	0:0	6	;
water	66:8	0:0	6	case
call	66:13	66:37	6	MKTAG
arg	66:19	66:22	7	'I'
water	66:19	0:0	8	'I'
arg	66:24	66:27	7	'D'
water	66:24	0:0	8	'D'
arg	66:29	66:32	7	'A'
water	66:29	0:0	8	'A'
arg	66:34	66:37	7	'T'
water	66:34	0:0	8	'T'
water	66:38	0:0	6	:
water	67:12	0:0	6	if
water	67:15	0:0	6	(
water	67:16	0:0	6	CONFIG_APNG_DECODER
op	67:36	0:0	6	&&
water	67:39	0:0	6	avctx
op	67:44	0:0	6	->
water	67:46	0:0	6	codec_id
op	67:55	0:0	6	==
water	67:58	0:0	6	AV_CODEC_ID_APNG
op	67:75	0:0	6	&&
op	67:78	0:0	6	!
water	67:79	0:0	6	decode_next_dat
water	67:94	0:0	6	)
water	68:16	0:0	6	goto
water	68:21	0:0	6	skip_tag
water	68:29	0:0	6	;
if	69:12	70:25	6	(( ret =decode_idat_chunk (avctx ,s ,length ,p ) ) < 0)
cond	69:16	69:65	7	( ret =decode_idat_chunk (avctx ,s ,length ,p ) ) < 0
water	69:16	0:0	8	(
water	69:17	0:0	8	ret
op	69:21	0:0	8	=
call	69:23	69:60	8	decode_idat_chunk
arg	69:41	69:46	9	avctx
water	69:41	0:0	10	avctx
arg	69:48	69:49	9	s
water	69:48	0:0	10	s
arg	69:51	69:57	9	length
water	69:51	0:0	10	length
arg	69:59	69:60	9	p
water	69:59	0:0	10	p
water	69:61	0:0	8	)
op	69:63	0:0	8	<
water	69:65	0:0	8	0
stmts	70:16	70:25	7	
goto	70:16	70:25	8	fail
water	70:21	0:0	9	fail
break	71:12	71:17	6	
water	72:8	0:0	6	case
call	72:13	72:37	6	MKTAG
arg	72:19	72:22	7	'P'
water	72:19	0:0	8	'P'
arg	72:24	72:27	7	'L'
water	72:24	0:0	8	'L'
arg	72:29	72:32	7	'T'
water	72:29	0:0	8	'T'
arg	72:34	72:37	7	'E'
water	72:34	0:0	8	'E'
water	72:38	0:0	6	:
water	73:12	0:0	6	if
water	73:15	0:0	6	(
call	73:16	73:50	6	decode_plte_chunk
arg	73:34	73:39	7	avctx
water	73:34	0:0	8	avctx
arg	73:41	73:42	7	s
water	73:41	0:0	8	s
arg	73:44	73:50	7	length
water	73:44	0:0	8	length
op	73:52	0:0	6	<
water	73:54	0:0	6	0
water	73:55	0:0	6	)
water	74:16	0:0	6	goto
water	74:21	0:0	6	skip_tag
water	74:29	0:0	6	;
break	75:12	75:17	6	
water	76:8	0:0	6	case
call	76:13	76:37	6	MKTAG
arg	76:19	76:22	7	't'
water	76:19	0:0	8	't'
arg	76:24	76:27	7	'R'
water	76:24	0:0	8	'R'
arg	76:29	76:32	7	'N'
water	76:29	0:0	8	'N'
arg	76:34	76:37	7	'S'
water	76:34	0:0	8	'S'
water	76:38	0:0	6	:
water	77:12	0:0	6	if
water	77:15	0:0	6	(
call	77:16	77:50	6	decode_trns_chunk
arg	77:34	77:39	7	avctx
water	77:34	0:0	8	avctx
arg	77:41	77:42	7	s
water	77:41	0:0	8	s
arg	77:44	77:50	7	length
water	77:44	0:0	8	length
op	77:52	0:0	6	<
water	77:54	0:0	6	0
water	77:55	0:0	6	)
water	78:16	0:0	6	goto
water	78:21	0:0	6	skip_tag
water	78:29	0:0	6	;
break	79:12	79:17	6	
water	80:8	0:0	6	case
call	80:13	80:37	6	MKTAG
arg	80:19	80:22	7	't'
water	80:19	0:0	8	't'
arg	80:24	80:27	7	'E'
water	80:24	0:0	8	'E'
arg	80:29	80:32	7	'X'
water	80:29	0:0	8	'X'
arg	80:34	80:37	7	't'
water	80:34	0:0	8	't'
water	80:38	0:0	6	:
water	81:12	0:0	6	if
water	81:15	0:0	6	(
call	81:16	81:57	6	decode_text_chunk
arg	81:34	81:35	7	s
water	81:34	0:0	8	s
arg	81:37	81:43	7	length
water	81:37	0:0	8	length
arg	81:45	81:46	7	0
water	81:45	0:0	8	0
arg	81:48	81:57	7	&metadata
op	81:48	0:0	8	&
water	81:49	0:0	8	metadata
op	81:59	0:0	6	<
water	81:61	0:0	6	0
water	81:62	0:0	6	)
call	82:16	82:67	6	av_log
arg	82:23	82:28	7	avctx
water	82:23	0:0	8	avctx
arg	82:30	82:44	7	AV_LOG_WARNING
water	82:30	0:0	8	AV_LOG_WARNING
arg	82:46	82:67	7	"Broken tEXt chunk\n"
water	82:46	0:0	8	"Broken tEXt chunk\n"
water	82:68	0:0	6	;
call	83:12	83:47	6	bytestream2_skip
arg	83:29	83:35	7	&s->gb
op	83:29	0:0	8	&
water	83:30	0:0	8	s
op	83:31	0:0	8	->
water	83:33	0:0	8	gb
arg	83:37	83:47	7	length+4
water	83:37	0:0	8	length
op	83:44	0:0	8	+
water	83:46	0:0	8	4
water	83:48	0:0	6	;
break	84:12	84:17	6	
water	85:8	0:0	6	case
call	85:13	85:37	6	MKTAG
arg	85:19	85:22	7	'z'
water	85:19	0:0	8	'z'
arg	85:24	85:27	7	'T'
water	85:24	0:0	8	'T'
arg	85:29	85:32	7	'X'
water	85:29	0:0	8	'X'
arg	85:34	85:37	7	't'
water	85:34	0:0	8	't'
water	85:38	0:0	6	:
water	86:12	0:0	6	if
water	86:15	0:0	6	(
call	86:16	86:57	6	decode_text_chunk
arg	86:34	86:35	7	s
water	86:34	0:0	8	s
arg	86:37	86:43	7	length
water	86:37	0:0	8	length
arg	86:45	86:46	7	1
water	86:45	0:0	8	1
arg	86:48	86:57	7	&metadata
op	86:48	0:0	8	&
water	86:49	0:0	8	metadata
op	86:59	0:0	6	<
water	86:61	0:0	6	0
water	86:62	0:0	6	)
call	87:16	87:67	6	av_log
arg	87:23	87:28	7	avctx
water	87:23	0:0	8	avctx
arg	87:30	87:44	7	AV_LOG_WARNING
water	87:30	0:0	8	AV_LOG_WARNING
arg	87:46	87:67	7	"Broken zTXt chunk\n"
water	87:46	0:0	8	"Broken zTXt chunk\n"
water	87:68	0:0	6	;
call	88:12	88:47	6	bytestream2_skip
arg	88:29	88:35	7	&s->gb
op	88:29	0:0	8	&
water	88:30	0:0	8	s
op	88:31	0:0	8	->
water	88:33	0:0	8	gb
arg	88:37	88:47	7	length+4
water	88:37	0:0	8	length
op	88:44	0:0	8	+
water	88:46	0:0	8	4
water	88:48	0:0	6	;
break	89:12	89:17	6	
water	90:8	0:0	6	case
call	90:13	90:37	6	MKTAG
arg	90:19	90:22	7	'I'
water	90:19	0:0	8	'I'
arg	90:24	90:27	7	'E'
water	90:24	0:0	8	'E'
arg	90:29	90:32	7	'N'
water	90:29	0:0	8	'N'
arg	90:34	90:37	7	'D'
water	90:34	0:0	8	'D'
water	90:38	0:0	6	:
water	91:12	0:0	6	if
water	91:15	0:0	6	(
op	91:16	0:0	6	!
water	91:17	0:0	6	(
water	91:18	0:0	6	s
op	91:19	0:0	6	->
water	91:21	0:0	6	state
op	91:27	0:0	6	&
water	91:29	0:0	6	PNG_ALLIMAGE
water	91:41	0:0	6	)
water	91:42	0:0	6	)
call	92:16	92:70	6	av_log
arg	92:23	92:28	7	avctx
water	92:23	0:0	8	avctx
arg	92:30	92:42	7	AV_LOG_ERROR
water	92:30	0:0	8	AV_LOG_ERROR
arg	92:44	92:70	7	"IEND without all image\n"
water	92:44	0:0	8	"IEND without all image\n"
water	92:71	0:0	6	;
if	93:12	96:12	6	(! ( s -> state & ( PNG_ALLIMAGE | PNG_IDAT ) ))
cond	93:16	93:52	7	! ( s -> state & ( PNG_ALLIMAGE | PNG_IDAT ) )
op	93:16	0:0	8	!
water	93:17	0:0	8	(
water	93:18	0:0	8	s
op	93:19	0:0	8	->
water	93:21	0:0	8	state
op	93:27	0:0	8	&
water	93:29	0:0	8	(
water	93:30	0:0	8	PNG_ALLIMAGE
op	93:42	0:0	8	|
water	93:43	0:0	8	PNG_IDAT
water	93:51	0:0	8	)
water	93:52	0:0	8	)
stmts	93:55	96:12	7	
water	93:55	0:0	8	{
water	94:16	0:0	8	ret
op	94:20	0:0	8	=
water	94:22	0:0	8	AVERROR_INVALIDDATA
water	94:41	0:0	8	;
goto	95:16	95:25	8	fail
water	95:21	0:0	9	fail
water	96:12	0:0	8	}
call	97:12	97:38	6	bytestream2_skip
arg	97:29	97:35	7	&s->gb
op	97:29	0:0	8	&
water	97:30	0:0	8	s
op	97:31	0:0	8	->
water	97:33	0:0	8	gb
arg	97:37	97:38	7	4
water	97:37	0:0	8	4
water	97:39	0:0	6	;
goto	98:12	98:26	6	exit_loop
water	98:17	0:0	7	exit_loop
label	99:8	99:15	6	default :
label	101:0	101:8	6	skip_tag :
call	102:12	102:47	6	bytestream2_skip
arg	102:29	102:35	7	&s->gb
op	102:29	0:0	8	&
water	102:30	0:0	8	s
op	102:31	0:0	8	->
water	102:33	0:0	8	gb
arg	102:37	102:47	7	length+4
water	102:37	0:0	8	length
op	102:44	0:0	8	+
water	102:46	0:0	8	4
water	102:48	0:0	6	;
break	103:12	103:17	6	
water	104:8	0:0	6	}
water	105:4	0:0	4	}
label	106:0	106:9	2	exit_loop :
if	108:4	109:30	2	(s -> bits_per_pixel <= 4)
cond	108:8	108:29	3	s -> bits_per_pixel <= 4
water	108:8	0:0	4	s
op	108:9	0:0	4	->
water	108:11	0:0	4	bits_per_pixel
op	108:26	0:0	4	<=
water	108:29	0:0	4	4
stmts	109:8	109:30	3	
call	109:8	109:29	4	handle_small_bpp
arg	109:25	109:26	5	s
water	109:25	0:0	6	s
arg	109:28	109:29	5	p
water	109:28	0:0	6	p
water	109:30	0:0	4	;
if	112:4	132:4	2	(s -> has_trns && s -> color_type != PNG_COLOR_TYPE_PALETTE)
cond	112:8	112:40	3	s -> has_trns && s -> color_type != PNG_COLOR_TYPE_PALETTE
water	112:8	0:0	4	s
op	112:9	0:0	4	->
water	112:11	0:0	4	has_trns
op	112:20	0:0	4	&&
water	112:23	0:0	4	s
op	112:24	0:0	4	->
water	112:26	0:0	4	color_type
op	112:37	0:0	4	!=
water	112:40	0:0	4	PNG_COLOR_TYPE_PALETTE
stmts	112:64	132:4	3	
water	112:64	0:0	4	{
decl	113:8	113:52	4	size_t	byte_depth
op	113:26	0:0	4	=
water	113:28	0:0	4	s
op	113:29	0:0	4	->
water	113:31	0:0	4	bit_depth
op	113:41	0:0	4	>
water	113:43	0:0	4	8
water	113:45	0:0	4	?
water	113:47	0:0	4	2
water	113:49	0:0	4	:
water	113:51	0:0	4	1
decl	114:8	114:44	4	size_t	raw_bpp
op	114:23	0:0	4	=
water	114:25	0:0	4	s
op	114:26	0:0	4	->
water	114:28	0:0	4	bpp
op	114:32	0:0	4	-
water	114:34	0:0	4	byte_depth
water	115:8	0:0	4	unsigned
water	115:17	0:0	4	x
water	115:18	0:0	4	,
water	115:20	0:0	4	y
water	115:21	0:0	4	;
for	117:8	131:8	4	(y = 0 ;y < s -> height;++ y)
forinit	117:13	117:18	5	y = 0 ;
water	117:13	0:0	6	y
op	117:15	0:0	6	=
water	117:17	0:0	6	0
water	117:18	0:0	6	;
cond	117:20	117:27	5	y < s -> height
water	117:20	0:0	6	y
op	117:22	0:0	6	<
water	117:24	0:0	6	s
op	117:25	0:0	6	->
water	117:27	0:0	6	height
forexpr	117:35	117:37	5	++ y
op	117:35	0:0	6	++
water	117:37	0:0	6	y
stmts	117:40	131:8	5	
water	117:40	0:0	6	{
decl	118:12	118:63	6	uint8_t	*row
op	118:25	0:0	6	=
op	118:27	0:0	6	&
water	118:28	0:0	6	s
op	118:29	0:0	6	->
water	118:31	0:0	6	image_buf
op	118:40	0:0	6	[
water	118:41	0:0	6	s
op	118:42	0:0	6	->
water	118:44	0:0	6	image_linesize
op	118:59	0:0	6	*
water	118:61	0:0	6	y
op	118:62	0:0	6	]
for	121:12	130:12	6	(x = s -> width ;x > 0;-- x)
forinit	121:17	121:29	7	x = s -> width ;
water	121:17	0:0	8	x
op	121:19	0:0	8	=
water	121:21	0:0	8	s
op	121:22	0:0	8	->
water	121:24	0:0	8	width
water	121:29	0:0	8	;
cond	121:31	121:35	7	x > 0
water	121:31	0:0	8	x
op	121:33	0:0	8	>
water	121:35	0:0	8	0
forexpr	121:38	121:40	7	-- x
op	121:38	0:0	8	--
water	121:40	0:0	8	x
stmts	121:43	130:12	7	
water	121:43	0:0	8	{
decl	122:16	122:55	8	uint8_t	*pixel
op	122:31	0:0	8	=
op	122:33	0:0	8	&
water	122:34	0:0	8	row
op	122:37	0:0	8	[
water	122:38	0:0	8	s
op	122:39	0:0	8	->
water	122:41	0:0	8	bpp
op	122:45	0:0	8	*
water	122:47	0:0	8	(
water	122:48	0:0	8	x
op	122:50	0:0	8	-
water	122:52	0:0	8	1
water	122:53	0:0	8	)
op	122:54	0:0	8	]
call	123:16	123:63	8	memmove
arg	123:24	123:29	9	pixel
water	123:24	0:0	10	pixel
arg	123:31	123:54	9	&row[raw_bpp*(x-1)]
op	123:31	0:0	10	&
water	123:32	0:0	10	row
op	123:35	0:0	10	[
water	123:36	0:0	10	raw_bpp
op	123:44	0:0	10	*
water	123:46	0:0	10	(
water	123:47	0:0	10	x
op	123:49	0:0	10	-
water	123:51	0:0	10	1
water	123:52	0:0	10	)
op	123:53	0:0	10	]
arg	123:56	123:63	9	raw_bpp
water	123:56	0:0	10	raw_bpp
water	123:64	0:0	8	;
if	125:16	127:16	8	(!memcmp (pixel ,s -> transparent_color_be ,raw_bpp ))
cond	125:20	125:67	9	!memcmp (pixel ,s -> transparent_color_be ,raw_bpp )
op	125:20	0:0	10	!
call	125:21	125:67	10	memcmp
arg	125:28	125:33	11	pixel
water	125:28	0:0	12	pixel
arg	125:35	125:58	11	s->transparent_color_be
water	125:35	0:0	12	s
op	125:36	0:0	12	->
water	125:38	0:0	12	transparent_color_be
arg	125:60	125:67	11	raw_bpp
water	125:60	0:0	12	raw_bpp
stmts	125:70	127:16	9	
water	125:70	0:0	10	{
call	126:20	126:57	10	memset
arg	126:27	126:42	11	&pixel[raw_bpp]
op	126:27	0:0	12	&
water	126:28	0:0	12	pixel
op	126:33	0:0	12	[
water	126:34	0:0	12	raw_bpp
op	126:41	0:0	12	]
arg	126:44	126:45	11	0
water	126:44	0:0	12	0
arg	126:47	126:57	11	byte_depth
water	126:47	0:0	12	byte_depth
water	126:58	0:0	10	;
water	127:16	0:0	10	}
else	127:18	129:16	8
stmts	127:23	129:16	9	
water	127:23	0:0	10	{
call	128:20	128:60	10	memset
arg	128:27	128:42	11	&pixel[raw_bpp]
op	128:27	0:0	12	&
water	128:28	0:0	12	pixel
op	128:33	0:0	12	[
water	128:34	0:0	12	raw_bpp
op	128:41	0:0	12	]
arg	128:44	128:48	11	0xff
water	128:44	0:0	12	0
water	128:45	0:0	12	xff
arg	128:50	128:60	11	byte_depth
water	128:50	0:0	12	byte_depth
water	128:61	0:0	10	;
water	129:16	0:0	10	}
water	130:12	0:0	8	}
water	131:8	0:0	6	}
water	132:4	0:0	4	}
if	135:4	148:4	2	(s -> last_picture . f -> data [ 0 ])
cond	135:8	135:33	3	s -> last_picture . f -> data [ 0 ]
water	135:8	0:0	4	s
op	135:9	0:0	4	->
water	135:11	0:0	4	last_picture
op	135:23	0:0	4	.
water	135:24	0:0	4	f
op	135:25	0:0	4	->
water	135:27	0:0	4	data
op	135:31	0:0	4	[
water	135:32	0:0	4	0
op	135:33	0:0	4	]
stmts	135:36	148:4	3	
water	135:36	0:0	4	{
if	136:8	147:8	4	(! ( avpkt -> flags & AV_PKT_FLAG_KEY ) && avctx -> codec_tag !=AV_RL32 ("MPNG" ) && s -> last_picture . f -> width == p -> width && s -> last_picture . f -> height == p -> height && s -> last_picture . f -> format == p -> format)
cond	136:15	139:46	5	! ( avpkt -> flags & AV_PKT_FLAG_KEY ) && avctx -> codec_tag !=AV_RL32 ("MPNG" ) && s -> last_picture . f -> width == p -> width && s -> last_picture . f -> height == p -> height && s -> last_picture . f -> format == p -> format
op	136:15	0:0	6	!
water	136:16	0:0	6	(
water	136:17	0:0	6	avpkt
op	136:22	0:0	6	->
water	136:24	0:0	6	flags
op	136:30	0:0	6	&
water	136:32	0:0	6	AV_PKT_FLAG_KEY
water	136:47	0:0	6	)
op	136:49	0:0	6	&&
water	136:52	0:0	6	avctx
op	136:57	0:0	6	->
water	136:59	0:0	6	codec_tag
op	136:69	0:0	6	!=
call	136:72	136:86	6	AV_RL32
arg	136:80	136:86	7	"MPNG"
water	136:80	0:0	8	"MPNG"
op	137:12	0:0	6	&&
water	137:15	0:0	6	s
op	137:16	0:0	6	->
water	137:18	0:0	6	last_picture
op	137:30	0:0	6	.
water	137:31	0:0	6	f
op	137:32	0:0	6	->
water	137:34	0:0	6	width
op	137:40	0:0	6	==
water	137:43	0:0	6	p
op	137:44	0:0	6	->
water	137:46	0:0	6	width
op	138:12	0:0	6	&&
water	138:15	0:0	6	s
op	138:16	0:0	6	->
water	138:18	0:0	6	last_picture
op	138:30	0:0	6	.
water	138:31	0:0	6	f
op	138:32	0:0	6	->
water	138:34	0:0	6	height
op	138:40	0:0	6	==
water	138:43	0:0	6	p
op	138:44	0:0	6	->
water	138:46	0:0	6	height
op	139:12	0:0	6	&&
water	139:15	0:0	6	s
op	139:16	0:0	6	->
water	139:18	0:0	6	last_picture
op	139:30	0:0	6	.
water	139:31	0:0	6	f
op	139:32	0:0	6	->
water	139:34	0:0	6	format
op	139:40	0:0	6	==
water	139:43	0:0	6	p
op	139:44	0:0	6	->
water	139:46	0:0	6	format
stmts	140:11	147:8	5	
water	140:11	0:0	6	{
if	141:12	142:40	6	(CONFIG_PNG_DECODER && avctx -> codec_id != AV_CODEC_ID_APNG)
cond	141:16	141:57	7	CONFIG_PNG_DECODER && avctx -> codec_id != AV_CODEC_ID_APNG
water	141:16	0:0	8	CONFIG_PNG_DECODER
op	141:35	0:0	8	&&
water	141:38	0:0	8	avctx
op	141:43	0:0	8	->
water	141:45	0:0	8	codec_id
op	141:54	0:0	8	!=
water	141:57	0:0	8	AV_CODEC_ID_APNG
stmts	142:16	142:40	7	
call	142:16	142:39	8	handle_p_frame_png
arg	142:35	142:36	9	s
water	142:35	0:0	10	s
arg	142:38	142:39	9	p
water	142:38	0:0	10	p
water	142:40	0:0	8	;
else	143:12	146:25	6
stmts	143:17	146:25	7	
if	143:17	146:25	8	(CONFIG_APNG_DECODER && avctx -> codec_id == AV_CODEC_ID_APNG && ( ret =handle_p_frame_apng (avctx ,s ,p ) ) < 0)
cond	143:21	145:64	9	CONFIG_APNG_DECODER && avctx -> codec_id == AV_CODEC_ID_APNG && ( ret =handle_p_frame_apng (avctx ,s ,p ) ) < 0
water	143:21	0:0	10	CONFIG_APNG_DECODER
op	143:41	0:0	10	&&
water	144:21	0:0	10	avctx
op	144:26	0:0	10	->
water	144:28	0:0	10	codec_id
op	144:37	0:0	10	==
water	144:40	0:0	10	AV_CODEC_ID_APNG
op	144:57	0:0	10	&&
water	145:21	0:0	10	(
water	145:22	0:0	10	ret
op	145:26	0:0	10	=
call	145:28	145:59	10	handle_p_frame_apng
arg	145:48	145:53	11	avctx
water	145:48	0:0	12	avctx
arg	145:55	145:56	11	s
water	145:55	0:0	12	s
arg	145:58	145:59	11	p
water	145:58	0:0	12	p
water	145:60	0:0	10	)
op	145:62	0:0	10	<
water	145:64	0:0	10	0
stmts	146:16	146:25	9	
goto	146:16	146:25	10	fail
water	146:21	0:0	11	fail
water	147:8	0:0	6	}
water	148:4	0:0	4	}
call	149:4	149:53	2	ff_thread_report_progress
arg	149:30	149:41	3	&s->picture
op	149:30	0:0	4	&
water	149:31	0:0	4	s
op	149:32	0:0	4	->
water	149:34	0:0	4	picture
arg	149:43	149:50	3	INT_MAX
water	149:43	0:0	4	INT_MAX
arg	149:52	149:53	3	0
water	149:52	0:0	4	0
water	149:54	0:0	2	;
call	151:4	151:37	2	av_frame_set_metadata
arg	151:26	151:27	3	p
water	151:26	0:0	4	p
arg	151:29	151:37	3	metadata
water	151:29	0:0	4	metadata
water	151:38	0:0	2	;
water	152:4	0:0	2	metadata
op	152:15	0:0	2	=
water	152:17	0:0	2	NULL
water	152:21	0:0	2	;
return	153:4	153:12	2	0
water	153:11	0:0	3	0
label	155:0	155:4	2	fail :
call	156:4	156:26	2	av_dict_free
arg	156:17	156:26	3	&metadata
op	156:17	0:0	4	&
water	156:18	0:0	4	metadata
water	156:27	0:0	2	;
call	157:4	157:53	2	ff_thread_report_progress
arg	157:30	157:41	3	&s->picture
op	157:30	0:0	4	&
water	157:31	0:0	4	s
op	157:32	0:0	4	->
water	157:34	0:0	4	picture
arg	157:43	157:50	3	INT_MAX
water	157:43	0:0	4	INT_MAX
arg	157:52	157:53	3	0
water	157:52	0:0	4	0
water	157:54	0:0	2	;
return	158:4	158:14	2	ret
water	158:11	0:0	3	ret
