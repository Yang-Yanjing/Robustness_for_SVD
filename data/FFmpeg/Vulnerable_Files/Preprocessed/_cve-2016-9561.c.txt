func	14:15	43:0	0	int	che_configure
params	14:32	0:0	1	
param	14:33	14:47	2	AACContext *	ac
param	15:33	15:61	2	enum ChannelPosition	che_pos
param	16:33	16:41	2	int	type
param	16:43	16:49	2	int	id
param	16:51	16:64	2	int *	channels
stmnts	18:4	42:12	1	
if	18:4	19:34	2	(* channels >= MAX_CHANNELS)
cond	18:8	18:21	3	* channels >= MAX_CHANNELS
op	18:8	0:0	4	*
water	18:9	0:0	4	channels
op	18:18	0:0	4	>=
water	18:21	0:0	4	MAX_CHANNELS
stmts	19:8	19:34	3	
return	19:8	19:34	4	AVERROR_INVALIDDATA
water	19:15	0:0	5	AVERROR_INVALIDDATA
if	20:4	37:4	2	(che_pos)
cond	20:8	20:8	3	che_pos
water	20:8	0:0	4	che_pos
stmts	20:17	37:4	3	
water	20:17	0:0	4	{
if	21:8	25:8	4	(! ac -> che [ type ] [ id ])
cond	21:12	21:29	5	! ac -> che [ type ] [ id ]
op	21:12	0:0	6	!
water	21:13	0:0	6	ac
op	21:15	0:0	6	->
water	21:17	0:0	6	che
op	21:20	0:0	6	[
water	21:21	0:0	6	type
op	21:25	0:0	6	]
op	21:26	0:0	6	[
water	21:27	0:0	6	id
op	21:29	0:0	6	]
stmts	21:32	25:8	5	
water	21:32	0:0	6	{
if	22:12	23:38	6	(! ( ac -> che [ type ] [ id ] =av_mallocz (sizeof ( ChannelElement ) ) ))
cond	22:16	22:72	7	! ( ac -> che [ type ] [ id ] =av_mallocz (sizeof ( ChannelElement ) ) )
op	22:16	0:0	8	!
water	22:17	0:0	8	(
water	22:18	0:0	8	ac
op	22:20	0:0	8	->
water	22:22	0:0	8	che
op	22:25	0:0	8	[
water	22:26	0:0	8	type
op	22:30	0:0	8	]
op	22:31	0:0	8	[
water	22:32	0:0	8	id
op	22:34	0:0	8	]
op	22:36	0:0	8	=
call	22:38	22:71	8	av_mallocz
arg	22:49	22:71	9	sizeof(ChannelElement)
op	22:49	0:0	10	sizeof
water	22:55	0:0	10	(
water	22:56	0:0	10	ChannelElement
water	22:70	0:0	10	)
water	22:72	0:0	8	)
stmts	23:16	23:38	7	
return	23:16	23:38	8	AVERROR(ENOMEM)
call	23:23	23:37	9	AVERROR
arg	23:31	23:37	10	ENOMEM
water	23:31	0:0	11	ENOMEM
call	24:12	24:42	6	AAC_RENAME
arg	24:23	24:42	7	ff_aac_sbr_ctx_init
water	24:23	0:0	8	ff_aac_sbr_ctx_init
water	24:43	0:0	6	(
water	24:44	0:0	6	ac
water	24:46	0:0	6	,
op	24:48	0:0	6	&
water	24:49	0:0	6	ac
op	24:51	0:0	6	->
water	24:53	0:0	6	che
op	24:56	0:0	6	[
water	24:57	0:0	6	type
op	24:61	0:0	6	]
op	24:62	0:0	6	[
water	24:63	0:0	6	id
op	24:65	0:0	6	]
op	24:66	0:0	6	->
water	24:68	0:0	6	sbr
water	24:71	0:0	6	)
water	24:72	0:0	6	;
water	25:8	0:0	6	}
if	26:8	36:8	4	(type != TYPE_CCE)
cond	26:12	26:20	5	type != TYPE_CCE
water	26:12	0:0	6	type
op	26:17	0:0	6	!=
water	26:20	0:0	6	TYPE_CCE
stmts	26:30	36:8	5	
water	26:30	0:0	6	{
if	27:12	30:12	6	(* channels >= MAX_CHANNELS - ( type == TYPE_CPE || ( type == TYPE_SCE && ac -> oc [ 1 ] . m4ac . ps == 1 ) ))
cond	27:16	27:109	7	* channels >= MAX_CHANNELS - ( type == TYPE_CPE || ( type == TYPE_SCE && ac -> oc [ 1 ] . m4ac . ps == 1 ) )
op	27:16	0:0	8	*
water	27:17	0:0	8	channels
op	27:26	0:0	8	>=
water	27:29	0:0	8	MAX_CHANNELS
op	27:42	0:0	8	-
water	27:44	0:0	8	(
water	27:45	0:0	8	type
op	27:50	0:0	8	==
water	27:53	0:0	8	TYPE_CPE
op	27:62	0:0	8	||
water	27:65	0:0	8	(
water	27:66	0:0	8	type
op	27:71	0:0	8	==
water	27:74	0:0	8	TYPE_SCE
op	27:83	0:0	8	&&
water	27:86	0:0	8	ac
op	27:88	0:0	8	->
water	27:90	0:0	8	oc
op	27:92	0:0	8	[
water	27:93	0:0	8	1
op	27:94	0:0	8	]
op	27:95	0:0	8	.
water	27:96	0:0	8	m4ac
op	27:100	0:0	8	.
water	27:101	0:0	8	ps
op	27:104	0:0	8	==
water	27:107	0:0	8	1
water	27:108	0:0	8	)
water	27:109	0:0	8	)
stmts	27:112	30:12	7	
water	27:112	0:0	8	{
call	28:16	28:69	8	av_log
arg	28:23	28:32	9	ac->avctx
water	28:23	0:0	10	ac
op	28:25	0:0	10	->
water	28:27	0:0	10	avctx
arg	28:34	28:46	9	AV_LOG_ERROR
water	28:34	0:0	10	AV_LOG_ERROR
arg	28:48	28:69	9	"Too many channels\n"
water	28:48	0:0	10	"Too many channels\n"
water	28:70	0:0	8	;
return	29:16	29:42	8	AVERROR_INVALIDDATA
water	29:23	0:0	9	AVERROR_INVALIDDATA
water	30:12	0:0	8	}
water	31:12	0:0	6	ac
op	31:14	0:0	6	->
water	31:16	0:0	6	output_element
op	31:30	0:0	6	[
water	31:31	0:0	6	(
op	31:32	0:0	6	*
water	31:33	0:0	6	channels
water	31:41	0:0	6	)
op	31:42	0:0	6	++
op	31:44	0:0	6	]
op	31:46	0:0	6	=
op	31:48	0:0	6	&
water	31:49	0:0	6	ac
op	31:51	0:0	6	->
water	31:53	0:0	6	che
op	31:56	0:0	6	[
water	31:57	0:0	6	type
op	31:61	0:0	6	]
op	31:62	0:0	6	[
water	31:63	0:0	6	id
op	31:65	0:0	6	]
op	31:66	0:0	6	->
water	31:68	0:0	6	ch
op	31:70	0:0	6	[
water	31:71	0:0	6	0
op	31:72	0:0	6	]
water	31:73	0:0	6	;
if	32:12	35:12	6	(type == TYPE_CPE || ( type == TYPE_SCE && ac -> oc [ 1 ] . m4ac . ps == 1 ))
cond	32:16	33:59	7	type == TYPE_CPE || ( type == TYPE_SCE && ac -> oc [ 1 ] . m4ac . ps == 1 )
water	32:16	0:0	8	type
op	32:21	0:0	8	==
water	32:24	0:0	8	TYPE_CPE
op	32:33	0:0	8	||
water	33:16	0:0	8	(
water	33:17	0:0	8	type
op	33:22	0:0	8	==
water	33:25	0:0	8	TYPE_SCE
op	33:34	0:0	8	&&
water	33:37	0:0	8	ac
op	33:39	0:0	8	->
water	33:41	0:0	8	oc
op	33:43	0:0	8	[
water	33:44	0:0	8	1
op	33:45	0:0	8	]
op	33:46	0:0	8	.
water	33:47	0:0	8	m4ac
op	33:51	0:0	8	.
water	33:52	0:0	8	ps
op	33:55	0:0	8	==
water	33:58	0:0	8	1
water	33:59	0:0	8	)
stmts	33:62	35:12	7	
water	33:62	0:0	8	{
water	34:16	0:0	8	ac
op	34:18	0:0	8	->
water	34:20	0:0	8	output_element
op	34:34	0:0	8	[
water	34:35	0:0	8	(
op	34:36	0:0	8	*
water	34:37	0:0	8	channels
water	34:45	0:0	8	)
op	34:46	0:0	8	++
op	34:48	0:0	8	]
op	34:50	0:0	8	=
op	34:52	0:0	8	&
water	34:53	0:0	8	ac
op	34:55	0:0	8	->
water	34:57	0:0	8	che
op	34:60	0:0	8	[
water	34:61	0:0	8	type
op	34:65	0:0	8	]
op	34:66	0:0	8	[
water	34:67	0:0	8	id
op	34:69	0:0	8	]
op	34:70	0:0	8	->
water	34:72	0:0	8	ch
op	34:74	0:0	8	[
water	34:75	0:0	8	1
op	34:76	0:0	8	]
water	34:77	0:0	8	;
water	35:12	0:0	8	}
water	36:8	0:0	6	}
water	37:4	0:0	4	}
else	37:6	41:4	2
stmts	37:11	41:4	3	
water	37:11	0:0	4	{
if	38:8	39:69	4	(ac -> che [ type ] [ id ])
cond	38:12	38:28	5	ac -> che [ type ] [ id ]
water	38:12	0:0	6	ac
op	38:14	0:0	6	->
water	38:16	0:0	6	che
op	38:19	0:0	6	[
water	38:20	0:0	6	type
op	38:24	0:0	6	]
op	38:25	0:0	6	[
water	38:26	0:0	6	id
op	38:28	0:0	6	]
stmts	39:12	39:69	5	
call	39:12	39:43	6	AAC_RENAME
arg	39:23	39:43	7	ff_aac_sbr_ctx_close
water	39:23	0:0	8	ff_aac_sbr_ctx_close
water	39:44	0:0	6	(
op	39:45	0:0	6	&
water	39:46	0:0	6	ac
op	39:48	0:0	6	->
water	39:50	0:0	6	che
op	39:53	0:0	6	[
water	39:54	0:0	6	type
op	39:58	0:0	6	]
op	39:59	0:0	6	[
water	39:60	0:0	6	id
op	39:62	0:0	6	]
op	39:63	0:0	6	->
water	39:65	0:0	6	sbr
water	39:68	0:0	6	)
water	39:69	0:0	6	;
call	40:8	40:35	4	av_freep
arg	40:17	40:35	5	&ac->che[type][id]
op	40:17	0:0	6	&
water	40:18	0:0	6	ac
op	40:20	0:0	6	->
water	40:22	0:0	6	che
op	40:25	0:0	6	[
water	40:26	0:0	6	type
op	40:30	0:0	6	]
op	40:31	0:0	6	[
water	40:32	0:0	6	id
op	40:34	0:0	6	]
water	40:36	0:0	4	;
water	41:4	0:0	4	}
return	42:4	42:12	2	0
water	42:11	0:0	3	0
