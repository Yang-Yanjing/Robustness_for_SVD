func	1:0	71:0	0	static int	encode_slice
params	1:23	0:0	1	
param	1:24	1:45	2	AVCodecContext *	avctx
param	1:47	1:65	2	const AVFrame *	pic
param	2:24	2:41	2	PutBitContext *	pb
param	3:24	3:36	2	int	sizes[4]
param	3:38	3:43	2	int	x
param	3:45	3:50	2	int	y
param	3:52	3:61	2	int	quant
param	4:24	4:41	2	int	mbs_per_slice
stmnts	0:0	70:21	1	
decl	6:4	6:41	2	ProresContext	*ctx
op	6:23	0:0	2	=
water	6:25	0:0	2	avctx
op	6:30	0:0	2	->
water	6:32	0:0	2	priv_data
decl	7:4	7:17	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:17	2	int	xp
water	7:13	0:0	2	,
decl	7:4	7:17	2	int	yp
decl	8:4	8:22	2	int	total_size
op	8:19	0:0	2	=
water	8:21	0:0	2	0
decl	9:4	9:23	2	const uint16_t	*src
decl	10:4	10:51	2	int	slice_width_factor
op	10:27	0:0	2	=
call	10:29	10:50	3	av_log2
arg	10:37	10:50	4	mbs_per_slice
water	10:37	0:0	5	mbs_per_slice
decl	11:4	11:47	2	int	num_cblocks
water	11:19	0:0	2	,
decl	11:4	11:47	2	int	pwidth
water	11:27	0:0	2	,
decl	11:4	11:47	2	int	linesize
water	11:37	0:0	2	,
decl	11:4	11:47	2	int	line_add
decl	12:4	12:31	2	int	plane_factor
water	12:20	0:0	2	,
decl	12:4	12:31	2	int	is_chroma
decl	13:4	13:18	2	uint16_t	*qmat
if	15:4	16:20	2	(ctx -> pictures_per_frame == 1)
cond	15:8	15:35	3	ctx -> pictures_per_frame == 1
water	15:8	0:0	4	ctx
op	15:11	0:0	4	->
water	15:13	0:0	4	pictures_per_frame
op	15:32	0:0	4	==
water	15:35	0:0	4	1
stmts	16:8	16:20	3	
water	16:8	0:0	4	line_add
op	16:17	0:0	4	=
water	16:19	0:0	4	0
water	16:20	0:0	4	;
else	17:4	18:63	2
stmts	18:8	18:63	3	
water	18:8	0:0	4	line_add
op	18:17	0:0	4	=
water	18:19	0:0	4	ctx
op	18:22	0:0	4	->
water	18:24	0:0	4	cur_picture_idx
op	18:40	0:0	4	^
op	18:42	0:0	4	!
water	18:43	0:0	4	pic
op	18:46	0:0	4	->
water	18:48	0:0	4	top_field_first
water	18:63	0:0	4	;
if	20:4	22:4	2	(ctx -> force_quant)
cond	20:8	20:13	3	ctx -> force_quant
water	20:8	0:0	4	ctx
op	20:11	0:0	4	->
water	20:13	0:0	4	force_quant
stmts	20:26	22:4	3	
water	20:26	0:0	4	{
water	21:8	0:0	4	qmat
op	21:13	0:0	4	=
water	21:15	0:0	4	ctx
op	21:18	0:0	4	->
water	21:20	0:0	4	quants
op	21:26	0:0	4	[
water	21:27	0:0	4	0
op	21:28	0:0	4	]
water	21:29	0:0	4	;
water	22:4	0:0	4	}
else	22:6	24:4	2
stmts	22:11	24:4	3	
if	22:11	24:4	4	(quant < MAX_STORED_Q)
cond	22:15	22:23	5	quant < MAX_STORED_Q
water	22:15	0:0	6	quant
op	22:21	0:0	6	<
water	22:23	0:0	6	MAX_STORED_Q
stmts	22:37	24:4	5	
water	22:37	0:0	6	{
water	23:8	0:0	6	qmat
op	23:13	0:0	6	=
water	23:15	0:0	6	ctx
op	23:18	0:0	6	->
water	23:20	0:0	6	quants
op	23:26	0:0	6	[
water	23:27	0:0	6	quant
op	23:32	0:0	6	]
water	23:33	0:0	6	;
water	24:4	0:0	6	}
else	24:6	28:4	2
stmts	24:11	28:4	3	
water	24:11	0:0	4	{
water	25:8	0:0	4	qmat
op	25:13	0:0	4	=
water	25:15	0:0	4	ctx
op	25:18	0:0	4	->
water	25:20	0:0	4	custom_q
water	25:28	0:0	4	;
for	26:8	27:47	4	(i = 0 ;i < 64;i ++)
forinit	26:13	26:18	5	i = 0 ;
water	26:13	0:0	6	i
op	26:15	0:0	6	=
water	26:17	0:0	6	0
water	26:18	0:0	6	;
cond	26:20	26:24	5	i < 64
water	26:20	0:0	6	i
op	26:22	0:0	6	<
water	26:24	0:0	6	64
forexpr	26:28	26:29	5	i ++
water	26:28	0:0	6	i
op	26:29	0:0	6	++
stmts	27:12	27:47	5	
water	27:12	0:0	6	qmat
op	27:16	0:0	6	[
water	27:17	0:0	6	i
op	27:18	0:0	6	]
op	27:20	0:0	6	=
water	27:22	0:0	6	ctx
op	27:25	0:0	6	->
water	27:27	0:0	6	quant_mat
op	27:36	0:0	6	[
water	27:37	0:0	6	i
op	27:38	0:0	6	]
op	27:40	0:0	6	*
water	27:42	0:0	6	quant
water	27:47	0:0	6	;
water	28:4	0:0	4	}
for	30:4	69:4	2	(i = 0 ;i < ctx -> num_planes;i ++)
forinit	30:9	30:14	3	i = 0 ;
water	30:9	0:0	4	i
op	30:11	0:0	4	=
water	30:13	0:0	4	0
water	30:14	0:0	4	;
cond	30:16	30:25	3	i < ctx -> num_planes
water	30:16	0:0	4	i
op	30:18	0:0	4	<
water	30:20	0:0	4	ctx
op	30:23	0:0	4	->
water	30:25	0:0	4	num_planes
forexpr	30:37	30:38	3	i ++
water	30:37	0:0	4	i
op	30:38	0:0	4	++
stmts	30:42	69:4	3	
water	30:42	0:0	4	{
water	31:8	0:0	4	is_chroma
op	31:21	0:0	4	=
water	31:23	0:0	4	(
water	31:24	0:0	4	i
op	31:26	0:0	4	==
water	31:29	0:0	4	1
op	31:31	0:0	4	||
water	31:34	0:0	4	i
op	31:36	0:0	4	==
water	31:39	0:0	4	2
water	31:40	0:0	4	)
water	31:41	0:0	4	;
water	32:8	0:0	4	plane_factor
op	32:21	0:0	4	=
water	32:23	0:0	4	slice_width_factor
op	32:42	0:0	4	+
water	32:44	0:0	4	2
water	32:45	0:0	4	;
if	33:8	34:50	4	(is_chroma)
cond	33:12	33:12	5	is_chroma
water	33:12	0:0	6	is_chroma
stmts	34:12	34:50	5	
water	34:12	0:0	6	plane_factor
op	34:25	0:0	6	+=
water	34:28	0:0	6	ctx
op	34:31	0:0	6	->
water	34:33	0:0	6	chroma_factor
op	34:47	0:0	6	-
water	34:49	0:0	6	3
water	34:50	0:0	6	;
if	35:8	40:8	4	(! is_chroma || ctx -> chroma_factor == CFACTOR_Y444)
cond	35:12	35:48	5	! is_chroma || ctx -> chroma_factor == CFACTOR_Y444
op	35:12	0:0	6	!
water	35:13	0:0	6	is_chroma
op	35:23	0:0	6	||
water	35:26	0:0	6	ctx
op	35:29	0:0	6	->
water	35:31	0:0	6	chroma_factor
op	35:45	0:0	6	==
water	35:48	0:0	6	CFACTOR_Y444
stmts	35:62	40:8	5	
water	35:62	0:0	6	{
water	36:12	0:0	6	xp
op	36:24	0:0	6	=
water	36:26	0:0	6	x
op	36:28	0:0	6	<<
water	36:31	0:0	6	4
water	36:32	0:0	6	;
water	37:12	0:0	6	yp
op	37:24	0:0	6	=
water	37:26	0:0	6	y
op	37:28	0:0	6	<<
water	37:31	0:0	6	4
water	37:32	0:0	6	;
water	38:12	0:0	6	num_cblocks
op	38:24	0:0	6	=
water	38:26	0:0	6	4
water	38:27	0:0	6	;
water	39:12	0:0	6	pwidth
op	39:24	0:0	6	=
water	39:26	0:0	6	avctx
op	39:31	0:0	6	->
water	39:33	0:0	6	width
water	39:38	0:0	6	;
water	40:8	0:0	6	}
else	40:10	45:8	4
stmts	40:15	45:8	5	
water	40:15	0:0	6	{
water	41:12	0:0	6	xp
op	41:24	0:0	6	=
water	41:26	0:0	6	x
op	41:28	0:0	6	<<
water	41:31	0:0	6	3
water	41:32	0:0	6	;
water	42:12	0:0	6	yp
op	42:24	0:0	6	=
water	42:26	0:0	6	y
op	42:28	0:0	6	<<
water	42:31	0:0	6	4
water	42:32	0:0	6	;
water	43:12	0:0	6	num_cblocks
op	43:24	0:0	6	=
water	43:26	0:0	6	2
water	43:27	0:0	6	;
water	44:12	0:0	6	pwidth
op	44:24	0:0	6	=
water	44:26	0:0	6	avctx
op	44:31	0:0	6	->
water	44:33	0:0	6	width
op	44:39	0:0	6	>>
water	44:42	0:0	6	1
water	44:43	0:0	6	;
water	45:8	0:0	6	}
water	47:8	0:0	4	linesize
op	47:17	0:0	4	=
water	47:19	0:0	4	pic
op	47:22	0:0	4	->
water	47:24	0:0	4	linesize
op	47:32	0:0	4	[
water	47:33	0:0	4	i
op	47:34	0:0	4	]
op	47:36	0:0	4	*
water	47:38	0:0	4	ctx
op	47:41	0:0	4	->
water	47:43	0:0	4	pictures_per_frame
water	47:61	0:0	4	;
water	48:8	0:0	4	src
op	48:12	0:0	4	=
call	48:14	49:59	4	(constuint16_t*)
arg	48:32	49:59	5	pic->data[i]+yp*linesize+line_add*pic->linesize[i]
water	48:32	0:0	6	pic
op	48:35	0:0	6	->
water	48:37	0:0	6	data
op	48:41	0:0	6	[
water	48:42	0:0	6	i
op	48:43	0:0	6	]
op	48:45	0:0	6	+
water	48:47	0:0	6	yp
op	48:50	0:0	6	*
water	48:52	0:0	6	linesize
op	48:61	0:0	6	+
water	49:32	0:0	6	line_add
op	49:41	0:0	6	*
water	49:43	0:0	6	pic
op	49:46	0:0	6	->
water	49:48	0:0	6	linesize
op	49:56	0:0	6	[
water	49:57	0:0	6	i
op	49:58	0:0	6	]
op	49:61	0:0	4	+
water	49:63	0:0	4	xp
water	49:65	0:0	4	;
if	51:8	60:8	4	(i < 3)
cond	51:12	51:16	5	i < 3
water	51:12	0:0	6	i
op	51:14	0:0	6	<
water	51:16	0:0	6	3
stmts	51:19	60:8	5	
water	51:19	0:0	6	{
call	52:12	55:64	6	get_slice_data
arg	52:27	52:30	7	ctx
water	52:27	0:0	8	ctx
arg	52:32	52:35	7	src
water	52:32	0:0	8	src
arg	52:37	52:45	7	linesize
water	52:37	0:0	8	linesize
arg	52:47	52:49	7	xp
water	52:47	0:0	8	xp
arg	52:51	52:53	7	yp
water	52:51	0:0	8	yp
arg	53:27	53:33	7	pwidth
water	53:27	0:0	8	pwidth
arg	53:35	53:74	7	avctx->height/ctx->pictures_per_frame
water	53:35	0:0	8	avctx
op	53:40	0:0	8	->
water	53:42	0:0	8	height
op	53:49	0:0	8	/
water	53:51	0:0	8	ctx
op	53:54	0:0	8	->
water	53:56	0:0	8	pictures_per_frame
arg	54:27	54:41	7	ctx->blocks[0]
water	54:27	0:0	8	ctx
op	54:30	0:0	8	->
water	54:32	0:0	8	blocks
op	54:38	0:0	8	[
water	54:39	0:0	8	0
op	54:40	0:0	8	]
arg	54:43	54:55	7	ctx->emu_buf
water	54:43	0:0	8	ctx
op	54:46	0:0	8	->
water	54:48	0:0	8	emu_buf
arg	55:27	55:40	7	mbs_per_slice
water	55:27	0:0	8	mbs_per_slice
arg	55:42	55:53	7	num_cblocks
water	55:42	0:0	8	num_cblocks
arg	55:55	55:64	7	is_chroma
water	55:55	0:0	8	is_chroma
water	55:65	0:0	6	;
water	56:12	0:0	6	sizes
op	56:17	0:0	6	[
water	56:18	0:0	6	i
op	56:19	0:0	6	]
op	56:21	0:0	6	=
call	56:23	59:46	6	encode_slice_plane
arg	56:42	56:45	7	ctx
water	56:42	0:0	8	ctx
arg	56:47	56:49	7	pb
water	56:47	0:0	8	pb
arg	56:51	56:54	7	src
water	56:51	0:0	8	src
arg	56:56	56:64	7	linesize
water	56:56	0:0	8	linesize
arg	57:42	57:55	7	mbs_per_slice
water	57:42	0:0	8	mbs_per_slice
arg	57:57	57:71	7	ctx->blocks[0]
water	57:57	0:0	8	ctx
op	57:60	0:0	8	->
water	57:62	0:0	8	blocks
op	57:68	0:0	8	[
water	57:69	0:0	8	0
op	57:70	0:0	8	]
arg	58:42	58:53	7	num_cblocks
water	58:42	0:0	8	num_cblocks
arg	58:55	58:67	7	plane_factor
water	58:55	0:0	8	plane_factor
arg	59:42	59:46	7	qmat
water	59:42	0:0	8	qmat
water	59:47	0:0	6	;
water	60:8	0:0	6	}
else	60:10	67:8	4
stmts	60:15	67:8	5	
water	60:15	0:0	6	{
call	61:12	63:73	6	get_alpha_data
arg	61:27	61:30	7	ctx
water	61:27	0:0	8	ctx
arg	61:32	61:35	7	src
water	61:32	0:0	8	src
arg	61:37	61:45	7	linesize
water	61:37	0:0	8	linesize
arg	61:47	61:49	7	xp
water	61:47	0:0	8	xp
arg	61:51	61:53	7	yp
water	61:51	0:0	8	yp
arg	62:27	62:33	7	pwidth
water	62:27	0:0	8	pwidth
arg	62:35	62:74	7	avctx->height/ctx->pictures_per_frame
water	62:35	0:0	8	avctx
op	62:40	0:0	8	->
water	62:42	0:0	8	height
op	62:49	0:0	8	/
water	62:51	0:0	8	ctx
op	62:54	0:0	8	->
water	62:56	0:0	8	pictures_per_frame
arg	63:27	63:41	7	ctx->blocks[0]
water	63:27	0:0	8	ctx
op	63:30	0:0	8	->
water	63:32	0:0	8	blocks
op	63:38	0:0	8	[
water	63:39	0:0	8	0
op	63:40	0:0	8	]
arg	63:43	63:56	7	mbs_per_slice
water	63:43	0:0	8	mbs_per_slice
arg	63:58	63:73	7	ctx->alpha_bits
water	63:58	0:0	8	ctx
op	63:61	0:0	8	->
water	63:63	0:0	8	alpha_bits
water	63:74	0:0	6	;
water	64:12	0:0	6	sizes
op	64:17	0:0	6	[
water	64:18	0:0	6	i
op	64:19	0:0	6	]
op	64:21	0:0	6	=
call	64:23	66:47	6	encode_alpha_plane
arg	64:42	64:45	7	ctx
water	64:42	0:0	8	ctx
arg	64:47	64:49	7	pb
water	64:47	0:0	8	pb
arg	64:51	64:54	7	src
water	64:51	0:0	8	src
arg	64:56	64:64	7	linesize
water	64:56	0:0	8	linesize
arg	65:42	65:55	7	mbs_per_slice
water	65:42	0:0	8	mbs_per_slice
arg	65:57	65:71	7	ctx->blocks[0]
water	65:57	0:0	8	ctx
op	65:60	0:0	8	->
water	65:62	0:0	8	blocks
op	65:68	0:0	8	[
water	65:69	0:0	8	0
op	65:70	0:0	8	]
arg	66:42	66:47	7	quant
water	66:42	0:0	8	quant
water	66:48	0:0	6	;
water	67:8	0:0	6	}
water	68:8	0:0	4	total_size
op	68:19	0:0	4	+=
water	68:22	0:0	4	sizes
op	68:27	0:0	4	[
water	68:28	0:0	4	i
op	68:29	0:0	4	]
water	68:30	0:0	4	;
water	69:4	0:0	4	}
return	70:4	70:21	2	total_size
water	70:11	0:0	3	total_size
