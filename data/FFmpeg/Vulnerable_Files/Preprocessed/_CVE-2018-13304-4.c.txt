func	1:0	147:0	0	int	ff_mpeg4_decode_picture_header
params	1:34	0:0	1	
param	1:35	1:55	2	Mpeg4DecContext *	ctx
param	1:57	1:74	2	GetBitContext *	gb
stmnts	0:0	146:41	1	
decl	3:4	3:31	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	m
water	4:4	0:0	2	unsigned
water	4:13	0:0	2	startcode
water	4:22	0:0	2	,
water	4:24	0:0	2	v
water	4:25	0:0	2	;
decl	5:4	5:11	2	int	ret
decl	6:4	6:15	2	int	vol
op	6:12	0:0	2	=
water	6:14	0:0	2	0
call	9:4	9:21	2	align_get_bits
arg	9:19	9:21	3	gb
water	9:19	0:0	4	gb
water	9:22	0:0	2	;
if	14:4	15:41	2	(! s -> studio_profile && s -> avctx -> bits_per_raw_sample != 8)
cond	14:8	14:63	3	! s -> studio_profile && s -> avctx -> bits_per_raw_sample != 8
op	14:8	0:0	4	!
water	14:9	0:0	4	s
op	14:10	0:0	4	->
water	14:12	0:0	4	studio_profile
op	14:27	0:0	4	&&
water	14:30	0:0	4	s
op	14:31	0:0	4	->
water	14:33	0:0	4	avctx
op	14:38	0:0	4	->
water	14:40	0:0	4	bits_per_raw_sample
op	14:60	0:0	4	!=
water	14:63	0:0	4	8
stmts	15:8	15:41	3	
water	15:8	0:0	4	s
op	15:9	0:0	4	->
water	15:11	0:0	4	avctx
op	15:16	0:0	4	->
water	15:18	0:0	4	bits_per_raw_sample
op	15:38	0:0	4	=
water	15:40	0:0	4	0
water	15:41	0:0	4	;
if	17:4	21:4	2	(s -> codec_tag ==AV_RL32 ("WV1F" ) &&show_bits (gb ,24 ) == 0 x575630)
cond	17:8	17:65	3	s -> codec_tag ==AV_RL32 ("WV1F" ) &&show_bits (gb ,24 ) == 0 x575630
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	codec_tag
op	17:21	0:0	4	==
call	17:24	17:38	4	AV_RL32
arg	17:32	17:38	5	"WV1F"
water	17:32	0:0	6	"WV1F"
op	17:40	0:0	4	&&
call	17:43	17:59	4	show_bits
arg	17:53	17:55	5	gb
water	17:53	0:0	6	gb
arg	17:57	17:59	5	24
water	17:57	0:0	6	24
op	17:61	0:0	4	==
water	17:64	0:0	4	0
water	17:65	0:0	4	x575630
stmts	17:74	21:4	3	
water	17:74	0:0	4	{
call	18:8	18:24	4	skip_bits
arg	18:18	18:20	5	gb
water	18:18	0:0	6	gb
arg	18:22	18:24	5	24
water	18:22	0:0	6	24
water	18:25	0:0	4	;
if	19:8	20:20	4	(get_bits (gb ,8 ) == 0 xF0)
cond	19:12	19:32	5	get_bits (gb ,8 ) == 0 xF0
call	19:12	19:26	6	get_bits
arg	19:21	19:23	7	gb
water	19:21	0:0	8	gb
arg	19:25	19:26	7	8
water	19:25	0:0	8	8
op	19:28	0:0	6	==
water	19:31	0:0	6	0
water	19:32	0:0	6	xF0
stmts	20:12	20:20	5	
goto	20:12	20:20	6	end
water	20:17	0:0	7	end
water	21:4	0:0	4	}
water	23:4	0:0	2	startcode
op	23:14	0:0	2	=
water	23:16	0:0	2	0
water	23:17	0:0	2	xff
water	23:20	0:0	2	;
for	24:4	132:4	2	(;;)
forinit	24:9	24:9	3	;
water	24:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	24:13	132:4	3	
water	24:13	0:0	4	{
if	25:8	32:8	4	(get_bits_count (gb ) >= gb -> size_in_bits)
cond	25:12	25:38	5	get_bits_count (gb ) >= gb -> size_in_bits
call	25:12	25:29	6	get_bits_count
arg	25:27	25:29	7	gb
water	25:27	0:0	8	gb
op	25:31	0:0	6	>=
water	25:34	0:0	6	gb
op	25:36	0:0	6	->
water	25:38	0:0	6	size_in_bits
stmts	25:52	32:8	5	
water	25:52	0:0	6	{
if	26:12	30:12	6	(gb -> size_in_bits == 8 && ( ctx -> divx_version >= 0 || ctx -> xvid_build >= 0 ) || s -> codec_tag ==AV_RL32 ("QMP4" ))
cond	26:16	27:98	7	gb -> size_in_bits == 8 && ( ctx -> divx_version >= 0 || ctx -> xvid_build >= 0 ) || s -> codec_tag ==AV_RL32 ("QMP4" )
water	26:16	0:0	8	gb
op	26:18	0:0	8	->
water	26:20	0:0	8	size_in_bits
op	26:33	0:0	8	==
water	26:36	0:0	8	8
op	26:38	0:0	8	&&
water	27:16	0:0	8	(
water	27:17	0:0	8	ctx
op	27:20	0:0	8	->
water	27:22	0:0	8	divx_version
op	27:35	0:0	8	>=
water	27:38	0:0	8	0
op	27:40	0:0	8	||
water	27:43	0:0	8	ctx
op	27:46	0:0	8	->
water	27:48	0:0	8	xvid_build
op	27:59	0:0	8	>=
water	27:62	0:0	8	0
water	27:63	0:0	8	)
op	27:65	0:0	8	||
water	27:68	0:0	8	s
op	27:69	0:0	8	->
water	27:71	0:0	8	codec_tag
op	27:81	0:0	8	==
call	27:84	27:98	8	AV_RL32
arg	27:92	27:98	9	"QMP4"
water	27:92	0:0	10	"QMP4"
stmts	27:101	30:12	7	
water	27:101	0:0	8	{
call	28:16	28:84	8	av_log
arg	28:23	28:31	9	s->avctx
water	28:23	0:0	10	s
op	28:24	0:0	10	->
water	28:26	0:0	10	avctx
arg	28:33	28:47	9	AV_LOG_VERBOSE
water	28:33	0:0	10	AV_LOG_VERBOSE
arg	28:49	28:66	9	"frame skip %d\n"
water	28:49	0:0	10	"frame skip %d\n"
arg	28:68	28:84	9	gb->size_in_bits
water	28:68	0:0	10	gb
op	28:70	0:0	10	->
water	28:72	0:0	10	size_in_bits
water	28:85	0:0	8	;
return	29:16	29:36	8	FRAME_SKIPPED
water	29:23	0:0	9	FRAME_SKIPPED
water	30:12	0:0	8	}
else	30:14	31:42	6
stmts	31:16	31:42	7	
return	31:16	31:42	8	AVERROR_INVALIDDATA
water	31:23	0:0	9	AVERROR_INVALIDDATA
water	32:8	0:0	6	}
water	35:8	0:0	4	v
op	35:10	0:0	4	=
call	35:12	35:26	4	get_bits
arg	35:21	35:23	5	gb
water	35:21	0:0	6	gb
arg	35:25	35:26	5	8
water	35:25	0:0	6	8
water	35:27	0:0	4	;
water	36:8	0:0	4	startcode
op	36:18	0:0	4	=
water	36:20	0:0	4	(
water	36:21	0:0	4	(
water	36:22	0:0	4	startcode
op	36:32	0:0	4	<<
water	36:35	0:0	4	8
water	36:36	0:0	4	)
op	36:38	0:0	4	|
water	36:40	0:0	4	v
water	36:41	0:0	4	)
op	36:43	0:0	4	&
water	36:45	0:0	4	0
water	36:46	0:0	4	xffffffff
water	36:55	0:0	4	;
if	38:8	39:20	4	(( startcode & 0 xFFFFFF00 ) != 0 x100)
cond	38:12	38:41	5	( startcode & 0 xFFFFFF00 ) != 0 x100
water	38:12	0:0	6	(
water	38:13	0:0	6	startcode
op	38:23	0:0	6	&
water	38:25	0:0	6	0
water	38:26	0:0	6	xFFFFFF00
water	38:35	0:0	6	)
op	38:37	0:0	6	!=
water	38:40	0:0	6	0
water	38:41	0:0	6	x100
stmts	39:12	39:20	5	
continue	39:12	39:20	6	
if	41:8	98:8	4	(s -> avctx -> debug & FF_DEBUG_STARTCODE)
cond	41:12	41:30	5	s -> avctx -> debug & FF_DEBUG_STARTCODE
water	41:12	0:0	6	s
op	41:13	0:0	6	->
water	41:15	0:0	6	avctx
op	41:20	0:0	6	->
water	41:22	0:0	6	debug
op	41:28	0:0	6	&
water	41:30	0:0	6	FF_DEBUG_STARTCODE
stmts	41:50	98:8	5	
water	41:50	0:0	6	{
call	42:12	42:71	6	av_log
arg	42:19	42:27	7	s->avctx
water	42:19	0:0	8	s
op	42:20	0:0	8	->
water	42:22	0:0	8	avctx
arg	42:29	42:41	7	AV_LOG_DEBUG
water	42:29	0:0	8	AV_LOG_DEBUG
arg	42:43	42:60	7	"startcode: %3X "
water	42:43	0:0	8	"startcode: %3X "
arg	42:62	42:71	7	startcode
water	42:62	0:0	8	startcode
water	42:72	0:0	6	;
if	43:12	44:68	6	(startcode <= 0 x11F)
cond	43:16	43:30	7	startcode <= 0 x11F
water	43:16	0:0	8	startcode
op	43:26	0:0	8	<=
water	43:29	0:0	8	0
water	43:30	0:0	8	x11F
stmts	44:16	44:68	7	
call	44:16	44:67	8	av_log
arg	44:23	44:31	9	s->avctx
water	44:23	0:0	10	s
op	44:24	0:0	10	->
water	44:26	0:0	10	avctx
arg	44:33	44:45	9	AV_LOG_DEBUG
water	44:33	0:0	10	AV_LOG_DEBUG
arg	44:47	44:67	9	"Video Object Start"
water	44:47	0:0	10	"Video Object Start"
water	44:68	0:0	8	;
else	45:12	46:74	6
stmts	45:17	46:74	7	
if	45:17	46:74	8	(startcode <= 0 x12F)
cond	45:21	45:35	9	startcode <= 0 x12F
water	45:21	0:0	10	startcode
op	45:31	0:0	10	<=
water	45:34	0:0	10	0
water	45:35	0:0	10	x12F
stmts	46:16	46:74	9	
call	46:16	46:73	10	av_log
arg	46:23	46:31	11	s->avctx
water	46:23	0:0	12	s
op	46:24	0:0	12	->
water	46:26	0:0	12	avctx
arg	46:33	46:45	11	AV_LOG_DEBUG
water	46:33	0:0	12	AV_LOG_DEBUG
arg	46:47	46:73	11	"Video Object Layer Start"
water	46:47	0:0	12	"Video Object Layer Start"
water	46:74	0:0	10	;
else	47:12	48:58	6
stmts	47:17	48:58	7	
if	47:17	48:58	8	(startcode <= 0 x13F)
cond	47:21	47:35	9	startcode <= 0 x13F
water	47:21	0:0	10	startcode
op	47:31	0:0	10	<=
water	47:34	0:0	10	0
water	47:35	0:0	10	x13F
stmts	48:16	48:58	9	
call	48:16	48:57	10	av_log
arg	48:23	48:31	11	s->avctx
water	48:23	0:0	12	s
op	48:24	0:0	12	->
water	48:26	0:0	12	avctx
arg	48:33	48:45	11	AV_LOG_DEBUG
water	48:33	0:0	12	AV_LOG_DEBUG
arg	48:47	48:57	11	"Reserved"
water	48:47	0:0	12	"Reserved"
water	48:58	0:0	10	;
else	49:12	50:62	6
stmts	49:17	50:62	7	
if	49:17	50:62	8	(startcode <= 0 x15F)
cond	49:21	49:35	9	startcode <= 0 x15F
water	49:21	0:0	10	startcode
op	49:31	0:0	10	<=
water	49:34	0:0	10	0
water	49:35	0:0	10	x15F
stmts	50:16	50:62	9	
call	50:16	50:61	10	av_log
arg	50:23	50:31	11	s->avctx
water	50:23	0:0	12	s
op	50:24	0:0	12	->
water	50:26	0:0	12	avctx
arg	50:33	50:45	11	AV_LOG_DEBUG
water	50:33	0:0	12	AV_LOG_DEBUG
arg	50:47	50:61	11	"FGS bp start"
water	50:47	0:0	12	"FGS bp start"
water	50:62	0:0	10	;
else	51:12	52:58	6
stmts	51:17	52:58	7	
if	51:17	52:58	8	(startcode <= 0 x1AF)
cond	51:21	51:35	9	startcode <= 0 x1AF
water	51:21	0:0	10	startcode
op	51:31	0:0	10	<=
water	51:34	0:0	10	0
water	51:35	0:0	10	x1AF
stmts	52:16	52:58	9	
call	52:16	52:57	10	av_log
arg	52:23	52:31	11	s->avctx
water	52:23	0:0	12	s
op	52:24	0:0	12	->
water	52:26	0:0	12	avctx
arg	52:33	52:45	11	AV_LOG_DEBUG
water	52:33	0:0	12	AV_LOG_DEBUG
arg	52:47	52:57	11	"Reserved"
water	52:47	0:0	12	"Reserved"
water	52:58	0:0	10	;
else	53:12	54:73	6
stmts	53:17	54:73	7	
if	53:17	54:73	8	(startcode == 0 x1B0)
cond	53:21	53:35	9	startcode == 0 x1B0
water	53:21	0:0	10	startcode
op	53:31	0:0	10	==
water	53:34	0:0	10	0
water	53:35	0:0	10	x1B0
stmts	54:16	54:73	9	
call	54:16	54:72	10	av_log
arg	54:23	54:31	11	s->avctx
water	54:23	0:0	12	s
op	54:24	0:0	12	->
water	54:26	0:0	12	avctx
arg	54:33	54:45	11	AV_LOG_DEBUG
water	54:33	0:0	12	AV_LOG_DEBUG
arg	54:47	54:72	11	"Visual Object Seq Start"
water	54:47	0:0	12	"Visual Object Seq Start"
water	54:73	0:0	10	;
else	55:12	56:71	6
stmts	55:17	56:71	7	
if	55:17	56:71	8	(startcode == 0 x1B1)
cond	55:21	55:35	9	startcode == 0 x1B1
water	55:21	0:0	10	startcode
op	55:31	0:0	10	==
water	55:34	0:0	10	0
water	55:35	0:0	10	x1B1
stmts	56:16	56:71	9	
call	56:16	56:70	10	av_log
arg	56:23	56:31	11	s->avctx
water	56:23	0:0	12	s
op	56:24	0:0	12	->
water	56:26	0:0	12	avctx
arg	56:33	56:45	11	AV_LOG_DEBUG
water	56:33	0:0	12	AV_LOG_DEBUG
arg	56:47	56:70	11	"Visual Object Seq End"
water	56:47	0:0	12	"Visual Object Seq End"
water	56:71	0:0	10	;
else	57:12	58:59	6
stmts	57:17	58:59	7	
if	57:17	58:59	8	(startcode == 0 x1B2)
cond	57:21	57:35	9	startcode == 0 x1B2
water	57:21	0:0	10	startcode
op	57:31	0:0	10	==
water	57:34	0:0	10	0
water	57:35	0:0	10	x1B2
stmts	58:16	58:59	9	
call	58:16	58:58	10	av_log
arg	58:23	58:31	11	s->avctx
water	58:23	0:0	12	s
op	58:24	0:0	12	->
water	58:26	0:0	12	avctx
arg	58:33	58:45	11	AV_LOG_DEBUG
water	58:33	0:0	12	AV_LOG_DEBUG
arg	58:47	58:58	11	"User Data"
water	58:47	0:0	12	"User Data"
water	58:59	0:0	10	;
else	59:12	60:68	6
stmts	59:17	60:68	7	
if	59:17	60:68	8	(startcode == 0 x1B3)
cond	59:21	59:35	9	startcode == 0 x1B3
water	59:21	0:0	10	startcode
op	59:31	0:0	10	==
water	59:34	0:0	10	0
water	59:35	0:0	10	x1B3
stmts	60:16	60:68	9	
call	60:16	60:67	10	av_log
arg	60:23	60:31	11	s->avctx
water	60:23	0:0	12	s
op	60:24	0:0	12	->
water	60:26	0:0	12	avctx
arg	60:33	60:45	11	AV_LOG_DEBUG
water	60:33	0:0	12	AV_LOG_DEBUG
arg	60:47	60:67	11	"Group of VOP start"
water	60:47	0:0	12	"Group of VOP start"
water	60:68	0:0	10	;
else	61:12	62:69	6
stmts	61:17	62:69	7	
if	61:17	62:69	8	(startcode == 0 x1B4)
cond	61:21	61:35	9	startcode == 0 x1B4
water	61:21	0:0	10	startcode
op	61:31	0:0	10	==
water	61:34	0:0	10	0
water	61:35	0:0	10	x1B4
stmts	62:16	62:69	9	
call	62:16	62:68	10	av_log
arg	62:23	62:31	11	s->avctx
water	62:23	0:0	12	s
op	62:24	0:0	12	->
water	62:26	0:0	12	avctx
arg	62:33	62:45	11	AV_LOG_DEBUG
water	62:33	0:0	12	AV_LOG_DEBUG
arg	62:47	62:68	11	"Video Session Error"
water	62:47	0:0	12	"Video Session Error"
water	62:69	0:0	10	;
else	63:12	64:69	6
stmts	63:17	64:69	7	
if	63:17	64:69	8	(startcode == 0 x1B5)
cond	63:21	63:35	9	startcode == 0 x1B5
water	63:21	0:0	10	startcode
op	63:31	0:0	10	==
water	63:34	0:0	10	0
water	63:35	0:0	10	x1B5
stmts	64:16	64:69	9	
call	64:16	64:68	10	av_log
arg	64:23	64:31	11	s->avctx
water	64:23	0:0	12	s
op	64:24	0:0	12	->
water	64:26	0:0	12	avctx
arg	64:33	64:45	11	AV_LOG_DEBUG
water	64:33	0:0	12	AV_LOG_DEBUG
arg	64:47	64:68	11	"Visual Object Start"
water	64:47	0:0	12	"Visual Object Start"
water	64:69	0:0	10	;
else	65:12	66:74	6
stmts	65:17	66:74	7	
if	65:17	66:74	8	(startcode == 0 x1B6)
cond	65:21	65:35	9	startcode == 0 x1B6
water	65:21	0:0	10	startcode
op	65:31	0:0	10	==
water	65:34	0:0	10	0
water	65:35	0:0	10	x1B6
stmts	66:16	66:74	9	
call	66:16	66:73	10	av_log
arg	66:23	66:31	11	s->avctx
water	66:23	0:0	12	s
op	66:24	0:0	12	->
water	66:26	0:0	12	avctx
arg	66:33	66:45	11	AV_LOG_DEBUG
water	66:33	0:0	12	AV_LOG_DEBUG
arg	66:47	66:73	11	"Video Object Plane start"
water	66:47	0:0	12	"Video Object Plane start"
water	66:74	0:0	10	;
else	67:12	68:61	6
stmts	67:17	68:61	7	
if	67:17	68:61	8	(startcode == 0 x1B7)
cond	67:21	67:35	9	startcode == 0 x1B7
water	67:21	0:0	10	startcode
op	67:31	0:0	10	==
water	67:34	0:0	10	0
water	67:35	0:0	10	x1B7
stmts	68:16	68:61	9	
call	68:16	68:60	10	av_log
arg	68:23	68:31	11	s->avctx
water	68:23	0:0	12	s
op	68:24	0:0	12	->
water	68:26	0:0	12	avctx
arg	68:33	68:45	11	AV_LOG_DEBUG
water	68:33	0:0	12	AV_LOG_DEBUG
arg	68:47	68:60	11	"slice start"
water	68:47	0:0	12	"slice start"
water	68:61	0:0	10	;
else	69:12	70:65	6
stmts	69:17	70:65	7	
if	69:17	70:65	8	(startcode == 0 x1B8)
cond	69:21	69:35	9	startcode == 0 x1B8
water	69:21	0:0	10	startcode
op	69:31	0:0	10	==
water	69:34	0:0	10	0
water	69:35	0:0	10	x1B8
stmts	70:16	70:65	9	
call	70:16	70:64	10	av_log
arg	70:23	70:31	11	s->avctx
water	70:23	0:0	12	s
op	70:24	0:0	12	->
water	70:26	0:0	12	avctx
arg	70:33	70:45	11	AV_LOG_DEBUG
water	70:33	0:0	12	AV_LOG_DEBUG
arg	70:47	70:64	11	"extension start"
water	70:47	0:0	12	"extension start"
water	70:65	0:0	10	;
else	71:12	72:59	6
stmts	71:17	72:59	7	
if	71:17	72:59	8	(startcode == 0 x1B9)
cond	71:21	71:35	9	startcode == 0 x1B9
water	71:21	0:0	10	startcode
op	71:31	0:0	10	==
water	71:34	0:0	10	0
water	71:35	0:0	10	x1B9
stmts	72:16	72:59	9	
call	72:16	72:58	10	av_log
arg	72:23	72:31	11	s->avctx
water	72:23	0:0	12	s
op	72:24	0:0	12	->
water	72:26	0:0	12	avctx
arg	72:33	72:45	11	AV_LOG_DEBUG
water	72:33	0:0	12	AV_LOG_DEBUG
arg	72:47	72:58	11	"fgs start"
water	72:47	0:0	12	"fgs start"
water	72:59	0:0	10	;
else	73:12	74:66	6
stmts	73:17	74:66	7	
if	73:17	74:66	8	(startcode == 0 x1BA)
cond	73:21	73:35	9	startcode == 0 x1BA
water	73:21	0:0	10	startcode
op	73:31	0:0	10	==
water	73:34	0:0	10	0
water	73:35	0:0	10	x1BA
stmts	74:16	74:66	9	
call	74:16	74:65	10	av_log
arg	74:23	74:31	11	s->avctx
water	74:23	0:0	12	s
op	74:24	0:0	12	->
water	74:26	0:0	12	avctx
arg	74:33	74:45	11	AV_LOG_DEBUG
water	74:33	0:0	12	AV_LOG_DEBUG
arg	74:47	74:65	11	"FBA Object start"
water	74:47	0:0	12	"FBA Object start"
water	74:66	0:0	10	;
else	75:12	76:72	6
stmts	75:17	76:72	7	
if	75:17	76:72	8	(startcode == 0 x1BB)
cond	75:21	75:35	9	startcode == 0 x1BB
water	75:21	0:0	10	startcode
op	75:31	0:0	10	==
water	75:34	0:0	10	0
water	75:35	0:0	10	x1BB
stmts	76:16	76:72	9	
call	76:16	76:71	10	av_log
arg	76:23	76:31	11	s->avctx
water	76:23	0:0	12	s
op	76:24	0:0	12	->
water	76:26	0:0	12	avctx
arg	76:33	76:45	11	AV_LOG_DEBUG
water	76:33	0:0	12	AV_LOG_DEBUG
arg	76:47	76:71	11	"FBA Object Plane start"
water	76:47	0:0	12	"FBA Object Plane start"
water	76:72	0:0	10	;
else	77:12	78:67	6
stmts	77:17	78:67	7	
if	77:17	78:67	8	(startcode == 0 x1BC)
cond	77:21	77:35	9	startcode == 0 x1BC
water	77:21	0:0	10	startcode
op	77:31	0:0	10	==
water	77:34	0:0	10	0
water	77:35	0:0	10	x1BC
stmts	78:16	78:67	9	
call	78:16	78:66	10	av_log
arg	78:23	78:31	11	s->avctx
water	78:23	0:0	12	s
op	78:24	0:0	12	->
water	78:26	0:0	12	avctx
arg	78:33	78:45	11	AV_LOG_DEBUG
water	78:33	0:0	12	AV_LOG_DEBUG
arg	78:47	78:66	11	"Mesh Object start"
water	78:47	0:0	12	"Mesh Object start"
water	78:67	0:0	10	;
else	79:12	80:73	6
stmts	79:17	80:73	7	
if	79:17	80:73	8	(startcode == 0 x1BD)
cond	79:21	79:35	9	startcode == 0 x1BD
water	79:21	0:0	10	startcode
op	79:31	0:0	10	==
water	79:34	0:0	10	0
water	79:35	0:0	10	x1BD
stmts	80:16	80:73	9	
call	80:16	80:72	10	av_log
arg	80:23	80:31	11	s->avctx
water	80:23	0:0	12	s
op	80:24	0:0	12	->
water	80:26	0:0	12	avctx
arg	80:33	80:45	11	AV_LOG_DEBUG
water	80:33	0:0	12	AV_LOG_DEBUG
arg	80:47	80:72	11	"Mesh Object Plane start"
water	80:47	0:0	12	"Mesh Object Plane start"
water	80:73	0:0	10	;
else	81:12	82:76	6
stmts	81:17	82:76	7	
if	81:17	82:76	8	(startcode == 0 x1BE)
cond	81:21	81:35	9	startcode == 0 x1BE
water	81:21	0:0	10	startcode
op	81:31	0:0	10	==
water	81:34	0:0	10	0
water	81:35	0:0	10	x1BE
stmts	82:16	82:76	9	
call	82:16	82:75	10	av_log
arg	82:23	82:31	11	s->avctx
water	82:23	0:0	12	s
op	82:24	0:0	12	->
water	82:26	0:0	12	avctx
arg	82:33	82:45	11	AV_LOG_DEBUG
water	82:33	0:0	12	AV_LOG_DEBUG
arg	82:47	82:75	11	"Still Texture Object start"
water	82:47	0:0	12	"Still Texture Object start"
water	82:76	0:0	10	;
else	83:12	84:77	6
stmts	83:17	84:77	7	
if	83:17	84:77	8	(startcode == 0 x1BF)
cond	83:21	83:35	9	startcode == 0 x1BF
water	83:21	0:0	10	startcode
op	83:31	0:0	10	==
water	83:34	0:0	10	0
water	83:35	0:0	10	x1BF
stmts	84:16	84:77	9	
call	84:16	84:76	10	av_log
arg	84:23	84:31	11	s->avctx
water	84:23	0:0	12	s
op	84:24	0:0	12	->
water	84:26	0:0	12	avctx
arg	84:33	84:45	11	AV_LOG_DEBUG
water	84:33	0:0	12	AV_LOG_DEBUG
arg	84:47	84:76	11	"Texture Spatial Layer start"
water	84:47	0:0	12	"Texture Spatial Layer start"
water	84:77	0:0	10	;
else	85:12	86:73	6
stmts	85:17	86:73	7	
if	85:17	86:73	8	(startcode == 0 x1C0)
cond	85:21	85:35	9	startcode == 0 x1C0
water	85:21	0:0	10	startcode
op	85:31	0:0	10	==
water	85:34	0:0	10	0
water	85:35	0:0	10	x1C0
stmts	86:16	86:73	9	
call	86:16	86:72	10	av_log
arg	86:23	86:31	11	s->avctx
water	86:23	0:0	12	s
op	86:24	0:0	12	->
water	86:26	0:0	12	avctx
arg	86:33	86:45	11	AV_LOG_DEBUG
water	86:33	0:0	12	AV_LOG_DEBUG
arg	86:47	86:72	11	"Texture SNR Layer start"
water	86:47	0:0	12	"Texture SNR Layer start"
water	86:73	0:0	10	;
else	87:12	88:68	6
stmts	87:17	88:68	7	
if	87:17	88:68	8	(startcode == 0 x1C1)
cond	87:21	87:35	9	startcode == 0 x1C1
water	87:21	0:0	10	startcode
op	87:31	0:0	10	==
water	87:34	0:0	10	0
water	87:35	0:0	10	x1C1
stmts	88:16	88:68	9	
call	88:16	88:67	10	av_log
arg	88:23	88:31	11	s->avctx
water	88:23	0:0	12	s
op	88:24	0:0	12	->
water	88:26	0:0	12	avctx
arg	88:33	88:45	11	AV_LOG_DEBUG
water	88:33	0:0	12	AV_LOG_DEBUG
arg	88:47	88:67	11	"Texture Tile start"
water	88:47	0:0	12	"Texture Tile start"
water	88:68	0:0	10	;
else	89:12	90:75	6
stmts	89:17	90:75	7	
if	89:17	90:75	8	(startcode == 0 x1C2)
cond	89:21	89:35	9	startcode == 0 x1C2
water	89:21	0:0	10	startcode
op	89:31	0:0	10	==
water	89:34	0:0	10	0
water	89:35	0:0	10	x1C2
stmts	90:16	90:75	9	
call	90:16	90:74	10	av_log
arg	90:23	90:31	11	s->avctx
water	90:23	0:0	12	s
op	90:24	0:0	12	->
water	90:26	0:0	12	avctx
arg	90:33	90:45	11	AV_LOG_DEBUG
water	90:33	0:0	12	AV_LOG_DEBUG
arg	90:47	90:74	11	"Texture Shape Layer start"
water	90:47	0:0	12	"Texture Shape Layer start"
water	90:75	0:0	10	;
else	91:12	92:64	6
stmts	91:17	92:64	7	
if	91:17	92:64	8	(startcode == 0 x1C3)
cond	91:21	91:35	9	startcode == 0 x1C3
water	91:21	0:0	10	startcode
op	91:31	0:0	10	==
water	91:34	0:0	10	0
water	91:35	0:0	10	x1C3
stmts	92:16	92:64	9	
call	92:16	92:63	10	av_log
arg	92:23	92:31	11	s->avctx
water	92:23	0:0	12	s
op	92:24	0:0	12	->
water	92:26	0:0	12	avctx
arg	92:33	92:45	11	AV_LOG_DEBUG
water	92:33	0:0	12	AV_LOG_DEBUG
arg	92:47	92:63	11	"stuffing start"
water	92:47	0:0	12	"stuffing start"
water	92:64	0:0	10	;
else	93:12	94:58	6
stmts	93:17	94:58	7	
if	93:17	94:58	8	(startcode <= 0 x1C5)
cond	93:21	93:35	9	startcode <= 0 x1C5
water	93:21	0:0	10	startcode
op	93:31	0:0	10	<=
water	93:34	0:0	10	0
water	93:35	0:0	10	x1C5
stmts	94:16	94:58	9	
call	94:16	94:57	10	av_log
arg	94:23	94:31	11	s->avctx
water	94:23	0:0	12	s
op	94:24	0:0	12	->
water	94:26	0:0	12	avctx
arg	94:33	94:45	11	AV_LOG_DEBUG
water	94:33	0:0	12	AV_LOG_DEBUG
arg	94:47	94:57	11	"reserved"
water	94:47	0:0	12	"reserved"
water	94:58	0:0	10	;
else	95:12	96:62	6
stmts	95:17	96:62	7	
if	95:17	96:62	8	(startcode <= 0 x1FF)
cond	95:21	95:35	9	startcode <= 0 x1FF
water	95:21	0:0	10	startcode
op	95:31	0:0	10	<=
water	95:34	0:0	10	0
water	95:35	0:0	10	x1FF
stmts	96:16	96:62	9	
call	96:16	96:61	10	av_log
arg	96:23	96:31	11	s->avctx
water	96:23	0:0	12	s
op	96:24	0:0	12	->
water	96:26	0:0	12	avctx
arg	96:33	96:45	11	AV_LOG_DEBUG
water	96:33	0:0	12	AV_LOG_DEBUG
arg	96:47	96:61	11	"System start"
water	96:47	0:0	12	"System start"
water	96:62	0:0	10	;
call	97:12	97:73	6	av_log
arg	97:19	97:27	7	s->avctx
water	97:19	0:0	8	s
op	97:20	0:0	8	->
water	97:22	0:0	8	avctx
arg	97:29	97:41	7	AV_LOG_DEBUG
water	97:29	0:0	8	AV_LOG_DEBUG
arg	97:43	97:53	7	" at %d\n"
water	97:43	0:0	8	" at %d\n"
arg	97:55	97:73	7	get_bits_count(gb)
call	97:55	97:72	8	get_bits_count
arg	97:70	97:72	9	gb
water	97:70	0:0	10	gb
water	97:74	0:0	6	;
water	98:8	0:0	6	}
if	100:8	108:8	4	(startcode >= 0 x120 && startcode <= 0 x12F)
cond	100:12	100:48	5	startcode >= 0 x120 && startcode <= 0 x12F
water	100:12	0:0	6	startcode
op	100:22	0:0	6	>=
water	100:25	0:0	6	0
water	100:26	0:0	6	x120
op	100:31	0:0	6	&&
water	100:34	0:0	6	startcode
op	100:44	0:0	6	<=
water	100:47	0:0	6	0
water	100:48	0:0	6	x12F
stmts	100:54	108:8	5	
water	100:54	0:0	6	{
if	101:12	104:12	6	(vol)
cond	101:16	101:16	7	vol
water	101:16	0:0	8	vol
stmts	101:21	104:12	7	
water	101:21	0:0	8	{
call	102:16	102:82	8	av_log
arg	102:23	102:31	9	s->avctx
water	102:23	0:0	10	s
op	102:24	0:0	10	->
water	102:26	0:0	10	avctx
arg	102:33	102:47	9	AV_LOG_WARNING
water	102:33	0:0	10	AV_LOG_WARNING
arg	102:49	102:82	9	"Ignoring multiple VOL headers\n"
water	102:49	0:0	10	"Ignoring multiple VOL headers\n"
water	102:83	0:0	8	;
continue	103:16	103:24	8	
water	104:12	0:0	8	}
water	105:12	0:0	6	vol
op	105:15	0:0	6	++
water	105:17	0:0	6	;
if	106:12	107:26	6	(( ret =decode_vol_header (ctx ,gb ) ) < 0)
cond	106:16	106:53	7	( ret =decode_vol_header (ctx ,gb ) ) < 0
water	106:16	0:0	8	(
water	106:17	0:0	8	ret
op	106:21	0:0	8	=
call	106:23	106:48	8	decode_vol_header
arg	106:41	106:44	9	ctx
water	106:41	0:0	10	ctx
arg	106:46	106:48	9	gb
water	106:46	0:0	10	gb
water	106:49	0:0	8	)
op	106:51	0:0	8	<
water	106:53	0:0	8	0
stmts	107:16	107:26	7	
return	107:16	107:26	8	ret
water	107:23	0:0	9	ret
water	108:8	0:0	6	}
else	108:10	110:8	4
stmts	108:15	110:8	5	
if	108:15	110:8	6	(startcode == USER_DATA_STARTCODE)
cond	108:19	108:32	7	startcode == USER_DATA_STARTCODE
water	108:19	0:0	8	startcode
op	108:29	0:0	8	==
water	108:32	0:0	8	USER_DATA_STARTCODE
stmts	108:53	110:8	7	
water	108:53	0:0	8	{
call	109:12	109:36	8	decode_user_data
arg	109:29	109:32	9	ctx
water	109:29	0:0	10	ctx
arg	109:34	109:36	9	gb
water	109:34	0:0	10	gb
water	109:37	0:0	8	;
water	110:8	0:0	8	}
else	110:10	112:8	4
stmts	110:15	112:8	5	
if	110:15	112:8	6	(startcode == GOP_STARTCODE)
cond	110:19	110:32	7	startcode == GOP_STARTCODE
water	110:19	0:0	8	startcode
op	110:29	0:0	8	==
water	110:32	0:0	8	GOP_STARTCODE
stmts	110:47	112:8	7	
water	110:47	0:0	8	{
call	111:12	111:41	8	mpeg4_decode_gop_header
arg	111:36	111:37	9	s
water	111:36	0:0	10	s
arg	111:39	111:41	9	gb
water	111:39	0:0	10	gb
water	111:42	0:0	8	;
water	112:8	0:0	8	}
else	112:10	120:8	4
stmts	112:15	120:8	5	
if	112:15	120:8	6	(startcode == VOS_STARTCODE)
cond	112:19	112:32	7	startcode == VOS_STARTCODE
water	112:19	0:0	8	startcode
op	112:29	0:0	8	==
water	112:32	0:0	8	VOS_STARTCODE
stmts	112:47	120:8	7	
water	112:47	0:0	8	{
call	113:12	113:44	8	mpeg4_decode_profile_level
arg	113:39	113:40	9	s
water	113:39	0:0	10	s
arg	113:42	113:44	9	gb
water	113:42	0:0	10	gb
water	113:45	0:0	8	;
if	114:12	119:12	8	(s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO && ( s -> avctx -> level > 0 && s -> avctx -> level < 9 ))
cond	114:16	115:59	9	s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO && ( s -> avctx -> level > 0 && s -> avctx -> level < 9 )
water	114:16	0:0	10	s
op	114:17	0:0	10	->
water	114:19	0:0	10	avctx
op	114:24	0:0	10	->
water	114:26	0:0	10	profile
op	114:34	0:0	10	==
water	114:37	0:0	10	FF_PROFILE_MPEG4_SIMPLE_STUDIO
op	114:68	0:0	10	&&
water	115:16	0:0	10	(
water	115:17	0:0	10	s
op	115:18	0:0	10	->
water	115:20	0:0	10	avctx
op	115:25	0:0	10	->
water	115:27	0:0	10	level
op	115:33	0:0	10	>
water	115:35	0:0	10	0
op	115:37	0:0	10	&&
water	115:40	0:0	10	s
op	115:41	0:0	10	->
water	115:43	0:0	10	avctx
op	115:48	0:0	10	->
water	115:50	0:0	10	level
op	115:56	0:0	10	<
water	115:58	0:0	10	9
water	115:59	0:0	10	)
stmts	115:62	119:12	9	
water	115:62	0:0	10	{
water	116:16	0:0	10	s
op	116:17	0:0	10	->
water	116:19	0:0	10	studio_profile
op	116:34	0:0	10	=
water	116:36	0:0	10	1
water	116:37	0:0	10	;
call	117:16	117:41	10	next_start_code_studio
arg	117:39	117:41	11	gb
water	117:39	0:0	12	gb
water	117:42	0:0	10	;
call	118:16	118:48	10	extension_and_user_data
arg	118:40	118:41	11	s
water	118:40	0:0	12	s
arg	118:43	118:45	11	gb
water	118:43	0:0	12	gb
arg	118:47	118:48	11	0
water	118:47	0:0	12	0
water	118:49	0:0	10	;
water	119:12	0:0	10	}
water	120:8	0:0	8	}
else	120:10	126:8	4
stmts	120:15	126:8	5	
if	120:15	126:8	6	(startcode == VISUAL_OBJ_STARTCODE)
cond	120:19	120:32	7	startcode == VISUAL_OBJ_STARTCODE
water	120:19	0:0	8	startcode
op	120:29	0:0	8	==
water	120:32	0:0	8	VISUAL_OBJ_STARTCODE
stmts	120:54	126:8	7	
water	120:54	0:0	8	{
if	121:12	124:12	8	(s -> studio_profile)
cond	121:16	121:19	9	s -> studio_profile
water	121:16	0:0	10	s
op	121:17	0:0	10	->
water	121:19	0:0	10	studio_profile
stmts	121:35	124:12	9	
water	121:35	0:0	10	{
if	122:16	123:30	10	(( ret =decode_studiovisualobject (ctx ,gb ) ) < 0)
cond	122:20	122:65	11	( ret =decode_studiovisualobject (ctx ,gb ) ) < 0
water	122:20	0:0	12	(
water	122:21	0:0	12	ret
op	122:25	0:0	12	=
call	122:27	122:60	12	decode_studiovisualobject
arg	122:53	122:56	13	ctx
water	122:53	0:0	14	ctx
arg	122:58	122:60	13	gb
water	122:58	0:0	14	gb
water	122:61	0:0	12	)
op	122:63	0:0	12	<
water	122:65	0:0	12	0
stmts	123:20	123:30	11	
return	123:20	123:30	12	ret
water	123:27	0:0	13	ret
water	124:12	0:0	10	}
else	124:14	125:49	8
stmts	125:16	125:49	9	
call	125:16	125:48	10	mpeg4_decode_visual_object
arg	125:43	125:44	11	s
water	125:43	0:0	12	s
arg	125:46	125:48	11	gb
water	125:46	0:0	12	gb
water	125:49	0:0	10	;
water	126:8	0:0	8	}
else	126:10	128:8	4
stmts	126:15	128:8	5	
if	126:15	128:8	6	(startcode == VOP_STARTCODE)
cond	126:19	126:32	7	startcode == VOP_STARTCODE
water	126:19	0:0	8	startcode
op	126:29	0:0	8	==
water	126:32	0:0	8	VOP_STARTCODE
stmts	126:47	128:8	7	
water	126:47	0:0	8	{
break	127:12	127:17	8	
water	128:8	0:0	8	}
call	130:8	130:25	4	align_get_bits
arg	130:23	130:25	5	gb
water	130:23	0:0	6	gb
water	130:26	0:0	4	;
water	131:8	0:0	4	startcode
op	131:18	0:0	4	=
water	131:20	0:0	4	0
water	131:21	0:0	4	xff
water	131:24	0:0	4	;
water	132:4	0:0	4	}
label	134:0	134:3	2	end :
if	135:4	136:24	2	(s -> avctx -> flags & AV_CODEC_FLAG_LOW_DELAY)
cond	135:8	135:26	3	s -> avctx -> flags & AV_CODEC_FLAG_LOW_DELAY
water	135:8	0:0	4	s
op	135:9	0:0	4	->
water	135:11	0:0	4	avctx
op	135:16	0:0	4	->
water	135:18	0:0	4	flags
op	135:24	0:0	4	&
water	135:26	0:0	4	AV_CODEC_FLAG_LOW_DELAY
stmts	136:8	136:24	3	
water	136:8	0:0	4	s
op	136:9	0:0	4	->
water	136:11	0:0	4	low_delay
op	136:21	0:0	4	=
water	136:23	0:0	4	1
water	136:24	0:0	4	;
water	137:4	0:0	2	s
op	137:5	0:0	2	->
water	137:7	0:0	2	avctx
op	137:12	0:0	2	->
water	137:14	0:0	2	has_b_frames
op	137:27	0:0	2	=
op	137:29	0:0	2	!
water	137:30	0:0	2	s
op	137:31	0:0	2	->
water	137:33	0:0	2	low_delay
water	137:42	0:0	2	;
if	139:4	145:4	2	(s -> studio_profile)
cond	139:8	139:11	3	s -> studio_profile
water	139:8	0:0	4	s
op	139:9	0:0	4	->
water	139:11	0:0	4	studio_profile
stmts	139:27	145:4	3	
water	139:27	0:0	4	{
if	140:8	143:8	4	(! s -> avctx -> bits_per_raw_sample)
cond	140:12	140:23	5	! s -> avctx -> bits_per_raw_sample
op	140:12	0:0	6	!
water	140:13	0:0	6	s
op	140:14	0:0	6	->
water	140:16	0:0	6	avctx
op	140:21	0:0	6	->
water	140:23	0:0	6	bits_per_raw_sample
stmts	140:44	143:8	5	
water	140:44	0:0	6	{
call	141:12	141:65	6	av_log
arg	141:19	141:27	7	s->avctx
water	141:19	0:0	8	s
op	141:20	0:0	8	->
water	141:22	0:0	8	avctx
arg	141:29	141:41	7	AV_LOG_ERROR
water	141:29	0:0	8	AV_LOG_ERROR
arg	141:43	141:65	7	"Missing VOL header\n"
water	141:43	0:0	8	"Missing VOL header\n"
water	141:66	0:0	6	;
return	142:12	142:38	6	AVERROR_INVALIDDATA
water	142:19	0:0	7	AVERROR_INVALIDDATA
water	143:8	0:0	6	}
return	144:8	144:48	4	decode_studio_vop_header(ctx,gb)
call	144:15	144:47	5	decode_studio_vop_header
arg	144:40	144:43	6	ctx
water	144:40	0:0	7	ctx
arg	144:45	144:47	6	gb
water	144:45	0:0	7	gb
water	145:4	0:0	4	}
else	145:6	146:41	2
stmts	146:8	146:41	3	
return	146:8	146:41	4	decode_vop_header(ctx,gb)
call	146:15	146:40	5	decode_vop_header
arg	146:33	146:36	6	ctx
water	146:33	0:0	7	ctx
arg	146:38	146:40	6	gb
water	146:38	0:0	7	gb
