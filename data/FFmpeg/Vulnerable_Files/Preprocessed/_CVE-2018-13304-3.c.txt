func	1:0	306:0	0	int	ff_h263_decode_frame
params	1:24	0:0	1	
param	1:25	1:46	2	AVCodecContext *	avctx
param	1:48	1:58	2	void *	data
param	1:60	1:74	2	int *	got_frame
param	2:25	2:40	2	AVPacket *	avpkt
stmnts	0:0	305:46	1	
decl	4:4	4:36	2	const uint8_t	*buf
op	4:23	0:0	2	=
water	4:25	0:0	2	avpkt
op	4:30	0:0	2	->
water	4:32	0:0	2	data
decl	5:4	5:36	2	int	buf_size
op	5:23	0:0	2	=
water	5:25	0:0	2	avpkt
op	5:30	0:0	2	->
water	5:32	0:0	2	size
decl	6:4	6:41	2	MpegEncContext	*s
op	6:23	0:0	2	=
water	6:25	0:0	2	avctx
op	6:30	0:0	2	->
water	6:32	0:0	2	priv_data
decl	7:4	7:11	2	int	ret
decl	8:4	8:21	2	int	slice_ret
op	8:18	0:0	2	=
water	8:20	0:0	2	0
decl	9:4	9:24	2	AVFrame	*pict
op	9:18	0:0	2	=
water	9:20	0:0	2	data
if	12:4	23:4	2	(buf_size == 0)
cond	12:8	12:20	3	buf_size == 0
water	12:8	0:0	4	buf_size
op	12:17	0:0	4	==
water	12:20	0:0	4	0
stmts	12:23	23:4	3	
water	12:23	0:0	4	{
if	14:8	20:8	4	(s -> low_delay == 0 && s -> next_picture_ptr)
cond	14:12	14:36	5	s -> low_delay == 0 && s -> next_picture_ptr
water	14:12	0:0	6	s
op	14:13	0:0	6	->
water	14:15	0:0	6	low_delay
op	14:25	0:0	6	==
water	14:28	0:0	6	0
op	14:30	0:0	6	&&
water	14:33	0:0	6	s
op	14:34	0:0	6	->
water	14:36	0:0	6	next_picture_ptr
stmts	14:54	20:8	5	
water	14:54	0:0	6	{
if	15:12	16:26	6	(( ret =av_frame_ref (pict ,s -> next_picture_ptr -> f ) ) < 0)
cond	15:16	15:69	7	( ret =av_frame_ref (pict ,s -> next_picture_ptr -> f ) ) < 0
water	15:16	0:0	8	(
water	15:17	0:0	8	ret
op	15:21	0:0	8	=
call	15:23	15:64	8	av_frame_ref
arg	15:36	15:40	9	pict
water	15:36	0:0	10	pict
arg	15:42	15:64	9	s->next_picture_ptr->f
water	15:42	0:0	10	s
op	15:43	0:0	10	->
water	15:45	0:0	10	next_picture_ptr
op	15:61	0:0	10	->
water	15:63	0:0	10	f
water	15:65	0:0	8	)
op	15:67	0:0	8	<
water	15:69	0:0	8	0
stmts	16:16	16:26	7	
return	16:16	16:26	8	ret
water	16:23	0:0	9	ret
water	17:12	0:0	6	s
op	17:13	0:0	6	->
water	17:15	0:0	6	next_picture_ptr
op	17:32	0:0	6	=
water	17:34	0:0	6	NULL
water	17:38	0:0	6	;
op	19:12	0:0	6	*
water	19:13	0:0	6	got_frame
op	19:23	0:0	6	=
water	19:25	0:0	6	1
water	19:26	0:0	6	;
water	20:8	0:0	6	}
return	22:8	22:16	4	0
water	22:15	0:0	5	0
water	23:4	0:0	4	}
if	25:4	43:4	2	(s -> avctx -> flags & AV_CODEC_FLAG_TRUNCATED)
cond	25:8	25:26	3	s -> avctx -> flags & AV_CODEC_FLAG_TRUNCATED
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	avctx
op	25:16	0:0	4	->
water	25:18	0:0	4	flags
op	25:24	0:0	4	&
water	25:26	0:0	4	AV_CODEC_FLAG_TRUNCATED
stmts	25:51	43:4	3	
water	25:51	0:0	4	{
decl	26:8	26:16	4	int	next
if	28:8	30:8	4	(CONFIG_MPEG4_DECODER && s -> codec_id == AV_CODEC_ID_MPEG4)
cond	28:12	28:51	5	CONFIG_MPEG4_DECODER && s -> codec_id == AV_CODEC_ID_MPEG4
water	28:12	0:0	6	CONFIG_MPEG4_DECODER
op	28:33	0:0	6	&&
water	28:36	0:0	6	s
op	28:37	0:0	6	->
water	28:39	0:0	6	codec_id
op	28:48	0:0	6	==
water	28:51	0:0	6	AV_CODEC_ID_MPEG4
stmts	28:70	30:8	5	
water	28:70	0:0	6	{
water	29:12	0:0	6	next
op	29:17	0:0	6	=
call	29:19	29:75	6	ff_mpeg4_find_frame_end
arg	29:43	29:60	7	&s->parse_context
op	29:43	0:0	8	&
water	29:44	0:0	8	s
op	29:45	0:0	8	->
water	29:47	0:0	8	parse_context
arg	29:62	29:65	7	buf
water	29:62	0:0	8	buf
arg	29:67	29:75	7	buf_size
water	29:67	0:0	8	buf_size
water	29:76	0:0	6	;
water	30:8	0:0	6	}
else	30:10	32:8	4
stmts	30:15	32:8	5	
if	30:15	32:8	6	(CONFIG_H263_DECODER && s -> codec_id == AV_CODEC_ID_H263)
cond	30:19	30:57	7	CONFIG_H263_DECODER && s -> codec_id == AV_CODEC_ID_H263
water	30:19	0:0	8	CONFIG_H263_DECODER
op	30:39	0:0	8	&&
water	30:42	0:0	8	s
op	30:43	0:0	8	->
water	30:45	0:0	8	codec_id
op	30:54	0:0	8	==
water	30:57	0:0	8	AV_CODEC_ID_H263
stmts	30:75	32:8	7	
water	30:75	0:0	8	{
water	31:12	0:0	8	next
op	31:17	0:0	8	=
call	31:19	31:74	8	ff_h263_find_frame_end
arg	31:42	31:59	9	&s->parse_context
op	31:42	0:0	10	&
water	31:43	0:0	10	s
op	31:44	0:0	10	->
water	31:46	0:0	10	parse_context
arg	31:61	31:64	9	buf
water	31:61	0:0	10	buf
arg	31:66	31:74	9	buf_size
water	31:66	0:0	10	buf_size
water	31:75	0:0	8	;
water	32:8	0:0	8	}
else	32:10	34:8	4
stmts	32:15	34:8	5	
if	32:15	34:8	6	(CONFIG_H263P_DECODER && s -> codec_id == AV_CODEC_ID_H263P)
cond	32:19	32:58	7	CONFIG_H263P_DECODER && s -> codec_id == AV_CODEC_ID_H263P
water	32:19	0:0	8	CONFIG_H263P_DECODER
op	32:40	0:0	8	&&
water	32:43	0:0	8	s
op	32:44	0:0	8	->
water	32:46	0:0	8	codec_id
op	32:55	0:0	8	==
water	32:58	0:0	8	AV_CODEC_ID_H263P
stmts	32:77	34:8	7	
water	32:77	0:0	8	{
water	33:12	0:0	8	next
op	33:17	0:0	8	=
call	33:19	33:74	8	ff_h263_find_frame_end
arg	33:42	33:59	9	&s->parse_context
op	33:42	0:0	10	&
water	33:43	0:0	10	s
op	33:44	0:0	10	->
water	33:46	0:0	10	parse_context
arg	33:61	33:64	9	buf
water	33:61	0:0	10	buf
arg	33:66	33:74	9	buf_size
water	33:66	0:0	10	buf_size
water	33:75	0:0	8	;
water	34:8	0:0	8	}
else	34:10	38:8	4
stmts	34:15	38:8	5	
water	34:15	0:0	6	{
call	35:12	36:71	6	av_log
arg	35:19	35:27	7	s->avctx
water	35:19	0:0	8	s
op	35:20	0:0	8	->
water	35:22	0:0	8	avctx
arg	35:29	35:41	7	AV_LOG_ERROR
water	35:29	0:0	8	AV_LOG_ERROR
arg	36:19	36:71	7	"this codec does not support truncated bitstreams\n"
water	36:19	0:0	8	"this codec does not support truncated bitstreams\n"
water	36:72	0:0	6	;
return	37:12	37:34	6	AVERROR(ENOSYS)
call	37:19	37:33	7	AVERROR
arg	37:27	37:33	8	ENOSYS
water	37:27	0:0	9	ENOSYS
water	38:8	0:0	6	}
if	40:8	42:27	4	(ff_combine_frame (& s -> parse_context ,next ,( const uint8_t * * ) & buf ,& buf_size ) < 0)
cond	40:12	41:42	5	ff_combine_frame (& s -> parse_context ,next ,( const uint8_t * * ) & buf ,& buf_size ) < 0
call	40:12	41:38	6	ff_combine_frame
arg	40:29	40:46	7	&s->parse_context
op	40:29	0:0	8	&
water	40:30	0:0	8	s
op	40:31	0:0	8	->
water	40:33	0:0	8	parse_context
arg	40:48	40:52	7	next
water	40:48	0:0	8	next
arg	40:54	40:76	7	(constuint8_t**)&buf
water	40:54	0:0	8	(
water	40:55	0:0	8	const
water	40:61	0:0	8	uint8_t
op	40:69	0:0	8	*
op	40:70	0:0	8	*
water	40:71	0:0	8	)
op	40:72	0:0	8	&
water	40:73	0:0	8	buf
arg	41:29	41:38	7	&buf_size
op	41:29	0:0	8	&
water	41:30	0:0	8	buf_size
op	41:40	0:0	6	<
water	41:42	0:0	6	0
stmts	42:12	42:27	5	
return	42:12	42:27	6	buf_size
water	42:19	0:0	7	buf_size
water	43:4	0:0	4	}
label	45:0	45:5	2	retry :
if	46:4	57:4	2	(s -> divx_packed && s -> bitstream_buffer_size)
cond	46:8	46:29	3	s -> divx_packed && s -> bitstream_buffer_size
water	46:8	0:0	4	s
op	46:9	0:0	4	->
water	46:11	0:0	4	divx_packed
op	46:23	0:0	4	&&
water	46:26	0:0	4	s
op	46:27	0:0	4	->
water	46:29	0:0	4	bitstream_buffer_size
stmts	46:52	57:4	3	
water	46:52	0:0	4	{
decl	47:8	47:13	4	int	i
for	48:8	56:8	4	(i = 0 ;i < buf_size - 3;i ++)
forinit	48:12	48:15	5	i = 0 ;
water	48:12	0:0	6	i
op	48:13	0:0	6	=
water	48:14	0:0	6	0
water	48:15	0:0	6	;
cond	48:17	48:30	5	i < buf_size - 3
water	48:17	0:0	6	i
op	48:19	0:0	6	<
water	48:21	0:0	6	buf_size
op	48:29	0:0	6	-
water	48:30	0:0	6	3
forexpr	48:33	48:34	5	i ++
water	48:33	0:0	6	i
op	48:34	0:0	6	++
stmts	48:38	56:8	5	
water	48:38	0:0	6	{
if	49:12	55:12	6	(buf [ i ] == 0 && buf [ i + 1 ] == 0 && buf [ i + 2 ] == 1)
cond	49:16	49:54	7	buf [ i ] == 0 && buf [ i + 1 ] == 0 && buf [ i + 2 ] == 1
water	49:16	0:0	8	buf
op	49:19	0:0	8	[
water	49:20	0:0	8	i
op	49:21	0:0	8	]
op	49:22	0:0	8	==
water	49:24	0:0	8	0
op	49:26	0:0	8	&&
water	49:29	0:0	8	buf
op	49:32	0:0	8	[
water	49:33	0:0	8	i
op	49:34	0:0	8	+
water	49:35	0:0	8	1
op	49:36	0:0	8	]
op	49:37	0:0	8	==
water	49:39	0:0	8	0
op	49:41	0:0	8	&&
water	49:44	0:0	8	buf
op	49:47	0:0	8	[
water	49:48	0:0	8	i
op	49:49	0:0	8	+
water	49:50	0:0	8	2
op	49:51	0:0	8	]
op	49:52	0:0	8	==
water	49:54	0:0	8	1
stmts	49:57	55:12	7	
water	49:57	0:0	8	{
if	50:16	53:16	8	(buf [ i + 3 ] == 0 xB0)
cond	50:20	50:31	9	buf [ i + 3 ] == 0 xB0
water	50:20	0:0	10	buf
op	50:23	0:0	10	[
water	50:24	0:0	10	i
op	50:25	0:0	10	+
water	50:26	0:0	10	3
op	50:27	0:0	10	]
op	50:28	0:0	10	==
water	50:30	0:0	10	0
water	50:31	0:0	10	xB0
stmts	50:36	53:16	9	
water	50:36	0:0	10	{
call	51:20	51:102	10	av_log
arg	51:27	51:35	11	s->avctx
water	51:27	0:0	12	s
op	51:28	0:0	12	->
water	51:30	0:0	12	avctx
arg	51:37	51:51	11	AV_LOG_WARNING
water	51:37	0:0	12	AV_LOG_WARNING
arg	51:53	51:102	11	"Discarding excessive bitstream in packed xvid\n"
water	51:53	0:0	12	"Discarding excessive bitstream in packed xvid\n"
water	51:103	0:0	10	;
water	52:20	0:0	10	s
op	52:21	0:0	10	->
water	52:23	0:0	10	bitstream_buffer_size
op	52:45	0:0	10	=
water	52:47	0:0	10	0
water	52:48	0:0	10	;
water	53:16	0:0	10	}
break	54:16	54:21	8	
water	55:12	0:0	8	}
water	56:8	0:0	6	}
water	57:4	0:0	4	}
if	59:4	61:54	2	(s -> bitstream_buffer_size && ( s -> divx_packed || buf_size <= MAX_NVOP_SIZE ))
cond	59:8	59:80	3	s -> bitstream_buffer_size && ( s -> divx_packed || buf_size <= MAX_NVOP_SIZE )
water	59:8	0:0	4	s
op	59:9	0:0	4	->
water	59:11	0:0	4	bitstream_buffer_size
op	59:33	0:0	4	&&
water	59:36	0:0	4	(
water	59:37	0:0	4	s
op	59:38	0:0	4	->
water	59:40	0:0	4	divx_packed
op	59:52	0:0	4	||
water	59:55	0:0	4	buf_size
op	59:64	0:0	4	<=
water	59:67	0:0	4	MAX_NVOP_SIZE
water	59:80	0:0	4	)
stmts	60:8	61:54	3	
water	60:8	0:0	4	ret
op	60:12	0:0	4	=
call	60:14	61:53	4	init_get_bits8
arg	60:29	60:35	5	&s->gb
op	60:29	0:0	6	&
water	60:30	0:0	6	s
op	60:31	0:0	6	->
water	60:33	0:0	6	gb
arg	60:37	60:56	5	s->bitstream_buffer
water	60:37	0:0	6	s
op	60:38	0:0	6	->
water	60:40	0:0	6	bitstream_buffer
arg	61:29	61:53	5	s->bitstream_buffer_size
water	61:29	0:0	6	s
op	61:30	0:0	6	->
water	61:32	0:0	6	bitstream_buffer_size
water	61:54	0:0	4	;
else	62:4	63:51	2
stmts	63:8	63:51	3	
water	63:8	0:0	4	ret
op	63:12	0:0	4	=
call	63:14	63:50	4	init_get_bits8
arg	63:29	63:35	5	&s->gb
op	63:29	0:0	6	&
water	63:30	0:0	6	s
op	63:31	0:0	6	->
water	63:33	0:0	6	gb
arg	63:37	63:40	5	buf
water	63:37	0:0	6	buf
arg	63:42	63:50	5	buf_size
water	63:42	0:0	6	buf_size
water	63:51	0:0	4	;
water	65:4	0:0	2	s
op	65:5	0:0	2	->
water	65:7	0:0	2	bitstream_buffer_size
op	65:29	0:0	2	=
water	65:31	0:0	2	0
water	65:32	0:0	2	;
if	66:4	67:18	2	(ret < 0)
cond	66:8	66:14	3	ret < 0
water	66:8	0:0	4	ret
op	66:12	0:0	4	<
water	66:14	0:0	4	0
stmts	67:8	67:18	3	
return	67:8	67:18	4	ret
water	67:15	0:0	5	ret
if	69:4	71:27	2	(! s -> context_initialized)
cond	69:8	69:12	3	! s -> context_initialized
op	69:8	0:0	4	!
water	69:9	0:0	4	s
op	69:10	0:0	4	->
water	69:12	0:0	4	context_initialized
stmts	71:8	71:27	3	
call	71:8	71:26	4	ff_mpv_idct_init
arg	71:25	71:26	5	s
water	71:25	0:0	6	s
water	71:27	0:0	4	;
if	74:4	76:4	2	(CONFIG_WMV2_DECODER && s -> msmpeg4_version == 5)
cond	74:8	74:53	3	CONFIG_WMV2_DECODER && s -> msmpeg4_version == 5
water	74:8	0:0	4	CONFIG_WMV2_DECODER
op	74:28	0:0	4	&&
water	74:31	0:0	4	s
op	74:32	0:0	4	->
water	74:34	0:0	4	msmpeg4_version
op	74:50	0:0	4	==
water	74:53	0:0	4	5
stmts	74:56	76:4	3	
water	74:56	0:0	4	{
water	75:8	0:0	4	ret
op	75:12	0:0	4	=
call	75:14	75:45	4	ff_wmv2_decode_picture_header
arg	75:44	75:45	5	s
water	75:44	0:0	6	s
water	75:46	0:0	4	;
water	76:4	0:0	4	}
else	76:6	78:4	2
stmts	76:11	78:4	3	
if	76:11	78:4	4	(CONFIG_MSMPEG4_DECODER && s -> msmpeg4_version)
cond	76:15	76:44	5	CONFIG_MSMPEG4_DECODER && s -> msmpeg4_version
water	76:15	0:0	6	CONFIG_MSMPEG4_DECODER
op	76:38	0:0	6	&&
water	76:41	0:0	6	s
op	76:42	0:0	6	->
water	76:44	0:0	6	msmpeg4_version
stmts	76:61	78:4	5	
water	76:61	0:0	6	{
water	77:8	0:0	6	ret
op	77:12	0:0	6	=
call	77:14	77:48	6	ff_msmpeg4_decode_picture_header
arg	77:47	77:48	7	s
water	77:47	0:0	8	s
water	77:49	0:0	6	;
water	78:4	0:0	6	}
else	78:6	86:4	2
stmts	78:11	86:4	3	
if	78:11	86:4	4	(CONFIG_MPEG4_DECODER && avctx -> codec_id == AV_CODEC_ID_MPEG4)
cond	78:15	78:58	5	CONFIG_MPEG4_DECODER && avctx -> codec_id == AV_CODEC_ID_MPEG4
water	78:15	0:0	6	CONFIG_MPEG4_DECODER
op	78:36	0:0	6	&&
water	78:39	0:0	6	avctx
op	78:44	0:0	6	->
water	78:46	0:0	6	codec_id
op	78:55	0:0	6	==
water	78:58	0:0	6	AV_CODEC_ID_MPEG4
stmts	78:77	86:4	5	
water	78:77	0:0	6	{
if	79:8	84:8	6	(s -> avctx -> extradata_size && s -> picture_number == 0)
cond	79:12	79:61	7	s -> avctx -> extradata_size && s -> picture_number == 0
water	79:12	0:0	8	s
op	79:13	0:0	8	->
water	79:15	0:0	8	avctx
op	79:20	0:0	8	->
water	79:22	0:0	8	extradata_size
op	79:37	0:0	8	&&
water	79:40	0:0	8	s
op	79:41	0:0	8	->
water	79:43	0:0	8	picture_number
op	79:58	0:0	8	==
water	79:61	0:0	8	0
stmts	79:64	84:8	7	
water	79:64	0:0	8	{
decl	80:12	80:28	8	GetBitContext	gb
if	82:12	83:69	8	(init_get_bits8 (& gb ,s -> avctx -> extradata ,s -> avctx -> extradata_size ) >= 0)
cond	82:16	82:86	9	init_get_bits8 (& gb ,s -> avctx -> extradata ,s -> avctx -> extradata_size ) >= 0
call	82:16	82:81	10	init_get_bits8
arg	82:31	82:34	11	&gb
op	82:31	0:0	12	&
water	82:32	0:0	12	gb
arg	82:36	82:55	11	s->avctx->extradata
water	82:36	0:0	12	s
op	82:37	0:0	12	->
water	82:39	0:0	12	avctx
op	82:44	0:0	12	->
water	82:46	0:0	12	extradata
arg	82:57	82:81	11	s->avctx->extradata_size
water	82:57	0:0	12	s
op	82:58	0:0	12	->
water	82:60	0:0	12	avctx
op	82:65	0:0	12	->
water	82:67	0:0	12	extradata_size
op	82:83	0:0	10	>=
water	82:86	0:0	10	0
stmts	83:16	83:69	9	
call	83:16	83:68	10	ff_mpeg4_decode_picture_header
arg	83:47	83:63	11	avctx->priv_data
water	83:47	0:0	12	avctx
op	83:52	0:0	12	->
water	83:54	0:0	12	priv_data
arg	83:65	83:68	11	&gb
op	83:65	0:0	12	&
water	83:66	0:0	12	gb
water	83:69	0:0	10	;
water	84:8	0:0	8	}
water	85:8	0:0	6	ret
op	85:12	0:0	6	=
call	85:14	85:69	6	ff_mpeg4_decode_picture_header
arg	85:45	85:61	7	avctx->priv_data
water	85:45	0:0	8	avctx
op	85:50	0:0	8	->
water	85:52	0:0	8	priv_data
arg	85:63	85:69	7	&s->gb
op	85:63	0:0	8	&
water	85:64	0:0	8	s
op	85:65	0:0	8	->
water	85:67	0:0	8	gb
water	85:70	0:0	6	;
water	86:4	0:0	6	}
else	86:6	88:4	2
stmts	86:11	88:4	3	
if	86:11	88:4	4	(CONFIG_H263I_DECODER && s -> codec_id == AV_CODEC_ID_H263I)
cond	86:15	86:54	5	CONFIG_H263I_DECODER && s -> codec_id == AV_CODEC_ID_H263I
water	86:15	0:0	6	CONFIG_H263I_DECODER
op	86:36	0:0	6	&&
water	86:39	0:0	6	s
op	86:40	0:0	6	->
water	86:42	0:0	6	codec_id
op	86:51	0:0	6	==
water	86:54	0:0	6	AV_CODEC_ID_H263I
stmts	86:73	88:4	5	
water	86:73	0:0	6	{
water	87:8	0:0	6	ret
op	87:12	0:0	6	=
call	87:14	87:51	6	ff_intel_h263_decode_picture_header
arg	87:50	87:51	7	s
water	87:50	0:0	8	s
water	87:52	0:0	6	;
water	88:4	0:0	6	}
else	88:6	90:4	2
stmts	88:11	90:4	3	
if	88:11	90:4	4	(CONFIG_FLV_DECODER && s -> h263_flv)
cond	88:15	88:40	5	CONFIG_FLV_DECODER && s -> h263_flv
water	88:15	0:0	6	CONFIG_FLV_DECODER
op	88:34	0:0	6	&&
water	88:37	0:0	6	s
op	88:38	0:0	6	->
water	88:40	0:0	6	h263_flv
stmts	88:50	90:4	5	
water	88:50	0:0	6	{
water	89:8	0:0	6	ret
op	89:12	0:0	6	=
call	89:14	89:44	6	ff_flv_decode_picture_header
arg	89:43	89:44	7	s
water	89:43	0:0	8	s
water	89:45	0:0	6	;
water	90:4	0:0	6	}
else	90:6	92:4	2
stmts	90:11	92:4	3	
water	90:11	0:0	4	{
water	91:8	0:0	4	ret
op	91:12	0:0	4	=
call	91:14	91:45	4	ff_h263_decode_picture_header
arg	91:44	91:45	5	s
water	91:44	0:0	6	s
water	91:46	0:0	4	;
water	92:4	0:0	4	}
if	94:4	101:4	2	(ret < 0 || ret == FRAME_SKIPPED)
cond	94:8	94:26	3	ret < 0 || ret == FRAME_SKIPPED
water	94:8	0:0	4	ret
op	94:12	0:0	4	<
water	94:14	0:0	4	0
op	94:16	0:0	4	||
water	94:19	0:0	4	ret
op	94:23	0:0	4	==
water	94:26	0:0	4	FRAME_SKIPPED
stmts	94:41	101:4	3	
water	94:41	0:0	4	{
if	95:8	100:8	4	(s -> width != avctx -> coded_width || s -> height != avctx -> coded_height)
cond	95:15	96:35	5	s -> width != avctx -> coded_width || s -> height != avctx -> coded_height
water	95:15	0:0	6	s
op	95:16	0:0	6	->
water	95:18	0:0	6	width
op	95:25	0:0	6	!=
water	95:28	0:0	6	avctx
op	95:33	0:0	6	->
water	95:35	0:0	6	coded_width
op	96:12	0:0	6	||
water	96:15	0:0	6	s
op	96:16	0:0	6	->
water	96:18	0:0	6	height
op	96:25	0:0	6	!=
water	96:28	0:0	6	avctx
op	96:33	0:0	6	->
water	96:35	0:0	6	coded_height
stmts	96:49	100:8	5	
water	96:49	0:0	6	{
call	97:16	97:119	6	av_log
arg	97:23	97:31	7	s->avctx
water	97:23	0:0	8	s
op	97:24	0:0	8	->
water	97:26	0:0	8	avctx
arg	97:33	97:47	7	AV_LOG_WARNING
water	97:33	0:0	8	AV_LOG_WARNING
arg	97:49	97:119	7	"Reverting picture dimensions change due to header decoding failure\n"
water	97:49	0:0	8	"Reverting picture dimensions change due to header decoding failure\n"
water	97:120	0:0	6	;
water	98:16	0:0	6	s
op	98:17	0:0	6	->
water	98:19	0:0	6	width
op	98:25	0:0	6	=
water	98:27	0:0	6	avctx
op	98:32	0:0	6	->
water	98:34	0:0	6	coded_width
water	98:45	0:0	6	;
water	99:16	0:0	6	s
op	99:17	0:0	6	->
water	99:19	0:0	6	height
op	99:25	0:0	6	=
water	99:27	0:0	6	avctx
op	99:32	0:0	6	->
water	99:34	0:0	6	coded_height
water	99:46	0:0	6	;
water	100:8	0:0	6	}
water	101:4	0:0	4	}
if	102:4	103:46	2	(ret == FRAME_SKIPPED)
cond	102:8	102:15	3	ret == FRAME_SKIPPED
water	102:8	0:0	4	ret
op	102:12	0:0	4	==
water	102:15	0:0	4	FRAME_SKIPPED
stmts	103:8	103:46	3	
return	103:8	103:46	4	get_consumed_bytes(s,buf_size)
call	103:15	103:45	5	get_consumed_bytes
arg	103:34	103:35	6	s
water	103:34	0:0	7	s
arg	103:37	103:45	6	buf_size
water	103:37	0:0	7	buf_size
if	106:4	109:4	2	(ret < 0)
cond	106:8	106:14	3	ret < 0
water	106:8	0:0	4	ret
op	106:12	0:0	4	<
water	106:14	0:0	4	0
stmts	106:17	109:4	3	
water	106:17	0:0	4	{
call	107:8	107:57	4	av_log
arg	107:15	107:23	5	s->avctx
water	107:15	0:0	6	s
op	107:16	0:0	6	->
water	107:18	0:0	6	avctx
arg	107:25	107:37	5	AV_LOG_ERROR
water	107:25	0:0	6	AV_LOG_ERROR
arg	107:39	107:57	5	"header damaged\n"
water	107:39	0:0	6	"header damaged\n"
water	107:58	0:0	4	;
return	108:8	108:18	4	ret
water	108:15	0:0	5	ret
water	109:4	0:0	4	}
if	111:4	115:4	2	(! s -> context_initialized)
cond	111:8	111:12	3	! s -> context_initialized
op	111:8	0:0	4	!
water	111:9	0:0	4	s
op	111:10	0:0	4	->
water	111:12	0:0	4	context_initialized
stmts	111:33	115:4	3	
water	111:33	0:0	4	{
water	112:8	0:0	4	avctx
op	112:13	0:0	4	->
water	112:15	0:0	4	pix_fmt
op	112:23	0:0	4	=
call	112:25	112:46	4	h263_get_format
arg	112:41	112:46	5	avctx
water	112:41	0:0	6	avctx
water	112:47	0:0	4	;
if	113:8	114:22	4	(( ret =ff_mpv_common_init (s ) ) < 0)
cond	113:12	113:44	5	( ret =ff_mpv_common_init (s ) ) < 0
water	113:12	0:0	6	(
water	113:13	0:0	6	ret
op	113:17	0:0	6	=
call	113:19	113:39	6	ff_mpv_common_init
arg	113:38	113:39	7	s
water	113:38	0:0	8	s
water	113:40	0:0	6	)
op	113:42	0:0	6	<
water	113:44	0:0	6	0
stmts	114:12	114:22	5	
return	114:12	114:22	6	ret
water	114:19	0:0	7	ret
water	115:4	0:0	4	}
if	117:4	122:4	2	(! s -> current_picture_ptr || s -> current_picture_ptr -> f -> data [ 0 ])
cond	117:8	117:68	3	! s -> current_picture_ptr || s -> current_picture_ptr -> f -> data [ 0 ]
op	117:8	0:0	4	!
water	117:9	0:0	4	s
op	117:10	0:0	4	->
water	117:12	0:0	4	current_picture_ptr
op	117:32	0:0	4	||
water	117:35	0:0	4	s
op	117:36	0:0	4	->
water	117:38	0:0	4	current_picture_ptr
op	117:57	0:0	4	->
water	117:59	0:0	4	f
op	117:60	0:0	4	->
water	117:62	0:0	4	data
op	117:66	0:0	4	[
water	117:67	0:0	4	0
op	117:68	0:0	4	]
stmts	117:71	122:4	3	
water	117:71	0:0	4	{
decl	118:8	118:63	4	int	i
op	118:14	0:0	4	=
call	118:16	118:62	5	ff_find_unused_picture
arg	118:39	118:47	6	s->avctx
water	118:39	0:0	7	s
op	118:40	0:0	7	->
water	118:42	0:0	7	avctx
arg	118:49	118:59	6	s->picture
water	118:49	0:0	7	s
op	118:50	0:0	7	->
water	118:52	0:0	7	picture
arg	118:61	118:62	6	0
water	118:61	0:0	7	0
if	119:8	120:20	4	(i < 0)
cond	119:12	119:16	5	i < 0
water	119:12	0:0	6	i
op	119:14	0:0	6	<
water	119:16	0:0	6	0
stmts	120:12	120:20	5	
return	120:12	120:20	6	i
water	120:19	0:0	7	i
water	121:8	0:0	4	s
op	121:9	0:0	4	->
water	121:11	0:0	4	current_picture_ptr
op	121:31	0:0	4	=
op	121:33	0:0	4	&
water	121:34	0:0	4	s
op	121:35	0:0	4	->
water	121:37	0:0	4	picture
op	121:44	0:0	4	[
water	121:45	0:0	4	i
op	121:46	0:0	4	]
water	121:47	0:0	4	;
water	122:4	0:0	4	}
water	124:4	0:0	2	avctx
op	124:9	0:0	2	->
water	124:11	0:0	2	has_b_frames
op	124:24	0:0	2	=
op	124:26	0:0	2	!
water	124:27	0:0	2	s
op	124:28	0:0	2	->
water	124:30	0:0	2	low_delay
water	124:39	0:0	2	;
if	126:4	131:4	2	(CONFIG_MPEG4_DECODER && avctx -> codec_id == AV_CODEC_ID_MPEG4)
cond	126:8	126:51	3	CONFIG_MPEG4_DECODER && avctx -> codec_id == AV_CODEC_ID_MPEG4
water	126:8	0:0	4	CONFIG_MPEG4_DECODER
op	126:29	0:0	4	&&
water	126:32	0:0	4	avctx
op	126:37	0:0	4	->
water	126:39	0:0	4	codec_id
op	126:48	0:0	4	==
water	126:51	0:0	4	AV_CODEC_ID_MPEG4
stmts	126:70	131:4	3	
water	126:70	0:0	4	{
if	127:8	128:22	4	(ff_mpeg4_workaround_bugs (avctx ) == 1)
cond	127:12	127:47	5	ff_mpeg4_workaround_bugs (avctx ) == 1
call	127:12	127:42	6	ff_mpeg4_workaround_bugs
arg	127:37	127:42	7	avctx
water	127:37	0:0	8	avctx
op	127:44	0:0	6	==
water	127:47	0:0	6	1
stmts	128:12	128:22	5	
goto	128:12	128:22	6	retry
water	128:17	0:0	7	retry
if	129:8	130:31	4	(s -> studio_profile != ( s -> idsp . idct == NULL ))
cond	129:12	129:54	5	s -> studio_profile != ( s -> idsp . idct == NULL )
water	129:12	0:0	6	s
op	129:13	0:0	6	->
water	129:15	0:0	6	studio_profile
op	129:30	0:0	6	!=
water	129:33	0:0	6	(
water	129:34	0:0	6	s
op	129:35	0:0	6	->
water	129:37	0:0	6	idsp
op	129:41	0:0	6	.
water	129:42	0:0	6	idct
op	129:47	0:0	6	==
water	129:50	0:0	6	NULL
water	129:54	0:0	6	)
stmts	130:12	130:31	5	
call	130:12	130:30	6	ff_mpv_idct_init
arg	130:29	130:30	7	s
water	130:29	0:0	8	s
water	130:31	0:0	6	;
water	131:4	0:0	4	}
if	137:4	157:4	2	(s -> width != avctx -> coded_width || s -> height != avctx -> coded_height || s -> context_reinit)
cond	137:8	139:11	3	s -> width != avctx -> coded_width || s -> height != avctx -> coded_height || s -> context_reinit
water	137:8	0:0	4	s
op	137:9	0:0	4	->
water	137:11	0:0	4	width
op	137:18	0:0	4	!=
water	137:21	0:0	4	avctx
op	137:26	0:0	4	->
water	137:28	0:0	4	coded_width
op	137:41	0:0	4	||
water	138:8	0:0	4	s
op	138:9	0:0	4	->
water	138:11	0:0	4	height
op	138:18	0:0	4	!=
water	138:21	0:0	4	avctx
op	138:26	0:0	4	->
water	138:28	0:0	4	coded_height
op	138:41	0:0	4	||
water	139:8	0:0	4	s
op	139:9	0:0	4	->
water	139:11	0:0	4	context_reinit
stmts	139:27	157:4	3	
water	139:27	0:0	4	{
water	141:8	0:0	4	s
op	141:9	0:0	4	->
water	141:11	0:0	4	context_reinit
op	141:26	0:0	4	=
water	141:28	0:0	4	0
water	141:29	0:0	4	;
water	143:8	0:0	4	ret
op	143:12	0:0	4	=
call	143:14	143:58	4	ff_set_dimensions
arg	143:32	143:37	5	avctx
water	143:32	0:0	6	avctx
arg	143:39	143:47	5	s->width
water	143:39	0:0	6	s
op	143:40	0:0	6	->
water	143:42	0:0	6	width
arg	143:49	143:58	5	s->height
water	143:49	0:0	6	s
op	143:50	0:0	6	->
water	143:52	0:0	6	height
water	143:59	0:0	4	;
if	144:8	145:22	4	(ret < 0)
cond	144:12	144:18	5	ret < 0
water	144:12	0:0	6	ret
op	144:16	0:0	6	<
water	144:18	0:0	6	0
stmts	145:12	145:22	5	
return	145:12	145:22	6	ret
water	145:19	0:0	7	ret
call	147:8	147:52	4	ff_set_sar
arg	147:19	147:24	5	avctx
water	147:19	0:0	6	avctx
arg	147:26	147:52	5	avctx->sample_aspect_ratio
water	147:26	0:0	6	avctx
op	147:31	0:0	6	->
water	147:33	0:0	6	sample_aspect_ratio
water	147:53	0:0	4	;
if	149:8	150:22	4	(( ret =ff_mpv_common_frame_size_change (s ) ))
cond	149:12	149:53	5	( ret =ff_mpv_common_frame_size_change (s ) )
water	149:12	0:0	6	(
water	149:13	0:0	6	ret
op	149:17	0:0	6	=
call	149:19	149:52	6	ff_mpv_common_frame_size_change
arg	149:51	149:52	7	s
water	149:51	0:0	8	s
water	149:53	0:0	6	)
stmts	150:12	150:22	5	
return	150:12	150:22	6	ret
water	150:19	0:0	7	ret
if	152:8	156:8	4	(avctx -> pix_fmt !=h263_get_format (avctx ))
cond	152:12	152:51	5	avctx -> pix_fmt !=h263_get_format (avctx )
water	152:12	0:0	6	avctx
op	152:17	0:0	6	->
water	152:19	0:0	6	pix_fmt
op	152:27	0:0	6	!=
call	152:30	152:51	6	h263_get_format
arg	152:46	152:51	7	avctx
water	152:46	0:0	8	avctx
stmts	152:54	156:8	5	
water	152:54	0:0	6	{
call	153:12	153:71	6	av_log
arg	153:19	153:24	7	avctx
water	153:19	0:0	8	avctx
arg	153:26	153:38	7	AV_LOG_ERROR
water	153:26	0:0	8	AV_LOG_ERROR
arg	153:40	153:71	7	"format change not supported\n"
water	153:40	0:0	8	"format change not supported\n"
water	153:72	0:0	6	;
water	154:12	0:0	6	avctx
op	154:17	0:0	6	->
water	154:19	0:0	6	pix_fmt
op	154:27	0:0	6	=
water	154:29	0:0	6	AV_PIX_FMT_NONE
water	154:44	0:0	6	;
return	155:12	155:34	6	AVERROR_UNKNOWN
water	155:19	0:0	7	AVERROR_UNKNOWN
water	156:8	0:0	6	}
water	157:4	0:0	4	}
if	159:4	162:49	2	(s -> codec_id == AV_CODEC_ID_H263 || s -> codec_id == AV_CODEC_ID_H263P || s -> codec_id == AV_CODEC_ID_H263I)
cond	159:8	161:23	3	s -> codec_id == AV_CODEC_ID_H263 || s -> codec_id == AV_CODEC_ID_H263P || s -> codec_id == AV_CODEC_ID_H263I
water	159:8	0:0	4	s
op	159:9	0:0	4	->
water	159:11	0:0	4	codec_id
op	159:20	0:0	4	==
water	159:23	0:0	4	AV_CODEC_ID_H263
op	159:41	0:0	4	||
water	160:8	0:0	4	s
op	160:9	0:0	4	->
water	160:11	0:0	4	codec_id
op	160:20	0:0	4	==
water	160:23	0:0	4	AV_CODEC_ID_H263P
op	160:41	0:0	4	||
water	161:8	0:0	4	s
op	161:9	0:0	4	->
water	161:11	0:0	4	codec_id
op	161:20	0:0	4	==
water	161:23	0:0	4	AV_CODEC_ID_H263I
stmts	162:8	162:49	3	
water	162:8	0:0	4	s
op	162:9	0:0	4	->
water	162:11	0:0	4	gob_index
op	162:21	0:0	4	=
call	162:23	162:48	4	H263_GOB_HEIGHT
arg	162:39	162:48	5	s->height
water	162:39	0:0	6	s
op	162:40	0:0	6	->
water	162:42	0:0	6	height
water	162:49	0:0	4	;
water	165:4	0:0	2	s
op	165:5	0:0	2	->
water	165:7	0:0	2	current_picture
op	165:22	0:0	2	.
water	165:23	0:0	2	f
op	165:24	0:0	2	->
water	165:26	0:0	2	pict_type
op	165:36	0:0	2	=
water	165:38	0:0	2	s
op	165:39	0:0	2	->
water	165:41	0:0	2	pict_type
water	165:50	0:0	2	;
water	166:4	0:0	2	s
op	166:5	0:0	2	->
water	166:7	0:0	2	current_picture
op	166:22	0:0	2	.
water	166:23	0:0	2	f
op	166:24	0:0	2	->
water	166:26	0:0	2	key_frame
op	166:36	0:0	2	=
water	166:38	0:0	2	s
op	166:39	0:0	2	->
water	166:41	0:0	2	pict_type
op	166:51	0:0	2	==
water	166:54	0:0	2	AV_PICTURE_TYPE_I
water	166:71	0:0	2	;
if	169:4	171:46	2	(! s -> last_picture_ptr && ( s -> pict_type == AV_PICTURE_TYPE_B || s -> droppable ))
cond	169:8	170:58	3	! s -> last_picture_ptr && ( s -> pict_type == AV_PICTURE_TYPE_B || s -> droppable )
op	169:8	0:0	4	!
water	169:9	0:0	4	s
op	169:10	0:0	4	->
water	169:12	0:0	4	last_picture_ptr
op	169:29	0:0	4	&&
water	170:8	0:0	4	(
water	170:9	0:0	4	s
op	170:10	0:0	4	->
water	170:12	0:0	4	pict_type
op	170:22	0:0	4	==
water	170:25	0:0	4	AV_PICTURE_TYPE_B
op	170:43	0:0	4	||
water	170:46	0:0	4	s
op	170:47	0:0	4	->
water	170:49	0:0	4	droppable
water	170:58	0:0	4	)
stmts	171:8	171:46	3	
return	171:8	171:46	4	get_consumed_bytes(s,buf_size)
call	171:15	171:45	5	get_consumed_bytes
arg	171:34	171:35	6	s
water	171:34	0:0	7	s
arg	171:37	171:45	6	buf_size
water	171:37	0:0	7	buf_size
if	172:4	177:46	2	(( avctx -> skip_frame >= AVDISCARD_NONREF && s -> pict_type == AV_PICTURE_TYPE_B ) || ( avctx -> skip_frame >= AVDISCARD_NONKEY && s -> pict_type != AV_PICTURE_TYPE_I ) || avctx -> skip_frame >= AVDISCARD_ALL)
cond	172:8	176:29	3	( avctx -> skip_frame >= AVDISCARD_NONREF && s -> pict_type == AV_PICTURE_TYPE_B ) || ( avctx -> skip_frame >= AVDISCARD_NONKEY && s -> pict_type != AV_PICTURE_TYPE_I ) || avctx -> skip_frame >= AVDISCARD_ALL
water	172:8	0:0	4	(
water	172:9	0:0	4	avctx
op	172:14	0:0	4	->
water	172:16	0:0	4	skip_frame
op	172:27	0:0	4	>=
water	172:30	0:0	4	AVDISCARD_NONREF
op	172:47	0:0	4	&&
water	173:9	0:0	4	s
op	173:10	0:0	4	->
water	173:12	0:0	4	pict_type
op	173:22	0:0	4	==
water	173:25	0:0	4	AV_PICTURE_TYPE_B
water	173:42	0:0	4	)
op	173:47	0:0	4	||
water	174:8	0:0	4	(
water	174:9	0:0	4	avctx
op	174:14	0:0	4	->
water	174:16	0:0	4	skip_frame
op	174:27	0:0	4	>=
water	174:30	0:0	4	AVDISCARD_NONKEY
op	174:47	0:0	4	&&
water	175:9	0:0	4	s
op	175:10	0:0	4	->
water	175:12	0:0	4	pict_type
op	175:22	0:0	4	!=
water	175:25	0:0	4	AV_PICTURE_TYPE_I
water	175:42	0:0	4	)
op	175:47	0:0	4	||
water	176:8	0:0	4	avctx
op	176:13	0:0	4	->
water	176:15	0:0	4	skip_frame
op	176:26	0:0	4	>=
water	176:29	0:0	4	AVDISCARD_ALL
stmts	177:8	177:46	3	
return	177:8	177:46	4	get_consumed_bytes(s,buf_size)
call	177:15	177:45	5	get_consumed_bytes
arg	177:34	177:35	6	s
water	177:34	0:0	7	s
arg	177:37	177:45	6	buf_size
water	177:37	0:0	7	buf_size
if	179:4	184:4	2	(s -> next_p_frame_damaged)
cond	179:8	179:11	3	s -> next_p_frame_damaged
water	179:8	0:0	4	s
op	179:9	0:0	4	->
water	179:11	0:0	4	next_p_frame_damaged
stmts	179:33	184:4	3	
water	179:33	0:0	4	{
if	180:8	181:50	4	(s -> pict_type == AV_PICTURE_TYPE_B)
cond	180:12	180:28	5	s -> pict_type == AV_PICTURE_TYPE_B
water	180:12	0:0	6	s
op	180:13	0:0	6	->
water	180:15	0:0	6	pict_type
op	180:25	0:0	6	==
water	180:28	0:0	6	AV_PICTURE_TYPE_B
stmts	181:12	181:50	5	
return	181:12	181:50	6	get_consumed_bytes(s,buf_size)
call	181:19	181:49	7	get_consumed_bytes
arg	181:38	181:39	8	s
water	181:38	0:0	9	s
arg	181:41	181:49	8	buf_size
water	181:41	0:0	9	buf_size
else	182:8	183:39	4
stmts	183:12	183:39	5	
water	183:12	0:0	6	s
op	183:13	0:0	6	->
water	183:15	0:0	6	next_p_frame_damaged
op	183:36	0:0	6	=
water	183:38	0:0	6	0
water	183:39	0:0	6	;
water	184:4	0:0	4	}
if	186:4	189:4	2	(( ! s -> no_rounding ) || s -> pict_type == AV_PICTURE_TYPE_B)
cond	186:8	186:45	3	( ! s -> no_rounding ) || s -> pict_type == AV_PICTURE_TYPE_B
water	186:8	0:0	4	(
op	186:9	0:0	4	!
water	186:10	0:0	4	s
op	186:11	0:0	4	->
water	186:13	0:0	4	no_rounding
water	186:24	0:0	4	)
op	186:26	0:0	4	||
water	186:29	0:0	4	s
op	186:30	0:0	4	->
water	186:32	0:0	4	pict_type
op	186:42	0:0	4	==
water	186:45	0:0	4	AV_PICTURE_TYPE_B
stmts	186:64	189:4	3	
water	186:64	0:0	4	{
water	187:8	0:0	4	s
op	187:9	0:0	4	->
water	187:11	0:0	4	me
op	187:13	0:0	4	.
water	187:14	0:0	4	qpel_put
op	187:23	0:0	4	=
water	187:25	0:0	4	s
op	187:26	0:0	4	->
water	187:28	0:0	4	qdsp
op	187:32	0:0	4	.
water	187:33	0:0	4	put_qpel_pixels_tab
water	187:52	0:0	4	;
water	188:8	0:0	4	s
op	188:9	0:0	4	->
water	188:11	0:0	4	me
op	188:13	0:0	4	.
water	188:14	0:0	4	qpel_avg
op	188:23	0:0	4	=
water	188:25	0:0	4	s
op	188:26	0:0	4	->
water	188:28	0:0	4	qdsp
op	188:32	0:0	4	.
water	188:33	0:0	4	avg_qpel_pixels_tab
water	188:52	0:0	4	;
water	189:4	0:0	4	}
else	189:6	192:4	2
stmts	189:11	192:4	3	
water	189:11	0:0	4	{
water	190:8	0:0	4	s
op	190:9	0:0	4	->
water	190:11	0:0	4	me
op	190:13	0:0	4	.
water	190:14	0:0	4	qpel_put
op	190:23	0:0	4	=
water	190:25	0:0	4	s
op	190:26	0:0	4	->
water	190:28	0:0	4	qdsp
op	190:32	0:0	4	.
water	190:33	0:0	4	put_no_rnd_qpel_pixels_tab
water	190:59	0:0	4	;
water	191:8	0:0	4	s
op	191:9	0:0	4	->
water	191:11	0:0	4	me
op	191:13	0:0	4	.
water	191:14	0:0	4	qpel_avg
op	191:23	0:0	4	=
water	191:25	0:0	4	s
op	191:26	0:0	4	->
water	191:28	0:0	4	qdsp
op	191:32	0:0	4	.
water	191:33	0:0	4	avg_qpel_pixels_tab
water	191:52	0:0	4	;
water	192:4	0:0	4	}
if	194:4	195:18	2	(( ret =ff_mpv_frame_start (s ,avctx ) ) < 0)
cond	194:8	194:47	3	( ret =ff_mpv_frame_start (s ,avctx ) ) < 0
water	194:8	0:0	4	(
water	194:9	0:0	4	ret
op	194:13	0:0	4	=
call	194:15	194:42	4	ff_mpv_frame_start
arg	194:34	194:35	5	s
water	194:34	0:0	6	s
arg	194:37	194:42	5	avctx
water	194:37	0:0	6	avctx
water	194:43	0:0	4	)
op	194:45	0:0	4	<
water	194:47	0:0	4	0
stmts	195:8	195:18	3	
return	195:8	195:18	4	ret
water	195:15	0:0	5	ret
if	197:4	198:37	2	(! s -> divx_packed)
cond	197:8	197:12	3	! s -> divx_packed
op	197:8	0:0	4	!
water	197:9	0:0	4	s
op	197:10	0:0	4	->
water	197:12	0:0	4	divx_packed
stmts	198:8	198:37	3	
call	198:8	198:36	4	ff_thread_finish_setup
arg	198:31	198:36	5	avctx
water	198:31	0:0	6	avctx
water	198:37	0:0	4	;
if	200:4	205:4	2	(avctx -> hwaccel)
cond	200:8	200:15	3	avctx -> hwaccel
water	200:8	0:0	4	avctx
op	200:13	0:0	4	->
water	200:15	0:0	4	hwaccel
stmts	200:24	205:4	3	
water	200:24	0:0	4	{
water	201:8	0:0	4	ret
op	201:12	0:0	4	=
call	201:14	202:73	4	avctx->hwaccel->start_frame
arg	201:42	201:47	5	avctx
water	201:42	0:0	6	avctx
arg	201:49	201:61	5	s->gb.buffer
water	201:49	0:0	6	s
op	201:50	0:0	6	->
water	201:52	0:0	6	gb
op	201:54	0:0	6	.
water	201:55	0:0	6	buffer
arg	202:42	202:73	5	s->gb.buffer_end-s->gb.buffer
water	202:42	0:0	6	s
op	202:43	0:0	6	->
water	202:45	0:0	6	gb
op	202:47	0:0	6	.
water	202:48	0:0	6	buffer_end
op	202:59	0:0	6	-
water	202:61	0:0	6	s
op	202:62	0:0	6	->
water	202:64	0:0	6	gb
op	202:66	0:0	6	.
water	202:67	0:0	6	buffer
water	202:74	0:0	4	;
if	203:8	204:22	4	(ret < 0)
cond	203:12	203:18	5	ret < 0
water	203:12	0:0	6	ret
op	203:16	0:0	6	<
water	203:18	0:0	6	0
stmts	204:12	204:22	5	
return	204:12	204:22	6	ret
water	204:19	0:0	7	ret
water	205:4	0:0	4	}
call	207:4	207:28	2	ff_mpeg_er_frame_start
arg	207:27	207:28	3	s
water	207:27	0:0	4	s
water	207:29	0:0	2	;
if	212:4	218:4	2	(CONFIG_WMV2_DECODER && s -> msmpeg4_version == 5)
cond	212:8	212:53	3	CONFIG_WMV2_DECODER && s -> msmpeg4_version == 5
water	212:8	0:0	4	CONFIG_WMV2_DECODER
op	212:28	0:0	4	&&
water	212:31	0:0	4	s
op	212:32	0:0	4	->
water	212:34	0:0	4	msmpeg4_version
op	212:50	0:0	4	==
water	212:53	0:0	4	5
stmts	212:56	218:4	3	
water	212:56	0:0	4	{
water	213:8	0:0	4	ret
op	213:12	0:0	4	=
call	213:14	213:55	4	ff_wmv2_decode_secondary_picture_header
arg	213:54	213:55	5	s
water	213:54	0:0	6	s
water	213:56	0:0	4	;
if	214:8	215:22	4	(ret < 0)
cond	214:12	214:18	5	ret < 0
water	214:12	0:0	6	ret
op	214:16	0:0	6	<
water	214:18	0:0	6	0
stmts	215:12	215:22	5	
return	215:12	215:22	6	ret
water	215:19	0:0	7	ret
if	216:8	217:26	4	(ret == 1)
cond	216:12	216:19	5	ret == 1
water	216:12	0:0	6	ret
op	216:16	0:0	6	==
water	216:19	0:0	6	1
stmts	217:12	217:26	5	
goto	217:12	217:26	6	frame_end
water	217:17	0:0	7	frame_end
water	218:4	0:0	4	}
water	221:4	0:0	2	s
op	221:5	0:0	2	->
water	221:7	0:0	2	mb_x
op	221:12	0:0	2	=
water	221:14	0:0	2	0
water	221:15	0:0	2	;
water	222:4	0:0	2	s
op	222:5	0:0	2	->
water	222:7	0:0	2	mb_y
op	222:12	0:0	2	=
water	222:14	0:0	2	0
water	222:15	0:0	2	;
water	224:4	0:0	2	slice_ret
op	224:14	0:0	2	=
call	224:16	224:30	2	decode_slice
arg	224:29	224:30	3	s
water	224:29	0:0	4	s
water	224:31	0:0	2	;
while	225:4	243:4	2	(s -> mb_y < s -> mb_height)
cond	225:11	225:24	3	s -> mb_y < s -> mb_height
water	225:11	0:0	4	s
op	225:12	0:0	4	->
water	225:14	0:0	4	mb_y
op	225:19	0:0	4	<
water	225:21	0:0	4	s
op	225:22	0:0	4	->
water	225:24	0:0	4	mb_height
stmts	225:35	243:4	3	
water	225:35	0:0	4	{
if	226:8	230:8	4	(s -> msmpeg4_version)
cond	226:12	226:15	5	s -> msmpeg4_version
water	226:12	0:0	6	s
op	226:13	0:0	6	->
water	226:15	0:0	6	msmpeg4_version
stmts	226:32	230:8	5	
water	226:32	0:0	6	{
if	227:12	229:21	6	(s -> slice_height == 0 || s -> mb_x != 0 || slice_ret < 0 || ( s -> mb_y % s -> slice_height ) != 0 ||get_bits_left (& s -> gb ) < 0)
cond	227:16	228:76	7	s -> slice_height == 0 || s -> mb_x != 0 || slice_ret < 0 || ( s -> mb_y % s -> slice_height ) != 0 ||get_bits_left (& s -> gb ) < 0
water	227:16	0:0	8	s
op	227:17	0:0	8	->
water	227:19	0:0	8	slice_height
op	227:32	0:0	8	==
water	227:35	0:0	8	0
op	227:37	0:0	8	||
water	227:40	0:0	8	s
op	227:41	0:0	8	->
water	227:43	0:0	8	mb_x
op	227:48	0:0	8	!=
water	227:51	0:0	8	0
op	227:53	0:0	8	||
water	227:56	0:0	8	slice_ret
op	227:66	0:0	8	<
water	227:68	0:0	8	0
op	227:70	0:0	8	||
water	228:16	0:0	8	(
water	228:17	0:0	8	s
op	228:18	0:0	8	->
water	228:20	0:0	8	mb_y
op	228:25	0:0	8	%
water	228:27	0:0	8	s
op	228:28	0:0	8	->
water	228:30	0:0	8	slice_height
water	228:42	0:0	8	)
op	228:44	0:0	8	!=
water	228:47	0:0	8	0
op	228:49	0:0	8	||
call	228:52	228:72	8	get_bits_left
arg	228:66	228:72	9	&s->gb
op	228:66	0:0	10	&
water	228:67	0:0	10	s
op	228:68	0:0	10	->
water	228:70	0:0	10	gb
op	228:74	0:0	8	<
water	228:76	0:0	8	0
stmts	229:16	229:21	7	
break	229:16	229:21	8	
water	230:8	0:0	6	}
else	230:10	236:8	4
stmts	230:15	236:8	5	
water	230:15	0:0	6	{
decl	231:12	231:50	6	int	prev_x
op	231:23	0:0	6	=
water	231:25	0:0	6	s
op	231:26	0:0	6	->
water	231:28	0:0	6	mb_x
water	231:32	0:0	6	,
decl	231:12	231:50	6	int	prev_y
op	231:41	0:0	6	=
water	231:43	0:0	6	s
op	231:44	0:0	6	->
water	231:46	0:0	6	mb_y
if	232:12	233:21	6	(ff_h263_resync (s ) < 0)
cond	232:16	232:36	7	ff_h263_resync (s ) < 0
call	232:16	232:32	8	ff_h263_resync
arg	232:31	232:32	9	s
water	232:31	0:0	10	s
op	232:34	0:0	8	<
water	232:36	0:0	8	0
stmts	233:16	233:21	7	
break	233:16	233:21	8	
if	234:12	235:40	6	(prev_y * s -> mb_width + prev_x < s -> mb_y * s -> mb_width + s -> mb_x)
cond	234:16	234:75	7	prev_y * s -> mb_width + prev_x < s -> mb_y * s -> mb_width + s -> mb_x
water	234:16	0:0	8	prev_y
op	234:23	0:0	8	*
water	234:25	0:0	8	s
op	234:26	0:0	8	->
water	234:28	0:0	8	mb_width
op	234:37	0:0	8	+
water	234:39	0:0	8	prev_x
op	234:46	0:0	8	<
water	234:48	0:0	8	s
op	234:49	0:0	8	->
water	234:51	0:0	8	mb_y
op	234:56	0:0	8	*
water	234:58	0:0	8	s
op	234:59	0:0	8	->
water	234:61	0:0	8	mb_width
op	234:70	0:0	8	+
water	234:72	0:0	8	s
op	234:73	0:0	8	->
water	234:75	0:0	8	mb_x
stmts	235:16	235:40	7	
water	235:16	0:0	8	s
op	235:17	0:0	8	->
water	235:19	0:0	8	er
op	235:21	0:0	8	.
water	235:22	0:0	8	error_occurred
op	235:37	0:0	8	=
water	235:39	0:0	8	1
water	235:40	0:0	8	;
water	236:8	0:0	6	}
if	238:8	239:37	4	(s -> msmpeg4_version < 4 && s -> h263_pred)
cond	238:12	238:41	5	s -> msmpeg4_version < 4 && s -> h263_pred
water	238:12	0:0	6	s
op	238:13	0:0	6	->
water	238:15	0:0	6	msmpeg4_version
op	238:31	0:0	6	<
water	238:33	0:0	6	4
op	238:35	0:0	6	&&
water	238:38	0:0	6	s
op	238:39	0:0	6	->
water	238:41	0:0	6	h263_pred
stmts	239:12	239:37	5	
call	239:12	239:36	6	ff_mpeg4_clean_buffers
arg	239:35	239:36	7	s
water	239:35	0:0	8	s
water	239:37	0:0	6	;
if	241:8	242:43	4	(decode_slice (s ) < 0)
cond	241:12	241:30	5	decode_slice (s ) < 0
call	241:12	241:26	6	decode_slice
arg	241:25	241:26	7	s
water	241:25	0:0	8	s
op	241:28	0:0	6	<
water	241:30	0:0	6	0
stmts	242:12	242:43	5	
water	242:12	0:0	6	slice_ret
op	242:22	0:0	6	=
water	242:24	0:0	6	AVERROR_INVALIDDATA
water	242:43	0:0	6	;
water	243:4	0:0	4	}
if	245:4	249:65	2	(s -> msmpeg4_version && s -> msmpeg4_version < 4 && s -> pict_type == AV_PICTURE_TYPE_I)
cond	245:8	246:24	3	s -> msmpeg4_version && s -> msmpeg4_version < 4 && s -> pict_type == AV_PICTURE_TYPE_I
water	245:8	0:0	4	s
op	245:9	0:0	4	->
water	245:11	0:0	4	msmpeg4_version
op	245:27	0:0	4	&&
water	245:30	0:0	4	s
op	245:31	0:0	4	->
water	245:33	0:0	4	msmpeg4_version
op	245:49	0:0	4	<
water	245:51	0:0	4	4
op	245:53	0:0	4	&&
water	246:8	0:0	4	s
op	246:9	0:0	4	->
water	246:11	0:0	4	pict_type
op	246:21	0:0	4	==
water	246:24	0:0	4	AV_PICTURE_TYPE_I
stmts	247:8	249:65	3	
if	247:8	249:65	4	(! CONFIG_MSMPEG4_DECODER ||ff_msmpeg4_decode_ext_header (s ,buf_size ) < 0)
cond	247:12	248:56	5	! CONFIG_MSMPEG4_DECODER ||ff_msmpeg4_decode_ext_header (s ,buf_size ) < 0
op	247:12	0:0	6	!
water	247:13	0:0	6	CONFIG_MSMPEG4_DECODER
op	247:36	0:0	6	||
call	248:12	248:52	6	ff_msmpeg4_decode_ext_header
arg	248:41	248:42	7	s
water	248:41	0:0	8	s
arg	248:44	248:52	7	buf_size
water	248:44	0:0	8	buf_size
op	248:54	0:0	6	<
water	248:56	0:0	6	0
stmts	249:12	249:65	5	
water	249:12	0:0	6	s
op	249:13	0:0	6	->
water	249:15	0:0	6	er
op	249:17	0:0	6	.
water	249:18	0:0	6	error_status_table
op	249:36	0:0	6	[
water	249:37	0:0	6	s
op	249:38	0:0	6	->
water	249:40	0:0	6	mb_num
op	249:47	0:0	6	-
water	249:49	0:0	6	1
op	249:50	0:0	6	]
op	249:52	0:0	6	=
water	249:54	0:0	6	ER_MB_ERROR
water	249:65	0:0	6	;
call	251:4	251:44	2	av_assert1
arg	251:15	251:44	3	s->bitstream_buffer_size==0
water	251:15	0:0	4	s
op	251:16	0:0	4	->
water	251:18	0:0	4	bitstream_buffer_size
op	251:40	0:0	4	==
water	251:43	0:0	4	0
water	251:45	0:0	2	;
label	252:0	252:9	2	frame_end :
call	253:4	253:26	2	ff_er_frame_end
arg	253:20	253:26	3	&s->er
op	253:20	0:0	4	&
water	253:21	0:0	4	s
op	253:22	0:0	4	->
water	253:24	0:0	4	er
water	253:27	0:0	2	;
if	255:4	259:4	2	(avctx -> hwaccel)
cond	255:8	255:15	3	avctx -> hwaccel
water	255:8	0:0	4	avctx
op	255:13	0:0	4	->
water	255:15	0:0	4	hwaccel
stmts	255:24	259:4	3	
water	255:24	0:0	4	{
water	256:8	0:0	4	ret
op	256:12	0:0	4	=
call	256:14	256:45	4	avctx->hwaccel->end_frame
arg	256:40	256:45	5	avctx
water	256:40	0:0	6	avctx
water	256:46	0:0	4	;
if	257:8	258:22	4	(ret < 0)
cond	257:12	257:18	5	ret < 0
water	257:12	0:0	6	ret
op	257:16	0:0	6	<
water	257:18	0:0	6	0
stmts	258:12	258:22	5	
return	258:12	258:22	6	ret
water	258:19	0:0	7	ret
water	259:4	0:0	4	}
call	261:4	261:22	2	ff_mpv_frame_end
arg	261:21	261:22	3	s
water	261:21	0:0	4	s
water	261:23	0:0	2	;
if	263:4	264:48	2	(CONFIG_MPEG4_DECODER && avctx -> codec_id == AV_CODEC_ID_MPEG4)
cond	263:8	263:51	3	CONFIG_MPEG4_DECODER && avctx -> codec_id == AV_CODEC_ID_MPEG4
water	263:8	0:0	4	CONFIG_MPEG4_DECODER
op	263:29	0:0	4	&&
water	263:32	0:0	4	avctx
op	263:37	0:0	4	->
water	263:39	0:0	4	codec_id
op	263:48	0:0	4	==
water	263:51	0:0	4	AV_CODEC_ID_MPEG4
stmts	264:8	264:48	3	
call	264:8	264:47	4	ff_mpeg4_frame_end
arg	264:27	264:32	5	avctx
water	264:27	0:0	6	avctx
arg	264:34	264:37	5	buf
water	264:34	0:0	6	buf
arg	264:39	264:47	5	buf_size
water	264:39	0:0	6	buf_size
water	264:48	0:0	4	;
if	266:4	267:37	2	(! s -> divx_packed && avctx -> hwaccel)
cond	266:8	266:34	3	! s -> divx_packed && avctx -> hwaccel
op	266:8	0:0	4	!
water	266:9	0:0	4	s
op	266:10	0:0	4	->
water	266:12	0:0	4	divx_packed
op	266:24	0:0	4	&&
water	266:27	0:0	4	avctx
op	266:32	0:0	4	->
water	266:34	0:0	4	hwaccel
stmts	267:8	267:37	3	
call	267:8	267:36	4	ff_thread_finish_setup
arg	267:31	267:36	5	avctx
water	267:31	0:0	6	avctx
water	267:37	0:0	4	;
call	269:4	269:86	2	av_assert1
arg	269:15	269:86	3	s->current_picture.f->pict_type==s->current_picture_ptr->f->pict_type
water	269:15	0:0	4	s
op	269:16	0:0	4	->
water	269:18	0:0	4	current_picture
op	269:33	0:0	4	.
water	269:34	0:0	4	f
op	269:35	0:0	4	->
water	269:37	0:0	4	pict_type
op	269:47	0:0	4	==
water	269:50	0:0	4	s
op	269:51	0:0	4	->
water	269:53	0:0	4	current_picture_ptr
op	269:72	0:0	4	->
water	269:74	0:0	4	f
op	269:75	0:0	4	->
water	269:77	0:0	4	pict_type
water	269:87	0:0	2	;
call	270:4	270:62	2	av_assert1
arg	270:15	270:62	3	s->current_picture.f->pict_type==s->pict_type
water	270:15	0:0	4	s
op	270:16	0:0	4	->
water	270:18	0:0	4	current_picture
op	270:33	0:0	4	.
water	270:34	0:0	4	f
op	270:35	0:0	4	->
water	270:37	0:0	4	pict_type
op	270:47	0:0	4	==
water	270:50	0:0	4	s
op	270:51	0:0	4	->
water	270:53	0:0	4	pict_type
water	270:63	0:0	2	;
if	271:4	276:4	2	(s -> pict_type == AV_PICTURE_TYPE_B || s -> low_delay)
cond	271:8	271:48	3	s -> pict_type == AV_PICTURE_TYPE_B || s -> low_delay
water	271:8	0:0	4	s
op	271:9	0:0	4	->
water	271:11	0:0	4	pict_type
op	271:21	0:0	4	==
water	271:24	0:0	4	AV_PICTURE_TYPE_B
op	271:42	0:0	4	||
water	271:45	0:0	4	s
op	271:46	0:0	4	->
water	271:48	0:0	4	low_delay
stmts	271:59	276:4	3	
water	271:59	0:0	4	{
if	272:8	273:22	4	(( ret =av_frame_ref (pict ,s -> current_picture_ptr -> f ) ) < 0)
cond	272:12	272:68	5	( ret =av_frame_ref (pict ,s -> current_picture_ptr -> f ) ) < 0
water	272:12	0:0	6	(
water	272:13	0:0	6	ret
op	272:17	0:0	6	=
call	272:19	272:63	6	av_frame_ref
arg	272:32	272:36	7	pict
water	272:32	0:0	8	pict
arg	272:38	272:63	7	s->current_picture_ptr->f
water	272:38	0:0	8	s
op	272:39	0:0	8	->
water	272:41	0:0	8	current_picture_ptr
op	272:60	0:0	8	->
water	272:62	0:0	8	f
water	272:64	0:0	6	)
op	272:66	0:0	6	<
water	272:68	0:0	6	0
stmts	273:12	273:22	5	
return	273:12	273:22	6	ret
water	273:19	0:0	7	ret
call	274:8	274:59	4	ff_print_debug_info
arg	274:28	274:29	5	s
water	274:28	0:0	6	s
arg	274:31	274:53	5	s->current_picture_ptr
water	274:31	0:0	6	s
op	274:32	0:0	6	->
water	274:34	0:0	6	current_picture_ptr
arg	274:55	274:59	5	pict
water	274:55	0:0	6	pict
water	274:60	0:0	4	;
call	275:8	275:84	4	ff_mpv_export_qp_table
arg	275:31	275:32	5	s
water	275:31	0:0	6	s
arg	275:34	275:38	5	pict
water	275:34	0:0	6	pict
arg	275:40	275:62	5	s->current_picture_ptr
water	275:40	0:0	6	s
op	275:41	0:0	6	->
water	275:43	0:0	6	current_picture_ptr
arg	275:64	275:84	5	FF_QSCALE_TYPE_MPEG1
water	275:64	0:0	6	FF_QSCALE_TYPE_MPEG1
water	275:85	0:0	4	;
water	276:4	0:0	4	}
else	276:6	281:4	2
stmts	276:11	281:4	3	
if	276:11	281:4	4	(s -> last_picture_ptr)
cond	276:15	276:18	5	s -> last_picture_ptr
water	276:15	0:0	6	s
op	276:16	0:0	6	->
water	276:18	0:0	6	last_picture_ptr
stmts	276:36	281:4	5	
water	276:36	0:0	6	{
if	277:8	278:22	6	(( ret =av_frame_ref (pict ,s -> last_picture_ptr -> f ) ) < 0)
cond	277:12	277:65	7	( ret =av_frame_ref (pict ,s -> last_picture_ptr -> f ) ) < 0
water	277:12	0:0	8	(
water	277:13	0:0	8	ret
op	277:17	0:0	8	=
call	277:19	277:60	8	av_frame_ref
arg	277:32	277:36	9	pict
water	277:32	0:0	10	pict
arg	277:38	277:60	9	s->last_picture_ptr->f
water	277:38	0:0	10	s
op	277:39	0:0	10	->
water	277:41	0:0	10	last_picture_ptr
op	277:57	0:0	10	->
water	277:59	0:0	10	f
water	277:61	0:0	8	)
op	277:63	0:0	8	<
water	277:65	0:0	8	0
stmts	278:12	278:22	7	
return	278:12	278:22	8	ret
water	278:19	0:0	9	ret
call	279:8	279:56	6	ff_print_debug_info
arg	279:28	279:29	7	s
water	279:28	0:0	8	s
arg	279:31	279:50	7	s->last_picture_ptr
water	279:31	0:0	8	s
op	279:32	0:0	8	->
water	279:34	0:0	8	last_picture_ptr
arg	279:52	279:56	7	pict
water	279:52	0:0	8	pict
water	279:57	0:0	6	;
call	280:8	280:81	6	ff_mpv_export_qp_table
arg	280:31	280:32	7	s
water	280:31	0:0	8	s
arg	280:34	280:38	7	pict
water	280:34	0:0	8	pict
arg	280:40	280:59	7	s->last_picture_ptr
water	280:40	0:0	8	s
op	280:41	0:0	8	->
water	280:43	0:0	8	last_picture_ptr
arg	280:61	280:81	7	FF_QSCALE_TYPE_MPEG1
water	280:61	0:0	8	FF_QSCALE_TYPE_MPEG1
water	280:82	0:0	6	;
water	281:4	0:0	6	}
if	283:4	300:4	2	(s -> last_picture_ptr || s -> low_delay)
cond	283:8	283:34	3	s -> last_picture_ptr || s -> low_delay
water	283:8	0:0	4	s
op	283:9	0:0	4	->
water	283:11	0:0	4	last_picture_ptr
op	283:28	0:0	4	||
water	283:31	0:0	4	s
op	283:32	0:0	4	->
water	283:34	0:0	4	low_delay
stmts	283:45	300:4	3	
water	283:45	0:0	4	{
if	284:8	298:8	4	(pict -> format == AV_PIX_FMT_YUV420P && ( s -> codec_tag ==AV_RL32 ("GEOV" ) || s -> codec_tag ==AV_RL32 ("GEOX" ) ))
cond	284:15	285:82	5	pict -> format == AV_PIX_FMT_YUV420P && ( s -> codec_tag ==AV_RL32 ("GEOV" ) || s -> codec_tag ==AV_RL32 ("GEOX" ) )
water	284:15	0:0	6	pict
op	284:19	0:0	6	->
water	284:21	0:0	6	format
op	284:28	0:0	6	==
water	284:31	0:0	6	AV_PIX_FMT_YUV420P
op	285:12	0:0	6	&&
water	285:15	0:0	6	(
water	285:16	0:0	6	s
op	285:17	0:0	6	->
water	285:19	0:0	6	codec_tag
op	285:29	0:0	6	==
call	285:32	285:46	6	AV_RL32
arg	285:40	285:46	7	"GEOV"
water	285:40	0:0	8	"GEOV"
op	285:48	0:0	6	||
water	285:51	0:0	6	s
op	285:52	0:0	6	->
water	285:54	0:0	6	codec_tag
op	285:64	0:0	6	==
call	285:67	285:81	6	AV_RL32
arg	285:75	285:81	7	"GEOX"
water	285:75	0:0	8	"GEOX"
water	285:82	0:0	6	)
stmts	285:85	298:8	5	
water	285:85	0:0	6	{
decl	286:12	286:23	6	int	x
water	286:17	0:0	6	,
decl	286:12	286:23	6	int	y
water	286:20	0:0	6	,
decl	286:12	286:23	6	int	p
call	287:12	287:39	6	av_frame_make_writable
arg	287:35	287:39	7	pict
water	287:35	0:0	8	pict
water	287:40	0:0	6	;
for	288:12	297:12	6	(p = 0 ;p < 3;p ++)
forinit	288:17	288:20	7	p = 0 ;
water	288:17	0:0	8	p
op	288:18	0:0	8	=
water	288:19	0:0	8	0
water	288:20	0:0	8	;
cond	288:22	288:24	7	p < 3
water	288:22	0:0	8	p
op	288:23	0:0	8	<
water	288:24	0:0	8	3
forexpr	288:27	288:28	7	p ++
water	288:27	0:0	8	p
op	288:28	0:0	8	++
stmts	288:32	297:12	7	
water	288:32	0:0	8	{
decl	289:16	289:57	8	int	w
op	289:22	0:0	8	=
call	289:24	289:56	9	AV_CEIL_RSHIFT
arg	289:39	289:51	10	pict->width
water	289:39	0:0	11	pict
op	289:43	0:0	11	->
water	289:46	0:0	11	width
arg	289:53	289:56	10	!!p
op	289:53	0:0	11	!
op	289:54	0:0	11	!
water	289:55	0:0	11	p
decl	290:16	290:57	8	int	h
op	290:22	0:0	8	=
call	290:24	290:56	9	AV_CEIL_RSHIFT
arg	290:39	290:51	10	pict->height
water	290:39	0:0	11	pict
op	290:43	0:0	11	->
water	290:45	0:0	11	height
arg	290:53	290:56	10	!!p
op	290:53	0:0	11	!
op	290:54	0:0	11	!
water	290:55	0:0	11	p
decl	291:16	291:48	8	int	linesize
op	291:29	0:0	8	=
water	291:31	0:0	8	pict
op	291:35	0:0	8	->
water	291:37	0:0	8	linesize
op	291:45	0:0	8	[
water	291:46	0:0	8	p
op	291:47	0:0	8	]
for	292:16	296:67	8	(y = 0 ;y < ( h >> 1 );y ++)
forinit	292:21	292:24	9	y = 0 ;
water	292:21	0:0	10	y
op	292:22	0:0	10	=
water	292:23	0:0	10	0
water	292:24	0:0	10	;
cond	292:26	292:33	9	y < ( h >> 1 )
water	292:26	0:0	10	y
op	292:27	0:0	10	<
water	292:28	0:0	10	(
water	292:29	0:0	10	h
op	292:30	0:0	10	>>
water	292:32	0:0	10	1
water	292:33	0:0	10	)
forexpr	292:36	292:37	9	y ++
water	292:36	0:0	10	y
op	292:37	0:0	10	++
stmts	293:20	296:67	9	
for	293:20	296:67	10	(x = 0 ;x < w;x ++)
forinit	293:25	293:28	11	x = 0 ;
water	293:25	0:0	12	x
op	293:26	0:0	12	=
water	293:27	0:0	12	0
water	293:28	0:0	12	;
cond	293:30	293:32	11	x < w
water	293:30	0:0	12	x
op	293:31	0:0	12	<
water	293:32	0:0	12	w
forexpr	293:35	293:36	11	x ++
water	293:35	0:0	12	x
op	293:36	0:0	12	++
stmts	294:24	296:67	11	
call	294:24	296:66	12	FFSWAP
arg	294:31	294:34	13	int
water	294:31	0:0	14	int
arg	295:31	295:60	13	pict->data[p][x+y*linesize]
water	295:31	0:0	14	pict
op	295:35	0:0	14	->
water	295:37	0:0	14	data
op	295:41	0:0	14	[
water	295:42	0:0	14	p
op	295:43	0:0	14	]
op	295:44	0:0	14	[
water	295:45	0:0	14	x
op	295:47	0:0	14	+
water	295:49	0:0	14	y
op	295:50	0:0	14	*
water	295:51	0:0	14	linesize
op	295:59	0:0	14	]
arg	296:31	296:66	13	pict->data[p][x+(h-1-y)*linesize]
water	296:31	0:0	14	pict
op	296:35	0:0	14	->
water	296:37	0:0	14	data
op	296:41	0:0	14	[
water	296:42	0:0	14	p
op	296:43	0:0	14	]
op	296:44	0:0	14	[
water	296:45	0:0	14	x
op	296:47	0:0	14	+
water	296:49	0:0	14	(
water	296:50	0:0	14	h
op	296:51	0:0	14	-
water	296:52	0:0	14	1
op	296:53	0:0	14	-
water	296:54	0:0	14	y
water	296:55	0:0	14	)
op	296:56	0:0	14	*
water	296:57	0:0	14	linesize
op	296:65	0:0	14	]
water	296:67	0:0	12	;
water	297:12	0:0	8	}
water	298:8	0:0	6	}
op	299:8	0:0	4	*
water	299:9	0:0	4	got_frame
op	299:19	0:0	4	=
water	299:21	0:0	4	1
water	299:22	0:0	4	;
water	300:4	0:0	4	}
if	302:4	303:24	2	(slice_ret < 0 && ( avctx -> err_recognition & AV_EF_EXPLODE ))
cond	302:8	302:64	3	slice_ret < 0 && ( avctx -> err_recognition & AV_EF_EXPLODE )
water	302:8	0:0	4	slice_ret
op	302:18	0:0	4	<
water	302:20	0:0	4	0
op	302:22	0:0	4	&&
water	302:25	0:0	4	(
water	302:26	0:0	4	avctx
op	302:31	0:0	4	->
water	302:33	0:0	4	err_recognition
op	302:49	0:0	4	&
water	302:51	0:0	4	AV_EF_EXPLODE
water	302:64	0:0	4	)
stmts	303:8	303:24	3	
return	303:8	303:24	4	slice_ret
water	303:15	0:0	5	slice_ret
else	304:4	305:46	2
stmts	305:8	305:46	3	
return	305:8	305:46	4	get_consumed_bytes(s,buf_size)
call	305:15	305:45	5	get_consumed_bytes
arg	305:34	305:35	6	s
water	305:34	0:0	7	s
arg	305:37	305:45	6	buf_size
water	305:37	0:0	7	buf_size
