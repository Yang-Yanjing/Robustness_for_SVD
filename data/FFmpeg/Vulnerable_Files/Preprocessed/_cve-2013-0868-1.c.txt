func	2:0	71:0	0	static void	generate_joint_tables
params	2:33	0:0	1	
param	2:34	2:48	2	HYuvContext *	s
stmnts	0:0	70:4	1	
decl	4:4	4:35	2	uint16_t	symbols[1<<VLC_BITS]
decl	5:4	5:32	2	uint16_t	bits[1<<VLC_BITS]
decl	6:4	6:30	2	uint8_t	len[1<<VLC_BITS]
if	7:4	30:4	2	(s -> bitstream_bpp < 24)
cond	7:8	7:27	3	s -> bitstream_bpp < 24
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	bitstream_bpp
op	7:25	0:0	4	<
water	7:27	0:0	4	24
stmts	7:31	30:4	3	
water	7:31	0:0	4	{
decl	8:8	8:22	4	int	p
water	8:13	0:0	4	,
decl	8:8	8:22	4	int	i
water	8:16	0:0	4	,
decl	8:8	8:22	4	int	y
water	8:19	0:0	4	,
decl	8:8	8:22	4	int	u
for	9:8	29:8	4	(p = 0 ;p < 3;p ++)
forinit	9:13	9:18	5	p = 0 ;
water	9:13	0:0	6	p
op	9:15	0:0	6	=
water	9:17	0:0	6	0
water	9:18	0:0	6	;
cond	9:20	9:24	5	p < 3
water	9:20	0:0	6	p
op	9:22	0:0	6	<
water	9:24	0:0	6	3
forexpr	9:27	9:28	5	p ++
water	9:27	0:0	6	p
op	9:28	0:0	6	++
stmts	9:32	29:8	5	
water	9:32	0:0	6	{
for	10:12	25:12	6	(i = y = 0 ;y < 256;y ++)
forinit	10:17	10:26	7	i = y = 0 ;
water	10:17	0:0	8	i
op	10:19	0:0	8	=
water	10:21	0:0	8	y
op	10:23	0:0	8	=
water	10:25	0:0	8	0
water	10:26	0:0	8	;
cond	10:28	10:32	7	y < 256
water	10:28	0:0	8	y
op	10:30	0:0	8	<
water	10:32	0:0	8	256
forexpr	10:37	10:38	7	y ++
water	10:37	0:0	8	y
op	10:38	0:0	8	++
stmts	10:42	25:12	7	
water	10:42	0:0	8	{
decl	11:16	11:39	8	int	len0
op	11:25	0:0	8	=
water	11:27	0:0	8	s
op	11:28	0:0	8	->
water	11:30	0:0	8	len
op	11:33	0:0	8	[
water	11:34	0:0	8	0
op	11:35	0:0	8	]
op	11:36	0:0	8	[
water	11:37	0:0	8	y
op	11:38	0:0	8	]
decl	12:16	12:43	8	int	limit
op	12:26	0:0	8	=
water	12:28	0:0	8	VLC_BITS
op	12:37	0:0	8	-
water	12:39	0:0	8	len0
if	13:16	14:28	8	(limit <= 0)
cond	13:19	13:28	9	limit <= 0
water	13:19	0:0	10	limit
op	13:25	0:0	10	<=
water	13:28	0:0	10	0
stmts	14:20	14:28	9	
continue	14:20	14:28	10	
for	15:16	24:16	8	(u = 0 ;u < 256;u ++)
forinit	15:21	15:26	9	u = 0 ;
water	15:21	0:0	10	u
op	15:23	0:0	10	=
water	15:25	0:0	10	0
water	15:26	0:0	10	;
cond	15:28	15:32	9	u < 256
water	15:28	0:0	10	u
op	15:30	0:0	10	<
water	15:32	0:0	10	256
forexpr	15:37	15:38	9	u ++
water	15:37	0:0	10	u
op	15:38	0:0	10	++
stmts	15:42	24:16	9	
water	15:42	0:0	10	{
decl	16:20	16:43	10	int	len1
op	16:29	0:0	10	=
water	16:31	0:0	10	s
op	16:32	0:0	10	->
water	16:34	0:0	10	len
op	16:37	0:0	10	[
water	16:38	0:0	10	p
op	16:39	0:0	10	]
op	16:40	0:0	10	[
water	16:41	0:0	10	u
op	16:42	0:0	10	]
if	17:20	18:32	10	(len1 > limit)
cond	17:24	17:31	11	len1 > limit
water	17:24	0:0	12	len1
op	17:29	0:0	12	>
water	17:31	0:0	12	limit
stmts	18:24	18:32	11	
continue	18:24	18:32	12	
water	19:20	0:0	10	len
op	19:23	0:0	10	[
water	19:24	0:0	10	i
op	19:25	0:0	10	]
op	19:27	0:0	10	=
water	19:29	0:0	10	len0
op	19:34	0:0	10	+
water	19:36	0:0	10	len1
water	19:40	0:0	10	;
water	20:20	0:0	10	bits
op	20:24	0:0	10	[
water	20:25	0:0	10	i
op	20:26	0:0	10	]
op	20:28	0:0	10	=
water	20:30	0:0	10	(
water	20:31	0:0	10	s
op	20:32	0:0	10	->
water	20:34	0:0	10	bits
op	20:38	0:0	10	[
water	20:39	0:0	10	0
op	20:40	0:0	10	]
op	20:41	0:0	10	[
water	20:42	0:0	10	y
op	20:43	0:0	10	]
op	20:45	0:0	10	<<
water	20:48	0:0	10	len1
water	20:52	0:0	10	)
op	20:54	0:0	10	+
water	20:56	0:0	10	s
op	20:57	0:0	10	->
water	20:59	0:0	10	bits
op	20:63	0:0	10	[
water	20:64	0:0	10	p
op	20:65	0:0	10	]
op	20:66	0:0	10	[
water	20:67	0:0	10	u
op	20:68	0:0	10	]
water	20:69	0:0	10	;
water	21:20	0:0	10	symbols
op	21:27	0:0	10	[
water	21:28	0:0	10	i
op	21:29	0:0	10	]
op	21:31	0:0	10	=
water	21:33	0:0	10	(
water	21:34	0:0	10	y
op	21:36	0:0	10	<<
water	21:39	0:0	10	8
water	21:40	0:0	10	)
op	21:42	0:0	10	+
water	21:44	0:0	10	u
water	21:45	0:0	10	;
if	22:20	23:27	10	(symbols [ i ] != 0 xffff)
cond	22:23	22:38	11	symbols [ i ] != 0 xffff
water	22:23	0:0	12	symbols
op	22:30	0:0	12	[
water	22:31	0:0	12	i
op	22:32	0:0	12	]
op	22:34	0:0	12	!=
water	22:37	0:0	12	0
water	22:38	0:0	12	xffff
stmts	23:24	23:27	11	
water	23:24	0:0	12	i
op	23:25	0:0	12	++
water	23:27	0:0	12	;
water	24:16	0:0	10	}
water	25:12	0:0	8	}
call	26:12	26:38	6	ff_free_vlc
arg	26:24	26:38	7	&s->vlc[3+p]
op	26:24	0:0	8	&
water	26:25	0:0	8	s
op	26:26	0:0	8	->
water	26:28	0:0	8	vlc
op	26:31	0:0	8	[
water	26:32	0:0	8	3
op	26:34	0:0	8	+
water	26:36	0:0	8	p
op	26:37	0:0	8	]
water	26:39	0:0	6	;
call	27:12	28:59	6	ff_init_vlc_sparse
arg	27:31	27:45	7	&s->vlc[3+p]
op	27:31	0:0	8	&
water	27:32	0:0	8	s
op	27:33	0:0	8	->
water	27:35	0:0	8	vlc
op	27:38	0:0	8	[
water	27:39	0:0	8	3
op	27:41	0:0	8	+
water	27:43	0:0	8	p
op	27:44	0:0	8	]
arg	27:47	27:55	7	VLC_BITS
water	27:47	0:0	8	VLC_BITS
arg	27:57	27:58	7	i
water	27:57	0:0	8	i
arg	27:60	27:63	7	len
water	27:60	0:0	8	len
arg	27:65	27:66	7	1
water	27:65	0:0	8	1
arg	27:68	27:69	7	1
water	27:68	0:0	8	1
arg	28:31	28:35	7	bits
water	28:31	0:0	8	bits
arg	28:37	28:38	7	2
water	28:37	0:0	8	2
arg	28:40	28:41	7	2
water	28:40	0:0	8	2
arg	28:43	28:50	7	symbols
water	28:43	0:0	8	symbols
arg	28:52	28:53	7	2
water	28:52	0:0	8	2
arg	28:55	28:56	7	2
water	28:55	0:0	8	2
arg	28:58	28:59	7	0
water	28:58	0:0	8	0
water	28:60	0:0	6	;
water	29:8	0:0	6	}
water	30:4	0:0	4	}
else	30:6	70:4	2
stmts	30:11	70:4	3	
water	30:11	0:0	4	{
call	31:8	31:21	4	uint8_t
arg	31:17	31:21	5	*map
op	31:17	0:0	6	*
water	31:18	0:0	6	map
op	31:22	0:0	4	[
water	31:23	0:0	4	4
op	31:24	0:0	4	]
op	31:26	0:0	4	=
water	31:28	0:0	4	(
call	31:29	31:38	4	uint8_t
arg	31:37	31:38	5	*
op	31:37	0:0	6	*
op	31:39	0:0	4	[
water	31:40	0:0	4	4
op	31:41	0:0	4	]
water	31:42	0:0	4	)
water	31:43	0:0	4	s
op	31:44	0:0	4	->
water	31:46	0:0	4	pix_bgr_map
water	31:57	0:0	4	;
decl	32:8	32:28	4	int	i
water	32:13	0:0	4	,
decl	32:8	32:28	4	int	b
water	32:16	0:0	4	,
decl	32:8	32:28	4	int	g
water	32:19	0:0	4	,
decl	32:8	32:28	4	int	r
water	32:22	0:0	4	,
decl	32:8	32:28	4	int	code
decl	33:8	33:31	4	int	p0
op	33:15	0:0	4	=
water	33:17	0:0	4	s
op	33:18	0:0	4	->
water	33:20	0:0	4	decorrelate
decl	34:8	34:32	4	int	p1
op	34:15	0:0	4	=
op	34:17	0:0	4	!
water	34:18	0:0	4	s
op	34:19	0:0	4	->
water	34:21	0:0	4	decorrelate
for	38:8	67:8	4	(i = 0 , g = - 16 ;g < 16;g ++)
forinit	38:13	38:27	5	i = 0 , g = - 16 ;
water	38:13	0:0	6	i
op	38:15	0:0	6	=
water	38:17	0:0	6	0
water	38:18	0:0	6	,
water	38:20	0:0	6	g
op	38:22	0:0	6	=
op	38:24	0:0	6	-
water	38:25	0:0	6	16
water	38:27	0:0	6	;
cond	38:29	38:33	5	g < 16
water	38:29	0:0	6	g
op	38:31	0:0	6	<
water	38:33	0:0	6	16
forexpr	38:37	38:38	5	g ++
water	38:37	0:0	6	g
op	38:38	0:0	6	++
stmts	38:42	67:8	5	
water	38:42	0:0	6	{
decl	39:12	39:42	6	int	len0
op	39:21	0:0	6	=
water	39:23	0:0	6	s
op	39:24	0:0	6	->
water	39:26	0:0	6	len
op	39:29	0:0	6	[
water	39:30	0:0	6	p0
op	39:32	0:0	6	]
op	39:33	0:0	6	[
water	39:34	0:0	6	g
op	39:36	0:0	6	&
water	39:38	0:0	6	255
op	39:41	0:0	6	]
decl	40:12	40:40	6	int	limit0
op	40:23	0:0	6	=
water	40:25	0:0	6	VLC_BITS
op	40:34	0:0	6	-
water	40:36	0:0	6	len0
if	41:12	42:24	6	(limit0 < 2)
cond	41:16	41:25	7	limit0 < 2
water	41:16	0:0	8	limit0
op	41:23	0:0	8	<
water	41:25	0:0	8	2
stmts	42:16	42:24	7	
continue	42:16	42:24	8	
for	43:12	66:12	6	(b = - 16 ;b < 16;b ++)
forinit	43:17	43:24	7	b = - 16 ;
water	43:17	0:0	8	b
op	43:19	0:0	8	=
op	43:21	0:0	8	-
water	43:22	0:0	8	16
water	43:24	0:0	8	;
cond	43:26	43:30	7	b < 16
water	43:26	0:0	8	b
op	43:28	0:0	8	<
water	43:30	0:0	8	16
forexpr	43:34	43:35	7	b ++
water	43:34	0:0	8	b
op	43:35	0:0	8	++
stmts	43:39	66:12	7	
water	43:39	0:0	8	{
decl	44:16	44:46	8	int	len1
op	44:25	0:0	8	=
water	44:27	0:0	8	s
op	44:28	0:0	8	->
water	44:30	0:0	8	len
op	44:33	0:0	8	[
water	44:34	0:0	8	p1
op	44:36	0:0	8	]
op	44:37	0:0	8	[
water	44:38	0:0	8	b
op	44:40	0:0	8	&
water	44:42	0:0	8	255
op	44:45	0:0	8	]
decl	45:16	45:42	8	int	limit1
op	45:27	0:0	8	=
water	45:29	0:0	8	limit0
op	45:36	0:0	8	-
water	45:38	0:0	8	len1
if	46:16	47:28	8	(limit1 < 1)
cond	46:20	46:29	9	limit1 < 1
water	46:20	0:0	10	limit1
op	46:27	0:0	10	<
water	46:29	0:0	10	1
stmts	47:20	47:28	9	
continue	47:20	47:28	10	
water	48:16	0:0	8	code
op	48:21	0:0	8	=
water	48:23	0:0	8	(
water	48:24	0:0	8	s
op	48:25	0:0	8	->
water	48:27	0:0	8	bits
op	48:31	0:0	8	[
water	48:32	0:0	8	p0
op	48:34	0:0	8	]
op	48:35	0:0	8	[
water	48:36	0:0	8	g
op	48:38	0:0	8	&
water	48:40	0:0	8	255
op	48:43	0:0	8	]
op	48:45	0:0	8	<<
water	48:48	0:0	8	len1
water	48:52	0:0	8	)
op	48:54	0:0	8	+
water	48:56	0:0	8	s
op	48:57	0:0	8	->
water	48:59	0:0	8	bits
op	48:63	0:0	8	[
water	48:64	0:0	8	p1
op	48:66	0:0	8	]
op	48:67	0:0	8	[
water	48:68	0:0	8	b
op	48:70	0:0	8	&
water	48:72	0:0	8	255
op	48:75	0:0	8	]
water	48:76	0:0	8	;
for	49:16	65:16	8	(r = - 16 ;r < 16;r ++)
forinit	49:21	49:28	9	r = - 16 ;
water	49:21	0:0	10	r
op	49:23	0:0	10	=
op	49:25	0:0	10	-
water	49:26	0:0	10	16
water	49:28	0:0	10	;
cond	49:30	49:34	9	r < 16
water	49:30	0:0	10	r
op	49:32	0:0	10	<
water	49:34	0:0	10	16
forexpr	49:38	49:39	9	r ++
water	49:38	0:0	10	r
op	49:39	0:0	10	++
stmts	49:43	65:16	9	
water	49:43	0:0	10	{
decl	50:20	50:49	10	int	len2
op	50:29	0:0	10	=
water	50:31	0:0	10	s
op	50:32	0:0	10	->
water	50:34	0:0	10	len
op	50:37	0:0	10	[
water	50:38	0:0	10	2
op	50:39	0:0	10	]
op	50:40	0:0	10	[
water	50:41	0:0	10	r
op	50:43	0:0	10	&
water	50:45	0:0	10	255
op	50:48	0:0	10	]
if	51:20	52:32	10	(len2 > limit1)
cond	51:24	51:31	11	len2 > limit1
water	51:24	0:0	12	len2
op	51:29	0:0	12	>
water	51:31	0:0	12	limit1
stmts	52:24	52:32	11	
continue	52:24	52:32	12	
water	53:20	0:0	10	len
op	53:23	0:0	10	[
water	53:24	0:0	10	i
op	53:25	0:0	10	]
op	53:27	0:0	10	=
water	53:29	0:0	10	len0
op	53:34	0:0	10	+
water	53:36	0:0	10	len1
op	53:41	0:0	10	+
water	53:43	0:0	10	len2
water	53:47	0:0	10	;
water	54:20	0:0	10	bits
op	54:24	0:0	10	[
water	54:25	0:0	10	i
op	54:26	0:0	10	]
op	54:28	0:0	10	=
water	54:30	0:0	10	(
water	54:31	0:0	10	code
op	54:36	0:0	10	<<
water	54:39	0:0	10	len2
water	54:43	0:0	10	)
op	54:45	0:0	10	+
water	54:47	0:0	10	s
op	54:48	0:0	10	->
water	54:50	0:0	10	bits
op	54:54	0:0	10	[
water	54:55	0:0	10	2
op	54:56	0:0	10	]
op	54:57	0:0	10	[
water	54:58	0:0	10	r
op	54:60	0:0	10	&
water	54:62	0:0	10	255
op	54:65	0:0	10	]
water	54:66	0:0	10	;
if	55:20	59:20	10	(s -> decorrelate)
cond	55:24	55:27	11	s -> decorrelate
water	55:24	0:0	12	s
op	55:25	0:0	12	->
water	55:27	0:0	12	decorrelate
stmts	55:40	59:20	11	
water	55:40	0:0	12	{
water	56:24	0:0	12	map
op	56:27	0:0	12	[
water	56:28	0:0	12	i
op	56:29	0:0	12	]
op	56:30	0:0	12	[
water	56:31	0:0	12	G
op	56:32	0:0	12	]
op	56:34	0:0	12	=
water	56:36	0:0	12	g
water	56:37	0:0	12	;
water	57:24	0:0	12	map
op	57:27	0:0	12	[
water	57:28	0:0	12	i
op	57:29	0:0	12	]
op	57:30	0:0	12	[
water	57:31	0:0	12	B
op	57:32	0:0	12	]
op	57:34	0:0	12	=
water	57:36	0:0	12	g
op	57:38	0:0	12	+
water	57:40	0:0	12	b
water	57:41	0:0	12	;
water	58:24	0:0	12	map
op	58:27	0:0	12	[
water	58:28	0:0	12	i
op	58:29	0:0	12	]
op	58:30	0:0	12	[
water	58:31	0:0	12	R
op	58:32	0:0	12	]
op	58:34	0:0	12	=
water	58:36	0:0	12	g
op	58:38	0:0	12	+
water	58:40	0:0	12	r
water	58:41	0:0	12	;
water	59:20	0:0	12	}
else	59:22	63:20	10
stmts	59:27	63:20	11	
water	59:27	0:0	12	{
water	60:24	0:0	12	map
op	60:27	0:0	12	[
water	60:28	0:0	12	i
op	60:29	0:0	12	]
op	60:30	0:0	12	[
water	60:31	0:0	12	B
op	60:32	0:0	12	]
op	60:34	0:0	12	=
water	60:36	0:0	12	g
water	60:37	0:0	12	;
water	61:24	0:0	12	map
op	61:27	0:0	12	[
water	61:28	0:0	12	i
op	61:29	0:0	12	]
op	61:30	0:0	12	[
water	61:31	0:0	12	G
op	61:32	0:0	12	]
op	61:34	0:0	12	=
water	61:36	0:0	12	b
water	61:37	0:0	12	;
water	62:24	0:0	12	map
op	62:27	0:0	12	[
water	62:28	0:0	12	i
op	62:29	0:0	12	]
op	62:30	0:0	12	[
water	62:31	0:0	12	R
op	62:32	0:0	12	]
op	62:34	0:0	12	=
water	62:36	0:0	12	r
water	62:37	0:0	12	;
water	63:20	0:0	12	}
water	64:20	0:0	10	i
op	64:21	0:0	10	++
water	64:23	0:0	10	;
water	65:16	0:0	10	}
water	66:12	0:0	8	}
water	67:8	0:0	6	}
call	68:8	68:30	4	ff_free_vlc
arg	68:20	68:30	5	&s->vlc[3]
op	68:20	0:0	6	&
water	68:21	0:0	6	s
op	68:22	0:0	6	->
water	68:24	0:0	6	vlc
op	68:27	0:0	6	[
water	68:28	0:0	6	3
op	68:29	0:0	6	]
water	68:31	0:0	4	;
call	69:8	69:66	4	init_vlc
arg	69:17	69:27	5	&s->vlc[3]
op	69:17	0:0	6	&
water	69:18	0:0	6	s
op	69:19	0:0	6	->
water	69:21	0:0	6	vlc
op	69:24	0:0	6	[
water	69:25	0:0	6	3
op	69:26	0:0	6	]
arg	69:29	69:37	5	VLC_BITS
water	69:29	0:0	6	VLC_BITS
arg	69:39	69:40	5	i
water	69:39	0:0	6	i
arg	69:42	69:45	5	len
water	69:42	0:0	6	len
arg	69:47	69:48	5	1
water	69:47	0:0	6	1
arg	69:50	69:51	5	1
water	69:50	0:0	6	1
arg	69:53	69:57	5	bits
water	69:53	0:0	6	bits
arg	69:59	69:60	5	2
water	69:59	0:0	6	2
arg	69:62	69:63	5	2
water	69:62	0:0	6	2
arg	69:65	69:66	5	0
water	69:65	0:0	6	0
water	69:67	0:0	4	;
water	70:4	0:0	4	}
