func	6:0	69:0	0	int	ff_h264_slice_context_init
params	6:30	0:0	1	
param	6:31	6:45	2	H264Context *	h
param	6:47	6:67	2	H264SliceContext *	sl
stmnts	0:0	68:26	1	
decl	8:4	8:27	2	ERContext	*er
op	8:18	0:0	2	=
op	8:20	0:0	2	&
water	8:21	0:0	2	sl
op	8:23	0:0	2	->
water	8:25	0:0	2	er
decl	9:4	9:51	2	int	mb_array_size
op	9:22	0:0	2	=
water	9:24	0:0	2	h
op	9:25	0:0	2	->
water	9:27	0:0	2	mb_height
op	9:37	0:0	2	*
water	9:39	0:0	2	h
op	9:40	0:0	2	->
water	9:42	0:0	2	mb_stride
decl	10:4	10:64	2	int	y_size
op	10:16	0:0	2	=
water	10:18	0:0	2	(
water	10:19	0:0	2	2
op	10:21	0:0	2	*
water	10:23	0:0	2	h
op	10:24	0:0	2	->
water	10:26	0:0	2	mb_width
op	10:35	0:0	2	+
water	10:37	0:0	2	1
water	10:38	0:0	2	)
op	10:40	0:0	2	*
water	10:42	0:0	2	(
water	10:43	0:0	2	2
op	10:45	0:0	2	*
water	10:47	0:0	2	h
op	10:48	0:0	2	->
water	10:50	0:0	2	mb_height
op	10:60	0:0	2	+
water	10:62	0:0	2	1
water	10:63	0:0	2	)
decl	11:4	11:51	2	int	c_size
op	11:16	0:0	2	=
water	11:18	0:0	2	h
op	11:19	0:0	2	->
water	11:21	0:0	2	mb_stride
op	11:31	0:0	2	*
water	11:33	0:0	2	(
water	11:34	0:0	2	h
op	11:35	0:0	2	->
water	11:37	0:0	2	mb_height
op	11:47	0:0	2	+
water	11:49	0:0	2	1
water	11:50	0:0	2	)
decl	12:4	12:39	2	int	yc_size
op	12:16	0:0	2	=
water	12:18	0:0	2	y_size
op	12:25	0:0	2	+
water	12:27	0:0	2	2
op	12:31	0:0	2	*
water	12:33	0:0	2	c_size
decl	13:4	13:15	2	int	x
water	13:9	0:0	2	,
decl	13:4	13:15	2	int	y
water	13:12	0:0	2	,
decl	13:4	13:15	2	int	i
water	15:4	0:0	2	sl
op	15:6	0:0	2	->
water	15:8	0:0	2	ref_cache
op	15:17	0:0	2	[
water	15:18	0:0	2	0
op	15:19	0:0	2	]
op	15:20	0:0	2	[
water	15:21	0:0	2	scan8
op	15:26	0:0	2	[
water	15:27	0:0	2	5
op	15:28	0:0	2	]
op	15:31	0:0	2	+
water	15:33	0:0	2	1
op	15:34	0:0	2	]
op	15:36	0:0	2	=
water	16:4	0:0	2	sl
op	16:6	0:0	2	->
water	16:8	0:0	2	ref_cache
op	16:17	0:0	2	[
water	16:18	0:0	2	0
op	16:19	0:0	2	]
op	16:20	0:0	2	[
water	16:21	0:0	2	scan8
op	16:26	0:0	2	[
water	16:27	0:0	2	7
op	16:28	0:0	2	]
op	16:31	0:0	2	+
water	16:33	0:0	2	1
op	16:34	0:0	2	]
op	16:36	0:0	2	=
water	17:4	0:0	2	sl
op	17:6	0:0	2	->
water	17:8	0:0	2	ref_cache
op	17:17	0:0	2	[
water	17:18	0:0	2	0
op	17:19	0:0	2	]
op	17:20	0:0	2	[
water	17:21	0:0	2	scan8
op	17:26	0:0	2	[
water	17:27	0:0	2	13
op	17:29	0:0	2	]
op	17:31	0:0	2	+
water	17:33	0:0	2	1
op	17:34	0:0	2	]
op	17:36	0:0	2	=
water	18:4	0:0	2	sl
op	18:6	0:0	2	->
water	18:8	0:0	2	ref_cache
op	18:17	0:0	2	[
water	18:18	0:0	2	1
op	18:19	0:0	2	]
op	18:20	0:0	2	[
water	18:21	0:0	2	scan8
op	18:26	0:0	2	[
water	18:27	0:0	2	5
op	18:28	0:0	2	]
op	18:31	0:0	2	+
water	18:33	0:0	2	1
op	18:34	0:0	2	]
op	18:36	0:0	2	=
water	19:4	0:0	2	sl
op	19:6	0:0	2	->
water	19:8	0:0	2	ref_cache
op	19:17	0:0	2	[
water	19:18	0:0	2	1
op	19:19	0:0	2	]
op	19:20	0:0	2	[
water	19:21	0:0	2	scan8
op	19:26	0:0	2	[
water	19:27	0:0	2	7
op	19:28	0:0	2	]
op	19:31	0:0	2	+
water	19:33	0:0	2	1
op	19:34	0:0	2	]
op	19:36	0:0	2	=
water	20:4	0:0	2	sl
op	20:6	0:0	2	->
water	20:8	0:0	2	ref_cache
op	20:17	0:0	2	[
water	20:18	0:0	2	1
op	20:19	0:0	2	]
op	20:20	0:0	2	[
water	20:21	0:0	2	scan8
op	20:26	0:0	2	[
water	20:27	0:0	2	13
op	20:29	0:0	2	]
op	20:31	0:0	2	+
water	20:33	0:0	2	1
op	20:34	0:0	2	]
op	20:36	0:0	2	=
water	20:38	0:0	2	PART_NOT_AVAILABLE
water	20:56	0:0	2	;
if	22:4	24:4	2	(sl != h -> slice_ctx)
cond	22:8	22:17	3	sl != h -> slice_ctx
water	22:8	0:0	4	sl
op	22:11	0:0	4	!=
water	22:14	0:0	4	h
op	22:15	0:0	4	->
water	22:17	0:0	4	slice_ctx
stmts	22:28	24:4	3	
water	22:28	0:0	4	{
call	23:8	23:33	4	memset
arg	23:15	23:17	5	er
water	23:15	0:0	6	er
arg	23:19	23:20	5	0
water	23:19	0:0	6	0
arg	23:22	23:33	5	sizeof(*er)
op	23:22	0:0	6	sizeof
water	23:28	0:0	6	(
op	23:29	0:0	6	*
water	23:30	0:0	6	er
water	23:32	0:0	6	)
water	23:34	0:0	4	;
water	24:4	0:0	4	}
else	24:6	63:4	2
stmts	25:4	63:4	3	
if	25:4	63:4	4	(CONFIG_ERROR_RESILIENCE)
cond	25:8	25:8	5	CONFIG_ERROR_RESILIENCE
water	25:8	0:0	6	CONFIG_ERROR_RESILIENCE
stmts	25:33	63:4	5	
water	25:33	0:0	6	{
water	28:8	0:0	6	er
op	28:10	0:0	6	->
water	28:12	0:0	6	avctx
op	28:27	0:0	6	=
water	28:29	0:0	6	h
op	28:30	0:0	6	->
water	28:32	0:0	6	avctx
water	28:37	0:0	6	;
water	29:8	0:0	6	er
op	29:10	0:0	6	->
water	29:12	0:0	6	decode_mb
op	29:27	0:0	6	=
water	29:29	0:0	6	h264_er_decode_mb
water	29:46	0:0	6	;
water	30:8	0:0	6	er
op	30:10	0:0	6	->
water	30:12	0:0	6	opaque
op	30:27	0:0	6	=
water	30:29	0:0	6	h
water	30:30	0:0	6	;
water	31:8	0:0	6	er
op	31:10	0:0	6	->
water	31:12	0:0	6	quarter_sample
op	31:27	0:0	6	=
water	31:29	0:0	6	1
water	31:30	0:0	6	;
water	33:8	0:0	6	er
op	33:10	0:0	6	->
water	33:12	0:0	6	mb_num
op	33:24	0:0	6	=
water	33:26	0:0	6	h
op	33:27	0:0	6	->
water	33:29	0:0	6	mb_num
water	33:35	0:0	6	;
water	34:8	0:0	6	er
op	34:10	0:0	6	->
water	34:12	0:0	6	mb_width
op	34:24	0:0	6	=
water	34:26	0:0	6	h
op	34:27	0:0	6	->
water	34:29	0:0	6	mb_width
water	34:37	0:0	6	;
water	35:8	0:0	6	er
op	35:10	0:0	6	->
water	35:12	0:0	6	mb_height
op	35:24	0:0	6	=
water	35:26	0:0	6	h
op	35:27	0:0	6	->
water	35:29	0:0	6	mb_height
water	35:38	0:0	6	;
water	36:8	0:0	6	er
op	36:10	0:0	6	->
water	36:12	0:0	6	mb_stride
op	36:24	0:0	6	=
water	36:26	0:0	6	h
op	36:27	0:0	6	->
water	36:29	0:0	6	mb_stride
water	36:38	0:0	6	;
water	37:8	0:0	6	er
op	37:10	0:0	6	->
water	37:12	0:0	6	b8_stride
op	37:24	0:0	6	=
water	37:26	0:0	6	h
op	37:27	0:0	6	->
water	37:29	0:0	6	mb_width
op	37:38	0:0	6	*
water	37:40	0:0	6	2
op	37:42	0:0	6	+
water	37:44	0:0	6	1
water	37:45	0:0	6	;
call	40:8	41:61	6	FF_ALLOCZ_OR_GOTO
arg	40:26	40:34	7	h->avctx
water	40:26	0:0	8	h
op	40:27	0:0	8	->
water	40:29	0:0	8	avctx
arg	40:36	40:51	7	er->mb_index2xy
water	40:36	0:0	8	er
op	40:38	0:0	8	->
water	40:40	0:0	8	mb_index2xy
arg	41:26	41:55	7	(h->mb_num+1)*sizeof(int)
water	41:26	0:0	8	(
water	41:27	0:0	8	h
op	41:28	0:0	8	->
water	41:30	0:0	8	mb_num
op	41:37	0:0	8	+
water	41:39	0:0	8	1
water	41:40	0:0	8	)
op	41:42	0:0	8	*
op	41:44	0:0	8	sizeof
water	41:50	0:0	8	(
water	41:51	0:0	8	int
water	41:54	0:0	8	)
arg	41:57	41:61	7	fail
water	41:57	0:0	8	fail
water	41:62	0:0	6	;
for	43:8	45:75	6	(y = 0 ;y < h -> mb_height;y ++)
forinit	43:13	43:18	7	y = 0 ;
water	43:13	0:0	8	y
op	43:15	0:0	8	=
water	43:17	0:0	8	0
water	43:18	0:0	8	;
cond	43:20	43:27	7	y < h -> mb_height
water	43:20	0:0	8	y
op	43:22	0:0	8	<
water	43:24	0:0	8	h
op	43:25	0:0	8	->
water	43:27	0:0	8	mb_height
forexpr	43:38	43:39	7	y ++
water	43:38	0:0	8	y
op	43:39	0:0	8	++
stmts	44:12	45:75	7	
for	44:12	45:75	8	(x = 0 ;x < h -> mb_width;x ++)
forinit	44:17	44:22	9	x = 0 ;
water	44:17	0:0	10	x
op	44:19	0:0	10	=
water	44:21	0:0	10	0
water	44:22	0:0	10	;
cond	44:24	44:31	9	x < h -> mb_width
water	44:24	0:0	10	x
op	44:26	0:0	10	<
water	44:28	0:0	10	h
op	44:29	0:0	10	->
water	44:31	0:0	10	mb_width
forexpr	44:41	44:42	9	x ++
water	44:41	0:0	10	x
op	44:42	0:0	10	++
stmts	45:16	45:75	9	
water	45:16	0:0	10	er
op	45:18	0:0	10	->
water	45:20	0:0	10	mb_index2xy
op	45:31	0:0	10	[
water	45:32	0:0	10	x
op	45:34	0:0	10	+
water	45:36	0:0	10	y
op	45:38	0:0	10	*
water	45:40	0:0	10	h
op	45:41	0:0	10	->
water	45:43	0:0	10	mb_width
op	45:51	0:0	10	]
op	45:53	0:0	10	=
water	45:55	0:0	10	x
op	45:57	0:0	10	+
water	45:59	0:0	10	y
op	45:61	0:0	10	*
water	45:63	0:0	10	h
op	45:64	0:0	10	->
water	45:66	0:0	10	mb_stride
water	45:75	0:0	10	;
water	47:8	0:0	6	er
op	47:10	0:0	6	->
water	47:12	0:0	6	mb_index2xy
op	47:23	0:0	6	[
water	47:24	0:0	6	h
op	47:25	0:0	6	->
water	47:27	0:0	6	mb_height
op	47:37	0:0	6	*
water	47:39	0:0	6	h
op	47:40	0:0	6	->
water	47:42	0:0	6	mb_width
op	47:50	0:0	6	]
op	47:52	0:0	6	=
water	47:54	0:0	6	(
water	47:55	0:0	6	h
op	47:56	0:0	6	->
water	47:58	0:0	6	mb_height
op	47:68	0:0	6	-
water	47:70	0:0	6	1
water	47:71	0:0	6	)
op	47:73	0:0	6	*
water	48:54	0:0	6	h
op	48:55	0:0	6	->
water	48:57	0:0	6	mb_stride
op	48:67	0:0	6	+
water	48:69	0:0	6	h
op	48:70	0:0	6	->
water	48:72	0:0	6	mb_width
water	48:80	0:0	6	;
call	50:8	51:63	6	FF_ALLOCZ_OR_GOTO
arg	50:26	50:34	7	h->avctx
water	50:26	0:0	8	h
op	50:27	0:0	8	->
water	50:29	0:0	8	avctx
arg	50:36	50:58	7	er->error_status_table
water	50:36	0:0	8	er
op	50:38	0:0	8	->
water	50:40	0:0	8	error_status_table
arg	51:26	51:57	7	mb_array_size*sizeof(uint8_t)
water	51:26	0:0	8	mb_array_size
op	51:40	0:0	8	*
op	51:42	0:0	8	sizeof
water	51:48	0:0	8	(
water	51:49	0:0	8	uint8_t
water	51:56	0:0	8	)
arg	51:59	51:63	7	fail
water	51:59	0:0	8	fail
water	51:64	0:0	6	;
call	53:8	54:58	6	FF_ALLOC_OR_GOTO
arg	53:25	53:33	7	h->avctx
water	53:25	0:0	8	h
op	53:26	0:0	8	->
water	53:28	0:0	8	avctx
arg	53:35	53:53	7	er->er_temp_buffer
water	53:35	0:0	8	er
op	53:37	0:0	8	->
water	53:39	0:0	8	er_temp_buffer
arg	54:25	54:52	7	h->mb_height*h->mb_stride
water	54:25	0:0	8	h
op	54:26	0:0	8	->
water	54:28	0:0	8	mb_height
op	54:38	0:0	8	*
water	54:40	0:0	8	h
op	54:41	0:0	8	->
water	54:43	0:0	8	mb_stride
arg	54:54	54:58	7	fail
water	54:54	0:0	8	fail
water	54:59	0:0	6	;
call	56:8	57:57	6	FF_ALLOCZ_OR_GOTO
arg	56:26	56:34	7	h->avctx
water	56:26	0:0	8	h
op	56:27	0:0	8	->
water	56:29	0:0	8	avctx
arg	56:36	56:51	7	sl->dc_val_base
water	56:36	0:0	8	sl
op	56:38	0:0	8	->
water	56:40	0:0	8	dc_val_base
arg	57:26	57:51	7	yc_size*sizeof(int16_t)
water	57:26	0:0	8	yc_size
op	57:34	0:0	8	*
op	57:36	0:0	8	sizeof
water	57:42	0:0	8	(
water	57:43	0:0	8	int16_t
water	57:50	0:0	8	)
arg	57:53	57:57	7	fail
water	57:53	0:0	8	fail
water	57:58	0:0	6	;
water	58:8	0:0	6	er
op	58:10	0:0	6	->
water	58:12	0:0	6	dc_val
op	58:18	0:0	6	[
water	58:19	0:0	6	0
op	58:20	0:0	6	]
op	58:22	0:0	6	=
water	58:24	0:0	6	sl
op	58:26	0:0	6	->
water	58:28	0:0	6	dc_val_base
op	58:40	0:0	6	+
water	58:42	0:0	6	h
op	58:43	0:0	6	->
water	58:45	0:0	6	mb_width
op	58:54	0:0	6	*
water	58:56	0:0	6	2
op	58:58	0:0	6	+
water	58:60	0:0	6	2
water	58:61	0:0	6	;
water	59:8	0:0	6	er
op	59:10	0:0	6	->
water	59:12	0:0	6	dc_val
op	59:18	0:0	6	[
water	59:19	0:0	6	1
op	59:20	0:0	6	]
op	59:22	0:0	6	=
water	59:24	0:0	6	sl
op	59:26	0:0	6	->
water	59:28	0:0	6	dc_val_base
op	59:40	0:0	6	+
water	59:42	0:0	6	y_size
op	59:49	0:0	6	+
water	59:51	0:0	6	h
op	59:52	0:0	6	->
water	59:54	0:0	6	mb_stride
op	59:64	0:0	6	+
water	59:66	0:0	6	1
water	59:67	0:0	6	;
water	60:8	0:0	6	er
op	60:10	0:0	6	->
water	60:12	0:0	6	dc_val
op	60:18	0:0	6	[
water	60:19	0:0	6	2
op	60:20	0:0	6	]
op	60:22	0:0	6	=
water	60:24	0:0	6	er
op	60:26	0:0	6	->
water	60:28	0:0	6	dc_val
op	60:34	0:0	6	[
water	60:35	0:0	6	1
op	60:36	0:0	6	]
op	60:38	0:0	6	+
water	60:40	0:0	6	c_size
water	60:46	0:0	6	;
for	61:8	62:37	6	(i = 0 ;i < yc_size;i ++)
forinit	61:13	61:18	7	i = 0 ;
water	61:13	0:0	8	i
op	61:15	0:0	8	=
water	61:17	0:0	8	0
water	61:18	0:0	8	;
cond	61:20	61:24	7	i < yc_size
water	61:20	0:0	8	i
op	61:22	0:0	8	<
water	61:24	0:0	8	yc_size
forexpr	61:33	61:34	7	i ++
water	61:33	0:0	8	i
op	61:34	0:0	8	++
stmts	62:12	62:37	7	
water	62:12	0:0	8	sl
op	62:14	0:0	8	->
water	62:16	0:0	8	dc_val_base
op	62:27	0:0	8	[
water	62:28	0:0	8	i
op	62:29	0:0	8	]
op	62:31	0:0	8	=
water	62:33	0:0	8	1024
water	62:37	0:0	8	;
water	63:4	0:0	6	}
return	65:4	65:12	2	0
water	65:11	0:0	3	0
label	67:0	67:4	2	fail :
return	68:4	68:26	2	AVERROR(ENOMEM)
call	68:11	68:25	3	AVERROR
arg	68:19	68:25	4	ENOMEM
water	68:19	0:0	5	ENOMEM
