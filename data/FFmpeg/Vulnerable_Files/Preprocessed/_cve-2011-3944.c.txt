func	5:0	106:0	0	static int	smacker_decode_header_tree
params	5:37	0:0	1	
param	5:38	5:56	2	SmackVContext *	smk
param	5:58	5:75	2	GetBitContext *	gb
param	5:77	5:90	2	int * *	recodes
param	5:92	5:101	2	int *	last
param	5:103	5:111	2	int	size
stmnts	0:0	105:12	1	
decl	7:4	7:11	2	int	res
decl	8:4	8:20	2	HuffContext	huff
decl	9:4	9:26	2	HuffContext	tmp1
water	9:20	0:0	2	,
decl	9:4	9:26	2	HuffContext	tmp2
decl	10:4	10:14	2	VLC	vlc[2]
decl	11:4	11:18	2	int	escapes[3]
decl	12:4	12:13	2	DBCtx	ctx
if	14:4	17:4	2	(size >= UINT_MAX >> 4)
cond	14:7	14:25	3	size >= UINT_MAX >> 4
water	14:7	0:0	4	size
op	14:12	0:0	4	>=
water	14:15	0:0	4	UINT_MAX
op	14:23	0:0	4	>>
water	14:25	0:0	4	4
stmts	14:27	17:4	3	
water	14:27	0:0	4	{
call	15:8	15:59	4	av_log
arg	15:15	15:25	5	smk->avctx
water	15:15	0:0	6	smk
op	15:18	0:0	6	->
water	15:20	0:0	6	avctx
arg	15:27	15:39	5	AV_LOG_ERROR
water	15:27	0:0	6	AV_LOG_ERROR
arg	15:41	15:59	5	"size too large\n"
water	15:41	0:0	6	"size too large\n"
water	15:60	0:0	4	;
return	16:8	16:17	4	-1
op	16:15	0:0	5	-
water	16:16	0:0	5	1
water	17:4	0:0	4	}
water	19:4	0:0	2	tmp1
op	19:8	0:0	2	.
water	19:9	0:0	2	length
op	19:16	0:0	2	=
water	19:18	0:0	2	256
water	19:21	0:0	2	;
water	20:4	0:0	2	tmp1
op	20:8	0:0	2	.
water	20:9	0:0	2	maxlength
op	20:19	0:0	2	=
water	20:21	0:0	2	0
water	20:22	0:0	2	;
water	21:4	0:0	2	tmp1
op	21:8	0:0	2	.
water	21:9	0:0	2	current
op	21:17	0:0	2	=
water	21:19	0:0	2	0
water	21:20	0:0	2	;
water	22:4	0:0	2	tmp1
op	22:8	0:0	2	.
water	22:9	0:0	2	bits
op	22:14	0:0	2	=
call	22:16	22:34	2	av_mallocz
arg	22:27	22:34	3	256*4
water	22:27	0:0	4	256
op	22:31	0:0	4	*
water	22:33	0:0	4	4
water	22:35	0:0	2	;
water	23:4	0:0	2	tmp1
op	23:8	0:0	2	.
water	23:9	0:0	2	lengths
op	23:17	0:0	2	=
call	23:19	23:47	2	av_mallocz
arg	23:30	23:47	3	256*sizeof(int)
water	23:30	0:0	4	256
op	23:34	0:0	4	*
op	23:36	0:0	4	sizeof
water	23:42	0:0	4	(
water	23:43	0:0	4	int
water	23:46	0:0	4	)
water	23:48	0:0	2	;
water	24:4	0:0	2	tmp1
op	24:8	0:0	2	.
water	24:9	0:0	2	values
op	24:16	0:0	2	=
call	24:18	24:46	2	av_mallocz
arg	24:29	24:46	3	256*sizeof(int)
water	24:29	0:0	4	256
op	24:33	0:0	4	*
op	24:35	0:0	4	sizeof
water	24:41	0:0	4	(
water	24:42	0:0	4	int
water	24:45	0:0	4	)
water	24:47	0:0	2	;
water	26:4	0:0	2	tmp2
op	26:8	0:0	2	.
water	26:9	0:0	2	length
op	26:16	0:0	2	=
water	26:18	0:0	2	256
water	26:21	0:0	2	;
water	27:4	0:0	2	tmp2
op	27:8	0:0	2	.
water	27:9	0:0	2	maxlength
op	27:19	0:0	2	=
water	27:21	0:0	2	0
water	27:22	0:0	2	;
water	28:4	0:0	2	tmp2
op	28:8	0:0	2	.
water	28:9	0:0	2	current
op	28:17	0:0	2	=
water	28:19	0:0	2	0
water	28:20	0:0	2	;
water	29:4	0:0	2	tmp2
op	29:8	0:0	2	.
water	29:9	0:0	2	bits
op	29:14	0:0	2	=
call	29:16	29:34	2	av_mallocz
arg	29:27	29:34	3	256*4
water	29:27	0:0	4	256
op	29:31	0:0	4	*
water	29:33	0:0	4	4
water	29:35	0:0	2	;
water	30:4	0:0	2	tmp2
op	30:8	0:0	2	.
water	30:9	0:0	2	lengths
op	30:17	0:0	2	=
call	30:19	30:47	2	av_mallocz
arg	30:30	30:47	3	256*sizeof(int)
water	30:30	0:0	4	256
op	30:34	0:0	4	*
op	30:36	0:0	4	sizeof
water	30:42	0:0	4	(
water	30:43	0:0	4	int
water	30:46	0:0	4	)
water	30:48	0:0	2	;
water	31:4	0:0	2	tmp2
op	31:8	0:0	2	.
water	31:9	0:0	2	values
op	31:16	0:0	2	=
call	31:18	31:46	2	av_mallocz
arg	31:29	31:46	3	256*sizeof(int)
water	31:29	0:0	4	256
op	31:33	0:0	4	*
op	31:35	0:0	4	sizeof
water	31:41	0:0	4	(
water	31:42	0:0	4	int
water	31:45	0:0	4	)
water	31:47	0:0	2	;
call	33:4	33:34	2	memset
arg	33:11	33:18	3	&vlc[0]
op	33:11	0:0	4	&
water	33:12	0:0	4	vlc
op	33:15	0:0	4	[
water	33:16	0:0	4	0
op	33:17	0:0	4	]
arg	33:20	33:21	3	0
water	33:20	0:0	4	0
arg	33:23	33:34	3	sizeof(VLC)
op	33:23	0:0	4	sizeof
water	33:29	0:0	4	(
water	33:30	0:0	4	VLC
water	33:33	0:0	4	)
water	33:35	0:0	2	;
call	34:4	34:34	2	memset
arg	34:11	34:18	3	&vlc[1]
op	34:11	0:0	4	&
water	34:12	0:0	4	vlc
op	34:15	0:0	4	[
water	34:16	0:0	4	1
op	34:17	0:0	4	]
arg	34:20	34:21	3	0
water	34:20	0:0	4	0
arg	34:23	34:34	3	sizeof(VLC)
op	34:23	0:0	4	sizeof
water	34:29	0:0	4	(
water	34:30	0:0	4	VLC
water	34:33	0:0	4	)
water	34:35	0:0	2	;
if	36:4	46:4	2	(get_bits1 (gb ))
cond	36:7	36:19	3	get_bits1 (gb )
call	36:7	36:19	4	get_bits1
arg	36:17	36:19	5	gb
water	36:17	0:0	6	gb
stmts	36:22	46:4	3	
water	36:22	0:0	4	{
call	37:8	37:43	4	smacker_decode_tree
arg	37:28	37:30	5	gb
water	37:28	0:0	6	gb
arg	37:32	37:37	5	&tmp1
op	37:32	0:0	6	&
water	37:33	0:0	6	tmp1
arg	37:39	37:40	5	0
water	37:39	0:0	6	0
arg	37:42	37:43	5	0
water	37:42	0:0	6	0
water	37:44	0:0	4	;
call	38:8	38:21	4	skip_bits1
arg	38:19	38:21	5	gb
water	38:19	0:0	6	gb
water	38:22	0:0	4	;
water	39:8	0:0	4	res
op	39:12	0:0	4	=
call	39:14	41:78	4	init_vlc
arg	39:23	39:30	5	&vlc[0]
op	39:23	0:0	6	&
water	39:24	0:0	6	vlc
op	39:27	0:0	6	[
water	39:28	0:0	6	0
op	39:29	0:0	6	]
arg	39:32	39:44	5	SMKTREE_BITS
water	39:32	0:0	6	SMKTREE_BITS
arg	39:46	39:57	5	tmp1.length
water	39:46	0:0	6	tmp1
op	39:50	0:0	6	.
water	39:51	0:0	6	length
arg	40:20	40:32	5	tmp1.lengths
water	40:20	0:0	6	tmp1
op	40:24	0:0	6	.
water	40:25	0:0	6	lengths
arg	40:34	40:45	5	sizeof(int)
op	40:34	0:0	6	sizeof
water	40:40	0:0	6	(
water	40:41	0:0	6	int
water	40:44	0:0	6	)
arg	40:47	40:58	5	sizeof(int)
op	40:47	0:0	6	sizeof
water	40:53	0:0	6	(
water	40:54	0:0	6	int
water	40:57	0:0	6	)
arg	41:20	41:29	5	tmp1.bits
water	41:20	0:0	6	tmp1
op	41:24	0:0	6	.
water	41:25	0:0	6	bits
arg	41:31	41:47	5	sizeof(uint32_t)
op	41:31	0:0	6	sizeof
water	41:37	0:0	6	(
water	41:38	0:0	6	uint32_t
water	41:46	0:0	6	)
arg	41:49	41:65	5	sizeof(uint32_t)
op	41:49	0:0	6	sizeof
water	41:55	0:0	6	(
water	41:56	0:0	6	uint32_t
water	41:64	0:0	6	)
arg	41:67	41:78	5	INIT_VLC_LE
water	41:67	0:0	6	INIT_VLC_LE
water	41:79	0:0	4	;
if	42:8	45:8	4	(res < 0)
cond	42:11	42:17	5	res < 0
water	42:11	0:0	6	res
op	42:15	0:0	6	<
water	42:17	0:0	6	0
stmts	42:20	45:8	5	
water	42:20	0:0	6	{
call	43:12	43:71	6	av_log
arg	43:19	43:29	7	smk->avctx
water	43:19	0:0	8	smk
op	43:22	0:0	8	->
water	43:24	0:0	8	avctx
arg	43:31	43:43	7	AV_LOG_ERROR
water	43:31	0:0	8	AV_LOG_ERROR
arg	43:45	43:71	7	"Cannot build VLC table\n"
water	43:45	0:0	8	"Cannot build VLC table\n"
water	43:72	0:0	6	;
return	44:12	44:21	6	-1
op	44:19	0:0	7	-
water	44:20	0:0	7	1
water	45:8	0:0	6	}
water	46:4	0:0	4	}
else	46:6	48:4	2
stmts	46:11	48:4	3	
water	46:11	0:0	4	{
call	47:8	47:68	4	av_log
arg	47:15	47:25	5	smk->avctx
water	47:15	0:0	6	smk
op	47:18	0:0	6	->
water	47:20	0:0	6	avctx
arg	47:27	47:39	5	AV_LOG_ERROR
water	47:27	0:0	6	AV_LOG_ERROR
arg	47:41	47:68	5	"Skipping low bytes tree\n"
water	47:41	0:0	6	"Skipping low bytes tree\n"
water	47:69	0:0	4	;
water	48:4	0:0	4	}
if	49:4	59:4	2	(get_bits1 (gb ))
cond	49:7	49:19	3	get_bits1 (gb )
call	49:7	49:19	4	get_bits1
arg	49:17	49:19	5	gb
water	49:17	0:0	6	gb
stmts	49:21	59:4	3	
water	49:21	0:0	4	{
call	50:8	50:43	4	smacker_decode_tree
arg	50:28	50:30	5	gb
water	50:28	0:0	6	gb
arg	50:32	50:37	5	&tmp2
op	50:32	0:0	6	&
water	50:33	0:0	6	tmp2
arg	50:39	50:40	5	0
water	50:39	0:0	6	0
arg	50:42	50:43	5	0
water	50:42	0:0	6	0
water	50:44	0:0	4	;
call	51:8	51:21	4	skip_bits1
arg	51:19	51:21	5	gb
water	51:19	0:0	6	gb
water	51:22	0:0	4	;
water	52:8	0:0	4	res
op	52:12	0:0	4	=
call	52:14	54:78	4	init_vlc
arg	52:23	52:30	5	&vlc[1]
op	52:23	0:0	6	&
water	52:24	0:0	6	vlc
op	52:27	0:0	6	[
water	52:28	0:0	6	1
op	52:29	0:0	6	]
arg	52:32	52:44	5	SMKTREE_BITS
water	52:32	0:0	6	SMKTREE_BITS
arg	52:46	52:57	5	tmp2.length
water	52:46	0:0	6	tmp2
op	52:50	0:0	6	.
water	52:51	0:0	6	length
arg	53:20	53:32	5	tmp2.lengths
water	53:20	0:0	6	tmp2
op	53:24	0:0	6	.
water	53:25	0:0	6	lengths
arg	53:34	53:45	5	sizeof(int)
op	53:34	0:0	6	sizeof
water	53:40	0:0	6	(
water	53:41	0:0	6	int
water	53:44	0:0	6	)
arg	53:47	53:58	5	sizeof(int)
op	53:47	0:0	6	sizeof
water	53:53	0:0	6	(
water	53:54	0:0	6	int
water	53:57	0:0	6	)
arg	54:20	54:29	5	tmp2.bits
water	54:20	0:0	6	tmp2
op	54:24	0:0	6	.
water	54:25	0:0	6	bits
arg	54:31	54:47	5	sizeof(uint32_t)
op	54:31	0:0	6	sizeof
water	54:37	0:0	6	(
water	54:38	0:0	6	uint32_t
water	54:46	0:0	6	)
arg	54:49	54:65	5	sizeof(uint32_t)
op	54:49	0:0	6	sizeof
water	54:55	0:0	6	(
water	54:56	0:0	6	uint32_t
water	54:64	0:0	6	)
arg	54:67	54:78	5	INIT_VLC_LE
water	54:67	0:0	6	INIT_VLC_LE
water	54:79	0:0	4	;
if	55:8	58:8	4	(res < 0)
cond	55:11	55:17	5	res < 0
water	55:11	0:0	6	res
op	55:15	0:0	6	<
water	55:17	0:0	6	0
stmts	55:20	58:8	5	
water	55:20	0:0	6	{
call	56:12	56:71	6	av_log
arg	56:19	56:29	7	smk->avctx
water	56:19	0:0	8	smk
op	56:22	0:0	8	->
water	56:24	0:0	8	avctx
arg	56:31	56:43	7	AV_LOG_ERROR
water	56:31	0:0	8	AV_LOG_ERROR
arg	56:45	56:71	7	"Cannot build VLC table\n"
water	56:45	0:0	8	"Cannot build VLC table\n"
water	56:72	0:0	6	;
return	57:12	57:21	6	-1
op	57:19	0:0	7	-
water	57:20	0:0	7	1
water	58:8	0:0	6	}
water	59:4	0:0	4	}
else	59:6	61:4	2
stmts	59:11	61:4	3	
water	59:11	0:0	4	{
call	60:8	60:69	4	av_log
arg	60:15	60:25	5	smk->avctx
water	60:15	0:0	6	smk
op	60:18	0:0	6	->
water	60:20	0:0	6	avctx
arg	60:27	60:39	5	AV_LOG_ERROR
water	60:27	0:0	6	AV_LOG_ERROR
arg	60:41	60:69	5	"Skipping high bytes tree\n"
water	60:41	0:0	6	"Skipping high bytes tree\n"
water	60:70	0:0	4	;
water	61:4	0:0	4	}
water	63:4	0:0	2	escapes
op	63:11	0:0	2	[
water	63:12	0:0	2	0
op	63:13	0:0	2	]
op	63:16	0:0	2	=
call	63:18	63:32	2	get_bits
arg	63:27	63:29	3	gb
water	63:27	0:0	4	gb
arg	63:31	63:32	3	8
water	63:31	0:0	4	8
water	63:33	0:0	2	;
water	64:4	0:0	2	escapes
op	64:11	0:0	2	[
water	64:12	0:0	2	0
op	64:13	0:0	2	]
op	64:15	0:0	2	|=
call	64:18	64:32	2	get_bits
arg	64:27	64:29	3	gb
water	64:27	0:0	4	gb
arg	64:31	64:32	3	8
water	64:31	0:0	4	8
op	64:34	0:0	2	<<
water	64:37	0:0	2	8
water	64:38	0:0	2	;
water	65:4	0:0	2	escapes
op	65:11	0:0	2	[
water	65:12	0:0	2	1
op	65:13	0:0	2	]
op	65:16	0:0	2	=
call	65:18	65:32	2	get_bits
arg	65:27	65:29	3	gb
water	65:27	0:0	4	gb
arg	65:31	65:32	3	8
water	65:31	0:0	4	8
water	65:33	0:0	2	;
water	66:4	0:0	2	escapes
op	66:11	0:0	2	[
water	66:12	0:0	2	1
op	66:13	0:0	2	]
op	66:15	0:0	2	|=
call	66:18	66:32	2	get_bits
arg	66:27	66:29	3	gb
water	66:27	0:0	4	gb
arg	66:31	66:32	3	8
water	66:31	0:0	4	8
op	66:34	0:0	2	<<
water	66:37	0:0	2	8
water	66:38	0:0	2	;
water	67:4	0:0	2	escapes
op	67:11	0:0	2	[
water	67:12	0:0	2	2
op	67:13	0:0	2	]
op	67:16	0:0	2	=
call	67:18	67:32	2	get_bits
arg	67:27	67:29	3	gb
water	67:27	0:0	4	gb
arg	67:31	67:32	3	8
water	67:31	0:0	4	8
water	67:33	0:0	2	;
water	68:4	0:0	2	escapes
op	68:11	0:0	2	[
water	68:12	0:0	2	2
op	68:13	0:0	2	]
op	68:15	0:0	2	|=
call	68:18	68:32	2	get_bits
arg	68:27	68:29	3	gb
water	68:27	0:0	4	gb
arg	68:31	68:32	3	8
water	68:31	0:0	4	8
op	68:34	0:0	2	<<
water	68:37	0:0	2	8
water	68:38	0:0	2	;
water	70:4	0:0	2	last
op	70:8	0:0	2	[
water	70:9	0:0	2	0
op	70:10	0:0	2	]
op	70:12	0:0	2	=
water	70:14	0:0	2	last
op	70:18	0:0	2	[
water	70:19	0:0	2	1
op	70:20	0:0	2	]
op	70:22	0:0	2	=
water	70:24	0:0	2	last
op	70:28	0:0	2	[
water	70:29	0:0	2	2
op	70:30	0:0	2	]
op	70:32	0:0	2	=
op	70:34	0:0	2	-
water	70:35	0:0	2	1
water	70:36	0:0	2	;
water	72:4	0:0	2	ctx
op	72:7	0:0	2	.
water	72:8	0:0	2	escapes
op	72:15	0:0	2	[
water	72:16	0:0	2	0
op	72:17	0:0	2	]
op	72:19	0:0	2	=
water	72:21	0:0	2	escapes
op	72:28	0:0	2	[
water	72:29	0:0	2	0
op	72:30	0:0	2	]
water	72:31	0:0	2	;
water	73:4	0:0	2	ctx
op	73:7	0:0	2	.
water	73:8	0:0	2	escapes
op	73:15	0:0	2	[
water	73:16	0:0	2	1
op	73:17	0:0	2	]
op	73:19	0:0	2	=
water	73:21	0:0	2	escapes
op	73:28	0:0	2	[
water	73:29	0:0	2	1
op	73:30	0:0	2	]
water	73:31	0:0	2	;
water	74:4	0:0	2	ctx
op	74:7	0:0	2	.
water	74:8	0:0	2	escapes
op	74:15	0:0	2	[
water	74:16	0:0	2	2
op	74:17	0:0	2	]
op	74:19	0:0	2	=
water	74:21	0:0	2	escapes
op	74:28	0:0	2	[
water	74:29	0:0	2	2
op	74:30	0:0	2	]
water	74:31	0:0	2	;
water	75:4	0:0	2	ctx
op	75:7	0:0	2	.
water	75:8	0:0	2	v1
op	75:11	0:0	2	=
op	75:13	0:0	2	&
water	75:14	0:0	2	vlc
op	75:17	0:0	2	[
water	75:18	0:0	2	0
op	75:19	0:0	2	]
water	75:20	0:0	2	;
water	76:4	0:0	2	ctx
op	76:7	0:0	2	.
water	76:8	0:0	2	v2
op	76:11	0:0	2	=
op	76:13	0:0	2	&
water	76:14	0:0	2	vlc
op	76:17	0:0	2	[
water	76:18	0:0	2	1
op	76:19	0:0	2	]
water	76:20	0:0	2	;
water	77:4	0:0	2	ctx
op	77:7	0:0	2	.
water	77:8	0:0	2	recode1
op	77:16	0:0	2	=
water	77:18	0:0	2	tmp1
op	77:22	0:0	2	.
water	77:23	0:0	2	values
water	77:29	0:0	2	;
water	78:4	0:0	2	ctx
op	78:7	0:0	2	.
water	78:8	0:0	2	recode2
op	78:16	0:0	2	=
water	78:18	0:0	2	tmp2
op	78:22	0:0	2	.
water	78:23	0:0	2	values
water	78:29	0:0	2	;
water	79:4	0:0	2	ctx
op	79:7	0:0	2	.
water	79:8	0:0	2	last
op	79:13	0:0	2	=
water	79:15	0:0	2	last
water	79:19	0:0	2	;
water	81:4	0:0	2	huff
op	81:8	0:0	2	.
water	81:9	0:0	2	length
op	81:16	0:0	2	=
water	81:18	0:0	2	(
water	81:19	0:0	2	(
water	81:20	0:0	2	size
op	81:25	0:0	2	+
water	81:27	0:0	2	3
water	81:28	0:0	2	)
op	81:30	0:0	2	>>
water	81:33	0:0	2	2
water	81:34	0:0	2	)
op	81:36	0:0	2	+
water	81:38	0:0	2	3
water	81:39	0:0	2	;
water	82:4	0:0	2	huff
op	82:8	0:0	2	.
water	82:9	0:0	2	maxlength
op	82:19	0:0	2	=
water	82:21	0:0	2	0
water	82:22	0:0	2	;
water	83:4	0:0	2	huff
op	83:8	0:0	2	.
water	83:9	0:0	2	current
op	83:17	0:0	2	=
water	83:19	0:0	2	0
water	83:20	0:0	2	;
water	84:4	0:0	2	huff
op	84:8	0:0	2	.
water	84:9	0:0	2	values
op	84:16	0:0	2	=
call	84:18	84:54	2	av_mallocz
arg	84:29	84:54	3	huff.length*sizeof(int)
water	84:29	0:0	4	huff
op	84:33	0:0	4	.
water	84:34	0:0	4	length
op	84:41	0:0	4	*
op	84:43	0:0	4	sizeof
water	84:49	0:0	4	(
water	84:50	0:0	4	int
water	84:53	0:0	4	)
water	84:55	0:0	2	;
call	86:4	86:42	2	smacker_decode_bigtree
arg	86:27	86:29	3	gb
water	86:27	0:0	4	gb
arg	86:31	86:36	3	&huff
op	86:31	0:0	4	&
water	86:32	0:0	4	huff
arg	86:38	86:42	3	&ctx
op	86:38	0:0	4	&
water	86:39	0:0	4	ctx
water	86:43	0:0	2	;
call	87:4	87:17	2	skip_bits1
arg	87:15	87:17	3	gb
water	87:15	0:0	4	gb
water	87:18	0:0	2	;
if	88:4	88:54	2	(ctx . last [ 0 ] == - 1)
cond	88:7	88:23	3	ctx . last [ 0 ] == - 1
water	88:7	0:0	4	ctx
op	88:10	0:0	4	.
water	88:11	0:0	4	last
op	88:15	0:0	4	[
water	88:16	0:0	4	0
op	88:17	0:0	4	]
op	88:19	0:0	4	==
op	88:22	0:0	4	-
water	88:23	0:0	4	1
stmts	88:26	88:54	3	
water	88:26	0:0	4	ctx
op	88:29	0:0	4	.
water	88:30	0:0	4	last
op	88:34	0:0	4	[
water	88:35	0:0	4	0
op	88:36	0:0	4	]
op	88:38	0:0	4	=
water	88:40	0:0	4	huff
op	88:44	0:0	4	.
water	88:45	0:0	4	current
op	88:52	0:0	4	++
water	88:54	0:0	4	;
if	89:4	89:54	2	(ctx . last [ 1 ] == - 1)
cond	89:7	89:23	3	ctx . last [ 1 ] == - 1
water	89:7	0:0	4	ctx
op	89:10	0:0	4	.
water	89:11	0:0	4	last
op	89:15	0:0	4	[
water	89:16	0:0	4	1
op	89:17	0:0	4	]
op	89:19	0:0	4	==
op	89:22	0:0	4	-
water	89:23	0:0	4	1
stmts	89:26	89:54	3	
water	89:26	0:0	4	ctx
op	89:29	0:0	4	.
water	89:30	0:0	4	last
op	89:34	0:0	4	[
water	89:35	0:0	4	1
op	89:36	0:0	4	]
op	89:38	0:0	4	=
water	89:40	0:0	4	huff
op	89:44	0:0	4	.
water	89:45	0:0	4	current
op	89:52	0:0	4	++
water	89:54	0:0	4	;
if	90:4	90:54	2	(ctx . last [ 2 ] == - 1)
cond	90:7	90:23	3	ctx . last [ 2 ] == - 1
water	90:7	0:0	4	ctx
op	90:10	0:0	4	.
water	90:11	0:0	4	last
op	90:15	0:0	4	[
water	90:16	0:0	4	2
op	90:17	0:0	4	]
op	90:19	0:0	4	==
op	90:22	0:0	4	-
water	90:23	0:0	4	1
stmts	90:26	90:54	3	
water	90:26	0:0	4	ctx
op	90:29	0:0	4	.
water	90:30	0:0	4	last
op	90:34	0:0	4	[
water	90:35	0:0	4	2
op	90:36	0:0	4	]
op	90:38	0:0	4	=
water	90:40	0:0	4	huff
op	90:44	0:0	4	.
water	90:45	0:0	4	current
op	90:52	0:0	4	++
water	90:54	0:0	4	;
op	92:4	0:0	2	*
water	92:5	0:0	2	recodes
op	92:13	0:0	2	=
water	92:15	0:0	2	huff
op	92:19	0:0	2	.
water	92:20	0:0	2	values
water	92:26	0:0	2	;
if	94:4	95:25	2	(vlc [ 0 ] . table)
cond	94:7	94:14	3	vlc [ 0 ] . table
water	94:7	0:0	4	vlc
op	94:10	0:0	4	[
water	94:11	0:0	4	0
op	94:12	0:0	4	]
op	94:13	0:0	4	.
water	94:14	0:0	4	table
stmts	95:8	95:25	3	
call	95:8	95:24	4	free_vlc
arg	95:17	95:24	5	&vlc[0]
op	95:17	0:0	6	&
water	95:18	0:0	6	vlc
op	95:21	0:0	6	[
water	95:22	0:0	6	0
op	95:23	0:0	6	]
water	95:25	0:0	4	;
if	96:4	97:25	2	(vlc [ 1 ] . table)
cond	96:7	96:14	3	vlc [ 1 ] . table
water	96:7	0:0	4	vlc
op	96:10	0:0	4	[
water	96:11	0:0	4	1
op	96:12	0:0	4	]
op	96:13	0:0	4	.
water	96:14	0:0	4	table
stmts	97:8	97:25	3	
call	97:8	97:24	4	free_vlc
arg	97:17	97:24	5	&vlc[1]
op	97:17	0:0	6	&
water	97:18	0:0	6	vlc
op	97:21	0:0	6	[
water	97:22	0:0	6	1
op	97:23	0:0	6	]
water	97:25	0:0	4	;
call	98:4	98:21	2	av_free
arg	98:12	98:21	3	tmp1.bits
water	98:12	0:0	4	tmp1
op	98:16	0:0	4	.
water	98:17	0:0	4	bits
water	98:22	0:0	2	;
call	99:4	99:24	2	av_free
arg	99:12	99:24	3	tmp1.lengths
water	99:12	0:0	4	tmp1
op	99:16	0:0	4	.
water	99:17	0:0	4	lengths
water	99:25	0:0	2	;
call	100:4	100:23	2	av_free
arg	100:12	100:23	3	tmp1.values
water	100:12	0:0	4	tmp1
op	100:16	0:0	4	.
water	100:17	0:0	4	values
water	100:24	0:0	2	;
call	101:4	101:21	2	av_free
arg	101:12	101:21	3	tmp2.bits
water	101:12	0:0	4	tmp2
op	101:16	0:0	4	.
water	101:17	0:0	4	bits
water	101:22	0:0	2	;
call	102:4	102:24	2	av_free
arg	102:12	102:24	3	tmp2.lengths
water	102:12	0:0	4	tmp2
op	102:16	0:0	4	.
water	102:17	0:0	4	lengths
water	102:25	0:0	2	;
call	103:4	103:23	2	av_free
arg	103:12	103:23	3	tmp2.values
water	103:12	0:0	4	tmp2
op	103:16	0:0	4	.
water	103:17	0:0	4	values
water	103:24	0:0	2	;
return	105:4	105:12	2	0
water	105:11	0:0	3	0
