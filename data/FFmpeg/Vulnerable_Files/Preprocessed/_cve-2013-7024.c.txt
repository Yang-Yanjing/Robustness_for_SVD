func	2:0	168:0	0	static int	jpeg2000_decode_tile
params	2:31	0:0	1	
param	2:32	2:57	2	Jpeg2000DecoderContext *	s
param	2:59	2:77	2	Jpeg2000Tile *	tile
param	3:32	3:48	2	AVFrame *	picture
stmnts	0:0	167:12	1	
decl	5:4	5:34	2	int	compno
water	5:14	0:0	2	,
decl	5:4	5:34	2	int	reslevelno
water	5:26	0:0	2	,
decl	5:4	5:34	2	int	bandno
decl	6:4	6:12	2	int	x
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	y
decl	8:4	8:17	2	uint8_t	*line
decl	9:4	9:24	2	Jpeg2000T1Context	t1
for	12:4	59:4	2	(compno = 0 ;compno < s -> ncomponents;compno ++)
forinit	12:9	12:19	3	compno = 0 ;
water	12:9	0:0	4	compno
op	12:16	0:0	4	=
water	12:18	0:0	4	0
water	12:19	0:0	4	;
cond	12:21	12:33	3	compno < s -> ncomponents
water	12:21	0:0	4	compno
op	12:28	0:0	4	<
water	12:30	0:0	4	s
op	12:31	0:0	4	->
water	12:33	0:0	4	ncomponents
forexpr	12:46	12:52	3	compno ++
water	12:46	0:0	4	compno
op	12:52	0:0	4	++
stmts	12:56	59:4	3	
water	12:56	0:0	4	{
decl	13:8	13:57	4	Jpeg2000Component	*comp
op	13:36	0:0	4	=
water	13:38	0:0	4	tile
op	13:42	0:0	4	->
water	13:44	0:0	4	comp
op	13:49	0:0	4	+
water	13:51	0:0	4	compno
decl	14:8	14:59	4	Jpeg2000CodingStyle	*codsty
op	14:36	0:0	4	=
water	14:38	0:0	4	tile
op	14:42	0:0	4	->
water	14:44	0:0	4	codsty
op	14:51	0:0	4	+
water	14:53	0:0	4	compno
for	17:8	55:8	4	(reslevelno = 0 ;reslevelno < codsty -> nreslevels2decode;reslevelno ++)
forinit	17:13	17:27	5	reslevelno = 0 ;
water	17:13	0:0	6	reslevelno
op	17:24	0:0	6	=
water	17:26	0:0	6	0
water	17:27	0:0	6	;
cond	17:29	17:50	5	reslevelno < codsty -> nreslevels2decode
water	17:29	0:0	6	reslevelno
op	17:40	0:0	6	<
water	17:42	0:0	6	codsty
op	17:48	0:0	6	->
water	17:50	0:0	6	nreslevels2decode
forexpr	17:69	17:79	5	reslevelno ++
water	17:69	0:0	6	reslevelno
op	17:79	0:0	6	++
stmts	17:83	55:8	5	
water	17:83	0:0	6	{
decl	18:12	18:66	6	Jpeg2000ResLevel	*rlevel
op	18:37	0:0	6	=
water	18:39	0:0	6	comp
op	18:43	0:0	6	->
water	18:45	0:0	6	reslevel
op	18:54	0:0	6	+
water	18:56	0:0	6	reslevelno
for	20:12	54:12	6	(bandno = 0 ;bandno < rlevel -> nbands;bandno ++)
forinit	20:17	20:27	7	bandno = 0 ;
water	20:17	0:0	8	bandno
op	20:24	0:0	8	=
water	20:26	0:0	8	0
water	20:27	0:0	8	;
cond	20:29	20:46	7	bandno < rlevel -> nbands
water	20:29	0:0	8	bandno
op	20:36	0:0	8	<
water	20:38	0:0	8	rlevel
op	20:44	0:0	8	->
water	20:46	0:0	8	nbands
forexpr	20:54	20:60	7	bandno ++
water	20:54	0:0	8	bandno
op	20:60	0:0	8	++
stmts	20:64	54:12	7	
water	20:64	0:0	8	{
decl	21:16	21:40	8	int	nb_precincts
water	21:32	0:0	8	,
decl	21:16	21:40	8	int	precno
decl	22:16	22:58	8	Jpeg2000Band	*band
op	22:35	0:0	8	=
water	22:37	0:0	8	rlevel
op	22:43	0:0	8	->
water	22:45	0:0	8	band
op	22:50	0:0	8	+
water	22:52	0:0	8	bandno
decl	23:16	23:39	8	int	cblkno
op	23:27	0:0	8	=
water	23:29	0:0	8	0
water	23:30	0:0	8	,
decl	23:16	23:39	8	int	bandpos
water	25:16	0:0	8	bandpos
op	25:24	0:0	8	=
water	25:26	0:0	8	bandno
op	25:33	0:0	8	+
water	25:35	0:0	8	(
water	25:36	0:0	8	reslevelno
op	25:47	0:0	8	>
water	25:49	0:0	8	0
water	25:50	0:0	8	)
water	25:51	0:0	8	;
if	27:16	29:28	8	(band -> coord [ 0 ] [ 0 ] == band -> coord [ 0 ] [ 1 ] || band -> coord [ 1 ] [ 0 ] == band -> coord [ 1 ] [ 1 ])
cond	27:20	28:57	9	band -> coord [ 0 ] [ 0 ] == band -> coord [ 0 ] [ 1 ] || band -> coord [ 1 ] [ 0 ] == band -> coord [ 1 ] [ 1 ]
water	27:20	0:0	10	band
op	27:24	0:0	10	->
water	27:26	0:0	10	coord
op	27:31	0:0	10	[
water	27:32	0:0	10	0
op	27:33	0:0	10	]
op	27:34	0:0	10	[
water	27:35	0:0	10	0
op	27:36	0:0	10	]
op	27:38	0:0	10	==
water	27:41	0:0	10	band
op	27:45	0:0	10	->
water	27:47	0:0	10	coord
op	27:52	0:0	10	[
water	27:53	0:0	10	0
op	27:54	0:0	10	]
op	27:55	0:0	10	[
water	27:56	0:0	10	1
op	27:57	0:0	10	]
op	27:59	0:0	10	||
water	28:20	0:0	10	band
op	28:24	0:0	10	->
water	28:26	0:0	10	coord
op	28:31	0:0	10	[
water	28:32	0:0	10	1
op	28:33	0:0	10	]
op	28:34	0:0	10	[
water	28:35	0:0	10	0
op	28:36	0:0	10	]
op	28:38	0:0	10	==
water	28:41	0:0	10	band
op	28:45	0:0	10	->
water	28:47	0:0	10	coord
op	28:52	0:0	10	[
water	28:53	0:0	10	1
op	28:54	0:0	10	]
op	28:55	0:0	10	[
water	28:56	0:0	10	1
op	28:57	0:0	10	]
stmts	29:20	29:28	9	
continue	29:20	29:28	10	
water	31:16	0:0	8	nb_precincts
op	31:29	0:0	8	=
water	31:31	0:0	8	rlevel
op	31:37	0:0	8	->
water	31:39	0:0	8	num_precincts_x
op	31:55	0:0	8	*
water	31:57	0:0	8	rlevel
op	31:63	0:0	8	->
water	31:65	0:0	8	num_precincts_y
water	31:80	0:0	8	;
for	33:16	53:16	8	(precno = 0 ;precno < nb_precincts;precno ++)
forinit	33:21	33:31	9	precno = 0 ;
water	33:21	0:0	10	precno
op	33:28	0:0	10	=
water	33:30	0:0	10	0
water	33:31	0:0	10	;
cond	33:33	33:42	9	precno < nb_precincts
water	33:33	0:0	10	precno
op	33:40	0:0	10	<
water	33:42	0:0	10	nb_precincts
forexpr	33:56	33:62	9	precno ++
water	33:56	0:0	10	precno
op	33:62	0:0	10	++
stmts	33:66	53:16	9	
water	33:66	0:0	10	{
decl	34:20	34:60	10	Jpeg2000Prec	*prec
op	34:39	0:0	10	=
water	34:41	0:0	10	band
op	34:45	0:0	10	->
water	34:47	0:0	10	prec
op	34:52	0:0	10	+
water	34:54	0:0	10	precno
for	37:20	52:19	10	(cblkno = 0 ;cblkno < prec -> nb_codeblocks_width * prec -> nb_codeblocks_height;cblkno ++)
forinit	37:25	37:35	11	cblkno = 0 ;
water	37:25	0:0	12	cblkno
op	37:32	0:0	12	=
water	37:34	0:0	12	0
water	37:35	0:0	12	;
cond	37:37	37:80	11	cblkno < prec -> nb_codeblocks_width * prec -> nb_codeblocks_height
water	37:37	0:0	12	cblkno
op	37:44	0:0	12	<
water	37:46	0:0	12	prec
op	37:50	0:0	12	->
water	37:52	0:0	12	nb_codeblocks_width
op	37:72	0:0	12	*
water	37:74	0:0	12	prec
op	37:78	0:0	12	->
water	37:80	0:0	12	nb_codeblocks_height
forexpr	37:102	37:108	11	cblkno ++
water	37:102	0:0	12	cblkno
op	37:108	0:0	12	++
stmts	37:112	52:19	11	
water	37:112	0:0	12	{
decl	38:24	38:32	12	int	x
water	38:29	0:0	12	,
decl	38:24	38:32	12	int	y
decl	39:24	39:64	12	Jpeg2000Cblk	*cblk
op	39:43	0:0	12	=
water	39:45	0:0	12	prec
op	39:49	0:0	12	->
water	39:51	0:0	12	cblk
op	39:56	0:0	12	+
water	39:58	0:0	12	cblkno
call	40:24	43:43	12	decode_cblk
arg	40:36	40:37	13	s
water	40:36	0:0	14	s
arg	40:39	40:45	13	codsty
water	40:39	0:0	14	codsty
arg	40:47	40:50	13	&t1
op	40:47	0:0	14	&
water	40:48	0:0	14	t1
arg	40:52	40:56	13	cblk
water	40:52	0:0	14	cblk
arg	41:36	41:73	13	cblk->coord[0][1]-cblk->coord[0][0]
water	41:36	0:0	14	cblk
op	41:40	0:0	14	->
water	41:42	0:0	14	coord
op	41:47	0:0	14	[
water	41:48	0:0	14	0
op	41:49	0:0	14	]
op	41:50	0:0	14	[
water	41:51	0:0	14	1
op	41:52	0:0	14	]
op	41:54	0:0	14	-
water	41:56	0:0	14	cblk
op	41:60	0:0	14	->
water	41:62	0:0	14	coord
op	41:67	0:0	14	[
water	41:68	0:0	14	0
op	41:69	0:0	14	]
op	41:70	0:0	14	[
water	41:71	0:0	14	0
op	41:72	0:0	14	]
arg	42:36	42:73	13	cblk->coord[1][1]-cblk->coord[1][0]
water	42:36	0:0	14	cblk
op	42:40	0:0	14	->
water	42:42	0:0	14	coord
op	42:47	0:0	14	[
water	42:48	0:0	14	1
op	42:49	0:0	14	]
op	42:50	0:0	14	[
water	42:51	0:0	14	1
op	42:52	0:0	14	]
op	42:54	0:0	14	-
water	42:56	0:0	14	cblk
op	42:60	0:0	14	->
water	42:62	0:0	14	coord
op	42:67	0:0	14	[
water	42:68	0:0	14	1
op	42:69	0:0	14	]
op	42:70	0:0	14	[
water	42:71	0:0	14	0
op	42:72	0:0	14	]
arg	43:36	43:43	13	bandpos
water	43:36	0:0	14	bandpos
water	43:44	0:0	12	;
water	45:24	0:0	12	x
op	45:26	0:0	12	=
water	45:28	0:0	12	cblk
op	45:32	0:0	12	->
water	45:34	0:0	12	coord
op	45:39	0:0	12	[
water	45:40	0:0	12	0
op	45:41	0:0	12	]
op	45:42	0:0	12	[
water	45:43	0:0	12	0
op	45:44	0:0	12	]
water	45:45	0:0	12	;
water	46:24	0:0	12	y
op	46:26	0:0	12	=
water	46:28	0:0	12	cblk
op	46:32	0:0	12	->
water	46:34	0:0	12	coord
op	46:39	0:0	12	[
water	46:40	0:0	12	1
op	46:41	0:0	12	]
op	46:42	0:0	12	[
water	46:43	0:0	12	0
op	46:44	0:0	12	]
water	46:45	0:0	12	;
if	48:24	49:77	12	(codsty -> transform == FF_DWT97)
cond	48:28	48:49	13	codsty -> transform == FF_DWT97
water	48:28	0:0	14	codsty
op	48:34	0:0	14	->
water	48:36	0:0	14	transform
op	48:46	0:0	14	==
water	48:49	0:0	14	FF_DWT97
stmts	49:28	49:77	13	
call	49:28	49:76	14	dequantization_float
arg	49:49	49:50	15	x
water	49:49	0:0	16	x
arg	49:52	49:53	15	y
water	49:52	0:0	16	y
arg	49:55	49:59	15	cblk
water	49:55	0:0	16	cblk
arg	49:61	49:65	15	comp
water	49:61	0:0	16	comp
arg	49:67	49:70	15	&t1
op	49:67	0:0	16	&
water	49:68	0:0	16	t1
arg	49:72	49:76	15	band
water	49:72	0:0	16	band
water	49:77	0:0	14	;
else	50:24	51:75	12
stmts	51:28	51:75	13	
call	51:28	51:74	14	dequantization_int
arg	51:47	51:48	15	x
water	51:47	0:0	16	x
arg	51:50	51:51	15	y
water	51:50	0:0	16	y
arg	51:53	51:57	15	cblk
water	51:53	0:0	16	cblk
arg	51:59	51:63	15	comp
water	51:59	0:0	16	comp
arg	51:65	51:68	15	&t1
op	51:65	0:0	16	&
water	51:66	0:0	16	t1
arg	51:70	51:74	15	band
water	51:70	0:0	16	band
water	51:75	0:0	14	;
water	52:19	0:0	12	}
water	53:16	0:0	10	}
water	54:12	0:0	8	}
water	55:8	0:0	6	}
call	58:8	58:107	4	ff_dwt_decode
arg	58:22	58:32	5	&comp->dwt
op	58:22	0:0	6	&
water	58:23	0:0	6	comp
op	58:27	0:0	6	->
water	58:29	0:0	6	dwt
arg	58:34	58:107	5	codsty->transform==FF_DWT97?(void*)comp->f_data:(void*)comp->i_data
water	58:34	0:0	6	codsty
op	58:40	0:0	6	->
water	58:42	0:0	6	transform
op	58:52	0:0	6	==
water	58:55	0:0	6	FF_DWT97
water	58:64	0:0	6	?
water	58:66	0:0	6	(
water	58:67	0:0	6	void
op	58:71	0:0	6	*
water	58:72	0:0	6	)
water	58:73	0:0	6	comp
op	58:77	0:0	6	->
water	58:79	0:0	6	f_data
water	58:86	0:0	6	:
water	58:88	0:0	6	(
water	58:89	0:0	6	void
op	58:93	0:0	6	*
water	58:94	0:0	6	)
water	58:95	0:0	6	comp
op	58:99	0:0	6	->
water	58:101	0:0	6	i_data
water	58:108	0:0	4	;
water	59:4	0:0	4	}
if	62:4	63:27	2	(tile -> codsty [ 0 ] . mct)
cond	62:8	62:24	3	tile -> codsty [ 0 ] . mct
water	62:8	0:0	4	tile
op	62:12	0:0	4	->
water	62:14	0:0	4	codsty
op	62:20	0:0	4	[
water	62:21	0:0	4	0
op	62:22	0:0	4	]
op	62:23	0:0	4	.
water	62:24	0:0	4	mct
stmts	63:8	63:27	3	
call	63:8	63:26	4	mct_decode
arg	63:19	63:20	5	s
water	63:19	0:0	6	s
arg	63:22	63:26	5	tile
water	63:22	0:0	6	tile
water	63:27	0:0	4	;
if	65:4	70:4	2	(s -> cdef [ 0 ] < 0)
cond	65:8	65:21	3	s -> cdef [ 0 ] < 0
water	65:8	0:0	4	s
op	65:9	0:0	4	->
water	65:11	0:0	4	cdef
op	65:15	0:0	4	[
water	65:16	0:0	4	0
op	65:17	0:0	4	]
op	65:19	0:0	4	<
water	65:21	0:0	4	0
stmts	65:24	70:4	3	
water	65:24	0:0	4	{
for	66:8	67:30	4	(x = 0 ;x < s -> ncomponents;x ++)
forinit	66:13	66:18	5	x = 0 ;
water	66:13	0:0	6	x
op	66:15	0:0	6	=
water	66:17	0:0	6	0
water	66:18	0:0	6	;
cond	66:20	66:27	5	x < s -> ncomponents
water	66:20	0:0	6	x
op	66:22	0:0	6	<
water	66:24	0:0	6	s
op	66:25	0:0	6	->
water	66:27	0:0	6	ncomponents
forexpr	66:40	66:41	5	x ++
water	66:40	0:0	6	x
op	66:41	0:0	6	++
stmts	67:12	67:30	5	
water	67:12	0:0	6	s
op	67:13	0:0	6	->
water	67:15	0:0	6	cdef
op	67:19	0:0	6	[
water	67:20	0:0	6	x
op	67:21	0:0	6	]
op	67:23	0:0	6	=
water	67:25	0:0	6	x
op	67:27	0:0	6	+
water	67:29	0:0	6	1
water	67:30	0:0	6	;
if	68:8	69:41	4	(( s -> ncomponents & 1 ) == 0)
cond	68:12	68:36	5	( s -> ncomponents & 1 ) == 0
water	68:12	0:0	6	(
water	68:13	0:0	6	s
op	68:14	0:0	6	->
water	68:16	0:0	6	ncomponents
op	68:28	0:0	6	&
water	68:30	0:0	6	1
water	68:31	0:0	6	)
op	68:33	0:0	6	==
water	68:36	0:0	6	0
stmts	69:12	69:41	5	
water	69:12	0:0	6	s
op	69:13	0:0	6	->
water	69:15	0:0	6	cdef
op	69:19	0:0	6	[
water	69:20	0:0	6	s
op	69:21	0:0	6	->
water	69:23	0:0	6	ncomponents
op	69:34	0:0	6	-
water	69:35	0:0	6	1
op	69:36	0:0	6	]
op	69:38	0:0	6	=
water	69:40	0:0	6	0
water	69:41	0:0	6	;
water	70:4	0:0	4	}
if	72:4	118:4	2	(s -> precision <= 8)
cond	72:8	72:24	3	s -> precision <= 8
water	72:8	0:0	4	s
op	72:9	0:0	4	->
water	72:11	0:0	4	precision
op	72:21	0:0	4	<=
water	72:24	0:0	4	8
stmts	72:27	118:4	3	
water	72:27	0:0	4	{
for	73:8	117:8	4	(compno = 0 ;compno < s -> ncomponents;compno ++)
forinit	73:13	73:23	5	compno = 0 ;
water	73:13	0:0	6	compno
op	73:20	0:0	6	=
water	73:22	0:0	6	0
water	73:23	0:0	6	;
cond	73:25	73:37	5	compno < s -> ncomponents
water	73:25	0:0	6	compno
op	73:32	0:0	6	<
water	73:34	0:0	6	s
op	73:35	0:0	6	->
water	73:37	0:0	6	ncomponents
forexpr	73:50	73:56	5	compno ++
water	73:50	0:0	6	compno
op	73:56	0:0	6	++
stmts	73:60	117:8	5	
water	73:60	0:0	6	{
decl	74:12	74:57	6	Jpeg2000Component	*comp
op	74:36	0:0	6	=
water	74:38	0:0	6	tile
op	74:42	0:0	6	->
water	74:44	0:0	6	comp
op	74:49	0:0	6	+
water	74:51	0:0	6	compno
decl	75:12	75:63	6	Jpeg2000CodingStyle	*codsty
op	75:40	0:0	6	=
water	75:42	0:0	6	tile
op	75:46	0:0	6	->
water	75:48	0:0	6	codsty
op	75:55	0:0	6	+
water	75:57	0:0	6	compno
decl	76:12	76:39	6	float	*datap
op	76:25	0:0	6	=
water	76:27	0:0	6	comp
op	76:31	0:0	6	->
water	76:33	0:0	6	f_data
decl	77:12	77:43	6	int32_t	*i_datap
op	77:29	0:0	6	=
water	77:31	0:0	6	comp
op	77:35	0:0	6	->
water	77:37	0:0	6	i_data
decl	78:12	78:38	6	int	cbps
op	78:21	0:0	6	=
water	78:23	0:0	6	s
op	78:24	0:0	6	->
water	78:26	0:0	6	cbps
op	78:30	0:0	6	[
water	78:31	0:0	6	compno
op	78:37	0:0	6	]
decl	79:12	79:70	6	int	w
op	79:18	0:0	6	=
water	79:20	0:0	6	tile
op	79:24	0:0	6	->
water	79:26	0:0	6	comp
op	79:30	0:0	6	[
water	79:31	0:0	6	compno
op	79:37	0:0	6	]
op	79:38	0:0	6	.
water	79:39	0:0	6	coord
op	79:44	0:0	6	[
water	79:45	0:0	6	0
op	79:46	0:0	6	]
op	79:47	0:0	6	[
water	79:48	0:0	6	1
op	79:49	0:0	6	]
op	79:51	0:0	6	-
water	79:53	0:0	6	s
op	79:54	0:0	6	->
water	79:56	0:0	6	image_offset_x
decl	80:12	80:43	6	int	planar
op	80:23	0:0	6	=
op	80:25	0:0	6	!
op	80:26	0:0	6	!
water	80:27	0:0	6	picture
op	80:34	0:0	6	->
water	80:36	0:0	6	data
op	80:40	0:0	6	[
water	80:41	0:0	6	2
op	80:42	0:0	6	]
decl	81:12	81:55	6	int	pixelsize
op	81:26	0:0	6	=
water	81:28	0:0	6	planar
water	81:35	0:0	6	?
water	81:37	0:0	6	1
water	81:39	0:0	6	:
water	81:41	0:0	6	s
op	81:42	0:0	6	->
water	81:44	0:0	6	ncomponents
decl	82:12	82:25	6	int	plane
op	82:22	0:0	6	=
water	82:24	0:0	6	0
if	84:12	85:80	6	(planar)
cond	84:16	84:16	7	planar
water	84:16	0:0	8	planar
stmts	85:16	85:80	7	
water	85:16	0:0	8	plane
op	85:22	0:0	8	=
water	85:24	0:0	8	s
op	85:25	0:0	8	->
water	85:27	0:0	8	cdef
op	85:31	0:0	8	[
water	85:32	0:0	8	compno
op	85:38	0:0	8	]
water	85:40	0:0	8	?
water	85:42	0:0	8	s
op	85:43	0:0	8	->
water	85:45	0:0	8	cdef
op	85:49	0:0	8	[
water	85:50	0:0	8	compno
op	85:56	0:0	8	]
op	85:57	0:0	8	-
water	85:58	0:0	8	1
water	85:60	0:0	8	:
water	85:62	0:0	8	(
water	85:63	0:0	8	s
op	85:64	0:0	8	->
water	85:66	0:0	8	ncomponents
op	85:77	0:0	8	-
water	85:78	0:0	8	1
water	85:79	0:0	8	)
water	85:80	0:0	8	;
water	88:12	0:0	6	y
op	88:17	0:0	6	=
water	88:19	0:0	6	tile
op	88:23	0:0	6	->
water	88:25	0:0	6	comp
op	88:29	0:0	6	[
water	88:30	0:0	6	compno
op	88:36	0:0	6	]
op	88:37	0:0	6	.
water	88:38	0:0	6	coord
op	88:43	0:0	6	[
water	88:44	0:0	6	1
op	88:45	0:0	6	]
op	88:46	0:0	6	[
water	88:47	0:0	6	0
op	88:48	0:0	6	]
op	88:50	0:0	6	-
water	88:52	0:0	6	s
op	88:53	0:0	6	->
water	88:55	0:0	6	image_offset_y
water	88:69	0:0	6	;
water	89:12	0:0	6	line
op	89:17	0:0	6	=
water	89:19	0:0	6	picture
op	89:26	0:0	6	->
water	89:28	0:0	6	data
op	89:32	0:0	6	[
water	89:33	0:0	6	plane
op	89:38	0:0	6	]
op	89:40	0:0	6	+
water	89:42	0:0	6	y
op	89:44	0:0	6	*
water	89:46	0:0	6	picture
op	89:53	0:0	6	->
water	89:55	0:0	6	linesize
op	89:63	0:0	6	[
water	89:64	0:0	6	plane
op	89:69	0:0	6	]
water	89:70	0:0	6	;
for	90:12	116:12	6	(;y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y;y += s -> cdy [ compno ])
forinit	90:17	90:17	7	;
water	90:17	0:0	8	;
cond	90:19	90:59	7	y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y
water	90:19	0:0	8	y
op	90:21	0:0	8	<
water	90:23	0:0	8	tile
op	90:27	0:0	8	->
water	90:29	0:0	8	comp
op	90:33	0:0	8	[
water	90:34	0:0	8	compno
op	90:40	0:0	8	]
op	90:41	0:0	8	.
water	90:42	0:0	8	coord
op	90:47	0:0	8	[
water	90:48	0:0	8	1
op	90:49	0:0	8	]
op	90:50	0:0	8	[
water	90:51	0:0	8	1
op	90:52	0:0	8	]
op	90:54	0:0	8	-
water	90:56	0:0	8	s
op	90:57	0:0	8	->
water	90:59	0:0	8	image_offset_y
forexpr	90:75	90:93	7	y += s -> cdy [ compno ]
water	90:75	0:0	8	y
op	90:77	0:0	8	+=
water	90:80	0:0	8	s
op	90:81	0:0	8	->
water	90:83	0:0	8	cdy
op	90:86	0:0	8	[
water	90:87	0:0	8	compno
op	90:93	0:0	8	]
stmts	90:96	116:12	7	
water	90:96	0:0	8	{
decl	91:16	91:28	8	uint8_t	*dst
water	93:16	0:0	8	x
op	93:20	0:0	8	=
water	93:22	0:0	8	tile
op	93:26	0:0	8	->
water	93:28	0:0	8	comp
op	93:32	0:0	8	[
water	93:33	0:0	8	compno
op	93:39	0:0	8	]
op	93:40	0:0	8	.
water	93:41	0:0	8	coord
op	93:46	0:0	8	[
water	93:47	0:0	8	0
op	93:48	0:0	8	]
op	93:49	0:0	8	[
water	93:50	0:0	8	0
op	93:51	0:0	8	]
op	93:53	0:0	8	-
water	93:55	0:0	8	s
op	93:56	0:0	8	->
water	93:58	0:0	8	image_offset_x
water	93:72	0:0	8	;
water	94:16	0:0	8	dst
op	94:20	0:0	8	=
water	94:22	0:0	8	line
op	94:27	0:0	8	+
water	94:29	0:0	8	x
op	94:31	0:0	8	*
water	94:33	0:0	8	pixelsize
op	94:43	0:0	8	+
water	94:45	0:0	8	compno
op	94:51	0:0	8	*
op	94:52	0:0	8	!
water	94:53	0:0	8	planar
water	94:59	0:0	8	;
if	96:16	105:16	8	(codsty -> transform == FF_DWT97)
cond	96:20	96:41	9	codsty -> transform == FF_DWT97
water	96:20	0:0	10	codsty
op	96:26	0:0	10	->
water	96:28	0:0	10	transform
op	96:38	0:0	10	==
water	96:41	0:0	10	FF_DWT97
stmts	96:51	105:16	9	
water	96:51	0:0	10	{
for	97:20	104:20	10	(;x < w;x += s -> cdx [ compno ])
forinit	97:25	97:25	11	;
water	97:25	0:0	12	;
cond	97:27	97:31	11	x < w
water	97:27	0:0	12	x
op	97:29	0:0	12	<
water	97:31	0:0	12	w
forexpr	97:34	97:52	11	x += s -> cdx [ compno ]
water	97:34	0:0	12	x
op	97:36	0:0	12	+=
water	97:39	0:0	12	s
op	97:40	0:0	12	->
water	97:42	0:0	12	cdx
op	97:45	0:0	12	[
water	97:46	0:0	12	compno
op	97:52	0:0	12	]
stmts	97:55	104:20	11	
water	97:55	0:0	12	{
decl	98:24	98:68	12	int	val
op	98:32	0:0	12	=
call	98:34	98:47	13	lrintf
arg	98:41	98:47	14	*datap
op	98:41	0:0	15	*
water	98:42	0:0	15	datap
op	98:49	0:0	12	+
water	98:51	0:0	12	(
water	98:52	0:0	12	1
op	98:54	0:0	12	<<
water	98:57	0:0	12	(
water	98:58	0:0	12	cbps
op	98:63	0:0	12	-
water	98:65	0:0	12	1
water	98:66	0:0	12	)
water	98:67	0:0	12	)
water	100:24	0:0	12	val
op	100:28	0:0	12	=
call	100:30	100:61	12	av_clip
arg	100:38	100:41	13	val
water	100:38	0:0	14	val
arg	100:43	100:44	13	0
water	100:43	0:0	14	0
arg	100:46	100:61	13	(1<<cbps)-1
water	100:46	0:0	14	(
water	100:47	0:0	14	1
op	100:49	0:0	14	<<
water	100:52	0:0	14	cbps
water	100:56	0:0	14	)
op	100:58	0:0	14	-
water	100:60	0:0	14	1
water	100:62	0:0	12	;
op	101:24	0:0	12	*
water	101:25	0:0	12	dst
op	101:29	0:0	12	=
water	101:31	0:0	12	val
op	101:35	0:0	12	<<
water	101:38	0:0	12	(
water	101:39	0:0	12	8
op	101:41	0:0	12	-
water	101:43	0:0	12	cbps
water	101:47	0:0	12	)
water	101:48	0:0	12	;
water	102:24	0:0	12	datap
op	102:29	0:0	12	++
water	102:31	0:0	12	;
water	103:24	0:0	12	dst
op	103:28	0:0	12	+=
water	103:31	0:0	12	pixelsize
water	103:40	0:0	12	;
water	104:20	0:0	12	}
water	105:16	0:0	10	}
else	105:18	114:16	8
stmts	105:23	114:16	9	
water	105:23	0:0	10	{
for	106:20	113:20	10	(;x < w;x += s -> cdx [ compno ])
forinit	106:25	106:25	11	;
water	106:25	0:0	12	;
cond	106:27	106:31	11	x < w
water	106:27	0:0	12	x
op	106:29	0:0	12	<
water	106:31	0:0	12	w
forexpr	106:34	106:52	11	x += s -> cdx [ compno ]
water	106:34	0:0	12	x
op	106:36	0:0	12	+=
water	106:39	0:0	12	s
op	106:40	0:0	12	->
water	106:42	0:0	12	cdx
op	106:45	0:0	12	[
water	106:46	0:0	12	compno
op	106:52	0:0	12	]
stmts	106:55	113:20	11	
water	106:55	0:0	12	{
decl	107:24	107:62	12	int	val
op	107:32	0:0	12	=
op	107:34	0:0	12	*
water	107:35	0:0	12	i_datap
op	107:43	0:0	12	+
water	107:45	0:0	12	(
water	107:46	0:0	12	1
op	107:48	0:0	12	<<
water	107:51	0:0	12	(
water	107:52	0:0	12	cbps
op	107:57	0:0	12	-
water	107:59	0:0	12	1
water	107:60	0:0	12	)
water	107:61	0:0	12	)
water	109:24	0:0	12	val
op	109:28	0:0	12	=
call	109:30	109:61	12	av_clip
arg	109:38	109:41	13	val
water	109:38	0:0	14	val
arg	109:43	109:44	13	0
water	109:43	0:0	14	0
arg	109:46	109:61	13	(1<<cbps)-1
water	109:46	0:0	14	(
water	109:47	0:0	14	1
op	109:49	0:0	14	<<
water	109:52	0:0	14	cbps
water	109:56	0:0	14	)
op	109:58	0:0	14	-
water	109:60	0:0	14	1
water	109:62	0:0	12	;
op	110:24	0:0	12	*
water	110:25	0:0	12	dst
op	110:29	0:0	12	=
water	110:31	0:0	12	val
op	110:35	0:0	12	<<
water	110:38	0:0	12	(
water	110:39	0:0	12	8
op	110:41	0:0	12	-
water	110:43	0:0	12	cbps
water	110:47	0:0	12	)
water	110:48	0:0	12	;
water	111:24	0:0	12	i_datap
op	111:31	0:0	12	++
water	111:33	0:0	12	;
water	112:24	0:0	12	dst
op	112:28	0:0	12	+=
water	112:31	0:0	12	pixelsize
water	112:40	0:0	12	;
water	113:20	0:0	12	}
water	114:16	0:0	10	}
water	115:16	0:0	8	line
op	115:21	0:0	8	+=
water	115:24	0:0	8	picture
op	115:31	0:0	8	->
water	115:33	0:0	8	linesize
op	115:41	0:0	8	[
water	115:42	0:0	8	plane
op	115:47	0:0	8	]
water	115:48	0:0	8	;
water	116:12	0:0	8	}
water	117:8	0:0	6	}
water	118:4	0:0	4	}
else	118:6	165:4	2
stmts	118:11	165:4	3	
water	118:11	0:0	4	{
for	119:8	164:8	4	(compno = 0 ;compno < s -> ncomponents;compno ++)
forinit	119:13	119:23	5	compno = 0 ;
water	119:13	0:0	6	compno
op	119:20	0:0	6	=
water	119:22	0:0	6	0
water	119:23	0:0	6	;
cond	119:25	119:37	5	compno < s -> ncomponents
water	119:25	0:0	6	compno
op	119:32	0:0	6	<
water	119:34	0:0	6	s
op	119:35	0:0	6	->
water	119:37	0:0	6	ncomponents
forexpr	119:50	119:56	5	compno ++
water	119:50	0:0	6	compno
op	119:56	0:0	6	++
stmts	119:60	164:8	5	
water	119:60	0:0	6	{
decl	120:12	120:57	6	Jpeg2000Component	*comp
op	120:36	0:0	6	=
water	120:38	0:0	6	tile
op	120:42	0:0	6	->
water	120:44	0:0	6	comp
op	120:49	0:0	6	+
water	120:51	0:0	6	compno
decl	121:12	121:63	6	Jpeg2000CodingStyle	*codsty
op	121:40	0:0	6	=
water	121:42	0:0	6	tile
op	121:46	0:0	6	->
water	121:48	0:0	6	codsty
op	121:55	0:0	6	+
water	121:57	0:0	6	compno
decl	122:12	122:39	6	float	*datap
op	122:25	0:0	6	=
water	122:27	0:0	6	comp
op	122:31	0:0	6	->
water	122:33	0:0	6	f_data
decl	123:12	123:43	6	int32_t	*i_datap
op	123:29	0:0	6	=
water	123:31	0:0	6	comp
op	123:35	0:0	6	->
water	123:37	0:0	6	i_data
decl	124:12	124:27	6	uint16_t	*linel
decl	125:12	125:38	6	int	cbps
op	125:21	0:0	6	=
water	125:23	0:0	6	s
op	125:24	0:0	6	->
water	125:26	0:0	6	cbps
op	125:30	0:0	6	[
water	125:31	0:0	6	compno
op	125:37	0:0	6	]
decl	126:12	126:70	6	int	w
op	126:18	0:0	6	=
water	126:20	0:0	6	tile
op	126:24	0:0	6	->
water	126:26	0:0	6	comp
op	126:30	0:0	6	[
water	126:31	0:0	6	compno
op	126:37	0:0	6	]
op	126:38	0:0	6	.
water	126:39	0:0	6	coord
op	126:44	0:0	6	[
water	126:45	0:0	6	0
op	126:46	0:0	6	]
op	126:47	0:0	6	[
water	126:48	0:0	6	1
op	126:49	0:0	6	]
op	126:51	0:0	6	-
water	126:53	0:0	6	s
op	126:54	0:0	6	->
water	126:56	0:0	6	image_offset_x
decl	127:12	127:43	6	int	planar
op	127:23	0:0	6	=
op	127:25	0:0	6	!
op	127:26	0:0	6	!
water	127:27	0:0	6	picture
op	127:34	0:0	6	->
water	127:36	0:0	6	data
op	127:40	0:0	6	[
water	127:41	0:0	6	2
op	127:42	0:0	6	]
decl	128:12	128:55	6	int	pixelsize
op	128:26	0:0	6	=
water	128:28	0:0	6	planar
water	128:35	0:0	6	?
water	128:37	0:0	6	1
water	128:39	0:0	6	:
water	128:41	0:0	6	s
op	128:42	0:0	6	->
water	128:44	0:0	6	ncomponents
decl	129:12	129:25	6	int	plane
op	129:22	0:0	6	=
water	129:24	0:0	6	0
if	131:12	132:80	6	(planar)
cond	131:16	131:16	7	planar
water	131:16	0:0	8	planar
stmts	132:16	132:80	7	
water	132:16	0:0	8	plane
op	132:22	0:0	8	=
water	132:24	0:0	8	s
op	132:25	0:0	8	->
water	132:27	0:0	8	cdef
op	132:31	0:0	8	[
water	132:32	0:0	8	compno
op	132:38	0:0	8	]
water	132:40	0:0	8	?
water	132:42	0:0	8	s
op	132:43	0:0	8	->
water	132:45	0:0	8	cdef
op	132:49	0:0	8	[
water	132:50	0:0	8	compno
op	132:56	0:0	8	]
op	132:57	0:0	8	-
water	132:58	0:0	8	1
water	132:60	0:0	8	:
water	132:62	0:0	8	(
water	132:63	0:0	8	s
op	132:64	0:0	8	->
water	132:66	0:0	8	ncomponents
op	132:77	0:0	8	-
water	132:78	0:0	8	1
water	132:79	0:0	8	)
water	132:80	0:0	8	;
water	134:12	0:0	6	y
op	134:18	0:0	6	=
water	134:20	0:0	6	tile
op	134:24	0:0	6	->
water	134:26	0:0	6	comp
op	134:30	0:0	6	[
water	134:31	0:0	6	compno
op	134:37	0:0	6	]
op	134:38	0:0	6	.
water	134:39	0:0	6	coord
op	134:44	0:0	6	[
water	134:45	0:0	6	1
op	134:46	0:0	6	]
op	134:47	0:0	6	[
water	134:48	0:0	6	0
op	134:49	0:0	6	]
op	134:51	0:0	6	-
water	134:53	0:0	6	s
op	134:54	0:0	6	->
water	134:56	0:0	6	image_offset_y
water	134:70	0:0	6	;
water	135:12	0:0	6	linel
op	135:18	0:0	6	=
water	135:20	0:0	6	(
water	135:21	0:0	6	uint16_t
op	135:30	0:0	6	*
water	135:31	0:0	6	)
water	135:32	0:0	6	picture
op	135:39	0:0	6	->
water	135:41	0:0	6	data
op	135:45	0:0	6	[
water	135:46	0:0	6	plane
op	135:51	0:0	6	]
op	135:53	0:0	6	+
water	135:55	0:0	6	y
op	135:57	0:0	6	*
water	135:59	0:0	6	(
water	135:60	0:0	6	picture
op	135:67	0:0	6	->
water	135:69	0:0	6	linesize
op	135:77	0:0	6	[
water	135:78	0:0	6	plane
op	135:83	0:0	6	]
op	135:85	0:0	6	>>
water	135:88	0:0	6	1
water	135:89	0:0	6	)
water	135:90	0:0	6	;
for	136:12	163:12	6	(;y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y;y += s -> cdy [ compno ])
forinit	136:17	136:17	7	;
water	136:17	0:0	8	;
cond	136:19	136:59	7	y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y
water	136:19	0:0	8	y
op	136:21	0:0	8	<
water	136:23	0:0	8	tile
op	136:27	0:0	8	->
water	136:29	0:0	8	comp
op	136:33	0:0	8	[
water	136:34	0:0	8	compno
op	136:40	0:0	8	]
op	136:41	0:0	8	.
water	136:42	0:0	8	coord
op	136:47	0:0	8	[
water	136:48	0:0	8	1
op	136:49	0:0	8	]
op	136:50	0:0	8	[
water	136:51	0:0	8	1
op	136:52	0:0	8	]
op	136:54	0:0	8	-
water	136:56	0:0	8	s
op	136:57	0:0	8	->
water	136:59	0:0	8	image_offset_y
forexpr	136:75	136:93	7	y += s -> cdy [ compno ]
water	136:75	0:0	8	y
op	136:77	0:0	8	+=
water	136:80	0:0	8	s
op	136:81	0:0	8	->
water	136:83	0:0	8	cdy
op	136:86	0:0	8	[
water	136:87	0:0	8	compno
op	136:93	0:0	8	]
stmts	136:96	163:12	7	
water	136:96	0:0	8	{
decl	137:16	137:29	8	uint16_t	*dst
water	139:16	0:0	8	x
op	139:20	0:0	8	=
water	139:22	0:0	8	tile
op	139:26	0:0	8	->
water	139:28	0:0	8	comp
op	139:32	0:0	8	[
water	139:33	0:0	8	compno
op	139:39	0:0	8	]
op	139:40	0:0	8	.
water	139:41	0:0	8	coord
op	139:46	0:0	8	[
water	139:47	0:0	8	0
op	139:48	0:0	8	]
op	139:49	0:0	8	[
water	139:50	0:0	8	0
op	139:51	0:0	8	]
op	139:53	0:0	8	-
water	139:55	0:0	8	s
op	139:56	0:0	8	->
water	139:58	0:0	8	image_offset_x
water	139:72	0:0	8	;
water	140:16	0:0	8	dst
op	140:20	0:0	8	=
water	140:22	0:0	8	linel
op	140:28	0:0	8	+
water	140:30	0:0	8	(
water	140:31	0:0	8	x
op	140:33	0:0	8	*
water	140:35	0:0	8	pixelsize
op	140:45	0:0	8	+
water	140:47	0:0	8	compno
op	140:53	0:0	8	*
op	140:54	0:0	8	!
water	140:55	0:0	8	planar
water	140:61	0:0	8	)
water	140:62	0:0	8	;
if	141:16	151:16	8	(codsty -> transform == FF_DWT97)
cond	141:20	141:41	9	codsty -> transform == FF_DWT97
water	141:20	0:0	10	codsty
op	141:26	0:0	10	->
water	141:28	0:0	10	transform
op	141:38	0:0	10	==
water	141:41	0:0	10	FF_DWT97
stmts	141:51	151:16	9	
water	141:51	0:0	10	{
for	142:20	150:20	10	(;x < w;x += s -> cdx [ compno ])
forinit	142:25	142:25	11	;
water	142:25	0:0	12	;
cond	142:27	142:31	11	x < w
water	142:27	0:0	12	x
op	142:29	0:0	12	<
water	142:31	0:0	12	w
forexpr	142:34	142:53	11	x += s -> cdx [ compno ]
water	142:34	0:0	12	x
op	142:36	0:0	12	+=
water	142:39	0:0	12	s
op	142:40	0:0	12	->
water	142:43	0:0	12	cdx
op	142:46	0:0	12	[
water	142:47	0:0	12	compno
op	142:53	0:0	12	]
stmts	142:56	150:20	11	
water	142:56	0:0	12	{
decl	143:24	143:69	12	int	val
op	143:33	0:0	12	=
call	143:35	143:48	13	lrintf
arg	143:42	143:48	14	*datap
op	143:42	0:0	15	*
water	143:43	0:0	15	datap
op	143:50	0:0	12	+
water	143:52	0:0	12	(
water	143:53	0:0	12	1
op	143:55	0:0	12	<<
water	143:58	0:0	12	(
water	143:59	0:0	12	cbps
op	143:64	0:0	12	-
water	143:66	0:0	12	1
water	143:67	0:0	12	)
water	143:68	0:0	12	)
water	145:24	0:0	12	val
op	145:28	0:0	12	=
call	145:30	145:61	12	av_clip
arg	145:38	145:41	13	val
water	145:38	0:0	14	val
arg	145:43	145:44	13	0
water	145:43	0:0	14	0
arg	145:46	145:61	13	(1<<cbps)-1
water	145:46	0:0	14	(
water	145:47	0:0	14	1
op	145:49	0:0	14	<<
water	145:52	0:0	14	cbps
water	145:56	0:0	14	)
op	145:58	0:0	14	-
water	145:60	0:0	14	1
water	145:62	0:0	12	;
op	147:24	0:0	12	*
water	147:25	0:0	12	dst
op	147:29	0:0	12	=
water	147:31	0:0	12	val
op	147:35	0:0	12	<<
water	147:38	0:0	12	(
water	147:39	0:0	12	16
op	147:42	0:0	12	-
water	147:44	0:0	12	cbps
water	147:48	0:0	12	)
water	147:49	0:0	12	;
water	148:24	0:0	12	datap
op	148:29	0:0	12	++
water	148:31	0:0	12	;
water	149:24	0:0	12	dst
op	149:28	0:0	12	+=
water	149:31	0:0	12	pixelsize
water	149:40	0:0	12	;
water	150:20	0:0	12	}
water	151:16	0:0	10	}
else	151:18	161:16	8
stmts	151:23	161:16	9	
water	151:23	0:0	10	{
for	152:20	160:20	10	(;x < w;x += s -> cdx [ compno ])
forinit	152:25	152:25	11	;
water	152:25	0:0	12	;
cond	152:27	152:31	11	x < w
water	152:27	0:0	12	x
op	152:29	0:0	12	<
water	152:31	0:0	12	w
forexpr	152:34	152:53	11	x += s -> cdx [ compno ]
water	152:34	0:0	12	x
op	152:36	0:0	12	+=
water	152:39	0:0	12	s
op	152:40	0:0	12	->
water	152:43	0:0	12	cdx
op	152:46	0:0	12	[
water	152:47	0:0	12	compno
op	152:53	0:0	12	]
stmts	152:56	160:20	11	
water	152:56	0:0	12	{
decl	153:24	153:62	12	int	val
op	153:32	0:0	12	=
op	153:34	0:0	12	*
water	153:35	0:0	12	i_datap
op	153:43	0:0	12	+
water	153:45	0:0	12	(
water	153:46	0:0	12	1
op	153:48	0:0	12	<<
water	153:51	0:0	12	(
water	153:52	0:0	12	cbps
op	153:57	0:0	12	-
water	153:59	0:0	12	1
water	153:60	0:0	12	)
water	153:61	0:0	12	)
water	155:24	0:0	12	val
op	155:28	0:0	12	=
call	155:30	155:61	12	av_clip
arg	155:38	155:41	13	val
water	155:38	0:0	14	val
arg	155:43	155:44	13	0
water	155:43	0:0	14	0
arg	155:46	155:61	13	(1<<cbps)-1
water	155:46	0:0	14	(
water	155:47	0:0	14	1
op	155:49	0:0	14	<<
water	155:52	0:0	14	cbps
water	155:56	0:0	14	)
op	155:58	0:0	14	-
water	155:60	0:0	14	1
water	155:62	0:0	12	;
op	157:24	0:0	12	*
water	157:25	0:0	12	dst
op	157:29	0:0	12	=
water	157:31	0:0	12	val
op	157:35	0:0	12	<<
water	157:38	0:0	12	(
water	157:39	0:0	12	16
op	157:42	0:0	12	-
water	157:44	0:0	12	cbps
water	157:48	0:0	12	)
water	157:49	0:0	12	;
water	158:24	0:0	12	i_datap
op	158:31	0:0	12	++
water	158:33	0:0	12	;
water	159:24	0:0	12	dst
op	159:28	0:0	12	+=
water	159:31	0:0	12	pixelsize
water	159:40	0:0	12	;
water	160:20	0:0	12	}
water	161:16	0:0	10	}
water	162:16	0:0	8	linel
op	162:22	0:0	8	+=
water	162:25	0:0	8	picture
op	162:32	0:0	8	->
water	162:34	0:0	8	linesize
op	162:42	0:0	8	[
water	162:43	0:0	8	plane
op	162:48	0:0	8	]
op	162:50	0:0	8	>>
water	162:53	0:0	8	1
water	162:54	0:0	8	;
water	163:12	0:0	8	}
water	164:8	0:0	6	}
water	165:4	0:0	4	}
return	167:4	167:12	2	0
water	167:11	0:0	3	0
