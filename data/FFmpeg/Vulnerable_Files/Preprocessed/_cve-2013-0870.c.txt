func	2:0	155:0	0	static int	vp3_decode_frame
params	2:27	0:0	1	
param	2:28	2:49	2	AVCodecContext *	avctx
param	3:28	3:38	2	void *	data
param	3:40	3:54	2	int *	got_frame
param	4:28	4:43	2	AVPacket *	avpkt
stmnts	0:0	154:13	1	
decl	6:4	6:36	2	const uint8_t	*buf
op	6:23	0:0	2	=
water	6:25	0:0	2	avpkt
op	6:30	0:0	2	->
water	6:32	0:0	2	data
decl	7:4	7:30	2	int	buf_size
op	7:17	0:0	2	=
water	7:19	0:0	2	avpkt
op	7:24	0:0	2	->
water	7:26	0:0	2	size
decl	8:4	8:42	2	Vp3DecodeContext	*s
op	8:24	0:0	2	=
water	8:26	0:0	2	avctx
op	8:31	0:0	2	->
water	8:33	0:0	2	priv_data
decl	9:4	9:20	2	GetBitContext	gb
decl	10:4	10:9	2	int	i
call	12:4	12:40	2	init_get_bits
arg	12:18	12:21	3	&gb
op	12:18	0:0	4	&
water	12:19	0:0	4	gb
arg	12:23	12:26	3	buf
water	12:23	0:0	4	buf
arg	12:28	12:40	3	buf_size*8
water	12:28	0:0	4	buf_size
op	12:37	0:0	4	*
water	12:39	0:0	4	8
water	12:41	0:0	2	;
if	14:4	18:4	2	(s -> theora &&get_bits1 (& gb ))
cond	14:8	14:34	3	s -> theora &&get_bits1 (& gb )
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	theora
op	14:18	0:0	4	&&
call	14:21	14:34	4	get_bits1
arg	14:31	14:34	5	&gb
op	14:31	0:0	6	&
water	14:32	0:0	6	gb
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:8	16:87	4	av_log
arg	16:15	16:20	5	avctx
water	16:15	0:0	6	avctx
arg	16:22	16:34	5	AV_LOG_ERROR
water	16:22	0:0	6	AV_LOG_ERROR
arg	16:36	16:87	5	"Header packet passed to frame decoder, skipping\n"
water	16:36	0:0	6	"Header packet passed to frame decoder, skipping\n"
water	16:88	0:0	4	;
return	17:8	17:17	4	-1
op	17:15	0:0	5	-
water	17:16	0:0	5	1
water	18:4	0:0	4	}
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	keyframe
op	20:16	0:0	2	=
op	20:18	0:0	2	!
call	20:19	20:32	2	get_bits1
arg	20:29	20:32	3	&gb
op	20:29	0:0	4	&
water	20:30	0:0	4	gb
water	20:33	0:0	2	;
if	21:4	22:25	2	(! s -> theora)
cond	21:8	21:12	3	! s -> theora
op	21:8	0:0	4	!
water	21:9	0:0	4	s
op	21:10	0:0	4	->
water	21:12	0:0	4	theora
stmts	22:8	22:25	3	
call	22:8	22:24	4	skip_bits
arg	22:18	22:21	5	&gb
op	22:18	0:0	6	&
water	22:19	0:0	6	gb
arg	22:23	22:24	5	1
water	22:23	0:0	6	1
water	22:25	0:0	4	;
for	23:4	24:34	2	(i = 0 ;i < 3;i ++)
forinit	23:9	23:14	3	i = 0 ;
water	23:9	0:0	4	i
op	23:11	0:0	4	=
water	23:13	0:0	4	0
water	23:14	0:0	4	;
cond	23:16	23:20	3	i < 3
water	23:16	0:0	4	i
op	23:18	0:0	4	<
water	23:20	0:0	4	3
forexpr	23:23	23:24	3	i ++
water	23:23	0:0	4	i
op	23:24	0:0	4	++
stmts	24:8	24:34	3	
water	24:8	0:0	4	s
op	24:9	0:0	4	->
water	24:11	0:0	4	last_qps
op	24:19	0:0	4	[
water	24:20	0:0	4	i
op	24:21	0:0	4	]
op	24:23	0:0	4	=
water	24:25	0:0	4	s
op	24:26	0:0	4	->
water	24:28	0:0	4	qps
op	24:31	0:0	4	[
water	24:32	0:0	4	i
op	24:33	0:0	4	]
water	24:34	0:0	4	;
water	26:4	0:0	2	s
op	26:5	0:0	2	->
water	26:7	0:0	2	nqps
op	26:11	0:0	2	=
water	26:12	0:0	2	0
water	26:13	0:0	2	;
do	27:4	29:4	2	(s -> theora >= 0 x030200 && s -> nqps < 3 &&get_bits1 (& gb ))
cond	29:12	29:63	3	s -> theora >= 0 x030200 && s -> nqps < 3 &&get_bits1 (& gb )
water	29:12	0:0	4	s
op	29:13	0:0	4	->
water	29:15	0:0	4	theora
op	29:22	0:0	4	>=
water	29:25	0:0	4	0
water	29:26	0:0	4	x030200
op	29:34	0:0	4	&&
water	29:37	0:0	4	s
op	29:38	0:0	4	->
water	29:40	0:0	4	nqps
op	29:44	0:0	4	<
water	29:45	0:0	4	3
op	29:47	0:0	4	&&
call	29:50	29:63	4	get_bits1
arg	29:60	29:63	5	&gb
op	29:60	0:0	6	&
water	29:61	0:0	6	gb
stmts	27:6	29:4	3	
water	27:6	0:0	4	{
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	qps
op	28:14	0:0	4	[
water	28:15	0:0	4	s
op	28:16	0:0	4	->
water	28:18	0:0	4	nqps
op	28:22	0:0	4	++
op	28:24	0:0	4	]
op	28:25	0:0	4	=
call	28:27	28:42	4	get_bits
arg	28:36	28:39	5	&gb
op	28:36	0:0	6	&
water	28:37	0:0	6	gb
arg	28:41	28:42	5	6
water	28:41	0:0	6	6
water	28:43	0:0	4	;
water	29:4	0:0	4	}
water	29:65	0:0	2	;
for	30:4	31:22	2	(i = s -> nqps ;i < 3;i ++)
forinit	30:9	30:20	3	i = s -> nqps ;
water	30:9	0:0	4	i
op	30:11	0:0	4	=
water	30:13	0:0	4	s
op	30:14	0:0	4	->
water	30:16	0:0	4	nqps
water	30:20	0:0	4	;
cond	30:22	30:26	3	i < 3
water	30:22	0:0	4	i
op	30:24	0:0	4	<
water	30:26	0:0	4	3
forexpr	30:29	30:30	3	i ++
water	30:29	0:0	4	i
op	30:30	0:0	4	++
stmts	31:8	31:22	3	
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	qps
op	31:14	0:0	4	[
water	31:15	0:0	4	i
op	31:16	0:0	4	]
op	31:18	0:0	4	=
op	31:20	0:0	4	-
water	31:21	0:0	4	1
water	31:22	0:0	4	;
if	33:4	35:67	2	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	33:8	33:26	3	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	33:8	0:0	4	s
op	33:9	0:0	4	->
water	33:11	0:0	4	avctx
op	33:16	0:0	4	->
water	33:18	0:0	4	debug
op	33:24	0:0	4	&
water	33:26	0:0	4	FF_DEBUG_PICT_INFO
stmts	34:8	35:67	3	
call	34:8	35:66	4	av_log
arg	34:15	34:23	5	s->avctx
water	34:15	0:0	6	s
op	34:16	0:0	6	->
water	34:18	0:0	6	avctx
arg	34:25	34:36	5	AV_LOG_INFO
water	34:25	0:0	6	AV_LOG_INFO
arg	34:38	34:72	5	" VP3 %sframe #%d: Q index = %d\n"
water	34:38	0:0	6	" VP3 %sframe #%d: Q index = %d\n"
arg	35:12	35:32	5	s->keyframe?"key":""
water	35:12	0:0	6	s
op	35:13	0:0	6	->
water	35:15	0:0	6	keyframe
water	35:23	0:0	6	?
water	35:24	0:0	6	"key"
water	35:29	0:0	6	:
water	35:30	0:0	6	""
arg	35:34	35:55	5	avctx->frame_number+1
water	35:34	0:0	6	avctx
op	35:39	0:0	6	->
water	35:41	0:0	6	frame_number
op	35:53	0:0	6	+
water	35:54	0:0	6	1
arg	35:57	35:66	5	s->qps[0]
water	35:57	0:0	6	s
op	35:58	0:0	6	->
water	35:60	0:0	6	qps
op	35:63	0:0	6	[
water	35:64	0:0	6	0
op	35:65	0:0	6	]
water	35:67	0:0	4	;
water	37:4	0:0	2	s
op	37:5	0:0	2	->
water	37:7	0:0	2	skip_loop_filter
op	37:24	0:0	2	=
op	37:26	0:0	2	!
water	37:27	0:0	2	s
op	37:28	0:0	2	->
water	37:30	0:0	2	filter_limit_values
op	37:49	0:0	2	[
water	37:50	0:0	2	s
op	37:51	0:0	2	->
water	37:53	0:0	2	qps
op	37:56	0:0	2	[
water	37:57	0:0	2	0
op	37:58	0:0	2	]
op	37:59	0:0	2	]
op	37:61	0:0	2	||
water	38:8	0:0	2	avctx
op	38:13	0:0	2	->
water	38:15	0:0	2	skip_loop_filter
op	38:32	0:0	2	>=
water	38:35	0:0	2	(
water	38:36	0:0	2	s
op	38:37	0:0	2	->
water	38:39	0:0	2	keyframe
water	38:48	0:0	2	?
water	38:50	0:0	2	AVDISCARD_ALL
water	38:64	0:0	2	:
water	38:66	0:0	2	AVDISCARD_NONKEY
water	38:82	0:0	2	)
water	38:83	0:0	2	;
if	40:4	41:27	2	(s -> qps [ 0 ] != s -> last_qps [ 0 ])
cond	40:8	40:34	3	s -> qps [ 0 ] != s -> last_qps [ 0 ]
water	40:8	0:0	4	s
op	40:9	0:0	4	->
water	40:11	0:0	4	qps
op	40:14	0:0	4	[
water	40:15	0:0	4	0
op	40:16	0:0	4	]
op	40:18	0:0	4	!=
water	40:21	0:0	4	s
op	40:22	0:0	4	->
water	40:24	0:0	4	last_qps
op	40:32	0:0	4	[
water	40:33	0:0	4	0
op	40:34	0:0	4	]
stmts	41:8	41:27	3	
call	41:8	41:26	4	init_loop_filter
arg	41:25	41:26	5	s
water	41:25	0:0	6	s
water	41:27	0:0	4	;
for	43:4	47:34	2	(i = 0 ;i < s -> nqps;i ++)
forinit	43:9	43:14	3	i = 0 ;
water	43:9	0:0	4	i
op	43:11	0:0	4	=
water	43:13	0:0	4	0
water	43:14	0:0	4	;
cond	43:16	43:23	3	i < s -> nqps
water	43:16	0:0	4	i
op	43:18	0:0	4	<
water	43:20	0:0	4	s
op	43:21	0:0	4	->
water	43:23	0:0	4	nqps
forexpr	43:29	43:30	3	i ++
water	43:29	0:0	4	i
op	43:30	0:0	4	++
stmts	46:8	47:34	3	
if	46:8	47:34	4	(s -> qps [ i ] != s -> last_qps [ i ] || s -> qps [ 0 ] != s -> last_qps [ 0 ])
cond	46:12	46:69	5	s -> qps [ i ] != s -> last_qps [ i ] || s -> qps [ 0 ] != s -> last_qps [ 0 ]
water	46:12	0:0	6	s
op	46:13	0:0	6	->
water	46:15	0:0	6	qps
op	46:18	0:0	6	[
water	46:19	0:0	6	i
op	46:20	0:0	6	]
op	46:22	0:0	6	!=
water	46:25	0:0	6	s
op	46:26	0:0	6	->
water	46:28	0:0	6	last_qps
op	46:36	0:0	6	[
water	46:37	0:0	6	i
op	46:38	0:0	6	]
op	46:40	0:0	6	||
water	46:43	0:0	6	s
op	46:44	0:0	6	->
water	46:46	0:0	6	qps
op	46:49	0:0	6	[
water	46:50	0:0	6	0
op	46:51	0:0	6	]
op	46:53	0:0	6	!=
water	46:56	0:0	6	s
op	46:57	0:0	6	->
water	46:59	0:0	6	last_qps
op	46:67	0:0	6	[
water	46:68	0:0	6	0
op	46:69	0:0	6	]
stmts	47:12	47:34	5	
call	47:12	47:33	6	init_dequantizer
arg	47:29	47:30	7	s
water	47:29	0:0	8	s
arg	47:32	47:33	7	i
water	47:32	0:0	8	i
water	47:34	0:0	6	;
if	49:4	50:23	2	(avctx -> skip_frame >= AVDISCARD_NONKEY && ! s -> keyframe)
cond	49:8	49:53	3	avctx -> skip_frame >= AVDISCARD_NONKEY && ! s -> keyframe
water	49:8	0:0	4	avctx
op	49:13	0:0	4	->
water	49:15	0:0	4	skip_frame
op	49:26	0:0	4	>=
water	49:29	0:0	4	AVDISCARD_NONKEY
op	49:46	0:0	4	&&
op	49:49	0:0	4	!
water	49:50	0:0	4	s
op	49:51	0:0	4	->
water	49:53	0:0	4	keyframe
stmts	50:8	50:23	3	
return	50:8	50:23	4	buf_size
water	50:15	0:0	5	buf_size
water	52:4	0:0	2	s
op	52:5	0:0	2	->
water	52:7	0:0	2	current_frame
op	52:20	0:0	2	.
water	52:21	0:0	2	reference
op	52:31	0:0	2	=
water	52:33	0:0	2	3
water	52:34	0:0	2	;
water	53:4	0:0	2	s
op	53:5	0:0	2	->
water	53:7	0:0	2	current_frame
op	53:20	0:0	2	.
water	53:21	0:0	2	pict_type
op	53:31	0:0	2	=
water	53:33	0:0	2	s
op	53:34	0:0	2	->
water	53:36	0:0	2	keyframe
water	53:45	0:0	2	?
water	53:47	0:0	2	AV_PICTURE_TYPE_I
water	53:65	0:0	2	:
water	53:67	0:0	2	AV_PICTURE_TYPE_P
water	53:84	0:0	2	;
water	54:4	0:0	2	s
op	54:5	0:0	2	->
water	54:7	0:0	2	current_frame
op	54:20	0:0	2	.
water	54:21	0:0	2	key_frame
op	54:31	0:0	2	=
water	54:33	0:0	2	s
op	54:34	0:0	2	->
water	54:36	0:0	2	keyframe
water	54:44	0:0	2	;
if	55:4	58:4	2	(ff_thread_get_buffer (avctx ,& s -> current_frame ) < 0)
cond	55:8	55:57	3	ff_thread_get_buffer (avctx ,& s -> current_frame ) < 0
call	55:8	55:53	4	ff_thread_get_buffer
arg	55:29	55:34	5	avctx
water	55:29	0:0	6	avctx
arg	55:36	55:53	5	&s->current_frame
op	55:36	0:0	6	&
water	55:37	0:0	6	s
op	55:38	0:0	6	->
water	55:40	0:0	6	current_frame
op	55:55	0:0	4	<
water	55:57	0:0	4	0
stmts	55:60	58:4	3	
water	55:60	0:0	4	{
call	56:8	56:62	4	av_log
arg	56:15	56:23	5	s->avctx
water	56:15	0:0	6	s
op	56:16	0:0	6	->
water	56:18	0:0	6	avctx
arg	56:25	56:37	5	AV_LOG_ERROR
water	56:25	0:0	6	AV_LOG_ERROR
arg	56:39	56:62	5	"get_buffer() failed\n"
water	56:39	0:0	6	"get_buffer() failed\n"
water	56:63	0:0	4	;
goto	57:8	57:18	4	error
water	57:13	0:0	5	error
water	58:4	0:0	4	}
if	60:4	61:77	2	(! s -> edge_emu_buffer)
cond	60:8	60:12	3	! s -> edge_emu_buffer
op	60:8	0:0	4	!
water	60:9	0:0	4	s
op	60:10	0:0	4	->
water	60:12	0:0	4	edge_emu_buffer
stmts	61:8	61:77	3	
water	61:8	0:0	4	s
op	61:9	0:0	4	->
water	61:11	0:0	4	edge_emu_buffer
op	61:27	0:0	4	=
call	61:29	61:76	4	av_malloc
arg	61:39	61:76	5	9*FFABS(s->current_frame.linesize[0])
water	61:39	0:0	6	9
call	61:40	61:75	6	*FFABS
arg	61:47	61:75	7	s->current_frame.linesize[0]
water	61:47	0:0	8	s
op	61:48	0:0	8	->
water	61:50	0:0	8	current_frame
op	61:63	0:0	8	.
water	61:64	0:0	8	linesize
op	61:72	0:0	8	[
water	61:73	0:0	8	0
op	61:74	0:0	8	]
water	61:77	0:0	4	;
if	63:4	81:4	2	(s -> keyframe)
cond	63:8	63:11	3	s -> keyframe
water	63:8	0:0	4	s
op	63:9	0:0	4	->
water	63:11	0:0	4	keyframe
stmts	63:21	81:4	3	
water	63:21	0:0	4	{
if	64:8	74:8	4	(! s -> theora)
cond	64:12	64:16	5	! s -> theora
op	64:12	0:0	6	!
water	64:13	0:0	6	s
op	64:14	0:0	6	->
water	64:16	0:0	6	theora
stmts	65:8	74:8	5	
water	65:8	0:0	6	{
call	66:12	66:28	6	skip_bits
arg	66:22	66:25	7	&gb
op	66:22	0:0	8	&
water	66:23	0:0	8	gb
arg	66:27	66:28	7	4
water	66:27	0:0	8	4
water	66:29	0:0	6	;
call	67:12	67:28	6	skip_bits
arg	67:22	67:25	7	&gb
op	67:22	0:0	8	&
water	67:23	0:0	8	gb
arg	67:27	67:28	7	4
water	67:27	0:0	8	4
water	67:29	0:0	6	;
if	68:12	73:12	6	(s -> version)
cond	68:16	68:19	7	s -> version
water	68:16	0:0	8	s
op	68:17	0:0	8	->
water	68:19	0:0	8	version
stmts	69:12	73:12	7	
water	69:12	0:0	8	{
water	70:16	0:0	8	s
op	70:17	0:0	8	->
water	70:19	0:0	8	version
op	70:27	0:0	8	=
call	70:29	70:44	8	get_bits
arg	70:38	70:41	9	&gb
op	70:38	0:0	10	&
water	70:39	0:0	10	gb
arg	70:43	70:44	9	5
water	70:43	0:0	10	5
water	70:45	0:0	8	;
if	71:16	72:82	8	(avctx -> frame_number == 0)
cond	71:20	71:43	9	avctx -> frame_number == 0
water	71:20	0:0	10	avctx
op	71:25	0:0	10	->
water	71:27	0:0	10	frame_number
op	71:40	0:0	10	==
water	71:43	0:0	10	0
stmts	72:20	72:82	9	
call	72:20	72:81	10	av_log
arg	72:27	72:35	11	s->avctx
water	72:27	0:0	12	s
op	72:28	0:0	12	->
water	72:30	0:0	12	avctx
arg	72:37	72:49	11	AV_LOG_DEBUG
water	72:37	0:0	12	AV_LOG_DEBUG
arg	72:51	72:69	11	"VP version: %d\n"
water	72:51	0:0	12	"VP version: %d\n"
arg	72:71	72:81	11	s->version
water	72:71	0:0	12	s
op	72:72	0:0	12	->
water	72:74	0:0	12	version
water	72:82	0:0	10	;
water	73:12	0:0	8	}
water	74:8	0:0	6	}
if	75:8	80:8	4	(s -> version || s -> theora)
cond	75:12	75:29	5	s -> version || s -> theora
water	75:12	0:0	6	s
op	75:13	0:0	6	->
water	75:15	0:0	6	version
op	75:23	0:0	6	||
water	75:26	0:0	6	s
op	75:27	0:0	6	->
water	75:29	0:0	6	theora
stmts	76:8	80:8	5	
water	76:8	0:0	6	{
if	77:16	78:99	6	(get_bits1 (& gb ))
cond	77:20	77:33	7	get_bits1 (& gb )
call	77:20	77:33	8	get_bits1
arg	77:30	77:33	9	&gb
op	77:30	0:0	10	&
water	77:31	0:0	10	gb
stmts	78:20	78:99	7	
call	78:20	78:98	8	av_log
arg	78:27	78:35	9	s->avctx
water	78:27	0:0	10	s
op	78:28	0:0	10	->
water	78:30	0:0	10	avctx
arg	78:37	78:49	9	AV_LOG_ERROR
water	78:37	0:0	10	AV_LOG_ERROR
arg	78:51	78:98	9	"Warning, unsupported keyframe coding type?!\n"
water	78:51	0:0	10	"Warning, unsupported keyframe coding type?!\n"
water	78:99	0:0	8	;
call	79:12	79:28	6	skip_bits
arg	79:22	79:25	7	&gb
op	79:22	0:0	8	&
water	79:23	0:0	8	gb
arg	79:27	79:28	7	2
water	79:27	0:0	8	2
water	79:29	0:0	6	;
water	80:8	0:0	6	}
water	81:4	0:0	4	}
else	81:6	95:4	2
stmts	81:11	95:4	3	
water	81:11	0:0	4	{
if	82:8	94:8	4	(! s -> golden_frame . data [ 0 ])
cond	82:12	82:35	5	! s -> golden_frame . data [ 0 ]
op	82:12	0:0	6	!
water	82:13	0:0	6	s
op	82:14	0:0	6	->
water	82:16	0:0	6	golden_frame
op	82:28	0:0	6	.
water	82:29	0:0	6	data
op	82:33	0:0	6	[
water	82:34	0:0	6	0
op	82:35	0:0	6	]
stmts	82:38	94:8	5	
water	82:38	0:0	6	{
call	83:12	83:80	6	av_log
arg	83:19	83:27	7	s->avctx
water	83:19	0:0	8	s
op	83:20	0:0	8	->
water	83:22	0:0	8	avctx
arg	83:29	83:43	7	AV_LOG_WARNING
water	83:29	0:0	8	AV_LOG_WARNING
arg	83:45	83:80	7	"vp3: first frame not a keyframe\n"
water	83:45	0:0	8	"vp3: first frame not a keyframe\n"
water	83:81	0:0	6	;
water	85:12	0:0	6	s
op	85:13	0:0	6	->
water	85:15	0:0	6	golden_frame
op	85:27	0:0	6	.
water	85:28	0:0	6	reference
op	85:38	0:0	6	=
water	85:40	0:0	6	3
water	85:41	0:0	6	;
water	86:12	0:0	6	s
op	86:13	0:0	6	->
water	86:15	0:0	6	golden_frame
op	86:27	0:0	6	.
water	86:28	0:0	6	pict_type
op	86:38	0:0	6	=
water	86:40	0:0	6	AV_PICTURE_TYPE_I
water	86:57	0:0	6	;
if	87:12	90:12	6	(ff_thread_get_buffer (avctx ,& s -> golden_frame ) < 0)
cond	87:16	87:64	7	ff_thread_get_buffer (avctx ,& s -> golden_frame ) < 0
call	87:16	87:60	8	ff_thread_get_buffer
arg	87:37	87:42	9	avctx
water	87:37	0:0	10	avctx
arg	87:44	87:60	9	&s->golden_frame
op	87:44	0:0	10	&
water	87:45	0:0	10	s
op	87:46	0:0	10	->
water	87:48	0:0	10	golden_frame
op	87:62	0:0	8	<
water	87:64	0:0	8	0
stmts	87:67	90:12	7	
water	87:67	0:0	8	{
call	88:16	88:70	8	av_log
arg	88:23	88:31	9	s->avctx
water	88:23	0:0	10	s
op	88:24	0:0	10	->
water	88:26	0:0	10	avctx
arg	88:33	88:45	9	AV_LOG_ERROR
water	88:33	0:0	10	AV_LOG_ERROR
arg	88:47	88:70	9	"get_buffer() failed\n"
water	88:47	0:0	10	"get_buffer() failed\n"
water	88:71	0:0	8	;
goto	89:16	89:26	8	error
water	89:21	0:0	9	error
water	90:12	0:0	8	}
water	91:12	0:0	6	s
op	91:13	0:0	6	->
water	91:15	0:0	6	last_frame
op	91:26	0:0	6	=
water	91:28	0:0	6	s
op	91:29	0:0	6	->
water	91:31	0:0	6	golden_frame
water	91:43	0:0	6	;
water	92:12	0:0	6	s
op	92:13	0:0	6	->
water	92:15	0:0	6	last_frame
op	92:25	0:0	6	.
water	92:26	0:0	6	type
op	92:31	0:0	6	=
water	92:33	0:0	6	FF_BUFFER_TYPE_COPY
water	92:52	0:0	6	;
call	93:12	93:64	6	ff_thread_report_progress
arg	93:38	93:52	7	&s->last_frame
op	93:38	0:0	8	&
water	93:39	0:0	8	s
op	93:40	0:0	8	->
water	93:42	0:0	8	last_frame
arg	93:54	93:61	7	INT_MAX
water	93:54	0:0	8	INT_MAX
arg	93:63	93:64	7	0
water	93:63	0:0	8	0
water	93:65	0:0	6	;
water	94:8	0:0	6	}
water	95:4	0:0	4	}
call	97:4	97:71	2	memset
arg	97:11	97:27	3	s->all_fragments
water	97:11	0:0	4	s
op	97:12	0:0	4	->
water	97:14	0:0	4	all_fragments
arg	97:29	97:30	3	0
water	97:29	0:0	4	0
arg	97:32	97:71	3	s->fragment_count*sizeof(Vp3Fragment)
water	97:32	0:0	4	s
op	97:33	0:0	4	->
water	97:35	0:0	4	fragment_count
op	97:50	0:0	4	*
op	97:52	0:0	4	sizeof
water	97:58	0:0	4	(
water	97:59	0:0	4	Vp3Fragment
water	97:70	0:0	4	)
water	97:72	0:0	2	;
call	98:4	98:32	2	ff_thread_finish_setup
arg	98:27	98:32	3	avctx
water	98:27	0:0	4	avctx
water	98:33	0:0	2	;
if	100:4	103:4	2	(unpack_superblocks (s ,& gb ))
cond	100:8	100:33	3	unpack_superblocks (s ,& gb )
call	100:8	100:33	4	unpack_superblocks
arg	100:27	100:28	5	s
water	100:27	0:0	6	s
arg	100:30	100:33	5	&gb
op	100:30	0:0	6	&
water	100:31	0:0	6	gb
stmts	100:35	103:4	3	
water	100:35	0:0	4	{
call	101:8	101:70	4	av_log
arg	101:15	101:23	5	s->avctx
water	101:15	0:0	6	s
op	101:16	0:0	6	->
water	101:18	0:0	6	avctx
arg	101:25	101:37	5	AV_LOG_ERROR
water	101:25	0:0	6	AV_LOG_ERROR
arg	101:39	101:70	5	"error in unpack_superblocks\n"
water	101:39	0:0	6	"error in unpack_superblocks\n"
water	101:71	0:0	4	;
goto	102:8	102:18	4	error
water	102:13	0:0	5	error
water	103:4	0:0	4	}
if	104:4	107:4	2	(unpack_modes (s ,& gb ))
cond	104:8	104:27	3	unpack_modes (s ,& gb )
call	104:8	104:27	4	unpack_modes
arg	104:21	104:22	5	s
water	104:21	0:0	6	s
arg	104:24	104:27	5	&gb
op	104:24	0:0	6	&
water	104:25	0:0	6	gb
stmts	104:29	107:4	3	
water	104:29	0:0	4	{
call	105:8	105:64	4	av_log
arg	105:15	105:23	5	s->avctx
water	105:15	0:0	6	s
op	105:16	0:0	6	->
water	105:18	0:0	6	avctx
arg	105:25	105:37	5	AV_LOG_ERROR
water	105:25	0:0	6	AV_LOG_ERROR
arg	105:39	105:64	5	"error in unpack_modes\n"
water	105:39	0:0	6	"error in unpack_modes\n"
water	105:65	0:0	4	;
goto	106:8	106:18	4	error
water	106:13	0:0	5	error
water	107:4	0:0	4	}
if	108:4	111:4	2	(unpack_vectors (s ,& gb ))
cond	108:8	108:29	3	unpack_vectors (s ,& gb )
call	108:8	108:29	4	unpack_vectors
arg	108:23	108:24	5	s
water	108:23	0:0	6	s
arg	108:26	108:29	5	&gb
op	108:26	0:0	6	&
water	108:27	0:0	6	gb
stmts	108:31	111:4	3	
water	108:31	0:0	4	{
call	109:8	109:66	4	av_log
arg	109:15	109:23	5	s->avctx
water	109:15	0:0	6	s
op	109:16	0:0	6	->
water	109:18	0:0	6	avctx
arg	109:25	109:37	5	AV_LOG_ERROR
water	109:25	0:0	6	AV_LOG_ERROR
arg	109:39	109:66	5	"error in unpack_vectors\n"
water	109:39	0:0	6	"error in unpack_vectors\n"
water	109:67	0:0	4	;
goto	110:8	110:18	4	error
water	110:13	0:0	5	error
water	111:4	0:0	4	}
if	112:4	115:4	2	(unpack_block_qpis (s ,& gb ))
cond	112:8	112:32	3	unpack_block_qpis (s ,& gb )
call	112:8	112:32	4	unpack_block_qpis
arg	112:26	112:27	5	s
water	112:26	0:0	6	s
arg	112:29	112:32	5	&gb
op	112:29	0:0	6	&
water	112:30	0:0	6	gb
stmts	112:34	115:4	3	
water	112:34	0:0	4	{
call	113:8	113:69	4	av_log
arg	113:15	113:23	5	s->avctx
water	113:15	0:0	6	s
op	113:16	0:0	6	->
water	113:18	0:0	6	avctx
arg	113:25	113:37	5	AV_LOG_ERROR
water	113:25	0:0	6	AV_LOG_ERROR
arg	113:39	113:69	5	"error in unpack_block_qpis\n"
water	113:39	0:0	6	"error in unpack_block_qpis\n"
water	113:70	0:0	4	;
goto	114:8	114:18	4	error
water	114:13	0:0	5	error
water	115:4	0:0	4	}
if	116:4	119:4	2	(unpack_dct_coeffs (s ,& gb ))
cond	116:8	116:32	3	unpack_dct_coeffs (s ,& gb )
call	116:8	116:32	4	unpack_dct_coeffs
arg	116:26	116:27	5	s
water	116:26	0:0	6	s
arg	116:29	116:32	5	&gb
op	116:29	0:0	6	&
water	116:30	0:0	6	gb
stmts	116:34	119:4	3	
water	116:34	0:0	4	{
call	117:8	117:69	4	av_log
arg	117:15	117:23	5	s->avctx
water	117:15	0:0	6	s
op	117:16	0:0	6	->
water	117:18	0:0	6	avctx
arg	117:25	117:37	5	AV_LOG_ERROR
water	117:25	0:0	6	AV_LOG_ERROR
arg	117:39	117:69	5	"error in unpack_dct_coeffs\n"
water	117:39	0:0	6	"error in unpack_dct_coeffs\n"
water	117:70	0:0	4	;
goto	118:8	118:18	4	error
water	118:13	0:0	5	error
water	119:4	0:0	4	}
for	121:4	127:4	2	(i = 0 ;i < 3;i ++)
forinit	121:9	121:14	3	i = 0 ;
water	121:9	0:0	4	i
op	121:11	0:0	4	=
water	121:13	0:0	4	0
water	121:14	0:0	4	;
cond	121:16	121:20	3	i < 3
water	121:16	0:0	4	i
op	121:18	0:0	4	<
water	121:20	0:0	4	3
forexpr	121:23	121:24	3	i ++
water	121:23	0:0	4	i
op	121:24	0:0	4	++
stmts	121:28	127:4	3	
water	121:28	0:0	4	{
decl	122:8	122:58	4	int	height
op	122:19	0:0	4	=
water	122:21	0:0	4	s
op	122:22	0:0	4	->
water	122:24	0:0	4	height
op	122:31	0:0	4	>>
water	122:34	0:0	4	(
water	122:35	0:0	4	i
op	122:37	0:0	4	&&
water	122:40	0:0	4	s
op	122:41	0:0	4	->
water	122:43	0:0	4	chroma_y_shift
water	122:57	0:0	4	)
if	123:8	124:33	4	(s -> flipped_image)
cond	123:12	123:15	5	s -> flipped_image
water	123:12	0:0	6	s
op	123:13	0:0	6	->
water	123:15	0:0	6	flipped_image
stmts	124:12	124:33	5	
water	124:12	0:0	6	s
op	124:13	0:0	6	->
water	124:15	0:0	6	data_offset
op	124:26	0:0	6	[
water	124:27	0:0	6	i
op	124:28	0:0	6	]
op	124:30	0:0	6	=
water	124:32	0:0	6	0
water	124:33	0:0	6	;
else	125:8	126:73	4
stmts	126:12	126:73	5	
water	126:12	0:0	6	s
op	126:13	0:0	6	->
water	126:15	0:0	6	data_offset
op	126:26	0:0	6	[
water	126:27	0:0	6	i
op	126:28	0:0	6	]
op	126:30	0:0	6	=
water	126:32	0:0	6	(
water	126:33	0:0	6	height
op	126:39	0:0	6	-
water	126:40	0:0	6	1
water	126:41	0:0	6	)
op	126:43	0:0	6	*
water	126:45	0:0	6	s
op	126:46	0:0	6	->
water	126:48	0:0	6	current_frame
op	126:61	0:0	6	.
water	126:62	0:0	6	linesize
op	126:70	0:0	6	[
water	126:71	0:0	6	i
op	126:72	0:0	6	]
water	126:73	0:0	6	;
water	127:4	0:0	4	}
water	129:4	0:0	2	s
op	129:5	0:0	2	->
water	129:7	0:0	2	last_slice_end
op	129:22	0:0	2	=
water	129:24	0:0	2	0
water	129:25	0:0	2	;
for	130:4	131:26	2	(i = 0 ;i < s -> c_superblock_height;i ++)
forinit	130:9	130:14	3	i = 0 ;
water	130:9	0:0	4	i
op	130:11	0:0	4	=
water	130:13	0:0	4	0
water	130:14	0:0	4	;
cond	130:16	130:23	3	i < s -> c_superblock_height
water	130:16	0:0	4	i
op	130:18	0:0	4	<
water	130:20	0:0	4	s
op	130:21	0:0	4	->
water	130:23	0:0	4	c_superblock_height
forexpr	130:44	130:45	3	i ++
water	130:44	0:0	4	i
op	130:45	0:0	4	++
stmts	131:8	131:26	3	
call	131:8	131:25	4	render_slice
arg	131:21	131:22	5	s
water	131:21	0:0	6	s
arg	131:24	131:25	5	i
water	131:24	0:0	6	i
water	131:26	0:0	4	;
for	134:4	137:4	2	(i = 0 ;i < 3;i ++)
forinit	134:9	134:14	3	i = 0 ;
water	134:9	0:0	4	i
op	134:11	0:0	4	=
water	134:13	0:0	4	0
water	134:14	0:0	4	;
cond	134:16	134:20	3	i < 3
water	134:16	0:0	4	i
op	134:18	0:0	4	<
water	134:20	0:0	4	3
forexpr	134:23	134:24	3	i ++
water	134:23	0:0	4	i
op	134:24	0:0	4	++
stmts	134:28	137:4	3	
water	134:28	0:0	4	{
decl	135:8	135:65	4	int	row
op	135:16	0:0	4	=
water	135:18	0:0	4	(
water	135:19	0:0	4	s
op	135:20	0:0	4	->
water	135:22	0:0	4	height
op	135:29	0:0	4	>>
water	135:32	0:0	4	(
water	135:33	0:0	4	3
op	135:34	0:0	4	+
water	135:35	0:0	4	(
water	135:36	0:0	4	i
op	135:38	0:0	4	&&
water	135:41	0:0	4	s
op	135:42	0:0	4	->
water	135:44	0:0	4	chroma_y_shift
water	135:58	0:0	4	)
water	135:59	0:0	4	)
water	135:60	0:0	4	)
op	135:62	0:0	4	-
water	135:64	0:0	4	1
call	136:8	136:42	4	apply_loop_filter
arg	136:26	136:27	5	s
water	136:26	0:0	6	s
arg	136:29	136:30	5	i
water	136:29	0:0	6	i
arg	136:32	136:35	5	row
water	136:32	0:0	6	row
arg	136:37	136:42	5	row+1
water	136:37	0:0	6	row
op	136:40	0:0	6	+
water	136:41	0:0	6	1
water	136:43	0:0	4	;
water	137:4	0:0	4	}
call	138:4	138:43	2	vp3_draw_horiz_band
arg	138:24	138:25	3	s
water	138:24	0:0	4	s
arg	138:27	138:43	3	s->avctx->height
water	138:27	0:0	4	s
op	138:28	0:0	4	->
water	138:30	0:0	4	avctx
op	138:35	0:0	4	->
water	138:37	0:0	4	height
water	138:44	0:0	2	;
op	140:4	0:0	2	*
water	140:5	0:0	2	got_frame
op	140:15	0:0	2	=
water	140:17	0:0	2	1
water	140:18	0:0	2	;
op	141:4	0:0	2	*
water	141:5	0:0	2	(
water	141:6	0:0	2	AVFrame
op	141:13	0:0	2	*
water	141:14	0:0	2	)
water	141:15	0:0	2	data
op	141:19	0:0	2	=
water	141:21	0:0	2	s
op	141:22	0:0	2	->
water	141:24	0:0	2	current_frame
water	141:37	0:0	2	;
if	143:4	144:28	2	(! HAVE_THREADS || ! ( s -> avctx -> active_thread_type & FF_THREAD_FRAME ))
cond	143:8	143:71	3	! HAVE_THREADS || ! ( s -> avctx -> active_thread_type & FF_THREAD_FRAME )
op	143:8	0:0	4	!
water	143:9	0:0	4	HAVE_THREADS
op	143:22	0:0	4	||
op	143:25	0:0	4	!
water	143:26	0:0	4	(
water	143:27	0:0	4	s
op	143:28	0:0	4	->
water	143:30	0:0	4	avctx
op	143:35	0:0	4	->
water	143:37	0:0	4	active_thread_type
op	143:55	0:0	4	&
water	143:56	0:0	4	FF_THREAD_FRAME
water	143:71	0:0	4	)
stmts	144:8	144:28	3	
call	144:8	144:27	4	update_frames
arg	144:22	144:27	5	avctx
water	144:22	0:0	6	avctx
water	144:28	0:0	4	;
return	146:4	146:19	2	buf_size
water	146:11	0:0	3	buf_size
label	148:0	148:5	2	error :
call	149:4	149:59	2	ff_thread_report_progress
arg	149:30	149:47	3	&s->current_frame
op	149:30	0:0	4	&
water	149:31	0:0	4	s
op	149:32	0:0	4	->
water	149:34	0:0	4	current_frame
arg	149:49	149:56	3	INT_MAX
water	149:49	0:0	4	INT_MAX
arg	149:58	149:59	3	0
water	149:58	0:0	4	0
water	149:60	0:0	2	;
if	151:4	152:55	2	(! HAVE_THREADS || ! ( s -> avctx -> active_thread_type & FF_THREAD_FRAME ))
cond	151:8	151:71	3	! HAVE_THREADS || ! ( s -> avctx -> active_thread_type & FF_THREAD_FRAME )
op	151:8	0:0	4	!
water	151:9	0:0	4	HAVE_THREADS
op	151:22	0:0	4	||
op	151:25	0:0	4	!
water	151:26	0:0	4	(
water	151:27	0:0	4	s
op	151:28	0:0	4	->
water	151:30	0:0	4	avctx
op	151:35	0:0	4	->
water	151:37	0:0	4	active_thread_type
op	151:55	0:0	4	&
water	151:56	0:0	4	FF_THREAD_FRAME
water	151:71	0:0	4	)
stmts	152:8	152:55	3	
call	152:8	152:54	4	avctx->release_buffer
arg	152:30	152:35	5	avctx
water	152:30	0:0	6	avctx
arg	152:37	152:54	5	&s->current_frame
op	152:37	0:0	6	&
water	152:38	0:0	6	s
op	152:39	0:0	6	->
water	152:41	0:0	6	current_frame
water	152:55	0:0	4	;
return	154:4	154:13	2	-1
op	154:11	0:0	3	-
water	154:12	0:0	3	1
