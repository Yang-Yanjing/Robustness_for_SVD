func	10:0	94:0	0	static int	dv_extract_audio
params	10:27	0:0	1	
param	10:28	10:42	2	uint8_t *	frame
param	10:44	10:60	2	uint8_t *	ppcm[4]
param	11:28	11:48	2	const DVprofile *	sys
stmnts	0:0	93:15	1	
decl	13:4	13:60	2	int	size
water	13:12	0:0	2	,
decl	13:4	13:60	2	int	chan
water	13:18	0:0	2	,
decl	13:4	13:60	2	int	i
water	13:21	0:0	2	,
decl	13:4	13:60	2	int	j
water	13:24	0:0	2	,
decl	13:4	13:60	2	int	d
water	13:27	0:0	2	,
decl	13:4	13:60	2	int	of
water	13:31	0:0	2	,
decl	13:4	13:60	2	int	smpls
water	13:38	0:0	2	,
decl	13:4	13:60	2	int	freq
water	13:44	0:0	2	,
decl	13:4	13:60	2	int	quant
water	13:51	0:0	2	,
decl	13:4	13:60	2	int	half_ch
decl	14:4	14:19	2	uint16_t	lc
water	14:15	0:0	2	,
decl	14:4	14:19	2	uint16_t	rc
decl	15:4	15:26	2	const uint8_t	*as_pack
decl	16:4	16:22	2	uint8_t	*pcm
water	16:16	0:0	2	,
decl	16:4	16:22	2	uint8_t	ipcm
water	18:4	0:0	2	as_pack
op	18:12	0:0	2	=
call	18:14	18:52	2	dv_extract_pack
arg	18:30	18:35	3	frame
water	18:30	0:0	4	frame
arg	18:37	18:52	3	dv_audio_source
water	18:37	0:0	4	dv_audio_source
water	18:53	0:0	2	;
if	19:4	20:16	2	(! as_pack)
cond	19:8	19:9	3	! as_pack
op	19:8	0:0	4	!
water	19:9	0:0	4	as_pack
stmts	20:8	20:16	3	
return	20:8	20:16	4	0
water	20:15	0:0	5	0
water	22:4	0:0	2	smpls
op	22:10	0:0	2	=
water	22:13	0:0	2	as_pack
op	22:20	0:0	2	[
water	22:21	0:0	2	1
op	22:22	0:0	2	]
op	22:24	0:0	2	&
water	22:26	0:0	2	0
water	22:27	0:0	2	x3f
water	22:30	0:0	2	;
water	23:4	0:0	2	freq
op	23:10	0:0	2	=
water	23:12	0:0	2	(
water	23:13	0:0	2	as_pack
op	23:20	0:0	2	[
water	23:21	0:0	2	4
op	23:22	0:0	2	]
op	23:24	0:0	2	>>
water	23:27	0:0	2	3
water	23:28	0:0	2	)
op	23:30	0:0	2	&
water	23:32	0:0	2	0
water	23:33	0:0	2	x07
water	23:36	0:0	2	;
water	24:4	0:0	2	quant
op	24:10	0:0	2	=
water	24:13	0:0	2	as_pack
op	24:20	0:0	2	[
water	24:21	0:0	2	4
op	24:22	0:0	2	]
op	24:24	0:0	2	&
water	24:26	0:0	2	0
water	24:27	0:0	2	x07
water	24:30	0:0	2	;
if	26:4	27:17	2	(quant > 1)
cond	26:8	26:16	3	quant > 1
water	26:8	0:0	4	quant
op	26:14	0:0	4	>
water	26:16	0:0	4	1
stmts	27:8	27:17	3	
return	27:8	27:17	4	-1
op	27:15	0:0	5	-
water	27:16	0:0	5	1
water	29:4	0:0	2	size
op	29:9	0:0	2	=
water	29:11	0:0	2	(
water	29:12	0:0	2	sys
op	29:15	0:0	2	->
water	29:17	0:0	2	audio_min_samples
op	29:34	0:0	2	[
water	29:35	0:0	2	freq
op	29:39	0:0	2	]
op	29:41	0:0	2	+
water	29:43	0:0	2	smpls
water	29:48	0:0	2	)
op	29:50	0:0	2	*
water	29:52	0:0	2	4
water	29:53	0:0	2	;
water	30:4	0:0	2	half_ch
op	30:12	0:0	2	=
water	30:14	0:0	2	sys
op	30:17	0:0	2	->
water	30:19	0:0	2	difseg_size
op	30:31	0:0	2	/
water	30:33	0:0	2	2
water	30:34	0:0	2	;
water	34:4	0:0	2	ipcm
op	34:9	0:0	2	=
water	34:11	0:0	2	(
water	34:12	0:0	2	sys
op	34:15	0:0	2	->
water	34:17	0:0	2	height
op	34:24	0:0	2	==
water	34:27	0:0	2	720
op	34:31	0:0	2	&&
op	34:34	0:0	2	!
water	34:35	0:0	2	(
water	34:36	0:0	2	frame
op	34:41	0:0	2	[
water	34:42	0:0	2	1
op	34:43	0:0	2	]
op	34:45	0:0	2	&
water	34:47	0:0	2	0
water	34:48	0:0	2	x0C
water	34:51	0:0	2	)
water	34:52	0:0	2	)
water	34:54	0:0	2	?
water	34:56	0:0	2	2
water	34:58	0:0	2	:
water	34:60	0:0	2	0
water	34:61	0:0	2	;
water	35:4	0:0	2	pcm
op	35:9	0:0	2	=
water	35:11	0:0	2	ppcm
op	35:15	0:0	2	[
water	35:16	0:0	2	ipcm
op	35:20	0:0	2	++
op	35:22	0:0	2	]
water	35:23	0:0	2	;
for	38:4	91:4	2	(chan = 0 ;chan < sys -> n_difchan;chan ++)
forinit	38:9	38:17	3	chan = 0 ;
water	38:9	0:0	4	chan
op	38:14	0:0	4	=
water	38:16	0:0	4	0
water	38:17	0:0	4	;
cond	38:19	38:31	3	chan < sys -> n_difchan
water	38:19	0:0	4	chan
op	38:24	0:0	4	<
water	38:26	0:0	4	sys
op	38:29	0:0	4	->
water	38:31	0:0	4	n_difchan
forexpr	38:42	38:46	3	chan ++
water	38:42	0:0	4	chan
op	38:46	0:0	4	++
stmts	38:50	91:4	3	
water	38:50	0:0	4	{
for	40:8	85:8	4	(i = 0 ;i < sys -> difseg_size;i ++)
forinit	40:13	40:18	5	i = 0 ;
water	40:13	0:0	6	i
op	40:15	0:0	6	=
water	40:17	0:0	6	0
water	40:18	0:0	6	;
cond	40:20	40:29	5	i < sys -> difseg_size
water	40:20	0:0	6	i
op	40:22	0:0	6	<
water	40:24	0:0	6	sys
op	40:27	0:0	6	->
water	40:29	0:0	6	difseg_size
forexpr	40:42	40:43	5	i ++
water	40:42	0:0	6	i
op	40:43	0:0	6	++
stmts	40:47	85:8	5	
water	40:47	0:0	6	{
water	41:12	0:0	6	frame
op	41:18	0:0	6	+=
water	41:21	0:0	6	6
op	41:23	0:0	6	*
water	41:25	0:0	6	80
water	41:27	0:0	6	;
if	42:12	47:12	6	(quant == 1 && i == half_ch)
cond	42:16	42:35	7	quant == 1 && i == half_ch
water	42:16	0:0	8	quant
op	42:22	0:0	8	==
water	42:25	0:0	8	1
op	42:27	0:0	8	&&
water	42:30	0:0	8	i
op	42:32	0:0	8	==
water	42:35	0:0	8	half_ch
stmts	42:44	47:12	7	
water	42:44	0:0	8	{
water	44:16	0:0	8	pcm
op	44:20	0:0	8	=
water	44:22	0:0	8	ppcm
op	44:26	0:0	8	[
water	44:27	0:0	8	ipcm
op	44:31	0:0	8	++
op	44:33	0:0	8	]
water	44:34	0:0	8	;
if	45:16	46:25	8	(! pcm)
cond	45:20	45:21	9	! pcm
op	45:20	0:0	10	!
water	45:21	0:0	10	pcm
stmts	46:20	46:25	9	
break	46:20	46:25	10	
water	47:12	0:0	8	}
for	50:12	84:12	6	(j = 0 ;j < 9;j ++)
forinit	50:17	50:22	7	j = 0 ;
water	50:17	0:0	8	j
op	50:19	0:0	8	=
water	50:21	0:0	8	0
water	50:22	0:0	8	;
cond	50:24	50:28	7	j < 9
water	50:24	0:0	8	j
op	50:26	0:0	8	<
water	50:28	0:0	8	9
forexpr	50:31	50:32	7	j ++
water	50:31	0:0	8	j
op	50:32	0:0	8	++
stmts	50:36	84:12	7	
water	50:36	0:0	8	{
for	51:16	81:16	8	(d = 8 ;d < 80;d += 2)
forinit	51:21	51:26	9	d = 8 ;
water	51:21	0:0	10	d
op	51:23	0:0	10	=
water	51:25	0:0	10	8
water	51:26	0:0	10	;
cond	51:28	51:32	9	d < 80
water	51:28	0:0	10	d
op	51:30	0:0	10	<
water	51:32	0:0	10	80
forexpr	51:36	51:41	9	d += 2
water	51:36	0:0	10	d
op	51:38	0:0	10	+=
water	51:41	0:0	10	2
stmts	51:44	81:16	9	
water	51:44	0:0	10	{
if	52:20	61:20	10	(quant == 0)
cond	52:24	52:33	11	quant == 0
water	52:24	0:0	12	quant
op	52:30	0:0	12	==
water	52:33	0:0	12	0
stmts	52:36	61:20	11	
water	52:36	0:0	12	{
water	53:24	0:0	12	of
op	53:27	0:0	12	=
water	53:29	0:0	12	sys
op	53:32	0:0	12	->
water	53:34	0:0	12	audio_shuffle
op	53:47	0:0	12	[
water	53:48	0:0	12	i
op	53:49	0:0	12	]
op	53:50	0:0	12	[
water	53:51	0:0	12	j
op	53:52	0:0	12	]
op	53:54	0:0	12	+
water	53:56	0:0	12	(
water	53:57	0:0	12	d
op	53:59	0:0	12	-
water	53:61	0:0	12	8
water	53:62	0:0	12	)
op	53:64	0:0	12	/
water	53:66	0:0	12	2
op	53:68	0:0	12	*
water	53:70	0:0	12	sys
op	53:73	0:0	12	->
water	53:75	0:0	12	audio_stride
water	53:87	0:0	12	;
if	54:24	55:36	12	(of * 2 >= size)
cond	54:28	54:36	13	of * 2 >= size
water	54:28	0:0	14	of
op	54:30	0:0	14	*
water	54:31	0:0	14	2
op	54:33	0:0	14	>=
water	54:36	0:0	14	size
stmts	55:28	55:36	13	
continue	55:28	55:36	14	
water	57:24	0:0	12	pcm
op	57:27	0:0	12	[
water	57:28	0:0	12	of
op	57:30	0:0	12	*
water	57:31	0:0	12	2
op	57:32	0:0	12	]
op	57:36	0:0	12	=
water	57:38	0:0	12	frame
op	57:43	0:0	12	[
water	57:44	0:0	12	d
op	57:45	0:0	12	+
water	57:46	0:0	12	1
op	57:47	0:0	12	]
water	57:48	0:0	12	;
water	58:24	0:0	12	pcm
op	58:27	0:0	12	[
water	58:28	0:0	12	of
op	58:30	0:0	12	*
water	58:31	0:0	12	2
op	58:32	0:0	12	+
water	58:33	0:0	12	1
op	58:34	0:0	12	]
op	58:36	0:0	12	=
water	58:38	0:0	12	frame
op	58:43	0:0	12	[
water	58:44	0:0	12	d
op	58:45	0:0	12	]
water	58:46	0:0	12	;
if	59:24	60:43	12	(pcm [ of * 2 + 1 ] == 0 x80 && pcm [ of * 2 ] == 0 x00)
cond	59:28	59:65	13	pcm [ of * 2 + 1 ] == 0 x80 && pcm [ of * 2 ] == 0 x00
water	59:28	0:0	14	pcm
op	59:31	0:0	14	[
water	59:32	0:0	14	of
op	59:34	0:0	14	*
water	59:35	0:0	14	2
op	59:36	0:0	14	+
water	59:37	0:0	14	1
op	59:38	0:0	14	]
op	59:40	0:0	14	==
water	59:43	0:0	14	0
water	59:44	0:0	14	x80
op	59:48	0:0	14	&&
water	59:51	0:0	14	pcm
op	59:54	0:0	14	[
water	59:55	0:0	14	of
op	59:57	0:0	14	*
water	59:58	0:0	14	2
op	59:59	0:0	14	]
op	59:61	0:0	14	==
water	59:64	0:0	14	0
water	59:65	0:0	14	x00
stmts	60:28	60:43	13	
water	60:28	0:0	14	pcm
op	60:31	0:0	14	[
water	60:32	0:0	14	of
op	60:34	0:0	14	*
water	60:35	0:0	14	2
op	60:36	0:0	14	+
water	60:37	0:0	14	1
op	60:38	0:0	14	]
op	60:40	0:0	14	=
water	60:42	0:0	14	0
water	60:43	0:0	14	;
water	61:20	0:0	12	}
else	61:22	80:20	10
stmts	61:27	80:20	11	
water	61:27	0:0	12	{
water	62:24	0:0	12	lc
op	62:27	0:0	12	=
water	62:29	0:0	12	(
water	62:30	0:0	12	(
water	62:31	0:0	12	uint16_t
water	62:39	0:0	12	)
water	62:40	0:0	12	frame
op	62:45	0:0	12	[
water	62:46	0:0	12	d
op	62:47	0:0	12	]
op	62:51	0:0	12	<<
water	62:54	0:0	12	4
water	62:55	0:0	12	)
op	62:57	0:0	12	|
water	63:29	0:0	12	(
water	63:30	0:0	12	(
water	63:31	0:0	12	uint16_t
water	63:39	0:0	12	)
water	63:40	0:0	12	frame
op	63:45	0:0	12	[
water	63:46	0:0	12	d
op	63:47	0:0	12	+
water	63:48	0:0	12	2
op	63:49	0:0	12	]
op	63:51	0:0	12	>>
water	63:54	0:0	12	4
water	63:55	0:0	12	)
water	63:56	0:0	12	;
water	64:24	0:0	12	rc
op	64:27	0:0	12	=
water	64:29	0:0	12	(
water	64:30	0:0	12	(
water	64:31	0:0	12	uint16_t
water	64:39	0:0	12	)
water	64:40	0:0	12	frame
op	64:45	0:0	12	[
water	64:46	0:0	12	d
op	64:47	0:0	12	+
water	64:48	0:0	12	1
op	64:49	0:0	12	]
op	64:51	0:0	12	<<
water	64:54	0:0	12	4
water	64:55	0:0	12	)
op	64:57	0:0	12	|
water	65:29	0:0	12	(
water	65:30	0:0	12	(
water	65:31	0:0	12	uint16_t
water	65:39	0:0	12	)
water	65:40	0:0	12	frame
op	65:45	0:0	12	[
water	65:46	0:0	12	d
op	65:47	0:0	12	+
water	65:48	0:0	12	2
op	65:49	0:0	12	]
op	65:51	0:0	12	&
water	65:53	0:0	12	0
water	65:54	0:0	12	x0f
water	65:57	0:0	12	)
water	65:58	0:0	12	;
water	66:24	0:0	12	lc
op	66:27	0:0	12	=
water	66:29	0:0	12	(
water	66:30	0:0	12	lc
op	66:33	0:0	12	==
water	66:36	0:0	12	0
water	66:37	0:0	12	x800
water	66:42	0:0	12	?
water	66:44	0:0	12	0
water	66:46	0:0	12	:
call	66:48	66:66	12	dv_audio_12to16
arg	66:64	66:66	13	lc
water	66:64	0:0	14	lc
water	66:67	0:0	12	)
water	66:68	0:0	12	;
water	67:24	0:0	12	rc
op	67:27	0:0	12	=
water	67:29	0:0	12	(
water	67:30	0:0	12	rc
op	67:33	0:0	12	==
water	67:36	0:0	12	0
water	67:37	0:0	12	x800
water	67:42	0:0	12	?
water	67:44	0:0	12	0
water	67:46	0:0	12	:
call	67:48	67:66	12	dv_audio_12to16
arg	67:64	67:66	13	rc
water	67:64	0:0	14	rc
water	67:67	0:0	12	)
water	67:68	0:0	12	;
water	69:24	0:0	12	of
op	69:27	0:0	12	=
water	69:29	0:0	12	sys
op	69:32	0:0	12	->
water	69:34	0:0	12	audio_shuffle
op	69:47	0:0	12	[
water	69:48	0:0	12	i
op	69:49	0:0	12	%
water	69:50	0:0	12	half_ch
op	69:57	0:0	12	]
op	69:58	0:0	12	[
water	69:59	0:0	12	j
op	69:60	0:0	12	]
op	69:62	0:0	12	+
water	69:64	0:0	12	(
water	69:65	0:0	12	d
op	69:67	0:0	12	-
water	69:69	0:0	12	8
water	69:70	0:0	12	)
op	69:72	0:0	12	/
water	69:74	0:0	12	3
op	69:76	0:0	12	*
water	69:78	0:0	12	sys
op	69:81	0:0	12	->
water	69:83	0:0	12	audio_stride
water	69:95	0:0	12	;
if	70:24	71:36	12	(of * 2 >= size)
cond	70:28	70:36	13	of * 2 >= size
water	70:28	0:0	14	of
op	70:30	0:0	14	*
water	70:31	0:0	14	2
op	70:33	0:0	14	>=
water	70:36	0:0	14	size
stmts	71:28	71:36	13	
continue	71:28	71:36	14	
water	73:24	0:0	12	pcm
op	73:27	0:0	12	[
water	73:28	0:0	12	of
op	73:30	0:0	12	*
water	73:31	0:0	12	2
op	73:32	0:0	12	]
op	73:36	0:0	12	=
water	73:38	0:0	12	lc
op	73:41	0:0	12	&
water	73:43	0:0	12	0
water	73:44	0:0	12	xff
water	73:47	0:0	12	;
water	74:24	0:0	12	pcm
op	74:27	0:0	12	[
water	74:28	0:0	12	of
op	74:30	0:0	12	*
water	74:31	0:0	12	2
op	74:32	0:0	12	+
water	74:33	0:0	12	1
op	74:34	0:0	12	]
op	74:36	0:0	12	=
water	74:38	0:0	12	lc
op	74:41	0:0	12	>>
water	74:44	0:0	12	8
water	74:45	0:0	12	;
water	75:24	0:0	12	of
op	75:27	0:0	12	=
water	75:29	0:0	12	sys
op	75:32	0:0	12	->
water	75:34	0:0	12	audio_shuffle
op	75:47	0:0	12	[
water	75:48	0:0	12	i
op	75:49	0:0	12	%
water	75:50	0:0	12	half_ch
op	75:57	0:0	12	+
water	75:58	0:0	12	half_ch
op	75:65	0:0	12	]
op	75:66	0:0	12	[
water	75:67	0:0	12	j
op	75:68	0:0	12	]
op	75:70	0:0	12	+
water	76:28	0:0	12	(
water	76:29	0:0	12	d
op	76:31	0:0	12	-
water	76:33	0:0	12	8
water	76:34	0:0	12	)
op	76:36	0:0	12	/
water	76:38	0:0	12	3
op	76:40	0:0	12	*
water	76:42	0:0	12	sys
op	76:45	0:0	12	->
water	76:47	0:0	12	audio_stride
water	76:59	0:0	12	;
water	77:24	0:0	12	pcm
op	77:27	0:0	12	[
water	77:28	0:0	12	of
op	77:30	0:0	12	*
water	77:31	0:0	12	2
op	77:32	0:0	12	]
op	77:36	0:0	12	=
water	77:38	0:0	12	rc
op	77:41	0:0	12	&
water	77:43	0:0	12	0
water	77:44	0:0	12	xff
water	77:47	0:0	12	;
water	78:24	0:0	12	pcm
op	78:27	0:0	12	[
water	78:28	0:0	12	of
op	78:30	0:0	12	*
water	78:31	0:0	12	2
op	78:32	0:0	12	+
water	78:33	0:0	12	1
op	78:34	0:0	12	]
op	78:36	0:0	12	=
water	78:38	0:0	12	rc
op	78:41	0:0	12	>>
water	78:44	0:0	12	8
water	78:45	0:0	12	;
op	79:24	0:0	12	++
water	79:26	0:0	12	d
water	79:27	0:0	12	;
water	80:20	0:0	12	}
water	81:16	0:0	10	}
water	83:16	0:0	8	frame
op	83:22	0:0	8	+=
water	83:25	0:0	8	16
op	83:28	0:0	8	*
water	83:30	0:0	8	80
water	83:32	0:0	8	;
water	84:12	0:0	8	}
water	85:8	0:0	6	}
water	88:8	0:0	4	pcm
op	88:12	0:0	4	=
water	88:14	0:0	4	ppcm
op	88:18	0:0	4	[
water	88:19	0:0	4	ipcm
op	88:23	0:0	4	++
op	88:25	0:0	4	]
water	88:26	0:0	4	;
if	89:8	90:17	4	(! pcm)
cond	89:12	89:13	5	! pcm
op	89:12	0:0	6	!
water	89:13	0:0	6	pcm
stmts	90:12	90:17	5	
break	90:12	90:17	6	
water	91:4	0:0	4	}
return	93:4	93:15	2	size
water	93:11	0:0	3	size
