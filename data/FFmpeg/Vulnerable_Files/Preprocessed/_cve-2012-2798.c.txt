func	2:0	46:0	0	static int	decode_dds1
params	2:22	0:0	1	
param	2:23	2:37	2	uint8_t *	frame
param	2:39	2:48	2	int	width
param	2:50	2:60	2	int	height
param	3:23	3:41	2	const uint8_t *	src
param	3:43	3:65	2	const uint8_t *	src_end
stmnts	0:0	45:12	1	
decl	5:4	5:38	2	const uint8_t	*frame_start
op	5:31	0:0	2	=
water	5:33	0:0	2	frame
decl	6:4	6:55	2	const uint8_t	*frame_end
op	6:31	0:0	2	=
water	6:33	0:0	2	frame
op	6:39	0:0	2	+
water	6:41	0:0	2	width
op	6:47	0:0	2	*
water	6:49	0:0	2	height
decl	7:4	7:34	2	int	mask
op	7:13	0:0	2	=
water	7:15	0:0	2	0
water	7:16	0:0	2	x10000
water	7:22	0:0	2	,
decl	7:4	7:34	2	int	bitbuf
op	7:31	0:0	2	=
water	7:33	0:0	2	0
decl	8:4	8:37	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:37	2	int	v
water	8:12	0:0	2	,
decl	8:4	8:37	2	int	offset
water	8:20	0:0	2	,
decl	8:4	8:37	2	int	count
water	8:27	0:0	2	,
decl	8:4	8:37	2	int	segments
water	10:4	0:0	2	segments
op	10:13	0:0	2	=
call	10:15	10:39	2	bytestream_get_le16
arg	10:35	10:39	3	&src
op	10:35	0:0	4	&
water	10:36	0:0	4	src
water	10:40	0:0	2	;
while	11:4	43:4	2	(segments --)
cond	11:11	11:19	3	segments --
water	11:11	0:0	4	segments
op	11:19	0:0	4	--
stmts	11:23	43:4	3	
water	11:23	0:0	4	{
if	12:8	17:8	4	(mask == 0 x10000)
cond	12:12	12:21	5	mask == 0 x10000
water	12:12	0:0	6	mask
op	12:17	0:0	6	==
water	12:20	0:0	6	0
water	12:21	0:0	6	x10000
stmts	12:29	17:8	5	
water	12:29	0:0	6	{
if	13:12	14:25	6	(src >= src_end)
cond	13:16	13:23	7	src >= src_end
water	13:16	0:0	8	src
op	13:20	0:0	8	>=
water	13:23	0:0	8	src_end
stmts	14:16	14:25	7	
return	14:16	14:25	8	-1
op	14:23	0:0	9	-
water	14:24	0:0	9	1
water	15:12	0:0	6	bitbuf
op	15:19	0:0	6	=
call	15:21	15:45	6	bytestream_get_le16
arg	15:41	15:45	7	&src
op	15:41	0:0	8	&
water	15:42	0:0	8	src
water	15:46	0:0	6	;
water	16:12	0:0	6	mask
op	16:17	0:0	6	=
water	16:19	0:0	6	1
water	16:20	0:0	6	;
water	17:8	0:0	6	}
if	18:8	19:21	4	(src_end - src < 2 || frame_end - frame < 2)
cond	18:12	18:53	5	src_end - src < 2 || frame_end - frame < 2
water	18:12	0:0	6	src_end
op	18:20	0:0	6	-
water	18:22	0:0	6	src
op	18:26	0:0	6	<
water	18:28	0:0	6	2
op	18:30	0:0	6	||
water	18:33	0:0	6	frame_end
op	18:43	0:0	6	-
water	18:45	0:0	6	frame
op	18:51	0:0	6	<
water	18:53	0:0	6	2
stmts	19:12	19:21	5	
return	19:12	19:21	6	-1
op	19:19	0:0	7	-
water	19:20	0:0	7	1
if	20:8	32:8	4	(bitbuf & mask)
cond	20:12	20:21	5	bitbuf & mask
water	20:12	0:0	6	bitbuf
op	20:19	0:0	6	&
water	20:21	0:0	6	mask
stmts	20:27	32:8	5	
water	20:27	0:0	6	{
water	21:12	0:0	6	v
op	21:14	0:0	6	=
call	21:16	21:40	6	bytestream_get_le16
arg	21:36	21:40	7	&src
op	21:36	0:0	8	&
water	21:37	0:0	8	src
water	21:41	0:0	6	;
water	22:12	0:0	6	offset
op	22:19	0:0	6	=
water	22:21	0:0	6	(
water	22:22	0:0	6	v
op	22:24	0:0	6	&
water	22:26	0:0	6	0
water	22:27	0:0	6	x1FFF
water	22:32	0:0	6	)
op	22:34	0:0	6	<<
water	22:37	0:0	6	2
water	22:38	0:0	6	;
water	23:12	0:0	6	count
op	23:18	0:0	6	=
water	23:20	0:0	6	(
water	23:21	0:0	6	(
water	23:22	0:0	6	v
op	23:24	0:0	6	>>
water	23:27	0:0	6	13
water	23:29	0:0	6	)
op	23:31	0:0	6	+
water	23:33	0:0	6	2
water	23:34	0:0	6	)
op	23:36	0:0	6	<<
water	23:39	0:0	6	1
water	23:40	0:0	6	;
if	24:12	25:25	6	(frame - frame_start < offset || frame_end - frame < count * 2 + width)
cond	24:16	24:78	7	frame - frame_start < offset || frame_end - frame < count * 2 + width
water	24:16	0:0	8	frame
op	24:22	0:0	8	-
water	24:24	0:0	8	frame_start
op	24:36	0:0	8	<
water	24:38	0:0	8	offset
op	24:45	0:0	8	||
water	24:48	0:0	8	frame_end
op	24:58	0:0	8	-
water	24:60	0:0	8	frame
op	24:66	0:0	8	<
water	24:68	0:0	8	count
op	24:73	0:0	8	*
water	24:74	0:0	8	2
op	24:76	0:0	8	+
water	24:78	0:0	8	width
stmts	25:16	25:25	7	
return	25:16	25:25	8	-1
op	25:23	0:0	9	-
water	25:24	0:0	9	1
for	26:12	31:12	6	(i = 0 ;i < count;i ++)
forinit	26:17	26:22	7	i = 0 ;
water	26:17	0:0	8	i
op	26:19	0:0	8	=
water	26:21	0:0	8	0
water	26:22	0:0	8	;
cond	26:24	26:28	7	i < count
water	26:24	0:0	8	i
op	26:26	0:0	8	<
water	26:28	0:0	8	count
forexpr	26:35	26:36	7	i ++
water	26:35	0:0	8	i
op	26:36	0:0	8	++
stmts	26:40	31:12	7	
water	26:40	0:0	8	{
water	27:16	0:0	8	frame
op	27:21	0:0	8	[
water	27:22	0:0	8	0
op	27:23	0:0	8	]
op	27:25	0:0	8	=
water	27:27	0:0	8	frame
op	27:32	0:0	8	[
water	27:33	0:0	8	1
op	27:34	0:0	8	]
op	27:36	0:0	8	=
water	28:16	0:0	8	frame
op	28:21	0:0	8	[
water	28:22	0:0	8	width
op	28:27	0:0	8	]
op	28:29	0:0	8	=
water	28:31	0:0	8	frame
op	28:36	0:0	8	[
water	28:37	0:0	8	width
op	28:43	0:0	8	+
water	28:45	0:0	8	1
op	28:46	0:0	8	]
op	28:48	0:0	8	=
water	28:50	0:0	8	frame
op	28:55	0:0	8	[
op	28:56	0:0	8	-
water	28:57	0:0	8	offset
op	28:63	0:0	8	]
water	28:64	0:0	8	;
water	30:16	0:0	8	frame
op	30:22	0:0	8	+=
water	30:25	0:0	8	2
water	30:26	0:0	8	;
water	31:12	0:0	8	}
water	32:8	0:0	6	}
else	32:10	34:8	4
stmts	32:15	34:8	5	
if	32:15	34:8	6	(bitbuf & ( mask << 1 ))
cond	32:19	32:38	7	bitbuf & ( mask << 1 )
water	32:19	0:0	8	bitbuf
op	32:26	0:0	8	&
water	32:28	0:0	8	(
water	32:29	0:0	8	mask
op	32:34	0:0	8	<<
water	32:37	0:0	8	1
water	32:38	0:0	8	)
stmts	32:41	34:8	7	
water	32:41	0:0	8	{
water	33:12	0:0	8	frame
op	33:18	0:0	8	+=
call	33:21	33:45	8	bytestream_get_le16
arg	33:41	33:45	9	&src
op	33:41	0:0	10	&
water	33:42	0:0	10	src
op	33:47	0:0	8	*
water	33:49	0:0	8	2
water	33:50	0:0	8	;
water	34:8	0:0	8	}
else	34:10	41:8	4
stmts	34:15	41:8	5	
water	34:15	0:0	6	{
water	35:12	0:0	6	frame
op	35:17	0:0	6	[
water	35:18	0:0	6	0
op	35:19	0:0	6	]
op	35:21	0:0	6	=
water	35:23	0:0	6	frame
op	35:28	0:0	6	[
water	35:29	0:0	6	1
op	35:30	0:0	6	]
op	35:32	0:0	6	=
water	36:12	0:0	6	frame
op	36:17	0:0	6	[
water	36:18	0:0	6	width
op	36:23	0:0	6	]
op	36:25	0:0	6	=
water	36:27	0:0	6	frame
op	36:32	0:0	6	[
water	36:33	0:0	6	width
op	36:39	0:0	6	+
water	36:41	0:0	6	1
op	36:42	0:0	6	]
op	36:44	0:0	6	=
op	36:47	0:0	6	*
water	36:48	0:0	6	src
op	36:51	0:0	6	++
water	36:53	0:0	6	;
water	37:12	0:0	6	frame
op	37:18	0:0	6	+=
water	37:21	0:0	6	2
water	37:22	0:0	6	;
water	38:12	0:0	6	frame
op	38:17	0:0	6	[
water	38:18	0:0	6	0
op	38:19	0:0	6	]
op	38:21	0:0	6	=
water	38:23	0:0	6	frame
op	38:28	0:0	6	[
water	38:29	0:0	6	1
op	38:30	0:0	6	]
op	38:32	0:0	6	=
water	39:12	0:0	6	frame
op	39:17	0:0	6	[
water	39:18	0:0	6	width
op	39:23	0:0	6	]
op	39:25	0:0	6	=
water	39:27	0:0	6	frame
op	39:32	0:0	6	[
water	39:33	0:0	6	width
op	39:39	0:0	6	+
water	39:41	0:0	6	1
op	39:42	0:0	6	]
op	39:44	0:0	6	=
op	39:47	0:0	6	*
water	39:48	0:0	6	src
op	39:51	0:0	6	++
water	39:53	0:0	6	;
water	40:12	0:0	6	frame
op	40:18	0:0	6	+=
water	40:21	0:0	6	2
water	40:22	0:0	6	;
water	41:8	0:0	6	}
water	42:8	0:0	4	mask
op	42:13	0:0	4	<<=
water	42:17	0:0	4	2
water	42:18	0:0	4	;
water	43:4	0:0	4	}
return	45:4	45:12	2	0
water	45:11	0:0	3	0
