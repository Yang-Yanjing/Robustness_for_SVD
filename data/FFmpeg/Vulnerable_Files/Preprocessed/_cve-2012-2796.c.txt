func	5:0	229:0	0	static int	vc1_decode_frame
params	5:27	0:0	1	
param	5:28	5:49	2	AVCodecContext *	avctx
param	6:28	6:38	2	void *	data
param	6:40	6:54	2	int *	data_size
param	7:28	7:43	2	AVPacket *	avpkt
stmnts	0:0	228:13	1	
decl	9:4	9:36	2	const uint8_t	*buf
op	9:23	0:0	2	=
water	9:25	0:0	2	avpkt
op	9:30	0:0	2	->
water	9:32	0:0	2	data
decl	10:4	10:47	2	int	buf_size
op	10:17	0:0	2	=
water	10:19	0:0	2	avpkt
op	10:24	0:0	2	->
water	10:26	0:0	2	size
water	10:30	0:0	2	,
decl	10:4	10:47	2	int	n_slices
op	10:41	0:0	2	=
water	10:43	0:0	2	0
water	10:44	0:0	2	,
decl	10:4	10:47	2	int	i
decl	11:4	11:36	2	VC1Context	*v
op	11:18	0:0	2	=
water	11:20	0:0	2	avctx
op	11:25	0:0	2	->
water	11:27	0:0	2	priv_data
decl	12:4	12:29	2	MpegEncContext	*s
op	12:22	0:0	2	=
op	12:24	0:0	2	&
water	12:25	0:0	2	v
op	12:26	0:0	2	->
water	12:28	0:0	2	s
decl	13:4	13:24	2	AVFrame	*pict
op	13:18	0:0	2	=
water	13:20	0:0	2	data
decl	14:4	14:24	2	uint8_t	*buf2
op	14:18	0:0	2	=
water	14:20	0:0	2	NULL
decl	15:4	15:34	2	const uint8_t	*buf_start
op	15:29	0:0	2	=
water	15:31	0:0	2	buf
struct	16:4	20:4	2	<anonymous_16:4>
decl	17:8	17:20	3	uint8_t	*buf
decl	18:8	18:24	3	GetBitContext	gb
decl	19:8	19:21	3	int	mby_start
decl	16:4	20:20	2	<anonymous_16:4>	*slices
op	20:14	0:0	2	=
water	20:16	0:0	2	NULL
if	23:4	33:4	2	(buf_size == 0 || ( buf_size == 4 &&AV_RB32 (buf ) == VC1_CODE_ENDOFSEQ ))
cond	23:8	23:76	3	buf_size == 0 || ( buf_size == 4 &&AV_RB32 (buf ) == VC1_CODE_ENDOFSEQ )
water	23:8	0:0	4	buf_size
op	23:17	0:0	4	==
water	23:20	0:0	4	0
op	23:22	0:0	4	||
water	23:25	0:0	4	(
water	23:26	0:0	4	buf_size
op	23:35	0:0	4	==
water	23:38	0:0	4	4
op	23:40	0:0	4	&&
call	23:43	23:54	4	AV_RB32
arg	23:51	23:54	5	buf
water	23:51	0:0	6	buf
op	23:56	0:0	4	==
water	23:59	0:0	4	VC1_CODE_ENDOFSEQ
water	23:76	0:0	4	)
stmts	23:79	33:4	3	
water	23:79	0:0	4	{
if	25:8	30:8	4	(s -> low_delay == 0 && s -> next_picture_ptr)
cond	25:12	25:34	5	s -> low_delay == 0 && s -> next_picture_ptr
water	25:12	0:0	6	s
op	25:13	0:0	6	->
water	25:15	0:0	6	low_delay
op	25:24	0:0	6	==
water	25:26	0:0	6	0
op	25:28	0:0	6	&&
water	25:31	0:0	6	s
op	25:32	0:0	6	->
water	25:34	0:0	6	next_picture_ptr
stmts	25:52	30:8	5	
water	25:52	0:0	6	{
op	26:12	0:0	6	*
water	26:13	0:0	6	pict
op	26:17	0:0	6	=
op	26:19	0:0	6	*
water	26:20	0:0	6	(
water	26:21	0:0	6	AVFrame
op	26:28	0:0	6	*
water	26:29	0:0	6	)
water	26:30	0:0	6	s
op	26:31	0:0	6	->
water	26:33	0:0	6	next_picture_ptr
water	26:49	0:0	6	;
water	27:12	0:0	6	s
op	27:13	0:0	6	->
water	27:15	0:0	6	next_picture_ptr
op	27:31	0:0	6	=
water	27:33	0:0	6	NULL
water	27:37	0:0	6	;
op	29:12	0:0	6	*
water	29:13	0:0	6	data_size
op	29:23	0:0	6	=
op	29:25	0:0	6	sizeof
water	29:31	0:0	6	(
water	29:32	0:0	6	AVFrame
water	29:39	0:0	6	)
water	29:40	0:0	6	;
water	30:8	0:0	6	}
return	32:8	32:16	4	0
water	32:15	0:0	5	0
water	33:4	0:0	4	}
if	37:4	40:4	2	(s -> current_picture_ptr == NULL || s -> current_picture_ptr -> data [ 0 ])
cond	37:7	37:69	3	s -> current_picture_ptr == NULL || s -> current_picture_ptr -> data [ 0 ]
water	37:7	0:0	4	s
op	37:8	0:0	4	->
water	37:10	0:0	4	current_picture_ptr
op	37:29	0:0	4	==
water	37:31	0:0	4	NULL
op	37:36	0:0	4	||
water	37:39	0:0	4	s
op	37:40	0:0	4	->
water	37:42	0:0	4	current_picture_ptr
op	37:61	0:0	4	->
water	37:63	0:0	4	data
op	37:67	0:0	4	[
water	37:68	0:0	4	0
op	37:69	0:0	4	]
stmts	37:71	40:4	3	
water	37:71	0:0	4	{
decl	38:8	38:43	4	int	i
op	38:13	0:0	4	=
call	38:15	38:42	5	ff_find_unused_picture
arg	38:38	38:39	6	s
water	38:38	0:0	7	s
arg	38:41	38:42	6	0
water	38:41	0:0	7	0
water	39:8	0:0	4	s
op	39:9	0:0	4	->
water	39:11	0:0	4	current_picture_ptr
op	39:30	0:0	4	=
op	39:32	0:0	4	&
water	39:33	0:0	4	s
op	39:34	0:0	4	->
water	39:36	0:0	4	picture
op	39:43	0:0	4	[
water	39:44	0:0	4	i
op	39:45	0:0	4	]
water	39:46	0:0	4	;
water	40:4	0:0	4	}
if	42:4	47:4	2	(s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU)
cond	42:8	42:38	3	s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU
water	42:8	0:0	4	s
op	42:9	0:0	4	->
water	42:11	0:0	4	avctx
op	42:16	0:0	4	->
water	42:18	0:0	4	codec
op	42:23	0:0	4	->
water	42:25	0:0	4	capabilities
op	42:37	0:0	4	&
water	42:38	0:0	4	CODEC_CAP_HWACCEL_VDPAU
stmts	42:62	47:4	3	
water	42:62	0:0	4	{
if	43:8	44:47	4	(v -> profile < PROFILE_ADVANCED)
cond	43:12	43:25	5	v -> profile < PROFILE_ADVANCED
water	43:12	0:0	6	v
op	43:13	0:0	6	->
water	43:15	0:0	6	profile
op	43:23	0:0	6	<
water	43:25	0:0	6	PROFILE_ADVANCED
stmts	44:12	44:47	5	
water	44:12	0:0	6	avctx
op	44:17	0:0	6	->
water	44:19	0:0	6	pix_fmt
op	44:27	0:0	6	=
water	44:29	0:0	6	PIX_FMT_VDPAU_WMV3
water	44:47	0:0	6	;
else	45:8	46:46	4
stmts	46:12	46:46	5	
water	46:12	0:0	6	avctx
op	46:17	0:0	6	->
water	46:19	0:0	6	pix_fmt
op	46:27	0:0	6	=
water	46:29	0:0	6	PIX_FMT_VDPAU_VC1
water	46:46	0:0	6	;
water	47:4	0:0	4	}
if	50:4	109:4	2	(avctx -> codec_id == CODEC_ID_VC1)
cond	50:8	50:27	3	avctx -> codec_id == CODEC_ID_VC1
water	50:8	0:0	4	avctx
op	50:13	0:0	4	->
water	50:15	0:0	4	codec_id
op	50:24	0:0	4	==
water	50:27	0:0	4	CODEC_ID_VC1
stmts	50:41	109:4	3	
water	50:41	0:0	4	{
decl	51:8	51:25	4	int	buf_size2
op	51:22	0:0	4	=
water	51:24	0:0	4	0
water	52:8	0:0	4	buf2
op	52:13	0:0	4	=
call	52:15	52:65	4	av_mallocz
arg	52:26	52:65	5	buf_size+FF_INPUT_BUFFER_PADDING_SIZE
water	52:26	0:0	6	buf_size
op	52:35	0:0	6	+
water	52:37	0:0	6	FF_INPUT_BUFFER_PADDING_SIZE
water	52:66	0:0	4	;
if	54:8	91:8	4	(IS_MARKER (AV_RB32 (buf ) ))
cond	54:11	54:33	5	IS_MARKER (AV_RB32 (buf ) )
call	54:11	54:33	6	IS_MARKER
arg	54:21	54:33	7	AV_RB32(buf)
call	54:21	54:32	8	AV_RB32
arg	54:29	54:32	9	buf
water	54:29	0:0	10	buf
stmts	54:35	91:8	5	
water	54:35	0:0	6	{
decl	55:12	55:45	6	const uint8_t	*start
water	55:32	0:0	6	,
decl	55:12	55:45	6	const uint8_t	*end
water	55:38	0:0	6	,
decl	55:12	55:45	6	const uint8_t	*next
decl	56:12	56:20	6	int	size
water	58:12	0:0	6	next
op	58:17	0:0	6	=
water	58:19	0:0	6	buf
water	58:22	0:0	6	;
for	59:12	90:12	6	(start = buf , end = buf + buf_size ;next < end;start = next)
forinit	59:16	59:49	7	start = buf , end = buf + buf_size ;
water	59:16	0:0	8	start
op	59:22	0:0	8	=
water	59:24	0:0	8	buf
water	59:27	0:0	8	,
water	59:29	0:0	8	end
op	59:33	0:0	8	=
water	59:35	0:0	8	buf
op	59:39	0:0	8	+
water	59:41	0:0	8	buf_size
water	59:49	0:0	8	;
cond	59:51	59:58	7	next < end
water	59:51	0:0	8	next
op	59:56	0:0	8	<
water	59:58	0:0	8	end
forexpr	59:63	59:71	7	start = next
water	59:63	0:0	8	start
op	59:69	0:0	8	=
water	59:71	0:0	8	next
stmts	59:76	90:12	7	
water	59:76	0:0	8	{
water	60:16	0:0	8	next
op	60:21	0:0	8	=
call	60:23	60:54	8	find_next_marker
arg	60:40	60:49	9	start+4
water	60:40	0:0	10	start
op	60:46	0:0	10	+
water	60:48	0:0	10	4
arg	60:51	60:54	9	end
water	60:51	0:0	10	end
water	60:55	0:0	8	;
water	61:16	0:0	8	size
op	61:21	0:0	8	=
water	61:23	0:0	8	next
op	61:28	0:0	8	-
water	61:30	0:0	8	start
op	61:36	0:0	8	-
water	61:38	0:0	8	4
water	61:39	0:0	8	;
if	62:16	62:38	8	(size <= 0)
cond	62:19	62:27	9	size <= 0
water	62:19	0:0	10	size
op	62:24	0:0	10	<=
water	62:27	0:0	10	0
stmts	62:30	62:38	9	
continue	62:30	62:38	10	
switch	63:16	89:16	8	(AV_RB32 (start ))
cond	63:23	63:36	9	AV_RB32 (start )
call	63:23	63:36	10	AV_RB32
arg	63:31	63:36	11	start
water	63:31	0:0	12	start
stmts	63:38	89:16	9	
water	63:38	0:0	10	{
label	64:16	64:35	10	case VC1_CODE_FRAME :
if	65:20	67:41	10	(avctx -> hwaccel || s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU)
cond	65:24	66:54	11	avctx -> hwaccel || s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU
water	65:24	0:0	12	avctx
op	65:29	0:0	12	->
water	65:31	0:0	12	hwaccel
op	65:39	0:0	12	||
water	66:24	0:0	12	s
op	66:25	0:0	12	->
water	66:27	0:0	12	avctx
op	66:32	0:0	12	->
water	66:34	0:0	12	codec
op	66:39	0:0	12	->
water	66:41	0:0	12	capabilities
op	66:53	0:0	12	&
water	66:54	0:0	12	CODEC_CAP_HWACCEL_VDPAU
stmts	67:24	67:41	11	
water	67:24	0:0	12	buf_start
op	67:34	0:0	12	=
water	67:36	0:0	12	start
water	67:41	0:0	12	;
water	68:20	0:0	10	buf_size2
op	68:30	0:0	10	=
call	68:32	68:73	10	vc1_unescape_buffer
arg	68:52	68:61	11	start+4
water	68:52	0:0	12	start
op	68:58	0:0	12	+
water	68:60	0:0	12	4
arg	68:63	68:67	11	size
water	68:63	0:0	12	size
arg	68:69	68:73	11	buf2
water	68:69	0:0	12	buf2
water	68:74	0:0	10	;
break	69:20	69:25	10	
label	70:16	70:40	10	case VC1_CODE_ENTRYPOINT :
water	71:20	0:0	10	buf_size2
op	71:30	0:0	10	=
call	71:32	71:73	10	vc1_unescape_buffer
arg	71:52	71:61	11	start+4
water	71:52	0:0	12	start
op	71:58	0:0	12	+
water	71:60	0:0	12	4
arg	71:63	71:67	11	size
water	71:63	0:0	12	size
arg	71:69	71:73	11	buf2
water	71:69	0:0	12	buf2
water	71:74	0:0	10	;
call	72:20	72:59	10	init_get_bits
arg	72:34	72:40	11	&s->gb
op	72:34	0:0	12	&
water	72:35	0:0	12	s
op	72:36	0:0	12	->
water	72:38	0:0	12	gb
arg	72:42	72:46	11	buf2
water	72:42	0:0	12	buf2
arg	72:48	72:59	11	buf_size2*8
water	72:48	0:0	12	buf_size2
op	72:57	0:0	12	*
water	72:58	0:0	12	8
water	72:60	0:0	10	;
call	73:20	73:59	10	vc1_decode_entry_point
arg	73:43	73:48	11	avctx
water	73:43	0:0	12	avctx
arg	73:50	73:51	11	v
water	73:50	0:0	12	v
arg	73:53	73:59	11	&s->gb
op	73:53	0:0	12	&
water	73:54	0:0	12	s
op	73:55	0:0	12	->
water	73:57	0:0	12	gb
water	73:60	0:0	10	;
break	74:20	74:25	10	
label	75:16	75:35	10	case VC1_CODE_SLICE :
water	75:37	0:0	10	{
decl	76:20	76:33	10	int	buf_size3
water	77:20	0:0	10	slices
op	77:27	0:0	10	=
call	77:29	77:78	10	av_realloc
arg	77:40	77:46	11	slices
water	77:40	0:0	12	slices
arg	77:48	77:78	11	sizeof(*slices)*(n_slices+1)
op	77:48	0:0	12	sizeof
water	77:54	0:0	12	(
op	77:55	0:0	12	*
water	77:56	0:0	12	slices
water	77:62	0:0	12	)
op	77:64	0:0	12	*
water	77:66	0:0	12	(
water	77:67	0:0	12	n_slices
op	77:75	0:0	12	+
water	77:76	0:0	12	1
water	77:77	0:0	12	)
water	77:79	0:0	10	;
if	78:20	78:41	10	(! slices)
cond	78:24	78:25	11	! slices
op	78:24	0:0	12	!
water	78:25	0:0	12	slices
stmts	78:33	78:41	11	
goto	78:33	78:41	12	err
water	78:38	0:0	13	err
water	79:20	0:0	10	slices
op	79:26	0:0	10	[
water	79:27	0:0	10	n_slices
op	79:35	0:0	10	]
op	79:36	0:0	10	.
water	79:37	0:0	10	buf
op	79:41	0:0	10	=
call	79:43	79:93	10	av_mallocz
arg	79:54	79:93	11	buf_size+FF_INPUT_BUFFER_PADDING_SIZE
water	79:54	0:0	12	buf_size
op	79:63	0:0	12	+
water	79:65	0:0	12	FF_INPUT_BUFFER_PADDING_SIZE
water	79:94	0:0	10	;
if	80:20	80:55	10	(! slices [ n_slices ] . buf)
cond	80:24	80:42	11	! slices [ n_slices ] . buf
op	80:24	0:0	12	!
water	80:25	0:0	12	slices
op	80:31	0:0	12	[
water	80:32	0:0	12	n_slices
op	80:40	0:0	12	]
op	80:41	0:0	12	.
water	80:42	0:0	12	buf
stmts	80:47	80:55	11	
goto	80:47	80:55	12	err
water	80:52	0:0	13	err
water	81:20	0:0	10	buf_size3
op	81:30	0:0	10	=
call	81:32	82:72	10	vc1_unescape_buffer
arg	81:52	81:61	11	start+4
water	81:52	0:0	12	start
op	81:58	0:0	12	+
water	81:60	0:0	12	4
arg	81:63	81:67	11	size
water	81:63	0:0	12	size
arg	82:52	82:72	11	slices[n_slices].buf
water	82:52	0:0	12	slices
op	82:58	0:0	12	[
water	82:59	0:0	12	n_slices
op	82:67	0:0	12	]
op	82:68	0:0	12	.
water	82:69	0:0	12	buf
water	82:73	0:0	10	;
call	83:20	84:48	10	init_get_bits
arg	83:34	83:54	11	&slices[n_slices].gb
op	83:34	0:0	12	&
water	83:35	0:0	12	slices
op	83:41	0:0	12	[
water	83:42	0:0	12	n_slices
op	83:50	0:0	12	]
op	83:51	0:0	12	.
water	83:52	0:0	12	gb
arg	83:56	83:76	11	slices[n_slices].buf
water	83:56	0:0	12	slices
op	83:62	0:0	12	[
water	83:63	0:0	12	n_slices
op	83:71	0:0	12	]
op	83:72	0:0	12	.
water	83:73	0:0	12	buf
arg	84:34	84:48	11	buf_size3<<3
water	84:34	0:0	12	buf_size3
op	84:44	0:0	12	<<
water	84:47	0:0	12	3
water	84:49	0:0	10	;
water	85:20	0:0	10	slices
op	85:26	0:0	10	[
water	85:27	0:0	10	n_slices
op	85:35	0:0	10	]
op	85:36	0:0	10	.
water	85:37	0:0	10	mby_start
op	85:47	0:0	10	=
call	85:49	85:81	10	get_bits
arg	85:58	85:78	11	&slices[n_slices].gb
op	85:58	0:0	12	&
water	85:59	0:0	12	slices
op	85:65	0:0	12	[
water	85:66	0:0	12	n_slices
op	85:74	0:0	12	]
op	85:75	0:0	12	.
water	85:76	0:0	12	gb
arg	85:80	85:81	11	9
water	85:80	0:0	12	9
water	85:82	0:0	10	;
water	86:20	0:0	10	n_slices
op	86:28	0:0	10	++
water	86:30	0:0	10	;
break	87:20	87:25	10	
water	88:16	0:0	10	}
water	89:16	0:0	10	}
water	90:12	0:0	8	}
water	91:8	0:0	6	}
else	91:9	105:8	4
stmts	91:14	105:8	5	
if	91:14	105:8	6	(v -> interlace && ( ( buf [ 0 ] & 0 xC0 ) == 0 xC0 ))
cond	91:17	91:57	7	v -> interlace && ( ( buf [ 0 ] & 0 xC0 ) == 0 xC0 )
water	91:17	0:0	8	v
op	91:18	0:0	8	->
water	91:20	0:0	8	interlace
op	91:30	0:0	8	&&
water	91:33	0:0	8	(
water	91:34	0:0	8	(
water	91:35	0:0	8	buf
op	91:38	0:0	8	[
water	91:39	0:0	8	0
op	91:40	0:0	8	]
op	91:42	0:0	8	&
water	91:44	0:0	8	0
water	91:45	0:0	8	xC0
water	91:48	0:0	8	)
op	91:50	0:0	8	==
water	91:53	0:0	8	0
water	91:54	0:0	8	xC0
water	91:57	0:0	8	)
stmts	91:59	105:8	7	
water	91:59	0:0	8	{
decl	92:12	92:34	8	const uint8_t	*divider
water	94:12	0:0	8	divider
op	94:20	0:0	8	=
call	94:22	94:58	8	find_next_marker
arg	94:39	94:42	9	buf
water	94:39	0:0	10	buf
arg	94:44	94:58	9	buf+buf_size
water	94:44	0:0	10	buf
op	94:48	0:0	10	+
water	94:50	0:0	10	buf_size
water	94:59	0:0	8	;
if	95:12	98:12	8	(( divider == ( buf + buf_size ) ) ||AV_RB32 (divider ) != VC1_CODE_FIELD)
cond	95:15	95:68	9	( divider == ( buf + buf_size ) ) ||AV_RB32 (divider ) != VC1_CODE_FIELD
water	95:15	0:0	10	(
water	95:16	0:0	10	divider
op	95:24	0:0	10	==
water	95:27	0:0	10	(
water	95:28	0:0	10	buf
op	95:32	0:0	10	+
water	95:34	0:0	10	buf_size
water	95:42	0:0	10	)
water	95:43	0:0	10	)
op	95:45	0:0	10	||
call	95:48	95:63	10	AV_RB32
arg	95:56	95:63	11	divider
water	95:56	0:0	12	divider
op	95:65	0:0	10	!=
water	95:68	0:0	10	VC1_CODE_FIELD
stmts	95:83	98:12	9	
water	95:83	0:0	10	{
call	96:16	96:78	10	av_log
arg	96:23	96:28	11	avctx
water	96:23	0:0	12	avctx
arg	96:30	96:42	11	AV_LOG_ERROR
water	96:30	0:0	12	AV_LOG_ERROR
arg	96:44	96:78	11	"Error in WVC1 interlaced frame\n"
water	96:44	0:0	12	"Error in WVC1 interlaced frame\n"
water	96:79	0:0	10	;
goto	97:16	97:24	10	err
water	97:21	0:0	11	err
water	98:12	0:0	10	}
water	100:12	0:0	8	buf_size2
op	100:22	0:0	8	=
call	100:24	100:68	8	vc1_unescape_buffer
arg	100:44	100:47	9	buf
water	100:44	0:0	10	buf
arg	100:49	100:62	9	divider-buf
water	100:49	0:0	10	divider
op	100:57	0:0	10	-
water	100:59	0:0	10	buf
arg	100:64	100:68	9	buf2
water	100:64	0:0	10	buf2
water	100:69	0:0	8	;
if	102:12	103:96	8	(! v -> warn_interlaced ++)
cond	102:15	102:34	9	! v -> warn_interlaced ++
op	102:15	0:0	10	!
water	102:16	0:0	10	v
op	102:17	0:0	10	->
water	102:19	0:0	10	warn_interlaced
op	102:34	0:0	10	++
stmts	103:16	103:96	9	
call	103:16	103:95	10	av_log
arg	103:23	103:33	11	v->s.avctx
water	103:23	0:0	12	v
op	103:24	0:0	12	->
water	103:26	0:0	12	s
op	103:27	0:0	12	.
water	103:28	0:0	12	avctx
arg	103:35	103:47	11	AV_LOG_ERROR
water	103:35	0:0	12	AV_LOG_ERROR
arg	103:49	103:95	11	"Interlaced WVC1 support is not implemented\n"
water	103:49	0:0	12	"Interlaced WVC1 support is not implemented\n"
water	103:96	0:0	10	;
goto	104:12	104:20	8	err
water	104:17	0:0	9	err
water	105:8	0:0	8	}
else	105:9	107:8	4
stmts	105:13	107:8	5	
water	105:13	0:0	6	{
water	106:12	0:0	6	buf_size2
op	106:22	0:0	6	=
call	106:24	106:63	6	vc1_unescape_buffer
arg	106:44	106:47	7	buf
water	106:44	0:0	8	buf
arg	106:49	106:57	7	buf_size
water	106:49	0:0	8	buf_size
arg	106:59	106:63	7	buf2
water	106:59	0:0	8	buf2
water	106:64	0:0	6	;
water	107:8	0:0	6	}
call	108:8	108:47	4	init_get_bits
arg	108:22	108:28	5	&s->gb
op	108:22	0:0	6	&
water	108:23	0:0	6	s
op	108:24	0:0	6	->
water	108:26	0:0	6	gb
arg	108:30	108:34	5	buf2
water	108:30	0:0	6	buf2
arg	108:36	108:47	5	buf_size2*8
water	108:36	0:0	6	buf_size2
op	108:45	0:0	6	*
water	108:46	0:0	6	8
water	108:48	0:0	4	;
water	109:4	0:0	4	}
else	109:6	110:46	2
stmts	110:8	110:46	3	
call	110:8	110:45	4	init_get_bits
arg	110:22	110:28	5	&s->gb
op	110:22	0:0	6	&
water	110:23	0:0	6	s
op	110:24	0:0	6	->
water	110:26	0:0	6	gb
arg	110:30	110:33	5	buf
water	110:30	0:0	6	buf
arg	110:35	110:45	5	buf_size*8
water	110:35	0:0	6	buf_size
op	110:43	0:0	6	*
water	110:44	0:0	6	8
water	110:46	0:0	4	;
if	112:4	117:4	2	(v -> res_sprite)
cond	112:8	112:11	3	v -> res_sprite
water	112:8	0:0	4	v
op	112:9	0:0	4	->
water	112:11	0:0	4	res_sprite
stmts	112:23	117:4	3	
water	112:23	0:0	4	{
water	113:8	0:0	4	v
op	113:9	0:0	4	->
water	113:11	0:0	4	new_sprite
op	113:22	0:0	4	=
op	113:24	0:0	4	!
call	113:25	113:41	4	get_bits1
arg	113:35	113:41	5	&s->gb
op	113:35	0:0	6	&
water	113:36	0:0	6	s
op	113:37	0:0	6	->
water	113:39	0:0	6	gb
water	113:42	0:0	4	;
water	114:8	0:0	4	v
op	114:9	0:0	4	->
water	114:11	0:0	4	two_sprites
op	114:23	0:0	4	=
call	114:25	114:41	4	get_bits1
arg	114:35	114:41	5	&s->gb
op	114:35	0:0	6	&
water	114:36	0:0	6	s
op	114:37	0:0	6	->
water	114:39	0:0	6	gb
water	114:42	0:0	4	;
if	115:8	116:20	4	(! v -> new_sprite)
cond	115:12	115:16	5	! v -> new_sprite
op	115:12	0:0	6	!
water	115:13	0:0	6	v
op	115:14	0:0	6	->
water	115:16	0:0	6	new_sprite
stmts	116:12	116:20	5	
goto	116:12	116:20	6	end
water	116:17	0:0	7	end
water	117:4	0:0	4	}
if	120:4	124:4	2	(v -> profile < PROFILE_ADVANCED)
cond	120:7	120:20	3	v -> profile < PROFILE_ADVANCED
water	120:7	0:0	4	v
op	120:8	0:0	4	->
water	120:10	0:0	4	profile
op	120:18	0:0	4	<
water	120:20	0:0	4	PROFILE_ADVANCED
stmts	120:38	124:4	3	
water	120:38	0:0	4	{
if	121:8	123:8	4	(vc1_parse_frame_header (v ,& s -> gb ) == - 1)
cond	121:11	121:49	5	vc1_parse_frame_header (v ,& s -> gb ) == - 1
call	121:11	121:43	6	vc1_parse_frame_header
arg	121:34	121:35	7	v
water	121:34	0:0	8	v
arg	121:37	121:43	7	&s->gb
op	121:37	0:0	8	&
water	121:38	0:0	8	s
op	121:39	0:0	8	->
water	121:41	0:0	8	gb
op	121:45	0:0	6	==
op	121:48	0:0	6	-
water	121:49	0:0	6	1
stmts	121:52	123:8	5	
water	121:52	0:0	6	{
goto	122:12	122:20	6	err
water	122:17	0:0	7	err
water	123:8	0:0	6	}
water	124:4	0:0	4	}
else	124:6	128:4	2
stmts	124:11	128:4	3	
water	124:11	0:0	4	{
if	125:8	127:8	4	(vc1_parse_frame_header_adv (v ,& s -> gb ) == - 1)
cond	125:11	125:53	5	vc1_parse_frame_header_adv (v ,& s -> gb ) == - 1
call	125:11	125:47	6	vc1_parse_frame_header_adv
arg	125:38	125:39	7	v
water	125:38	0:0	8	v
arg	125:41	125:47	7	&s->gb
op	125:41	0:0	8	&
water	125:42	0:0	8	s
op	125:43	0:0	8	->
water	125:45	0:0	8	gb
op	125:49	0:0	6	==
op	125:52	0:0	6	-
water	125:53	0:0	6	1
stmts	125:56	127:8	5	
water	125:56	0:0	6	{
goto	126:12	126:20	6	err
water	126:17	0:0	7	err
water	127:8	0:0	6	}
water	128:4	0:0	4	}
if	130:4	132:4	2	(v -> res_sprite && s -> pict_type != AV_PICTURE_TYPE_I)
cond	130:8	130:39	3	v -> res_sprite && s -> pict_type != AV_PICTURE_TYPE_I
water	130:8	0:0	4	v
op	130:9	0:0	4	->
water	130:11	0:0	4	res_sprite
op	130:22	0:0	4	&&
water	130:25	0:0	4	s
op	130:26	0:0	4	->
water	130:28	0:0	4	pict_type
op	130:37	0:0	4	!=
water	130:39	0:0	4	AV_PICTURE_TYPE_I
stmts	130:58	132:4	3	
water	130:58	0:0	4	{
call	131:8	131:79	4	av_log
arg	131:15	131:25	5	v->s.avctx
water	131:15	0:0	6	v
op	131:16	0:0	6	->
water	131:18	0:0	6	s
op	131:19	0:0	6	.
water	131:20	0:0	6	avctx
arg	131:27	131:41	5	AV_LOG_WARNING
water	131:27	0:0	6	AV_LOG_WARNING
arg	131:43	131:79	5	"Sprite decoder: expected I-frame\n"
water	131:43	0:0	6	"Sprite decoder: expected I-frame\n"
water	131:80	0:0	4	;
water	132:4	0:0	4	}
water	134:4	0:0	2	s
op	134:5	0:0	2	->
water	134:7	0:0	2	current_picture_ptr
op	134:26	0:0	2	->
water	134:28	0:0	2	repeat_pict
op	134:40	0:0	2	=
water	134:42	0:0	2	0
water	134:43	0:0	2	;
if	135:4	137:4	2	(v -> rff)
cond	135:8	135:11	3	v -> rff
water	135:8	0:0	4	v
op	135:9	0:0	4	->
water	135:11	0:0	4	rff
stmts	135:15	137:4	3	
water	135:15	0:0	4	{
water	136:8	0:0	4	s
op	136:9	0:0	4	->
water	136:11	0:0	4	current_picture_ptr
op	136:30	0:0	4	->
water	136:32	0:0	4	repeat_pict
op	136:44	0:0	4	=
water	136:46	0:0	4	1
water	136:47	0:0	4	;
water	137:4	0:0	4	}
else	137:5	139:4	2
stmts	137:10	139:4	3	
if	137:10	139:4	4	(v -> rptfrm)
cond	137:14	137:17	5	v -> rptfrm
water	137:14	0:0	6	v
op	137:15	0:0	6	->
water	137:17	0:0	6	rptfrm
stmts	137:24	139:4	5	
water	137:24	0:0	6	{
water	138:8	0:0	6	s
op	138:9	0:0	6	->
water	138:11	0:0	6	current_picture_ptr
op	138:30	0:0	6	->
water	138:32	0:0	6	repeat_pict
op	138:44	0:0	6	=
water	138:46	0:0	6	v
op	138:47	0:0	6	->
water	138:49	0:0	6	rptfrm
op	138:56	0:0	6	*
water	138:58	0:0	6	2
water	138:59	0:0	6	;
water	139:4	0:0	6	}
water	141:4	0:0	2	s
op	141:5	0:0	2	->
water	141:7	0:0	2	current_picture_ptr
op	141:26	0:0	2	->
water	141:28	0:0	2	top_field_first
op	141:44	0:0	2	=
water	141:46	0:0	2	v
op	141:47	0:0	2	->
water	141:49	0:0	2	tff
water	141:52	0:0	2	;
water	144:4	0:0	2	s
op	144:5	0:0	2	->
water	144:7	0:0	2	current_picture
op	144:22	0:0	2	.
water	144:23	0:0	2	pict_type
op	144:32	0:0	2	=
water	144:34	0:0	2	s
op	144:35	0:0	2	->
water	144:37	0:0	2	pict_type
water	144:46	0:0	2	;
water	145:4	0:0	2	s
op	145:5	0:0	2	->
water	145:7	0:0	2	current_picture
op	145:22	0:0	2	.
water	145:23	0:0	2	key_frame
op	145:32	0:0	2	=
water	145:34	0:0	2	s
op	145:35	0:0	2	->
water	145:37	0:0	2	pict_type
op	145:47	0:0	2	==
water	145:50	0:0	2	AV_PICTURE_TYPE_I
water	145:67	0:0	2	;
if	148:4	150:4	2	(s -> last_picture_ptr == NULL && ( s -> pict_type == AV_PICTURE_TYPE_B || s -> dropable ))
cond	148:7	148:83	3	s -> last_picture_ptr == NULL && ( s -> pict_type == AV_PICTURE_TYPE_B || s -> dropable )
water	148:7	0:0	4	s
op	148:8	0:0	4	->
water	148:10	0:0	4	last_picture_ptr
op	148:26	0:0	4	==
water	148:28	0:0	4	NULL
op	148:33	0:0	4	&&
water	148:36	0:0	4	(
water	148:37	0:0	4	s
op	148:38	0:0	4	->
water	148:40	0:0	4	pict_type
op	148:49	0:0	4	==
water	148:51	0:0	4	AV_PICTURE_TYPE_B
op	148:69	0:0	4	||
water	148:72	0:0	4	s
op	148:73	0:0	4	->
water	148:75	0:0	4	dropable
water	148:83	0:0	4	)
stmts	148:85	150:4	3	
water	148:85	0:0	4	{
goto	149:8	149:16	4	err
water	149:13	0:0	5	err
water	150:4	0:0	4	}
if	151:4	155:4	2	(( avctx -> skip_frame >= AVDISCARD_NONREF && s -> pict_type == AV_PICTURE_TYPE_B ) || ( avctx -> skip_frame >= AVDISCARD_NONKEY && s -> pict_type != AV_PICTURE_TYPE_I ) || avctx -> skip_frame >= AVDISCARD_ALL)
cond	151:10	153:32	3	( avctx -> skip_frame >= AVDISCARD_NONREF && s -> pict_type == AV_PICTURE_TYPE_B ) || ( avctx -> skip_frame >= AVDISCARD_NONKEY && s -> pict_type != AV_PICTURE_TYPE_I ) || avctx -> skip_frame >= AVDISCARD_ALL
water	151:10	0:0	4	(
water	151:11	0:0	4	avctx
op	151:16	0:0	4	->
water	151:18	0:0	4	skip_frame
op	151:29	0:0	4	>=
water	151:32	0:0	4	AVDISCARD_NONREF
op	151:49	0:0	4	&&
water	151:52	0:0	4	s
op	151:53	0:0	4	->
water	151:55	0:0	4	pict_type
op	151:64	0:0	4	==
water	151:66	0:0	4	AV_PICTURE_TYPE_B
water	151:83	0:0	4	)
op	152:7	0:0	4	||
water	152:10	0:0	4	(
water	152:11	0:0	4	avctx
op	152:16	0:0	4	->
water	152:18	0:0	4	skip_frame
op	152:29	0:0	4	>=
water	152:32	0:0	4	AVDISCARD_NONKEY
op	152:49	0:0	4	&&
water	152:52	0:0	4	s
op	152:53	0:0	4	->
water	152:55	0:0	4	pict_type
op	152:64	0:0	4	!=
water	152:66	0:0	4	AV_PICTURE_TYPE_I
water	152:83	0:0	4	)
op	153:7	0:0	4	||
water	153:11	0:0	4	avctx
op	153:16	0:0	4	->
water	153:18	0:0	4	skip_frame
op	153:29	0:0	4	>=
water	153:32	0:0	4	AVDISCARD_ALL
stmts	153:47	155:4	3	
water	153:47	0:0	4	{
goto	154:8	154:16	4	end
water	154:13	0:0	5	end
water	155:4	0:0	4	}
if	157:4	162:4	2	(s -> next_p_frame_damaged)
cond	157:7	157:10	3	s -> next_p_frame_damaged
water	157:7	0:0	4	s
op	157:8	0:0	4	->
water	157:10	0:0	4	next_p_frame_damaged
stmts	157:31	162:4	3	
water	157:31	0:0	4	{
if	158:8	159:20	4	(s -> pict_type == AV_PICTURE_TYPE_B)
cond	158:11	158:25	5	s -> pict_type == AV_PICTURE_TYPE_B
water	158:11	0:0	6	s
op	158:12	0:0	6	->
water	158:14	0:0	6	pict_type
op	158:23	0:0	6	==
water	158:25	0:0	6	AV_PICTURE_TYPE_B
stmts	159:12	159:20	5	
goto	159:12	159:20	6	end
water	159:17	0:0	7	end
else	160:8	161:37	4
stmts	161:12	161:37	5	
water	161:12	0:0	6	s
op	161:13	0:0	6	->
water	161:15	0:0	6	next_p_frame_damaged
op	161:35	0:0	6	=
water	161:36	0:0	6	0
water	161:37	0:0	6	;
water	162:4	0:0	4	}
if	164:4	166:4	2	(MPV_frame_start (s ,avctx ) < 0)
cond	164:7	164:35	3	MPV_frame_start (s ,avctx ) < 0
call	164:7	164:31	4	MPV_frame_start
arg	164:23	164:24	5	s
water	164:23	0:0	6	s
arg	164:26	164:31	5	avctx
water	164:26	0:0	6	avctx
op	164:33	0:0	4	<
water	164:35	0:0	4	0
stmts	164:38	166:4	3	
water	164:38	0:0	4	{
goto	165:8	165:16	4	err
water	165:13	0:0	5	err
water	166:4	0:0	4	}
water	168:4	0:0	2	s
op	168:5	0:0	2	->
water	168:7	0:0	2	me
op	168:9	0:0	2	.
water	168:10	0:0	2	qpel_put
op	168:18	0:0	2	=
water	168:20	0:0	2	s
op	168:21	0:0	2	->
water	168:23	0:0	2	dsp
op	168:26	0:0	2	.
water	168:27	0:0	2	put_qpel_pixels_tab
water	168:46	0:0	2	;
water	169:4	0:0	2	s
op	169:5	0:0	2	->
water	169:7	0:0	2	me
op	169:9	0:0	2	.
water	169:10	0:0	2	qpel_avg
op	169:18	0:0	2	=
water	169:20	0:0	2	s
op	169:21	0:0	2	->
water	169:23	0:0	2	dsp
op	169:26	0:0	2	.
water	169:27	0:0	2	avg_qpel_pixels_tab
water	169:46	0:0	2	;
if	171:4	173:79	2	(( CONFIG_VC1_VDPAU_DECODER ) && s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU)
cond	171:8	172:40	3	( CONFIG_VC1_VDPAU_DECODER ) && s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU
water	171:8	0:0	4	(
water	171:9	0:0	4	CONFIG_VC1_VDPAU_DECODER
water	171:33	0:0	4	)
op	172:8	0:0	4	&&
water	172:10	0:0	4	s
op	172:11	0:0	4	->
water	172:13	0:0	4	avctx
op	172:18	0:0	4	->
water	172:20	0:0	4	codec
op	172:25	0:0	4	->
water	172:27	0:0	4	capabilities
op	172:39	0:0	4	&
water	172:40	0:0	4	CODEC_CAP_HWACCEL_VDPAU
stmts	173:8	173:79	3	
call	173:8	173:78	4	ff_vdpau_vc1_decode_picture
arg	173:36	173:37	5	s
water	173:36	0:0	6	s
arg	173:39	173:48	5	buf_start
water	173:39	0:0	6	buf_start
arg	173:50	173:78	5	(buf+buf_size)-buf_start
water	173:50	0:0	6	(
water	173:51	0:0	6	buf
op	173:55	0:0	6	+
water	173:57	0:0	6	buf_size
water	173:65	0:0	6	)
op	173:67	0:0	6	-
water	173:69	0:0	6	buf_start
water	173:79	0:0	4	;
else	174:4	181:4	2
stmts	174:9	181:4	3	
if	174:9	181:4	4	(avctx -> hwaccel)
cond	174:13	174:20	5	avctx -> hwaccel
water	174:13	0:0	6	avctx
op	174:18	0:0	6	->
water	174:20	0:0	6	hwaccel
stmts	174:29	181:4	5	
water	174:29	0:0	6	{
if	175:8	176:20	6	(avctx -> hwaccel -> start_frame (avctx ,buf ,buf_size ) < 0)
cond	175:12	175:64	7	avctx -> hwaccel -> start_frame (avctx ,buf ,buf_size ) < 0
call	175:12	175:60	8	avctx->hwaccel->start_frame
arg	175:40	175:45	9	avctx
water	175:40	0:0	10	avctx
arg	175:47	175:50	9	buf
water	175:47	0:0	10	buf
arg	175:52	175:60	9	buf_size
water	175:52	0:0	10	buf_size
op	175:62	0:0	8	<
water	175:64	0:0	8	0
stmts	176:12	176:20	7	
goto	176:12	176:20	8	err
water	176:17	0:0	9	err
if	177:8	178:20	6	(avctx -> hwaccel -> decode_slice (avctx ,buf_start ,( buf + buf_size ) - buf_start ) < 0)
cond	177:12	177:91	7	avctx -> hwaccel -> decode_slice (avctx ,buf_start ,( buf + buf_size ) - buf_start ) < 0
call	177:12	177:87	8	avctx->hwaccel->decode_slice
arg	177:41	177:46	9	avctx
water	177:41	0:0	10	avctx
arg	177:48	177:57	9	buf_start
water	177:48	0:0	10	buf_start
arg	177:59	177:87	9	(buf+buf_size)-buf_start
water	177:59	0:0	10	(
water	177:60	0:0	10	buf
op	177:64	0:0	10	+
water	177:66	0:0	10	buf_size
water	177:74	0:0	10	)
op	177:76	0:0	10	-
water	177:78	0:0	10	buf_start
op	177:89	0:0	8	<
water	177:91	0:0	8	0
stmts	178:12	178:20	7	
goto	178:12	178:20	8	err
water	178:17	0:0	9	err
if	179:8	180:20	6	(avctx -> hwaccel -> end_frame (avctx ) < 0)
cond	179:12	179:47	7	avctx -> hwaccel -> end_frame (avctx ) < 0
call	179:12	179:43	8	avctx->hwaccel->end_frame
arg	179:38	179:43	9	avctx
water	179:38	0:0	10	avctx
op	179:45	0:0	8	<
water	179:47	0:0	8	0
stmts	180:12	180:20	7	
goto	180:12	180:20	8	err
water	180:17	0:0	9	err
water	181:4	0:0	6	}
else	181:6	197:4	2
stmts	181:11	197:4	3	
water	181:11	0:0	4	{
call	182:8	182:27	4	ff_er_frame_start
arg	182:26	182:27	5	s
water	182:26	0:0	6	s
water	182:28	0:0	4	;
water	184:8	0:0	4	v
op	184:9	0:0	4	->
water	184:11	0:0	4	bits
op	184:16	0:0	4	=
water	184:18	0:0	4	buf_size
op	184:27	0:0	4	*
water	184:29	0:0	4	8
water	184:30	0:0	4	;
for	185:8	192:8	4	(i = 0 ;i <= n_slices;i ++)
forinit	185:13	185:18	5	i = 0 ;
water	185:13	0:0	6	i
op	185:15	0:0	6	=
water	185:17	0:0	6	0
water	185:18	0:0	6	;
cond	185:20	185:25	5	i <= n_slices
water	185:20	0:0	6	i
op	185:22	0:0	6	<=
water	185:25	0:0	6	n_slices
forexpr	185:35	185:36	5	i ++
water	185:35	0:0	6	i
op	185:36	0:0	6	++
stmts	185:40	192:8	5	
water	185:40	0:0	6	{
if	186:12	187:53	6	(i &&get_bits1 (& s -> gb ))
cond	186:16	186:37	7	i &&get_bits1 (& s -> gb )
water	186:16	0:0	8	i
op	186:18	0:0	8	&&
call	186:21	186:37	8	get_bits1
arg	186:31	186:37	9	&s->gb
op	186:31	0:0	10	&
water	186:32	0:0	10	s
op	186:33	0:0	10	->
water	186:35	0:0	10	gb
stmts	187:16	187:53	7	
call	187:16	187:52	8	vc1_parse_frame_header_adv
arg	187:43	187:44	9	v
water	187:43	0:0	10	v
arg	187:46	187:52	9	&s->gb
op	187:46	0:0	10	&
water	187:47	0:0	10	s
op	187:48	0:0	10	->
water	187:50	0:0	10	gb
water	187:53	0:0	8	;
water	188:12	0:0	6	s
op	188:13	0:0	6	->
water	188:15	0:0	6	start_mb_y
op	188:26	0:0	6	=
water	188:28	0:0	6	(
water	188:29	0:0	6	i
op	188:31	0:0	6	==
water	188:34	0:0	6	0
water	188:35	0:0	6	)
water	188:44	0:0	6	?
water	188:46	0:0	6	0
water	188:48	0:0	6	:
call	188:50	188:80	6	FFMAX
arg	188:56	188:57	7	0
water	188:56	0:0	8	0
arg	188:59	188:80	7	slices[i-1].mby_start
water	188:59	0:0	8	slices
op	188:65	0:0	8	[
water	188:66	0:0	8	i
op	188:67	0:0	8	-
water	188:68	0:0	8	1
op	188:69	0:0	8	]
op	188:70	0:0	8	.
water	188:71	0:0	8	mby_start
water	188:81	0:0	6	;
water	189:12	0:0	6	s
op	189:13	0:0	6	->
water	189:15	0:0	6	end_mb_y
op	189:26	0:0	6	=
water	189:28	0:0	6	(
water	189:29	0:0	6	i
op	189:31	0:0	6	==
water	189:34	0:0	6	n_slices
water	189:42	0:0	6	)
water	189:44	0:0	6	?
water	189:46	0:0	6	s
op	189:47	0:0	6	->
water	189:49	0:0	6	mb_height
water	189:59	0:0	6	:
call	189:61	189:100	6	FFMIN
arg	189:67	189:79	7	s->mb_height
water	189:67	0:0	8	s
op	189:68	0:0	8	->
water	189:70	0:0	8	mb_height
arg	189:81	189:100	7	slices[i].mby_start
water	189:81	0:0	8	slices
op	189:87	0:0	8	[
water	189:88	0:0	8	i
op	189:89	0:0	8	]
op	189:90	0:0	8	.
water	189:91	0:0	8	mby_start
water	189:101	0:0	6	;
call	190:12	190:31	6	vc1_decode_blocks
arg	190:30	190:31	7	v
water	190:30	0:0	8	v
water	190:32	0:0	6	;
if	191:12	191:51	6	(i != n_slices)
cond	191:16	191:21	7	i != n_slices
water	191:16	0:0	8	i
op	191:18	0:0	8	!=
water	191:21	0:0	8	n_slices
stmts	191:31	191:51	7	
water	191:31	0:0	8	s
op	191:32	0:0	8	->
water	191:34	0:0	8	gb
op	191:37	0:0	8	=
water	191:39	0:0	8	slices
op	191:45	0:0	8	[
water	191:46	0:0	8	i
op	191:47	0:0	8	]
op	191:48	0:0	8	.
water	191:49	0:0	8	gb
water	191:51	0:0	8	;
water	192:8	0:0	6	}
call	196:8	196:25	4	ff_er_frame_end
arg	196:24	196:25	5	s
water	196:24	0:0	6	s
water	196:26	0:0	4	;
water	197:4	0:0	4	}
call	199:4	199:19	2	MPV_frame_end
arg	199:18	199:19	3	s
water	199:18	0:0	4	s
water	199:20	0:0	2	;
call	201:0	201:72	2	assert
arg	201:7	201:72	3	s->current_picture.pict_type==s->current_picture_ptr->pict_type
water	201:7	0:0	4	s
op	201:8	0:0	4	->
water	201:10	0:0	4	current_picture
op	201:25	0:0	4	.
water	201:26	0:0	4	pict_type
op	201:36	0:0	4	==
water	201:39	0:0	4	s
op	201:40	0:0	4	->
water	201:42	0:0	4	current_picture_ptr
op	201:61	0:0	4	->
water	201:63	0:0	4	pict_type
water	201:73	0:0	2	;
call	202:0	202:51	2	assert
arg	202:7	202:51	3	s->current_picture.pict_type==s->pict_type
water	202:7	0:0	4	s
op	202:8	0:0	4	->
water	202:10	0:0	4	current_picture
op	202:25	0:0	4	.
water	202:26	0:0	4	pict_type
op	202:36	0:0	4	==
water	202:39	0:0	4	s
op	202:40	0:0	4	->
water	202:42	0:0	4	pict_type
water	202:52	0:0	2	;
if	203:4	205:4	2	(s -> pict_type == AV_PICTURE_TYPE_B || s -> low_delay)
cond	203:8	203:48	3	s -> pict_type == AV_PICTURE_TYPE_B || s -> low_delay
water	203:8	0:0	4	s
op	203:9	0:0	4	->
water	203:11	0:0	4	pict_type
op	203:21	0:0	4	==
water	203:24	0:0	4	AV_PICTURE_TYPE_B
op	203:42	0:0	4	||
water	203:45	0:0	4	s
op	203:46	0:0	4	->
water	203:48	0:0	4	low_delay
stmts	203:59	205:4	3	
water	203:59	0:0	4	{
op	204:8	0:0	4	*
water	204:9	0:0	4	pict
op	204:13	0:0	4	=
op	204:15	0:0	4	*
water	204:16	0:0	4	(
water	204:17	0:0	4	AVFrame
op	204:24	0:0	4	*
water	204:25	0:0	4	)
water	204:26	0:0	4	s
op	204:27	0:0	4	->
water	204:29	0:0	4	current_picture_ptr
water	204:48	0:0	4	;
water	205:4	0:0	4	}
else	205:6	207:4	2
stmts	205:11	207:4	3	
if	205:11	207:4	4	(s -> last_picture_ptr != NULL)
cond	205:15	205:38	5	s -> last_picture_ptr != NULL
water	205:15	0:0	6	s
op	205:16	0:0	6	->
water	205:18	0:0	6	last_picture_ptr
op	205:35	0:0	6	!=
water	205:38	0:0	6	NULL
stmts	205:44	207:4	5	
water	205:44	0:0	6	{
op	206:8	0:0	6	*
water	206:9	0:0	6	pict
op	206:13	0:0	6	=
op	206:15	0:0	6	*
water	206:16	0:0	6	(
water	206:17	0:0	6	AVFrame
op	206:24	0:0	6	*
water	206:25	0:0	6	)
water	206:26	0:0	6	s
op	206:27	0:0	6	->
water	206:29	0:0	6	last_picture_ptr
water	206:45	0:0	6	;
water	207:4	0:0	6	}
if	209:4	212:4	2	(s -> last_picture_ptr || s -> low_delay)
cond	209:7	209:33	3	s -> last_picture_ptr || s -> low_delay
water	209:7	0:0	4	s
op	209:8	0:0	4	->
water	209:10	0:0	4	last_picture_ptr
op	209:27	0:0	4	||
water	209:30	0:0	4	s
op	209:31	0:0	4	->
water	209:33	0:0	4	low_delay
stmts	209:43	212:4	3	
water	209:43	0:0	4	{
op	210:8	0:0	4	*
water	210:9	0:0	4	data_size
op	210:19	0:0	4	=
op	210:21	0:0	4	sizeof
water	210:27	0:0	4	(
water	210:28	0:0	4	AVFrame
water	210:35	0:0	4	)
water	210:36	0:0	4	;
call	211:8	211:35	4	ff_print_debug_info
arg	211:28	211:29	5	s
water	211:28	0:0	6	s
arg	211:31	211:35	5	pict
water	211:31	0:0	6	pict
water	211:36	0:0	4	;
water	212:4	0:0	4	}
label	214:0	214:3	2	end :
if	215:4	216:36	2	(v -> res_sprite)
cond	215:8	215:11	3	v -> res_sprite
water	215:8	0:0	4	v
op	215:9	0:0	4	->
water	215:11	0:0	4	res_sprite
stmts	216:8	216:36	3	
call	216:8	216:35	4	vc1_parse_sprites
arg	216:26	216:27	5	v
water	216:26	0:0	6	v
arg	216:29	216:35	5	&s->gb
op	216:29	0:0	6	&
water	216:30	0:0	6	s
op	216:31	0:0	6	->
water	216:33	0:0	6	gb
water	216:36	0:0	4	;
call	217:4	217:16	2	av_free
arg	217:12	217:16	3	buf2
water	217:12	0:0	4	buf2
water	217:17	0:0	2	;
for	218:4	219:30	2	(i = 0 ;i < n_slices;i ++)
forinit	218:9	218:14	3	i = 0 ;
water	218:9	0:0	4	i
op	218:11	0:0	4	=
water	218:13	0:0	4	0
water	218:14	0:0	4	;
cond	218:16	218:20	3	i < n_slices
water	218:16	0:0	4	i
op	218:18	0:0	4	<
water	218:20	0:0	4	n_slices
forexpr	218:30	218:31	3	i ++
water	218:30	0:0	4	i
op	218:31	0:0	4	++
stmts	219:8	219:30	3	
call	219:8	219:29	4	av_free
arg	219:16	219:29	5	slices[i].buf
water	219:16	0:0	6	slices
op	219:22	0:0	6	[
water	219:23	0:0	6	i
op	219:24	0:0	6	]
op	219:25	0:0	6	.
water	219:26	0:0	6	buf
water	219:30	0:0	4	;
call	220:4	220:18	2	av_free
arg	220:12	220:18	3	slices
water	220:12	0:0	4	slices
water	220:19	0:0	2	;
return	221:4	221:19	2	buf_size
water	221:11	0:0	3	buf_size
label	223:0	223:3	2	err :
call	224:4	224:16	2	av_free
arg	224:12	224:16	3	buf2
water	224:12	0:0	4	buf2
water	224:17	0:0	2	;
for	225:4	226:30	2	(i = 0 ;i < n_slices;i ++)
forinit	225:9	225:14	3	i = 0 ;
water	225:9	0:0	4	i
op	225:11	0:0	4	=
water	225:13	0:0	4	0
water	225:14	0:0	4	;
cond	225:16	225:20	3	i < n_slices
water	225:16	0:0	4	i
op	225:18	0:0	4	<
water	225:20	0:0	4	n_slices
forexpr	225:30	225:31	3	i ++
water	225:30	0:0	4	i
op	225:31	0:0	4	++
stmts	226:8	226:30	3	
call	226:8	226:29	4	av_free
arg	226:16	226:29	5	slices[i].buf
water	226:16	0:0	6	slices
op	226:22	0:0	6	[
water	226:23	0:0	6	i
op	226:24	0:0	6	]
op	226:25	0:0	6	.
water	226:26	0:0	6	buf
water	226:30	0:0	4	;
call	227:4	227:18	2	av_free
arg	227:12	227:18	3	slices
water	227:12	0:0	4	slices
water	227:19	0:0	2	;
return	228:4	228:13	2	-1
op	228:11	0:0	3	-
water	228:12	0:0	3	1
