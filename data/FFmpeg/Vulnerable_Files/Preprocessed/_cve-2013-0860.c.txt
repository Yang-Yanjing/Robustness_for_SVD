func	2:0	374:0	0	void	ff_er_frame_end
params	2:20	0:0	1	
param	2:21	2:38	2	MpegEncContext *	s
stmnts	0:0	373:4	1	
decl	3:4	3:70	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:70	2	int	mb_x
water	3:15	0:0	2	,
decl	3:4	3:70	2	int	mb_y
water	3:21	0:0	2	,
decl	3:4	3:70	2	int	error
water	3:28	0:0	2	,
decl	3:4	3:70	2	int	error_type
water	3:40	0:0	2	,
decl	3:4	3:70	2	int	dc_error
water	3:50	0:0	2	,
decl	3:4	3:70	2	int	mv_error
water	3:60	0:0	2	,
decl	3:4	3:70	2	int	ac_error
decl	4:4	4:16	2	int	distance
decl	5:4	5:40	2	int	threshold_part[4]
op	5:25	0:0	2	=
water	5:27	0:0	2	{
water	5:28	0:0	2	100
water	5:31	0:0	2	,
water	5:32	0:0	2	100
water	5:35	0:0	2	,
water	5:36	0:0	2	100
water	5:39	0:0	2	}
decl	6:4	6:21	2	int	threshold
op	6:17	0:0	2	=
water	6:19	0:0	2	50
decl	7:4	7:23	2	int	is_intra_likely
decl	8:4	8:46	2	int	size
op	8:13	0:0	2	=
water	8:15	0:0	2	s
op	8:16	0:0	2	->
water	8:18	0:0	2	b8_stride
op	8:28	0:0	2	*
water	8:30	0:0	2	2
op	8:32	0:0	2	*
water	8:34	0:0	2	s
op	8:35	0:0	2	->
water	8:37	0:0	2	mb_height
decl	9:4	9:40	2	Picture	*pic
op	9:16	0:0	2	=
water	9:18	0:0	2	s
op	9:19	0:0	2	->
water	9:21	0:0	2	current_picture_ptr
if	11:4	15:89	2	(! s -> error_recognition || s -> error_count == 0 || s -> avctx -> lowres || s -> avctx -> hwaccel || s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU || s -> picture_structure != PICT_FRAME || s -> error_count == 3 * s -> mb_width * ( s -> avctx -> skip_top + s -> avctx -> skip_bottom ))
cond	11:7	15:80	3	! s -> error_recognition || s -> error_count == 0 || s -> avctx -> lowres || s -> avctx -> hwaccel || s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU || s -> picture_structure != PICT_FRAME || s -> error_count == 3 * s -> mb_width * ( s -> avctx -> skip_top + s -> avctx -> skip_bottom )
op	11:7	0:0	4	!
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	error_recognition
op	11:29	0:0	4	||
water	11:32	0:0	4	s
op	11:33	0:0	4	->
water	11:35	0:0	4	error_count
op	11:46	0:0	4	==
water	11:48	0:0	4	0
op	11:50	0:0	4	||
water	11:53	0:0	4	s
op	11:54	0:0	4	->
water	11:56	0:0	4	avctx
op	11:61	0:0	4	->
water	11:63	0:0	4	lowres
op	11:70	0:0	4	||
water	12:7	0:0	4	s
op	12:8	0:0	4	->
water	12:10	0:0	4	avctx
op	12:15	0:0	4	->
water	12:17	0:0	4	hwaccel
op	12:25	0:0	4	||
water	13:7	0:0	4	s
op	13:8	0:0	4	->
water	13:10	0:0	4	avctx
op	13:15	0:0	4	->
water	13:17	0:0	4	codec
op	13:22	0:0	4	->
water	13:24	0:0	4	capabilities
op	13:36	0:0	4	&
water	13:37	0:0	4	CODEC_CAP_HWACCEL_VDPAU
op	13:61	0:0	4	||
water	14:7	0:0	4	s
op	14:8	0:0	4	->
water	14:10	0:0	4	picture_structure
op	14:28	0:0	4	!=
water	14:31	0:0	4	PICT_FRAME
op	14:42	0:0	4	||
water	15:7	0:0	4	s
op	15:8	0:0	4	->
water	15:10	0:0	4	error_count
op	15:21	0:0	4	==
water	15:23	0:0	4	3
op	15:24	0:0	4	*
water	15:25	0:0	4	s
op	15:26	0:0	4	->
water	15:28	0:0	4	mb_width
op	15:36	0:0	4	*
water	15:37	0:0	4	(
water	15:38	0:0	4	s
op	15:39	0:0	4	->
water	15:41	0:0	4	avctx
op	15:46	0:0	4	->
water	15:48	0:0	4	skip_top
op	15:57	0:0	4	+
water	15:59	0:0	4	s
op	15:60	0:0	4	->
water	15:62	0:0	4	avctx
op	15:67	0:0	4	->
water	15:69	0:0	4	skip_bottom
water	15:80	0:0	4	)
stmts	15:83	15:89	3	
return	15:83	15:89	4	
if	17:4	27:4	2	(s -> current_picture . f . motion_val [ 0 ] == NULL)
cond	17:8	17:46	3	s -> current_picture . f . motion_val [ 0 ] == NULL
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	current_picture
op	17:26	0:0	4	.
water	17:27	0:0	4	f
op	17:28	0:0	4	.
water	17:29	0:0	4	motion_val
op	17:39	0:0	4	[
water	17:40	0:0	4	0
op	17:41	0:0	4	]
op	17:43	0:0	4	==
water	17:46	0:0	4	NULL
stmts	17:52	27:4	3	
water	17:52	0:0	4	{
call	18:8	18:68	4	av_log
arg	18:15	18:23	5	s->avctx
water	18:15	0:0	6	s
op	18:16	0:0	6	->
water	18:18	0:0	6	avctx
arg	18:25	18:37	5	AV_LOG_ERROR
water	18:25	0:0	6	AV_LOG_ERROR
arg	18:39	18:68	5	"Warning MVs not available\n"
water	18:39	0:0	6	"Warning MVs not available\n"
water	18:69	0:0	4	;
for	20:8	24:8	4	(i = 0 ;i < 2;i ++)
forinit	20:12	20:15	5	i = 0 ;
water	20:12	0:0	6	i
op	20:13	0:0	6	=
water	20:14	0:0	6	0
water	20:15	0:0	6	;
cond	20:17	20:19	5	i < 2
water	20:17	0:0	6	i
op	20:18	0:0	6	<
water	20:19	0:0	6	2
forexpr	20:22	20:23	5	i ++
water	20:22	0:0	6	i
op	20:23	0:0	6	++
stmts	20:26	24:8	5	
water	20:26	0:0	6	{
water	21:12	0:0	6	pic
op	21:15	0:0	6	->
water	21:17	0:0	6	f
op	21:18	0:0	6	.
water	21:19	0:0	6	ref_index
op	21:28	0:0	6	[
water	21:29	0:0	6	i
op	21:30	0:0	6	]
op	21:32	0:0	6	=
call	21:34	21:94	6	av_mallocz
arg	21:45	21:94	7	s->mb_stride*s->mb_height*4*sizeof(uint8_t)
water	21:45	0:0	8	s
op	21:46	0:0	8	->
water	21:48	0:0	8	mb_stride
op	21:58	0:0	8	*
water	21:60	0:0	8	s
op	21:61	0:0	8	->
water	21:63	0:0	8	mb_height
op	21:73	0:0	8	*
water	21:75	0:0	8	4
op	21:77	0:0	8	*
op	21:79	0:0	8	sizeof
water	21:85	0:0	8	(
water	21:86	0:0	8	uint8_t
water	21:93	0:0	8	)
water	21:95	0:0	6	;
water	22:12	0:0	6	pic
op	22:15	0:0	6	->
water	22:17	0:0	6	motion_val_base
op	22:32	0:0	6	[
water	22:33	0:0	6	i
op	22:34	0:0	6	]
op	22:35	0:0	6	=
call	22:37	22:79	6	av_mallocz
arg	22:48	22:79	7	(size+4)*2*sizeof(uint16_t)
water	22:48	0:0	8	(
water	22:49	0:0	8	size
op	22:53	0:0	8	+
water	22:54	0:0	8	4
water	22:55	0:0	8	)
op	22:57	0:0	8	*
water	22:59	0:0	8	2
op	22:61	0:0	8	*
op	22:63	0:0	8	sizeof
water	22:69	0:0	8	(
water	22:70	0:0	8	uint16_t
water	22:78	0:0	8	)
water	22:80	0:0	6	;
water	23:12	0:0	6	pic
op	23:15	0:0	6	->
water	23:17	0:0	6	f
op	23:18	0:0	6	.
water	23:19	0:0	6	motion_val
op	23:29	0:0	6	[
water	23:30	0:0	6	i
op	23:31	0:0	6	]
op	23:33	0:0	6	=
water	23:35	0:0	6	pic
op	23:38	0:0	6	->
water	23:40	0:0	6	motion_val_base
op	23:55	0:0	6	[
water	23:56	0:0	6	i
op	23:57	0:0	6	]
op	23:59	0:0	6	+
water	23:61	0:0	6	4
water	23:62	0:0	6	;
water	24:8	0:0	6	}
water	25:8	0:0	4	pic
op	25:11	0:0	4	->
water	25:13	0:0	4	f
op	25:14	0:0	4	.
water	25:15	0:0	4	motion_subsample_log2
op	25:37	0:0	4	=
water	25:39	0:0	4	3
water	25:40	0:0	4	;
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	current_picture
op	26:26	0:0	4	=
op	26:28	0:0	4	*
water	26:29	0:0	4	s
op	26:30	0:0	4	->
water	26:32	0:0	4	current_picture_ptr
water	26:51	0:0	4	;
water	27:4	0:0	4	}
if	29:4	38:4	2	(s -> avctx -> debug & FF_DEBUG_ER)
cond	29:7	29:23	3	s -> avctx -> debug & FF_DEBUG_ER
water	29:7	0:0	4	s
op	29:8	0:0	4	->
water	29:10	0:0	4	avctx
op	29:15	0:0	4	->
water	29:17	0:0	4	debug
op	29:22	0:0	4	&
water	29:23	0:0	4	FF_DEBUG_ER
stmts	29:35	38:4	3	
water	29:35	0:0	4	{
for	30:8	37:8	4	(mb_y = 0 ;mb_y < s -> mb_height;mb_y ++)
forinit	30:12	30:18	5	mb_y = 0 ;
water	30:12	0:0	6	mb_y
op	30:16	0:0	6	=
water	30:17	0:0	6	0
water	30:18	0:0	6	;
cond	30:20	30:28	5	mb_y < s -> mb_height
water	30:20	0:0	6	mb_y
op	30:24	0:0	6	<
water	30:25	0:0	6	s
op	30:26	0:0	6	->
water	30:28	0:0	6	mb_height
forexpr	30:39	30:43	5	mb_y ++
water	30:39	0:0	6	mb_y
op	30:43	0:0	6	++
stmts	30:46	37:8	5	
water	30:46	0:0	6	{
for	31:12	35:12	6	(mb_x = 0 ;mb_x < s -> mb_width;mb_x ++)
forinit	31:16	31:22	7	mb_x = 0 ;
water	31:16	0:0	8	mb_x
op	31:20	0:0	8	=
water	31:21	0:0	8	0
water	31:22	0:0	8	;
cond	31:24	31:32	7	mb_x < s -> mb_width
water	31:24	0:0	8	mb_x
op	31:28	0:0	8	<
water	31:29	0:0	8	s
op	31:30	0:0	8	->
water	31:32	0:0	8	mb_width
forexpr	31:42	31:46	7	mb_x ++
water	31:42	0:0	8	mb_x
op	31:46	0:0	8	++
stmts	31:49	35:12	7	
water	31:49	0:0	8	{
decl	32:16	32:75	8	int	status
op	32:26	0:0	8	=
water	32:28	0:0	8	s
op	32:29	0:0	8	->
water	32:31	0:0	8	error_status_table
op	32:49	0:0	8	[
water	32:50	0:0	8	mb_x
op	32:55	0:0	8	+
water	32:57	0:0	8	mb_y
op	32:61	0:0	8	*
water	32:62	0:0	8	s
op	32:63	0:0	8	->
water	32:65	0:0	8	mb_stride
op	32:74	0:0	8	]
call	34:16	34:61	8	av_log
arg	34:23	34:31	9	s->avctx
water	34:23	0:0	10	s
op	34:24	0:0	10	->
water	34:26	0:0	10	avctx
arg	34:33	34:45	9	AV_LOG_DEBUG
water	34:33	0:0	10	AV_LOG_DEBUG
arg	34:47	34:53	9	"%2X "
water	34:47	0:0	10	"%2X "
arg	34:55	34:61	9	status
water	34:55	0:0	10	status
water	34:62	0:0	8	;
water	35:12	0:0	8	}
call	36:12	36:47	6	av_log
arg	36:19	36:27	7	s->avctx
water	36:19	0:0	8	s
op	36:20	0:0	8	->
water	36:22	0:0	8	avctx
arg	36:29	36:41	7	AV_LOG_DEBUG
water	36:29	0:0	8	AV_LOG_DEBUG
arg	36:43	36:47	7	"\n"
water	36:43	0:0	8	"\n"
water	36:48	0:0	6	;
water	37:8	0:0	6	}
water	38:4	0:0	4	}
for	41:4	59:4	2	(error_type = 1 ;error_type <= 3;error_type ++)
forinit	41:8	41:20	3	error_type = 1 ;
water	41:8	0:0	4	error_type
op	41:18	0:0	4	=
water	41:19	0:0	4	1
water	41:20	0:0	4	;
cond	41:22	41:34	3	error_type <= 3
water	41:22	0:0	4	error_type
op	41:32	0:0	4	<=
water	41:34	0:0	4	3
forexpr	41:37	41:47	3	error_type ++
water	41:37	0:0	4	error_type
op	41:47	0:0	4	++
stmts	41:50	59:4	3	
water	41:50	0:0	4	{
decl	42:8	42:20	4	int	end_ok
op	42:18	0:0	4	=
water	42:19	0:0	4	0
for	44:8	58:8	4	(i = s -> mb_num - 1 ;i >= 0;i --)
forinit	44:12	44:25	5	i = s -> mb_num - 1 ;
water	44:12	0:0	6	i
op	44:13	0:0	6	=
water	44:14	0:0	6	s
op	44:15	0:0	6	->
water	44:17	0:0	6	mb_num
op	44:23	0:0	6	-
water	44:24	0:0	6	1
water	44:25	0:0	6	;
cond	44:27	44:30	5	i >= 0
water	44:27	0:0	6	i
op	44:28	0:0	6	>=
water	44:30	0:0	6	0
forexpr	44:33	44:34	5	i --
water	44:33	0:0	6	i
op	44:34	0:0	6	--
stmts	44:37	58:8	5	
water	44:37	0:0	6	{
decl	45:12	45:46	6	const int	mb_xy
op	45:27	0:0	6	=
water	45:29	0:0	6	s
op	45:30	0:0	6	->
water	45:32	0:0	6	mb_index2xy
op	45:43	0:0	6	[
water	45:44	0:0	6	i
op	45:45	0:0	6	]
decl	46:12	46:51	6	int	error
op	46:21	0:0	6	=
water	46:23	0:0	6	s
op	46:24	0:0	6	->
water	46:26	0:0	6	error_status_table
op	46:44	0:0	6	[
water	46:45	0:0	6	mb_xy
op	46:50	0:0	6	]
if	48:12	49:24	6	(error & ( 1 << error_type ))
cond	48:15	48:35	7	error & ( 1 << error_type )
water	48:15	0:0	8	error
op	48:20	0:0	8	&
water	48:21	0:0	8	(
water	48:22	0:0	8	1
op	48:23	0:0	8	<<
water	48:25	0:0	8	error_type
water	48:35	0:0	8	)
stmts	49:16	49:24	7	
water	49:16	0:0	8	end_ok
op	49:22	0:0	8	=
water	49:23	0:0	8	1
water	49:24	0:0	8	;
if	50:12	51:24	6	(error & ( 8 << error_type ))
cond	50:15	50:35	7	error & ( 8 << error_type )
water	50:15	0:0	8	error
op	50:20	0:0	8	&
water	50:21	0:0	8	(
water	50:22	0:0	8	8
op	50:23	0:0	8	<<
water	50:25	0:0	8	error_type
water	50:35	0:0	8	)
stmts	51:16	51:24	7	
water	51:16	0:0	8	end_ok
op	51:22	0:0	8	=
water	51:23	0:0	8	1
water	51:24	0:0	8	;
if	53:12	54:60	6	(! end_ok)
cond	53:15	53:16	7	! end_ok
op	53:15	0:0	8	!
water	53:16	0:0	8	end_ok
stmts	54:16	54:60	7	
water	54:16	0:0	8	s
op	54:17	0:0	8	->
water	54:19	0:0	8	error_status_table
op	54:37	0:0	8	[
water	54:38	0:0	8	mb_xy
op	54:43	0:0	8	]
op	54:44	0:0	8	|=
water	54:47	0:0	8	1
op	54:48	0:0	8	<<
water	54:50	0:0	8	error_type
water	54:60	0:0	8	;
if	56:12	57:24	6	(error & VP_START)
cond	56:15	56:21	7	error & VP_START
water	56:15	0:0	8	error
op	56:20	0:0	8	&
water	56:21	0:0	8	VP_START
stmts	57:16	57:24	7	
water	57:16	0:0	8	end_ok
op	57:22	0:0	8	=
water	57:23	0:0	8	0
water	57:24	0:0	8	;
water	58:8	0:0	6	}
water	59:4	0:0	4	}
if	62:4	80:4	2	(s -> partitioned_frame)
cond	62:7	62:10	3	s -> partitioned_frame
water	62:7	0:0	4	s
op	62:8	0:0	4	->
water	62:10	0:0	4	partitioned_frame
stmts	62:28	80:4	3	
water	62:28	0:0	4	{
decl	63:8	63:20	4	int	end_ok
op	63:18	0:0	4	=
water	63:19	0:0	4	0
for	65:8	79:8	4	(i = s -> mb_num - 1 ;i >= 0;i --)
forinit	65:12	65:25	5	i = s -> mb_num - 1 ;
water	65:12	0:0	6	i
op	65:13	0:0	6	=
water	65:14	0:0	6	s
op	65:15	0:0	6	->
water	65:17	0:0	6	mb_num
op	65:23	0:0	6	-
water	65:24	0:0	6	1
water	65:25	0:0	6	;
cond	65:27	65:30	5	i >= 0
water	65:27	0:0	6	i
op	65:28	0:0	6	>=
water	65:30	0:0	6	0
forexpr	65:33	65:34	5	i --
water	65:33	0:0	6	i
op	65:34	0:0	6	--
stmts	65:37	79:8	5	
water	65:37	0:0	6	{
decl	66:12	66:46	6	const int	mb_xy
op	66:27	0:0	6	=
water	66:29	0:0	6	s
op	66:30	0:0	6	->
water	66:32	0:0	6	mb_index2xy
op	66:43	0:0	6	[
water	66:44	0:0	6	i
op	66:45	0:0	6	]
decl	67:12	67:51	6	int	error
op	67:21	0:0	6	=
water	67:23	0:0	6	s
op	67:24	0:0	6	->
water	67:26	0:0	6	error_status_table
op	67:44	0:0	6	[
water	67:45	0:0	6	mb_xy
op	67:50	0:0	6	]
if	69:12	70:24	6	(error & AC_END)
cond	69:15	69:21	7	error & AC_END
water	69:15	0:0	8	error
op	69:20	0:0	8	&
water	69:21	0:0	8	AC_END
stmts	70:16	70:24	7	
water	70:16	0:0	8	end_ok
op	70:22	0:0	8	=
water	70:23	0:0	8	0
water	70:24	0:0	8	;
if	71:12	72:24	6	(( error & MV_END ) || ( error & DC_END ) || ( error & AC_ERROR ))
cond	71:15	71:66	7	( error & MV_END ) || ( error & DC_END ) || ( error & AC_ERROR )
water	71:15	0:0	8	(
water	71:16	0:0	8	error
op	71:21	0:0	8	&
water	71:22	0:0	8	MV_END
water	71:28	0:0	8	)
op	71:30	0:0	8	||
water	71:33	0:0	8	(
water	71:34	0:0	8	error
op	71:39	0:0	8	&
water	71:40	0:0	8	DC_END
water	71:46	0:0	8	)
op	71:48	0:0	8	||
water	71:51	0:0	8	(
water	71:52	0:0	8	error
op	71:57	0:0	8	&
water	71:58	0:0	8	AC_ERROR
water	71:66	0:0	8	)
stmts	72:16	72:24	7	
water	72:16	0:0	8	end_ok
op	72:22	0:0	8	=
water	72:23	0:0	8	1
water	72:24	0:0	8	;
if	74:12	75:55	6	(! end_ok)
cond	74:15	74:16	7	! end_ok
op	74:15	0:0	8	!
water	74:16	0:0	8	end_ok
stmts	75:16	75:55	7	
water	75:16	0:0	8	s
op	75:17	0:0	8	->
water	75:19	0:0	8	error_status_table
op	75:37	0:0	8	[
water	75:38	0:0	8	mb_xy
op	75:43	0:0	8	]
op	75:44	0:0	8	|=
water	75:47	0:0	8	AC_ERROR
water	75:55	0:0	8	;
if	77:12	78:24	6	(error & VP_START)
cond	77:15	77:21	7	error & VP_START
water	77:15	0:0	8	error
op	77:20	0:0	8	&
water	77:21	0:0	8	VP_START
stmts	78:16	78:24	7	
water	78:16	0:0	8	end_ok
op	78:22	0:0	8	=
water	78:23	0:0	8	0
water	78:24	0:0	8	;
water	79:8	0:0	6	}
water	80:4	0:0	4	}
if	82:4	102:4	2	(s -> error_recognition >= 4)
cond	82:7	82:29	3	s -> error_recognition >= 4
water	82:7	0:0	4	s
op	82:8	0:0	4	->
water	82:10	0:0	4	error_recognition
op	82:27	0:0	4	>=
water	82:29	0:0	4	4
stmts	82:31	102:4	3	
water	82:31	0:0	4	{
decl	83:8	83:20	4	int	end_ok
op	83:18	0:0	4	=
water	83:19	0:0	4	1
for	85:8	101:8	4	(i = s -> mb_num - 2 ;i >= s -> mb_width + 100;i --)
forinit	85:12	85:25	5	i = s -> mb_num - 2 ;
water	85:12	0:0	6	i
op	85:13	0:0	6	=
water	85:14	0:0	6	s
op	85:15	0:0	6	->
water	85:17	0:0	6	mb_num
op	85:23	0:0	6	-
water	85:24	0:0	6	2
water	85:25	0:0	6	;
cond	85:27	85:42	5	i >= s -> mb_width + 100
water	85:27	0:0	6	i
op	85:28	0:0	6	>=
water	85:30	0:0	6	s
op	85:31	0:0	6	->
water	85:33	0:0	6	mb_width
op	85:41	0:0	6	+
water	85:42	0:0	6	100
forexpr	85:47	85:48	5	i --
water	85:47	0:0	6	i
op	85:48	0:0	6	--
stmts	85:51	101:8	5	
water	85:51	0:0	6	{
decl	86:12	86:46	6	const int	mb_xy
op	86:27	0:0	6	=
water	86:29	0:0	6	s
op	86:30	0:0	6	->
water	86:32	0:0	6	mb_index2xy
op	86:43	0:0	6	[
water	86:44	0:0	6	i
op	86:45	0:0	6	]
decl	87:12	87:54	6	int	error1
op	87:22	0:0	6	=
water	87:24	0:0	6	s
op	87:25	0:0	6	->
water	87:27	0:0	6	error_status_table
op	87:45	0:0	6	[
water	87:46	0:0	6	mb_xy
op	87:53	0:0	6	]
decl	88:12	88:66	6	int	error2
op	88:22	0:0	6	=
water	88:24	0:0	6	s
op	88:25	0:0	6	->
water	88:27	0:0	6	error_status_table
op	88:45	0:0	6	[
water	88:46	0:0	6	s
op	88:47	0:0	6	->
water	88:49	0:0	6	mb_index2xy
op	88:60	0:0	6	[
water	88:61	0:0	6	i
op	88:62	0:0	6	+
water	88:63	0:0	6	1
op	88:64	0:0	6	]
op	88:65	0:0	6	]
if	90:12	91:24	6	(error1 & VP_START)
cond	90:15	90:22	7	error1 & VP_START
water	90:15	0:0	8	error1
op	90:21	0:0	8	&
water	90:22	0:0	8	VP_START
stmts	91:16	91:24	7	
water	91:16	0:0	8	end_ok
op	91:22	0:0	8	=
water	91:23	0:0	8	1
water	91:24	0:0	8	;
if	93:12	97:12	6	(error2 == ( VP_START | DC_ERROR | AC_ERROR | MV_ERROR | AC_END | DC_END | MV_END ) && error1 != ( VP_START | DC_ERROR | AC_ERROR | MV_ERROR | AC_END | DC_END | MV_END ) && ( ( error1 & AC_END ) || ( error1 & DC_END ) || ( error1 & MV_END ) ))
cond	93:18	95:72	7	error2 == ( VP_START | DC_ERROR | AC_ERROR | MV_ERROR | AC_END | DC_END | MV_END ) && error1 != ( VP_START | DC_ERROR | AC_ERROR | MV_ERROR | AC_END | DC_END | MV_END ) && ( ( error1 & AC_END ) || ( error1 & DC_END ) || ( error1 & MV_END ) )
water	93:18	0:0	8	error2
op	93:24	0:0	8	==
water	93:26	0:0	8	(
water	93:27	0:0	8	VP_START
op	93:35	0:0	8	|
water	93:36	0:0	8	DC_ERROR
op	93:44	0:0	8	|
water	93:45	0:0	8	AC_ERROR
op	93:53	0:0	8	|
water	93:54	0:0	8	MV_ERROR
op	93:62	0:0	8	|
water	93:63	0:0	8	AC_END
op	93:69	0:0	8	|
water	93:70	0:0	8	DC_END
op	93:76	0:0	8	|
water	93:77	0:0	8	MV_END
water	93:83	0:0	8	)
op	94:15	0:0	8	&&
water	94:18	0:0	8	error1
op	94:24	0:0	8	!=
water	94:26	0:0	8	(
water	94:27	0:0	8	VP_START
op	94:35	0:0	8	|
water	94:36	0:0	8	DC_ERROR
op	94:44	0:0	8	|
water	94:45	0:0	8	AC_ERROR
op	94:53	0:0	8	|
water	94:54	0:0	8	MV_ERROR
op	94:62	0:0	8	|
water	94:63	0:0	8	AC_END
op	94:69	0:0	8	|
water	94:70	0:0	8	DC_END
op	94:76	0:0	8	|
water	94:77	0:0	8	MV_END
water	94:83	0:0	8	)
op	95:15	0:0	8	&&
water	95:18	0:0	8	(
water	95:19	0:0	8	(
water	95:20	0:0	8	error1
op	95:26	0:0	8	&
water	95:27	0:0	8	AC_END
water	95:33	0:0	8	)
op	95:35	0:0	8	||
water	95:38	0:0	8	(
water	95:39	0:0	8	error1
op	95:45	0:0	8	&
water	95:46	0:0	8	DC_END
water	95:52	0:0	8	)
op	95:54	0:0	8	||
water	95:57	0:0	8	(
water	95:58	0:0	8	error1
op	95:64	0:0	8	&
water	95:65	0:0	8	MV_END
water	95:71	0:0	8	)
water	95:72	0:0	8	)
stmts	95:74	97:12	7	
water	95:74	0:0	8	{
water	96:16	0:0	8	end_ok
op	96:22	0:0	8	=
water	96:23	0:0	8	0
water	96:24	0:0	8	;
water	97:12	0:0	8	}
if	99:12	100:73	6	(! end_ok)
cond	99:15	99:16	7	! end_ok
op	99:15	0:0	8	!
water	99:16	0:0	8	end_ok
stmts	100:16	100:73	7	
water	100:16	0:0	8	s
op	100:17	0:0	8	->
water	100:19	0:0	8	error_status_table
op	100:37	0:0	8	[
water	100:38	0:0	8	mb_xy
op	100:43	0:0	8	]
op	100:44	0:0	8	|=
water	100:47	0:0	8	DC_ERROR
op	100:55	0:0	8	|
water	100:56	0:0	8	AC_ERROR
op	100:64	0:0	8	|
water	100:65	0:0	8	MV_ERROR
water	100:73	0:0	8	;
water	101:8	0:0	6	}
water	102:4	0:0	4	}
water	105:4	0:0	2	distance
op	105:12	0:0	2	=
water	105:13	0:0	2	9999999
water	105:20	0:0	2	;
for	106:4	127:4	2	(error_type = 1 ;error_type <= 3;error_type ++)
forinit	106:8	106:20	3	error_type = 1 ;
water	106:8	0:0	4	error_type
op	106:18	0:0	4	=
water	106:19	0:0	4	1
water	106:20	0:0	4	;
cond	106:22	106:34	3	error_type <= 3
water	106:22	0:0	4	error_type
op	106:32	0:0	4	<=
water	106:34	0:0	4	3
forexpr	106:37	106:47	3	error_type ++
water	106:37	0:0	4	error_type
op	106:47	0:0	4	++
stmts	106:50	127:4	3	
water	106:50	0:0	4	{
for	107:8	126:8	4	(i = s -> mb_num - 1 ;i >= 0;i --)
forinit	107:12	107:25	5	i = s -> mb_num - 1 ;
water	107:12	0:0	6	i
op	107:13	0:0	6	=
water	107:14	0:0	6	s
op	107:15	0:0	6	->
water	107:17	0:0	6	mb_num
op	107:23	0:0	6	-
water	107:24	0:0	6	1
water	107:25	0:0	6	;
cond	107:27	107:30	5	i >= 0
water	107:27	0:0	6	i
op	107:28	0:0	6	>=
water	107:30	0:0	6	0
forexpr	107:33	107:34	5	i --
water	107:33	0:0	6	i
op	107:34	0:0	6	--
stmts	107:37	126:8	5	
water	107:37	0:0	6	{
decl	108:12	108:46	6	const int	mb_xy
op	108:27	0:0	6	=
water	108:29	0:0	6	s
op	108:30	0:0	6	->
water	108:32	0:0	6	mb_index2xy
op	108:43	0:0	6	[
water	108:44	0:0	6	i
op	108:45	0:0	6	]
decl	109:12	109:51	6	int	error
op	109:21	0:0	6	=
water	109:23	0:0	6	s
op	109:24	0:0	6	->
water	109:26	0:0	6	error_status_table
op	109:44	0:0	6	[
water	109:45	0:0	6	mb_xy
op	109:50	0:0	6	]
if	111:12	112:26	6	(! s -> mbskip_table [ mb_xy ])
cond	111:15	111:37	7	! s -> mbskip_table [ mb_xy ]
op	111:15	0:0	8	!
water	111:16	0:0	8	s
op	111:17	0:0	8	->
water	111:19	0:0	8	mbskip_table
op	111:31	0:0	8	[
water	111:32	0:0	8	mb_xy
op	111:37	0:0	8	]
stmts	112:16	112:26	7	
water	112:16	0:0	8	distance
op	112:24	0:0	8	++
water	112:26	0:0	8	;
if	113:12	114:27	6	(error & ( 1 << error_type ))
cond	113:15	113:35	7	error & ( 1 << error_type )
water	113:15	0:0	8	error
op	113:20	0:0	8	&
water	113:21	0:0	8	(
water	113:22	0:0	8	1
op	113:23	0:0	8	<<
water	113:25	0:0	8	error_type
water	113:35	0:0	8	)
stmts	114:16	114:27	7	
water	114:16	0:0	8	distance
op	114:24	0:0	8	=
water	114:26	0:0	8	0
water	114:27	0:0	8	;
if	116:12	119:12	6	(s -> partitioned_frame)
cond	116:15	116:18	7	s -> partitioned_frame
water	116:15	0:0	8	s
op	116:16	0:0	8	->
water	116:18	0:0	8	partitioned_frame
stmts	116:36	119:12	7	
water	116:36	0:0	8	{
if	117:16	118:64	8	(distance < threshold_part [ error_type - 1 ])
cond	117:19	117:57	9	distance < threshold_part [ error_type - 1 ]
water	117:19	0:0	10	distance
op	117:28	0:0	10	<
water	117:30	0:0	10	threshold_part
op	117:44	0:0	10	[
water	117:45	0:0	10	error_type
op	117:55	0:0	10	-
water	117:56	0:0	10	1
op	117:57	0:0	10	]
stmts	118:20	118:64	9	
water	118:20	0:0	10	s
op	118:21	0:0	10	->
water	118:23	0:0	10	error_status_table
op	118:41	0:0	10	[
water	118:42	0:0	10	mb_xy
op	118:47	0:0	10	]
op	118:48	0:0	10	|=
water	118:51	0:0	10	1
op	118:52	0:0	10	<<
water	118:54	0:0	10	error_type
water	118:64	0:0	10	;
water	119:12	0:0	8	}
else	119:13	122:12	6
stmts	119:17	122:12	7	
water	119:17	0:0	8	{
if	120:16	121:64	8	(distance < threshold)
cond	120:19	120:30	9	distance < threshold
water	120:19	0:0	10	distance
op	120:28	0:0	10	<
water	120:30	0:0	10	threshold
stmts	121:20	121:64	9	
water	121:20	0:0	10	s
op	121:21	0:0	10	->
water	121:23	0:0	10	error_status_table
op	121:41	0:0	10	[
water	121:42	0:0	10	mb_xy
op	121:47	0:0	10	]
op	121:48	0:0	10	|=
water	121:51	0:0	10	1
op	121:52	0:0	10	<<
water	121:54	0:0	10	error_type
water	121:64	0:0	10	;
water	122:12	0:0	8	}
if	124:12	125:33	6	(error & VP_START)
cond	124:15	124:21	7	error & VP_START
water	124:15	0:0	8	error
op	124:20	0:0	8	&
water	124:21	0:0	8	VP_START
stmts	125:16	125:33	7	
water	125:16	0:0	8	distance
op	125:24	0:0	8	=
water	125:26	0:0	8	9999999
water	125:33	0:0	8	;
water	126:8	0:0	6	}
water	127:4	0:0	4	}
water	130:4	0:0	2	error
op	130:9	0:0	2	=
water	130:10	0:0	2	0
water	130:11	0:0	2	;
for	131:4	141:4	2	(i = 0 ;i < s -> mb_num;i ++)
forinit	131:8	131:11	3	i = 0 ;
water	131:8	0:0	4	i
op	131:9	0:0	4	=
water	131:10	0:0	4	0
water	131:11	0:0	4	;
cond	131:13	131:18	3	i < s -> mb_num
water	131:13	0:0	4	i
op	131:14	0:0	4	<
water	131:15	0:0	4	s
op	131:16	0:0	4	->
water	131:18	0:0	4	mb_num
forexpr	131:26	131:27	3	i ++
water	131:26	0:0	4	i
op	131:27	0:0	4	++
stmts	131:30	141:4	3	
water	131:30	0:0	4	{
decl	132:8	132:42	4	const int	mb_xy
op	132:23	0:0	4	=
water	132:25	0:0	4	s
op	132:26	0:0	4	->
water	132:28	0:0	4	mb_index2xy
op	132:39	0:0	4	[
water	132:40	0:0	4	i
op	132:41	0:0	4	]
decl	133:8	133:51	4	int	old_error
op	133:21	0:0	4	=
water	133:23	0:0	4	s
op	133:24	0:0	4	->
water	133:26	0:0	4	error_status_table
op	133:44	0:0	4	[
water	133:45	0:0	4	mb_xy
op	133:50	0:0	4	]
if	135:8	136:58	4	(old_error & VP_START)
cond	135:11	135:21	5	old_error & VP_START
water	135:11	0:0	6	old_error
op	135:20	0:0	6	&
water	135:21	0:0	6	VP_START
stmts	136:12	136:58	5	
water	136:12	0:0	6	error
op	136:17	0:0	6	=
water	136:19	0:0	6	old_error
op	136:28	0:0	6	&
water	136:30	0:0	6	(
water	136:31	0:0	6	DC_ERROR
op	136:39	0:0	6	|
water	136:40	0:0	6	AC_ERROR
op	136:48	0:0	6	|
water	136:49	0:0	6	MV_ERROR
water	136:57	0:0	6	)
water	136:58	0:0	6	;
else	137:8	140:8	4
stmts	137:12	140:8	5	
water	137:12	0:0	6	{
water	138:12	0:0	6	error
op	138:17	0:0	6	|=
water	138:20	0:0	6	old_error
op	138:29	0:0	6	&
water	138:31	0:0	6	(
water	138:32	0:0	6	DC_ERROR
op	138:40	0:0	6	|
water	138:41	0:0	6	AC_ERROR
op	138:49	0:0	6	|
water	138:50	0:0	6	MV_ERROR
water	138:58	0:0	6	)
water	138:59	0:0	6	;
water	139:12	0:0	6	s
op	139:13	0:0	6	->
water	139:15	0:0	6	error_status_table
op	139:33	0:0	6	[
water	139:34	0:0	6	mb_xy
op	139:39	0:0	6	]
op	139:40	0:0	6	|=
water	139:43	0:0	6	error
water	139:48	0:0	6	;
water	140:8	0:0	6	}
water	141:4	0:0	4	}
if	144:4	152:4	2	(! s -> partitioned_frame)
cond	144:7	144:11	3	! s -> partitioned_frame
op	144:7	0:0	4	!
water	144:8	0:0	4	s
op	144:9	0:0	4	->
water	144:11	0:0	4	partitioned_frame
stmts	144:29	152:4	3	
water	144:29	0:0	4	{
for	145:8	151:8	4	(i = 0 ;i < s -> mb_num;i ++)
forinit	145:12	145:15	5	i = 0 ;
water	145:12	0:0	6	i
op	145:13	0:0	6	=
water	145:14	0:0	6	0
water	145:15	0:0	6	;
cond	145:17	145:22	5	i < s -> mb_num
water	145:17	0:0	6	i
op	145:18	0:0	6	<
water	145:19	0:0	6	s
op	145:20	0:0	6	->
water	145:22	0:0	6	mb_num
forexpr	145:30	145:31	5	i ++
water	145:30	0:0	6	i
op	145:31	0:0	6	++
stmts	145:34	151:8	5	
water	145:34	0:0	6	{
decl	146:12	146:46	6	const int	mb_xy
op	146:27	0:0	6	=
water	146:29	0:0	6	s
op	146:30	0:0	6	->
water	146:32	0:0	6	mb_index2xy
op	146:43	0:0	6	[
water	146:44	0:0	6	i
op	146:45	0:0	6	]
water	147:12	0:0	6	error
op	147:17	0:0	6	=
water	147:19	0:0	6	s
op	147:20	0:0	6	->
water	147:22	0:0	6	error_status_table
op	147:40	0:0	6	[
water	147:41	0:0	6	mb_xy
op	147:46	0:0	6	]
water	147:47	0:0	6	;
if	148:12	149:50	6	(error & ( AC_ERROR | DC_ERROR | MV_ERROR ))
cond	148:15	148:48	7	error & ( AC_ERROR | DC_ERROR | MV_ERROR )
water	148:15	0:0	8	error
op	148:20	0:0	8	&
water	148:21	0:0	8	(
water	148:22	0:0	8	AC_ERROR
op	148:30	0:0	8	|
water	148:31	0:0	8	DC_ERROR
op	148:39	0:0	8	|
water	148:40	0:0	8	MV_ERROR
water	148:48	0:0	8	)
stmts	149:16	149:50	7	
water	149:16	0:0	8	error
op	149:21	0:0	8	|=
water	149:24	0:0	8	AC_ERROR
op	149:32	0:0	8	|
water	149:33	0:0	8	DC_ERROR
op	149:41	0:0	8	|
water	149:42	0:0	8	MV_ERROR
water	149:50	0:0	8	;
water	150:12	0:0	6	s
op	150:13	0:0	6	->
water	150:15	0:0	6	error_status_table
op	150:33	0:0	6	[
water	150:34	0:0	6	mb_xy
op	150:39	0:0	6	]
op	150:40	0:0	6	=
water	150:42	0:0	6	error
water	150:47	0:0	6	;
water	151:8	0:0	6	}
water	152:4	0:0	4	}
water	155:4	0:0	2	dc_error
op	155:12	0:0	2	=
water	155:14	0:0	2	ac_error
op	155:22	0:0	2	=
water	155:24	0:0	2	mv_error
op	155:32	0:0	2	=
water	155:33	0:0	2	0
water	155:34	0:0	2	;
for	156:4	162:4	2	(i = 0 ;i < s -> mb_num;i ++)
forinit	156:8	156:11	3	i = 0 ;
water	156:8	0:0	4	i
op	156:9	0:0	4	=
water	156:10	0:0	4	0
water	156:11	0:0	4	;
cond	156:13	156:18	3	i < s -> mb_num
water	156:13	0:0	4	i
op	156:14	0:0	4	<
water	156:15	0:0	4	s
op	156:16	0:0	4	->
water	156:18	0:0	4	mb_num
forexpr	156:26	156:27	3	i ++
water	156:26	0:0	4	i
op	156:27	0:0	4	++
stmts	156:30	162:4	3	
water	156:30	0:0	4	{
decl	157:8	157:42	4	const int	mb_xy
op	157:23	0:0	4	=
water	157:25	0:0	4	s
op	157:26	0:0	4	->
water	157:28	0:0	4	mb_index2xy
op	157:39	0:0	4	[
water	157:40	0:0	4	i
op	157:41	0:0	4	]
water	158:8	0:0	4	error
op	158:13	0:0	4	=
water	158:15	0:0	4	s
op	158:16	0:0	4	->
water	158:18	0:0	4	error_status_table
op	158:36	0:0	4	[
water	158:37	0:0	4	mb_xy
op	158:42	0:0	4	]
water	158:43	0:0	4	;
if	159:8	159:38	4	(error & DC_ERROR)
cond	159:11	159:17	5	error & DC_ERROR
water	159:11	0:0	6	error
op	159:16	0:0	6	&
water	159:17	0:0	6	DC_ERROR
stmts	159:27	159:38	5	
water	159:27	0:0	6	dc_error
op	159:36	0:0	6	++
water	159:38	0:0	6	;
if	160:8	160:38	4	(error & AC_ERROR)
cond	160:11	160:17	5	error & AC_ERROR
water	160:11	0:0	6	error
op	160:16	0:0	6	&
water	160:17	0:0	6	AC_ERROR
stmts	160:27	160:38	5	
water	160:27	0:0	6	ac_error
op	160:36	0:0	6	++
water	160:38	0:0	6	;
if	161:8	161:38	4	(error & MV_ERROR)
cond	161:11	161:17	5	error & MV_ERROR
water	161:11	0:0	6	error
op	161:16	0:0	6	&
water	161:17	0:0	6	MV_ERROR
stmts	161:27	161:38	5	
water	161:27	0:0	6	mv_error
op	161:36	0:0	6	++
water	161:38	0:0	6	;
water	162:4	0:0	4	}
call	163:4	163:105	2	av_log
arg	163:11	163:19	3	s->avctx
water	163:11	0:0	4	s
op	163:12	0:0	4	->
water	163:14	0:0	4	avctx
arg	163:21	163:32	3	AV_LOG_INFO
water	163:21	0:0	4	AV_LOG_INFO
arg	163:34	163:75	3	"concealing %d DC, %d AC, %d MV errors\n"
water	163:34	0:0	4	"concealing %d DC, %d AC, %d MV errors\n"
arg	163:77	163:85	3	dc_error
water	163:77	0:0	4	dc_error
arg	163:87	163:95	3	ac_error
water	163:87	0:0	4	ac_error
arg	163:97	163:105	3	mv_error
water	163:97	0:0	4	mv_error
water	163:106	0:0	2	;
water	165:4	0:0	2	is_intra_likely
op	165:19	0:0	2	=
call	165:21	165:43	2	is_intra_more_likely
arg	165:42	165:43	3	s
water	165:42	0:0	4	s
water	165:44	0:0	2	;
for	168:4	178:4	2	(i = 0 ;i < s -> mb_num;i ++)
forinit	168:8	168:11	3	i = 0 ;
water	168:8	0:0	4	i
op	168:9	0:0	4	=
water	168:10	0:0	4	0
water	168:11	0:0	4	;
cond	168:13	168:18	3	i < s -> mb_num
water	168:13	0:0	4	i
op	168:14	0:0	4	<
water	168:15	0:0	4	s
op	168:16	0:0	4	->
water	168:18	0:0	4	mb_num
forexpr	168:26	168:27	3	i ++
water	168:26	0:0	4	i
op	168:27	0:0	4	++
stmts	168:30	178:4	3	
water	168:30	0:0	4	{
decl	169:8	169:42	4	const int	mb_xy
op	169:23	0:0	4	=
water	169:25	0:0	4	s
op	169:26	0:0	4	->
water	169:28	0:0	4	mb_index2xy
op	169:39	0:0	4	[
water	169:40	0:0	4	i
op	169:41	0:0	4	]
water	170:8	0:0	4	error
op	170:13	0:0	4	=
water	170:15	0:0	4	s
op	170:16	0:0	4	->
water	170:18	0:0	4	error_status_table
op	170:36	0:0	4	[
water	170:37	0:0	4	mb_xy
op	170:42	0:0	4	]
water	170:43	0:0	4	;
if	171:8	172:20	4	(! ( ( error & DC_ERROR ) && ( error & MV_ERROR ) ))
cond	171:11	171:49	5	! ( ( error & DC_ERROR ) && ( error & MV_ERROR ) )
op	171:11	0:0	6	!
water	171:12	0:0	6	(
water	171:13	0:0	6	(
water	171:14	0:0	6	error
op	171:19	0:0	6	&
water	171:20	0:0	6	DC_ERROR
water	171:28	0:0	6	)
op	171:30	0:0	6	&&
water	171:33	0:0	6	(
water	171:34	0:0	6	error
op	171:39	0:0	6	&
water	171:40	0:0	6	MV_ERROR
water	171:48	0:0	6	)
water	171:49	0:0	6	)
stmts	172:12	172:20	5	
continue	172:12	172:20	6	
if	174:8	175:66	4	(is_intra_likely)
cond	174:11	174:11	5	is_intra_likely
water	174:11	0:0	6	is_intra_likely
stmts	175:12	175:66	5	
water	175:12	0:0	6	s
op	175:13	0:0	6	->
water	175:15	0:0	6	current_picture
op	175:30	0:0	6	.
water	175:31	0:0	6	f
op	175:32	0:0	6	.
water	175:33	0:0	6	mb_type
op	175:40	0:0	6	[
water	175:41	0:0	6	mb_xy
op	175:46	0:0	6	]
op	175:48	0:0	6	=
water	175:50	0:0	6	MB_TYPE_INTRA4x4
water	175:66	0:0	6	;
else	176:8	177:76	4
stmts	177:12	177:76	5	
water	177:12	0:0	6	s
op	177:13	0:0	6	->
water	177:15	0:0	6	current_picture
op	177:30	0:0	6	.
water	177:31	0:0	6	f
op	177:32	0:0	6	.
water	177:33	0:0	6	mb_type
op	177:40	0:0	6	[
water	177:41	0:0	6	mb_xy
op	177:46	0:0	6	]
op	177:48	0:0	6	=
water	177:50	0:0	6	MB_TYPE_16x16
op	177:64	0:0	6	|
water	177:66	0:0	6	MB_TYPE_L0
water	177:76	0:0	6	;
water	178:4	0:0	4	}
if	181:4	186:8	2	(! s -> last_picture . f . data [ 0 ] && ! s -> next_picture . f . data [ 0 ])
cond	181:8	181:63	3	! s -> last_picture . f . data [ 0 ] && ! s -> next_picture . f . data [ 0 ]
op	181:8	0:0	4	!
water	181:9	0:0	4	s
op	181:10	0:0	4	->
water	181:12	0:0	4	last_picture
op	181:24	0:0	4	.
water	181:25	0:0	4	f
op	181:26	0:0	4	.
water	181:27	0:0	4	data
op	181:31	0:0	4	[
water	181:32	0:0	4	0
op	181:33	0:0	4	]
op	181:35	0:0	4	&&
op	181:38	0:0	4	!
water	181:39	0:0	4	s
op	181:40	0:0	4	->
water	181:42	0:0	4	next_picture
op	181:54	0:0	4	.
water	181:55	0:0	4	f
op	181:56	0:0	4	.
water	181:57	0:0	4	data
op	181:61	0:0	4	[
water	181:62	0:0	4	0
op	181:63	0:0	4	]
stmts	182:8	186:8	3	
for	182:8	186:8	4	(i = 0 ;i < s -> mb_num;i ++)
forinit	182:12	182:15	5	i = 0 ;
water	182:12	0:0	6	i
op	182:13	0:0	6	=
water	182:14	0:0	6	0
water	182:15	0:0	6	;
cond	182:17	182:22	5	i < s -> mb_num
water	182:17	0:0	6	i
op	182:18	0:0	6	<
water	182:19	0:0	6	s
op	182:20	0:0	6	->
water	182:22	0:0	6	mb_num
forexpr	182:30	182:31	5	i ++
water	182:30	0:0	6	i
op	182:31	0:0	6	++
stmts	182:34	186:8	5	
water	182:34	0:0	6	{
decl	183:12	183:46	6	const int	mb_xy
op	183:27	0:0	6	=
water	183:29	0:0	6	s
op	183:30	0:0	6	->
water	183:32	0:0	6	mb_index2xy
op	183:43	0:0	6	[
water	183:44	0:0	6	i
op	183:45	0:0	6	]
if	184:12	185:70	6	(!IS_INTRA (s -> current_picture . f . mb_type [ mb_xy ] ))
cond	184:16	184:61	7	!IS_INTRA (s -> current_picture . f . mb_type [ mb_xy ] )
op	184:16	0:0	8	!
call	184:17	184:61	8	IS_INTRA
arg	184:26	184:61	9	s->current_picture.f.mb_type[mb_xy]
water	184:26	0:0	10	s
op	184:27	0:0	10	->
water	184:29	0:0	10	current_picture
op	184:44	0:0	10	.
water	184:45	0:0	10	f
op	184:46	0:0	10	.
water	184:47	0:0	10	mb_type
op	184:54	0:0	10	[
water	184:55	0:0	10	mb_xy
op	184:60	0:0	10	]
stmts	185:16	185:70	7	
water	185:16	0:0	8	s
op	185:17	0:0	8	->
water	185:19	0:0	8	current_picture
op	185:34	0:0	8	.
water	185:35	0:0	8	f
op	185:36	0:0	8	.
water	185:37	0:0	8	mb_type
op	185:44	0:0	8	[
water	185:45	0:0	8	mb_xy
op	185:50	0:0	8	]
op	185:52	0:0	8	=
water	185:54	0:0	8	MB_TYPE_INTRA4x4
water	185:70	0:0	8	;
water	186:8	0:0	6	}
for	189:4	223:4	2	(mb_y = 0 ;mb_y < s -> mb_height;mb_y ++)
forinit	189:8	189:14	3	mb_y = 0 ;
water	189:8	0:0	4	mb_y
op	189:12	0:0	4	=
water	189:13	0:0	4	0
water	189:14	0:0	4	;
cond	189:16	189:24	3	mb_y < s -> mb_height
water	189:16	0:0	4	mb_y
op	189:20	0:0	4	<
water	189:21	0:0	4	s
op	189:22	0:0	4	->
water	189:24	0:0	4	mb_height
forexpr	189:35	189:39	3	mb_y ++
water	189:35	0:0	4	mb_y
op	189:39	0:0	4	++
stmts	189:42	223:4	3	
water	189:42	0:0	4	{
for	190:8	222:8	4	(mb_x = 0 ;mb_x < s -> mb_width;mb_x ++)
forinit	190:12	190:18	5	mb_x = 0 ;
water	190:12	0:0	6	mb_x
op	190:16	0:0	6	=
water	190:17	0:0	6	0
water	190:18	0:0	6	;
cond	190:20	190:28	5	mb_x < s -> mb_width
water	190:20	0:0	6	mb_x
op	190:24	0:0	6	<
water	190:25	0:0	6	s
op	190:26	0:0	6	->
water	190:28	0:0	6	mb_width
forexpr	190:38	190:42	5	mb_x ++
water	190:38	0:0	6	mb_x
op	190:42	0:0	6	++
stmts	190:45	222:8	5	
water	190:45	0:0	6	{
decl	191:12	191:55	6	const int	mb_xy
op	191:27	0:0	6	=
water	191:29	0:0	6	mb_x
op	191:34	0:0	6	+
water	191:36	0:0	6	mb_y
op	191:41	0:0	6	*
water	191:43	0:0	6	s
op	191:44	0:0	6	->
water	191:46	0:0	6	mb_stride
decl	192:12	192:66	6	const int	mb_type
op	192:29	0:0	6	=
water	192:31	0:0	6	s
op	192:32	0:0	6	->
water	192:34	0:0	6	current_picture
op	192:49	0:0	6	.
water	192:50	0:0	6	f
op	192:51	0:0	6	.
water	192:52	0:0	6	mb_type
op	192:59	0:0	6	[
water	192:60	0:0	6	mb_xy
op	192:65	0:0	6	]
decl	193:12	193:48	6	int	dir
op	193:20	0:0	6	=
op	193:22	0:0	6	!
water	193:23	0:0	6	s
op	193:24	0:0	6	->
water	193:26	0:0	6	last_picture
op	193:38	0:0	6	.
water	193:39	0:0	6	f
op	193:40	0:0	6	.
water	193:41	0:0	6	data
op	193:45	0:0	6	[
water	193:46	0:0	6	0
op	193:47	0:0	6	]
water	194:12	0:0	6	error
op	194:17	0:0	6	=
water	194:19	0:0	6	s
op	194:20	0:0	6	->
water	194:22	0:0	6	error_status_table
op	194:40	0:0	6	[
water	194:41	0:0	6	mb_xy
op	194:46	0:0	6	]
water	194:47	0:0	6	;
if	196:12	196:42	6	(IS_INTRA (mb_type ))
cond	196:15	196:31	7	IS_INTRA (mb_type )
call	196:15	196:31	8	IS_INTRA
arg	196:24	196:31	9	mb_type
water	196:24	0:0	10	mb_type
stmts	196:34	196:42	7	
continue	196:34	196:42	8	
if	197:12	197:39	6	(error & MV_ERROR)
cond	197:15	197:21	7	error & MV_ERROR
water	197:15	0:0	8	error
op	197:20	0:0	8	&
water	197:21	0:0	8	MV_ERROR
stmts	197:31	197:39	7	
continue	197:31	197:39	8	
if	198:12	198:42	6	(! ( error & AC_ERROR ))
cond	198:15	198:31	7	! ( error & AC_ERROR )
op	198:15	0:0	8	!
water	198:16	0:0	8	(
water	198:17	0:0	8	error
op	198:22	0:0	8	&
water	198:23	0:0	8	AC_ERROR
water	198:31	0:0	8	)
stmts	198:34	198:42	7	
continue	198:34	198:42	8	
water	200:12	0:0	6	s
op	200:13	0:0	6	->
water	200:15	0:0	6	mv_dir
op	200:22	0:0	6	=
water	200:24	0:0	6	dir
water	200:28	0:0	6	?
water	200:30	0:0	6	MV_DIR_BACKWARD
water	200:46	0:0	6	:
water	200:48	0:0	6	MV_DIR_FORWARD
water	200:62	0:0	6	;
water	201:12	0:0	6	s
op	201:13	0:0	6	->
water	201:15	0:0	6	mb_intra
op	201:23	0:0	6	=
water	201:24	0:0	6	0
water	201:25	0:0	6	;
water	202:12	0:0	6	s
op	202:13	0:0	6	->
water	202:15	0:0	6	mb_skipped
op	202:25	0:0	6	=
water	202:26	0:0	6	0
water	202:27	0:0	6	;
if	203:12	211:12	6	(IS_8X8 (mb_type ))
cond	203:15	203:29	7	IS_8X8 (mb_type )
call	203:15	203:29	8	IS_8X8
arg	203:22	203:29	9	mb_type
water	203:22	0:0	10	mb_type
stmts	203:31	211:12	7	
water	203:31	0:0	8	{
decl	204:16	204:58	8	int	mb_index
op	204:28	0:0	8	=
water	204:30	0:0	8	mb_x
op	204:34	0:0	8	*
water	204:35	0:0	8	2
op	204:37	0:0	8	+
water	204:39	0:0	8	mb_y
op	204:43	0:0	8	*
water	204:44	0:0	8	2
op	204:45	0:0	8	*
water	204:46	0:0	8	s
op	204:47	0:0	8	->
water	204:49	0:0	8	b8_stride
decl	205:16	205:21	8	int	j
water	206:16	0:0	8	s
op	206:17	0:0	8	->
water	206:19	0:0	8	mv_type
op	206:27	0:0	8	=
water	206:29	0:0	8	MV_TYPE_8X8
water	206:40	0:0	8	;
for	207:16	210:16	8	(j = 0 ;j < 4;j ++)
forinit	207:20	207:23	9	j = 0 ;
water	207:20	0:0	10	j
op	207:21	0:0	10	=
water	207:22	0:0	10	0
water	207:23	0:0	10	;
cond	207:25	207:27	9	j < 4
water	207:25	0:0	10	j
op	207:26	0:0	10	<
water	207:27	0:0	10	4
forexpr	207:30	207:31	9	j ++
water	207:30	0:0	10	j
op	207:31	0:0	10	++
stmts	207:34	210:16	9	
water	207:34	0:0	10	{
water	208:20	0:0	10	s
op	208:21	0:0	10	->
water	208:23	0:0	10	mv
op	208:25	0:0	10	[
water	208:26	0:0	10	0
op	208:27	0:0	10	]
op	208:28	0:0	10	[
water	208:29	0:0	10	j
op	208:30	0:0	10	]
op	208:31	0:0	10	[
water	208:32	0:0	10	0
op	208:33	0:0	10	]
op	208:35	0:0	10	=
water	208:37	0:0	10	s
op	208:38	0:0	10	->
water	208:40	0:0	10	current_picture
op	208:55	0:0	10	.
water	208:56	0:0	10	f
op	208:57	0:0	10	.
water	208:58	0:0	10	motion_val
op	208:68	0:0	10	[
water	208:69	0:0	10	dir
op	208:72	0:0	10	]
op	208:73	0:0	10	[
water	208:74	0:0	10	mb_index
op	208:83	0:0	10	+
water	208:85	0:0	10	(
water	208:86	0:0	10	j
op	208:88	0:0	10	&
water	208:90	0:0	10	1
water	208:91	0:0	10	)
op	208:93	0:0	10	+
water	208:95	0:0	10	(
water	208:96	0:0	10	j
op	208:98	0:0	10	>>
water	208:101	0:0	10	1
water	208:102	0:0	10	)
op	208:104	0:0	10	*
water	208:106	0:0	10	s
op	208:107	0:0	10	->
water	208:109	0:0	10	b8_stride
op	208:118	0:0	10	]
op	208:119	0:0	10	[
water	208:120	0:0	10	0
op	208:121	0:0	10	]
water	208:122	0:0	10	;
water	209:20	0:0	10	s
op	209:21	0:0	10	->
water	209:23	0:0	10	mv
op	209:25	0:0	10	[
water	209:26	0:0	10	0
op	209:27	0:0	10	]
op	209:28	0:0	10	[
water	209:29	0:0	10	j
op	209:30	0:0	10	]
op	209:31	0:0	10	[
water	209:32	0:0	10	1
op	209:33	0:0	10	]
op	209:35	0:0	10	=
water	209:37	0:0	10	s
op	209:38	0:0	10	->
water	209:40	0:0	10	current_picture
op	209:55	0:0	10	.
water	209:56	0:0	10	f
op	209:57	0:0	10	.
water	209:58	0:0	10	motion_val
op	209:68	0:0	10	[
water	209:69	0:0	10	dir
op	209:72	0:0	10	]
op	209:73	0:0	10	[
water	209:74	0:0	10	mb_index
op	209:83	0:0	10	+
water	209:85	0:0	10	(
water	209:86	0:0	10	j
op	209:88	0:0	10	&
water	209:90	0:0	10	1
water	209:91	0:0	10	)
op	209:93	0:0	10	+
water	209:95	0:0	10	(
water	209:96	0:0	10	j
op	209:98	0:0	10	>>
water	209:101	0:0	10	1
water	209:102	0:0	10	)
op	209:104	0:0	10	*
water	209:106	0:0	10	s
op	209:107	0:0	10	->
water	209:109	0:0	10	b8_stride
op	209:118	0:0	10	]
op	209:119	0:0	10	[
water	209:120	0:0	10	1
op	209:121	0:0	10	]
water	209:122	0:0	10	;
water	210:16	0:0	10	}
water	211:12	0:0	8	}
else	211:13	215:12	6
stmts	211:17	215:12	7	
water	211:17	0:0	8	{
water	212:16	0:0	8	s
op	212:17	0:0	8	->
water	212:19	0:0	8	mv_type
op	212:27	0:0	8	=
water	212:29	0:0	8	MV_TYPE_16X16
water	212:42	0:0	8	;
water	213:16	0:0	8	s
op	213:17	0:0	8	->
water	213:19	0:0	8	mv
op	213:21	0:0	8	[
water	213:22	0:0	8	0
op	213:23	0:0	8	]
op	213:24	0:0	8	[
water	213:25	0:0	8	0
op	213:26	0:0	8	]
op	213:27	0:0	8	[
water	213:28	0:0	8	0
op	213:29	0:0	8	]
op	213:31	0:0	8	=
water	213:33	0:0	8	s
op	213:34	0:0	8	->
water	213:36	0:0	8	current_picture
op	213:51	0:0	8	.
water	213:52	0:0	8	f
op	213:53	0:0	8	.
water	213:54	0:0	8	motion_val
op	213:64	0:0	8	[
water	213:65	0:0	8	dir
op	213:68	0:0	8	]
op	213:69	0:0	8	[
water	213:71	0:0	8	mb_x
op	213:75	0:0	8	*
water	213:76	0:0	8	2
op	213:78	0:0	8	+
water	213:80	0:0	8	mb_y
op	213:84	0:0	8	*
water	213:85	0:0	8	2
op	213:86	0:0	8	*
water	213:87	0:0	8	s
op	213:88	0:0	8	->
water	213:90	0:0	8	b8_stride
op	213:100	0:0	8	]
op	213:101	0:0	8	[
water	213:102	0:0	8	0
op	213:103	0:0	8	]
water	213:104	0:0	8	;
water	214:16	0:0	8	s
op	214:17	0:0	8	->
water	214:19	0:0	8	mv
op	214:21	0:0	8	[
water	214:22	0:0	8	0
op	214:23	0:0	8	]
op	214:24	0:0	8	[
water	214:25	0:0	8	0
op	214:26	0:0	8	]
op	214:27	0:0	8	[
water	214:28	0:0	8	1
op	214:29	0:0	8	]
op	214:31	0:0	8	=
water	214:33	0:0	8	s
op	214:34	0:0	8	->
water	214:36	0:0	8	current_picture
op	214:51	0:0	8	.
water	214:52	0:0	8	f
op	214:53	0:0	8	.
water	214:54	0:0	8	motion_val
op	214:64	0:0	8	[
water	214:65	0:0	8	dir
op	214:68	0:0	8	]
op	214:69	0:0	8	[
water	214:71	0:0	8	mb_x
op	214:75	0:0	8	*
water	214:76	0:0	8	2
op	214:78	0:0	8	+
water	214:80	0:0	8	mb_y
op	214:84	0:0	8	*
water	214:85	0:0	8	2
op	214:86	0:0	8	*
water	214:87	0:0	8	s
op	214:88	0:0	8	->
water	214:90	0:0	8	b8_stride
op	214:100	0:0	8	]
op	214:101	0:0	8	[
water	214:102	0:0	8	1
op	214:103	0:0	8	]
water	214:104	0:0	8	;
water	215:12	0:0	8	}
call	217:12	217:43	6	s->dsp.clear_blocks
arg	217:32	217:43	7	s->block[0]
water	217:32	0:0	8	s
op	217:33	0:0	8	->
water	217:35	0:0	8	block
op	217:40	0:0	8	[
water	217:41	0:0	8	0
op	217:42	0:0	8	]
water	217:44	0:0	6	;
water	219:12	0:0	6	s
op	219:13	0:0	6	->
water	219:15	0:0	6	mb_x
op	219:19	0:0	6	=
water	219:21	0:0	6	mb_x
water	219:25	0:0	6	;
water	220:12	0:0	6	s
op	220:13	0:0	6	->
water	220:15	0:0	6	mb_y
op	220:19	0:0	6	=
water	220:21	0:0	6	mb_y
water	220:25	0:0	6	;
call	221:12	221:26	6	decode_mb
arg	221:22	221:23	7	s
water	221:22	0:0	8	s
arg	221:25	221:26	7	0
water	221:25	0:0	8	0
water	221:27	0:0	6	;
water	222:8	0:0	6	}
water	223:4	0:0	4	}
if	226:4	272:4	2	(s -> pict_type == AV_PICTURE_TYPE_B)
cond	226:7	226:21	3	s -> pict_type == AV_PICTURE_TYPE_B
water	226:7	0:0	4	s
op	226:8	0:0	4	->
water	226:10	0:0	4	pict_type
op	226:19	0:0	4	==
water	226:21	0:0	4	AV_PICTURE_TYPE_B
stmts	226:39	272:4	3	
water	226:39	0:0	4	{
for	227:8	271:8	4	(mb_y = 0 ;mb_y < s -> mb_height;mb_y ++)
forinit	227:12	227:18	5	mb_y = 0 ;
water	227:12	0:0	6	mb_y
op	227:16	0:0	6	=
water	227:17	0:0	6	0
water	227:18	0:0	6	;
cond	227:20	227:28	5	mb_y < s -> mb_height
water	227:20	0:0	6	mb_y
op	227:24	0:0	6	<
water	227:25	0:0	6	s
op	227:26	0:0	6	->
water	227:28	0:0	6	mb_height
forexpr	227:39	227:43	5	mb_y ++
water	227:39	0:0	6	mb_y
op	227:43	0:0	6	++
stmts	227:46	271:8	5	
water	227:46	0:0	6	{
for	228:12	270:12	6	(mb_x = 0 ;mb_x < s -> mb_width;mb_x ++)
forinit	228:16	228:22	7	mb_x = 0 ;
water	228:16	0:0	8	mb_x
op	228:20	0:0	8	=
water	228:21	0:0	8	0
water	228:22	0:0	8	;
cond	228:24	228:32	7	mb_x < s -> mb_width
water	228:24	0:0	8	mb_x
op	228:28	0:0	8	<
water	228:29	0:0	8	s
op	228:30	0:0	8	->
water	228:32	0:0	8	mb_width
forexpr	228:42	228:46	7	mb_x ++
water	228:42	0:0	8	mb_x
op	228:46	0:0	8	++
stmts	228:49	270:12	7	
water	228:49	0:0	8	{
decl	229:16	229:52	8	int	xy
op	229:22	0:0	8	=
water	229:24	0:0	8	mb_x
op	229:28	0:0	8	*
water	229:29	0:0	8	2
op	229:31	0:0	8	+
water	229:33	0:0	8	mb_y
op	229:37	0:0	8	*
water	229:38	0:0	8	2
op	229:39	0:0	8	*
water	229:40	0:0	8	s
op	229:41	0:0	8	->
water	229:43	0:0	8	b8_stride
decl	230:16	230:59	8	const int	mb_xy
op	230:31	0:0	8	=
water	230:33	0:0	8	mb_x
op	230:38	0:0	8	+
water	230:40	0:0	8	mb_y
op	230:45	0:0	8	*
water	230:47	0:0	8	s
op	230:48	0:0	8	->
water	230:50	0:0	8	mb_stride
decl	231:16	231:70	8	const int	mb_type
op	231:33	0:0	8	=
water	231:35	0:0	8	s
op	231:36	0:0	8	->
water	231:38	0:0	8	current_picture
op	231:53	0:0	8	.
water	231:54	0:0	8	f
op	231:55	0:0	8	.
water	231:56	0:0	8	mb_type
op	231:63	0:0	8	[
water	231:64	0:0	8	mb_xy
op	231:69	0:0	8	]
water	232:16	0:0	8	error
op	232:21	0:0	8	=
water	232:23	0:0	8	s
op	232:24	0:0	8	->
water	232:26	0:0	8	error_status_table
op	232:44	0:0	8	[
water	232:45	0:0	8	mb_xy
op	232:50	0:0	8	]
water	232:51	0:0	8	;
if	234:16	234:46	8	(IS_INTRA (mb_type ))
cond	234:19	234:35	9	IS_INTRA (mb_type )
call	234:19	234:35	10	IS_INTRA
arg	234:28	234:35	11	mb_type
water	234:28	0:0	12	mb_type
stmts	234:38	234:46	9	
continue	234:38	234:46	10	
if	235:16	235:46	8	(! ( error & MV_ERROR ))
cond	235:19	235:35	9	! ( error & MV_ERROR )
op	235:19	0:0	10	!
water	235:20	0:0	10	(
water	235:21	0:0	10	error
op	235:26	0:0	10	&
water	235:27	0:0	10	MV_ERROR
water	235:35	0:0	10	)
stmts	235:38	235:46	9	
continue	235:38	235:46	10	
if	236:16	236:46	8	(! ( error & AC_ERROR ))
cond	236:19	236:35	9	! ( error & AC_ERROR )
op	236:19	0:0	10	!
water	236:20	0:0	10	(
water	236:21	0:0	10	error
op	236:26	0:0	10	&
water	236:27	0:0	10	AC_ERROR
water	236:35	0:0	10	)
stmts	236:38	236:46	9	
continue	236:38	236:46	10	
water	238:16	0:0	8	s
op	238:17	0:0	8	->
water	238:19	0:0	8	mv_dir
op	238:26	0:0	8	=
water	238:28	0:0	8	MV_DIR_FORWARD
op	238:42	0:0	8	|
water	238:43	0:0	8	MV_DIR_BACKWARD
water	238:58	0:0	8	;
if	239:16	239:75	8	(! s -> last_picture . f . data [ 0 ])
cond	239:19	239:44	9	! s -> last_picture . f . data [ 0 ]
op	239:19	0:0	10	!
water	239:20	0:0	10	s
op	239:21	0:0	10	->
water	239:23	0:0	10	last_picture
op	239:35	0:0	10	.
water	239:36	0:0	10	f
op	239:37	0:0	10	.
water	239:38	0:0	10	data
op	239:42	0:0	10	[
water	239:43	0:0	10	0
op	239:44	0:0	10	]
stmts	239:47	239:75	9	
water	239:47	0:0	10	s
op	239:48	0:0	10	->
water	239:50	0:0	10	mv_dir
op	239:57	0:0	10	&=
water	239:60	0:0	10	~MV_DIR_FORWARD
water	239:75	0:0	10	;
if	240:16	240:76	8	(! s -> next_picture . f . data [ 0 ])
cond	240:19	240:44	9	! s -> next_picture . f . data [ 0 ]
op	240:19	0:0	10	!
water	240:20	0:0	10	s
op	240:21	0:0	10	->
water	240:23	0:0	10	next_picture
op	240:35	0:0	10	.
water	240:36	0:0	10	f
op	240:37	0:0	10	.
water	240:38	0:0	10	data
op	240:42	0:0	10	[
water	240:43	0:0	10	0
op	240:44	0:0	10	]
stmts	240:47	240:76	9	
water	240:47	0:0	10	s
op	240:48	0:0	10	->
water	240:50	0:0	10	mv_dir
op	240:57	0:0	10	&=
water	240:60	0:0	10	~MV_DIR_BACKWARD
water	240:76	0:0	10	;
water	241:16	0:0	8	s
op	241:17	0:0	8	->
water	241:19	0:0	8	mb_intra
op	241:27	0:0	8	=
water	241:28	0:0	8	0
water	241:29	0:0	8	;
water	242:16	0:0	8	s
op	242:17	0:0	8	->
water	242:19	0:0	8	mv_type
op	242:27	0:0	8	=
water	242:29	0:0	8	MV_TYPE_16X16
water	242:42	0:0	8	;
water	243:16	0:0	8	s
op	243:17	0:0	8	->
water	243:19	0:0	8	mb_skipped
op	243:29	0:0	8	=
water	243:30	0:0	8	0
water	243:31	0:0	8	;
if	245:16	259:16	8	(s -> pp_time)
cond	245:19	245:22	9	s -> pp_time
water	245:19	0:0	10	s
op	245:20	0:0	10	->
water	245:22	0:0	10	pp_time
stmts	245:30	259:16	9	
water	245:30	0:0	10	{
decl	246:20	246:43	10	int	time_pp
op	246:31	0:0	10	=
water	246:33	0:0	10	s
op	246:34	0:0	10	->
water	246:36	0:0	10	pp_time
decl	247:20	247:43	10	int	time_pb
op	247:31	0:0	10	=
water	247:33	0:0	10	s
op	247:34	0:0	10	->
water	247:36	0:0	10	pb_time
if	249:20	251:20	10	(s -> avctx -> codec_id == CODEC_ID_H264)
cond	249:24	249:46	11	s -> avctx -> codec_id == CODEC_ID_H264
water	249:24	0:0	12	s
op	249:25	0:0	12	->
water	249:27	0:0	12	avctx
op	249:32	0:0	12	->
water	249:34	0:0	12	codec_id
op	249:43	0:0	12	==
water	249:46	0:0	12	CODEC_ID_H264
stmts	249:61	251:20	11	
water	249:61	0:0	12	{
water	0:0	0:0	12	STATEMENTS
water	251:20	0:0	12	}
else	251:22	254:20	10
stmts	251:27	254:20	11	
water	251:27	0:0	12	{
call	252:24	253:56	12	ff_thread_await_progress
arg	252:49	252:80	13	(AVFrame*)s->next_picture_ptr
water	252:49	0:0	14	(
water	252:50	0:0	14	AVFrame
op	252:58	0:0	14	*
water	252:59	0:0	14	)
water	252:61	0:0	14	s
op	252:62	0:0	14	->
water	252:64	0:0	14	next_picture_ptr
arg	253:49	253:53	13	mb_y
water	253:49	0:0	14	mb_y
arg	253:55	253:56	13	0
water	253:55	0:0	14	0
water	253:57	0:0	12	;
water	254:20	0:0	12	}
water	255:20	0:0	10	s
op	255:21	0:0	10	->
water	255:23	0:0	10	mv
op	255:25	0:0	10	[
water	255:26	0:0	10	0
op	255:27	0:0	10	]
op	255:28	0:0	10	[
water	255:29	0:0	10	0
op	255:30	0:0	10	]
op	255:31	0:0	10	[
water	255:32	0:0	10	0
op	255:33	0:0	10	]
op	255:35	0:0	10	=
water	255:37	0:0	10	s
op	255:38	0:0	10	->
water	255:40	0:0	10	next_picture
op	255:52	0:0	10	.
water	255:53	0:0	10	f
op	255:54	0:0	10	.
water	255:55	0:0	10	motion_val
op	255:65	0:0	10	[
water	255:66	0:0	10	0
op	255:67	0:0	10	]
op	255:68	0:0	10	[
water	255:69	0:0	10	xy
op	255:71	0:0	10	]
op	255:72	0:0	10	[
water	255:73	0:0	10	0
op	255:74	0:0	10	]
op	255:76	0:0	10	*
water	255:89	0:0	10	time_pb
op	255:98	0:0	10	/
water	255:100	0:0	10	time_pp
water	255:107	0:0	10	;
water	256:20	0:0	10	s
op	256:21	0:0	10	->
water	256:23	0:0	10	mv
op	256:25	0:0	10	[
water	256:26	0:0	10	0
op	256:27	0:0	10	]
op	256:28	0:0	10	[
water	256:29	0:0	10	0
op	256:30	0:0	10	]
op	256:31	0:0	10	[
water	256:32	0:0	10	1
op	256:33	0:0	10	]
op	256:35	0:0	10	=
water	256:37	0:0	10	s
op	256:38	0:0	10	->
water	256:40	0:0	10	next_picture
op	256:52	0:0	10	.
water	256:53	0:0	10	f
op	256:54	0:0	10	.
water	256:55	0:0	10	motion_val
op	256:65	0:0	10	[
water	256:66	0:0	10	0
op	256:67	0:0	10	]
op	256:68	0:0	10	[
water	256:69	0:0	10	xy
op	256:71	0:0	10	]
op	256:72	0:0	10	[
water	256:73	0:0	10	1
op	256:74	0:0	10	]
op	256:76	0:0	10	*
water	256:89	0:0	10	time_pb
op	256:98	0:0	10	/
water	256:100	0:0	10	time_pp
water	256:107	0:0	10	;
water	257:20	0:0	10	s
op	257:21	0:0	10	->
water	257:23	0:0	10	mv
op	257:25	0:0	10	[
water	257:26	0:0	10	1
op	257:27	0:0	10	]
op	257:28	0:0	10	[
water	257:29	0:0	10	0
op	257:30	0:0	10	]
op	257:31	0:0	10	[
water	257:32	0:0	10	0
op	257:33	0:0	10	]
op	257:35	0:0	10	=
water	257:37	0:0	10	s
op	257:38	0:0	10	->
water	257:40	0:0	10	next_picture
op	257:52	0:0	10	.
water	257:53	0:0	10	f
op	257:54	0:0	10	.
water	257:55	0:0	10	motion_val
op	257:65	0:0	10	[
water	257:66	0:0	10	0
op	257:67	0:0	10	]
op	257:68	0:0	10	[
water	257:69	0:0	10	xy
op	257:71	0:0	10	]
op	257:72	0:0	10	[
water	257:73	0:0	10	0
op	257:74	0:0	10	]
op	257:76	0:0	10	*
water	257:78	0:0	10	(
water	257:79	0:0	10	time_pb
op	257:87	0:0	10	-
water	257:89	0:0	10	time_pp
water	257:96	0:0	10	)
op	257:98	0:0	10	/
water	257:100	0:0	10	time_pp
water	257:107	0:0	10	;
water	258:20	0:0	10	s
op	258:21	0:0	10	->
water	258:23	0:0	10	mv
op	258:25	0:0	10	[
water	258:26	0:0	10	1
op	258:27	0:0	10	]
op	258:28	0:0	10	[
water	258:29	0:0	10	0
op	258:30	0:0	10	]
op	258:31	0:0	10	[
water	258:32	0:0	10	1
op	258:33	0:0	10	]
op	258:35	0:0	10	=
water	258:37	0:0	10	s
op	258:38	0:0	10	->
water	258:40	0:0	10	next_picture
op	258:52	0:0	10	.
water	258:53	0:0	10	f
op	258:54	0:0	10	.
water	258:55	0:0	10	motion_val
op	258:65	0:0	10	[
water	258:66	0:0	10	0
op	258:67	0:0	10	]
op	258:68	0:0	10	[
water	258:69	0:0	10	xy
op	258:71	0:0	10	]
op	258:72	0:0	10	[
water	258:73	0:0	10	1
op	258:74	0:0	10	]
op	258:76	0:0	10	*
water	258:78	0:0	10	(
water	258:79	0:0	10	time_pb
op	258:87	0:0	10	-
water	258:89	0:0	10	time_pp
water	258:96	0:0	10	)
op	258:98	0:0	10	/
water	258:100	0:0	10	time_pp
water	258:107	0:0	10	;
water	259:16	0:0	10	}
else	259:17	264:16	8
stmts	259:21	264:16	9	
water	259:21	0:0	10	{
water	260:20	0:0	10	s
op	260:21	0:0	10	->
water	260:23	0:0	10	mv
op	260:25	0:0	10	[
water	260:26	0:0	10	0
op	260:27	0:0	10	]
op	260:28	0:0	10	[
water	260:29	0:0	10	0
op	260:30	0:0	10	]
op	260:31	0:0	10	[
water	260:32	0:0	10	0
op	260:33	0:0	10	]
op	260:34	0:0	10	=
water	260:36	0:0	10	0
water	260:37	0:0	10	;
water	261:20	0:0	10	s
op	261:21	0:0	10	->
water	261:23	0:0	10	mv
op	261:25	0:0	10	[
water	261:26	0:0	10	0
op	261:27	0:0	10	]
op	261:28	0:0	10	[
water	261:29	0:0	10	0
op	261:30	0:0	10	]
op	261:31	0:0	10	[
water	261:32	0:0	10	1
op	261:33	0:0	10	]
op	261:34	0:0	10	=
water	261:36	0:0	10	0
water	261:37	0:0	10	;
water	262:20	0:0	10	s
op	262:21	0:0	10	->
water	262:23	0:0	10	mv
op	262:25	0:0	10	[
water	262:26	0:0	10	1
op	262:27	0:0	10	]
op	262:28	0:0	10	[
water	262:29	0:0	10	0
op	262:30	0:0	10	]
op	262:31	0:0	10	[
water	262:32	0:0	10	0
op	262:33	0:0	10	]
op	262:34	0:0	10	=
water	262:36	0:0	10	0
water	262:37	0:0	10	;
water	263:20	0:0	10	s
op	263:21	0:0	10	->
water	263:23	0:0	10	mv
op	263:25	0:0	10	[
water	263:26	0:0	10	1
op	263:27	0:0	10	]
op	263:28	0:0	10	[
water	263:29	0:0	10	0
op	263:30	0:0	10	]
op	263:31	0:0	10	[
water	263:32	0:0	10	1
op	263:33	0:0	10	]
op	263:34	0:0	10	=
water	263:36	0:0	10	0
water	263:37	0:0	10	;
water	264:16	0:0	10	}
call	266:16	266:47	8	s->dsp.clear_blocks
arg	266:36	266:47	9	s->block[0]
water	266:36	0:0	10	s
op	266:37	0:0	10	->
water	266:39	0:0	10	block
op	266:44	0:0	10	[
water	266:45	0:0	10	0
op	266:46	0:0	10	]
water	266:48	0:0	8	;
water	267:16	0:0	8	s
op	267:17	0:0	8	->
water	267:19	0:0	8	mb_x
op	267:23	0:0	8	=
water	267:25	0:0	8	mb_x
water	267:29	0:0	8	;
water	268:16	0:0	8	s
op	268:17	0:0	8	->
water	268:19	0:0	8	mb_y
op	268:23	0:0	8	=
water	268:25	0:0	8	mb_y
water	268:29	0:0	8	;
call	269:16	269:30	8	decode_mb
arg	269:26	269:27	9	s
water	269:26	0:0	10	s
arg	269:29	269:30	9	0
water	269:29	0:0	10	0
water	269:31	0:0	8	;
water	270:12	0:0	8	}
water	271:8	0:0	6	}
water	272:4	0:0	4	}
else	272:5	273:19	2
stmts	273:8	273:19	3	
call	273:8	273:18	4	guess_mv
arg	273:17	273:18	5	s
water	273:17	0:0	6	s
water	273:19	0:0	4	;
if	276:4	277:21	2	(CONFIG_MPEG_XVMC_DECODER && s -> avctx -> xvmc_acceleration)
cond	276:7	276:45	3	CONFIG_MPEG_XVMC_DECODER && s -> avctx -> xvmc_acceleration
water	276:7	0:0	4	CONFIG_MPEG_XVMC_DECODER
op	276:32	0:0	4	&&
water	276:35	0:0	4	s
op	276:36	0:0	4	->
water	276:38	0:0	4	avctx
op	276:43	0:0	4	->
water	276:45	0:0	4	xvmc_acceleration
stmts	277:8	277:21	3	
goto	277:8	277:21	4	ec_clean
water	277:13	0:0	5	ec_clean
for	279:4	319:4	2	(mb_y = 0 ;mb_y < s -> mb_height;mb_y ++)
forinit	279:8	279:14	3	mb_y = 0 ;
water	279:8	0:0	4	mb_y
op	279:12	0:0	4	=
water	279:13	0:0	4	0
water	279:14	0:0	4	;
cond	279:16	279:24	3	mb_y < s -> mb_height
water	279:16	0:0	4	mb_y
op	279:20	0:0	4	<
water	279:21	0:0	4	s
op	279:22	0:0	4	->
water	279:24	0:0	4	mb_height
forexpr	279:35	279:39	3	mb_y ++
water	279:35	0:0	4	mb_y
op	279:39	0:0	4	++
stmts	279:42	319:4	3	
water	279:42	0:0	4	{
for	280:8	318:8	4	(mb_x = 0 ;mb_x < s -> mb_width;mb_x ++)
forinit	280:12	280:18	5	mb_x = 0 ;
water	280:12	0:0	6	mb_x
op	280:16	0:0	6	=
water	280:17	0:0	6	0
water	280:18	0:0	6	;
cond	280:20	280:28	5	mb_x < s -> mb_width
water	280:20	0:0	6	mb_x
op	280:24	0:0	6	<
water	280:25	0:0	6	s
op	280:26	0:0	6	->
water	280:28	0:0	6	mb_width
forexpr	280:38	280:42	5	mb_x ++
water	280:38	0:0	6	mb_x
op	280:42	0:0	6	++
stmts	280:45	318:8	5	
water	280:45	0:0	6	{
decl	281:12	281:34	6	int	dc
water	281:18	0:0	6	,
decl	281:12	281:34	6	int	dcu
water	281:23	0:0	6	,
decl	281:12	281:34	6	int	dcv
water	281:28	0:0	6	,
decl	281:12	281:34	6	int	y
water	281:31	0:0	6	,
decl	281:12	281:34	6	int	n
decl	282:12	282:27	6	int16_t	*dc_ptr
decl	283:12	283:47	6	uint8_t	*dest_y
water	283:27	0:0	6	,
decl	283:12	283:47	6	uint8_t	*dest_cb
water	283:37	0:0	6	,
decl	283:12	283:47	6	uint8_t	*dest_cr
decl	284:12	284:55	6	const int	mb_xy
op	284:27	0:0	6	=
water	284:29	0:0	6	mb_x
op	284:34	0:0	6	+
water	284:36	0:0	6	mb_y
op	284:41	0:0	6	*
water	284:43	0:0	6	s
op	284:44	0:0	6	->
water	284:46	0:0	6	mb_stride
decl	285:12	285:67	6	const int	mb_type
op	285:30	0:0	6	=
water	285:32	0:0	6	s
op	285:33	0:0	6	->
water	285:35	0:0	6	current_picture
op	285:50	0:0	6	.
water	285:51	0:0	6	f
op	285:52	0:0	6	.
water	285:53	0:0	6	mb_type
op	285:60	0:0	6	[
water	285:61	0:0	6	mb_xy
op	285:66	0:0	6	]
water	287:12	0:0	6	error
op	287:17	0:0	6	=
water	287:19	0:0	6	s
op	287:20	0:0	6	->
water	287:22	0:0	6	error_status_table
op	287:40	0:0	6	[
water	287:41	0:0	6	mb_xy
op	287:46	0:0	6	]
water	287:47	0:0	6	;
if	289:12	289:66	6	(IS_INTRA (mb_type ) && s -> partitioned_frame)
cond	289:15	289:39	7	IS_INTRA (mb_type ) && s -> partitioned_frame
call	289:15	289:31	8	IS_INTRA
arg	289:24	289:31	9	mb_type
water	289:24	0:0	10	mb_type
op	289:33	0:0	8	&&
water	289:36	0:0	8	s
op	289:37	0:0	8	->
water	289:39	0:0	8	partitioned_frame
stmts	289:58	289:66	7	
continue	289:58	289:66	8	
water	292:12	0:0	6	dest_y
op	292:20	0:0	6	=
water	292:22	0:0	6	s
op	292:23	0:0	6	->
water	292:25	0:0	6	current_picture
op	292:40	0:0	6	.
water	292:41	0:0	6	f
op	292:42	0:0	6	.
water	292:43	0:0	6	data
op	292:47	0:0	6	[
water	292:48	0:0	6	0
op	292:49	0:0	6	]
op	292:51	0:0	6	+
water	292:53	0:0	6	mb_x
op	292:58	0:0	6	*
water	292:60	0:0	6	16
op	292:63	0:0	6	+
water	292:65	0:0	6	mb_y
op	292:70	0:0	6	*
water	292:72	0:0	6	16
op	292:75	0:0	6	*
water	292:77	0:0	6	s
op	292:78	0:0	6	->
water	292:80	0:0	6	linesize
water	292:88	0:0	6	;
water	293:12	0:0	6	dest_cb
op	293:20	0:0	6	=
water	293:22	0:0	6	s
op	293:23	0:0	6	->
water	293:25	0:0	6	current_picture
op	293:40	0:0	6	.
water	293:41	0:0	6	f
op	293:42	0:0	6	.
water	293:43	0:0	6	data
op	293:47	0:0	6	[
water	293:48	0:0	6	1
op	293:49	0:0	6	]
op	293:51	0:0	6	+
water	293:53	0:0	6	mb_x
op	293:58	0:0	6	*
water	293:61	0:0	6	8
op	293:63	0:0	6	+
water	293:65	0:0	6	mb_y
op	293:70	0:0	6	*
water	293:73	0:0	6	8
op	293:75	0:0	6	*
water	293:77	0:0	6	s
op	293:78	0:0	6	->
water	293:80	0:0	6	uvlinesize
water	293:90	0:0	6	;
water	294:12	0:0	6	dest_cr
op	294:20	0:0	6	=
water	294:22	0:0	6	s
op	294:23	0:0	6	->
water	294:25	0:0	6	current_picture
op	294:40	0:0	6	.
water	294:41	0:0	6	f
op	294:42	0:0	6	.
water	294:43	0:0	6	data
op	294:47	0:0	6	[
water	294:48	0:0	6	2
op	294:49	0:0	6	]
op	294:51	0:0	6	+
water	294:53	0:0	6	mb_x
op	294:58	0:0	6	*
water	294:61	0:0	6	8
op	294:63	0:0	6	+
water	294:65	0:0	6	mb_y
op	294:70	0:0	6	*
water	294:73	0:0	6	8
op	294:75	0:0	6	*
water	294:77	0:0	6	s
op	294:78	0:0	6	->
water	294:80	0:0	6	uvlinesize
water	294:90	0:0	6	;
water	296:12	0:0	6	dc_ptr
op	296:18	0:0	6	=
op	296:20	0:0	6	&
water	296:21	0:0	6	s
op	296:22	0:0	6	->
water	296:24	0:0	6	dc_val
op	296:30	0:0	6	[
water	296:31	0:0	6	0
op	296:32	0:0	6	]
op	296:33	0:0	6	[
water	296:34	0:0	6	mb_x
op	296:38	0:0	6	*
water	296:39	0:0	6	2
op	296:41	0:0	6	+
water	296:43	0:0	6	mb_y
op	296:47	0:0	6	*
water	296:48	0:0	6	2
op	296:49	0:0	6	*
water	296:50	0:0	6	s
op	296:51	0:0	6	->
water	296:53	0:0	6	b8_stride
op	296:62	0:0	6	]
water	296:63	0:0	6	;
for	297:12	306:12	6	(n = 0 ;n < 4;n ++)
forinit	297:16	297:19	7	n = 0 ;
water	297:16	0:0	8	n
op	297:17	0:0	8	=
water	297:18	0:0	8	0
water	297:19	0:0	8	;
cond	297:21	297:23	7	n < 4
water	297:21	0:0	8	n
op	297:22	0:0	8	<
water	297:23	0:0	8	4
forexpr	297:26	297:27	7	n ++
water	297:26	0:0	8	n
op	297:27	0:0	8	++
stmts	297:30	306:12	7	
water	297:30	0:0	8	{
water	298:16	0:0	8	dc
op	298:18	0:0	8	=
water	298:19	0:0	8	0
water	298:20	0:0	8	;
for	299:16	304:16	8	(y = 0 ;y < 8;y ++)
forinit	299:20	299:23	9	y = 0 ;
water	299:20	0:0	10	y
op	299:21	0:0	10	=
water	299:22	0:0	10	0
water	299:23	0:0	10	;
cond	299:25	299:27	9	y < 8
water	299:25	0:0	10	y
op	299:26	0:0	10	<
water	299:27	0:0	10	8
forexpr	299:30	299:31	9	y ++
water	299:30	0:0	10	y
op	299:31	0:0	10	++
stmts	299:34	304:16	9	
water	299:34	0:0	10	{
decl	300:20	300:25	10	int	x
for	301:20	303:20	10	(x = 0 ;x < 8;x ++)
forinit	301:24	301:27	11	x = 0 ;
water	301:24	0:0	12	x
op	301:25	0:0	12	=
water	301:26	0:0	12	0
water	301:27	0:0	12	;
cond	301:29	301:31	11	x < 8
water	301:29	0:0	12	x
op	301:30	0:0	12	<
water	301:31	0:0	12	8
forexpr	301:34	301:35	11	x ++
water	301:34	0:0	12	x
op	301:35	0:0	12	++
stmts	301:38	303:20	11	
water	301:38	0:0	12	{
water	302:23	0:0	12	dc
op	302:25	0:0	12	+=
water	302:28	0:0	12	dest_y
op	302:34	0:0	12	[
water	302:35	0:0	12	x
op	302:37	0:0	12	+
water	302:39	0:0	12	(
water	302:40	0:0	12	n
op	302:41	0:0	12	&
water	302:42	0:0	12	1
water	302:43	0:0	12	)
op	302:44	0:0	12	*
water	302:45	0:0	12	8
op	302:47	0:0	12	+
water	302:49	0:0	12	(
water	302:50	0:0	12	y
op	302:52	0:0	12	+
water	302:54	0:0	12	(
water	302:55	0:0	12	n
op	302:56	0:0	12	>>
water	302:58	0:0	12	1
water	302:59	0:0	12	)
op	302:60	0:0	12	*
water	302:61	0:0	12	8
water	302:62	0:0	12	)
op	302:63	0:0	12	*
water	302:64	0:0	12	s
op	302:65	0:0	12	->
water	302:67	0:0	12	linesize
op	302:75	0:0	12	]
water	302:76	0:0	12	;
water	303:20	0:0	12	}
water	304:16	0:0	10	}
water	305:16	0:0	8	dc_ptr
op	305:22	0:0	8	[
water	305:23	0:0	8	(
water	305:24	0:0	8	n
op	305:25	0:0	8	&
water	305:26	0:0	8	1
water	305:27	0:0	8	)
op	305:29	0:0	8	+
water	305:31	0:0	8	(
water	305:32	0:0	8	n
op	305:33	0:0	8	>>
water	305:35	0:0	8	1
water	305:36	0:0	8	)
op	305:37	0:0	8	*
water	305:38	0:0	8	s
op	305:39	0:0	8	->
water	305:41	0:0	8	b8_stride
op	305:50	0:0	8	]
op	305:51	0:0	8	=
water	305:53	0:0	8	(
water	305:54	0:0	8	dc
op	305:56	0:0	8	+
water	305:57	0:0	8	4
water	305:58	0:0	8	)
op	305:59	0:0	8	>>
water	305:61	0:0	8	3
water	305:62	0:0	8	;
water	306:12	0:0	8	}
water	308:12	0:0	6	dcu
op	308:15	0:0	6	=
water	308:16	0:0	6	dcv
op	308:19	0:0	6	=
water	308:20	0:0	6	0
water	308:21	0:0	6	;
for	309:12	315:12	6	(y = 0 ;y < 8;y ++)
forinit	309:16	309:19	7	y = 0 ;
water	309:16	0:0	8	y
op	309:17	0:0	8	=
water	309:18	0:0	8	0
water	309:19	0:0	8	;
cond	309:21	309:23	7	y < 8
water	309:21	0:0	8	y
op	309:22	0:0	8	<
water	309:23	0:0	8	8
forexpr	309:26	309:27	7	y ++
water	309:26	0:0	8	y
op	309:27	0:0	8	++
stmts	309:30	315:12	7	
water	309:30	0:0	8	{
decl	310:16	310:21	8	int	x
for	311:16	314:16	8	(x = 0 ;x < 8;x ++)
forinit	311:20	311:23	9	x = 0 ;
water	311:20	0:0	10	x
op	311:21	0:0	10	=
water	311:22	0:0	10	0
water	311:23	0:0	10	;
cond	311:25	311:27	9	x < 8
water	311:25	0:0	10	x
op	311:26	0:0	10	<
water	311:27	0:0	10	8
forexpr	311:30	311:31	9	x ++
water	311:30	0:0	10	x
op	311:31	0:0	10	++
stmts	311:34	314:16	9	
water	311:34	0:0	10	{
water	312:20	0:0	10	dcu
op	312:23	0:0	10	+=
water	312:25	0:0	10	dest_cb
op	312:32	0:0	10	[
water	312:33	0:0	10	x
op	312:35	0:0	10	+
water	312:37	0:0	10	y
op	312:38	0:0	10	*
water	312:39	0:0	10	(
water	312:40	0:0	10	s
op	312:41	0:0	10	->
water	312:43	0:0	10	uvlinesize
water	312:53	0:0	10	)
op	312:54	0:0	10	]
water	312:55	0:0	10	;
water	313:20	0:0	10	dcv
op	313:23	0:0	10	+=
water	313:25	0:0	10	dest_cr
op	313:32	0:0	10	[
water	313:33	0:0	10	x
op	313:35	0:0	10	+
water	313:37	0:0	10	y
op	313:38	0:0	10	*
water	313:39	0:0	10	(
water	313:40	0:0	10	s
op	313:41	0:0	10	->
water	313:43	0:0	10	uvlinesize
water	313:53	0:0	10	)
op	313:54	0:0	10	]
water	313:55	0:0	10	;
water	314:16	0:0	10	}
water	315:12	0:0	8	}
water	316:12	0:0	6	s
op	316:13	0:0	6	->
water	316:15	0:0	6	dc_val
op	316:21	0:0	6	[
water	316:22	0:0	6	1
op	316:23	0:0	6	]
op	316:24	0:0	6	[
water	316:25	0:0	6	mb_x
op	316:30	0:0	6	+
water	316:32	0:0	6	mb_y
op	316:36	0:0	6	*
water	316:37	0:0	6	s
op	316:38	0:0	6	->
water	316:40	0:0	6	mb_stride
op	316:49	0:0	6	]
op	316:50	0:0	6	=
water	316:52	0:0	6	(
water	316:53	0:0	6	dcu
op	316:56	0:0	6	+
water	316:57	0:0	6	4
water	316:58	0:0	6	)
op	316:59	0:0	6	>>
water	316:61	0:0	6	3
water	316:62	0:0	6	;
water	317:12	0:0	6	s
op	317:13	0:0	6	->
water	317:15	0:0	6	dc_val
op	317:21	0:0	6	[
water	317:22	0:0	6	2
op	317:23	0:0	6	]
op	317:24	0:0	6	[
water	317:25	0:0	6	mb_x
op	317:30	0:0	6	+
water	317:32	0:0	6	mb_y
op	317:36	0:0	6	*
water	317:37	0:0	6	s
op	317:38	0:0	6	->
water	317:40	0:0	6	mb_stride
op	317:49	0:0	6	]
op	317:50	0:0	6	=
water	317:52	0:0	6	(
water	317:53	0:0	6	dcv
op	317:56	0:0	6	+
water	317:57	0:0	6	4
water	317:58	0:0	6	)
op	317:59	0:0	6	>>
water	317:61	0:0	6	3
water	317:62	0:0	6	;
water	318:8	0:0	6	}
water	319:4	0:0	4	}
call	322:4	322:76	2	guess_dc
arg	322:13	322:14	3	s
water	322:13	0:0	4	s
arg	322:16	322:28	3	s->dc_val[0]
water	322:16	0:0	4	s
op	322:17	0:0	4	->
water	322:19	0:0	4	dc_val
op	322:25	0:0	4	[
water	322:26	0:0	4	0
op	322:27	0:0	4	]
arg	322:30	322:43	3	s->mb_width*2
water	322:30	0:0	4	s
op	322:31	0:0	4	->
water	322:33	0:0	4	mb_width
op	322:41	0:0	4	*
water	322:42	0:0	4	2
arg	322:45	322:59	3	s->mb_height*2
water	322:45	0:0	4	s
op	322:46	0:0	4	->
water	322:48	0:0	4	mb_height
op	322:57	0:0	4	*
water	322:58	0:0	4	2
arg	322:61	322:73	3	s->b8_stride
water	322:61	0:0	4	s
op	322:62	0:0	4	->
water	322:64	0:0	4	b8_stride
arg	322:75	322:76	3	1
water	322:75	0:0	4	1
water	322:77	0:0	2	;
call	323:4	323:76	2	guess_dc
arg	323:13	323:14	3	s
water	323:13	0:0	4	s
arg	323:16	323:28	3	s->dc_val[1]
water	323:16	0:0	4	s
op	323:17	0:0	4	->
water	323:19	0:0	4	dc_val
op	323:25	0:0	4	[
water	323:26	0:0	4	1
op	323:27	0:0	4	]
arg	323:30	323:43	3	s->mb_width
water	323:30	0:0	4	s
op	323:31	0:0	4	->
water	323:33	0:0	4	mb_width
arg	323:45	323:59	3	s->mb_height
water	323:45	0:0	4	s
op	323:46	0:0	4	->
water	323:48	0:0	4	mb_height
arg	323:61	323:73	3	s->mb_stride
water	323:61	0:0	4	s
op	323:62	0:0	4	->
water	323:64	0:0	4	mb_stride
arg	323:75	323:76	3	0
water	323:75	0:0	4	0
water	323:77	0:0	2	;
call	324:4	324:76	2	guess_dc
arg	324:13	324:14	3	s
water	324:13	0:0	4	s
arg	324:16	324:28	3	s->dc_val[2]
water	324:16	0:0	4	s
op	324:17	0:0	4	->
water	324:19	0:0	4	dc_val
op	324:25	0:0	4	[
water	324:26	0:0	4	2
op	324:27	0:0	4	]
arg	324:30	324:43	3	s->mb_width
water	324:30	0:0	4	s
op	324:31	0:0	4	->
water	324:33	0:0	4	mb_width
arg	324:45	324:59	3	s->mb_height
water	324:45	0:0	4	s
op	324:46	0:0	4	->
water	324:48	0:0	4	mb_height
arg	324:61	324:73	3	s->mb_stride
water	324:61	0:0	4	s
op	324:62	0:0	4	->
water	324:64	0:0	4	mb_stride
arg	324:75	324:76	3	0
water	324:75	0:0	4	0
water	324:77	0:0	2	;
call	327:4	327:71	2	filter181
arg	327:14	327:26	3	s->dc_val[0]
water	327:14	0:0	4	s
op	327:15	0:0	4	->
water	327:17	0:0	4	dc_val
op	327:23	0:0	4	[
water	327:24	0:0	4	0
op	327:25	0:0	4	]
arg	327:28	327:41	3	s->mb_width*2
water	327:28	0:0	4	s
op	327:29	0:0	4	->
water	327:31	0:0	4	mb_width
op	327:39	0:0	4	*
water	327:40	0:0	4	2
arg	327:43	327:57	3	s->mb_height*2
water	327:43	0:0	4	s
op	327:44	0:0	4	->
water	327:46	0:0	4	mb_height
op	327:55	0:0	4	*
water	327:56	0:0	4	2
arg	327:59	327:71	3	s->b8_stride
water	327:59	0:0	4	s
op	327:60	0:0	4	->
water	327:62	0:0	4	b8_stride
water	327:72	0:0	2	;
for	331:4	348:4	2	(mb_y = 0 ;mb_y < s -> mb_height;mb_y ++)
forinit	331:8	331:14	3	mb_y = 0 ;
water	331:8	0:0	4	mb_y
op	331:12	0:0	4	=
water	331:13	0:0	4	0
water	331:14	0:0	4	;
cond	331:16	331:24	3	mb_y < s -> mb_height
water	331:16	0:0	4	mb_y
op	331:20	0:0	4	<
water	331:21	0:0	4	s
op	331:22	0:0	4	->
water	331:24	0:0	4	mb_height
forexpr	331:35	331:39	3	mb_y ++
water	331:35	0:0	4	mb_y
op	331:39	0:0	4	++
stmts	331:42	348:4	3	
water	331:42	0:0	4	{
for	332:8	347:8	4	(mb_x = 0 ;mb_x < s -> mb_width;mb_x ++)
forinit	332:12	332:18	5	mb_x = 0 ;
water	332:12	0:0	6	mb_x
op	332:16	0:0	6	=
water	332:17	0:0	6	0
water	332:18	0:0	6	;
cond	332:20	332:28	5	mb_x < s -> mb_width
water	332:20	0:0	6	mb_x
op	332:24	0:0	6	<
water	332:25	0:0	6	s
op	332:26	0:0	6	->
water	332:28	0:0	6	mb_width
forexpr	332:38	332:42	5	mb_x ++
water	332:38	0:0	6	mb_x
op	332:42	0:0	6	++
stmts	332:45	347:8	5	
water	332:45	0:0	6	{
decl	333:12	333:47	6	uint8_t	*dest_y
water	333:27	0:0	6	,
decl	333:12	333:47	6	uint8_t	*dest_cb
water	333:37	0:0	6	,
decl	333:12	333:47	6	uint8_t	*dest_cr
decl	334:12	334:55	6	const int	mb_xy
op	334:27	0:0	6	=
water	334:29	0:0	6	mb_x
op	334:34	0:0	6	+
water	334:36	0:0	6	mb_y
op	334:41	0:0	6	*
water	334:43	0:0	6	s
op	334:44	0:0	6	->
water	334:46	0:0	6	mb_stride
decl	335:12	335:67	6	const int	mb_type
op	335:30	0:0	6	=
water	335:32	0:0	6	s
op	335:33	0:0	6	->
water	335:35	0:0	6	current_picture
op	335:50	0:0	6	.
water	335:51	0:0	6	f
op	335:52	0:0	6	.
water	335:53	0:0	6	mb_type
op	335:60	0:0	6	[
water	335:61	0:0	6	mb_xy
op	335:66	0:0	6	]
water	337:12	0:0	6	error
op	337:17	0:0	6	=
water	337:19	0:0	6	s
op	337:20	0:0	6	->
water	337:22	0:0	6	error_status_table
op	337:40	0:0	6	[
water	337:41	0:0	6	mb_xy
op	337:46	0:0	6	]
water	337:47	0:0	6	;
if	339:12	339:42	6	(IS_INTER (mb_type ))
cond	339:15	339:31	7	IS_INTER (mb_type )
call	339:15	339:31	8	IS_INTER
arg	339:24	339:31	9	mb_type
water	339:24	0:0	10	mb_type
stmts	339:34	339:42	7	
continue	339:34	339:42	8	
if	340:12	340:42	6	(! ( error & AC_ERROR ))
cond	340:15	340:31	7	! ( error & AC_ERROR )
op	340:15	0:0	8	!
water	340:16	0:0	8	(
water	340:17	0:0	8	error
op	340:22	0:0	8	&
water	340:23	0:0	8	AC_ERROR
water	340:31	0:0	8	)
stmts	340:34	340:42	7	
continue	340:34	340:42	8	
water	342:12	0:0	6	dest_y
op	342:20	0:0	6	=
water	342:22	0:0	6	s
op	342:23	0:0	6	->
water	342:25	0:0	6	current_picture
op	342:40	0:0	6	.
water	342:41	0:0	6	f
op	342:42	0:0	6	.
water	342:43	0:0	6	data
op	342:47	0:0	6	[
water	342:48	0:0	6	0
op	342:49	0:0	6	]
op	342:51	0:0	6	+
water	342:53	0:0	6	mb_x
op	342:58	0:0	6	*
water	342:60	0:0	6	16
op	342:63	0:0	6	+
water	342:65	0:0	6	mb_y
op	342:70	0:0	6	*
water	342:72	0:0	6	16
op	342:75	0:0	6	*
water	342:77	0:0	6	s
op	342:78	0:0	6	->
water	342:80	0:0	6	linesize
water	342:88	0:0	6	;
water	343:12	0:0	6	dest_cb
op	343:20	0:0	6	=
water	343:22	0:0	6	s
op	343:23	0:0	6	->
water	343:25	0:0	6	current_picture
op	343:40	0:0	6	.
water	343:41	0:0	6	f
op	343:42	0:0	6	.
water	343:43	0:0	6	data
op	343:47	0:0	6	[
water	343:48	0:0	6	1
op	343:49	0:0	6	]
op	343:51	0:0	6	+
water	343:53	0:0	6	mb_x
op	343:58	0:0	6	*
water	343:61	0:0	6	8
op	343:63	0:0	6	+
water	343:65	0:0	6	mb_y
op	343:70	0:0	6	*
water	343:73	0:0	6	8
op	343:75	0:0	6	*
water	343:77	0:0	6	s
op	343:78	0:0	6	->
water	343:80	0:0	6	uvlinesize
water	343:90	0:0	6	;
water	344:12	0:0	6	dest_cr
op	344:20	0:0	6	=
water	344:22	0:0	6	s
op	344:23	0:0	6	->
water	344:25	0:0	6	current_picture
op	344:40	0:0	6	.
water	344:41	0:0	6	f
op	344:42	0:0	6	.
water	344:43	0:0	6	data
op	344:47	0:0	6	[
water	344:48	0:0	6	2
op	344:49	0:0	6	]
op	344:51	0:0	6	+
water	344:53	0:0	6	mb_x
op	344:58	0:0	6	*
water	344:61	0:0	6	8
op	344:63	0:0	6	+
water	344:65	0:0	6	mb_y
op	344:70	0:0	6	*
water	344:73	0:0	6	8
op	344:75	0:0	6	*
water	344:77	0:0	6	s
op	344:78	0:0	6	->
water	344:80	0:0	6	uvlinesize
water	344:90	0:0	6	;
call	346:12	346:58	6	put_dc
arg	346:19	346:20	7	s
water	346:19	0:0	8	s
arg	346:22	346:28	7	dest_y
water	346:22	0:0	8	dest_y
arg	346:30	346:37	7	dest_cb
water	346:30	0:0	8	dest_cb
arg	346:39	346:46	7	dest_cr
water	346:39	0:0	8	dest_cr
arg	346:48	346:52	7	mb_x
water	346:48	0:0	8	mb_x
arg	346:54	346:58	7	mb_y
water	346:54	0:0	8	mb_y
water	346:59	0:0	6	;
water	347:8	0:0	6	}
water	348:4	0:0	4	}
if	351:4	361:4	2	(s -> avctx -> error_concealment & FF_EC_DEBLOCK)
cond	351:7	351:35	3	s -> avctx -> error_concealment & FF_EC_DEBLOCK
water	351:7	0:0	4	s
op	351:8	0:0	4	->
water	351:10	0:0	4	avctx
op	351:15	0:0	4	->
water	351:17	0:0	4	error_concealment
op	351:34	0:0	4	&
water	351:35	0:0	4	FF_EC_DEBLOCK
stmts	351:49	361:4	3	
water	351:49	0:0	4	{
call	353:8	353:103	4	h_block_filter
arg	353:23	353:24	5	s
water	353:23	0:0	6	s
arg	353:26	353:54	5	s->current_picture.f.data[0]
water	353:26	0:0	6	s
op	353:27	0:0	6	->
water	353:29	0:0	6	current_picture
op	353:44	0:0	6	.
water	353:45	0:0	6	f
op	353:46	0:0	6	.
water	353:47	0:0	6	data
op	353:51	0:0	6	[
water	353:52	0:0	6	0
op	353:53	0:0	6	]
arg	353:56	353:69	5	s->mb_width*2
water	353:56	0:0	6	s
op	353:57	0:0	6	->
water	353:59	0:0	6	mb_width
op	353:67	0:0	6	*
water	353:68	0:0	6	2
arg	353:71	353:85	5	s->mb_height*2
water	353:71	0:0	6	s
op	353:72	0:0	6	->
water	353:74	0:0	6	mb_height
op	353:83	0:0	6	*
water	353:84	0:0	6	2
arg	353:87	353:100	5	s->linesize
water	353:87	0:0	6	s
op	353:88	0:0	6	->
water	353:90	0:0	6	linesize
arg	353:102	353:103	5	1
water	353:102	0:0	6	1
water	353:104	0:0	4	;
call	354:8	354:103	4	h_block_filter
arg	354:23	354:24	5	s
water	354:23	0:0	6	s
arg	354:26	354:54	5	s->current_picture.f.data[1]
water	354:26	0:0	6	s
op	354:27	0:0	6	->
water	354:29	0:0	6	current_picture
op	354:44	0:0	6	.
water	354:45	0:0	6	f
op	354:46	0:0	6	.
water	354:47	0:0	6	data
op	354:51	0:0	6	[
water	354:52	0:0	6	1
op	354:53	0:0	6	]
arg	354:56	354:69	5	s->mb_width
water	354:56	0:0	6	s
op	354:57	0:0	6	->
water	354:59	0:0	6	mb_width
arg	354:71	354:85	5	s->mb_height
water	354:71	0:0	6	s
op	354:72	0:0	6	->
water	354:74	0:0	6	mb_height
arg	354:87	354:100	5	s->uvlinesize
water	354:87	0:0	6	s
op	354:88	0:0	6	->
water	354:90	0:0	6	uvlinesize
arg	354:102	354:103	5	0
water	354:102	0:0	6	0
water	354:104	0:0	4	;
call	355:8	355:103	4	h_block_filter
arg	355:23	355:24	5	s
water	355:23	0:0	6	s
arg	355:26	355:54	5	s->current_picture.f.data[2]
water	355:26	0:0	6	s
op	355:27	0:0	6	->
water	355:29	0:0	6	current_picture
op	355:44	0:0	6	.
water	355:45	0:0	6	f
op	355:46	0:0	6	.
water	355:47	0:0	6	data
op	355:51	0:0	6	[
water	355:52	0:0	6	2
op	355:53	0:0	6	]
arg	355:56	355:69	5	s->mb_width
water	355:56	0:0	6	s
op	355:57	0:0	6	->
water	355:59	0:0	6	mb_width
arg	355:71	355:85	5	s->mb_height
water	355:71	0:0	6	s
op	355:72	0:0	6	->
water	355:74	0:0	6	mb_height
arg	355:87	355:100	5	s->uvlinesize
water	355:87	0:0	6	s
op	355:88	0:0	6	->
water	355:90	0:0	6	uvlinesize
arg	355:102	355:103	5	0
water	355:102	0:0	6	0
water	355:104	0:0	4	;
call	358:8	358:103	4	v_block_filter
arg	358:23	358:24	5	s
water	358:23	0:0	6	s
arg	358:26	358:54	5	s->current_picture.f.data[0]
water	358:26	0:0	6	s
op	358:27	0:0	6	->
water	358:29	0:0	6	current_picture
op	358:44	0:0	6	.
water	358:45	0:0	6	f
op	358:46	0:0	6	.
water	358:47	0:0	6	data
op	358:51	0:0	6	[
water	358:52	0:0	6	0
op	358:53	0:0	6	]
arg	358:56	358:69	5	s->mb_width*2
water	358:56	0:0	6	s
op	358:57	0:0	6	->
water	358:59	0:0	6	mb_width
op	358:67	0:0	6	*
water	358:68	0:0	6	2
arg	358:71	358:85	5	s->mb_height*2
water	358:71	0:0	6	s
op	358:72	0:0	6	->
water	358:74	0:0	6	mb_height
op	358:83	0:0	6	*
water	358:84	0:0	6	2
arg	358:87	358:100	5	s->linesize
water	358:87	0:0	6	s
op	358:88	0:0	6	->
water	358:90	0:0	6	linesize
arg	358:102	358:103	5	1
water	358:102	0:0	6	1
water	358:104	0:0	4	;
call	359:8	359:103	4	v_block_filter
arg	359:23	359:24	5	s
water	359:23	0:0	6	s
arg	359:26	359:54	5	s->current_picture.f.data[1]
water	359:26	0:0	6	s
op	359:27	0:0	6	->
water	359:29	0:0	6	current_picture
op	359:44	0:0	6	.
water	359:45	0:0	6	f
op	359:46	0:0	6	.
water	359:47	0:0	6	data
op	359:51	0:0	6	[
water	359:52	0:0	6	1
op	359:53	0:0	6	]
arg	359:56	359:69	5	s->mb_width
water	359:56	0:0	6	s
op	359:57	0:0	6	->
water	359:59	0:0	6	mb_width
arg	359:71	359:85	5	s->mb_height
water	359:71	0:0	6	s
op	359:72	0:0	6	->
water	359:74	0:0	6	mb_height
arg	359:87	359:100	5	s->uvlinesize
water	359:87	0:0	6	s
op	359:88	0:0	6	->
water	359:90	0:0	6	uvlinesize
arg	359:102	359:103	5	0
water	359:102	0:0	6	0
water	359:104	0:0	4	;
call	360:8	360:103	4	v_block_filter
arg	360:23	360:24	5	s
water	360:23	0:0	6	s
arg	360:26	360:54	5	s->current_picture.f.data[2]
water	360:26	0:0	6	s
op	360:27	0:0	6	->
water	360:29	0:0	6	current_picture
op	360:44	0:0	6	.
water	360:45	0:0	6	f
op	360:46	0:0	6	.
water	360:47	0:0	6	data
op	360:51	0:0	6	[
water	360:52	0:0	6	2
op	360:53	0:0	6	]
arg	360:56	360:69	5	s->mb_width
water	360:56	0:0	6	s
op	360:57	0:0	6	->
water	360:59	0:0	6	mb_width
arg	360:71	360:85	5	s->mb_height
water	360:71	0:0	6	s
op	360:72	0:0	6	->
water	360:74	0:0	6	mb_height
arg	360:87	360:100	5	s->uvlinesize
water	360:87	0:0	6	s
op	360:88	0:0	6	->
water	360:90	0:0	6	uvlinesize
arg	360:102	360:103	5	0
water	360:102	0:0	6	0
water	360:104	0:0	4	;
water	361:4	0:0	4	}
label	363:0	363:8	2	ec_clean :
for	365:4	373:4	2	(i = 0 ;i < s -> mb_num;i ++)
forinit	365:8	365:11	3	i = 0 ;
water	365:8	0:0	4	i
op	365:9	0:0	4	=
water	365:10	0:0	4	0
water	365:11	0:0	4	;
cond	365:13	365:18	3	i < s -> mb_num
water	365:13	0:0	4	i
op	365:14	0:0	4	<
water	365:15	0:0	4	s
op	365:16	0:0	4	->
water	365:18	0:0	4	mb_num
forexpr	365:26	365:27	3	i ++
water	365:26	0:0	4	i
op	365:27	0:0	4	++
stmts	365:30	373:4	3	
water	365:30	0:0	4	{
decl	366:8	366:42	4	const int	mb_xy
op	366:23	0:0	4	=
water	366:25	0:0	4	s
op	366:26	0:0	4	->
water	366:28	0:0	4	mb_index2xy
op	366:39	0:0	4	[
water	366:40	0:0	4	i
op	366:41	0:0	4	]
decl	367:8	367:47	4	int	error
op	367:17	0:0	4	=
water	367:19	0:0	4	s
op	367:20	0:0	4	->
water	367:22	0:0	4	error_status_table
op	367:40	0:0	4	[
water	367:41	0:0	4	mb_xy
op	367:46	0:0	4	]
if	369:8	371:8	4	(s -> pict_type != AV_PICTURE_TYPE_B && ( error & ( DC_ERROR | MV_ERROR | AC_ERROR ) ))
cond	369:11	369:81	5	s -> pict_type != AV_PICTURE_TYPE_B && ( error & ( DC_ERROR | MV_ERROR | AC_ERROR ) )
water	369:11	0:0	6	s
op	369:12	0:0	6	->
water	369:14	0:0	6	pict_type
op	369:23	0:0	6	!=
water	369:25	0:0	6	AV_PICTURE_TYPE_B
op	369:43	0:0	6	&&
water	369:46	0:0	6	(
water	369:47	0:0	6	error
op	369:52	0:0	6	&
water	369:53	0:0	6	(
water	369:54	0:0	6	DC_ERROR
op	369:62	0:0	6	|
water	369:63	0:0	6	MV_ERROR
op	369:71	0:0	6	|
water	369:72	0:0	6	AC_ERROR
water	369:80	0:0	6	)
water	369:81	0:0	6	)
stmts	369:83	371:8	5	
water	369:83	0:0	6	{
water	370:12	0:0	6	s
op	370:13	0:0	6	->
water	370:15	0:0	6	mbskip_table
op	370:27	0:0	6	[
water	370:28	0:0	6	mb_xy
op	370:33	0:0	6	]
op	370:34	0:0	6	=
water	370:35	0:0	6	0
water	370:36	0:0	6	;
water	371:8	0:0	6	}
water	372:8	0:0	4	s
op	372:9	0:0	4	->
water	372:11	0:0	4	mbintra_table
op	372:24	0:0	4	[
water	372:25	0:0	4	mb_xy
op	372:30	0:0	4	]
op	372:31	0:0	4	=
water	372:32	0:0	4	1
water	372:33	0:0	4	;
water	373:4	0:0	4	}
