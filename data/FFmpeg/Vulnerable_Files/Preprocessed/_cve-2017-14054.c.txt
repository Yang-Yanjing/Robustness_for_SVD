func	2:0	135:0	0	static int	ivr_read_header
params	2:26	0:0	1	
param	2:27	2:45	2	AVFormatContext *	s
stmnts	4:4	134:12	1	
water	4:4	0:0	2	unsigned
water	4:13	0:0	2	tag
water	4:16	0:0	2	,
water	4:18	0:0	2	type
water	4:22	0:0	2	,
water	4:24	0:0	2	len
water	4:27	0:0	2	,
water	4:29	0:0	2	tlen
water	4:33	0:0	2	,
water	4:35	0:0	2	value
water	4:40	0:0	2	;
decl	5:4	5:43	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:43	2	int	j
water	5:12	0:0	2	,
decl	5:4	5:43	2	int	n
water	5:15	0:0	2	,
decl	5:4	5:43	2	int	count
water	5:22	0:0	2	,
decl	5:4	5:43	2	int	nb_streams
op	5:35	0:0	2	=
water	5:37	0:0	2	0
water	5:38	0:0	2	,
decl	5:4	5:43	2	int	ret
decl	6:4	6:30	2	uint8_t	key[256]
water	6:20	0:0	2	,
decl	6:4	6:30	2	uint8_t	val[256]
decl	7:4	7:27	2	AVIOContext	*pb
op	7:20	0:0	2	=
water	7:22	0:0	2	s
op	7:23	0:0	2	->
water	7:25	0:0	2	pb
decl	8:4	8:16	2	AVStream	*st
decl	9:4	9:29	2	int64_t	pos
water	9:15	0:0	2	,
decl	9:4	9:29	2	int64_t	offset
water	9:23	0:0	2	,
decl	9:4	9:29	2	int64_t	temp
water	11:4	0:0	2	pos
op	11:8	0:0	2	=
call	11:10	11:22	2	avio_tell
arg	11:20	11:22	3	pb
water	11:20	0:0	4	pb
water	11:23	0:0	2	;
water	12:4	0:0	2	tag
op	12:8	0:0	2	=
call	12:10	12:22	2	avio_rl32
arg	12:20	12:22	3	pb
water	12:20	0:0	4	pb
water	12:23	0:0	2	;
if	13:4	36:4	2	(tag ==MKTAG ('.' ,'R' ,'1' ,'M' ))
cond	13:8	13:36	3	tag ==MKTAG ('.' ,'R' ,'1' ,'M' )
water	13:8	0:0	4	tag
op	13:12	0:0	4	==
call	13:15	13:36	4	MKTAG
arg	13:21	13:24	5	'.'
water	13:21	0:0	6	'.'
arg	13:25	13:28	5	'R'
water	13:25	0:0	6	'R'
arg	13:29	13:32	5	'1'
water	13:29	0:0	6	'1'
arg	13:33	13:36	5	'M'
water	13:33	0:0	6	'M'
stmts	13:39	36:4	3	
water	13:39	0:0	4	{
if	14:8	15:38	4	(avio_rb16 (pb ) != 1)
cond	14:12	14:29	5	avio_rb16 (pb ) != 1
call	14:12	14:24	6	avio_rb16
arg	14:22	14:24	7	pb
water	14:22	0:0	8	pb
op	14:26	0:0	6	!=
water	14:29	0:0	6	1
stmts	15:12	15:38	5	
return	15:12	15:38	6	AVERROR_INVALIDDATA
water	15:19	0:0	7	AVERROR_INVALIDDATA
if	16:8	17:38	4	(avio_r8 (pb ) != 1)
cond	16:12	16:27	5	avio_r8 (pb ) != 1
call	16:12	16:22	6	avio_r8
arg	16:20	16:22	7	pb
water	16:20	0:0	8	pb
op	16:24	0:0	6	!=
water	16:27	0:0	6	1
stmts	17:12	17:38	5	
return	17:12	17:38	6	AVERROR_INVALIDDATA
water	17:19	0:0	7	AVERROR_INVALIDDATA
water	18:8	0:0	4	len
op	18:12	0:0	4	=
call	18:14	18:26	4	avio_rb32
arg	18:24	18:26	5	pb
water	18:24	0:0	6	pb
water	18:27	0:0	4	;
call	19:8	19:25	4	avio_skip
arg	19:18	19:20	5	pb
water	19:18	0:0	6	pb
arg	19:22	19:25	5	len
water	19:22	0:0	6	len
water	19:26	0:0	4	;
call	20:8	20:23	4	avio_skip
arg	20:18	20:20	5	pb
water	20:18	0:0	6	pb
arg	20:22	20:23	5	5
water	20:22	0:0	6	5
water	20:24	0:0	4	;
water	21:8	0:0	4	temp
op	21:13	0:0	4	=
call	21:15	21:27	4	avio_rb64
arg	21:25	21:27	5	pb
water	21:25	0:0	6	pb
water	21:28	0:0	4	;
while	22:8	25:8	4	(!avio_feof (pb ) && temp)
cond	22:15	22:33	5	!avio_feof (pb ) && temp
op	22:15	0:0	6	!
call	22:16	22:28	6	avio_feof
arg	22:26	22:28	7	pb
water	22:26	0:0	8	pb
op	22:30	0:0	6	&&
water	22:33	0:0	6	temp
stmts	22:39	25:8	5	
water	22:39	0:0	6	{
water	23:12	0:0	6	offset
op	23:19	0:0	6	=
water	23:21	0:0	6	temp
water	23:25	0:0	6	;
water	24:12	0:0	6	temp
op	24:17	0:0	6	=
call	24:19	24:31	6	avio_rb64
arg	24:29	24:31	7	pb
water	24:29	0:0	8	pb
water	24:32	0:0	6	;
water	25:8	0:0	6	}
call	26:8	26:44	4	avio_skip
arg	26:18	26:20	5	pb
water	26:18	0:0	6	pb
arg	26:22	26:44	5	offset-avio_tell(pb)
water	26:22	0:0	6	offset
op	26:29	0:0	6	-
call	26:31	26:43	6	avio_tell
arg	26:41	26:43	7	pb
water	26:41	0:0	8	pb
water	26:45	0:0	4	;
if	27:8	28:38	4	(avio_r8 (pb ) != 1)
cond	27:12	27:27	5	avio_r8 (pb ) != 1
call	27:12	27:22	6	avio_r8
arg	27:20	27:22	7	pb
water	27:20	0:0	8	pb
op	27:24	0:0	6	!=
water	27:27	0:0	6	1
stmts	28:12	28:38	5	
return	28:12	28:38	6	AVERROR_INVALIDDATA
water	28:19	0:0	7	AVERROR_INVALIDDATA
water	29:8	0:0	4	len
op	29:12	0:0	4	=
call	29:14	29:26	4	avio_rb32
arg	29:24	29:26	5	pb
water	29:24	0:0	6	pb
water	29:27	0:0	4	;
call	30:8	30:25	4	avio_skip
arg	30:18	30:20	5	pb
water	30:18	0:0	6	pb
arg	30:22	30:25	5	len
water	30:22	0:0	6	len
water	30:26	0:0	4	;
if	31:8	32:38	4	(avio_r8 (pb ) != 2)
cond	31:12	31:27	5	avio_r8 (pb ) != 2
call	31:12	31:22	6	avio_r8
arg	31:20	31:22	7	pb
water	31:20	0:0	8	pb
op	31:24	0:0	6	!=
water	31:27	0:0	6	2
stmts	32:12	32:38	5	
return	32:12	32:38	6	AVERROR_INVALIDDATA
water	32:19	0:0	7	AVERROR_INVALIDDATA
call	33:8	33:24	4	avio_skip
arg	33:18	33:20	5	pb
water	33:18	0:0	6	pb
arg	33:22	33:24	5	16
water	33:22	0:0	6	16
water	33:25	0:0	4	;
water	34:8	0:0	4	pos
op	34:12	0:0	4	=
call	34:14	34:26	4	avio_tell
arg	34:24	34:26	5	pb
water	34:24	0:0	6	pb
water	34:27	0:0	4	;
water	35:8	0:0	4	tag
op	35:12	0:0	4	=
call	35:14	35:26	4	avio_rl32
arg	35:24	35:26	5	pb
water	35:24	0:0	6	pb
water	35:27	0:0	4	;
water	36:4	0:0	4	}
if	38:4	39:34	2	(tag !=MKTAG ('.' ,'R' ,'E' ,'C' ))
cond	38:8	38:36	3	tag !=MKTAG ('.' ,'R' ,'E' ,'C' )
water	38:8	0:0	4	tag
op	38:12	0:0	4	!=
call	38:15	38:36	4	MKTAG
arg	38:21	38:24	5	'.'
water	38:21	0:0	6	'.'
arg	38:25	38:28	5	'R'
water	38:25	0:0	6	'R'
arg	38:29	38:32	5	'E'
water	38:29	0:0	6	'E'
arg	38:33	38:36	5	'C'
water	38:33	0:0	6	'C'
stmts	39:8	39:34	3	
return	39:8	39:34	4	AVERROR_INVALIDDATA
water	39:15	0:0	5	AVERROR_INVALIDDATA
if	41:4	42:34	2	(avio_r8 (pb ) != 0)
cond	41:8	41:23	3	avio_r8 (pb ) != 0
call	41:8	41:18	4	avio_r8
arg	41:16	41:18	5	pb
water	41:16	0:0	6	pb
op	41:20	0:0	4	!=
water	41:23	0:0	4	0
stmts	42:8	42:34	3	
return	42:8	42:34	4	AVERROR_INVALIDDATA
water	42:15	0:0	5	AVERROR_INVALIDDATA
water	43:4	0:0	2	count
op	43:10	0:0	2	=
call	43:12	43:24	2	avio_rb32
arg	43:22	43:24	3	pb
water	43:22	0:0	4	pb
water	43:25	0:0	2	;
for	44:4	69:4	2	(i = 0 ;i < count;i ++)
forinit	44:9	44:14	3	i = 0 ;
water	44:9	0:0	4	i
op	44:11	0:0	4	=
water	44:13	0:0	4	0
water	44:14	0:0	4	;
cond	44:16	44:20	3	i < count
water	44:16	0:0	4	i
op	44:18	0:0	4	<
water	44:20	0:0	4	count
forexpr	44:27	44:28	3	i ++
water	44:27	0:0	4	i
op	44:28	0:0	4	++
stmts	44:32	69:4	3	
water	44:32	0:0	4	{
if	45:8	46:38	4	(avio_feof (pb ))
cond	45:12	45:24	5	avio_feof (pb )
call	45:12	45:24	6	avio_feof
arg	45:22	45:24	7	pb
water	45:22	0:0	8	pb
stmts	46:12	46:38	5	
return	46:12	46:38	6	AVERROR_INVALIDDATA
water	46:19	0:0	7	AVERROR_INVALIDDATA
water	48:8	0:0	4	type
op	48:13	0:0	4	=
call	48:15	48:25	4	avio_r8
arg	48:23	48:25	5	pb
water	48:23	0:0	6	pb
water	48:26	0:0	4	;
water	49:8	0:0	4	tlen
op	49:13	0:0	4	=
call	49:15	49:27	4	avio_rb32
arg	49:25	49:27	5	pb
water	49:25	0:0	6	pb
water	49:28	0:0	4	;
call	50:8	50:47	4	avio_get_str
arg	50:21	50:23	5	pb
water	50:21	0:0	6	pb
arg	50:25	50:29	5	tlen
water	50:25	0:0	6	tlen
arg	50:31	50:34	5	key
water	50:31	0:0	6	key
arg	50:36	50:47	5	sizeof(key)
op	50:36	0:0	6	sizeof
water	50:42	0:0	6	(
water	50:43	0:0	6	key
water	50:46	0:0	6	)
water	50:48	0:0	4	;
water	51:8	0:0	4	len
op	51:12	0:0	4	=
call	51:14	51:26	4	avio_rb32
arg	51:24	51:26	5	pb
water	51:24	0:0	6	pb
water	51:27	0:0	4	;
if	52:8	55:8	4	(type == 5)
cond	52:12	52:20	5	type == 5
water	52:12	0:0	6	type
op	52:17	0:0	6	==
water	52:20	0:0	6	5
stmts	52:23	55:8	5	
water	52:23	0:0	6	{
call	53:12	53:50	6	avio_get_str
arg	53:25	53:27	7	pb
water	53:25	0:0	8	pb
arg	53:29	53:32	7	len
water	53:29	0:0	8	len
arg	53:34	53:37	7	val
water	53:34	0:0	8	val
arg	53:39	53:50	7	sizeof(val)
op	53:39	0:0	8	sizeof
water	53:45	0:0	8	(
water	53:46	0:0	8	val
water	53:49	0:0	8	)
water	53:51	0:0	6	;
call	54:12	54:59	6	av_log
arg	54:19	54:20	7	s
water	54:19	0:0	8	s
arg	54:22	54:34	7	AV_LOG_DEBUG
water	54:22	0:0	8	AV_LOG_DEBUG
arg	54:36	54:49	7	"%s = '%s'\n"
water	54:36	0:0	8	"%s = '%s'\n"
arg	54:51	54:54	7	key
water	54:51	0:0	8	key
arg	54:56	54:59	7	val
water	54:56	0:0	8	val
water	54:60	0:0	6	;
water	55:8	0:0	6	}
else	55:10	60:8	4
stmts	55:15	60:8	5	
if	55:15	60:8	6	(type == 4)
cond	55:19	55:27	7	type == 4
water	55:19	0:0	8	type
op	55:24	0:0	8	==
water	55:27	0:0	8	4
stmts	55:30	60:8	7	
water	55:30	0:0	8	{
call	56:12	56:51	8	av_log
arg	56:19	56:20	9	s
water	56:19	0:0	10	s
arg	56:22	56:34	9	AV_LOG_DEBUG
water	56:22	0:0	10	AV_LOG_DEBUG
arg	56:36	56:46	9	"%s = '0x"
water	56:36	0:0	10	"%s = '0x"
arg	56:48	56:51	9	key
water	56:48	0:0	10	key
water	56:52	0:0	8	;
for	57:12	58:58	8	(j = 0 ;j < len;j ++)
forinit	57:17	57:22	9	j = 0 ;
water	57:17	0:0	10	j
op	57:19	0:0	10	=
water	57:21	0:0	10	0
water	57:22	0:0	10	;
cond	57:24	57:28	9	j < len
water	57:24	0:0	10	j
op	57:26	0:0	10	<
water	57:28	0:0	10	len
forexpr	57:33	57:34	9	j ++
water	57:33	0:0	10	j
op	57:34	0:0	10	++
stmts	58:16	58:58	9	
call	58:16	58:57	10	av_log
arg	58:23	58:24	11	s
water	58:23	0:0	12	s
arg	58:26	58:38	11	AV_LOG_DEBUG
water	58:26	0:0	12	AV_LOG_DEBUG
arg	58:40	58:44	11	"%X"
water	58:40	0:0	12	"%X"
arg	58:46	58:57	11	avio_r8(pb)
call	58:46	58:56	12	avio_r8
arg	58:54	58:56	13	pb
water	58:54	0:0	14	pb
water	58:58	0:0	10	;
call	59:12	59:41	8	av_log
arg	59:19	59:20	9	s
water	59:19	0:0	10	s
arg	59:22	59:34	9	AV_LOG_DEBUG
water	59:22	0:0	10	AV_LOG_DEBUG
arg	59:36	59:41	9	"'\n"
water	59:36	0:0	10	"'\n"
water	59:42	0:0	8	;
water	60:8	0:0	8	}
else	60:10	62:8	4
stmts	60:15	62:8	5	
if	60:15	62:8	6	(len == 4 && type == 3 && !strncmp (key ,"StreamCount" ,tlen ))
cond	60:19	60:77	7	len == 4 && type == 3 && !strncmp (key ,"StreamCount" ,tlen )
water	60:19	0:0	8	len
op	60:23	0:0	8	==
water	60:26	0:0	8	4
op	60:28	0:0	8	&&
water	60:31	0:0	8	type
op	60:36	0:0	8	==
water	60:39	0:0	8	3
op	60:41	0:0	8	&&
op	60:44	0:0	8	!
call	60:45	60:77	8	strncmp
arg	60:53	60:56	9	key
water	60:53	0:0	10	key
arg	60:58	60:71	9	"StreamCount"
water	60:58	0:0	10	"StreamCount"
arg	60:73	60:77	9	tlen
water	60:73	0:0	10	tlen
stmts	60:80	62:8	7	
water	60:80	0:0	8	{
water	61:12	0:0	8	nb_streams
op	61:23	0:0	8	=
water	61:25	0:0	8	value
op	61:31	0:0	8	=
call	61:33	61:45	8	avio_rb32
arg	61:43	61:45	9	pb
water	61:43	0:0	10	pb
water	61:46	0:0	8	;
water	62:8	0:0	8	}
else	62:10	65:8	4
stmts	62:15	65:8	5	
if	62:15	65:8	6	(len == 4 && type == 3)
cond	62:19	62:39	7	len == 4 && type == 3
water	62:19	0:0	8	len
op	62:23	0:0	8	==
water	62:26	0:0	8	4
op	62:28	0:0	8	&&
water	62:31	0:0	8	type
op	62:36	0:0	8	==
water	62:39	0:0	8	3
stmts	62:42	65:8	7	
water	62:42	0:0	8	{
water	63:12	0:0	8	value
op	63:18	0:0	8	=
call	63:20	63:32	8	avio_rb32
arg	63:30	63:32	9	pb
water	63:30	0:0	10	pb
water	63:33	0:0	8	;
call	64:12	64:59	8	av_log
arg	64:19	64:20	9	s
water	64:19	0:0	10	s
arg	64:22	64:34	9	AV_LOG_DEBUG
water	64:22	0:0	10	AV_LOG_DEBUG
arg	64:36	64:47	9	"%s = %d\n"
water	64:36	0:0	10	"%s = %d\n"
arg	64:49	64:52	9	key
water	64:49	0:0	10	key
arg	64:54	64:59	9	value
water	64:54	0:0	10	value
water	64:60	0:0	8	;
water	65:8	0:0	8	}
else	65:10	68:8	4
stmts	65:15	68:8	5	
water	65:15	0:0	6	{
call	66:12	66:73	6	av_log
arg	66:19	66:20	7	s
water	66:19	0:0	8	s
arg	66:22	66:34	7	AV_LOG_DEBUG
water	66:22	0:0	8	AV_LOG_DEBUG
arg	66:36	66:68	7	"Skipping unsupported key: %s\n"
water	66:36	0:0	8	"Skipping unsupported key: %s\n"
arg	66:70	66:73	7	key
water	66:70	0:0	8	key
water	66:74	0:0	6	;
call	67:12	67:29	6	avio_skip
arg	67:22	67:24	7	pb
water	67:22	0:0	8	pb
arg	67:26	67:29	7	len
water	67:26	0:0	8	len
water	67:30	0:0	6	;
water	68:8	0:0	6	}
water	69:4	0:0	4	}
for	71:4	124:4	2	(n = 0 ;n < nb_streams;n ++)
forinit	71:9	71:14	3	n = 0 ;
water	71:9	0:0	4	n
op	71:11	0:0	4	=
water	71:13	0:0	4	0
water	71:14	0:0	4	;
cond	71:16	71:20	3	n < nb_streams
water	71:16	0:0	4	n
op	71:18	0:0	4	<
water	71:20	0:0	4	nb_streams
forexpr	71:32	71:33	3	n ++
water	71:32	0:0	4	n
op	71:33	0:0	4	++
stmts	71:37	124:4	3	
water	71:37	0:0	4	{
water	72:8	0:0	4	st
op	72:11	0:0	4	=
call	72:13	72:40	4	avformat_new_stream
arg	72:33	72:34	5	s
water	72:33	0:0	6	s
arg	72:36	72:40	5	NULL
water	72:36	0:0	6	NULL
water	72:41	0:0	4	;
if	73:8	74:34	4	(! st)
cond	73:12	73:13	5	! st
op	73:12	0:0	6	!
water	73:13	0:0	6	st
stmts	74:12	74:34	5	
return	74:12	74:34	6	AVERROR(ENOMEM)
call	74:19	74:33	7	AVERROR
arg	74:27	74:33	8	ENOMEM
water	74:27	0:0	9	ENOMEM
water	75:8	0:0	4	st
op	75:10	0:0	4	->
water	75:12	0:0	4	priv_data
op	75:22	0:0	4	=
call	75:24	75:45	4	ff_rm_alloc_rmstream
water	75:46	0:0	4	;
if	76:8	77:34	4	(! st -> priv_data)
cond	76:12	76:17	5	! st -> priv_data
op	76:12	0:0	6	!
water	76:13	0:0	6	st
op	76:15	0:0	6	->
water	76:17	0:0	6	priv_data
stmts	77:12	77:34	5	
return	77:12	77:34	6	AVERROR(ENOMEM)
call	77:19	77:33	7	AVERROR
arg	77:27	77:33	8	ENOMEM
water	77:27	0:0	9	ENOMEM
if	79:8	80:38	4	(avio_r8 (pb ) != 1)
cond	79:12	79:27	5	avio_r8 (pb ) != 1
call	79:12	79:22	6	avio_r8
arg	79:20	79:22	7	pb
water	79:20	0:0	8	pb
op	79:24	0:0	6	!=
water	79:27	0:0	6	1
stmts	80:12	80:38	5	
return	80:12	80:38	6	AVERROR_INVALIDDATA
water	80:19	0:0	7	AVERROR_INVALIDDATA
water	82:8	0:0	4	count
op	82:14	0:0	4	=
call	82:16	82:28	4	avio_rb32
arg	82:26	82:28	5	pb
water	82:26	0:0	6	pb
water	82:29	0:0	4	;
for	83:8	123:8	4	(i = 0 ;i < count;i ++)
forinit	83:13	83:18	5	i = 0 ;
water	83:13	0:0	6	i
op	83:15	0:0	6	=
water	83:17	0:0	6	0
water	83:18	0:0	6	;
cond	83:20	83:24	5	i < count
water	83:20	0:0	6	i
op	83:22	0:0	6	<
water	83:24	0:0	6	count
forexpr	83:31	83:32	5	i ++
water	83:31	0:0	6	i
op	83:32	0:0	6	++
stmts	83:36	123:8	5	
water	83:36	0:0	6	{
if	84:12	85:42	6	(avio_feof (pb ))
cond	84:16	84:28	7	avio_feof (pb )
call	84:16	84:28	8	avio_feof
arg	84:26	84:28	9	pb
water	84:26	0:0	10	pb
stmts	85:16	85:42	7	
return	85:16	85:42	8	AVERROR_INVALIDDATA
water	85:23	0:0	9	AVERROR_INVALIDDATA
water	87:12	0:0	6	type
op	87:17	0:0	6	=
call	87:19	87:29	6	avio_r8
arg	87:27	87:29	7	pb
water	87:27	0:0	8	pb
water	87:30	0:0	6	;
water	88:12	0:0	6	tlen
op	88:18	0:0	6	=
call	88:20	88:32	6	avio_rb32
arg	88:30	88:32	7	pb
water	88:30	0:0	8	pb
water	88:33	0:0	6	;
call	89:12	89:51	6	avio_get_str
arg	89:25	89:27	7	pb
water	89:25	0:0	8	pb
arg	89:29	89:33	7	tlen
water	89:29	0:0	8	tlen
arg	89:35	89:38	7	key
water	89:35	0:0	8	key
arg	89:40	89:51	7	sizeof(key)
op	89:40	0:0	8	sizeof
water	89:46	0:0	8	(
water	89:47	0:0	8	key
water	89:50	0:0	8	)
water	89:52	0:0	6	;
water	90:12	0:0	6	len
op	90:17	0:0	6	=
call	90:19	90:31	6	avio_rb32
arg	90:29	90:31	7	pb
water	90:29	0:0	8	pb
water	90:32	0:0	6	;
if	91:12	94:12	6	(type == 5)
cond	91:16	91:24	7	type == 5
water	91:16	0:0	8	type
op	91:21	0:0	8	==
water	91:24	0:0	8	5
stmts	91:27	94:12	7	
water	91:27	0:0	8	{
call	92:16	92:54	8	avio_get_str
arg	92:29	92:31	9	pb
water	92:29	0:0	10	pb
arg	92:33	92:36	9	len
water	92:33	0:0	10	len
arg	92:38	92:41	9	val
water	92:38	0:0	10	val
arg	92:43	92:54	9	sizeof(val)
op	92:43	0:0	10	sizeof
water	92:49	0:0	10	(
water	92:50	0:0	10	val
water	92:53	0:0	10	)
water	92:55	0:0	8	;
call	93:16	93:63	8	av_log
arg	93:23	93:24	9	s
water	93:23	0:0	10	s
arg	93:26	93:38	9	AV_LOG_DEBUG
water	93:26	0:0	10	AV_LOG_DEBUG
arg	93:40	93:53	9	"%s = '%s'\n"
water	93:40	0:0	10	"%s = '%s'\n"
arg	93:55	93:58	9	key
water	93:55	0:0	10	key
arg	93:60	93:63	9	val
water	93:60	0:0	10	val
water	93:64	0:0	8	;
water	94:12	0:0	8	}
else	94:14	107:12	6
stmts	94:19	107:12	7	
if	94:19	107:12	8	(type == 4 && !strncmp (key ,"OpaqueData" ,tlen ))
cond	94:23	94:68	9	type == 4 && !strncmp (key ,"OpaqueData" ,tlen )
water	94:23	0:0	10	type
op	94:28	0:0	10	==
water	94:31	0:0	10	4
op	94:33	0:0	10	&&
op	94:36	0:0	10	!
call	94:37	94:68	10	strncmp
arg	94:45	94:48	11	key
water	94:45	0:0	12	key
arg	94:50	94:62	11	"OpaqueData"
water	94:50	0:0	12	"OpaqueData"
arg	94:64	94:68	11	tlen
water	94:64	0:0	12	tlen
stmts	94:71	107:12	9	
water	94:71	0:0	10	{
water	95:16	0:0	10	ret
op	95:20	0:0	10	=
call	95:22	95:48	10	ffio_ensure_seekback
arg	95:43	95:45	11	pb
water	95:43	0:0	12	pb
arg	95:47	95:48	11	4
water	95:47	0:0	12	4
water	95:49	0:0	10	;
if	96:16	97:30	10	(ret < 0)
cond	96:20	96:26	11	ret < 0
water	96:20	0:0	12	ret
op	96:24	0:0	12	<
water	96:26	0:0	12	0
stmts	97:20	97:30	11	
return	97:20	97:30	12	ret
water	97:27	0:0	13	ret
if	98:16	100:16	10	(avio_rb32 (pb ) ==MKBETAG ('M' ,'L' ,'T' ,'I' ))
cond	98:20	98:63	11	avio_rb32 (pb ) ==MKBETAG ('M' ,'L' ,'T' ,'I' )
call	98:20	98:32	12	avio_rb32
arg	98:30	98:32	13	pb
water	98:30	0:0	14	pb
op	98:34	0:0	12	==
call	98:37	98:63	12	MKBETAG
arg	98:45	98:48	13	'M'
water	98:45	0:0	14	'M'
arg	98:50	98:53	13	'L'
water	98:50	0:0	14	'L'
arg	98:55	98:58	13	'T'
water	98:55	0:0	14	'T'
arg	98:60	98:63	13	'I'
water	98:60	0:0	14	'I'
stmts	98:66	100:16	11	
water	98:66	0:0	12	{
water	99:20	0:0	12	ret
op	99:24	0:0	12	=
call	99:26	99:55	12	rm_read_multi
arg	99:40	99:41	13	s
water	99:40	0:0	14	s
arg	99:43	99:45	13	pb
water	99:43	0:0	14	pb
arg	99:47	99:49	13	st
water	99:47	0:0	14	st
arg	99:51	99:55	13	NULL
water	99:51	0:0	14	NULL
water	99:56	0:0	12	;
water	100:16	0:0	12	}
else	100:18	103:16	10
stmts	100:23	103:16	11	
water	100:23	0:0	12	{
call	101:20	101:46	12	avio_seek
arg	101:30	101:32	13	pb
water	101:30	0:0	14	pb
arg	101:34	101:36	13	-4
op	101:34	0:0	14	-
water	101:35	0:0	14	4
arg	101:38	101:46	13	SEEK_CUR
water	101:38	0:0	14	SEEK_CUR
water	101:47	0:0	12	;
water	102:20	0:0	12	ret
op	102:24	0:0	12	=
call	102:26	102:87	12	ff_rm_read_mdpr_codecdata
arg	102:52	102:53	13	s
water	102:52	0:0	14	s
arg	102:55	102:57	13	pb
water	102:55	0:0	14	pb
arg	102:59	102:61	13	st
water	102:59	0:0	14	st
arg	102:63	102:76	13	st->priv_data
water	102:63	0:0	14	st
op	102:65	0:0	14	->
water	102:67	0:0	14	priv_data
arg	102:78	102:81	13	len
water	102:78	0:0	14	len
arg	102:83	102:87	13	NULL
water	102:83	0:0	14	NULL
water	102:88	0:0	12	;
water	103:16	0:0	12	}
if	105:16	106:30	10	(ret < 0)
cond	105:20	105:26	11	ret < 0
water	105:20	0:0	12	ret
op	105:24	0:0	12	<
water	105:26	0:0	12	0
stmts	106:20	106:30	11	
return	106:20	106:30	12	ret
water	106:27	0:0	13	ret
water	107:12	0:0	10	}
else	107:14	114:12	6
stmts	107:19	114:12	7	
if	107:19	114:12	8	(type == 4)
cond	107:23	107:31	9	type == 4
water	107:23	0:0	10	type
op	107:28	0:0	10	==
water	107:31	0:0	10	4
stmts	107:34	114:12	9	
water	107:34	0:0	10	{
decl	108:16	108:21	10	int	j
call	110:16	110:55	10	av_log
arg	110:23	110:24	11	s
water	110:23	0:0	12	s
arg	110:26	110:38	11	AV_LOG_DEBUG
water	110:26	0:0	12	AV_LOG_DEBUG
arg	110:40	110:50	11	"%s = '0x"
water	110:40	0:0	12	"%s = '0x"
arg	110:52	110:55	11	key
water	110:52	0:0	12	key
water	110:56	0:0	10	;
for	111:16	112:62	10	(j = 0 ;j < len;j ++)
forinit	111:21	111:26	11	j = 0 ;
water	111:21	0:0	12	j
op	111:23	0:0	12	=
water	111:25	0:0	12	0
water	111:26	0:0	12	;
cond	111:28	111:32	11	j < len
water	111:28	0:0	12	j
op	111:30	0:0	12	<
water	111:32	0:0	12	len
forexpr	111:37	111:38	11	j ++
water	111:37	0:0	12	j
op	111:38	0:0	12	++
stmts	112:20	112:62	11	
call	112:20	112:61	12	av_log
arg	112:27	112:28	13	s
water	112:27	0:0	14	s
arg	112:30	112:42	13	AV_LOG_DEBUG
water	112:30	0:0	14	AV_LOG_DEBUG
arg	112:44	112:48	13	"%X"
water	112:44	0:0	14	"%X"
arg	112:50	112:61	13	avio_r8(pb)
call	112:50	112:60	14	avio_r8
arg	112:58	112:60	15	pb
water	112:58	0:0	16	pb
water	112:62	0:0	12	;
call	113:16	113:45	10	av_log
arg	113:23	113:24	11	s
water	113:23	0:0	12	s
arg	113:26	113:38	11	AV_LOG_DEBUG
water	113:26	0:0	12	AV_LOG_DEBUG
arg	113:40	113:45	11	"'\n"
water	113:40	0:0	12	"'\n"
water	113:46	0:0	10	;
water	114:12	0:0	10	}
else	114:14	116:12	6
stmts	114:19	116:12	7	
if	114:19	116:12	8	(len == 4 && type == 3 && !strncmp (key ,"Duration" ,tlen ))
cond	114:23	114:78	9	len == 4 && type == 3 && !strncmp (key ,"Duration" ,tlen )
water	114:23	0:0	10	len
op	114:27	0:0	10	==
water	114:30	0:0	10	4
op	114:32	0:0	10	&&
water	114:35	0:0	10	type
op	114:40	0:0	10	==
water	114:43	0:0	10	3
op	114:45	0:0	10	&&
op	114:48	0:0	10	!
call	114:49	114:78	10	strncmp
arg	114:57	114:60	11	key
water	114:57	0:0	12	key
arg	114:62	114:72	11	"Duration"
water	114:62	0:0	12	"Duration"
arg	114:74	114:78	11	tlen
water	114:74	0:0	12	tlen
stmts	114:81	116:12	9	
water	114:81	0:0	10	{
water	115:16	0:0	10	st
op	115:18	0:0	10	->
water	115:20	0:0	10	duration
op	115:29	0:0	10	=
call	115:31	115:43	10	avio_rb32
arg	115:41	115:43	11	pb
water	115:41	0:0	12	pb
water	115:44	0:0	10	;
water	116:12	0:0	10	}
else	116:14	119:12	6
stmts	116:19	119:12	7	
if	116:19	119:12	8	(len == 4 && type == 3)
cond	116:23	116:43	9	len == 4 && type == 3
water	116:23	0:0	10	len
op	116:27	0:0	10	==
water	116:30	0:0	10	4
op	116:32	0:0	10	&&
water	116:35	0:0	10	type
op	116:40	0:0	10	==
water	116:43	0:0	10	3
stmts	116:46	119:12	9	
water	116:46	0:0	10	{
water	117:16	0:0	10	value
op	117:22	0:0	10	=
call	117:24	117:36	10	avio_rb32
arg	117:34	117:36	11	pb
water	117:34	0:0	12	pb
water	117:37	0:0	10	;
call	118:16	118:63	10	av_log
arg	118:23	118:24	11	s
water	118:23	0:0	12	s
arg	118:26	118:38	11	AV_LOG_DEBUG
water	118:26	0:0	12	AV_LOG_DEBUG
arg	118:40	118:51	11	"%s = %d\n"
water	118:40	0:0	12	"%s = %d\n"
arg	118:53	118:56	11	key
water	118:53	0:0	12	key
arg	118:58	118:63	11	value
water	118:58	0:0	12	value
water	118:64	0:0	10	;
water	119:12	0:0	10	}
else	119:14	122:12	6
stmts	119:19	122:12	7	
water	119:19	0:0	8	{
call	120:16	120:77	8	av_log
arg	120:23	120:24	9	s
water	120:23	0:0	10	s
arg	120:26	120:38	9	AV_LOG_DEBUG
water	120:26	0:0	10	AV_LOG_DEBUG
arg	120:40	120:72	9	"Skipping unsupported key: %s\n"
water	120:40	0:0	10	"Skipping unsupported key: %s\n"
arg	120:74	120:77	9	key
water	120:74	0:0	10	key
water	120:78	0:0	8	;
call	121:16	121:33	8	avio_skip
arg	121:26	121:28	9	pb
water	121:26	0:0	10	pb
arg	121:30	121:33	9	len
water	121:30	0:0	10	len
water	121:34	0:0	8	;
water	122:12	0:0	8	}
water	123:8	0:0	6	}
water	124:4	0:0	4	}
if	126:4	127:34	2	(avio_r8 (pb ) != 6)
cond	126:8	126:23	3	avio_r8 (pb ) != 6
call	126:8	126:18	4	avio_r8
arg	126:16	126:18	5	pb
water	126:16	0:0	6	pb
op	126:20	0:0	4	!=
water	126:23	0:0	4	6
stmts	127:8	127:34	3	
return	127:8	127:34	4	AVERROR_INVALIDDATA
water	127:15	0:0	5	AVERROR_INVALIDDATA
call	128:4	128:20	2	avio_skip
arg	128:14	128:16	3	pb
water	128:14	0:0	4	pb
arg	128:18	128:20	3	12
water	128:18	0:0	4	12
water	128:21	0:0	2	;
call	129:4	129:56	2	avio_skip
arg	129:14	129:16	3	pb
water	129:14	0:0	4	pb
arg	129:18	129:56	3	avio_rb64(pb)+pos-avio_tell(s->pb)
call	129:18	129:30	4	avio_rb64
arg	129:28	129:30	5	pb
water	129:28	0:0	6	pb
op	129:32	0:0	4	+
water	129:34	0:0	4	pos
op	129:38	0:0	4	-
call	129:40	129:55	4	avio_tell
arg	129:50	129:55	5	s->pb
water	129:50	0:0	6	s
op	129:51	0:0	6	->
water	129:53	0:0	6	pb
water	129:57	0:0	2	;
if	130:4	131:34	2	(avio_r8 (pb ) != 8)
cond	130:8	130:23	3	avio_r8 (pb ) != 8
call	130:8	130:18	4	avio_r8
arg	130:16	130:18	5	pb
water	130:16	0:0	6	pb
op	130:20	0:0	4	!=
water	130:23	0:0	4	8
stmts	131:8	131:34	3	
return	131:8	131:34	4	AVERROR_INVALIDDATA
water	131:15	0:0	5	AVERROR_INVALIDDATA
call	132:4	132:19	2	avio_skip
arg	132:14	132:16	3	pb
water	132:14	0:0	4	pb
arg	132:18	132:19	3	8
water	132:18	0:0	4	8
water	132:20	0:0	2	;
return	134:4	134:12	2	0
water	134:11	0:0	3	0
