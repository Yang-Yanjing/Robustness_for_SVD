func	1:0	108:0	0	static int	h264_slice_header_init
params	1:33	0:0	1	
param	1:34	1:48	2	H264Context *	h
stmnts	0:0	107:14	1	
decl	3:4	5:46	2	int	nb_slices
op	3:18	0:0	2	=
water	3:20	0:0	2	(
water	3:21	0:0	2	HAVE_THREADS
op	3:34	0:0	2	&&
water	4:21	0:0	2	h
op	4:22	0:0	2	->
water	4:24	0:0	2	avctx
op	4:29	0:0	2	->
water	4:31	0:0	2	active_thread_type
op	4:50	0:0	2	&
water	4:52	0:0	2	FF_THREAD_SLICE
water	4:67	0:0	2	)
water	4:69	0:0	2	?
water	5:20	0:0	2	h
op	5:21	0:0	2	->
water	5:23	0:0	2	avctx
op	5:28	0:0	2	->
water	5:30	0:0	2	thread_count
water	5:43	0:0	2	:
water	5:45	0:0	2	1
decl	6:4	6:14	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:14	2	int	ret
call	8:4	8:35	2	ff_set_sar
arg	8:15	8:23	3	h->avctx
water	8:15	0:0	4	h
op	8:16	0:0	4	->
water	8:18	0:0	4	avctx
arg	8:25	8:35	3	h->sps.sar
water	8:25	0:0	4	h
op	8:26	0:0	4	->
water	8:28	0:0	4	sps
op	8:31	0:0	4	.
water	8:32	0:0	4	sar
water	8:36	0:0	2	;
call	9:4	10:75	2	av_pix_fmt_get_chroma_sub_sample
arg	9:37	9:54	3	h->avctx->pix_fmt
water	9:37	0:0	4	h
op	9:38	0:0	4	->
water	9:40	0:0	4	avctx
op	9:45	0:0	4	->
water	9:47	0:0	4	pix_fmt
arg	10:37	10:55	3	&h->chroma_x_shift
op	10:37	0:0	4	&
water	10:38	0:0	4	h
op	10:39	0:0	4	->
water	10:41	0:0	4	chroma_x_shift
arg	10:57	10:75	3	&h->chroma_y_shift
op	10:57	0:0	4	&
water	10:58	0:0	4	h
op	10:59	0:0	4	->
water	10:61	0:0	4	chroma_y_shift
water	10:76	0:0	2	;
if	12:4	18:4	2	(h -> sps . timing_info_present_flag)
cond	12:8	12:15	3	h -> sps . timing_info_present_flag
water	12:8	0:0	4	h
op	12:9	0:0	4	->
water	12:11	0:0	4	sps
op	12:14	0:0	4	.
water	12:15	0:0	4	timing_info_present_flag
stmts	12:41	18:4	3	
water	12:41	0:0	4	{
decl	13:8	13:39	4	int64_t	den
op	13:20	0:0	4	=
water	13:22	0:0	4	h
op	13:23	0:0	4	->
water	13:25	0:0	4	sps
op	13:28	0:0	4	.
water	13:29	0:0	4	time_scale
if	14:8	15:20	4	(h -> x264_build < 44 U)
cond	14:12	14:30	5	h -> x264_build < 44 U
water	14:12	0:0	6	h
op	14:13	0:0	6	->
water	14:15	0:0	6	x264_build
op	14:26	0:0	6	<
water	14:28	0:0	6	44
water	14:30	0:0	6	U
stmts	15:12	15:20	5	
water	15:12	0:0	6	den
op	15:16	0:0	6	*=
water	15:19	0:0	6	2
water	15:20	0:0	6	;
call	16:8	17:84	4	av_reduce
arg	16:18	16:42	5	&h->avctx->framerate.den
op	16:18	0:0	6	&
water	16:19	0:0	6	h
op	16:20	0:0	6	->
water	16:22	0:0	6	avctx
op	16:27	0:0	6	->
water	16:29	0:0	6	framerate
op	16:38	0:0	6	.
water	16:39	0:0	6	den
arg	16:44	16:68	5	&h->avctx->framerate.num
op	16:44	0:0	6	&
water	16:45	0:0	6	h
op	16:46	0:0	6	->
water	16:48	0:0	6	avctx
op	16:53	0:0	6	->
water	16:55	0:0	6	framerate
op	16:64	0:0	6	.
water	16:65	0:0	6	num
arg	17:18	17:70	5	h->sps.num_units_in_tick*h->avctx->ticks_per_frame
water	17:18	0:0	6	h
op	17:19	0:0	6	->
water	17:21	0:0	6	sps
op	17:24	0:0	6	.
water	17:25	0:0	6	num_units_in_tick
op	17:43	0:0	6	*
water	17:45	0:0	6	h
op	17:46	0:0	6	->
water	17:48	0:0	6	avctx
op	17:53	0:0	6	->
water	17:55	0:0	6	ticks_per_frame
arg	17:72	17:75	5	den
water	17:72	0:0	6	den
arg	17:77	17:84	5	1<<30
water	17:77	0:0	6	1
op	17:79	0:0	6	<<
water	17:82	0:0	6	30
water	17:85	0:0	4	;
water	18:4	0:0	4	}
call	20:4	20:25	2	ff_h264_free_tables
arg	20:24	20:25	3	h
water	20:24	0:0	4	h
water	20:26	0:0	2	;
water	22:4	0:0	2	h
op	22:5	0:0	2	->
water	22:7	0:0	2	first_field
op	22:29	0:0	2	=
water	22:31	0:0	2	0
water	22:32	0:0	2	;
water	23:4	0:0	2	h
op	23:5	0:0	2	->
water	23:7	0:0	2	prev_interlaced_frame
op	23:29	0:0	2	=
water	23:31	0:0	2	1
water	23:32	0:0	2	;
call	25:4	25:22	2	init_scan_tables
arg	25:21	25:22	3	h
water	25:21	0:0	4	h
water	25:23	0:0	2	;
water	26:4	0:0	2	ret
op	26:8	0:0	2	=
call	26:10	26:32	2	ff_h264_alloc_tables
arg	26:31	26:32	3	h
water	26:31	0:0	4	h
water	26:33	0:0	2	;
if	27:4	30:4	2	(ret < 0)
cond	27:8	27:14	3	ret < 0
water	27:8	0:0	4	ret
op	27:12	0:0	4	<
water	27:14	0:0	4	0
stmts	27:17	30:4	3	
water	27:17	0:0	4	{
call	28:8	28:68	4	av_log
arg	28:15	28:23	5	h->avctx
water	28:15	0:0	6	h
op	28:16	0:0	6	->
water	28:18	0:0	6	avctx
arg	28:25	28:37	5	AV_LOG_ERROR
water	28:25	0:0	6	AV_LOG_ERROR
arg	28:39	28:68	5	"Could not allocate memory\n"
water	28:39	0:0	6	"Could not allocate memory\n"
water	28:69	0:0	4	;
goto	29:8	29:17	4	fail
water	29:13	0:0	5	fail
water	30:4	0:0	4	}
if	33:4	40:4	2	(h -> avctx -> codec && h -> avctx -> codec -> capabilities & AV_CODEC_CAP_HWACCEL_VDPAU && ( h -> sps . bit_depth_luma != 8 || h -> sps . chroma_format_idc > 1 ))
cond	33:8	35:67	3	h -> avctx -> codec && h -> avctx -> codec -> capabilities & AV_CODEC_CAP_HWACCEL_VDPAU && ( h -> sps . bit_depth_luma != 8 || h -> sps . chroma_format_idc > 1 )
water	33:8	0:0	4	h
op	33:9	0:0	4	->
water	33:11	0:0	4	avctx
op	33:16	0:0	4	->
water	33:18	0:0	4	codec
op	33:24	0:0	4	&&
water	34:8	0:0	4	h
op	34:9	0:0	4	->
water	34:11	0:0	4	avctx
op	34:16	0:0	4	->
water	34:18	0:0	4	codec
op	34:23	0:0	4	->
water	34:25	0:0	4	capabilities
op	34:38	0:0	4	&
water	34:40	0:0	4	AV_CODEC_CAP_HWACCEL_VDPAU
op	34:67	0:0	4	&&
water	35:8	0:0	4	(
water	35:9	0:0	4	h
op	35:10	0:0	4	->
water	35:12	0:0	4	sps
op	35:15	0:0	4	.
water	35:16	0:0	4	bit_depth_luma
op	35:31	0:0	4	!=
water	35:34	0:0	4	8
op	35:36	0:0	4	||
water	35:39	0:0	4	h
op	35:40	0:0	4	->
water	35:42	0:0	4	sps
op	35:45	0:0	4	.
water	35:46	0:0	4	chroma_format_idc
op	35:64	0:0	4	>
water	35:66	0:0	4	1
water	35:67	0:0	4	)
stmts	35:70	40:4	3	
water	35:70	0:0	4	{
call	36:8	37:69	4	av_log
arg	36:15	36:23	5	h->avctx
water	36:15	0:0	6	h
op	36:16	0:0	6	->
water	36:18	0:0	6	avctx
arg	36:25	36:37	5	AV_LOG_ERROR
water	36:25	0:0	6	AV_LOG_ERROR
arg	37:16	37:69	5	"VDPAU decoding does not support video colorspace.\n"
water	37:16	0:0	6	"VDPAU decoding does not support video colorspace.\n"
water	37:70	0:0	4	;
water	38:8	0:0	4	ret
op	38:12	0:0	4	=
water	38:14	0:0	4	AVERROR_INVALIDDATA
water	38:33	0:0	4	;
goto	39:8	39:17	4	fail
water	39:13	0:0	5	fail
water	40:4	0:0	4	}
if	43:4	50:4	2	(h -> sps . bit_depth_luma < 8 || h -> sps . bit_depth_luma > 14 || h -> sps . bit_depth_luma == 11 || h -> sps . bit_depth_luma == 13)
cond	43:8	44:64	3	h -> sps . bit_depth_luma < 8 || h -> sps . bit_depth_luma > 14 || h -> sps . bit_depth_luma == 11 || h -> sps . bit_depth_luma == 13
water	43:8	0:0	4	h
op	43:9	0:0	4	->
water	43:11	0:0	4	sps
op	43:14	0:0	4	.
water	43:15	0:0	4	bit_depth_luma
op	43:30	0:0	4	<
water	43:32	0:0	4	8
op	43:34	0:0	4	||
water	43:37	0:0	4	h
op	43:38	0:0	4	->
water	43:40	0:0	4	sps
op	43:43	0:0	4	.
water	43:44	0:0	4	bit_depth_luma
op	43:59	0:0	4	>
water	43:61	0:0	4	14
op	43:64	0:0	4	||
water	44:8	0:0	4	h
op	44:9	0:0	4	->
water	44:11	0:0	4	sps
op	44:14	0:0	4	.
water	44:15	0:0	4	bit_depth_luma
op	44:30	0:0	4	==
water	44:33	0:0	4	11
op	44:36	0:0	4	||
water	44:39	0:0	4	h
op	44:40	0:0	4	->
water	44:42	0:0	4	sps
op	44:45	0:0	4	.
water	44:46	0:0	4	bit_depth_luma
op	44:61	0:0	4	==
water	44:64	0:0	4	13
stmts	45:6	50:4	3	
water	45:6	0:0	4	{
call	46:8	47:36	4	av_log
arg	46:15	46:23	5	h->avctx
water	46:15	0:0	6	h
op	46:16	0:0	6	->
water	46:18	0:0	6	avctx
arg	46:25	46:37	5	AV_LOG_ERROR
water	46:25	0:0	6	AV_LOG_ERROR
arg	46:39	46:67	5	"Unsupported bit depth %d\n"
water	46:39	0:0	6	"Unsupported bit depth %d\n"
arg	47:15	47:36	5	h->sps.bit_depth_luma
water	47:15	0:0	6	h
op	47:16	0:0	6	->
water	47:18	0:0	6	sps
op	47:21	0:0	6	.
water	47:22	0:0	6	bit_depth_luma
water	47:37	0:0	4	;
water	48:8	0:0	4	ret
op	48:12	0:0	4	=
water	48:14	0:0	4	AVERROR_INVALIDDATA
water	48:33	0:0	4	;
goto	49:8	49:17	4	fail
water	49:13	0:0	5	fail
water	50:4	0:0	4	}
water	52:4	0:0	2	h
op	52:5	0:0	2	->
water	52:7	0:0	2	cur_bit_depth_luma
op	52:34	0:0	2	=
water	53:4	0:0	2	h
op	53:5	0:0	2	->
water	53:7	0:0	2	avctx
op	53:12	0:0	2	->
water	53:14	0:0	2	bits_per_raw_sample
op	53:34	0:0	2	=
water	53:36	0:0	2	h
op	53:37	0:0	2	->
water	53:39	0:0	2	sps
op	53:42	0:0	2	.
water	53:43	0:0	2	bit_depth_luma
water	53:57	0:0	2	;
water	54:4	0:0	2	h
op	54:5	0:0	2	->
water	54:7	0:0	2	cur_chroma_format_idc
op	54:34	0:0	2	=
water	54:36	0:0	2	h
op	54:37	0:0	2	->
water	54:39	0:0	2	sps
op	54:42	0:0	2	.
water	54:43	0:0	2	chroma_format_idc
water	54:60	0:0	2	;
water	55:4	0:0	2	h
op	55:5	0:0	2	->
water	55:7	0:0	2	pixel_shift
op	55:34	0:0	2	=
water	55:36	0:0	2	h
op	55:37	0:0	2	->
water	55:39	0:0	2	sps
op	55:42	0:0	2	.
water	55:43	0:0	2	bit_depth_luma
op	55:58	0:0	2	>
water	55:60	0:0	2	8
water	55:61	0:0	2	;
water	56:4	0:0	2	h
op	56:5	0:0	2	->
water	56:7	0:0	2	chroma_format_idc
op	56:34	0:0	2	=
water	56:36	0:0	2	h
op	56:37	0:0	2	->
water	56:39	0:0	2	sps
op	56:42	0:0	2	.
water	56:43	0:0	2	chroma_format_idc
water	56:60	0:0	2	;
water	57:4	0:0	2	h
op	57:5	0:0	2	->
water	57:7	0:0	2	bit_depth_luma
op	57:34	0:0	2	=
water	57:36	0:0	2	h
op	57:37	0:0	2	->
water	57:39	0:0	2	sps
op	57:42	0:0	2	.
water	57:43	0:0	2	bit_depth_luma
water	57:57	0:0	2	;
call	59:4	60:44	2	ff_h264dsp_init
arg	59:20	59:31	3	&h->h264dsp
op	59:20	0:0	4	&
water	59:21	0:0	4	h
op	59:22	0:0	4	->
water	59:24	0:0	4	h264dsp
arg	59:33	59:54	3	h->sps.bit_depth_luma
water	59:33	0:0	4	h
op	59:34	0:0	4	->
water	59:36	0:0	4	sps
op	59:39	0:0	4	.
water	59:40	0:0	4	bit_depth_luma
arg	60:20	60:44	3	h->sps.chroma_format_idc
water	60:20	0:0	4	h
op	60:21	0:0	4	->
water	60:23	0:0	4	sps
op	60:26	0:0	4	.
water	60:27	0:0	4	chroma_format_idc
water	60:45	0:0	2	;
call	61:4	61:62	2	ff_h264chroma_init
arg	61:23	61:37	3	&h->h264chroma
op	61:23	0:0	4	&
water	61:24	0:0	4	h
op	61:25	0:0	4	->
water	61:27	0:0	4	h264chroma
arg	61:39	61:62	3	h->sps.bit_depth_chroma
water	61:39	0:0	4	h
op	61:40	0:0	4	->
water	61:42	0:0	4	sps
op	61:45	0:0	4	.
water	61:46	0:0	4	bit_depth_chroma
water	61:63	0:0	2	;
call	62:4	62:56	2	ff_h264qpel_init
arg	62:21	62:33	3	&h->h264qpel
op	62:21	0:0	4	&
water	62:22	0:0	4	h
op	62:23	0:0	4	->
water	62:25	0:0	4	h264qpel
arg	62:35	62:56	3	h->sps.bit_depth_luma
water	62:35	0:0	4	h
op	62:36	0:0	4	->
water	62:38	0:0	4	sps
op	62:41	0:0	4	.
water	62:42	0:0	4	bit_depth_luma
water	62:57	0:0	2	;
call	63:4	64:46	2	ff_h264_pred_init
arg	63:22	63:29	3	&h->hpc
op	63:22	0:0	4	&
water	63:23	0:0	4	h
op	63:24	0:0	4	->
water	63:26	0:0	4	hpc
arg	63:31	63:49	3	h->avctx->codec_id
water	63:31	0:0	4	h
op	63:32	0:0	4	->
water	63:34	0:0	4	avctx
op	63:39	0:0	4	->
water	63:41	0:0	4	codec_id
arg	63:51	63:72	3	h->sps.bit_depth_luma
water	63:51	0:0	4	h
op	63:52	0:0	4	->
water	63:54	0:0	4	sps
op	63:57	0:0	4	.
water	63:58	0:0	4	bit_depth_luma
arg	64:22	64:46	3	h->sps.chroma_format_idc
water	64:22	0:0	4	h
op	64:23	0:0	4	->
water	64:25	0:0	4	sps
op	64:28	0:0	4	.
water	64:29	0:0	4	chroma_format_idc
water	64:47	0:0	2	;
call	65:4	65:52	2	ff_videodsp_init
arg	65:21	65:29	3	&h->vdsp
op	65:21	0:0	4	&
water	65:22	0:0	4	h
op	65:23	0:0	4	->
water	65:25	0:0	4	vdsp
arg	65:31	65:52	3	h->sps.bit_depth_luma
water	65:31	0:0	4	h
op	65:32	0:0	4	->
water	65:34	0:0	4	sps
op	65:37	0:0	4	.
water	65:38	0:0	4	bit_depth_luma
water	65:53	0:0	2	;
if	67:4	76:4	2	(nb_slices > H264_MAX_THREADS || ( nb_slices > h -> mb_height && h -> mb_height ))
cond	67:8	67:81	3	nb_slices > H264_MAX_THREADS || ( nb_slices > h -> mb_height && h -> mb_height )
water	67:8	0:0	4	nb_slices
op	67:18	0:0	4	>
water	67:20	0:0	4	H264_MAX_THREADS
op	67:37	0:0	4	||
water	67:40	0:0	4	(
water	67:41	0:0	4	nb_slices
op	67:51	0:0	4	>
water	67:53	0:0	4	h
op	67:54	0:0	4	->
water	67:56	0:0	4	mb_height
op	67:66	0:0	4	&&
water	67:69	0:0	4	h
op	67:70	0:0	4	->
water	67:72	0:0	4	mb_height
water	67:81	0:0	4	)
stmts	67:84	76:4	3	
water	67:84	0:0	4	{
decl	68:8	68:22	4	int	max_slices
if	69:8	70:62	4	(h -> mb_height)
cond	69:12	69:15	5	h -> mb_height
water	69:12	0:0	6	h
op	69:13	0:0	6	->
water	69:15	0:0	6	mb_height
stmts	70:12	70:62	5	
water	70:12	0:0	6	max_slices
op	70:23	0:0	6	=
call	70:25	70:61	6	FFMIN
arg	70:31	70:47	7	H264_MAX_THREADS
water	70:31	0:0	8	H264_MAX_THREADS
arg	70:49	70:61	7	h->mb_height
water	70:49	0:0	8	h
op	70:50	0:0	8	->
water	70:52	0:0	8	mb_height
water	70:62	0:0	6	;
else	71:8	72:41	4
stmts	72:12	72:41	5	
water	72:12	0:0	6	max_slices
op	72:23	0:0	6	=
water	72:25	0:0	6	H264_MAX_THREADS
water	72:41	0:0	6	;
call	73:8	74:57	4	av_log
arg	73:15	73:23	5	h->avctx
water	73:15	0:0	6	h
op	73:16	0:0	6	->
water	73:18	0:0	6	avctx
arg	73:25	73:39	5	AV_LOG_WARNING
water	73:25	0:0	6	AV_LOG_WARNING
arg	73:41	74:34	5	"too many threads/slices %d,"" reducing to %d\n"
water	73:41	0:0	6	"too many threads/slices %d,"
water	74:15	0:0	6	" reducing to %d\n"
arg	74:36	74:45	5	nb_slices
water	74:36	0:0	6	nb_slices
arg	74:47	74:57	5	max_slices
water	74:47	0:0	6	max_slices
water	74:58	0:0	4	;
water	75:8	0:0	4	nb_slices
op	75:18	0:0	4	=
water	75:20	0:0	4	max_slices
water	75:30	0:0	4	;
water	76:4	0:0	4	}
water	77:4	0:0	2	h
op	77:5	0:0	2	->
water	77:7	0:0	2	slice_context_count
op	77:27	0:0	2	=
water	77:29	0:0	2	nb_slices
water	77:38	0:0	2	;
if	79:4	85:4	2	(! HAVE_THREADS || ! ( h -> avctx -> active_thread_type & FF_THREAD_SLICE ))
cond	79:8	79:73	3	! HAVE_THREADS || ! ( h -> avctx -> active_thread_type & FF_THREAD_SLICE )
op	79:8	0:0	4	!
water	79:9	0:0	4	HAVE_THREADS
op	79:22	0:0	4	||
op	79:25	0:0	4	!
water	79:26	0:0	4	(
water	79:27	0:0	4	h
op	79:28	0:0	4	->
water	79:30	0:0	4	avctx
op	79:35	0:0	4	->
water	79:37	0:0	4	active_thread_type
op	79:56	0:0	4	&
water	79:58	0:0	4	FF_THREAD_SLICE
water	79:73	0:0	4	)
stmts	79:76	85:4	3	
water	79:76	0:0	4	{
water	80:8	0:0	4	ret
op	80:12	0:0	4	=
call	80:14	80:60	4	ff_h264_slice_context_init
arg	80:41	80:42	5	h
water	80:41	0:0	6	h
arg	80:44	80:60	5	&h->slice_ctx[0]
op	80:44	0:0	6	&
water	80:45	0:0	6	h
op	80:46	0:0	6	->
water	80:48	0:0	6	slice_ctx
op	80:57	0:0	6	[
water	80:58	0:0	6	0
op	80:59	0:0	6	]
water	80:61	0:0	4	;
if	81:8	84:8	4	(ret < 0)
cond	81:12	81:18	5	ret < 0
water	81:12	0:0	6	ret
op	81:16	0:0	6	<
water	81:18	0:0	6	0
stmts	81:21	84:8	5	
water	81:21	0:0	6	{
call	82:12	82:69	6	av_log
arg	82:19	82:27	7	h->avctx
water	82:19	0:0	8	h
op	82:20	0:0	8	->
water	82:22	0:0	8	avctx
arg	82:29	82:41	7	AV_LOG_ERROR
water	82:29	0:0	8	AV_LOG_ERROR
arg	82:43	82:69	7	"context_init() failed.\n"
water	82:43	0:0	8	"context_init() failed.\n"
water	82:70	0:0	6	;
goto	83:12	83:21	6	fail
water	83:17	0:0	7	fail
water	84:8	0:0	6	}
water	85:4	0:0	4	}
else	85:6	99:4	2
stmts	85:11	99:4	3	
water	85:11	0:0	4	{
for	86:8	98:8	4	(i = 0 ;i < h -> slice_context_count;i ++)
forinit	86:13	86:18	5	i = 0 ;
water	86:13	0:0	6	i
op	86:15	0:0	6	=
water	86:17	0:0	6	0
water	86:18	0:0	6	;
cond	86:20	86:27	5	i < h -> slice_context_count
water	86:20	0:0	6	i
op	86:22	0:0	6	<
water	86:24	0:0	6	h
op	86:25	0:0	6	->
water	86:27	0:0	6	slice_context_count
forexpr	86:48	86:49	5	i ++
water	86:48	0:0	6	i
op	86:49	0:0	6	++
stmts	86:53	98:8	5	
water	86:53	0:0	6	{
decl	87:12	87:51	6	H264SliceContext	*sl
op	87:33	0:0	6	=
op	87:35	0:0	6	&
water	87:36	0:0	6	h
op	87:37	0:0	6	->
water	87:39	0:0	6	slice_ctx
op	87:48	0:0	6	[
water	87:49	0:0	6	i
op	87:50	0:0	6	]
water	89:12	0:0	6	sl
op	89:14	0:0	6	->
water	89:16	0:0	6	h264
op	89:35	0:0	6	=
water	89:37	0:0	6	h
water	89:38	0:0	6	;
water	90:12	0:0	6	sl
op	90:14	0:0	6	->
water	90:16	0:0	6	intra4x4_pred_mode
op	90:35	0:0	6	=
water	90:37	0:0	6	h
op	90:38	0:0	6	->
water	90:40	0:0	6	intra4x4_pred_mode
op	90:59	0:0	6	+
water	90:61	0:0	6	i
op	90:63	0:0	6	*
water	90:65	0:0	6	8
op	90:67	0:0	6	*
water	90:69	0:0	6	2
op	90:71	0:0	6	*
water	90:73	0:0	6	h
op	90:74	0:0	6	->
water	90:76	0:0	6	mb_stride
water	90:85	0:0	6	;
water	91:12	0:0	6	sl
op	91:14	0:0	6	->
water	91:16	0:0	6	mvd_table
op	91:25	0:0	6	[
water	91:26	0:0	6	0
op	91:27	0:0	6	]
op	91:35	0:0	6	=
water	91:37	0:0	6	h
op	91:38	0:0	6	->
water	91:40	0:0	6	mvd_table
op	91:49	0:0	6	[
water	91:50	0:0	6	0
op	91:51	0:0	6	]
op	91:59	0:0	6	+
water	91:61	0:0	6	i
op	91:63	0:0	6	*
water	91:65	0:0	6	8
op	91:67	0:0	6	*
water	91:69	0:0	6	2
op	91:71	0:0	6	*
water	91:73	0:0	6	h
op	91:74	0:0	6	->
water	91:76	0:0	6	mb_stride
water	91:85	0:0	6	;
water	92:12	0:0	6	sl
op	92:14	0:0	6	->
water	92:16	0:0	6	mvd_table
op	92:25	0:0	6	[
water	92:26	0:0	6	1
op	92:27	0:0	6	]
op	92:35	0:0	6	=
water	92:37	0:0	6	h
op	92:38	0:0	6	->
water	92:40	0:0	6	mvd_table
op	92:49	0:0	6	[
water	92:50	0:0	6	1
op	92:51	0:0	6	]
op	92:59	0:0	6	+
water	92:61	0:0	6	i
op	92:63	0:0	6	*
water	92:65	0:0	6	8
op	92:67	0:0	6	*
water	92:69	0:0	6	2
op	92:71	0:0	6	*
water	92:73	0:0	6	h
op	92:74	0:0	6	->
water	92:76	0:0	6	mb_stride
water	92:85	0:0	6	;
if	94:12	97:12	6	(( ret =ff_h264_slice_context_init (h ,sl ) ) < 0)
cond	94:16	94:60	7	( ret =ff_h264_slice_context_init (h ,sl ) ) < 0
water	94:16	0:0	8	(
water	94:17	0:0	8	ret
op	94:21	0:0	8	=
call	94:23	94:55	8	ff_h264_slice_context_init
arg	94:50	94:51	9	h
water	94:50	0:0	10	h
arg	94:53	94:55	9	sl
water	94:53	0:0	10	sl
water	94:56	0:0	8	)
op	94:58	0:0	8	<
water	94:60	0:0	8	0
stmts	94:63	97:12	7	
water	94:63	0:0	8	{
call	95:16	95:73	8	av_log
arg	95:23	95:31	9	h->avctx
water	95:23	0:0	10	h
op	95:24	0:0	10	->
water	95:26	0:0	10	avctx
arg	95:33	95:45	9	AV_LOG_ERROR
water	95:33	0:0	10	AV_LOG_ERROR
arg	95:47	95:73	9	"context_init() failed.\n"
water	95:47	0:0	10	"context_init() failed.\n"
water	95:74	0:0	8	;
goto	96:16	96:25	8	fail
water	96:21	0:0	9	fail
water	97:12	0:0	8	}
water	98:8	0:0	6	}
water	99:4	0:0	4	}
water	101:4	0:0	2	h
op	101:5	0:0	2	->
water	101:7	0:0	2	context_initialized
op	101:27	0:0	2	=
water	101:29	0:0	2	1
water	101:30	0:0	2	;
return	103:4	103:12	2	0
water	103:11	0:0	3	0
label	104:0	104:4	2	fail :
call	105:4	105:25	2	ff_h264_free_tables
arg	105:24	105:25	3	h
water	105:24	0:0	4	h
water	105:26	0:0	2	;
water	106:4	0:0	2	h
op	106:5	0:0	2	->
water	106:7	0:0	2	context_initialized
op	106:27	0:0	2	=
water	106:29	0:0	2	0
water	106:30	0:0	2	;
return	107:4	107:14	2	ret
water	107:11	0:0	3	ret
