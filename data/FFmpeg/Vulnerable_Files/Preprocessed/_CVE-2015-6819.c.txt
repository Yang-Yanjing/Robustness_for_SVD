func	2:0	364:0	0	int	ff_mjpeg_decode_frame
params	2:25	0:0	1	
param	2:26	2:47	2	AVCodecContext *	avctx
param	2:49	2:59	2	void *	data
param	2:61	2:75	2	int *	got_frame
param	3:26	3:41	2	AVPacket *	avpkt
stmnts	0:0	363:24	1	
decl	5:4	5:29	2	AVFrame	*frame
op	5:23	0:0	2	=
water	5:25	0:0	2	data
decl	6:4	6:36	2	const uint8_t	*buf
op	6:23	0:0	2	=
water	6:25	0:0	2	avpkt
op	6:30	0:0	2	->
water	6:32	0:0	2	data
decl	7:4	7:36	2	int	buf_size
op	7:23	0:0	2	=
water	7:25	0:0	2	avpkt
op	7:30	0:0	2	->
water	7:32	0:0	2	size
decl	8:4	8:44	2	MJpegDecodeContext	*s
op	8:26	0:0	2	=
water	8:28	0:0	2	avctx
op	8:33	0:0	2	->
water	8:35	0:0	2	priv_data
decl	9:4	9:36	2	const uint8_t	*buf_end
water	9:26	0:0	2	,
decl	9:4	9:36	2	const uint8_t	*buf_ptr
decl	10:4	10:36	2	const uint8_t	*unescaped_buf_ptr
decl	11:4	11:22	2	int	hshift
water	11:14	0:0	2	,
decl	11:4	11:22	2	int	vshift
decl	12:4	12:26	2	int	unescaped_buf_size
decl	13:4	13:18	2	int	start_code
decl	14:4	14:16	2	int	i
water	14:9	0:0	2	,
decl	14:4	14:16	2	int	index
decl	15:4	15:15	2	int	ret
op	15:12	0:0	2	=
water	15:14	0:0	2	0
decl	16:4	16:15	2	int	is16bit
call	18:4	18:34	2	av_dict_free
arg	18:17	18:34	3	&s->exif_metadata
op	18:17	0:0	4	&
water	18:18	0:0	4	s
op	18:19	0:0	4	->
water	18:21	0:0	4	exif_metadata
water	18:35	0:0	2	;
call	19:4	19:25	2	av_freep
arg	19:13	19:25	3	&s->stereo3d
op	19:13	0:0	4	&
water	19:14	0:0	4	s
op	19:15	0:0	4	->
water	19:17	0:0	4	stereo3d
water	19:26	0:0	2	;
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	adobe_transform
op	20:23	0:0	2	=
op	20:25	0:0	2	-
water	20:26	0:0	2	1
water	20:27	0:0	2	;
water	22:4	0:0	2	buf_ptr
op	22:12	0:0	2	=
water	22:14	0:0	2	buf
water	22:17	0:0	2	;
water	23:4	0:0	2	buf_end
op	23:12	0:0	2	=
water	23:14	0:0	2	buf
op	23:18	0:0	2	+
water	23:20	0:0	2	buf_size
water	23:28	0:0	2	;
while	24:4	184:4	2	(buf_ptr < buf_end)
cond	24:11	24:21	3	buf_ptr < buf_end
water	24:11	0:0	4	buf_ptr
op	24:19	0:0	4	<
water	24:21	0:0	4	buf_end
stmts	24:30	184:4	3	
water	24:30	0:0	4	{
water	26:8	0:0	4	start_code
op	26:19	0:0	4	=
call	26:21	28:61	4	ff_mjpeg_find_marker
arg	26:42	26:43	5	s
water	26:42	0:0	6	s
arg	26:45	26:53	5	&buf_ptr
op	26:45	0:0	6	&
water	26:46	0:0	6	buf_ptr
arg	26:55	26:62	5	buf_end
water	26:55	0:0	6	buf_end
arg	27:42	27:60	5	&unescaped_buf_ptr
op	27:42	0:0	6	&
water	27:43	0:0	6	unescaped_buf_ptr
arg	28:42	28:61	5	&unescaped_buf_size
op	28:42	0:0	6	&
water	28:43	0:0	6	unescaped_buf_size
water	28:62	0:0	4	;
if	30:8	32:8	4	(start_code < 0)
cond	30:12	30:25	5	start_code < 0
water	30:12	0:0	6	start_code
op	30:23	0:0	6	<
water	30:25	0:0	6	0
stmts	30:28	32:8	5	
water	30:28	0:0	6	{
break	31:12	31:17	6	
water	32:8	0:0	6	}
else	32:10	37:8	4
stmts	32:15	37:8	5	
if	32:15	37:8	6	(unescaped_buf_size > INT_MAX / 8)
cond	32:19	32:50	7	unescaped_buf_size > INT_MAX / 8
water	32:19	0:0	8	unescaped_buf_size
op	32:38	0:0	8	>
water	32:40	0:0	8	INT_MAX
op	32:48	0:0	8	/
water	32:50	0:0	8	8
stmts	32:53	37:8	7	
water	32:53	0:0	8	{
call	33:12	35:59	8	av_log
arg	33:19	33:24	9	avctx
water	33:19	0:0	10	avctx
arg	33:26	33:38	9	AV_LOG_ERROR
water	33:26	0:0	10	AV_LOG_ERROR
arg	34:19	34:71	9	"MJPEG packet 0x%x too big (%d/%d), corrupt data?\n"
water	34:19	0:0	10	"MJPEG packet 0x%x too big (%d/%d), corrupt data?\n"
arg	35:19	35:29	9	start_code
water	35:19	0:0	10	start_code
arg	35:31	35:49	9	unescaped_buf_size
water	35:31	0:0	10	unescaped_buf_size
arg	35:51	35:59	9	buf_size
water	35:51	0:0	10	buf_size
water	35:60	0:0	8	;
return	36:12	36:38	8	AVERROR_INVALIDDATA
water	36:19	0:0	9	AVERROR_INVALIDDATA
water	37:8	0:0	8	}
call	38:8	39:44	4	av_log
arg	38:15	38:20	5	avctx
water	38:15	0:0	6	avctx
arg	38:22	38:34	5	AV_LOG_DEBUG
water	38:22	0:0	6	AV_LOG_DEBUG
arg	38:36	38:88	5	"marker=%x avail_size_in_buf=%"PTRDIFF_SPECIFIER"\n"
water	38:36	0:0	6	"marker=%x avail_size_in_buf=%"
water	38:67	0:0	6	PTRDIFF_SPECIFIER
water	38:84	0:0	6	"\n"
arg	39:15	39:25	5	start_code
water	39:15	0:0	6	start_code
arg	39:27	39:44	5	buf_end-buf_ptr
water	39:27	0:0	6	buf_end
op	39:35	0:0	6	-
water	39:37	0:0	6	buf_ptr
water	39:45	0:0	4	;
water	41:8	0:0	4	ret
op	41:12	0:0	4	=
call	41:14	41:74	4	init_get_bits8
arg	41:29	41:35	5	&s->gb
op	41:29	0:0	6	&
water	41:30	0:0	6	s
op	41:31	0:0	6	->
water	41:33	0:0	6	gb
arg	41:37	41:54	5	unescaped_buf_ptr
water	41:37	0:0	6	unescaped_buf_ptr
arg	41:56	41:74	5	unescaped_buf_size
water	41:56	0:0	6	unescaped_buf_size
water	41:75	0:0	4	;
if	43:8	46:8	4	(ret < 0)
cond	43:12	43:18	5	ret < 0
water	43:12	0:0	6	ret
op	43:16	0:0	6	<
water	43:18	0:0	6	0
stmts	43:21	46:8	5	
water	43:21	0:0	6	{
call	44:12	44:58	6	av_log
arg	44:19	44:24	7	avctx
water	44:19	0:0	8	avctx
arg	44:26	44:38	7	AV_LOG_ERROR
water	44:26	0:0	8	AV_LOG_ERROR
arg	44:40	44:58	7	"invalid buffer\n"
water	44:40	0:0	8	"invalid buffer\n"
water	44:59	0:0	6	;
goto	45:12	45:21	6	fail
water	45:17	0:0	7	fail
water	46:8	0:0	6	}
water	48:8	0:0	4	s
op	48:9	0:0	4	->
water	48:11	0:0	4	start_code
op	48:22	0:0	4	=
water	48:24	0:0	4	start_code
water	48:34	0:0	4	;
if	49:8	50:70	4	(s -> avctx -> debug & FF_DEBUG_STARTCODE)
cond	49:12	49:30	5	s -> avctx -> debug & FF_DEBUG_STARTCODE
water	49:12	0:0	6	s
op	49:13	0:0	6	->
water	49:15	0:0	6	avctx
op	49:20	0:0	6	->
water	49:22	0:0	6	debug
op	49:28	0:0	6	&
water	49:30	0:0	6	FF_DEBUG_STARTCODE
stmts	50:12	50:70	5	
call	50:12	50:69	6	av_log
arg	50:19	50:24	7	avctx
water	50:19	0:0	8	avctx
arg	50:26	50:38	7	AV_LOG_DEBUG
water	50:26	0:0	8	AV_LOG_DEBUG
arg	50:40	50:57	7	"startcode: %X\n"
water	50:40	0:0	8	"startcode: %X\n"
arg	50:59	50:69	7	start_code
water	50:59	0:0	8	start_code
water	50:70	0:0	6	;
if	53:8	55:61	4	(start_code >= 0 xd0 && start_code <= 0 xd7)
cond	53:12	53:49	5	start_code >= 0 xd0 && start_code <= 0 xd7
water	53:12	0:0	6	start_code
op	53:23	0:0	6	>=
water	53:26	0:0	6	0
water	53:27	0:0	6	xd0
op	53:31	0:0	6	&&
water	53:34	0:0	6	start_code
op	53:45	0:0	6	<=
water	53:48	0:0	6	0
water	53:49	0:0	6	xd7
stmts	54:12	55:61	5	
call	54:12	55:60	6	av_log
arg	54:19	54:24	7	avctx
water	54:19	0:0	8	avctx
arg	54:26	54:38	7	AV_LOG_DEBUG
water	54:26	0:0	8	AV_LOG_DEBUG
arg	55:19	55:41	7	"restart marker: %d\n"
water	55:19	0:0	8	"restart marker: %d\n"
arg	55:43	55:60	7	start_code&0x0f
water	55:43	0:0	8	start_code
op	55:54	0:0	8	&
water	55:56	0:0	8	0
water	55:57	0:0	8	x0f
water	55:61	0:0	6	;
else	57:8	58:31	4
stmts	57:13	58:31	5	
if	57:13	58:31	6	(start_code >= APP0 && start_code <= APP15)
cond	57:17	57:53	7	start_code >= APP0 && start_code <= APP15
water	57:17	0:0	8	start_code
op	57:28	0:0	8	>=
water	57:31	0:0	8	APP0
op	57:36	0:0	8	&&
water	57:39	0:0	8	start_code
op	57:50	0:0	8	<=
water	57:53	0:0	8	APP15
stmts	58:12	58:31	7	
call	58:12	58:30	8	mjpeg_decode_app
arg	58:29	58:30	9	s
water	58:29	0:0	10	s
water	58:31	0:0	8	;
else	60:8	61:31	4
stmts	60:13	61:31	5	
if	60:13	61:31	6	(start_code == COM)
cond	60:17	60:31	7	start_code == COM
water	60:17	0:0	8	start_code
op	60:28	0:0	8	==
water	60:31	0:0	8	COM
stmts	61:12	61:31	7	
call	61:12	61:30	8	mjpeg_decode_com
arg	61:29	61:30	9	s
water	61:29	0:0	10	s
water	61:31	0:0	8	;
water	63:8	0:0	4	ret
op	63:12	0:0	4	=
op	63:14	0:0	4	-
water	63:15	0:0	4	1
water	63:16	0:0	4	;
if	65:8	69:8	4	(! CONFIG_JPEGLS_DECODER && ( start_code == SOF48 || start_code == LSE ))
cond	65:12	66:53	5	! CONFIG_JPEGLS_DECODER && ( start_code == SOF48 || start_code == LSE )
op	65:12	0:0	6	!
water	65:13	0:0	6	CONFIG_JPEGLS_DECODER
op	65:35	0:0	6	&&
water	66:12	0:0	6	(
water	66:13	0:0	6	start_code
op	66:24	0:0	6	==
water	66:27	0:0	6	SOF48
op	66:33	0:0	6	||
water	66:36	0:0	6	start_code
op	66:47	0:0	6	==
water	66:50	0:0	6	LSE
water	66:53	0:0	6	)
stmts	66:56	69:8	5	
water	66:56	0:0	6	{
call	67:12	67:72	6	av_log
arg	67:19	67:24	7	avctx
water	67:19	0:0	8	avctx
arg	67:26	67:38	7	AV_LOG_ERROR
water	67:26	0:0	8	AV_LOG_ERROR
arg	67:40	67:72	7	"JPEG-LS support not enabled.\n"
water	67:40	0:0	8	"JPEG-LS support not enabled.\n"
water	67:73	0:0	6	;
return	68:12	68:34	6	AVERROR(ENOSYS)
call	68:19	68:33	7	AVERROR
arg	68:27	68:33	8	ENOSYS
water	68:27	0:0	9	ENOSYS
water	69:8	0:0	6	}
switch	71:8	177:8	4	(start_code)
cond	71:16	71:16	5	start_code
water	71:16	0:0	6	start_code
stmts	71:28	177:8	5	
water	71:28	0:0	6	{
label	72:8	72:16	6	case SOI :
water	73:12	0:0	6	s
op	73:13	0:0	6	->
water	73:15	0:0	6	restart_interval
op	73:32	0:0	6	=
water	73:34	0:0	6	0
water	73:35	0:0	6	;
water	74:12	0:0	6	s
op	74:13	0:0	6	->
water	74:15	0:0	6	restart_count
op	74:32	0:0	6	=
water	74:34	0:0	6	0
water	74:35	0:0	6	;
break	76:12	76:17	6	
label	77:8	77:16	6	case DQT :
call	78:12	78:33	6	ff_mjpeg_decode_dqt
arg	78:32	78:33	7	s
water	78:32	0:0	8	s
water	78:34	0:0	6	;
break	79:12	79:17	6	
label	80:8	80:16	6	case DHT :
if	81:12	84:12	6	(( ret =ff_mjpeg_decode_dht (s ) ) < 0)
cond	81:16	81:49	7	( ret =ff_mjpeg_decode_dht (s ) ) < 0
water	81:16	0:0	8	(
water	81:17	0:0	8	ret
op	81:21	0:0	8	=
call	81:23	81:44	8	ff_mjpeg_decode_dht
arg	81:43	81:44	9	s
water	81:43	0:0	10	s
water	81:45	0:0	8	)
op	81:47	0:0	8	<
water	81:49	0:0	8	0
stmts	81:52	84:12	7	
water	81:52	0:0	8	{
call	82:16	82:74	8	av_log
arg	82:23	82:28	9	avctx
water	82:23	0:0	10	avctx
arg	82:30	82:42	9	AV_LOG_ERROR
water	82:30	0:0	10	AV_LOG_ERROR
arg	82:44	82:74	9	"huffman table decode error\n"
water	82:44	0:0	10	"huffman table decode error\n"
water	82:75	0:0	8	;
goto	83:16	83:25	8	fail
water	83:21	0:0	9	fail
water	84:12	0:0	8	}
break	85:12	85:17	6	
label	86:8	86:17	6	case SOF0 :
label	87:8	87:17	6	case SOF1 :
water	88:12	0:0	6	s
op	88:13	0:0	6	->
water	88:15	0:0	6	lossless
op	88:27	0:0	6	=
water	88:29	0:0	6	0
water	88:30	0:0	6	;
water	89:12	0:0	6	s
op	89:13	0:0	6	->
water	89:15	0:0	6	ls
op	89:27	0:0	6	=
water	89:29	0:0	6	0
water	89:30	0:0	6	;
water	90:12	0:0	6	s
op	90:13	0:0	6	->
water	90:15	0:0	6	progressive
op	90:27	0:0	6	=
water	90:29	0:0	6	0
water	90:30	0:0	6	;
if	91:12	92:25	6	(( ret =ff_mjpeg_decode_sof (s ) ) < 0)
cond	91:16	91:49	7	( ret =ff_mjpeg_decode_sof (s ) ) < 0
water	91:16	0:0	8	(
water	91:17	0:0	8	ret
op	91:21	0:0	8	=
call	91:23	91:44	8	ff_mjpeg_decode_sof
arg	91:43	91:44	9	s
water	91:43	0:0	10	s
water	91:45	0:0	8	)
op	91:47	0:0	8	<
water	91:49	0:0	8	0
stmts	92:16	92:25	7	
goto	92:16	92:25	8	fail
water	92:21	0:0	9	fail
break	93:12	93:17	6	
label	94:8	94:17	6	case SOF2 :
water	95:12	0:0	6	s
op	95:13	0:0	6	->
water	95:15	0:0	6	lossless
op	95:27	0:0	6	=
water	95:29	0:0	6	0
water	95:30	0:0	6	;
water	96:12	0:0	6	s
op	96:13	0:0	6	->
water	96:15	0:0	6	ls
op	96:27	0:0	6	=
water	96:29	0:0	6	0
water	96:30	0:0	6	;
water	97:12	0:0	6	s
op	97:13	0:0	6	->
water	97:15	0:0	6	progressive
op	97:27	0:0	6	=
water	97:29	0:0	6	1
water	97:30	0:0	6	;
if	98:12	99:25	6	(( ret =ff_mjpeg_decode_sof (s ) ) < 0)
cond	98:16	98:49	7	( ret =ff_mjpeg_decode_sof (s ) ) < 0
water	98:16	0:0	8	(
water	98:17	0:0	8	ret
op	98:21	0:0	8	=
call	98:23	98:44	8	ff_mjpeg_decode_sof
arg	98:43	98:44	9	s
water	98:43	0:0	10	s
water	98:45	0:0	8	)
op	98:47	0:0	8	<
water	98:49	0:0	8	0
stmts	99:16	99:25	7	
goto	99:16	99:25	8	fail
water	99:21	0:0	9	fail
break	100:12	100:17	6	
label	101:8	101:17	6	case SOF3 :
water	102:12	0:0	6	s
op	102:13	0:0	6	->
water	102:15	0:0	6	lossless
op	102:27	0:0	6	=
water	102:29	0:0	6	1
water	102:30	0:0	6	;
water	103:12	0:0	6	s
op	103:13	0:0	6	->
water	103:15	0:0	6	ls
op	103:27	0:0	6	=
water	103:29	0:0	6	0
water	103:30	0:0	6	;
water	104:12	0:0	6	s
op	104:13	0:0	6	->
water	104:15	0:0	6	progressive
op	104:27	0:0	6	=
water	104:29	0:0	6	0
water	104:30	0:0	6	;
if	105:12	106:25	6	(( ret =ff_mjpeg_decode_sof (s ) ) < 0)
cond	105:16	105:49	7	( ret =ff_mjpeg_decode_sof (s ) ) < 0
water	105:16	0:0	8	(
water	105:17	0:0	8	ret
op	105:21	0:0	8	=
call	105:23	105:44	8	ff_mjpeg_decode_sof
arg	105:43	105:44	9	s
water	105:43	0:0	10	s
water	105:45	0:0	8	)
op	105:47	0:0	8	<
water	105:49	0:0	8	0
stmts	106:16	106:25	7	
goto	106:16	106:25	8	fail
water	106:21	0:0	9	fail
break	107:12	107:17	6	
label	108:8	108:18	6	case SOF48 :
water	109:12	0:0	6	s
op	109:13	0:0	6	->
water	109:15	0:0	6	lossless
op	109:27	0:0	6	=
water	109:29	0:0	6	1
water	109:30	0:0	6	;
water	110:12	0:0	6	s
op	110:13	0:0	6	->
water	110:15	0:0	6	ls
op	110:27	0:0	6	=
water	110:29	0:0	6	1
water	110:30	0:0	6	;
water	111:12	0:0	6	s
op	111:13	0:0	6	->
water	111:15	0:0	6	progressive
op	111:27	0:0	6	=
water	111:29	0:0	6	0
water	111:30	0:0	6	;
if	112:12	113:25	6	(( ret =ff_mjpeg_decode_sof (s ) ) < 0)
cond	112:16	112:49	7	( ret =ff_mjpeg_decode_sof (s ) ) < 0
water	112:16	0:0	8	(
water	112:17	0:0	8	ret
op	112:21	0:0	8	=
call	112:23	112:44	8	ff_mjpeg_decode_sof
arg	112:43	112:44	9	s
water	112:43	0:0	10	s
water	112:45	0:0	8	)
op	112:47	0:0	8	<
water	112:49	0:0	8	0
stmts	113:16	113:25	7	
goto	113:16	113:25	8	fail
water	113:21	0:0	9	fail
break	114:12	114:17	6	
label	115:8	115:16	6	case LSE :
if	116:12	118:25	6	(! CONFIG_JPEGLS_DECODER || ( ret =ff_jpegls_decode_lse (s ) ) < 0)
cond	116:16	117:50	7	! CONFIG_JPEGLS_DECODER || ( ret =ff_jpegls_decode_lse (s ) ) < 0
op	116:16	0:0	8	!
water	116:17	0:0	8	CONFIG_JPEGLS_DECODER
op	116:39	0:0	8	||
water	117:16	0:0	8	(
water	117:17	0:0	8	ret
op	117:21	0:0	8	=
call	117:23	117:45	8	ff_jpegls_decode_lse
arg	117:44	117:45	9	s
water	117:44	0:0	10	s
water	117:46	0:0	8	)
op	117:48	0:0	8	<
water	117:50	0:0	8	0
stmts	118:16	118:25	7	
goto	118:16	118:25	8	fail
water	118:21	0:0	9	fail
break	119:12	119:17	6	
label	120:8	120:16	6	case EOI :
label	121:0	121:10	6	eoi_parser :
water	122:12	0:0	6	s
op	122:13	0:0	6	->
water	122:15	0:0	6	cur_scan
op	122:24	0:0	6	=
water	122:26	0:0	6	0
water	122:27	0:0	6	;
if	123:12	127:12	6	(! s -> got_picture)
cond	123:16	123:20	7	! s -> got_picture
op	123:16	0:0	8	!
water	123:17	0:0	8	s
op	123:18	0:0	8	->
water	123:20	0:0	8	got_picture
stmts	123:33	127:12	7	
water	123:33	0:0	8	{
call	124:16	125:61	8	av_log
arg	124:23	124:28	9	avctx
water	124:23	0:0	10	avctx
arg	124:30	124:44	9	AV_LOG_WARNING
water	124:30	0:0	10	AV_LOG_WARNING
arg	125:23	125:61	9	"Found EOI before any SOF, ignoring\n"
water	125:23	0:0	10	"Found EOI before any SOF, ignoring\n"
water	125:62	0:0	8	;
break	126:16	126:21	8	
water	127:12	0:0	8	}
if	128:12	133:12	6	(s -> interlaced)
cond	128:16	128:19	7	s -> interlaced
water	128:16	0:0	8	s
op	128:17	0:0	8	->
water	128:19	0:0	8	interlaced
stmts	128:31	133:12	7	
water	128:31	0:0	8	{
water	129:16	0:0	8	s
op	129:17	0:0	8	->
water	129:19	0:0	8	bottom_field
op	129:32	0:0	8	^=
water	129:35	0:0	8	1
water	129:36	0:0	8	;
if	131:16	132:25	8	(s -> bottom_field == ! s -> interlace_polarity)
cond	131:20	131:43	9	s -> bottom_field == ! s -> interlace_polarity
water	131:20	0:0	10	s
op	131:21	0:0	10	->
water	131:23	0:0	10	bottom_field
op	131:36	0:0	10	==
op	131:39	0:0	10	!
water	131:40	0:0	10	s
op	131:41	0:0	10	->
water	131:43	0:0	10	interlace_polarity
stmts	132:20	132:25	9	
break	132:20	132:25	10	
water	133:12	0:0	8	}
if	134:12	135:26	6	(( ret =av_frame_ref (frame ,s -> picture_ptr ) ) < 0)
cond	134:16	134:62	7	( ret =av_frame_ref (frame ,s -> picture_ptr ) ) < 0
water	134:16	0:0	8	(
water	134:17	0:0	8	ret
op	134:21	0:0	8	=
call	134:23	134:57	8	av_frame_ref
arg	134:36	134:41	9	frame
water	134:36	0:0	10	frame
arg	134:43	134:57	9	s->picture_ptr
water	134:43	0:0	10	s
op	134:44	0:0	10	->
water	134:46	0:0	10	picture_ptr
water	134:58	0:0	8	)
op	134:60	0:0	8	<
water	134:62	0:0	8	0
stmts	135:16	135:26	7	
return	135:16	135:26	8	ret
water	135:23	0:0	9	ret
op	136:12	0:0	6	*
water	136:13	0:0	6	got_frame
op	136:23	0:0	6	=
water	136:25	0:0	6	1
water	136:26	0:0	6	;
water	137:12	0:0	6	s
op	137:13	0:0	6	->
water	137:15	0:0	6	got_picture
op	137:27	0:0	6	=
water	137:29	0:0	6	0
water	137:30	0:0	6	;
if	139:12	152:12	6	(! s -> lossless)
cond	139:16	139:20	7	! s -> lossless
op	139:16	0:0	8	!
water	139:17	0:0	8	s
op	139:18	0:0	8	->
water	139:20	0:0	8	lossless
stmts	139:30	152:12	7	
water	139:30	0:0	8	{
decl	140:16	142:45	8	int	qp
op	140:23	0:0	8	=
call	140:25	142:44	9	FFMAX3
arg	140:32	140:44	10	s->qscale[0]
water	140:32	0:0	11	s
op	140:33	0:0	11	->
water	140:35	0:0	11	qscale
op	140:41	0:0	11	[
water	140:42	0:0	11	0
op	140:43	0:0	11	]
arg	141:32	141:44	10	s->qscale[1]
water	141:32	0:0	11	s
op	141:33	0:0	11	->
water	141:35	0:0	11	qscale
op	141:41	0:0	11	[
water	141:42	0:0	11	1
op	141:43	0:0	11	]
arg	142:32	142:44	10	s->qscale[2]
water	142:32	0:0	11	s
op	142:33	0:0	11	->
water	142:35	0:0	11	qscale
op	142:41	0:0	11	[
water	142:42	0:0	11	2
op	142:43	0:0	11	]
decl	143:16	143:46	8	int	qpw
op	143:24	0:0	8	=
water	143:26	0:0	8	(
water	143:27	0:0	8	s
op	143:28	0:0	8	->
water	143:30	0:0	8	width
op	143:36	0:0	8	+
water	143:38	0:0	8	15
water	143:40	0:0	8	)
op	143:42	0:0	8	/
water	143:44	0:0	8	16
decl	144:16	144:64	8	AVBufferRef	*qp_table_buf
op	144:42	0:0	8	=
call	144:44	144:63	9	av_buffer_alloc
arg	144:60	144:63	10	qpw
water	144:60	0:0	11	qpw
if	145:16	148:16	8	(qp_table_buf)
cond	145:20	145:20	9	qp_table_buf
water	145:20	0:0	10	qp_table_buf
stmts	145:34	148:16	9	
water	145:34	0:0	10	{
call	146:20	146:54	10	memset
arg	146:27	146:45	11	qp_table_buf->data
water	146:27	0:0	12	qp_table_buf
op	146:39	0:0	12	->
water	146:41	0:0	12	data
arg	146:47	146:49	11	qp
water	146:47	0:0	12	qp
arg	146:51	146:54	11	qpw
water	146:51	0:0	12	qpw
water	146:55	0:0	10	;
call	147:20	147:85	10	av_frame_set_qp_table
arg	147:42	147:46	11	data
water	147:42	0:0	12	data
arg	147:48	147:60	11	qp_table_buf
water	147:48	0:0	12	qp_table_buf
arg	147:62	147:63	11	0
water	147:62	0:0	12	0
arg	147:65	147:85	11	FF_QSCALE_TYPE_MPEG1
water	147:65	0:0	12	FF_QSCALE_TYPE_MPEG1
water	147:86	0:0	10	;
water	148:16	0:0	10	}
if	150:16	151:63	8	(avctx -> debug & FF_DEBUG_QP)
cond	150:19	150:34	9	avctx -> debug & FF_DEBUG_QP
water	150:19	0:0	10	avctx
op	150:24	0:0	10	->
water	150:26	0:0	10	debug
op	150:32	0:0	10	&
water	150:34	0:0	10	FF_DEBUG_QP
stmts	151:20	151:63	9	
call	151:20	151:62	10	av_log
arg	151:27	151:32	11	avctx
water	151:27	0:0	12	avctx
arg	151:34	151:46	11	AV_LOG_DEBUG
water	151:34	0:0	12	AV_LOG_DEBUG
arg	151:48	151:58	11	"QP: %d\n"
water	151:48	0:0	12	"QP: %d\n"
arg	151:60	151:62	11	qp
water	151:60	0:0	12	qp
water	151:63	0:0	10	;
water	152:12	0:0	8	}
goto	154:12	154:24	6	the_end
water	154:17	0:0	7	the_end
label	155:8	155:16	6	case SOS :
water	156:12	0:0	6	s
op	156:13	0:0	6	->
water	156:15	0:0	6	cur_scan
op	156:23	0:0	6	++
water	156:25	0:0	6	;
if	157:12	159:25	6	(( ret =ff_mjpeg_decode_sos (s ,NULL ,0 ,NULL ) ) < 0 && ( avctx -> err_recognition & AV_EF_EXPLODE ))
cond	157:16	158:55	7	( ret =ff_mjpeg_decode_sos (s ,NULL ,0 ,NULL ) ) < 0 && ( avctx -> err_recognition & AV_EF_EXPLODE )
water	157:16	0:0	8	(
water	157:17	0:0	8	ret
op	157:21	0:0	8	=
call	157:23	157:59	8	ff_mjpeg_decode_sos
arg	157:43	157:44	9	s
water	157:43	0:0	10	s
arg	157:46	157:50	9	NULL
water	157:46	0:0	10	NULL
arg	157:52	157:53	9	0
water	157:52	0:0	10	0
arg	157:55	157:59	9	NULL
water	157:55	0:0	10	NULL
water	157:60	0:0	8	)
op	157:62	0:0	8	<
water	157:64	0:0	8	0
op	157:66	0:0	8	&&
water	158:16	0:0	8	(
water	158:17	0:0	8	avctx
op	158:22	0:0	8	->
water	158:24	0:0	8	err_recognition
op	158:40	0:0	8	&
water	158:42	0:0	8	AV_EF_EXPLODE
water	158:55	0:0	8	)
stmts	159:16	159:25	7	
goto	159:16	159:25	8	fail
water	159:21	0:0	9	fail
break	160:12	160:17	6	
label	161:8	161:16	6	case DRI :
call	162:12	162:30	6	mjpeg_decode_dri
arg	162:29	162:30	7	s
water	162:29	0:0	8	s
water	162:31	0:0	6	;
break	163:12	163:17	6	
label	164:8	164:17	6	case SOF5 :
label	165:8	165:17	6	case SOF6 :
label	166:8	166:17	6	case SOF7 :
label	167:8	167:17	6	case SOF9 :
label	168:8	168:18	6	case SOF10 :
label	169:8	169:18	6	case SOF11 :
label	170:8	170:18	6	case SOF13 :
label	171:8	171:18	6	case SOF14 :
label	172:8	172:18	6	case SOF15 :
label	173:8	173:16	6	case JPG :
call	174:12	175:70	6	av_log
arg	174:19	174:24	7	avctx
water	174:19	0:0	8	avctx
arg	174:26	174:38	7	AV_LOG_ERROR
water	174:26	0:0	8	AV_LOG_ERROR
arg	175:19	175:58	7	"mjpeg: unsupported coding type (%x)\n"
water	175:19	0:0	8	"mjpeg: unsupported coding type (%x)\n"
arg	175:60	175:70	7	start_code
water	175:60	0:0	8	start_code
water	175:71	0:0	6	;
break	176:12	176:17	6	
water	177:8	0:0	6	}
water	180:8	0:0	4	buf_ptr
op	180:16	0:0	4	+=
water	180:19	0:0	4	(
call	180:20	180:41	4	get_bits_count
arg	180:35	180:41	5	&s->gb
op	180:35	0:0	6	&
water	180:36	0:0	6	s
op	180:37	0:0	6	->
water	180:39	0:0	6	gb
op	180:43	0:0	4	+
water	180:45	0:0	4	7
water	180:46	0:0	4	)
op	180:48	0:0	4	/
water	180:50	0:0	4	8
water	180:51	0:0	4	;
call	181:8	183:71	4	av_log
arg	181:15	181:20	5	avctx
water	181:15	0:0	6	avctx
arg	181:22	181:34	5	AV_LOG_DEBUG
water	181:22	0:0	6	AV_LOG_DEBUG
arg	182:15	182:56	5	"marker parser used %d bytes (%d bits)\n"
water	182:15	0:0	6	"marker parser used %d bytes (%d bits)\n"
arg	183:15	183:47	5	(get_bits_count(&s->gb)+7)/8
water	183:15	0:0	6	(
call	183:16	183:37	6	get_bits_count
arg	183:31	183:37	7	&s->gb
op	183:31	0:0	8	&
water	183:32	0:0	8	s
op	183:33	0:0	8	->
water	183:35	0:0	8	gb
op	183:39	0:0	6	+
water	183:41	0:0	6	7
water	183:42	0:0	6	)
op	183:44	0:0	6	/
water	183:46	0:0	6	8
arg	183:49	183:71	5	get_bits_count(&s->gb)
call	183:49	183:70	6	get_bits_count
arg	183:64	183:70	7	&s->gb
op	183:64	0:0	8	&
water	183:65	0:0	8	s
op	183:66	0:0	8	->
water	183:68	0:0	8	gb
water	183:72	0:0	4	;
water	184:4	0:0	4	}
if	185:4	188:4	2	(s -> got_picture && s -> cur_scan)
cond	185:8	185:29	3	s -> got_picture && s -> cur_scan
water	185:8	0:0	4	s
op	185:9	0:0	4	->
water	185:11	0:0	4	got_picture
op	185:23	0:0	4	&&
water	185:26	0:0	4	s
op	185:27	0:0	4	->
water	185:29	0:0	4	cur_scan
stmts	185:39	188:4	3	
water	185:39	0:0	4	{
call	186:8	186:64	4	av_log
arg	186:15	186:20	5	avctx
water	186:15	0:0	6	avctx
arg	186:22	186:36	5	AV_LOG_WARNING
water	186:22	0:0	6	AV_LOG_WARNING
arg	186:38	186:64	5	"EOI missing, emulating\n"
water	186:38	0:0	6	"EOI missing, emulating\n"
water	186:65	0:0	4	;
goto	187:8	187:23	4	eoi_parser
water	187:13	0:0	5	eoi_parser
water	188:4	0:0	4	}
call	189:4	189:63	2	av_log
arg	189:11	189:16	3	avctx
water	189:11	0:0	4	avctx
arg	189:18	189:30	3	AV_LOG_FATAL
water	189:18	0:0	4	AV_LOG_FATAL
arg	189:32	189:63	3	"No JPEG data found in image\n"
water	189:32	0:0	4	"No JPEG data found in image\n"
water	189:64	0:0	2	;
return	190:4	190:30	2	AVERROR_INVALIDDATA
water	190:11	0:0	3	AVERROR_INVALIDDATA
label	191:0	191:4	2	fail :
water	192:4	0:0	2	s
op	192:5	0:0	2	->
water	192:7	0:0	2	got_picture
op	192:19	0:0	2	=
water	192:21	0:0	2	0
water	192:22	0:0	2	;
return	193:4	193:14	2	ret
water	193:11	0:0	3	ret
label	194:0	194:7	2	the_end :
water	196:4	0:0	2	is16bit
op	196:12	0:0	2	=
call	196:14	196:51	2	av_pix_fmt_desc_get
arg	196:34	196:51	3	s->avctx->pix_fmt
water	196:34	0:0	4	s
op	196:35	0:0	4	->
water	196:37	0:0	4	avctx
op	196:42	0:0	4	->
water	196:44	0:0	4	pix_fmt
op	196:52	0:0	2	->
water	196:54	0:0	2	comp
op	196:58	0:0	2	[
water	196:59	0:0	2	0
op	196:60	0:0	2	]
op	196:61	0:0	2	.
water	196:62	0:0	2	step_minus1
water	196:73	0:0	2	;
if	198:4	239:4	2	(s -> upscale_h)
cond	198:8	198:11	3	s -> upscale_h
water	198:8	0:0	4	s
op	198:9	0:0	4	->
water	198:11	0:0	4	upscale_h
stmts	198:22	239:4	3	
water	198:22	0:0	4	{
decl	199:8	199:13	4	int	p
call	200:8	212:18	4	av_assert0
arg	200:19	212:18	5	avctx->pix_fmt==AV_PIX_FMT_YUVJ444P||avctx->pix_fmt==AV_PIX_FMT_YUV444P||avctx->pix_fmt==AV_PIX_FMT_YUVJ440P||avctx->pix_fmt==AV_PIX_FMT_YUV440P||avctx->pix_fmt==AV_PIX_FMT_YUVA444P||avctx->pix_fmt==AV_PIX_FMT_YUVJ420P||avctx->pix_fmt==AV_PIX_FMT_YUV420P||avctx->pix_fmt==AV_PIX_FMT_YUV420P16||avctx->pix_fmt==AV_PIX_FMT_YUVA420P||avctx->pix_fmt==AV_PIX_FMT_YUVA420P16||avctx->pix_fmt==AV_PIX_FMT_GBRP||avctx->pix_fmt==AV_PIX_FMT_GBRAP
water	200:19	0:0	6	avctx
op	200:24	0:0	6	->
water	200:26	0:0	6	pix_fmt
op	200:34	0:0	6	==
water	200:37	0:0	6	AV_PIX_FMT_YUVJ444P
op	200:57	0:0	6	||
water	201:19	0:0	6	avctx
op	201:24	0:0	6	->
water	201:26	0:0	6	pix_fmt
op	201:34	0:0	6	==
water	201:37	0:0	6	AV_PIX_FMT_YUV444P
op	201:57	0:0	6	||
water	202:19	0:0	6	avctx
op	202:24	0:0	6	->
water	202:26	0:0	6	pix_fmt
op	202:34	0:0	6	==
water	202:37	0:0	6	AV_PIX_FMT_YUVJ440P
op	202:57	0:0	6	||
water	203:19	0:0	6	avctx
op	203:24	0:0	6	->
water	203:26	0:0	6	pix_fmt
op	203:34	0:0	6	==
water	203:37	0:0	6	AV_PIX_FMT_YUV440P
op	203:57	0:0	6	||
water	204:19	0:0	6	avctx
op	204:24	0:0	6	->
water	204:26	0:0	6	pix_fmt
op	204:34	0:0	6	==
water	204:37	0:0	6	AV_PIX_FMT_YUVA444P
op	204:57	0:0	6	||
water	205:19	0:0	6	avctx
op	205:24	0:0	6	->
water	205:26	0:0	6	pix_fmt
op	205:34	0:0	6	==
water	205:37	0:0	6	AV_PIX_FMT_YUVJ420P
op	205:57	0:0	6	||
water	206:19	0:0	6	avctx
op	206:24	0:0	6	->
water	206:26	0:0	6	pix_fmt
op	206:34	0:0	6	==
water	206:37	0:0	6	AV_PIX_FMT_YUV420P
op	206:57	0:0	6	||
water	207:19	0:0	6	avctx
op	207:24	0:0	6	->
water	207:26	0:0	6	pix_fmt
op	207:34	0:0	6	==
water	207:37	0:0	6	AV_PIX_FMT_YUV420P16
op	207:57	0:0	6	||
water	208:19	0:0	6	avctx
op	208:24	0:0	6	->
water	208:26	0:0	6	pix_fmt
op	208:34	0:0	6	==
water	208:37	0:0	6	AV_PIX_FMT_YUVA420P
op	208:58	0:0	6	||
water	209:19	0:0	6	avctx
op	209:24	0:0	6	->
water	209:26	0:0	6	pix_fmt
op	209:34	0:0	6	==
water	209:37	0:0	6	AV_PIX_FMT_YUVA420P16
op	209:58	0:0	6	||
water	210:19	0:0	6	avctx
op	210:24	0:0	6	->
water	210:26	0:0	6	pix_fmt
op	210:34	0:0	6	==
water	210:37	0:0	6	AV_PIX_FMT_GBRP
op	210:57	0:0	6	||
water	211:19	0:0	6	avctx
op	211:24	0:0	6	->
water	211:26	0:0	6	pix_fmt
op	211:34	0:0	6	==
water	211:37	0:0	6	AV_PIX_FMT_GBRAP
water	212:19	0:0	4	;
call	213:8	213:73	4	avcodec_get_chroma_sub_sample
arg	213:38	213:55	5	s->avctx->pix_fmt
water	213:38	0:0	6	s
op	213:39	0:0	6	->
water	213:41	0:0	6	avctx
op	213:46	0:0	6	->
water	213:48	0:0	6	pix_fmt
arg	213:57	213:64	5	&hshift
op	213:57	0:0	6	&
water	213:58	0:0	6	hshift
arg	213:66	213:73	5	&vshift
op	213:66	0:0	6	&
water	213:67	0:0	6	vshift
water	213:74	0:0	4	;
for	214:8	238:8	4	(p = 0 ;p < 4;p ++)
forinit	214:13	214:18	5	p = 0 ;
water	214:13	0:0	6	p
op	214:15	0:0	6	=
water	214:17	0:0	6	0
water	214:18	0:0	6	;
cond	214:20	214:22	5	p < 4
water	214:20	0:0	6	p
op	214:21	0:0	6	<
water	214:22	0:0	6	4
forexpr	214:25	214:26	5	p ++
water	214:25	0:0	6	p
op	214:26	0:0	6	++
stmts	214:30	238:8	5	
water	214:30	0:0	6	{
decl	215:12	215:51	6	uint8_t	*line
op	215:26	0:0	6	=
water	215:28	0:0	6	s
op	215:29	0:0	6	->
water	215:31	0:0	6	picture_ptr
op	215:42	0:0	6	->
water	215:44	0:0	6	data
op	215:48	0:0	6	[
water	215:49	0:0	6	p
op	215:50	0:0	6	]
decl	216:12	216:28	6	int	w
op	216:18	0:0	6	=
water	216:20	0:0	6	s
op	216:21	0:0	6	->
water	216:23	0:0	6	width
decl	217:12	217:29	6	int	h
op	217:18	0:0	6	=
water	217:20	0:0	6	s
op	217:21	0:0	6	->
water	217:23	0:0	6	height
if	218:12	219:24	6	(! ( s -> upscale_h & ( 1 << p ) ))
cond	218:16	218:39	7	! ( s -> upscale_h & ( 1 << p ) )
op	218:16	0:0	8	!
water	218:17	0:0	8	(
water	218:18	0:0	8	s
op	218:19	0:0	8	->
water	218:21	0:0	8	upscale_h
op	218:31	0:0	8	&
water	218:33	0:0	8	(
water	218:34	0:0	8	1
op	218:35	0:0	8	<<
water	218:37	0:0	8	p
water	218:38	0:0	8	)
water	218:39	0:0	8	)
stmts	219:16	219:24	7	
continue	219:16	219:24	8	
if	220:12	223:12	6	(p == 1 || p == 2)
cond	220:16	220:27	7	p == 1 || p == 2
water	220:16	0:0	8	p
op	220:17	0:0	8	==
water	220:19	0:0	8	1
op	220:21	0:0	8	||
water	220:24	0:0	8	p
op	220:25	0:0	8	==
water	220:27	0:0	8	2
stmts	220:30	223:12	7	
water	220:30	0:0	8	{
water	221:16	0:0	8	w
op	221:18	0:0	8	=
call	221:20	221:44	8	FF_CEIL_RSHIFT
arg	221:35	221:36	9	w
water	221:35	0:0	10	w
arg	221:38	221:44	9	hshift
water	221:38	0:0	10	hshift
water	221:45	0:0	8	;
water	222:16	0:0	8	h
op	222:18	0:0	8	=
call	222:20	222:44	8	FF_CEIL_RSHIFT
arg	222:35	222:36	9	h
water	222:35	0:0	10	h
arg	222:38	222:44	9	vshift
water	222:38	0:0	10	vshift
water	222:45	0:0	8	;
water	223:12	0:0	8	}
if	224:12	225:28	6	(s -> upscale_v & ( 1 << p ))
cond	224:16	224:36	7	s -> upscale_v & ( 1 << p )
water	224:16	0:0	8	s
op	224:17	0:0	8	->
water	224:19	0:0	8	upscale_v
op	224:29	0:0	8	&
water	224:31	0:0	8	(
water	224:32	0:0	8	1
op	224:33	0:0	8	<<
water	224:35	0:0	8	p
water	224:36	0:0	8	)
stmts	225:16	225:28	7	
water	225:16	0:0	8	h
op	225:18	0:0	8	=
water	225:20	0:0	8	(
water	225:21	0:0	8	h
op	225:22	0:0	8	+
water	225:23	0:0	8	1
water	225:24	0:0	8	)
op	225:25	0:0	8	>>
water	225:27	0:0	8	1
water	225:28	0:0	8	;
call	226:12	226:28	6	av_assert0
arg	226:23	226:28	7	w>0
water	226:23	0:0	8	w
op	226:25	0:0	8	>
water	226:27	0:0	8	0
water	226:29	0:0	6	;
for	227:12	237:12	6	(i = 0 ;i < h;i ++)
forinit	227:17	227:22	7	i = 0 ;
water	227:17	0:0	8	i
op	227:19	0:0	8	=
water	227:21	0:0	8	0
water	227:22	0:0	8	;
cond	227:24	227:28	7	i < h
water	227:24	0:0	8	i
op	227:26	0:0	8	<
water	227:28	0:0	8	h
forexpr	227:31	227:32	7	i ++
water	227:31	0:0	8	i
op	227:32	0:0	8	++
stmts	227:36	237:12	7	
water	227:36	0:0	8	{
if	228:16	228:86	8	(is16bit)
cond	228:20	228:20	9	is16bit
water	228:20	0:0	10	is16bit
stmts	228:29	228:86	9	
water	228:29	0:0	10	(
water	228:30	0:0	10	(
water	228:31	0:0	10	uint16_t
op	228:39	0:0	10	*
water	228:40	0:0	10	)
water	228:41	0:0	10	line
water	228:45	0:0	10	)
op	228:46	0:0	10	[
water	228:47	0:0	10	w
op	228:49	0:0	10	-
water	228:51	0:0	10	1
op	228:52	0:0	10	]
op	228:54	0:0	10	=
water	228:56	0:0	10	(
water	228:57	0:0	10	(
water	228:58	0:0	10	uint16_t
op	228:66	0:0	10	*
water	228:67	0:0	10	)
water	228:68	0:0	10	line
water	228:72	0:0	10	)
op	228:73	0:0	10	[
water	228:74	0:0	10	(
water	228:75	0:0	10	w
op	228:77	0:0	10	-
water	228:79	0:0	10	1
water	228:80	0:0	10	)
op	228:82	0:0	10	/
water	228:84	0:0	10	2
op	228:85	0:0	10	]
water	228:86	0:0	10	;
else	229:16	229:73	8
stmts	229:42	229:73	9	
water	229:42	0:0	10	line
op	229:46	0:0	10	[
water	229:47	0:0	10	w
op	229:49	0:0	10	-
water	229:51	0:0	10	1
op	229:52	0:0	10	]
op	229:54	0:0	10	=
water	229:56	0:0	10	line
op	229:60	0:0	10	[
water	229:61	0:0	10	(
water	229:62	0:0	10	w
op	229:64	0:0	10	-
water	229:66	0:0	10	1
water	229:67	0:0	10	)
op	229:69	0:0	10	/
water	229:71	0:0	10	2
op	229:72	0:0	10	]
water	229:73	0:0	10	;
for	230:16	235:16	8	(index = w - 2 ;index > 0;index --)
forinit	230:21	230:34	9	index = w - 2 ;
water	230:21	0:0	10	index
op	230:27	0:0	10	=
water	230:29	0:0	10	w
op	230:31	0:0	10	-
water	230:33	0:0	10	2
water	230:34	0:0	10	;
cond	230:36	230:44	9	index > 0
water	230:36	0:0	10	index
op	230:42	0:0	10	>
water	230:44	0:0	10	0
forexpr	230:47	230:52	9	index --
water	230:47	0:0	10	index
op	230:52	0:0	10	--
stmts	230:56	235:16	9	
water	230:56	0:0	10	{
if	231:20	232:123	10	(is16bit)
cond	231:24	231:24	11	is16bit
water	231:24	0:0	12	is16bit
stmts	232:24	232:123	11	
water	232:24	0:0	12	(
water	232:25	0:0	12	(
water	232:26	0:0	12	uint16_t
op	232:34	0:0	12	*
water	232:35	0:0	12	)
water	232:36	0:0	12	line
water	232:40	0:0	12	)
op	232:41	0:0	12	[
water	232:42	0:0	12	index
op	232:47	0:0	12	]
op	232:49	0:0	12	=
water	232:51	0:0	12	(
water	232:52	0:0	12	(
water	232:53	0:0	12	(
water	232:54	0:0	12	uint16_t
op	232:62	0:0	12	*
water	232:63	0:0	12	)
water	232:64	0:0	12	line
water	232:68	0:0	12	)
op	232:69	0:0	12	[
water	232:70	0:0	12	index
op	232:76	0:0	12	/
water	232:78	0:0	12	2
op	232:79	0:0	12	]
op	232:81	0:0	12	+
water	232:83	0:0	12	(
water	232:84	0:0	12	(
water	232:85	0:0	12	uint16_t
op	232:93	0:0	12	*
water	232:94	0:0	12	)
water	232:95	0:0	12	line
water	232:99	0:0	12	)
op	232:100	0:0	12	[
water	232:101	0:0	12	(
water	232:102	0:0	12	index
op	232:108	0:0	12	+
water	232:110	0:0	12	1
water	232:111	0:0	12	)
op	232:113	0:0	12	/
water	232:115	0:0	12	2
op	232:116	0:0	12	]
water	232:117	0:0	12	)
op	232:119	0:0	12	>>
water	232:122	0:0	12	1
water	232:123	0:0	12	;
else	233:20	234:84	10
stmts	234:24	234:84	11	
water	234:24	0:0	12	line
op	234:28	0:0	12	[
water	234:29	0:0	12	index
op	234:34	0:0	12	]
op	234:36	0:0	12	=
water	234:38	0:0	12	(
water	234:39	0:0	12	line
op	234:43	0:0	12	[
water	234:44	0:0	12	index
op	234:50	0:0	12	/
water	234:52	0:0	12	2
op	234:53	0:0	12	]
op	234:55	0:0	12	+
water	234:57	0:0	12	line
op	234:61	0:0	12	[
water	234:62	0:0	12	(
water	234:63	0:0	12	index
op	234:69	0:0	12	+
water	234:71	0:0	12	1
water	234:72	0:0	12	)
op	234:74	0:0	12	/
water	234:76	0:0	12	2
op	234:77	0:0	12	]
water	234:78	0:0	12	)
op	234:80	0:0	12	>>
water	234:83	0:0	12	1
water	234:84	0:0	12	;
water	235:16	0:0	10	}
water	236:16	0:0	8	line
op	236:21	0:0	8	+=
water	236:24	0:0	8	s
op	236:25	0:0	8	->
water	236:27	0:0	8	linesize
op	236:35	0:0	8	[
water	236:36	0:0	8	p
op	236:37	0:0	8	]
water	236:38	0:0	8	;
water	237:12	0:0	8	}
water	238:8	0:0	6	}
water	239:4	0:0	4	}
if	240:4	280:4	2	(s -> upscale_v)
cond	240:8	240:11	3	s -> upscale_v
water	240:8	0:0	4	s
op	240:9	0:0	4	->
water	240:11	0:0	4	upscale_v
stmts	240:22	280:4	3	
water	240:22	0:0	4	{
decl	241:8	241:13	4	int	p
call	242:8	255:19	4	av_assert0
arg	242:19	255:19	5	avctx->pix_fmt==AV_PIX_FMT_YUVJ444P||avctx->pix_fmt==AV_PIX_FMT_YUV444P||avctx->pix_fmt==AV_PIX_FMT_YUVJ422P||avctx->pix_fmt==AV_PIX_FMT_YUV422P||avctx->pix_fmt==AV_PIX_FMT_YUVJ420P||avctx->pix_fmt==AV_PIX_FMT_YUV420P||avctx->pix_fmt==AV_PIX_FMT_YUV440P||avctx->pix_fmt==AV_PIX_FMT_YUVJ440P||avctx->pix_fmt==AV_PIX_FMT_YUVA444P||avctx->pix_fmt==AV_PIX_FMT_YUVA420P||avctx->pix_fmt==AV_PIX_FMT_YUVA420P16||avctx->pix_fmt==AV_PIX_FMT_GBRP||avctx->pix_fmt==AV_PIX_FMT_GBRAP
water	242:19	0:0	6	avctx
op	242:24	0:0	6	->
water	242:26	0:0	6	pix_fmt
op	242:34	0:0	6	==
water	242:37	0:0	6	AV_PIX_FMT_YUVJ444P
op	242:57	0:0	6	||
water	243:19	0:0	6	avctx
op	243:24	0:0	6	->
water	243:26	0:0	6	pix_fmt
op	243:34	0:0	6	==
water	243:37	0:0	6	AV_PIX_FMT_YUV444P
op	243:57	0:0	6	||
water	244:19	0:0	6	avctx
op	244:24	0:0	6	->
water	244:26	0:0	6	pix_fmt
op	244:34	0:0	6	==
water	244:37	0:0	6	AV_PIX_FMT_YUVJ422P
op	244:57	0:0	6	||
water	245:19	0:0	6	avctx
op	245:24	0:0	6	->
water	245:26	0:0	6	pix_fmt
op	245:34	0:0	6	==
water	245:37	0:0	6	AV_PIX_FMT_YUV422P
op	245:57	0:0	6	||
water	246:19	0:0	6	avctx
op	246:24	0:0	6	->
water	246:26	0:0	6	pix_fmt
op	246:34	0:0	6	==
water	246:37	0:0	6	AV_PIX_FMT_YUVJ420P
op	246:57	0:0	6	||
water	247:19	0:0	6	avctx
op	247:24	0:0	6	->
water	247:26	0:0	6	pix_fmt
op	247:34	0:0	6	==
water	247:37	0:0	6	AV_PIX_FMT_YUV420P
op	247:57	0:0	6	||
water	248:19	0:0	6	avctx
op	248:24	0:0	6	->
water	248:26	0:0	6	pix_fmt
op	248:34	0:0	6	==
water	248:37	0:0	6	AV_PIX_FMT_YUV440P
op	248:57	0:0	6	||
water	249:19	0:0	6	avctx
op	249:24	0:0	6	->
water	249:26	0:0	6	pix_fmt
op	249:34	0:0	6	==
water	249:37	0:0	6	AV_PIX_FMT_YUVJ440P
op	249:57	0:0	6	||
water	250:19	0:0	6	avctx
op	250:24	0:0	6	->
water	250:26	0:0	6	pix_fmt
op	250:34	0:0	6	==
water	250:37	0:0	6	AV_PIX_FMT_YUVA444P
op	250:57	0:0	6	||
water	251:19	0:0	6	avctx
op	251:24	0:0	6	->
water	251:26	0:0	6	pix_fmt
op	251:34	0:0	6	==
water	251:37	0:0	6	AV_PIX_FMT_YUVA420P
op	251:58	0:0	6	||
water	252:19	0:0	6	avctx
op	252:24	0:0	6	->
water	252:26	0:0	6	pix_fmt
op	252:34	0:0	6	==
water	252:37	0:0	6	AV_PIX_FMT_YUVA420P16
op	252:58	0:0	6	||
water	253:19	0:0	6	avctx
op	253:24	0:0	6	->
water	253:26	0:0	6	pix_fmt
op	253:34	0:0	6	==
water	253:37	0:0	6	AV_PIX_FMT_GBRP
op	253:57	0:0	6	||
water	254:19	0:0	6	avctx
op	254:24	0:0	6	->
water	254:26	0:0	6	pix_fmt
op	254:34	0:0	6	==
water	254:37	0:0	6	AV_PIX_FMT_GBRAP
water	255:20	0:0	4	;
call	256:8	256:73	4	avcodec_get_chroma_sub_sample
arg	256:38	256:55	5	s->avctx->pix_fmt
water	256:38	0:0	6	s
op	256:39	0:0	6	->
water	256:41	0:0	6	avctx
op	256:46	0:0	6	->
water	256:48	0:0	6	pix_fmt
arg	256:57	256:64	5	&hshift
op	256:57	0:0	6	&
water	256:58	0:0	6	hshift
arg	256:66	256:73	5	&vshift
op	256:66	0:0	6	&
water	256:67	0:0	6	vshift
water	256:74	0:0	4	;
for	257:8	279:8	4	(p = 0 ;p < 4;p ++)
forinit	257:13	257:18	5	p = 0 ;
water	257:13	0:0	6	p
op	257:15	0:0	6	=
water	257:17	0:0	6	0
water	257:18	0:0	6	;
cond	257:20	257:24	5	p < 4
water	257:20	0:0	6	p
op	257:22	0:0	6	<
water	257:24	0:0	6	4
forexpr	257:27	257:28	5	p ++
water	257:27	0:0	6	p
op	257:28	0:0	6	++
stmts	257:32	279:8	5	
water	257:32	0:0	6	{
decl	258:12	258:24	6	uint8_t	*dst
decl	259:12	259:28	6	int	w
op	259:18	0:0	6	=
water	259:20	0:0	6	s
op	259:21	0:0	6	->
water	259:23	0:0	6	width
decl	260:12	260:29	6	int	h
op	260:18	0:0	6	=
water	260:20	0:0	6	s
op	260:21	0:0	6	->
water	260:23	0:0	6	height
if	261:12	262:24	6	(! ( s -> upscale_v & ( 1 << p ) ))
cond	261:16	261:39	7	! ( s -> upscale_v & ( 1 << p ) )
op	261:16	0:0	8	!
water	261:17	0:0	8	(
water	261:18	0:0	8	s
op	261:19	0:0	8	->
water	261:21	0:0	8	upscale_v
op	261:31	0:0	8	&
water	261:33	0:0	8	(
water	261:34	0:0	8	1
op	261:35	0:0	8	<<
water	261:37	0:0	8	p
water	261:38	0:0	8	)
water	261:39	0:0	8	)
stmts	262:16	262:24	7	
continue	262:16	262:24	8	
if	263:12	266:12	6	(p == 1 || p == 2)
cond	263:16	263:27	7	p == 1 || p == 2
water	263:16	0:0	8	p
op	263:17	0:0	8	==
water	263:19	0:0	8	1
op	263:21	0:0	8	||
water	263:24	0:0	8	p
op	263:25	0:0	8	==
water	263:27	0:0	8	2
stmts	263:30	266:12	7	
water	263:30	0:0	8	{
water	264:16	0:0	8	w
op	264:18	0:0	8	=
call	264:20	264:44	8	FF_CEIL_RSHIFT
arg	264:35	264:36	9	w
water	264:35	0:0	10	w
arg	264:38	264:44	9	hshift
water	264:38	0:0	10	hshift
water	264:45	0:0	8	;
water	265:16	0:0	8	h
op	265:18	0:0	8	=
call	265:20	265:44	8	FF_CEIL_RSHIFT
arg	265:35	265:36	9	h
water	265:35	0:0	10	h
arg	265:38	265:44	9	vshift
water	265:38	0:0	10	vshift
water	265:45	0:0	8	;
water	266:12	0:0	8	}
water	267:12	0:0	6	dst
op	267:16	0:0	6	=
op	267:18	0:0	6	&
water	267:19	0:0	6	(
water	267:20	0:0	6	(
water	267:21	0:0	6	uint8_t
op	267:29	0:0	6	*
water	267:30	0:0	6	)
water	267:31	0:0	6	s
op	267:32	0:0	6	->
water	267:34	0:0	6	picture_ptr
op	267:45	0:0	6	->
water	267:47	0:0	6	data
op	267:51	0:0	6	[
water	267:52	0:0	6	p
op	267:53	0:0	6	]
water	267:54	0:0	6	)
op	267:55	0:0	6	[
water	267:56	0:0	6	(
water	267:57	0:0	6	h
op	267:59	0:0	6	-
water	267:61	0:0	6	1
water	267:62	0:0	6	)
op	267:64	0:0	6	*
water	267:66	0:0	6	s
op	267:67	0:0	6	->
water	267:69	0:0	6	linesize
op	267:77	0:0	6	[
water	267:78	0:0	6	p
op	267:79	0:0	6	]
op	267:80	0:0	6	]
water	267:81	0:0	6	;
for	268:12	278:12	6	(i = h - 1 ;i;i --)
forinit	268:17	268:26	7	i = h - 1 ;
water	268:17	0:0	8	i
op	268:19	0:0	8	=
water	268:21	0:0	8	h
op	268:23	0:0	8	-
water	268:25	0:0	8	1
water	268:26	0:0	8	;
cond	268:28	268:28	7	i
water	268:28	0:0	8	i
forexpr	268:31	268:32	7	i --
water	268:31	0:0	8	i
op	268:32	0:0	8	--
stmts	268:36	278:12	7	
water	268:36	0:0	8	{
decl	269:16	269:93	8	uint8_t	*src1
op	269:30	0:0	8	=
op	269:32	0:0	8	&
water	269:33	0:0	8	(
water	269:34	0:0	8	(
water	269:35	0:0	8	uint8_t
op	269:43	0:0	8	*
water	269:44	0:0	8	)
water	269:45	0:0	8	s
op	269:46	0:0	8	->
water	269:48	0:0	8	picture_ptr
op	269:59	0:0	8	->
water	269:61	0:0	8	data
op	269:65	0:0	8	[
water	269:66	0:0	8	p
op	269:67	0:0	8	]
water	269:68	0:0	8	)
op	269:69	0:0	8	[
water	269:70	0:0	8	i
op	269:72	0:0	8	/
water	269:74	0:0	8	2
op	269:76	0:0	8	*
water	269:78	0:0	8	s
op	269:79	0:0	8	->
water	269:81	0:0	8	linesize
op	269:89	0:0	8	[
water	269:90	0:0	8	p
op	269:91	0:0	8	]
op	269:92	0:0	8	]
decl	270:16	270:99	8	uint8_t	*src2
op	270:30	0:0	8	=
op	270:32	0:0	8	&
water	270:33	0:0	8	(
water	270:34	0:0	8	(
water	270:35	0:0	8	uint8_t
op	270:43	0:0	8	*
water	270:44	0:0	8	)
water	270:45	0:0	8	s
op	270:46	0:0	8	->
water	270:48	0:0	8	picture_ptr
op	270:59	0:0	8	->
water	270:61	0:0	8	data
op	270:65	0:0	8	[
water	270:66	0:0	8	p
op	270:67	0:0	8	]
water	270:68	0:0	8	)
op	270:69	0:0	8	[
water	270:70	0:0	8	(
water	270:71	0:0	8	i
op	270:73	0:0	8	+
water	270:75	0:0	8	1
water	270:76	0:0	8	)
op	270:78	0:0	8	/
water	270:80	0:0	8	2
op	270:82	0:0	8	*
water	270:84	0:0	8	s
op	270:85	0:0	8	->
water	270:87	0:0	8	linesize
op	270:95	0:0	8	[
water	270:96	0:0	8	p
op	270:97	0:0	8	]
op	270:98	0:0	8	]
if	271:16	273:16	8	(src1 == src2 || i == h - 1)
cond	271:20	271:45	9	src1 == src2 || i == h - 1
water	271:20	0:0	10	src1
op	271:25	0:0	10	==
water	271:28	0:0	10	src2
op	271:33	0:0	10	||
water	271:36	0:0	10	i
op	271:38	0:0	10	==
water	271:41	0:0	10	h
op	271:43	0:0	10	-
water	271:45	0:0	10	1
stmts	271:48	273:16	9	
water	271:48	0:0	10	{
call	272:20	272:39	10	memcpy
arg	272:27	272:30	11	dst
water	272:27	0:0	12	dst
arg	272:32	272:36	11	src1
water	272:32	0:0	12	src1
arg	272:38	272:39	11	w
water	272:38	0:0	12	w
water	272:40	0:0	10	;
water	273:16	0:0	10	}
else	273:18	276:16	8
stmts	273:23	276:16	9	
water	273:23	0:0	10	{
for	274:20	275:69	10	(index = 0 ;index < w;index ++)
forinit	274:25	274:34	11	index = 0 ;
water	274:25	0:0	12	index
op	274:31	0:0	12	=
water	274:33	0:0	12	0
water	274:34	0:0	12	;
cond	274:36	274:44	11	index < w
water	274:36	0:0	12	index
op	274:42	0:0	12	<
water	274:44	0:0	12	w
forexpr	274:47	274:52	11	index ++
water	274:47	0:0	12	index
op	274:52	0:0	12	++
stmts	275:24	275:69	11	
water	275:24	0:0	12	dst
op	275:27	0:0	12	[
water	275:28	0:0	12	index
op	275:33	0:0	12	]
op	275:35	0:0	12	=
water	275:37	0:0	12	(
water	275:38	0:0	12	src1
op	275:42	0:0	12	[
water	275:43	0:0	12	index
op	275:48	0:0	12	]
op	275:50	0:0	12	+
water	275:52	0:0	12	src2
op	275:56	0:0	12	[
water	275:57	0:0	12	index
op	275:62	0:0	12	]
water	275:63	0:0	12	)
op	275:65	0:0	12	>>
water	275:68	0:0	12	1
water	275:69	0:0	12	;
water	276:16	0:0	10	}
water	277:16	0:0	8	dst
op	277:20	0:0	8	-=
water	277:23	0:0	8	s
op	277:24	0:0	8	->
water	277:26	0:0	8	linesize
op	277:34	0:0	8	[
water	277:35	0:0	8	p
op	277:36	0:0	8	]
water	277:37	0:0	8	;
water	278:12	0:0	8	}
water	279:8	0:0	6	}
water	280:4	0:0	4	}
if	281:4	302:4	2	(s -> flipped)
cond	281:8	281:11	3	s -> flipped
water	281:8	0:0	4	s
op	281:9	0:0	4	->
water	281:11	0:0	4	flipped
stmts	281:20	302:4	3	
water	281:20	0:0	4	{
decl	282:8	282:13	4	int	j
call	283:8	283:73	4	avcodec_get_chroma_sub_sample
arg	283:38	283:55	5	s->avctx->pix_fmt
water	283:38	0:0	6	s
op	283:39	0:0	6	->
water	283:41	0:0	6	avctx
op	283:46	0:0	6	->
water	283:48	0:0	6	pix_fmt
arg	283:57	283:64	5	&hshift
op	283:57	0:0	6	&
water	283:58	0:0	6	hshift
arg	283:66	283:73	5	&vshift
op	283:66	0:0	6	&
water	283:67	0:0	6	vshift
water	283:74	0:0	4	;
for	284:8	301:8	4	(index = 0 ;index < 4;index ++)
forinit	284:13	284:20	5	index = 0 ;
water	284:13	0:0	6	index
op	284:18	0:0	6	=
water	284:19	0:0	6	0
water	284:20	0:0	6	;
cond	284:22	284:28	5	index < 4
water	284:22	0:0	6	index
op	284:27	0:0	6	<
water	284:28	0:0	6	4
forexpr	284:31	284:36	5	index ++
water	284:31	0:0	6	index
op	284:36	0:0	6	++
stmts	284:40	301:8	5	
water	284:40	0:0	6	{
decl	285:12	285:54	6	uint8_t	*dst
op	285:25	0:0	6	=
water	285:27	0:0	6	s
op	285:28	0:0	6	->
water	285:30	0:0	6	picture_ptr
op	285:41	0:0	6	->
water	285:43	0:0	6	data
op	285:47	0:0	6	[
water	285:48	0:0	6	index
op	285:53	0:0	6	]
decl	286:12	286:41	6	int	w
op	286:18	0:0	6	=
water	286:20	0:0	6	s
op	286:21	0:0	6	->
water	286:23	0:0	6	picture_ptr
op	286:34	0:0	6	->
water	286:36	0:0	6	width
decl	287:12	287:42	6	int	h
op	287:18	0:0	6	=
water	287:20	0:0	6	s
op	287:21	0:0	6	->
water	287:23	0:0	6	picture_ptr
op	287:34	0:0	6	->
water	287:36	0:0	6	height
if	288:12	291:12	6	(index && index < 3)
cond	288:15	288:30	7	index && index < 3
water	288:15	0:0	8	index
op	288:21	0:0	8	&&
water	288:24	0:0	8	index
op	288:29	0:0	8	<
water	288:30	0:0	8	3
stmts	288:32	291:12	7	
water	288:32	0:0	8	{
water	289:16	0:0	8	w
op	289:18	0:0	8	=
call	289:20	289:44	8	FF_CEIL_RSHIFT
arg	289:35	289:36	9	w
water	289:35	0:0	10	w
arg	289:38	289:44	9	hshift
water	289:38	0:0	10	hshift
water	289:45	0:0	8	;
water	290:16	0:0	8	h
op	290:18	0:0	8	=
call	290:20	290:44	8	FF_CEIL_RSHIFT
arg	290:35	290:36	9	h
water	290:35	0:0	10	h
arg	290:38	290:44	9	vshift
water	290:38	0:0	10	vshift
water	290:45	0:0	8	;
water	291:12	0:0	8	}
if	292:12	300:12	6	(dst)
cond	292:15	292:15	7	dst
water	292:15	0:0	8	dst
stmts	292:19	300:12	7	
water	292:19	0:0	8	{
decl	293:16	293:75	8	uint8_t	*dst2
op	293:30	0:0	8	=
water	293:32	0:0	8	dst
op	293:36	0:0	8	+
water	293:38	0:0	8	s
op	293:39	0:0	8	->
water	293:41	0:0	8	picture_ptr
op	293:52	0:0	8	->
water	293:54	0:0	8	linesize
op	293:62	0:0	8	[
water	293:63	0:0	8	index
op	293:68	0:0	8	]
op	293:69	0:0	8	*
water	293:70	0:0	8	(
water	293:71	0:0	8	h
op	293:72	0:0	8	-
water	293:73	0:0	8	1
water	293:74	0:0	8	)
for	294:16	299:16	8	(i = 0 ;i < h / 2;i ++)
forinit	294:21	294:24	9	i = 0 ;
water	294:21	0:0	10	i
op	294:22	0:0	10	=
water	294:23	0:0	10	0
water	294:24	0:0	10	;
cond	294:26	294:30	9	i < h / 2
water	294:26	0:0	10	i
op	294:27	0:0	10	<
water	294:28	0:0	10	h
op	294:29	0:0	10	/
water	294:30	0:0	10	2
forexpr	294:33	294:34	9	i ++
water	294:33	0:0	10	i
op	294:34	0:0	10	++
stmts	294:38	299:16	9	
water	294:38	0:0	10	{
for	295:20	296:52	10	(j = 0 ;j < w;j ++)
forinit	295:25	295:28	11	j = 0 ;
water	295:25	0:0	12	j
op	295:26	0:0	12	=
water	295:27	0:0	12	0
water	295:28	0:0	12	;
cond	295:30	295:32	11	j < w
water	295:30	0:0	12	j
op	295:31	0:0	12	<
water	295:32	0:0	12	w
forexpr	295:35	295:36	11	j ++
water	295:35	0:0	12	j
op	295:36	0:0	12	++
stmts	296:24	296:52	11	
call	296:24	296:51	12	FFSWAP
arg	296:31	296:34	13	int
water	296:31	0:0	14	int
arg	296:36	296:42	13	dst[j]
water	296:36	0:0	14	dst
op	296:39	0:0	14	[
water	296:40	0:0	14	j
op	296:41	0:0	14	]
arg	296:44	296:51	13	dst2[j]
water	296:44	0:0	14	dst2
op	296:48	0:0	14	[
water	296:49	0:0	14	j
op	296:50	0:0	14	]
water	296:52	0:0	12	;
water	297:20	0:0	10	dst
op	297:25	0:0	10	+=
water	297:28	0:0	10	s
op	297:29	0:0	10	->
water	297:31	0:0	10	picture_ptr
op	297:42	0:0	10	->
water	297:44	0:0	10	linesize
op	297:52	0:0	10	[
water	297:53	0:0	10	index
op	297:58	0:0	10	]
water	297:59	0:0	10	;
water	298:20	0:0	10	dst2
op	298:25	0:0	10	-=
water	298:28	0:0	10	s
op	298:29	0:0	10	->
water	298:31	0:0	10	picture_ptr
op	298:42	0:0	10	->
water	298:44	0:0	10	linesize
op	298:52	0:0	10	[
water	298:53	0:0	10	index
op	298:58	0:0	10	]
water	298:59	0:0	10	;
water	299:16	0:0	10	}
water	300:12	0:0	8	}
water	301:8	0:0	6	}
water	302:4	0:0	4	}
if	303:4	324:4	2	(s -> adobe_transform == 0 && s -> avctx -> pix_fmt == AV_PIX_FMT_GBRAP)
cond	303:8	303:56	3	s -> adobe_transform == 0 && s -> avctx -> pix_fmt == AV_PIX_FMT_GBRAP
water	303:8	0:0	4	s
op	303:9	0:0	4	->
water	303:11	0:0	4	adobe_transform
op	303:27	0:0	4	==
water	303:30	0:0	4	0
op	303:32	0:0	4	&&
water	303:35	0:0	4	s
op	303:36	0:0	4	->
water	303:38	0:0	4	avctx
op	303:43	0:0	4	->
water	303:45	0:0	4	pix_fmt
op	303:53	0:0	4	==
water	303:56	0:0	4	AV_PIX_FMT_GBRAP
stmts	303:74	324:4	3	
water	303:74	0:0	4	{
decl	304:8	304:37	4	int	w
op	304:14	0:0	4	=
water	304:16	0:0	4	s
op	304:17	0:0	4	->
water	304:19	0:0	4	picture_ptr
op	304:30	0:0	4	->
water	304:32	0:0	4	width
decl	305:8	305:38	4	int	h
op	305:14	0:0	4	=
water	305:16	0:0	4	s
op	305:17	0:0	4	->
water	305:19	0:0	4	picture_ptr
op	305:30	0:0	4	->
water	305:32	0:0	4	height
for	306:8	323:8	4	(i = 0 ;i < h;i ++)
forinit	306:13	306:16	5	i = 0 ;
water	306:13	0:0	6	i
op	306:14	0:0	6	=
water	306:15	0:0	6	0
water	306:16	0:0	6	;
cond	306:18	306:20	5	i < h
water	306:18	0:0	6	i
op	306:19	0:0	6	<
water	306:20	0:0	6	h
forexpr	306:23	306:24	5	i ++
water	306:23	0:0	6	i
op	306:24	0:0	6	++
stmts	306:28	323:8	5	
water	306:28	0:0	6	{
decl	307:12	307:17	6	int	j
decl	308:12	308:27	6	uint8_t	*dst[4]
for	309:12	312:12	6	(index = 0 ;index < 4;index ++)
forinit	309:17	309:24	7	index = 0 ;
water	309:17	0:0	8	index
op	309:22	0:0	8	=
water	309:23	0:0	8	0
water	309:24	0:0	8	;
cond	309:26	309:32	7	index < 4
water	309:26	0:0	8	index
op	309:31	0:0	8	<
water	309:32	0:0	8	4
forexpr	309:35	309:40	7	index ++
water	309:35	0:0	8	index
op	309:40	0:0	8	++
stmts	309:44	312:12	7	
water	309:44	0:0	8	{
water	310:16	0:0	8	dst
op	310:19	0:0	8	[
water	310:20	0:0	8	index
op	310:25	0:0	8	]
op	310:27	0:0	8	=
water	310:31	0:0	8	s
op	310:32	0:0	8	->
water	310:34	0:0	8	picture_ptr
op	310:45	0:0	8	->
water	310:47	0:0	8	data
op	310:51	0:0	8	[
water	310:52	0:0	8	index
op	310:57	0:0	8	]
op	311:29	0:0	8	+
water	311:31	0:0	8	s
op	311:32	0:0	8	->
water	311:34	0:0	8	picture_ptr
op	311:45	0:0	8	->
water	311:47	0:0	8	linesize
op	311:55	0:0	8	[
water	311:56	0:0	8	index
op	311:61	0:0	8	]
op	311:62	0:0	8	*
water	311:63	0:0	8	i
water	311:64	0:0	8	;
water	312:12	0:0	8	}
for	313:12	322:12	6	(j = 0 ;j < w;j ++)
forinit	313:17	313:20	7	j = 0 ;
water	313:17	0:0	8	j
op	313:18	0:0	8	=
water	313:19	0:0	8	0
water	313:20	0:0	8	;
cond	313:22	313:24	7	j < w
water	313:22	0:0	8	j
op	313:23	0:0	8	<
water	313:24	0:0	8	w
forexpr	313:27	313:28	7	j ++
water	313:27	0:0	8	j
op	313:28	0:0	8	++
stmts	313:32	322:12	7	
water	313:32	0:0	8	{
decl	314:16	314:33	8	int	k
op	314:22	0:0	8	=
water	314:24	0:0	8	dst
op	314:27	0:0	8	[
water	314:28	0:0	8	3
op	314:29	0:0	8	]
op	314:30	0:0	8	[
water	314:31	0:0	8	j
op	314:32	0:0	8	]
decl	315:16	315:37	8	int	r
op	315:22	0:0	8	=
water	315:24	0:0	8	dst
op	315:27	0:0	8	[
water	315:28	0:0	8	0
op	315:29	0:0	8	]
op	315:30	0:0	8	[
water	315:31	0:0	8	j
op	315:32	0:0	8	]
op	315:34	0:0	8	*
water	315:36	0:0	8	k
decl	316:16	316:37	8	int	g
op	316:22	0:0	8	=
water	316:24	0:0	8	dst
op	316:27	0:0	8	[
water	316:28	0:0	8	1
op	316:29	0:0	8	]
op	316:30	0:0	8	[
water	316:31	0:0	8	j
op	316:32	0:0	8	]
op	316:34	0:0	8	*
water	316:36	0:0	8	k
decl	317:16	317:37	8	int	b
op	317:22	0:0	8	=
water	317:24	0:0	8	dst
op	317:27	0:0	8	[
water	317:28	0:0	8	2
op	317:29	0:0	8	]
op	317:30	0:0	8	[
water	317:31	0:0	8	j
op	317:32	0:0	8	]
op	317:34	0:0	8	*
water	317:36	0:0	8	k
water	318:16	0:0	8	dst
op	318:19	0:0	8	[
water	318:20	0:0	8	0
op	318:21	0:0	8	]
op	318:22	0:0	8	[
water	318:23	0:0	8	j
op	318:24	0:0	8	]
op	318:26	0:0	8	=
water	318:28	0:0	8	g
op	318:29	0:0	8	*
water	318:30	0:0	8	257
op	318:34	0:0	8	>>
water	318:37	0:0	8	16
water	318:39	0:0	8	;
water	319:16	0:0	8	dst
op	319:19	0:0	8	[
water	319:20	0:0	8	1
op	319:21	0:0	8	]
op	319:22	0:0	8	[
water	319:23	0:0	8	j
op	319:24	0:0	8	]
op	319:26	0:0	8	=
water	319:28	0:0	8	b
op	319:29	0:0	8	*
water	319:30	0:0	8	257
op	319:34	0:0	8	>>
water	319:37	0:0	8	16
water	319:39	0:0	8	;
water	320:16	0:0	8	dst
op	320:19	0:0	8	[
water	320:20	0:0	8	2
op	320:21	0:0	8	]
op	320:22	0:0	8	[
water	320:23	0:0	8	j
op	320:24	0:0	8	]
op	320:26	0:0	8	=
water	320:28	0:0	8	r
op	320:29	0:0	8	*
water	320:30	0:0	8	257
op	320:34	0:0	8	>>
water	320:37	0:0	8	16
water	320:39	0:0	8	;
water	321:16	0:0	8	dst
op	321:19	0:0	8	[
water	321:20	0:0	8	3
op	321:21	0:0	8	]
op	321:22	0:0	8	[
water	321:23	0:0	8	j
op	321:24	0:0	8	]
op	321:26	0:0	8	=
water	321:28	0:0	8	255
water	321:31	0:0	8	;
water	322:12	0:0	8	}
water	323:8	0:0	6	}
water	324:4	0:0	4	}
if	325:4	346:4	2	(s -> adobe_transform == 2 && s -> avctx -> pix_fmt == AV_PIX_FMT_YUVA444P)
cond	325:8	325:56	3	s -> adobe_transform == 2 && s -> avctx -> pix_fmt == AV_PIX_FMT_YUVA444P
water	325:8	0:0	4	s
op	325:9	0:0	4	->
water	325:11	0:0	4	adobe_transform
op	325:27	0:0	4	==
water	325:30	0:0	4	2
op	325:32	0:0	4	&&
water	325:35	0:0	4	s
op	325:36	0:0	4	->
water	325:38	0:0	4	avctx
op	325:43	0:0	4	->
water	325:45	0:0	4	pix_fmt
op	325:53	0:0	4	==
water	325:56	0:0	4	AV_PIX_FMT_YUVA444P
stmts	325:77	346:4	3	
water	325:77	0:0	4	{
decl	326:8	326:37	4	int	w
op	326:14	0:0	4	=
water	326:16	0:0	4	s
op	326:17	0:0	4	->
water	326:19	0:0	4	picture_ptr
op	326:30	0:0	4	->
water	326:32	0:0	4	width
decl	327:8	327:38	4	int	h
op	327:14	0:0	4	=
water	327:16	0:0	4	s
op	327:17	0:0	4	->
water	327:19	0:0	4	picture_ptr
op	327:30	0:0	4	->
water	327:32	0:0	4	height
for	328:8	345:8	4	(i = 0 ;i < h;i ++)
forinit	328:13	328:16	5	i = 0 ;
water	328:13	0:0	6	i
op	328:14	0:0	6	=
water	328:15	0:0	6	0
water	328:16	0:0	6	;
cond	328:18	328:20	5	i < h
water	328:18	0:0	6	i
op	328:19	0:0	6	<
water	328:20	0:0	6	h
forexpr	328:23	328:24	5	i ++
water	328:23	0:0	6	i
op	328:24	0:0	6	++
stmts	328:28	345:8	5	
water	328:28	0:0	6	{
decl	329:12	329:17	6	int	j
decl	330:12	330:27	6	uint8_t	*dst[4]
for	331:12	334:12	6	(index = 0 ;index < 4;index ++)
forinit	331:17	331:24	7	index = 0 ;
water	331:17	0:0	8	index
op	331:22	0:0	8	=
water	331:23	0:0	8	0
water	331:24	0:0	8	;
cond	331:26	331:32	7	index < 4
water	331:26	0:0	8	index
op	331:31	0:0	8	<
water	331:32	0:0	8	4
forexpr	331:35	331:40	7	index ++
water	331:35	0:0	8	index
op	331:40	0:0	8	++
stmts	331:44	334:12	7	
water	331:44	0:0	8	{
water	332:16	0:0	8	dst
op	332:19	0:0	8	[
water	332:20	0:0	8	index
op	332:25	0:0	8	]
op	332:27	0:0	8	=
water	332:31	0:0	8	s
op	332:32	0:0	8	->
water	332:34	0:0	8	picture_ptr
op	332:45	0:0	8	->
water	332:47	0:0	8	data
op	332:51	0:0	8	[
water	332:52	0:0	8	index
op	332:57	0:0	8	]
op	333:29	0:0	8	+
water	333:31	0:0	8	s
op	333:32	0:0	8	->
water	333:34	0:0	8	picture_ptr
op	333:45	0:0	8	->
water	333:47	0:0	8	linesize
op	333:55	0:0	8	[
water	333:56	0:0	8	index
op	333:61	0:0	8	]
op	333:62	0:0	8	*
water	333:63	0:0	8	i
water	333:64	0:0	8	;
water	334:12	0:0	8	}
for	335:12	344:12	6	(j = 0 ;j < w;j ++)
forinit	335:17	335:20	7	j = 0 ;
water	335:17	0:0	8	j
op	335:18	0:0	8	=
water	335:19	0:0	8	0
water	335:20	0:0	8	;
cond	335:22	335:24	7	j < w
water	335:22	0:0	8	j
op	335:23	0:0	8	<
water	335:24	0:0	8	w
forexpr	335:27	335:28	7	j ++
water	335:27	0:0	8	j
op	335:28	0:0	8	++
stmts	335:32	344:12	7	
water	335:32	0:0	8	{
decl	336:16	336:33	8	int	k
op	336:22	0:0	8	=
water	336:24	0:0	8	dst
op	336:27	0:0	8	[
water	336:28	0:0	8	3
op	336:29	0:0	8	]
op	336:30	0:0	8	[
water	336:31	0:0	8	j
op	336:32	0:0	8	]
decl	337:16	337:45	8	int	r
op	337:22	0:0	8	=
water	337:24	0:0	8	(
water	337:25	0:0	8	255
op	337:29	0:0	8	-
water	337:31	0:0	8	dst
op	337:34	0:0	8	[
water	337:35	0:0	8	0
op	337:36	0:0	8	]
op	337:37	0:0	8	[
water	337:38	0:0	8	j
op	337:39	0:0	8	]
water	337:40	0:0	8	)
op	337:42	0:0	8	*
water	337:44	0:0	8	k
decl	338:16	338:45	8	int	g
op	338:22	0:0	8	=
water	338:24	0:0	8	(
water	338:25	0:0	8	128
op	338:29	0:0	8	-
water	338:31	0:0	8	dst
op	338:34	0:0	8	[
water	338:35	0:0	8	1
op	338:36	0:0	8	]
op	338:37	0:0	8	[
water	338:38	0:0	8	j
op	338:39	0:0	8	]
water	338:40	0:0	8	)
op	338:42	0:0	8	*
water	338:44	0:0	8	k
decl	339:16	339:45	8	int	b
op	339:22	0:0	8	=
water	339:24	0:0	8	(
water	339:25	0:0	8	128
op	339:29	0:0	8	-
water	339:31	0:0	8	dst
op	339:34	0:0	8	[
water	339:35	0:0	8	2
op	339:36	0:0	8	]
op	339:37	0:0	8	[
water	339:38	0:0	8	j
op	339:39	0:0	8	]
water	339:40	0:0	8	)
op	339:42	0:0	8	*
water	339:44	0:0	8	k
water	340:16	0:0	8	dst
op	340:19	0:0	8	[
water	340:20	0:0	8	0
op	340:21	0:0	8	]
op	340:22	0:0	8	[
water	340:23	0:0	8	j
op	340:24	0:0	8	]
op	340:26	0:0	8	=
water	340:28	0:0	8	r
op	340:29	0:0	8	*
water	340:30	0:0	8	257
op	340:34	0:0	8	>>
water	340:37	0:0	8	16
water	340:39	0:0	8	;
water	341:16	0:0	8	dst
op	341:19	0:0	8	[
water	341:20	0:0	8	1
op	341:21	0:0	8	]
op	341:22	0:0	8	[
water	341:23	0:0	8	j
op	341:24	0:0	8	]
op	341:26	0:0	8	=
water	341:28	0:0	8	(
water	341:29	0:0	8	g
op	341:30	0:0	8	*
water	341:31	0:0	8	257
op	341:35	0:0	8	>>
water	341:38	0:0	8	16
water	341:40	0:0	8	)
op	341:42	0:0	8	+
water	341:44	0:0	8	128
water	341:47	0:0	8	;
water	342:16	0:0	8	dst
op	342:19	0:0	8	[
water	342:20	0:0	8	2
op	342:21	0:0	8	]
op	342:22	0:0	8	[
water	342:23	0:0	8	j
op	342:24	0:0	8	]
op	342:26	0:0	8	=
water	342:28	0:0	8	(
water	342:29	0:0	8	b
op	342:30	0:0	8	*
water	342:31	0:0	8	257
op	342:35	0:0	8	>>
water	342:38	0:0	8	16
water	342:40	0:0	8	)
op	342:42	0:0	8	+
water	342:44	0:0	8	128
water	342:47	0:0	8	;
water	343:16	0:0	8	dst
op	343:19	0:0	8	[
water	343:20	0:0	8	3
op	343:21	0:0	8	]
op	343:22	0:0	8	[
water	343:23	0:0	8	j
op	343:24	0:0	8	]
op	343:26	0:0	8	=
water	343:28	0:0	8	255
water	343:31	0:0	8	;
water	344:12	0:0	8	}
water	345:8	0:0	6	}
water	346:4	0:0	4	}
if	348:4	355:4	2	(s -> stereo3d)
cond	348:8	348:11	3	s -> stereo3d
water	348:8	0:0	4	s
op	348:9	0:0	4	->
water	348:11	0:0	4	stereo3d
stmts	348:21	355:4	3	
water	348:21	0:0	4	{
decl	349:8	349:63	4	AVStereo3D	*stereo
op	349:27	0:0	4	=
call	349:29	349:62	5	av_stereo3d_create_side_data
arg	349:58	349:62	6	data
water	349:58	0:0	7	data
if	350:8	353:8	4	(stereo)
cond	350:12	350:12	5	stereo
water	350:12	0:0	6	stereo
stmts	350:20	353:8	5	
water	350:20	0:0	6	{
water	351:12	0:0	6	stereo
op	351:18	0:0	6	->
water	351:20	0:0	6	type
op	351:26	0:0	6	=
water	351:28	0:0	6	s
op	351:29	0:0	6	->
water	351:31	0:0	6	stereo3d
op	351:39	0:0	6	->
water	351:41	0:0	6	type
water	351:45	0:0	6	;
water	352:12	0:0	6	stereo
op	352:18	0:0	6	->
water	352:20	0:0	6	flags
op	352:26	0:0	6	=
water	352:28	0:0	6	s
op	352:29	0:0	6	->
water	352:31	0:0	6	stereo3d
op	352:39	0:0	6	->
water	352:41	0:0	6	flags
water	352:46	0:0	6	;
water	353:8	0:0	6	}
call	354:8	354:29	4	av_freep
arg	354:17	354:29	5	&s->stereo3d
op	354:17	0:0	6	&
water	354:18	0:0	6	s
op	354:19	0:0	6	->
water	354:21	0:0	6	stereo3d
water	354:30	0:0	4	;
water	355:4	0:0	4	}
call	357:4	357:70	2	av_dict_copy
arg	357:17	357:49	3	avpriv_frame_get_metadatap(data)
call	357:17	357:48	4	avpriv_frame_get_metadatap
arg	357:44	357:48	5	data
water	357:44	0:0	6	data
arg	357:51	357:67	3	s->exif_metadata
water	357:51	0:0	4	s
op	357:52	0:0	4	->
water	357:54	0:0	4	exif_metadata
arg	357:69	357:70	3	0
water	357:69	0:0	4	0
water	357:71	0:0	2	;
call	358:4	358:34	2	av_dict_free
arg	358:17	358:34	3	&s->exif_metadata
op	358:17	0:0	4	&
water	358:18	0:0	4	s
op	358:19	0:0	4	->
water	358:21	0:0	4	exif_metadata
water	358:35	0:0	2	;
call	360:4	361:28	2	av_log
arg	360:11	360:16	3	avctx
water	360:11	0:0	4	avctx
arg	360:18	360:30	3	AV_LOG_DEBUG
water	360:18	0:0	4	AV_LOG_DEBUG
arg	360:32	360:82	3	"decode frame unused %"PTRDIFF_SPECIFIER" bytes\n"
water	360:32	0:0	4	"decode frame unused %"
water	360:55	0:0	4	PTRDIFF_SPECIFIER
water	360:72	0:0	4	" bytes\n"
arg	361:11	361:28	3	buf_end-buf_ptr
water	361:11	0:0	4	buf_end
op	361:19	0:0	4	-
water	361:21	0:0	4	buf_ptr
water	361:29	0:0	2	;
return	363:4	363:24	2	buf_ptr-buf
water	363:11	0:0	3	buf_ptr
op	363:19	0:0	3	-
water	363:21	0:0	3	buf
