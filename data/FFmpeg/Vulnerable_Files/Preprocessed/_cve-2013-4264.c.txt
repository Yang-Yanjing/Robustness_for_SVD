func	2:0	102:0	0	static int	kempf_decode_tile
params	2:28	0:0	1	
param	2:29	2:42	2	G2MContext *	c
param	2:44	2:54	2	int	tile_x
param	2:56	2:66	2	int	tile_y
param	3:29	3:47	2	const uint8_t *	src
param	3:49	3:61	2	int	src_size
stmnts	0:0	101:12	1	
decl	5:4	5:21	2	int	width
water	5:13	0:0	2	,
decl	5:4	5:21	2	int	height
decl	6:4	6:40	2	int	hdr
water	6:11	0:0	2	,
decl	6:4	6:40	2	int	zsize
water	6:18	0:0	2	,
decl	6:4	6:40	2	int	npal
water	6:24	0:0	2	,
decl	6:4	6:40	2	int	tidx
op	6:31	0:0	2	=
op	6:33	0:0	2	-
water	6:34	0:0	2	1
water	6:35	0:0	2	,
decl	6:4	6:40	2	int	ret
decl	7:4	7:12	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:12	2	int	j
decl	8:4	8:43	2	const uint8_t	*src_end
op	8:27	0:0	2	=
water	8:29	0:0	2	src
op	8:33	0:0	2	+
water	8:35	0:0	2	src_size
decl	9:4	9:31	2	uint8_t	pal[768]
water	9:20	0:0	2	,
decl	9:4	9:31	2	uint8_t	transp[3]
decl	10:4	10:54	2	uLongf	dlen
op	10:16	0:0	2	=
water	10:18	0:0	2	(
water	10:19	0:0	2	c
op	10:20	0:0	2	->
water	10:22	0:0	2	tile_width
op	10:33	0:0	2	+
water	10:35	0:0	2	1
water	10:36	0:0	2	)
op	10:38	0:0	2	*
water	10:40	0:0	2	c
op	10:41	0:0	2	->
water	10:43	0:0	2	tile_height
decl	11:4	11:16	2	int	sub_type
decl	12:4	12:33	2	int	nblocks
water	12:15	0:0	2	,
decl	12:4	12:33	2	int	cblocks
water	12:24	0:0	2	,
decl	12:4	12:33	2	int	bstride
decl	13:4	13:27	2	int	bits
water	13:12	0:0	2	,
decl	13:4	13:27	2	int	bitbuf
water	13:20	0:0	2	,
decl	13:4	13:27	2	int	coded
decl	14:4	15:63	2	uint8_t	*dst
op	14:17	0:0	2	=
water	14:19	0:0	2	c
op	14:20	0:0	2	->
water	14:22	0:0	2	framebuf
op	14:31	0:0	2	+
water	14:33	0:0	2	tile_x
op	14:40	0:0	2	*
water	14:42	0:0	2	c
op	14:43	0:0	2	->
water	14:45	0:0	2	tile_width
op	14:56	0:0	2	*
water	14:58	0:0	2	3
op	14:60	0:0	2	+
water	15:19	0:0	2	tile_y
op	15:26	0:0	2	*
water	15:28	0:0	2	c
op	15:29	0:0	2	->
water	15:31	0:0	2	tile_height
op	15:43	0:0	2	*
water	15:45	0:0	2	c
op	15:46	0:0	2	->
water	15:48	0:0	2	framebuf_stride
if	17:4	18:34	2	(src_size < 2)
cond	17:8	17:19	3	src_size < 2
water	17:8	0:0	4	src_size
op	17:17	0:0	4	<
water	17:19	0:0	4	2
stmts	18:8	18:34	3	
return	18:8	18:34	4	AVERROR_INVALIDDATA
water	18:15	0:0	5	AVERROR_INVALIDDATA
water	20:4	0:0	2	width
op	20:11	0:0	2	=
call	20:13	20:69	2	FFMIN
arg	20:19	20:53	3	c->width-tile_x*c->tile_width
water	20:19	0:0	4	c
op	20:20	0:0	4	->
water	20:22	0:0	4	width
op	20:29	0:0	4	-
water	20:31	0:0	4	tile_x
op	20:38	0:0	4	*
water	20:40	0:0	4	c
op	20:41	0:0	4	->
water	20:43	0:0	4	tile_width
arg	20:56	20:69	3	c->tile_width
water	20:56	0:0	4	c
op	20:57	0:0	4	->
water	20:59	0:0	4	tile_width
water	20:70	0:0	2	;
water	21:4	0:0	2	height
op	21:11	0:0	2	=
call	21:13	21:70	2	FFMIN
arg	21:19	21:54	3	c->height-tile_y*c->tile_height
water	21:19	0:0	4	c
op	21:20	0:0	4	->
water	21:22	0:0	4	height
op	21:29	0:0	4	-
water	21:31	0:0	4	tile_y
op	21:38	0:0	4	*
water	21:40	0:0	4	c
op	21:41	0:0	4	->
water	21:43	0:0	4	tile_height
arg	21:56	21:70	3	c->tile_height
water	21:56	0:0	4	c
op	21:57	0:0	4	->
water	21:59	0:0	4	tile_height
water	21:71	0:0	2	;
water	23:4	0:0	2	hdr
op	23:8	0:0	2	=
op	23:10	0:0	2	*
water	23:11	0:0	2	src
op	23:14	0:0	2	++
water	23:16	0:0	2	;
water	24:4	0:0	2	sub_type
op	24:13	0:0	2	=
water	24:15	0:0	2	hdr
op	24:19	0:0	2	>>
water	24:22	0:0	2	5
water	24:23	0:0	2	;
if	25:4	33:4	2	(sub_type == 0)
cond	25:8	25:20	3	sub_type == 0
water	25:8	0:0	4	sub_type
op	25:17	0:0	4	==
water	25:20	0:0	4	0
stmts	25:23	33:4	3	
water	25:23	0:0	4	{
decl	26:8	26:13	4	int	j
call	27:8	27:29	4	memcpy
arg	27:15	27:21	5	transp
water	27:15	0:0	6	transp
arg	27:23	27:26	5	src
water	27:23	0:0	6	src
arg	27:28	27:29	5	3
water	27:28	0:0	6	3
water	27:30	0:0	4	;
water	28:8	0:0	4	src
op	28:12	0:0	4	+=
water	28:15	0:0	4	3
water	28:16	0:0	4	;
for	29:8	31:46	4	(j = 0 ;j < height;j ++ , dst += c -> framebuf_stride)
forinit	29:13	29:18	5	j = 0 ;
water	29:13	0:0	6	j
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:24	5	j < height
water	29:20	0:0	6	j
op	29:22	0:0	6	<
water	29:24	0:0	6	height
forexpr	29:32	29:47	5	j ++ , dst += c -> framebuf_stride
water	29:32	0:0	6	j
op	29:33	0:0	6	++
water	29:35	0:0	6	,
water	29:37	0:0	6	dst
op	29:41	0:0	6	+=
water	29:44	0:0	6	c
op	29:45	0:0	6	->
water	29:47	0:0	6	framebuf_stride
stmts	30:12	31:46	5	
for	30:12	31:46	6	(i = 0 ;i < width;i ++)
forinit	30:17	30:22	7	i = 0 ;
water	30:17	0:0	8	i
op	30:19	0:0	8	=
water	30:21	0:0	8	0
water	30:22	0:0	8	;
cond	30:24	30:28	7	i < width
water	30:24	0:0	8	i
op	30:26	0:0	8	<
water	30:28	0:0	8	width
forexpr	30:35	30:36	7	i ++
water	30:35	0:0	8	i
op	30:36	0:0	8	++
stmts	31:16	31:46	7	
call	31:16	31:45	8	memcpy
arg	31:23	31:34	9	dst+i*3
water	31:23	0:0	10	dst
op	31:27	0:0	10	+
water	31:29	0:0	10	i
op	31:31	0:0	10	*
water	31:33	0:0	10	3
arg	31:36	31:42	9	transp
water	31:36	0:0	10	transp
arg	31:44	31:45	9	3
water	31:44	0:0	10	3
water	31:46	0:0	8	;
return	32:8	32:16	4	0
water	32:15	0:0	5	0
water	33:4	0:0	4	}
else	33:6	36:4	2
stmts	33:11	36:4	3	
if	33:11	36:4	4	(sub_type == 1)
cond	33:15	33:27	5	sub_type == 1
water	33:15	0:0	6	sub_type
op	33:24	0:0	6	==
water	33:27	0:0	6	1
stmts	33:30	36:4	5	
water	33:30	0:0	6	{
return	34:8	35:70	6	jpg_decode_data(&c->jc,width,height,src,src_end-src,dst,c->framebuf_stride,NULL,0,0,0)
call	34:15	35:69	7	jpg_decode_data
arg	34:31	34:37	8	&c->jc
op	34:31	0:0	9	&
water	34:32	0:0	9	c
op	34:33	0:0	9	->
water	34:35	0:0	9	jc
arg	34:39	34:44	8	width
water	34:39	0:0	9	width
arg	34:46	34:52	8	height
water	34:46	0:0	9	height
arg	34:54	34:57	8	src
water	34:54	0:0	9	src
arg	34:59	34:72	8	src_end-src
water	34:59	0:0	9	src_end
op	34:67	0:0	9	-
water	34:69	0:0	9	src
arg	35:31	35:34	8	dst
water	35:31	0:0	9	dst
arg	35:36	35:54	8	c->framebuf_stride
water	35:36	0:0	9	c
op	35:37	0:0	9	->
water	35:39	0:0	9	framebuf_stride
arg	35:56	35:60	8	NULL
water	35:56	0:0	9	NULL
arg	35:62	35:63	8	0
water	35:62	0:0	9	0
arg	35:65	35:66	8	0
water	35:65	0:0	9	0
arg	35:68	35:69	8	0
water	35:68	0:0	9	0
water	36:4	0:0	6	}
if	38:4	41:4	2	(sub_type != 2)
cond	38:8	38:20	3	sub_type != 2
water	38:8	0:0	4	sub_type
op	38:17	0:0	4	!=
water	38:20	0:0	4	2
stmts	38:23	41:4	3	
water	38:23	0:0	4	{
call	39:8	39:29	4	memcpy
arg	39:15	39:21	5	transp
water	39:15	0:0	6	transp
arg	39:23	39:26	5	src
water	39:23	0:0	6	src
arg	39:28	39:29	5	3
water	39:28	0:0	6	3
water	39:30	0:0	4	;
water	40:8	0:0	4	src
op	40:12	0:0	4	+=
water	40:15	0:0	4	3
water	40:16	0:0	4	;
water	41:4	0:0	4	}
water	42:4	0:0	2	npal
op	42:9	0:0	2	=
op	42:11	0:0	2	*
water	42:12	0:0	2	src
op	42:15	0:0	2	++
op	42:18	0:0	2	+
water	42:20	0:0	2	1
water	42:21	0:0	2	;
call	43:4	43:29	2	memcpy
arg	43:11	43:14	3	pal
water	43:11	0:0	4	pal
arg	43:16	43:19	3	src
water	43:16	0:0	4	src
arg	43:21	43:29	3	npal*3
water	43:21	0:0	4	npal
op	43:26	0:0	4	*
water	43:28	0:0	4	3
water	43:30	0:0	2	;
water	43:32	0:0	2	src
op	43:36	0:0	2	+=
water	43:39	0:0	2	npal
op	43:44	0:0	2	*
water	43:46	0:0	2	3
water	43:47	0:0	2	;
if	44:4	51:4	2	(sub_type != 2)
cond	44:8	44:20	3	sub_type != 2
water	44:8	0:0	4	sub_type
op	44:17	0:0	4	!=
water	44:20	0:0	4	2
stmts	44:23	51:4	3	
water	44:23	0:0	4	{
for	45:8	50:8	4	(i = 0 ;i < npal;i ++)
forinit	45:13	45:18	5	i = 0 ;
water	45:13	0:0	6	i
op	45:15	0:0	6	=
water	45:17	0:0	6	0
water	45:18	0:0	6	;
cond	45:20	45:24	5	i < npal
water	45:20	0:0	6	i
op	45:22	0:0	6	<
water	45:24	0:0	6	npal
forexpr	45:30	45:31	5	i ++
water	45:30	0:0	6	i
op	45:31	0:0	6	++
stmts	45:35	50:8	5	
water	45:35	0:0	6	{
if	46:12	49:12	6	(!memcmp (pal + i * 3 ,transp ,3 ))
cond	46:16	46:46	7	!memcmp (pal + i * 3 ,transp ,3 )
op	46:16	0:0	8	!
call	46:17	46:46	8	memcmp
arg	46:24	46:35	9	pal+i*3
water	46:24	0:0	10	pal
op	46:28	0:0	10	+
water	46:30	0:0	10	i
op	46:32	0:0	10	*
water	46:34	0:0	10	3
arg	46:37	46:43	9	transp
water	46:37	0:0	10	transp
arg	46:45	46:46	9	3
water	46:45	0:0	10	3
stmts	46:49	49:12	7	
water	46:49	0:0	8	{
water	47:15	0:0	8	tidx
op	47:20	0:0	8	=
water	47:22	0:0	8	i
water	47:23	0:0	8	;
break	48:15	48:20	8	
water	49:12	0:0	8	}
water	50:8	0:0	6	}
water	51:4	0:0	4	}
if	53:4	54:16	2	(src_end - src < 2)
cond	53:8	53:24	3	src_end - src < 2
water	53:8	0:0	4	src_end
op	53:16	0:0	4	-
water	53:18	0:0	4	src
op	53:22	0:0	4	<
water	53:24	0:0	4	2
stmts	54:8	54:16	3	
return	54:8	54:16	4	0
water	54:15	0:0	5	0
water	55:4	0:0	2	zsize
op	55:10	0:0	2	=
water	55:12	0:0	2	(
water	55:13	0:0	2	src
op	55:16	0:0	2	[
water	55:17	0:0	2	0
op	55:18	0:0	2	]
op	55:20	0:0	2	<<
water	55:23	0:0	2	8
water	55:24	0:0	2	)
op	55:26	0:0	2	|
water	55:28	0:0	2	src
op	55:31	0:0	2	[
water	55:32	0:0	2	1
op	55:33	0:0	2	]
water	55:34	0:0	2	;
water	55:36	0:0	2	src
op	55:40	0:0	2	+=
water	55:43	0:0	2	2
water	55:44	0:0	2	;
if	57:4	58:34	2	(src_end - src < zsize)
cond	57:8	57:24	3	src_end - src < zsize
water	57:8	0:0	4	src_end
op	57:16	0:0	4	-
water	57:18	0:0	4	src
op	57:22	0:0	4	<
water	57:24	0:0	4	zsize
stmts	58:8	58:34	3	
return	58:8	58:34	4	AVERROR_INVALIDDATA
water	58:15	0:0	5	AVERROR_INVALIDDATA
water	60:4	0:0	2	ret
op	60:8	0:0	2	=
call	60:10	60:52	2	uncompress
arg	60:21	60:33	3	c->kempf_buf
water	60:21	0:0	4	c
op	60:22	0:0	4	->
water	60:24	0:0	4	kempf_buf
arg	60:35	60:40	3	&dlen
op	60:35	0:0	4	&
water	60:36	0:0	4	dlen
arg	60:42	60:45	3	src
water	60:42	0:0	4	src
arg	60:47	60:52	3	zsize
water	60:47	0:0	4	zsize
water	60:53	0:0	2	;
if	61:4	62:34	2	(ret)
cond	61:8	61:8	3	ret
water	61:8	0:0	4	ret
stmts	62:8	62:34	3	
return	62:8	62:34	4	AVERROR_INVALIDDATA
water	62:15	0:0	5	AVERROR_INVALIDDATA
water	63:4	0:0	2	src
op	63:8	0:0	2	+=
water	63:11	0:0	2	zsize
water	63:16	0:0	2	;
if	65:4	69:4	2	(sub_type == 2)
cond	65:8	65:20	3	sub_type == 2
water	65:8	0:0	4	sub_type
op	65:17	0:0	4	==
water	65:20	0:0	4	2
stmts	65:23	69:4	3	
water	65:23	0:0	4	{
call	66:8	67:65	4	kempf_restore_buf
arg	66:26	66:38	5	c->kempf_buf
water	66:26	0:0	6	c
op	66:27	0:0	6	->
water	66:29	0:0	6	kempf_buf
arg	66:40	66:44	5	dlen
water	66:40	0:0	6	dlen
arg	66:46	66:49	5	dst
water	66:46	0:0	6	dst
arg	66:51	66:69	5	c->framebuf_stride
water	66:51	0:0	6	c
op	66:52	0:0	6	->
water	66:54	0:0	6	framebuf_stride
arg	67:26	67:30	5	NULL
water	67:26	0:0	6	NULL
arg	67:32	67:33	5	0
water	67:32	0:0	6	0
arg	67:35	67:40	5	width
water	67:35	0:0	6	width
arg	67:42	67:48	5	height
water	67:42	0:0	6	height
arg	67:50	67:53	5	pal
water	67:50	0:0	6	pal
arg	67:55	67:59	5	npal
water	67:55	0:0	6	npal
arg	67:61	67:65	5	tidx
water	67:61	0:0	6	tidx
water	67:66	0:0	4	;
return	68:8	68:16	4	0
water	68:15	0:0	5	0
water	69:4	0:0	4	}
water	71:4	0:0	2	nblocks
op	71:12	0:0	2	=
op	71:14	0:0	2	*
water	71:15	0:0	2	src
op	71:18	0:0	2	++
op	71:21	0:0	2	+
water	71:23	0:0	2	1
water	71:24	0:0	2	;
water	72:4	0:0	2	cblocks
op	72:12	0:0	2	=
water	72:14	0:0	2	0
water	72:15	0:0	2	;
water	73:4	0:0	2	bstride
op	73:12	0:0	2	=
call	73:14	73:31	2	FFALIGN
arg	73:22	73:27	3	width
water	73:22	0:0	4	width
arg	73:29	73:31	3	16
water	73:29	0:0	4	16
op	73:33	0:0	2	>>
water	73:36	0:0	2	4
water	73:37	0:0	2	;
water	75:4	0:0	2	bits
op	75:9	0:0	2	=
water	75:11	0:0	2	0
water	75:12	0:0	2	;
for	76:4	90:4	2	(i = 0 ;i < (FFALIGN (height ,16 ) >> 4 );i ++)
forinit	76:9	76:14	3	i = 0 ;
water	76:9	0:0	4	i
op	76:11	0:0	4	=
water	76:13	0:0	4	0
water	76:14	0:0	4	;
cond	76:16	76:45	3	i < (FFALIGN (height ,16 ) >> 4 )
water	76:16	0:0	4	i
op	76:18	0:0	4	<
water	76:20	0:0	4	(
call	76:21	76:39	4	FFALIGN
arg	76:29	76:35	5	height
water	76:29	0:0	6	height
arg	76:37	76:39	5	16
water	76:37	0:0	6	16
op	76:41	0:0	4	>>
water	76:44	0:0	4	4
water	76:45	0:0	4	)
forexpr	76:48	76:49	3	i ++
water	76:48	0:0	4	i
op	76:49	0:0	4	++
stmts	76:53	90:4	3	
water	76:53	0:0	4	{
for	77:8	89:8	4	(j = 0 ;j < (FFALIGN (width ,16 ) >> 4 );j ++)
forinit	77:13	77:18	5	j = 0 ;
water	77:13	0:0	6	j
op	77:15	0:0	6	=
water	77:17	0:0	6	0
water	77:18	0:0	6	;
cond	77:20	77:48	5	j < (FFALIGN (width ,16 ) >> 4 )
water	77:20	0:0	6	j
op	77:22	0:0	6	<
water	77:24	0:0	6	(
call	77:25	77:42	6	FFALIGN
arg	77:33	77:38	7	width
water	77:33	0:0	8	width
arg	77:40	77:42	7	16
water	77:40	0:0	8	16
op	77:44	0:0	6	>>
water	77:47	0:0	6	4
water	77:48	0:0	6	)
forexpr	77:51	77:52	5	j ++
water	77:51	0:0	6	j
op	77:52	0:0	6	++
stmts	77:56	89:8	5	
water	77:56	0:0	6	{
if	78:12	81:12	6	(! bits)
cond	78:16	78:17	7	! bits
op	78:16	0:0	8	!
water	78:17	0:0	8	bits
stmts	78:23	81:12	7	
water	78:23	0:0	8	{
water	79:16	0:0	8	bitbuf
op	79:23	0:0	8	=
op	79:25	0:0	8	*
water	79:26	0:0	8	src
op	79:29	0:0	8	++
water	79:31	0:0	8	;
water	80:16	0:0	8	bits
op	80:23	0:0	8	=
water	80:25	0:0	8	8
water	80:26	0:0	8	;
water	81:12	0:0	8	}
water	82:12	0:0	6	coded
op	82:18	0:0	6	=
water	82:20	0:0	6	bitbuf
op	82:27	0:0	6	&
water	82:29	0:0	6	1
water	82:30	0:0	6	;
water	83:12	0:0	6	bits
op	83:16	0:0	6	--
water	83:18	0:0	6	;
water	84:12	0:0	6	bitbuf
op	84:19	0:0	6	>>=
water	84:23	0:0	6	1
water	84:24	0:0	6	;
water	85:12	0:0	6	cblocks
op	85:20	0:0	6	+=
water	85:23	0:0	6	coded
water	85:28	0:0	6	;
if	86:12	87:42	6	(cblocks > nblocks)
cond	86:16	86:26	7	cblocks > nblocks
water	86:16	0:0	8	cblocks
op	86:24	0:0	8	>
water	86:26	0:0	8	nblocks
stmts	87:16	87:42	7	
return	87:16	87:42	8	AVERROR_INVALIDDATA
water	87:23	0:0	9	AVERROR_INVALIDDATA
water	88:12	0:0	6	c
op	88:13	0:0	6	->
water	88:15	0:0	6	kempf_flags
op	88:26	0:0	6	[
water	88:27	0:0	6	j
op	88:29	0:0	6	+
water	88:31	0:0	6	i
op	88:33	0:0	6	*
water	88:35	0:0	6	bstride
op	88:42	0:0	6	]
op	88:44	0:0	6	=
water	88:46	0:0	6	coded
water	88:51	0:0	6	;
water	89:8	0:0	6	}
water	90:4	0:0	4	}
call	92:4	92:51	2	memset
arg	92:11	92:23	3	c->jpeg_tile
water	92:11	0:0	4	c
op	92:12	0:0	4	->
water	92:14	0:0	4	jpeg_tile
arg	92:25	92:26	3	0
water	92:25	0:0	4	0
arg	92:28	92:51	3	c->tile_stride*height
water	92:28	0:0	4	c
op	92:29	0:0	4	->
water	92:31	0:0	4	tile_stride
op	92:43	0:0	4	*
water	92:45	0:0	4	height
water	92:52	0:0	2	;
call	93:4	95:55	2	jpg_decode_data
arg	93:20	93:26	3	&c->jc
op	93:20	0:0	4	&
water	93:21	0:0	4	c
op	93:22	0:0	4	->
water	93:24	0:0	4	jc
arg	93:28	93:33	3	width
water	93:28	0:0	4	width
arg	93:35	93:41	3	height
water	93:35	0:0	4	height
arg	93:43	93:46	3	src
water	93:43	0:0	4	src
arg	93:48	93:61	3	src_end-src
water	93:48	0:0	4	src_end
op	93:56	0:0	4	-
water	93:58	0:0	4	src
arg	94:20	94:32	3	c->jpeg_tile
water	94:20	0:0	4	c
op	94:21	0:0	4	->
water	94:23	0:0	4	jpeg_tile
arg	94:34	94:48	3	c->tile_stride
water	94:34	0:0	4	c
op	94:35	0:0	4	->
water	94:37	0:0	4	tile_stride
arg	95:20	95:34	3	c->kempf_flags
water	95:20	0:0	4	c
op	95:21	0:0	4	->
water	95:23	0:0	4	kempf_flags
arg	95:36	95:43	3	bstride
water	95:36	0:0	4	bstride
arg	95:45	95:52	3	nblocks
water	95:45	0:0	4	nblocks
arg	95:54	95:55	3	0
water	95:54	0:0	4	0
water	95:56	0:0	2	;
call	97:4	99:52	2	kempf_restore_buf
arg	97:22	97:34	3	c->kempf_buf
water	97:22	0:0	4	c
op	97:23	0:0	4	->
water	97:25	0:0	4	kempf_buf
arg	97:36	97:40	3	dlen
water	97:36	0:0	4	dlen
arg	97:42	97:45	3	dst
water	97:42	0:0	4	dst
arg	97:47	97:65	3	c->framebuf_stride
water	97:47	0:0	4	c
op	97:48	0:0	4	->
water	97:50	0:0	4	framebuf_stride
arg	98:22	98:34	3	c->jpeg_tile
water	98:22	0:0	4	c
op	98:23	0:0	4	->
water	98:25	0:0	4	jpeg_tile
arg	98:36	98:50	3	c->tile_stride
water	98:36	0:0	4	c
op	98:37	0:0	4	->
water	98:39	0:0	4	tile_stride
arg	99:22	99:27	3	width
water	99:22	0:0	4	width
arg	99:29	99:35	3	height
water	99:29	0:0	4	height
arg	99:37	99:40	3	pal
water	99:37	0:0	4	pal
arg	99:42	99:46	3	npal
water	99:42	0:0	4	npal
arg	99:48	99:52	3	tidx
water	99:48	0:0	4	tidx
water	99:53	0:0	2	;
return	101:4	101:12	2	0
water	101:11	0:0	3	0
