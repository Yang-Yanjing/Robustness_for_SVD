func	2:0	119:0	0	static int	nsv_parse_NSVf_header
params	2:32	0:0	1	
param	2:33	2:51	2	AVFormatContext *	s
param	2:53	2:75	2	AVFormatParameters *	ap
stmnts	0:0	118:12	1	
decl	4:4	4:34	2	NSVContext	*nsv
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	priv_data
decl	5:4	5:27	2	AVIOContext	*pb
op	5:20	0:0	2	=
water	5:22	0:0	2	s
op	5:23	0:0	2	->
water	5:25	0:0	2	pb
water	6:4	0:0	2	unsigned
water	6:13	0:0	2	int
water	6:17	0:0	2	av_unused
water	6:27	0:0	2	file_size
water	6:36	0:0	2	;
decl	7:4	7:21	2	unsigned int	size
decl	8:4	8:20	2	int64_t	duration
decl	9:4	9:20	2	int	strings_size
decl	10:4	10:21	2	int	table_entries
decl	11:4	11:26	2	int	table_entries_used
call	13:4	13:37	2	av_dlog
arg	13:12	13:13	3	s
water	13:12	0:0	4	s
arg	13:15	13:23	3	"%s()\n"
water	13:15	0:0	4	"%s()\n"
arg	13:25	13:37	3	__FUNCTION__
water	13:25	0:0	4	__FUNCTION__
water	13:38	0:0	2	;
water	15:4	0:0	2	nsv
op	15:7	0:0	2	->
water	15:9	0:0	2	state
op	15:15	0:0	2	=
water	15:17	0:0	2	NSV_UNSYNC
water	15:27	0:0	2	;
water	17:4	0:0	2	size
op	17:9	0:0	2	=
call	17:11	17:23	2	avio_rl32
arg	17:21	17:23	3	pb
water	17:21	0:0	4	pb
water	17:24	0:0	2	;
if	18:4	19:17	2	(size < 28)
cond	18:8	18:15	3	size < 28
water	18:8	0:0	4	size
op	18:13	0:0	4	<
water	18:15	0:0	4	28
stmts	19:8	19:17	3	
return	19:8	19:17	4	-1
op	19:15	0:0	5	-
water	19:16	0:0	5	1
water	20:4	0:0	2	nsv
op	20:7	0:0	2	->
water	20:9	0:0	2	NSVf_end
op	20:18	0:0	2	=
water	20:20	0:0	2	size
water	20:24	0:0	2	;
water	23:4	0:0	2	file_size
op	23:14	0:0	2	=
water	23:16	0:0	2	(
water	23:17	0:0	2	uint32_t
water	23:25	0:0	2	)
call	23:26	23:38	2	avio_rl32
arg	23:36	23:38	3	pb
water	23:36	0:0	4	pb
water	23:39	0:0	2	;
call	24:4	24:47	2	av_dlog
arg	24:12	24:13	3	s
water	24:12	0:0	4	s
arg	24:15	24:41	3	"NSV NSVf chunk_size %u\n"
water	24:15	0:0	4	"NSV NSVf chunk_size %u\n"
arg	24:43	24:47	3	size
water	24:43	0:0	4	size
water	24:48	0:0	2	;
call	25:4	25:51	2	av_dlog
arg	25:12	25:13	3	s
water	25:12	0:0	4	s
arg	25:15	25:40	3	"NSV NSVf file_size %u\n"
water	25:15	0:0	4	"NSV NSVf file_size %u\n"
arg	25:42	25:51	3	file_size
water	25:42	0:0	4	file_size
water	25:52	0:0	2	;
water	27:4	0:0	2	nsv
op	27:7	0:0	2	->
water	27:9	0:0	2	duration
op	27:18	0:0	2	=
water	27:20	0:0	2	duration
op	27:29	0:0	2	=
call	27:31	27:43	2	avio_rl32
arg	27:41	27:43	3	pb
water	27:41	0:0	4	pb
water	27:44	0:0	2	;
call	28:4	28:59	2	av_dlog
arg	28:12	28:13	3	s
water	28:12	0:0	4	s
arg	28:15	28:49	3	"NSV NSVf duration %"PRId64" ms\n"
water	28:15	0:0	4	"NSV NSVf duration %"
water	28:36	0:0	4	PRId64
water	28:42	0:0	4	" ms\n"
arg	28:51	28:59	3	duration
water	28:51	0:0	4	duration
water	28:60	0:0	2	;
water	31:4	0:0	2	strings_size
op	31:17	0:0	2	=
call	31:19	31:31	2	avio_rl32
arg	31:29	31:31	3	pb
water	31:29	0:0	4	pb
water	31:32	0:0	2	;
water	32:4	0:0	2	table_entries
op	32:18	0:0	2	=
call	32:20	32:32	2	avio_rl32
arg	32:30	32:32	3	pb
water	32:30	0:0	4	pb
water	32:33	0:0	2	;
water	33:4	0:0	2	table_entries_used
op	33:23	0:0	2	=
call	33:25	33:37	2	avio_rl32
arg	33:35	33:37	3	pb
water	33:35	0:0	4	pb
water	33:38	0:0	2	;
call	34:4	35:59	2	av_dlog
arg	34:12	34:13	3	s
water	34:12	0:0	4	s
arg	34:15	34:76	3	"NSV NSVf info-strings size: %d, table entries: %d, bis %d\n"
water	34:15	0:0	4	"NSV NSVf info-strings size: %d, table entries: %d, bis %d\n"
arg	35:12	35:24	3	strings_size
water	35:12	0:0	4	strings_size
arg	35:26	35:39	3	table_entries
water	35:26	0:0	4	table_entries
arg	35:41	35:59	3	table_entries_used
water	35:41	0:0	4	table_entries_used
water	35:60	0:0	2	;
if	36:4	37:17	2	(url_feof (pb ))
cond	36:8	36:19	3	url_feof (pb )
call	36:8	36:19	4	url_feof
arg	36:17	36:19	5	pb
water	36:17	0:0	6	pb
stmts	37:8	37:17	3	
return	37:8	37:17	4	-1
op	37:15	0:0	5	-
water	37:16	0:0	5	1
call	39:4	39:67	2	av_dlog
arg	39:12	39:13	3	s
water	39:12	0:0	4	s
arg	39:15	39:52	3	"NSV got header; filepos %"PRId64"\n"
water	39:15	0:0	4	"NSV got header; filepos %"
water	39:42	0:0	4	PRId64
water	39:48	0:0	4	"\n"
arg	39:54	39:67	3	avio_tell(pb)
call	39:54	39:66	4	avio_tell
arg	39:64	39:66	5	pb
water	39:64	0:0	6	pb
water	39:68	0:0	2	;
if	41:4	70:4	2	(strings_size > 0)
cond	41:8	41:23	3	strings_size > 0
water	41:8	0:0	4	strings_size
op	41:21	0:0	4	>
water	41:23	0:0	4	0
stmts	41:26	70:4	3	
water	41:26	0:0	4	{
decl	42:8	42:21	4	char	*strings
decl	43:8	43:22	4	char	*p
water	43:15	0:0	4	,
decl	43:8	43:22	4	char	*endp
decl	44:8	44:27	4	char	*token
water	44:19	0:0	4	,
decl	44:8	44:27	4	char	*value
decl	45:8	45:18	4	char	quote
water	47:8	0:0	4	p
op	47:10	0:0	4	=
water	47:12	0:0	4	strings
op	47:20	0:0	4	=
call	47:22	47:49	4	av_mallocz
arg	47:33	47:49	5	strings_size+1
water	47:33	0:0	6	strings_size
op	47:46	0:0	6	+
water	47:48	0:0	6	1
water	47:50	0:0	4	;
water	48:8	0:0	4	endp
op	48:13	0:0	4	=
water	48:15	0:0	4	strings
op	48:23	0:0	4	+
water	48:25	0:0	4	strings_size
water	48:37	0:0	4	;
call	49:8	49:43	4	avio_read
arg	49:18	49:20	5	pb
water	49:18	0:0	6	pb
arg	49:22	49:29	5	strings
water	49:22	0:0	6	strings
arg	49:31	49:43	5	strings_size
water	49:31	0:0	6	strings_size
water	49:44	0:0	4	;
while	50:8	68:8	4	(p < endp)
cond	50:15	50:19	5	p < endp
water	50:15	0:0	6	p
op	50:17	0:0	6	<
water	50:19	0:0	6	endp
stmts	50:25	68:8	5	
water	50:25	0:0	6	{
while	51:12	52:19	6	(* p == ' ')
cond	51:19	51:25	7	* p == ' '
op	51:19	0:0	8	*
water	51:20	0:0	8	p
op	51:22	0:0	8	==
water	51:25	0:0	8	' '
stmts	52:16	52:19	7	
water	52:16	0:0	8	p
op	52:17	0:0	8	++
water	52:19	0:0	8	;
if	53:12	54:21	6	(p >= endp - 2)
cond	53:16	53:26	7	p >= endp - 2
water	53:16	0:0	8	p
op	53:18	0:0	8	>=
water	53:21	0:0	8	endp
op	53:25	0:0	8	-
water	53:26	0:0	8	2
stmts	54:16	54:21	7	
break	54:16	54:21	8	
water	55:12	0:0	6	token
op	55:18	0:0	6	=
water	55:20	0:0	6	p
water	55:21	0:0	6	;
water	56:12	0:0	6	p
op	56:14	0:0	6	=
call	56:16	56:29	6	strchr
arg	56:23	56:24	7	p
water	56:23	0:0	8	p
arg	56:26	56:29	7	'='
water	56:26	0:0	8	'='
water	56:30	0:0	6	;
if	57:12	58:21	6	(! p || p >= endp - 2)
cond	57:16	57:32	7	! p || p >= endp - 2
op	57:16	0:0	8	!
water	57:17	0:0	8	p
op	57:19	0:0	8	||
water	57:22	0:0	8	p
op	57:24	0:0	8	>=
water	57:27	0:0	8	endp
op	57:31	0:0	8	-
water	57:32	0:0	8	2
stmts	58:16	58:21	7	
break	58:16	58:21	8	
op	59:12	0:0	6	*
water	59:13	0:0	6	p
op	59:14	0:0	6	++
op	59:17	0:0	6	=
water	59:19	0:0	6	'\0'
water	59:23	0:0	6	;
water	60:12	0:0	6	quote
op	60:18	0:0	6	=
op	60:20	0:0	6	*
water	60:21	0:0	6	p
op	60:22	0:0	6	++
water	60:24	0:0	6	;
water	61:12	0:0	6	value
op	61:18	0:0	6	=
water	61:20	0:0	6	p
water	61:21	0:0	6	;
water	62:12	0:0	6	p
op	62:14	0:0	6	=
call	62:16	62:31	6	strchr
arg	62:23	62:24	7	p
water	62:23	0:0	8	p
arg	62:26	62:31	7	quote
water	62:26	0:0	8	quote
water	62:32	0:0	6	;
if	63:12	64:21	6	(! p || p >= endp)
cond	63:16	63:27	7	! p || p >= endp
op	63:16	0:0	8	!
water	63:17	0:0	8	p
op	63:19	0:0	8	||
water	63:22	0:0	8	p
op	63:24	0:0	8	>=
water	63:27	0:0	8	endp
stmts	64:16	64:21	7	
break	64:16	64:21	8	
op	65:12	0:0	6	*
water	65:13	0:0	6	p
op	65:14	0:0	6	++
op	65:17	0:0	6	=
water	65:19	0:0	6	'\0'
water	65:23	0:0	6	;
call	66:12	66:63	6	av_dlog
arg	66:20	66:21	7	s
water	66:20	0:0	8	s
arg	66:23	66:49	7	"NSV NSVf INFO: %s='%s'\n"
water	66:23	0:0	8	"NSV NSVf INFO: %s='%s'\n"
arg	66:51	66:56	7	token
water	66:51	0:0	8	token
arg	66:58	66:63	7	value
water	66:58	0:0	8	value
water	66:64	0:0	6	;
call	67:12	67:53	6	av_dict_set
arg	67:24	67:36	7	&s->metadata
op	67:24	0:0	8	&
water	67:25	0:0	8	s
op	67:26	0:0	8	->
water	67:28	0:0	8	metadata
arg	67:38	67:43	7	token
water	67:38	0:0	8	token
arg	67:45	67:50	7	value
water	67:45	0:0	8	value
arg	67:52	67:53	7	0
water	67:52	0:0	8	0
water	67:54	0:0	6	;
water	68:8	0:0	6	}
call	69:8	69:23	4	av_free
arg	69:16	69:23	5	strings
water	69:16	0:0	6	strings
water	69:24	0:0	4	;
water	70:4	0:0	4	}
if	71:4	72:17	2	(url_feof (pb ))
cond	71:8	71:19	3	url_feof (pb )
call	71:8	71:19	4	url_feof
arg	71:17	71:19	5	pb
water	71:17	0:0	6	pb
stmts	72:8	72:17	3	
return	72:8	72:17	4	-1
op	72:15	0:0	5	-
water	72:16	0:0	5	1
call	74:4	74:66	2	av_dlog
arg	74:12	74:13	3	s
water	74:12	0:0	4	s
arg	74:15	74:51	3	"NSV got infos; filepos %"PRId64"\n"
water	74:15	0:0	4	"NSV got infos; filepos %"
water	74:41	0:0	4	PRId64
water	74:47	0:0	4	"\n"
arg	74:53	74:66	3	avio_tell(pb)
call	74:53	74:65	4	avio_tell
arg	74:63	74:65	5	pb
water	74:63	0:0	6	pb
water	74:67	0:0	2	;
if	76:4	93:4	2	(table_entries_used > 0)
cond	76:8	76:29	3	table_entries_used > 0
water	76:8	0:0	4	table_entries_used
op	76:27	0:0	4	>
water	76:29	0:0	4	0
stmts	76:32	93:4	3	
water	76:32	0:0	4	{
decl	77:8	77:13	4	int	i
water	78:8	0:0	4	nsv
op	78:11	0:0	4	->
water	78:13	0:0	4	index_entries
op	78:27	0:0	4	=
water	78:29	0:0	4	table_entries_used
water	78:47	0:0	4	;
if	79:8	80:21	4	(( unsigned ) table_entries_used >= UINT_MAX / sizeof ( uint32_t ))
cond	79:11	79:69	5	( unsigned ) table_entries_used >= UINT_MAX / sizeof ( uint32_t )
water	79:11	0:0	6	(
water	79:12	0:0	6	unsigned
water	79:20	0:0	6	)
water	79:21	0:0	6	table_entries_used
op	79:40	0:0	6	>=
water	79:43	0:0	6	UINT_MAX
op	79:52	0:0	6	/
op	79:54	0:0	6	sizeof
water	79:60	0:0	6	(
water	79:61	0:0	6	uint32_t
water	79:69	0:0	6	)
stmts	80:12	80:21	5	
return	80:12	80:21	6	-1
op	80:19	0:0	7	-
water	80:20	0:0	7	1
water	81:8	0:0	4	nsv
op	81:11	0:0	4	->
water	81:13	0:0	4	nsvs_file_offset
op	81:30	0:0	4	=
call	81:32	81:89	4	av_malloc
arg	81:42	81:89	5	(unsigned)table_entries_used*sizeof(uint32_t)
water	81:42	0:0	6	(
water	81:43	0:0	6	unsigned
water	81:51	0:0	6	)
water	81:52	0:0	6	table_entries_used
op	81:71	0:0	6	*
op	81:73	0:0	6	sizeof
water	81:79	0:0	6	(
water	81:80	0:0	6	uint32_t
water	81:88	0:0	6	)
water	81:90	0:0	4	;
for	83:8	84:59	4	(i = 0 ;i < table_entries_used;i ++)
forinit	83:12	83:15	5	i = 0 ;
water	83:12	0:0	6	i
op	83:13	0:0	6	=
water	83:14	0:0	6	0
water	83:15	0:0	6	;
cond	83:16	83:18	5	i < table_entries_used
water	83:16	0:0	6	i
op	83:17	0:0	6	<
water	83:18	0:0	6	table_entries_used
forexpr	83:37	83:38	5	i ++
water	83:37	0:0	6	i
op	83:38	0:0	6	++
stmts	84:12	84:59	5	
water	84:12	0:0	6	nsv
op	84:15	0:0	6	->
water	84:17	0:0	6	nsvs_file_offset
op	84:33	0:0	6	[
water	84:34	0:0	6	i
op	84:35	0:0	6	]
op	84:37	0:0	6	=
call	84:39	84:51	6	avio_rl32
arg	84:49	84:51	7	pb
water	84:49	0:0	8	pb
op	84:53	0:0	6	+
water	84:55	0:0	6	size
water	84:59	0:0	6	;
if	86:8	92:8	4	(table_entries > table_entries_used &&avio_rl32 (pb ) ==MKTAG ('T' ,'O' ,'C' ,'2' ))
cond	86:11	87:49	5	table_entries > table_entries_used &&avio_rl32 (pb ) ==MKTAG ('T' ,'O' ,'C' ,'2' )
water	86:11	0:0	6	table_entries
op	86:25	0:0	6	>
water	86:27	0:0	6	table_entries_used
op	86:46	0:0	6	&&
call	87:11	87:23	6	avio_rl32
arg	87:21	87:23	7	pb
water	87:21	0:0	8	pb
op	87:25	0:0	6	==
call	87:28	87:49	6	MKTAG
arg	87:34	87:37	7	'T'
water	87:34	0:0	8	'T'
arg	87:38	87:41	7	'O'
water	87:38	0:0	8	'O'
arg	87:42	87:45	7	'C'
water	87:42	0:0	8	'C'
arg	87:46	87:49	7	'2'
water	87:46	0:0	8	'2'
stmts	87:52	92:8	5	
water	87:52	0:0	6	{
water	88:12	0:0	6	nsv
op	88:15	0:0	6	->
water	88:17	0:0	6	nsvs_timestamps
op	88:33	0:0	6	=
call	88:35	88:90	6	av_malloc
arg	88:45	88:90	7	(unsigned)table_entries_used*sizeof(uint32_t)
water	88:45	0:0	8	(
water	88:46	0:0	8	unsigned
water	88:54	0:0	8	)
water	88:55	0:0	8	table_entries_used
op	88:73	0:0	8	*
op	88:74	0:0	8	sizeof
water	88:80	0:0	8	(
water	88:81	0:0	8	uint32_t
water	88:89	0:0	8	)
water	88:91	0:0	6	;
for	89:12	91:12	6	(i = 0 ;i < table_entries_used;i ++)
forinit	89:16	89:19	7	i = 0 ;
water	89:16	0:0	8	i
op	89:17	0:0	8	=
water	89:18	0:0	8	0
water	89:19	0:0	8	;
cond	89:20	89:22	7	i < table_entries_used
water	89:20	0:0	8	i
op	89:21	0:0	8	<
water	89:22	0:0	8	table_entries_used
forexpr	89:41	89:42	7	i ++
water	89:41	0:0	8	i
op	89:42	0:0	8	++
stmts	89:46	91:12	7	
water	89:46	0:0	8	{
water	90:16	0:0	8	nsv
op	90:19	0:0	8	->
water	90:21	0:0	8	nsvs_timestamps
op	90:36	0:0	8	[
water	90:37	0:0	8	i
op	90:38	0:0	8	]
op	90:40	0:0	8	=
call	90:42	90:54	8	avio_rl32
arg	90:52	90:54	9	pb
water	90:52	0:0	10	pb
water	90:55	0:0	8	;
water	91:12	0:0	8	}
water	92:8	0:0	6	}
water	93:4	0:0	4	}
call	95:4	95:66	2	av_dlog
arg	95:12	95:13	3	s
water	95:12	0:0	4	s
arg	95:15	95:51	3	"NSV got index; filepos %"PRId64"\n"
water	95:15	0:0	4	"NSV got index; filepos %"
water	95:41	0:0	4	PRId64
water	95:47	0:0	4	"\n"
arg	95:53	95:66	3	avio_tell(pb)
call	95:53	95:65	4	avio_tell
arg	95:63	95:65	5	pb
water	95:63	0:0	6	pb
water	95:67	0:0	2	;
call	99:4	99:55	2	av_dlog
arg	99:12	99:13	3	s
water	99:12	0:0	4	s
arg	99:15	99:40	3	"NSV %d INDEX ENTRIES:\n"
water	99:15	0:0	4	"NSV %d INDEX ENTRIES:\n"
arg	99:42	99:55	3	table_entries
water	99:42	0:0	4	table_entries
water	99:56	0:0	2	;
call	100:4	100:62	2	av_dlog
arg	100:12	100:13	3	s
water	100:12	0:0	4	s
arg	100:15	100:47	3	"NSV [dataoffset][fileoffset]\n"
water	100:15	0:0	4	"NSV [dataoffset][fileoffset]\n"
arg	100:49	100:62	3	table_entries
water	100:49	0:0	4	table_entries
water	100:63	0:0	2	;
for	101:4	110:4	2	(i = 0 ;i < table_entries;i ++)
forinit	101:9	101:14	3	i = 0 ;
water	101:9	0:0	4	i
op	101:11	0:0	4	=
water	101:13	0:0	4	0
water	101:14	0:0	4	;
cond	101:16	101:20	3	i < table_entries
water	101:16	0:0	4	i
op	101:18	0:0	4	<
water	101:20	0:0	4	table_entries
forexpr	101:35	101:36	3	i ++
water	101:35	0:0	4	i
op	101:36	0:0	4	++
stmts	101:40	110:4	3	
water	101:40	0:0	4	{
decl	102:8	102:26	4	unsigned char	b[8]
call	103:8	103:63	4	avio_seek
arg	103:18	103:20	5	pb
water	103:18	0:0	6	pb
arg	103:22	103:53	5	size+nsv->nsvs_file_offset[i]
water	103:22	0:0	6	size
op	103:27	0:0	6	+
water	103:29	0:0	6	nsv
op	103:32	0:0	6	->
water	103:34	0:0	6	nsvs_file_offset
op	103:50	0:0	6	[
water	103:51	0:0	6	i
op	103:52	0:0	6	]
arg	103:55	103:63	5	SEEK_SET
water	103:55	0:0	6	SEEK_SET
water	103:64	0:0	4	;
call	104:8	104:26	4	avio_read
arg	104:18	104:20	5	pb
water	104:18	0:0	6	pb
arg	104:22	104:23	5	b
water	104:22	0:0	6	b
arg	104:25	104:26	5	8
water	104:25	0:0	6	8
water	104:27	0:0	4	;
call	105:8	109:82	4	av_dlog
arg	105:16	105:17	5	s
water	105:16	0:0	6	s
arg	105:19	106:31	5	"NSV [0x%08lx][0x%08lx]: %02x %02x %02x %02x %02x %02x %02x %02x""%c%c%c%c%c%c%c%c\n"
water	105:19	0:0	6	"NSV [0x%08lx][0x%08lx]: %02x %02x %02x %02x %02x %02x %02x %02x"
water	106:11	0:0	6	"%c%c%c%c%c%c%c%c\n"
arg	107:11	107:35	5	nsv->nsvs_file_offset[i]
water	107:11	0:0	6	nsv
op	107:14	0:0	6	->
water	107:16	0:0	6	nsvs_file_offset
op	107:32	0:0	6	[
water	107:33	0:0	6	i
op	107:34	0:0	6	]
arg	107:37	107:68	5	size+nsv->nsvs_file_offset[i]
water	107:37	0:0	6	size
op	107:42	0:0	6	+
water	107:44	0:0	6	nsv
op	107:47	0:0	6	->
water	107:49	0:0	6	nsvs_file_offset
op	107:65	0:0	6	[
water	107:66	0:0	6	i
op	107:67	0:0	6	]
arg	108:11	108:15	5	b[0]
water	108:11	0:0	6	b
op	108:12	0:0	6	[
water	108:13	0:0	6	0
op	108:14	0:0	6	]
arg	108:17	108:21	5	b[1]
water	108:17	0:0	6	b
op	108:18	0:0	6	[
water	108:19	0:0	6	1
op	108:20	0:0	6	]
arg	108:23	108:27	5	b[2]
water	108:23	0:0	6	b
op	108:24	0:0	6	[
water	108:25	0:0	6	2
op	108:26	0:0	6	]
arg	108:29	108:33	5	b[3]
water	108:29	0:0	6	b
op	108:30	0:0	6	[
water	108:31	0:0	6	3
op	108:32	0:0	6	]
arg	108:35	108:39	5	b[4]
water	108:35	0:0	6	b
op	108:36	0:0	6	[
water	108:37	0:0	6	4
op	108:38	0:0	6	]
arg	108:41	108:45	5	b[5]
water	108:41	0:0	6	b
op	108:42	0:0	6	[
water	108:43	0:0	6	5
op	108:44	0:0	6	]
arg	108:47	108:51	5	b[6]
water	108:47	0:0	6	b
op	108:48	0:0	6	[
water	108:49	0:0	6	6
op	108:50	0:0	6	]
arg	108:53	108:57	5	b[7]
water	108:53	0:0	6	b
op	108:54	0:0	6	[
water	108:55	0:0	6	7
op	108:56	0:0	6	]
arg	109:11	109:18	5	V(b[0])
call	109:11	109:17	6	V
arg	109:13	109:17	7	b[0]
water	109:13	0:0	8	b
op	109:14	0:0	8	[
water	109:15	0:0	8	0
op	109:16	0:0	8	]
arg	109:20	109:27	5	V(b[1])
call	109:20	109:26	6	V
arg	109:22	109:26	7	b[1]
water	109:22	0:0	8	b
op	109:23	0:0	8	[
water	109:24	0:0	8	1
op	109:25	0:0	8	]
arg	109:29	109:36	5	V(b[2])
call	109:29	109:35	6	V
arg	109:31	109:35	7	b[2]
water	109:31	0:0	8	b
op	109:32	0:0	8	[
water	109:33	0:0	8	2
op	109:34	0:0	8	]
arg	109:38	109:45	5	V(b[3])
call	109:38	109:44	6	V
arg	109:40	109:44	7	b[3]
water	109:40	0:0	8	b
op	109:41	0:0	8	[
water	109:42	0:0	8	3
op	109:43	0:0	8	]
arg	109:47	109:54	5	V(b[4])
call	109:47	109:53	6	V
arg	109:49	109:53	7	b[4]
water	109:49	0:0	8	b
op	109:50	0:0	8	[
water	109:51	0:0	8	4
op	109:52	0:0	8	]
arg	109:56	109:63	5	V(b[5])
call	109:56	109:62	6	V
arg	109:58	109:62	7	b[5]
water	109:58	0:0	8	b
op	109:59	0:0	8	[
water	109:60	0:0	8	5
op	109:61	0:0	8	]
arg	109:65	109:72	5	V(b[6])
call	109:65	109:71	6	V
arg	109:67	109:71	7	b[6]
water	109:67	0:0	8	b
op	109:68	0:0	8	[
water	109:69	0:0	8	6
op	109:70	0:0	8	]
arg	109:74	109:82	5	V(b[7])
call	109:74	109:80	6	V
arg	109:76	109:80	7	b[7]
water	109:76	0:0	8	b
op	109:77	0:0	8	[
water	109:78	0:0	8	7
op	109:79	0:0	8	]
water	109:83	0:0	4	;
water	110:4	0:0	4	}
call	113:4	113:51	2	avio_seek
arg	113:14	113:16	3	pb
water	113:14	0:0	4	pb
arg	113:18	113:41	3	nsv->base_offset+size
water	113:18	0:0	4	nsv
op	113:21	0:0	4	->
water	113:23	0:0	4	base_offset
op	113:35	0:0	4	+
water	113:37	0:0	4	size
arg	113:43	113:51	3	SEEK_SET
water	113:43	0:0	4	SEEK_SET
water	113:52	0:0	2	;
if	115:4	116:17	2	(url_feof (pb ))
cond	115:8	115:19	3	url_feof (pb )
call	115:8	115:19	4	url_feof
arg	115:17	115:19	5	pb
water	115:17	0:0	6	pb
stmts	116:8	116:17	3	
return	116:8	116:17	4	-1
op	116:15	0:0	5	-
water	116:16	0:0	5	1
water	117:4	0:0	2	nsv
op	117:7	0:0	2	->
water	117:9	0:0	2	state
op	117:15	0:0	2	=
water	117:17	0:0	2	NSV_HAS_READ_NSVF
water	117:34	0:0	2	;
return	118:4	118:12	2	0
water	118:11	0:0	3	0
