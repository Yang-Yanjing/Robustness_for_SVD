func	1:0	162:0	0	static void	rpza_decode_stream
params	1:30	0:0	1	
param	1:31	1:45	2	RpzaContext *	s
stmnts	0:0	161:4	1	
decl	3:4	3:31	2	int	width
op	3:14	0:0	2	=
water	3:16	0:0	2	s
op	3:17	0:0	2	->
water	3:19	0:0	2	avctx
op	3:24	0:0	2	->
water	3:26	0:0	2	width
decl	4:4	4:41	2	int	stride
op	4:15	0:0	2	=
water	4:17	0:0	2	s
op	4:18	0:0	2	->
water	4:20	0:0	2	frame
op	4:25	0:0	2	.
water	4:26	0:0	2	linesize
op	4:34	0:0	2	[
water	4:35	0:0	2	0
op	4:36	0:0	2	]
op	4:38	0:0	2	/
water	4:40	0:0	2	2
decl	5:4	5:28	2	int	row_inc
op	5:16	0:0	2	=
water	5:18	0:0	2	stride
op	5:25	0:0	2	-
water	5:27	0:0	2	4
decl	6:4	6:22	2	int	stream_ptr
op	6:19	0:0	2	=
water	6:21	0:0	2	0
decl	7:4	7:18	2	int	chunk_size
decl	8:4	8:24	2	unsigned char	opcode
decl	9:4	9:16	2	int	n_blocks
decl	10:4	10:37	2	unsigned short	colorA
op	10:26	0:0	2	=
water	10:28	0:0	2	0
water	10:29	0:0	2	,
decl	10:4	10:37	2	unsigned short	colorB
decl	11:4	11:28	2	unsigned short	color4[4]
decl	12:4	12:28	2	unsigned char	index
water	12:23	0:0	2	,
decl	12:4	12:28	2	unsigned char	idx
decl	13:4	13:25	2	unsigned short	ta
water	13:21	0:0	2	,
decl	13:4	13:25	2	unsigned short	tb
decl	14:4	14:63	2	unsigned short	*pixels
op	14:27	0:0	2	=
water	14:29	0:0	2	(
water	14:30	0:0	2	unsigned
water	14:39	0:0	2	short
op	14:45	0:0	2	*
water	14:46	0:0	2	)
water	14:47	0:0	2	s
op	14:48	0:0	2	->
water	14:50	0:0	2	frame
op	14:55	0:0	2	.
water	14:56	0:0	2	data
op	14:60	0:0	2	[
water	14:61	0:0	2	0
op	14:62	0:0	2	]
decl	16:4	16:19	2	int	row_ptr
op	16:16	0:0	2	=
water	16:18	0:0	2	0
decl	17:4	17:22	2	int	pixel_ptr
op	17:18	0:0	2	=
op	17:20	0:0	2	-
water	17:21	0:0	2	4
decl	18:4	18:17	2	int	block_ptr
decl	19:4	19:24	2	int	pixel_x
water	19:15	0:0	2	,
decl	19:4	19:24	2	int	pixel_y
decl	20:4	20:20	2	int	total_blocks
if	23:4	25:31	2	(s -> buf [ stream_ptr ] != 0 xe1)
cond	23:8	23:31	3	s -> buf [ stream_ptr ] != 0 xe1
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	buf
op	23:14	0:0	4	[
water	23:15	0:0	4	stream_ptr
op	23:25	0:0	4	]
op	23:27	0:0	4	!=
water	23:30	0:0	4	0
water	23:31	0:0	4	xe1
stmts	24:8	25:31	3	
call	24:8	25:30	4	av_log
arg	24:15	24:23	5	s->avctx
water	24:15	0:0	6	s
op	24:16	0:0	6	->
water	24:18	0:0	6	avctx
arg	24:25	24:37	5	AV_LOG_ERROR
water	24:25	0:0	6	AV_LOG_ERROR
arg	24:39	24:85	5	"First chunk byte is 0x%02x instead of 0xe1\n"
water	24:39	0:0	6	"First chunk byte is 0x%02x instead of 0xe1\n"
arg	25:12	25:30	5	s->buf[stream_ptr]
water	25:12	0:0	6	s
op	25:13	0:0	6	->
water	25:15	0:0	6	buf
op	25:18	0:0	6	[
water	25:19	0:0	6	stream_ptr
op	25:29	0:0	6	]
water	25:31	0:0	4	;
water	28:4	0:0	2	chunk_size
op	28:15	0:0	2	=
call	28:17	28:44	2	AV_RB32
arg	28:25	28:44	3	&s->buf[stream_ptr]
op	28:25	0:0	4	&
water	28:26	0:0	4	s
op	28:27	0:0	4	->
water	28:29	0:0	4	buf
op	28:32	0:0	4	[
water	28:33	0:0	4	stream_ptr
op	28:43	0:0	4	]
op	28:46	0:0	2	&
water	28:48	0:0	2	0
water	28:49	0:0	2	x00FFFFFF
water	28:58	0:0	2	;
water	29:4	0:0	2	stream_ptr
op	29:15	0:0	2	+=
water	29:18	0:0	2	4
water	29:19	0:0	2	;
if	32:4	33:102	2	(chunk_size != s -> size)
cond	32:8	32:25	3	chunk_size != s -> size
water	32:8	0:0	4	chunk_size
op	32:19	0:0	4	!=
water	32:22	0:0	4	s
op	32:23	0:0	4	->
water	32:25	0:0	4	size
stmts	33:8	33:102	3	
call	33:8	33:101	4	av_log
arg	33:15	33:23	5	s->avctx
water	33:15	0:0	6	s
op	33:16	0:0	6	->
water	33:18	0:0	6	avctx
arg	33:25	33:37	5	AV_LOG_ERROR
water	33:25	0:0	6	AV_LOG_ERROR
arg	33:39	33:101	5	"MOV chunk size != encoded chunk size; using MOV chunk size\n"
water	33:39	0:0	6	"MOV chunk size != encoded chunk size; using MOV chunk size\n"
water	33:102	0:0	4	;
water	35:4	0:0	2	chunk_size
op	35:15	0:0	2	=
water	35:17	0:0	2	s
op	35:18	0:0	2	->
water	35:20	0:0	2	size
water	35:24	0:0	2	;
water	38:4	0:0	2	total_blocks
op	38:17	0:0	2	=
water	38:19	0:0	2	(
water	38:20	0:0	2	(
water	38:21	0:0	2	s
op	38:22	0:0	2	->
water	38:24	0:0	2	avctx
op	38:29	0:0	2	->
water	38:31	0:0	2	width
op	38:37	0:0	2	+
water	38:39	0:0	2	3
water	38:40	0:0	2	)
op	38:42	0:0	2	/
water	38:44	0:0	2	4
water	38:45	0:0	2	)
op	38:47	0:0	2	*
water	38:49	0:0	2	(
water	38:50	0:0	2	(
water	38:51	0:0	2	s
op	38:52	0:0	2	->
water	38:54	0:0	2	avctx
op	38:59	0:0	2	->
water	38:61	0:0	2	height
op	38:68	0:0	2	+
water	38:70	0:0	2	3
water	38:71	0:0	2	)
op	38:73	0:0	2	/
water	38:75	0:0	2	4
water	38:76	0:0	2	)
water	38:77	0:0	2	;
while	41:4	161:4	2	(stream_ptr < chunk_size)
cond	41:11	41:24	3	stream_ptr < chunk_size
water	41:11	0:0	4	stream_ptr
op	41:22	0:0	4	<
water	41:24	0:0	4	chunk_size
stmts	41:36	161:4	3	
water	41:36	0:0	4	{
water	42:8	0:0	4	opcode
op	42:15	0:0	4	=
water	42:17	0:0	4	s
op	42:18	0:0	4	->
water	42:20	0:0	4	buf
op	42:23	0:0	4	[
water	42:24	0:0	4	stream_ptr
op	42:34	0:0	4	++
op	42:36	0:0	4	]
water	42:37	0:0	4	;
water	44:8	0:0	4	n_blocks
op	44:17	0:0	4	=
water	44:19	0:0	4	(
water	44:20	0:0	4	opcode
op	44:27	0:0	4	&
water	44:29	0:0	4	0
water	44:30	0:0	4	x1f
water	44:33	0:0	4	)
op	44:35	0:0	4	+
water	44:37	0:0	4	1
water	44:38	0:0	4	;
if	47:8	57:8	4	(( opcode & 0 x80 ) == 0)
cond	47:12	47:31	5	( opcode & 0 x80 ) == 0
water	47:12	0:0	6	(
water	47:13	0:0	6	opcode
op	47:20	0:0	6	&
water	47:22	0:0	6	0
water	47:23	0:0	6	x80
water	47:26	0:0	6	)
op	47:28	0:0	6	==
water	47:31	0:0	6	0
stmts	47:34	57:8	5	
water	47:34	0:0	6	{
water	48:12	0:0	6	colorA
op	48:19	0:0	6	=
water	48:21	0:0	6	(
water	48:22	0:0	6	opcode
op	48:29	0:0	6	<<
water	48:32	0:0	6	8
water	48:33	0:0	6	)
op	48:35	0:0	6	|
water	48:37	0:0	6	(
water	48:38	0:0	6	s
op	48:39	0:0	6	->
water	48:41	0:0	6	buf
op	48:44	0:0	6	[
water	48:45	0:0	6	stream_ptr
op	48:55	0:0	6	++
op	48:57	0:0	6	]
water	48:58	0:0	6	)
water	48:59	0:0	6	;
water	49:12	0:0	6	opcode
op	49:19	0:0	6	=
water	49:21	0:0	6	0
water	49:22	0:0	6	;
if	50:12	56:12	6	(( s -> buf [ stream_ptr ] & 0 x80 ) != 0)
cond	50:16	50:47	7	( s -> buf [ stream_ptr ] & 0 x80 ) != 0
water	50:16	0:0	8	(
water	50:17	0:0	8	s
op	50:18	0:0	8	->
water	50:20	0:0	8	buf
op	50:23	0:0	8	[
water	50:24	0:0	8	stream_ptr
op	50:34	0:0	8	]
op	50:36	0:0	8	&
water	50:38	0:0	8	0
water	50:39	0:0	8	x80
water	50:42	0:0	8	)
op	50:44	0:0	8	!=
water	50:47	0:0	8	0
stmts	50:50	56:12	7	
water	50:50	0:0	8	{
water	54:16	0:0	8	opcode
op	54:23	0:0	8	=
water	54:25	0:0	8	0
water	54:26	0:0	8	x20
water	54:29	0:0	8	;
water	55:16	0:0	8	n_blocks
op	55:25	0:0	8	=
water	55:27	0:0	8	1
water	55:28	0:0	8	;
water	56:12	0:0	8	}
water	57:8	0:0	6	}
switch	59:8	160:8	4	(opcode & 0 xe0)
cond	59:16	59:26	5	opcode & 0 xe0
water	59:16	0:0	6	opcode
op	59:23	0:0	6	&
water	59:25	0:0	6	0
water	59:26	0:0	6	xe0
stmts	59:31	160:8	5	
water	59:31	0:0	6	{
label	62:8	62:17	6	case 0 x80 :
while	63:12	65:12	6	(n_blocks --)
cond	63:19	63:27	7	n_blocks --
water	63:19	0:0	8	n_blocks
op	63:27	0:0	8	--
stmts	63:31	65:12	7	
water	63:31	0:0	8	{
call	64:14	64:28	8	ADVANCE_BLOCK
water	64:29	0:0	8	;
water	65:12	0:0	8	}
break	66:12	66:17	6	
label	69:8	69:17	6	case 0 xa0 :
water	70:12	0:0	6	colorA
op	70:19	0:0	6	=
call	70:21	70:49	6	AV_RB16
arg	70:30	70:49	7	&s->buf[stream_ptr]
op	70:30	0:0	8	&
water	70:31	0:0	8	s
op	70:32	0:0	8	->
water	70:34	0:0	8	buf
op	70:37	0:0	8	[
water	70:38	0:0	8	stream_ptr
op	70:48	0:0	8	]
water	70:50	0:0	6	;
water	71:12	0:0	6	stream_ptr
op	71:23	0:0	6	+=
water	71:26	0:0	6	2
water	71:27	0:0	6	;
while	72:12	82:12	6	(n_blocks --)
cond	72:19	72:27	7	n_blocks --
water	72:19	0:0	8	n_blocks
op	72:27	0:0	8	--
stmts	72:31	82:12	7	
water	72:31	0:0	8	{
call	73:16	73:30	8	ADVANCE_BLOCK
water	74:16	0:0	8	block_ptr
op	74:26	0:0	8	=
water	74:28	0:0	8	row_ptr
op	74:36	0:0	8	+
water	74:38	0:0	8	pixel_ptr
water	74:47	0:0	8	;
for	75:16	81:16	8	(pixel_y = 0 ;pixel_y < 4;pixel_y ++)
forinit	75:21	75:32	9	pixel_y = 0 ;
water	75:21	0:0	10	pixel_y
op	75:29	0:0	10	=
water	75:31	0:0	10	0
water	75:32	0:0	10	;
cond	75:34	75:44	9	pixel_y < 4
water	75:34	0:0	10	pixel_y
op	75:42	0:0	10	<
water	75:44	0:0	10	4
forexpr	75:47	75:54	9	pixel_y ++
water	75:47	0:0	10	pixel_y
op	75:54	0:0	10	++
stmts	75:58	81:16	9	
water	75:58	0:0	10	{
for	76:20	79:20	10	(pixel_x = 0 ;pixel_x < 4;pixel_x ++)
forinit	76:25	76:36	11	pixel_x = 0 ;
water	76:25	0:0	12	pixel_x
op	76:33	0:0	12	=
water	76:35	0:0	12	0
water	76:36	0:0	12	;
cond	76:38	76:48	11	pixel_x < 4
water	76:38	0:0	12	pixel_x
op	76:46	0:0	12	<
water	76:48	0:0	12	4
forexpr	76:51	76:58	11	pixel_x ++
water	76:51	0:0	12	pixel_x
op	76:58	0:0	12	++
stmts	76:61	79:20	11	
water	76:61	0:0	12	{
water	77:24	0:0	12	pixels
op	77:30	0:0	12	[
water	77:31	0:0	12	block_ptr
op	77:40	0:0	12	]
op	77:42	0:0	12	=
water	77:44	0:0	12	colorA
water	77:50	0:0	12	;
water	78:24	0:0	12	block_ptr
op	78:33	0:0	12	++
water	78:35	0:0	12	;
water	79:20	0:0	12	}
water	80:20	0:0	10	block_ptr
op	80:30	0:0	10	+=
water	80:33	0:0	10	row_inc
water	80:40	0:0	10	;
water	81:16	0:0	10	}
water	82:12	0:0	8	}
break	83:12	83:17	6	
label	86:8	86:17	6	case 0 xc0 :
water	87:12	0:0	6	colorA
op	87:19	0:0	6	=
call	87:21	87:49	6	AV_RB16
arg	87:30	87:49	7	&s->buf[stream_ptr]
op	87:30	0:0	8	&
water	87:31	0:0	8	s
op	87:32	0:0	8	->
water	87:34	0:0	8	buf
op	87:37	0:0	8	[
water	87:38	0:0	8	stream_ptr
op	87:48	0:0	8	]
water	87:50	0:0	6	;
water	88:12	0:0	6	stream_ptr
op	88:23	0:0	6	+=
water	88:26	0:0	6	2
water	88:27	0:0	6	;
label	89:8	89:17	6	case 0 x20 :
water	90:12	0:0	6	colorB
op	90:19	0:0	6	=
call	90:21	90:49	6	AV_RB16
arg	90:30	90:49	7	&s->buf[stream_ptr]
op	90:30	0:0	8	&
water	90:31	0:0	8	s
op	90:32	0:0	8	->
water	90:34	0:0	8	buf
op	90:37	0:0	8	[
water	90:38	0:0	8	stream_ptr
op	90:48	0:0	8	]
water	90:50	0:0	6	;
water	91:12	0:0	6	stream_ptr
op	91:23	0:0	6	+=
water	91:26	0:0	6	2
water	91:27	0:0	6	;
water	94:12	0:0	6	color4
op	94:18	0:0	6	[
water	94:19	0:0	6	0
op	94:20	0:0	6	]
op	94:22	0:0	6	=
water	94:24	0:0	6	colorB
water	94:30	0:0	6	;
water	95:12	0:0	6	color4
op	95:18	0:0	6	[
water	95:19	0:0	6	1
op	95:20	0:0	6	]
op	95:22	0:0	6	=
water	95:24	0:0	6	0
water	95:25	0:0	6	;
water	96:12	0:0	6	color4
op	96:18	0:0	6	[
water	96:19	0:0	6	2
op	96:20	0:0	6	]
op	96:22	0:0	6	=
water	96:24	0:0	6	0
water	96:25	0:0	6	;
water	97:12	0:0	6	color4
op	97:18	0:0	6	[
water	97:19	0:0	6	3
op	97:20	0:0	6	]
op	97:22	0:0	6	=
water	97:24	0:0	6	colorA
water	97:30	0:0	6	;
water	100:12	0:0	6	ta
op	100:15	0:0	6	=
water	100:17	0:0	6	(
water	100:18	0:0	6	colorA
op	100:25	0:0	6	>>
water	100:28	0:0	6	10
water	100:30	0:0	6	)
op	100:32	0:0	6	&
water	100:34	0:0	6	0
water	100:35	0:0	6	x1F
water	100:38	0:0	6	;
water	101:12	0:0	6	tb
op	101:15	0:0	6	=
water	101:17	0:0	6	(
water	101:18	0:0	6	colorB
op	101:25	0:0	6	>>
water	101:28	0:0	6	10
water	101:30	0:0	6	)
op	101:32	0:0	6	&
water	101:34	0:0	6	0
water	101:35	0:0	6	x1F
water	101:38	0:0	6	;
water	102:12	0:0	6	color4
op	102:18	0:0	6	[
water	102:19	0:0	6	1
op	102:20	0:0	6	]
op	102:22	0:0	6	|=
water	102:25	0:0	6	(
water	102:26	0:0	6	(
water	102:27	0:0	6	11
op	102:30	0:0	6	*
water	102:32	0:0	6	ta
op	102:35	0:0	6	+
water	102:37	0:0	6	21
op	102:40	0:0	6	*
water	102:42	0:0	6	tb
water	102:44	0:0	6	)
op	102:46	0:0	6	>>
water	102:49	0:0	6	5
water	102:50	0:0	6	)
op	102:52	0:0	6	<<
water	102:55	0:0	6	10
water	102:57	0:0	6	;
water	103:12	0:0	6	color4
op	103:18	0:0	6	[
water	103:19	0:0	6	2
op	103:20	0:0	6	]
op	103:22	0:0	6	|=
water	103:25	0:0	6	(
water	103:26	0:0	6	(
water	103:27	0:0	6	21
op	103:30	0:0	6	*
water	103:32	0:0	6	ta
op	103:35	0:0	6	+
water	103:37	0:0	6	11
op	103:40	0:0	6	*
water	103:42	0:0	6	tb
water	103:44	0:0	6	)
op	103:46	0:0	6	>>
water	103:49	0:0	6	5
water	103:50	0:0	6	)
op	103:52	0:0	6	<<
water	103:55	0:0	6	10
water	103:57	0:0	6	;
water	106:12	0:0	6	ta
op	106:15	0:0	6	=
water	106:17	0:0	6	(
water	106:18	0:0	6	colorA
op	106:25	0:0	6	>>
water	106:28	0:0	6	5
water	106:29	0:0	6	)
op	106:31	0:0	6	&
water	106:33	0:0	6	0
water	106:34	0:0	6	x1F
water	106:37	0:0	6	;
water	107:12	0:0	6	tb
op	107:15	0:0	6	=
water	107:17	0:0	6	(
water	107:18	0:0	6	colorB
op	107:25	0:0	6	>>
water	107:28	0:0	6	5
water	107:29	0:0	6	)
op	107:31	0:0	6	&
water	107:33	0:0	6	0
water	107:34	0:0	6	x1F
water	107:37	0:0	6	;
water	108:12	0:0	6	color4
op	108:18	0:0	6	[
water	108:19	0:0	6	1
op	108:20	0:0	6	]
op	108:22	0:0	6	|=
water	108:25	0:0	6	(
water	108:26	0:0	6	(
water	108:27	0:0	6	11
op	108:30	0:0	6	*
water	108:32	0:0	6	ta
op	108:35	0:0	6	+
water	108:37	0:0	6	21
op	108:40	0:0	6	*
water	108:42	0:0	6	tb
water	108:44	0:0	6	)
op	108:46	0:0	6	>>
water	108:49	0:0	6	5
water	108:50	0:0	6	)
op	108:52	0:0	6	<<
water	108:55	0:0	6	5
water	108:56	0:0	6	;
water	109:12	0:0	6	color4
op	109:18	0:0	6	[
water	109:19	0:0	6	2
op	109:20	0:0	6	]
op	109:22	0:0	6	|=
water	109:25	0:0	6	(
water	109:26	0:0	6	(
water	109:27	0:0	6	21
op	109:30	0:0	6	*
water	109:32	0:0	6	ta
op	109:35	0:0	6	+
water	109:37	0:0	6	11
op	109:40	0:0	6	*
water	109:42	0:0	6	tb
water	109:44	0:0	6	)
op	109:46	0:0	6	>>
water	109:49	0:0	6	5
water	109:50	0:0	6	)
op	109:52	0:0	6	<<
water	109:55	0:0	6	5
water	109:56	0:0	6	;
water	112:12	0:0	6	ta
op	112:15	0:0	6	=
water	112:17	0:0	6	colorA
op	112:24	0:0	6	&
water	112:26	0:0	6	0
water	112:27	0:0	6	x1F
water	112:30	0:0	6	;
water	113:12	0:0	6	tb
op	113:15	0:0	6	=
water	113:17	0:0	6	colorB
op	113:24	0:0	6	&
water	113:26	0:0	6	0
water	113:27	0:0	6	x1F
water	113:30	0:0	6	;
water	114:12	0:0	6	color4
op	114:18	0:0	6	[
water	114:19	0:0	6	1
op	114:20	0:0	6	]
op	114:22	0:0	6	|=
water	114:25	0:0	6	(
water	114:26	0:0	6	(
water	114:27	0:0	6	11
op	114:30	0:0	6	*
water	114:32	0:0	6	ta
op	114:35	0:0	6	+
water	114:37	0:0	6	21
op	114:40	0:0	6	*
water	114:42	0:0	6	tb
water	114:44	0:0	6	)
op	114:46	0:0	6	>>
water	114:49	0:0	6	5
water	114:50	0:0	6	)
water	114:51	0:0	6	;
water	115:12	0:0	6	color4
op	115:18	0:0	6	[
water	115:19	0:0	6	2
op	115:20	0:0	6	]
op	115:22	0:0	6	|=
water	115:25	0:0	6	(
water	115:26	0:0	6	(
water	115:27	0:0	6	21
op	115:30	0:0	6	*
water	115:32	0:0	6	ta
op	115:35	0:0	6	+
water	115:37	0:0	6	11
op	115:40	0:0	6	*
water	115:42	0:0	6	tb
water	115:44	0:0	6	)
op	115:46	0:0	6	>>
water	115:49	0:0	6	5
water	115:50	0:0	6	)
water	115:51	0:0	6	;
if	117:12	118:22	6	(s -> size - stream_ptr < n_blocks * 4)
cond	117:16	117:50	7	s -> size - stream_ptr < n_blocks * 4
water	117:16	0:0	8	s
op	117:17	0:0	8	->
water	117:19	0:0	8	size
op	117:24	0:0	8	-
water	117:26	0:0	8	stream_ptr
op	117:37	0:0	8	<
water	117:39	0:0	8	n_blocks
op	117:48	0:0	8	*
water	117:50	0:0	8	4
stmts	118:16	118:22	7	
return	118:16	118:22	8	
while	119:12	131:12	6	(n_blocks --)
cond	119:19	119:27	7	n_blocks --
water	119:19	0:0	8	n_blocks
op	119:27	0:0	8	--
stmts	119:31	131:12	7	
water	119:31	0:0	8	{
call	120:16	120:30	8	ADVANCE_BLOCK
water	120:31	0:0	8	;
water	121:16	0:0	8	block_ptr
op	121:26	0:0	8	=
water	121:28	0:0	8	row_ptr
op	121:36	0:0	8	+
water	121:38	0:0	8	pixel_ptr
water	121:47	0:0	8	;
for	122:16	130:16	8	(pixel_y = 0 ;pixel_y < 4;pixel_y ++)
forinit	122:21	122:32	9	pixel_y = 0 ;
water	122:21	0:0	10	pixel_y
op	122:29	0:0	10	=
water	122:31	0:0	10	0
water	122:32	0:0	10	;
cond	122:34	122:44	9	pixel_y < 4
water	122:34	0:0	10	pixel_y
op	122:42	0:0	10	<
water	122:44	0:0	10	4
forexpr	122:47	122:54	9	pixel_y ++
water	122:47	0:0	10	pixel_y
op	122:54	0:0	10	++
stmts	122:58	130:16	9	
water	122:58	0:0	10	{
water	123:20	0:0	10	index
op	123:26	0:0	10	=
water	123:28	0:0	10	s
op	123:29	0:0	10	->
water	123:31	0:0	10	buf
op	123:34	0:0	10	[
water	123:35	0:0	10	stream_ptr
op	123:45	0:0	10	++
op	123:47	0:0	10	]
water	123:48	0:0	10	;
for	124:20	128:20	10	(pixel_x = 0 ;pixel_x < 4;pixel_x ++)
forinit	124:25	124:36	11	pixel_x = 0 ;
water	124:25	0:0	12	pixel_x
op	124:33	0:0	12	=
water	124:35	0:0	12	0
water	124:36	0:0	12	;
cond	124:38	124:48	11	pixel_x < 4
water	124:38	0:0	12	pixel_x
op	124:46	0:0	12	<
water	124:48	0:0	12	4
forexpr	124:51	124:58	11	pixel_x ++
water	124:51	0:0	12	pixel_x
op	124:58	0:0	12	++
stmts	124:61	128:20	11	
water	124:61	0:0	12	{
water	125:24	0:0	12	idx
op	125:28	0:0	12	=
water	125:30	0:0	12	(
water	125:31	0:0	12	index
op	125:37	0:0	12	>>
water	125:40	0:0	12	(
water	125:41	0:0	12	2
op	125:43	0:0	12	*
water	125:45	0:0	12	(
water	125:46	0:0	12	3
op	125:48	0:0	12	-
water	125:50	0:0	12	pixel_x
water	125:57	0:0	12	)
water	125:58	0:0	12	)
water	125:59	0:0	12	)
op	125:61	0:0	12	&
water	125:63	0:0	12	0
water	125:64	0:0	12	x03
water	125:67	0:0	12	;
water	126:24	0:0	12	pixels
op	126:30	0:0	12	[
water	126:31	0:0	12	block_ptr
op	126:40	0:0	12	]
op	126:42	0:0	12	=
water	126:44	0:0	12	color4
op	126:50	0:0	12	[
water	126:51	0:0	12	idx
op	126:54	0:0	12	]
water	126:55	0:0	12	;
water	127:24	0:0	12	block_ptr
op	127:33	0:0	12	++
water	127:35	0:0	12	;
water	128:20	0:0	12	}
water	129:20	0:0	10	block_ptr
op	129:30	0:0	10	+=
water	129:33	0:0	10	row_inc
water	129:40	0:0	10	;
water	130:16	0:0	10	}
water	131:12	0:0	8	}
break	132:12	132:17	6	
label	135:8	135:17	6	case 0 x00 :
if	136:12	137:22	6	(s -> size - stream_ptr < 16)
cond	136:16	136:39	7	s -> size - stream_ptr < 16
water	136:16	0:0	8	s
op	136:17	0:0	8	->
water	136:19	0:0	8	size
op	136:24	0:0	8	-
water	136:26	0:0	8	stream_ptr
op	136:37	0:0	8	<
water	136:39	0:0	8	16
stmts	137:16	137:22	7	
return	137:16	137:22	8	
call	138:12	138:26	6	ADVANCE_BLOCK
water	138:27	0:0	6	;
water	139:12	0:0	6	block_ptr
op	139:22	0:0	6	=
water	139:24	0:0	6	row_ptr
op	139:32	0:0	6	+
water	139:34	0:0	6	pixel_ptr
water	139:43	0:0	6	;
for	140:12	151:12	6	(pixel_y = 0 ;pixel_y < 4;pixel_y ++)
forinit	140:17	140:28	7	pixel_y = 0 ;
water	140:17	0:0	8	pixel_y
op	140:25	0:0	8	=
water	140:27	0:0	8	0
water	140:28	0:0	8	;
cond	140:30	140:40	7	pixel_y < 4
water	140:30	0:0	8	pixel_y
op	140:38	0:0	8	<
water	140:40	0:0	8	4
forexpr	140:43	140:50	7	pixel_y ++
water	140:43	0:0	8	pixel_y
op	140:50	0:0	8	++
stmts	140:54	151:12	7	
water	140:54	0:0	8	{
for	141:16	149:16	8	(pixel_x = 0 ;pixel_x < 4;pixel_x ++)
forinit	141:21	141:32	9	pixel_x = 0 ;
water	141:21	0:0	10	pixel_x
op	141:29	0:0	10	=
water	141:31	0:0	10	0
water	141:32	0:0	10	;
cond	141:34	141:44	9	pixel_x < 4
water	141:34	0:0	10	pixel_x
op	141:42	0:0	10	<
water	141:44	0:0	10	4
forexpr	141:47	141:54	9	pixel_x ++
water	141:47	0:0	10	pixel_x
op	141:54	0:0	10	++
stmts	141:57	149:16	9	
water	141:57	0:0	10	{
if	143:20	146:20	10	(( pixel_y != 0 ) || ( pixel_x != 0 ))
cond	143:24	143:54	11	( pixel_y != 0 ) || ( pixel_x != 0 )
water	143:24	0:0	12	(
water	143:25	0:0	12	pixel_y
op	143:33	0:0	12	!=
water	143:36	0:0	12	0
water	143:37	0:0	12	)
op	143:39	0:0	12	||
water	143:42	0:0	12	(
water	143:43	0:0	12	pixel_x
op	143:51	0:0	12	!=
water	143:53	0:0	12	0
water	143:54	0:0	12	)
stmts	143:57	146:20	11	
water	143:57	0:0	12	{
water	144:24	0:0	12	colorA
op	144:31	0:0	12	=
call	144:33	144:61	12	AV_RB16
arg	144:42	144:61	13	&s->buf[stream_ptr]
op	144:42	0:0	14	&
water	144:43	0:0	14	s
op	144:44	0:0	14	->
water	144:46	0:0	14	buf
op	144:49	0:0	14	[
water	144:50	0:0	14	stream_ptr
op	144:60	0:0	14	]
water	144:62	0:0	12	;
water	145:24	0:0	12	stream_ptr
op	145:35	0:0	12	+=
water	145:38	0:0	12	2
water	145:39	0:0	12	;
water	146:20	0:0	12	}
water	147:20	0:0	10	pixels
op	147:26	0:0	10	[
water	147:27	0:0	10	block_ptr
op	147:36	0:0	10	]
op	147:38	0:0	10	=
water	147:40	0:0	10	colorA
water	147:46	0:0	10	;
water	148:20	0:0	10	block_ptr
op	148:29	0:0	10	++
water	148:31	0:0	10	;
water	149:16	0:0	10	}
water	150:16	0:0	8	block_ptr
op	150:26	0:0	8	+=
water	150:29	0:0	8	row_inc
water	150:36	0:0	8	;
water	151:12	0:0	8	}
break	152:12	152:17	6	
label	155:8	155:15	6	default :
call	156:12	158:40	6	av_log
arg	156:19	156:27	7	s->avctx
water	156:19	0:0	8	s
op	156:20	0:0	8	->
water	156:22	0:0	8	avctx
arg	156:29	156:41	7	AV_LOG_ERROR
water	156:29	0:0	8	AV_LOG_ERROR
arg	156:43	157:60	7	"Unknown opcode %d in rpza chunk."" Skip remaining %d bytes of chunk data.\n"
water	156:43	0:0	8	"Unknown opcode %d in rpza chunk."
water	157:17	0:0	8	" Skip remaining %d bytes of chunk data.\n"
arg	157:62	157:68	7	opcode
water	157:62	0:0	8	opcode
arg	158:17	158:40	7	chunk_size-stream_ptr
water	158:17	0:0	8	chunk_size
op	158:28	0:0	8	-
water	158:30	0:0	8	stream_ptr
water	158:41	0:0	6	;
return	159:12	159:18	6	
water	160:8	0:0	6	}
water	161:4	0:0	4	}
