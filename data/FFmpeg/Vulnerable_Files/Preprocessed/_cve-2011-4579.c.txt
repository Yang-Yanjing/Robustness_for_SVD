func	2:0	74:0	0	static int	svq1_decode_frame_header
params	2:36	0:0	1	
param	2:37	2:58	2	GetBitContext *	bitbuf
param	2:59	2:76	2	MpegEncContext *	s
stmnts	0:0	73:10	1	
decl	3:2	3:21	2	int	frame_size_code
call	5:2	5:21	2	skip_bits
arg	5:12	5:18	3	bitbuf
water	5:12	0:0	4	bitbuf
arg	5:20	5:21	3	8
water	5:20	0:0	4	8
water	5:22	0:0	2	;
water	8:2	0:0	2	s
op	8:3	0:0	2	->
water	8:5	0:0	2	pict_type
op	8:14	0:0	2	=
call	8:16	8:35	2	get_bits
arg	8:26	8:32	3	bitbuf
water	8:26	0:0	4	bitbuf
arg	8:34	8:35	3	2
water	8:34	0:0	4	2
op	8:36	0:0	2	+
water	8:37	0:0	2	1
water	8:38	0:0	2	;
if	9:2	10:15	2	(s -> pict_type == 4)
cond	9:5	9:19	3	s -> pict_type == 4
water	9:5	0:0	4	s
op	9:6	0:0	4	->
water	9:8	0:0	4	pict_type
op	9:17	0:0	4	==
water	9:19	0:0	4	4
stmts	10:6	10:15	3	
return	10:6	10:15	4	-1
op	10:13	0:0	5	-
water	10:14	0:0	5	1
if	12:2	51:2	2	(s -> pict_type == AV_PICTURE_TYPE_I)
cond	12:6	12:22	3	s -> pict_type == AV_PICTURE_TYPE_I
water	12:6	0:0	4	s
op	12:7	0:0	4	->
water	12:9	0:0	4	pict_type
op	12:19	0:0	4	==
water	12:22	0:0	4	AV_PICTURE_TYPE_I
stmts	12:41	51:2	3	
water	12:41	0:0	4	{
if	15:4	22:4	4	(s -> f_code == 0 x50 || s -> f_code == 0 x60)
cond	15:8	15:43	5	s -> f_code == 0 x50 || s -> f_code == 0 x60
water	15:8	0:0	6	s
op	15:9	0:0	6	->
water	15:11	0:0	6	f_code
op	15:18	0:0	6	==
water	15:21	0:0	6	0
water	15:22	0:0	6	x50
op	15:26	0:0	6	||
water	15:29	0:0	6	s
op	15:30	0:0	6	->
water	15:32	0:0	6	f_code
op	15:39	0:0	6	==
water	15:42	0:0	6	0
water	15:43	0:0	6	x60
stmts	15:48	22:4	5	
water	15:48	0:0	6	{
decl	16:6	16:38	6	int	csum
op	16:15	0:0	6	=
call	16:17	16:37	7	get_bits
arg	16:27	16:33	8	bitbuf
water	16:27	0:0	9	bitbuf
arg	16:35	16:37	8	16
water	16:35	0:0	9	16
water	18:6	0:0	6	csum
op	18:11	0:0	6	=
call	18:13	18:83	6	ff_svq1_packet_checksum
arg	18:38	18:52	7	bitbuf->buffer
water	18:38	0:0	8	bitbuf
op	18:44	0:0	8	->
water	18:46	0:0	8	buffer
arg	18:54	18:77	7	bitbuf->size_in_bits>>3
water	18:54	0:0	8	bitbuf
op	18:60	0:0	8	->
water	18:62	0:0	8	size_in_bits
op	18:74	0:0	8	>>
water	18:76	0:0	8	3
arg	18:79	18:83	7	csum
water	18:79	0:0	8	csum
water	18:84	0:0	6	;
water	22:4	0:0	6	}
if	24:4	30:4	4	(( s -> f_code ^ 0 x10 ) >= 0 x50)
cond	24:8	24:31	5	( s -> f_code ^ 0 x10 ) >= 0 x50
water	24:8	0:0	6	(
water	24:9	0:0	6	s
op	24:10	0:0	6	->
water	24:12	0:0	6	f_code
op	24:19	0:0	6	^
water	24:21	0:0	6	0
water	24:22	0:0	6	x10
water	24:25	0:0	6	)
op	24:27	0:0	6	>=
water	24:30	0:0	6	0
water	24:31	0:0	6	x50
stmts	24:36	30:4	5	
water	24:36	0:0	6	{
decl	25:6	25:22	6	uint8_t	msg[256]
call	27:6	27:36	6	svq1_parse_string
arg	27:25	27:31	7	bitbuf
water	27:25	0:0	8	bitbuf
arg	27:33	27:36	7	msg
water	27:33	0:0	8	msg
water	27:37	0:0	6	;
call	29:6	29:78	6	av_log
arg	29:13	29:21	7	s->avctx
water	29:13	0:0	8	s
op	29:14	0:0	8	->
water	29:16	0:0	8	avctx
arg	29:23	29:34	7	AV_LOG_INFO
water	29:23	0:0	8	AV_LOG_INFO
arg	29:36	29:64	7	"embedded message: \"%s\"\n"
water	29:36	0:0	8	"embedded message: \"%s\"\n"
arg	29:66	29:78	7	(char*)msg
water	29:66	0:0	8	(
water	29:67	0:0	8	char
op	29:72	0:0	8	*
water	29:73	0:0	8	)
water	29:75	0:0	8	msg
water	29:79	0:0	6	;
water	30:4	0:0	6	}
call	32:4	32:24	4	skip_bits
arg	32:15	32:21	5	bitbuf
water	32:15	0:0	6	bitbuf
arg	32:23	32:24	5	2
water	32:23	0:0	6	2
water	32:25	0:0	4	;
call	33:4	33:24	4	skip_bits
arg	33:15	33:21	5	bitbuf
water	33:15	0:0	6	bitbuf
arg	33:23	33:24	5	2
water	33:23	0:0	6	2
water	33:25	0:0	4	;
call	34:4	34:22	4	skip_bits1
arg	34:16	34:22	5	bitbuf
water	34:16	0:0	6	bitbuf
water	34:23	0:0	4	;
water	37:4	0:0	4	frame_size_code
op	37:20	0:0	4	=
call	37:22	37:41	4	get_bits
arg	37:32	37:38	5	bitbuf
water	37:32	0:0	6	bitbuf
arg	37:40	37:41	5	3
water	37:40	0:0	6	3
water	37:42	0:0	4	;
if	39:4	46:4	4	(frame_size_code == 7)
cond	39:8	39:27	5	frame_size_code == 7
water	39:8	0:0	6	frame_size_code
op	39:24	0:0	6	==
water	39:27	0:0	6	7
stmts	39:30	46:4	5	
water	39:30	0:0	6	{
water	41:6	0:0	6	s
op	41:7	0:0	6	->
water	41:9	0:0	6	width
op	41:15	0:0	6	=
call	41:17	41:37	6	get_bits
arg	41:27	41:33	7	bitbuf
water	41:27	0:0	8	bitbuf
arg	41:35	41:37	7	12
water	41:35	0:0	8	12
water	41:38	0:0	6	;
water	42:6	0:0	6	s
op	42:7	0:0	6	->
water	42:9	0:0	6	height
op	42:16	0:0	6	=
call	42:18	42:38	6	get_bits
arg	42:28	42:34	7	bitbuf
water	42:28	0:0	8	bitbuf
arg	42:36	42:38	7	12
water	42:36	0:0	8	12
water	42:39	0:0	6	;
if	44:6	45:17	6	(! s -> width || ! s -> height)
cond	44:10	44:27	7	! s -> width || ! s -> height
op	44:10	0:0	8	!
water	44:11	0:0	8	s
op	44:12	0:0	8	->
water	44:14	0:0	8	width
op	44:20	0:0	8	||
op	44:23	0:0	8	!
water	44:24	0:0	8	s
op	44:25	0:0	8	->
water	44:27	0:0	8	height
stmts	45:8	45:17	7	
return	45:8	45:17	8	-1
op	45:15	0:0	9	-
water	45:16	0:0	9	1
water	46:4	0:0	6	}
else	46:6	50:4	4
stmts	46:11	50:4	5	
water	46:11	0:0	6	{
water	48:6	0:0	6	s
op	48:7	0:0	6	->
water	48:9	0:0	6	width
op	48:15	0:0	6	=
water	48:17	0:0	6	ff_svq1_frame_size_table
op	48:41	0:0	6	[
water	48:42	0:0	6	frame_size_code
op	48:57	0:0	6	]
op	48:58	0:0	6	.
water	48:59	0:0	6	width
water	48:64	0:0	6	;
water	49:6	0:0	6	s
op	49:7	0:0	6	->
water	49:9	0:0	6	height
op	49:16	0:0	6	=
water	49:18	0:0	6	ff_svq1_frame_size_table
op	49:42	0:0	6	[
water	49:43	0:0	6	frame_size_code
op	49:58	0:0	6	]
op	49:59	0:0	6	.
water	49:60	0:0	6	height
water	49:66	0:0	6	;
water	50:4	0:0	6	}
water	51:2	0:0	4	}
if	54:2	60:2	2	(get_bits1 (bitbuf ) == 1)
cond	54:6	54:28	3	get_bits1 (bitbuf ) == 1
call	54:6	54:23	4	get_bits1
arg	54:17	54:23	5	bitbuf
water	54:17	0:0	6	bitbuf
op	54:25	0:0	4	==
water	54:28	0:0	4	1
stmts	54:31	60:2	3	
water	54:31	0:0	4	{
call	55:4	55:22	4	skip_bits1
arg	55:16	55:22	5	bitbuf
water	55:16	0:0	6	bitbuf
water	55:23	0:0	4	;
call	56:4	56:22	4	skip_bits1
arg	56:16	56:22	5	bitbuf
water	56:16	0:0	6	bitbuf
water	56:23	0:0	4	;
if	58:4	59:15	4	(get_bits (bitbuf ,2 ) != 0)
cond	58:8	58:32	5	get_bits (bitbuf ,2 ) != 0
call	58:8	58:27	6	get_bits
arg	58:18	58:24	7	bitbuf
water	58:18	0:0	8	bitbuf
arg	58:26	58:27	7	2
water	58:26	0:0	8	2
op	58:29	0:0	6	!=
water	58:32	0:0	6	0
stmts	59:6	59:15	5	
return	59:6	59:15	6	-1
op	59:13	0:0	7	-
water	59:14	0:0	7	1
water	60:2	0:0	4	}
if	62:2	71:2	2	(get_bits1 (bitbuf ) == 1)
cond	62:6	62:28	3	get_bits1 (bitbuf ) == 1
call	62:6	62:23	4	get_bits1
arg	62:17	62:23	5	bitbuf
water	62:17	0:0	6	bitbuf
op	62:25	0:0	4	==
water	62:28	0:0	4	1
stmts	62:31	71:2	3	
water	62:31	0:0	4	{
call	63:4	63:22	4	skip_bits1
arg	63:16	63:22	5	bitbuf
water	63:16	0:0	6	bitbuf
water	63:23	0:0	4	;
call	64:4	64:24	4	skip_bits
arg	64:15	64:21	5	bitbuf
water	64:15	0:0	6	bitbuf
arg	64:23	64:24	5	4
water	64:23	0:0	6	4
water	64:25	0:0	4	;
call	65:4	65:22	4	skip_bits1
arg	65:16	65:22	5	bitbuf
water	65:16	0:0	6	bitbuf
water	65:23	0:0	4	;
call	66:4	66:24	4	skip_bits
arg	66:15	66:21	5	bitbuf
water	66:15	0:0	6	bitbuf
arg	66:23	66:24	5	2
water	66:23	0:0	6	2
water	66:25	0:0	4	;
while	68:4	70:4	4	(get_bits1 (bitbuf ) == 1)
cond	68:11	68:33	5	get_bits1 (bitbuf ) == 1
call	68:11	68:28	6	get_bits1
arg	68:22	68:28	7	bitbuf
water	68:22	0:0	8	bitbuf
op	68:30	0:0	6	==
water	68:33	0:0	6	1
stmts	68:36	70:4	5	
water	68:36	0:0	6	{
call	69:6	69:26	6	skip_bits
arg	69:17	69:23	7	bitbuf
water	69:17	0:0	8	bitbuf
arg	69:25	69:26	7	8
water	69:25	0:0	8	8
water	69:27	0:0	6	;
water	70:4	0:0	6	}
water	71:2	0:0	4	}
return	73:2	73:10	2	0
water	73:9	0:0	3	0
