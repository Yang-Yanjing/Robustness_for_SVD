func	1:0	175:0	0	static int	jpeg2000_decode_tile
params	1:31	0:0	1	
param	1:32	1:57	2	Jpeg2000DecoderContext *	s
param	1:59	1:77	2	Jpeg2000Tile *	tile
param	2:32	2:48	2	AVFrame *	picture
stmnts	0:0	174:12	1	
decl	4:4	4:78	2	const AVPixFmtDescriptor	*pixdesc
op	4:38	0:0	2	=
call	4:40	4:77	3	av_pix_fmt_desc_get
arg	4:60	4:77	4	s->avctx->pix_fmt
water	4:60	0:0	5	s
op	4:61	0:0	5	->
water	4:63	0:0	5	avctx
op	4:68	0:0	5	->
water	4:70	0:0	5	pix_fmt
decl	5:4	5:34	2	int	compno
water	5:14	0:0	2	,
decl	5:4	5:34	2	int	reslevelno
water	5:26	0:0	2	,
decl	5:4	5:34	2	int	bandno
decl	6:4	6:12	2	int	x
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	y
decl	7:4	7:63	2	int	planar
op	7:18	0:0	2	=
op	7:20	0:0	2	!
op	7:21	0:0	2	!
water	7:22	0:0	2	(
water	7:23	0:0	2	pixdesc
op	7:30	0:0	2	->
water	7:32	0:0	2	flags
op	7:38	0:0	2	&
water	7:40	0:0	2	AV_PIX_FMT_FLAG_PLANAR
water	7:62	0:0	2	)
decl	8:4	8:55	2	int	pixelsize
op	8:18	0:0	2	=
water	8:20	0:0	2	planar
water	8:27	0:0	2	?
water	8:29	0:0	2	1
water	8:31	0:0	2	:
water	8:33	0:0	2	pixdesc
op	8:40	0:0	2	->
water	8:42	0:0	2	nb_components
decl	10:4	10:17	2	uint8_t	*line
decl	11:4	11:24	2	Jpeg2000T1Context	t1
for	14:4	65:4	2	(compno = 0 ;compno < s -> ncomponents;compno ++)
forinit	14:9	14:19	3	compno = 0 ;
water	14:9	0:0	4	compno
op	14:16	0:0	4	=
water	14:18	0:0	4	0
water	14:19	0:0	4	;
cond	14:21	14:33	3	compno < s -> ncomponents
water	14:21	0:0	4	compno
op	14:28	0:0	4	<
water	14:30	0:0	4	s
op	14:31	0:0	4	->
water	14:33	0:0	4	ncomponents
forexpr	14:46	14:52	3	compno ++
water	14:46	0:0	4	compno
op	14:52	0:0	4	++
stmts	14:56	65:4	3	
water	14:56	0:0	4	{
decl	15:8	15:57	4	Jpeg2000Component	*comp
op	15:36	0:0	4	=
water	15:38	0:0	4	tile
op	15:42	0:0	4	->
water	15:44	0:0	4	comp
op	15:49	0:0	4	+
water	15:51	0:0	4	compno
decl	16:8	16:59	4	Jpeg2000CodingStyle	*codsty
op	16:36	0:0	4	=
water	16:38	0:0	4	tile
op	16:42	0:0	4	->
water	16:44	0:0	4	codsty
op	16:51	0:0	4	+
water	16:53	0:0	4	compno
water	18:8	0:0	4	t1
op	18:10	0:0	4	.
water	18:11	0:0	4	stride
op	18:18	0:0	4	=
water	18:20	0:0	4	(
water	18:21	0:0	4	1
op	18:22	0:0	4	<<
water	18:24	0:0	4	codsty
op	18:30	0:0	4	->
water	18:32	0:0	4	log2_cblk_width
water	18:47	0:0	4	)
op	18:49	0:0	4	+
water	18:51	0:0	4	2
water	18:52	0:0	4	;
for	21:8	61:8	4	(reslevelno = 0 ;reslevelno < codsty -> nreslevels2decode;reslevelno ++)
forinit	21:13	21:27	5	reslevelno = 0 ;
water	21:13	0:0	6	reslevelno
op	21:24	0:0	6	=
water	21:26	0:0	6	0
water	21:27	0:0	6	;
cond	21:29	21:50	5	reslevelno < codsty -> nreslevels2decode
water	21:29	0:0	6	reslevelno
op	21:40	0:0	6	<
water	21:42	0:0	6	codsty
op	21:48	0:0	6	->
water	21:50	0:0	6	nreslevels2decode
forexpr	21:69	21:79	5	reslevelno ++
water	21:69	0:0	6	reslevelno
op	21:79	0:0	6	++
stmts	21:83	61:8	5	
water	21:83	0:0	6	{
decl	22:12	22:66	6	Jpeg2000ResLevel	*rlevel
op	22:37	0:0	6	=
water	22:39	0:0	6	comp
op	22:43	0:0	6	->
water	22:45	0:0	6	reslevel
op	22:54	0:0	6	+
water	22:56	0:0	6	reslevelno
for	24:12	60:12	6	(bandno = 0 ;bandno < rlevel -> nbands;bandno ++)
forinit	24:17	24:27	7	bandno = 0 ;
water	24:17	0:0	8	bandno
op	24:24	0:0	8	=
water	24:26	0:0	8	0
water	24:27	0:0	8	;
cond	24:29	24:46	7	bandno < rlevel -> nbands
water	24:29	0:0	8	bandno
op	24:36	0:0	8	<
water	24:38	0:0	8	rlevel
op	24:44	0:0	8	->
water	24:46	0:0	8	nbands
forexpr	24:54	24:60	7	bandno ++
water	24:54	0:0	8	bandno
op	24:60	0:0	8	++
stmts	24:64	60:12	7	
water	24:64	0:0	8	{
decl	25:16	25:40	8	int	nb_precincts
water	25:32	0:0	8	,
decl	25:16	25:40	8	int	precno
decl	26:16	26:58	8	Jpeg2000Band	*band
op	26:35	0:0	8	=
water	26:37	0:0	8	rlevel
op	26:43	0:0	8	->
water	26:45	0:0	8	band
op	26:50	0:0	8	+
water	26:52	0:0	8	bandno
decl	27:16	27:39	8	int	cblkno
op	27:27	0:0	8	=
water	27:29	0:0	8	0
water	27:30	0:0	8	,
decl	27:16	27:39	8	int	bandpos
water	29:16	0:0	8	bandpos
op	29:24	0:0	8	=
water	29:26	0:0	8	bandno
op	29:33	0:0	8	+
water	29:35	0:0	8	(
water	29:36	0:0	8	reslevelno
op	29:47	0:0	8	>
water	29:49	0:0	8	0
water	29:50	0:0	8	)
water	29:51	0:0	8	;
if	31:16	33:28	8	(band -> coord [ 0 ] [ 0 ] == band -> coord [ 0 ] [ 1 ] || band -> coord [ 1 ] [ 0 ] == band -> coord [ 1 ] [ 1 ])
cond	31:20	32:57	9	band -> coord [ 0 ] [ 0 ] == band -> coord [ 0 ] [ 1 ] || band -> coord [ 1 ] [ 0 ] == band -> coord [ 1 ] [ 1 ]
water	31:20	0:0	10	band
op	31:24	0:0	10	->
water	31:26	0:0	10	coord
op	31:31	0:0	10	[
water	31:32	0:0	10	0
op	31:33	0:0	10	]
op	31:34	0:0	10	[
water	31:35	0:0	10	0
op	31:36	0:0	10	]
op	31:38	0:0	10	==
water	31:41	0:0	10	band
op	31:45	0:0	10	->
water	31:47	0:0	10	coord
op	31:52	0:0	10	[
water	31:53	0:0	10	0
op	31:54	0:0	10	]
op	31:55	0:0	10	[
water	31:56	0:0	10	1
op	31:57	0:0	10	]
op	31:59	0:0	10	||
water	32:20	0:0	10	band
op	32:24	0:0	10	->
water	32:26	0:0	10	coord
op	32:31	0:0	10	[
water	32:32	0:0	10	1
op	32:33	0:0	10	]
op	32:34	0:0	10	[
water	32:35	0:0	10	0
op	32:36	0:0	10	]
op	32:38	0:0	10	==
water	32:41	0:0	10	band
op	32:45	0:0	10	->
water	32:47	0:0	10	coord
op	32:52	0:0	10	[
water	32:53	0:0	10	1
op	32:54	0:0	10	]
op	32:55	0:0	10	[
water	32:56	0:0	10	1
op	32:57	0:0	10	]
stmts	33:20	33:28	9	
continue	33:20	33:28	10	
water	35:16	0:0	8	nb_precincts
op	35:29	0:0	8	=
water	35:31	0:0	8	rlevel
op	35:37	0:0	8	->
water	35:39	0:0	8	num_precincts_x
op	35:55	0:0	8	*
water	35:57	0:0	8	rlevel
op	35:63	0:0	8	->
water	35:65	0:0	8	num_precincts_y
water	35:80	0:0	8	;
for	37:16	59:16	8	(precno = 0 ;precno < nb_precincts;precno ++)
forinit	37:21	37:31	9	precno = 0 ;
water	37:21	0:0	10	precno
op	37:28	0:0	10	=
water	37:30	0:0	10	0
water	37:31	0:0	10	;
cond	37:33	37:42	9	precno < nb_precincts
water	37:33	0:0	10	precno
op	37:40	0:0	10	<
water	37:42	0:0	10	nb_precincts
forexpr	37:56	37:62	9	precno ++
water	37:56	0:0	10	precno
op	37:62	0:0	10	++
stmts	37:66	59:16	9	
water	37:66	0:0	10	{
decl	38:20	38:60	10	Jpeg2000Prec	*prec
op	38:39	0:0	10	=
water	38:41	0:0	10	band
op	38:45	0:0	10	->
water	38:47	0:0	10	prec
op	38:52	0:0	10	+
water	38:54	0:0	10	precno
for	41:20	58:19	10	(cblkno = 0 ;cblkno < prec -> nb_codeblocks_width * prec -> nb_codeblocks_height;cblkno ++)
forinit	41:25	41:35	11	cblkno = 0 ;
water	41:25	0:0	12	cblkno
op	41:32	0:0	12	=
water	41:34	0:0	12	0
water	41:35	0:0	12	;
cond	41:37	41:80	11	cblkno < prec -> nb_codeblocks_width * prec -> nb_codeblocks_height
water	41:37	0:0	12	cblkno
op	41:44	0:0	12	<
water	41:46	0:0	12	prec
op	41:50	0:0	12	->
water	41:52	0:0	12	nb_codeblocks_width
op	41:72	0:0	12	*
water	41:74	0:0	12	prec
op	41:78	0:0	12	->
water	41:80	0:0	12	nb_codeblocks_height
forexpr	41:102	41:108	11	cblkno ++
water	41:102	0:0	12	cblkno
op	41:108	0:0	12	++
stmts	41:112	58:19	11	
water	41:112	0:0	12	{
decl	42:24	42:32	12	int	x
water	42:29	0:0	12	,
decl	42:24	42:32	12	int	y
decl	43:24	43:64	12	Jpeg2000Cblk	*cblk
op	43:43	0:0	12	=
water	43:45	0:0	12	prec
op	43:49	0:0	12	->
water	43:51	0:0	12	cblk
op	43:56	0:0	12	+
water	43:58	0:0	12	cblkno
call	44:24	47:43	12	decode_cblk
arg	44:36	44:37	13	s
water	44:36	0:0	14	s
arg	44:39	44:45	13	codsty
water	44:39	0:0	14	codsty
arg	44:47	44:50	13	&t1
op	44:47	0:0	14	&
water	44:48	0:0	14	t1
arg	44:52	44:56	13	cblk
water	44:52	0:0	14	cblk
arg	45:36	45:73	13	cblk->coord[0][1]-cblk->coord[0][0]
water	45:36	0:0	14	cblk
op	45:40	0:0	14	->
water	45:42	0:0	14	coord
op	45:47	0:0	14	[
water	45:48	0:0	14	0
op	45:49	0:0	14	]
op	45:50	0:0	14	[
water	45:51	0:0	14	1
op	45:52	0:0	14	]
op	45:54	0:0	14	-
water	45:56	0:0	14	cblk
op	45:60	0:0	14	->
water	45:62	0:0	14	coord
op	45:67	0:0	14	[
water	45:68	0:0	14	0
op	45:69	0:0	14	]
op	45:70	0:0	14	[
water	45:71	0:0	14	0
op	45:72	0:0	14	]
arg	46:36	46:73	13	cblk->coord[1][1]-cblk->coord[1][0]
water	46:36	0:0	14	cblk
op	46:40	0:0	14	->
water	46:42	0:0	14	coord
op	46:47	0:0	14	[
water	46:48	0:0	14	1
op	46:49	0:0	14	]
op	46:50	0:0	14	[
water	46:51	0:0	14	1
op	46:52	0:0	14	]
op	46:54	0:0	14	-
water	46:56	0:0	14	cblk
op	46:60	0:0	14	->
water	46:62	0:0	14	coord
op	46:67	0:0	14	[
water	46:68	0:0	14	1
op	46:69	0:0	14	]
op	46:70	0:0	14	[
water	46:71	0:0	14	0
op	46:72	0:0	14	]
arg	47:36	47:43	13	bandpos
water	47:36	0:0	14	bandpos
water	47:44	0:0	12	;
water	49:24	0:0	12	x
op	49:26	0:0	12	=
water	49:28	0:0	12	cblk
op	49:32	0:0	12	->
water	49:34	0:0	12	coord
op	49:39	0:0	12	[
water	49:40	0:0	12	0
op	49:41	0:0	12	]
op	49:42	0:0	12	[
water	49:43	0:0	12	0
op	49:44	0:0	12	]
op	49:46	0:0	12	-
water	49:48	0:0	12	band
op	49:52	0:0	12	->
water	49:54	0:0	12	coord
op	49:59	0:0	12	[
water	49:60	0:0	12	0
op	49:61	0:0	12	]
op	49:62	0:0	12	[
water	49:63	0:0	12	0
op	49:64	0:0	12	]
water	49:65	0:0	12	;
water	50:24	0:0	12	y
op	50:26	0:0	12	=
water	50:28	0:0	12	cblk
op	50:32	0:0	12	->
water	50:34	0:0	12	coord
op	50:39	0:0	12	[
water	50:40	0:0	12	1
op	50:41	0:0	12	]
op	50:42	0:0	12	[
water	50:43	0:0	12	0
op	50:44	0:0	12	]
op	50:46	0:0	12	-
water	50:48	0:0	12	band
op	50:52	0:0	12	->
water	50:54	0:0	12	coord
op	50:59	0:0	12	[
water	50:60	0:0	12	1
op	50:61	0:0	12	]
op	50:62	0:0	12	[
water	50:63	0:0	12	0
op	50:64	0:0	12	]
water	50:65	0:0	12	;
if	52:24	53:77	12	(codsty -> transform == FF_DWT97)
cond	52:28	52:49	13	codsty -> transform == FF_DWT97
water	52:28	0:0	14	codsty
op	52:34	0:0	14	->
water	52:36	0:0	14	transform
op	52:46	0:0	14	==
water	52:49	0:0	14	FF_DWT97
stmts	53:28	53:77	13	
call	53:28	53:76	14	dequantization_float
arg	53:49	53:50	15	x
water	53:49	0:0	16	x
arg	53:52	53:53	15	y
water	53:52	0:0	16	y
arg	53:55	53:59	15	cblk
water	53:55	0:0	16	cblk
arg	53:61	53:65	15	comp
water	53:61	0:0	16	comp
arg	53:67	53:70	15	&t1
op	53:67	0:0	16	&
water	53:68	0:0	16	t1
arg	53:72	53:76	15	band
water	53:72	0:0	16	band
water	53:77	0:0	14	;
else	54:24	55:78	12
stmts	54:29	55:78	13	
if	54:29	55:78	14	(codsty -> transform == FF_DWT97_INT)
cond	54:33	54:54	15	codsty -> transform == FF_DWT97_INT
water	54:33	0:0	16	codsty
op	54:39	0:0	16	->
water	54:41	0:0	16	transform
op	54:51	0:0	16	==
water	54:54	0:0	16	FF_DWT97_INT
stmts	55:28	55:78	15	
call	55:28	55:77	16	dequantization_int_97
arg	55:50	55:51	17	x
water	55:50	0:0	18	x
arg	55:53	55:54	17	y
water	55:53	0:0	18	y
arg	55:56	55:60	17	cblk
water	55:56	0:0	18	cblk
arg	55:62	55:66	17	comp
water	55:62	0:0	18	comp
arg	55:68	55:71	17	&t1
op	55:68	0:0	18	&
water	55:69	0:0	18	t1
arg	55:73	55:77	17	band
water	55:73	0:0	18	band
water	55:78	0:0	16	;
else	56:24	57:75	12
stmts	57:28	57:75	13	
call	57:28	57:74	14	dequantization_int
arg	57:47	57:48	15	x
water	57:47	0:0	16	x
arg	57:50	57:51	15	y
water	57:50	0:0	16	y
arg	57:53	57:57	15	cblk
water	57:53	0:0	16	cblk
arg	57:59	57:63	15	comp
water	57:59	0:0	16	comp
arg	57:65	57:68	15	&t1
op	57:65	0:0	16	&
water	57:66	0:0	16	t1
arg	57:70	57:74	15	band
water	57:70	0:0	16	band
water	57:75	0:0	14	;
water	58:19	0:0	12	}
water	59:16	0:0	10	}
water	60:12	0:0	8	}
water	61:8	0:0	6	}
call	64:8	64:107	4	ff_dwt_decode
arg	64:22	64:32	5	&comp->dwt
op	64:22	0:0	6	&
water	64:23	0:0	6	comp
op	64:27	0:0	6	->
water	64:29	0:0	6	dwt
arg	64:34	64:107	5	codsty->transform==FF_DWT97?(void*)comp->f_data:(void*)comp->i_data
water	64:34	0:0	6	codsty
op	64:40	0:0	6	->
water	64:42	0:0	6	transform
op	64:52	0:0	6	==
water	64:55	0:0	6	FF_DWT97
water	64:64	0:0	6	?
water	64:66	0:0	6	(
water	64:67	0:0	6	void
op	64:71	0:0	6	*
water	64:72	0:0	6	)
water	64:73	0:0	6	comp
op	64:77	0:0	6	->
water	64:79	0:0	6	f_data
water	64:86	0:0	6	:
water	64:88	0:0	6	(
water	64:89	0:0	6	void
op	64:93	0:0	6	*
water	64:94	0:0	6	)
water	64:95	0:0	6	comp
op	64:99	0:0	6	->
water	64:101	0:0	6	i_data
water	64:108	0:0	4	;
water	65:4	0:0	4	}
if	68:4	69:27	2	(tile -> codsty [ 0 ] . mct)
cond	68:8	68:24	3	tile -> codsty [ 0 ] . mct
water	68:8	0:0	4	tile
op	68:12	0:0	4	->
water	68:14	0:0	4	codsty
op	68:20	0:0	4	[
water	68:21	0:0	4	0
op	68:22	0:0	4	]
op	68:23	0:0	4	.
water	68:24	0:0	4	mct
stmts	69:8	69:27	3	
call	69:8	69:26	4	mct_decode
arg	69:19	69:20	5	s
water	69:19	0:0	6	s
arg	69:22	69:26	5	tile
water	69:22	0:0	6	tile
water	69:27	0:0	4	;
if	71:4	76:4	2	(s -> cdef [ 0 ] < 0)
cond	71:8	71:21	3	s -> cdef [ 0 ] < 0
water	71:8	0:0	4	s
op	71:9	0:0	4	->
water	71:11	0:0	4	cdef
op	71:15	0:0	4	[
water	71:16	0:0	4	0
op	71:17	0:0	4	]
op	71:19	0:0	4	<
water	71:21	0:0	4	0
stmts	71:24	76:4	3	
water	71:24	0:0	4	{
for	72:8	73:30	4	(x = 0 ;x < s -> ncomponents;x ++)
forinit	72:13	72:18	5	x = 0 ;
water	72:13	0:0	6	x
op	72:15	0:0	6	=
water	72:17	0:0	6	0
water	72:18	0:0	6	;
cond	72:20	72:27	5	x < s -> ncomponents
water	72:20	0:0	6	x
op	72:22	0:0	6	<
water	72:24	0:0	6	s
op	72:25	0:0	6	->
water	72:27	0:0	6	ncomponents
forexpr	72:40	72:41	5	x ++
water	72:40	0:0	6	x
op	72:41	0:0	6	++
stmts	73:12	73:30	5	
water	73:12	0:0	6	s
op	73:13	0:0	6	->
water	73:15	0:0	6	cdef
op	73:19	0:0	6	[
water	73:20	0:0	6	x
op	73:21	0:0	6	]
op	73:23	0:0	6	=
water	73:25	0:0	6	x
op	73:27	0:0	6	+
water	73:29	0:0	6	1
water	73:30	0:0	6	;
if	74:8	75:41	4	(( s -> ncomponents & 1 ) == 0)
cond	74:12	74:36	5	( s -> ncomponents & 1 ) == 0
water	74:12	0:0	6	(
water	74:13	0:0	6	s
op	74:14	0:0	6	->
water	74:16	0:0	6	ncomponents
op	74:28	0:0	6	&
water	74:30	0:0	6	1
water	74:31	0:0	6	)
op	74:33	0:0	6	==
water	74:36	0:0	6	0
stmts	75:12	75:41	5	
water	75:12	0:0	6	s
op	75:13	0:0	6	->
water	75:15	0:0	6	cdef
op	75:19	0:0	6	[
water	75:20	0:0	6	s
op	75:21	0:0	6	->
water	75:23	0:0	6	ncomponents
op	75:34	0:0	6	-
water	75:35	0:0	6	1
op	75:36	0:0	6	]
op	75:38	0:0	6	=
water	75:40	0:0	6	0
water	75:41	0:0	6	;
water	76:4	0:0	4	}
if	78:4	122:4	2	(s -> precision <= 8)
cond	78:8	78:24	3	s -> precision <= 8
water	78:8	0:0	4	s
op	78:9	0:0	4	->
water	78:11	0:0	4	precision
op	78:21	0:0	4	<=
water	78:24	0:0	4	8
stmts	78:27	122:4	3	
water	78:27	0:0	4	{
for	79:8	121:8	4	(compno = 0 ;compno < s -> ncomponents;compno ++)
forinit	79:13	79:23	5	compno = 0 ;
water	79:13	0:0	6	compno
op	79:20	0:0	6	=
water	79:22	0:0	6	0
water	79:23	0:0	6	;
cond	79:25	79:37	5	compno < s -> ncomponents
water	79:25	0:0	6	compno
op	79:32	0:0	6	<
water	79:34	0:0	6	s
op	79:35	0:0	6	->
water	79:37	0:0	6	ncomponents
forexpr	79:50	79:56	5	compno ++
water	79:50	0:0	6	compno
op	79:56	0:0	6	++
stmts	79:60	121:8	5	
water	79:60	0:0	6	{
decl	80:12	80:57	6	Jpeg2000Component	*comp
op	80:36	0:0	6	=
water	80:38	0:0	6	tile
op	80:42	0:0	6	->
water	80:44	0:0	6	comp
op	80:49	0:0	6	+
water	80:51	0:0	6	compno
decl	81:12	81:63	6	Jpeg2000CodingStyle	*codsty
op	81:40	0:0	6	=
water	81:42	0:0	6	tile
op	81:46	0:0	6	->
water	81:48	0:0	6	codsty
op	81:55	0:0	6	+
water	81:57	0:0	6	compno
decl	82:12	82:39	6	float	*datap
op	82:25	0:0	6	=
water	82:27	0:0	6	comp
op	82:31	0:0	6	->
water	82:33	0:0	6	f_data
decl	83:12	83:43	6	int32_t	*i_datap
op	83:29	0:0	6	=
water	83:31	0:0	6	comp
op	83:35	0:0	6	->
water	83:37	0:0	6	i_data
decl	84:12	84:38	6	int	cbps
op	84:21	0:0	6	=
water	84:23	0:0	6	s
op	84:24	0:0	6	->
water	84:26	0:0	6	cbps
op	84:30	0:0	6	[
water	84:31	0:0	6	compno
op	84:37	0:0	6	]
decl	85:12	85:70	6	int	w
op	85:18	0:0	6	=
water	85:20	0:0	6	tile
op	85:24	0:0	6	->
water	85:26	0:0	6	comp
op	85:30	0:0	6	[
water	85:31	0:0	6	compno
op	85:37	0:0	6	]
op	85:38	0:0	6	.
water	85:39	0:0	6	coord
op	85:44	0:0	6	[
water	85:45	0:0	6	0
op	85:46	0:0	6	]
op	85:47	0:0	6	[
water	85:48	0:0	6	1
op	85:49	0:0	6	]
op	85:51	0:0	6	-
water	85:53	0:0	6	s
op	85:54	0:0	6	->
water	85:56	0:0	6	image_offset_x
decl	86:12	86:25	6	int	plane
op	86:22	0:0	6	=
water	86:24	0:0	6	0
if	88:12	89:80	6	(planar)
cond	88:16	88:16	7	planar
water	88:16	0:0	8	planar
stmts	89:16	89:80	7	
water	89:16	0:0	8	plane
op	89:22	0:0	8	=
water	89:24	0:0	8	s
op	89:25	0:0	8	->
water	89:27	0:0	8	cdef
op	89:31	0:0	8	[
water	89:32	0:0	8	compno
op	89:38	0:0	8	]
water	89:40	0:0	8	?
water	89:42	0:0	8	s
op	89:43	0:0	8	->
water	89:45	0:0	8	cdef
op	89:49	0:0	8	[
water	89:50	0:0	8	compno
op	89:56	0:0	8	]
op	89:57	0:0	8	-
water	89:58	0:0	8	1
water	89:60	0:0	8	:
water	89:62	0:0	8	(
water	89:63	0:0	8	s
op	89:64	0:0	8	->
water	89:66	0:0	8	ncomponents
op	89:77	0:0	8	-
water	89:78	0:0	8	1
water	89:79	0:0	8	)
water	89:80	0:0	8	;
water	92:12	0:0	6	y
op	92:17	0:0	6	=
water	92:19	0:0	6	tile
op	92:23	0:0	6	->
water	92:25	0:0	6	comp
op	92:29	0:0	6	[
water	92:30	0:0	6	compno
op	92:36	0:0	6	]
op	92:37	0:0	6	.
water	92:38	0:0	6	coord
op	92:43	0:0	6	[
water	92:44	0:0	6	1
op	92:45	0:0	6	]
op	92:46	0:0	6	[
water	92:47	0:0	6	0
op	92:48	0:0	6	]
op	92:50	0:0	6	-
water	92:52	0:0	6	s
op	92:53	0:0	6	->
water	92:55	0:0	6	image_offset_y
op	92:70	0:0	6	/
water	92:72	0:0	6	s
op	92:73	0:0	6	->
water	92:75	0:0	6	cdy
op	92:78	0:0	6	[
water	92:79	0:0	6	compno
op	92:85	0:0	6	]
water	92:86	0:0	6	;
water	93:12	0:0	6	line
op	93:17	0:0	6	=
water	93:19	0:0	6	picture
op	93:26	0:0	6	->
water	93:28	0:0	6	data
op	93:32	0:0	6	[
water	93:33	0:0	6	plane
op	93:38	0:0	6	]
op	93:40	0:0	6	+
water	93:42	0:0	6	y
op	93:44	0:0	6	*
water	93:46	0:0	6	picture
op	93:53	0:0	6	->
water	93:55	0:0	6	linesize
op	93:63	0:0	6	[
water	93:64	0:0	6	plane
op	93:69	0:0	6	]
water	93:70	0:0	6	;
for	94:12	120:12	6	(;y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y;y ++)
forinit	94:17	94:17	7	;
water	94:17	0:0	8	;
cond	94:19	94:59	7	y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y
water	94:19	0:0	8	y
op	94:21	0:0	8	<
water	94:23	0:0	8	tile
op	94:27	0:0	8	->
water	94:29	0:0	8	comp
op	94:33	0:0	8	[
water	94:34	0:0	8	compno
op	94:40	0:0	8	]
op	94:41	0:0	8	.
water	94:42	0:0	8	coord
op	94:47	0:0	8	[
water	94:48	0:0	8	1
op	94:49	0:0	8	]
op	94:50	0:0	8	[
water	94:51	0:0	8	1
op	94:52	0:0	8	]
op	94:54	0:0	8	-
water	94:56	0:0	8	s
op	94:57	0:0	8	->
water	94:59	0:0	8	image_offset_y
forexpr	94:75	94:77	7	y ++
water	94:75	0:0	8	y
op	94:77	0:0	8	++
stmts	94:81	120:12	7	
water	94:81	0:0	8	{
decl	95:16	95:28	8	uint8_t	*dst
water	97:16	0:0	8	x
op	97:20	0:0	8	=
water	97:22	0:0	8	tile
op	97:26	0:0	8	->
water	97:28	0:0	8	comp
op	97:32	0:0	8	[
water	97:33	0:0	8	compno
op	97:39	0:0	8	]
op	97:40	0:0	8	.
water	97:41	0:0	8	coord
op	97:46	0:0	8	[
water	97:47	0:0	8	0
op	97:48	0:0	8	]
op	97:49	0:0	8	[
water	97:50	0:0	8	0
op	97:51	0:0	8	]
op	97:53	0:0	8	-
water	97:55	0:0	8	s
op	97:56	0:0	8	->
water	97:58	0:0	8	image_offset_x
op	97:73	0:0	8	/
water	97:75	0:0	8	s
op	97:76	0:0	8	->
water	97:78	0:0	8	cdx
op	97:81	0:0	8	[
water	97:82	0:0	8	compno
op	97:88	0:0	8	]
water	97:89	0:0	8	;
water	98:16	0:0	8	dst
op	98:20	0:0	8	=
water	98:22	0:0	8	line
op	98:27	0:0	8	+
water	98:29	0:0	8	x
op	98:31	0:0	8	*
water	98:33	0:0	8	pixelsize
op	98:43	0:0	8	+
water	98:45	0:0	8	compno
op	98:51	0:0	8	*
op	98:52	0:0	8	!
water	98:53	0:0	8	planar
water	98:59	0:0	8	;
if	100:16	109:16	8	(codsty -> transform == FF_DWT97)
cond	100:20	100:41	9	codsty -> transform == FF_DWT97
water	100:20	0:0	10	codsty
op	100:26	0:0	10	->
water	100:28	0:0	10	transform
op	100:38	0:0	10	==
water	100:41	0:0	10	FF_DWT97
stmts	100:51	109:16	9	
water	100:51	0:0	10	{
for	101:20	108:20	10	(;x < w;x ++)
forinit	101:25	101:25	11	;
water	101:25	0:0	12	;
cond	101:27	101:31	11	x < w
water	101:27	0:0	12	x
op	101:29	0:0	12	<
water	101:31	0:0	12	w
forexpr	101:34	101:36	11	x ++
water	101:34	0:0	12	x
op	101:36	0:0	12	++
stmts	101:40	108:20	11	
water	101:40	0:0	12	{
decl	102:24	102:68	12	int	val
op	102:32	0:0	12	=
call	102:34	102:47	13	lrintf
arg	102:41	102:47	14	*datap
op	102:41	0:0	15	*
water	102:42	0:0	15	datap
op	102:49	0:0	12	+
water	102:51	0:0	12	(
water	102:52	0:0	12	1
op	102:54	0:0	12	<<
water	102:57	0:0	12	(
water	102:58	0:0	12	cbps
op	102:63	0:0	12	-
water	102:65	0:0	12	1
water	102:66	0:0	12	)
water	102:67	0:0	12	)
water	104:24	0:0	12	val
op	104:28	0:0	12	=
call	104:30	104:61	12	av_clip
arg	104:38	104:41	13	val
water	104:38	0:0	14	val
arg	104:43	104:44	13	0
water	104:43	0:0	14	0
arg	104:46	104:61	13	(1<<cbps)-1
water	104:46	0:0	14	(
water	104:47	0:0	14	1
op	104:49	0:0	14	<<
water	104:52	0:0	14	cbps
water	104:56	0:0	14	)
op	104:58	0:0	14	-
water	104:60	0:0	14	1
water	104:62	0:0	12	;
op	105:24	0:0	12	*
water	105:25	0:0	12	dst
op	105:29	0:0	12	=
water	105:31	0:0	12	val
op	105:35	0:0	12	<<
water	105:38	0:0	12	(
water	105:39	0:0	12	8
op	105:41	0:0	12	-
water	105:43	0:0	12	cbps
water	105:47	0:0	12	)
water	105:48	0:0	12	;
water	106:24	0:0	12	datap
op	106:29	0:0	12	++
water	106:31	0:0	12	;
water	107:24	0:0	12	dst
op	107:28	0:0	12	+=
water	107:31	0:0	12	pixelsize
water	107:40	0:0	12	;
water	108:20	0:0	12	}
water	109:16	0:0	10	}
else	109:18	118:16	8
stmts	109:23	118:16	9	
water	109:23	0:0	10	{
for	110:20	117:20	10	(;x < w;x ++)
forinit	110:25	110:25	11	;
water	110:25	0:0	12	;
cond	110:27	110:31	11	x < w
water	110:27	0:0	12	x
op	110:29	0:0	12	<
water	110:31	0:0	12	w
forexpr	110:34	110:36	11	x ++
water	110:34	0:0	12	x
op	110:36	0:0	12	++
stmts	110:40	117:20	11	
water	110:40	0:0	12	{
decl	111:24	111:62	12	int	val
op	111:32	0:0	12	=
op	111:34	0:0	12	*
water	111:35	0:0	12	i_datap
op	111:43	0:0	12	+
water	111:45	0:0	12	(
water	111:46	0:0	12	1
op	111:48	0:0	12	<<
water	111:51	0:0	12	(
water	111:52	0:0	12	cbps
op	111:57	0:0	12	-
water	111:59	0:0	12	1
water	111:60	0:0	12	)
water	111:61	0:0	12	)
water	113:24	0:0	12	val
op	113:28	0:0	12	=
call	113:30	113:61	12	av_clip
arg	113:38	113:41	13	val
water	113:38	0:0	14	val
arg	113:43	113:44	13	0
water	113:43	0:0	14	0
arg	113:46	113:61	13	(1<<cbps)-1
water	113:46	0:0	14	(
water	113:47	0:0	14	1
op	113:49	0:0	14	<<
water	113:52	0:0	14	cbps
water	113:56	0:0	14	)
op	113:58	0:0	14	-
water	113:60	0:0	14	1
water	113:62	0:0	12	;
op	114:24	0:0	12	*
water	114:25	0:0	12	dst
op	114:29	0:0	12	=
water	114:31	0:0	12	val
op	114:35	0:0	12	<<
water	114:38	0:0	12	(
water	114:39	0:0	12	8
op	114:41	0:0	12	-
water	114:43	0:0	12	cbps
water	114:47	0:0	12	)
water	114:48	0:0	12	;
water	115:24	0:0	12	i_datap
op	115:31	0:0	12	++
water	115:33	0:0	12	;
water	116:24	0:0	12	dst
op	116:28	0:0	12	+=
water	116:31	0:0	12	pixelsize
water	116:40	0:0	12	;
water	117:20	0:0	12	}
water	118:16	0:0	10	}
water	119:16	0:0	8	line
op	119:21	0:0	8	+=
water	119:24	0:0	8	picture
op	119:31	0:0	8	->
water	119:33	0:0	8	linesize
op	119:41	0:0	8	[
water	119:42	0:0	8	plane
op	119:47	0:0	8	]
water	119:48	0:0	8	;
water	120:12	0:0	8	}
water	121:8	0:0	6	}
water	122:4	0:0	4	}
else	122:6	172:4	2
stmts	122:11	172:4	3	
water	122:11	0:0	4	{
decl	123:8	126:80	4	int	precision
op	123:22	0:0	4	=
water	123:24	0:0	4	picture
op	123:31	0:0	4	->
water	123:33	0:0	4	format
op	123:40	0:0	4	==
water	123:43	0:0	4	AV_PIX_FMT_XYZ12
op	123:60	0:0	4	||
water	124:24	0:0	4	picture
op	124:31	0:0	4	->
water	124:33	0:0	4	format
op	124:40	0:0	4	==
water	124:43	0:0	4	AV_PIX_FMT_RGB48
op	124:60	0:0	4	||
water	125:24	0:0	4	picture
op	125:31	0:0	4	->
water	125:33	0:0	4	format
op	125:40	0:0	4	==
water	125:43	0:0	4	AV_PIX_FMT_RGBA64
op	125:61	0:0	4	||
water	126:24	0:0	4	picture
op	126:31	0:0	4	->
water	126:33	0:0	4	format
op	126:40	0:0	4	==
water	126:43	0:0	4	AV_PIX_FMT_GRAY16
water	126:61	0:0	4	?
water	126:63	0:0	4	16
water	126:66	0:0	4	:
water	126:68	0:0	4	s
op	126:69	0:0	4	->
water	126:71	0:0	4	precision
for	128:8	171:8	4	(compno = 0 ;compno < s -> ncomponents;compno ++)
forinit	128:13	128:23	5	compno = 0 ;
water	128:13	0:0	6	compno
op	128:20	0:0	6	=
water	128:22	0:0	6	0
water	128:23	0:0	6	;
cond	128:25	128:37	5	compno < s -> ncomponents
water	128:25	0:0	6	compno
op	128:32	0:0	6	<
water	128:34	0:0	6	s
op	128:35	0:0	6	->
water	128:37	0:0	6	ncomponents
forexpr	128:50	128:56	5	compno ++
water	128:50	0:0	6	compno
op	128:56	0:0	6	++
stmts	128:60	171:8	5	
water	128:60	0:0	6	{
decl	129:12	129:57	6	Jpeg2000Component	*comp
op	129:36	0:0	6	=
water	129:38	0:0	6	tile
op	129:42	0:0	6	->
water	129:44	0:0	6	comp
op	129:49	0:0	6	+
water	129:51	0:0	6	compno
decl	130:12	130:63	6	Jpeg2000CodingStyle	*codsty
op	130:40	0:0	6	=
water	130:42	0:0	6	tile
op	130:46	0:0	6	->
water	130:48	0:0	6	codsty
op	130:55	0:0	6	+
water	130:57	0:0	6	compno
decl	131:12	131:39	6	float	*datap
op	131:25	0:0	6	=
water	131:27	0:0	6	comp
op	131:31	0:0	6	->
water	131:33	0:0	6	f_data
decl	132:12	132:43	6	int32_t	*i_datap
op	132:29	0:0	6	=
water	132:31	0:0	6	comp
op	132:35	0:0	6	->
water	132:37	0:0	6	i_data
decl	133:12	133:27	6	uint16_t	*linel
decl	134:12	134:38	6	int	cbps
op	134:21	0:0	6	=
water	134:23	0:0	6	s
op	134:24	0:0	6	->
water	134:26	0:0	6	cbps
op	134:30	0:0	6	[
water	134:31	0:0	6	compno
op	134:37	0:0	6	]
decl	135:12	135:70	6	int	w
op	135:18	0:0	6	=
water	135:20	0:0	6	tile
op	135:24	0:0	6	->
water	135:26	0:0	6	comp
op	135:30	0:0	6	[
water	135:31	0:0	6	compno
op	135:37	0:0	6	]
op	135:38	0:0	6	.
water	135:39	0:0	6	coord
op	135:44	0:0	6	[
water	135:45	0:0	6	0
op	135:46	0:0	6	]
op	135:47	0:0	6	[
water	135:48	0:0	6	1
op	135:49	0:0	6	]
op	135:51	0:0	6	-
water	135:53	0:0	6	s
op	135:54	0:0	6	->
water	135:56	0:0	6	image_offset_x
decl	136:12	136:25	6	int	plane
op	136:22	0:0	6	=
water	136:24	0:0	6	0
if	138:12	139:80	6	(planar)
cond	138:16	138:16	7	planar
water	138:16	0:0	8	planar
stmts	139:16	139:80	7	
water	139:16	0:0	8	plane
op	139:22	0:0	8	=
water	139:24	0:0	8	s
op	139:25	0:0	8	->
water	139:27	0:0	8	cdef
op	139:31	0:0	8	[
water	139:32	0:0	8	compno
op	139:38	0:0	8	]
water	139:40	0:0	8	?
water	139:42	0:0	8	s
op	139:43	0:0	8	->
water	139:45	0:0	8	cdef
op	139:49	0:0	8	[
water	139:50	0:0	8	compno
op	139:56	0:0	8	]
op	139:57	0:0	8	-
water	139:58	0:0	8	1
water	139:60	0:0	8	:
water	139:62	0:0	8	(
water	139:63	0:0	8	s
op	139:64	0:0	8	->
water	139:66	0:0	8	ncomponents
op	139:77	0:0	8	-
water	139:78	0:0	8	1
water	139:79	0:0	8	)
water	139:80	0:0	8	;
water	141:12	0:0	6	y
op	141:18	0:0	6	=
water	141:20	0:0	6	tile
op	141:24	0:0	6	->
water	141:26	0:0	6	comp
op	141:30	0:0	6	[
water	141:31	0:0	6	compno
op	141:37	0:0	6	]
op	141:38	0:0	6	.
water	141:39	0:0	6	coord
op	141:44	0:0	6	[
water	141:45	0:0	6	1
op	141:46	0:0	6	]
op	141:47	0:0	6	[
water	141:48	0:0	6	0
op	141:49	0:0	6	]
op	141:51	0:0	6	-
water	141:53	0:0	6	s
op	141:54	0:0	6	->
water	141:56	0:0	6	image_offset_y
op	141:71	0:0	6	/
water	141:73	0:0	6	s
op	141:74	0:0	6	->
water	141:76	0:0	6	cdy
op	141:79	0:0	6	[
water	141:80	0:0	6	compno
op	141:86	0:0	6	]
water	141:87	0:0	6	;
water	142:12	0:0	6	linel
op	142:18	0:0	6	=
water	142:20	0:0	6	(
water	142:21	0:0	6	uint16_t
op	142:30	0:0	6	*
water	142:31	0:0	6	)
water	142:32	0:0	6	picture
op	142:39	0:0	6	->
water	142:41	0:0	6	data
op	142:45	0:0	6	[
water	142:46	0:0	6	plane
op	142:51	0:0	6	]
op	142:53	0:0	6	+
water	142:55	0:0	6	y
op	142:57	0:0	6	*
water	142:59	0:0	6	(
water	142:60	0:0	6	picture
op	142:67	0:0	6	->
water	142:69	0:0	6	linesize
op	142:77	0:0	6	[
water	142:78	0:0	6	plane
op	142:83	0:0	6	]
op	142:85	0:0	6	>>
water	142:88	0:0	6	1
water	142:89	0:0	6	)
water	142:90	0:0	6	;
for	143:12	170:12	6	(;y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y;y ++)
forinit	143:17	143:17	7	;
water	143:17	0:0	8	;
cond	143:19	143:59	7	y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y
water	143:19	0:0	8	y
op	143:21	0:0	8	<
water	143:23	0:0	8	tile
op	143:27	0:0	8	->
water	143:29	0:0	8	comp
op	143:33	0:0	8	[
water	143:34	0:0	8	compno
op	143:40	0:0	8	]
op	143:41	0:0	8	.
water	143:42	0:0	8	coord
op	143:47	0:0	8	[
water	143:48	0:0	8	1
op	143:49	0:0	8	]
op	143:50	0:0	8	[
water	143:51	0:0	8	1
op	143:52	0:0	8	]
op	143:54	0:0	8	-
water	143:56	0:0	8	s
op	143:57	0:0	8	->
water	143:59	0:0	8	image_offset_y
forexpr	143:75	143:77	7	y ++
water	143:75	0:0	8	y
op	143:77	0:0	8	++
stmts	143:81	170:12	7	
water	143:81	0:0	8	{
decl	144:16	144:29	8	uint16_t	*dst
water	146:16	0:0	8	x
op	146:20	0:0	8	=
water	146:22	0:0	8	tile
op	146:26	0:0	8	->
water	146:28	0:0	8	comp
op	146:32	0:0	8	[
water	146:33	0:0	8	compno
op	146:39	0:0	8	]
op	146:40	0:0	8	.
water	146:41	0:0	8	coord
op	146:46	0:0	8	[
water	146:47	0:0	8	0
op	146:48	0:0	8	]
op	146:49	0:0	8	[
water	146:50	0:0	8	0
op	146:51	0:0	8	]
op	146:53	0:0	8	-
water	146:55	0:0	8	s
op	146:56	0:0	8	->
water	146:58	0:0	8	image_offset_x
op	146:73	0:0	8	/
water	146:75	0:0	8	s
op	146:76	0:0	8	->
water	146:78	0:0	8	cdx
op	146:81	0:0	8	[
water	146:82	0:0	8	compno
op	146:88	0:0	8	]
water	146:89	0:0	8	;
water	147:16	0:0	8	dst
op	147:20	0:0	8	=
water	147:22	0:0	8	linel
op	147:28	0:0	8	+
water	147:30	0:0	8	(
water	147:31	0:0	8	x
op	147:33	0:0	8	*
water	147:35	0:0	8	pixelsize
op	147:45	0:0	8	+
water	147:47	0:0	8	compno
op	147:53	0:0	8	*
op	147:54	0:0	8	!
water	147:55	0:0	8	planar
water	147:61	0:0	8	)
water	147:62	0:0	8	;
if	148:16	158:16	8	(codsty -> transform == FF_DWT97)
cond	148:20	148:41	9	codsty -> transform == FF_DWT97
water	148:20	0:0	10	codsty
op	148:26	0:0	10	->
water	148:28	0:0	10	transform
op	148:38	0:0	10	==
water	148:41	0:0	10	FF_DWT97
stmts	148:51	158:16	9	
water	148:51	0:0	10	{
for	149:20	157:20	10	(;x < w;x ++)
forinit	149:25	149:25	11	;
water	149:25	0:0	12	;
cond	149:27	149:31	11	x < w
water	149:27	0:0	12	x
op	149:29	0:0	12	<
water	149:31	0:0	12	w
forexpr	149:34	149:36	11	x ++
water	149:34	0:0	12	x
op	149:36	0:0	12	++
stmts	149:40	157:20	11	
water	149:40	0:0	12	{
decl	150:24	150:69	12	int	val
op	150:33	0:0	12	=
call	150:35	150:48	13	lrintf
arg	150:42	150:48	14	*datap
op	150:42	0:0	15	*
water	150:43	0:0	15	datap
op	150:50	0:0	12	+
water	150:52	0:0	12	(
water	150:53	0:0	12	1
op	150:55	0:0	12	<<
water	150:58	0:0	12	(
water	150:59	0:0	12	cbps
op	150:64	0:0	12	-
water	150:66	0:0	12	1
water	150:67	0:0	12	)
water	150:68	0:0	12	)
water	152:24	0:0	12	val
op	152:28	0:0	12	=
call	152:30	152:61	12	av_clip
arg	152:38	152:41	13	val
water	152:38	0:0	14	val
arg	152:43	152:44	13	0
water	152:43	0:0	14	0
arg	152:46	152:61	13	(1<<cbps)-1
water	152:46	0:0	14	(
water	152:47	0:0	14	1
op	152:49	0:0	14	<<
water	152:52	0:0	14	cbps
water	152:56	0:0	14	)
op	152:58	0:0	14	-
water	152:60	0:0	14	1
water	152:62	0:0	12	;
op	154:24	0:0	12	*
water	154:25	0:0	12	dst
op	154:29	0:0	12	=
water	154:31	0:0	12	val
op	154:35	0:0	12	<<
water	154:38	0:0	12	(
water	154:39	0:0	12	precision
op	154:49	0:0	12	-
water	154:51	0:0	12	cbps
water	154:55	0:0	12	)
water	154:56	0:0	12	;
water	155:24	0:0	12	datap
op	155:29	0:0	12	++
water	155:31	0:0	12	;
water	156:24	0:0	12	dst
op	156:28	0:0	12	+=
water	156:31	0:0	12	pixelsize
water	156:40	0:0	12	;
water	157:20	0:0	12	}
water	158:16	0:0	10	}
else	158:18	168:16	8
stmts	158:23	168:16	9	
water	158:23	0:0	10	{
for	159:20	167:20	10	(;x < w;x ++)
forinit	159:25	159:25	11	;
water	159:25	0:0	12	;
cond	159:27	159:31	11	x < w
water	159:27	0:0	12	x
op	159:29	0:0	12	<
water	159:31	0:0	12	w
forexpr	159:34	159:36	11	x ++
water	159:34	0:0	12	x
op	159:36	0:0	12	++
stmts	159:40	167:20	11	
water	159:40	0:0	12	{
decl	160:24	160:62	12	int	val
op	160:32	0:0	12	=
op	160:34	0:0	12	*
water	160:35	0:0	12	i_datap
op	160:43	0:0	12	+
water	160:45	0:0	12	(
water	160:46	0:0	12	1
op	160:48	0:0	12	<<
water	160:51	0:0	12	(
water	160:52	0:0	12	cbps
op	160:57	0:0	12	-
water	160:59	0:0	12	1
water	160:60	0:0	12	)
water	160:61	0:0	12	)
water	162:24	0:0	12	val
op	162:28	0:0	12	=
call	162:30	162:61	12	av_clip
arg	162:38	162:41	13	val
water	162:38	0:0	14	val
arg	162:43	162:44	13	0
water	162:43	0:0	14	0
arg	162:46	162:61	13	(1<<cbps)-1
water	162:46	0:0	14	(
water	162:47	0:0	14	1
op	162:49	0:0	14	<<
water	162:52	0:0	14	cbps
water	162:56	0:0	14	)
op	162:58	0:0	14	-
water	162:60	0:0	14	1
water	162:62	0:0	12	;
op	164:24	0:0	12	*
water	164:25	0:0	12	dst
op	164:29	0:0	12	=
water	164:31	0:0	12	val
op	164:35	0:0	12	<<
water	164:38	0:0	12	(
water	164:39	0:0	12	precision
op	164:49	0:0	12	-
water	164:51	0:0	12	cbps
water	164:55	0:0	12	)
water	164:56	0:0	12	;
water	165:24	0:0	12	i_datap
op	165:31	0:0	12	++
water	165:33	0:0	12	;
water	166:24	0:0	12	dst
op	166:28	0:0	12	+=
water	166:31	0:0	12	pixelsize
water	166:40	0:0	12	;
water	167:20	0:0	12	}
water	168:16	0:0	10	}
water	169:16	0:0	8	linel
op	169:22	0:0	8	+=
water	169:25	0:0	8	picture
op	169:32	0:0	8	->
water	169:34	0:0	8	linesize
op	169:42	0:0	8	[
water	169:43	0:0	8	plane
op	169:48	0:0	8	]
op	169:50	0:0	8	>>
water	169:53	0:0	8	1
water	169:54	0:0	8	;
water	170:12	0:0	8	}
water	171:8	0:0	6	}
water	172:4	0:0	4	}
return	174:4	174:12	2	0
water	174:11	0:0	3	0
