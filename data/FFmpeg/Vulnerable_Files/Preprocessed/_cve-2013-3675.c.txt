func	2:0	39:0	0	static int	process_frame_obj
params	2:28	0:0	1	
param	2:29	2:50	2	SANMVideoContext *	ctx
stmnts	0:0	38:4	1	
decl	4:4	4:35	2	uint16_t	codec
water	4:18	0:0	2	,
decl	4:4	4:35	2	uint16_t	top
water	4:23	0:0	2	,
decl	4:4	4:35	2	uint16_t	left
water	4:29	0:0	2	,
decl	4:4	4:35	2	uint16_t	w
water	4:32	0:0	2	,
decl	4:4	4:35	2	uint16_t	h
water	6:4	0:0	2	codec
op	6:10	0:0	2	=
call	6:12	6:42	2	bytestream2_get_le16u
arg	6:34	6:42	3	&ctx->gb
op	6:34	0:0	4	&
water	6:35	0:0	4	ctx
op	6:38	0:0	4	->
water	6:40	0:0	4	gb
water	6:43	0:0	2	;
water	7:4	0:0	2	left
op	7:10	0:0	2	=
call	7:12	7:42	2	bytestream2_get_le16u
arg	7:34	7:42	3	&ctx->gb
op	7:34	0:0	4	&
water	7:35	0:0	4	ctx
op	7:38	0:0	4	->
water	7:40	0:0	4	gb
water	7:43	0:0	2	;
water	8:4	0:0	2	top
op	8:10	0:0	2	=
call	8:12	8:42	2	bytestream2_get_le16u
arg	8:34	8:42	3	&ctx->gb
op	8:34	0:0	4	&
water	8:35	0:0	4	ctx
op	8:38	0:0	4	->
water	8:40	0:0	4	gb
water	8:43	0:0	2	;
water	9:4	0:0	2	w
op	9:10	0:0	2	=
call	9:12	9:42	2	bytestream2_get_le16u
arg	9:34	9:42	3	&ctx->gb
op	9:34	0:0	4	&
water	9:35	0:0	4	ctx
op	9:38	0:0	4	->
water	9:40	0:0	4	gb
water	9:43	0:0	2	;
water	10:4	0:0	2	h
op	10:10	0:0	2	=
call	10:12	10:42	2	bytestream2_get_le16u
arg	10:34	10:42	3	&ctx->gb
op	10:34	0:0	4	&
water	10:35	0:0	4	ctx
op	10:38	0:0	4	->
water	10:40	0:0	4	gb
water	10:43	0:0	2	;
if	12:4	20:4	2	(ctx -> width < left + w || ctx -> height < top + h)
cond	12:8	12:53	3	ctx -> width < left + w || ctx -> height < top + h
water	12:8	0:0	4	ctx
op	12:11	0:0	4	->
water	12:13	0:0	4	width
op	12:19	0:0	4	<
water	12:21	0:0	4	left
op	12:26	0:0	4	+
water	12:28	0:0	4	w
op	12:30	0:0	4	||
water	12:33	0:0	4	ctx
op	12:36	0:0	4	->
water	12:38	0:0	4	height
op	12:45	0:0	4	<
water	12:47	0:0	4	top
op	12:51	0:0	4	+
water	12:53	0:0	4	h
stmts	12:56	20:4	3	
water	12:56	0:0	4	{
water	13:8	0:0	4	ctx
op	13:11	0:0	4	->
water	13:13	0:0	4	avctx
op	13:18	0:0	4	->
water	13:20	0:0	4	width
op	13:27	0:0	4	=
call	13:29	13:55	4	FFMAX
arg	13:35	13:43	5	left+w
water	13:35	0:0	6	left
op	13:40	0:0	6	+
water	13:42	0:0	6	w
arg	13:45	13:55	5	ctx->width
water	13:45	0:0	6	ctx
op	13:48	0:0	6	->
water	13:50	0:0	6	width
water	13:56	0:0	4	;
water	14:8	0:0	4	ctx
op	14:11	0:0	4	->
water	14:13	0:0	4	avctx
op	14:18	0:0	4	->
water	14:20	0:0	4	height
op	14:27	0:0	4	=
call	14:29	14:55	4	FFMAX
arg	14:35	14:42	5	top+h
water	14:35	0:0	6	top
op	14:39	0:0	6	+
water	14:41	0:0	6	h
arg	14:44	14:55	5	ctx->height
water	14:44	0:0	6	ctx
op	14:47	0:0	6	->
water	14:49	0:0	6	height
water	14:56	0:0	4	;
call	15:8	15:41	4	init_sizes
arg	15:19	15:22	5	ctx
water	15:19	0:0	6	ctx
arg	15:24	15:32	5	left+w
water	15:24	0:0	6	left
op	15:29	0:0	6	+
water	15:31	0:0	6	w
arg	15:34	15:41	5	top+h
water	15:34	0:0	6	top
op	15:38	0:0	6	+
water	15:40	0:0	6	h
water	15:42	0:0	4	;
if	16:8	19:8	4	(init_buffers (ctx ))
cond	16:12	16:28	5	init_buffers (ctx )
call	16:12	16:28	6	init_buffers
arg	16:25	16:28	7	ctx
water	16:25	0:0	8	ctx
stmts	16:31	19:8	5	
water	16:31	0:0	6	{
call	17:12	17:71	6	av_log
arg	17:19	17:29	7	ctx->avctx
water	17:19	0:0	8	ctx
op	17:22	0:0	8	->
water	17:24	0:0	8	avctx
arg	17:31	17:43	7	AV_LOG_ERROR
water	17:31	0:0	8	AV_LOG_ERROR
arg	17:45	17:71	7	"error resizing buffers\n"
water	17:45	0:0	8	"error resizing buffers\n"
water	17:72	0:0	6	;
return	18:12	18:34	6	AVERROR(ENOMEM)
call	18:19	18:33	7	AVERROR
arg	18:27	18:33	8	ENOMEM
water	18:27	0:0	9	ENOMEM
water	19:8	0:0	6	}
water	20:4	0:0	4	}
call	21:4	21:32	2	bytestream2_skip
arg	21:21	21:29	3	&ctx->gb
op	21:21	0:0	4	&
water	21:22	0:0	4	ctx
op	21:25	0:0	4	->
water	21:27	0:0	4	gb
arg	21:31	21:32	3	4
water	21:31	0:0	4	4
water	21:33	0:0	2	;
call	23:4	23:46	2	av_dlog
arg	23:12	23:22	3	ctx->avctx
water	23:12	0:0	4	ctx
op	23:15	0:0	4	->
water	23:17	0:0	4	avctx
arg	23:24	23:39	3	"subcodec %d\n"
water	23:24	0:0	4	"subcodec %d\n"
arg	23:41	23:46	3	codec
water	23:41	0:0	4	codec
water	23:47	0:0	2	;
switch	24:4	38:4	2	(codec)
cond	24:12	24:12	3	codec
water	24:12	0:0	4	codec
stmts	24:19	38:4	3	
water	24:19	0:0	4	{
label	25:4	25:10	4	case 1 :
label	26:4	26:10	4	case 3 :
return	27:8	27:47	4	old_codec1(ctx,top,left,w,h)
call	27:15	27:46	5	old_codec1
arg	27:26	27:29	6	ctx
water	27:26	0:0	7	ctx
arg	27:31	27:34	6	top
water	27:31	0:0	7	top
arg	27:36	27:40	6	left
water	27:36	0:0	7	left
arg	27:42	27:43	6	w
water	27:42	0:0	7	w
arg	27:45	27:46	6	h
water	27:45	0:0	7	h
break	28:8	28:13	4	
label	29:4	29:11	4	case 37 :
return	30:8	30:48	4	old_codec37(ctx,top,left,w,h)
call	30:15	30:47	5	old_codec37
arg	30:27	30:30	6	ctx
water	30:27	0:0	7	ctx
arg	30:32	30:35	6	top
water	30:32	0:0	7	top
arg	30:37	30:41	6	left
water	30:37	0:0	7	left
arg	30:43	30:44	6	w
water	30:43	0:0	7	w
arg	30:46	30:47	6	h
water	30:46	0:0	7	h
break	31:8	31:13	4	
label	32:4	32:11	4	case 47 :
return	33:8	33:48	4	old_codec47(ctx,top,left,w,h)
call	33:15	33:47	5	old_codec47
arg	33:27	33:30	6	ctx
water	33:27	0:0	7	ctx
arg	33:32	33:35	6	top
water	33:32	0:0	7	top
arg	33:37	33:41	6	left
water	33:37	0:0	7	left
arg	33:43	33:44	6	w
water	33:43	0:0	7	w
arg	33:46	33:47	6	h
water	33:46	0:0	7	h
break	34:8	34:13	4	
label	35:4	35:11	4	default :
call	36:8	36:72	4	av_log_ask_for_sample
arg	36:30	36:40	5	ctx->avctx
water	36:30	0:0	6	ctx
op	36:33	0:0	6	->
water	36:35	0:0	6	avctx
arg	36:42	36:65	5	"unknown subcodec %d\n"
water	36:42	0:0	6	"unknown subcodec %d\n"
arg	36:67	36:72	5	codec
water	36:67	0:0	6	codec
water	36:73	0:0	4	;
return	37:8	37:35	4	AVERROR_PATCHWELCOME
water	37:15	0:0	5	AVERROR_PATCHWELCOME
water	38:4	0:0	4	}
