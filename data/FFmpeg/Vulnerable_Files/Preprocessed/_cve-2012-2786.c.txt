func	2:0	52:0	0	static int	decode_wdlt
params	2:22	0:0	1	
param	2:23	2:37	2	uint8_t *	frame
param	2:39	2:48	2	int	width
param	2:50	2:60	2	int	height
param	3:23	3:41	2	const uint8_t *	src
param	3:43	3:65	2	const uint8_t *	src_end
stmnts	0:0	51:12	1	
decl	5:4	5:55	2	const uint8_t	*frame_end
op	5:31	0:0	2	=
water	5:33	0:0	2	frame
op	5:39	0:0	2	+
water	5:41	0:0	2	width
op	5:47	0:0	2	*
water	5:49	0:0	2	height
decl	6:4	6:21	2	uint8_t	*line_ptr
decl	7:4	7:36	2	int	count
water	7:13	0:0	2	,
decl	7:4	7:36	2	int	i
water	7:16	0:0	2	,
decl	7:4	7:36	2	int	v
water	7:19	0:0	2	,
decl	7:4	7:36	2	int	lines
water	7:26	0:0	2	,
decl	7:4	7:36	2	int	segments
water	9:4	0:0	2	lines
op	9:10	0:0	2	=
call	9:12	9:36	2	bytestream_get_le16
arg	9:32	9:36	3	&src
op	9:32	0:0	4	&
water	9:33	0:0	4	src
water	9:37	0:0	2	;
if	10:4	11:17	2	(lines > height || src >= src_end)
cond	10:8	10:33	3	lines > height || src >= src_end
water	10:8	0:0	4	lines
op	10:14	0:0	4	>
water	10:16	0:0	4	height
op	10:23	0:0	4	||
water	10:26	0:0	4	src
op	10:30	0:0	4	>=
water	10:33	0:0	4	src_end
stmts	11:8	11:17	3	
return	11:8	11:17	4	-1
op	11:15	0:0	5	-
water	11:16	0:0	5	1
while	13:4	49:4	2	(lines --)
cond	13:11	13:16	3	lines --
water	13:11	0:0	4	lines
op	13:16	0:0	4	--
stmts	13:20	49:4	3	
water	13:20	0:0	4	{
water	14:8	0:0	4	segments
op	14:17	0:0	4	=
call	14:19	14:43	4	bytestream_get_le16
arg	14:39	14:43	5	&src
op	14:39	0:0	6	&
water	14:40	0:0	6	src
water	14:44	0:0	4	;
while	15:8	21:8	4	(( segments & 0 xC000 ) == 0 xC000)
cond	15:15	15:39	5	( segments & 0 xC000 ) == 0 xC000
water	15:15	0:0	6	(
water	15:16	0:0	6	segments
op	15:25	0:0	6	&
water	15:27	0:0	6	0
water	15:28	0:0	6	xC000
water	15:33	0:0	6	)
op	15:35	0:0	6	==
water	15:38	0:0	6	0
water	15:39	0:0	6	xC000
stmts	15:46	21:8	5	
water	15:46	0:0	6	{
water	16:12	0:0	6	unsigned
water	16:21	0:0	6	delta
op	16:27	0:0	6	=
op	16:29	0:0	6	-
water	16:30	0:0	6	(
water	16:31	0:0	6	(
water	16:32	0:0	6	int16_t
water	16:39	0:0	6	)
water	16:40	0:0	6	segments
op	16:49	0:0	6	*
water	16:51	0:0	6	width
water	16:56	0:0	6	)
water	16:57	0:0	6	;
if	17:12	18:25	6	(frame_end - frame <= delta)
cond	17:16	17:37	7	frame_end - frame <= delta
water	17:16	0:0	8	frame_end
op	17:26	0:0	8	-
water	17:28	0:0	8	frame
op	17:34	0:0	8	<=
water	17:37	0:0	8	delta
stmts	18:16	18:25	7	
return	18:16	18:25	8	-1
op	18:23	0:0	9	-
water	18:24	0:0	9	1
water	19:12	0:0	6	frame
op	19:21	0:0	6	+=
water	19:24	0:0	6	delta
water	19:29	0:0	6	;
water	20:12	0:0	6	segments
op	20:21	0:0	6	=
call	20:23	20:47	6	bytestream_get_le16
arg	20:43	20:47	7	&src
op	20:43	0:0	8	&
water	20:44	0:0	8	src
water	20:48	0:0	6	;
water	21:8	0:0	6	}
if	22:8	25:8	4	(segments & 0 x8000)
cond	22:12	22:24	5	segments & 0 x8000
water	22:12	0:0	6	segments
op	22:21	0:0	6	&
water	22:23	0:0	6	0
water	22:24	0:0	6	x8000
stmts	22:31	25:8	5	
water	22:31	0:0	6	{
water	23:12	0:0	6	frame
op	23:17	0:0	6	[
water	23:18	0:0	6	width
op	23:24	0:0	6	-
water	23:26	0:0	6	1
op	23:27	0:0	6	]
op	23:29	0:0	6	=
water	23:31	0:0	6	segments
op	23:40	0:0	6	&
water	23:42	0:0	6	0
water	23:43	0:0	6	xFF
water	23:46	0:0	6	;
water	24:12	0:0	6	segments
op	24:21	0:0	6	=
call	24:23	24:47	6	bytestream_get_le16
arg	24:43	24:47	7	&src
op	24:43	0:0	8	&
water	24:44	0:0	8	src
water	24:48	0:0	6	;
water	25:8	0:0	6	}
water	26:8	0:0	4	line_ptr
op	26:17	0:0	4	=
water	26:19	0:0	4	frame
water	26:24	0:0	4	;
water	27:8	0:0	4	frame
op	27:14	0:0	4	+=
water	27:17	0:0	4	width
water	27:22	0:0	4	;
while	28:8	48:8	4	(segments --)
cond	28:15	28:23	5	segments --
water	28:15	0:0	6	segments
op	28:23	0:0	6	--
stmts	28:27	48:8	5	
water	28:27	0:0	6	{
if	29:12	30:25	6	(src_end - src < 2)
cond	29:16	29:32	7	src_end - src < 2
water	29:16	0:0	8	src_end
op	29:24	0:0	8	-
water	29:26	0:0	8	src
op	29:30	0:0	8	<
water	29:32	0:0	8	2
stmts	30:16	30:25	7	
return	30:16	30:25	8	-1
op	30:23	0:0	9	-
water	30:24	0:0	9	1
if	31:12	32:25	6	(frame - line_ptr <= * src)
cond	31:16	31:37	7	frame - line_ptr <= * src
water	31:16	0:0	8	frame
op	31:22	0:0	8	-
water	31:24	0:0	8	line_ptr
op	31:33	0:0	8	<=
op	31:36	0:0	8	*
water	31:37	0:0	8	src
stmts	32:16	32:25	7	
return	32:16	32:25	8	-1
op	32:23	0:0	9	-
water	32:24	0:0	9	1
water	33:12	0:0	6	line_ptr
op	33:21	0:0	6	+=
op	33:24	0:0	6	*
water	33:25	0:0	6	src
op	33:28	0:0	6	++
water	33:30	0:0	6	;
water	34:12	0:0	6	count
op	34:18	0:0	6	=
water	34:20	0:0	6	(
water	34:21	0:0	6	int8_t
water	34:27	0:0	6	)
op	34:28	0:0	6	*
water	34:29	0:0	6	src
op	34:32	0:0	6	++
water	34:34	0:0	6	;
if	35:12	40:12	6	(count >= 0)
cond	35:16	35:25	7	count >= 0
water	35:16	0:0	8	count
op	35:22	0:0	8	>=
water	35:25	0:0	8	0
stmts	35:28	40:12	7	
water	35:28	0:0	8	{
if	36:16	37:29	8	(frame - line_ptr < count * 2 || src_end - src < count * 2)
cond	36:20	36:72	9	frame - line_ptr < count * 2 || src_end - src < count * 2
water	36:20	0:0	10	frame
op	36:26	0:0	10	-
water	36:28	0:0	10	line_ptr
op	36:37	0:0	10	<
water	36:39	0:0	10	count
op	36:44	0:0	10	*
water	36:45	0:0	10	2
op	36:47	0:0	10	||
water	36:50	0:0	10	src_end
op	36:58	0:0	10	-
water	36:60	0:0	10	src
op	36:64	0:0	10	<
water	36:66	0:0	10	count
op	36:71	0:0	10	*
water	36:72	0:0	10	2
stmts	37:20	37:29	9	
return	37:20	37:29	10	-1
op	37:27	0:0	11	-
water	37:28	0:0	11	1
call	38:16	38:61	8	bytestream_get_buffer
arg	38:38	38:42	9	&src
op	38:38	0:0	10	&
water	38:39	0:0	10	src
arg	38:44	38:52	9	line_ptr
water	38:44	0:0	10	line_ptr
arg	38:54	38:61	9	count*2
water	38:54	0:0	10	count
op	38:59	0:0	10	*
water	38:60	0:0	10	2
water	38:62	0:0	8	;
water	39:16	0:0	8	line_ptr
op	39:25	0:0	8	+=
water	39:28	0:0	8	count
op	39:34	0:0	8	*
water	39:36	0:0	8	2
water	39:37	0:0	8	;
water	40:12	0:0	8	}
else	40:14	47:12	6
stmts	40:19	47:12	7	
water	40:19	0:0	8	{
water	41:16	0:0	8	count
op	41:22	0:0	8	=
op	41:24	0:0	8	-
water	41:25	0:0	8	count
water	41:30	0:0	8	;
if	42:16	43:29	8	(frame - line_ptr < count * 2 || src_end - src < 2)
cond	42:20	42:66	9	frame - line_ptr < count * 2 || src_end - src < 2
water	42:20	0:0	10	frame
op	42:26	0:0	10	-
water	42:28	0:0	10	line_ptr
op	42:37	0:0	10	<
water	42:39	0:0	10	count
op	42:44	0:0	10	*
water	42:45	0:0	10	2
op	42:47	0:0	10	||
water	42:50	0:0	10	src_end
op	42:58	0:0	10	-
water	42:60	0:0	10	src
op	42:64	0:0	10	<
water	42:66	0:0	10	2
stmts	43:20	43:29	9	
return	43:20	43:29	10	-1
op	43:27	0:0	11	-
water	43:28	0:0	11	1
water	44:16	0:0	8	v
op	44:18	0:0	8	=
call	44:20	44:44	8	bytestream_get_le16
arg	44:40	44:44	9	&src
op	44:40	0:0	10	&
water	44:41	0:0	10	src
water	44:45	0:0	8	;
for	45:16	46:53	8	(i = 0 ;i < count;i ++)
forinit	45:21	45:26	9	i = 0 ;
water	45:21	0:0	10	i
op	45:23	0:0	10	=
water	45:25	0:0	10	0
water	45:26	0:0	10	;
cond	45:28	45:32	9	i < count
water	45:28	0:0	10	i
op	45:30	0:0	10	<
water	45:32	0:0	10	count
forexpr	45:39	45:40	9	i ++
water	45:39	0:0	10	i
op	45:40	0:0	10	++
stmts	46:20	46:53	9	
call	46:20	46:52	10	bytestream_put_le16
arg	46:40	46:49	11	&line_ptr
op	46:40	0:0	12	&
water	46:41	0:0	12	line_ptr
arg	46:51	46:52	11	v
water	46:51	0:0	12	v
water	46:53	0:0	10	;
water	47:12	0:0	8	}
water	48:8	0:0	6	}
water	49:4	0:0	4	}
return	51:4	51:12	2	0
water	51:11	0:0	3	0
