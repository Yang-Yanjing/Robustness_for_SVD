func	5:0	152:0	0	int	MPV_frame_start
params	5:19	0:0	1	
param	5:20	5:37	2	MpegEncContext *	s
param	5:39	5:60	2	AVCodecContext *	avctx
stmnts	0:0	151:12	1	
decl	7:4	7:9	2	int	i
decl	8:4	8:16	2	Picture	*pic
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	mb_skipped
op	9:18	0:0	2	=
water	9:20	0:0	2	0
water	9:21	0:0	2	;
call	11:4	11:97	2	assert
arg	11:11	11:97	3	s->last_picture_ptr==NULL||s->out_format!=FMT_H264||s->codec_id==CODEC_ID_SVQ3
water	11:11	0:0	4	s
op	11:12	0:0	4	->
water	11:14	0:0	4	last_picture_ptr
op	11:30	0:0	4	==
water	11:32	0:0	4	NULL
op	11:37	0:0	4	||
water	11:40	0:0	4	s
op	11:41	0:0	4	->
water	11:43	0:0	4	out_format
op	11:54	0:0	4	!=
water	11:57	0:0	4	FMT_H264
op	11:66	0:0	4	||
water	11:69	0:0	4	s
op	11:70	0:0	4	->
water	11:72	0:0	4	codec_id
op	11:81	0:0	4	==
water	11:84	0:0	4	CODEC_ID_SVQ3
water	11:98	0:0	2	;
if	14:4	29:4	2	(s -> pict_type != AV_PICTURE_TYPE_B && s -> last_picture_ptr && s -> last_picture_ptr != s -> next_picture_ptr && s -> last_picture_ptr -> data [ 0 ])
cond	14:8	14:141	3	s -> pict_type != AV_PICTURE_TYPE_B && s -> last_picture_ptr && s -> last_picture_ptr != s -> next_picture_ptr && s -> last_picture_ptr -> data [ 0 ]
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	pict_type
op	14:21	0:0	4	!=
water	14:24	0:0	4	AV_PICTURE_TYPE_B
op	14:42	0:0	4	&&
water	14:45	0:0	4	s
op	14:46	0:0	4	->
water	14:48	0:0	4	last_picture_ptr
op	14:65	0:0	4	&&
water	14:68	0:0	4	s
op	14:69	0:0	4	->
water	14:71	0:0	4	last_picture_ptr
op	14:88	0:0	4	!=
water	14:91	0:0	4	s
op	14:92	0:0	4	->
water	14:94	0:0	4	next_picture_ptr
op	14:111	0:0	4	&&
water	14:114	0:0	4	s
op	14:115	0:0	4	->
water	14:117	0:0	4	last_picture_ptr
op	14:133	0:0	4	->
water	14:135	0:0	4	data
op	14:139	0:0	4	[
water	14:140	0:0	4	0
op	14:141	0:0	4	]
stmts	14:144	29:4	3	
water	14:144	0:0	4	{
if	15:6	28:6	4	(s -> out_format != FMT_H264 || s -> codec_id == CODEC_ID_SVQ3)
cond	15:9	15:53	5	s -> out_format != FMT_H264 || s -> codec_id == CODEC_ID_SVQ3
water	15:9	0:0	6	s
op	15:10	0:0	6	->
water	15:12	0:0	6	out_format
op	15:23	0:0	6	!=
water	15:26	0:0	6	FMT_H264
op	15:35	0:0	6	||
water	15:38	0:0	6	s
op	15:39	0:0	6	->
water	15:41	0:0	6	codec_id
op	15:50	0:0	6	==
water	15:53	0:0	6	CODEC_ID_SVQ3
stmts	15:67	28:6	5	
water	15:67	0:0	6	{
call	16:10	16:50	6	free_frame_buffer
arg	16:28	16:29	7	s
water	16:28	0:0	8	s
arg	16:31	16:50	7	s->last_picture_ptr
water	16:31	0:0	8	s
op	16:32	0:0	8	->
water	16:34	0:0	8	last_picture_ptr
water	16:51	0:0	6	;
if	20:8	27:8	6	(! s -> encoding)
cond	20:11	20:15	7	! s -> encoding
op	20:11	0:0	8	!
water	20:12	0:0	8	s
op	20:13	0:0	8	->
water	20:15	0:0	8	encoding
stmts	20:24	27:8	7	
water	20:24	0:0	8	{
for	21:12	26:12	8	(i = 0 ;i < s -> picture_count;i ++)
forinit	21:16	21:19	9	i = 0 ;
water	21:16	0:0	10	i
op	21:17	0:0	10	=
water	21:18	0:0	10	0
water	21:19	0:0	10	;
cond	21:21	21:26	9	i < s -> picture_count
water	21:21	0:0	10	i
op	21:22	0:0	10	<
water	21:23	0:0	10	s
op	21:24	0:0	10	->
water	21:26	0:0	10	picture_count
forexpr	21:41	21:42	9	i ++
water	21:41	0:0	10	i
op	21:42	0:0	10	++
stmts	21:45	26:12	9	
water	21:45	0:0	10	{
if	22:16	25:16	10	(s -> picture [ i ] . data [ 0 ] && & s -> picture [ i ] != s -> next_picture_ptr && s -> picture [ i ] . reference)
cond	22:19	22:99	11	s -> picture [ i ] . data [ 0 ] && & s -> picture [ i ] != s -> next_picture_ptr && s -> picture [ i ] . reference
water	22:19	0:0	12	s
op	22:20	0:0	12	->
water	22:22	0:0	12	picture
op	22:29	0:0	12	[
water	22:30	0:0	12	i
op	22:31	0:0	12	]
op	22:32	0:0	12	.
water	22:33	0:0	12	data
op	22:37	0:0	12	[
water	22:38	0:0	12	0
op	22:39	0:0	12	]
op	22:41	0:0	12	&&
op	22:44	0:0	12	&
water	22:45	0:0	12	s
op	22:46	0:0	12	->
water	22:48	0:0	12	picture
op	22:55	0:0	12	[
water	22:56	0:0	12	i
op	22:57	0:0	12	]
op	22:59	0:0	12	!=
water	22:62	0:0	12	s
op	22:63	0:0	12	->
water	22:65	0:0	12	next_picture_ptr
op	22:82	0:0	12	&&
water	22:85	0:0	12	s
op	22:86	0:0	12	->
water	22:88	0:0	12	picture
op	22:95	0:0	12	[
water	22:96	0:0	12	i
op	22:97	0:0	12	]
op	22:98	0:0	12	.
water	22:99	0:0	12	reference
stmts	22:109	25:16	11	
water	22:109	0:0	12	{
call	23:20	23:76	12	av_log
arg	23:27	23:32	13	avctx
water	23:27	0:0	14	avctx
arg	23:34	23:46	13	AV_LOG_ERROR
water	23:34	0:0	14	AV_LOG_ERROR
arg	23:48	23:76	13	"releasing zombie picture\n"
water	23:48	0:0	14	"releasing zombie picture\n"
water	23:77	0:0	12	;
call	24:20	24:55	12	free_frame_buffer
arg	24:38	24:39	13	s
water	24:38	0:0	14	s
arg	24:41	24:55	13	&s->picture[i]
op	24:41	0:0	14	&
water	24:42	0:0	14	s
op	24:43	0:0	14	->
water	24:45	0:0	14	picture
op	24:52	0:0	14	[
water	24:53	0:0	14	i
op	24:54	0:0	14	]
water	24:56	0:0	12	;
water	25:16	0:0	12	}
water	26:12	0:0	10	}
water	27:8	0:0	8	}
water	28:6	0:0	6	}
water	29:4	0:0	4	}
if	31:4	63:4	2	(! s -> encoding)
cond	31:7	31:11	3	! s -> encoding
op	31:7	0:0	4	!
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	encoding
stmts	31:20	63:4	3	
water	31:20	0:0	4	{
call	32:8	32:39	4	ff_release_unused_pictures
arg	32:35	32:36	5	s
water	32:35	0:0	6	s
arg	32:38	32:39	5	1
water	32:38	0:0	6	1
water	32:40	0:0	4	;
if	34:8	35:39	4	(s -> current_picture_ptr && s -> current_picture_ptr -> data [ 0 ] == NULL)
cond	34:11	34:70	5	s -> current_picture_ptr && s -> current_picture_ptr -> data [ 0 ] == NULL
water	34:11	0:0	6	s
op	34:12	0:0	6	->
water	34:14	0:0	6	current_picture_ptr
op	34:34	0:0	6	&&
water	34:37	0:0	6	s
op	34:38	0:0	6	->
water	34:40	0:0	6	current_picture_ptr
op	34:59	0:0	6	->
water	34:61	0:0	6	data
op	34:65	0:0	6	[
water	34:66	0:0	6	0
op	34:67	0:0	6	]
op	34:68	0:0	6	==
water	34:70	0:0	6	NULL
stmts	35:12	35:39	5	
water	35:12	0:0	6	pic
op	35:15	0:0	6	=
water	35:17	0:0	6	s
op	35:18	0:0	6	->
water	35:20	0:0	6	current_picture_ptr
water	35:39	0:0	6	;
else	36:8	39:8	4
stmts	36:12	39:8	5	
water	36:12	0:0	6	{
water	37:12	0:0	6	i
op	37:13	0:0	6	=
call	37:15	37:42	6	ff_find_unused_picture
arg	37:38	37:39	7	s
water	37:38	0:0	8	s
arg	37:41	37:42	7	0
water	37:41	0:0	8	0
water	37:43	0:0	6	;
water	38:12	0:0	6	pic
op	38:15	0:0	6	=
op	38:17	0:0	6	&
water	38:18	0:0	6	s
op	38:19	0:0	6	->
water	38:21	0:0	6	picture
op	38:28	0:0	6	[
water	38:29	0:0	6	i
op	38:30	0:0	6	]
water	38:31	0:0	6	;
water	39:8	0:0	6	}
water	41:8	0:0	4	pic
op	41:11	0:0	4	->
water	41:13	0:0	4	reference
op	41:22	0:0	4	=
water	41:24	0:0	4	0
water	41:25	0:0	4	;
if	42:8	47:8	4	(! s -> dropable)
cond	42:12	42:16	5	! s -> dropable
op	42:12	0:0	6	!
water	42:13	0:0	6	s
op	42:14	0:0	6	->
water	42:16	0:0	6	dropable
stmts	42:25	47:8	5	
water	42:25	0:0	6	{
if	43:12	44:53	6	(s -> codec_id == CODEC_ID_H264)
cond	43:16	43:31	7	s -> codec_id == CODEC_ID_H264
water	43:16	0:0	8	s
op	43:17	0:0	8	->
water	43:19	0:0	8	codec_id
op	43:28	0:0	8	==
water	43:31	0:0	8	CODEC_ID_H264
stmts	44:16	44:53	7	
water	44:16	0:0	8	pic
op	44:19	0:0	8	->
water	44:21	0:0	8	reference
op	44:31	0:0	8	=
water	44:33	0:0	8	s
op	44:34	0:0	8	->
water	44:36	0:0	8	picture_structure
water	44:53	0:0	8	;
else	45:12	46:34	6
stmts	45:17	46:34	7	
if	45:17	46:34	8	(s -> pict_type != AV_PICTURE_TYPE_B)
cond	45:21	45:37	9	s -> pict_type != AV_PICTURE_TYPE_B
water	45:21	0:0	10	s
op	45:22	0:0	10	->
water	45:24	0:0	10	pict_type
op	45:34	0:0	10	!=
water	45:37	0:0	10	AV_PICTURE_TYPE_B
stmts	46:16	46:34	9	
water	46:16	0:0	10	pic
op	46:19	0:0	10	->
water	46:21	0:0	10	reference
op	46:31	0:0	10	=
water	46:33	0:0	10	3
water	46:34	0:0	10	;
water	47:8	0:0	6	}
water	49:8	0:0	4	pic
op	49:11	0:0	4	->
water	49:13	0:0	4	coded_picture_number
op	49:33	0:0	4	=
water	49:35	0:0	4	s
op	49:36	0:0	4	->
water	49:38	0:0	4	coded_picture_number
op	49:58	0:0	4	++
water	49:60	0:0	4	;
if	51:8	52:21	4	(ff_alloc_picture (s ,pic ,0 ) < 0)
cond	51:11	51:41	5	ff_alloc_picture (s ,pic ,0 ) < 0
call	51:11	51:37	6	ff_alloc_picture
arg	51:28	51:29	7	s
water	51:28	0:0	8	s
arg	51:31	51:34	7	pic
water	51:31	0:0	8	pic
arg	51:36	51:37	7	0
water	51:36	0:0	8	0
op	51:39	0:0	6	<
water	51:41	0:0	6	0
stmts	52:12	52:21	5	
return	52:12	52:21	6	-1
op	52:19	0:0	7	-
water	52:20	0:0	7	1
water	54:8	0:0	4	s
op	54:9	0:0	4	->
water	54:11	0:0	4	current_picture_ptr
op	54:30	0:0	4	=
water	54:32	0:0	4	pic
water	54:35	0:0	4	;
water	56:8	0:0	4	s
op	56:9	0:0	4	->
water	56:11	0:0	4	current_picture_ptr
op	56:30	0:0	4	->
water	56:32	0:0	4	top_field_first
op	56:47	0:0	4	=
water	56:49	0:0	4	s
op	56:50	0:0	4	->
water	56:52	0:0	4	top_field_first
water	56:67	0:0	4	;
if	57:8	60:8	4	(s -> codec_id == CODEC_ID_MPEG1VIDEO || s -> codec_id == CODEC_ID_MPEG2VIDEO)
cond	57:11	57:64	5	s -> codec_id == CODEC_ID_MPEG1VIDEO || s -> codec_id == CODEC_ID_MPEG2VIDEO
water	57:11	0:0	6	s
op	57:12	0:0	6	->
water	57:14	0:0	6	codec_id
op	57:23	0:0	6	==
water	57:26	0:0	6	CODEC_ID_MPEG1VIDEO
op	57:46	0:0	6	||
water	57:49	0:0	6	s
op	57:50	0:0	6	->
water	57:52	0:0	6	codec_id
op	57:61	0:0	6	==
water	57:64	0:0	6	CODEC_ID_MPEG2VIDEO
stmts	57:85	60:8	5	
water	57:85	0:0	6	{
if	58:12	59:115	6	(s -> picture_structure != PICT_FRAME)
cond	58:15	58:39	7	s -> picture_structure != PICT_FRAME
water	58:15	0:0	8	s
op	58:16	0:0	8	->
water	58:18	0:0	8	picture_structure
op	58:36	0:0	8	!=
water	58:39	0:0	8	PICT_FRAME
stmts	59:16	59:115	7	
water	59:16	0:0	8	s
op	59:17	0:0	8	->
water	59:19	0:0	8	current_picture_ptr
op	59:38	0:0	8	->
water	59:40	0:0	8	top_field_first
op	59:55	0:0	8	=
water	59:57	0:0	8	(
water	59:58	0:0	8	s
op	59:59	0:0	8	->
water	59:61	0:0	8	picture_structure
op	59:79	0:0	8	==
water	59:82	0:0	8	PICT_TOP_FIELD
water	59:96	0:0	8	)
op	59:98	0:0	8	==
water	59:101	0:0	8	s
op	59:102	0:0	8	->
water	59:104	0:0	8	first_field
water	59:115	0:0	8	;
water	60:8	0:0	6	}
water	61:8	0:0	4	s
op	61:9	0:0	4	->
water	61:11	0:0	4	current_picture_ptr
op	61:30	0:0	4	->
water	61:32	0:0	4	interlaced_frame
op	61:48	0:0	4	=
op	61:50	0:0	4	!
water	61:51	0:0	4	s
op	61:52	0:0	4	->
water	61:54	0:0	4	progressive_frame
op	61:72	0:0	4	&&
op	61:75	0:0	4	!
water	61:76	0:0	4	s
op	61:77	0:0	4	->
water	61:79	0:0	4	progressive_sequence
water	61:99	0:0	4	;
water	62:8	0:0	4	s
op	62:9	0:0	4	->
water	62:11	0:0	4	current_picture_ptr
op	62:30	0:0	4	->
water	62:32	0:0	4	field_picture
op	62:45	0:0	4	=
water	62:47	0:0	4	s
op	62:48	0:0	4	->
water	62:50	0:0	4	picture_structure
op	62:68	0:0	4	!=
water	62:71	0:0	4	PICT_FRAME
water	62:81	0:0	4	;
water	63:4	0:0	4	}
water	65:4	0:0	2	s
op	65:5	0:0	2	->
water	65:7	0:0	2	current_picture_ptr
op	65:26	0:0	2	->
water	65:28	0:0	2	pict_type
op	65:37	0:0	2	=
water	65:39	0:0	2	s
op	65:40	0:0	2	->
water	65:42	0:0	2	pict_type
water	65:51	0:0	2	;
water	68:4	0:0	2	s
op	68:5	0:0	2	->
water	68:7	0:0	2	current_picture_ptr
op	68:26	0:0	2	->
water	68:28	0:0	2	key_frame
op	68:37	0:0	2	=
water	68:39	0:0	2	s
op	68:40	0:0	2	->
water	68:42	0:0	2	pict_type
op	68:52	0:0	2	==
water	68:55	0:0	2	AV_PICTURE_TYPE_I
water	68:72	0:0	2	;
call	70:4	70:63	2	ff_copy_picture
arg	70:20	70:39	3	&s->current_picture
op	70:20	0:0	4	&
water	70:21	0:0	4	s
op	70:22	0:0	4	->
water	70:24	0:0	4	current_picture
arg	70:41	70:63	3	s->current_picture_ptr
water	70:41	0:0	4	s
op	70:42	0:0	4	->
water	70:44	0:0	4	current_picture_ptr
water	70:64	0:0	2	;
if	72:4	76:4	2	(s -> pict_type != AV_PICTURE_TYPE_B)
cond	72:8	72:24	3	s -> pict_type != AV_PICTURE_TYPE_B
water	72:8	0:0	4	s
op	72:9	0:0	4	->
water	72:11	0:0	4	pict_type
op	72:21	0:0	4	!=
water	72:24	0:0	4	AV_PICTURE_TYPE_B
stmts	72:43	76:4	3	
water	72:43	0:0	4	{
water	73:8	0:0	4	s
op	73:9	0:0	4	->
water	73:11	0:0	4	last_picture_ptr
op	73:27	0:0	4	=
water	73:29	0:0	4	s
op	73:30	0:0	4	->
water	73:32	0:0	4	next_picture_ptr
water	73:48	0:0	4	;
if	74:8	75:55	4	(! s -> dropable)
cond	74:11	74:15	5	! s -> dropable
op	74:11	0:0	6	!
water	74:12	0:0	6	s
op	74:13	0:0	6	->
water	74:15	0:0	6	dropable
stmts	75:12	75:55	5	
water	75:12	0:0	6	s
op	75:13	0:0	6	->
water	75:15	0:0	6	next_picture_ptr
op	75:31	0:0	6	=
water	75:33	0:0	6	s
op	75:34	0:0	6	->
water	75:36	0:0	6	current_picture_ptr
water	75:55	0:0	6	;
water	76:4	0:0	4	}
if	83:4	108:4	2	(s -> codec_id != CODEC_ID_H264)
cond	83:7	83:22	3	s -> codec_id != CODEC_ID_H264
water	83:7	0:0	4	s
op	83:8	0:0	4	->
water	83:10	0:0	4	codec_id
op	83:19	0:0	4	!=
water	83:22	0:0	4	CODEC_ID_H264
stmts	83:36	108:4	3	
water	83:36	0:0	4	{
if	84:8	98:8	4	(( s -> last_picture_ptr == NULL || s -> last_picture_ptr -> data [ 0 ] == NULL ) && ( s -> pict_type != AV_PICTURE_TYPE_I || s -> picture_structure != PICT_FRAME ))
cond	84:11	85:81	5	( s -> last_picture_ptr == NULL || s -> last_picture_ptr -> data [ 0 ] == NULL ) && ( s -> pict_type != AV_PICTURE_TYPE_I || s -> picture_structure != PICT_FRAME )
water	84:11	0:0	6	(
water	84:12	0:0	6	s
op	84:13	0:0	6	->
water	84:15	0:0	6	last_picture_ptr
op	84:31	0:0	6	==
water	84:33	0:0	6	NULL
op	84:38	0:0	6	||
water	84:41	0:0	6	s
op	84:42	0:0	6	->
water	84:44	0:0	6	last_picture_ptr
op	84:60	0:0	6	->
water	84:62	0:0	6	data
op	84:66	0:0	6	[
water	84:67	0:0	6	0
op	84:68	0:0	6	]
op	84:69	0:0	6	==
water	84:71	0:0	6	NULL
water	84:75	0:0	6	)
op	84:77	0:0	6	&&
water	85:11	0:0	6	(
water	85:12	0:0	6	s
op	85:13	0:0	6	->
water	85:15	0:0	6	pict_type
op	85:24	0:0	6	!=
water	85:26	0:0	6	AV_PICTURE_TYPE_I
op	85:44	0:0	6	||
water	85:47	0:0	6	s
op	85:48	0:0	6	->
water	85:50	0:0	6	picture_structure
op	85:68	0:0	6	!=
water	85:71	0:0	6	PICT_FRAME
water	85:81	0:0	6	)
stmts	85:83	98:8	5	
water	85:83	0:0	6	{
if	86:12	87:84	6	(s -> pict_type != AV_PICTURE_TYPE_I)
cond	86:16	86:32	7	s -> pict_type != AV_PICTURE_TYPE_I
water	86:16	0:0	8	s
op	86:17	0:0	8	->
water	86:19	0:0	8	pict_type
op	86:29	0:0	8	!=
water	86:32	0:0	8	AV_PICTURE_TYPE_I
stmts	87:16	87:84	7	
call	87:16	87:83	8	av_log
arg	87:23	87:28	9	avctx
water	87:23	0:0	10	avctx
arg	87:30	87:42	9	AV_LOG_ERROR
water	87:30	0:0	10	AV_LOG_ERROR
arg	87:44	87:83	9	"warning: first frame is no keyframe\n"
water	87:44	0:0	10	"warning: first frame is no keyframe\n"
water	87:84	0:0	8	;
else	88:12	89:106	6
stmts	88:17	89:106	7	
if	88:17	89:106	8	(s -> picture_structure != PICT_FRAME)
cond	88:21	88:45	9	s -> picture_structure != PICT_FRAME
water	88:21	0:0	10	s
op	88:22	0:0	10	->
water	88:24	0:0	10	picture_structure
op	88:42	0:0	10	!=
water	88:45	0:0	10	PICT_FRAME
stmts	89:16	89:106	9	
call	89:16	89:105	10	av_log
arg	89:23	89:28	11	avctx
water	89:23	0:0	12	avctx
arg	89:30	89:41	11	AV_LOG_INFO
water	89:30	0:0	12	AV_LOG_INFO
arg	89:43	89:105	11	"allocate dummy last picture for field based first keyframe\n"
water	89:43	0:0	12	"allocate dummy last picture for field based first keyframe\n"
water	89:106	0:0	10	;
water	92:12	0:0	6	i
op	92:13	0:0	6	=
call	92:15	92:42	6	ff_find_unused_picture
arg	92:38	92:39	7	s
water	92:38	0:0	8	s
arg	92:41	92:42	7	0
water	92:41	0:0	8	0
water	92:43	0:0	6	;
water	93:12	0:0	6	s
op	93:13	0:0	6	->
water	93:15	0:0	6	last_picture_ptr
op	93:31	0:0	6	=
op	93:33	0:0	6	&
water	93:34	0:0	6	s
op	93:35	0:0	6	->
water	93:37	0:0	6	picture
op	93:44	0:0	6	[
water	93:45	0:0	6	i
op	93:46	0:0	6	]
water	93:47	0:0	6	;
if	94:12	95:25	6	(ff_alloc_picture (s ,s -> last_picture_ptr ,0 ) < 0)
cond	94:15	94:61	7	ff_alloc_picture (s ,s -> last_picture_ptr ,0 ) < 0
call	94:15	94:57	8	ff_alloc_picture
arg	94:32	94:33	9	s
water	94:32	0:0	10	s
arg	94:35	94:54	9	s->last_picture_ptr
water	94:35	0:0	10	s
op	94:36	0:0	10	->
water	94:38	0:0	10	last_picture_ptr
arg	94:56	94:57	9	0
water	94:56	0:0	10	0
op	94:59	0:0	8	<
water	94:61	0:0	8	0
stmts	95:16	95:25	7	
return	95:16	95:25	8	-1
op	95:23	0:0	9	-
water	95:24	0:0	9	1
call	96:12	96:79	6	ff_thread_report_progress
arg	96:38	96:67	7	(AVFrame*)s->last_picture_ptr
water	96:38	0:0	8	(
water	96:39	0:0	8	AVFrame
op	96:46	0:0	8	*
water	96:47	0:0	8	)
water	96:48	0:0	8	s
op	96:49	0:0	8	->
water	96:51	0:0	8	last_picture_ptr
arg	96:69	96:76	7	INT_MAX
water	96:69	0:0	8	INT_MAX
arg	96:78	96:79	7	0
water	96:78	0:0	8	0
water	96:80	0:0	6	;
call	97:12	97:79	6	ff_thread_report_progress
arg	97:38	97:67	7	(AVFrame*)s->last_picture_ptr
water	97:38	0:0	8	(
water	97:39	0:0	8	AVFrame
op	97:46	0:0	8	*
water	97:47	0:0	8	)
water	97:48	0:0	8	s
op	97:49	0:0	8	->
water	97:51	0:0	8	last_picture_ptr
arg	97:69	97:76	7	INT_MAX
water	97:69	0:0	8	INT_MAX
arg	97:78	97:79	7	1
water	97:78	0:0	8	1
water	97:80	0:0	6	;
water	98:8	0:0	6	}
if	99:8	107:8	4	(( s -> next_picture_ptr == NULL || s -> next_picture_ptr -> data [ 0 ] == NULL ) && s -> pict_type == AV_PICTURE_TYPE_B)
cond	99:11	99:94	5	( s -> next_picture_ptr == NULL || s -> next_picture_ptr -> data [ 0 ] == NULL ) && s -> pict_type == AV_PICTURE_TYPE_B
water	99:11	0:0	6	(
water	99:12	0:0	6	s
op	99:13	0:0	6	->
water	99:15	0:0	6	next_picture_ptr
op	99:31	0:0	6	==
water	99:33	0:0	6	NULL
op	99:38	0:0	6	||
water	99:41	0:0	6	s
op	99:42	0:0	6	->
water	99:44	0:0	6	next_picture_ptr
op	99:60	0:0	6	->
water	99:62	0:0	6	data
op	99:66	0:0	6	[
water	99:67	0:0	6	0
op	99:68	0:0	6	]
op	99:69	0:0	6	==
water	99:71	0:0	6	NULL
water	99:75	0:0	6	)
op	99:77	0:0	6	&&
water	99:80	0:0	6	s
op	99:81	0:0	6	->
water	99:83	0:0	6	pict_type
op	99:92	0:0	6	==
water	99:94	0:0	6	AV_PICTURE_TYPE_B
stmts	99:112	107:8	5	
water	99:112	0:0	6	{
water	101:12	0:0	6	i
op	101:13	0:0	6	=
call	101:15	101:42	6	ff_find_unused_picture
arg	101:38	101:39	7	s
water	101:38	0:0	8	s
arg	101:41	101:42	7	0
water	101:41	0:0	8	0
water	101:43	0:0	6	;
water	102:12	0:0	6	s
op	102:13	0:0	6	->
water	102:15	0:0	6	next_picture_ptr
op	102:31	0:0	6	=
op	102:33	0:0	6	&
water	102:34	0:0	6	s
op	102:35	0:0	6	->
water	102:37	0:0	6	picture
op	102:44	0:0	6	[
water	102:45	0:0	6	i
op	102:46	0:0	6	]
water	102:47	0:0	6	;
if	103:12	104:25	6	(ff_alloc_picture (s ,s -> next_picture_ptr ,0 ) < 0)
cond	103:15	103:61	7	ff_alloc_picture (s ,s -> next_picture_ptr ,0 ) < 0
call	103:15	103:57	8	ff_alloc_picture
arg	103:32	103:33	9	s
water	103:32	0:0	10	s
arg	103:35	103:54	9	s->next_picture_ptr
water	103:35	0:0	10	s
op	103:36	0:0	10	->
water	103:38	0:0	10	next_picture_ptr
arg	103:56	103:57	9	0
water	103:56	0:0	10	0
op	103:59	0:0	8	<
water	103:61	0:0	8	0
stmts	104:16	104:25	7	
return	104:16	104:25	8	-1
op	104:23	0:0	9	-
water	104:24	0:0	9	1
call	105:12	105:79	6	ff_thread_report_progress
arg	105:38	105:67	7	(AVFrame*)s->next_picture_ptr
water	105:38	0:0	8	(
water	105:39	0:0	8	AVFrame
op	105:46	0:0	8	*
water	105:47	0:0	8	)
water	105:48	0:0	8	s
op	105:49	0:0	8	->
water	105:51	0:0	8	next_picture_ptr
arg	105:69	105:76	7	INT_MAX
water	105:69	0:0	8	INT_MAX
arg	105:78	105:79	7	0
water	105:78	0:0	8	0
water	105:80	0:0	6	;
call	106:12	106:79	6	ff_thread_report_progress
arg	106:38	106:67	7	(AVFrame*)s->next_picture_ptr
water	106:38	0:0	8	(
water	106:39	0:0	8	AVFrame
op	106:46	0:0	8	*
water	106:47	0:0	8	)
water	106:48	0:0	8	s
op	106:49	0:0	8	->
water	106:51	0:0	8	next_picture_ptr
arg	106:69	106:76	7	INT_MAX
water	106:69	0:0	8	INT_MAX
arg	106:78	106:79	7	1
water	106:78	0:0	8	1
water	106:80	0:0	6	;
water	107:8	0:0	6	}
water	108:4	0:0	4	}
if	110:4	110:82	2	(s -> last_picture_ptr)
cond	110:7	110:10	3	s -> last_picture_ptr
water	110:7	0:0	4	s
op	110:8	0:0	4	->
water	110:10	0:0	4	last_picture_ptr
stmts	110:28	110:82	3	
call	110:28	110:81	4	ff_copy_picture
arg	110:44	110:60	5	&s->last_picture
op	110:44	0:0	6	&
water	110:45	0:0	6	s
op	110:46	0:0	6	->
water	110:48	0:0	6	last_picture
arg	110:62	110:81	5	s->last_picture_ptr
water	110:62	0:0	6	s
op	110:63	0:0	6	->
water	110:65	0:0	6	last_picture_ptr
water	110:82	0:0	4	;
if	111:4	111:82	2	(s -> next_picture_ptr)
cond	111:7	111:10	3	s -> next_picture_ptr
water	111:7	0:0	4	s
op	111:8	0:0	4	->
water	111:10	0:0	4	next_picture_ptr
stmts	111:28	111:82	3	
call	111:28	111:81	4	ff_copy_picture
arg	111:44	111:60	5	&s->next_picture
op	111:44	0:0	6	&
water	111:45	0:0	6	s
op	111:46	0:0	6	->
water	111:48	0:0	6	next_picture
arg	111:62	111:81	5	s->next_picture_ptr
water	111:62	0:0	6	s
op	111:63	0:0	6	->
water	111:65	0:0	6	next_picture_ptr
water	111:82	0:0	4	;
call	113:4	113:101	2	assert
arg	113:11	113:101	3	s->pict_type==AV_PICTURE_TYPE_I||(s->last_picture_ptr&&s->last_picture_ptr->data[0])
water	113:11	0:0	4	s
op	113:12	0:0	4	->
water	113:14	0:0	4	pict_type
op	113:24	0:0	4	==
water	113:27	0:0	4	AV_PICTURE_TYPE_I
op	113:45	0:0	4	||
water	113:48	0:0	4	(
water	113:49	0:0	4	s
op	113:50	0:0	4	->
water	113:52	0:0	4	last_picture_ptr
op	113:69	0:0	4	&&
water	113:72	0:0	4	s
op	113:73	0:0	4	->
water	113:75	0:0	4	last_picture_ptr
op	113:91	0:0	4	->
water	113:93	0:0	4	data
op	113:97	0:0	4	[
water	113:98	0:0	4	0
op	113:99	0:0	4	]
water	113:100	0:0	4	)
water	113:102	0:0	2	;
if	115:4	125:4	2	(s -> picture_structure != PICT_FRAME && s -> out_format != FMT_H264)
cond	115:7	115:60	3	s -> picture_structure != PICT_FRAME && s -> out_format != FMT_H264
water	115:7	0:0	4	s
op	115:8	0:0	4	->
water	115:10	0:0	4	picture_structure
op	115:27	0:0	4	!=
water	115:29	0:0	4	PICT_FRAME
op	115:40	0:0	4	&&
water	115:43	0:0	4	s
op	115:44	0:0	4	->
water	115:46	0:0	4	out_format
op	115:57	0:0	4	!=
water	115:60	0:0	4	FMT_H264
stmts	115:69	125:4	3	
water	115:69	0:0	4	{
decl	116:8	116:13	4	int	i
for	117:8	124:8	4	(i = 0 ;i < 4;i ++)
forinit	117:12	117:15	5	i = 0 ;
water	117:12	0:0	6	i
op	117:13	0:0	6	=
water	117:14	0:0	6	0
water	117:15	0:0	6	;
cond	117:17	117:19	5	i < 4
water	117:17	0:0	6	i
op	117:18	0:0	6	<
water	117:19	0:0	6	4
forexpr	117:22	117:23	5	i ++
water	117:22	0:0	6	i
op	117:23	0:0	6	++
stmts	117:26	124:8	5	
water	117:26	0:0	6	{
if	118:12	120:12	6	(s -> picture_structure == PICT_BOTTOM_FIELD)
cond	118:15	118:39	7	s -> picture_structure == PICT_BOTTOM_FIELD
water	118:15	0:0	8	s
op	118:16	0:0	8	->
water	118:18	0:0	8	picture_structure
op	118:36	0:0	8	==
water	118:39	0:0	8	PICT_BOTTOM_FIELD
stmts	118:57	120:12	7	
water	118:57	0:0	8	{
water	119:17	0:0	8	s
op	119:18	0:0	8	->
water	119:20	0:0	8	current_picture
op	119:35	0:0	8	.
water	119:36	0:0	8	data
op	119:40	0:0	8	[
water	119:41	0:0	8	i
op	119:42	0:0	8	]
op	119:44	0:0	8	+=
water	119:47	0:0	8	s
op	119:48	0:0	8	->
water	119:50	0:0	8	current_picture
op	119:65	0:0	8	.
water	119:66	0:0	8	linesize
op	119:74	0:0	8	[
water	119:75	0:0	8	i
op	119:76	0:0	8	]
water	119:77	0:0	8	;
water	120:12	0:0	8	}
water	121:12	0:0	6	s
op	121:13	0:0	6	->
water	121:15	0:0	6	current_picture
op	121:30	0:0	6	.
water	121:31	0:0	6	linesize
op	121:39	0:0	6	[
water	121:40	0:0	6	i
op	121:41	0:0	6	]
op	121:43	0:0	6	*=
water	121:46	0:0	6	2
water	121:47	0:0	6	;
water	122:12	0:0	6	s
op	122:13	0:0	6	->
water	122:15	0:0	6	last_picture
op	122:27	0:0	6	.
water	122:28	0:0	6	linesize
op	122:36	0:0	6	[
water	122:37	0:0	6	i
op	122:38	0:0	6	]
op	122:40	0:0	6	*=
water	122:42	0:0	6	2
water	122:43	0:0	6	;
water	123:12	0:0	6	s
op	123:13	0:0	6	->
water	123:15	0:0	6	next_picture
op	123:27	0:0	6	.
water	123:28	0:0	6	linesize
op	123:36	0:0	6	[
water	123:37	0:0	6	i
op	123:38	0:0	6	]
op	123:40	0:0	6	*=
water	123:42	0:0	6	2
water	123:43	0:0	6	;
water	124:8	0:0	6	}
water	125:4	0:0	4	}
water	127:4	0:0	2	s
op	127:5	0:0	2	->
water	127:7	0:0	2	error_recognition
op	127:24	0:0	2	=
water	127:26	0:0	2	avctx
op	127:31	0:0	2	->
water	127:33	0:0	2	error_recognition
water	127:50	0:0	2	;
if	131:4	134:4	2	(s -> mpeg_quant || s -> codec_id == CODEC_ID_MPEG2VIDEO)
cond	131:7	131:39	3	s -> mpeg_quant || s -> codec_id == CODEC_ID_MPEG2VIDEO
water	131:7	0:0	4	s
op	131:8	0:0	4	->
water	131:10	0:0	4	mpeg_quant
op	131:21	0:0	4	||
water	131:24	0:0	4	s
op	131:25	0:0	4	->
water	131:27	0:0	4	codec_id
op	131:36	0:0	4	==
water	131:39	0:0	4	CODEC_ID_MPEG2VIDEO
stmts	131:59	134:4	3	
water	131:59	0:0	4	{
water	132:8	0:0	4	s
op	132:9	0:0	4	->
water	132:11	0:0	4	dct_unquantize_intra
op	132:32	0:0	4	=
water	132:34	0:0	4	s
op	132:35	0:0	4	->
water	132:37	0:0	4	dct_unquantize_mpeg2_intra
water	132:63	0:0	4	;
water	133:8	0:0	4	s
op	133:9	0:0	4	->
water	133:11	0:0	4	dct_unquantize_inter
op	133:32	0:0	4	=
water	133:34	0:0	4	s
op	133:35	0:0	4	->
water	133:37	0:0	4	dct_unquantize_mpeg2_inter
water	133:63	0:0	4	;
water	134:4	0:0	4	}
else	134:5	137:4	2
stmts	134:10	137:4	3	
if	134:10	137:4	4	(s -> out_format == FMT_H263 || s -> out_format == FMT_H261)
cond	134:13	134:59	5	s -> out_format == FMT_H263 || s -> out_format == FMT_H261
water	134:13	0:0	6	s
op	134:14	0:0	6	->
water	134:16	0:0	6	out_format
op	134:27	0:0	6	==
water	134:30	0:0	6	FMT_H263
op	134:39	0:0	6	||
water	134:42	0:0	6	s
op	134:43	0:0	6	->
water	134:45	0:0	6	out_format
op	134:56	0:0	6	==
water	134:59	0:0	6	FMT_H261
stmts	134:68	137:4	5	
water	134:68	0:0	6	{
water	135:8	0:0	6	s
op	135:9	0:0	6	->
water	135:11	0:0	6	dct_unquantize_intra
op	135:32	0:0	6	=
water	135:34	0:0	6	s
op	135:35	0:0	6	->
water	135:37	0:0	6	dct_unquantize_h263_intra
water	135:62	0:0	6	;
water	136:8	0:0	6	s
op	136:9	0:0	6	->
water	136:11	0:0	6	dct_unquantize_inter
op	136:32	0:0	6	=
water	136:34	0:0	6	s
op	136:35	0:0	6	->
water	136:37	0:0	6	dct_unquantize_h263_inter
water	136:62	0:0	6	;
water	137:4	0:0	6	}
else	137:5	140:4	2
stmts	137:9	140:4	3	
water	137:9	0:0	4	{
water	138:8	0:0	4	s
op	138:9	0:0	4	->
water	138:11	0:0	4	dct_unquantize_intra
op	138:32	0:0	4	=
water	138:34	0:0	4	s
op	138:35	0:0	4	->
water	138:37	0:0	4	dct_unquantize_mpeg1_intra
water	138:63	0:0	4	;
water	139:8	0:0	4	s
op	139:9	0:0	4	->
water	139:11	0:0	4	dct_unquantize_inter
op	139:32	0:0	4	=
water	139:34	0:0	4	s
op	139:35	0:0	4	->
water	139:37	0:0	4	dct_unquantize_mpeg1_inter
water	139:63	0:0	4	;
water	140:4	0:0	4	}
if	142:4	146:4	2	(s -> dct_error_sum)
cond	142:7	142:10	3	s -> dct_error_sum
water	142:7	0:0	4	s
op	142:8	0:0	4	->
water	142:10	0:0	4	dct_error_sum
stmts	142:24	146:4	3	
water	142:24	0:0	4	{
call	143:8	143:55	4	assert
arg	143:15	143:55	5	s->avctx->noise_reduction&&s->encoding
water	143:15	0:0	6	s
op	143:16	0:0	6	->
water	143:18	0:0	6	avctx
op	143:23	0:0	6	->
water	143:25	0:0	6	noise_reduction
op	143:41	0:0	6	&&
water	143:44	0:0	6	s
op	143:45	0:0	6	->
water	143:47	0:0	6	encoding
water	143:56	0:0	4	;
call	145:8	145:32	4	update_noise_reduction
arg	145:31	145:32	5	s
water	145:31	0:0	6	s
water	145:33	0:0	4	;
water	146:4	0:0	4	}
if	148:4	149:44	2	(CONFIG_MPEG_XVMC_DECODER && s -> avctx -> xvmc_acceleration)
cond	148:7	148:45	3	CONFIG_MPEG_XVMC_DECODER && s -> avctx -> xvmc_acceleration
water	148:7	0:0	4	CONFIG_MPEG_XVMC_DECODER
op	148:32	0:0	4	&&
water	148:35	0:0	4	s
op	148:36	0:0	4	->
water	148:38	0:0	4	avctx
op	148:43	0:0	4	->
water	148:45	0:0	4	xvmc_acceleration
stmts	149:8	149:44	3	
return	149:8	149:44	4	ff_xvmc_field_start(s,avctx)
call	149:15	149:43	5	ff_xvmc_field_start
arg	149:35	149:36	6	s
water	149:35	0:0	7	s
arg	149:38	149:43	6	avctx
water	149:38	0:0	7	avctx
return	151:4	151:12	2	0
water	151:11	0:0	3	0
