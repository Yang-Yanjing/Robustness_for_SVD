func	2:0	71:0	0	static int	cdxl_decode_frame
params	2:28	0:0	1	
param	2:29	2:50	2	AVCodecContext *	avctx
param	2:52	2:62	2	void *	data
param	3:29	3:43	2	int *	got_frame
param	3:45	3:58	2	AVPacket *	pkt
stmnts	0:0	70:19	1	
decl	5:4	5:42	2	CDXLVideoContext	*c
op	5:24	0:0	2	=
water	5:26	0:0	2	avctx
op	5:31	0:0	2	->
water	5:33	0:0	2	priv_data
water	6:4	0:0	2	AVFrame
op	6:12	0:0	2	*
water	6:14	0:0	2	const
water	6:20	0:0	2	p
op	6:22	0:0	2	=
water	6:24	0:0	2	data
water	6:28	0:0	2	;
decl	7:4	7:64	2	int	ret
water	7:11	0:0	2	,
decl	7:4	7:64	2	int	w
water	7:14	0:0	2	,
decl	7:4	7:64	2	int	h
water	7:17	0:0	2	,
decl	7:4	7:64	2	int	encoding
water	7:27	0:0	2	,
decl	7:4	7:64	2	int	aligned_width
water	7:42	0:0	2	,
decl	7:4	7:64	2	int	buf_size
op	7:53	0:0	2	=
water	7:55	0:0	2	pkt
op	7:58	0:0	2	->
water	7:60	0:0	2	size
decl	8:4	8:34	2	const uint8_t	*buf
op	8:23	0:0	2	=
water	8:25	0:0	2	pkt
op	8:28	0:0	2	->
water	8:30	0:0	2	data
if	10:4	11:34	2	(buf_size < 32)
cond	10:8	10:19	3	buf_size < 32
water	10:8	0:0	4	buf_size
op	10:17	0:0	4	<
water	10:19	0:0	4	32
stmts	11:8	11:34	3	
return	11:8	11:34	4	AVERROR_INVALIDDATA
water	11:15	0:0	5	AVERROR_INVALIDDATA
water	12:4	0:0	2	encoding
op	12:20	0:0	2	=
water	12:22	0:0	2	buf
op	12:25	0:0	2	[
water	12:26	0:0	2	1
op	12:27	0:0	2	]
op	12:29	0:0	2	&
water	12:31	0:0	2	7
water	12:32	0:0	2	;
water	13:4	0:0	2	c
op	13:5	0:0	2	->
water	13:7	0:0	2	format
op	13:20	0:0	2	=
water	13:22	0:0	2	buf
op	13:25	0:0	2	[
water	13:26	0:0	2	1
op	13:27	0:0	2	]
op	13:29	0:0	2	&
water	13:31	0:0	2	0
water	13:32	0:0	2	xE0
water	13:35	0:0	2	;
water	14:4	0:0	2	w
op	14:20	0:0	2	=
call	14:22	14:38	2	AV_RB16
arg	14:30	14:38	3	&buf[14]
op	14:30	0:0	4	&
water	14:31	0:0	4	buf
op	14:34	0:0	4	[
water	14:35	0:0	4	14
op	14:37	0:0	4	]
water	14:39	0:0	2	;
water	15:4	0:0	2	h
op	15:20	0:0	2	=
call	15:22	15:38	2	AV_RB16
arg	15:30	15:38	3	&buf[16]
op	15:30	0:0	4	&
water	15:31	0:0	4	buf
op	15:34	0:0	4	[
water	15:35	0:0	4	16
op	15:37	0:0	4	]
water	15:39	0:0	2	;
water	16:4	0:0	2	c
op	16:5	0:0	2	->
water	16:7	0:0	2	bpp
op	16:20	0:0	2	=
water	16:22	0:0	2	buf
op	16:25	0:0	2	[
water	16:26	0:0	2	19
op	16:28	0:0	2	]
water	16:29	0:0	2	;
water	17:4	0:0	2	c
op	17:5	0:0	2	->
water	17:7	0:0	2	palette_size
op	17:20	0:0	2	=
call	17:22	17:38	2	AV_RB16
arg	17:30	17:38	3	&buf[20]
op	17:30	0:0	4	&
water	17:31	0:0	4	buf
op	17:34	0:0	4	[
water	17:35	0:0	4	20
op	17:37	0:0	4	]
water	17:39	0:0	2	;
water	18:4	0:0	2	c
op	18:5	0:0	2	->
water	18:7	0:0	2	palette
op	18:20	0:0	2	=
water	18:22	0:0	2	buf
op	18:26	0:0	2	+
water	18:28	0:0	2	32
water	18:30	0:0	2	;
water	19:4	0:0	2	c
op	19:5	0:0	2	->
water	19:7	0:0	2	video
op	19:20	0:0	2	=
water	19:22	0:0	2	c
op	19:23	0:0	2	->
water	19:25	0:0	2	palette
op	19:33	0:0	2	+
water	19:35	0:0	2	c
op	19:36	0:0	2	->
water	19:38	0:0	2	palette_size
water	19:50	0:0	2	;
water	20:4	0:0	2	c
op	20:5	0:0	2	->
water	20:7	0:0	2	video_size
op	20:20	0:0	2	=
water	20:22	0:0	2	buf_size
op	20:31	0:0	2	-
water	20:33	0:0	2	c
op	20:34	0:0	2	->
water	20:36	0:0	2	palette_size
op	20:49	0:0	2	-
water	20:51	0:0	2	32
water	20:53	0:0	2	;
if	22:4	23:34	2	(c -> palette_size > 512)
cond	22:8	22:26	3	c -> palette_size > 512
water	22:8	0:0	4	c
op	22:9	0:0	4	->
water	22:11	0:0	4	palette_size
op	22:24	0:0	4	>
water	22:26	0:0	4	512
stmts	23:8	23:34	3	
return	23:8	23:34	4	AVERROR_INVALIDDATA
water	23:15	0:0	5	AVERROR_INVALIDDATA
if	24:4	25:34	2	(buf_size < c -> palette_size + 32)
cond	24:8	24:37	3	buf_size < c -> palette_size + 32
water	24:8	0:0	4	buf_size
op	24:17	0:0	4	<
water	24:19	0:0	4	c
op	24:20	0:0	4	->
water	24:22	0:0	4	palette_size
op	24:35	0:0	4	+
water	24:37	0:0	4	32
stmts	25:8	25:34	3	
return	25:8	25:34	4	AVERROR_INVALIDDATA
water	25:15	0:0	5	AVERROR_INVALIDDATA
if	26:4	27:34	2	(c -> bpp < 1)
cond	26:8	26:17	3	c -> bpp < 1
water	26:8	0:0	4	c
op	26:9	0:0	4	->
water	26:11	0:0	4	bpp
op	26:15	0:0	4	<
water	26:17	0:0	4	1
stmts	27:8	27:34	3	
return	27:8	27:34	4	AVERROR_INVALIDDATA
water	27:15	0:0	5	AVERROR_INVALIDDATA
if	28:4	31:4	2	(c -> format != BIT_PLANAR && c -> format != BIT_LINE)
cond	28:8	28:48	3	c -> format != BIT_PLANAR && c -> format != BIT_LINE
water	28:8	0:0	4	c
op	28:9	0:0	4	->
water	28:11	0:0	4	format
op	28:18	0:0	4	!=
water	28:21	0:0	4	BIT_PLANAR
op	28:32	0:0	4	&&
water	28:35	0:0	4	c
op	28:36	0:0	4	->
water	28:38	0:0	4	format
op	28:45	0:0	4	!=
water	28:48	0:0	4	BIT_LINE
stmts	28:58	31:4	3	
water	28:58	0:0	4	{
call	29:8	29:68	4	avpriv_request_sample
arg	29:30	29:35	5	avctx
water	29:30	0:0	6	avctx
arg	29:37	29:57	5	"Pixel format 0x%0x"
water	29:37	0:0	6	"Pixel format 0x%0x"
arg	29:59	29:68	5	c->format
water	29:59	0:0	6	c
op	29:60	0:0	6	->
water	29:62	0:0	6	format
water	29:69	0:0	4	;
return	30:8	30:35	4	AVERROR_PATCHWELCOME
water	30:15	0:0	5	AVERROR_PATCHWELCOME
water	31:4	0:0	4	}
if	33:4	34:18	2	(( ret =ff_set_dimensions (avctx ,w ,h ) ) < 0)
cond	33:8	33:49	3	( ret =ff_set_dimensions (avctx ,w ,h ) ) < 0
water	33:8	0:0	4	(
water	33:9	0:0	4	ret
op	33:13	0:0	4	=
call	33:15	33:44	4	ff_set_dimensions
arg	33:33	33:38	5	avctx
water	33:33	0:0	6	avctx
arg	33:40	33:41	5	w
water	33:40	0:0	6	w
arg	33:43	33:44	5	h
water	33:43	0:0	6	h
water	33:45	0:0	4	)
op	33:47	0:0	4	<
water	33:49	0:0	4	0
stmts	34:8	34:18	3	
return	34:8	34:18	4	ret
water	34:15	0:0	5	ret
water	36:4	0:0	2	aligned_width
op	36:18	0:0	2	=
call	36:20	36:47	2	FFALIGN
arg	36:28	36:43	3	c->avctx->width
water	36:28	0:0	4	c
op	36:29	0:0	4	->
water	36:31	0:0	4	avctx
op	36:36	0:0	4	->
water	36:38	0:0	4	width
arg	36:45	36:47	3	16
water	36:45	0:0	4	16
water	36:48	0:0	2	;
water	37:4	0:0	2	c
op	37:5	0:0	2	->
water	37:7	0:0	2	padded_bits
op	37:20	0:0	2	=
water	37:22	0:0	2	aligned_width
op	37:36	0:0	2	-
water	37:38	0:0	2	c
op	37:39	0:0	2	->
water	37:41	0:0	2	avctx
op	37:46	0:0	2	->
water	37:48	0:0	2	width
water	37:53	0:0	2	;
if	38:4	39:34	2	(c -> video_size < aligned_width * avctx -> height * c -> bpp / 8)
cond	38:8	38:65	3	c -> video_size < aligned_width * avctx -> height * c -> bpp / 8
water	38:8	0:0	4	c
op	38:9	0:0	4	->
water	38:11	0:0	4	video_size
op	38:22	0:0	4	<
water	38:24	0:0	4	aligned_width
op	38:38	0:0	4	*
water	38:40	0:0	4	avctx
op	38:45	0:0	4	->
water	38:47	0:0	4	height
op	38:54	0:0	4	*
water	38:56	0:0	4	c
op	38:57	0:0	4	->
water	38:59	0:0	4	bpp
op	38:63	0:0	4	/
water	38:65	0:0	4	8
stmts	39:8	39:34	3	
return	39:8	39:34	4	AVERROR_INVALIDDATA
water	39:15	0:0	5	AVERROR_INVALIDDATA
if	40:4	42:4	2	(! encoding && c -> palette_size && c -> bpp <= 8)
cond	40:8	40:50	3	! encoding && c -> palette_size && c -> bpp <= 8
op	40:8	0:0	4	!
water	40:9	0:0	4	encoding
op	40:18	0:0	4	&&
water	40:21	0:0	4	c
op	40:22	0:0	4	->
water	40:24	0:0	4	palette_size
op	40:37	0:0	4	&&
water	40:40	0:0	4	c
op	40:41	0:0	4	->
water	40:43	0:0	4	bpp
op	40:47	0:0	4	<=
water	40:50	0:0	4	8
stmts	40:53	42:4	3	
water	40:53	0:0	4	{
water	41:8	0:0	4	avctx
op	41:13	0:0	4	->
water	41:15	0:0	4	pix_fmt
op	41:23	0:0	4	=
water	41:25	0:0	4	AV_PIX_FMT_PAL8
water	41:40	0:0	4	;
water	42:4	0:0	4	}
else	42:6	46:4	2
stmts	42:11	46:4	3	
if	42:11	46:4	4	(encoding == 1 && ( c -> bpp == 6 || c -> bpp == 8 ))
cond	42:15	42:59	5	encoding == 1 && ( c -> bpp == 6 || c -> bpp == 8 )
water	42:15	0:0	6	encoding
op	42:24	0:0	6	==
water	42:27	0:0	6	1
op	42:29	0:0	6	&&
water	42:32	0:0	6	(
water	42:33	0:0	6	c
op	42:34	0:0	6	->
water	42:36	0:0	6	bpp
op	42:40	0:0	6	==
water	42:43	0:0	6	6
op	42:45	0:0	6	||
water	42:48	0:0	6	c
op	42:49	0:0	6	->
water	42:51	0:0	6	bpp
op	42:55	0:0	6	==
water	42:58	0:0	6	8
water	42:59	0:0	6	)
stmts	42:62	46:4	5	
water	42:62	0:0	6	{
if	43:8	44:38	6	(c -> palette_size != ( 1 << ( c -> bpp - 1 ) ))
cond	43:12	43:49	7	c -> palette_size != ( 1 << ( c -> bpp - 1 ) )
water	43:12	0:0	8	c
op	43:13	0:0	8	->
water	43:15	0:0	8	palette_size
op	43:28	0:0	8	!=
water	43:31	0:0	8	(
water	43:32	0:0	8	1
op	43:34	0:0	8	<<
water	43:37	0:0	8	(
water	43:38	0:0	8	c
op	43:39	0:0	8	->
water	43:41	0:0	8	bpp
op	43:45	0:0	8	-
water	43:47	0:0	8	1
water	43:48	0:0	8	)
water	43:49	0:0	8	)
stmts	44:12	44:38	7	
return	44:12	44:38	8	AVERROR_INVALIDDATA
water	44:19	0:0	9	AVERROR_INVALIDDATA
water	45:8	0:0	6	avctx
op	45:13	0:0	6	->
water	45:15	0:0	6	pix_fmt
op	45:23	0:0	6	=
water	45:25	0:0	6	AV_PIX_FMT_BGR24
water	45:41	0:0	6	;
water	46:4	0:0	6	}
else	46:6	50:4	2
stmts	46:11	50:4	3	
water	46:11	0:0	4	{
call	47:8	48:46	4	avpriv_request_sample
arg	47:30	47:35	5	avctx
water	47:30	0:0	6	avctx
arg	47:37	47:61	5	"Encoding %d and bpp %d"
water	47:37	0:0	6	"Encoding %d and bpp %d"
arg	48:30	48:38	5	encoding
water	48:30	0:0	6	encoding
arg	48:40	48:46	5	c->bpp
water	48:40	0:0	6	c
op	48:41	0:0	6	->
water	48:43	0:0	6	bpp
water	48:47	0:0	4	;
return	49:8	49:35	4	AVERROR_PATCHWELCOME
water	49:15	0:0	5	AVERROR_PATCHWELCOME
water	50:4	0:0	4	}
if	52:4	53:18	2	(( ret =ff_get_buffer (avctx ,p ,0 ) ) < 0)
cond	52:8	52:45	3	( ret =ff_get_buffer (avctx ,p ,0 ) ) < 0
water	52:8	0:0	4	(
water	52:9	0:0	4	ret
op	52:13	0:0	4	=
call	52:15	52:40	4	ff_get_buffer
arg	52:29	52:34	5	avctx
water	52:29	0:0	6	avctx
arg	52:36	52:37	5	p
water	52:36	0:0	6	p
arg	52:39	52:40	5	0
water	52:39	0:0	6	0
water	52:41	0:0	4	)
op	52:43	0:0	4	<
water	52:45	0:0	4	0
stmts	53:8	53:18	3	
return	53:8	53:18	4	ret
water	53:15	0:0	5	ret
water	54:4	0:0	2	p
op	54:5	0:0	2	->
water	54:7	0:0	2	pict_type
op	54:17	0:0	2	=
water	54:19	0:0	2	AV_PICTURE_TYPE_I
water	54:36	0:0	2	;
if	56:4	65:4	2	(encoding)
cond	56:8	56:8	3	encoding
water	56:8	0:0	4	encoding
stmts	56:18	65:4	3	
water	56:18	0:0	4	{
call	57:8	58:66	4	av_fast_padded_malloc
arg	57:30	57:43	5	&c->new_video
op	57:30	0:0	6	&
water	57:31	0:0	6	c
op	57:32	0:0	6	->
water	57:34	0:0	6	new_video
arg	57:45	57:63	5	&c->new_video_size
op	57:45	0:0	6	&
water	57:46	0:0	6	c
op	57:47	0:0	6	->
water	57:49	0:0	6	new_video_size
arg	58:30	58:66	5	h*w+AV_INPUT_BUFFER_PADDING_SIZE
water	58:30	0:0	6	h
op	58:32	0:0	6	*
water	58:34	0:0	6	w
op	58:36	0:0	6	+
water	58:38	0:0	6	AV_INPUT_BUFFER_PADDING_SIZE
water	58:67	0:0	4	;
if	59:8	60:34	4	(! c -> new_video)
cond	59:12	59:16	5	! c -> new_video
op	59:12	0:0	6	!
water	59:13	0:0	6	c
op	59:14	0:0	6	->
water	59:16	0:0	6	new_video
stmts	60:12	60:34	5	
return	60:12	60:34	6	AVERROR(ENOMEM)
call	60:19	60:33	7	AVERROR
arg	60:27	60:33	8	ENOMEM
water	60:27	0:0	9	ENOMEM
if	61:8	62:34	4	(c -> bpp == 8)
cond	61:12	61:22	5	c -> bpp == 8
water	61:12	0:0	6	c
op	61:13	0:0	6	->
water	61:15	0:0	6	bpp
op	61:19	0:0	6	==
water	61:22	0:0	6	8
stmts	62:12	62:34	5	
call	62:12	62:33	6	cdxl_decode_ham8
arg	62:29	62:30	7	c
water	62:29	0:0	8	c
arg	62:32	62:33	7	p
water	62:32	0:0	8	p
water	62:34	0:0	6	;
else	63:8	64:34	4
stmts	64:12	64:34	5	
call	64:12	64:33	6	cdxl_decode_ham6
arg	64:29	64:30	7	c
water	64:29	0:0	8	c
arg	64:32	64:33	7	p
water	64:32	0:0	8	p
water	64:34	0:0	6	;
water	65:4	0:0	4	}
else	65:6	67:4	2
stmts	65:11	67:4	3	
water	65:11	0:0	4	{
call	66:8	66:28	4	cdxl_decode_rgb
arg	66:24	66:25	5	c
water	66:24	0:0	6	c
arg	66:27	66:28	5	p
water	66:27	0:0	6	p
water	66:29	0:0	4	;
water	67:4	0:0	4	}
op	68:4	0:0	2	*
water	68:5	0:0	2	got_frame
op	68:15	0:0	2	=
water	68:17	0:0	2	1
water	68:18	0:0	2	;
return	70:4	70:19	2	buf_size
water	70:11	0:0	3	buf_size
