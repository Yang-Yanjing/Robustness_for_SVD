func	7:15	134:0	0	int	rl2_read_header
params	7:34	0:0	1	
param	7:35	7:53	2	AVFormatContext *	s
stmnts	0:0	133:14	1	
decl	9:4	9:27	2	AVIOContext	*pb
op	9:20	0:0	2	=
water	9:22	0:0	2	s
op	9:23	0:0	2	->
water	9:25	0:0	2	pb
decl	10:4	10:16	2	AVStream	*st
decl	11:4	11:28	2	unsigned int	frame_count
decl	12:4	12:40	2	unsigned int	audio_frame_counter
op	12:37	0:0	2	=
water	12:39	0:0	2	0
decl	13:4	13:40	2	unsigned int	video_frame_counter
op	13:37	0:0	2	=
water	13:39	0:0	2	0
decl	14:4	14:26	2	unsigned int	back_size
decl	15:4	15:29	2	unsigned short	sound_rate
decl	16:4	16:23	2	unsigned short	rate
decl	17:4	17:27	2	unsigned short	channels
decl	18:4	18:33	2	unsigned short	def_sound_size
decl	19:4	19:26	2	unsigned int	signature
decl	20:4	20:32	2	unsigned int	pts_den
op	20:25	0:0	2	=
water	20:27	0:0	2	11025
decl	21:4	21:31	2	unsigned int	pts_num
op	21:25	0:0	2	=
water	21:27	0:0	2	1103
decl	22:4	22:37	2	unsigned int	*chunk_offset
op	22:31	0:0	2	=
water	22:33	0:0	2	NULL
decl	23:4	23:26	2	int	*chunk_size
op	23:20	0:0	2	=
water	23:22	0:0	2	NULL
decl	24:4	24:26	2	int	*audio_size
op	24:20	0:0	2	=
water	24:22	0:0	2	NULL
decl	25:4	25:9	2	int	i
decl	26:4	26:15	2	int	ret
op	26:12	0:0	2	=
water	26:14	0:0	2	0
call	28:4	28:18	2	avio_skip
arg	28:14	28:16	3	pb
water	28:14	0:0	4	pb
arg	28:17	28:18	3	4
water	28:17	0:0	4	4
water	28:19	0:0	2	;
water	29:4	0:0	2	back_size
op	29:14	0:0	2	=
call	29:16	29:28	2	avio_rl32
arg	29:26	29:28	3	pb
water	29:26	0:0	4	pb
water	29:29	0:0	2	;
water	30:4	0:0	2	signature
op	30:14	0:0	2	=
call	30:16	30:28	2	avio_rb32
arg	30:26	30:28	3	pb
water	30:26	0:0	4	pb
water	30:29	0:0	2	;
call	31:4	31:19	2	avio_skip
arg	31:14	31:16	3	pb
water	31:14	0:0	4	pb
arg	31:18	31:19	3	4
water	31:18	0:0	4	4
water	31:20	0:0	2	;
water	32:4	0:0	2	frame_count
op	32:16	0:0	2	=
call	32:18	32:30	2	avio_rl32
arg	32:28	32:30	3	pb
water	32:28	0:0	4	pb
water	32:31	0:0	2	;
if	35:4	36:34	2	(back_size > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ))
cond	35:7	35:72	3	back_size > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t )
water	35:7	0:0	4	back_size
op	35:17	0:0	4	>
water	35:19	0:0	4	INT_MAX
op	35:26	0:0	4	/
water	35:27	0:0	4	2
op	35:30	0:0	4	||
water	35:33	0:0	4	frame_count
op	35:45	0:0	4	>
water	35:47	0:0	4	INT_MAX
op	35:55	0:0	4	/
op	35:57	0:0	4	sizeof
water	35:63	0:0	4	(
water	35:64	0:0	4	uint32_t
water	35:72	0:0	4	)
stmts	36:8	36:34	3	
return	36:8	36:34	4	AVERROR_INVALIDDATA
water	36:15	0:0	5	AVERROR_INVALIDDATA
call	38:4	38:19	2	avio_skip
arg	38:14	38:16	3	pb
water	38:14	0:0	4	pb
arg	38:18	38:19	3	2
water	38:18	0:0	4	2
water	38:20	0:0	2	;
water	39:4	0:0	2	sound_rate
op	39:15	0:0	2	=
call	39:17	39:29	2	avio_rl16
arg	39:27	39:29	3	pb
water	39:27	0:0	4	pb
water	39:30	0:0	2	;
water	40:4	0:0	2	rate
op	40:9	0:0	2	=
call	40:11	40:23	2	avio_rl16
arg	40:21	40:23	3	pb
water	40:21	0:0	4	pb
water	40:24	0:0	2	;
water	41:4	0:0	2	channels
op	41:13	0:0	2	=
call	41:15	41:27	2	avio_rl16
arg	41:25	41:27	3	pb
water	41:25	0:0	4	pb
water	41:28	0:0	2	;
water	42:4	0:0	2	def_sound_size
op	42:19	0:0	2	=
call	42:21	42:33	2	avio_rl16
arg	42:31	42:33	3	pb
water	42:31	0:0	4	pb
water	42:34	0:0	2	;
water	45:4	0:0	2	st
op	45:7	0:0	2	=
call	45:9	45:36	2	avformat_new_stream
arg	45:29	45:30	3	s
water	45:29	0:0	4	s
arg	45:32	45:36	3	NULL
water	45:32	0:0	4	NULL
water	45:37	0:0	2	;
if	46:4	47:31	2	(! st)
cond	46:7	46:8	3	! st
op	46:7	0:0	4	!
water	46:8	0:0	4	st
stmts	47:9	47:31	3	
return	47:9	47:31	4	AVERROR(ENOMEM)
call	47:16	47:30	5	AVERROR
arg	47:24	47:30	6	ENOMEM
water	47:24	0:0	7	ENOMEM
water	49:4	0:0	2	st
op	49:6	0:0	2	->
water	49:8	0:0	2	codecpar
op	49:16	0:0	2	->
water	49:18	0:0	2	codec_type
op	49:29	0:0	2	=
water	49:31	0:0	2	AVMEDIA_TYPE_VIDEO
water	49:49	0:0	2	;
water	50:4	0:0	2	st
op	50:6	0:0	2	->
water	50:8	0:0	2	codecpar
op	50:16	0:0	2	->
water	50:18	0:0	2	codec_id
op	50:27	0:0	2	=
water	50:29	0:0	2	AV_CODEC_ID_RL2
water	50:44	0:0	2	;
water	51:4	0:0	2	st
op	51:6	0:0	2	->
water	51:8	0:0	2	codecpar
op	51:16	0:0	2	->
water	51:18	0:0	2	codec_tag
op	51:28	0:0	2	=
water	51:30	0:0	2	0
water	51:31	0:0	2	;
water	52:4	0:0	2	st
op	52:6	0:0	2	->
water	52:8	0:0	2	codecpar
op	52:16	0:0	2	->
water	52:18	0:0	2	width
op	52:24	0:0	2	=
water	52:26	0:0	2	320
water	52:29	0:0	2	;
water	53:4	0:0	2	st
op	53:6	0:0	2	->
water	53:8	0:0	2	codecpar
op	53:16	0:0	2	->
water	53:18	0:0	2	height
op	53:25	0:0	2	=
water	53:27	0:0	2	200
water	53:30	0:0	2	;
water	56:4	0:0	2	st
op	56:6	0:0	2	->
water	56:8	0:0	2	codecpar
op	56:16	0:0	2	->
water	56:18	0:0	2	extradata_size
op	56:33	0:0	2	=
water	56:35	0:0	2	EXTRADATA1_SIZE
water	56:50	0:0	2	;
if	58:4	59:49	2	(signature == RLV3_TAG && back_size > 0)
cond	58:7	58:44	3	signature == RLV3_TAG && back_size > 0
water	58:7	0:0	4	signature
op	58:17	0:0	4	==
water	58:20	0:0	4	RLV3_TAG
op	58:29	0:0	4	&&
water	58:32	0:0	4	back_size
op	58:42	0:0	4	>
water	58:44	0:0	4	0
stmts	59:8	59:49	3	
water	59:8	0:0	4	st
op	59:10	0:0	4	->
water	59:12	0:0	4	codecpar
op	59:20	0:0	4	->
water	59:22	0:0	4	extradata_size
op	59:37	0:0	4	+=
water	59:40	0:0	4	back_size
water	59:49	0:0	4	;
if	61:4	62:30	2	(ff_get_extradata (s ,st -> codecpar ,pb ,st -> codecpar -> extradata_size ) < 0)
cond	61:7	61:77	3	ff_get_extradata (s ,st -> codecpar ,pb ,st -> codecpar -> extradata_size ) < 0
call	61:7	61:73	4	ff_get_extradata
arg	61:24	61:25	5	s
water	61:24	0:0	6	s
arg	61:27	61:39	5	st->codecpar
water	61:27	0:0	6	st
op	61:29	0:0	6	->
water	61:31	0:0	6	codecpar
arg	61:41	61:43	5	pb
water	61:41	0:0	6	pb
arg	61:45	61:73	5	st->codecpar->extradata_size
water	61:45	0:0	6	st
op	61:47	0:0	6	->
water	61:49	0:0	6	codecpar
op	61:57	0:0	6	->
water	61:59	0:0	6	extradata_size
op	61:75	0:0	4	<
water	61:77	0:0	4	0
stmts	62:8	62:30	3	
return	62:8	62:30	4	AVERROR(ENOMEM)
call	62:15	62:29	5	AVERROR
arg	62:23	62:29	6	ENOMEM
water	62:23	0:0	7	ENOMEM
if	65:4	88:4	2	(sound_rate)
cond	65:7	65:7	3	sound_rate
water	65:7	0:0	4	sound_rate
stmts	65:18	88:4	3	
water	65:18	0:0	4	{
if	66:8	69:8	4	(! channels || channels > 42)
cond	66:12	66:36	5	! channels || channels > 42
op	66:12	0:0	6	!
water	66:13	0:0	6	channels
op	66:22	0:0	6	||
water	66:25	0:0	6	channels
op	66:34	0:0	6	>
water	66:36	0:0	6	42
stmts	66:40	69:8	5	
water	66:40	0:0	6	{
call	67:12	67:80	6	av_log
arg	67:19	67:20	7	s
water	67:19	0:0	8	s
arg	67:22	67:34	7	AV_LOG_ERROR
water	67:22	0:0	8	AV_LOG_ERROR
arg	67:36	67:70	7	"Invalid number of channels: %d\n"
water	67:36	0:0	8	"Invalid number of channels: %d\n"
arg	67:72	67:80	7	channels
water	67:72	0:0	8	channels
water	67:81	0:0	6	;
return	68:12	68:38	6	AVERROR_INVALIDDATA
water	68:19	0:0	7	AVERROR_INVALIDDATA
water	69:8	0:0	6	}
water	71:8	0:0	4	pts_num
op	71:16	0:0	4	=
water	71:18	0:0	4	def_sound_size
water	71:32	0:0	4	;
water	72:8	0:0	4	pts_den
op	72:16	0:0	4	=
water	72:18	0:0	4	rate
water	72:22	0:0	4	;
water	74:8	0:0	4	st
op	74:11	0:0	4	=
call	74:13	74:40	4	avformat_new_stream
arg	74:33	74:34	5	s
water	74:33	0:0	6	s
arg	74:36	74:40	5	NULL
water	74:36	0:0	6	NULL
water	74:41	0:0	4	;
if	75:8	76:34	4	(! st)
cond	75:12	75:13	5	! st
op	75:12	0:0	6	!
water	75:13	0:0	6	st
stmts	76:12	76:34	5	
return	76:12	76:34	6	AVERROR(ENOMEM)
call	76:19	76:33	7	AVERROR
arg	76:27	76:33	8	ENOMEM
water	76:27	0:0	9	ENOMEM
water	77:8	0:0	4	st
op	77:10	0:0	4	->
water	77:12	0:0	4	codecpar
op	77:20	0:0	4	->
water	77:22	0:0	4	codec_type
op	77:33	0:0	4	=
water	77:35	0:0	4	AVMEDIA_TYPE_AUDIO
water	77:53	0:0	4	;
water	78:8	0:0	4	st
op	78:10	0:0	4	->
water	78:12	0:0	4	codecpar
op	78:20	0:0	4	->
water	78:22	0:0	4	codec_id
op	78:31	0:0	4	=
water	78:33	0:0	4	AV_CODEC_ID_PCM_U8
water	78:51	0:0	4	;
water	79:8	0:0	4	st
op	79:10	0:0	4	->
water	79:12	0:0	4	codecpar
op	79:20	0:0	4	->
water	79:22	0:0	4	codec_tag
op	79:32	0:0	4	=
water	79:34	0:0	4	1
water	79:35	0:0	4	;
water	80:8	0:0	4	st
op	80:10	0:0	4	->
water	80:12	0:0	4	codecpar
op	80:20	0:0	4	->
water	80:22	0:0	4	channels
op	80:31	0:0	4	=
water	80:33	0:0	4	channels
water	80:41	0:0	4	;
water	81:8	0:0	4	st
op	81:10	0:0	4	->
water	81:12	0:0	4	codecpar
op	81:20	0:0	4	->
water	81:22	0:0	4	bits_per_coded_sample
op	81:44	0:0	4	=
water	81:46	0:0	4	8
water	81:47	0:0	4	;
water	82:8	0:0	4	st
op	82:10	0:0	4	->
water	82:12	0:0	4	codecpar
op	82:20	0:0	4	->
water	82:22	0:0	4	sample_rate
op	82:34	0:0	4	=
water	82:36	0:0	4	rate
water	82:40	0:0	4	;
water	83:8	0:0	4	st
op	83:10	0:0	4	->
water	83:12	0:0	4	codecpar
op	83:20	0:0	4	->
water	83:22	0:0	4	bit_rate
op	83:31	0:0	4	=
water	83:33	0:0	4	st
op	83:35	0:0	4	->
water	83:37	0:0	4	codecpar
op	83:45	0:0	4	->
water	83:47	0:0	4	channels
op	83:56	0:0	4	*
water	83:58	0:0	4	st
op	83:60	0:0	4	->
water	83:62	0:0	4	codecpar
op	83:70	0:0	4	->
water	83:72	0:0	4	sample_rate
op	83:84	0:0	4	*
water	84:12	0:0	4	st
op	84:14	0:0	4	->
water	84:16	0:0	4	codecpar
op	84:24	0:0	4	->
water	84:26	0:0	4	bits_per_coded_sample
water	84:47	0:0	4	;
water	85:8	0:0	4	st
op	85:10	0:0	4	->
water	85:12	0:0	4	codecpar
op	85:20	0:0	4	->
water	85:22	0:0	4	block_align
op	85:34	0:0	4	=
water	85:36	0:0	4	st
op	85:38	0:0	4	->
water	85:40	0:0	4	codecpar
op	85:48	0:0	4	->
water	85:50	0:0	4	channels
op	85:59	0:0	4	*
water	86:12	0:0	4	st
op	86:14	0:0	4	->
water	86:16	0:0	4	codecpar
op	86:24	0:0	4	->
water	86:26	0:0	4	bits_per_coded_sample
op	86:48	0:0	4	/
water	86:50	0:0	4	8
water	86:51	0:0	4	;
call	87:8	87:40	4	avpriv_set_pts_info
arg	87:28	87:30	5	st
water	87:28	0:0	6	st
arg	87:31	87:33	5	32
water	87:31	0:0	6	32
arg	87:34	87:35	5	1
water	87:34	0:0	6	1
arg	87:36	87:40	5	rate
water	87:36	0:0	6	rate
water	87:41	0:0	4	;
water	88:4	0:0	4	}
call	90:4	90:59	2	avpriv_set_pts_info
arg	90:24	90:37	3	s->streams[0]
water	90:24	0:0	4	s
op	90:25	0:0	4	->
water	90:27	0:0	4	streams
op	90:34	0:0	4	[
water	90:35	0:0	4	0
op	90:36	0:0	4	]
arg	90:39	90:41	3	32
water	90:39	0:0	4	32
arg	90:43	90:50	3	pts_num
water	90:43	0:0	4	pts_num
arg	90:52	90:59	3	pts_den
water	90:52	0:0	4	pts_den
water	90:60	0:0	2	;
water	92:4	0:0	2	chunk_size
op	92:15	0:0	2	=
call	92:19	92:59	2	av_malloc
arg	92:29	92:59	3	frame_count*sizeof(uint32_t)
water	92:29	0:0	4	frame_count
op	92:41	0:0	4	*
op	92:43	0:0	4	sizeof
water	92:49	0:0	4	(
water	92:50	0:0	4	uint32_t
water	92:58	0:0	4	)
water	92:60	0:0	2	;
water	93:4	0:0	2	audio_size
op	93:15	0:0	2	=
call	93:19	93:59	2	av_malloc
arg	93:29	93:59	3	frame_count*sizeof(uint32_t)
water	93:29	0:0	4	frame_count
op	93:41	0:0	4	*
op	93:43	0:0	4	sizeof
water	93:49	0:0	4	(
water	93:50	0:0	4	uint32_t
water	93:58	0:0	4	)
water	93:60	0:0	2	;
water	94:4	0:0	2	chunk_offset
op	94:17	0:0	2	=
call	94:19	94:59	2	av_malloc
arg	94:29	94:59	3	frame_count*sizeof(uint32_t)
water	94:29	0:0	4	frame_count
op	94:41	0:0	4	*
op	94:43	0:0	4	sizeof
water	94:49	0:0	4	(
water	94:50	0:0	4	uint32_t
water	94:58	0:0	4	)
water	94:60	0:0	2	;
if	96:4	101:4	2	(! chunk_size || ! audio_size || ! chunk_offset)
cond	96:7	96:38	3	! chunk_size || ! audio_size || ! chunk_offset
op	96:7	0:0	4	!
water	96:8	0:0	4	chunk_size
op	96:19	0:0	4	||
op	96:22	0:0	4	!
water	96:23	0:0	4	audio_size
op	96:34	0:0	4	||
op	96:37	0:0	4	!
water	96:38	0:0	4	chunk_offset
stmts	96:51	101:4	3	
water	96:51	0:0	4	{
call	97:8	97:26	4	av_free
arg	97:16	97:26	5	chunk_size
water	97:16	0:0	6	chunk_size
water	97:27	0:0	4	;
call	98:8	98:26	4	av_free
arg	98:16	98:26	5	audio_size
water	98:16	0:0	6	audio_size
water	98:27	0:0	4	;
call	99:8	99:28	4	av_free
arg	99:16	99:28	5	chunk_offset
water	99:16	0:0	6	chunk_offset
water	99:29	0:0	4	;
return	100:8	100:30	4	AVERROR(ENOMEM)
call	100:15	100:29	5	AVERROR
arg	100:23	100:29	6	ENOMEM
water	100:23	0:0	7	ENOMEM
water	101:4	0:0	4	}
for	104:4	105:37	2	(i = 0 ;i < frame_count;i ++)
forinit	104:8	104:11	3	i = 0 ;
water	104:8	0:0	4	i
op	104:9	0:0	4	=
water	104:10	0:0	4	0
water	104:11	0:0	4	;
cond	104:13	104:17	3	i < frame_count
water	104:13	0:0	4	i
op	104:15	0:0	4	<
water	104:17	0:0	4	frame_count
forexpr	104:29	104:30	3	i ++
water	104:29	0:0	4	i
op	104:30	0:0	4	++
stmts	105:8	105:37	3	
water	105:8	0:0	4	chunk_size
op	105:18	0:0	4	[
water	105:19	0:0	4	i
op	105:20	0:0	4	]
op	105:22	0:0	4	=
call	105:24	105:36	4	avio_rl32
arg	105:34	105:36	5	pb
water	105:34	0:0	6	pb
water	105:37	0:0	4	;
for	106:4	107:39	2	(i = 0 ;i < frame_count;i ++)
forinit	106:8	106:11	3	i = 0 ;
water	106:8	0:0	4	i
op	106:9	0:0	4	=
water	106:10	0:0	4	0
water	106:11	0:0	4	;
cond	106:13	106:17	3	i < frame_count
water	106:13	0:0	4	i
op	106:15	0:0	4	<
water	106:17	0:0	4	frame_count
forexpr	106:29	106:30	3	i ++
water	106:29	0:0	4	i
op	106:30	0:0	4	++
stmts	107:8	107:39	3	
water	107:8	0:0	4	chunk_offset
op	107:20	0:0	4	[
water	107:21	0:0	4	i
op	107:22	0:0	4	]
op	107:24	0:0	4	=
call	107:26	107:38	4	avio_rl32
arg	107:36	107:38	5	pb
water	107:36	0:0	6	pb
water	107:39	0:0	4	;
for	108:4	109:46	2	(i = 0 ;i < frame_count;i ++)
forinit	108:8	108:11	3	i = 0 ;
water	108:8	0:0	4	i
op	108:9	0:0	4	=
water	108:10	0:0	4	0
water	108:11	0:0	4	;
cond	108:13	108:17	3	i < frame_count
water	108:13	0:0	4	i
op	108:15	0:0	4	<
water	108:17	0:0	4	frame_count
forexpr	108:29	108:30	3	i ++
water	108:29	0:0	4	i
op	108:30	0:0	4	++
stmts	109:8	109:46	3	
water	109:8	0:0	4	audio_size
op	109:18	0:0	4	[
water	109:19	0:0	4	i
op	109:20	0:0	4	]
op	109:22	0:0	4	=
call	109:24	109:36	4	avio_rl32
arg	109:34	109:36	5	pb
water	109:34	0:0	6	pb
op	109:38	0:0	4	&
water	109:40	0:0	4	0
water	109:41	0:0	4	xFFFF
water	109:46	0:0	4	;
for	112:4	126:4	2	(i = 0 ;i < frame_count;i ++)
forinit	112:8	112:11	3	i = 0 ;
water	112:8	0:0	4	i
op	112:9	0:0	4	=
water	112:10	0:0	4	0
water	112:11	0:0	4	;
cond	112:12	112:14	3	i < frame_count
water	112:12	0:0	4	i
op	112:13	0:0	4	<
water	112:14	0:0	4	frame_count
forexpr	112:26	112:27	3	i ++
water	112:26	0:0	4	i
op	112:27	0:0	4	++
stmts	112:30	126:4	3	
water	112:30	0:0	4	{
if	113:8	116:8	4	(chunk_size [ i ] < 0 || audio_size [ i ] > chunk_size [ i ])
cond	113:11	113:60	5	chunk_size [ i ] < 0 || audio_size [ i ] > chunk_size [ i ]
water	113:11	0:0	6	chunk_size
op	113:21	0:0	6	[
water	113:22	0:0	6	i
op	113:23	0:0	6	]
op	113:25	0:0	6	<
water	113:27	0:0	6	0
op	113:29	0:0	6	||
water	113:32	0:0	6	audio_size
op	113:42	0:0	6	[
water	113:43	0:0	6	i
op	113:44	0:0	6	]
op	113:46	0:0	6	>
water	113:48	0:0	6	chunk_size
op	113:58	0:0	6	[
water	113:59	0:0	6	i
op	113:60	0:0	6	]
stmts	113:62	116:8	5	
water	113:62	0:0	6	{
water	114:12	0:0	6	ret
op	114:16	0:0	6	=
water	114:18	0:0	6	AVERROR_INVALIDDATA
water	114:37	0:0	6	;
break	115:12	115:17	6	
water	116:8	0:0	6	}
if	118:8	122:8	4	(sound_rate && audio_size [ i ])
cond	118:11	118:37	5	sound_rate && audio_size [ i ]
water	118:11	0:0	6	sound_rate
op	118:22	0:0	6	&&
water	118:25	0:0	6	audio_size
op	118:35	0:0	6	[
water	118:36	0:0	6	i
op	118:37	0:0	6	]
stmts	118:39	122:8	5	
water	118:39	0:0	6	{
call	119:12	120:70	6	av_add_index_entry
arg	119:31	119:44	7	s->streams[1]
water	119:31	0:0	8	s
op	119:32	0:0	8	->
water	119:34	0:0	8	streams
op	119:41	0:0	8	[
water	119:42	0:0	8	1
op	119:43	0:0	8	]
arg	119:46	119:61	7	chunk_offset[i]
water	119:46	0:0	8	chunk_offset
op	119:58	0:0	8	[
water	119:59	0:0	8	i
op	119:60	0:0	8	]
arg	120:16	120:35	7	audio_frame_counter
water	120:16	0:0	8	audio_frame_counter
arg	120:36	120:49	7	audio_size[i]
water	120:36	0:0	8	audio_size
op	120:46	0:0	8	[
water	120:47	0:0	8	i
op	120:48	0:0	8	]
arg	120:51	120:52	7	0
water	120:51	0:0	8	0
arg	120:54	120:70	7	AVINDEX_KEYFRAME
water	120:54	0:0	8	AVINDEX_KEYFRAME
water	120:71	0:0	6	;
water	121:12	0:0	6	audio_frame_counter
op	121:32	0:0	6	+=
water	121:35	0:0	6	audio_size
op	121:45	0:0	6	[
water	121:46	0:0	6	i
op	121:47	0:0	6	]
op	121:49	0:0	6	/
water	121:51	0:0	6	channels
water	121:59	0:0	6	;
water	122:8	0:0	6	}
call	123:8	124:78	4	av_add_index_entry
arg	123:27	123:40	5	s->streams[0]
water	123:27	0:0	6	s
op	123:28	0:0	6	->
water	123:30	0:0	6	streams
op	123:37	0:0	6	[
water	123:38	0:0	6	0
op	123:39	0:0	6	]
arg	123:42	123:73	5	chunk_offset[i]+audio_size[i]
water	123:42	0:0	6	chunk_offset
op	123:54	0:0	6	[
water	123:55	0:0	6	i
op	123:56	0:0	6	]
op	123:58	0:0	6	+
water	123:60	0:0	6	audio_size
op	123:70	0:0	6	[
water	123:71	0:0	6	i
op	123:72	0:0	6	]
arg	124:12	124:31	5	video_frame_counter
water	124:12	0:0	6	video_frame_counter
arg	124:32	124:59	5	chunk_size[i]-audio_size[i]
water	124:32	0:0	6	chunk_size
op	124:42	0:0	6	[
water	124:43	0:0	6	i
op	124:44	0:0	6	]
op	124:45	0:0	6	-
water	124:46	0:0	6	audio_size
op	124:56	0:0	6	[
water	124:57	0:0	6	i
op	124:58	0:0	6	]
arg	124:60	124:61	5	0
water	124:60	0:0	6	0
arg	124:62	124:78	5	AVINDEX_KEYFRAME
water	124:62	0:0	6	AVINDEX_KEYFRAME
water	124:79	0:0	4	;
op	125:8	0:0	4	++
water	125:10	0:0	4	video_frame_counter
water	125:29	0:0	4	;
water	126:4	0:0	4	}
call	129:4	129:22	2	av_free
arg	129:12	129:22	3	chunk_size
water	129:12	0:0	4	chunk_size
water	129:23	0:0	2	;
call	130:4	130:22	2	av_free
arg	130:12	130:22	3	audio_size
water	130:12	0:0	4	audio_size
water	130:23	0:0	2	;
call	131:4	131:24	2	av_free
arg	131:12	131:24	3	chunk_offset
water	131:12	0:0	4	chunk_offset
water	131:25	0:0	2	;
return	133:4	133:14	2	ret
water	133:11	0:0	3	ret
