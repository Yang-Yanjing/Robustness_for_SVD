func	1:0	274:0	0	int	ff_mov_write_packet
params	1:23	0:0	1	
param	1:24	1:42	2	AVFormatContext *	s
param	1:44	1:57	2	AVPacket *	pkt
stmnts	0:0	273:14	1	
decl	3:4	3:37	2	MOVMuxContext	*mov
op	3:23	0:0	2	=
water	3:25	0:0	2	s
op	3:26	0:0	2	->
water	3:28	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:51	2	MOVTrack	*trk
op	5:18	0:0	2	=
op	5:20	0:0	2	&
water	5:21	0:0	2	mov
op	5:24	0:0	2	->
water	5:26	0:0	2	tracks
op	5:32	0:0	2	[
water	5:33	0:0	2	pkt
op	5:36	0:0	2	->
water	5:38	0:0	2	stream_index
op	5:50	0:0	2	]
decl	6:4	6:37	2	AVCodecParameters	*par
op	6:27	0:0	2	=
water	6:29	0:0	2	trk
op	6:32	0:0	2	->
water	6:34	0:0	2	par
decl	7:4	7:37	2	unsigned int	samples_in_chunk
op	7:34	0:0	2	=
water	7:36	0:0	2	0
decl	8:4	8:33	2	int	size
op	8:13	0:0	2	=
water	8:15	0:0	2	pkt
op	8:18	0:0	2	->
water	8:20	0:0	2	size
water	8:24	0:0	2	,
decl	8:4	8:33	2	int	ret
op	8:30	0:0	2	=
water	8:32	0:0	2	0
decl	9:4	9:36	2	uint8_t	*reformatted_data
op	9:30	0:0	2	=
water	9:32	0:0	2	NULL
water	11:4	0:0	2	ret
op	11:8	0:0	2	=
call	11:10	11:26	2	check_pkt
arg	11:20	11:21	3	s
water	11:20	0:0	4	s
arg	11:23	11:26	3	pkt
water	11:23	0:0	4	pkt
water	11:27	0:0	2	;
if	12:4	13:18	2	(ret < 0)
cond	12:8	12:14	3	ret < 0
water	12:8	0:0	4	ret
op	12:12	0:0	4	<
water	12:14	0:0	4	0
stmts	13:8	13:18	3	
return	13:8	13:18	4	ret
water	13:15	0:0	5	ret
if	15:4	37:4	2	(mov -> flags & FF_MOV_FLAG_FRAGMENT)
cond	15:8	15:21	3	mov -> flags & FF_MOV_FLAG_FRAGMENT
water	15:8	0:0	4	mov
op	15:11	0:0	4	->
water	15:13	0:0	4	flags
op	15:19	0:0	4	&
water	15:21	0:0	4	FF_MOV_FLAG_FRAGMENT
stmts	15:43	37:4	3	
water	15:43	0:0	4	{
decl	16:8	16:15	4	int	ret
if	17:8	30:8	4	(mov -> moov_written || mov -> flags & FF_MOV_FLAG_EMPTY_MOOV)
cond	17:12	17:46	5	mov -> moov_written || mov -> flags & FF_MOV_FLAG_EMPTY_MOOV
water	17:12	0:0	6	mov
op	17:15	0:0	6	->
water	17:17	0:0	6	moov_written
op	17:30	0:0	6	||
water	17:33	0:0	6	mov
op	17:36	0:0	6	->
water	17:38	0:0	6	flags
op	17:44	0:0	6	&
water	17:46	0:0	6	FF_MOV_FLAG_EMPTY_MOOV
stmts	17:70	30:8	5	
water	17:70	0:0	6	{
if	18:12	23:12	6	(mov -> frag_interleave && mov -> fragments > 0)
cond	18:16	18:57	7	mov -> frag_interleave && mov -> fragments > 0
water	18:16	0:0	8	mov
op	18:19	0:0	8	->
water	18:21	0:0	8	frag_interleave
op	18:37	0:0	8	&&
water	18:40	0:0	8	mov
op	18:43	0:0	8	->
water	18:45	0:0	8	fragments
op	18:55	0:0	8	>
water	18:57	0:0	8	0
stmts	18:60	23:12	7	
water	18:60	0:0	8	{
if	19:16	22:16	8	(trk -> entry - trk -> entries_flushed >= mov -> frag_interleave)
cond	19:20	19:62	9	trk -> entry - trk -> entries_flushed >= mov -> frag_interleave
water	19:20	0:0	10	trk
op	19:23	0:0	10	->
water	19:25	0:0	10	entry
op	19:31	0:0	10	-
water	19:33	0:0	10	trk
op	19:36	0:0	10	->
water	19:38	0:0	10	entries_flushed
op	19:54	0:0	10	>=
water	19:57	0:0	10	mov
op	19:60	0:0	10	->
water	19:62	0:0	10	frag_interleave
stmts	19:79	22:16	9	
water	19:79	0:0	10	{
if	20:20	21:34	10	(( ret =mov_flush_fragment_interleaving (s ,trk ) ) < 0)
cond	20:24	20:74	11	( ret =mov_flush_fragment_interleaving (s ,trk ) ) < 0
water	20:24	0:0	12	(
water	20:25	0:0	12	ret
op	20:29	0:0	12	=
call	20:31	20:69	12	mov_flush_fragment_interleaving
arg	20:63	20:64	13	s
water	20:63	0:0	14	s
arg	20:66	20:69	13	trk
water	20:66	0:0	14	trk
water	20:70	0:0	12	)
op	20:72	0:0	12	<
water	20:74	0:0	12	0
stmts	21:24	21:34	11	
return	21:24	21:34	12	ret
water	21:31	0:0	13	ret
water	22:16	0:0	10	}
water	23:12	0:0	8	}
if	25:12	28:12	6	(! trk -> mdat_buf)
cond	25:16	25:22	7	! trk -> mdat_buf
op	25:16	0:0	8	!
water	25:17	0:0	8	trk
op	25:20	0:0	8	->
water	25:22	0:0	8	mdat_buf
stmts	25:32	28:12	7	
water	25:32	0:0	8	{
if	26:16	27:30	8	(( ret =avio_open_dyn_buf (& trk -> mdat_buf ) ) < 0)
cond	26:20	26:64	9	( ret =avio_open_dyn_buf (& trk -> mdat_buf ) ) < 0
water	26:20	0:0	10	(
water	26:21	0:0	10	ret
op	26:25	0:0	10	=
call	26:27	26:59	10	avio_open_dyn_buf
arg	26:45	26:59	11	&trk->mdat_buf
op	26:45	0:0	12	&
water	26:46	0:0	12	trk
op	26:49	0:0	12	->
water	26:51	0:0	12	mdat_buf
water	26:60	0:0	10	)
op	26:62	0:0	10	<
water	26:64	0:0	10	0
stmts	27:20	27:30	9	
return	27:20	27:30	10	ret
water	27:27	0:0	11	ret
water	28:12	0:0	8	}
water	29:12	0:0	6	pb
op	29:15	0:0	6	=
water	29:17	0:0	6	trk
op	29:20	0:0	6	->
water	29:22	0:0	6	mdat_buf
water	29:30	0:0	6	;
water	30:8	0:0	6	}
else	30:10	36:8	4
stmts	30:15	36:8	5	
water	30:15	0:0	6	{
if	31:12	34:12	6	(! mov -> mdat_buf)
cond	31:16	31:22	7	! mov -> mdat_buf
op	31:16	0:0	8	!
water	31:17	0:0	8	mov
op	31:20	0:0	8	->
water	31:22	0:0	8	mdat_buf
stmts	31:32	34:12	7	
water	31:32	0:0	8	{
if	32:16	33:30	8	(( ret =avio_open_dyn_buf (& mov -> mdat_buf ) ) < 0)
cond	32:20	32:64	9	( ret =avio_open_dyn_buf (& mov -> mdat_buf ) ) < 0
water	32:20	0:0	10	(
water	32:21	0:0	10	ret
op	32:25	0:0	10	=
call	32:27	32:59	10	avio_open_dyn_buf
arg	32:45	32:59	11	&mov->mdat_buf
op	32:45	0:0	12	&
water	32:46	0:0	12	mov
op	32:49	0:0	12	->
water	32:51	0:0	12	mdat_buf
water	32:60	0:0	10	)
op	32:62	0:0	10	<
water	32:64	0:0	10	0
stmts	33:20	33:30	9	
return	33:20	33:30	10	ret
water	33:27	0:0	11	ret
water	34:12	0:0	8	}
water	35:12	0:0	6	pb
op	35:15	0:0	6	=
water	35:17	0:0	6	mov
op	35:20	0:0	6	->
water	35:22	0:0	6	mdat_buf
water	35:30	0:0	6	;
water	36:8	0:0	6	}
water	37:4	0:0	4	}
if	39:4	53:4	2	(par -> codec_id == AV_CODEC_ID_AMR_NB)
cond	39:8	39:25	3	par -> codec_id == AV_CODEC_ID_AMR_NB
water	39:8	0:0	4	par
op	39:11	0:0	4	->
water	39:13	0:0	4	codec_id
op	39:22	0:0	4	==
water	39:25	0:0	4	AV_CODEC_ID_AMR_NB
stmts	39:45	53:4	3	
water	39:45	0:0	4	{
water	41:8	0:0	4	static
water	41:15	0:0	4	const
water	41:21	0:0	4	uint16_t
water	41:30	0:0	4	packed_size
op	41:41	0:0	4	[
water	41:42	0:0	4	16
op	41:44	0:0	4	]
op	41:46	0:0	4	=
water	42:12	0:0	4	{
water	42:13	0:0	4	13
water	42:15	0:0	4	,
water	42:17	0:0	4	14
water	42:19	0:0	4	,
water	42:21	0:0	4	16
water	42:23	0:0	4	,
water	42:25	0:0	4	18
water	42:27	0:0	4	,
water	42:29	0:0	4	20
water	42:31	0:0	4	,
water	42:33	0:0	4	21
water	42:35	0:0	4	,
water	42:37	0:0	4	27
water	42:39	0:0	4	,
water	42:41	0:0	4	32
water	42:43	0:0	4	,
water	42:45	0:0	4	6
water	42:46	0:0	4	,
water	42:48	0:0	4	0
water	42:49	0:0	4	,
water	42:51	0:0	4	0
water	42:52	0:0	4	,
water	42:54	0:0	4	0
water	42:55	0:0	4	,
water	42:57	0:0	4	0
water	42:58	0:0	4	,
water	42:60	0:0	4	0
water	42:61	0:0	4	,
water	42:63	0:0	4	0
water	42:64	0:0	4	,
water	42:66	0:0	4	1
water	42:67	0:0	4	}
water	42:68	0:0	4	;
decl	43:8	43:19	4	int	len
op	43:16	0:0	4	=
water	43:18	0:0	4	0
while	45:8	48:8	4	(len < size && samples_in_chunk < 100)
cond	45:15	45:48	5	len < size && samples_in_chunk < 100
water	45:15	0:0	6	len
op	45:19	0:0	6	<
water	45:21	0:0	6	size
op	45:26	0:0	6	&&
water	45:29	0:0	6	samples_in_chunk
op	45:46	0:0	6	<
water	45:48	0:0	6	100
stmts	45:53	48:8	5	
water	45:53	0:0	6	{
water	46:12	0:0	6	len
op	46:16	0:0	6	+=
water	46:19	0:0	6	packed_size
op	46:30	0:0	6	[
water	46:31	0:0	6	(
water	46:32	0:0	6	pkt
op	46:35	0:0	6	->
water	46:37	0:0	6	data
op	46:41	0:0	6	[
water	46:42	0:0	6	len
op	46:45	0:0	6	]
op	46:47	0:0	6	>>
water	46:50	0:0	6	3
water	46:51	0:0	6	)
op	46:53	0:0	6	&
water	46:55	0:0	6	0
water	46:56	0:0	6	x0F
op	46:59	0:0	6	]
water	46:60	0:0	6	;
water	47:12	0:0	6	samples_in_chunk
op	47:28	0:0	6	++
water	47:30	0:0	6	;
water	48:8	0:0	6	}
if	49:8	52:8	4	(samples_in_chunk > 1)
cond	49:12	49:31	5	samples_in_chunk > 1
water	49:12	0:0	6	samples_in_chunk
op	49:29	0:0	6	>
water	49:31	0:0	6	1
stmts	49:34	52:8	5	
water	49:34	0:0	6	{
call	50:12	50:110	6	av_log
arg	50:19	50:20	7	s
water	50:19	0:0	8	s
arg	50:22	50:34	7	AV_LOG_ERROR
water	50:22	0:0	8	AV_LOG_ERROR
arg	50:36	50:110	7	"fatal error, input is not a single packet, implement a AVParser for it\n"
water	50:36	0:0	8	"fatal error, input is not a single packet, implement a AVParser for it\n"
water	50:111	0:0	6	;
return	51:12	51:21	6	-1
op	51:19	0:0	7	-
water	51:20	0:0	7	1
water	52:8	0:0	6	}
water	53:4	0:0	4	}
else	53:6	56:4	2
stmts	53:11	56:4	3	
if	53:11	56:4	4	(par -> codec_id == AV_CODEC_ID_ADPCM_MS || par -> codec_id == AV_CODEC_ID_ADPCM_IMA_WAV)
cond	53:15	54:32	5	par -> codec_id == AV_CODEC_ID_ADPCM_MS || par -> codec_id == AV_CODEC_ID_ADPCM_IMA_WAV
water	53:15	0:0	6	par
op	53:18	0:0	6	->
water	53:20	0:0	6	codec_id
op	53:29	0:0	6	==
water	53:32	0:0	6	AV_CODEC_ID_ADPCM_MS
op	53:53	0:0	6	||
water	54:15	0:0	6	par
op	54:18	0:0	6	->
water	54:20	0:0	6	codec_id
op	54:29	0:0	6	==
water	54:32	0:0	6	AV_CODEC_ID_ADPCM_IMA_WAV
stmts	54:59	56:4	5	
water	54:59	0:0	6	{
water	55:8	0:0	6	samples_in_chunk
op	55:25	0:0	6	=
water	55:27	0:0	6	trk
op	55:30	0:0	6	->
water	55:32	0:0	6	par
op	55:35	0:0	6	->
water	55:37	0:0	6	frame_size
water	55:47	0:0	6	;
water	56:4	0:0	6	}
else	56:6	57:50	2
stmts	56:11	57:50	3	
if	56:11	57:50	4	(trk -> sample_size)
cond	56:15	56:20	5	trk -> sample_size
water	56:15	0:0	6	trk
op	56:18	0:0	6	->
water	56:20	0:0	6	sample_size
stmts	57:8	57:50	5	
water	57:8	0:0	6	samples_in_chunk
op	57:25	0:0	6	=
water	57:27	0:0	6	size
op	57:32	0:0	6	/
water	57:34	0:0	6	trk
op	57:37	0:0	6	->
water	57:39	0:0	6	sample_size
water	57:50	0:0	6	;
else	58:4	59:28	2
stmts	59:8	59:28	3	
water	59:8	0:0	4	samples_in_chunk
op	59:25	0:0	4	=
water	59:27	0:0	4	1
water	59:28	0:0	4	;
if	62:4	72:4	2	(trk -> vos_len == 0 && par -> extradata_size > 0 && !TAG_IS_AVCI (trk -> tag ) && ( par -> codec_id != AV_CODEC_ID_DNXHD ))
cond	62:8	64:43	3	trk -> vos_len == 0 && par -> extradata_size > 0 && !TAG_IS_AVCI (trk -> tag ) && ( par -> codec_id != AV_CODEC_ID_DNXHD )
water	62:8	0:0	4	trk
op	62:11	0:0	4	->
water	62:13	0:0	4	vos_len
op	62:21	0:0	4	==
water	62:24	0:0	4	0
op	62:26	0:0	4	&&
water	62:29	0:0	4	par
op	62:32	0:0	4	->
water	62:34	0:0	4	extradata_size
op	62:49	0:0	4	>
water	62:51	0:0	4	0
op	62:53	0:0	4	&&
op	63:8	0:0	4	!
call	63:9	63:29	4	TAG_IS_AVCI
arg	63:21	63:29	5	trk->tag
water	63:21	0:0	6	trk
op	63:24	0:0	6	->
water	63:26	0:0	6	tag
op	63:31	0:0	4	&&
water	64:8	0:0	4	(
water	64:9	0:0	4	par
op	64:12	0:0	4	->
water	64:14	0:0	4	codec_id
op	64:23	0:0	4	!=
water	64:26	0:0	4	AV_CODEC_ID_DNXHD
water	64:43	0:0	4	)
stmts	64:46	72:4	3	
water	64:46	0:0	4	{
water	65:8	0:0	4	trk
op	65:11	0:0	4	->
water	65:13	0:0	4	vos_len
op	65:22	0:0	4	=
water	65:24	0:0	4	par
op	65:27	0:0	4	->
water	65:29	0:0	4	extradata_size
water	65:43	0:0	4	;
water	66:8	0:0	4	trk
op	66:11	0:0	4	->
water	66:13	0:0	4	vos_data
op	66:22	0:0	4	=
call	66:24	66:46	4	av_malloc
arg	66:34	66:46	5	trk->vos_len
water	66:34	0:0	6	trk
op	66:37	0:0	6	->
water	66:39	0:0	6	vos_len
water	66:47	0:0	4	;
if	67:8	70:8	4	(! trk -> vos_data)
cond	67:12	67:18	5	! trk -> vos_data
op	67:12	0:0	6	!
water	67:13	0:0	6	trk
op	67:16	0:0	6	->
water	67:18	0:0	6	vos_data
stmts	67:28	70:8	5	
water	67:28	0:0	6	{
water	68:12	0:0	6	ret
op	68:16	0:0	6	=
call	68:18	68:32	6	AVERROR
arg	68:26	68:32	7	ENOMEM
water	68:26	0:0	8	ENOMEM
water	68:33	0:0	6	;
goto	69:12	69:20	6	err
water	69:17	0:0	7	err
water	70:8	0:0	6	}
call	71:8	71:58	4	memcpy
arg	71:15	71:28	5	trk->vos_data
water	71:15	0:0	6	trk
op	71:18	0:0	6	->
water	71:20	0:0	6	vos_data
arg	71:30	71:44	5	par->extradata
water	71:30	0:0	6	par
op	71:33	0:0	6	->
water	71:35	0:0	6	extradata
arg	71:46	71:58	5	trk->vos_len
water	71:46	0:0	6	trk
op	71:49	0:0	6	->
water	71:51	0:0	6	vos_len
water	71:59	0:0	4	;
water	72:4	0:0	4	}
if	74:4	83:4	2	(par -> codec_id == AV_CODEC_ID_AAC && pkt -> size > 2 && (AV_RB16 (pkt -> data ) & 0 xfff0 ) == 0 xfff0)
cond	74:8	75:42	3	par -> codec_id == AV_CODEC_ID_AAC && pkt -> size > 2 && (AV_RB16 (pkt -> data ) & 0 xfff0 ) == 0 xfff0
water	74:8	0:0	4	par
op	74:11	0:0	4	->
water	74:13	0:0	4	codec_id
op	74:22	0:0	4	==
water	74:25	0:0	4	AV_CODEC_ID_AAC
op	74:41	0:0	4	&&
water	74:44	0:0	4	pkt
op	74:47	0:0	4	->
water	74:49	0:0	4	size
op	74:54	0:0	4	>
water	74:56	0:0	4	2
op	74:58	0:0	4	&&
water	75:8	0:0	4	(
call	75:9	75:26	4	AV_RB16
arg	75:17	75:26	5	pkt->data
water	75:17	0:0	6	pkt
op	75:20	0:0	6	->
water	75:22	0:0	6	data
op	75:28	0:0	4	&
water	75:30	0:0	4	0
water	75:31	0:0	4	xfff0
water	75:36	0:0	4	)
op	75:38	0:0	4	==
water	75:41	0:0	4	0
water	75:42	0:0	4	xfff0
stmts	75:49	83:4	3	
water	75:49	0:0	4	{
if	76:8	81:8	4	(! s -> streams [ pkt -> stream_index ] -> nb_frames)
cond	76:12	76:44	5	! s -> streams [ pkt -> stream_index ] -> nb_frames
op	76:12	0:0	6	!
water	76:13	0:0	6	s
op	76:14	0:0	6	->
water	76:16	0:0	6	streams
op	76:23	0:0	6	[
water	76:24	0:0	6	pkt
op	76:27	0:0	6	->
water	76:29	0:0	6	stream_index
op	76:41	0:0	6	]
op	76:42	0:0	6	->
water	76:44	0:0	6	nb_frames
stmts	76:55	81:8	5	
water	76:55	0:0	6	{
call	77:12	79:66	6	av_log
arg	77:19	77:20	7	s
water	77:19	0:0	8	s
arg	77:22	77:34	7	AV_LOG_ERROR
water	77:22	0:0	8	AV_LOG_ERROR
arg	77:36	79:66	7	"Malformed AAC bitstream detected: ""use the audio bitstream filter 'aac_adtstoasc' to fix it ""('-bsf:a aac_adtstoasc' option with ffmpeg)\n"
water	77:36	0:0	8	"Malformed AAC bitstream detected: "
water	78:19	0:0	8	"use the audio bitstream filter 'aac_adtstoasc' to fix it "
water	79:19	0:0	8	"('-bsf:a aac_adtstoasc' option with ffmpeg)\n"
water	79:67	0:0	6	;
return	80:12	80:21	6	-1
op	80:19	0:0	7	-
water	80:20	0:0	7	1
water	81:8	0:0	6	}
call	82:8	82:57	4	av_log
arg	82:15	82:16	5	s
water	82:15	0:0	6	s
arg	82:18	82:32	5	AV_LOG_WARNING
water	82:18	0:0	6	AV_LOG_WARNING
arg	82:34	82:57	5	"aac bitstream error\n"
water	82:34	0:0	6	"aac bitstream error\n"
water	82:58	0:0	4	;
water	83:4	0:0	4	}
if	84:4	102:4	2	(par -> codec_id == AV_CODEC_ID_H264 && trk -> vos_len > 0 && * ( uint8_t * ) trk -> vos_data != 1 && !TAG_IS_AVCI (trk -> tag ))
cond	84:8	84:120	3	par -> codec_id == AV_CODEC_ID_H264 && trk -> vos_len > 0 && * ( uint8_t * ) trk -> vos_data != 1 && !TAG_IS_AVCI (trk -> tag )
water	84:8	0:0	4	par
op	84:11	0:0	4	->
water	84:13	0:0	4	codec_id
op	84:22	0:0	4	==
water	84:25	0:0	4	AV_CODEC_ID_H264
op	84:42	0:0	4	&&
water	84:45	0:0	4	trk
op	84:48	0:0	4	->
water	84:50	0:0	4	vos_len
op	84:58	0:0	4	>
water	84:60	0:0	4	0
op	84:62	0:0	4	&&
op	84:65	0:0	4	*
water	84:66	0:0	4	(
water	84:67	0:0	4	uint8_t
op	84:75	0:0	4	*
water	84:76	0:0	4	)
water	84:77	0:0	4	trk
op	84:80	0:0	4	->
water	84:82	0:0	4	vos_data
op	84:91	0:0	4	!=
water	84:94	0:0	4	1
op	84:96	0:0	4	&&
op	84:99	0:0	4	!
call	84:100	84:120	4	TAG_IS_AVCI
arg	84:112	84:120	5	trk->tag
water	84:112	0:0	6	trk
op	84:115	0:0	6	->
water	84:117	0:0	6	tag
stmts	84:123	102:4	3	
water	84:123	0:0	4	{
if	87:8	91:8	4	(trk -> hint_track >= 0 && trk -> hint_track < mov -> nb_streams)
cond	87:12	87:59	5	trk -> hint_track >= 0 && trk -> hint_track < mov -> nb_streams
water	87:12	0:0	6	trk
op	87:15	0:0	6	->
water	87:17	0:0	6	hint_track
op	87:28	0:0	6	>=
water	87:31	0:0	6	0
op	87:33	0:0	6	&&
water	87:36	0:0	6	trk
op	87:39	0:0	6	->
water	87:41	0:0	6	hint_track
op	87:52	0:0	6	<
water	87:54	0:0	6	mov
op	87:57	0:0	6	->
water	87:59	0:0	6	nb_streams
stmts	87:71	91:8	5	
water	87:71	0:0	6	{
call	88:12	89:44	6	ff_avc_parse_nal_units_buf
arg	88:39	88:48	7	pkt->data
water	88:39	0:0	8	pkt
op	88:42	0:0	8	->
water	88:44	0:0	8	data
arg	88:50	88:67	7	&reformatted_data
op	88:50	0:0	8	&
water	88:51	0:0	8	reformatted_data
arg	89:39	89:44	7	&size
op	89:39	0:0	8	&
water	89:40	0:0	8	size
water	89:45	0:0	6	;
call	90:12	90:49	6	avio_write
arg	90:23	90:25	7	pb
water	90:23	0:0	8	pb
arg	90:27	90:43	7	reformatted_data
water	90:27	0:0	8	reformatted_data
arg	90:45	90:49	7	size
water	90:45	0:0	8	size
water	90:50	0:0	6	;
water	91:8	0:0	6	}
else	91:10	101:8	4
stmts	91:15	101:8	5	
water	91:15	0:0	6	{
if	92:12	98:12	6	(trk -> cenc . aes_ctr)
cond	92:16	92:26	7	trk -> cenc . aes_ctr
water	92:16	0:0	8	trk
op	92:19	0:0	8	->
water	92:21	0:0	8	cenc
op	92:25	0:0	8	.
water	92:26	0:0	8	aes_ctr
stmts	92:35	98:12	7	
water	92:35	0:0	8	{
water	93:16	0:0	8	size
op	93:21	0:0	8	=
call	93:23	93:86	8	ff_mov_cenc_avc_parse_nal_units
arg	93:55	93:65	9	&trk->cenc
op	93:55	0:0	10	&
water	93:56	0:0	10	trk
op	93:59	0:0	10	->
water	93:61	0:0	10	cenc
arg	93:67	93:69	9	pb
water	93:67	0:0	10	pb
arg	93:71	93:80	9	pkt->data
water	93:71	0:0	10	pkt
op	93:74	0:0	10	->
water	93:76	0:0	10	data
arg	93:82	93:86	9	size
water	93:82	0:0	10	size
water	93:87	0:0	8	;
if	94:16	97:16	8	(size < 0)
cond	94:20	94:27	9	size < 0
water	94:20	0:0	10	size
op	94:25	0:0	10	<
water	94:27	0:0	10	0
stmts	94:30	97:16	9	
water	94:30	0:0	10	{
water	95:20	0:0	10	ret
op	95:24	0:0	10	=
water	95:26	0:0	10	size
water	95:30	0:0	10	;
goto	96:20	96:28	10	err
water	96:25	0:0	11	err
water	97:16	0:0	10	}
water	98:12	0:0	8	}
else	98:14	100:12	6
stmts	98:19	100:12	7	
water	98:19	0:0	8	{
water	99:16	0:0	8	size
op	99:21	0:0	8	=
call	99:23	99:70	8	ff_avc_parse_nal_units
arg	99:46	99:48	9	pb
water	99:46	0:0	10	pb
arg	99:50	99:59	9	pkt->data
water	99:50	0:0	10	pkt
op	99:53	0:0	10	->
water	99:55	0:0	10	data
arg	99:61	99:70	9	pkt->size
water	99:61	0:0	10	pkt
op	99:64	0:0	10	->
water	99:66	0:0	10	size
water	99:71	0:0	8	;
water	100:12	0:0	8	}
water	101:8	0:0	6	}
water	102:4	0:0	4	}
else	102:6	112:4	2
stmts	102:11	112:4	3	
if	102:11	112:4	4	(par -> codec_id == AV_CODEC_ID_HEVC && trk -> vos_len > 6 && (AV_RB24 (trk -> vos_data ) == 1 ||AV_RB32 (trk -> vos_data ) == 1 ))
cond	102:15	103:74	5	par -> codec_id == AV_CODEC_ID_HEVC && trk -> vos_len > 6 && (AV_RB24 (trk -> vos_data ) == 1 ||AV_RB32 (trk -> vos_data ) == 1 )
water	102:15	0:0	6	par
op	102:18	0:0	6	->
water	102:20	0:0	6	codec_id
op	102:29	0:0	6	==
water	102:32	0:0	6	AV_CODEC_ID_HEVC
op	102:49	0:0	6	&&
water	102:52	0:0	6	trk
op	102:55	0:0	6	->
water	102:57	0:0	6	vos_len
op	102:65	0:0	6	>
water	102:67	0:0	6	6
op	102:69	0:0	6	&&
water	103:15	0:0	6	(
call	103:16	103:37	6	AV_RB24
arg	103:24	103:37	7	trk->vos_data
water	103:24	0:0	8	trk
op	103:27	0:0	8	->
water	103:29	0:0	8	vos_data
op	103:39	0:0	6	==
water	103:42	0:0	6	1
op	103:44	0:0	6	||
call	103:47	103:68	6	AV_RB32
arg	103:55	103:68	7	trk->vos_data
water	103:55	0:0	8	trk
op	103:58	0:0	8	->
water	103:60	0:0	8	vos_data
op	103:70	0:0	6	==
water	103:73	0:0	6	1
water	103:74	0:0	6	)
stmts	103:77	112:4	5	
water	103:77	0:0	6	{
if	105:8	108:8	6	(trk -> hint_track >= 0 && trk -> hint_track < mov -> nb_streams)
cond	105:12	105:59	7	trk -> hint_track >= 0 && trk -> hint_track < mov -> nb_streams
water	105:12	0:0	8	trk
op	105:15	0:0	8	->
water	105:17	0:0	8	hint_track
op	105:28	0:0	8	>=
water	105:31	0:0	8	0
op	105:33	0:0	8	&&
water	105:36	0:0	8	trk
op	105:39	0:0	8	->
water	105:41	0:0	8	hint_track
op	105:52	0:0	8	<
water	105:54	0:0	8	mov
op	105:57	0:0	8	->
water	105:59	0:0	8	nb_streams
stmts	105:71	108:8	7	
water	105:71	0:0	8	{
call	106:12	106:79	8	ff_hevc_annexb2mp4_buf
arg	106:35	106:44	9	pkt->data
water	106:35	0:0	10	pkt
op	106:38	0:0	10	->
water	106:40	0:0	10	data
arg	106:46	106:63	9	&reformatted_data
op	106:46	0:0	10	&
water	106:47	0:0	10	reformatted_data
arg	106:65	106:70	9	&size
op	106:65	0:0	10	&
water	106:66	0:0	10	size
arg	106:72	106:73	9	0
water	106:72	0:0	10	0
arg	106:75	106:79	9	NULL
water	106:75	0:0	10	NULL
water	106:80	0:0	8	;
call	107:12	107:49	8	avio_write
arg	107:23	107:25	9	pb
water	107:23	0:0	10	pb
arg	107:27	107:43	9	reformatted_data
water	107:27	0:0	10	reformatted_data
arg	107:45	107:49	9	size
water	107:45	0:0	10	size
water	107:50	0:0	8	;
water	108:8	0:0	8	}
else	108:10	110:8	6
stmts	108:15	110:8	7	
water	108:15	0:0	8	{
water	109:12	0:0	8	size
op	109:17	0:0	8	=
call	109:19	109:71	8	ff_hevc_annexb2mp4
arg	109:38	109:40	9	pb
water	109:38	0:0	10	pb
arg	109:42	109:51	9	pkt->data
water	109:42	0:0	10	pkt
op	109:45	0:0	10	->
water	109:47	0:0	10	data
arg	109:53	109:62	9	pkt->size
water	109:53	0:0	10	pkt
op	109:56	0:0	10	->
water	109:58	0:0	10	size
arg	109:64	109:65	9	0
water	109:64	0:0	10	0
arg	109:67	109:71	9	NULL
water	109:67	0:0	10	NULL
water	109:72	0:0	8	;
water	110:8	0:0	8	}
water	112:4	0:0	6	}
else	112:6	120:4	2
stmts	112:11	120:4	3	
if	112:11	120:4	4	(par -> codec_id == AV_CODEC_ID_EAC3)
cond	112:15	112:32	5	par -> codec_id == AV_CODEC_ID_EAC3
water	112:15	0:0	6	par
op	112:18	0:0	6	->
water	112:20	0:0	6	codec_id
op	112:29	0:0	6	==
water	112:32	0:0	6	AV_CODEC_ID_EAC3
stmts	112:50	120:4	5	
water	112:50	0:0	6	{
water	113:8	0:0	6	size
op	113:13	0:0	6	=
call	113:15	113:40	6	handle_eac3
arg	113:27	113:30	7	mov
water	113:27	0:0	8	mov
arg	113:32	113:35	7	pkt
water	113:32	0:0	8	pkt
arg	113:37	113:40	7	trk
water	113:37	0:0	8	trk
water	113:41	0:0	6	;
if	114:8	115:23	6	(size < 0)
cond	114:12	114:19	7	size < 0
water	114:12	0:0	8	size
op	114:17	0:0	8	<
water	114:19	0:0	8	0
stmts	115:12	115:23	7	
return	115:12	115:23	8	size
water	115:19	0:0	9	size
else	116:8	117:20	6
stmts	116:13	117:20	7	
if	116:13	117:20	8	(! size)
cond	116:17	116:18	9	! size
op	116:17	0:0	10	!
water	116:18	0:0	10	size
stmts	117:12	117:20	9	
goto	117:12	117:20	10	end
water	117:17	0:0	11	end
call	118:8	118:38	6	avio_write
arg	118:19	118:21	7	pb
water	118:19	0:0	8	pb
arg	118:23	118:32	7	pkt->data
water	118:23	0:0	8	pkt
op	118:26	0:0	8	->
water	118:28	0:0	8	data
arg	118:34	118:38	7	size
water	118:34	0:0	8	size
water	118:39	0:0	6	;
water	120:4	0:0	6	}
else	120:6	135:4	2
stmts	120:11	135:4	3	
water	120:11	0:0	4	{
if	121:8	132:8	4	(trk -> cenc . aes_ctr)
cond	121:12	121:22	5	trk -> cenc . aes_ctr
water	121:12	0:0	6	trk
op	121:15	0:0	6	->
water	121:17	0:0	6	cenc
op	121:21	0:0	6	.
water	121:22	0:0	6	aes_ctr
stmts	121:31	132:8	5	
water	121:31	0:0	6	{
if	122:12	125:12	6	(par -> codec_id == AV_CODEC_ID_H264 && par -> extradata_size > 4)
cond	122:16	122:75	7	par -> codec_id == AV_CODEC_ID_H264 && par -> extradata_size > 4
water	122:16	0:0	8	par
op	122:19	0:0	8	->
water	122:21	0:0	8	codec_id
op	122:30	0:0	8	==
water	122:33	0:0	8	AV_CODEC_ID_H264
op	122:50	0:0	8	&&
water	122:53	0:0	8	par
op	122:56	0:0	8	->
water	122:58	0:0	8	extradata_size
op	122:73	0:0	8	>
water	122:75	0:0	8	4
stmts	122:78	125:12	7	
water	122:78	0:0	8	{
decl	123:16	123:67	8	int	nal_size_length
op	123:36	0:0	8	=
water	123:38	0:0	8	(
water	123:39	0:0	8	par
op	123:42	0:0	8	->
water	123:44	0:0	8	extradata
op	123:53	0:0	8	[
water	123:54	0:0	8	4
op	123:55	0:0	8	]
op	123:57	0:0	8	&
water	123:59	0:0	8	0
water	123:60	0:0	8	x3
water	123:62	0:0	8	)
op	123:64	0:0	8	+
water	123:66	0:0	8	1
water	124:16	0:0	8	ret
op	124:20	0:0	8	=
call	124:22	124:105	8	ff_mov_cenc_avc_write_nal_units
arg	124:54	124:55	9	s
water	124:54	0:0	10	s
arg	124:57	124:67	9	&trk->cenc
op	124:57	0:0	10	&
water	124:58	0:0	10	trk
op	124:61	0:0	10	->
water	124:63	0:0	10	cenc
arg	124:69	124:84	9	nal_size_length
water	124:69	0:0	10	nal_size_length
arg	124:86	124:88	9	pb
water	124:86	0:0	10	pb
arg	124:90	124:99	9	pkt->data
water	124:90	0:0	10	pkt
op	124:93	0:0	10	->
water	124:95	0:0	10	data
arg	124:101	124:105	9	size
water	124:101	0:0	10	size
water	124:106	0:0	8	;
water	125:12	0:0	8	}
else	125:14	127:12	6
stmts	125:19	127:12	7	
water	125:19	0:0	8	{
water	126:16	0:0	8	ret
op	126:20	0:0	8	=
call	126:22	126:78	8	ff_mov_cenc_write_packet
arg	126:47	126:57	9	&trk->cenc
op	126:47	0:0	10	&
water	126:48	0:0	10	trk
op	126:51	0:0	10	->
water	126:53	0:0	10	cenc
arg	126:59	126:61	9	pb
water	126:59	0:0	10	pb
arg	126:63	126:72	9	pkt->data
water	126:63	0:0	10	pkt
op	126:66	0:0	10	->
water	126:68	0:0	10	data
arg	126:74	126:78	9	size
water	126:74	0:0	10	size
water	126:79	0:0	8	;
water	127:12	0:0	8	}
if	129:12	131:12	6	(ret)
cond	129:16	129:16	7	ret
water	129:16	0:0	8	ret
stmts	129:21	131:12	7	
water	129:21	0:0	8	{
goto	130:16	130:24	8	err
water	130:21	0:0	9	err
water	131:12	0:0	8	}
water	132:8	0:0	6	}
else	132:10	134:8	4
stmts	132:15	134:8	5	
water	132:15	0:0	6	{
call	133:12	133:42	6	avio_write
arg	133:23	133:25	7	pb
water	133:23	0:0	8	pb
arg	133:27	133:36	7	pkt->data
water	133:27	0:0	8	pkt
op	133:30	0:0	8	->
water	133:32	0:0	8	data
arg	133:38	133:42	7	size
water	133:38	0:0	8	size
water	133:43	0:0	6	;
water	134:8	0:0	6	}
water	135:4	0:0	4	}
if	137:4	147:4	2	(( par -> codec_id == AV_CODEC_ID_DNXHD || par -> codec_id == AV_CODEC_ID_AC3 ) && ! trk -> vos_len)
cond	137:8	138:52	3	( par -> codec_id == AV_CODEC_ID_DNXHD || par -> codec_id == AV_CODEC_ID_AC3 ) && ! trk -> vos_len
water	137:8	0:0	4	(
water	137:9	0:0	4	par
op	137:12	0:0	4	->
water	137:14	0:0	4	codec_id
op	137:23	0:0	4	==
water	137:26	0:0	4	AV_CODEC_ID_DNXHD
op	137:44	0:0	4	||
water	138:9	0:0	4	par
op	138:12	0:0	4	->
water	138:14	0:0	4	codec_id
op	138:23	0:0	4	==
water	138:26	0:0	4	AV_CODEC_ID_AC3
water	138:41	0:0	4	)
op	138:43	0:0	4	&&
op	138:46	0:0	4	!
water	138:47	0:0	4	trk
op	138:50	0:0	4	->
water	138:52	0:0	4	vos_len
stmts	138:61	147:4	3	
water	138:61	0:0	4	{
water	140:8	0:0	4	trk
op	140:11	0:0	4	->
water	140:13	0:0	4	vos_len
op	140:22	0:0	4	=
water	140:24	0:0	4	size
water	140:28	0:0	4	;
water	141:8	0:0	4	trk
op	141:11	0:0	4	->
water	141:13	0:0	4	vos_data
op	141:22	0:0	4	=
call	141:24	141:38	4	av_malloc
arg	141:34	141:38	5	size
water	141:34	0:0	6	size
water	141:39	0:0	4	;
if	142:8	145:8	4	(! trk -> vos_data)
cond	142:12	142:18	5	! trk -> vos_data
op	142:12	0:0	6	!
water	142:13	0:0	6	trk
op	142:16	0:0	6	->
water	142:18	0:0	6	vos_data
stmts	142:28	145:8	5	
water	142:28	0:0	6	{
water	143:12	0:0	6	ret
op	143:16	0:0	6	=
call	143:18	143:32	6	AVERROR
arg	143:26	143:32	7	ENOMEM
water	143:26	0:0	8	ENOMEM
water	143:33	0:0	6	;
goto	144:12	144:20	6	err
water	144:17	0:0	7	err
water	145:8	0:0	6	}
call	146:8	146:45	4	memcpy
arg	146:15	146:28	5	trk->vos_data
water	146:15	0:0	6	trk
op	146:18	0:0	6	->
water	146:20	0:0	6	vos_data
arg	146:30	146:39	5	pkt->data
water	146:30	0:0	6	pkt
op	146:33	0:0	6	->
water	146:35	0:0	6	data
arg	146:41	146:45	5	size
water	146:41	0:0	6	size
water	146:46	0:0	4	;
water	147:4	0:0	4	}
if	149:4	157:4	2	(trk -> entry >= trk -> cluster_capacity)
cond	149:8	149:27	3	trk -> entry >= trk -> cluster_capacity
water	149:8	0:0	4	trk
op	149:11	0:0	4	->
water	149:13	0:0	4	entry
op	149:19	0:0	4	>=
water	149:22	0:0	4	trk
op	149:25	0:0	4	->
water	149:27	0:0	4	cluster_capacity
stmts	149:45	157:4	3	
water	149:45	0:0	4	{
water	150:8	0:0	4	unsigned
water	150:17	0:0	4	new_capacity
op	150:30	0:0	4	=
water	150:32	0:0	4	2
op	150:34	0:0	4	*
water	150:36	0:0	4	(
water	150:37	0:0	4	trk
op	150:40	0:0	4	->
water	150:42	0:0	4	entry
op	150:48	0:0	4	+
water	150:50	0:0	4	MOV_INDEX_CLUSTER_SIZE
water	150:72	0:0	4	)
water	150:73	0:0	4	;
if	151:8	155:8	4	(av_reallocp_array (& trk -> cluster ,new_capacity ,sizeof ( * trk -> cluster ) ))
cond	151:12	152:51	5	av_reallocp_array (& trk -> cluster ,new_capacity ,sizeof ( * trk -> cluster ) )
call	151:12	152:51	6	av_reallocp_array
arg	151:30	151:43	7	&trk->cluster
op	151:30	0:0	8	&
water	151:31	0:0	8	trk
op	151:34	0:0	8	->
water	151:36	0:0	8	cluster
arg	151:45	151:57	7	new_capacity
water	151:45	0:0	8	new_capacity
arg	152:30	152:51	7	sizeof(*trk->cluster)
op	152:30	0:0	8	sizeof
water	152:36	0:0	8	(
op	152:37	0:0	8	*
water	152:38	0:0	8	trk
op	152:41	0:0	8	->
water	152:43	0:0	8	cluster
water	152:50	0:0	8	)
stmts	152:54	155:8	5	
water	152:54	0:0	6	{
water	153:12	0:0	6	ret
op	153:16	0:0	6	=
call	153:18	153:32	6	AVERROR
arg	153:26	153:32	7	ENOMEM
water	153:26	0:0	8	ENOMEM
water	153:33	0:0	6	;
goto	154:12	154:20	6	err
water	154:17	0:0	7	err
water	155:8	0:0	6	}
water	156:8	0:0	4	trk
op	156:11	0:0	4	->
water	156:13	0:0	4	cluster_capacity
op	156:30	0:0	4	=
water	156:32	0:0	4	new_capacity
water	156:44	0:0	4	;
water	157:4	0:0	4	}
water	159:4	0:0	2	trk
op	159:7	0:0	2	->
water	159:9	0:0	2	cluster
op	159:16	0:0	2	[
water	159:17	0:0	2	trk
op	159:20	0:0	2	->
water	159:22	0:0	2	entry
op	159:27	0:0	2	]
op	159:28	0:0	2	.
water	159:29	0:0	2	pos
op	159:46	0:0	2	=
call	159:48	159:60	2	avio_tell
arg	159:58	159:60	3	pb
water	159:58	0:0	4	pb
op	159:62	0:0	2	-
water	159:64	0:0	2	size
water	159:68	0:0	2	;
water	160:4	0:0	2	trk
op	160:7	0:0	2	->
water	160:9	0:0	2	cluster
op	160:16	0:0	2	[
water	160:17	0:0	2	trk
op	160:20	0:0	2	->
water	160:22	0:0	2	entry
op	160:27	0:0	2	]
op	160:28	0:0	2	.
water	160:29	0:0	2	samples_in_chunk
op	160:46	0:0	2	=
water	160:48	0:0	2	samples_in_chunk
water	160:64	0:0	2	;
water	161:4	0:0	2	trk
op	161:7	0:0	2	->
water	161:9	0:0	2	cluster
op	161:16	0:0	2	[
water	161:17	0:0	2	trk
op	161:20	0:0	2	->
water	161:22	0:0	2	entry
op	161:27	0:0	2	]
op	161:28	0:0	2	.
water	161:29	0:0	2	chunkNum
op	161:46	0:0	2	=
water	161:48	0:0	2	0
water	161:49	0:0	2	;
water	162:4	0:0	2	trk
op	162:7	0:0	2	->
water	162:9	0:0	2	cluster
op	162:16	0:0	2	[
water	162:17	0:0	2	trk
op	162:20	0:0	2	->
water	162:22	0:0	2	entry
op	162:27	0:0	2	]
op	162:28	0:0	2	.
water	162:29	0:0	2	size
op	162:46	0:0	2	=
water	162:48	0:0	2	size
water	162:52	0:0	2	;
water	163:4	0:0	2	trk
op	163:7	0:0	2	->
water	163:9	0:0	2	cluster
op	163:16	0:0	2	[
water	163:17	0:0	2	trk
op	163:20	0:0	2	->
water	163:22	0:0	2	entry
op	163:27	0:0	2	]
op	163:28	0:0	2	.
water	163:29	0:0	2	entries
op	163:46	0:0	2	=
water	163:48	0:0	2	samples_in_chunk
water	163:64	0:0	2	;
water	164:4	0:0	2	trk
op	164:7	0:0	2	->
water	164:9	0:0	2	cluster
op	164:16	0:0	2	[
water	164:17	0:0	2	trk
op	164:20	0:0	2	->
water	164:22	0:0	2	entry
op	164:27	0:0	2	]
op	164:28	0:0	2	.
water	164:29	0:0	2	dts
op	164:46	0:0	2	=
water	164:48	0:0	2	pkt
op	164:51	0:0	2	->
water	164:53	0:0	2	dts
water	164:56	0:0	2	;
if	165:4	188:4	2	(! trk -> entry && trk -> start_dts != AV_NOPTS_VALUE)
cond	165:8	165:41	3	! trk -> entry && trk -> start_dts != AV_NOPTS_VALUE
op	165:8	0:0	4	!
water	165:9	0:0	4	trk
op	165:12	0:0	4	->
water	165:14	0:0	4	entry
op	165:20	0:0	4	&&
water	165:23	0:0	4	trk
op	165:26	0:0	4	->
water	165:28	0:0	4	start_dts
op	165:38	0:0	4	!=
water	165:41	0:0	4	AV_NOPTS_VALUE
stmts	165:57	188:4	3	
water	165:57	0:0	4	{
if	166:8	180:8	4	(! trk -> frag_discont)
cond	166:12	166:18	5	! trk -> frag_discont
op	166:12	0:0	6	!
water	166:13	0:0	6	trk
op	166:16	0:0	6	->
water	166:18	0:0	6	frag_discont
stmts	166:32	180:8	5	
water	166:32	0:0	6	{
water	171:12	0:0	6	trk
op	171:15	0:0	6	->
water	171:17	0:0	6	cluster
op	171:24	0:0	6	[
water	171:25	0:0	6	trk
op	171:28	0:0	6	->
water	171:30	0:0	6	entry
op	171:35	0:0	6	]
op	171:36	0:0	6	.
water	171:37	0:0	6	dts
op	171:41	0:0	6	=
water	171:43	0:0	6	trk
op	171:46	0:0	6	->
water	171:48	0:0	6	start_dts
op	171:58	0:0	6	+
water	171:60	0:0	6	trk
op	171:63	0:0	6	->
water	171:65	0:0	6	track_duration
water	171:79	0:0	6	;
if	177:12	179:81	6	(( mov -> flags & FF_MOV_FLAG_DASH && ! ( mov -> flags & FF_MOV_FLAG_GLOBAL_SIDX ) ) || mov -> mode == MODE_ISM)
cond	177:16	178:29	7	( mov -> flags & FF_MOV_FLAG_DASH && ! ( mov -> flags & FF_MOV_FLAG_GLOBAL_SIDX ) ) || mov -> mode == MODE_ISM
water	177:16	0:0	8	(
water	177:17	0:0	8	mov
op	177:20	0:0	8	->
water	177:22	0:0	8	flags
op	177:28	0:0	8	&
water	177:30	0:0	8	FF_MOV_FLAG_DASH
op	177:47	0:0	8	&&
op	177:50	0:0	8	!
water	177:51	0:0	8	(
water	177:52	0:0	8	mov
op	177:55	0:0	8	->
water	177:57	0:0	8	flags
op	177:63	0:0	8	&
water	177:65	0:0	8	FF_MOV_FLAG_GLOBAL_SIDX
water	177:88	0:0	8	)
water	177:89	0:0	8	)
op	177:91	0:0	8	||
water	178:16	0:0	8	mov
op	178:19	0:0	8	->
water	178:21	0:0	8	mode
op	178:26	0:0	8	==
water	178:29	0:0	8	MODE_ISM
stmts	179:16	179:81	7	
water	179:16	0:0	8	pkt
op	179:19	0:0	8	->
water	179:21	0:0	8	pts
op	179:25	0:0	8	=
water	179:27	0:0	8	pkt
op	179:30	0:0	8	->
water	179:32	0:0	8	dts
op	179:36	0:0	8	+
water	179:38	0:0	8	trk
op	179:41	0:0	8	->
water	179:43	0:0	8	end_pts
op	179:51	0:0	8	-
water	179:53	0:0	8	trk
op	179:56	0:0	8	->
water	179:58	0:0	8	cluster
op	179:65	0:0	8	[
water	179:66	0:0	8	trk
op	179:69	0:0	8	->
water	179:71	0:0	8	entry
op	179:76	0:0	8	]
op	179:77	0:0	8	.
water	179:78	0:0	8	dts
water	179:81	0:0	8	;
water	180:8	0:0	6	}
else	180:10	187:8	4
stmts	180:15	187:8	5	
water	180:15	0:0	6	{
water	184:12	0:0	6	trk
op	184:15	0:0	6	->
water	184:17	0:0	6	frag_start
op	184:28	0:0	6	=
water	184:30	0:0	6	pkt
op	184:33	0:0	6	->
water	184:35	0:0	6	dts
op	184:39	0:0	6	-
water	184:41	0:0	6	trk
op	184:44	0:0	6	->
water	184:46	0:0	6	start_dts
water	184:55	0:0	6	;
water	185:12	0:0	6	trk
op	185:15	0:0	6	->
water	185:17	0:0	6	end_pts
op	185:25	0:0	6	=
water	185:27	0:0	6	AV_NOPTS_VALUE
water	185:41	0:0	6	;
water	186:12	0:0	6	trk
op	186:15	0:0	6	->
water	186:17	0:0	6	frag_discont
op	186:30	0:0	6	=
water	186:32	0:0	6	0
water	186:33	0:0	6	;
water	187:8	0:0	6	}
water	188:4	0:0	4	}
if	190:4	198:4	2	(! trk -> entry && trk -> start_dts == AV_NOPTS_VALUE && ! mov -> use_editlist && s -> avoid_negative_ts == AVFMT_AVOID_NEG_TS_MAKE_ZERO)
cond	190:8	191:32	3	! trk -> entry && trk -> start_dts == AV_NOPTS_VALUE && ! mov -> use_editlist && s -> avoid_negative_ts == AVFMT_AVOID_NEG_TS_MAKE_ZERO
op	190:8	0:0	4	!
water	190:9	0:0	4	trk
op	190:12	0:0	4	->
water	190:14	0:0	4	entry
op	190:20	0:0	4	&&
water	190:23	0:0	4	trk
op	190:26	0:0	4	->
water	190:28	0:0	4	start_dts
op	190:38	0:0	4	==
water	190:41	0:0	4	AV_NOPTS_VALUE
op	190:56	0:0	4	&&
op	190:59	0:0	4	!
water	190:60	0:0	4	mov
op	190:63	0:0	4	->
water	190:65	0:0	4	use_editlist
op	190:78	0:0	4	&&
water	191:8	0:0	4	s
op	191:9	0:0	4	->
water	191:11	0:0	4	avoid_negative_ts
op	191:29	0:0	4	==
water	191:32	0:0	4	AVFMT_AVOID_NEG_TS_MAKE_ZERO
stmts	191:62	198:4	3	
water	191:62	0:0	4	{
water	197:8	0:0	4	trk
op	197:11	0:0	4	->
water	197:13	0:0	4	cluster
op	197:20	0:0	4	[
water	197:21	0:0	4	trk
op	197:24	0:0	4	->
water	197:26	0:0	4	entry
op	197:31	0:0	4	]
op	197:32	0:0	4	.
water	197:33	0:0	4	dts
op	197:37	0:0	4	=
water	197:39	0:0	4	trk
op	197:42	0:0	4	->
water	197:44	0:0	4	start_dts
op	197:54	0:0	4	=
water	197:56	0:0	4	0
water	197:57	0:0	4	;
water	198:4	0:0	4	}
if	199:4	221:4	2	(trk -> start_dts == AV_NOPTS_VALUE)
cond	199:8	199:26	3	trk -> start_dts == AV_NOPTS_VALUE
water	199:8	0:0	4	trk
op	199:11	0:0	4	->
water	199:13	0:0	4	start_dts
op	199:23	0:0	4	==
water	199:26	0:0	4	AV_NOPTS_VALUE
stmts	199:42	221:4	3	
water	199:42	0:0	4	{
water	200:8	0:0	4	trk
op	200:11	0:0	4	->
water	200:13	0:0	4	start_dts
op	200:23	0:0	4	=
water	200:25	0:0	4	pkt
op	200:28	0:0	4	->
water	200:30	0:0	4	dts
water	200:33	0:0	4	;
if	201:8	215:8	4	(trk -> frag_discont)
cond	201:12	201:17	5	trk -> frag_discont
water	201:12	0:0	6	trk
op	201:15	0:0	6	->
water	201:17	0:0	6	frag_discont
stmts	201:31	215:8	5	
water	201:31	0:0	6	{
if	202:12	208:12	6	(mov -> use_editlist)
cond	202:16	202:21	7	mov -> use_editlist
water	202:16	0:0	8	mov
op	202:19	0:0	8	->
water	202:21	0:0	8	use_editlist
stmts	202:35	208:12	7	
water	202:35	0:0	8	{
water	206:16	0:0	8	trk
op	206:19	0:0	8	->
water	206:21	0:0	8	frag_start
op	206:32	0:0	8	=
water	206:34	0:0	8	pkt
op	206:37	0:0	8	->
water	206:39	0:0	8	pts
water	206:42	0:0	8	;
water	207:16	0:0	8	trk
op	207:19	0:0	8	->
water	207:21	0:0	8	start_dts
op	207:32	0:0	8	=
water	207:34	0:0	8	pkt
op	207:37	0:0	8	->
water	207:39	0:0	8	dts
op	207:43	0:0	8	-
water	207:45	0:0	8	pkt
op	207:48	0:0	8	->
water	207:50	0:0	8	pts
water	207:53	0:0	8	;
water	208:12	0:0	8	}
else	208:14	213:12	6
stmts	208:19	213:12	7	
water	208:19	0:0	8	{
water	211:16	0:0	8	trk
op	211:19	0:0	8	->
water	211:21	0:0	8	frag_start
op	211:32	0:0	8	=
water	211:34	0:0	8	pkt
op	211:37	0:0	8	->
water	211:39	0:0	8	dts
water	211:42	0:0	8	;
water	212:16	0:0	8	trk
op	212:19	0:0	8	->
water	212:21	0:0	8	start_dts
op	212:32	0:0	8	=
water	212:34	0:0	8	0
water	212:35	0:0	8	;
water	213:12	0:0	8	}
water	214:12	0:0	6	trk
op	214:15	0:0	6	->
water	214:17	0:0	6	frag_discont
op	214:30	0:0	6	=
water	214:32	0:0	6	0
water	214:33	0:0	6	;
water	215:8	0:0	6	}
else	215:10	220:47	4
stmts	215:15	220:47	5	
if	215:15	220:47	6	(pkt -> dts && mov -> moov_written)
cond	215:19	215:36	7	pkt -> dts && mov -> moov_written
water	215:19	0:0	8	pkt
op	215:22	0:0	8	->
water	215:24	0:0	8	dts
op	215:28	0:0	8	&&
water	215:31	0:0	8	mov
op	215:34	0:0	8	->
water	215:36	0:0	8	moov_written
stmts	216:12	220:47	7	
call	216:12	220:46	8	av_log
arg	216:19	216:20	9	s
water	216:19	0:0	10	s
arg	216:22	216:36	9	AV_LOG_WARNING
water	216:22	0:0	10	AV_LOG_WARNING
arg	217:19	219:33	9	"Track %d starts with a nonzero dts %"PRId64", while the moov ""already has been written. Set the delay_moov flag to handle ""this case.\n"
water	217:19	0:0	10	"Track %d starts with a nonzero dts %"
water	217:57	0:0	10	PRId64
water	217:63	0:0	10	", while the moov "
water	218:19	0:0	10	"already has been written. Set the delay_moov flag to handle "
water	219:19	0:0	10	"this case.\n"
arg	220:19	220:36	9	pkt->stream_index
water	220:19	0:0	10	pkt
op	220:22	0:0	10	->
water	220:24	0:0	10	stream_index
arg	220:38	220:46	9	pkt->dts
water	220:38	0:0	10	pkt
op	220:41	0:0	10	->
water	220:43	0:0	10	dts
water	220:47	0:0	8	;
water	221:4	0:0	4	}
water	222:4	0:0	2	trk
op	222:7	0:0	2	->
water	222:9	0:0	2	track_duration
op	222:24	0:0	2	=
water	222:26	0:0	2	pkt
op	222:29	0:0	2	->
water	222:31	0:0	2	dts
op	222:35	0:0	2	-
water	222:37	0:0	2	trk
op	222:40	0:0	2	->
water	222:42	0:0	2	start_dts
op	222:52	0:0	2	+
water	222:54	0:0	2	pkt
op	222:57	0:0	2	->
water	222:59	0:0	2	duration
water	222:67	0:0	2	;
water	223:4	0:0	2	trk
op	223:7	0:0	2	->
water	223:9	0:0	2	last_sample_is_subtitle_end
op	223:37	0:0	2	=
water	223:39	0:0	2	0
water	223:40	0:0	2	;
if	225:4	228:4	2	(pkt -> pts == AV_NOPTS_VALUE)
cond	225:8	225:20	3	pkt -> pts == AV_NOPTS_VALUE
water	225:8	0:0	4	pkt
op	225:11	0:0	4	->
water	225:13	0:0	4	pts
op	225:17	0:0	4	==
water	225:20	0:0	4	AV_NOPTS_VALUE
stmts	225:36	228:4	3	
water	225:36	0:0	4	{
call	226:8	226:54	4	av_log
arg	226:15	226:16	5	s
water	226:15	0:0	6	s
arg	226:18	226:32	5	AV_LOG_WARNING
water	226:18	0:0	6	AV_LOG_WARNING
arg	226:34	226:54	5	"pts has no value\n"
water	226:34	0:0	6	"pts has no value\n"
water	226:55	0:0	4	;
water	227:8	0:0	4	pkt
op	227:11	0:0	4	->
water	227:13	0:0	4	pts
op	227:17	0:0	4	=
water	227:19	0:0	4	pkt
op	227:22	0:0	4	->
water	227:24	0:0	4	dts
water	227:27	0:0	4	;
water	228:4	0:0	4	}
if	229:4	230:36	2	(pkt -> dts != pkt -> pts)
cond	229:8	229:25	3	pkt -> dts != pkt -> pts
water	229:8	0:0	4	pkt
op	229:11	0:0	4	->
water	229:13	0:0	4	dts
op	229:17	0:0	4	!=
water	229:20	0:0	4	pkt
op	229:23	0:0	4	->
water	229:25	0:0	4	pts
stmts	230:8	230:36	3	
water	230:8	0:0	4	trk
op	230:11	0:0	4	->
water	230:13	0:0	4	flags
op	230:19	0:0	4	|=
water	230:22	0:0	4	MOV_TRACK_CTTS
water	230:36	0:0	4	;
water	231:4	0:0	2	trk
op	231:7	0:0	2	->
water	231:9	0:0	2	cluster
op	231:16	0:0	2	[
water	231:17	0:0	2	trk
op	231:20	0:0	2	->
water	231:22	0:0	2	entry
op	231:27	0:0	2	]
op	231:28	0:0	2	.
water	231:29	0:0	2	cts
op	231:35	0:0	2	=
water	231:37	0:0	2	pkt
op	231:40	0:0	2	->
water	231:42	0:0	2	pts
op	231:46	0:0	2	-
water	231:48	0:0	2	pkt
op	231:51	0:0	2	->
water	231:53	0:0	2	dts
water	231:56	0:0	2	;
water	232:4	0:0	2	trk
op	232:7	0:0	2	->
water	232:9	0:0	2	cluster
op	232:16	0:0	2	[
water	232:17	0:0	2	trk
op	232:20	0:0	2	->
water	232:22	0:0	2	entry
op	232:27	0:0	2	]
op	232:28	0:0	2	.
water	232:29	0:0	2	flags
op	232:35	0:0	2	=
water	232:37	0:0	2	0
water	232:38	0:0	2	;
if	233:4	234:44	2	(trk -> start_cts == AV_NOPTS_VALUE)
cond	233:8	233:26	3	trk -> start_cts == AV_NOPTS_VALUE
water	233:8	0:0	4	trk
op	233:11	0:0	4	->
water	233:13	0:0	4	start_cts
op	233:23	0:0	4	==
water	233:26	0:0	4	AV_NOPTS_VALUE
stmts	234:8	234:44	3	
water	234:8	0:0	4	trk
op	234:11	0:0	4	->
water	234:13	0:0	4	start_cts
op	234:23	0:0	4	=
water	234:25	0:0	4	pkt
op	234:28	0:0	4	->
water	234:30	0:0	4	pts
op	234:34	0:0	4	-
water	234:36	0:0	4	pkt
op	234:39	0:0	4	->
water	234:41	0:0	4	dts
water	234:44	0:0	4	;
if	235:4	237:67	2	(trk -> end_pts == AV_NOPTS_VALUE)
cond	235:8	235:24	3	trk -> end_pts == AV_NOPTS_VALUE
water	235:8	0:0	4	trk
op	235:11	0:0	4	->
water	235:13	0:0	4	end_pts
op	235:21	0:0	4	==
water	235:24	0:0	4	AV_NOPTS_VALUE
stmts	236:8	237:67	3	
water	236:8	0:0	4	trk
op	236:11	0:0	4	->
water	236:13	0:0	4	end_pts
op	236:21	0:0	4	=
water	236:23	0:0	4	trk
op	236:26	0:0	4	->
water	236:28	0:0	4	cluster
op	236:35	0:0	4	[
water	236:36	0:0	4	trk
op	236:39	0:0	4	->
water	236:41	0:0	4	entry
op	236:46	0:0	4	]
op	236:47	0:0	4	.
water	236:48	0:0	4	dts
op	236:52	0:0	4	+
water	237:23	0:0	4	trk
op	237:26	0:0	4	->
water	237:28	0:0	4	cluster
op	237:35	0:0	4	[
water	237:36	0:0	4	trk
op	237:39	0:0	4	->
water	237:41	0:0	4	entry
op	237:46	0:0	4	]
op	237:47	0:0	4	.
water	237:48	0:0	4	cts
op	237:52	0:0	4	+
water	237:54	0:0	4	pkt
op	237:57	0:0	4	->
water	237:59	0:0	4	duration
water	237:67	0:0	4	;
else	238:4	241:57	2
stmts	239:8	241:57	3	
water	239:8	0:0	4	trk
op	239:11	0:0	4	->
water	239:13	0:0	4	end_pts
op	239:21	0:0	4	=
call	239:23	241:56	4	FFMAX
arg	239:29	239:41	5	trk->end_pts
water	239:29	0:0	6	trk
op	239:32	0:0	6	->
water	239:34	0:0	6	end_pts
arg	239:43	241:56	5	trk->cluster[trk->entry].dts+trk->cluster[trk->entry].cts+pkt->duration
water	239:43	0:0	6	trk
op	239:46	0:0	6	->
water	239:48	0:0	6	cluster
op	239:55	0:0	6	[
water	239:56	0:0	6	trk
op	239:59	0:0	6	->
water	239:61	0:0	6	entry
op	239:66	0:0	6	]
op	239:67	0:0	6	.
water	239:68	0:0	6	dts
op	239:72	0:0	6	+
water	240:43	0:0	6	trk
op	240:46	0:0	6	->
water	240:48	0:0	6	cluster
op	240:55	0:0	6	[
water	240:56	0:0	6	trk
op	240:59	0:0	6	->
water	240:61	0:0	6	entry
op	240:66	0:0	6	]
op	240:67	0:0	6	.
water	240:68	0:0	6	cts
op	240:72	0:0	6	+
water	241:43	0:0	6	pkt
op	241:46	0:0	6	->
water	241:48	0:0	6	duration
water	241:57	0:0	4	;
if	243:4	245:4	2	(par -> codec_id == AV_CODEC_ID_VC1)
cond	243:8	243:25	3	par -> codec_id == AV_CODEC_ID_VC1
water	243:8	0:0	4	par
op	243:11	0:0	4	->
water	243:13	0:0	4	codec_id
op	243:22	0:0	4	==
water	243:25	0:0	4	AV_CODEC_ID_VC1
stmts	243:42	245:4	3	
water	243:42	0:0	4	{
call	244:8	244:36	4	mov_parse_vc1_frame
arg	244:28	244:31	5	pkt
water	244:28	0:0	6	pkt
arg	244:33	244:36	5	trk
water	244:33	0:0	6	trk
water	244:37	0:0	4	;
water	245:4	0:0	4	}
else	245:6	256:4	2
stmts	245:11	256:4	3	
if	245:11	256:4	4	(pkt -> flags & AV_PKT_FLAG_KEY)
cond	245:15	245:28	5	pkt -> flags & AV_PKT_FLAG_KEY
water	245:15	0:0	6	pkt
op	245:18	0:0	6	->
water	245:20	0:0	6	flags
op	245:26	0:0	6	&
water	245:28	0:0	6	AV_PKT_FLAG_KEY
stmts	245:45	256:4	5	
water	245:45	0:0	6	{
if	246:8	251:8	6	(mov -> mode == MODE_MOV && par -> codec_id == AV_CODEC_ID_MPEG2VIDEO && trk -> entry > 0)
cond	246:12	247:25	7	mov -> mode == MODE_MOV && par -> codec_id == AV_CODEC_ID_MPEG2VIDEO && trk -> entry > 0
water	246:12	0:0	8	mov
op	246:15	0:0	8	->
water	246:17	0:0	8	mode
op	246:22	0:0	8	==
water	246:25	0:0	8	MODE_MOV
op	246:34	0:0	8	&&
water	246:37	0:0	8	par
op	246:40	0:0	8	->
water	246:42	0:0	8	codec_id
op	246:51	0:0	8	==
water	246:54	0:0	8	AV_CODEC_ID_MPEG2VIDEO
op	246:77	0:0	8	&&
water	247:12	0:0	8	trk
op	247:15	0:0	8	->
water	247:17	0:0	8	entry
op	247:23	0:0	8	>
water	247:25	0:0	8	0
stmts	247:28	251:8	7	
water	247:28	0:0	8	{
call	248:12	248:70	8	mov_parse_mpeg2_frame
arg	248:34	248:37	9	pkt
water	248:34	0:0	10	pkt
arg	248:39	248:70	9	&trk->cluster[trk->entry].flags
op	248:39	0:0	10	&
water	248:40	0:0	10	trk
op	248:43	0:0	10	->
water	248:45	0:0	10	cluster
op	248:52	0:0	10	[
water	248:53	0:0	10	trk
op	248:56	0:0	10	->
water	248:58	0:0	10	entry
op	248:63	0:0	10	]
op	248:64	0:0	10	.
water	248:65	0:0	10	flags
water	248:71	0:0	8	;
if	249:12	250:44	8	(trk -> cluster [ trk -> entry ] . flags & MOV_PARTIAL_SYNC_SAMPLE)
cond	249:16	249:49	9	trk -> cluster [ trk -> entry ] . flags & MOV_PARTIAL_SYNC_SAMPLE
water	249:16	0:0	10	trk
op	249:19	0:0	10	->
water	249:21	0:0	10	cluster
op	249:28	0:0	10	[
water	249:29	0:0	10	trk
op	249:32	0:0	10	->
water	249:34	0:0	10	entry
op	249:39	0:0	10	]
op	249:40	0:0	10	.
water	249:41	0:0	10	flags
op	249:47	0:0	10	&
water	249:49	0:0	10	MOV_PARTIAL_SYNC_SAMPLE
stmts	250:16	250:44	9	
water	250:16	0:0	10	trk
op	250:19	0:0	10	->
water	250:21	0:0	10	flags
op	250:27	0:0	10	|=
water	250:30	0:0	10	MOV_TRACK_STPS
water	250:44	0:0	10	;
water	251:8	0:0	8	}
else	251:10	253:8	6
stmts	251:15	253:8	7	
water	251:15	0:0	8	{
water	252:12	0:0	8	trk
op	252:15	0:0	8	->
water	252:17	0:0	8	cluster
op	252:24	0:0	8	[
water	252:25	0:0	8	trk
op	252:28	0:0	8	->
water	252:30	0:0	8	entry
op	252:35	0:0	8	]
op	252:36	0:0	8	.
water	252:37	0:0	8	flags
op	252:43	0:0	8	=
water	252:45	0:0	8	MOV_SYNC_SAMPLE
water	252:60	0:0	8	;
water	253:8	0:0	8	}
if	254:8	255:32	6	(trk -> cluster [ trk -> entry ] . flags & MOV_SYNC_SAMPLE)
cond	254:12	254:45	7	trk -> cluster [ trk -> entry ] . flags & MOV_SYNC_SAMPLE
water	254:12	0:0	8	trk
op	254:15	0:0	8	->
water	254:17	0:0	8	cluster
op	254:24	0:0	8	[
water	254:25	0:0	8	trk
op	254:28	0:0	8	->
water	254:30	0:0	8	entry
op	254:35	0:0	8	]
op	254:36	0:0	8	.
water	254:37	0:0	8	flags
op	254:43	0:0	8	&
water	254:45	0:0	8	MOV_SYNC_SAMPLE
stmts	255:12	255:32	7	
water	255:12	0:0	8	trk
op	255:15	0:0	8	->
water	255:17	0:0	8	has_keyframes
op	255:30	0:0	8	++
water	255:32	0:0	8	;
water	256:4	0:0	6	}
if	257:4	260:4	2	(pkt -> flags & AV_PKT_FLAG_DISPOSABLE)
cond	257:8	257:21	3	pkt -> flags & AV_PKT_FLAG_DISPOSABLE
water	257:8	0:0	4	pkt
op	257:11	0:0	4	->
water	257:13	0:0	4	flags
op	257:19	0:0	4	&
water	257:21	0:0	4	AV_PKT_FLAG_DISPOSABLE
stmts	257:45	260:4	3	
water	257:45	0:0	4	{
water	258:8	0:0	4	trk
op	258:11	0:0	4	->
water	258:13	0:0	4	cluster
op	258:20	0:0	4	[
water	258:21	0:0	4	trk
op	258:24	0:0	4	->
water	258:26	0:0	4	entry
op	258:31	0:0	4	]
op	258:32	0:0	4	.
water	258:33	0:0	4	flags
op	258:39	0:0	4	|=
water	258:42	0:0	4	MOV_DISPOSABLE_SAMPLE
water	258:63	0:0	4	;
water	259:8	0:0	4	trk
op	259:11	0:0	4	->
water	259:13	0:0	4	has_disposable
op	259:27	0:0	4	++
water	259:29	0:0	4	;
water	260:4	0:0	4	}
water	261:4	0:0	2	trk
op	261:7	0:0	2	->
water	261:9	0:0	2	entry
op	261:14	0:0	2	++
water	261:16	0:0	2	;
water	262:4	0:0	2	trk
op	262:7	0:0	2	->
water	262:9	0:0	2	sample_count
op	262:22	0:0	2	+=
water	262:25	0:0	2	samples_in_chunk
water	262:41	0:0	2	;
water	263:4	0:0	2	mov
op	263:7	0:0	2	->
water	263:9	0:0	2	mdat_size
op	263:22	0:0	2	+=
water	263:25	0:0	2	size
water	263:29	0:0	2	;
if	265:4	267:56	2	(trk -> hint_track >= 0 && trk -> hint_track < mov -> nb_streams)
cond	265:8	265:55	3	trk -> hint_track >= 0 && trk -> hint_track < mov -> nb_streams
water	265:8	0:0	4	trk
op	265:11	0:0	4	->
water	265:13	0:0	4	hint_track
op	265:24	0:0	4	>=
water	265:27	0:0	4	0
op	265:29	0:0	4	&&
water	265:32	0:0	4	trk
op	265:35	0:0	4	->
water	265:37	0:0	4	hint_track
op	265:48	0:0	4	<
water	265:50	0:0	4	mov
op	265:53	0:0	4	->
water	265:55	0:0	4	nb_streams
stmts	266:8	267:56	3	
call	266:8	267:55	4	ff_mov_add_hinted_packet
arg	266:33	266:34	5	s
water	266:33	0:0	6	s
arg	266:36	266:39	5	pkt
water	266:36	0:0	6	pkt
arg	266:41	266:56	5	trk->hint_track
water	266:41	0:0	6	trk
op	266:44	0:0	6	->
water	266:46	0:0	6	hint_track
arg	266:58	266:68	5	trk->entry
water	266:58	0:0	6	trk
op	266:61	0:0	6	->
water	266:63	0:0	6	entry
arg	267:33	267:49	5	reformatted_data
water	267:33	0:0	6	reformatted_data
arg	267:51	267:55	5	size
water	267:51	0:0	6	size
water	267:56	0:0	4	;
label	269:0	269:3	2	end :
label	270:0	270:3	2	err :
call	272:4	272:28	2	av_free
arg	272:12	272:28	3	reformatted_data
water	272:12	0:0	4	reformatted_data
water	272:29	0:0	2	;
return	273:4	273:14	2	ret
water	273:11	0:0	3	ret
