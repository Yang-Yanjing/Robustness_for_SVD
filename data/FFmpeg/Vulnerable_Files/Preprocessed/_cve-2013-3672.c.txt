func	6:0	52:0	0	static int	mm_decode_inter
params	6:26	0:0	1	
param	6:27	6:40	2	MmContext *	s
param	6:42	6:56	2	int	half_horiz
param	6:58	6:71	2	int	half_vert
stmnts	0:0	51:12	1	
decl	8:4	8:54	2	int	data_off
op	8:17	0:0	2	=
call	8:19	8:46	3	bytestream2_get_le16
arg	8:40	8:46	4	&s->gb
op	8:40	0:0	5	&
water	8:41	0:0	5	s
op	8:42	0:0	5	->
water	8:44	0:0	5	gb
water	8:47	0:0	2	,
decl	8:4	8:54	2	int	y
op	8:51	0:0	2	=
water	8:53	0:0	2	0
decl	9:4	9:27	2	GetByteContext	data_ptr
if	11:4	12:34	2	(bytestream2_get_bytes_left (& s -> gb ) < data_off)
cond	11:8	11:45	3	bytestream2_get_bytes_left (& s -> gb ) < data_off
call	11:8	11:41	4	bytestream2_get_bytes_left
arg	11:35	11:41	5	&s->gb
op	11:35	0:0	6	&
water	11:36	0:0	6	s
op	11:37	0:0	6	->
water	11:39	0:0	6	gb
op	11:43	0:0	4	<
water	11:45	0:0	4	data_off
stmts	12:8	12:34	3	
return	12:8	12:34	4	AVERROR_INVALIDDATA
water	12:15	0:0	5	AVERROR_INVALIDDATA
call	14:4	14:102	2	bytestream2_init
arg	14:21	14:30	3	&data_ptr
op	14:21	0:0	4	&
water	14:22	0:0	4	data_ptr
arg	14:32	14:55	3	s->gb.buffer+data_off
water	14:32	0:0	4	s
op	14:33	0:0	4	->
water	14:35	0:0	4	gb
op	14:37	0:0	4	.
water	14:38	0:0	4	buffer
op	14:45	0:0	4	+
water	14:47	0:0	4	data_off
arg	14:57	14:102	3	bytestream2_get_bytes_left(&s->gb)-data_off
call	14:57	14:90	4	bytestream2_get_bytes_left
arg	14:84	14:90	5	&s->gb
op	14:84	0:0	6	&
water	14:85	0:0	6	s
op	14:86	0:0	6	->
water	14:88	0:0	6	gb
op	14:92	0:0	4	-
water	14:94	0:0	4	data_off
water	14:103	0:0	2	;
while	15:4	49:4	2	(s -> gb . buffer < data_ptr . buffer_start)
cond	15:11	15:35	3	s -> gb . buffer < data_ptr . buffer_start
water	15:11	0:0	4	s
op	15:12	0:0	4	->
water	15:14	0:0	4	gb
op	15:16	0:0	4	.
water	15:17	0:0	4	buffer
op	15:24	0:0	4	<
water	15:26	0:0	4	data_ptr
op	15:34	0:0	4	.
water	15:35	0:0	4	buffer_start
stmts	15:49	49:4	3	
water	15:49	0:0	4	{
decl	16:8	16:16	4	int	i
water	16:13	0:0	4	,
decl	16:8	16:16	4	int	j
decl	17:8	17:49	4	int	length
op	17:19	0:0	4	=
call	17:21	17:48	5	bytestream2_get_byte
arg	17:42	17:48	6	&s->gb
op	17:42	0:0	7	&
water	17:43	0:0	7	s
op	17:44	0:0	7	->
water	17:46	0:0	7	gb
decl	18:8	18:69	4	int	x
op	18:14	0:0	4	=
call	18:16	18:43	5	bytestream2_get_byte
arg	18:37	18:43	6	&s->gb
op	18:37	0:0	7	&
water	18:38	0:0	7	s
op	18:39	0:0	7	->
water	18:41	0:0	7	gb
op	18:45	0:0	4	+
water	18:47	0:0	4	(
water	18:48	0:0	4	(
water	18:49	0:0	4	length
op	18:56	0:0	4	&
water	18:58	0:0	4	0
water	18:59	0:0	4	x80
water	18:62	0:0	4	)
op	18:64	0:0	4	<<
water	18:67	0:0	4	1
water	18:68	0:0	4	)
water	19:8	0:0	4	length
op	19:15	0:0	4	&=
water	19:18	0:0	4	0
water	19:19	0:0	4	x7F
water	19:22	0:0	4	;
if	21:8	24:8	4	(length == 0)
cond	21:12	21:20	5	length == 0
water	21:12	0:0	6	length
op	21:18	0:0	6	==
water	21:20	0:0	6	0
stmts	21:23	24:8	5	
water	21:23	0:0	6	{
water	22:12	0:0	6	y
op	22:14	0:0	6	+=
water	22:17	0:0	6	x
water	22:18	0:0	6	;
continue	23:12	23:20	6	
water	24:8	0:0	6	}
if	26:8	27:20	4	(y + half_vert >= s -> avctx -> height)
cond	26:12	26:39	5	y + half_vert >= s -> avctx -> height
water	26:12	0:0	6	y
op	26:14	0:0	6	+
water	26:16	0:0	6	half_vert
op	26:26	0:0	6	>=
water	26:29	0:0	6	s
op	26:30	0:0	6	->
water	26:32	0:0	6	avctx
op	26:37	0:0	6	->
water	26:39	0:0	6	height
stmts	27:12	27:20	5	
return	27:12	27:20	6	0
water	27:19	0:0	7	0
for	29:8	46:8	4	(i = 0 ;i < length;i ++)
forinit	29:12	29:15	5	i = 0 ;
water	29:12	0:0	6	i
op	29:13	0:0	6	=
water	29:14	0:0	6	0
water	29:15	0:0	6	;
cond	29:17	29:19	5	i < length
water	29:17	0:0	6	i
op	29:18	0:0	6	<
water	29:19	0:0	6	length
forexpr	29:27	29:28	5	i ++
water	29:27	0:0	6	i
op	29:28	0:0	6	++
stmts	29:32	46:8	5	
water	29:32	0:0	6	{
decl	30:12	30:60	6	int	replace_array
op	30:30	0:0	6	=
call	30:32	30:59	7	bytestream2_get_byte
arg	30:53	30:59	8	&s->gb
op	30:53	0:0	9	&
water	30:54	0:0	9	s
op	30:55	0:0	9	->
water	30:57	0:0	9	gb
for	31:12	45:12	6	(j = 0 ;j < 8;j ++)
forinit	31:16	31:19	7	j = 0 ;
water	31:16	0:0	8	j
op	31:17	0:0	8	=
water	31:18	0:0	8	0
water	31:19	0:0	8	;
cond	31:21	31:23	7	j < 8
water	31:21	0:0	8	j
op	31:22	0:0	8	<
water	31:23	0:0	8	8
forexpr	31:26	31:27	7	j ++
water	31:26	0:0	8	j
op	31:27	0:0	8	++
stmts	31:31	45:12	7	
water	31:31	0:0	8	{
decl	32:16	32:58	8	int	replace
op	32:28	0:0	8	=
water	32:30	0:0	8	(
water	32:31	0:0	8	replace_array
op	32:45	0:0	8	>>
water	32:48	0:0	8	(
water	32:49	0:0	8	7
op	32:50	0:0	8	-
water	32:51	0:0	8	j
water	32:52	0:0	8	)
water	32:53	0:0	8	)
op	32:55	0:0	8	&
water	32:57	0:0	8	1
if	33:16	43:16	8	(replace)
cond	33:20	33:20	9	replace
water	33:20	0:0	10	replace
stmts	33:29	43:16	9	
water	33:29	0:0	10	{
decl	34:20	34:63	10	int	color
op	34:30	0:0	10	=
call	34:32	34:62	11	bytestream2_get_byte
arg	34:53	34:62	12	&data_ptr
op	34:53	0:0	13	&
water	34:54	0:0	13	data_ptr
water	35:20	0:0	10	s
op	35:21	0:0	10	->
water	35:23	0:0	10	frame
op	35:28	0:0	10	.
water	35:29	0:0	10	data
op	35:33	0:0	10	[
water	35:34	0:0	10	0
op	35:35	0:0	10	]
op	35:36	0:0	10	[
water	35:37	0:0	10	y
op	35:38	0:0	10	*
water	35:39	0:0	10	s
op	35:40	0:0	10	->
water	35:42	0:0	10	frame
op	35:47	0:0	10	.
water	35:48	0:0	10	linesize
op	35:56	0:0	10	[
water	35:57	0:0	10	0
op	35:58	0:0	10	]
op	35:60	0:0	10	+
water	35:62	0:0	10	x
op	35:63	0:0	10	]
op	35:65	0:0	10	=
water	35:67	0:0	10	color
water	35:72	0:0	10	;
if	36:20	37:80	10	(half_horiz)
cond	36:24	36:24	11	half_horiz
water	36:24	0:0	12	half_horiz
stmts	37:24	37:80	11	
water	37:24	0:0	12	s
op	37:25	0:0	12	->
water	37:27	0:0	12	frame
op	37:32	0:0	12	.
water	37:33	0:0	12	data
op	37:37	0:0	12	[
water	37:38	0:0	12	0
op	37:39	0:0	12	]
op	37:40	0:0	12	[
water	37:41	0:0	12	y
op	37:42	0:0	12	*
water	37:43	0:0	12	s
op	37:44	0:0	12	->
water	37:46	0:0	12	frame
op	37:51	0:0	12	.
water	37:52	0:0	12	linesize
op	37:60	0:0	12	[
water	37:61	0:0	12	0
op	37:62	0:0	12	]
op	37:64	0:0	12	+
water	37:66	0:0	12	x
op	37:68	0:0	12	+
water	37:70	0:0	12	1
op	37:71	0:0	12	]
op	37:73	0:0	12	=
water	37:75	0:0	12	color
water	37:80	0:0	12	;
if	38:20	42:20	10	(half_vert)
cond	38:24	38:24	11	half_vert
water	38:24	0:0	12	half_vert
stmts	38:35	42:20	11	
water	38:35	0:0	12	{
water	39:24	0:0	12	s
op	39:25	0:0	12	->
water	39:27	0:0	12	frame
op	39:32	0:0	12	.
water	39:33	0:0	12	data
op	39:37	0:0	12	[
water	39:38	0:0	12	0
op	39:39	0:0	12	]
op	39:40	0:0	12	[
water	39:41	0:0	12	(
water	39:42	0:0	12	y
op	39:43	0:0	12	+
water	39:44	0:0	12	1
water	39:45	0:0	12	)
op	39:46	0:0	12	*
water	39:47	0:0	12	s
op	39:48	0:0	12	->
water	39:50	0:0	12	frame
op	39:55	0:0	12	.
water	39:56	0:0	12	linesize
op	39:64	0:0	12	[
water	39:65	0:0	12	0
op	39:66	0:0	12	]
op	39:68	0:0	12	+
water	39:70	0:0	12	x
op	39:71	0:0	12	]
op	39:73	0:0	12	=
water	39:75	0:0	12	color
water	39:80	0:0	12	;
if	40:24	41:88	12	(half_horiz)
cond	40:28	40:28	13	half_horiz
water	40:28	0:0	14	half_horiz
stmts	41:28	41:88	13	
water	41:28	0:0	14	s
op	41:29	0:0	14	->
water	41:31	0:0	14	frame
op	41:36	0:0	14	.
water	41:37	0:0	14	data
op	41:41	0:0	14	[
water	41:42	0:0	14	0
op	41:43	0:0	14	]
op	41:44	0:0	14	[
water	41:45	0:0	14	(
water	41:46	0:0	14	y
op	41:47	0:0	14	+
water	41:48	0:0	14	1
water	41:49	0:0	14	)
op	41:50	0:0	14	*
water	41:51	0:0	14	s
op	41:52	0:0	14	->
water	41:54	0:0	14	frame
op	41:59	0:0	14	.
water	41:60	0:0	14	linesize
op	41:68	0:0	14	[
water	41:69	0:0	14	0
op	41:70	0:0	14	]
op	41:72	0:0	14	+
water	41:74	0:0	14	x
op	41:76	0:0	14	+
water	41:78	0:0	14	1
op	41:79	0:0	14	]
op	41:81	0:0	14	=
water	41:83	0:0	14	color
water	41:88	0:0	14	;
water	42:20	0:0	12	}
water	43:16	0:0	10	}
water	44:16	0:0	8	x
op	44:18	0:0	8	+=
water	44:21	0:0	8	1
op	44:23	0:0	8	+
water	44:25	0:0	8	half_horiz
water	44:35	0:0	8	;
water	45:12	0:0	8	}
water	46:8	0:0	6	}
water	48:8	0:0	4	y
op	48:10	0:0	4	+=
water	48:13	0:0	4	1
op	48:15	0:0	4	+
water	48:17	0:0	4	half_vert
water	48:26	0:0	4	;
water	49:4	0:0	4	}
return	51:4	51:12	2	0
water	51:11	0:0	3	0
