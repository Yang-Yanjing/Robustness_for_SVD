func	2:0	47:0	0	int	ff_amf_get_field_value
params	2:26	0:0	1	
param	2:27	2:46	2	const uint8_t *	data
param	2:48	2:71	2	const uint8_t *	data_end
param	3:27	3:46	2	const uint8_t *	name
param	3:48	3:60	2	uint8_t *	dst
param	3:62	3:74	2	int	dst_size
stmnts	0:0	46:13	1	
decl	5:4	5:30	2	int	namelen
op	5:16	0:0	2	=
call	5:18	5:29	3	strlen
arg	5:25	5:29	4	name
water	5:25	0:0	5	name
decl	6:4	6:11	2	int	len
while	8:4	13:4	2	(* data != AMF_DATA_TYPE_OBJECT && data < data_end)
cond	8:11	8:51	3	* data != AMF_DATA_TYPE_OBJECT && data < data_end
op	8:11	0:0	4	*
water	8:12	0:0	4	data
op	8:17	0:0	4	!=
water	8:20	0:0	4	AMF_DATA_TYPE_OBJECT
op	8:41	0:0	4	&&
water	8:44	0:0	4	data
op	8:49	0:0	4	<
water	8:51	0:0	4	data_end
stmts	8:61	13:4	3	
water	8:61	0:0	4	{
water	9:8	0:0	4	len
op	9:12	0:0	4	=
call	9:14	9:44	4	ff_amf_tag_size
arg	9:30	9:34	5	data
water	9:30	0:0	6	data
arg	9:36	9:44	5	data_end
water	9:36	0:0	6	data_end
water	9:45	0:0	4	;
if	10:8	11:33	4	(len < 0)
cond	10:12	10:18	5	len < 0
water	10:12	0:0	6	len
op	10:16	0:0	6	<
water	10:18	0:0	6	0
stmts	11:12	11:33	5	
water	11:12	0:0	6	len
op	11:16	0:0	6	=
water	11:18	0:0	6	data_end
op	11:27	0:0	6	-
water	11:29	0:0	6	data
water	11:33	0:0	6	;
water	12:8	0:0	4	data
op	12:13	0:0	4	+=
water	12:16	0:0	4	len
water	12:19	0:0	4	;
water	13:4	0:0	4	}
if	14:4	15:17	2	(data_end - data < 3)
cond	14:8	14:26	3	data_end - data < 3
water	14:8	0:0	4	data_end
op	14:17	0:0	4	-
water	14:19	0:0	4	data
op	14:24	0:0	4	<
water	14:26	0:0	4	3
stmts	15:8	15:17	3	
return	15:8	15:17	4	-1
op	15:15	0:0	5	-
water	15:16	0:0	5	1
water	16:4	0:0	2	data
op	16:8	0:0	2	++
water	16:10	0:0	2	;
for	17:4	45:4	2	(;;)
forinit	17:9	17:9	3	;
water	17:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	17:13	45:4	3	
water	17:13	0:0	4	{
decl	18:8	18:45	4	int	size
op	18:17	0:0	4	=
call	18:19	18:44	5	bytestream_get_be16
arg	18:39	18:44	6	&data
op	18:39	0:0	7	&
water	18:40	0:0	7	data
if	19:8	20:17	4	(! size)
cond	19:12	19:13	5	! size
op	19:12	0:0	6	!
water	19:13	0:0	6	size
stmts	20:12	20:17	5	
break	20:12	20:17	6	
if	21:8	22:21	4	(size < 0 || size >= data_end - data)
cond	21:12	21:43	5	size < 0 || size >= data_end - data
water	21:12	0:0	6	size
op	21:17	0:0	6	<
water	21:19	0:0	6	0
op	21:21	0:0	6	||
water	21:24	0:0	6	size
op	21:29	0:0	6	>=
water	21:32	0:0	6	data_end
op	21:41	0:0	6	-
water	21:43	0:0	6	data
stmts	22:12	22:21	5	
return	22:12	22:21	6	-1
op	22:19	0:0	7	-
water	22:20	0:0	7	1
water	23:8	0:0	4	data
op	23:13	0:0	4	+=
water	23:16	0:0	4	size
water	23:20	0:0	4	;
if	24:8	40:8	4	(size == namelen && !memcmp (data - size ,name ,namelen ))
cond	24:12	24:63	5	size == namelen && !memcmp (data - size ,name ,namelen )
water	24:12	0:0	6	size
op	24:17	0:0	6	==
water	24:20	0:0	6	namelen
op	24:28	0:0	6	&&
op	24:31	0:0	6	!
call	24:32	24:63	6	memcmp
arg	24:39	24:48	7	data-size
water	24:39	0:0	8	data
op	24:43	0:0	8	-
water	24:44	0:0	8	size
arg	24:50	24:54	7	name
water	24:50	0:0	8	name
arg	24:56	24:63	7	namelen
water	24:56	0:0	8	namelen
stmts	24:66	40:8	5	
water	24:66	0:0	6	{
switch	25:12	38:12	6	(* data ++)
cond	25:20	25:25	7	* data ++
op	25:20	0:0	8	*
water	25:21	0:0	8	data
op	25:25	0:0	8	++
stmts	25:29	38:12	7	
water	25:29	0:0	8	{
label	26:12	26:37	8	case AMF_DATA_TYPE_NUMBER :
call	27:16	27:74	8	snprintf
arg	27:25	27:28	9	dst
water	27:25	0:0	10	dst
arg	27:30	27:38	9	dst_size
water	27:30	0:0	10	dst_size
arg	27:40	27:44	9	"%g"
water	27:40	0:0	10	"%g"
arg	27:46	27:74	9	av_int2double(AV_RB64(data))
call	27:46	27:73	10	av_int2double
arg	27:60	27:73	11	AV_RB64(data)
call	27:60	27:72	12	AV_RB64
arg	27:68	27:72	13	data
water	27:68	0:0	14	data
water	27:75	0:0	8	;
break	28:16	28:21	8	
label	29:12	29:35	8	case AMF_DATA_TYPE_BOOL :
call	30:16	30:70	8	snprintf
arg	30:25	30:28	9	dst
water	30:25	0:0	10	dst
arg	30:30	30:38	9	dst_size
water	30:30	0:0	10	dst_size
arg	30:40	30:44	9	"%s"
water	30:40	0:0	10	"%s"
arg	30:46	30:70	9	*data?"true":"false"
op	30:46	0:0	10	*
water	30:47	0:0	10	data
water	30:52	0:0	10	?
water	30:54	0:0	10	"true"
water	30:61	0:0	10	:
water	30:63	0:0	10	"false"
water	30:71	0:0	8	;
break	31:16	31:21	8	
label	32:12	32:37	8	case AMF_DATA_TYPE_STRING :
water	33:16	0:0	8	len
op	33:20	0:0	8	=
call	33:22	33:47	8	bytestream_get_be16
arg	33:42	33:47	9	&data
op	33:42	0:0	10	&
water	33:43	0:0	10	data
water	33:48	0:0	8	;
call	34:16	34:60	8	av_strlcpy
arg	34:27	34:30	9	dst
water	34:27	0:0	10	dst
arg	34:32	34:36	9	data
water	34:32	0:0	10	data
arg	34:38	34:60	9	FFMIN(len+1,dst_size)
call	34:38	34:59	10	FFMIN
arg	34:44	34:49	11	len+1
water	34:44	0:0	12	len
op	34:47	0:0	12	+
water	34:48	0:0	12	1
arg	34:51	34:59	11	dst_size
water	34:51	0:0	12	dst_size
water	34:61	0:0	8	;
break	35:16	35:21	8	
label	36:12	36:19	8	default :
return	37:16	37:25	8	-1
op	37:23	0:0	9	-
water	37:24	0:0	9	1
water	38:12	0:0	8	}
return	39:12	39:20	6	0
water	39:19	0:0	7	0
water	40:8	0:0	6	}
water	41:8	0:0	4	len
op	41:12	0:0	4	=
call	41:14	41:44	4	ff_amf_tag_size
arg	41:30	41:34	5	data
water	41:30	0:0	6	data
arg	41:36	41:44	5	data_end
water	41:36	0:0	6	data_end
water	41:45	0:0	4	;
if	42:8	43:21	4	(len < 0 || len >= data_end - data)
cond	42:12	42:41	5	len < 0 || len >= data_end - data
water	42:12	0:0	6	len
op	42:16	0:0	6	<
water	42:18	0:0	6	0
op	42:20	0:0	6	||
water	42:23	0:0	6	len
op	42:27	0:0	6	>=
water	42:30	0:0	6	data_end
op	42:39	0:0	6	-
water	42:41	0:0	6	data
stmts	43:12	43:21	5	
return	43:12	43:21	6	-1
op	43:19	0:0	7	-
water	43:20	0:0	7	1
water	44:8	0:0	4	data
op	44:13	0:0	4	+=
water	44:16	0:0	4	len
water	44:19	0:0	4	;
water	45:4	0:0	4	}
return	46:4	46:13	2	-1
op	46:11	0:0	3	-
water	46:12	0:0	3	1
