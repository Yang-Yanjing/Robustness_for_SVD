func	1:0	414:0	0	int	ff_hevc_decode_nal_sps
params	1:26	0:0	1	
param	1:27	1:41	2	HEVCContext *	s
stmnts	0:0	413:14	1	
decl	3:4	3:34	2	const AVPixFmtDescriptor	*desc
decl	4:4	4:38	2	GetBitContext	*gb
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	HEVClc
op	4:34	0:0	2	->
water	4:36	0:0	2	gb
decl	5:4	5:15	2	int	ret
op	5:12	0:0	2	=
water	5:14	0:0	2	0
decl	6:4	6:27	2	unsigned int	sps_id
op	6:24	0:0	2	=
water	6:26	0:0	2	0
decl	7:4	7:46	2	int	log2_diff_max_min_transform_block_size
decl	8:4	8:68	2	int	bit_depth_chroma
water	8:24	0:0	2	,
decl	8:4	8:68	2	int	start
water	8:31	0:0	2	,
decl	8:4	8:68	2	int	vui_present
water	8:44	0:0	2	,
decl	8:4	8:68	2	int	sublayer_ordering_info
decl	9:4	9:9	2	int	i
decl	11:4	11:16	2	HEVCSPS	*sps
decl	12:4	12:57	2	AVBufferRef	*sps_buf
op	12:25	0:0	2	=
call	12:27	12:56	3	av_buffer_allocz
arg	12:44	12:56	4	sizeof(*sps)
op	12:44	0:0	5	sizeof
water	12:50	0:0	5	(
op	12:51	0:0	5	*
water	12:52	0:0	5	sps
water	12:55	0:0	5	)
if	14:4	15:30	2	(! sps_buf)
cond	14:8	14:9	3	! sps_buf
op	14:8	0:0	4	!
water	14:9	0:0	4	sps_buf
stmts	15:8	15:30	3	
return	15:8	15:30	4	AVERROR(ENOMEM)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	ENOMEM
water	15:23	0:0	7	ENOMEM
water	16:4	0:0	2	sps
op	16:8	0:0	2	=
water	16:10	0:0	2	(
water	16:11	0:0	2	HEVCSPS
op	16:18	0:0	2	*
water	16:19	0:0	2	)
water	16:20	0:0	2	sps_buf
op	16:27	0:0	2	->
water	16:29	0:0	2	data
water	16:33	0:0	2	;
call	18:4	18:51	2	av_log
arg	18:11	18:19	3	s->avctx
water	18:11	0:0	4	s
op	18:12	0:0	4	->
water	18:14	0:0	4	avctx
arg	18:21	18:33	3	AV_LOG_DEBUG
water	18:21	0:0	4	AV_LOG_DEBUG
arg	18:35	18:51	3	"Decoding SPS\n"
water	18:35	0:0	4	"Decoding SPS\n"
water	18:52	0:0	2	;
water	22:4	0:0	2	sps
op	22:7	0:0	2	->
water	22:9	0:0	2	vps_id
op	22:16	0:0	2	=
call	22:18	22:32	2	get_bits
arg	22:27	22:29	3	gb
water	22:27	0:0	4	gb
arg	22:31	22:32	3	4
water	22:31	0:0	4	4
water	22:33	0:0	2	;
if	23:4	27:4	2	(sps -> vps_id >= MAX_VPS_COUNT)
cond	23:8	23:23	3	sps -> vps_id >= MAX_VPS_COUNT
water	23:8	0:0	4	sps
op	23:11	0:0	4	->
water	23:13	0:0	4	vps_id
op	23:20	0:0	4	>=
water	23:23	0:0	4	MAX_VPS_COUNT
stmts	23:38	27:4	3	
water	23:38	0:0	4	{
call	24:8	24:79	4	av_log
arg	24:15	24:23	5	s->avctx
water	24:15	0:0	6	s
op	24:16	0:0	6	->
water	24:18	0:0	6	avctx
arg	24:25	24:37	5	AV_LOG_ERROR
water	24:25	0:0	6	AV_LOG_ERROR
arg	24:39	24:66	5	"VPS id out of range: %d\n"
water	24:39	0:0	6	"VPS id out of range: %d\n"
arg	24:68	24:79	5	sps->vps_id
water	24:68	0:0	6	sps
op	24:71	0:0	6	->
water	24:73	0:0	6	vps_id
water	24:80	0:0	4	;
water	25:8	0:0	4	ret
op	25:12	0:0	4	=
water	25:14	0:0	4	AVERROR_INVALIDDATA
water	25:33	0:0	4	;
goto	26:8	26:16	4	err
water	26:13	0:0	5	err
water	27:4	0:0	4	}
if	29:4	34:4	2	(! s -> vps_list [ sps -> vps_id ])
cond	29:8	29:32	3	! s -> vps_list [ sps -> vps_id ]
op	29:8	0:0	4	!
water	29:9	0:0	4	s
op	29:10	0:0	4	->
water	29:12	0:0	4	vps_list
op	29:20	0:0	4	[
water	29:21	0:0	4	sps
op	29:24	0:0	4	->
water	29:26	0:0	4	vps_id
op	29:32	0:0	4	]
stmts	29:35	34:4	3	
water	29:35	0:0	4	{
call	30:8	31:26	4	av_log
arg	30:15	30:23	5	s->avctx
water	30:15	0:0	6	s
op	30:16	0:0	6	->
water	30:18	0:0	6	avctx
arg	30:25	30:37	5	AV_LOG_ERROR
water	30:25	0:0	6	AV_LOG_ERROR
arg	30:39	30:64	5	"VPS %d does not exist\n"
water	30:39	0:0	6	"VPS %d does not exist\n"
arg	31:15	31:26	5	sps->vps_id
water	31:15	0:0	6	sps
op	31:18	0:0	6	->
water	31:20	0:0	6	vps_id
water	31:27	0:0	4	;
water	32:8	0:0	4	ret
op	32:12	0:0	4	=
water	32:14	0:0	4	AVERROR_INVALIDDATA
water	32:33	0:0	4	;
goto	33:8	33:16	4	err
water	33:13	0:0	5	err
water	34:4	0:0	4	}
water	36:4	0:0	2	sps
op	36:7	0:0	2	->
water	36:9	0:0	2	max_sub_layers
op	36:24	0:0	2	=
call	36:26	36:40	2	get_bits
arg	36:35	36:37	3	gb
water	36:35	0:0	4	gb
arg	36:39	36:40	3	3
water	36:39	0:0	4	3
op	36:42	0:0	2	+
water	36:44	0:0	2	1
water	36:45	0:0	2	;
if	37:4	42:4	2	(sps -> max_sub_layers > MAX_SUB_LAYERS)
cond	37:8	37:30	3	sps -> max_sub_layers > MAX_SUB_LAYERS
water	37:8	0:0	4	sps
op	37:11	0:0	4	->
water	37:13	0:0	4	max_sub_layers
op	37:28	0:0	4	>
water	37:30	0:0	4	MAX_SUB_LAYERS
stmts	37:46	42:4	3	
water	37:46	0:0	4	{
call	38:8	39:34	4	av_log
arg	38:15	38:23	5	s->avctx
water	38:15	0:0	6	s
op	38:16	0:0	6	->
water	38:18	0:0	6	avctx
arg	38:25	38:37	5	AV_LOG_ERROR
water	38:25	0:0	6	AV_LOG_ERROR
arg	38:39	38:78	5	"sps_max_sub_layers out of range: %d\n"
water	38:39	0:0	6	"sps_max_sub_layers out of range: %d\n"
arg	39:15	39:34	5	sps->max_sub_layers
water	39:15	0:0	6	sps
op	39:18	0:0	6	->
water	39:20	0:0	6	max_sub_layers
water	39:35	0:0	4	;
water	40:8	0:0	4	ret
op	40:12	0:0	4	=
water	40:14	0:0	4	AVERROR_INVALIDDATA
water	40:33	0:0	4	;
goto	41:8	41:16	4	err
water	41:13	0:0	5	err
water	42:4	0:0	4	}
call	44:4	44:17	2	skip_bits1
arg	44:15	44:17	3	gb
water	44:15	0:0	4	gb
water	44:18	0:0	2	;
call	46:4	46:47	2	parse_ptl
arg	46:14	46:15	3	s
water	46:14	0:0	4	s
arg	46:17	46:26	3	&sps->ptl
op	46:17	0:0	4	&
water	46:18	0:0	4	sps
op	46:21	0:0	4	->
water	46:23	0:0	4	ptl
arg	46:28	46:47	3	sps->max_sub_layers
water	46:28	0:0	4	sps
op	46:31	0:0	4	->
water	46:33	0:0	4	max_sub_layers
water	46:48	0:0	2	;
water	48:4	0:0	2	sps_id
op	48:11	0:0	2	=
call	48:13	48:34	2	get_ue_golomb_long
arg	48:32	48:34	3	gb
water	48:32	0:0	4	gb
water	48:35	0:0	2	;
if	49:4	53:4	2	(sps_id >= MAX_SPS_COUNT)
cond	49:8	49:18	3	sps_id >= MAX_SPS_COUNT
water	49:8	0:0	4	sps_id
op	49:15	0:0	4	>=
water	49:18	0:0	4	MAX_SPS_COUNT
stmts	49:33	53:4	3	
water	49:33	0:0	4	{
call	50:8	50:74	4	av_log
arg	50:15	50:23	5	s->avctx
water	50:15	0:0	6	s
op	50:16	0:0	6	->
water	50:18	0:0	6	avctx
arg	50:25	50:37	5	AV_LOG_ERROR
water	50:25	0:0	6	AV_LOG_ERROR
arg	50:39	50:66	5	"SPS id out of range: %d\n"
water	50:39	0:0	6	"SPS id out of range: %d\n"
arg	50:68	50:74	5	sps_id
water	50:68	0:0	6	sps_id
water	50:75	0:0	4	;
water	51:8	0:0	4	ret
op	51:12	0:0	4	=
water	51:14	0:0	4	AVERROR_INVALIDDATA
water	51:33	0:0	4	;
goto	52:8	52:16	4	err
water	52:13	0:0	5	err
water	53:4	0:0	4	}
water	55:4	0:0	2	sps
op	55:7	0:0	2	->
water	55:9	0:0	2	chroma_format_idc
op	55:27	0:0	2	=
call	55:29	55:50	2	get_ue_golomb_long
arg	55:48	55:50	3	gb
water	55:48	0:0	4	gb
water	55:51	0:0	2	;
if	56:4	60:4	2	(! ( sps -> chroma_format_idc == 1 || sps -> chroma_format_idc == 2 || sps -> chroma_format_idc == 3 ))
cond	56:8	56:99	3	! ( sps -> chroma_format_idc == 1 || sps -> chroma_format_idc == 2 || sps -> chroma_format_idc == 3 )
op	56:8	0:0	4	!
water	56:9	0:0	4	(
water	56:10	0:0	4	sps
op	56:13	0:0	4	->
water	56:15	0:0	4	chroma_format_idc
op	56:33	0:0	4	==
water	56:36	0:0	4	1
op	56:38	0:0	4	||
water	56:41	0:0	4	sps
op	56:44	0:0	4	->
water	56:46	0:0	4	chroma_format_idc
op	56:64	0:0	4	==
water	56:67	0:0	4	2
op	56:69	0:0	4	||
water	56:72	0:0	4	sps
op	56:75	0:0	4	->
water	56:77	0:0	4	chroma_format_idc
op	56:95	0:0	4	==
water	56:98	0:0	4	3
water	56:99	0:0	4	)
stmts	56:102	60:4	3	
water	56:102	0:0	4	{
call	57:8	57:82	4	avpriv_report_missing_feature
arg	57:38	57:46	5	s->avctx
water	57:38	0:0	6	s
op	57:39	0:0	6	->
water	57:41	0:0	6	avctx
arg	57:48	57:82	5	"chroma_format_idc != {1, 2, 3}\n"
water	57:48	0:0	6	"chroma_format_idc != {1, 2, 3}\n"
water	57:83	0:0	4	;
water	58:8	0:0	4	ret
op	58:12	0:0	4	=
water	58:14	0:0	4	AVERROR_PATCHWELCOME
water	58:34	0:0	4	;
goto	59:8	59:16	4	err
water	59:13	0:0	5	err
water	60:4	0:0	4	}
if	62:4	63:55	2	(sps -> chroma_format_idc == 3)
cond	62:8	62:34	3	sps -> chroma_format_idc == 3
water	62:8	0:0	4	sps
op	62:11	0:0	4	->
water	62:13	0:0	4	chroma_format_idc
op	62:31	0:0	4	==
water	62:34	0:0	4	3
stmts	63:8	63:55	3	
water	63:8	0:0	4	sps
op	63:11	0:0	4	->
water	63:13	0:0	4	separate_colour_plane_flag
op	63:40	0:0	4	=
call	63:42	63:54	4	get_bits1
arg	63:52	63:54	5	gb
water	63:52	0:0	6	gb
water	63:55	0:0	4	;
if	65:4	66:34	2	(sps -> separate_colour_plane_flag)
cond	65:8	65:13	3	sps -> separate_colour_plane_flag
water	65:8	0:0	4	sps
op	65:11	0:0	4	->
water	65:13	0:0	4	separate_colour_plane_flag
stmts	66:8	66:34	3	
water	66:8	0:0	4	sps
op	66:11	0:0	4	->
water	66:13	0:0	4	chroma_format_idc
op	66:31	0:0	4	=
water	66:33	0:0	4	0
water	66:34	0:0	4	;
water	68:4	0:0	2	sps
op	68:7	0:0	2	->
water	68:9	0:0	2	width
op	68:16	0:0	2	=
call	68:18	68:39	2	get_ue_golomb_long
arg	68:37	68:39	3	gb
water	68:37	0:0	4	gb
water	68:40	0:0	2	;
water	69:4	0:0	2	sps
op	69:7	0:0	2	->
water	69:9	0:0	2	height
op	69:16	0:0	2	=
call	69:18	69:39	2	get_ue_golomb_long
arg	69:37	69:39	3	gb
water	69:37	0:0	4	gb
water	69:40	0:0	2	;
if	70:4	72:16	2	(( ret =av_image_check_size (sps -> width ,sps -> height ,0 ,s -> avctx ) ) < 0)
cond	70:8	71:64	3	( ret =av_image_check_size (sps -> width ,sps -> height ,0 ,s -> avctx ) ) < 0
water	70:8	0:0	4	(
water	70:9	0:0	4	ret
op	70:13	0:0	4	=
call	70:15	71:59	4	av_image_check_size
arg	70:35	70:45	5	sps->width
water	70:35	0:0	6	sps
op	70:38	0:0	6	->
water	70:40	0:0	6	width
arg	71:35	71:46	5	sps->height
water	71:35	0:0	6	sps
op	71:38	0:0	6	->
water	71:40	0:0	6	height
arg	71:48	71:49	5	0
water	71:48	0:0	6	0
arg	71:51	71:59	5	s->avctx
water	71:51	0:0	6	s
op	71:52	0:0	6	->
water	71:54	0:0	6	avctx
water	71:60	0:0	4	)
op	71:62	0:0	4	<
water	71:64	0:0	4	0
stmts	72:8	72:16	3	
goto	72:8	72:16	4	err
water	72:13	0:0	5	err
if	74:4	96:4	2	(get_bits1 (gb ))
cond	74:8	74:20	3	get_bits1 (gb )
call	74:8	74:20	4	get_bits1
arg	74:18	74:20	5	gb
water	74:18	0:0	6	gb
stmts	74:23	96:4	3	
water	74:23	0:0	4	{
water	76:8	0:0	4	sps
op	76:11	0:0	4	->
water	76:13	0:0	4	pic_conf_win
op	76:25	0:0	4	.
water	76:26	0:0	4	left_offset
op	76:40	0:0	4	=
call	76:42	76:63	4	get_ue_golomb_long
arg	76:61	76:63	5	gb
water	76:61	0:0	6	gb
op	76:65	0:0	4	*
water	76:67	0:0	4	2
water	76:68	0:0	4	;
water	77:8	0:0	4	sps
op	77:11	0:0	4	->
water	77:13	0:0	4	pic_conf_win
op	77:25	0:0	4	.
water	77:26	0:0	4	right_offset
op	77:40	0:0	4	=
call	77:42	77:63	4	get_ue_golomb_long
arg	77:61	77:63	5	gb
water	77:61	0:0	6	gb
op	77:65	0:0	4	*
water	77:67	0:0	4	2
water	77:68	0:0	4	;
water	78:8	0:0	4	sps
op	78:11	0:0	4	->
water	78:13	0:0	4	pic_conf_win
op	78:25	0:0	4	.
water	78:26	0:0	4	top_offset
op	78:40	0:0	4	=
call	78:42	78:63	4	get_ue_golomb_long
arg	78:61	78:63	5	gb
water	78:61	0:0	6	gb
op	78:65	0:0	4	*
water	78:67	0:0	4	2
water	78:68	0:0	4	;
water	79:8	0:0	4	sps
op	79:11	0:0	4	->
water	79:13	0:0	4	pic_conf_win
op	79:25	0:0	4	.
water	79:26	0:0	4	bottom_offset
op	79:40	0:0	4	=
call	79:42	79:63	4	get_ue_golomb_long
arg	79:61	79:63	5	gb
water	79:61	0:0	6	gb
op	79:65	0:0	4	*
water	79:67	0:0	4	2
water	79:68	0:0	4	;
if	81:8	94:8	4	(s -> avctx -> flags2 & CODEC_FLAG2_IGNORE_CROP)
cond	81:12	81:31	5	s -> avctx -> flags2 & CODEC_FLAG2_IGNORE_CROP
water	81:12	0:0	6	s
op	81:13	0:0	6	->
water	81:15	0:0	6	avctx
op	81:20	0:0	6	->
water	81:22	0:0	6	flags2
op	81:29	0:0	6	&
water	81:31	0:0	6	CODEC_FLAG2_IGNORE_CROP
stmts	81:56	94:8	5	
water	81:56	0:0	6	{
call	82:12	88:50	6	av_log
arg	82:19	82:27	7	s->avctx
water	82:19	0:0	8	s
op	82:20	0:0	8	->
water	82:22	0:0	8	avctx
arg	82:29	82:41	7	AV_LOG_DEBUG
water	82:29	0:0	8	AV_LOG_DEBUG
arg	83:19	84:62	7	"discarding sps conformance window, ""original values are l:%u r:%u t:%u b:%u\n"
water	83:19	0:0	8	"discarding sps conformance window, "
water	84:19	0:0	8	"original values are l:%u r:%u t:%u b:%u\n"
arg	85:19	85:48	7	sps->pic_conf_win.left_offset
water	85:19	0:0	8	sps
op	85:22	0:0	8	->
water	85:24	0:0	8	pic_conf_win
op	85:36	0:0	8	.
water	85:37	0:0	8	left_offset
arg	86:19	86:49	7	sps->pic_conf_win.right_offset
water	86:19	0:0	8	sps
op	86:22	0:0	8	->
water	86:24	0:0	8	pic_conf_win
op	86:36	0:0	8	.
water	86:37	0:0	8	right_offset
arg	87:19	87:47	7	sps->pic_conf_win.top_offset
water	87:19	0:0	8	sps
op	87:22	0:0	8	->
water	87:24	0:0	8	pic_conf_win
op	87:36	0:0	8	.
water	87:37	0:0	8	top_offset
arg	88:19	88:50	7	sps->pic_conf_win.bottom_offset
water	88:19	0:0	8	sps
op	88:22	0:0	8	->
water	88:24	0:0	8	pic_conf_win
op	88:36	0:0	8	.
water	88:37	0:0	8	bottom_offset
water	88:51	0:0	6	;
water	90:12	0:0	6	sps
op	90:15	0:0	6	->
water	90:17	0:0	6	pic_conf_win
op	90:29	0:0	6	.
water	90:30	0:0	6	left_offset
op	90:44	0:0	6	=
water	91:12	0:0	6	sps
op	91:15	0:0	6	->
water	91:17	0:0	6	pic_conf_win
op	91:29	0:0	6	.
water	91:30	0:0	6	right_offset
op	91:44	0:0	6	=
water	92:12	0:0	6	sps
op	92:15	0:0	6	->
water	92:17	0:0	6	pic_conf_win
op	92:29	0:0	6	.
water	92:30	0:0	6	top_offset
op	92:44	0:0	6	=
water	93:12	0:0	6	sps
op	93:15	0:0	6	->
water	93:17	0:0	6	pic_conf_win
op	93:29	0:0	6	.
water	93:30	0:0	6	bottom_offset
op	93:44	0:0	6	=
water	93:46	0:0	6	0
water	93:47	0:0	6	;
water	94:8	0:0	6	}
water	95:8	0:0	4	sps
op	95:11	0:0	4	->
water	95:13	0:0	4	output_window
op	95:27	0:0	4	=
water	95:29	0:0	4	sps
op	95:32	0:0	4	->
water	95:34	0:0	4	pic_conf_win
water	95:46	0:0	4	;
water	96:4	0:0	4	}
water	98:4	0:0	2	sps
op	98:7	0:0	2	->
water	98:9	0:0	2	bit_depth
op	98:21	0:0	2	=
call	98:23	98:44	2	get_ue_golomb_long
arg	98:42	98:44	3	gb
water	98:42	0:0	4	gb
op	98:46	0:0	2	+
water	98:48	0:0	2	8
water	98:49	0:0	2	;
water	99:4	0:0	2	bit_depth_chroma
op	99:21	0:0	2	=
call	99:23	99:44	2	get_ue_golomb_long
arg	99:42	99:44	3	gb
water	99:42	0:0	4	gb
op	99:46	0:0	2	+
water	99:48	0:0	2	8
water	99:49	0:0	2	;
if	100:4	107:4	2	(bit_depth_chroma != sps -> bit_depth)
cond	100:8	100:33	3	bit_depth_chroma != sps -> bit_depth
water	100:8	0:0	4	bit_depth_chroma
op	100:25	0:0	4	!=
water	100:28	0:0	4	sps
op	100:31	0:0	4	->
water	100:33	0:0	4	bit_depth
stmts	100:44	107:4	3	
water	100:44	0:0	4	{
call	101:8	104:47	4	av_log
arg	101:15	101:23	5	s->avctx
water	101:15	0:0	6	s
op	101:16	0:0	6	->
water	101:18	0:0	6	avctx
arg	101:25	101:37	5	AV_LOG_ERROR
water	101:25	0:0	6	AV_LOG_ERROR
arg	102:15	103:39	5	"Luma bit depth (%d) is different from chroma bit depth (%d), ""this is unsupported.\n"
water	102:15	0:0	6	"Luma bit depth (%d) is different from chroma bit depth (%d), "
water	103:15	0:0	6	"this is unsupported.\n"
arg	104:15	104:29	5	sps->bit_depth
water	104:15	0:0	6	sps
op	104:18	0:0	6	->
water	104:20	0:0	6	bit_depth
arg	104:31	104:47	5	bit_depth_chroma
water	104:31	0:0	6	bit_depth_chroma
water	104:48	0:0	4	;
water	105:8	0:0	4	ret
op	105:12	0:0	4	=
water	105:14	0:0	4	AVERROR_INVALIDDATA
water	105:33	0:0	4	;
goto	106:8	106:16	4	err
water	106:13	0:0	5	err
water	107:4	0:0	4	}
switch	109:4	134:4	2	(sps -> bit_depth)
cond	109:12	109:17	3	sps -> bit_depth
water	109:12	0:0	4	sps
op	109:15	0:0	4	->
water	109:17	0:0	4	bit_depth
stmts	109:28	134:4	3	
water	109:28	0:0	4	{
label	110:4	110:10	4	case 8 :
if	111:8	111:74	4	(sps -> chroma_format_idc == 1)
cond	111:12	111:38	5	sps -> chroma_format_idc == 1
water	111:12	0:0	6	sps
op	111:15	0:0	6	->
water	111:17	0:0	6	chroma_format_idc
op	111:35	0:0	6	==
water	111:38	0:0	6	1
stmts	111:41	111:74	5	
water	111:41	0:0	6	sps
op	111:44	0:0	6	->
water	111:46	0:0	6	pix_fmt
op	111:54	0:0	6	=
water	111:56	0:0	6	AV_PIX_FMT_YUV420P
water	111:74	0:0	6	;
if	112:8	112:74	4	(sps -> chroma_format_idc == 2)
cond	112:12	112:38	5	sps -> chroma_format_idc == 2
water	112:12	0:0	6	sps
op	112:15	0:0	6	->
water	112:17	0:0	6	chroma_format_idc
op	112:35	0:0	6	==
water	112:38	0:0	6	2
stmts	112:41	112:74	5	
water	112:41	0:0	6	sps
op	112:44	0:0	6	->
water	112:46	0:0	6	pix_fmt
op	112:54	0:0	6	=
water	112:56	0:0	6	AV_PIX_FMT_YUV422P
water	112:74	0:0	6	;
if	113:8	113:74	4	(sps -> chroma_format_idc == 3)
cond	113:12	113:38	5	sps -> chroma_format_idc == 3
water	113:12	0:0	6	sps
op	113:15	0:0	6	->
water	113:17	0:0	6	chroma_format_idc
op	113:35	0:0	6	==
water	113:38	0:0	6	3
stmts	113:41	113:74	5	
water	113:41	0:0	6	sps
op	113:44	0:0	6	->
water	113:46	0:0	6	pix_fmt
op	113:54	0:0	6	=
water	113:56	0:0	6	AV_PIX_FMT_YUV444P
water	113:74	0:0	6	;
break	114:7	114:12	4	
label	115:4	115:10	4	case 9 :
if	116:8	116:75	4	(sps -> chroma_format_idc == 1)
cond	116:12	116:38	5	sps -> chroma_format_idc == 1
water	116:12	0:0	6	sps
op	116:15	0:0	6	->
water	116:17	0:0	6	chroma_format_idc
op	116:35	0:0	6	==
water	116:38	0:0	6	1
stmts	116:41	116:75	5	
water	116:41	0:0	6	sps
op	116:44	0:0	6	->
water	116:46	0:0	6	pix_fmt
op	116:54	0:0	6	=
water	116:56	0:0	6	AV_PIX_FMT_YUV420P9
water	116:75	0:0	6	;
if	117:8	117:75	4	(sps -> chroma_format_idc == 2)
cond	117:12	117:38	5	sps -> chroma_format_idc == 2
water	117:12	0:0	6	sps
op	117:15	0:0	6	->
water	117:17	0:0	6	chroma_format_idc
op	117:35	0:0	6	==
water	117:38	0:0	6	2
stmts	117:41	117:75	5	
water	117:41	0:0	6	sps
op	117:44	0:0	6	->
water	117:46	0:0	6	pix_fmt
op	117:54	0:0	6	=
water	117:56	0:0	6	AV_PIX_FMT_YUV422P9
water	117:75	0:0	6	;
if	118:8	118:75	4	(sps -> chroma_format_idc == 3)
cond	118:12	118:38	5	sps -> chroma_format_idc == 3
water	118:12	0:0	6	sps
op	118:15	0:0	6	->
water	118:17	0:0	6	chroma_format_idc
op	118:35	0:0	6	==
water	118:38	0:0	6	3
stmts	118:41	118:75	5	
water	118:41	0:0	6	sps
op	118:44	0:0	6	->
water	118:46	0:0	6	pix_fmt
op	118:54	0:0	6	=
water	118:56	0:0	6	AV_PIX_FMT_YUV444P9
water	118:75	0:0	6	;
break	119:8	119:13	4	
label	120:4	120:11	4	case 10 :
if	121:8	121:76	4	(sps -> chroma_format_idc == 1)
cond	121:12	121:38	5	sps -> chroma_format_idc == 1
water	121:12	0:0	6	sps
op	121:15	0:0	6	->
water	121:17	0:0	6	chroma_format_idc
op	121:35	0:0	6	==
water	121:38	0:0	6	1
stmts	121:41	121:76	5	
water	121:41	0:0	6	sps
op	121:44	0:0	6	->
water	121:46	0:0	6	pix_fmt
op	121:54	0:0	6	=
water	121:56	0:0	6	AV_PIX_FMT_YUV420P10
water	121:76	0:0	6	;
if	122:8	122:76	4	(sps -> chroma_format_idc == 2)
cond	122:12	122:38	5	sps -> chroma_format_idc == 2
water	122:12	0:0	6	sps
op	122:15	0:0	6	->
water	122:17	0:0	6	chroma_format_idc
op	122:35	0:0	6	==
water	122:38	0:0	6	2
stmts	122:41	122:76	5	
water	122:41	0:0	6	sps
op	122:44	0:0	6	->
water	122:46	0:0	6	pix_fmt
op	122:54	0:0	6	=
water	122:56	0:0	6	AV_PIX_FMT_YUV422P10
water	122:76	0:0	6	;
if	123:8	123:76	4	(sps -> chroma_format_idc == 3)
cond	123:12	123:38	5	sps -> chroma_format_idc == 3
water	123:12	0:0	6	sps
op	123:15	0:0	6	->
water	123:17	0:0	6	chroma_format_idc
op	123:35	0:0	6	==
water	123:38	0:0	6	3
stmts	123:41	123:76	5	
water	123:41	0:0	6	sps
op	123:44	0:0	6	->
water	123:46	0:0	6	pix_fmt
op	123:54	0:0	6	=
water	123:56	0:0	6	AV_PIX_FMT_YUV444P10
water	123:76	0:0	6	;
break	124:8	124:13	4	
label	125:4	125:11	4	case 12 :
if	126:8	126:76	4	(sps -> chroma_format_idc == 1)
cond	126:12	126:38	5	sps -> chroma_format_idc == 1
water	126:12	0:0	6	sps
op	126:15	0:0	6	->
water	126:17	0:0	6	chroma_format_idc
op	126:35	0:0	6	==
water	126:38	0:0	6	1
stmts	126:41	126:76	5	
water	126:41	0:0	6	sps
op	126:44	0:0	6	->
water	126:46	0:0	6	pix_fmt
op	126:54	0:0	6	=
water	126:56	0:0	6	AV_PIX_FMT_YUV420P12
water	126:76	0:0	6	;
if	127:8	127:76	4	(sps -> chroma_format_idc == 2)
cond	127:12	127:38	5	sps -> chroma_format_idc == 2
water	127:12	0:0	6	sps
op	127:15	0:0	6	->
water	127:17	0:0	6	chroma_format_idc
op	127:35	0:0	6	==
water	127:38	0:0	6	2
stmts	127:41	127:76	5	
water	127:41	0:0	6	sps
op	127:44	0:0	6	->
water	127:46	0:0	6	pix_fmt
op	127:54	0:0	6	=
water	127:56	0:0	6	AV_PIX_FMT_YUV422P12
water	127:76	0:0	6	;
if	128:8	128:76	4	(sps -> chroma_format_idc == 3)
cond	128:12	128:38	5	sps -> chroma_format_idc == 3
water	128:12	0:0	6	sps
op	128:15	0:0	6	->
water	128:17	0:0	6	chroma_format_idc
op	128:35	0:0	6	==
water	128:38	0:0	6	3
stmts	128:41	128:76	5	
water	128:41	0:0	6	sps
op	128:44	0:0	6	->
water	128:46	0:0	6	pix_fmt
op	128:54	0:0	6	=
water	128:56	0:0	6	AV_PIX_FMT_YUV444P12
water	128:76	0:0	6	;
break	129:8	129:13	4	
label	130:4	130:11	4	default :
call	131:8	132:94	4	av_log
arg	131:15	131:23	5	s->avctx
water	131:15	0:0	6	s
op	131:16	0:0	6	->
water	131:18	0:0	6	avctx
arg	131:25	131:37	5	AV_LOG_ERROR
water	131:25	0:0	6	AV_LOG_ERROR
arg	132:15	132:94	5	"4:2:0, 4:2:2, 4:4:4 supports are currently specified for 8, 10 and 12 bits.\n"
water	132:15	0:0	6	"4:2:0, 4:2:2, 4:4:4 supports are currently specified for 8, 10 and 12 bits.\n"
water	132:95	0:0	4	;
return	133:8	133:35	4	AVERROR_PATCHWELCOME
water	133:15	0:0	5	AVERROR_PATCHWELCOME
water	134:4	0:0	4	}
water	136:4	0:0	2	desc
op	136:9	0:0	2	=
call	136:11	136:43	2	av_pix_fmt_desc_get
arg	136:31	136:43	3	sps->pix_fmt
water	136:31	0:0	4	sps
op	136:34	0:0	4	->
water	136:36	0:0	4	pix_fmt
water	136:44	0:0	2	;
if	137:4	140:4	2	(! desc)
cond	137:8	137:9	3	! desc
op	137:8	0:0	4	!
water	137:9	0:0	4	desc
stmts	137:15	140:4	3	
water	137:15	0:0	4	{
water	138:8	0:0	4	ret
op	138:12	0:0	4	=
call	138:14	138:28	4	AVERROR
arg	138:22	138:28	5	EINVAL
water	138:22	0:0	6	EINVAL
water	138:29	0:0	4	;
goto	139:8	139:16	4	err
water	139:13	0:0	5	err
water	140:4	0:0	4	}
water	142:4	0:0	2	sps
op	142:7	0:0	2	->
water	142:9	0:0	2	hshift
op	142:15	0:0	2	[
water	142:16	0:0	2	0
op	142:17	0:0	2	]
op	142:19	0:0	2	=
water	142:21	0:0	2	sps
op	142:24	0:0	2	->
water	142:26	0:0	2	vshift
op	142:32	0:0	2	[
water	142:33	0:0	2	0
op	142:34	0:0	2	]
op	142:36	0:0	2	=
water	142:38	0:0	2	0
water	142:39	0:0	2	;
water	143:4	0:0	2	sps
op	143:7	0:0	2	->
water	143:9	0:0	2	hshift
op	143:15	0:0	2	[
water	143:16	0:0	2	2
op	143:17	0:0	2	]
op	143:19	0:0	2	=
water	143:21	0:0	2	sps
op	143:24	0:0	2	->
water	143:26	0:0	2	hshift
op	143:32	0:0	2	[
water	143:33	0:0	2	1
op	143:34	0:0	2	]
op	143:36	0:0	2	=
water	143:38	0:0	2	desc
op	143:42	0:0	2	->
water	143:44	0:0	2	log2_chroma_w
water	143:57	0:0	2	;
water	144:4	0:0	2	sps
op	144:7	0:0	2	->
water	144:9	0:0	2	vshift
op	144:15	0:0	2	[
water	144:16	0:0	2	2
op	144:17	0:0	2	]
op	144:19	0:0	2	=
water	144:21	0:0	2	sps
op	144:24	0:0	2	->
water	144:26	0:0	2	vshift
op	144:32	0:0	2	[
water	144:33	0:0	2	1
op	144:34	0:0	2	]
op	144:36	0:0	2	=
water	144:38	0:0	2	desc
op	144:42	0:0	2	->
water	144:44	0:0	2	log2_chroma_h
water	144:57	0:0	2	;
water	146:4	0:0	2	sps
op	146:7	0:0	2	->
water	146:9	0:0	2	pixel_shift
op	146:21	0:0	2	=
water	146:23	0:0	2	sps
op	146:26	0:0	2	->
water	146:28	0:0	2	bit_depth
op	146:38	0:0	2	>
water	146:40	0:0	2	8
water	146:41	0:0	2	;
water	148:4	0:0	2	sps
op	148:7	0:0	2	->
water	148:9	0:0	2	log2_max_poc_lsb
op	148:26	0:0	2	=
call	148:28	148:49	2	get_ue_golomb_long
arg	148:47	148:49	3	gb
water	148:47	0:0	4	gb
op	148:51	0:0	2	+
water	148:53	0:0	2	4
water	148:54	0:0	2	;
if	149:4	154:4	2	(sps -> log2_max_poc_lsb > 16)
cond	149:8	149:32	3	sps -> log2_max_poc_lsb > 16
water	149:8	0:0	4	sps
op	149:11	0:0	4	->
water	149:13	0:0	4	log2_max_poc_lsb
op	149:30	0:0	4	>
water	149:32	0:0	4	16
stmts	149:36	154:4	3	
water	149:36	0:0	4	{
call	150:8	151:40	4	av_log
arg	150:15	150:23	5	s->avctx
water	150:15	0:0	6	s
op	150:16	0:0	6	->
water	150:18	0:0	6	avctx
arg	150:25	150:37	5	AV_LOG_ERROR
water	150:25	0:0	6	AV_LOG_ERROR
arg	150:39	150:90	5	"log2_max_pic_order_cnt_lsb_minus4 out range: %d\n"
water	150:39	0:0	6	"log2_max_pic_order_cnt_lsb_minus4 out range: %d\n"
arg	151:15	151:40	5	sps->log2_max_poc_lsb-4
water	151:15	0:0	6	sps
op	151:18	0:0	6	->
water	151:20	0:0	6	log2_max_poc_lsb
op	151:37	0:0	6	-
water	151:39	0:0	6	4
water	151:41	0:0	4	;
water	152:8	0:0	4	ret
op	152:12	0:0	4	=
water	152:14	0:0	4	AVERROR_INVALIDDATA
water	152:33	0:0	4	;
goto	153:8	153:16	4	err
water	153:13	0:0	5	err
water	154:4	0:0	4	}
water	156:4	0:0	2	sublayer_ordering_info
op	156:27	0:0	2	=
call	156:29	156:41	2	get_bits1
arg	156:39	156:41	3	gb
water	156:39	0:0	4	gb
water	156:42	0:0	2	;
water	157:4	0:0	2	start
op	157:10	0:0	2	=
water	157:12	0:0	2	sublayer_ordering_info
water	157:35	0:0	2	?
water	157:37	0:0	2	0
water	157:39	0:0	2	:
water	157:41	0:0	2	sps
op	157:44	0:0	2	->
water	157:46	0:0	2	max_sub_layers
op	157:61	0:0	2	-
water	157:63	0:0	2	1
water	157:64	0:0	2	;
for	158:4	178:4	2	(i = start ;i < sps -> max_sub_layers;i ++)
forinit	158:9	158:18	3	i = start ;
water	158:9	0:0	4	i
op	158:11	0:0	4	=
water	158:13	0:0	4	start
water	158:18	0:0	4	;
cond	158:20	158:29	3	i < sps -> max_sub_layers
water	158:20	0:0	4	i
op	158:22	0:0	4	<
water	158:24	0:0	4	sps
op	158:27	0:0	4	->
water	158:29	0:0	4	max_sub_layers
forexpr	158:45	158:46	3	i ++
water	158:45	0:0	4	i
op	158:46	0:0	4	++
stmts	158:50	178:4	3	
water	158:50	0:0	4	{
water	159:8	0:0	4	sps
op	159:11	0:0	4	->
water	159:13	0:0	4	temporal_layer
op	159:27	0:0	4	[
water	159:28	0:0	4	i
op	159:29	0:0	4	]
op	159:30	0:0	4	.
water	159:31	0:0	4	max_dec_pic_buffering
op	159:53	0:0	4	=
call	159:55	159:76	4	get_ue_golomb_long
arg	159:74	159:76	5	gb
water	159:74	0:0	6	gb
op	159:78	0:0	4	+
water	159:80	0:0	4	1
water	159:81	0:0	4	;
water	160:8	0:0	4	sps
op	160:11	0:0	4	->
water	160:13	0:0	4	temporal_layer
op	160:27	0:0	4	[
water	160:28	0:0	4	i
op	160:29	0:0	4	]
op	160:30	0:0	4	.
water	160:31	0:0	4	num_reorder_pics
op	160:53	0:0	4	=
call	160:55	160:76	4	get_ue_golomb_long
arg	160:74	160:76	5	gb
water	160:74	0:0	6	gb
water	160:77	0:0	4	;
water	161:8	0:0	4	sps
op	161:11	0:0	4	->
water	161:13	0:0	4	temporal_layer
op	161:27	0:0	4	[
water	161:28	0:0	4	i
op	161:29	0:0	4	]
op	161:30	0:0	4	.
water	161:31	0:0	4	max_latency_increase
op	161:53	0:0	4	=
call	161:55	161:76	4	get_ue_golomb_long
arg	161:74	161:76	5	gb
water	161:74	0:0	6	gb
op	161:78	0:0	4	-
water	161:80	0:0	4	1
water	161:81	0:0	4	;
if	162:8	167:8	4	(sps -> temporal_layer [ i ] . max_dec_pic_buffering > MAX_DPB_SIZE)
cond	162:12	162:59	5	sps -> temporal_layer [ i ] . max_dec_pic_buffering > MAX_DPB_SIZE
water	162:12	0:0	6	sps
op	162:15	0:0	6	->
water	162:17	0:0	6	temporal_layer
op	162:31	0:0	6	[
water	162:32	0:0	6	i
op	162:33	0:0	6	]
op	162:34	0:0	6	.
water	162:35	0:0	6	max_dec_pic_buffering
op	162:57	0:0	6	>
water	162:59	0:0	6	MAX_DPB_SIZE
stmts	162:73	167:8	5	
water	162:73	0:0	6	{
call	163:12	164:67	6	av_log
arg	163:19	163:27	7	s->avctx
water	163:19	0:0	8	s
op	163:20	0:0	8	->
water	163:22	0:0	8	avctx
arg	163:29	163:41	7	AV_LOG_ERROR
water	163:29	0:0	8	AV_LOG_ERROR
arg	163:43	163:96	7	"sps_max_dec_pic_buffering_minus1 out of range: %d\n"
water	163:43	0:0	8	"sps_max_dec_pic_buffering_minus1 out of range: %d\n"
arg	164:19	164:67	7	sps->temporal_layer[i].max_dec_pic_buffering-1
water	164:19	0:0	8	sps
op	164:22	0:0	8	->
water	164:24	0:0	8	temporal_layer
op	164:38	0:0	8	[
water	164:39	0:0	8	i
op	164:40	0:0	8	]
op	164:41	0:0	8	.
water	164:42	0:0	8	max_dec_pic_buffering
op	164:64	0:0	8	-
water	164:66	0:0	8	1
water	164:68	0:0	6	;
water	165:12	0:0	6	ret
op	165:16	0:0	6	=
water	165:18	0:0	6	AVERROR_INVALIDDATA
water	165:37	0:0	6	;
goto	166:12	166:20	6	err
water	166:17	0:0	7	err
water	167:8	0:0	6	}
if	168:8	177:8	4	(sps -> temporal_layer [ i ] . num_reorder_pics > sps -> temporal_layer [ i ] . max_dec_pic_buffering - 1)
cond	168:12	168:101	5	sps -> temporal_layer [ i ] . num_reorder_pics > sps -> temporal_layer [ i ] . max_dec_pic_buffering - 1
water	168:12	0:0	6	sps
op	168:15	0:0	6	->
water	168:17	0:0	6	temporal_layer
op	168:31	0:0	6	[
water	168:32	0:0	6	i
op	168:33	0:0	6	]
op	168:34	0:0	6	.
water	168:35	0:0	6	num_reorder_pics
op	168:52	0:0	6	>
water	168:54	0:0	6	sps
op	168:57	0:0	6	->
water	168:59	0:0	6	temporal_layer
op	168:73	0:0	6	[
water	168:74	0:0	6	i
op	168:75	0:0	6	]
op	168:76	0:0	6	.
water	168:77	0:0	6	max_dec_pic_buffering
op	168:99	0:0	6	-
water	168:101	0:0	6	1
stmts	168:104	177:8	5	
water	168:104	0:0	6	{
call	169:12	170:58	6	av_log
arg	169:19	169:27	7	s->avctx
water	169:19	0:0	8	s
op	169:20	0:0	8	->
water	169:22	0:0	8	avctx
arg	169:29	169:43	7	AV_LOG_WARNING
water	169:29	0:0	8	AV_LOG_WARNING
arg	169:45	169:90	7	"sps_max_num_reorder_pics out of range: %d\n"
water	169:45	0:0	8	"sps_max_num_reorder_pics out of range: %d\n"
arg	170:19	170:58	7	sps->temporal_layer[i].num_reorder_pics
water	170:19	0:0	8	sps
op	170:22	0:0	8	->
water	170:24	0:0	8	temporal_layer
op	170:38	0:0	8	[
water	170:39	0:0	8	i
op	170:40	0:0	8	]
op	170:41	0:0	8	.
water	170:42	0:0	8	num_reorder_pics
water	170:59	0:0	6	;
if	171:12	175:12	6	(s -> avctx -> err_recognition & AV_EF_EXPLODE || sps -> temporal_layer [ i ] . num_reorder_pics > MAX_DPB_SIZE - 1)
cond	171:16	172:73	7	s -> avctx -> err_recognition & AV_EF_EXPLODE || sps -> temporal_layer [ i ] . num_reorder_pics > MAX_DPB_SIZE - 1
water	171:16	0:0	8	s
op	171:17	0:0	8	->
water	171:19	0:0	8	avctx
op	171:24	0:0	8	->
water	171:26	0:0	8	err_recognition
op	171:42	0:0	8	&
water	171:44	0:0	8	AV_EF_EXPLODE
op	171:58	0:0	8	||
water	172:16	0:0	8	sps
op	172:19	0:0	8	->
water	172:21	0:0	8	temporal_layer
op	172:35	0:0	8	[
water	172:36	0:0	8	i
op	172:37	0:0	8	]
op	172:38	0:0	8	.
water	172:39	0:0	8	num_reorder_pics
op	172:56	0:0	8	>
water	172:58	0:0	8	MAX_DPB_SIZE
op	172:71	0:0	8	-
water	172:73	0:0	8	1
stmts	172:76	175:12	7	
water	172:76	0:0	8	{
water	173:16	0:0	8	ret
op	173:20	0:0	8	=
water	173:22	0:0	8	AVERROR_INVALIDDATA
water	173:41	0:0	8	;
goto	174:16	174:24	8	err
water	174:21	0:0	9	err
water	175:12	0:0	8	}
water	176:12	0:0	6	sps
op	176:15	0:0	6	->
water	176:17	0:0	6	temporal_layer
op	176:31	0:0	6	[
water	176:32	0:0	6	i
op	176:33	0:0	6	]
op	176:34	0:0	6	.
water	176:35	0:0	6	max_dec_pic_buffering
op	176:57	0:0	6	=
water	176:59	0:0	6	sps
op	176:62	0:0	6	->
water	176:64	0:0	6	temporal_layer
op	176:78	0:0	6	[
water	176:79	0:0	6	i
op	176:80	0:0	6	]
op	176:81	0:0	6	.
water	176:82	0:0	6	num_reorder_pics
op	176:99	0:0	6	+
water	176:101	0:0	6	1
water	176:102	0:0	6	;
water	177:8	0:0	6	}
water	178:4	0:0	4	}
if	180:4	186:4	2	(! sublayer_ordering_info)
cond	180:8	180:9	3	! sublayer_ordering_info
op	180:8	0:0	4	!
water	180:9	0:0	4	sublayer_ordering_info
stmts	180:33	186:4	3	
water	180:33	0:0	4	{
for	181:8	185:8	4	(i = 0 ;i < start;i ++)
forinit	181:13	181:18	5	i = 0 ;
water	181:13	0:0	6	i
op	181:15	0:0	6	=
water	181:17	0:0	6	0
water	181:18	0:0	6	;
cond	181:20	181:24	5	i < start
water	181:20	0:0	6	i
op	181:22	0:0	6	<
water	181:24	0:0	6	start
forexpr	181:31	181:32	5	i ++
water	181:31	0:0	6	i
op	181:32	0:0	6	++
stmts	181:36	185:8	5	
water	181:36	0:0	6	{
water	182:12	0:0	6	sps
op	182:15	0:0	6	->
water	182:17	0:0	6	temporal_layer
op	182:31	0:0	6	[
water	182:32	0:0	6	i
op	182:33	0:0	6	]
op	182:34	0:0	6	.
water	182:35	0:0	6	max_dec_pic_buffering
op	182:57	0:0	6	=
water	182:59	0:0	6	sps
op	182:62	0:0	6	->
water	182:64	0:0	6	temporal_layer
op	182:78	0:0	6	[
water	182:79	0:0	6	start
op	182:84	0:0	6	]
op	182:85	0:0	6	.
water	182:86	0:0	6	max_dec_pic_buffering
water	182:107	0:0	6	;
water	183:12	0:0	6	sps
op	183:15	0:0	6	->
water	183:17	0:0	6	temporal_layer
op	183:31	0:0	6	[
water	183:32	0:0	6	i
op	183:33	0:0	6	]
op	183:34	0:0	6	.
water	183:35	0:0	6	num_reorder_pics
op	183:57	0:0	6	=
water	183:59	0:0	6	sps
op	183:62	0:0	6	->
water	183:64	0:0	6	temporal_layer
op	183:78	0:0	6	[
water	183:79	0:0	6	start
op	183:84	0:0	6	]
op	183:85	0:0	6	.
water	183:86	0:0	6	num_reorder_pics
water	183:102	0:0	6	;
water	184:12	0:0	6	sps
op	184:15	0:0	6	->
water	184:17	0:0	6	temporal_layer
op	184:31	0:0	6	[
water	184:32	0:0	6	i
op	184:33	0:0	6	]
op	184:34	0:0	6	.
water	184:35	0:0	6	max_latency_increase
op	184:57	0:0	6	=
water	184:59	0:0	6	sps
op	184:62	0:0	6	->
water	184:64	0:0	6	temporal_layer
op	184:78	0:0	6	[
water	184:79	0:0	6	start
op	184:84	0:0	6	]
op	184:85	0:0	6	.
water	184:86	0:0	6	max_latency_increase
water	184:106	0:0	6	;
water	185:8	0:0	6	}
water	186:4	0:0	4	}
water	188:4	0:0	2	sps
op	188:7	0:0	2	->
water	188:9	0:0	2	log2_min_cb_size
op	188:45	0:0	2	=
call	188:47	188:68	2	get_ue_golomb_long
arg	188:66	188:68	3	gb
water	188:66	0:0	4	gb
op	188:70	0:0	2	+
water	188:72	0:0	2	3
water	188:73	0:0	2	;
water	189:4	0:0	2	sps
op	189:7	0:0	2	->
water	189:9	0:0	2	log2_diff_max_min_coding_block_size
op	189:45	0:0	2	=
call	189:47	189:68	2	get_ue_golomb_long
arg	189:66	189:68	3	gb
water	189:66	0:0	4	gb
water	189:69	0:0	2	;
water	190:4	0:0	2	sps
op	190:7	0:0	2	->
water	190:9	0:0	2	log2_min_tb_size
op	190:45	0:0	2	=
call	190:47	190:68	2	get_ue_golomb_long
arg	190:66	190:68	3	gb
water	190:66	0:0	4	gb
op	190:70	0:0	2	+
water	190:72	0:0	2	2
water	190:73	0:0	2	;
water	191:4	0:0	2	log2_diff_max_min_transform_block_size
op	191:45	0:0	2	=
call	191:47	191:68	2	get_ue_golomb_long
arg	191:66	191:68	3	gb
water	191:66	0:0	4	gb
water	191:69	0:0	2	;
water	192:4	0:0	2	sps
op	192:7	0:0	2	->
water	192:9	0:0	2	log2_max_trafo_size
op	192:45	0:0	2	=
water	192:47	0:0	2	log2_diff_max_min_transform_block_size
op	192:86	0:0	2	+
water	193:47	0:0	2	sps
op	193:50	0:0	2	->
water	193:52	0:0	2	log2_min_tb_size
water	193:68	0:0	2	;
if	195:4	199:4	2	(sps -> log2_min_tb_size >= sps -> log2_min_cb_size)
cond	195:8	195:38	3	sps -> log2_min_tb_size >= sps -> log2_min_cb_size
water	195:8	0:0	4	sps
op	195:11	0:0	4	->
water	195:13	0:0	4	log2_min_tb_size
op	195:30	0:0	4	>=
water	195:33	0:0	4	sps
op	195:36	0:0	4	->
water	195:38	0:0	4	log2_min_cb_size
stmts	195:56	199:4	3	
water	195:56	0:0	4	{
call	196:8	196:75	4	av_log
arg	196:15	196:23	5	s->avctx
water	196:15	0:0	6	s
op	196:16	0:0	6	->
water	196:18	0:0	6	avctx
arg	196:25	196:37	5	AV_LOG_ERROR
water	196:25	0:0	6	AV_LOG_ERROR
arg	196:39	196:75	5	"Invalid value for log2_min_tb_size"
water	196:39	0:0	6	"Invalid value for log2_min_tb_size"
water	196:76	0:0	4	;
water	197:8	0:0	4	ret
op	197:12	0:0	4	=
water	197:14	0:0	4	AVERROR_INVALIDDATA
water	197:33	0:0	4	;
goto	198:8	198:16	4	err
water	198:13	0:0	5	err
water	199:4	0:0	4	}
water	200:4	0:0	2	sps
op	200:7	0:0	2	->
water	200:9	0:0	2	max_transform_hierarchy_depth_inter
op	200:45	0:0	2	=
call	200:47	200:68	2	get_ue_golomb_long
arg	200:66	200:68	3	gb
water	200:66	0:0	4	gb
water	200:69	0:0	2	;
water	201:4	0:0	2	sps
op	201:7	0:0	2	->
water	201:9	0:0	2	max_transform_hierarchy_depth_intra
op	201:45	0:0	2	=
call	201:47	201:68	2	get_ue_golomb_long
arg	201:66	201:68	3	gb
water	201:66	0:0	4	gb
water	201:69	0:0	2	;
water	203:4	0:0	2	sps
op	203:7	0:0	2	->
water	203:9	0:0	2	scaling_list_enable_flag
op	203:34	0:0	2	=
call	203:36	203:48	2	get_bits1
arg	203:46	203:48	3	gb
water	203:46	0:0	4	gb
water	203:49	0:0	2	;
if	204:4	212:4	2	(sps -> scaling_list_enable_flag)
cond	204:8	204:13	3	sps -> scaling_list_enable_flag
water	204:8	0:0	4	sps
op	204:11	0:0	4	->
water	204:13	0:0	4	scaling_list_enable_flag
stmts	204:39	212:4	3	
water	204:39	0:0	4	{
call	205:8	205:56	4	set_default_scaling_list_data
arg	205:38	205:56	5	&sps->scaling_list
op	205:38	0:0	6	&
water	205:39	0:0	6	sps
op	205:42	0:0	6	->
water	205:44	0:0	6	scaling_list
water	205:57	0:0	4	;
if	207:8	211:8	4	(get_bits1 (gb ))
cond	207:12	207:24	5	get_bits1 (gb )
call	207:12	207:24	6	get_bits1
arg	207:22	207:24	7	gb
water	207:22	0:0	8	gb
stmts	207:27	211:8	5	
water	207:27	0:0	6	{
water	208:12	0:0	6	ret
op	208:16	0:0	6	=
call	208:18	208:57	6	scaling_list_data
arg	208:36	208:37	7	s
water	208:36	0:0	8	s
arg	208:39	208:57	7	&sps->scaling_list
op	208:39	0:0	8	&
water	208:40	0:0	8	sps
op	208:43	0:0	8	->
water	208:45	0:0	8	scaling_list
water	208:58	0:0	6	;
if	209:12	210:24	6	(ret < 0)
cond	209:16	209:22	7	ret < 0
water	209:16	0:0	8	ret
op	209:20	0:0	8	<
water	209:22	0:0	8	0
stmts	210:16	210:24	7	
goto	210:16	210:24	8	err
water	210:21	0:0	9	err
water	211:8	0:0	6	}
water	212:4	0:0	4	}
water	214:4	0:0	2	sps
op	214:7	0:0	2	->
water	214:9	0:0	2	amp_enabled_flag
op	214:26	0:0	2	=
call	214:28	214:40	2	get_bits1
arg	214:38	214:40	3	gb
water	214:38	0:0	4	gb
water	214:41	0:0	2	;
water	215:4	0:0	2	sps
op	215:7	0:0	2	->
water	215:9	0:0	2	sao_enabled
op	215:26	0:0	2	=
call	215:28	215:40	2	get_bits1
arg	215:38	215:40	3	gb
water	215:38	0:0	4	gb
water	215:41	0:0	2	;
water	217:4	0:0	2	sps
op	217:7	0:0	2	->
water	217:9	0:0	2	pcm_enabled_flag
op	217:26	0:0	2	=
call	217:28	217:40	2	get_bits1
arg	217:38	217:40	3	gb
water	217:38	0:0	4	gb
water	217:41	0:0	2	;
if	218:4	233:4	2	(sps -> pcm_enabled_flag)
cond	218:8	218:13	3	sps -> pcm_enabled_flag
water	218:8	0:0	4	sps
op	218:11	0:0	4	->
water	218:13	0:0	4	pcm_enabled_flag
stmts	218:31	233:4	3	
water	218:31	0:0	4	{
water	219:8	0:0	4	sps
op	219:11	0:0	4	->
water	219:13	0:0	4	pcm
op	219:16	0:0	4	.
water	219:17	0:0	4	bit_depth
op	219:29	0:0	4	=
call	219:31	219:45	4	get_bits
arg	219:40	219:42	5	gb
water	219:40	0:0	6	gb
arg	219:44	219:45	5	4
water	219:44	0:0	6	4
op	219:47	0:0	4	+
water	219:49	0:0	4	1
water	219:50	0:0	4	;
water	220:8	0:0	4	sps
op	220:11	0:0	4	->
water	220:13	0:0	4	pcm
op	220:16	0:0	4	.
water	220:17	0:0	4	bit_depth_chroma
op	220:34	0:0	4	=
call	220:36	220:50	4	get_bits
arg	220:45	220:47	5	gb
water	220:45	0:0	6	gb
arg	220:49	220:50	5	4
water	220:49	0:0	6	4
op	220:52	0:0	4	+
water	220:54	0:0	4	1
water	220:55	0:0	4	;
water	221:8	0:0	4	sps
op	221:11	0:0	4	->
water	221:13	0:0	4	pcm
op	221:16	0:0	4	.
water	221:17	0:0	4	log2_min_pcm_cb_size
op	221:38	0:0	4	=
call	221:40	221:61	4	get_ue_golomb_long
arg	221:59	221:61	5	gb
water	221:59	0:0	6	gb
op	221:63	0:0	4	+
water	221:65	0:0	4	3
water	221:66	0:0	4	;
water	222:8	0:0	4	sps
op	222:11	0:0	4	->
water	222:13	0:0	4	pcm
op	222:16	0:0	4	.
water	222:17	0:0	4	log2_max_pcm_cb_size
op	222:38	0:0	4	=
water	222:40	0:0	4	sps
op	222:43	0:0	4	->
water	222:45	0:0	4	pcm
op	222:48	0:0	4	.
water	222:49	0:0	4	log2_min_pcm_cb_size
op	222:70	0:0	4	+
call	223:40	223:61	4	get_ue_golomb_long
arg	223:59	223:61	5	gb
water	223:59	0:0	6	gb
water	223:62	0:0	4	;
if	224:8	230:8	4	(sps -> pcm . bit_depth > sps -> bit_depth)
cond	224:12	224:38	5	sps -> pcm . bit_depth > sps -> bit_depth
water	224:12	0:0	6	sps
op	224:15	0:0	6	->
water	224:17	0:0	6	pcm
op	224:20	0:0	6	.
water	224:21	0:0	6	bit_depth
op	224:31	0:0	6	>
water	224:33	0:0	6	sps
op	224:36	0:0	6	->
water	224:38	0:0	6	bit_depth
stmts	224:49	230:8	5	
water	224:49	0:0	6	{
call	225:12	227:53	6	av_log
arg	225:19	225:27	7	s->avctx
water	225:19	0:0	8	s
op	225:20	0:0	8	->
water	225:22	0:0	8	avctx
arg	225:29	225:41	7	AV_LOG_ERROR
water	225:29	0:0	8	AV_LOG_ERROR
arg	226:19	226:79	7	"PCM bit depth (%d) is greater than normal bit depth (%d)\n"
water	226:19	0:0	8	"PCM bit depth (%d) is greater than normal bit depth (%d)\n"
arg	227:19	227:37	7	sps->pcm.bit_depth
water	227:19	0:0	8	sps
op	227:22	0:0	8	->
water	227:24	0:0	8	pcm
op	227:27	0:0	8	.
water	227:28	0:0	8	bit_depth
arg	227:39	227:53	7	sps->bit_depth
water	227:39	0:0	8	sps
op	227:42	0:0	8	->
water	227:44	0:0	8	bit_depth
water	227:54	0:0	6	;
water	228:12	0:0	6	ret
op	228:16	0:0	6	=
water	228:18	0:0	6	AVERROR_INVALIDDATA
water	228:37	0:0	6	;
goto	229:12	229:20	6	err
water	229:17	0:0	7	err
water	230:8	0:0	6	}
water	232:8	0:0	4	sps
op	232:11	0:0	4	->
water	232:13	0:0	4	pcm
op	232:16	0:0	4	.
water	232:17	0:0	4	loop_filter_disable_flag
op	232:42	0:0	4	=
call	232:44	232:56	4	get_bits1
arg	232:54	232:56	5	gb
water	232:54	0:0	6	gb
water	232:57	0:0	4	;
water	233:4	0:0	4	}
water	235:4	0:0	2	sps
op	235:7	0:0	2	->
water	235:9	0:0	2	nb_st_rps
op	235:19	0:0	2	=
call	235:21	235:42	2	get_ue_golomb_long
arg	235:40	235:42	3	gb
water	235:40	0:0	4	gb
water	235:43	0:0	2	;
if	236:4	241:4	2	(sps -> nb_st_rps > MAX_SHORT_TERM_RPS_COUNT)
cond	236:8	236:25	3	sps -> nb_st_rps > MAX_SHORT_TERM_RPS_COUNT
water	236:8	0:0	4	sps
op	236:11	0:0	4	->
water	236:13	0:0	4	nb_st_rps
op	236:23	0:0	4	>
water	236:25	0:0	4	MAX_SHORT_TERM_RPS_COUNT
stmts	236:51	241:4	3	
water	236:51	0:0	4	{
call	237:8	238:29	4	av_log
arg	237:15	237:23	5	s->avctx
water	237:15	0:0	6	s
op	237:16	0:0	6	->
water	237:18	0:0	6	avctx
arg	237:25	237:37	5	AV_LOG_ERROR
water	237:25	0:0	6	AV_LOG_ERROR
arg	237:39	237:71	5	"Too many short term RPS: %d.\n"
water	237:39	0:0	6	"Too many short term RPS: %d.\n"
arg	238:15	238:29	5	sps->nb_st_rps
water	238:15	0:0	6	sps
op	238:18	0:0	6	->
water	238:20	0:0	6	nb_st_rps
water	238:30	0:0	4	;
water	239:8	0:0	4	ret
op	239:12	0:0	4	=
water	239:14	0:0	4	AVERROR_INVALIDDATA
water	239:33	0:0	4	;
goto	240:8	240:16	4	err
water	240:13	0:0	5	err
water	241:4	0:0	4	}
for	242:4	246:4	2	(i = 0 ;i < sps -> nb_st_rps;i ++)
forinit	242:9	242:14	3	i = 0 ;
water	242:9	0:0	4	i
op	242:11	0:0	4	=
water	242:13	0:0	4	0
water	242:14	0:0	4	;
cond	242:16	242:25	3	i < sps -> nb_st_rps
water	242:16	0:0	4	i
op	242:18	0:0	4	<
water	242:20	0:0	4	sps
op	242:23	0:0	4	->
water	242:25	0:0	4	nb_st_rps
forexpr	242:36	242:37	3	i ++
water	242:36	0:0	4	i
op	242:37	0:0	4	++
stmts	242:41	246:4	3	
water	242:41	0:0	4	{
if	243:8	245:20	4	(( ret =ff_hevc_decode_short_term_rps (s ,& sps -> st_rps [ i ] ,sps ,0 ) ) < 0)
cond	243:12	244:60	5	( ret =ff_hevc_decode_short_term_rps (s ,& sps -> st_rps [ i ] ,sps ,0 ) ) < 0
water	243:12	0:0	6	(
water	243:13	0:0	6	ret
op	243:17	0:0	6	=
call	243:19	244:55	6	ff_hevc_decode_short_term_rps
arg	243:49	243:50	7	s
water	243:49	0:0	8	s
arg	243:52	243:67	7	&sps->st_rps[i]
op	243:52	0:0	8	&
water	243:53	0:0	8	sps
op	243:56	0:0	8	->
water	243:58	0:0	8	st_rps
op	243:64	0:0	8	[
water	243:65	0:0	8	i
op	243:66	0:0	8	]
arg	244:49	244:52	7	sps
water	244:49	0:0	8	sps
arg	244:54	244:55	7	0
water	244:54	0:0	8	0
water	244:56	0:0	6	)
op	244:58	0:0	6	<
water	244:60	0:0	6	0
stmts	245:12	245:20	5	
goto	245:12	245:20	6	err
water	245:17	0:0	7	err
water	246:4	0:0	4	}
water	248:4	0:0	2	sps
op	248:7	0:0	2	->
water	248:9	0:0	2	long_term_ref_pics_present_flag
op	248:41	0:0	2	=
call	248:43	248:55	2	get_bits1
arg	248:53	248:55	3	gb
water	248:53	0:0	4	gb
water	248:56	0:0	2	;
if	249:4	255:4	2	(sps -> long_term_ref_pics_present_flag)
cond	249:8	249:13	3	sps -> long_term_ref_pics_present_flag
water	249:8	0:0	4	sps
op	249:11	0:0	4	->
water	249:13	0:0	4	long_term_ref_pics_present_flag
stmts	249:46	255:4	3	
water	249:46	0:0	4	{
water	250:8	0:0	4	sps
op	250:11	0:0	4	->
water	250:13	0:0	4	num_long_term_ref_pics_sps
op	250:40	0:0	4	=
call	250:42	250:63	4	get_ue_golomb_long
arg	250:61	250:63	5	gb
water	250:61	0:0	6	gb
water	250:64	0:0	4	;
for	251:8	254:8	4	(i = 0 ;i < sps -> num_long_term_ref_pics_sps;i ++)
forinit	251:13	251:18	5	i = 0 ;
water	251:13	0:0	6	i
op	251:15	0:0	6	=
water	251:17	0:0	6	0
water	251:18	0:0	6	;
cond	251:20	251:29	5	i < sps -> num_long_term_ref_pics_sps
water	251:20	0:0	6	i
op	251:22	0:0	6	<
water	251:24	0:0	6	sps
op	251:27	0:0	6	->
water	251:29	0:0	6	num_long_term_ref_pics_sps
forexpr	251:57	251:58	5	i ++
water	251:57	0:0	6	i
op	251:58	0:0	6	++
stmts	251:62	254:8	5	
water	251:62	0:0	6	{
water	252:12	0:0	6	sps
op	252:15	0:0	6	->
water	252:17	0:0	6	lt_ref_pic_poc_lsb_sps
op	252:39	0:0	6	[
water	252:40	0:0	6	i
op	252:41	0:0	6	]
op	252:49	0:0	6	=
call	252:51	252:85	6	get_bits
arg	252:60	252:62	7	gb
water	252:60	0:0	8	gb
arg	252:64	252:85	7	sps->log2_max_poc_lsb
water	252:64	0:0	8	sps
op	252:67	0:0	8	->
water	252:69	0:0	8	log2_max_poc_lsb
water	252:86	0:0	6	;
water	253:12	0:0	6	sps
op	253:15	0:0	6	->
water	253:17	0:0	6	used_by_curr_pic_lt_sps_flag
op	253:45	0:0	6	[
water	253:46	0:0	6	i
op	253:47	0:0	6	]
op	253:49	0:0	6	=
call	253:51	253:63	6	get_bits1
arg	253:61	253:63	7	gb
water	253:61	0:0	8	gb
water	253:64	0:0	6	;
water	254:8	0:0	6	}
water	255:4	0:0	4	}
water	257:4	0:0	2	sps
op	257:7	0:0	2	->
water	257:9	0:0	2	sps_temporal_mvp_enabled_flag
op	257:48	0:0	2	=
call	257:50	257:62	2	get_bits1
arg	257:60	257:62	3	gb
water	257:60	0:0	4	gb
water	257:63	0:0	2	;
water	258:4	0:0	2	sps
op	258:7	0:0	2	->
water	258:9	0:0	2	sps_strong_intra_smoothing_enable_flag
op	258:48	0:0	2	=
call	258:50	258:62	2	get_bits1
arg	258:60	258:62	3	gb
water	258:60	0:0	4	gb
water	258:63	0:0	2	;
water	259:4	0:0	2	sps
op	259:7	0:0	2	->
water	259:9	0:0	2	vui
op	259:12	0:0	2	.
water	259:13	0:0	2	sar
op	259:17	0:0	2	=
water	259:19	0:0	2	(
water	259:20	0:0	2	AVRational
water	259:30	0:0	2	)
water	259:31	0:0	2	{
water	259:32	0:0	2	0
water	259:33	0:0	2	,
water	259:35	0:0	2	1
water	259:36	0:0	2	}
water	259:37	0:0	2	;
water	260:4	0:0	2	vui_present
op	260:16	0:0	2	=
call	260:18	260:30	2	get_bits1
arg	260:28	260:30	3	gb
water	260:28	0:0	4	gb
water	260:31	0:0	2	;
if	261:4	262:26	2	(vui_present)
cond	261:8	261:8	3	vui_present
water	261:8	0:0	4	vui_present
stmts	262:8	262:26	3	
call	262:8	262:25	4	decode_vui
arg	262:19	262:20	5	s
water	262:19	0:0	6	s
arg	262:22	262:25	5	sps
water	262:22	0:0	6	sps
water	262:26	0:0	4	;
if	264:4	298:4	2	(get_bits1 (gb ))
cond	264:8	264:20	3	get_bits1 (gb )
call	264:8	264:20	4	get_bits1
arg	264:18	264:20	5	gb
water	264:18	0:0	6	gb
stmts	264:23	298:4	3	
water	264:23	0:0	4	{
decl	265:8	265:33	4	int	sps_extension_flag[1]
for	266:8	267:49	4	(i = 0 ;i < 1;i ++)
forinit	266:13	266:18	5	i = 0 ;
water	266:13	0:0	6	i
op	266:15	0:0	6	=
water	266:17	0:0	6	0
water	266:18	0:0	6	;
cond	266:20	266:24	5	i < 1
water	266:20	0:0	6	i
op	266:22	0:0	6	<
water	266:24	0:0	6	1
forexpr	266:27	266:28	5	i ++
water	266:27	0:0	6	i
op	266:28	0:0	6	++
stmts	267:12	267:49	5	
water	267:12	0:0	6	sps_extension_flag
op	267:30	0:0	6	[
water	267:31	0:0	6	i
op	267:32	0:0	6	]
op	267:34	0:0	6	=
call	267:36	267:48	6	get_bits1
arg	267:46	267:48	7	gb
water	267:46	0:0	8	gb
water	267:49	0:0	6	;
call	268:8	268:23	4	skip_bits
arg	268:18	268:20	5	gb
water	268:18	0:0	6	gb
arg	268:22	268:23	5	7
water	268:22	0:0	6	7
water	268:24	0:0	4	;
if	269:8	297:8	4	(sps_extension_flag [ 0 ])
cond	269:12	269:32	5	sps_extension_flag [ 0 ]
water	269:12	0:0	6	sps_extension_flag
op	269:30	0:0	6	[
water	269:31	0:0	6	0
op	269:32	0:0	6	]
stmts	269:35	297:8	5	
water	269:35	0:0	6	{
decl	270:12	270:50	6	int	extended_precision_processing_flag
decl	271:12	271:51	6	int	high_precision_offsets_enabled_flag
decl	272:12	272:51	6	int	cabac_bypass_alignment_enabled_flag
water	274:12	0:0	6	sps
op	274:15	0:0	6	->
water	274:17	0:0	6	transform_skip_rotation_enabled_flag
op	274:54	0:0	6	=
call	274:56	274:68	6	get_bits1
arg	274:66	274:68	7	gb
water	274:66	0:0	8	gb
water	274:69	0:0	6	;
water	275:12	0:0	6	sps
op	275:15	0:0	6	->
water	275:17	0:0	6	transform_skip_context_enabled_flag
op	275:54	0:0	6	=
call	275:56	275:68	6	get_bits1
arg	275:66	275:68	7	gb
water	275:66	0:0	8	gb
water	275:69	0:0	6	;
water	276:12	0:0	6	sps
op	276:15	0:0	6	->
water	276:17	0:0	6	implicit_rdpcm_enabled_flag
op	276:45	0:0	6	=
call	276:47	276:59	6	get_bits1
arg	276:57	276:59	7	gb
water	276:57	0:0	8	gb
water	276:60	0:0	6	;
water	278:12	0:0	6	sps
op	278:15	0:0	6	->
water	278:17	0:0	6	explicit_rdpcm_enabled_flag
op	278:45	0:0	6	=
call	278:47	278:59	6	get_bits1
arg	278:57	278:59	7	gb
water	278:57	0:0	8	gb
water	278:60	0:0	6	;
water	280:12	0:0	6	extended_precision_processing_flag
op	280:47	0:0	6	=
call	280:49	280:61	6	get_bits1
arg	280:59	280:61	7	gb
water	280:59	0:0	8	gb
water	280:62	0:0	6	;
if	281:12	283:78	6	(extended_precision_processing_flag)
cond	281:16	281:16	7	extended_precision_processing_flag
water	281:16	0:0	8	extended_precision_processing_flag
stmts	282:16	283:78	7	
call	282:16	283:77	8	av_log
arg	282:23	282:31	9	s->avctx
water	282:23	0:0	10	s
op	282:24	0:0	10	->
water	282:26	0:0	10	avctx
arg	282:33	282:47	9	AV_LOG_WARNING
water	282:33	0:0	10	AV_LOG_WARNING
arg	283:19	283:77	9	"extended_precision_processing_flag not yet implemented\n"
water	283:19	0:0	10	"extended_precision_processing_flag not yet implemented\n"
water	283:78	0:0	8	;
water	285:12	0:0	6	sps
op	285:15	0:0	6	->
water	285:17	0:0	6	intra_smoothing_disabled_flag
op	285:53	0:0	6	=
call	285:55	285:67	6	get_bits1
arg	285:65	285:67	7	gb
water	285:65	0:0	8	gb
water	285:68	0:0	6	;
water	286:12	0:0	6	high_precision_offsets_enabled_flag
op	286:49	0:0	6	=
call	286:51	286:63	6	get_bits1
arg	286:61	286:63	7	gb
water	286:61	0:0	8	gb
water	286:64	0:0	6	;
if	287:12	289:79	6	(high_precision_offsets_enabled_flag)
cond	287:16	287:16	7	high_precision_offsets_enabled_flag
water	287:16	0:0	8	high_precision_offsets_enabled_flag
stmts	288:16	289:79	7	
call	288:16	289:78	8	av_log
arg	288:23	288:31	9	s->avctx
water	288:23	0:0	10	s
op	288:24	0:0	10	->
water	288:26	0:0	10	avctx
arg	288:33	288:47	9	AV_LOG_WARNING
water	288:33	0:0	10	AV_LOG_WARNING
arg	289:19	289:78	9	"high_precision_offsets_enabled_flag not yet implemented\n"
water	289:19	0:0	10	"high_precision_offsets_enabled_flag not yet implemented\n"
water	289:79	0:0	8	;
water	291:12	0:0	6	sps
op	291:15	0:0	6	->
water	291:17	0:0	6	persistent_rice_adaptation_enabled_flag
op	291:57	0:0	6	=
call	291:59	291:71	6	get_bits1
arg	291:69	291:71	7	gb
water	291:69	0:0	8	gb
water	291:72	0:0	6	;
water	293:12	0:0	6	cabac_bypass_alignment_enabled_flag
op	293:49	0:0	6	=
call	293:51	293:63	6	get_bits1
arg	293:61	293:63	7	gb
water	293:61	0:0	8	gb
water	293:64	0:0	6	;
if	294:12	296:79	6	(cabac_bypass_alignment_enabled_flag)
cond	294:16	294:16	7	cabac_bypass_alignment_enabled_flag
water	294:16	0:0	8	cabac_bypass_alignment_enabled_flag
stmts	295:16	296:79	7	
call	295:16	296:78	8	av_log
arg	295:23	295:31	9	s->avctx
water	295:23	0:0	10	s
op	295:24	0:0	10	->
water	295:26	0:0	10	avctx
arg	295:33	295:47	9	AV_LOG_WARNING
water	295:33	0:0	10	AV_LOG_WARNING
arg	296:19	296:78	9	"cabac_bypass_alignment_enabled_flag not yet implemented\n"
water	296:19	0:0	10	"cabac_bypass_alignment_enabled_flag not yet implemented\n"
water	296:79	0:0	8	;
water	297:8	0:0	6	}
water	298:4	0:0	4	}
if	299:4	304:4	2	(s -> apply_defdispwin)
cond	299:8	299:11	3	s -> apply_defdispwin
water	299:8	0:0	4	s
op	299:9	0:0	4	->
water	299:11	0:0	4	apply_defdispwin
stmts	299:29	304:4	3	
water	299:29	0:0	4	{
water	300:8	0:0	4	sps
op	300:11	0:0	4	->
water	300:13	0:0	4	output_window
op	300:26	0:0	4	.
water	300:27	0:0	4	left_offset
op	300:41	0:0	4	+=
water	300:44	0:0	4	sps
op	300:47	0:0	4	->
water	300:49	0:0	4	vui
op	300:52	0:0	4	.
water	300:53	0:0	4	def_disp_win
op	300:65	0:0	4	.
water	300:66	0:0	4	left_offset
water	300:77	0:0	4	;
water	301:8	0:0	4	sps
op	301:11	0:0	4	->
water	301:13	0:0	4	output_window
op	301:26	0:0	4	.
water	301:27	0:0	4	right_offset
op	301:41	0:0	4	+=
water	301:44	0:0	4	sps
op	301:47	0:0	4	->
water	301:49	0:0	4	vui
op	301:52	0:0	4	.
water	301:53	0:0	4	def_disp_win
op	301:65	0:0	4	.
water	301:66	0:0	4	right_offset
water	301:78	0:0	4	;
water	302:8	0:0	4	sps
op	302:11	0:0	4	->
water	302:13	0:0	4	output_window
op	302:26	0:0	4	.
water	302:27	0:0	4	top_offset
op	302:41	0:0	4	+=
water	302:44	0:0	4	sps
op	302:47	0:0	4	->
water	302:49	0:0	4	vui
op	302:52	0:0	4	.
water	302:53	0:0	4	def_disp_win
op	302:65	0:0	4	.
water	302:66	0:0	4	top_offset
water	302:76	0:0	4	;
water	303:8	0:0	4	sps
op	303:11	0:0	4	->
water	303:13	0:0	4	output_window
op	303:26	0:0	4	.
water	303:27	0:0	4	bottom_offset
op	303:41	0:0	4	+=
water	303:44	0:0	4	sps
op	303:47	0:0	4	->
water	303:49	0:0	4	vui
op	303:52	0:0	4	.
water	303:53	0:0	4	def_disp_win
op	303:65	0:0	4	.
water	303:66	0:0	4	bottom_offset
water	303:79	0:0	4	;
water	304:4	0:0	4	}
if	305:4	311:4	2	(sps -> output_window . left_offset & ( 0 x1F >> ( sps -> pixel_shift ) ) && ! ( s -> avctx -> flags & CODEC_FLAG_UNALIGNED ))
cond	305:8	306:48	3	sps -> output_window . left_offset & ( 0 x1F >> ( sps -> pixel_shift ) ) && ! ( s -> avctx -> flags & CODEC_FLAG_UNALIGNED )
water	305:8	0:0	4	sps
op	305:11	0:0	4	->
water	305:13	0:0	4	output_window
op	305:26	0:0	4	.
water	305:27	0:0	4	left_offset
op	305:39	0:0	4	&
water	305:41	0:0	4	(
water	305:42	0:0	4	0
water	305:43	0:0	4	x1F
op	305:47	0:0	4	>>
water	305:50	0:0	4	(
water	305:51	0:0	4	sps
op	305:54	0:0	4	->
water	305:56	0:0	4	pixel_shift
water	305:67	0:0	4	)
water	305:68	0:0	4	)
op	305:70	0:0	4	&&
op	306:8	0:0	4	!
water	306:9	0:0	4	(
water	306:10	0:0	4	s
op	306:11	0:0	4	->
water	306:13	0:0	4	avctx
op	306:18	0:0	4	->
water	306:20	0:0	4	flags
op	306:26	0:0	4	&
water	306:28	0:0	4	CODEC_FLAG_UNALIGNED
water	306:48	0:0	4	)
stmts	306:51	311:4	3	
water	306:51	0:0	4	{
water	307:8	0:0	4	sps
op	307:11	0:0	4	->
water	307:13	0:0	4	output_window
op	307:26	0:0	4	.
water	307:27	0:0	4	left_offset
op	307:39	0:0	4	&=
op	307:42	0:0	4	~
water	307:43	0:0	4	(
water	307:44	0:0	4	0
water	307:45	0:0	4	x1F
op	307:49	0:0	4	>>
water	307:52	0:0	4	(
water	307:53	0:0	4	sps
op	307:56	0:0	4	->
water	307:58	0:0	4	pixel_shift
water	307:69	0:0	4	)
water	307:70	0:0	4	)
water	307:71	0:0	4	;
call	308:8	310:45	4	av_log
arg	308:15	308:23	5	s->avctx
water	308:15	0:0	6	s
op	308:16	0:0	6	->
water	308:18	0:0	6	avctx
arg	308:25	308:39	5	AV_LOG_WARNING
water	308:25	0:0	6	AV_LOG_WARNING
arg	308:41	309:56	5	"Reducing left output window to %d ""chroma samples to preserve alignment.\n"
water	308:41	0:0	6	"Reducing left output window to %d "
water	309:15	0:0	6	"chroma samples to preserve alignment.\n"
arg	310:15	310:45	5	sps->output_window.left_offset
water	310:15	0:0	6	sps
op	310:18	0:0	6	->
water	310:20	0:0	6	output_window
op	310:33	0:0	6	.
water	310:34	0:0	6	left_offset
water	310:46	0:0	4	;
water	311:4	0:0	4	}
water	312:4	0:0	2	sps
op	312:7	0:0	2	->
water	312:9	0:0	2	output_width
op	312:23	0:0	2	=
water	312:25	0:0	2	sps
op	312:28	0:0	2	->
water	312:30	0:0	2	width
op	312:36	0:0	2	-
water	313:25	0:0	2	(
water	313:26	0:0	2	sps
op	313:29	0:0	2	->
water	313:31	0:0	2	output_window
op	313:44	0:0	2	.
water	313:45	0:0	2	left_offset
op	313:57	0:0	2	+
water	313:59	0:0	2	sps
op	313:62	0:0	2	->
water	313:64	0:0	2	output_window
op	313:77	0:0	2	.
water	313:78	0:0	2	right_offset
water	313:90	0:0	2	)
water	313:91	0:0	2	;
water	314:4	0:0	2	sps
op	314:7	0:0	2	->
water	314:9	0:0	2	output_height
op	314:23	0:0	2	=
water	314:25	0:0	2	sps
op	314:28	0:0	2	->
water	314:30	0:0	2	height
op	314:37	0:0	2	-
water	315:25	0:0	2	(
water	315:26	0:0	2	sps
op	315:29	0:0	2	->
water	315:31	0:0	2	output_window
op	315:44	0:0	2	.
water	315:45	0:0	2	top_offset
op	315:56	0:0	2	+
water	315:58	0:0	2	sps
op	315:61	0:0	2	->
water	315:63	0:0	2	output_window
op	315:76	0:0	2	.
water	315:77	0:0	2	bottom_offset
water	315:90	0:0	2	)
water	315:91	0:0	2	;
if	316:4	331:4	2	(sps -> output_width <= 0 || sps -> output_height <= 0)
cond	316:8	316:56	3	sps -> output_width <= 0 || sps -> output_height <= 0
water	316:8	0:0	4	sps
op	316:11	0:0	4	->
water	316:13	0:0	4	output_width
op	316:26	0:0	4	<=
water	316:29	0:0	4	0
op	316:31	0:0	4	||
water	316:34	0:0	4	sps
op	316:37	0:0	4	->
water	316:39	0:0	4	output_height
op	316:53	0:0	4	<=
water	316:56	0:0	4	0
stmts	316:59	331:4	3	
water	316:59	0:0	4	{
call	317:8	318:52	4	av_log
arg	317:15	317:23	5	s->avctx
water	317:15	0:0	6	s
op	317:16	0:0	6	->
water	317:18	0:0	6	avctx
arg	317:25	317:39	5	AV_LOG_WARNING
water	317:25	0:0	6	AV_LOG_WARNING
arg	317:41	317:85	5	"Invalid visible frame dimensions: %dx%d.\n"
water	317:41	0:0	6	"Invalid visible frame dimensions: %dx%d.\n"
arg	318:15	318:32	5	sps->output_width
water	318:15	0:0	6	sps
op	318:18	0:0	6	->
water	318:20	0:0	6	output_width
arg	318:34	318:52	5	sps->output_height
water	318:34	0:0	6	sps
op	318:37	0:0	6	->
water	318:39	0:0	6	output_height
water	318:53	0:0	4	;
if	319:8	322:8	4	(s -> avctx -> err_recognition & AV_EF_EXPLODE)
cond	319:12	319:40	5	s -> avctx -> err_recognition & AV_EF_EXPLODE
water	319:12	0:0	6	s
op	319:13	0:0	6	->
water	319:15	0:0	6	avctx
op	319:20	0:0	6	->
water	319:22	0:0	6	err_recognition
op	319:38	0:0	6	&
water	319:40	0:0	6	AV_EF_EXPLODE
stmts	319:55	322:8	5	
water	319:55	0:0	6	{
water	320:12	0:0	6	ret
op	320:16	0:0	6	=
water	320:18	0:0	6	AVERROR_INVALIDDATA
water	320:37	0:0	6	;
goto	321:12	321:20	6	err
water	321:17	0:0	7	err
water	322:8	0:0	6	}
call	323:8	324:54	4	av_log
arg	323:15	323:23	5	s->avctx
water	323:15	0:0	6	s
op	323:16	0:0	6	->
water	323:18	0:0	6	avctx
arg	323:25	323:39	5	AV_LOG_WARNING
water	323:25	0:0	6	AV_LOG_WARNING
arg	324:15	324:54	5	"Displaying the whole video surface.\n"
water	324:15	0:0	6	"Displaying the whole video surface.\n"
water	324:55	0:0	4	;
water	325:8	0:0	4	sps
op	325:11	0:0	4	->
water	325:13	0:0	4	pic_conf_win
op	325:25	0:0	4	.
water	325:26	0:0	4	left_offset
op	325:40	0:0	4	=
water	326:8	0:0	4	sps
op	326:11	0:0	4	->
water	326:13	0:0	4	pic_conf_win
op	326:25	0:0	4	.
water	326:26	0:0	4	right_offset
op	326:40	0:0	4	=
water	327:8	0:0	4	sps
op	327:11	0:0	4	->
water	327:13	0:0	4	pic_conf_win
op	327:25	0:0	4	.
water	327:26	0:0	4	top_offset
op	327:40	0:0	4	=
water	328:8	0:0	4	sps
op	328:11	0:0	4	->
water	328:13	0:0	4	pic_conf_win
op	328:25	0:0	4	.
water	328:26	0:0	4	bottom_offset
op	328:40	0:0	4	=
water	328:42	0:0	4	0
water	328:43	0:0	4	;
water	329:8	0:0	4	sps
op	329:11	0:0	4	->
water	329:13	0:0	4	output_width
op	329:40	0:0	4	=
water	329:42	0:0	4	sps
op	329:45	0:0	4	->
water	329:47	0:0	4	width
water	329:52	0:0	4	;
water	330:8	0:0	4	sps
op	330:11	0:0	4	->
water	330:13	0:0	4	output_height
op	330:40	0:0	4	=
water	330:42	0:0	4	sps
op	330:45	0:0	4	->
water	330:47	0:0	4	height
water	330:53	0:0	4	;
water	331:4	0:0	4	}
water	334:4	0:0	2	sps
op	334:7	0:0	2	->
water	334:9	0:0	2	log2_ctb_size
op	334:23	0:0	2	=
water	334:25	0:0	2	sps
op	334:28	0:0	2	->
water	334:30	0:0	2	log2_min_cb_size
op	334:47	0:0	2	+
water	335:25	0:0	2	sps
op	335:28	0:0	2	->
water	335:30	0:0	2	log2_diff_max_min_coding_block_size
water	335:65	0:0	2	;
water	336:4	0:0	2	sps
op	336:7	0:0	2	->
water	336:9	0:0	2	log2_min_pu_size
op	336:26	0:0	2	=
water	336:28	0:0	2	sps
op	336:31	0:0	2	->
water	336:33	0:0	2	log2_min_cb_size
op	336:50	0:0	2	-
water	336:52	0:0	2	1
water	336:53	0:0	2	;
water	338:4	0:0	2	sps
op	338:7	0:0	2	->
water	338:9	0:0	2	ctb_width
op	338:20	0:0	2	=
water	338:22	0:0	2	(
water	338:23	0:0	2	sps
op	338:26	0:0	2	->
water	338:28	0:0	2	width
op	338:35	0:0	2	+
water	338:37	0:0	2	(
water	338:38	0:0	2	1
op	338:40	0:0	2	<<
water	338:43	0:0	2	sps
op	338:46	0:0	2	->
water	338:48	0:0	2	log2_ctb_size
water	338:61	0:0	2	)
op	338:63	0:0	2	-
water	338:65	0:0	2	1
water	338:66	0:0	2	)
op	338:68	0:0	2	>>
water	338:71	0:0	2	sps
op	338:74	0:0	2	->
water	338:76	0:0	2	log2_ctb_size
water	338:89	0:0	2	;
water	339:4	0:0	2	sps
op	339:7	0:0	2	->
water	339:9	0:0	2	ctb_height
op	339:20	0:0	2	=
water	339:22	0:0	2	(
water	339:23	0:0	2	sps
op	339:26	0:0	2	->
water	339:28	0:0	2	height
op	339:35	0:0	2	+
water	339:37	0:0	2	(
water	339:38	0:0	2	1
op	339:40	0:0	2	<<
water	339:43	0:0	2	sps
op	339:46	0:0	2	->
water	339:48	0:0	2	log2_ctb_size
water	339:61	0:0	2	)
op	339:63	0:0	2	-
water	339:65	0:0	2	1
water	339:66	0:0	2	)
op	339:68	0:0	2	>>
water	339:71	0:0	2	sps
op	339:74	0:0	2	->
water	339:76	0:0	2	log2_ctb_size
water	339:89	0:0	2	;
water	340:4	0:0	2	sps
op	340:7	0:0	2	->
water	340:9	0:0	2	ctb_size
op	340:20	0:0	2	=
water	340:22	0:0	2	sps
op	340:25	0:0	2	->
water	340:27	0:0	2	ctb_width
op	340:37	0:0	2	*
water	340:39	0:0	2	sps
op	340:42	0:0	2	->
water	340:44	0:0	2	ctb_height
water	340:54	0:0	2	;
water	342:4	0:0	2	sps
op	342:7	0:0	2	->
water	342:9	0:0	2	min_cb_width
op	342:23	0:0	2	=
water	342:25	0:0	2	sps
op	342:28	0:0	2	->
water	342:30	0:0	2	width
op	342:37	0:0	2	>>
water	342:40	0:0	2	sps
op	342:43	0:0	2	->
water	342:45	0:0	2	log2_min_cb_size
water	342:61	0:0	2	;
water	343:4	0:0	2	sps
op	343:7	0:0	2	->
water	343:9	0:0	2	min_cb_height
op	343:23	0:0	2	=
water	343:25	0:0	2	sps
op	343:28	0:0	2	->
water	343:30	0:0	2	height
op	343:37	0:0	2	>>
water	343:40	0:0	2	sps
op	343:43	0:0	2	->
water	343:45	0:0	2	log2_min_cb_size
water	343:61	0:0	2	;
water	344:4	0:0	2	sps
op	344:7	0:0	2	->
water	344:9	0:0	2	min_tb_width
op	344:23	0:0	2	=
water	344:25	0:0	2	sps
op	344:28	0:0	2	->
water	344:30	0:0	2	width
op	344:37	0:0	2	>>
water	344:40	0:0	2	sps
op	344:43	0:0	2	->
water	344:45	0:0	2	log2_min_tb_size
water	344:61	0:0	2	;
water	345:4	0:0	2	sps
op	345:7	0:0	2	->
water	345:9	0:0	2	min_tb_height
op	345:23	0:0	2	=
water	345:25	0:0	2	sps
op	345:28	0:0	2	->
water	345:30	0:0	2	height
op	345:37	0:0	2	>>
water	345:40	0:0	2	sps
op	345:43	0:0	2	->
water	345:45	0:0	2	log2_min_tb_size
water	345:61	0:0	2	;
water	346:4	0:0	2	sps
op	346:7	0:0	2	->
water	346:9	0:0	2	min_pu_width
op	346:23	0:0	2	=
water	346:25	0:0	2	sps
op	346:28	0:0	2	->
water	346:30	0:0	2	width
op	346:37	0:0	2	>>
water	346:40	0:0	2	sps
op	346:43	0:0	2	->
water	346:45	0:0	2	log2_min_pu_size
water	346:61	0:0	2	;
water	347:4	0:0	2	sps
op	347:7	0:0	2	->
water	347:9	0:0	2	min_pu_height
op	347:23	0:0	2	=
water	347:25	0:0	2	sps
op	347:28	0:0	2	->
water	347:30	0:0	2	height
op	347:37	0:0	2	>>
water	347:40	0:0	2	sps
op	347:43	0:0	2	->
water	347:45	0:0	2	log2_min_pu_size
water	347:61	0:0	2	;
water	348:4	0:0	2	sps
op	348:7	0:0	2	->
water	348:9	0:0	2	tb_mask
op	348:23	0:0	2	=
water	348:25	0:0	2	(
water	348:26	0:0	2	1
op	348:28	0:0	2	<<
water	348:31	0:0	2	(
water	348:32	0:0	2	sps
op	348:35	0:0	2	->
water	348:37	0:0	2	log2_ctb_size
op	348:51	0:0	2	-
water	348:53	0:0	2	sps
op	348:56	0:0	2	->
water	348:58	0:0	2	log2_min_tb_size
water	348:74	0:0	2	)
water	348:75	0:0	2	)
op	348:77	0:0	2	-
water	348:79	0:0	2	1
water	348:80	0:0	2	;
water	350:4	0:0	2	sps
op	350:7	0:0	2	->
water	350:9	0:0	2	qp_bd_offset
op	350:22	0:0	2	=
water	350:24	0:0	2	6
op	350:26	0:0	2	*
water	350:28	0:0	2	(
water	350:29	0:0	2	sps
op	350:32	0:0	2	->
water	350:34	0:0	2	bit_depth
op	350:44	0:0	2	-
water	350:46	0:0	2	8
water	350:47	0:0	2	)
water	350:48	0:0	2	;
if	352:4	356:4	2	(sps -> width & ( ( 1 << sps -> log2_min_cb_size ) - 1 ) || sps -> height & ( ( 1 << sps -> log2_min_cb_size ) - 1 ))
cond	352:8	353:55	3	sps -> width & ( ( 1 << sps -> log2_min_cb_size ) - 1 ) || sps -> height & ( ( 1 << sps -> log2_min_cb_size ) - 1 )
water	352:8	0:0	4	sps
op	352:11	0:0	4	->
water	352:13	0:0	4	width
op	352:20	0:0	4	&
water	352:22	0:0	4	(
water	352:23	0:0	4	(
water	352:24	0:0	4	1
op	352:26	0:0	4	<<
water	352:29	0:0	4	sps
op	352:32	0:0	4	->
water	352:34	0:0	4	log2_min_cb_size
water	352:50	0:0	4	)
op	352:52	0:0	4	-
water	352:54	0:0	4	1
water	352:55	0:0	4	)
op	352:57	0:0	4	||
water	353:8	0:0	4	sps
op	353:11	0:0	4	->
water	353:13	0:0	4	height
op	353:20	0:0	4	&
water	353:22	0:0	4	(
water	353:23	0:0	4	(
water	353:24	0:0	4	1
op	353:26	0:0	4	<<
water	353:29	0:0	4	sps
op	353:32	0:0	4	->
water	353:34	0:0	4	log2_min_cb_size
water	353:50	0:0	4	)
op	353:52	0:0	4	-
water	353:54	0:0	4	1
water	353:55	0:0	4	)
stmts	353:58	356:4	3	
water	353:58	0:0	4	{
call	354:8	354:74	4	av_log
arg	354:15	354:23	5	s->avctx
water	354:15	0:0	6	s
op	354:16	0:0	6	->
water	354:18	0:0	6	avctx
arg	354:25	354:37	5	AV_LOG_ERROR
water	354:25	0:0	6	AV_LOG_ERROR
arg	354:39	354:74	5	"Invalid coded frame dimensions.\n"
water	354:39	0:0	6	"Invalid coded frame dimensions.\n"
water	354:75	0:0	4	;
goto	355:8	355:16	4	err
water	355:13	0:0	5	err
water	356:4	0:0	4	}
if	358:4	361:4	2	(sps -> log2_ctb_size > MAX_LOG2_CTB_SIZE)
cond	358:8	358:29	3	sps -> log2_ctb_size > MAX_LOG2_CTB_SIZE
water	358:8	0:0	4	sps
op	358:11	0:0	4	->
water	358:13	0:0	4	log2_ctb_size
op	358:27	0:0	4	>
water	358:29	0:0	4	MAX_LOG2_CTB_SIZE
stmts	358:48	361:4	3	
water	358:48	0:0	4	{
call	359:8	359:90	4	av_log
arg	359:15	359:23	5	s->avctx
water	359:15	0:0	6	s
op	359:16	0:0	6	->
water	359:18	0:0	6	avctx
arg	359:25	359:37	5	AV_LOG_ERROR
water	359:25	0:0	6	AV_LOG_ERROR
arg	359:39	359:70	5	"CTB size out of range: 2^%d\n"
water	359:39	0:0	6	"CTB size out of range: 2^%d\n"
arg	359:72	359:90	5	sps->log2_ctb_size
water	359:72	0:0	6	sps
op	359:75	0:0	6	->
water	359:77	0:0	6	log2_ctb_size
water	359:91	0:0	4	;
goto	360:8	360:16	4	err
water	360:13	0:0	5	err
water	361:4	0:0	4	}
if	362:4	366:4	2	(sps -> max_transform_hierarchy_depth_inter > sps -> log2_ctb_size - sps -> log2_min_tb_size)
cond	362:8	362:77	3	sps -> max_transform_hierarchy_depth_inter > sps -> log2_ctb_size - sps -> log2_min_tb_size
water	362:8	0:0	4	sps
op	362:11	0:0	4	->
water	362:13	0:0	4	max_transform_hierarchy_depth_inter
op	362:49	0:0	4	>
water	362:51	0:0	4	sps
op	362:54	0:0	4	->
water	362:56	0:0	4	log2_ctb_size
op	362:70	0:0	4	-
water	362:72	0:0	4	sps
op	362:75	0:0	4	->
water	362:77	0:0	4	log2_min_tb_size
stmts	362:95	366:4	3	
water	362:95	0:0	4	{
call	363:8	364:55	4	av_log
arg	363:15	363:23	5	s->avctx
water	363:15	0:0	6	s
op	363:16	0:0	6	->
water	363:18	0:0	6	avctx
arg	363:25	363:37	5	AV_LOG_ERROR
water	363:25	0:0	6	AV_LOG_ERROR
arg	363:39	363:95	5	"max_transform_hierarchy_depth_inter out of range: %d\n"
water	363:39	0:0	6	"max_transform_hierarchy_depth_inter out of range: %d\n"
arg	364:15	364:55	5	sps->max_transform_hierarchy_depth_inter
water	364:15	0:0	6	sps
op	364:18	0:0	6	->
water	364:20	0:0	6	max_transform_hierarchy_depth_inter
water	364:56	0:0	4	;
goto	365:8	365:16	4	err
water	365:13	0:0	5	err
water	366:4	0:0	4	}
if	367:4	371:4	2	(sps -> max_transform_hierarchy_depth_intra > sps -> log2_ctb_size - sps -> log2_min_tb_size)
cond	367:8	367:77	3	sps -> max_transform_hierarchy_depth_intra > sps -> log2_ctb_size - sps -> log2_min_tb_size
water	367:8	0:0	4	sps
op	367:11	0:0	4	->
water	367:13	0:0	4	max_transform_hierarchy_depth_intra
op	367:49	0:0	4	>
water	367:51	0:0	4	sps
op	367:54	0:0	4	->
water	367:56	0:0	4	log2_ctb_size
op	367:70	0:0	4	-
water	367:72	0:0	4	sps
op	367:75	0:0	4	->
water	367:77	0:0	4	log2_min_tb_size
stmts	367:95	371:4	3	
water	367:95	0:0	4	{
call	368:8	369:55	4	av_log
arg	368:15	368:23	5	s->avctx
water	368:15	0:0	6	s
op	368:16	0:0	6	->
water	368:18	0:0	6	avctx
arg	368:25	368:37	5	AV_LOG_ERROR
water	368:25	0:0	6	AV_LOG_ERROR
arg	368:39	368:95	5	"max_transform_hierarchy_depth_intra out of range: %d\n"
water	368:39	0:0	6	"max_transform_hierarchy_depth_intra out of range: %d\n"
arg	369:15	369:55	5	sps->max_transform_hierarchy_depth_intra
water	369:15	0:0	6	sps
op	369:18	0:0	6	->
water	369:20	0:0	6	max_transform_hierarchy_depth_intra
water	369:56	0:0	4	;
goto	370:8	370:16	4	err
water	370:13	0:0	5	err
water	371:4	0:0	4	}
if	372:4	377:4	2	(sps -> log2_max_trafo_size >FFMIN (sps -> log2_ctb_size ,5 ))
cond	372:8	372:62	3	sps -> log2_max_trafo_size >FFMIN (sps -> log2_ctb_size ,5 )
water	372:8	0:0	4	sps
op	372:11	0:0	4	->
water	372:13	0:0	4	log2_max_trafo_size
op	372:33	0:0	4	>
call	372:35	372:62	4	FFMIN
arg	372:41	372:59	5	sps->log2_ctb_size
water	372:41	0:0	6	sps
op	372:44	0:0	6	->
water	372:46	0:0	6	log2_ctb_size
arg	372:61	372:62	5	5
water	372:61	0:0	6	5
stmts	372:65	377:4	3	
water	372:65	0:0	4	{
call	373:8	375:39	4	av_log
arg	373:15	373:23	5	s->avctx
water	373:15	0:0	6	s
op	373:16	0:0	6	->
water	373:18	0:0	6	avctx
arg	373:25	373:37	5	AV_LOG_ERROR
water	373:25	0:0	6	AV_LOG_ERROR
arg	374:15	374:60	5	"max transform block size out of range: %d\n"
water	374:15	0:0	6	"max transform block size out of range: %d\n"
arg	375:15	375:39	5	sps->log2_max_trafo_size
water	375:15	0:0	6	sps
op	375:18	0:0	6	->
water	375:20	0:0	6	log2_max_trafo_size
water	375:40	0:0	4	;
goto	376:8	376:16	4	err
water	376:13	0:0	5	err
water	377:4	0:0	4	}
if	379:4	386:4	2	(s -> avctx -> debug & FF_DEBUG_BITSTREAM)
cond	379:8	379:26	3	s -> avctx -> debug & FF_DEBUG_BITSTREAM
water	379:8	0:0	4	s
op	379:9	0:0	4	->
water	379:11	0:0	4	avctx
op	379:16	0:0	4	->
water	379:18	0:0	4	debug
op	379:24	0:0	4	&
water	379:26	0:0	4	FF_DEBUG_BITSTREAM
stmts	379:46	386:4	3	
water	379:46	0:0	4	{
call	380:8	385:48	4	av_log
arg	380:15	380:23	5	s->avctx
water	380:15	0:0	6	s
op	380:16	0:0	6	->
water	380:18	0:0	6	avctx
arg	380:25	380:37	5	AV_LOG_DEBUG
water	380:25	0:0	6	AV_LOG_DEBUG
arg	381:15	382:51	5	"Parsed SPS: id %d; coded wxh: %dx%d; ""cropped wxh: %dx%d; pix_fmt: %s.\n"
water	381:15	0:0	6	"Parsed SPS: id %d; coded wxh: %dx%d; "
water	382:15	0:0	6	"cropped wxh: %dx%d; pix_fmt: %s.\n"
arg	383:15	383:21	5	sps_id
water	383:15	0:0	6	sps_id
arg	383:23	383:33	5	sps->width
water	383:23	0:0	6	sps
op	383:26	0:0	6	->
water	383:28	0:0	6	width
arg	383:35	383:46	5	sps->height
water	383:35	0:0	6	sps
op	383:38	0:0	6	->
water	383:40	0:0	6	height
arg	384:15	384:32	5	sps->output_width
water	384:15	0:0	6	sps
op	384:18	0:0	6	->
water	384:20	0:0	6	output_width
arg	384:34	384:52	5	sps->output_height
water	384:34	0:0	6	sps
op	384:37	0:0	6	->
water	384:39	0:0	6	output_height
arg	385:15	385:48	5	av_get_pix_fmt_name(sps->pix_fmt)
call	385:15	385:47	6	av_get_pix_fmt_name
arg	385:35	385:47	7	sps->pix_fmt
water	385:35	0:0	8	sps
op	385:38	0:0	8	->
water	385:40	0:0	8	pix_fmt
water	385:49	0:0	4	;
water	386:4	0:0	4	}
if	391:4	394:4	2	(s -> sps_list [ sps_id ] && !memcmp (s -> sps_list [ sps_id ] -> data ,sps_buf -> data ,sps_buf -> size ))
cond	391:8	392:71	3	s -> sps_list [ sps_id ] && !memcmp (s -> sps_list [ sps_id ] -> data ,sps_buf -> data ,sps_buf -> size )
water	391:8	0:0	4	s
op	391:9	0:0	4	->
water	391:11	0:0	4	sps_list
op	391:19	0:0	4	[
water	391:20	0:0	4	sps_id
op	391:26	0:0	4	]
op	391:28	0:0	4	&&
op	392:8	0:0	4	!
call	392:9	392:71	4	memcmp
arg	392:16	392:41	5	s->sps_list[sps_id]->data
water	392:16	0:0	6	s
op	392:17	0:0	6	->
water	392:19	0:0	6	sps_list
op	392:27	0:0	6	[
water	392:28	0:0	6	sps_id
op	392:34	0:0	6	]
op	392:35	0:0	6	->
water	392:37	0:0	6	data
arg	392:43	392:56	5	sps_buf->data
water	392:43	0:0	6	sps_buf
op	392:50	0:0	6	->
water	392:52	0:0	6	data
arg	392:58	392:71	5	sps_buf->size
water	392:58	0:0	6	sps_buf
op	392:65	0:0	6	->
water	392:67	0:0	6	size
stmts	392:74	394:4	3	
water	392:74	0:0	4	{
call	393:8	393:32	4	av_buffer_unref
arg	393:24	393:32	5	&sps_buf
op	393:24	0:0	6	&
water	393:25	0:0	6	sps_buf
water	393:33	0:0	4	;
water	394:4	0:0	4	}
else	394:6	407:4	2
stmts	394:11	407:4	3	
water	394:11	0:0	4	{
for	395:8	398:8	4	(i = 0 ;i <FF_ARRAY_ELEMS (s -> pps_list );i ++)
forinit	395:13	395:18	5	i = 0 ;
water	395:13	0:0	6	i
op	395:15	0:0	6	=
water	395:17	0:0	6	0
water	395:18	0:0	6	;
cond	395:20	395:50	5	i <FF_ARRAY_ELEMS (s -> pps_list )
water	395:20	0:0	6	i
op	395:22	0:0	6	<
call	395:24	395:50	6	FF_ARRAY_ELEMS
arg	395:39	395:50	7	s->pps_list
water	395:39	0:0	8	s
op	395:40	0:0	8	->
water	395:42	0:0	8	pps_list
forexpr	395:53	395:54	5	i ++
water	395:53	0:0	6	i
op	395:54	0:0	6	++
stmts	395:58	398:8	5	
water	395:58	0:0	6	{
if	396:12	397:48	6	(s -> pps_list [ i ] && ( ( HEVCPPS * ) s -> pps_list [ i ] -> data ) -> sps_id == sps_id)
cond	396:16	396:78	7	s -> pps_list [ i ] && ( ( HEVCPPS * ) s -> pps_list [ i ] -> data ) -> sps_id == sps_id
water	396:16	0:0	8	s
op	396:17	0:0	8	->
water	396:19	0:0	8	pps_list
op	396:27	0:0	8	[
water	396:28	0:0	8	i
op	396:29	0:0	8	]
op	396:31	0:0	8	&&
water	396:34	0:0	8	(
water	396:35	0:0	8	(
water	396:36	0:0	8	HEVCPPS
op	396:43	0:0	8	*
water	396:44	0:0	8	)
water	396:45	0:0	8	s
op	396:46	0:0	8	->
water	396:48	0:0	8	pps_list
op	396:56	0:0	8	[
water	396:57	0:0	8	i
op	396:58	0:0	8	]
op	396:59	0:0	8	->
water	396:61	0:0	8	data
water	396:65	0:0	8	)
op	396:66	0:0	8	->
water	396:68	0:0	8	sps_id
op	396:75	0:0	8	==
water	396:78	0:0	8	sps_id
stmts	397:16	397:48	7	
call	397:16	397:47	8	av_buffer_unref
arg	397:32	397:47	9	&s->pps_list[i]
op	397:32	0:0	10	&
water	397:33	0:0	10	s
op	397:34	0:0	10	->
water	397:36	0:0	10	pps_list
op	397:44	0:0	10	[
water	397:45	0:0	10	i
op	397:46	0:0	10	]
water	397:48	0:0	8	;
water	398:8	0:0	6	}
if	399:8	404:8	4	(s -> sps_list [ sps_id ] && s -> sps == ( HEVCSPS * ) s -> sps_list [ sps_id ] -> data)
cond	399:12	399:76	5	s -> sps_list [ sps_id ] && s -> sps == ( HEVCSPS * ) s -> sps_list [ sps_id ] -> data
water	399:12	0:0	6	s
op	399:13	0:0	6	->
water	399:15	0:0	6	sps_list
op	399:23	0:0	6	[
water	399:24	0:0	6	sps_id
op	399:30	0:0	6	]
op	399:32	0:0	6	&&
water	399:35	0:0	6	s
op	399:36	0:0	6	->
water	399:38	0:0	6	sps
op	399:42	0:0	6	==
water	399:45	0:0	6	(
water	399:46	0:0	6	HEVCSPS
op	399:53	0:0	6	*
water	399:54	0:0	6	)
water	399:55	0:0	6	s
op	399:56	0:0	6	->
water	399:58	0:0	6	sps_list
op	399:66	0:0	6	[
water	399:67	0:0	6	sps_id
op	399:73	0:0	6	]
op	399:74	0:0	6	->
water	399:76	0:0	6	data
stmts	399:82	404:8	5	
water	399:82	0:0	6	{
call	400:12	400:43	6	av_buffer_unref
arg	400:28	400:43	7	&s->current_sps
op	400:28	0:0	8	&
water	400:29	0:0	8	s
op	400:30	0:0	8	->
water	400:32	0:0	8	current_sps
water	400:44	0:0	6	;
water	401:12	0:0	6	s
op	401:13	0:0	6	->
water	401:15	0:0	6	current_sps
op	401:27	0:0	6	=
call	401:29	401:62	6	av_buffer_ref
arg	401:43	401:62	7	s->sps_list[sps_id]
water	401:43	0:0	8	s
op	401:44	0:0	8	->
water	401:46	0:0	8	sps_list
op	401:54	0:0	8	[
water	401:55	0:0	8	sps_id
op	401:61	0:0	8	]
water	401:63	0:0	6	;
if	402:12	403:29	6	(! s -> current_sps)
cond	402:16	402:20	7	! s -> current_sps
op	402:16	0:0	8	!
water	402:17	0:0	8	s
op	402:18	0:0	8	->
water	402:20	0:0	8	current_sps
stmts	403:16	403:29	7	
water	403:16	0:0	8	s
op	403:17	0:0	8	->
water	403:19	0:0	8	sps
op	403:23	0:0	8	=
water	403:25	0:0	8	NULL
water	403:29	0:0	8	;
water	404:8	0:0	6	}
call	405:8	405:44	4	av_buffer_unref
arg	405:24	405:44	5	&s->sps_list[sps_id]
op	405:24	0:0	6	&
water	405:25	0:0	6	s
op	405:26	0:0	6	->
water	405:28	0:0	6	sps_list
op	405:36	0:0	6	[
water	405:37	0:0	6	sps_id
op	405:43	0:0	6	]
water	405:45	0:0	4	;
water	406:8	0:0	4	s
op	406:9	0:0	4	->
water	406:11	0:0	4	sps_list
op	406:19	0:0	4	[
water	406:20	0:0	4	sps_id
op	406:26	0:0	4	]
op	406:28	0:0	4	=
water	406:30	0:0	4	sps_buf
water	406:37	0:0	4	;
water	407:4	0:0	4	}
return	409:4	409:12	2	0
water	409:11	0:0	3	0
label	411:0	411:3	2	err :
call	412:4	412:28	2	av_buffer_unref
arg	412:20	412:28	3	&sps_buf
op	412:20	0:0	4	&
water	412:21	0:0	4	sps_buf
water	412:29	0:0	2	;
return	413:4	413:14	2	ret
water	413:11	0:0	3	ret
