func	2:0	139:0	0	static int	dpcm_decode_frame
params	2:28	0:0	1	
param	2:29	2:50	2	AVCodecContext *	avctx
param	3:29	3:39	2	void *	data
param	3:41	3:55	2	int *	data_size
param	4:29	4:44	2	AVPacket *	avpkt
stmnts	0:0	138:19	1	
decl	6:4	6:36	2	const uint8_t	*buf
op	6:23	0:0	2	=
water	6:25	0:0	2	avpkt
op	6:30	0:0	2	->
water	6:32	0:0	2	data
decl	7:4	7:30	2	int	buf_size
op	7:17	0:0	2	=
water	7:19	0:0	2	avpkt
op	7:24	0:0	2	->
water	7:26	0:0	2	size
decl	8:4	8:37	2	DPCMContext	*s
op	8:19	0:0	2	=
water	8:21	0:0	2	avctx
op	8:26	0:0	2	->
water	8:28	0:0	2	priv_data
decl	9:4	9:19	2	int	in
water	9:10	0:0	2	,
decl	9:4	9:19	2	int	out
op	9:16	0:0	2	=
water	9:18	0:0	2	0
decl	10:4	10:20	2	int	predictor[2]
decl	11:4	11:26	2	int	channel_number
op	11:23	0:0	2	=
water	11:25	0:0	2	0
decl	12:4	12:32	2	short	*output_samples
op	12:26	0:0	2	=
water	12:28	0:0	2	data
decl	13:4	13:16	2	int	shift[2]
decl	14:4	14:22	2	unsigned char	byte
decl	15:4	15:14	2	short	diff
if	17:4	18:16	2	(! buf_size)
cond	17:8	17:9	3	! buf_size
op	17:8	0:0	4	!
water	17:9	0:0	4	buf_size
stmts	18:8	18:16	3	
return	18:8	18:16	4	0
water	18:15	0:0	5	0
if	21:4	22:17	2	(* data_size / 2 < buf_size)
cond	21:7	21:22	3	* data_size / 2 < buf_size
op	21:7	0:0	4	*
water	21:8	0:0	4	data_size
op	21:17	0:0	4	/
water	21:18	0:0	4	2
op	21:20	0:0	4	<
water	21:22	0:0	4	buf_size
stmts	22:8	22:17	3	
return	22:8	22:17	4	-1
op	22:15	0:0	5	-
water	22:16	0:0	5	1
switch	24:4	135:4	2	(avctx -> codec -> id)
cond	24:11	24:25	3	avctx -> codec -> id
water	24:11	0:0	4	avctx
op	24:16	0:0	4	->
water	24:18	0:0	4	codec
op	24:23	0:0	4	->
water	24:25	0:0	4	id
stmts	24:29	135:4	3	
water	24:29	0:0	4	{
label	26:4	26:26	4	case CODEC_ID_ROQ_DPCM :
if	27:8	28:43	4	(s -> channels == 1)
cond	27:12	27:27	5	s -> channels == 1
water	27:12	0:0	6	s
op	27:13	0:0	6	->
water	27:15	0:0	6	channels
op	27:24	0:0	6	==
water	27:27	0:0	6	1
stmts	28:12	28:43	5	
water	28:12	0:0	6	predictor
op	28:21	0:0	6	[
water	28:22	0:0	6	0
op	28:23	0:0	6	]
op	28:25	0:0	6	=
call	28:27	28:42	6	AV_RL16
arg	28:35	28:42	7	&buf[6]
op	28:35	0:0	8	&
water	28:36	0:0	8	buf
op	28:39	0:0	8	[
water	28:40	0:0	8	6
op	28:41	0:0	8	]
water	28:43	0:0	6	;
else	29:8	32:8	4
stmts	29:13	32:8	5	
water	29:13	0:0	6	{
water	30:12	0:0	6	predictor
op	30:21	0:0	6	[
water	30:22	0:0	6	0
op	30:23	0:0	6	]
op	30:25	0:0	6	=
water	30:27	0:0	6	buf
op	30:30	0:0	6	[
water	30:31	0:0	6	7
op	30:32	0:0	6	]
op	30:34	0:0	6	<<
water	30:37	0:0	6	8
water	30:38	0:0	6	;
water	31:12	0:0	6	predictor
op	31:21	0:0	6	[
water	31:22	0:0	6	1
op	31:23	0:0	6	]
op	31:25	0:0	6	=
water	31:27	0:0	6	buf
op	31:30	0:0	6	[
water	31:31	0:0	6	6
op	31:32	0:0	6	]
op	31:34	0:0	6	<<
water	31:37	0:0	6	8
water	31:38	0:0	6	;
water	32:8	0:0	6	}
call	33:8	33:29	4	SE_16BIT
arg	33:17	33:29	5	predictor[0]
water	33:17	0:0	6	predictor
op	33:26	0:0	6	[
water	33:27	0:0	6	0
op	33:28	0:0	6	]
water	33:30	0:0	4	;
call	34:8	34:29	4	SE_16BIT
arg	34:17	34:29	5	predictor[1]
water	34:17	0:0	6	predictor
op	34:26	0:0	6	[
water	34:27	0:0	6	1
op	34:28	0:0	6	]
water	34:30	0:0	4	;
for	37:8	44:8	4	(in = 8 , out = 0 ;in < buf_size;in ++ , out ++)
forinit	37:13	37:28	5	in = 8 , out = 0 ;
water	37:13	0:0	6	in
op	37:16	0:0	6	=
water	37:18	0:0	6	8
water	37:19	0:0	6	,
water	37:21	0:0	6	out
op	37:25	0:0	6	=
water	37:27	0:0	6	0
water	37:28	0:0	6	;
cond	37:30	37:35	5	in < buf_size
water	37:30	0:0	6	in
op	37:33	0:0	6	<
water	37:35	0:0	6	buf_size
forexpr	37:45	37:54	5	in ++ , out ++
water	37:45	0:0	6	in
op	37:47	0:0	6	++
water	37:49	0:0	6	,
water	37:51	0:0	6	out
op	37:54	0:0	6	++
stmts	37:58	44:8	5	
water	37:58	0:0	6	{
water	38:12	0:0	6	predictor
op	38:21	0:0	6	[
water	38:22	0:0	6	channel_number
op	38:36	0:0	6	]
op	38:38	0:0	6	+=
water	38:41	0:0	6	s
op	38:42	0:0	6	->
water	38:44	0:0	6	roq_square_array
op	38:60	0:0	6	[
water	38:61	0:0	6	buf
op	38:64	0:0	6	[
water	38:65	0:0	6	in
op	38:67	0:0	6	]
op	38:68	0:0	6	]
water	38:69	0:0	6	;
water	39:12	0:0	6	predictor
op	39:21	0:0	6	[
water	39:22	0:0	6	channel_number
op	39:36	0:0	6	]
op	39:38	0:0	6	=
call	39:40	39:79	6	av_clip_int16
arg	39:54	39:79	7	predictor[channel_number]
water	39:54	0:0	8	predictor
op	39:63	0:0	8	[
water	39:64	0:0	8	channel_number
op	39:78	0:0	8	]
water	39:80	0:0	6	;
water	40:12	0:0	6	output_samples
op	40:26	0:0	6	[
water	40:27	0:0	6	out
op	40:30	0:0	6	]
op	40:32	0:0	6	=
water	40:34	0:0	6	predictor
op	40:43	0:0	6	[
water	40:44	0:0	6	channel_number
op	40:58	0:0	6	]
water	40:59	0:0	6	;
water	43:12	0:0	6	channel_number
op	43:27	0:0	6	^=
water	43:30	0:0	6	s
op	43:31	0:0	6	->
water	43:33	0:0	6	channels
op	43:42	0:0	6	-
water	43:44	0:0	6	1
water	43:45	0:0	6	;
water	44:8	0:0	6	}
break	45:8	45:13	4	
label	47:4	47:32	4	case CODEC_ID_INTERPLAY_DPCM :
water	48:8	0:0	4	in
op	48:11	0:0	4	=
water	48:13	0:0	4	6
water	48:14	0:0	4	;
water	49:8	0:0	4	predictor
op	49:17	0:0	4	[
water	49:18	0:0	4	0
op	49:19	0:0	4	]
op	49:21	0:0	4	=
call	49:23	49:39	4	AV_RL16
arg	49:31	49:39	5	&buf[in]
op	49:31	0:0	6	&
water	49:32	0:0	6	buf
op	49:35	0:0	6	[
water	49:36	0:0	6	in
op	49:38	0:0	6	]
water	49:40	0:0	4	;
water	50:8	0:0	4	in
op	50:11	0:0	4	+=
water	50:14	0:0	4	2
water	50:15	0:0	4	;
call	51:8	51:29	4	SE_16BIT
arg	51:17	51:29	5	predictor[0]
water	51:17	0:0	6	predictor
op	51:26	0:0	6	[
water	51:27	0:0	6	0
op	51:28	0:0	6	]
water	52:8	0:0	4	output_samples
op	52:22	0:0	4	[
water	52:23	0:0	4	out
op	52:26	0:0	4	++
op	52:28	0:0	4	]
op	52:30	0:0	4	=
water	52:32	0:0	4	predictor
op	52:41	0:0	4	[
water	52:42	0:0	4	0
op	52:43	0:0	4	]
water	52:44	0:0	4	;
if	53:8	58:8	4	(s -> channels == 2)
cond	53:12	53:27	5	s -> channels == 2
water	53:12	0:0	6	s
op	53:13	0:0	6	->
water	53:15	0:0	6	channels
op	53:24	0:0	6	==
water	53:27	0:0	6	2
stmts	53:30	58:8	5	
water	53:30	0:0	6	{
water	54:12	0:0	6	predictor
op	54:21	0:0	6	[
water	54:22	0:0	6	1
op	54:23	0:0	6	]
op	54:25	0:0	6	=
call	54:27	54:43	6	AV_RL16
arg	54:35	54:43	7	&buf[in]
op	54:35	0:0	8	&
water	54:36	0:0	8	buf
op	54:39	0:0	8	[
water	54:40	0:0	8	in
op	54:42	0:0	8	]
water	54:44	0:0	6	;
water	55:12	0:0	6	in
op	55:15	0:0	6	+=
water	55:18	0:0	6	2
water	55:19	0:0	6	;
call	56:12	56:33	6	SE_16BIT
arg	56:21	56:33	7	predictor[1]
water	56:21	0:0	8	predictor
op	56:30	0:0	8	[
water	56:31	0:0	8	1
op	56:32	0:0	8	]
water	57:12	0:0	6	output_samples
op	57:26	0:0	6	[
water	57:27	0:0	6	out
op	57:30	0:0	6	++
op	57:32	0:0	6	]
op	57:34	0:0	6	=
water	57:36	0:0	6	predictor
op	57:45	0:0	6	[
water	57:46	0:0	6	1
op	57:47	0:0	6	]
water	57:48	0:0	6	;
water	58:8	0:0	6	}
while	60:8	67:8	4	(in < buf_size)
cond	60:15	60:20	5	in < buf_size
water	60:15	0:0	6	in
op	60:18	0:0	6	<
water	60:20	0:0	6	buf_size
stmts	60:30	67:8	5	
water	60:30	0:0	6	{
water	61:12	0:0	6	predictor
op	61:21	0:0	6	[
water	61:22	0:0	6	channel_number
op	61:36	0:0	6	]
op	61:38	0:0	6	+=
water	61:41	0:0	6	interplay_delta_table
op	61:62	0:0	6	[
water	61:63	0:0	6	buf
op	61:66	0:0	6	[
water	61:67	0:0	6	in
op	61:69	0:0	6	++
op	61:71	0:0	6	]
op	61:72	0:0	6	]
water	61:73	0:0	6	;
water	62:12	0:0	6	predictor
op	62:21	0:0	6	[
water	62:22	0:0	6	channel_number
op	62:36	0:0	6	]
op	62:38	0:0	6	=
call	62:40	62:79	6	av_clip_int16
arg	62:54	62:79	7	predictor[channel_number]
water	62:54	0:0	8	predictor
op	62:63	0:0	8	[
water	62:64	0:0	8	channel_number
op	62:78	0:0	8	]
water	62:80	0:0	6	;
water	63:12	0:0	6	output_samples
op	63:26	0:0	6	[
water	63:27	0:0	6	out
op	63:30	0:0	6	++
op	63:32	0:0	6	]
op	63:34	0:0	6	=
water	63:36	0:0	6	predictor
op	63:45	0:0	6	[
water	63:46	0:0	6	channel_number
op	63:60	0:0	6	]
water	63:61	0:0	6	;
water	66:12	0:0	6	channel_number
op	66:27	0:0	6	^=
water	66:30	0:0	6	s
op	66:31	0:0	6	->
water	66:33	0:0	6	channels
op	66:42	0:0	6	-
water	66:44	0:0	6	1
water	66:45	0:0	6	;
water	67:8	0:0	6	}
break	69:8	69:13	4	
label	71:4	71:26	4	case CODEC_ID_XAN_DPCM :
water	72:8	0:0	4	in
op	72:11	0:0	4	=
water	72:13	0:0	4	0
water	72:14	0:0	4	;
water	73:8	0:0	4	shift
op	73:13	0:0	4	[
water	73:14	0:0	4	0
op	73:15	0:0	4	]
op	73:17	0:0	4	=
water	73:19	0:0	4	shift
op	73:24	0:0	4	[
water	73:25	0:0	4	1
op	73:26	0:0	4	]
op	73:28	0:0	4	=
water	73:30	0:0	4	4
water	73:31	0:0	4	;
water	74:8	0:0	4	predictor
op	74:17	0:0	4	[
water	74:18	0:0	4	0
op	74:19	0:0	4	]
op	74:21	0:0	4	=
call	74:23	74:39	4	AV_RL16
arg	74:31	74:39	5	&buf[in]
op	74:31	0:0	6	&
water	74:32	0:0	6	buf
op	74:35	0:0	6	[
water	74:36	0:0	6	in
op	74:38	0:0	6	]
water	74:40	0:0	4	;
water	75:8	0:0	4	in
op	75:11	0:0	4	+=
water	75:14	0:0	4	2
water	75:15	0:0	4	;
call	76:8	76:29	4	SE_16BIT
arg	76:17	76:29	5	predictor[0]
water	76:17	0:0	6	predictor
op	76:26	0:0	6	[
water	76:27	0:0	6	0
op	76:28	0:0	6	]
water	76:30	0:0	4	;
if	77:8	81:8	4	(s -> channels == 2)
cond	77:12	77:27	5	s -> channels == 2
water	77:12	0:0	6	s
op	77:13	0:0	6	->
water	77:15	0:0	6	channels
op	77:24	0:0	6	==
water	77:27	0:0	6	2
stmts	77:30	81:8	5	
water	77:30	0:0	6	{
water	78:12	0:0	6	predictor
op	78:21	0:0	6	[
water	78:22	0:0	6	1
op	78:23	0:0	6	]
op	78:25	0:0	6	=
call	78:27	78:43	6	AV_RL16
arg	78:35	78:43	7	&buf[in]
op	78:35	0:0	8	&
water	78:36	0:0	8	buf
op	78:39	0:0	8	[
water	78:40	0:0	8	in
op	78:42	0:0	8	]
water	78:44	0:0	6	;
water	79:12	0:0	6	in
op	79:15	0:0	6	+=
water	79:18	0:0	6	2
water	79:19	0:0	6	;
call	80:12	80:33	6	SE_16BIT
arg	80:21	80:33	7	predictor[1]
water	80:21	0:0	8	predictor
op	80:30	0:0	8	[
water	80:31	0:0	8	1
op	80:32	0:0	8	]
water	80:34	0:0	6	;
water	81:8	0:0	6	}
while	83:8	102:8	4	(in < buf_size)
cond	83:15	83:20	5	in < buf_size
water	83:15	0:0	6	in
op	83:18	0:0	6	<
water	83:20	0:0	6	buf_size
stmts	83:30	102:8	5	
water	83:30	0:0	6	{
water	84:12	0:0	6	byte
op	84:17	0:0	6	=
water	84:19	0:0	6	buf
op	84:22	0:0	6	[
water	84:23	0:0	6	in
op	84:25	0:0	6	++
op	84:27	0:0	6	]
water	84:28	0:0	6	;
water	85:12	0:0	6	diff
op	85:17	0:0	6	=
water	85:19	0:0	6	(
water	85:20	0:0	6	byte
op	85:25	0:0	6	&
water	85:27	0:0	6	0
water	85:28	0:0	6	xFC
water	85:31	0:0	6	)
op	85:33	0:0	6	<<
water	85:36	0:0	6	8
water	85:37	0:0	6	;
if	86:12	87:39	6	(( byte & 0 x03 ) == 3)
cond	86:16	86:33	7	( byte & 0 x03 ) == 3
water	86:16	0:0	8	(
water	86:17	0:0	8	byte
op	86:22	0:0	8	&
water	86:24	0:0	8	0
water	86:25	0:0	8	x03
water	86:28	0:0	8	)
op	86:30	0:0	8	==
water	86:33	0:0	8	3
stmts	87:16	87:39	7	
water	87:16	0:0	8	shift
op	87:21	0:0	8	[
water	87:22	0:0	8	channel_number
op	87:36	0:0	8	]
op	87:37	0:0	8	++
water	87:39	0:0	8	;
else	88:12	89:57	6
stmts	89:16	89:57	7	
water	89:16	0:0	8	shift
op	89:21	0:0	8	[
water	89:22	0:0	8	channel_number
op	89:36	0:0	8	]
op	89:38	0:0	8	-=
water	89:41	0:0	8	(
water	89:42	0:0	8	2
op	89:44	0:0	8	*
water	89:46	0:0	8	(
water	89:47	0:0	8	byte
op	89:52	0:0	8	&
water	89:54	0:0	8	3
water	89:55	0:0	8	)
water	89:56	0:0	8	)
water	89:57	0:0	8	;
if	91:12	92:41	6	(shift [ channel_number ] < 0)
cond	91:16	91:40	7	shift [ channel_number ] < 0
water	91:16	0:0	8	shift
op	91:21	0:0	8	[
water	91:22	0:0	8	channel_number
op	91:36	0:0	8	]
op	91:38	0:0	8	<
water	91:40	0:0	8	0
stmts	92:16	92:41	7	
water	92:16	0:0	8	shift
op	92:21	0:0	8	[
water	92:22	0:0	8	channel_number
op	92:36	0:0	8	]
op	92:38	0:0	8	=
water	92:40	0:0	8	0
water	92:41	0:0	8	;
water	94:12	0:0	6	diff
op	94:17	0:0	6	>>=
water	94:21	0:0	6	shift
op	94:26	0:0	6	[
water	94:27	0:0	6	channel_number
op	94:41	0:0	6	]
water	94:42	0:0	6	;
water	95:12	0:0	6	predictor
op	95:21	0:0	6	[
water	95:22	0:0	6	channel_number
op	95:36	0:0	6	]
op	95:38	0:0	6	+=
water	95:41	0:0	6	diff
water	95:45	0:0	6	;
water	97:12	0:0	6	predictor
op	97:21	0:0	6	[
water	97:22	0:0	6	channel_number
op	97:36	0:0	6	]
op	97:38	0:0	6	=
call	97:40	97:79	6	av_clip_int16
arg	97:54	97:79	7	predictor[channel_number]
water	97:54	0:0	8	predictor
op	97:63	0:0	8	[
water	97:64	0:0	8	channel_number
op	97:78	0:0	8	]
water	97:80	0:0	6	;
water	98:12	0:0	6	output_samples
op	98:26	0:0	6	[
water	98:27	0:0	6	out
op	98:30	0:0	6	++
op	98:32	0:0	6	]
op	98:34	0:0	6	=
water	98:36	0:0	6	predictor
op	98:45	0:0	6	[
water	98:46	0:0	6	channel_number
op	98:60	0:0	6	]
water	98:61	0:0	6	;
water	101:12	0:0	6	channel_number
op	101:27	0:0	6	^=
water	101:30	0:0	6	s
op	101:31	0:0	6	->
water	101:33	0:0	6	channels
op	101:42	0:0	6	-
water	101:44	0:0	6	1
water	101:45	0:0	6	;
water	102:8	0:0	6	}
break	103:8	103:13	4	
label	104:4	104:26	4	case CODEC_ID_SOL_DPCM :
water	105:8	0:0	4	in
op	105:11	0:0	4	=
water	105:13	0:0	4	0
water	105:14	0:0	4	;
if	106:8	122:8	4	(avctx -> codec_tag != 3)
cond	106:12	106:32	5	avctx -> codec_tag != 3
water	106:12	0:0	6	avctx
op	106:17	0:0	6	->
water	106:19	0:0	6	codec_tag
op	106:29	0:0	6	!=
water	106:32	0:0	6	3
stmts	106:35	122:8	5	
water	106:35	0:0	6	{
if	107:12	108:25	6	(* data_size / 4 < buf_size)
cond	107:15	107:30	7	* data_size / 4 < buf_size
op	107:15	0:0	8	*
water	107:16	0:0	8	data_size
op	107:25	0:0	8	/
water	107:26	0:0	8	4
op	107:28	0:0	8	<
water	107:30	0:0	8	buf_size
stmts	108:16	108:25	7	
return	108:16	108:25	8	-1
op	108:23	0:0	9	-
water	108:24	0:0	9	1
while	109:12	121:12	6	(in < buf_size)
cond	109:19	109:24	7	in < buf_size
water	109:19	0:0	8	in
op	109:22	0:0	8	<
water	109:24	0:0	8	buf_size
stmts	109:34	121:12	7	
water	109:34	0:0	8	{
decl	110:16	110:26	8	int	n1
water	110:22	0:0	8	,
decl	110:16	110:26	8	int	n2
water	111:16	0:0	8	n1
op	111:19	0:0	8	=
water	111:21	0:0	8	(
water	111:22	0:0	8	buf
op	111:25	0:0	8	[
water	111:26	0:0	8	in
op	111:28	0:0	8	]
op	111:30	0:0	8	>>
water	111:33	0:0	8	4
water	111:34	0:0	8	)
op	111:36	0:0	8	&
water	111:38	0:0	8	0
water	111:39	0:0	8	xF
water	111:41	0:0	8	;
water	112:16	0:0	8	n2
op	112:19	0:0	8	=
water	112:21	0:0	8	buf
op	112:24	0:0	8	[
water	112:25	0:0	8	in
op	112:27	0:0	8	++
op	112:29	0:0	8	]
op	112:31	0:0	8	&
water	112:33	0:0	8	0
water	112:34	0:0	8	xF
water	112:36	0:0	8	;
water	113:16	0:0	8	s
op	113:17	0:0	8	->
water	113:19	0:0	8	sample
op	113:25	0:0	8	[
water	113:26	0:0	8	0
op	113:27	0:0	8	]
op	113:29	0:0	8	+=
water	113:32	0:0	8	s
op	113:33	0:0	8	->
water	113:35	0:0	8	sol_table
op	113:44	0:0	8	[
water	113:45	0:0	8	n1
op	113:47	0:0	8	]
water	113:48	0:0	8	;
if	114:16	114:54	8	(s -> sample [ 0 ] < 0)
cond	114:20	114:35	9	s -> sample [ 0 ] < 0
water	114:20	0:0	10	s
op	114:21	0:0	10	->
water	114:23	0:0	10	sample
op	114:29	0:0	10	[
water	114:30	0:0	10	0
op	114:31	0:0	10	]
op	114:33	0:0	10	<
water	114:35	0:0	10	0
stmts	114:38	114:54	9	
water	114:38	0:0	10	s
op	114:39	0:0	10	->
water	114:41	0:0	10	sample
op	114:47	0:0	10	[
water	114:48	0:0	10	0
op	114:49	0:0	10	]
op	114:51	0:0	10	=
water	114:53	0:0	10	0
water	114:54	0:0	10	;
if	115:16	115:58	8	(s -> sample [ 0 ] > 255)
cond	115:20	115:35	9	s -> sample [ 0 ] > 255
water	115:20	0:0	10	s
op	115:21	0:0	10	->
water	115:23	0:0	10	sample
op	115:29	0:0	10	[
water	115:30	0:0	10	0
op	115:31	0:0	10	]
op	115:33	0:0	10	>
water	115:35	0:0	10	255
stmts	115:40	115:58	9	
water	115:40	0:0	10	s
op	115:41	0:0	10	->
water	115:43	0:0	10	sample
op	115:49	0:0	10	[
water	115:50	0:0	10	0
op	115:51	0:0	10	]
op	115:53	0:0	10	=
water	115:55	0:0	10	255
water	115:58	0:0	10	;
water	116:16	0:0	8	output_samples
op	116:30	0:0	8	[
water	116:31	0:0	8	out
op	116:34	0:0	8	++
op	116:36	0:0	8	]
op	116:38	0:0	8	=
water	116:40	0:0	8	(
water	116:41	0:0	8	s
op	116:42	0:0	8	->
water	116:44	0:0	8	sample
op	116:50	0:0	8	[
water	116:51	0:0	8	0
op	116:52	0:0	8	]
op	116:54	0:0	8	-
water	116:56	0:0	8	128
water	116:59	0:0	8	)
op	116:61	0:0	8	<<
water	116:64	0:0	8	8
water	116:65	0:0	8	;
water	117:16	0:0	8	s
op	117:17	0:0	8	->
water	117:19	0:0	8	sample
op	117:25	0:0	8	[
water	117:26	0:0	8	s
op	117:27	0:0	8	->
water	117:29	0:0	8	channels
op	117:38	0:0	8	-
water	117:40	0:0	8	1
op	117:41	0:0	8	]
op	117:43	0:0	8	+=
water	117:46	0:0	8	s
op	117:47	0:0	8	->
water	117:49	0:0	8	sol_table
op	117:58	0:0	8	[
water	117:59	0:0	8	n2
op	117:61	0:0	8	]
water	117:62	0:0	8	;
if	118:16	118:82	8	(s -> sample [ s -> channels - 1 ] < 0)
cond	118:20	118:49	9	s -> sample [ s -> channels - 1 ] < 0
water	118:20	0:0	10	s
op	118:21	0:0	10	->
water	118:23	0:0	10	sample
op	118:29	0:0	10	[
water	118:30	0:0	10	s
op	118:31	0:0	10	->
water	118:33	0:0	10	channels
op	118:42	0:0	10	-
water	118:44	0:0	10	1
op	118:45	0:0	10	]
op	118:47	0:0	10	<
water	118:49	0:0	10	0
stmts	118:52	118:82	9	
water	118:52	0:0	10	s
op	118:53	0:0	10	->
water	118:55	0:0	10	sample
op	118:61	0:0	10	[
water	118:62	0:0	10	s
op	118:63	0:0	10	->
water	118:65	0:0	10	channels
op	118:74	0:0	10	-
water	118:76	0:0	10	1
op	118:77	0:0	10	]
op	118:79	0:0	10	=
water	118:81	0:0	10	0
water	118:82	0:0	10	;
if	119:16	119:86	8	(s -> sample [ s -> channels - 1 ] > 255)
cond	119:20	119:49	9	s -> sample [ s -> channels - 1 ] > 255
water	119:20	0:0	10	s
op	119:21	0:0	10	->
water	119:23	0:0	10	sample
op	119:29	0:0	10	[
water	119:30	0:0	10	s
op	119:31	0:0	10	->
water	119:33	0:0	10	channels
op	119:42	0:0	10	-
water	119:44	0:0	10	1
op	119:45	0:0	10	]
op	119:47	0:0	10	>
water	119:49	0:0	10	255
stmts	119:54	119:86	9	
water	119:54	0:0	10	s
op	119:55	0:0	10	->
water	119:57	0:0	10	sample
op	119:63	0:0	10	[
water	119:64	0:0	10	s
op	119:65	0:0	10	->
water	119:67	0:0	10	channels
op	119:76	0:0	10	-
water	119:78	0:0	10	1
op	119:79	0:0	10	]
op	119:81	0:0	10	=
water	119:83	0:0	10	255
water	119:86	0:0	10	;
water	120:16	0:0	8	output_samples
op	120:30	0:0	8	[
water	120:31	0:0	8	out
op	120:34	0:0	8	++
op	120:36	0:0	8	]
op	120:38	0:0	8	=
water	120:40	0:0	8	(
water	120:41	0:0	8	s
op	120:42	0:0	8	->
water	120:44	0:0	8	sample
op	120:50	0:0	8	[
water	120:51	0:0	8	s
op	120:52	0:0	8	->
water	120:54	0:0	8	channels
op	120:63	0:0	8	-
water	120:65	0:0	8	1
op	120:66	0:0	8	]
op	120:68	0:0	8	-
water	120:70	0:0	8	128
water	120:73	0:0	8	)
op	120:75	0:0	8	<<
water	120:78	0:0	8	8
water	120:79	0:0	8	;
water	121:12	0:0	8	}
water	122:8	0:0	6	}
else	122:10	133:8	4
stmts	122:15	133:8	5	
water	122:15	0:0	6	{
while	123:12	132:12	6	(in < buf_size)
cond	123:19	123:24	7	in < buf_size
water	123:19	0:0	8	in
op	123:22	0:0	8	<
water	123:24	0:0	8	buf_size
stmts	123:34	132:12	7	
water	123:34	0:0	8	{
decl	124:16	124:21	8	int	n
water	125:16	0:0	8	n
op	125:18	0:0	8	=
water	125:20	0:0	8	buf
op	125:23	0:0	8	[
water	125:24	0:0	8	in
op	125:26	0:0	8	++
op	125:28	0:0	8	]
water	125:29	0:0	8	;
if	126:16	126:81	8	(n & 0 x80)
cond	126:20	126:25	9	n & 0 x80
water	126:20	0:0	10	n
op	126:22	0:0	10	&
water	126:24	0:0	10	0
water	126:25	0:0	10	x80
stmts	126:30	126:81	9	
water	126:30	0:0	10	s
op	126:31	0:0	10	->
water	126:33	0:0	10	sample
op	126:39	0:0	10	[
water	126:40	0:0	10	channel_number
op	126:54	0:0	10	]
op	126:56	0:0	10	-=
water	126:59	0:0	10	s
op	126:60	0:0	10	->
water	126:62	0:0	10	sol_table
op	126:71	0:0	10	[
water	126:72	0:0	10	n
op	126:74	0:0	10	&
water	126:76	0:0	10	0
water	126:77	0:0	10	x7F
op	126:80	0:0	10	]
water	126:81	0:0	10	;
else	127:16	127:72	8
stmts	127:21	127:72	9	
water	127:21	0:0	10	s
op	127:22	0:0	10	->
water	127:24	0:0	10	sample
op	127:30	0:0	10	[
water	127:31	0:0	10	channel_number
op	127:45	0:0	10	]
op	127:47	0:0	10	+=
water	127:50	0:0	10	s
op	127:51	0:0	10	->
water	127:53	0:0	10	sol_table
op	127:62	0:0	10	[
water	127:63	0:0	10	n
op	127:65	0:0	10	&
water	127:67	0:0	10	0
water	127:68	0:0	10	x7F
op	127:71	0:0	10	]
water	127:72	0:0	10	;
water	128:16	0:0	8	s
op	128:17	0:0	8	->
water	128:19	0:0	8	sample
op	128:25	0:0	8	[
water	128:26	0:0	8	channel_number
op	128:40	0:0	8	]
op	128:42	0:0	8	=
call	128:44	128:83	8	av_clip_int16
arg	128:58	128:83	9	s->sample[channel_number]
water	128:58	0:0	10	s
op	128:59	0:0	10	->
water	128:61	0:0	10	sample
op	128:67	0:0	10	[
water	128:68	0:0	10	channel_number
op	128:82	0:0	10	]
water	128:84	0:0	8	;
water	129:16	0:0	8	output_samples
op	129:30	0:0	8	[
water	129:31	0:0	8	out
op	129:34	0:0	8	++
op	129:36	0:0	8	]
op	129:38	0:0	8	=
water	129:40	0:0	8	s
op	129:41	0:0	8	->
water	129:43	0:0	8	sample
op	129:49	0:0	8	[
water	129:50	0:0	8	channel_number
op	129:64	0:0	8	]
water	129:65	0:0	8	;
water	131:16	0:0	8	channel_number
op	131:31	0:0	8	^=
water	131:34	0:0	8	s
op	131:35	0:0	8	->
water	131:37	0:0	8	channels
op	131:46	0:0	8	-
water	131:48	0:0	8	1
water	131:49	0:0	8	;
water	132:12	0:0	8	}
water	133:8	0:0	6	}
break	134:8	134:13	4	
water	135:4	0:0	4	}
op	137:4	0:0	2	*
water	137:5	0:0	2	data_size
op	137:15	0:0	2	=
water	137:17	0:0	2	out
op	137:21	0:0	2	*
op	137:23	0:0	2	sizeof
water	137:29	0:0	2	(
water	137:30	0:0	2	short
water	137:35	0:0	2	)
water	137:36	0:0	2	;
return	138:4	138:19	2	buf_size
water	138:11	0:0	3	buf_size
