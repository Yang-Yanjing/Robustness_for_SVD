func	2:0	49:0	0	static int	decode_dds1
params	2:22	0:0	1	
param	2:23	2:41	2	GetByteContext *	gb
param	2:43	2:57	2	uint8_t *	frame
param	2:59	2:68	2	int	width
param	2:70	2:80	2	int	height
stmnts	0:0	48:12	1	
decl	4:4	4:38	2	const uint8_t	*frame_start
op	4:31	0:0	2	=
water	4:33	0:0	2	frame
decl	5:4	5:55	2	const uint8_t	*frame_end
op	5:31	0:0	2	=
water	5:33	0:0	2	frame
op	5:39	0:0	2	+
water	5:41	0:0	2	width
op	5:47	0:0	2	*
water	5:49	0:0	2	height
decl	6:4	6:34	2	int	mask
op	6:13	0:0	2	=
water	6:15	0:0	2	0
water	6:16	0:0	2	x10000
water	6:22	0:0	2	,
decl	6:4	6:34	2	int	bitbuf
op	6:31	0:0	2	=
water	6:33	0:0	2	0
decl	7:4	7:37	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:37	2	int	v
water	7:12	0:0	2	,
decl	7:4	7:37	2	int	offset
water	7:20	0:0	2	,
decl	7:4	7:37	2	int	count
water	7:27	0:0	2	,
decl	7:4	7:37	2	int	segments
water	9:4	0:0	2	segments
op	9:13	0:0	2	=
call	9:15	9:38	2	bytestream2_get_le16
arg	9:36	9:38	3	gb
water	9:36	0:0	4	gb
water	9:39	0:0	2	;
while	10:4	46:4	2	(segments --)
cond	10:11	10:19	3	segments --
water	10:11	0:0	4	segments
op	10:19	0:0	4	--
stmts	10:23	46:4	3	
water	10:23	0:0	4	{
if	11:8	12:38	4	(bytestream2_get_bytes_left (gb ) < 2)
cond	11:12	11:45	5	bytestream2_get_bytes_left (gb ) < 2
call	11:12	11:41	6	bytestream2_get_bytes_left
arg	11:39	11:41	7	gb
water	11:39	0:0	8	gb
op	11:43	0:0	6	<
water	11:45	0:0	6	2
stmts	12:12	12:38	5	
return	12:12	12:38	6	AVERROR_INVALIDDATA
water	12:19	0:0	7	AVERROR_INVALIDDATA
if	13:8	16:8	4	(mask == 0 x10000)
cond	13:12	13:21	5	mask == 0 x10000
water	13:12	0:0	6	mask
op	13:17	0:0	6	==
water	13:20	0:0	6	0
water	13:21	0:0	6	x10000
stmts	13:29	16:8	5	
water	13:29	0:0	6	{
water	14:12	0:0	6	bitbuf
op	14:19	0:0	6	=
call	14:21	14:45	6	bytestream2_get_le16u
arg	14:43	14:45	7	gb
water	14:43	0:0	8	gb
water	14:46	0:0	6	;
water	15:12	0:0	6	mask
op	15:17	0:0	6	=
water	15:19	0:0	6	1
water	15:20	0:0	6	;
water	16:8	0:0	6	}
if	18:8	30:8	4	(bitbuf & mask)
cond	18:12	18:21	5	bitbuf & mask
water	18:12	0:0	6	bitbuf
op	18:19	0:0	6	&
water	18:21	0:0	6	mask
stmts	18:27	30:8	5	
water	18:27	0:0	6	{
water	19:12	0:0	6	v
op	19:14	0:0	6	=
call	19:16	19:39	6	bytestream2_get_le16
arg	19:37	19:39	7	gb
water	19:37	0:0	8	gb
water	19:40	0:0	6	;
water	20:12	0:0	6	offset
op	20:19	0:0	6	=
water	20:21	0:0	6	(
water	20:22	0:0	6	v
op	20:24	0:0	6	&
water	20:26	0:0	6	0
water	20:27	0:0	6	x1FFF
water	20:32	0:0	6	)
op	20:34	0:0	6	<<
water	20:37	0:0	6	2
water	20:38	0:0	6	;
water	21:12	0:0	6	count
op	21:18	0:0	6	=
water	21:20	0:0	6	(
water	21:21	0:0	6	(
water	21:22	0:0	6	v
op	21:24	0:0	6	>>
water	21:27	0:0	6	13
water	21:29	0:0	6	)
op	21:31	0:0	6	+
water	21:33	0:0	6	2
water	21:34	0:0	6	)
op	21:36	0:0	6	<<
water	21:39	0:0	6	1
water	21:40	0:0	6	;
if	22:12	23:42	6	(frame - frame_start < offset || frame_end - frame < count * 2 + width)
cond	22:16	22:78	7	frame - frame_start < offset || frame_end - frame < count * 2 + width
water	22:16	0:0	8	frame
op	22:22	0:0	8	-
water	22:24	0:0	8	frame_start
op	22:36	0:0	8	<
water	22:38	0:0	8	offset
op	22:45	0:0	8	||
water	22:48	0:0	8	frame_end
op	22:58	0:0	8	-
water	22:60	0:0	8	frame
op	22:66	0:0	8	<
water	22:68	0:0	8	count
op	22:73	0:0	8	*
water	22:74	0:0	8	2
op	22:76	0:0	8	+
water	22:78	0:0	8	width
stmts	23:16	23:42	7	
return	23:16	23:42	8	AVERROR_INVALIDDATA
water	23:23	0:0	9	AVERROR_INVALIDDATA
for	24:12	29:12	6	(i = 0 ;i < count;i ++)
forinit	24:17	24:22	7	i = 0 ;
water	24:17	0:0	8	i
op	24:19	0:0	8	=
water	24:21	0:0	8	0
water	24:22	0:0	8	;
cond	24:24	24:28	7	i < count
water	24:24	0:0	8	i
op	24:26	0:0	8	<
water	24:28	0:0	8	count
forexpr	24:35	24:36	7	i ++
water	24:35	0:0	8	i
op	24:36	0:0	8	++
stmts	24:40	29:12	7	
water	24:40	0:0	8	{
water	25:16	0:0	8	frame
op	25:21	0:0	8	[
water	25:22	0:0	8	0
op	25:23	0:0	8	]
op	25:25	0:0	8	=
water	25:27	0:0	8	frame
op	25:32	0:0	8	[
water	25:33	0:0	8	1
op	25:34	0:0	8	]
op	25:36	0:0	8	=
water	26:16	0:0	8	frame
op	26:21	0:0	8	[
water	26:22	0:0	8	width
op	26:27	0:0	8	]
op	26:29	0:0	8	=
water	26:31	0:0	8	frame
op	26:36	0:0	8	[
water	26:37	0:0	8	width
op	26:43	0:0	8	+
water	26:45	0:0	8	1
op	26:46	0:0	8	]
op	26:48	0:0	8	=
water	26:50	0:0	8	frame
op	26:55	0:0	8	[
op	26:56	0:0	8	-
water	26:57	0:0	8	offset
op	26:63	0:0	8	]
water	26:64	0:0	8	;
water	28:16	0:0	8	frame
op	28:22	0:0	8	+=
water	28:25	0:0	8	2
water	28:26	0:0	8	;
water	29:12	0:0	8	}
water	30:8	0:0	6	}
else	30:10	35:8	4
stmts	30:15	35:8	5	
if	30:15	35:8	6	(bitbuf & ( mask << 1 ))
cond	30:19	30:38	7	bitbuf & ( mask << 1 )
water	30:19	0:0	8	bitbuf
op	30:26	0:0	8	&
water	30:28	0:0	8	(
water	30:29	0:0	8	mask
op	30:34	0:0	8	<<
water	30:37	0:0	8	1
water	30:38	0:0	8	)
stmts	30:41	35:8	7	
water	30:41	0:0	8	{
water	31:12	0:0	8	v
op	31:14	0:0	8	=
call	31:16	31:39	8	bytestream2_get_le16
arg	31:37	31:39	9	gb
water	31:37	0:0	10	gb
op	31:40	0:0	8	*
water	31:41	0:0	8	2
water	31:42	0:0	8	;
if	32:12	33:42	8	(frame - frame_end < v)
cond	32:16	32:36	9	frame - frame_end < v
water	32:16	0:0	10	frame
op	32:22	0:0	10	-
water	32:24	0:0	10	frame_end
op	32:34	0:0	10	<
water	32:36	0:0	10	v
stmts	33:16	33:42	9	
return	33:16	33:42	10	AVERROR_INVALIDDATA
water	33:23	0:0	11	AVERROR_INVALIDDATA
water	34:12	0:0	8	frame
op	34:18	0:0	8	+=
water	34:21	0:0	8	v
water	34:22	0:0	8	;
water	35:8	0:0	8	}
else	35:10	44:8	4
stmts	35:15	44:8	5	
water	35:15	0:0	6	{
if	36:12	37:42	6	(frame_end - frame < width + 3)
cond	36:16	36:44	7	frame_end - frame < width + 3
water	36:16	0:0	8	frame_end
op	36:26	0:0	8	-
water	36:28	0:0	8	frame
op	36:34	0:0	8	<
water	36:36	0:0	8	width
op	36:42	0:0	8	+
water	36:44	0:0	8	3
stmts	37:16	37:42	7	
return	37:16	37:42	8	AVERROR_INVALIDDATA
water	37:23	0:0	9	AVERROR_INVALIDDATA
water	38:12	0:0	6	frame
op	38:17	0:0	6	[
water	38:18	0:0	6	0
op	38:19	0:0	6	]
op	38:21	0:0	6	=
water	38:23	0:0	6	frame
op	38:28	0:0	6	[
water	38:29	0:0	6	1
op	38:30	0:0	6	]
op	38:32	0:0	6	=
water	39:12	0:0	6	frame
op	39:17	0:0	6	[
water	39:18	0:0	6	width
op	39:23	0:0	6	]
op	39:25	0:0	6	=
water	39:27	0:0	6	frame
op	39:32	0:0	6	[
water	39:33	0:0	6	width
op	39:39	0:0	6	+
water	39:41	0:0	6	1
op	39:42	0:0	6	]
op	39:44	0:0	6	=
call	39:47	39:70	6	bytestream2_get_byte
arg	39:68	39:70	7	gb
water	39:68	0:0	8	gb
water	39:71	0:0	6	;
water	40:12	0:0	6	frame
op	40:18	0:0	6	+=
water	40:21	0:0	6	2
water	40:22	0:0	6	;
water	41:12	0:0	6	frame
op	41:17	0:0	6	[
water	41:18	0:0	6	0
op	41:19	0:0	6	]
op	41:21	0:0	6	=
water	41:23	0:0	6	frame
op	41:28	0:0	6	[
water	41:29	0:0	6	1
op	41:30	0:0	6	]
op	41:32	0:0	6	=
water	42:12	0:0	6	frame
op	42:17	0:0	6	[
water	42:18	0:0	6	width
op	42:23	0:0	6	]
op	42:25	0:0	6	=
water	42:27	0:0	6	frame
op	42:32	0:0	6	[
water	42:33	0:0	6	width
op	42:39	0:0	6	+
water	42:41	0:0	6	1
op	42:42	0:0	6	]
op	42:44	0:0	6	=
call	42:47	42:70	6	bytestream2_get_byte
arg	42:68	42:70	7	gb
water	42:68	0:0	8	gb
water	42:71	0:0	6	;
water	43:12	0:0	6	frame
op	43:18	0:0	6	+=
water	43:21	0:0	6	2
water	43:22	0:0	6	;
water	44:8	0:0	6	}
water	45:8	0:0	4	mask
op	45:13	0:0	4	<<=
water	45:17	0:0	4	2
water	45:18	0:0	4	;
water	46:4	0:0	4	}
return	48:4	48:12	2	0
water	48:11	0:0	3	0
