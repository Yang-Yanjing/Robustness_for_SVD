func	1:0	350:0	0	int	ff_mjpeg_decode_sof
params	1:23	0:0	1	
param	1:24	1:45	2	MJpegDecodeContext *	s
stmnts	0:0	349:12	1	
decl	3:4	3:67	2	int	len
water	3:11	0:0	2	,
decl	3:4	3:67	2	int	nb_components
water	3:26	0:0	2	,
decl	3:4	3:67	2	int	i
water	3:29	0:0	2	,
decl	3:4	3:67	2	int	width
water	3:36	0:0	2	,
decl	3:4	3:67	2	int	height
water	3:44	0:0	2	,
decl	3:4	3:67	2	int	bits
water	3:50	0:0	2	,
decl	3:4	3:67	2	int	pix_fmt_id
water	3:62	0:0	2	,
decl	3:4	3:67	2	int	ret
decl	4:4	4:31	2	int	h_count[MAX_COMPONENTS]
decl	5:4	5:31	2	int	v_count[MAX_COMPONENTS]
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	cur_scan
op	7:16	0:0	2	=
water	7:18	0:0	2	0
water	7:19	0:0	2	;
water	8:4	0:0	2	s
op	8:5	0:0	2	->
water	8:7	0:0	2	upscale_h
op	8:17	0:0	2	=
water	8:19	0:0	2	s
op	8:20	0:0	2	->
water	8:22	0:0	2	upscale_v
op	8:32	0:0	2	=
water	8:34	0:0	2	0
water	8:35	0:0	2	;
water	11:4	0:0	2	len
op	11:12	0:0	2	=
call	11:14	11:33	2	get_bits
arg	11:23	11:29	3	&s->gb
op	11:23	0:0	4	&
water	11:24	0:0	4	s
op	11:25	0:0	4	->
water	11:27	0:0	4	gb
arg	11:31	11:33	3	16
water	11:31	0:0	4	16
water	11:34	0:0	2	;
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	avctx
op	12:12	0:0	2	->
water	12:14	0:0	2	bits_per_raw_sample
op	12:34	0:0	2	=
water	13:4	0:0	2	bits
op	13:9	0:0	2	=
call	13:11	13:29	2	get_bits
arg	13:20	13:26	3	&s->gb
op	13:20	0:0	4	&
water	13:21	0:0	4	s
op	13:22	0:0	4	->
water	13:24	0:0	4	gb
arg	13:28	13:29	3	8
water	13:28	0:0	4	8
water	13:30	0:0	2	;
if	15:4	16:16	2	(s -> pegasus_rct)
cond	15:8	15:11	3	s -> pegasus_rct
water	15:8	0:0	4	s
op	15:9	0:0	4	->
water	15:11	0:0	4	pegasus_rct
stmts	16:8	16:16	3	
water	16:8	0:0	4	bits
op	16:13	0:0	4	=
water	16:15	0:0	4	9
water	16:16	0:0	4	;
if	17:4	18:19	2	(bits == 9 && ! s -> pegasus_rct)
cond	17:8	17:25	3	bits == 9 && ! s -> pegasus_rct
water	17:8	0:0	4	bits
op	17:13	0:0	4	==
water	17:16	0:0	4	9
op	17:18	0:0	4	&&
op	17:21	0:0	4	!
water	17:22	0:0	4	s
op	17:23	0:0	4	->
water	17:25	0:0	4	pegasus_rct
stmts	18:8	18:19	3	
water	18:8	0:0	4	s
op	18:9	0:0	4	->
water	18:11	0:0	4	rct
op	18:16	0:0	4	=
water	18:18	0:0	4	1
water	18:19	0:0	4	;
if	20:4	23:4	2	(s -> lossless && s -> avctx -> lowres)
cond	20:7	20:32	3	s -> lossless && s -> avctx -> lowres
water	20:7	0:0	4	s
op	20:8	0:0	4	->
water	20:10	0:0	4	lossless
op	20:19	0:0	4	&&
water	20:22	0:0	4	s
op	20:23	0:0	4	->
water	20:25	0:0	4	avctx
op	20:30	0:0	4	->
water	20:32	0:0	4	lowres
stmts	20:39	23:4	3	
water	20:39	0:0	4	{
call	21:8	21:84	4	av_log
arg	21:15	21:23	5	s->avctx
water	21:15	0:0	6	s
op	21:16	0:0	6	->
water	21:18	0:0	6	avctx
arg	21:25	21:37	5	AV_LOG_ERROR
water	21:25	0:0	6	AV_LOG_ERROR
arg	21:39	21:84	5	"lowres is not possible with lossless jpeg\n"
water	21:39	0:0	6	"lowres is not possible with lossless jpeg\n"
water	21:85	0:0	4	;
return	22:8	22:17	4	-1
op	22:15	0:0	5	-
water	22:16	0:0	5	1
water	23:4	0:0	4	}
water	25:4	0:0	2	height
op	25:11	0:0	2	=
call	25:13	25:32	2	get_bits
arg	25:22	25:28	3	&s->gb
op	25:22	0:0	4	&
water	25:23	0:0	4	s
op	25:24	0:0	4	->
water	25:26	0:0	4	gb
arg	25:30	25:32	3	16
water	25:30	0:0	4	16
water	25:33	0:0	2	;
water	26:4	0:0	2	width
op	26:11	0:0	2	=
call	26:13	26:32	2	get_bits
arg	26:22	26:28	3	&s->gb
op	26:22	0:0	4	&
water	26:23	0:0	4	s
op	26:24	0:0	4	->
water	26:26	0:0	4	gb
arg	26:30	26:32	3	16
water	26:30	0:0	4	16
water	26:33	0:0	2	;
if	28:4	29:66	2	(s -> avctx -> codec_id == AV_CODEC_ID_AMV && ( height & 15 ))
cond	28:8	28:59	3	s -> avctx -> codec_id == AV_CODEC_ID_AMV && ( height & 15 )
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	avctx
op	28:16	0:0	4	->
water	28:18	0:0	4	codec_id
op	28:27	0:0	4	==
water	28:30	0:0	4	AV_CODEC_ID_AMV
op	28:46	0:0	4	&&
water	28:49	0:0	4	(
water	28:50	0:0	4	height
op	28:56	0:0	4	&
water	28:57	0:0	4	15
water	28:59	0:0	4	)
stmts	29:8	29:66	3	
call	29:8	29:65	4	avpriv_request_sample
arg	29:30	29:38	5	s->avctx
water	29:30	0:0	6	s
op	29:31	0:0	6	->
water	29:33	0:0	6	avctx
arg	29:40	29:65	5	"non mod 16 height AMV\n"
water	29:40	0:0	6	"non mod 16 height AMV\n"
water	29:66	0:0	4	;
if	32:4	33:25	2	(s -> interlaced && s -> width == width && s -> height == height + 1)
cond	32:8	32:68	3	s -> interlaced && s -> width == width && s -> height == height + 1
water	32:8	0:0	4	s
op	32:9	0:0	4	->
water	32:11	0:0	4	interlaced
op	32:22	0:0	4	&&
water	32:25	0:0	4	s
op	32:26	0:0	4	->
water	32:28	0:0	4	width
op	32:34	0:0	4	==
water	32:37	0:0	4	width
op	32:43	0:0	4	&&
water	32:46	0:0	4	s
op	32:47	0:0	4	->
water	32:49	0:0	4	height
op	32:56	0:0	4	==
water	32:59	0:0	4	height
op	32:66	0:0	4	+
water	32:68	0:0	4	1
stmts	33:8	33:25	3	
water	33:8	0:0	4	height
op	33:14	0:0	4	=
water	33:16	0:0	4	s
op	33:17	0:0	4	->
water	33:19	0:0	4	height
water	33:25	0:0	4	;
call	35:4	35:74	2	av_log
arg	35:11	35:19	3	s->avctx
water	35:11	0:0	4	s
op	35:12	0:0	4	->
water	35:14	0:0	4	avctx
arg	35:21	35:33	3	AV_LOG_DEBUG
water	35:21	0:0	4	AV_LOG_DEBUG
arg	35:35	35:59	3	"sof0: picture: %dx%d\n"
water	35:35	0:0	4	"sof0: picture: %dx%d\n"
arg	35:61	35:66	3	width
water	35:61	0:0	4	width
arg	35:68	35:74	3	height
water	35:68	0:0	4	height
water	35:75	0:0	2	;
if	36:4	37:34	2	(av_image_check_size (width ,height ,0 ,s -> avctx ))
cond	36:8	36:54	3	av_image_check_size (width ,height ,0 ,s -> avctx )
call	36:8	36:54	4	av_image_check_size
arg	36:28	36:33	5	width
water	36:28	0:0	6	width
arg	36:35	36:41	5	height
water	36:35	0:0	6	height
arg	36:43	36:44	5	0
water	36:43	0:0	6	0
arg	36:46	36:54	5	s->avctx
water	36:46	0:0	6	s
op	36:47	0:0	6	->
water	36:49	0:0	6	avctx
stmts	37:8	37:34	3	
return	37:8	37:34	4	AVERROR_INVALIDDATA
water	37:15	0:0	5	AVERROR_INVALIDDATA
water	39:4	0:0	2	nb_components
op	39:18	0:0	2	=
call	39:20	39:38	2	get_bits
arg	39:29	39:35	3	&s->gb
op	39:29	0:0	4	&
water	39:30	0:0	4	s
op	39:31	0:0	4	->
water	39:33	0:0	4	gb
arg	39:37	39:38	3	8
water	39:37	0:0	4	8
water	39:39	0:0	2	;
if	40:4	42:17	2	(nb_components <= 0 || nb_components > MAX_COMPONENTS)
cond	40:8	41:24	3	nb_components <= 0 || nb_components > MAX_COMPONENTS
water	40:8	0:0	4	nb_components
op	40:22	0:0	4	<=
water	40:25	0:0	4	0
op	40:27	0:0	4	||
water	41:8	0:0	4	nb_components
op	41:22	0:0	4	>
water	41:24	0:0	4	MAX_COMPONENTS
stmts	42:8	42:17	3	
return	42:8	42:17	4	-1
op	42:15	0:0	5	-
water	42:16	0:0	5	1
if	43:4	49:4	2	(s -> interlaced && ( s -> bottom_field == ! s -> interlace_polarity ))
cond	43:8	43:67	3	s -> interlaced && ( s -> bottom_field == ! s -> interlace_polarity )
water	43:8	0:0	4	s
op	43:9	0:0	4	->
water	43:11	0:0	4	interlaced
op	43:22	0:0	4	&&
water	43:25	0:0	4	(
water	43:26	0:0	4	s
op	43:27	0:0	4	->
water	43:29	0:0	4	bottom_field
op	43:42	0:0	4	==
op	43:45	0:0	4	!
water	43:46	0:0	4	s
op	43:47	0:0	4	->
water	43:49	0:0	4	interlace_polarity
water	43:67	0:0	4	)
stmts	43:70	49:4	3	
water	43:70	0:0	4	{
if	44:8	48:8	4	(nb_components != s -> nb_components)
cond	44:12	44:32	5	nb_components != s -> nb_components
water	44:12	0:0	6	nb_components
op	44:26	0:0	6	!=
water	44:29	0:0	6	s
op	44:30	0:0	6	->
water	44:32	0:0	6	nb_components
stmts	44:47	48:8	5	
water	44:47	0:0	6	{
call	45:12	46:67	6	av_log
arg	45:19	45:27	7	s->avctx
water	45:19	0:0	8	s
op	45:20	0:0	8	->
water	45:22	0:0	8	avctx
arg	45:29	45:41	7	AV_LOG_ERROR
water	45:29	0:0	8	AV_LOG_ERROR
arg	46:19	46:67	7	"nb_components changing in interlaced picture\n"
water	46:19	0:0	8	"nb_components changing in interlaced picture\n"
water	46:68	0:0	6	;
return	47:12	47:38	6	AVERROR_INVALIDDATA
water	47:19	0:0	7	AVERROR_INVALIDDATA
water	48:8	0:0	6	}
water	49:4	0:0	4	}
if	50:4	55:4	2	(s -> ls && ! ( bits <= 8 || nb_components == 1 ))
cond	50:8	50:50	3	s -> ls && ! ( bits <= 8 || nb_components == 1 )
water	50:8	0:0	4	s
op	50:9	0:0	4	->
water	50:11	0:0	4	ls
op	50:14	0:0	4	&&
op	50:17	0:0	4	!
water	50:18	0:0	4	(
water	50:19	0:0	4	bits
op	50:24	0:0	4	<=
water	50:27	0:0	4	8
op	50:29	0:0	4	||
water	50:32	0:0	4	nb_components
op	50:46	0:0	4	==
water	50:49	0:0	4	1
water	50:50	0:0	4	)
stmts	50:53	55:4	3	
water	50:53	0:0	4	{
call	51:8	53:69	4	avpriv_report_missing_feature
arg	51:38	51:46	5	s->avctx
water	51:38	0:0	6	s
op	51:39	0:0	6	->
water	51:41	0:0	6	avctx
arg	52:38	53:69	5	"JPEG-LS that is not <= 8 ""bits/component or 16-bit gray"
water	52:38	0:0	6	"JPEG-LS that is not <= 8 "
water	53:38	0:0	6	"bits/component or 16-bit gray"
water	53:70	0:0	4	;
return	54:8	54:35	4	AVERROR_PATCHWELCOME
water	54:15	0:0	5	AVERROR_PATCHWELCOME
water	55:4	0:0	4	}
water	56:4	0:0	2	s
op	56:5	0:0	2	->
water	56:7	0:0	2	nb_components
op	56:21	0:0	2	=
water	56:23	0:0	2	nb_components
water	56:36	0:0	2	;
water	57:4	0:0	2	s
op	57:5	0:0	2	->
water	57:7	0:0	2	h_max
op	57:21	0:0	2	=
water	57:23	0:0	2	1
water	57:24	0:0	2	;
water	58:4	0:0	2	s
op	58:5	0:0	2	->
water	58:7	0:0	2	v_max
op	58:21	0:0	2	=
water	58:23	0:0	2	1
water	58:24	0:0	2	;
call	59:4	59:38	2	memset
arg	59:11	59:18	3	h_count
water	59:11	0:0	4	h_count
arg	59:20	59:21	3	0
water	59:20	0:0	4	0
arg	59:23	59:38	3	sizeof(h_count)
op	59:23	0:0	4	sizeof
water	59:29	0:0	4	(
water	59:30	0:0	4	h_count
water	59:37	0:0	4	)
water	59:39	0:0	2	;
call	60:4	60:38	2	memset
arg	60:11	60:18	3	v_count
water	60:11	0:0	4	v_count
arg	60:20	60:21	3	0
water	60:20	0:0	4	0
arg	60:23	60:38	3	sizeof(v_count)
op	60:23	0:0	4	sizeof
water	60:29	0:0	4	(
water	60:30	0:0	4	v_count
water	60:37	0:0	4	)
water	60:39	0:0	2	;
for	61:4	86:4	2	(i = 0 ;i < nb_components;i ++)
forinit	61:9	61:14	3	i = 0 ;
water	61:9	0:0	4	i
op	61:11	0:0	4	=
water	61:13	0:0	4	0
water	61:14	0:0	4	;
cond	61:16	61:20	3	i < nb_components
water	61:16	0:0	4	i
op	61:18	0:0	4	<
water	61:20	0:0	4	nb_components
forexpr	61:35	61:36	3	i ++
water	61:35	0:0	4	i
op	61:36	0:0	4	++
stmts	61:40	86:4	3	
water	61:40	0:0	4	{
water	63:8	0:0	4	s
op	63:9	0:0	4	->
water	63:11	0:0	4	component_id
op	63:23	0:0	4	[
water	63:24	0:0	4	i
op	63:25	0:0	4	]
op	63:27	0:0	4	=
call	63:29	63:47	4	get_bits
arg	63:38	63:44	5	&s->gb
op	63:38	0:0	6	&
water	63:39	0:0	6	s
op	63:40	0:0	6	->
water	63:42	0:0	6	gb
arg	63:46	63:47	5	8
water	63:46	0:0	6	8
op	63:49	0:0	4	-
water	63:51	0:0	4	1
water	63:52	0:0	4	;
water	64:8	0:0	4	h_count
op	64:15	0:0	4	[
water	64:16	0:0	4	i
op	64:17	0:0	4	]
op	64:27	0:0	4	=
call	64:29	64:47	4	get_bits
arg	64:38	64:44	5	&s->gb
op	64:38	0:0	6	&
water	64:39	0:0	6	s
op	64:40	0:0	6	->
water	64:42	0:0	6	gb
arg	64:46	64:47	5	4
water	64:46	0:0	6	4
water	64:48	0:0	4	;
water	65:8	0:0	4	v_count
op	65:15	0:0	4	[
water	65:16	0:0	4	i
op	65:17	0:0	4	]
op	65:27	0:0	4	=
call	65:29	65:47	4	get_bits
arg	65:38	65:44	5	&s->gb
op	65:38	0:0	6	&
water	65:39	0:0	6	s
op	65:40	0:0	6	->
water	65:42	0:0	6	gb
arg	65:46	65:47	5	4
water	65:46	0:0	6	4
water	65:48	0:0	4	;
if	67:8	68:33	4	(h_count [ i ] > s -> h_max)
cond	67:12	67:28	5	h_count [ i ] > s -> h_max
water	67:12	0:0	6	h_count
op	67:19	0:0	6	[
water	67:20	0:0	6	i
op	67:21	0:0	6	]
op	67:23	0:0	6	>
water	67:25	0:0	6	s
op	67:26	0:0	6	->
water	67:28	0:0	6	h_max
stmts	68:12	68:33	5	
water	68:12	0:0	6	s
op	68:13	0:0	6	->
water	68:15	0:0	6	h_max
op	68:21	0:0	6	=
water	68:23	0:0	6	h_count
op	68:30	0:0	6	[
water	68:31	0:0	6	i
op	68:32	0:0	6	]
water	68:33	0:0	6	;
if	69:8	70:33	4	(v_count [ i ] > s -> v_max)
cond	69:12	69:28	5	v_count [ i ] > s -> v_max
water	69:12	0:0	6	v_count
op	69:19	0:0	6	[
water	69:20	0:0	6	i
op	69:21	0:0	6	]
op	69:23	0:0	6	>
water	69:25	0:0	6	s
op	69:26	0:0	6	->
water	69:28	0:0	6	v_max
stmts	70:12	70:33	5	
water	70:12	0:0	6	s
op	70:13	0:0	6	->
water	70:15	0:0	6	v_max
op	70:21	0:0	6	=
water	70:23	0:0	6	v_count
op	70:30	0:0	6	[
water	70:31	0:0	6	i
op	70:32	0:0	6	]
water	70:33	0:0	6	;
water	71:8	0:0	4	s
op	71:9	0:0	4	->
water	71:11	0:0	4	quant_index
op	71:22	0:0	4	[
water	71:23	0:0	4	i
op	71:24	0:0	4	]
op	71:26	0:0	4	=
call	71:28	71:46	4	get_bits
arg	71:37	71:43	5	&s->gb
op	71:37	0:0	6	&
water	71:38	0:0	6	s
op	71:39	0:0	6	->
water	71:41	0:0	6	gb
arg	71:45	71:46	5	8
water	71:45	0:0	6	8
water	71:47	0:0	4	;
if	72:8	75:8	4	(s -> quant_index [ i ] >= 4)
cond	72:12	72:33	5	s -> quant_index [ i ] >= 4
water	72:12	0:0	6	s
op	72:13	0:0	6	->
water	72:15	0:0	6	quant_index
op	72:26	0:0	6	[
water	72:27	0:0	6	i
op	72:28	0:0	6	]
op	72:30	0:0	6	>=
water	72:33	0:0	6	4
stmts	72:36	75:8	5	
water	72:36	0:0	6	{
call	73:12	73:69	6	av_log
arg	73:19	73:27	7	s->avctx
water	73:19	0:0	8	s
op	73:20	0:0	8	->
water	73:22	0:0	8	avctx
arg	73:29	73:41	7	AV_LOG_ERROR
water	73:29	0:0	8	AV_LOG_ERROR
arg	73:43	73:69	7	"quant_index is invalid\n"
water	73:43	0:0	8	"quant_index is invalid\n"
water	73:70	0:0	6	;
return	74:12	74:38	6	AVERROR_INVALIDDATA
water	74:19	0:0	7	AVERROR_INVALIDDATA
water	75:8	0:0	6	}
if	76:8	81:8	4	(! h_count [ i ] || ! v_count [ i ])
cond	76:12	76:37	5	! h_count [ i ] || ! v_count [ i ]
op	76:12	0:0	6	!
water	76:13	0:0	6	h_count
op	76:20	0:0	6	[
water	76:21	0:0	6	i
op	76:22	0:0	6	]
op	76:24	0:0	6	||
op	76:27	0:0	6	!
water	76:28	0:0	6	v_count
op	76:35	0:0	6	[
water	76:36	0:0	6	i
op	76:37	0:0	6	]
stmts	76:40	81:8	5	
water	76:40	0:0	6	{
call	77:12	79:44	6	av_log
arg	77:19	77:27	7	s->avctx
water	77:19	0:0	8	s
op	77:20	0:0	8	->
water	77:22	0:0	8	avctx
arg	77:29	77:41	7	AV_LOG_ERROR
water	77:29	0:0	8	AV_LOG_ERROR
arg	78:19	78:68	7	"Invalid sampling factor in component %d %d:%d\n"
water	78:19	0:0	8	"Invalid sampling factor in component %d %d:%d\n"
arg	79:19	79:20	7	i
water	79:19	0:0	8	i
arg	79:22	79:32	7	h_count[i]
water	79:22	0:0	8	h_count
op	79:29	0:0	8	[
water	79:30	0:0	8	i
op	79:31	0:0	8	]
arg	79:34	79:44	7	v_count[i]
water	79:34	0:0	8	v_count
op	79:41	0:0	8	[
water	79:42	0:0	8	i
op	79:43	0:0	8	]
water	79:45	0:0	6	;
return	80:12	80:38	6	AVERROR_INVALIDDATA
water	80:19	0:0	7	AVERROR_INVALIDDATA
water	81:8	0:0	6	}
call	83:8	85:52	4	av_log
arg	83:15	83:23	5	s->avctx
water	83:15	0:0	6	s
op	83:16	0:0	6	->
water	83:18	0:0	6	avctx
arg	83:25	83:37	5	AV_LOG_DEBUG
water	83:25	0:0	6	AV_LOG_DEBUG
arg	83:39	83:77	5	"component %d %d:%d id: %d quant:%d\n"
water	83:39	0:0	6	"component %d %d:%d id: %d quant:%d\n"
arg	84:15	84:16	5	i
water	84:15	0:0	6	i
arg	84:18	84:28	5	h_count[i]
water	84:18	0:0	6	h_count
op	84:25	0:0	6	[
water	84:26	0:0	6	i
op	84:27	0:0	6	]
arg	84:30	84:40	5	v_count[i]
water	84:30	0:0	6	v_count
op	84:37	0:0	6	[
water	84:38	0:0	6	i
op	84:39	0:0	6	]
arg	85:15	85:33	5	s->component_id[i]
water	85:15	0:0	6	s
op	85:16	0:0	6	->
water	85:18	0:0	6	component_id
op	85:30	0:0	6	[
water	85:31	0:0	6	i
op	85:32	0:0	6	]
arg	85:35	85:52	5	s->quant_index[i]
water	85:35	0:0	6	s
op	85:36	0:0	6	->
water	85:38	0:0	6	quant_index
op	85:49	0:0	6	[
water	85:50	0:0	6	i
op	85:51	0:0	6	]
water	85:53	0:0	4	;
water	86:4	0:0	4	}
if	88:4	91:4	2	(s -> ls && ( s -> h_max > 1 || s -> v_max > 1 ))
cond	88:8	88:46	3	s -> ls && ( s -> h_max > 1 || s -> v_max > 1 )
water	88:8	0:0	4	s
op	88:9	0:0	4	->
water	88:11	0:0	4	ls
op	88:14	0:0	4	&&
water	88:17	0:0	4	(
water	88:18	0:0	4	s
op	88:19	0:0	4	->
water	88:21	0:0	4	h_max
op	88:27	0:0	4	>
water	88:29	0:0	4	1
op	88:31	0:0	4	||
water	88:34	0:0	4	s
op	88:35	0:0	4	->
water	88:37	0:0	4	v_max
op	88:43	0:0	4	>
water	88:45	0:0	4	1
water	88:46	0:0	4	)
stmts	88:49	91:4	3	
water	88:49	0:0	4	{
call	89:8	89:72	4	avpriv_report_missing_feature
arg	89:38	89:46	5	s->avctx
water	89:38	0:0	6	s
op	89:39	0:0	6	->
water	89:41	0:0	6	avctx
arg	89:48	89:72	5	"Subsampling in JPEG-LS"
water	89:48	0:0	6	"Subsampling in JPEG-LS"
water	89:73	0:0	4	;
return	90:8	90:35	4	AVERROR_PATCHWELCOME
water	90:15	0:0	5	AVERROR_PATCHWELCOME
water	91:4	0:0	4	}
if	95:4	124:4	2	(width != s -> width || height != s -> height || bits != s -> bits ||memcmp (s -> h_count ,h_count ,sizeof ( h_count ) ) ||memcmp (s -> v_count ,v_count ,sizeof ( v_count ) ))
cond	95:11	98:54	3	width != s -> width || height != s -> height || bits != s -> bits ||memcmp (s -> h_count ,h_count ,sizeof ( h_count ) ) ||memcmp (s -> v_count ,v_count ,sizeof ( v_count ) )
water	95:11	0:0	4	width
op	95:17	0:0	4	!=
water	95:20	0:0	4	s
op	95:21	0:0	4	->
water	95:23	0:0	4	width
op	95:29	0:0	4	||
water	95:32	0:0	4	height
op	95:39	0:0	4	!=
water	95:42	0:0	4	s
op	95:43	0:0	4	->
water	95:45	0:0	4	height
op	96:8	0:0	4	||
water	96:11	0:0	4	bits
op	96:16	0:0	4	!=
water	96:19	0:0	4	s
op	96:20	0:0	4	->
water	96:22	0:0	4	bits
op	97:8	0:0	4	||
call	97:11	97:54	4	memcmp
arg	97:18	97:28	5	s->h_count
water	97:18	0:0	6	s
op	97:19	0:0	6	->
water	97:21	0:0	6	h_count
arg	97:30	97:37	5	h_count
water	97:30	0:0	6	h_count
arg	97:39	97:54	5	sizeof(h_count)
op	97:39	0:0	6	sizeof
water	97:45	0:0	6	(
water	97:46	0:0	6	h_count
water	97:53	0:0	6	)
op	98:8	0:0	4	||
call	98:11	98:54	4	memcmp
arg	98:18	98:28	5	s->v_count
water	98:18	0:0	6	s
op	98:19	0:0	6	->
water	98:21	0:0	6	v_count
arg	98:30	98:37	5	v_count
water	98:30	0:0	6	v_count
arg	98:39	98:54	5	sizeof(v_count)
op	98:39	0:0	6	sizeof
water	98:45	0:0	6	(
water	98:46	0:0	6	v_count
water	98:53	0:0	6	)
stmts	98:57	124:4	3	
water	98:57	0:0	4	{
water	100:8	0:0	4	s
op	100:9	0:0	4	->
water	100:11	0:0	4	width
op	100:22	0:0	4	=
water	100:24	0:0	4	width
water	100:29	0:0	4	;
water	101:8	0:0	4	s
op	101:9	0:0	4	->
water	101:11	0:0	4	height
op	101:22	0:0	4	=
water	101:24	0:0	4	height
water	101:30	0:0	4	;
water	102:8	0:0	4	s
op	102:9	0:0	4	->
water	102:11	0:0	4	bits
op	102:22	0:0	4	=
water	102:24	0:0	4	bits
water	102:28	0:0	4	;
call	103:8	103:51	4	memcpy
arg	103:15	103:25	5	s->h_count
water	103:15	0:0	6	s
op	103:16	0:0	6	->
water	103:18	0:0	6	h_count
arg	103:27	103:34	5	h_count
water	103:27	0:0	6	h_count
arg	103:36	103:51	5	sizeof(h_count)
op	103:36	0:0	6	sizeof
water	103:42	0:0	6	(
water	103:43	0:0	6	h_count
water	103:50	0:0	6	)
water	103:52	0:0	4	;
call	104:8	104:51	4	memcpy
arg	104:15	104:25	5	s->v_count
water	104:15	0:0	6	s
op	104:16	0:0	6	->
water	104:18	0:0	6	v_count
arg	104:27	104:34	5	v_count
water	104:27	0:0	6	v_count
arg	104:36	104:51	5	sizeof(v_count)
op	104:36	0:0	6	sizeof
water	104:42	0:0	6	(
water	104:43	0:0	6	v_count
water	104:50	0:0	6	)
water	104:52	0:0	4	;
water	105:8	0:0	4	s
op	105:9	0:0	4	->
water	105:11	0:0	4	interlaced
op	105:22	0:0	4	=
water	105:24	0:0	4	0
water	105:25	0:0	4	;
water	106:8	0:0	4	s
op	106:9	0:0	4	->
water	106:11	0:0	4	got_picture
op	106:23	0:0	4	=
water	106:25	0:0	4	0
water	106:26	0:0	4	;
if	109:8	117:8	4	(s -> first_picture && s -> org_height != 0 && s -> height < ( ( s -> org_height * 3 ) / 4 ))
cond	109:12	111:48	5	s -> first_picture && s -> org_height != 0 && s -> height < ( ( s -> org_height * 3 ) / 4 )
water	109:12	0:0	6	s
op	109:13	0:0	6	->
water	109:15	0:0	6	first_picture
op	109:31	0:0	6	&&
water	110:12	0:0	6	s
op	110:13	0:0	6	->
water	110:15	0:0	6	org_height
op	110:26	0:0	6	!=
water	110:29	0:0	6	0
op	110:31	0:0	6	&&
water	111:12	0:0	6	s
op	111:13	0:0	6	->
water	111:15	0:0	6	height
op	111:22	0:0	6	<
water	111:24	0:0	6	(
water	111:25	0:0	6	(
water	111:26	0:0	6	s
op	111:27	0:0	6	->
water	111:29	0:0	6	org_height
op	111:40	0:0	6	*
water	111:42	0:0	6	3
water	111:43	0:0	6	)
op	111:45	0:0	6	/
water	111:47	0:0	6	4
water	111:48	0:0	6	)
stmts	111:51	117:8	5	
water	111:51	0:0	6	{
water	112:12	0:0	6	s
op	112:13	0:0	6	->
water	112:15	0:0	6	interlaced
op	112:45	0:0	6	=
water	112:47	0:0	6	1
water	112:48	0:0	6	;
water	113:12	0:0	6	s
op	113:13	0:0	6	->
water	113:15	0:0	6	bottom_field
op	113:45	0:0	6	=
water	113:47	0:0	6	s
op	113:48	0:0	6	->
water	113:50	0:0	6	interlace_polarity
water	113:68	0:0	6	;
water	114:12	0:0	6	s
op	114:13	0:0	6	->
water	114:15	0:0	6	picture_ptr
op	114:26	0:0	6	->
water	114:28	0:0	6	interlaced_frame
op	114:45	0:0	6	=
water	114:47	0:0	6	1
water	114:48	0:0	6	;
water	115:12	0:0	6	s
op	115:13	0:0	6	->
water	115:15	0:0	6	picture_ptr
op	115:26	0:0	6	->
water	115:28	0:0	6	top_field_first
op	115:45	0:0	6	=
op	115:47	0:0	6	!
water	115:48	0:0	6	s
op	115:49	0:0	6	->
water	115:51	0:0	6	interlace_polarity
water	115:69	0:0	6	;
water	116:12	0:0	6	height
op	116:19	0:0	6	*=
water	116:22	0:0	6	2
water	116:23	0:0	6	;
water	117:8	0:0	6	}
water	119:8	0:0	4	ret
op	119:12	0:0	4	=
call	119:14	119:55	4	ff_set_dimensions
arg	119:32	119:40	5	s->avctx
water	119:32	0:0	6	s
op	119:33	0:0	6	->
water	119:35	0:0	6	avctx
arg	119:42	119:47	5	width
water	119:42	0:0	6	width
arg	119:49	119:55	5	height
water	119:49	0:0	6	height
water	119:56	0:0	4	;
if	120:8	121:22	4	(ret < 0)
cond	120:12	120:18	5	ret < 0
water	120:12	0:0	6	ret
op	120:16	0:0	6	<
water	120:18	0:0	6	0
stmts	121:12	121:22	5	
return	121:12	121:22	6	ret
water	121:19	0:0	7	ret
water	123:8	0:0	4	s
op	123:9	0:0	4	->
water	123:11	0:0	4	first_picture
op	123:25	0:0	4	=
water	123:27	0:0	4	0
water	123:28	0:0	4	;
water	124:4	0:0	4	}
if	126:4	131:4	2	(s -> got_picture && s -> interlaced && ( s -> bottom_field == ! s -> interlace_polarity ))
cond	126:8	126:85	3	s -> got_picture && s -> interlaced && ( s -> bottom_field == ! s -> interlace_polarity )
water	126:8	0:0	4	s
op	126:9	0:0	4	->
water	126:11	0:0	4	got_picture
op	126:23	0:0	4	&&
water	126:26	0:0	4	s
op	126:27	0:0	4	->
water	126:29	0:0	4	interlaced
op	126:40	0:0	4	&&
water	126:43	0:0	4	(
water	126:44	0:0	4	s
op	126:45	0:0	4	->
water	126:47	0:0	4	bottom_field
op	126:60	0:0	4	==
op	126:63	0:0	4	!
water	126:64	0:0	4	s
op	126:65	0:0	4	->
water	126:67	0:0	4	interlace_polarity
water	126:85	0:0	4	)
stmts	126:88	131:4	3	
water	126:88	0:0	4	{
if	127:8	130:8	4	(s -> progressive)
cond	127:12	127:15	5	s -> progressive
water	127:12	0:0	6	s
op	127:13	0:0	6	->
water	127:15	0:0	6	progressive
stmts	127:28	130:8	5	
water	127:28	0:0	6	{
call	128:12	128:84	6	avpriv_request_sample
arg	128:34	128:42	7	s->avctx
water	128:34	0:0	8	s
op	128:35	0:0	8	->
water	128:37	0:0	8	avctx
arg	128:44	128:84	7	"progressively coded interlaced picture"
water	128:44	0:0	8	"progressively coded interlaced picture"
water	128:85	0:0	6	;
return	129:12	129:38	6	AVERROR_INVALIDDATA
water	129:19	0:0	7	AVERROR_INVALIDDATA
water	130:8	0:0	6	}
water	131:4	0:0	4	}
else	131:6	326:4	2
stmts	131:10	326:4	3	
water	131:10	0:0	4	{
if	132:8	133:22	4	(s -> v_max == 1 && s -> h_max == 1 && s -> lossless == 1 && ( nb_components == 3 || nb_components == 4 ))
cond	132:12	132:101	5	s -> v_max == 1 && s -> h_max == 1 && s -> lossless == 1 && ( nb_components == 3 || nb_components == 4 )
water	132:12	0:0	6	s
op	132:13	0:0	6	->
water	132:15	0:0	6	v_max
op	132:21	0:0	6	==
water	132:24	0:0	6	1
op	132:26	0:0	6	&&
water	132:29	0:0	6	s
op	132:30	0:0	6	->
water	132:32	0:0	6	h_max
op	132:38	0:0	6	==
water	132:41	0:0	6	1
op	132:43	0:0	6	&&
water	132:46	0:0	6	s
op	132:47	0:0	6	->
water	132:49	0:0	6	lossless
op	132:57	0:0	6	==
water	132:59	0:0	6	1
op	132:61	0:0	6	&&
water	132:64	0:0	6	(
water	132:65	0:0	6	nb_components
op	132:78	0:0	6	==
water	132:80	0:0	6	3
op	132:82	0:0	6	||
water	132:85	0:0	6	nb_components
op	132:98	0:0	6	==
water	132:100	0:0	6	4
water	132:101	0:0	6	)
stmts	133:12	133:22	5	
water	133:12	0:0	6	s
op	133:13	0:0	6	->
water	133:15	0:0	6	rgb
op	133:19	0:0	6	=
water	133:21	0:0	6	1
water	133:22	0:0	6	;
else	134:8	135:22	4
stmts	134:13	135:22	5	
if	134:13	135:22	6	(! s -> lossless)
cond	134:17	134:21	7	! s -> lossless
op	134:17	0:0	8	!
water	134:18	0:0	8	s
op	134:19	0:0	8	->
water	134:21	0:0	8	lossless
stmts	135:12	135:22	7	
water	135:12	0:0	8	s
op	135:13	0:0	8	->
water	135:15	0:0	8	rgb
op	135:19	0:0	8	=
water	135:21	0:0	8	0
water	135:22	0:0	8	;
water	137:4	0:0	4	pix_fmt_id
op	137:15	0:0	4	=
water	137:17	0:0	4	(
water	137:18	0:0	4	s
op	137:19	0:0	4	->
water	137:21	0:0	4	h_count
op	137:28	0:0	4	[
water	137:29	0:0	4	0
op	137:30	0:0	4	]
op	137:32	0:0	4	<<
water	137:35	0:0	4	28
water	137:37	0:0	4	)
op	137:39	0:0	4	|
water	137:41	0:0	4	(
water	137:42	0:0	4	s
op	137:43	0:0	4	->
water	137:45	0:0	4	v_count
op	137:52	0:0	4	[
water	137:53	0:0	4	0
op	137:54	0:0	4	]
op	137:56	0:0	4	<<
water	137:59	0:0	4	24
water	137:61	0:0	4	)
op	137:63	0:0	4	|
water	138:17	0:0	4	(
water	138:18	0:0	4	s
op	138:19	0:0	4	->
water	138:21	0:0	4	h_count
op	138:28	0:0	4	[
water	138:29	0:0	4	1
op	138:30	0:0	4	]
op	138:32	0:0	4	<<
water	138:35	0:0	4	20
water	138:37	0:0	4	)
op	138:39	0:0	4	|
water	138:41	0:0	4	(
water	138:42	0:0	4	s
op	138:43	0:0	4	->
water	138:45	0:0	4	v_count
op	138:52	0:0	4	[
water	138:53	0:0	4	1
op	138:54	0:0	4	]
op	138:56	0:0	4	<<
water	138:59	0:0	4	16
water	138:61	0:0	4	)
op	138:63	0:0	4	|
water	139:17	0:0	4	(
water	139:18	0:0	4	s
op	139:19	0:0	4	->
water	139:21	0:0	4	h_count
op	139:28	0:0	4	[
water	139:29	0:0	4	2
op	139:30	0:0	4	]
op	139:32	0:0	4	<<
water	139:35	0:0	4	12
water	139:37	0:0	4	)
op	139:39	0:0	4	|
water	139:41	0:0	4	(
water	139:42	0:0	4	s
op	139:43	0:0	4	->
water	139:45	0:0	4	v_count
op	139:52	0:0	4	[
water	139:53	0:0	4	2
op	139:54	0:0	4	]
op	139:56	0:0	4	<<
water	139:60	0:0	4	8
water	139:61	0:0	4	)
op	139:63	0:0	4	|
water	140:17	0:0	4	(
water	140:18	0:0	4	s
op	140:19	0:0	4	->
water	140:21	0:0	4	h_count
op	140:28	0:0	4	[
water	140:29	0:0	4	3
op	140:30	0:0	4	]
op	140:32	0:0	4	<<
water	140:36	0:0	4	4
water	140:37	0:0	4	)
op	140:39	0:0	4	|
water	140:42	0:0	4	s
op	140:43	0:0	4	->
water	140:45	0:0	4	v_count
op	140:52	0:0	4	[
water	140:53	0:0	4	3
op	140:54	0:0	4	]
water	140:55	0:0	4	;
call	141:4	141:64	4	av_log
arg	141:11	141:19	5	s->avctx
water	141:11	0:0	6	s
op	141:12	0:0	6	->
water	141:14	0:0	6	avctx
arg	141:21	141:33	5	AV_LOG_DEBUG
water	141:21	0:0	6	AV_LOG_DEBUG
arg	141:35	141:52	5	"pix fmt id %x\n"
water	141:35	0:0	6	"pix fmt id %x\n"
arg	141:54	141:64	5	pix_fmt_id
water	141:54	0:0	6	pix_fmt_id
water	141:65	0:0	4	;
if	144:4	145:52	4	(! ( pix_fmt_id & 0 xD0D0D0D0 ))
cond	144:8	144:33	5	! ( pix_fmt_id & 0 xD0D0D0D0 )
op	144:8	0:0	6	!
water	144:9	0:0	6	(
water	144:10	0:0	6	pix_fmt_id
op	144:21	0:0	6	&
water	144:23	0:0	6	0
water	144:24	0:0	6	xD0D0D0D0
water	144:33	0:0	6	)
stmts	145:8	145:52	5	
water	145:8	0:0	6	pix_fmt_id
op	145:19	0:0	6	-=
water	145:22	0:0	6	(
water	145:23	0:0	6	pix_fmt_id
op	145:34	0:0	6	&
water	145:36	0:0	6	0
water	145:37	0:0	6	xF0F0F0F0
water	145:46	0:0	6	)
op	145:48	0:0	6	>>
water	145:51	0:0	6	1
water	145:52	0:0	6	;
if	146:4	147:52	4	(! ( pix_fmt_id & 0 x0D0D0D0D ))
cond	146:8	146:33	5	! ( pix_fmt_id & 0 x0D0D0D0D )
op	146:8	0:0	6	!
water	146:9	0:0	6	(
water	146:10	0:0	6	pix_fmt_id
op	146:21	0:0	6	&
water	146:23	0:0	6	0
water	146:24	0:0	6	x0D0D0D0D
water	146:33	0:0	6	)
stmts	147:8	147:52	5	
water	147:8	0:0	6	pix_fmt_id
op	147:19	0:0	6	-=
water	147:22	0:0	6	(
water	147:23	0:0	6	pix_fmt_id
op	147:34	0:0	6	&
water	147:36	0:0	6	0
water	147:37	0:0	6	x0F0F0F0F
water	147:46	0:0	6	)
op	147:48	0:0	6	>>
water	147:51	0:0	6	1
water	147:52	0:0	6	;
for	149:4	163:4	4	(i = 0 ;i < 8;i ++)
forinit	149:9	149:14	5	i = 0 ;
water	149:9	0:0	6	i
op	149:11	0:0	6	=
water	149:13	0:0	6	0
water	149:14	0:0	6	;
cond	149:16	149:20	5	i < 8
water	149:16	0:0	6	i
op	149:18	0:0	6	<
water	149:20	0:0	6	8
forexpr	149:23	149:24	5	i ++
water	149:23	0:0	6	i
op	149:24	0:0	6	++
stmts	149:28	163:4	5	
water	149:28	0:0	6	{
decl	150:8	150:33	6	int	j
op	150:14	0:0	6	=
water	150:16	0:0	6	6
op	150:18	0:0	6	+
water	150:20	0:0	6	(
water	150:21	0:0	6	i
op	150:22	0:0	6	&
water	150:23	0:0	6	1
water	150:24	0:0	6	)
op	150:26	0:0	6	-
water	150:28	0:0	6	(
water	150:29	0:0	6	i
op	150:30	0:0	6	&
water	150:31	0:0	6	6
water	150:32	0:0	6	)
decl	151:8	151:44	6	int	is
op	151:15	0:0	6	=
water	151:17	0:0	6	(
water	151:18	0:0	6	pix_fmt_id
op	151:29	0:0	6	>>
water	151:32	0:0	6	(
water	151:33	0:0	6	4
op	151:34	0:0	6	*
water	151:35	0:0	6	i
water	151:36	0:0	6	)
water	151:37	0:0	6	)
op	151:39	0:0	6	&
water	151:41	0:0	6	0
water	151:42	0:0	6	xF
decl	152:8	152:44	6	int	js
op	152:15	0:0	6	=
water	152:17	0:0	6	(
water	152:18	0:0	6	pix_fmt_id
op	152:29	0:0	6	>>
water	152:32	0:0	6	(
water	152:33	0:0	6	4
op	152:34	0:0	6	*
water	152:35	0:0	6	j
water	152:36	0:0	6	)
water	152:37	0:0	6	)
op	152:39	0:0	6	&
water	152:41	0:0	6	0
water	152:42	0:0	6	xF
if	154:8	155:53	6	(is == 1 && js != 2 && ( i < 2 || i > 5 ))
cond	154:12	154:49	7	is == 1 && js != 2 && ( i < 2 || i > 5 )
water	154:12	0:0	8	is
op	154:15	0:0	8	==
water	154:18	0:0	8	1
op	154:20	0:0	8	&&
water	154:23	0:0	8	js
op	154:26	0:0	8	!=
water	154:29	0:0	8	2
op	154:31	0:0	8	&&
water	154:34	0:0	8	(
water	154:35	0:0	8	i
op	154:37	0:0	8	<
water	154:39	0:0	8	2
op	154:41	0:0	8	||
water	154:44	0:0	8	i
op	154:46	0:0	8	>
water	154:48	0:0	8	5
water	154:49	0:0	8	)
stmts	155:12	155:53	7	
water	155:12	0:0	8	js
op	155:15	0:0	8	=
water	155:17	0:0	8	(
water	155:18	0:0	8	pix_fmt_id
op	155:29	0:0	8	>>
water	155:32	0:0	8	(
water	155:34	0:0	8	8
op	155:36	0:0	8	+
water	155:38	0:0	8	4
op	155:39	0:0	8	*
water	155:40	0:0	8	(
water	155:41	0:0	8	i
op	155:42	0:0	8	&
water	155:43	0:0	8	1
water	155:44	0:0	8	)
water	155:45	0:0	8	)
water	155:46	0:0	8	)
op	155:48	0:0	8	&
water	155:50	0:0	8	0
water	155:51	0:0	8	xF
water	155:53	0:0	8	;
if	156:8	157:53	6	(is == 1 && js != 2 && ( i < 2 || i > 5 ))
cond	156:12	156:49	7	is == 1 && js != 2 && ( i < 2 || i > 5 )
water	156:12	0:0	8	is
op	156:15	0:0	8	==
water	156:18	0:0	8	1
op	156:20	0:0	8	&&
water	156:23	0:0	8	js
op	156:26	0:0	8	!=
water	156:29	0:0	8	2
op	156:31	0:0	8	&&
water	156:34	0:0	8	(
water	156:35	0:0	8	i
op	156:37	0:0	8	<
water	156:39	0:0	8	2
op	156:41	0:0	8	||
water	156:44	0:0	8	i
op	156:46	0:0	8	>
water	156:48	0:0	8	5
water	156:49	0:0	8	)
stmts	157:12	157:53	7	
water	157:12	0:0	8	js
op	157:15	0:0	8	=
water	157:17	0:0	8	(
water	157:18	0:0	8	pix_fmt_id
op	157:29	0:0	8	>>
water	157:32	0:0	8	(
water	157:33	0:0	8	16
op	157:36	0:0	8	+
water	157:38	0:0	8	4
op	157:39	0:0	8	*
water	157:40	0:0	8	(
water	157:41	0:0	8	i
op	157:42	0:0	8	&
water	157:43	0:0	8	1
water	157:44	0:0	8	)
water	157:45	0:0	8	)
water	157:46	0:0	8	)
op	157:48	0:0	8	&
water	157:50	0:0	8	0
water	157:51	0:0	8	xF
water	157:53	0:0	8	;
if	159:8	162:8	6	(is == 1 && js == 2)
cond	159:12	159:29	7	is == 1 && js == 2
water	159:12	0:0	8	is
op	159:15	0:0	8	==
water	159:18	0:0	8	1
op	159:20	0:0	8	&&
water	159:23	0:0	8	js
op	159:26	0:0	8	==
water	159:29	0:0	8	2
stmts	159:32	162:8	7	
water	159:32	0:0	8	{
if	160:12	160:49	8	(i & 1)
cond	160:16	160:20	9	i & 1
water	160:16	0:0	10	i
op	160:18	0:0	10	&
water	160:20	0:0	10	1
stmts	160:23	160:49	9	
water	160:23	0:0	10	s
op	160:24	0:0	10	->
water	160:26	0:0	10	upscale_h
op	160:36	0:0	10	|=
water	160:39	0:0	10	1
op	160:41	0:0	10	<<
water	160:44	0:0	10	(
water	160:45	0:0	10	j
op	160:46	0:0	10	/
water	160:47	0:0	10	2
water	160:48	0:0	10	)
water	160:49	0:0	10	;
else	161:12	161:49	8
stmts	161:23	161:49	9	
water	161:23	0:0	10	s
op	161:24	0:0	10	->
water	161:26	0:0	10	upscale_v
op	161:36	0:0	10	|=
water	161:39	0:0	10	1
op	161:41	0:0	10	<<
water	161:44	0:0	10	(
water	161:45	0:0	10	j
op	161:46	0:0	10	/
water	161:47	0:0	10	2
water	161:48	0:0	10	)
water	161:49	0:0	10	;
water	162:8	0:0	8	}
water	163:4	0:0	6	}
switch	165:4	287:4	4	(pix_fmt_id)
cond	165:12	165:12	5	pix_fmt_id
water	165:12	0:0	6	pix_fmt_id
stmts	165:24	287:4	5	
water	165:24	0:0	6	{
label	166:4	166:19	6	case 0 x11111100 :
if	167:8	168:82	6	(s -> rgb)
cond	167:12	167:15	7	s -> rgb
water	167:12	0:0	8	s
op	167:13	0:0	8	->
water	167:15	0:0	8	rgb
stmts	168:12	168:82	7	
water	168:12	0:0	8	s
op	168:13	0:0	8	->
water	168:15	0:0	8	avctx
op	168:20	0:0	8	->
water	168:22	0:0	8	pix_fmt
op	168:30	0:0	8	=
water	168:32	0:0	8	s
op	168:33	0:0	8	->
water	168:35	0:0	8	bits
op	168:40	0:0	8	<=
water	168:43	0:0	8	9
water	168:45	0:0	8	?
water	168:47	0:0	8	AV_PIX_FMT_BGR24
water	168:64	0:0	8	:
water	168:66	0:0	8	AV_PIX_FMT_BGR48
water	168:82	0:0	8	;
else	169:8	177:8	6
stmts	169:13	177:8	7	
water	169:13	0:0	8	{
if	170:12	172:12	8	(s -> component_id [ 0 ] == 'Q' && s -> component_id [ 1 ] == 'F' && s -> component_id [ 2 ] == 'A')
cond	170:16	170:96	9	s -> component_id [ 0 ] == 'Q' && s -> component_id [ 1 ] == 'F' && s -> component_id [ 2 ] == 'A'
water	170:16	0:0	10	s
op	170:17	0:0	10	->
water	170:19	0:0	10	component_id
op	170:31	0:0	10	[
water	170:32	0:0	10	0
op	170:33	0:0	10	]
op	170:35	0:0	10	==
water	170:38	0:0	10	'Q'
op	170:42	0:0	10	&&
water	170:45	0:0	10	s
op	170:46	0:0	10	->
water	170:48	0:0	10	component_id
op	170:60	0:0	10	[
water	170:61	0:0	10	1
op	170:62	0:0	10	]
op	170:64	0:0	10	==
water	170:67	0:0	10	'F'
op	170:71	0:0	10	&&
water	170:74	0:0	10	s
op	170:75	0:0	10	->
water	170:77	0:0	10	component_id
op	170:89	0:0	10	[
water	170:90	0:0	10	2
op	170:91	0:0	10	]
op	170:93	0:0	10	==
water	170:96	0:0	10	'A'
stmts	170:101	172:12	9	
water	170:101	0:0	10	{
water	171:16	0:0	10	s
op	171:17	0:0	10	->
water	171:19	0:0	10	avctx
op	171:24	0:0	10	->
water	171:26	0:0	10	pix_fmt
op	171:34	0:0	10	=
water	171:36	0:0	10	s
op	171:37	0:0	10	->
water	171:39	0:0	10	bits
op	171:44	0:0	10	<=
water	171:47	0:0	10	8
water	171:49	0:0	10	?
water	171:51	0:0	10	AV_PIX_FMT_GBRP
water	171:67	0:0	10	:
water	171:69	0:0	10	AV_PIX_FMT_GBRP16
water	171:86	0:0	10	;
water	172:12	0:0	10	}
else	172:14	176:12	8
stmts	172:19	176:12	9	
water	172:19	0:0	10	{
if	173:16	173:109	10	(s -> bits <= 8)
cond	173:20	173:31	11	s -> bits <= 8
water	173:20	0:0	12	s
op	173:21	0:0	12	->
water	173:23	0:0	12	bits
op	173:28	0:0	12	<=
water	173:31	0:0	12	8
stmts	173:34	173:109	11	
water	173:34	0:0	12	s
op	173:35	0:0	12	->
water	173:37	0:0	12	avctx
op	173:42	0:0	12	->
water	173:44	0:0	12	pix_fmt
op	173:52	0:0	12	=
water	173:54	0:0	12	s
op	173:55	0:0	12	->
water	173:57	0:0	12	cs_itu601
water	173:67	0:0	12	?
water	173:69	0:0	12	AV_PIX_FMT_YUV444P
water	173:88	0:0	12	:
water	173:90	0:0	12	AV_PIX_FMT_YUVJ444P
water	173:109	0:0	12	;
else	174:16	174:74	10
stmts	174:34	174:74	11	
water	174:34	0:0	12	s
op	174:35	0:0	12	->
water	174:37	0:0	12	avctx
op	174:42	0:0	12	->
water	174:44	0:0	12	pix_fmt
op	174:52	0:0	12	=
water	174:54	0:0	12	AV_PIX_FMT_YUV444P16
water	174:74	0:0	12	;
water	175:12	0:0	10	s
op	175:13	0:0	10	->
water	175:15	0:0	10	avctx
op	175:20	0:0	10	->
water	175:22	0:0	10	color_range
op	175:34	0:0	10	=
water	175:36	0:0	10	s
op	175:37	0:0	10	->
water	175:39	0:0	10	cs_itu601
water	175:49	0:0	10	?
water	175:51	0:0	10	AVCOL_RANGE_MPEG
water	175:68	0:0	10	:
water	175:70	0:0	10	AVCOL_RANGE_JPEG
water	175:86	0:0	10	;
water	176:12	0:0	10	}
water	177:8	0:0	8	}
call	178:8	178:40	6	av_assert0
arg	178:19	178:40	7	s->nb_components==3
water	178:19	0:0	8	s
op	178:20	0:0	8	->
water	178:22	0:0	8	nb_components
op	178:36	0:0	8	==
water	178:39	0:0	8	3
water	178:41	0:0	6	;
break	179:8	179:13	6	
label	180:4	180:19	6	case 0 x11111111 :
if	181:8	182:82	6	(s -> rgb)
cond	181:12	181:15	7	s -> rgb
water	181:12	0:0	8	s
op	181:13	0:0	8	->
water	181:15	0:0	8	rgb
stmts	182:12	182:82	7	
water	182:12	0:0	8	s
op	182:13	0:0	8	->
water	182:15	0:0	8	avctx
op	182:20	0:0	8	->
water	182:22	0:0	8	pix_fmt
op	182:30	0:0	8	=
water	182:32	0:0	8	s
op	182:33	0:0	8	->
water	182:35	0:0	8	bits
op	182:40	0:0	8	<=
water	182:43	0:0	8	9
water	182:45	0:0	8	?
water	182:47	0:0	8	AV_PIX_FMT_ABGR
water	182:63	0:0	8	:
water	182:65	0:0	8	AV_PIX_FMT_RGBA64
water	182:82	0:0	8	;
else	183:8	190:8	6
stmts	183:13	190:8	7	
water	183:13	0:0	8	{
if	184:12	186:12	8	(s -> adobe_transform == 0 && s -> bits <= 8)
cond	184:16	184:54	9	s -> adobe_transform == 0 && s -> bits <= 8
water	184:16	0:0	10	s
op	184:17	0:0	10	->
water	184:19	0:0	10	adobe_transform
op	184:35	0:0	10	==
water	184:38	0:0	10	0
op	184:40	0:0	10	&&
water	184:43	0:0	10	s
op	184:44	0:0	10	->
water	184:46	0:0	10	bits
op	184:51	0:0	10	<=
water	184:54	0:0	10	8
stmts	184:57	186:12	9	
water	184:57	0:0	10	{
water	185:16	0:0	10	s
op	185:17	0:0	10	->
water	185:19	0:0	10	avctx
op	185:24	0:0	10	->
water	185:26	0:0	10	pix_fmt
op	185:34	0:0	10	=
water	185:36	0:0	10	AV_PIX_FMT_GBRAP
water	185:52	0:0	10	;
water	186:12	0:0	10	}
else	186:14	189:12	8
stmts	186:19	189:12	9	
water	186:19	0:0	10	{
water	187:16	0:0	10	s
op	187:17	0:0	10	->
water	187:19	0:0	10	avctx
op	187:24	0:0	10	->
water	187:26	0:0	10	pix_fmt
op	187:34	0:0	10	=
water	187:36	0:0	10	s
op	187:37	0:0	10	->
water	187:39	0:0	10	bits
op	187:44	0:0	10	<=
water	187:47	0:0	10	8
water	187:49	0:0	10	?
water	187:51	0:0	10	AV_PIX_FMT_YUVA444P
water	187:71	0:0	10	:
water	187:73	0:0	10	AV_PIX_FMT_YUVA444P16
water	187:94	0:0	10	;
water	188:16	0:0	10	s
op	188:17	0:0	10	->
water	188:19	0:0	10	avctx
op	188:24	0:0	10	->
water	188:26	0:0	10	color_range
op	188:38	0:0	10	=
water	188:40	0:0	10	s
op	188:41	0:0	10	->
water	188:43	0:0	10	cs_itu601
water	188:53	0:0	10	?
water	188:55	0:0	10	AVCOL_RANGE_MPEG
water	188:72	0:0	10	:
water	188:74	0:0	10	AVCOL_RANGE_JPEG
water	188:90	0:0	10	;
water	189:12	0:0	10	}
water	190:8	0:0	8	}
call	191:8	191:40	6	av_assert0
arg	191:19	191:40	7	s->nb_components==4
water	191:19	0:0	8	s
op	191:20	0:0	8	->
water	191:22	0:0	8	nb_components
op	191:36	0:0	8	==
water	191:39	0:0	8	4
water	191:41	0:0	6	;
break	192:8	192:13	6	
label	193:4	193:19	6	case 0 x22111122 :
if	194:8	199:8	6	(s -> adobe_transform == 0 && s -> bits <= 8)
cond	194:12	194:50	7	s -> adobe_transform == 0 && s -> bits <= 8
water	194:12	0:0	8	s
op	194:13	0:0	8	->
water	194:15	0:0	8	adobe_transform
op	194:31	0:0	8	==
water	194:34	0:0	8	0
op	194:36	0:0	8	&&
water	194:39	0:0	8	s
op	194:40	0:0	8	->
water	194:42	0:0	8	bits
op	194:47	0:0	8	<=
water	194:50	0:0	8	8
stmts	194:53	199:8	7	
water	194:53	0:0	8	{
water	195:12	0:0	8	s
op	195:13	0:0	8	->
water	195:15	0:0	8	avctx
op	195:20	0:0	8	->
water	195:22	0:0	8	pix_fmt
op	195:30	0:0	8	=
water	195:32	0:0	8	AV_PIX_FMT_GBRAP
water	195:48	0:0	8	;
water	196:12	0:0	8	s
op	196:13	0:0	8	->
water	196:15	0:0	8	upscale_v
op	196:25	0:0	8	=
water	196:27	0:0	8	6
water	196:28	0:0	8	;
water	197:12	0:0	8	s
op	197:13	0:0	8	->
water	197:15	0:0	8	upscale_h
op	197:25	0:0	8	=
water	197:27	0:0	8	6
water	197:28	0:0	8	;
water	198:12	0:0	8	s
op	198:13	0:0	8	->
water	198:15	0:0	8	chroma_height
op	198:29	0:0	8	=
water	198:31	0:0	8	s
op	198:32	0:0	8	->
water	198:34	0:0	8	height
water	198:40	0:0	8	;
water	199:8	0:0	8	}
else	199:10	205:8	6
stmts	199:15	205:8	7	
if	199:15	205:8	8	(s -> adobe_transform == 2 && s -> bits <= 8)
cond	199:19	199:57	9	s -> adobe_transform == 2 && s -> bits <= 8
water	199:19	0:0	10	s
op	199:20	0:0	10	->
water	199:22	0:0	10	adobe_transform
op	199:38	0:0	10	==
water	199:41	0:0	10	2
op	199:43	0:0	10	&&
water	199:46	0:0	10	s
op	199:47	0:0	10	->
water	199:49	0:0	10	bits
op	199:54	0:0	10	<=
water	199:57	0:0	10	8
stmts	199:60	205:8	9	
water	199:60	0:0	10	{
water	200:12	0:0	10	s
op	200:13	0:0	10	->
water	200:15	0:0	10	avctx
op	200:20	0:0	10	->
water	200:22	0:0	10	pix_fmt
op	200:30	0:0	10	=
water	200:32	0:0	10	AV_PIX_FMT_YUVA444P
water	200:51	0:0	10	;
water	201:12	0:0	10	s
op	201:13	0:0	10	->
water	201:15	0:0	10	upscale_v
op	201:25	0:0	10	=
water	201:27	0:0	10	6
water	201:28	0:0	10	;
water	202:12	0:0	10	s
op	202:13	0:0	10	->
water	202:15	0:0	10	upscale_h
op	202:25	0:0	10	=
water	202:27	0:0	10	6
water	202:28	0:0	10	;
water	203:12	0:0	10	s
op	203:13	0:0	10	->
water	203:15	0:0	10	chroma_height
op	203:29	0:0	10	=
water	203:31	0:0	10	s
op	203:32	0:0	10	->
water	203:34	0:0	10	height
water	203:40	0:0	10	;
water	204:12	0:0	10	s
op	204:13	0:0	10	->
water	204:15	0:0	10	avctx
op	204:20	0:0	10	->
water	204:22	0:0	10	color_range
op	204:34	0:0	10	=
water	204:36	0:0	10	s
op	204:37	0:0	10	->
water	204:39	0:0	10	cs_itu601
water	204:49	0:0	10	?
water	204:51	0:0	10	AVCOL_RANGE_MPEG
water	204:68	0:0	10	:
water	204:70	0:0	10	AVCOL_RANGE_JPEG
water	204:86	0:0	10	;
water	205:8	0:0	10	}
else	205:10	209:8	6
stmts	205:15	209:8	7	
water	205:15	0:0	8	{
if	206:12	206:69	8	(s -> bits <= 8)
cond	206:16	206:27	9	s -> bits <= 8
water	206:16	0:0	10	s
op	206:17	0:0	10	->
water	206:19	0:0	10	bits
op	206:24	0:0	10	<=
water	206:27	0:0	10	8
stmts	206:30	206:69	9	
water	206:30	0:0	10	s
op	206:31	0:0	10	->
water	206:33	0:0	10	avctx
op	206:38	0:0	10	->
water	206:40	0:0	10	pix_fmt
op	206:48	0:0	10	=
water	206:50	0:0	10	AV_PIX_FMT_YUVA420P
water	206:69	0:0	10	;
else	207:12	207:71	8
stmts	207:30	207:71	9	
water	207:30	0:0	10	s
op	207:31	0:0	10	->
water	207:33	0:0	10	avctx
op	207:38	0:0	10	->
water	207:40	0:0	10	pix_fmt
op	207:48	0:0	10	=
water	207:50	0:0	10	AV_PIX_FMT_YUVA420P16
water	207:71	0:0	10	;
water	208:12	0:0	8	s
op	208:13	0:0	8	->
water	208:15	0:0	8	avctx
op	208:20	0:0	8	->
water	208:22	0:0	8	color_range
op	208:34	0:0	8	=
water	208:36	0:0	8	s
op	208:37	0:0	8	->
water	208:39	0:0	8	cs_itu601
water	208:49	0:0	8	?
water	208:51	0:0	8	AVCOL_RANGE_MPEG
water	208:68	0:0	8	:
water	208:70	0:0	8	AVCOL_RANGE_JPEG
water	208:86	0:0	8	;
water	209:8	0:0	8	}
call	210:8	210:40	6	av_assert0
arg	210:19	210:40	7	s->nb_components==4
water	210:19	0:0	8	s
op	210:20	0:0	8	->
water	210:22	0:0	8	nb_components
op	210:36	0:0	8	==
water	210:39	0:0	8	4
water	210:41	0:0	6	;
break	211:8	211:13	6	
label	212:4	212:19	6	case 0 x12121100 :
label	213:4	213:19	6	case 0 x22122100 :
label	214:4	214:19	6	case 0 x21211100 :
label	215:4	215:19	6	case 0 x22211200 :
if	216:8	216:101	6	(s -> bits <= 8)
cond	216:12	216:23	7	s -> bits <= 8
water	216:12	0:0	8	s
op	216:13	0:0	8	->
water	216:15	0:0	8	bits
op	216:20	0:0	8	<=
water	216:23	0:0	8	8
stmts	216:26	216:101	7	
water	216:26	0:0	8	s
op	216:27	0:0	8	->
water	216:29	0:0	8	avctx
op	216:34	0:0	8	->
water	216:36	0:0	8	pix_fmt
op	216:44	0:0	8	=
water	216:46	0:0	8	s
op	216:47	0:0	8	->
water	216:49	0:0	8	cs_itu601
water	216:59	0:0	8	?
water	216:61	0:0	8	AV_PIX_FMT_YUV444P
water	216:80	0:0	8	:
water	216:82	0:0	8	AV_PIX_FMT_YUVJ444P
water	216:101	0:0	8	;
else	217:8	218:27	6
stmts	218:12	218:27	7	
goto	218:12	218:27	8	unk_pixfmt
water	218:17	0:0	9	unk_pixfmt
water	219:8	0:0	6	s
op	219:9	0:0	6	->
water	219:11	0:0	6	avctx
op	219:16	0:0	6	->
water	219:18	0:0	6	color_range
op	219:30	0:0	6	=
water	219:32	0:0	6	s
op	219:33	0:0	6	->
water	219:35	0:0	6	cs_itu601
water	219:45	0:0	6	?
water	219:47	0:0	6	AVCOL_RANGE_MPEG
water	219:64	0:0	6	:
water	219:66	0:0	6	AVCOL_RANGE_JPEG
water	219:82	0:0	6	;
water	220:8	0:0	6	s
op	220:9	0:0	6	->
water	220:11	0:0	6	chroma_height
op	220:25	0:0	6	=
water	220:27	0:0	6	s
op	220:28	0:0	6	->
water	220:30	0:0	6	height
water	220:36	0:0	6	;
break	221:8	221:13	6	
label	222:4	222:19	6	case 0 x22221100 :
label	223:4	223:19	6	case 0 x22112200 :
label	224:4	224:19	6	case 0 x11222200 :
if	225:8	225:101	6	(s -> bits <= 8)
cond	225:12	225:23	7	s -> bits <= 8
water	225:12	0:0	8	s
op	225:13	0:0	8	->
water	225:15	0:0	8	bits
op	225:20	0:0	8	<=
water	225:23	0:0	8	8
stmts	225:26	225:101	7	
water	225:26	0:0	8	s
op	225:27	0:0	8	->
water	225:29	0:0	8	avctx
op	225:34	0:0	8	->
water	225:36	0:0	8	pix_fmt
op	225:44	0:0	8	=
water	225:46	0:0	8	s
op	225:47	0:0	8	->
water	225:49	0:0	8	cs_itu601
water	225:59	0:0	8	?
water	225:61	0:0	8	AV_PIX_FMT_YUV444P
water	225:80	0:0	8	:
water	225:82	0:0	8	AV_PIX_FMT_YUVJ444P
water	225:101	0:0	8	;
else	226:8	227:27	6
stmts	227:12	227:27	7	
goto	227:12	227:27	8	unk_pixfmt
water	227:17	0:0	9	unk_pixfmt
water	228:8	0:0	6	s
op	228:9	0:0	6	->
water	228:11	0:0	6	avctx
op	228:16	0:0	6	->
water	228:18	0:0	6	color_range
op	228:30	0:0	6	=
water	228:32	0:0	6	s
op	228:33	0:0	6	->
water	228:35	0:0	6	cs_itu601
water	228:45	0:0	6	?
water	228:47	0:0	6	AVCOL_RANGE_MPEG
water	228:64	0:0	6	:
water	228:66	0:0	6	AVCOL_RANGE_JPEG
water	228:82	0:0	6	;
water	229:8	0:0	6	s
op	229:9	0:0	6	->
water	229:11	0:0	6	chroma_height
op	229:25	0:0	6	=
water	229:27	0:0	6	s
op	229:28	0:0	6	->
water	229:30	0:0	6	height
op	229:37	0:0	6	/
water	229:39	0:0	6	2
water	229:40	0:0	6	;
break	230:8	230:13	6	
label	231:4	231:19	6	case 0 x11000000 :
label	232:4	232:19	6	case 0 x13000000 :
label	233:4	233:19	6	case 0 x14000000 :
label	234:4	234:19	6	case 0 x31000000 :
label	235:4	235:19	6	case 0 x33000000 :
label	236:4	236:19	6	case 0 x34000000 :
label	237:4	237:19	6	case 0 x41000000 :
label	238:4	238:19	6	case 0 x43000000 :
label	239:4	239:19	6	case 0 x44000000 :
if	240:8	241:48	6	(s -> bits <= 8)
cond	240:11	240:22	7	s -> bits <= 8
water	240:11	0:0	8	s
op	240:12	0:0	8	->
water	240:14	0:0	8	bits
op	240:19	0:0	8	<=
water	240:22	0:0	8	8
stmts	241:12	241:48	7	
water	241:12	0:0	8	s
op	241:13	0:0	8	->
water	241:15	0:0	8	avctx
op	241:20	0:0	8	->
water	241:22	0:0	8	pix_fmt
op	241:30	0:0	8	=
water	241:32	0:0	8	AV_PIX_FMT_GRAY8
water	241:48	0:0	8	;
else	242:8	243:49	6
stmts	243:12	243:49	7	
water	243:12	0:0	8	s
op	243:13	0:0	8	->
water	243:15	0:0	8	avctx
op	243:20	0:0	8	->
water	243:22	0:0	8	pix_fmt
op	243:30	0:0	8	=
water	243:32	0:0	8	AV_PIX_FMT_GRAY16
water	243:49	0:0	8	;
break	244:8	244:13	6	
label	245:4	245:19	6	case 0 x12111100 :
label	246:4	246:19	6	case 0 x22211100 :
label	247:4	247:19	6	case 0 x22112100 :
if	248:8	248:101	6	(s -> bits <= 8)
cond	248:12	248:23	7	s -> bits <= 8
water	248:12	0:0	8	s
op	248:13	0:0	8	->
water	248:15	0:0	8	bits
op	248:20	0:0	8	<=
water	248:23	0:0	8	8
stmts	248:26	248:101	7	
water	248:26	0:0	8	s
op	248:27	0:0	8	->
water	248:29	0:0	8	avctx
op	248:34	0:0	8	->
water	248:36	0:0	8	pix_fmt
op	248:44	0:0	8	=
water	248:46	0:0	8	s
op	248:47	0:0	8	->
water	248:49	0:0	8	cs_itu601
water	248:59	0:0	8	?
water	248:61	0:0	8	AV_PIX_FMT_YUV440P
water	248:80	0:0	8	:
water	248:82	0:0	8	AV_PIX_FMT_YUVJ440P
water	248:101	0:0	8	;
else	249:8	250:27	6
stmts	250:12	250:27	7	
goto	250:12	250:27	8	unk_pixfmt
water	250:17	0:0	9	unk_pixfmt
water	251:8	0:0	6	s
op	251:9	0:0	6	->
water	251:11	0:0	6	avctx
op	251:16	0:0	6	->
water	251:18	0:0	6	color_range
op	251:30	0:0	6	=
water	251:32	0:0	6	s
op	251:33	0:0	6	->
water	251:35	0:0	6	cs_itu601
water	251:45	0:0	6	?
water	251:47	0:0	6	AVCOL_RANGE_MPEG
water	251:64	0:0	6	:
water	251:66	0:0	6	AVCOL_RANGE_JPEG
water	251:82	0:0	6	;
water	252:8	0:0	6	s
op	252:9	0:0	6	->
water	252:11	0:0	6	chroma_height
op	252:25	0:0	6	=
water	252:27	0:0	6	s
op	252:28	0:0	6	->
water	252:30	0:0	6	height
op	252:37	0:0	6	/
water	252:39	0:0	6	2
water	252:40	0:0	6	;
break	253:8	253:13	6	
label	254:4	254:19	6	case 0 x21111100 :
if	255:8	255:101	6	(s -> bits <= 8)
cond	255:12	255:23	7	s -> bits <= 8
water	255:12	0:0	8	s
op	255:13	0:0	8	->
water	255:15	0:0	8	bits
op	255:20	0:0	8	<=
water	255:23	0:0	8	8
stmts	255:26	255:101	7	
water	255:26	0:0	8	s
op	255:27	0:0	8	->
water	255:29	0:0	8	avctx
op	255:34	0:0	8	->
water	255:36	0:0	8	pix_fmt
op	255:44	0:0	8	=
water	255:46	0:0	8	s
op	255:47	0:0	8	->
water	255:49	0:0	8	cs_itu601
water	255:59	0:0	8	?
water	255:61	0:0	8	AV_PIX_FMT_YUV422P
water	255:80	0:0	8	:
water	255:82	0:0	8	AV_PIX_FMT_YUVJ422P
water	255:101	0:0	8	;
else	256:8	256:66	6
stmts	256:26	256:66	7	
water	256:26	0:0	8	s
op	256:27	0:0	8	->
water	256:29	0:0	8	avctx
op	256:34	0:0	8	->
water	256:36	0:0	8	pix_fmt
op	256:44	0:0	8	=
water	256:46	0:0	8	AV_PIX_FMT_YUV422P16
water	256:66	0:0	8	;
water	257:8	0:0	6	s
op	257:9	0:0	6	->
water	257:11	0:0	6	avctx
op	257:16	0:0	6	->
water	257:18	0:0	6	color_range
op	257:30	0:0	6	=
water	257:32	0:0	6	s
op	257:33	0:0	6	->
water	257:35	0:0	6	cs_itu601
water	257:45	0:0	6	?
water	257:47	0:0	6	AVCOL_RANGE_MPEG
water	257:64	0:0	6	:
water	257:66	0:0	6	AVCOL_RANGE_JPEG
water	257:82	0:0	6	;
break	258:8	258:13	6	
label	259:4	259:19	6	case 0 x22121100 :
label	260:4	260:19	6	case 0 x22111200 :
if	261:8	261:101	6	(s -> bits <= 8)
cond	261:12	261:23	7	s -> bits <= 8
water	261:12	0:0	8	s
op	261:13	0:0	8	->
water	261:15	0:0	8	bits
op	261:20	0:0	8	<=
water	261:23	0:0	8	8
stmts	261:26	261:101	7	
water	261:26	0:0	8	s
op	261:27	0:0	8	->
water	261:29	0:0	8	avctx
op	261:34	0:0	8	->
water	261:36	0:0	8	pix_fmt
op	261:44	0:0	8	=
water	261:46	0:0	8	s
op	261:47	0:0	8	->
water	261:49	0:0	8	cs_itu601
water	261:59	0:0	8	?
water	261:61	0:0	8	AV_PIX_FMT_YUV422P
water	261:80	0:0	8	:
water	261:82	0:0	8	AV_PIX_FMT_YUVJ422P
water	261:101	0:0	8	;
else	262:8	263:27	6
stmts	263:12	263:27	7	
goto	263:12	263:27	8	unk_pixfmt
water	263:17	0:0	9	unk_pixfmt
water	264:8	0:0	6	s
op	264:9	0:0	6	->
water	264:11	0:0	6	avctx
op	264:16	0:0	6	->
water	264:18	0:0	6	color_range
op	264:30	0:0	6	=
water	264:32	0:0	6	s
op	264:33	0:0	6	->
water	264:35	0:0	6	cs_itu601
water	264:45	0:0	6	?
water	264:47	0:0	6	AVCOL_RANGE_MPEG
water	264:64	0:0	6	:
water	264:66	0:0	6	AVCOL_RANGE_JPEG
water	264:82	0:0	6	;
break	265:8	265:13	6	
label	266:4	266:19	6	case 0 x22111100 :
label	267:4	267:19	6	case 0 x42111100 :
if	268:8	268:101	6	(s -> bits <= 8)
cond	268:12	268:23	7	s -> bits <= 8
water	268:12	0:0	8	s
op	268:13	0:0	8	->
water	268:15	0:0	8	bits
op	268:20	0:0	8	<=
water	268:23	0:0	8	8
stmts	268:26	268:101	7	
water	268:26	0:0	8	s
op	268:27	0:0	8	->
water	268:29	0:0	8	avctx
op	268:34	0:0	8	->
water	268:36	0:0	8	pix_fmt
op	268:44	0:0	8	=
water	268:46	0:0	8	s
op	268:47	0:0	8	->
water	268:49	0:0	8	cs_itu601
water	268:59	0:0	8	?
water	268:61	0:0	8	AV_PIX_FMT_YUV420P
water	268:80	0:0	8	:
water	268:82	0:0	8	AV_PIX_FMT_YUVJ420P
water	268:101	0:0	8	;
else	269:8	269:66	6
stmts	269:26	269:66	7	
water	269:26	0:0	8	s
op	269:27	0:0	8	->
water	269:29	0:0	8	avctx
op	269:34	0:0	8	->
water	269:36	0:0	8	pix_fmt
op	269:44	0:0	8	=
water	269:46	0:0	8	AV_PIX_FMT_YUV420P16
water	269:66	0:0	8	;
water	270:8	0:0	6	s
op	270:9	0:0	6	->
water	270:11	0:0	6	avctx
op	270:16	0:0	6	->
water	270:18	0:0	6	color_range
op	270:30	0:0	6	=
water	270:32	0:0	6	s
op	270:33	0:0	6	->
water	270:35	0:0	6	cs_itu601
water	270:45	0:0	6	?
water	270:47	0:0	6	AVCOL_RANGE_MPEG
water	270:64	0:0	6	:
water	270:66	0:0	6	AVCOL_RANGE_JPEG
water	270:82	0:0	6	;
if	271:8	274:8	6	(pix_fmt_id == 0 x42111100)
cond	271:12	271:27	7	pix_fmt_id == 0 x42111100
water	271:12	0:0	8	pix_fmt_id
op	271:23	0:0	8	==
water	271:26	0:0	8	0
water	271:27	0:0	8	x42111100
stmts	271:38	274:8	7	
water	271:38	0:0	8	{
water	272:12	0:0	8	s
op	272:13	0:0	8	->
water	272:15	0:0	8	upscale_h
op	272:25	0:0	8	=
water	272:27	0:0	8	6
water	272:28	0:0	8	;
water	273:12	0:0	8	s
op	273:13	0:0	8	->
water	273:15	0:0	8	chroma_height
op	273:29	0:0	8	=
water	273:31	0:0	8	s
op	273:32	0:0	8	->
water	273:34	0:0	8	height
op	273:41	0:0	8	/
water	273:43	0:0	8	2
water	273:44	0:0	8	;
water	274:8	0:0	8	}
break	275:8	275:13	6	
label	276:4	276:19	6	case 0 x41111100 :
if	277:8	277:101	6	(s -> bits <= 8)
cond	277:12	277:23	7	s -> bits <= 8
water	277:12	0:0	8	s
op	277:13	0:0	8	->
water	277:15	0:0	8	bits
op	277:20	0:0	8	<=
water	277:23	0:0	8	8
stmts	277:26	277:101	7	
water	277:26	0:0	8	s
op	277:27	0:0	8	->
water	277:29	0:0	8	avctx
op	277:34	0:0	8	->
water	277:36	0:0	8	pix_fmt
op	277:44	0:0	8	=
water	277:46	0:0	8	s
op	277:47	0:0	8	->
water	277:49	0:0	8	cs_itu601
water	277:59	0:0	8	?
water	277:61	0:0	8	AV_PIX_FMT_YUV411P
water	277:80	0:0	8	:
water	277:82	0:0	8	AV_PIX_FMT_YUVJ411P
water	277:101	0:0	8	;
else	278:8	279:27	6
stmts	279:12	279:27	7	
goto	279:12	279:27	8	unk_pixfmt
water	279:17	0:0	9	unk_pixfmt
water	280:8	0:0	6	s
op	280:9	0:0	6	->
water	280:11	0:0	6	avctx
op	280:16	0:0	6	->
water	280:18	0:0	6	color_range
op	280:30	0:0	6	=
water	280:32	0:0	6	s
op	280:33	0:0	6	->
water	280:35	0:0	6	cs_itu601
water	280:45	0:0	6	?
water	280:47	0:0	6	AVCOL_RANGE_MPEG
water	280:64	0:0	6	:
water	280:66	0:0	6	AVCOL_RANGE_JPEG
water	280:82	0:0	6	;
break	281:8	281:13	6	
label	282:4	282:11	6	default :
label	283:0	283:10	6	unk_pixfmt :
call	284:8	284:82	6	av_log
arg	284:15	284:23	7	s->avctx
water	284:15	0:0	8	s
op	284:16	0:0	8	->
water	284:18	0:0	8	avctx
arg	284:25	284:37	7	AV_LOG_ERROR
water	284:25	0:0	8	AV_LOG_ERROR
arg	284:39	284:70	7	"Unhandled pixel format 0x%x\n"
water	284:39	0:0	8	"Unhandled pixel format 0x%x\n"
arg	284:72	284:82	7	pix_fmt_id
water	284:72	0:0	8	pix_fmt_id
water	284:83	0:0	6	;
water	285:8	0:0	6	s
op	285:9	0:0	6	->
water	285:11	0:0	6	upscale_h
op	285:21	0:0	6	=
water	285:23	0:0	6	s
op	285:24	0:0	6	->
water	285:26	0:0	6	upscale_v
op	285:36	0:0	6	=
water	285:38	0:0	6	0
water	285:39	0:0	6	;
return	286:8	286:35	6	AVERROR_PATCHWELCOME
water	286:15	0:0	7	AVERROR_PATCHWELCOME
water	287:4	0:0	6	}
if	288:4	291:4	4	(( s -> upscale_h || s -> upscale_v ) && s -> avctx -> lowres)
cond	288:8	288:52	5	( s -> upscale_h || s -> upscale_v ) && s -> avctx -> lowres
water	288:8	0:0	6	(
water	288:9	0:0	6	s
op	288:10	0:0	6	->
water	288:12	0:0	6	upscale_h
op	288:22	0:0	6	||
water	288:25	0:0	6	s
op	288:26	0:0	6	->
water	288:28	0:0	6	upscale_v
water	288:37	0:0	6	)
op	288:39	0:0	6	&&
water	288:42	0:0	6	s
op	288:43	0:0	6	->
water	288:45	0:0	6	avctx
op	288:50	0:0	6	->
water	288:52	0:0	6	lowres
stmts	288:60	291:4	5	
water	288:60	0:0	6	{
call	289:8	289:85	6	av_log
arg	289:15	289:23	7	s->avctx
water	289:15	0:0	8	s
op	289:16	0:0	8	->
water	289:18	0:0	8	avctx
arg	289:25	289:37	7	AV_LOG_ERROR
water	289:25	0:0	8	AV_LOG_ERROR
arg	289:39	289:85	7	"lowres not supported for weird subsampling\n"
water	289:39	0:0	8	"lowres not supported for weird subsampling\n"
water	289:86	0:0	6	;
return	290:8	290:35	6	AVERROR_PATCHWELCOME
water	290:15	0:0	7	AVERROR_PATCHWELCOME
water	291:4	0:0	6	}
if	292:4	302:4	4	(s -> ls)
cond	292:8	292:11	5	s -> ls
water	292:8	0:0	6	s
op	292:9	0:0	6	->
water	292:11	0:0	6	ls
stmts	292:15	302:4	5	
water	292:15	0:0	6	{
water	293:8	0:0	6	s
op	293:9	0:0	6	->
water	293:11	0:0	6	upscale_h
op	293:21	0:0	6	=
water	293:23	0:0	6	s
op	293:24	0:0	6	->
water	293:26	0:0	6	upscale_v
op	293:36	0:0	6	=
water	293:38	0:0	6	0
water	293:39	0:0	6	;
if	294:8	295:48	6	(s -> nb_components > 1)
cond	294:12	294:31	7	s -> nb_components > 1
water	294:12	0:0	8	s
op	294:13	0:0	8	->
water	294:15	0:0	8	nb_components
op	294:29	0:0	8	>
water	294:31	0:0	8	1
stmts	295:12	295:48	7	
water	295:12	0:0	8	s
op	295:13	0:0	8	->
water	295:15	0:0	8	avctx
op	295:20	0:0	8	->
water	295:22	0:0	8	pix_fmt
op	295:30	0:0	8	=
water	295:32	0:0	8	AV_PIX_FMT_RGB24
water	295:48	0:0	8	;
else	296:8	297:47	6
stmts	296:13	297:47	7	
if	296:13	297:47	8	(s -> palette_index && s -> bits <= 8)
cond	296:17	296:48	9	s -> palette_index && s -> bits <= 8
water	296:17	0:0	10	s
op	296:18	0:0	10	->
water	296:20	0:0	10	palette_index
op	296:34	0:0	10	&&
water	296:37	0:0	10	s
op	296:38	0:0	10	->
water	296:40	0:0	10	bits
op	296:45	0:0	10	<=
water	296:48	0:0	10	8
stmts	297:12	297:47	9	
water	297:12	0:0	10	s
op	297:13	0:0	10	->
water	297:15	0:0	10	avctx
op	297:20	0:0	10	->
water	297:22	0:0	10	pix_fmt
op	297:30	0:0	10	=
water	297:32	0:0	10	AV_PIX_FMT_PAL8
water	297:47	0:0	10	;
else	298:8	299:48	6
stmts	298:13	299:48	7	
if	298:13	299:48	8	(s -> bits <= 8)
cond	298:17	298:28	9	s -> bits <= 8
water	298:17	0:0	10	s
op	298:18	0:0	10	->
water	298:20	0:0	10	bits
op	298:25	0:0	10	<=
water	298:28	0:0	10	8
stmts	299:12	299:48	9	
water	299:12	0:0	10	s
op	299:13	0:0	10	->
water	299:15	0:0	10	avctx
op	299:20	0:0	10	->
water	299:22	0:0	10	pix_fmt
op	299:30	0:0	10	=
water	299:32	0:0	10	AV_PIX_FMT_GRAY8
water	299:48	0:0	10	;
else	300:8	301:49	6
stmts	301:12	301:49	7	
water	301:12	0:0	8	s
op	301:13	0:0	8	->
water	301:15	0:0	8	avctx
op	301:20	0:0	8	->
water	301:22	0:0	8	pix_fmt
op	301:30	0:0	8	=
water	301:32	0:0	8	AV_PIX_FMT_GRAY16
water	301:49	0:0	8	;
water	302:4	0:0	6	}
water	304:4	0:0	4	s
op	304:5	0:0	4	->
water	304:7	0:0	4	pix_desc
op	304:16	0:0	4	=
call	304:18	304:55	4	av_pix_fmt_desc_get
arg	304:38	304:55	5	s->avctx->pix_fmt
water	304:38	0:0	6	s
op	304:39	0:0	6	->
water	304:41	0:0	6	avctx
op	304:46	0:0	6	->
water	304:48	0:0	6	pix_fmt
water	304:56	0:0	4	;
if	305:4	308:4	4	(! s -> pix_desc)
cond	305:8	305:12	5	! s -> pix_desc
op	305:8	0:0	6	!
water	305:9	0:0	6	s
op	305:10	0:0	6	->
water	305:12	0:0	6	pix_desc
stmts	305:22	308:4	5	
water	305:22	0:0	6	{
call	306:8	306:83	6	av_log
arg	306:15	306:23	7	s->avctx
water	306:15	0:0	8	s
op	306:16	0:0	8	->
water	306:18	0:0	8	avctx
arg	306:25	306:37	7	AV_LOG_ERROR
water	306:25	0:0	8	AV_LOG_ERROR
arg	306:39	306:83	7	"Could not get a pixel format descriptor.\n"
water	306:39	0:0	8	"Could not get a pixel format descriptor.\n"
water	306:84	0:0	6	;
return	307:8	307:26	6	AVERROR_BUG
water	307:15	0:0	7	AVERROR_BUG
water	308:4	0:0	6	}
call	310:4	310:33	4	av_frame_unref
arg	310:19	310:33	5	s->picture_ptr
water	310:19	0:0	6	s
op	310:20	0:0	6	->
water	310:22	0:0	6	picture_ptr
water	310:34	0:0	4	;
if	311:4	312:17	4	(ff_get_buffer (s -> avctx ,s -> picture_ptr ,AV_GET_BUFFER_FLAG_REF ) < 0)
cond	311:8	311:74	5	ff_get_buffer (s -> avctx ,s -> picture_ptr ,AV_GET_BUFFER_FLAG_REF ) < 0
call	311:8	311:70	6	ff_get_buffer
arg	311:22	311:30	7	s->avctx
water	311:22	0:0	8	s
op	311:23	0:0	8	->
water	311:25	0:0	8	avctx
arg	311:32	311:46	7	s->picture_ptr
water	311:32	0:0	8	s
op	311:33	0:0	8	->
water	311:35	0:0	8	picture_ptr
arg	311:48	311:70	7	AV_GET_BUFFER_FLAG_REF
water	311:48	0:0	8	AV_GET_BUFFER_FLAG_REF
op	311:72	0:0	6	<
water	311:74	0:0	6	0
stmts	312:8	312:17	5	
return	312:8	312:17	6	-1
op	312:15	0:0	7	-
water	312:16	0:0	7	1
water	313:4	0:0	4	s
op	313:5	0:0	4	->
water	313:7	0:0	4	picture_ptr
op	313:18	0:0	4	->
water	313:20	0:0	4	pict_type
op	313:30	0:0	4	=
water	313:32	0:0	4	AV_PICTURE_TYPE_I
water	313:49	0:0	4	;
water	314:4	0:0	4	s
op	314:5	0:0	4	->
water	314:7	0:0	4	picture_ptr
op	314:18	0:0	4	->
water	314:20	0:0	4	key_frame
op	314:30	0:0	4	=
water	314:32	0:0	4	1
water	314:33	0:0	4	;
water	315:4	0:0	4	s
op	315:5	0:0	4	->
water	315:7	0:0	4	got_picture
op	315:30	0:0	4	=
water	315:32	0:0	4	1
water	315:33	0:0	4	;
for	317:4	318:69	4	(i = 0 ;i < 4;i ++)
forinit	317:9	317:14	5	i = 0 ;
water	317:9	0:0	6	i
op	317:11	0:0	6	=
water	317:13	0:0	6	0
water	317:14	0:0	6	;
cond	317:16	317:20	5	i < 4
water	317:16	0:0	6	i
op	317:18	0:0	6	<
water	317:20	0:0	6	4
forexpr	317:23	317:24	5	i ++
water	317:23	0:0	6	i
op	317:24	0:0	6	++
stmts	318:8	318:69	5	
water	318:8	0:0	6	s
op	318:9	0:0	6	->
water	318:11	0:0	6	linesize
op	318:19	0:0	6	[
water	318:20	0:0	6	i
op	318:21	0:0	6	]
op	318:23	0:0	6	=
water	318:25	0:0	6	s
op	318:26	0:0	6	->
water	318:28	0:0	6	picture_ptr
op	318:39	0:0	6	->
water	318:41	0:0	6	linesize
op	318:49	0:0	6	[
water	318:50	0:0	6	i
op	318:51	0:0	6	]
op	318:53	0:0	6	<<
water	318:56	0:0	6	s
op	318:57	0:0	6	->
water	318:59	0:0	6	interlaced
water	318:69	0:0	6	;
call	320:4	322:43	4	av_dlog
arg	320:12	320:20	5	s->avctx
water	320:12	0:0	6	s
op	320:13	0:0	6	->
water	320:15	0:0	6	avctx
arg	320:22	320:43	5	"%d %d %d %d %d %d\n"
water	320:22	0:0	6	"%d %d %d %d %d %d\n"
arg	321:12	321:20	5	s->width
water	321:12	0:0	6	s
op	321:13	0:0	6	->
water	321:15	0:0	6	width
arg	321:22	321:31	5	s->height
water	321:22	0:0	6	s
op	321:23	0:0	6	->
water	321:25	0:0	6	height
arg	321:33	321:47	5	s->linesize[0]
water	321:33	0:0	6	s
op	321:34	0:0	6	->
water	321:36	0:0	6	linesize
op	321:44	0:0	6	[
water	321:45	0:0	6	0
op	321:46	0:0	6	]
arg	321:49	321:63	5	s->linesize[1]
water	321:49	0:0	6	s
op	321:50	0:0	6	->
water	321:52	0:0	6	linesize
op	321:60	0:0	6	[
water	321:61	0:0	6	1
op	321:62	0:0	6	]
arg	322:12	322:25	5	s->interlaced
water	322:12	0:0	6	s
op	322:13	0:0	6	->
water	322:15	0:0	6	interlaced
arg	322:27	322:43	5	s->avctx->height
water	322:27	0:0	6	s
op	322:28	0:0	6	->
water	322:30	0:0	6	avctx
op	322:35	0:0	6	->
water	322:37	0:0	6	height
water	322:44	0:0	4	;
if	324:4	325:85	4	(len != ( 8 + ( 3 * nb_components ) ))
cond	324:8	324:39	5	len != ( 8 + ( 3 * nb_components ) )
water	324:8	0:0	6	len
op	324:12	0:0	6	!=
water	324:15	0:0	6	(
water	324:16	0:0	6	8
op	324:18	0:0	6	+
water	324:20	0:0	6	(
water	324:21	0:0	6	3
op	324:23	0:0	6	*
water	324:25	0:0	6	nb_components
water	324:38	0:0	6	)
water	324:39	0:0	6	)
stmts	325:8	325:85	5	
call	325:8	325:84	6	av_log
arg	325:15	325:23	7	s->avctx
water	325:15	0:0	8	s
op	325:16	0:0	8	->
water	325:18	0:0	8	avctx
arg	325:25	325:37	7	AV_LOG_DEBUG
water	325:25	0:0	8	AV_LOG_DEBUG
arg	325:39	325:79	7	"decode_sof0: error, len(%d) mismatch\n"
water	325:39	0:0	8	"decode_sof0: error, len(%d) mismatch\n"
arg	325:81	325:84	7	len
water	325:81	0:0	8	len
water	325:85	0:0	6	;
water	326:4	0:0	4	}
if	328:4	331:4	2	(s -> rgb && ! s -> lossless && ! s -> ls)
cond	328:8	328:38	3	s -> rgb && ! s -> lossless && ! s -> ls
water	328:8	0:0	4	s
op	328:9	0:0	4	->
water	328:11	0:0	4	rgb
op	328:15	0:0	4	&&
op	328:18	0:0	4	!
water	328:19	0:0	4	s
op	328:20	0:0	4	->
water	328:22	0:0	4	lossless
op	328:31	0:0	4	&&
op	328:34	0:0	4	!
water	328:35	0:0	4	s
op	328:36	0:0	4	->
water	328:38	0:0	4	ls
stmts	328:42	331:4	3	
water	328:42	0:0	4	{
call	329:8	329:90	4	av_log
arg	329:15	329:23	5	s->avctx
water	329:15	0:0	6	s
op	329:16	0:0	6	->
water	329:18	0:0	6	avctx
arg	329:25	329:37	5	AV_LOG_ERROR
water	329:25	0:0	6	AV_LOG_ERROR
arg	329:39	329:90	5	"Unsupported coding and pixel format combination\n"
water	329:39	0:0	6	"Unsupported coding and pixel format combination\n"
water	329:91	0:0	4	;
return	330:8	330:35	4	AVERROR_PATCHWELCOME
water	330:15	0:0	5	AVERROR_PATCHWELCOME
water	331:4	0:0	4	}
if	334:4	348:4	2	(s -> progressive)
cond	334:8	334:11	3	s -> progressive
water	334:8	0:0	4	s
op	334:9	0:0	4	->
water	334:11	0:0	4	progressive
stmts	334:24	348:4	3	
water	334:24	0:0	4	{
decl	335:8	335:61	4	int	bw
op	335:15	0:0	4	=
water	335:17	0:0	4	(
water	335:18	0:0	4	width
op	335:25	0:0	4	+
water	335:27	0:0	4	s
op	335:28	0:0	4	->
water	335:30	0:0	4	h_max
op	335:36	0:0	4	*
water	335:38	0:0	4	8
op	335:40	0:0	4	-
water	335:42	0:0	4	1
water	335:43	0:0	4	)
op	335:45	0:0	4	/
water	335:47	0:0	4	(
water	335:48	0:0	4	s
op	335:49	0:0	4	->
water	335:51	0:0	4	h_max
op	335:57	0:0	4	*
water	335:59	0:0	4	8
water	335:60	0:0	4	)
decl	336:8	336:61	4	int	bh
op	336:15	0:0	4	=
water	336:17	0:0	4	(
water	336:18	0:0	4	height
op	336:25	0:0	4	+
water	336:27	0:0	4	s
op	336:28	0:0	4	->
water	336:30	0:0	4	v_max
op	336:36	0:0	4	*
water	336:38	0:0	4	8
op	336:40	0:0	4	-
water	336:42	0:0	4	1
water	336:43	0:0	4	)
op	336:45	0:0	4	/
water	336:47	0:0	4	(
water	336:48	0:0	4	s
op	336:49	0:0	4	->
water	336:51	0:0	4	v_max
op	336:57	0:0	4	*
water	336:59	0:0	4	8
water	336:60	0:0	4	)
for	337:8	346:8	4	(i = 0 ;i < s -> nb_components;i ++)
forinit	337:13	337:18	5	i = 0 ;
water	337:13	0:0	6	i
op	337:15	0:0	6	=
water	337:17	0:0	6	0
water	337:18	0:0	6	;
cond	337:20	337:27	5	i < s -> nb_components
water	337:20	0:0	6	i
op	337:22	0:0	6	<
water	337:24	0:0	6	s
op	337:25	0:0	6	->
water	337:27	0:0	6	nb_components
forexpr	337:42	337:43	5	i ++
water	337:42	0:0	6	i
op	337:43	0:0	6	++
stmts	337:47	346:8	5	
water	337:47	0:0	6	{
decl	338:12	338:62	6	int	size
op	338:21	0:0	6	=
water	338:23	0:0	6	bw
op	338:26	0:0	6	*
water	338:28	0:0	6	bh
op	338:31	0:0	6	*
water	338:33	0:0	6	s
op	338:34	0:0	6	->
water	338:36	0:0	6	h_count
op	338:43	0:0	6	[
water	338:44	0:0	6	i
op	338:45	0:0	6	]
op	338:47	0:0	6	*
water	338:49	0:0	6	s
op	338:50	0:0	6	->
water	338:52	0:0	6	v_count
op	338:59	0:0	6	[
water	338:60	0:0	6	i
op	338:61	0:0	6	]
call	339:12	339:34	6	av_freep
arg	339:21	339:34	7	&s->blocks[i]
op	339:21	0:0	8	&
water	339:22	0:0	8	s
op	339:23	0:0	8	->
water	339:25	0:0	8	blocks
op	339:31	0:0	8	[
water	339:32	0:0	8	i
op	339:33	0:0	8	]
water	339:35	0:0	6	;
call	340:12	340:36	6	av_freep
arg	340:21	340:36	7	&s->last_nnz[i]
op	340:21	0:0	8	&
water	340:22	0:0	8	s
op	340:23	0:0	8	->
water	340:25	0:0	8	last_nnz
op	340:33	0:0	8	[
water	340:34	0:0	8	i
op	340:35	0:0	8	]
water	340:37	0:0	6	;
water	341:12	0:0	6	s
op	341:13	0:0	6	->
water	341:15	0:0	6	blocks
op	341:21	0:0	6	[
water	341:22	0:0	6	i
op	341:23	0:0	6	]
op	341:31	0:0	6	=
call	341:33	341:75	6	av_mallocz_array
arg	341:50	341:54	7	size
water	341:50	0:0	8	size
arg	341:56	341:75	7	sizeof(**s->blocks)
op	341:56	0:0	8	sizeof
water	341:62	0:0	8	(
op	341:63	0:0	8	*
op	341:64	0:0	8	*
water	341:65	0:0	8	s
op	341:66	0:0	8	->
water	341:68	0:0	8	blocks
water	341:74	0:0	8	)
water	341:76	0:0	6	;
water	342:12	0:0	6	s
op	342:13	0:0	6	->
water	342:15	0:0	6	last_nnz
op	342:23	0:0	6	[
water	342:24	0:0	6	i
op	342:25	0:0	6	]
op	342:31	0:0	6	=
call	342:33	342:77	6	av_mallocz_array
arg	342:50	342:54	7	size
water	342:50	0:0	8	size
arg	342:56	342:77	7	sizeof(**s->last_nnz)
op	342:56	0:0	8	sizeof
water	342:62	0:0	8	(
op	342:63	0:0	8	*
op	342:64	0:0	8	*
water	342:65	0:0	8	s
op	342:66	0:0	8	->
water	342:68	0:0	8	last_nnz
water	342:76	0:0	8	)
water	342:78	0:0	6	;
if	343:12	344:38	6	(! s -> blocks [ i ] || ! s -> last_nnz [ i ])
cond	343:16	343:47	7	! s -> blocks [ i ] || ! s -> last_nnz [ i ]
op	343:16	0:0	8	!
water	343:17	0:0	8	s
op	343:18	0:0	8	->
water	343:20	0:0	8	blocks
op	343:26	0:0	8	[
water	343:27	0:0	8	i
op	343:28	0:0	8	]
op	343:30	0:0	8	||
op	343:33	0:0	8	!
water	343:34	0:0	8	s
op	343:35	0:0	8	->
water	343:37	0:0	8	last_nnz
op	343:45	0:0	8	[
water	343:46	0:0	8	i
op	343:47	0:0	8	]
stmts	344:16	344:38	7	
return	344:16	344:38	8	AVERROR(ENOMEM)
call	344:23	344:37	9	AVERROR
arg	344:31	344:37	10	ENOMEM
water	344:31	0:0	11	ENOMEM
water	345:12	0:0	6	s
op	345:13	0:0	6	->
water	345:15	0:0	6	block_stride
op	345:27	0:0	6	[
water	345:28	0:0	6	i
op	345:29	0:0	6	]
op	345:31	0:0	6	=
water	345:33	0:0	6	bw
op	345:36	0:0	6	*
water	345:38	0:0	6	s
op	345:39	0:0	6	->
water	345:41	0:0	6	h_count
op	345:48	0:0	6	[
water	345:49	0:0	6	i
op	345:50	0:0	6	]
water	345:51	0:0	6	;
water	346:8	0:0	6	}
call	347:8	347:62	4	memset
arg	347:15	347:32	5	s->coefs_finished
water	347:15	0:0	6	s
op	347:16	0:0	6	->
water	347:18	0:0	6	coefs_finished
arg	347:34	347:35	5	0
water	347:34	0:0	6	0
arg	347:37	347:62	5	sizeof(s->coefs_finished)
op	347:37	0:0	6	sizeof
water	347:43	0:0	6	(
water	347:44	0:0	6	s
op	347:45	0:0	6	->
water	347:47	0:0	6	coefs_finished
water	347:61	0:0	6	)
water	347:63	0:0	4	;
water	348:4	0:0	4	}
return	349:4	349:12	2	0
water	349:11	0:0	3	0
