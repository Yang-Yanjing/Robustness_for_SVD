func	1:0	181:0	0	static int	decode_frame
params	1:23	0:0	1	
param	1:24	1:45	2	AVCodecContext *	avctx
param	2:24	2:34	2	void *	data
param	2:36	2:50	2	int *	got_frame
param	2:52	2:67	2	AVPacket *	avpkt
stmnts	4:4	180:22	1	
water	4:4	0:0	2	TiffContext
op	4:16	0:0	2	*
water	4:17	0:0	2	const
water	4:23	0:0	2	s
op	4:25	0:0	2	=
water	4:27	0:0	2	avctx
op	4:32	0:0	2	->
water	4:34	0:0	2	priv_data
water	4:43	0:0	2	;
water	5:4	0:0	2	AVFrame
op	5:12	0:0	2	*
water	5:13	0:0	2	const
water	5:19	0:0	2	p
op	5:21	0:0	2	=
water	5:23	0:0	2	data
water	5:27	0:0	2	;
decl	6:4	6:37	2	ThreadFrame	frame
op	6:22	0:0	2	=
water	6:24	0:0	2	{
op	6:26	0:0	2	.
water	6:27	0:0	2	f
op	6:29	0:0	2	=
water	6:31	0:0	2	data
water	6:36	0:0	2	}
water	7:4	0:0	2	unsigned
water	7:13	0:0	2	off
water	7:16	0:0	2	;
decl	8:4	8:30	2	int	le
water	8:10	0:0	2	,
decl	8:4	8:30	2	int	ret
water	8:15	0:0	2	,
decl	8:4	8:30	2	int	plane
water	8:22	0:0	2	,
decl	8:4	8:30	2	int	planes
decl	9:4	9:29	2	int	i
water	9:9	0:0	2	,
decl	9:4	9:29	2	int	j
water	9:12	0:0	2	,
decl	9:4	9:29	2	int	entries
water	9:21	0:0	2	,
decl	9:4	9:29	2	int	stride
water	10:4	0:0	2	unsigned
water	10:13	0:0	2	soff
water	10:17	0:0	2	,
water	10:19	0:0	2	ssize
water	10:24	0:0	2	;
decl	11:4	11:16	2	uint8_t	*dst
decl	12:4	12:29	2	GetByteContext	stripsizes
decl	13:4	13:28	2	GetByteContext	stripdata
call	15:4	15:53	2	bytestream2_init
arg	15:21	15:27	3	&s->gb
op	15:21	0:0	4	&
water	15:22	0:0	4	s
op	15:23	0:0	4	->
water	15:25	0:0	4	gb
arg	15:29	15:40	3	avpkt->data
water	15:29	0:0	4	avpkt
op	15:34	0:0	4	->
water	15:36	0:0	4	data
arg	15:42	15:53	3	avpkt->size
water	15:42	0:0	4	avpkt
op	15:47	0:0	4	->
water	15:49	0:0	4	size
water	15:54	0:0	2	;
if	18:4	21:4	2	(( ret =ff_tdecode_header (& s -> gb ,& le ,& off ) ))
cond	18:8	18:51	3	( ret =ff_tdecode_header (& s -> gb ,& le ,& off ) )
water	18:8	0:0	4	(
water	18:9	0:0	4	ret
op	18:13	0:0	4	=
call	18:15	18:50	4	ff_tdecode_header
arg	18:33	18:39	5	&s->gb
op	18:33	0:0	6	&
water	18:34	0:0	6	s
op	18:35	0:0	6	->
water	18:37	0:0	6	gb
arg	18:41	18:44	5	&le
op	18:41	0:0	6	&
water	18:42	0:0	6	le
arg	18:46	18:50	5	&off
op	18:46	0:0	6	&
water	18:47	0:0	6	off
water	18:51	0:0	4	)
stmts	18:54	21:4	3	
water	18:54	0:0	4	{
call	19:8	19:59	4	av_log
arg	19:15	19:20	5	avctx
water	19:15	0:0	6	avctx
arg	19:22	19:34	5	AV_LOG_ERROR
water	19:22	0:0	6	AV_LOG_ERROR
arg	19:36	19:59	5	"Invalid TIFF header\n"
water	19:36	0:0	6	"Invalid TIFF header\n"
water	19:60	0:0	4	;
return	20:8	20:18	4	ret
water	20:15	0:0	5	ret
water	21:4	0:0	4	}
else	21:6	24:4	2
stmts	21:11	24:4	3	
if	21:11	24:4	4	(off >= UINT_MAX - 14 || avpkt -> size < off + 14)
cond	21:15	21:59	5	off >= UINT_MAX - 14 || avpkt -> size < off + 14
water	21:15	0:0	6	off
op	21:19	0:0	6	>=
water	21:22	0:0	6	UINT_MAX
op	21:31	0:0	6	-
water	21:33	0:0	6	14
op	21:36	0:0	6	||
water	21:39	0:0	6	avpkt
op	21:44	0:0	6	->
water	21:46	0:0	6	size
op	21:51	0:0	6	<
water	21:53	0:0	6	off
op	21:57	0:0	6	+
water	21:59	0:0	6	14
stmts	21:63	24:4	5	
water	21:63	0:0	6	{
call	22:8	22:77	6	av_log
arg	22:15	22:20	7	avctx
water	22:15	0:0	8	avctx
arg	22:22	22:34	7	AV_LOG_ERROR
water	22:22	0:0	8	AV_LOG_ERROR
arg	22:36	22:77	7	"IFD offset is greater than image size\n"
water	22:36	0:0	8	"IFD offset is greater than image size\n"
water	22:78	0:0	6	;
return	23:8	23:34	6	AVERROR_INVALIDDATA
water	23:15	0:0	7	AVERROR_INVALIDDATA
water	24:4	0:0	6	}
water	25:4	0:0	2	s
op	25:5	0:0	2	->
water	25:7	0:0	2	le
op	25:19	0:0	2	=
water	25:21	0:0	2	le
water	25:23	0:0	2	;
water	27:4	0:0	2	s
op	27:5	0:0	2	->
water	27:7	0:0	2	bppcount
op	27:19	0:0	2	=
water	27:21	0:0	2	s
op	27:22	0:0	2	->
water	27:24	0:0	2	bpp
op	27:28	0:0	2	=
water	27:30	0:0	2	1
water	27:31	0:0	2	;
water	28:4	0:0	2	s
op	28:5	0:0	2	->
water	28:7	0:0	2	photometric
op	28:19	0:0	2	=
water	28:21	0:0	2	TIFF_PHOTOMETRIC_NONE
water	28:42	0:0	2	;
water	29:4	0:0	2	s
op	29:5	0:0	2	->
water	29:7	0:0	2	compr
op	29:19	0:0	2	=
water	29:21	0:0	2	TIFF_RAW
water	29:29	0:0	2	;
water	30:4	0:0	2	s
op	30:5	0:0	2	->
water	30:7	0:0	2	fill_order
op	30:19	0:0	2	=
water	30:21	0:0	2	0
water	30:22	0:0	2	;
call	31:4	31:18	2	free_geotags
arg	31:17	31:18	3	s
water	31:17	0:0	4	s
water	31:19	0:0	2	;
water	34:4	0:0	2	s
op	34:5	0:0	2	->
water	34:7	0:0	2	stripsizesoff
op	34:21	0:0	2	=
water	34:23	0:0	2	s
op	34:24	0:0	2	->
water	34:26	0:0	2	strippos
op	34:35	0:0	2	=
water	34:37	0:0	2	0
water	34:38	0:0	2	;
call	36:4	36:42	2	bytestream2_seek
arg	36:21	36:27	3	&s->gb
op	36:21	0:0	4	&
water	36:22	0:0	4	s
op	36:23	0:0	4	->
water	36:25	0:0	4	gb
arg	36:29	36:32	3	off
water	36:29	0:0	4	off
arg	36:34	36:42	3	SEEK_SET
water	36:34	0:0	4	SEEK_SET
water	36:43	0:0	2	;
water	37:4	0:0	2	entries
op	37:12	0:0	2	=
call	37:14	37:38	2	ff_tget_short
arg	37:28	37:34	3	&s->gb
op	37:28	0:0	4	&
water	37:29	0:0	4	s
op	37:30	0:0	4	->
water	37:32	0:0	4	gb
arg	37:36	37:38	3	le
water	37:36	0:0	4	le
water	37:39	0:0	2	;
if	38:4	39:34	2	(bytestream2_get_bytes_left (& s -> gb ) < entries * 12)
cond	38:8	38:55	3	bytestream2_get_bytes_left (& s -> gb ) < entries * 12
call	38:8	38:41	4	bytestream2_get_bytes_left
arg	38:35	38:41	5	&s->gb
op	38:35	0:0	6	&
water	38:36	0:0	6	s
op	38:37	0:0	6	->
water	38:39	0:0	6	gb
op	38:43	0:0	4	<
water	38:45	0:0	4	entries
op	38:53	0:0	4	*
water	38:55	0:0	4	12
stmts	39:8	39:34	3	
return	39:8	39:34	4	AVERROR_INVALIDDATA
water	39:15	0:0	5	AVERROR_INVALIDDATA
for	40:4	43:4	2	(i = 0 ;i < entries;i ++)
forinit	40:9	40:14	3	i = 0 ;
water	40:9	0:0	4	i
op	40:11	0:0	4	=
water	40:13	0:0	4	0
water	40:14	0:0	4	;
cond	40:16	40:20	3	i < entries
water	40:16	0:0	4	i
op	40:18	0:0	4	<
water	40:20	0:0	4	entries
forexpr	40:29	40:30	3	i ++
water	40:29	0:0	4	i
op	40:30	0:0	4	++
stmts	40:34	43:4	3	
water	40:34	0:0	4	{
if	41:8	42:22	4	(( ret =tiff_decode_tag (s ,p ) ) < 0)
cond	41:12	41:44	5	( ret =tiff_decode_tag (s ,p ) ) < 0
water	41:12	0:0	6	(
water	41:13	0:0	6	ret
op	41:17	0:0	6	=
call	41:19	41:39	6	tiff_decode_tag
arg	41:35	41:36	7	s
water	41:35	0:0	8	s
arg	41:38	41:39	7	p
water	41:38	0:0	8	p
water	41:40	0:0	6	)
op	41:42	0:0	6	<
water	41:44	0:0	6	0
stmts	42:12	42:22	5	
return	42:12	42:22	6	ret
water	42:19	0:0	7	ret
water	43:4	0:0	4	}
for	45:4	60:4	2	(i = 0 ;i < s -> geotag_count;i ++)
forinit	45:9	45:14	3	i = 0 ;
water	45:9	0:0	4	i
op	45:11	0:0	4	=
water	45:13	0:0	4	0
water	45:14	0:0	4	;
cond	45:16	45:21	3	i < s -> geotag_count
water	45:16	0:0	4	i
op	45:17	0:0	4	<
water	45:18	0:0	4	s
op	45:19	0:0	4	->
water	45:21	0:0	4	geotag_count
forexpr	45:35	45:36	3	i ++
water	45:35	0:0	4	i
op	45:36	0:0	4	++
stmts	45:40	60:4	3	
water	45:40	0:0	4	{
decl	46:8	46:64	4	const char	*keyname
op	46:28	0:0	4	=
call	46:30	46:63	5	get_geokey_name
arg	46:46	46:63	6	s->geotags[i].key
water	46:46	0:0	7	s
op	46:47	0:0	7	->
water	46:49	0:0	7	geotags
op	46:56	0:0	7	[
water	46:57	0:0	7	i
op	46:58	0:0	7	]
op	46:59	0:0	7	.
water	46:60	0:0	7	key
if	47:8	50:8	4	(! keyname)
cond	47:12	47:13	5	! keyname
op	47:12	0:0	6	!
water	47:13	0:0	6	keyname
stmts	47:22	50:8	5	
water	47:22	0:0	6	{
call	48:12	48:102	6	av_log
arg	48:19	48:24	7	avctx
water	48:19	0:0	8	avctx
arg	48:26	48:40	7	AV_LOG_WARNING
water	48:26	0:0	8	AV_LOG_WARNING
arg	48:42	48:83	7	"Unknown or unsupported GeoTIFF key %d\n"
water	48:42	0:0	8	"Unknown or unsupported GeoTIFF key %d\n"
arg	48:85	48:102	7	s->geotags[i].key
water	48:85	0:0	8	s
op	48:86	0:0	8	->
water	48:88	0:0	8	geotags
op	48:95	0:0	8	[
water	48:96	0:0	8	i
op	48:97	0:0	8	]
op	48:98	0:0	8	.
water	48:99	0:0	8	key
water	48:103	0:0	6	;
continue	49:12	49:20	6	
water	50:8	0:0	6	}
if	51:8	54:8	4	(get_geokey_type (s -> geotags [ i ] . key ) != s -> geotags [ i ] . type)
cond	51:12	51:64	5	get_geokey_type (s -> geotags [ i ] . key ) != s -> geotags [ i ] . type
call	51:12	51:45	6	get_geokey_type
arg	51:28	51:45	7	s->geotags[i].key
water	51:28	0:0	8	s
op	51:29	0:0	8	->
water	51:31	0:0	8	geotags
op	51:38	0:0	8	[
water	51:39	0:0	8	i
op	51:40	0:0	8	]
op	51:41	0:0	8	.
water	51:42	0:0	8	key
op	51:47	0:0	6	!=
water	51:50	0:0	6	s
op	51:51	0:0	6	->
water	51:53	0:0	6	geotags
op	51:60	0:0	6	[
water	51:61	0:0	6	i
op	51:62	0:0	6	]
op	51:63	0:0	6	.
water	51:64	0:0	6	type
stmts	51:70	54:8	5	
water	51:70	0:0	6	{
call	52:12	52:96	6	av_log
arg	52:19	52:24	7	avctx
water	52:19	0:0	8	avctx
arg	52:26	52:40	7	AV_LOG_WARNING
water	52:26	0:0	8	AV_LOG_WARNING
arg	52:42	52:77	7	"Type of GeoTIFF key %d is wrong\n"
water	52:42	0:0	8	"Type of GeoTIFF key %d is wrong\n"
arg	52:79	52:96	7	s->geotags[i].key
water	52:79	0:0	8	s
op	52:80	0:0	8	->
water	52:82	0:0	8	geotags
op	52:89	0:0	8	[
water	52:90	0:0	8	i
op	52:91	0:0	8	]
op	52:92	0:0	8	.
water	52:93	0:0	8	key
water	52:97	0:0	6	;
continue	53:12	53:20	6	
water	54:8	0:0	6	}
water	55:8	0:0	4	ret
op	55:12	0:0	4	=
call	55:14	55:86	4	av_dict_set
arg	55:26	55:55	5	avpriv_frame_get_metadatap(p)
call	55:26	55:54	6	avpriv_frame_get_metadatap
arg	55:53	55:54	7	p
water	55:53	0:0	8	p
arg	55:57	55:64	5	keyname
water	55:57	0:0	6	keyname
arg	55:66	55:83	5	s->geotags[i].val
water	55:66	0:0	6	s
op	55:67	0:0	6	->
water	55:69	0:0	6	geotags
op	55:76	0:0	6	[
water	55:77	0:0	6	i
op	55:78	0:0	6	]
op	55:79	0:0	6	.
water	55:80	0:0	6	val
arg	55:85	55:86	5	0
water	55:85	0:0	6	0
water	55:87	0:0	4	;
if	56:8	59:8	4	(ret < 0)
cond	56:12	56:16	5	ret < 0
water	56:12	0:0	6	ret
op	56:15	0:0	6	<
water	56:16	0:0	6	0
stmts	56:19	59:8	5	
water	56:19	0:0	6	{
call	57:12	57:90	6	av_log
arg	57:19	57:24	7	avctx
water	57:19	0:0	8	avctx
arg	57:26	57:38	7	AV_LOG_ERROR
water	57:26	0:0	8	AV_LOG_ERROR
arg	57:40	57:81	7	"Writing metadata with key '%s' failed\n"
water	57:40	0:0	8	"Writing metadata with key '%s' failed\n"
arg	57:83	57:90	7	keyname
water	57:83	0:0	8	keyname
water	57:91	0:0	6	;
return	58:12	58:22	6	ret
water	58:19	0:0	7	ret
water	59:8	0:0	6	}
water	60:4	0:0	4	}
if	62:4	65:4	2	(! s -> strippos && ! s -> stripoff)
cond	62:8	62:28	3	! s -> strippos && ! s -> stripoff
op	62:8	0:0	4	!
water	62:9	0:0	4	s
op	62:10	0:0	4	->
water	62:12	0:0	4	strippos
op	62:21	0:0	4	&&
op	62:24	0:0	4	!
water	62:25	0:0	4	s
op	62:26	0:0	4	->
water	62:28	0:0	4	stripoff
stmts	62:38	65:4	3	
water	62:38	0:0	4	{
call	63:8	63:61	4	av_log
arg	63:15	63:20	5	avctx
water	63:15	0:0	6	avctx
arg	63:22	63:34	5	AV_LOG_ERROR
water	63:22	0:0	6	AV_LOG_ERROR
arg	63:36	63:61	5	"Image data is missing\n"
water	63:36	0:0	6	"Image data is missing\n"
water	63:62	0:0	4	;
return	64:8	64:34	4	AVERROR_INVALIDDATA
water	64:15	0:0	5	AVERROR_INVALIDDATA
water	65:4	0:0	4	}
if	67:4	68:18	2	(( ret =init_image (s ,& frame ) ) < 0)
cond	67:8	67:40	3	( ret =init_image (s ,& frame ) ) < 0
water	67:8	0:0	4	(
water	67:9	0:0	4	ret
op	67:13	0:0	4	=
call	67:15	67:35	4	init_image
arg	67:26	67:27	5	s
water	67:26	0:0	6	s
arg	67:29	67:35	5	&frame
op	67:29	0:0	6	&
water	67:30	0:0	6	frame
water	67:36	0:0	4	)
op	67:38	0:0	4	<
water	67:40	0:0	4	0
stmts	68:8	68:18	3	
return	68:8	68:18	4	ret
water	68:15	0:0	5	ret
if	70:4	73:4	2	(s -> strips == 1 && ! s -> stripsize)
cond	70:8	70:30	3	s -> strips == 1 && ! s -> stripsize
water	70:8	0:0	4	s
op	70:9	0:0	4	->
water	70:11	0:0	4	strips
op	70:18	0:0	4	==
water	70:21	0:0	4	1
op	70:23	0:0	4	&&
op	70:26	0:0	4	!
water	70:27	0:0	4	s
op	70:28	0:0	4	->
water	70:30	0:0	4	stripsize
stmts	70:41	73:4	3	
water	70:41	0:0	4	{
call	71:8	71:65	4	av_log
arg	71:15	71:20	5	avctx
water	71:15	0:0	6	avctx
arg	71:22	71:36	5	AV_LOG_WARNING
water	71:22	0:0	6	AV_LOG_WARNING
arg	71:38	71:65	5	"Image data size missing\n"
water	71:38	0:0	6	"Image data size missing\n"
water	71:66	0:0	4	;
water	72:8	0:0	4	s
op	72:9	0:0	4	->
water	72:11	0:0	4	stripsize
op	72:21	0:0	4	=
water	72:23	0:0	4	avpkt
op	72:28	0:0	4	->
water	72:30	0:0	4	size
op	72:35	0:0	4	-
water	72:37	0:0	4	s
op	72:38	0:0	4	->
water	72:40	0:0	4	stripoff
water	72:48	0:0	4	;
water	73:4	0:0	4	}
if	75:4	80:4	2	(s -> stripsizesoff)
cond	75:8	75:11	3	s -> stripsizesoff
water	75:8	0:0	4	s
op	75:9	0:0	4	->
water	75:11	0:0	4	stripsizesoff
stmts	75:26	80:4	3	
water	75:26	0:0	4	{
if	76:8	77:38	4	(s -> stripsizesoff >= ( unsigned ) avpkt -> size)
cond	76:12	76:49	5	s -> stripsizesoff >= ( unsigned ) avpkt -> size
water	76:12	0:0	6	s
op	76:13	0:0	6	->
water	76:15	0:0	6	stripsizesoff
op	76:29	0:0	6	>=
water	76:32	0:0	6	(
water	76:33	0:0	6	unsigned
water	76:41	0:0	6	)
water	76:42	0:0	6	avpkt
op	76:47	0:0	6	->
water	76:49	0:0	6	size
stmts	77:12	77:38	5	
return	77:12	77:38	6	AVERROR_INVALIDDATA
water	77:19	0:0	7	AVERROR_INVALIDDATA
call	78:8	79:55	4	bytestream2_init
arg	78:25	78:36	5	&stripsizes
op	78:25	0:0	6	&
water	78:26	0:0	6	stripsizes
arg	78:38	78:68	5	avpkt->data+s->stripsizesoff
water	78:38	0:0	6	avpkt
op	78:43	0:0	6	->
water	78:45	0:0	6	data
op	78:50	0:0	6	+
water	78:52	0:0	6	s
op	78:53	0:0	6	->
water	78:55	0:0	6	stripsizesoff
arg	79:25	79:55	5	avpkt->size-s->stripsizesoff
water	79:25	0:0	6	avpkt
op	79:30	0:0	6	->
water	79:32	0:0	6	size
op	79:37	0:0	6	-
water	79:39	0:0	6	s
op	79:40	0:0	6	->
water	79:42	0:0	6	stripsizesoff
water	79:56	0:0	4	;
water	80:4	0:0	4	}
if	81:4	86:4	2	(s -> strippos)
cond	81:8	81:11	3	s -> strippos
water	81:8	0:0	4	s
op	81:9	0:0	4	->
water	81:11	0:0	4	strippos
stmts	81:21	86:4	3	
water	81:21	0:0	4	{
if	82:8	83:38	4	(s -> strippos >= ( unsigned ) avpkt -> size)
cond	82:12	82:44	5	s -> strippos >= ( unsigned ) avpkt -> size
water	82:12	0:0	6	s
op	82:13	0:0	6	->
water	82:15	0:0	6	strippos
op	82:24	0:0	6	>=
water	82:27	0:0	6	(
water	82:28	0:0	6	unsigned
water	82:36	0:0	6	)
water	82:37	0:0	6	avpkt
op	82:42	0:0	6	->
water	82:44	0:0	6	size
stmts	83:12	83:38	5	
return	83:12	83:38	6	AVERROR_INVALIDDATA
water	83:19	0:0	7	AVERROR_INVALIDDATA
call	84:8	85:50	4	bytestream2_init
arg	84:25	84:35	5	&stripdata
op	84:25	0:0	6	&
water	84:26	0:0	6	stripdata
arg	84:37	84:62	5	avpkt->data+s->strippos
water	84:37	0:0	6	avpkt
op	84:42	0:0	6	->
water	84:44	0:0	6	data
op	84:49	0:0	6	+
water	84:51	0:0	6	s
op	84:52	0:0	6	->
water	84:54	0:0	6	strippos
arg	85:25	85:50	5	avpkt->size-s->strippos
water	85:25	0:0	6	avpkt
op	85:30	0:0	6	->
water	85:32	0:0	6	size
op	85:37	0:0	6	-
water	85:39	0:0	6	s
op	85:40	0:0	6	->
water	85:42	0:0	6	strippos
water	85:51	0:0	4	;
water	86:4	0:0	4	}
if	88:4	91:4	2	(s -> rps <= 0)
cond	88:8	88:18	3	s -> rps <= 0
water	88:8	0:0	4	s
op	88:9	0:0	4	->
water	88:11	0:0	4	rps
op	88:15	0:0	4	<=
water	88:18	0:0	4	0
stmts	88:21	91:4	3	
water	88:21	0:0	4	{
call	89:8	89:62	4	av_log
arg	89:15	89:20	5	avctx
water	89:15	0:0	6	avctx
arg	89:22	89:34	5	AV_LOG_ERROR
water	89:22	0:0	6	AV_LOG_ERROR
arg	89:36	89:54	5	"rps %d invalid\n"
water	89:36	0:0	6	"rps %d invalid\n"
arg	89:56	89:62	5	s->rps
water	89:56	0:0	6	s
op	89:57	0:0	6	->
water	89:59	0:0	6	rps
water	89:63	0:0	4	;
return	90:8	90:34	4	AVERROR_INVALIDDATA
water	90:15	0:0	5	AVERROR_INVALIDDATA
water	91:4	0:0	4	}
water	93:4	0:0	2	planes
op	93:11	0:0	2	=
water	93:13	0:0	2	s
op	93:14	0:0	2	->
water	93:16	0:0	2	planar
water	93:23	0:0	2	?
water	93:25	0:0	2	s
op	93:26	0:0	2	->
water	93:28	0:0	2	bppcount
water	93:37	0:0	2	:
water	93:39	0:0	2	1
water	93:40	0:0	2	;
for	94:4	169:4	2	(plane = 0 ;plane < planes;plane ++)
forinit	94:9	94:18	3	plane = 0 ;
water	94:9	0:0	4	plane
op	94:15	0:0	4	=
water	94:17	0:0	4	0
water	94:18	0:0	4	;
cond	94:20	94:28	3	plane < planes
water	94:20	0:0	4	plane
op	94:26	0:0	4	<
water	94:28	0:0	4	planes
forexpr	94:36	94:41	3	plane ++
water	94:36	0:0	4	plane
op	94:41	0:0	4	++
stmts	94:45	169:4	3	
water	94:45	0:0	4	{
water	95:8	0:0	4	stride
op	95:15	0:0	4	=
water	95:17	0:0	4	p
op	95:18	0:0	4	->
water	95:20	0:0	4	linesize
op	95:28	0:0	4	[
water	95:29	0:0	4	plane
op	95:34	0:0	4	]
water	95:35	0:0	4	;
water	96:8	0:0	4	dst
op	96:12	0:0	4	=
water	96:14	0:0	4	p
op	96:15	0:0	4	->
water	96:17	0:0	4	data
op	96:21	0:0	4	[
water	96:22	0:0	4	plane
op	96:27	0:0	4	]
water	96:28	0:0	4	;
for	97:8	119:8	4	(i = 0 ;i < s -> height;i += s -> rps)
forinit	97:13	97:18	5	i = 0 ;
water	97:13	0:0	6	i
op	97:15	0:0	6	=
water	97:17	0:0	6	0
water	97:18	0:0	6	;
cond	97:20	97:27	5	i < s -> height
water	97:20	0:0	6	i
op	97:22	0:0	6	<
water	97:24	0:0	6	s
op	97:25	0:0	6	->
water	97:27	0:0	6	height
forexpr	97:35	97:43	5	i += s -> rps
water	97:35	0:0	6	i
op	97:37	0:0	6	+=
water	97:40	0:0	6	s
op	97:41	0:0	6	->
water	97:43	0:0	6	rps
stmts	97:48	119:8	5	
water	97:48	0:0	6	{
if	98:12	99:59	6	(s -> stripsizesoff)
cond	98:16	98:19	7	s -> stripsizesoff
water	98:16	0:0	8	s
op	98:17	0:0	8	->
water	98:19	0:0	8	stripsizesoff
stmts	99:16	99:59	7	
water	99:16	0:0	8	ssize
op	99:22	0:0	8	=
call	99:24	99:58	8	ff_tget
arg	99:32	99:43	9	&stripsizes
op	99:32	0:0	10	&
water	99:33	0:0	10	stripsizes
arg	99:45	99:54	9	s->sstype
water	99:45	0:0	10	s
op	99:46	0:0	10	->
water	99:48	0:0	10	sstype
arg	99:56	99:58	9	le
water	99:56	0:0	10	le
water	99:59	0:0	8	;
else	100:12	101:36	6
stmts	101:16	101:36	7	
water	101:16	0:0	8	ssize
op	101:22	0:0	8	=
water	101:24	0:0	8	s
op	101:25	0:0	8	->
water	101:27	0:0	8	stripsize
water	101:36	0:0	8	;
if	103:12	104:54	6	(s -> strippos)
cond	103:16	103:19	7	s -> strippos
water	103:16	0:0	8	s
op	103:17	0:0	8	->
water	103:19	0:0	8	strippos
stmts	104:16	104:54	7	
water	104:16	0:0	8	soff
op	104:21	0:0	8	=
call	104:23	104:53	8	ff_tget
arg	104:31	104:41	9	&stripdata
op	104:31	0:0	10	&
water	104:32	0:0	10	stripdata
arg	104:43	104:49	9	s->sot
water	104:43	0:0	10	s
op	104:44	0:0	10	->
water	104:46	0:0	10	sot
arg	104:51	104:53	9	le
water	104:51	0:0	10	le
water	104:54	0:0	8	;
else	105:12	106:34	6
stmts	106:16	106:34	7	
water	106:16	0:0	8	soff
op	106:21	0:0	8	=
water	106:23	0:0	8	s
op	106:24	0:0	8	->
water	106:26	0:0	8	stripoff
water	106:34	0:0	8	;
if	108:12	111:12	6	(soff > avpkt -> size || ssize > avpkt -> size - soff)
cond	108:16	108:60	7	soff > avpkt -> size || ssize > avpkt -> size - soff
water	108:16	0:0	8	soff
op	108:21	0:0	8	>
water	108:23	0:0	8	avpkt
op	108:28	0:0	8	->
water	108:30	0:0	8	size
op	108:35	0:0	8	||
water	108:38	0:0	8	ssize
op	108:44	0:0	8	>
water	108:46	0:0	8	avpkt
op	108:51	0:0	8	->
water	108:53	0:0	8	size
op	108:58	0:0	8	-
water	108:60	0:0	8	soff
stmts	108:66	111:12	7	
water	108:66	0:0	8	{
call	109:16	109:73	8	av_log
arg	109:23	109:28	9	avctx
water	109:23	0:0	10	avctx
arg	109:30	109:42	9	AV_LOG_ERROR
water	109:30	0:0	10	AV_LOG_ERROR
arg	109:44	109:73	9	"Invalid strip size/offset\n"
water	109:44	0:0	10	"Invalid strip size/offset\n"
water	109:74	0:0	8	;
return	110:16	110:42	8	AVERROR_INVALIDDATA
water	110:23	0:0	9	AVERROR_INVALIDDATA
water	111:12	0:0	8	}
if	112:12	117:12	6	(( ret =tiff_unpack_strip (s ,p ,dst ,stride ,avpkt -> data + soff ,ssize ,i ,FFMIN (s -> rps ,s -> height - i ) ) ) < 0)
cond	112:16	113:74	7	( ret =tiff_unpack_strip (s ,p ,dst ,stride ,avpkt -> data + soff ,ssize ,i ,FFMIN (s -> rps ,s -> height - i ) ) ) < 0
water	112:16	0:0	8	(
water	112:17	0:0	8	ret
op	112:21	0:0	8	=
call	112:23	113:69	8	tiff_unpack_strip
arg	112:41	112:42	9	s
water	112:41	0:0	10	s
arg	112:44	112:45	9	p
water	112:44	0:0	10	p
arg	112:47	112:50	9	dst
water	112:47	0:0	10	dst
arg	112:52	112:58	9	stride
water	112:52	0:0	10	stride
arg	112:60	112:78	9	avpkt->data+soff
water	112:60	0:0	10	avpkt
op	112:65	0:0	10	->
water	112:67	0:0	10	data
op	112:72	0:0	10	+
water	112:74	0:0	10	soff
arg	112:80	112:85	9	ssize
water	112:80	0:0	10	ssize
arg	112:87	112:88	9	i
water	112:87	0:0	10	i
arg	113:41	113:69	9	FFMIN(s->rps,s->height-i)
call	113:41	113:68	10	FFMIN
arg	113:47	113:53	11	s->rps
water	113:47	0:0	12	s
op	113:48	0:0	12	->
water	113:50	0:0	12	rps
arg	113:55	113:68	11	s->height-i
water	113:55	0:0	12	s
op	113:56	0:0	12	->
water	113:58	0:0	12	height
op	113:65	0:0	12	-
water	113:67	0:0	12	i
water	113:70	0:0	8	)
op	113:72	0:0	8	<
water	113:74	0:0	8	0
stmts	113:77	117:12	7	
water	113:77	0:0	8	{
if	114:16	115:30	8	(avctx -> err_recognition & AV_EF_EXPLODE)
cond	114:20	114:45	9	avctx -> err_recognition & AV_EF_EXPLODE
water	114:20	0:0	10	avctx
op	114:25	0:0	10	->
water	114:27	0:0	10	err_recognition
op	114:43	0:0	10	&
water	114:45	0:0	10	AV_EF_EXPLODE
stmts	115:20	115:30	9	
return	115:20	115:30	10	ret
water	115:27	0:0	11	ret
break	116:16	116:21	8	
water	117:12	0:0	8	}
water	118:12	0:0	6	dst
op	118:16	0:0	6	+=
water	118:19	0:0	6	s
op	118:20	0:0	6	->
water	118:22	0:0	6	rps
op	118:26	0:0	6	*
water	118:28	0:0	6	stride
water	118:34	0:0	6	;
water	119:8	0:0	6	}
if	120:8	159:8	4	(s -> predictor == 2)
cond	120:12	120:28	5	s -> predictor == 2
water	120:12	0:0	6	s
op	120:13	0:0	6	->
water	120:15	0:0	6	predictor
op	120:25	0:0	6	==
water	120:28	0:0	6	2
stmts	120:31	159:8	5	
water	120:31	0:0	6	{
if	121:12	124:12	6	(s -> photometric == TIFF_PHOTOMETRIC_YCBCR)
cond	121:16	121:34	7	s -> photometric == TIFF_PHOTOMETRIC_YCBCR
water	121:16	0:0	8	s
op	121:17	0:0	8	->
water	121:19	0:0	8	photometric
op	121:31	0:0	8	==
water	121:34	0:0	8	TIFF_PHOTOMETRIC_YCBCR
stmts	121:58	124:12	7	
water	121:58	0:0	8	{
call	122:16	122:87	8	av_log
arg	122:23	122:31	9	s->avctx
water	122:23	0:0	10	s
op	122:24	0:0	10	->
water	122:26	0:0	10	avctx
arg	122:33	122:45	9	AV_LOG_ERROR
water	122:33	0:0	10	AV_LOG_ERROR
arg	122:47	122:87	9	"predictor == 2 with YUV is unsupported"
water	122:47	0:0	10	"predictor == 2 with YUV is unsupported"
water	122:88	0:0	8	;
return	123:16	123:43	8	AVERROR_PATCHWELCOME
water	123:23	0:0	9	AVERROR_PATCHWELCOME
water	124:12	0:0	8	}
water	125:12	0:0	6	dst
op	125:18	0:0	6	=
water	125:20	0:0	6	p
op	125:21	0:0	6	->
water	125:23	0:0	6	data
op	125:27	0:0	6	[
water	125:28	0:0	6	plane
op	125:33	0:0	6	]
water	125:34	0:0	6	;
water	126:12	0:0	6	soff
op	126:18	0:0	6	=
water	126:20	0:0	6	s
op	126:21	0:0	6	->
water	126:23	0:0	6	bpp
op	126:27	0:0	6	>>
water	126:30	0:0	6	3
water	126:31	0:0	6	;
if	127:12	128:52	6	(s -> planar)
cond	127:16	127:19	7	s -> planar
water	127:16	0:0	8	s
op	127:17	0:0	8	->
water	127:19	0:0	8	planar
stmts	128:16	128:52	7	
water	128:16	0:0	8	soff
op	128:22	0:0	8	=
call	128:24	128:51	8	FFMAX
arg	128:30	128:48	9	soff/s->bppcount
water	128:30	0:0	10	soff
op	128:35	0:0	10	/
water	128:37	0:0	10	s
op	128:38	0:0	10	->
water	128:40	0:0	10	bppcount
arg	128:50	128:51	9	1
water	128:50	0:0	10	1
water	128:52	0:0	8	;
water	129:12	0:0	6	ssize
op	129:18	0:0	6	=
water	129:20	0:0	6	s
op	129:21	0:0	6	->
water	129:23	0:0	6	width
op	129:29	0:0	6	*
water	129:31	0:0	6	soff
water	129:35	0:0	6	;
if	130:12	141:12	6	(s -> avctx -> pix_fmt == AV_PIX_FMT_RGB48LE || s -> avctx -> pix_fmt == AV_PIX_FMT_RGBA64LE || s -> avctx -> pix_fmt == AV_PIX_FMT_GRAY16LE || s -> avctx -> pix_fmt == AV_PIX_FMT_YA16LE || s -> avctx -> pix_fmt == AV_PIX_FMT_GBRP16LE || s -> avctx -> pix_fmt == AV_PIX_FMT_GBRAP16LE)
cond	130:16	135:37	7	s -> avctx -> pix_fmt == AV_PIX_FMT_RGB48LE || s -> avctx -> pix_fmt == AV_PIX_FMT_RGBA64LE || s -> avctx -> pix_fmt == AV_PIX_FMT_GRAY16LE || s -> avctx -> pix_fmt == AV_PIX_FMT_YA16LE || s -> avctx -> pix_fmt == AV_PIX_FMT_GBRP16LE || s -> avctx -> pix_fmt == AV_PIX_FMT_GBRAP16LE
water	130:16	0:0	8	s
op	130:17	0:0	8	->
water	130:19	0:0	8	avctx
op	130:24	0:0	8	->
water	130:26	0:0	8	pix_fmt
op	130:34	0:0	8	==
water	130:37	0:0	8	AV_PIX_FMT_RGB48LE
op	130:56	0:0	8	||
water	131:16	0:0	8	s
op	131:17	0:0	8	->
water	131:19	0:0	8	avctx
op	131:24	0:0	8	->
water	131:26	0:0	8	pix_fmt
op	131:34	0:0	8	==
water	131:37	0:0	8	AV_PIX_FMT_RGBA64LE
op	131:57	0:0	8	||
water	132:16	0:0	8	s
op	132:17	0:0	8	->
water	132:19	0:0	8	avctx
op	132:24	0:0	8	->
water	132:26	0:0	8	pix_fmt
op	132:34	0:0	8	==
water	132:37	0:0	8	AV_PIX_FMT_GRAY16LE
op	132:57	0:0	8	||
water	133:16	0:0	8	s
op	133:17	0:0	8	->
water	133:19	0:0	8	avctx
op	133:24	0:0	8	->
water	133:26	0:0	8	pix_fmt
op	133:34	0:0	8	==
water	133:37	0:0	8	AV_PIX_FMT_YA16LE
op	133:55	0:0	8	||
water	134:16	0:0	8	s
op	134:17	0:0	8	->
water	134:19	0:0	8	avctx
op	134:24	0:0	8	->
water	134:26	0:0	8	pix_fmt
op	134:34	0:0	8	==
water	134:37	0:0	8	AV_PIX_FMT_GBRP16LE
op	134:57	0:0	8	||
water	135:16	0:0	8	s
op	135:17	0:0	8	->
water	135:19	0:0	8	avctx
op	135:24	0:0	8	->
water	135:26	0:0	8	pix_fmt
op	135:34	0:0	8	==
water	135:37	0:0	8	AV_PIX_FMT_GBRAP16LE
stmts	135:59	141:12	7	
water	135:59	0:0	8	{
for	136:16	140:16	8	(i = 0 ;i < s -> height;i ++)
forinit	136:21	136:26	9	i = 0 ;
water	136:21	0:0	10	i
op	136:23	0:0	10	=
water	136:25	0:0	10	0
water	136:26	0:0	10	;
cond	136:28	136:35	9	i < s -> height
water	136:28	0:0	10	i
op	136:30	0:0	10	<
water	136:32	0:0	10	s
op	136:33	0:0	10	->
water	136:35	0:0	10	height
forexpr	136:43	136:44	9	i ++
water	136:43	0:0	10	i
op	136:44	0:0	10	++
stmts	136:48	140:16	9	
water	136:48	0:0	10	{
for	137:20	138:84	10	(j = soff ;j < ssize;j += 2)
forinit	137:25	137:33	11	j = soff ;
water	137:25	0:0	12	j
op	137:27	0:0	12	=
water	137:29	0:0	12	soff
water	137:33	0:0	12	;
cond	137:35	137:39	11	j < ssize
water	137:35	0:0	12	j
op	137:37	0:0	12	<
water	137:39	0:0	12	ssize
forexpr	137:46	137:51	11	j += 2
water	137:46	0:0	12	j
op	137:48	0:0	12	+=
water	137:51	0:0	12	2
stmts	138:24	138:84	11	
call	138:24	138:83	12	AV_WL16
arg	138:32	138:39	13	dst+j
water	138:32	0:0	14	dst
op	138:36	0:0	14	+
water	138:38	0:0	14	j
arg	138:41	138:83	13	AV_RL16(dst+j)+AV_RL16(dst+j-soff)
call	138:41	138:56	14	AV_RL16
arg	138:49	138:56	15	dst+j
water	138:49	0:0	16	dst
op	138:53	0:0	16	+
water	138:55	0:0	16	j
op	138:58	0:0	14	+
call	138:60	138:82	14	AV_RL16
arg	138:68	138:82	15	dst+j-soff
water	138:68	0:0	16	dst
op	138:72	0:0	16	+
water	138:74	0:0	16	j
op	138:76	0:0	16	-
water	138:78	0:0	16	soff
water	138:84	0:0	12	;
water	139:20	0:0	10	dst
op	139:24	0:0	10	+=
water	139:27	0:0	10	stride
water	139:33	0:0	10	;
water	140:16	0:0	10	}
water	141:12	0:0	8	}
else	141:14	152:12	6
stmts	141:19	152:12	7	
if	141:19	152:12	8	(s -> avctx -> pix_fmt == AV_PIX_FMT_RGB48BE || s -> avctx -> pix_fmt == AV_PIX_FMT_RGBA64BE || s -> avctx -> pix_fmt == AV_PIX_FMT_GRAY16BE || s -> avctx -> pix_fmt == AV_PIX_FMT_YA16BE || s -> avctx -> pix_fmt == AV_PIX_FMT_GBRP16BE || s -> avctx -> pix_fmt == AV_PIX_FMT_GBRAP16BE)
cond	141:23	146:44	9	s -> avctx -> pix_fmt == AV_PIX_FMT_RGB48BE || s -> avctx -> pix_fmt == AV_PIX_FMT_RGBA64BE || s -> avctx -> pix_fmt == AV_PIX_FMT_GRAY16BE || s -> avctx -> pix_fmt == AV_PIX_FMT_YA16BE || s -> avctx -> pix_fmt == AV_PIX_FMT_GBRP16BE || s -> avctx -> pix_fmt == AV_PIX_FMT_GBRAP16BE
water	141:23	0:0	10	s
op	141:24	0:0	10	->
water	141:26	0:0	10	avctx
op	141:31	0:0	10	->
water	141:33	0:0	10	pix_fmt
op	141:41	0:0	10	==
water	141:44	0:0	10	AV_PIX_FMT_RGB48BE
op	141:63	0:0	10	||
water	142:23	0:0	10	s
op	142:24	0:0	10	->
water	142:26	0:0	10	avctx
op	142:31	0:0	10	->
water	142:33	0:0	10	pix_fmt
op	142:41	0:0	10	==
water	142:44	0:0	10	AV_PIX_FMT_RGBA64BE
op	142:64	0:0	10	||
water	143:23	0:0	10	s
op	143:24	0:0	10	->
water	143:26	0:0	10	avctx
op	143:31	0:0	10	->
water	143:33	0:0	10	pix_fmt
op	143:41	0:0	10	==
water	143:44	0:0	10	AV_PIX_FMT_GRAY16BE
op	143:64	0:0	10	||
water	144:23	0:0	10	s
op	144:24	0:0	10	->
water	144:26	0:0	10	avctx
op	144:31	0:0	10	->
water	144:33	0:0	10	pix_fmt
op	144:41	0:0	10	==
water	144:44	0:0	10	AV_PIX_FMT_YA16BE
op	144:62	0:0	10	||
water	145:23	0:0	10	s
op	145:24	0:0	10	->
water	145:26	0:0	10	avctx
op	145:31	0:0	10	->
water	145:33	0:0	10	pix_fmt
op	145:41	0:0	10	==
water	145:44	0:0	10	AV_PIX_FMT_GBRP16BE
op	145:64	0:0	10	||
water	146:23	0:0	10	s
op	146:24	0:0	10	->
water	146:26	0:0	10	avctx
op	146:31	0:0	10	->
water	146:33	0:0	10	pix_fmt
op	146:41	0:0	10	==
water	146:44	0:0	10	AV_PIX_FMT_GBRAP16BE
stmts	146:66	152:12	9	
water	146:66	0:0	10	{
for	147:16	151:16	10	(i = 0 ;i < s -> height;i ++)
forinit	147:21	147:26	11	i = 0 ;
water	147:21	0:0	12	i
op	147:23	0:0	12	=
water	147:25	0:0	12	0
water	147:26	0:0	12	;
cond	147:28	147:35	11	i < s -> height
water	147:28	0:0	12	i
op	147:30	0:0	12	<
water	147:32	0:0	12	s
op	147:33	0:0	12	->
water	147:35	0:0	12	height
forexpr	147:43	147:44	11	i ++
water	147:43	0:0	12	i
op	147:44	0:0	12	++
stmts	147:48	151:16	11	
water	147:48	0:0	12	{
for	148:20	149:84	12	(j = soff ;j < ssize;j += 2)
forinit	148:25	148:33	13	j = soff ;
water	148:25	0:0	14	j
op	148:27	0:0	14	=
water	148:29	0:0	14	soff
water	148:33	0:0	14	;
cond	148:35	148:39	13	j < ssize
water	148:35	0:0	14	j
op	148:37	0:0	14	<
water	148:39	0:0	14	ssize
forexpr	148:46	148:51	13	j += 2
water	148:46	0:0	14	j
op	148:48	0:0	14	+=
water	148:51	0:0	14	2
stmts	149:24	149:84	13	
call	149:24	149:83	14	AV_WB16
arg	149:32	149:39	15	dst+j
water	149:32	0:0	16	dst
op	149:36	0:0	16	+
water	149:38	0:0	16	j
arg	149:41	149:83	15	AV_RB16(dst+j)+AV_RB16(dst+j-soff)
call	149:41	149:56	16	AV_RB16
arg	149:49	149:56	17	dst+j
water	149:49	0:0	18	dst
op	149:53	0:0	18	+
water	149:55	0:0	18	j
op	149:58	0:0	16	+
call	149:60	149:82	16	AV_RB16
arg	149:68	149:82	17	dst+j-soff
water	149:68	0:0	18	dst
op	149:72	0:0	18	+
water	149:74	0:0	18	j
op	149:76	0:0	18	-
water	149:78	0:0	18	soff
water	149:84	0:0	14	;
water	150:20	0:0	12	dst
op	150:24	0:0	12	+=
water	150:27	0:0	12	stride
water	150:33	0:0	12	;
water	151:16	0:0	12	}
water	152:12	0:0	10	}
else	152:14	158:12	6
stmts	152:19	158:12	7	
water	152:19	0:0	8	{
for	153:16	157:16	8	(i = 0 ;i < s -> height;i ++)
forinit	153:21	153:26	9	i = 0 ;
water	153:21	0:0	10	i
op	153:23	0:0	10	=
water	153:25	0:0	10	0
water	153:26	0:0	10	;
cond	153:28	153:35	9	i < s -> height
water	153:28	0:0	10	i
op	153:30	0:0	10	<
water	153:32	0:0	10	s
op	153:33	0:0	10	->
water	153:35	0:0	10	height
forexpr	153:43	153:44	9	i ++
water	153:43	0:0	10	i
op	153:44	0:0	10	++
stmts	153:48	157:16	9	
water	153:48	0:0	10	{
for	154:20	155:47	10	(j = soff ;j < ssize;j ++)
forinit	154:25	154:33	11	j = soff ;
water	154:25	0:0	12	j
op	154:27	0:0	12	=
water	154:29	0:0	12	soff
water	154:33	0:0	12	;
cond	154:35	154:39	11	j < ssize
water	154:35	0:0	12	j
op	154:37	0:0	12	<
water	154:39	0:0	12	ssize
forexpr	154:46	154:47	11	j ++
water	154:46	0:0	12	j
op	154:47	0:0	12	++
stmts	155:24	155:47	11	
water	155:24	0:0	12	dst
op	155:27	0:0	12	[
water	155:28	0:0	12	j
op	155:29	0:0	12	]
op	155:31	0:0	12	+=
water	155:34	0:0	12	dst
op	155:37	0:0	12	[
water	155:38	0:0	12	j
op	155:40	0:0	12	-
water	155:42	0:0	12	soff
op	155:46	0:0	12	]
water	155:47	0:0	12	;
water	156:20	0:0	10	dst
op	156:24	0:0	10	+=
water	156:27	0:0	10	stride
water	156:33	0:0	10	;
water	157:16	0:0	10	}
water	158:12	0:0	8	}
water	159:8	0:0	6	}
if	161:8	168:8	4	(s -> photometric == TIFF_PHOTOMETRIC_WHITE_IS_ZERO)
cond	161:12	161:30	5	s -> photometric == TIFF_PHOTOMETRIC_WHITE_IS_ZERO
water	161:12	0:0	6	s
op	161:13	0:0	6	->
water	161:15	0:0	6	photometric
op	161:27	0:0	6	==
water	161:30	0:0	6	TIFF_PHOTOMETRIC_WHITE_IS_ZERO
stmts	161:62	168:8	5	
water	161:62	0:0	6	{
water	162:12	0:0	6	dst
op	162:16	0:0	6	=
water	162:18	0:0	6	p
op	162:19	0:0	6	->
water	162:21	0:0	6	data
op	162:25	0:0	6	[
water	162:26	0:0	6	plane
op	162:31	0:0	6	]
water	162:32	0:0	6	;
for	163:12	167:12	6	(i = 0 ;i < s -> height;i ++)
forinit	163:17	163:22	7	i = 0 ;
water	163:17	0:0	8	i
op	163:19	0:0	8	=
water	163:21	0:0	8	0
water	163:22	0:0	8	;
cond	163:24	163:31	7	i < s -> height
water	163:24	0:0	8	i
op	163:26	0:0	8	<
water	163:28	0:0	8	s
op	163:29	0:0	8	->
water	163:31	0:0	8	height
forexpr	163:39	163:40	7	i ++
water	163:39	0:0	8	i
op	163:40	0:0	8	++
stmts	163:44	167:12	7	
water	163:44	0:0	8	{
for	164:16	165:100	8	(j = 0 ;j < stride;j ++)
forinit	164:21	164:26	9	j = 0 ;
water	164:21	0:0	10	j
op	164:23	0:0	10	=
water	164:25	0:0	10	0
water	164:26	0:0	10	;
cond	164:28	164:32	9	j < stride
water	164:28	0:0	10	j
op	164:30	0:0	10	<
water	164:32	0:0	10	stride
forexpr	164:40	164:41	9	j ++
water	164:40	0:0	10	j
op	164:41	0:0	10	++
stmts	165:20	165:100	9	
water	165:20	0:0	10	dst
op	165:23	0:0	10	[
water	165:24	0:0	10	j
op	165:25	0:0	10	]
op	165:27	0:0	10	=
water	165:29	0:0	10	(
water	165:30	0:0	10	s
op	165:31	0:0	10	->
water	165:33	0:0	10	avctx
op	165:38	0:0	10	->
water	165:40	0:0	10	pix_fmt
op	165:48	0:0	10	==
water	165:51	0:0	10	AV_PIX_FMT_PAL8
water	165:67	0:0	10	?
water	165:69	0:0	10	(
water	165:70	0:0	10	1
op	165:71	0:0	10	<<
water	165:73	0:0	10	s
op	165:74	0:0	10	->
water	165:76	0:0	10	bpp
water	165:79	0:0	10	)
op	165:81	0:0	10	-
water	165:83	0:0	10	1
water	165:85	0:0	10	:
water	165:87	0:0	10	255
water	165:90	0:0	10	)
op	165:92	0:0	10	-
water	165:94	0:0	10	dst
op	165:97	0:0	10	[
water	165:98	0:0	10	j
op	165:99	0:0	10	]
water	165:100	0:0	10	;
water	166:16	0:0	8	dst
op	166:20	0:0	8	+=
water	166:23	0:0	8	stride
water	166:29	0:0	8	;
water	167:12	0:0	8	}
water	168:8	0:0	6	}
water	169:4	0:0	4	}
if	171:4	176:4	2	(s -> planar && s -> bppcount > 2)
cond	171:8	171:35	3	s -> planar && s -> bppcount > 2
water	171:8	0:0	4	s
op	171:9	0:0	4	->
water	171:11	0:0	4	planar
op	171:18	0:0	4	&&
water	171:21	0:0	4	s
op	171:22	0:0	4	->
water	171:24	0:0	4	bppcount
op	171:33	0:0	4	>
water	171:35	0:0	4	2
stmts	171:38	176:4	3	
water	171:38	0:0	4	{
call	172:8	172:51	4	FFSWAP
arg	172:15	172:23	5	uint8_t*
water	172:15	0:0	6	uint8_t
op	172:22	0:0	6	*
arg	172:25	172:35	5	p->data[0]
water	172:25	0:0	6	p
op	172:26	0:0	6	->
water	172:28	0:0	6	data
op	172:32	0:0	6	[
water	172:33	0:0	6	0
op	172:34	0:0	6	]
arg	172:41	172:51	5	p->data[2]
water	172:41	0:0	6	p
op	172:42	0:0	6	->
water	172:44	0:0	6	data
op	172:48	0:0	6	[
water	172:49	0:0	6	2
op	172:50	0:0	6	]
water	172:52	0:0	4	;
call	173:8	173:55	4	FFSWAP
arg	173:15	173:18	5	int
water	173:15	0:0	6	int
arg	173:25	173:39	5	p->linesize[0]
water	173:25	0:0	6	p
op	173:26	0:0	6	->
water	173:28	0:0	6	linesize
op	173:36	0:0	6	[
water	173:37	0:0	6	0
op	173:38	0:0	6	]
arg	173:41	173:55	5	p->linesize[2]
water	173:41	0:0	6	p
op	173:42	0:0	6	->
water	173:44	0:0	6	linesize
op	173:52	0:0	6	[
water	173:53	0:0	6	2
op	173:54	0:0	6	]
water	173:56	0:0	4	;
call	174:8	174:51	4	FFSWAP
arg	174:15	174:23	5	uint8_t*
water	174:15	0:0	6	uint8_t
op	174:22	0:0	6	*
arg	174:25	174:35	5	p->data[0]
water	174:25	0:0	6	p
op	174:26	0:0	6	->
water	174:28	0:0	6	data
op	174:32	0:0	6	[
water	174:33	0:0	6	0
op	174:34	0:0	6	]
arg	174:41	174:51	5	p->data[1]
water	174:41	0:0	6	p
op	174:42	0:0	6	->
water	174:44	0:0	6	data
op	174:48	0:0	6	[
water	174:49	0:0	6	1
op	174:50	0:0	6	]
water	174:52	0:0	4	;
call	175:8	175:55	4	FFSWAP
arg	175:15	175:18	5	int
water	175:15	0:0	6	int
arg	175:25	175:39	5	p->linesize[0]
water	175:25	0:0	6	p
op	175:26	0:0	6	->
water	175:28	0:0	6	linesize
op	175:36	0:0	6	[
water	175:37	0:0	6	0
op	175:38	0:0	6	]
arg	175:41	175:55	5	p->linesize[1]
water	175:41	0:0	6	p
op	175:42	0:0	6	->
water	175:44	0:0	6	linesize
op	175:52	0:0	6	[
water	175:53	0:0	6	1
op	175:54	0:0	6	]
water	175:56	0:0	4	;
water	176:4	0:0	4	}
op	178:4	0:0	2	*
water	178:5	0:0	2	got_frame
op	178:15	0:0	2	=
water	178:17	0:0	2	1
water	178:18	0:0	2	;
return	180:4	180:22	2	avpkt->size
water	180:11	0:0	3	avpkt
op	180:16	0:0	3	->
water	180:18	0:0	3	size
