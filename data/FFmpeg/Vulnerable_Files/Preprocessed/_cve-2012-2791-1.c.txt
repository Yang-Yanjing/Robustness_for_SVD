func	10:0	129:0	0	static int	decode_band_hdr
params	10:26	0:0	1	
param	10:27	10:46	2	IVI4DecContext *	ctx
param	10:48	10:65	2	IVIBandDesc *	band
param	11:27	11:48	2	AVCodecContext *	avctx
stmnts	0:0	128:12	1	
decl	13:4	13:64	2	int	plane
water	13:13	0:0	2	,
decl	13:4	13:64	2	int	band_num
water	13:23	0:0	2	,
decl	13:4	13:64	2	int	hdr_size
water	13:33	0:0	2	,
decl	13:4	13:64	2	int	indx
water	13:39	0:0	2	,
decl	13:4	13:64	2	int	transform_id
water	13:53	0:0	2	,
decl	13:4	13:64	2	int	scan_indx
decl	14:4	14:9	2	int	i
water	16:4	0:0	2	plane
op	16:13	0:0	2	=
call	16:15	16:35	2	get_bits
arg	16:24	16:32	3	&ctx->gb
op	16:24	0:0	4	&
water	16:25	0:0	4	ctx
op	16:28	0:0	4	->
water	16:30	0:0	4	gb
arg	16:34	16:35	3	2
water	16:34	0:0	4	2
water	16:36	0:0	2	;
water	17:4	0:0	2	band_num
op	17:13	0:0	2	=
call	17:15	17:35	2	get_bits
arg	17:24	17:32	3	&ctx->gb
op	17:24	0:0	4	&
water	17:25	0:0	4	ctx
op	17:28	0:0	4	->
water	17:30	0:0	4	gb
arg	17:34	17:35	3	4
water	17:34	0:0	4	4
water	17:36	0:0	2	;
if	18:4	21:4	2	(band -> plane != plane || band -> band_num != band_num)
cond	18:8	18:50	3	band -> plane != plane || band -> band_num != band_num
water	18:8	0:0	4	band
op	18:12	0:0	4	->
water	18:14	0:0	4	plane
op	18:20	0:0	4	!=
water	18:23	0:0	4	plane
op	18:29	0:0	4	||
water	18:32	0:0	4	band
op	18:36	0:0	4	->
water	18:38	0:0	4	band_num
op	18:47	0:0	4	!=
water	18:50	0:0	4	band_num
stmts	18:60	21:4	3	
water	18:60	0:0	4	{
call	19:8	19:69	4	av_log
arg	19:15	19:20	5	avctx
water	19:15	0:0	6	avctx
arg	19:22	19:34	5	AV_LOG_ERROR
water	19:22	0:0	6	AV_LOG_ERROR
arg	19:36	19:69	5	"Invalid band header sequence!\n"
water	19:36	0:0	6	"Invalid band header sequence!\n"
water	19:70	0:0	4	;
return	20:8	20:34	4	AVERROR_INVALIDDATA
water	20:15	0:0	5	AVERROR_INVALIDDATA
water	21:4	0:0	4	}
water	23:4	0:0	2	band
op	23:8	0:0	2	->
water	23:10	0:0	2	is_empty
op	23:19	0:0	2	=
call	23:21	23:39	2	get_bits1
arg	23:31	23:39	3	&ctx->gb
op	23:31	0:0	4	&
water	23:32	0:0	4	ctx
op	23:35	0:0	4	->
water	23:37	0:0	4	gb
water	23:40	0:0	2	;
if	24:4	112:4	2	(! band -> is_empty)
cond	24:8	24:15	3	! band -> is_empty
op	24:8	0:0	4	!
water	24:9	0:0	4	band
op	24:13	0:0	4	->
water	24:15	0:0	4	is_empty
stmts	24:25	112:4	3	
water	24:25	0:0	4	{
water	25:8	0:0	4	hdr_size
op	25:17	0:0	4	=
call	25:19	25:37	4	get_bits1
arg	25:29	25:37	5	&ctx->gb
op	25:29	0:0	6	&
water	25:30	0:0	6	ctx
op	25:33	0:0	6	->
water	25:35	0:0	6	gb
water	25:39	0:0	4	?
call	25:41	25:62	4	get_bits
arg	25:50	25:58	5	&ctx->gb
op	25:50	0:0	6	&
water	25:51	0:0	6	ctx
op	25:54	0:0	6	->
water	25:56	0:0	6	gb
arg	25:60	25:62	5	16
water	25:60	0:0	6	16
water	25:64	0:0	4	:
water	25:66	0:0	4	4
water	25:67	0:0	4	;
water	27:8	0:0	4	band
op	27:12	0:0	4	->
water	27:14	0:0	4	is_halfpel
op	27:25	0:0	4	=
call	27:27	27:47	4	get_bits
arg	27:36	27:44	5	&ctx->gb
op	27:36	0:0	6	&
water	27:37	0:0	6	ctx
op	27:40	0:0	6	->
water	27:42	0:0	6	gb
arg	27:46	27:47	5	2
water	27:46	0:0	6	2
water	27:48	0:0	4	;
if	28:8	32:8	4	(band -> is_halfpel >= 2)
cond	28:12	28:32	5	band -> is_halfpel >= 2
water	28:12	0:0	6	band
op	28:16	0:0	6	->
water	28:18	0:0	6	is_halfpel
op	28:29	0:0	6	>=
water	28:32	0:0	6	2
stmts	28:35	32:8	5	
water	28:35	0:0	6	{
call	29:12	30:35	6	av_log
arg	29:19	29:24	7	avctx
water	29:19	0:0	8	avctx
arg	29:26	29:38	7	AV_LOG_ERROR
water	29:26	0:0	8	AV_LOG_ERROR
arg	29:40	29:82	7	"Invalid/unsupported mv resolution: %d!\n"
water	29:40	0:0	8	"Invalid/unsupported mv resolution: %d!\n"
arg	30:19	30:35	7	band->is_halfpel
water	30:19	0:0	8	band
op	30:23	0:0	8	->
water	30:25	0:0	8	is_halfpel
water	30:36	0:0	6	;
return	31:12	31:38	6	AVERROR_INVALIDDATA
water	31:19	0:0	7	AVERROR_INVALIDDATA
water	32:8	0:0	6	}
if	34:8	35:33	4	(! band -> is_halfpel)
cond	34:12	34:19	5	! band -> is_halfpel
op	34:12	0:0	6	!
water	34:13	0:0	6	band
op	34:17	0:0	6	->
water	34:19	0:0	6	is_halfpel
stmts	35:12	35:33	5	
water	35:12	0:0	6	ctx
op	35:15	0:0	6	->
water	35:17	0:0	6	uses_fullpel
op	35:30	0:0	6	=
water	35:32	0:0	6	1
water	35:33	0:0	6	;
water	38:8	0:0	4	band
op	38:12	0:0	4	->
water	38:14	0:0	4	checksum_present
op	38:31	0:0	4	=
call	38:33	38:51	4	get_bits1
arg	38:43	38:51	5	&ctx->gb
op	38:43	0:0	6	&
water	38:44	0:0	6	ctx
op	38:47	0:0	6	->
water	38:49	0:0	6	gb
water	38:52	0:0	4	;
if	39:8	40:51	4	(band -> checksum_present)
cond	39:12	39:18	5	band -> checksum_present
water	39:12	0:0	6	band
op	39:16	0:0	6	->
water	39:18	0:0	6	checksum_present
stmts	40:12	40:51	5	
water	40:12	0:0	6	band
op	40:16	0:0	6	->
water	40:18	0:0	6	checksum
op	40:27	0:0	6	=
call	40:29	40:50	6	get_bits
arg	40:38	40:46	7	&ctx->gb
op	40:38	0:0	8	&
water	40:39	0:0	8	ctx
op	40:42	0:0	8	->
water	40:44	0:0	8	gb
arg	40:48	40:50	7	16
water	40:48	0:0	8	16
water	40:51	0:0	6	;
water	42:8	0:0	4	indx
op	42:13	0:0	4	=
call	42:15	42:35	4	get_bits
arg	42:24	42:32	5	&ctx->gb
op	42:24	0:0	6	&
water	42:25	0:0	6	ctx
op	42:28	0:0	6	->
water	42:30	0:0	6	gb
arg	42:34	42:35	5	2
water	42:34	0:0	6	2
water	42:36	0:0	4	;
if	43:8	46:8	4	(indx == 3)
cond	43:12	43:20	5	indx == 3
water	43:12	0:0	6	indx
op	43:17	0:0	6	==
water	43:20	0:0	6	3
stmts	43:23	46:8	5	
water	43:23	0:0	6	{
call	44:12	44:63	6	av_log
arg	44:19	44:24	7	avctx
water	44:19	0:0	8	avctx
arg	44:26	44:38	7	AV_LOG_ERROR
water	44:26	0:0	8	AV_LOG_ERROR
arg	44:40	44:63	7	"Invalid block size!\n"
water	44:40	0:0	8	"Invalid block size!\n"
water	44:64	0:0	6	;
return	45:12	45:38	6	AVERROR_INVALIDDATA
water	45:19	0:0	7	AVERROR_INVALIDDATA
water	46:8	0:0	6	}
water	47:8	0:0	4	band
op	47:12	0:0	4	->
water	47:14	0:0	4	mb_size
op	47:23	0:0	4	=
water	47:25	0:0	4	16
op	47:28	0:0	4	>>
water	47:31	0:0	4	indx
water	47:35	0:0	4	;
water	48:8	0:0	4	band
op	48:12	0:0	4	->
water	48:14	0:0	4	blk_size
op	48:23	0:0	4	=
water	48:25	0:0	4	8
op	48:27	0:0	4	>>
water	48:30	0:0	4	(
water	48:31	0:0	4	indx
op	48:36	0:0	4	>>
water	48:39	0:0	4	1
water	48:40	0:0	4	)
water	48:41	0:0	4	;
water	50:8	0:0	4	band
op	50:12	0:0	4	->
water	50:14	0:0	4	inherit_mv
op	50:29	0:0	4	=
call	50:31	50:49	4	get_bits1
arg	50:41	50:49	5	&ctx->gb
op	50:41	0:0	6	&
water	50:42	0:0	6	ctx
op	50:45	0:0	6	->
water	50:47	0:0	6	gb
water	50:50	0:0	4	;
water	51:8	0:0	4	band
op	51:12	0:0	4	->
water	51:14	0:0	4	inherit_qdelta
op	51:29	0:0	4	=
call	51:31	51:49	4	get_bits1
arg	51:41	51:49	5	&ctx->gb
op	51:41	0:0	6	&
water	51:42	0:0	6	ctx
op	51:45	0:0	6	->
water	51:47	0:0	6	gb
water	51:50	0:0	4	;
water	53:8	0:0	4	band
op	53:12	0:0	4	->
water	53:14	0:0	4	glob_quant
op	53:25	0:0	4	=
call	53:27	53:47	4	get_bits
arg	53:36	53:44	5	&ctx->gb
op	53:36	0:0	6	&
water	53:37	0:0	6	ctx
op	53:40	0:0	6	->
water	53:42	0:0	6	gb
arg	53:46	53:47	5	5
water	53:46	0:0	6	5
water	53:48	0:0	4	;
if	55:8	88:8	4	(!get_bits1 (& ctx -> gb ) || ctx -> frame_type == FRAMETYPE_INTRA)
cond	55:12	55:55	5	!get_bits1 (& ctx -> gb ) || ctx -> frame_type == FRAMETYPE_INTRA
op	55:12	0:0	6	!
call	55:13	55:31	6	get_bits1
arg	55:23	55:31	7	&ctx->gb
op	55:23	0:0	8	&
water	55:24	0:0	8	ctx
op	55:27	0:0	8	->
water	55:29	0:0	8	gb
op	55:33	0:0	6	||
water	55:36	0:0	6	ctx
op	55:39	0:0	6	->
water	55:41	0:0	6	frame_type
op	55:52	0:0	6	==
water	55:55	0:0	6	FRAMETYPE_INTRA
stmts	55:72	88:8	5	
water	55:72	0:0	6	{
water	56:12	0:0	6	transform_id
op	56:25	0:0	6	=
call	56:27	56:47	6	get_bits
arg	56:36	56:44	7	&ctx->gb
op	56:36	0:0	8	&
water	56:37	0:0	8	ctx
op	56:40	0:0	8	->
water	56:42	0:0	8	gb
arg	56:46	56:47	7	5
water	56:46	0:0	8	5
water	56:48	0:0	6	;
if	57:12	60:12	6	(! transforms [ transform_id ] . inv_trans)
cond	57:16	57:42	7	! transforms [ transform_id ] . inv_trans
op	57:16	0:0	8	!
water	57:17	0:0	8	transforms
op	57:27	0:0	8	[
water	57:28	0:0	8	transform_id
op	57:40	0:0	8	]
op	57:41	0:0	8	.
water	57:42	0:0	8	inv_trans
stmts	57:53	60:12	7	
water	57:53	0:0	8	{
call	58:16	58:91	8	av_log_ask_for_sample
arg	58:38	58:43	9	avctx
water	58:38	0:0	10	avctx
arg	58:45	58:77	9	"Unimplemented transform: %d!\n"
water	58:45	0:0	10	"Unimplemented transform: %d!\n"
arg	58:79	58:91	9	transform_id
water	58:79	0:0	10	transform_id
water	58:92	0:0	8	;
return	59:16	59:43	8	AVERROR_PATCHWELCOME
water	59:23	0:0	9	AVERROR_PATCHWELCOME
water	60:12	0:0	8	}
if	61:12	65:12	6	(( transform_id >= 7 && transform_id <= 9 ) || transform_id == 17)
cond	61:16	62:33	7	( transform_id >= 7 && transform_id <= 9 ) || transform_id == 17
water	61:16	0:0	8	(
water	61:17	0:0	8	transform_id
op	61:30	0:0	8	>=
water	61:33	0:0	8	7
op	61:35	0:0	8	&&
water	61:38	0:0	8	transform_id
op	61:51	0:0	8	<=
water	61:54	0:0	8	9
water	61:55	0:0	8	)
op	61:57	0:0	8	||
water	62:17	0:0	8	transform_id
op	62:30	0:0	8	==
water	62:33	0:0	8	17
stmts	62:37	65:12	7	
water	62:37	0:0	8	{
call	63:16	63:81	8	av_log_ask_for_sample
arg	63:38	63:43	9	avctx
water	63:38	0:0	10	avctx
arg	63:45	63:81	9	"DCT transform not supported yet!\n"
water	63:45	0:0	10	"DCT transform not supported yet!\n"
water	63:82	0:0	8	;
return	64:16	64:43	8	AVERROR_PATCHWELCOME
water	64:23	0:0	9	AVERROR_PATCHWELCOME
water	65:12	0:0	8	}
if	68:12	69:34	6	(( transform_id >= 0 && transform_id <= 2 ) || transform_id == 10)
cond	68:16	68:76	7	( transform_id >= 0 && transform_id <= 2 ) || transform_id == 10
water	68:16	0:0	8	(
water	68:17	0:0	8	transform_id
op	68:30	0:0	8	>=
water	68:33	0:0	8	0
op	68:35	0:0	8	&&
water	68:38	0:0	8	transform_id
op	68:51	0:0	8	<=
water	68:54	0:0	8	2
water	68:55	0:0	8	)
op	68:57	0:0	8	||
water	68:60	0:0	8	transform_id
op	68:73	0:0	8	==
water	68:76	0:0	8	10
stmts	69:16	69:34	7	
water	69:16	0:0	8	ctx
op	69:19	0:0	8	->
water	69:21	0:0	8	uses_haar
op	69:31	0:0	8	=
water	69:33	0:0	8	1
water	69:34	0:0	8	;
water	72:12	0:0	6	band
op	72:16	0:0	6	->
water	72:18	0:0	6	inv_transform
op	72:32	0:0	6	=
water	72:34	0:0	6	transforms
op	72:44	0:0	6	[
water	72:45	0:0	6	transform_id
op	72:57	0:0	6	]
op	72:58	0:0	6	.
water	72:59	0:0	6	inv_trans
water	72:68	0:0	6	;
water	73:12	0:0	6	band
op	73:16	0:0	6	->
water	73:18	0:0	6	dc_transform
op	73:32	0:0	6	=
water	73:34	0:0	6	transforms
op	73:44	0:0	6	[
water	73:45	0:0	6	transform_id
op	73:57	0:0	6	]
op	73:58	0:0	6	.
water	73:59	0:0	6	dc_trans
water	73:67	0:0	6	;
water	74:12	0:0	6	band
op	74:16	0:0	6	->
water	74:18	0:0	6	is_2d_trans
op	74:32	0:0	6	=
water	74:34	0:0	6	transforms
op	74:44	0:0	6	[
water	74:45	0:0	6	transform_id
op	74:57	0:0	6	]
op	74:58	0:0	6	.
water	74:59	0:0	6	is_2d_trans
water	74:70	0:0	6	;
water	76:12	0:0	6	scan_indx
op	76:22	0:0	6	=
call	76:24	76:44	6	get_bits
arg	76:33	76:41	7	&ctx->gb
op	76:33	0:0	8	&
water	76:34	0:0	8	ctx
op	76:37	0:0	8	->
water	76:39	0:0	8	gb
arg	76:43	76:44	7	4
water	76:43	0:0	8	4
water	76:45	0:0	6	;
if	77:12	80:12	6	(scan_indx == 15)
cond	77:16	77:29	7	scan_indx == 15
water	77:16	0:0	8	scan_indx
op	77:26	0:0	8	==
water	77:29	0:0	8	15
stmts	77:33	80:12	7	
water	77:33	0:0	8	{
call	78:16	78:80	8	av_log
arg	78:23	78:28	9	avctx
water	78:23	0:0	10	avctx
arg	78:30	78:42	9	AV_LOG_ERROR
water	78:30	0:0	10	AV_LOG_ERROR
arg	78:44	78:80	9	"Custom scan pattern encountered!\n"
water	78:44	0:0	10	"Custom scan pattern encountered!\n"
water	78:81	0:0	8	;
return	79:16	79:42	8	AVERROR_INVALIDDATA
water	79:23	0:0	9	AVERROR_INVALIDDATA
water	80:12	0:0	8	}
water	81:12	0:0	6	band
op	81:16	0:0	6	->
water	81:18	0:0	6	scan
op	81:23	0:0	6	=
water	81:25	0:0	6	scan_index_to_tab
op	81:42	0:0	6	[
water	81:43	0:0	6	scan_indx
op	81:52	0:0	6	]
water	81:53	0:0	6	;
water	83:12	0:0	6	band
op	83:16	0:0	6	->
water	83:18	0:0	6	quant_mat
op	83:28	0:0	6	=
call	83:30	83:50	6	get_bits
arg	83:39	83:47	7	&ctx->gb
op	83:39	0:0	8	&
water	83:40	0:0	8	ctx
op	83:43	0:0	8	->
water	83:45	0:0	8	gb
arg	83:49	83:50	7	5
water	83:49	0:0	8	5
water	83:51	0:0	6	;
if	84:12	87:12	6	(band -> quant_mat == 31)
cond	84:16	84:35	7	band -> quant_mat == 31
water	84:16	0:0	8	band
op	84:20	0:0	8	->
water	84:22	0:0	8	quant_mat
op	84:32	0:0	8	==
water	84:35	0:0	8	31
stmts	84:39	87:12	7	
water	84:39	0:0	8	{
call	85:16	85:80	8	av_log
arg	85:23	85:28	9	avctx
water	85:23	0:0	10	avctx
arg	85:30	85:42	9	AV_LOG_ERROR
water	85:30	0:0	10	AV_LOG_ERROR
arg	85:44	85:80	9	"Custom quant matrix encountered!\n"
water	85:44	0:0	10	"Custom quant matrix encountered!\n"
water	85:81	0:0	8	;
return	86:16	86:42	8	AVERROR_INVALIDDATA
water	86:23	0:0	9	AVERROR_INVALIDDATA
water	87:12	0:0	8	}
water	88:8	0:0	6	}
if	91:8	93:38	4	(ff_ivi_dec_huff_desc (& ctx -> gb ,get_bits1 (& ctx -> gb ) ,IVI_BLK_HUFF ,& band -> blk_vlc ,avctx ))
cond	91:12	92:54	5	ff_ivi_dec_huff_desc (& ctx -> gb ,get_bits1 (& ctx -> gb ) ,IVI_BLK_HUFF ,& band -> blk_vlc ,avctx )
call	91:12	92:54	6	ff_ivi_dec_huff_desc
arg	91:33	91:41	7	&ctx->gb
op	91:33	0:0	8	&
water	91:34	0:0	8	ctx
op	91:37	0:0	8	->
water	91:39	0:0	8	gb
arg	91:43	91:62	7	get_bits1(&ctx->gb)
call	91:43	91:61	8	get_bits1
arg	91:53	91:61	9	&ctx->gb
op	91:53	0:0	10	&
water	91:54	0:0	10	ctx
op	91:57	0:0	10	->
water	91:59	0:0	10	gb
arg	91:64	91:76	7	IVI_BLK_HUFF
water	91:64	0:0	8	IVI_BLK_HUFF
arg	92:33	92:47	7	&band->blk_vlc
op	92:33	0:0	8	&
water	92:34	0:0	8	band
op	92:38	0:0	8	->
water	92:40	0:0	8	blk_vlc
arg	92:49	92:54	7	avctx
water	92:49	0:0	8	avctx
stmts	93:12	93:38	5	
return	93:12	93:38	6	AVERROR_INVALIDDATA
water	93:19	0:0	7	AVERROR_INVALIDDATA
water	96:8	0:0	4	band
op	96:12	0:0	4	->
water	96:14	0:0	4	rvmap_sel
op	96:24	0:0	4	=
call	96:26	96:44	4	get_bits1
arg	96:36	96:44	5	&ctx->gb
op	96:36	0:0	6	&
water	96:37	0:0	6	ctx
op	96:40	0:0	6	->
water	96:42	0:0	6	gb
water	96:46	0:0	4	?
call	96:48	96:68	4	get_bits
arg	96:57	96:65	5	&ctx->gb
op	96:57	0:0	6	&
water	96:58	0:0	6	ctx
op	96:61	0:0	6	->
water	96:63	0:0	6	gb
arg	96:67	96:68	5	3
water	96:67	0:0	6	3
water	96:70	0:0	4	:
water	96:72	0:0	4	8
water	96:73	0:0	4	;
water	99:8	0:0	4	band
op	99:12	0:0	4	->
water	99:14	0:0	4	num_corr
op	99:23	0:0	4	=
water	99:25	0:0	4	0
water	99:26	0:0	4	;
if	100:8	111:8	4	(get_bits1 (& ctx -> gb ))
cond	100:12	100:30	5	get_bits1 (& ctx -> gb )
call	100:12	100:30	6	get_bits1
arg	100:22	100:30	7	&ctx->gb
op	100:22	0:0	8	&
water	100:23	0:0	8	ctx
op	100:26	0:0	8	->
water	100:28	0:0	8	gb
stmts	100:33	111:8	5	
water	100:33	0:0	6	{
water	101:12	0:0	6	band
op	101:16	0:0	6	->
water	101:18	0:0	6	num_corr
op	101:27	0:0	6	=
call	101:29	101:49	6	get_bits
arg	101:38	101:46	7	&ctx->gb
op	101:38	0:0	8	&
water	101:39	0:0	8	ctx
op	101:42	0:0	8	->
water	101:44	0:0	8	gb
arg	101:48	101:49	7	8
water	101:48	0:0	8	8
water	101:50	0:0	6	;
if	102:12	106:12	6	(band -> num_corr > 61)
cond	102:16	102:33	7	band -> num_corr > 61
water	102:16	0:0	8	band
op	102:20	0:0	8	->
water	102:22	0:0	8	num_corr
op	102:31	0:0	8	>
water	102:33	0:0	8	61
stmts	102:37	106:12	7	
water	102:37	0:0	8	{
call	103:16	104:37	8	av_log
arg	103:23	103:28	9	avctx
water	103:23	0:0	10	avctx
arg	103:30	103:42	9	AV_LOG_ERROR
water	103:30	0:0	10	AV_LOG_ERROR
arg	103:44	103:72	9	"Too many corrections: %d\n"
water	103:44	0:0	10	"Too many corrections: %d\n"
arg	104:23	104:37	9	band->num_corr
water	104:23	0:0	10	band
op	104:27	0:0	10	->
water	104:29	0:0	10	num_corr
water	104:38	0:0	8	;
return	105:16	105:42	8	AVERROR_INVALIDDATA
water	105:23	0:0	9	AVERROR_INVALIDDATA
water	106:12	0:0	8	}
for	109:12	110:53	6	(i = 0 ;i < band -> num_corr * 2;i ++)
forinit	109:17	109:22	7	i = 0 ;
water	109:17	0:0	8	i
op	109:19	0:0	8	=
water	109:21	0:0	8	0
water	109:22	0:0	8	;
cond	109:24	109:45	7	i < band -> num_corr * 2
water	109:24	0:0	8	i
op	109:26	0:0	8	<
water	109:28	0:0	8	band
op	109:32	0:0	8	->
water	109:34	0:0	8	num_corr
op	109:43	0:0	8	*
water	109:45	0:0	8	2
forexpr	109:48	109:49	7	i ++
water	109:48	0:0	8	i
op	109:49	0:0	8	++
stmts	110:16	110:53	7	
water	110:16	0:0	8	band
op	110:20	0:0	8	->
water	110:22	0:0	8	corr
op	110:26	0:0	8	[
water	110:27	0:0	8	i
op	110:28	0:0	8	]
op	110:30	0:0	8	=
call	110:32	110:52	8	get_bits
arg	110:41	110:49	9	&ctx->gb
op	110:41	0:0	10	&
water	110:42	0:0	10	ctx
op	110:45	0:0	10	->
water	110:47	0:0	10	gb
arg	110:51	110:52	9	8
water	110:51	0:0	10	8
water	110:53	0:0	8	;
water	111:8	0:0	6	}
water	112:4	0:0	4	}
if	114:4	117:4	2	(band -> blk_size == 8)
cond	114:8	114:26	3	band -> blk_size == 8
water	114:8	0:0	4	band
op	114:12	0:0	4	->
water	114:14	0:0	4	blk_size
op	114:23	0:0	4	==
water	114:26	0:0	4	8
stmts	114:29	117:4	3	
water	114:29	0:0	4	{
water	115:8	0:0	4	band
op	115:12	0:0	4	->
water	115:14	0:0	4	intra_base
op	115:25	0:0	4	=
op	115:27	0:0	4	&
water	115:28	0:0	4	ivi4_quant_8x8_intra
op	115:48	0:0	4	[
water	115:49	0:0	4	quant_index_to_tab
op	115:67	0:0	4	[
water	115:68	0:0	4	band
op	115:72	0:0	4	->
water	115:74	0:0	4	quant_mat
op	115:83	0:0	4	]
op	115:84	0:0	4	]
op	115:85	0:0	4	[
water	115:86	0:0	4	0
op	115:87	0:0	4	]
water	115:88	0:0	4	;
water	116:8	0:0	4	band
op	116:12	0:0	4	->
water	116:14	0:0	4	inter_base
op	116:25	0:0	4	=
op	116:27	0:0	4	&
water	116:28	0:0	4	ivi4_quant_8x8_inter
op	116:48	0:0	4	[
water	116:49	0:0	4	quant_index_to_tab
op	116:67	0:0	4	[
water	116:68	0:0	4	band
op	116:72	0:0	4	->
water	116:74	0:0	4	quant_mat
op	116:83	0:0	4	]
op	116:84	0:0	4	]
op	116:85	0:0	4	[
water	116:86	0:0	4	0
op	116:87	0:0	4	]
water	116:88	0:0	4	;
water	117:4	0:0	4	}
else	117:6	120:4	2
stmts	117:11	120:4	3	
water	117:11	0:0	4	{
water	118:8	0:0	4	band
op	118:12	0:0	4	->
water	118:14	0:0	4	intra_base
op	118:25	0:0	4	=
op	118:27	0:0	4	&
water	118:28	0:0	4	ivi4_quant_4x4_intra
op	118:48	0:0	4	[
water	118:49	0:0	4	quant_index_to_tab
op	118:67	0:0	4	[
water	118:68	0:0	4	band
op	118:72	0:0	4	->
water	118:74	0:0	4	quant_mat
op	118:83	0:0	4	]
op	118:84	0:0	4	]
op	118:85	0:0	4	[
water	118:86	0:0	4	0
op	118:87	0:0	4	]
water	118:88	0:0	4	;
water	119:8	0:0	4	band
op	119:12	0:0	4	->
water	119:14	0:0	4	inter_base
op	119:25	0:0	4	=
op	119:27	0:0	4	&
water	119:28	0:0	4	ivi4_quant_4x4_inter
op	119:48	0:0	4	[
water	119:49	0:0	4	quant_index_to_tab
op	119:67	0:0	4	[
water	119:68	0:0	4	band
op	119:72	0:0	4	->
water	119:74	0:0	4	quant_mat
op	119:83	0:0	4	]
op	119:84	0:0	4	]
op	119:85	0:0	4	[
water	119:86	0:0	4	0
op	119:87	0:0	4	]
water	119:88	0:0	4	;
water	120:4	0:0	4	}
water	123:4	0:0	2	band
op	123:8	0:0	2	->
water	123:10	0:0	2	intra_scale
op	123:22	0:0	2	=
water	123:24	0:0	2	NULL
water	123:28	0:0	2	;
water	124:4	0:0	2	band
op	124:8	0:0	2	->
water	124:10	0:0	2	inter_scale
op	124:22	0:0	2	=
water	124:24	0:0	2	NULL
water	124:28	0:0	2	;
call	126:4	126:27	2	align_get_bits
arg	126:19	126:27	3	&ctx->gb
op	126:19	0:0	4	&
water	126:20	0:0	4	ctx
op	126:23	0:0	4	->
water	126:25	0:0	4	gb
water	126:28	0:0	2	;
return	128:4	128:12	2	0
water	128:11	0:0	3	0
