func	2:0	276:0	0	static int	iff_read_header
params	2:26	0:0	1	
param	2:27	2:45	2	AVFormatContext *	s
stmnts	0:0	275:12	1	
decl	4:4	4:39	2	IffDemuxContext	*iff
op	4:25	0:0	2	=
water	4:27	0:0	2	s
op	4:28	0:0	2	->
water	4:30	0:0	2	priv_data
decl	5:4	5:27	2	AVIOContext	*pb
op	5:20	0:0	2	=
water	5:22	0:0	2	s
op	5:23	0:0	2	->
water	5:25	0:0	2	pb
decl	6:4	6:16	2	AVStream	*st
decl	7:4	7:16	2	uint8_t	*buf
decl	8:4	8:32	2	uint32_t	chunk_id
water	8:21	0:0	2	,
decl	8:4	8:32	2	uint32_t	data_size
decl	9:4	9:37	2	uint32_t	screenmode
op	9:24	0:0	2	=
water	9:26	0:0	2	0
water	9:27	0:0	2	,
decl	9:4	9:37	2	uint32_t	num
water	9:32	0:0	2	,
decl	9:4	9:37	2	uint32_t	den
water	10:4	0:0	2	unsigned
water	10:13	0:0	2	transparency
op	10:26	0:0	2	=
water	10:28	0:0	2	0
water	10:29	0:0	2	;
water	11:4	0:0	2	unsigned
water	11:13	0:0	2	masking
op	11:21	0:0	2	=
water	11:23	0:0	2	0
water	11:24	0:0	2	;
decl	12:4	12:19	2	uint8_t	fmt[16]
decl	13:4	13:16	2	int	fmt_size
water	15:4	0:0	2	st
op	15:7	0:0	2	=
call	15:9	15:36	2	avformat_new_stream
arg	15:29	15:30	3	s
water	15:29	0:0	4	s
arg	15:32	15:36	3	NULL
water	15:32	0:0	4	NULL
water	15:37	0:0	2	;
if	16:4	17:30	2	(! st)
cond	16:8	16:9	3	! st
op	16:8	0:0	4	!
water	16:9	0:0	4	st
stmts	17:8	17:30	3	
return	17:8	17:30	4	AVERROR(ENOMEM)
call	17:15	17:29	5	AVERROR
arg	17:23	17:29	6	ENOMEM
water	17:23	0:0	7	ENOMEM
water	19:4	0:0	2	st
op	19:6	0:0	2	->
water	19:8	0:0	2	codec
op	19:13	0:0	2	->
water	19:15	0:0	2	channels
op	19:24	0:0	2	=
water	19:26	0:0	2	1
water	19:27	0:0	2	;
water	20:4	0:0	2	st
op	20:6	0:0	2	->
water	20:8	0:0	2	codec
op	20:13	0:0	2	->
water	20:15	0:0	2	channel_layout
op	20:30	0:0	2	=
water	20:32	0:0	2	AV_CH_LAYOUT_MONO
water	20:49	0:0	2	;
call	21:4	21:19	2	avio_skip
arg	21:14	21:16	3	pb
water	21:14	0:0	4	pb
arg	21:18	21:19	3	8
water	21:18	0:0	4	8
water	21:20	0:0	2	;
water	23:4	0:0	2	st
op	23:6	0:0	2	->
water	23:8	0:0	2	codec
op	23:13	0:0	2	->
water	23:15	0:0	2	codec_tag
op	23:25	0:0	2	=
call	23:27	23:39	2	avio_rl32
arg	23:37	23:39	3	pb
water	23:37	0:0	4	pb
water	23:40	0:0	2	;
water	24:4	0:0	2	iff
op	24:7	0:0	2	->
water	24:9	0:0	2	bitmap_compression
op	24:28	0:0	2	=
op	24:30	0:0	2	-
water	24:31	0:0	2	1
water	24:32	0:0	2	;
water	25:4	0:0	2	iff
op	25:7	0:0	2	->
water	25:9	0:0	2	svx8_compression
op	25:26	0:0	2	=
op	25:28	0:0	2	-
water	25:29	0:0	2	1
water	25:30	0:0	2	;
water	26:4	0:0	2	iff
op	26:7	0:0	2	->
water	26:9	0:0	2	maud_bits
op	26:19	0:0	2	=
op	26:21	0:0	2	-
water	26:22	0:0	2	1
water	26:23	0:0	2	;
water	27:4	0:0	2	iff
op	27:7	0:0	2	->
water	27:9	0:0	2	maud_compression
op	27:26	0:0	2	=
op	27:28	0:0	2	-
water	27:29	0:0	2	1
water	27:30	0:0	2	;
while	29:4	192:4	2	(!url_feof (pb ))
cond	29:10	29:22	3	!url_feof (pb )
op	29:10	0:0	4	!
call	29:11	29:22	4	url_feof
arg	29:20	29:22	5	pb
water	29:20	0:0	6	pb
stmts	29:25	192:4	3	
water	29:25	0:0	4	{
decl	30:8	30:25	4	uint64_t	orig_pos
decl	31:8	31:15	4	int	res
decl	32:8	32:39	4	const char	*metadata_tag
op	32:33	0:0	4	=
water	32:35	0:0	4	NULL
water	33:8	0:0	4	chunk_id
op	33:17	0:0	4	=
call	33:19	33:31	4	avio_rl32
arg	33:29	33:31	5	pb
water	33:29	0:0	6	pb
water	33:32	0:0	4	;
water	34:8	0:0	4	data_size
op	34:18	0:0	4	=
call	34:20	34:32	4	avio_rb32
arg	34:30	34:32	5	pb
water	34:30	0:0	6	pb
water	34:33	0:0	4	;
water	35:8	0:0	4	orig_pos
op	35:17	0:0	4	=
call	35:19	35:31	4	avio_tell
arg	35:29	35:31	5	pb
water	35:29	0:0	6	pb
water	35:32	0:0	4	;
switch	37:8	183:8	4	(chunk_id)
cond	37:15	37:15	5	chunk_id
water	37:15	0:0	6	chunk_id
stmts	37:25	183:8	5	
water	37:25	0:0	6	{
label	38:8	38:20	6	case ID_VHDR :
water	39:12	0:0	6	st
op	39:14	0:0	6	->
water	39:16	0:0	6	codec
op	39:21	0:0	6	->
water	39:23	0:0	6	codec_type
op	39:34	0:0	6	=
water	39:36	0:0	6	AVMEDIA_TYPE_AUDIO
water	39:54	0:0	6	;
if	41:12	42:42	6	(data_size < 14)
cond	41:16	41:28	7	data_size < 14
water	41:16	0:0	8	data_size
op	41:26	0:0	8	<
water	41:28	0:0	8	14
stmts	42:16	42:42	7	
return	42:16	42:42	8	AVERROR_INVALIDDATA
water	42:23	0:0	9	AVERROR_INVALIDDATA
call	43:12	43:28	6	avio_skip
arg	43:22	43:24	7	pb
water	43:22	0:0	8	pb
arg	43:26	43:28	7	12
water	43:26	0:0	8	12
water	43:29	0:0	6	;
water	44:12	0:0	6	st
op	44:14	0:0	6	->
water	44:16	0:0	6	codec
op	44:21	0:0	6	->
water	44:23	0:0	6	sample_rate
op	44:35	0:0	6	=
call	44:37	44:49	6	avio_rb16
arg	44:47	44:49	7	pb
water	44:47	0:0	8	pb
water	44:50	0:0	6	;
if	45:12	48:12	6	(data_size >= 16)
cond	45:16	45:29	7	data_size >= 16
water	45:16	0:0	8	data_size
op	45:26	0:0	8	>=
water	45:29	0:0	8	16
stmts	45:33	48:12	7	
water	45:33	0:0	8	{
call	46:16	46:31	8	avio_skip
arg	46:26	46:28	9	pb
water	46:26	0:0	10	pb
arg	46:30	46:31	9	1
water	46:30	0:0	10	1
water	46:32	0:0	8	;
water	47:16	0:0	8	iff
op	47:19	0:0	8	->
water	47:21	0:0	8	svx8_compression
op	47:38	0:0	8	=
call	47:40	47:50	8	avio_r8
arg	47:48	47:50	9	pb
water	47:48	0:0	10	pb
water	47:51	0:0	8	;
water	48:12	0:0	8	}
break	49:12	49:17	6	
label	51:8	51:20	6	case ID_MHDR :
water	52:12	0:0	6	st
op	52:14	0:0	6	->
water	52:16	0:0	6	codec
op	52:21	0:0	6	->
water	52:23	0:0	6	codec_type
op	52:34	0:0	6	=
water	52:36	0:0	6	AVMEDIA_TYPE_AUDIO
water	52:54	0:0	6	;
if	54:12	55:42	6	(data_size < 32)
cond	54:16	54:28	7	data_size < 32
water	54:16	0:0	8	data_size
op	54:26	0:0	8	<
water	54:28	0:0	8	32
stmts	55:16	55:42	7	
return	55:16	55:42	8	AVERROR_INVALIDDATA
water	55:23	0:0	9	AVERROR_INVALIDDATA
call	56:12	56:27	6	avio_skip
arg	56:22	56:24	7	pb
water	56:22	0:0	8	pb
arg	56:26	56:27	7	4
water	56:26	0:0	8	4
water	56:28	0:0	6	;
water	57:12	0:0	6	iff
op	57:15	0:0	6	->
water	57:17	0:0	6	maud_bits
op	57:27	0:0	6	=
call	57:29	57:41	6	avio_rb16
arg	57:39	57:41	7	pb
water	57:39	0:0	8	pb
water	57:42	0:0	6	;
call	58:12	58:27	6	avio_skip
arg	58:22	58:24	7	pb
water	58:22	0:0	8	pb
arg	58:26	58:27	7	2
water	58:26	0:0	8	2
water	58:28	0:0	6	;
water	59:12	0:0	6	num
op	59:16	0:0	6	=
call	59:18	59:30	6	avio_rb32
arg	59:28	59:30	7	pb
water	59:28	0:0	8	pb
water	59:31	0:0	6	;
water	60:12	0:0	6	den
op	60:16	0:0	6	=
call	60:18	60:30	6	avio_rb16
arg	60:28	60:30	7	pb
water	60:28	0:0	8	pb
water	60:31	0:0	6	;
if	61:12	62:42	6	(! den)
cond	61:16	61:17	7	! den
op	61:16	0:0	8	!
water	61:17	0:0	8	den
stmts	62:16	62:42	7	
return	62:16	62:42	8	AVERROR_INVALIDDATA
water	62:23	0:0	9	AVERROR_INVALIDDATA
call	63:12	63:27	6	avio_skip
arg	63:22	63:24	7	pb
water	63:22	0:0	8	pb
arg	63:26	63:27	7	2
water	63:26	0:0	8	2
water	63:28	0:0	6	;
water	64:12	0:0	6	st
op	64:14	0:0	6	->
water	64:16	0:0	6	codec
op	64:21	0:0	6	->
water	64:23	0:0	6	sample_rate
op	64:35	0:0	6	=
water	64:37	0:0	6	num
op	64:41	0:0	6	/
water	64:43	0:0	6	den
water	64:46	0:0	6	;
water	65:12	0:0	6	st
op	65:14	0:0	6	->
water	65:16	0:0	6	codec
op	65:21	0:0	6	->
water	65:23	0:0	6	channels
op	65:32	0:0	6	=
call	65:34	65:46	6	avio_rb16
arg	65:44	65:46	7	pb
water	65:44	0:0	8	pb
water	65:47	0:0	6	;
water	66:12	0:0	6	iff
op	66:15	0:0	6	->
water	66:17	0:0	6	maud_compression
op	66:34	0:0	6	=
call	66:36	66:48	6	avio_rb16
arg	66:46	66:48	7	pb
water	66:46	0:0	8	pb
water	66:49	0:0	6	;
if	67:12	68:61	6	(st -> codec -> channels == 1)
cond	67:16	67:39	7	st -> codec -> channels == 1
water	67:16	0:0	8	st
op	67:18	0:0	8	->
water	67:20	0:0	8	codec
op	67:25	0:0	8	->
water	67:27	0:0	8	channels
op	67:36	0:0	8	==
water	67:39	0:0	8	1
stmts	68:16	68:61	7	
water	68:16	0:0	8	st
op	68:18	0:0	8	->
water	68:20	0:0	8	codec
op	68:25	0:0	8	->
water	68:27	0:0	8	channel_layout
op	68:42	0:0	8	=
water	68:44	0:0	8	AV_CH_LAYOUT_MONO
water	68:61	0:0	8	;
else	69:12	70:63	6
stmts	69:17	70:63	7	
if	69:17	70:63	8	(st -> codec -> channels == 2)
cond	69:21	69:44	9	st -> codec -> channels == 2
water	69:21	0:0	10	st
op	69:23	0:0	10	->
water	69:25	0:0	10	codec
op	69:30	0:0	10	->
water	69:32	0:0	10	channels
op	69:41	0:0	10	==
water	69:44	0:0	10	2
stmts	70:16	70:63	9	
water	70:16	0:0	10	st
op	70:18	0:0	10	->
water	70:20	0:0	10	codec
op	70:25	0:0	10	->
water	70:27	0:0	10	channel_layout
op	70:42	0:0	10	=
water	70:44	0:0	10	AV_CH_LAYOUT_STEREO
water	70:63	0:0	10	;
break	71:12	71:17	6	
label	73:8	73:20	6	case ID_ABIT :
label	74:8	74:20	6	case ID_BODY :
label	75:8	75:20	6	case ID_DBOD :
label	76:8	76:20	6	case ID_MDAT :
water	77:12	0:0	6	iff
op	77:15	0:0	6	->
water	77:17	0:0	6	body_pos
op	77:26	0:0	6	=
call	77:28	77:40	6	avio_tell
arg	77:38	77:40	7	pb
water	77:38	0:0	8	pb
water	77:41	0:0	6	;
water	78:12	0:0	6	iff
op	78:15	0:0	6	->
water	78:17	0:0	6	body_size
op	78:27	0:0	6	=
water	78:29	0:0	6	data_size
water	78:38	0:0	6	;
break	79:12	79:17	6	
label	81:8	81:20	6	case ID_CHAN :
if	82:12	83:42	6	(data_size < 4)
cond	82:16	82:28	7	data_size < 4
water	82:16	0:0	8	data_size
op	82:26	0:0	8	<
water	82:28	0:0	8	4
stmts	83:16	83:42	7	
return	83:16	83:42	8	AVERROR_INVALIDDATA
water	83:23	0:0	9	AVERROR_INVALIDDATA
if	84:12	87:12	6	(avio_rb32 (pb ) < 6)
cond	84:16	84:32	7	avio_rb32 (pb ) < 6
call	84:16	84:28	8	avio_rb32
arg	84:26	84:28	9	pb
water	84:26	0:0	10	pb
op	84:30	0:0	8	<
water	84:32	0:0	8	6
stmts	84:35	87:12	7	
water	84:35	0:0	8	{
water	85:16	0:0	8	st
op	85:18	0:0	8	->
water	85:20	0:0	8	codec
op	85:25	0:0	8	->
water	85:27	0:0	8	channels
op	85:42	0:0	8	=
water	85:44	0:0	8	1
water	85:45	0:0	8	;
water	86:16	0:0	8	st
op	86:18	0:0	8	->
water	86:20	0:0	8	codec
op	86:25	0:0	8	->
water	86:27	0:0	8	channel_layout
op	86:42	0:0	8	=
water	86:44	0:0	8	AV_CH_LAYOUT_MONO
water	86:61	0:0	8	;
water	87:12	0:0	8	}
else	87:14	90:12	6
stmts	87:19	90:12	7	
water	87:19	0:0	8	{
water	88:16	0:0	8	st
op	88:18	0:0	8	->
water	88:20	0:0	8	codec
op	88:25	0:0	8	->
water	88:27	0:0	8	channels
op	88:42	0:0	8	=
water	88:44	0:0	8	2
water	88:45	0:0	8	;
water	89:16	0:0	8	st
op	89:18	0:0	8	->
water	89:20	0:0	8	codec
op	89:25	0:0	8	->
water	89:27	0:0	8	channel_layout
op	89:42	0:0	8	=
water	89:44	0:0	8	AV_CH_LAYOUT_STEREO
water	89:63	0:0	8	;
water	90:12	0:0	8	}
break	91:12	91:17	6	
label	93:8	93:20	6	case ID_CAMG :
if	94:12	95:42	6	(data_size < 4)
cond	94:16	94:28	7	data_size < 4
water	94:16	0:0	8	data_size
op	94:26	0:0	8	<
water	94:28	0:0	8	4
stmts	95:16	95:42	7	
return	95:16	95:42	8	AVERROR_INVALIDDATA
water	95:23	0:0	9	AVERROR_INVALIDDATA
water	96:12	0:0	6	screenmode
op	96:38	0:0	6	=
call	96:40	96:52	6	avio_rb32
arg	96:50	96:52	7	pb
water	96:50	0:0	8	pb
water	96:53	0:0	6	;
break	97:12	97:17	6	
label	99:8	99:20	6	case ID_CMAP :
water	100:12	0:0	6	st
op	100:14	0:0	6	->
water	100:16	0:0	6	codec
op	100:21	0:0	6	->
water	100:23	0:0	6	extradata_size
op	100:38	0:0	6	=
water	100:40	0:0	6	data_size
op	100:50	0:0	6	+
water	100:52	0:0	6	IFF_EXTRA_VIDEO_SIZE
water	100:72	0:0	6	;
water	101:12	0:0	6	st
op	101:14	0:0	6	->
water	101:16	0:0	6	codec
op	101:21	0:0	6	->
water	101:23	0:0	6	extradata
op	101:38	0:0	6	=
call	101:40	101:113	6	av_malloc
arg	101:50	101:113	7	data_size+IFF_EXTRA_VIDEO_SIZE+FF_INPUT_BUFFER_PADDING_SIZE
water	101:50	0:0	8	data_size
op	101:60	0:0	8	+
water	101:62	0:0	8	IFF_EXTRA_VIDEO_SIZE
op	101:83	0:0	8	+
water	101:85	0:0	8	FF_INPUT_BUFFER_PADDING_SIZE
water	101:114	0:0	6	;
if	102:12	103:38	6	(! st -> codec -> extradata)
cond	102:16	102:28	7	! st -> codec -> extradata
op	102:16	0:0	8	!
water	102:17	0:0	8	st
op	102:19	0:0	8	->
water	102:21	0:0	8	codec
op	102:26	0:0	8	->
water	102:28	0:0	8	extradata
stmts	103:16	103:38	7	
return	103:16	103:38	8	AVERROR(ENOMEM)
call	103:23	103:37	9	AVERROR
arg	103:31	103:37	10	ENOMEM
water	103:31	0:0	11	ENOMEM
if	104:12	105:35	6	(avio_read (pb ,st -> codec -> extradata + IFF_EXTRA_VIDEO_SIZE ,data_size ) < 0)
cond	104:16	104:88	7	avio_read (pb ,st -> codec -> extradata + IFF_EXTRA_VIDEO_SIZE ,data_size ) < 0
call	104:16	104:84	8	avio_read
arg	104:26	104:28	9	pb
water	104:26	0:0	10	pb
arg	104:30	104:73	9	st->codec->extradata+IFF_EXTRA_VIDEO_SIZE
water	104:30	0:0	10	st
op	104:32	0:0	10	->
water	104:34	0:0	10	codec
op	104:39	0:0	10	->
water	104:41	0:0	10	extradata
op	104:51	0:0	10	+
water	104:53	0:0	10	IFF_EXTRA_VIDEO_SIZE
arg	104:75	104:84	9	data_size
water	104:75	0:0	10	data_size
op	104:86	0:0	8	<
water	104:88	0:0	8	0
stmts	105:16	105:35	7	
return	105:16	105:35	8	AVERROR(EIO)
call	105:23	105:34	9	AVERROR
arg	105:31	105:34	10	EIO
water	105:31	0:0	11	EIO
break	106:12	106:17	6	
label	108:8	108:20	6	case ID_BMHD :
water	109:12	0:0	6	st
op	109:14	0:0	6	->
water	109:16	0:0	6	codec
op	109:21	0:0	6	->
water	109:23	0:0	6	codec_type
op	109:45	0:0	6	=
water	109:47	0:0	6	AVMEDIA_TYPE_VIDEO
water	109:65	0:0	6	;
if	110:12	111:42	6	(data_size <= 8)
cond	110:16	110:29	7	data_size <= 8
water	110:16	0:0	8	data_size
op	110:26	0:0	8	<=
water	110:29	0:0	8	8
stmts	111:16	111:42	7	
return	111:16	111:42	8	AVERROR_INVALIDDATA
water	111:23	0:0	9	AVERROR_INVALIDDATA
water	112:12	0:0	6	st
op	112:14	0:0	6	->
water	112:16	0:0	6	codec
op	112:21	0:0	6	->
water	112:23	0:0	6	width
op	112:45	0:0	6	=
call	112:47	112:59	6	avio_rb16
arg	112:57	112:59	7	pb
water	112:57	0:0	8	pb
water	112:60	0:0	6	;
water	113:12	0:0	6	st
op	113:14	0:0	6	->
water	113:16	0:0	6	codec
op	113:21	0:0	6	->
water	113:23	0:0	6	height
op	113:45	0:0	6	=
call	113:47	113:59	6	avio_rb16
arg	113:57	113:59	7	pb
water	113:57	0:0	8	pb
water	113:60	0:0	6	;
call	114:12	114:27	6	avio_skip
arg	114:22	114:24	7	pb
water	114:22	0:0	8	pb
arg	114:26	114:27	7	4
water	114:26	0:0	8	4
water	114:28	0:0	6	;
water	115:12	0:0	6	st
op	115:14	0:0	6	->
water	115:16	0:0	6	codec
op	115:21	0:0	6	->
water	115:23	0:0	6	bits_per_coded_sample
op	115:45	0:0	6	=
call	115:47	115:57	6	avio_r8
arg	115:55	115:57	7	pb
water	115:55	0:0	8	pb
water	115:58	0:0	6	;
if	116:12	117:58	6	(data_size >= 10)
cond	116:16	116:29	7	data_size >= 10
water	116:16	0:0	8	data_size
op	116:26	0:0	8	>=
water	116:29	0:0	8	10
stmts	117:16	117:58	7	
water	117:16	0:0	8	masking
op	117:45	0:0	8	=
call	117:47	117:57	8	avio_r8
arg	117:55	117:57	9	pb
water	117:55	0:0	10	pb
water	117:58	0:0	8	;
if	118:12	119:58	6	(data_size >= 11)
cond	118:16	118:29	7	data_size >= 11
water	118:16	0:0	8	data_size
op	118:26	0:0	8	>=
water	118:29	0:0	8	11
stmts	119:16	119:58	7	
water	119:16	0:0	8	iff
op	119:19	0:0	8	->
water	119:21	0:0	8	bitmap_compression
op	119:45	0:0	8	=
call	119:47	119:57	8	avio_r8
arg	119:55	119:57	9	pb
water	119:55	0:0	10	pb
water	119:58	0:0	8	;
if	120:12	123:12	6	(data_size >= 14)
cond	120:16	120:29	7	data_size >= 14
water	120:16	0:0	8	data_size
op	120:26	0:0	8	>=
water	120:29	0:0	8	14
stmts	120:33	123:12	7	
water	120:33	0:0	8	{
call	121:16	121:31	8	avio_skip
arg	121:26	121:28	9	pb
water	121:26	0:0	10	pb
arg	121:30	121:31	9	1
water	121:30	0:0	10	1
water	121:32	0:0	8	;
water	122:16	0:0	8	transparency
op	122:45	0:0	8	=
call	122:47	122:59	8	avio_rb16
arg	122:57	122:59	9	pb
water	122:57	0:0	10	pb
water	122:60	0:0	8	;
water	123:12	0:0	8	}
if	124:12	127:12	6	(data_size >= 16)
cond	124:16	124:29	7	data_size >= 16
water	124:16	0:0	8	data_size
op	124:26	0:0	8	>=
water	124:29	0:0	8	16
stmts	124:33	127:12	7	
water	124:33	0:0	8	{
water	125:16	0:0	8	st
op	125:18	0:0	8	->
water	125:20	0:0	8	sample_aspect_ratio
op	125:39	0:0	8	.
water	125:40	0:0	8	num
op	125:45	0:0	8	=
call	125:47	125:57	8	avio_r8
arg	125:55	125:57	9	pb
water	125:55	0:0	10	pb
water	125:58	0:0	8	;
water	126:16	0:0	8	st
op	126:18	0:0	8	->
water	126:20	0:0	8	sample_aspect_ratio
op	126:39	0:0	8	.
water	126:40	0:0	8	den
op	126:45	0:0	8	=
call	126:47	126:57	8	avio_r8
arg	126:55	126:57	9	pb
water	126:55	0:0	10	pb
water	126:58	0:0	8	;
water	127:12	0:0	8	}
break	128:12	128:17	6	
label	130:8	130:20	6	case ID_DPEL :
if	131:12	132:42	6	(data_size < 4 || ( data_size & 3 ))
cond	131:16	131:47	7	data_size < 4 || ( data_size & 3 )
water	131:16	0:0	8	data_size
op	131:26	0:0	8	<
water	131:28	0:0	8	4
op	131:30	0:0	8	||
water	131:33	0:0	8	(
water	131:34	0:0	8	data_size
op	131:44	0:0	8	&
water	131:46	0:0	8	3
water	131:47	0:0	8	)
stmts	132:16	132:42	7	
return	132:16	132:42	8	AVERROR_INVALIDDATA
water	132:23	0:0	9	AVERROR_INVALIDDATA
if	133:12	134:31	6	(( fmt_size =avio_read (pb ,fmt ,sizeof ( fmt ) ) ) < 0)
cond	133:16	133:63	7	( fmt_size =avio_read (pb ,fmt ,sizeof ( fmt ) ) ) < 0
water	133:16	0:0	8	(
water	133:17	0:0	8	fmt_size
op	133:26	0:0	8	=
call	133:28	133:58	8	avio_read
arg	133:38	133:40	9	pb
water	133:38	0:0	10	pb
arg	133:42	133:45	9	fmt
water	133:42	0:0	10	fmt
arg	133:47	133:58	9	sizeof(fmt)
op	133:47	0:0	10	sizeof
water	133:53	0:0	10	(
water	133:54	0:0	10	fmt
water	133:57	0:0	10	)
water	133:59	0:0	8	)
op	133:61	0:0	8	<
water	133:63	0:0	8	0
stmts	134:16	134:31	7	
return	134:16	134:31	8	fmt_size
water	134:23	0:0	9	fmt_size
if	135:12	136:53	6	(fmt_size == sizeof ( deep_rgb24 ) && !memcmp (fmt ,deep_rgb24 ,sizeof ( deep_rgb24 ) ))
cond	135:16	135:93	7	fmt_size == sizeof ( deep_rgb24 ) && !memcmp (fmt ,deep_rgb24 ,sizeof ( deep_rgb24 ) )
water	135:16	0:0	8	fmt_size
op	135:25	0:0	8	==
op	135:28	0:0	8	sizeof
water	135:34	0:0	8	(
water	135:35	0:0	8	deep_rgb24
water	135:45	0:0	8	)
op	135:47	0:0	8	&&
op	135:50	0:0	8	!
call	135:51	135:93	8	memcmp
arg	135:58	135:61	9	fmt
water	135:58	0:0	10	fmt
arg	135:63	135:73	9	deep_rgb24
water	135:63	0:0	10	deep_rgb24
arg	135:75	135:93	9	sizeof(deep_rgb24)
op	135:75	0:0	10	sizeof
water	135:81	0:0	10	(
water	135:82	0:0	10	deep_rgb24
water	135:92	0:0	10	)
stmts	136:16	136:53	7	
water	136:16	0:0	8	st
op	136:18	0:0	8	->
water	136:20	0:0	8	codec
op	136:25	0:0	8	->
water	136:27	0:0	8	pix_fmt
op	136:35	0:0	8	=
water	136:37	0:0	8	AV_PIX_FMT_RGB24
water	136:53	0:0	8	;
else	137:12	138:52	6
stmts	137:17	138:52	7	
if	137:17	138:52	8	(fmt_size == sizeof ( deep_rgba ) && !memcmp (fmt ,deep_rgba ,sizeof ( deep_rgba ) ))
cond	137:21	137:95	9	fmt_size == sizeof ( deep_rgba ) && !memcmp (fmt ,deep_rgba ,sizeof ( deep_rgba ) )
water	137:21	0:0	10	fmt_size
op	137:30	0:0	10	==
op	137:33	0:0	10	sizeof
water	137:39	0:0	10	(
water	137:40	0:0	10	deep_rgba
water	137:49	0:0	10	)
op	137:51	0:0	10	&&
op	137:54	0:0	10	!
call	137:55	137:95	10	memcmp
arg	137:62	137:65	11	fmt
water	137:62	0:0	12	fmt
arg	137:67	137:76	11	deep_rgba
water	137:67	0:0	12	deep_rgba
arg	137:78	137:95	11	sizeof(deep_rgba)
op	137:78	0:0	12	sizeof
water	137:84	0:0	12	(
water	137:85	0:0	12	deep_rgba
water	137:94	0:0	12	)
stmts	138:16	138:52	9	
water	138:16	0:0	10	st
op	138:18	0:0	10	->
water	138:20	0:0	10	codec
op	138:25	0:0	10	->
water	138:27	0:0	10	pix_fmt
op	138:35	0:0	10	=
water	138:37	0:0	10	AV_PIX_FMT_RGBA
water	138:52	0:0	10	;
else	139:12	140:52	6
stmts	139:17	140:52	7	
if	139:17	140:52	8	(fmt_size == sizeof ( deep_bgra ) && !memcmp (fmt ,deep_bgra ,sizeof ( deep_bgra ) ))
cond	139:21	139:95	9	fmt_size == sizeof ( deep_bgra ) && !memcmp (fmt ,deep_bgra ,sizeof ( deep_bgra ) )
water	139:21	0:0	10	fmt_size
op	139:30	0:0	10	==
op	139:33	0:0	10	sizeof
water	139:39	0:0	10	(
water	139:40	0:0	10	deep_bgra
water	139:49	0:0	10	)
op	139:51	0:0	10	&&
op	139:54	0:0	10	!
call	139:55	139:95	10	memcmp
arg	139:62	139:65	11	fmt
water	139:62	0:0	12	fmt
arg	139:67	139:76	11	deep_bgra
water	139:67	0:0	12	deep_bgra
arg	139:78	139:95	11	sizeof(deep_bgra)
op	139:78	0:0	12	sizeof
water	139:84	0:0	12	(
water	139:85	0:0	12	deep_bgra
water	139:94	0:0	12	)
stmts	140:16	140:52	9	
water	140:16	0:0	10	st
op	140:18	0:0	10	->
water	140:20	0:0	10	codec
op	140:25	0:0	10	->
water	140:27	0:0	10	pix_fmt
op	140:35	0:0	10	=
water	140:37	0:0	10	AV_PIX_FMT_BGRA
water	140:52	0:0	10	;
else	141:12	142:52	6
stmts	141:17	142:52	7	
if	141:17	142:52	8	(fmt_size == sizeof ( deep_argb ) && !memcmp (fmt ,deep_argb ,sizeof ( deep_argb ) ))
cond	141:21	141:95	9	fmt_size == sizeof ( deep_argb ) && !memcmp (fmt ,deep_argb ,sizeof ( deep_argb ) )
water	141:21	0:0	10	fmt_size
op	141:30	0:0	10	==
op	141:33	0:0	10	sizeof
water	141:39	0:0	10	(
water	141:40	0:0	10	deep_argb
water	141:49	0:0	10	)
op	141:51	0:0	10	&&
op	141:54	0:0	10	!
call	141:55	141:95	10	memcmp
arg	141:62	141:65	11	fmt
water	141:62	0:0	12	fmt
arg	141:67	141:76	11	deep_argb
water	141:67	0:0	12	deep_argb
arg	141:78	141:95	11	sizeof(deep_argb)
op	141:78	0:0	12	sizeof
water	141:84	0:0	12	(
water	141:85	0:0	12	deep_argb
water	141:94	0:0	12	)
stmts	142:16	142:52	9	
water	142:16	0:0	10	st
op	142:18	0:0	10	->
water	142:20	0:0	10	codec
op	142:25	0:0	10	->
water	142:27	0:0	10	pix_fmt
op	142:35	0:0	10	=
water	142:37	0:0	10	AV_PIX_FMT_ARGB
water	142:52	0:0	10	;
else	143:12	144:52	6
stmts	143:17	144:52	7	
if	143:17	144:52	8	(fmt_size == sizeof ( deep_abgr ) && !memcmp (fmt ,deep_abgr ,sizeof ( deep_abgr ) ))
cond	143:21	143:95	9	fmt_size == sizeof ( deep_abgr ) && !memcmp (fmt ,deep_abgr ,sizeof ( deep_abgr ) )
water	143:21	0:0	10	fmt_size
op	143:30	0:0	10	==
op	143:33	0:0	10	sizeof
water	143:39	0:0	10	(
water	143:40	0:0	10	deep_abgr
water	143:49	0:0	10	)
op	143:51	0:0	10	&&
op	143:54	0:0	10	!
call	143:55	143:95	10	memcmp
arg	143:62	143:65	11	fmt
water	143:62	0:0	12	fmt
arg	143:67	143:76	11	deep_abgr
water	143:67	0:0	12	deep_abgr
arg	143:78	143:95	11	sizeof(deep_abgr)
op	143:78	0:0	12	sizeof
water	143:84	0:0	12	(
water	143:85	0:0	12	deep_abgr
water	143:94	0:0	12	)
stmts	144:16	144:52	9	
water	144:16	0:0	10	st
op	144:18	0:0	10	->
water	144:20	0:0	10	codec
op	144:25	0:0	10	->
water	144:27	0:0	10	pix_fmt
op	144:35	0:0	10	=
water	144:37	0:0	10	AV_PIX_FMT_ABGR
water	144:52	0:0	10	;
else	145:12	148:12	6
stmts	145:17	148:12	7	
water	145:17	0:0	8	{
call	146:16	146:69	8	av_log_ask_for_sample
arg	146:38	146:39	9	s
water	146:38	0:0	10	s
arg	146:41	146:69	9	"unsupported color format\n"
water	146:41	0:0	10	"unsupported color format\n"
water	146:70	0:0	8	;
return	147:16	147:43	8	AVERROR_PATCHWELCOME
water	147:23	0:0	9	AVERROR_PATCHWELCOME
water	148:12	0:0	8	}
break	149:12	149:17	6	
label	151:8	151:20	6	case ID_DGBL :
water	152:12	0:0	6	st
op	152:14	0:0	6	->
water	152:16	0:0	6	codec
op	152:21	0:0	6	->
water	152:23	0:0	6	codec_type
op	152:45	0:0	6	=
water	152:47	0:0	6	AVMEDIA_TYPE_VIDEO
water	152:65	0:0	6	;
if	153:12	154:42	6	(data_size < 8)
cond	153:16	153:28	7	data_size < 8
water	153:16	0:0	8	data_size
op	153:26	0:0	8	<
water	153:28	0:0	8	8
stmts	154:16	154:42	7	
return	154:16	154:42	8	AVERROR_INVALIDDATA
water	154:23	0:0	9	AVERROR_INVALIDDATA
water	155:12	0:0	6	st
op	155:14	0:0	6	->
water	155:16	0:0	6	codec
op	155:21	0:0	6	->
water	155:23	0:0	6	width
op	155:45	0:0	6	=
call	155:47	155:59	6	avio_rb16
arg	155:57	155:59	7	pb
water	155:57	0:0	8	pb
water	155:60	0:0	6	;
water	156:12	0:0	6	st
op	156:14	0:0	6	->
water	156:16	0:0	6	codec
op	156:21	0:0	6	->
water	156:23	0:0	6	height
op	156:45	0:0	6	=
call	156:47	156:59	6	avio_rb16
arg	156:57	156:59	7	pb
water	156:57	0:0	8	pb
water	156:60	0:0	6	;
water	157:12	0:0	6	iff
op	157:15	0:0	6	->
water	157:17	0:0	6	bitmap_compression
op	157:45	0:0	6	=
call	157:47	157:59	6	avio_rb16
arg	157:57	157:59	7	pb
water	157:57	0:0	8	pb
water	157:60	0:0	6	;
water	158:12	0:0	6	st
op	158:14	0:0	6	->
water	158:16	0:0	6	sample_aspect_ratio
op	158:35	0:0	6	.
water	158:36	0:0	6	num
op	158:45	0:0	6	=
call	158:47	158:57	6	avio_r8
arg	158:55	158:57	7	pb
water	158:55	0:0	8	pb
water	158:58	0:0	6	;
water	159:12	0:0	6	st
op	159:14	0:0	6	->
water	159:16	0:0	6	sample_aspect_ratio
op	159:35	0:0	6	.
water	159:36	0:0	6	den
op	159:45	0:0	6	=
call	159:47	159:57	6	avio_r8
arg	159:55	159:57	7	pb
water	159:55	0:0	8	pb
water	159:58	0:0	6	;
water	160:12	0:0	6	st
op	160:14	0:0	6	->
water	160:16	0:0	6	codec
op	160:21	0:0	6	->
water	160:23	0:0	6	bits_per_coded_sample
op	160:45	0:0	6	=
water	160:47	0:0	6	24
water	160:49	0:0	6	;
break	161:12	161:17	6	
label	163:8	163:20	6	case ID_DLOC :
if	164:12	165:42	6	(data_size < 4)
cond	164:16	164:28	7	data_size < 4
water	164:16	0:0	8	data_size
op	164:26	0:0	8	<
water	164:28	0:0	8	4
stmts	165:16	165:42	7	
return	165:16	165:42	8	AVERROR_INVALIDDATA
water	165:23	0:0	9	AVERROR_INVALIDDATA
water	166:12	0:0	6	st
op	166:14	0:0	6	->
water	166:16	0:0	6	codec
op	166:21	0:0	6	->
water	166:23	0:0	6	width
op	166:30	0:0	6	=
call	166:32	166:44	6	avio_rb16
arg	166:42	166:44	7	pb
water	166:42	0:0	8	pb
water	166:45	0:0	6	;
water	167:12	0:0	6	st
op	167:14	0:0	6	->
water	167:16	0:0	6	codec
op	167:21	0:0	6	->
water	167:23	0:0	6	height
op	167:30	0:0	6	=
call	167:32	167:44	6	avio_rb16
arg	167:42	167:44	7	pb
water	167:42	0:0	8	pb
water	167:45	0:0	6	;
break	168:12	168:17	6	
label	170:8	170:20	6	case ID_TVDC :
if	171:12	172:42	6	(data_size < sizeof ( iff -> tvdc ))
cond	171:16	171:44	7	data_size < sizeof ( iff -> tvdc )
water	171:16	0:0	8	data_size
op	171:26	0:0	8	<
op	171:28	0:0	8	sizeof
water	171:34	0:0	8	(
water	171:35	0:0	8	iff
op	171:38	0:0	8	->
water	171:40	0:0	8	tvdc
water	171:44	0:0	8	)
stmts	172:16	172:42	7	
return	172:16	172:42	8	AVERROR_INVALIDDATA
water	172:23	0:0	9	AVERROR_INVALIDDATA
water	173:12	0:0	6	res
op	173:16	0:0	6	=
call	173:18	173:60	6	avio_read
arg	173:28	173:30	7	pb
water	173:28	0:0	8	pb
arg	173:32	173:41	7	iff->tvdc
water	173:32	0:0	8	iff
op	173:35	0:0	8	->
water	173:37	0:0	8	tvdc
arg	173:43	173:60	7	sizeof(iff->tvdc)
op	173:43	0:0	8	sizeof
water	173:49	0:0	8	(
water	173:50	0:0	8	iff
op	173:53	0:0	8	->
water	173:55	0:0	8	tvdc
water	173:59	0:0	8	)
water	173:61	0:0	6	;
if	174:12	175:26	6	(res < 0)
cond	174:16	174:22	7	res < 0
water	174:16	0:0	8	res
op	174:20	0:0	8	<
water	174:22	0:0	8	0
stmts	175:16	175:26	7	
return	175:16	175:26	8	res
water	175:23	0:0	9	res
break	176:12	176:17	6	
label	178:8	178:20	6	case ID_ANNO :
label	179:8	179:20	6	case ID_TEXT :
water	179:27	0:0	6	metadata_tag
op	179:40	0:0	6	=
water	179:42	0:0	6	"comment"
water	179:51	0:0	6	;
break	179:55	179:60	6	
label	180:8	180:20	6	case ID_AUTH :
water	180:27	0:0	6	metadata_tag
op	180:40	0:0	6	=
water	180:42	0:0	6	"artist"
water	180:50	0:0	6	;
break	180:55	180:60	6	
label	181:8	181:25	6	case ID_COPYRIGHT :
water	181:27	0:0	6	metadata_tag
op	181:40	0:0	6	=
water	181:42	0:0	6	"copyright"
water	181:53	0:0	6	;
break	181:55	181:60	6	
label	182:8	182:20	6	case ID_NAME :
water	182:27	0:0	6	metadata_tag
op	182:40	0:0	6	=
water	182:42	0:0	6	"title"
water	182:49	0:0	6	;
break	182:55	182:60	6	
water	183:8	0:0	6	}
if	185:8	190:8	4	(metadata_tag)
cond	185:12	185:12	5	metadata_tag
water	185:12	0:0	6	metadata_tag
stmts	185:26	190:8	5	
water	185:26	0:0	6	{
if	186:12	189:12	6	(( res =get_metadata (s ,metadata_tag ,data_size ) ) < 0)
cond	186:16	186:67	7	( res =get_metadata (s ,metadata_tag ,data_size ) ) < 0
water	186:16	0:0	8	(
water	186:17	0:0	8	res
op	186:21	0:0	8	=
call	186:23	186:62	8	get_metadata
arg	186:36	186:37	9	s
water	186:36	0:0	10	s
arg	186:39	186:51	9	metadata_tag
water	186:39	0:0	10	metadata_tag
arg	186:53	186:62	9	data_size
water	186:53	0:0	10	data_size
water	186:63	0:0	8	)
op	186:65	0:0	8	<
water	186:67	0:0	8	0
stmts	186:70	189:12	7	
water	186:70	0:0	8	{
call	187:16	187:90	8	av_log
arg	187:23	187:24	9	s
water	187:23	0:0	10	s
arg	187:26	187:38	9	AV_LOG_ERROR
water	187:26	0:0	10	AV_LOG_ERROR
arg	187:40	187:76	9	"cannot allocate metadata tag %s!\n"
water	187:40	0:0	10	"cannot allocate metadata tag %s!\n"
arg	187:78	187:90	9	metadata_tag
water	187:78	0:0	10	metadata_tag
water	187:91	0:0	8	;
return	188:16	188:26	8	res
water	188:23	0:0	9	res
water	189:12	0:0	8	}
water	190:8	0:0	6	}
call	191:8	191:78	4	avio_skip
arg	191:18	191:20	5	pb
water	191:18	0:0	6	pb
arg	191:22	191:78	5	data_size-(avio_tell(pb)-orig_pos)+(data_size&1)
water	191:22	0:0	6	data_size
op	191:32	0:0	6	-
water	191:34	0:0	6	(
call	191:35	191:47	6	avio_tell
arg	191:45	191:47	7	pb
water	191:45	0:0	8	pb
op	191:49	0:0	6	-
water	191:51	0:0	6	orig_pos
water	191:59	0:0	6	)
op	191:61	0:0	6	+
water	191:63	0:0	6	(
water	191:64	0:0	6	data_size
op	191:74	0:0	6	&
water	191:76	0:0	6	1
water	191:77	0:0	6	)
water	191:79	0:0	4	;
water	192:4	0:0	4	}
call	194:4	194:41	2	avio_seek
arg	194:14	194:16	3	pb
water	194:14	0:0	4	pb
arg	194:18	194:31	3	iff->body_pos
water	194:18	0:0	4	iff
op	194:21	0:0	4	->
water	194:23	0:0	4	body_pos
arg	194:33	194:41	3	SEEK_SET
water	194:33	0:0	4	SEEK_SET
water	194:42	0:0	2	;
switch	196:4	273:4	2	(st -> codec -> codec_type)
cond	196:11	196:22	3	st -> codec -> codec_type
water	196:11	0:0	4	st
op	196:13	0:0	4	->
water	196:15	0:0	4	codec
op	196:20	0:0	4	->
water	196:22	0:0	4	codec_type
stmts	196:34	273:4	3	
water	196:34	0:0	4	{
label	197:4	197:27	4	case AVMEDIA_TYPE_AUDIO :
call	198:8	198:61	4	avpriv_set_pts_info
arg	198:28	198:30	5	st
water	198:28	0:0	6	st
arg	198:32	198:34	5	32
water	198:32	0:0	6	32
arg	198:36	198:37	5	1
water	198:36	0:0	6	1
arg	198:39	198:61	5	st->codec->sample_rate
water	198:39	0:0	6	st
op	198:41	0:0	6	->
water	198:43	0:0	6	codec
op	198:48	0:0	6	->
water	198:50	0:0	6	sample_rate
water	198:62	0:0	4	;
if	200:8	201:62	4	(st -> codec -> codec_tag == ID_16SV)
cond	200:12	200:36	5	st -> codec -> codec_tag == ID_16SV
water	200:12	0:0	6	st
op	200:14	0:0	6	->
water	200:16	0:0	6	codec
op	200:21	0:0	6	->
water	200:23	0:0	6	codec_tag
op	200:33	0:0	6	==
water	200:36	0:0	6	ID_16SV
stmts	201:12	201:62	5	
water	201:12	0:0	6	st
op	201:14	0:0	6	->
water	201:16	0:0	6	codec
op	201:21	0:0	6	->
water	201:23	0:0	6	codec_id
op	201:32	0:0	6	=
water	201:34	0:0	6	AV_CODEC_ID_PCM_S16BE_PLANAR
water	201:62	0:0	6	;
else	202:8	221:8	4
stmts	202:13	221:8	5	
if	202:13	221:8	6	(st -> codec -> codec_tag == ID_MAUD)
cond	202:17	202:41	7	st -> codec -> codec_tag == ID_MAUD
water	202:17	0:0	8	st
op	202:19	0:0	8	->
water	202:21	0:0	8	codec
op	202:26	0:0	8	->
water	202:28	0:0	8	codec_tag
op	202:38	0:0	8	==
water	202:41	0:0	8	ID_MAUD
stmts	202:50	221:8	7	
water	202:50	0:0	8	{
if	203:12	205:12	8	(iff -> maud_bits == 8 && ! iff -> maud_compression)
cond	203:16	203:45	9	iff -> maud_bits == 8 && ! iff -> maud_compression
water	203:16	0:0	10	iff
op	203:19	0:0	10	->
water	203:21	0:0	10	maud_bits
op	203:31	0:0	10	==
water	203:34	0:0	10	8
op	203:36	0:0	10	&&
op	203:39	0:0	10	!
water	203:40	0:0	10	iff
op	203:43	0:0	10	->
water	203:45	0:0	10	maud_compression
stmts	203:63	205:12	9	
water	203:63	0:0	10	{
water	204:16	0:0	10	st
op	204:18	0:0	10	->
water	204:20	0:0	10	codec
op	204:25	0:0	10	->
water	204:27	0:0	10	codec_id
op	204:36	0:0	10	=
water	204:38	0:0	10	AV_CODEC_ID_PCM_U8
water	204:56	0:0	10	;
water	205:12	0:0	10	}
else	205:14	207:12	8
stmts	205:19	207:12	9	
if	205:19	207:12	10	(iff -> maud_bits == 16 && ! iff -> maud_compression)
cond	205:23	205:53	11	iff -> maud_bits == 16 && ! iff -> maud_compression
water	205:23	0:0	12	iff
op	205:26	0:0	12	->
water	205:28	0:0	12	maud_bits
op	205:38	0:0	12	==
water	205:41	0:0	12	16
op	205:44	0:0	12	&&
op	205:47	0:0	12	!
water	205:48	0:0	12	iff
op	205:51	0:0	12	->
water	205:53	0:0	12	maud_compression
stmts	205:71	207:12	11	
water	205:71	0:0	12	{
water	206:16	0:0	12	st
op	206:18	0:0	12	->
water	206:20	0:0	12	codec
op	206:25	0:0	12	->
water	206:27	0:0	12	codec_id
op	206:36	0:0	12	=
water	206:38	0:0	12	AV_CODEC_ID_PCM_S16BE
water	206:59	0:0	12	;
water	207:12	0:0	12	}
else	207:14	209:12	8
stmts	207:19	209:12	9	
if	207:19	209:12	10	(iff -> maud_bits == 8 && iff -> maud_compression == 2)
cond	207:23	207:72	11	iff -> maud_bits == 8 && iff -> maud_compression == 2
water	207:23	0:0	12	iff
op	207:26	0:0	12	->
water	207:28	0:0	12	maud_bits
op	207:38	0:0	12	==
water	207:42	0:0	12	8
op	207:44	0:0	12	&&
water	207:47	0:0	12	iff
op	207:50	0:0	12	->
water	207:52	0:0	12	maud_compression
op	207:69	0:0	12	==
water	207:72	0:0	12	2
stmts	207:75	209:12	11	
water	207:75	0:0	12	{
water	208:16	0:0	12	st
op	208:18	0:0	12	->
water	208:20	0:0	12	codec
op	208:25	0:0	12	->
water	208:27	0:0	12	codec_id
op	208:36	0:0	12	=
water	208:38	0:0	12	AV_CODEC_ID_PCM_ALAW
water	208:58	0:0	12	;
water	209:12	0:0	12	}
else	209:14	211:12	8
stmts	209:19	211:12	9	
if	209:19	211:12	10	(iff -> maud_bits == 8 && iff -> maud_compression == 3)
cond	209:23	209:72	11	iff -> maud_bits == 8 && iff -> maud_compression == 3
water	209:23	0:0	12	iff
op	209:26	0:0	12	->
water	209:28	0:0	12	maud_bits
op	209:38	0:0	12	==
water	209:42	0:0	12	8
op	209:44	0:0	12	&&
water	209:47	0:0	12	iff
op	209:50	0:0	12	->
water	209:52	0:0	12	maud_compression
op	209:69	0:0	12	==
water	209:72	0:0	12	3
stmts	209:75	211:12	11	
water	209:75	0:0	12	{
water	210:16	0:0	12	st
op	210:18	0:0	12	->
water	210:20	0:0	12	codec
op	210:25	0:0	12	->
water	210:27	0:0	12	codec_id
op	210:36	0:0	12	=
water	210:38	0:0	12	AV_CODEC_ID_PCM_MULAW
water	210:59	0:0	12	;
water	211:12	0:0	12	}
else	211:14	214:12	8
stmts	211:19	214:12	9	
water	211:19	0:0	10	{
call	212:16	212:127	10	av_log_ask_for_sample
arg	212:38	212:39	11	s
water	212:38	0:0	12	s
arg	212:41	212:88	11	"unsupported compression %d and bit depth %d\n"
water	212:41	0:0	12	"unsupported compression %d and bit depth %d\n"
arg	212:90	212:111	11	iff->maud_compression
water	212:90	0:0	12	iff
op	212:93	0:0	12	->
water	212:95	0:0	12	maud_compression
arg	212:113	212:127	11	iff->maud_bits
water	212:113	0:0	12	iff
op	212:116	0:0	12	->
water	212:118	0:0	12	maud_bits
water	212:128	0:0	10	;
return	213:16	213:43	10	AVERROR_PATCHWELCOME
water	213:23	0:0	11	AVERROR_PATCHWELCOME
water	214:12	0:0	10	}
water	216:12	0:0	8	st
op	216:14	0:0	8	->
water	216:16	0:0	8	codec
op	216:21	0:0	8	->
water	216:23	0:0	8	bits_per_coded_sample
op	216:45	0:0	8	=
call	217:16	217:58	8	av_get_bits_per_sample
arg	217:39	217:58	9	st->codec->codec_id
water	217:39	0:0	10	st
op	217:41	0:0	10	->
water	217:43	0:0	10	codec
op	217:48	0:0	10	->
water	217:50	0:0	10	codec_id
water	217:59	0:0	8	;
water	219:12	0:0	8	st
op	219:14	0:0	8	->
water	219:16	0:0	8	codec
op	219:21	0:0	8	->
water	219:23	0:0	8	block_align
op	219:35	0:0	8	=
water	220:16	0:0	8	st
op	220:18	0:0	8	->
water	220:20	0:0	8	codec
op	220:25	0:0	8	->
water	220:27	0:0	8	bits_per_coded_sample
op	220:49	0:0	8	*
water	220:51	0:0	8	st
op	220:53	0:0	8	->
water	220:55	0:0	8	codec
op	220:60	0:0	8	->
water	220:62	0:0	8	channels
op	220:71	0:0	8	/
water	220:73	0:0	8	8
water	220:74	0:0	8	;
water	221:8	0:0	8	}
else	221:10	237:8	4
stmts	221:15	237:8	5	
water	221:15	0:0	6	{
switch	222:8	236:8	6	(iff -> svx8_compression)
cond	222:16	222:21	7	iff -> svx8_compression
water	222:16	0:0	8	iff
op	222:19	0:0	8	->
water	222:21	0:0	8	svx8_compression
stmts	222:39	236:8	7	
water	222:39	0:0	8	{
label	223:8	223:22	8	case COMP_NONE :
water	224:12	0:0	8	st
op	224:14	0:0	8	->
water	224:16	0:0	8	codec
op	224:21	0:0	8	->
water	224:23	0:0	8	codec_id
op	224:32	0:0	8	=
water	224:34	0:0	8	AV_CODEC_ID_PCM_S8_PLANAR
water	224:59	0:0	8	;
break	225:12	225:17	8	
label	226:8	226:21	8	case COMP_FIB :
water	227:12	0:0	8	st
op	227:14	0:0	8	->
water	227:16	0:0	8	codec
op	227:21	0:0	8	->
water	227:23	0:0	8	codec_id
op	227:32	0:0	8	=
water	227:34	0:0	8	AV_CODEC_ID_8SVX_FIB
water	227:54	0:0	8	;
break	228:12	228:17	8	
label	229:8	229:21	8	case COMP_EXP :
water	230:12	0:0	8	st
op	230:14	0:0	8	->
water	230:16	0:0	8	codec
op	230:21	0:0	8	->
water	230:23	0:0	8	codec_id
op	230:32	0:0	8	=
water	230:34	0:0	8	AV_CODEC_ID_8SVX_EXP
water	230:54	0:0	8	;
break	231:12	231:17	8	
label	232:8	232:15	8	default :
call	233:12	234:82	8	av_log
arg	233:19	233:20	9	s
water	233:19	0:0	10	s
arg	233:22	233:34	9	AV_LOG_ERROR
water	233:22	0:0	10	AV_LOG_ERROR
arg	234:19	234:59	9	"Unknown SVX8 compression method '%d'\n"
water	234:19	0:0	10	"Unknown SVX8 compression method '%d'\n"
arg	234:61	234:82	9	iff->svx8_compression
water	234:61	0:0	10	iff
op	234:64	0:0	10	->
water	234:66	0:0	10	svx8_compression
water	234:83	0:0	8	;
return	235:12	235:21	8	-1
op	235:19	0:0	9	-
water	235:20	0:0	9	1
water	236:8	0:0	8	}
water	237:8	0:0	6	}
water	239:8	0:0	4	st
op	239:10	0:0	4	->
water	239:12	0:0	4	codec
op	239:17	0:0	4	->
water	239:19	0:0	4	bits_per_coded_sample
op	239:41	0:0	4	=
call	239:43	239:85	4	av_get_bits_per_sample
arg	239:66	239:85	5	st->codec->codec_id
water	239:66	0:0	6	st
op	239:68	0:0	6	->
water	239:70	0:0	6	codec
op	239:75	0:0	6	->
water	239:77	0:0	6	codec_id
water	239:86	0:0	4	;
water	240:8	0:0	4	st
op	240:10	0:0	4	->
water	240:12	0:0	4	codec
op	240:17	0:0	4	->
water	240:19	0:0	4	bit_rate
op	240:28	0:0	4	=
water	240:30	0:0	4	st
op	240:32	0:0	4	->
water	240:34	0:0	4	codec
op	240:39	0:0	4	->
water	240:41	0:0	4	channels
op	240:50	0:0	4	*
water	240:52	0:0	4	st
op	240:54	0:0	4	->
water	240:56	0:0	4	codec
op	240:61	0:0	4	->
water	240:63	0:0	4	sample_rate
op	240:75	0:0	4	*
water	240:77	0:0	4	st
op	240:79	0:0	4	->
water	240:81	0:0	4	codec
op	240:86	0:0	4	->
water	240:88	0:0	4	bits_per_coded_sample
water	240:109	0:0	4	;
water	241:8	0:0	4	st
op	241:10	0:0	4	->
water	241:12	0:0	4	codec
op	241:17	0:0	4	->
water	241:19	0:0	4	block_align
op	241:31	0:0	4	=
water	241:33	0:0	4	st
op	241:35	0:0	4	->
water	241:37	0:0	4	codec
op	241:42	0:0	4	->
water	241:44	0:0	4	channels
op	241:53	0:0	4	*
water	241:55	0:0	4	st
op	241:57	0:0	4	->
water	241:59	0:0	4	codec
op	241:64	0:0	4	->
water	241:66	0:0	4	bits_per_coded_sample
water	241:87	0:0	4	;
break	242:8	242:13	4	
label	244:4	244:27	4	case AVMEDIA_TYPE_VIDEO :
water	245:8	0:0	4	iff
op	245:11	0:0	4	->
water	245:13	0:0	4	bpp
op	245:26	0:0	4	=
water	245:28	0:0	4	st
op	245:30	0:0	4	->
water	245:32	0:0	4	codec
op	245:37	0:0	4	->
water	245:39	0:0	4	bits_per_coded_sample
water	245:60	0:0	4	;
if	246:8	249:8	4	(( screenmode & 0 x800 ) && iff -> bpp <= 8)
cond	246:12	246:49	5	( screenmode & 0 x800 ) && iff -> bpp <= 8
water	246:12	0:0	6	(
water	246:13	0:0	6	screenmode
op	246:24	0:0	6	&
water	246:26	0:0	6	0
water	246:27	0:0	6	x800
water	246:32	0:0	6	)
op	246:34	0:0	6	&&
water	246:37	0:0	6	iff
op	246:40	0:0	6	->
water	246:42	0:0	6	bpp
op	246:46	0:0	6	<=
water	246:49	0:0	6	8
stmts	246:52	249:8	5	
water	246:52	0:0	6	{
water	247:12	0:0	6	iff
op	247:15	0:0	6	->
water	247:17	0:0	6	ham
op	247:26	0:0	6	=
water	247:28	0:0	6	iff
op	247:31	0:0	6	->
water	247:33	0:0	6	bpp
op	247:37	0:0	6	>
water	247:39	0:0	6	6
water	247:41	0:0	6	?
water	247:43	0:0	6	6
water	247:45	0:0	6	:
water	247:47	0:0	6	4
water	247:48	0:0	6	;
water	248:12	0:0	6	st
op	248:14	0:0	6	->
water	248:16	0:0	6	codec
op	248:21	0:0	6	->
water	248:23	0:0	6	bits_per_coded_sample
op	248:45	0:0	6	=
water	248:47	0:0	6	24
water	248:49	0:0	6	;
water	249:8	0:0	6	}
water	250:8	0:0	4	iff
op	250:11	0:0	4	->
water	250:13	0:0	4	flags
op	250:26	0:0	4	=
water	250:28	0:0	4	(
water	250:29	0:0	4	screenmode
op	250:40	0:0	4	&
water	250:42	0:0	4	0
water	250:43	0:0	4	x80
water	250:47	0:0	4	)
op	250:49	0:0	4	&&
water	250:52	0:0	4	iff
op	250:55	0:0	4	->
water	250:57	0:0	4	bpp
op	250:61	0:0	4	<=
water	250:64	0:0	4	8
water	250:65	0:0	4	;
water	251:8	0:0	4	iff
op	251:11	0:0	4	->
water	251:13	0:0	4	masking
op	251:26	0:0	4	=
water	251:28	0:0	4	masking
water	251:35	0:0	4	;
water	252:8	0:0	4	iff
op	252:11	0:0	4	->
water	252:13	0:0	4	transparency
op	252:26	0:0	4	=
water	252:28	0:0	4	transparency
water	252:40	0:0	4	;
if	254:8	259:8	4	(! st -> codec -> extradata)
cond	254:12	254:24	5	! st -> codec -> extradata
op	254:12	0:0	6	!
water	254:13	0:0	6	st
op	254:15	0:0	6	->
water	254:17	0:0	6	codec
op	254:22	0:0	6	->
water	254:24	0:0	6	extradata
stmts	254:35	259:8	5	
water	254:35	0:0	6	{
water	255:12	0:0	6	st
op	255:14	0:0	6	->
water	255:16	0:0	6	codec
op	255:21	0:0	6	->
water	255:23	0:0	6	extradata_size
op	255:38	0:0	6	=
water	255:40	0:0	6	IFF_EXTRA_VIDEO_SIZE
water	255:60	0:0	6	;
water	256:12	0:0	6	st
op	256:14	0:0	6	->
water	256:16	0:0	6	codec
op	256:21	0:0	6	->
water	256:23	0:0	6	extradata
op	256:38	0:0	6	=
call	256:40	256:101	6	av_malloc
arg	256:50	256:101	7	IFF_EXTRA_VIDEO_SIZE+FF_INPUT_BUFFER_PADDING_SIZE
water	256:50	0:0	8	IFF_EXTRA_VIDEO_SIZE
op	256:71	0:0	8	+
water	256:73	0:0	8	FF_INPUT_BUFFER_PADDING_SIZE
water	256:102	0:0	6	;
if	257:12	258:38	6	(! st -> codec -> extradata)
cond	257:16	257:28	7	! st -> codec -> extradata
op	257:16	0:0	8	!
water	257:17	0:0	8	st
op	257:19	0:0	8	->
water	257:21	0:0	8	codec
op	257:26	0:0	8	->
water	257:28	0:0	8	extradata
stmts	258:16	258:38	7	
return	258:16	258:38	8	AVERROR(ENOMEM)
call	258:23	258:37	9	AVERROR
arg	258:31	258:37	10	ENOMEM
water	258:31	0:0	11	ENOMEM
water	259:8	0:0	6	}
water	260:8	0:0	4	buf
op	260:12	0:0	4	=
water	260:14	0:0	4	st
op	260:16	0:0	4	->
water	260:18	0:0	4	codec
op	260:23	0:0	4	->
water	260:25	0:0	4	extradata
water	260:34	0:0	4	;
call	261:8	261:54	4	bytestream_put_be16
arg	261:28	261:32	5	&buf
op	261:28	0:0	6	&
water	261:29	0:0	6	buf
arg	261:34	261:54	5	IFF_EXTRA_VIDEO_SIZE
water	261:34	0:0	6	IFF_EXTRA_VIDEO_SIZE
water	261:55	0:0	4	;
call	262:8	262:57	4	bytestream_put_byte
arg	262:28	262:32	5	&buf
op	262:28	0:0	6	&
water	262:29	0:0	6	buf
arg	262:34	262:57	5	iff->bitmap_compression
water	262:34	0:0	6	iff
op	262:37	0:0	6	->
water	262:39	0:0	6	bitmap_compression
water	262:58	0:0	4	;
call	263:8	263:42	4	bytestream_put_byte
arg	263:28	263:32	5	&buf
op	263:28	0:0	6	&
water	263:29	0:0	6	buf
arg	263:34	263:42	5	iff->bpp
water	263:34	0:0	6	iff
op	263:37	0:0	6	->
water	263:39	0:0	6	bpp
water	263:43	0:0	4	;
call	264:8	264:42	4	bytestream_put_byte
arg	264:28	264:32	5	&buf
op	264:28	0:0	6	&
water	264:29	0:0	6	buf
arg	264:34	264:42	5	iff->ham
water	264:34	0:0	6	iff
op	264:37	0:0	6	->
water	264:39	0:0	6	ham
water	264:43	0:0	4	;
call	265:8	265:44	4	bytestream_put_byte
arg	265:28	265:32	5	&buf
op	265:28	0:0	6	&
water	265:29	0:0	6	buf
arg	265:34	265:44	5	iff->flags
water	265:34	0:0	6	iff
op	265:37	0:0	6	->
water	265:39	0:0	6	flags
water	265:45	0:0	4	;
call	266:8	266:51	4	bytestream_put_be16
arg	266:28	266:32	5	&buf
op	266:28	0:0	6	&
water	266:29	0:0	6	buf
arg	266:34	266:51	5	iff->transparency
water	266:34	0:0	6	iff
op	266:37	0:0	6	->
water	266:39	0:0	6	transparency
water	266:52	0:0	4	;
call	267:8	267:46	4	bytestream_put_byte
arg	267:28	267:32	5	&buf
op	267:28	0:0	6	&
water	267:29	0:0	6	buf
arg	267:34	267:46	5	iff->masking
water	267:34	0:0	6	iff
op	267:37	0:0	6	->
water	267:39	0:0	6	masking
water	267:47	0:0	4	;
call	268:8	268:64	4	bytestream_put_buffer
arg	268:30	268:34	5	&buf
op	268:30	0:0	6	&
water	268:31	0:0	6	buf
arg	268:36	268:45	5	iff->tvdc
water	268:36	0:0	6	iff
op	268:39	0:0	6	->
water	268:41	0:0	6	tvdc
arg	268:47	268:64	5	sizeof(iff->tvdc)
op	268:47	0:0	6	sizeof
water	268:53	0:0	6	(
water	268:54	0:0	6	iff
op	268:57	0:0	6	->
water	268:59	0:0	6	tvdc
water	268:63	0:0	6	)
water	268:65	0:0	4	;
water	269:8	0:0	4	st
op	269:10	0:0	4	->
water	269:12	0:0	4	codec
op	269:17	0:0	4	->
water	269:19	0:0	4	codec_id
op	269:28	0:0	4	=
water	269:30	0:0	4	AV_CODEC_ID_IFF_ILBM
water	269:50	0:0	4	;
break	270:8	270:13	4	
label	271:4	271:11	4	default :
return	272:8	272:17	4	-1
op	272:15	0:0	5	-
water	272:16	0:0	5	1
water	273:4	0:0	4	}
return	275:4	275:12	2	0
water	275:11	0:0	3	0
