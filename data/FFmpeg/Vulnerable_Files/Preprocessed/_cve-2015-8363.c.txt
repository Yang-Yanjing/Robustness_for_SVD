func	2:0	101:0	0	static int	jpeg2000_read_main_headers
params	2:37	0:0	1	
param	2:38	2:63	2	Jpeg2000DecoderContext *	s
stmnts	0:0	100:12	1	
decl	4:4	4:43	2	Jpeg2000CodingStyle	*codsty
op	4:32	0:0	2	=
water	4:34	0:0	2	s
op	4:35	0:0	2	->
water	4:37	0:0	2	codsty
decl	5:4	5:43	2	Jpeg2000QuantStyle	*qntsty
op	5:32	0:0	2	=
water	5:34	0:0	2	s
op	5:35	0:0	2	->
water	5:37	0:0	2	qntsty
decl	6:4	6:47	2	uint8_t	*properties
op	6:32	0:0	2	=
water	6:34	0:0	2	s
op	6:35	0:0	2	->
water	6:37	0:0	2	properties
for	8:4	99:4	2	(;;)
forinit	8:9	8:9	3	;
water	8:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	8:13	99:4	3	
water	8:13	0:0	4	{
decl	9:8	9:24	4	int	len
water	9:15	0:0	4	,
decl	9:8	9:24	4	int	ret
op	9:21	0:0	4	=
water	9:23	0:0	4	0
decl	10:8	10:23	4	uint16_t	marker
decl	11:8	11:18	4	int	oldpos
if	13:8	16:8	4	(bytestream2_get_bytes_left (& s -> g ) < 2)
cond	13:12	13:48	5	bytestream2_get_bytes_left (& s -> g ) < 2
call	13:12	13:44	6	bytestream2_get_bytes_left
arg	13:39	13:44	7	&s->g
op	13:39	0:0	8	&
water	13:40	0:0	8	s
op	13:41	0:0	8	->
water	13:43	0:0	8	g
op	13:46	0:0	6	<
water	13:48	0:0	6	2
stmts	13:51	16:8	5	
water	13:51	0:0	6	{
call	14:12	14:58	6	av_log
arg	14:19	14:27	7	s->avctx
water	14:19	0:0	8	s
op	14:20	0:0	8	->
water	14:22	0:0	8	avctx
arg	14:29	14:41	7	AV_LOG_ERROR
water	14:29	0:0	8	AV_LOG_ERROR
arg	14:43	14:58	7	"Missing EOC\n"
water	14:43	0:0	8	"Missing EOC\n"
water	14:59	0:0	6	;
break	15:12	15:17	6	
water	16:8	0:0	6	}
water	18:8	0:0	4	marker
op	18:15	0:0	4	=
call	18:17	18:44	4	bytestream2_get_be16u
arg	18:39	18:44	5	&s->g
op	18:39	0:0	6	&
water	18:40	0:0	6	s
op	18:41	0:0	6	->
water	18:43	0:0	6	g
water	18:45	0:0	4	;
water	19:8	0:0	4	oldpos
op	19:15	0:0	4	=
call	19:17	19:39	4	bytestream2_tell
arg	19:34	19:39	5	&s->g
op	19:34	0:0	6	&
water	19:35	0:0	6	s
op	19:36	0:0	6	->
water	19:38	0:0	6	g
water	19:40	0:0	4	;
if	21:8	44:8	4	(marker == JPEG2000_SOD)
cond	21:12	21:22	5	marker == JPEG2000_SOD
water	21:12	0:0	6	marker
op	21:19	0:0	6	==
water	21:22	0:0	6	JPEG2000_SOD
stmts	21:36	44:8	5	
water	21:36	0:0	6	{
decl	22:12	22:30	6	Jpeg2000Tile	*tile
decl	23:12	23:32	6	Jpeg2000TilePart	*tp
if	25:12	28:12	6	(! s -> tile)
cond	25:16	25:20	7	! s -> tile
op	25:16	0:0	8	!
water	25:17	0:0	8	s
op	25:18	0:0	8	->
water	25:20	0:0	8	tile
stmts	25:26	28:12	7	
water	25:26	0:0	8	{
call	26:16	26:62	8	av_log
arg	26:23	26:31	9	s->avctx
water	26:23	0:0	10	s
op	26:24	0:0	10	->
water	26:26	0:0	10	avctx
arg	26:33	26:45	9	AV_LOG_ERROR
water	26:33	0:0	10	AV_LOG_ERROR
arg	26:47	26:62	9	"Missing SIZ\n"
water	26:47	0:0	10	"Missing SIZ\n"
water	26:63	0:0	8	;
return	27:16	27:42	8	AVERROR_INVALIDDATA
water	27:23	0:0	9	AVERROR_INVALIDDATA
water	28:12	0:0	8	}
if	29:12	32:12	6	(s -> curtileno < 0)
cond	29:16	29:31	7	s -> curtileno < 0
water	29:16	0:0	8	s
op	29:17	0:0	8	->
water	29:19	0:0	8	curtileno
op	29:29	0:0	8	<
water	29:31	0:0	8	0
stmts	29:34	32:12	7	
water	29:34	0:0	8	{
call	30:16	30:62	8	av_log
arg	30:23	30:31	9	s->avctx
water	30:23	0:0	10	s
op	30:24	0:0	10	->
water	30:26	0:0	10	avctx
arg	30:33	30:45	9	AV_LOG_ERROR
water	30:33	0:0	10	AV_LOG_ERROR
arg	30:47	30:62	9	"Missing SOT\n"
water	30:47	0:0	10	"Missing SOT\n"
water	30:63	0:0	8	;
return	31:16	31:42	8	AVERROR_INVALIDDATA
water	31:23	0:0	9	AVERROR_INVALIDDATA
water	32:12	0:0	8	}
water	34:12	0:0	6	tile
op	34:17	0:0	6	=
water	34:19	0:0	6	s
op	34:20	0:0	6	->
water	34:22	0:0	6	tile
op	34:27	0:0	6	+
water	34:29	0:0	6	s
op	34:30	0:0	6	->
water	34:32	0:0	6	curtileno
water	34:41	0:0	6	;
water	35:12	0:0	6	tp
op	35:15	0:0	6	=
water	35:17	0:0	6	tile
op	35:21	0:0	6	->
water	35:23	0:0	6	tile_part
op	35:33	0:0	6	+
water	35:35	0:0	6	tile
op	35:39	0:0	6	->
water	35:41	0:0	6	tp_idx
water	35:47	0:0	6	;
if	36:12	39:12	6	(tp -> tp_end < s -> g . buffer)
cond	36:16	36:34	7	tp -> tp_end < s -> g . buffer
water	36:16	0:0	8	tp
op	36:18	0:0	8	->
water	36:20	0:0	8	tp_end
op	36:27	0:0	8	<
water	36:29	0:0	8	s
op	36:30	0:0	8	->
water	36:32	0:0	8	g
op	36:33	0:0	8	.
water	36:34	0:0	8	buffer
stmts	36:42	39:12	7	
water	36:42	0:0	8	{
call	37:16	37:64	8	av_log
arg	37:23	37:31	9	s->avctx
water	37:23	0:0	10	s
op	37:24	0:0	10	->
water	37:26	0:0	10	avctx
arg	37:33	37:45	9	AV_LOG_ERROR
water	37:33	0:0	10	AV_LOG_ERROR
arg	37:47	37:64	9	"Invalid tpend\n"
water	37:47	0:0	10	"Invalid tpend\n"
water	37:65	0:0	8	;
return	38:16	38:42	8	AVERROR_INVALIDDATA
water	38:23	0:0	9	AVERROR_INVALIDDATA
water	39:12	0:0	8	}
call	40:12	40:76	6	bytestream2_init
arg	40:29	40:37	7	&tp->tpg
op	40:29	0:0	8	&
water	40:30	0:0	8	tp
op	40:32	0:0	8	->
water	40:34	0:0	8	tpg
arg	40:39	40:50	7	s->g.buffer
water	40:39	0:0	8	s
op	40:40	0:0	8	->
water	40:42	0:0	8	g
op	40:43	0:0	8	.
water	40:44	0:0	8	buffer
arg	40:52	40:76	7	tp->tp_end-s->g.buffer
water	40:52	0:0	8	tp
op	40:54	0:0	8	->
water	40:56	0:0	8	tp_end
op	40:63	0:0	8	-
water	40:65	0:0	8	s
op	40:66	0:0	8	->
water	40:68	0:0	8	g
op	40:69	0:0	8	.
water	40:70	0:0	8	buffer
water	40:77	0:0	6	;
call	41:12	41:60	6	bytestream2_skip
arg	41:29	41:34	7	&s->g
op	41:29	0:0	8	&
water	41:30	0:0	8	s
op	41:31	0:0	8	->
water	41:33	0:0	8	g
arg	41:36	41:60	7	tp->tp_end-s->g.buffer
water	41:36	0:0	8	tp
op	41:38	0:0	8	->
water	41:40	0:0	8	tp_end
op	41:47	0:0	8	-
water	41:49	0:0	8	s
op	41:50	0:0	8	->
water	41:52	0:0	8	g
op	41:53	0:0	8	.
water	41:54	0:0	8	buffer
water	41:61	0:0	6	;
continue	43:12	43:20	6	
water	44:8	0:0	6	}
if	45:8	46:17	4	(marker == JPEG2000_EOC)
cond	45:12	45:22	5	marker == JPEG2000_EOC
water	45:12	0:0	6	marker
op	45:19	0:0	6	==
water	45:22	0:0	6	JPEG2000_EOC
stmts	46:12	46:17	5	
break	46:12	46:17	6	
water	48:8	0:0	4	len
op	48:12	0:0	4	=
call	48:14	48:40	4	bytestream2_get_be16
arg	48:35	48:40	5	&s->g
op	48:35	0:0	6	&
water	48:36	0:0	6	s
op	48:37	0:0	6	->
water	48:39	0:0	6	g
water	48:41	0:0	4	;
if	49:8	50:38	4	(len < 2 ||bytestream2_get_bytes_left (& s -> g ) < len - 2)
cond	49:12	49:65	5	len < 2 ||bytestream2_get_bytes_left (& s -> g ) < len - 2
water	49:12	0:0	6	len
op	49:16	0:0	6	<
water	49:18	0:0	6	2
op	49:20	0:0	6	||
call	49:23	49:55	6	bytestream2_get_bytes_left
arg	49:50	49:55	7	&s->g
op	49:50	0:0	8	&
water	49:51	0:0	8	s
op	49:52	0:0	8	->
water	49:54	0:0	8	g
op	49:57	0:0	6	<
water	49:59	0:0	6	len
op	49:63	0:0	6	-
water	49:65	0:0	6	2
stmts	50:12	50:38	5	
return	50:12	50:38	6	AVERROR_INVALIDDATA
water	50:19	0:0	7	AVERROR_INVALIDDATA
switch	52:8	92:8	4	(marker)
cond	52:16	52:16	5	marker
water	52:16	0:0	6	marker
stmts	52:24	92:8	5	
water	52:24	0:0	6	{
label	53:8	53:25	6	case JPEG2000_SIZ :
water	54:12	0:0	6	ret
op	54:16	0:0	6	=
call	54:18	54:27	6	get_siz
arg	54:26	54:27	7	s
water	54:26	0:0	8	s
water	54:28	0:0	6	;
if	55:12	56:47	6	(! s -> tile)
cond	55:16	55:20	7	! s -> tile
op	55:16	0:0	8	!
water	55:17	0:0	8	s
op	55:18	0:0	8	->
water	55:20	0:0	8	tile
stmts	56:16	56:47	7	
water	56:16	0:0	8	s
op	56:17	0:0	8	->
water	56:19	0:0	8	numXtiles
op	56:29	0:0	8	=
water	56:31	0:0	8	s
op	56:32	0:0	8	->
water	56:34	0:0	8	numYtiles
op	56:44	0:0	8	=
water	56:46	0:0	8	0
water	56:47	0:0	8	;
break	57:12	57:17	6	
label	58:8	58:25	6	case JPEG2000_COC :
water	59:12	0:0	6	ret
op	59:16	0:0	6	=
call	59:18	59:47	6	get_coc
arg	59:26	59:27	7	s
water	59:26	0:0	8	s
arg	59:29	59:35	7	codsty
water	59:29	0:0	8	codsty
arg	59:37	59:47	7	properties
water	59:37	0:0	8	properties
water	59:48	0:0	6	;
break	60:12	60:17	6	
label	61:8	61:25	6	case JPEG2000_COD :
water	62:12	0:0	6	ret
op	62:16	0:0	6	=
call	62:18	62:47	6	get_cod
arg	62:26	62:27	7	s
water	62:26	0:0	8	s
arg	62:29	62:35	7	codsty
water	62:29	0:0	8	codsty
arg	62:37	62:47	7	properties
water	62:37	0:0	8	properties
water	62:48	0:0	6	;
break	63:12	63:17	6	
label	64:8	64:25	6	case JPEG2000_QCC :
water	65:12	0:0	6	ret
op	65:16	0:0	6	=
call	65:18	65:52	6	get_qcc
arg	65:26	65:27	7	s
water	65:26	0:0	8	s
arg	65:29	65:32	7	len
water	65:29	0:0	8	len
arg	65:34	65:40	7	qntsty
water	65:34	0:0	8	qntsty
arg	65:42	65:52	7	properties
water	65:42	0:0	8	properties
water	65:53	0:0	6	;
break	66:12	66:17	6	
label	67:8	67:25	6	case JPEG2000_QCD :
water	68:12	0:0	6	ret
op	68:16	0:0	6	=
call	68:18	68:52	6	get_qcd
arg	68:26	68:27	7	s
water	68:26	0:0	8	s
arg	68:29	68:32	7	len
water	68:29	0:0	8	len
arg	68:34	68:40	7	qntsty
water	68:34	0:0	8	qntsty
arg	68:42	68:52	7	properties
water	68:42	0:0	8	properties
water	68:53	0:0	6	;
break	69:12	69:17	6	
label	70:8	70:25	6	case JPEG2000_SOT :
if	71:12	76:12	6	(! ( ret =get_sot (s ,len ) ))
cond	71:16	71:39	7	! ( ret =get_sot (s ,len ) )
op	71:16	0:0	8	!
water	71:17	0:0	8	(
water	71:18	0:0	8	ret
op	71:22	0:0	8	=
call	71:24	71:38	8	get_sot
arg	71:32	71:33	9	s
water	71:32	0:0	10	s
arg	71:35	71:38	9	len
water	71:35	0:0	10	len
water	71:39	0:0	8	)
stmts	71:42	76:12	7	
water	71:42	0:0	8	{
call	72:16	72:44	8	av_assert1
arg	72:27	72:44	9	s->curtileno>=0
water	72:27	0:0	10	s
op	72:28	0:0	10	->
water	72:30	0:0	10	curtileno
op	72:40	0:0	10	>=
water	72:43	0:0	10	0
water	72:45	0:0	8	;
water	73:16	0:0	8	codsty
op	73:23	0:0	8	=
water	73:25	0:0	8	s
op	73:26	0:0	8	->
water	73:28	0:0	8	tile
op	73:32	0:0	8	[
water	73:33	0:0	8	s
op	73:34	0:0	8	->
water	73:36	0:0	8	curtileno
op	73:45	0:0	8	]
op	73:46	0:0	8	.
water	73:47	0:0	8	codsty
water	73:53	0:0	8	;
water	74:16	0:0	8	qntsty
op	74:23	0:0	8	=
water	74:25	0:0	8	s
op	74:26	0:0	8	->
water	74:28	0:0	8	tile
op	74:32	0:0	8	[
water	74:33	0:0	8	s
op	74:34	0:0	8	->
water	74:36	0:0	8	curtileno
op	74:45	0:0	8	]
op	74:46	0:0	8	.
water	74:47	0:0	8	qntsty
water	74:53	0:0	8	;
water	75:16	0:0	8	properties
op	75:27	0:0	8	=
water	75:29	0:0	8	s
op	75:30	0:0	8	->
water	75:32	0:0	8	tile
op	75:36	0:0	8	[
water	75:37	0:0	8	s
op	75:38	0:0	8	->
water	75:40	0:0	8	curtileno
op	75:49	0:0	8	]
op	75:50	0:0	8	.
water	75:51	0:0	8	properties
water	75:61	0:0	8	;
water	76:12	0:0	8	}
break	77:12	77:17	6	
label	78:8	78:25	6	case JPEG2000_COM :
call	80:12	80:43	6	bytestream2_skip
arg	80:29	80:34	7	&s->g
op	80:29	0:0	8	&
water	80:30	0:0	8	s
op	80:31	0:0	8	->
water	80:33	0:0	8	g
arg	80:36	80:43	7	len-2
water	80:36	0:0	8	len
op	80:40	0:0	8	-
water	80:42	0:0	8	2
water	80:44	0:0	6	;
break	81:12	81:17	6	
label	82:8	82:25	6	case JPEG2000_TLM :
water	84:12	0:0	6	ret
op	84:16	0:0	6	=
call	84:18	84:32	6	get_tlm
arg	84:26	84:27	7	s
water	84:26	0:0	8	s
arg	84:29	84:32	7	len
water	84:29	0:0	8	len
water	84:33	0:0	6	;
break	85:12	85:17	6	
label	86:8	86:15	6	default :
call	87:12	89:54	6	av_log
arg	87:19	87:27	7	s->avctx
water	87:19	0:0	8	s
op	87:20	0:0	8	->
water	87:22	0:0	8	avctx
arg	87:29	87:41	7	AV_LOG_ERROR
water	87:29	0:0	8	AV_LOG_ERROR
arg	88:19	88:67	7	"unsupported marker 0x%.4"PRIX16" at pos 0x%X\n"
water	88:19	0:0	8	"unsupported marker 0x%.4"
water	88:45	0:0	8	PRIX16
water	88:51	0:0	8	" at pos 0x%X\n"
arg	89:19	89:25	7	marker
water	89:19	0:0	8	marker
arg	89:27	89:54	7	bytestream2_tell(&s->g)-4
call	89:27	89:49	8	bytestream2_tell
arg	89:44	89:49	9	&s->g
op	89:44	0:0	10	&
water	89:45	0:0	10	s
op	89:46	0:0	10	->
water	89:48	0:0	10	g
op	89:51	0:0	8	-
water	89:53	0:0	8	4
water	89:55	0:0	6	;
call	90:12	90:43	6	bytestream2_skip
arg	90:29	90:34	7	&s->g
op	90:29	0:0	8	&
water	90:30	0:0	8	s
op	90:31	0:0	8	->
water	90:33	0:0	8	g
arg	90:36	90:43	7	len-2
water	90:36	0:0	8	len
op	90:40	0:0	8	-
water	90:42	0:0	8	2
water	90:44	0:0	6	;
break	91:12	91:17	6	
water	92:8	0:0	6	}
if	93:8	98:8	4	(bytestream2_tell (& s -> g ) - oldpos != len || ret)
cond	93:12	93:55	5	bytestream2_tell (& s -> g ) - oldpos != len || ret
call	93:12	93:34	6	bytestream2_tell
arg	93:29	93:34	7	&s->g
op	93:29	0:0	8	&
water	93:30	0:0	8	s
op	93:31	0:0	8	->
water	93:33	0:0	8	g
op	93:36	0:0	6	-
water	93:38	0:0	6	oldpos
op	93:45	0:0	6	!=
water	93:48	0:0	6	len
op	93:52	0:0	6	||
water	93:55	0:0	6	ret
stmts	93:60	98:8	5	
water	93:60	0:0	6	{
call	94:12	96:25	6	av_log
arg	94:19	94:27	7	s->avctx
water	94:19	0:0	8	s
op	94:20	0:0	8	->
water	94:22	0:0	8	avctx
arg	94:29	94:41	7	AV_LOG_ERROR
water	94:29	0:0	8	AV_LOG_ERROR
arg	95:19	95:73	7	"error during processing marker segment %.4"PRIx16"\n"
water	95:19	0:0	8	"error during processing marker segment %.4"
water	95:63	0:0	8	PRIx16
water	95:69	0:0	8	"\n"
arg	96:19	96:25	7	marker
water	96:19	0:0	8	marker
water	96:26	0:0	6	;
return	97:12	97:33	6	ret?ret:-1
water	97:19	0:0	7	ret
water	97:23	0:0	7	?
water	97:25	0:0	7	ret
water	97:29	0:0	7	:
op	97:31	0:0	7	-
water	97:32	0:0	7	1
water	98:8	0:0	6	}
water	99:4	0:0	4	}
return	100:4	100:12	2	0
water	100:11	0:0	3	0
