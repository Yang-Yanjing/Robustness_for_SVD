func	2:0	144:0	0	static int	fourxm_read_header
params	2:29	0:0	1	
param	2:30	2:48	2	AVFormatContext *	s
param	3:30	3:52	2	AVFormatParameters *	ap
stmnts	0:0	143:14	1	
decl	5:4	5:29	2	ByteIOContext	*pb
op	5:22	0:0	2	=
water	5:24	0:0	2	s
op	5:25	0:0	2	->
water	5:27	0:0	2	pb
decl	6:4	6:27	2	unsigned int	fourcc_tag
decl	7:4	7:21	2	unsigned int	size
decl	8:4	8:19	2	int	header_size
decl	9:4	9:45	2	FourxmDemuxContext	*fourxm
op	9:31	0:0	2	=
water	9:33	0:0	2	s
op	9:34	0:0	2	->
water	9:36	0:0	2	priv_data
decl	10:4	10:25	2	unsigned char	*header
decl	11:4	11:14	2	int	i
water	11:9	0:0	2	,
decl	11:4	11:14	2	int	ret
decl	12:4	12:16	2	AVStream	*st
water	14:4	0:0	2	fourxm
op	14:10	0:0	2	->
water	14:12	0:0	2	track_count
op	14:24	0:0	2	=
water	14:26	0:0	2	0
water	14:27	0:0	2	;
water	15:4	0:0	2	fourxm
op	15:10	0:0	2	->
water	15:12	0:0	2	tracks
op	15:19	0:0	2	=
water	15:21	0:0	2	NULL
water	15:25	0:0	2	;
water	16:4	0:0	2	fourxm
op	16:10	0:0	2	->
water	16:12	0:0	2	fps
op	16:16	0:0	2	=
water	16:18	0:0	2	1
op	16:19	0:0	2	.
water	16:20	0:0	2	0
water	16:21	0:0	2	;
call	19:4	19:30	2	url_fseek
arg	19:14	19:16	3	pb
water	19:14	0:0	4	pb
arg	19:18	19:20	3	12
water	19:18	0:0	4	12
arg	19:22	19:30	3	SEEK_CUR
water	19:22	0:0	4	SEEK_CUR
water	19:31	0:0	2	;
call	22:4	22:20	2	GET_LIST_HEADER
water	22:21	0:0	2	;
water	23:4	0:0	2	header_size
op	23:16	0:0	2	=
water	23:18	0:0	2	size
op	23:23	0:0	2	-
water	23:25	0:0	2	4
water	23:26	0:0	2	;
if	24:4	25:34	2	(fourcc_tag != HEAD_TAG || header_size < 0)
cond	24:8	24:48	3	fourcc_tag != HEAD_TAG || header_size < 0
water	24:8	0:0	4	fourcc_tag
op	24:19	0:0	4	!=
water	24:22	0:0	4	HEAD_TAG
op	24:31	0:0	4	||
water	24:34	0:0	4	header_size
op	24:46	0:0	4	<
water	24:48	0:0	4	0
stmts	25:8	25:34	3	
return	25:8	25:34	4	AVERROR_INVALIDDATA
water	25:15	0:0	5	AVERROR_INVALIDDATA
water	28:4	0:0	2	header
op	28:11	0:0	2	=
call	28:13	28:34	2	av_malloc
arg	28:23	28:34	3	header_size
water	28:23	0:0	4	header_size
water	28:35	0:0	2	;
if	29:4	30:30	2	(! header)
cond	29:8	29:9	3	! header
op	29:8	0:0	4	!
water	29:9	0:0	4	header
stmts	30:8	30:30	3	
return	30:8	30:30	4	AVERROR(ENOMEM)
call	30:15	30:29	5	AVERROR
arg	30:23	30:29	6	ENOMEM
water	30:23	0:0	7	ENOMEM
if	31:4	34:4	2	(get_buffer (pb ,header ,header_size ) != header_size)
cond	31:8	31:47	3	get_buffer (pb ,header ,header_size ) != header_size
call	31:8	31:42	4	get_buffer
arg	31:19	31:21	5	pb
water	31:19	0:0	6	pb
arg	31:23	31:29	5	header
water	31:23	0:0	6	header
arg	31:31	31:42	5	header_size
water	31:31	0:0	6	header_size
op	31:44	0:0	4	!=
water	31:47	0:0	4	header_size
stmts	31:59	34:4	3	
water	31:59	0:0	4	{
call	32:8	32:22	4	av_free
arg	32:16	32:22	5	header
water	32:16	0:0	6	header
water	32:23	0:0	4	;
return	33:8	33:27	4	AVERROR(EIO)
call	33:15	33:26	5	AVERROR
arg	33:23	33:26	6	EIO
water	33:23	0:0	7	EIO
water	34:4	0:0	4	}
for	37:4	126:4	2	(i = 0 ;i < header_size - 8;i ++)
forinit	37:9	37:14	3	i = 0 ;
water	37:9	0:0	4	i
op	37:11	0:0	4	=
water	37:13	0:0	4	0
water	37:14	0:0	4	;
cond	37:16	37:34	3	i < header_size - 8
water	37:16	0:0	4	i
op	37:18	0:0	4	<
water	37:20	0:0	4	header_size
op	37:32	0:0	4	-
water	37:34	0:0	4	8
forexpr	37:37	37:38	3	i ++
water	37:37	0:0	4	i
op	37:38	0:0	4	++
stmts	37:42	126:4	3	
water	37:42	0:0	4	{
water	38:8	0:0	4	fourcc_tag
op	38:19	0:0	4	=
call	38:21	38:39	4	AV_RL32
arg	38:29	38:39	5	&header[i]
op	38:29	0:0	6	&
water	38:30	0:0	6	header
op	38:36	0:0	6	[
water	38:37	0:0	6	i
op	38:38	0:0	6	]
water	38:40	0:0	4	;
water	39:8	0:0	4	size
op	39:13	0:0	4	=
call	39:15	39:37	4	AV_RL32
arg	39:23	39:37	5	&header[i+4]
op	39:23	0:0	6	&
water	39:24	0:0	6	header
op	39:30	0:0	6	[
water	39:31	0:0	6	i
op	39:33	0:0	6	+
water	39:35	0:0	6	4
op	39:36	0:0	6	]
water	39:38	0:0	4	;
if	41:8	43:8	4	(fourcc_tag == std__TAG)
cond	41:12	41:26	5	fourcc_tag == std__TAG
water	41:12	0:0	6	fourcc_tag
op	41:23	0:0	6	==
water	41:26	0:0	6	std__TAG
stmts	41:36	43:8	5	
water	41:36	0:0	6	{
water	42:12	0:0	6	fourxm
op	42:18	0:0	6	->
water	42:20	0:0	6	fps
op	42:24	0:0	6	=
call	42:26	42:61	6	av_int2flt
arg	42:37	42:61	7	AV_RL32(&header[i+12])
call	42:37	42:60	8	AV_RL32
arg	42:45	42:60	9	&header[i+12]
op	42:45	0:0	10	&
water	42:46	0:0	10	header
op	42:52	0:0	10	[
water	42:53	0:0	10	i
op	42:55	0:0	10	+
water	42:57	0:0	10	12
op	42:59	0:0	10	]
water	42:62	0:0	6	;
water	43:8	0:0	6	}
else	43:10	71:8	4
stmts	43:15	71:8	5	
if	43:15	71:8	6	(fourcc_tag == vtrk_TAG)
cond	43:19	43:33	7	fourcc_tag == vtrk_TAG
water	43:19	0:0	8	fourcc_tag
op	43:30	0:0	8	==
water	43:33	0:0	8	vtrk_TAG
stmts	43:43	71:8	7	
water	43:43	0:0	8	{
if	45:12	48:12	8	(size != vtrk_SIZE)
cond	45:16	45:24	9	size != vtrk_SIZE
water	45:16	0:0	10	size
op	45:21	0:0	10	!=
water	45:24	0:0	10	vtrk_SIZE
stmts	45:35	48:12	9	
water	45:35	0:0	10	{
water	46:16	0:0	10	ret
op	46:19	0:0	10	=
water	46:21	0:0	10	AVERROR_INVALIDDATA
water	46:40	0:0	10	;
goto	47:16	47:25	10	fail
water	47:21	0:0	11	fail
water	48:12	0:0	10	}
water	49:12	0:0	8	fourxm
op	49:18	0:0	8	->
water	49:20	0:0	8	width
op	49:27	0:0	8	=
call	49:29	49:52	8	AV_RL32
arg	49:37	49:52	9	&header[i+36]
op	49:37	0:0	10	&
water	49:38	0:0	10	header
op	49:44	0:0	10	[
water	49:45	0:0	10	i
op	49:47	0:0	10	+
water	49:49	0:0	10	36
op	49:51	0:0	10	]
water	49:53	0:0	8	;
water	50:12	0:0	8	fourxm
op	50:18	0:0	8	->
water	50:20	0:0	8	height
op	50:27	0:0	8	=
call	50:29	50:52	8	AV_RL32
arg	50:37	50:52	9	&header[i+40]
op	50:37	0:0	10	&
water	50:38	0:0	10	header
op	50:44	0:0	10	[
water	50:45	0:0	10	i
op	50:47	0:0	10	+
water	50:49	0:0	10	40
op	50:51	0:0	10	]
water	50:53	0:0	8	;
water	53:12	0:0	8	st
op	53:15	0:0	8	=
call	53:17	53:35	8	av_new_stream
arg	53:31	53:32	9	s
water	53:31	0:0	10	s
arg	53:34	53:35	9	0
water	53:34	0:0	10	0
water	53:36	0:0	8	;
if	54:12	57:12	8	(! st)
cond	54:16	54:17	9	! st
op	54:16	0:0	10	!
water	54:17	0:0	10	st
stmts	54:20	57:12	9	
water	54:20	0:0	10	{
water	55:16	0:0	10	ret
op	55:19	0:0	10	=
call	55:21	55:35	10	AVERROR
arg	55:29	55:35	11	ENOMEM
water	55:29	0:0	12	ENOMEM
water	55:36	0:0	10	;
goto	56:16	56:25	10	fail
water	56:21	0:0	11	fail
water	57:12	0:0	10	}
call	58:12	58:50	8	av_set_pts_info
arg	58:28	58:30	9	st
water	58:28	0:0	10	st
arg	58:32	58:34	9	60
water	58:32	0:0	10	60
arg	58:36	58:37	9	1
water	58:36	0:0	10	1
arg	58:39	58:50	9	fourxm->fps
water	58:39	0:0	10	fourxm
op	58:45	0:0	10	->
water	58:47	0:0	10	fps
water	58:51	0:0	8	;
water	60:12	0:0	8	fourxm
op	60:18	0:0	8	->
water	60:20	0:0	8	video_stream_index
op	60:39	0:0	8	=
water	60:41	0:0	8	st
op	60:43	0:0	8	->
water	60:45	0:0	8	index
water	60:50	0:0	8	;
water	62:12	0:0	8	st
op	62:14	0:0	8	->
water	62:16	0:0	8	codec
op	62:21	0:0	8	->
water	62:23	0:0	8	codec_type
op	62:34	0:0	8	=
water	62:36	0:0	8	CODEC_TYPE_VIDEO
water	62:52	0:0	8	;
water	63:12	0:0	8	st
op	63:14	0:0	8	->
water	63:16	0:0	8	codec
op	63:21	0:0	8	->
water	63:23	0:0	8	codec_id
op	63:32	0:0	8	=
water	63:34	0:0	8	CODEC_ID_4XM
water	63:46	0:0	8	;
water	64:12	0:0	8	st
op	64:14	0:0	8	->
water	64:16	0:0	8	codec
op	64:21	0:0	8	->
water	64:23	0:0	8	extradata_size
op	64:38	0:0	8	=
water	64:40	0:0	8	4
water	64:41	0:0	8	;
water	65:12	0:0	8	st
op	65:14	0:0	8	->
water	65:16	0:0	8	codec
op	65:21	0:0	8	->
water	65:23	0:0	8	extradata
op	65:33	0:0	8	=
call	65:35	65:46	8	av_malloc
arg	65:45	65:46	9	4
water	65:45	0:0	10	4
water	65:47	0:0	8	;
call	66:12	66:66	8	AV_WL32
arg	66:20	66:40	9	st->codec->extradata
water	66:20	0:0	10	st
op	66:22	0:0	10	->
water	66:24	0:0	10	codec
op	66:29	0:0	10	->
water	66:31	0:0	10	extradata
arg	66:42	66:66	9	AV_RL32(&header[i+16])
call	66:42	66:65	10	AV_RL32
arg	66:50	66:65	11	&header[i+16]
op	66:50	0:0	12	&
water	66:51	0:0	12	header
op	66:57	0:0	12	[
water	66:58	0:0	12	i
op	66:60	0:0	12	+
water	66:62	0:0	12	16
op	66:64	0:0	12	]
water	66:67	0:0	8	;
water	67:12	0:0	8	st
op	67:14	0:0	8	->
water	67:16	0:0	8	codec
op	67:21	0:0	8	->
water	67:23	0:0	8	width
op	67:30	0:0	8	=
water	67:32	0:0	8	fourxm
op	67:38	0:0	8	->
water	67:40	0:0	8	width
water	67:45	0:0	8	;
water	68:12	0:0	8	st
op	68:14	0:0	8	->
water	68:16	0:0	8	codec
op	68:21	0:0	8	->
water	68:23	0:0	8	height
op	68:30	0:0	8	=
water	68:32	0:0	8	fourxm
op	68:38	0:0	8	->
water	68:40	0:0	8	height
water	68:46	0:0	8	;
water	70:12	0:0	8	i
op	70:14	0:0	8	+=
water	70:17	0:0	8	8
op	70:19	0:0	8	+
water	70:21	0:0	8	size
water	70:25	0:0	8	;
water	71:8	0:0	8	}
else	71:10	125:8	4
stmts	71:15	125:8	5	
if	71:15	125:8	6	(fourcc_tag == strk_TAG)
cond	71:19	71:33	7	fourcc_tag == strk_TAG
water	71:19	0:0	8	fourcc_tag
op	71:30	0:0	8	==
water	71:33	0:0	8	strk_TAG
stmts	71:43	125:8	7	
water	71:43	0:0	8	{
decl	72:12	72:29	8	int	current_track
if	74:12	77:12	8	(size != strk_SIZE)
cond	74:16	74:24	9	size != strk_SIZE
water	74:16	0:0	10	size
op	74:21	0:0	10	!=
water	74:24	0:0	10	strk_SIZE
stmts	74:35	77:12	9	
water	74:35	0:0	10	{
water	75:16	0:0	10	ret
op	75:19	0:0	10	=
water	75:21	0:0	10	AVERROR_INVALIDDATA
water	75:40	0:0	10	;
goto	76:16	76:25	10	fail
water	76:21	0:0	11	fail
water	77:12	0:0	10	}
water	78:12	0:0	8	current_track
op	78:26	0:0	8	=
call	78:28	78:50	8	AV_RL32
arg	78:36	78:50	9	&header[i+8]
op	78:36	0:0	10	&
water	78:37	0:0	10	header
op	78:43	0:0	10	[
water	78:44	0:0	10	i
op	78:46	0:0	10	+
water	78:48	0:0	10	8
op	78:49	0:0	10	]
water	78:51	0:0	8	;
if	79:12	83:12	8	(( unsigned ) current_track >= UINT_MAX / sizeof ( AudioTrack ) - 1)
cond	79:15	79:74	9	( unsigned ) current_track >= UINT_MAX / sizeof ( AudioTrack ) - 1
water	79:15	0:0	10	(
water	79:16	0:0	10	unsigned
water	79:24	0:0	10	)
water	79:25	0:0	10	current_track
op	79:39	0:0	10	>=
water	79:42	0:0	10	UINT_MAX
op	79:51	0:0	10	/
op	79:53	0:0	10	sizeof
water	79:59	0:0	10	(
water	79:60	0:0	10	AudioTrack
water	79:70	0:0	10	)
op	79:72	0:0	10	-
water	79:74	0:0	10	1
stmts	79:76	83:12	9	
water	79:76	0:0	10	{
call	80:16	80:67	10	av_log
arg	80:23	80:24	11	s
water	80:23	0:0	12	s
arg	80:26	80:38	11	AV_LOG_ERROR
water	80:26	0:0	12	AV_LOG_ERROR
arg	80:40	80:67	11	"current_track too large\n"
water	80:40	0:0	12	"current_track too large\n"
water	80:68	0:0	10	;
water	81:16	0:0	10	ret
op	81:19	0:0	10	=
op	81:21	0:0	10	-
water	81:22	0:0	10	1
water	81:23	0:0	10	;
goto	82:16	82:25	10	fail
water	82:21	0:0	11	fail
water	83:12	0:0	10	}
if	84:12	92:12	8	(current_track + 1 > fourxm -> track_count)
cond	84:16	84:44	9	current_track + 1 > fourxm -> track_count
water	84:16	0:0	10	current_track
op	84:30	0:0	10	+
water	84:32	0:0	10	1
op	84:34	0:0	10	>
water	84:36	0:0	10	fourxm
op	84:42	0:0	10	->
water	84:44	0:0	10	track_count
stmts	84:57	92:12	9	
water	84:57	0:0	10	{
water	85:16	0:0	10	fourxm
op	85:22	0:0	10	->
water	85:24	0:0	10	track_count
op	85:36	0:0	10	=
water	85:38	0:0	10	current_track
op	85:52	0:0	10	+
water	85:54	0:0	10	1
water	85:55	0:0	10	;
water	86:16	0:0	10	fourxm
op	86:22	0:0	10	->
water	86:24	0:0	10	tracks
op	86:31	0:0	10	=
call	86:33	87:60	10	av_realloc
arg	86:44	86:58	11	fourxm->tracks
water	86:44	0:0	12	fourxm
op	86:50	0:0	12	->
water	86:52	0:0	12	tracks
arg	87:20	87:60	11	fourxm->track_count*sizeof(AudioTrack)
water	87:20	0:0	12	fourxm
op	87:26	0:0	12	->
water	87:28	0:0	12	track_count
op	87:40	0:0	12	*
op	87:42	0:0	12	sizeof
water	87:48	0:0	12	(
water	87:49	0:0	12	AudioTrack
water	87:59	0:0	12	)
water	87:61	0:0	10	;
if	88:16	91:16	10	(! fourxm -> tracks)
cond	88:20	88:29	11	! fourxm -> tracks
op	88:20	0:0	12	!
water	88:21	0:0	12	fourxm
op	88:27	0:0	12	->
water	88:29	0:0	12	tracks
stmts	88:37	91:16	11	
water	88:37	0:0	12	{
water	89:20	0:0	12	ret
op	89:23	0:0	12	=
call	89:26	89:40	12	AVERROR
arg	89:34	89:40	13	ENOMEM
water	89:34	0:0	14	ENOMEM
water	89:41	0:0	12	;
goto	90:20	90:29	12	fail
water	90:25	0:0	13	fail
water	91:16	0:0	12	}
water	92:12	0:0	10	}
water	93:12	0:0	8	fourxm
op	93:18	0:0	8	->
water	93:20	0:0	8	tracks
op	93:26	0:0	8	[
water	93:27	0:0	8	current_track
op	93:40	0:0	8	]
op	93:41	0:0	8	.
water	93:42	0:0	8	adpcm
op	93:54	0:0	8	=
call	93:56	93:79	8	AV_RL32
arg	93:64	93:79	9	&header[i+12]
op	93:64	0:0	10	&
water	93:65	0:0	10	header
op	93:71	0:0	10	[
water	93:72	0:0	10	i
op	93:74	0:0	10	+
water	93:76	0:0	10	12
op	93:78	0:0	10	]
water	93:80	0:0	8	;
water	94:12	0:0	8	fourxm
op	94:18	0:0	8	->
water	94:20	0:0	8	tracks
op	94:26	0:0	8	[
water	94:27	0:0	8	current_track
op	94:40	0:0	8	]
op	94:41	0:0	8	.
water	94:42	0:0	8	channels
op	94:54	0:0	8	=
call	94:56	94:79	8	AV_RL32
arg	94:64	94:79	9	&header[i+36]
op	94:64	0:0	10	&
water	94:65	0:0	10	header
op	94:71	0:0	10	[
water	94:72	0:0	10	i
op	94:74	0:0	10	+
water	94:76	0:0	10	36
op	94:78	0:0	10	]
water	94:80	0:0	8	;
water	95:12	0:0	8	fourxm
op	95:18	0:0	8	->
water	95:20	0:0	8	tracks
op	95:26	0:0	8	[
water	95:27	0:0	8	current_track
op	95:40	0:0	8	]
op	95:41	0:0	8	.
water	95:42	0:0	8	sample_rate
op	95:54	0:0	8	=
call	95:56	95:79	8	AV_RL32
arg	95:64	95:79	9	&header[i+40]
op	95:64	0:0	10	&
water	95:65	0:0	10	header
op	95:71	0:0	10	[
water	95:72	0:0	10	i
op	95:74	0:0	10	+
water	95:76	0:0	10	40
op	95:78	0:0	10	]
water	95:80	0:0	8	;
water	96:12	0:0	8	fourxm
op	96:18	0:0	8	->
water	96:20	0:0	8	tracks
op	96:26	0:0	8	[
water	96:27	0:0	8	current_track
op	96:40	0:0	8	]
op	96:41	0:0	8	.
water	96:42	0:0	8	bits
op	96:54	0:0	8	=
call	96:56	96:79	8	AV_RL32
arg	96:64	96:79	9	&header[i+44]
op	96:64	0:0	10	&
water	96:65	0:0	10	header
op	96:71	0:0	10	[
water	96:72	0:0	10	i
op	96:74	0:0	10	+
water	96:76	0:0	10	44
op	96:78	0:0	10	]
water	96:80	0:0	8	;
water	97:12	0:0	8	fourxm
op	97:18	0:0	8	->
water	97:20	0:0	8	tracks
op	97:26	0:0	8	[
water	97:27	0:0	8	current_track
op	97:40	0:0	8	]
op	97:41	0:0	8	.
water	97:42	0:0	8	audio_pts
op	97:54	0:0	8	=
water	97:56	0:0	8	0
water	97:57	0:0	8	;
water	98:12	0:0	8	i
op	98:14	0:0	8	+=
water	98:17	0:0	8	8
op	98:19	0:0	8	+
water	98:21	0:0	8	size
water	98:25	0:0	8	;
water	101:12	0:0	8	st
op	101:15	0:0	8	=
call	101:17	101:47	8	av_new_stream
arg	101:31	101:32	9	s
water	101:31	0:0	10	s
arg	101:34	101:47	9	current_track
water	101:34	0:0	10	current_track
water	101:48	0:0	8	;
if	102:12	105:12	8	(! st)
cond	102:16	102:17	9	! st
op	102:16	0:0	10	!
water	102:17	0:0	10	st
stmts	102:20	105:12	9	
water	102:20	0:0	10	{
water	103:16	0:0	10	ret
op	103:19	0:0	10	=
call	103:21	103:35	10	AVERROR
arg	103:29	103:35	11	ENOMEM
water	103:29	0:0	12	ENOMEM
water	103:36	0:0	10	;
goto	104:16	104:25	10	fail
water	104:21	0:0	11	fail
water	105:12	0:0	10	}
call	107:12	107:80	8	av_set_pts_info
arg	107:28	107:30	9	st
water	107:28	0:0	10	st
arg	107:32	107:34	9	60
water	107:32	0:0	10	60
arg	107:36	107:37	9	1
water	107:36	0:0	10	1
arg	107:39	107:80	9	fourxm->tracks[current_track].sample_rate
water	107:39	0:0	10	fourxm
op	107:45	0:0	10	->
water	107:47	0:0	10	tracks
op	107:53	0:0	10	[
water	107:54	0:0	10	current_track
op	107:67	0:0	10	]
op	107:68	0:0	10	.
water	107:69	0:0	10	sample_rate
water	107:81	0:0	8	;
water	109:12	0:0	8	fourxm
op	109:18	0:0	8	->
water	109:20	0:0	8	tracks
op	109:26	0:0	8	[
water	109:27	0:0	8	current_track
op	109:40	0:0	8	]
op	109:41	0:0	8	.
water	109:42	0:0	8	stream_index
op	109:55	0:0	8	=
water	109:57	0:0	8	st
op	109:59	0:0	8	->
water	109:61	0:0	8	index
water	109:66	0:0	8	;
water	111:12	0:0	8	st
op	111:14	0:0	8	->
water	111:16	0:0	8	codec
op	111:21	0:0	8	->
water	111:23	0:0	8	codec_type
op	111:34	0:0	8	=
water	111:36	0:0	8	CODEC_TYPE_AUDIO
water	111:52	0:0	8	;
water	112:12	0:0	8	st
op	112:14	0:0	8	->
water	112:16	0:0	8	codec
op	112:21	0:0	8	->
water	112:23	0:0	8	codec_tag
op	112:33	0:0	8	=
water	112:35	0:0	8	0
water	112:36	0:0	8	;
water	113:12	0:0	8	st
op	113:14	0:0	8	->
water	113:16	0:0	8	codec
op	113:21	0:0	8	->
water	113:23	0:0	8	channels
op	113:45	0:0	8	=
water	113:47	0:0	8	fourxm
op	113:53	0:0	8	->
water	113:55	0:0	8	tracks
op	113:61	0:0	8	[
water	113:62	0:0	8	current_track
op	113:75	0:0	8	]
op	113:76	0:0	8	.
water	113:77	0:0	8	channels
water	113:85	0:0	8	;
water	114:12	0:0	8	st
op	114:14	0:0	8	->
water	114:16	0:0	8	codec
op	114:21	0:0	8	->
water	114:23	0:0	8	sample_rate
op	114:45	0:0	8	=
water	114:47	0:0	8	fourxm
op	114:53	0:0	8	->
water	114:55	0:0	8	tracks
op	114:61	0:0	8	[
water	114:62	0:0	8	current_track
op	114:75	0:0	8	]
op	114:76	0:0	8	.
water	114:77	0:0	8	sample_rate
water	114:88	0:0	8	;
water	115:12	0:0	8	st
op	115:14	0:0	8	->
water	115:16	0:0	8	codec
op	115:21	0:0	8	->
water	115:23	0:0	8	bits_per_coded_sample
op	115:45	0:0	8	=
water	115:47	0:0	8	fourxm
op	115:53	0:0	8	->
water	115:55	0:0	8	tracks
op	115:61	0:0	8	[
water	115:62	0:0	8	current_track
op	115:75	0:0	8	]
op	115:76	0:0	8	.
water	115:77	0:0	8	bits
water	115:81	0:0	8	;
water	116:12	0:0	8	st
op	116:14	0:0	8	->
water	116:16	0:0	8	codec
op	116:21	0:0	8	->
water	116:23	0:0	8	bit_rate
op	116:45	0:0	8	=
water	116:47	0:0	8	st
op	116:49	0:0	8	->
water	116:51	0:0	8	codec
op	116:56	0:0	8	->
water	116:58	0:0	8	channels
op	116:67	0:0	8	*
water	116:69	0:0	8	st
op	116:71	0:0	8	->
water	116:73	0:0	8	codec
op	116:78	0:0	8	->
water	116:80	0:0	8	sample_rate
op	116:92	0:0	8	*
water	117:16	0:0	8	st
op	117:18	0:0	8	->
water	117:20	0:0	8	codec
op	117:25	0:0	8	->
water	117:27	0:0	8	bits_per_coded_sample
water	117:48	0:0	8	;
water	118:12	0:0	8	st
op	118:14	0:0	8	->
water	118:16	0:0	8	codec
op	118:21	0:0	8	->
water	118:23	0:0	8	block_align
op	118:35	0:0	8	=
water	118:37	0:0	8	st
op	118:39	0:0	8	->
water	118:41	0:0	8	codec
op	118:46	0:0	8	->
water	118:48	0:0	8	channels
op	118:57	0:0	8	*
water	118:59	0:0	8	st
op	118:61	0:0	8	->
water	118:63	0:0	8	codec
op	118:68	0:0	8	->
water	118:70	0:0	8	bits_per_coded_sample
water	118:91	0:0	8	;
if	119:12	121:12	8	(fourxm -> tracks [ current_track ] . adpcm)
cond	119:16	119:46	9	fourxm -> tracks [ current_track ] . adpcm
water	119:16	0:0	10	fourxm
op	119:22	0:0	10	->
water	119:24	0:0	10	tracks
op	119:30	0:0	10	[
water	119:31	0:0	10	current_track
op	119:44	0:0	10	]
op	119:45	0:0	10	.
water	119:46	0:0	10	adpcm
stmts	119:52	121:12	9	
water	119:52	0:0	10	{
water	120:16	0:0	10	st
op	120:18	0:0	10	->
water	120:20	0:0	10	codec
op	120:25	0:0	10	->
water	120:27	0:0	10	codec_id
op	120:36	0:0	10	=
water	120:38	0:0	10	CODEC_ID_ADPCM_4XM
water	120:56	0:0	10	;
water	121:12	0:0	10	}
else	121:13	123:12	8
stmts	121:18	123:12	9	
if	121:18	123:12	10	(st -> codec -> bits_per_coded_sample == 8)
cond	121:22	121:58	11	st -> codec -> bits_per_coded_sample == 8
water	121:22	0:0	12	st
op	121:24	0:0	12	->
water	121:26	0:0	12	codec
op	121:31	0:0	12	->
water	121:33	0:0	12	bits_per_coded_sample
op	121:55	0:0	12	==
water	121:58	0:0	12	8
stmts	121:60	123:12	11	
water	121:60	0:0	12	{
water	122:16	0:0	12	st
op	122:18	0:0	12	->
water	122:20	0:0	12	codec
op	122:25	0:0	12	->
water	122:27	0:0	12	codec_id
op	122:36	0:0	12	=
water	122:38	0:0	12	CODEC_ID_PCM_U8
water	122:53	0:0	12	;
water	123:12	0:0	12	}
else	123:13	124:56	8
stmts	124:16	124:56	9	
water	124:16	0:0	10	st
op	124:18	0:0	10	->
water	124:20	0:0	10	codec
op	124:25	0:0	10	->
water	124:27	0:0	10	codec_id
op	124:36	0:0	10	=
water	124:38	0:0	10	CODEC_ID_PCM_S16LE
water	124:56	0:0	10	;
water	125:8	0:0	8	}
water	126:4	0:0	4	}
call	129:4	129:20	2	GET_LIST_HEADER
water	129:21	0:0	2	;
if	130:4	133:4	2	(fourcc_tag != MOVI_TAG)
cond	130:8	130:22	3	fourcc_tag != MOVI_TAG
water	130:8	0:0	4	fourcc_tag
op	130:19	0:0	4	!=
water	130:22	0:0	4	MOVI_TAG
stmts	130:31	133:4	3	
water	130:31	0:0	4	{
water	131:8	0:0	4	ret
op	131:11	0:0	4	=
water	131:13	0:0	4	AVERROR_INVALIDDATA
water	131:32	0:0	4	;
goto	132:8	132:17	4	fail
water	132:13	0:0	5	fail
water	133:4	0:0	4	}
call	135:4	135:18	2	av_free
arg	135:12	135:18	3	header
water	135:12	0:0	4	header
water	135:19	0:0	2	;
water	137:4	0:0	2	fourxm
op	137:10	0:0	2	->
water	137:12	0:0	2	video_pts
op	137:22	0:0	2	=
op	137:24	0:0	2	-
water	137:25	0:0	2	1
water	137:26	0:0	2	;
return	139:4	139:12	2	0
water	139:11	0:0	3	0
label	140:0	140:4	2	fail :
call	141:4	141:28	2	av_freep
arg	141:13	141:28	3	&fourxm->tracks
op	141:13	0:0	4	&
water	141:14	0:0	4	fourxm
op	141:20	0:0	4	->
water	141:22	0:0	4	tracks
water	141:29	0:0	2	;
call	142:4	142:18	2	av_free
arg	142:12	142:18	3	header
water	142:12	0:0	4	header
water	142:19	0:0	2	;
return	143:4	143:14	2	ret
water	143:11	0:0	3	ret
