func	2:15	91:0	0	int	aac_decode_init
params	2:34	0:0	1	
param	2:35	2:56	2	AVCodecContext *	avctx
stmnts	0:0	90:12	1	
decl	4:4	4:37	2	AACContext	*ac
op	4:19	0:0	2	=
water	4:21	0:0	2	avctx
op	4:26	0:0	2	->
water	4:28	0:0	2	priv_data
decl	5:4	5:29	2	float	output_scale_factor
water	7:4	0:0	2	ac
op	7:6	0:0	2	->
water	7:8	0:0	2	avctx
op	7:14	0:0	2	=
water	7:16	0:0	2	avctx
water	7:21	0:0	2	;
water	8:4	0:0	2	ac
op	8:6	0:0	2	->
water	8:8	0:0	2	m4ac
op	8:12	0:0	2	.
water	8:13	0:0	2	sample_rate
op	8:25	0:0	2	=
water	8:27	0:0	2	avctx
op	8:32	0:0	2	->
water	8:34	0:0	2	sample_rate
water	8:45	0:0	2	;
if	10:4	15:4	2	(avctx -> extradata_size > 0)
cond	10:8	10:32	3	avctx -> extradata_size > 0
water	10:8	0:0	4	avctx
op	10:13	0:0	4	->
water	10:15	0:0	4	extradata_size
op	10:30	0:0	4	>
water	10:32	0:0	4	0
stmts	10:35	15:4	3	
water	10:35	0:0	4	{
if	11:8	14:21	4	(decode_audio_specific_config (ac ,ac -> avctx ,& ac -> m4ac ,avctx -> extradata ,avctx -> extradata_size * 8 ,1 ) < 0)
cond	11:12	13:71	5	decode_audio_specific_config (ac ,ac -> avctx ,& ac -> m4ac ,avctx -> extradata ,avctx -> extradata_size * 8 ,1 ) < 0
call	11:12	13:67	6	decode_audio_specific_config
arg	11:41	11:43	7	ac
water	11:41	0:0	8	ac
arg	11:45	11:54	7	ac->avctx
water	11:45	0:0	8	ac
op	11:47	0:0	8	->
water	11:49	0:0	8	avctx
arg	11:56	11:65	7	&ac->m4ac
op	11:56	0:0	8	&
water	11:57	0:0	8	ac
op	11:59	0:0	8	->
water	11:61	0:0	8	m4ac
arg	12:41	12:57	7	avctx->extradata
water	12:41	0:0	8	avctx
op	12:46	0:0	8	->
water	12:48	0:0	8	extradata
arg	13:41	13:64	7	avctx->extradata_size*8
water	13:41	0:0	8	avctx
op	13:46	0:0	8	->
water	13:48	0:0	8	extradata_size
op	13:62	0:0	8	*
water	13:63	0:0	8	8
arg	13:66	13:67	7	1
water	13:66	0:0	8	1
op	13:69	0:0	6	<
water	13:71	0:0	6	0
stmts	14:12	14:21	5	
return	14:12	14:21	6	-1
op	14:19	0:0	7	-
water	14:20	0:0	7	1
water	15:4	0:0	4	}
else	15:6	40:4	2
stmts	15:11	40:4	3	
water	15:11	0:0	4	{
decl	16:8	16:17	4	int	sr
water	16:14	0:0	4	,
decl	16:8	16:17	4	int	i
water	17:8	0:0	4	enum
water	17:13	0:0	4	ChannelPosition
water	17:29	0:0	4	new_che_pos
op	17:40	0:0	4	[
water	17:41	0:0	4	4
op	17:42	0:0	4	]
op	17:43	0:0	4	[
water	17:44	0:0	4	MAX_ELEM_ID
op	17:55	0:0	4	]
water	17:56	0:0	4	;
water	19:8	0:0	4	sr
op	19:11	0:0	4	=
call	19:13	19:47	4	sample_rate_idx
arg	19:29	19:47	5	avctx->sample_rate
water	19:29	0:0	6	avctx
op	19:34	0:0	6	->
water	19:36	0:0	6	sample_rate
water	19:48	0:0	4	;
water	20:8	0:0	4	ac
op	20:10	0:0	4	->
water	20:12	0:0	4	m4ac
op	20:16	0:0	4	.
water	20:17	0:0	4	sampling_index
op	20:32	0:0	4	=
water	20:34	0:0	4	sr
water	20:36	0:0	4	;
water	21:8	0:0	4	ac
op	21:10	0:0	4	->
water	21:12	0:0	4	m4ac
op	21:16	0:0	4	.
water	21:17	0:0	4	channels
op	21:26	0:0	4	=
water	21:28	0:0	4	avctx
op	21:33	0:0	4	->
water	21:35	0:0	4	channels
water	21:43	0:0	4	;
water	22:8	0:0	4	ac
op	22:10	0:0	4	->
water	22:12	0:0	4	m4ac
op	22:16	0:0	4	.
water	22:17	0:0	4	sbr
op	22:21	0:0	4	=
op	22:23	0:0	4	-
water	22:24	0:0	4	1
water	22:25	0:0	4	;
water	23:8	0:0	4	ac
op	23:10	0:0	4	->
water	23:12	0:0	4	m4ac
op	23:16	0:0	4	.
water	23:17	0:0	4	ps
op	23:20	0:0	4	=
op	23:22	0:0	4	-
water	23:23	0:0	4	1
water	23:24	0:0	4	;
for	25:8	27:21	4	(i = 0 ;i <FF_ARRAY_ELEMS (ff_mpeg4audio_channels );i ++)
forinit	25:13	25:18	5	i = 0 ;
water	25:13	0:0	6	i
op	25:15	0:0	6	=
water	25:17	0:0	6	0
water	25:18	0:0	6	;
cond	25:20	25:61	5	i <FF_ARRAY_ELEMS (ff_mpeg4audio_channels )
water	25:20	0:0	6	i
op	25:22	0:0	6	<
call	25:24	25:61	6	FF_ARRAY_ELEMS
arg	25:39	25:61	7	ff_mpeg4audio_channels
water	25:39	0:0	8	ff_mpeg4audio_channels
forexpr	25:64	25:65	5	i ++
water	25:64	0:0	6	i
op	25:65	0:0	6	++
stmts	26:12	27:21	5	
if	26:12	27:21	6	(ff_mpeg4audio_channels [ i ] == avctx -> channels)
cond	26:16	26:52	7	ff_mpeg4audio_channels [ i ] == avctx -> channels
water	26:16	0:0	8	ff_mpeg4audio_channels
op	26:38	0:0	8	[
water	26:39	0:0	8	i
op	26:40	0:0	8	]
op	26:42	0:0	8	==
water	26:45	0:0	8	avctx
op	26:50	0:0	8	->
water	26:52	0:0	8	channels
stmts	27:16	27:21	7	
break	27:16	27:21	8	
if	28:8	30:8	4	(i ==FF_ARRAY_ELEMS (ff_mpeg4audio_channels ))
cond	28:12	28:54	5	i ==FF_ARRAY_ELEMS (ff_mpeg4audio_channels )
water	28:12	0:0	6	i
op	28:14	0:0	6	==
call	28:17	28:54	6	FF_ARRAY_ELEMS
arg	28:32	28:54	7	ff_mpeg4audio_channels
water	28:32	0:0	8	ff_mpeg4audio_channels
stmts	28:57	30:8	5	
water	28:57	0:0	6	{
water	29:12	0:0	6	i
op	29:14	0:0	6	=
water	29:16	0:0	6	0
water	29:17	0:0	6	;
water	30:8	0:0	6	}
water	31:8	0:0	4	ac
op	31:10	0:0	4	->
water	31:12	0:0	4	m4ac
op	31:16	0:0	4	.
water	31:17	0:0	4	chan_config
op	31:29	0:0	4	=
water	31:31	0:0	4	i
water	31:32	0:0	4	;
if	33:8	39:8	4	(ac -> m4ac . chan_config)
cond	33:12	33:21	5	ac -> m4ac . chan_config
water	33:12	0:0	6	ac
op	33:14	0:0	6	->
water	33:16	0:0	6	m4ac
op	33:20	0:0	6	.
water	33:21	0:0	6	chan_config
stmts	33:34	39:8	5	
water	33:34	0:0	6	{
decl	34:12	34:90	6	int	ret
op	34:20	0:0	6	=
call	34:22	34:89	7	set_default_channel_config
arg	34:49	34:54	8	avctx
water	34:49	0:0	9	avctx
arg	34:56	34:67	8	new_che_pos
water	34:56	0:0	9	new_che_pos
arg	34:69	34:89	8	ac->m4ac.chan_config
water	34:69	0:0	9	ac
op	34:71	0:0	9	->
water	34:73	0:0	9	m4ac
op	34:77	0:0	9	.
water	34:78	0:0	9	chan_config
if	35:12	36:99	6	(! ret)
cond	35:16	35:17	7	! ret
op	35:16	0:0	8	!
water	35:17	0:0	8	ret
stmts	36:16	36:99	7	
call	36:16	36:98	8	output_configure
arg	36:33	36:35	9	ac
water	36:33	0:0	10	ac
arg	36:37	36:48	9	ac->che_pos
water	36:37	0:0	10	ac
op	36:39	0:0	10	->
water	36:41	0:0	10	che_pos
arg	36:50	36:61	9	new_che_pos
water	36:50	0:0	10	new_che_pos
arg	36:63	36:83	9	ac->m4ac.chan_config
water	36:63	0:0	10	ac
op	36:65	0:0	10	->
water	36:67	0:0	10	m4ac
op	36:71	0:0	10	.
water	36:72	0:0	10	chan_config
arg	36:85	36:98	9	OC_GLOBAL_HDR
water	36:85	0:0	10	OC_GLOBAL_HDR
water	36:99	0:0	8	;
else	37:12	38:42	6
stmts	37:17	38:42	7	
if	37:17	38:42	8	(avctx -> err_recognition & AV_EF_EXPLODE)
cond	37:21	37:46	9	avctx -> err_recognition & AV_EF_EXPLODE
water	37:21	0:0	10	avctx
op	37:26	0:0	10	->
water	37:28	0:0	10	err_recognition
op	37:44	0:0	10	&
water	37:46	0:0	10	AV_EF_EXPLODE
stmts	38:16	38:42	9	
return	38:16	38:42	10	AVERROR_INVALIDDATA
water	38:23	0:0	11	AVERROR_INVALIDDATA
water	39:8	0:0	6	}
water	40:4	0:0	4	}
if	42:4	45:4	2	(avctx -> request_sample_fmt == AV_SAMPLE_FMT_FLT)
cond	42:8	42:37	3	avctx -> request_sample_fmt == AV_SAMPLE_FMT_FLT
water	42:8	0:0	4	avctx
op	42:13	0:0	4	->
water	42:15	0:0	4	request_sample_fmt
op	42:34	0:0	4	==
water	42:37	0:0	4	AV_SAMPLE_FMT_FLT
stmts	42:56	45:4	3	
water	42:56	0:0	4	{
water	43:8	0:0	4	avctx
op	43:13	0:0	4	->
water	43:15	0:0	4	sample_fmt
op	43:26	0:0	4	=
water	43:28	0:0	4	AV_SAMPLE_FMT_FLT
water	43:45	0:0	4	;
water	44:8	0:0	4	output_scale_factor
op	44:28	0:0	4	=
water	44:30	0:0	4	1
op	44:31	0:0	4	.
water	44:32	0:0	4	0
op	44:34	0:0	4	/
water	44:36	0:0	4	32768
op	44:41	0:0	4	.
water	44:42	0:0	4	0
water	44:43	0:0	4	;
water	45:4	0:0	4	}
else	45:6	48:4	2
stmts	45:11	48:4	3	
water	45:11	0:0	4	{
water	46:8	0:0	4	avctx
op	46:13	0:0	4	->
water	46:15	0:0	4	sample_fmt
op	46:26	0:0	4	=
water	46:28	0:0	4	AV_SAMPLE_FMT_S16
water	46:45	0:0	4	;
water	47:8	0:0	4	output_scale_factor
op	47:28	0:0	4	=
water	47:30	0:0	4	1
op	47:31	0:0	4	.
water	47:32	0:0	4	0
water	47:33	0:0	4	;
water	48:4	0:0	4	}
call	50:4	50:31	2	AAC_INIT_VLC_STATIC
arg	50:25	50:26	3	0
water	50:25	0:0	4	0
arg	50:28	50:31	3	304
water	50:28	0:0	4	304
water	50:32	0:0	2	;
call	51:4	51:31	2	AAC_INIT_VLC_STATIC
arg	51:25	51:26	3	1
water	51:25	0:0	4	1
arg	51:28	51:31	3	270
water	51:28	0:0	4	270
water	51:32	0:0	2	;
call	52:4	52:31	2	AAC_INIT_VLC_STATIC
arg	52:25	52:26	3	2
water	52:25	0:0	4	2
arg	52:28	52:31	3	550
water	52:28	0:0	4	550
water	52:32	0:0	2	;
call	53:4	53:31	2	AAC_INIT_VLC_STATIC
arg	53:25	53:26	3	3
water	53:25	0:0	4	3
arg	53:28	53:31	3	300
water	53:28	0:0	4	300
water	53:32	0:0	2	;
call	54:4	54:31	2	AAC_INIT_VLC_STATIC
arg	54:25	54:26	3	4
water	54:25	0:0	4	4
arg	54:28	54:31	3	328
water	54:28	0:0	4	328
water	54:32	0:0	2	;
call	55:4	55:31	2	AAC_INIT_VLC_STATIC
arg	55:25	55:26	3	5
water	55:25	0:0	4	5
arg	55:28	55:31	3	294
water	55:28	0:0	4	294
water	55:32	0:0	2	;
call	56:4	56:31	2	AAC_INIT_VLC_STATIC
arg	56:25	56:26	3	6
water	56:25	0:0	4	6
arg	56:28	56:31	3	306
water	56:28	0:0	4	306
water	56:32	0:0	2	;
call	57:4	57:31	2	AAC_INIT_VLC_STATIC
arg	57:25	57:26	3	7
water	57:25	0:0	4	7
arg	57:28	57:31	3	268
water	57:28	0:0	4	268
water	57:32	0:0	2	;
call	58:4	58:31	2	AAC_INIT_VLC_STATIC
arg	58:25	58:26	3	8
water	58:25	0:0	4	8
arg	58:28	58:31	3	510
water	58:28	0:0	4	510
water	58:32	0:0	2	;
call	59:4	59:31	2	AAC_INIT_VLC_STATIC
arg	59:25	59:26	3	9
water	59:25	0:0	4	9
arg	59:28	59:31	3	366
water	59:28	0:0	4	366
water	59:32	0:0	2	;
call	60:4	60:31	2	AAC_INIT_VLC_STATIC
arg	60:24	60:26	3	10
water	60:24	0:0	4	10
arg	60:28	60:31	3	462
water	60:28	0:0	4	462
water	60:32	0:0	2	;
call	62:4	62:20	2	ff_aac_sbr_init
water	62:21	0:0	2	;
call	64:4	64:32	2	dsputil_init
arg	64:17	64:25	3	&ac->dsp
op	64:17	0:0	4	&
water	64:18	0:0	4	ac
op	64:20	0:0	4	->
water	64:22	0:0	4	dsp
arg	64:27	64:32	3	avctx
water	64:27	0:0	4	avctx
water	64:33	0:0	2	;
call	65:4	65:44	2	ff_fmt_convert_init
arg	65:24	65:37	3	&ac->fmt_conv
op	65:24	0:0	4	&
water	65:25	0:0	4	ac
op	65:27	0:0	4	->
water	65:29	0:0	4	fmt_conv
arg	65:39	65:44	3	avctx
water	65:39	0:0	4	avctx
water	65:45	0:0	2	;
water	67:4	0:0	2	ac
op	67:6	0:0	2	->
water	67:8	0:0	2	random_state
op	67:21	0:0	2	=
water	67:23	0:0	2	0
water	67:24	0:0	2	x1f2e3d4c
water	67:33	0:0	2	;
call	69:4	69:21	2	ff_aac_tableinit
water	69:22	0:0	2	;
call	71:4	74:23	2	INIT_VLC_STATIC
arg	71:20	71:37	3	&vlc_scalefactors
op	71:20	0:0	4	&
water	71:21	0:0	4	vlc_scalefactors
arg	71:38	71:39	3	7
water	71:38	0:0	4	7
arg	71:40	71:79	3	FF_ARRAY_ELEMS(ff_aac_scalefactor_code)
call	71:40	71:78	4	FF_ARRAY_ELEMS
arg	71:55	71:78	5	ff_aac_scalefactor_code
water	71:55	0:0	6	ff_aac_scalefactor_code
arg	72:20	72:43	3	ff_aac_scalefactor_bits
water	72:20	0:0	4	ff_aac_scalefactor_bits
arg	72:45	72:79	3	sizeof(ff_aac_scalefactor_bits[0])
op	72:45	0:0	4	sizeof
water	72:51	0:0	4	(
water	72:52	0:0	4	ff_aac_scalefactor_bits
op	72:75	0:0	4	[
water	72:76	0:0	4	0
op	72:77	0:0	4	]
water	72:78	0:0	4	)
arg	72:81	72:115	3	sizeof(ff_aac_scalefactor_bits[0])
op	72:81	0:0	4	sizeof
water	72:87	0:0	4	(
water	72:88	0:0	4	ff_aac_scalefactor_bits
op	72:111	0:0	4	[
water	72:112	0:0	4	0
op	72:113	0:0	4	]
water	72:114	0:0	4	)
arg	73:20	73:43	3	ff_aac_scalefactor_code
water	73:20	0:0	4	ff_aac_scalefactor_code
arg	73:45	73:79	3	sizeof(ff_aac_scalefactor_code[0])
op	73:45	0:0	4	sizeof
water	73:51	0:0	4	(
water	73:52	0:0	4	ff_aac_scalefactor_code
op	73:75	0:0	4	[
water	73:76	0:0	4	0
op	73:77	0:0	4	]
water	73:78	0:0	4	)
arg	73:81	73:115	3	sizeof(ff_aac_scalefactor_code[0])
op	73:81	0:0	4	sizeof
water	73:87	0:0	4	(
water	73:88	0:0	4	ff_aac_scalefactor_code
op	73:111	0:0	4	[
water	73:112	0:0	4	0
op	73:113	0:0	4	]
water	73:114	0:0	4	)
arg	74:20	74:23	3	352
water	74:20	0:0	4	352
water	74:24	0:0	2	;
call	76:4	76:67	2	ff_mdct_init
arg	76:17	76:26	3	&ac->mdct
op	76:17	0:0	4	&
water	76:18	0:0	4	ac
op	76:20	0:0	4	->
water	76:22	0:0	4	mdct
arg	76:34	76:36	3	11
water	76:34	0:0	4	11
arg	76:38	76:39	3	1
water	76:38	0:0	4	1
arg	76:41	76:67	3	output_scale_factor/1024.0
water	76:41	0:0	4	output_scale_factor
op	76:60	0:0	4	/
water	76:61	0:0	4	1024
op	76:65	0:0	4	.
water	76:66	0:0	4	0
water	76:68	0:0	2	;
call	77:4	77:66	2	ff_mdct_init
arg	77:17	77:32	3	&ac->mdct_small
op	77:17	0:0	4	&
water	77:18	0:0	4	ac
op	77:20	0:0	4	->
water	77:22	0:0	4	mdct_small
arg	77:35	77:36	3	8
water	77:35	0:0	4	8
arg	77:38	77:39	3	1
water	77:38	0:0	4	1
arg	77:41	77:66	3	output_scale_factor/128.0
water	77:41	0:0	4	output_scale_factor
op	77:60	0:0	4	/
water	77:61	0:0	4	128
op	77:64	0:0	4	.
water	77:65	0:0	4	0
water	77:67	0:0	2	;
call	78:4	78:65	2	ff_mdct_init
arg	78:17	78:30	3	&ac->mdct_ltp
op	78:17	0:0	4	&
water	78:18	0:0	4	ac
op	78:20	0:0	4	->
water	78:22	0:0	4	mdct_ltp
arg	78:34	78:36	3	11
water	78:34	0:0	4	11
arg	78:38	78:39	3	0
water	78:38	0:0	4	0
arg	78:41	78:65	3	-2.0/output_scale_factor
op	78:41	0:0	4	-
water	78:42	0:0	4	2
op	78:43	0:0	4	.
water	78:44	0:0	4	0
op	78:45	0:0	4	/
water	78:46	0:0	4	output_scale_factor
water	78:66	0:0	2	;
call	80:4	80:54	2	ff_kbd_window_init
arg	80:23	80:43	3	ff_aac_kbd_long_1024
water	80:23	0:0	4	ff_aac_kbd_long_1024
arg	80:45	80:48	3	4.0
water	80:45	0:0	4	4
op	80:46	0:0	4	.
water	80:47	0:0	4	0
arg	80:50	80:54	3	1024
water	80:50	0:0	4	1024
water	80:55	0:0	2	;
call	81:4	81:53	2	ff_kbd_window_init
arg	81:23	81:43	3	ff_aac_kbd_short_128
water	81:23	0:0	4	ff_aac_kbd_short_128
arg	81:45	81:48	3	6.0
water	81:45	0:0	4	6
op	81:46	0:0	4	.
water	81:47	0:0	4	0
arg	81:50	81:53	3	128
water	81:50	0:0	4	128
water	81:54	0:0	2	;
call	82:4	82:30	2	ff_init_ff_sine_windows
arg	82:28	82:30	3	10
water	82:28	0:0	4	10
water	82:31	0:0	2	;
call	83:4	83:30	2	ff_init_ff_sine_windows
arg	83:29	83:30	3	7
water	83:29	0:0	4	7
water	83:31	0:0	2	;
call	85:4	85:19	2	cbrt_tableinit
water	85:20	0:0	2	;
call	87:4	87:41	2	avcodec_get_frame_defaults
arg	87:31	87:41	3	&ac->frame
op	87:31	0:0	4	&
water	87:32	0:0	4	ac
op	87:34	0:0	4	->
water	87:36	0:0	4	frame
water	87:42	0:0	2	;
water	88:4	0:0	2	avctx
op	88:9	0:0	2	->
water	88:11	0:0	2	coded_frame
op	88:23	0:0	2	=
op	88:25	0:0	2	&
water	88:26	0:0	2	ac
op	88:28	0:0	2	->
water	88:30	0:0	2	frame
water	88:35	0:0	2	;
return	90:4	90:12	2	0
water	90:11	0:0	3	0
