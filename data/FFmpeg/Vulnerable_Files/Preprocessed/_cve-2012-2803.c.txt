func	3:0	51:0	0	static int	mpeg_decode_frame
params	3:28	0:0	1	
param	3:29	3:50	2	AVCodecContext *	avctx
param	4:29	4:39	2	void *	data
param	4:41	4:55	2	int *	data_size
param	5:29	5:44	2	AVPacket *	avpkt
stmnts	0:0	50:66	1	
decl	7:4	7:36	2	const uint8_t	*buf
op	7:23	0:0	2	=
water	7:25	0:0	2	avpkt
op	7:30	0:0	2	->
water	7:32	0:0	2	data
decl	8:4	8:30	2	int	buf_size
op	8:17	0:0	2	=
water	8:19	0:0	2	avpkt
op	8:24	0:0	2	->
water	8:26	0:0	2	size
decl	9:4	9:38	2	Mpeg1Context	*s
op	9:20	0:0	2	=
water	9:22	0:0	2	avctx
op	9:27	0:0	2	->
water	9:29	0:0	2	priv_data
decl	10:4	10:27	2	AVFrame	*picture
op	10:21	0:0	2	=
water	10:23	0:0	2	data
decl	11:4	11:41	2	MpegEncContext	*s2
op	11:23	0:0	2	=
op	11:25	0:0	2	&
water	11:26	0:0	2	s
op	11:27	0:0	2	->
water	11:29	0:0	2	mpeg_enc_ctx
call	12:4	12:34	2	av_dlog
arg	12:12	12:17	3	avctx
water	12:12	0:0	4	avctx
arg	12:19	12:34	3	"fill_buffer\n"
water	12:19	0:0	4	"fill_buffer\n"
water	12:35	0:0	2	;
if	14:4	23:4	2	(buf_size == 0 || ( buf_size == 4 &&AV_RB32 (buf ) == SEQ_END_CODE ))
cond	14:8	14:71	3	buf_size == 0 || ( buf_size == 4 &&AV_RB32 (buf ) == SEQ_END_CODE )
water	14:8	0:0	4	buf_size
op	14:17	0:0	4	==
water	14:20	0:0	4	0
op	14:22	0:0	4	||
water	14:25	0:0	4	(
water	14:26	0:0	4	buf_size
op	14:35	0:0	4	==
water	14:38	0:0	4	4
op	14:40	0:0	4	&&
call	14:43	14:54	4	AV_RB32
arg	14:51	14:54	5	buf
water	14:51	0:0	6	buf
op	14:56	0:0	4	==
water	14:59	0:0	4	SEQ_END_CODE
water	14:71	0:0	4	)
stmts	14:74	23:4	3	
water	14:74	0:0	4	{
if	16:8	21:8	4	(s2 -> low_delay == 0 && s2 -> next_picture_ptr)
cond	16:12	16:36	5	s2 -> low_delay == 0 && s2 -> next_picture_ptr
water	16:12	0:0	6	s2
op	16:14	0:0	6	->
water	16:16	0:0	6	low_delay
op	16:25	0:0	6	==
water	16:27	0:0	6	0
op	16:29	0:0	6	&&
water	16:32	0:0	6	s2
op	16:34	0:0	6	->
water	16:36	0:0	6	next_picture_ptr
stmts	16:54	21:8	5	
water	16:54	0:0	6	{
op	17:12	0:0	6	*
water	17:13	0:0	6	picture
op	17:20	0:0	6	=
op	17:22	0:0	6	*
water	17:23	0:0	6	(
water	17:24	0:0	6	AVFrame
op	17:31	0:0	6	*
water	17:32	0:0	6	)
water	17:33	0:0	6	s2
op	17:35	0:0	6	->
water	17:37	0:0	6	next_picture_ptr
water	17:53	0:0	6	;
water	18:12	0:0	6	s2
op	18:14	0:0	6	->
water	18:16	0:0	6	next_picture_ptr
op	18:32	0:0	6	=
water	18:34	0:0	6	NULL
water	18:38	0:0	6	;
op	20:12	0:0	6	*
water	20:13	0:0	6	data_size
op	20:23	0:0	6	=
op	20:25	0:0	6	sizeof
water	20:31	0:0	6	(
water	20:32	0:0	6	AVFrame
water	20:39	0:0	6	)
water	20:40	0:0	6	;
water	21:8	0:0	6	}
return	22:8	22:23	4	buf_size
water	22:15	0:0	5	buf_size
water	23:4	0:0	4	}
if	25:4	30:4	2	(s2 -> flags & CODEC_FLAG_TRUNCATED)
cond	25:7	25:17	3	s2 -> flags & CODEC_FLAG_TRUNCATED
water	25:7	0:0	4	s2
op	25:9	0:0	4	->
water	25:11	0:0	4	flags
op	25:16	0:0	4	&
water	25:17	0:0	4	CODEC_FLAG_TRUNCATED
stmts	25:38	30:4	3	
water	25:38	0:0	4	{
decl	26:8	26:82	4	int	next
op	26:16	0:0	4	=
call	26:18	26:81	5	ff_mpeg1_find_frame_end
arg	26:42	26:60	6	&s2->parse_context
op	26:42	0:0	7	&
water	26:43	0:0	7	s2
op	26:45	0:0	7	->
water	26:47	0:0	7	parse_context
arg	26:62	26:65	6	buf
water	26:62	0:0	7	buf
arg	26:67	26:75	6	buf_size
water	26:67	0:0	7	buf_size
arg	26:77	26:81	6	NULL
water	26:77	0:0	7	NULL
if	28:8	29:27	4	(ff_combine_frame (& s2 -> parse_context ,next ,( const uint8_t * * ) & buf ,& buf_size ) < 0)
cond	28:12	28:92	5	ff_combine_frame (& s2 -> parse_context ,next ,( const uint8_t * * ) & buf ,& buf_size ) < 0
call	28:12	28:88	6	ff_combine_frame
arg	28:29	28:47	7	&s2->parse_context
op	28:29	0:0	8	&
water	28:30	0:0	8	s2
op	28:32	0:0	8	->
water	28:34	0:0	8	parse_context
arg	28:49	28:53	7	next
water	28:49	0:0	8	next
arg	28:55	28:77	7	(constuint8_t**)&buf
water	28:55	0:0	8	(
water	28:56	0:0	8	const
water	28:62	0:0	8	uint8_t
op	28:70	0:0	8	*
op	28:71	0:0	8	*
water	28:72	0:0	8	)
op	28:73	0:0	8	&
water	28:74	0:0	8	buf
arg	28:79	28:88	7	&buf_size
op	28:79	0:0	8	&
water	28:80	0:0	8	buf_size
op	28:90	0:0	6	<
water	28:92	0:0	6	0
stmts	29:12	29:27	5	
return	29:12	29:27	6	buf_size
water	29:19	0:0	7	buf_size
water	30:4	0:0	4	}
if	32:4	40:4	2	(s -> repeat_field % 2 == 1)
cond	32:8	32:31	3	s -> repeat_field % 2 == 1
water	32:8	0:0	4	s
op	32:9	0:0	4	->
water	32:11	0:0	4	repeat_field
op	32:24	0:0	4	%
water	32:26	0:0	4	2
op	32:28	0:0	4	==
water	32:31	0:0	4	1
stmts	32:34	40:4	3	
water	32:34	0:0	4	{
water	33:8	0:0	4	s
op	33:9	0:0	4	->
water	33:11	0:0	4	repeat_field
op	33:23	0:0	4	++
water	33:25	0:0	4	;
if	36:8	39:8	4	(avctx -> flags & CODEC_FLAG_REPEAT_FIELD)
cond	36:12	36:27	5	avctx -> flags & CODEC_FLAG_REPEAT_FIELD
water	36:12	0:0	6	avctx
op	36:17	0:0	6	->
water	36:19	0:0	6	flags
op	36:25	0:0	6	&
water	36:27	0:0	6	CODEC_FLAG_REPEAT_FIELD
stmts	36:52	39:8	5	
water	36:52	0:0	6	{
op	37:12	0:0	6	*
water	37:13	0:0	6	data_size
op	37:23	0:0	6	=
op	37:25	0:0	6	sizeof
water	37:31	0:0	6	(
water	37:32	0:0	6	AVPicture
water	37:41	0:0	6	)
water	37:42	0:0	6	;
goto	38:12	38:24	6	the_end
water	38:17	0:0	7	the_end
water	39:8	0:0	6	}
water	40:4	0:0	4	}
if	42:4	43:33	2	(s -> mpeg_enc_ctx_allocated == 0 && avctx -> codec_tag ==AV_RL32 ("VCR2" ))
cond	42:7	42:73	3	s -> mpeg_enc_ctx_allocated == 0 && avctx -> codec_tag ==AV_RL32 ("VCR2" )
water	42:7	0:0	4	s
op	42:8	0:0	4	->
water	42:10	0:0	4	mpeg_enc_ctx_allocated
op	42:32	0:0	4	==
water	42:34	0:0	4	0
op	42:36	0:0	4	&&
water	42:39	0:0	4	avctx
op	42:44	0:0	4	->
water	42:46	0:0	4	codec_tag
op	42:56	0:0	4	==
call	42:59	42:73	4	AV_RL32
arg	42:67	42:73	5	"VCR2"
water	42:67	0:0	6	"VCR2"
stmts	43:8	43:33	3	
call	43:8	43:32	4	vcr2_init_sequence
arg	43:27	43:32	5	avctx
water	43:27	0:0	6	avctx
water	43:33	0:0	4	;
water	45:4	0:0	2	s
op	45:5	0:0	2	->
water	45:7	0:0	2	slice_count
op	45:18	0:0	2	=
water	45:20	0:0	2	0
water	45:21	0:0	2	;
if	47:4	48:89	2	(avctx -> extradata && ! avctx -> frame_number)
cond	47:7	47:35	3	avctx -> extradata && ! avctx -> frame_number
water	47:7	0:0	4	avctx
op	47:12	0:0	4	->
water	47:14	0:0	4	extradata
op	47:24	0:0	4	&&
op	47:27	0:0	4	!
water	47:28	0:0	4	avctx
op	47:33	0:0	4	->
water	47:35	0:0	4	frame_number
stmts	48:8	48:89	3	
call	48:8	48:88	4	decode_chunks
arg	48:22	48:27	5	avctx
water	48:22	0:0	6	avctx
arg	48:29	48:36	5	picture
water	48:29	0:0	6	picture
arg	48:38	48:47	5	data_size
water	48:38	0:0	6	data_size
arg	48:49	48:65	5	avctx->extradata
water	48:49	0:0	6	avctx
op	48:54	0:0	6	->
water	48:56	0:0	6	extradata
arg	48:67	48:88	5	avctx->extradata_size
water	48:67	0:0	6	avctx
op	48:72	0:0	6	->
water	48:74	0:0	6	extradata_size
water	48:89	0:0	4	;
return	50:4	50:66	2	decode_chunks(avctx,picture,data_size,buf,buf_size)
call	50:11	50:65	3	decode_chunks
arg	50:25	50:30	4	avctx
water	50:25	0:0	5	avctx
arg	50:32	50:39	4	picture
water	50:32	0:0	5	picture
arg	50:41	50:50	4	data_size
water	50:41	0:0	5	data_size
arg	50:52	50:55	4	buf
water	50:52	0:0	5	buf
arg	50:57	50:65	4	buf_size
water	50:57	0:0	5	buf_size
