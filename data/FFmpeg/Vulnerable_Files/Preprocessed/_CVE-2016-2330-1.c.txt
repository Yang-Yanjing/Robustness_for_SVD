func	1:0	139:0	0	static int	gif_image_write_image
params	1:32	0:0	1	
param	1:33	1:54	2	AVCodecContext *	avctx
param	2:33	2:53	2	uint8_t * *	bytestream
param	2:55	2:67	2	uint8_t *	end
param	3:33	3:56	2	const uint32_t *	palette
param	4:33	4:51	2	const uint8_t *	buf
param	4:53	4:71	2	const int	linesize
param	5:33	5:46	2	AVPacket *	pkt
stmnts	0:0	138:12	1	
decl	7:4	7:36	2	GIFContext	*s
op	7:18	0:0	2	=
water	7:20	0:0	2	avctx
op	7:25	0:0	2	->
water	7:27	0:0	2	priv_data
decl	8:4	8:67	2	int	len
op	8:12	0:0	2	=
water	8:14	0:0	2	0
water	8:15	0:0	2	,
decl	8:4	8:67	2	int	height
op	8:24	0:0	2	=
water	8:26	0:0	2	avctx
op	8:31	0:0	2	->
water	8:33	0:0	2	height
water	8:39	0:0	2	,
decl	8:4	8:67	2	int	width
op	8:47	0:0	2	=
water	8:49	0:0	2	avctx
op	8:54	0:0	2	->
water	8:56	0:0	2	width
water	8:61	0:0	2	,
decl	8:4	8:67	2	int	x
water	8:64	0:0	2	,
decl	8:4	8:67	2	int	y
decl	9:4	9:62	2	int	x_start
op	9:16	0:0	2	=
water	9:18	0:0	2	0
water	9:19	0:0	2	,
decl	9:4	9:62	2	int	y_start
op	9:29	0:0	2	=
water	9:31	0:0	2	0
water	9:32	0:0	2	,
decl	9:4	9:62	2	int	trans
op	9:40	0:0	2	=
water	9:42	0:0	2	s
op	9:43	0:0	2	->
water	9:45	0:0	2	transparent_index
decl	10:4	10:71	2	int	honor_transparency
op	10:27	0:0	2	=
water	10:29	0:0	2	(
water	10:30	0:0	2	s
op	10:31	0:0	2	->
water	10:33	0:0	2	flags
op	10:39	0:0	2	&
water	10:41	0:0	2	GF_TRANSDIFF
water	10:53	0:0	2	)
op	10:55	0:0	2	&&
water	10:58	0:0	2	s
op	10:59	0:0	2	->
water	10:61	0:0	2	last_frame
decl	11:4	11:22	2	const uint8_t	*ptr
if	14:4	62:4	2	(( s -> flags & GF_OFFSETTING ) && s -> last_frame && ! palette)
cond	14:8	14:56	3	( s -> flags & GF_OFFSETTING ) && s -> last_frame && ! palette
water	14:8	0:0	4	(
water	14:9	0:0	4	s
op	14:10	0:0	4	->
water	14:12	0:0	4	flags
op	14:18	0:0	4	&
water	14:20	0:0	4	GF_OFFSETTING
water	14:33	0:0	4	)
op	14:35	0:0	4	&&
water	14:38	0:0	4	s
op	14:39	0:0	4	->
water	14:41	0:0	4	last_frame
op	14:52	0:0	4	&&
op	14:55	0:0	4	!
water	14:56	0:0	4	palette
stmts	14:65	62:4	3	
water	14:65	0:0	4	{
decl	15:8	15:51	4	const uint8_t	*ref
op	15:27	0:0	4	=
water	15:29	0:0	4	s
op	15:30	0:0	4	->
water	15:32	0:0	4	last_frame
op	15:42	0:0	4	->
water	15:44	0:0	4	data
op	15:48	0:0	4	[
water	15:49	0:0	4	0
op	15:50	0:0	4	]
decl	16:8	16:59	4	const int	ref_linesize
op	16:31	0:0	4	=
water	16:33	0:0	4	s
op	16:34	0:0	4	->
water	16:36	0:0	4	last_frame
op	16:46	0:0	4	->
water	16:48	0:0	4	linesize
op	16:56	0:0	4	[
water	16:57	0:0	4	0
op	16:58	0:0	4	]
decl	17:8	18:37	4	int	x_end
op	17:18	0:0	4	=
water	17:20	0:0	4	avctx
op	17:25	0:0	4	->
water	17:27	0:0	4	width
op	17:34	0:0	4	-
water	17:36	0:0	4	1
water	17:37	0:0	4	,
decl	17:8	18:37	4	int	y_end
op	18:18	0:0	4	=
water	18:20	0:0	4	avctx
op	18:25	0:0	4	->
water	18:27	0:0	4	height
op	18:34	0:0	4	-
water	18:36	0:0	4	1
while	21:8	25:8	4	(y_start < y_end)
cond	21:15	21:25	5	y_start < y_end
water	21:15	0:0	6	y_start
op	21:23	0:0	6	<
water	21:25	0:0	6	y_end
stmts	21:32	25:8	5	
water	21:32	0:0	6	{
if	22:12	23:21	6	(memcmp (ref + y_start * ref_linesize ,buf + y_start * linesize ,width ))
cond	22:16	22:80	7	memcmp (ref + y_start * ref_linesize ,buf + y_start * linesize ,width )
call	22:16	22:80	8	memcmp
arg	22:23	22:49	9	ref+y_start*ref_linesize
water	22:23	0:0	10	ref
op	22:27	0:0	10	+
water	22:29	0:0	10	y_start
op	22:36	0:0	10	*
water	22:37	0:0	10	ref_linesize
arg	22:51	22:73	9	buf+y_start*linesize
water	22:51	0:0	10	buf
op	22:55	0:0	10	+
water	22:57	0:0	10	y_start
op	22:64	0:0	10	*
water	22:65	0:0	10	linesize
arg	22:75	22:80	9	width
water	22:75	0:0	10	width
stmts	23:16	23:21	7	
break	23:16	23:21	8	
water	24:12	0:0	6	y_start
op	24:19	0:0	6	++
water	24:21	0:0	6	;
water	25:8	0:0	6	}
while	26:8	30:8	4	(y_end > y_start)
cond	26:15	26:23	5	y_end > y_start
water	26:15	0:0	6	y_end
op	26:21	0:0	6	>
water	26:23	0:0	6	y_start
stmts	26:32	30:8	5	
water	26:32	0:0	6	{
if	27:12	28:21	6	(memcmp (ref + y_end * ref_linesize ,buf + y_end * linesize ,width ))
cond	27:16	27:76	7	memcmp (ref + y_end * ref_linesize ,buf + y_end * linesize ,width )
call	27:16	27:76	8	memcmp
arg	27:23	27:47	9	ref+y_end*ref_linesize
water	27:23	0:0	10	ref
op	27:27	0:0	10	+
water	27:29	0:0	10	y_end
op	27:34	0:0	10	*
water	27:35	0:0	10	ref_linesize
arg	27:49	27:69	9	buf+y_end*linesize
water	27:49	0:0	10	buf
op	27:53	0:0	10	+
water	27:55	0:0	10	y_end
op	27:60	0:0	10	*
water	27:61	0:0	10	linesize
arg	27:71	27:76	9	width
water	27:71	0:0	10	width
stmts	28:16	28:21	7	
break	28:16	28:21	8	
water	29:12	0:0	6	y_end
op	29:17	0:0	6	--
water	29:19	0:0	6	;
water	30:8	0:0	6	}
water	31:8	0:0	4	height
op	31:15	0:0	4	=
water	31:17	0:0	4	y_end
op	31:23	0:0	4	+
water	31:25	0:0	4	1
op	31:27	0:0	4	-
water	31:29	0:0	4	y_start
water	31:36	0:0	4	;
while	34:8	45:8	4	(x_start < x_end)
cond	34:15	34:25	5	x_start < x_end
water	34:15	0:0	6	x_start
op	34:23	0:0	6	<
water	34:25	0:0	6	x_end
stmts	34:32	45:8	5	
water	34:32	0:0	6	{
decl	35:12	35:31	6	int	same_column
op	35:28	0:0	6	=
water	35:30	0:0	6	1
for	36:12	41:12	6	(y = y_start ;y <= y_end;y ++)
forinit	36:17	36:28	7	y = y_start ;
water	36:17	0:0	8	y
op	36:19	0:0	8	=
water	36:21	0:0	8	y_start
water	36:28	0:0	8	;
cond	36:30	36:35	7	y <= y_end
water	36:30	0:0	8	y
op	36:32	0:0	8	<=
water	36:35	0:0	8	y_end
forexpr	36:42	36:43	7	y ++
water	36:42	0:0	8	y
op	36:43	0:0	8	++
stmts	36:47	41:12	7	
water	36:47	0:0	8	{
if	37:16	40:16	8	(ref [ y * ref_linesize + x_start ] != buf [ y * linesize + x_start ])
cond	37:20	37:77	9	ref [ y * ref_linesize + x_start ] != buf [ y * linesize + x_start ]
water	37:20	0:0	10	ref
op	37:23	0:0	10	[
water	37:24	0:0	10	y
op	37:25	0:0	10	*
water	37:26	0:0	10	ref_linesize
op	37:39	0:0	10	+
water	37:41	0:0	10	x_start
op	37:48	0:0	10	]
op	37:50	0:0	10	!=
water	37:53	0:0	10	buf
op	37:56	0:0	10	[
water	37:57	0:0	10	y
op	37:58	0:0	10	*
water	37:59	0:0	10	linesize
op	37:68	0:0	10	+
water	37:70	0:0	10	x_start
op	37:77	0:0	10	]
stmts	37:80	40:16	9	
water	37:80	0:0	10	{
water	38:20	0:0	10	same_column
op	38:32	0:0	10	=
water	38:34	0:0	10	0
water	38:35	0:0	10	;
break	39:20	39:25	10	
water	40:16	0:0	10	}
water	41:12	0:0	8	}
if	42:12	43:21	6	(! same_column)
cond	42:16	42:17	7	! same_column
op	42:16	0:0	8	!
water	42:17	0:0	8	same_column
stmts	43:16	43:21	7	
break	43:16	43:21	8	
water	44:12	0:0	6	x_start
op	44:19	0:0	6	++
water	44:21	0:0	6	;
water	45:8	0:0	6	}
while	46:8	57:8	4	(x_end > x_start)
cond	46:15	46:23	5	x_end > x_start
water	46:15	0:0	6	x_end
op	46:21	0:0	6	>
water	46:23	0:0	6	x_start
stmts	46:32	57:8	5	
water	46:32	0:0	6	{
decl	47:12	47:31	6	int	same_column
op	47:28	0:0	6	=
water	47:30	0:0	6	1
for	48:12	53:12	6	(y = y_start ;y <= y_end;y ++)
forinit	48:17	48:28	7	y = y_start ;
water	48:17	0:0	8	y
op	48:19	0:0	8	=
water	48:21	0:0	8	y_start
water	48:28	0:0	8	;
cond	48:30	48:35	7	y <= y_end
water	48:30	0:0	8	y
op	48:32	0:0	8	<=
water	48:35	0:0	8	y_end
forexpr	48:42	48:43	7	y ++
water	48:42	0:0	8	y
op	48:43	0:0	8	++
stmts	48:47	53:12	7	
water	48:47	0:0	8	{
if	49:16	52:16	8	(ref [ y * ref_linesize + x_end ] != buf [ y * linesize + x_end ])
cond	49:20	49:73	9	ref [ y * ref_linesize + x_end ] != buf [ y * linesize + x_end ]
water	49:20	0:0	10	ref
op	49:23	0:0	10	[
water	49:24	0:0	10	y
op	49:25	0:0	10	*
water	49:26	0:0	10	ref_linesize
op	49:39	0:0	10	+
water	49:41	0:0	10	x_end
op	49:46	0:0	10	]
op	49:48	0:0	10	!=
water	49:51	0:0	10	buf
op	49:54	0:0	10	[
water	49:55	0:0	10	y
op	49:56	0:0	10	*
water	49:57	0:0	10	linesize
op	49:66	0:0	10	+
water	49:68	0:0	10	x_end
op	49:73	0:0	10	]
stmts	49:76	52:16	9	
water	49:76	0:0	10	{
water	50:20	0:0	10	same_column
op	50:32	0:0	10	=
water	50:34	0:0	10	0
water	50:35	0:0	10	;
break	51:20	51:25	10	
water	52:16	0:0	10	}
water	53:12	0:0	8	}
if	54:12	55:21	6	(! same_column)
cond	54:16	54:17	7	! same_column
op	54:16	0:0	8	!
water	54:17	0:0	8	same_column
stmts	55:16	55:21	7	
break	55:16	55:21	8	
water	56:12	0:0	6	x_end
op	56:17	0:0	6	--
water	56:19	0:0	6	;
water	57:8	0:0	6	}
water	58:8	0:0	4	width
op	58:14	0:0	4	=
water	58:16	0:0	4	x_end
op	58:22	0:0	4	+
water	58:24	0:0	4	1
op	58:26	0:0	4	-
water	58:28	0:0	4	x_start
water	58:35	0:0	4	;
call	60:8	61:75	4	av_log
arg	60:15	60:20	5	avctx
water	60:15	0:0	6	avctx
arg	60:22	60:34	5	AV_LOG_DEBUG
water	60:22	0:0	6	AV_LOG_DEBUG
arg	60:35	60:78	5	"%dx%d image at pos (%d;%d) [area:%dx%d]\n"
water	60:35	0:0	6	"%dx%d image at pos (%d;%d) [area:%dx%d]\n"
arg	61:15	61:20	5	width
water	61:15	0:0	6	width
arg	61:22	61:28	5	height
water	61:22	0:0	6	height
arg	61:30	61:37	5	x_start
water	61:30	0:0	6	x_start
arg	61:39	61:46	5	y_start
water	61:39	0:0	6	y_start
arg	61:48	61:60	5	avctx->width
water	61:48	0:0	6	avctx
op	61:53	0:0	6	->
water	61:55	0:0	6	width
arg	61:62	61:75	5	avctx->height
water	61:62	0:0	6	avctx
op	61:67	0:0	6	->
water	61:69	0:0	6	height
water	61:76	0:0	4	;
water	62:4	0:0	4	}
call	65:4	65:55	2	bytestream_put_byte
arg	65:24	65:34	3	bytestream
water	65:24	0:0	4	bytestream
arg	65:36	65:55	3	GIF_IMAGE_SEPARATOR
water	65:36	0:0	4	GIF_IMAGE_SEPARATOR
water	65:56	0:0	2	;
call	66:4	66:43	2	bytestream_put_le16
arg	66:24	66:34	3	bytestream
water	66:24	0:0	4	bytestream
arg	66:36	66:43	3	x_start
water	66:36	0:0	4	x_start
water	66:44	0:0	2	;
call	67:4	67:43	2	bytestream_put_le16
arg	67:24	67:34	3	bytestream
water	67:24	0:0	4	bytestream
arg	67:36	67:43	3	y_start
water	67:36	0:0	4	y_start
water	67:44	0:0	2	;
call	68:4	68:41	2	bytestream_put_le16
arg	68:24	68:34	3	bytestream
water	68:24	0:0	4	bytestream
arg	68:36	68:41	3	width
water	68:36	0:0	4	width
water	68:42	0:0	2	;
call	69:4	69:42	2	bytestream_put_le16
arg	69:24	69:34	3	bytestream
water	69:24	0:0	4	bytestream
arg	69:36	69:42	3	height
water	69:36	0:0	4	height
water	69:43	0:0	2	;
if	71:4	73:4	2	(! palette)
cond	71:8	71:9	3	! palette
op	71:8	0:0	4	!
water	71:9	0:0	4	palette
stmts	71:18	73:4	3	
water	71:18	0:0	4	{
call	72:8	72:44	4	bytestream_put_byte
arg	72:28	72:38	5	bytestream
water	72:28	0:0	6	bytestream
arg	72:40	72:44	5	0x00
water	72:40	0:0	6	0
water	72:41	0:0	6	x00
water	72:45	0:0	4	;
water	73:4	0:0	4	}
else	73:6	80:4	2
stmts	73:11	80:4	3	
water	73:11	0:0	4	{
water	74:8	0:0	4	unsigned
water	74:17	0:0	4	i
water	74:18	0:0	4	;
call	75:8	75:50	4	bytestream_put_byte
arg	75:28	75:38	5	bytestream
water	75:28	0:0	6	bytestream
arg	75:40	75:50	5	1<<7|0x7
water	75:40	0:0	6	1
op	75:41	0:0	6	<<
water	75:43	0:0	6	7
op	75:45	0:0	6	|
water	75:47	0:0	6	0
water	75:48	0:0	6	x7
water	75:51	0:0	4	;
for	76:8	79:8	4	(i = 0 ;i < AVPALETTE_COUNT;i ++)
forinit	76:13	76:18	5	i = 0 ;
water	76:13	0:0	6	i
op	76:15	0:0	6	=
water	76:17	0:0	6	0
water	76:18	0:0	6	;
cond	76:20	76:24	5	i < AVPALETTE_COUNT
water	76:20	0:0	6	i
op	76:22	0:0	6	<
water	76:24	0:0	6	AVPALETTE_COUNT
forexpr	76:41	76:42	5	i ++
water	76:41	0:0	6	i
op	76:42	0:0	6	++
stmts	76:46	79:8	5	
water	76:46	0:0	6	{
decl	77:12	77:41	6	const uint32_t	v
op	77:29	0:0	6	=
water	77:31	0:0	6	palette
op	77:38	0:0	6	[
water	77:39	0:0	6	i
op	77:40	0:0	6	]
call	78:12	78:45	6	bytestream_put_be24
arg	78:32	78:42	7	bytestream
water	78:32	0:0	8	bytestream
arg	78:44	78:45	7	v
water	78:44	0:0	8	v
water	78:46	0:0	6	;
water	79:8	0:0	6	}
water	80:4	0:0	4	}
if	82:4	96:4	2	(honor_transparency && trans < 0)
cond	82:8	82:38	3	honor_transparency && trans < 0
water	82:8	0:0	4	honor_transparency
op	82:27	0:0	4	&&
water	82:30	0:0	4	trans
op	82:36	0:0	4	<
water	82:38	0:0	4	0
stmts	82:41	96:4	3	
water	82:41	0:0	4	{
water	83:8	0:0	4	trans
op	83:14	0:0	4	=
call	83:16	84:58	4	pick_palette_entry
arg	83:35	83:67	5	buf+y_start*linesize+x_start
water	83:35	0:0	6	buf
op	83:39	0:0	6	+
water	83:41	0:0	6	y_start
op	83:48	0:0	6	*
water	83:49	0:0	6	linesize
op	83:58	0:0	6	+
water	83:60	0:0	6	x_start
arg	84:35	84:43	5	linesize
water	84:35	0:0	6	linesize
arg	84:45	84:50	5	width
water	84:45	0:0	6	width
arg	84:52	84:58	5	height
water	84:52	0:0	6	height
water	84:59	0:0	4	;
if	85:8	87:8	4	(trans < 0)
cond	85:12	85:20	5	trans < 0
water	85:12	0:0	6	trans
op	85:18	0:0	6	<
water	85:20	0:0	6	0
stmts	85:23	87:8	5	
water	85:23	0:0	6	{
call	86:12	86:88	6	av_log
arg	86:19	86:24	7	avctx
water	86:19	0:0	8	avctx
arg	86:26	86:38	7	AV_LOG_DEBUG
water	86:26	0:0	8	AV_LOG_DEBUG
arg	86:40	86:88	7	"No available color, can not use transparency\n"
water	86:40	0:0	8	"No available color, can not use transparency\n"
water	86:89	0:0	6	;
water	87:8	0:0	6	}
else	87:10	95:8	4
stmts	87:15	95:8	5	
water	87:15	0:0	6	{
decl	88:12	88:47	6	uint8_t	*pal_exdata
op	88:32	0:0	6	=
water	88:34	0:0	6	s
op	88:35	0:0	6	->
water	88:37	0:0	6	pal_exdata
if	89:12	90:94	6	(! pal_exdata)
cond	89:16	89:17	7	! pal_exdata
op	89:16	0:0	8	!
water	89:17	0:0	8	pal_exdata
stmts	90:16	90:94	7	
water	90:16	0:0	8	pal_exdata
op	90:27	0:0	8	=
call	90:29	90:93	8	av_packet_new_side_data
arg	90:53	90:56	9	pkt
water	90:53	0:0	10	pkt
arg	90:58	90:77	9	AV_PKT_DATA_PALETTE
water	90:58	0:0	10	AV_PKT_DATA_PALETTE
arg	90:79	90:93	9	AVPALETTE_SIZE
water	90:79	0:0	10	AVPALETTE_SIZE
water	90:94	0:0	8	;
if	91:12	92:38	6	(! pal_exdata)
cond	91:16	91:17	7	! pal_exdata
op	91:16	0:0	8	!
water	91:17	0:0	8	pal_exdata
stmts	92:16	92:38	7	
return	92:16	92:38	8	AVERROR(ENOMEM)
call	92:23	92:37	9	AVERROR
arg	92:31	92:37	10	ENOMEM
water	92:31	0:0	11	ENOMEM
call	93:12	93:57	6	memcpy
arg	93:19	93:29	7	pal_exdata
water	93:19	0:0	8	pal_exdata
arg	93:31	93:41	7	s->palette
water	93:31	0:0	8	s
op	93:32	0:0	8	->
water	93:34	0:0	8	palette
arg	93:43	93:57	7	AVPALETTE_SIZE
water	93:43	0:0	8	AVPALETTE_SIZE
water	93:58	0:0	6	;
water	94:12	0:0	6	pal_exdata
op	94:22	0:0	6	[
water	94:23	0:0	6	trans
op	94:28	0:0	6	*
water	94:29	0:0	6	4
op	94:31	0:0	6	+
water	94:33	0:0	6	3
op	94:34	0:0	6	*
op	94:35	0:0	6	!
water	94:36	0:0	6	HAVE_BIGENDIAN
op	94:50	0:0	6	]
op	94:52	0:0	6	=
water	94:54	0:0	6	0
water	94:55	0:0	6	x00
water	94:58	0:0	6	;
water	95:8	0:0	6	}
water	96:4	0:0	4	}
if	97:4	98:30	2	(trans < 0)
cond	97:8	97:16	3	trans < 0
water	97:8	0:0	4	trans
op	97:14	0:0	4	<
water	97:16	0:0	4	0
stmts	98:8	98:30	3	
water	98:8	0:0	4	honor_transparency
op	98:27	0:0	4	=
water	98:29	0:0	4	0
water	98:30	0:0	4	;
call	100:4	100:40	2	bytestream_put_byte
arg	100:24	100:34	3	bytestream
water	100:24	0:0	4	bytestream
arg	100:36	100:40	3	0x08
water	100:36	0:0	4	0
water	100:37	0:0	4	x08
water	100:41	0:0	2	;
call	102:4	103:47	2	ff_lzw_encode_init
arg	102:23	102:29	3	s->lzw
water	102:23	0:0	4	s
op	102:24	0:0	4	->
water	102:26	0:0	4	lzw
arg	102:31	102:37	3	s->buf
water	102:31	0:0	4	s
op	102:32	0:0	4	->
water	102:34	0:0	4	buf
arg	102:39	102:57	3	2*width*height
water	102:39	0:0	4	2
op	102:41	0:0	4	*
water	102:43	0:0	4	width
op	102:49	0:0	4	*
water	102:51	0:0	4	height
arg	103:23	103:25	3	12
water	103:23	0:0	4	12
arg	103:27	103:37	3	FF_LZW_GIF
water	103:27	0:0	4	FF_LZW_GIF
arg	103:39	103:47	3	put_bits
water	103:39	0:0	4	put_bits
water	103:48	0:0	2	;
water	105:4	0:0	2	ptr
op	105:8	0:0	2	=
water	105:10	0:0	2	buf
op	105:14	0:0	2	+
water	105:16	0:0	2	y_start
op	105:23	0:0	2	*
water	105:24	0:0	2	linesize
op	105:33	0:0	2	+
water	105:35	0:0	2	x_start
water	105:42	0:0	2	;
if	106:4	119:4	2	(honor_transparency)
cond	106:8	106:8	3	honor_transparency
water	106:8	0:0	4	honor_transparency
stmts	106:28	119:4	3	
water	106:28	0:0	4	{
decl	107:8	107:59	4	const int	ref_linesize
op	107:31	0:0	4	=
water	107:33	0:0	4	s
op	107:34	0:0	4	->
water	107:36	0:0	4	last_frame
op	107:46	0:0	4	->
water	107:48	0:0	4	linesize
op	107:56	0:0	4	[
water	107:57	0:0	4	0
op	107:58	0:0	4	]
decl	108:8	108:84	4	const uint8_t	*ref
op	108:27	0:0	4	=
water	108:29	0:0	4	s
op	108:30	0:0	4	->
water	108:32	0:0	4	last_frame
op	108:42	0:0	4	->
water	108:44	0:0	4	data
op	108:48	0:0	4	[
water	108:49	0:0	4	0
op	108:50	0:0	4	]
op	108:52	0:0	4	+
water	108:54	0:0	4	y_start
op	108:61	0:0	4	*
water	108:62	0:0	4	ref_linesize
op	108:75	0:0	4	+
water	108:77	0:0	4	x_start
for	110:8	118:8	4	(y = 0 ;y < height;y ++)
forinit	110:13	110:18	5	y = 0 ;
water	110:13	0:0	6	y
op	110:15	0:0	6	=
water	110:17	0:0	6	0
water	110:18	0:0	6	;
cond	110:20	110:24	5	y < height
water	110:20	0:0	6	y
op	110:22	0:0	6	<
water	110:24	0:0	6	height
forexpr	110:32	110:33	5	y ++
water	110:32	0:0	6	y
op	110:33	0:0	6	++
stmts	110:37	118:8	5	
water	110:37	0:0	6	{
call	111:12	111:38	6	memcpy
arg	111:19	111:26	7	s->tmpl
water	111:19	0:0	8	s
op	111:20	0:0	8	->
water	111:22	0:0	8	tmpl
arg	111:28	111:31	7	ptr
water	111:28	0:0	8	ptr
arg	111:33	111:38	7	width
water	111:33	0:0	8	width
water	111:39	0:0	6	;
for	112:12	114:38	6	(x = 0 ;x < width;x ++)
forinit	112:17	112:22	7	x = 0 ;
water	112:17	0:0	8	x
op	112:19	0:0	8	=
water	112:21	0:0	8	0
water	112:22	0:0	8	;
cond	112:24	112:28	7	x < width
water	112:24	0:0	8	x
op	112:26	0:0	8	<
water	112:28	0:0	8	width
forexpr	112:35	112:36	7	x ++
water	112:35	0:0	8	x
op	112:36	0:0	8	++
stmts	113:16	114:38	7	
if	113:16	114:38	8	(ref [ x ] == ptr [ x ])
cond	113:20	113:35	9	ref [ x ] == ptr [ x ]
water	113:20	0:0	10	ref
op	113:23	0:0	10	[
water	113:24	0:0	10	x
op	113:25	0:0	10	]
op	113:27	0:0	10	==
water	113:30	0:0	10	ptr
op	113:33	0:0	10	[
water	113:34	0:0	10	x
op	113:35	0:0	10	]
stmts	114:20	114:38	9	
water	114:20	0:0	10	s
op	114:21	0:0	10	->
water	114:23	0:0	10	tmpl
op	114:27	0:0	10	[
water	114:28	0:0	10	x
op	114:29	0:0	10	]
op	114:31	0:0	10	=
water	114:33	0:0	10	trans
water	114:38	0:0	10	;
water	115:12	0:0	6	len
op	115:16	0:0	6	+=
call	115:19	115:55	6	ff_lzw_encode
arg	115:33	115:39	7	s->lzw
water	115:33	0:0	8	s
op	115:34	0:0	8	->
water	115:36	0:0	8	lzw
arg	115:41	115:48	7	s->tmpl
water	115:41	0:0	8	s
op	115:42	0:0	8	->
water	115:44	0:0	8	tmpl
arg	115:50	115:55	7	width
water	115:50	0:0	8	width
water	115:56	0:0	6	;
water	116:12	0:0	6	ptr
op	116:16	0:0	6	+=
water	116:19	0:0	6	linesize
water	116:27	0:0	6	;
water	117:12	0:0	6	ref
op	117:16	0:0	6	+=
water	117:19	0:0	6	ref_linesize
water	117:31	0:0	6	;
water	118:8	0:0	6	}
water	119:4	0:0	4	}
else	119:6	124:4	2
stmts	119:11	124:4	3	
water	119:11	0:0	4	{
for	120:8	123:8	4	(y = 0 ;y < height;y ++)
forinit	120:13	120:18	5	y = 0 ;
water	120:13	0:0	6	y
op	120:15	0:0	6	=
water	120:17	0:0	6	0
water	120:18	0:0	6	;
cond	120:20	120:24	5	y < height
water	120:20	0:0	6	y
op	120:22	0:0	6	<
water	120:24	0:0	6	height
forexpr	120:32	120:33	5	y ++
water	120:32	0:0	6	y
op	120:33	0:0	6	++
stmts	120:37	123:8	5	
water	120:37	0:0	6	{
water	121:12	0:0	6	len
op	121:16	0:0	6	+=
call	121:19	121:51	6	ff_lzw_encode
arg	121:33	121:39	7	s->lzw
water	121:33	0:0	8	s
op	121:34	0:0	8	->
water	121:36	0:0	8	lzw
arg	121:41	121:44	7	ptr
water	121:41	0:0	8	ptr
arg	121:46	121:51	7	width
water	121:46	0:0	8	width
water	121:52	0:0	6	;
water	122:12	0:0	6	ptr
op	122:16	0:0	6	+=
water	122:19	0:0	6	linesize
water	122:27	0:0	6	;
water	123:8	0:0	6	}
water	124:4	0:0	4	}
water	125:4	0:0	2	len
op	125:8	0:0	2	+=
call	125:11	125:53	2	ff_lzw_encode_flush
arg	125:31	125:37	3	s->lzw
water	125:31	0:0	4	s
op	125:32	0:0	4	->
water	125:34	0:0	4	lzw
arg	125:39	125:53	3	flush_put_bits
water	125:39	0:0	4	flush_put_bits
water	125:54	0:0	2	;
water	127:4	0:0	2	ptr
op	127:8	0:0	2	=
water	127:10	0:0	2	s
op	127:11	0:0	2	->
water	127:13	0:0	2	buf
water	127:16	0:0	2	;
while	128:4	136:4	2	(len > 0)
cond	128:11	128:17	3	len > 0
water	128:11	0:0	4	len
op	128:15	0:0	4	>
water	128:17	0:0	4	0
stmts	128:20	136:4	3	
water	128:20	0:0	4	{
decl	129:8	129:34	4	int	size
op	129:17	0:0	4	=
call	129:19	129:33	5	FFMIN
arg	129:25	129:28	6	255
water	129:25	0:0	7	255
arg	129:30	129:33	6	len
water	129:30	0:0	7	len
call	130:8	130:44	4	bytestream_put_byte
arg	130:28	130:38	5	bytestream
water	130:28	0:0	6	bytestream
arg	130:40	130:44	5	size
water	130:40	0:0	6	size
water	130:45	0:0	4	;
if	131:8	132:21	4	(end - * bytestream < size)
cond	131:12	131:32	5	end - * bytestream < size
water	131:12	0:0	6	end
op	131:16	0:0	6	-
op	131:18	0:0	6	*
water	131:19	0:0	6	bytestream
op	131:30	0:0	6	<
water	131:32	0:0	6	size
stmts	132:12	132:21	5	
return	132:12	132:21	6	-1
op	132:19	0:0	7	-
water	132:20	0:0	7	1
call	133:8	133:51	4	bytestream_put_buffer
arg	133:30	133:40	5	bytestream
water	133:30	0:0	6	bytestream
arg	133:42	133:45	5	ptr
water	133:42	0:0	6	ptr
arg	133:47	133:51	5	size
water	133:47	0:0	6	size
water	133:52	0:0	4	;
water	134:8	0:0	4	ptr
op	134:12	0:0	4	+=
water	134:15	0:0	4	size
water	134:19	0:0	4	;
water	135:8	0:0	4	len
op	135:12	0:0	4	-=
water	135:15	0:0	4	size
water	135:19	0:0	4	;
water	136:4	0:0	4	}
call	137:4	137:40	2	bytestream_put_byte
arg	137:24	137:34	3	bytestream
water	137:24	0:0	4	bytestream
arg	137:36	137:40	3	0x00
water	137:36	0:0	4	0
water	137:37	0:0	4	x00
water	137:41	0:0	2	;
return	138:4	138:12	2	0
water	138:11	0:0	3	0
