func	2:0	201:0	0	int	ff_h264_decode_seq_parameter_set
params	2:36	0:0	1	
param	2:37	2:51	2	H264Context *	h
stmnts	3:4	200:13	1	
water	3:4	0:0	2	MpegEncContext
op	3:19	0:0	2	*
water	3:21	0:0	2	const
water	3:27	0:0	2	s
op	3:29	0:0	2	=
op	3:31	0:0	2	&
water	3:32	0:0	2	h
op	3:33	0:0	2	->
water	3:35	0:0	2	s
water	3:36	0:0	2	;
decl	4:4	4:56	2	int	profile_idc
water	4:19	0:0	2	,
decl	4:4	4:56	2	int	level_idc
water	4:30	0:0	2	,
decl	4:4	4:56	2	int	constraint_set_flags
op	4:53	0:0	2	=
water	4:55	0:0	2	0
decl	5:4	5:23	2	unsigned int	sps_id
decl	6:4	6:36	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:36	2	int	log2_max_frame_num_minus4
decl	7:4	7:12	2	SPS	*sps
water	9:4	0:0	2	profile_idc
op	9:15	0:0	2	=
call	9:17	9:35	2	get_bits
arg	9:26	9:32	3	&s->gb
op	9:26	0:0	4	&
water	9:27	0:0	4	s
op	9:28	0:0	4	->
water	9:30	0:0	4	gb
arg	9:34	9:35	3	8
water	9:34	0:0	4	8
water	9:36	0:0	2	;
water	10:4	0:0	2	constraint_set_flags
op	10:25	0:0	2	|=
call	10:28	10:44	2	get_bits1
arg	10:38	10:44	3	&s->gb
op	10:38	0:0	4	&
water	10:39	0:0	4	s
op	10:40	0:0	4	->
water	10:42	0:0	4	gb
op	10:46	0:0	2	<<
water	10:49	0:0	2	0
water	10:50	0:0	2	;
water	11:4	0:0	2	constraint_set_flags
op	11:25	0:0	2	|=
call	11:28	11:44	2	get_bits1
arg	11:38	11:44	3	&s->gb
op	11:38	0:0	4	&
water	11:39	0:0	4	s
op	11:40	0:0	4	->
water	11:42	0:0	4	gb
op	11:46	0:0	2	<<
water	11:49	0:0	2	1
water	11:50	0:0	2	;
water	12:4	0:0	2	constraint_set_flags
op	12:25	0:0	2	|=
call	12:28	12:44	2	get_bits1
arg	12:38	12:44	3	&s->gb
op	12:38	0:0	4	&
water	12:39	0:0	4	s
op	12:40	0:0	4	->
water	12:42	0:0	4	gb
op	12:46	0:0	2	<<
water	12:49	0:0	2	2
water	12:50	0:0	2	;
water	13:4	0:0	2	constraint_set_flags
op	13:25	0:0	2	|=
call	13:28	13:44	2	get_bits1
arg	13:38	13:44	3	&s->gb
op	13:38	0:0	4	&
water	13:39	0:0	4	s
op	13:40	0:0	4	->
water	13:42	0:0	4	gb
op	13:46	0:0	2	<<
water	13:49	0:0	2	3
water	13:50	0:0	2	;
water	14:4	0:0	2	constraint_set_flags
op	14:25	0:0	2	|=
call	14:28	14:44	2	get_bits1
arg	14:38	14:44	3	&s->gb
op	14:38	0:0	4	&
water	14:39	0:0	4	s
op	14:40	0:0	4	->
water	14:42	0:0	4	gb
op	14:46	0:0	2	<<
water	14:49	0:0	2	4
water	14:50	0:0	2	;
water	15:4	0:0	2	constraint_set_flags
op	15:25	0:0	2	|=
call	15:28	15:44	2	get_bits1
arg	15:38	15:44	3	&s->gb
op	15:38	0:0	4	&
water	15:39	0:0	4	s
op	15:40	0:0	4	->
water	15:42	0:0	4	gb
op	15:46	0:0	2	<<
water	15:49	0:0	2	5
water	15:50	0:0	2	;
call	16:4	16:22	2	get_bits
arg	16:13	16:19	3	&s->gb
op	16:13	0:0	4	&
water	16:14	0:0	4	s
op	16:15	0:0	4	->
water	16:17	0:0	4	gb
arg	16:21	16:22	3	2
water	16:21	0:0	4	2
water	16:23	0:0	2	;
water	17:4	0:0	2	level_idc
op	17:13	0:0	2	=
call	17:15	17:33	2	get_bits
arg	17:24	17:30	3	&s->gb
op	17:24	0:0	4	&
water	17:25	0:0	4	s
op	17:26	0:0	4	->
water	17:28	0:0	4	gb
arg	17:32	17:33	3	8
water	17:32	0:0	4	8
water	17:34	0:0	2	;
water	18:4	0:0	2	sps_id
op	18:10	0:0	2	=
call	18:12	18:35	2	get_ue_golomb_31
arg	18:29	18:35	3	&s->gb
op	18:29	0:0	4	&
water	18:30	0:0	4	s
op	18:31	0:0	4	->
water	18:33	0:0	4	gb
water	18:36	0:0	2	;
if	20:4	23:4	2	(sps_id >= MAX_SPS_COUNT)
cond	20:7	20:17	3	sps_id >= MAX_SPS_COUNT
water	20:7	0:0	4	sps_id
op	20:14	0:0	4	>=
water	20:17	0:0	4	MAX_SPS_COUNT
stmts	20:32	23:4	3	
water	20:32	0:0	4	{
call	21:8	21:77	4	av_log
arg	21:15	21:25	5	h->s.avctx
water	21:15	0:0	6	h
op	21:16	0:0	6	->
water	21:18	0:0	6	s
op	21:19	0:0	6	.
water	21:20	0:0	6	avctx
arg	21:27	21:39	5	AV_LOG_ERROR
water	21:27	0:0	6	AV_LOG_ERROR
arg	21:41	21:69	5	"sps_id (%d) out of range\n"
water	21:41	0:0	6	"sps_id (%d) out of range\n"
arg	21:71	21:77	5	sps_id
water	21:71	0:0	6	sps_id
water	21:78	0:0	4	;
return	22:8	22:17	4	-1
op	22:15	0:0	5	-
water	22:16	0:0	5	1
water	23:4	0:0	4	}
water	24:4	0:0	2	sps
op	24:7	0:0	2	=
call	24:9	24:31	2	av_mallocz
arg	24:20	24:31	3	sizeof(SPS)
op	24:20	0:0	4	sizeof
water	24:26	0:0	4	(
water	24:27	0:0	4	SPS
water	24:30	0:0	4	)
water	24:32	0:0	2	;
if	25:4	26:17	2	(sps == NULL)
cond	25:7	25:14	3	sps == NULL
water	25:7	0:0	4	sps
op	25:11	0:0	4	==
water	25:14	0:0	4	NULL
stmts	26:8	26:17	3	
return	26:8	26:17	4	-1
op	26:15	0:0	5	-
water	26:16	0:0	5	1
water	28:4	0:0	2	sps
op	28:7	0:0	2	->
water	28:9	0:0	2	time_offset_length
op	28:28	0:0	2	=
water	28:30	0:0	2	24
water	28:32	0:0	2	;
water	29:4	0:0	2	sps
op	29:7	0:0	2	->
water	29:9	0:0	2	profile_idc
op	29:20	0:0	2	=
water	29:22	0:0	2	profile_idc
water	29:33	0:0	2	;
water	30:4	0:0	2	sps
op	30:7	0:0	2	->
water	30:9	0:0	2	constraint_set_flags
op	30:30	0:0	2	=
water	30:32	0:0	2	constraint_set_flags
water	30:52	0:0	2	;
water	31:4	0:0	2	sps
op	31:7	0:0	2	->
water	31:9	0:0	2	level_idc
op	31:18	0:0	2	=
water	31:20	0:0	2	level_idc
water	31:29	0:0	2	;
water	32:4	0:0	2	sps
op	32:7	0:0	2	->
water	32:9	0:0	2	full_range
op	32:20	0:0	2	=
op	32:22	0:0	2	-
water	32:23	0:0	2	1
water	32:24	0:0	2	;
call	34:4	34:65	2	memset
arg	34:11	34:31	3	sps->scaling_matrix4
water	34:11	0:0	4	sps
op	34:14	0:0	4	->
water	34:16	0:0	4	scaling_matrix4
arg	34:33	34:35	3	16
water	34:33	0:0	4	16
arg	34:37	34:65	3	sizeof(sps->scaling_matrix4)
op	34:37	0:0	4	sizeof
water	34:43	0:0	4	(
water	34:44	0:0	4	sps
op	34:47	0:0	4	->
water	34:49	0:0	4	scaling_matrix4
water	34:64	0:0	4	)
water	34:66	0:0	2	;
call	35:4	35:65	2	memset
arg	35:11	35:31	3	sps->scaling_matrix8
water	35:11	0:0	4	sps
op	35:14	0:0	4	->
water	35:16	0:0	4	scaling_matrix8
arg	35:33	35:35	3	16
water	35:33	0:0	4	16
arg	35:37	35:65	3	sizeof(sps->scaling_matrix8)
op	35:37	0:0	4	sizeof
water	35:43	0:0	4	(
water	35:44	0:0	4	sps
op	35:47	0:0	4	->
water	35:49	0:0	4	scaling_matrix8
water	35:64	0:0	4	)
water	35:66	0:0	2	;
water	36:4	0:0	2	sps
op	36:7	0:0	2	->
water	36:9	0:0	2	scaling_matrix_present
op	36:32	0:0	2	=
water	36:34	0:0	2	0
water	36:35	0:0	2	;
water	37:4	0:0	2	sps
op	37:7	0:0	2	->
water	37:9	0:0	2	colorspace
op	37:20	0:0	2	=
water	37:22	0:0	2	2
water	37:23	0:0	2	;
if	39:4	64:4	2	(sps -> profile_idc == 100 || sps -> profile_idc == 110 || sps -> profile_idc == 122 || sps -> profile_idc == 244 || sps -> profile_idc == 44 || sps -> profile_idc == 83 || sps -> profile_idc == 86 || sps -> profile_idc == 118 || sps -> profile_idc == 128 || sps -> profile_idc == 144)
cond	39:8	43:55	3	sps -> profile_idc == 100 || sps -> profile_idc == 110 || sps -> profile_idc == 122 || sps -> profile_idc == 244 || sps -> profile_idc == 44 || sps -> profile_idc == 83 || sps -> profile_idc == 86 || sps -> profile_idc == 118 || sps -> profile_idc == 128 || sps -> profile_idc == 144
water	39:8	0:0	4	sps
op	39:11	0:0	4	->
water	39:13	0:0	4	profile_idc
op	39:25	0:0	4	==
water	39:28	0:0	4	100
op	39:32	0:0	4	||
water	39:35	0:0	4	sps
op	39:38	0:0	4	->
water	39:40	0:0	4	profile_idc
op	39:52	0:0	4	==
water	39:55	0:0	4	110
op	39:59	0:0	4	||
water	40:8	0:0	4	sps
op	40:11	0:0	4	->
water	40:13	0:0	4	profile_idc
op	40:25	0:0	4	==
water	40:28	0:0	4	122
op	40:32	0:0	4	||
water	40:35	0:0	4	sps
op	40:38	0:0	4	->
water	40:40	0:0	4	profile_idc
op	40:52	0:0	4	==
water	40:55	0:0	4	244
op	40:59	0:0	4	||
water	41:8	0:0	4	sps
op	41:11	0:0	4	->
water	41:13	0:0	4	profile_idc
op	41:25	0:0	4	==
water	41:29	0:0	4	44
op	41:32	0:0	4	||
water	41:35	0:0	4	sps
op	41:38	0:0	4	->
water	41:40	0:0	4	profile_idc
op	41:52	0:0	4	==
water	41:56	0:0	4	83
op	41:59	0:0	4	||
water	42:8	0:0	4	sps
op	42:11	0:0	4	->
water	42:13	0:0	4	profile_idc
op	42:25	0:0	4	==
water	42:29	0:0	4	86
op	42:32	0:0	4	||
water	42:35	0:0	4	sps
op	42:38	0:0	4	->
water	42:40	0:0	4	profile_idc
op	42:52	0:0	4	==
water	42:55	0:0	4	118
op	42:59	0:0	4	||
water	43:8	0:0	4	sps
op	43:11	0:0	4	->
water	43:13	0:0	4	profile_idc
op	43:25	0:0	4	==
water	43:28	0:0	4	128
op	43:32	0:0	4	||
water	43:35	0:0	4	sps
op	43:38	0:0	4	->
water	43:40	0:0	4	profile_idc
op	43:52	0:0	4	==
water	43:55	0:0	4	144
stmts	43:60	64:4	3	
water	43:60	0:0	4	{
water	44:8	0:0	4	sps
op	44:11	0:0	4	->
water	44:13	0:0	4	chroma_format_idc
op	44:30	0:0	4	=
call	44:32	44:55	4	get_ue_golomb_31
arg	44:49	44:55	5	&s->gb
op	44:49	0:0	6	&
water	44:50	0:0	6	s
op	44:51	0:0	6	->
water	44:53	0:0	6	gb
water	44:56	0:0	4	;
if	45:8	48:8	4	(sps -> chroma_format_idc > 3 U)
cond	45:12	45:38	5	sps -> chroma_format_idc > 3 U
water	45:12	0:0	6	sps
op	45:15	0:0	6	->
water	45:17	0:0	6	chroma_format_idc
op	45:35	0:0	6	>
water	45:37	0:0	6	3
water	45:38	0:0	6	U
stmts	45:41	48:8	5	
water	45:41	0:0	6	{
call	46:12	46:104	6	av_log
arg	46:19	46:29	7	h->s.avctx
water	46:19	0:0	8	h
op	46:20	0:0	8	->
water	46:22	0:0	8	s
op	46:23	0:0	8	.
water	46:24	0:0	8	avctx
arg	46:31	46:43	7	AV_LOG_ERROR
water	46:31	0:0	8	AV_LOG_ERROR
arg	46:45	46:80	7	"chroma_format_idc %d is illegal\n"
water	46:45	0:0	8	"chroma_format_idc %d is illegal\n"
arg	46:82	46:104	7	sps->chroma_format_idc
water	46:82	0:0	8	sps
op	46:85	0:0	8	->
water	46:87	0:0	8	chroma_format_idc
water	46:105	0:0	6	;
goto	47:12	47:21	6	fail
water	47:17	0:0	7	fail
water	48:8	0:0	6	}
else	48:10	54:8	4
stmts	48:15	54:8	5	
if	48:15	54:8	6	(sps -> chroma_format_idc == 3)
cond	48:18	48:44	7	sps -> chroma_format_idc == 3
water	48:18	0:0	8	sps
op	48:21	0:0	8	->
water	48:23	0:0	8	chroma_format_idc
op	48:41	0:0	8	==
water	48:44	0:0	8	3
stmts	48:47	54:8	7	
water	48:47	0:0	8	{
water	49:12	0:0	8	sps
op	49:15	0:0	8	->
water	49:17	0:0	8	residual_color_transform_flag
op	49:47	0:0	8	=
call	49:49	49:65	8	get_bits1
arg	49:59	49:65	9	&s->gb
op	49:59	0:0	10	&
water	49:60	0:0	10	s
op	49:61	0:0	10	->
water	49:63	0:0	10	gb
water	49:66	0:0	8	;
if	50:12	53:12	8	(sps -> residual_color_transform_flag)
cond	50:15	50:20	9	sps -> residual_color_transform_flag
water	50:15	0:0	10	sps
op	50:18	0:0	10	->
water	50:20	0:0	10	residual_color_transform_flag
stmts	50:51	53:12	9	
water	50:51	0:0	10	{
call	51:16	51:92	10	av_log
arg	51:23	51:33	11	h->s.avctx
water	51:23	0:0	12	h
op	51:24	0:0	12	->
water	51:26	0:0	12	s
op	51:27	0:0	12	.
water	51:28	0:0	12	avctx
arg	51:35	51:47	11	AV_LOG_ERROR
water	51:35	0:0	12	AV_LOG_ERROR
arg	51:49	51:92	11	"separate color planes are not supported\n"
water	51:49	0:0	12	"separate color planes are not supported\n"
water	51:93	0:0	10	;
goto	52:16	52:25	10	fail
water	52:21	0:0	11	fail
water	53:12	0:0	10	}
water	54:8	0:0	8	}
water	55:8	0:0	4	sps
op	55:11	0:0	4	->
water	55:13	0:0	4	bit_depth_luma
op	55:30	0:0	4	=
call	55:32	55:52	4	get_ue_golomb
arg	55:46	55:52	5	&s->gb
op	55:46	0:0	6	&
water	55:47	0:0	6	s
op	55:48	0:0	6	->
water	55:50	0:0	6	gb
op	55:54	0:0	4	+
water	55:56	0:0	4	8
water	55:57	0:0	4	;
water	56:8	0:0	4	sps
op	56:11	0:0	4	->
water	56:13	0:0	4	bit_depth_chroma
op	56:30	0:0	4	=
call	56:32	56:52	4	get_ue_golomb
arg	56:46	56:52	5	&s->gb
op	56:46	0:0	6	&
water	56:47	0:0	6	s
op	56:48	0:0	6	->
water	56:50	0:0	6	gb
op	56:54	0:0	4	+
water	56:56	0:0	4	8
water	56:57	0:0	4	;
if	57:8	61:8	4	(sps -> bit_depth_luma > 14 U || sps -> bit_depth_chroma > 14 U)
cond	57:12	57:67	5	sps -> bit_depth_luma > 14 U || sps -> bit_depth_chroma > 14 U
water	57:12	0:0	6	sps
op	57:15	0:0	6	->
water	57:17	0:0	6	bit_depth_luma
op	57:32	0:0	6	>
water	57:34	0:0	6	14
water	57:36	0:0	6	U
op	57:38	0:0	6	||
water	57:41	0:0	6	sps
op	57:44	0:0	6	->
water	57:46	0:0	6	bit_depth_chroma
op	57:63	0:0	6	>
water	57:65	0:0	6	14
water	57:67	0:0	6	U
stmts	57:70	61:8	5	
water	57:70	0:0	6	{
call	58:12	59:61	6	av_log
arg	58:19	58:29	7	h->s.avctx
water	58:19	0:0	8	h
op	58:20	0:0	8	->
water	58:22	0:0	8	s
op	58:23	0:0	8	.
water	58:24	0:0	8	avctx
arg	58:31	58:43	7	AV_LOG_ERROR
water	58:31	0:0	8	AV_LOG_ERROR
arg	58:45	58:81	7	"illegal bit depth value (%d, %d)\n"
water	58:45	0:0	8	"illegal bit depth value (%d, %d)\n"
arg	59:19	59:38	7	sps->bit_depth_luma
water	59:19	0:0	8	sps
op	59:22	0:0	8	->
water	59:24	0:0	8	bit_depth_luma
arg	59:40	59:61	7	sps->bit_depth_chroma
water	59:40	0:0	8	sps
op	59:43	0:0	8	->
water	59:45	0:0	8	bit_depth_chroma
water	59:62	0:0	6	;
goto	60:12	60:21	6	fail
water	60:17	0:0	7	fail
water	61:8	0:0	6	}
water	62:8	0:0	4	sps
op	62:11	0:0	4	->
water	62:13	0:0	4	transform_bypass
op	62:30	0:0	4	=
call	62:32	62:48	4	get_bits1
arg	62:42	62:48	5	&s->gb
op	62:42	0:0	6	&
water	62:43	0:0	6	s
op	62:44	0:0	6	->
water	62:46	0:0	6	gb
water	62:49	0:0	4	;
call	63:8	63:91	4	decode_scaling_matrices
arg	63:32	63:33	5	h
water	63:32	0:0	6	h
arg	63:35	63:38	5	sps
water	63:35	0:0	6	sps
arg	63:40	63:44	5	NULL
water	63:40	0:0	6	NULL
arg	63:46	63:47	5	1
water	63:46	0:0	6	1
arg	63:49	63:69	5	sps->scaling_matrix4
water	63:49	0:0	6	sps
op	63:52	0:0	6	->
water	63:54	0:0	6	scaling_matrix4
arg	63:71	63:91	5	sps->scaling_matrix8
water	63:71	0:0	6	sps
op	63:74	0:0	6	->
water	63:76	0:0	6	scaling_matrix8
water	63:92	0:0	4	;
water	64:4	0:0	4	}
else	64:5	68:4	2
stmts	64:9	68:4	3	
water	64:9	0:0	4	{
water	65:8	0:0	4	sps
op	65:11	0:0	4	->
water	65:13	0:0	4	chroma_format_idc
op	65:30	0:0	4	=
water	65:32	0:0	4	1
water	65:33	0:0	4	;
water	66:8	0:0	4	sps
op	66:11	0:0	4	->
water	66:13	0:0	4	bit_depth_luma
op	66:30	0:0	4	=
water	66:32	0:0	4	8
water	66:33	0:0	4	;
water	67:8	0:0	4	sps
op	67:11	0:0	4	->
water	67:13	0:0	4	bit_depth_chroma
op	67:30	0:0	4	=
water	67:32	0:0	4	8
water	67:33	0:0	4	;
water	68:4	0:0	4	}
water	70:4	0:0	2	log2_max_frame_num_minus4
op	70:30	0:0	2	=
call	70:32	70:52	2	get_ue_golomb
arg	70:46	70:52	3	&s->gb
op	70:46	0:0	4	&
water	70:47	0:0	4	s
op	70:48	0:0	4	->
water	70:50	0:0	4	gb
water	70:53	0:0	2	;
if	71:4	77:4	2	(log2_max_frame_num_minus4 < MIN_LOG2_MAX_FRAME_NUM - 4 || log2_max_frame_num_minus4 > MAX_LOG2_MAX_FRAME_NUM - 4)
cond	71:8	72:61	3	log2_max_frame_num_minus4 < MIN_LOG2_MAX_FRAME_NUM - 4 || log2_max_frame_num_minus4 > MAX_LOG2_MAX_FRAME_NUM - 4
water	71:8	0:0	4	log2_max_frame_num_minus4
op	71:34	0:0	4	<
water	71:36	0:0	4	MIN_LOG2_MAX_FRAME_NUM
op	71:59	0:0	4	-
water	71:61	0:0	4	4
op	71:63	0:0	4	||
water	72:8	0:0	4	log2_max_frame_num_minus4
op	72:34	0:0	4	>
water	72:36	0:0	4	MAX_LOG2_MAX_FRAME_NUM
op	72:59	0:0	4	-
water	72:61	0:0	4	4
stmts	72:64	77:4	3	
water	72:64	0:0	4	{
call	73:8	75:40	4	av_log
arg	73:15	73:25	5	h->s.avctx
water	73:15	0:0	6	h
op	73:16	0:0	6	->
water	73:18	0:0	6	s
op	73:19	0:0	6	.
water	73:20	0:0	6	avctx
arg	73:27	73:39	5	AV_LOG_ERROR
water	73:27	0:0	6	AV_LOG_ERROR
arg	74:15	74:68	5	"log2_max_frame_num_minus4 out of range (0-12): %d\n"
water	74:15	0:0	6	"log2_max_frame_num_minus4 out of range (0-12): %d\n"
arg	75:15	75:40	5	log2_max_frame_num_minus4
water	75:15	0:0	6	log2_max_frame_num_minus4
water	75:41	0:0	4	;
goto	76:8	76:17	4	fail
water	76:13	0:0	5	fail
water	77:4	0:0	4	}
water	78:4	0:0	2	sps
op	78:7	0:0	2	->
water	78:9	0:0	2	log2_max_frame_num
op	78:28	0:0	2	=
water	78:30	0:0	2	log2_max_frame_num_minus4
op	78:56	0:0	2	+
water	78:58	0:0	2	4
water	78:59	0:0	2	;
water	80:4	0:0	2	sps
op	80:7	0:0	2	->
water	80:9	0:0	2	poc_type
op	80:17	0:0	2	=
call	80:19	80:42	2	get_ue_golomb_31
arg	80:36	80:42	3	&s->gb
op	80:36	0:0	4	&
water	80:37	0:0	4	s
op	80:38	0:0	4	->
water	80:40	0:0	4	gb
water	80:43	0:0	2	;
if	82:4	89:4	2	(sps -> poc_type == 0)
cond	82:7	82:24	3	sps -> poc_type == 0
water	82:7	0:0	4	sps
op	82:10	0:0	4	->
water	82:12	0:0	4	poc_type
op	82:21	0:0	4	==
water	82:24	0:0	4	0
stmts	82:26	89:4	3	
water	82:26	0:0	4	{
water	83:8	0:0	4	unsigned
water	83:17	0:0	4	t
op	83:19	0:0	4	=
call	83:21	83:41	4	get_ue_golomb
arg	83:35	83:41	5	&s->gb
op	83:35	0:0	6	&
water	83:36	0:0	6	s
op	83:37	0:0	6	->
water	83:39	0:0	6	gb
water	83:42	0:0	4	;
if	84:8	87:8	4	(t > 12)
cond	84:11	84:13	5	t > 12
water	84:11	0:0	6	t
op	84:12	0:0	6	>
water	84:13	0:0	6	12
stmts	84:16	87:8	5	
water	84:16	0:0	6	{
call	85:12	85:89	6	av_log
arg	85:19	85:29	7	h->s.avctx
water	85:19	0:0	8	h
op	85:20	0:0	8	->
water	85:22	0:0	8	s
op	85:23	0:0	8	.
water	85:24	0:0	8	avctx
arg	85:31	85:43	7	AV_LOG_ERROR
water	85:31	0:0	8	AV_LOG_ERROR
arg	85:45	85:86	7	"log2_max_poc_lsb (%d) is out of range\n"
water	85:45	0:0	8	"log2_max_poc_lsb (%d) is out of range\n"
arg	85:88	85:89	7	t
water	85:88	0:0	8	t
water	85:90	0:0	6	;
goto	86:12	86:21	6	fail
water	86:17	0:0	7	fail
water	87:8	0:0	6	}
water	88:8	0:0	4	sps
op	88:11	0:0	4	->
water	88:13	0:0	4	log2_max_poc_lsb
op	88:29	0:0	4	=
water	88:31	0:0	4	t
op	88:33	0:0	4	+
water	88:35	0:0	4	4
water	88:36	0:0	4	;
water	89:4	0:0	4	}
else	89:6	102:4	2
stmts	89:11	102:4	3	
if	89:11	102:4	4	(sps -> poc_type == 1)
cond	89:14	89:31	5	sps -> poc_type == 1
water	89:14	0:0	6	sps
op	89:17	0:0	6	->
water	89:19	0:0	6	poc_type
op	89:28	0:0	6	==
water	89:31	0:0	6	1
stmts	89:33	102:4	5	
water	89:33	0:0	6	{
water	90:8	0:0	6	sps
op	90:11	0:0	6	->
water	90:13	0:0	6	delta_pic_order_always_zero_flag
op	90:45	0:0	6	=
call	90:47	90:63	6	get_bits1
arg	90:57	90:63	7	&s->gb
op	90:57	0:0	8	&
water	90:58	0:0	8	s
op	90:59	0:0	8	->
water	90:61	0:0	8	gb
water	90:64	0:0	6	;
water	91:8	0:0	6	sps
op	91:11	0:0	6	->
water	91:13	0:0	6	offset_for_non_ref_pic
op	91:35	0:0	6	=
call	91:37	91:57	6	get_se_golomb
arg	91:51	91:57	7	&s->gb
op	91:51	0:0	8	&
water	91:52	0:0	8	s
op	91:53	0:0	8	->
water	91:55	0:0	8	gb
water	91:58	0:0	6	;
water	92:8	0:0	6	sps
op	92:11	0:0	6	->
water	92:13	0:0	6	offset_for_top_to_bottom_field
op	92:43	0:0	6	=
call	92:45	92:65	6	get_se_golomb
arg	92:59	92:65	7	&s->gb
op	92:59	0:0	8	&
water	92:60	0:0	8	s
op	92:61	0:0	8	->
water	92:63	0:0	8	gb
water	92:66	0:0	6	;
water	93:8	0:0	6	sps
op	93:11	0:0	6	->
water	93:13	0:0	6	poc_cycle_length
op	93:45	0:0	6	=
call	93:47	93:67	6	get_ue_golomb
arg	93:61	93:67	7	&s->gb
op	93:61	0:0	8	&
water	93:62	0:0	8	s
op	93:63	0:0	8	->
water	93:65	0:0	8	gb
water	93:68	0:0	6	;
if	95:8	98:8	6	(( unsigned ) sps -> poc_cycle_length >=FF_ARRAY_ELEMS (sps -> offset_for_ref_frame ))
cond	95:11	95:86	7	( unsigned ) sps -> poc_cycle_length >=FF_ARRAY_ELEMS (sps -> offset_for_ref_frame )
water	95:11	0:0	8	(
water	95:12	0:0	8	unsigned
water	95:20	0:0	8	)
water	95:21	0:0	8	sps
op	95:24	0:0	8	->
water	95:26	0:0	8	poc_cycle_length
op	95:43	0:0	8	>=
call	95:46	95:86	8	FF_ARRAY_ELEMS
arg	95:61	95:86	9	sps->offset_for_ref_frame
water	95:61	0:0	10	sps
op	95:64	0:0	10	->
water	95:66	0:0	10	offset_for_ref_frame
stmts	95:88	98:8	7	
water	95:88	0:0	8	{
call	96:12	96:100	8	av_log
arg	96:19	96:29	9	h->s.avctx
water	96:19	0:0	10	h
op	96:20	0:0	10	->
water	96:22	0:0	10	s
op	96:23	0:0	10	.
water	96:24	0:0	10	avctx
arg	96:31	96:43	9	AV_LOG_ERROR
water	96:31	0:0	10	AV_LOG_ERROR
arg	96:45	96:77	9	"poc_cycle_length overflow %u\n"
water	96:45	0:0	10	"poc_cycle_length overflow %u\n"
arg	96:79	96:100	9	sps->poc_cycle_length
water	96:79	0:0	10	sps
op	96:82	0:0	10	->
water	96:84	0:0	10	poc_cycle_length
water	96:101	0:0	8	;
goto	97:12	97:21	8	fail
water	97:17	0:0	9	fail
water	98:8	0:0	8	}
for	100:8	101:63	6	(i = 0 ;i < sps -> poc_cycle_length;i ++)
forinit	100:12	100:15	7	i = 0 ;
water	100:12	0:0	8	i
op	100:13	0:0	8	=
water	100:14	0:0	8	0
water	100:15	0:0	8	;
cond	100:17	100:24	7	i < sps -> poc_cycle_length
water	100:17	0:0	8	i
op	100:18	0:0	8	<
water	100:19	0:0	8	sps
op	100:22	0:0	8	->
water	100:24	0:0	8	poc_cycle_length
forexpr	100:42	100:43	7	i ++
water	100:42	0:0	8	i
op	100:43	0:0	8	++
stmts	101:12	101:63	7	
water	101:12	0:0	8	sps
op	101:15	0:0	8	->
water	101:17	0:0	8	offset_for_ref_frame
op	101:37	0:0	8	[
water	101:38	0:0	8	i
op	101:39	0:0	8	]
op	101:40	0:0	8	=
call	101:42	101:62	8	get_se_golomb
arg	101:56	101:62	9	&s->gb
op	101:56	0:0	10	&
water	101:57	0:0	10	s
op	101:58	0:0	10	->
water	101:60	0:0	10	gb
water	101:63	0:0	8	;
water	102:4	0:0	6	}
else	102:5	105:4	2
stmts	102:10	105:4	3	
if	102:10	105:4	4	(sps -> poc_type != 2)
cond	102:13	102:30	5	sps -> poc_type != 2
water	102:13	0:0	6	sps
op	102:16	0:0	6	->
water	102:18	0:0	6	poc_type
op	102:27	0:0	6	!=
water	102:30	0:0	6	2
stmts	102:32	105:4	5	
water	102:32	0:0	6	{
call	103:8	103:79	6	av_log
arg	103:15	103:25	7	h->s.avctx
water	103:15	0:0	8	h
op	103:16	0:0	8	->
water	103:18	0:0	8	s
op	103:19	0:0	8	.
water	103:20	0:0	8	avctx
arg	103:27	103:39	7	AV_LOG_ERROR
water	103:27	0:0	8	AV_LOG_ERROR
arg	103:41	103:64	7	"illegal POC type %d\n"
water	103:41	0:0	8	"illegal POC type %d\n"
arg	103:66	103:79	7	sps->poc_type
water	103:66	0:0	8	sps
op	103:69	0:0	8	->
water	103:71	0:0	8	poc_type
water	103:80	0:0	6	;
goto	104:8	104:17	6	fail
water	104:13	0:0	7	fail
water	105:4	0:0	6	}
water	107:4	0:0	2	sps
op	107:7	0:0	2	->
water	107:9	0:0	2	ref_frame_count
op	107:24	0:0	2	=
call	107:26	107:49	2	get_ue_golomb_31
arg	107:43	107:49	3	&s->gb
op	107:43	0:0	4	&
water	107:44	0:0	4	s
op	107:45	0:0	4	->
water	107:47	0:0	4	gb
water	107:50	0:0	2	;
if	108:4	109:60	2	(h -> s . avctx -> codec_tag ==MKTAG ('S' ,'M' ,'V' ,'2' ))
cond	108:8	108:57	3	h -> s . avctx -> codec_tag ==MKTAG ('S' ,'M' ,'V' ,'2' )
water	108:8	0:0	4	h
op	108:9	0:0	4	->
water	108:11	0:0	4	s
op	108:12	0:0	4	.
water	108:13	0:0	4	avctx
op	108:18	0:0	4	->
water	108:20	0:0	4	codec_tag
op	108:30	0:0	4	==
call	108:33	108:57	4	MKTAG
arg	108:39	108:42	5	'S'
water	108:39	0:0	6	'S'
arg	108:44	108:47	5	'M'
water	108:44	0:0	6	'M'
arg	108:49	108:52	5	'V'
water	108:49	0:0	6	'V'
arg	108:54	108:57	5	'2'
water	108:54	0:0	6	'2'
stmts	109:8	109:60	3	
water	109:8	0:0	4	sps
op	109:11	0:0	4	->
water	109:13	0:0	4	ref_frame_count
op	109:28	0:0	4	=
call	109:30	109:59	4	FFMAX
arg	109:36	109:37	5	2
water	109:36	0:0	6	2
arg	109:39	109:59	5	sps->ref_frame_count
water	109:39	0:0	6	sps
op	109:42	0:0	6	->
water	109:44	0:0	6	ref_frame_count
water	109:60	0:0	4	;
if	110:4	113:4	2	(sps -> ref_frame_count > MAX_PICTURE_COUNT - 2 || sps -> ref_frame_count > 16 U)
cond	110:7	110:78	3	sps -> ref_frame_count > MAX_PICTURE_COUNT - 2 || sps -> ref_frame_count > 16 U
water	110:7	0:0	4	sps
op	110:10	0:0	4	->
water	110:12	0:0	4	ref_frame_count
op	110:28	0:0	4	>
water	110:30	0:0	4	MAX_PICTURE_COUNT
op	110:47	0:0	4	-
water	110:48	0:0	4	2
op	110:50	0:0	4	||
water	110:53	0:0	4	sps
op	110:56	0:0	4	->
water	110:58	0:0	4	ref_frame_count
op	110:74	0:0	4	>
water	110:76	0:0	4	16
water	110:78	0:0	4	U
stmts	110:80	113:4	3	
water	110:80	0:0	4	{
call	111:8	111:70	4	av_log
arg	111:15	111:25	5	h->s.avctx
water	111:15	0:0	6	h
op	111:16	0:0	6	->
water	111:18	0:0	6	s
op	111:19	0:0	6	.
water	111:20	0:0	6	avctx
arg	111:27	111:39	5	AV_LOG_ERROR
water	111:27	0:0	6	AV_LOG_ERROR
arg	111:41	111:70	5	"too many reference frames\n"
water	111:41	0:0	6	"too many reference frames\n"
water	111:71	0:0	4	;
goto	112:8	112:17	4	fail
water	112:13	0:0	5	fail
water	113:4	0:0	4	}
water	114:4	0:0	2	sps
op	114:7	0:0	2	->
water	114:9	0:0	2	gaps_in_frame_num_allowed_flag
op	114:39	0:0	2	=
call	114:41	114:57	2	get_bits1
arg	114:51	114:57	3	&s->gb
op	114:51	0:0	4	&
water	114:52	0:0	4	s
op	114:53	0:0	4	->
water	114:55	0:0	4	gb
water	114:58	0:0	2	;
water	115:4	0:0	2	sps
op	115:7	0:0	2	->
water	115:9	0:0	2	mb_width
op	115:18	0:0	2	=
call	115:20	115:40	2	get_ue_golomb
arg	115:34	115:40	3	&s->gb
op	115:34	0:0	4	&
water	115:35	0:0	4	s
op	115:36	0:0	4	->
water	115:38	0:0	4	gb
op	115:42	0:0	2	+
water	115:44	0:0	2	1
water	115:45	0:0	2	;
water	116:4	0:0	2	sps
op	116:7	0:0	2	->
water	116:9	0:0	2	mb_height
op	116:18	0:0	2	=
call	116:20	116:40	2	get_ue_golomb
arg	116:34	116:40	3	&s->gb
op	116:34	0:0	4	&
water	116:35	0:0	4	s
op	116:36	0:0	4	->
water	116:38	0:0	4	gb
op	116:42	0:0	2	+
water	116:44	0:0	2	1
water	116:45	0:0	2	;
if	117:4	121:4	2	(( unsigned ) sps -> mb_width >= INT_MAX / 16 || ( unsigned ) sps -> mb_height >= INT_MAX / 16 ||av_image_check_size (16 * sps -> mb_width ,16 * sps -> mb_height ,0 ,h -> s . avctx ))
cond	117:7	118:77	3	( unsigned ) sps -> mb_width >= INT_MAX / 16 || ( unsigned ) sps -> mb_height >= INT_MAX / 16 ||av_image_check_size (16 * sps -> mb_width ,16 * sps -> mb_height ,0 ,h -> s . avctx )
water	117:7	0:0	4	(
water	117:8	0:0	4	unsigned
water	117:16	0:0	4	)
water	117:17	0:0	4	sps
op	117:20	0:0	4	->
water	117:22	0:0	4	mb_width
op	117:31	0:0	4	>=
water	117:34	0:0	4	INT_MAX
op	117:41	0:0	4	/
water	117:42	0:0	4	16
op	117:45	0:0	4	||
water	117:48	0:0	4	(
water	117:49	0:0	4	unsigned
water	117:57	0:0	4	)
water	117:58	0:0	4	sps
op	117:61	0:0	4	->
water	117:63	0:0	4	mb_height
op	117:73	0:0	4	>=
water	117:76	0:0	4	INT_MAX
op	117:83	0:0	4	/
water	117:84	0:0	4	16
op	117:87	0:0	4	||
call	118:7	118:77	4	av_image_check_size
arg	118:27	118:43	5	16*sps->mb_width
water	118:27	0:0	6	16
op	118:29	0:0	6	*
water	118:30	0:0	6	sps
op	118:33	0:0	6	->
water	118:35	0:0	6	mb_width
arg	118:45	118:62	5	16*sps->mb_height
water	118:45	0:0	6	16
op	118:47	0:0	6	*
water	118:48	0:0	6	sps
op	118:51	0:0	6	->
water	118:53	0:0	6	mb_height
arg	118:64	118:65	5	0
water	118:64	0:0	6	0
arg	118:67	118:77	5	h->s.avctx
water	118:67	0:0	6	h
op	118:68	0:0	6	->
water	118:70	0:0	6	s
op	118:71	0:0	6	.
water	118:72	0:0	6	avctx
stmts	118:79	121:4	3	
water	118:79	0:0	4	{
call	119:8	119:69	4	av_log
arg	119:15	119:25	5	h->s.avctx
water	119:15	0:0	6	h
op	119:16	0:0	6	->
water	119:18	0:0	6	s
op	119:19	0:0	6	.
water	119:20	0:0	6	avctx
arg	119:27	119:39	5	AV_LOG_ERROR
water	119:27	0:0	6	AV_LOG_ERROR
arg	119:41	119:69	5	"mb_width/height overflow\n"
water	119:41	0:0	6	"mb_width/height overflow\n"
water	119:70	0:0	4	;
goto	120:8	120:17	4	fail
water	120:13	0:0	5	fail
water	121:4	0:0	4	}
water	123:4	0:0	2	sps
op	123:7	0:0	2	->
water	123:9	0:0	2	frame_mbs_only_flag
op	123:28	0:0	2	=
call	123:30	123:46	2	get_bits1
arg	123:40	123:46	3	&s->gb
op	123:40	0:0	4	&
water	123:41	0:0	4	s
op	123:42	0:0	4	->
water	123:44	0:0	4	gb
water	123:47	0:0	2	;
if	124:4	125:38	2	(! sps -> frame_mbs_only_flag)
cond	124:7	124:13	3	! sps -> frame_mbs_only_flag
op	124:7	0:0	4	!
water	124:8	0:0	4	sps
op	124:11	0:0	4	->
water	124:13	0:0	4	frame_mbs_only_flag
stmts	125:8	125:38	3	
water	125:8	0:0	4	sps
op	125:11	0:0	4	->
water	125:13	0:0	4	mb_aff
op	125:19	0:0	4	=
call	125:21	125:37	4	get_bits1
arg	125:31	125:37	5	&s->gb
op	125:31	0:0	6	&
water	125:32	0:0	6	s
op	125:33	0:0	6	->
water	125:35	0:0	6	gb
water	125:38	0:0	4	;
else	126:4	127:22	2
stmts	127:8	127:22	3	
water	127:8	0:0	4	sps
op	127:11	0:0	4	->
water	127:13	0:0	4	mb_aff
op	127:19	0:0	4	=
water	127:21	0:0	4	0
water	127:22	0:0	4	;
water	129:4	0:0	2	sps
op	129:7	0:0	2	->
water	129:9	0:0	2	direct_8x8_inference_flag
op	129:34	0:0	2	=
call	129:36	129:52	2	get_bits1
arg	129:46	129:52	3	&s->gb
op	129:46	0:0	4	&
water	129:47	0:0	4	s
op	129:48	0:0	4	->
water	129:50	0:0	4	gb
water	129:53	0:0	2	;
if	132:4	133:100	2	(sps -> mb_aff)
cond	132:7	132:12	3	sps -> mb_aff
water	132:7	0:0	4	sps
op	132:10	0:0	4	->
water	132:12	0:0	4	mb_aff
stmts	133:8	133:100	3	
call	133:8	133:99	4	av_log
arg	133:15	133:25	5	h->s.avctx
water	133:15	0:0	6	h
op	133:16	0:0	6	->
water	133:18	0:0	6	s
op	133:19	0:0	6	.
water	133:20	0:0	6	avctx
arg	133:27	133:39	5	AV_LOG_ERROR
water	133:27	0:0	6	AV_LOG_ERROR
arg	133:41	133:99	5	"MBAFF support not included; enable it at compile-time.\n"
water	133:41	0:0	6	"MBAFF support not included; enable it at compile-time.\n"
water	133:100	0:0	4	;
water	135:4	0:0	2	sps
op	135:7	0:0	2	->
water	135:9	0:0	2	crop
op	135:13	0:0	2	=
call	135:15	135:31	2	get_bits1
arg	135:25	135:31	3	&s->gb
op	135:25	0:0	4	&
water	135:26	0:0	4	s
op	135:27	0:0	4	->
water	135:29	0:0	4	gb
water	135:32	0:0	2	;
if	136:4	156:4	2	(sps -> crop)
cond	136:7	136:12	3	sps -> crop
water	136:7	0:0	4	sps
op	136:10	0:0	4	->
water	136:12	0:0	4	crop
stmts	136:17	156:4	3	
water	136:17	0:0	4	{
decl	137:8	137:72	4	int	crop_vertical_limit
op	137:34	0:0	4	=
water	137:36	0:0	4	sps
op	137:39	0:0	4	->
water	137:41	0:0	4	chroma_format_idc
op	137:60	0:0	4	&
water	137:62	0:0	4	2
water	137:64	0:0	4	?
water	137:66	0:0	4	16
water	137:69	0:0	4	:
water	137:71	0:0	4	8
decl	138:8	138:72	4	int	crop_horizontal_limit
op	138:34	0:0	4	=
water	138:36	0:0	4	sps
op	138:39	0:0	4	->
water	138:41	0:0	4	chroma_format_idc
op	138:59	0:0	4	==
water	138:62	0:0	4	3
water	138:64	0:0	4	?
water	138:66	0:0	4	16
water	138:69	0:0	4	:
water	138:71	0:0	4	8
water	139:8	0:0	4	sps
op	139:11	0:0	4	->
water	139:13	0:0	4	crop_left
op	139:24	0:0	4	=
call	139:26	139:46	4	get_ue_golomb
arg	139:40	139:46	5	&s->gb
op	139:40	0:0	6	&
water	139:41	0:0	6	s
op	139:42	0:0	6	->
water	139:44	0:0	6	gb
water	139:47	0:0	4	;
water	140:8	0:0	4	sps
op	140:11	0:0	4	->
water	140:13	0:0	4	crop_right
op	140:24	0:0	4	=
call	140:26	140:46	4	get_ue_golomb
arg	140:40	140:46	5	&s->gb
op	140:40	0:0	6	&
water	140:41	0:0	6	s
op	140:42	0:0	6	->
water	140:44	0:0	6	gb
water	140:47	0:0	4	;
water	141:8	0:0	4	sps
op	141:11	0:0	4	->
water	141:13	0:0	4	crop_top
op	141:24	0:0	4	=
call	141:26	141:46	4	get_ue_golomb
arg	141:40	141:46	5	&s->gb
op	141:40	0:0	6	&
water	141:41	0:0	6	s
op	141:42	0:0	6	->
water	141:44	0:0	6	gb
water	141:47	0:0	4	;
water	142:8	0:0	4	sps
op	142:11	0:0	4	->
water	142:13	0:0	4	crop_bottom
op	142:24	0:0	4	=
call	142:26	142:46	4	get_ue_golomb
arg	142:40	142:46	5	&s->gb
op	142:40	0:0	6	&
water	142:41	0:0	6	s
op	142:42	0:0	6	->
water	142:44	0:0	6	gb
water	142:47	0:0	4	;
if	143:8	145:8	4	(sps -> crop_left || sps -> crop_top)
cond	143:11	143:34	5	sps -> crop_left || sps -> crop_top
water	143:11	0:0	6	sps
op	143:14	0:0	6	->
water	143:16	0:0	6	crop_left
op	143:26	0:0	6	||
water	143:29	0:0	6	sps
op	143:32	0:0	6	->
water	143:34	0:0	6	crop_top
stmts	143:43	145:8	5	
water	143:43	0:0	6	{
call	144:12	144:176	6	av_log
arg	144:19	144:29	7	h->s.avctx
water	144:19	0:0	8	h
op	144:20	0:0	8	->
water	144:22	0:0	8	s
op	144:23	0:0	8	.
water	144:24	0:0	8	avctx
arg	144:31	144:43	7	AV_LOG_ERROR
water	144:31	0:0	8	AV_LOG_ERROR
arg	144:45	144:145	7	"insane cropping not completely supported, this could look slightly wrong ... (left: %d, top: %d)\n"
water	144:45	0:0	8	"insane cropping not completely supported, this could look slightly wrong ... (left: %d, top: %d)\n"
arg	144:147	144:161	7	sps->crop_left
water	144:147	0:0	8	sps
op	144:150	0:0	8	->
water	144:152	0:0	8	crop_left
arg	144:163	144:176	7	sps->crop_top
water	144:163	0:0	8	sps
op	144:166	0:0	8	->
water	144:168	0:0	8	crop_top
water	144:177	0:0	6	;
water	145:8	0:0	6	}
if	146:8	155:8	4	(sps -> crop_right >= crop_horizontal_limit || sps -> crop_bottom >= crop_vertical_limit)
cond	146:11	146:75	5	sps -> crop_right >= crop_horizontal_limit || sps -> crop_bottom >= crop_vertical_limit
water	146:11	0:0	6	sps
op	146:14	0:0	6	->
water	146:16	0:0	6	crop_right
op	146:27	0:0	6	>=
water	146:30	0:0	6	crop_horizontal_limit
op	146:52	0:0	6	||
water	146:55	0:0	6	sps
op	146:58	0:0	6	->
water	146:60	0:0	6	crop_bottom
op	146:72	0:0	6	>=
water	146:75	0:0	6	crop_vertical_limit
stmts	146:95	155:8	5	
water	146:95	0:0	6	{
call	147:12	147:159	6	av_log
arg	147:19	147:29	7	h->s.avctx
water	147:19	0:0	8	h
op	147:20	0:0	8	->
water	147:22	0:0	8	s
op	147:23	0:0	8	.
water	147:24	0:0	8	avctx
arg	147:31	147:43	7	AV_LOG_ERROR
water	147:31	0:0	8	AV_LOG_ERROR
arg	147:45	147:124	7	"brainfart cropping not supported, cropping disabled (right: %d, bottom: %d)\n"
water	147:45	0:0	8	"brainfart cropping not supported, cropping disabled (right: %d, bottom: %d)\n"
arg	147:126	147:141	7	sps->crop_right
water	147:126	0:0	8	sps
op	147:129	0:0	8	->
water	147:131	0:0	8	crop_right
arg	147:143	147:159	7	sps->crop_bottom
water	147:143	0:0	8	sps
op	147:146	0:0	8	->
water	147:148	0:0	8	crop_bottom
water	147:160	0:0	6	;
water	151:8	0:0	6	sps
op	151:11	0:0	6	->
water	151:13	0:0	6	crop_left
op	151:24	0:0	6	=
water	152:8	0:0	6	sps
op	152:11	0:0	6	->
water	152:13	0:0	6	crop_right
op	152:24	0:0	6	=
water	153:8	0:0	6	sps
op	153:11	0:0	6	->
water	153:13	0:0	6	crop_top
op	153:24	0:0	6	=
water	154:8	0:0	6	sps
op	154:11	0:0	6	->
water	154:13	0:0	6	crop_bottom
op	154:24	0:0	6	=
water	154:26	0:0	6	0
water	154:27	0:0	6	;
water	155:8	0:0	6	}
water	156:4	0:0	4	}
else	156:5	161:4	2
stmts	156:9	161:4	3	
water	156:9	0:0	4	{
water	157:8	0:0	4	sps
op	157:11	0:0	4	->
water	157:13	0:0	4	crop_left
op	157:24	0:0	4	=
water	158:8	0:0	4	sps
op	158:11	0:0	4	->
water	158:13	0:0	4	crop_right
op	158:24	0:0	4	=
water	159:8	0:0	4	sps
op	159:11	0:0	4	->
water	159:13	0:0	4	crop_top
op	159:24	0:0	4	=
water	160:8	0:0	4	sps
op	160:11	0:0	4	->
water	160:13	0:0	4	crop_bottom
op	160:24	0:0	4	=
water	160:26	0:0	4	0
water	160:27	0:0	4	;
water	161:4	0:0	4	}
water	163:4	0:0	2	sps
op	163:7	0:0	2	->
water	163:9	0:0	2	vui_parameters_present_flag
op	163:36	0:0	2	=
call	163:38	163:54	2	get_bits1
arg	163:48	163:54	3	&s->gb
op	163:48	0:0	4	&
water	163:49	0:0	4	s
op	163:50	0:0	4	->
water	163:52	0:0	4	gb
water	163:55	0:0	2	;
if	164:4	166:21	2	(sps -> vui_parameters_present_flag)
cond	164:8	164:13	3	sps -> vui_parameters_present_flag
water	164:8	0:0	4	sps
op	164:11	0:0	4	->
water	164:13	0:0	4	vui_parameters_present_flag
stmts	165:8	166:21	3	
if	165:8	166:21	4	(decode_vui_parameters (h ,sps ) < 0)
cond	165:12	165:44	5	decode_vui_parameters (h ,sps ) < 0
call	165:12	165:40	6	decode_vui_parameters
arg	165:34	165:35	7	h
water	165:34	0:0	8	h
arg	165:37	165:40	7	sps
water	165:37	0:0	8	sps
op	165:42	0:0	6	<
water	165:44	0:0	6	0
stmts	166:12	166:21	5	
goto	166:12	166:21	6	fail
water	166:17	0:0	7	fail
if	168:4	169:23	2	(! sps -> sar . den)
cond	168:7	168:17	3	! sps -> sar . den
op	168:7	0:0	4	!
water	168:8	0:0	4	sps
op	168:11	0:0	4	->
water	168:13	0:0	4	sar
op	168:16	0:0	4	.
water	168:17	0:0	4	den
stmts	169:8	169:23	3	
water	169:8	0:0	4	sps
op	169:11	0:0	4	->
water	169:13	0:0	4	sar
op	169:16	0:0	4	.
water	169:17	0:0	4	den
op	169:20	0:0	4	=
water	169:22	0:0	4	1
water	169:23	0:0	4	;
if	171:4	189:4	2	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	171:7	171:23	3	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	171:7	0:0	4	s
op	171:8	0:0	4	->
water	171:10	0:0	4	avctx
op	171:15	0:0	4	->
water	171:17	0:0	4	debug
op	171:22	0:0	4	&
water	171:23	0:0	4	FF_DEBUG_PICT_INFO
stmts	171:42	189:4	3	
water	171:42	0:0	4	{
water	172:8	0:0	4	static
water	172:15	0:0	4	const
water	172:21	0:0	4	char
water	172:26	0:0	4	csp
op	172:29	0:0	4	[
water	172:30	0:0	4	4
op	172:31	0:0	4	]
op	172:32	0:0	4	[
water	172:33	0:0	4	5
op	172:34	0:0	4	]
op	172:36	0:0	4	=
water	172:38	0:0	4	{
water	172:40	0:0	4	"Gray"
water	172:46	0:0	4	,
water	172:48	0:0	4	"420"
water	172:53	0:0	4	,
water	172:55	0:0	4	"422"
water	172:60	0:0	4	,
water	172:62	0:0	4	"444"
water	172:68	0:0	4	}
water	172:69	0:0	4	;
call	173:8	188:15	4	av_log
arg	173:15	173:25	5	h->s.avctx
water	173:15	0:0	6	h
op	173:16	0:0	6	->
water	173:18	0:0	6	s
op	173:19	0:0	6	.
water	173:20	0:0	6	avctx
arg	173:27	173:39	5	AV_LOG_DEBUG
water	173:27	0:0	6	AV_LOG_DEBUG
arg	173:41	173:131	5	"sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%d/%d/%d/%d %s %s %d/%d b%d reo:%d\n"
water	173:41	0:0	6	"sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%d/%d/%d/%d %s %s %d/%d b%d reo:%d\n"
arg	174:15	174:21	5	sps_id
water	174:15	0:0	6	sps_id
arg	174:23	174:39	5	sps->profile_idc
water	174:23	0:0	6	sps
op	174:26	0:0	6	->
water	174:28	0:0	6	profile_idc
arg	174:41	174:55	5	sps->level_idc
water	174:41	0:0	6	sps
op	174:44	0:0	6	->
water	174:46	0:0	6	level_idc
arg	175:15	175:28	5	sps->poc_type
water	175:15	0:0	6	sps
op	175:18	0:0	6	->
water	175:20	0:0	6	poc_type
arg	176:15	176:35	5	sps->ref_frame_count
water	176:15	0:0	6	sps
op	176:18	0:0	6	->
water	176:20	0:0	6	ref_frame_count
arg	177:15	177:28	5	sps->mb_width
water	177:15	0:0	6	sps
op	177:18	0:0	6	->
water	177:20	0:0	6	mb_width
arg	177:30	177:44	5	sps->mb_height
water	177:30	0:0	6	sps
op	177:33	0:0	6	->
water	177:35	0:0	6	mb_height
arg	178:15	178:86	5	sps->frame_mbs_only_flag?"FRM":(sps->mb_aff?"MB-AFF":"PIC-AFF")
water	178:15	0:0	6	sps
op	178:18	0:0	6	->
water	178:20	0:0	6	frame_mbs_only_flag
water	178:40	0:0	6	?
water	178:42	0:0	6	"FRM"
water	178:48	0:0	6	:
water	178:50	0:0	6	(
water	178:51	0:0	6	sps
op	178:54	0:0	6	->
water	178:56	0:0	6	mb_aff
water	178:63	0:0	6	?
water	178:65	0:0	6	"MB-AFF"
water	178:74	0:0	6	:
water	178:76	0:0	6	"PIC-AFF"
water	178:85	0:0	6	)
arg	179:15	179:58	5	sps->direct_8x8_inference_flag?"8B8":""
water	179:15	0:0	6	sps
op	179:18	0:0	6	->
water	179:20	0:0	6	direct_8x8_inference_flag
water	179:46	0:0	6	?
water	179:48	0:0	6	"8B8"
water	179:54	0:0	6	:
water	179:56	0:0	6	""
arg	180:15	180:29	5	sps->crop_left
water	180:15	0:0	6	sps
op	180:18	0:0	6	->
water	180:20	0:0	6	crop_left
arg	180:31	180:46	5	sps->crop_right
water	180:31	0:0	6	sps
op	180:34	0:0	6	->
water	180:36	0:0	6	crop_right
arg	181:15	181:28	5	sps->crop_top
water	181:15	0:0	6	sps
op	181:18	0:0	6	->
water	181:20	0:0	6	crop_top
arg	181:30	181:46	5	sps->crop_bottom
water	181:30	0:0	6	sps
op	181:33	0:0	6	->
water	181:35	0:0	6	crop_bottom
arg	182:15	182:60	5	sps->vui_parameters_present_flag?"VUI":""
water	182:15	0:0	6	sps
op	182:18	0:0	6	->
water	182:20	0:0	6	vui_parameters_present_flag
water	182:48	0:0	6	?
water	182:50	0:0	6	"VUI"
water	182:56	0:0	6	:
water	182:58	0:0	6	""
arg	183:15	183:42	5	csp[sps->chroma_format_idc]
water	183:15	0:0	6	csp
op	183:18	0:0	6	[
water	183:19	0:0	6	sps
op	183:22	0:0	6	->
water	183:24	0:0	6	chroma_format_idc
op	183:41	0:0	6	]
arg	184:15	184:73	5	sps->timing_info_present_flag?sps->num_units_in_tick:0
water	184:15	0:0	6	sps
op	184:18	0:0	6	->
water	184:20	0:0	6	timing_info_present_flag
water	184:45	0:0	6	?
water	184:47	0:0	6	sps
op	184:50	0:0	6	->
water	184:52	0:0	6	num_units_in_tick
water	184:70	0:0	6	:
water	184:72	0:0	6	0
arg	185:15	185:66	5	sps->timing_info_present_flag?sps->time_scale:0
water	185:15	0:0	6	sps
op	185:18	0:0	6	->
water	185:20	0:0	6	timing_info_present_flag
water	185:45	0:0	6	?
water	185:47	0:0	6	sps
op	185:50	0:0	6	->
water	185:52	0:0	6	time_scale
water	185:63	0:0	6	:
water	185:65	0:0	6	0
arg	186:15	186:34	5	sps->bit_depth_luma
water	186:15	0:0	6	sps
op	186:18	0:0	6	->
water	186:20	0:0	6	bit_depth_luma
arg	187:15	188:15	5	h->sps.bitstream_restriction_flag?sps->num_reorder_frames:-1
water	187:15	0:0	6	h
op	187:16	0:0	6	->
water	187:18	0:0	6	sps
op	187:21	0:0	6	.
water	187:22	0:0	6	bitstream_restriction_flag
water	187:49	0:0	6	?
water	187:51	0:0	6	sps
op	187:54	0:0	6	->
water	187:56	0:0	6	num_reorder_frames
water	187:75	0:0	6	:
op	187:77	0:0	6	-
water	187:78	0:0	6	1
water	188:16	0:0	4	;
water	189:4	0:0	4	}
water	190:4	0:0	2	sps
op	190:7	0:0	2	->
op	190:9	0:0	2	new
op	190:13	0:0	2	=
water	190:15	0:0	2	1
water	190:16	0:0	2	;
call	192:4	192:34	2	av_free
arg	192:12	192:34	3	h->sps_buffers[sps_id]
water	192:12	0:0	4	h
op	192:13	0:0	4	->
water	192:15	0:0	4	sps_buffers
op	192:26	0:0	4	[
water	192:27	0:0	4	sps_id
op	192:33	0:0	4	]
water	192:35	0:0	2	;
water	193:4	0:0	2	h
op	193:5	0:0	2	->
water	193:7	0:0	2	sps_buffers
op	193:18	0:0	2	[
water	193:19	0:0	2	sps_id
op	193:25	0:0	2	]
op	193:27	0:0	2	=
water	193:29	0:0	2	sps
water	193:32	0:0	2	;
water	194:4	0:0	2	h
op	194:5	0:0	2	->
water	194:7	0:0	2	sps
op	194:27	0:0	2	=
op	194:29	0:0	2	*
water	194:30	0:0	2	sps
water	194:33	0:0	2	;
water	195:4	0:0	2	h
op	195:5	0:0	2	->
water	195:7	0:0	2	current_sps_id
op	195:27	0:0	2	=
water	195:29	0:0	2	sps_id
water	195:35	0:0	2	;
return	197:4	197:12	2	0
water	197:11	0:0	3	0
label	198:0	198:4	2	fail :
call	199:4	199:15	2	av_free
arg	199:12	199:15	3	sps
water	199:12	0:0	4	sps
water	199:16	0:0	2	;
return	200:4	200:13	2	-1
op	200:11	0:0	3	-
water	200:12	0:0	3	1
