func	11:0	641:0	0	static int	decode_slice_header
params	11:30	0:0	1	
param	11:31	11:45	2	H264Context *	h
param	11:47	11:62	2	H264Context *	h0
stmnts	12:4	640:12	1	
water	12:4	0:0	2	MpegEncContext
op	12:19	0:0	2	*
water	12:21	0:0	2	const
water	12:27	0:0	2	s
op	12:29	0:0	2	=
op	12:31	0:0	2	&
water	12:32	0:0	2	h
op	12:33	0:0	2	->
water	12:35	0:0	2	s
water	12:36	0:0	2	;
water	13:4	0:0	2	MpegEncContext
op	13:19	0:0	2	*
water	13:21	0:0	2	const
water	13:27	0:0	2	s0
op	13:30	0:0	2	=
op	13:32	0:0	2	&
water	13:33	0:0	2	h0
op	13:35	0:0	2	->
water	13:37	0:0	2	s
water	13:38	0:0	2	;
decl	14:4	14:34	2	unsigned int	first_mb_in_slice
decl	15:4	15:23	2	unsigned int	pps_id
decl	16:4	16:40	2	int	num_ref_idx_active_override_flag
decl	17:4	17:38	2	unsigned int	slice_type
water	17:27	0:0	2	,
decl	17:4	17:38	2	unsigned int	tmp
water	17:32	0:0	2	,
decl	17:4	17:38	2	unsigned int	i
water	17:35	0:0	2	,
decl	17:4	17:38	2	unsigned int	j
decl	18:4	18:33	2	int	default_ref_list_done
op	18:30	0:0	2	=
water	18:32	0:0	2	0
decl	19:4	19:26	2	int	last_pic_structure
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	dropable
op	21:15	0:0	2	=
water	21:17	0:0	2	h
op	21:18	0:0	2	->
water	21:20	0:0	2	nal_ref_idc
op	21:32	0:0	2	==
water	21:35	0:0	2	0
water	21:36	0:0	2	;
if	24:4	27:4	2	(( s -> avctx -> flags2 & CODEC_FLAG2_FAST ) && ! h -> nal_ref_idc && ! h -> pixel_shift)
cond	24:7	24:71	3	( s -> avctx -> flags2 & CODEC_FLAG2_FAST ) && ! h -> nal_ref_idc && ! h -> pixel_shift
water	24:7	0:0	4	(
water	24:8	0:0	4	s
op	24:9	0:0	4	->
water	24:11	0:0	4	avctx
op	24:16	0:0	4	->
water	24:18	0:0	4	flags2
op	24:25	0:0	4	&
water	24:27	0:0	4	CODEC_FLAG2_FAST
water	24:43	0:0	4	)
op	24:45	0:0	4	&&
op	24:48	0:0	4	!
water	24:49	0:0	4	h
op	24:50	0:0	4	->
water	24:52	0:0	4	nal_ref_idc
op	24:64	0:0	4	&&
op	24:67	0:0	4	!
water	24:68	0:0	4	h
op	24:69	0:0	4	->
water	24:71	0:0	4	pixel_shift
stmts	24:83	27:4	3	
water	24:83	0:0	4	{
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	me
op	25:13	0:0	4	.
water	25:14	0:0	4	qpel_put
op	25:22	0:0	4	=
water	25:24	0:0	4	s
op	25:25	0:0	4	->
water	25:27	0:0	4	dsp
op	25:30	0:0	4	.
water	25:31	0:0	4	put_2tap_qpel_pixels_tab
water	25:55	0:0	4	;
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	me
op	26:13	0:0	4	.
water	26:14	0:0	4	qpel_avg
op	26:22	0:0	4	=
water	26:24	0:0	4	s
op	26:25	0:0	4	->
water	26:27	0:0	4	dsp
op	26:30	0:0	4	.
water	26:31	0:0	4	avg_2tap_qpel_pixels_tab
water	26:55	0:0	4	;
water	27:4	0:0	4	}
else	27:5	30:4	2
stmts	27:9	30:4	3	
water	27:9	0:0	4	{
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	me
op	28:13	0:0	4	.
water	28:14	0:0	4	qpel_put
op	28:22	0:0	4	=
water	28:24	0:0	4	s
op	28:25	0:0	4	->
water	28:27	0:0	4	dsp
op	28:30	0:0	4	.
water	28:31	0:0	4	put_h264_qpel_pixels_tab
water	28:55	0:0	4	;
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	me
op	29:13	0:0	4	.
water	29:14	0:0	4	qpel_avg
op	29:22	0:0	4	=
water	29:24	0:0	4	s
op	29:25	0:0	4	->
water	29:27	0:0	4	dsp
op	29:30	0:0	4	.
water	29:31	0:0	4	avg_h264_qpel_pixels_tab
water	29:55	0:0	4	;
water	30:4	0:0	4	}
water	32:4	0:0	2	first_mb_in_slice
op	32:21	0:0	2	=
call	32:23	32:48	2	get_ue_golomb_long
arg	32:42	32:48	3	&s->gb
op	32:42	0:0	4	&
water	32:43	0:0	4	s
op	32:44	0:0	4	->
water	32:46	0:0	4	gb
water	32:49	0:0	2	;
if	34:4	42:4	2	(first_mb_in_slice == 0)
cond	34:7	34:28	3	first_mb_in_slice == 0
water	34:7	0:0	4	first_mb_in_slice
op	34:25	0:0	4	==
water	34:28	0:0	4	0
stmts	34:30	42:4	3	
water	34:30	0:0	4	{
if	35:8	37:8	4	(h0 -> current_slice && FIELD_PICTURE)
cond	35:11	35:32	5	h0 -> current_slice && FIELD_PICTURE
water	35:11	0:0	6	h0
op	35:13	0:0	6	->
water	35:15	0:0	6	current_slice
op	35:29	0:0	6	&&
water	35:32	0:0	6	FIELD_PICTURE
stmts	35:46	37:8	5	
water	35:46	0:0	6	{
call	36:12	36:26	6	field_end
arg	36:22	36:23	7	h
water	36:22	0:0	8	h
arg	36:25	36:26	7	1
water	36:25	0:0	8	1
water	36:27	0:0	6	;
water	37:8	0:0	6	}
water	39:8	0:0	4	h0
op	39:10	0:0	4	->
water	39:12	0:0	4	current_slice
op	39:26	0:0	4	=
water	39:28	0:0	4	0
water	39:29	0:0	4	;
if	40:8	41:40	4	(! s0 -> first_field)
cond	40:12	40:17	5	! s0 -> first_field
op	40:12	0:0	6	!
water	40:13	0:0	6	s0
op	40:15	0:0	6	->
water	40:17	0:0	6	first_field
stmts	41:12	41:40	5	
water	41:12	0:0	6	s
op	41:13	0:0	6	->
water	41:15	0:0	6	current_picture_ptr
op	41:34	0:0	6	=
water	41:36	0:0	6	NULL
water	41:40	0:0	6	;
water	42:4	0:0	4	}
water	44:4	0:0	2	slice_type
op	44:14	0:0	2	=
call	44:16	44:39	2	get_ue_golomb_31
arg	44:33	44:39	3	&s->gb
op	44:33	0:0	4	&
water	44:34	0:0	4	s
op	44:35	0:0	4	->
water	44:37	0:0	4	gb
water	44:40	0:0	2	;
if	45:4	48:4	2	(slice_type > 9)
cond	45:7	45:20	3	slice_type > 9
water	45:7	0:0	4	slice_type
op	45:18	0:0	4	>
water	45:20	0:0	4	9
stmts	45:22	48:4	3	
water	45:22	0:0	4	{
call	46:8	46:112	4	av_log
arg	46:15	46:25	5	h->s.avctx
water	46:15	0:0	6	h
op	46:16	0:0	6	->
water	46:18	0:0	6	s
op	46:19	0:0	6	.
water	46:20	0:0	6	avctx
arg	46:27	46:39	5	AV_LOG_ERROR
water	46:27	0:0	6	AV_LOG_ERROR
arg	46:41	46:79	5	"slice type too large (%d) at %d %d\n"
water	46:41	0:0	6	"slice type too large (%d) at %d %d\n"
arg	46:81	46:94	5	h->slice_type
water	46:81	0:0	6	h
op	46:82	0:0	6	->
water	46:84	0:0	6	slice_type
arg	46:96	46:103	5	s->mb_x
water	46:96	0:0	6	s
op	46:97	0:0	6	->
water	46:99	0:0	6	mb_x
arg	46:105	46:112	5	s->mb_y
water	46:105	0:0	6	s
op	46:106	0:0	6	->
water	46:108	0:0	6	mb_y
water	46:113	0:0	4	;
return	47:8	47:17	4	-1
op	47:15	0:0	5	-
water	47:16	0:0	5	1
water	48:4	0:0	4	}
if	49:4	52:4	2	(slice_type > 4)
cond	49:7	49:20	3	slice_type > 4
water	49:7	0:0	4	slice_type
op	49:18	0:0	4	>
water	49:20	0:0	4	4
stmts	49:22	52:4	3	
water	49:22	0:0	4	{
water	50:8	0:0	4	slice_type
op	50:19	0:0	4	-=
water	50:22	0:0	4	5
water	50:23	0:0	4	;
water	51:8	0:0	4	h
op	51:9	0:0	4	->
water	51:11	0:0	4	slice_type_fixed
op	51:27	0:0	4	=
water	51:28	0:0	4	1
water	51:29	0:0	4	;
water	52:4	0:0	4	}
else	52:5	53:29	2
stmts	53:8	53:29	3	
water	53:8	0:0	4	h
op	53:9	0:0	4	->
water	53:11	0:0	4	slice_type_fixed
op	53:27	0:0	4	=
water	53:28	0:0	4	0
water	53:29	0:0	4	;
water	55:4	0:0	2	slice_type
op	55:14	0:0	2	=
water	55:16	0:0	2	golomb_to_pict_type
op	55:35	0:0	2	[
water	55:37	0:0	2	slice_type
op	55:48	0:0	2	]
water	55:49	0:0	2	;
if	56:4	59:4	2	(slice_type == AV_PICTURE_TYPE_I || ( h0 -> current_slice != 0 && slice_type == h0 -> last_slice_type ))
cond	56:8	57:71	3	slice_type == AV_PICTURE_TYPE_I || ( h0 -> current_slice != 0 && slice_type == h0 -> last_slice_type )
water	56:8	0:0	4	slice_type
op	56:19	0:0	4	==
water	56:22	0:0	4	AV_PICTURE_TYPE_I
op	57:8	0:0	4	||
water	57:11	0:0	4	(
water	57:12	0:0	4	h0
op	57:14	0:0	4	->
water	57:16	0:0	4	current_slice
op	57:30	0:0	4	!=
water	57:33	0:0	4	0
op	57:35	0:0	4	&&
water	57:38	0:0	4	slice_type
op	57:49	0:0	4	==
water	57:52	0:0	4	h0
op	57:54	0:0	4	->
water	57:56	0:0	4	last_slice_type
water	57:71	0:0	4	)
stmts	57:75	59:4	3	
water	57:75	0:0	4	{
water	58:8	0:0	4	default_ref_list_done
op	58:30	0:0	4	=
water	58:32	0:0	4	1
water	58:33	0:0	4	;
water	59:4	0:0	4	}
water	60:4	0:0	2	h
op	60:5	0:0	2	->
water	60:7	0:0	2	slice_type
op	60:17	0:0	2	=
water	60:19	0:0	2	slice_type
water	60:29	0:0	2	;
water	61:4	0:0	2	h
op	61:5	0:0	2	->
water	61:7	0:0	2	slice_type_nos
op	61:21	0:0	2	=
water	61:23	0:0	2	slice_type
op	61:34	0:0	2	&
water	61:36	0:0	2	3
water	61:37	0:0	2	;
water	63:4	0:0	2	s
op	63:5	0:0	2	->
water	63:7	0:0	2	pict_type
op	63:16	0:0	2	=
water	63:18	0:0	2	h
op	63:19	0:0	2	->
water	63:21	0:0	2	slice_type
water	63:31	0:0	2	;
water	65:4	0:0	2	pps_id
op	65:10	0:0	2	=
call	65:12	65:32	2	get_ue_golomb
arg	65:26	65:32	3	&s->gb
op	65:26	0:0	4	&
water	65:27	0:0	4	s
op	65:28	0:0	4	->
water	65:30	0:0	4	gb
water	65:33	0:0	2	;
if	66:4	69:4	2	(pps_id >= MAX_PPS_COUNT)
cond	66:7	66:15	3	pps_id >= MAX_PPS_COUNT
water	66:7	0:0	4	pps_id
op	66:13	0:0	4	>=
water	66:15	0:0	4	MAX_PPS_COUNT
stmts	66:29	69:4	3	
water	66:29	0:0	4	{
call	67:8	67:64	4	av_log
arg	67:15	67:25	5	h->s.avctx
water	67:15	0:0	6	h
op	67:16	0:0	6	->
water	67:18	0:0	6	s
op	67:19	0:0	6	.
water	67:20	0:0	6	avctx
arg	67:27	67:39	5	AV_LOG_ERROR
water	67:27	0:0	6	AV_LOG_ERROR
arg	67:41	67:64	5	"pps_id out of range\n"
water	67:41	0:0	6	"pps_id out of range\n"
water	67:65	0:0	4	;
return	68:8	68:17	4	-1
op	68:15	0:0	5	-
water	68:16	0:0	5	1
water	69:4	0:0	4	}
if	70:4	73:4	2	(! h0 -> pps_buffers [ pps_id ])
cond	70:7	70:30	3	! h0 -> pps_buffers [ pps_id ]
op	70:7	0:0	4	!
water	70:8	0:0	4	h0
op	70:10	0:0	4	->
water	70:12	0:0	4	pps_buffers
op	70:23	0:0	4	[
water	70:24	0:0	4	pps_id
op	70:30	0:0	4	]
stmts	70:33	73:4	3	
water	70:33	0:0	4	{
call	71:8	71:83	4	av_log
arg	71:15	71:25	5	h->s.avctx
water	71:15	0:0	6	h
op	71:16	0:0	6	->
water	71:18	0:0	6	s
op	71:19	0:0	6	.
water	71:20	0:0	6	avctx
arg	71:27	71:39	5	AV_LOG_ERROR
water	71:27	0:0	6	AV_LOG_ERROR
arg	71:41	71:75	5	"non-existing PPS %u referenced\n"
water	71:41	0:0	6	"non-existing PPS %u referenced\n"
arg	71:77	71:83	5	pps_id
water	71:77	0:0	6	pps_id
water	71:84	0:0	4	;
return	72:8	72:17	4	-1
op	72:15	0:0	5	-
water	72:16	0:0	5	1
water	73:4	0:0	4	}
water	74:4	0:0	2	h
op	74:5	0:0	2	->
water	74:7	0:0	2	pps
op	74:10	0:0	2	=
op	74:12	0:0	2	*
water	74:13	0:0	2	h0
op	74:15	0:0	2	->
water	74:17	0:0	2	pps_buffers
op	74:28	0:0	2	[
water	74:29	0:0	2	pps_id
op	74:35	0:0	2	]
water	74:36	0:0	2	;
if	76:4	79:4	2	(! h0 -> sps_buffers [ h -> pps . sps_id ])
cond	76:7	76:37	3	! h0 -> sps_buffers [ h -> pps . sps_id ]
op	76:7	0:0	4	!
water	76:8	0:0	4	h0
op	76:10	0:0	4	->
water	76:12	0:0	4	sps_buffers
op	76:23	0:0	4	[
water	76:24	0:0	4	h
op	76:25	0:0	4	->
water	76:27	0:0	4	pps
op	76:30	0:0	4	.
water	76:31	0:0	4	sps_id
op	76:37	0:0	4	]
stmts	76:40	79:4	3	
water	76:40	0:0	4	{
call	77:8	77:90	4	av_log
arg	77:15	77:25	5	h->s.avctx
water	77:15	0:0	6	h
op	77:16	0:0	6	->
water	77:18	0:0	6	s
op	77:19	0:0	6	.
water	77:20	0:0	6	avctx
arg	77:27	77:39	5	AV_LOG_ERROR
water	77:27	0:0	6	AV_LOG_ERROR
arg	77:41	77:75	5	"non-existing SPS %u referenced\n"
water	77:41	0:0	6	"non-existing SPS %u referenced\n"
arg	77:77	77:90	5	h->pps.sps_id
water	77:77	0:0	6	h
op	77:78	0:0	6	->
water	77:80	0:0	6	pps
op	77:83	0:0	6	.
water	77:84	0:0	6	sps_id
water	77:91	0:0	4	;
return	78:8	78:17	4	-1
op	78:15	0:0	5	-
water	78:16	0:0	5	1
water	79:4	0:0	4	}
water	80:4	0:0	2	h
op	80:5	0:0	2	->
water	80:7	0:0	2	sps
op	80:11	0:0	2	=
op	80:13	0:0	2	*
water	80:14	0:0	2	h0
op	80:16	0:0	2	->
water	80:18	0:0	2	sps_buffers
op	80:29	0:0	2	[
water	80:30	0:0	2	h
op	80:31	0:0	2	->
water	80:33	0:0	2	pps
op	80:36	0:0	2	.
water	80:37	0:0	2	sps_id
op	80:43	0:0	2	]
water	80:44	0:0	2	;
water	82:4	0:0	2	s
op	82:5	0:0	2	->
water	82:7	0:0	2	avctx
op	82:12	0:0	2	->
water	82:14	0:0	2	profile
op	82:22	0:0	2	=
call	82:24	82:51	2	ff_h264_get_profile
arg	82:44	82:51	3	&h->sps
op	82:44	0:0	4	&
water	82:45	0:0	4	h
op	82:46	0:0	4	->
water	82:48	0:0	4	sps
water	82:52	0:0	2	;
water	83:4	0:0	2	s
op	83:5	0:0	2	->
water	83:7	0:0	2	avctx
op	83:12	0:0	2	->
water	83:14	0:0	2	level
op	83:22	0:0	2	=
water	83:24	0:0	2	h
op	83:25	0:0	2	->
water	83:27	0:0	2	sps
op	83:30	0:0	2	.
water	83:31	0:0	2	level_idc
water	83:40	0:0	2	;
water	84:4	0:0	2	s
op	84:5	0:0	2	->
water	84:7	0:0	2	avctx
op	84:12	0:0	2	->
water	84:14	0:0	2	refs
op	84:22	0:0	2	=
water	84:24	0:0	2	h
op	84:25	0:0	2	->
water	84:27	0:0	2	sps
op	84:30	0:0	2	.
water	84:31	0:0	2	ref_frame_count
water	84:46	0:0	2	;
if	86:4	89:4	2	(h == h0 && h -> dequant_coeff_pps != pps_id)
cond	86:7	86:42	3	h == h0 && h -> dequant_coeff_pps != pps_id
water	86:7	0:0	4	h
op	86:9	0:0	4	==
water	86:12	0:0	4	h0
op	86:15	0:0	4	&&
water	86:18	0:0	4	h
op	86:19	0:0	4	->
water	86:21	0:0	4	dequant_coeff_pps
op	86:39	0:0	4	!=
water	86:42	0:0	4	pps_id
stmts	86:49	89:4	3	
water	86:49	0:0	4	{
water	87:8	0:0	4	h
op	87:9	0:0	4	->
water	87:11	0:0	4	dequant_coeff_pps
op	87:29	0:0	4	=
water	87:31	0:0	4	pps_id
water	87:37	0:0	4	;
call	88:8	88:29	4	init_dequant_tables
arg	88:28	88:29	5	h
water	88:28	0:0	6	h
water	88:30	0:0	4	;
water	89:4	0:0	4	}
water	91:4	0:0	2	s
op	91:5	0:0	2	->
water	91:7	0:0	2	mb_width
op	91:15	0:0	2	=
water	91:17	0:0	2	h
op	91:18	0:0	2	->
water	91:20	0:0	2	sps
op	91:23	0:0	2	.
water	91:24	0:0	2	mb_width
water	91:32	0:0	2	;
water	92:4	0:0	2	s
op	92:5	0:0	2	->
water	92:7	0:0	2	mb_height
op	92:16	0:0	2	=
water	92:18	0:0	2	h
op	92:19	0:0	2	->
water	92:21	0:0	2	sps
op	92:24	0:0	2	.
water	92:25	0:0	2	mb_height
op	92:35	0:0	2	*
water	92:37	0:0	2	(
water	92:38	0:0	2	2
op	92:40	0:0	2	-
water	92:42	0:0	2	h
op	92:43	0:0	2	->
water	92:45	0:0	2	sps
op	92:48	0:0	2	.
water	92:49	0:0	2	frame_mbs_only_flag
water	92:68	0:0	2	)
water	92:69	0:0	2	;
water	94:4	0:0	2	h
op	94:5	0:0	2	->
water	94:7	0:0	2	b_stride
op	94:15	0:0	2	=
water	94:18	0:0	2	s
op	94:19	0:0	2	->
water	94:21	0:0	2	mb_width
op	94:29	0:0	2	*
water	94:30	0:0	2	4
water	94:31	0:0	2	;
water	96:4	0:0	2	s
op	96:5	0:0	2	->
water	96:7	0:0	2	chroma_y_shift
op	96:22	0:0	2	=
water	96:24	0:0	2	h
op	96:25	0:0	2	->
water	96:27	0:0	2	sps
op	96:30	0:0	2	.
water	96:31	0:0	2	chroma_format_idc
op	96:49	0:0	2	<=
water	96:52	0:0	2	1
water	96:53	0:0	2	;
water	98:4	0:0	2	s
op	98:5	0:0	2	->
water	98:7	0:0	2	width
op	98:13	0:0	2	=
water	98:15	0:0	2	16
op	98:17	0:0	2	*
water	98:18	0:0	2	s
op	98:19	0:0	2	->
water	98:21	0:0	2	mb_width
water	98:29	0:0	2	;
water	99:4	0:0	2	s
op	99:5	0:0	2	->
water	99:7	0:0	2	height
op	99:13	0:0	2	=
water	99:15	0:0	2	16
op	99:17	0:0	2	*
water	99:18	0:0	2	s
op	99:19	0:0	2	->
water	99:21	0:0	2	mb_height
water	99:30	0:0	2	;
if	101:4	114:4	2	(s -> context_initialized && ( s -> width != s -> avctx -> coded_width || s -> height != s -> avctx -> coded_height || s -> avctx -> bits_per_raw_sample != h -> sps . bit_depth_luma || h -> cur_chroma_format_idc != h -> sps . chroma_format_idc ||av_cmp_q (h -> sps . sar ,s -> avctx -> sample_aspect_ratio ) ))
cond	101:8	105:66	3	s -> context_initialized && ( s -> width != s -> avctx -> coded_width || s -> height != s -> avctx -> coded_height || s -> avctx -> bits_per_raw_sample != h -> sps . bit_depth_luma || h -> cur_chroma_format_idc != h -> sps . chroma_format_idc ||av_cmp_q (h -> sps . sar ,s -> avctx -> sample_aspect_ratio ) )
water	101:8	0:0	4	s
op	101:9	0:0	4	->
water	101:11	0:0	4	context_initialized
op	102:8	0:0	4	&&
water	102:11	0:0	4	(
water	102:15	0:0	4	s
op	102:16	0:0	4	->
water	102:18	0:0	4	width
op	102:24	0:0	4	!=
water	102:27	0:0	4	s
op	102:28	0:0	4	->
water	102:30	0:0	4	avctx
op	102:35	0:0	4	->
water	102:37	0:0	4	coded_width
op	102:49	0:0	4	||
water	102:52	0:0	4	s
op	102:53	0:0	4	->
water	102:55	0:0	4	height
op	102:62	0:0	4	!=
water	102:65	0:0	4	s
op	102:66	0:0	4	->
water	102:68	0:0	4	avctx
op	102:73	0:0	4	->
water	102:75	0:0	4	coded_height
op	103:12	0:0	4	||
water	103:15	0:0	4	s
op	103:16	0:0	4	->
water	103:18	0:0	4	avctx
op	103:23	0:0	4	->
water	103:25	0:0	4	bits_per_raw_sample
op	103:45	0:0	4	!=
water	103:48	0:0	4	h
op	103:49	0:0	4	->
water	103:51	0:0	4	sps
op	103:54	0:0	4	.
water	103:55	0:0	4	bit_depth_luma
op	104:12	0:0	4	||
water	104:15	0:0	4	h
op	104:16	0:0	4	->
water	104:18	0:0	4	cur_chroma_format_idc
op	104:40	0:0	4	!=
water	104:43	0:0	4	h
op	104:44	0:0	4	->
water	104:46	0:0	4	sps
op	104:49	0:0	4	.
water	104:50	0:0	4	chroma_format_idc
op	105:12	0:0	4	||
call	105:15	105:65	4	av_cmp_q
arg	105:24	105:34	5	h->sps.sar
water	105:24	0:0	6	h
op	105:25	0:0	6	->
water	105:27	0:0	6	sps
op	105:30	0:0	6	.
water	105:31	0:0	6	sar
arg	105:36	105:65	5	s->avctx->sample_aspect_ratio
water	105:36	0:0	6	s
op	105:37	0:0	6	->
water	105:39	0:0	6	avctx
op	105:44	0:0	6	->
water	105:46	0:0	6	sample_aspect_ratio
water	105:66	0:0	4	)
stmts	105:69	114:4	3	
water	105:69	0:0	4	{
if	106:8	109:8	4	(h != h0)
cond	106:11	106:16	5	h != h0
water	106:11	0:0	6	h
op	106:13	0:0	6	!=
water	106:16	0:0	6	h0
stmts	106:20	109:8	5	
water	106:20	0:0	6	{
call	107:12	107:108	6	av_log_missing_feature
arg	107:35	107:43	7	s->avctx
water	107:35	0:0	8	s
op	107:36	0:0	8	->
water	107:38	0:0	8	avctx
arg	107:45	107:105	7	"Width/height/bit depth/chroma idc changing with threads is"
water	107:45	0:0	8	"Width/height/bit depth/chroma idc changing with threads is"
arg	107:107	107:108	7	0
water	107:107	0:0	8	0
water	107:109	0:0	6	;
return	108:12	108:21	6	-1
op	108:19	0:0	7	-
water	108:20	0:0	7	1
water	109:8	0:0	6	}
call	110:8	110:24	4	free_tables
arg	110:20	110:21	5	h
water	110:20	0:0	6	h
arg	110:23	110:24	5	0
water	110:23	0:0	6	0
water	110:25	0:0	4	;
call	111:8	111:26	4	flush_dpb
arg	111:18	111:26	5	s->avctx
water	111:18	0:0	6	s
op	111:19	0:0	6	->
water	111:21	0:0	6	avctx
water	111:27	0:0	4	;
call	112:8	112:24	4	MPV_common_end
arg	112:23	112:24	5	s
water	112:23	0:0	6	s
water	112:25	0:0	4	;
water	113:8	0:0	4	h
op	113:9	0:0	4	->
water	113:11	0:0	4	list_count
op	113:22	0:0	4	=
water	113:24	0:0	4	0
water	113:25	0:0	4	;
water	114:4	0:0	4	}
if	115:4	247:4	2	(! s -> context_initialized)
cond	115:8	115:12	3	! s -> context_initialized
op	115:8	0:0	4	!
water	115:9	0:0	4	s
op	115:10	0:0	4	->
water	115:12	0:0	4	context_initialized
stmts	115:33	247:4	3	
water	115:33	0:0	4	{
if	116:8	119:8	4	(h != h0)
cond	116:12	116:17	5	h != h0
water	116:12	0:0	6	h
op	116:14	0:0	6	!=
water	116:17	0:0	6	h0
stmts	116:21	119:8	5	
water	116:21	0:0	6	{
call	117:12	117:105	6	av_log
arg	117:19	117:29	7	h->s.avctx
water	117:19	0:0	8	h
op	117:20	0:0	8	->
water	117:22	0:0	8	s
op	117:23	0:0	8	.
water	117:24	0:0	8	avctx
arg	117:31	117:43	7	AV_LOG_ERROR
water	117:31	0:0	8	AV_LOG_ERROR
arg	117:45	117:105	7	"Cannot (re-)initialize context during parallel decoding.\n"
water	117:45	0:0	8	"Cannot (re-)initialize context during parallel decoding.\n"
water	117:106	0:0	6	;
return	118:12	118:21	6	-1
op	118:19	0:0	7	-
water	118:20	0:0	7	1
water	119:8	0:0	6	}
call	120:8	120:60	4	avcodec_set_dimensions
arg	120:31	120:39	5	s->avctx
water	120:31	0:0	6	s
op	120:32	0:0	6	->
water	120:34	0:0	6	avctx
arg	120:41	120:49	5	s->width
water	120:41	0:0	6	s
op	120:42	0:0	6	->
water	120:44	0:0	6	width
arg	120:51	120:60	5	s->height
water	120:51	0:0	6	s
op	120:52	0:0	6	->
water	120:54	0:0	6	height
water	120:61	0:0	4	;
water	121:8	0:0	4	s
op	121:9	0:0	4	->
water	121:11	0:0	4	avctx
op	121:16	0:0	4	->
water	121:18	0:0	4	width
op	121:25	0:0	4	-=
water	121:28	0:0	4	(
water	121:29	0:0	4	2
op	121:30	0:0	4	>>
water	121:32	0:0	4	CHROMA444
water	121:41	0:0	4	)
call	121:42	121:84	4	*FFMIN
arg	121:49	121:66	5	h->sps.crop_right
water	121:49	0:0	6	h
op	121:50	0:0	6	->
water	121:52	0:0	6	sps
op	121:55	0:0	6	.
water	121:56	0:0	6	crop_right
arg	121:68	121:84	5	(8<<CHROMA444)-1
water	121:68	0:0	6	(
water	121:69	0:0	6	8
op	121:70	0:0	6	<<
water	121:72	0:0	6	CHROMA444
water	121:81	0:0	6	)
op	121:82	0:0	6	-
water	121:83	0:0	6	1
water	121:85	0:0	4	;
water	122:8	0:0	4	s
op	122:9	0:0	4	->
water	122:11	0:0	4	avctx
op	122:16	0:0	4	->
water	122:18	0:0	4	height
op	122:25	0:0	4	-=
water	122:28	0:0	4	(
water	122:29	0:0	4	1
op	122:30	0:0	4	<<
water	122:32	0:0	4	s
op	122:33	0:0	4	->
water	122:35	0:0	4	chroma_y_shift
water	122:49	0:0	4	)
call	122:50	122:102	4	*FFMIN
arg	122:57	122:75	5	h->sps.crop_bottom
water	122:57	0:0	6	h
op	122:58	0:0	6	->
water	122:60	0:0	6	sps
op	122:63	0:0	6	.
water	122:64	0:0	6	crop_bottom
arg	122:77	122:102	5	(16>>s->chroma_y_shift)-1
water	122:77	0:0	6	(
water	122:78	0:0	6	16
op	122:80	0:0	6	>>
water	122:82	0:0	6	s
op	122:83	0:0	6	->
water	122:85	0:0	6	chroma_y_shift
water	122:99	0:0	6	)
op	122:100	0:0	6	-
water	122:101	0:0	6	1
op	122:104	0:0	4	*
water	122:106	0:0	4	(
water	122:107	0:0	4	2
op	122:109	0:0	4	-
water	122:111	0:0	4	h
op	122:112	0:0	4	->
water	122:114	0:0	4	sps
op	122:117	0:0	4	.
water	122:118	0:0	4	frame_mbs_only_flag
water	122:137	0:0	4	)
water	122:138	0:0	4	;
water	123:8	0:0	4	s
op	123:9	0:0	4	->
water	123:11	0:0	4	avctx
op	123:16	0:0	4	->
water	123:18	0:0	4	sample_aspect_ratio
op	123:37	0:0	4	=
water	123:39	0:0	4	h
op	123:40	0:0	4	->
water	123:42	0:0	4	sps
op	123:45	0:0	4	.
water	123:46	0:0	4	sar
water	123:49	0:0	4	;
call	124:8	124:52	4	av_assert0
arg	124:19	124:52	5	s->avctx->sample_aspect_ratio.den
water	124:19	0:0	6	s
op	124:20	0:0	6	->
water	124:22	0:0	6	avctx
op	124:27	0:0	6	->
water	124:29	0:0	6	sample_aspect_ratio
op	124:48	0:0	6	.
water	124:49	0:0	6	den
water	124:53	0:0	4	;
if	126:8	143:8	4	(s -> avctx -> bits_per_raw_sample != h -> sps . bit_depth_luma || h -> cur_chroma_format_idc != h -> sps . chroma_format_idc)
cond	126:12	127:47	5	s -> avctx -> bits_per_raw_sample != h -> sps . bit_depth_luma || h -> cur_chroma_format_idc != h -> sps . chroma_format_idc
water	126:12	0:0	6	s
op	126:13	0:0	6	->
water	126:15	0:0	6	avctx
op	126:20	0:0	6	->
water	126:22	0:0	6	bits_per_raw_sample
op	126:42	0:0	6	!=
water	126:45	0:0	6	h
op	126:46	0:0	6	->
water	126:48	0:0	6	sps
op	126:51	0:0	6	.
water	126:52	0:0	6	bit_depth_luma
op	126:67	0:0	6	||
water	127:12	0:0	6	h
op	127:13	0:0	6	->
water	127:15	0:0	6	cur_chroma_format_idc
op	127:37	0:0	6	!=
water	127:40	0:0	6	h
op	127:41	0:0	6	->
water	127:43	0:0	6	sps
op	127:46	0:0	6	.
water	127:47	0:0	6	chroma_format_idc
stmts	127:66	143:8	5	
water	127:66	0:0	6	{
if	128:12	138:12	6	(h -> sps . bit_depth_luma >= 8 && h -> sps . bit_depth_luma <= 10 && ( h -> sps . bit_depth_luma != 9 || ! CHROMA422 ))
cond	128:16	129:57	7	h -> sps . bit_depth_luma >= 8 && h -> sps . bit_depth_luma <= 10 && ( h -> sps . bit_depth_luma != 9 || ! CHROMA422 )
water	128:16	0:0	8	h
op	128:17	0:0	8	->
water	128:19	0:0	8	sps
op	128:22	0:0	8	.
water	128:23	0:0	8	bit_depth_luma
op	128:38	0:0	8	>=
water	128:41	0:0	8	8
op	128:43	0:0	8	&&
water	128:46	0:0	8	h
op	128:47	0:0	8	->
water	128:49	0:0	8	sps
op	128:52	0:0	8	.
water	128:53	0:0	8	bit_depth_luma
op	128:68	0:0	8	<=
water	128:71	0:0	8	10
op	128:74	0:0	8	&&
water	129:16	0:0	8	(
water	129:17	0:0	8	h
op	129:18	0:0	8	->
water	129:20	0:0	8	sps
op	129:23	0:0	8	.
water	129:24	0:0	8	bit_depth_luma
op	129:39	0:0	8	!=
water	129:42	0:0	8	9
op	129:44	0:0	8	||
op	129:47	0:0	8	!
water	129:48	0:0	8	CHROMA422
water	129:57	0:0	8	)
stmts	129:60	138:12	7	
water	129:60	0:0	8	{
water	130:16	0:0	8	s
op	130:17	0:0	8	->
water	130:19	0:0	8	avctx
op	130:24	0:0	8	->
water	130:26	0:0	8	bits_per_raw_sample
op	130:46	0:0	8	=
water	130:48	0:0	8	h
op	130:49	0:0	8	->
water	130:51	0:0	8	sps
op	130:54	0:0	8	.
water	130:55	0:0	8	bit_depth_luma
water	130:69	0:0	8	;
water	131:16	0:0	8	h
op	131:17	0:0	8	->
water	131:19	0:0	8	cur_chroma_format_idc
op	131:41	0:0	8	=
water	131:43	0:0	8	h
op	131:44	0:0	8	->
water	131:46	0:0	8	sps
op	131:49	0:0	8	.
water	131:50	0:0	8	chroma_format_idc
water	131:67	0:0	8	;
water	132:16	0:0	8	h
op	132:17	0:0	8	->
water	132:19	0:0	8	pixel_shift
op	132:31	0:0	8	=
water	132:33	0:0	8	h
op	132:34	0:0	8	->
water	132:36	0:0	8	sps
op	132:39	0:0	8	.
water	132:40	0:0	8	bit_depth_luma
op	132:55	0:0	8	>
water	132:57	0:0	8	8
water	132:58	0:0	8	;
call	134:16	134:92	8	ff_h264dsp_init
arg	134:32	134:43	9	&h->h264dsp
op	134:32	0:0	10	&
water	134:33	0:0	10	h
op	134:34	0:0	10	->
water	134:36	0:0	10	h264dsp
arg	134:45	134:66	9	h->sps.bit_depth_luma
water	134:45	0:0	10	h
op	134:46	0:0	10	->
water	134:48	0:0	10	sps
op	134:51	0:0	10	.
water	134:52	0:0	10	bit_depth_luma
arg	134:68	134:92	9	h->sps.chroma_format_idc
water	134:68	0:0	10	h
op	134:69	0:0	10	->
water	134:71	0:0	10	sps
op	134:74	0:0	10	.
water	134:75	0:0	10	chroma_format_idc
water	134:93	0:0	8	;
call	135:16	135:103	8	ff_h264_pred_init
arg	135:34	135:41	9	&h->hpc
op	135:34	0:0	10	&
water	135:35	0:0	10	h
op	135:36	0:0	10	->
water	135:38	0:0	10	hpc
arg	135:43	135:54	9	s->codec_id
water	135:43	0:0	10	s
op	135:44	0:0	10	->
water	135:46	0:0	10	codec_id
arg	135:56	135:77	9	h->sps.bit_depth_luma
water	135:56	0:0	10	h
op	135:57	0:0	10	->
water	135:59	0:0	10	sps
op	135:62	0:0	10	.
water	135:63	0:0	10	bit_depth_luma
arg	135:79	135:103	9	h->sps.chroma_format_idc
water	135:79	0:0	10	h
op	135:80	0:0	10	->
water	135:82	0:0	10	sps
op	135:85	0:0	10	.
water	135:86	0:0	10	chroma_format_idc
water	135:104	0:0	8	;
water	136:16	0:0	8	s
op	136:17	0:0	8	->
water	136:19	0:0	8	dsp
op	136:22	0:0	8	.
water	136:23	0:0	8	dct_bits
op	136:32	0:0	8	=
water	136:34	0:0	8	h
op	136:35	0:0	8	->
water	136:37	0:0	8	sps
op	136:40	0:0	8	.
water	136:41	0:0	8	bit_depth_luma
op	136:56	0:0	8	>
water	136:58	0:0	8	8
water	136:60	0:0	8	?
water	136:62	0:0	8	32
water	136:65	0:0	8	:
water	136:67	0:0	8	16
water	136:69	0:0	8	;
call	137:16	137:46	8	dsputil_init
arg	137:29	137:36	9	&s->dsp
op	137:29	0:0	10	&
water	137:30	0:0	10	s
op	137:31	0:0	10	->
water	137:33	0:0	10	dsp
arg	137:38	137:46	9	s->avctx
water	137:38	0:0	10	s
op	137:39	0:0	10	->
water	137:41	0:0	10	avctx
water	137:47	0:0	8	;
water	138:12	0:0	8	}
else	138:14	142:12	6
stmts	138:19	142:12	7	
water	138:19	0:0	8	{
call	139:16	140:70	8	av_log
arg	139:23	139:31	9	s->avctx
water	139:23	0:0	10	s
op	139:24	0:0	10	->
water	139:26	0:0	10	avctx
arg	139:33	139:45	9	AV_LOG_ERROR
water	139:33	0:0	10	AV_LOG_ERROR
arg	139:47	139:91	9	"Unsupported bit depth: %d chroma_idc: %d\n"
water	139:47	0:0	10	"Unsupported bit depth: %d chroma_idc: %d\n"
arg	140:23	140:44	9	h->sps.bit_depth_luma
water	140:23	0:0	10	h
op	140:24	0:0	10	->
water	140:26	0:0	10	sps
op	140:29	0:0	10	.
water	140:30	0:0	10	bit_depth_luma
arg	140:46	140:70	9	h->sps.chroma_format_idc
water	140:46	0:0	10	h
op	140:47	0:0	10	->
water	140:49	0:0	10	sps
op	140:52	0:0	10	.
water	140:53	0:0	10	chroma_format_idc
water	140:71	0:0	8	;
return	141:16	141:25	8	-1
op	141:23	0:0	9	-
water	141:24	0:0	9	1
water	142:12	0:0	8	}
water	143:8	0:0	6	}
if	145:8	152:8	4	(h -> sps . video_signal_type_present_flag)
cond	145:11	145:18	5	h -> sps . video_signal_type_present_flag
water	145:11	0:0	6	h
op	145:12	0:0	6	->
water	145:14	0:0	6	sps
op	145:17	0:0	6	.
water	145:18	0:0	6	video_signal_type_present_flag
stmts	145:49	152:8	5	
water	145:49	0:0	6	{
water	146:12	0:0	6	s
op	146:13	0:0	6	->
water	146:15	0:0	6	avctx
op	146:20	0:0	6	->
water	146:22	0:0	6	color_range
op	146:34	0:0	6	=
water	146:36	0:0	6	h
op	146:37	0:0	6	->
water	146:39	0:0	6	sps
op	146:42	0:0	6	.
water	146:43	0:0	6	full_range
op	146:53	0:0	6	>
water	146:54	0:0	6	0
water	146:56	0:0	6	?
water	146:58	0:0	6	AVCOL_RANGE_JPEG
water	146:75	0:0	6	:
water	146:77	0:0	6	AVCOL_RANGE_MPEG
water	146:93	0:0	6	;
if	147:12	151:12	6	(h -> sps . colour_description_present_flag)
cond	147:15	147:22	7	h -> sps . colour_description_present_flag
water	147:15	0:0	8	h
op	147:16	0:0	8	->
water	147:18	0:0	8	sps
op	147:21	0:0	8	.
water	147:22	0:0	8	colour_description_present_flag
stmts	147:54	151:12	7	
water	147:54	0:0	8	{
water	148:16	0:0	8	s
op	148:17	0:0	8	->
water	148:19	0:0	8	avctx
op	148:24	0:0	8	->
water	148:26	0:0	8	color_primaries
op	148:42	0:0	8	=
water	148:44	0:0	8	h
op	148:45	0:0	8	->
water	148:47	0:0	8	sps
op	148:50	0:0	8	.
water	148:51	0:0	8	color_primaries
water	148:66	0:0	8	;
water	149:16	0:0	8	s
op	149:17	0:0	8	->
water	149:19	0:0	8	avctx
op	149:24	0:0	8	->
water	149:26	0:0	8	color_trc
op	149:42	0:0	8	=
water	149:44	0:0	8	h
op	149:45	0:0	8	->
water	149:47	0:0	8	sps
op	149:50	0:0	8	.
water	149:51	0:0	8	color_trc
water	149:60	0:0	8	;
water	150:16	0:0	8	s
op	150:17	0:0	8	->
water	150:19	0:0	8	avctx
op	150:24	0:0	8	->
water	150:26	0:0	8	colorspace
op	150:42	0:0	8	=
water	150:44	0:0	8	h
op	150:45	0:0	8	->
water	150:47	0:0	8	sps
op	150:50	0:0	8	.
water	150:51	0:0	8	colorspace
water	150:61	0:0	8	;
water	151:12	0:0	8	}
water	152:8	0:0	6	}
if	154:8	160:8	4	(h -> sps . timing_info_present_flag)
cond	154:11	154:18	5	h -> sps . timing_info_present_flag
water	154:11	0:0	6	h
op	154:12	0:0	6	->
water	154:14	0:0	6	sps
op	154:17	0:0	6	.
water	154:18	0:0	6	timing_info_present_flag
stmts	154:43	160:8	5	
water	154:43	0:0	6	{
decl	155:12	155:42	6	int64_t	den
op	155:23	0:0	6	=
water	155:25	0:0	6	h
op	155:26	0:0	6	->
water	155:28	0:0	6	sps
op	155:31	0:0	6	.
water	155:32	0:0	6	time_scale
if	156:12	157:24	6	(h -> x264_build < 44 U)
cond	156:15	156:33	7	h -> x264_build < 44 U
water	156:15	0:0	8	h
op	156:16	0:0	8	->
water	156:18	0:0	8	x264_build
op	156:29	0:0	8	<
water	156:31	0:0	8	44
water	156:33	0:0	8	U
stmts	157:16	157:24	7	
water	157:16	0:0	8	den
op	157:20	0:0	8	*=
water	157:23	0:0	8	2
water	157:24	0:0	8	;
call	158:12	159:58	6	av_reduce
arg	158:22	158:46	7	&s->avctx->time_base.num
op	158:22	0:0	8	&
water	158:23	0:0	8	s
op	158:24	0:0	8	->
water	158:26	0:0	8	avctx
op	158:31	0:0	8	->
water	158:33	0:0	8	time_base
op	158:42	0:0	8	.
water	158:43	0:0	8	num
arg	158:48	158:72	7	&s->avctx->time_base.den
op	158:48	0:0	8	&
water	158:49	0:0	8	s
op	158:50	0:0	8	->
water	158:52	0:0	8	avctx
op	158:57	0:0	8	->
water	158:59	0:0	8	time_base
op	158:68	0:0	8	.
water	158:69	0:0	8	den
arg	159:22	159:46	7	h->sps.num_units_in_tick
water	159:22	0:0	8	h
op	159:23	0:0	8	->
water	159:25	0:0	8	sps
op	159:28	0:0	8	.
water	159:29	0:0	8	num_units_in_tick
arg	159:48	159:51	7	den
water	159:48	0:0	8	den
arg	159:53	159:58	7	1<<30
water	159:53	0:0	8	1
op	159:54	0:0	8	<<
water	159:56	0:0	8	30
water	159:59	0:0	6	;
water	160:8	0:0	6	}
switch	162:8	204:8	4	(h -> sps . bit_depth_luma)
cond	162:16	162:23	5	h -> sps . bit_depth_luma
water	162:16	0:0	6	h
op	162:17	0:0	6	->
water	162:19	0:0	6	sps
op	162:22	0:0	6	.
water	162:23	0:0	6	bit_depth_luma
stmts	162:39	204:8	5	
water	162:39	0:0	6	{
label	163:12	163:19	6	case 9 :
if	164:16	169:16	6	(CHROMA444)
cond	164:20	164:20	7	CHROMA444
water	164:20	0:0	8	CHROMA444
stmts	164:31	169:16	7	
water	164:31	0:0	8	{
if	165:20	167:20	8	(s -> avctx -> colorspace == AVCOL_SPC_RGB)
cond	165:24	165:48	9	s -> avctx -> colorspace == AVCOL_SPC_RGB
water	165:24	0:0	10	s
op	165:25	0:0	10	->
water	165:27	0:0	10	avctx
op	165:32	0:0	10	->
water	165:34	0:0	10	colorspace
op	165:45	0:0	10	==
water	165:48	0:0	10	AVCOL_SPC_RGB
stmts	165:63	167:20	9	
water	165:63	0:0	10	{
water	166:24	0:0	10	s
op	166:25	0:0	10	->
water	166:27	0:0	10	avctx
op	166:32	0:0	10	->
water	166:34	0:0	10	pix_fmt
op	166:42	0:0	10	=
water	166:44	0:0	10	PIX_FMT_GBRP9
water	166:57	0:0	10	;
water	167:20	0:0	10	}
else	167:22	168:60	8
stmts	168:24	168:60	9	
water	168:24	0:0	10	s
op	168:25	0:0	10	->
water	168:27	0:0	10	avctx
op	168:32	0:0	10	->
water	168:34	0:0	10	pix_fmt
op	168:42	0:0	10	=
water	168:44	0:0	10	PIX_FMT_YUV444P9
water	168:60	0:0	10	;
water	169:16	0:0	8	}
else	169:18	170:56	6
stmts	169:23	170:56	7	
if	169:23	170:56	8	(CHROMA422)
cond	169:27	169:27	9	CHROMA422
water	169:27	0:0	10	CHROMA422
stmts	170:20	170:56	9	
water	170:20	0:0	10	s
op	170:21	0:0	10	->
water	170:23	0:0	10	avctx
op	170:28	0:0	10	->
water	170:30	0:0	10	pix_fmt
op	170:38	0:0	10	=
water	170:40	0:0	10	PIX_FMT_YUV422P9
water	170:56	0:0	10	;
else	171:16	172:56	6
stmts	172:20	172:56	7	
water	172:20	0:0	8	s
op	172:21	0:0	8	->
water	172:23	0:0	8	avctx
op	172:28	0:0	8	->
water	172:30	0:0	8	pix_fmt
op	172:38	0:0	8	=
water	172:40	0:0	8	PIX_FMT_YUV420P9
water	172:56	0:0	8	;
break	173:16	173:21	6	
label	174:12	174:20	6	case 10 :
if	175:16	180:16	6	(CHROMA444)
cond	175:20	175:20	7	CHROMA444
water	175:20	0:0	8	CHROMA444
stmts	175:31	180:16	7	
water	175:31	0:0	8	{
if	176:20	178:20	8	(s -> avctx -> colorspace == AVCOL_SPC_RGB)
cond	176:24	176:48	9	s -> avctx -> colorspace == AVCOL_SPC_RGB
water	176:24	0:0	10	s
op	176:25	0:0	10	->
water	176:27	0:0	10	avctx
op	176:32	0:0	10	->
water	176:34	0:0	10	colorspace
op	176:45	0:0	10	==
water	176:48	0:0	10	AVCOL_SPC_RGB
stmts	176:63	178:20	9	
water	176:63	0:0	10	{
water	177:24	0:0	10	s
op	177:25	0:0	10	->
water	177:27	0:0	10	avctx
op	177:32	0:0	10	->
water	177:34	0:0	10	pix_fmt
op	177:42	0:0	10	=
water	177:44	0:0	10	PIX_FMT_GBRP10
water	177:58	0:0	10	;
water	178:20	0:0	10	}
else	178:22	179:61	8
stmts	179:24	179:61	9	
water	179:24	0:0	10	s
op	179:25	0:0	10	->
water	179:27	0:0	10	avctx
op	179:32	0:0	10	->
water	179:34	0:0	10	pix_fmt
op	179:42	0:0	10	=
water	179:44	0:0	10	PIX_FMT_YUV444P10
water	179:61	0:0	10	;
water	180:16	0:0	8	}
else	180:18	181:57	6
stmts	180:23	181:57	7	
if	180:23	181:57	8	(CHROMA422)
cond	180:27	180:27	9	CHROMA422
water	180:27	0:0	10	CHROMA422
stmts	181:20	181:57	9	
water	181:20	0:0	10	s
op	181:21	0:0	10	->
water	181:23	0:0	10	avctx
op	181:28	0:0	10	->
water	181:30	0:0	10	pix_fmt
op	181:38	0:0	10	=
water	181:40	0:0	10	PIX_FMT_YUV422P10
water	181:57	0:0	10	;
else	182:16	183:57	6
stmts	183:20	183:57	7	
water	183:20	0:0	8	s
op	183:21	0:0	8	->
water	183:23	0:0	8	avctx
op	183:28	0:0	8	->
water	183:30	0:0	8	pix_fmt
op	183:38	0:0	8	=
water	183:40	0:0	8	PIX_FMT_YUV420P10
water	183:57	0:0	8	;
break	184:16	184:21	6	
label	185:12	185:19	6	default :
if	186:16	194:16	6	(CHROMA444)
cond	186:20	186:20	7	CHROMA444
water	186:20	0:0	8	CHROMA444
stmts	186:30	194:16	7	
water	186:30	0:0	8	{
water	187:20	0:0	8	s
op	187:21	0:0	8	->
water	187:23	0:0	8	avctx
op	187:28	0:0	8	->
water	187:30	0:0	8	pix_fmt
op	187:38	0:0	8	=
water	187:40	0:0	8	s
op	187:41	0:0	8	->
water	187:43	0:0	8	avctx
op	187:48	0:0	8	->
water	187:50	0:0	8	color_range
op	187:62	0:0	8	==
water	187:65	0:0	8	AVCOL_RANGE_JPEG
water	187:82	0:0	8	?
water	187:84	0:0	8	PIX_FMT_YUVJ444P
water	187:101	0:0	8	:
water	187:103	0:0	8	PIX_FMT_YUV444P
water	187:118	0:0	8	;
if	188:20	191:20	8	(s -> avctx -> colorspace == AVCOL_SPC_RGB)
cond	188:24	188:48	9	s -> avctx -> colorspace == AVCOL_SPC_RGB
water	188:24	0:0	10	s
op	188:25	0:0	10	->
water	188:27	0:0	10	avctx
op	188:32	0:0	10	->
water	188:34	0:0	10	colorspace
op	188:45	0:0	10	==
water	188:48	0:0	10	AVCOL_SPC_RGB
stmts	188:63	191:20	9	
water	188:63	0:0	10	{
water	189:23	0:0	10	s
op	189:24	0:0	10	->
water	189:26	0:0	10	avctx
op	189:31	0:0	10	->
water	189:33	0:0	10	pix_fmt
op	189:41	0:0	10	=
water	189:43	0:0	10	PIX_FMT_GBR24P
water	189:57	0:0	10	;
call	190:23	190:84	10	av_log
arg	190:30	190:40	11	h->s.avctx
water	190:30	0:0	12	h
op	190:31	0:0	12	->
water	190:33	0:0	12	s
op	190:34	0:0	12	.
water	190:35	0:0	12	avctx
arg	190:42	190:54	11	AV_LOG_DEBUG
water	190:42	0:0	12	AV_LOG_DEBUG
arg	190:56	190:84	11	"Detected GBR colorspace.\n"
water	190:56	0:0	12	"Detected GBR colorspace.\n"
water	190:85	0:0	10	;
water	191:20	0:0	10	}
else	191:22	193:20	8
stmts	191:27	193:20	9	
if	191:27	193:20	10	(s -> avctx -> colorspace == AVCOL_SPC_YCGCO)
cond	191:31	191:55	11	s -> avctx -> colorspace == AVCOL_SPC_YCGCO
water	191:31	0:0	12	s
op	191:32	0:0	12	->
water	191:34	0:0	12	avctx
op	191:39	0:0	12	->
water	191:41	0:0	12	colorspace
op	191:52	0:0	12	==
water	191:55	0:0	12	AVCOL_SPC_YCGCO
stmts	191:72	193:20	11	
water	191:72	0:0	12	{
call	192:24	192:101	12	av_log
arg	192:31	192:41	13	h->s.avctx
water	192:31	0:0	14	h
op	192:32	0:0	14	->
water	192:34	0:0	14	s
op	192:35	0:0	14	.
water	192:36	0:0	14	avctx
arg	192:43	192:57	13	AV_LOG_WARNING
water	192:43	0:0	14	AV_LOG_WARNING
arg	192:59	192:101	13	"Detected unsupported YCgCo colorspace.\n"
water	192:59	0:0	14	"Detected unsupported YCgCo colorspace.\n"
water	192:102	0:0	12	;
water	193:20	0:0	12	}
water	194:16	0:0	8	}
else	194:18	196:16	6
stmts	194:23	196:16	7	
if	194:23	196:16	8	(CHROMA422)
cond	194:27	194:27	9	CHROMA422
water	194:27	0:0	10	CHROMA422
stmts	194:38	196:16	9	
water	194:38	0:0	10	{
water	195:20	0:0	10	s
op	195:21	0:0	10	->
water	195:23	0:0	10	avctx
op	195:28	0:0	10	->
water	195:30	0:0	10	pix_fmt
op	195:38	0:0	10	=
water	195:40	0:0	10	s
op	195:41	0:0	10	->
water	195:43	0:0	10	avctx
op	195:48	0:0	10	->
water	195:50	0:0	10	color_range
op	195:62	0:0	10	==
water	195:65	0:0	10	AVCOL_RANGE_JPEG
water	195:82	0:0	10	?
water	195:84	0:0	10	PIX_FMT_YUVJ422P
water	195:101	0:0	10	:
water	195:103	0:0	10	PIX_FMT_YUV422P
water	195:118	0:0	10	;
water	196:16	0:0	10	}
else	196:17	203:16	6
stmts	196:21	203:16	7	
water	196:21	0:0	8	{
water	197:20	0:0	8	s
op	197:21	0:0	8	->
water	197:23	0:0	8	avctx
op	197:28	0:0	8	->
water	197:30	0:0	8	pix_fmt
op	197:38	0:0	8	=
call	197:40	202:87	8	s->avctx->get_format
arg	197:61	197:69	9	s->avctx
water	197:61	0:0	10	s
op	197:62	0:0	10	->
water	197:64	0:0	10	avctx
arg	198:61	202:87	9	s->avctx->codec->pix_fmts?s->avctx->codec->pix_fmts:s->avctx->color_range==AVCOL_RANGE_JPEG?hwaccel_pixfmt_list_h264_jpeg_420:ff_hwaccel_pixfmt_list_420
water	198:61	0:0	10	s
op	198:62	0:0	10	->
water	198:64	0:0	10	avctx
op	198:69	0:0	10	->
water	198:71	0:0	10	codec
op	198:76	0:0	10	->
water	198:78	0:0	10	pix_fmts
water	198:87	0:0	10	?
water	199:61	0:0	10	s
op	199:62	0:0	10	->
water	199:64	0:0	10	avctx
op	199:69	0:0	10	->
water	199:71	0:0	10	codec
op	199:76	0:0	10	->
water	199:78	0:0	10	pix_fmts
water	199:87	0:0	10	:
water	200:61	0:0	10	s
op	200:62	0:0	10	->
water	200:64	0:0	10	avctx
op	200:69	0:0	10	->
water	200:71	0:0	10	color_range
op	200:83	0:0	10	==
water	200:86	0:0	10	AVCOL_RANGE_JPEG
water	200:103	0:0	10	?
water	201:61	0:0	10	hwaccel_pixfmt_list_h264_jpeg_420
water	201:95	0:0	10	:
water	202:61	0:0	10	ff_hwaccel_pixfmt_list_420
water	202:88	0:0	8	;
water	203:16	0:0	8	}
water	204:8	0:0	6	}
water	206:8	0:0	4	s
op	206:9	0:0	4	->
water	206:11	0:0	4	avctx
op	206:16	0:0	4	->
water	206:18	0:0	4	hwaccel
op	206:26	0:0	4	=
call	206:28	206:82	4	ff_find_hwaccel
arg	206:44	206:63	5	s->avctx->codec->id
water	206:44	0:0	6	s
op	206:45	0:0	6	->
water	206:47	0:0	6	avctx
op	206:52	0:0	6	->
water	206:54	0:0	6	codec
op	206:59	0:0	6	->
water	206:61	0:0	6	id
arg	206:65	206:82	5	s->avctx->pix_fmt
water	206:65	0:0	6	s
op	206:66	0:0	6	->
water	206:68	0:0	6	avctx
op	206:73	0:0	6	->
water	206:75	0:0	6	pix_fmt
water	206:83	0:0	4	;
if	208:8	211:8	4	(MPV_common_init (s ) < 0)
cond	208:12	208:33	5	MPV_common_init (s ) < 0
call	208:12	208:29	6	MPV_common_init
arg	208:28	208:29	7	s
water	208:28	0:0	8	s
op	208:31	0:0	6	<
water	208:33	0:0	6	0
stmts	208:36	211:8	5	
water	208:36	0:0	6	{
call	209:12	209:74	6	av_log
arg	209:19	209:29	7	h->s.avctx
water	209:19	0:0	8	h
op	209:20	0:0	8	->
water	209:22	0:0	8	s
op	209:23	0:0	8	.
water	209:24	0:0	8	avctx
arg	209:31	209:43	7	AV_LOG_ERROR
water	209:31	0:0	8	AV_LOG_ERROR
arg	209:45	209:74	7	"MPV_common_init() failed.\n"
water	209:45	0:0	8	"MPV_common_init() failed.\n"
water	209:75	0:0	6	;
return	210:12	210:21	6	-1
op	210:19	0:0	7	-
water	210:20	0:0	7	1
water	211:8	0:0	6	}
water	212:8	0:0	4	s
op	212:9	0:0	4	->
water	212:11	0:0	4	first_field
op	212:23	0:0	4	=
water	212:25	0:0	4	0
water	212:26	0:0	4	;
water	213:8	0:0	4	h
op	213:9	0:0	4	->
water	213:11	0:0	4	prev_interlaced_frame
op	213:33	0:0	4	=
water	213:35	0:0	4	1
water	213:36	0:0	4	;
call	215:8	215:26	4	init_scan_tables
arg	215:25	215:26	5	h
water	215:25	0:0	6	h
water	215:27	0:0	4	;
if	216:8	219:8	4	(ff_h264_alloc_tables (h ) < 0)
cond	216:12	216:38	5	ff_h264_alloc_tables (h ) < 0
call	216:12	216:34	6	ff_h264_alloc_tables
arg	216:33	216:34	7	h
water	216:33	0:0	8	h
op	216:36	0:0	6	<
water	216:38	0:0	6	0
stmts	216:41	219:8	5	
water	216:41	0:0	6	{
call	217:12	217:83	6	av_log
arg	217:19	217:29	7	h->s.avctx
water	217:19	0:0	8	h
op	217:20	0:0	8	->
water	217:22	0:0	8	s
op	217:23	0:0	8	.
water	217:24	0:0	8	avctx
arg	217:31	217:43	7	AV_LOG_ERROR
water	217:31	0:0	8	AV_LOG_ERROR
arg	217:45	217:83	7	"Could not allocate memory for h264\n"
water	217:45	0:0	8	"Could not allocate memory for h264\n"
water	217:84	0:0	6	;
return	218:12	218:34	6	AVERROR(ENOMEM)
call	218:19	218:33	7	AVERROR
arg	218:27	218:33	8	ENOMEM
water	218:27	0:0	9	ENOMEM
water	219:8	0:0	6	}
if	221:8	226:8	4	(! HAVE_THREADS || ! ( s -> avctx -> active_thread_type & FF_THREAD_SLICE ))
cond	221:12	221:75	5	! HAVE_THREADS || ! ( s -> avctx -> active_thread_type & FF_THREAD_SLICE )
op	221:12	0:0	6	!
water	221:13	0:0	6	HAVE_THREADS
op	221:26	0:0	6	||
op	221:29	0:0	6	!
water	221:30	0:0	6	(
water	221:31	0:0	6	s
op	221:32	0:0	6	->
water	221:34	0:0	6	avctx
op	221:39	0:0	6	->
water	221:41	0:0	6	active_thread_type
op	221:59	0:0	6	&
water	221:60	0:0	6	FF_THREAD_SLICE
water	221:75	0:0	6	)
stmts	221:78	226:8	5	
water	221:78	0:0	6	{
if	222:12	225:12	6	(context_init (h ) < 0)
cond	222:16	222:34	7	context_init (h ) < 0
call	222:16	222:30	8	context_init
arg	222:29	222:30	9	h
water	222:29	0:0	10	h
op	222:32	0:0	8	<
water	222:34	0:0	8	0
stmts	222:37	225:12	7	
water	222:37	0:0	8	{
call	223:16	223:75	8	av_log
arg	223:23	223:33	9	h->s.avctx
water	223:23	0:0	10	h
op	223:24	0:0	10	->
water	223:26	0:0	10	s
op	223:27	0:0	10	.
water	223:28	0:0	10	avctx
arg	223:35	223:47	9	AV_LOG_ERROR
water	223:35	0:0	10	AV_LOG_ERROR
arg	223:49	223:75	9	"context_init() failed.\n"
water	223:49	0:0	10	"context_init() failed.\n"
water	223:76	0:0	8	;
return	224:16	224:25	8	-1
op	224:23	0:0	9	-
water	224:24	0:0	9	1
water	225:12	0:0	8	}
water	226:8	0:0	6	}
else	226:10	246:8	4
stmts	226:15	246:8	5	
water	226:15	0:0	6	{
for	227:12	239:12	6	(i = 1 ;i < s -> avctx -> thread_count;i ++)
forinit	227:16	227:21	7	i = 1 ;
water	227:16	0:0	8	i
op	227:18	0:0	8	=
water	227:20	0:0	8	1
water	227:21	0:0	8	;
cond	227:23	227:37	7	i < s -> avctx -> thread_count
water	227:23	0:0	8	i
op	227:25	0:0	8	<
water	227:27	0:0	8	s
op	227:28	0:0	8	->
water	227:30	0:0	8	avctx
op	227:35	0:0	8	->
water	227:37	0:0	8	thread_count
forexpr	227:51	227:52	7	i ++
water	227:51	0:0	8	i
op	227:52	0:0	8	++
stmts	227:56	239:12	7	
water	227:56	0:0	8	{
decl	228:16	228:30	8	H264Context	*c
water	229:16	0:0	8	c
op	229:18	0:0	8	=
water	229:20	0:0	8	h
op	229:21	0:0	8	->
water	229:23	0:0	8	thread_context
op	229:37	0:0	8	[
water	229:38	0:0	8	i
op	229:39	0:0	8	]
op	229:41	0:0	8	=
call	229:43	229:72	8	av_malloc
arg	229:53	229:72	9	sizeof(H264Context)
op	229:53	0:0	10	sizeof
water	229:59	0:0	10	(
water	229:60	0:0	10	H264Context
water	229:71	0:0	10	)
water	229:73	0:0	8	;
call	230:16	230:72	8	memcpy
arg	230:23	230:24	9	c
water	230:23	0:0	10	c
arg	230:26	230:48	9	h->s.thread_context[i]
water	230:26	0:0	10	h
op	230:27	0:0	10	->
water	230:29	0:0	10	s
op	230:30	0:0	10	.
water	230:31	0:0	10	thread_context
op	230:45	0:0	10	[
water	230:46	0:0	10	i
op	230:47	0:0	10	]
arg	230:50	230:72	9	sizeof(MpegEncContext)
op	230:50	0:0	10	sizeof
water	230:56	0:0	10	(
water	230:57	0:0	10	MpegEncContext
water	230:71	0:0	10	)
water	230:73	0:0	8	;
call	231:16	231:81	8	memset
arg	231:23	231:32	9	&c->s+1
op	231:23	0:0	10	&
water	231:24	0:0	10	c
op	231:25	0:0	10	->
water	231:27	0:0	10	s
op	231:29	0:0	10	+
water	231:31	0:0	10	1
arg	231:34	231:35	9	0
water	231:34	0:0	10	0
arg	231:37	231:81	9	sizeof(H264Context)-sizeof(MpegEncContext)
op	231:37	0:0	10	sizeof
water	231:43	0:0	10	(
water	231:44	0:0	10	H264Context
water	231:55	0:0	10	)
op	231:57	0:0	10	-
op	231:59	0:0	10	sizeof
water	231:65	0:0	10	(
water	231:66	0:0	10	MpegEncContext
water	231:80	0:0	10	)
water	231:82	0:0	8	;
water	232:16	0:0	8	c
op	232:17	0:0	8	->
water	232:19	0:0	8	h264dsp
op	232:27	0:0	8	=
water	232:29	0:0	8	h
op	232:30	0:0	8	->
water	232:32	0:0	8	h264dsp
water	232:39	0:0	8	;
water	233:16	0:0	8	c
op	233:17	0:0	8	->
water	233:19	0:0	8	sps
op	233:23	0:0	8	=
water	233:25	0:0	8	h
op	233:26	0:0	8	->
water	233:28	0:0	8	sps
water	233:31	0:0	8	;
water	234:16	0:0	8	c
op	234:17	0:0	8	->
water	234:19	0:0	8	pps
op	234:23	0:0	8	=
water	234:25	0:0	8	h
op	234:26	0:0	8	->
water	234:28	0:0	8	pps
water	234:31	0:0	8	;
water	235:16	0:0	8	c
op	235:17	0:0	8	->
water	235:19	0:0	8	pixel_shift
op	235:31	0:0	8	=
water	235:33	0:0	8	h
op	235:34	0:0	8	->
water	235:36	0:0	8	pixel_shift
water	235:47	0:0	8	;
water	236:16	0:0	8	c
op	236:17	0:0	8	->
water	236:19	0:0	8	cur_chroma_format_idc
op	236:41	0:0	8	=
water	236:43	0:0	8	h
op	236:44	0:0	8	->
water	236:46	0:0	8	cur_chroma_format_idc
water	236:67	0:0	8	;
call	237:16	237:34	8	init_scan_tables
arg	237:33	237:34	9	c
water	237:33	0:0	10	c
water	237:35	0:0	8	;
call	238:16	238:36	8	clone_tables
arg	238:29	238:30	9	c
water	238:29	0:0	10	c
arg	238:32	238:33	9	h
water	238:32	0:0	10	h
arg	238:35	238:36	9	i
water	238:35	0:0	10	i
water	238:37	0:0	8	;
water	239:12	0:0	8	}
for	241:12	245:16	6	(i = 0 ;i < s -> avctx -> thread_count;i ++)
forinit	241:16	241:21	7	i = 0 ;
water	241:16	0:0	8	i
op	241:18	0:0	8	=
water	241:20	0:0	8	0
water	241:21	0:0	8	;
cond	241:23	241:37	7	i < s -> avctx -> thread_count
water	241:23	0:0	8	i
op	241:25	0:0	8	<
water	241:27	0:0	8	s
op	241:28	0:0	8	->
water	241:30	0:0	8	avctx
op	241:35	0:0	8	->
water	241:37	0:0	8	thread_count
forexpr	241:51	241:52	7	i ++
water	241:51	0:0	8	i
op	241:52	0:0	8	++
stmts	242:16	245:16	7	
if	242:16	245:16	8	(context_init (h -> thread_context [ i ] ) < 0)
cond	242:20	242:57	9	context_init (h -> thread_context [ i ] ) < 0
call	242:20	242:53	10	context_init
arg	242:33	242:53	11	h->thread_context[i]
water	242:33	0:0	12	h
op	242:34	0:0	12	->
water	242:36	0:0	12	thread_context
op	242:50	0:0	12	[
water	242:51	0:0	12	i
op	242:52	0:0	12	]
op	242:55	0:0	10	<
water	242:57	0:0	10	0
stmts	242:60	245:16	9	
water	242:60	0:0	10	{
call	243:20	243:79	10	av_log
arg	243:27	243:37	11	h->s.avctx
water	243:27	0:0	12	h
op	243:28	0:0	12	->
water	243:30	0:0	12	s
op	243:31	0:0	12	.
water	243:32	0:0	12	avctx
arg	243:39	243:51	11	AV_LOG_ERROR
water	243:39	0:0	12	AV_LOG_ERROR
arg	243:53	243:79	11	"context_init() failed.\n"
water	243:53	0:0	12	"context_init() failed.\n"
water	243:80	0:0	10	;
return	244:20	244:29	10	-1
op	244:27	0:0	11	-
water	244:28	0:0	11	1
water	245:16	0:0	10	}
water	246:8	0:0	6	}
water	247:4	0:0	4	}
water	249:4	0:0	2	h
op	249:5	0:0	2	->
water	249:7	0:0	2	frame_num
op	249:16	0:0	2	=
call	249:18	249:60	2	get_bits
arg	249:27	249:33	3	&s->gb
op	249:27	0:0	4	&
water	249:28	0:0	4	s
op	249:29	0:0	4	->
water	249:31	0:0	4	gb
arg	249:35	249:60	3	h->sps.log2_max_frame_num
water	249:35	0:0	4	h
op	249:36	0:0	4	->
water	249:38	0:0	4	sps
op	249:41	0:0	4	.
water	249:42	0:0	4	log2_max_frame_num
water	249:61	0:0	2	;
water	251:4	0:0	2	h
op	251:5	0:0	2	->
water	251:7	0:0	2	mb_mbaff
op	251:16	0:0	2	=
water	251:18	0:0	2	0
water	251:19	0:0	2	;
water	252:4	0:0	2	h
op	252:5	0:0	2	->
water	252:7	0:0	2	mb_aff_frame
op	252:20	0:0	2	=
water	252:22	0:0	2	0
water	252:23	0:0	2	;
water	253:4	0:0	2	last_pic_structure
op	253:23	0:0	2	=
water	253:25	0:0	2	s0
op	253:27	0:0	2	->
water	253:29	0:0	2	picture_structure
water	253:46	0:0	2	;
if	254:4	256:4	2	(h -> sps . frame_mbs_only_flag)
cond	254:7	254:14	3	h -> sps . frame_mbs_only_flag
water	254:7	0:0	4	h
op	254:8	0:0	4	->
water	254:10	0:0	4	sps
op	254:13	0:0	4	.
water	254:14	0:0	4	frame_mbs_only_flag
stmts	254:34	256:4	3	
water	254:34	0:0	4	{
water	255:8	0:0	4	s
op	255:9	0:0	4	->
water	255:11	0:0	4	picture_structure
op	255:28	0:0	4	=
water	255:30	0:0	4	PICT_FRAME
water	255:40	0:0	4	;
water	256:4	0:0	4	}
else	256:5	267:4	2
stmts	256:9	267:4	3	
water	256:9	0:0	4	{
if	257:8	260:8	4	(! h -> sps . direct_8x8_inference_flag && slice_type == AV_PICTURE_TYPE_B)
cond	257:11	257:62	5	! h -> sps . direct_8x8_inference_flag && slice_type == AV_PICTURE_TYPE_B
op	257:11	0:0	6	!
water	257:12	0:0	6	h
op	257:13	0:0	6	->
water	257:15	0:0	6	sps
op	257:18	0:0	6	.
water	257:19	0:0	6	direct_8x8_inference_flag
op	257:45	0:0	6	&&
water	257:48	0:0	6	slice_type
op	257:59	0:0	6	==
water	257:62	0:0	6	AV_PICTURE_TYPE_B
stmts	257:80	260:8	5	
water	257:80	0:0	6	{
call	258:12	258:117	6	av_log
arg	258:19	258:29	7	h->s.avctx
water	258:19	0:0	8	h
op	258:20	0:0	8	->
water	258:22	0:0	8	s
op	258:23	0:0	8	.
water	258:24	0:0	8	avctx
arg	258:31	258:43	7	AV_LOG_ERROR
water	258:31	0:0	8	AV_LOG_ERROR
arg	258:45	258:117	7	"This stream was generated by a broken encoder, invalid 8x8 inference\n"
water	258:45	0:0	8	"This stream was generated by a broken encoder, invalid 8x8 inference\n"
water	258:118	0:0	6	;
return	259:12	259:21	6	-1
op	259:19	0:0	7	-
water	259:20	0:0	7	1
water	260:8	0:0	6	}
if	261:8	263:8	4	(get_bits1 (& s -> gb ))
cond	261:11	261:27	5	get_bits1 (& s -> gb )
call	261:11	261:27	6	get_bits1
arg	261:21	261:27	7	&s->gb
op	261:21	0:0	8	&
water	261:22	0:0	8	s
op	261:23	0:0	8	->
water	261:25	0:0	8	gb
stmts	261:30	263:8	5	
water	261:30	0:0	6	{
water	262:12	0:0	6	s
op	262:13	0:0	6	->
water	262:15	0:0	6	picture_structure
op	262:32	0:0	6	=
water	262:34	0:0	6	PICT_TOP_FIELD
op	262:49	0:0	6	+
call	262:51	262:67	6	get_bits1
arg	262:61	262:67	7	&s->gb
op	262:61	0:0	8	&
water	262:62	0:0	8	s
op	262:63	0:0	8	->
water	262:65	0:0	8	gb
water	262:68	0:0	6	;
water	263:8	0:0	6	}
else	263:10	266:8	4
stmts	263:15	266:8	5	
water	263:15	0:0	6	{
water	264:12	0:0	6	s
op	264:13	0:0	6	->
water	264:15	0:0	6	picture_structure
op	264:32	0:0	6	=
water	264:34	0:0	6	PICT_FRAME
water	264:44	0:0	6	;
water	265:12	0:0	6	h
op	265:13	0:0	6	->
water	265:15	0:0	6	mb_aff_frame
op	265:28	0:0	6	=
water	265:30	0:0	6	h
op	265:31	0:0	6	->
water	265:33	0:0	6	sps
op	265:36	0:0	6	.
water	265:37	0:0	6	mb_aff
water	265:43	0:0	6	;
water	266:8	0:0	6	}
water	267:4	0:0	4	}
water	268:4	0:0	2	h
op	268:5	0:0	2	->
water	268:7	0:0	2	mb_field_decoding_flag
op	268:29	0:0	2	=
water	268:31	0:0	2	s
op	268:32	0:0	2	->
water	268:34	0:0	2	picture_structure
op	268:52	0:0	2	!=
water	268:55	0:0	2	PICT_FRAME
water	268:65	0:0	2	;
if	270:4	364:4	2	(h0 -> current_slice == 0)
cond	270:7	270:28	3	h0 -> current_slice == 0
water	270:7	0:0	4	h0
op	270:9	0:0	4	->
water	270:11	0:0	4	current_slice
op	270:25	0:0	4	==
water	270:28	0:0	4	0
stmts	270:30	364:4	3	
water	270:30	0:0	4	{
if	272:8	284:8	4	(h -> frame_num != h -> prev_frame_num && h -> prev_frame_num >= 0)
cond	272:11	272:69	5	h -> frame_num != h -> prev_frame_num && h -> prev_frame_num >= 0
water	272:11	0:0	6	h
op	272:12	0:0	6	->
water	272:14	0:0	6	frame_num
op	272:24	0:0	6	!=
water	272:27	0:0	6	h
op	272:28	0:0	6	->
water	272:30	0:0	6	prev_frame_num
op	272:45	0:0	6	&&
water	272:48	0:0	6	h
op	272:49	0:0	6	->
water	272:51	0:0	6	prev_frame_num
op	272:66	0:0	6	>=
water	272:69	0:0	6	0
stmts	272:72	284:8	5	
water	272:72	0:0	6	{
decl	273:12	273:103	6	int	unwrap_prev_frame_num
op	273:38	0:0	6	=
water	273:40	0:0	6	h
op	273:41	0:0	6	->
water	273:43	0:0	6	prev_frame_num
water	273:57	0:0	6	,
decl	273:12	273:103	6	int	max_frame_num
op	273:73	0:0	6	=
water	273:75	0:0	6	1
op	273:76	0:0	6	<<
water	273:78	0:0	6	h
op	273:79	0:0	6	->
water	273:81	0:0	6	sps
op	273:84	0:0	6	.
water	273:85	0:0	6	log2_max_frame_num
if	275:12	275:92	6	(unwrap_prev_frame_num > h -> frame_num)
cond	275:16	275:43	7	unwrap_prev_frame_num > h -> frame_num
water	275:16	0:0	8	unwrap_prev_frame_num
op	275:38	0:0	8	>
water	275:40	0:0	8	h
op	275:41	0:0	8	->
water	275:43	0:0	8	frame_num
stmts	275:54	275:92	7	
water	275:54	0:0	8	unwrap_prev_frame_num
op	275:76	0:0	8	-=
water	275:79	0:0	8	max_frame_num
water	275:92	0:0	8	;
if	277:12	283:12	6	(( h -> frame_num - unwrap_prev_frame_num ) > h -> sps . ref_frame_count)
cond	277:16	277:64	7	( h -> frame_num - unwrap_prev_frame_num ) > h -> sps . ref_frame_count
water	277:16	0:0	8	(
water	277:17	0:0	8	h
op	277:18	0:0	8	->
water	277:20	0:0	8	frame_num
op	277:30	0:0	8	-
water	277:32	0:0	8	unwrap_prev_frame_num
water	277:53	0:0	8	)
op	277:55	0:0	8	>
water	277:57	0:0	8	h
op	277:58	0:0	8	->
water	277:60	0:0	8	sps
op	277:63	0:0	8	.
water	277:64	0:0	8	ref_frame_count
stmts	277:81	283:12	7	
water	277:81	0:0	8	{
water	278:16	0:0	8	unwrap_prev_frame_num
op	278:38	0:0	8	=
water	278:40	0:0	8	(
water	278:41	0:0	8	h
op	278:42	0:0	8	->
water	278:44	0:0	8	frame_num
op	278:54	0:0	8	-
water	278:56	0:0	8	h
op	278:57	0:0	8	->
water	278:59	0:0	8	sps
op	278:62	0:0	8	.
water	278:63	0:0	8	ref_frame_count
water	278:78	0:0	8	)
op	278:80	0:0	8	-
water	278:82	0:0	8	1
water	278:83	0:0	8	;
if	279:16	280:58	8	(unwrap_prev_frame_num < 0)
cond	279:20	279:44	9	unwrap_prev_frame_num < 0
water	279:20	0:0	10	unwrap_prev_frame_num
op	279:42	0:0	10	<
water	279:44	0:0	10	0
stmts	280:20	280:58	9	
water	280:20	0:0	10	unwrap_prev_frame_num
op	280:42	0:0	10	+=
water	280:45	0:0	10	max_frame_num
water	280:58	0:0	10	;
water	282:16	0:0	8	h
op	282:17	0:0	8	->
water	282:19	0:0	8	prev_frame_num
op	282:34	0:0	8	=
water	282:36	0:0	8	unwrap_prev_frame_num
water	282:57	0:0	8	;
water	283:12	0:0	8	}
water	284:8	0:0	6	}
while	286:8	316:8	4	(h -> frame_num != h -> prev_frame_num && h -> prev_frame_num >= 0 && h -> frame_num != ( h -> prev_frame_num + 1 ) % ( 1 << h -> sps . log2_max_frame_num ))
cond	286:14	287:81	5	h -> frame_num != h -> prev_frame_num && h -> prev_frame_num >= 0 && h -> frame_num != ( h -> prev_frame_num + 1 ) % ( 1 << h -> sps . log2_max_frame_num )
water	286:14	0:0	6	h
op	286:15	0:0	6	->
water	286:17	0:0	6	frame_num
op	286:27	0:0	6	!=
water	286:31	0:0	6	h
op	286:32	0:0	6	->
water	286:34	0:0	6	prev_frame_num
op	286:49	0:0	6	&&
water	286:52	0:0	6	h
op	286:53	0:0	6	->
water	286:55	0:0	6	prev_frame_num
op	286:70	0:0	6	>=
water	286:73	0:0	6	0
op	286:75	0:0	6	&&
water	287:14	0:0	6	h
op	287:15	0:0	6	->
water	287:17	0:0	6	frame_num
op	287:27	0:0	6	!=
water	287:30	0:0	6	(
water	287:31	0:0	6	h
op	287:32	0:0	6	->
water	287:34	0:0	6	prev_frame_num
op	287:48	0:0	6	+
water	287:49	0:0	6	1
water	287:50	0:0	6	)
op	287:51	0:0	6	%
water	287:52	0:0	6	(
water	287:53	0:0	6	1
op	287:54	0:0	6	<<
water	287:56	0:0	6	h
op	287:57	0:0	6	->
water	287:59	0:0	6	sps
op	287:62	0:0	6	.
water	287:63	0:0	6	log2_max_frame_num
water	287:81	0:0	6	)
stmts	287:83	316:8	5	
water	287:83	0:0	6	{
decl	288:12	288:71	6	Picture	*prev
op	288:26	0:0	6	=
water	288:28	0:0	6	h
op	288:29	0:0	6	->
water	288:31	0:0	6	short_ref_count
water	288:47	0:0	6	?
water	288:49	0:0	6	h
op	288:50	0:0	6	->
water	288:52	0:0	6	short_ref
op	288:61	0:0	6	[
water	288:62	0:0	6	0
op	288:63	0:0	6	]
water	288:65	0:0	6	:
water	288:67	0:0	6	NULL
call	289:12	289:101	6	av_log
arg	289:19	289:29	7	h->s.avctx
water	289:19	0:0	8	h
op	289:20	0:0	8	->
water	289:22	0:0	8	s
op	289:23	0:0	8	.
water	289:24	0:0	8	avctx
arg	289:31	289:43	7	AV_LOG_DEBUG
water	289:31	0:0	8	AV_LOG_DEBUG
arg	289:45	289:68	7	"Frame num gap %d %d\n"
water	289:45	0:0	8	"Frame num gap %d %d\n"
arg	289:70	289:82	7	h->frame_num
water	289:70	0:0	8	h
op	289:71	0:0	8	->
water	289:73	0:0	8	frame_num
arg	289:84	289:101	7	h->prev_frame_num
water	289:84	0:0	8	h
op	289:85	0:0	8	->
water	289:87	0:0	8	prev_frame_num
water	289:102	0:0	6	;
if	290:12	291:25	6	(ff_h264_frame_start (h ) < 0)
cond	290:16	290:41	7	ff_h264_frame_start (h ) < 0
call	290:16	290:37	8	ff_h264_frame_start
arg	290:36	290:37	9	h
water	290:36	0:0	10	h
op	290:39	0:0	8	<
water	290:41	0:0	8	0
stmts	291:16	291:25	7	
return	291:16	291:25	8	-1
op	291:23	0:0	9	-
water	291:24	0:0	9	1
water	292:12	0:0	6	h
op	292:13	0:0	6	->
water	292:15	0:0	6	prev_frame_num
op	292:29	0:0	6	++
water	292:31	0:0	6	;
water	293:12	0:0	6	h
op	293:13	0:0	6	->
water	293:15	0:0	6	prev_frame_num
op	293:30	0:0	6	%=
water	293:33	0:0	6	1
op	293:34	0:0	6	<<
water	293:36	0:0	6	h
op	293:37	0:0	6	->
water	293:39	0:0	6	sps
op	293:42	0:0	6	.
water	293:43	0:0	6	log2_max_frame_num
water	293:61	0:0	6	;
water	294:12	0:0	6	s
op	294:13	0:0	6	->
water	294:15	0:0	6	current_picture_ptr
op	294:34	0:0	6	->
water	294:36	0:0	6	frame_num
op	294:45	0:0	6	=
water	294:47	0:0	6	h
op	294:48	0:0	6	->
water	294:50	0:0	6	prev_frame_num
water	294:64	0:0	6	;
call	295:12	295:82	6	ff_thread_report_progress
arg	295:38	295:70	7	(AVFrame*)s->current_picture_ptr
water	295:38	0:0	8	(
water	295:39	0:0	8	AVFrame
op	295:46	0:0	8	*
water	295:47	0:0	8	)
water	295:48	0:0	8	s
op	295:49	0:0	8	->
water	295:51	0:0	8	current_picture_ptr
arg	295:72	295:79	7	INT_MAX
water	295:72	0:0	8	INT_MAX
arg	295:81	295:82	7	0
water	295:81	0:0	8	0
water	295:83	0:0	6	;
call	296:12	296:82	6	ff_thread_report_progress
arg	296:38	296:70	7	(AVFrame*)s->current_picture_ptr
water	296:38	0:0	8	(
water	296:39	0:0	8	AVFrame
op	296:46	0:0	8	*
water	296:47	0:0	8	)
water	296:48	0:0	8	s
op	296:49	0:0	8	->
water	296:51	0:0	8	current_picture_ptr
arg	296:72	296:79	7	INT_MAX
water	296:72	0:0	8	INT_MAX
arg	296:81	296:82	7	1
water	296:81	0:0	8	1
water	296:83	0:0	6	;
call	297:12	297:46	6	ff_generate_sliding_window_mmcos
arg	297:45	297:46	7	h
water	297:45	0:0	8	h
water	297:47	0:0	6	;
if	298:12	300:42	6	(ff_h264_execute_ref_pic_marking (h ,h -> mmco ,h -> mmco_index ) < 0 && ( s -> avctx -> err_recognition & AV_EF_EXPLODE ))
cond	298:16	299:58	7	ff_h264_execute_ref_pic_marking (h ,h -> mmco ,h -> mmco_index ) < 0 && ( s -> avctx -> err_recognition & AV_EF_EXPLODE )
call	298:16	298:73	8	ff_h264_execute_ref_pic_marking
arg	298:48	298:49	9	h
water	298:48	0:0	10	h
arg	298:51	298:58	9	h->mmco
water	298:51	0:0	10	h
op	298:52	0:0	10	->
water	298:54	0:0	10	mmco
arg	298:60	298:73	9	h->mmco_index
water	298:60	0:0	10	h
op	298:61	0:0	10	->
water	298:63	0:0	10	mmco_index
op	298:75	0:0	8	<
water	298:77	0:0	8	0
op	298:79	0:0	8	&&
water	299:16	0:0	8	(
water	299:17	0:0	8	s
op	299:18	0:0	8	->
water	299:20	0:0	8	avctx
op	299:25	0:0	8	->
water	299:27	0:0	8	err_recognition
op	299:43	0:0	8	&
water	299:45	0:0	8	AV_EF_EXPLODE
water	299:58	0:0	8	)
stmts	300:16	300:42	7	
return	300:16	300:42	8	AVERROR_INVALIDDATA
water	300:23	0:0	9	AVERROR_INVALIDDATA
if	307:12	315:12	6	(h -> short_ref_count)
cond	307:16	307:19	7	h -> short_ref_count
water	307:16	0:0	8	h
op	307:17	0:0	8	->
water	307:19	0:0	8	short_ref_count
stmts	307:36	315:12	7	
water	307:36	0:0	8	{
if	308:16	313:16	8	(prev)
cond	308:20	308:20	9	prev
water	308:20	0:0	10	prev
stmts	308:26	313:16	9	
water	308:26	0:0	10	{
call	309:20	311:84	10	av_image_copy
arg	309:34	309:57	11	h->short_ref[0]->f.data
water	309:34	0:0	12	h
op	309:35	0:0	12	->
water	309:37	0:0	12	short_ref
op	309:46	0:0	12	[
water	309:47	0:0	12	0
op	309:48	0:0	12	]
op	309:49	0:0	12	->
water	309:51	0:0	12	f
op	309:52	0:0	12	.
water	309:53	0:0	12	data
arg	309:59	309:86	11	h->short_ref[0]->f.linesize
water	309:59	0:0	12	h
op	309:60	0:0	12	->
water	309:62	0:0	12	short_ref
op	309:71	0:0	12	[
water	309:72	0:0	12	0
op	309:73	0:0	12	]
op	309:74	0:0	12	->
water	309:76	0:0	12	f
op	309:77	0:0	12	.
water	309:78	0:0	12	linesize
arg	310:34	310:63	11	(constuint8_t**)prev->f.data
water	310:34	0:0	12	(
water	310:35	0:0	12	const
water	310:41	0:0	12	uint8_t
op	310:48	0:0	12	*
op	310:49	0:0	12	*
water	310:50	0:0	12	)
water	310:51	0:0	12	prev
op	310:55	0:0	12	->
water	310:57	0:0	12	f
op	310:58	0:0	12	.
water	310:59	0:0	12	data
arg	310:65	310:81	11	prev->f.linesize
water	310:65	0:0	12	prev
op	310:69	0:0	12	->
water	310:71	0:0	12	f
op	310:72	0:0	12	.
water	310:73	0:0	12	linesize
arg	311:34	311:51	11	s->avctx->pix_fmt
water	311:34	0:0	12	s
op	311:35	0:0	12	->
water	311:37	0:0	12	avctx
op	311:42	0:0	12	->
water	311:44	0:0	12	pix_fmt
arg	311:53	311:67	11	s->mb_width*16
water	311:53	0:0	12	s
op	311:54	0:0	12	->
water	311:56	0:0	12	mb_width
op	311:64	0:0	12	*
water	311:65	0:0	12	16
arg	311:69	311:84	11	s->mb_height*16
water	311:69	0:0	12	s
op	311:70	0:0	12	->
water	311:72	0:0	12	mb_height
op	311:81	0:0	12	*
water	311:82	0:0	12	16
water	311:85	0:0	10	;
water	312:20	0:0	10	h
op	312:21	0:0	10	->
water	312:23	0:0	10	short_ref
op	312:32	0:0	10	[
water	312:33	0:0	10	0
op	312:34	0:0	10	]
op	312:35	0:0	10	->
water	312:37	0:0	10	poc
op	312:41	0:0	10	=
water	312:43	0:0	10	prev
op	312:47	0:0	10	->
water	312:49	0:0	10	poc
op	312:52	0:0	10	+
water	312:53	0:0	10	2
water	312:54	0:0	10	;
water	313:16	0:0	10	}
water	314:16	0:0	8	h
op	314:17	0:0	8	->
water	314:19	0:0	8	short_ref
op	314:28	0:0	8	[
water	314:29	0:0	8	0
op	314:30	0:0	8	]
op	314:31	0:0	8	->
water	314:33	0:0	8	frame_num
op	314:43	0:0	8	=
water	314:45	0:0	8	h
op	314:46	0:0	8	->
water	314:48	0:0	8	prev_frame_num
water	314:62	0:0	8	;
water	315:12	0:0	8	}
water	316:8	0:0	6	}
if	319:8	350:8	4	(s0 -> first_field)
cond	319:12	319:16	5	s0 -> first_field
water	319:12	0:0	6	s0
op	319:14	0:0	6	->
water	319:16	0:0	6	first_field
stmts	319:29	350:8	5	
water	319:29	0:0	6	{
call	320:12	320:42	6	assert
arg	320:19	320:42	7	s0->current_picture_ptr
water	320:19	0:0	8	s0
op	320:21	0:0	8	->
water	320:23	0:0	8	current_picture_ptr
water	320:43	0:0	6	;
call	321:12	321:53	6	assert
arg	321:19	321:53	7	s0->current_picture_ptr->f.data[0]
water	321:19	0:0	8	s0
op	321:21	0:0	8	->
water	321:23	0:0	8	current_picture_ptr
op	321:42	0:0	8	->
water	321:44	0:0	8	f
op	321:45	0:0	8	.
water	321:46	0:0	8	data
op	321:50	0:0	8	[
water	321:51	0:0	8	0
op	321:52	0:0	8	]
water	321:54	0:0	6	;
call	322:12	322:74	6	assert
arg	322:19	322:74	7	s0->current_picture_ptr->f.reference!=DELAYED_PIC_REF
water	322:19	0:0	8	s0
op	322:21	0:0	8	->
water	322:23	0:0	8	current_picture_ptr
op	322:42	0:0	8	->
water	322:44	0:0	8	f
op	322:45	0:0	8	.
water	322:46	0:0	8	reference
op	322:56	0:0	8	!=
water	322:59	0:0	8	DELAYED_PIC_REF
water	322:75	0:0	6	;
if	325:12	333:12	6	(! FIELD_PICTURE || s -> picture_structure == last_pic_structure)
cond	325:16	325:58	7	! FIELD_PICTURE || s -> picture_structure == last_pic_structure
op	325:16	0:0	8	!
water	325:17	0:0	8	FIELD_PICTURE
op	325:31	0:0	8	||
water	325:34	0:0	8	s
op	325:35	0:0	8	->
water	325:37	0:0	8	picture_structure
op	325:55	0:0	8	==
water	325:58	0:0	8	last_pic_structure
stmts	325:78	333:12	7	
water	325:78	0:0	8	{
water	330:16	0:0	8	s0
op	330:18	0:0	8	->
water	330:20	0:0	8	current_picture_ptr
op	330:40	0:0	8	=
water	330:42	0:0	8	NULL
water	330:46	0:0	8	;
water	331:16	0:0	8	s0
op	331:18	0:0	8	->
water	331:20	0:0	8	first_field
op	331:32	0:0	8	=
water	331:34	0:0	8	FIELD_PICTURE
water	331:47	0:0	8	;
water	333:12	0:0	8	}
else	333:14	348:12	6
stmts	333:19	348:12	7	
water	333:19	0:0	8	{
if	334:16	344:16	8	(s0 -> current_picture_ptr -> frame_num != h -> frame_num)
cond	334:20	334:61	9	s0 -> current_picture_ptr -> frame_num != h -> frame_num
water	334:20	0:0	10	s0
op	334:22	0:0	10	->
water	334:24	0:0	10	current_picture_ptr
op	334:43	0:0	10	->
water	334:45	0:0	10	frame_num
op	334:55	0:0	10	!=
water	334:58	0:0	10	h
op	334:59	0:0	10	->
water	334:61	0:0	10	frame_num
stmts	334:72	344:16	9	
water	334:72	0:0	10	{
water	341:20	0:0	10	s0
op	341:22	0:0	10	->
water	341:24	0:0	10	first_field
op	341:36	0:0	10	=
water	341:38	0:0	10	1
water	341:39	0:0	10	;
water	342:20	0:0	10	s0
op	342:22	0:0	10	->
water	342:24	0:0	10	current_picture_ptr
op	342:44	0:0	10	=
water	342:46	0:0	10	NULL
water	342:50	0:0	10	;
water	344:16	0:0	10	}
else	344:18	347:16	8
stmts	344:23	347:16	9	
water	344:23	0:0	10	{
water	346:20	0:0	10	s0
op	346:22	0:0	10	->
water	346:24	0:0	10	first_field
op	346:36	0:0	10	=
water	346:38	0:0	10	0
water	346:39	0:0	10	;
water	347:16	0:0	10	}
water	348:12	0:0	8	}
water	350:8	0:0	6	}
else	350:10	354:8	4
stmts	350:15	354:8	5	
water	350:15	0:0	6	{
call	352:12	352:43	6	assert
arg	352:19	352:43	7	!s0->current_picture_ptr
op	352:19	0:0	8	!
water	352:20	0:0	8	s0
op	352:22	0:0	8	->
water	352:24	0:0	8	current_picture_ptr
water	352:44	0:0	6	;
water	353:12	0:0	6	s0
op	353:14	0:0	6	->
water	353:16	0:0	6	first_field
op	353:28	0:0	6	=
water	353:30	0:0	6	FIELD_PICTURE
water	353:43	0:0	6	;
water	354:8	0:0	6	}
if	356:8	361:8	4	(! FIELD_PICTURE || s0 -> first_field)
cond	356:11	356:33	5	! FIELD_PICTURE || s0 -> first_field
op	356:11	0:0	6	!
water	356:12	0:0	6	FIELD_PICTURE
op	356:26	0:0	6	||
water	356:29	0:0	6	s0
op	356:31	0:0	6	->
water	356:33	0:0	6	first_field
stmts	356:46	361:8	5	
water	356:46	0:0	6	{
if	357:12	360:12	6	(ff_h264_frame_start (h ) < 0)
cond	357:16	357:41	7	ff_h264_frame_start (h ) < 0
call	357:16	357:37	8	ff_h264_frame_start
arg	357:36	357:37	9	h
water	357:36	0:0	10	h
op	357:39	0:0	8	<
water	357:41	0:0	8	0
stmts	357:44	360:12	7	
water	357:44	0:0	8	{
water	358:16	0:0	8	s0
op	358:18	0:0	8	->
water	358:20	0:0	8	first_field
op	358:32	0:0	8	=
water	358:34	0:0	8	0
water	358:35	0:0	8	;
return	359:16	359:25	8	-1
op	359:23	0:0	9	-
water	359:24	0:0	9	1
water	360:12	0:0	8	}
water	361:8	0:0	6	}
else	361:10	363:8	4
stmts	361:15	363:8	5	
water	361:15	0:0	6	{
call	362:12	362:43	6	ff_release_unused_pictures
arg	362:39	362:40	7	s
water	362:39	0:0	8	s
arg	362:42	362:43	7	0
water	362:42	0:0	8	0
water	362:44	0:0	6	;
water	363:8	0:0	6	}
water	364:4	0:0	4	}
if	365:4	366:26	2	(h != h0)
cond	365:7	365:12	3	h != h0
water	365:7	0:0	4	h
op	365:9	0:0	4	!=
water	365:12	0:0	4	h0
stmts	366:8	366:26	3	
call	366:8	366:25	4	clone_slice
arg	366:20	366:21	5	h
water	366:20	0:0	6	h
arg	366:23	366:25	5	h0
water	366:23	0:0	6	h0
water	366:26	0:0	4	;
water	368:4	0:0	2	s
op	368:5	0:0	2	->
water	368:7	0:0	2	current_picture_ptr
op	368:26	0:0	2	->
water	368:28	0:0	2	frame_num
op	368:37	0:0	2	=
water	368:39	0:0	2	h
op	368:40	0:0	2	->
water	368:42	0:0	2	frame_num
water	368:51	0:0	2	;
call	370:4	370:50	2	assert
arg	370:11	370:50	3	s->mb_num==s->mb_width*s->mb_height
water	370:11	0:0	4	s
op	370:12	0:0	4	->
water	370:14	0:0	4	mb_num
op	370:21	0:0	4	==
water	370:24	0:0	4	s
op	370:25	0:0	4	->
water	370:27	0:0	4	mb_width
op	370:36	0:0	4	*
water	370:38	0:0	4	s
op	370:39	0:0	4	->
water	370:41	0:0	4	mb_height
water	370:51	0:0	2	;
if	371:4	375:4	2	(first_mb_in_slice << FIELD_OR_MBAFF_PICTURE >= s -> mb_num || first_mb_in_slice >= s -> mb_num)
cond	371:7	372:50	3	first_mb_in_slice << FIELD_OR_MBAFF_PICTURE >= s -> mb_num || first_mb_in_slice >= s -> mb_num
water	371:7	0:0	4	first_mb_in_slice
op	371:25	0:0	4	<<
water	371:28	0:0	4	FIELD_OR_MBAFF_PICTURE
op	371:51	0:0	4	>=
water	371:54	0:0	4	s
op	371:55	0:0	4	->
water	371:57	0:0	4	mb_num
op	371:64	0:0	4	||
water	372:7	0:0	4	first_mb_in_slice
op	372:44	0:0	4	>=
water	372:47	0:0	4	s
op	372:48	0:0	4	->
water	372:50	0:0	4	mb_num
stmts	372:57	375:4	3	
water	372:57	0:0	4	{
call	373:8	373:71	4	av_log
arg	373:15	373:25	5	h->s.avctx
water	373:15	0:0	6	h
op	373:16	0:0	6	->
water	373:18	0:0	6	s
op	373:19	0:0	6	.
water	373:20	0:0	6	avctx
arg	373:27	373:39	5	AV_LOG_ERROR
water	373:27	0:0	6	AV_LOG_ERROR
arg	373:41	373:71	5	"first_mb_in_slice overflow\n"
water	373:41	0:0	6	"first_mb_in_slice overflow\n"
water	373:72	0:0	4	;
return	374:8	374:17	4	-1
op	374:15	0:0	5	-
water	374:16	0:0	5	1
water	375:4	0:0	4	}
water	376:4	0:0	2	s
op	376:5	0:0	2	->
water	376:7	0:0	2	resync_mb_x
op	376:19	0:0	2	=
water	376:21	0:0	2	s
op	376:22	0:0	2	->
water	376:24	0:0	2	mb_x
op	376:29	0:0	2	=
water	376:31	0:0	2	first_mb_in_slice
op	376:49	0:0	2	%
water	376:51	0:0	2	s
op	376:52	0:0	2	->
water	376:54	0:0	2	mb_width
water	376:62	0:0	2	;
water	377:4	0:0	2	s
op	377:5	0:0	2	->
water	377:7	0:0	2	resync_mb_y
op	377:19	0:0	2	=
water	377:21	0:0	2	s
op	377:22	0:0	2	->
water	377:24	0:0	2	mb_y
op	377:29	0:0	2	=
water	377:31	0:0	2	(
water	377:32	0:0	2	first_mb_in_slice
op	377:50	0:0	2	/
water	377:52	0:0	2	s
op	377:53	0:0	2	->
water	377:55	0:0	2	mb_width
water	377:63	0:0	2	)
op	377:65	0:0	2	<<
water	377:68	0:0	2	FIELD_OR_MBAFF_PICTURE
water	377:90	0:0	2	;
if	378:4	379:46	2	(s -> picture_structure == PICT_BOTTOM_FIELD)
cond	378:8	378:32	3	s -> picture_structure == PICT_BOTTOM_FIELD
water	378:8	0:0	4	s
op	378:9	0:0	4	->
water	378:11	0:0	4	picture_structure
op	378:29	0:0	4	==
water	378:32	0:0	4	PICT_BOTTOM_FIELD
stmts	379:8	379:46	3	
water	379:8	0:0	4	s
op	379:9	0:0	4	->
water	379:11	0:0	4	resync_mb_y
op	379:23	0:0	4	=
water	379:25	0:0	4	s
op	379:26	0:0	4	->
water	379:28	0:0	4	mb_y
op	379:33	0:0	4	=
water	379:35	0:0	4	s
op	379:36	0:0	4	->
water	379:38	0:0	4	mb_y
op	379:43	0:0	4	+
water	379:45	0:0	4	1
water	379:46	0:0	4	;
call	380:4	380:33	2	assert
arg	380:11	380:33	3	s->mb_y<s->mb_height
water	380:11	0:0	4	s
op	380:12	0:0	4	->
water	380:14	0:0	4	mb_y
op	380:19	0:0	4	<
water	380:21	0:0	4	s
op	380:22	0:0	4	->
water	380:24	0:0	4	mb_height
water	380:34	0:0	2	;
if	382:4	385:4	2	(s -> picture_structure == PICT_FRAME)
cond	382:7	382:29	3	s -> picture_structure == PICT_FRAME
water	382:7	0:0	4	s
op	382:8	0:0	4	->
water	382:10	0:0	4	picture_structure
op	382:27	0:0	4	==
water	382:29	0:0	4	PICT_FRAME
stmts	382:40	385:4	3	
water	382:40	0:0	4	{
water	383:8	0:0	4	h
op	383:9	0:0	4	->
water	383:11	0:0	4	curr_pic_num
op	383:23	0:0	4	=
water	383:27	0:0	4	h
op	383:28	0:0	4	->
water	383:30	0:0	4	frame_num
water	383:39	0:0	4	;
water	384:8	0:0	4	h
op	384:9	0:0	4	->
water	384:11	0:0	4	max_pic_num
op	384:22	0:0	4	=
water	384:24	0:0	4	1
op	384:25	0:0	4	<<
water	384:28	0:0	4	h
op	384:29	0:0	4	->
water	384:31	0:0	4	sps
op	384:34	0:0	4	.
water	384:35	0:0	4	log2_max_frame_num
water	384:53	0:0	4	;
water	385:4	0:0	4	}
else	385:5	388:4	2
stmts	385:9	388:4	3	
water	385:9	0:0	4	{
water	386:8	0:0	4	h
op	386:9	0:0	4	->
water	386:11	0:0	4	curr_pic_num
op	386:23	0:0	4	=
water	386:25	0:0	4	2
op	386:26	0:0	4	*
water	386:27	0:0	4	h
op	386:28	0:0	4	->
water	386:30	0:0	4	frame_num
op	386:40	0:0	4	+
water	386:42	0:0	4	1
water	386:43	0:0	4	;
water	387:8	0:0	4	h
op	387:9	0:0	4	->
water	387:11	0:0	4	max_pic_num
op	387:22	0:0	4	=
water	387:24	0:0	4	1
op	387:25	0:0	4	<<
water	387:27	0:0	4	(
water	387:28	0:0	4	h
op	387:29	0:0	4	->
water	387:31	0:0	4	sps
op	387:34	0:0	4	.
water	387:35	0:0	4	log2_max_frame_num
op	387:54	0:0	4	+
water	387:56	0:0	4	1
water	387:57	0:0	4	)
water	387:58	0:0	4	;
water	388:4	0:0	4	}
if	390:4	392:4	2	(h -> nal_unit_type == NAL_IDR_SLICE)
cond	390:7	390:27	3	h -> nal_unit_type == NAL_IDR_SLICE
water	390:7	0:0	4	h
op	390:8	0:0	4	->
water	390:10	0:0	4	nal_unit_type
op	390:24	0:0	4	==
water	390:27	0:0	4	NAL_IDR_SLICE
stmts	390:41	392:4	3	
water	390:41	0:0	4	{
call	391:8	391:28	4	get_ue_golomb
arg	391:22	391:28	5	&s->gb
op	391:22	0:0	6	&
water	391:23	0:0	6	s
op	391:24	0:0	6	->
water	391:26	0:0	6	gb
water	391:29	0:0	4	;
water	392:4	0:0	4	}
if	394:4	400:4	2	(h -> sps . poc_type == 0)
cond	394:7	394:24	3	h -> sps . poc_type == 0
water	394:7	0:0	4	h
op	394:8	0:0	4	->
water	394:10	0:0	4	sps
op	394:13	0:0	4	.
water	394:14	0:0	4	poc_type
op	394:22	0:0	4	==
water	394:24	0:0	4	0
stmts	394:26	400:4	3	
water	394:26	0:0	4	{
water	395:8	0:0	4	h
op	395:9	0:0	4	->
water	395:11	0:0	4	poc_lsb
op	395:18	0:0	4	=
call	395:20	395:60	4	get_bits
arg	395:29	395:35	5	&s->gb
op	395:29	0:0	6	&
water	395:30	0:0	6	s
op	395:31	0:0	6	->
water	395:33	0:0	6	gb
arg	395:37	395:60	5	h->sps.log2_max_poc_lsb
water	395:37	0:0	6	h
op	395:38	0:0	6	->
water	395:40	0:0	6	sps
op	395:43	0:0	6	.
water	395:44	0:0	6	log2_max_poc_lsb
water	395:61	0:0	4	;
if	397:8	399:8	4	(h -> pps . pic_order_present == 1 && s -> picture_structure == PICT_FRAME)
cond	397:11	397:64	5	h -> pps . pic_order_present == 1 && s -> picture_structure == PICT_FRAME
water	397:11	0:0	6	h
op	397:12	0:0	6	->
water	397:14	0:0	6	pps
op	397:17	0:0	6	.
water	397:18	0:0	6	pic_order_present
op	397:35	0:0	6	==
water	397:37	0:0	6	1
op	397:39	0:0	6	&&
water	397:42	0:0	6	s
op	397:43	0:0	6	->
water	397:45	0:0	6	picture_structure
op	397:62	0:0	6	==
water	397:64	0:0	6	PICT_FRAME
stmts	397:75	399:8	5	
water	397:75	0:0	6	{
water	398:12	0:0	6	h
op	398:13	0:0	6	->
water	398:15	0:0	6	delta_poc_bottom
op	398:31	0:0	6	=
call	398:33	398:53	6	get_se_golomb
arg	398:47	398:53	7	&s->gb
op	398:47	0:0	8	&
water	398:48	0:0	8	s
op	398:49	0:0	8	->
water	398:51	0:0	8	gb
water	398:54	0:0	6	;
water	399:8	0:0	6	}
water	400:4	0:0	4	}
if	402:4	407:4	2	(h -> sps . poc_type == 1 && ! h -> sps . delta_pic_order_always_zero_flag)
cond	402:7	402:37	3	h -> sps . poc_type == 1 && ! h -> sps . delta_pic_order_always_zero_flag
water	402:7	0:0	4	h
op	402:8	0:0	4	->
water	402:10	0:0	4	sps
op	402:13	0:0	4	.
water	402:14	0:0	4	poc_type
op	402:22	0:0	4	==
water	402:24	0:0	4	1
op	402:26	0:0	4	&&
op	402:29	0:0	4	!
water	402:30	0:0	4	h
op	402:31	0:0	4	->
water	402:33	0:0	4	sps
op	402:36	0:0	4	.
water	402:37	0:0	4	delta_pic_order_always_zero_flag
stmts	402:70	407:4	3	
water	402:70	0:0	4	{
water	403:8	0:0	4	h
op	403:9	0:0	4	->
water	403:11	0:0	4	delta_poc
op	403:20	0:0	4	[
water	403:21	0:0	4	0
op	403:22	0:0	4	]
op	403:23	0:0	4	=
call	403:25	403:45	4	get_se_golomb
arg	403:39	403:45	5	&s->gb
op	403:39	0:0	6	&
water	403:40	0:0	6	s
op	403:41	0:0	6	->
water	403:43	0:0	6	gb
water	403:46	0:0	4	;
if	405:8	406:50	4	(h -> pps . pic_order_present == 1 && s -> picture_structure == PICT_FRAME)
cond	405:11	405:64	5	h -> pps . pic_order_present == 1 && s -> picture_structure == PICT_FRAME
water	405:11	0:0	6	h
op	405:12	0:0	6	->
water	405:14	0:0	6	pps
op	405:17	0:0	6	.
water	405:18	0:0	6	pic_order_present
op	405:35	0:0	6	==
water	405:37	0:0	6	1
op	405:39	0:0	6	&&
water	405:42	0:0	6	s
op	405:43	0:0	6	->
water	405:45	0:0	6	picture_structure
op	405:62	0:0	6	==
water	405:64	0:0	6	PICT_FRAME
stmts	406:12	406:50	5	
water	406:12	0:0	6	h
op	406:13	0:0	6	->
water	406:15	0:0	6	delta_poc
op	406:24	0:0	6	[
water	406:25	0:0	6	1
op	406:26	0:0	6	]
op	406:27	0:0	6	=
call	406:29	406:49	6	get_se_golomb
arg	406:43	406:49	7	&s->gb
op	406:43	0:0	8	&
water	406:44	0:0	8	s
op	406:45	0:0	8	->
water	406:47	0:0	8	gb
water	406:50	0:0	6	;
water	407:4	0:0	4	}
call	409:4	409:14	2	init_poc
arg	409:13	409:14	3	h
water	409:13	0:0	4	h
water	409:15	0:0	2	;
if	411:4	413:4	2	(h -> pps . redundant_pic_cnt_present)
cond	411:7	411:14	3	h -> pps . redundant_pic_cnt_present
water	411:7	0:0	4	h
op	411:8	0:0	4	->
water	411:10	0:0	4	pps
op	411:13	0:0	4	.
water	411:14	0:0	4	redundant_pic_cnt_present
stmts	411:40	413:4	3	
water	411:40	0:0	4	{
water	412:8	0:0	4	h
op	412:9	0:0	4	->
water	412:11	0:0	4	redundant_pic_count
op	412:30	0:0	4	=
call	412:32	412:52	4	get_ue_golomb
arg	412:46	412:52	5	&s->gb
op	412:46	0:0	6	&
water	412:47	0:0	6	s
op	412:48	0:0	6	->
water	412:50	0:0	6	gb
water	412:53	0:0	4	;
water	413:4	0:0	4	}
water	416:4	0:0	2	h
op	416:5	0:0	2	->
water	416:7	0:0	2	ref_count
op	416:16	0:0	2	[
water	416:17	0:0	2	0
op	416:18	0:0	2	]
op	416:19	0:0	2	=
water	416:21	0:0	2	h
op	416:22	0:0	2	->
water	416:24	0:0	2	pps
op	416:27	0:0	2	.
water	416:28	0:0	2	ref_count
op	416:37	0:0	2	[
water	416:38	0:0	2	0
op	416:39	0:0	2	]
water	416:40	0:0	2	;
water	417:4	0:0	2	h
op	417:5	0:0	2	->
water	417:7	0:0	2	ref_count
op	417:16	0:0	2	[
water	417:17	0:0	2	1
op	417:18	0:0	2	]
op	417:19	0:0	2	=
water	417:21	0:0	2	h
op	417:22	0:0	2	->
water	417:24	0:0	2	pps
op	417:27	0:0	2	.
water	417:28	0:0	2	ref_count
op	417:37	0:0	2	[
water	417:38	0:0	2	1
op	417:39	0:0	2	]
water	417:40	0:0	2	;
if	419:4	441:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I)
cond	419:7	419:28	3	h -> slice_type_nos != AV_PICTURE_TYPE_I
water	419:7	0:0	4	h
op	419:8	0:0	4	->
water	419:10	0:0	4	slice_type_nos
op	419:25	0:0	4	!=
water	419:28	0:0	4	AV_PICTURE_TYPE_I
stmts	419:46	441:4	3	
water	419:46	0:0	4	{
water	420:8	0:0	4	unsigned
water	420:17	0:0	4	max
op	420:20	0:0	4	=
water	420:22	0:0	4	(
water	420:23	0:0	4	16
op	420:25	0:0	4	<<
water	420:27	0:0	4	(
water	420:28	0:0	4	s
op	420:29	0:0	4	->
water	420:31	0:0	4	picture_structure
op	420:49	0:0	4	!=
water	420:52	0:0	4	PICT_FRAME
water	420:62	0:0	4	)
water	420:63	0:0	4	)
op	420:64	0:0	4	-
water	420:65	0:0	4	1
water	420:66	0:0	4	;
if	421:8	423:8	4	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	421:11	421:32	5	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	421:11	0:0	6	h
op	421:12	0:0	6	->
water	421:14	0:0	6	slice_type_nos
op	421:29	0:0	6	==
water	421:32	0:0	6	AV_PICTURE_TYPE_B
stmts	421:50	423:8	5	
water	421:50	0:0	6	{
water	422:12	0:0	6	h
op	422:13	0:0	6	->
water	422:15	0:0	6	direct_spatial_mv_pred
op	422:37	0:0	6	=
call	422:39	422:55	6	get_bits1
arg	422:49	422:55	7	&s->gb
op	422:49	0:0	8	&
water	422:50	0:0	8	s
op	422:51	0:0	8	->
water	422:53	0:0	8	gb
water	422:56	0:0	6	;
water	423:8	0:0	6	}
water	424:8	0:0	4	num_ref_idx_active_override_flag
op	424:40	0:0	4	=
call	424:42	424:58	4	get_bits1
arg	424:52	424:58	5	&s->gb
op	424:52	0:0	6	&
water	424:53	0:0	6	s
op	424:54	0:0	6	->
water	424:56	0:0	6	gb
water	424:59	0:0	4	;
if	426:8	431:8	4	(num_ref_idx_active_override_flag)
cond	426:11	426:11	5	num_ref_idx_active_override_flag
water	426:11	0:0	6	num_ref_idx_active_override_flag
stmts	426:44	431:8	5	
water	426:44	0:0	6	{
water	427:12	0:0	6	h
op	427:13	0:0	6	->
water	427:15	0:0	6	ref_count
op	427:24	0:0	6	[
water	427:25	0:0	6	0
op	427:26	0:0	6	]
op	427:27	0:0	6	=
call	427:29	427:49	6	get_ue_golomb
arg	427:43	427:49	7	&s->gb
op	427:43	0:0	8	&
water	427:44	0:0	8	s
op	427:45	0:0	8	->
water	427:47	0:0	8	gb
op	427:51	0:0	6	+
water	427:53	0:0	6	1
water	427:54	0:0	6	;
if	428:12	429:58	6	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	428:15	428:34	7	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	428:15	0:0	8	h
op	428:16	0:0	8	->
water	428:18	0:0	8	slice_type_nos
op	428:32	0:0	8	==
water	428:34	0:0	8	AV_PICTURE_TYPE_B
stmts	429:16	429:58	7	
water	429:16	0:0	8	h
op	429:17	0:0	8	->
water	429:19	0:0	8	ref_count
op	429:28	0:0	8	[
water	429:29	0:0	8	1
op	429:30	0:0	8	]
op	429:31	0:0	8	=
call	429:33	429:53	8	get_ue_golomb
arg	429:47	429:53	9	&s->gb
op	429:47	0:0	10	&
water	429:48	0:0	10	s
op	429:49	0:0	10	->
water	429:51	0:0	10	gb
op	429:55	0:0	8	+
water	429:57	0:0	8	1
water	429:58	0:0	8	;
water	431:8	0:0	6	}
if	432:8	436:8	4	(h -> ref_count [ 0 ] - 1 > max || h -> ref_count [ 1 ] - 1 > max)
cond	432:11	432:58	5	h -> ref_count [ 0 ] - 1 > max || h -> ref_count [ 1 ] - 1 > max
water	432:11	0:0	6	h
op	432:12	0:0	6	->
water	432:14	0:0	6	ref_count
op	432:23	0:0	6	[
water	432:24	0:0	6	0
op	432:25	0:0	6	]
op	432:26	0:0	6	-
water	432:27	0:0	6	1
op	432:29	0:0	6	>
water	432:31	0:0	6	max
op	432:35	0:0	6	||
water	432:38	0:0	6	h
op	432:39	0:0	6	->
water	432:41	0:0	6	ref_count
op	432:50	0:0	6	[
water	432:51	0:0	6	1
op	432:52	0:0	6	]
op	432:53	0:0	6	-
water	432:54	0:0	6	1
op	432:56	0:0	6	>
water	432:58	0:0	6	max
stmts	432:62	436:8	5	
water	432:62	0:0	6	{
call	433:12	433:67	6	av_log
arg	433:19	433:29	7	h->s.avctx
water	433:19	0:0	8	h
op	433:20	0:0	8	->
water	433:22	0:0	8	s
op	433:23	0:0	8	.
water	433:24	0:0	8	avctx
arg	433:31	433:43	7	AV_LOG_ERROR
water	433:31	0:0	8	AV_LOG_ERROR
arg	433:45	433:67	7	"reference overflow\n"
water	433:45	0:0	8	"reference overflow\n"
water	433:68	0:0	6	;
water	434:12	0:0	6	h
op	434:13	0:0	6	->
water	434:15	0:0	6	ref_count
op	434:24	0:0	6	[
water	434:25	0:0	6	0
op	434:26	0:0	6	]
op	434:27	0:0	6	=
water	434:29	0:0	6	h
op	434:30	0:0	6	->
water	434:32	0:0	6	ref_count
op	434:41	0:0	6	[
water	434:42	0:0	6	1
op	434:43	0:0	6	]
op	434:44	0:0	6	=
water	434:46	0:0	6	1
water	434:47	0:0	6	;
return	435:12	435:21	6	-1
op	435:19	0:0	7	-
water	435:20	0:0	7	1
water	436:8	0:0	6	}
if	437:8	438:28	4	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	437:11	437:32	5	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	437:11	0:0	6	h
op	437:12	0:0	6	->
water	437:14	0:0	6	slice_type_nos
op	437:29	0:0	6	==
water	437:32	0:0	6	AV_PICTURE_TYPE_B
stmts	438:12	438:28	5	
water	438:12	0:0	6	h
op	438:13	0:0	6	->
water	438:15	0:0	6	list_count
op	438:25	0:0	6	=
water	438:27	0:0	6	2
water	438:28	0:0	6	;
else	439:8	440:28	4
stmts	440:12	440:28	5	
water	440:12	0:0	6	h
op	440:13	0:0	6	->
water	440:15	0:0	6	list_count
op	440:25	0:0	6	=
water	440:27	0:0	6	1
water	440:28	0:0	6	;
water	441:4	0:0	4	}
else	441:5	442:58	2
stmts	442:8	442:58	3	
water	442:8	0:0	4	h
op	442:9	0:0	4	->
water	442:11	0:0	4	ref_count
op	442:20	0:0	4	[
water	442:21	0:0	4	1
op	442:22	0:0	4	]
op	442:23	0:0	4	=
water	442:25	0:0	4	h
op	442:26	0:0	4	->
water	442:28	0:0	4	ref_count
op	442:37	0:0	4	[
water	442:38	0:0	4	0
op	442:39	0:0	4	]
op	442:40	0:0	4	=
water	442:42	0:0	4	h
op	442:43	0:0	4	->
water	442:45	0:0	4	list_count
op	442:55	0:0	4	=
water	442:57	0:0	4	0
water	442:58	0:0	4	;
if	444:4	446:4	2	(! default_ref_list_done)
cond	444:7	444:8	3	! default_ref_list_done
op	444:7	0:0	4	!
water	444:8	0:0	4	default_ref_list_done
stmts	444:30	446:4	3	
water	444:30	0:0	4	{
call	445:8	445:39	4	ff_h264_fill_default_ref_list
arg	445:38	445:39	5	h
water	445:38	0:0	6	h
water	445:40	0:0	4	;
water	446:4	0:0	4	}
if	448:4	451:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I &&ff_h264_decode_ref_pic_list_reordering (h ) < 0)
cond	448:7	448:91	3	h -> slice_type_nos != AV_PICTURE_TYPE_I &&ff_h264_decode_ref_pic_list_reordering (h ) < 0
water	448:7	0:0	4	h
op	448:8	0:0	4	->
water	448:10	0:0	4	slice_type_nos
op	448:24	0:0	4	!=
water	448:26	0:0	4	AV_PICTURE_TYPE_I
op	448:44	0:0	4	&&
call	448:47	448:87	4	ff_h264_decode_ref_pic_list_reordering
arg	448:86	448:87	5	h
water	448:86	0:0	6	h
op	448:89	0:0	4	<
water	448:91	0:0	4	0
stmts	448:94	451:4	3	
water	448:94	0:0	4	{
water	449:8	0:0	4	h
op	449:9	0:0	4	->
water	449:11	0:0	4	ref_count
op	449:20	0:0	4	[
water	449:21	0:0	4	1
op	449:22	0:0	4	]
op	449:23	0:0	4	=
water	449:25	0:0	4	h
op	449:26	0:0	4	->
water	449:28	0:0	4	ref_count
op	449:37	0:0	4	[
water	449:38	0:0	4	0
op	449:39	0:0	4	]
op	449:40	0:0	4	=
water	449:42	0:0	4	0
water	449:43	0:0	4	;
return	450:8	450:17	4	-1
op	450:15	0:0	5	-
water	450:16	0:0	5	1
water	451:4	0:0	4	}
if	453:4	456:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I)
cond	453:7	453:26	3	h -> slice_type_nos != AV_PICTURE_TYPE_I
water	453:7	0:0	4	h
op	453:8	0:0	4	->
water	453:10	0:0	4	slice_type_nos
op	453:24	0:0	4	!=
water	453:26	0:0	4	AV_PICTURE_TYPE_I
stmts	453:44	456:4	3	
water	453:44	0:0	4	{
water	454:8	0:0	4	s
op	454:9	0:0	4	->
water	454:11	0:0	4	last_picture_ptr
op	454:27	0:0	4	=
op	454:29	0:0	4	&
water	454:30	0:0	4	h
op	454:31	0:0	4	->
water	454:33	0:0	4	ref_list
op	454:41	0:0	4	[
water	454:42	0:0	4	0
op	454:43	0:0	4	]
op	454:44	0:0	4	[
water	454:45	0:0	4	0
op	454:46	0:0	4	]
water	454:47	0:0	4	;
call	455:8	455:61	4	ff_copy_picture
arg	455:24	455:40	5	&s->last_picture
op	455:24	0:0	6	&
water	455:25	0:0	6	s
op	455:26	0:0	6	->
water	455:28	0:0	6	last_picture
arg	455:42	455:61	5	s->last_picture_ptr
water	455:42	0:0	6	s
op	455:43	0:0	6	->
water	455:45	0:0	6	last_picture_ptr
water	455:62	0:0	4	;
water	456:4	0:0	4	}
if	457:4	460:4	2	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	457:7	457:26	3	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	457:7	0:0	4	h
op	457:8	0:0	4	->
water	457:10	0:0	4	slice_type_nos
op	457:24	0:0	4	==
water	457:26	0:0	4	AV_PICTURE_TYPE_B
stmts	457:44	460:4	3	
water	457:44	0:0	4	{
water	458:8	0:0	4	s
op	458:9	0:0	4	->
water	458:11	0:0	4	next_picture_ptr
op	458:27	0:0	4	=
op	458:29	0:0	4	&
water	458:30	0:0	4	h
op	458:31	0:0	4	->
water	458:33	0:0	4	ref_list
op	458:41	0:0	4	[
water	458:42	0:0	4	1
op	458:43	0:0	4	]
op	458:44	0:0	4	[
water	458:45	0:0	4	0
op	458:46	0:0	4	]
water	458:47	0:0	4	;
call	459:8	459:61	4	ff_copy_picture
arg	459:24	459:40	5	&s->next_picture
op	459:24	0:0	6	&
water	459:25	0:0	6	s
op	459:26	0:0	6	->
water	459:28	0:0	6	next_picture
arg	459:42	459:61	5	s->next_picture_ptr
water	459:42	0:0	6	s
op	459:43	0:0	6	->
water	459:45	0:0	6	next_picture_ptr
water	459:62	0:0	4	;
water	460:4	0:0	4	}
if	462:4	464:28	2	(( h -> pps . weighted_pred && h -> slice_type_nos == AV_PICTURE_TYPE_P ) || ( h -> pps . weighted_bipred_idc == 1 && h -> slice_type_nos == AV_PICTURE_TYPE_B ))
cond	462:10	463:83	3	( h -> pps . weighted_pred && h -> slice_type_nos == AV_PICTURE_TYPE_P ) || ( h -> pps . weighted_bipred_idc == 1 && h -> slice_type_nos == AV_PICTURE_TYPE_B )
water	462:10	0:0	4	(
water	462:11	0:0	4	h
op	462:12	0:0	4	->
water	462:14	0:0	4	pps
op	462:17	0:0	4	.
water	462:18	0:0	4	weighted_pred
op	462:41	0:0	4	&&
water	462:44	0:0	4	h
op	462:45	0:0	4	->
water	462:47	0:0	4	slice_type_nos
op	462:62	0:0	4	==
water	462:65	0:0	4	AV_PICTURE_TYPE_P
water	462:83	0:0	4	)
op	463:7	0:0	4	||
water	463:11	0:0	4	(
water	463:12	0:0	4	h
op	463:13	0:0	4	->
water	463:15	0:0	4	pps
op	463:18	0:0	4	.
water	463:19	0:0	4	weighted_bipred_idc
op	463:38	0:0	4	==
water	463:40	0:0	4	1
op	463:42	0:0	4	&&
water	463:45	0:0	4	h
op	463:46	0:0	4	->
water	463:48	0:0	4	slice_type_nos
op	463:62	0:0	4	==
water	463:65	0:0	4	AV_PICTURE_TYPE_B
water	463:83	0:0	4	)
stmts	464:8	464:28	3	
call	464:8	464:27	4	pred_weight_table
arg	464:26	464:27	5	h
water	464:26	0:0	6	h
water	464:28	0:0	4	;
else	465:4	467:4	2
stmts	465:9	467:4	3	
if	465:9	467:4	4	(h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	465:12	465:65	5	h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B
water	465:12	0:0	6	h
op	465:13	0:0	6	->
water	465:15	0:0	6	pps
op	465:18	0:0	6	.
water	465:19	0:0	6	weighted_bipred_idc
op	465:38	0:0	6	==
water	465:40	0:0	6	2
op	465:42	0:0	6	&&
water	465:45	0:0	6	h
op	465:46	0:0	6	->
water	465:48	0:0	6	slice_type_nos
op	465:62	0:0	6	==
water	465:65	0:0	6	AV_PICTURE_TYPE_B
stmts	465:83	467:4	5	
water	465:83	0:0	6	{
call	466:8	466:35	6	implicit_weight_table
arg	466:30	466:31	7	h
water	466:30	0:0	8	h
arg	466:33	466:35	7	-1
op	466:33	0:0	8	-
water	466:34	0:0	8	1
water	466:36	0:0	6	;
water	467:4	0:0	6	}
else	467:5	473:4	2
stmts	467:10	473:4	3	
water	467:10	0:0	4	{
water	468:8	0:0	4	h
op	468:9	0:0	4	->
water	468:11	0:0	4	use_weight
op	468:22	0:0	4	=
water	468:24	0:0	4	0
water	468:25	0:0	4	;
for	469:8	472:8	4	(i = 0 ;i < 2;i ++)
forinit	469:13	469:18	5	i = 0 ;
water	469:13	0:0	6	i
op	469:15	0:0	6	=
water	469:17	0:0	6	0
water	469:18	0:0	6	;
cond	469:20	469:24	5	i < 2
water	469:20	0:0	6	i
op	469:22	0:0	6	<
water	469:24	0:0	6	2
forexpr	469:27	469:28	5	i ++
water	469:27	0:0	6	i
op	469:28	0:0	6	++
stmts	469:32	472:8	5	
water	469:32	0:0	6	{
water	470:12	0:0	6	h
op	470:13	0:0	6	->
water	470:15	0:0	6	luma_weight_flag
op	470:31	0:0	6	[
water	470:32	0:0	6	i
op	470:33	0:0	6	]
op	470:37	0:0	6	=
water	470:39	0:0	6	0
water	470:40	0:0	6	;
water	471:12	0:0	6	h
op	471:13	0:0	6	->
water	471:15	0:0	6	chroma_weight_flag
op	471:33	0:0	6	[
water	471:34	0:0	6	i
op	471:35	0:0	6	]
op	471:37	0:0	6	=
water	471:39	0:0	6	0
water	471:40	0:0	6	;
water	472:8	0:0	6	}
water	473:4	0:0	4	}
if	475:4	477:34	2	(h -> nal_ref_idc &&ff_h264_decode_ref_pic_marking (h0 ,& s -> gb ) < 0 && ( s -> avctx -> err_recognition & AV_EF_EXPLODE ))
cond	475:7	476:49	3	h -> nal_ref_idc &&ff_h264_decode_ref_pic_marking (h0 ,& s -> gb ) < 0 && ( s -> avctx -> err_recognition & AV_EF_EXPLODE )
water	475:7	0:0	4	h
op	475:8	0:0	4	->
water	475:10	0:0	4	nal_ref_idc
op	475:22	0:0	4	&&
call	475:25	475:66	4	ff_h264_decode_ref_pic_marking
arg	475:56	475:58	5	h0
water	475:56	0:0	6	h0
arg	475:60	475:66	5	&s->gb
op	475:60	0:0	6	&
water	475:61	0:0	6	s
op	475:62	0:0	6	->
water	475:64	0:0	6	gb
op	475:68	0:0	4	<
water	475:70	0:0	4	0
op	475:72	0:0	4	&&
water	476:7	0:0	4	(
water	476:8	0:0	4	s
op	476:9	0:0	4	->
water	476:11	0:0	4	avctx
op	476:16	0:0	4	->
water	476:18	0:0	4	err_recognition
op	476:34	0:0	4	&
water	476:36	0:0	4	AV_EF_EXPLODE
water	476:49	0:0	4	)
stmts	477:8	477:34	3	
return	477:8	477:34	4	AVERROR_INVALIDDATA
water	477:15	0:0	5	AVERROR_INVALIDDATA
if	479:4	486:4	2	(FRAME_MBAFF)
cond	479:7	479:7	3	FRAME_MBAFF
water	479:7	0:0	4	FRAME_MBAFF
stmts	479:19	486:4	3	
water	479:19	0:0	4	{
call	480:8	480:37	4	ff_h264_fill_mbaff_ref_list
arg	480:36	480:37	5	h
water	480:36	0:0	6	h
water	480:38	0:0	4	;
if	482:8	485:8	4	(h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	482:11	482:64	5	h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B
water	482:11	0:0	6	h
op	482:12	0:0	6	->
water	482:14	0:0	6	pps
op	482:17	0:0	6	.
water	482:18	0:0	6	weighted_bipred_idc
op	482:37	0:0	6	==
water	482:39	0:0	6	2
op	482:41	0:0	6	&&
water	482:44	0:0	6	h
op	482:45	0:0	6	->
water	482:47	0:0	6	slice_type_nos
op	482:61	0:0	6	==
water	482:64	0:0	6	AV_PICTURE_TYPE_B
stmts	482:82	485:8	5	
water	482:82	0:0	6	{
call	483:12	483:38	6	implicit_weight_table
arg	483:34	483:35	7	h
water	483:34	0:0	8	h
arg	483:37	483:38	7	0
water	483:37	0:0	8	0
water	483:39	0:0	6	;
call	484:12	484:38	6	implicit_weight_table
arg	484:34	484:35	7	h
water	484:34	0:0	8	h
arg	484:37	484:38	7	1
water	484:37	0:0	8	1
water	484:39	0:0	6	;
water	485:8	0:0	6	}
water	486:4	0:0	4	}
if	488:4	489:43	2	(h -> slice_type_nos == AV_PICTURE_TYPE_B && ! h -> direct_spatial_mv_pred)
cond	488:7	488:51	3	h -> slice_type_nos == AV_PICTURE_TYPE_B && ! h -> direct_spatial_mv_pred
water	488:7	0:0	4	h
op	488:8	0:0	4	->
water	488:10	0:0	4	slice_type_nos
op	488:24	0:0	4	==
water	488:26	0:0	4	AV_PICTURE_TYPE_B
op	488:44	0:0	4	&&
op	488:47	0:0	4	!
water	488:48	0:0	4	h
op	488:49	0:0	4	->
water	488:51	0:0	4	direct_spatial_mv_pred
stmts	489:8	489:43	3	
call	489:8	489:42	4	ff_h264_direct_dist_scale_factor
arg	489:41	489:42	5	h
water	489:41	0:0	6	h
water	489:43	0:0	4	;
call	490:4	490:34	2	ff_h264_direct_ref_list_init
arg	490:33	490:34	3	h
water	490:33	0:0	4	h
water	490:35	0:0	2	;
if	492:4	499:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I && h -> pps . cabac)
cond	492:8	492:57	3	h -> slice_type_nos != AV_PICTURE_TYPE_I && h -> pps . cabac
water	492:8	0:0	4	h
op	492:9	0:0	4	->
water	492:11	0:0	4	slice_type_nos
op	492:26	0:0	4	!=
water	492:29	0:0	4	AV_PICTURE_TYPE_I
op	492:47	0:0	4	&&
water	492:50	0:0	4	h
op	492:51	0:0	4	->
water	492:53	0:0	4	pps
op	492:56	0:0	4	.
water	492:57	0:0	4	cabac
stmts	492:64	499:4	3	
water	492:64	0:0	4	{
water	493:8	0:0	4	tmp
op	493:12	0:0	4	=
call	493:14	493:37	4	get_ue_golomb_31
arg	493:31	493:37	5	&s->gb
op	493:31	0:0	6	&
water	493:32	0:0	6	s
op	493:33	0:0	6	->
water	493:35	0:0	6	gb
water	493:38	0:0	4	;
if	494:8	497:8	4	(tmp > 2)
cond	494:11	494:17	5	tmp > 2
water	494:11	0:0	6	tmp
op	494:15	0:0	6	>
water	494:17	0:0	6	2
stmts	494:19	497:8	5	
water	494:19	0:0	6	{
call	495:12	495:70	6	av_log
arg	495:19	495:27	7	s->avctx
water	495:19	0:0	8	s
op	495:20	0:0	8	->
water	495:22	0:0	8	avctx
arg	495:29	495:41	7	AV_LOG_ERROR
water	495:29	0:0	8	AV_LOG_ERROR
arg	495:43	495:70	7	"cabac_init_idc overflow\n"
water	495:43	0:0	8	"cabac_init_idc overflow\n"
water	495:71	0:0	6	;
return	496:12	496:21	6	-1
op	496:19	0:0	7	-
water	496:20	0:0	7	1
water	497:8	0:0	6	}
water	498:8	0:0	4	h
op	498:9	0:0	4	->
water	498:11	0:0	4	cabac_init_idc
op	498:25	0:0	4	=
water	498:27	0:0	4	tmp
water	498:30	0:0	4	;
water	499:4	0:0	4	}
water	501:4	0:0	2	h
op	501:5	0:0	2	->
water	501:7	0:0	2	last_qscale_diff
op	501:24	0:0	2	=
water	501:26	0:0	2	0
water	501:27	0:0	2	;
water	502:4	0:0	2	tmp
op	502:8	0:0	2	=
water	502:10	0:0	2	h
op	502:11	0:0	2	->
water	502:13	0:0	2	pps
op	502:16	0:0	2	.
water	502:17	0:0	2	init_qp
op	502:25	0:0	2	+
call	502:27	502:47	2	get_se_golomb
arg	502:41	502:47	3	&s->gb
op	502:41	0:0	4	&
water	502:42	0:0	4	s
op	502:43	0:0	4	->
water	502:45	0:0	4	gb
water	502:48	0:0	2	;
if	503:4	506:4	2	(tmp > 51 + 6 * ( h -> sps . bit_depth_luma - 8 ))
cond	503:7	503:40	3	tmp > 51 + 6 * ( h -> sps . bit_depth_luma - 8 )
water	503:7	0:0	4	tmp
op	503:10	0:0	4	>
water	503:11	0:0	4	51
op	503:13	0:0	4	+
water	503:14	0:0	4	6
op	503:15	0:0	4	*
water	503:16	0:0	4	(
water	503:17	0:0	4	h
op	503:18	0:0	4	->
water	503:20	0:0	4	sps
op	503:23	0:0	4	.
water	503:24	0:0	4	bit_depth_luma
op	503:38	0:0	4	-
water	503:39	0:0	4	8
water	503:40	0:0	4	)
stmts	503:42	506:4	3	
water	503:42	0:0	4	{
call	504:8	504:66	4	av_log
arg	504:15	504:23	5	s->avctx
water	504:15	0:0	6	s
op	504:16	0:0	6	->
water	504:18	0:0	6	avctx
arg	504:25	504:37	5	AV_LOG_ERROR
water	504:25	0:0	6	AV_LOG_ERROR
arg	504:39	504:61	5	"QP %u out of range\n"
water	504:39	0:0	6	"QP %u out of range\n"
arg	504:63	504:66	5	tmp
water	504:63	0:0	6	tmp
water	504:67	0:0	4	;
return	505:8	505:17	4	-1
op	505:15	0:0	5	-
water	505:16	0:0	5	1
water	506:4	0:0	4	}
water	507:4	0:0	2	s
op	507:5	0:0	2	->
water	507:7	0:0	2	qscale
op	507:13	0:0	2	=
water	507:15	0:0	2	tmp
water	507:18	0:0	2	;
water	508:4	0:0	2	h
op	508:5	0:0	2	->
water	508:7	0:0	2	chroma_qp
op	508:16	0:0	2	[
water	508:17	0:0	2	0
op	508:18	0:0	2	]
op	508:20	0:0	2	=
call	508:22	508:51	2	get_chroma_qp
arg	508:36	508:37	3	h
water	508:36	0:0	4	h
arg	508:39	508:40	3	0
water	508:39	0:0	4	0
arg	508:42	508:51	3	s->qscale
water	508:42	0:0	4	s
op	508:43	0:0	4	->
water	508:45	0:0	4	qscale
water	508:52	0:0	2	;
water	509:4	0:0	2	h
op	509:5	0:0	2	->
water	509:7	0:0	2	chroma_qp
op	509:16	0:0	2	[
water	509:17	0:0	2	1
op	509:18	0:0	2	]
op	509:20	0:0	2	=
call	509:22	509:51	2	get_chroma_qp
arg	509:36	509:37	3	h
water	509:36	0:0	4	h
arg	509:39	509:40	3	1
water	509:39	0:0	4	1
arg	509:42	509:51	3	s->qscale
water	509:42	0:0	4	s
op	509:43	0:0	4	->
water	509:45	0:0	4	qscale
water	509:52	0:0	2	;
if	511:4	513:4	2	(h -> slice_type == AV_PICTURE_TYPE_SP)
cond	511:7	511:24	3	h -> slice_type == AV_PICTURE_TYPE_SP
water	511:7	0:0	4	h
op	511:8	0:0	4	->
water	511:10	0:0	4	slice_type
op	511:21	0:0	4	==
water	511:24	0:0	4	AV_PICTURE_TYPE_SP
stmts	511:43	513:4	3	
water	511:43	0:0	4	{
call	512:8	512:24	4	get_bits1
arg	512:18	512:24	5	&s->gb
op	512:18	0:0	6	&
water	512:19	0:0	6	s
op	512:20	0:0	6	->
water	512:22	0:0	6	gb
water	512:25	0:0	4	;
water	513:4	0:0	4	}
if	514:4	516:4	2	(h -> slice_type == AV_PICTURE_TYPE_SP || h -> slice_type == AV_PICTURE_TYPE_SI)
cond	514:7	514:61	3	h -> slice_type == AV_PICTURE_TYPE_SP || h -> slice_type == AV_PICTURE_TYPE_SI
water	514:7	0:0	4	h
op	514:8	0:0	4	->
water	514:10	0:0	4	slice_type
op	514:20	0:0	4	==
water	514:22	0:0	4	AV_PICTURE_TYPE_SP
op	514:41	0:0	4	||
water	514:44	0:0	4	h
op	514:45	0:0	4	->
water	514:47	0:0	4	slice_type
op	514:58	0:0	4	==
water	514:61	0:0	4	AV_PICTURE_TYPE_SI
stmts	514:80	516:4	3	
water	514:80	0:0	4	{
call	515:8	515:28	4	get_se_golomb
arg	515:22	515:28	5	&s->gb
op	515:22	0:0	6	&
water	515:23	0:0	6	s
op	515:24	0:0	6	->
water	515:26	0:0	6	gb
water	515:29	0:0	4	;
water	516:4	0:0	4	}
water	518:4	0:0	2	h
op	518:5	0:0	2	->
water	518:7	0:0	2	deblocking_filter
op	518:25	0:0	2	=
water	518:27	0:0	2	1
water	518:28	0:0	2	;
water	519:4	0:0	2	h
op	519:5	0:0	2	->
water	519:7	0:0	2	slice_alpha_c0_offset
op	519:29	0:0	2	=
water	519:31	0:0	2	52
water	519:33	0:0	2	;
water	520:4	0:0	2	h
op	520:5	0:0	2	->
water	520:7	0:0	2	slice_beta_offset
op	520:25	0:0	2	=
water	520:27	0:0	2	52
water	520:29	0:0	2	;
if	521:4	540:4	2	(h -> pps . deblocking_filter_parameters_present)
cond	521:8	521:15	3	h -> pps . deblocking_filter_parameters_present
water	521:8	0:0	4	h
op	521:9	0:0	4	->
water	521:11	0:0	4	pps
op	521:14	0:0	4	.
water	521:15	0:0	4	deblocking_filter_parameters_present
stmts	521:54	540:4	3	
water	521:54	0:0	4	{
water	522:8	0:0	4	tmp
op	522:11	0:0	4	=
call	522:13	522:36	4	get_ue_golomb_31
arg	522:30	522:36	5	&s->gb
op	522:30	0:0	6	&
water	522:31	0:0	6	s
op	522:32	0:0	6	->
water	522:34	0:0	6	gb
water	522:37	0:0	4	;
if	523:8	526:8	4	(tmp > 2)
cond	523:11	523:17	5	tmp > 2
water	523:11	0:0	6	tmp
op	523:15	0:0	6	>
water	523:17	0:0	6	2
stmts	523:19	526:8	5	
water	523:19	0:0	6	{
call	524:12	524:89	6	av_log
arg	524:19	524:27	7	s->avctx
water	524:19	0:0	8	s
op	524:20	0:0	8	->
water	524:22	0:0	8	avctx
arg	524:29	524:41	7	AV_LOG_ERROR
water	524:29	0:0	8	AV_LOG_ERROR
arg	524:43	524:84	7	"deblocking_filter_idc %u out of range\n"
water	524:43	0:0	8	"deblocking_filter_idc %u out of range\n"
arg	524:86	524:89	7	tmp
water	524:86	0:0	8	tmp
water	524:90	0:0	6	;
return	525:12	525:21	6	-1
op	525:19	0:0	7	-
water	525:20	0:0	7	1
water	526:8	0:0	6	}
water	527:8	0:0	4	h
op	527:9	0:0	4	->
water	527:11	0:0	4	deblocking_filter
op	527:28	0:0	4	=
water	527:30	0:0	4	tmp
water	527:33	0:0	4	;
if	528:8	529:36	4	(h -> deblocking_filter < 2)
cond	528:11	528:34	5	h -> deblocking_filter < 2
water	528:11	0:0	6	h
op	528:12	0:0	6	->
water	528:14	0:0	6	deblocking_filter
op	528:32	0:0	6	<
water	528:34	0:0	6	2
stmts	529:12	529:36	5	
water	529:12	0:0	6	h
op	529:13	0:0	6	->
water	529:15	0:0	6	deblocking_filter
op	529:32	0:0	6	^=
water	529:35	0:0	6	1
water	529:36	0:0	6	;
if	531:8	539:8	4	(h -> deblocking_filter)
cond	531:12	531:15	5	h -> deblocking_filter
water	531:12	0:0	6	h
op	531:13	0:0	6	->
water	531:15	0:0	6	deblocking_filter
stmts	531:35	539:8	5	
water	531:35	0:0	6	{
water	532:12	0:0	6	h
op	532:13	0:0	6	->
water	532:15	0:0	6	slice_alpha_c0_offset
op	532:37	0:0	6	+=
call	532:40	532:60	6	get_se_golomb
arg	532:54	532:60	7	&s->gb
op	532:54	0:0	8	&
water	532:55	0:0	8	s
op	532:56	0:0	8	->
water	532:58	0:0	8	gb
op	532:62	0:0	6	<<
water	532:65	0:0	6	1
water	532:66	0:0	6	;
water	533:12	0:0	6	h
op	533:13	0:0	6	->
water	533:15	0:0	6	slice_beta_offset
op	533:37	0:0	6	+=
call	533:40	533:60	6	get_se_golomb
arg	533:54	533:60	7	&s->gb
op	533:54	0:0	8	&
water	533:55	0:0	8	s
op	533:56	0:0	8	->
water	533:58	0:0	8	gb
op	533:62	0:0	6	<<
water	533:65	0:0	6	1
water	533:66	0:0	6	;
if	534:12	538:12	6	(h -> slice_alpha_c0_offset > 104 U || h -> slice_beta_offset > 104 U)
cond	534:18	535:48	7	h -> slice_alpha_c0_offset > 104 U || h -> slice_beta_offset > 104 U
water	534:18	0:0	8	h
op	534:19	0:0	8	->
water	534:21	0:0	8	slice_alpha_c0_offset
op	534:43	0:0	8	>
water	534:45	0:0	8	104
water	534:48	0:0	8	U
op	535:15	0:0	8	||
water	535:18	0:0	8	h
op	535:19	0:0	8	->
water	535:21	0:0	8	slice_beta_offset
op	535:43	0:0	8	>
water	535:45	0:0	8	104
water	535:48	0:0	8	U
stmts	535:50	538:12	7	
water	535:50	0:0	8	{
call	536:16	536:146	8	av_log
arg	536:23	536:31	9	s->avctx
water	536:23	0:0	10	s
op	536:24	0:0	10	->
water	536:26	0:0	10	avctx
arg	536:33	536:45	9	AV_LOG_ERROR
water	536:33	0:0	10	AV_LOG_ERROR
arg	536:47	536:98	9	"deblocking filter parameters %d %d out of range\n"
water	536:47	0:0	10	"deblocking filter parameters %d %d out of range\n"
arg	536:100	536:124	9	h->slice_alpha_c0_offset
water	536:100	0:0	10	h
op	536:101	0:0	10	->
water	536:103	0:0	10	slice_alpha_c0_offset
arg	536:126	536:146	9	h->slice_beta_offset
water	536:126	0:0	10	h
op	536:127	0:0	10	->
water	536:129	0:0	10	slice_beta_offset
water	536:147	0:0	8	;
return	537:16	537:25	8	-1
op	537:23	0:0	9	-
water	537:24	0:0	9	1
water	538:12	0:0	8	}
water	539:8	0:0	6	}
water	540:4	0:0	4	}
if	542:4	546:31	2	(s -> avctx -> skip_loop_filter >= AVDISCARD_ALL || ( s -> avctx -> skip_loop_filter >= AVDISCARD_NONKEY && h -> slice_type_nos != AV_PICTURE_TYPE_I ) || ( s -> avctx -> skip_loop_filter >= AVDISCARD_BIDIR && h -> slice_type_nos == AV_PICTURE_TYPE_B ) || ( s -> avctx -> skip_loop_filter >= AVDISCARD_NONREF && h -> nal_ref_idc == 0 ))
cond	542:10	545:79	3	s -> avctx -> skip_loop_filter >= AVDISCARD_ALL || ( s -> avctx -> skip_loop_filter >= AVDISCARD_NONKEY && h -> slice_type_nos != AV_PICTURE_TYPE_I ) || ( s -> avctx -> skip_loop_filter >= AVDISCARD_BIDIR && h -> slice_type_nos == AV_PICTURE_TYPE_B ) || ( s -> avctx -> skip_loop_filter >= AVDISCARD_NONREF && h -> nal_ref_idc == 0 )
water	542:10	0:0	4	s
op	542:11	0:0	4	->
water	542:13	0:0	4	avctx
op	542:18	0:0	4	->
water	542:20	0:0	4	skip_loop_filter
op	542:37	0:0	4	>=
water	542:40	0:0	4	AVDISCARD_ALL
op	543:7	0:0	4	||
water	543:9	0:0	4	(
water	543:10	0:0	4	s
op	543:11	0:0	4	->
water	543:13	0:0	4	avctx
op	543:18	0:0	4	->
water	543:20	0:0	4	skip_loop_filter
op	543:37	0:0	4	>=
water	543:40	0:0	4	AVDISCARD_NONKEY
op	543:57	0:0	4	&&
water	543:60	0:0	4	h
op	543:61	0:0	4	->
water	543:63	0:0	4	slice_type_nos
op	543:78	0:0	4	!=
water	543:81	0:0	4	AV_PICTURE_TYPE_I
water	543:98	0:0	4	)
op	544:7	0:0	4	||
water	544:9	0:0	4	(
water	544:10	0:0	4	s
op	544:11	0:0	4	->
water	544:13	0:0	4	avctx
op	544:18	0:0	4	->
water	544:20	0:0	4	skip_loop_filter
op	544:37	0:0	4	>=
water	544:40	0:0	4	AVDISCARD_BIDIR
op	544:57	0:0	4	&&
water	544:60	0:0	4	h
op	544:61	0:0	4	->
water	544:63	0:0	4	slice_type_nos
op	544:78	0:0	4	==
water	544:81	0:0	4	AV_PICTURE_TYPE_B
water	544:98	0:0	4	)
op	545:7	0:0	4	||
water	545:9	0:0	4	(
water	545:10	0:0	4	s
op	545:11	0:0	4	->
water	545:13	0:0	4	avctx
op	545:18	0:0	4	->
water	545:20	0:0	4	skip_loop_filter
op	545:37	0:0	4	>=
water	545:40	0:0	4	AVDISCARD_NONREF
op	545:57	0:0	4	&&
water	545:60	0:0	4	h
op	545:61	0:0	4	->
water	545:63	0:0	4	nal_ref_idc
op	545:75	0:0	4	==
water	545:78	0:0	4	0
water	545:79	0:0	4	)
stmts	546:8	546:31	3	
water	546:8	0:0	4	h
op	546:9	0:0	4	->
water	546:11	0:0	4	deblocking_filter
op	546:28	0:0	4	=
water	546:30	0:0	4	0
water	546:31	0:0	4	;
if	548:4	564:4	2	(h -> deblocking_filter == 1 && h0 -> max_contexts > 1)
cond	548:7	548:55	3	h -> deblocking_filter == 1 && h0 -> max_contexts > 1
water	548:7	0:0	4	h
op	548:8	0:0	4	->
water	548:10	0:0	4	deblocking_filter
op	548:28	0:0	4	==
water	548:31	0:0	4	1
op	548:33	0:0	4	&&
water	548:36	0:0	4	h0
op	548:38	0:0	4	->
water	548:40	0:0	4	max_contexts
op	548:53	0:0	4	>
water	548:55	0:0	4	1
stmts	548:58	564:4	3	
water	548:58	0:0	4	{
if	549:8	553:8	4	(s -> avctx -> flags2 & CODEC_FLAG2_FAST)
cond	549:11	549:30	5	s -> avctx -> flags2 & CODEC_FLAG2_FAST
water	549:11	0:0	6	s
op	549:12	0:0	6	->
water	549:14	0:0	6	avctx
op	549:19	0:0	6	->
water	549:21	0:0	6	flags2
op	549:28	0:0	6	&
water	549:30	0:0	6	CODEC_FLAG2_FAST
stmts	549:48	553:8	5	
water	549:48	0:0	6	{
water	552:12	0:0	6	h
op	552:13	0:0	6	->
water	552:15	0:0	6	deblocking_filter
op	552:33	0:0	6	=
water	552:35	0:0	6	2
water	552:36	0:0	6	;
water	553:8	0:0	6	}
else	553:10	563:8	4
stmts	553:15	563:8	5	
water	553:15	0:0	6	{
water	554:12	0:0	6	h0
op	554:14	0:0	6	->
water	554:16	0:0	6	max_contexts
op	554:29	0:0	6	=
water	554:31	0:0	6	1
water	554:32	0:0	6	;
if	555:12	558:12	6	(! h0 -> single_decode_warning)
cond	555:15	555:20	7	! h0 -> single_decode_warning
op	555:15	0:0	8	!
water	555:16	0:0	8	h0
op	555:18	0:0	8	->
water	555:20	0:0	8	single_decode_warning
stmts	555:43	558:12	7	
water	555:43	0:0	8	{
call	556:16	556:128	8	av_log
arg	556:23	556:31	9	s->avctx
water	556:23	0:0	10	s
op	556:24	0:0	10	->
water	556:26	0:0	10	avctx
arg	556:33	556:44	9	AV_LOG_INFO
water	556:33	0:0	10	AV_LOG_INFO
arg	556:46	556:128	9	"Cannot parallelize deblocking type 1, decoding such frames in sequential order\n"
water	556:46	0:0	10	"Cannot parallelize deblocking type 1, decoding such frames in sequential order\n"
water	556:129	0:0	8	;
water	557:16	0:0	8	h0
op	557:18	0:0	8	->
water	557:20	0:0	8	single_decode_warning
op	557:42	0:0	8	=
water	557:44	0:0	8	1
water	557:45	0:0	8	;
water	558:12	0:0	8	}
if	559:12	562:12	6	(h != h0)
cond	559:16	559:21	7	h != h0
water	559:16	0:0	8	h
op	559:18	0:0	8	!=
water	559:21	0:0	8	h0
stmts	559:25	562:12	7	
water	559:25	0:0	8	{
call	560:16	560:86	8	av_log
arg	560:23	560:33	9	h->s.avctx
water	560:23	0:0	10	h
op	560:24	0:0	10	->
water	560:26	0:0	10	s
op	560:27	0:0	10	.
water	560:28	0:0	10	avctx
arg	560:35	560:47	9	AV_LOG_ERROR
water	560:35	0:0	10	AV_LOG_ERROR
arg	560:49	560:86	9	"Deblocking switched inside frame.\n"
water	560:49	0:0	10	"Deblocking switched inside frame.\n"
water	560:87	0:0	8	;
return	561:16	561:24	8	1
water	561:23	0:0	9	1
water	562:12	0:0	8	}
water	563:8	0:0	6	}
water	564:4	0:0	4	}
water	565:4	0:0	2	h
op	565:5	0:0	2	->
water	565:7	0:0	2	qp_thresh
op	565:17	0:0	2	=
water	565:19	0:0	2	15
op	565:22	0:0	2	+
water	565:24	0:0	2	52
op	565:27	0:0	2	-
call	565:29	565:81	2	FFMIN
arg	565:35	565:59	3	h->slice_alpha_c0_offset
water	565:35	0:0	4	h
op	565:36	0:0	4	->
water	565:38	0:0	4	slice_alpha_c0_offset
arg	565:61	565:81	3	h->slice_beta_offset
water	565:61	0:0	4	h
op	565:62	0:0	4	->
water	565:64	0:0	4	slice_beta_offset
op	566:17	0:0	2	-
call	566:19	566:95	2	FFMAX3
arg	566:26	566:27	3	0
water	566:26	0:0	4	0
arg	566:29	566:61	3	h->pps.chroma_qp_index_offset[0]
water	566:29	0:0	4	h
op	566:30	0:0	4	->
water	566:32	0:0	4	pps
op	566:35	0:0	4	.
water	566:36	0:0	4	chroma_qp_index_offset
op	566:58	0:0	4	[
water	566:59	0:0	4	0
op	566:60	0:0	4	]
arg	566:63	566:95	3	h->pps.chroma_qp_index_offset[1]
water	566:63	0:0	4	h
op	566:64	0:0	4	->
water	566:66	0:0	4	pps
op	566:69	0:0	4	.
water	566:70	0:0	4	chroma_qp_index_offset
op	566:92	0:0	4	[
water	566:93	0:0	4	1
op	566:94	0:0	4	]
op	567:17	0:0	2	+
water	567:19	0:0	2	6
op	567:21	0:0	2	*
water	567:23	0:0	2	(
water	567:24	0:0	2	h
op	567:25	0:0	2	->
water	567:27	0:0	2	sps
op	567:30	0:0	2	.
water	567:31	0:0	2	bit_depth_luma
op	567:46	0:0	2	-
water	567:48	0:0	2	8
water	567:49	0:0	2	)
water	567:50	0:0	2	;
if	570:4	571:53	2	(h -> pps . num_slice_groups > 1 && h -> pps . mb_slice_group_map_type >= 3 && h -> pps . mb_slice_group_map_type <= 5)
cond	570:8	570:113	3	h -> pps . num_slice_groups > 1 && h -> pps . mb_slice_group_map_type >= 3 && h -> pps . mb_slice_group_map_type <= 5
water	570:8	0:0	4	h
op	570:9	0:0	4	->
water	570:11	0:0	4	pps
op	570:14	0:0	4	.
water	570:15	0:0	4	num_slice_groups
op	570:32	0:0	4	>
water	570:34	0:0	4	1
op	570:37	0:0	4	&&
water	570:40	0:0	4	h
op	570:41	0:0	4	->
water	570:43	0:0	4	pps
op	570:46	0:0	4	.
water	570:47	0:0	4	mb_slice_group_map_type
op	570:71	0:0	4	>=
water	570:74	0:0	4	3
op	570:76	0:0	4	&&
water	570:79	0:0	4	h
op	570:80	0:0	4	->
water	570:82	0:0	4	pps
op	570:85	0:0	4	.
water	570:86	0:0	4	mb_slice_group_map_type
op	570:110	0:0	4	<=
water	570:113	0:0	4	5
stmts	571:8	571:53	3	
water	571:8	0:0	4	slice_group_change_cycle
op	571:32	0:0	4	=
call	571:34	571:52	4	get_bits
arg	571:43	571:49	5	&s->gb
op	571:43	0:0	6	&
water	571:44	0:0	6	s
op	571:45	0:0	6	->
water	571:47	0:0	6	gb
arg	571:51	571:52	5	?
water	571:51	0:0	6	?
water	571:53	0:0	4	;
water	574:4	0:0	2	h0
op	574:6	0:0	2	->
water	574:8	0:0	2	last_slice_type
op	574:24	0:0	2	=
water	574:26	0:0	2	slice_type
water	574:36	0:0	2	;
water	575:4	0:0	2	h
op	575:5	0:0	2	->
water	575:7	0:0	2	slice_num
op	575:17	0:0	2	=
op	575:19	0:0	2	++
water	575:21	0:0	2	h0
op	575:23	0:0	2	->
water	575:25	0:0	2	current_slice
water	575:38	0:0	2	;
if	577:4	578:70	2	(h -> slice_num)
cond	577:7	577:10	3	h -> slice_num
water	577:7	0:0	4	h
op	577:8	0:0	4	->
water	577:10	0:0	4	slice_num
stmts	578:8	578:70	3	
water	578:8	0:0	4	h0
op	578:10	0:0	4	->
water	578:12	0:0	4	slice_row
op	578:21	0:0	4	[
water	578:22	0:0	4	(
water	578:23	0:0	4	h
op	578:24	0:0	4	->
water	578:26	0:0	4	slice_num
op	578:35	0:0	4	-
water	578:36	0:0	4	1
water	578:37	0:0	4	)
op	578:38	0:0	4	&
water	578:39	0:0	4	(
water	578:40	0:0	4	MAX_SLICES
op	578:50	0:0	4	-
water	578:51	0:0	4	1
water	578:52	0:0	4	)
op	578:53	0:0	4	]
op	578:54	0:0	4	=
water	578:56	0:0	4	s
op	578:57	0:0	4	->
water	578:59	0:0	4	resync_mb_y
water	578:70	0:0	4	;
if	579:4	584:4	2	(h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] + 3 >= s -> resync_mb_y && h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] <= s -> resync_mb_y && h -> slice_num >= MAX_SLICES)
cond	579:11	581:27	3	h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] + 3 >= s -> resync_mb_y && h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] <= s -> resync_mb_y && h -> slice_num >= MAX_SLICES
water	579:11	0:0	4	h0
op	579:13	0:0	4	->
water	579:15	0:0	4	slice_row
op	579:24	0:0	4	[
water	579:25	0:0	4	h
op	579:26	0:0	4	->
water	579:28	0:0	4	slice_num
op	579:37	0:0	4	&
water	579:38	0:0	4	(
water	579:39	0:0	4	MAX_SLICES
op	579:49	0:0	4	-
water	579:50	0:0	4	1
water	579:51	0:0	4	)
op	579:52	0:0	4	]
op	579:54	0:0	4	+
water	579:56	0:0	4	3
op	579:58	0:0	4	>=
water	579:61	0:0	4	s
op	579:62	0:0	4	->
water	579:64	0:0	4	resync_mb_y
op	580:8	0:0	4	&&
water	580:11	0:0	4	h0
op	580:13	0:0	4	->
water	580:15	0:0	4	slice_row
op	580:24	0:0	4	[
water	580:25	0:0	4	h
op	580:26	0:0	4	->
water	580:28	0:0	4	slice_num
op	580:37	0:0	4	&
water	580:38	0:0	4	(
water	580:39	0:0	4	MAX_SLICES
op	580:49	0:0	4	-
water	580:50	0:0	4	1
water	580:51	0:0	4	)
op	580:52	0:0	4	]
op	580:54	0:0	4	<=
water	580:57	0:0	4	s
op	580:58	0:0	4	->
water	580:60	0:0	4	resync_mb_y
op	581:8	0:0	4	&&
water	581:11	0:0	4	h
op	581:12	0:0	4	->
water	581:14	0:0	4	slice_num
op	581:24	0:0	4	>=
water	581:27	0:0	4	MAX_SLICES
stmts	581:39	584:4	3	
water	581:39	0:0	4	{
call	583:8	583:164	4	av_log
arg	583:15	583:23	5	s->avctx
water	583:15	0:0	6	s
op	583:16	0:0	6	->
water	583:18	0:0	6	avctx
arg	583:25	583:39	5	AV_LOG_WARNING
water	583:25	0:0	6	AV_LOG_WARNING
arg	583:41	583:138	5	"Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n"
water	583:41	0:0	6	"Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n"
arg	583:140	583:152	5	h->slice_num
water	583:140	0:0	6	h
op	583:141	0:0	6	->
water	583:143	0:0	6	slice_num
arg	583:154	583:164	5	MAX_SLICES
water	583:154	0:0	6	MAX_SLICES
water	583:165	0:0	4	;
water	584:4	0:0	4	}
for	586:4	617:4	2	(j = 0 ;j < 2;j ++)
forinit	586:8	586:11	3	j = 0 ;
water	586:8	0:0	4	j
op	586:9	0:0	4	=
water	586:10	0:0	4	0
water	586:11	0:0	4	;
cond	586:13	586:15	3	j < 2
water	586:13	0:0	4	j
op	586:14	0:0	4	<
water	586:15	0:0	4	2
forexpr	586:18	586:19	3	j ++
water	586:18	0:0	4	j
op	586:19	0:0	4	++
stmts	586:22	617:4	3	
water	586:22	0:0	4	{
decl	587:8	587:23	4	int	id_list[16]
decl	588:8	588:64	4	int	*ref2frm
op	588:20	0:0	4	=
water	588:22	0:0	4	h
op	588:23	0:0	4	->
water	588:25	0:0	4	ref2frm
op	588:32	0:0	4	[
water	588:33	0:0	4	h
op	588:34	0:0	4	->
water	588:36	0:0	4	slice_num
op	588:45	0:0	4	&
water	588:46	0:0	4	(
water	588:47	0:0	4	MAX_SLICES
op	588:57	0:0	4	-
water	588:58	0:0	4	1
water	588:59	0:0	4	)
op	588:60	0:0	4	]
op	588:61	0:0	4	[
water	588:62	0:0	4	j
op	588:63	0:0	4	]
for	589:8	605:8	4	(i = 0 ;i < 16;i ++)
forinit	589:12	589:15	5	i = 0 ;
water	589:12	0:0	6	i
op	589:13	0:0	6	=
water	589:14	0:0	6	0
water	589:15	0:0	6	;
cond	589:17	589:19	5	i < 16
water	589:17	0:0	6	i
op	589:18	0:0	6	<
water	589:19	0:0	6	16
forexpr	589:23	589:24	5	i ++
water	589:23	0:0	6	i
op	589:24	0:0	6	++
stmts	589:27	605:8	5	
water	589:27	0:0	6	{
water	590:12	0:0	6	id_list
op	590:19	0:0	6	[
water	590:20	0:0	6	i
op	590:21	0:0	6	]
op	590:22	0:0	6	=
water	590:24	0:0	6	60
water	590:26	0:0	6	;
if	591:12	604:12	6	(h -> ref_list [ j ] [ i ] . f . data [ 0 ])
cond	591:16	591:42	7	h -> ref_list [ j ] [ i ] . f . data [ 0 ]
water	591:16	0:0	8	h
op	591:17	0:0	8	->
water	591:19	0:0	8	ref_list
op	591:27	0:0	8	[
water	591:28	0:0	8	j
op	591:29	0:0	8	]
op	591:30	0:0	8	[
water	591:31	0:0	8	i
op	591:32	0:0	8	]
op	591:33	0:0	8	.
water	591:34	0:0	8	f
op	591:35	0:0	8	.
water	591:36	0:0	8	data
op	591:40	0:0	8	[
water	591:41	0:0	8	0
op	591:42	0:0	8	]
stmts	591:45	604:12	7	
water	591:45	0:0	8	{
decl	592:16	592:21	8	int	k
decl	593:16	593:59	8	uint8_t	*base
op	593:30	0:0	8	=
water	593:32	0:0	8	h
op	593:33	0:0	8	->
water	593:35	0:0	8	ref_list
op	593:43	0:0	8	[
water	593:44	0:0	8	j
op	593:45	0:0	8	]
op	593:46	0:0	8	[
water	593:47	0:0	8	i
op	593:48	0:0	8	]
op	593:49	0:0	8	.
water	593:50	0:0	8	f
op	593:51	0:0	8	.
water	593:52	0:0	8	base
op	593:56	0:0	8	[
water	593:57	0:0	8	0
op	593:58	0:0	8	]
for	594:16	598:20	8	(k = 0 ;k < h -> short_ref_count;k ++)
forinit	594:20	594:23	9	k = 0 ;
water	594:20	0:0	10	k
op	594:21	0:0	10	=
water	594:22	0:0	10	0
water	594:23	0:0	10	;
cond	594:25	594:30	9	k < h -> short_ref_count
water	594:25	0:0	10	k
op	594:26	0:0	10	<
water	594:27	0:0	10	h
op	594:28	0:0	10	->
water	594:30	0:0	10	short_ref_count
forexpr	594:47	594:48	9	k ++
water	594:47	0:0	10	k
op	594:48	0:0	10	++
stmts	595:20	598:20	9	
if	595:20	598:20	10	(h -> short_ref [ k ] -> f . base [ 0 ] == base)
cond	595:24	595:54	11	h -> short_ref [ k ] -> f . base [ 0 ] == base
water	595:24	0:0	12	h
op	595:25	0:0	12	->
water	595:27	0:0	12	short_ref
op	595:36	0:0	12	[
water	595:37	0:0	12	k
op	595:38	0:0	12	]
op	595:39	0:0	12	->
water	595:41	0:0	12	f
op	595:42	0:0	12	.
water	595:43	0:0	12	base
op	595:47	0:0	12	[
water	595:48	0:0	12	0
op	595:49	0:0	12	]
op	595:51	0:0	12	==
water	595:54	0:0	12	base
stmts	595:60	598:20	11	
water	595:60	0:0	12	{
water	596:24	0:0	12	id_list
op	596:31	0:0	12	[
water	596:32	0:0	12	i
op	596:33	0:0	12	]
op	596:34	0:0	12	=
water	596:36	0:0	12	k
water	596:37	0:0	12	;
break	597:24	597:29	12	
water	598:20	0:0	12	}
for	599:16	603:20	8	(k = 0 ;k < h -> long_ref_count;k ++)
forinit	599:20	599:23	9	k = 0 ;
water	599:20	0:0	10	k
op	599:21	0:0	10	=
water	599:22	0:0	10	0
water	599:23	0:0	10	;
cond	599:25	599:30	9	k < h -> long_ref_count
water	599:25	0:0	10	k
op	599:26	0:0	10	<
water	599:27	0:0	10	h
op	599:28	0:0	10	->
water	599:30	0:0	10	long_ref_count
forexpr	599:46	599:47	9	k ++
water	599:46	0:0	10	k
op	599:47	0:0	10	++
stmts	600:20	603:20	9	
if	600:20	603:20	10	(h -> long_ref [ k ] && h -> long_ref [ k ] -> f . base [ 0 ] == base)
cond	600:24	600:71	11	h -> long_ref [ k ] && h -> long_ref [ k ] -> f . base [ 0 ] == base
water	600:24	0:0	12	h
op	600:25	0:0	12	->
water	600:27	0:0	12	long_ref
op	600:35	0:0	12	[
water	600:36	0:0	12	k
op	600:37	0:0	12	]
op	600:39	0:0	12	&&
water	600:42	0:0	12	h
op	600:43	0:0	12	->
water	600:45	0:0	12	long_ref
op	600:53	0:0	12	[
water	600:54	0:0	12	k
op	600:55	0:0	12	]
op	600:56	0:0	12	->
water	600:58	0:0	12	f
op	600:59	0:0	12	.
water	600:60	0:0	12	base
op	600:64	0:0	12	[
water	600:65	0:0	12	0
op	600:66	0:0	12	]
op	600:68	0:0	12	==
water	600:71	0:0	12	base
stmts	600:77	603:20	11	
water	600:77	0:0	12	{
water	601:24	0:0	12	id_list
op	601:31	0:0	12	[
water	601:32	0:0	12	i
op	601:33	0:0	12	]
op	601:34	0:0	12	=
water	601:36	0:0	12	h
op	601:37	0:0	12	->
water	601:39	0:0	12	short_ref_count
op	601:55	0:0	12	+
water	601:57	0:0	12	k
water	601:58	0:0	12	;
break	602:24	602:29	12	
water	603:20	0:0	12	}
water	604:12	0:0	8	}
water	605:8	0:0	6	}
water	607:8	0:0	4	ref2frm
op	607:15	0:0	4	[
water	607:16	0:0	4	0
op	607:17	0:0	4	]
op	607:18	0:0	4	=
water	608:8	0:0	4	ref2frm
op	608:15	0:0	4	[
water	608:16	0:0	4	1
op	608:17	0:0	4	]
op	608:18	0:0	4	=
op	608:20	0:0	4	-
water	608:21	0:0	4	1
water	608:22	0:0	4	;
for	609:8	611:63	4	(i = 0 ;i < 16;i ++)
forinit	609:12	609:15	5	i = 0 ;
water	609:12	0:0	6	i
op	609:13	0:0	6	=
water	609:14	0:0	6	0
water	609:15	0:0	6	;
cond	609:17	609:19	5	i < 16
water	609:17	0:0	6	i
op	609:18	0:0	6	<
water	609:19	0:0	6	16
forexpr	609:23	609:24	5	i ++
water	609:23	0:0	6	i
op	609:24	0:0	6	++
stmts	610:12	611:63	5	
water	610:12	0:0	6	ref2frm
op	610:19	0:0	6	[
water	610:20	0:0	6	i
op	610:21	0:0	6	+
water	610:22	0:0	6	2
op	610:23	0:0	6	]
op	610:24	0:0	6	=
water	610:26	0:0	6	4
op	610:27	0:0	6	*
water	610:28	0:0	6	id_list
op	610:35	0:0	6	[
water	610:36	0:0	6	i
op	610:37	0:0	6	]
op	611:26	0:0	6	+
water	611:28	0:0	6	(
water	611:29	0:0	6	h
op	611:30	0:0	6	->
water	611:32	0:0	6	ref_list
op	611:40	0:0	6	[
water	611:41	0:0	6	j
op	611:42	0:0	6	]
op	611:43	0:0	6	[
water	611:44	0:0	6	i
op	611:45	0:0	6	]
op	611:46	0:0	6	.
water	611:47	0:0	6	f
op	611:48	0:0	6	.
water	611:49	0:0	6	reference
op	611:59	0:0	6	&
water	611:61	0:0	6	3
water	611:62	0:0	6	)
water	611:63	0:0	6	;
water	612:8	0:0	4	ref2frm
op	612:15	0:0	4	[
water	612:16	0:0	4	18
op	612:18	0:0	4	+
water	612:19	0:0	4	0
op	612:20	0:0	4	]
op	612:21	0:0	4	=
water	613:8	0:0	4	ref2frm
op	613:15	0:0	4	[
water	613:16	0:0	4	18
op	613:18	0:0	4	+
water	613:19	0:0	4	1
op	613:20	0:0	4	]
op	613:21	0:0	4	=
op	613:23	0:0	4	-
water	613:24	0:0	4	1
water	613:25	0:0	4	;
for	614:8	616:63	4	(i = 16 ;i < 48;i ++)
forinit	614:12	614:16	5	i = 16 ;
water	614:12	0:0	6	i
op	614:13	0:0	6	=
water	614:14	0:0	6	16
water	614:16	0:0	6	;
cond	614:18	614:20	5	i < 48
water	614:18	0:0	6	i
op	614:19	0:0	6	<
water	614:20	0:0	6	48
forexpr	614:24	614:25	5	i ++
water	614:24	0:0	6	i
op	614:25	0:0	6	++
stmts	615:12	616:63	5	
water	615:12	0:0	6	ref2frm
op	615:19	0:0	6	[
water	615:20	0:0	6	i
op	615:21	0:0	6	+
water	615:22	0:0	6	4
op	615:23	0:0	6	]
op	615:24	0:0	6	=
water	615:26	0:0	6	4
op	615:27	0:0	6	*
water	615:28	0:0	6	id_list
op	615:35	0:0	6	[
water	615:36	0:0	6	(
water	615:37	0:0	6	i
op	615:38	0:0	6	-
water	615:39	0:0	6	16
water	615:41	0:0	6	)
op	615:42	0:0	6	>>
water	615:44	0:0	6	1
op	615:45	0:0	6	]
op	616:26	0:0	6	+
water	616:28	0:0	6	(
water	616:29	0:0	6	h
op	616:30	0:0	6	->
water	616:32	0:0	6	ref_list
op	616:40	0:0	6	[
water	616:41	0:0	6	j
op	616:42	0:0	6	]
op	616:43	0:0	6	[
water	616:44	0:0	6	i
op	616:45	0:0	6	]
op	616:46	0:0	6	.
water	616:47	0:0	6	f
op	616:48	0:0	6	.
water	616:49	0:0	6	reference
op	616:59	0:0	6	&
water	616:61	0:0	6	3
water	616:62	0:0	6	)
water	616:63	0:0	6	;
water	617:4	0:0	4	}
water	620:4	0:0	2	h
op	620:5	0:0	2	->
water	620:7	0:0	2	emu_edge_width
op	620:21	0:0	2	=
water	620:23	0:0	2	(
water	620:24	0:0	2	s
op	620:25	0:0	2	->
water	620:27	0:0	2	flags
op	620:32	0:0	2	&
water	620:33	0:0	2	CODEC_FLAG_EMU_EDGE
op	620:53	0:0	2	||
water	620:56	0:0	2	(
op	620:57	0:0	2	!
water	620:58	0:0	2	h
op	620:59	0:0	2	->
water	620:61	0:0	2	sps
op	620:64	0:0	2	.
water	620:65	0:0	2	frame_mbs_only_flag
op	620:85	0:0	2	&&
water	620:88	0:0	2	s
op	620:89	0:0	2	->
water	620:91	0:0	2	avctx
op	620:96	0:0	2	->
water	620:98	0:0	2	active_thread_type
water	620:116	0:0	2	)
water	620:117	0:0	2	)
water	620:119	0:0	2	?
water	620:121	0:0	2	0
water	620:123	0:0	2	:
water	620:125	0:0	2	16
water	620:127	0:0	2	;
water	621:4	0:0	2	h
op	621:5	0:0	2	->
water	621:7	0:0	2	emu_edge_height
op	621:22	0:0	2	=
water	621:24	0:0	2	(
water	621:25	0:0	2	FRAME_MBAFF
op	621:37	0:0	2	||
water	621:40	0:0	2	FIELD_PICTURE
water	621:53	0:0	2	)
water	621:55	0:0	2	?
water	621:57	0:0	2	0
water	621:59	0:0	2	:
water	621:61	0:0	2	h
op	621:62	0:0	2	->
water	621:64	0:0	2	emu_edge_width
water	621:78	0:0	2	;
if	623:4	638:4	2	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	623:7	623:23	3	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	623:7	0:0	4	s
op	623:8	0:0	4	->
water	623:10	0:0	4	avctx
op	623:15	0:0	4	->
water	623:17	0:0	4	debug
op	623:22	0:0	4	&
water	623:23	0:0	4	FF_DEBUG_PICT_INFO
stmts	623:42	638:4	3	
water	623:42	0:0	4	{
call	624:8	637:15	4	av_log
arg	624:15	624:25	5	h->s.avctx
water	624:15	0:0	6	h
op	624:16	0:0	6	->
water	624:18	0:0	6	s
op	624:19	0:0	6	.
water	624:20	0:0	6	avctx
arg	624:27	624:39	5	AV_LOG_DEBUG
water	624:27	0:0	6	AV_LOG_DEBUG
arg	624:41	624:140	5	"slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n"
water	624:41	0:0	6	"slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n"
arg	625:15	625:27	5	h->slice_num
water	625:15	0:0	6	h
op	625:16	0:0	6	->
water	625:18	0:0	6	slice_num
arg	626:15	626:106	5	(s->picture_structure==PICT_FRAME?"F":s->picture_structure==PICT_TOP_FIELD?"T":"B")
water	626:15	0:0	6	(
water	626:16	0:0	6	s
op	626:17	0:0	6	->
water	626:19	0:0	6	picture_structure
op	626:36	0:0	6	==
water	626:38	0:0	6	PICT_FRAME
water	626:49	0:0	6	?
water	626:51	0:0	6	"F"
water	626:55	0:0	6	:
water	626:57	0:0	6	s
op	626:58	0:0	6	->
water	626:60	0:0	6	picture_structure
op	626:77	0:0	6	==
water	626:79	0:0	6	PICT_TOP_FIELD
water	626:94	0:0	6	?
water	626:96	0:0	6	"T"
water	626:100	0:0	6	:
water	626:102	0:0	6	"B"
water	626:105	0:0	6	)
arg	627:15	627:32	5	first_mb_in_slice
water	627:15	0:0	6	first_mb_in_slice
arg	628:15	628:54	5	av_get_picture_type_char(h->slice_type)
call	628:15	628:53	6	av_get_picture_type_char
arg	628:40	628:53	7	h->slice_type
water	628:40	0:0	8	h
op	628:41	0:0	8	->
water	628:43	0:0	8	slice_type
arg	628:56	628:89	5	h->slice_type_fixed?" fix":""
water	628:56	0:0	6	h
op	628:57	0:0	6	->
water	628:59	0:0	6	slice_type_fixed
water	628:76	0:0	6	?
water	628:78	0:0	6	" fix"
water	628:85	0:0	6	:
water	628:87	0:0	6	""
arg	628:91	628:138	5	h->nal_unit_type==NAL_IDR_SLICE?" IDR":""
water	628:91	0:0	6	h
op	628:92	0:0	6	->
water	628:94	0:0	6	nal_unit_type
op	628:108	0:0	6	==
water	628:111	0:0	6	NAL_IDR_SLICE
water	628:125	0:0	6	?
water	628:127	0:0	6	" IDR"
water	628:134	0:0	6	:
water	628:136	0:0	6	""
arg	629:15	629:21	5	pps_id
water	629:15	0:0	6	pps_id
arg	629:23	629:35	5	h->frame_num
water	629:23	0:0	6	h
op	629:24	0:0	6	->
water	629:26	0:0	6	frame_num
arg	630:15	630:51	5	s->current_picture_ptr->field_poc[0]
water	630:15	0:0	6	s
op	630:16	0:0	6	->
water	630:18	0:0	6	current_picture_ptr
op	630:37	0:0	6	->
water	630:39	0:0	6	field_poc
op	630:48	0:0	6	[
water	630:49	0:0	6	0
op	630:50	0:0	6	]
arg	630:53	630:89	5	s->current_picture_ptr->field_poc[1]
water	630:53	0:0	6	s
op	630:54	0:0	6	->
water	630:56	0:0	6	current_picture_ptr
op	630:75	0:0	6	->
water	630:77	0:0	6	field_poc
op	630:86	0:0	6	[
water	630:87	0:0	6	1
op	630:88	0:0	6	]
arg	631:15	631:30	5	h->ref_count[0]
water	631:15	0:0	6	h
op	631:16	0:0	6	->
water	631:18	0:0	6	ref_count
op	631:27	0:0	6	[
water	631:28	0:0	6	0
op	631:29	0:0	6	]
arg	631:32	631:47	5	h->ref_count[1]
water	631:32	0:0	6	h
op	631:33	0:0	6	->
water	631:35	0:0	6	ref_count
op	631:44	0:0	6	[
water	631:45	0:0	6	1
op	631:46	0:0	6	]
arg	632:15	632:24	5	s->qscale
water	632:15	0:0	6	s
op	632:16	0:0	6	->
water	632:18	0:0	6	qscale
arg	633:15	633:35	5	h->deblocking_filter
water	633:15	0:0	6	h
op	633:16	0:0	6	->
water	633:18	0:0	6	deblocking_filter
arg	633:37	633:66	5	h->slice_alpha_c0_offset/2-26
water	633:37	0:0	6	h
op	633:38	0:0	6	->
water	633:40	0:0	6	slice_alpha_c0_offset
op	633:61	0:0	6	/
water	633:62	0:0	6	2
op	633:63	0:0	6	-
water	633:64	0:0	6	26
arg	633:68	633:93	5	h->slice_beta_offset/2-26
water	633:68	0:0	6	h
op	633:69	0:0	6	->
water	633:71	0:0	6	slice_beta_offset
op	633:88	0:0	6	/
water	633:89	0:0	6	2
op	633:90	0:0	6	-
water	633:91	0:0	6	26
arg	634:15	634:28	5	h->use_weight
water	634:15	0:0	6	h
op	634:16	0:0	6	->
water	634:18	0:0	6	use_weight
arg	635:15	635:66	5	h->use_weight==1&&h->use_weight_chroma?"c":""
water	635:15	0:0	6	h
op	635:16	0:0	6	->
water	635:18	0:0	6	use_weight
op	635:28	0:0	6	==
water	635:30	0:0	6	1
op	635:32	0:0	6	&&
water	635:35	0:0	6	h
op	635:36	0:0	6	->
water	635:38	0:0	6	use_weight_chroma
water	635:56	0:0	6	?
water	635:58	0:0	6	"c"
water	635:62	0:0	6	:
water	635:64	0:0	6	""
arg	636:15	637:15	5	h->slice_type==AV_PICTURE_TYPE_B?(h->direct_spatial_mv_pred?"SPAT":"TEMP"):""
water	636:15	0:0	6	h
op	636:16	0:0	6	->
water	636:18	0:0	6	slice_type
op	636:29	0:0	6	==
water	636:32	0:0	6	AV_PICTURE_TYPE_B
water	636:50	0:0	6	?
water	636:52	0:0	6	(
water	636:53	0:0	6	h
op	636:54	0:0	6	->
water	636:56	0:0	6	direct_spatial_mv_pred
water	636:79	0:0	6	?
water	636:81	0:0	6	"SPAT"
water	636:88	0:0	6	:
water	636:90	0:0	6	"TEMP"
water	636:96	0:0	6	)
water	636:98	0:0	6	:
water	636:100	0:0	6	""
water	637:16	0:0	4	;
water	638:4	0:0	4	}
return	640:4	640:12	2	0
water	640:11	0:0	3	0
