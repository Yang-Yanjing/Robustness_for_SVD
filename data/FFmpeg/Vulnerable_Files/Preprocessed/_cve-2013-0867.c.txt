func	12:0	821:0	0	static int	decode_slice_header
params	12:30	0:0	1	
param	12:31	12:45	2	H264Context *	h
param	12:47	12:62	2	H264Context *	h0
stmnts	14:4	820:12	1	
water	14:4	0:0	2	MpegEncContext
op	14:19	0:0	2	*
water	14:20	0:0	2	const
water	14:26	0:0	2	s
op	14:29	0:0	2	=
op	14:31	0:0	2	&
water	14:32	0:0	2	h
op	14:33	0:0	2	->
water	14:35	0:0	2	s
water	14:36	0:0	2	;
water	15:4	0:0	2	MpegEncContext
op	15:19	0:0	2	*
water	15:20	0:0	2	const
water	15:26	0:0	2	s0
op	15:29	0:0	2	=
op	15:31	0:0	2	&
water	15:32	0:0	2	h0
op	15:34	0:0	2	->
water	15:36	0:0	2	s
water	15:37	0:0	2	;
decl	16:4	16:34	2	unsigned int	first_mb_in_slice
decl	17:4	17:23	2	unsigned int	pps_id
decl	18:4	18:45	2	int	num_ref_idx_active_override_flag
water	18:40	0:0	2	,
decl	18:4	18:45	2	int	ret
decl	19:4	19:38	2	unsigned int	slice_type
water	19:27	0:0	2	,
decl	19:4	19:38	2	unsigned int	tmp
water	19:32	0:0	2	,
decl	19:4	19:38	2	unsigned int	i
water	19:35	0:0	2	,
decl	19:4	19:38	2	unsigned int	j
decl	20:4	20:33	2	int	default_ref_list_done
op	20:30	0:0	2	=
water	20:32	0:0	2	0
decl	21:4	21:45	2	int	last_pic_structure
water	21:26	0:0	2	,
decl	21:4	21:45	2	int	last_pic_dropable
decl	22:4	22:19	2	int	must_reinit
if	25:4	29:4	2	(( s -> avctx -> flags2 & CODEC_FLAG2_FAST ) && ! h -> nal_ref_idc && ! h -> pixel_shift)
cond	25:8	26:31	3	( s -> avctx -> flags2 & CODEC_FLAG2_FAST ) && ! h -> nal_ref_idc && ! h -> pixel_shift
water	25:8	0:0	4	(
water	25:9	0:0	4	s
op	25:10	0:0	4	->
water	25:12	0:0	4	avctx
op	25:17	0:0	4	->
water	25:19	0:0	4	flags2
op	25:26	0:0	4	&
water	25:28	0:0	4	CODEC_FLAG2_FAST
water	25:44	0:0	4	)
op	25:46	0:0	4	&&
op	26:8	0:0	4	!
water	26:9	0:0	4	h
op	26:10	0:0	4	->
water	26:12	0:0	4	nal_ref_idc
op	26:24	0:0	4	&&
op	26:27	0:0	4	!
water	26:28	0:0	4	h
op	26:29	0:0	4	->
water	26:31	0:0	4	pixel_shift
stmts	26:44	29:4	3	
water	26:44	0:0	4	{
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	me
op	27:13	0:0	4	.
water	27:14	0:0	4	qpel_put
op	27:23	0:0	4	=
water	27:25	0:0	4	s
op	27:26	0:0	4	->
water	27:28	0:0	4	dsp
op	27:31	0:0	4	.
water	27:32	0:0	4	put_2tap_qpel_pixels_tab
water	27:56	0:0	4	;
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	me
op	28:13	0:0	4	.
water	28:14	0:0	4	qpel_avg
op	28:23	0:0	4	=
water	28:25	0:0	4	s
op	28:26	0:0	4	->
water	28:28	0:0	4	dsp
op	28:31	0:0	4	.
water	28:32	0:0	4	avg_2tap_qpel_pixels_tab
water	28:56	0:0	4	;
water	29:4	0:0	4	}
else	29:6	32:4	2
stmts	29:11	32:4	3	
water	29:11	0:0	4	{
water	30:8	0:0	4	s
op	30:9	0:0	4	->
water	30:11	0:0	4	me
op	30:13	0:0	4	.
water	30:14	0:0	4	qpel_put
op	30:23	0:0	4	=
water	30:25	0:0	4	s
op	30:26	0:0	4	->
water	30:28	0:0	4	dsp
op	30:31	0:0	4	.
water	30:32	0:0	4	put_h264_qpel_pixels_tab
water	30:56	0:0	4	;
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	me
op	31:13	0:0	4	.
water	31:14	0:0	4	qpel_avg
op	31:23	0:0	4	=
water	31:25	0:0	4	s
op	31:26	0:0	4	->
water	31:28	0:0	4	dsp
op	31:31	0:0	4	.
water	31:32	0:0	4	avg_h264_qpel_pixels_tab
water	31:56	0:0	4	;
water	32:4	0:0	4	}
water	34:4	0:0	2	first_mb_in_slice
op	34:22	0:0	2	=
call	34:24	34:49	2	get_ue_golomb_long
arg	34:43	34:49	3	&s->gb
op	34:43	0:0	4	&
water	34:44	0:0	4	s
op	34:45	0:0	4	->
water	34:47	0:0	4	gb
water	34:50	0:0	2	;
if	36:4	50:4	2	(first_mb_in_slice == 0)
cond	36:8	36:29	3	first_mb_in_slice == 0
water	36:8	0:0	4	first_mb_in_slice
op	36:26	0:0	4	==
water	36:29	0:0	4	0
stmts	36:32	50:4	3	
water	36:32	0:0	4	{
if	37:8	39:8	4	(h0 -> current_slice && FIELD_PICTURE)
cond	37:12	37:33	5	h0 -> current_slice && FIELD_PICTURE
water	37:12	0:0	6	h0
op	37:14	0:0	6	->
water	37:16	0:0	6	current_slice
op	37:30	0:0	6	&&
water	37:33	0:0	6	FIELD_PICTURE
stmts	37:48	39:8	5	
water	37:48	0:0	6	{
call	38:12	38:26	6	field_end
arg	38:22	38:23	7	h
water	38:22	0:0	8	h
arg	38:25	38:26	7	1
water	38:25	0:0	8	1
water	38:27	0:0	6	;
water	39:8	0:0	6	}
water	41:8	0:0	4	h0
op	41:10	0:0	4	->
water	41:12	0:0	4	current_slice
op	41:26	0:0	4	=
water	41:28	0:0	4	0
water	41:29	0:0	4	;
if	42:8	49:8	4	(! s0 -> first_field)
cond	42:12	42:17	5	! s0 -> first_field
op	42:12	0:0	6	!
water	42:13	0:0	6	s0
op	42:15	0:0	6	->
water	42:17	0:0	6	first_field
stmts	42:30	49:8	5	
water	42:30	0:0	6	{
if	43:12	47:12	6	(s -> current_picture_ptr && ! s -> dropable && s -> current_picture_ptr -> owner2 == s)
cond	43:16	44:50	7	s -> current_picture_ptr && ! s -> dropable && s -> current_picture_ptr -> owner2 == s
water	43:16	0:0	8	s
op	43:17	0:0	8	->
water	43:19	0:0	8	current_picture_ptr
op	43:39	0:0	8	&&
op	43:42	0:0	8	!
water	43:43	0:0	8	s
op	43:44	0:0	8	->
water	43:46	0:0	8	dropable
op	43:55	0:0	8	&&
water	44:16	0:0	8	s
op	44:17	0:0	8	->
water	44:19	0:0	8	current_picture_ptr
op	44:38	0:0	8	->
water	44:40	0:0	8	owner2
op	44:47	0:0	8	==
water	44:50	0:0	8	s
stmts	44:53	47:12	7	
water	44:53	0:0	8	{
call	45:16	46:83	8	ff_thread_report_progress
arg	45:42	45:68	9	&s->current_picture_ptr->f
op	45:42	0:0	10	&
water	45:43	0:0	10	s
op	45:44	0:0	10	->
water	45:46	0:0	10	current_picture_ptr
op	45:65	0:0	10	->
water	45:67	0:0	10	f
arg	45:70	45:77	9	INT_MAX
water	45:70	0:0	10	INT_MAX
arg	46:42	46:83	9	s->picture_structure==PICT_BOTTOM_FIELD
water	46:42	0:0	10	s
op	46:43	0:0	10	->
water	46:45	0:0	10	picture_structure
op	46:63	0:0	10	==
water	46:66	0:0	10	PICT_BOTTOM_FIELD
water	46:84	0:0	8	;
water	47:12	0:0	8	}
water	48:12	0:0	6	s
op	48:13	0:0	6	->
water	48:15	0:0	6	current_picture_ptr
op	48:35	0:0	6	=
water	48:37	0:0	6	NULL
water	48:41	0:0	6	;
water	49:8	0:0	6	}
water	50:4	0:0	4	}
water	52:4	0:0	2	slice_type
op	52:15	0:0	2	=
call	52:17	52:40	2	get_ue_golomb_31
arg	52:34	52:40	3	&s->gb
op	52:34	0:0	4	&
water	52:35	0:0	4	s
op	52:36	0:0	4	->
water	52:38	0:0	4	gb
water	52:41	0:0	2	;
if	53:4	58:4	2	(slice_type > 9)
cond	53:8	53:21	3	slice_type > 9
water	53:8	0:0	4	slice_type
op	53:19	0:0	4	>
water	53:21	0:0	4	9
stmts	53:24	58:4	3	
water	53:24	0:0	4	{
call	54:8	56:46	4	av_log
arg	54:15	54:25	5	h->s.avctx
water	54:15	0:0	6	h
op	54:16	0:0	6	->
water	54:18	0:0	6	s
op	54:19	0:0	6	.
water	54:20	0:0	6	avctx
arg	54:27	54:39	5	AV_LOG_ERROR
water	54:27	0:0	6	AV_LOG_ERROR
arg	55:15	55:53	5	"slice type too large (%d) at %d %d\n"
water	55:15	0:0	6	"slice type too large (%d) at %d %d\n"
arg	56:15	56:28	5	h->slice_type
water	56:15	0:0	6	h
op	56:16	0:0	6	->
water	56:18	0:0	6	slice_type
arg	56:30	56:37	5	s->mb_x
water	56:30	0:0	6	s
op	56:31	0:0	6	->
water	56:33	0:0	6	mb_x
arg	56:39	56:46	5	s->mb_y
water	56:39	0:0	6	s
op	56:40	0:0	6	->
water	56:42	0:0	6	mb_y
water	56:47	0:0	4	;
return	57:8	57:17	4	-1
op	57:15	0:0	5	-
water	57:16	0:0	5	1
water	58:4	0:0	4	}
if	59:4	62:4	2	(slice_type > 4)
cond	59:8	59:21	3	slice_type > 4
water	59:8	0:0	4	slice_type
op	59:19	0:0	4	>
water	59:21	0:0	4	4
stmts	59:24	62:4	3	
water	59:24	0:0	4	{
water	60:8	0:0	4	slice_type
op	60:19	0:0	4	-=
water	60:22	0:0	4	5
water	60:23	0:0	4	;
water	61:8	0:0	4	h
op	61:9	0:0	4	->
water	61:11	0:0	4	slice_type_fixed
op	61:28	0:0	4	=
water	61:30	0:0	4	1
water	61:31	0:0	4	;
water	62:4	0:0	4	}
else	62:6	63:31	2
stmts	63:8	63:31	3	
water	63:8	0:0	4	h
op	63:9	0:0	4	->
water	63:11	0:0	4	slice_type_fixed
op	63:28	0:0	4	=
water	63:30	0:0	4	0
water	63:31	0:0	4	;
water	65:4	0:0	2	slice_type
op	65:15	0:0	2	=
water	65:17	0:0	2	golomb_to_pict_type
op	65:36	0:0	2	[
water	65:37	0:0	2	slice_type
op	65:47	0:0	2	]
water	65:48	0:0	2	;
if	66:4	69:4	2	(slice_type == AV_PICTURE_TYPE_I || ( h0 -> current_slice != 0 && slice_type == h0 -> last_slice_type ))
cond	66:8	67:68	3	slice_type == AV_PICTURE_TYPE_I || ( h0 -> current_slice != 0 && slice_type == h0 -> last_slice_type )
water	66:8	0:0	4	slice_type
op	66:19	0:0	4	==
water	66:22	0:0	4	AV_PICTURE_TYPE_I
op	66:40	0:0	4	||
water	67:8	0:0	4	(
water	67:9	0:0	4	h0
op	67:11	0:0	4	->
water	67:13	0:0	4	current_slice
op	67:27	0:0	4	!=
water	67:30	0:0	4	0
op	67:32	0:0	4	&&
water	67:35	0:0	4	slice_type
op	67:46	0:0	4	==
water	67:49	0:0	4	h0
op	67:51	0:0	4	->
water	67:53	0:0	4	last_slice_type
water	67:68	0:0	4	)
stmts	67:71	69:4	3	
water	67:71	0:0	4	{
water	68:8	0:0	4	default_ref_list_done
op	68:30	0:0	4	=
water	68:32	0:0	4	1
water	68:33	0:0	4	;
water	69:4	0:0	4	}
water	70:4	0:0	2	h
op	70:5	0:0	2	->
water	70:7	0:0	2	slice_type
op	70:22	0:0	2	=
water	70:24	0:0	2	slice_type
water	70:34	0:0	2	;
water	71:4	0:0	2	h
op	71:5	0:0	2	->
water	71:7	0:0	2	slice_type_nos
op	71:22	0:0	2	=
water	71:24	0:0	2	slice_type
op	71:35	0:0	2	&
water	71:37	0:0	2	3
water	71:38	0:0	2	;
water	74:4	0:0	2	s
op	74:5	0:0	2	->
water	74:7	0:0	2	pict_type
op	74:17	0:0	2	=
water	74:19	0:0	2	h
op	74:20	0:0	2	->
water	74:22	0:0	2	slice_type
water	74:32	0:0	2	;
water	76:4	0:0	2	pps_id
op	76:11	0:0	2	=
call	76:13	76:33	2	get_ue_golomb
arg	76:27	76:33	3	&s->gb
op	76:27	0:0	4	&
water	76:28	0:0	4	s
op	76:29	0:0	4	->
water	76:31	0:0	4	gb
water	76:34	0:0	2	;
if	77:4	80:4	2	(pps_id >= MAX_PPS_COUNT)
cond	77:8	77:18	3	pps_id >= MAX_PPS_COUNT
water	77:8	0:0	4	pps_id
op	77:15	0:0	4	>=
water	77:18	0:0	4	MAX_PPS_COUNT
stmts	77:33	80:4	3	
water	77:33	0:0	4	{
call	78:8	78:75	4	av_log
arg	78:15	78:25	5	h->s.avctx
water	78:15	0:0	6	h
op	78:16	0:0	6	->
water	78:18	0:0	6	s
op	78:19	0:0	6	.
water	78:20	0:0	6	avctx
arg	78:27	78:39	5	AV_LOG_ERROR
water	78:27	0:0	6	AV_LOG_ERROR
arg	78:41	78:67	5	"pps_id %d out of range\n"
water	78:41	0:0	6	"pps_id %d out of range\n"
arg	78:69	78:75	5	pps_id
water	78:69	0:0	6	pps_id
water	78:76	0:0	4	;
return	79:8	79:17	4	-1
op	79:15	0:0	5	-
water	79:16	0:0	5	1
water	80:4	0:0	4	}
if	81:4	86:4	2	(! h0 -> pps_buffers [ pps_id ])
cond	81:8	81:31	3	! h0 -> pps_buffers [ pps_id ]
op	81:8	0:0	4	!
water	81:9	0:0	4	h0
op	81:11	0:0	4	->
water	81:13	0:0	4	pps_buffers
op	81:24	0:0	4	[
water	81:25	0:0	4	pps_id
op	81:31	0:0	4	]
stmts	81:34	86:4	3	
water	81:34	0:0	4	{
call	82:8	84:21	4	av_log
arg	82:15	82:25	5	h->s.avctx
water	82:15	0:0	6	h
op	82:16	0:0	6	->
water	82:18	0:0	6	s
op	82:19	0:0	6	.
water	82:20	0:0	6	avctx
arg	82:27	82:39	5	AV_LOG_ERROR
water	82:27	0:0	6	AV_LOG_ERROR
arg	83:15	83:49	5	"non-existing PPS %u referenced\n"
water	83:15	0:0	6	"non-existing PPS %u referenced\n"
arg	84:15	84:21	5	pps_id
water	84:15	0:0	6	pps_id
water	84:22	0:0	4	;
return	85:8	85:17	4	-1
op	85:15	0:0	5	-
water	85:16	0:0	5	1
water	86:4	0:0	4	}
water	87:4	0:0	2	h
op	87:5	0:0	2	->
water	87:7	0:0	2	pps
op	87:11	0:0	2	=
op	87:13	0:0	2	*
water	87:14	0:0	2	h0
op	87:16	0:0	2	->
water	87:18	0:0	2	pps_buffers
op	87:29	0:0	2	[
water	87:30	0:0	2	pps_id
op	87:36	0:0	2	]
water	87:37	0:0	2	;
if	89:4	94:4	2	(! h0 -> sps_buffers [ h -> pps . sps_id ])
cond	89:8	89:38	3	! h0 -> sps_buffers [ h -> pps . sps_id ]
op	89:8	0:0	4	!
water	89:9	0:0	4	h0
op	89:11	0:0	4	->
water	89:13	0:0	4	sps_buffers
op	89:24	0:0	4	[
water	89:25	0:0	4	h
op	89:26	0:0	4	->
water	89:28	0:0	4	pps
op	89:31	0:0	4	.
water	89:32	0:0	4	sps_id
op	89:38	0:0	4	]
stmts	89:41	94:4	3	
water	89:41	0:0	4	{
call	90:8	92:28	4	av_log
arg	90:15	90:25	5	h->s.avctx
water	90:15	0:0	6	h
op	90:16	0:0	6	->
water	90:18	0:0	6	s
op	90:19	0:0	6	.
water	90:20	0:0	6	avctx
arg	90:27	90:39	5	AV_LOG_ERROR
water	90:27	0:0	6	AV_LOG_ERROR
arg	91:15	91:49	5	"non-existing SPS %u referenced\n"
water	91:15	0:0	6	"non-existing SPS %u referenced\n"
arg	92:15	92:28	5	h->pps.sps_id
water	92:15	0:0	6	h
op	92:16	0:0	6	->
water	92:18	0:0	6	pps
op	92:21	0:0	6	.
water	92:22	0:0	6	sps_id
water	92:29	0:0	4	;
return	93:8	93:17	4	-1
op	93:15	0:0	5	-
water	93:16	0:0	5	1
water	94:4	0:0	4	}
water	95:4	0:0	2	h
op	95:5	0:0	2	->
water	95:7	0:0	2	sps
op	95:11	0:0	2	=
op	95:13	0:0	2	*
water	95:14	0:0	2	h0
op	95:16	0:0	2	->
water	95:18	0:0	2	sps_buffers
op	95:29	0:0	2	[
water	95:30	0:0	2	h
op	95:31	0:0	2	->
water	95:33	0:0	2	pps
op	95:36	0:0	2	.
water	95:37	0:0	2	sps_id
op	95:43	0:0	2	]
water	95:44	0:0	2	;
water	97:4	0:0	2	s
op	97:5	0:0	2	->
water	97:7	0:0	2	avctx
op	97:12	0:0	2	->
water	97:14	0:0	2	profile
op	97:22	0:0	2	=
call	97:24	97:51	2	ff_h264_get_profile
arg	97:44	97:51	3	&h->sps
op	97:44	0:0	4	&
water	97:45	0:0	4	h
op	97:46	0:0	4	->
water	97:48	0:0	4	sps
water	97:52	0:0	2	;
water	98:4	0:0	2	s
op	98:5	0:0	2	->
water	98:7	0:0	2	avctx
op	98:12	0:0	2	->
water	98:14	0:0	2	level
op	98:22	0:0	2	=
water	98:24	0:0	2	h
op	98:25	0:0	2	->
water	98:27	0:0	2	sps
op	98:30	0:0	2	.
water	98:31	0:0	2	level_idc
water	98:40	0:0	2	;
water	99:4	0:0	2	s
op	99:5	0:0	2	->
water	99:7	0:0	2	avctx
op	99:12	0:0	2	->
water	99:14	0:0	2	refs
op	99:22	0:0	2	=
water	99:24	0:0	2	h
op	99:25	0:0	2	->
water	99:27	0:0	2	sps
op	99:30	0:0	2	.
water	99:31	0:0	2	ref_frame_count
water	99:46	0:0	2	;
water	101:4	0:0	2	must_reinit
op	101:16	0:0	2	=
water	101:18	0:0	2	(
water	101:19	0:0	2	s
op	101:20	0:0	2	->
water	101:22	0:0	2	context_initialized
op	101:42	0:0	2	&&
water	102:20	0:0	2	(
water	102:24	0:0	2	16
op	102:26	0:0	2	*
water	102:27	0:0	2	h
op	102:28	0:0	2	->
water	102:30	0:0	2	sps
op	102:33	0:0	2	.
water	102:34	0:0	2	mb_width
op	102:43	0:0	2	!=
water	102:46	0:0	2	s
op	102:47	0:0	2	->
water	102:49	0:0	2	avctx
op	102:54	0:0	2	->
water	102:56	0:0	2	coded_width
op	103:21	0:0	2	||
water	103:24	0:0	2	16
op	103:26	0:0	2	*
water	103:27	0:0	2	h
op	103:28	0:0	2	->
water	103:30	0:0	2	sps
op	103:33	0:0	2	.
water	103:34	0:0	2	mb_height
op	103:44	0:0	2	*
water	103:46	0:0	2	(
water	103:47	0:0	2	2
op	103:49	0:0	2	-
water	103:51	0:0	2	h
op	103:52	0:0	2	->
water	103:54	0:0	2	sps
op	103:57	0:0	2	.
water	103:58	0:0	2	frame_mbs_only_flag
water	103:77	0:0	2	)
op	103:79	0:0	2	!=
water	103:82	0:0	2	s
op	103:83	0:0	2	->
water	103:85	0:0	2	avctx
op	103:90	0:0	2	->
water	103:92	0:0	2	coded_height
op	104:21	0:0	2	||
water	104:24	0:0	2	s
op	104:25	0:0	2	->
water	104:27	0:0	2	avctx
op	104:32	0:0	2	->
water	104:34	0:0	2	bits_per_raw_sample
op	104:54	0:0	2	!=
water	104:57	0:0	2	h
op	104:58	0:0	2	->
water	104:60	0:0	2	sps
op	104:63	0:0	2	.
water	104:64	0:0	2	bit_depth_luma
op	105:21	0:0	2	||
water	105:24	0:0	2	h
op	105:25	0:0	2	->
water	105:27	0:0	2	cur_chroma_format_idc
op	105:49	0:0	2	!=
water	105:52	0:0	2	h
op	105:53	0:0	2	->
water	105:55	0:0	2	sps
op	105:58	0:0	2	.
water	105:59	0:0	2	chroma_format_idc
op	106:21	0:0	2	||
call	106:24	106:74	2	av_cmp_q
arg	106:33	106:43	3	h->sps.sar
water	106:33	0:0	4	h
op	106:34	0:0	4	->
water	106:36	0:0	4	sps
op	106:39	0:0	4	.
water	106:40	0:0	4	sar
arg	106:45	106:74	3	s->avctx->sample_aspect_ratio
water	106:45	0:0	4	s
op	106:46	0:0	4	->
water	106:48	0:0	4	avctx
op	106:53	0:0	4	->
water	106:55	0:0	4	sample_aspect_ratio
water	106:75	0:0	2	)
water	106:76	0:0	2	)
water	106:77	0:0	2	;
if	108:4	112:4	2	(must_reinit && ( h != h0 || ( s -> avctx -> active_thread_type & FF_THREAD_FRAME ) ))
cond	108:7	108:82	3	must_reinit && ( h != h0 || ( s -> avctx -> active_thread_type & FF_THREAD_FRAME ) )
water	108:7	0:0	4	must_reinit
op	108:19	0:0	4	&&
water	108:22	0:0	4	(
water	108:23	0:0	4	h
op	108:25	0:0	4	!=
water	108:28	0:0	4	h0
op	108:31	0:0	4	||
water	108:34	0:0	4	(
water	108:35	0:0	4	s
op	108:36	0:0	4	->
water	108:38	0:0	4	avctx
op	108:43	0:0	4	->
water	108:45	0:0	4	active_thread_type
op	108:64	0:0	4	&
water	108:66	0:0	4	FF_THREAD_FRAME
water	108:81	0:0	4	)
water	108:82	0:0	4	)
stmts	108:85	112:4	3	
water	108:85	0:0	4	{
call	109:8	110:95	4	av_log_missing_feature
arg	109:31	109:39	5	s->avctx
water	109:31	0:0	6	s
op	109:32	0:0	6	->
water	109:34	0:0	6	avctx
arg	110:32	110:92	5	"Width/height/bit depth/chroma idc changing with threads is"
water	110:32	0:0	6	"Width/height/bit depth/chroma idc changing with threads is"
arg	110:94	110:95	5	0
water	110:94	0:0	6	0
water	110:96	0:0	4	;
return	111:8	111:35	4	AVERROR_PATCHWELCOME
water	111:15	0:0	5	AVERROR_PATCHWELCOME
water	112:4	0:0	4	}
water	114:4	0:0	2	s
op	114:5	0:0	2	->
water	114:7	0:0	2	mb_width
op	114:17	0:0	2	=
water	114:19	0:0	2	h
op	114:20	0:0	2	->
water	114:22	0:0	2	sps
op	114:25	0:0	2	.
water	114:26	0:0	2	mb_width
water	114:34	0:0	2	;
water	115:4	0:0	2	s
op	115:5	0:0	2	->
water	115:7	0:0	2	mb_height
op	115:17	0:0	2	=
water	115:19	0:0	2	h
op	115:20	0:0	2	->
water	115:22	0:0	2	sps
op	115:25	0:0	2	.
water	115:26	0:0	2	mb_height
op	115:36	0:0	2	*
water	115:38	0:0	2	(
water	115:39	0:0	2	2
op	115:41	0:0	2	-
water	115:43	0:0	2	h
op	115:44	0:0	2	->
water	115:46	0:0	2	sps
op	115:49	0:0	2	.
water	115:50	0:0	2	frame_mbs_only_flag
water	115:69	0:0	2	)
water	115:70	0:0	2	;
water	117:4	0:0	2	h
op	117:5	0:0	2	->
water	117:7	0:0	2	b_stride
op	117:16	0:0	2	=
water	117:18	0:0	2	s
op	117:19	0:0	2	->
water	117:21	0:0	2	mb_width
op	117:30	0:0	2	*
water	117:32	0:0	2	4
water	117:33	0:0	2	;
water	119:4	0:0	2	s
op	119:5	0:0	2	->
water	119:7	0:0	2	chroma_y_shift
op	119:22	0:0	2	=
water	119:24	0:0	2	h
op	119:25	0:0	2	->
water	119:27	0:0	2	sps
op	119:30	0:0	2	.
water	119:31	0:0	2	chroma_format_idc
op	119:49	0:0	2	<=
water	119:52	0:0	2	1
water	119:53	0:0	2	;
water	121:4	0:0	2	s
op	121:5	0:0	2	->
water	121:7	0:0	2	width
op	121:14	0:0	2	=
water	121:16	0:0	2	16
op	121:19	0:0	2	*
water	121:21	0:0	2	s
op	121:22	0:0	2	->
water	121:24	0:0	2	mb_width
water	121:32	0:0	2	;
water	122:4	0:0	2	s
op	122:5	0:0	2	->
water	122:7	0:0	2	height
op	122:14	0:0	2	=
water	122:16	0:0	2	16
op	122:19	0:0	2	*
water	122:21	0:0	2	s
op	122:22	0:0	2	->
water	122:24	0:0	2	mb_height
water	122:33	0:0	2	;
if	124:4	130:4	2	(must_reinit)
cond	124:7	124:7	3	must_reinit
water	124:7	0:0	4	must_reinit
stmts	124:20	130:4	3	
water	124:20	0:0	4	{
call	125:8	125:24	4	free_tables
arg	125:20	125:21	5	h
water	125:20	0:0	6	h
arg	125:23	125:24	5	0
water	125:23	0:0	6	0
water	125:25	0:0	4	;
call	126:8	126:26	4	flush_dpb
arg	126:18	126:26	5	s->avctx
water	126:18	0:0	6	s
op	126:19	0:0	6	->
water	126:21	0:0	6	avctx
water	126:27	0:0	4	;
call	127:8	127:27	4	ff_MPV_common_end
arg	127:26	127:27	5	s
water	127:26	0:0	6	s
water	127:28	0:0	4	;
water	128:8	0:0	4	h
op	128:9	0:0	4	->
water	128:11	0:0	4	list_count
op	128:22	0:0	4	=
water	128:24	0:0	4	0
water	128:25	0:0	4	;
water	129:8	0:0	4	h
op	129:9	0:0	4	->
water	129:11	0:0	4	current_slice
op	129:25	0:0	4	=
water	129:27	0:0	4	0
water	129:28	0:0	4	;
water	130:4	0:0	4	}
if	131:4	316:4	2	(! s -> context_initialized)
cond	131:8	131:12	3	! s -> context_initialized
op	131:8	0:0	4	!
water	131:9	0:0	4	s
op	131:10	0:0	4	->
water	131:12	0:0	4	context_initialized
stmts	131:33	316:4	3	
water	131:33	0:0	4	{
if	132:8	136:8	4	(h != h0)
cond	132:12	132:17	5	h != h0
water	132:12	0:0	6	h
op	132:14	0:0	6	!=
water	132:17	0:0	6	h0
stmts	132:21	136:8	5	
water	132:21	0:0	6	{
call	133:12	134:79	6	av_log
arg	133:19	133:29	7	h->s.avctx
water	133:19	0:0	8	h
op	133:20	0:0	8	->
water	133:22	0:0	8	s
op	133:23	0:0	8	.
water	133:24	0:0	8	avctx
arg	133:31	133:43	7	AV_LOG_ERROR
water	133:31	0:0	8	AV_LOG_ERROR
arg	134:19	134:79	7	"Cannot (re-)initialize context during parallel decoding.\n"
water	134:19	0:0	8	"Cannot (re-)initialize context during parallel decoding.\n"
water	134:80	0:0	6	;
return	135:12	135:21	6	-1
op	135:19	0:0	7	-
water	135:20	0:0	7	1
water	136:8	0:0	6	}
if	137:8	145:8	4	(FFALIGN (s -> avctx -> width ,16 ) == s -> width &&FFALIGN (s -> avctx -> height ,16 * ( 2 - h -> sps . frame_mbs_only_flag ) ) == s -> height && ! h -> sps . crop_right && ! h -> sps . crop_bottom && ( s -> avctx -> width != s -> width || s -> avctx -> height && s -> height ))
cond	137:14	140:75	5	FFALIGN (s -> avctx -> width ,16 ) == s -> width &&FFALIGN (s -> avctx -> height ,16 * ( 2 - h -> sps . frame_mbs_only_flag ) ) == s -> height && ! h -> sps . crop_right && ! h -> sps . crop_bottom && ( s -> avctx -> width != s -> width || s -> avctx -> height && s -> height )
call	137:14	137:75	6	FFALIGN
arg	137:22	137:38	7	s->avctx->width
water	137:22	0:0	8	s
op	137:23	0:0	8	->
water	137:25	0:0	8	avctx
op	137:30	0:0	8	->
water	137:32	0:0	8	width
arg	137:40	137:75	7	16
water	137:40	0:0	8	16
op	137:77	0:0	6	==
water	137:80	0:0	6	s
op	137:81	0:0	6	->
water	137:83	0:0	6	width
op	138:11	0:0	6	&&
call	138:14	138:75	6	FFALIGN
arg	138:22	138:38	7	s->avctx->height
water	138:22	0:0	8	s
op	138:23	0:0	8	->
water	138:25	0:0	8	avctx
op	138:30	0:0	8	->
water	138:32	0:0	8	height
arg	138:40	138:75	7	16*(2-h->sps.frame_mbs_only_flag)
water	138:40	0:0	8	16
op	138:42	0:0	8	*
water	138:43	0:0	8	(
water	138:44	0:0	8	2
op	138:46	0:0	8	-
water	138:48	0:0	8	h
op	138:49	0:0	8	->
water	138:51	0:0	8	sps
op	138:54	0:0	8	.
water	138:55	0:0	8	frame_mbs_only_flag
water	138:74	0:0	8	)
op	138:77	0:0	6	==
water	138:80	0:0	6	s
op	138:81	0:0	6	->
water	138:83	0:0	6	height
op	139:11	0:0	6	&&
op	139:14	0:0	6	!
water	139:15	0:0	6	h
op	139:16	0:0	6	->
water	139:18	0:0	6	sps
op	139:21	0:0	6	.
water	139:22	0:0	6	crop_right
op	139:33	0:0	6	&&
op	139:36	0:0	6	!
water	139:37	0:0	6	h
op	139:38	0:0	6	->
water	139:40	0:0	6	sps
op	139:43	0:0	6	.
water	139:44	0:0	6	crop_bottom
op	140:11	0:0	6	&&
water	140:14	0:0	6	(
water	140:15	0:0	6	s
op	140:16	0:0	6	->
water	140:18	0:0	6	avctx
op	140:23	0:0	6	->
water	140:25	0:0	6	width
op	140:31	0:0	6	!=
water	140:34	0:0	6	s
op	140:35	0:0	6	->
water	140:37	0:0	6	width
op	140:43	0:0	6	||
water	140:46	0:0	6	s
op	140:47	0:0	6	->
water	140:49	0:0	6	avctx
op	140:54	0:0	6	->
water	140:56	0:0	6	height
op	140:63	0:0	6	&&
water	140:66	0:0	6	s
op	140:67	0:0	6	->
water	140:69	0:0	6	height
water	140:75	0:0	6	)
stmts	141:10	145:8	5	
water	141:10	0:0	6	{
call	142:12	142:85	6	av_log
arg	142:19	142:29	7	h->s.avctx
water	142:19	0:0	8	h
op	142:20	0:0	8	->
water	142:22	0:0	8	s
op	142:23	0:0	8	.
water	142:24	0:0	8	avctx
arg	142:31	142:43	7	AV_LOG_DEBUG
water	142:31	0:0	8	AV_LOG_DEBUG
arg	142:45	142:85	7	"Using externally provided dimensions\n"
water	142:45	0:0	8	"Using externally provided dimensions\n"
water	142:86	0:0	6	;
water	143:12	0:0	6	s
op	143:13	0:0	6	->
water	143:15	0:0	6	avctx
op	143:20	0:0	6	->
water	143:22	0:0	6	coded_width
op	143:35	0:0	6	=
water	143:37	0:0	6	s
op	143:38	0:0	6	->
water	143:40	0:0	6	width
water	143:45	0:0	6	;
water	144:12	0:0	6	s
op	144:13	0:0	6	->
water	144:15	0:0	6	avctx
op	144:20	0:0	6	->
water	144:22	0:0	6	coded_height
op	144:35	0:0	6	=
water	144:37	0:0	6	s
op	144:38	0:0	6	->
water	144:40	0:0	6	height
water	144:46	0:0	6	;
water	145:8	0:0	6	}
else	145:10	149:8	4
stmts	145:14	149:8	5	
water	145:14	0:0	6	{
call	146:12	146:64	6	avcodec_set_dimensions
arg	146:35	146:43	7	s->avctx
water	146:35	0:0	8	s
op	146:36	0:0	8	->
water	146:38	0:0	8	avctx
arg	146:45	146:53	7	s->width
water	146:45	0:0	8	s
op	146:46	0:0	8	->
water	146:48	0:0	8	width
arg	146:55	146:64	7	s->height
water	146:55	0:0	8	s
op	146:56	0:0	8	->
water	146:58	0:0	8	height
water	146:65	0:0	6	;
water	147:12	0:0	6	s
op	147:13	0:0	6	->
water	147:15	0:0	6	avctx
op	147:20	0:0	6	->
water	147:22	0:0	6	width
op	147:29	0:0	6	-=
water	147:32	0:0	6	(
water	147:33	0:0	6	2
op	147:34	0:0	6	>>
water	147:36	0:0	6	CHROMA444
water	147:45	0:0	6	)
call	147:46	147:88	6	*FFMIN
arg	147:53	147:70	7	h->sps.crop_right
water	147:53	0:0	8	h
op	147:54	0:0	8	->
water	147:56	0:0	8	sps
op	147:59	0:0	8	.
water	147:60	0:0	8	crop_right
arg	147:72	147:88	7	(8<<CHROMA444)-1
water	147:72	0:0	8	(
water	147:73	0:0	8	8
op	147:74	0:0	8	<<
water	147:76	0:0	8	CHROMA444
water	147:85	0:0	8	)
op	147:86	0:0	8	-
water	147:87	0:0	8	1
water	147:89	0:0	6	;
water	148:12	0:0	6	s
op	148:13	0:0	6	->
water	148:15	0:0	6	avctx
op	148:20	0:0	6	->
water	148:22	0:0	6	height
op	148:29	0:0	6	-=
water	148:32	0:0	6	(
water	148:33	0:0	6	1
op	148:34	0:0	6	<<
water	148:36	0:0	6	s
op	148:37	0:0	6	->
water	148:39	0:0	6	chroma_y_shift
water	148:53	0:0	6	)
call	148:54	148:106	6	*FFMIN
arg	148:61	148:79	7	h->sps.crop_bottom
water	148:61	0:0	8	h
op	148:62	0:0	8	->
water	148:64	0:0	8	sps
op	148:67	0:0	8	.
water	148:68	0:0	8	crop_bottom
arg	148:81	148:106	7	(16>>s->chroma_y_shift)-1
water	148:81	0:0	8	(
water	148:82	0:0	8	16
op	148:84	0:0	8	>>
water	148:86	0:0	8	s
op	148:87	0:0	8	->
water	148:89	0:0	8	chroma_y_shift
water	148:103	0:0	8	)
op	148:104	0:0	8	-
water	148:105	0:0	8	1
op	148:108	0:0	6	*
water	148:110	0:0	6	(
water	148:111	0:0	6	2
op	148:113	0:0	6	-
water	148:115	0:0	6	h
op	148:116	0:0	6	->
water	148:118	0:0	6	sps
op	148:121	0:0	6	.
water	148:122	0:0	6	frame_mbs_only_flag
water	148:141	0:0	6	)
water	148:142	0:0	6	;
water	149:8	0:0	6	}
water	150:8	0:0	4	s
op	150:9	0:0	4	->
water	150:11	0:0	4	avctx
op	150:16	0:0	4	->
water	150:18	0:0	4	sample_aspect_ratio
op	150:38	0:0	4	=
water	150:40	0:0	4	h
op	150:41	0:0	4	->
water	150:43	0:0	4	sps
op	150:46	0:0	4	.
water	150:47	0:0	4	sar
water	150:50	0:0	4	;
call	151:8	151:52	4	av_assert0
arg	151:19	151:52	5	s->avctx->sample_aspect_ratio.den
water	151:19	0:0	6	s
op	151:20	0:0	6	->
water	151:22	0:0	6	avctx
op	151:27	0:0	6	->
water	151:29	0:0	6	sample_aspect_ratio
op	151:48	0:0	6	.
water	151:49	0:0	6	den
water	151:53	0:0	4	;
if	153:8	160:8	4	(s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU && ( h -> sps . bit_depth_luma != 8 || h -> sps . chroma_format_idc > 1 ))
cond	153:12	155:44	5	s -> avctx -> codec -> capabilities & CODEC_CAP_HWACCEL_VDPAU && ( h -> sps . bit_depth_luma != 8 || h -> sps . chroma_format_idc > 1 )
water	153:12	0:0	6	s
op	153:13	0:0	6	->
water	153:15	0:0	6	avctx
op	153:20	0:0	6	->
water	153:22	0:0	6	codec
op	153:27	0:0	6	->
water	153:29	0:0	6	capabilities
op	153:42	0:0	6	&
water	153:44	0:0	6	CODEC_CAP_HWACCEL_VDPAU
op	154:12	0:0	6	&&
water	154:15	0:0	6	(
water	154:16	0:0	6	h
op	154:17	0:0	6	->
water	154:19	0:0	6	sps
op	154:22	0:0	6	.
water	154:23	0:0	6	bit_depth_luma
op	154:38	0:0	6	!=
water	154:41	0:0	6	8
op	154:43	0:0	6	||
water	155:16	0:0	6	h
op	155:17	0:0	6	->
water	155:19	0:0	6	sps
op	155:22	0:0	6	.
water	155:23	0:0	6	chroma_format_idc
op	155:41	0:0	6	>
water	155:43	0:0	6	1
water	155:44	0:0	6	)
stmts	155:47	160:8	5	
water	155:47	0:0	6	{
call	156:12	158:33	6	av_log
arg	156:19	156:27	7	s->avctx
water	156:19	0:0	8	s
op	156:20	0:0	8	->
water	156:22	0:0	8	avctx
arg	156:29	156:41	7	AV_LOG_ERROR
water	156:29	0:0	8	AV_LOG_ERROR
arg	157:19	158:33	7	"VDPAU decoding does not support video ""colorspace\n"
water	157:19	0:0	8	"VDPAU decoding does not support video "
water	158:19	0:0	8	"colorspace\n"
water	158:34	0:0	6	;
return	159:12	159:21	6	-1
op	159:19	0:0	7	-
water	159:20	0:0	7	1
water	160:8	0:0	6	}
if	162:8	179:8	4	(s -> avctx -> bits_per_raw_sample != h -> sps . bit_depth_luma || h -> cur_chroma_format_idc != h -> sps . chroma_format_idc)
cond	162:12	163:47	5	s -> avctx -> bits_per_raw_sample != h -> sps . bit_depth_luma || h -> cur_chroma_format_idc != h -> sps . chroma_format_idc
water	162:12	0:0	6	s
op	162:13	0:0	6	->
water	162:15	0:0	6	avctx
op	162:20	0:0	6	->
water	162:22	0:0	6	bits_per_raw_sample
op	162:42	0:0	6	!=
water	162:45	0:0	6	h
op	162:46	0:0	6	->
water	162:48	0:0	6	sps
op	162:51	0:0	6	.
water	162:52	0:0	6	bit_depth_luma
op	162:67	0:0	6	||
water	163:12	0:0	6	h
op	163:13	0:0	6	->
water	163:15	0:0	6	cur_chroma_format_idc
op	163:37	0:0	6	!=
water	163:40	0:0	6	h
op	163:41	0:0	6	->
water	163:43	0:0	6	sps
op	163:46	0:0	6	.
water	163:47	0:0	6	chroma_format_idc
stmts	163:66	179:8	5	
water	163:66	0:0	6	{
if	164:12	174:12	6	(h -> sps . bit_depth_luma >= 8 && h -> sps . bit_depth_luma <= 14 && h -> sps . bit_depth_luma != 11 && h -> sps . bit_depth_luma != 13 && ( h -> sps . bit_depth_luma != 9 || ! CHROMA422 ))
cond	164:16	165:57	7	h -> sps . bit_depth_luma >= 8 && h -> sps . bit_depth_luma <= 14 && h -> sps . bit_depth_luma != 11 && h -> sps . bit_depth_luma != 13 && ( h -> sps . bit_depth_luma != 9 || ! CHROMA422 )
water	164:16	0:0	8	h
op	164:17	0:0	8	->
water	164:19	0:0	8	sps
op	164:22	0:0	8	.
water	164:23	0:0	8	bit_depth_luma
op	164:38	0:0	8	>=
water	164:41	0:0	8	8
op	164:43	0:0	8	&&
water	164:46	0:0	8	h
op	164:47	0:0	8	->
water	164:49	0:0	8	sps
op	164:52	0:0	8	.
water	164:53	0:0	8	bit_depth_luma
op	164:68	0:0	8	<=
water	164:71	0:0	8	14
op	164:74	0:0	8	&&
water	164:77	0:0	8	h
op	164:78	0:0	8	->
water	164:80	0:0	8	sps
op	164:83	0:0	8	.
water	164:84	0:0	8	bit_depth_luma
op	164:99	0:0	8	!=
water	164:102	0:0	8	11
op	164:105	0:0	8	&&
water	164:108	0:0	8	h
op	164:109	0:0	8	->
water	164:111	0:0	8	sps
op	164:114	0:0	8	.
water	164:115	0:0	8	bit_depth_luma
op	164:130	0:0	8	!=
water	164:133	0:0	8	13
op	164:136	0:0	8	&&
water	165:16	0:0	8	(
water	165:17	0:0	8	h
op	165:18	0:0	8	->
water	165:20	0:0	8	sps
op	165:23	0:0	8	.
water	165:24	0:0	8	bit_depth_luma
op	165:39	0:0	8	!=
water	165:42	0:0	8	9
op	165:44	0:0	8	||
op	165:47	0:0	8	!
water	165:48	0:0	8	CHROMA422
water	165:57	0:0	8	)
stmts	165:60	174:12	7	
water	165:60	0:0	8	{
water	166:16	0:0	8	s
op	166:17	0:0	8	->
water	166:19	0:0	8	avctx
op	166:24	0:0	8	->
water	166:26	0:0	8	bits_per_raw_sample
op	166:46	0:0	8	=
water	166:48	0:0	8	h
op	166:49	0:0	8	->
water	166:51	0:0	8	sps
op	166:54	0:0	8	.
water	166:55	0:0	8	bit_depth_luma
water	166:69	0:0	8	;
water	167:16	0:0	8	h
op	167:17	0:0	8	->
water	167:19	0:0	8	cur_chroma_format_idc
op	167:41	0:0	8	=
water	167:43	0:0	8	h
op	167:44	0:0	8	->
water	167:46	0:0	8	sps
op	167:49	0:0	8	.
water	167:50	0:0	8	chroma_format_idc
water	167:67	0:0	8	;
water	168:16	0:0	8	h
op	168:17	0:0	8	->
water	168:19	0:0	8	pixel_shift
op	168:31	0:0	8	=
water	168:33	0:0	8	h
op	168:34	0:0	8	->
water	168:36	0:0	8	sps
op	168:39	0:0	8	.
water	168:40	0:0	8	bit_depth_luma
op	168:55	0:0	8	>
water	168:57	0:0	8	8
water	168:58	0:0	8	;
call	170:16	170:92	8	ff_h264dsp_init
arg	170:32	170:43	9	&h->h264dsp
op	170:32	0:0	10	&
water	170:33	0:0	10	h
op	170:34	0:0	10	->
water	170:36	0:0	10	h264dsp
arg	170:45	170:66	9	h->sps.bit_depth_luma
water	170:45	0:0	10	h
op	170:46	0:0	10	->
water	170:48	0:0	10	sps
op	170:51	0:0	10	.
water	170:52	0:0	10	bit_depth_luma
arg	170:68	170:92	9	h->sps.chroma_format_idc
water	170:68	0:0	10	h
op	170:69	0:0	10	->
water	170:71	0:0	10	sps
op	170:74	0:0	10	.
water	170:75	0:0	10	chroma_format_idc
water	170:93	0:0	8	;
call	171:16	171:103	8	ff_h264_pred_init
arg	171:34	171:41	9	&h->hpc
op	171:34	0:0	10	&
water	171:35	0:0	10	h
op	171:36	0:0	10	->
water	171:38	0:0	10	hpc
arg	171:43	171:54	9	s->codec_id
water	171:43	0:0	10	s
op	171:44	0:0	10	->
water	171:46	0:0	10	codec_id
arg	171:56	171:77	9	h->sps.bit_depth_luma
water	171:56	0:0	10	h
op	171:57	0:0	10	->
water	171:59	0:0	10	sps
op	171:62	0:0	10	.
water	171:63	0:0	10	bit_depth_luma
arg	171:79	171:103	9	h->sps.chroma_format_idc
water	171:79	0:0	10	h
op	171:80	0:0	10	->
water	171:82	0:0	10	sps
op	171:85	0:0	10	.
water	171:86	0:0	10	chroma_format_idc
water	171:104	0:0	8	;
water	172:16	0:0	8	s
op	172:17	0:0	8	->
water	172:19	0:0	8	dsp
op	172:22	0:0	8	.
water	172:23	0:0	8	dct_bits
op	172:32	0:0	8	=
water	172:34	0:0	8	h
op	172:35	0:0	8	->
water	172:37	0:0	8	sps
op	172:40	0:0	8	.
water	172:41	0:0	8	bit_depth_luma
op	172:56	0:0	8	>
water	172:58	0:0	8	8
water	172:60	0:0	8	?
water	172:62	0:0	8	32
water	172:65	0:0	8	:
water	172:67	0:0	8	16
water	172:69	0:0	8	;
call	173:16	173:49	8	ff_dsputil_init
arg	173:32	173:39	9	&s->dsp
op	173:32	0:0	10	&
water	173:33	0:0	10	s
op	173:34	0:0	10	->
water	173:36	0:0	10	dsp
arg	173:41	173:49	9	s->avctx
water	173:41	0:0	10	s
op	173:42	0:0	10	->
water	173:44	0:0	10	avctx
water	173:50	0:0	8	;
water	174:12	0:0	8	}
else	174:14	178:12	6
stmts	174:19	178:12	7	
water	174:19	0:0	8	{
call	175:16	176:70	8	av_log
arg	175:23	175:31	9	s->avctx
water	175:23	0:0	10	s
op	175:24	0:0	10	->
water	175:26	0:0	10	avctx
arg	175:33	175:45	9	AV_LOG_ERROR
water	175:33	0:0	10	AV_LOG_ERROR
arg	175:47	175:91	9	"Unsupported bit depth: %d chroma_idc: %d\n"
water	175:47	0:0	10	"Unsupported bit depth: %d chroma_idc: %d\n"
arg	176:23	176:44	9	h->sps.bit_depth_luma
water	176:23	0:0	10	h
op	176:24	0:0	10	->
water	176:26	0:0	10	sps
op	176:29	0:0	10	.
water	176:30	0:0	10	bit_depth_luma
arg	176:46	176:70	9	h->sps.chroma_format_idc
water	176:46	0:0	10	h
op	176:47	0:0	10	->
water	176:49	0:0	10	sps
op	176:52	0:0	10	.
water	176:53	0:0	10	chroma_format_idc
water	176:71	0:0	8	;
return	177:16	177:25	8	-1
op	177:23	0:0	9	-
water	177:24	0:0	9	1
water	178:12	0:0	8	}
water	179:8	0:0	6	}
if	181:8	189:8	4	(h -> sps . video_signal_type_present_flag)
cond	181:12	181:19	5	h -> sps . video_signal_type_present_flag
water	181:12	0:0	6	h
op	181:13	0:0	6	->
water	181:15	0:0	6	sps
op	181:18	0:0	6	.
water	181:19	0:0	6	video_signal_type_present_flag
stmts	181:51	189:8	5	
water	181:51	0:0	6	{
water	182:12	0:0	6	s
op	182:13	0:0	6	->
water	182:15	0:0	6	avctx
op	182:20	0:0	6	->
water	182:22	0:0	6	color_range
op	182:34	0:0	6	=
water	182:36	0:0	6	h
op	182:37	0:0	6	->
water	182:39	0:0	6	sps
op	182:42	0:0	6	.
water	182:43	0:0	6	full_range
op	182:53	0:0	6	>
water	182:54	0:0	6	0
water	182:56	0:0	6	?
water	182:58	0:0	6	AVCOL_RANGE_JPEG
water	183:54	0:0	6	:
water	183:56	0:0	6	AVCOL_RANGE_MPEG
water	183:72	0:0	6	;
if	184:12	188:12	6	(h -> sps . colour_description_present_flag)
cond	184:16	184:23	7	h -> sps . colour_description_present_flag
water	184:16	0:0	8	h
op	184:17	0:0	8	->
water	184:19	0:0	8	sps
op	184:22	0:0	8	.
water	184:23	0:0	8	colour_description_present_flag
stmts	184:56	188:12	7	
water	184:56	0:0	8	{
water	185:16	0:0	8	s
op	185:17	0:0	8	->
water	185:19	0:0	8	avctx
op	185:24	0:0	8	->
water	185:26	0:0	8	color_primaries
op	185:42	0:0	8	=
water	185:44	0:0	8	h
op	185:45	0:0	8	->
water	185:47	0:0	8	sps
op	185:50	0:0	8	.
water	185:51	0:0	8	color_primaries
water	185:66	0:0	8	;
water	186:16	0:0	8	s
op	186:17	0:0	8	->
water	186:19	0:0	8	avctx
op	186:24	0:0	8	->
water	186:26	0:0	8	color_trc
op	186:42	0:0	8	=
water	186:44	0:0	8	h
op	186:45	0:0	8	->
water	186:47	0:0	8	sps
op	186:50	0:0	8	.
water	186:51	0:0	8	color_trc
water	186:60	0:0	8	;
water	187:16	0:0	8	s
op	187:17	0:0	8	->
water	187:19	0:0	8	avctx
op	187:24	0:0	8	->
water	187:26	0:0	8	colorspace
op	187:42	0:0	8	=
water	187:44	0:0	8	h
op	187:45	0:0	8	->
water	187:47	0:0	8	sps
op	187:50	0:0	8	.
water	187:51	0:0	8	colorspace
water	187:61	0:0	8	;
water	188:12	0:0	8	}
water	189:8	0:0	6	}
if	191:8	197:8	4	(h -> sps . timing_info_present_flag)
cond	191:12	191:19	5	h -> sps . timing_info_present_flag
water	191:12	0:0	6	h
op	191:13	0:0	6	->
water	191:15	0:0	6	sps
op	191:18	0:0	6	.
water	191:19	0:0	6	timing_info_present_flag
stmts	191:45	197:8	5	
water	191:45	0:0	6	{
decl	192:12	192:43	6	int64_t	den
op	192:24	0:0	6	=
water	192:26	0:0	6	h
op	192:27	0:0	6	->
water	192:29	0:0	6	sps
op	192:32	0:0	6	.
water	192:33	0:0	6	time_scale
if	193:12	194:24	6	(h -> x264_build < 44 U)
cond	193:16	193:34	7	h -> x264_build < 44 U
water	193:16	0:0	8	h
op	193:17	0:0	8	->
water	193:19	0:0	8	x264_build
op	193:30	0:0	8	<
water	193:32	0:0	8	44
water	193:34	0:0	8	U
stmts	194:16	194:24	7	
water	194:16	0:0	8	den
op	194:20	0:0	8	*=
water	194:23	0:0	8	2
water	194:24	0:0	8	;
call	195:12	196:60	6	av_reduce
arg	195:22	195:46	7	&s->avctx->time_base.num
op	195:22	0:0	8	&
water	195:23	0:0	8	s
op	195:24	0:0	8	->
water	195:26	0:0	8	avctx
op	195:31	0:0	8	->
water	195:33	0:0	8	time_base
op	195:42	0:0	8	.
water	195:43	0:0	8	num
arg	195:48	195:72	7	&s->avctx->time_base.den
op	195:48	0:0	8	&
water	195:49	0:0	8	s
op	195:50	0:0	8	->
water	195:52	0:0	8	avctx
op	195:57	0:0	8	->
water	195:59	0:0	8	time_base
op	195:68	0:0	8	.
water	195:69	0:0	8	den
arg	196:22	196:46	7	h->sps.num_units_in_tick
water	196:22	0:0	8	h
op	196:23	0:0	8	->
water	196:25	0:0	8	sps
op	196:28	0:0	8	.
water	196:29	0:0	8	num_units_in_tick
arg	196:48	196:51	7	den
water	196:48	0:0	8	den
arg	196:53	196:60	7	1<<30
water	196:53	0:0	8	1
op	196:55	0:0	8	<<
water	196:58	0:0	8	30
water	196:61	0:0	6	;
water	197:8	0:0	6	}
switch	199:8	270:8	4	(h -> sps . bit_depth_luma)
cond	199:16	199:23	5	h -> sps . bit_depth_luma
water	199:16	0:0	6	h
op	199:17	0:0	6	->
water	199:19	0:0	6	sps
op	199:22	0:0	6	.
water	199:23	0:0	6	bit_depth_luma
stmts	199:39	270:8	5	
water	199:39	0:0	6	{
label	200:8	200:14	6	case 9 :
if	201:12	206:12	6	(CHROMA444)
cond	201:16	201:16	7	CHROMA444
water	201:16	0:0	8	CHROMA444
stmts	201:27	206:12	7	
water	201:27	0:0	8	{
if	202:16	204:16	8	(s -> avctx -> colorspace == AVCOL_SPC_RGB)
cond	202:20	202:44	9	s -> avctx -> colorspace == AVCOL_SPC_RGB
water	202:20	0:0	10	s
op	202:21	0:0	10	->
water	202:23	0:0	10	avctx
op	202:28	0:0	10	->
water	202:30	0:0	10	colorspace
op	202:41	0:0	10	==
water	202:44	0:0	10	AVCOL_SPC_RGB
stmts	202:59	204:16	9	
water	202:59	0:0	10	{
water	203:20	0:0	10	s
op	203:21	0:0	10	->
water	203:23	0:0	10	avctx
op	203:28	0:0	10	->
water	203:30	0:0	10	pix_fmt
op	203:38	0:0	10	=
water	203:40	0:0	10	PIX_FMT_GBRP9
water	203:53	0:0	10	;
water	204:16	0:0	10	}
else	204:18	205:56	8
stmts	205:20	205:56	9	
water	205:20	0:0	10	s
op	205:21	0:0	10	->
water	205:23	0:0	10	avctx
op	205:28	0:0	10	->
water	205:30	0:0	10	pix_fmt
op	205:38	0:0	10	=
water	205:40	0:0	10	PIX_FMT_YUV444P9
water	205:56	0:0	10	;
water	206:12	0:0	8	}
else	206:14	207:52	6
stmts	206:19	207:52	7	
if	206:19	207:52	8	(CHROMA422)
cond	206:23	206:23	9	CHROMA422
water	206:23	0:0	10	CHROMA422
stmts	207:16	207:52	9	
water	207:16	0:0	10	s
op	207:17	0:0	10	->
water	207:19	0:0	10	avctx
op	207:24	0:0	10	->
water	207:26	0:0	10	pix_fmt
op	207:34	0:0	10	=
water	207:36	0:0	10	PIX_FMT_YUV422P9
water	207:52	0:0	10	;
else	208:12	209:52	6
stmts	209:16	209:52	7	
water	209:16	0:0	8	s
op	209:17	0:0	8	->
water	209:19	0:0	8	avctx
op	209:24	0:0	8	->
water	209:26	0:0	8	pix_fmt
op	209:34	0:0	8	=
water	209:36	0:0	8	PIX_FMT_YUV420P9
water	209:52	0:0	8	;
break	210:12	210:17	6	
label	211:8	211:15	6	case 10 :
if	212:12	217:12	6	(CHROMA444)
cond	212:16	212:16	7	CHROMA444
water	212:16	0:0	8	CHROMA444
stmts	212:27	217:12	7	
water	212:27	0:0	8	{
if	213:16	215:16	8	(s -> avctx -> colorspace == AVCOL_SPC_RGB)
cond	213:20	213:44	9	s -> avctx -> colorspace == AVCOL_SPC_RGB
water	213:20	0:0	10	s
op	213:21	0:0	10	->
water	213:23	0:0	10	avctx
op	213:28	0:0	10	->
water	213:30	0:0	10	colorspace
op	213:41	0:0	10	==
water	213:44	0:0	10	AVCOL_SPC_RGB
stmts	213:59	215:16	9	
water	213:59	0:0	10	{
water	214:20	0:0	10	s
op	214:21	0:0	10	->
water	214:23	0:0	10	avctx
op	214:28	0:0	10	->
water	214:30	0:0	10	pix_fmt
op	214:38	0:0	10	=
water	214:40	0:0	10	PIX_FMT_GBRP10
water	214:54	0:0	10	;
water	215:16	0:0	10	}
else	215:18	216:57	8
stmts	216:20	216:57	9	
water	216:20	0:0	10	s
op	216:21	0:0	10	->
water	216:23	0:0	10	avctx
op	216:28	0:0	10	->
water	216:30	0:0	10	pix_fmt
op	216:38	0:0	10	=
water	216:40	0:0	10	PIX_FMT_YUV444P10
water	216:57	0:0	10	;
water	217:12	0:0	8	}
else	217:14	218:53	6
stmts	217:19	218:53	7	
if	217:19	218:53	8	(CHROMA422)
cond	217:23	217:23	9	CHROMA422
water	217:23	0:0	10	CHROMA422
stmts	218:16	218:53	9	
water	218:16	0:0	10	s
op	218:17	0:0	10	->
water	218:19	0:0	10	avctx
op	218:24	0:0	10	->
water	218:26	0:0	10	pix_fmt
op	218:34	0:0	10	=
water	218:36	0:0	10	PIX_FMT_YUV422P10
water	218:53	0:0	10	;
else	219:12	220:53	6
stmts	220:16	220:53	7	
water	220:16	0:0	8	s
op	220:17	0:0	8	->
water	220:19	0:0	8	avctx
op	220:24	0:0	8	->
water	220:26	0:0	8	pix_fmt
op	220:34	0:0	8	=
water	220:36	0:0	8	PIX_FMT_YUV420P10
water	220:53	0:0	8	;
break	221:12	221:17	6	
label	222:8	222:15	6	case 12 :
if	223:12	228:12	6	(CHROMA444)
cond	223:16	223:16	7	CHROMA444
water	223:16	0:0	8	CHROMA444
stmts	223:27	228:12	7	
water	223:27	0:0	8	{
if	224:16	226:16	8	(s -> avctx -> colorspace == AVCOL_SPC_RGB)
cond	224:20	224:44	9	s -> avctx -> colorspace == AVCOL_SPC_RGB
water	224:20	0:0	10	s
op	224:21	0:0	10	->
water	224:23	0:0	10	avctx
op	224:28	0:0	10	->
water	224:30	0:0	10	colorspace
op	224:41	0:0	10	==
water	224:44	0:0	10	AVCOL_SPC_RGB
stmts	224:59	226:16	9	
water	224:59	0:0	10	{
water	225:20	0:0	10	s
op	225:21	0:0	10	->
water	225:23	0:0	10	avctx
op	225:28	0:0	10	->
water	225:30	0:0	10	pix_fmt
op	225:38	0:0	10	=
water	225:40	0:0	10	PIX_FMT_GBRP12
water	225:54	0:0	10	;
water	226:16	0:0	10	}
else	226:18	227:57	8
stmts	227:20	227:57	9	
water	227:20	0:0	10	s
op	227:21	0:0	10	->
water	227:23	0:0	10	avctx
op	227:28	0:0	10	->
water	227:30	0:0	10	pix_fmt
op	227:38	0:0	10	=
water	227:40	0:0	10	PIX_FMT_YUV444P12
water	227:57	0:0	10	;
water	228:12	0:0	8	}
else	228:14	229:53	6
stmts	228:19	229:53	7	
if	228:19	229:53	8	(CHROMA422)
cond	228:23	228:23	9	CHROMA422
water	228:23	0:0	10	CHROMA422
stmts	229:16	229:53	9	
water	229:16	0:0	10	s
op	229:17	0:0	10	->
water	229:19	0:0	10	avctx
op	229:24	0:0	10	->
water	229:26	0:0	10	pix_fmt
op	229:34	0:0	10	=
water	229:36	0:0	10	PIX_FMT_YUV422P12
water	229:53	0:0	10	;
else	230:12	231:53	6
stmts	231:16	231:53	7	
water	231:16	0:0	8	s
op	231:17	0:0	8	->
water	231:19	0:0	8	avctx
op	231:24	0:0	8	->
water	231:26	0:0	8	pix_fmt
op	231:34	0:0	8	=
water	231:36	0:0	8	PIX_FMT_YUV420P12
water	231:53	0:0	8	;
break	232:12	232:17	6	
label	233:8	233:15	6	case 14 :
if	234:12	239:12	6	(CHROMA444)
cond	234:16	234:16	7	CHROMA444
water	234:16	0:0	8	CHROMA444
stmts	234:27	239:12	7	
water	234:27	0:0	8	{
if	235:16	237:16	8	(s -> avctx -> colorspace == AVCOL_SPC_RGB)
cond	235:20	235:44	9	s -> avctx -> colorspace == AVCOL_SPC_RGB
water	235:20	0:0	10	s
op	235:21	0:0	10	->
water	235:23	0:0	10	avctx
op	235:28	0:0	10	->
water	235:30	0:0	10	colorspace
op	235:41	0:0	10	==
water	235:44	0:0	10	AVCOL_SPC_RGB
stmts	235:59	237:16	9	
water	235:59	0:0	10	{
water	236:20	0:0	10	s
op	236:21	0:0	10	->
water	236:23	0:0	10	avctx
op	236:28	0:0	10	->
water	236:30	0:0	10	pix_fmt
op	236:38	0:0	10	=
water	236:40	0:0	10	PIX_FMT_GBRP14
water	236:54	0:0	10	;
water	237:16	0:0	10	}
else	237:18	238:57	8
stmts	238:20	238:57	9	
water	238:20	0:0	10	s
op	238:21	0:0	10	->
water	238:23	0:0	10	avctx
op	238:28	0:0	10	->
water	238:30	0:0	10	pix_fmt
op	238:38	0:0	10	=
water	238:40	0:0	10	PIX_FMT_YUV444P14
water	238:57	0:0	10	;
water	239:12	0:0	8	}
else	239:14	240:53	6
stmts	239:19	240:53	7	
if	239:19	240:53	8	(CHROMA422)
cond	239:23	239:23	9	CHROMA422
water	239:23	0:0	10	CHROMA422
stmts	240:16	240:53	9	
water	240:16	0:0	10	s
op	240:17	0:0	10	->
water	240:19	0:0	10	avctx
op	240:24	0:0	10	->
water	240:26	0:0	10	pix_fmt
op	240:34	0:0	10	=
water	240:36	0:0	10	PIX_FMT_YUV422P14
water	240:53	0:0	10	;
else	241:12	242:53	6
stmts	242:16	242:53	7	
water	242:16	0:0	8	s
op	242:17	0:0	8	->
water	242:19	0:0	8	avctx
op	242:24	0:0	8	->
water	242:26	0:0	8	pix_fmt
op	242:34	0:0	8	=
water	242:36	0:0	8	PIX_FMT_YUV420P14
water	242:53	0:0	8	;
break	243:12	243:17	6	
label	244:8	244:14	6	case 8 :
if	245:12	254:12	6	(CHROMA444)
cond	245:16	245:16	7	CHROMA444
water	245:16	0:0	8	CHROMA444
stmts	245:27	254:12	7	
water	245:27	0:0	8	{
water	246:20	0:0	8	s
op	246:21	0:0	8	->
water	246:23	0:0	8	avctx
op	246:28	0:0	8	->
water	246:30	0:0	8	pix_fmt
op	246:38	0:0	8	=
water	246:40	0:0	8	s
op	246:41	0:0	8	->
water	246:43	0:0	8	avctx
op	246:48	0:0	8	->
water	246:50	0:0	8	color_range
op	246:62	0:0	8	==
water	246:65	0:0	8	AVCOL_RANGE_JPEG
water	246:82	0:0	8	?
water	246:84	0:0	8	PIX_FMT_YUVJ444P
water	247:82	0:0	8	:
water	247:84	0:0	8	PIX_FMT_YUV444P
water	247:99	0:0	8	;
if	248:20	251:20	8	(s -> avctx -> colorspace == AVCOL_SPC_RGB)
cond	248:24	248:48	9	s -> avctx -> colorspace == AVCOL_SPC_RGB
water	248:24	0:0	10	s
op	248:25	0:0	10	->
water	248:27	0:0	10	avctx
op	248:32	0:0	10	->
water	248:34	0:0	10	colorspace
op	248:45	0:0	10	==
water	248:48	0:0	10	AVCOL_SPC_RGB
stmts	248:63	251:20	9	
water	248:63	0:0	10	{
water	249:24	0:0	10	s
op	249:25	0:0	10	->
water	249:27	0:0	10	avctx
op	249:32	0:0	10	->
water	249:34	0:0	10	pix_fmt
op	249:42	0:0	10	=
water	249:44	0:0	10	PIX_FMT_GBR24P
water	249:58	0:0	10	;
call	250:24	250:85	10	av_log
arg	250:31	250:41	11	h->s.avctx
water	250:31	0:0	12	h
op	250:32	0:0	12	->
water	250:34	0:0	12	s
op	250:35	0:0	12	.
water	250:36	0:0	12	avctx
arg	250:43	250:55	11	AV_LOG_DEBUG
water	250:43	0:0	12	AV_LOG_DEBUG
arg	250:57	250:85	11	"Detected GBR colorspace.\n"
water	250:57	0:0	12	"Detected GBR colorspace.\n"
water	250:86	0:0	10	;
water	251:20	0:0	10	}
else	251:22	253:20	8
stmts	251:27	253:20	9	
if	251:27	253:20	10	(s -> avctx -> colorspace == AVCOL_SPC_YCGCO)
cond	251:31	251:55	11	s -> avctx -> colorspace == AVCOL_SPC_YCGCO
water	251:31	0:0	12	s
op	251:32	0:0	12	->
water	251:34	0:0	12	avctx
op	251:39	0:0	12	->
water	251:41	0:0	12	colorspace
op	251:52	0:0	12	==
water	251:55	0:0	12	AVCOL_SPC_YCGCO
stmts	251:72	253:20	11	
water	251:72	0:0	12	{
call	252:24	252:101	12	av_log
arg	252:31	252:41	13	h->s.avctx
water	252:31	0:0	14	h
op	252:32	0:0	14	->
water	252:34	0:0	14	s
op	252:35	0:0	14	.
water	252:36	0:0	14	avctx
arg	252:43	252:57	13	AV_LOG_WARNING
water	252:43	0:0	14	AV_LOG_WARNING
arg	252:59	252:101	13	"Detected unsupported YCgCo colorspace.\n"
water	252:59	0:0	14	"Detected unsupported YCgCo colorspace.\n"
water	252:102	0:0	12	;
water	253:20	0:0	12	}
water	254:12	0:0	8	}
else	254:14	257:12	6
stmts	254:19	257:12	7	
if	254:19	257:12	8	(CHROMA422)
cond	254:23	254:23	9	CHROMA422
water	254:23	0:0	10	CHROMA422
stmts	254:34	257:12	9	
water	254:34	0:0	10	{
water	255:16	0:0	10	s
op	255:17	0:0	10	->
water	255:19	0:0	10	avctx
op	255:24	0:0	10	->
water	255:26	0:0	10	pix_fmt
op	255:34	0:0	10	=
water	255:36	0:0	10	s
op	255:37	0:0	10	->
water	255:39	0:0	10	avctx
op	255:44	0:0	10	->
water	255:46	0:0	10	color_range
op	255:58	0:0	10	==
water	255:61	0:0	10	AVCOL_RANGE_JPEG
water	255:78	0:0	10	?
water	255:80	0:0	10	PIX_FMT_YUVJ422P
water	256:78	0:0	10	:
water	256:80	0:0	10	PIX_FMT_YUV422P
water	256:95	0:0	10	;
water	257:12	0:0	10	}
else	257:14	264:12	6
stmts	257:19	264:12	7	
water	257:19	0:0	8	{
water	258:16	0:0	8	s
op	258:17	0:0	8	->
water	258:19	0:0	8	avctx
op	258:24	0:0	8	->
water	258:26	0:0	8	pix_fmt
op	258:34	0:0	8	=
call	258:36	263:83	8	s->avctx->get_format
arg	258:57	258:65	9	s->avctx
water	258:57	0:0	10	s
op	258:58	0:0	10	->
water	258:60	0:0	10	avctx
arg	259:57	263:83	9	s->avctx->codec->pix_fmts?s->avctx->codec->pix_fmts:s->avctx->color_range==AVCOL_RANGE_JPEG?hwaccel_pixfmt_list_h264_jpeg_420:ff_hwaccel_pixfmt_list_420
water	259:57	0:0	10	s
op	259:58	0:0	10	->
water	259:60	0:0	10	avctx
op	259:65	0:0	10	->
water	259:67	0:0	10	codec
op	259:72	0:0	10	->
water	259:74	0:0	10	pix_fmts
water	259:83	0:0	10	?
water	260:57	0:0	10	s
op	260:58	0:0	10	->
water	260:60	0:0	10	avctx
op	260:65	0:0	10	->
water	260:67	0:0	10	codec
op	260:72	0:0	10	->
water	260:74	0:0	10	pix_fmts
water	260:83	0:0	10	:
water	261:57	0:0	10	s
op	261:58	0:0	10	->
water	261:60	0:0	10	avctx
op	261:65	0:0	10	->
water	261:67	0:0	10	color_range
op	261:79	0:0	10	==
water	261:82	0:0	10	AVCOL_RANGE_JPEG
water	261:99	0:0	10	?
water	262:57	0:0	10	hwaccel_pixfmt_list_h264_jpeg_420
water	262:91	0:0	10	:
water	263:57	0:0	10	ff_hwaccel_pixfmt_list_420
water	263:84	0:0	8	;
water	264:12	0:0	8	}
break	265:12	265:17	6	
label	266:8	266:15	6	default :
call	267:12	268:71	6	av_log
arg	267:19	267:27	7	s->avctx
water	267:19	0:0	8	s
op	267:20	0:0	8	->
water	267:22	0:0	8	avctx
arg	267:29	267:41	7	AV_LOG_ERROR
water	267:29	0:0	8	AV_LOG_ERROR
arg	268:19	268:48	7	"Unsupported bit depth: %d\n"
water	268:19	0:0	8	"Unsupported bit depth: %d\n"
arg	268:50	268:71	7	h->sps.bit_depth_luma
water	268:50	0:0	8	h
op	268:51	0:0	8	->
water	268:53	0:0	8	sps
op	268:56	0:0	8	.
water	268:57	0:0	8	bit_depth_luma
water	268:72	0:0	6	;
return	269:12	269:38	6	AVERROR_INVALIDDATA
water	269:19	0:0	7	AVERROR_INVALIDDATA
water	270:8	0:0	6	}
water	272:8	0:0	4	s
op	272:9	0:0	4	->
water	272:11	0:0	4	avctx
op	272:16	0:0	4	->
water	272:18	0:0	4	hwaccel
op	272:26	0:0	4	=
call	272:28	273:61	4	ff_find_hwaccel
arg	272:44	272:63	5	s->avctx->codec->id
water	272:44	0:0	6	s
op	272:45	0:0	6	->
water	272:47	0:0	6	avctx
op	272:52	0:0	6	->
water	272:54	0:0	6	codec
op	272:59	0:0	6	->
water	272:61	0:0	6	id
arg	273:44	273:61	5	s->avctx->pix_fmt
water	273:44	0:0	6	s
op	273:45	0:0	6	->
water	273:47	0:0	6	avctx
op	273:52	0:0	6	->
water	273:54	0:0	6	pix_fmt
water	273:62	0:0	4	;
if	275:8	278:8	4	(ff_MPV_common_init (s ) < 0)
cond	275:12	275:36	5	ff_MPV_common_init (s ) < 0
call	275:12	275:32	6	ff_MPV_common_init
arg	275:31	275:32	7	s
water	275:31	0:0	8	s
op	275:34	0:0	6	<
water	275:36	0:0	6	0
stmts	275:39	278:8	5	
water	275:39	0:0	6	{
call	276:12	276:77	6	av_log
arg	276:19	276:29	7	h->s.avctx
water	276:19	0:0	8	h
op	276:20	0:0	8	->
water	276:22	0:0	8	s
op	276:23	0:0	8	.
water	276:24	0:0	8	avctx
arg	276:31	276:43	7	AV_LOG_ERROR
water	276:31	0:0	8	AV_LOG_ERROR
arg	276:45	276:77	7	"ff_MPV_common_init() failed.\n"
water	276:45	0:0	8	"ff_MPV_common_init() failed.\n"
water	276:78	0:0	6	;
return	277:12	277:21	6	-1
op	277:19	0:0	7	-
water	277:20	0:0	7	1
water	278:8	0:0	6	}
water	279:8	0:0	4	s
op	279:9	0:0	4	->
water	279:11	0:0	4	first_field
op	279:23	0:0	4	=
water	279:25	0:0	4	0
water	279:26	0:0	4	;
water	280:8	0:0	4	h
op	280:9	0:0	4	->
water	280:11	0:0	4	prev_interlaced_frame
op	280:33	0:0	4	=
water	280:35	0:0	4	1
water	280:36	0:0	4	;
call	282:8	282:26	4	init_scan_tables
arg	282:25	282:26	5	h
water	282:25	0:0	6	h
water	282:27	0:0	4	;
if	283:8	287:8	4	(ff_h264_alloc_tables (h ) < 0)
cond	283:12	283:38	5	ff_h264_alloc_tables (h ) < 0
call	283:12	283:34	6	ff_h264_alloc_tables
arg	283:33	283:34	7	h
water	283:33	0:0	8	h
op	283:36	0:0	6	<
water	283:38	0:0	6	0
stmts	283:41	287:8	5	
water	283:41	0:0	6	{
call	284:12	285:57	6	av_log
arg	284:19	284:29	7	h->s.avctx
water	284:19	0:0	8	h
op	284:20	0:0	8	->
water	284:22	0:0	8	s
op	284:23	0:0	8	.
water	284:24	0:0	8	avctx
arg	284:31	284:43	7	AV_LOG_ERROR
water	284:31	0:0	8	AV_LOG_ERROR
arg	285:19	285:57	7	"Could not allocate memory for h264\n"
water	285:19	0:0	8	"Could not allocate memory for h264\n"
water	285:58	0:0	6	;
return	286:12	286:34	6	AVERROR(ENOMEM)
call	286:19	286:33	7	AVERROR
arg	286:27	286:33	8	ENOMEM
water	286:27	0:0	9	ENOMEM
water	287:8	0:0	6	}
if	289:8	294:8	4	(! HAVE_THREADS || ! ( s -> avctx -> active_thread_type & FF_THREAD_SLICE ))
cond	289:12	289:77	5	! HAVE_THREADS || ! ( s -> avctx -> active_thread_type & FF_THREAD_SLICE )
op	289:12	0:0	6	!
water	289:13	0:0	6	HAVE_THREADS
op	289:26	0:0	6	||
op	289:29	0:0	6	!
water	289:30	0:0	6	(
water	289:31	0:0	6	s
op	289:32	0:0	6	->
water	289:34	0:0	6	avctx
op	289:39	0:0	6	->
water	289:41	0:0	6	active_thread_type
op	289:60	0:0	6	&
water	289:62	0:0	6	FF_THREAD_SLICE
water	289:77	0:0	6	)
stmts	289:80	294:8	5	
water	289:80	0:0	6	{
if	290:12	293:12	6	(context_init (h ) < 0)
cond	290:16	290:34	7	context_init (h ) < 0
call	290:16	290:30	8	context_init
arg	290:29	290:30	9	h
water	290:29	0:0	10	h
op	290:32	0:0	8	<
water	290:34	0:0	8	0
stmts	290:37	293:12	7	
water	290:37	0:0	8	{
call	291:16	291:75	8	av_log
arg	291:23	291:33	9	h->s.avctx
water	291:23	0:0	10	h
op	291:24	0:0	10	->
water	291:26	0:0	10	s
op	291:27	0:0	10	.
water	291:28	0:0	10	avctx
arg	291:35	291:47	9	AV_LOG_ERROR
water	291:35	0:0	10	AV_LOG_ERROR
arg	291:49	291:75	9	"context_init() failed.\n"
water	291:49	0:0	10	"context_init() failed.\n"
water	291:76	0:0	8	;
return	292:16	292:25	8	-1
op	292:23	0:0	9	-
water	292:24	0:0	9	1
water	293:12	0:0	8	}
water	294:8	0:0	6	}
else	294:10	315:8	4
stmts	294:15	315:8	5	
water	294:15	0:0	6	{
for	295:12	307:12	6	(i = 1 ;i < s -> slice_context_count;i ++)
forinit	295:17	295:22	7	i = 1 ;
water	295:17	0:0	8	i
op	295:19	0:0	8	=
water	295:21	0:0	8	1
water	295:22	0:0	8	;
cond	295:24	295:31	7	i < s -> slice_context_count
water	295:24	0:0	8	i
op	295:26	0:0	8	<
water	295:28	0:0	8	s
op	295:29	0:0	8	->
water	295:31	0:0	8	slice_context_count
forexpr	295:52	295:53	7	i ++
water	295:52	0:0	8	i
op	295:53	0:0	8	++
stmts	295:57	307:12	7	
water	295:57	0:0	8	{
decl	296:16	296:30	8	H264Context	*c
water	297:16	0:0	8	c
op	297:18	0:0	8	=
water	297:20	0:0	8	h
op	297:21	0:0	8	->
water	297:23	0:0	8	thread_context
op	297:37	0:0	8	[
water	297:38	0:0	8	i
op	297:39	0:0	8	]
op	297:41	0:0	8	=
call	297:43	297:72	8	av_malloc
arg	297:53	297:72	9	sizeof(H264Context)
op	297:53	0:0	10	sizeof
water	297:59	0:0	10	(
water	297:60	0:0	10	H264Context
water	297:71	0:0	10	)
water	297:73	0:0	8	;
call	298:16	298:72	8	memcpy
arg	298:23	298:24	9	c
water	298:23	0:0	10	c
arg	298:26	298:48	9	h->s.thread_context[i]
water	298:26	0:0	10	h
op	298:27	0:0	10	->
water	298:29	0:0	10	s
op	298:30	0:0	10	.
water	298:31	0:0	10	thread_context
op	298:45	0:0	10	[
water	298:46	0:0	10	i
op	298:47	0:0	10	]
arg	298:50	298:72	9	sizeof(MpegEncContext)
op	298:50	0:0	10	sizeof
water	298:56	0:0	10	(
water	298:57	0:0	10	MpegEncContext
water	298:71	0:0	10	)
water	298:73	0:0	8	;
call	299:16	299:81	8	memset
arg	299:23	299:32	9	&c->s+1
op	299:23	0:0	10	&
water	299:24	0:0	10	c
op	299:25	0:0	10	->
water	299:27	0:0	10	s
op	299:29	0:0	10	+
water	299:31	0:0	10	1
arg	299:34	299:35	9	0
water	299:34	0:0	10	0
arg	299:37	299:81	9	sizeof(H264Context)-sizeof(MpegEncContext)
op	299:37	0:0	10	sizeof
water	299:43	0:0	10	(
water	299:44	0:0	10	H264Context
water	299:55	0:0	10	)
op	299:57	0:0	10	-
op	299:59	0:0	10	sizeof
water	299:65	0:0	10	(
water	299:66	0:0	10	MpegEncContext
water	299:80	0:0	10	)
water	299:82	0:0	8	;
water	300:16	0:0	8	c
op	300:17	0:0	8	->
water	300:19	0:0	8	h264dsp
op	300:31	0:0	8	=
water	300:33	0:0	8	h
op	300:34	0:0	8	->
water	300:36	0:0	8	h264dsp
water	300:43	0:0	8	;
water	301:16	0:0	8	c
op	301:17	0:0	8	->
water	301:19	0:0	8	sps
op	301:31	0:0	8	=
water	301:33	0:0	8	h
op	301:34	0:0	8	->
water	301:36	0:0	8	sps
water	301:39	0:0	8	;
water	302:16	0:0	8	c
op	302:17	0:0	8	->
water	302:19	0:0	8	pps
op	302:31	0:0	8	=
water	302:33	0:0	8	h
op	302:34	0:0	8	->
water	302:36	0:0	8	pps
water	302:39	0:0	8	;
water	303:16	0:0	8	c
op	303:17	0:0	8	->
water	303:19	0:0	8	pixel_shift
op	303:31	0:0	8	=
water	303:33	0:0	8	h
op	303:34	0:0	8	->
water	303:36	0:0	8	pixel_shift
water	303:47	0:0	8	;
water	304:16	0:0	8	c
op	304:17	0:0	8	->
water	304:19	0:0	8	cur_chroma_format_idc
op	304:41	0:0	8	=
water	304:43	0:0	8	h
op	304:44	0:0	8	->
water	304:46	0:0	8	cur_chroma_format_idc
water	304:67	0:0	8	;
call	305:16	305:34	8	init_scan_tables
arg	305:33	305:34	9	c
water	305:33	0:0	10	c
water	305:35	0:0	8	;
call	306:16	306:36	8	clone_tables
arg	306:29	306:30	9	c
water	306:29	0:0	10	c
arg	306:32	306:33	9	h
water	306:32	0:0	10	h
arg	306:35	306:36	9	i
water	306:35	0:0	10	i
water	306:37	0:0	8	;
water	307:12	0:0	8	}
for	309:12	314:16	6	(i = 0 ;i < s -> slice_context_count;i ++)
forinit	309:17	309:22	7	i = 0 ;
water	309:17	0:0	8	i
op	309:19	0:0	8	=
water	309:21	0:0	8	0
water	309:22	0:0	8	;
cond	309:24	309:31	7	i < s -> slice_context_count
water	309:24	0:0	8	i
op	309:26	0:0	8	<
water	309:28	0:0	8	s
op	309:29	0:0	8	->
water	309:31	0:0	8	slice_context_count
forexpr	309:52	309:53	7	i ++
water	309:52	0:0	8	i
op	309:53	0:0	8	++
stmts	310:16	314:16	7	
if	310:16	314:16	8	(context_init (h -> thread_context [ i ] ) < 0)
cond	310:20	310:57	9	context_init (h -> thread_context [ i ] ) < 0
call	310:20	310:53	10	context_init
arg	310:33	310:53	11	h->thread_context[i]
water	310:33	0:0	12	h
op	310:34	0:0	12	->
water	310:36	0:0	12	thread_context
op	310:50	0:0	12	[
water	310:51	0:0	12	i
op	310:52	0:0	12	]
op	310:55	0:0	10	<
water	310:57	0:0	10	0
stmts	310:60	314:16	9	
water	310:60	0:0	10	{
call	311:20	312:53	10	av_log
arg	311:27	311:37	11	h->s.avctx
water	311:27	0:0	12	h
op	311:28	0:0	12	->
water	311:30	0:0	12	s
op	311:31	0:0	12	.
water	311:32	0:0	12	avctx
arg	311:39	311:51	11	AV_LOG_ERROR
water	311:39	0:0	12	AV_LOG_ERROR
arg	312:27	312:53	11	"context_init() failed.\n"
water	312:27	0:0	12	"context_init() failed.\n"
water	312:54	0:0	10	;
return	313:20	313:29	10	-1
op	313:27	0:0	11	-
water	313:28	0:0	11	1
water	314:16	0:0	10	}
water	315:8	0:0	6	}
water	316:4	0:0	4	}
if	318:4	321:4	2	(h == h0 && h -> dequant_coeff_pps != pps_id)
cond	318:8	318:43	3	h == h0 && h -> dequant_coeff_pps != pps_id
water	318:8	0:0	4	h
op	318:10	0:0	4	==
water	318:13	0:0	4	h0
op	318:16	0:0	4	&&
water	318:19	0:0	4	h
op	318:20	0:0	4	->
water	318:22	0:0	4	dequant_coeff_pps
op	318:40	0:0	4	!=
water	318:43	0:0	4	pps_id
stmts	318:51	321:4	3	
water	318:51	0:0	4	{
water	319:8	0:0	4	h
op	319:9	0:0	4	->
water	319:11	0:0	4	dequant_coeff_pps
op	319:29	0:0	4	=
water	319:31	0:0	4	pps_id
water	319:37	0:0	4	;
call	320:8	320:29	4	init_dequant_tables
arg	320:28	320:29	5	h
water	320:28	0:0	6	h
water	320:30	0:0	4	;
water	321:4	0:0	4	}
water	323:4	0:0	2	h
op	323:5	0:0	2	->
water	323:7	0:0	2	frame_num
op	323:17	0:0	2	=
call	323:19	323:61	2	get_bits
arg	323:28	323:34	3	&s->gb
op	323:28	0:0	4	&
water	323:29	0:0	4	s
op	323:30	0:0	4	->
water	323:32	0:0	4	gb
arg	323:36	323:61	3	h->sps.log2_max_frame_num
water	323:36	0:0	4	h
op	323:37	0:0	4	->
water	323:39	0:0	4	sps
op	323:42	0:0	4	.
water	323:43	0:0	4	log2_max_frame_num
water	323:62	0:0	2	;
water	325:4	0:0	2	h
op	325:5	0:0	2	->
water	325:7	0:0	2	mb_mbaff
op	325:23	0:0	2	=
water	325:25	0:0	2	0
water	325:26	0:0	2	;
water	326:4	0:0	2	h
op	326:5	0:0	2	->
water	326:7	0:0	2	mb_aff_frame
op	326:23	0:0	2	=
water	326:25	0:0	2	0
water	326:26	0:0	2	;
water	327:4	0:0	2	last_pic_structure
op	327:23	0:0	2	=
water	327:25	0:0	2	s0
op	327:27	0:0	2	->
water	327:29	0:0	2	picture_structure
water	327:46	0:0	2	;
water	328:4	0:0	2	last_pic_dropable
op	328:23	0:0	2	=
water	328:25	0:0	2	s0
op	328:27	0:0	2	->
water	328:29	0:0	2	dropable
water	328:37	0:0	2	;
water	329:4	0:0	2	s
op	329:5	0:0	2	->
water	329:7	0:0	2	dropable
op	329:23	0:0	2	=
water	329:25	0:0	2	h
op	329:26	0:0	2	->
water	329:28	0:0	2	nal_ref_idc
op	329:40	0:0	2	==
water	329:43	0:0	2	0
water	329:44	0:0	2	;
if	330:4	332:4	2	(h -> sps . frame_mbs_only_flag)
cond	330:8	330:15	3	h -> sps . frame_mbs_only_flag
water	330:8	0:0	4	h
op	330:9	0:0	4	->
water	330:11	0:0	4	sps
op	330:14	0:0	4	.
water	330:15	0:0	4	frame_mbs_only_flag
stmts	330:36	332:4	3	
water	330:36	0:0	4	{
water	331:8	0:0	4	s
op	331:9	0:0	4	->
water	331:11	0:0	4	picture_structure
op	331:29	0:0	4	=
water	331:31	0:0	4	PICT_FRAME
water	331:41	0:0	4	;
water	332:4	0:0	4	}
else	332:6	343:4	2
stmts	332:11	343:4	3	
water	332:11	0:0	4	{
if	333:8	336:8	4	(! h -> sps . direct_8x8_inference_flag && slice_type == AV_PICTURE_TYPE_B)
cond	333:12	333:63	5	! h -> sps . direct_8x8_inference_flag && slice_type == AV_PICTURE_TYPE_B
op	333:12	0:0	6	!
water	333:13	0:0	6	h
op	333:14	0:0	6	->
water	333:16	0:0	6	sps
op	333:19	0:0	6	.
water	333:20	0:0	6	direct_8x8_inference_flag
op	333:46	0:0	6	&&
water	333:49	0:0	6	slice_type
op	333:60	0:0	6	==
water	333:63	0:0	6	AV_PICTURE_TYPE_B
stmts	333:82	336:8	5	
water	333:82	0:0	6	{
call	334:12	334:117	6	av_log
arg	334:19	334:29	7	h->s.avctx
water	334:19	0:0	8	h
op	334:20	0:0	8	->
water	334:22	0:0	8	s
op	334:23	0:0	8	.
water	334:24	0:0	8	avctx
arg	334:31	334:43	7	AV_LOG_ERROR
water	334:31	0:0	8	AV_LOG_ERROR
arg	334:45	334:117	7	"This stream was generated by a broken encoder, invalid 8x8 inference\n"
water	334:45	0:0	8	"This stream was generated by a broken encoder, invalid 8x8 inference\n"
water	334:118	0:0	6	;
return	335:12	335:21	6	-1
op	335:19	0:0	7	-
water	335:20	0:0	7	1
water	336:8	0:0	6	}
if	337:8	339:8	4	(get_bits1 (& s -> gb ))
cond	337:12	337:28	5	get_bits1 (& s -> gb )
call	337:12	337:28	6	get_bits1
arg	337:22	337:28	7	&s->gb
op	337:22	0:0	8	&
water	337:23	0:0	8	s
op	337:24	0:0	8	->
water	337:26	0:0	8	gb
stmts	337:31	339:8	5	
water	337:31	0:0	6	{
water	338:12	0:0	6	s
op	338:13	0:0	6	->
water	338:15	0:0	6	picture_structure
op	338:33	0:0	6	=
water	338:35	0:0	6	PICT_TOP_FIELD
op	338:50	0:0	6	+
call	338:52	338:68	6	get_bits1
arg	338:62	338:68	7	&s->gb
op	338:62	0:0	8	&
water	338:63	0:0	8	s
op	338:64	0:0	8	->
water	338:66	0:0	8	gb
water	338:69	0:0	6	;
water	339:8	0:0	6	}
else	339:10	342:8	4
stmts	339:15	342:8	5	
water	339:15	0:0	6	{
water	340:12	0:0	6	s
op	340:13	0:0	6	->
water	340:15	0:0	6	picture_structure
op	340:33	0:0	6	=
water	340:35	0:0	6	PICT_FRAME
water	340:45	0:0	6	;
water	341:12	0:0	6	h
op	341:13	0:0	6	->
water	341:15	0:0	6	mb_aff_frame
op	341:33	0:0	6	=
water	341:35	0:0	6	h
op	341:36	0:0	6	->
water	341:38	0:0	6	sps
op	341:41	0:0	6	.
water	341:42	0:0	6	mb_aff
water	341:48	0:0	6	;
water	342:8	0:0	6	}
water	343:4	0:0	4	}
water	344:4	0:0	2	h
op	344:5	0:0	2	->
water	344:7	0:0	2	mb_field_decoding_flag
op	344:30	0:0	2	=
water	344:32	0:0	2	s
op	344:33	0:0	2	->
water	344:35	0:0	2	picture_structure
op	344:53	0:0	2	!=
water	344:56	0:0	2	PICT_FRAME
water	344:66	0:0	2	;
if	346:4	356:4	2	(h0 -> current_slice != 0)
cond	346:8	346:29	3	h0 -> current_slice != 0
water	346:8	0:0	4	h0
op	346:10	0:0	4	->
water	346:12	0:0	4	current_slice
op	346:26	0:0	4	!=
water	346:29	0:0	4	0
stmts	346:32	356:4	3	
water	346:32	0:0	4	{
if	347:8	355:8	4	(last_pic_structure != s -> picture_structure || last_pic_dropable != s -> dropable)
cond	347:12	348:37	5	last_pic_structure != s -> picture_structure || last_pic_dropable != s -> dropable
water	347:12	0:0	6	last_pic_structure
op	347:31	0:0	6	!=
water	347:34	0:0	6	s
op	347:35	0:0	6	->
water	347:37	0:0	6	picture_structure
op	347:55	0:0	6	||
water	348:12	0:0	6	last_pic_dropable
op	348:31	0:0	6	!=
water	348:34	0:0	6	s
op	348:35	0:0	6	->
water	348:37	0:0	6	dropable
stmts	348:47	355:8	5	
water	348:47	0:0	6	{
call	349:12	351:59	6	av_log
arg	349:19	349:29	7	h->s.avctx
water	349:19	0:0	8	h
op	349:20	0:0	8	->
water	349:22	0:0	8	s
op	349:23	0:0	8	.
water	349:24	0:0	8	avctx
arg	349:31	349:43	7	AV_LOG_ERROR
water	349:31	0:0	8	AV_LOG_ERROR
arg	350:19	350:83	7	"Changing field mode (%d -> %d) between slices is not allowed\n"
water	350:19	0:0	8	"Changing field mode (%d -> %d) between slices is not allowed\n"
arg	351:19	351:37	7	last_pic_structure
water	351:19	0:0	8	last_pic_structure
arg	351:39	351:59	7	s->picture_structure
water	351:39	0:0	8	s
op	351:40	0:0	8	->
water	351:42	0:0	8	picture_structure
water	351:60	0:0	6	;
water	352:12	0:0	6	s
op	352:13	0:0	6	->
water	352:15	0:0	6	picture_structure
op	352:33	0:0	6	=
water	352:35	0:0	6	last_pic_structure
water	352:53	0:0	6	;
water	353:12	0:0	6	s
op	353:13	0:0	6	->
water	353:15	0:0	6	dropable
op	353:33	0:0	6	=
water	353:35	0:0	6	last_pic_dropable
water	353:52	0:0	6	;
return	354:12	354:38	6	AVERROR_INVALIDDATA
water	354:19	0:0	7	AVERROR_INVALIDDATA
water	355:8	0:0	6	}
water	356:4	0:0	4	}
else	356:6	520:4	2
stmts	356:11	520:4	3	
water	356:11	0:0	4	{
if	359:8	373:8	4	(h -> frame_num != h -> prev_frame_num && h -> prev_frame_num >= 0)
cond	359:12	359:70	5	h -> frame_num != h -> prev_frame_num && h -> prev_frame_num >= 0
water	359:12	0:0	6	h
op	359:13	0:0	6	->
water	359:15	0:0	6	frame_num
op	359:25	0:0	6	!=
water	359:28	0:0	6	h
op	359:29	0:0	6	->
water	359:31	0:0	6	prev_frame_num
op	359:46	0:0	6	&&
water	359:49	0:0	6	h
op	359:50	0:0	6	->
water	359:52	0:0	6	prev_frame_num
op	359:67	0:0	6	>=
water	359:70	0:0	6	0
stmts	359:73	373:8	5	
water	359:73	0:0	6	{
decl	360:12	360:57	6	int	unwrap_prev_frame_num
op	360:38	0:0	6	=
water	360:40	0:0	6	h
op	360:41	0:0	6	->
water	360:43	0:0	6	prev_frame_num
decl	361:12	361:70	6	int	max_frame_num
op	361:38	0:0	6	=
water	361:40	0:0	6	1
op	361:42	0:0	6	<<
water	361:45	0:0	6	h
op	361:46	0:0	6	->
water	361:48	0:0	6	sps
op	361:51	0:0	6	.
water	361:52	0:0	6	log2_max_frame_num
if	363:12	364:54	6	(unwrap_prev_frame_num > h -> frame_num)
cond	363:16	363:43	7	unwrap_prev_frame_num > h -> frame_num
water	363:16	0:0	8	unwrap_prev_frame_num
op	363:38	0:0	8	>
water	363:40	0:0	8	h
op	363:41	0:0	8	->
water	363:43	0:0	8	frame_num
stmts	364:16	364:54	7	
water	364:16	0:0	8	unwrap_prev_frame_num
op	364:38	0:0	8	-=
water	364:41	0:0	8	max_frame_num
water	364:54	0:0	8	;
if	366:12	372:12	6	(( h -> frame_num - unwrap_prev_frame_num ) > h -> sps . ref_frame_count)
cond	366:16	366:64	7	( h -> frame_num - unwrap_prev_frame_num ) > h -> sps . ref_frame_count
water	366:16	0:0	8	(
water	366:17	0:0	8	h
op	366:18	0:0	8	->
water	366:20	0:0	8	frame_num
op	366:30	0:0	8	-
water	366:32	0:0	8	unwrap_prev_frame_num
water	366:53	0:0	8	)
op	366:55	0:0	8	>
water	366:57	0:0	8	h
op	366:58	0:0	8	->
water	366:60	0:0	8	sps
op	366:63	0:0	8	.
water	366:64	0:0	8	ref_frame_count
stmts	366:81	372:12	7	
water	366:81	0:0	8	{
water	367:16	0:0	8	unwrap_prev_frame_num
op	367:38	0:0	8	=
water	367:40	0:0	8	(
water	367:41	0:0	8	h
op	367:42	0:0	8	->
water	367:44	0:0	8	frame_num
op	367:54	0:0	8	-
water	367:56	0:0	8	h
op	367:57	0:0	8	->
water	367:59	0:0	8	sps
op	367:62	0:0	8	.
water	367:63	0:0	8	ref_frame_count
water	367:78	0:0	8	)
op	367:80	0:0	8	-
water	367:82	0:0	8	1
water	367:83	0:0	8	;
if	368:16	369:58	8	(unwrap_prev_frame_num < 0)
cond	368:20	368:44	9	unwrap_prev_frame_num < 0
water	368:20	0:0	10	unwrap_prev_frame_num
op	368:42	0:0	10	<
water	368:44	0:0	10	0
stmts	369:20	369:58	9	
water	369:20	0:0	10	unwrap_prev_frame_num
op	369:42	0:0	10	+=
water	369:45	0:0	10	max_frame_num
water	369:58	0:0	10	;
water	371:16	0:0	8	h
op	371:17	0:0	8	->
water	371:19	0:0	8	prev_frame_num
op	371:34	0:0	8	=
water	371:36	0:0	8	unwrap_prev_frame_num
water	371:57	0:0	8	;
water	372:12	0:0	8	}
water	373:8	0:0	6	}
if	380:8	439:8	4	(s0 -> first_field)
cond	380:12	380:16	5	s0 -> first_field
water	380:12	0:0	6	s0
op	380:14	0:0	6	->
water	380:16	0:0	6	first_field
stmts	380:29	439:8	5	
water	380:29	0:0	6	{
call	381:12	381:42	6	assert
arg	381:19	381:42	7	s0->current_picture_ptr
water	381:19	0:0	8	s0
op	381:21	0:0	8	->
water	381:23	0:0	8	current_picture_ptr
water	381:43	0:0	6	;
call	382:12	382:53	6	assert
arg	382:19	382:53	7	s0->current_picture_ptr->f.data[0]
water	382:19	0:0	8	s0
op	382:21	0:0	8	->
water	382:23	0:0	8	current_picture_ptr
op	382:42	0:0	8	->
water	382:44	0:0	8	f
op	382:45	0:0	8	.
water	382:46	0:0	8	data
op	382:50	0:0	8	[
water	382:51	0:0	8	0
op	382:52	0:0	8	]
water	382:54	0:0	6	;
call	383:12	383:74	6	assert
arg	383:19	383:74	7	s0->current_picture_ptr->f.reference!=DELAYED_PIC_REF
water	383:19	0:0	8	s0
op	383:21	0:0	8	->
water	383:23	0:0	8	current_picture_ptr
op	383:42	0:0	8	->
water	383:44	0:0	8	f
op	383:45	0:0	8	.
water	383:46	0:0	8	reference
op	383:56	0:0	8	!=
water	383:59	0:0	8	DELAYED_PIC_REF
water	383:75	0:0	6	;
if	386:12	389:12	6	(! last_pic_dropable && s0 -> current_picture_ptr -> owner2 == s0)
cond	386:16	386:73	7	! last_pic_dropable && s0 -> current_picture_ptr -> owner2 == s0
op	386:16	0:0	8	!
water	386:17	0:0	8	last_pic_dropable
op	386:35	0:0	8	&&
water	386:38	0:0	8	s0
op	386:40	0:0	8	->
water	386:42	0:0	8	current_picture_ptr
op	386:61	0:0	8	->
water	386:63	0:0	8	owner2
op	386:70	0:0	8	==
water	386:73	0:0	8	s0
stmts	386:77	389:12	7	
water	386:77	0:0	8	{
call	387:16	388:81	8	ff_thread_report_progress
arg	387:42	387:69	9	&s0->current_picture_ptr->f
op	387:42	0:0	10	&
water	387:43	0:0	10	s0
op	387:45	0:0	10	->
water	387:47	0:0	10	current_picture_ptr
op	387:66	0:0	10	->
water	387:68	0:0	10	f
arg	387:71	387:78	9	INT_MAX
water	387:71	0:0	10	INT_MAX
arg	388:42	388:81	9	last_pic_structure==PICT_BOTTOM_FIELD
water	388:42	0:0	10	last_pic_structure
op	388:61	0:0	10	==
water	388:64	0:0	10	PICT_BOTTOM_FIELD
water	388:82	0:0	8	;
water	389:12	0:0	8	}
if	392:12	399:12	6	(! FIELD_PICTURE || s -> picture_structure == last_pic_structure)
cond	392:16	392:58	7	! FIELD_PICTURE || s -> picture_structure == last_pic_structure
op	392:16	0:0	8	!
water	392:17	0:0	8	FIELD_PICTURE
op	392:31	0:0	8	||
water	392:34	0:0	8	s
op	392:35	0:0	8	->
water	392:37	0:0	8	picture_structure
op	392:55	0:0	8	==
water	392:58	0:0	8	last_pic_structure
stmts	392:78	399:12	7	
water	392:78	0:0	8	{
if	395:16	398:16	8	(! last_pic_dropable && last_pic_structure != PICT_FRAME)
cond	395:20	395:64	9	! last_pic_dropable && last_pic_structure != PICT_FRAME
op	395:20	0:0	10	!
water	395:21	0:0	10	last_pic_dropable
op	395:39	0:0	10	&&
water	395:42	0:0	10	last_pic_structure
op	395:61	0:0	10	!=
water	395:64	0:0	10	PICT_FRAME
stmts	395:76	398:16	9	
water	395:76	0:0	10	{
call	396:20	397:82	10	ff_thread_report_progress
arg	396:46	396:73	11	&s0->current_picture_ptr->f
op	396:46	0:0	12	&
water	396:47	0:0	12	s0
op	396:49	0:0	12	->
water	396:51	0:0	12	current_picture_ptr
op	396:70	0:0	12	->
water	396:72	0:0	12	f
arg	396:75	396:82	11	INT_MAX
water	396:75	0:0	12	INT_MAX
arg	397:46	397:82	11	last_pic_structure==PICT_TOP_FIELD
water	397:46	0:0	12	last_pic_structure
op	397:65	0:0	12	==
water	397:68	0:0	12	PICT_TOP_FIELD
water	397:83	0:0	10	;
water	398:16	0:0	10	}
water	399:12	0:0	8	}
else	399:14	438:12	6
stmts	399:19	438:12	7	
water	399:19	0:0	8	{
if	400:16	409:16	8	(s0 -> current_picture_ptr -> frame_num != h -> frame_num)
cond	400:20	400:61	9	s0 -> current_picture_ptr -> frame_num != h -> frame_num
water	400:20	0:0	10	s0
op	400:22	0:0	10	->
water	400:24	0:0	10	current_picture_ptr
op	400:43	0:0	10	->
water	400:45	0:0	10	frame_num
op	400:55	0:0	10	!=
water	400:58	0:0	10	h
op	400:59	0:0	10	->
water	400:61	0:0	10	frame_num
stmts	400:72	409:16	9	
water	400:72	0:0	10	{
if	405:20	408:20	10	(! last_pic_dropable && last_pic_structure != PICT_FRAME)
cond	405:24	405:68	11	! last_pic_dropable && last_pic_structure != PICT_FRAME
op	405:24	0:0	12	!
water	405:25	0:0	12	last_pic_dropable
op	405:43	0:0	12	&&
water	405:46	0:0	12	last_pic_structure
op	405:65	0:0	12	!=
water	405:68	0:0	12	PICT_FRAME
stmts	405:80	408:20	11	
water	405:80	0:0	12	{
call	406:24	407:86	12	ff_thread_report_progress
arg	406:50	406:77	13	&s0->current_picture_ptr->f
op	406:50	0:0	14	&
water	406:51	0:0	14	s0
op	406:53	0:0	14	->
water	406:55	0:0	14	current_picture_ptr
op	406:74	0:0	14	->
water	406:76	0:0	14	f
arg	406:79	406:86	13	INT_MAX
water	406:79	0:0	14	INT_MAX
arg	407:50	407:86	13	last_pic_structure==PICT_TOP_FIELD
water	407:50	0:0	14	last_pic_structure
op	407:69	0:0	14	==
water	407:72	0:0	14	PICT_TOP_FIELD
water	407:87	0:0	12	;
water	408:20	0:0	12	}
water	409:16	0:0	10	}
else	409:18	437:16	8
stmts	409:23	437:16	9	
water	409:23	0:0	10	{
if	411:20	421:20	10	(! ( ( last_pic_structure == PICT_TOP_FIELD && s -> picture_structure == PICT_BOTTOM_FIELD ) || ( last_pic_structure == PICT_BOTTOM_FIELD && s -> picture_structure == PICT_TOP_FIELD ) ))
cond	411:24	414:66	11	! ( ( last_pic_structure == PICT_TOP_FIELD && s -> picture_structure == PICT_BOTTOM_FIELD ) || ( last_pic_structure == PICT_BOTTOM_FIELD && s -> picture_structure == PICT_TOP_FIELD ) )
op	411:24	0:0	12	!
water	411:25	0:0	12	(
water	411:26	0:0	12	(
water	411:27	0:0	12	last_pic_structure
op	411:48	0:0	12	==
water	411:51	0:0	12	PICT_TOP_FIELD
op	411:66	0:0	12	&&
water	412:27	0:0	12	s
op	412:28	0:0	12	->
water	412:30	0:0	12	picture_structure
op	412:48	0:0	12	==
water	412:51	0:0	12	PICT_BOTTOM_FIELD
water	412:68	0:0	12	)
op	412:70	0:0	12	||
water	413:26	0:0	12	(
water	413:27	0:0	12	last_pic_structure
op	413:48	0:0	12	==
water	413:51	0:0	12	PICT_BOTTOM_FIELD
op	413:69	0:0	12	&&
water	414:27	0:0	12	s
op	414:28	0:0	12	->
water	414:30	0:0	12	picture_structure
op	414:48	0:0	12	==
water	414:51	0:0	12	PICT_TOP_FIELD
water	414:65	0:0	12	)
water	414:66	0:0	12	)
stmts	414:69	421:20	11	
water	414:69	0:0	12	{
call	415:24	417:71	12	av_log
arg	415:31	415:39	13	s->avctx
water	415:31	0:0	14	s
op	415:32	0:0	14	->
water	415:34	0:0	14	avctx
arg	415:41	415:53	13	AV_LOG_ERROR
water	415:41	0:0	14	AV_LOG_ERROR
arg	416:31	416:71	13	"Invalid field mode combination %d/%d\n"
water	416:31	0:0	14	"Invalid field mode combination %d/%d\n"
arg	417:31	417:49	13	last_pic_structure
water	417:31	0:0	14	last_pic_structure
arg	417:51	417:71	13	s->picture_structure
water	417:51	0:0	14	s
op	417:52	0:0	14	->
water	417:54	0:0	14	picture_structure
water	417:72	0:0	12	;
water	418:24	0:0	12	s
op	418:25	0:0	12	->
water	418:27	0:0	12	picture_structure
op	418:45	0:0	12	=
water	418:47	0:0	12	last_pic_structure
water	418:65	0:0	12	;
water	419:24	0:0	12	s
op	419:25	0:0	12	->
water	419:27	0:0	12	dropable
op	419:45	0:0	12	=
water	419:47	0:0	12	last_pic_dropable
water	419:64	0:0	12	;
return	420:24	420:50	12	AVERROR_INVALIDDATA
water	420:31	0:0	13	AVERROR_INVALIDDATA
water	421:20	0:0	12	}
else	421:22	428:20	10
stmts	421:27	428:20	11	
if	421:27	428:20	12	(last_pic_dropable != s -> dropable)
cond	421:31	421:55	13	last_pic_dropable != s -> dropable
water	421:31	0:0	14	last_pic_dropable
op	421:49	0:0	14	!=
water	421:52	0:0	14	s
op	421:53	0:0	14	->
water	421:55	0:0	14	dropable
stmts	421:65	428:20	13	
water	421:65	0:0	14	{
call	422:24	423:102	14	av_log
arg	422:31	422:39	15	s->avctx
water	422:31	0:0	16	s
op	422:32	0:0	16	->
water	422:34	0:0	16	avctx
arg	422:41	422:53	15	AV_LOG_ERROR
water	422:41	0:0	16	AV_LOG_ERROR
arg	423:31	423:102	15	"Cannot combine reference and non-reference fields in the same frame\n"
water	423:31	0:0	16	"Cannot combine reference and non-reference fields in the same frame\n"
water	423:103	0:0	14	;
call	424:24	424:60	14	av_log_ask_for_sample
arg	424:46	424:54	15	s->avctx
water	424:46	0:0	16	s
op	424:47	0:0	16	->
water	424:49	0:0	16	avctx
arg	424:56	424:60	15	NULL
water	424:56	0:0	16	NULL
water	424:61	0:0	14	;
water	425:24	0:0	14	s
op	425:25	0:0	14	->
water	425:27	0:0	14	picture_structure
op	425:45	0:0	14	=
water	425:47	0:0	14	last_pic_structure
water	425:65	0:0	14	;
water	426:24	0:0	14	s
op	426:25	0:0	14	->
water	426:27	0:0	14	dropable
op	426:45	0:0	14	=
water	426:47	0:0	14	last_pic_dropable
water	426:64	0:0	14	;
return	427:24	427:50	14	AVERROR_INVALIDDATA
water	427:31	0:0	15	AVERROR_INVALIDDATA
water	428:20	0:0	14	}
water	436:20	0:0	10	s0
op	436:22	0:0	10	->
water	436:24	0:0	10	current_picture_ptr
op	436:43	0:0	10	->
water	436:45	0:0	10	owner2
op	436:52	0:0	10	=
water	436:54	0:0	10	s0
water	436:56	0:0	10	;
water	437:16	0:0	10	}
water	438:12	0:0	8	}
water	439:8	0:0	6	}
while	441:8	477:8	4	(h -> frame_num != h -> prev_frame_num && h -> prev_frame_num >= 0 && h -> frame_num != ( h -> prev_frame_num + 1 ) % ( 1 << h -> sps . log2_max_frame_num ))
cond	441:15	442:88	5	h -> frame_num != h -> prev_frame_num && h -> prev_frame_num >= 0 && h -> frame_num != ( h -> prev_frame_num + 1 ) % ( 1 << h -> sps . log2_max_frame_num )
water	441:15	0:0	6	h
op	441:16	0:0	6	->
water	441:18	0:0	6	frame_num
op	441:28	0:0	6	!=
water	441:31	0:0	6	h
op	441:32	0:0	6	->
water	441:34	0:0	6	prev_frame_num
op	441:49	0:0	6	&&
water	441:52	0:0	6	h
op	441:53	0:0	6	->
water	441:55	0:0	6	prev_frame_num
op	441:70	0:0	6	>=
water	441:73	0:0	6	0
op	441:75	0:0	6	&&
water	442:15	0:0	6	h
op	442:16	0:0	6	->
water	442:18	0:0	6	frame_num
op	442:28	0:0	6	!=
water	442:31	0:0	6	(
water	442:32	0:0	6	h
op	442:33	0:0	6	->
water	442:35	0:0	6	prev_frame_num
op	442:50	0:0	6	+
water	442:52	0:0	6	1
water	442:53	0:0	6	)
op	442:55	0:0	6	%
water	442:57	0:0	6	(
water	442:58	0:0	6	1
op	442:60	0:0	6	<<
water	442:63	0:0	6	h
op	442:64	0:0	6	->
water	442:66	0:0	6	sps
op	442:69	0:0	6	.
water	442:70	0:0	6	log2_max_frame_num
water	442:88	0:0	6	)
stmts	442:91	477:8	5	
water	442:91	0:0	6	{
decl	443:12	443:71	6	Picture	*prev
op	443:26	0:0	6	=
water	443:28	0:0	6	h
op	443:29	0:0	6	->
water	443:31	0:0	6	short_ref_count
water	443:47	0:0	6	?
water	443:49	0:0	6	h
op	443:50	0:0	6	->
water	443:52	0:0	6	short_ref
op	443:61	0:0	6	[
water	443:62	0:0	6	0
op	443:63	0:0	6	]
water	443:65	0:0	6	:
water	443:67	0:0	6	NULL
call	444:12	445:50	6	av_log
arg	444:19	444:29	7	h->s.avctx
water	444:19	0:0	8	h
op	444:20	0:0	8	->
water	444:22	0:0	8	s
op	444:23	0:0	8	.
water	444:24	0:0	8	avctx
arg	444:31	444:43	7	AV_LOG_DEBUG
water	444:31	0:0	8	AV_LOG_DEBUG
arg	444:45	444:68	7	"Frame num gap %d %d\n"
water	444:45	0:0	8	"Frame num gap %d %d\n"
arg	445:19	445:31	7	h->frame_num
water	445:19	0:0	8	h
op	445:20	0:0	8	->
water	445:22	0:0	8	frame_num
arg	445:33	445:50	7	h->prev_frame_num
water	445:33	0:0	8	h
op	445:34	0:0	8	->
water	445:36	0:0	8	prev_frame_num
water	445:51	0:0	6	;
if	446:12	448:45	6	(! h -> sps . gaps_in_frame_num_allowed_flag)
cond	446:16	446:24	7	! h -> sps . gaps_in_frame_num_allowed_flag
op	446:16	0:0	8	!
water	446:17	0:0	8	h
op	446:18	0:0	8	->
water	446:20	0:0	8	sps
op	446:23	0:0	8	.
water	446:24	0:0	8	gaps_in_frame_num_allowed_flag
stmts	447:16	448:45	7	
for	447:16	448:45	8	(i = 0 ;i <FF_ARRAY_ELEMS (h -> last_pocs );i ++)
forinit	447:20	447:23	9	i = 0 ;
water	447:20	0:0	10	i
op	447:21	0:0	10	=
water	447:22	0:0	10	0
water	447:23	0:0	10	;
cond	447:25	447:54	9	i <FF_ARRAY_ELEMS (h -> last_pocs )
water	447:25	0:0	10	i
op	447:26	0:0	10	<
call	447:27	447:54	10	FF_ARRAY_ELEMS
arg	447:42	447:54	11	h->last_pocs
water	447:42	0:0	12	h
op	447:43	0:0	12	->
water	447:45	0:0	12	last_pocs
forexpr	447:57	447:58	9	i ++
water	447:57	0:0	10	i
op	447:58	0:0	10	++
stmts	448:20	448:45	9	
water	448:20	0:0	10	h
op	448:21	0:0	10	->
water	448:23	0:0	10	last_pocs
op	448:32	0:0	10	[
water	448:33	0:0	10	i
op	448:34	0:0	10	]
op	448:36	0:0	10	=
water	448:38	0:0	10	INT_MIN
water	448:45	0:0	10	;
if	449:12	450:25	6	(ff_h264_frame_start (h ) < 0)
cond	449:16	449:41	7	ff_h264_frame_start (h ) < 0
call	449:16	449:37	8	ff_h264_frame_start
arg	449:36	449:37	9	h
water	449:36	0:0	10	h
op	449:39	0:0	8	<
water	449:41	0:0	8	0
stmts	450:16	450:25	7	
return	450:16	450:25	8	-1
op	450:23	0:0	9	-
water	450:24	0:0	9	1
water	451:12	0:0	6	h
op	451:13	0:0	6	->
water	451:15	0:0	6	prev_frame_num
op	451:29	0:0	6	++
water	451:31	0:0	6	;
water	452:12	0:0	6	h
op	452:13	0:0	6	->
water	452:15	0:0	6	prev_frame_num
op	452:30	0:0	6	%=
water	452:33	0:0	6	1
op	452:35	0:0	6	<<
water	452:38	0:0	6	h
op	452:39	0:0	6	->
water	452:41	0:0	6	sps
op	452:44	0:0	6	.
water	452:45	0:0	6	log2_max_frame_num
water	452:63	0:0	6	;
water	453:12	0:0	6	s
op	453:13	0:0	6	->
water	453:15	0:0	6	current_picture_ptr
op	453:34	0:0	6	->
water	453:36	0:0	6	frame_num
op	453:46	0:0	6	=
water	453:48	0:0	6	h
op	453:49	0:0	6	->
water	453:51	0:0	6	prev_frame_num
water	453:65	0:0	6	;
call	454:12	454:76	6	ff_thread_report_progress
arg	454:38	454:64	7	&s->current_picture_ptr->f
op	454:38	0:0	8	&
water	454:39	0:0	8	s
op	454:40	0:0	8	->
water	454:42	0:0	8	current_picture_ptr
op	454:61	0:0	8	->
water	454:63	0:0	8	f
arg	454:66	454:73	7	INT_MAX
water	454:66	0:0	8	INT_MAX
arg	454:75	454:76	7	0
water	454:75	0:0	8	0
water	454:77	0:0	6	;
call	455:12	455:76	6	ff_thread_report_progress
arg	455:38	455:64	7	&s->current_picture_ptr->f
op	455:38	0:0	8	&
water	455:39	0:0	8	s
op	455:40	0:0	8	->
water	455:42	0:0	8	current_picture_ptr
op	455:61	0:0	8	->
water	455:63	0:0	8	f
arg	455:66	455:73	7	INT_MAX
water	455:66	0:0	8	INT_MAX
arg	455:75	455:76	7	1
water	455:75	0:0	8	1
water	455:77	0:0	6	;
if	456:12	458:26	6	(( ret =ff_generate_sliding_window_mmcos (h ,1 ) ) < 0 && s -> avctx -> err_recognition & AV_EF_EXPLODE)
cond	456:16	457:44	7	( ret =ff_generate_sliding_window_mmcos (h ,1 ) ) < 0 && s -> avctx -> err_recognition & AV_EF_EXPLODE
water	456:16	0:0	8	(
water	456:17	0:0	8	ret
op	456:21	0:0	8	=
call	456:23	456:60	8	ff_generate_sliding_window_mmcos
arg	456:56	456:57	9	h
water	456:56	0:0	10	h
arg	456:59	456:60	9	1
water	456:59	0:0	10	1
water	456:61	0:0	8	)
op	456:63	0:0	8	<
water	456:65	0:0	8	0
op	456:67	0:0	8	&&
water	457:16	0:0	8	s
op	457:17	0:0	8	->
water	457:19	0:0	8	avctx
op	457:24	0:0	8	->
water	457:26	0:0	8	err_recognition
op	457:42	0:0	8	&
water	457:44	0:0	8	AV_EF_EXPLODE
stmts	458:16	458:26	7	
return	458:16	458:26	8	ret
water	458:23	0:0	9	ret
if	459:12	461:42	6	(ff_h264_execute_ref_pic_marking (h ,h -> mmco ,h -> mmco_index ) < 0 && ( s -> avctx -> err_recognition & AV_EF_EXPLODE ))
cond	459:16	460:58	7	ff_h264_execute_ref_pic_marking (h ,h -> mmco ,h -> mmco_index ) < 0 && ( s -> avctx -> err_recognition & AV_EF_EXPLODE )
call	459:16	459:73	8	ff_h264_execute_ref_pic_marking
arg	459:48	459:49	9	h
water	459:48	0:0	10	h
arg	459:51	459:58	9	h->mmco
water	459:51	0:0	10	h
op	459:52	0:0	10	->
water	459:54	0:0	10	mmco
arg	459:60	459:73	9	h->mmco_index
water	459:60	0:0	10	h
op	459:61	0:0	10	->
water	459:63	0:0	10	mmco_index
op	459:75	0:0	8	<
water	459:77	0:0	8	0
op	459:79	0:0	8	&&
water	460:16	0:0	8	(
water	460:17	0:0	8	s
op	460:18	0:0	8	->
water	460:20	0:0	8	avctx
op	460:25	0:0	8	->
water	460:27	0:0	8	err_recognition
op	460:43	0:0	8	&
water	460:45	0:0	8	AV_EF_EXPLODE
water	460:58	0:0	8	)
stmts	461:16	461:42	7	
return	461:16	461:42	8	AVERROR_INVALIDDATA
water	461:23	0:0	9	AVERROR_INVALIDDATA
if	468:12	476:12	6	(h -> short_ref_count)
cond	468:16	468:19	7	h -> short_ref_count
water	468:16	0:0	8	h
op	468:17	0:0	8	->
water	468:19	0:0	8	short_ref_count
stmts	468:36	476:12	7	
water	468:36	0:0	8	{
if	469:16	474:16	8	(prev)
cond	469:20	469:20	9	prev
water	469:20	0:0	10	prev
stmts	469:26	474:16	9	
water	469:26	0:0	10	{
call	470:20	472:88	10	av_image_copy
arg	470:34	470:57	11	h->short_ref[0]->f.data
water	470:34	0:0	12	h
op	470:35	0:0	12	->
water	470:37	0:0	12	short_ref
op	470:46	0:0	12	[
water	470:47	0:0	12	0
op	470:48	0:0	12	]
op	470:49	0:0	12	->
water	470:51	0:0	12	f
op	470:52	0:0	12	.
water	470:53	0:0	12	data
arg	470:59	470:86	11	h->short_ref[0]->f.linesize
water	470:59	0:0	12	h
op	470:60	0:0	12	->
water	470:62	0:0	12	short_ref
op	470:71	0:0	12	[
water	470:72	0:0	12	0
op	470:73	0:0	12	]
op	470:74	0:0	12	->
water	470:76	0:0	12	f
op	470:77	0:0	12	.
water	470:78	0:0	12	linesize
arg	471:34	471:64	11	(constuint8_t**)prev->f.data
water	471:34	0:0	12	(
water	471:35	0:0	12	const
water	471:41	0:0	12	uint8_t
op	471:49	0:0	12	*
op	471:50	0:0	12	*
water	471:51	0:0	12	)
water	471:52	0:0	12	prev
op	471:56	0:0	12	->
water	471:58	0:0	12	f
op	471:59	0:0	12	.
water	471:60	0:0	12	data
arg	471:66	471:82	11	prev->f.linesize
water	471:66	0:0	12	prev
op	471:70	0:0	12	->
water	471:72	0:0	12	f
op	471:73	0:0	12	.
water	471:74	0:0	12	linesize
arg	472:34	472:51	11	s->avctx->pix_fmt
water	472:34	0:0	12	s
op	472:35	0:0	12	->
water	472:37	0:0	12	avctx
op	472:42	0:0	12	->
water	472:44	0:0	12	pix_fmt
arg	472:53	472:69	11	s->mb_width*16
water	472:53	0:0	12	s
op	472:54	0:0	12	->
water	472:56	0:0	12	mb_width
op	472:65	0:0	12	*
water	472:67	0:0	12	16
arg	472:71	472:88	11	s->mb_height*16
water	472:71	0:0	12	s
op	472:72	0:0	12	->
water	472:74	0:0	12	mb_height
op	472:84	0:0	12	*
water	472:86	0:0	12	16
water	472:89	0:0	10	;
water	473:20	0:0	10	h
op	473:21	0:0	10	->
water	473:23	0:0	10	short_ref
op	473:32	0:0	10	[
water	473:33	0:0	10	0
op	473:34	0:0	10	]
op	473:35	0:0	10	->
water	473:37	0:0	10	poc
op	473:41	0:0	10	=
water	473:43	0:0	10	prev
op	473:47	0:0	10	->
water	473:49	0:0	10	poc
op	473:53	0:0	10	+
water	473:55	0:0	10	2
water	473:56	0:0	10	;
water	474:16	0:0	10	}
water	475:16	0:0	8	h
op	475:17	0:0	8	->
water	475:19	0:0	8	short_ref
op	475:28	0:0	8	[
water	475:29	0:0	8	0
op	475:30	0:0	8	]
op	475:31	0:0	8	->
water	475:33	0:0	8	frame_num
op	475:43	0:0	8	=
water	475:45	0:0	8	h
op	475:46	0:0	8	->
water	475:48	0:0	8	prev_frame_num
water	475:62	0:0	8	;
water	476:12	0:0	8	}
water	477:8	0:0	6	}
if	482:8	507:8	4	(s0 -> first_field)
cond	482:12	482:16	5	s0 -> first_field
water	482:12	0:0	6	s0
op	482:14	0:0	6	->
water	482:16	0:0	6	first_field
stmts	482:29	507:8	5	
water	482:29	0:0	6	{
call	483:12	483:42	6	assert
arg	483:19	483:42	7	s0->current_picture_ptr
water	483:19	0:0	8	s0
op	483:21	0:0	8	->
water	483:23	0:0	8	current_picture_ptr
water	483:43	0:0	6	;
call	484:12	484:53	6	assert
arg	484:19	484:53	7	s0->current_picture_ptr->f.data[0]
water	484:19	0:0	8	s0
op	484:21	0:0	8	->
water	484:23	0:0	8	current_picture_ptr
op	484:42	0:0	8	->
water	484:44	0:0	8	f
op	484:45	0:0	8	.
water	484:46	0:0	8	data
op	484:50	0:0	8	[
water	484:51	0:0	8	0
op	484:52	0:0	8	]
water	484:54	0:0	6	;
call	485:12	485:74	6	assert
arg	485:19	485:74	7	s0->current_picture_ptr->f.reference!=DELAYED_PIC_REF
water	485:19	0:0	8	s0
op	485:21	0:0	8	->
water	485:23	0:0	8	current_picture_ptr
op	485:42	0:0	8	->
water	485:44	0:0	8	f
op	485:45	0:0	8	.
water	485:46	0:0	8	reference
op	485:56	0:0	8	!=
water	485:59	0:0	8	DELAYED_PIC_REF
water	485:75	0:0	6	;
if	488:12	493:12	6	(! FIELD_PICTURE || s -> picture_structure == last_pic_structure)
cond	488:16	488:58	7	! FIELD_PICTURE || s -> picture_structure == last_pic_structure
op	488:16	0:0	8	!
water	488:17	0:0	8	FIELD_PICTURE
op	488:31	0:0	8	||
water	488:34	0:0	8	s
op	488:35	0:0	8	->
water	488:37	0:0	8	picture_structure
op	488:55	0:0	8	==
water	488:58	0:0	8	last_pic_structure
stmts	488:78	493:12	7	
water	488:78	0:0	8	{
water	491:16	0:0	8	s0
op	491:18	0:0	8	->
water	491:20	0:0	8	current_picture_ptr
op	491:40	0:0	8	=
water	491:42	0:0	8	NULL
water	491:46	0:0	8	;
water	492:16	0:0	8	s0
op	492:18	0:0	8	->
water	492:20	0:0	8	first_field
op	492:40	0:0	8	=
water	492:42	0:0	8	FIELD_PICTURE
water	492:55	0:0	8	;
water	493:12	0:0	8	}
else	493:14	506:12	6
stmts	493:19	506:12	7	
water	493:19	0:0	8	{
if	494:16	502:16	8	(s0 -> current_picture_ptr -> frame_num != h -> frame_num)
cond	494:20	494:61	9	s0 -> current_picture_ptr -> frame_num != h -> frame_num
water	494:20	0:0	10	s0
op	494:22	0:0	10	->
water	494:24	0:0	10	current_picture_ptr
op	494:43	0:0	10	->
water	494:45	0:0	10	frame_num
op	494:55	0:0	10	!=
water	494:58	0:0	10	h
op	494:59	0:0	10	->
water	494:61	0:0	10	frame_num
stmts	494:72	502:16	9	
water	494:72	0:0	10	{
call	495:20	496:86	10	ff_thread_report_progress
arg	495:46	495:79	11	(AVFrame*)s0->current_picture_ptr
water	495:46	0:0	12	(
water	495:47	0:0	12	AVFrame
op	495:54	0:0	12	*
water	495:55	0:0	12	)
water	495:56	0:0	12	s0
op	495:58	0:0	12	->
water	495:60	0:0	12	current_picture_ptr
arg	495:81	495:88	11	INT_MAX
water	495:81	0:0	12	INT_MAX
arg	496:46	496:86	11	s0->picture_structure==PICT_BOTTOM_FIELD
water	496:46	0:0	12	s0
op	496:48	0:0	12	->
water	496:50	0:0	12	picture_structure
op	496:67	0:0	12	==
water	496:69	0:0	12	PICT_BOTTOM_FIELD
water	496:87	0:0	10	;
water	500:20	0:0	10	s0
op	500:22	0:0	10	->
water	500:24	0:0	10	first_field
op	500:44	0:0	10	=
water	500:46	0:0	10	1
water	500:47	0:0	10	;
water	501:20	0:0	10	s0
op	501:22	0:0	10	->
water	501:24	0:0	10	current_picture_ptr
op	501:44	0:0	10	=
water	501:46	0:0	10	NULL
water	501:50	0:0	10	;
water	502:16	0:0	10	}
else	502:18	505:16	8
stmts	502:23	505:16	9	
water	502:23	0:0	10	{
water	504:20	0:0	10	s0
op	504:22	0:0	10	->
water	504:24	0:0	10	first_field
op	504:36	0:0	10	=
water	504:38	0:0	10	0
water	504:39	0:0	10	;
water	505:16	0:0	10	}
water	506:12	0:0	8	}
water	507:8	0:0	6	}
else	507:10	510:8	4
stmts	507:15	510:8	5	
water	507:15	0:0	6	{
water	509:12	0:0	6	s0
op	509:14	0:0	6	->
water	509:16	0:0	6	first_field
op	509:28	0:0	6	=
water	509:30	0:0	6	FIELD_PICTURE
water	509:43	0:0	6	;
water	510:8	0:0	6	}
if	512:8	517:8	4	(! FIELD_PICTURE || s0 -> first_field)
cond	512:12	512:34	5	! FIELD_PICTURE || s0 -> first_field
op	512:12	0:0	6	!
water	512:13	0:0	6	FIELD_PICTURE
op	512:27	0:0	6	||
water	512:30	0:0	6	s0
op	512:32	0:0	6	->
water	512:34	0:0	6	first_field
stmts	512:47	517:8	5	
water	512:47	0:0	6	{
if	513:12	516:12	6	(ff_h264_frame_start (h ) < 0)
cond	513:16	513:41	7	ff_h264_frame_start (h ) < 0
call	513:16	513:37	8	ff_h264_frame_start
arg	513:36	513:37	9	h
water	513:36	0:0	10	h
op	513:39	0:0	8	<
water	513:41	0:0	8	0
stmts	513:44	516:12	7	
water	513:44	0:0	8	{
water	514:16	0:0	8	s0
op	514:18	0:0	8	->
water	514:20	0:0	8	first_field
op	514:32	0:0	8	=
water	514:34	0:0	8	0
water	514:35	0:0	8	;
return	515:16	515:25	8	-1
op	515:23	0:0	9	-
water	515:24	0:0	9	1
water	516:12	0:0	8	}
water	517:8	0:0	6	}
else	517:10	519:8	4
stmts	517:15	519:8	5	
water	517:15	0:0	6	{
call	518:12	518:43	6	ff_release_unused_pictures
arg	518:39	518:40	7	s
water	518:39	0:0	8	s
arg	518:42	518:43	7	0
water	518:42	0:0	8	0
water	518:44	0:0	6	;
water	519:8	0:0	6	}
water	520:4	0:0	4	}
if	521:4	522:26	2	(h != h0)
cond	521:8	521:13	3	h != h0
water	521:8	0:0	4	h
op	521:10	0:0	4	!=
water	521:13	0:0	4	h0
stmts	522:8	522:26	3	
call	522:8	522:25	4	clone_slice
arg	522:20	522:21	5	h
water	522:20	0:0	6	h
arg	522:23	522:25	5	h0
water	522:23	0:0	6	h0
water	522:26	0:0	4	;
water	524:4	0:0	2	s
op	524:5	0:0	2	->
water	524:7	0:0	2	current_picture_ptr
op	524:26	0:0	2	->
water	524:28	0:0	2	frame_num
op	524:38	0:0	2	=
water	524:40	0:0	2	h
op	524:41	0:0	2	->
water	524:43	0:0	2	frame_num
water	524:52	0:0	2	;
call	526:4	526:50	2	assert
arg	526:11	526:50	3	s->mb_num==s->mb_width*s->mb_height
water	526:11	0:0	4	s
op	526:12	0:0	4	->
water	526:14	0:0	4	mb_num
op	526:21	0:0	4	==
water	526:24	0:0	4	s
op	526:25	0:0	4	->
water	526:27	0:0	4	mb_width
op	526:36	0:0	4	*
water	526:38	0:0	4	s
op	526:39	0:0	4	->
water	526:41	0:0	4	mb_height
water	526:51	0:0	2	;
if	527:4	531:4	2	(first_mb_in_slice << FIELD_OR_MBAFF_PICTURE >= s -> mb_num || first_mb_in_slice >= s -> mb_num)
cond	527:8	528:32	3	first_mb_in_slice << FIELD_OR_MBAFF_PICTURE >= s -> mb_num || first_mb_in_slice >= s -> mb_num
water	527:8	0:0	4	first_mb_in_slice
op	527:26	0:0	4	<<
water	527:29	0:0	4	FIELD_OR_MBAFF_PICTURE
op	527:52	0:0	4	>=
water	527:55	0:0	4	s
op	527:56	0:0	4	->
water	527:58	0:0	4	mb_num
op	527:65	0:0	4	||
water	528:8	0:0	4	first_mb_in_slice
op	528:26	0:0	4	>=
water	528:29	0:0	4	s
op	528:30	0:0	4	->
water	528:32	0:0	4	mb_num
stmts	528:40	531:4	3	
water	528:40	0:0	4	{
call	529:8	529:71	4	av_log
arg	529:15	529:25	5	h->s.avctx
water	529:15	0:0	6	h
op	529:16	0:0	6	->
water	529:18	0:0	6	s
op	529:19	0:0	6	.
water	529:20	0:0	6	avctx
arg	529:27	529:39	5	AV_LOG_ERROR
water	529:27	0:0	6	AV_LOG_ERROR
arg	529:41	529:71	5	"first_mb_in_slice overflow\n"
water	529:41	0:0	6	"first_mb_in_slice overflow\n"
water	529:72	0:0	4	;
return	530:8	530:17	4	-1
op	530:15	0:0	5	-
water	530:16	0:0	5	1
water	531:4	0:0	4	}
water	532:4	0:0	2	s
op	532:5	0:0	2	->
water	532:7	0:0	2	resync_mb_x
op	532:19	0:0	2	=
water	532:21	0:0	2	s
op	532:22	0:0	2	->
water	532:24	0:0	2	mb_x
op	532:29	0:0	2	=
water	532:32	0:0	2	first_mb_in_slice
op	532:50	0:0	2	%
water	532:52	0:0	2	s
op	532:53	0:0	2	->
water	532:55	0:0	2	mb_width
water	532:63	0:0	2	;
water	533:4	0:0	2	s
op	533:5	0:0	2	->
water	533:7	0:0	2	resync_mb_y
op	533:19	0:0	2	=
water	533:21	0:0	2	s
op	533:22	0:0	2	->
water	533:24	0:0	2	mb_y
op	533:29	0:0	2	=
water	533:31	0:0	2	(
water	533:32	0:0	2	first_mb_in_slice
op	533:50	0:0	2	/
water	533:52	0:0	2	s
op	533:53	0:0	2	->
water	533:55	0:0	2	mb_width
water	533:63	0:0	2	)
op	533:65	0:0	2	<<
water	533:68	0:0	2	FIELD_OR_MBAFF_PICTURE
water	533:90	0:0	2	;
if	534:4	535:46	2	(s -> picture_structure == PICT_BOTTOM_FIELD)
cond	534:8	534:32	3	s -> picture_structure == PICT_BOTTOM_FIELD
water	534:8	0:0	4	s
op	534:9	0:0	4	->
water	534:11	0:0	4	picture_structure
op	534:29	0:0	4	==
water	534:32	0:0	4	PICT_BOTTOM_FIELD
stmts	535:8	535:46	3	
water	535:8	0:0	4	s
op	535:9	0:0	4	->
water	535:11	0:0	4	resync_mb_y
op	535:23	0:0	4	=
water	535:25	0:0	4	s
op	535:26	0:0	4	->
water	535:28	0:0	4	mb_y
op	535:33	0:0	4	=
water	535:35	0:0	4	s
op	535:36	0:0	4	->
water	535:38	0:0	4	mb_y
op	535:43	0:0	4	+
water	535:45	0:0	4	1
water	535:46	0:0	4	;
call	536:4	536:33	2	assert
arg	536:11	536:33	3	s->mb_y<s->mb_height
water	536:11	0:0	4	s
op	536:12	0:0	4	->
water	536:14	0:0	4	mb_y
op	536:19	0:0	4	<
water	536:21	0:0	4	s
op	536:22	0:0	4	->
water	536:24	0:0	4	mb_height
water	536:34	0:0	2	;
if	538:4	541:4	2	(s -> picture_structure == PICT_FRAME)
cond	538:8	538:32	3	s -> picture_structure == PICT_FRAME
water	538:8	0:0	4	s
op	538:9	0:0	4	->
water	538:11	0:0	4	picture_structure
op	538:29	0:0	4	==
water	538:32	0:0	4	PICT_FRAME
stmts	538:44	541:4	3	
water	538:44	0:0	4	{
water	539:8	0:0	4	h
op	539:9	0:0	4	->
water	539:11	0:0	4	curr_pic_num
op	539:24	0:0	4	=
water	539:26	0:0	4	h
op	539:27	0:0	4	->
water	539:29	0:0	4	frame_num
water	539:38	0:0	4	;
water	540:8	0:0	4	h
op	540:9	0:0	4	->
water	540:11	0:0	4	max_pic_num
op	540:24	0:0	4	=
water	540:26	0:0	4	1
op	540:28	0:0	4	<<
water	540:31	0:0	4	h
op	540:32	0:0	4	->
water	540:34	0:0	4	sps
op	540:37	0:0	4	.
water	540:38	0:0	4	log2_max_frame_num
water	540:56	0:0	4	;
water	541:4	0:0	4	}
else	541:6	544:4	2
stmts	541:11	544:4	3	
water	541:11	0:0	4	{
water	542:8	0:0	4	h
op	542:9	0:0	4	->
water	542:11	0:0	4	curr_pic_num
op	542:24	0:0	4	=
water	542:26	0:0	4	2
op	542:28	0:0	4	*
water	542:30	0:0	4	h
op	542:31	0:0	4	->
water	542:33	0:0	4	frame_num
op	542:43	0:0	4	+
water	542:45	0:0	4	1
water	542:46	0:0	4	;
water	543:8	0:0	4	h
op	543:9	0:0	4	->
water	543:11	0:0	4	max_pic_num
op	543:24	0:0	4	=
water	543:26	0:0	4	1
op	543:28	0:0	4	<<
water	543:31	0:0	4	(
water	543:32	0:0	4	h
op	543:33	0:0	4	->
water	543:35	0:0	4	sps
op	543:38	0:0	4	.
water	543:39	0:0	4	log2_max_frame_num
op	543:58	0:0	4	+
water	543:60	0:0	4	1
water	543:61	0:0	4	)
water	543:62	0:0	4	;
water	544:4	0:0	4	}
if	546:4	547:29	2	(h -> nal_unit_type == NAL_IDR_SLICE)
cond	546:8	546:28	3	h -> nal_unit_type == NAL_IDR_SLICE
water	546:8	0:0	4	h
op	546:9	0:0	4	->
water	546:11	0:0	4	nal_unit_type
op	546:25	0:0	4	==
water	546:28	0:0	4	NAL_IDR_SLICE
stmts	547:8	547:29	3	
call	547:8	547:28	4	get_ue_golomb
arg	547:22	547:28	5	&s->gb
op	547:22	0:0	6	&
water	547:23	0:0	6	s
op	547:24	0:0	6	->
water	547:26	0:0	6	gb
water	547:29	0:0	4	;
if	549:4	554:4	2	(h -> sps . poc_type == 0)
cond	549:8	549:27	3	h -> sps . poc_type == 0
water	549:8	0:0	4	h
op	549:9	0:0	4	->
water	549:11	0:0	4	sps
op	549:14	0:0	4	.
water	549:15	0:0	4	poc_type
op	549:24	0:0	4	==
water	549:27	0:0	4	0
stmts	549:30	554:4	3	
water	549:30	0:0	4	{
water	550:8	0:0	4	h
op	550:9	0:0	4	->
water	550:11	0:0	4	poc_lsb
op	550:19	0:0	4	=
call	550:21	550:61	4	get_bits
arg	550:30	550:36	5	&s->gb
op	550:30	0:0	6	&
water	550:31	0:0	6	s
op	550:32	0:0	6	->
water	550:34	0:0	6	gb
arg	550:38	550:61	5	h->sps.log2_max_poc_lsb
water	550:38	0:0	6	h
op	550:39	0:0	6	->
water	550:41	0:0	6	sps
op	550:44	0:0	6	.
water	550:45	0:0	6	log2_max_poc_lsb
water	550:62	0:0	4	;
if	552:8	553:55	4	(h -> pps . pic_order_present == 1 && s -> picture_structure == PICT_FRAME)
cond	552:12	552:69	5	h -> pps . pic_order_present == 1 && s -> picture_structure == PICT_FRAME
water	552:12	0:0	6	h
op	552:13	0:0	6	->
water	552:15	0:0	6	pps
op	552:18	0:0	6	.
water	552:19	0:0	6	pic_order_present
op	552:37	0:0	6	==
water	552:40	0:0	6	1
op	552:42	0:0	6	&&
water	552:45	0:0	6	s
op	552:46	0:0	6	->
water	552:48	0:0	6	picture_structure
op	552:66	0:0	6	==
water	552:69	0:0	6	PICT_FRAME
stmts	553:12	553:55	5	
water	553:12	0:0	6	h
op	553:13	0:0	6	->
water	553:15	0:0	6	delta_poc_bottom
op	553:32	0:0	6	=
call	553:34	553:54	6	get_se_golomb
arg	553:48	553:54	7	&s->gb
op	553:48	0:0	8	&
water	553:49	0:0	8	s
op	553:50	0:0	8	->
water	553:52	0:0	8	gb
water	553:55	0:0	6	;
water	554:4	0:0	4	}
if	556:4	561:4	2	(h -> sps . poc_type == 1 && ! h -> sps . delta_pic_order_always_zero_flag)
cond	556:8	556:40	3	h -> sps . poc_type == 1 && ! h -> sps . delta_pic_order_always_zero_flag
water	556:8	0:0	4	h
op	556:9	0:0	4	->
water	556:11	0:0	4	sps
op	556:14	0:0	4	.
water	556:15	0:0	4	poc_type
op	556:24	0:0	4	==
water	556:27	0:0	4	1
op	556:29	0:0	4	&&
op	556:32	0:0	4	!
water	556:33	0:0	4	h
op	556:34	0:0	4	->
water	556:36	0:0	4	sps
op	556:39	0:0	4	.
water	556:40	0:0	4	delta_pic_order_always_zero_flag
stmts	556:74	561:4	3	
water	556:74	0:0	4	{
water	557:8	0:0	4	h
op	557:9	0:0	4	->
water	557:11	0:0	4	delta_poc
op	557:20	0:0	4	[
water	557:21	0:0	4	0
op	557:22	0:0	4	]
op	557:24	0:0	4	=
call	557:26	557:46	4	get_se_golomb
arg	557:40	557:46	5	&s->gb
op	557:40	0:0	6	&
water	557:41	0:0	6	s
op	557:42	0:0	6	->
water	557:44	0:0	6	gb
water	557:47	0:0	4	;
if	559:8	560:51	4	(h -> pps . pic_order_present == 1 && s -> picture_structure == PICT_FRAME)
cond	559:12	559:69	5	h -> pps . pic_order_present == 1 && s -> picture_structure == PICT_FRAME
water	559:12	0:0	6	h
op	559:13	0:0	6	->
water	559:15	0:0	6	pps
op	559:18	0:0	6	.
water	559:19	0:0	6	pic_order_present
op	559:37	0:0	6	==
water	559:40	0:0	6	1
op	559:42	0:0	6	&&
water	559:45	0:0	6	s
op	559:46	0:0	6	->
water	559:48	0:0	6	picture_structure
op	559:66	0:0	6	==
water	559:69	0:0	6	PICT_FRAME
stmts	560:12	560:51	5	
water	560:12	0:0	6	h
op	560:13	0:0	6	->
water	560:15	0:0	6	delta_poc
op	560:24	0:0	6	[
water	560:25	0:0	6	1
op	560:26	0:0	6	]
op	560:28	0:0	6	=
call	560:30	560:50	6	get_se_golomb
arg	560:44	560:50	7	&s->gb
op	560:44	0:0	8	&
water	560:45	0:0	8	s
op	560:46	0:0	8	->
water	560:48	0:0	8	gb
water	560:51	0:0	6	;
water	561:4	0:0	4	}
call	563:4	563:14	2	init_poc
arg	563:13	563:14	3	h
water	563:13	0:0	4	h
water	563:15	0:0	2	;
if	565:4	566:54	2	(h -> pps . redundant_pic_cnt_present)
cond	565:8	565:15	3	h -> pps . redundant_pic_cnt_present
water	565:8	0:0	4	h
op	565:9	0:0	4	->
water	565:11	0:0	4	pps
op	565:14	0:0	4	.
water	565:15	0:0	4	redundant_pic_cnt_present
stmts	566:8	566:54	3	
water	566:8	0:0	4	h
op	566:9	0:0	4	->
water	566:11	0:0	4	redundant_pic_count
op	566:31	0:0	4	=
call	566:33	566:53	4	get_ue_golomb
arg	566:47	566:53	5	&s->gb
op	566:47	0:0	6	&
water	566:48	0:0	6	s
op	566:49	0:0	6	->
water	566:51	0:0	6	gb
water	566:54	0:0	4	;
water	569:4	0:0	2	h
op	569:5	0:0	2	->
water	569:7	0:0	2	ref_count
op	569:16	0:0	2	[
water	569:17	0:0	2	0
op	569:18	0:0	2	]
op	569:20	0:0	2	=
water	569:22	0:0	2	h
op	569:23	0:0	2	->
water	569:25	0:0	2	pps
op	569:28	0:0	2	.
water	569:29	0:0	2	ref_count
op	569:38	0:0	2	[
water	569:39	0:0	2	0
op	569:40	0:0	2	]
water	569:41	0:0	2	;
water	570:4	0:0	2	h
op	570:5	0:0	2	->
water	570:7	0:0	2	ref_count
op	570:16	0:0	2	[
water	570:17	0:0	2	1
op	570:18	0:0	2	]
op	570:20	0:0	2	=
water	570:22	0:0	2	h
op	570:23	0:0	2	->
water	570:25	0:0	2	pps
op	570:28	0:0	2	.
water	570:29	0:0	2	ref_count
op	570:38	0:0	2	[
water	570:39	0:0	2	1
op	570:40	0:0	2	]
water	570:41	0:0	2	;
if	572:4	599:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I)
cond	572:8	572:29	3	h -> slice_type_nos != AV_PICTURE_TYPE_I
water	572:8	0:0	4	h
op	572:9	0:0	4	->
water	572:11	0:0	4	slice_type_nos
op	572:26	0:0	4	!=
water	572:29	0:0	4	AV_PICTURE_TYPE_I
stmts	572:48	599:4	3	
water	572:48	0:0	4	{
water	573:8	0:0	4	unsigned
water	573:17	0:0	4	max
op	573:20	0:0	4	[
water	573:21	0:0	4	2
op	573:22	0:0	4	]
water	573:23	0:0	4	;
water	574:8	0:0	4	max
op	574:11	0:0	4	[
water	574:12	0:0	4	0
op	574:13	0:0	4	]
op	574:15	0:0	4	=
water	574:17	0:0	4	max
op	574:20	0:0	4	[
water	574:21	0:0	4	1
op	574:22	0:0	4	]
op	574:24	0:0	4	=
water	574:26	0:0	4	s
op	574:27	0:0	4	->
water	574:29	0:0	4	picture_structure
op	574:47	0:0	4	==
water	574:50	0:0	4	PICT_FRAME
water	574:61	0:0	4	?
water	574:63	0:0	4	15
water	574:66	0:0	4	:
water	574:68	0:0	4	31
water	574:70	0:0	4	;
if	576:8	577:57	4	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	576:12	576:33	5	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	576:12	0:0	6	h
op	576:13	0:0	6	->
water	576:15	0:0	6	slice_type_nos
op	576:30	0:0	6	==
water	576:33	0:0	6	AV_PICTURE_TYPE_B
stmts	577:12	577:57	5	
water	577:12	0:0	6	h
op	577:13	0:0	6	->
water	577:15	0:0	6	direct_spatial_mv_pred
op	577:38	0:0	6	=
call	577:40	577:56	6	get_bits1
arg	577:50	577:56	7	&s->gb
op	577:50	0:0	8	&
water	577:51	0:0	8	s
op	577:52	0:0	8	->
water	577:54	0:0	8	gb
water	577:57	0:0	6	;
water	578:8	0:0	4	num_ref_idx_active_override_flag
op	578:41	0:0	4	=
call	578:43	578:59	4	get_bits1
arg	578:53	578:59	5	&s->gb
op	578:53	0:0	6	&
water	578:54	0:0	6	s
op	578:55	0:0	6	->
water	578:57	0:0	6	gb
water	578:60	0:0	4	;
if	580:8	587:8	4	(num_ref_idx_active_override_flag)
cond	580:12	580:12	5	num_ref_idx_active_override_flag
water	580:12	0:0	6	num_ref_idx_active_override_flag
stmts	580:46	587:8	5	
water	580:46	0:0	6	{
water	581:12	0:0	6	h
op	581:13	0:0	6	->
water	581:15	0:0	6	ref_count
op	581:24	0:0	6	[
water	581:25	0:0	6	0
op	581:26	0:0	6	]
op	581:28	0:0	6	=
call	581:30	581:50	6	get_ue_golomb
arg	581:44	581:50	7	&s->gb
op	581:44	0:0	8	&
water	581:45	0:0	8	s
op	581:46	0:0	8	->
water	581:48	0:0	8	gb
op	581:52	0:0	6	+
water	581:54	0:0	6	1
water	581:55	0:0	6	;
if	582:12	583:59	6	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	582:16	582:37	7	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	582:16	0:0	8	h
op	582:17	0:0	8	->
water	582:19	0:0	8	slice_type_nos
op	582:34	0:0	8	==
water	582:37	0:0	8	AV_PICTURE_TYPE_B
stmts	583:16	583:59	7	
water	583:16	0:0	8	h
op	583:17	0:0	8	->
water	583:19	0:0	8	ref_count
op	583:28	0:0	8	[
water	583:29	0:0	8	1
op	583:30	0:0	8	]
op	583:32	0:0	8	=
call	583:34	583:54	8	get_ue_golomb
arg	583:48	583:54	9	&s->gb
op	583:48	0:0	10	&
water	583:49	0:0	10	s
op	583:50	0:0	10	->
water	583:52	0:0	10	gb
op	583:56	0:0	8	+
water	583:58	0:0	8	1
water	583:59	0:0	8	;
else	584:12	586:35	6
stmts	586:16	586:35	7	
water	586:16	0:0	8	h
op	586:17	0:0	8	->
water	586:19	0:0	8	ref_count
op	586:28	0:0	8	[
water	586:29	0:0	8	1
op	586:30	0:0	8	]
op	586:32	0:0	8	=
water	586:34	0:0	8	1
water	586:35	0:0	8	;
water	587:8	0:0	6	}
if	589:8	593:8	4	(h -> ref_count [ 0 ] - 1 > max [ 0 ] || h -> ref_count [ 1 ] - 1 > max [ 1 ])
cond	589:12	589:67	5	h -> ref_count [ 0 ] - 1 > max [ 0 ] || h -> ref_count [ 1 ] - 1 > max [ 1 ]
water	589:12	0:0	6	h
op	589:13	0:0	6	->
water	589:15	0:0	6	ref_count
op	589:24	0:0	6	[
water	589:25	0:0	6	0
op	589:26	0:0	6	]
op	589:27	0:0	6	-
water	589:28	0:0	6	1
op	589:30	0:0	6	>
water	589:32	0:0	6	max
op	589:35	0:0	6	[
water	589:36	0:0	6	0
op	589:37	0:0	6	]
op	589:39	0:0	6	||
water	589:42	0:0	6	h
op	589:43	0:0	6	->
water	589:45	0:0	6	ref_count
op	589:54	0:0	6	[
water	589:55	0:0	6	1
op	589:56	0:0	6	]
op	589:57	0:0	6	-
water	589:58	0:0	6	1
op	589:60	0:0	6	>
water	589:62	0:0	6	max
op	589:65	0:0	6	[
water	589:66	0:0	6	1
op	589:67	0:0	6	]
stmts	589:69	593:8	5	
water	589:69	0:0	6	{
call	590:12	590:140	6	av_log
arg	590:19	590:29	7	h->s.avctx
water	590:19	0:0	8	h
op	590:20	0:0	8	->
water	590:22	0:0	8	s
op	590:23	0:0	8	.
water	590:24	0:0	8	avctx
arg	590:31	590:43	7	AV_LOG_ERROR
water	590:31	0:0	8	AV_LOG_ERROR
arg	590:45	590:86	7	"reference overflow %u > %u or %u > %u\n"
water	590:45	0:0	8	"reference overflow %u > %u or %u > %u\n"
arg	590:88	590:105	7	h->ref_count[0]-1
water	590:88	0:0	8	h
op	590:89	0:0	8	->
water	590:91	0:0	8	ref_count
op	590:100	0:0	8	[
water	590:101	0:0	8	0
op	590:102	0:0	8	]
op	590:103	0:0	8	-
water	590:104	0:0	8	1
arg	590:107	590:113	7	max[0]
water	590:107	0:0	8	max
op	590:110	0:0	8	[
water	590:111	0:0	8	0
op	590:112	0:0	8	]
arg	590:115	590:132	7	h->ref_count[1]-1
water	590:115	0:0	8	h
op	590:116	0:0	8	->
water	590:118	0:0	8	ref_count
op	590:127	0:0	8	[
water	590:128	0:0	8	1
op	590:129	0:0	8	]
op	590:130	0:0	8	-
water	590:131	0:0	8	1
arg	590:134	590:140	7	max[1]
water	590:134	0:0	8	max
op	590:137	0:0	8	[
water	590:138	0:0	8	1
op	590:139	0:0	8	]
water	590:141	0:0	6	;
water	591:12	0:0	6	h
op	591:13	0:0	6	->
water	591:15	0:0	6	ref_count
op	591:24	0:0	6	[
water	591:25	0:0	6	0
op	591:26	0:0	6	]
op	591:28	0:0	6	=
water	591:30	0:0	6	h
op	591:31	0:0	6	->
water	591:33	0:0	6	ref_count
op	591:42	0:0	6	[
water	591:43	0:0	6	1
op	591:44	0:0	6	]
op	591:46	0:0	6	=
water	591:48	0:0	6	1
water	591:49	0:0	6	;
return	592:12	592:38	6	AVERROR_INVALIDDATA
water	592:19	0:0	7	AVERROR_INVALIDDATA
water	593:8	0:0	6	}
if	595:8	596:29	4	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	595:12	595:33	5	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	595:12	0:0	6	h
op	595:13	0:0	6	->
water	595:15	0:0	6	slice_type_nos
op	595:30	0:0	6	==
water	595:33	0:0	6	AV_PICTURE_TYPE_B
stmts	596:12	596:29	5	
water	596:12	0:0	6	h
op	596:13	0:0	6	->
water	596:15	0:0	6	list_count
op	596:26	0:0	6	=
water	596:28	0:0	6	2
water	596:29	0:0	6	;
else	597:8	598:29	4
stmts	598:12	598:29	5	
water	598:12	0:0	6	h
op	598:13	0:0	6	->
water	598:15	0:0	6	list_count
op	598:26	0:0	6	=
water	598:28	0:0	6	1
water	598:29	0:0	6	;
water	599:4	0:0	4	}
else	599:6	600:58	2
stmts	600:8	600:58	3	
water	600:8	0:0	4	h
op	600:9	0:0	4	->
water	600:11	0:0	4	ref_count
op	600:20	0:0	4	[
water	600:21	0:0	4	1
op	600:22	0:0	4	]
op	600:23	0:0	4	=
water	600:25	0:0	4	h
op	600:26	0:0	4	->
water	600:28	0:0	4	ref_count
op	600:37	0:0	4	[
water	600:38	0:0	4	0
op	600:39	0:0	4	]
op	600:40	0:0	4	=
water	600:42	0:0	4	h
op	600:43	0:0	4	->
water	600:45	0:0	4	list_count
op	600:55	0:0	4	=
water	600:57	0:0	4	0
water	600:58	0:0	4	;
if	602:4	603:40	2	(! default_ref_list_done)
cond	602:8	602:9	3	! default_ref_list_done
op	602:8	0:0	4	!
water	602:9	0:0	4	default_ref_list_done
stmts	603:8	603:40	3	
call	603:8	603:39	4	ff_h264_fill_default_ref_list
arg	603:38	603:39	5	h
water	603:38	0:0	6	h
water	603:40	0:0	4	;
if	605:4	609:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I &&ff_h264_decode_ref_pic_list_reordering (h ) < 0)
cond	605:8	606:52	3	h -> slice_type_nos != AV_PICTURE_TYPE_I &&ff_h264_decode_ref_pic_list_reordering (h ) < 0
water	605:8	0:0	4	h
op	605:9	0:0	4	->
water	605:11	0:0	4	slice_type_nos
op	605:26	0:0	4	!=
water	605:29	0:0	4	AV_PICTURE_TYPE_I
op	605:47	0:0	4	&&
call	606:8	606:48	4	ff_h264_decode_ref_pic_list_reordering
arg	606:47	606:48	5	h
water	606:47	0:0	6	h
op	606:50	0:0	4	<
water	606:52	0:0	4	0
stmts	606:55	609:4	3	
water	606:55	0:0	4	{
water	607:8	0:0	4	h
op	607:9	0:0	4	->
water	607:11	0:0	4	ref_count
op	607:20	0:0	4	[
water	607:21	0:0	4	1
op	607:22	0:0	4	]
op	607:24	0:0	4	=
water	607:26	0:0	4	h
op	607:27	0:0	4	->
water	607:29	0:0	4	ref_count
op	607:38	0:0	4	[
water	607:39	0:0	4	0
op	607:40	0:0	4	]
op	607:42	0:0	4	=
water	607:44	0:0	4	0
water	607:45	0:0	4	;
return	608:8	608:17	4	-1
op	608:15	0:0	5	-
water	608:16	0:0	5	1
water	609:4	0:0	4	}
if	611:4	614:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I)
cond	611:8	611:29	3	h -> slice_type_nos != AV_PICTURE_TYPE_I
water	611:8	0:0	4	h
op	611:9	0:0	4	->
water	611:11	0:0	4	slice_type_nos
op	611:26	0:0	4	!=
water	611:29	0:0	4	AV_PICTURE_TYPE_I
stmts	611:48	614:4	3	
water	611:48	0:0	4	{
water	612:8	0:0	4	s
op	612:9	0:0	4	->
water	612:11	0:0	4	last_picture_ptr
op	612:28	0:0	4	=
op	612:30	0:0	4	&
water	612:31	0:0	4	h
op	612:32	0:0	4	->
water	612:34	0:0	4	ref_list
op	612:42	0:0	4	[
water	612:43	0:0	4	0
op	612:44	0:0	4	]
op	612:45	0:0	4	[
water	612:46	0:0	4	0
op	612:47	0:0	4	]
water	612:48	0:0	4	;
call	613:8	613:61	4	ff_copy_picture
arg	613:24	613:40	5	&s->last_picture
op	613:24	0:0	6	&
water	613:25	0:0	6	s
op	613:26	0:0	6	->
water	613:28	0:0	6	last_picture
arg	613:42	613:61	5	s->last_picture_ptr
water	613:42	0:0	6	s
op	613:43	0:0	6	->
water	613:45	0:0	6	last_picture_ptr
water	613:62	0:0	4	;
water	614:4	0:0	4	}
if	615:4	618:4	2	(h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	615:8	615:29	3	h -> slice_type_nos == AV_PICTURE_TYPE_B
water	615:8	0:0	4	h
op	615:9	0:0	4	->
water	615:11	0:0	4	slice_type_nos
op	615:26	0:0	4	==
water	615:29	0:0	4	AV_PICTURE_TYPE_B
stmts	615:48	618:4	3	
water	615:48	0:0	4	{
water	616:8	0:0	4	s
op	616:9	0:0	4	->
water	616:11	0:0	4	next_picture_ptr
op	616:28	0:0	4	=
op	616:30	0:0	4	&
water	616:31	0:0	4	h
op	616:32	0:0	4	->
water	616:34	0:0	4	ref_list
op	616:42	0:0	4	[
water	616:43	0:0	4	1
op	616:44	0:0	4	]
op	616:45	0:0	4	[
water	616:46	0:0	4	0
op	616:47	0:0	4	]
water	616:48	0:0	4	;
call	617:8	617:61	4	ff_copy_picture
arg	617:24	617:40	5	&s->next_picture
op	617:24	0:0	6	&
water	617:25	0:0	6	s
op	617:26	0:0	6	->
water	617:28	0:0	6	next_picture
arg	617:42	617:61	5	s->next_picture_ptr
water	617:42	0:0	6	s
op	617:43	0:0	6	->
water	617:45	0:0	6	next_picture_ptr
water	617:62	0:0	4	;
water	618:4	0:0	4	}
if	620:4	623:28	2	(( h -> pps . weighted_pred && h -> slice_type_nos == AV_PICTURE_TYPE_P ) || ( h -> pps . weighted_bipred_idc == 1 && h -> slice_type_nos == AV_PICTURE_TYPE_B ))
cond	620:8	622:47	3	( h -> pps . weighted_pred && h -> slice_type_nos == AV_PICTURE_TYPE_P ) || ( h -> pps . weighted_bipred_idc == 1 && h -> slice_type_nos == AV_PICTURE_TYPE_B )
water	620:8	0:0	4	(
water	620:9	0:0	4	h
op	620:10	0:0	4	->
water	620:12	0:0	4	pps
op	620:15	0:0	4	.
water	620:16	0:0	4	weighted_pred
op	620:30	0:0	4	&&
water	620:33	0:0	4	h
op	620:34	0:0	4	->
water	620:36	0:0	4	slice_type_nos
op	620:51	0:0	4	==
water	620:54	0:0	4	AV_PICTURE_TYPE_P
water	620:71	0:0	4	)
op	620:73	0:0	4	||
water	621:8	0:0	4	(
water	621:9	0:0	4	h
op	621:10	0:0	4	->
water	621:12	0:0	4	pps
op	621:15	0:0	4	.
water	621:16	0:0	4	weighted_bipred_idc
op	621:36	0:0	4	==
water	621:39	0:0	4	1
op	621:41	0:0	4	&&
water	622:9	0:0	4	h
op	622:10	0:0	4	->
water	622:12	0:0	4	slice_type_nos
op	622:27	0:0	4	==
water	622:30	0:0	4	AV_PICTURE_TYPE_B
water	622:47	0:0	4	)
stmts	623:8	623:28	3	
call	623:8	623:27	4	pred_weight_table
arg	623:26	623:27	5	h
water	623:26	0:0	6	h
water	623:28	0:0	4	;
else	624:4	627:4	2
stmts	624:9	627:4	3	
if	624:9	627:4	4	(h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	624:13	625:34	5	h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B
water	624:13	0:0	6	h
op	624:14	0:0	6	->
water	624:16	0:0	6	pps
op	624:19	0:0	6	.
water	624:20	0:0	6	weighted_bipred_idc
op	624:40	0:0	6	==
water	624:43	0:0	6	2
op	624:45	0:0	6	&&
water	625:13	0:0	6	h
op	625:14	0:0	6	->
water	625:16	0:0	6	slice_type_nos
op	625:31	0:0	6	==
water	625:34	0:0	6	AV_PICTURE_TYPE_B
stmts	625:53	627:4	5	
water	625:53	0:0	6	{
call	626:8	626:35	6	implicit_weight_table
arg	626:30	626:31	7	h
water	626:30	0:0	8	h
arg	626:33	626:35	7	-1
op	626:33	0:0	8	-
water	626:34	0:0	8	1
water	626:36	0:0	6	;
water	627:4	0:0	6	}
else	627:6	633:4	2
stmts	627:11	633:4	3	
water	627:11	0:0	4	{
water	628:8	0:0	4	h
op	628:9	0:0	4	->
water	628:11	0:0	4	use_weight
op	628:22	0:0	4	=
water	628:24	0:0	4	0
water	628:25	0:0	4	;
for	629:8	632:8	4	(i = 0 ;i < 2;i ++)
forinit	629:13	629:18	5	i = 0 ;
water	629:13	0:0	6	i
op	629:15	0:0	6	=
water	629:17	0:0	6	0
water	629:18	0:0	6	;
cond	629:20	629:24	5	i < 2
water	629:20	0:0	6	i
op	629:22	0:0	6	<
water	629:24	0:0	6	2
forexpr	629:27	629:28	5	i ++
water	629:27	0:0	6	i
op	629:28	0:0	6	++
stmts	629:32	632:8	5	
water	629:32	0:0	6	{
water	630:12	0:0	6	h
op	630:13	0:0	6	->
water	630:15	0:0	6	luma_weight_flag
op	630:31	0:0	6	[
water	630:32	0:0	6	i
op	630:33	0:0	6	]
op	630:37	0:0	6	=
water	630:39	0:0	6	0
water	630:40	0:0	6	;
water	631:12	0:0	6	h
op	631:13	0:0	6	->
water	631:15	0:0	6	chroma_weight_flag
op	631:33	0:0	6	[
water	631:34	0:0	6	i
op	631:35	0:0	6	]
op	631:37	0:0	6	=
water	631:39	0:0	6	0
water	631:40	0:0	6	;
water	632:8	0:0	6	}
water	633:4	0:0	4	}
if	640:4	645:34	2	(h -> nal_ref_idc &&ff_h264_decode_ref_pic_marking (h0 ,& s -> gb ,! ( s -> avctx -> active_thread_type & FF_THREAD_FRAME ) || h0 -> current_slice == 0 ) < 0 && ( s -> avctx -> err_recognition & AV_EF_EXPLODE ))
cond	640:8	644:50	3	h -> nal_ref_idc &&ff_h264_decode_ref_pic_marking (h0 ,& s -> gb ,! ( s -> avctx -> active_thread_type & FF_THREAD_FRAME ) || h0 -> current_slice == 0 ) < 0 && ( s -> avctx -> err_recognition & AV_EF_EXPLODE )
water	640:8	0:0	4	h
op	640:9	0:0	4	->
water	640:11	0:0	4	nal_ref_idc
op	640:23	0:0	4	&&
call	641:8	643:50	4	ff_h264_decode_ref_pic_marking
arg	641:39	641:41	5	h0
water	641:39	0:0	6	h0
arg	641:43	641:49	5	&s->gb
op	641:43	0:0	6	&
water	641:44	0:0	6	s
op	641:45	0:0	6	->
water	641:47	0:0	6	gb
arg	642:28	643:50	5	!(s->avctx->active_thread_type&FF_THREAD_FRAME)||h0->current_slice==0
op	642:28	0:0	6	!
water	642:29	0:0	6	(
water	642:30	0:0	6	s
op	642:31	0:0	6	->
water	642:33	0:0	6	avctx
op	642:38	0:0	6	->
water	642:40	0:0	6	active_thread_type
op	642:59	0:0	6	&
water	642:61	0:0	6	FF_THREAD_FRAME
water	642:76	0:0	6	)
op	642:78	0:0	6	||
water	643:28	0:0	6	h0
op	643:30	0:0	6	->
water	643:32	0:0	6	current_slice
op	643:46	0:0	6	==
water	643:49	0:0	6	0
op	643:52	0:0	4	<
water	643:54	0:0	4	0
op	643:56	0:0	4	&&
water	644:8	0:0	4	(
water	644:9	0:0	4	s
op	644:10	0:0	4	->
water	644:12	0:0	4	avctx
op	644:17	0:0	4	->
water	644:19	0:0	4	err_recognition
op	644:35	0:0	4	&
water	644:37	0:0	4	AV_EF_EXPLODE
water	644:50	0:0	4	)
stmts	645:8	645:34	3	
return	645:8	645:34	4	AVERROR_INVALIDDATA
water	645:15	0:0	5	AVERROR_INVALIDDATA
if	647:4	654:4	2	(FRAME_MBAFF)
cond	647:8	647:8	3	FRAME_MBAFF
water	647:8	0:0	4	FRAME_MBAFF
stmts	647:21	654:4	3	
water	647:21	0:0	4	{
call	648:8	648:37	4	ff_h264_fill_mbaff_ref_list
arg	648:36	648:37	5	h
water	648:36	0:0	6	h
water	648:38	0:0	4	;
if	650:8	653:8	4	(h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B)
cond	650:12	650:68	5	h -> pps . weighted_bipred_idc == 2 && h -> slice_type_nos == AV_PICTURE_TYPE_B
water	650:12	0:0	6	h
op	650:13	0:0	6	->
water	650:15	0:0	6	pps
op	650:18	0:0	6	.
water	650:19	0:0	6	weighted_bipred_idc
op	650:39	0:0	6	==
water	650:42	0:0	6	2
op	650:44	0:0	6	&&
water	650:47	0:0	6	h
op	650:48	0:0	6	->
water	650:50	0:0	6	slice_type_nos
op	650:65	0:0	6	==
water	650:68	0:0	6	AV_PICTURE_TYPE_B
stmts	650:87	653:8	5	
water	650:87	0:0	6	{
call	651:12	651:38	6	implicit_weight_table
arg	651:34	651:35	7	h
water	651:34	0:0	8	h
arg	651:37	651:38	7	0
water	651:37	0:0	8	0
water	651:39	0:0	6	;
call	652:12	652:38	6	implicit_weight_table
arg	652:34	652:35	7	h
water	652:34	0:0	8	h
arg	652:37	652:38	7	1
water	652:37	0:0	8	1
water	652:39	0:0	6	;
water	653:8	0:0	6	}
water	654:4	0:0	4	}
if	656:4	657:43	2	(h -> slice_type_nos == AV_PICTURE_TYPE_B && ! h -> direct_spatial_mv_pred)
cond	656:8	656:54	3	h -> slice_type_nos == AV_PICTURE_TYPE_B && ! h -> direct_spatial_mv_pred
water	656:8	0:0	4	h
op	656:9	0:0	4	->
water	656:11	0:0	4	slice_type_nos
op	656:26	0:0	4	==
water	656:29	0:0	4	AV_PICTURE_TYPE_B
op	656:47	0:0	4	&&
op	656:50	0:0	4	!
water	656:51	0:0	4	h
op	656:52	0:0	4	->
water	656:54	0:0	4	direct_spatial_mv_pred
stmts	657:8	657:43	3	
call	657:8	657:42	4	ff_h264_direct_dist_scale_factor
arg	657:41	657:42	5	h
water	657:41	0:0	6	h
water	657:43	0:0	4	;
call	658:4	658:34	2	ff_h264_direct_ref_list_init
arg	658:33	658:34	3	h
water	658:33	0:0	4	h
water	658:35	0:0	2	;
if	660:4	667:4	2	(h -> slice_type_nos != AV_PICTURE_TYPE_I && h -> pps . cabac)
cond	660:8	660:57	3	h -> slice_type_nos != AV_PICTURE_TYPE_I && h -> pps . cabac
water	660:8	0:0	4	h
op	660:9	0:0	4	->
water	660:11	0:0	4	slice_type_nos
op	660:26	0:0	4	!=
water	660:29	0:0	4	AV_PICTURE_TYPE_I
op	660:47	0:0	4	&&
water	660:50	0:0	4	h
op	660:51	0:0	4	->
water	660:53	0:0	4	pps
op	660:56	0:0	4	.
water	660:57	0:0	4	cabac
stmts	660:64	667:4	3	
water	660:64	0:0	4	{
water	661:8	0:0	4	tmp
op	661:12	0:0	4	=
call	661:14	661:37	4	get_ue_golomb_31
arg	661:31	661:37	5	&s->gb
op	661:31	0:0	6	&
water	661:32	0:0	6	s
op	661:33	0:0	6	->
water	661:35	0:0	6	gb
water	661:38	0:0	4	;
if	662:8	665:8	4	(tmp > 2)
cond	662:12	662:18	5	tmp > 2
water	662:12	0:0	6	tmp
op	662:16	0:0	6	>
water	662:18	0:0	6	2
stmts	662:21	665:8	5	
water	662:21	0:0	6	{
call	663:12	663:70	6	av_log
arg	663:19	663:27	7	s->avctx
water	663:19	0:0	8	s
op	663:20	0:0	8	->
water	663:22	0:0	8	avctx
arg	663:29	663:41	7	AV_LOG_ERROR
water	663:29	0:0	8	AV_LOG_ERROR
arg	663:43	663:70	7	"cabac_init_idc overflow\n"
water	663:43	0:0	8	"cabac_init_idc overflow\n"
water	663:71	0:0	6	;
return	664:12	664:21	6	-1
op	664:19	0:0	7	-
water	664:20	0:0	7	1
water	665:8	0:0	6	}
water	666:8	0:0	4	h
op	666:9	0:0	4	->
water	666:11	0:0	4	cabac_init_idc
op	666:26	0:0	4	=
water	666:28	0:0	4	tmp
water	666:31	0:0	4	;
water	667:4	0:0	4	}
water	669:4	0:0	2	h
op	669:5	0:0	2	->
water	669:7	0:0	2	last_qscale_diff
op	669:24	0:0	2	=
water	669:26	0:0	2	0
water	669:27	0:0	2	;
water	670:4	0:0	2	tmp
op	670:8	0:0	2	=
water	670:10	0:0	2	h
op	670:11	0:0	2	->
water	670:13	0:0	2	pps
op	670:16	0:0	2	.
water	670:17	0:0	2	init_qp
op	670:25	0:0	2	+
call	670:27	670:47	2	get_se_golomb
arg	670:41	670:47	3	&s->gb
op	670:41	0:0	4	&
water	670:42	0:0	4	s
op	670:43	0:0	4	->
water	670:45	0:0	4	gb
water	670:48	0:0	2	;
if	671:4	674:4	2	(tmp > 51 + 6 * ( h -> sps . bit_depth_luma - 8 ))
cond	671:8	671:49	3	tmp > 51 + 6 * ( h -> sps . bit_depth_luma - 8 )
water	671:8	0:0	4	tmp
op	671:12	0:0	4	>
water	671:14	0:0	4	51
op	671:17	0:0	4	+
water	671:19	0:0	4	6
op	671:21	0:0	4	*
water	671:23	0:0	4	(
water	671:24	0:0	4	h
op	671:25	0:0	4	->
water	671:27	0:0	4	sps
op	671:30	0:0	4	.
water	671:31	0:0	4	bit_depth_luma
op	671:46	0:0	4	-
water	671:48	0:0	4	8
water	671:49	0:0	4	)
stmts	671:52	674:4	3	
water	671:52	0:0	4	{
call	672:8	672:66	4	av_log
arg	672:15	672:23	5	s->avctx
water	672:15	0:0	6	s
op	672:16	0:0	6	->
water	672:18	0:0	6	avctx
arg	672:25	672:37	5	AV_LOG_ERROR
water	672:25	0:0	6	AV_LOG_ERROR
arg	672:39	672:61	5	"QP %u out of range\n"
water	672:39	0:0	6	"QP %u out of range\n"
arg	672:63	672:66	5	tmp
water	672:63	0:0	6	tmp
water	672:67	0:0	4	;
return	673:8	673:17	4	-1
op	673:15	0:0	5	-
water	673:16	0:0	5	1
water	674:4	0:0	4	}
water	675:4	0:0	2	s
op	675:5	0:0	2	->
water	675:7	0:0	2	qscale
op	675:20	0:0	2	=
water	675:22	0:0	2	tmp
water	675:25	0:0	2	;
water	676:4	0:0	2	h
op	676:5	0:0	2	->
water	676:7	0:0	2	chroma_qp
op	676:16	0:0	2	[
water	676:17	0:0	2	0
op	676:18	0:0	2	]
op	676:20	0:0	2	=
call	676:22	676:51	2	get_chroma_qp
arg	676:36	676:37	3	h
water	676:36	0:0	4	h
arg	676:39	676:40	3	0
water	676:39	0:0	4	0
arg	676:42	676:51	3	s->qscale
water	676:42	0:0	4	s
op	676:43	0:0	4	->
water	676:45	0:0	4	qscale
water	676:52	0:0	2	;
water	677:4	0:0	2	h
op	677:5	0:0	2	->
water	677:7	0:0	2	chroma_qp
op	677:16	0:0	2	[
water	677:17	0:0	2	1
op	677:18	0:0	2	]
op	677:20	0:0	2	=
call	677:22	677:51	2	get_chroma_qp
arg	677:36	677:37	3	h
water	677:36	0:0	4	h
arg	677:39	677:40	3	1
water	677:39	0:0	4	1
arg	677:42	677:51	3	s->qscale
water	677:42	0:0	4	s
op	677:43	0:0	4	->
water	677:45	0:0	4	qscale
water	677:52	0:0	2	;
if	679:4	680:25	2	(h -> slice_type == AV_PICTURE_TYPE_SP)
cond	679:8	679:25	3	h -> slice_type == AV_PICTURE_TYPE_SP
water	679:8	0:0	4	h
op	679:9	0:0	4	->
water	679:11	0:0	4	slice_type
op	679:22	0:0	4	==
water	679:25	0:0	4	AV_PICTURE_TYPE_SP
stmts	680:8	680:25	3	
call	680:8	680:24	4	get_bits1
arg	680:18	680:24	5	&s->gb
op	680:18	0:0	6	&
water	680:19	0:0	6	s
op	680:20	0:0	6	->
water	680:22	0:0	6	gb
water	680:25	0:0	4	;
if	681:4	683:29	2	(h -> slice_type == AV_PICTURE_TYPE_SP || h -> slice_type == AV_PICTURE_TYPE_SI)
cond	681:8	682:25	3	h -> slice_type == AV_PICTURE_TYPE_SP || h -> slice_type == AV_PICTURE_TYPE_SI
water	681:8	0:0	4	h
op	681:9	0:0	4	->
water	681:11	0:0	4	slice_type
op	681:22	0:0	4	==
water	681:25	0:0	4	AV_PICTURE_TYPE_SP
op	681:44	0:0	4	||
water	682:8	0:0	4	h
op	682:9	0:0	4	->
water	682:11	0:0	4	slice_type
op	682:22	0:0	4	==
water	682:25	0:0	4	AV_PICTURE_TYPE_SI
stmts	683:8	683:29	3	
call	683:8	683:28	4	get_se_golomb
arg	683:22	683:28	5	&s->gb
op	683:22	0:0	6	&
water	683:23	0:0	6	s
op	683:24	0:0	6	->
water	683:26	0:0	6	gb
water	683:29	0:0	4	;
water	685:4	0:0	2	h
op	685:5	0:0	2	->
water	685:7	0:0	2	deblocking_filter
op	685:29	0:0	2	=
water	685:31	0:0	2	1
water	685:32	0:0	2	;
water	686:4	0:0	2	h
op	686:5	0:0	2	->
water	686:7	0:0	2	slice_alpha_c0_offset
op	686:29	0:0	2	=
water	686:31	0:0	2	52
water	686:33	0:0	2	;
water	687:4	0:0	2	h
op	687:5	0:0	2	->
water	687:7	0:0	2	slice_beta_offset
op	687:29	0:0	2	=
water	687:31	0:0	2	52
water	687:33	0:0	2	;
if	688:4	710:4	2	(h -> pps . deblocking_filter_parameters_present)
cond	688:8	688:15	3	h -> pps . deblocking_filter_parameters_present
water	688:8	0:0	4	h
op	688:9	0:0	4	->
water	688:11	0:0	4	pps
op	688:14	0:0	4	.
water	688:15	0:0	4	deblocking_filter_parameters_present
stmts	688:53	710:4	3	
water	688:53	0:0	4	{
water	689:8	0:0	4	tmp
op	689:12	0:0	4	=
call	689:14	689:37	4	get_ue_golomb_31
arg	689:31	689:37	5	&s->gb
op	689:31	0:0	6	&
water	689:32	0:0	6	s
op	689:33	0:0	6	->
water	689:35	0:0	6	gb
water	689:38	0:0	4	;
if	690:8	694:8	4	(tmp > 2)
cond	690:12	690:18	5	tmp > 2
water	690:12	0:0	6	tmp
op	690:16	0:0	6	>
water	690:18	0:0	6	2
stmts	690:21	694:8	5	
water	690:21	0:0	6	{
call	691:12	692:65	6	av_log
arg	691:19	691:27	7	s->avctx
water	691:19	0:0	8	s
op	691:20	0:0	8	->
water	691:22	0:0	8	avctx
arg	691:29	691:41	7	AV_LOG_ERROR
water	691:29	0:0	8	AV_LOG_ERROR
arg	692:19	692:60	7	"deblocking_filter_idc %u out of range\n"
water	692:19	0:0	8	"deblocking_filter_idc %u out of range\n"
arg	692:62	692:65	7	tmp
water	692:62	0:0	8	tmp
water	692:66	0:0	6	;
return	693:12	693:21	6	-1
op	693:19	0:0	7	-
water	693:20	0:0	7	1
water	694:8	0:0	6	}
water	695:8	0:0	4	h
op	695:9	0:0	4	->
water	695:11	0:0	4	deblocking_filter
op	695:29	0:0	4	=
water	695:31	0:0	4	tmp
water	695:34	0:0	4	;
if	696:8	697:37	4	(h -> deblocking_filter < 2)
cond	696:12	696:35	5	h -> deblocking_filter < 2
water	696:12	0:0	6	h
op	696:13	0:0	6	->
water	696:15	0:0	6	deblocking_filter
op	696:33	0:0	6	<
water	696:35	0:0	6	2
stmts	697:12	697:37	5	
water	697:12	0:0	6	h
op	697:13	0:0	6	->
water	697:15	0:0	6	deblocking_filter
op	697:33	0:0	6	^=
water	697:36	0:0	6	1
water	697:37	0:0	6	;
if	699:8	709:8	4	(h -> deblocking_filter)
cond	699:12	699:15	5	h -> deblocking_filter
water	699:12	0:0	6	h
op	699:13	0:0	6	->
water	699:15	0:0	6	deblocking_filter
stmts	699:34	709:8	5	
water	699:34	0:0	6	{
water	700:12	0:0	6	h
op	700:13	0:0	6	->
water	700:15	0:0	6	slice_alpha_c0_offset
op	700:37	0:0	6	+=
call	700:40	700:60	6	get_se_golomb
arg	700:54	700:60	7	&s->gb
op	700:54	0:0	8	&
water	700:55	0:0	8	s
op	700:56	0:0	8	->
water	700:58	0:0	8	gb
op	700:62	0:0	6	<<
water	700:65	0:0	6	1
water	700:66	0:0	6	;
water	701:12	0:0	6	h
op	701:13	0:0	6	->
water	701:15	0:0	6	slice_beta_offset
op	701:37	0:0	6	+=
call	701:40	701:60	6	get_se_golomb
arg	701:54	701:60	7	&s->gb
op	701:54	0:0	8	&
water	701:55	0:0	8	s
op	701:56	0:0	8	->
water	701:58	0:0	8	gb
op	701:62	0:0	6	<<
water	701:65	0:0	6	1
water	701:66	0:0	6	;
if	702:12	708:12	6	(h -> slice_alpha_c0_offset > 104 U || h -> slice_beta_offset > 104 U)
cond	702:16	703:46	7	h -> slice_alpha_c0_offset > 104 U || h -> slice_beta_offset > 104 U
water	702:16	0:0	8	h
op	702:17	0:0	8	->
water	702:19	0:0	8	slice_alpha_c0_offset
op	702:41	0:0	8	>
water	702:43	0:0	8	104
water	702:46	0:0	8	U
op	702:48	0:0	8	||
water	703:16	0:0	8	h
op	703:17	0:0	8	->
water	703:19	0:0	8	slice_beta_offset
op	703:41	0:0	8	>
water	703:43	0:0	8	104
water	703:46	0:0	8	U
stmts	703:49	708:12	7	
water	703:49	0:0	8	{
call	704:16	706:69	8	av_log
arg	704:23	704:31	9	s->avctx
water	704:23	0:0	10	s
op	704:24	0:0	10	->
water	704:26	0:0	10	avctx
arg	704:33	704:45	9	AV_LOG_ERROR
water	704:33	0:0	10	AV_LOG_ERROR
arg	705:23	705:74	9	"deblocking filter parameters %d %d out of range\n"
water	705:23	0:0	10	"deblocking filter parameters %d %d out of range\n"
arg	706:23	706:47	9	h->slice_alpha_c0_offset
water	706:23	0:0	10	h
op	706:24	0:0	10	->
water	706:26	0:0	10	slice_alpha_c0_offset
arg	706:49	706:69	9	h->slice_beta_offset
water	706:49	0:0	10	h
op	706:50	0:0	10	->
water	706:52	0:0	10	slice_beta_offset
water	706:70	0:0	8	;
return	707:16	707:25	8	-1
op	707:23	0:0	9	-
water	707:24	0:0	9	1
water	708:12	0:0	8	}
water	709:8	0:0	6	}
water	710:4	0:0	4	}
if	712:4	719:32	2	(s -> avctx -> skip_loop_filter >= AVDISCARD_ALL || ( s -> avctx -> skip_loop_filter >= AVDISCARD_NONKEY && h -> slice_type_nos != AV_PICTURE_TYPE_I ) || ( s -> avctx -> skip_loop_filter >= AVDISCARD_BIDIR && h -> slice_type_nos == AV_PICTURE_TYPE_B ) || ( s -> avctx -> skip_loop_filter >= AVDISCARD_NONREF && h -> nal_ref_idc == 0 ))
cond	712:8	718:28	3	s -> avctx -> skip_loop_filter >= AVDISCARD_ALL || ( s -> avctx -> skip_loop_filter >= AVDISCARD_NONKEY && h -> slice_type_nos != AV_PICTURE_TYPE_I ) || ( s -> avctx -> skip_loop_filter >= AVDISCARD_BIDIR && h -> slice_type_nos == AV_PICTURE_TYPE_B ) || ( s -> avctx -> skip_loop_filter >= AVDISCARD_NONREF && h -> nal_ref_idc == 0 )
water	712:8	0:0	4	s
op	712:9	0:0	4	->
water	712:11	0:0	4	avctx
op	712:16	0:0	4	->
water	712:18	0:0	4	skip_loop_filter
op	712:35	0:0	4	>=
water	712:38	0:0	4	AVDISCARD_ALL
op	712:52	0:0	4	||
water	713:8	0:0	4	(
water	713:9	0:0	4	s
op	713:10	0:0	4	->
water	713:12	0:0	4	avctx
op	713:17	0:0	4	->
water	713:19	0:0	4	skip_loop_filter
op	713:36	0:0	4	>=
water	713:39	0:0	4	AVDISCARD_NONKEY
op	713:56	0:0	4	&&
water	714:9	0:0	4	h
op	714:10	0:0	4	->
water	714:12	0:0	4	slice_type_nos
op	714:27	0:0	4	!=
water	714:30	0:0	4	AV_PICTURE_TYPE_I
water	714:47	0:0	4	)
op	714:49	0:0	4	||
water	715:8	0:0	4	(
water	715:9	0:0	4	s
op	715:10	0:0	4	->
water	715:12	0:0	4	avctx
op	715:17	0:0	4	->
water	715:19	0:0	4	skip_loop_filter
op	715:36	0:0	4	>=
water	715:39	0:0	4	AVDISCARD_BIDIR
op	715:56	0:0	4	&&
water	716:9	0:0	4	h
op	716:10	0:0	4	->
water	716:12	0:0	4	slice_type_nos
op	716:27	0:0	4	==
water	716:30	0:0	4	AV_PICTURE_TYPE_B
water	716:47	0:0	4	)
op	716:49	0:0	4	||
water	717:8	0:0	4	(
water	717:9	0:0	4	s
op	717:10	0:0	4	->
water	717:12	0:0	4	avctx
op	717:17	0:0	4	->
water	717:19	0:0	4	skip_loop_filter
op	717:36	0:0	4	>=
water	717:39	0:0	4	AVDISCARD_NONREF
op	717:56	0:0	4	&&
water	718:9	0:0	4	h
op	718:10	0:0	4	->
water	718:12	0:0	4	nal_ref_idc
op	718:24	0:0	4	==
water	718:27	0:0	4	0
water	718:28	0:0	4	)
stmts	719:8	719:32	3	
water	719:8	0:0	4	h
op	719:9	0:0	4	->
water	719:11	0:0	4	deblocking_filter
op	719:29	0:0	4	=
water	719:31	0:0	4	0
water	719:32	0:0	4	;
if	721:4	739:4	2	(h -> deblocking_filter == 1 && h0 -> max_contexts > 1)
cond	721:8	721:56	3	h -> deblocking_filter == 1 && h0 -> max_contexts > 1
water	721:8	0:0	4	h
op	721:9	0:0	4	->
water	721:11	0:0	4	deblocking_filter
op	721:29	0:0	4	==
water	721:32	0:0	4	1
op	721:34	0:0	4	&&
water	721:37	0:0	4	h0
op	721:39	0:0	4	->
water	721:41	0:0	4	max_contexts
op	721:54	0:0	4	>
water	721:56	0:0	4	1
stmts	721:59	739:4	3	
water	721:59	0:0	4	{
if	722:8	726:8	4	(s -> avctx -> flags2 & CODEC_FLAG2_FAST)
cond	722:12	722:31	5	s -> avctx -> flags2 & CODEC_FLAG2_FAST
water	722:12	0:0	6	s
op	722:13	0:0	6	->
water	722:15	0:0	6	avctx
op	722:20	0:0	6	->
water	722:22	0:0	6	flags2
op	722:29	0:0	6	&
water	722:31	0:0	6	CODEC_FLAG2_FAST
stmts	722:49	726:8	5	
water	722:49	0:0	6	{
water	725:12	0:0	6	h
op	725:13	0:0	6	->
water	725:15	0:0	6	deblocking_filter
op	725:33	0:0	6	=
water	725:35	0:0	6	2
water	725:36	0:0	6	;
water	726:8	0:0	6	}
else	726:10	738:8	4
stmts	726:15	738:8	5	
water	726:15	0:0	6	{
water	727:12	0:0	6	h0
op	727:14	0:0	6	->
water	727:16	0:0	6	max_contexts
op	727:29	0:0	6	=
water	727:31	0:0	6	1
water	727:32	0:0	6	;
if	728:12	732:12	6	(! h0 -> single_decode_warning)
cond	728:16	728:21	7	! h0 -> single_decode_warning
op	728:16	0:0	8	!
water	728:17	0:0	8	h0
op	728:19	0:0	8	->
water	728:21	0:0	8	single_decode_warning
stmts	728:44	732:12	7	
water	728:44	0:0	8	{
call	729:16	730:105	8	av_log
arg	729:23	729:31	9	s->avctx
water	729:23	0:0	10	s
op	729:24	0:0	10	->
water	729:26	0:0	10	avctx
arg	729:33	729:44	9	AV_LOG_INFO
water	729:33	0:0	10	AV_LOG_INFO
arg	730:23	730:105	9	"Cannot parallelize deblocking type 1, decoding such frames in sequential order\n"
water	730:23	0:0	10	"Cannot parallelize deblocking type 1, decoding such frames in sequential order\n"
water	730:106	0:0	8	;
water	731:16	0:0	8	h0
op	731:18	0:0	8	->
water	731:20	0:0	8	single_decode_warning
op	731:42	0:0	8	=
water	731:44	0:0	8	1
water	731:45	0:0	8	;
water	732:12	0:0	8	}
if	733:12	737:12	6	(h != h0)
cond	733:16	733:21	7	h != h0
water	733:16	0:0	8	h
op	733:18	0:0	8	!=
water	733:21	0:0	8	h0
stmts	733:25	737:12	7	
water	733:25	0:0	8	{
call	734:16	735:60	8	av_log
arg	734:23	734:33	9	h->s.avctx
water	734:23	0:0	10	h
op	734:24	0:0	10	->
water	734:26	0:0	10	s
op	734:27	0:0	10	.
water	734:28	0:0	10	avctx
arg	734:35	734:47	9	AV_LOG_ERROR
water	734:35	0:0	10	AV_LOG_ERROR
arg	735:23	735:60	9	"Deblocking switched inside frame.\n"
water	735:23	0:0	10	"Deblocking switched inside frame.\n"
water	735:61	0:0	8	;
return	736:16	736:24	8	1
water	736:23	0:0	9	1
water	737:12	0:0	8	}
water	738:8	0:0	6	}
water	739:4	0:0	4	}
water	740:4	0:0	2	h
op	740:5	0:0	2	->
water	740:7	0:0	2	qp_thresh
op	740:17	0:0	2	=
water	740:19	0:0	2	15
op	740:22	0:0	2	+
water	740:24	0:0	2	52
op	740:27	0:0	2	-
call	741:19	741:71	2	FFMIN
arg	741:25	741:49	3	h->slice_alpha_c0_offset
water	741:25	0:0	4	h
op	741:26	0:0	4	->
water	741:28	0:0	4	slice_alpha_c0_offset
arg	741:51	741:71	3	h->slice_beta_offset
water	741:51	0:0	4	h
op	741:52	0:0	4	->
water	741:54	0:0	4	slice_beta_offset
op	741:73	0:0	2	-
call	742:19	744:58	2	FFMAX3
arg	742:26	742:27	3	0
water	742:26	0:0	4	0
arg	743:26	743:58	3	h->pps.chroma_qp_index_offset[0]
water	743:26	0:0	4	h
op	743:27	0:0	4	->
water	743:29	0:0	4	pps
op	743:32	0:0	4	.
water	743:33	0:0	4	chroma_qp_index_offset
op	743:55	0:0	4	[
water	743:56	0:0	4	0
op	743:57	0:0	4	]
arg	744:26	744:58	3	h->pps.chroma_qp_index_offset[1]
water	744:26	0:0	4	h
op	744:27	0:0	4	->
water	744:29	0:0	4	pps
op	744:32	0:0	4	.
water	744:33	0:0	4	chroma_qp_index_offset
op	744:55	0:0	4	[
water	744:56	0:0	4	1
op	744:57	0:0	4	]
op	744:60	0:0	2	+
water	745:19	0:0	2	6
op	745:21	0:0	2	*
water	745:23	0:0	2	(
water	745:24	0:0	2	h
op	745:25	0:0	2	->
water	745:27	0:0	2	sps
op	745:30	0:0	2	.
water	745:31	0:0	2	bit_depth_luma
op	745:46	0:0	2	-
water	745:48	0:0	2	8
water	745:49	0:0	2	)
water	745:50	0:0	2	;
water	747:4	0:0	2	h0
op	747:6	0:0	2	->
water	747:8	0:0	2	last_slice_type
op	747:24	0:0	2	=
water	747:26	0:0	2	slice_type
water	747:36	0:0	2	;
water	748:4	0:0	2	h
op	748:5	0:0	2	->
water	748:7	0:0	2	slice_num
op	748:17	0:0	2	=
op	748:19	0:0	2	++
water	748:21	0:0	2	h0
op	748:23	0:0	2	->
water	748:25	0:0	2	current_slice
water	748:38	0:0	2	;
if	750:4	751:70	2	(h -> slice_num)
cond	750:8	750:11	3	h -> slice_num
water	750:8	0:0	4	h
op	750:9	0:0	4	->
water	750:11	0:0	4	slice_num
stmts	751:8	751:70	3	
water	751:8	0:0	4	h0
op	751:10	0:0	4	->
water	751:12	0:0	4	slice_row
op	751:21	0:0	4	[
water	751:22	0:0	4	(
water	751:23	0:0	4	h
op	751:24	0:0	4	->
water	751:26	0:0	4	slice_num
op	751:35	0:0	4	-
water	751:36	0:0	4	1
water	751:37	0:0	4	)
op	751:38	0:0	4	&
water	751:39	0:0	4	(
water	751:40	0:0	4	MAX_SLICES
op	751:50	0:0	4	-
water	751:51	0:0	4	1
water	751:52	0:0	4	)
op	751:53	0:0	4	]
op	751:54	0:0	4	=
water	751:56	0:0	4	s
op	751:57	0:0	4	->
water	751:59	0:0	4	resync_mb_y
water	751:70	0:0	4	;
if	752:4	757:4	2	(h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] + 3 >= s -> resync_mb_y && h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] <= s -> resync_mb_y && h -> slice_num >= MAX_SLICES)
cond	752:11	754:27	3	h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] + 3 >= s -> resync_mb_y && h0 -> slice_row [ h -> slice_num & ( MAX_SLICES - 1 ) ] <= s -> resync_mb_y && h -> slice_num >= MAX_SLICES
water	752:11	0:0	4	h0
op	752:13	0:0	4	->
water	752:15	0:0	4	slice_row
op	752:24	0:0	4	[
water	752:25	0:0	4	h
op	752:26	0:0	4	->
water	752:28	0:0	4	slice_num
op	752:37	0:0	4	&
water	752:38	0:0	4	(
water	752:39	0:0	4	MAX_SLICES
op	752:49	0:0	4	-
water	752:50	0:0	4	1
water	752:51	0:0	4	)
op	752:52	0:0	4	]
op	752:54	0:0	4	+
water	752:56	0:0	4	3
op	752:58	0:0	4	>=
water	752:61	0:0	4	s
op	752:62	0:0	4	->
water	752:64	0:0	4	resync_mb_y
op	753:8	0:0	4	&&
water	753:11	0:0	4	h0
op	753:13	0:0	4	->
water	753:15	0:0	4	slice_row
op	753:24	0:0	4	[
water	753:25	0:0	4	h
op	753:26	0:0	4	->
water	753:28	0:0	4	slice_num
op	753:37	0:0	4	&
water	753:38	0:0	4	(
water	753:39	0:0	4	MAX_SLICES
op	753:49	0:0	4	-
water	753:50	0:0	4	1
water	753:51	0:0	4	)
op	753:52	0:0	4	]
op	753:54	0:0	4	<=
water	753:57	0:0	4	s
op	753:58	0:0	4	->
water	753:60	0:0	4	resync_mb_y
op	754:8	0:0	4	&&
water	754:11	0:0	4	h
op	754:12	0:0	4	->
water	754:14	0:0	4	slice_num
op	754:24	0:0	4	>=
water	754:27	0:0	4	MAX_SLICES
stmts	754:39	757:4	3	
water	754:39	0:0	4	{
call	756:8	756:164	4	av_log
arg	756:15	756:23	5	s->avctx
water	756:15	0:0	6	s
op	756:16	0:0	6	->
water	756:18	0:0	6	avctx
arg	756:25	756:39	5	AV_LOG_WARNING
water	756:25	0:0	6	AV_LOG_WARNING
arg	756:41	756:138	5	"Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n"
water	756:41	0:0	6	"Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n"
arg	756:140	756:152	5	h->slice_num
water	756:140	0:0	6	h
op	756:141	0:0	6	->
water	756:143	0:0	6	slice_num
arg	756:154	756:164	5	MAX_SLICES
water	756:154	0:0	6	MAX_SLICES
water	756:165	0:0	4	;
water	757:4	0:0	4	}
for	759:4	790:4	2	(j = 0 ;j < 2;j ++)
forinit	759:9	759:14	3	j = 0 ;
water	759:9	0:0	4	j
op	759:11	0:0	4	=
water	759:13	0:0	4	0
water	759:14	0:0	4	;
cond	759:16	759:20	3	j < 2
water	759:16	0:0	4	j
op	759:18	0:0	4	<
water	759:20	0:0	4	2
forexpr	759:23	759:24	3	j ++
water	759:23	0:0	4	j
op	759:24	0:0	4	++
stmts	759:28	790:4	3	
water	759:28	0:0	4	{
decl	760:8	760:23	4	int	id_list[16]
decl	761:8	761:69	4	int	*ref2frm
op	761:21	0:0	4	=
water	761:23	0:0	4	h
op	761:24	0:0	4	->
water	761:26	0:0	4	ref2frm
op	761:33	0:0	4	[
water	761:34	0:0	4	h
op	761:35	0:0	4	->
water	761:37	0:0	4	slice_num
op	761:47	0:0	4	&
water	761:49	0:0	4	(
water	761:50	0:0	4	MAX_SLICES
op	761:61	0:0	4	-
water	761:63	0:0	4	1
water	761:64	0:0	4	)
op	761:65	0:0	4	]
op	761:66	0:0	4	[
water	761:67	0:0	4	j
op	761:68	0:0	4	]
for	762:8	778:8	4	(i = 0 ;i < 16;i ++)
forinit	762:13	762:18	5	i = 0 ;
water	762:13	0:0	6	i
op	762:15	0:0	6	=
water	762:17	0:0	6	0
water	762:18	0:0	6	;
cond	762:20	762:24	5	i < 16
water	762:20	0:0	6	i
op	762:22	0:0	6	<
water	762:24	0:0	6	16
forexpr	762:28	762:29	5	i ++
water	762:28	0:0	6	i
op	762:29	0:0	6	++
stmts	762:33	778:8	5	
water	762:33	0:0	6	{
water	763:12	0:0	6	id_list
op	763:19	0:0	6	[
water	763:20	0:0	6	i
op	763:21	0:0	6	]
op	763:23	0:0	6	=
water	763:25	0:0	6	60
water	763:27	0:0	6	;
if	764:12	777:12	6	(h -> ref_list [ j ] [ i ] . f . data [ 0 ])
cond	764:16	764:42	7	h -> ref_list [ j ] [ i ] . f . data [ 0 ]
water	764:16	0:0	8	h
op	764:17	0:0	8	->
water	764:19	0:0	8	ref_list
op	764:27	0:0	8	[
water	764:28	0:0	8	j
op	764:29	0:0	8	]
op	764:30	0:0	8	[
water	764:31	0:0	8	i
op	764:32	0:0	8	]
op	764:33	0:0	8	.
water	764:34	0:0	8	f
op	764:35	0:0	8	.
water	764:36	0:0	8	data
op	764:40	0:0	8	[
water	764:41	0:0	8	0
op	764:42	0:0	8	]
stmts	764:45	777:12	7	
water	764:45	0:0	8	{
decl	765:16	765:21	8	int	k
decl	766:16	766:59	8	uint8_t	*base
op	766:30	0:0	8	=
water	766:32	0:0	8	h
op	766:33	0:0	8	->
water	766:35	0:0	8	ref_list
op	766:43	0:0	8	[
water	766:44	0:0	8	j
op	766:45	0:0	8	]
op	766:46	0:0	8	[
water	766:47	0:0	8	i
op	766:48	0:0	8	]
op	766:49	0:0	8	.
water	766:50	0:0	8	f
op	766:51	0:0	8	.
water	766:52	0:0	8	base
op	766:56	0:0	8	[
water	766:57	0:0	8	0
op	766:58	0:0	8	]
for	767:16	771:20	8	(k = 0 ;k < h -> short_ref_count;k ++)
forinit	767:21	767:26	9	k = 0 ;
water	767:21	0:0	10	k
op	767:23	0:0	10	=
water	767:25	0:0	10	0
water	767:26	0:0	10	;
cond	767:28	767:35	9	k < h -> short_ref_count
water	767:28	0:0	10	k
op	767:30	0:0	10	<
water	767:32	0:0	10	h
op	767:33	0:0	10	->
water	767:35	0:0	10	short_ref_count
forexpr	767:52	767:53	9	k ++
water	767:52	0:0	10	k
op	767:53	0:0	10	++
stmts	768:20	771:20	9	
if	768:20	771:20	10	(h -> short_ref [ k ] -> f . base [ 0 ] == base)
cond	768:24	768:54	11	h -> short_ref [ k ] -> f . base [ 0 ] == base
water	768:24	0:0	12	h
op	768:25	0:0	12	->
water	768:27	0:0	12	short_ref
op	768:36	0:0	12	[
water	768:37	0:0	12	k
op	768:38	0:0	12	]
op	768:39	0:0	12	->
water	768:41	0:0	12	f
op	768:42	0:0	12	.
water	768:43	0:0	12	base
op	768:47	0:0	12	[
water	768:48	0:0	12	0
op	768:49	0:0	12	]
op	768:51	0:0	12	==
water	768:54	0:0	12	base
stmts	768:60	771:20	11	
water	768:60	0:0	12	{
water	769:24	0:0	12	id_list
op	769:31	0:0	12	[
water	769:32	0:0	12	i
op	769:33	0:0	12	]
op	769:35	0:0	12	=
water	769:37	0:0	12	k
water	769:38	0:0	12	;
break	770:24	770:29	12	
water	771:20	0:0	12	}
for	772:16	776:20	8	(k = 0 ;k < h -> long_ref_count;k ++)
forinit	772:21	772:26	9	k = 0 ;
water	772:21	0:0	10	k
op	772:23	0:0	10	=
water	772:25	0:0	10	0
water	772:26	0:0	10	;
cond	772:28	772:35	9	k < h -> long_ref_count
water	772:28	0:0	10	k
op	772:30	0:0	10	<
water	772:32	0:0	10	h
op	772:33	0:0	10	->
water	772:35	0:0	10	long_ref_count
forexpr	772:51	772:52	9	k ++
water	772:51	0:0	10	k
op	772:52	0:0	10	++
stmts	773:20	776:20	9	
if	773:20	776:20	10	(h -> long_ref [ k ] && h -> long_ref [ k ] -> f . base [ 0 ] == base)
cond	773:24	773:71	11	h -> long_ref [ k ] && h -> long_ref [ k ] -> f . base [ 0 ] == base
water	773:24	0:0	12	h
op	773:25	0:0	12	->
water	773:27	0:0	12	long_ref
op	773:35	0:0	12	[
water	773:36	0:0	12	k
op	773:37	0:0	12	]
op	773:39	0:0	12	&&
water	773:42	0:0	12	h
op	773:43	0:0	12	->
water	773:45	0:0	12	long_ref
op	773:53	0:0	12	[
water	773:54	0:0	12	k
op	773:55	0:0	12	]
op	773:56	0:0	12	->
water	773:58	0:0	12	f
op	773:59	0:0	12	.
water	773:60	0:0	12	base
op	773:64	0:0	12	[
water	773:65	0:0	12	0
op	773:66	0:0	12	]
op	773:68	0:0	12	==
water	773:71	0:0	12	base
stmts	773:77	776:20	11	
water	773:77	0:0	12	{
water	774:24	0:0	12	id_list
op	774:31	0:0	12	[
water	774:32	0:0	12	i
op	774:33	0:0	12	]
op	774:35	0:0	12	=
water	774:37	0:0	12	h
op	774:38	0:0	12	->
water	774:40	0:0	12	short_ref_count
op	774:56	0:0	12	+
water	774:58	0:0	12	k
water	774:59	0:0	12	;
break	775:24	775:29	12	
water	776:20	0:0	12	}
water	777:12	0:0	8	}
water	778:8	0:0	6	}
water	780:8	0:0	4	ref2frm
op	780:15	0:0	4	[
water	780:16	0:0	4	0
op	780:17	0:0	4	]
op	780:23	0:0	4	=
water	781:12	0:0	4	ref2frm
op	781:19	0:0	4	[
water	781:20	0:0	4	1
op	781:21	0:0	4	]
op	781:23	0:0	4	=
op	781:25	0:0	4	-
water	781:26	0:0	4	1
water	781:27	0:0	4	;
for	782:8	784:64	4	(i = 0 ;i < 16;i ++)
forinit	782:13	782:18	5	i = 0 ;
water	782:13	0:0	6	i
op	782:15	0:0	6	=
water	782:17	0:0	6	0
water	782:18	0:0	6	;
cond	782:20	782:24	5	i < 16
water	782:20	0:0	6	i
op	782:22	0:0	6	<
water	782:24	0:0	6	16
forexpr	782:28	782:29	5	i ++
water	782:28	0:0	6	i
op	782:29	0:0	6	++
stmts	783:12	784:64	5	
water	783:12	0:0	6	ref2frm
op	783:19	0:0	6	[
water	783:20	0:0	6	i
op	783:22	0:0	6	+
water	783:24	0:0	6	2
op	783:25	0:0	6	]
op	783:27	0:0	6	=
water	783:29	0:0	6	4
op	783:31	0:0	6	*
water	783:33	0:0	6	id_list
op	783:40	0:0	6	[
water	783:41	0:0	6	i
op	783:42	0:0	6	]
op	783:44	0:0	6	+
water	784:29	0:0	6	(
water	784:30	0:0	6	h
op	784:31	0:0	6	->
water	784:33	0:0	6	ref_list
op	784:41	0:0	6	[
water	784:42	0:0	6	j
op	784:43	0:0	6	]
op	784:44	0:0	6	[
water	784:45	0:0	6	i
op	784:46	0:0	6	]
op	784:47	0:0	6	.
water	784:48	0:0	6	f
op	784:49	0:0	6	.
water	784:50	0:0	6	reference
op	784:60	0:0	6	&
water	784:62	0:0	6	3
water	784:63	0:0	6	)
water	784:64	0:0	6	;
water	785:8	0:0	4	ref2frm
op	785:15	0:0	4	[
water	785:16	0:0	4	18
op	785:19	0:0	4	+
water	785:21	0:0	4	0
op	785:22	0:0	4	]
op	785:28	0:0	4	=
water	786:12	0:0	4	ref2frm
op	786:19	0:0	4	[
water	786:20	0:0	4	18
op	786:23	0:0	4	+
water	786:25	0:0	4	1
op	786:26	0:0	4	]
op	786:28	0:0	4	=
op	786:30	0:0	4	-
water	786:31	0:0	4	1
water	786:32	0:0	4	;
for	787:8	789:64	4	(i = 16 ;i < 48;i ++)
forinit	787:13	787:19	5	i = 16 ;
water	787:13	0:0	6	i
op	787:15	0:0	6	=
water	787:17	0:0	6	16
water	787:19	0:0	6	;
cond	787:21	787:25	5	i < 48
water	787:21	0:0	6	i
op	787:23	0:0	6	<
water	787:25	0:0	6	48
forexpr	787:29	787:30	5	i ++
water	787:29	0:0	6	i
op	787:30	0:0	6	++
stmts	788:12	789:64	5	
water	788:12	0:0	6	ref2frm
op	788:19	0:0	6	[
water	788:20	0:0	6	i
op	788:22	0:0	6	+
water	788:24	0:0	6	4
op	788:25	0:0	6	]
op	788:27	0:0	6	=
water	788:29	0:0	6	4
op	788:31	0:0	6	*
water	788:33	0:0	6	id_list
op	788:40	0:0	6	[
water	788:41	0:0	6	(
water	788:42	0:0	6	i
op	788:44	0:0	6	-
water	788:46	0:0	6	16
water	788:48	0:0	6	)
op	788:50	0:0	6	>>
water	788:53	0:0	6	1
op	788:54	0:0	6	]
op	788:56	0:0	6	+
water	789:29	0:0	6	(
water	789:30	0:0	6	h
op	789:31	0:0	6	->
water	789:33	0:0	6	ref_list
op	789:41	0:0	6	[
water	789:42	0:0	6	j
op	789:43	0:0	6	]
op	789:44	0:0	6	[
water	789:45	0:0	6	i
op	789:46	0:0	6	]
op	789:47	0:0	6	.
water	789:48	0:0	6	f
op	789:49	0:0	6	.
water	789:50	0:0	6	reference
op	789:60	0:0	6	&
water	789:62	0:0	6	3
water	789:63	0:0	6	)
water	789:64	0:0	6	;
water	790:4	0:0	4	}
water	793:4	0:0	2	h
op	793:5	0:0	2	->
water	793:7	0:0	2	emu_edge_width
op	793:23	0:0	2	=
water	793:25	0:0	2	(
water	793:26	0:0	2	s
op	793:27	0:0	2	->
water	793:29	0:0	2	flags
op	793:35	0:0	2	&
water	793:37	0:0	2	CODEC_FLAG_EMU_EDGE
op	793:57	0:0	2	||
water	794:26	0:0	2	(
op	794:27	0:0	2	!
water	794:28	0:0	2	h
op	794:29	0:0	2	->
water	794:31	0:0	2	sps
op	794:34	0:0	2	.
water	794:35	0:0	2	frame_mbs_only_flag
op	794:55	0:0	2	&&
water	795:27	0:0	2	s
op	795:28	0:0	2	->
water	795:30	0:0	2	avctx
op	795:35	0:0	2	->
water	795:37	0:0	2	active_thread_type
water	795:55	0:0	2	)
water	795:56	0:0	2	)
water	796:25	0:0	2	?
water	796:27	0:0	2	0
water	796:29	0:0	2	:
water	796:31	0:0	2	16
water	796:33	0:0	2	;
water	797:4	0:0	2	h
op	797:5	0:0	2	->
water	797:7	0:0	2	emu_edge_height
op	797:23	0:0	2	=
water	797:25	0:0	2	(
water	797:26	0:0	2	FRAME_MBAFF
op	797:38	0:0	2	||
water	797:41	0:0	2	FIELD_PICTURE
water	797:54	0:0	2	)
water	797:56	0:0	2	?
water	797:58	0:0	2	0
water	797:60	0:0	2	:
water	797:62	0:0	2	h
op	797:63	0:0	2	->
water	797:65	0:0	2	emu_edge_width
water	797:79	0:0	2	;
if	799:4	818:4	2	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	799:8	799:26	3	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	799:8	0:0	4	s
op	799:9	0:0	4	->
water	799:11	0:0	4	avctx
op	799:16	0:0	4	->
water	799:18	0:0	4	debug
op	799:24	0:0	4	&
water	799:26	0:0	4	FF_DEBUG_PICT_INFO
stmts	799:46	818:4	3	
water	799:46	0:0	4	{
call	800:8	817:102	4	av_log
arg	800:15	800:25	5	h->s.avctx
water	800:15	0:0	6	h
op	800:16	0:0	6	->
water	800:18	0:0	6	s
op	800:19	0:0	6	.
water	800:20	0:0	6	avctx
arg	800:27	800:39	5	AV_LOG_DEBUG
water	800:27	0:0	6	AV_LOG_DEBUG
arg	801:15	801:114	5	"slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n"
water	801:15	0:0	6	"slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n"
arg	802:15	802:27	5	h->slice_num
water	802:15	0:0	6	h
op	802:16	0:0	6	->
water	802:18	0:0	6	slice_num
arg	803:15	803:110	5	(s->picture_structure==PICT_FRAME?"F":s->picture_structure==PICT_TOP_FIELD?"T":"B")
water	803:15	0:0	6	(
water	803:16	0:0	6	s
op	803:17	0:0	6	->
water	803:19	0:0	6	picture_structure
op	803:37	0:0	6	==
water	803:40	0:0	6	PICT_FRAME
water	803:51	0:0	6	?
water	803:53	0:0	6	"F"
water	803:57	0:0	6	:
water	803:59	0:0	6	s
op	803:60	0:0	6	->
water	803:62	0:0	6	picture_structure
op	803:80	0:0	6	==
water	803:83	0:0	6	PICT_TOP_FIELD
water	803:98	0:0	6	?
water	803:100	0:0	6	"T"
water	803:104	0:0	6	:
water	803:106	0:0	6	"B"
water	803:109	0:0	6	)
arg	804:15	804:32	5	first_mb_in_slice
water	804:15	0:0	6	first_mb_in_slice
arg	805:15	805:54	5	av_get_picture_type_char(h->slice_type)
call	805:15	805:53	6	av_get_picture_type_char
arg	805:40	805:53	7	h->slice_type
water	805:40	0:0	8	h
op	805:41	0:0	8	->
water	805:43	0:0	8	slice_type
arg	806:15	806:48	5	h->slice_type_fixed?" fix":""
water	806:15	0:0	6	h
op	806:16	0:0	6	->
water	806:18	0:0	6	slice_type_fixed
water	806:35	0:0	6	?
water	806:37	0:0	6	" fix"
water	806:44	0:0	6	:
water	806:46	0:0	6	""
arg	807:15	807:62	5	h->nal_unit_type==NAL_IDR_SLICE?" IDR":""
water	807:15	0:0	6	h
op	807:16	0:0	6	->
water	807:18	0:0	6	nal_unit_type
op	807:32	0:0	6	==
water	807:35	0:0	6	NAL_IDR_SLICE
water	807:49	0:0	6	?
water	807:51	0:0	6	" IDR"
water	807:58	0:0	6	:
water	807:60	0:0	6	""
arg	808:15	808:21	5	pps_id
water	808:15	0:0	6	pps_id
arg	808:23	808:35	5	h->frame_num
water	808:23	0:0	6	h
op	808:24	0:0	6	->
water	808:26	0:0	6	frame_num
arg	809:15	809:51	5	s->current_picture_ptr->field_poc[0]
water	809:15	0:0	6	s
op	809:16	0:0	6	->
water	809:18	0:0	6	current_picture_ptr
op	809:37	0:0	6	->
water	809:39	0:0	6	field_poc
op	809:48	0:0	6	[
water	809:49	0:0	6	0
op	809:50	0:0	6	]
arg	810:15	810:51	5	s->current_picture_ptr->field_poc[1]
water	810:15	0:0	6	s
op	810:16	0:0	6	->
water	810:18	0:0	6	current_picture_ptr
op	810:37	0:0	6	->
water	810:39	0:0	6	field_poc
op	810:48	0:0	6	[
water	810:49	0:0	6	1
op	810:50	0:0	6	]
arg	811:15	811:30	5	h->ref_count[0]
water	811:15	0:0	6	h
op	811:16	0:0	6	->
water	811:18	0:0	6	ref_count
op	811:27	0:0	6	[
water	811:28	0:0	6	0
op	811:29	0:0	6	]
arg	811:32	811:47	5	h->ref_count[1]
water	811:32	0:0	6	h
op	811:33	0:0	6	->
water	811:35	0:0	6	ref_count
op	811:44	0:0	6	[
water	811:45	0:0	6	1
op	811:46	0:0	6	]
arg	812:15	812:24	5	s->qscale
water	812:15	0:0	6	s
op	812:16	0:0	6	->
water	812:18	0:0	6	qscale
arg	813:15	813:35	5	h->deblocking_filter
water	813:15	0:0	6	h
op	813:16	0:0	6	->
water	813:18	0:0	6	deblocking_filter
arg	814:15	814:48	5	h->slice_alpha_c0_offset/2-26
water	814:15	0:0	6	h
op	814:16	0:0	6	->
water	814:18	0:0	6	slice_alpha_c0_offset
op	814:40	0:0	6	/
water	814:42	0:0	6	2
op	814:44	0:0	6	-
water	814:46	0:0	6	26
arg	814:50	814:79	5	h->slice_beta_offset/2-26
water	814:50	0:0	6	h
op	814:51	0:0	6	->
water	814:53	0:0	6	slice_beta_offset
op	814:71	0:0	6	/
water	814:73	0:0	6	2
op	814:75	0:0	6	-
water	814:77	0:0	6	26
arg	815:15	815:28	5	h->use_weight
water	815:15	0:0	6	h
op	815:16	0:0	6	->
water	815:18	0:0	6	use_weight
arg	816:15	816:68	5	h->use_weight==1&&h->use_weight_chroma?"c":""
water	816:15	0:0	6	h
op	816:16	0:0	6	->
water	816:18	0:0	6	use_weight
op	816:29	0:0	6	==
water	816:32	0:0	6	1
op	816:34	0:0	6	&&
water	816:37	0:0	6	h
op	816:38	0:0	6	->
water	816:40	0:0	6	use_weight_chroma
water	816:58	0:0	6	?
water	816:60	0:0	6	"c"
water	816:64	0:0	6	:
water	816:66	0:0	6	""
arg	817:15	817:102	5	h->slice_type==AV_PICTURE_TYPE_B?(h->direct_spatial_mv_pred?"SPAT":"TEMP"):""
water	817:15	0:0	6	h
op	817:16	0:0	6	->
water	817:18	0:0	6	slice_type
op	817:29	0:0	6	==
water	817:32	0:0	6	AV_PICTURE_TYPE_B
water	817:50	0:0	6	?
water	817:52	0:0	6	(
water	817:53	0:0	6	h
op	817:54	0:0	6	->
water	817:56	0:0	6	direct_spatial_mv_pred
water	817:79	0:0	6	?
water	817:81	0:0	6	"SPAT"
water	817:88	0:0	6	:
water	817:90	0:0	6	"TEMP"
water	817:96	0:0	6	)
water	817:98	0:0	6	:
water	817:100	0:0	6	""
water	817:103	0:0	4	;
water	818:4	0:0	4	}
return	820:4	820:12	2	0
water	820:11	0:0	3	0
