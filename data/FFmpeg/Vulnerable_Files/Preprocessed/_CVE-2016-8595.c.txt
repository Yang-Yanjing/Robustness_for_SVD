func	1:0	46:0	0	static int	gsm_parse
params	1:20	0:0	1	
param	1:21	1:45	2	AVCodecParserContext *	s1
param	1:47	1:68	2	AVCodecContext *	avctx
param	2:21	2:44	2	const uint8_t * *	poutbuf
param	2:46	2:63	2	int *	poutbuf_size
param	3:21	3:39	2	const uint8_t *	buf
param	3:41	3:53	2	int	buf_size
stmnts	0:0	45:15	1	
decl	5:4	5:38	2	GSMParseContext	*s
op	5:23	0:0	2	=
water	5:25	0:0	2	s1
op	5:27	0:0	2	->
water	5:29	0:0	2	priv_data
decl	6:4	6:29	2	ParseContext	*pc
op	6:21	0:0	2	=
op	6:23	0:0	2	&
water	6:24	0:0	2	s
op	6:25	0:0	2	->
water	6:27	0:0	2	pc
decl	7:4	7:12	2	int	next
if	9:4	23:4	2	(! s -> block_size)
cond	9:8	9:12	3	! s -> block_size
op	9:8	0:0	4	!
water	9:9	0:0	4	s
op	9:10	0:0	4	->
water	9:12	0:0	4	block_size
stmts	9:24	23:4	3	
water	9:24	0:0	4	{
switch	10:8	22:8	4	(avctx -> codec_id)
cond	10:16	10:23	5	avctx -> codec_id
water	10:16	0:0	6	avctx
op	10:21	0:0	6	->
water	10:23	0:0	6	codec_id
stmts	10:33	22:8	5	
water	10:33	0:0	6	{
label	11:8	11:28	6	case AV_CODEC_ID_GSM :
water	12:12	0:0	6	s
op	12:13	0:0	6	->
water	12:15	0:0	6	block_size
op	12:26	0:0	6	=
water	12:28	0:0	6	GSM_BLOCK_SIZE
water	12:42	0:0	6	;
water	13:12	0:0	6	s
op	13:13	0:0	6	->
water	13:15	0:0	6	duration
op	13:26	0:0	6	=
water	13:28	0:0	6	GSM_FRAME_SIZE
water	13:42	0:0	6	;
break	14:12	14:17	6	
label	15:8	15:31	6	case AV_CODEC_ID_GSM_MS :
water	16:12	0:0	6	s
op	16:13	0:0	6	->
water	16:15	0:0	6	block_size
op	16:26	0:0	6	=
water	16:28	0:0	6	avctx
op	16:33	0:0	6	->
water	16:35	0:0	6	block_align
water	16:47	0:0	6	?
water	16:49	0:0	6	avctx
op	16:54	0:0	6	->
water	16:56	0:0	6	block_align
water	17:47	0:0	6	:
water	17:49	0:0	6	GSM_MS_BLOCK_SIZE
water	17:66	0:0	6	;
water	18:12	0:0	6	s
op	18:13	0:0	6	->
water	18:15	0:0	6	duration
op	18:26	0:0	6	=
water	18:28	0:0	6	GSM_FRAME_SIZE
op	18:43	0:0	6	*
water	18:45	0:0	6	2
water	18:46	0:0	6	;
break	19:12	19:17	6	
label	20:8	20:15	6	default :
call	21:12	21:24	6	av_assert0
arg	21:23	21:24	7	0
water	21:23	0:0	8	0
water	21:25	0:0	6	;
water	22:8	0:0	6	}
water	23:4	0:0	4	}
if	25:4	26:36	2	(! s -> remaining)
cond	25:8	25:12	3	! s -> remaining
op	25:8	0:0	4	!
water	25:9	0:0	4	s
op	25:10	0:0	4	->
water	25:12	0:0	4	remaining
stmts	26:8	26:36	3	
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	remaining
op	26:21	0:0	4	=
water	26:23	0:0	4	s
op	26:24	0:0	4	->
water	26:26	0:0	4	block_size
water	26:36	0:0	4	;
if	27:4	30:4	2	(s -> remaining <= buf_size)
cond	27:8	27:24	3	s -> remaining <= buf_size
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	remaining
op	27:21	0:0	4	<=
water	27:24	0:0	4	buf_size
stmts	27:34	30:4	3	
water	27:34	0:0	4	{
water	28:8	0:0	4	next
op	28:13	0:0	4	=
water	28:15	0:0	4	s
op	28:16	0:0	4	->
water	28:18	0:0	4	remaining
water	28:27	0:0	4	;
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	remaining
op	29:21	0:0	4	=
water	29:23	0:0	4	0
water	29:24	0:0	4	;
water	30:4	0:0	4	}
else	30:6	33:4	2
stmts	30:11	33:4	3	
water	30:11	0:0	4	{
water	31:8	0:0	4	next
op	31:13	0:0	4	=
water	31:15	0:0	4	END_NOT_FOUND
water	31:28	0:0	4	;
water	32:8	0:0	4	s
op	32:9	0:0	4	->
water	32:11	0:0	4	remaining
op	32:21	0:0	4	-=
water	32:24	0:0	4	buf_size
water	32:32	0:0	4	;
water	33:4	0:0	4	}
if	35:4	39:4	2	(ff_combine_frame (pc ,next ,& buf ,& buf_size ) < 0 || ! buf_size)
cond	35:8	35:60	3	ff_combine_frame (pc ,next ,& buf ,& buf_size ) < 0 || ! buf_size
call	35:8	35:50	4	ff_combine_frame
arg	35:25	35:27	5	pc
water	35:25	0:0	6	pc
arg	35:29	35:33	5	next
water	35:29	0:0	6	next
arg	35:35	35:39	5	&buf
op	35:35	0:0	6	&
water	35:36	0:0	6	buf
arg	35:41	35:50	5	&buf_size
op	35:41	0:0	6	&
water	35:42	0:0	6	buf_size
op	35:52	0:0	4	<
water	35:54	0:0	4	0
op	35:56	0:0	4	||
op	35:59	0:0	4	!
water	35:60	0:0	4	buf_size
stmts	35:70	39:4	3	
water	35:70	0:0	4	{
op	36:8	0:0	4	*
water	36:9	0:0	4	poutbuf
op	36:22	0:0	4	=
water	36:24	0:0	4	NULL
water	36:28	0:0	4	;
op	37:8	0:0	4	*
water	37:9	0:0	4	poutbuf_size
op	37:22	0:0	4	=
water	37:24	0:0	4	0
water	37:25	0:0	4	;
return	38:8	38:23	4	buf_size
water	38:15	0:0	5	buf_size
water	39:4	0:0	4	}
water	41:4	0:0	2	s1
op	41:6	0:0	2	->
water	41:8	0:0	2	duration
op	41:17	0:0	2	=
water	41:19	0:0	2	s
op	41:20	0:0	2	->
water	41:22	0:0	2	duration
water	41:30	0:0	2	;
op	43:4	0:0	2	*
water	43:5	0:0	2	poutbuf
op	43:18	0:0	2	=
water	43:20	0:0	2	buf
water	43:23	0:0	2	;
op	44:4	0:0	2	*
water	44:5	0:0	2	poutbuf_size
op	44:18	0:0	2	=
water	44:20	0:0	2	buf_size
water	44:28	0:0	2	;
return	45:4	45:15	2	next
water	45:11	0:0	3	next
