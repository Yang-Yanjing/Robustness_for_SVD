func	2:0	137:0	0	static int	decode_pic
params	2:21	0:0	1	
param	2:22	2:35	2	AVSContext *	h
stmnts	0:0	136:12	1	
decl	3:4	3:29	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	h
op	3:26	0:0	2	->
water	3:28	0:0	2	s
decl	4:4	4:23	2	int	skip_count
op	4:19	0:0	2	=
op	4:21	0:0	2	-
water	4:22	0:0	2	1
decl	5:4	5:24	2	enum cavs_mb	mb_type
if	7:4	12:4	2	(! s -> context_initialized)
cond	7:8	7:12	3	! s -> context_initialized
op	7:8	0:0	4	!
water	7:9	0:0	4	s
op	7:10	0:0	4	->
water	7:12	0:0	4	context_initialized
stmts	7:33	12:4	3	
water	7:33	0:0	4	{
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	avctx
op	8:16	0:0	4	->
water	8:18	0:0	4	idct_algo
op	8:28	0:0	4	=
water	8:30	0:0	4	FF_IDCT_CAVS
water	8:42	0:0	4	;
if	9:8	10:21	4	(MPV_common_init (s ) < 0)
cond	9:12	9:33	5	MPV_common_init (s ) < 0
call	9:12	9:29	6	MPV_common_init
arg	9:28	9:29	7	s
water	9:28	0:0	8	s
op	9:31	0:0	6	<
water	9:33	0:0	6	0
stmts	10:12	10:21	5	
return	10:12	10:21	6	-1
op	10:19	0:0	7	-
water	10:20	0:0	7	1
call	11:8	11:80	4	ff_init_scantable
arg	11:26	11:49	5	s->dsp.idct_permutation
water	11:26	0:0	6	s
op	11:27	0:0	6	->
water	11:29	0:0	6	dsp
op	11:32	0:0	6	.
water	11:33	0:0	6	idct_permutation
arg	11:50	11:63	5	&h->scantable
op	11:50	0:0	6	&
water	11:51	0:0	6	h
op	11:52	0:0	6	->
water	11:54	0:0	6	scantable
arg	11:64	11:80	5	ff_zigzag_direct
water	11:64	0:0	6	ff_zigzag_direct
water	11:81	0:0	4	;
water	12:4	0:0	4	}
call	13:4	13:23	2	skip_bits
arg	13:14	13:20	3	&s->gb
op	13:14	0:0	4	&
water	13:15	0:0	4	s
op	13:16	0:0	4	->
water	13:18	0:0	4	gb
arg	13:21	13:23	3	16
water	13:21	0:0	4	16
water	13:24	0:0	2	;
if	14:4	24:4	2	(h -> stc == PIC_PB_START_CODE)
cond	14:7	14:17	3	h -> stc == PIC_PB_START_CODE
water	14:7	0:0	4	h
op	14:8	0:0	4	->
water	14:10	0:0	4	stc
op	14:14	0:0	4	==
water	14:17	0:0	4	PIC_PB_START_CODE
stmts	14:36	24:4	3	
water	14:36	0:0	4	{
water	15:8	0:0	4	h
op	15:9	0:0	4	->
water	15:11	0:0	4	pic_type
op	15:20	0:0	4	=
call	15:22	15:39	4	get_bits
arg	15:31	15:37	5	&s->gb
op	15:31	0:0	6	&
water	15:32	0:0	6	s
op	15:33	0:0	6	->
water	15:35	0:0	6	gb
arg	15:38	15:39	5	2
water	15:38	0:0	6	2
op	15:41	0:0	4	+
water	15:43	0:0	4	AV_PICTURE_TYPE_I
water	15:60	0:0	4	;
if	16:8	19:8	4	(h -> pic_type > AV_PICTURE_TYPE_B)
cond	16:11	16:25	5	h -> pic_type > AV_PICTURE_TYPE_B
water	16:11	0:0	6	h
op	16:12	0:0	6	->
water	16:14	0:0	6	pic_type
op	16:23	0:0	6	>
water	16:25	0:0	6	AV_PICTURE_TYPE_B
stmts	16:44	19:8	5	
water	16:44	0:0	6	{
call	17:12	17:67	6	av_log
arg	17:19	17:27	7	s->avctx
water	17:19	0:0	8	s
op	17:20	0:0	8	->
water	17:22	0:0	8	avctx
arg	17:29	17:41	7	AV_LOG_ERROR
water	17:29	0:0	8	AV_LOG_ERROR
arg	17:43	17:67	7	"illegal picture type\n"
water	17:43	0:0	8	"illegal picture type\n"
water	17:68	0:0	6	;
return	18:12	18:21	6	-1
op	18:19	0:0	7	-
water	18:20	0:0	7	1
water	19:8	0:0	6	}
if	21:8	23:21	4	(! h -> DPB [ 0 ] . data [ 0 ] || ( ! h -> DPB [ 1 ] . data [ 0 ] && h -> pic_type == AV_PICTURE_TYPE_B ))
cond	21:11	22:65	5	! h -> DPB [ 0 ] . data [ 0 ] || ( ! h -> DPB [ 1 ] . data [ 0 ] && h -> pic_type == AV_PICTURE_TYPE_B )
op	21:11	0:0	6	!
water	21:12	0:0	6	h
op	21:13	0:0	6	->
water	21:15	0:0	6	DPB
op	21:18	0:0	6	[
water	21:19	0:0	6	0
op	21:20	0:0	6	]
op	21:21	0:0	6	.
water	21:22	0:0	6	data
op	21:26	0:0	6	[
water	21:27	0:0	6	0
op	21:28	0:0	6	]
op	21:30	0:0	6	||
water	22:10	0:0	6	(
op	22:11	0:0	6	!
water	22:12	0:0	6	h
op	22:13	0:0	6	->
water	22:15	0:0	6	DPB
op	22:18	0:0	6	[
water	22:19	0:0	6	1
op	22:20	0:0	6	]
op	22:21	0:0	6	.
water	22:22	0:0	6	data
op	22:26	0:0	6	[
water	22:27	0:0	6	0
op	22:28	0:0	6	]
op	22:30	0:0	6	&&
water	22:33	0:0	6	h
op	22:34	0:0	6	->
water	22:36	0:0	6	pic_type
op	22:45	0:0	6	==
water	22:48	0:0	6	AV_PICTURE_TYPE_B
water	22:65	0:0	6	)
stmts	23:12	23:21	5	
return	23:12	23:21	6	-1
op	23:19	0:0	7	-
water	23:20	0:0	7	1
water	24:4	0:0	4	}
else	24:6	37:4	2
stmts	24:11	37:4	3	
water	24:11	0:0	4	{
water	25:8	0:0	4	h
op	25:9	0:0	4	->
water	25:11	0:0	4	pic_type
op	25:20	0:0	4	=
water	25:22	0:0	4	AV_PICTURE_TYPE_I
water	25:39	0:0	4	;
if	26:8	27:32	4	(get_bits1 (& s -> gb ))
cond	26:11	26:27	5	get_bits1 (& s -> gb )
call	26:11	26:27	6	get_bits1
arg	26:21	26:27	7	&s->gb
op	26:21	0:0	8	&
water	26:22	0:0	8	s
op	26:23	0:0	8	->
water	26:25	0:0	8	gb
stmts	27:12	27:32	5	
call	27:12	27:31	6	skip_bits
arg	27:22	27:28	7	&s->gb
op	27:22	0:0	8	&
water	27:23	0:0	8	s
op	27:24	0:0	8	->
water	27:26	0:0	8	gb
arg	27:29	27:31	7	24
water	27:29	0:0	8	24
water	27:32	0:0	6	;
if	30:8	31:34	4	(( s -> low_delay ) || ! (show_bits (& s -> gb ,9 ) & 1 ))
cond	30:11	30:54	5	( s -> low_delay ) || ! (show_bits (& s -> gb ,9 ) & 1 )
water	30:11	0:0	6	(
water	30:12	0:0	6	s
op	30:13	0:0	6	->
water	30:15	0:0	6	low_delay
water	30:24	0:0	6	)
op	30:26	0:0	6	||
op	30:29	0:0	6	!
water	30:30	0:0	6	(
call	30:31	30:49	6	show_bits
arg	30:41	30:47	7	&s->gb
op	30:41	0:0	8	&
water	30:42	0:0	8	s
op	30:43	0:0	8	->
water	30:45	0:0	8	gb
arg	30:48	30:49	7	9
water	30:48	0:0	8	9
op	30:51	0:0	6	&
water	30:53	0:0	6	1
water	30:54	0:0	6	)
stmts	31:12	31:34	5	
water	31:12	0:0	6	h
op	31:13	0:0	6	->
water	31:15	0:0	6	stream_revision
op	31:31	0:0	6	=
water	31:33	0:0	6	1
water	31:34	0:0	6	;
else	33:8	34:34	4
stmts	33:13	34:34	5	
if	33:13	34:34	6	(show_bits (& s -> gb ,11 ) & 3)
cond	33:16	33:39	7	show_bits (& s -> gb ,11 ) & 3
call	33:16	33:35	8	show_bits
arg	33:26	33:32	9	&s->gb
op	33:26	0:0	10	&
water	33:27	0:0	10	s
op	33:28	0:0	10	->
water	33:30	0:0	10	gb
arg	33:33	33:35	9	11
water	33:33	0:0	10	11
op	33:37	0:0	8	&
water	33:39	0:0	8	3
stmts	34:12	34:34	7	
water	34:12	0:0	8	h
op	34:13	0:0	8	->
water	34:15	0:0	8	stream_revision
op	34:31	0:0	8	=
water	34:33	0:0	8	1
water	34:34	0:0	8	;
if	35:8	36:31	4	(h -> stream_revision > 0)
cond	35:11	35:32	5	h -> stream_revision > 0
water	35:11	0:0	6	h
op	35:12	0:0	6	->
water	35:14	0:0	6	stream_revision
op	35:30	0:0	6	>
water	35:32	0:0	6	0
stmts	36:12	36:31	5	
call	36:12	36:30	6	skip_bits
arg	36:22	36:28	7	&s->gb
op	36:22	0:0	8	&
water	36:23	0:0	8	s
op	36:24	0:0	8	->
water	36:26	0:0	8	gb
arg	36:29	36:30	7	1
water	36:29	0:0	8	1
water	36:31	0:0	6	;
water	37:4	0:0	4	}
if	39:4	40:66	2	(h -> picture . data [ 0 ])
cond	39:7	39:24	3	h -> picture . data [ 0 ]
water	39:7	0:0	4	h
op	39:8	0:0	4	->
water	39:10	0:0	4	picture
op	39:17	0:0	4	.
water	39:18	0:0	4	data
op	39:22	0:0	4	[
water	39:23	0:0	4	0
op	39:24	0:0	4	]
stmts	40:8	40:66	3	
call	40:8	40:65	4	s->avctx->release_buffer
arg	40:33	40:41	5	s->avctx
water	40:33	0:0	6	s
op	40:34	0:0	6	->
water	40:36	0:0	6	avctx
arg	40:43	40:65	5	(AVFrame*)&h->picture
water	40:43	0:0	6	(
water	40:44	0:0	6	AVFrame
op	40:52	0:0	6	*
water	40:53	0:0	6	)
op	40:54	0:0	6	&
water	40:55	0:0	6	h
op	40:56	0:0	6	->
water	40:58	0:0	6	picture
water	40:66	0:0	4	;
call	42:4	42:57	2	s->avctx->get_buffer
arg	42:25	42:33	3	s->avctx
water	42:25	0:0	4	s
op	42:26	0:0	4	->
water	42:28	0:0	4	avctx
arg	42:35	42:57	3	(AVFrame*)&h->picture
water	42:35	0:0	4	(
water	42:36	0:0	4	AVFrame
op	42:44	0:0	4	*
water	42:45	0:0	4	)
op	42:46	0:0	4	&
water	42:47	0:0	4	h
op	42:48	0:0	4	->
water	42:50	0:0	4	picture
water	42:58	0:0	2	;
call	43:4	43:22	2	ff_cavs_init_pic
arg	43:21	43:22	3	h
water	43:21	0:0	4	h
water	43:23	0:0	2	;
water	44:4	0:0	2	h
op	44:5	0:0	2	->
water	44:7	0:0	2	picture
op	44:14	0:0	2	.
water	44:15	0:0	2	poc
op	44:19	0:0	2	=
call	44:21	44:38	2	get_bits
arg	44:30	44:36	3	&s->gb
op	44:30	0:0	4	&
water	44:31	0:0	4	s
op	44:32	0:0	4	->
water	44:34	0:0	4	gb
arg	44:37	44:38	3	8
water	44:37	0:0	4	8
op	44:39	0:0	2	*
water	44:40	0:0	2	2
water	44:41	0:0	2	;
if	47:4	49:4	2	(h -> pic_type != AV_PICTURE_TYPE_B)
cond	47:7	47:22	3	h -> pic_type != AV_PICTURE_TYPE_B
water	47:7	0:0	4	h
op	47:8	0:0	4	->
water	47:10	0:0	4	pic_type
op	47:19	0:0	4	!=
water	47:22	0:0	4	AV_PICTURE_TYPE_B
stmts	47:41	49:4	3	
water	47:41	0:0	4	{
water	48:8	0:0	4	h
op	48:9	0:0	4	->
water	48:11	0:0	4	dist
op	48:15	0:0	4	[
water	48:16	0:0	4	0
op	48:17	0:0	4	]
op	48:19	0:0	4	=
water	48:21	0:0	4	(
water	48:22	0:0	4	h
op	48:23	0:0	4	->
water	48:25	0:0	4	picture
op	48:32	0:0	4	.
water	48:33	0:0	4	poc
op	48:37	0:0	4	-
water	48:39	0:0	4	h
op	48:40	0:0	4	->
water	48:42	0:0	4	DPB
op	48:45	0:0	4	[
water	48:46	0:0	4	0
op	48:47	0:0	4	]
op	48:48	0:0	4	.
water	48:49	0:0	4	poc
op	48:54	0:0	4	+
water	48:56	0:0	4	512
water	48:59	0:0	4	)
op	48:61	0:0	4	%
water	48:63	0:0	4	512
water	48:66	0:0	4	;
water	49:4	0:0	4	}
else	49:6	51:4	2
stmts	49:11	51:4	3	
water	49:11	0:0	4	{
water	50:8	0:0	4	h
op	50:9	0:0	4	->
water	50:11	0:0	4	dist
op	50:15	0:0	4	[
water	50:16	0:0	4	0
op	50:17	0:0	4	]
op	50:19	0:0	4	=
water	50:21	0:0	4	(
water	50:22	0:0	4	h
op	50:23	0:0	4	->
water	50:25	0:0	4	DPB
op	50:28	0:0	4	[
water	50:29	0:0	4	0
op	50:30	0:0	4	]
op	50:31	0:0	4	.
water	50:32	0:0	4	poc
op	50:37	0:0	4	-
water	50:39	0:0	4	h
op	50:40	0:0	4	->
water	50:42	0:0	4	picture
op	50:49	0:0	4	.
water	50:50	0:0	4	poc
op	50:54	0:0	4	+
water	50:56	0:0	4	512
water	50:59	0:0	4	)
op	50:61	0:0	4	%
water	50:63	0:0	4	512
water	50:66	0:0	4	;
water	51:4	0:0	4	}
water	52:4	0:0	2	h
op	52:5	0:0	2	->
water	52:7	0:0	2	dist
op	52:11	0:0	2	[
water	52:12	0:0	2	1
op	52:13	0:0	2	]
op	52:15	0:0	2	=
water	52:17	0:0	2	(
water	52:18	0:0	2	h
op	52:19	0:0	2	->
water	52:21	0:0	2	picture
op	52:28	0:0	2	.
water	52:29	0:0	2	poc
op	52:33	0:0	2	-
water	52:35	0:0	2	h
op	52:36	0:0	2	->
water	52:38	0:0	2	DPB
op	52:41	0:0	2	[
water	52:42	0:0	2	1
op	52:43	0:0	2	]
op	52:44	0:0	2	.
water	52:45	0:0	2	poc
op	52:50	0:0	2	+
water	52:52	0:0	2	512
water	52:55	0:0	2	)
op	52:57	0:0	2	%
water	52:59	0:0	2	512
water	52:62	0:0	2	;
water	53:4	0:0	2	h
op	53:5	0:0	2	->
water	53:7	0:0	2	scale_den
op	53:16	0:0	2	[
water	53:17	0:0	2	0
op	53:18	0:0	2	]
op	53:20	0:0	2	=
water	53:22	0:0	2	h
op	53:23	0:0	2	->
water	53:25	0:0	2	dist
op	53:29	0:0	2	[
water	53:30	0:0	2	0
op	53:31	0:0	2	]
water	53:33	0:0	2	?
water	53:35	0:0	2	512
op	53:38	0:0	2	/
water	53:39	0:0	2	h
op	53:40	0:0	2	->
water	53:42	0:0	2	dist
op	53:46	0:0	2	[
water	53:47	0:0	2	0
op	53:48	0:0	2	]
water	53:50	0:0	2	:
water	53:52	0:0	2	0
water	53:53	0:0	2	;
water	54:4	0:0	2	h
op	54:5	0:0	2	->
water	54:7	0:0	2	scale_den
op	54:16	0:0	2	[
water	54:17	0:0	2	1
op	54:18	0:0	2	]
op	54:20	0:0	2	=
water	54:22	0:0	2	h
op	54:23	0:0	2	->
water	54:25	0:0	2	dist
op	54:29	0:0	2	[
water	54:30	0:0	2	1
op	54:31	0:0	2	]
water	54:33	0:0	2	?
water	54:35	0:0	2	512
op	54:38	0:0	2	/
water	54:39	0:0	2	h
op	54:40	0:0	2	->
water	54:42	0:0	2	dist
op	54:46	0:0	2	[
water	54:47	0:0	2	1
op	54:48	0:0	2	]
water	54:50	0:0	2	:
water	54:52	0:0	2	0
water	54:53	0:0	2	;
if	55:4	57:4	2	(h -> pic_type == AV_PICTURE_TYPE_B)
cond	55:7	55:22	3	h -> pic_type == AV_PICTURE_TYPE_B
water	55:7	0:0	4	h
op	55:8	0:0	4	->
water	55:10	0:0	4	pic_type
op	55:19	0:0	4	==
water	55:22	0:0	4	AV_PICTURE_TYPE_B
stmts	55:41	57:4	3	
water	55:41	0:0	4	{
water	56:8	0:0	4	h
op	56:9	0:0	4	->
water	56:11	0:0	4	sym_factor
op	56:22	0:0	4	=
water	56:24	0:0	4	h
op	56:25	0:0	4	->
water	56:27	0:0	4	dist
op	56:31	0:0	4	[
water	56:32	0:0	4	0
op	56:33	0:0	4	]
op	56:34	0:0	4	*
water	56:35	0:0	4	h
op	56:36	0:0	4	->
water	56:38	0:0	4	scale_den
op	56:47	0:0	4	[
water	56:48	0:0	4	1
op	56:49	0:0	4	]
water	56:50	0:0	4	;
water	57:4	0:0	4	}
else	57:6	60:4	2
stmts	57:11	60:4	3	
water	57:11	0:0	4	{
water	58:8	0:0	4	h
op	58:9	0:0	4	->
water	58:11	0:0	4	direct_den
op	58:21	0:0	4	[
water	58:22	0:0	4	0
op	58:23	0:0	4	]
op	58:25	0:0	4	=
water	58:27	0:0	4	h
op	58:28	0:0	4	->
water	58:30	0:0	4	dist
op	58:34	0:0	4	[
water	58:35	0:0	4	0
op	58:36	0:0	4	]
water	58:38	0:0	4	?
water	58:40	0:0	4	16384
op	58:45	0:0	4	/
water	58:46	0:0	4	h
op	58:47	0:0	4	->
water	58:49	0:0	4	dist
op	58:53	0:0	4	[
water	58:54	0:0	4	0
op	58:55	0:0	4	]
water	58:57	0:0	4	:
water	58:59	0:0	4	0
water	58:60	0:0	4	;
water	59:8	0:0	4	h
op	59:9	0:0	4	->
water	59:11	0:0	4	direct_den
op	59:21	0:0	4	[
water	59:22	0:0	4	1
op	59:23	0:0	4	]
op	59:25	0:0	4	=
water	59:27	0:0	4	h
op	59:28	0:0	4	->
water	59:30	0:0	4	dist
op	59:34	0:0	4	[
water	59:35	0:0	4	1
op	59:36	0:0	4	]
water	59:38	0:0	4	?
water	59:40	0:0	4	16384
op	59:45	0:0	4	/
water	59:46	0:0	4	h
op	59:47	0:0	4	->
water	59:49	0:0	4	dist
op	59:53	0:0	4	[
water	59:54	0:0	4	1
op	59:55	0:0	4	]
water	59:57	0:0	4	:
water	59:59	0:0	4	0
water	59:60	0:0	4	;
water	60:4	0:0	4	}
if	62:4	63:29	2	(s -> low_delay)
cond	62:7	62:10	3	s -> low_delay
water	62:7	0:0	4	s
op	62:8	0:0	4	->
water	62:10	0:0	4	low_delay
stmts	63:8	63:29	3	
call	63:8	63:28	4	get_ue_golomb
arg	63:22	63:28	5	&s->gb
op	63:22	0:0	6	&
water	63:23	0:0	6	s
op	63:24	0:0	6	->
water	63:26	0:0	6	gb
water	63:29	0:0	4	;
water	64:4	0:0	2	h
op	64:5	0:0	2	->
water	64:7	0:0	2	progressive
op	64:31	0:0	2	=
call	64:33	64:49	2	get_bits1
arg	64:43	64:49	3	&s->gb
op	64:43	0:0	4	&
water	64:44	0:0	4	s
op	64:45	0:0	4	->
water	64:47	0:0	4	gb
water	64:50	0:0	2	;
water	65:4	0:0	2	h
op	65:5	0:0	2	->
water	65:7	0:0	2	pic_structure
op	65:21	0:0	2	=
water	65:23	0:0	2	1
water	65:24	0:0	2	;
if	66:4	67:44	2	(! h -> progressive)
cond	66:7	66:11	3	! h -> progressive
op	66:7	0:0	4	!
water	66:8	0:0	4	h
op	66:9	0:0	4	->
water	66:11	0:0	4	progressive
stmts	67:8	67:44	3	
water	67:8	0:0	4	h
op	67:9	0:0	4	->
water	67:11	0:0	4	pic_structure
op	67:25	0:0	4	=
call	67:27	67:43	4	get_bits1
arg	67:37	67:43	5	&s->gb
op	67:37	0:0	6	&
water	67:38	0:0	6	s
op	67:39	0:0	6	->
water	67:41	0:0	6	gb
water	67:44	0:0	4	;
if	68:4	69:26	2	(! h -> pic_structure && h -> stc == PIC_PB_START_CODE)
cond	68:7	68:38	3	! h -> pic_structure && h -> stc == PIC_PB_START_CODE
op	68:7	0:0	4	!
water	68:8	0:0	4	h
op	68:9	0:0	4	->
water	68:11	0:0	4	pic_structure
op	68:25	0:0	4	&&
water	68:28	0:0	4	h
op	68:29	0:0	4	->
water	68:31	0:0	4	stc
op	68:35	0:0	4	==
water	68:38	0:0	4	PIC_PB_START_CODE
stmts	69:8	69:26	3	
call	69:8	69:25	4	skip_bits1
arg	69:19	69:25	5	&s->gb
op	69:19	0:0	6	&
water	69:20	0:0	6	s
op	69:21	0:0	6	->
water	69:23	0:0	6	gb
water	69:26	0:0	4	;
call	70:4	70:21	2	skip_bits1
arg	70:15	70:21	3	&s->gb
op	70:15	0:0	4	&
water	70:16	0:0	4	s
op	70:17	0:0	4	->
water	70:19	0:0	4	gb
water	70:22	0:0	2	;
call	71:4	71:21	2	skip_bits1
arg	71:15	71:21	3	&s->gb
op	71:15	0:0	4	&
water	71:16	0:0	4	s
op	71:17	0:0	4	->
water	71:19	0:0	4	gb
water	71:22	0:0	2	;
water	72:4	0:0	2	h
op	72:5	0:0	2	->
water	72:7	0:0	2	qp_fixed
op	72:31	0:0	2	=
call	72:33	72:49	2	get_bits1
arg	72:43	72:49	3	&s->gb
op	72:43	0:0	4	&
water	72:44	0:0	4	s
op	72:45	0:0	4	->
water	72:47	0:0	4	gb
water	72:50	0:0	2	;
water	73:4	0:0	2	h
op	73:5	0:0	2	->
water	73:7	0:0	2	qp
op	73:31	0:0	2	=
call	73:33	73:50	2	get_bits
arg	73:42	73:48	3	&s->gb
op	73:42	0:0	4	&
water	73:43	0:0	4	s
op	73:44	0:0	4	->
water	73:46	0:0	4	gb
arg	73:49	73:50	3	6
water	73:49	0:0	4	6
water	73:51	0:0	2	;
if	74:4	78:4	2	(h -> pic_type == AV_PICTURE_TYPE_I)
cond	74:7	74:22	3	h -> pic_type == AV_PICTURE_TYPE_I
water	74:7	0:0	4	h
op	74:8	0:0	4	->
water	74:10	0:0	4	pic_type
op	74:19	0:0	4	==
water	74:22	0:0	4	AV_PICTURE_TYPE_I
stmts	74:41	78:4	3	
water	74:41	0:0	4	{
if	75:8	76:30	4	(! h -> progressive && ! h -> pic_structure)
cond	75:11	75:34	5	! h -> progressive && ! h -> pic_structure
op	75:11	0:0	6	!
water	75:12	0:0	6	h
op	75:13	0:0	6	->
water	75:15	0:0	6	progressive
op	75:27	0:0	6	&&
op	75:30	0:0	6	!
water	75:31	0:0	6	h
op	75:32	0:0	6	->
water	75:34	0:0	6	pic_structure
stmts	76:12	76:30	5	
call	76:12	76:29	6	skip_bits1
arg	76:23	76:29	7	&s->gb
op	76:23	0:0	8	&
water	76:24	0:0	8	s
op	76:25	0:0	8	->
water	76:27	0:0	8	gb
water	76:30	0:0	6	;
call	77:8	77:26	4	skip_bits
arg	77:18	77:24	5	&s->gb
op	77:18	0:0	6	&
water	77:19	0:0	6	s
op	77:20	0:0	6	->
water	77:22	0:0	6	gb
arg	77:25	77:26	5	4
water	77:25	0:0	6	4
water	77:27	0:0	4	;
water	78:4	0:0	4	}
else	78:6	83:4	2
stmts	78:11	83:4	3	
water	78:11	0:0	4	{
if	79:8	80:50	4	(! ( h -> pic_type == AV_PICTURE_TYPE_B && h -> pic_structure == 1 ))
cond	79:11	79:70	5	! ( h -> pic_type == AV_PICTURE_TYPE_B && h -> pic_structure == 1 )
op	79:11	0:0	6	!
water	79:12	0:0	6	(
water	79:13	0:0	6	h
op	79:14	0:0	6	->
water	79:16	0:0	6	pic_type
op	79:25	0:0	6	==
water	79:28	0:0	6	AV_PICTURE_TYPE_B
op	79:46	0:0	6	&&
water	79:49	0:0	6	h
op	79:50	0:0	6	->
water	79:52	0:0	6	pic_structure
op	79:66	0:0	6	==
water	79:69	0:0	6	1
water	79:70	0:0	6	)
stmts	80:12	80:50	5	
water	80:12	0:0	6	h
op	80:13	0:0	6	->
water	80:15	0:0	6	ref_flag
op	80:31	0:0	6	=
call	80:33	80:49	6	get_bits1
arg	80:43	80:49	7	&s->gb
op	80:43	0:0	8	&
water	80:44	0:0	8	s
op	80:45	0:0	8	->
water	80:47	0:0	8	gb
water	80:50	0:0	6	;
call	81:8	81:26	4	skip_bits
arg	81:18	81:24	5	&s->gb
op	81:18	0:0	6	&
water	81:19	0:0	6	s
op	81:20	0:0	6	->
water	81:22	0:0	6	gb
arg	81:25	81:26	5	4
water	81:25	0:0	6	4
water	81:27	0:0	4	;
water	82:8	0:0	4	h
op	82:9	0:0	4	->
water	82:11	0:0	4	skip_mode_flag
op	82:31	0:0	4	=
call	82:33	82:49	4	get_bits1
arg	82:43	82:49	5	&s->gb
op	82:43	0:0	6	&
water	82:44	0:0	6	s
op	82:45	0:0	6	->
water	82:47	0:0	6	gb
water	82:50	0:0	4	;
water	83:4	0:0	4	}
water	84:4	0:0	2	h
op	84:5	0:0	2	->
water	84:7	0:0	2	loop_filter_disable
op	84:31	0:0	2	=
call	84:33	84:49	2	get_bits1
arg	84:43	84:49	3	&s->gb
op	84:43	0:0	4	&
water	84:44	0:0	4	s
op	84:45	0:0	4	->
water	84:47	0:0	4	gb
water	84:50	0:0	2	;
if	85:4	88:4	2	(! h -> loop_filter_disable &&get_bits1 (& s -> gb ))
cond	85:7	85:50	3	! h -> loop_filter_disable &&get_bits1 (& s -> gb )
op	85:7	0:0	4	!
water	85:8	0:0	4	h
op	85:9	0:0	4	->
water	85:11	0:0	4	loop_filter_disable
op	85:31	0:0	4	&&
call	85:34	85:50	4	get_bits1
arg	85:44	85:50	5	&s->gb
op	85:44	0:0	6	&
water	85:45	0:0	6	s
op	85:46	0:0	6	->
water	85:48	0:0	6	gb
stmts	85:53	88:4	3	
water	85:53	0:0	4	{
water	86:8	0:0	4	h
op	86:9	0:0	4	->
water	86:11	0:0	4	alpha_offset
op	86:31	0:0	4	=
call	86:33	86:53	4	get_se_golomb
arg	86:47	86:53	5	&s->gb
op	86:47	0:0	6	&
water	86:48	0:0	6	s
op	86:49	0:0	6	->
water	86:51	0:0	6	gb
water	86:54	0:0	4	;
water	87:8	0:0	4	h
op	87:9	0:0	4	->
water	87:11	0:0	4	beta_offset
op	87:31	0:0	4	=
call	87:33	87:53	4	get_se_golomb
arg	87:47	87:53	5	&s->gb
op	87:47	0:0	6	&
water	87:48	0:0	6	s
op	87:49	0:0	6	->
water	87:51	0:0	6	gb
water	87:54	0:0	4	;
water	88:4	0:0	4	}
else	88:6	90:4	2
stmts	88:11	90:4	3	
water	88:11	0:0	4	{
water	89:8	0:0	4	h
op	89:9	0:0	4	->
water	89:11	0:0	4	alpha_offset
op	89:24	0:0	4	=
water	89:26	0:0	4	h
op	89:27	0:0	4	->
water	89:29	0:0	4	beta_offset
op	89:42	0:0	4	=
water	89:44	0:0	4	0
water	89:45	0:0	4	;
water	90:4	0:0	4	}
if	91:4	96:4	2	(h -> pic_type == AV_PICTURE_TYPE_I)
cond	91:7	91:22	3	h -> pic_type == AV_PICTURE_TYPE_I
water	91:7	0:0	4	h
op	91:8	0:0	4	->
water	91:10	0:0	4	pic_type
op	91:19	0:0	4	==
water	91:22	0:0	4	AV_PICTURE_TYPE_I
stmts	91:41	96:4	3	
water	91:41	0:0	4	{
do	92:8	95:8	4	(ff_cavs_next_mb (h ))
cond	95:16	95:33	5	ff_cavs_next_mb (h )
call	95:16	95:33	6	ff_cavs_next_mb
arg	95:32	95:33	7	h
water	95:32	0:0	8	h
stmts	92:11	95:8	5	
water	92:11	0:0	6	{
call	93:12	93:29	6	check_for_slice
arg	93:28	93:29	7	h
water	93:28	0:0	8	h
water	93:30	0:0	6	;
call	94:12	94:28	6	decode_mb_i
arg	94:24	94:25	7	h
water	94:24	0:0	8	h
arg	94:27	94:28	7	0
water	94:27	0:0	8	0
water	94:29	0:0	6	;
water	95:8	0:0	6	}
water	95:35	0:0	4	;
water	96:4	0:0	4	}
else	96:6	112:4	2
stmts	96:11	112:4	3	
if	96:11	112:4	4	(h -> pic_type == AV_PICTURE_TYPE_P)
cond	96:14	96:29	5	h -> pic_type == AV_PICTURE_TYPE_P
water	96:14	0:0	6	h
op	96:15	0:0	6	->
water	96:17	0:0	6	pic_type
op	96:26	0:0	6	==
water	96:29	0:0	6	AV_PICTURE_TYPE_P
stmts	96:48	112:4	5	
water	96:48	0:0	6	{
do	97:8	111:8	6	(ff_cavs_next_mb (h ))
cond	111:16	111:33	7	ff_cavs_next_mb (h )
call	111:16	111:33	8	ff_cavs_next_mb
arg	111:32	111:33	9	h
water	111:32	0:0	10	h
stmts	97:11	111:8	7	
water	97:11	0:0	8	{
if	98:12	99:31	8	(check_for_slice (h ))
cond	98:15	98:32	9	check_for_slice (h )
call	98:15	98:32	10	check_for_slice
arg	98:31	98:32	11	h
water	98:31	0:0	12	h
stmts	99:16	99:31	9	
water	99:16	0:0	10	skip_count
op	99:27	0:0	10	=
op	99:29	0:0	10	-
water	99:30	0:0	10	1
water	99:31	0:0	10	;
if	100:12	101:50	8	(h -> skip_mode_flag && ( skip_count < 0 ))
cond	100:15	100:51	9	h -> skip_mode_flag && ( skip_count < 0 )
water	100:15	0:0	10	h
op	100:16	0:0	10	->
water	100:18	0:0	10	skip_mode_flag
op	100:33	0:0	10	&&
water	100:36	0:0	10	(
water	100:37	0:0	10	skip_count
op	100:48	0:0	10	<
water	100:50	0:0	10	0
water	100:51	0:0	10	)
stmts	101:16	101:50	9	
water	101:16	0:0	10	skip_count
op	101:27	0:0	10	=
call	101:29	101:49	10	get_ue_golomb
arg	101:43	101:49	11	&s->gb
op	101:43	0:0	12	&
water	101:44	0:0	12	s
op	101:45	0:0	12	->
water	101:47	0:0	12	gb
water	101:50	0:0	10	;
if	102:12	104:12	8	(h -> skip_mode_flag && skip_count --)
cond	102:15	102:46	9	h -> skip_mode_flag && skip_count --
water	102:15	0:0	10	h
op	102:16	0:0	10	->
water	102:18	0:0	10	skip_mode_flag
op	102:33	0:0	10	&&
water	102:36	0:0	10	skip_count
op	102:46	0:0	10	--
stmts	102:50	104:12	9	
water	102:50	0:0	10	{
call	103:16	103:36	10	decode_mb_p
arg	103:28	103:29	11	h
water	103:28	0:0	12	h
arg	103:30	103:36	11	P_SKIP
water	103:30	0:0	12	P_SKIP
water	103:37	0:0	10	;
water	104:12	0:0	10	}
else	104:14	110:12	8
stmts	104:19	110:12	9	
water	104:19	0:0	10	{
water	105:16	0:0	10	mb_type
op	105:24	0:0	10	=
call	105:26	105:46	10	get_ue_golomb
arg	105:40	105:46	11	&s->gb
op	105:40	0:0	12	&
water	105:41	0:0	12	s
op	105:42	0:0	12	->
water	105:44	0:0	12	gb
op	105:48	0:0	10	+
water	105:50	0:0	10	P_SKIP
op	105:57	0:0	10	+
water	105:59	0:0	10	h
op	105:60	0:0	10	->
water	105:62	0:0	10	skip_mode_flag
water	105:76	0:0	10	;
if	106:16	107:55	10	(mb_type > P_8X8)
cond	106:19	106:29	11	mb_type > P_8X8
water	106:19	0:0	12	mb_type
op	106:27	0:0	12	>
water	106:29	0:0	12	P_8X8
stmts	107:20	107:55	11	
call	107:20	107:54	12	decode_mb_i
arg	107:32	107:33	13	h
water	107:32	0:0	14	h
arg	107:35	107:54	13	mb_type-P_8X8-1
water	107:35	0:0	14	mb_type
op	107:43	0:0	14	-
water	107:45	0:0	14	P_8X8
op	107:51	0:0	14	-
water	107:53	0:0	14	1
water	107:55	0:0	12	;
else	108:16	109:42	10
stmts	109:20	109:42	11	
call	109:20	109:41	12	decode_mb_p
arg	109:32	109:33	13	h
water	109:32	0:0	14	h
arg	109:34	109:41	13	mb_type
water	109:34	0:0	14	mb_type
water	109:42	0:0	12	;
water	110:12	0:0	10	}
water	111:8	0:0	8	}
water	111:35	0:0	6	;
water	112:4	0:0	6	}
else	112:6	128:4	2
stmts	112:11	128:4	3	
water	112:11	0:0	4	{
do	113:8	127:8	4	(ff_cavs_next_mb (h ))
cond	127:16	127:33	5	ff_cavs_next_mb (h )
call	127:16	127:33	6	ff_cavs_next_mb
arg	127:32	127:33	7	h
water	127:32	0:0	8	h
stmts	113:11	127:8	5	
water	113:11	0:0	6	{
if	114:12	115:31	6	(check_for_slice (h ))
cond	114:15	114:32	7	check_for_slice (h )
call	114:15	114:32	8	check_for_slice
arg	114:31	114:32	9	h
water	114:31	0:0	10	h
stmts	115:16	115:31	7	
water	115:16	0:0	8	skip_count
op	115:27	0:0	8	=
op	115:29	0:0	8	-
water	115:30	0:0	8	1
water	115:31	0:0	8	;
if	116:12	117:50	6	(h -> skip_mode_flag && ( skip_count < 0 ))
cond	116:15	116:51	7	h -> skip_mode_flag && ( skip_count < 0 )
water	116:15	0:0	8	h
op	116:16	0:0	8	->
water	116:18	0:0	8	skip_mode_flag
op	116:33	0:0	8	&&
water	116:36	0:0	8	(
water	116:37	0:0	8	skip_count
op	116:48	0:0	8	<
water	116:50	0:0	8	0
water	116:51	0:0	8	)
stmts	117:16	117:50	7	
water	117:16	0:0	8	skip_count
op	117:27	0:0	8	=
call	117:29	117:49	8	get_ue_golomb
arg	117:43	117:49	9	&s->gb
op	117:43	0:0	10	&
water	117:44	0:0	10	s
op	117:45	0:0	10	->
water	117:47	0:0	10	gb
water	117:50	0:0	8	;
if	118:12	120:12	6	(h -> skip_mode_flag && skip_count --)
cond	118:15	118:46	7	h -> skip_mode_flag && skip_count --
water	118:15	0:0	8	h
op	118:16	0:0	8	->
water	118:18	0:0	8	skip_mode_flag
op	118:33	0:0	8	&&
water	118:36	0:0	8	skip_count
op	118:46	0:0	8	--
stmts	118:50	120:12	7	
water	118:50	0:0	8	{
call	119:16	119:36	8	decode_mb_b
arg	119:28	119:29	9	h
water	119:28	0:0	10	h
arg	119:30	119:36	9	B_SKIP
water	119:30	0:0	10	B_SKIP
water	119:37	0:0	8	;
water	120:12	0:0	8	}
else	120:14	126:12	6
stmts	120:19	126:12	7	
water	120:19	0:0	8	{
water	121:16	0:0	8	mb_type
op	121:24	0:0	8	=
call	121:26	121:46	8	get_ue_golomb
arg	121:40	121:46	9	&s->gb
op	121:40	0:0	10	&
water	121:41	0:0	10	s
op	121:42	0:0	10	->
water	121:44	0:0	10	gb
op	121:48	0:0	8	+
water	121:50	0:0	8	B_SKIP
op	121:57	0:0	8	+
water	121:59	0:0	8	h
op	121:60	0:0	8	->
water	121:62	0:0	8	skip_mode_flag
water	121:76	0:0	8	;
if	122:16	123:55	8	(mb_type > B_8X8)
cond	122:19	122:29	9	mb_type > B_8X8
water	122:19	0:0	10	mb_type
op	122:27	0:0	10	>
water	122:29	0:0	10	B_8X8
stmts	123:20	123:55	9	
call	123:20	123:54	10	decode_mb_i
arg	123:32	123:33	11	h
water	123:32	0:0	12	h
arg	123:35	123:54	11	mb_type-B_8X8-1
water	123:35	0:0	12	mb_type
op	123:43	0:0	12	-
water	123:45	0:0	12	B_8X8
op	123:51	0:0	12	-
water	123:53	0:0	12	1
water	123:55	0:0	10	;
else	124:16	125:42	8
stmts	125:20	125:42	9	
call	125:20	125:41	10	decode_mb_b
arg	125:32	125:33	11	h
water	125:32	0:0	12	h
arg	125:34	125:41	11	mb_type
water	125:34	0:0	12	mb_type
water	125:42	0:0	10	;
water	126:12	0:0	8	}
water	127:8	0:0	6	}
water	127:35	0:0	4	;
water	128:4	0:0	4	}
if	129:4	135:4	2	(h -> pic_type != AV_PICTURE_TYPE_B)
cond	129:7	129:22	3	h -> pic_type != AV_PICTURE_TYPE_B
water	129:7	0:0	4	h
op	129:8	0:0	4	->
water	129:10	0:0	4	pic_type
op	129:19	0:0	4	!=
water	129:22	0:0	4	AV_PICTURE_TYPE_B
stmts	129:41	135:4	3	
water	129:41	0:0	4	{
if	130:8	131:69	4	(h -> DPB [ 1 ] . data [ 0 ])
cond	130:11	130:27	5	h -> DPB [ 1 ] . data [ 0 ]
water	130:11	0:0	6	h
op	130:12	0:0	6	->
water	130:14	0:0	6	DPB
op	130:17	0:0	6	[
water	130:18	0:0	6	1
op	130:19	0:0	6	]
op	130:20	0:0	6	.
water	130:21	0:0	6	data
op	130:25	0:0	6	[
water	130:26	0:0	6	0
op	130:27	0:0	6	]
stmts	131:12	131:69	5	
call	131:12	131:68	6	s->avctx->release_buffer
arg	131:37	131:45	7	s->avctx
water	131:37	0:0	8	s
op	131:38	0:0	8	->
water	131:40	0:0	8	avctx
arg	131:47	131:68	7	(AVFrame*)&h->DPB[1]
water	131:47	0:0	8	(
water	131:48	0:0	8	AVFrame
op	131:56	0:0	8	*
water	131:57	0:0	8	)
op	131:58	0:0	8	&
water	131:59	0:0	8	h
op	131:60	0:0	8	->
water	131:62	0:0	8	DPB
op	131:65	0:0	8	[
water	131:66	0:0	8	1
op	131:67	0:0	8	]
water	131:69	0:0	6	;
water	132:8	0:0	4	h
op	132:9	0:0	4	->
water	132:11	0:0	4	DPB
op	132:14	0:0	4	[
water	132:15	0:0	4	1
op	132:16	0:0	4	]
op	132:18	0:0	4	=
water	132:20	0:0	4	h
op	132:21	0:0	4	->
water	132:23	0:0	4	DPB
op	132:26	0:0	4	[
water	132:27	0:0	4	0
op	132:28	0:0	4	]
water	132:29	0:0	4	;
water	133:8	0:0	4	h
op	133:9	0:0	4	->
water	133:11	0:0	4	DPB
op	133:14	0:0	4	[
water	133:15	0:0	4	0
op	133:16	0:0	4	]
op	133:18	0:0	4	=
water	133:20	0:0	4	h
op	133:21	0:0	4	->
water	133:23	0:0	4	picture
water	133:30	0:0	4	;
call	134:8	134:44	4	memset
arg	134:15	134:26	5	&h->picture
op	134:15	0:0	6	&
water	134:16	0:0	6	h
op	134:17	0:0	6	->
water	134:19	0:0	6	picture
arg	134:27	134:28	5	0
water	134:27	0:0	6	0
arg	134:29	134:44	5	sizeof(Picture)
op	134:29	0:0	6	sizeof
water	134:35	0:0	6	(
water	134:36	0:0	6	Picture
water	134:43	0:0	6	)
water	134:45	0:0	4	;
water	135:4	0:0	4	}
return	136:4	136:12	2	0
water	136:11	0:0	3	0
