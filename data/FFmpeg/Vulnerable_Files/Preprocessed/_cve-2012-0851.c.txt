func	2:0	154:0	0	int	ff_h264_decode_seq_parameter_set
params	2:36	0:0	1	
param	2:37	2:51	2	H264Context *	h
stmnts	3:4	153:13	1	
water	3:4	0:0	2	MpegEncContext
op	3:19	0:0	2	*
water	3:21	0:0	2	const
water	3:27	0:0	2	s
op	3:29	0:0	2	=
op	3:31	0:0	2	&
water	3:32	0:0	2	h
op	3:33	0:0	2	->
water	3:35	0:0	2	s
water	3:36	0:0	2	;
decl	4:4	4:56	2	int	profile_idc
water	4:19	0:0	2	,
decl	4:4	4:56	2	int	level_idc
water	4:30	0:0	2	,
decl	4:4	4:56	2	int	constraint_set_flags
op	4:53	0:0	2	=
water	4:55	0:0	2	0
decl	5:4	5:23	2	unsigned int	sps_id
decl	6:4	6:9	2	int	i
decl	7:4	7:12	2	SPS	*sps
water	9:4	0:0	2	profile_idc
op	9:15	0:0	2	=
call	9:17	9:35	2	get_bits
arg	9:26	9:32	3	&s->gb
op	9:26	0:0	4	&
water	9:27	0:0	4	s
op	9:28	0:0	4	->
water	9:30	0:0	4	gb
arg	9:34	9:35	3	8
water	9:34	0:0	4	8
water	9:36	0:0	2	;
water	10:4	0:0	2	constraint_set_flags
op	10:25	0:0	2	|=
call	10:28	10:44	2	get_bits1
arg	10:38	10:44	3	&s->gb
op	10:38	0:0	4	&
water	10:39	0:0	4	s
op	10:40	0:0	4	->
water	10:42	0:0	4	gb
op	10:46	0:0	2	<<
water	10:49	0:0	2	0
water	10:50	0:0	2	;
water	11:4	0:0	2	constraint_set_flags
op	11:25	0:0	2	|=
call	11:28	11:44	2	get_bits1
arg	11:38	11:44	3	&s->gb
op	11:38	0:0	4	&
water	11:39	0:0	4	s
op	11:40	0:0	4	->
water	11:42	0:0	4	gb
op	11:46	0:0	2	<<
water	11:49	0:0	2	1
water	11:50	0:0	2	;
water	12:4	0:0	2	constraint_set_flags
op	12:25	0:0	2	|=
call	12:28	12:44	2	get_bits1
arg	12:38	12:44	3	&s->gb
op	12:38	0:0	4	&
water	12:39	0:0	4	s
op	12:40	0:0	4	->
water	12:42	0:0	4	gb
op	12:46	0:0	2	<<
water	12:49	0:0	2	2
water	12:50	0:0	2	;
water	13:4	0:0	2	constraint_set_flags
op	13:25	0:0	2	|=
call	13:28	13:44	2	get_bits1
arg	13:38	13:44	3	&s->gb
op	13:38	0:0	4	&
water	13:39	0:0	4	s
op	13:40	0:0	4	->
water	13:42	0:0	4	gb
op	13:46	0:0	2	<<
water	13:49	0:0	2	3
water	13:50	0:0	2	;
call	14:4	14:22	2	get_bits
arg	14:13	14:19	3	&s->gb
op	14:13	0:0	4	&
water	14:14	0:0	4	s
op	14:15	0:0	4	->
water	14:17	0:0	4	gb
arg	14:21	14:22	3	4
water	14:21	0:0	4	4
water	14:23	0:0	2	;
water	15:4	0:0	2	level_idc
op	15:13	0:0	2	=
call	15:15	15:33	2	get_bits
arg	15:24	15:30	3	&s->gb
op	15:24	0:0	4	&
water	15:25	0:0	4	s
op	15:26	0:0	4	->
water	15:28	0:0	4	gb
arg	15:32	15:33	3	8
water	15:32	0:0	4	8
water	15:34	0:0	2	;
water	16:4	0:0	2	sps_id
op	16:10	0:0	2	=
call	16:12	16:35	2	get_ue_golomb_31
arg	16:29	16:35	3	&s->gb
op	16:29	0:0	4	&
water	16:30	0:0	4	s
op	16:31	0:0	4	->
water	16:33	0:0	4	gb
water	16:36	0:0	2	;
if	18:4	21:4	2	(sps_id >= MAX_SPS_COUNT)
cond	18:7	18:17	3	sps_id >= MAX_SPS_COUNT
water	18:7	0:0	4	sps_id
op	18:14	0:0	4	>=
water	18:17	0:0	4	MAX_SPS_COUNT
stmts	18:32	21:4	3	
water	18:32	0:0	4	{
call	19:8	19:77	4	av_log
arg	19:15	19:25	5	h->s.avctx
water	19:15	0:0	6	h
op	19:16	0:0	6	->
water	19:18	0:0	6	s
op	19:19	0:0	6	.
water	19:20	0:0	6	avctx
arg	19:27	19:39	5	AV_LOG_ERROR
water	19:27	0:0	6	AV_LOG_ERROR
arg	19:41	19:69	5	"sps_id (%d) out of range\n"
water	19:41	0:0	6	"sps_id (%d) out of range\n"
arg	19:71	19:77	5	sps_id
water	19:71	0:0	6	sps_id
water	19:78	0:0	4	;
return	20:8	20:17	4	-1
op	20:15	0:0	5	-
water	20:16	0:0	5	1
water	21:4	0:0	4	}
water	22:4	0:0	2	sps
op	22:7	0:0	2	=
call	22:9	22:31	2	av_mallocz
arg	22:20	22:31	3	sizeof(SPS)
op	22:20	0:0	4	sizeof
water	22:26	0:0	4	(
water	22:27	0:0	4	SPS
water	22:30	0:0	4	)
water	22:32	0:0	2	;
if	23:4	24:17	2	(sps == NULL)
cond	23:7	23:14	3	sps == NULL
water	23:7	0:0	4	sps
op	23:11	0:0	4	==
water	23:14	0:0	4	NULL
stmts	24:8	24:17	3	
return	24:8	24:17	4	-1
op	24:15	0:0	5	-
water	24:16	0:0	5	1
water	26:4	0:0	2	sps
op	26:7	0:0	2	->
water	26:9	0:0	2	time_offset_length
op	26:28	0:0	2	=
water	26:30	0:0	2	24
water	26:32	0:0	2	;
water	27:4	0:0	2	sps
op	27:7	0:0	2	->
water	27:9	0:0	2	profile_idc
op	27:20	0:0	2	=
water	27:22	0:0	2	profile_idc
water	27:33	0:0	2	;
water	28:4	0:0	2	sps
op	28:7	0:0	2	->
water	28:9	0:0	2	constraint_set_flags
op	28:30	0:0	2	=
water	28:32	0:0	2	constraint_set_flags
water	28:52	0:0	2	;
water	29:4	0:0	2	sps
op	29:7	0:0	2	->
water	29:9	0:0	2	level_idc
op	29:18	0:0	2	=
water	29:20	0:0	2	level_idc
water	29:29	0:0	2	;
call	31:4	31:65	2	memset
arg	31:11	31:31	3	sps->scaling_matrix4
water	31:11	0:0	4	sps
op	31:14	0:0	4	->
water	31:16	0:0	4	scaling_matrix4
arg	31:33	31:35	3	16
water	31:33	0:0	4	16
arg	31:37	31:65	3	sizeof(sps->scaling_matrix4)
op	31:37	0:0	4	sizeof
water	31:43	0:0	4	(
water	31:44	0:0	4	sps
op	31:47	0:0	4	->
water	31:49	0:0	4	scaling_matrix4
water	31:64	0:0	4	)
water	31:66	0:0	2	;
call	32:4	32:65	2	memset
arg	32:11	32:31	3	sps->scaling_matrix8
water	32:11	0:0	4	sps
op	32:14	0:0	4	->
water	32:16	0:0	4	scaling_matrix8
arg	32:33	32:35	3	16
water	32:33	0:0	4	16
arg	32:37	32:65	3	sizeof(sps->scaling_matrix8)
op	32:37	0:0	4	sizeof
water	32:43	0:0	4	(
water	32:44	0:0	4	sps
op	32:47	0:0	4	->
water	32:49	0:0	4	scaling_matrix8
water	32:64	0:0	4	)
water	32:66	0:0	2	;
water	33:4	0:0	2	sps
op	33:7	0:0	2	->
water	33:9	0:0	2	scaling_matrix_present
op	33:32	0:0	2	=
water	33:34	0:0	2	0
water	33:35	0:0	2	;
if	35:4	43:4	2	(sps -> profile_idc >= 100)
cond	35:7	35:27	3	sps -> profile_idc >= 100
water	35:7	0:0	4	sps
op	35:10	0:0	4	->
water	35:12	0:0	4	profile_idc
op	35:24	0:0	4	>=
water	35:27	0:0	4	100
stmts	35:31	43:4	3	
water	35:31	0:0	4	{
water	36:8	0:0	4	sps
op	36:11	0:0	4	->
water	36:13	0:0	4	chroma_format_idc
op	36:30	0:0	4	=
call	36:32	36:55	4	get_ue_golomb_31
arg	36:49	36:55	5	&s->gb
op	36:49	0:0	6	&
water	36:50	0:0	6	s
op	36:51	0:0	6	->
water	36:53	0:0	6	gb
water	36:56	0:0	4	;
if	37:8	38:66	4	(sps -> chroma_format_idc == 3)
cond	37:11	37:37	5	sps -> chroma_format_idc == 3
water	37:11	0:0	6	sps
op	37:14	0:0	6	->
water	37:16	0:0	6	chroma_format_idc
op	37:34	0:0	6	==
water	37:37	0:0	6	3
stmts	38:12	38:66	5	
water	38:12	0:0	6	sps
op	38:15	0:0	6	->
water	38:17	0:0	6	residual_color_transform_flag
op	38:47	0:0	6	=
call	38:49	38:65	6	get_bits1
arg	38:59	38:65	7	&s->gb
op	38:59	0:0	8	&
water	38:60	0:0	8	s
op	38:61	0:0	8	->
water	38:63	0:0	8	gb
water	38:66	0:0	6	;
water	39:8	0:0	4	sps
op	39:11	0:0	4	->
water	39:13	0:0	4	bit_depth_luma
op	39:30	0:0	4	=
call	39:32	39:52	4	get_ue_golomb
arg	39:46	39:52	5	&s->gb
op	39:46	0:0	6	&
water	39:47	0:0	6	s
op	39:48	0:0	6	->
water	39:50	0:0	6	gb
op	39:54	0:0	4	+
water	39:56	0:0	4	8
water	39:57	0:0	4	;
water	40:8	0:0	4	sps
op	40:11	0:0	4	->
water	40:13	0:0	4	bit_depth_chroma
op	40:30	0:0	4	=
call	40:32	40:52	4	get_ue_golomb
arg	40:46	40:52	5	&s->gb
op	40:46	0:0	6	&
water	40:47	0:0	6	s
op	40:48	0:0	6	->
water	40:50	0:0	6	gb
op	40:54	0:0	4	+
water	40:56	0:0	4	8
water	40:57	0:0	4	;
water	41:8	0:0	4	sps
op	41:11	0:0	4	->
water	41:13	0:0	4	transform_bypass
op	41:30	0:0	4	=
call	41:32	41:48	4	get_bits1
arg	41:42	41:48	5	&s->gb
op	41:42	0:0	6	&
water	41:43	0:0	6	s
op	41:44	0:0	6	->
water	41:46	0:0	6	gb
water	41:49	0:0	4	;
call	42:8	42:91	4	decode_scaling_matrices
arg	42:32	42:33	5	h
water	42:32	0:0	6	h
arg	42:35	42:38	5	sps
water	42:35	0:0	6	sps
arg	42:40	42:44	5	NULL
water	42:40	0:0	6	NULL
arg	42:46	42:47	5	1
water	42:46	0:0	6	1
arg	42:49	42:69	5	sps->scaling_matrix4
water	42:49	0:0	6	sps
op	42:52	0:0	6	->
water	42:54	0:0	6	scaling_matrix4
arg	42:71	42:91	5	sps->scaling_matrix8
water	42:71	0:0	6	sps
op	42:74	0:0	6	->
water	42:76	0:0	6	scaling_matrix8
water	42:92	0:0	4	;
water	43:4	0:0	4	}
else	43:5	47:4	2
stmts	43:9	47:4	3	
water	43:9	0:0	4	{
water	44:8	0:0	4	sps
op	44:11	0:0	4	->
water	44:13	0:0	4	chroma_format_idc
op	44:30	0:0	4	=
water	44:32	0:0	4	1
water	44:33	0:0	4	;
water	45:8	0:0	4	sps
op	45:11	0:0	4	->
water	45:13	0:0	4	bit_depth_luma
op	45:30	0:0	4	=
water	45:32	0:0	4	8
water	45:33	0:0	4	;
water	46:8	0:0	4	sps
op	46:11	0:0	4	->
water	46:13	0:0	4	bit_depth_chroma
op	46:30	0:0	4	=
water	46:32	0:0	4	8
water	46:33	0:0	4	;
water	47:4	0:0	4	}
water	49:4	0:0	2	sps
op	49:7	0:0	2	->
water	49:9	0:0	2	log2_max_frame_num
op	49:27	0:0	2	=
call	49:29	49:49	2	get_ue_golomb
arg	49:43	49:49	3	&s->gb
op	49:43	0:0	4	&
water	49:44	0:0	4	s
op	49:45	0:0	4	->
water	49:47	0:0	4	gb
op	49:51	0:0	2	+
water	49:53	0:0	2	4
water	49:54	0:0	2	;
water	50:4	0:0	2	sps
op	50:7	0:0	2	->
water	50:9	0:0	2	poc_type
op	50:17	0:0	2	=
call	50:19	50:42	2	get_ue_golomb_31
arg	50:36	50:42	3	&s->gb
op	50:36	0:0	4	&
water	50:37	0:0	4	s
op	50:38	0:0	4	->
water	50:40	0:0	4	gb
water	50:43	0:0	2	;
if	52:4	54:4	2	(sps -> poc_type == 0)
cond	52:7	52:24	3	sps -> poc_type == 0
water	52:7	0:0	4	sps
op	52:10	0:0	4	->
water	52:12	0:0	4	poc_type
op	52:21	0:0	4	==
water	52:24	0:0	4	0
stmts	52:26	54:4	3	
water	52:26	0:0	4	{
water	53:8	0:0	4	sps
op	53:11	0:0	4	->
water	53:13	0:0	4	log2_max_poc_lsb
op	53:29	0:0	4	=
call	53:31	53:51	4	get_ue_golomb
arg	53:45	53:51	5	&s->gb
op	53:45	0:0	6	&
water	53:46	0:0	6	s
op	53:47	0:0	6	->
water	53:49	0:0	6	gb
op	53:53	0:0	4	+
water	53:55	0:0	4	4
water	53:56	0:0	4	;
water	54:4	0:0	4	}
else	54:6	67:4	2
stmts	54:11	67:4	3	
if	54:11	67:4	4	(sps -> poc_type == 1)
cond	54:14	54:31	5	sps -> poc_type == 1
water	54:14	0:0	6	sps
op	54:17	0:0	6	->
water	54:19	0:0	6	poc_type
op	54:28	0:0	6	==
water	54:31	0:0	6	1
stmts	54:33	67:4	5	
water	54:33	0:0	6	{
water	55:8	0:0	6	sps
op	55:11	0:0	6	->
water	55:13	0:0	6	delta_pic_order_always_zero_flag
op	55:45	0:0	6	=
call	55:47	55:63	6	get_bits1
arg	55:57	55:63	7	&s->gb
op	55:57	0:0	8	&
water	55:58	0:0	8	s
op	55:59	0:0	8	->
water	55:61	0:0	8	gb
water	55:64	0:0	6	;
water	56:8	0:0	6	sps
op	56:11	0:0	6	->
water	56:13	0:0	6	offset_for_non_ref_pic
op	56:35	0:0	6	=
call	56:37	56:57	6	get_se_golomb
arg	56:51	56:57	7	&s->gb
op	56:51	0:0	8	&
water	56:52	0:0	8	s
op	56:53	0:0	8	->
water	56:55	0:0	8	gb
water	56:58	0:0	6	;
water	57:8	0:0	6	sps
op	57:11	0:0	6	->
water	57:13	0:0	6	offset_for_top_to_bottom_field
op	57:43	0:0	6	=
call	57:45	57:65	6	get_se_golomb
arg	57:59	57:65	7	&s->gb
op	57:59	0:0	8	&
water	57:60	0:0	8	s
op	57:61	0:0	8	->
water	57:63	0:0	8	gb
water	57:66	0:0	6	;
water	58:8	0:0	6	sps
op	58:11	0:0	6	->
water	58:13	0:0	6	poc_cycle_length
op	58:45	0:0	6	=
call	58:47	58:67	6	get_ue_golomb
arg	58:61	58:67	7	&s->gb
op	58:61	0:0	8	&
water	58:62	0:0	8	s
op	58:63	0:0	8	->
water	58:65	0:0	8	gb
water	58:68	0:0	6	;
if	60:8	63:8	6	(( unsigned ) sps -> poc_cycle_length >=FF_ARRAY_ELEMS (sps -> offset_for_ref_frame ))
cond	60:11	60:86	7	( unsigned ) sps -> poc_cycle_length >=FF_ARRAY_ELEMS (sps -> offset_for_ref_frame )
water	60:11	0:0	8	(
water	60:12	0:0	8	unsigned
water	60:20	0:0	8	)
water	60:21	0:0	8	sps
op	60:24	0:0	8	->
water	60:26	0:0	8	poc_cycle_length
op	60:43	0:0	8	>=
call	60:46	60:86	8	FF_ARRAY_ELEMS
arg	60:61	60:86	9	sps->offset_for_ref_frame
water	60:61	0:0	10	sps
op	60:64	0:0	10	->
water	60:66	0:0	10	offset_for_ref_frame
stmts	60:88	63:8	7	
water	60:88	0:0	8	{
call	61:12	61:100	8	av_log
arg	61:19	61:29	9	h->s.avctx
water	61:19	0:0	10	h
op	61:20	0:0	10	->
water	61:22	0:0	10	s
op	61:23	0:0	10	.
water	61:24	0:0	10	avctx
arg	61:31	61:43	9	AV_LOG_ERROR
water	61:31	0:0	10	AV_LOG_ERROR
arg	61:45	61:77	9	"poc_cycle_length overflow %u\n"
water	61:45	0:0	10	"poc_cycle_length overflow %u\n"
arg	61:79	61:100	9	sps->poc_cycle_length
water	61:79	0:0	10	sps
op	61:82	0:0	10	->
water	61:84	0:0	10	poc_cycle_length
water	61:101	0:0	8	;
goto	62:12	62:21	8	fail
water	62:17	0:0	9	fail
water	63:8	0:0	8	}
for	65:8	66:63	6	(i = 0 ;i < sps -> poc_cycle_length;i ++)
forinit	65:12	65:15	7	i = 0 ;
water	65:12	0:0	8	i
op	65:13	0:0	8	=
water	65:14	0:0	8	0
water	65:15	0:0	8	;
cond	65:17	65:24	7	i < sps -> poc_cycle_length
water	65:17	0:0	8	i
op	65:18	0:0	8	<
water	65:19	0:0	8	sps
op	65:22	0:0	8	->
water	65:24	0:0	8	poc_cycle_length
forexpr	65:42	65:43	7	i ++
water	65:42	0:0	8	i
op	65:43	0:0	8	++
stmts	66:12	66:63	7	
water	66:12	0:0	8	sps
op	66:15	0:0	8	->
water	66:17	0:0	8	offset_for_ref_frame
op	66:37	0:0	8	[
water	66:38	0:0	8	i
op	66:39	0:0	8	]
op	66:40	0:0	8	=
call	66:42	66:62	8	get_se_golomb
arg	66:56	66:62	9	&s->gb
op	66:56	0:0	10	&
water	66:57	0:0	10	s
op	66:58	0:0	10	->
water	66:60	0:0	10	gb
water	66:63	0:0	8	;
water	67:4	0:0	6	}
else	67:5	70:4	2
stmts	67:10	70:4	3	
if	67:10	70:4	4	(sps -> poc_type != 2)
cond	67:13	67:30	5	sps -> poc_type != 2
water	67:13	0:0	6	sps
op	67:16	0:0	6	->
water	67:18	0:0	6	poc_type
op	67:27	0:0	6	!=
water	67:30	0:0	6	2
stmts	67:32	70:4	5	
water	67:32	0:0	6	{
call	68:8	68:79	6	av_log
arg	68:15	68:25	7	h->s.avctx
water	68:15	0:0	8	h
op	68:16	0:0	8	->
water	68:18	0:0	8	s
op	68:19	0:0	8	.
water	68:20	0:0	8	avctx
arg	68:27	68:39	7	AV_LOG_ERROR
water	68:27	0:0	8	AV_LOG_ERROR
arg	68:41	68:64	7	"illegal POC type %d\n"
water	68:41	0:0	8	"illegal POC type %d\n"
arg	68:66	68:79	7	sps->poc_type
water	68:66	0:0	8	sps
op	68:69	0:0	8	->
water	68:71	0:0	8	poc_type
water	68:80	0:0	6	;
goto	69:8	69:17	6	fail
water	69:13	0:0	7	fail
water	70:4	0:0	6	}
water	72:4	0:0	2	sps
op	72:7	0:0	2	->
water	72:9	0:0	2	ref_frame_count
op	72:24	0:0	2	=
call	72:26	72:49	2	get_ue_golomb_31
arg	72:43	72:49	3	&s->gb
op	72:43	0:0	4	&
water	72:44	0:0	4	s
op	72:45	0:0	4	->
water	72:47	0:0	4	gb
water	72:50	0:0	2	;
if	73:4	76:4	2	(sps -> ref_frame_count > MAX_PICTURE_COUNT - 2 || sps -> ref_frame_count >= 32 U)
cond	73:7	73:79	3	sps -> ref_frame_count > MAX_PICTURE_COUNT - 2 || sps -> ref_frame_count >= 32 U
water	73:7	0:0	4	sps
op	73:10	0:0	4	->
water	73:12	0:0	4	ref_frame_count
op	73:28	0:0	4	>
water	73:30	0:0	4	MAX_PICTURE_COUNT
op	73:47	0:0	4	-
water	73:48	0:0	4	2
op	73:50	0:0	4	||
water	73:53	0:0	4	sps
op	73:56	0:0	4	->
water	73:58	0:0	4	ref_frame_count
op	73:74	0:0	4	>=
water	73:77	0:0	4	32
water	73:79	0:0	4	U
stmts	73:81	76:4	3	
water	73:81	0:0	4	{
call	74:8	74:70	4	av_log
arg	74:15	74:25	5	h->s.avctx
water	74:15	0:0	6	h
op	74:16	0:0	6	->
water	74:18	0:0	6	s
op	74:19	0:0	6	.
water	74:20	0:0	6	avctx
arg	74:27	74:39	5	AV_LOG_ERROR
water	74:27	0:0	6	AV_LOG_ERROR
arg	74:41	74:70	5	"too many reference frames\n"
water	74:41	0:0	6	"too many reference frames\n"
water	74:71	0:0	4	;
goto	75:8	75:17	4	fail
water	75:13	0:0	5	fail
water	76:4	0:0	4	}
water	77:4	0:0	2	sps
op	77:7	0:0	2	->
water	77:9	0:0	2	gaps_in_frame_num_allowed_flag
op	77:39	0:0	2	=
call	77:41	77:57	2	get_bits1
arg	77:51	77:57	3	&s->gb
op	77:51	0:0	4	&
water	77:52	0:0	4	s
op	77:53	0:0	4	->
water	77:55	0:0	4	gb
water	77:58	0:0	2	;
water	78:4	0:0	2	sps
op	78:7	0:0	2	->
water	78:9	0:0	2	mb_width
op	78:18	0:0	2	=
call	78:20	78:40	2	get_ue_golomb
arg	78:34	78:40	3	&s->gb
op	78:34	0:0	4	&
water	78:35	0:0	4	s
op	78:36	0:0	4	->
water	78:38	0:0	4	gb
op	78:42	0:0	2	+
water	78:44	0:0	2	1
water	78:45	0:0	2	;
water	79:4	0:0	2	sps
op	79:7	0:0	2	->
water	79:9	0:0	2	mb_height
op	79:18	0:0	2	=
call	79:20	79:40	2	get_ue_golomb
arg	79:34	79:40	3	&s->gb
op	79:34	0:0	4	&
water	79:35	0:0	4	s
op	79:36	0:0	4	->
water	79:38	0:0	4	gb
op	79:42	0:0	2	+
water	79:44	0:0	2	1
water	79:45	0:0	2	;
if	80:4	84:4	2	(( unsigned ) sps -> mb_width >= INT_MAX / 16 || ( unsigned ) sps -> mb_height >= INT_MAX / 16 ||av_image_check_size (16 * sps -> mb_width ,16 * sps -> mb_height ,0 ,h -> s . avctx ))
cond	80:7	81:77	3	( unsigned ) sps -> mb_width >= INT_MAX / 16 || ( unsigned ) sps -> mb_height >= INT_MAX / 16 ||av_image_check_size (16 * sps -> mb_width ,16 * sps -> mb_height ,0 ,h -> s . avctx )
water	80:7	0:0	4	(
water	80:8	0:0	4	unsigned
water	80:16	0:0	4	)
water	80:17	0:0	4	sps
op	80:20	0:0	4	->
water	80:22	0:0	4	mb_width
op	80:31	0:0	4	>=
water	80:34	0:0	4	INT_MAX
op	80:41	0:0	4	/
water	80:42	0:0	4	16
op	80:45	0:0	4	||
water	80:48	0:0	4	(
water	80:49	0:0	4	unsigned
water	80:57	0:0	4	)
water	80:58	0:0	4	sps
op	80:61	0:0	4	->
water	80:63	0:0	4	mb_height
op	80:73	0:0	4	>=
water	80:76	0:0	4	INT_MAX
op	80:83	0:0	4	/
water	80:84	0:0	4	16
op	80:87	0:0	4	||
call	81:7	81:77	4	av_image_check_size
arg	81:27	81:43	5	16*sps->mb_width
water	81:27	0:0	6	16
op	81:29	0:0	6	*
water	81:30	0:0	6	sps
op	81:33	0:0	6	->
water	81:35	0:0	6	mb_width
arg	81:45	81:62	5	16*sps->mb_height
water	81:45	0:0	6	16
op	81:47	0:0	6	*
water	81:48	0:0	6	sps
op	81:51	0:0	6	->
water	81:53	0:0	6	mb_height
arg	81:64	81:65	5	0
water	81:64	0:0	6	0
arg	81:67	81:77	5	h->s.avctx
water	81:67	0:0	6	h
op	81:68	0:0	6	->
water	81:70	0:0	6	s
op	81:71	0:0	6	.
water	81:72	0:0	6	avctx
stmts	81:79	84:4	3	
water	81:79	0:0	4	{
call	82:8	82:69	4	av_log
arg	82:15	82:25	5	h->s.avctx
water	82:15	0:0	6	h
op	82:16	0:0	6	->
water	82:18	0:0	6	s
op	82:19	0:0	6	.
water	82:20	0:0	6	avctx
arg	82:27	82:39	5	AV_LOG_ERROR
water	82:27	0:0	6	AV_LOG_ERROR
arg	82:41	82:69	5	"mb_width/height overflow\n"
water	82:41	0:0	6	"mb_width/height overflow\n"
water	82:70	0:0	4	;
goto	83:8	83:17	4	fail
water	83:13	0:0	5	fail
water	84:4	0:0	4	}
water	86:4	0:0	2	sps
op	86:7	0:0	2	->
water	86:9	0:0	2	frame_mbs_only_flag
op	86:28	0:0	2	=
call	86:30	86:46	2	get_bits1
arg	86:40	86:46	3	&s->gb
op	86:40	0:0	4	&
water	86:41	0:0	4	s
op	86:42	0:0	4	->
water	86:44	0:0	4	gb
water	86:47	0:0	2	;
if	87:4	88:38	2	(! sps -> frame_mbs_only_flag)
cond	87:7	87:13	3	! sps -> frame_mbs_only_flag
op	87:7	0:0	4	!
water	87:8	0:0	4	sps
op	87:11	0:0	4	->
water	87:13	0:0	4	frame_mbs_only_flag
stmts	88:8	88:38	3	
water	88:8	0:0	4	sps
op	88:11	0:0	4	->
water	88:13	0:0	4	mb_aff
op	88:19	0:0	4	=
call	88:21	88:37	4	get_bits1
arg	88:31	88:37	5	&s->gb
op	88:31	0:0	6	&
water	88:32	0:0	6	s
op	88:33	0:0	6	->
water	88:35	0:0	6	gb
water	88:38	0:0	4	;
else	89:4	90:22	2
stmts	90:8	90:22	3	
water	90:8	0:0	4	sps
op	90:11	0:0	4	->
water	90:13	0:0	4	mb_aff
op	90:19	0:0	4	=
water	90:21	0:0	4	0
water	90:22	0:0	4	;
water	92:4	0:0	2	sps
op	92:7	0:0	2	->
water	92:9	0:0	2	direct_8x8_inference_flag
op	92:34	0:0	2	=
call	92:36	92:52	2	get_bits1
arg	92:46	92:52	3	&s->gb
op	92:46	0:0	4	&
water	92:47	0:0	4	s
op	92:48	0:0	4	->
water	92:50	0:0	4	gb
water	92:53	0:0	2	;
if	93:4	96:4	2	(! sps -> frame_mbs_only_flag && ! sps -> direct_8x8_inference_flag)
cond	93:7	93:42	3	! sps -> frame_mbs_only_flag && ! sps -> direct_8x8_inference_flag
op	93:7	0:0	4	!
water	93:8	0:0	4	sps
op	93:11	0:0	4	->
water	93:13	0:0	4	frame_mbs_only_flag
op	93:33	0:0	4	&&
op	93:36	0:0	4	!
water	93:37	0:0	4	sps
op	93:40	0:0	4	->
water	93:42	0:0	4	direct_8x8_inference_flag
stmts	93:68	96:4	3	
water	93:68	0:0	4	{
call	94:8	94:113	4	av_log
arg	94:15	94:25	5	h->s.avctx
water	94:15	0:0	6	h
op	94:16	0:0	6	->
water	94:18	0:0	6	s
op	94:19	0:0	6	.
water	94:20	0:0	6	avctx
arg	94:27	94:39	5	AV_LOG_ERROR
water	94:27	0:0	6	AV_LOG_ERROR
arg	94:41	94:113	5	"This stream was generated by a broken encoder, invalid 8x8 inference\n"
water	94:41	0:0	6	"This stream was generated by a broken encoder, invalid 8x8 inference\n"
water	94:114	0:0	4	;
goto	95:8	95:17	4	fail
water	95:13	0:0	5	fail
water	96:4	0:0	4	}
if	98:4	99:100	2	(sps -> mb_aff)
cond	98:7	98:12	3	sps -> mb_aff
water	98:7	0:0	4	sps
op	98:10	0:0	4	->
water	98:12	0:0	4	mb_aff
stmts	99:8	99:100	3	
call	99:8	99:99	4	av_log
arg	99:15	99:25	5	h->s.avctx
water	99:15	0:0	6	h
op	99:16	0:0	6	->
water	99:18	0:0	6	s
op	99:19	0:0	6	.
water	99:20	0:0	6	avctx
arg	99:27	99:39	5	AV_LOG_ERROR
water	99:27	0:0	6	AV_LOG_ERROR
arg	99:41	99:99	5	"MBAFF support not included; enable it at compile-time.\n"
water	99:41	0:0	6	"MBAFF support not included; enable it at compile-time.\n"
water	99:100	0:0	4	;
water	101:4	0:0	2	sps
op	101:7	0:0	2	->
water	101:9	0:0	2	crop
op	101:13	0:0	2	=
call	101:15	101:31	2	get_bits1
arg	101:25	101:31	3	&s->gb
op	101:25	0:0	4	&
water	101:26	0:0	4	s
op	101:27	0:0	4	->
water	101:29	0:0	4	gb
water	101:32	0:0	2	;
if	102:4	114:4	2	(sps -> crop)
cond	102:7	102:12	3	sps -> crop
water	102:7	0:0	4	sps
op	102:10	0:0	4	->
water	102:12	0:0	4	crop
stmts	102:17	114:4	3	
water	102:17	0:0	4	{
decl	103:8	103:61	4	int	crop_limit
op	103:23	0:0	4	=
water	103:25	0:0	4	sps
op	103:28	0:0	4	->
water	103:30	0:0	4	chroma_format_idc
op	103:48	0:0	4	==
water	103:51	0:0	4	3
water	103:53	0:0	4	?
water	103:55	0:0	4	16
water	103:58	0:0	4	:
water	103:60	0:0	4	8
water	104:8	0:0	4	sps
op	104:11	0:0	4	->
water	104:13	0:0	4	crop_left
op	104:24	0:0	4	=
call	104:26	104:46	4	get_ue_golomb
arg	104:40	104:46	5	&s->gb
op	104:40	0:0	6	&
water	104:41	0:0	6	s
op	104:42	0:0	6	->
water	104:44	0:0	6	gb
water	104:47	0:0	4	;
water	105:8	0:0	4	sps
op	105:11	0:0	4	->
water	105:13	0:0	4	crop_right
op	105:24	0:0	4	=
call	105:26	105:46	4	get_ue_golomb
arg	105:40	105:46	5	&s->gb
op	105:40	0:0	6	&
water	105:41	0:0	6	s
op	105:42	0:0	6	->
water	105:44	0:0	6	gb
water	105:47	0:0	4	;
water	106:8	0:0	4	sps
op	106:11	0:0	4	->
water	106:13	0:0	4	crop_top
op	106:24	0:0	4	=
call	106:26	106:46	4	get_ue_golomb
arg	106:40	106:46	5	&s->gb
op	106:40	0:0	6	&
water	106:41	0:0	6	s
op	106:42	0:0	6	->
water	106:44	0:0	6	gb
water	106:47	0:0	4	;
water	107:8	0:0	4	sps
op	107:11	0:0	4	->
water	107:13	0:0	4	crop_bottom
op	107:24	0:0	4	=
call	107:26	107:46	4	get_ue_golomb
arg	107:40	107:46	5	&s->gb
op	107:40	0:0	6	&
water	107:41	0:0	6	s
op	107:42	0:0	6	->
water	107:44	0:0	6	gb
water	107:47	0:0	4	;
if	108:8	110:8	4	(sps -> crop_left || sps -> crop_top)
cond	108:11	108:34	5	sps -> crop_left || sps -> crop_top
water	108:11	0:0	6	sps
op	108:14	0:0	6	->
water	108:16	0:0	6	crop_left
op	108:26	0:0	6	||
water	108:29	0:0	6	sps
op	108:32	0:0	6	->
water	108:34	0:0	6	crop_top
stmts	108:43	110:8	5	
water	108:43	0:0	6	{
call	109:12	109:125	6	av_log
arg	109:19	109:29	7	h->s.avctx
water	109:19	0:0	8	h
op	109:20	0:0	8	->
water	109:22	0:0	8	s
op	109:23	0:0	8	.
water	109:24	0:0	8	avctx
arg	109:31	109:43	7	AV_LOG_ERROR
water	109:31	0:0	8	AV_LOG_ERROR
arg	109:45	109:125	7	"insane cropping not completely supported, this could look slightly wrong ...\n"
water	109:45	0:0	8	"insane cropping not completely supported, this could look slightly wrong ...\n"
water	109:126	0:0	6	;
water	110:8	0:0	6	}
if	111:8	113:8	4	(sps -> crop_right >= crop_limit || sps -> crop_bottom >= crop_limit)
cond	111:11	111:64	5	sps -> crop_right >= crop_limit || sps -> crop_bottom >= crop_limit
water	111:11	0:0	6	sps
op	111:14	0:0	6	->
water	111:16	0:0	6	crop_right
op	111:27	0:0	6	>=
water	111:30	0:0	6	crop_limit
op	111:41	0:0	6	||
water	111:44	0:0	6	sps
op	111:47	0:0	6	->
water	111:49	0:0	6	crop_bottom
op	111:61	0:0	6	>=
water	111:64	0:0	6	crop_limit
stmts	111:75	113:8	5	
water	111:75	0:0	6	{
call	112:12	112:117	6	av_log
arg	112:19	112:29	7	h->s.avctx
water	112:19	0:0	8	h
op	112:20	0:0	8	->
water	112:22	0:0	8	s
op	112:23	0:0	8	.
water	112:24	0:0	8	avctx
arg	112:31	112:43	7	AV_LOG_ERROR
water	112:31	0:0	8	AV_LOG_ERROR
arg	112:45	112:117	7	"brainfart cropping not supported, this could look slightly wrong ...\n"
water	112:45	0:0	8	"brainfart cropping not supported, this could look slightly wrong ...\n"
water	112:118	0:0	6	;
water	113:8	0:0	6	}
water	114:4	0:0	4	}
else	114:5	119:4	2
stmts	114:9	119:4	3	
water	114:9	0:0	4	{
water	115:8	0:0	4	sps
op	115:11	0:0	4	->
water	115:13	0:0	4	crop_left
op	115:24	0:0	4	=
water	116:8	0:0	4	sps
op	116:11	0:0	4	->
water	116:13	0:0	4	crop_right
op	116:24	0:0	4	=
water	117:8	0:0	4	sps
op	117:11	0:0	4	->
water	117:13	0:0	4	crop_top
op	117:24	0:0	4	=
water	118:8	0:0	4	sps
op	118:11	0:0	4	->
water	118:13	0:0	4	crop_bottom
op	118:24	0:0	4	=
water	118:26	0:0	4	0
water	118:27	0:0	4	;
water	119:4	0:0	4	}
water	121:4	0:0	2	sps
op	121:7	0:0	2	->
water	121:9	0:0	2	vui_parameters_present_flag
op	121:36	0:0	2	=
call	121:38	121:54	2	get_bits1
arg	121:48	121:54	3	&s->gb
op	121:48	0:0	4	&
water	121:49	0:0	4	s
op	121:50	0:0	4	->
water	121:52	0:0	4	gb
water	121:55	0:0	2	;
if	122:4	124:21	2	(sps -> vui_parameters_present_flag)
cond	122:8	122:13	3	sps -> vui_parameters_present_flag
water	122:8	0:0	4	sps
op	122:11	0:0	4	->
water	122:13	0:0	4	vui_parameters_present_flag
stmts	123:8	124:21	3	
if	123:8	124:21	4	(decode_vui_parameters (h ,sps ) < 0)
cond	123:12	123:44	5	decode_vui_parameters (h ,sps ) < 0
call	123:12	123:40	6	decode_vui_parameters
arg	123:34	123:35	7	h
water	123:34	0:0	8	h
arg	123:37	123:40	7	sps
water	123:37	0:0	8	sps
op	123:42	0:0	6	<
water	123:44	0:0	6	0
stmts	124:12	124:21	5	
goto	124:12	124:21	6	fail
water	124:17	0:0	7	fail
if	126:4	127:23	2	(! sps -> sar . den)
cond	126:7	126:17	3	! sps -> sar . den
op	126:7	0:0	4	!
water	126:8	0:0	4	sps
op	126:11	0:0	4	->
water	126:13	0:0	4	sar
op	126:16	0:0	4	.
water	126:17	0:0	4	den
stmts	127:8	127:23	3	
water	127:8	0:0	4	sps
op	127:11	0:0	4	->
water	127:13	0:0	4	sar
op	127:16	0:0	4	.
water	127:17	0:0	4	den
op	127:20	0:0	4	=
water	127:22	0:0	4	1
water	127:23	0:0	4	;
if	129:4	145:4	2	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	129:7	129:23	3	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	129:7	0:0	4	s
op	129:8	0:0	4	->
water	129:10	0:0	4	avctx
op	129:15	0:0	4	->
water	129:17	0:0	4	debug
op	129:22	0:0	4	&
water	129:23	0:0	4	FF_DEBUG_PICT_INFO
stmts	129:42	145:4	3	
water	129:42	0:0	4	{
call	130:8	144:15	4	av_log
arg	130:15	130:25	5	h->s.avctx
water	130:15	0:0	6	h
op	130:16	0:0	6	->
water	130:18	0:0	6	s
op	130:19	0:0	6	.
water	130:20	0:0	6	avctx
arg	130:27	130:39	5	AV_LOG_DEBUG
water	130:27	0:0	6	AV_LOG_DEBUG
arg	130:41	130:124	5	"sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%d/%d/%d/%d %s %s %d/%d b%d\n"
water	130:41	0:0	6	"sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%d/%d/%d/%d %s %s %d/%d b%d\n"
arg	131:15	131:21	5	sps_id
water	131:15	0:0	6	sps_id
arg	131:23	131:39	5	sps->profile_idc
water	131:23	0:0	6	sps
op	131:26	0:0	6	->
water	131:28	0:0	6	profile_idc
arg	131:41	131:55	5	sps->level_idc
water	131:41	0:0	6	sps
op	131:44	0:0	6	->
water	131:46	0:0	6	level_idc
arg	132:15	132:28	5	sps->poc_type
water	132:15	0:0	6	sps
op	132:18	0:0	6	->
water	132:20	0:0	6	poc_type
arg	133:15	133:35	5	sps->ref_frame_count
water	133:15	0:0	6	sps
op	133:18	0:0	6	->
water	133:20	0:0	6	ref_frame_count
arg	134:15	134:28	5	sps->mb_width
water	134:15	0:0	6	sps
op	134:18	0:0	6	->
water	134:20	0:0	6	mb_width
arg	134:30	134:44	5	sps->mb_height
water	134:30	0:0	6	sps
op	134:33	0:0	6	->
water	134:35	0:0	6	mb_height
arg	135:15	135:86	5	sps->frame_mbs_only_flag?"FRM":(sps->mb_aff?"MB-AFF":"PIC-AFF")
water	135:15	0:0	6	sps
op	135:18	0:0	6	->
water	135:20	0:0	6	frame_mbs_only_flag
water	135:40	0:0	6	?
water	135:42	0:0	6	"FRM"
water	135:48	0:0	6	:
water	135:50	0:0	6	(
water	135:51	0:0	6	sps
op	135:54	0:0	6	->
water	135:56	0:0	6	mb_aff
water	135:63	0:0	6	?
water	135:65	0:0	6	"MB-AFF"
water	135:74	0:0	6	:
water	135:76	0:0	6	"PIC-AFF"
water	135:85	0:0	6	)
arg	136:15	136:58	5	sps->direct_8x8_inference_flag?"8B8":""
water	136:15	0:0	6	sps
op	136:18	0:0	6	->
water	136:20	0:0	6	direct_8x8_inference_flag
water	136:46	0:0	6	?
water	136:48	0:0	6	"8B8"
water	136:54	0:0	6	:
water	136:56	0:0	6	""
arg	137:15	137:29	5	sps->crop_left
water	137:15	0:0	6	sps
op	137:18	0:0	6	->
water	137:20	0:0	6	crop_left
arg	137:31	137:46	5	sps->crop_right
water	137:31	0:0	6	sps
op	137:34	0:0	6	->
water	137:36	0:0	6	crop_right
arg	138:15	138:28	5	sps->crop_top
water	138:15	0:0	6	sps
op	138:18	0:0	6	->
water	138:20	0:0	6	crop_top
arg	138:30	138:46	5	sps->crop_bottom
water	138:30	0:0	6	sps
op	138:33	0:0	6	->
water	138:35	0:0	6	crop_bottom
arg	139:15	139:60	5	sps->vui_parameters_present_flag?"VUI":""
water	139:15	0:0	6	sps
op	139:18	0:0	6	->
water	139:20	0:0	6	vui_parameters_present_flag
water	139:48	0:0	6	?
water	139:50	0:0	6	"VUI"
water	139:56	0:0	6	:
water	139:58	0:0	6	""
arg	140:15	140:82	5	((constchar*[]){"Gray","420","422","444"})[sps->chroma_format_idc]
water	140:15	0:0	6	(
water	140:16	0:0	6	(
water	140:17	0:0	6	const
water	140:23	0:0	6	char
op	140:27	0:0	6	*
op	140:28	0:0	6	[
op	140:29	0:0	6	]
water	140:30	0:0	6	)
water	140:31	0:0	6	{
water	140:32	0:0	6	"Gray"
water	140:38	0:0	6	,
water	140:39	0:0	6	"420"
water	140:44	0:0	6	,
water	140:45	0:0	6	"422"
water	140:50	0:0	6	,
water	140:51	0:0	6	"444"
water	140:56	0:0	6	}
water	140:57	0:0	6	)
op	140:58	0:0	6	[
water	140:59	0:0	6	sps
op	140:62	0:0	6	->
water	140:64	0:0	6	chroma_format_idc
op	140:81	0:0	6	]
arg	141:15	141:73	5	sps->timing_info_present_flag?sps->num_units_in_tick:0
water	141:15	0:0	6	sps
op	141:18	0:0	6	->
water	141:20	0:0	6	timing_info_present_flag
water	141:45	0:0	6	?
water	141:47	0:0	6	sps
op	141:50	0:0	6	->
water	141:52	0:0	6	num_units_in_tick
water	141:70	0:0	6	:
water	141:72	0:0	6	0
arg	142:15	142:66	5	sps->timing_info_present_flag?sps->time_scale:0
water	142:15	0:0	6	sps
op	142:18	0:0	6	->
water	142:20	0:0	6	timing_info_present_flag
water	142:45	0:0	6	?
water	142:47	0:0	6	sps
op	142:50	0:0	6	->
water	142:52	0:0	6	time_scale
water	142:63	0:0	6	:
water	142:65	0:0	6	0
arg	143:15	144:15	5	sps->bit_depth_luma
water	143:15	0:0	6	sps
op	143:18	0:0	6	->
water	143:20	0:0	6	bit_depth_luma
water	144:16	0:0	4	;
water	145:4	0:0	4	}
call	147:4	147:34	2	av_free
arg	147:12	147:34	3	h->sps_buffers[sps_id]
water	147:12	0:0	4	h
op	147:13	0:0	4	->
water	147:15	0:0	4	sps_buffers
op	147:26	0:0	4	[
water	147:27	0:0	4	sps_id
op	147:33	0:0	4	]
water	147:35	0:0	2	;
water	148:4	0:0	2	h
op	148:5	0:0	2	->
water	148:7	0:0	2	sps_buffers
op	148:18	0:0	2	[
water	148:19	0:0	2	sps_id
op	148:25	0:0	2	]
op	148:26	0:0	2	=
water	148:28	0:0	2	sps
water	148:31	0:0	2	;
water	149:4	0:0	2	h
op	149:5	0:0	2	->
water	149:7	0:0	2	sps
op	149:11	0:0	2	=
op	149:13	0:0	2	*
water	149:14	0:0	2	sps
water	149:17	0:0	2	;
return	150:4	150:12	2	0
water	150:11	0:0	3	0
label	151:0	151:4	2	fail :
call	152:4	152:15	2	av_free
arg	152:12	152:15	3	sps
water	152:12	0:0	4	sps
water	152:16	0:0	2	;
return	153:4	153:13	2	-1
op	153:11	0:0	3	-
water	153:12	0:0	3	1
