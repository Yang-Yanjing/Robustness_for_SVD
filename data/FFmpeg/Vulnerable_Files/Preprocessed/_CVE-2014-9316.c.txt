func	1:0	227:0	0	static int	mjpeg_decode_app
params	1:27	0:0	1	
param	1:28	1:49	2	MJpegDecodeContext *	s
stmnts	0:0	226:12	1	
decl	3:4	3:18	2	int	len
water	3:11	0:0	2	,
decl	3:4	3:18	2	int	id
water	3:15	0:0	2	,
decl	3:4	3:18	2	int	i
water	5:4	0:0	2	len
op	5:8	0:0	2	=
call	5:10	5:29	2	get_bits
arg	5:19	5:25	3	&s->gb
op	5:19	0:0	4	&
water	5:20	0:0	4	s
op	5:21	0:0	4	->
water	5:23	0:0	4	gb
arg	5:27	5:29	3	16
water	5:27	0:0	4	16
water	5:30	0:0	2	;
if	6:4	7:34	2	(len < 6)
cond	6:8	6:14	3	len < 6
water	6:8	0:0	4	len
op	6:12	0:0	4	<
water	6:14	0:0	4	6
stmts	7:8	7:34	3	
return	7:8	7:34	4	AVERROR_INVALIDDATA
water	7:15	0:0	5	AVERROR_INVALIDDATA
if	8:4	9:34	2	(8 * len >get_bits_left (& s -> gb ))
cond	8:8	8:38	3	8 * len >get_bits_left (& s -> gb )
water	8:8	0:0	4	8
op	8:10	0:0	4	*
water	8:12	0:0	4	len
op	8:16	0:0	4	>
call	8:18	8:38	4	get_bits_left
arg	8:32	8:38	5	&s->gb
op	8:32	0:0	6	&
water	8:33	0:0	6	s
op	8:34	0:0	6	->
water	8:36	0:0	6	gb
stmts	9:8	9:34	3	
return	9:8	9:34	4	AVERROR_INVALIDDATA
water	9:15	0:0	5	AVERROR_INVALIDDATA
water	11:4	0:0	2	id
op	11:9	0:0	2	=
call	11:11	11:35	2	get_bits_long
arg	11:25	11:31	3	&s->gb
op	11:25	0:0	4	&
water	11:26	0:0	4	s
op	11:27	0:0	4	->
water	11:29	0:0	4	gb
arg	11:33	11:35	3	32
water	11:33	0:0	4	32
water	11:36	0:0	2	;
water	12:4	0:0	2	len
op	12:8	0:0	2	-=
water	12:11	0:0	2	6
water	12:12	0:0	2	;
if	14:4	18:4	2	(s -> avctx -> debug & FF_DEBUG_STARTCODE)
cond	14:8	14:26	3	s -> avctx -> debug & FF_DEBUG_STARTCODE
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	avctx
op	14:16	0:0	4	->
water	14:18	0:0	4	debug
op	14:24	0:0	4	&
water	14:26	0:0	4	FF_DEBUG_STARTCODE
stmts	14:46	18:4	3	
water	14:46	0:0	4	{
decl	15:8	15:23	4	char	id_str[32]
call	16:8	16:70	4	av_get_codec_tag_string
arg	16:32	16:38	5	id_str
water	16:32	0:0	6	id_str
arg	16:40	16:54	5	sizeof(id_str)
op	16:40	0:0	6	sizeof
water	16:46	0:0	6	(
water	16:47	0:0	6	id_str
water	16:53	0:0	6	)
arg	16:56	16:70	5	av_bswap32(id)
call	16:56	16:69	6	av_bswap32
arg	16:67	16:69	7	id
water	16:67	0:0	8	id
water	16:71	0:0	4	;
call	17:8	17:82	4	av_log
arg	17:15	17:23	5	s->avctx
water	17:15	0:0	6	s
op	17:16	0:0	6	->
water	17:18	0:0	6	avctx
arg	17:25	17:37	5	AV_LOG_DEBUG
water	17:25	0:0	6	AV_LOG_DEBUG
arg	17:39	17:65	5	"APPx (%s / %8X) len=%d\n"
water	17:39	0:0	6	"APPx (%s / %8X) len=%d\n"
arg	17:67	17:73	5	id_str
water	17:67	0:0	6	id_str
arg	17:75	17:77	5	id
water	17:75	0:0	6	id
arg	17:79	17:82	5	len
water	17:79	0:0	6	len
water	17:83	0:0	4	;
water	18:4	0:0	4	}
if	23:4	41:4	2	(id ==AV_RB32 ("AVI1" ))
cond	23:8	23:28	3	id ==AV_RB32 ("AVI1" )
water	23:8	0:0	4	id
op	23:11	0:0	4	==
call	23:14	23:28	4	AV_RB32
arg	23:22	23:28	5	"AVI1"
water	23:22	0:0	6	"AVI1"
stmts	23:31	41:4	3	
water	23:31	0:0	4	{
water	31:12	0:0	4	s
op	31:13	0:0	4	->
water	31:15	0:0	4	buggy_avid
op	31:26	0:0	4	=
water	31:28	0:0	4	1
water	31:29	0:0	4	;
water	32:8	0:0	4	i
op	32:10	0:0	4	=
call	32:12	32:30	4	get_bits
arg	32:21	32:27	5	&s->gb
op	32:21	0:0	6	&
water	32:22	0:0	6	s
op	32:23	0:0	6	->
water	32:25	0:0	6	gb
arg	32:29	32:30	5	8
water	32:29	0:0	6	8
water	32:31	0:0	4	;
water	32:33	0:0	4	len
op	32:36	0:0	4	--
water	32:38	0:0	4	;
call	33:8	33:57	4	av_log
arg	33:15	33:23	5	s->avctx
water	33:15	0:0	6	s
op	33:16	0:0	6	->
water	33:18	0:0	6	avctx
arg	33:25	33:37	5	AV_LOG_DEBUG
water	33:25	0:0	6	AV_LOG_DEBUG
arg	33:39	33:54	5	"polarity %d\n"
water	33:39	0:0	6	"polarity %d\n"
arg	33:56	33:57	5	i
water	33:56	0:0	6	i
water	33:58	0:0	4	;
call	35:8	35:27	4	skip_bits
arg	35:18	35:24	5	&s->gb
op	35:18	0:0	6	&
water	35:19	0:0	6	s
op	35:20	0:0	6	->
water	35:22	0:0	6	gb
arg	35:26	35:27	5	8
water	35:26	0:0	6	8
water	35:28	0:0	4	;
call	36:8	36:28	4	skip_bits
arg	36:18	36:24	5	&s->gb
op	36:18	0:0	6	&
water	36:19	0:0	6	s
op	36:20	0:0	6	->
water	36:22	0:0	6	gb
arg	36:26	36:28	5	32
water	36:26	0:0	6	32
water	36:29	0:0	4	;
call	37:8	37:28	4	skip_bits
arg	37:18	37:24	5	&s->gb
op	37:18	0:0	6	&
water	37:19	0:0	6	s
op	37:20	0:0	6	->
water	37:22	0:0	6	gb
arg	37:26	37:28	5	32
water	37:26	0:0	6	32
water	37:29	0:0	4	;
water	38:8	0:0	4	len
op	38:12	0:0	4	-=
water	38:15	0:0	4	10
water	38:17	0:0	4	;
goto	40:8	40:16	4	out
water	40:13	0:0	5	out
water	41:4	0:0	4	}
if	45:4	72:4	2	(id ==AV_RB32 ("JFIF" ))
cond	45:8	45:28	3	id ==AV_RB32 ("JFIF" )
water	45:8	0:0	4	id
op	45:11	0:0	4	==
call	45:14	45:28	4	AV_RB32
arg	45:22	45:28	5	"JFIF"
water	45:22	0:0	6	"JFIF"
stmts	45:31	72:4	3	
water	45:31	0:0	4	{
decl	46:8	46:28	4	int	t_w
water	46:15	0:0	4	,
decl	46:8	46:28	4	int	t_h
water	46:20	0:0	4	,
decl	46:8	46:28	4	int	v1
water	46:24	0:0	4	,
decl	46:8	46:28	4	int	v2
call	47:8	47:27	4	skip_bits
arg	47:18	47:24	5	&s->gb
op	47:18	0:0	6	&
water	47:19	0:0	6	s
op	47:20	0:0	6	->
water	47:22	0:0	6	gb
arg	47:26	47:27	5	8
water	47:26	0:0	6	8
water	47:28	0:0	4	;
water	48:8	0:0	4	v1
op	48:11	0:0	4	=
call	48:13	48:31	4	get_bits
arg	48:22	48:28	5	&s->gb
op	48:22	0:0	6	&
water	48:23	0:0	6	s
op	48:24	0:0	6	->
water	48:26	0:0	6	gb
arg	48:30	48:31	5	8
water	48:30	0:0	6	8
water	48:32	0:0	4	;
water	49:8	0:0	4	v2
op	49:11	0:0	4	=
call	49:13	49:31	4	get_bits
arg	49:22	49:28	5	&s->gb
op	49:22	0:0	6	&
water	49:23	0:0	6	s
op	49:24	0:0	6	->
water	49:26	0:0	6	gb
arg	49:30	49:31	5	8
water	49:30	0:0	6	8
water	49:32	0:0	4	;
call	50:8	50:27	4	skip_bits
arg	50:18	50:24	5	&s->gb
op	50:18	0:0	6	&
water	50:19	0:0	6	s
op	50:20	0:0	6	->
water	50:22	0:0	6	gb
arg	50:26	50:27	5	8
water	50:26	0:0	6	8
water	50:28	0:0	4	;
water	52:8	0:0	4	s
op	52:9	0:0	4	->
water	52:11	0:0	4	avctx
op	52:16	0:0	4	->
water	52:18	0:0	4	sample_aspect_ratio
op	52:37	0:0	4	.
water	52:38	0:0	4	num
op	52:42	0:0	4	=
call	52:44	52:63	4	get_bits
arg	52:53	52:59	5	&s->gb
op	52:53	0:0	6	&
water	52:54	0:0	6	s
op	52:55	0:0	6	->
water	52:57	0:0	6	gb
arg	52:61	52:63	5	16
water	52:61	0:0	6	16
water	52:64	0:0	4	;
water	53:8	0:0	4	s
op	53:9	0:0	4	->
water	53:11	0:0	4	avctx
op	53:16	0:0	4	->
water	53:18	0:0	4	sample_aspect_ratio
op	53:37	0:0	4	.
water	53:38	0:0	4	den
op	53:42	0:0	4	=
call	53:44	53:63	4	get_bits
arg	53:53	53:59	5	&s->gb
op	53:53	0:0	6	&
water	53:54	0:0	6	s
op	53:55	0:0	6	->
water	53:57	0:0	6	gb
arg	53:61	53:63	5	16
water	53:61	0:0	6	16
water	53:64	0:0	4	;
call	54:8	54:58	4	ff_set_sar
arg	54:19	54:27	5	s->avctx
water	54:19	0:0	6	s
op	54:20	0:0	6	->
water	54:22	0:0	6	avctx
arg	54:29	54:58	5	s->avctx->sample_aspect_ratio
water	54:29	0:0	6	s
op	54:30	0:0	6	->
water	54:32	0:0	6	avctx
op	54:37	0:0	6	->
water	54:39	0:0	6	sample_aspect_ratio
water	54:59	0:0	4	;
if	56:8	61:53	4	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	56:12	56:30	5	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	56:12	0:0	6	s
op	56:13	0:0	6	->
water	56:15	0:0	6	avctx
op	56:20	0:0	6	->
water	56:22	0:0	6	debug
op	56:28	0:0	6	&
water	56:30	0:0	6	FF_DEBUG_PICT_INFO
stmts	57:12	61:53	5	
call	57:12	61:52	6	av_log
arg	57:19	57:27	7	s->avctx
water	57:19	0:0	8	s
op	57:20	0:0	8	->
water	57:22	0:0	8	avctx
arg	57:29	57:40	7	AV_LOG_INFO
water	57:29	0:0	8	AV_LOG_INFO
arg	58:19	58:74	7	"mjpeg: JFIF header found (version: %x.%x) SAR=%d/%d\n"
water	58:19	0:0	8	"mjpeg: JFIF header found (version: %x.%x) SAR=%d/%d\n"
arg	59:19	59:21	7	v1
water	59:19	0:0	8	v1
arg	59:23	59:25	7	v2
water	59:23	0:0	8	v2
arg	60:19	60:52	7	s->avctx->sample_aspect_ratio.num
water	60:19	0:0	8	s
op	60:20	0:0	8	->
water	60:22	0:0	8	avctx
op	60:27	0:0	8	->
water	60:29	0:0	8	sample_aspect_ratio
op	60:48	0:0	8	.
water	60:49	0:0	8	num
arg	61:19	61:52	7	s->avctx->sample_aspect_ratio.den
water	61:19	0:0	8	s
op	61:20	0:0	8	->
water	61:22	0:0	8	avctx
op	61:27	0:0	8	->
water	61:29	0:0	8	sample_aspect_ratio
op	61:48	0:0	8	.
water	61:49	0:0	8	den
water	61:53	0:0	6	;
water	63:8	0:0	4	t_w
op	63:12	0:0	4	=
call	63:14	63:32	4	get_bits
arg	63:23	63:29	5	&s->gb
op	63:23	0:0	6	&
water	63:24	0:0	6	s
op	63:25	0:0	6	->
water	63:27	0:0	6	gb
arg	63:31	63:32	5	8
water	63:31	0:0	6	8
water	63:33	0:0	4	;
water	64:8	0:0	4	t_h
op	64:12	0:0	4	=
call	64:14	64:32	4	get_bits
arg	64:23	64:29	5	&s->gb
op	64:23	0:0	6	&
water	64:24	0:0	6	s
op	64:25	0:0	6	->
water	64:27	0:0	6	gb
arg	64:31	64:32	5	8
water	64:31	0:0	6	8
water	64:33	0:0	4	;
if	65:8	69:8	4	(t_w && t_h)
cond	65:12	65:19	5	t_w && t_h
water	65:12	0:0	6	t_w
op	65:16	0:0	6	&&
water	65:19	0:0	6	t_h
stmts	65:24	69:8	5	
water	65:24	0:0	6	{
if	67:12	68:36	6	(len - 10 - ( t_w * t_h * 3 ) > 0)
cond	67:16	67:44	7	len - 10 - ( t_w * t_h * 3 ) > 0
water	67:16	0:0	8	len
op	67:20	0:0	8	-
water	67:21	0:0	8	10
op	67:24	0:0	8	-
water	67:26	0:0	8	(
water	67:27	0:0	8	t_w
op	67:31	0:0	8	*
water	67:33	0:0	8	t_h
op	67:37	0:0	8	*
water	67:39	0:0	8	3
water	67:40	0:0	8	)
op	67:42	0:0	8	>
water	67:44	0:0	8	0
stmts	68:16	68:36	7	
water	68:16	0:0	8	len
op	68:20	0:0	8	-=
water	68:23	0:0	8	t_w
op	68:27	0:0	8	*
water	68:29	0:0	8	t_h
op	68:33	0:0	8	*
water	68:35	0:0	8	3
water	68:36	0:0	8	;
water	69:8	0:0	6	}
water	70:8	0:0	4	len
op	70:12	0:0	4	-=
water	70:15	0:0	4	10
water	70:17	0:0	4	;
goto	71:8	71:16	4	out
water	71:13	0:0	5	out
water	72:4	0:0	4	}
if	74:4	83:4	2	(id ==AV_RB32 ("Adob" ) && (get_bits (& s -> gb ,8 ) == 'e' ))
cond	74:8	74:60	3	id ==AV_RB32 ("Adob" ) && (get_bits (& s -> gb ,8 ) == 'e' )
water	74:8	0:0	4	id
op	74:11	0:0	4	==
call	74:14	74:28	4	AV_RB32
arg	74:22	74:28	5	"Adob"
water	74:22	0:0	6	"Adob"
op	74:30	0:0	4	&&
water	74:33	0:0	4	(
call	74:34	74:52	4	get_bits
arg	74:43	74:49	5	&s->gb
op	74:43	0:0	6	&
water	74:44	0:0	6	s
op	74:45	0:0	6	->
water	74:47	0:0	6	gb
arg	74:51	74:52	5	8
water	74:51	0:0	6	8
op	74:54	0:0	4	==
water	74:57	0:0	4	'e'
water	74:60	0:0	4	)
stmts	74:63	83:4	3	
water	74:63	0:0	4	{
call	75:8	75:28	4	skip_bits
arg	75:18	75:24	5	&s->gb
op	75:18	0:0	6	&
water	75:19	0:0	6	s
op	75:20	0:0	6	->
water	75:22	0:0	6	gb
arg	75:26	75:28	5	16
water	75:26	0:0	6	16
water	75:29	0:0	4	;
call	76:8	76:28	4	skip_bits
arg	76:18	76:24	5	&s->gb
op	76:18	0:0	6	&
water	76:19	0:0	6	s
op	76:20	0:0	6	->
water	76:22	0:0	6	gb
arg	76:26	76:28	5	16
water	76:26	0:0	6	16
water	76:29	0:0	4	;
call	77:8	77:28	4	skip_bits
arg	77:18	77:24	5	&s->gb
op	77:18	0:0	6	&
water	77:19	0:0	6	s
op	77:20	0:0	6	->
water	77:22	0:0	6	gb
arg	77:26	77:28	5	16
water	77:26	0:0	6	16
water	77:29	0:0	4	;
water	78:8	0:0	4	s
op	78:9	0:0	4	->
water	78:11	0:0	4	adobe_transform
op	78:27	0:0	4	=
call	78:29	78:48	4	get_bits
arg	78:38	78:44	5	&s->gb
op	78:38	0:0	6	&
water	78:39	0:0	6	s
op	78:40	0:0	6	->
water	78:42	0:0	6	gb
arg	78:47	78:48	5	8
water	78:47	0:0	6	8
water	78:49	0:0	4	;
if	79:8	80:106	4	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	79:12	79:30	5	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	79:12	0:0	6	s
op	79:13	0:0	6	->
water	79:15	0:0	6	avctx
op	79:20	0:0	6	->
water	79:22	0:0	6	debug
op	79:28	0:0	6	&
water	79:30	0:0	6	FF_DEBUG_PICT_INFO
stmts	80:12	80:106	5	
call	80:12	80:105	6	av_log
arg	80:19	80:27	7	s->avctx
water	80:19	0:0	8	s
op	80:20	0:0	8	->
water	80:22	0:0	8	avctx
arg	80:29	80:40	7	AV_LOG_INFO
water	80:29	0:0	8	AV_LOG_INFO
arg	80:42	80:85	7	"mjpeg: Adobe header found, transform=%d\n"
water	80:42	0:0	8	"mjpeg: Adobe header found, transform=%d\n"
arg	80:87	80:105	7	s->adobe_transform
water	80:87	0:0	8	s
op	80:88	0:0	8	->
water	80:90	0:0	8	adobe_transform
water	80:106	0:0	6	;
water	81:8	0:0	4	len
op	81:12	0:0	4	-=
water	81:15	0:0	4	7
water	81:16	0:0	4	;
goto	82:8	82:16	4	out
water	82:13	0:0	5	out
water	83:4	0:0	4	}
if	85:4	107:4	2	(id ==AV_RB32 ("LJIF" ))
cond	85:8	85:28	3	id ==AV_RB32 ("LJIF" )
water	85:8	0:0	4	id
op	85:11	0:0	4	==
call	85:14	85:28	4	AV_RB32
arg	85:22	85:28	5	"LJIF"
water	85:22	0:0	6	"LJIF"
stmts	85:31	107:4	3	
water	85:31	0:0	4	{
if	86:8	88:58	4	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	86:12	86:30	5	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	86:12	0:0	6	s
op	86:13	0:0	6	->
water	86:15	0:0	6	avctx
op	86:20	0:0	6	->
water	86:22	0:0	6	debug
op	86:28	0:0	6	&
water	86:30	0:0	6	FF_DEBUG_PICT_INFO
stmts	87:12	88:58	5	
call	87:12	88:57	6	av_log
arg	87:19	87:27	7	s->avctx
water	87:19	0:0	8	s
op	87:20	0:0	8	->
water	87:22	0:0	8	avctx
arg	87:29	87:40	7	AV_LOG_INFO
water	87:29	0:0	8	AV_LOG_INFO
arg	88:19	88:57	7	"Pegasus lossless jpeg header found\n"
water	88:19	0:0	8	"Pegasus lossless jpeg header found\n"
water	88:58	0:0	6	;
call	89:8	89:28	4	skip_bits
arg	89:18	89:24	5	&s->gb
op	89:18	0:0	6	&
water	89:19	0:0	6	s
op	89:20	0:0	6	->
water	89:22	0:0	6	gb
arg	89:26	89:28	5	16
water	89:26	0:0	6	16
water	89:29	0:0	4	;
call	90:8	90:28	4	skip_bits
arg	90:18	90:24	5	&s->gb
op	90:18	0:0	6	&
water	90:19	0:0	6	s
op	90:20	0:0	6	->
water	90:22	0:0	6	gb
arg	90:26	90:28	5	16
water	90:26	0:0	6	16
water	90:29	0:0	4	;
call	91:8	91:28	4	skip_bits
arg	91:18	91:24	5	&s->gb
op	91:18	0:0	6	&
water	91:19	0:0	6	s
op	91:20	0:0	6	->
water	91:22	0:0	6	gb
arg	91:26	91:28	5	16
water	91:26	0:0	6	16
water	91:29	0:0	4	;
call	92:8	92:28	4	skip_bits
arg	92:18	92:24	5	&s->gb
op	92:18	0:0	6	&
water	92:19	0:0	6	s
op	92:20	0:0	6	->
water	92:22	0:0	6	gb
arg	92:26	92:28	5	16
water	92:26	0:0	6	16
water	92:29	0:0	4	;
switch	93:8	104:8	4	(i =get_bits (& s -> gb ,8 ))
cond	93:16	93:36	5	i =get_bits (& s -> gb ,8 )
water	93:16	0:0	6	i
op	93:17	0:0	6	=
call	93:18	93:36	6	get_bits
arg	93:27	93:33	7	&s->gb
op	93:27	0:0	8	&
water	93:28	0:0	8	s
op	93:29	0:0	8	->
water	93:31	0:0	8	gb
arg	93:35	93:36	7	8
water	93:35	0:0	8	8
stmts	93:39	104:8	5	
water	93:39	0:0	6	{
label	94:8	94:14	6	case 1 :
water	95:12	0:0	6	s
op	95:13	0:0	6	->
water	95:15	0:0	6	rgb
op	95:27	0:0	6	=
water	95:29	0:0	6	1
water	95:30	0:0	6	;
water	96:12	0:0	6	s
op	96:13	0:0	6	->
water	96:15	0:0	6	pegasus_rct
op	96:27	0:0	6	=
water	96:29	0:0	6	0
water	96:30	0:0	6	;
break	97:12	97:17	6	
label	98:8	98:14	6	case 2 :
water	99:12	0:0	6	s
op	99:13	0:0	6	->
water	99:15	0:0	6	rgb
op	99:27	0:0	6	=
water	99:29	0:0	6	1
water	99:30	0:0	6	;
water	100:12	0:0	6	s
op	100:13	0:0	6	->
water	100:15	0:0	6	pegasus_rct
op	100:27	0:0	6	=
water	100:29	0:0	6	1
water	100:30	0:0	6	;
break	101:12	101:17	6	
label	102:8	102:15	6	default :
call	103:12	103:71	6	av_log
arg	103:19	103:27	7	s->avctx
water	103:19	0:0	8	s
op	103:20	0:0	8	->
water	103:22	0:0	8	avctx
arg	103:29	103:41	7	AV_LOG_ERROR
water	103:29	0:0	8	AV_LOG_ERROR
arg	103:43	103:68	7	"unknown colorspace %d\n"
water	103:43	0:0	8	"unknown colorspace %d\n"
arg	103:70	103:71	7	i
water	103:70	0:0	8	i
water	103:72	0:0	6	;
water	104:8	0:0	6	}
water	105:8	0:0	4	len
op	105:12	0:0	4	-=
water	105:15	0:0	4	9
water	105:16	0:0	4	;
goto	106:8	106:16	4	out
water	106:13	0:0	5	out
water	107:4	0:0	4	}
if	108:4	114:4	2	(id ==AV_RL32 ("colr" ) && len > 0)
cond	108:8	108:39	3	id ==AV_RL32 ("colr" ) && len > 0
water	108:8	0:0	4	id
op	108:11	0:0	4	==
call	108:14	108:28	4	AV_RL32
arg	108:22	108:28	5	"colr"
water	108:22	0:0	6	"colr"
op	108:30	0:0	4	&&
water	108:33	0:0	4	len
op	108:37	0:0	4	>
water	108:39	0:0	4	0
stmts	108:42	114:4	3	
water	108:42	0:0	4	{
water	109:8	0:0	4	s
op	109:9	0:0	4	->
water	109:11	0:0	4	colr
op	109:16	0:0	4	=
call	109:18	109:36	4	get_bits
arg	109:27	109:33	5	&s->gb
op	109:27	0:0	6	&
water	109:28	0:0	6	s
op	109:29	0:0	6	->
water	109:31	0:0	6	gb
arg	109:35	109:36	5	8
water	109:35	0:0	6	8
water	109:37	0:0	4	;
if	110:8	111:63	4	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	110:12	110:30	5	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	110:12	0:0	6	s
op	110:13	0:0	6	->
water	110:15	0:0	6	avctx
op	110:20	0:0	6	->
water	110:22	0:0	6	debug
op	110:28	0:0	6	&
water	110:30	0:0	6	FF_DEBUG_PICT_INFO
stmts	111:12	111:63	5	
call	111:12	111:62	6	av_log
arg	111:19	111:27	7	s->avctx
water	111:19	0:0	8	s
op	111:20	0:0	8	->
water	111:22	0:0	8	avctx
arg	111:29	111:40	7	AV_LOG_INFO
water	111:29	0:0	8	AV_LOG_INFO
arg	111:42	111:53	7	"COLR %d\n"
water	111:42	0:0	8	"COLR %d\n"
arg	111:55	111:62	7	s->colr
water	111:55	0:0	8	s
op	111:56	0:0	8	->
water	111:58	0:0	8	colr
water	111:63	0:0	6	;
water	112:8	0:0	4	len
op	112:12	0:0	4	--
water	112:14	0:0	4	;
goto	113:8	113:16	4	out
water	113:13	0:0	5	out
water	114:4	0:0	4	}
if	115:4	121:4	2	(id ==AV_RL32 ("xfrm" ) && len > 0)
cond	115:8	115:39	3	id ==AV_RL32 ("xfrm" ) && len > 0
water	115:8	0:0	4	id
op	115:11	0:0	4	==
call	115:14	115:28	4	AV_RL32
arg	115:22	115:28	5	"xfrm"
water	115:22	0:0	6	"xfrm"
op	115:30	0:0	4	&&
water	115:33	0:0	4	len
op	115:37	0:0	4	>
water	115:39	0:0	4	0
stmts	115:42	121:4	3	
water	115:42	0:0	4	{
water	116:8	0:0	4	s
op	116:9	0:0	4	->
water	116:11	0:0	4	xfrm
op	116:16	0:0	4	=
call	116:18	116:36	4	get_bits
arg	116:27	116:33	5	&s->gb
op	116:27	0:0	6	&
water	116:28	0:0	6	s
op	116:29	0:0	6	->
water	116:31	0:0	6	gb
arg	116:35	116:36	5	8
water	116:35	0:0	6	8
water	116:37	0:0	4	;
if	117:8	118:63	4	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	117:12	117:30	5	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	117:12	0:0	6	s
op	117:13	0:0	6	->
water	117:15	0:0	6	avctx
op	117:20	0:0	6	->
water	117:22	0:0	6	debug
op	117:28	0:0	6	&
water	117:30	0:0	6	FF_DEBUG_PICT_INFO
stmts	118:12	118:63	5	
call	118:12	118:62	6	av_log
arg	118:19	118:27	7	s->avctx
water	118:19	0:0	8	s
op	118:20	0:0	8	->
water	118:22	0:0	8	avctx
arg	118:29	118:40	7	AV_LOG_INFO
water	118:29	0:0	8	AV_LOG_INFO
arg	118:42	118:53	7	"XFRM %d\n"
water	118:42	0:0	8	"XFRM %d\n"
arg	118:55	118:62	7	s->xfrm
water	118:55	0:0	8	s
op	118:56	0:0	8	->
water	118:58	0:0	8	xfrm
water	118:63	0:0	6	;
water	119:8	0:0	4	len
op	119:12	0:0	4	--
water	119:14	0:0	4	;
goto	120:8	120:16	4	out
water	120:13	0:0	5	out
water	121:4	0:0	4	}
if	124:4	160:4	2	(s -> start_code == APP3 && id ==AV_RB32 ("_JPS" ) && len >= 10)
cond	124:8	124:65	3	s -> start_code == APP3 && id ==AV_RB32 ("_JPS" ) && len >= 10
water	124:8	0:0	4	s
op	124:9	0:0	4	->
water	124:11	0:0	4	start_code
op	124:22	0:0	4	==
water	124:25	0:0	4	APP3
op	124:30	0:0	4	&&
water	124:33	0:0	4	id
op	124:36	0:0	4	==
call	124:39	124:53	4	AV_RB32
arg	124:47	124:53	5	"_JPS"
water	124:47	0:0	6	"_JPS"
op	124:55	0:0	4	&&
water	124:58	0:0	4	len
op	124:62	0:0	4	>=
water	124:65	0:0	4	10
stmts	124:69	160:4	3	
water	124:69	0:0	4	{
decl	125:8	125:31	4	int	flags
water	125:17	0:0	4	,
decl	125:8	125:31	4	int	layout
water	125:25	0:0	4	,
decl	125:8	125:31	4	int	type
if	126:8	127:55	4	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	126:12	126:30	5	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	126:12	0:0	6	s
op	126:13	0:0	6	->
water	126:15	0:0	6	avctx
op	126:20	0:0	6	->
water	126:22	0:0	6	debug
op	126:28	0:0	6	&
water	126:30	0:0	6	FF_DEBUG_PICT_INFO
stmts	127:12	127:55	5	
call	127:12	127:54	6	av_log
arg	127:19	127:27	7	s->avctx
water	127:19	0:0	8	s
op	127:20	0:0	8	->
water	127:22	0:0	8	avctx
arg	127:29	127:40	7	AV_LOG_INFO
water	127:29	0:0	8	AV_LOG_INFO
arg	127:42	127:54	7	"_JPSJPS_\n"
water	127:42	0:0	8	"_JPSJPS_\n"
water	127:55	0:0	6	;
call	129:8	129:28	4	skip_bits
arg	129:18	129:24	5	&s->gb
op	129:18	0:0	6	&
water	129:19	0:0	6	s
op	129:20	0:0	6	->
water	129:22	0:0	6	gb
arg	129:26	129:28	5	32
water	129:26	0:0	6	32
water	129:29	0:0	4	;
water	129:31	0:0	4	len
op	129:35	0:0	4	-=
water	129:38	0:0	4	4
water	129:39	0:0	4	;
call	130:8	130:28	4	skip_bits
arg	130:18	130:24	5	&s->gb
op	130:18	0:0	6	&
water	130:19	0:0	6	s
op	130:20	0:0	6	->
water	130:22	0:0	6	gb
arg	130:26	130:28	5	16
water	130:26	0:0	6	16
water	130:29	0:0	4	;
water	130:31	0:0	4	len
op	130:35	0:0	4	-=
water	130:38	0:0	4	2
water	130:39	0:0	4	;
call	131:8	131:27	4	skip_bits
arg	131:18	131:24	5	&s->gb
op	131:18	0:0	6	&
water	131:19	0:0	6	s
op	131:20	0:0	6	->
water	131:22	0:0	6	gb
arg	131:26	131:27	5	8
water	131:26	0:0	6	8
water	131:28	0:0	4	;
water	132:8	0:0	4	flags
op	132:15	0:0	4	=
call	132:17	132:35	4	get_bits
arg	132:26	132:32	5	&s->gb
op	132:26	0:0	6	&
water	132:27	0:0	6	s
op	132:28	0:0	6	->
water	132:30	0:0	6	gb
arg	132:34	132:35	5	8
water	132:34	0:0	6	8
water	132:36	0:0	4	;
water	133:8	0:0	4	layout
op	133:15	0:0	4	=
call	133:17	133:35	4	get_bits
arg	133:26	133:32	5	&s->gb
op	133:26	0:0	6	&
water	133:27	0:0	6	s
op	133:28	0:0	6	->
water	133:30	0:0	6	gb
arg	133:34	133:35	5	8
water	133:34	0:0	6	8
water	133:36	0:0	4	;
water	134:8	0:0	4	type
op	134:15	0:0	4	=
call	134:17	134:35	4	get_bits
arg	134:26	134:32	5	&s->gb
op	134:26	0:0	6	&
water	134:27	0:0	6	s
op	134:28	0:0	6	->
water	134:30	0:0	6	gb
arg	134:34	134:35	5	8
water	134:34	0:0	6	8
water	134:36	0:0	4	;
water	135:8	0:0	4	len
op	135:12	0:0	4	-=
water	135:15	0:0	4	4
water	135:16	0:0	4	;
water	137:8	0:0	4	s
op	137:9	0:0	4	->
water	137:11	0:0	4	stereo3d
op	137:20	0:0	4	=
call	137:22	137:40	4	av_stereo3d_alloc
water	137:41	0:0	4	;
if	138:8	140:8	4	(! s -> stereo3d)
cond	138:12	138:16	5	! s -> stereo3d
op	138:12	0:0	6	!
water	138:13	0:0	6	s
op	138:14	0:0	6	->
water	138:16	0:0	6	stereo3d
stmts	138:26	140:8	5	
water	138:26	0:0	6	{
goto	139:12	139:20	6	out
water	139:17	0:0	7	out
water	140:8	0:0	6	}
if	141:8	143:8	4	(type == 0)
cond	141:12	141:20	5	type == 0
water	141:12	0:0	6	type
op	141:17	0:0	6	==
water	141:20	0:0	6	0
stmts	141:23	143:8	5	
water	141:23	0:0	6	{
water	142:12	0:0	6	s
op	142:13	0:0	6	->
water	142:15	0:0	6	stereo3d
op	142:23	0:0	6	->
water	142:25	0:0	6	type
op	142:30	0:0	6	=
water	142:32	0:0	6	AV_STEREO3D_2D
water	142:46	0:0	6	;
water	143:8	0:0	6	}
else	143:10	158:8	4
stmts	143:15	158:8	5	
if	143:15	158:8	6	(type == 1)
cond	143:19	143:27	7	type == 1
water	143:19	0:0	8	type
op	143:24	0:0	8	==
water	143:27	0:0	8	1
stmts	143:30	158:8	7	
water	143:30	0:0	8	{
switch	144:12	154:12	8	(layout)
cond	144:20	144:20	9	layout
water	144:20	0:0	10	layout
stmts	144:28	154:12	9	
water	144:28	0:0	10	{
label	145:12	145:21	10	case 0 x01 :
water	146:16	0:0	10	s
op	146:17	0:0	10	->
water	146:19	0:0	10	stereo3d
op	146:27	0:0	10	->
water	146:29	0:0	10	type
op	146:34	0:0	10	=
water	146:36	0:0	10	AV_STEREO3D_LINES
water	146:53	0:0	10	;
break	147:16	147:21	10	
label	148:12	148:21	10	case 0 x02 :
water	149:16	0:0	10	s
op	149:17	0:0	10	->
water	149:19	0:0	10	stereo3d
op	149:27	0:0	10	->
water	149:29	0:0	10	type
op	149:34	0:0	10	=
water	149:36	0:0	10	AV_STEREO3D_SIDEBYSIDE
water	149:58	0:0	10	;
break	150:16	150:21	10	
label	151:12	151:21	10	case 0 x03 :
water	152:16	0:0	10	s
op	152:17	0:0	10	->
water	152:19	0:0	10	stereo3d
op	152:27	0:0	10	->
water	152:29	0:0	10	type
op	152:34	0:0	10	=
water	152:36	0:0	10	AV_STEREO3D_TOPBOTTOM
water	152:57	0:0	10	;
break	153:16	153:21	10	
water	154:12	0:0	10	}
if	155:12	157:12	8	(! ( flags & 0 x04 ))
cond	155:16	155:30	9	! ( flags & 0 x04 )
op	155:16	0:0	10	!
water	155:17	0:0	10	(
water	155:18	0:0	10	flags
op	155:24	0:0	10	&
water	155:26	0:0	10	0
water	155:27	0:0	10	x04
water	155:30	0:0	10	)
stmts	155:33	157:12	9	
water	155:33	0:0	10	{
water	156:16	0:0	10	s
op	156:17	0:0	10	->
water	156:19	0:0	10	stereo3d
op	156:27	0:0	10	->
water	156:29	0:0	10	flags
op	156:35	0:0	10	=
water	156:37	0:0	10	AV_STEREO3D_FLAG_INVERT
water	156:60	0:0	10	;
water	157:12	0:0	10	}
water	158:8	0:0	8	}
goto	159:8	159:16	4	out
water	159:13	0:0	5	out
water	160:4	0:0	4	}
if	163:4	195:4	2	(s -> start_code == APP1 && id ==AV_RB32 ("Exif" ) && len >= 2)
cond	163:8	163:65	3	s -> start_code == APP1 && id ==AV_RB32 ("Exif" ) && len >= 2
water	163:8	0:0	4	s
op	163:9	0:0	4	->
water	163:11	0:0	4	start_code
op	163:22	0:0	4	==
water	163:25	0:0	4	APP1
op	163:30	0:0	4	&&
water	163:33	0:0	4	id
op	163:36	0:0	4	==
call	163:39	163:53	4	AV_RB32
arg	163:47	163:53	5	"Exif"
water	163:47	0:0	6	"Exif"
op	163:55	0:0	4	&&
water	163:58	0:0	4	len
op	163:62	0:0	4	>=
water	163:65	0:0	4	2
stmts	163:68	195:4	3	
water	163:68	0:0	4	{
decl	164:8	164:29	4	GetByteContext	gbytes
decl	165:8	165:43	4	int	ret
water	165:15	0:0	4	,
decl	165:8	165:43	4	int	le
water	165:19	0:0	4	,
decl	165:8	165:43	4	int	ifd_offset
water	165:31	0:0	4	,
decl	165:8	165:43	4	int	bytes_read
decl	166:8	166:30	4	const uint8_t	*aligned
call	168:8	168:28	4	skip_bits
arg	168:18	168:24	5	&s->gb
op	168:18	0:0	6	&
water	168:19	0:0	6	s
op	168:20	0:0	6	->
water	168:22	0:0	6	gb
arg	168:26	168:28	5	16
water	168:26	0:0	6	16
water	168:29	0:0	4	;
water	169:8	0:0	4	len
op	169:12	0:0	4	-=
water	169:15	0:0	4	2
water	169:16	0:0	4	;
water	172:8	0:0	4	aligned
op	172:16	0:0	4	=
call	172:18	172:39	4	align_get_bits
arg	172:33	172:39	5	&s->gb
op	172:33	0:0	6	&
water	172:34	0:0	6	s
op	172:35	0:0	6	->
water	172:37	0:0	6	gb
water	172:40	0:0	4	;
call	173:8	173:46	4	bytestream2_init
arg	173:25	173:32	5	&gbytes
op	173:25	0:0	6	&
water	173:26	0:0	6	gbytes
arg	173:34	173:41	5	aligned
water	173:34	0:0	6	aligned
arg	173:43	173:46	5	len
water	173:43	0:0	6	len
water	173:47	0:0	4	;
water	176:8	0:0	4	ret
op	176:12	0:0	4	=
call	176:14	176:57	4	ff_tdecode_header
arg	176:32	176:39	5	&gbytes
op	176:32	0:0	6	&
water	176:33	0:0	6	gbytes
arg	176:41	176:44	5	&le
op	176:41	0:0	6	&
water	176:42	0:0	6	le
arg	176:46	176:57	5	&ifd_offset
op	176:46	0:0	6	&
water	176:47	0:0	6	ifd_offset
water	176:58	0:0	4	;
if	177:8	179:8	4	(ret)
cond	177:12	177:12	5	ret
water	177:12	0:0	6	ret
stmts	177:17	179:8	5	
water	177:17	0:0	6	{
call	178:12	178:86	6	av_log
arg	178:19	178:27	7	s->avctx
water	178:19	0:0	8	s
op	178:20	0:0	8	->
water	178:22	0:0	8	avctx
arg	178:29	178:41	7	AV_LOG_ERROR
water	178:29	0:0	8	AV_LOG_ERROR
arg	178:43	178:86	7	"mjpeg: invalid TIFF header in EXIF data\n"
water	178:43	0:0	8	"mjpeg: invalid TIFF header in EXIF data\n"
water	178:87	0:0	6	;
water	179:8	0:0	6	}
else	179:10	188:8	4
stmts	179:15	188:8	5	
water	179:15	0:0	6	{
call	180:12	180:58	6	bytestream2_seek
arg	180:29	180:36	7	&gbytes
op	180:29	0:0	8	&
water	180:30	0:0	8	gbytes
arg	180:38	180:48	7	ifd_offset
water	180:38	0:0	8	ifd_offset
arg	180:50	180:58	7	SEEK_SET
water	180:50	0:0	8	SEEK_SET
water	180:59	0:0	6	;
water	184:12	0:0	6	ret
op	184:16	0:0	6	=
call	184:18	184:84	6	avpriv_exif_decode_ifd
arg	184:41	184:49	7	s->avctx
water	184:41	0:0	8	s
op	184:42	0:0	8	->
water	184:44	0:0	8	avctx
arg	184:51	184:58	7	&gbytes
op	184:51	0:0	8	&
water	184:52	0:0	8	gbytes
arg	184:60	184:62	7	le
water	184:60	0:0	8	le
arg	184:64	184:65	7	0
water	184:64	0:0	8	0
arg	184:67	184:84	7	&s->exif_metadata
op	184:67	0:0	8	&
water	184:68	0:0	8	s
op	184:69	0:0	8	->
water	184:71	0:0	8	exif_metadata
water	184:85	0:0	6	;
if	185:12	187:12	6	(ret < 0)
cond	185:16	185:22	7	ret < 0
water	185:16	0:0	8	ret
op	185:20	0:0	8	<
water	185:22	0:0	8	0
stmts	185:25	187:12	7	
water	185:25	0:0	8	{
call	186:16	186:82	8	av_log
arg	186:23	186:31	9	s->avctx
water	186:23	0:0	10	s
op	186:24	0:0	10	->
water	186:26	0:0	10	avctx
arg	186:33	186:45	9	AV_LOG_ERROR
water	186:33	0:0	10	AV_LOG_ERROR
arg	186:47	186:82	9	"mjpeg: error decoding EXIF data\n"
water	186:47	0:0	10	"mjpeg: error decoding EXIF data\n"
water	186:83	0:0	8	;
water	187:12	0:0	8	}
water	188:8	0:0	6	}
water	190:8	0:0	4	bytes_read
op	190:19	0:0	4	=
call	190:21	190:45	4	bytestream2_tell
arg	190:38	190:45	5	&gbytes
op	190:38	0:0	6	&
water	190:39	0:0	6	gbytes
water	190:46	0:0	4	;
call	191:8	191:41	4	skip_bits
arg	191:18	191:24	5	&s->gb
op	191:18	0:0	6	&
water	191:19	0:0	6	s
op	191:20	0:0	6	->
water	191:22	0:0	6	gb
arg	191:26	191:41	5	bytes_read<<3
water	191:26	0:0	6	bytes_read
op	191:37	0:0	6	<<
water	191:40	0:0	6	3
water	191:42	0:0	4	;
water	192:8	0:0	4	len
op	192:12	0:0	4	-=
water	192:15	0:0	4	bytes_read
water	192:25	0:0	4	;
goto	194:8	194:16	4	out
water	194:13	0:0	5	out
water	195:4	0:0	4	}
if	198:4	216:4	2	(( s -> start_code == APP1 ) && ( len > ( 0 x28 - 8 ) ))
cond	198:8	198:52	3	( s -> start_code == APP1 ) && ( len > ( 0 x28 - 8 ) )
water	198:8	0:0	4	(
water	198:9	0:0	4	s
op	198:10	0:0	4	->
water	198:12	0:0	4	start_code
op	198:23	0:0	4	==
water	198:26	0:0	4	APP1
water	198:30	0:0	4	)
op	198:32	0:0	4	&&
water	198:35	0:0	4	(
water	198:36	0:0	4	len
op	198:40	0:0	4	>
water	198:42	0:0	4	(
water	198:43	0:0	4	0
water	198:44	0:0	4	x28
op	198:48	0:0	4	-
water	198:50	0:0	4	8
water	198:51	0:0	4	)
water	198:52	0:0	4	)
stmts	198:55	216:4	3	
water	198:55	0:0	4	{
water	199:8	0:0	4	id
op	199:13	0:0	4	=
call	199:15	199:39	4	get_bits_long
arg	199:29	199:35	5	&s->gb
op	199:29	0:0	6	&
water	199:30	0:0	6	s
op	199:31	0:0	6	->
water	199:33	0:0	6	gb
arg	199:37	199:39	5	32
water	199:37	0:0	6	32
water	199:40	0:0	4	;
water	200:8	0:0	4	len
op	200:12	0:0	4	-=
water	200:15	0:0	4	4
water	200:16	0:0	4	;
if	202:8	215:8	4	(id ==AV_RB32 ("mjpg" ))
cond	202:12	202:32	5	id ==AV_RB32 ("mjpg" )
water	202:12	0:0	6	id
op	202:15	0:0	6	==
call	202:18	202:32	6	AV_RB32
arg	202:26	202:32	7	"mjpg"
water	202:26	0:0	8	"mjpg"
stmts	202:35	215:8	5	
water	202:35	0:0	6	{
call	204:12	204:32	6	skip_bits
arg	204:22	204:28	7	&s->gb
op	204:22	0:0	8	&
water	204:23	0:0	8	s
op	204:24	0:0	8	->
water	204:26	0:0	8	gb
arg	204:30	204:32	7	32
water	204:30	0:0	8	32
water	204:33	0:0	6	;
call	205:12	205:32	6	skip_bits
arg	205:22	205:28	7	&s->gb
op	205:22	0:0	8	&
water	205:23	0:0	8	s
op	205:24	0:0	8	->
water	205:26	0:0	8	gb
arg	205:30	205:32	7	32
water	205:30	0:0	8	32
water	205:33	0:0	6	;
call	206:12	206:32	6	skip_bits
arg	206:22	206:28	7	&s->gb
op	206:22	0:0	8	&
water	206:23	0:0	8	s
op	206:24	0:0	8	->
water	206:26	0:0	8	gb
arg	206:30	206:32	7	32
water	206:30	0:0	8	32
water	206:33	0:0	6	;
call	207:12	207:32	6	skip_bits
arg	207:22	207:28	7	&s->gb
op	207:22	0:0	8	&
water	207:23	0:0	8	s
op	207:24	0:0	8	->
water	207:26	0:0	8	gb
arg	207:30	207:32	7	32
water	207:30	0:0	8	32
water	207:33	0:0	6	;
call	208:12	208:32	6	skip_bits
arg	208:22	208:28	7	&s->gb
op	208:22	0:0	8	&
water	208:23	0:0	8	s
op	208:24	0:0	8	->
water	208:26	0:0	8	gb
arg	208:30	208:32	7	32
water	208:30	0:0	8	32
water	208:33	0:0	6	;
call	209:12	209:32	6	skip_bits
arg	209:22	209:28	7	&s->gb
op	209:22	0:0	8	&
water	209:23	0:0	8	s
op	209:24	0:0	8	->
water	209:26	0:0	8	gb
arg	209:30	209:32	7	32
water	209:30	0:0	8	32
water	209:33	0:0	6	;
call	210:12	210:32	6	skip_bits
arg	210:22	210:28	7	&s->gb
op	210:22	0:0	8	&
water	210:23	0:0	8	s
op	210:24	0:0	8	->
water	210:26	0:0	8	gb
arg	210:30	210:32	7	32
water	210:30	0:0	8	32
water	210:33	0:0	6	;
call	211:12	211:32	6	skip_bits
arg	211:22	211:28	7	&s->gb
op	211:22	0:0	8	&
water	211:23	0:0	8	s
op	211:24	0:0	8	->
water	211:26	0:0	8	gb
arg	211:30	211:32	7	32
water	211:30	0:0	8	32
water	211:33	0:0	6	;
if	213:12	214:84	6	(s -> avctx -> debug & FF_DEBUG_PICT_INFO)
cond	213:16	213:34	7	s -> avctx -> debug & FF_DEBUG_PICT_INFO
water	213:16	0:0	8	s
op	213:17	0:0	8	->
water	213:19	0:0	8	avctx
op	213:24	0:0	8	->
water	213:26	0:0	8	debug
op	213:32	0:0	8	&
water	213:34	0:0	8	FF_DEBUG_PICT_INFO
stmts	214:16	214:84	7	
call	214:16	214:83	8	av_log
arg	214:23	214:31	9	s->avctx
water	214:23	0:0	10	s
op	214:24	0:0	10	->
water	214:26	0:0	10	avctx
arg	214:33	214:44	9	AV_LOG_INFO
water	214:33	0:0	10	AV_LOG_INFO
arg	214:46	214:83	9	"mjpeg: Apple MJPEG-A header found\n"
water	214:46	0:0	10	"mjpeg: Apple MJPEG-A header found\n"
water	214:84	0:0	8	;
water	215:8	0:0	6	}
water	216:4	0:0	4	}
label	218:0	218:3	2	out :
if	220:4	222:69	2	(len < 0)
cond	220:8	220:14	3	len < 0
water	220:8	0:0	4	len
op	220:12	0:0	4	<
water	220:14	0:0	4	0
stmts	221:8	222:69	3	
call	221:8	222:68	4	av_log
arg	221:15	221:23	5	s->avctx
water	221:15	0:0	6	s
op	221:16	0:0	6	->
water	221:18	0:0	6	avctx
arg	221:25	221:37	5	AV_LOG_ERROR
water	221:25	0:0	6	AV_LOG_ERROR
arg	222:15	222:68	5	"mjpeg: error, decode_app parser read over the end\n"
water	222:15	0:0	6	"mjpeg: error, decode_app parser read over the end\n"
water	222:69	0:0	4	;
while	223:4	224:28	2	(-- len > 0)
cond	223:11	223:19	3	-- len > 0
op	223:11	0:0	4	--
water	223:13	0:0	4	len
op	223:17	0:0	4	>
water	223:19	0:0	4	0
stmts	224:8	224:28	3	
call	224:8	224:27	4	skip_bits
arg	224:18	224:24	5	&s->gb
op	224:18	0:0	6	&
water	224:19	0:0	6	s
op	224:20	0:0	6	->
water	224:22	0:0	6	gb
arg	224:26	224:27	5	8
water	224:26	0:0	6	8
water	224:28	0:0	4	;
return	226:4	226:12	2	0
water	226:11	0:0	3	0
