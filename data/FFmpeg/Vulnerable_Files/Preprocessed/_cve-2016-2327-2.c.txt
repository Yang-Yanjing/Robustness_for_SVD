func	2:0	139:0	0	static int	encode_apng
params	2:22	0:0	1	
param	2:23	2:44	2	AVCodecContext *	avctx
param	2:46	2:59	2	AVPacket *	pkt
param	3:23	3:42	2	const AVFrame *	pict
param	3:44	3:59	2	int *	got_packet
stmnts	0:0	138:12	1	
decl	5:4	5:39	2	PNGEncContext	*s
op	5:21	0:0	2	=
water	5:23	0:0	2	avctx
op	5:28	0:0	2	->
water	5:30	0:0	2	priv_data
decl	6:4	6:11	2	int	ret
decl	7:4	7:20	2	int	enc_row_size
decl	8:4	8:26	2	size_t	max_packet_size
decl	9:4	9:28	2	APNGFctlChunk	fctl_chunk
if	11:4	21:4	2	(pict && avctx -> codec_id == AV_CODEC_ID_APNG && s -> color_type == PNG_COLOR_TYPE_PALETTE)
cond	11:8	11:72	3	pict && avctx -> codec_id == AV_CODEC_ID_APNG && s -> color_type == PNG_COLOR_TYPE_PALETTE
water	11:8	0:0	4	pict
op	11:13	0:0	4	&&
water	11:16	0:0	4	avctx
op	11:21	0:0	4	->
water	11:23	0:0	4	codec_id
op	11:32	0:0	4	==
water	11:35	0:0	4	AV_CODEC_ID_APNG
op	11:52	0:0	4	&&
water	11:55	0:0	4	s
op	11:56	0:0	4	->
water	11:58	0:0	4	color_type
op	11:69	0:0	4	==
water	11:72	0:0	4	PNG_COLOR_TYPE_PALETTE
stmts	11:96	21:4	3	
water	11:96	0:0	4	{
decl	12:8	12:116	4	uint32_t	checksum
op	12:26	0:0	4	=
call	12:28	12:115	5	~av_crc
arg	12:36	12:71	6	av_crc_get_table(AV_CRC_32_IEEE_LE)
call	12:36	12:70	7	av_crc_get_table
arg	12:53	12:70	8	AV_CRC_32_IEEE_LE
water	12:53	0:0	9	AV_CRC_32_IEEE_LE
arg	12:73	12:76	6	~0U
water	12:73	0:0	7	~0U
arg	12:78	12:91	6	pict->data[1]
water	12:78	0:0	7	pict
op	12:82	0:0	7	->
water	12:84	0:0	7	data
op	12:88	0:0	7	[
water	12:89	0:0	7	1
op	12:90	0:0	7	]
arg	12:93	12:115	6	256*sizeof(uint32_t)
water	12:93	0:0	7	256
op	12:97	0:0	7	*
op	12:99	0:0	7	sizeof
water	12:105	0:0	7	(
water	12:106	0:0	7	uint32_t
water	12:114	0:0	7	)
if	14:8	16:8	4	(avctx -> frame_number == 0)
cond	14:12	14:35	5	avctx -> frame_number == 0
water	14:12	0:0	6	avctx
op	14:17	0:0	6	->
water	14:19	0:0	6	frame_number
op	14:32	0:0	6	==
water	14:35	0:0	6	0
stmts	14:38	16:8	5	
water	14:38	0:0	6	{
water	15:12	0:0	6	s
op	15:13	0:0	6	->
water	15:15	0:0	6	palette_checksum
op	15:32	0:0	6	=
water	15:34	0:0	6	checksum
water	15:42	0:0	6	;
water	16:8	0:0	6	}
else	16:10	20:8	4
stmts	16:15	20:8	5	
if	16:15	20:8	6	(checksum != s -> palette_checksum)
cond	16:19	16:34	7	checksum != s -> palette_checksum
water	16:19	0:0	8	checksum
op	16:28	0:0	8	!=
water	16:31	0:0	8	s
op	16:32	0:0	8	->
water	16:34	0:0	8	palette_checksum
stmts	16:52	20:8	7	
water	16:52	0:0	8	{
call	17:12	18:108	8	av_log
arg	17:19	17:24	9	avctx
water	17:19	0:0	10	avctx
arg	17:26	17:38	9	AV_LOG_ERROR
water	17:26	0:0	10	AV_LOG_ERROR
arg	18:19	18:108	9	"Input contains more than one unique palette. APNG does not support multiple palettes.\n"
water	18:19	0:0	10	"Input contains more than one unique palette. APNG does not support multiple palettes.\n"
water	18:109	0:0	8	;
return	19:12	19:21	8	-1
op	19:19	0:0	9	-
water	19:20	0:0	9	1
water	20:8	0:0	8	}
water	21:4	0:0	4	}
water	23:4	0:0	2	enc_row_size
op	23:20	0:0	2	=
call	23:22	23:91	2	deflateBound
arg	23:35	23:46	3	&s->zstream
op	23:35	0:0	4	&
water	23:36	0:0	4	s
op	23:37	0:0	4	->
water	23:39	0:0	4	zstream
arg	23:48	23:91	3	(avctx->width*s->bits_per_pixel+7)>>3
water	23:48	0:0	4	(
water	23:49	0:0	4	avctx
op	23:54	0:0	4	->
water	23:56	0:0	4	width
op	23:62	0:0	4	*
water	23:64	0:0	4	s
op	23:65	0:0	4	->
water	23:67	0:0	4	bits_per_pixel
op	23:82	0:0	4	+
water	23:84	0:0	4	7
water	23:85	0:0	4	)
op	23:87	0:0	4	>>
water	23:90	0:0	4	3
water	23:92	0:0	2	;
water	24:4	0:0	2	max_packet_size
op	24:20	0:0	2	=
water	25:8	0:0	2	AV_INPUT_BUFFER_MIN_SIZE
op	25:33	0:0	2	+
water	26:8	0:0	2	avctx
op	26:13	0:0	2	->
water	26:15	0:0	2	height
op	26:22	0:0	2	*
water	26:24	0:0	2	(
water	27:12	0:0	2	enc_row_size
op	27:25	0:0	2	+
water	28:12	0:0	2	(
water	28:13	0:0	2	4
op	28:15	0:0	2	+
water	28:17	0:0	2	12
water	28:19	0:0	2	)
op	28:21	0:0	2	*
water	28:23	0:0	2	(
water	28:24	0:0	2	(
water	28:25	0:0	2	(
water	28:26	0:0	2	int64_t
water	28:33	0:0	2	)
water	28:34	0:0	2	enc_row_size
op	28:47	0:0	2	+
water	28:49	0:0	2	IOBUF_SIZE
op	28:60	0:0	2	-
water	28:62	0:0	2	1
water	28:63	0:0	2	)
op	28:65	0:0	2	/
water	28:67	0:0	2	IOBUF_SIZE
water	28:77	0:0	2	)
water	29:8	0:0	2	)
water	29:9	0:0	2	;
if	30:4	31:30	2	(max_packet_size > INT_MAX)
cond	30:8	30:26	3	max_packet_size > INT_MAX
water	30:8	0:0	4	max_packet_size
op	30:24	0:0	4	>
water	30:26	0:0	4	INT_MAX
stmts	31:8	31:30	3	
return	31:8	31:30	4	AVERROR(ENOMEM)
call	31:15	31:29	5	AVERROR
arg	31:23	31:29	6	ENOMEM
water	31:23	0:0	7	ENOMEM
if	33:4	47:4	2	(avctx -> frame_number == 0)
cond	33:8	33:31	3	avctx -> frame_number == 0
water	33:8	0:0	4	avctx
op	33:13	0:0	4	->
water	33:15	0:0	4	frame_number
op	33:28	0:0	4	==
water	33:31	0:0	4	0
stmts	33:34	47:4	3	
water	33:34	0:0	4	{
water	34:8	0:0	4	s
op	34:9	0:0	4	->
water	34:11	0:0	4	bytestream
op	34:22	0:0	4	=
water	34:24	0:0	4	avctx
op	34:29	0:0	4	->
water	34:31	0:0	4	extradata
op	34:41	0:0	4	=
call	34:43	34:71	4	av_malloc
arg	34:53	34:71	5	FF_MIN_BUFFER_SIZE
water	34:53	0:0	6	FF_MIN_BUFFER_SIZE
water	34:72	0:0	4	;
if	35:8	36:34	4	(! avctx -> extradata)
cond	35:12	35:20	5	! avctx -> extradata
op	35:12	0:0	6	!
water	35:13	0:0	6	avctx
op	35:18	0:0	6	->
water	35:20	0:0	6	extradata
stmts	36:12	36:34	5	
return	36:12	36:34	6	AVERROR(ENOMEM)
call	36:19	36:33	7	AVERROR
arg	36:27	36:33	8	ENOMEM
water	36:27	0:0	9	ENOMEM
water	38:8	0:0	4	ret
op	38:12	0:0	4	=
call	38:14	38:40	4	encode_headers
arg	38:29	38:34	5	avctx
water	38:29	0:0	6	avctx
arg	38:36	38:40	5	pict
water	38:36	0:0	6	pict
water	38:41	0:0	4	;
if	39:8	40:22	4	(ret < 0)
cond	39:12	39:18	5	ret < 0
water	39:12	0:0	6	ret
op	39:16	0:0	6	<
water	39:18	0:0	6	0
stmts	40:12	40:22	5	
return	40:12	40:22	6	ret
water	40:19	0:0	7	ret
water	42:8	0:0	4	avctx
op	42:13	0:0	4	->
water	42:15	0:0	4	extradata_size
op	42:30	0:0	4	=
water	42:32	0:0	4	s
op	42:33	0:0	4	->
water	42:35	0:0	4	bytestream
op	42:46	0:0	4	-
water	42:48	0:0	4	avctx
op	42:53	0:0	4	->
water	42:55	0:0	4	extradata
water	42:64	0:0	4	;
water	44:8	0:0	4	s
op	44:9	0:0	4	->
water	44:11	0:0	4	last_frame_packet
op	44:29	0:0	4	=
call	44:31	44:56	4	av_malloc
arg	44:41	44:56	5	max_packet_size
water	44:41	0:0	6	max_packet_size
water	44:57	0:0	4	;
if	45:8	46:34	4	(! s -> last_frame_packet)
cond	45:12	45:16	5	! s -> last_frame_packet
op	45:12	0:0	6	!
water	45:13	0:0	6	s
op	45:14	0:0	6	->
water	45:16	0:0	6	last_frame_packet
stmts	46:12	46:34	5	
return	46:12	46:34	6	AVERROR(ENOMEM)
call	46:19	46:33	7	AVERROR
arg	46:27	46:33	8	ENOMEM
water	46:27	0:0	9	ENOMEM
water	47:4	0:0	4	}
else	47:6	55:4	2
stmts	47:11	55:4	3	
if	47:11	55:4	4	(s -> last_frame)
cond	47:15	47:18	5	s -> last_frame
water	47:15	0:0	6	s
op	47:16	0:0	6	->
water	47:18	0:0	6	last_frame
stmts	47:30	55:4	5	
water	47:30	0:0	6	{
water	48:8	0:0	6	ret
op	48:12	0:0	6	=
call	48:14	48:61	6	ff_alloc_packet2
arg	48:31	48:36	7	avctx
water	48:31	0:0	8	avctx
arg	48:38	48:41	7	pkt
water	48:38	0:0	8	pkt
arg	48:43	48:58	7	max_packet_size
water	48:43	0:0	8	max_packet_size
arg	48:60	48:61	7	0
water	48:60	0:0	8	0
water	48:62	0:0	6	;
if	49:8	50:22	6	(ret < 0)
cond	49:12	49:18	7	ret < 0
water	49:12	0:0	8	ret
op	49:16	0:0	8	<
water	49:18	0:0	8	0
stmts	50:12	50:22	7	
return	50:12	50:22	8	ret
water	50:19	0:0	9	ret
call	52:8	52:73	6	memcpy
arg	52:15	52:24	7	pkt->data
water	52:15	0:0	8	pkt
op	52:18	0:0	8	->
water	52:20	0:0	8	data
arg	52:26	52:46	7	s->last_frame_packet
water	52:26	0:0	8	s
op	52:27	0:0	8	->
water	52:29	0:0	8	last_frame_packet
arg	52:48	52:73	7	s->last_frame_packet_size
water	52:48	0:0	8	s
op	52:49	0:0	8	->
water	52:51	0:0	8	last_frame_packet_size
water	52:74	0:0	6	;
water	53:8	0:0	6	pkt
op	53:11	0:0	6	->
water	53:13	0:0	6	size
op	53:18	0:0	6	=
water	53:20	0:0	6	s
op	53:21	0:0	6	->
water	53:23	0:0	6	last_frame_packet_size
water	53:45	0:0	6	;
water	54:8	0:0	6	pkt
op	54:11	0:0	6	->
water	54:13	0:0	6	pts
op	54:17	0:0	6	=
water	54:19	0:0	6	pkt
op	54:22	0:0	6	->
water	54:24	0:0	6	dts
op	54:28	0:0	6	=
water	54:30	0:0	6	s
op	54:31	0:0	6	->
water	54:33	0:0	6	last_frame
op	54:43	0:0	6	->
water	54:45	0:0	6	pts
water	54:48	0:0	6	;
water	55:4	0:0	6	}
if	57:4	74:4	2	(pict)
cond	57:8	57:8	3	pict
water	57:8	0:0	4	pict
stmts	57:14	74:4	3	
water	57:14	0:0	4	{
water	58:8	0:0	4	s
op	58:9	0:0	4	->
water	58:11	0:0	4	bytestream_start
op	58:28	0:0	4	=
water	59:8	0:0	4	s
op	59:9	0:0	4	->
water	59:11	0:0	4	bytestream
op	59:28	0:0	4	=
water	59:30	0:0	4	s
op	59:31	0:0	4	->
water	59:33	0:0	4	last_frame_packet
water	59:50	0:0	4	;
water	60:8	0:0	4	s
op	60:9	0:0	4	->
water	60:11	0:0	4	bytestream_end
op	60:28	0:0	4	=
water	60:30	0:0	4	s
op	60:31	0:0	4	->
water	60:33	0:0	4	bytestream
op	60:44	0:0	4	+
water	60:46	0:0	4	max_packet_size
water	60:61	0:0	4	;
water	64:8	0:0	4	fctl_chunk
op	64:18	0:0	4	.
water	64:19	0:0	4	sequence_number
op	64:35	0:0	4	=
water	64:37	0:0	4	s
op	64:38	0:0	4	->
water	64:40	0:0	4	sequence_number
water	64:55	0:0	4	;
op	65:8	0:0	4	++
water	65:10	0:0	4	s
op	65:11	0:0	4	->
water	65:13	0:0	4	sequence_number
water	65:28	0:0	4	;
water	66:8	0:0	4	s
op	66:9	0:0	4	->
water	66:11	0:0	4	bytestream
op	66:22	0:0	4	+=
water	66:25	0:0	4	26
op	66:28	0:0	4	+
water	66:30	0:0	4	12
water	66:32	0:0	4	;
water	68:8	0:0	4	ret
op	68:12	0:0	4	=
call	68:14	68:77	4	apng_encode_frame
arg	68:32	68:37	5	avctx
water	68:32	0:0	6	avctx
arg	68:39	68:43	5	pict
water	68:39	0:0	6	pict
arg	68:45	68:56	5	&fctl_chunk
op	68:45	0:0	6	&
water	68:46	0:0	6	fctl_chunk
arg	68:58	68:77	5	&s->last_frame_fctl
op	68:58	0:0	6	&
water	68:59	0:0	6	s
op	68:60	0:0	6	->
water	68:62	0:0	6	last_frame_fctl
water	68:78	0:0	4	;
if	69:8	70:22	4	(ret < 0)
cond	69:12	69:18	5	ret < 0
water	69:12	0:0	6	ret
op	69:16	0:0	6	<
water	69:18	0:0	6	0
stmts	70:12	70:22	5	
return	70:12	70:22	6	ret
water	70:19	0:0	7	ret
water	72:8	0:0	4	fctl_chunk
op	72:18	0:0	4	.
water	72:19	0:0	4	delay_num
op	72:29	0:0	4	=
water	72:31	0:0	4	0
water	72:32	0:0	4	;
water	73:8	0:0	4	fctl_chunk
op	73:18	0:0	4	.
water	73:19	0:0	4	delay_den
op	73:29	0:0	4	=
water	73:31	0:0	4	0
water	73:32	0:0	4	;
water	74:4	0:0	4	}
else	74:6	76:4	2
stmts	74:11	76:4	3	
water	74:11	0:0	4	{
water	75:8	0:0	4	s
op	75:9	0:0	4	->
water	75:11	0:0	4	last_frame_fctl
op	75:26	0:0	4	.
water	75:27	0:0	4	dispose_op
op	75:38	0:0	4	=
water	75:40	0:0	4	APNG_DISPOSE_OP_NONE
water	75:60	0:0	4	;
water	76:4	0:0	4	}
if	78:4	94:4	2	(s -> last_frame)
cond	78:8	78:11	3	s -> last_frame
water	78:8	0:0	4	s
op	78:9	0:0	4	->
water	78:11	0:0	4	last_frame
stmts	78:23	94:4	3	
water	78:23	0:0	4	{
decl	79:8	79:50	4	uint8_t	*last_fctl_chunk_start
op	79:39	0:0	4	=
water	79:41	0:0	4	pkt
op	79:44	0:0	4	->
water	79:46	0:0	4	data
decl	80:8	80:23	4	uint8_t	buf[26]
call	82:8	82:59	4	AV_WB32
arg	82:16	82:23	5	buf+0
water	82:16	0:0	6	buf
op	82:20	0:0	6	+
water	82:22	0:0	6	0
arg	82:25	82:59	5	s->last_frame_fctl.sequence_number
water	82:25	0:0	6	s
op	82:26	0:0	6	->
water	82:28	0:0	6	last_frame_fctl
op	82:43	0:0	6	.
water	82:44	0:0	6	sequence_number
water	82:60	0:0	4	;
call	83:8	83:49	4	AV_WB32
arg	83:16	83:23	5	buf+4
water	83:16	0:0	6	buf
op	83:20	0:0	6	+
water	83:22	0:0	6	4
arg	83:25	83:49	5	s->last_frame_fctl.width
water	83:25	0:0	6	s
op	83:26	0:0	6	->
water	83:28	0:0	6	last_frame_fctl
op	83:43	0:0	6	.
water	83:44	0:0	6	width
water	83:50	0:0	4	;
call	84:8	84:50	4	AV_WB32
arg	84:16	84:23	5	buf+8
water	84:16	0:0	6	buf
op	84:20	0:0	6	+
water	84:22	0:0	6	8
arg	84:25	84:50	5	s->last_frame_fctl.height
water	84:25	0:0	6	s
op	84:26	0:0	6	->
water	84:28	0:0	6	last_frame_fctl
op	84:43	0:0	6	.
water	84:44	0:0	6	height
water	84:51	0:0	4	;
call	85:8	85:53	4	AV_WB32
arg	85:16	85:24	5	buf+12
water	85:16	0:0	6	buf
op	85:20	0:0	6	+
water	85:22	0:0	6	12
arg	85:26	85:53	5	s->last_frame_fctl.x_offset
water	85:26	0:0	6	s
op	85:27	0:0	6	->
water	85:29	0:0	6	last_frame_fctl
op	85:44	0:0	6	.
water	85:45	0:0	6	x_offset
water	85:54	0:0	4	;
call	86:8	86:53	4	AV_WB32
arg	86:16	86:24	5	buf+16
water	86:16	0:0	6	buf
op	86:20	0:0	6	+
water	86:22	0:0	6	16
arg	86:26	86:53	5	s->last_frame_fctl.y_offset
water	86:26	0:0	6	s
op	86:27	0:0	6	->
water	86:29	0:0	6	last_frame_fctl
op	86:44	0:0	6	.
water	86:45	0:0	6	y_offset
water	86:54	0:0	4	;
call	87:8	87:54	4	AV_WB16
arg	87:16	87:24	5	buf+20
water	87:16	0:0	6	buf
op	87:20	0:0	6	+
water	87:22	0:0	6	20
arg	87:26	87:54	5	s->last_frame_fctl.delay_num
water	87:26	0:0	6	s
op	87:27	0:0	6	->
water	87:29	0:0	6	last_frame_fctl
op	87:44	0:0	6	.
water	87:45	0:0	6	delay_num
water	87:55	0:0	4	;
call	88:8	88:54	4	AV_WB16
arg	88:16	88:24	5	buf+22
water	88:16	0:0	6	buf
op	88:20	0:0	6	+
water	88:22	0:0	6	22
arg	88:26	88:54	5	s->last_frame_fctl.delay_den
water	88:26	0:0	6	s
op	88:27	0:0	6	->
water	88:29	0:0	6	last_frame_fctl
op	88:44	0:0	6	.
water	88:45	0:0	6	delay_den
water	88:55	0:0	4	;
water	89:8	0:0	4	buf
op	89:11	0:0	4	[
water	89:12	0:0	4	24
op	89:14	0:0	4	]
op	89:16	0:0	4	=
water	89:18	0:0	4	s
op	89:19	0:0	4	->
water	89:21	0:0	4	last_frame_fctl
op	89:36	0:0	4	.
water	89:37	0:0	4	dispose_op
water	89:47	0:0	4	;
water	90:8	0:0	4	buf
op	90:11	0:0	4	[
water	90:12	0:0	4	25
op	90:14	0:0	4	]
op	90:16	0:0	4	=
water	90:18	0:0	4	s
op	90:19	0:0	4	->
water	90:21	0:0	4	last_frame_fctl
op	90:36	0:0	4	.
water	90:37	0:0	4	blend_op
water	90:45	0:0	4	;
call	91:8	91:82	4	png_write_chunk
arg	91:24	91:46	5	&last_fctl_chunk_start
op	91:24	0:0	6	&
water	91:25	0:0	6	last_fctl_chunk_start
arg	91:48	91:73	5	MKTAG('f','c','T','L')
call	91:48	91:72	6	MKTAG
arg	91:54	91:57	7	'f'
water	91:54	0:0	8	'f'
arg	91:59	91:62	7	'c'
water	91:59	0:0	8	'c'
arg	91:64	91:67	7	'T'
water	91:64	0:0	8	'T'
arg	91:69	91:72	7	'L'
water	91:69	0:0	8	'L'
arg	91:75	91:78	5	buf
water	91:75	0:0	6	buf
arg	91:80	91:82	5	26
water	91:80	0:0	6	26
water	91:83	0:0	4	;
op	93:8	0:0	4	*
water	93:9	0:0	4	got_packet
op	93:20	0:0	4	=
water	93:22	0:0	4	1
water	93:23	0:0	4	;
water	94:4	0:0	4	}
if	96:4	134:4	2	(pict)
cond	96:8	96:8	3	pict
water	96:8	0:0	4	pict
stmts	96:14	134:4	3	
water	96:14	0:0	4	{
if	97:8	101:8	4	(! s -> last_frame)
cond	97:12	97:16	5	! s -> last_frame
op	97:12	0:0	6	!
water	97:13	0:0	6	s
op	97:14	0:0	6	->
water	97:16	0:0	6	last_frame
stmts	97:28	101:8	5	
water	97:28	0:0	6	{
water	98:12	0:0	6	s
op	98:13	0:0	6	->
water	98:15	0:0	6	last_frame
op	98:26	0:0	6	=
call	98:28	98:43	6	av_frame_alloc
water	98:44	0:0	6	;
if	99:12	100:38	6	(! s -> last_frame)
cond	99:16	99:20	7	! s -> last_frame
op	99:16	0:0	8	!
water	99:17	0:0	8	s
op	99:18	0:0	8	->
water	99:20	0:0	8	last_frame
stmts	100:16	100:38	7	
return	100:16	100:38	8	AVERROR(ENOMEM)
call	100:23	100:37	9	AVERROR
arg	100:31	100:37	10	ENOMEM
water	100:31	0:0	11	ENOMEM
water	101:8	0:0	6	}
else	101:10	125:8	4
stmts	101:15	125:8	5	
if	101:15	125:8	6	(s -> last_frame_fctl . dispose_op != APNG_DISPOSE_OP_PREVIOUS)
cond	101:19	101:52	7	s -> last_frame_fctl . dispose_op != APNG_DISPOSE_OP_PREVIOUS
water	101:19	0:0	8	s
op	101:20	0:0	8	->
water	101:22	0:0	8	last_frame_fctl
op	101:37	0:0	8	.
water	101:38	0:0	8	dispose_op
op	101:49	0:0	8	!=
water	101:52	0:0	8	APNG_DISPOSE_OP_PREVIOUS
stmts	101:78	125:8	7	
water	101:78	0:0	8	{
if	102:12	112:12	8	(! s -> prev_frame)
cond	102:16	102:20	9	! s -> prev_frame
op	102:16	0:0	10	!
water	102:17	0:0	10	s
op	102:18	0:0	10	->
water	102:20	0:0	10	prev_frame
stmts	102:32	112:12	9	
water	102:32	0:0	10	{
water	103:16	0:0	10	s
op	103:17	0:0	10	->
water	103:19	0:0	10	prev_frame
op	103:30	0:0	10	=
call	103:32	103:47	10	av_frame_alloc
water	103:48	0:0	10	;
if	104:16	105:42	10	(! s -> prev_frame)
cond	104:20	104:24	11	! s -> prev_frame
op	104:20	0:0	12	!
water	104:21	0:0	12	s
op	104:22	0:0	12	->
water	104:24	0:0	12	prev_frame
stmts	105:20	105:42	11	
return	105:20	105:42	12	AVERROR(ENOMEM)
call	105:27	105:41	13	AVERROR
arg	105:35	105:41	14	ENOMEM
water	105:35	0:0	15	ENOMEM
water	107:16	0:0	10	s
op	107:17	0:0	10	->
water	107:19	0:0	10	prev_frame
op	107:29	0:0	10	->
water	107:31	0:0	10	format
op	107:38	0:0	10	=
water	107:40	0:0	10	pict
op	107:44	0:0	10	->
water	107:46	0:0	10	format
water	107:52	0:0	10	;
water	108:16	0:0	10	s
op	108:17	0:0	10	->
water	108:19	0:0	10	prev_frame
op	108:29	0:0	10	->
water	108:31	0:0	10	width
op	108:37	0:0	10	=
water	108:39	0:0	10	pict
op	108:43	0:0	10	->
water	108:45	0:0	10	width
water	108:50	0:0	10	;
water	109:16	0:0	10	s
op	109:17	0:0	10	->
water	109:19	0:0	10	prev_frame
op	109:29	0:0	10	->
water	109:31	0:0	10	height
op	109:38	0:0	10	=
water	109:40	0:0	10	pict
op	109:44	0:0	10	->
water	109:46	0:0	10	height
water	109:52	0:0	10	;
if	110:16	111:30	10	(( ret =av_frame_get_buffer (s -> prev_frame ,32 ) ) < 0)
cond	110:20	110:69	11	( ret =av_frame_get_buffer (s -> prev_frame ,32 ) ) < 0
water	110:20	0:0	12	(
water	110:21	0:0	12	ret
op	110:25	0:0	12	=
call	110:27	110:64	12	av_frame_get_buffer
arg	110:47	110:60	13	s->prev_frame
water	110:47	0:0	14	s
op	110:48	0:0	14	->
water	110:50	0:0	14	prev_frame
arg	110:62	110:64	13	32
water	110:62	0:0	14	32
water	110:65	0:0	12	)
op	110:67	0:0	12	<
water	110:69	0:0	12	0
stmts	111:20	111:30	11	
return	111:20	111:30	12	ret
water	111:27	0:0	13	ret
water	112:12	0:0	10	}
call	115:12	116:69	8	memcpy
arg	115:19	115:41	9	s->prev_frame->data[0]
water	115:19	0:0	10	s
op	115:20	0:0	10	->
water	115:22	0:0	10	prev_frame
op	115:32	0:0	10	->
water	115:34	0:0	10	data
op	115:38	0:0	10	[
water	115:39	0:0	10	0
op	115:40	0:0	10	]
arg	115:43	115:65	9	s->last_frame->data[0]
water	115:43	0:0	10	s
op	115:44	0:0	10	->
water	115:46	0:0	10	last_frame
op	115:56	0:0	10	->
water	115:58	0:0	10	data
op	115:62	0:0	10	[
water	115:63	0:0	10	0
op	115:64	0:0	10	]
arg	116:19	116:69	9	s->last_frame->linesize[0]*s->last_frame->height
water	116:19	0:0	10	s
op	116:20	0:0	10	->
water	116:22	0:0	10	last_frame
op	116:32	0:0	10	->
water	116:34	0:0	10	linesize
op	116:42	0:0	10	[
water	116:43	0:0	10	0
op	116:44	0:0	10	]
op	116:46	0:0	10	*
water	116:48	0:0	10	s
op	116:49	0:0	10	->
water	116:51	0:0	10	last_frame
op	116:61	0:0	10	->
water	116:63	0:0	10	height
water	116:70	0:0	8	;
if	117:12	124:12	8	(s -> last_frame_fctl . dispose_op == APNG_DISPOSE_OP_BACKGROUND)
cond	117:16	117:49	9	s -> last_frame_fctl . dispose_op == APNG_DISPOSE_OP_BACKGROUND
water	117:16	0:0	10	s
op	117:17	0:0	10	->
water	117:19	0:0	10	last_frame_fctl
op	117:34	0:0	10	.
water	117:35	0:0	10	dispose_op
op	117:46	0:0	10	==
water	117:49	0:0	10	APNG_DISPOSE_OP_BACKGROUND
stmts	117:77	124:12	9	
water	117:77	0:0	10	{
decl	118:16	118:26	10	uint32_t	y
decl	119:16	119:58	10	uint8_t	bpp
op	119:28	0:0	10	=
water	119:30	0:0	10	(
water	119:31	0:0	10	s
op	119:32	0:0	10	->
water	119:34	0:0	10	bits_per_pixel
op	119:49	0:0	10	+
water	119:51	0:0	10	7
water	119:52	0:0	10	)
op	119:54	0:0	10	>>
water	119:57	0:0	10	3
for	120:16	123:16	10	(y = s -> last_frame_fctl . y_offset ;y < s -> last_frame_fctl . y_offset + s -> last_frame_fctl . height;++ y)
forinit	120:21	120:52	11	y = s -> last_frame_fctl . y_offset ;
water	120:21	0:0	12	y
op	120:23	0:0	12	=
water	120:25	0:0	12	s
op	120:26	0:0	12	->
water	120:28	0:0	12	last_frame_fctl
op	120:43	0:0	12	.
water	120:44	0:0	12	y_offset
water	120:52	0:0	12	;
cond	120:54	120:107	11	y < s -> last_frame_fctl . y_offset + s -> last_frame_fctl . height
water	120:54	0:0	12	y
op	120:56	0:0	12	<
water	120:58	0:0	12	s
op	120:59	0:0	12	->
water	120:61	0:0	12	last_frame_fctl
op	120:76	0:0	12	.
water	120:77	0:0	12	y_offset
op	120:86	0:0	12	+
water	120:88	0:0	12	s
op	120:89	0:0	12	->
water	120:91	0:0	12	last_frame_fctl
op	120:106	0:0	12	.
water	120:107	0:0	12	height
forexpr	120:115	120:117	11	++ y
op	120:115	0:0	12	++
water	120:117	0:0	12	y
stmts	120:120	123:16	11	
water	120:120	0:0	12	{
decl	121:20	121:105	12	size_t	row_start
op	121:37	0:0	12	=
water	121:39	0:0	12	s
op	121:40	0:0	12	->
water	121:42	0:0	12	last_frame
op	121:52	0:0	12	->
water	121:54	0:0	12	linesize
op	121:62	0:0	12	[
water	121:63	0:0	12	0
op	121:64	0:0	12	]
op	121:66	0:0	12	*
water	121:68	0:0	12	y
op	121:70	0:0	12	+
water	121:72	0:0	12	bpp
op	121:76	0:0	12	*
water	121:78	0:0	12	s
op	121:79	0:0	12	->
water	121:81	0:0	12	last_frame_fctl
op	121:96	0:0	12	.
water	121:97	0:0	12	x_offset
call	122:20	122:96	12	memset
arg	122:27	122:61	13	s->prev_frame->data[0]+row_start
water	122:27	0:0	14	s
op	122:28	0:0	14	->
water	122:30	0:0	14	prev_frame
op	122:40	0:0	14	->
water	122:42	0:0	14	data
op	122:46	0:0	14	[
water	122:47	0:0	14	0
op	122:48	0:0	14	]
op	122:50	0:0	14	+
water	122:52	0:0	14	row_start
arg	122:63	122:64	13	0
water	122:63	0:0	14	0
arg	122:66	122:96	13	bpp*s->last_frame_fctl.width
water	122:66	0:0	14	bpp
op	122:70	0:0	14	*
water	122:72	0:0	14	s
op	122:73	0:0	14	->
water	122:75	0:0	14	last_frame_fctl
op	122:90	0:0	14	.
water	122:91	0:0	14	width
water	122:97	0:0	12	;
water	123:16	0:0	12	}
water	124:12	0:0	10	}
water	125:8	0:0	8	}
call	127:8	127:36	4	av_frame_unref
arg	127:23	127:36	5	s->last_frame
water	127:23	0:0	6	s
op	127:24	0:0	6	->
water	127:26	0:0	6	last_frame
water	127:37	0:0	4	;
water	128:8	0:0	4	ret
op	128:12	0:0	4	=
call	128:14	128:56	4	av_frame_ref
arg	128:27	128:40	5	s->last_frame
water	128:27	0:0	6	s
op	128:28	0:0	6	->
water	128:30	0:0	6	last_frame
arg	128:42	128:56	5	(AVFrame*)pict
water	128:42	0:0	6	(
water	128:43	0:0	6	AVFrame
op	128:50	0:0	6	*
water	128:51	0:0	6	)
water	128:52	0:0	6	pict
water	128:57	0:0	4	;
if	129:8	130:22	4	(ret < 0)
cond	129:12	129:18	5	ret < 0
water	129:12	0:0	6	ret
op	129:16	0:0	6	<
water	129:18	0:0	6	0
stmts	130:12	130:22	5	
return	130:12	130:22	6	ret
water	130:19	0:0	7	ret
water	132:8	0:0	4	s
op	132:9	0:0	4	->
water	132:11	0:0	4	last_frame_fctl
op	132:27	0:0	4	=
water	132:29	0:0	4	fctl_chunk
water	132:39	0:0	4	;
water	133:8	0:0	4	s
op	133:9	0:0	4	->
water	133:11	0:0	4	last_frame_packet_size
op	133:34	0:0	4	=
water	133:36	0:0	4	s
op	133:37	0:0	4	->
water	133:39	0:0	4	bytestream
op	133:50	0:0	4	-
water	133:52	0:0	4	s
op	133:53	0:0	4	->
water	133:55	0:0	4	bytestream_start
water	133:71	0:0	4	;
water	134:4	0:0	4	}
else	134:6	136:4	2
stmts	134:11	136:4	3	
water	134:11	0:0	4	{
call	135:8	135:36	4	av_frame_free
arg	135:22	135:36	5	&s->last_frame
op	135:22	0:0	6	&
water	135:23	0:0	6	s
op	135:24	0:0	6	->
water	135:26	0:0	6	last_frame
water	135:37	0:0	4	;
water	136:4	0:0	4	}
return	138:4	138:12	2	0
water	138:11	0:0	3	0
