func	2:0	47:0	0	int	ff_h264_decode_sei
params	2:22	0:0	1	
param	2:23	2:37	2	H264Context *	h
stmnts	3:4	46:12	1	
water	3:4	0:0	2	MpegEncContext
op	3:19	0:0	2	*
water	3:21	0:0	2	const
water	3:27	0:0	2	s
op	3:29	0:0	2	=
op	3:31	0:0	2	&
water	3:32	0:0	2	h
op	3:33	0:0	2	->
water	3:35	0:0	2	s
water	3:36	0:0	2	;
while	5:4	44:4	2	(get_bits_count (& s -> gb ) + 16 < s -> gb . size_in_bits)
cond	5:10	5:46	3	get_bits_count (& s -> gb ) + 16 < s -> gb . size_in_bits
call	5:10	5:31	4	get_bits_count
arg	5:25	5:31	5	&s->gb
op	5:25	0:0	6	&
water	5:26	0:0	6	s
op	5:27	0:0	6	->
water	5:29	0:0	6	gb
op	5:33	0:0	4	+
water	5:35	0:0	4	16
op	5:38	0:0	4	<
water	5:40	0:0	4	s
op	5:41	0:0	4	->
water	5:43	0:0	4	gb
op	5:45	0:0	4	.
water	5:46	0:0	4	size_in_bits
stmts	5:59	44:4	3	
water	5:59	0:0	4	{
decl	6:8	6:22	4	int	size
water	6:16	0:0	4	,
decl	6:8	6:22	4	int	type
water	8:8	0:0	4	type
op	8:12	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
do	9:8	11:8	4	(get_bits (& s -> gb ,8 ) == 255)
cond	11:15	11:38	5	get_bits (& s -> gb ,8 ) == 255
call	11:15	11:33	6	get_bits
arg	11:24	11:30	7	&s->gb
op	11:24	0:0	8	&
water	11:25	0:0	8	s
op	11:26	0:0	8	->
water	11:28	0:0	8	gb
arg	11:32	11:33	7	8
water	11:32	0:0	8	8
op	11:35	0:0	6	==
water	11:38	0:0	6	255
stmts	9:10	11:8	5	
water	9:10	0:0	6	{
water	10:12	0:0	6	type
op	10:16	0:0	6	+=
call	10:19	10:38	6	show_bits
arg	10:29	10:35	7	&s->gb
op	10:29	0:0	8	&
water	10:30	0:0	8	s
op	10:31	0:0	8	->
water	10:33	0:0	8	gb
arg	10:37	10:38	7	8
water	10:37	0:0	8	8
water	10:39	0:0	6	;
water	11:8	0:0	6	}
water	11:42	0:0	4	;
water	13:8	0:0	4	size
op	13:12	0:0	4	=
water	13:13	0:0	4	0
water	13:14	0:0	4	;
do	14:8	16:8	4	(get_bits (& s -> gb ,8 ) == 255)
cond	16:15	16:38	5	get_bits (& s -> gb ,8 ) == 255
call	16:15	16:33	6	get_bits
arg	16:24	16:30	7	&s->gb
op	16:24	0:0	8	&
water	16:25	0:0	8	s
op	16:26	0:0	8	->
water	16:28	0:0	8	gb
arg	16:32	16:33	7	8
water	16:32	0:0	8	8
op	16:35	0:0	6	==
water	16:38	0:0	6	255
stmts	14:10	16:8	5	
water	14:10	0:0	6	{
water	15:12	0:0	6	size
op	15:16	0:0	6	+=
call	15:19	15:38	6	show_bits
arg	15:29	15:35	7	&s->gb
op	15:29	0:0	8	&
water	15:30	0:0	8	s
op	15:31	0:0	8	->
water	15:33	0:0	8	gb
arg	15:37	15:38	7	8
water	15:37	0:0	8	8
water	15:39	0:0	6	;
water	16:8	0:0	6	}
water	16:42	0:0	4	;
if	18:8	19:75	4	(s -> avctx -> debug & FF_DEBUG_STARTCODE)
cond	18:11	18:27	5	s -> avctx -> debug & FF_DEBUG_STARTCODE
water	18:11	0:0	6	s
op	18:12	0:0	6	->
water	18:14	0:0	6	avctx
op	18:19	0:0	6	->
water	18:21	0:0	6	debug
op	18:26	0:0	6	&
water	18:27	0:0	6	FF_DEBUG_STARTCODE
stmts	19:12	19:75	5	
call	19:12	19:74	6	av_log
arg	19:19	19:29	7	h->s.avctx
water	19:19	0:0	8	h
op	19:20	0:0	8	->
water	19:22	0:0	8	s
op	19:23	0:0	8	.
water	19:24	0:0	8	avctx
arg	19:31	19:43	7	AV_LOG_DEBUG
water	19:31	0:0	8	AV_LOG_DEBUG
arg	19:45	19:62	7	"SEI %d len:%d\n"
water	19:45	0:0	8	"SEI %d len:%d\n"
arg	19:64	19:68	7	type
water	19:64	0:0	8	type
arg	19:70	19:74	7	size
water	19:70	0:0	8	size
water	19:75	0:0	6	;
switch	21:8	40:8	4	(type)
cond	21:15	21:15	5	type
water	21:15	0:0	6	type
stmts	21:20	40:8	5	
water	21:20	0:0	6	{
label	22:8	22:32	6	case SEI_TYPE_PIC_TIMING :
if	23:12	24:25	6	(decode_picture_timing (h ) < 0)
cond	23:15	23:42	7	decode_picture_timing (h ) < 0
call	23:15	23:38	8	decode_picture_timing
arg	23:37	23:38	9	h
water	23:37	0:0	10	h
op	23:40	0:0	8	<
water	23:42	0:0	8	0
stmts	24:16	24:25	7	
return	24:16	24:25	8	-1
op	24:23	0:0	9	-
water	24:24	0:0	9	1
break	25:12	25:17	6	
label	26:8	26:44	6	case SEI_TYPE_USER_DATA_UNREGISTERED :
if	27:12	28:25	6	(decode_unregistered_user_data (h ,size ) < 0)
cond	27:15	27:56	7	decode_unregistered_user_data (h ,size ) < 0
call	27:15	27:52	8	decode_unregistered_user_data
arg	27:45	27:46	9	h
water	27:45	0:0	10	h
arg	27:48	27:52	9	size
water	27:48	0:0	10	size
op	27:54	0:0	8	<
water	27:56	0:0	8	0
stmts	28:16	28:25	7	
return	28:16	28:25	8	-1
op	28:23	0:0	9	-
water	28:24	0:0	9	1
break	29:12	29:17	6	
label	30:8	30:36	6	case SEI_TYPE_RECOVERY_POINT :
if	31:12	32:25	6	(decode_recovery_point (h ) < 0)
cond	31:15	31:42	7	decode_recovery_point (h ) < 0
call	31:15	31:38	8	decode_recovery_point
arg	31:37	31:38	9	h
water	31:37	0:0	10	h
op	31:40	0:0	8	<
water	31:42	0:0	8	0
stmts	32:16	32:25	7	
return	32:16	32:25	8	-1
op	32:23	0:0	9	-
water	32:24	0:0	9	1
break	33:12	33:17	6	
label	34:8	34:33	6	case SEI_BUFFERING_PERIOD :
if	35:12	36:25	6	(decode_buffering_period (h ) < 0)
cond	35:15	35:44	7	decode_buffering_period (h ) < 0
call	35:15	35:40	8	decode_buffering_period
arg	35:39	35:40	9	h
water	35:39	0:0	10	h
op	35:42	0:0	8	<
water	35:44	0:0	8	0
stmts	36:16	36:25	7	
return	36:16	36:25	8	-1
op	36:23	0:0	9	-
water	36:24	0:0	9	1
break	37:12	37:17	6	
label	38:8	38:15	6	default :
call	39:12	39:36	6	skip_bits
arg	39:22	39:28	7	&s->gb
op	39:22	0:0	8	&
water	39:23	0:0	8	s
op	39:24	0:0	8	->
water	39:26	0:0	8	gb
arg	39:30	39:36	7	8*size
water	39:30	0:0	8	8
op	39:31	0:0	8	*
water	39:32	0:0	8	size
water	39:37	0:0	6	;
water	40:8	0:0	6	}
call	43:8	43:29	4	align_get_bits
arg	43:23	43:29	5	&s->gb
op	43:23	0:0	6	&
water	43:24	0:0	6	s
op	43:25	0:0	6	->
water	43:27	0:0	6	gb
water	43:30	0:0	4	;
water	44:4	0:0	4	}
return	46:4	46:12	2	0
water	46:11	0:0	3	0
