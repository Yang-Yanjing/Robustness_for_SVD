func	1:0	183:0	0	static int	vmd_decode
params	1:21	0:0	1	
param	1:22	1:40	2	VmdVideoContext *	s
param	1:42	1:56	2	AVFrame *	frame
stmnts	0:0	182:12	1	
decl	3:4	3:9	2	int	i
decl	4:4	4:27	2	unsigned int	*palette32
decl	5:4	5:25	2	unsigned char	r
water	5:19	0:0	2	,
decl	5:4	5:25	2	unsigned char	g
water	5:22	0:0	2	,
decl	5:4	5:25	2	unsigned char	b
decl	7:4	7:21	2	GetByteContext	gb
decl	9:4	9:22	2	unsigned char	meth
decl	10:4	10:21	2	unsigned char	*dp
decl	11:4	11:21	2	unsigned char	*pp
decl	12:4	12:21	2	unsigned char	len
decl	13:4	13:11	2	int	ofs
decl	15:4	15:24	2	int	frame_x
water	15:15	0:0	2	,
decl	15:4	15:24	2	int	frame_y
decl	16:4	16:33	2	int	frame_width
water	16:19	0:0	2	,
decl	16:4	16:33	2	int	frame_height
water	18:4	0:0	2	frame_x
op	18:12	0:0	2	=
call	18:14	18:32	2	AV_RL16
arg	18:22	18:32	3	&s->buf[6]
op	18:22	0:0	4	&
water	18:23	0:0	4	s
op	18:24	0:0	4	->
water	18:26	0:0	4	buf
op	18:29	0:0	4	[
water	18:30	0:0	4	6
op	18:31	0:0	4	]
water	18:33	0:0	2	;
water	19:4	0:0	2	frame_y
op	19:12	0:0	2	=
call	19:14	19:32	2	AV_RL16
arg	19:22	19:32	3	&s->buf[8]
op	19:22	0:0	4	&
water	19:23	0:0	4	s
op	19:24	0:0	4	->
water	19:26	0:0	4	buf
op	19:29	0:0	4	[
water	19:30	0:0	4	8
op	19:31	0:0	4	]
water	19:33	0:0	2	;
water	20:4	0:0	2	frame_width
op	20:16	0:0	2	=
call	20:18	20:37	2	AV_RL16
arg	20:26	20:37	3	&s->buf[10]
op	20:26	0:0	4	&
water	20:27	0:0	4	s
op	20:28	0:0	4	->
water	20:30	0:0	4	buf
op	20:33	0:0	4	[
water	20:34	0:0	4	10
op	20:36	0:0	4	]
op	20:39	0:0	2	-
water	20:41	0:0	2	frame_x
op	20:49	0:0	2	+
water	20:51	0:0	2	1
water	20:52	0:0	2	;
water	21:4	0:0	2	frame_height
op	21:17	0:0	2	=
call	21:19	21:38	2	AV_RL16
arg	21:27	21:38	3	&s->buf[12]
op	21:27	0:0	4	&
water	21:28	0:0	4	s
op	21:29	0:0	4	->
water	21:31	0:0	4	buf
op	21:34	0:0	4	[
water	21:35	0:0	4	12
op	21:37	0:0	4	]
op	21:40	0:0	2	-
water	21:42	0:0	2	frame_y
op	21:50	0:0	2	+
water	21:52	0:0	2	1
water	21:53	0:0	2	;
if	23:4	28:4	2	(( frame_width == s -> avctx -> width && frame_height == s -> avctx -> height ) && ( frame_x || frame_y ))
cond	23:8	24:27	3	( frame_width == s -> avctx -> width && frame_height == s -> avctx -> height ) && ( frame_x || frame_y )
water	23:8	0:0	4	(
water	23:9	0:0	4	frame_width
op	23:21	0:0	4	==
water	23:24	0:0	4	s
op	23:25	0:0	4	->
water	23:27	0:0	4	avctx
op	23:32	0:0	4	->
water	23:34	0:0	4	width
op	23:40	0:0	4	&&
water	23:43	0:0	4	frame_height
op	23:56	0:0	4	==
water	23:59	0:0	4	s
op	23:60	0:0	4	->
water	23:62	0:0	4	avctx
op	23:67	0:0	4	->
water	23:69	0:0	4	height
water	23:75	0:0	4	)
op	23:77	0:0	4	&&
water	24:8	0:0	4	(
water	24:9	0:0	4	frame_x
op	24:17	0:0	4	||
water	24:20	0:0	4	frame_y
water	24:27	0:0	4	)
stmts	24:30	28:4	3	
water	24:30	0:0	4	{
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	x_off
op	26:17	0:0	4	=
water	26:19	0:0	4	frame_x
water	26:26	0:0	4	;
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	y_off
op	27:17	0:0	4	=
water	27:19	0:0	4	frame_y
water	27:26	0:0	4	;
water	28:4	0:0	4	}
water	29:4	0:0	2	frame_x
op	29:12	0:0	2	-=
water	29:15	0:0	2	s
op	29:16	0:0	2	->
water	29:18	0:0	2	x_off
water	29:23	0:0	2	;
water	30:4	0:0	2	frame_y
op	30:12	0:0	2	-=
water	30:15	0:0	2	s
op	30:16	0:0	2	->
water	30:18	0:0	2	y_off
water	30:23	0:0	2	;
if	32:4	40:4	2	(frame_x < 0 || frame_width < 0 || frame_x >= s -> avctx -> width || frame_width > s -> avctx -> width || frame_x + frame_width > s -> avctx -> width)
cond	32:8	35:42	3	frame_x < 0 || frame_width < 0 || frame_x >= s -> avctx -> width || frame_width > s -> avctx -> width || frame_x + frame_width > s -> avctx -> width
water	32:8	0:0	4	frame_x
op	32:16	0:0	4	<
water	32:18	0:0	4	0
op	32:20	0:0	4	||
water	32:23	0:0	4	frame_width
op	32:35	0:0	4	<
water	32:37	0:0	4	0
op	32:39	0:0	4	||
water	33:8	0:0	4	frame_x
op	33:16	0:0	4	>=
water	33:19	0:0	4	s
op	33:20	0:0	4	->
water	33:22	0:0	4	avctx
op	33:27	0:0	4	->
water	33:29	0:0	4	width
op	33:35	0:0	4	||
water	34:8	0:0	4	frame_width
op	34:20	0:0	4	>
water	34:22	0:0	4	s
op	34:23	0:0	4	->
water	34:25	0:0	4	avctx
op	34:30	0:0	4	->
water	34:32	0:0	4	width
op	34:38	0:0	4	||
water	35:8	0:0	4	frame_x
op	35:16	0:0	4	+
water	35:18	0:0	4	frame_width
op	35:30	0:0	4	>
water	35:32	0:0	4	s
op	35:33	0:0	4	->
water	35:35	0:0	4	avctx
op	35:40	0:0	4	->
water	35:42	0:0	4	width
stmts	35:49	40:4	3	
water	35:49	0:0	4	{
call	36:8	38:35	4	av_log
arg	36:15	36:23	5	s->avctx
water	36:15	0:0	6	s
op	36:16	0:0	6	->
water	36:18	0:0	6	avctx
arg	36:25	36:37	5	AV_LOG_ERROR
water	36:25	0:0	6	AV_LOG_ERROR
arg	37:15	37:49	5	"Invalid horizontal range %d-%d\n"
water	37:15	0:0	6	"Invalid horizontal range %d-%d\n"
arg	38:15	38:22	5	frame_x
water	38:15	0:0	6	frame_x
arg	38:24	38:35	5	frame_width
water	38:24	0:0	6	frame_width
water	38:36	0:0	4	;
return	39:8	39:34	4	AVERROR_INVALIDDATA
water	39:15	0:0	5	AVERROR_INVALIDDATA
water	40:4	0:0	4	}
if	41:4	49:4	2	(frame_y < 0 || frame_height < 0 || frame_y >= s -> avctx -> height || frame_height > s -> avctx -> height || frame_y + frame_height > s -> avctx -> height)
cond	41:8	44:43	3	frame_y < 0 || frame_height < 0 || frame_y >= s -> avctx -> height || frame_height > s -> avctx -> height || frame_y + frame_height > s -> avctx -> height
water	41:8	0:0	4	frame_y
op	41:16	0:0	4	<
water	41:18	0:0	4	0
op	41:20	0:0	4	||
water	41:23	0:0	4	frame_height
op	41:36	0:0	4	<
water	41:38	0:0	4	0
op	41:40	0:0	4	||
water	42:8	0:0	4	frame_y
op	42:16	0:0	4	>=
water	42:19	0:0	4	s
op	42:20	0:0	4	->
water	42:22	0:0	4	avctx
op	42:27	0:0	4	->
water	42:29	0:0	4	height
op	42:36	0:0	4	||
water	43:8	0:0	4	frame_height
op	43:21	0:0	4	>
water	43:23	0:0	4	s
op	43:24	0:0	4	->
water	43:26	0:0	4	avctx
op	43:31	0:0	4	->
water	43:33	0:0	4	height
op	43:40	0:0	4	||
water	44:8	0:0	4	frame_y
op	44:16	0:0	4	+
water	44:18	0:0	4	frame_height
op	44:31	0:0	4	>
water	44:33	0:0	4	s
op	44:34	0:0	4	->
water	44:36	0:0	4	avctx
op	44:41	0:0	4	->
water	44:43	0:0	4	height
stmts	44:51	49:4	3	
water	44:51	0:0	4	{
call	45:8	47:35	4	av_log
arg	45:15	45:23	5	s->avctx
water	45:15	0:0	6	s
op	45:16	0:0	6	->
water	45:18	0:0	6	avctx
arg	45:25	45:37	5	AV_LOG_ERROR
water	45:25	0:0	6	AV_LOG_ERROR
arg	46:15	46:47	5	"Invalid vertical range %d-%d\n"
water	46:15	0:0	6	"Invalid vertical range %d-%d\n"
arg	47:15	47:22	5	frame_x
water	47:15	0:0	6	frame_x
arg	47:24	47:35	5	frame_width
water	47:24	0:0	6	frame_width
water	47:36	0:0	4	;
return	48:8	48:34	4	AVERROR_INVALIDDATA
water	48:15	0:0	5	AVERROR_INVALIDDATA
water	49:4	0:0	4	}
if	53:4	59:4	2	(s -> prev_frame -> data [ 0 ] && ( frame_x || frame_y || ( frame_width != s -> avctx -> width ) || ( frame_height != s -> avctx -> height ) ))
cond	53:8	55:42	3	s -> prev_frame -> data [ 0 ] && ( frame_x || frame_y || ( frame_width != s -> avctx -> width ) || ( frame_height != s -> avctx -> height ) )
water	53:8	0:0	4	s
op	53:9	0:0	4	->
water	53:11	0:0	4	prev_frame
op	53:21	0:0	4	->
water	53:23	0:0	4	data
op	53:27	0:0	4	[
water	53:28	0:0	4	0
op	53:29	0:0	4	]
op	53:31	0:0	4	&&
water	54:8	0:0	4	(
water	54:9	0:0	4	frame_x
op	54:17	0:0	4	||
water	54:20	0:0	4	frame_y
op	54:28	0:0	4	||
water	54:31	0:0	4	(
water	54:32	0:0	4	frame_width
op	54:44	0:0	4	!=
water	54:47	0:0	4	s
op	54:48	0:0	4	->
water	54:50	0:0	4	avctx
op	54:55	0:0	4	->
water	54:57	0:0	4	width
water	54:62	0:0	4	)
op	54:64	0:0	4	||
water	55:8	0:0	4	(
water	55:9	0:0	4	frame_height
op	55:22	0:0	4	!=
water	55:25	0:0	4	s
op	55:26	0:0	4	->
water	55:28	0:0	4	avctx
op	55:33	0:0	4	->
water	55:35	0:0	4	height
water	55:41	0:0	4	)
water	55:42	0:0	4	)
stmts	55:45	59:4	3	
water	55:45	0:0	4	{
call	57:8	58:49	4	memcpy
arg	57:15	57:29	5	frame->data[0]
water	57:15	0:0	6	frame
op	57:20	0:0	6	->
water	57:22	0:0	6	data
op	57:26	0:0	6	[
water	57:27	0:0	6	0
op	57:28	0:0	6	]
arg	57:31	57:53	5	s->prev_frame->data[0]
water	57:31	0:0	6	s
op	57:32	0:0	6	->
water	57:34	0:0	6	prev_frame
op	57:44	0:0	6	->
water	57:46	0:0	6	data
op	57:50	0:0	6	[
water	57:51	0:0	6	0
op	57:52	0:0	6	]
arg	58:12	58:49	5	s->avctx->height*frame->linesize[0]
water	58:12	0:0	6	s
op	58:13	0:0	6	->
water	58:15	0:0	6	avctx
op	58:20	0:0	6	->
water	58:22	0:0	6	height
op	58:29	0:0	6	*
water	58:31	0:0	6	frame
op	58:36	0:0	6	->
water	58:38	0:0	6	linesize
op	58:46	0:0	6	[
water	58:47	0:0	6	0
op	58:48	0:0	6	]
water	58:50	0:0	4	;
water	59:4	0:0	4	}
call	62:4	62:51	2	bytestream2_init
arg	62:21	62:24	3	&gb
op	62:21	0:0	4	&
water	62:22	0:0	4	gb
arg	62:26	62:37	3	s->buf+16
water	62:26	0:0	4	s
op	62:27	0:0	4	->
water	62:29	0:0	4	buf
op	62:33	0:0	4	+
water	62:35	0:0	4	16
arg	62:39	62:51	3	s->size-16
water	62:39	0:0	4	s
op	62:40	0:0	4	->
water	62:42	0:0	4	size
op	62:47	0:0	4	-
water	62:49	0:0	4	16
water	62:52	0:0	2	;
if	63:4	78:4	2	(s -> buf [ 15 ] & 0 x02)
cond	63:8	63:22	3	s -> buf [ 15 ] & 0 x02
water	63:8	0:0	4	s
op	63:9	0:0	4	->
water	63:11	0:0	4	buf
op	63:14	0:0	4	[
water	63:15	0:0	4	15
op	63:17	0:0	4	]
op	63:19	0:0	4	&
water	63:21	0:0	4	0
water	63:22	0:0	4	x02
stmts	63:27	78:4	3	
water	63:27	0:0	4	{
call	64:8	64:31	4	bytestream2_skip
arg	64:25	64:28	5	&gb
op	64:25	0:0	6	&
water	64:26	0:0	6	gb
arg	64:30	64:31	5	2
water	64:30	0:0	6	2
water	64:32	0:0	4	;
water	65:8	0:0	4	palette32
op	65:18	0:0	4	=
water	65:20	0:0	4	(
water	65:21	0:0	4	unsigned
water	65:30	0:0	4	int
op	65:34	0:0	4	*
water	65:35	0:0	4	)
water	65:36	0:0	4	s
op	65:37	0:0	4	->
water	65:39	0:0	4	palette
water	65:46	0:0	4	;
if	66:8	74:8	4	(bytestream2_get_bytes_left (& gb ) >= PALETTE_COUNT * 3)
cond	66:12	66:63	5	bytestream2_get_bytes_left (& gb ) >= PALETTE_COUNT * 3
call	66:12	66:42	6	bytestream2_get_bytes_left
arg	66:39	66:42	7	&gb
op	66:39	0:0	8	&
water	66:40	0:0	8	gb
op	66:44	0:0	6	>=
water	66:47	0:0	6	PALETTE_COUNT
op	66:61	0:0	6	*
water	66:63	0:0	6	3
stmts	66:66	74:8	5	
water	66:66	0:0	6	{
for	67:12	73:12	6	(i = 0 ;i < PALETTE_COUNT;i ++)
forinit	67:17	67:22	7	i = 0 ;
water	67:17	0:0	8	i
op	67:19	0:0	8	=
water	67:21	0:0	8	0
water	67:22	0:0	8	;
cond	67:24	67:28	7	i < PALETTE_COUNT
water	67:24	0:0	8	i
op	67:26	0:0	8	<
water	67:28	0:0	8	PALETTE_COUNT
forexpr	67:43	67:44	7	i ++
water	67:43	0:0	8	i
op	67:44	0:0	8	++
stmts	67:48	73:12	7	
water	67:48	0:0	8	{
water	68:16	0:0	8	r
op	68:18	0:0	8	=
call	68:20	68:45	8	bytestream2_get_byteu
arg	68:42	68:45	9	&gb
op	68:42	0:0	10	&
water	68:43	0:0	10	gb
op	68:47	0:0	8	*
water	68:49	0:0	8	4
water	68:50	0:0	8	;
water	69:16	0:0	8	g
op	69:18	0:0	8	=
call	69:20	69:45	8	bytestream2_get_byteu
arg	69:42	69:45	9	&gb
op	69:42	0:0	10	&
water	69:43	0:0	10	gb
op	69:47	0:0	8	*
water	69:49	0:0	8	4
water	69:50	0:0	8	;
water	70:16	0:0	8	b
op	70:18	0:0	8	=
call	70:20	70:45	8	bytestream2_get_byteu
arg	70:42	70:45	9	&gb
op	70:42	0:0	10	&
water	70:43	0:0	10	gb
op	70:47	0:0	8	*
water	70:49	0:0	8	4
water	70:50	0:0	8	;
water	71:16	0:0	8	palette32
op	71:25	0:0	8	[
water	71:26	0:0	8	i
op	71:27	0:0	8	]
op	71:29	0:0	8	=
water	71:31	0:0	8	0
water	71:32	0:0	8	xFFU
op	71:37	0:0	8	<<
water	71:40	0:0	8	24
op	71:43	0:0	8	|
water	71:45	0:0	8	(
water	71:46	0:0	8	r
op	71:48	0:0	8	<<
water	71:51	0:0	8	16
water	71:53	0:0	8	)
op	71:55	0:0	8	|
water	71:57	0:0	8	(
water	71:58	0:0	8	g
op	71:60	0:0	8	<<
water	71:63	0:0	8	8
water	71:64	0:0	8	)
op	71:66	0:0	8	|
water	71:68	0:0	8	(
water	71:69	0:0	8	b
water	71:70	0:0	8	)
water	71:71	0:0	8	;
water	72:16	0:0	8	palette32
op	72:25	0:0	8	[
water	72:26	0:0	8	i
op	72:27	0:0	8	]
op	72:29	0:0	8	|=
water	72:32	0:0	8	palette32
op	72:41	0:0	8	[
water	72:42	0:0	8	i
op	72:43	0:0	8	]
op	72:45	0:0	8	>>
water	72:48	0:0	8	6
op	72:50	0:0	8	&
water	72:52	0:0	8	0
water	72:53	0:0	8	x30303
water	72:59	0:0	8	;
water	73:12	0:0	8	}
water	74:8	0:0	6	}
else	74:10	77:8	4
stmts	74:15	77:8	5	
water	74:15	0:0	6	{
call	75:12	75:65	6	av_log
arg	75:19	75:27	7	s->avctx
water	75:19	0:0	8	s
op	75:20	0:0	8	->
water	75:22	0:0	8	avctx
arg	75:29	75:41	7	AV_LOG_ERROR
water	75:29	0:0	8	AV_LOG_ERROR
arg	75:43	75:65	7	"Incomplete palette\n"
water	75:43	0:0	8	"Incomplete palette\n"
water	75:66	0:0	6	;
return	76:12	76:38	6	AVERROR_INVALIDDATA
water	76:19	0:0	7	AVERROR_INVALIDDATA
water	77:8	0:0	6	}
water	78:4	0:0	4	}
if	80:4	81:16	2	(! s -> size)
cond	80:8	80:12	3	! s -> size
op	80:8	0:0	4	!
water	80:9	0:0	4	s
op	80:10	0:0	4	->
water	80:12	0:0	4	size
stmts	81:8	81:16	3	
return	81:8	81:16	4	0
water	81:15	0:0	5	0
if	84:4	85:34	2	(bytestream2_get_bytes_left (& gb ) < 1)
cond	84:8	84:42	3	bytestream2_get_bytes_left (& gb ) < 1
call	84:8	84:38	4	bytestream2_get_bytes_left
arg	84:35	84:38	5	&gb
op	84:35	0:0	6	&
water	84:36	0:0	6	gb
op	84:40	0:0	4	<
water	84:42	0:0	4	1
stmts	85:8	85:34	3	
return	85:8	85:34	4	AVERROR_INVALIDDATA
water	85:15	0:0	5	AVERROR_INVALIDDATA
water	86:4	0:0	2	meth
op	86:9	0:0	2	=
call	86:11	86:36	2	bytestream2_get_byteu
arg	86:33	86:36	3	&gb
op	86:33	0:0	4	&
water	86:34	0:0	4	gb
water	86:37	0:0	2	;
if	87:4	100:4	2	(meth & 0 x80)
cond	87:8	87:16	3	meth & 0 x80
water	87:8	0:0	4	meth
op	87:13	0:0	4	&
water	87:15	0:0	4	0
water	87:16	0:0	4	x80
stmts	87:21	100:4	3	
water	87:21	0:0	4	{
decl	88:8	88:16	4	int	size
if	89:8	93:8	4	(! s -> unpack_buffer_size)
cond	89:12	89:16	5	! s -> unpack_buffer_size
op	89:12	0:0	6	!
water	89:13	0:0	6	s
op	89:14	0:0	6	->
water	89:16	0:0	6	unpack_buffer_size
stmts	89:36	93:8	5	
water	89:36	0:0	6	{
call	90:12	91:77	6	av_log
arg	90:19	90:27	7	s->avctx
water	90:19	0:0	8	s
op	90:20	0:0	8	->
water	90:22	0:0	8	avctx
arg	90:29	90:41	7	AV_LOG_ERROR
water	90:29	0:0	8	AV_LOG_ERROR
arg	91:19	91:77	7	"Trying to unpack LZ-compressed frame with no LZ buffer\n"
water	91:19	0:0	8	"Trying to unpack LZ-compressed frame with no LZ buffer\n"
water	91:78	0:0	6	;
return	92:12	92:38	6	AVERROR_INVALIDDATA
water	92:19	0:0	7	AVERROR_INVALIDDATA
water	93:8	0:0	6	}
water	94:8	0:0	4	size
op	94:13	0:0	4	=
call	94:15	95:64	4	lz_unpack
arg	94:25	94:34	5	gb.buffer
water	94:25	0:0	6	gb
op	94:27	0:0	6	.
water	94:28	0:0	6	buffer
arg	94:36	94:67	5	bytestream2_get_bytes_left(&gb)
call	94:36	94:66	6	bytestream2_get_bytes_left
arg	94:63	94:66	7	&gb
op	94:63	0:0	8	&
water	94:64	0:0	8	gb
arg	95:25	95:41	5	s->unpack_buffer
water	95:25	0:0	6	s
op	95:26	0:0	6	->
water	95:28	0:0	6	unpack_buffer
arg	95:43	95:64	5	s->unpack_buffer_size
water	95:43	0:0	6	s
op	95:44	0:0	6	->
water	95:46	0:0	6	unpack_buffer_size
water	95:65	0:0	4	;
if	96:8	97:23	4	(size < 0)
cond	96:12	96:19	5	size < 0
water	96:12	0:0	6	size
op	96:17	0:0	6	<
water	96:19	0:0	6	0
stmts	97:12	97:23	5	
return	97:12	97:23	6	size
water	97:19	0:0	7	size
water	98:8	0:0	4	meth
op	98:13	0:0	4	&=
water	98:16	0:0	4	0
water	98:17	0:0	4	x7F
water	98:20	0:0	4	;
call	99:8	99:52	4	bytestream2_init
arg	99:25	99:28	5	&gb
op	99:25	0:0	6	&
water	99:26	0:0	6	gb
arg	99:30	99:46	5	s->unpack_buffer
water	99:30	0:0	6	s
op	99:31	0:0	6	->
water	99:33	0:0	6	unpack_buffer
arg	99:48	99:52	5	size
water	99:48	0:0	6	size
water	99:53	0:0	4	;
water	100:4	0:0	4	}
water	102:4	0:0	2	dp
op	102:7	0:0	2	=
op	102:9	0:0	2	&
water	102:10	0:0	2	frame
op	102:15	0:0	2	->
water	102:17	0:0	2	data
op	102:21	0:0	2	[
water	102:22	0:0	2	0
op	102:23	0:0	2	]
op	102:24	0:0	2	[
water	102:25	0:0	2	frame_y
op	102:33	0:0	2	*
water	102:35	0:0	2	frame
op	102:40	0:0	2	->
water	102:42	0:0	2	linesize
op	102:50	0:0	2	[
water	102:51	0:0	2	0
op	102:52	0:0	2	]
op	102:54	0:0	2	+
water	102:56	0:0	2	frame_x
op	102:63	0:0	2	]
water	102:64	0:0	2	;
water	103:4	0:0	2	pp
op	103:7	0:0	2	=
op	103:9	0:0	2	&
water	103:10	0:0	2	s
op	103:11	0:0	2	->
water	103:13	0:0	2	prev_frame
op	103:23	0:0	2	->
water	103:25	0:0	2	data
op	103:29	0:0	2	[
water	103:30	0:0	2	0
op	103:31	0:0	2	]
op	103:32	0:0	2	[
water	103:33	0:0	2	frame_y
op	103:41	0:0	2	*
water	103:43	0:0	2	s
op	103:44	0:0	2	->
water	103:46	0:0	2	prev_frame
op	103:56	0:0	2	->
water	103:58	0:0	2	linesize
op	103:66	0:0	2	[
water	103:67	0:0	2	0
op	103:68	0:0	2	]
op	103:70	0:0	2	+
water	103:72	0:0	2	frame_x
op	103:79	0:0	2	]
water	103:80	0:0	2	;
switch	104:4	181:4	2	(meth)
cond	104:12	104:12	3	meth
water	104:12	0:0	4	meth
stmts	104:18	181:4	3	
water	104:18	0:0	4	{
label	105:4	105:10	4	case 1 :
for	106:8	133:8	4	(i = 0 ;i < frame_height;i ++)
forinit	106:13	106:18	5	i = 0 ;
water	106:13	0:0	6	i
op	106:15	0:0	6	=
water	106:17	0:0	6	0
water	106:18	0:0	6	;
cond	106:20	106:24	5	i < frame_height
water	106:20	0:0	6	i
op	106:22	0:0	6	<
water	106:24	0:0	6	frame_height
forexpr	106:38	106:39	5	i ++
water	106:38	0:0	6	i
op	106:39	0:0	6	++
stmts	106:43	133:8	5	
water	106:43	0:0	6	{
water	107:12	0:0	6	ofs
op	107:16	0:0	6	=
water	107:18	0:0	6	0
water	107:19	0:0	6	;
do	108:12	124:12	6	(ofs < frame_width)
cond	124:21	124:27	7	ofs < frame_width
water	124:21	0:0	8	ofs
op	124:25	0:0	8	<
water	124:27	0:0	8	frame_width
stmts	108:15	124:12	7	
water	108:15	0:0	8	{
water	109:16	0:0	8	len
op	109:20	0:0	8	=
call	109:22	109:46	8	bytestream2_get_byte
arg	109:43	109:46	9	&gb
op	109:43	0:0	10	&
water	109:44	0:0	10	gb
water	109:47	0:0	8	;
if	110:16	117:16	8	(len & 0 x80)
cond	110:20	110:27	9	len & 0 x80
water	110:20	0:0	10	len
op	110:24	0:0	10	&
water	110:26	0:0	10	0
water	110:27	0:0	10	x80
stmts	110:32	117:16	9	
water	110:32	0:0	10	{
water	111:20	0:0	10	len
op	111:24	0:0	10	=
water	111:26	0:0	10	(
water	111:27	0:0	10	len
op	111:31	0:0	10	&
water	111:33	0:0	10	0
water	111:34	0:0	10	x7F
water	111:37	0:0	10	)
op	111:39	0:0	10	+
water	111:41	0:0	10	1
water	111:42	0:0	10	;
if	112:20	114:50	10	(ofs + len > frame_width ||bytestream2_get_bytes_left (& gb ) < len)
cond	112:24	113:58	11	ofs + len > frame_width ||bytestream2_get_bytes_left (& gb ) < len
water	112:24	0:0	12	ofs
op	112:28	0:0	12	+
water	112:30	0:0	12	len
op	112:34	0:0	12	>
water	112:36	0:0	12	frame_width
op	112:48	0:0	12	||
call	113:24	113:54	12	bytestream2_get_bytes_left
arg	113:51	113:54	13	&gb
op	113:51	0:0	14	&
water	113:52	0:0	14	gb
op	113:56	0:0	12	<
water	113:58	0:0	12	len
stmts	114:24	114:50	11	
return	114:24	114:50	12	AVERROR_INVALIDDATA
water	114:31	0:0	13	AVERROR_INVALIDDATA
call	115:20	115:62	10	bytestream2_get_bufferu
arg	115:44	115:47	11	&gb
op	115:44	0:0	12	&
water	115:45	0:0	12	gb
arg	115:49	115:57	11	&dp[ofs]
op	115:49	0:0	12	&
water	115:50	0:0	12	dp
op	115:52	0:0	12	[
water	115:53	0:0	12	ofs
op	115:56	0:0	12	]
arg	115:59	115:62	11	len
water	115:59	0:0	12	len
water	115:63	0:0	10	;
water	116:20	0:0	10	ofs
op	116:24	0:0	10	+=
water	116:27	0:0	10	len
water	116:30	0:0	10	;
water	117:16	0:0	10	}
else	117:18	123:16	8
stmts	117:23	123:16	9	
water	117:23	0:0	10	{
if	119:20	120:50	10	(ofs + len + 1 > frame_width || ! s -> prev_frame -> data [ 0 ])
cond	119:24	119:77	11	ofs + len + 1 > frame_width || ! s -> prev_frame -> data [ 0 ]
water	119:24	0:0	12	ofs
op	119:28	0:0	12	+
water	119:30	0:0	12	len
op	119:34	0:0	12	+
water	119:36	0:0	12	1
op	119:38	0:0	12	>
water	119:40	0:0	12	frame_width
op	119:52	0:0	12	||
op	119:55	0:0	12	!
water	119:56	0:0	12	s
op	119:57	0:0	12	->
water	119:59	0:0	12	prev_frame
op	119:69	0:0	12	->
water	119:71	0:0	12	data
op	119:75	0:0	12	[
water	119:76	0:0	12	0
op	119:77	0:0	12	]
stmts	120:24	120:50	11	
return	120:24	120:50	12	AVERROR_INVALIDDATA
water	120:31	0:0	13	AVERROR_INVALIDDATA
call	121:20	121:54	10	memcpy
arg	121:27	121:35	11	&dp[ofs]
op	121:27	0:0	12	&
water	121:28	0:0	12	dp
op	121:30	0:0	12	[
water	121:31	0:0	12	ofs
op	121:34	0:0	12	]
arg	121:37	121:45	11	&pp[ofs]
op	121:37	0:0	12	&
water	121:38	0:0	12	pp
op	121:40	0:0	12	[
water	121:41	0:0	12	ofs
op	121:44	0:0	12	]
arg	121:47	121:54	11	len+1
water	121:47	0:0	12	len
op	121:51	0:0	12	+
water	121:53	0:0	12	1
water	121:55	0:0	10	;
water	122:20	0:0	10	ofs
op	122:24	0:0	10	+=
water	122:27	0:0	10	len
op	122:31	0:0	10	+
water	122:33	0:0	10	1
water	122:34	0:0	10	;
water	123:16	0:0	10	}
water	124:12	0:0	8	}
water	124:39	0:0	6	;
if	125:12	130:12	6	(ofs > frame_width)
cond	125:16	125:22	7	ofs > frame_width
water	125:16	0:0	8	ofs
op	125:20	0:0	8	>
water	125:22	0:0	8	frame_width
stmts	125:35	130:12	7	
water	125:35	0:0	8	{
call	126:16	128:39	8	av_log
arg	126:23	126:31	9	s->avctx
water	126:23	0:0	10	s
op	126:24	0:0	10	->
water	126:26	0:0	10	avctx
arg	126:33	126:45	9	AV_LOG_ERROR
water	126:33	0:0	10	AV_LOG_ERROR
arg	127:23	127:51	9	"offset > width (%d > %d)\n"
water	127:23	0:0	10	"offset > width (%d > %d)\n"
arg	128:23	128:26	9	ofs
water	128:23	0:0	10	ofs
arg	128:28	128:39	9	frame_width
water	128:28	0:0	10	frame_width
water	128:40	0:0	8	;
return	129:16	129:42	8	AVERROR_INVALIDDATA
water	129:23	0:0	9	AVERROR_INVALIDDATA
water	130:12	0:0	8	}
water	131:12	0:0	6	dp
op	131:15	0:0	6	+=
water	131:18	0:0	6	frame
op	131:23	0:0	6	->
water	131:25	0:0	6	linesize
op	131:33	0:0	6	[
water	131:34	0:0	6	0
op	131:35	0:0	6	]
water	131:36	0:0	6	;
water	132:12	0:0	6	pp
op	132:15	0:0	6	+=
water	132:18	0:0	6	s
op	132:19	0:0	6	->
water	132:21	0:0	6	prev_frame
op	132:31	0:0	6	->
water	132:33	0:0	6	linesize
op	132:41	0:0	6	[
water	132:42	0:0	6	0
op	132:43	0:0	6	]
water	132:44	0:0	6	;
water	133:8	0:0	6	}
break	134:8	134:13	4	
label	136:4	136:10	4	case 2 :
for	137:8	141:8	4	(i = 0 ;i < frame_height;i ++)
forinit	137:13	137:18	5	i = 0 ;
water	137:13	0:0	6	i
op	137:15	0:0	6	=
water	137:17	0:0	6	0
water	137:18	0:0	6	;
cond	137:20	137:24	5	i < frame_height
water	137:20	0:0	6	i
op	137:22	0:0	6	<
water	137:24	0:0	6	frame_height
forexpr	137:38	137:39	5	i ++
water	137:38	0:0	6	i
op	137:39	0:0	6	++
stmts	137:43	141:8	5	
water	137:43	0:0	6	{
call	138:12	138:55	6	bytestream2_get_buffer
arg	138:35	138:38	7	&gb
op	138:35	0:0	8	&
water	138:36	0:0	8	gb
arg	138:40	138:42	7	dp
water	138:40	0:0	8	dp
arg	138:44	138:55	7	frame_width
water	138:44	0:0	8	frame_width
water	138:56	0:0	6	;
water	139:12	0:0	6	dp
op	139:15	0:0	6	+=
water	139:18	0:0	6	frame
op	139:23	0:0	6	->
water	139:25	0:0	6	linesize
op	139:33	0:0	6	[
water	139:34	0:0	6	0
op	139:35	0:0	6	]
water	139:36	0:0	6	;
water	140:12	0:0	6	pp
op	140:15	0:0	6	+=
water	140:18	0:0	6	s
op	140:19	0:0	6	->
water	140:21	0:0	6	prev_frame
op	140:31	0:0	6	->
water	140:33	0:0	6	linesize
op	140:41	0:0	6	[
water	140:42	0:0	6	0
op	140:43	0:0	6	]
water	140:44	0:0	6	;
water	141:8	0:0	6	}
break	142:8	142:13	4	
label	144:4	144:10	4	case 3 :
for	145:8	179:8	4	(i = 0 ;i < frame_height;i ++)
forinit	145:13	145:18	5	i = 0 ;
water	145:13	0:0	6	i
op	145:15	0:0	6	=
water	145:17	0:0	6	0
water	145:18	0:0	6	;
cond	145:20	145:24	5	i < frame_height
water	145:20	0:0	6	i
op	145:22	0:0	6	<
water	145:24	0:0	6	frame_height
forexpr	145:38	145:39	5	i ++
water	145:38	0:0	6	i
op	145:39	0:0	6	++
stmts	145:43	179:8	5	
water	145:43	0:0	6	{
water	146:12	0:0	6	ofs
op	146:16	0:0	6	=
water	146:18	0:0	6	0
water	146:19	0:0	6	;
do	147:12	170:12	6	(ofs < frame_width)
cond	170:21	170:27	7	ofs < frame_width
water	170:21	0:0	8	ofs
op	170:25	0:0	8	<
water	170:27	0:0	8	frame_width
stmts	147:15	170:12	7	
water	147:15	0:0	8	{
water	148:16	0:0	8	len
op	148:20	0:0	8	=
call	148:22	148:46	8	bytestream2_get_byte
arg	148:43	148:46	9	&gb
op	148:43	0:0	10	&
water	148:44	0:0	10	gb
water	148:47	0:0	8	;
if	149:16	163:16	8	(len & 0 x80)
cond	149:20	149:27	9	len & 0 x80
water	149:20	0:0	10	len
op	149:24	0:0	10	&
water	149:26	0:0	10	0
water	149:27	0:0	10	x80
stmts	149:32	163:16	9	
water	149:32	0:0	10	{
water	150:20	0:0	10	len
op	150:24	0:0	10	=
water	150:26	0:0	10	(
water	150:27	0:0	10	len
op	150:31	0:0	10	&
water	150:33	0:0	10	0
water	150:34	0:0	10	x7F
water	150:37	0:0	10	)
op	150:39	0:0	10	+
water	150:41	0:0	10	1
water	150:42	0:0	10	;
if	151:20	159:20	10	(bytestream2_peek_byte (& gb ) == 0 xFF)
cond	151:24	151:55	11	bytestream2_peek_byte (& gb ) == 0 xFF
call	151:24	151:49	12	bytestream2_peek_byte
arg	151:46	151:49	13	&gb
op	151:46	0:0	14	&
water	151:47	0:0	14	gb
op	151:51	0:0	12	==
water	151:54	0:0	12	0
water	151:55	0:0	12	xFF
stmts	151:60	159:20	11	
water	151:60	0:0	12	{
decl	152:24	152:38	12	int	slen
op	152:33	0:0	12	=
water	152:35	0:0	12	len
call	153:24	153:48	12	bytestream2_get_byte
arg	153:45	153:48	13	&gb
op	153:45	0:0	14	&
water	153:46	0:0	14	gb
water	153:49	0:0	12	;
water	154:24	0:0	12	len
op	154:28	0:0	12	=
call	154:30	156:58	12	rle_unpack
arg	154:41	154:50	13	gb.buffer
water	154:41	0:0	14	gb
op	154:43	0:0	14	.
water	154:44	0:0	14	buffer
arg	154:52	154:60	13	&dp[ofs]
op	154:52	0:0	14	&
water	154:53	0:0	14	dp
op	154:55	0:0	14	[
water	154:56	0:0	14	ofs
op	154:59	0:0	14	]
arg	155:41	155:44	13	len
water	155:41	0:0	14	len
arg	155:46	155:77	13	bytestream2_get_bytes_left(&gb)
call	155:46	155:76	14	bytestream2_get_bytes_left
arg	155:73	155:76	15	&gb
op	155:73	0:0	16	&
water	155:74	0:0	16	gb
arg	156:41	156:58	13	frame_width-ofs
water	156:41	0:0	14	frame_width
op	156:53	0:0	14	-
water	156:55	0:0	14	ofs
water	156:59	0:0	12	;
water	157:24	0:0	12	ofs
op	157:28	0:0	12	+=
water	157:31	0:0	12	slen
water	157:35	0:0	12	;
call	158:24	158:49	12	bytestream2_skip
arg	158:41	158:44	13	&gb
op	158:41	0:0	14	&
water	158:42	0:0	14	gb
arg	158:46	158:49	13	len
water	158:46	0:0	14	len
water	158:50	0:0	12	;
water	159:20	0:0	12	}
else	159:22	162:20	10
stmts	159:27	162:20	11	
water	159:27	0:0	12	{
call	160:24	160:65	12	bytestream2_get_buffer
arg	160:47	160:50	13	&gb
op	160:47	0:0	14	&
water	160:48	0:0	14	gb
arg	160:52	160:60	13	&dp[ofs]
op	160:52	0:0	14	&
water	160:53	0:0	14	dp
op	160:55	0:0	14	[
water	160:56	0:0	14	ofs
op	160:59	0:0	14	]
arg	160:62	160:65	13	len
water	160:62	0:0	14	len
water	160:66	0:0	12	;
water	161:24	0:0	12	ofs
op	161:28	0:0	12	+=
water	161:31	0:0	12	len
water	161:34	0:0	12	;
water	162:20	0:0	12	}
water	163:16	0:0	10	}
else	163:18	169:16	8
stmts	163:23	169:16	9	
water	163:23	0:0	10	{
if	165:20	166:50	10	(ofs + len + 1 > frame_width || ! s -> prev_frame -> data [ 0 ])
cond	165:24	165:77	11	ofs + len + 1 > frame_width || ! s -> prev_frame -> data [ 0 ]
water	165:24	0:0	12	ofs
op	165:28	0:0	12	+
water	165:30	0:0	12	len
op	165:34	0:0	12	+
water	165:36	0:0	12	1
op	165:38	0:0	12	>
water	165:40	0:0	12	frame_width
op	165:52	0:0	12	||
op	165:55	0:0	12	!
water	165:56	0:0	12	s
op	165:57	0:0	12	->
water	165:59	0:0	12	prev_frame
op	165:69	0:0	12	->
water	165:71	0:0	12	data
op	165:75	0:0	12	[
water	165:76	0:0	12	0
op	165:77	0:0	12	]
stmts	166:24	166:50	11	
return	166:24	166:50	12	AVERROR_INVALIDDATA
water	166:31	0:0	13	AVERROR_INVALIDDATA
call	167:20	167:54	10	memcpy
arg	167:27	167:35	11	&dp[ofs]
op	167:27	0:0	12	&
water	167:28	0:0	12	dp
op	167:30	0:0	12	[
water	167:31	0:0	12	ofs
op	167:34	0:0	12	]
arg	167:37	167:45	11	&pp[ofs]
op	167:37	0:0	12	&
water	167:38	0:0	12	pp
op	167:40	0:0	12	[
water	167:41	0:0	12	ofs
op	167:44	0:0	12	]
arg	167:47	167:54	11	len+1
water	167:47	0:0	12	len
op	167:51	0:0	12	+
water	167:53	0:0	12	1
water	167:55	0:0	10	;
water	168:20	0:0	10	ofs
op	168:24	0:0	10	+=
water	168:27	0:0	10	len
op	168:31	0:0	10	+
water	168:33	0:0	10	1
water	168:34	0:0	10	;
water	169:16	0:0	10	}
water	170:12	0:0	8	}
water	170:39	0:0	6	;
if	171:12	176:12	6	(ofs > frame_width)
cond	171:16	171:22	7	ofs > frame_width
water	171:16	0:0	8	ofs
op	171:20	0:0	8	>
water	171:22	0:0	8	frame_width
stmts	171:35	176:12	7	
water	171:35	0:0	8	{
call	172:16	174:39	8	av_log
arg	172:23	172:31	9	s->avctx
water	172:23	0:0	10	s
op	172:24	0:0	10	->
water	172:26	0:0	10	avctx
arg	172:33	172:45	9	AV_LOG_ERROR
water	172:33	0:0	10	AV_LOG_ERROR
arg	173:23	173:51	9	"offset > width (%d > %d)\n"
water	173:23	0:0	10	"offset > width (%d > %d)\n"
arg	174:23	174:26	9	ofs
water	174:23	0:0	10	ofs
arg	174:28	174:39	9	frame_width
water	174:28	0:0	10	frame_width
water	174:40	0:0	8	;
return	175:16	175:42	8	AVERROR_INVALIDDATA
water	175:23	0:0	9	AVERROR_INVALIDDATA
water	176:12	0:0	8	}
water	177:12	0:0	6	dp
op	177:15	0:0	6	+=
water	177:18	0:0	6	frame
op	177:23	0:0	6	->
water	177:25	0:0	6	linesize
op	177:33	0:0	6	[
water	177:34	0:0	6	0
op	177:35	0:0	6	]
water	177:36	0:0	6	;
water	178:12	0:0	6	pp
op	178:15	0:0	6	+=
water	178:18	0:0	6	s
op	178:19	0:0	6	->
water	178:21	0:0	6	prev_frame
op	178:31	0:0	6	->
water	178:33	0:0	6	linesize
op	178:41	0:0	6	[
water	178:42	0:0	6	0
op	178:43	0:0	6	]
water	178:44	0:0	6	;
water	179:8	0:0	6	}
break	180:8	180:13	4	
water	181:4	0:0	4	}
return	182:4	182:12	2	0
water	182:11	0:0	3	0
