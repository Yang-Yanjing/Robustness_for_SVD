func	2:0	53:0	0	static int	vp3_update_thread_context
params	2:36	0:0	1	
param	2:37	2:56	2	AVCodecContext *	dst
param	2:58	2:83	2	const AVCodecContext *	src
stmnts	0:0	52:12	1	
decl	4:4	4:62	2	Vp3DecodeContext	*s
op	4:24	0:0	2	=
water	4:26	0:0	2	dst
op	4:29	0:0	2	->
water	4:31	0:0	2	priv_data
water	4:40	0:0	2	,
decl	4:4	4:62	2	Vp3DecodeContext	*s1
op	4:46	0:0	2	=
water	4:48	0:0	2	src
op	4:51	0:0	2	->
water	4:53	0:0	2	priv_data
decl	5:4	5:31	2	int	qps_changed
op	5:20	0:0	2	=
water	5:22	0:0	2	0
water	5:23	0:0	2	,
decl	5:4	5:31	2	int	i
water	5:26	0:0	2	,
decl	5:4	5:31	2	int	err
if	9:4	15:4	2	(! s1 -> current_frame . data [ 0 ] || s -> width != s1 -> width || s -> height != s1 -> height)
cond	9:8	11:26	3	! s1 -> current_frame . data [ 0 ] || s -> width != s1 -> width || s -> height != s1 -> height
op	9:8	0:0	4	!
water	9:9	0:0	4	s1
op	9:11	0:0	4	->
water	9:13	0:0	4	current_frame
op	9:26	0:0	4	.
water	9:27	0:0	4	data
op	9:31	0:0	4	[
water	9:32	0:0	4	0
op	9:33	0:0	4	]
op	10:8	0:0	4	||
water	10:10	0:0	4	s
op	10:11	0:0	4	->
water	10:13	0:0	4	width
op	10:19	0:0	4	!=
water	10:22	0:0	4	s1
op	10:24	0:0	4	->
water	10:26	0:0	4	width
op	11:8	0:0	4	||
water	11:10	0:0	4	s
op	11:11	0:0	4	->
water	11:13	0:0	4	height
op	11:19	0:0	4	!=
water	11:22	0:0	4	s1
op	11:24	0:0	4	->
water	11:26	0:0	4	height
stmts	11:34	15:4	3	
water	11:34	0:0	4	{
if	12:8	13:59	4	(s != s1)
cond	12:12	12:17	5	s != s1
water	12:12	0:0	6	s
op	12:14	0:0	6	!=
water	12:17	0:0	6	s1
stmts	13:12	13:59	5	
call	13:12	13:58	6	copy_fields
arg	13:24	13:25	7	s
water	13:24	0:0	8	s
arg	13:27	13:29	7	s1
water	13:27	0:0	8	s1
arg	13:31	13:43	7	golden_frame
water	13:31	0:0	8	golden_frame
arg	13:45	13:58	7	current_frame
water	13:45	0:0	8	current_frame
water	13:59	0:0	6	;
return	14:8	14:17	4	-1
op	14:15	0:0	5	-
water	14:16	0:0	5	1
water	15:4	0:0	4	}
if	17:4	48:4	2	(s != s1)
cond	17:8	17:13	3	s != s1
water	17:8	0:0	4	s
op	17:10	0:0	4	!=
water	17:13	0:0	4	s1
stmts	17:17	48:4	3	
water	17:17	0:0	4	{
if	19:8	29:8	4	(! s -> current_frame . data [ 0 ])
cond	19:12	19:36	5	! s -> current_frame . data [ 0 ]
op	19:12	0:0	6	!
water	19:13	0:0	6	s
op	19:14	0:0	6	->
water	19:16	0:0	6	current_frame
op	19:29	0:0	6	.
water	19:30	0:0	6	data
op	19:34	0:0	6	[
water	19:35	0:0	6	0
op	19:36	0:0	6	]
stmts	19:39	29:8	5	
water	19:39	0:0	6	{
decl	20:12	20:50	6	int	y_fragment_count
water	20:32	0:0	6	,
decl	20:12	20:50	6	int	c_fragment_count
water	21:12	0:0	6	s
op	21:13	0:0	6	->
water	21:15	0:0	6	avctx
op	21:21	0:0	6	=
water	21:23	0:0	6	dst
water	21:26	0:0	6	;
water	22:12	0:0	6	err
op	22:16	0:0	6	=
call	22:18	22:37	6	allocate_tables
arg	22:34	22:37	7	dst
water	22:34	0:0	8	dst
water	22:38	0:0	6	;
if	23:12	24:26	6	(err)
cond	23:16	23:16	7	err
water	23:16	0:0	8	err
stmts	24:16	24:26	7	
return	24:16	24:26	8	err
water	24:23	0:0	9	err
water	25:12	0:0	6	y_fragment_count
op	25:29	0:0	6	=
water	25:31	0:0	6	s
op	25:32	0:0	6	->
water	25:34	0:0	6	fragment_width
op	25:48	0:0	6	[
water	25:49	0:0	6	0
op	25:50	0:0	6	]
op	25:52	0:0	6	*
water	25:54	0:0	6	s
op	25:55	0:0	6	->
water	25:57	0:0	6	fragment_height
op	25:72	0:0	6	[
water	25:73	0:0	6	0
op	25:74	0:0	6	]
water	25:75	0:0	6	;
water	26:12	0:0	6	c_fragment_count
op	26:29	0:0	6	=
water	26:31	0:0	6	s
op	26:32	0:0	6	->
water	26:34	0:0	6	fragment_width
op	26:48	0:0	6	[
water	26:49	0:0	6	1
op	26:50	0:0	6	]
op	26:52	0:0	6	*
water	26:54	0:0	6	s
op	26:55	0:0	6	->
water	26:57	0:0	6	fragment_height
op	26:72	0:0	6	[
water	26:73	0:0	6	1
op	26:74	0:0	6	]
water	26:75	0:0	6	;
call	27:12	27:100	6	memcpy
arg	27:19	27:35	7	s->motion_val[0]
water	27:19	0:0	8	s
op	27:20	0:0	8	->
water	27:22	0:0	8	motion_val
op	27:32	0:0	8	[
water	27:33	0:0	8	0
op	27:34	0:0	8	]
arg	27:37	27:54	7	s1->motion_val[0]
water	27:37	0:0	8	s1
op	27:39	0:0	8	->
water	27:41	0:0	8	motion_val
op	27:51	0:0	8	[
water	27:52	0:0	8	0
op	27:53	0:0	8	]
arg	27:56	27:100	7	y_fragment_count*sizeof(*s->motion_val[0])
water	27:56	0:0	8	y_fragment_count
op	27:73	0:0	8	*
op	27:75	0:0	8	sizeof
water	27:81	0:0	8	(
op	27:82	0:0	8	*
water	27:83	0:0	8	s
op	27:84	0:0	8	->
water	27:86	0:0	8	motion_val
op	27:96	0:0	8	[
water	27:97	0:0	8	0
op	27:98	0:0	8	]
water	27:99	0:0	8	)
water	27:101	0:0	6	;
call	28:12	28:100	6	memcpy
arg	28:19	28:35	7	s->motion_val[1]
water	28:19	0:0	8	s
op	28:20	0:0	8	->
water	28:22	0:0	8	motion_val
op	28:32	0:0	8	[
water	28:33	0:0	8	1
op	28:34	0:0	8	]
arg	28:37	28:54	7	s1->motion_val[1]
water	28:37	0:0	8	s1
op	28:39	0:0	8	->
water	28:41	0:0	8	motion_val
op	28:51	0:0	8	[
water	28:52	0:0	8	1
op	28:53	0:0	8	]
arg	28:56	28:100	7	c_fragment_count*sizeof(*s->motion_val[1])
water	28:56	0:0	8	c_fragment_count
op	28:73	0:0	8	*
op	28:75	0:0	8	sizeof
water	28:81	0:0	8	(
op	28:82	0:0	8	*
water	28:83	0:0	8	s
op	28:84	0:0	8	->
water	28:86	0:0	8	motion_val
op	28:96	0:0	8	[
water	28:97	0:0	8	1
op	28:98	0:0	8	]
water	28:99	0:0	8	)
water	28:101	0:0	6	;
water	29:8	0:0	6	}
call	32:8	32:44	4	copy_fields
arg	32:20	32:21	5	s
water	32:20	0:0	6	s
arg	32:23	32:25	5	s1
water	32:23	0:0	6	s1
arg	32:27	32:39	5	golden_frame
water	32:27	0:0	6	golden_frame
arg	32:41	32:44	5	dsp
water	32:41	0:0	6	dsp
water	32:45	0:0	4	;
for	35:8	40:8	4	(i = 0 ;i < 3;i ++)
forinit	35:13	35:18	5	i = 0 ;
water	35:13	0:0	6	i
op	35:15	0:0	6	=
water	35:17	0:0	6	0
water	35:18	0:0	6	;
cond	35:20	35:24	5	i < 3
water	35:20	0:0	6	i
op	35:22	0:0	6	<
water	35:24	0:0	6	3
forexpr	35:27	35:28	5	i ++
water	35:27	0:0	6	i
op	35:28	0:0	6	++
stmts	35:32	40:8	5	
water	35:32	0:0	6	{
if	36:12	39:12	6	(s -> qps [ i ] != s1 -> qps [ 1 ])
cond	36:16	36:38	7	s -> qps [ i ] != s1 -> qps [ 1 ]
water	36:16	0:0	8	s
op	36:17	0:0	8	->
water	36:19	0:0	8	qps
op	36:22	0:0	8	[
water	36:23	0:0	8	i
op	36:24	0:0	8	]
op	36:26	0:0	8	!=
water	36:29	0:0	8	s1
op	36:31	0:0	8	->
water	36:33	0:0	8	qps
op	36:36	0:0	8	[
water	36:37	0:0	8	1
op	36:38	0:0	8	]
stmts	36:41	39:12	7	
water	36:41	0:0	8	{
water	37:16	0:0	8	qps_changed
op	37:28	0:0	8	=
water	37:30	0:0	8	1
water	37:31	0:0	8	;
call	38:16	38:68	8	memcpy
arg	38:23	38:34	9	&s->qmat[i]
op	38:23	0:0	10	&
water	38:24	0:0	10	s
op	38:25	0:0	10	->
water	38:27	0:0	10	qmat
op	38:31	0:0	10	[
water	38:32	0:0	10	i
op	38:33	0:0	10	]
arg	38:36	38:48	9	&s1->qmat[i]
op	38:36	0:0	10	&
water	38:37	0:0	10	s1
op	38:39	0:0	10	->
water	38:41	0:0	10	qmat
op	38:45	0:0	10	[
water	38:46	0:0	10	i
op	38:47	0:0	10	]
arg	38:50	38:68	9	sizeof(s->qmat[i])
op	38:50	0:0	10	sizeof
water	38:56	0:0	10	(
water	38:57	0:0	10	s
op	38:58	0:0	10	->
water	38:60	0:0	10	qmat
op	38:64	0:0	10	[
water	38:65	0:0	10	i
op	38:66	0:0	10	]
water	38:67	0:0	10	)
water	38:69	0:0	8	;
water	39:12	0:0	8	}
water	40:8	0:0	6	}
if	42:8	43:107	4	(s -> qps [ 0 ] != s1 -> qps [ 0 ])
cond	42:12	42:34	5	s -> qps [ 0 ] != s1 -> qps [ 0 ]
water	42:12	0:0	6	s
op	42:13	0:0	6	->
water	42:15	0:0	6	qps
op	42:18	0:0	6	[
water	42:19	0:0	6	0
op	42:20	0:0	6	]
op	42:22	0:0	6	!=
water	42:25	0:0	6	s1
op	42:27	0:0	6	->
water	42:29	0:0	6	qps
op	42:32	0:0	6	[
water	42:33	0:0	6	0
op	42:34	0:0	6	]
stmts	43:12	43:107	5	
call	43:12	43:106	6	memcpy
arg	43:19	43:44	7	&s->bounding_values_array
op	43:19	0:0	8	&
water	43:20	0:0	8	s
op	43:21	0:0	8	->
water	43:23	0:0	8	bounding_values_array
arg	43:46	43:72	7	&s1->bounding_values_array
op	43:46	0:0	8	&
water	43:47	0:0	8	s1
op	43:49	0:0	8	->
water	43:51	0:0	8	bounding_values_array
arg	43:74	43:106	7	sizeof(s->bounding_values_array)
op	43:74	0:0	8	sizeof
water	43:80	0:0	8	(
water	43:81	0:0	8	s
op	43:82	0:0	8	->
water	43:84	0:0	8	bounding_values_array
water	43:105	0:0	8	)
water	43:107	0:0	6	;
if	45:8	46:53	4	(qps_changed)
cond	45:12	45:12	5	qps_changed
water	45:12	0:0	6	qps_changed
stmts	46:12	46:53	5	
call	46:12	46:52	6	copy_fields
arg	46:24	46:25	7	s
water	46:24	0:0	8	s
arg	46:27	46:29	7	s1
water	46:27	0:0	8	s1
arg	46:31	46:34	7	qps
water	46:31	0:0	8	qps
arg	46:36	46:52	7	superblock_count
water	46:36	0:0	8	superblock_count
water	46:53	0:0	6	;
water	48:4	0:0	4	}
call	50:4	50:21	2	update_frames
arg	50:18	50:21	3	dst
water	50:18	0:0	4	dst
water	50:22	0:0	2	;
return	52:4	52:12	2	0
water	52:11	0:0	3	0
