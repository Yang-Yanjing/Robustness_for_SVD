func	7:0	125:0	0	static void	qdm2_decode_super_block
params	7:36	0:0	1	
param	7:37	7:51	2	QDM2Context *	q
stmnts	0:0	123:4	1	
decl	9:4	9:20	2	GetBitContext	gb
decl	10:4	10:33	2	QDM2SubPacket	header
water	10:24	0:0	2	,
decl	10:4	10:33	2	QDM2SubPacket	*packet
decl	11:4	11:55	2	int	i
water	11:9	0:0	2	,
decl	11:4	11:55	2	int	packet_bytes
water	11:23	0:0	2	,
decl	11:4	11:55	2	int	sub_packet_size
water	11:40	0:0	2	,
decl	11:4	11:55	2	int	sub_packets_D
decl	12:4	12:31	2	unsigned int	next_index
op	12:28	0:0	2	=
water	12:30	0:0	2	0
call	14:4	14:66	2	memset
arg	14:11	14:32	3	q->tone_level_idx_hi1
water	14:11	0:0	4	q
op	14:12	0:0	4	->
water	14:14	0:0	4	tone_level_idx_hi1
arg	14:34	14:35	3	0
water	14:34	0:0	4	0
arg	14:37	14:66	3	sizeof(q->tone_level_idx_hi1)
op	14:37	0:0	4	sizeof
water	14:43	0:0	4	(
water	14:44	0:0	4	q
op	14:45	0:0	4	->
water	14:47	0:0	4	tone_level_idx_hi1
water	14:65	0:0	4	)
water	14:67	0:0	2	;
call	15:4	15:66	2	memset
arg	15:11	15:32	3	q->tone_level_idx_mid
water	15:11	0:0	4	q
op	15:12	0:0	4	->
water	15:14	0:0	4	tone_level_idx_mid
arg	15:34	15:35	3	0
water	15:34	0:0	4	0
arg	15:37	15:66	3	sizeof(q->tone_level_idx_mid)
op	15:37	0:0	4	sizeof
water	15:43	0:0	4	(
water	15:44	0:0	4	q
op	15:45	0:0	4	->
water	15:47	0:0	4	tone_level_idx_mid
water	15:65	0:0	4	)
water	15:67	0:0	2	;
call	16:4	16:66	2	memset
arg	16:11	16:32	3	q->tone_level_idx_hi2
water	16:11	0:0	4	q
op	16:12	0:0	4	->
water	16:14	0:0	4	tone_level_idx_hi2
arg	16:34	16:35	3	0
water	16:34	0:0	4	0
arg	16:37	16:66	3	sizeof(q->tone_level_idx_hi2)
op	16:37	0:0	4	sizeof
water	16:43	0:0	4	(
water	16:44	0:0	4	q
op	16:45	0:0	4	->
water	16:47	0:0	4	tone_level_idx_hi2
water	16:65	0:0	4	)
water	16:67	0:0	2	;
water	18:4	0:0	2	q
op	18:5	0:0	2	->
water	18:7	0:0	2	sub_packets_B
op	18:21	0:0	2	=
water	18:23	0:0	2	0
water	18:24	0:0	2	;
water	19:4	0:0	2	sub_packets_D
op	19:18	0:0	2	=
water	19:20	0:0	2	0
water	19:21	0:0	2	;
call	21:4	21:30	2	average_quantized_coeffs
arg	21:29	21:30	3	q
water	21:29	0:0	4	q
water	21:31	0:0	2	;
call	23:4	23:63	2	init_get_bits
arg	23:18	23:21	3	&gb
op	23:18	0:0	4	&
water	23:19	0:0	4	gb
arg	23:23	23:41	3	q->compressed_data
water	23:23	0:0	4	q
op	23:24	0:0	4	->
water	23:26	0:0	4	compressed_data
arg	23:43	23:63	3	q->compressed_size*8
water	23:43	0:0	4	q
op	23:44	0:0	4	->
water	23:46	0:0	4	compressed_size
op	23:61	0:0	4	*
water	23:62	0:0	4	8
water	23:64	0:0	2	;
call	24:4	24:46	2	qdm2_decode_sub_packet_header
arg	24:34	24:37	3	&gb
op	24:34	0:0	4	&
water	24:35	0:0	4	gb
arg	24:39	24:46	3	&header
op	24:39	0:0	4	&
water	24:40	0:0	4	header
water	24:47	0:0	2	;
if	26:4	30:4	2	(header . type < 2 || header . type >= 8)
cond	26:8	26:42	3	header . type < 2 || header . type >= 8
water	26:8	0:0	4	header
op	26:14	0:0	4	.
water	26:15	0:0	4	type
op	26:20	0:0	4	<
water	26:22	0:0	4	2
op	26:24	0:0	4	||
water	26:27	0:0	4	header
op	26:33	0:0	4	.
water	26:34	0:0	4	type
op	26:39	0:0	4	>=
water	26:42	0:0	4	8
stmts	26:45	30:4	3	
water	26:45	0:0	4	{
water	27:8	0:0	4	q
op	27:9	0:0	4	->
water	27:11	0:0	4	has_errors
op	27:22	0:0	4	=
water	27:24	0:0	4	1
water	27:25	0:0	4	;
call	28:8	28:56	4	av_log
arg	28:15	28:19	5	NULL
water	28:15	0:0	6	NULL
arg	28:20	28:32	5	AV_LOG_ERROR
water	28:20	0:0	6	AV_LOG_ERROR
arg	28:33	28:56	5	"bad superblock type\n"
water	28:33	0:0	6	"bad superblock type\n"
water	28:57	0:0	4	;
return	29:8	29:14	4	
water	30:4	0:0	4	}
water	32:4	0:0	2	q
op	32:5	0:0	2	->
water	32:7	0:0	2	superblocktype_2_3
op	32:26	0:0	2	=
water	32:28	0:0	2	(
water	32:29	0:0	2	header
op	32:35	0:0	2	.
water	32:36	0:0	2	type
op	32:41	0:0	2	==
water	32:44	0:0	2	2
op	32:46	0:0	2	||
water	32:49	0:0	2	header
op	32:55	0:0	2	.
water	32:56	0:0	2	type
op	32:61	0:0	2	==
water	32:64	0:0	2	3
water	32:65	0:0	2	)
water	32:66	0:0	2	;
water	33:4	0:0	2	packet_bytes
op	33:17	0:0	2	=
water	33:19	0:0	2	(
water	33:20	0:0	2	q
op	33:21	0:0	2	->
water	33:23	0:0	2	compressed_size
op	33:39	0:0	2	-
call	33:41	33:59	2	get_bits_count
arg	33:56	33:59	3	&gb
op	33:56	0:0	4	&
water	33:57	0:0	4	gb
op	33:61	0:0	2	/
water	33:63	0:0	2	8
water	33:64	0:0	2	)
water	33:65	0:0	2	;
call	35:4	35:49	2	init_get_bits
arg	35:18	35:21	3	&gb
op	35:18	0:0	4	&
water	35:19	0:0	4	gb
arg	35:23	35:34	3	header.data
water	35:23	0:0	4	header
op	35:29	0:0	4	.
water	35:30	0:0	4	data
arg	35:36	35:49	3	header.size*8
water	35:36	0:0	4	header
op	35:42	0:0	4	.
water	35:43	0:0	4	size
op	35:47	0:0	4	*
water	35:48	0:0	4	8
water	35:50	0:0	2	;
if	37:4	48:4	2	(header . type == 2 || header . type == 4 || header . type == 5)
cond	37:8	37:63	3	header . type == 2 || header . type == 4 || header . type == 5
water	37:8	0:0	4	header
op	37:14	0:0	4	.
water	37:15	0:0	4	type
op	37:20	0:0	4	==
water	37:23	0:0	4	2
op	37:25	0:0	4	||
water	37:28	0:0	4	header
op	37:34	0:0	4	.
water	37:35	0:0	4	type
op	37:40	0:0	4	==
water	37:43	0:0	4	4
op	37:45	0:0	4	||
water	37:48	0:0	4	header
op	37:54	0:0	4	.
water	37:55	0:0	4	type
op	37:60	0:0	4	==
water	37:63	0:0	4	5
stmts	37:66	48:4	3	
water	37:66	0:0	4	{
decl	38:8	38:42	4	int	csum
op	38:18	0:0	4	=
water	38:20	0:0	4	257
call	38:24	38:41	5	*get_bits
arg	38:35	38:38	6	&gb
op	38:35	0:0	7	&
water	38:36	0:0	7	gb
arg	38:40	38:41	6	8
water	38:40	0:0	7	8
water	39:12	0:0	4	csum
op	39:17	0:0	4	+=
water	39:22	0:0	4	2
call	39:24	39:41	4	*get_bits
arg	39:35	39:38	5	&gb
op	39:35	0:0	6	&
water	39:36	0:0	6	gb
arg	39:40	39:41	5	8
water	39:40	0:0	6	8
water	39:42	0:0	4	;
water	41:8	0:0	4	csum
op	41:13	0:0	4	=
call	41:15	41:78	4	qdm2_packet_checksum
arg	41:36	41:54	5	q->compressed_data
water	41:36	0:0	6	q
op	41:37	0:0	6	->
water	41:39	0:0	6	compressed_data
arg	41:56	41:72	5	q->checksum_size
water	41:56	0:0	6	q
op	41:57	0:0	6	->
water	41:59	0:0	6	checksum_size
arg	41:74	41:78	5	csum
water	41:74	0:0	6	csum
water	41:79	0:0	4	;
if	43:8	47:8	4	(csum != 0)
cond	43:12	43:20	5	csum != 0
water	43:12	0:0	6	csum
op	43:17	0:0	6	!=
water	43:20	0:0	6	0
stmts	43:23	47:8	5	
water	43:23	0:0	6	{
water	44:12	0:0	6	q
op	44:13	0:0	6	->
water	44:15	0:0	6	has_errors
op	44:26	0:0	6	=
water	44:28	0:0	6	1
water	44:29	0:0	6	;
call	45:12	45:60	6	av_log
arg	45:19	45:23	7	NULL
water	45:19	0:0	8	NULL
arg	45:24	45:36	7	AV_LOG_ERROR
water	45:24	0:0	8	AV_LOG_ERROR
arg	45:37	45:60	7	"bad packet checksum\n"
water	45:37	0:0	8	"bad packet checksum\n"
water	45:61	0:0	6	;
return	46:12	46:18	6	
water	47:8	0:0	6	}
water	48:4	0:0	4	}
water	50:4	0:0	2	q
op	50:5	0:0	2	->
water	50:7	0:0	2	sub_packet_list_B
op	50:24	0:0	2	[
water	50:25	0:0	2	0
op	50:26	0:0	2	]
op	50:27	0:0	2	.
water	50:28	0:0	2	packet
op	50:35	0:0	2	=
water	50:37	0:0	2	NULL
water	50:41	0:0	2	;
water	51:4	0:0	2	q
op	51:5	0:0	2	->
water	51:7	0:0	2	sub_packet_list_D
op	51:24	0:0	2	[
water	51:25	0:0	2	0
op	51:26	0:0	2	]
op	51:27	0:0	2	.
water	51:28	0:0	2	packet
op	51:35	0:0	2	=
water	51:37	0:0	2	NULL
water	51:41	0:0	2	;
for	53:4	55:35	2	(i = 0 ;i < 6;i ++)
forinit	53:9	53:14	3	i = 0 ;
water	53:9	0:0	4	i
op	53:11	0:0	4	=
water	53:13	0:0	4	0
water	53:14	0:0	4	;
cond	53:16	53:20	3	i < 6
water	53:16	0:0	4	i
op	53:18	0:0	4	<
water	53:20	0:0	4	6
forexpr	53:23	53:24	3	i ++
water	53:23	0:0	4	i
op	53:24	0:0	4	++
stmts	54:8	55:35	3	
if	54:8	55:35	4	(-- q -> fft_level_exp [ i ] < 0)
cond	54:12	54:36	5	-- q -> fft_level_exp [ i ] < 0
op	54:12	0:0	6	--
water	54:14	0:0	6	q
op	54:15	0:0	6	->
water	54:17	0:0	6	fft_level_exp
op	54:30	0:0	6	[
water	54:31	0:0	6	i
op	54:32	0:0	6	]
op	54:34	0:0	6	<
water	54:36	0:0	6	0
stmts	55:12	55:35	5	
water	55:12	0:0	6	q
op	55:13	0:0	6	->
water	55:15	0:0	6	fft_level_exp
op	55:28	0:0	6	[
water	55:29	0:0	6	i
op	55:30	0:0	6	]
op	55:32	0:0	6	=
water	55:34	0:0	6	0
water	55:35	0:0	6	;
for	57:4	113:4	2	(i = 0 ;packet_bytes > 0;i ++)
forinit	57:9	57:14	3	i = 0 ;
water	57:9	0:0	4	i
op	57:11	0:0	4	=
water	57:13	0:0	4	0
water	57:14	0:0	4	;
cond	57:16	57:31	3	packet_bytes > 0
water	57:16	0:0	4	packet_bytes
op	57:29	0:0	4	>
water	57:31	0:0	4	0
forexpr	57:34	57:35	3	i ++
water	57:34	0:0	4	i
op	57:35	0:0	4	++
stmts	57:39	113:4	3	
water	57:39	0:0	4	{
decl	58:8	58:13	4	int	j
water	60:8	0:0	4	q
op	60:9	0:0	4	->
water	60:11	0:0	4	sub_packet_list_A
op	60:28	0:0	4	[
water	60:29	0:0	4	i
op	60:30	0:0	4	]
op	60:31	0:0	4	.
water	60:32	0:0	4	next
op	60:37	0:0	4	=
water	60:39	0:0	4	NULL
water	60:43	0:0	4	;
if	62:8	71:8	4	(i > 0)
cond	62:12	62:16	5	i > 0
water	62:12	0:0	6	i
op	62:14	0:0	6	>
water	62:16	0:0	6	0
stmts	62:19	71:8	5	
water	62:19	0:0	6	{
water	63:12	0:0	6	q
op	63:13	0:0	6	->
water	63:15	0:0	6	sub_packet_list_A
op	63:32	0:0	6	[
water	63:33	0:0	6	i
op	63:35	0:0	6	-
water	63:37	0:0	6	1
op	63:38	0:0	6	]
op	63:39	0:0	6	.
water	63:40	0:0	6	next
op	63:45	0:0	6	=
op	63:47	0:0	6	&
water	63:48	0:0	6	q
op	63:49	0:0	6	->
water	63:51	0:0	6	sub_packet_list_A
op	63:68	0:0	6	[
water	63:69	0:0	6	i
op	63:70	0:0	6	]
water	63:71	0:0	6	;
call	66:12	66:57	6	init_get_bits
arg	66:26	66:29	7	&gb
op	66:26	0:0	8	&
water	66:27	0:0	8	gb
arg	66:31	66:42	7	header.data
water	66:31	0:0	8	header
op	66:37	0:0	8	.
water	66:38	0:0	8	data
arg	66:44	66:57	7	header.size*8
water	66:44	0:0	8	header
op	66:50	0:0	8	.
water	66:51	0:0	8	size
op	66:55	0:0	8	*
water	66:56	0:0	8	8
water	66:58	0:0	6	;
call	67:12	67:39	6	skip_bits
arg	67:22	67:25	7	&gb
op	67:22	0:0	8	&
water	67:23	0:0	8	gb
arg	67:27	67:39	7	next_index*8
water	67:27	0:0	8	next_index
op	67:37	0:0	8	*
water	67:38	0:0	8	8
water	67:40	0:0	6	;
if	69:12	70:21	6	(next_index >= header . size)
cond	69:16	69:37	7	next_index >= header . size
water	69:16	0:0	8	next_index
op	69:27	0:0	8	>=
water	69:30	0:0	8	header
op	69:36	0:0	8	.
water	69:37	0:0	8	size
stmts	70:16	70:21	7	
break	70:16	70:21	8	
water	71:8	0:0	6	}
water	74:8	0:0	4	packet
op	74:15	0:0	4	=
op	74:17	0:0	4	&
water	74:18	0:0	4	q
op	74:19	0:0	4	->
water	74:21	0:0	4	sub_packets
op	74:32	0:0	4	[
water	74:33	0:0	4	i
op	74:34	0:0	4	]
water	74:35	0:0	4	;
call	75:8	75:49	4	qdm2_decode_sub_packet_header
arg	75:38	75:41	5	&gb
op	75:38	0:0	6	&
water	75:39	0:0	6	gb
arg	75:43	75:49	5	packet
water	75:43	0:0	6	packet
water	75:50	0:0	4	;
water	76:8	0:0	4	next_index
op	76:19	0:0	4	=
water	76:21	0:0	4	packet
op	76:27	0:0	4	->
water	76:29	0:0	4	size
op	76:34	0:0	4	+
call	76:36	76:54	4	get_bits_count
arg	76:51	76:54	5	&gb
op	76:51	0:0	6	&
water	76:52	0:0	6	gb
op	76:56	0:0	4	/
water	76:58	0:0	4	8
water	76:59	0:0	4	;
water	77:8	0:0	4	sub_packet_size
op	77:24	0:0	4	=
water	77:26	0:0	4	(
water	77:27	0:0	4	(
water	77:28	0:0	4	packet
op	77:34	0:0	4	->
water	77:36	0:0	4	size
op	77:41	0:0	4	>
water	77:43	0:0	4	0
water	77:44	0:0	4	xff
water	77:47	0:0	4	)
water	77:49	0:0	4	?
water	77:51	0:0	4	1
water	77:53	0:0	4	:
water	77:55	0:0	4	0
water	77:56	0:0	4	)
op	77:58	0:0	4	+
water	77:60	0:0	4	packet
op	77:66	0:0	4	->
water	77:68	0:0	4	size
op	77:73	0:0	4	+
water	77:75	0:0	4	2
water	77:76	0:0	4	;
if	79:8	80:17	4	(packet -> type == 0)
cond	79:12	79:28	5	packet -> type == 0
water	79:12	0:0	6	packet
op	79:18	0:0	6	->
water	79:20	0:0	6	type
op	79:25	0:0	6	==
water	79:28	0:0	6	0
stmts	80:12	80:17	5	
break	80:12	80:17	6	
if	82:8	86:8	4	(sub_packet_size > packet_bytes)
cond	82:12	82:30	5	sub_packet_size > packet_bytes
water	82:12	0:0	6	sub_packet_size
op	82:28	0:0	6	>
water	82:30	0:0	6	packet_bytes
stmts	82:44	86:8	5	
water	82:44	0:0	6	{
if	83:12	84:21	6	(packet -> type != 10 && packet -> type != 11 && packet -> type != 12)
cond	83:16	83:76	7	packet -> type != 10 && packet -> type != 11 && packet -> type != 12
water	83:16	0:0	8	packet
op	83:22	0:0	8	->
water	83:24	0:0	8	type
op	83:29	0:0	8	!=
water	83:32	0:0	8	10
op	83:35	0:0	8	&&
water	83:38	0:0	8	packet
op	83:44	0:0	8	->
water	83:46	0:0	8	type
op	83:51	0:0	8	!=
water	83:54	0:0	8	11
op	83:57	0:0	8	&&
water	83:60	0:0	8	packet
op	83:66	0:0	8	->
water	83:68	0:0	8	type
op	83:73	0:0	8	!=
water	83:76	0:0	8	12
stmts	84:16	84:21	7	
break	84:16	84:21	8	
water	85:12	0:0	6	packet
op	85:18	0:0	6	->
water	85:20	0:0	6	size
op	85:25	0:0	6	+=
water	85:28	0:0	6	packet_bytes
op	85:41	0:0	6	-
water	85:43	0:0	6	sub_packet_size
water	85:58	0:0	6	;
water	86:8	0:0	6	}
water	88:8	0:0	4	packet_bytes
op	88:21	0:0	4	-=
water	88:24	0:0	4	sub_packet_size
water	88:39	0:0	4	;
water	91:8	0:0	4	q
op	91:9	0:0	4	->
water	91:11	0:0	4	sub_packet_list_A
op	91:28	0:0	4	[
water	91:29	0:0	4	i
op	91:30	0:0	4	]
op	91:31	0:0	4	.
water	91:32	0:0	4	packet
op	91:39	0:0	4	=
water	91:41	0:0	4	packet
water	91:47	0:0	4	;
if	94:8	97:8	4	(packet -> type == 8)
cond	94:12	94:28	5	packet -> type == 8
water	94:12	0:0	6	packet
op	94:18	0:0	6	->
water	94:20	0:0	6	type
op	94:25	0:0	6	==
water	94:28	0:0	6	8
stmts	94:31	97:8	5	
water	94:31	0:0	6	{
call	95:12	95:44	6	SAMPLES_NEEDED_2
arg	95:29	95:44	7	"packet type 8"
water	95:29	0:0	8	"packet type 8"
water	95:45	0:0	6	;
return	96:12	96:18	6	
water	97:8	0:0	6	}
else	97:10	100:8	4
stmts	97:15	100:8	5	
if	97:15	100:8	6	(packet -> type >= 9 && packet -> type <= 12)
cond	97:19	97:56	7	packet -> type >= 9 && packet -> type <= 12
water	97:19	0:0	8	packet
op	97:25	0:0	8	->
water	97:27	0:0	8	type
op	97:32	0:0	8	>=
water	97:35	0:0	8	9
op	97:37	0:0	8	&&
water	97:40	0:0	8	packet
op	97:46	0:0	8	->
water	97:48	0:0	8	type
op	97:53	0:0	8	<=
water	97:56	0:0	8	12
stmts	97:60	100:8	7	
water	97:60	0:0	8	{
call	99:12	99:69	8	QDM2_LIST_ADD
arg	99:26	99:46	9	q->sub_packet_list_D
water	99:26	0:0	10	q
op	99:27	0:0	10	->
water	99:29	0:0	10	sub_packet_list_D
arg	99:48	99:61	9	sub_packets_D
water	99:48	0:0	10	sub_packets_D
arg	99:63	99:69	9	packet
water	99:63	0:0	10	packet
water	99:70	0:0	8	;
water	100:8	0:0	8	}
else	100:10	103:8	4
stmts	100:15	103:8	5	
if	100:15	103:8	6	(packet -> type == 13)
cond	100:19	100:35	7	packet -> type == 13
water	100:19	0:0	8	packet
op	100:25	0:0	8	->
water	100:27	0:0	8	type
op	100:32	0:0	8	==
water	100:35	0:0	8	13
stmts	100:39	103:8	7	
water	100:39	0:0	8	{
for	101:12	102:54	8	(j = 0 ;j < 6;j ++)
forinit	101:17	101:22	9	j = 0 ;
water	101:17	0:0	10	j
op	101:19	0:0	10	=
water	101:21	0:0	10	0
water	101:22	0:0	10	;
cond	101:24	101:28	9	j < 6
water	101:24	0:0	10	j
op	101:26	0:0	10	<
water	101:28	0:0	10	6
forexpr	101:31	101:32	9	j ++
water	101:31	0:0	10	j
op	101:32	0:0	10	++
stmts	102:16	102:54	9	
water	102:16	0:0	10	q
op	102:17	0:0	10	->
water	102:19	0:0	10	fft_level_exp
op	102:32	0:0	10	[
water	102:33	0:0	10	j
op	102:34	0:0	10	]
op	102:36	0:0	10	=
call	102:38	102:53	10	get_bits
arg	102:47	102:50	11	&gb
op	102:47	0:0	12	&
water	102:48	0:0	12	gb
arg	102:52	102:53	11	6
water	102:52	0:0	12	6
water	102:54	0:0	10	;
water	103:8	0:0	8	}
else	103:10	106:8	4
stmts	103:15	106:8	5	
if	103:15	106:8	6	(packet -> type == 14)
cond	103:19	103:35	7	packet -> type == 14
water	103:19	0:0	8	packet
op	103:25	0:0	8	->
water	103:27	0:0	8	type
op	103:32	0:0	8	==
water	103:35	0:0	8	14
stmts	103:39	106:8	7	
water	103:39	0:0	8	{
for	104:12	105:81	8	(j = 0 ;j < 6;j ++)
forinit	104:17	104:22	9	j = 0 ;
water	104:17	0:0	10	j
op	104:19	0:0	10	=
water	104:21	0:0	10	0
water	104:22	0:0	10	;
cond	104:24	104:28	9	j < 6
water	104:24	0:0	10	j
op	104:26	0:0	10	<
water	104:28	0:0	10	6
forexpr	104:31	104:32	9	j ++
water	104:31	0:0	10	j
op	104:32	0:0	10	++
stmts	105:16	105:81	9	
water	105:16	0:0	10	q
op	105:17	0:0	10	->
water	105:19	0:0	10	fft_level_exp
op	105:32	0:0	10	[
water	105:33	0:0	10	j
op	105:34	0:0	10	]
op	105:36	0:0	10	=
call	105:38	105:80	10	qdm2_get_vlc
arg	105:51	105:54	11	&gb
op	105:51	0:0	12	&
water	105:52	0:0	12	gb
arg	105:56	105:74	11	&fft_level_exp_vlc
op	105:56	0:0	12	&
water	105:57	0:0	12	fft_level_exp_vlc
arg	105:76	105:77	11	0
water	105:76	0:0	12	0
arg	105:79	105:80	11	2
water	105:79	0:0	12	2
water	105:81	0:0	10	;
water	106:8	0:0	8	}
else	106:10	109:8	4
stmts	106:15	109:8	5	
if	106:15	109:8	6	(packet -> type == 15)
cond	106:19	106:35	7	packet -> type == 15
water	106:19	0:0	8	packet
op	106:25	0:0	8	->
water	106:27	0:0	8	type
op	106:32	0:0	8	==
water	106:35	0:0	8	15
stmts	106:39	109:8	7	
water	106:39	0:0	8	{
call	107:12	107:45	8	SAMPLES_NEEDED_2
arg	107:29	107:45	9	"packet type 15"
water	107:29	0:0	10	"packet type 15"
water	108:12	0:0	8	return
water	108:18	0:0	8	;
water	109:8	0:0	8	}
else	109:10	112:8	4
stmts	109:15	112:8	5	
if	109:15	112:8	6	(packet -> type >= 16 && packet -> type < 48 && ! fft_subpackets [ packet -> type - 16 ])
cond	109:19	109:95	7	packet -> type >= 16 && packet -> type < 48 && ! fft_subpackets [ packet -> type - 16 ]
water	109:19	0:0	8	packet
op	109:25	0:0	8	->
water	109:27	0:0	8	type
op	109:32	0:0	8	>=
water	109:35	0:0	8	16
op	109:38	0:0	8	&&
water	109:41	0:0	8	packet
op	109:47	0:0	8	->
water	109:49	0:0	8	type
op	109:54	0:0	8	<
water	109:56	0:0	8	48
op	109:59	0:0	8	&&
op	109:62	0:0	8	!
water	109:63	0:0	8	fft_subpackets
op	109:77	0:0	8	[
water	109:78	0:0	8	packet
op	109:84	0:0	8	->
water	109:86	0:0	8	type
op	109:91	0:0	8	-
water	109:93	0:0	8	16
op	109:95	0:0	8	]
stmts	109:98	112:8	7	
water	109:98	0:0	8	{
call	111:12	111:72	8	QDM2_LIST_ADD
arg	111:26	111:46	9	q->sub_packet_list_B
water	111:26	0:0	10	q
op	111:27	0:0	10	->
water	111:29	0:0	10	sub_packet_list_B
arg	111:48	111:64	9	q->sub_packets_B
water	111:48	0:0	10	q
op	111:49	0:0	10	->
water	111:51	0:0	10	sub_packets_B
arg	111:66	111:72	9	packet
water	111:66	0:0	10	packet
water	111:73	0:0	8	;
water	112:8	0:0	8	}
water	113:4	0:0	4	}
if	116:4	119:4	2	(q -> sub_packet_list_D [ 0 ] . packet != NULL)
cond	116:8	116:42	3	q -> sub_packet_list_D [ 0 ] . packet != NULL
water	116:8	0:0	4	q
op	116:9	0:0	4	->
water	116:11	0:0	4	sub_packet_list_D
op	116:28	0:0	4	[
water	116:29	0:0	4	0
op	116:30	0:0	4	]
op	116:31	0:0	4	.
water	116:32	0:0	4	packet
op	116:39	0:0	4	!=
water	116:42	0:0	4	NULL
stmts	116:48	119:4	3	
water	116:48	0:0	4	{
call	117:8	117:60	4	process_synthesis_subpackets
arg	117:37	117:38	5	q
water	117:37	0:0	6	q
arg	117:40	117:60	5	q->sub_packet_list_D
water	117:40	0:0	6	q
op	117:41	0:0	6	->
water	117:43	0:0	6	sub_packet_list_D
water	117:61	0:0	4	;
water	118:8	0:0	4	q
op	118:9	0:0	4	->
water	118:11	0:0	4	do_synth_filter
op	118:27	0:0	4	=
water	118:29	0:0	4	1
water	118:30	0:0	4	;
water	119:4	0:0	4	}
else	119:6	123:4	2
stmts	119:11	123:4	3	
if	119:11	123:4	4	(q -> do_synth_filter)
cond	119:15	119:18	5	q -> do_synth_filter
water	119:15	0:0	6	q
op	119:16	0:0	6	->
water	119:18	0:0	6	do_synth_filter
stmts	119:35	123:4	5	
water	119:35	0:0	6	{
call	120:8	120:39	6	process_subpacket_10
arg	120:29	120:30	7	q
water	120:29	0:0	8	q
arg	120:32	120:36	7	NULL
water	120:32	0:0	8	NULL
arg	120:38	120:39	7	0
water	120:38	0:0	8	0
water	120:40	0:0	6	;
call	121:8	121:39	6	process_subpacket_11
arg	121:29	121:30	7	q
water	121:29	0:0	8	q
arg	121:32	121:36	7	NULL
water	121:32	0:0	8	NULL
arg	121:38	121:39	7	0
water	121:38	0:0	8	0
water	121:40	0:0	6	;
call	122:8	122:39	6	process_subpacket_12
arg	122:29	122:30	7	q
water	122:29	0:0	8	q
arg	122:32	122:36	7	NULL
water	122:32	0:0	8	NULL
arg	122:38	122:39	7	0
water	122:38	0:0	8	0
water	122:40	0:0	6	;
water	123:4	0:0	6	}
