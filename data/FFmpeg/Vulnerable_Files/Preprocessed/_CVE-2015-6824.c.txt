func	1:8	591:0	0	int	sws_init_context
params	1:28	0:0	1	
param	1:29	1:42	2	SwsContext *	c
param	1:44	1:64	2	SwsFilter *	srcFilter
param	2:29	2:49	2	SwsFilter *	dstFilter
stmnts	0:0	590:13	1	
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	j
decl	5:4	5:32	2	int	usesVFilter
water	5:19	0:0	2	,
decl	5:4	5:32	2	int	usesHFilter
decl	6:4	6:16	2	int	unscaled
decl	7:4	7:54	2	SwsFilter	dummyFilter
op	7:26	0:0	2	=
water	7:28	0:0	2	{
water	7:30	0:0	2	NULL
water	7:34	0:0	2	,
water	7:36	0:0	2	NULL
water	7:40	0:0	2	,
water	7:42	0:0	2	NULL
water	7:46	0:0	2	,
water	7:48	0:0	2	NULL
water	7:53	0:0	2	}
decl	8:4	8:35	2	int	srcW
op	8:26	0:0	2	=
water	8:28	0:0	2	c
op	8:29	0:0	2	->
water	8:31	0:0	2	srcW
decl	9:4	9:35	2	int	srcH
op	9:26	0:0	2	=
water	9:28	0:0	2	c
op	9:29	0:0	2	->
water	9:31	0:0	2	srcH
decl	10:4	10:35	2	int	dstW
op	10:26	0:0	2	=
water	10:28	0:0	2	c
op	10:29	0:0	2	->
water	10:31	0:0	2	dstW
decl	11:4	11:35	2	int	dstH
op	11:26	0:0	2	=
water	11:28	0:0	2	c
op	11:29	0:0	2	->
water	11:31	0:0	2	dstH
decl	12:4	12:68	2	int	dst_stride
op	12:26	0:0	2	=
call	12:28	12:67	3	FFALIGN
arg	12:36	12:63	4	dstW*sizeof(int16_t)+66
water	12:36	0:0	5	dstW
op	12:41	0:0	5	*
op	12:43	0:0	5	sizeof
water	12:49	0:0	5	(
water	12:50	0:0	5	int16_t
water	12:57	0:0	5	)
op	12:59	0:0	5	+
water	12:61	0:0	5	66
arg	12:65	12:67	4	16
water	12:65	0:0	5	16
decl	13:4	13:24	2	int	flags
water	13:13	0:0	2	,
decl	13:4	13:24	2	int	cpu_flags
decl	14:4	14:47	2	enum AVPixelFormat	srcFormat
op	14:33	0:0	2	=
water	14:35	0:0	2	c
op	14:36	0:0	2	->
water	14:38	0:0	2	srcFormat
decl	15:4	15:47	2	enum AVPixelFormat	dstFormat
op	15:33	0:0	2	=
water	15:35	0:0	2	c
op	15:36	0:0	2	->
water	15:38	0:0	2	dstFormat
decl	16:4	16:38	2	const AVPixFmtDescriptor	*desc_src
decl	17:4	17:38	2	const AVPixFmtDescriptor	*desc_dst
decl	18:4	18:15	2	int	ret
op	18:12	0:0	2	=
water	18:14	0:0	2	0
water	20:4	0:0	2	cpu_flags
op	20:14	0:0	2	=
call	20:16	20:33	2	av_get_cpu_flags
water	20:34	0:0	2	;
water	21:4	0:0	2	flags
op	21:14	0:0	2	=
water	21:16	0:0	2	c
op	21:17	0:0	2	->
water	21:19	0:0	2	flags
water	21:24	0:0	2	;
call	22:4	22:11	2	emms_c
water	22:12	0:0	2	;
if	23:4	24:26	2	(! rgb15to16)
cond	23:8	23:9	3	! rgb15to16
op	23:8	0:0	4	!
water	23:9	0:0	4	rgb15to16
stmts	24:8	24:26	3	
call	24:8	24:25	4	sws_rgb2rgb_init
water	24:26	0:0	4	;
water	26:4	0:0	2	unscaled
op	26:13	0:0	2	=
water	26:15	0:0	2	(
water	26:16	0:0	2	srcW
op	26:21	0:0	2	==
water	26:24	0:0	2	dstW
op	26:29	0:0	2	&&
water	26:32	0:0	2	srcH
op	26:37	0:0	2	==
water	26:40	0:0	2	dstH
water	26:44	0:0	2	)
water	26:45	0:0	2	;
water	28:4	0:0	2	c
op	28:5	0:0	2	->
water	28:7	0:0	2	srcRange
op	28:16	0:0	2	|=
call	28:19	28:44	2	handle_jpeg
arg	28:31	28:44	3	&c->srcFormat
op	28:31	0:0	4	&
water	28:32	0:0	4	c
op	28:33	0:0	4	->
water	28:35	0:0	4	srcFormat
water	28:45	0:0	2	;
water	29:4	0:0	2	c
op	29:5	0:0	2	->
water	29:7	0:0	2	dstRange
op	29:16	0:0	2	|=
call	29:19	29:44	2	handle_jpeg
arg	29:31	29:44	3	&c->dstFormat
op	29:31	0:0	4	&
water	29:32	0:0	4	c
op	29:33	0:0	4	->
water	29:35	0:0	4	dstFormat
water	29:45	0:0	2	;
if	31:4	32:106	2	(srcFormat != c -> srcFormat || dstFormat != c -> dstFormat)
cond	31:7	31:48	3	srcFormat != c -> srcFormat || dstFormat != c -> dstFormat
water	31:7	0:0	4	srcFormat
op	31:16	0:0	4	!=
water	31:18	0:0	4	c
op	31:19	0:0	4	->
water	31:21	0:0	4	srcFormat
op	31:31	0:0	4	||
water	31:34	0:0	4	dstFormat
op	31:43	0:0	4	!=
water	31:45	0:0	4	c
op	31:46	0:0	4	->
water	31:48	0:0	4	dstFormat
stmts	32:8	32:106	3	
call	32:8	32:105	4	av_log
arg	32:15	32:16	5	c
water	32:15	0:0	6	c
arg	32:18	32:32	5	AV_LOG_WARNING
water	32:18	0:0	6	AV_LOG_WARNING
arg	32:34	32:105	5	"deprecated pixel format used, make sure you did set range correctly\n"
water	32:34	0:0	6	"deprecated pixel format used, make sure you did set range correctly\n"
water	32:106	0:0	4	;
if	34:4	37:66	2	(! c -> contrast && ! c -> saturation && ! c -> dstFormatBpp)
cond	34:8	34:46	3	! c -> contrast && ! c -> saturation && ! c -> dstFormatBpp
op	34:8	0:0	4	!
water	34:9	0:0	4	c
op	34:10	0:0	4	->
water	34:12	0:0	4	contrast
op	34:21	0:0	4	&&
op	34:24	0:0	4	!
water	34:25	0:0	4	c
op	34:26	0:0	4	->
water	34:28	0:0	4	saturation
op	34:39	0:0	4	&&
op	34:42	0:0	4	!
water	34:43	0:0	4	c
op	34:44	0:0	4	->
water	34:46	0:0	4	dstFormatBpp
stmts	35:8	37:66	3	
call	35:8	37:65	4	sws_setColorspaceDetails
arg	35:33	35:34	5	c
water	35:33	0:0	6	c
arg	35:36	35:69	5	ff_yuv2rgb_coeffs[SWS_CS_DEFAULT]
water	35:36	0:0	6	ff_yuv2rgb_coeffs
op	35:53	0:0	6	[
water	35:54	0:0	6	SWS_CS_DEFAULT
op	35:68	0:0	6	]
arg	35:71	35:82	5	c->srcRange
water	35:71	0:0	6	c
op	35:72	0:0	6	->
water	35:74	0:0	6	srcRange
arg	36:33	36:66	5	ff_yuv2rgb_coeffs[SWS_CS_DEFAULT]
water	36:33	0:0	6	ff_yuv2rgb_coeffs
op	36:50	0:0	6	[
water	36:51	0:0	6	SWS_CS_DEFAULT
op	36:65	0:0	6	]
arg	37:33	37:44	5	c->dstRange
water	37:33	0:0	6	c
op	37:34	0:0	6	->
water	37:36	0:0	6	dstRange
arg	37:46	37:47	5	0
water	37:46	0:0	6	0
arg	37:49	37:56	5	1<<16
water	37:49	0:0	6	1
op	37:51	0:0	6	<<
water	37:54	0:0	6	16
arg	37:58	37:65	5	1<<16
water	37:58	0:0	6	1
op	37:60	0:0	6	<<
water	37:63	0:0	6	16
water	37:66	0:0	4	;
call	39:4	39:20	2	handle_formats
arg	39:19	39:20	3	c
water	39:19	0:0	4	c
water	39:21	0:0	2	;
water	40:4	0:0	2	srcFormat
op	40:14	0:0	2	=
water	40:16	0:0	2	c
op	40:17	0:0	2	->
water	40:19	0:0	2	srcFormat
water	40:28	0:0	2	;
water	41:4	0:0	2	dstFormat
op	41:14	0:0	2	=
water	41:16	0:0	2	c
op	41:17	0:0	2	->
water	41:19	0:0	2	dstFormat
water	41:28	0:0	2	;
water	42:4	0:0	2	desc_src
op	42:13	0:0	2	=
call	42:15	42:44	2	av_pix_fmt_desc_get
arg	42:35	42:44	3	srcFormat
water	42:35	0:0	4	srcFormat
water	42:45	0:0	2	;
water	43:4	0:0	2	desc_dst
op	43:13	0:0	2	=
call	43:15	43:44	2	av_pix_fmt_desc_get
arg	43:35	43:44	3	dstFormat
water	43:35	0:0	4	dstFormat
water	43:45	0:0	2	;
if	45:4	57:4	2	(! ( unscaled &&sws_isSupportedEndiannessConversion (srcFormat ) &&av_pix_fmt_swap_endianness (srcFormat ) == dstFormat ))
cond	45:8	46:60	3	! ( unscaled &&sws_isSupportedEndiannessConversion (srcFormat ) &&av_pix_fmt_swap_endianness (srcFormat ) == dstFormat )
op	45:8	0:0	4	!
water	45:9	0:0	4	(
water	45:10	0:0	4	unscaled
op	45:19	0:0	4	&&
call	45:22	45:67	4	sws_isSupportedEndiannessConversion
arg	45:58	45:67	5	srcFormat
water	45:58	0:0	6	srcFormat
op	45:69	0:0	4	&&
call	46:10	46:46	4	av_pix_fmt_swap_endianness
arg	46:37	46:46	5	srcFormat
water	46:37	0:0	6	srcFormat
op	46:48	0:0	4	==
water	46:51	0:0	4	dstFormat
water	46:60	0:0	4	)
stmts	46:63	57:4	3	
water	46:63	0:0	4	{
if	47:4	51:4	4	(!sws_isSupportedInput (srcFormat ))
cond	47:8	47:39	5	!sws_isSupportedInput (srcFormat )
op	47:8	0:0	6	!
call	47:9	47:39	6	sws_isSupportedInput
arg	47:30	47:39	7	srcFormat
water	47:30	0:0	8	srcFormat
stmts	47:42	51:4	5	
water	47:42	0:0	6	{
call	48:8	49:45	6	av_log
arg	48:15	48:16	7	c
water	48:15	0:0	8	c
arg	48:18	48:30	7	AV_LOG_ERROR
water	48:18	0:0	8	AV_LOG_ERROR
arg	48:32	48:77	7	"%s is not supported as input pixel format\n"
water	48:32	0:0	8	"%s is not supported as input pixel format\n"
arg	49:15	49:45	7	av_get_pix_fmt_name(srcFormat)
call	49:15	49:44	8	av_get_pix_fmt_name
arg	49:35	49:44	9	srcFormat
water	49:35	0:0	10	srcFormat
water	49:46	0:0	6	;
return	50:8	50:30	6	AVERROR(EINVAL)
call	50:15	50:29	7	AVERROR
arg	50:23	50:29	8	EINVAL
water	50:23	0:0	9	EINVAL
water	51:4	0:0	6	}
if	52:4	56:4	4	(!sws_isSupportedOutput (dstFormat ))
cond	52:8	52:40	5	!sws_isSupportedOutput (dstFormat )
op	52:8	0:0	6	!
call	52:9	52:40	6	sws_isSupportedOutput
arg	52:31	52:40	7	dstFormat
water	52:31	0:0	8	dstFormat
stmts	52:43	56:4	5	
water	52:43	0:0	6	{
call	53:8	54:45	6	av_log
arg	53:15	53:16	7	c
water	53:15	0:0	8	c
arg	53:18	53:30	7	AV_LOG_ERROR
water	53:18	0:0	8	AV_LOG_ERROR
arg	53:32	53:78	7	"%s is not supported as output pixel format\n"
water	53:32	0:0	8	"%s is not supported as output pixel format\n"
arg	54:15	54:45	7	av_get_pix_fmt_name(dstFormat)
call	54:15	54:44	8	av_get_pix_fmt_name
arg	54:35	54:44	9	dstFormat
water	54:35	0:0	10	dstFormat
water	54:46	0:0	6	;
return	55:8	55:30	6	AVERROR(EINVAL)
call	55:15	55:29	7	AVERROR
arg	55:23	55:29	8	EINVAL
water	55:23	0:0	9	EINVAL
water	56:4	0:0	6	}
water	57:4	0:0	4	}
water	59:4	0:0	2	i
op	59:6	0:0	2	=
water	59:8	0:0	2	flags
op	59:14	0:0	2	&
water	59:16	0:0	2	(
water	59:17	0:0	2	SWS_POINT
op	59:35	0:0	2	|
water	60:17	0:0	2	SWS_AREA
op	60:35	0:0	2	|
water	61:17	0:0	2	SWS_BILINEAR
op	61:35	0:0	2	|
water	62:17	0:0	2	SWS_FAST_BILINEAR
op	62:35	0:0	2	|
water	63:17	0:0	2	SWS_BICUBIC
op	63:35	0:0	2	|
water	64:17	0:0	2	SWS_X
op	64:35	0:0	2	|
water	65:17	0:0	2	SWS_GAUSS
op	65:35	0:0	2	|
water	66:17	0:0	2	SWS_LANCZOS
op	66:35	0:0	2	|
water	67:17	0:0	2	SWS_SINC
op	67:35	0:0	2	|
water	68:17	0:0	2	SWS_SPLINE
op	68:35	0:0	2	|
water	69:17	0:0	2	SWS_BICUBLIN
water	69:29	0:0	2	)
water	69:30	0:0	2	;
if	72:4	80:4	2	(! i)
cond	72:8	72:9	3	! i
op	72:8	0:0	4	!
water	72:9	0:0	4	i
stmts	72:12	80:4	3	
water	72:12	0:0	4	{
if	73:8	74:32	4	(dstW < srcW && dstH < srcH)
cond	73:12	73:34	5	dstW < srcW && dstH < srcH
water	73:12	0:0	6	dstW
op	73:17	0:0	6	<
water	73:19	0:0	6	srcW
op	73:24	0:0	6	&&
water	73:27	0:0	6	dstH
op	73:32	0:0	6	<
water	73:34	0:0	6	srcH
stmts	74:12	74:32	5	
water	74:12	0:0	6	flags
op	74:18	0:0	6	|=
water	74:21	0:0	6	SWS_BICUBIC
water	74:32	0:0	6	;
else	75:8	76:32	4
stmts	75:13	76:32	5	
if	75:13	76:32	6	(dstW > srcW && dstH > srcH)
cond	75:17	75:39	7	dstW > srcW && dstH > srcH
water	75:17	0:0	8	dstW
op	75:22	0:0	8	>
water	75:24	0:0	8	srcW
op	75:29	0:0	8	&&
water	75:32	0:0	8	dstH
op	75:37	0:0	8	>
water	75:39	0:0	8	srcH
stmts	76:12	76:32	7	
water	76:12	0:0	8	flags
op	76:18	0:0	8	|=
water	76:21	0:0	8	SWS_BICUBIC
water	76:32	0:0	8	;
else	77:8	78:32	4
stmts	78:12	78:32	5	
water	78:12	0:0	6	flags
op	78:18	0:0	6	|=
water	78:21	0:0	6	SWS_BICUBIC
water	78:32	0:0	6	;
water	79:8	0:0	4	c
op	79:9	0:0	4	->
water	79:11	0:0	4	flags
op	79:17	0:0	4	=
water	79:19	0:0	4	flags
water	79:24	0:0	4	;
water	80:4	0:0	4	}
else	80:6	84:4	2
stmts	80:11	84:4	3	
if	80:11	84:4	4	(i & ( i - 1 ))
cond	80:15	80:25	5	i & ( i - 1 )
water	80:15	0:0	6	i
op	80:17	0:0	6	&
water	80:19	0:0	6	(
water	80:20	0:0	6	i
op	80:22	0:0	6	-
water	80:24	0:0	6	1
water	80:25	0:0	6	)
stmts	80:28	84:4	5	
water	80:28	0:0	6	{
call	81:8	82:73	6	av_log
arg	81:15	81:16	7	c
water	81:15	0:0	8	c
arg	81:18	81:30	7	AV_LOG_ERROR
water	81:18	0:0	8	AV_LOG_ERROR
arg	82:15	82:70	7	"Exactly one scaler algorithm must be chosen, got %X\n"
water	82:15	0:0	8	"Exactly one scaler algorithm must be chosen, got %X\n"
arg	82:72	82:73	7	i
water	82:72	0:0	8	i
water	82:74	0:0	6	;
return	83:8	83:30	6	AVERROR(EINVAL)
call	83:15	83:29	7	AVERROR
arg	83:23	83:29	8	EINVAL
water	83:23	0:0	9	EINVAL
water	84:4	0:0	6	}
if	86:4	92:4	2	(srcW < 1 || srcH < 1 || dstW < 1 || dstH < 1)
cond	86:8	86:51	3	srcW < 1 || srcH < 1 || dstW < 1 || dstH < 1
water	86:8	0:0	4	srcW
op	86:13	0:0	4	<
water	86:15	0:0	4	1
op	86:17	0:0	4	||
water	86:20	0:0	4	srcH
op	86:25	0:0	4	<
water	86:27	0:0	4	1
op	86:29	0:0	4	||
water	86:32	0:0	4	dstW
op	86:37	0:0	4	<
water	86:39	0:0	4	1
op	86:41	0:0	4	||
water	86:44	0:0	4	dstH
op	86:49	0:0	4	<
water	86:51	0:0	4	1
stmts	86:54	92:4	3	
water	86:54	0:0	4	{
call	89:8	90:37	4	av_log
arg	89:15	89:16	5	c
water	89:15	0:0	6	c
arg	89:18	89:30	5	AV_LOG_ERROR
water	89:18	0:0	6	AV_LOG_ERROR
arg	89:32	89:79	5	"%dx%d -> %dx%d is invalid scaling dimension\n"
water	89:32	0:0	6	"%dx%d -> %dx%d is invalid scaling dimension\n"
arg	90:15	90:19	5	srcW
water	90:15	0:0	6	srcW
arg	90:21	90:25	5	srcH
water	90:21	0:0	6	srcH
arg	90:27	90:31	5	dstW
water	90:27	0:0	6	dstW
arg	90:33	90:37	5	dstH
water	90:33	0:0	6	dstH
water	90:38	0:0	4	;
return	91:8	91:30	4	AVERROR(EINVAL)
call	91:15	91:29	5	AVERROR
arg	91:23	91:29	6	EINVAL
water	91:23	0:0	7	EINVAL
water	92:4	0:0	4	}
if	94:4	95:32	2	(! dstFilter)
cond	94:8	94:9	3	! dstFilter
op	94:8	0:0	4	!
water	94:9	0:0	4	dstFilter
stmts	95:8	95:32	3	
water	95:8	0:0	4	dstFilter
op	95:18	0:0	4	=
op	95:20	0:0	4	&
water	95:21	0:0	4	dummyFilter
water	95:32	0:0	4	;
if	96:4	97:32	2	(! srcFilter)
cond	96:8	96:9	3	! srcFilter
op	96:8	0:0	4	!
water	96:9	0:0	4	srcFilter
stmts	97:8	97:32	3	
water	97:8	0:0	4	srcFilter
op	97:18	0:0	4	=
op	97:20	0:0	4	&
water	97:21	0:0	4	dummyFilter
water	97:32	0:0	4	;
water	99:4	0:0	2	c
op	99:5	0:0	2	->
water	99:7	0:0	2	lumXInc
op	99:20	0:0	2	=
water	99:22	0:0	2	(
water	99:23	0:0	2	(
water	99:24	0:0	2	(
water	99:25	0:0	2	int64_t
water	99:32	0:0	2	)
water	99:33	0:0	2	srcW
op	99:38	0:0	2	<<
water	99:41	0:0	2	16
water	99:43	0:0	2	)
op	99:45	0:0	2	+
water	99:47	0:0	2	(
water	99:48	0:0	2	dstW
op	99:53	0:0	2	>>
water	99:56	0:0	2	1
water	99:57	0:0	2	)
water	99:58	0:0	2	)
op	99:60	0:0	2	/
water	99:62	0:0	2	dstW
water	99:66	0:0	2	;
water	100:4	0:0	2	c
op	100:5	0:0	2	->
water	100:7	0:0	2	lumYInc
op	100:20	0:0	2	=
water	100:22	0:0	2	(
water	100:23	0:0	2	(
water	100:24	0:0	2	(
water	100:25	0:0	2	int64_t
water	100:32	0:0	2	)
water	100:33	0:0	2	srcH
op	100:38	0:0	2	<<
water	100:41	0:0	2	16
water	100:43	0:0	2	)
op	100:45	0:0	2	+
water	100:47	0:0	2	(
water	100:48	0:0	2	dstH
op	100:53	0:0	2	>>
water	100:56	0:0	2	1
water	100:57	0:0	2	)
water	100:58	0:0	2	)
op	100:60	0:0	2	/
water	100:62	0:0	2	dstH
water	100:66	0:0	2	;
water	101:4	0:0	2	c
op	101:5	0:0	2	->
water	101:7	0:0	2	dstFormatBpp
op	101:20	0:0	2	=
call	101:22	101:52	2	av_get_bits_per_pixel
arg	101:44	101:52	3	desc_dst
water	101:44	0:0	4	desc_dst
water	101:53	0:0	2	;
water	102:4	0:0	2	c
op	102:5	0:0	2	->
water	102:7	0:0	2	srcFormatBpp
op	102:20	0:0	2	=
call	102:22	102:52	2	av_get_bits_per_pixel
arg	102:44	102:52	3	desc_src
water	102:44	0:0	4	desc_src
water	102:53	0:0	2	;
water	103:4	0:0	2	c
op	103:5	0:0	2	->
water	103:7	0:0	2	vRounder
op	103:20	0:0	2	=
water	103:22	0:0	2	4
op	103:24	0:0	2	*
water	103:26	0:0	2	0
water	103:27	0:0	2	x0001000100010001ULL
water	103:47	0:0	2	;
water	105:4	0:0	2	usesVFilter
op	105:16	0:0	2	=
water	105:18	0:0	2	(
water	105:19	0:0	2	srcFilter
op	105:28	0:0	2	->
water	105:30	0:0	2	lumV
op	105:35	0:0	2	&&
water	105:38	0:0	2	srcFilter
op	105:47	0:0	2	->
water	105:49	0:0	2	lumV
op	105:53	0:0	2	->
water	105:55	0:0	2	length
op	105:62	0:0	2	>
water	105:64	0:0	2	1
water	105:65	0:0	2	)
op	105:67	0:0	2	||
water	106:18	0:0	2	(
water	106:19	0:0	2	srcFilter
op	106:28	0:0	2	->
water	106:30	0:0	2	chrV
op	106:35	0:0	2	&&
water	106:38	0:0	2	srcFilter
op	106:47	0:0	2	->
water	106:49	0:0	2	chrV
op	106:53	0:0	2	->
water	106:55	0:0	2	length
op	106:62	0:0	2	>
water	106:64	0:0	2	1
water	106:65	0:0	2	)
op	106:67	0:0	2	||
water	107:18	0:0	2	(
water	107:19	0:0	2	dstFilter
op	107:28	0:0	2	->
water	107:30	0:0	2	lumV
op	107:35	0:0	2	&&
water	107:38	0:0	2	dstFilter
op	107:47	0:0	2	->
water	107:49	0:0	2	lumV
op	107:53	0:0	2	->
water	107:55	0:0	2	length
op	107:62	0:0	2	>
water	107:64	0:0	2	1
water	107:65	0:0	2	)
op	107:67	0:0	2	||
water	108:18	0:0	2	(
water	108:19	0:0	2	dstFilter
op	108:28	0:0	2	->
water	108:30	0:0	2	chrV
op	108:35	0:0	2	&&
water	108:38	0:0	2	dstFilter
op	108:47	0:0	2	->
water	108:49	0:0	2	chrV
op	108:53	0:0	2	->
water	108:55	0:0	2	length
op	108:62	0:0	2	>
water	108:64	0:0	2	1
water	108:65	0:0	2	)
water	108:66	0:0	2	;
water	109:4	0:0	2	usesHFilter
op	109:16	0:0	2	=
water	109:18	0:0	2	(
water	109:19	0:0	2	srcFilter
op	109:28	0:0	2	->
water	109:30	0:0	2	lumH
op	109:35	0:0	2	&&
water	109:38	0:0	2	srcFilter
op	109:47	0:0	2	->
water	109:49	0:0	2	lumH
op	109:53	0:0	2	->
water	109:55	0:0	2	length
op	109:62	0:0	2	>
water	109:64	0:0	2	1
water	109:65	0:0	2	)
op	109:67	0:0	2	||
water	110:18	0:0	2	(
water	110:19	0:0	2	srcFilter
op	110:28	0:0	2	->
water	110:30	0:0	2	chrH
op	110:35	0:0	2	&&
water	110:38	0:0	2	srcFilter
op	110:47	0:0	2	->
water	110:49	0:0	2	chrH
op	110:53	0:0	2	->
water	110:55	0:0	2	length
op	110:62	0:0	2	>
water	110:64	0:0	2	1
water	110:65	0:0	2	)
op	110:67	0:0	2	||
water	111:18	0:0	2	(
water	111:19	0:0	2	dstFilter
op	111:28	0:0	2	->
water	111:30	0:0	2	lumH
op	111:35	0:0	2	&&
water	111:38	0:0	2	dstFilter
op	111:47	0:0	2	->
water	111:49	0:0	2	lumH
op	111:53	0:0	2	->
water	111:55	0:0	2	length
op	111:62	0:0	2	>
water	111:64	0:0	2	1
water	111:65	0:0	2	)
op	111:67	0:0	2	||
water	112:18	0:0	2	(
water	112:19	0:0	2	dstFilter
op	112:28	0:0	2	->
water	112:30	0:0	2	chrH
op	112:35	0:0	2	&&
water	112:38	0:0	2	dstFilter
op	112:47	0:0	2	->
water	112:49	0:0	2	chrH
op	112:53	0:0	2	->
water	112:55	0:0	2	length
op	112:62	0:0	2	>
water	112:64	0:0	2	1
water	112:65	0:0	2	)
water	112:66	0:0	2	;
call	114:4	114:90	2	av_pix_fmt_get_chroma_sub_sample
arg	114:37	114:46	3	srcFormat
water	114:37	0:0	4	srcFormat
arg	114:48	114:68	3	&c->chrSrcHSubSample
op	114:48	0:0	4	&
water	114:49	0:0	4	c
op	114:50	0:0	4	->
water	114:52	0:0	4	chrSrcHSubSample
arg	114:70	114:90	3	&c->chrSrcVSubSample
op	114:70	0:0	4	&
water	114:71	0:0	4	c
op	114:72	0:0	4	->
water	114:74	0:0	4	chrSrcVSubSample
water	114:91	0:0	2	;
call	115:4	115:90	2	av_pix_fmt_get_chroma_sub_sample
arg	115:37	115:46	3	dstFormat
water	115:37	0:0	4	dstFormat
arg	115:48	115:68	3	&c->chrDstHSubSample
op	115:48	0:0	4	&
water	115:49	0:0	4	c
op	115:50	0:0	4	->
water	115:52	0:0	4	chrDstHSubSample
arg	115:70	115:90	3	&c->chrDstVSubSample
op	115:70	0:0	4	&
water	115:71	0:0	4	c
op	115:72	0:0	4	->
water	115:74	0:0	4	chrDstVSubSample
water	115:91	0:0	2	;
if	117:4	133:4	2	(isAnyRGB (dstFormat ) && ! ( flags & SWS_FULL_CHR_H_INT ))
cond	117:8	117:57	3	isAnyRGB (dstFormat ) && ! ( flags & SWS_FULL_CHR_H_INT )
call	117:8	117:26	4	isAnyRGB
arg	117:17	117:26	5	dstFormat
water	117:17	0:0	6	dstFormat
op	117:28	0:0	4	&&
op	117:31	0:0	4	!
water	117:32	0:0	4	(
water	117:33	0:0	4	flags
op	117:38	0:0	4	&
water	117:39	0:0	4	SWS_FULL_CHR_H_INT
water	117:57	0:0	4	)
stmts	117:60	133:4	3	
water	117:60	0:0	4	{
if	118:8	122:8	4	(dstW & 1)
cond	118:12	118:17	5	dstW & 1
water	118:12	0:0	6	dstW
op	118:16	0:0	6	&
water	118:17	0:0	6	1
stmts	118:20	122:8	5	
water	118:20	0:0	6	{
call	119:12	119:93	6	av_log
arg	119:19	119:20	7	c
water	119:19	0:0	8	c
arg	119:22	119:34	7	AV_LOG_DEBUG
water	119:22	0:0	8	AV_LOG_DEBUG
arg	119:36	119:93	7	"Forcing full internal H chroma due to odd output size\n"
water	119:36	0:0	8	"Forcing full internal H chroma due to odd output size\n"
water	119:94	0:0	6	;
water	120:12	0:0	6	flags
op	120:18	0:0	6	|=
water	120:21	0:0	6	SWS_FULL_CHR_H_INT
water	120:39	0:0	6	;
water	121:12	0:0	6	c
op	121:13	0:0	6	->
water	121:15	0:0	6	flags
op	121:21	0:0	6	=
water	121:23	0:0	6	flags
water	121:28	0:0	6	;
water	122:8	0:0	6	}
if	124:8	132:8	4	(c -> chrSrcHSubSample == 0 && c -> chrSrcVSubSample == 0 && c -> dither != SWS_DITHER_BAYER && ! ( c -> flags & SWS_FAST_BILINEAR ))
cond	124:15	127:45	5	c -> chrSrcHSubSample == 0 && c -> chrSrcVSubSample == 0 && c -> dither != SWS_DITHER_BAYER && ! ( c -> flags & SWS_FAST_BILINEAR )
water	124:15	0:0	6	c
op	124:16	0:0	6	->
water	124:18	0:0	6	chrSrcHSubSample
op	124:35	0:0	6	==
water	124:38	0:0	6	0
op	125:12	0:0	6	&&
water	125:15	0:0	6	c
op	125:16	0:0	6	->
water	125:18	0:0	6	chrSrcVSubSample
op	125:35	0:0	6	==
water	125:38	0:0	6	0
op	126:12	0:0	6	&&
water	126:15	0:0	6	c
op	126:16	0:0	6	->
water	126:18	0:0	6	dither
op	126:25	0:0	6	!=
water	126:28	0:0	6	SWS_DITHER_BAYER
op	127:12	0:0	6	&&
op	127:15	0:0	6	!
water	127:16	0:0	6	(
water	127:17	0:0	6	c
op	127:18	0:0	6	->
water	127:20	0:0	6	flags
op	127:26	0:0	6	&
water	127:28	0:0	6	SWS_FAST_BILINEAR
water	127:45	0:0	6	)
stmts	128:10	132:8	5	
water	128:10	0:0	6	{
call	129:12	129:112	6	av_log
arg	129:19	129:20	7	c
water	129:19	0:0	8	c
arg	129:22	129:34	7	AV_LOG_DEBUG
water	129:22	0:0	8	AV_LOG_DEBUG
arg	129:36	129:112	7	"Forcing full internal H chroma due to input having non subsampled chroma\n"
water	129:36	0:0	8	"Forcing full internal H chroma due to input having non subsampled chroma\n"
water	129:113	0:0	6	;
water	130:12	0:0	6	flags
op	130:18	0:0	6	|=
water	130:21	0:0	6	SWS_FULL_CHR_H_INT
water	130:39	0:0	6	;
water	131:12	0:0	6	c
op	131:13	0:0	6	->
water	131:15	0:0	6	flags
op	131:21	0:0	6	=
water	131:23	0:0	6	flags
water	131:28	0:0	6	;
water	132:8	0:0	6	}
water	133:4	0:0	4	}
if	135:4	138:4	2	(c -> dither == SWS_DITHER_AUTO)
cond	135:8	135:21	3	c -> dither == SWS_DITHER_AUTO
water	135:8	0:0	4	c
op	135:9	0:0	4	->
water	135:11	0:0	4	dither
op	135:18	0:0	4	==
water	135:21	0:0	4	SWS_DITHER_AUTO
stmts	135:38	138:4	3	
water	135:38	0:0	4	{
if	136:8	137:37	4	(flags & SWS_ERROR_DIFFUSION)
cond	136:12	136:20	5	flags & SWS_ERROR_DIFFUSION
water	136:12	0:0	6	flags
op	136:18	0:0	6	&
water	136:20	0:0	6	SWS_ERROR_DIFFUSION
stmts	137:12	137:37	5	
water	137:12	0:0	6	c
op	137:13	0:0	6	->
water	137:15	0:0	6	dither
op	137:22	0:0	6	=
water	137:24	0:0	6	SWS_DITHER_ED
water	137:37	0:0	6	;
water	138:4	0:0	4	}
if	140:4	163:4	2	(dstFormat == AV_PIX_FMT_BGR4_BYTE || dstFormat == AV_PIX_FMT_RGB4_BYTE || dstFormat == AV_PIX_FMT_BGR8 || dstFormat == AV_PIX_FMT_RGB8)
cond	140:7	143:20	3	dstFormat == AV_PIX_FMT_BGR4_BYTE || dstFormat == AV_PIX_FMT_RGB4_BYTE || dstFormat == AV_PIX_FMT_BGR8 || dstFormat == AV_PIX_FMT_RGB8
water	140:7	0:0	4	dstFormat
op	140:17	0:0	4	==
water	140:20	0:0	4	AV_PIX_FMT_BGR4_BYTE
op	140:41	0:0	4	||
water	141:7	0:0	4	dstFormat
op	141:17	0:0	4	==
water	141:20	0:0	4	AV_PIX_FMT_RGB4_BYTE
op	141:41	0:0	4	||
water	142:7	0:0	4	dstFormat
op	142:17	0:0	4	==
water	142:20	0:0	4	AV_PIX_FMT_BGR8
op	142:36	0:0	4	||
water	143:7	0:0	4	dstFormat
op	143:17	0:0	4	==
water	143:20	0:0	4	AV_PIX_FMT_RGB8
stmts	143:37	163:4	3	
water	143:37	0:0	4	{
if	144:8	145:87	4	(c -> dither == SWS_DITHER_AUTO)
cond	144:12	144:25	5	c -> dither == SWS_DITHER_AUTO
water	144:12	0:0	6	c
op	144:13	0:0	6	->
water	144:15	0:0	6	dither
op	144:22	0:0	6	==
water	144:25	0:0	6	SWS_DITHER_AUTO
stmts	145:12	145:87	5	
water	145:12	0:0	6	c
op	145:13	0:0	6	->
water	145:15	0:0	6	dither
op	145:22	0:0	6	=
water	145:24	0:0	6	(
water	145:25	0:0	6	flags
op	145:31	0:0	6	&
water	145:33	0:0	6	SWS_FULL_CHR_H_INT
water	145:51	0:0	6	)
water	145:53	0:0	6	?
water	145:55	0:0	6	SWS_DITHER_ED
water	145:69	0:0	6	:
water	145:71	0:0	6	SWS_DITHER_BAYER
water	145:87	0:0	6	;
if	146:8	154:8	4	(! ( flags & SWS_FULL_CHR_H_INT ))
cond	146:12	146:40	5	! ( flags & SWS_FULL_CHR_H_INT )
op	146:12	0:0	6	!
water	146:13	0:0	6	(
water	146:14	0:0	6	flags
op	146:20	0:0	6	&
water	146:22	0:0	6	SWS_FULL_CHR_H_INT
water	146:40	0:0	6	)
stmts	146:43	154:8	5	
water	146:43	0:0	6	{
if	147:12	153:12	6	(c -> dither == SWS_DITHER_ED || c -> dither == SWS_DITHER_A_DITHER || c -> dither == SWS_DITHER_X_DITHER)
cond	147:16	147:95	7	c -> dither == SWS_DITHER_ED || c -> dither == SWS_DITHER_A_DITHER || c -> dither == SWS_DITHER_X_DITHER
water	147:16	0:0	8	c
op	147:17	0:0	8	->
water	147:19	0:0	8	dither
op	147:26	0:0	8	==
water	147:29	0:0	8	SWS_DITHER_ED
op	147:43	0:0	8	||
water	147:46	0:0	8	c
op	147:47	0:0	8	->
water	147:49	0:0	8	dither
op	147:56	0:0	8	==
water	147:59	0:0	8	SWS_DITHER_A_DITHER
op	147:79	0:0	8	||
water	147:82	0:0	8	c
op	147:83	0:0	8	->
water	147:85	0:0	8	dither
op	147:92	0:0	8	==
water	147:95	0:0	8	SWS_DITHER_X_DITHER
stmts	147:116	153:12	7	
water	147:116	0:0	8	{
call	148:16	150:50	8	av_log
arg	148:23	148:24	9	c
water	148:23	0:0	10	c
arg	148:26	148:38	9	AV_LOG_DEBUG
water	148:26	0:0	10	AV_LOG_DEBUG
arg	149:20	149:113	9	"Desired dithering only supported in full chroma interpolation for destination format '%s'\n"
water	149:20	0:0	10	"Desired dithering only supported in full chroma interpolation for destination format '%s'\n"
arg	150:20	150:50	9	av_get_pix_fmt_name(dstFormat)
call	150:20	150:49	10	av_get_pix_fmt_name
arg	150:40	150:49	11	dstFormat
water	150:40	0:0	12	dstFormat
water	150:51	0:0	8	;
water	151:16	0:0	8	flags
op	151:24	0:0	8	|=
water	151:27	0:0	8	SWS_FULL_CHR_H_INT
water	151:45	0:0	8	;
water	152:16	0:0	8	c
op	152:17	0:0	8	->
water	152:19	0:0	8	flags
op	152:25	0:0	8	=
water	152:27	0:0	8	flags
water	152:32	0:0	8	;
water	153:12	0:0	8	}
water	154:8	0:0	6	}
if	155:8	162:8	4	(flags & SWS_FULL_CHR_H_INT)
cond	155:12	155:20	5	flags & SWS_FULL_CHR_H_INT
water	155:12	0:0	6	flags
op	155:18	0:0	6	&
water	155:20	0:0	6	SWS_FULL_CHR_H_INT
stmts	155:40	162:8	5	
water	155:40	0:0	6	{
if	156:12	161:12	6	(c -> dither == SWS_DITHER_BAYER)
cond	156:16	156:29	7	c -> dither == SWS_DITHER_BAYER
water	156:16	0:0	8	c
op	156:17	0:0	8	->
water	156:19	0:0	8	dither
op	156:26	0:0	8	==
water	156:29	0:0	8	SWS_DITHER_BAYER
stmts	156:47	161:12	7	
water	156:47	0:0	8	{
call	157:16	159:50	8	av_log
arg	157:23	157:24	9	c
water	157:23	0:0	10	c
arg	157:26	157:38	9	AV_LOG_DEBUG
water	157:26	0:0	10	AV_LOG_DEBUG
arg	158:20	158:112	9	"Ordered dither is not supported in full chroma interpolation for destination format '%s'\n"
water	158:20	0:0	10	"Ordered dither is not supported in full chroma interpolation for destination format '%s'\n"
arg	159:20	159:50	9	av_get_pix_fmt_name(dstFormat)
call	159:20	159:49	10	av_get_pix_fmt_name
arg	159:40	159:49	11	dstFormat
water	159:40	0:0	12	dstFormat
water	159:51	0:0	8	;
water	160:16	0:0	8	c
op	160:17	0:0	8	->
water	160:19	0:0	8	dither
op	160:26	0:0	8	=
water	160:28	0:0	8	SWS_DITHER_ED
water	160:41	0:0	8	;
water	161:12	0:0	8	}
water	162:8	0:0	6	}
water	163:4	0:0	4	}
if	164:4	172:4	2	(isPlanarRGB (dstFormat ))
cond	164:8	164:29	3	isPlanarRGB (dstFormat )
call	164:8	164:29	4	isPlanarRGB
arg	164:20	164:29	5	dstFormat
water	164:20	0:0	6	dstFormat
stmts	164:32	172:4	3	
water	164:32	0:0	4	{
if	165:8	171:8	4	(! ( flags & SWS_FULL_CHR_H_INT ))
cond	165:12	165:40	5	! ( flags & SWS_FULL_CHR_H_INT )
op	165:12	0:0	6	!
water	165:13	0:0	6	(
water	165:14	0:0	6	flags
op	165:20	0:0	6	&
water	165:22	0:0	6	SWS_FULL_CHR_H_INT
water	165:40	0:0	6	)
stmts	165:43	171:8	5	
water	165:43	0:0	6	{
call	166:12	168:49	6	av_log
arg	166:19	166:20	7	c
water	166:19	0:0	8	c
arg	166:22	166:34	7	AV_LOG_DEBUG
water	166:22	0:0	8	AV_LOG_DEBUG
arg	167:19	167:96	7	"%s output is not supported with half chroma resolution, switching to full\n"
water	167:19	0:0	8	"%s output is not supported with half chroma resolution, switching to full\n"
arg	168:19	168:49	7	av_get_pix_fmt_name(dstFormat)
call	168:19	168:48	8	av_get_pix_fmt_name
arg	168:39	168:48	9	dstFormat
water	168:39	0:0	10	dstFormat
water	168:50	0:0	6	;
water	169:12	0:0	6	flags
op	169:20	0:0	6	|=
water	169:23	0:0	6	SWS_FULL_CHR_H_INT
water	169:41	0:0	6	;
water	170:12	0:0	6	c
op	170:13	0:0	6	->
water	170:15	0:0	6	flags
op	170:21	0:0	6	=
water	170:23	0:0	6	flags
water	170:28	0:0	6	;
water	171:8	0:0	6	}
water	172:4	0:0	4	}
if	176:4	195:4	2	(flags & SWS_FULL_CHR_H_INT &&isAnyRGB (dstFormat ) && !isPlanarRGB (dstFormat ) && dstFormat != AV_PIX_FMT_RGBA && dstFormat != AV_PIX_FMT_ARGB && dstFormat != AV_PIX_FMT_BGRA && dstFormat != AV_PIX_FMT_ABGR && dstFormat != AV_PIX_FMT_RGB24 && dstFormat != AV_PIX_FMT_BGR24 && dstFormat != AV_PIX_FMT_BGR4_BYTE && dstFormat != AV_PIX_FMT_RGB4_BYTE && dstFormat != AV_PIX_FMT_BGR8 && dstFormat != AV_PIX_FMT_RGB8)
cond	176:8	188:21	3	flags & SWS_FULL_CHR_H_INT &&isAnyRGB (dstFormat ) && !isPlanarRGB (dstFormat ) && dstFormat != AV_PIX_FMT_RGBA && dstFormat != AV_PIX_FMT_ARGB && dstFormat != AV_PIX_FMT_BGRA && dstFormat != AV_PIX_FMT_ABGR && dstFormat != AV_PIX_FMT_RGB24 && dstFormat != AV_PIX_FMT_BGR24 && dstFormat != AV_PIX_FMT_BGR4_BYTE && dstFormat != AV_PIX_FMT_RGB4_BYTE && dstFormat != AV_PIX_FMT_BGR8 && dstFormat != AV_PIX_FMT_RGB8
water	176:8	0:0	4	flags
op	176:14	0:0	4	&
water	176:16	0:0	4	SWS_FULL_CHR_H_INT
op	176:35	0:0	4	&&
call	177:8	177:26	4	isAnyRGB
arg	177:17	177:26	5	dstFormat
water	177:17	0:0	6	dstFormat
op	177:35	0:0	4	&&
op	178:8	0:0	4	!
call	178:9	178:30	4	isPlanarRGB
arg	178:21	178:30	5	dstFormat
water	178:21	0:0	6	dstFormat
op	178:35	0:0	4	&&
water	179:8	0:0	4	dstFormat
op	179:18	0:0	4	!=
water	179:21	0:0	4	AV_PIX_FMT_RGBA
op	179:38	0:0	4	&&
water	180:8	0:0	4	dstFormat
op	180:18	0:0	4	!=
water	180:21	0:0	4	AV_PIX_FMT_ARGB
op	180:38	0:0	4	&&
water	181:8	0:0	4	dstFormat
op	181:18	0:0	4	!=
water	181:21	0:0	4	AV_PIX_FMT_BGRA
op	181:38	0:0	4	&&
water	182:8	0:0	4	dstFormat
op	182:18	0:0	4	!=
water	182:21	0:0	4	AV_PIX_FMT_ABGR
op	182:38	0:0	4	&&
water	183:8	0:0	4	dstFormat
op	183:18	0:0	4	!=
water	183:21	0:0	4	AV_PIX_FMT_RGB24
op	183:38	0:0	4	&&
water	184:8	0:0	4	dstFormat
op	184:18	0:0	4	!=
water	184:21	0:0	4	AV_PIX_FMT_BGR24
op	184:38	0:0	4	&&
water	185:8	0:0	4	dstFormat
op	185:18	0:0	4	!=
water	185:21	0:0	4	AV_PIX_FMT_BGR4_BYTE
op	185:42	0:0	4	&&
water	186:8	0:0	4	dstFormat
op	186:18	0:0	4	!=
water	186:21	0:0	4	AV_PIX_FMT_RGB4_BYTE
op	186:42	0:0	4	&&
water	187:8	0:0	4	dstFormat
op	187:18	0:0	4	!=
water	187:21	0:0	4	AV_PIX_FMT_BGR8
op	187:37	0:0	4	&&
water	188:8	0:0	4	dstFormat
op	188:18	0:0	4	!=
water	188:21	0:0	4	AV_PIX_FMT_RGB8
stmts	189:6	195:4	3	
water	189:6	0:0	4	{
call	190:8	192:45	4	av_log
arg	190:15	190:16	5	c
water	190:15	0:0	6	c
arg	190:18	190:32	5	AV_LOG_WARNING
water	190:18	0:0	6	AV_LOG_WARNING
arg	191:15	191:92	5	"full chroma interpolation for destination format '%s' not yet implemented\n"
water	191:15	0:0	6	"full chroma interpolation for destination format '%s' not yet implemented\n"
arg	192:15	192:45	5	av_get_pix_fmt_name(dstFormat)
call	192:15	192:44	6	av_get_pix_fmt_name
arg	192:35	192:44	7	dstFormat
water	192:35	0:0	8	dstFormat
water	192:46	0:0	4	;
water	193:8	0:0	4	flags
op	193:16	0:0	4	&=
water	193:19	0:0	4	~SWS_FULL_CHR_H_INT
water	193:38	0:0	4	;
water	194:8	0:0	4	c
op	194:9	0:0	4	->
water	194:11	0:0	4	flags
op	194:17	0:0	4	=
water	194:19	0:0	4	flags
water	194:24	0:0	4	;
water	195:4	0:0	4	}
if	196:4	197:31	2	(isAnyRGB (dstFormat ) && ! ( flags & SWS_FULL_CHR_H_INT ))
cond	196:8	196:59	3	isAnyRGB (dstFormat ) && ! ( flags & SWS_FULL_CHR_H_INT )
call	196:8	196:26	4	isAnyRGB
arg	196:17	196:26	5	dstFormat
water	196:17	0:0	6	dstFormat
op	196:28	0:0	4	&&
op	196:31	0:0	4	!
water	196:32	0:0	4	(
water	196:33	0:0	4	flags
op	196:39	0:0	4	&
water	196:41	0:0	4	SWS_FULL_CHR_H_INT
water	196:59	0:0	4	)
stmts	197:8	197:31	3	
water	197:8	0:0	4	c
op	197:9	0:0	4	->
water	197:11	0:0	4	chrDstHSubSample
op	197:28	0:0	4	=
water	197:30	0:0	4	1
water	197:31	0:0	4	;
water	200:4	0:0	2	c
op	200:5	0:0	2	->
water	200:7	0:0	2	vChrDrop
op	200:25	0:0	2	=
water	200:27	0:0	2	(
water	200:28	0:0	2	flags
op	200:34	0:0	2	&
water	200:36	0:0	2	SWS_SRC_V_CHR_DROP_MASK
water	200:59	0:0	2	)
op	200:61	0:0	2	>>
water	201:27	0:0	2	SWS_SRC_V_CHR_DROP_SHIFT
water	201:51	0:0	2	;
water	202:4	0:0	2	c
op	202:5	0:0	2	->
water	202:7	0:0	2	chrSrcVSubSample
op	202:24	0:0	2	+=
water	202:27	0:0	2	c
op	202:28	0:0	2	->
water	202:30	0:0	2	vChrDrop
water	202:38	0:0	2	;
if	206:4	217:31	2	(isAnyRGB (srcFormat ) && ! ( flags & SWS_FULL_CHR_H_INP ) && srcFormat != AV_PIX_FMT_RGB8 && srcFormat != AV_PIX_FMT_BGR8 && srcFormat != AV_PIX_FMT_RGB4 && srcFormat != AV_PIX_FMT_BGR4 && srcFormat != AV_PIX_FMT_RGB4_BYTE && srcFormat != AV_PIX_FMT_BGR4_BYTE && srcFormat != AV_PIX_FMT_GBRP9BE && srcFormat != AV_PIX_FMT_GBRP9LE && srcFormat != AV_PIX_FMT_GBRP10BE && srcFormat != AV_PIX_FMT_GBRP10LE && srcFormat != AV_PIX_FMT_GBRP12BE && srcFormat != AV_PIX_FMT_GBRP12LE && srcFormat != AV_PIX_FMT_GBRP14BE && srcFormat != AV_PIX_FMT_GBRP14LE && srcFormat != AV_PIX_FMT_GBRP16BE && srcFormat != AV_PIX_FMT_GBRP16LE && ( ( dstW >> c -> chrDstHSubSample ) <= ( srcW >> 1 ) || ( flags & SWS_FAST_BILINEAR ) ))
cond	206:8	216:36	3	isAnyRGB (srcFormat ) && ! ( flags & SWS_FULL_CHR_H_INP ) && srcFormat != AV_PIX_FMT_RGB8 && srcFormat != AV_PIX_FMT_BGR8 && srcFormat != AV_PIX_FMT_RGB4 && srcFormat != AV_PIX_FMT_BGR4 && srcFormat != AV_PIX_FMT_RGB4_BYTE && srcFormat != AV_PIX_FMT_BGR4_BYTE && srcFormat != AV_PIX_FMT_GBRP9BE && srcFormat != AV_PIX_FMT_GBRP9LE && srcFormat != AV_PIX_FMT_GBRP10BE && srcFormat != AV_PIX_FMT_GBRP10LE && srcFormat != AV_PIX_FMT_GBRP12BE && srcFormat != AV_PIX_FMT_GBRP12LE && srcFormat != AV_PIX_FMT_GBRP14BE && srcFormat != AV_PIX_FMT_GBRP14LE && srcFormat != AV_PIX_FMT_GBRP16BE && srcFormat != AV_PIX_FMT_GBRP16LE && ( ( dstW >> c -> chrDstHSubSample ) <= ( srcW >> 1 ) || ( flags & SWS_FAST_BILINEAR ) )
call	206:8	206:26	4	isAnyRGB
arg	206:17	206:26	5	srcFormat
water	206:17	0:0	6	srcFormat
op	206:28	0:0	4	&&
op	206:31	0:0	4	!
water	206:32	0:0	4	(
water	206:33	0:0	4	flags
op	206:39	0:0	4	&
water	206:41	0:0	4	SWS_FULL_CHR_H_INP
water	206:59	0:0	4	)
op	206:63	0:0	4	&&
water	207:8	0:0	4	srcFormat
op	207:18	0:0	4	!=
water	207:21	0:0	4	AV_PIX_FMT_RGB8
op	207:37	0:0	4	&&
water	207:40	0:0	4	srcFormat
op	207:50	0:0	4	!=
water	207:53	0:0	4	AV_PIX_FMT_BGR8
op	207:69	0:0	4	&&
water	208:8	0:0	4	srcFormat
op	208:18	0:0	4	!=
water	208:21	0:0	4	AV_PIX_FMT_RGB4
op	208:37	0:0	4	&&
water	208:40	0:0	4	srcFormat
op	208:50	0:0	4	!=
water	208:53	0:0	4	AV_PIX_FMT_BGR4
op	208:69	0:0	4	&&
water	209:8	0:0	4	srcFormat
op	209:18	0:0	4	!=
water	209:21	0:0	4	AV_PIX_FMT_RGB4_BYTE
op	209:42	0:0	4	&&
water	209:45	0:0	4	srcFormat
op	209:55	0:0	4	!=
water	209:58	0:0	4	AV_PIX_FMT_BGR4_BYTE
op	209:79	0:0	4	&&
water	210:8	0:0	4	srcFormat
op	210:18	0:0	4	!=
water	210:21	0:0	4	AV_PIX_FMT_GBRP9BE
op	210:42	0:0	4	&&
water	210:45	0:0	4	srcFormat
op	210:55	0:0	4	!=
water	210:58	0:0	4	AV_PIX_FMT_GBRP9LE
op	210:78	0:0	4	&&
water	211:8	0:0	4	srcFormat
op	211:18	0:0	4	!=
water	211:21	0:0	4	AV_PIX_FMT_GBRP10BE
op	211:42	0:0	4	&&
water	211:45	0:0	4	srcFormat
op	211:55	0:0	4	!=
water	211:58	0:0	4	AV_PIX_FMT_GBRP10LE
op	211:78	0:0	4	&&
water	212:8	0:0	4	srcFormat
op	212:18	0:0	4	!=
water	212:21	0:0	4	AV_PIX_FMT_GBRP12BE
op	212:42	0:0	4	&&
water	212:45	0:0	4	srcFormat
op	212:55	0:0	4	!=
water	212:58	0:0	4	AV_PIX_FMT_GBRP12LE
op	212:78	0:0	4	&&
water	213:8	0:0	4	srcFormat
op	213:18	0:0	4	!=
water	213:21	0:0	4	AV_PIX_FMT_GBRP14BE
op	213:42	0:0	4	&&
water	213:45	0:0	4	srcFormat
op	213:55	0:0	4	!=
water	213:58	0:0	4	AV_PIX_FMT_GBRP14LE
op	213:78	0:0	4	&&
water	214:8	0:0	4	srcFormat
op	214:18	0:0	4	!=
water	214:21	0:0	4	AV_PIX_FMT_GBRP16BE
op	214:42	0:0	4	&&
water	214:45	0:0	4	srcFormat
op	214:55	0:0	4	!=
water	214:58	0:0	4	AV_PIX_FMT_GBRP16LE
op	214:78	0:0	4	&&
water	215:8	0:0	4	(
water	215:9	0:0	4	(
water	215:10	0:0	4	dstW
op	215:15	0:0	4	>>
water	215:18	0:0	4	c
op	215:19	0:0	4	->
water	215:21	0:0	4	chrDstHSubSample
water	215:37	0:0	4	)
op	215:39	0:0	4	<=
water	215:42	0:0	4	(
water	215:43	0:0	4	srcW
op	215:48	0:0	4	>>
water	215:51	0:0	4	1
water	215:52	0:0	4	)
op	215:54	0:0	4	||
water	216:9	0:0	4	(
water	216:10	0:0	4	flags
op	216:16	0:0	4	&
water	216:18	0:0	4	SWS_FAST_BILINEAR
water	216:35	0:0	4	)
water	216:36	0:0	4	)
stmts	217:8	217:31	3	
water	217:8	0:0	4	c
op	217:9	0:0	4	->
water	217:11	0:0	4	chrSrcHSubSample
op	217:28	0:0	4	=
water	217:30	0:0	4	1
water	217:31	0:0	4	;
water	220:4	0:0	2	c
op	220:5	0:0	2	->
water	220:7	0:0	2	chrSrcW
op	220:15	0:0	2	=
call	220:17	220:57	2	FF_CEIL_RSHIFT
arg	220:32	220:36	3	srcW
water	220:32	0:0	4	srcW
arg	220:38	220:57	3	c->chrSrcHSubSample
water	220:38	0:0	4	c
op	220:39	0:0	4	->
water	220:41	0:0	4	chrSrcHSubSample
water	220:58	0:0	2	;
water	221:4	0:0	2	c
op	221:5	0:0	2	->
water	221:7	0:0	2	chrSrcH
op	221:15	0:0	2	=
call	221:17	221:57	2	FF_CEIL_RSHIFT
arg	221:32	221:36	3	srcH
water	221:32	0:0	4	srcH
arg	221:38	221:57	3	c->chrSrcVSubSample
water	221:38	0:0	4	c
op	221:39	0:0	4	->
water	221:41	0:0	4	chrSrcVSubSample
water	221:58	0:0	2	;
water	222:4	0:0	2	c
op	222:5	0:0	2	->
water	222:7	0:0	2	chrDstW
op	222:15	0:0	2	=
call	222:17	222:57	2	FF_CEIL_RSHIFT
arg	222:32	222:36	3	dstW
water	222:32	0:0	4	dstW
arg	222:38	222:57	3	c->chrDstHSubSample
water	222:38	0:0	4	c
op	222:39	0:0	4	->
water	222:41	0:0	4	chrDstHSubSample
water	222:58	0:0	2	;
water	223:4	0:0	2	c
op	223:5	0:0	2	->
water	223:7	0:0	2	chrDstH
op	223:15	0:0	2	=
call	223:17	223:57	2	FF_CEIL_RSHIFT
arg	223:32	223:36	3	dstH
water	223:32	0:0	4	dstH
arg	223:38	223:57	3	c->chrDstVSubSample
water	223:38	0:0	4	c
op	223:39	0:0	4	->
water	223:41	0:0	4	chrDstVSubSample
water	223:58	0:0	2	;
call	225:4	225:77	2	FF_ALLOC_OR_GOTO
arg	225:21	225:22	3	c
water	225:21	0:0	4	c
arg	225:24	225:43	3	c->formatConvBuffer
water	225:24	0:0	4	c
op	225:25	0:0	4	->
water	225:27	0:0	4	formatConvBuffer
arg	225:45	225:71	3	FFALIGN(srcW*2+78,16)*2
call	225:45	225:66	4	FFALIGN
arg	225:53	225:62	5	srcW*2+78
water	225:53	0:0	6	srcW
op	225:57	0:0	6	*
water	225:58	0:0	6	2
op	225:59	0:0	6	+
water	225:60	0:0	6	78
arg	225:64	225:66	5	16
water	225:64	0:0	6	16
op	225:68	0:0	4	*
water	225:70	0:0	4	2
arg	225:73	225:77	3	fail
water	225:73	0:0	4	fail
water	225:78	0:0	2	;
water	227:4	0:0	2	c
op	227:5	0:0	2	->
water	227:7	0:0	2	srcBpc
op	227:14	0:0	2	=
water	227:16	0:0	2	1
op	227:18	0:0	2	+
water	227:20	0:0	2	desc_src
op	227:28	0:0	2	->
water	227:30	0:0	2	comp
op	227:34	0:0	2	[
water	227:35	0:0	2	0
op	227:36	0:0	2	]
op	227:37	0:0	2	.
water	227:38	0:0	2	depth_minus1
water	227:50	0:0	2	;
if	228:4	229:21	2	(c -> srcBpc < 8)
cond	228:8	228:20	3	c -> srcBpc < 8
water	228:8	0:0	4	c
op	228:9	0:0	4	->
water	228:11	0:0	4	srcBpc
op	228:18	0:0	4	<
water	228:20	0:0	4	8
stmts	229:8	229:21	3	
water	229:8	0:0	4	c
op	229:9	0:0	4	->
water	229:11	0:0	4	srcBpc
op	229:18	0:0	4	=
water	229:20	0:0	4	8
water	229:21	0:0	4	;
water	230:4	0:0	2	c
op	230:5	0:0	2	->
water	230:7	0:0	2	dstBpc
op	230:14	0:0	2	=
water	230:16	0:0	2	1
op	230:18	0:0	2	+
water	230:20	0:0	2	desc_dst
op	230:28	0:0	2	->
water	230:30	0:0	2	comp
op	230:34	0:0	2	[
water	230:35	0:0	2	0
op	230:36	0:0	2	]
op	230:37	0:0	2	.
water	230:38	0:0	2	depth_minus1
water	230:50	0:0	2	;
if	231:4	232:21	2	(c -> dstBpc < 8)
cond	231:8	231:20	3	c -> dstBpc < 8
water	231:8	0:0	4	c
op	231:9	0:0	4	->
water	231:11	0:0	4	dstBpc
op	231:18	0:0	4	<
water	231:20	0:0	4	8
stmts	232:8	232:21	3	
water	232:8	0:0	4	c
op	232:9	0:0	4	->
water	232:11	0:0	4	dstBpc
op	232:18	0:0	4	=
water	232:20	0:0	4	8
water	232:21	0:0	4	;
if	233:4	234:22	2	(isAnyRGB (srcFormat ) || srcFormat == AV_PIX_FMT_PAL8)
cond	233:8	233:44	3	isAnyRGB (srcFormat ) || srcFormat == AV_PIX_FMT_PAL8
call	233:8	233:26	4	isAnyRGB
arg	233:17	233:26	5	srcFormat
water	233:17	0:0	6	srcFormat
op	233:28	0:0	4	||
water	233:31	0:0	4	srcFormat
op	233:41	0:0	4	==
water	233:44	0:0	4	AV_PIX_FMT_PAL8
stmts	234:8	234:22	3	
water	234:8	0:0	4	c
op	234:9	0:0	4	->
water	234:11	0:0	4	srcBpc
op	234:18	0:0	4	=
water	234:20	0:0	4	16
water	234:22	0:0	4	;
if	235:4	236:24	2	(c -> dstBpc == 16)
cond	235:8	235:21	3	c -> dstBpc == 16
water	235:8	0:0	4	c
op	235:9	0:0	4	->
water	235:11	0:0	4	dstBpc
op	235:18	0:0	4	==
water	235:21	0:0	4	16
stmts	236:8	236:24	3	
water	236:8	0:0	4	dst_stride
op	236:19	0:0	4	<<=
water	236:23	0:0	4	1
water	236:24	0:0	4	;
if	238:4	251:4	2	(INLINE_MMXEXT (cpu_flags ) && c -> srcBpc == 8 && c -> dstBpc <= 14)
cond	238:8	238:67	3	INLINE_MMXEXT (cpu_flags ) && c -> srcBpc == 8 && c -> dstBpc <= 14
call	238:8	238:31	4	INLINE_MMXEXT
arg	238:22	238:31	5	cpu_flags
water	238:22	0:0	6	cpu_flags
op	238:33	0:0	4	&&
water	238:36	0:0	4	c
op	238:37	0:0	4	->
water	238:39	0:0	4	srcBpc
op	238:46	0:0	4	==
water	238:49	0:0	4	8
op	238:51	0:0	4	&&
water	238:54	0:0	4	c
op	238:55	0:0	4	->
water	238:57	0:0	4	dstBpc
op	238:64	0:0	4	<=
water	238:67	0:0	4	14
stmts	238:71	251:4	3	
water	238:71	0:0	4	{
water	239:8	0:0	4	c
op	239:9	0:0	4	->
water	239:11	0:0	4	canMMXEXTBeUsed
op	239:27	0:0	4	=
water	239:29	0:0	4	dstW
op	239:34	0:0	4	>=
water	239:37	0:0	4	srcW
op	239:42	0:0	4	&&
water	239:45	0:0	4	(
water	239:46	0:0	4	dstW
op	239:51	0:0	4	&
water	239:53	0:0	4	31
water	239:55	0:0	4	)
op	239:57	0:0	4	==
water	239:60	0:0	4	0
op	239:62	0:0	4	&&
water	240:29	0:0	4	c
op	240:30	0:0	4	->
water	240:32	0:0	4	chrDstW
op	240:40	0:0	4	>=
water	240:43	0:0	4	c
op	240:44	0:0	4	->
water	240:46	0:0	4	chrSrcW
op	240:54	0:0	4	&&
water	241:29	0:0	4	(
water	241:30	0:0	4	srcW
op	241:35	0:0	4	&
water	241:37	0:0	4	15
water	241:39	0:0	4	)
op	241:41	0:0	4	==
water	241:44	0:0	4	0
water	241:45	0:0	4	;
if	242:8	248:8	4	(! c -> canMMXEXTBeUsed && dstW >= srcW && c -> chrDstW >= c -> chrSrcW && ( srcW & 15 ) == 0 && ( flags & SWS_FAST_BILINEAR ))
cond	242:12	244:41	5	! c -> canMMXEXTBeUsed && dstW >= srcW && c -> chrDstW >= c -> chrSrcW && ( srcW & 15 ) == 0 && ( flags & SWS_FAST_BILINEAR )
op	242:12	0:0	6	!
water	242:13	0:0	6	c
op	242:14	0:0	6	->
water	242:16	0:0	6	canMMXEXTBeUsed
op	242:32	0:0	6	&&
water	242:35	0:0	6	dstW
op	242:40	0:0	6	>=
water	242:43	0:0	6	srcW
op	242:48	0:0	6	&&
water	242:51	0:0	6	c
op	242:52	0:0	6	->
water	242:54	0:0	6	chrDstW
op	242:62	0:0	6	>=
water	242:65	0:0	6	c
op	242:66	0:0	6	->
water	242:68	0:0	6	chrSrcW
op	242:76	0:0	6	&&
water	242:79	0:0	6	(
water	242:80	0:0	6	srcW
op	242:85	0:0	6	&
water	242:87	0:0	6	15
water	242:89	0:0	6	)
op	242:91	0:0	6	==
water	242:94	0:0	6	0
op	244:12	0:0	6	&&
water	244:15	0:0	6	(
water	244:16	0:0	6	flags
op	244:22	0:0	6	&
water	244:24	0:0	6	SWS_FAST_BILINEAR
water	244:41	0:0	6	)
stmts	244:44	248:8	5	
water	244:44	0:0	6	{
if	245:12	247:84	6	(flags & SWS_PRINT_INFO)
cond	245:16	245:24	7	flags & SWS_PRINT_INFO
water	245:16	0:0	8	flags
op	245:22	0:0	8	&
water	245:24	0:0	8	SWS_PRINT_INFO
stmts	246:16	247:84	7	
call	246:16	247:83	8	av_log
arg	246:23	246:24	9	c
water	246:23	0:0	10	c
arg	246:26	246:37	9	AV_LOG_INFO
water	246:26	0:0	10	AV_LOG_INFO
arg	247:23	247:83	9	"output width is not a multiple of 32 -> no MMXEXT scaler\n"
water	247:23	0:0	10	"output width is not a multiple of 32 -> no MMXEXT scaler\n"
water	247:84	0:0	8	;
water	248:8	0:0	6	}
if	249:8	250:34	4	(usesHFilter ||isNBPS (c -> srcFormat ) ||is16BPS (c -> srcFormat ) ||isAnyRGB (c -> srcFormat ))
cond	249:12	249:97	5	usesHFilter ||isNBPS (c -> srcFormat ) ||is16BPS (c -> srcFormat ) ||isAnyRGB (c -> srcFormat )
water	249:12	0:0	6	usesHFilter
op	249:24	0:0	6	||
call	249:27	249:46	6	isNBPS
arg	249:34	249:46	7	c->srcFormat
water	249:34	0:0	8	c
op	249:35	0:0	8	->
water	249:37	0:0	8	srcFormat
op	249:48	0:0	6	||
call	249:51	249:71	6	is16BPS
arg	249:59	249:71	7	c->srcFormat
water	249:59	0:0	8	c
op	249:60	0:0	8	->
water	249:62	0:0	8	srcFormat
op	249:73	0:0	6	||
call	249:76	249:97	6	isAnyRGB
arg	249:85	249:97	7	c->srcFormat
water	249:85	0:0	8	c
op	249:86	0:0	8	->
water	249:88	0:0	8	srcFormat
stmts	250:12	250:34	5	
water	250:12	0:0	6	c
op	250:13	0:0	6	->
water	250:15	0:0	6	canMMXEXTBeUsed
op	250:31	0:0	6	=
water	250:33	0:0	6	0
water	250:34	0:0	6	;
water	251:4	0:0	4	}
else	251:6	252:30	2
stmts	252:8	252:30	3	
water	252:8	0:0	4	c
op	252:9	0:0	4	->
water	252:11	0:0	4	canMMXEXTBeUsed
op	252:27	0:0	4	=
water	252:29	0:0	4	0
water	252:30	0:0	4	;
water	254:4	0:0	2	c
op	254:5	0:0	2	->
water	254:7	0:0	2	chrXInc
op	254:15	0:0	2	=
water	254:17	0:0	2	(
water	254:18	0:0	2	(
water	254:19	0:0	2	(
water	254:20	0:0	2	int64_t
water	254:27	0:0	2	)
water	254:28	0:0	2	c
op	254:29	0:0	2	->
water	254:31	0:0	2	chrSrcW
op	254:39	0:0	2	<<
water	254:42	0:0	2	16
water	254:44	0:0	2	)
op	254:46	0:0	2	+
water	254:48	0:0	2	(
water	254:49	0:0	2	c
op	254:50	0:0	2	->
water	254:52	0:0	2	chrDstW
op	254:60	0:0	2	>>
water	254:63	0:0	2	1
water	254:64	0:0	2	)
water	254:65	0:0	2	)
op	254:67	0:0	2	/
water	254:69	0:0	2	c
op	254:70	0:0	2	->
water	254:72	0:0	2	chrDstW
water	254:79	0:0	2	;
water	255:4	0:0	2	c
op	255:5	0:0	2	->
water	255:7	0:0	2	chrYInc
op	255:15	0:0	2	=
water	255:17	0:0	2	(
water	255:18	0:0	2	(
water	255:19	0:0	2	(
water	255:20	0:0	2	int64_t
water	255:27	0:0	2	)
water	255:28	0:0	2	c
op	255:29	0:0	2	->
water	255:31	0:0	2	chrSrcH
op	255:39	0:0	2	<<
water	255:42	0:0	2	16
water	255:44	0:0	2	)
op	255:46	0:0	2	+
water	255:48	0:0	2	(
water	255:49	0:0	2	c
op	255:50	0:0	2	->
water	255:52	0:0	2	chrDstH
op	255:60	0:0	2	>>
water	255:63	0:0	2	1
water	255:64	0:0	2	)
water	255:65	0:0	2	)
op	255:67	0:0	2	/
water	255:69	0:0	2	c
op	255:70	0:0	2	->
water	255:72	0:0	2	chrDstH
water	255:79	0:0	2	;
if	264:4	274:4	2	(flags & SWS_FAST_BILINEAR)
cond	264:8	264:16	3	flags & SWS_FAST_BILINEAR
water	264:8	0:0	4	flags
op	264:14	0:0	4	&
water	264:16	0:0	4	SWS_FAST_BILINEAR
stmts	264:35	274:4	3	
water	264:35	0:0	4	{
if	265:8	268:8	4	(c -> canMMXEXTBeUsed)
cond	265:12	265:15	5	c -> canMMXEXTBeUsed
water	265:12	0:0	6	c
op	265:13	0:0	6	->
water	265:15	0:0	6	canMMXEXTBeUsed
stmts	265:32	268:8	5	
water	265:32	0:0	6	{
water	266:12	0:0	6	c
op	266:13	0:0	6	->
water	266:15	0:0	6	lumXInc
op	266:23	0:0	6	+=
water	266:26	0:0	6	20
water	266:28	0:0	6	;
water	267:12	0:0	6	c
op	267:13	0:0	6	->
water	267:15	0:0	6	chrXInc
op	267:23	0:0	6	+=
water	267:26	0:0	6	20
water	267:28	0:0	6	;
water	268:8	0:0	6	}
else	270:8	273:8	4
stmts	270:13	273:8	5	
if	270:13	273:8	6	(INLINE_MMX (cpu_flags ) && c -> dstBpc <= 14)
cond	270:17	270:55	7	INLINE_MMX (cpu_flags ) && c -> dstBpc <= 14
call	270:17	270:37	8	INLINE_MMX
arg	270:28	270:37	9	cpu_flags
water	270:28	0:0	10	cpu_flags
op	270:39	0:0	8	&&
water	270:42	0:0	8	c
op	270:43	0:0	8	->
water	270:45	0:0	8	dstBpc
op	270:52	0:0	8	<=
water	270:55	0:0	8	14
stmts	270:59	273:8	7	
water	270:59	0:0	8	{
water	271:12	0:0	8	c
op	271:13	0:0	8	->
water	271:15	0:0	8	lumXInc
op	271:23	0:0	8	=
water	271:25	0:0	8	(
call	271:26	271:50	8	(int64_t)
arg	271:36	271:50	9	srcW-2
water	271:36	0:0	10	srcW
op	271:47	0:0	10	-
water	271:49	0:0	10	2
op	271:52	0:0	8	<<
water	271:55	0:0	8	16
water	271:57	0:0	8	)
op	271:59	0:0	8	/
water	271:61	0:0	8	(
water	271:62	0:0	8	dstW
op	271:73	0:0	8	-
water	271:75	0:0	8	2
water	271:76	0:0	8	)
op	271:78	0:0	8	-
water	271:80	0:0	8	20
water	271:82	0:0	8	;
water	272:12	0:0	8	c
op	272:13	0:0	8	->
water	272:15	0:0	8	chrXInc
op	272:23	0:0	8	=
water	272:25	0:0	8	(
call	272:26	272:50	8	(int64_t)
arg	272:36	272:50	9	c->chrSrcW-2
water	272:36	0:0	10	c
op	272:37	0:0	10	->
water	272:39	0:0	10	chrSrcW
op	272:47	0:0	10	-
water	272:49	0:0	10	2
op	272:52	0:0	8	<<
water	272:55	0:0	8	16
water	272:57	0:0	8	)
op	272:59	0:0	8	/
water	272:61	0:0	8	(
water	272:62	0:0	8	c
op	272:63	0:0	8	->
water	272:65	0:0	8	chrDstW
op	272:73	0:0	8	-
water	272:75	0:0	8	2
water	272:76	0:0	8	)
op	272:78	0:0	8	-
water	272:80	0:0	8	20
water	272:82	0:0	8	;
water	273:8	0:0	8	}
water	274:4	0:0	4	}
if	276:4	299:4	2	(isBayer (srcFormat ))
cond	276:8	276:25	3	isBayer (srcFormat )
call	276:8	276:25	4	isBayer
arg	276:16	276:25	5	srcFormat
water	276:16	0:0	6	srcFormat
stmts	276:28	299:4	3	
water	276:28	0:0	4	{
if	277:8	298:8	4	(! unscaled || ( dstFormat != AV_PIX_FMT_RGB24 && dstFormat != AV_PIX_FMT_YUV420P ))
cond	277:12	278:77	5	! unscaled || ( dstFormat != AV_PIX_FMT_RGB24 && dstFormat != AV_PIX_FMT_YUV420P )
op	277:12	0:0	6	!
water	277:13	0:0	6	unscaled
op	277:22	0:0	6	||
water	278:12	0:0	6	(
water	278:13	0:0	6	dstFormat
op	278:23	0:0	6	!=
water	278:26	0:0	6	AV_PIX_FMT_RGB24
op	278:43	0:0	6	&&
water	278:46	0:0	6	dstFormat
op	278:56	0:0	6	!=
water	278:59	0:0	6	AV_PIX_FMT_YUV420P
water	278:77	0:0	6	)
stmts	278:80	298:8	5	
water	278:80	0:0	6	{
decl	279:12	279:59	6	enum AVPixelFormat	tmpFormat
op	279:41	0:0	6	=
water	279:43	0:0	6	AV_PIX_FMT_RGB24
water	281:12	0:0	6	ret
op	281:16	0:0	6	=
call	281:18	282:57	6	av_image_alloc
arg	281:33	281:48	7	c->cascaded_tmp
water	281:33	0:0	8	c
op	281:34	0:0	8	->
water	281:36	0:0	8	cascaded_tmp
arg	281:50	281:71	7	c->cascaded_tmpStride
water	281:50	0:0	8	c
op	281:51	0:0	8	->
water	281:53	0:0	8	cascaded_tmpStride
arg	282:32	282:36	7	srcW
water	282:32	0:0	8	srcW
arg	282:38	282:42	7	srcH
water	282:38	0:0	8	srcH
arg	282:44	282:53	7	tmpFormat
water	282:44	0:0	8	tmpFormat
arg	282:55	282:57	7	64
water	282:55	0:0	8	64
water	282:58	0:0	6	;
if	283:12	284:26	6	(ret < 0)
cond	283:16	283:22	7	ret < 0
water	283:16	0:0	8	ret
op	283:20	0:0	8	<
water	283:22	0:0	8	0
stmts	284:16	284:26	7	
return	284:16	284:26	8	ret
water	284:23	0:0	9	ret
water	286:12	0:0	6	c
op	286:13	0:0	6	->
water	286:15	0:0	6	cascaded_context
op	286:31	0:0	6	[
water	286:32	0:0	6	0
op	286:33	0:0	6	]
op	286:35	0:0	6	=
call	286:37	288:84	6	sws_getContext
arg	286:52	286:56	7	srcW
water	286:52	0:0	8	srcW
arg	286:58	286:62	7	srcH
water	286:58	0:0	8	srcH
arg	286:64	286:73	7	srcFormat
water	286:64	0:0	8	srcFormat
arg	287:52	287:56	7	srcW
water	287:52	0:0	8	srcW
arg	287:58	287:62	7	srcH
water	287:58	0:0	8	srcH
arg	287:64	287:73	7	tmpFormat
water	287:64	0:0	8	tmpFormat
arg	288:52	288:57	7	flags
water	288:52	0:0	8	flags
arg	288:59	288:68	7	srcFilter
water	288:59	0:0	8	srcFilter
arg	288:70	288:74	7	NULL
water	288:70	0:0	8	NULL
arg	288:76	288:84	7	c->param
water	288:76	0:0	8	c
op	288:77	0:0	8	->
water	288:79	0:0	8	param
water	288:85	0:0	6	;
if	289:12	290:25	6	(! c -> cascaded_context [ 0 ])
cond	289:16	289:38	7	! c -> cascaded_context [ 0 ]
op	289:16	0:0	8	!
water	289:17	0:0	8	c
op	289:18	0:0	8	->
water	289:20	0:0	8	cascaded_context
op	289:36	0:0	8	[
water	289:37	0:0	8	0
op	289:38	0:0	8	]
stmts	290:16	290:25	7	
return	290:16	290:25	8	-1
op	290:23	0:0	9	-
water	290:24	0:0	9	1
water	292:12	0:0	6	c
op	292:13	0:0	6	->
water	292:15	0:0	6	cascaded_context
op	292:31	0:0	6	[
water	292:32	0:0	6	1
op	292:33	0:0	6	]
op	292:35	0:0	6	=
call	292:37	294:84	6	sws_getContext
arg	292:52	292:56	7	srcW
water	292:52	0:0	8	srcW
arg	292:58	292:62	7	srcH
water	292:58	0:0	8	srcH
arg	292:64	292:73	7	tmpFormat
water	292:64	0:0	8	tmpFormat
arg	293:52	293:56	7	dstW
water	293:52	0:0	8	dstW
arg	293:58	293:62	7	dstH
water	293:58	0:0	8	dstH
arg	293:64	293:73	7	dstFormat
water	293:64	0:0	8	dstFormat
arg	294:52	294:57	7	flags
water	294:52	0:0	8	flags
arg	294:59	294:63	7	NULL
water	294:59	0:0	8	NULL
arg	294:65	294:74	7	dstFilter
water	294:65	0:0	8	dstFilter
arg	294:76	294:84	7	c->param
water	294:76	0:0	8	c
op	294:77	0:0	8	->
water	294:79	0:0	8	param
water	294:85	0:0	6	;
if	295:12	296:25	6	(! c -> cascaded_context [ 1 ])
cond	295:16	295:38	7	! c -> cascaded_context [ 1 ]
op	295:16	0:0	8	!
water	295:17	0:0	8	c
op	295:18	0:0	8	->
water	295:20	0:0	8	cascaded_context
op	295:36	0:0	8	[
water	295:37	0:0	8	1
op	295:38	0:0	8	]
stmts	296:16	296:25	7	
return	296:16	296:25	8	-1
op	296:23	0:0	9	-
water	296:24	0:0	9	1
return	297:12	297:20	6	0
water	297:19	0:0	7	0
water	298:8	0:0	6	}
water	299:4	0:0	4	}
water	304:4	0:0	2	{
if	307:8	363:8	2	(c -> canMMXEXTBeUsed && ( flags & SWS_FAST_BILINEAR ))
cond	307:12	307:60	3	c -> canMMXEXTBeUsed && ( flags & SWS_FAST_BILINEAR )
water	307:12	0:0	4	c
op	307:13	0:0	4	->
water	307:15	0:0	4	canMMXEXTBeUsed
op	307:31	0:0	4	&&
water	307:34	0:0	4	(
water	307:35	0:0	4	flags
op	307:41	0:0	4	&
water	307:43	0:0	4	SWS_FAST_BILINEAR
water	307:60	0:0	4	)
stmts	307:63	363:8	3	
water	307:63	0:0	4	{
water	308:12	0:0	4	c
op	308:13	0:0	4	->
water	308:15	0:0	4	lumMmxextFilterCodeSize
op	308:39	0:0	4	=
call	308:41	309:74	4	ff_init_hscaler_mmxext
arg	308:64	308:68	5	dstW
water	308:64	0:0	6	dstW
arg	308:70	308:80	5	c->lumXInc
water	308:70	0:0	6	c
op	308:71	0:0	6	->
water	308:73	0:0	6	lumXInc
arg	308:82	308:86	5	NULL
water	308:82	0:0	6	NULL
arg	309:61	309:65	5	NULL
water	309:61	0:0	6	NULL
arg	309:67	309:71	5	NULL
water	309:67	0:0	6	NULL
arg	309:73	309:74	5	8
water	309:73	0:0	6	8
water	309:75	0:0	4	;
water	310:12	0:0	4	c
op	310:13	0:0	4	->
water	310:15	0:0	4	chrMmxextFilterCodeSize
op	310:39	0:0	4	=
call	310:41	311:80	4	ff_init_hscaler_mmxext
arg	310:64	310:74	5	c->chrDstW
water	310:64	0:0	6	c
op	310:65	0:0	6	->
water	310:67	0:0	6	chrDstW
arg	310:76	310:86	5	c->chrXInc
water	310:76	0:0	6	c
op	310:77	0:0	6	->
water	310:79	0:0	6	chrXInc
arg	311:61	311:65	5	NULL
water	311:61	0:0	6	NULL
arg	311:67	311:71	5	NULL
water	311:67	0:0	6	NULL
arg	311:73	311:77	5	NULL
water	311:73	0:0	6	NULL
arg	311:79	311:80	5	4
water	311:79	0:0	6	4
water	311:81	0:0	4	;
water	314:12	0:0	4	c
op	314:13	0:0	4	->
water	314:15	0:0	4	lumMmxextFilterCode
op	314:35	0:0	4	=
call	314:37	317:47	4	mmap
arg	314:42	314:46	5	NULL
water	314:42	0:0	6	NULL
arg	314:48	314:74	5	c->lumMmxextFilterCodeSize
water	314:48	0:0	6	c
op	314:49	0:0	6	->
water	314:51	0:0	6	lumMmxextFilterCodeSize
arg	315:42	315:64	5	PROT_READ|PROT_WRITE
water	315:42	0:0	6	PROT_READ
op	315:52	0:0	6	|
water	315:54	0:0	6	PROT_WRITE
arg	316:42	316:69	5	MAP_PRIVATE|MAP_ANONYMOUS
water	316:42	0:0	6	MAP_PRIVATE
op	316:54	0:0	6	|
water	316:56	0:0	6	MAP_ANONYMOUS
arg	317:42	317:44	5	-1
op	317:42	0:0	6	-
water	317:43	0:0	6	1
arg	317:46	317:47	5	0
water	317:46	0:0	6	0
water	317:48	0:0	4	;
water	318:12	0:0	4	c
op	318:13	0:0	4	->
water	318:15	0:0	4	chrMmxextFilterCode
op	318:35	0:0	4	=
call	318:37	321:47	4	mmap
arg	318:42	318:46	5	NULL
water	318:42	0:0	6	NULL
arg	318:48	318:74	5	c->chrMmxextFilterCodeSize
water	318:48	0:0	6	c
op	318:49	0:0	6	->
water	318:51	0:0	6	chrMmxextFilterCodeSize
arg	319:42	319:64	5	PROT_READ|PROT_WRITE
water	319:42	0:0	6	PROT_READ
op	319:52	0:0	6	|
water	319:54	0:0	6	PROT_WRITE
arg	320:42	320:69	5	MAP_PRIVATE|MAP_ANONYMOUS
water	320:42	0:0	6	MAP_PRIVATE
op	320:54	0:0	6	|
water	320:56	0:0	6	MAP_ANONYMOUS
arg	321:42	321:44	5	-1
op	321:42	0:0	6	-
water	321:43	0:0	6	1
arg	321:46	321:47	5	0
water	321:46	0:0	6	0
water	321:48	0:0	4	;
water	323:12	0:0	4	c
op	323:13	0:0	4	->
water	323:15	0:0	4	lumMmxextFilterCode
op	323:35	0:0	4	=
call	323:37	326:72	4	VirtualAlloc
arg	323:50	323:54	5	NULL
water	323:50	0:0	6	NULL
arg	324:50	324:76	5	c->lumMmxextFilterCodeSize
water	324:50	0:0	6	c
op	324:51	0:0	6	->
water	324:53	0:0	6	lumMmxextFilterCodeSize
arg	325:50	325:60	5	MEM_COMMIT
water	325:50	0:0	6	MEM_COMMIT
arg	326:50	326:72	5	PAGE_EXECUTE_READWRITE
water	326:50	0:0	6	PAGE_EXECUTE_READWRITE
water	326:73	0:0	4	;
water	327:12	0:0	4	c
op	327:13	0:0	4	->
water	327:15	0:0	4	chrMmxextFilterCode
op	327:35	0:0	4	=
call	327:37	330:72	4	VirtualAlloc
arg	327:50	327:54	5	NULL
water	327:50	0:0	6	NULL
arg	328:50	328:76	5	c->chrMmxextFilterCodeSize
water	328:50	0:0	6	c
op	328:51	0:0	6	->
water	328:53	0:0	6	chrMmxextFilterCodeSize
arg	329:50	329:60	5	MEM_COMMIT
water	329:50	0:0	6	MEM_COMMIT
arg	330:50	330:72	5	PAGE_EXECUTE_READWRITE
water	330:50	0:0	6	PAGE_EXECUTE_READWRITE
water	330:73	0:0	4	;
water	332:12	0:0	4	c
op	332:13	0:0	4	->
water	332:15	0:0	4	lumMmxextFilterCode
op	332:35	0:0	4	=
call	332:37	332:73	4	av_malloc
arg	332:47	332:73	5	c->lumMmxextFilterCodeSize
water	332:47	0:0	6	c
op	332:48	0:0	6	->
water	332:50	0:0	6	lumMmxextFilterCodeSize
water	332:74	0:0	4	;
water	333:12	0:0	4	c
op	333:13	0:0	4	->
water	333:15	0:0	4	chrMmxextFilterCode
op	333:35	0:0	4	=
call	333:37	333:73	4	av_malloc
arg	333:47	333:73	5	c->chrMmxextFilterCodeSize
water	333:47	0:0	6	c
op	333:48	0:0	6	->
water	333:50	0:0	6	chrMmxextFilterCodeSize
water	333:74	0:0	4	;
if	337:12	344:12	4	(c -> lumMmxextFilterCode == MAP_FAILED || c -> chrMmxextFilterCode == MAP_FAILED)
cond	337:16	337:82	5	c -> lumMmxextFilterCode == MAP_FAILED || c -> chrMmxextFilterCode == MAP_FAILED
water	337:16	0:0	6	c
op	337:17	0:0	6	->
water	337:19	0:0	6	lumMmxextFilterCode
op	337:39	0:0	6	==
water	337:42	0:0	6	MAP_FAILED
op	337:53	0:0	6	||
water	337:56	0:0	6	c
op	337:57	0:0	6	->
water	337:59	0:0	6	chrMmxextFilterCode
op	337:79	0:0	6	==
water	337:82	0:0	6	MAP_FAILED
stmts	339:12	344:12	5	
if	339:12	344:12	6	(! c -> lumMmxextFilterCode || ! c -> chrMmxextFilterCode)
cond	339:16	339:47	7	! c -> lumMmxextFilterCode || ! c -> chrMmxextFilterCode
op	339:16	0:0	8	!
water	339:17	0:0	8	c
op	339:18	0:0	8	->
water	339:20	0:0	8	lumMmxextFilterCode
op	339:40	0:0	8	||
op	339:43	0:0	8	!
water	339:44	0:0	8	c
op	339:45	0:0	8	->
water	339:47	0:0	8	chrMmxextFilterCode
stmts	341:12	344:12	7	
water	341:12	0:0	8	{
call	342:16	342:77	8	av_log
arg	342:23	342:24	9	c
water	342:23	0:0	10	c
arg	342:26	342:38	9	AV_LOG_ERROR
water	342:26	0:0	10	AV_LOG_ERROR
arg	342:40	342:77	9	"Failed to allocate MMX2FilterCode\n"
water	342:40	0:0	10	"Failed to allocate MMX2FilterCode\n"
water	342:78	0:0	8	;
return	343:16	343:38	8	AVERROR(ENOMEM)
call	343:23	343:37	9	AVERROR
arg	343:31	343:37	10	ENOMEM
water	343:31	0:0	11	ENOMEM
water	344:12	0:0	8	}
call	346:12	346:99	4	FF_ALLOCZ_OR_GOTO
arg	346:30	346:31	5	c
water	346:30	0:0	6	c
arg	346:33	346:46	5	c->hLumFilter
water	346:33	0:0	6	c
op	346:34	0:0	6	->
water	346:36	0:0	6	hLumFilter
arg	346:51	346:93	5	(dstW/8+8)*sizeof(int16_t)
water	346:51	0:0	6	(
water	346:52	0:0	6	dstW
op	346:67	0:0	6	/
water	346:69	0:0	6	8
op	346:71	0:0	6	+
water	346:73	0:0	6	8
water	346:74	0:0	6	)
op	346:76	0:0	6	*
op	346:78	0:0	6	sizeof
water	346:84	0:0	6	(
water	346:85	0:0	6	int16_t
water	346:92	0:0	6	)
arg	346:95	346:99	5	fail
water	346:95	0:0	6	fail
water	346:100	0:0	4	;
call	347:12	347:99	4	FF_ALLOCZ_OR_GOTO
arg	347:30	347:31	5	c
water	347:30	0:0	6	c
arg	347:33	347:46	5	c->hChrFilter
water	347:33	0:0	6	c
op	347:34	0:0	6	->
water	347:36	0:0	6	hChrFilter
arg	347:51	347:93	5	(c->chrDstW/4+8)*sizeof(int16_t)
water	347:51	0:0	6	(
water	347:52	0:0	6	c
op	347:53	0:0	6	->
water	347:55	0:0	6	chrDstW
op	347:67	0:0	6	/
water	347:69	0:0	6	4
op	347:71	0:0	6	+
water	347:73	0:0	6	8
water	347:74	0:0	6	)
op	347:76	0:0	6	*
op	347:78	0:0	6	sizeof
water	347:84	0:0	6	(
water	347:85	0:0	6	int16_t
water	347:92	0:0	6	)
arg	347:95	347:99	5	fail
water	347:95	0:0	6	fail
water	347:100	0:0	4	;
call	348:12	348:99	4	FF_ALLOCZ_OR_GOTO
arg	348:30	348:31	5	c
water	348:30	0:0	6	c
arg	348:33	348:49	5	c->hLumFilterPos
water	348:33	0:0	6	c
op	348:34	0:0	6	->
water	348:36	0:0	6	hLumFilterPos
arg	348:51	348:93	5	(dstW/2/8+8)*sizeof(int32_t)
water	348:51	0:0	6	(
water	348:52	0:0	6	dstW
op	348:63	0:0	6	/
water	348:65	0:0	6	2
op	348:67	0:0	6	/
water	348:69	0:0	6	8
op	348:71	0:0	6	+
water	348:73	0:0	6	8
water	348:74	0:0	6	)
op	348:76	0:0	6	*
op	348:78	0:0	6	sizeof
water	348:84	0:0	6	(
water	348:85	0:0	6	int32_t
water	348:92	0:0	6	)
arg	348:95	348:99	5	fail
water	348:95	0:0	6	fail
water	348:100	0:0	4	;
call	349:12	349:99	4	FF_ALLOCZ_OR_GOTO
arg	349:30	349:31	5	c
water	349:30	0:0	6	c
arg	349:33	349:49	5	c->hChrFilterPos
water	349:33	0:0	6	c
op	349:34	0:0	6	->
water	349:36	0:0	6	hChrFilterPos
arg	349:51	349:93	5	(c->chrDstW/2/4+8)*sizeof(int32_t)
water	349:51	0:0	6	(
water	349:52	0:0	6	c
op	349:53	0:0	6	->
water	349:55	0:0	6	chrDstW
op	349:63	0:0	6	/
water	349:65	0:0	6	2
op	349:67	0:0	6	/
water	349:69	0:0	6	4
op	349:71	0:0	6	+
water	349:73	0:0	6	8
water	349:74	0:0	6	)
op	349:76	0:0	6	*
op	349:78	0:0	6	sizeof
water	349:84	0:0	6	(
water	349:85	0:0	6	int32_t
water	349:92	0:0	6	)
arg	349:95	349:99	5	fail
water	349:95	0:0	6	fail
water	349:100	0:0	4	;
call	351:12	352:77	4	ff_init_hscaler_mmxext
arg	351:41	351:45	5	dstW
water	351:41	0:0	6	dstW
arg	351:47	351:57	5	c->lumXInc
water	351:47	0:0	6	c
op	351:48	0:0	6	->
water	351:50	0:0	6	lumXInc
arg	351:59	351:81	5	c->lumMmxextFilterCode
water	351:59	0:0	6	c
op	351:60	0:0	6	->
water	351:62	0:0	6	lumMmxextFilterCode
arg	352:32	352:45	5	c->hLumFilter
water	352:32	0:0	6	c
op	352:33	0:0	6	->
water	352:35	0:0	6	hLumFilter
arg	352:47	352:74	5	(uint32_t*)c->hLumFilterPos
water	352:47	0:0	6	(
water	352:48	0:0	6	uint32_t
op	352:56	0:0	6	*
water	352:57	0:0	6	)
water	352:58	0:0	6	c
op	352:59	0:0	6	->
water	352:61	0:0	6	hLumFilterPos
arg	352:76	352:77	5	8
water	352:76	0:0	6	8
water	352:78	0:0	4	;
call	353:12	354:77	4	ff_init_hscaler_mmxext
arg	353:35	353:45	5	c->chrDstW
water	353:35	0:0	6	c
op	353:36	0:0	6	->
water	353:38	0:0	6	chrDstW
arg	353:47	353:57	5	c->chrXInc
water	353:47	0:0	6	c
op	353:48	0:0	6	->
water	353:50	0:0	6	chrXInc
arg	353:59	353:81	5	c->chrMmxextFilterCode
water	353:59	0:0	6	c
op	353:60	0:0	6	->
water	353:62	0:0	6	chrMmxextFilterCode
arg	354:32	354:45	5	c->hChrFilter
water	354:32	0:0	6	c
op	354:33	0:0	6	->
water	354:35	0:0	6	hChrFilter
arg	354:47	354:74	5	(uint32_t*)c->hChrFilterPos
water	354:47	0:0	6	(
water	354:48	0:0	6	uint32_t
op	354:56	0:0	6	*
water	354:57	0:0	6	)
water	354:58	0:0	6	c
op	354:59	0:0	6	->
water	354:61	0:0	6	hChrFilterPos
arg	354:76	354:77	5	4
water	354:76	0:0	6	4
water	354:78	0:0	4	;
if	357:12	361:12	4	(mprotect (c -> lumMmxextFilterCode ,c -> lumMmxextFilterCodeSize ,PROT_EXEC | PROT_READ ) == - 1 ||mprotect (c -> chrMmxextFilterCode ,c -> chrMmxextFilterCodeSize ,PROT_EXEC | PROT_READ ) == - 1)
cond	357:19	358:107	5	mprotect (c -> lumMmxextFilterCode ,c -> lumMmxextFilterCodeSize ,PROT_EXEC | PROT_READ ) == - 1 ||mprotect (c -> chrMmxextFilterCode ,c -> chrMmxextFilterCodeSize ,PROT_EXEC | PROT_READ ) == - 1
call	357:19	357:101	6	mprotect
arg	357:28	357:50	7	c->lumMmxextFilterCode
water	357:28	0:0	8	c
op	357:29	0:0	8	->
water	357:31	0:0	8	lumMmxextFilterCode
arg	357:52	357:78	7	c->lumMmxextFilterCodeSize
water	357:52	0:0	8	c
op	357:53	0:0	8	->
water	357:55	0:0	8	lumMmxextFilterCodeSize
arg	357:80	357:101	7	PROT_EXEC|PROT_READ
water	357:80	0:0	8	PROT_EXEC
op	357:90	0:0	8	|
water	357:92	0:0	8	PROT_READ
op	357:103	0:0	6	==
op	357:106	0:0	6	-
water	357:107	0:0	6	1
op	358:16	0:0	6	||
call	358:19	358:101	6	mprotect
arg	358:28	358:50	7	c->chrMmxextFilterCode
water	358:28	0:0	8	c
op	358:29	0:0	8	->
water	358:31	0:0	8	chrMmxextFilterCode
arg	358:52	358:78	7	c->chrMmxextFilterCodeSize
water	358:52	0:0	8	c
op	358:53	0:0	8	->
water	358:55	0:0	8	chrMmxextFilterCodeSize
arg	358:80	358:101	7	PROT_EXEC|PROT_READ
water	358:80	0:0	8	PROT_EXEC
op	358:90	0:0	8	|
water	358:92	0:0	8	PROT_READ
op	358:103	0:0	6	==
op	358:106	0:0	6	-
water	358:107	0:0	6	1
stmts	358:110	361:12	5	
water	358:110	0:0	6	{
call	359:16	359:92	6	av_log
arg	359:23	359:24	7	c
water	359:23	0:0	8	c
arg	359:26	359:38	7	AV_LOG_ERROR
water	359:26	0:0	8	AV_LOG_ERROR
arg	359:40	359:92	7	"mprotect failed, cannot use fast bilinear scaler\n"
water	359:40	0:0	8	"mprotect failed, cannot use fast bilinear scaler\n"
water	359:93	0:0	6	;
goto	360:16	360:25	6	fail
water	360:21	0:0	7	fail
water	361:12	0:0	6	}
water	363:8	0:0	4	}
else	363:10	387:8	2
stmts	365:8	387:8	3	
water	365:8	0:0	4	{
decl	366:12	367:66	4	const int	filterAlign
op	366:34	0:0	4	=
call	366:36	366:53	5	X86_MMX
arg	366:44	366:53	6	cpu_flags
water	366:44	0:0	7	cpu_flags
water	366:59	0:0	4	?
water	366:61	0:0	4	4
water	366:63	0:0	4	:
call	367:36	367:57	5	PPC_ALTIVEC
arg	367:48	367:57	6	cpu_flags
water	367:48	0:0	7	cpu_flags
water	367:59	0:0	4	?
water	367:61	0:0	4	8
water	367:63	0:0	4	:
water	367:65	0:0	4	1
if	369:12	377:25	4	(( ret =initFilter (& c -> hLumFilter ,& c -> hLumFilterPos ,& c -> hLumFilterSize ,c -> lumXInc ,srcW ,dstW ,filterAlign ,1 << 14 ,( flags & SWS_BICUBLIN ) ? ( flags | SWS_BICUBIC ) : flags ,cpu_flags ,srcFilter -> lumH ,dstFilter -> lumH ,c -> param ,get_local_pos (c ,0 ,0 ,0 ) ,get_local_pos (c ,0 ,0 ,0 ) ) ) < 0)
cond	369:16	376:57	5	( ret =initFilter (& c -> hLumFilter ,& c -> hLumFilterPos ,& c -> hLumFilterSize ,c -> lumXInc ,srcW ,dstW ,filterAlign ,1 << 14 ,( flags & SWS_BICUBLIN ) ? ( flags | SWS_BICUBIC ) : flags ,cpu_flags ,srcFilter -> lumH ,dstFilter -> lumH ,c -> param ,get_local_pos (c ,0 ,0 ,0 ) ,get_local_pos (c ,0 ,0 ,0 ) ) ) < 0
water	369:16	0:0	6	(
water	369:17	0:0	6	ret
op	369:21	0:0	6	=
call	369:23	376:52	6	initFilter
arg	369:34	369:48	7	&c->hLumFilter
op	369:34	0:0	8	&
water	369:35	0:0	8	c
op	369:36	0:0	8	->
water	369:38	0:0	8	hLumFilter
arg	369:50	369:67	7	&c->hLumFilterPos
op	369:50	0:0	8	&
water	369:51	0:0	8	c
op	369:52	0:0	8	->
water	369:54	0:0	8	hLumFilterPos
arg	370:27	370:45	7	&c->hLumFilterSize
op	370:27	0:0	8	&
water	370:28	0:0	8	c
op	370:29	0:0	8	->
water	370:31	0:0	8	hLumFilterSize
arg	370:47	370:57	7	c->lumXInc
water	370:47	0:0	8	c
op	370:48	0:0	8	->
water	370:50	0:0	8	lumXInc
arg	371:27	371:31	7	srcW
water	371:27	0:0	8	srcW
arg	371:33	371:37	7	dstW
water	371:33	0:0	8	dstW
arg	371:39	371:50	7	filterAlign
water	371:39	0:0	8	filterAlign
arg	371:52	371:59	7	1<<14
water	371:52	0:0	8	1
op	371:54	0:0	8	<<
water	371:57	0:0	8	14
arg	372:27	372:81	7	(flags&SWS_BICUBLIN)?(flags|SWS_BICUBIC):flags
water	372:27	0:0	8	(
water	372:28	0:0	8	flags
op	372:34	0:0	8	&
water	372:36	0:0	8	SWS_BICUBLIN
water	372:48	0:0	8	)
water	372:50	0:0	8	?
water	372:52	0:0	8	(
water	372:53	0:0	8	flags
op	372:59	0:0	8	|
water	372:61	0:0	8	SWS_BICUBIC
water	372:72	0:0	8	)
water	372:74	0:0	8	:
water	372:76	0:0	8	flags
arg	373:27	373:36	7	cpu_flags
water	373:27	0:0	8	cpu_flags
arg	373:38	373:53	7	srcFilter->lumH
water	373:38	0:0	8	srcFilter
op	373:47	0:0	8	->
water	373:49	0:0	8	lumH
arg	373:55	373:70	7	dstFilter->lumH
water	373:55	0:0	8	dstFilter
op	373:64	0:0	8	->
water	373:66	0:0	8	lumH
arg	374:27	374:35	7	c->param
water	374:27	0:0	8	c
op	374:28	0:0	8	->
water	374:30	0:0	8	param
arg	375:27	375:52	7	get_local_pos(c,0,0,0)
call	375:27	375:51	8	get_local_pos
arg	375:41	375:42	9	c
water	375:41	0:0	10	c
arg	375:44	375:45	9	0
water	375:44	0:0	10	0
arg	375:47	375:48	9	0
water	375:47	0:0	10	0
arg	375:50	375:51	9	0
water	375:50	0:0	10	0
arg	376:27	376:52	7	get_local_pos(c,0,0,0)
call	376:27	376:51	8	get_local_pos
arg	376:41	376:42	9	c
water	376:41	0:0	10	c
arg	376:44	376:45	9	0
water	376:44	0:0	10	0
arg	376:47	376:48	9	0
water	376:47	0:0	10	0
arg	376:50	376:51	9	0
water	376:50	0:0	10	0
water	376:53	0:0	6	)
op	376:55	0:0	6	<
water	376:57	0:0	6	0
stmts	377:16	377:25	5	
goto	377:16	377:25	6	fail
water	377:21	0:0	7	fail
if	378:12	386:25	4	(( ret =initFilter (& c -> hChrFilter ,& c -> hChrFilterPos ,& c -> hChrFilterSize ,c -> chrXInc ,c -> chrSrcW ,c -> chrDstW ,filterAlign ,1 << 14 ,( flags & SWS_BICUBLIN ) ? ( flags | SWS_BILINEAR ) : flags ,cpu_flags ,srcFilter -> chrH ,dstFilter -> chrH ,c -> param ,get_local_pos (c ,c -> chrSrcHSubSample ,c -> src_h_chr_pos ,0 ) ,get_local_pos (c ,c -> chrDstHSubSample ,c -> dst_h_chr_pos ,0 ) ) ) < 0)
cond	378:16	385:90	5	( ret =initFilter (& c -> hChrFilter ,& c -> hChrFilterPos ,& c -> hChrFilterSize ,c -> chrXInc ,c -> chrSrcW ,c -> chrDstW ,filterAlign ,1 << 14 ,( flags & SWS_BICUBLIN ) ? ( flags | SWS_BILINEAR ) : flags ,cpu_flags ,srcFilter -> chrH ,dstFilter -> chrH ,c -> param ,get_local_pos (c ,c -> chrSrcHSubSample ,c -> src_h_chr_pos ,0 ) ,get_local_pos (c ,c -> chrDstHSubSample ,c -> dst_h_chr_pos ,0 ) ) ) < 0
water	378:16	0:0	6	(
water	378:17	0:0	6	ret
op	378:21	0:0	6	=
call	378:23	385:85	6	initFilter
arg	378:34	378:48	7	&c->hChrFilter
op	378:34	0:0	8	&
water	378:35	0:0	8	c
op	378:36	0:0	8	->
water	378:38	0:0	8	hChrFilter
arg	378:50	378:67	7	&c->hChrFilterPos
op	378:50	0:0	8	&
water	378:51	0:0	8	c
op	378:52	0:0	8	->
water	378:54	0:0	8	hChrFilterPos
arg	379:27	379:45	7	&c->hChrFilterSize
op	379:27	0:0	8	&
water	379:28	0:0	8	c
op	379:29	0:0	8	->
water	379:31	0:0	8	hChrFilterSize
arg	379:47	379:57	7	c->chrXInc
water	379:47	0:0	8	c
op	379:48	0:0	8	->
water	379:50	0:0	8	chrXInc
arg	380:27	380:37	7	c->chrSrcW
water	380:27	0:0	8	c
op	380:28	0:0	8	->
water	380:30	0:0	8	chrSrcW
arg	380:39	380:49	7	c->chrDstW
water	380:39	0:0	8	c
op	380:40	0:0	8	->
water	380:42	0:0	8	chrDstW
arg	380:51	380:62	7	filterAlign
water	380:51	0:0	8	filterAlign
arg	380:64	380:71	7	1<<14
water	380:64	0:0	8	1
op	380:66	0:0	8	<<
water	380:69	0:0	8	14
arg	381:27	381:82	7	(flags&SWS_BICUBLIN)?(flags|SWS_BILINEAR):flags
water	381:27	0:0	8	(
water	381:28	0:0	8	flags
op	381:34	0:0	8	&
water	381:36	0:0	8	SWS_BICUBLIN
water	381:48	0:0	8	)
water	381:50	0:0	8	?
water	381:52	0:0	8	(
water	381:53	0:0	8	flags
op	381:59	0:0	8	|
water	381:61	0:0	8	SWS_BILINEAR
water	381:73	0:0	8	)
water	381:75	0:0	8	:
water	381:77	0:0	8	flags
arg	382:27	382:36	7	cpu_flags
water	382:27	0:0	8	cpu_flags
arg	382:38	382:53	7	srcFilter->chrH
water	382:38	0:0	8	srcFilter
op	382:47	0:0	8	->
water	382:49	0:0	8	chrH
arg	382:55	382:70	7	dstFilter->chrH
water	382:55	0:0	8	dstFilter
op	382:64	0:0	8	->
water	382:66	0:0	8	chrH
arg	383:27	383:35	7	c->param
water	383:27	0:0	8	c
op	383:28	0:0	8	->
water	383:30	0:0	8	param
arg	384:27	384:85	7	get_local_pos(c,c->chrSrcHSubSample,c->src_h_chr_pos,0)
call	384:27	384:84	8	get_local_pos
arg	384:41	384:42	9	c
water	384:41	0:0	10	c
arg	384:44	384:63	9	c->chrSrcHSubSample
water	384:44	0:0	10	c
op	384:45	0:0	10	->
water	384:47	0:0	10	chrSrcHSubSample
arg	384:65	384:81	9	c->src_h_chr_pos
water	384:65	0:0	10	c
op	384:66	0:0	10	->
water	384:68	0:0	10	src_h_chr_pos
arg	384:83	384:84	9	0
water	384:83	0:0	10	0
arg	385:27	385:85	7	get_local_pos(c,c->chrDstHSubSample,c->dst_h_chr_pos,0)
call	385:27	385:84	8	get_local_pos
arg	385:41	385:42	9	c
water	385:41	0:0	10	c
arg	385:44	385:63	9	c->chrDstHSubSample
water	385:44	0:0	10	c
op	385:45	0:0	10	->
water	385:47	0:0	10	chrDstHSubSample
arg	385:65	385:81	9	c->dst_h_chr_pos
water	385:65	0:0	10	c
op	385:66	0:0	10	->
water	385:68	0:0	10	dst_h_chr_pos
arg	385:83	385:84	9	0
water	385:83	0:0	10	0
water	385:86	0:0	6	)
op	385:88	0:0	6	<
water	385:90	0:0	6	0
stmts	386:16	386:25	5	
goto	386:16	386:25	6	fail
water	386:21	0:0	7	fail
water	387:8	0:0	4	}
water	388:4	0:0	2	}
water	391:4	0:0	2	{
decl	392:8	393:62	2	const int	filterAlign
op	392:30	0:0	2	=
call	392:32	392:49	3	X86_MMX
arg	392:40	392:49	4	cpu_flags
water	392:40	0:0	5	cpu_flags
water	392:55	0:0	2	?
water	392:57	0:0	2	2
water	392:59	0:0	2	:
call	393:32	393:53	3	PPC_ALTIVEC
arg	393:44	393:53	4	cpu_flags
water	393:44	0:0	5	cpu_flags
water	393:55	0:0	2	?
water	393:57	0:0	2	8
water	393:59	0:0	2	:
water	393:61	0:0	2	1
if	395:8	402:21	2	(( ret =initFilter (& c -> vLumFilter ,& c -> vLumFilterPos ,& c -> vLumFilterSize ,c -> lumYInc ,srcH ,dstH ,filterAlign ,( 1 << 12 ) ,( flags & SWS_BICUBLIN ) ? ( flags | SWS_BICUBIC ) : flags ,cpu_flags ,srcFilter -> lumV ,dstFilter -> lumV ,c -> param ,get_local_pos (c ,0 ,0 ,1 ) ,get_local_pos (c ,0 ,0 ,1 ) ) ) < 0)
cond	395:12	401:53	3	( ret =initFilter (& c -> vLumFilter ,& c -> vLumFilterPos ,& c -> vLumFilterSize ,c -> lumYInc ,srcH ,dstH ,filterAlign ,( 1 << 12 ) ,( flags & SWS_BICUBLIN ) ? ( flags | SWS_BICUBIC ) : flags ,cpu_flags ,srcFilter -> lumV ,dstFilter -> lumV ,c -> param ,get_local_pos (c ,0 ,0 ,1 ) ,get_local_pos (c ,0 ,0 ,1 ) ) ) < 0
water	395:12	0:0	4	(
water	395:13	0:0	4	ret
op	395:17	0:0	4	=
call	395:19	401:48	4	initFilter
arg	395:30	395:44	5	&c->vLumFilter
op	395:30	0:0	6	&
water	395:31	0:0	6	c
op	395:32	0:0	6	->
water	395:34	0:0	6	vLumFilter
arg	395:46	395:63	5	&c->vLumFilterPos
op	395:46	0:0	6	&
water	395:47	0:0	6	c
op	395:48	0:0	6	->
water	395:50	0:0	6	vLumFilterPos
arg	395:65	395:83	5	&c->vLumFilterSize
op	395:65	0:0	6	&
water	395:66	0:0	6	c
op	395:67	0:0	6	->
water	395:69	0:0	6	vLumFilterSize
arg	396:23	396:33	5	c->lumYInc
water	396:23	0:0	6	c
op	396:24	0:0	6	->
water	396:26	0:0	6	lumYInc
arg	396:35	396:39	5	srcH
water	396:35	0:0	6	srcH
arg	396:41	396:45	5	dstH
water	396:41	0:0	6	dstH
arg	396:47	396:58	5	filterAlign
water	396:47	0:0	6	filterAlign
arg	396:60	396:69	5	(1<<12)
water	396:60	0:0	6	(
water	396:61	0:0	6	1
op	396:63	0:0	6	<<
water	396:66	0:0	6	12
water	396:68	0:0	6	)
arg	397:23	397:77	5	(flags&SWS_BICUBLIN)?(flags|SWS_BICUBIC):flags
water	397:23	0:0	6	(
water	397:24	0:0	6	flags
op	397:30	0:0	6	&
water	397:32	0:0	6	SWS_BICUBLIN
water	397:44	0:0	6	)
water	397:46	0:0	6	?
water	397:48	0:0	6	(
water	397:49	0:0	6	flags
op	397:55	0:0	6	|
water	397:57	0:0	6	SWS_BICUBIC
water	397:68	0:0	6	)
water	397:70	0:0	6	:
water	397:72	0:0	6	flags
arg	398:23	398:32	5	cpu_flags
water	398:23	0:0	6	cpu_flags
arg	398:34	398:49	5	srcFilter->lumV
water	398:34	0:0	6	srcFilter
op	398:43	0:0	6	->
water	398:45	0:0	6	lumV
arg	398:51	398:66	5	dstFilter->lumV
water	398:51	0:0	6	dstFilter
op	398:60	0:0	6	->
water	398:62	0:0	6	lumV
arg	399:23	399:31	5	c->param
water	399:23	0:0	6	c
op	399:24	0:0	6	->
water	399:26	0:0	6	param
arg	400:23	400:48	5	get_local_pos(c,0,0,1)
call	400:23	400:47	6	get_local_pos
arg	400:37	400:38	7	c
water	400:37	0:0	8	c
arg	400:40	400:41	7	0
water	400:40	0:0	8	0
arg	400:43	400:44	7	0
water	400:43	0:0	8	0
arg	400:46	400:47	7	1
water	400:46	0:0	8	1
arg	401:23	401:48	5	get_local_pos(c,0,0,1)
call	401:23	401:47	6	get_local_pos
arg	401:37	401:38	7	c
water	401:37	0:0	8	c
arg	401:40	401:41	7	0
water	401:40	0:0	8	0
arg	401:43	401:44	7	0
water	401:43	0:0	8	0
arg	401:46	401:47	7	1
water	401:46	0:0	8	1
water	401:49	0:0	4	)
op	401:51	0:0	4	<
water	401:53	0:0	4	0
stmts	402:12	402:21	3	
goto	402:12	402:21	4	fail
water	402:17	0:0	5	fail
if	403:8	412:21	2	(( ret =initFilter (& c -> vChrFilter ,& c -> vChrFilterPos ,& c -> vChrFilterSize ,c -> chrYInc ,c -> chrSrcH ,c -> chrDstH ,filterAlign ,( 1 << 12 ) ,( flags & SWS_BICUBLIN ) ? ( flags | SWS_BILINEAR ) : flags ,cpu_flags ,srcFilter -> chrV ,dstFilter -> chrV ,c -> param ,get_local_pos (c ,c -> chrSrcVSubSample ,c -> src_v_chr_pos ,1 ) ,get_local_pos (c ,c -> chrDstVSubSample ,c -> dst_v_chr_pos ,1 ) ) ) < 0)
cond	403:12	410:86	3	( ret =initFilter (& c -> vChrFilter ,& c -> vChrFilterPos ,& c -> vChrFilterSize ,c -> chrYInc ,c -> chrSrcH ,c -> chrDstH ,filterAlign ,( 1 << 12 ) ,( flags & SWS_BICUBLIN ) ? ( flags | SWS_BILINEAR ) : flags ,cpu_flags ,srcFilter -> chrV ,dstFilter -> chrV ,c -> param ,get_local_pos (c ,c -> chrSrcVSubSample ,c -> src_v_chr_pos ,1 ) ,get_local_pos (c ,c -> chrDstVSubSample ,c -> dst_v_chr_pos ,1 ) ) ) < 0
water	403:12	0:0	4	(
water	403:13	0:0	4	ret
op	403:17	0:0	4	=
call	403:19	410:81	4	initFilter
arg	403:30	403:44	5	&c->vChrFilter
op	403:30	0:0	6	&
water	403:31	0:0	6	c
op	403:32	0:0	6	->
water	403:34	0:0	6	vChrFilter
arg	403:46	403:63	5	&c->vChrFilterPos
op	403:46	0:0	6	&
water	403:47	0:0	6	c
op	403:48	0:0	6	->
water	403:50	0:0	6	vChrFilterPos
arg	403:65	403:83	5	&c->vChrFilterSize
op	403:65	0:0	6	&
water	403:66	0:0	6	c
op	403:67	0:0	6	->
water	403:69	0:0	6	vChrFilterSize
arg	404:23	404:33	5	c->chrYInc
water	404:23	0:0	6	c
op	404:24	0:0	6	->
water	404:26	0:0	6	chrYInc
arg	404:35	404:45	5	c->chrSrcH
water	404:35	0:0	6	c
op	404:36	0:0	6	->
water	404:38	0:0	6	chrSrcH
arg	404:47	404:57	5	c->chrDstH
water	404:47	0:0	6	c
op	404:48	0:0	6	->
water	404:50	0:0	6	chrDstH
arg	405:23	405:34	5	filterAlign
water	405:23	0:0	6	filterAlign
arg	405:36	405:45	5	(1<<12)
water	405:36	0:0	6	(
water	405:37	0:0	6	1
op	405:39	0:0	6	<<
water	405:42	0:0	6	12
water	405:44	0:0	6	)
arg	406:23	406:78	5	(flags&SWS_BICUBLIN)?(flags|SWS_BILINEAR):flags
water	406:23	0:0	6	(
water	406:24	0:0	6	flags
op	406:30	0:0	6	&
water	406:32	0:0	6	SWS_BICUBLIN
water	406:44	0:0	6	)
water	406:46	0:0	6	?
water	406:48	0:0	6	(
water	406:49	0:0	6	flags
op	406:55	0:0	6	|
water	406:57	0:0	6	SWS_BILINEAR
water	406:69	0:0	6	)
water	406:71	0:0	6	:
water	406:73	0:0	6	flags
arg	407:23	407:32	5	cpu_flags
water	407:23	0:0	6	cpu_flags
arg	407:34	407:49	5	srcFilter->chrV
water	407:34	0:0	6	srcFilter
op	407:43	0:0	6	->
water	407:45	0:0	6	chrV
arg	407:51	407:66	5	dstFilter->chrV
water	407:51	0:0	6	dstFilter
op	407:60	0:0	6	->
water	407:62	0:0	6	chrV
arg	408:23	408:31	5	c->param
water	408:23	0:0	6	c
op	408:24	0:0	6	->
water	408:26	0:0	6	param
arg	409:23	409:81	5	get_local_pos(c,c->chrSrcVSubSample,c->src_v_chr_pos,1)
call	409:23	409:80	6	get_local_pos
arg	409:37	409:38	7	c
water	409:37	0:0	8	c
arg	409:40	409:59	7	c->chrSrcVSubSample
water	409:40	0:0	8	c
op	409:41	0:0	8	->
water	409:43	0:0	8	chrSrcVSubSample
arg	409:61	409:77	7	c->src_v_chr_pos
water	409:61	0:0	8	c
op	409:62	0:0	8	->
water	409:64	0:0	8	src_v_chr_pos
arg	409:79	409:80	7	1
water	409:79	0:0	8	1
arg	410:23	410:81	5	get_local_pos(c,c->chrDstVSubSample,c->dst_v_chr_pos,1)
call	410:23	410:80	6	get_local_pos
arg	410:37	410:38	7	c
water	410:37	0:0	8	c
arg	410:40	410:59	7	c->chrDstVSubSample
water	410:40	0:0	8	c
op	410:41	0:0	8	->
water	410:43	0:0	8	chrDstVSubSample
arg	410:61	410:77	7	c->dst_v_chr_pos
water	410:61	0:0	8	c
op	410:62	0:0	8	->
water	410:64	0:0	8	dst_v_chr_pos
arg	410:79	410:80	7	1
water	410:79	0:0	8	1
water	410:82	0:0	4	)
op	410:84	0:0	4	<
water	410:86	0:0	4	0
stmts	412:12	412:21	3	
goto	412:12	412:21	4	fail
water	412:17	0:0	5	fail
call	415:8	415:111	2	FF_ALLOC_OR_GOTO
arg	415:25	415:26	3	c
water	415:25	0:0	4	c
arg	415:28	415:43	3	c->vYCoeffsBank
water	415:28	0:0	4	c
op	415:29	0:0	4	->
water	415:31	0:0	4	vYCoeffsBank
arg	415:45	415:102	3	sizeof(vectorsignedshort)*c->vLumFilterSize*c->dstH
op	415:45	0:0	4	sizeof
water	415:51	0:0	4	(
water	415:52	0:0	4	vector
water	415:59	0:0	4	signed
water	415:66	0:0	4	short
water	415:71	0:0	4	)
op	415:73	0:0	4	*
water	415:75	0:0	4	c
op	415:76	0:0	4	->
water	415:78	0:0	4	vLumFilterSize
op	415:93	0:0	4	*
water	415:95	0:0	4	c
op	415:96	0:0	4	->
water	415:98	0:0	4	dstH
arg	415:107	415:111	3	fail
water	415:107	0:0	4	fail
water	415:112	0:0	2	;
call	416:8	416:111	2	FF_ALLOC_OR_GOTO
arg	416:25	416:26	3	c
water	416:25	0:0	4	c
arg	416:28	416:43	3	c->vCCoeffsBank
water	416:28	0:0	4	c
op	416:29	0:0	4	->
water	416:31	0:0	4	vCCoeffsBank
arg	416:45	416:105	3	sizeof(vectorsignedshort)*c->vChrFilterSize*c->chrDstH
op	416:45	0:0	4	sizeof
water	416:51	0:0	4	(
water	416:52	0:0	4	vector
water	416:59	0:0	4	signed
water	416:66	0:0	4	short
water	416:71	0:0	4	)
op	416:73	0:0	4	*
water	416:75	0:0	4	c
op	416:76	0:0	4	->
water	416:78	0:0	4	vChrFilterSize
op	416:93	0:0	4	*
water	416:95	0:0	4	c
op	416:96	0:0	4	->
water	416:98	0:0	4	chrDstH
arg	416:107	416:111	3	fail
water	416:107	0:0	4	fail
water	416:112	0:0	2	;
for	418:8	423:8	2	(i = 0 ;i < c -> vLumFilterSize * c -> dstH;i ++)
forinit	418:13	418:18	3	i = 0 ;
water	418:13	0:0	4	i
op	418:15	0:0	4	=
water	418:17	0:0	4	0
water	418:18	0:0	4	;
cond	418:20	418:47	3	i < c -> vLumFilterSize * c -> dstH
water	418:20	0:0	4	i
op	418:22	0:0	4	<
water	418:24	0:0	4	c
op	418:25	0:0	4	->
water	418:27	0:0	4	vLumFilterSize
op	418:42	0:0	4	*
water	418:44	0:0	4	c
op	418:45	0:0	4	->
water	418:47	0:0	4	dstH
forexpr	418:53	418:54	3	i ++
water	418:53	0:0	4	i
op	418:54	0:0	4	++
stmts	418:58	423:8	3	
water	418:58	0:0	4	{
decl	419:12	419:17	4	int	j
decl	420:12	420:51	4	short	*p
op	420:21	0:0	4	=
water	420:23	0:0	4	(
water	420:24	0:0	4	short
op	420:30	0:0	4	*
water	420:31	0:0	4	)
op	420:32	0:0	4	&
water	420:33	0:0	4	c
op	420:34	0:0	4	->
water	420:36	0:0	4	vYCoeffsBank
op	420:48	0:0	4	[
water	420:49	0:0	4	i
op	420:50	0:0	4	]
for	421:12	422:39	4	(j = 0 ;j < 8;j ++)
forinit	421:17	421:22	5	j = 0 ;
water	421:17	0:0	6	j
op	421:19	0:0	6	=
water	421:21	0:0	6	0
water	421:22	0:0	6	;
cond	421:24	421:28	5	j < 8
water	421:24	0:0	6	j
op	421:26	0:0	6	<
water	421:28	0:0	6	8
forexpr	421:31	421:32	5	j ++
water	421:31	0:0	6	j
op	421:32	0:0	6	++
stmts	422:16	422:39	5	
water	422:16	0:0	6	p
op	422:17	0:0	6	[
water	422:18	0:0	6	j
op	422:19	0:0	6	]
op	422:21	0:0	6	=
water	422:23	0:0	6	c
op	422:24	0:0	6	->
water	422:26	0:0	6	vLumFilter
op	422:36	0:0	6	[
water	422:37	0:0	6	i
op	422:38	0:0	6	]
water	422:39	0:0	6	;
water	423:8	0:0	4	}
for	425:8	430:8	2	(i = 0 ;i < c -> vChrFilterSize * c -> chrDstH;i ++)
forinit	425:13	425:18	3	i = 0 ;
water	425:13	0:0	4	i
op	425:15	0:0	4	=
water	425:17	0:0	4	0
water	425:18	0:0	4	;
cond	425:20	425:47	3	i < c -> vChrFilterSize * c -> chrDstH
water	425:20	0:0	4	i
op	425:22	0:0	4	<
water	425:24	0:0	4	c
op	425:25	0:0	4	->
water	425:27	0:0	4	vChrFilterSize
op	425:42	0:0	4	*
water	425:44	0:0	4	c
op	425:45	0:0	4	->
water	425:47	0:0	4	chrDstH
forexpr	425:56	425:57	3	i ++
water	425:56	0:0	4	i
op	425:57	0:0	4	++
stmts	425:61	430:8	3	
water	425:61	0:0	4	{
decl	426:12	426:17	4	int	j
decl	427:12	427:51	4	short	*p
op	427:21	0:0	4	=
water	427:23	0:0	4	(
water	427:24	0:0	4	short
op	427:30	0:0	4	*
water	427:31	0:0	4	)
op	427:32	0:0	4	&
water	427:33	0:0	4	c
op	427:34	0:0	4	->
water	427:36	0:0	4	vCCoeffsBank
op	427:48	0:0	4	[
water	427:49	0:0	4	i
op	427:50	0:0	4	]
for	428:12	429:39	4	(j = 0 ;j < 8;j ++)
forinit	428:17	428:22	5	j = 0 ;
water	428:17	0:0	6	j
op	428:19	0:0	6	=
water	428:21	0:0	6	0
water	428:22	0:0	6	;
cond	428:24	428:28	5	j < 8
water	428:24	0:0	6	j
op	428:26	0:0	6	<
water	428:28	0:0	6	8
forexpr	428:31	428:32	5	j ++
water	428:31	0:0	6	j
op	428:32	0:0	6	++
stmts	429:16	429:39	5	
water	429:16	0:0	6	p
op	429:17	0:0	6	[
water	429:18	0:0	6	j
op	429:19	0:0	6	]
op	429:21	0:0	6	=
water	429:23	0:0	6	c
op	429:24	0:0	6	->
water	429:26	0:0	6	vChrFilter
op	429:36	0:0	6	[
water	429:37	0:0	6	i
op	429:38	0:0	6	]
water	429:39	0:0	6	;
water	430:8	0:0	4	}
water	432:4	0:0	2	}
water	435:4	0:0	2	c
op	435:5	0:0	2	->
water	435:7	0:0	2	vLumBufSize
op	435:19	0:0	2	=
water	435:21	0:0	2	c
op	435:22	0:0	2	->
water	435:24	0:0	2	vLumFilterSize
water	435:38	0:0	2	;
water	436:4	0:0	2	c
op	436:5	0:0	2	->
water	436:7	0:0	2	vChrBufSize
op	436:19	0:0	2	=
water	436:21	0:0	2	c
op	436:22	0:0	2	->
water	436:24	0:0	2	vChrFilterSize
water	436:38	0:0	2	;
for	437:4	451:4	2	(i = 0 ;i < dstH;i ++)
forinit	437:9	437:14	3	i = 0 ;
water	437:9	0:0	4	i
op	437:11	0:0	4	=
water	437:13	0:0	4	0
water	437:14	0:0	4	;
cond	437:16	437:20	3	i < dstH
water	437:16	0:0	4	i
op	437:18	0:0	4	<
water	437:20	0:0	4	dstH
forexpr	437:26	437:27	3	i ++
water	437:26	0:0	4	i
op	437:27	0:0	4	++
stmts	437:31	451:4	3	
water	437:31	0:0	4	{
decl	438:8	438:54	4	int	chrI
op	438:22	0:0	4	=
water	438:24	0:0	4	(
water	438:25	0:0	4	int64_t
water	438:32	0:0	4	)
water	438:33	0:0	4	i
op	438:35	0:0	4	*
water	438:37	0:0	4	c
op	438:38	0:0	4	->
water	438:40	0:0	4	chrDstH
op	438:48	0:0	4	/
water	438:50	0:0	4	dstH
decl	439:8	441:55	4	int	nextSlice
op	439:22	0:0	4	=
call	439:24	441:54	5	FFMAX
arg	439:30	439:73	6	c->vLumFilterPos[i]+c->vLumFilterSize-1
water	439:30	0:0	7	c
op	439:31	0:0	7	->
water	439:33	0:0	7	vLumFilterPos
op	439:46	0:0	7	[
water	439:47	0:0	7	i
op	439:48	0:0	7	]
op	439:50	0:0	7	+
water	439:52	0:0	7	c
op	439:53	0:0	7	->
water	439:55	0:0	7	vLumFilterSize
op	439:70	0:0	7	-
water	439:72	0:0	7	1
arg	440:30	441:54	6	((c->vChrFilterPos[chrI]+c->vChrFilterSize-1)<<c->chrSrcVSubSample)
water	440:30	0:0	7	(
water	440:31	0:0	7	(
water	440:32	0:0	7	c
op	440:33	0:0	7	->
water	440:35	0:0	7	vChrFilterPos
op	440:48	0:0	7	[
water	440:49	0:0	7	chrI
op	440:53	0:0	7	]
op	440:55	0:0	7	+
water	440:57	0:0	7	c
op	440:58	0:0	7	->
water	440:60	0:0	7	vChrFilterSize
op	440:75	0:0	7	-
water	440:77	0:0	7	1
water	440:78	0:0	7	)
op	441:31	0:0	7	<<
water	441:34	0:0	7	c
op	441:35	0:0	7	->
water	441:37	0:0	7	chrSrcVSubSample
water	441:53	0:0	7	)
water	443:8	0:0	4	nextSlice
op	443:18	0:0	4	>>=
water	443:22	0:0	4	c
op	443:23	0:0	4	->
water	443:25	0:0	4	chrSrcVSubSample
water	443:41	0:0	4	;
water	444:8	0:0	4	nextSlice
op	444:18	0:0	4	<<=
water	444:22	0:0	4	c
op	444:23	0:0	4	->
water	444:25	0:0	4	chrSrcVSubSample
water	444:41	0:0	4	;
if	445:8	446:60	4	(c -> vLumFilterPos [ i ] + c -> vLumBufSize < nextSlice)
cond	445:12	445:51	5	c -> vLumFilterPos [ i ] + c -> vLumBufSize < nextSlice
water	445:12	0:0	6	c
op	445:13	0:0	6	->
water	445:15	0:0	6	vLumFilterPos
op	445:28	0:0	6	[
water	445:29	0:0	6	i
op	445:30	0:0	6	]
op	445:32	0:0	6	+
water	445:34	0:0	6	c
op	445:35	0:0	6	->
water	445:37	0:0	6	vLumBufSize
op	445:49	0:0	6	<
water	445:51	0:0	6	nextSlice
stmts	446:12	446:60	5	
water	446:12	0:0	6	c
op	446:13	0:0	6	->
water	446:15	0:0	6	vLumBufSize
op	446:27	0:0	6	=
water	446:29	0:0	6	nextSlice
op	446:39	0:0	6	-
water	446:41	0:0	6	c
op	446:42	0:0	6	->
water	446:44	0:0	6	vLumFilterPos
op	446:57	0:0	6	[
water	446:58	0:0	6	i
op	446:59	0:0	6	]
water	446:60	0:0	6	;
if	447:8	450:51	4	(c -> vChrFilterPos [ chrI ] + c -> vChrBufSize < ( nextSlice >> c -> chrSrcVSubSample ))
cond	447:12	448:45	5	c -> vChrFilterPos [ chrI ] + c -> vChrBufSize < ( nextSlice >> c -> chrSrcVSubSample )
water	447:12	0:0	6	c
op	447:13	0:0	6	->
water	447:15	0:0	6	vChrFilterPos
op	447:28	0:0	6	[
water	447:29	0:0	6	chrI
op	447:33	0:0	6	]
op	447:35	0:0	6	+
water	447:37	0:0	6	c
op	447:38	0:0	6	->
water	447:40	0:0	6	vChrBufSize
op	447:52	0:0	6	<
water	448:12	0:0	6	(
water	448:13	0:0	6	nextSlice
op	448:23	0:0	6	>>
water	448:26	0:0	6	c
op	448:27	0:0	6	->
water	448:29	0:0	6	chrSrcVSubSample
water	448:45	0:0	6	)
stmts	449:12	450:51	5	
water	449:12	0:0	6	c
op	449:13	0:0	6	->
water	449:15	0:0	6	vChrBufSize
op	449:27	0:0	6	=
water	449:29	0:0	6	(
water	449:30	0:0	6	nextSlice
op	449:40	0:0	6	>>
water	449:43	0:0	6	c
op	449:44	0:0	6	->
water	449:46	0:0	6	chrSrcVSubSample
water	449:62	0:0	6	)
op	449:64	0:0	6	-
water	450:29	0:0	6	c
op	450:30	0:0	6	->
water	450:32	0:0	6	vChrFilterPos
op	450:45	0:0	6	[
water	450:46	0:0	6	chrI
op	450:50	0:0	6	]
water	450:51	0:0	6	;
water	451:4	0:0	4	}
for	453:4	454:81	2	(i = 0 ;i < 4;i ++)
forinit	453:9	453:14	3	i = 0 ;
water	453:9	0:0	4	i
op	453:11	0:0	4	=
water	453:13	0:0	4	0
water	453:14	0:0	4	;
cond	453:16	453:20	3	i < 4
water	453:16	0:0	4	i
op	453:18	0:0	4	<
water	453:20	0:0	4	4
forexpr	453:23	453:24	3	i ++
water	453:23	0:0	4	i
op	453:24	0:0	4	++
stmts	454:8	454:81	3	
call	454:8	454:80	4	FF_ALLOCZ_OR_GOTO
arg	454:26	454:27	5	c
water	454:26	0:0	6	c
arg	454:29	454:47	5	c->dither_error[i]
water	454:29	0:0	6	c
op	454:30	0:0	6	->
water	454:32	0:0	6	dither_error
op	454:44	0:0	6	[
water	454:45	0:0	6	i
op	454:46	0:0	6	]
arg	454:49	454:74	5	(c->dstW+2)*sizeof(int)
water	454:49	0:0	6	(
water	454:50	0:0	6	c
op	454:51	0:0	6	->
water	454:53	0:0	6	dstW
op	454:57	0:0	6	+
water	454:58	0:0	6	2
water	454:59	0:0	6	)
op	454:61	0:0	6	*
op	454:63	0:0	6	sizeof
water	454:69	0:0	6	(
water	454:70	0:0	6	int
water	454:73	0:0	6	)
arg	454:76	454:80	5	fail
water	454:76	0:0	6	fail
water	454:81	0:0	4	;
call	458:4	458:83	2	FF_ALLOC_OR_GOTO
arg	458:21	458:22	3	c
water	458:21	0:0	4	c
arg	458:24	458:36	3	c->lumPixBuf
water	458:24	0:0	4	c
op	458:25	0:0	4	->
water	458:27	0:0	4	lumPixBuf
arg	458:39	458:77	3	c->vLumBufSize*3*sizeof(int16_t*)
water	458:39	0:0	4	c
op	458:40	0:0	4	->
water	458:42	0:0	4	vLumBufSize
op	458:54	0:0	4	*
water	458:56	0:0	4	3
op	458:58	0:0	4	*
op	458:60	0:0	4	sizeof
water	458:66	0:0	4	(
water	458:67	0:0	4	int16_t
op	458:75	0:0	4	*
water	458:76	0:0	4	)
arg	458:79	458:83	3	fail
water	458:79	0:0	4	fail
water	458:84	0:0	2	;
call	459:4	459:83	2	FF_ALLOC_OR_GOTO
arg	459:21	459:22	3	c
water	459:21	0:0	4	c
arg	459:24	459:37	3	c->chrUPixBuf
water	459:24	0:0	4	c
op	459:25	0:0	4	->
water	459:27	0:0	4	chrUPixBuf
arg	459:39	459:77	3	c->vChrBufSize*3*sizeof(int16_t*)
water	459:39	0:0	4	c
op	459:40	0:0	4	->
water	459:42	0:0	4	vChrBufSize
op	459:54	0:0	4	*
water	459:56	0:0	4	3
op	459:58	0:0	4	*
op	459:60	0:0	4	sizeof
water	459:66	0:0	4	(
water	459:67	0:0	4	int16_t
op	459:75	0:0	4	*
water	459:76	0:0	4	)
arg	459:79	459:83	3	fail
water	459:79	0:0	4	fail
water	459:84	0:0	2	;
call	460:4	460:83	2	FF_ALLOC_OR_GOTO
arg	460:21	460:22	3	c
water	460:21	0:0	4	c
arg	460:24	460:37	3	c->chrVPixBuf
water	460:24	0:0	4	c
op	460:25	0:0	4	->
water	460:27	0:0	4	chrVPixBuf
arg	460:39	460:77	3	c->vChrBufSize*3*sizeof(int16_t*)
water	460:39	0:0	4	c
op	460:40	0:0	4	->
water	460:42	0:0	4	vChrBufSize
op	460:54	0:0	4	*
water	460:56	0:0	4	3
op	460:58	0:0	4	*
op	460:60	0:0	4	sizeof
water	460:66	0:0	4	(
water	460:67	0:0	4	int16_t
op	460:75	0:0	4	*
water	460:76	0:0	4	)
arg	460:79	460:83	3	fail
water	460:79	0:0	4	fail
water	460:84	0:0	2	;
if	461:4	462:88	2	(CONFIG_SWSCALE_ALPHA &&isALPHA (c -> srcFormat ) &&isALPHA (c -> dstFormat ))
cond	461:8	461:77	3	CONFIG_SWSCALE_ALPHA &&isALPHA (c -> srcFormat ) &&isALPHA (c -> dstFormat )
water	461:8	0:0	4	CONFIG_SWSCALE_ALPHA
op	461:29	0:0	4	&&
call	461:32	461:52	4	isALPHA
arg	461:40	461:52	5	c->srcFormat
water	461:40	0:0	6	c
op	461:41	0:0	6	->
water	461:43	0:0	6	srcFormat
op	461:54	0:0	4	&&
call	461:57	461:77	4	isALPHA
arg	461:65	461:77	5	c->dstFormat
water	461:65	0:0	6	c
op	461:66	0:0	6	->
water	461:68	0:0	6	dstFormat
stmts	462:8	462:88	3	
call	462:8	462:87	4	FF_ALLOCZ_OR_GOTO
arg	462:26	462:27	5	c
water	462:26	0:0	6	c
arg	462:29	462:41	5	c->alpPixBuf
water	462:29	0:0	6	c
op	462:30	0:0	6	->
water	462:32	0:0	6	alpPixBuf
arg	462:43	462:81	5	c->vLumBufSize*3*sizeof(int16_t*)
water	462:43	0:0	6	c
op	462:44	0:0	6	->
water	462:46	0:0	6	vLumBufSize
op	462:58	0:0	6	*
water	462:60	0:0	6	3
op	462:62	0:0	6	*
op	462:64	0:0	6	sizeof
water	462:70	0:0	6	(
water	462:71	0:0	6	int16_t
op	462:79	0:0	6	*
water	462:80	0:0	6	)
arg	462:83	462:87	5	fail
water	462:83	0:0	6	fail
water	462:88	0:0	4	;
for	466:4	470:4	2	(i = 0 ;i < c -> vLumBufSize;i ++)
forinit	466:9	466:14	3	i = 0 ;
water	466:9	0:0	4	i
op	466:11	0:0	4	=
water	466:13	0:0	4	0
water	466:14	0:0	4	;
cond	466:16	466:23	3	i < c -> vLumBufSize
water	466:16	0:0	4	i
op	466:18	0:0	4	<
water	466:20	0:0	4	c
op	466:21	0:0	4	->
water	466:23	0:0	4	vLumBufSize
forexpr	466:36	466:37	3	i ++
water	466:36	0:0	4	i
op	466:37	0:0	4	++
stmts	466:41	470:4	3	
water	466:41	0:0	4	{
call	467:8	468:47	4	FF_ALLOCZ_OR_GOTO
arg	467:26	467:27	5	c
water	467:26	0:0	6	c
arg	467:29	467:61	5	c->lumPixBuf[i+c->vLumBufSize]
water	467:29	0:0	6	c
op	467:30	0:0	6	->
water	467:32	0:0	6	lumPixBuf
op	467:41	0:0	6	[
water	467:42	0:0	6	i
op	467:44	0:0	6	+
water	467:46	0:0	6	c
op	467:47	0:0	6	->
water	467:49	0:0	6	vLumBufSize
op	467:60	0:0	6	]
arg	468:26	468:41	5	dst_stride+16
water	468:26	0:0	6	dst_stride
op	468:37	0:0	6	+
water	468:39	0:0	6	16
arg	468:43	468:47	5	fail
water	468:43	0:0	6	fail
water	468:48	0:0	4	;
water	469:8	0:0	4	c
op	469:9	0:0	4	->
water	469:11	0:0	4	lumPixBuf
op	469:20	0:0	4	[
water	469:21	0:0	4	i
op	469:22	0:0	4	]
op	469:24	0:0	4	=
water	469:26	0:0	4	c
op	469:27	0:0	4	->
water	469:29	0:0	4	lumPixBuf
op	469:38	0:0	4	[
water	469:39	0:0	4	i
op	469:41	0:0	4	+
water	469:43	0:0	4	c
op	469:44	0:0	4	->
water	469:46	0:0	4	vLumBufSize
op	469:57	0:0	4	]
water	469:58	0:0	4	;
water	470:4	0:0	4	}
water	472:4	0:0	2	c
op	472:5	0:0	2	->
water	472:7	0:0	2	uv_off
op	472:16	0:0	2	=
water	472:18	0:0	2	(
water	472:19	0:0	2	dst_stride
op	472:29	0:0	2	>>
water	472:31	0:0	2	1
water	472:32	0:0	2	)
op	472:34	0:0	2	+
water	472:36	0:0	2	64
op	472:39	0:0	2	/
water	472:41	0:0	2	(
water	472:42	0:0	2	c
op	472:43	0:0	2	->
water	472:45	0:0	2	dstBpc
op	472:52	0:0	2	&
op	472:53	0:0	2	~
water	472:55	0:0	2	7
water	472:56	0:0	2	)
water	472:57	0:0	2	;
water	473:4	0:0	2	c
op	473:5	0:0	2	->
water	473:7	0:0	2	uv_offx2
op	473:16	0:0	2	=
water	473:18	0:0	2	dst_stride
op	473:29	0:0	2	+
water	473:31	0:0	2	16
water	473:33	0:0	2	;
for	474:4	480:4	2	(i = 0 ;i < c -> vChrBufSize;i ++)
forinit	474:9	474:14	3	i = 0 ;
water	474:9	0:0	4	i
op	474:11	0:0	4	=
water	474:13	0:0	4	0
water	474:14	0:0	4	;
cond	474:16	474:23	3	i < c -> vChrBufSize
water	474:16	0:0	4	i
op	474:18	0:0	4	<
water	474:20	0:0	4	c
op	474:21	0:0	4	->
water	474:23	0:0	4	vChrBufSize
forexpr	474:36	474:37	3	i ++
water	474:36	0:0	4	i
op	474:37	0:0	4	++
stmts	474:41	480:4	3	
water	474:41	0:0	4	{
call	475:8	476:50	4	FF_ALLOC_OR_GOTO
arg	475:25	475:26	5	c
water	475:25	0:0	6	c
arg	475:28	475:61	5	c->chrUPixBuf[i+c->vChrBufSize]
water	475:28	0:0	6	c
op	475:29	0:0	6	->
water	475:31	0:0	6	chrUPixBuf
op	475:41	0:0	6	[
water	475:42	0:0	6	i
op	475:44	0:0	6	+
water	475:46	0:0	6	c
op	475:47	0:0	6	->
water	475:49	0:0	6	vChrBufSize
op	475:60	0:0	6	]
arg	476:25	476:44	5	dst_stride*2+32
water	476:25	0:0	6	dst_stride
op	476:36	0:0	6	*
water	476:38	0:0	6	2
op	476:40	0:0	6	+
water	476:42	0:0	6	32
arg	476:46	476:50	5	fail
water	476:46	0:0	6	fail
water	476:51	0:0	4	;
water	477:8	0:0	4	c
op	477:9	0:0	4	->
water	477:11	0:0	4	chrUPixBuf
op	477:21	0:0	4	[
water	477:22	0:0	4	i
op	477:23	0:0	4	]
op	477:25	0:0	4	=
water	477:27	0:0	4	c
op	477:28	0:0	4	->
water	477:30	0:0	4	chrUPixBuf
op	477:40	0:0	4	[
water	477:41	0:0	4	i
op	477:43	0:0	4	+
water	477:45	0:0	4	c
op	477:46	0:0	4	->
water	477:48	0:0	4	vChrBufSize
op	477:59	0:0	4	]
water	477:60	0:0	4	;
water	478:8	0:0	4	c
op	478:9	0:0	4	->
water	478:11	0:0	4	chrVPixBuf
op	478:21	0:0	4	[
water	478:22	0:0	4	i
op	478:23	0:0	4	]
op	478:25	0:0	4	=
water	478:27	0:0	4	c
op	478:28	0:0	4	->
water	478:30	0:0	4	chrVPixBuf
op	478:40	0:0	4	[
water	478:41	0:0	4	i
op	478:43	0:0	4	+
water	478:45	0:0	4	c
op	478:46	0:0	4	->
water	478:48	0:0	4	vChrBufSize
op	478:59	0:0	4	]
op	479:25	0:0	4	=
water	479:27	0:0	4	c
op	479:28	0:0	4	->
water	479:30	0:0	4	chrUPixBuf
op	479:40	0:0	4	[
water	479:41	0:0	4	i
op	479:42	0:0	4	]
op	479:44	0:0	4	+
water	479:46	0:0	4	(
water	479:47	0:0	4	dst_stride
op	479:58	0:0	4	>>
water	479:61	0:0	4	1
water	479:62	0:0	4	)
op	479:64	0:0	4	+
water	479:66	0:0	4	8
water	479:67	0:0	4	;
water	480:4	0:0	4	}
if	481:4	486:8	2	(CONFIG_SWSCALE_ALPHA && c -> alpPixBuf)
cond	481:8	481:35	3	CONFIG_SWSCALE_ALPHA && c -> alpPixBuf
water	481:8	0:0	4	CONFIG_SWSCALE_ALPHA
op	481:29	0:0	4	&&
water	481:32	0:0	4	c
op	481:33	0:0	4	->
water	481:35	0:0	4	alpPixBuf
stmts	482:8	486:8	3	
for	482:8	486:8	4	(i = 0 ;i < c -> vLumBufSize;i ++)
forinit	482:13	482:18	5	i = 0 ;
water	482:13	0:0	6	i
op	482:15	0:0	6	=
water	482:17	0:0	6	0
water	482:18	0:0	6	;
cond	482:20	482:27	5	i < c -> vLumBufSize
water	482:20	0:0	6	i
op	482:22	0:0	6	<
water	482:24	0:0	6	c
op	482:25	0:0	6	->
water	482:27	0:0	6	vLumBufSize
forexpr	482:40	482:41	5	i ++
water	482:40	0:0	6	i
op	482:41	0:0	6	++
stmts	482:45	486:8	5	
water	482:45	0:0	6	{
call	483:12	484:51	6	FF_ALLOCZ_OR_GOTO
arg	483:30	483:31	7	c
water	483:30	0:0	8	c
arg	483:33	483:65	7	c->alpPixBuf[i+c->vLumBufSize]
water	483:33	0:0	8	c
op	483:34	0:0	8	->
water	483:36	0:0	8	alpPixBuf
op	483:45	0:0	8	[
water	483:46	0:0	8	i
op	483:48	0:0	8	+
water	483:50	0:0	8	c
op	483:51	0:0	8	->
water	483:53	0:0	8	vLumBufSize
op	483:64	0:0	8	]
arg	484:30	484:45	7	dst_stride+16
water	484:30	0:0	8	dst_stride
op	484:41	0:0	8	+
water	484:43	0:0	8	16
arg	484:47	484:51	7	fail
water	484:47	0:0	8	fail
water	484:52	0:0	6	;
water	485:12	0:0	6	c
op	485:13	0:0	6	->
water	485:15	0:0	6	alpPixBuf
op	485:24	0:0	6	[
water	485:25	0:0	6	i
op	485:26	0:0	6	]
op	485:28	0:0	6	=
water	485:30	0:0	6	c
op	485:31	0:0	6	->
water	485:33	0:0	6	alpPixBuf
op	485:42	0:0	6	[
water	485:43	0:0	6	i
op	485:45	0:0	6	+
water	485:47	0:0	6	c
op	485:48	0:0	6	->
water	485:50	0:0	6	vLumBufSize
op	485:61	0:0	6	]
water	485:62	0:0	6	;
water	486:8	0:0	6	}
for	489:4	494:8	2	(i = 0 ;i < c -> vChrBufSize;i ++)
forinit	489:9	489:14	3	i = 0 ;
water	489:9	0:0	4	i
op	489:11	0:0	4	=
water	489:13	0:0	4	0
water	489:14	0:0	4	;
cond	489:16	489:23	3	i < c -> vChrBufSize
water	489:16	0:0	4	i
op	489:18	0:0	4	<
water	489:20	0:0	4	c
op	489:21	0:0	4	->
water	489:23	0:0	4	vChrBufSize
forexpr	489:36	489:37	3	i ++
water	489:36	0:0	4	i
op	489:37	0:0	4	++
stmts	490:8	494:8	3	
if	490:8	494:8	4	(desc_dst -> comp [ 0 ] . depth_minus1 == 15)
cond	490:11	490:45	5	desc_dst -> comp [ 0 ] . depth_minus1 == 15
water	490:11	0:0	6	desc_dst
op	490:19	0:0	6	->
water	490:21	0:0	6	comp
op	490:25	0:0	6	[
water	490:26	0:0	6	0
op	490:27	0:0	6	]
op	490:28	0:0	6	.
water	490:29	0:0	6	depth_minus1
op	490:42	0:0	6	==
water	490:45	0:0	6	15
stmts	490:48	494:8	5	
water	490:48	0:0	6	{
call	491:12	491:37	6	av_assert0
arg	491:23	491:37	7	c->dstBpc>14
water	491:23	0:0	8	c
op	491:24	0:0	8	->
water	491:26	0:0	8	dstBpc
op	491:33	0:0	8	>
water	491:35	0:0	8	14
water	491:38	0:0	6	;
for	492:12	493:57	6	(j = 0 ;j < dst_stride / 2 + 1;j ++)
forinit	492:16	492:19	7	j = 0 ;
water	492:16	0:0	8	j
op	492:17	0:0	8	=
water	492:18	0:0	8	0
water	492:19	0:0	8	;
cond	492:21	492:36	7	j < dst_stride / 2 + 1
water	492:21	0:0	8	j
op	492:22	0:0	8	<
water	492:23	0:0	8	dst_stride
op	492:33	0:0	8	/
water	492:34	0:0	8	2
op	492:35	0:0	8	+
water	492:36	0:0	8	1
forexpr	492:39	492:40	7	j ++
water	492:39	0:0	8	j
op	492:40	0:0	8	++
stmts	493:16	493:57	7	
water	493:16	0:0	8	(
call	493:17	493:44	8	(int32_t*)
arg	493:28	493:44	9	c->chrUPixBuf[i]
water	493:28	0:0	10	c
op	493:29	0:0	10	->
water	493:31	0:0	10	chrUPixBuf
op	493:41	0:0	10	[
water	493:42	0:0	10	i
op	493:43	0:0	10	]
water	493:45	0:0	8	)
op	493:46	0:0	8	[
water	493:47	0:0	8	j
op	493:48	0:0	8	]
op	493:50	0:0	8	=
water	493:52	0:0	8	1
op	493:53	0:0	8	<<
water	493:55	0:0	8	18
water	493:57	0:0	8	;
water	494:8	0:0	6	}
else	494:10	496:57	2
stmts	495:12	496:57	3	
for	495:12	496:57	4	(j = 0 ;j < dst_stride + 1;j ++)
forinit	495:16	495:19	5	j = 0 ;
water	495:16	0:0	6	j
op	495:17	0:0	6	=
water	495:18	0:0	6	0
water	495:19	0:0	6	;
cond	495:21	495:34	5	j < dst_stride + 1
water	495:21	0:0	6	j
op	495:22	0:0	6	<
water	495:23	0:0	6	dst_stride
op	495:33	0:0	6	+
water	495:34	0:0	6	1
forexpr	495:37	495:38	5	j ++
water	495:37	0:0	6	j
op	495:38	0:0	6	++
stmts	496:16	496:57	5	
water	496:16	0:0	6	(
call	496:17	496:44	6	(int16_t*)
arg	496:28	496:44	7	c->chrUPixBuf[i]
water	496:28	0:0	8	c
op	496:29	0:0	8	->
water	496:31	0:0	8	chrUPixBuf
op	496:41	0:0	8	[
water	496:42	0:0	8	i
op	496:43	0:0	8	]
water	496:45	0:0	6	)
op	496:46	0:0	6	[
water	496:47	0:0	6	j
op	496:48	0:0	6	]
op	496:50	0:0	6	=
water	496:52	0:0	6	1
op	496:53	0:0	6	<<
water	496:55	0:0	6	14
water	496:57	0:0	6	;
call	498:4	498:33	2	av_assert0
arg	498:15	498:33	3	c->chrDstH<=dstH
water	498:15	0:0	4	c
op	498:16	0:0	4	->
water	498:18	0:0	4	chrDstH
op	498:26	0:0	4	<=
water	498:29	0:0	4	dstH
water	498:34	0:0	2	;
if	500:4	545:4	2	(flags & SWS_PRINT_INFO)
cond	500:8	500:16	3	flags & SWS_PRINT_INFO
water	500:8	0:0	4	flags
op	500:14	0:0	4	&
water	500:16	0:0	4	SWS_PRINT_INFO
stmts	500:32	545:4	3	
water	500:32	0:0	4	{
decl	501:8	501:43	4	const char	*scaler
op	501:27	0:0	4	=
water	501:29	0:0	4	NULL
water	501:33	0:0	4	,
decl	501:8	501:43	4	const char	*cpucaps
for	503:8	508:8	4	(i = 0 ;i <FF_ARRAY_ELEMS (scale_algorithms );i ++)
forinit	503:13	503:18	5	i = 0 ;
water	503:13	0:0	6	i
op	503:15	0:0	6	=
water	503:17	0:0	6	0
water	503:18	0:0	6	;
cond	503:20	503:55	5	i <FF_ARRAY_ELEMS (scale_algorithms )
water	503:20	0:0	6	i
op	503:22	0:0	6	<
call	503:24	503:55	6	FF_ARRAY_ELEMS
arg	503:39	503:55	7	scale_algorithms
water	503:39	0:0	8	scale_algorithms
forexpr	503:58	503:59	5	i ++
water	503:58	0:0	6	i
op	503:59	0:0	6	++
stmts	503:63	508:8	5	
water	503:63	0:0	6	{
if	504:12	507:12	6	(flags & scale_algorithms [ i ] . flag)
cond	504:16	504:44	7	flags & scale_algorithms [ i ] . flag
water	504:16	0:0	8	flags
op	504:22	0:0	8	&
water	504:24	0:0	8	scale_algorithms
op	504:40	0:0	8	[
water	504:41	0:0	8	i
op	504:42	0:0	8	]
op	504:43	0:0	8	.
water	504:44	0:0	8	flag
stmts	504:50	507:12	7	
water	504:50	0:0	8	{
water	505:16	0:0	8	scaler
op	505:23	0:0	8	=
water	505:25	0:0	8	scale_algorithms
op	505:41	0:0	8	[
water	505:42	0:0	8	i
op	505:43	0:0	8	]
op	505:44	0:0	8	.
water	505:45	0:0	8	description
water	505:56	0:0	8	;
break	506:16	506:21	8	
water	507:12	0:0	8	}
water	508:8	0:0	6	}
if	509:8	510:43	4	(! scaler)
cond	509:12	509:13	5	! scaler
op	509:12	0:0	6	!
water	509:13	0:0	6	scaler
stmts	510:12	510:43	5	
water	510:12	0:0	6	scaler
op	510:19	0:0	6	=
water	510:22	0:0	6	"ehh flags invalid?!"
water	510:43	0:0	6	;
call	511:8	522:45	4	av_log
arg	511:15	511:16	5	c
water	511:15	0:0	6	c
arg	511:18	511:29	5	AV_LOG_INFO
water	511:18	0:0	6	AV_LOG_INFO
arg	511:31	511:60	5	"%s scaler, from %s to %s%s "
water	511:31	0:0	6	"%s scaler, from %s to %s%s "
arg	512:15	512:21	5	scaler
water	512:15	0:0	6	scaler
arg	513:15	513:45	5	av_get_pix_fmt_name(srcFormat)
call	513:15	513:44	6	av_get_pix_fmt_name
arg	513:35	513:44	7	srcFormat
water	513:35	0:0	8	srcFormat
arg	515:15	518:77	5	dstFormat==AV_PIX_FMT_BGR555||dstFormat==AV_PIX_FMT_BGR565||dstFormat==AV_PIX_FMT_RGB444BE||dstFormat==AV_PIX_FMT_RGB444LE||dstFormat==AV_PIX_FMT_BGR444BE||dstFormat==AV_PIX_FMT_BGR444LE?"dithered ":""
water	515:15	0:0	6	dstFormat
op	515:25	0:0	6	==
water	515:28	0:0	6	AV_PIX_FMT_BGR555
op	515:48	0:0	6	||
water	515:51	0:0	6	dstFormat
op	515:61	0:0	6	==
water	515:64	0:0	6	AV_PIX_FMT_BGR565
op	515:84	0:0	6	||
water	516:15	0:0	6	dstFormat
op	516:25	0:0	6	==
water	516:28	0:0	6	AV_PIX_FMT_RGB444BE
op	516:48	0:0	6	||
water	516:51	0:0	6	dstFormat
op	516:61	0:0	6	==
water	516:64	0:0	6	AV_PIX_FMT_RGB444LE
op	516:84	0:0	6	||
water	517:15	0:0	6	dstFormat
op	517:25	0:0	6	==
water	517:28	0:0	6	AV_PIX_FMT_BGR444BE
op	517:48	0:0	6	||
water	517:51	0:0	6	dstFormat
op	517:61	0:0	6	==
water	517:64	0:0	6	AV_PIX_FMT_BGR444LE
water	517:84	0:0	6	?
water	518:61	0:0	6	"dithered "
water	518:73	0:0	6	:
water	518:75	0:0	6	""
arg	520:15	520:17	5	""
water	520:15	0:0	6	""
arg	522:15	522:45	5	av_get_pix_fmt_name(dstFormat)
call	522:15	522:44	6	av_get_pix_fmt_name
arg	522:35	522:44	7	dstFormat
water	522:35	0:0	8	dstFormat
water	522:46	0:0	4	;
if	524:8	525:30	4	(INLINE_MMXEXT (cpu_flags ))
cond	524:12	524:35	5	INLINE_MMXEXT (cpu_flags )
call	524:12	524:35	6	INLINE_MMXEXT
arg	524:26	524:35	7	cpu_flags
water	524:26	0:0	8	cpu_flags
stmts	525:12	525:30	5	
water	525:12	0:0	6	cpucaps
op	525:20	0:0	6	=
water	525:22	0:0	6	"MMXEXT"
water	525:30	0:0	6	;
else	526:8	527:29	4
stmts	526:13	527:29	5	
if	526:13	527:29	6	(INLINE_AMD3DNOW (cpu_flags ))
cond	526:17	526:42	7	INLINE_AMD3DNOW (cpu_flags )
call	526:17	526:42	8	INLINE_AMD3DNOW
arg	526:33	526:42	9	cpu_flags
water	526:33	0:0	10	cpu_flags
stmts	527:12	527:29	7	
water	527:12	0:0	8	cpucaps
op	527:20	0:0	8	=
water	527:22	0:0	8	"3DNOW"
water	527:29	0:0	8	;
else	528:8	529:27	4
stmts	528:13	529:27	5	
if	528:13	529:27	6	(INLINE_MMX (cpu_flags ))
cond	528:17	528:37	7	INLINE_MMX (cpu_flags )
call	528:17	528:37	8	INLINE_MMX
arg	528:28	528:37	9	cpu_flags
water	528:28	0:0	10	cpu_flags
stmts	529:12	529:27	7	
water	529:12	0:0	8	cpucaps
op	529:20	0:0	8	=
water	529:22	0:0	8	"MMX"
water	529:27	0:0	8	;
else	530:8	531:31	4
stmts	530:13	531:31	5	
if	530:13	531:31	6	(PPC_ALTIVEC (cpu_flags ))
cond	530:17	530:38	7	PPC_ALTIVEC (cpu_flags )
call	530:17	530:38	8	PPC_ALTIVEC
arg	530:29	530:38	9	cpu_flags
water	530:29	0:0	10	cpu_flags
stmts	531:12	531:31	7	
water	531:12	0:0	8	cpucaps
op	531:20	0:0	8	=
water	531:22	0:0	8	"AltiVec"
water	531:31	0:0	8	;
else	532:8	533:25	4
stmts	533:12	533:25	5	
water	533:12	0:0	6	cpucaps
op	533:20	0:0	6	=
water	533:22	0:0	6	"C"
water	533:25	0:0	6	;
call	535:8	535:52	4	av_log
arg	535:15	535:16	5	c
water	535:15	0:0	6	c
arg	535:18	535:29	5	AV_LOG_INFO
water	535:18	0:0	6	AV_LOG_INFO
arg	535:31	535:43	5	"using %s\n"
water	535:31	0:0	6	"using %s\n"
arg	535:45	535:52	5	cpucaps
water	535:45	0:0	6	cpucaps
water	535:53	0:0	4	;
call	537:8	537:76	4	av_log
arg	537:15	537:16	5	c
water	537:15	0:0	6	c
arg	537:18	537:32	5	AV_LOG_VERBOSE
water	537:18	0:0	6	AV_LOG_VERBOSE
arg	537:34	537:52	5	"%dx%d -> %dx%d\n"
water	537:34	0:0	6	"%dx%d -> %dx%d\n"
arg	537:54	537:58	5	srcW
water	537:54	0:0	6	srcW
arg	537:60	537:64	5	srcH
water	537:60	0:0	6	srcH
arg	537:66	537:70	5	dstW
water	537:66	0:0	6	dstW
arg	537:72	537:76	5	dstH
water	537:72	0:0	6	dstH
water	537:77	0:0	4	;
call	538:8	540:73	4	av_log
arg	538:15	538:16	5	c
water	538:15	0:0	6	c
arg	538:18	538:30	5	AV_LOG_DEBUG
water	538:18	0:0	6	AV_LOG_DEBUG
arg	539:15	539:70	5	"lum srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"
water	539:15	0:0	6	"lum srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"
arg	540:15	540:22	5	c->srcW
water	540:15	0:0	6	c
op	540:16	0:0	6	->
water	540:18	0:0	6	srcW
arg	540:24	540:31	5	c->srcH
water	540:24	0:0	6	c
op	540:25	0:0	6	->
water	540:27	0:0	6	srcH
arg	540:33	540:40	5	c->dstW
water	540:33	0:0	6	c
op	540:34	0:0	6	->
water	540:36	0:0	6	dstW
arg	540:42	540:49	5	c->dstH
water	540:42	0:0	6	c
op	540:43	0:0	6	->
water	540:45	0:0	6	dstH
arg	540:51	540:61	5	c->lumXInc
water	540:51	0:0	6	c
op	540:52	0:0	6	->
water	540:54	0:0	6	lumXInc
arg	540:63	540:73	5	c->lumYInc
water	540:63	0:0	6	c
op	540:64	0:0	6	->
water	540:66	0:0	6	lumYInc
water	540:74	0:0	4	;
call	541:8	544:37	4	av_log
arg	541:15	541:16	5	c
water	541:15	0:0	6	c
arg	541:18	541:30	5	AV_LOG_DEBUG
water	541:18	0:0	6	AV_LOG_DEBUG
arg	542:15	542:70	5	"chr srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"
water	542:15	0:0	6	"chr srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"
arg	543:15	543:25	5	c->chrSrcW
water	543:15	0:0	6	c
op	543:16	0:0	6	->
water	543:18	0:0	6	chrSrcW
arg	543:27	543:37	5	c->chrSrcH
water	543:27	0:0	6	c
op	543:28	0:0	6	->
water	543:30	0:0	6	chrSrcH
arg	543:39	543:49	5	c->chrDstW
water	543:39	0:0	6	c
op	543:40	0:0	6	->
water	543:42	0:0	6	chrDstW
arg	543:51	543:61	5	c->chrDstH
water	543:51	0:0	6	c
op	543:52	0:0	6	->
water	543:54	0:0	6	chrDstH
arg	544:15	544:25	5	c->chrXInc
water	544:15	0:0	6	c
op	544:16	0:0	6	->
water	544:18	0:0	6	chrXInc
arg	544:27	544:37	5	c->chrYInc
water	544:27	0:0	6	c
op	544:28	0:0	6	->
water	544:30	0:0	6	chrYInc
water	544:38	0:0	4	;
water	545:4	0:0	4	}
if	548:4	559:4	2	(unscaled && ! usesHFilter && ! usesVFilter && ( c -> srcRange == c -> dstRange ||isAnyRGB (dstFormat ) ))
cond	548:8	549:58	3	unscaled && ! usesHFilter && ! usesVFilter && ( c -> srcRange == c -> dstRange ||isAnyRGB (dstFormat ) )
water	548:8	0:0	4	unscaled
op	548:17	0:0	4	&&
op	548:20	0:0	4	!
water	548:21	0:0	4	usesHFilter
op	548:33	0:0	4	&&
op	548:36	0:0	4	!
water	548:37	0:0	4	usesVFilter
op	548:49	0:0	4	&&
water	549:8	0:0	4	(
water	549:9	0:0	4	c
op	549:10	0:0	4	->
water	549:12	0:0	4	srcRange
op	549:21	0:0	4	==
water	549:24	0:0	4	c
op	549:25	0:0	4	->
water	549:27	0:0	4	dstRange
op	549:36	0:0	4	||
call	549:39	549:57	4	isAnyRGB
arg	549:48	549:57	5	dstFormat
water	549:48	0:0	6	dstFormat
water	549:58	0:0	4	)
stmts	549:61	559:4	3	
water	549:61	0:0	4	{
call	550:8	550:33	4	ff_get_unscaled_swscale
arg	550:32	550:33	5	c
water	550:32	0:0	6	c
water	550:34	0:0	4	;
if	552:8	558:8	4	(c -> swscale)
cond	552:12	552:15	5	c -> swscale
water	552:12	0:0	6	c
op	552:13	0:0	6	->
water	552:15	0:0	6	swscale
stmts	552:24	558:8	5	
water	552:24	0:0	6	{
if	553:12	556:86	6	(flags & SWS_PRINT_INFO)
cond	553:16	553:24	7	flags & SWS_PRINT_INFO
water	553:16	0:0	8	flags
op	553:22	0:0	8	&
water	553:24	0:0	8	SWS_PRINT_INFO
stmts	554:16	556:86	7	
call	554:16	556:85	8	av_log
arg	554:23	554:24	9	c
water	554:23	0:0	10	c
arg	554:26	554:37	9	AV_LOG_INFO
water	554:26	0:0	10	AV_LOG_INFO
arg	555:23	555:68	9	"using unscaled %s -> %s special converter\n"
water	555:23	0:0	10	"using unscaled %s -> %s special converter\n"
arg	556:23	556:53	9	av_get_pix_fmt_name(srcFormat)
call	556:23	556:52	10	av_get_pix_fmt_name
arg	556:43	556:52	11	srcFormat
water	556:43	0:0	12	srcFormat
arg	556:55	556:85	9	av_get_pix_fmt_name(dstFormat)
call	556:55	556:84	10	av_get_pix_fmt_name
arg	556:75	556:84	11	dstFormat
water	556:75	0:0	12	dstFormat
water	556:86	0:0	8	;
return	557:12	557:20	6	0
water	557:19	0:0	7	0
water	558:8	0:0	6	}
water	559:4	0:0	4	}
water	561:4	0:0	2	c
op	561:5	0:0	2	->
water	561:7	0:0	2	swscale
op	561:15	0:0	2	=
call	561:17	561:32	2	ff_getSwsFunc
arg	561:31	561:32	3	c
water	561:31	0:0	4	c
water	561:33	0:0	2	;
return	562:4	562:12	2	0
water	562:11	0:0	3	0
label	563:0	563:4	2	fail :
if	564:4	589:4	2	(ret == RETCODE_USE_CASCADE)
cond	564:8	564:15	3	ret == RETCODE_USE_CASCADE
water	564:8	0:0	4	ret
op	564:12	0:0	4	==
water	564:15	0:0	4	RETCODE_USE_CASCADE
stmts	564:37	589:4	3	
water	564:37	0:0	4	{
decl	565:8	565:45	4	int	tmpW
op	565:17	0:0	4	=
call	565:19	565:44	5	sqrt
arg	565:24	565:44	6	srcW*(int64_t)dstW
water	565:24	0:0	7	srcW
op	565:29	0:0	7	*
water	565:31	0:0	7	(
water	565:32	0:0	7	int64_t
water	565:39	0:0	7	)
water	565:40	0:0	7	dstW
decl	566:8	566:45	4	int	tmpH
op	566:17	0:0	4	=
call	566:19	566:44	5	sqrt
arg	566:24	566:44	6	srcH*(int64_t)dstH
water	566:24	0:0	7	srcH
op	566:29	0:0	7	*
water	566:31	0:0	7	(
water	566:32	0:0	7	int64_t
water	566:39	0:0	7	)
water	566:40	0:0	7	dstH
decl	567:8	567:57	4	enum AVPixelFormat	tmpFormat
op	567:37	0:0	4	=
water	567:39	0:0	4	AV_PIX_FMT_YUV420P
if	569:8	570:34	4	(srcW * ( int64_t ) srcH <= 4 LL * dstW * dstH)
cond	569:12	569:43	5	srcW * ( int64_t ) srcH <= 4 LL * dstW * dstH
water	569:12	0:0	6	srcW
op	569:16	0:0	6	*
water	569:17	0:0	6	(
water	569:18	0:0	6	int64_t
water	569:25	0:0	6	)
water	569:26	0:0	6	srcH
op	569:31	0:0	6	<=
water	569:34	0:0	6	4
water	569:35	0:0	6	LL
op	569:37	0:0	6	*
water	569:38	0:0	6	dstW
op	569:42	0:0	6	*
water	569:43	0:0	6	dstH
stmts	570:12	570:34	5	
return	570:12	570:34	6	AVERROR(EINVAL)
call	570:19	570:33	7	AVERROR
arg	570:27	570:33	8	EINVAL
water	570:27	0:0	9	EINVAL
water	572:8	0:0	4	ret
op	572:12	0:0	4	=
call	572:14	573:54	4	av_image_alloc
arg	572:29	572:44	5	c->cascaded_tmp
water	572:29	0:0	6	c
op	572:30	0:0	6	->
water	572:32	0:0	6	cascaded_tmp
arg	572:46	572:67	5	c->cascaded_tmpStride
water	572:46	0:0	6	c
op	572:47	0:0	6	->
water	572:49	0:0	6	cascaded_tmpStride
arg	573:29	573:33	5	tmpW
water	573:29	0:0	6	tmpW
arg	573:35	573:39	5	tmpH
water	573:35	0:0	6	tmpH
arg	573:41	573:50	5	tmpFormat
water	573:41	0:0	6	tmpFormat
arg	573:52	573:54	5	64
water	573:52	0:0	6	64
water	573:55	0:0	4	;
if	574:8	575:22	4	(ret < 0)
cond	574:12	574:18	5	ret < 0
water	574:12	0:0	6	ret
op	574:16	0:0	6	<
water	574:18	0:0	6	0
stmts	575:12	575:22	5	
return	575:12	575:22	6	ret
water	575:19	0:0	7	ret
water	577:8	0:0	4	c
op	577:9	0:0	4	->
water	577:11	0:0	4	cascaded_context
op	577:27	0:0	4	[
water	577:28	0:0	4	0
op	577:29	0:0	4	]
op	577:31	0:0	4	=
call	577:33	579:80	4	sws_getContext
arg	577:48	577:52	5	srcW
water	577:48	0:0	6	srcW
arg	577:54	577:58	5	srcH
water	577:54	0:0	6	srcH
arg	577:60	577:69	5	srcFormat
water	577:60	0:0	6	srcFormat
arg	578:48	578:52	5	tmpW
water	578:48	0:0	6	tmpW
arg	578:54	578:58	5	tmpH
water	578:54	0:0	6	tmpH
arg	578:60	578:69	5	tmpFormat
water	578:60	0:0	6	tmpFormat
arg	579:48	579:53	5	flags
water	579:48	0:0	6	flags
arg	579:55	579:64	5	srcFilter
water	579:55	0:0	6	srcFilter
arg	579:66	579:70	5	NULL
water	579:66	0:0	6	NULL
arg	579:72	579:80	5	c->param
water	579:72	0:0	6	c
op	579:73	0:0	6	->
water	579:75	0:0	6	param
water	579:81	0:0	4	;
if	580:8	581:21	4	(! c -> cascaded_context [ 0 ])
cond	580:12	580:34	5	! c -> cascaded_context [ 0 ]
op	580:12	0:0	6	!
water	580:13	0:0	6	c
op	580:14	0:0	6	->
water	580:16	0:0	6	cascaded_context
op	580:32	0:0	6	[
water	580:33	0:0	6	0
op	580:34	0:0	6	]
stmts	581:12	581:21	5	
return	581:12	581:21	6	-1
op	581:19	0:0	7	-
water	581:20	0:0	7	1
water	583:8	0:0	4	c
op	583:9	0:0	4	->
water	583:11	0:0	4	cascaded_context
op	583:27	0:0	4	[
water	583:28	0:0	4	1
op	583:29	0:0	4	]
op	583:31	0:0	4	=
call	583:33	585:80	4	sws_getContext
arg	583:48	583:52	5	tmpW
water	583:48	0:0	6	tmpW
arg	583:54	583:58	5	tmpH
water	583:54	0:0	6	tmpH
arg	583:60	583:69	5	tmpFormat
water	583:60	0:0	6	tmpFormat
arg	584:48	584:52	5	dstW
water	584:48	0:0	6	dstW
arg	584:54	584:58	5	dstH
water	584:54	0:0	6	dstH
arg	584:60	584:69	5	dstFormat
water	584:60	0:0	6	dstFormat
arg	585:48	585:53	5	flags
water	585:48	0:0	6	flags
arg	585:55	585:59	5	NULL
water	585:55	0:0	6	NULL
arg	585:61	585:70	5	dstFilter
water	585:61	0:0	6	dstFilter
arg	585:72	585:80	5	c->param
water	585:72	0:0	6	c
op	585:73	0:0	6	->
water	585:75	0:0	6	param
water	585:81	0:0	4	;
if	586:8	587:21	4	(! c -> cascaded_context [ 1 ])
cond	586:12	586:34	5	! c -> cascaded_context [ 1 ]
op	586:12	0:0	6	!
water	586:13	0:0	6	c
op	586:14	0:0	6	->
water	586:16	0:0	6	cascaded_context
op	586:32	0:0	6	[
water	586:33	0:0	6	1
op	586:34	0:0	6	]
stmts	587:12	587:21	5	
return	587:12	587:21	6	-1
op	587:19	0:0	7	-
water	587:20	0:0	7	1
return	588:8	588:16	4	0
water	588:15	0:0	5	0
water	589:4	0:0	4	}
return	590:4	590:13	2	-1
op	590:11	0:0	3	-
water	590:12	0:0	3	1
