func	2:0	63:0	0	static void	lpc_prediction
params	2:26	0:0	1	
param	2:27	2:48	2	int32_t *	error_buffer
param	2:50	2:69	2	int32_t *	buffer_out
param	3:27	3:41	2	int	nb_samples
param	3:43	3:50	2	int	bps
param	3:52	3:70	2	int16_t *	lpc_coefs
param	4:27	4:40	2	int	lpc_order
param	4:42	4:55	2	int	lpc_quant
stmnts	0:0	62:4	1	
decl	6:4	6:9	2	int	i
decl	7:4	7:30	2	int32_t	*pred
op	7:18	0:0	2	=
water	7:20	0:0	2	buffer_out
op	10:4	0:0	2	*
water	10:5	0:0	2	buffer_out
op	10:16	0:0	2	=
op	10:18	0:0	2	*
water	10:19	0:0	2	error_buffer
water	10:31	0:0	2	;
if	12:4	13:14	2	(nb_samples <= 1)
cond	12:8	12:22	3	nb_samples <= 1
water	12:8	0:0	4	nb_samples
op	12:19	0:0	4	<=
water	12:22	0:0	4	1
stmts	13:8	13:14	3	
return	13:8	13:14	4	
if	15:4	19:4	2	(! lpc_order)
cond	15:8	15:9	3	! lpc_order
op	15:8	0:0	4	!
water	15:9	0:0	4	lpc_order
stmts	15:20	19:4	3	
water	15:20	0:0	4	{
call	16:8	17:53	4	memcpy
arg	16:15	16:29	5	&buffer_out[1]
op	16:15	0:0	6	&
water	16:16	0:0	6	buffer_out
op	16:26	0:0	6	[
water	16:27	0:0	6	1
op	16:28	0:0	6	]
arg	16:31	16:47	5	&error_buffer[1]
op	16:31	0:0	6	&
water	16:32	0:0	6	error_buffer
op	16:44	0:0	6	[
water	16:45	0:0	6	1
op	16:46	0:0	6	]
arg	17:15	17:53	5	(nb_samples-1)*sizeof(*buffer_out)
water	17:15	0:0	6	(
water	17:16	0:0	6	nb_samples
op	17:27	0:0	6	-
water	17:29	0:0	6	1
water	17:30	0:0	6	)
op	17:32	0:0	6	*
op	17:34	0:0	6	sizeof
water	17:40	0:0	6	(
op	17:41	0:0	6	*
water	17:42	0:0	6	buffer_out
water	17:52	0:0	6	)
water	17:54	0:0	4	;
return	18:8	18:14	4	
water	19:4	0:0	4	}
if	21:4	28:4	2	(lpc_order == 31)
cond	21:8	21:21	3	lpc_order == 31
water	21:8	0:0	4	lpc_order
op	21:18	0:0	4	==
water	21:21	0:0	4	31
stmts	21:25	28:4	3	
water	21:25	0:0	4	{
for	23:8	26:8	4	(i = 1 ;i < nb_samples;i ++)
forinit	23:13	23:18	5	i = 1 ;
water	23:13	0:0	6	i
op	23:15	0:0	6	=
water	23:17	0:0	6	1
water	23:18	0:0	6	;
cond	23:20	23:24	5	i < nb_samples
water	23:20	0:0	6	i
op	23:22	0:0	6	<
water	23:24	0:0	6	nb_samples
forexpr	23:36	23:37	5	i ++
water	23:36	0:0	6	i
op	23:37	0:0	6	++
stmts	23:41	26:8	5	
water	23:41	0:0	6	{
water	24:12	0:0	6	buffer_out
op	24:22	0:0	6	[
water	24:23	0:0	6	i
op	24:24	0:0	6	]
op	24:26	0:0	6	=
call	24:28	25:43	6	sign_extend
arg	24:40	24:75	7	buffer_out[i-1]+error_buffer[i]
water	24:40	0:0	8	buffer_out
op	24:50	0:0	8	[
water	24:51	0:0	8	i
op	24:53	0:0	8	-
water	24:55	0:0	8	1
op	24:56	0:0	8	]
op	24:58	0:0	8	+
water	24:60	0:0	8	error_buffer
op	24:72	0:0	8	[
water	24:73	0:0	8	i
op	24:74	0:0	8	]
arg	25:40	25:43	7	bps
water	25:40	0:0	8	bps
water	25:44	0:0	6	;
water	26:8	0:0	6	}
return	27:8	27:14	4	
water	28:4	0:0	4	}
for	31:4	32:77	2	(i = 1 ;i <= lpc_order && i < nb_samples;i ++)
forinit	31:9	31:14	3	i = 1 ;
water	31:9	0:0	4	i
op	31:11	0:0	4	=
water	31:13	0:0	4	1
water	31:14	0:0	4	;
cond	31:16	31:38	3	i <= lpc_order && i < nb_samples
water	31:16	0:0	4	i
op	31:18	0:0	4	<=
water	31:21	0:0	4	lpc_order
op	31:31	0:0	4	&&
water	31:34	0:0	4	i
op	31:36	0:0	4	<
water	31:38	0:0	4	nb_samples
forexpr	31:50	31:51	3	i ++
water	31:50	0:0	4	i
op	31:51	0:0	4	++
stmts	32:8	32:77	3	
water	32:8	0:0	4	buffer_out
op	32:18	0:0	4	[
water	32:19	0:0	4	i
op	32:20	0:0	4	]
op	32:22	0:0	4	=
call	32:24	32:76	4	sign_extend
arg	32:36	32:71	5	buffer_out[i-1]+error_buffer[i]
water	32:36	0:0	6	buffer_out
op	32:46	0:0	6	[
water	32:47	0:0	6	i
op	32:49	0:0	6	-
water	32:51	0:0	6	1
op	32:52	0:0	6	]
op	32:54	0:0	6	+
water	32:56	0:0	6	error_buffer
op	32:68	0:0	6	[
water	32:69	0:0	6	i
op	32:70	0:0	6	]
arg	32:73	32:76	5	bps
water	32:73	0:0	6	bps
water	32:77	0:0	4	;
for	36:4	62:4	2	(;i < nb_samples;i ++)
forinit	36:9	36:9	3	;
water	36:9	0:0	4	;
cond	36:11	36:15	3	i < nb_samples
water	36:11	0:0	4	i
op	36:13	0:0	4	<
water	36:15	0:0	4	nb_samples
forexpr	36:27	36:28	3	i ++
water	36:27	0:0	4	i
op	36:28	0:0	4	++
stmts	36:32	62:4	3	
water	36:32	0:0	4	{
decl	37:8	37:13	4	int	j
decl	38:8	38:19	4	int	val
op	38:16	0:0	4	=
water	38:18	0:0	4	0
decl	39:8	39:39	4	int	error_val
op	39:22	0:0	4	=
water	39:24	0:0	4	error_buffer
op	39:36	0:0	4	[
water	39:37	0:0	4	i
op	39:38	0:0	4	]
decl	40:8	40:22	4	int	error_sign
decl	41:8	41:23	4	int	d
op	41:14	0:0	4	=
op	41:16	0:0	4	*
water	41:17	0:0	4	pred
op	41:21	0:0	4	++
for	44:8	45:47	4	(j = 0 ;j < lpc_order;j ++)
forinit	44:13	44:18	5	j = 0 ;
water	44:13	0:0	6	j
op	44:15	0:0	6	=
water	44:17	0:0	6	0
water	44:18	0:0	6	;
cond	44:20	44:24	5	j < lpc_order
water	44:20	0:0	6	j
op	44:22	0:0	6	<
water	44:24	0:0	6	lpc_order
forexpr	44:35	44:36	5	j ++
water	44:35	0:0	6	j
op	44:36	0:0	6	++
stmts	45:12	45:47	5	
water	45:12	0:0	6	val
op	45:16	0:0	6	+=
water	45:19	0:0	6	(
water	45:20	0:0	6	pred
op	45:24	0:0	6	[
water	45:25	0:0	6	j
op	45:26	0:0	6	]
op	45:28	0:0	6	-
water	45:30	0:0	6	d
water	45:31	0:0	6	)
op	45:33	0:0	6	*
water	45:35	0:0	6	lpc_coefs
op	45:44	0:0	6	[
water	45:45	0:0	6	j
op	45:46	0:0	6	]
water	45:47	0:0	6	;
water	46:8	0:0	4	val
op	46:12	0:0	4	=
water	46:14	0:0	4	(
water	46:15	0:0	4	val
op	46:19	0:0	4	+
water	46:21	0:0	4	(
water	46:22	0:0	4	1
op	46:24	0:0	4	<<
water	46:27	0:0	4	(
water	46:28	0:0	4	lpc_quant
op	46:38	0:0	4	-
water	46:40	0:0	4	1
water	46:41	0:0	4	)
water	46:42	0:0	4	)
water	46:43	0:0	4	)
op	46:45	0:0	4	>>
water	46:48	0:0	4	lpc_quant
water	46:57	0:0	4	;
water	47:8	0:0	4	val
op	47:12	0:0	4	+=
water	47:15	0:0	4	d
op	47:17	0:0	4	+
water	47:19	0:0	4	error_val
water	47:28	0:0	4	;
water	48:8	0:0	4	buffer_out
op	48:18	0:0	4	[
water	48:19	0:0	4	i
op	48:20	0:0	4	]
op	48:22	0:0	4	=
call	48:24	48:44	4	sign_extend
arg	48:36	48:39	5	val
water	48:36	0:0	6	val
arg	48:41	48:44	5	bps
water	48:41	0:0	6	bps
water	48:45	0:0	4	;
water	51:8	0:0	4	error_sign
op	51:19	0:0	4	=
call	51:21	51:40	4	sign_only
arg	51:31	51:40	5	error_val
water	51:31	0:0	6	error_val
water	51:41	0:0	4	;
if	52:8	61:8	4	(error_sign)
cond	52:12	52:12	5	error_sign
water	52:12	0:0	6	error_sign
stmts	52:24	61:8	5	
water	52:24	0:0	6	{
for	53:12	60:12	6	(j = 0 ;j < lpc_order && error_val * error_sign > 0;j ++)
forinit	53:17	53:22	7	j = 0 ;
water	53:17	0:0	8	j
op	53:19	0:0	8	=
water	53:21	0:0	8	0
water	53:22	0:0	8	;
cond	53:24	53:66	7	j < lpc_order && error_val * error_sign > 0
water	53:24	0:0	8	j
op	53:26	0:0	8	<
water	53:28	0:0	8	lpc_order
op	53:38	0:0	8	&&
water	53:41	0:0	8	error_val
op	53:51	0:0	8	*
water	53:53	0:0	8	error_sign
op	53:64	0:0	8	>
water	53:66	0:0	8	0
forexpr	53:69	53:70	7	j ++
water	53:69	0:0	8	j
op	53:70	0:0	8	++
stmts	53:74	60:12	7	
water	53:74	0:0	8	{
decl	54:16	54:24	8	int	sign
water	55:16	0:0	8	val
op	55:21	0:0	8	=
water	55:23	0:0	8	d
op	55:25	0:0	8	-
water	55:27	0:0	8	pred
op	55:31	0:0	8	[
water	55:32	0:0	8	j
op	55:33	0:0	8	]
water	55:34	0:0	8	;
water	56:16	0:0	8	sign
op	56:21	0:0	8	=
call	56:23	56:36	8	sign_only
arg	56:33	56:36	9	val
water	56:33	0:0	10	val
op	56:38	0:0	8	*
water	56:40	0:0	8	error_sign
water	56:50	0:0	8	;
water	57:16	0:0	8	lpc_coefs
op	57:25	0:0	8	[
water	57:26	0:0	8	j
op	57:27	0:0	8	]
op	57:29	0:0	8	-=
water	57:32	0:0	8	sign
water	57:36	0:0	8	;
water	58:16	0:0	8	val
op	58:20	0:0	8	*=
water	58:23	0:0	8	sign
water	58:27	0:0	8	;
water	59:16	0:0	8	error_val
op	59:26	0:0	8	-=
water	59:29	0:0	8	(
water	59:30	0:0	8	val
op	59:34	0:0	8	>>
water	59:37	0:0	8	lpc_quant
water	59:46	0:0	8	)
op	59:48	0:0	8	*
water	59:50	0:0	8	(
water	59:51	0:0	8	j
op	59:53	0:0	8	+
water	59:55	0:0	8	1
water	59:56	0:0	8	)
water	59:57	0:0	8	;
water	60:12	0:0	8	}
water	61:8	0:0	6	}
water	62:4	0:0	4	}
