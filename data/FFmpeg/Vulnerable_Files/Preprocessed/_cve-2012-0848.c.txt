func	2:0	124:0	0	static int	ws_snd_decode_frame
params	2:30	0:0	1	
param	2:31	2:52	2	AVCodecContext *	avctx
param	2:54	2:64	2	void *	data
param	3:31	3:49	2	int *	got_frame_ptr
param	3:51	3:66	2	AVPacket *	avpkt
stmnts	0:0	123:19	1	
decl	5:4	5:38	2	WSSndContext	*s
op	5:20	0:0	2	=
water	5:22	0:0	2	avctx
op	5:27	0:0	2	->
water	5:29	0:0	2	priv_data
decl	6:4	6:36	2	const uint8_t	*buf
op	6:23	0:0	2	=
water	6:25	0:0	2	avpkt
op	6:30	0:0	2	->
water	6:32	0:0	2	data
decl	7:4	7:36	2	int	buf_size
op	7:23	0:0	2	=
water	7:25	0:0	2	avpkt
op	7:30	0:0	2	->
water	7:32	0:0	2	size
decl	9:4	9:30	2	int	in_size
water	9:15	0:0	2	,
decl	9:4	9:30	2	int	out_size
water	9:25	0:0	2	,
decl	9:4	9:30	2	int	ret
decl	10:4	10:20	2	int	sample
op	10:15	0:0	2	=
water	10:17	0:0	2	128
decl	11:4	11:20	2	uint8_t	*samples
decl	12:4	12:24	2	uint8_t	*samples_end
if	14:4	15:16	2	(! buf_size)
cond	14:8	14:9	3	! buf_size
op	14:8	0:0	4	!
water	14:9	0:0	4	buf_size
stmts	15:8	15:16	3	
return	15:8	15:16	4	0
water	15:15	0:0	5	0
if	17:4	20:4	2	(buf_size < 4)
cond	17:8	17:19	3	buf_size < 4
water	17:8	0:0	4	buf_size
op	17:17	0:0	4	<
water	17:19	0:0	4	4
stmts	17:22	20:4	3	
water	17:22	0:0	4	{
call	18:8	18:59	4	av_log
arg	18:15	18:20	5	avctx
water	18:15	0:0	6	avctx
arg	18:22	18:34	5	AV_LOG_ERROR
water	18:22	0:0	6	AV_LOG_ERROR
arg	18:36	18:59	5	"packet is too small\n"
water	18:36	0:0	6	"packet is too small\n"
water	18:60	0:0	4	;
return	19:8	19:30	4	AVERROR(EINVAL)
call	19:15	19:29	5	AVERROR
arg	19:23	19:29	6	EINVAL
water	19:23	0:0	7	EINVAL
water	20:4	0:0	4	}
water	22:4	0:0	2	out_size
op	22:13	0:0	2	=
call	22:15	22:30	2	AV_RL16
arg	22:23	22:30	3	&buf[0]
op	22:23	0:0	4	&
water	22:24	0:0	4	buf
op	22:27	0:0	4	[
water	22:28	0:0	4	0
op	22:29	0:0	4	]
water	22:31	0:0	2	;
water	23:4	0:0	2	in_size
op	23:13	0:0	2	=
call	23:15	23:30	2	AV_RL16
arg	23:23	23:30	3	&buf[2]
op	23:23	0:0	4	&
water	23:24	0:0	4	buf
op	23:27	0:0	4	[
water	23:28	0:0	4	2
op	23:29	0:0	4	]
water	23:31	0:0	2	;
water	24:4	0:0	2	buf
op	24:8	0:0	2	+=
water	24:11	0:0	2	4
water	24:12	0:0	2	;
if	26:4	29:4	2	(in_size > buf_size)
cond	26:8	26:18	3	in_size > buf_size
water	26:8	0:0	4	in_size
op	26:16	0:0	4	>
water	26:18	0:0	4	buf_size
stmts	26:28	29:4	3	
water	26:28	0:0	4	{
call	27:8	27:78	4	av_log
arg	27:15	27:20	5	avctx
water	27:15	0:0	6	avctx
arg	27:22	27:34	5	AV_LOG_ERROR
water	27:22	0:0	6	AV_LOG_ERROR
arg	27:36	27:78	5	"Frame data is larger than input buffer\n"
water	27:36	0:0	6	"Frame data is larger than input buffer\n"
water	27:79	0:0	4	;
return	28:8	28:17	4	-1
op	28:15	0:0	5	-
water	28:16	0:0	5	1
water	29:4	0:0	4	}
water	32:4	0:0	2	s
op	32:5	0:0	2	->
water	32:7	0:0	2	frame
op	32:12	0:0	2	.
water	32:13	0:0	2	nb_samples
op	32:24	0:0	2	=
water	32:26	0:0	2	out_size
water	32:34	0:0	2	;
if	33:4	36:4	2	(( ret =avctx -> get_buffer (avctx ,& s -> frame ) ) < 0)
cond	33:8	33:54	3	( ret =avctx -> get_buffer (avctx ,& s -> frame ) ) < 0
water	33:8	0:0	4	(
water	33:9	0:0	4	ret
op	33:13	0:0	4	=
call	33:15	33:49	4	avctx->get_buffer
arg	33:33	33:38	5	avctx
water	33:33	0:0	6	avctx
arg	33:40	33:49	5	&s->frame
op	33:40	0:0	6	&
water	33:41	0:0	6	s
op	33:42	0:0	6	->
water	33:44	0:0	6	frame
water	33:50	0:0	4	)
op	33:52	0:0	4	<
water	33:54	0:0	4	0
stmts	33:57	36:4	3	
water	33:57	0:0	4	{
call	34:8	34:59	4	av_log
arg	34:15	34:20	5	avctx
water	34:15	0:0	6	avctx
arg	34:22	34:34	5	AV_LOG_ERROR
water	34:22	0:0	6	AV_LOG_ERROR
arg	34:36	34:59	5	"get_buffer() failed\n"
water	34:36	0:0	6	"get_buffer() failed\n"
water	34:60	0:0	4	;
return	35:8	35:18	4	ret
water	35:15	0:0	5	ret
water	36:4	0:0	4	}
water	37:4	0:0	2	samples
op	37:16	0:0	2	=
water	37:18	0:0	2	s
op	37:19	0:0	2	->
water	37:21	0:0	2	frame
op	37:26	0:0	2	.
water	37:27	0:0	2	data
op	37:31	0:0	2	[
water	37:32	0:0	2	0
op	37:33	0:0	2	]
water	37:34	0:0	2	;
water	38:4	0:0	2	samples_end
op	38:16	0:0	2	=
water	38:18	0:0	2	samples
op	38:26	0:0	2	+
water	38:28	0:0	2	out_size
water	38:36	0:0	2	;
if	40:4	45:4	2	(in_size == out_size)
cond	40:8	40:19	3	in_size == out_size
water	40:8	0:0	4	in_size
op	40:16	0:0	4	==
water	40:19	0:0	4	out_size
stmts	40:29	45:4	3	
water	40:29	0:0	4	{
call	41:8	41:37	4	memcpy
arg	41:15	41:22	5	samples
water	41:15	0:0	6	samples
arg	41:24	41:27	5	buf
water	41:24	0:0	6	buf
arg	41:29	41:37	5	out_size
water	41:29	0:0	6	out_size
water	41:38	0:0	4	;
op	42:8	0:0	4	*
water	42:9	0:0	4	got_frame_ptr
op	42:25	0:0	4	=
water	42:27	0:0	4	1
water	42:28	0:0	4	;
op	43:8	0:0	4	*
water	43:9	0:0	4	(
water	43:10	0:0	4	AVFrame
op	43:18	0:0	4	*
water	43:19	0:0	4	)
water	43:20	0:0	4	data
op	43:25	0:0	4	=
water	43:27	0:0	4	s
op	43:28	0:0	4	->
water	43:30	0:0	4	frame
water	43:35	0:0	4	;
return	44:8	44:23	4	buf_size
water	44:15	0:0	5	buf_size
water	45:4	0:0	4	}
while	47:4	117:4	2	(samples < samples_end && buf - avpkt -> data < buf_size)
cond	47:11	47:56	3	samples < samples_end && buf - avpkt -> data < buf_size
water	47:11	0:0	4	samples
op	47:19	0:0	4	<
water	47:21	0:0	4	samples_end
op	47:33	0:0	4	&&
water	47:36	0:0	4	buf
op	47:40	0:0	4	-
water	47:42	0:0	4	avpkt
op	47:47	0:0	4	->
water	47:49	0:0	4	data
op	47:54	0:0	4	<
water	47:56	0:0	4	buf_size
stmts	47:66	117:4	3	
water	47:66	0:0	4	{
decl	48:8	48:27	4	int	code
water	48:16	0:0	4	,
decl	48:8	48:27	4	int	smp
water	48:21	0:0	4	,
decl	48:8	48:27	4	int	size
decl	49:8	49:21	4	uint8_t	count
water	50:8	0:0	4	code
op	50:14	0:0	4	=
op	50:16	0:0	4	*
water	50:17	0:0	4	buf
op	50:21	0:0	4	>>
water	50:24	0:0	4	6
water	50:25	0:0	4	;
water	51:8	0:0	4	count
op	51:14	0:0	4	=
op	51:16	0:0	4	*
water	51:17	0:0	4	buf
op	51:21	0:0	4	&
water	51:23	0:0	4	0
water	51:24	0:0	4	x3F
water	51:27	0:0	4	;
water	52:8	0:0	4	buf
op	52:11	0:0	4	++
water	52:13	0:0	4	;
switch	55:8	60:8	4	(code)
cond	55:16	55:16	5	code
water	55:16	0:0	6	code
stmts	55:22	60:8	5	
water	55:22	0:0	6	{
label	56:8	56:14	6	case 0 :
water	56:17	0:0	6	smp
op	56:21	0:0	6	=
water	56:23	0:0	6	4
op	56:24	0:0	6	*
water	56:25	0:0	6	(
water	56:26	0:0	6	count
op	56:31	0:0	6	+
water	56:32	0:0	6	1
water	56:33	0:0	6	)
water	56:34	0:0	6	;
break	56:55	56:60	6	
label	57:8	57:14	6	case 1 :
water	57:17	0:0	6	smp
op	57:21	0:0	6	=
water	57:23	0:0	6	2
op	57:24	0:0	6	*
water	57:25	0:0	6	(
water	57:26	0:0	6	count
op	57:31	0:0	6	+
water	57:32	0:0	6	1
water	57:33	0:0	6	)
water	57:34	0:0	6	;
break	57:55	57:60	6	
label	58:8	58:14	6	case 2 :
water	58:17	0:0	6	smp
op	58:21	0:0	6	=
water	58:23	0:0	6	(
water	58:24	0:0	6	count
op	58:30	0:0	6	&
water	58:32	0:0	6	0
water	58:33	0:0	6	x20
water	58:36	0:0	6	)
water	58:38	0:0	6	?
water	58:40	0:0	6	1
water	58:42	0:0	6	:
water	58:44	0:0	6	count
op	58:50	0:0	6	+
water	58:52	0:0	6	1
water	58:53	0:0	6	;
break	58:55	58:60	6	
label	59:8	59:15	6	default :
water	59:17	0:0	6	smp
op	59:21	0:0	6	=
water	59:23	0:0	6	count
op	59:29	0:0	6	+
water	59:31	0:0	6	1
water	59:32	0:0	6	;
break	59:55	59:60	6	
water	60:8	0:0	6	}
if	61:8	62:17	4	(samples_end - samples < smp)
cond	61:12	61:36	5	samples_end - samples < smp
water	61:12	0:0	6	samples_end
op	61:24	0:0	6	-
water	61:26	0:0	6	samples
op	61:34	0:0	6	<
water	61:36	0:0	6	smp
stmts	62:12	62:17	5	
break	62:12	62:17	6	
water	65:8	0:0	4	size
op	65:13	0:0	4	=
water	65:15	0:0	4	(
water	65:16	0:0	4	(
water	65:17	0:0	4	code
op	65:22	0:0	4	==
water	65:25	0:0	4	2
op	65:27	0:0	4	&&
water	65:30	0:0	4	(
water	65:31	0:0	4	count
op	65:37	0:0	4	&
water	65:39	0:0	4	0
water	65:40	0:0	4	x20
water	65:43	0:0	4	)
water	65:44	0:0	4	)
op	65:46	0:0	4	||
water	65:49	0:0	4	code
op	65:54	0:0	4	==
water	65:57	0:0	4	3
water	65:58	0:0	4	)
water	65:60	0:0	4	?
water	65:62	0:0	4	0
water	65:64	0:0	4	:
water	65:66	0:0	4	count
op	65:72	0:0	4	+
water	65:74	0:0	4	1
water	65:75	0:0	4	;
if	66:8	67:17	4	(( buf - avpkt -> data ) + size > buf_size)
cond	66:12	66:41	5	( buf - avpkt -> data ) + size > buf_size
water	66:12	0:0	6	(
water	66:13	0:0	6	buf
op	66:17	0:0	6	-
water	66:19	0:0	6	avpkt
op	66:24	0:0	6	->
water	66:26	0:0	6	data
water	66:30	0:0	6	)
op	66:32	0:0	6	+
water	66:34	0:0	6	size
op	66:39	0:0	6	>
water	66:41	0:0	6	buf_size
stmts	67:12	67:17	5	
break	67:12	67:17	6	
switch	69:8	116:8	4	(code)
cond	69:16	69:16	5	code
water	69:16	0:0	6	code
stmts	69:22	116:8	5	
water	69:22	0:0	6	{
label	70:8	70:14	6	case 0 :
for	71:12	85:12	6	(count ++ ;count > 0;count --)
forinit	71:17	71:24	7	count ++ ;
water	71:17	0:0	8	count
op	71:22	0:0	8	++
water	71:24	0:0	8	;
cond	71:26	71:34	7	count > 0
water	71:26	0:0	8	count
op	71:32	0:0	8	>
water	71:34	0:0	8	0
forexpr	71:37	71:42	7	count --
water	71:37	0:0	8	count
op	71:42	0:0	8	--
stmts	71:46	85:12	7	
water	71:46	0:0	8	{
water	72:16	0:0	8	code
op	72:21	0:0	8	=
op	72:23	0:0	8	*
water	72:24	0:0	8	buf
op	72:27	0:0	8	++
water	72:29	0:0	8	;
water	73:16	0:0	8	sample
op	73:23	0:0	8	+=
water	73:26	0:0	8	(
water	73:28	0:0	8	code
op	73:39	0:0	8	&
water	73:41	0:0	8	0
water	73:42	0:0	8	x3
water	73:44	0:0	8	)
op	73:46	0:0	8	-
water	73:48	0:0	8	2
water	73:49	0:0	8	;
water	74:16	0:0	8	sample
op	74:23	0:0	8	=
call	74:25	74:45	8	av_clip_uint8
arg	74:39	74:45	9	sample
water	74:39	0:0	10	sample
water	74:46	0:0	8	;
op	75:16	0:0	8	*
water	75:17	0:0	8	samples
op	75:24	0:0	8	++
op	75:27	0:0	8	=
water	75:29	0:0	8	sample
water	75:35	0:0	8	;
water	76:16	0:0	8	sample
op	76:23	0:0	8	+=
water	76:26	0:0	8	(
water	76:27	0:0	8	(
water	76:28	0:0	8	code
op	76:33	0:0	8	>>
water	76:36	0:0	8	2
water	76:37	0:0	8	)
op	76:39	0:0	8	&
water	76:41	0:0	8	0
water	76:42	0:0	8	x3
water	76:44	0:0	8	)
op	76:46	0:0	8	-
water	76:48	0:0	8	2
water	76:49	0:0	8	;
water	77:16	0:0	8	sample
op	77:23	0:0	8	=
call	77:25	77:45	8	av_clip_uint8
arg	77:39	77:45	9	sample
water	77:39	0:0	10	sample
water	77:46	0:0	8	;
op	78:16	0:0	8	*
water	78:17	0:0	8	samples
op	78:24	0:0	8	++
op	78:27	0:0	8	=
water	78:29	0:0	8	sample
water	78:35	0:0	8	;
water	79:16	0:0	8	sample
op	79:23	0:0	8	+=
water	79:26	0:0	8	(
water	79:27	0:0	8	(
water	79:28	0:0	8	code
op	79:33	0:0	8	>>
water	79:36	0:0	8	4
water	79:37	0:0	8	)
op	79:39	0:0	8	&
water	79:41	0:0	8	0
water	79:42	0:0	8	x3
water	79:44	0:0	8	)
op	79:46	0:0	8	-
water	79:48	0:0	8	2
water	79:49	0:0	8	;
water	80:16	0:0	8	sample
op	80:23	0:0	8	=
call	80:25	80:45	8	av_clip_uint8
arg	80:39	80:45	9	sample
water	80:39	0:0	10	sample
water	80:46	0:0	8	;
op	81:16	0:0	8	*
water	81:17	0:0	8	samples
op	81:24	0:0	8	++
op	81:27	0:0	8	=
water	81:29	0:0	8	sample
water	81:35	0:0	8	;
water	82:16	0:0	8	sample
op	82:23	0:0	8	+=
water	82:27	0:0	8	(
water	82:28	0:0	8	code
op	82:33	0:0	8	>>
water	82:36	0:0	8	6
water	82:37	0:0	8	)
op	82:46	0:0	8	-
water	82:48	0:0	8	2
water	82:49	0:0	8	;
water	83:16	0:0	8	sample
op	83:23	0:0	8	=
call	83:25	83:45	8	av_clip_uint8
arg	83:39	83:45	9	sample
water	83:39	0:0	10	sample
water	83:46	0:0	8	;
op	84:16	0:0	8	*
water	84:17	0:0	8	samples
op	84:24	0:0	8	++
op	84:27	0:0	8	=
water	84:29	0:0	8	sample
water	84:35	0:0	8	;
water	85:12	0:0	8	}
break	86:12	86:17	6	
label	87:8	87:14	6	case 1 :
for	88:12	96:12	6	(count ++ ;count > 0;count --)
forinit	88:17	88:24	7	count ++ ;
water	88:17	0:0	8	count
op	88:22	0:0	8	++
water	88:24	0:0	8	;
cond	88:26	88:34	7	count > 0
water	88:26	0:0	8	count
op	88:32	0:0	8	>
water	88:34	0:0	8	0
forexpr	88:37	88:42	7	count --
water	88:37	0:0	8	count
op	88:42	0:0	8	--
stmts	88:46	96:12	7	
water	88:46	0:0	8	{
water	89:16	0:0	8	code
op	89:21	0:0	8	=
op	89:23	0:0	8	*
water	89:24	0:0	8	buf
op	89:27	0:0	8	++
water	89:29	0:0	8	;
water	90:16	0:0	8	sample
op	90:23	0:0	8	+=
water	90:26	0:0	8	ws_adpcm_4bit
op	90:39	0:0	8	[
water	90:40	0:0	8	code
op	90:45	0:0	8	&
water	90:47	0:0	8	0
water	90:48	0:0	8	xF
op	90:50	0:0	8	]
water	90:51	0:0	8	;
water	91:16	0:0	8	sample
op	91:23	0:0	8	=
call	91:25	91:45	8	av_clip_uint8
arg	91:39	91:45	9	sample
water	91:39	0:0	10	sample
water	91:46	0:0	8	;
op	92:16	0:0	8	*
water	92:17	0:0	8	samples
op	92:24	0:0	8	++
op	92:27	0:0	8	=
water	92:29	0:0	8	sample
water	92:35	0:0	8	;
water	93:16	0:0	8	sample
op	93:23	0:0	8	+=
water	93:26	0:0	8	ws_adpcm_4bit
op	93:39	0:0	8	[
water	93:40	0:0	8	code
op	93:45	0:0	8	>>
water	93:48	0:0	8	4
op	93:49	0:0	8	]
water	93:50	0:0	8	;
water	94:16	0:0	8	sample
op	94:23	0:0	8	=
call	94:25	94:45	8	av_clip_uint8
arg	94:39	94:45	9	sample
water	94:39	0:0	10	sample
water	94:46	0:0	8	;
op	95:16	0:0	8	*
water	95:17	0:0	8	samples
op	95:24	0:0	8	++
op	95:27	0:0	8	=
water	95:29	0:0	8	sample
water	95:35	0:0	8	;
water	96:12	0:0	8	}
break	97:12	97:17	6	
label	98:8	98:14	6	case 2 :
if	99:12	106:12	6	(count & 0 x20)
cond	99:16	99:25	7	count & 0 x20
water	99:16	0:0	8	count
op	99:22	0:0	8	&
water	99:24	0:0	8	0
water	99:25	0:0	8	x20
stmts	99:30	106:12	7	
water	99:30	0:0	8	{
decl	100:16	100:24	8	int8_t	t
water	101:16	0:0	8	t
op	101:18	0:0	8	=
water	101:20	0:0	8	count
water	101:25	0:0	8	;
water	102:16	0:0	8	t
op	102:18	0:0	8	<<=
water	102:22	0:0	8	3
water	102:23	0:0	8	;
water	103:16	0:0	8	sample
op	103:23	0:0	8	+=
water	103:26	0:0	8	t
op	103:28	0:0	8	>>
water	103:31	0:0	8	3
water	103:32	0:0	8	;
water	104:16	0:0	8	sample
op	104:23	0:0	8	=
call	104:25	104:45	8	av_clip_uint8
arg	104:39	104:45	9	sample
water	104:39	0:0	10	sample
water	104:46	0:0	8	;
op	105:16	0:0	8	*
water	105:17	0:0	8	samples
op	105:24	0:0	8	++
op	105:27	0:0	8	=
water	105:29	0:0	8	sample
water	105:35	0:0	8	;
water	106:12	0:0	8	}
else	106:14	111:12	6
stmts	106:19	111:12	7	
water	106:19	0:0	8	{
call	107:16	107:40	8	memcpy
arg	107:23	107:30	9	samples
water	107:23	0:0	10	samples
arg	107:32	107:35	9	buf
water	107:32	0:0	10	buf
arg	107:37	107:40	9	smp
water	107:37	0:0	10	smp
water	107:41	0:0	8	;
water	108:16	0:0	8	samples
op	108:24	0:0	8	+=
water	108:27	0:0	8	smp
water	108:30	0:0	8	;
water	109:16	0:0	8	buf
op	109:24	0:0	8	+=
water	109:27	0:0	8	smp
water	109:30	0:0	8	;
water	110:16	0:0	8	sample
op	110:23	0:0	8	=
water	110:25	0:0	8	buf
op	110:28	0:0	8	[
op	110:29	0:0	8	-
water	110:30	0:0	8	1
op	110:31	0:0	8	]
water	110:32	0:0	8	;
water	111:12	0:0	8	}
break	112:12	112:17	6	
label	113:8	113:15	6	default :
call	114:12	114:39	6	memset
arg	114:19	114:26	7	samples
water	114:19	0:0	8	samples
arg	114:28	114:34	7	sample
water	114:28	0:0	8	sample
arg	114:36	114:39	7	smp
water	114:36	0:0	8	smp
water	114:40	0:0	6	;
water	115:12	0:0	6	samples
op	115:20	0:0	6	+=
water	115:23	0:0	6	smp
water	115:26	0:0	6	;
water	116:8	0:0	6	}
water	117:4	0:0	4	}
water	119:4	0:0	2	s
op	119:5	0:0	2	->
water	119:7	0:0	2	frame
op	119:12	0:0	2	.
water	119:13	0:0	2	nb_samples
op	119:24	0:0	2	=
water	119:26	0:0	2	samples
op	119:34	0:0	2	-
water	119:36	0:0	2	s
op	119:37	0:0	2	->
water	119:39	0:0	2	frame
op	119:44	0:0	2	.
water	119:45	0:0	2	data
op	119:49	0:0	2	[
water	119:50	0:0	2	0
op	119:51	0:0	2	]
water	119:52	0:0	2	;
op	120:4	0:0	2	*
water	120:5	0:0	2	got_frame_ptr
op	120:21	0:0	2	=
water	120:23	0:0	2	1
water	120:24	0:0	2	;
op	121:4	0:0	2	*
water	121:5	0:0	2	(
water	121:6	0:0	2	AVFrame
op	121:14	0:0	2	*
water	121:15	0:0	2	)
water	121:16	0:0	2	data
op	121:21	0:0	2	=
water	121:23	0:0	2	s
op	121:24	0:0	2	->
water	121:26	0:0	2	frame
water	121:31	0:0	2	;
return	123:4	123:19	2	buf_size
water	123:11	0:0	3	buf_size
