func	2:0	95:0	0	int	avcodec_default_get_buffer
params	2:30	0:0	1	
param	2:31	2:48	2	AVCodecContext *	s
param	2:50	2:62	2	AVFrame *	pic
stmnts	0:0	94:12	1	
decl	3:4	3:9	2	int	i
decl	4:4	4:19	2	int	w
op	4:9	0:0	2	=
water	4:11	0:0	2	s
op	4:12	0:0	2	->
water	4:14	0:0	2	width
decl	5:4	5:20	2	int	h
op	5:9	0:0	2	=
water	5:11	0:0	2	s
op	5:12	0:0	2	->
water	5:14	0:0	2	height
decl	6:4	6:23	2	InternalBuffer	*buf
decl	7:4	7:23	2	int	*picture_number
call	9:4	9:29	2	assert
arg	9:11	9:29	3	pic->data[0]==NULL
water	9:11	0:0	4	pic
op	9:14	0:0	4	->
water	9:16	0:0	4	data
op	9:20	0:0	4	[
water	9:21	0:0	4	0
op	9:22	0:0	4	]
op	9:23	0:0	4	==
water	9:25	0:0	4	NULL
water	9:30	0:0	2	;
call	10:4	10:58	2	assert
arg	10:11	10:58	3	INTERNAL_BUFFER_SIZE>s->internal_buffer_count
water	10:11	0:0	4	INTERNAL_BUFFER_SIZE
op	10:32	0:0	4	>
water	10:34	0:0	4	s
op	10:35	0:0	4	->
water	10:37	0:0	4	internal_buffer_count
water	10:59	0:0	2	;
if	12:4	13:17	2	(avcodec_check_dimensions (s ,w ,h ))
cond	12:7	12:37	3	avcodec_check_dimensions (s ,w ,h )
call	12:7	12:37	4	avcodec_check_dimensions
arg	12:32	12:33	5	s
water	12:32	0:0	6	s
arg	12:34	12:35	5	w
water	12:34	0:0	6	w
arg	12:36	12:37	5	h
water	12:36	0:0	6	h
stmts	13:8	13:17	3	
return	13:8	13:17	4	-1
op	13:15	0:0	5	-
water	13:16	0:0	5	1
if	15:4	17:4	2	(s -> internal_buffer == NULL)
cond	15:7	15:27	3	s -> internal_buffer == NULL
water	15:7	0:0	4	s
op	15:8	0:0	4	->
water	15:10	0:0	4	internal_buffer
op	15:25	0:0	4	==
water	15:27	0:0	4	NULL
stmts	15:32	17:4	3	
water	15:32	0:0	4	{
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	internal_buffer
op	16:26	0:0	4	=
call	16:28	16:82	4	av_mallocz
arg	16:39	16:82	5	INTERNAL_BUFFER_SIZE*sizeof(InternalBuffer)
water	16:39	0:0	6	INTERNAL_BUFFER_SIZE
op	16:59	0:0	6	*
op	16:60	0:0	6	sizeof
water	16:66	0:0	6	(
water	16:67	0:0	6	InternalBuffer
water	16:81	0:0	6	)
water	16:83	0:0	4	;
water	17:4	0:0	4	}
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	internal_buffer
op	19:22	0:0	2	=
call	19:24	23:8	2	av_fast_realloc
arg	20:8	20:26	3	s->internal_buffer
water	20:8	0:0	4	s
op	20:9	0:0	4	->
water	20:11	0:0	4	internal_buffer
arg	21:8	21:32	3	&s->internal_buffer_size
op	21:8	0:0	4	&
water	21:9	0:0	4	s
op	21:10	0:0	4	->
water	21:12	0:0	4	internal_buffer_size
arg	22:8	23:8	3	sizeof(InternalBuffer)*FFMAX(99,s->internal_buffer_count+1)
op	22:8	0:0	4	sizeof
water	22:14	0:0	4	(
water	22:15	0:0	4	InternalBuffer
water	22:29	0:0	4	)
call	22:30	22:68	4	*FFMAX
arg	22:37	22:39	5	99
water	22:37	0:0	6	99
arg	22:42	22:68	5	s->internal_buffer_count+1
water	22:42	0:0	6	s
op	22:43	0:0	6	->
water	22:45	0:0	6	internal_buffer_count
op	22:66	0:0	6	+
water	22:67	0:0	6	1
water	23:9	0:0	2	;
water	26:4	0:0	2	buf
op	26:7	0:0	2	=
op	26:9	0:0	2	&
water	26:10	0:0	2	(
water	26:11	0:0	2	(
water	26:12	0:0	2	InternalBuffer
op	26:26	0:0	2	*
water	26:27	0:0	2	)
water	26:28	0:0	2	s
op	26:29	0:0	2	->
water	26:31	0:0	2	internal_buffer
water	26:46	0:0	2	)
op	26:47	0:0	2	[
water	26:48	0:0	2	s
op	26:49	0:0	2	->
water	26:51	0:0	2	internal_buffer_count
op	26:72	0:0	2	]
water	26:73	0:0	2	;
water	27:4	0:0	2	picture_number
op	27:18	0:0	2	=
op	27:20	0:0	2	&
water	27:21	0:0	2	(
water	27:22	0:0	2	(
water	27:23	0:0	2	(
water	27:24	0:0	2	InternalBuffer
op	27:38	0:0	2	*
water	27:39	0:0	2	)
water	27:40	0:0	2	s
op	27:41	0:0	2	->
water	27:43	0:0	2	internal_buffer
water	27:58	0:0	2	)
op	27:59	0:0	2	[
water	27:60	0:0	2	INTERNAL_BUFFER_SIZE
op	27:80	0:0	2	-
water	27:81	0:0	2	1
op	27:82	0:0	2	]
water	27:83	0:0	2	)
op	27:84	0:0	2	.
water	27:85	0:0	2	last_pic_num
water	27:97	0:0	2	;
water	28:4	0:0	2	(
op	28:5	0:0	2	*
water	28:6	0:0	2	picture_number
water	28:20	0:0	2	)
op	28:21	0:0	2	++
water	28:23	0:0	2	;
if	30:4	33:4	2	(buf -> base [ 0 ])
cond	30:7	30:18	3	buf -> base [ 0 ]
water	30:7	0:0	4	buf
op	30:10	0:0	4	->
water	30:12	0:0	4	base
op	30:16	0:0	4	[
water	30:17	0:0	4	0
op	30:18	0:0	4	]
stmts	30:20	33:4	3	
water	30:20	0:0	4	{
water	31:8	0:0	4	pic
op	31:11	0:0	4	->
water	31:13	0:0	4	age
op	31:16	0:0	4	=
op	31:18	0:0	4	*
water	31:19	0:0	4	picture_number
op	31:34	0:0	4	-
water	31:36	0:0	4	buf
op	31:39	0:0	4	->
water	31:41	0:0	4	last_pic_num
water	31:53	0:0	4	;
water	32:8	0:0	4	buf
op	32:11	0:0	4	->
water	32:13	0:0	4	last_pic_num
op	32:25	0:0	4	=
op	32:27	0:0	4	*
water	32:28	0:0	4	picture_number
water	32:42	0:0	4	;
water	33:4	0:0	4	}
else	33:5	84:4	2
stmts	33:9	84:4	3	
water	33:9	0:0	4	{
decl	34:8	34:42	4	int	h_chroma_shift
water	34:26	0:0	4	,
decl	34:8	34:42	4	int	v_chroma_shift
decl	35:8	35:31	4	int	pixel_size
water	35:22	0:0	4	,
decl	35:8	35:31	4	int	size[3]
decl	36:8	36:25	4	AVPicture	picture
call	38:8	38:82	4	avcodec_get_chroma_sub_sample
arg	38:38	38:48	5	s->pix_fmt
water	38:38	0:0	6	s
op	38:39	0:0	6	->
water	38:41	0:0	6	pix_fmt
arg	38:50	38:65	5	&h_chroma_shift
op	38:50	0:0	6	&
water	38:51	0:0	6	h_chroma_shift
arg	38:67	38:82	5	&v_chroma_shift
op	38:67	0:0	6	&
water	38:68	0:0	6	v_chroma_shift
water	38:83	0:0	4	;
call	40:8	40:42	4	avcodec_align_dimensions
arg	40:33	40:34	5	s
water	40:33	0:0	6	s
arg	40:36	40:38	5	&w
op	40:36	0:0	6	&
water	40:37	0:0	6	w
arg	40:40	40:42	5	&h
op	40:40	0:0	6	&
water	40:41	0:0	6	h
water	40:43	0:0	4	;
if	42:8	45:8	4	(! ( s -> flags & CODEC_FLAG_EMU_EDGE ))
cond	42:11	42:41	5	! ( s -> flags & CODEC_FLAG_EMU_EDGE )
op	42:11	0:0	6	!
water	42:12	0:0	6	(
water	42:13	0:0	6	s
op	42:14	0:0	6	->
water	42:16	0:0	6	flags
op	42:21	0:0	6	&
water	42:22	0:0	6	CODEC_FLAG_EMU_EDGE
water	42:41	0:0	6	)
stmts	42:43	45:8	5	
water	42:43	0:0	6	{
water	43:12	0:0	6	w
op	43:13	0:0	6	+=
water	43:16	0:0	6	EDGE_WIDTH
op	43:26	0:0	6	*
water	43:27	0:0	6	2
water	43:28	0:0	6	;
water	44:12	0:0	6	h
op	44:13	0:0	6	+=
water	44:16	0:0	6	EDGE_WIDTH
op	44:26	0:0	6	*
water	44:27	0:0	6	2
water	44:28	0:0	6	;
water	45:8	0:0	6	}
call	46:8	46:55	4	avpicture_fill
arg	46:23	46:31	5	&picture
op	46:23	0:0	6	&
water	46:24	0:0	6	picture
arg	46:33	46:37	5	NULL
water	46:33	0:0	6	NULL
arg	46:39	46:49	5	s->pix_fmt
water	46:39	0:0	6	s
op	46:40	0:0	6	->
water	46:42	0:0	6	pix_fmt
arg	46:51	46:52	5	w
water	46:51	0:0	6	w
arg	46:54	46:55	5	h
water	46:54	0:0	6	h
water	46:56	0:0	4	;
water	47:8	0:0	4	pixel_size
op	47:18	0:0	4	=
water	47:20	0:0	4	picture
op	47:27	0:0	4	.
water	47:28	0:0	4	linesize
op	47:36	0:0	4	[
water	47:37	0:0	4	0
op	47:38	0:0	4	]
op	47:39	0:0	4	*
water	47:40	0:0	4	8
op	47:42	0:0	4	/
water	47:44	0:0	4	w
water	47:45	0:0	4	;
call	49:8	49:28	4	assert
arg	49:15	49:28	5	pixel_size>=1
water	49:15	0:0	6	pixel_size
op	49:25	0:0	6	>=
water	49:27	0:0	6	1
water	49:29	0:0	4	;
if	51:8	52:53	4	(pixel_size == 3 * 8)
cond	51:11	51:27	5	pixel_size == 3 * 8
water	51:11	0:0	6	pixel_size
op	51:22	0:0	6	==
water	51:25	0:0	6	3
op	51:26	0:0	6	*
water	51:27	0:0	6	8
stmts	52:12	52:53	5	
water	52:12	0:0	6	w
op	52:13	0:0	6	=
call	52:15	52:52	6	ALIGN
arg	52:21	52:22	7	w
water	52:21	0:0	8	w
arg	52:24	52:52	7	STRIDE_ALIGN<<h_chroma_shift
water	52:24	0:0	8	STRIDE_ALIGN
op	52:36	0:0	8	<<
water	52:38	0:0	8	h_chroma_shift
water	52:53	0:0	6	;
else	53:8	54:81	4
stmts	54:12	54:81	5	
water	54:12	0:0	6	w
op	54:13	0:0	6	=
call	54:15	54:67	6	ALIGN
arg	54:21	54:33	7	pixel_size*w
water	54:21	0:0	8	pixel_size
op	54:31	0:0	8	*
water	54:32	0:0	8	w
arg	54:35	54:67	7	STRIDE_ALIGN<<(h_chroma_shift+3)
water	54:35	0:0	8	STRIDE_ALIGN
op	54:47	0:0	8	<<
water	54:49	0:0	8	(
water	54:50	0:0	8	h_chroma_shift
op	54:64	0:0	8	+
water	54:65	0:0	8	3
water	54:66	0:0	8	)
op	54:69	0:0	6	/
water	54:71	0:0	6	pixel_size
water	54:81	0:0	6	;
water	55:8	0:0	4	size
op	55:12	0:0	4	[
water	55:13	0:0	4	1
op	55:14	0:0	4	]
op	55:16	0:0	4	=
call	55:18	55:65	4	avpicture_fill
arg	55:33	55:41	5	&picture
op	55:33	0:0	6	&
water	55:34	0:0	6	picture
arg	55:43	55:47	5	NULL
water	55:43	0:0	6	NULL
arg	55:49	55:59	5	s->pix_fmt
water	55:49	0:0	6	s
op	55:50	0:0	6	->
water	55:52	0:0	6	pix_fmt
arg	55:61	55:62	5	w
water	55:61	0:0	6	w
arg	55:64	55:65	5	h
water	55:64	0:0	6	h
water	55:66	0:0	4	;
water	56:8	0:0	4	size
op	56:12	0:0	4	[
water	56:13	0:0	4	0
op	56:14	0:0	4	]
op	56:16	0:0	4	=
water	56:18	0:0	4	picture
op	56:25	0:0	4	.
water	56:26	0:0	4	linesize
op	56:34	0:0	4	[
water	56:35	0:0	4	0
op	56:36	0:0	4	]
op	56:38	0:0	4	*
water	56:40	0:0	4	h
water	56:41	0:0	4	;
water	57:8	0:0	4	size
op	57:12	0:0	4	[
water	57:13	0:0	4	1
op	57:14	0:0	4	]
op	57:16	0:0	4	-=
water	57:19	0:0	4	size
op	57:23	0:0	4	[
water	57:24	0:0	4	0
op	57:25	0:0	4	]
water	57:26	0:0	4	;
if	58:8	59:39	4	(picture . data [ 2 ])
cond	58:11	58:25	5	picture . data [ 2 ]
water	58:11	0:0	6	picture
op	58:18	0:0	6	.
water	58:19	0:0	6	data
op	58:23	0:0	6	[
water	58:24	0:0	6	2
op	58:25	0:0	6	]
stmts	59:12	59:39	5	
water	59:12	0:0	6	size
op	59:16	0:0	6	[
water	59:17	0:0	6	1
op	59:18	0:0	6	]
op	59:19	0:0	6	=
water	59:21	0:0	6	size
op	59:25	0:0	6	[
water	59:26	0:0	6	2
op	59:27	0:0	6	]
op	59:28	0:0	6	=
water	59:30	0:0	6	size
op	59:34	0:0	6	[
water	59:35	0:0	6	1
op	59:36	0:0	6	]
op	59:37	0:0	6	/
water	59:38	0:0	6	2
water	59:39	0:0	6	;
else	60:8	61:22	4
stmts	61:12	61:22	5	
water	61:12	0:0	6	size
op	61:16	0:0	6	[
water	61:17	0:0	6	2
op	61:18	0:0	6	]
op	61:19	0:0	6	=
water	61:21	0:0	6	0
water	61:22	0:0	6	;
water	63:8	0:0	4	buf
op	63:11	0:0	4	->
water	63:13	0:0	4	last_pic_num
op	63:25	0:0	4	=
op	63:27	0:0	4	-
water	63:28	0:0	4	256
op	63:31	0:0	4	*
water	63:32	0:0	4	256
op	63:35	0:0	4	*
water	63:36	0:0	4	256
op	63:39	0:0	4	*
water	63:40	0:0	4	64
water	63:42	0:0	4	;
call	64:8	64:46	4	memset
arg	64:15	64:24	5	buf->base
water	64:15	0:0	6	buf
op	64:18	0:0	6	->
water	64:20	0:0	6	base
arg	64:26	64:27	5	0
water	64:26	0:0	6	0
arg	64:29	64:46	5	sizeof(buf->base)
op	64:29	0:0	6	sizeof
water	64:35	0:0	6	(
water	64:36	0:0	6	buf
op	64:39	0:0	6	->
water	64:41	0:0	6	base
water	64:45	0:0	6	)
water	64:47	0:0	4	;
call	65:8	65:46	4	memset
arg	65:15	65:24	5	buf->data
water	65:15	0:0	6	buf
op	65:18	0:0	6	->
water	65:20	0:0	6	data
arg	65:26	65:27	5	0
water	65:26	0:0	6	0
arg	65:29	65:46	5	sizeof(buf->data)
op	65:29	0:0	6	sizeof
water	65:35	0:0	6	(
water	65:36	0:0	6	buf
op	65:39	0:0	6	->
water	65:41	0:0	6	data
water	65:45	0:0	6	)
water	65:47	0:0	4	;
for	67:8	82:8	4	(i = 0 ;i < 3 && size [ i ];i ++)
forinit	67:12	67:15	5	i = 0 ;
water	67:12	0:0	6	i
op	67:13	0:0	6	=
water	67:14	0:0	6	0
water	67:15	0:0	6	;
cond	67:17	67:30	5	i < 3 && size [ i ]
water	67:17	0:0	6	i
op	67:18	0:0	6	<
water	67:19	0:0	6	3
op	67:21	0:0	6	&&
water	67:24	0:0	6	size
op	67:28	0:0	6	[
water	67:29	0:0	6	i
op	67:30	0:0	6	]
forexpr	67:33	67:34	5	i ++
water	67:33	0:0	6	i
op	67:34	0:0	6	++
stmts	67:37	82:8	5	
water	67:37	0:0	6	{
decl	68:12	68:56	6	const int	h_shift
op	68:29	0:0	6	=
water	68:31	0:0	6	i
op	68:32	0:0	6	==
water	68:34	0:0	6	0
water	68:36	0:0	6	?
water	68:38	0:0	6	0
water	68:40	0:0	6	:
water	68:42	0:0	6	h_chroma_shift
decl	69:12	69:56	6	const int	v_shift
op	69:29	0:0	6	=
water	69:31	0:0	6	i
op	69:32	0:0	6	==
water	69:34	0:0	6	0
water	69:36	0:0	6	?
water	69:38	0:0	6	0
water	69:40	0:0	6	:
water	69:42	0:0	6	v_chroma_shift
water	71:12	0:0	6	buf
op	71:15	0:0	6	->
water	71:17	0:0	6	linesize
op	71:25	0:0	6	[
water	71:26	0:0	6	i
op	71:27	0:0	6	]
op	71:28	0:0	6	=
water	71:30	0:0	6	picture
op	71:37	0:0	6	.
water	71:38	0:0	6	linesize
op	71:46	0:0	6	[
water	71:47	0:0	6	i
op	71:48	0:0	6	]
water	71:49	0:0	6	;
water	73:12	0:0	6	buf
op	73:15	0:0	6	->
water	73:17	0:0	6	base
op	73:21	0:0	6	[
water	73:22	0:0	6	i
op	73:23	0:0	6	]
op	73:24	0:0	6	=
call	73:26	73:46	6	av_malloc
arg	73:36	73:46	7	size[i]+16
water	73:36	0:0	8	size
op	73:40	0:0	8	[
water	73:41	0:0	8	i
op	73:42	0:0	8	]
op	73:43	0:0	8	+
water	73:44	0:0	8	16
water	73:47	0:0	6	;
if	74:12	74:44	6	(buf -> base [ i ] == NULL)
cond	74:15	74:29	7	buf -> base [ i ] == NULL
water	74:15	0:0	8	buf
op	74:18	0:0	8	->
water	74:20	0:0	8	base
op	74:24	0:0	8	[
water	74:25	0:0	8	i
op	74:26	0:0	8	]
op	74:27	0:0	8	==
water	74:29	0:0	8	NULL
stmts	74:35	74:44	7	
return	74:35	74:44	8	-1
op	74:42	0:0	9	-
water	74:43	0:0	9	1
call	75:12	75:45	6	memset
arg	75:19	75:31	7	buf->base[i]
water	75:19	0:0	8	buf
op	75:22	0:0	8	->
water	75:24	0:0	8	base
op	75:28	0:0	8	[
water	75:29	0:0	8	i
op	75:30	0:0	8	]
arg	75:33	75:36	7	128
water	75:33	0:0	8	128
arg	75:38	75:45	7	size[i]
water	75:38	0:0	8	size
op	75:42	0:0	8	[
water	75:43	0:0	8	i
op	75:44	0:0	8	]
water	75:46	0:0	6	;
if	78:12	79:43	6	(( s -> flags & CODEC_FLAG_EMU_EDGE ) || ( s -> pix_fmt == PIX_FMT_PAL8 ) || ! size [ 2 ])
cond	78:15	78:88	7	( s -> flags & CODEC_FLAG_EMU_EDGE ) || ( s -> pix_fmt == PIX_FMT_PAL8 ) || ! size [ 2 ]
water	78:15	0:0	8	(
water	78:16	0:0	8	s
op	78:17	0:0	8	->
water	78:19	0:0	8	flags
op	78:24	0:0	8	&
water	78:25	0:0	8	CODEC_FLAG_EMU_EDGE
water	78:44	0:0	8	)
op	78:46	0:0	8	||
water	78:49	0:0	8	(
water	78:50	0:0	8	s
op	78:51	0:0	8	->
water	78:53	0:0	8	pix_fmt
op	78:61	0:0	8	==
water	78:64	0:0	8	PIX_FMT_PAL8
water	78:76	0:0	8	)
op	78:78	0:0	8	||
op	78:81	0:0	8	!
water	78:82	0:0	8	size
op	78:86	0:0	8	[
water	78:87	0:0	8	2
op	78:88	0:0	8	]
stmts	79:16	79:43	7	
water	79:16	0:0	8	buf
op	79:19	0:0	8	->
water	79:21	0:0	8	data
op	79:25	0:0	8	[
water	79:26	0:0	8	i
op	79:27	0:0	8	]
op	79:29	0:0	8	=
water	79:31	0:0	8	buf
op	79:34	0:0	8	->
water	79:36	0:0	8	base
op	79:40	0:0	8	[
water	79:41	0:0	8	i
op	79:42	0:0	8	]
water	79:43	0:0	8	;
else	80:12	81:129	6
stmts	81:16	81:129	7	
water	81:16	0:0	8	buf
op	81:19	0:0	8	->
water	81:21	0:0	8	data
op	81:25	0:0	8	[
water	81:26	0:0	8	i
op	81:27	0:0	8	]
op	81:29	0:0	8	=
water	81:31	0:0	8	buf
op	81:34	0:0	8	->
water	81:36	0:0	8	base
op	81:40	0:0	8	[
water	81:41	0:0	8	i
op	81:42	0:0	8	]
op	81:44	0:0	8	+
call	81:46	81:128	8	ALIGN
arg	81:52	81:114	9	(buf->linesize[i]*EDGE_WIDTH>>v_shift)+(EDGE_WIDTH>>h_shift)
water	81:52	0:0	10	(
water	81:53	0:0	10	buf
op	81:56	0:0	10	->
water	81:58	0:0	10	linesize
op	81:66	0:0	10	[
water	81:67	0:0	10	i
op	81:68	0:0	10	]
op	81:69	0:0	10	*
water	81:70	0:0	10	EDGE_WIDTH
op	81:80	0:0	10	>>
water	81:82	0:0	10	v_shift
water	81:89	0:0	10	)
op	81:91	0:0	10	+
water	81:93	0:0	10	(
water	81:94	0:0	10	EDGE_WIDTH
op	81:104	0:0	10	>>
water	81:106	0:0	10	h_shift
water	81:113	0:0	10	)
arg	81:116	81:128	9	STRIDE_ALIGN
water	81:116	0:0	10	STRIDE_ALIGN
water	81:129	0:0	8	;
water	82:8	0:0	6	}
water	83:8	0:0	4	pic
op	83:11	0:0	4	->
water	83:13	0:0	4	age
op	83:16	0:0	4	=
water	83:18	0:0	4	256
op	83:21	0:0	4	*
water	83:22	0:0	4	256
op	83:25	0:0	4	*
water	83:26	0:0	4	256
op	83:29	0:0	4	*
water	83:30	0:0	4	64
water	83:32	0:0	4	;
water	84:4	0:0	4	}
water	85:4	0:0	2	pic
op	85:7	0:0	2	->
water	85:9	0:0	2	type
op	85:13	0:0	2	=
water	85:15	0:0	2	FF_BUFFER_TYPE_INTERNAL
water	85:38	0:0	2	;
for	87:4	91:4	2	(i = 0 ;i < 4;i ++)
forinit	87:8	87:11	3	i = 0 ;
water	87:8	0:0	4	i
op	87:9	0:0	4	=
water	87:10	0:0	4	0
water	87:11	0:0	4	;
cond	87:13	87:15	3	i < 4
water	87:13	0:0	4	i
op	87:14	0:0	4	<
water	87:15	0:0	4	4
forexpr	87:18	87:19	3	i ++
water	87:18	0:0	4	i
op	87:19	0:0	4	++
stmts	87:22	91:4	3	
water	87:22	0:0	4	{
water	88:8	0:0	4	pic
op	88:11	0:0	4	->
water	88:13	0:0	4	base
op	88:17	0:0	4	[
water	88:18	0:0	4	i
op	88:19	0:0	4	]
op	88:20	0:0	4	=
water	88:22	0:0	4	buf
op	88:25	0:0	4	->
water	88:27	0:0	4	base
op	88:31	0:0	4	[
water	88:32	0:0	4	i
op	88:33	0:0	4	]
water	88:34	0:0	4	;
water	89:8	0:0	4	pic
op	89:11	0:0	4	->
water	89:13	0:0	4	data
op	89:17	0:0	4	[
water	89:18	0:0	4	i
op	89:19	0:0	4	]
op	89:20	0:0	4	=
water	89:22	0:0	4	buf
op	89:25	0:0	4	->
water	89:27	0:0	4	data
op	89:31	0:0	4	[
water	89:32	0:0	4	i
op	89:33	0:0	4	]
water	89:34	0:0	4	;
water	90:8	0:0	4	pic
op	90:11	0:0	4	->
water	90:13	0:0	4	linesize
op	90:21	0:0	4	[
water	90:22	0:0	4	i
op	90:23	0:0	4	]
op	90:24	0:0	4	=
water	90:26	0:0	4	buf
op	90:29	0:0	4	->
water	90:31	0:0	4	linesize
op	90:39	0:0	4	[
water	90:40	0:0	4	i
op	90:41	0:0	4	]
water	90:42	0:0	4	;
water	91:4	0:0	4	}
water	92:4	0:0	2	s
op	92:5	0:0	2	->
water	92:7	0:0	2	internal_buffer_count
op	92:28	0:0	2	++
water	92:30	0:0	2	;
return	94:4	94:12	2	0
water	94:11	0:0	3	0
