func	2:0	23:0	0	static int	read_huffman_tables
params	2:30	0:0	1	
param	2:31	2:45	2	HYuvContext *	s
param	2:47	2:65	2	const uint8_t *	src
param	2:67	2:77	2	int	length
stmnts	0:0	22:40	1	
decl	4:4	4:20	2	GetBitContext	gb
decl	5:4	5:9	2	int	i
call	7:4	7:38	2	init_get_bits
arg	7:18	7:21	3	&gb
op	7:18	0:0	4	&
water	7:19	0:0	4	gb
arg	7:23	7:26	3	src
water	7:23	0:0	4	src
arg	7:28	7:38	3	length*8
water	7:28	0:0	4	length
op	7:35	0:0	4	*
water	7:37	0:0	4	8
water	7:39	0:0	2	;
for	9:4	18:4	2	(i = 0 ;i < 3;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:20	3	i < 3
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	3
forexpr	9:23	9:24	3	i ++
water	9:23	0:0	4	i
op	9:24	0:0	4	++
stmts	9:28	18:4	3	
water	9:28	0:0	4	{
if	10:8	11:21	4	(read_len_table (s -> len [ i ] ,& gb ) < 0)
cond	10:12	10:45	5	read_len_table (s -> len [ i ] ,& gb ) < 0
call	10:12	10:41	6	read_len_table
arg	10:27	10:36	7	s->len[i]
water	10:27	0:0	8	s
op	10:28	0:0	8	->
water	10:30	0:0	8	len
op	10:33	0:0	8	[
water	10:34	0:0	8	i
op	10:35	0:0	8	]
arg	10:38	10:41	7	&gb
op	10:38	0:0	8	&
water	10:39	0:0	8	gb
op	10:43	0:0	6	<
water	10:45	0:0	6	0
stmts	11:12	11:21	5	
return	11:12	11:21	6	-1
op	11:19	0:0	7	-
water	11:20	0:0	7	1
if	12:8	14:8	4	(ff_huffyuv_generate_bits_table (s -> bits [ i ] ,s -> len [ i ] ) < 0)
cond	12:12	12:68	5	ff_huffyuv_generate_bits_table (s -> bits [ i ] ,s -> len [ i ] ) < 0
call	12:12	12:64	6	ff_huffyuv_generate_bits_table
arg	12:43	12:53	7	s->bits[i]
water	12:43	0:0	8	s
op	12:44	0:0	8	->
water	12:46	0:0	8	bits
op	12:50	0:0	8	[
water	12:51	0:0	8	i
op	12:52	0:0	8	]
arg	12:55	12:64	7	s->len[i]
water	12:55	0:0	8	s
op	12:56	0:0	8	->
water	12:58	0:0	8	len
op	12:61	0:0	8	[
water	12:62	0:0	8	i
op	12:63	0:0	8	]
op	12:66	0:0	6	<
water	12:68	0:0	6	0
stmts	12:71	14:8	5	
water	12:71	0:0	6	{
return	13:12	13:21	6	-1
op	13:19	0:0	7	-
water	13:20	0:0	7	1
water	14:8	0:0	6	}
call	15:8	15:30	4	ff_free_vlc
arg	15:20	15:30	5	&s->vlc[i]
op	15:20	0:0	6	&
water	15:21	0:0	6	s
op	15:22	0:0	6	->
water	15:24	0:0	6	vlc
op	15:27	0:0	6	[
water	15:28	0:0	6	i
op	15:29	0:0	6	]
water	15:31	0:0	4	;
call	16:8	17:36	4	init_vlc
arg	16:17	16:27	5	&s->vlc[i]
op	16:17	0:0	6	&
water	16:18	0:0	6	s
op	16:19	0:0	6	->
water	16:21	0:0	6	vlc
op	16:24	0:0	6	[
water	16:25	0:0	6	i
op	16:26	0:0	6	]
arg	16:29	16:37	5	VLC_BITS
water	16:29	0:0	6	VLC_BITS
arg	16:39	16:42	5	256
water	16:39	0:0	6	256
arg	16:44	16:53	5	s->len[i]
water	16:44	0:0	6	s
op	16:45	0:0	6	->
water	16:47	0:0	6	len
op	16:50	0:0	6	[
water	16:51	0:0	6	i
op	16:52	0:0	6	]
arg	16:55	16:56	5	1
water	16:55	0:0	6	1
arg	16:58	16:59	5	1
water	16:58	0:0	6	1
arg	17:17	17:27	5	s->bits[i]
water	17:17	0:0	6	s
op	17:18	0:0	6	->
water	17:20	0:0	6	bits
op	17:24	0:0	6	[
water	17:25	0:0	6	i
op	17:26	0:0	6	]
arg	17:29	17:30	5	4
water	17:29	0:0	6	4
arg	17:32	17:33	5	4
water	17:32	0:0	6	4
arg	17:35	17:36	5	0
water	17:35	0:0	6	0
water	17:37	0:0	4	;
water	18:4	0:0	4	}
call	20:4	20:27	2	generate_joint_tables
arg	20:26	20:27	3	s
water	20:26	0:0	4	s
water	20:28	0:0	2	;
return	22:4	22:40	2	(get_bits_count(&gb)+7)/8
water	22:11	0:0	3	(
call	22:12	22:30	3	get_bits_count
arg	22:27	22:30	4	&gb
op	22:27	0:0	5	&
water	22:28	0:0	5	gb
op	22:32	0:0	3	+
water	22:34	0:0	3	7
water	22:35	0:0	3	)
op	22:37	0:0	3	/
water	22:39	0:0	3	8
