func	2:0	18:0	0	int	avcodec_close
params	2:17	0:0	1	
param	2:18	2:39	2	AVCodecContext *	avctx
stmnts	4:4	17:12	1	
water	4:4	0:0	2	entangled_thread_counter
op	4:28	0:0	2	++
water	4:30	0:0	2	;
if	5:4	9:4	2	(entangled_thread_counter != 1)
cond	5:7	5:35	3	entangled_thread_counter != 1
water	5:7	0:0	4	entangled_thread_counter
op	5:32	0:0	4	!=
water	5:35	0:0	4	1
stmts	5:37	9:4	3	
water	5:37	0:0	4	{
call	6:8	6:95	4	av_log
arg	6:15	6:20	5	avctx
water	6:15	0:0	6	avctx
arg	6:22	6:34	5	AV_LOG_ERROR
water	6:22	0:0	6	AV_LOG_ERROR
arg	6:36	6:95	5	"insufficient thread locking around avcodec_open/close()\n"
water	6:36	0:0	6	"insufficient thread locking around avcodec_open/close()\n"
water	6:96	0:0	4	;
water	7:8	0:0	4	entangled_thread_counter
op	7:32	0:0	4	--
water	7:34	0:0	4	;
return	8:8	8:17	4	-1
op	8:15	0:0	5	-
water	8:16	0:0	5	1
water	9:4	0:0	4	}
if	11:4	12:34	2	(avctx -> codec -> close)
cond	11:8	11:22	3	avctx -> codec -> close
water	11:8	0:0	4	avctx
op	11:13	0:0	4	->
water	11:15	0:0	4	codec
op	11:20	0:0	4	->
water	11:22	0:0	4	close
stmts	12:8	12:34	3	
call	12:8	12:33	4	avctx->codec->close
arg	12:28	12:33	5	avctx
water	12:28	0:0	6	avctx
water	12:34	0:0	4	;
call	13:4	13:38	2	avcodec_default_free_buffers
arg	13:33	13:38	3	avctx
water	13:33	0:0	4	avctx
water	13:39	0:0	2	;
call	14:4	14:30	2	av_freep
arg	14:13	14:30	3	&avctx->priv_data
op	14:13	0:0	4	&
water	14:14	0:0	4	avctx
op	14:19	0:0	4	->
water	14:21	0:0	4	priv_data
water	14:31	0:0	2	;
water	15:4	0:0	2	avctx
op	15:9	0:0	2	->
water	15:11	0:0	2	codec
op	15:17	0:0	2	=
water	15:19	0:0	2	NULL
water	15:23	0:0	2	;
water	16:4	0:0	2	entangled_thread_counter
op	16:28	0:0	2	--
water	16:30	0:0	2	;
return	17:4	17:12	2	0
water	17:11	0:0	3	0
