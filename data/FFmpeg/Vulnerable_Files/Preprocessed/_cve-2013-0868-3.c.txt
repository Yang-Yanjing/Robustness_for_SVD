func	2:0	36:0	0	static int	read_old_huffman_tables
params	2:34	0:0	1	
param	2:35	2:49	2	HYuvContext *	s
stmnts	0:0	35:12	1	
decl	4:4	4:20	2	GetBitContext	gb
decl	5:4	5:9	2	int	i
call	7:4	8:51	2	init_get_bits
arg	7:18	7:21	3	&gb
op	7:18	0:0	4	&
water	7:19	0:0	4	gb
arg	7:23	7:41	3	classic_shift_luma
water	7:23	0:0	4	classic_shift_luma
arg	8:18	8:51	3	classic_shift_luma_table_size*8
water	8:18	0:0	4	classic_shift_luma_table_size
op	8:48	0:0	4	*
water	8:50	0:0	4	8
water	8:52	0:0	2	;
if	9:4	10:17	2	(read_len_table (s -> len [ 0 ] ,& gb ) < 0)
cond	9:8	9:41	3	read_len_table (s -> len [ 0 ] ,& gb ) < 0
call	9:8	9:37	4	read_len_table
arg	9:23	9:32	5	s->len[0]
water	9:23	0:0	6	s
op	9:24	0:0	6	->
water	9:26	0:0	6	len
op	9:29	0:0	6	[
water	9:30	0:0	6	0
op	9:31	0:0	6	]
arg	9:34	9:37	5	&gb
op	9:34	0:0	6	&
water	9:35	0:0	6	gb
op	9:39	0:0	4	<
water	9:41	0:0	4	0
stmts	10:8	10:17	3	
return	10:8	10:17	4	-1
op	10:15	0:0	5	-
water	10:16	0:0	5	1
call	12:4	13:53	2	init_get_bits
arg	12:18	12:21	3	&gb
op	12:18	0:0	4	&
water	12:19	0:0	4	gb
arg	12:23	12:43	3	classic_shift_chroma
water	12:23	0:0	4	classic_shift_chroma
arg	13:18	13:53	3	classic_shift_chroma_table_size*8
water	13:18	0:0	4	classic_shift_chroma_table_size
op	13:50	0:0	4	*
water	13:52	0:0	4	8
water	13:54	0:0	2	;
if	14:4	15:17	2	(read_len_table (s -> len [ 1 ] ,& gb ) < 0)
cond	14:8	14:41	3	read_len_table (s -> len [ 1 ] ,& gb ) < 0
call	14:8	14:37	4	read_len_table
arg	14:23	14:32	5	s->len[1]
water	14:23	0:0	6	s
op	14:24	0:0	6	->
water	14:26	0:0	6	len
op	14:29	0:0	6	[
water	14:30	0:0	6	1
op	14:31	0:0	6	]
arg	14:34	14:37	5	&gb
op	14:34	0:0	6	&
water	14:35	0:0	6	gb
op	14:39	0:0	4	<
water	14:41	0:0	4	0
stmts	15:8	15:17	3	
return	15:8	15:17	4	-1
op	15:15	0:0	5	-
water	15:16	0:0	5	1
for	17:4	17:62	2	(i = 0 ;i < 256;i ++)
forinit	17:8	17:11	3	i = 0 ;
water	17:8	0:0	4	i
op	17:9	0:0	4	=
water	17:10	0:0	4	0
water	17:11	0:0	4	;
cond	17:13	17:15	3	i < 256
water	17:13	0:0	4	i
op	17:14	0:0	4	<
water	17:15	0:0	4	256
forexpr	17:20	17:21	3	i ++
water	17:20	0:0	4	i
op	17:21	0:0	4	++
stmts	17:25	17:62	3	
water	17:25	0:0	4	s
op	17:26	0:0	4	->
water	17:28	0:0	4	bits
op	17:32	0:0	4	[
water	17:33	0:0	4	0
op	17:34	0:0	4	]
op	17:35	0:0	4	[
water	17:36	0:0	4	i
op	17:37	0:0	4	]
op	17:39	0:0	4	=
water	17:41	0:0	4	classic_add_luma
op	17:59	0:0	4	[
water	17:60	0:0	4	i
op	17:61	0:0	4	]
water	17:62	0:0	4	;
for	18:4	18:62	2	(i = 0 ;i < 256;i ++)
forinit	18:8	18:11	3	i = 0 ;
water	18:8	0:0	4	i
op	18:9	0:0	4	=
water	18:10	0:0	4	0
water	18:11	0:0	4	;
cond	18:13	18:15	3	i < 256
water	18:13	0:0	4	i
op	18:14	0:0	4	<
water	18:15	0:0	4	256
forexpr	18:20	18:21	3	i ++
water	18:20	0:0	4	i
op	18:21	0:0	4	++
stmts	18:25	18:62	3	
water	18:25	0:0	4	s
op	18:26	0:0	4	->
water	18:28	0:0	4	bits
op	18:32	0:0	4	[
water	18:33	0:0	4	1
op	18:34	0:0	4	]
op	18:35	0:0	4	[
water	18:36	0:0	4	i
op	18:37	0:0	4	]
op	18:39	0:0	4	=
water	18:41	0:0	4	classic_add_chroma
op	18:59	0:0	4	[
water	18:60	0:0	4	i
op	18:61	0:0	4	]
water	18:62	0:0	4	;
if	20:4	23:4	2	(s -> bitstream_bpp >= 24)
cond	20:8	20:28	3	s -> bitstream_bpp >= 24
water	20:8	0:0	4	s
op	20:9	0:0	4	->
water	20:11	0:0	4	bitstream_bpp
op	20:25	0:0	4	>=
water	20:28	0:0	4	24
stmts	20:32	23:4	3	
water	20:32	0:0	4	{
call	21:8	21:61	4	memcpy
arg	21:15	21:25	5	s->bits[1]
water	21:15	0:0	6	s
op	21:16	0:0	6	->
water	21:18	0:0	6	bits
op	21:22	0:0	6	[
water	21:23	0:0	6	1
op	21:24	0:0	6	]
arg	21:27	21:37	5	s->bits[0]
water	21:27	0:0	6	s
op	21:28	0:0	6	->
water	21:30	0:0	6	bits
op	21:34	0:0	6	[
water	21:35	0:0	6	0
op	21:36	0:0	6	]
arg	21:39	21:61	5	256*sizeof(uint32_t)
water	21:39	0:0	6	256
op	21:43	0:0	6	*
op	21:45	0:0	6	sizeof
water	21:51	0:0	6	(
water	21:52	0:0	6	uint32_t
water	21:60	0:0	6	)
water	21:62	0:0	4	;
call	22:8	22:60	4	memcpy
arg	22:15	22:25	5	s->len[1]
water	22:15	0:0	6	s
op	22:16	0:0	6	->
water	22:18	0:0	6	len
op	22:21	0:0	6	[
water	22:22	0:0	6	1
op	22:23	0:0	6	]
arg	22:27	22:37	5	s->len[0]
water	22:27	0:0	6	s
op	22:28	0:0	6	->
water	22:30	0:0	6	len
op	22:34	0:0	6	[
water	22:35	0:0	6	0
op	22:36	0:0	6	]
arg	22:39	22:60	5	256*sizeof(uint8_t)
water	22:39	0:0	6	256
op	22:43	0:0	6	*
op	22:45	0:0	6	sizeof
water	22:51	0:0	6	(
water	22:52	0:0	6	uint8_t
water	22:59	0:0	6	)
water	22:61	0:0	4	;
water	23:4	0:0	4	}
call	24:4	24:57	2	memcpy
arg	24:11	24:21	3	s->bits[2]
water	24:11	0:0	4	s
op	24:12	0:0	4	->
water	24:14	0:0	4	bits
op	24:18	0:0	4	[
water	24:19	0:0	4	2
op	24:20	0:0	4	]
arg	24:23	24:33	3	s->bits[1]
water	24:23	0:0	4	s
op	24:24	0:0	4	->
water	24:26	0:0	4	bits
op	24:30	0:0	4	[
water	24:31	0:0	4	1
op	24:32	0:0	4	]
arg	24:35	24:57	3	256*sizeof(uint32_t)
water	24:35	0:0	4	256
op	24:39	0:0	4	*
op	24:41	0:0	4	sizeof
water	24:47	0:0	4	(
water	24:48	0:0	4	uint32_t
water	24:56	0:0	4	)
water	24:58	0:0	2	;
call	25:4	25:56	2	memcpy
arg	25:11	25:21	3	s->len[2]
water	25:11	0:0	4	s
op	25:12	0:0	4	->
water	25:14	0:0	4	len
op	25:17	0:0	4	[
water	25:18	0:0	4	2
op	25:19	0:0	4	]
arg	25:23	25:33	3	s->len[1]
water	25:23	0:0	4	s
op	25:24	0:0	4	->
water	25:26	0:0	4	len
op	25:30	0:0	4	[
water	25:31	0:0	4	1
op	25:32	0:0	4	]
arg	25:35	25:56	3	256*sizeof(uint8_t)
water	25:35	0:0	4	256
op	25:39	0:0	4	*
op	25:41	0:0	4	sizeof
water	25:47	0:0	4	(
water	25:48	0:0	4	uint8_t
water	25:55	0:0	4	)
water	25:57	0:0	2	;
for	27:4	31:4	2	(i = 0 ;i < 3;i ++)
forinit	27:9	27:14	3	i = 0 ;
water	27:9	0:0	4	i
op	27:11	0:0	4	=
water	27:13	0:0	4	0
water	27:14	0:0	4	;
cond	27:16	27:20	3	i < 3
water	27:16	0:0	4	i
op	27:18	0:0	4	<
water	27:20	0:0	4	3
forexpr	27:23	27:24	3	i ++
water	27:23	0:0	4	i
op	27:24	0:0	4	++
stmts	27:28	31:4	3	
water	27:28	0:0	4	{
call	28:8	28:30	4	ff_free_vlc
arg	28:20	28:30	5	&s->vlc[i]
op	28:20	0:0	6	&
water	28:21	0:0	6	s
op	28:22	0:0	6	->
water	28:24	0:0	6	vlc
op	28:27	0:0	6	[
water	28:28	0:0	6	i
op	28:29	0:0	6	]
water	28:31	0:0	4	;
call	29:8	30:36	4	init_vlc
arg	29:17	29:27	5	&s->vlc[i]
op	29:17	0:0	6	&
water	29:18	0:0	6	s
op	29:19	0:0	6	->
water	29:21	0:0	6	vlc
op	29:24	0:0	6	[
water	29:25	0:0	6	i
op	29:26	0:0	6	]
arg	29:29	29:37	5	VLC_BITS
water	29:29	0:0	6	VLC_BITS
arg	29:39	29:42	5	256
water	29:39	0:0	6	256
arg	29:44	29:53	5	s->len[i]
water	29:44	0:0	6	s
op	29:45	0:0	6	->
water	29:47	0:0	6	len
op	29:50	0:0	6	[
water	29:51	0:0	6	i
op	29:52	0:0	6	]
arg	29:55	29:56	5	1
water	29:55	0:0	6	1
arg	29:58	29:59	5	1
water	29:58	0:0	6	1
arg	30:17	30:27	5	s->bits[i]
water	30:17	0:0	6	s
op	30:18	0:0	6	->
water	30:20	0:0	6	bits
op	30:24	0:0	6	[
water	30:25	0:0	6	i
op	30:26	0:0	6	]
arg	30:29	30:30	5	4
water	30:29	0:0	6	4
arg	30:32	30:33	5	4
water	30:32	0:0	6	4
arg	30:35	30:36	5	0
water	30:35	0:0	6	0
water	30:37	0:0	4	;
water	31:4	0:0	4	}
call	33:4	33:27	2	generate_joint_tables
arg	33:26	33:27	3	s
water	33:26	0:0	4	s
water	33:28	0:0	2	;
return	35:4	35:12	2	0
water	35:11	0:0	3	0
