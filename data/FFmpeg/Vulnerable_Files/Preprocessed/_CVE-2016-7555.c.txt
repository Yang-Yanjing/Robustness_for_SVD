func	1:0	574:0	0	static int	avi_read_header
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
stmnts	0:0	573:12	1	
decl	3:4	3:34	2	AVIContext	*avi
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:35	2	unsigned int	tag
water	5:20	0:0	2	,
decl	5:4	5:35	2	unsigned int	tag1
water	5:26	0:0	2	,
decl	5:4	5:35	2	unsigned int	handler
decl	6:4	6:46	2	int	codec_type
water	6:18	0:0	2	,
decl	6:4	6:46	2	int	stream_index
water	6:32	0:0	2	,
decl	6:4	6:46	2	int	frame_period
decl	7:4	7:21	2	unsigned int	size
decl	8:4	8:9	2	int	i
decl	9:4	9:16	2	AVStream	*st
decl	10:4	10:30	2	AVIStream	*ast
op	10:24	0:0	2	=
water	10:26	0:0	2	NULL
decl	11:4	11:44	2	int	avih_width
op	11:24	0:0	2	=
water	11:26	0:0	2	0
water	11:27	0:0	2	,
decl	11:4	11:44	2	int	avih_height
op	11:41	0:0	2	=
water	11:43	0:0	2	0
decl	12:4	12:27	2	int	amv_file_format
op	12:24	0:0	2	=
water	12:26	0:0	2	0
decl	13:4	13:27	2	uint64_t	list_end
op	13:24	0:0	2	=
water	13:26	0:0	2	0
decl	14:4	14:11	2	int	ret
decl	15:4	15:33	2	AVDictionaryEntry	*dict_entry
water	17:4	0:0	2	avi
op	17:7	0:0	2	->
water	17:9	0:0	2	stream_index
op	17:22	0:0	2	=
op	17:24	0:0	2	-
water	17:25	0:0	2	1
water	17:26	0:0	2	;
water	19:4	0:0	2	ret
op	19:8	0:0	2	=
call	19:10	19:24	2	get_riff
arg	19:19	19:20	3	s
water	19:19	0:0	4	s
arg	19:22	19:24	3	pb
water	19:22	0:0	4	pb
water	19:25	0:0	2	;
if	20:4	21:18	2	(ret < 0)
cond	20:8	20:14	3	ret < 0
water	20:8	0:0	4	ret
op	20:12	0:0	4	<
water	20:14	0:0	4	0
stmts	21:8	21:18	3	
return	21:8	21:18	4	ret
water	21:15	0:0	5	ret
call	23:4	23:60	2	av_log
arg	23:11	23:14	3	avi
water	23:11	0:0	4	avi
arg	23:16	23:28	3	AV_LOG_DEBUG
water	23:16	0:0	4	AV_LOG_DEBUG
arg	23:30	23:45	3	"use odml:%d\n"
water	23:30	0:0	4	"use odml:%d\n"
arg	23:47	23:60	3	avi->use_odml
water	23:47	0:0	4	avi
op	23:50	0:0	4	->
water	23:52	0:0	4	use_odml
water	23:61	0:0	2	;
water	25:4	0:0	2	avi
op	25:7	0:0	2	->
water	25:9	0:0	2	io_fsize
op	25:18	0:0	2	=
water	25:20	0:0	2	avi
op	25:23	0:0	2	->
water	25:25	0:0	2	fsize
op	25:31	0:0	2	=
call	25:33	25:45	2	avio_size
arg	25:43	25:45	3	pb
water	25:43	0:0	4	pb
water	25:46	0:0	2	;
if	26:4	27:67	2	(avi -> fsize <= 0 || avi -> fsize < avi -> riff_end)
cond	26:8	26:45	3	avi -> fsize <= 0 || avi -> fsize < avi -> riff_end
water	26:8	0:0	4	avi
op	26:11	0:0	4	->
water	26:13	0:0	4	fsize
op	26:19	0:0	4	<=
water	26:22	0:0	4	0
op	26:24	0:0	4	||
water	26:27	0:0	4	avi
op	26:30	0:0	4	->
water	26:32	0:0	4	fsize
op	26:38	0:0	4	<
water	26:40	0:0	4	avi
op	26:43	0:0	4	->
water	26:45	0:0	4	riff_end
stmts	27:8	27:67	3	
water	27:8	0:0	4	avi
op	27:11	0:0	4	->
water	27:13	0:0	4	fsize
op	27:19	0:0	4	=
water	27:21	0:0	4	avi
op	27:24	0:0	4	->
water	27:26	0:0	4	riff_end
op	27:35	0:0	4	==
water	27:38	0:0	4	8
water	27:40	0:0	4	?
water	27:42	0:0	4	INT64_MAX
water	27:52	0:0	4	:
water	27:54	0:0	4	avi
op	27:57	0:0	4	->
water	27:59	0:0	4	riff_end
water	27:67	0:0	4	;
water	30:4	0:0	2	stream_index
op	30:17	0:0	2	=
op	30:19	0:0	2	-
water	30:20	0:0	2	1
water	30:21	0:0	2	;
water	31:4	0:0	2	codec_type
op	31:17	0:0	2	=
op	31:19	0:0	2	-
water	31:20	0:0	2	1
water	31:21	0:0	2	;
water	32:4	0:0	2	frame_period
op	32:17	0:0	2	=
water	32:19	0:0	2	0
water	32:20	0:0	2	;
for	33:4	521:4	2	(;;)
forinit	33:9	33:9	3	;
water	33:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	33:13	521:4	3	
water	33:13	0:0	4	{
if	34:8	35:21	4	(avio_feof (pb ))
cond	34:12	34:24	5	avio_feof (pb )
call	34:12	34:24	6	avio_feof
arg	34:22	34:24	7	pb
water	34:22	0:0	8	pb
stmts	35:12	35:21	5	
goto	35:12	35:21	6	fail
water	35:17	0:0	7	fail
water	36:8	0:0	4	tag
op	36:13	0:0	4	=
call	36:15	36:27	4	avio_rl32
arg	36:25	36:27	5	pb
water	36:25	0:0	6	pb
water	36:28	0:0	4	;
water	37:8	0:0	4	size
op	37:13	0:0	4	=
call	37:15	37:27	4	avio_rl32
arg	37:25	37:27	5	pb
water	37:25	0:0	6	pb
water	37:28	0:0	4	;
call	39:8	39:34	4	print_tag
arg	39:18	39:23	5	"tag"
water	39:18	0:0	6	"tag"
arg	39:25	39:28	5	tag
water	39:25	0:0	6	tag
arg	39:30	39:34	5	size
water	39:30	0:0	6	size
water	39:35	0:0	4	;
switch	41:8	520:8	4	(tag)
cond	41:16	41:16	5	tag
water	41:16	0:0	6	tag
stmts	41:21	520:8	5	
water	41:21	0:0	6	{
water	42:8	0:0	6	case
call	42:13	42:37	6	MKTAG
arg	42:19	42:22	7	'L'
water	42:19	0:0	8	'L'
arg	42:24	42:27	7	'I'
water	42:24	0:0	8	'I'
arg	42:29	42:32	7	'S'
water	42:29	0:0	8	'S'
arg	42:34	42:37	7	'T'
water	42:34	0:0	8	'T'
water	42:38	0:0	6	:
water	43:12	0:0	6	list_end
op	43:21	0:0	6	=
call	43:23	43:35	6	avio_tell
arg	43:33	43:35	7	pb
water	43:33	0:0	8	pb
op	43:37	0:0	6	+
water	43:39	0:0	6	size
water	43:43	0:0	6	;
water	45:12	0:0	6	tag1
op	45:17	0:0	6	=
call	45:19	45:31	6	avio_rl32
arg	45:29	45:31	7	pb
water	45:29	0:0	8	pb
water	45:32	0:0	6	;
call	47:12	47:37	6	print_tag
arg	47:22	47:28	7	"list"
water	47:22	0:0	8	"list"
arg	47:30	47:34	7	tag1
water	47:30	0:0	8	tag1
arg	47:36	47:37	7	0
water	47:36	0:0	8	0
water	47:38	0:0	6	;
if	49:12	57:12	6	(tag1 ==MKTAG ('m' ,'o' ,'v' ,'i' ))
cond	49:16	49:48	7	tag1 ==MKTAG ('m' ,'o' ,'v' ,'i' )
water	49:16	0:0	8	tag1
op	49:21	0:0	8	==
call	49:24	49:48	8	MKTAG
arg	49:30	49:33	9	'm'
water	49:30	0:0	10	'm'
arg	49:35	49:38	9	'o'
water	49:35	0:0	10	'o'
arg	49:40	49:43	9	'v'
water	49:40	0:0	10	'v'
arg	49:45	49:48	9	'i'
water	49:45	0:0	10	'i'
stmts	49:51	57:12	7	
water	49:51	0:0	8	{
water	50:16	0:0	8	avi
op	50:19	0:0	8	->
water	50:21	0:0	8	movi_list
op	50:31	0:0	8	=
call	50:33	50:45	8	avio_tell
arg	50:43	50:45	9	pb
water	50:43	0:0	10	pb
op	50:47	0:0	8	-
water	50:49	0:0	8	4
water	50:50	0:0	8	;
if	51:16	52:70	8	(size)
cond	51:20	51:20	9	size
water	51:20	0:0	10	size
stmts	52:20	52:70	9	
water	52:20	0:0	10	avi
op	52:23	0:0	10	->
water	52:25	0:0	10	movi_end
op	52:34	0:0	10	=
water	52:36	0:0	10	avi
op	52:39	0:0	10	->
water	52:41	0:0	10	movi_list
op	52:51	0:0	10	+
water	52:53	0:0	10	size
op	52:58	0:0	10	+
water	52:60	0:0	10	(
water	52:61	0:0	10	size
op	52:66	0:0	10	&
water	52:68	0:0	10	1
water	52:69	0:0	10	)
water	52:70	0:0	10	;
else	53:16	54:46	8
stmts	54:20	54:46	9	
water	54:20	0:0	10	avi
op	54:23	0:0	10	->
water	54:25	0:0	10	movi_end
op	54:34	0:0	10	=
water	54:36	0:0	10	avi
op	54:39	0:0	10	->
water	54:41	0:0	10	fsize
water	54:46	0:0	10	;
call	55:16	55:80	8	av_log
arg	55:23	55:27	9	NULL
water	55:23	0:0	10	NULL
arg	55:29	55:41	9	AV_LOG_TRACE
water	55:29	0:0	10	AV_LOG_TRACE
arg	55:43	55:65	9	"movi end=%"PRIx64"\n"
water	55:43	0:0	10	"movi end=%"
water	55:55	0:0	10	PRIx64
water	55:61	0:0	10	"\n"
arg	55:67	55:80	9	avi->movi_end
water	55:67	0:0	10	avi
op	55:70	0:0	10	->
water	55:72	0:0	10	movi_end
water	55:81	0:0	8	;
goto	56:16	56:34	8	end_of_header
water	56:21	0:0	9	end_of_header
water	57:12	0:0	8	}
else	57:14	58:46	6
stmts	57:19	58:46	7	
if	57:19	58:46	8	(tag1 ==MKTAG ('I' ,'N' ,'F' ,'O' ))
cond	57:23	57:55	9	tag1 ==MKTAG ('I' ,'N' ,'F' ,'O' )
water	57:23	0:0	10	tag1
op	57:28	0:0	10	==
call	57:31	57:55	10	MKTAG
arg	57:37	57:40	11	'I'
water	57:37	0:0	12	'I'
arg	57:42	57:45	11	'N'
water	57:42	0:0	12	'N'
arg	57:47	57:50	11	'F'
water	57:47	0:0	12	'F'
arg	57:52	57:55	11	'O'
water	57:52	0:0	12	'O'
stmts	58:16	58:46	9	
call	58:16	58:45	10	ff_read_riff_info
arg	58:34	58:35	11	s
water	58:34	0:0	12	s
arg	58:37	58:45	11	size-4
water	58:37	0:0	12	size
op	58:42	0:0	12	-
water	58:44	0:0	12	4
water	58:46	0:0	10	;
else	59:12	60:43	6
stmts	59:17	60:43	7	
if	59:17	60:43	8	(tag1 ==MKTAG ('n' ,'c' ,'d' ,'t' ))
cond	59:21	59:53	9	tag1 ==MKTAG ('n' ,'c' ,'d' ,'t' )
water	59:21	0:0	10	tag1
op	59:26	0:0	10	==
call	59:29	59:53	10	MKTAG
arg	59:35	59:38	11	'n'
water	59:35	0:0	12	'n'
arg	59:40	59:43	11	'c'
water	59:40	0:0	12	'c'
arg	59:45	59:48	11	'd'
water	59:45	0:0	12	'd'
arg	59:50	59:53	11	't'
water	59:50	0:0	12	't'
stmts	60:16	60:43	9	
call	60:16	60:42	10	avi_read_nikon
arg	60:31	60:32	11	s
water	60:31	0:0	12	s
arg	60:34	60:42	11	list_end
water	60:34	0:0	12	list_end
water	60:43	0:0	10	;
break	62:12	62:17	6	
water	63:8	0:0	6	case
call	63:13	63:37	6	MKTAG
arg	63:19	63:22	7	'I'
water	63:19	0:0	8	'I'
arg	63:24	63:27	7	'D'
water	63:24	0:0	8	'D'
arg	63:29	63:32	7	'I'
water	63:29	0:0	8	'I'
arg	63:34	63:37	7	'T'
water	63:34	0:0	8	'T'
water	63:38	0:0	6	:
water	64:8	0:0	6	{
water	65:12	0:0	6	unsigned
water	65:21	0:0	6	char
water	65:26	0:0	6	date
op	65:30	0:0	6	[
water	65:31	0:0	6	64
op	65:33	0:0	6	]
op	65:35	0:0	6	=
water	65:37	0:0	6	{
water	65:39	0:0	6	0
water	65:41	0:0	6	}
water	65:42	0:0	6	;
water	66:12	0:0	6	size
op	66:17	0:0	6	+=
water	66:20	0:0	6	(
water	66:21	0:0	6	size
op	66:26	0:0	6	&
water	66:28	0:0	6	1
water	66:29	0:0	6	)
water	66:30	0:0	6	;
water	67:12	0:0	6	size
op	67:17	0:0	6	-=
call	67:20	67:69	6	avio_read
arg	67:30	67:32	7	pb
water	67:30	0:0	8	pb
arg	67:34	67:38	7	date
water	67:34	0:0	8	date
arg	67:40	67:69	7	FFMIN(size,sizeof(date)-1)
call	67:40	67:68	8	FFMIN
arg	67:46	67:50	9	size
water	67:46	0:0	10	size
arg	67:52	67:68	9	sizeof(date)-1
op	67:52	0:0	10	sizeof
water	67:58	0:0	10	(
water	67:59	0:0	10	date
water	67:63	0:0	10	)
op	67:65	0:0	10	-
water	67:67	0:0	10	1
water	67:70	0:0	6	;
call	68:12	68:30	6	avio_skip
arg	68:22	68:24	7	pb
water	68:22	0:0	8	pb
arg	68:26	68:30	7	size
water	68:26	0:0	8	size
water	68:31	0:0	6	;
call	69:12	69:57	6	avi_metadata_creation_time
arg	69:39	69:51	7	&s->metadata
op	69:39	0:0	8	&
water	69:40	0:0	8	s
op	69:41	0:0	8	->
water	69:43	0:0	8	metadata
arg	69:53	69:57	7	date
water	69:53	0:0	8	date
water	69:58	0:0	6	;
water	70:12	0:0	6	break
water	70:17	0:0	6	;
water	71:8	0:0	6	}
water	72:8	0:0	6	case
call	72:13	72:37	6	MKTAG
arg	72:19	72:22	7	'd'
water	72:19	0:0	8	'd'
arg	72:24	72:27	7	'm'
water	72:24	0:0	8	'm'
arg	72:29	72:32	7	'l'
water	72:29	0:0	8	'l'
arg	72:34	72:37	7	'h'
water	72:34	0:0	8	'h'
water	72:38	0:0	6	:
water	73:12	0:0	6	avi
op	73:15	0:0	6	->
water	73:17	0:0	6	is_odml
op	73:25	0:0	6	=
water	73:27	0:0	6	1
water	73:28	0:0	6	;
call	74:12	74:43	6	avio_skip
arg	74:22	74:24	7	pb
water	74:22	0:0	8	pb
arg	74:26	74:43	7	size+(size&1)
water	74:26	0:0	8	size
op	74:31	0:0	8	+
water	74:33	0:0	8	(
water	74:34	0:0	8	size
op	74:39	0:0	8	&
water	74:41	0:0	8	1
water	74:42	0:0	8	)
water	74:44	0:0	6	;
break	75:12	75:17	6	
water	76:8	0:0	6	case
call	76:13	76:37	6	MKTAG
arg	76:19	76:22	7	'a'
water	76:19	0:0	8	'a'
arg	76:24	76:27	7	'm'
water	76:24	0:0	8	'm'
arg	76:29	76:32	7	'v'
water	76:29	0:0	8	'v'
arg	76:34	76:37	7	'h'
water	76:34	0:0	8	'h'
water	76:38	0:0	6	:
water	77:12	0:0	6	amv_file_format
op	77:28	0:0	6	=
water	77:30	0:0	6	1
water	77:31	0:0	6	;
water	78:8	0:0	6	case
call	78:13	78:37	6	MKTAG
arg	78:19	78:22	7	'a'
water	78:19	0:0	8	'a'
arg	78:24	78:27	7	'v'
water	78:24	0:0	8	'v'
arg	78:29	78:32	7	'i'
water	78:29	0:0	8	'i'
arg	78:34	78:37	7	'h'
water	78:34	0:0	8	'h'
water	78:38	0:0	6	:
water	81:12	0:0	6	frame_period
op	81:25	0:0	6	=
call	81:27	81:39	6	avio_rl32
arg	81:37	81:39	7	pb
water	81:37	0:0	8	pb
water	81:40	0:0	6	;
call	82:12	82:24	6	avio_rl32
arg	82:22	82:24	7	pb
water	82:22	0:0	8	pb
water	82:25	0:0	6	;
call	83:12	83:24	6	avio_rl32
arg	83:22	83:24	7	pb
water	83:22	0:0	8	pb
water	83:25	0:0	6	;
water	84:12	0:0	6	avi
op	84:15	0:0	6	->
water	84:17	0:0	6	non_interleaved
op	84:33	0:0	6	|=
call	84:36	84:48	6	avio_rl32
arg	84:46	84:48	7	pb
water	84:46	0:0	8	pb
op	84:50	0:0	6	&
water	84:52	0:0	6	AVIF_MUSTUSEINDEX
water	84:69	0:0	6	;
call	86:12	86:31	6	avio_skip
arg	86:22	86:24	7	pb
water	86:22	0:0	8	pb
arg	86:26	86:31	7	2*4
water	86:26	0:0	8	2
op	86:28	0:0	8	*
water	86:30	0:0	8	4
water	86:32	0:0	6	;
call	87:12	87:24	6	avio_rl32
arg	87:22	87:24	7	pb
water	87:22	0:0	8	pb
water	87:25	0:0	6	;
call	88:12	88:24	6	avio_rl32
arg	88:22	88:24	7	pb
water	88:22	0:0	8	pb
water	88:25	0:0	6	;
water	89:12	0:0	6	avih_width
op	89:24	0:0	6	=
call	89:26	89:38	6	avio_rl32
arg	89:36	89:38	7	pb
water	89:36	0:0	8	pb
water	89:39	0:0	6	;
water	90:12	0:0	6	avih_height
op	90:24	0:0	6	=
call	90:26	90:38	6	avio_rl32
arg	90:36	90:38	7	pb
water	90:36	0:0	8	pb
water	90:39	0:0	6	;
call	92:12	92:39	6	avio_skip
arg	92:22	92:24	7	pb
water	92:22	0:0	8	pb
arg	92:26	92:39	7	size-10*4
water	92:26	0:0	8	size
op	92:31	0:0	8	-
water	92:33	0:0	8	10
op	92:36	0:0	8	*
water	92:38	0:0	8	4
water	92:40	0:0	6	;
break	93:12	93:17	6	
water	94:8	0:0	6	case
call	94:13	94:37	6	MKTAG
arg	94:19	94:22	7	's'
water	94:19	0:0	8	's'
arg	94:24	94:27	7	't'
water	94:24	0:0	8	't'
arg	94:29	94:32	7	'r'
water	94:29	0:0	8	'r'
arg	94:34	94:37	7	'h'
water	94:34	0:0	8	'h'
water	94:38	0:0	6	:
water	97:12	0:0	6	tag1
op	97:20	0:0	6	=
call	97:22	97:34	6	avio_rl32
arg	97:32	97:34	7	pb
water	97:32	0:0	8	pb
water	97:35	0:0	6	;
water	98:12	0:0	6	handler
op	98:20	0:0	6	=
call	98:22	98:34	6	avio_rl32
arg	98:32	98:34	7	pb
water	98:32	0:0	8	pb
water	98:35	0:0	6	;
if	100:12	103:12	6	(tag1 ==MKTAG ('p' ,'a' ,'d' ,'s' ))
cond	100:16	100:48	7	tag1 ==MKTAG ('p' ,'a' ,'d' ,'s' )
water	100:16	0:0	8	tag1
op	100:21	0:0	8	==
call	100:24	100:48	8	MKTAG
arg	100:30	100:33	9	'p'
water	100:30	0:0	10	'p'
arg	100:35	100:38	9	'a'
water	100:35	0:0	10	'a'
arg	100:40	100:43	9	'd'
water	100:40	0:0	10	'd'
arg	100:45	100:48	9	's'
water	100:45	0:0	10	's'
stmts	100:51	103:12	7	
water	100:51	0:0	8	{
call	101:16	101:38	8	avio_skip
arg	101:26	101:28	9	pb
water	101:26	0:0	10	pb
arg	101:30	101:38	9	size-8
water	101:30	0:0	10	size
op	101:35	0:0	10	-
water	101:37	0:0	10	8
water	101:39	0:0	8	;
break	102:16	102:21	8	
water	103:12	0:0	8	}
else	103:14	114:12	6
stmts	103:19	114:12	7	
water	103:19	0:0	8	{
water	104:16	0:0	8	stream_index
op	104:28	0:0	8	++
water	104:30	0:0	8	;
water	105:16	0:0	8	st
op	105:19	0:0	8	=
call	105:21	105:48	8	avformat_new_stream
arg	105:41	105:42	9	s
water	105:41	0:0	10	s
arg	105:44	105:48	9	NULL
water	105:44	0:0	10	NULL
water	105:49	0:0	8	;
if	106:16	107:29	8	(! st)
cond	106:20	106:21	9	! st
op	106:20	0:0	10	!
water	106:21	0:0	10	st
stmts	107:20	107:29	9	
goto	107:20	107:29	10	fail
water	107:25	0:0	11	fail
water	109:16	0:0	8	st
op	109:18	0:0	8	->
water	109:20	0:0	8	id
op	109:23	0:0	8	=
water	109:25	0:0	8	stream_index
water	109:37	0:0	8	;
water	110:16	0:0	8	ast
op	110:23	0:0	8	=
call	110:25	110:53	8	av_mallocz
arg	110:36	110:53	9	sizeof(AVIStream)
op	110:36	0:0	10	sizeof
water	110:42	0:0	10	(
water	110:43	0:0	10	AVIStream
water	110:52	0:0	10	)
water	110:54	0:0	8	;
if	111:16	112:29	8	(! ast)
cond	111:20	111:21	9	! ast
op	111:20	0:0	10	!
water	111:21	0:0	10	ast
stmts	112:20	112:29	9	
goto	112:20	112:29	10	fail
water	112:25	0:0	11	fail
water	113:16	0:0	8	st
op	113:18	0:0	8	->
water	113:20	0:0	8	priv_data
op	113:30	0:0	8	=
water	113:32	0:0	8	ast
water	113:35	0:0	8	;
water	114:12	0:0	8	}
if	115:12	117:63	6	(amv_file_format)
cond	115:16	115:16	7	amv_file_format
water	115:16	0:0	8	amv_file_format
stmts	116:16	117:63	7	
water	116:16	0:0	8	tag1
op	116:21	0:0	8	=
water	116:23	0:0	8	stream_index
water	116:36	0:0	8	?
call	116:38	116:62	8	MKTAG
arg	116:44	116:47	9	'a'
water	116:44	0:0	10	'a'
arg	116:49	116:52	9	'u'
water	116:49	0:0	10	'u'
arg	116:54	116:57	9	'd'
water	116:54	0:0	10	'd'
arg	116:59	116:62	9	's'
water	116:59	0:0	10	's'
water	117:36	0:0	8	:
call	117:38	117:62	8	MKTAG
arg	117:44	117:47	9	'v'
water	117:44	0:0	10	'v'
arg	117:49	117:52	9	'i'
water	117:49	0:0	10	'i'
arg	117:54	117:57	9	'd'
water	117:54	0:0	10	'd'
arg	117:59	117:62	9	's'
water	117:59	0:0	10	's'
water	117:63	0:0	8	;
call	119:12	119:38	6	print_tag
arg	119:22	119:28	7	"strh"
water	119:22	0:0	8	"strh"
arg	119:30	119:34	7	tag1
water	119:30	0:0	8	tag1
arg	119:36	119:38	7	-1
op	119:36	0:0	8	-
water	119:37	0:0	8	1
water	119:39	0:0	6	;
if	121:12	166:12	6	(tag1 ==MKTAG ('i' ,'a' ,'v' ,'s' ) || tag1 ==MKTAG ('i' ,'v' ,'a' ,'s' ))
cond	121:16	122:48	7	tag1 ==MKTAG ('i' ,'a' ,'v' ,'s' ) || tag1 ==MKTAG ('i' ,'v' ,'a' ,'s' )
water	121:16	0:0	8	tag1
op	121:21	0:0	8	==
call	121:24	121:48	8	MKTAG
arg	121:30	121:33	9	'i'
water	121:30	0:0	10	'i'
arg	121:35	121:38	9	'a'
water	121:35	0:0	10	'a'
arg	121:40	121:43	9	'v'
water	121:40	0:0	10	'v'
arg	121:45	121:48	9	's'
water	121:45	0:0	10	's'
op	121:50	0:0	8	||
water	122:16	0:0	8	tag1
op	122:21	0:0	8	==
call	122:24	122:48	8	MKTAG
arg	122:30	122:33	9	'i'
water	122:30	0:0	10	'i'
arg	122:35	122:38	9	'v'
water	122:35	0:0	10	'v'
arg	122:40	122:43	9	'a'
water	122:40	0:0	10	'a'
arg	122:45	122:48	9	's'
water	122:45	0:0	10	's'
stmts	122:51	166:12	7	
water	122:51	0:0	8	{
decl	123:16	123:30	8	int64_t	dv_dur
if	127:16	128:29	8	(s -> nb_streams != 1)
cond	127:20	127:37	9	s -> nb_streams != 1
water	127:20	0:0	10	s
op	127:21	0:0	10	->
water	127:23	0:0	10	nb_streams
op	127:34	0:0	10	!=
water	127:37	0:0	10	1
stmts	128:20	128:29	9	
goto	128:20	128:29	10	fail
water	128:25	0:0	11	fail
if	130:16	133:29	8	(handler !=MKTAG ('d' ,'v' ,'s' ,'d' ) && handler !=MKTAG ('d' ,'v' ,'h' ,'d' ) && handler !=MKTAG ('d' ,'v' ,'s' ,'l' ))
cond	130:20	132:55	9	handler !=MKTAG ('d' ,'v' ,'s' ,'d' ) && handler !=MKTAG ('d' ,'v' ,'h' ,'d' ) && handler !=MKTAG ('d' ,'v' ,'s' ,'l' )
water	130:20	0:0	10	handler
op	130:28	0:0	10	!=
call	130:31	130:55	10	MKTAG
arg	130:37	130:40	11	'd'
water	130:37	0:0	12	'd'
arg	130:42	130:45	11	'v'
water	130:42	0:0	12	'v'
arg	130:47	130:50	11	's'
water	130:47	0:0	12	's'
arg	130:52	130:55	11	'd'
water	130:52	0:0	12	'd'
op	130:57	0:0	10	&&
water	131:20	0:0	10	handler
op	131:28	0:0	10	!=
call	131:31	131:55	10	MKTAG
arg	131:37	131:40	11	'd'
water	131:37	0:0	12	'd'
arg	131:42	131:45	11	'v'
water	131:42	0:0	12	'v'
arg	131:47	131:50	11	'h'
water	131:47	0:0	12	'h'
arg	131:52	131:55	11	'd'
water	131:52	0:0	12	'd'
op	131:57	0:0	10	&&
water	132:20	0:0	10	handler
op	132:28	0:0	10	!=
call	132:31	132:55	10	MKTAG
arg	132:37	132:40	11	'd'
water	132:37	0:0	12	'd'
arg	132:42	132:45	11	'v'
water	132:42	0:0	12	'v'
arg	132:47	132:50	11	's'
water	132:47	0:0	12	's'
arg	132:52	132:55	11	'l'
water	132:52	0:0	12	'l'
stmts	133:20	133:29	9	
goto	133:20	133:29	10	fail
water	133:25	0:0	11	fail
water	135:16	0:0	8	ast
op	135:20	0:0	8	=
water	135:22	0:0	8	s
op	135:23	0:0	8	->
water	135:25	0:0	8	streams
op	135:32	0:0	8	[
water	135:33	0:0	8	0
op	135:34	0:0	8	]
op	135:35	0:0	8	->
water	135:37	0:0	8	priv_data
water	135:46	0:0	8	;
call	136:16	136:57	8	av_freep
arg	136:25	136:57	9	&s->streams[0]->codec->extradata
op	136:25	0:0	10	&
water	136:26	0:0	10	s
op	136:27	0:0	10	->
water	136:29	0:0	10	streams
op	136:36	0:0	10	[
water	136:37	0:0	10	0
op	136:38	0:0	10	]
op	136:39	0:0	10	->
water	136:41	0:0	10	codec
op	136:46	0:0	10	->
water	136:48	0:0	10	extradata
water	136:58	0:0	8	;
call	137:16	137:46	8	av_freep
arg	137:25	137:46	9	&s->streams[0]->codec
op	137:25	0:0	10	&
water	137:26	0:0	10	s
op	137:27	0:0	10	->
water	137:29	0:0	10	streams
op	137:36	0:0	10	[
water	137:37	0:0	10	0
op	137:38	0:0	10	]
op	137:39	0:0	10	->
water	137:41	0:0	10	codec
water	137:47	0:0	8	;
if	138:16	139:66	8	(s -> streams [ 0 ] -> info)
cond	138:20	138:35	9	s -> streams [ 0 ] -> info
water	138:20	0:0	10	s
op	138:21	0:0	10	->
water	138:23	0:0	10	streams
op	138:30	0:0	10	[
water	138:31	0:0	10	0
op	138:32	0:0	10	]
op	138:33	0:0	10	->
water	138:35	0:0	10	info
stmts	139:20	139:66	9	
call	139:20	139:65	10	av_freep
arg	139:29	139:65	11	&s->streams[0]->info->duration_error
op	139:29	0:0	12	&
water	139:30	0:0	12	s
op	139:31	0:0	12	->
water	139:33	0:0	12	streams
op	139:40	0:0	12	[
water	139:41	0:0	12	0
op	139:42	0:0	12	]
op	139:43	0:0	12	->
water	139:45	0:0	12	info
op	139:49	0:0	12	->
water	139:51	0:0	12	duration_error
water	139:66	0:0	10	;
call	140:16	140:45	8	av_freep
arg	140:25	140:45	9	&s->streams[0]->info
op	140:25	0:0	10	&
water	140:26	0:0	10	s
op	140:27	0:0	10	->
water	140:29	0:0	10	streams
op	140:36	0:0	10	[
water	140:37	0:0	10	0
op	140:38	0:0	10	]
op	140:39	0:0	10	->
water	140:41	0:0	10	info
water	140:46	0:0	8	;
call	141:16	141:39	8	av_freep
arg	141:25	141:39	9	&s->streams[0]
op	141:25	0:0	10	&
water	141:26	0:0	10	s
op	141:27	0:0	10	->
water	141:29	0:0	10	streams
op	141:36	0:0	10	[
water	141:37	0:0	10	0
op	141:38	0:0	10	]
water	141:40	0:0	8	;
water	142:16	0:0	8	s
op	142:17	0:0	8	->
water	142:19	0:0	8	nb_streams
op	142:30	0:0	8	=
water	142:32	0:0	8	0
water	142:33	0:0	8	;
if	143:16	147:16	8	(CONFIG_DV_DEMUXER)
cond	143:20	143:20	9	CONFIG_DV_DEMUXER
water	143:20	0:0	10	CONFIG_DV_DEMUXER
stmts	143:39	147:16	9	
water	143:39	0:0	10	{
water	144:20	0:0	10	avi
op	144:23	0:0	10	->
water	144:25	0:0	10	dv_demux
op	144:34	0:0	10	=
call	144:36	144:58	10	avpriv_dv_init_demux
arg	144:57	144:58	11	s
water	144:57	0:0	12	s
water	144:59	0:0	10	;
if	145:20	146:33	10	(! avi -> dv_demux)
cond	145:24	145:30	11	! avi -> dv_demux
op	145:24	0:0	12	!
water	145:25	0:0	12	avi
op	145:28	0:0	12	->
water	145:30	0:0	12	dv_demux
stmts	146:24	146:33	11	
goto	146:24	146:33	12	fail
water	146:29	0:0	13	fail
water	147:16	0:0	10	}
else	147:18	148:29	8
stmts	148:20	148:29	9	
goto	148:20	148:29	10	fail
water	148:25	0:0	11	fail
water	149:16	0:0	8	s
op	149:17	0:0	8	->
water	149:19	0:0	8	streams
op	149:26	0:0	8	[
water	149:27	0:0	8	0
op	149:28	0:0	8	]
op	149:29	0:0	8	->
water	149:31	0:0	8	priv_data
op	149:41	0:0	8	=
water	149:43	0:0	8	ast
water	149:46	0:0	8	;
call	150:16	150:35	8	avio_skip
arg	150:26	150:28	9	pb
water	150:26	0:0	10	pb
arg	150:30	150:35	9	3*4
water	150:30	0:0	10	3
op	150:32	0:0	10	*
water	150:34	0:0	10	4
water	150:36	0:0	8	;
water	151:16	0:0	8	ast
op	151:19	0:0	8	->
water	151:21	0:0	8	scale
op	151:27	0:0	8	=
call	151:29	151:41	8	avio_rl32
arg	151:39	151:41	9	pb
water	151:39	0:0	10	pb
water	151:42	0:0	8	;
water	152:16	0:0	8	ast
op	152:19	0:0	8	->
water	152:21	0:0	8	rate
op	152:27	0:0	8	=
call	152:29	152:41	8	avio_rl32
arg	152:39	152:41	9	pb
water	152:39	0:0	10	pb
water	152:42	0:0	8	;
call	153:16	153:31	8	avio_skip
arg	153:26	153:28	9	pb
water	153:26	0:0	10	pb
arg	153:30	153:31	9	4
water	153:30	0:0	10	4
water	153:32	0:0	8	;
water	155:16	0:0	8	dv_dur
op	155:23	0:0	8	=
call	155:25	155:37	8	avio_rl32
arg	155:35	155:37	9	pb
water	155:35	0:0	10	pb
water	155:38	0:0	8	;
if	156:16	159:16	8	(ast -> scale > 0 && ast -> rate > 0 && dv_dur > 0)
cond	156:20	156:64	9	ast -> scale > 0 && ast -> rate > 0 && dv_dur > 0
water	156:20	0:0	10	ast
op	156:23	0:0	10	->
water	156:25	0:0	10	scale
op	156:31	0:0	10	>
water	156:33	0:0	10	0
op	156:35	0:0	10	&&
water	156:38	0:0	10	ast
op	156:41	0:0	10	->
water	156:43	0:0	10	rate
op	156:48	0:0	10	>
water	156:50	0:0	10	0
op	156:52	0:0	10	&&
water	156:55	0:0	10	dv_dur
op	156:62	0:0	10	>
water	156:64	0:0	10	0
stmts	156:67	159:16	9	
water	156:67	0:0	10	{
water	157:20	0:0	10	dv_dur
op	157:31	0:0	10	*=
water	157:34	0:0	10	AV_TIME_BASE
water	157:46	0:0	10	;
water	158:20	0:0	10	s
op	158:21	0:0	10	->
water	158:23	0:0	10	duration
op	158:32	0:0	10	=
call	158:34	158:74	10	av_rescale
arg	158:45	158:51	11	dv_dur
water	158:45	0:0	12	dv_dur
arg	158:53	158:63	11	ast->scale
water	158:53	0:0	12	ast
op	158:56	0:0	12	->
water	158:58	0:0	12	scale
arg	158:65	158:74	11	ast->rate
water	158:65	0:0	12	ast
op	158:68	0:0	12	->
water	158:70	0:0	12	rate
water	158:75	0:0	10	;
water	159:16	0:0	10	}
water	163:16	0:0	8	stream_index
op	163:29	0:0	8	=
water	163:31	0:0	8	s
op	163:32	0:0	8	->
water	163:34	0:0	8	nb_streams
op	163:45	0:0	8	-
water	163:47	0:0	8	1
water	163:48	0:0	8	;
call	164:16	164:42	8	avio_skip
arg	164:26	164:28	9	pb
water	164:26	0:0	10	pb
arg	164:30	164:42	9	size-9*4
water	164:30	0:0	10	size
op	164:35	0:0	10	-
water	164:37	0:0	10	9
op	164:39	0:0	10	*
water	164:41	0:0	10	4
water	164:43	0:0	8	;
break	165:16	165:21	8	
water	166:12	0:0	8	}
call	168:12	168:51	6	av_assert0
arg	168:23	168:51	7	stream_index<s->nb_streams
water	168:23	0:0	8	stream_index
op	168:36	0:0	8	<
water	168:38	0:0	8	s
op	168:39	0:0	8	->
water	168:41	0:0	8	nb_streams
water	168:52	0:0	6	;
water	169:12	0:0	6	ast
op	169:15	0:0	6	->
water	169:17	0:0	6	handler
op	169:25	0:0	6	=
water	169:27	0:0	6	handler
water	169:34	0:0	6	;
call	171:12	171:24	6	avio_rl32
arg	171:22	171:24	7	pb
water	171:22	0:0	8	pb
water	171:25	0:0	6	;
call	172:12	172:24	6	avio_rl16
arg	172:22	172:24	7	pb
water	172:22	0:0	8	pb
water	172:25	0:0	6	;
call	173:12	173:24	6	avio_rl16
arg	173:22	173:24	7	pb
water	173:22	0:0	8	pb
water	173:25	0:0	6	;
call	174:12	174:24	6	avio_rl32
arg	174:22	174:24	7	pb
water	174:22	0:0	8	pb
water	174:25	0:0	6	;
water	175:12	0:0	6	ast
op	175:15	0:0	6	->
water	175:17	0:0	6	scale
op	175:23	0:0	6	=
call	175:25	175:37	6	avio_rl32
arg	175:35	175:37	7	pb
water	175:35	0:0	8	pb
water	175:38	0:0	6	;
water	176:12	0:0	6	ast
op	176:15	0:0	6	->
water	176:17	0:0	6	rate
op	176:23	0:0	6	=
call	176:25	176:37	6	avio_rl32
arg	176:35	176:37	7	pb
water	176:35	0:0	8	pb
water	176:38	0:0	6	;
if	177:12	190:12	6	(! ( ast -> scale && ast -> rate ))
cond	177:16	177:41	7	! ( ast -> scale && ast -> rate )
op	177:16	0:0	8	!
water	177:17	0:0	8	(
water	177:18	0:0	8	ast
op	177:21	0:0	8	->
water	177:23	0:0	8	scale
op	177:29	0:0	8	&&
water	177:32	0:0	8	ast
op	177:35	0:0	8	->
water	177:37	0:0	8	rate
water	177:41	0:0	8	)
stmts	177:44	190:12	7	
water	177:44	0:0	8	{
call	178:16	182:32	8	av_log
arg	178:23	178:24	9	s
water	178:23	0:0	10	s
arg	178:26	178:40	9	AV_LOG_WARNING
water	178:26	0:0	10	AV_LOG_WARNING
arg	179:23	180:77	9	"scale/rate is %"PRIu32"/%"PRIu32" which is invalid. ""(This file has been generated by broken software.)\n"
water	179:23	0:0	10	"scale/rate is %"
water	179:40	0:0	10	PRIu32
water	179:46	0:0	10	"/%"
water	179:50	0:0	10	PRIu32
water	179:56	0:0	10	" which is invalid. "
water	180:23	0:0	10	"(This file has been generated by broken software.)\n"
arg	181:23	181:33	9	ast->scale
water	181:23	0:0	10	ast
op	181:26	0:0	10	->
water	181:28	0:0	10	scale
arg	182:23	182:32	9	ast->rate
water	182:23	0:0	10	ast
op	182:26	0:0	10	->
water	182:28	0:0	10	rate
water	182:33	0:0	8	;
if	183:16	186:16	8	(frame_period)
cond	183:20	183:20	9	frame_period
water	183:20	0:0	10	frame_period
stmts	183:34	186:16	9	
water	183:34	0:0	10	{
water	184:20	0:0	10	ast
op	184:23	0:0	10	->
water	184:25	0:0	10	rate
op	184:31	0:0	10	=
water	184:33	0:0	10	1000000
water	184:40	0:0	10	;
water	185:20	0:0	10	ast
op	185:23	0:0	10	->
water	185:25	0:0	10	scale
op	185:31	0:0	10	=
water	185:33	0:0	10	frame_period
water	185:45	0:0	10	;
water	186:16	0:0	10	}
else	186:18	189:16	8
stmts	186:23	189:16	9	
water	186:23	0:0	10	{
water	187:20	0:0	10	ast
op	187:23	0:0	10	->
water	187:25	0:0	10	rate
op	187:31	0:0	10	=
water	187:33	0:0	10	25
water	187:35	0:0	10	;
water	188:20	0:0	10	ast
op	188:23	0:0	10	->
water	188:25	0:0	10	scale
op	188:31	0:0	10	=
water	188:33	0:0	10	1
water	188:34	0:0	10	;
water	189:16	0:0	10	}
water	190:12	0:0	8	}
call	191:12	191:61	6	avpriv_set_pts_info
arg	191:32	191:34	7	st
water	191:32	0:0	8	st
arg	191:36	191:38	7	64
water	191:36	0:0	8	64
arg	191:40	191:50	7	ast->scale
water	191:40	0:0	8	ast
op	191:43	0:0	8	->
water	191:45	0:0	8	scale
arg	191:52	191:61	7	ast->rate
water	191:52	0:0	8	ast
op	191:55	0:0	8	->
water	191:57	0:0	8	rate
water	191:62	0:0	6	;
water	193:12	0:0	6	ast
op	193:15	0:0	6	->
water	193:17	0:0	6	cum_len
op	193:26	0:0	6	=
call	193:28	193:40	6	avio_rl32
arg	193:38	193:40	7	pb
water	193:38	0:0	8	pb
water	193:41	0:0	6	;
water	194:12	0:0	6	st
op	194:14	0:0	6	->
water	194:16	0:0	6	nb_frames
op	194:26	0:0	6	=
call	194:28	194:40	6	avio_rl32
arg	194:38	194:40	7	pb
water	194:38	0:0	8	pb
water	194:41	0:0	6	;
water	196:12	0:0	6	st
op	196:14	0:0	6	->
water	196:16	0:0	6	start_time
op	196:27	0:0	6	=
water	196:29	0:0	6	0
water	196:30	0:0	6	;
call	197:12	197:24	6	avio_rl32
arg	197:22	197:24	7	pb
water	197:22	0:0	8	pb
water	197:25	0:0	6	;
call	198:12	198:24	6	avio_rl32
arg	198:22	198:24	7	pb
water	198:22	0:0	8	pb
water	198:25	0:0	6	;
if	199:12	202:12	6	(ast -> cum_len * ast -> scale / ast -> rate > 3600)
cond	199:16	199:52	7	ast -> cum_len * ast -> scale / ast -> rate > 3600
water	199:16	0:0	8	ast
op	199:19	0:0	8	->
water	199:21	0:0	8	cum_len
op	199:28	0:0	8	*
water	199:29	0:0	8	ast
op	199:32	0:0	8	->
water	199:34	0:0	8	scale
op	199:39	0:0	8	/
water	199:40	0:0	8	ast
op	199:43	0:0	8	->
water	199:45	0:0	8	rate
op	199:50	0:0	8	>
water	199:52	0:0	8	3600
stmts	199:58	202:12	7	
water	199:58	0:0	8	{
call	200:16	200:83	8	av_log
arg	200:23	200:24	9	s
water	200:23	0:0	10	s
arg	200:26	200:38	9	AV_LOG_ERROR
water	200:26	0:0	10	AV_LOG_ERROR
arg	200:40	200:83	9	"crazy start time, iam scared, giving up\n"
water	200:40	0:0	10	"crazy start time, iam scared, giving up\n"
water	200:84	0:0	8	;
water	201:16	0:0	8	ast
op	201:19	0:0	8	->
water	201:21	0:0	8	cum_len
op	201:29	0:0	8	=
water	201:31	0:0	8	0
water	201:32	0:0	8	;
water	202:12	0:0	8	}
water	203:12	0:0	6	ast
op	203:15	0:0	6	->
water	203:17	0:0	6	sample_size
op	203:29	0:0	6	=
call	203:31	203:43	6	avio_rl32
arg	203:41	203:43	7	pb
water	203:41	0:0	8	pb
water	203:44	0:0	6	;
water	204:12	0:0	6	ast
op	204:15	0:0	6	->
water	204:17	0:0	6	cum_len
op	204:28	0:0	6	*=
call	204:31	204:56	6	FFMAX
arg	204:37	204:38	7	1
water	204:37	0:0	8	1
arg	204:40	204:56	7	ast->sample_size
water	204:40	0:0	8	ast
op	204:43	0:0	8	->
water	204:45	0:0	8	sample_size
water	204:57	0:0	6	;
call	205:12	206:59	6	av_log
arg	205:19	205:20	7	s
water	205:19	0:0	8	s
arg	205:22	205:34	7	AV_LOG_TRACE
water	205:22	0:0	8	AV_LOG_TRACE
arg	205:36	205:62	7	"%"PRIu32" %"PRIu32" %d\n"
water	205:36	0:0	8	"%"
water	205:39	0:0	8	PRIu32
water	205:45	0:0	8	" %"
water	205:49	0:0	8	PRIu32
water	205:55	0:0	8	" %d\n"
arg	206:20	206:29	7	ast->rate
water	206:20	0:0	8	ast
op	206:23	0:0	8	->
water	206:25	0:0	8	rate
arg	206:31	206:41	7	ast->scale
water	206:31	0:0	8	ast
op	206:34	0:0	8	->
water	206:36	0:0	8	scale
arg	206:43	206:59	7	ast->sample_size
water	206:43	0:0	8	ast
op	206:46	0:0	8	->
water	206:48	0:0	8	sample_size
water	206:60	0:0	6	;
switch	208:12	226:12	6	(tag1)
cond	208:20	208:20	7	tag1
water	208:20	0:0	8	tag1
stmts	208:26	226:12	7	
water	208:26	0:0	8	{
water	209:12	0:0	8	case
call	209:17	209:41	8	MKTAG
arg	209:23	209:26	9	'v'
water	209:23	0:0	10	'v'
arg	209:28	209:31	9	'i'
water	209:28	0:0	10	'i'
arg	209:33	209:36	9	'd'
water	209:33	0:0	10	'd'
arg	209:38	209:41	9	's'
water	209:38	0:0	10	's'
water	209:42	0:0	8	:
water	210:16	0:0	8	codec_type
op	210:27	0:0	8	=
water	210:29	0:0	8	AVMEDIA_TYPE_VIDEO
water	210:47	0:0	8	;
water	212:16	0:0	8	ast
op	212:19	0:0	8	->
water	212:21	0:0	8	sample_size
op	212:33	0:0	8	=
water	212:35	0:0	8	0
water	212:36	0:0	8	;
water	213:16	0:0	8	st
op	213:18	0:0	8	->
water	213:20	0:0	8	avg_frame_rate
op	213:35	0:0	8	=
call	213:37	213:59	8	av_inv_q
arg	213:46	213:59	9	st->time_base
water	213:46	0:0	10	st
op	213:48	0:0	10	->
water	213:50	0:0	10	time_base
water	213:60	0:0	8	;
break	214:16	214:21	8	
water	215:12	0:0	8	case
call	215:17	215:41	8	MKTAG
arg	215:23	215:26	9	'a'
water	215:23	0:0	10	'a'
arg	215:28	215:31	9	'u'
water	215:28	0:0	10	'u'
arg	215:33	215:36	9	'd'
water	215:33	0:0	10	'd'
arg	215:38	215:41	9	's'
water	215:38	0:0	10	's'
water	215:42	0:0	8	:
water	216:16	0:0	8	codec_type
op	216:27	0:0	8	=
water	216:29	0:0	8	AVMEDIA_TYPE_AUDIO
water	216:47	0:0	8	;
break	217:16	217:21	8	
water	218:12	0:0	8	case
call	218:17	218:41	8	MKTAG
arg	218:23	218:26	9	't'
water	218:23	0:0	10	't'
arg	218:28	218:31	9	'x'
water	218:28	0:0	10	'x'
arg	218:33	218:36	9	't'
water	218:33	0:0	10	't'
arg	218:38	218:41	9	's'
water	218:38	0:0	10	's'
water	218:42	0:0	8	:
water	219:16	0:0	8	codec_type
op	219:27	0:0	8	=
water	219:29	0:0	8	AVMEDIA_TYPE_SUBTITLE
water	219:50	0:0	8	;
break	220:16	220:21	8	
water	221:12	0:0	8	case
call	221:17	221:41	8	MKTAG
arg	221:23	221:26	9	'd'
water	221:23	0:0	10	'd'
arg	221:28	221:31	9	'a'
water	221:28	0:0	10	'a'
arg	221:33	221:36	9	't'
water	221:33	0:0	10	't'
arg	221:38	221:41	9	's'
water	221:38	0:0	10	's'
water	221:42	0:0	8	:
water	222:16	0:0	8	codec_type
op	222:27	0:0	8	=
water	222:29	0:0	8	AVMEDIA_TYPE_DATA
water	222:46	0:0	8	;
break	223:16	223:21	8	
label	224:12	224:19	8	default :
call	225:16	225:71	8	av_log
arg	225:23	225:24	9	s
water	225:23	0:0	10	s
arg	225:26	225:37	9	AV_LOG_INFO
water	225:26	0:0	10	AV_LOG_INFO
arg	225:39	225:65	9	"unknown stream type %X\n"
water	225:39	0:0	10	"unknown stream type %X\n"
arg	225:67	225:71	9	tag1
water	225:67	0:0	10	tag1
water	225:72	0:0	8	;
water	226:12	0:0	8	}
if	228:12	242:12	6	(ast -> sample_size < 0)
cond	228:16	228:35	7	ast -> sample_size < 0
water	228:16	0:0	8	ast
op	228:19	0:0	8	->
water	228:21	0:0	8	sample_size
op	228:33	0:0	8	<
water	228:35	0:0	8	0
stmts	228:38	242:12	7	
water	228:38	0:0	8	{
if	229:16	235:16	8	(s -> error_recognition & AV_EF_EXPLODE)
cond	229:20	229:43	9	s -> error_recognition & AV_EF_EXPLODE
water	229:20	0:0	10	s
op	229:21	0:0	10	->
water	229:23	0:0	10	error_recognition
op	229:41	0:0	10	&
water	229:43	0:0	10	AV_EF_EXPLODE
stmts	229:58	235:16	9	
water	229:58	0:0	10	{
call	230:20	233:39	10	av_log
arg	230:27	230:28	11	s
water	230:27	0:0	12	s
arg	230:30	230:42	11	AV_LOG_ERROR
water	230:30	0:0	12	AV_LOG_ERROR
arg	231:27	231:66	11	"Invalid sample_size %d at stream %d\n"
water	231:27	0:0	12	"Invalid sample_size %d at stream %d\n"
arg	232:27	232:43	11	ast->sample_size
water	232:27	0:0	12	ast
op	232:30	0:0	12	->
water	232:32	0:0	12	sample_size
arg	233:27	233:39	11	stream_index
water	233:27	0:0	12	stream_index
water	233:40	0:0	10	;
goto	234:20	234:29	10	fail
water	234:25	0:0	11	fail
water	235:16	0:0	10	}
call	236:16	240:35	8	av_log
arg	236:23	236:24	9	s
water	236:23	0:0	10	s
arg	236:26	236:40	9	AV_LOG_WARNING
water	236:26	0:0	10	AV_LOG_WARNING
arg	237:23	238:42	9	"Invalid sample_size %d at stream %d ""setting it to 0\n"
water	237:23	0:0	10	"Invalid sample_size %d at stream %d "
water	238:23	0:0	10	"setting it to 0\n"
arg	239:23	239:39	9	ast->sample_size
water	239:23	0:0	10	ast
op	239:26	0:0	10	->
water	239:28	0:0	10	sample_size
arg	240:23	240:35	9	stream_index
water	240:23	0:0	10	stream_index
water	240:36	0:0	8	;
water	241:16	0:0	8	ast
op	241:19	0:0	8	->
water	241:21	0:0	8	sample_size
op	241:33	0:0	8	=
water	241:35	0:0	8	0
water	241:36	0:0	8	;
water	242:12	0:0	8	}
if	244:12	250:12	6	(ast -> sample_size == 0)
cond	244:16	244:36	7	ast -> sample_size == 0
water	244:16	0:0	8	ast
op	244:19	0:0	8	->
water	244:21	0:0	8	sample_size
op	244:33	0:0	8	==
water	244:36	0:0	8	0
stmts	244:39	250:12	7	
water	244:39	0:0	8	{
water	245:16	0:0	8	st
op	245:18	0:0	8	->
water	245:20	0:0	8	duration
op	245:29	0:0	8	=
water	245:31	0:0	8	st
op	245:33	0:0	8	->
water	245:35	0:0	8	nb_frames
water	245:44	0:0	8	;
if	246:16	249:16	8	(st -> duration > 0 && avi -> io_fsize > 0 && avi -> riff_end > avi -> io_fsize)
cond	246:20	246:82	9	st -> duration > 0 && avi -> io_fsize > 0 && avi -> riff_end > avi -> io_fsize
water	246:20	0:0	10	st
op	246:22	0:0	10	->
water	246:24	0:0	10	duration
op	246:33	0:0	10	>
water	246:35	0:0	10	0
op	246:37	0:0	10	&&
water	246:40	0:0	10	avi
op	246:43	0:0	10	->
water	246:45	0:0	10	io_fsize
op	246:54	0:0	10	>
water	246:56	0:0	10	0
op	246:58	0:0	10	&&
water	246:61	0:0	10	avi
op	246:64	0:0	10	->
water	246:66	0:0	10	riff_end
op	246:75	0:0	10	>
water	246:77	0:0	10	avi
op	246:80	0:0	10	->
water	246:82	0:0	10	io_fsize
stmts	246:92	249:16	9	
water	246:92	0:0	10	{
call	247:20	247:84	10	av_log
arg	247:27	247:28	11	s
water	247:27	0:0	12	s
arg	247:30	247:42	11	AV_LOG_DEBUG
water	247:30	0:0	12	AV_LOG_DEBUG
arg	247:44	247:84	11	"File is truncated adjusting duration\n"
water	247:44	0:0	12	"File is truncated adjusting duration\n"
water	247:85	0:0	10	;
water	248:20	0:0	10	st
op	248:22	0:0	10	->
water	248:24	0:0	10	duration
op	248:33	0:0	10	=
call	248:35	248:88	10	av_rescale
arg	248:46	248:58	11	st->duration
water	248:46	0:0	12	st
op	248:48	0:0	12	->
water	248:50	0:0	12	duration
arg	248:60	248:73	11	avi->io_fsize
water	248:60	0:0	12	avi
op	248:63	0:0	12	->
water	248:65	0:0	12	io_fsize
arg	248:75	248:88	11	avi->riff_end
water	248:75	0:0	12	avi
op	248:78	0:0	12	->
water	248:80	0:0	12	riff_end
water	248:89	0:0	10	;
water	249:16	0:0	10	}
water	250:12	0:0	8	}
water	251:12	0:0	6	ast
op	251:15	0:0	6	->
water	251:17	0:0	6	frame_offset
op	251:30	0:0	6	=
water	251:32	0:0	6	ast
op	251:35	0:0	6	->
water	251:37	0:0	6	cum_len
water	251:44	0:0	6	;
call	252:12	252:39	6	avio_skip
arg	252:22	252:24	7	pb
water	252:22	0:0	8	pb
arg	252:26	252:39	7	size-12*4
water	252:26	0:0	8	size
op	252:31	0:0	8	-
water	252:33	0:0	8	12
op	252:36	0:0	8	*
water	252:38	0:0	8	4
water	252:40	0:0	6	;
break	253:12	253:17	6	
water	254:8	0:0	6	case
call	254:13	254:37	6	MKTAG
arg	254:19	254:22	7	's'
water	254:19	0:0	8	's'
arg	254:24	254:27	7	't'
water	254:24	0:0	8	't'
arg	254:29	254:32	7	'r'
water	254:29	0:0	8	'r'
arg	254:34	254:37	7	'f'
water	254:34	0:0	8	'f'
water	254:38	0:0	6	:
water	256:12	0:0	6	if
water	256:15	0:0	6	(
op	256:16	0:0	6	!
water	256:17	0:0	6	size
water	256:21	0:0	6	)
water	257:16	0:0	6	break
water	257:21	0:0	6	;
if	258:12	260:12	6	(stream_index >= ( unsigned ) s -> nb_streams || avi -> dv_demux)
cond	258:16	258:64	7	stream_index >= ( unsigned ) s -> nb_streams || avi -> dv_demux
water	258:16	0:0	8	stream_index
op	258:29	0:0	8	>=
water	258:32	0:0	8	(
water	258:33	0:0	8	unsigned
water	258:41	0:0	8	)
water	258:42	0:0	8	s
op	258:43	0:0	8	->
water	258:45	0:0	8	nb_streams
op	258:56	0:0	8	||
water	258:59	0:0	8	avi
op	258:62	0:0	8	->
water	258:64	0:0	8	dv_demux
stmts	258:74	260:12	7	
water	258:74	0:0	8	{
call	259:16	259:34	8	avio_skip
arg	259:26	259:28	9	pb
water	259:26	0:0	10	pb
arg	259:30	259:34	9	size
water	259:30	0:0	10	size
water	259:35	0:0	8	;
water	260:12	0:0	8	}
else	260:14	434:12	6
stmts	260:19	434:12	7	
water	260:19	0:0	8	{
decl	261:16	261:48	8	uint64_t	cur_pos
op	261:33	0:0	8	=
call	261:35	261:47	9	avio_tell
arg	261:45	261:47	10	pb
water	261:45	0:0	11	pb
water	262:16	0:0	8	unsigned
water	262:25	0:0	8	esize
water	262:30	0:0	8	;
if	263:16	264:58	8	(cur_pos < list_end)
cond	263:20	263:30	9	cur_pos < list_end
water	263:20	0:0	10	cur_pos
op	263:28	0:0	10	<
water	263:30	0:0	10	list_end
stmts	264:20	264:58	9	
water	264:20	0:0	10	size
op	264:25	0:0	10	=
call	264:27	264:57	10	FFMIN
arg	264:33	264:37	11	size
water	264:33	0:0	12	size
arg	264:39	264:57	11	list_end-cur_pos
water	264:39	0:0	12	list_end
op	264:48	0:0	12	-
water	264:50	0:0	12	cur_pos
water	264:58	0:0	10	;
water	265:16	0:0	8	st
op	265:19	0:0	8	=
water	265:21	0:0	8	s
op	265:22	0:0	8	->
water	265:24	0:0	8	streams
op	265:31	0:0	8	[
water	265:32	0:0	8	stream_index
op	265:44	0:0	8	]
water	265:45	0:0	8	;
if	266:16	269:16	8	(st -> codec -> codec_type != AVMEDIA_TYPE_UNKNOWN)
cond	266:20	266:45	9	st -> codec -> codec_type != AVMEDIA_TYPE_UNKNOWN
water	266:20	0:0	10	st
op	266:22	0:0	10	->
water	266:24	0:0	10	codec
op	266:29	0:0	10	->
water	266:31	0:0	10	codec_type
op	266:42	0:0	10	!=
water	266:45	0:0	10	AVMEDIA_TYPE_UNKNOWN
stmts	266:67	269:16	9	
water	266:67	0:0	10	{
call	267:20	267:38	10	avio_skip
arg	267:30	267:32	11	pb
water	267:30	0:0	12	pb
arg	267:34	267:38	11	size
water	267:34	0:0	12	size
water	267:39	0:0	10	;
break	268:20	268:25	10	
water	269:16	0:0	10	}
switch	270:16	433:16	8	(codec_type)
cond	270:24	270:24	9	codec_type
water	270:24	0:0	10	codec_type
stmts	270:36	433:16	9	
water	270:36	0:0	10	{
label	271:16	271:39	10	case AVMEDIA_TYPE_VIDEO :
if	272:20	279:20	10	(amv_file_format)
cond	272:24	272:24	11	amv_file_format
water	272:24	0:0	12	amv_file_format
stmts	272:41	279:20	11	
water	272:41	0:0	12	{
water	273:24	0:0	12	st
op	273:26	0:0	12	->
water	273:28	0:0	12	codec
op	273:33	0:0	12	->
water	273:35	0:0	12	width
op	273:46	0:0	12	=
water	273:48	0:0	12	avih_width
water	273:58	0:0	12	;
water	274:24	0:0	12	st
op	274:26	0:0	12	->
water	274:28	0:0	12	codec
op	274:33	0:0	12	->
water	274:35	0:0	12	height
op	274:46	0:0	12	=
water	274:48	0:0	12	avih_height
water	274:59	0:0	12	;
water	275:24	0:0	12	st
op	275:26	0:0	12	->
water	275:28	0:0	12	codec
op	275:33	0:0	12	->
water	275:35	0:0	12	codec_type
op	275:46	0:0	12	=
water	275:48	0:0	12	AVMEDIA_TYPE_VIDEO
water	275:66	0:0	12	;
water	276:24	0:0	12	st
op	276:26	0:0	12	->
water	276:28	0:0	12	codec
op	276:33	0:0	12	->
water	276:35	0:0	12	codec_id
op	276:46	0:0	12	=
water	276:48	0:0	12	AV_CODEC_ID_AMV
water	276:63	0:0	12	;
call	277:24	277:42	12	avio_skip
arg	277:34	277:36	13	pb
water	277:34	0:0	14	pb
arg	277:38	277:42	13	size
water	277:38	0:0	14	size
water	277:43	0:0	12	;
break	278:24	278:29	12	
water	279:20	0:0	12	}
water	280:20	0:0	10	tag1
op	280:25	0:0	10	=
call	280:27	280:59	10	ff_get_bmp_header
arg	280:45	280:47	11	pb
water	280:45	0:0	12	pb
arg	280:49	280:51	11	st
water	280:49	0:0	12	st
arg	280:53	280:59	11	&esize
op	280:53	0:0	12	&
water	280:54	0:0	12	esize
water	280:60	0:0	10	;
if	282:20	288:20	10	(tag1 ==MKTAG ('D' ,'X' ,'S' ,'B' ) || tag1 ==MKTAG ('D' ,'X' ,'S' ,'A' ))
cond	282:24	283:56	11	tag1 ==MKTAG ('D' ,'X' ,'S' ,'B' ) || tag1 ==MKTAG ('D' ,'X' ,'S' ,'A' )
water	282:24	0:0	12	tag1
op	282:29	0:0	12	==
call	282:32	282:56	12	MKTAG
arg	282:38	282:41	13	'D'
water	282:38	0:0	14	'D'
arg	282:43	282:46	13	'X'
water	282:43	0:0	14	'X'
arg	282:48	282:51	13	'S'
water	282:48	0:0	14	'S'
arg	282:53	282:56	13	'B'
water	282:53	0:0	14	'B'
op	282:58	0:0	12	||
water	283:24	0:0	12	tag1
op	283:29	0:0	12	==
call	283:32	283:56	12	MKTAG
arg	283:38	283:41	13	'D'
water	283:38	0:0	14	'D'
arg	283:43	283:46	13	'X'
water	283:43	0:0	14	'X'
arg	283:48	283:51	13	'S'
water	283:48	0:0	14	'S'
arg	283:53	283:56	13	'A'
water	283:53	0:0	14	'A'
stmts	283:59	288:20	11	
water	283:59	0:0	12	{
water	284:24	0:0	12	st
op	284:26	0:0	12	->
water	284:28	0:0	12	codec
op	284:33	0:0	12	->
water	284:35	0:0	12	codec_type
op	284:46	0:0	12	=
water	284:48	0:0	12	AVMEDIA_TYPE_SUBTITLE
water	284:69	0:0	12	;
water	285:24	0:0	12	st
op	285:26	0:0	12	->
water	285:28	0:0	12	codec
op	285:33	0:0	12	->
water	285:35	0:0	12	codec_tag
op	285:46	0:0	12	=
water	285:48	0:0	12	tag1
water	285:52	0:0	12	;
water	286:24	0:0	12	st
op	286:26	0:0	12	->
water	286:28	0:0	12	codec
op	286:33	0:0	12	->
water	286:35	0:0	12	codec_id
op	286:46	0:0	12	=
water	286:48	0:0	12	AV_CODEC_ID_XSUB
water	286:64	0:0	12	;
break	287:24	287:29	12	
water	288:20	0:0	12	}
if	290:20	297:20	10	(size > 10 * 4 && size < ( 1 << 30 ) && size < avi -> fsize)
cond	290:24	290:73	11	size > 10 * 4 && size < ( 1 << 30 ) && size < avi -> fsize
water	290:24	0:0	12	size
op	290:29	0:0	12	>
water	290:31	0:0	12	10
op	290:34	0:0	12	*
water	290:36	0:0	12	4
op	290:38	0:0	12	&&
water	290:41	0:0	12	size
op	290:46	0:0	12	<
water	290:48	0:0	12	(
water	290:49	0:0	12	1
op	290:51	0:0	12	<<
water	290:54	0:0	12	30
water	290:56	0:0	12	)
op	290:58	0:0	12	&&
water	290:61	0:0	12	size
op	290:66	0:0	12	<
water	290:68	0:0	12	avi
op	290:71	0:0	12	->
water	290:73	0:0	12	fsize
stmts	290:80	297:20	11	
water	290:80	0:0	12	{
if	291:24	293:24	12	(esize == size - 1 && ( esize & 1 ))
cond	291:28	291:55	13	esize == size - 1 && ( esize & 1 )
water	291:28	0:0	14	esize
op	291:34	0:0	14	==
water	291:37	0:0	14	size
op	291:41	0:0	14	-
water	291:42	0:0	14	1
op	291:44	0:0	14	&&
water	291:47	0:0	14	(
water	291:48	0:0	14	esize
op	291:53	0:0	14	&
water	291:54	0:0	14	1
water	291:55	0:0	14	)
stmts	291:58	293:24	13	
water	291:58	0:0	14	{
water	292:28	0:0	14	st
op	292:30	0:0	14	->
water	292:32	0:0	14	codec
op	292:37	0:0	14	->
water	292:39	0:0	14	extradata_size
op	292:54	0:0	14	=
water	292:56	0:0	14	esize
op	292:62	0:0	14	-
water	292:64	0:0	14	10
op	292:67	0:0	14	*
water	292:69	0:0	14	4
water	292:70	0:0	14	;
water	293:24	0:0	14	}
else	293:26	294:70	12
stmts	294:28	294:70	13	
water	294:28	0:0	14	st
op	294:30	0:0	14	->
water	294:32	0:0	14	codec
op	294:37	0:0	14	->
water	294:39	0:0	14	extradata_size
op	294:54	0:0	14	=
water	294:57	0:0	14	size
op	294:62	0:0	14	-
water	294:64	0:0	14	10
op	294:67	0:0	14	*
water	294:69	0:0	14	4
water	294:70	0:0	14	;
if	295:24	296:50	12	(ff_get_extradata (st -> codec ,pb ,st -> codec -> extradata_size ) < 0)
cond	295:28	295:89	13	ff_get_extradata (st -> codec ,pb ,st -> codec -> extradata_size ) < 0
call	295:28	295:85	14	ff_get_extradata
arg	295:45	295:54	15	st->codec
water	295:45	0:0	16	st
op	295:47	0:0	16	->
water	295:49	0:0	16	codec
arg	295:56	295:58	15	pb
water	295:56	0:0	16	pb
arg	295:60	295:85	15	st->codec->extradata_size
water	295:60	0:0	16	st
op	295:62	0:0	16	->
water	295:64	0:0	16	codec
op	295:69	0:0	16	->
water	295:71	0:0	16	extradata_size
op	295:87	0:0	14	<
water	295:89	0:0	14	0
stmts	296:28	296:50	13	
return	296:28	296:50	14	AVERROR(ENOMEM)
call	296:35	296:49	15	AVERROR
arg	296:43	296:49	16	ENOMEM
water	296:43	0:0	17	ENOMEM
water	297:20	0:0	12	}
if	300:20	301:35	10	(st -> codec -> extradata_size & 1)
cond	300:24	300:52	11	st -> codec -> extradata_size & 1
water	300:24	0:0	12	st
op	300:26	0:0	12	->
water	300:28	0:0	12	codec
op	300:33	0:0	12	->
water	300:35	0:0	12	extradata_size
op	300:50	0:0	12	&
water	300:52	0:0	12	1
stmts	301:24	301:35	11	
call	301:24	301:34	12	avio_r8
arg	301:32	301:34	13	pb
water	301:32	0:0	14	pb
water	301:35	0:0	12	;
if	307:20	322:20	10	(st -> codec -> extradata_size && ( st -> codec -> bits_per_coded_sample <= 8 ))
cond	307:24	308:62	11	st -> codec -> extradata_size && ( st -> codec -> bits_per_coded_sample <= 8 )
water	307:24	0:0	12	st
op	307:26	0:0	12	->
water	307:28	0:0	12	codec
op	307:33	0:0	12	->
water	307:35	0:0	12	extradata_size
op	307:50	0:0	12	&&
water	308:24	0:0	12	(
water	308:25	0:0	12	st
op	308:27	0:0	12	->
water	308:29	0:0	12	codec
op	308:34	0:0	12	->
water	308:36	0:0	12	bits_per_coded_sample
op	308:58	0:0	12	<=
water	308:61	0:0	12	8
water	308:62	0:0	12	)
stmts	308:65	322:20	11	
water	308:65	0:0	12	{
decl	309:24	309:83	12	int	pal_size
op	309:37	0:0	12	=
water	309:39	0:0	12	(
water	309:40	0:0	12	1
op	309:42	0:0	12	<<
water	309:45	0:0	12	st
op	309:47	0:0	12	->
water	309:49	0:0	12	codec
op	309:54	0:0	12	->
water	309:56	0:0	12	bits_per_coded_sample
water	309:77	0:0	12	)
op	309:79	0:0	12	<<
water	309:82	0:0	12	2
decl	310:24	310:46	12	const uint8_t	*pal_src
water	312:24	0:0	12	pal_size
op	312:33	0:0	12	=
call	312:35	312:76	12	FFMIN
arg	312:41	312:49	13	pal_size
water	312:41	0:0	14	pal_size
arg	312:51	312:76	13	st->codec->extradata_size
water	312:51	0:0	14	st
op	312:53	0:0	14	->
water	312:55	0:0	14	codec
op	312:60	0:0	14	->
water	312:62	0:0	14	extradata_size
water	312:77	0:0	12	;
water	313:24	0:0	12	pal_src
op	313:33	0:0	12	=
water	313:35	0:0	12	st
op	313:37	0:0	12	->
water	313:39	0:0	12	codec
op	313:44	0:0	12	->
water	313:46	0:0	12	extradata
op	313:56	0:0	12	+
water	314:35	0:0	12	st
op	314:37	0:0	12	->
water	314:39	0:0	12	codec
op	314:44	0:0	12	->
water	314:46	0:0	12	extradata_size
op	314:61	0:0	12	-
water	314:63	0:0	12	pal_size
water	314:71	0:0	12	;
if	316:24	318:40	12	(pal_src - st -> codec -> extradata >= 9 && !memcmp (st -> codec -> extradata + st -> codec -> extradata_size - 9 ,"BottomUp" ,9 ))
cond	316:28	317:103	13	pal_src - st -> codec -> extradata >= 9 && !memcmp (st -> codec -> extradata + st -> codec -> extradata_size - 9 ,"BottomUp" ,9 )
water	316:28	0:0	14	pal_src
op	316:36	0:0	14	-
water	316:38	0:0	14	st
op	316:40	0:0	14	->
water	316:42	0:0	14	codec
op	316:47	0:0	14	->
water	316:49	0:0	14	extradata
op	316:59	0:0	14	>=
water	316:62	0:0	14	9
op	316:64	0:0	14	&&
op	317:28	0:0	14	!
call	317:29	317:103	14	memcmp
arg	317:36	317:88	15	st->codec->extradata+st->codec->extradata_size-9
water	317:36	0:0	16	st
op	317:38	0:0	16	->
water	317:40	0:0	16	codec
op	317:45	0:0	16	->
water	317:47	0:0	16	extradata
op	317:57	0:0	16	+
water	317:59	0:0	16	st
op	317:61	0:0	16	->
water	317:63	0:0	16	codec
op	317:68	0:0	16	->
water	317:70	0:0	16	extradata_size
op	317:85	0:0	16	-
water	317:87	0:0	16	9
arg	317:90	317:100	15	"BottomUp"
water	317:90	0:0	16	"BottomUp"
arg	317:102	317:103	15	9
water	317:102	0:0	16	9
stmts	318:28	318:40	13	
water	318:28	0:0	14	pal_src
op	318:36	0:0	14	-=
water	318:39	0:0	14	9
water	318:40	0:0	14	;
for	319:24	320:74	12	(i = 0 ;i < pal_size / 4;i ++)
forinit	319:29	319:34	13	i = 0 ;
water	319:29	0:0	14	i
op	319:31	0:0	14	=
water	319:33	0:0	14	0
water	319:34	0:0	14	;
cond	319:36	319:51	13	i < pal_size / 4
water	319:36	0:0	14	i
op	319:38	0:0	14	<
water	319:40	0:0	14	pal_size
op	319:49	0:0	14	/
water	319:51	0:0	14	4
forexpr	319:54	319:55	13	i ++
water	319:54	0:0	14	i
op	319:55	0:0	14	++
stmts	320:28	320:74	13	
water	320:28	0:0	14	ast
op	320:31	0:0	14	->
water	320:33	0:0	14	pal
op	320:36	0:0	14	[
water	320:37	0:0	14	i
op	320:38	0:0	14	]
op	320:40	0:0	14	=
water	320:42	0:0	14	0
water	320:43	0:0	14	xFFU
op	320:47	0:0	14	<<
water	320:49	0:0	14	24
op	320:52	0:0	14	|
call	320:54	320:73	14	AV_RL32
arg	320:62	320:73	15	pal_src+4*i
water	320:62	0:0	16	pal_src
op	320:69	0:0	16	+
water	320:70	0:0	16	4
op	320:71	0:0	16	*
water	320:72	0:0	16	i
water	320:74	0:0	14	;
water	321:24	0:0	12	ast
op	321:27	0:0	12	->
water	321:29	0:0	12	has_pal
op	321:37	0:0	12	=
water	321:39	0:0	12	1
water	321:40	0:0	12	;
water	322:20	0:0	12	}
call	324:20	324:46	10	print_tag
arg	324:30	324:37	11	"video"
water	324:30	0:0	12	"video"
arg	324:39	324:43	11	tag1
water	324:39	0:0	12	tag1
arg	324:45	324:46	11	0
water	324:45	0:0	12	0
water	324:47	0:0	10	;
water	326:20	0:0	10	st
op	326:22	0:0	10	->
water	326:24	0:0	10	codec
op	326:29	0:0	10	->
water	326:31	0:0	10	codec_type
op	326:42	0:0	10	=
water	326:44	0:0	10	AVMEDIA_TYPE_VIDEO
water	326:62	0:0	10	;
water	327:20	0:0	10	st
op	327:22	0:0	10	->
water	327:24	0:0	10	codec
op	327:29	0:0	10	->
water	327:31	0:0	10	codec_tag
op	327:42	0:0	10	=
water	327:44	0:0	10	tag1
water	327:48	0:0	10	;
water	328:20	0:0	10	st
op	328:22	0:0	10	->
water	328:24	0:0	10	codec
op	328:29	0:0	10	->
water	328:31	0:0	10	codec_id
op	328:42	0:0	10	=
call	328:44	329:64	10	ff_codec_get_id
arg	328:60	328:77	11	ff_codec_bmp_tags
water	328:60	0:0	12	ff_codec_bmp_tags
arg	329:60	329:64	11	tag1
water	329:60	0:0	12	tag1
water	329:65	0:0	10	;
if	331:20	340:20	10	(! st -> codec -> codec_id)
cond	331:24	331:36	11	! st -> codec -> codec_id
op	331:24	0:0	12	!
water	331:25	0:0	12	st
op	331:27	0:0	12	->
water	331:29	0:0	12	codec
op	331:34	0:0	12	->
water	331:36	0:0	12	codec_id
stmts	331:46	340:20	11	
water	331:46	0:0	12	{
decl	332:24	332:40	12	char	tag_buf[32]
call	333:24	333:78	12	av_get_codec_tag_string
arg	333:48	333:55	13	tag_buf
water	333:48	0:0	14	tag_buf
arg	333:57	333:72	13	sizeof(tag_buf)
op	333:57	0:0	14	sizeof
water	333:63	0:0	14	(
water	333:64	0:0	14	tag_buf
water	333:71	0:0	14	)
arg	333:74	333:78	13	tag1
water	333:74	0:0	14	tag1
water	333:79	0:0	12	;
water	334:24	0:0	12	st
op	334:26	0:0	12	->
water	334:28	0:0	12	codec
op	334:33	0:0	12	->
water	334:35	0:0	12	codec_id
op	334:44	0:0	12	=
call	335:28	335:72	12	ff_codec_get_id
arg	335:44	335:66	13	ff_codec_movvideo_tags
water	335:44	0:0	14	ff_codec_movvideo_tags
arg	335:68	335:72	13	tag1
water	335:68	0:0	14	tag1
water	335:73	0:0	12	;
if	336:24	339:42	12	(st -> codec -> codec_id)
cond	336:28	336:39	13	st -> codec -> codec_id
water	336:28	0:0	14	st
op	336:30	0:0	14	->
water	336:32	0:0	14	codec
op	336:37	0:0	14	->
water	336:39	0:0	14	codec_id
stmts	337:27	339:42	13	
call	337:27	339:41	14	av_log
arg	337:34	337:35	15	s
water	337:34	0:0	16	s
arg	337:37	337:51	15	AV_LOG_WARNING
water	337:37	0:0	16	AV_LOG_WARNING
arg	338:34	338:70	15	"mov tag found in avi (fourcc %s)\n"
water	338:34	0:0	16	"mov tag found in avi (fourcc %s)\n"
arg	339:34	339:41	15	tag_buf
water	339:34	0:0	16	tag_buf
water	339:42	0:0	14	;
water	340:20	0:0	12	}
water	343:20	0:0	10	st
op	343:22	0:0	10	->
water	343:24	0:0	10	need_parsing
op	343:37	0:0	10	=
water	343:39	0:0	10	AVSTREAM_PARSE_HEADERS
water	343:61	0:0	10	;
if	345:20	347:72	10	(st -> codec -> codec_id == AV_CODEC_ID_MPEG4 && ast -> handler ==MKTAG ('X' ,'V' ,'I' ,'D' ))
cond	345:24	346:64	11	st -> codec -> codec_id == AV_CODEC_ID_MPEG4 && ast -> handler ==MKTAG ('X' ,'V' ,'I' ,'D' )
water	345:24	0:0	12	st
op	345:26	0:0	12	->
water	345:28	0:0	12	codec
op	345:33	0:0	12	->
water	345:35	0:0	12	codec_id
op	345:44	0:0	12	==
water	345:47	0:0	12	AV_CODEC_ID_MPEG4
op	345:65	0:0	12	&&
water	346:24	0:0	12	ast
op	346:27	0:0	12	->
water	346:29	0:0	12	handler
op	346:37	0:0	12	==
call	346:40	346:64	12	MKTAG
arg	346:46	346:49	13	'X'
water	346:46	0:0	14	'X'
arg	346:51	346:54	13	'V'
water	346:51	0:0	14	'V'
arg	346:56	346:59	13	'I'
water	346:56	0:0	14	'I'
arg	346:61	346:64	13	'D'
water	346:61	0:0	14	'D'
stmts	347:24	347:72	11	
water	347:24	0:0	12	st
op	347:26	0:0	12	->
water	347:28	0:0	12	codec
op	347:33	0:0	12	->
water	347:35	0:0	12	codec_tag
op	347:45	0:0	12	=
call	347:47	347:71	12	MKTAG
arg	347:53	347:56	13	'X'
water	347:53	0:0	14	'X'
arg	347:58	347:61	13	'V'
water	347:58	0:0	14	'V'
arg	347:63	347:66	13	'I'
water	347:63	0:0	14	'I'
arg	347:68	347:71	13	'D'
water	347:68	0:0	14	'D'
water	347:72	0:0	12	;
if	349:20	350:62	10	(st -> codec -> codec_tag ==MKTAG ('V' ,'S' ,'S' ,'H' ))
cond	349:24	349:72	11	st -> codec -> codec_tag ==MKTAG ('V' ,'S' ,'S' ,'H' )
water	349:24	0:0	12	st
op	349:26	0:0	12	->
water	349:28	0:0	12	codec
op	349:33	0:0	12	->
water	349:35	0:0	12	codec_tag
op	349:45	0:0	12	==
call	349:48	349:72	12	MKTAG
arg	349:54	349:57	13	'V'
water	349:54	0:0	14	'V'
arg	349:59	349:62	13	'S'
water	349:59	0:0	14	'S'
arg	349:64	349:67	13	'S'
water	349:64	0:0	14	'S'
arg	349:69	349:72	13	'H'
water	349:69	0:0	14	'H'
stmts	350:24	350:62	11	
water	350:24	0:0	12	st
op	350:26	0:0	12	->
water	350:28	0:0	12	need_parsing
op	350:41	0:0	12	=
water	350:43	0:0	12	AVSTREAM_PARSE_FULL
water	350:62	0:0	12	;
if	352:20	363:20	10	(st -> codec -> codec_tag == 0 && st -> codec -> height > 0 && st -> codec -> extradata_size < 1 U << 30)
cond	352:24	353:58	11	st -> codec -> codec_tag == 0 && st -> codec -> height > 0 && st -> codec -> extradata_size < 1 U << 30
water	352:24	0:0	12	st
op	352:26	0:0	12	->
water	352:28	0:0	12	codec
op	352:33	0:0	12	->
water	352:35	0:0	12	codec_tag
op	352:45	0:0	12	==
water	352:48	0:0	12	0
op	352:50	0:0	12	&&
water	352:53	0:0	12	st
op	352:55	0:0	12	->
water	352:57	0:0	12	codec
op	352:62	0:0	12	->
water	352:64	0:0	12	height
op	352:71	0:0	12	>
water	352:73	0:0	12	0
op	352:75	0:0	12	&&
water	353:24	0:0	12	st
op	353:26	0:0	12	->
water	353:28	0:0	12	codec
op	353:33	0:0	12	->
water	353:35	0:0	12	extradata_size
op	353:50	0:0	12	<
water	353:52	0:0	12	1
water	353:53	0:0	12	U
op	353:55	0:0	12	<<
water	353:58	0:0	12	30
stmts	353:62	363:20	11	
water	353:62	0:0	12	{
water	354:24	0:0	12	st
op	354:26	0:0	12	->
water	354:28	0:0	12	codec
op	354:33	0:0	12	->
water	354:35	0:0	12	extradata_size
op	354:50	0:0	12	+=
water	354:53	0:0	12	9
water	354:54	0:0	12	;
if	355:24	360:24	12	(( ret =av_reallocp (& st -> codec -> extradata ,st -> codec -> extradata_size + AV_INPUT_BUFFER_PADDING_SIZE ) ) < 0)
cond	355:28	357:80	13	( ret =av_reallocp (& st -> codec -> extradata ,st -> codec -> extradata_size + AV_INPUT_BUFFER_PADDING_SIZE ) ) < 0
water	355:28	0:0	14	(
water	355:29	0:0	14	ret
op	355:33	0:0	14	=
call	355:35	357:75	14	av_reallocp
arg	355:47	355:68	15	&st->codec->extradata
op	355:47	0:0	16	&
water	355:48	0:0	16	st
op	355:50	0:0	16	->
water	355:52	0:0	16	codec
op	355:57	0:0	16	->
water	355:59	0:0	16	extradata
arg	356:47	357:75	15	st->codec->extradata_size+AV_INPUT_BUFFER_PADDING_SIZE
water	356:47	0:0	16	st
op	356:49	0:0	16	->
water	356:51	0:0	16	codec
op	356:56	0:0	16	->
water	356:58	0:0	16	extradata_size
op	356:73	0:0	16	+
water	357:47	0:0	16	AV_INPUT_BUFFER_PADDING_SIZE
water	357:76	0:0	14	)
op	357:78	0:0	14	<
water	357:80	0:0	14	0
stmts	357:83	360:24	13	
water	357:83	0:0	14	{
water	358:28	0:0	14	st
op	358:30	0:0	14	->
water	358:32	0:0	14	codec
op	358:37	0:0	14	->
water	358:39	0:0	14	extradata_size
op	358:54	0:0	14	=
water	358:56	0:0	14	0
water	358:57	0:0	14	;
return	359:28	359:38	14	ret
water	359:35	0:0	15	ret
water	360:24	0:0	14	}
else	360:26	362:49	12
stmts	361:28	362:49	13	
call	361:28	362:48	14	memcpy
arg	361:35	361:87	15	st->codec->extradata+st->codec->extradata_size-9
water	361:35	0:0	16	st
op	361:37	0:0	16	->
water	361:39	0:0	16	codec
op	361:44	0:0	16	->
water	361:46	0:0	16	extradata
op	361:56	0:0	16	+
water	361:58	0:0	16	st
op	361:60	0:0	16	->
water	361:62	0:0	16	codec
op	361:67	0:0	16	->
water	361:69	0:0	16	extradata_size
op	361:84	0:0	16	-
water	361:86	0:0	16	9
arg	362:35	362:45	15	"BottomUp"
water	362:35	0:0	16	"BottomUp"
arg	362:47	362:48	15	9
water	362:47	0:0	16	9
water	362:49	0:0	14	;
water	363:20	0:0	12	}
water	364:20	0:0	10	st
op	364:22	0:0	10	->
water	364:24	0:0	10	codec
op	364:29	0:0	10	->
water	364:31	0:0	10	height
op	364:38	0:0	10	=
call	364:40	364:63	10	FFABS
arg	364:46	364:63	11	st->codec->height
water	364:46	0:0	12	st
op	364:48	0:0	12	->
water	364:50	0:0	12	codec
op	364:55	0:0	12	->
water	364:57	0:0	12	height
water	364:64	0:0	10	;
break	367:20	367:25	10	
label	368:16	368:39	10	case AVMEDIA_TYPE_AUDIO :
water	369:20	0:0	10	ret
op	369:24	0:0	10	=
call	369:26	369:69	10	ff_get_wav_header
arg	369:44	369:45	11	s
water	369:44	0:0	12	s
arg	369:47	369:49	11	pb
water	369:47	0:0	12	pb
arg	369:51	369:60	11	st->codec
water	369:51	0:0	12	st
op	369:53	0:0	12	->
water	369:55	0:0	12	codec
arg	369:62	369:66	11	size
water	369:62	0:0	12	size
arg	369:68	369:69	11	0
water	369:68	0:0	12	0
water	369:70	0:0	10	;
if	370:20	371:34	10	(ret < 0)
cond	370:24	370:30	11	ret < 0
water	370:24	0:0	12	ret
op	370:28	0:0	12	<
water	370:30	0:0	12	0
stmts	371:24	371:34	11	
return	371:24	371:34	12	ret
water	371:31	0:0	13	ret
water	372:20	0:0	10	ast
op	372:23	0:0	10	->
water	372:25	0:0	10	dshow_block_align
op	372:43	0:0	10	=
water	372:45	0:0	10	st
op	372:47	0:0	10	->
water	372:49	0:0	10	codec
op	372:54	0:0	10	->
water	372:56	0:0	10	block_align
water	372:67	0:0	10	;
if	373:20	381:20	10	(ast -> sample_size && st -> codec -> block_align && ast -> sample_size != st -> codec -> block_align)
cond	373:24	374:55	11	ast -> sample_size && st -> codec -> block_align && ast -> sample_size != st -> codec -> block_align
water	373:24	0:0	12	ast
op	373:27	0:0	12	->
water	373:29	0:0	12	sample_size
op	373:41	0:0	12	&&
water	373:44	0:0	12	st
op	373:46	0:0	12	->
water	373:48	0:0	12	codec
op	373:53	0:0	12	->
water	373:55	0:0	12	block_align
op	373:67	0:0	12	&&
water	374:24	0:0	12	ast
op	374:27	0:0	12	->
water	374:29	0:0	12	sample_size
op	374:41	0:0	12	!=
water	374:44	0:0	12	st
op	374:46	0:0	12	->
water	374:48	0:0	12	codec
op	374:53	0:0	12	->
water	374:55	0:0	12	block_align
stmts	374:68	381:20	11	
water	374:68	0:0	12	{
call	375:24	379:53	12	av_log
arg	375:31	375:32	13	s
water	375:31	0:0	14	s
arg	376:31	376:45	13	AV_LOG_WARNING
water	376:31	0:0	14	AV_LOG_WARNING
arg	377:31	377:71	13	"sample size (%d) != block align (%d)\n"
water	377:31	0:0	14	"sample size (%d) != block align (%d)\n"
arg	378:31	378:47	13	ast->sample_size
water	378:31	0:0	14	ast
op	378:34	0:0	14	->
water	378:36	0:0	14	sample_size
arg	379:31	379:53	13	st->codec->block_align
water	379:31	0:0	14	st
op	379:33	0:0	14	->
water	379:35	0:0	14	codec
op	379:40	0:0	14	->
water	379:42	0:0	14	block_align
water	379:54	0:0	12	;
water	380:24	0:0	12	ast
op	380:27	0:0	12	->
water	380:29	0:0	12	sample_size
op	380:41	0:0	12	=
water	380:43	0:0	12	st
op	380:45	0:0	12	->
water	380:47	0:0	12	codec
op	380:52	0:0	12	->
water	380:54	0:0	12	block_align
water	380:65	0:0	12	;
water	381:20	0:0	12	}
if	384:20	385:40	10	(size & 1)
cond	384:24	384:31	11	size & 1
water	384:24	0:0	12	size
op	384:29	0:0	12	&
water	384:31	0:0	12	1
stmts	385:24	385:40	11	
call	385:24	385:39	12	avio_skip
arg	385:34	385:36	13	pb
water	385:34	0:0	14	pb
arg	385:38	385:39	13	1
water	385:38	0:0	14	1
water	385:40	0:0	12	;
water	388:20	0:0	10	st
op	388:22	0:0	10	->
water	388:24	0:0	10	need_parsing
op	388:37	0:0	10	=
water	388:39	0:0	10	AVSTREAM_PARSE_TIMESTAMPS
water	388:64	0:0	10	;
if	392:20	394:62	10	(st -> codec -> codec_id == AV_CODEC_ID_AAC && st -> codec -> extradata_size)
cond	392:24	393:35	11	st -> codec -> codec_id == AV_CODEC_ID_AAC && st -> codec -> extradata_size
water	392:24	0:0	12	st
op	392:26	0:0	12	->
water	392:28	0:0	12	codec
op	392:33	0:0	12	->
water	392:35	0:0	12	codec_id
op	392:44	0:0	12	==
water	392:47	0:0	12	AV_CODEC_ID_AAC
op	392:63	0:0	12	&&
water	393:24	0:0	12	st
op	393:26	0:0	12	->
water	393:28	0:0	12	codec
op	393:33	0:0	12	->
water	393:35	0:0	12	extradata_size
stmts	394:24	394:62	11	
water	394:24	0:0	12	st
op	394:26	0:0	12	->
water	394:28	0:0	12	need_parsing
op	394:41	0:0	12	=
water	394:43	0:0	12	AVSTREAM_PARSE_NONE
water	394:62	0:0	12	;
if	396:20	397:62	10	(st -> codec -> codec_id == AV_CODEC_ID_FLAC)
cond	396:24	396:47	11	st -> codec -> codec_id == AV_CODEC_ID_FLAC
water	396:24	0:0	12	st
op	396:26	0:0	12	->
water	396:28	0:0	12	codec
op	396:33	0:0	12	->
water	396:35	0:0	12	codec_id
op	396:44	0:0	12	==
water	396:47	0:0	12	AV_CODEC_ID_FLAC
stmts	397:24	397:62	11	
water	397:24	0:0	12	st
op	397:26	0:0	12	->
water	397:28	0:0	12	need_parsing
op	397:41	0:0	12	=
water	397:43	0:0	12	AVSTREAM_PARSE_NONE
water	397:62	0:0	12	;
if	400:20	404:20	10	(ast -> handler ==AV_RL32 ("Axan" ))
cond	400:24	400:54	11	ast -> handler ==AV_RL32 ("Axan" )
water	400:24	0:0	12	ast
op	400:27	0:0	12	->
water	400:29	0:0	12	handler
op	400:37	0:0	12	==
call	400:40	400:54	12	AV_RL32
arg	400:48	400:54	13	"Axan"
water	400:48	0:0	14	"Axan"
stmts	400:57	404:20	11	
water	400:57	0:0	12	{
water	401:24	0:0	12	st
op	401:26	0:0	12	->
water	401:28	0:0	12	codec
op	401:33	0:0	12	->
water	401:35	0:0	12	codec_id
op	401:45	0:0	12	=
water	401:47	0:0	12	AV_CODEC_ID_XAN_DPCM
water	401:67	0:0	12	;
water	402:24	0:0	12	st
op	402:26	0:0	12	->
water	402:28	0:0	12	codec
op	402:33	0:0	12	->
water	402:35	0:0	12	codec_tag
op	402:45	0:0	12	=
water	402:47	0:0	12	0
water	402:48	0:0	12	;
water	403:24	0:0	12	ast
op	403:27	0:0	12	->
water	403:29	0:0	12	dshow_block_align
op	403:47	0:0	12	=
water	403:49	0:0	12	0
water	403:50	0:0	12	;
water	404:20	0:0	12	}
if	405:20	408:20	10	(amv_file_format)
cond	405:24	405:24	11	amv_file_format
water	405:24	0:0	12	amv_file_format
stmts	405:41	408:20	11	
water	405:41	0:0	12	{
water	406:24	0:0	12	st
op	406:26	0:0	12	->
water	406:28	0:0	12	codec
op	406:33	0:0	12	->
water	406:35	0:0	12	codec_id
op	406:47	0:0	12	=
water	406:49	0:0	12	AV_CODEC_ID_ADPCM_IMA_AMV
water	406:74	0:0	12	;
water	407:24	0:0	12	ast
op	407:27	0:0	12	->
water	407:29	0:0	12	dshow_block_align
op	407:47	0:0	12	=
water	407:49	0:0	12	0
water	407:50	0:0	12	;
water	408:20	0:0	12	}
if	409:20	414:20	10	(( st -> codec -> codec_id == AV_CODEC_ID_AAC || st -> codec -> codec_id == AV_CODEC_ID_FLAC || st -> codec -> codec_id == AV_CODEC_ID_MP2 ) && ast -> dshow_block_align <= 4 && ast -> dshow_block_align)
cond	409:24	411:105	11	( st -> codec -> codec_id == AV_CODEC_ID_AAC || st -> codec -> codec_id == AV_CODEC_ID_FLAC || st -> codec -> codec_id == AV_CODEC_ID_MP2 ) && ast -> dshow_block_align <= 4 && ast -> dshow_block_align
water	409:24	0:0	12	(
water	409:25	0:0	12	st
op	409:27	0:0	12	->
water	409:29	0:0	12	codec
op	409:34	0:0	12	->
water	409:36	0:0	12	codec_id
op	409:45	0:0	12	==
water	409:48	0:0	12	AV_CODEC_ID_AAC
op	409:65	0:0	12	||
water	410:25	0:0	12	st
op	410:27	0:0	12	->
water	410:29	0:0	12	codec
op	410:34	0:0	12	->
water	410:36	0:0	12	codec_id
op	410:45	0:0	12	==
water	410:48	0:0	12	AV_CODEC_ID_FLAC
op	410:65	0:0	12	||
water	411:25	0:0	12	st
op	411:27	0:0	12	->
water	411:29	0:0	12	codec
op	411:34	0:0	12	->
water	411:36	0:0	12	codec_id
op	411:45	0:0	12	==
water	411:48	0:0	12	AV_CODEC_ID_MP2
water	411:64	0:0	12	)
op	411:66	0:0	12	&&
water	411:69	0:0	12	ast
op	411:72	0:0	12	->
water	411:74	0:0	12	dshow_block_align
op	411:92	0:0	12	<=
water	411:95	0:0	12	4
op	411:97	0:0	12	&&
water	411:100	0:0	12	ast
op	411:103	0:0	12	->
water	411:105	0:0	12	dshow_block_align
stmts	411:124	414:20	11	
water	411:124	0:0	12	{
call	412:24	412:118	12	av_log
arg	412:31	412:32	13	s
water	412:31	0:0	14	s
arg	412:34	412:46	13	AV_LOG_DEBUG
water	412:34	0:0	14	AV_LOG_DEBUG
arg	412:48	412:94	13	"overriding invalid dshow_block_align of %d\n"
water	412:48	0:0	14	"overriding invalid dshow_block_align of %d\n"
arg	412:96	412:118	13	ast->dshow_block_align
water	412:96	0:0	14	ast
op	412:99	0:0	14	->
water	412:101	0:0	14	dshow_block_align
water	412:119	0:0	12	;
water	413:24	0:0	12	ast
op	413:27	0:0	12	->
water	413:29	0:0	12	dshow_block_align
op	413:47	0:0	12	=
water	413:49	0:0	12	0
water	413:50	0:0	12	;
water	414:20	0:0	12	}
if	415:20	420:20	10	(st -> codec -> codec_id == AV_CODEC_ID_AAC && ast -> dshow_block_align == 1024 && ast -> sample_size == 1024 || st -> codec -> codec_id == AV_CODEC_ID_AAC && ast -> dshow_block_align == 4096 && ast -> sample_size == 4096 || st -> codec -> codec_id == AV_CODEC_ID_MP3 && ast -> dshow_block_align == 1152 && ast -> sample_size == 1152)
cond	415:24	417:119	11	st -> codec -> codec_id == AV_CODEC_ID_AAC && ast -> dshow_block_align == 1024 && ast -> sample_size == 1024 || st -> codec -> codec_id == AV_CODEC_ID_AAC && ast -> dshow_block_align == 4096 && ast -> sample_size == 4096 || st -> codec -> codec_id == AV_CODEC_ID_MP3 && ast -> dshow_block_align == 1152 && ast -> sample_size == 1152
water	415:24	0:0	12	st
op	415:26	0:0	12	->
water	415:28	0:0	12	codec
op	415:33	0:0	12	->
water	415:35	0:0	12	codec_id
op	415:44	0:0	12	==
water	415:47	0:0	12	AV_CODEC_ID_AAC
op	415:63	0:0	12	&&
water	415:66	0:0	12	ast
op	415:69	0:0	12	->
water	415:71	0:0	12	dshow_block_align
op	415:89	0:0	12	==
water	415:92	0:0	12	1024
op	415:97	0:0	12	&&
water	415:100	0:0	12	ast
op	415:103	0:0	12	->
water	415:105	0:0	12	sample_size
op	415:117	0:0	12	==
water	415:120	0:0	12	1024
op	415:125	0:0	12	||
water	416:23	0:0	12	st
op	416:25	0:0	12	->
water	416:27	0:0	12	codec
op	416:32	0:0	12	->
water	416:34	0:0	12	codec_id
op	416:43	0:0	12	==
water	416:46	0:0	12	AV_CODEC_ID_AAC
op	416:62	0:0	12	&&
water	416:65	0:0	12	ast
op	416:68	0:0	12	->
water	416:70	0:0	12	dshow_block_align
op	416:88	0:0	12	==
water	416:91	0:0	12	4096
op	416:96	0:0	12	&&
water	416:99	0:0	12	ast
op	416:102	0:0	12	->
water	416:104	0:0	12	sample_size
op	416:116	0:0	12	==
water	416:119	0:0	12	4096
op	416:124	0:0	12	||
water	417:23	0:0	12	st
op	417:25	0:0	12	->
water	417:27	0:0	12	codec
op	417:32	0:0	12	->
water	417:34	0:0	12	codec_id
op	417:43	0:0	12	==
water	417:46	0:0	12	AV_CODEC_ID_MP3
op	417:62	0:0	12	&&
water	417:65	0:0	12	ast
op	417:68	0:0	12	->
water	417:70	0:0	12	dshow_block_align
op	417:88	0:0	12	==
water	417:91	0:0	12	1152
op	417:96	0:0	12	&&
water	417:99	0:0	12	ast
op	417:102	0:0	12	->
water	417:104	0:0	12	sample_size
op	417:116	0:0	12	==
water	417:119	0:0	12	1152
stmts	417:125	420:20	11	
water	417:125	0:0	12	{
call	418:24	418:74	12	av_log
arg	418:31	418:32	13	s
water	418:31	0:0	14	s
arg	418:34	418:46	13	AV_LOG_DEBUG
water	418:34	0:0	14	AV_LOG_DEBUG
arg	418:48	418:74	13	"overriding sample_size\n"
water	418:48	0:0	14	"overriding sample_size\n"
water	418:75	0:0	12	;
water	419:24	0:0	12	ast
op	419:27	0:0	12	->
water	419:29	0:0	12	sample_size
op	419:41	0:0	12	=
water	419:43	0:0	12	0
water	419:44	0:0	12	;
water	420:20	0:0	12	}
break	421:20	421:25	10	
label	422:16	422:42	10	case AVMEDIA_TYPE_SUBTITLE :
water	423:20	0:0	10	st
op	423:22	0:0	10	->
water	423:24	0:0	10	codec
op	423:29	0:0	10	->
water	423:31	0:0	10	codec_type
op	423:42	0:0	10	=
water	423:44	0:0	10	AVMEDIA_TYPE_SUBTITLE
water	423:65	0:0	10	;
water	424:20	0:0	10	st
op	424:22	0:0	10	->
water	424:24	0:0	10	request_probe
op	424:37	0:0	10	=
water	424:39	0:0	10	1
water	424:40	0:0	10	;
call	425:20	425:38	10	avio_skip
arg	425:30	425:32	11	pb
water	425:30	0:0	12	pb
arg	425:34	425:38	11	size
water	425:34	0:0	12	size
water	425:39	0:0	10	;
break	426:20	426:25	10	
label	427:16	427:23	10	default :
water	428:20	0:0	10	st
op	428:22	0:0	10	->
water	428:24	0:0	10	codec
op	428:29	0:0	10	->
water	428:31	0:0	10	codec_type
op	428:42	0:0	10	=
water	428:44	0:0	10	AVMEDIA_TYPE_DATA
water	428:61	0:0	10	;
water	429:20	0:0	10	st
op	429:22	0:0	10	->
water	429:24	0:0	10	codec
op	429:29	0:0	10	->
water	429:31	0:0	10	codec_id
op	429:42	0:0	10	=
water	429:44	0:0	10	AV_CODEC_ID_NONE
water	429:60	0:0	10	;
water	430:20	0:0	10	st
op	430:22	0:0	10	->
water	430:24	0:0	10	codec
op	430:29	0:0	10	->
water	430:31	0:0	10	codec_tag
op	430:42	0:0	10	=
water	430:44	0:0	10	0
water	430:45	0:0	10	;
call	431:20	431:38	10	avio_skip
arg	431:30	431:32	11	pb
water	431:30	0:0	12	pb
arg	431:34	431:38	11	size
water	431:34	0:0	12	size
water	431:39	0:0	10	;
break	432:20	432:25	10	
water	433:16	0:0	10	}
water	434:12	0:0	8	}
break	435:12	435:17	6	
water	436:8	0:0	6	case
call	436:13	436:37	6	MKTAG
arg	436:19	436:22	7	's'
water	436:19	0:0	8	's'
arg	436:24	436:27	7	't'
water	436:24	0:0	8	't'
arg	436:29	436:32	7	'r'
water	436:29	0:0	8	'r'
arg	436:34	436:37	7	'd'
water	436:34	0:0	8	'd'
water	436:38	0:0	6	:
water	437:12	0:0	6	if
water	437:15	0:0	6	(
water	437:16	0:0	6	stream_index
op	437:29	0:0	6	>=
water	437:32	0:0	6	(
water	437:33	0:0	6	unsigned
water	437:41	0:0	6	)
water	437:42	0:0	6	s
op	437:43	0:0	6	->
water	437:45	0:0	6	nb_streams
op	438:16	0:0	6	||
water	438:19	0:0	6	s
op	438:20	0:0	6	->
water	438:22	0:0	6	streams
op	438:29	0:0	6	[
water	438:30	0:0	6	stream_index
op	438:42	0:0	6	]
op	438:43	0:0	6	->
water	438:45	0:0	6	codec
op	438:50	0:0	6	->
water	438:52	0:0	6	extradata_size
op	439:16	0:0	6	||
water	439:19	0:0	6	s
op	439:20	0:0	6	->
water	439:22	0:0	6	streams
op	439:29	0:0	6	[
water	439:30	0:0	6	stream_index
op	439:42	0:0	6	]
op	439:43	0:0	6	->
water	439:45	0:0	6	codec
op	439:50	0:0	6	->
water	439:52	0:0	6	codec_tag
op	439:62	0:0	6	==
call	439:65	439:86	6	MKTAG
arg	439:71	439:74	7	'H'
water	439:71	0:0	8	'H'
arg	439:75	439:78	7	'2'
water	439:75	0:0	8	'2'
arg	439:79	439:82	7	'6'
water	439:79	0:0	8	'6'
arg	439:83	439:86	7	'4'
water	439:83	0:0	8	'4'
water	439:87	0:0	6	)
water	439:89	0:0	6	{
call	440:16	440:34	6	avio_skip
arg	440:26	440:28	7	pb
water	440:26	0:0	8	pb
arg	440:30	440:34	7	size
water	440:30	0:0	8	size
water	440:35	0:0	6	;
water	441:12	0:0	6	}
water	441:14	0:0	6	else
water	441:19	0:0	6	{
water	442:16	0:0	6	uint64_t
water	442:25	0:0	6	cur_pos
op	442:33	0:0	6	=
call	442:35	442:47	6	avio_tell
arg	442:45	442:47	7	pb
water	442:45	0:0	8	pb
water	442:48	0:0	6	;
water	443:16	0:0	6	if
water	443:19	0:0	6	(
water	443:20	0:0	6	cur_pos
op	443:28	0:0	6	<
water	443:30	0:0	6	list_end
water	443:38	0:0	6	)
water	444:20	0:0	6	size
op	444:25	0:0	6	=
call	444:27	444:57	6	FFMIN
arg	444:33	444:37	7	size
water	444:33	0:0	8	size
arg	444:39	444:57	7	list_end-cur_pos
water	444:39	0:0	8	list_end
op	444:48	0:0	8	-
water	444:50	0:0	8	cur_pos
water	444:58	0:0	6	;
water	445:16	0:0	6	st
op	445:19	0:0	6	=
water	445:21	0:0	6	s
op	445:22	0:0	6	->
water	445:24	0:0	6	streams
op	445:31	0:0	6	[
water	445:32	0:0	6	stream_index
op	445:44	0:0	6	]
water	445:45	0:0	6	;
water	447:16	0:0	6	if
water	447:19	0:0	6	(
water	447:20	0:0	6	size
op	447:24	0:0	6	<
water	447:25	0:0	6	(
water	447:26	0:0	6	1
op	447:27	0:0	6	<<
water	447:29	0:0	6	30
water	447:31	0:0	6	)
water	447:32	0:0	6	)
water	447:34	0:0	6	{
water	448:20	0:0	6	if
water	448:23	0:0	6	(
call	448:24	448:60	6	ff_get_extradata
arg	448:41	448:50	7	st->codec
water	448:41	0:0	8	st
op	448:43	0:0	8	->
water	448:45	0:0	8	codec
arg	448:52	448:54	7	pb
water	448:52	0:0	8	pb
arg	448:56	448:60	7	size
water	448:56	0:0	8	size
op	448:62	0:0	6	<
water	448:64	0:0	6	0
water	448:65	0:0	6	)
water	449:24	0:0	6	return
call	449:31	449:45	6	AVERROR
arg	449:39	449:45	7	ENOMEM
water	449:39	0:0	8	ENOMEM
water	449:46	0:0	6	;
water	450:16	0:0	6	}
water	452:16	0:0	6	if
water	452:19	0:0	6	(
water	452:20	0:0	6	st
op	452:22	0:0	6	->
water	452:24	0:0	6	codec
op	452:29	0:0	6	->
water	452:31	0:0	6	extradata_size
op	452:46	0:0	6	&
water	452:48	0:0	6	1
water	452:49	0:0	6	)
call	453:20	453:30	6	avio_r8
arg	453:28	453:30	7	pb
water	453:28	0:0	8	pb
water	453:31	0:0	6	;
water	455:16	0:0	6	ret
op	455:20	0:0	6	=
call	455:22	455:52	6	avi_extract_stream_metadata
arg	455:50	455:52	7	st
water	455:50	0:0	8	st
water	455:53	0:0	6	;
water	456:16	0:0	6	if
water	456:19	0:0	6	(
water	456:20	0:0	6	ret
op	456:24	0:0	6	<
water	456:26	0:0	6	0
water	456:27	0:0	6	)
water	456:29	0:0	6	{
call	457:20	457:96	6	av_log
arg	457:27	457:28	7	s
water	457:27	0:0	8	s
arg	457:30	457:44	7	AV_LOG_WARNING
water	457:30	0:0	8	AV_LOG_WARNING
arg	457:46	457:96	7	"could not decoding EXIF data in stream header.\n"
water	457:46	0:0	8	"could not decoding EXIF data in stream header.\n"
water	457:97	0:0	6	;
water	458:16	0:0	6	}
water	459:12	0:0	6	}
water	460:12	0:0	6	break
water	460:17	0:0	6	;
water	461:8	0:0	6	case
call	461:13	461:37	6	MKTAG
arg	461:19	461:22	7	'i'
water	461:19	0:0	8	'i'
arg	461:24	461:27	7	'n'
water	461:24	0:0	8	'n'
arg	461:29	461:32	7	'd'
water	461:29	0:0	8	'd'
arg	461:34	461:37	7	'x'
water	461:34	0:0	8	'x'
water	461:38	0:0	6	:
water	462:12	0:0	6	i
op	462:14	0:0	6	=
call	462:16	462:28	6	avio_tell
arg	462:26	462:28	7	pb
water	462:26	0:0	8	pb
water	462:29	0:0	6	;
if	463:12	467:25	6	(pb -> seekable && ! ( s -> flags & AVFMT_FLAG_IGNIDX ) && avi -> use_odml &&read_braindead_odml_indx (s ,0 ) < 0 && ( s -> error_recognition & AV_EF_EXPLODE ))
cond	463:16	466:53	7	pb -> seekable && ! ( s -> flags & AVFMT_FLAG_IGNIDX ) && avi -> use_odml &&read_braindead_odml_indx (s ,0 ) < 0 && ( s -> error_recognition & AV_EF_EXPLODE )
water	463:16	0:0	8	pb
op	463:18	0:0	8	->
water	463:20	0:0	8	seekable
op	463:29	0:0	8	&&
op	463:32	0:0	8	!
water	463:33	0:0	8	(
water	463:34	0:0	8	s
op	463:35	0:0	8	->
water	463:37	0:0	8	flags
op	463:43	0:0	8	&
water	463:45	0:0	8	AVFMT_FLAG_IGNIDX
water	463:62	0:0	8	)
op	463:64	0:0	8	&&
water	464:16	0:0	8	avi
op	464:19	0:0	8	->
water	464:21	0:0	8	use_odml
op	464:30	0:0	8	&&
call	465:16	465:45	8	read_braindead_odml_indx
arg	465:41	465:42	9	s
water	465:41	0:0	10	s
arg	465:44	465:45	9	0
water	465:44	0:0	10	0
op	465:47	0:0	8	<
water	465:49	0:0	8	0
op	465:51	0:0	8	&&
water	466:16	0:0	8	(
water	466:17	0:0	8	s
op	466:18	0:0	8	->
water	466:20	0:0	8	error_recognition
op	466:38	0:0	8	&
water	466:40	0:0	8	AV_EF_EXPLODE
water	466:53	0:0	8	)
stmts	467:16	467:25	7	
goto	467:16	467:25	8	fail
water	467:21	0:0	9	fail
call	468:12	468:44	6	avio_seek
arg	468:22	468:24	7	pb
water	468:22	0:0	8	pb
arg	468:26	468:34	7	i+size
water	468:26	0:0	8	i
op	468:28	0:0	8	+
water	468:30	0:0	8	size
arg	468:36	468:44	7	SEEK_SET
water	468:36	0:0	8	SEEK_SET
water	468:45	0:0	6	;
break	469:12	469:17	6	
water	470:8	0:0	6	case
call	470:13	470:37	6	MKTAG
arg	470:19	470:22	7	'v'
water	470:19	0:0	8	'v'
arg	470:24	470:27	7	'p'
water	470:24	0:0	8	'p'
arg	470:29	470:32	7	'r'
water	470:29	0:0	8	'r'
arg	470:34	470:37	7	'p'
water	470:34	0:0	8	'p'
water	470:38	0:0	6	:
water	471:12	0:0	6	if
water	471:15	0:0	6	(
water	471:16	0:0	6	stream_index
op	471:29	0:0	6	<
water	471:31	0:0	6	(
water	471:32	0:0	6	unsigned
water	471:40	0:0	6	)
water	471:41	0:0	6	s
op	471:42	0:0	6	->
water	471:44	0:0	6	nb_streams
op	471:55	0:0	6	&&
water	471:58	0:0	6	size
op	471:63	0:0	6	>
water	471:65	0:0	6	9
op	471:67	0:0	6	*
water	471:69	0:0	6	4
water	471:70	0:0	6	)
water	471:72	0:0	6	{
water	472:16	0:0	6	AVRational
water	472:27	0:0	6	active
water	472:33	0:0	6	,
water	472:35	0:0	6	active_aspect
water	472:48	0:0	6	;
water	474:16	0:0	6	st
op	474:19	0:0	6	=
water	474:21	0:0	6	s
op	474:22	0:0	6	->
water	474:24	0:0	6	streams
op	474:31	0:0	6	[
water	474:32	0:0	6	stream_index
op	474:44	0:0	6	]
water	474:45	0:0	6	;
call	475:16	475:28	6	avio_rl32
arg	475:26	475:28	7	pb
water	475:26	0:0	8	pb
water	475:29	0:0	6	;
call	476:16	476:28	6	avio_rl32
arg	476:26	476:28	7	pb
water	476:26	0:0	8	pb
water	476:29	0:0	6	;
call	477:16	477:28	6	avio_rl32
arg	477:26	477:28	7	pb
water	477:26	0:0	8	pb
water	477:29	0:0	6	;
call	478:16	478:28	6	avio_rl32
arg	478:26	478:28	7	pb
water	478:26	0:0	8	pb
water	478:29	0:0	6	;
call	479:16	479:28	6	avio_rl32
arg	479:26	479:28	7	pb
water	479:26	0:0	8	pb
water	479:29	0:0	6	;
water	481:16	0:0	6	active_aspect
op	481:29	0:0	6	.
water	481:30	0:0	6	den
op	481:34	0:0	6	=
call	481:36	481:48	6	avio_rl16
arg	481:46	481:48	7	pb
water	481:46	0:0	8	pb
water	481:49	0:0	6	;
water	482:16	0:0	6	active_aspect
op	482:29	0:0	6	.
water	482:30	0:0	6	num
op	482:34	0:0	6	=
call	482:36	482:48	6	avio_rl16
arg	482:46	482:48	7	pb
water	482:46	0:0	8	pb
water	482:49	0:0	6	;
water	483:16	0:0	6	active
op	483:22	0:0	6	.
water	483:23	0:0	6	num
op	483:34	0:0	6	=
call	483:36	483:48	6	avio_rl32
arg	483:46	483:48	7	pb
water	483:46	0:0	8	pb
water	483:49	0:0	6	;
water	484:16	0:0	6	active
op	484:22	0:0	6	.
water	484:23	0:0	6	den
op	484:34	0:0	6	=
call	484:36	484:48	6	avio_rl32
arg	484:46	484:48	7	pb
water	484:46	0:0	8	pb
water	484:49	0:0	6	;
call	485:16	485:28	6	avio_rl32
arg	485:26	485:28	7	pb
water	485:26	0:0	8	pb
water	485:29	0:0	6	;
water	487:16	0:0	6	if
water	487:19	0:0	6	(
water	487:20	0:0	6	active_aspect
op	487:33	0:0	6	.
water	487:34	0:0	6	num
op	487:38	0:0	6	&&
water	487:41	0:0	6	active_aspect
op	487:54	0:0	6	.
water	487:55	0:0	6	den
op	487:59	0:0	6	&&
water	488:20	0:0	6	active
op	488:26	0:0	6	.
water	488:27	0:0	6	num
op	488:31	0:0	6	&&
water	488:34	0:0	6	active
op	488:40	0:0	6	.
water	488:41	0:0	6	den
water	488:44	0:0	6	)
water	488:46	0:0	6	{
water	489:20	0:0	6	st
op	489:22	0:0	6	->
water	489:24	0:0	6	sample_aspect_ratio
op	489:44	0:0	6	=
call	489:46	489:76	6	av_div_q
arg	489:55	489:68	7	active_aspect
water	489:55	0:0	8	active_aspect
arg	489:70	489:76	7	active
water	489:70	0:0	8	active
water	489:77	0:0	6	;
call	490:20	492:50	6	av_log
arg	490:27	490:28	7	s
water	490:27	0:0	8	s
arg	490:30	490:42	7	AV_LOG_TRACE
water	490:30	0:0	8	AV_LOG_TRACE
arg	490:44	490:64	7	"vprp %d/%d %d/%d\n"
water	490:44	0:0	8	"vprp %d/%d %d/%d\n"
arg	491:28	491:45	7	active_aspect.num
water	491:28	0:0	8	active_aspect
op	491:41	0:0	8	.
water	491:42	0:0	8	num
arg	491:47	491:64	7	active_aspect.den
water	491:47	0:0	8	active_aspect
op	491:60	0:0	8	.
water	491:61	0:0	8	den
arg	492:28	492:38	7	active.num
water	492:28	0:0	8	active
op	492:34	0:0	8	.
water	492:35	0:0	8	num
arg	492:40	492:50	7	active.den
water	492:40	0:0	8	active
op	492:46	0:0	8	.
water	492:47	0:0	8	den
water	492:51	0:0	6	;
water	493:16	0:0	6	}
water	494:16	0:0	6	size
op	494:21	0:0	6	-=
water	494:24	0:0	6	9
op	494:26	0:0	6	*
water	494:28	0:0	6	4
water	494:29	0:0	6	;
water	495:12	0:0	6	}
call	496:12	496:30	6	avio_skip
arg	496:22	496:24	7	pb
water	496:22	0:0	8	pb
arg	496:26	496:30	7	size
water	496:26	0:0	8	size
water	496:31	0:0	6	;
break	497:12	497:17	6	
water	498:8	0:0	6	case
call	498:13	498:37	6	MKTAG
arg	498:19	498:22	7	's'
water	498:19	0:0	8	's'
arg	498:24	498:27	7	't'
water	498:24	0:0	8	't'
arg	498:29	498:32	7	'r'
water	498:29	0:0	8	'r'
arg	498:34	498:37	7	'n'
water	498:34	0:0	8	'n'
water	498:38	0:0	6	:
water	499:12	0:0	6	if
water	499:15	0:0	6	(
water	499:16	0:0	6	s
op	499:17	0:0	6	->
water	499:19	0:0	6	nb_streams
water	499:29	0:0	6	)
water	499:31	0:0	6	{
water	500:16	0:0	6	ret
op	500:20	0:0	6	=
call	500:22	500:78	6	avi_read_tag
arg	500:35	500:36	7	s
water	500:35	0:0	8	s
arg	500:38	500:67	7	s->streams[s->nb_streams-1]
water	500:38	0:0	8	s
op	500:39	0:0	8	->
water	500:41	0:0	8	streams
op	500:48	0:0	8	[
water	500:49	0:0	8	s
op	500:50	0:0	8	->
water	500:52	0:0	8	nb_streams
op	500:63	0:0	8	-
water	500:65	0:0	8	1
op	500:66	0:0	8	]
arg	500:69	500:72	7	tag
water	500:69	0:0	8	tag
arg	500:74	500:78	7	size
water	500:74	0:0	8	size
water	500:79	0:0	6	;
water	501:16	0:0	6	if
water	501:19	0:0	6	(
water	501:20	0:0	6	ret
op	501:24	0:0	6	<
water	501:26	0:0	6	0
water	501:27	0:0	6	)
water	502:20	0:0	6	return
water	502:27	0:0	6	ret
water	502:30	0:0	6	;
water	503:16	0:0	6	break
water	503:21	0:0	6	;
water	504:12	0:0	6	}
water	505:8	0:0	6	default
water	505:15	0:0	6	:
water	506:12	0:0	6	if
water	506:15	0:0	6	(
water	506:16	0:0	6	size
op	506:21	0:0	6	>
water	506:23	0:0	6	1000000
water	506:30	0:0	6	)
water	506:32	0:0	6	{
call	507:16	509:71	6	av_log
arg	507:23	507:24	7	s
water	507:23	0:0	8	s
arg	507:26	507:38	7	AV_LOG_ERROR
water	507:26	0:0	8	AV_LOG_ERROR
arg	508:23	509:71	7	"Something went wrong during header parsing, ""I will ignore it and try to continue anyway.\n"
water	508:23	0:0	8	"Something went wrong during header parsing, "
water	509:23	0:0	8	"I will ignore it and try to continue anyway.\n"
water	509:72	0:0	6	;
water	510:16	0:0	6	if
water	510:19	0:0	6	(
water	510:20	0:0	6	s
op	510:21	0:0	6	->
water	510:23	0:0	6	error_recognition
op	510:41	0:0	6	&
water	510:43	0:0	6	AV_EF_EXPLODE
water	510:56	0:0	6	)
water	511:20	0:0	6	goto
water	511:25	0:0	6	fail
water	511:29	0:0	6	;
water	512:16	0:0	6	avi
op	512:19	0:0	6	->
water	512:21	0:0	6	movi_list
op	512:31	0:0	6	=
call	512:33	512:45	6	avio_tell
arg	512:43	512:45	7	pb
water	512:43	0:0	8	pb
op	512:47	0:0	6	-
water	512:49	0:0	6	4
water	512:50	0:0	6	;
water	513:16	0:0	6	avi
op	513:19	0:0	6	->
water	513:21	0:0	6	movi_end
op	513:31	0:0	6	=
water	513:33	0:0	6	avi
op	513:36	0:0	6	->
water	513:38	0:0	6	fsize
water	513:43	0:0	6	;
water	514:16	0:0	6	goto
water	514:21	0:0	6	end_of_header
water	514:34	0:0	6	;
water	515:12	0:0	6	}
water	517:12	0:0	6	size
op	517:17	0:0	6	+=
water	517:20	0:0	6	(
water	517:21	0:0	6	size
op	517:26	0:0	6	&
water	517:28	0:0	6	1
water	517:29	0:0	6	)
water	517:30	0:0	6	;
call	518:12	518:30	6	avio_skip
arg	518:22	518:24	7	pb
water	518:22	0:0	8	pb
arg	518:26	518:30	7	size
water	518:26	0:0	8	size
water	518:31	0:0	6	;
break	519:12	519:17	6	
water	520:8	0:0	6	}
water	521:4	0:0	4	}
label	523:0	523:13	2	end_of_header :
if	525:4	529:4	2	(stream_index != s -> nb_streams - 1)
cond	525:8	525:40	3	stream_index != s -> nb_streams - 1
water	525:8	0:0	4	stream_index
op	525:21	0:0	4	!=
water	525:24	0:0	4	s
op	525:25	0:0	4	->
water	525:27	0:0	4	nb_streams
op	525:38	0:0	4	-
water	525:40	0:0	4	1
stmts	525:43	529:4	3	
water	525:43	0:0	4	{
label	527:0	527:4	4	fail :
return	528:8	528:34	4	AVERROR_INVALIDDATA
water	528:15	0:0	5	AVERROR_INVALIDDATA
water	529:4	0:0	4	}
if	531:4	532:25	2	(! avi -> index_loaded && pb -> seekable)
cond	531:8	531:34	3	! avi -> index_loaded && pb -> seekable
op	531:8	0:0	4	!
water	531:9	0:0	4	avi
op	531:12	0:0	4	->
water	531:14	0:0	4	index_loaded
op	531:27	0:0	4	&&
water	531:30	0:0	4	pb
op	531:32	0:0	4	->
water	531:34	0:0	4	seekable
stmts	532:8	532:25	3	
call	532:8	532:24	4	avi_load_index
arg	532:23	532:24	5	s
water	532:23	0:0	6	s
water	532:25	0:0	4	;
call	533:4	533:23	2	calculate_bitrate
arg	533:22	533:23	3	s
water	533:22	0:0	4	s
water	533:24	0:0	2	;
water	534:4	0:0	2	avi
op	534:7	0:0	2	->
water	534:9	0:0	2	index_loaded
op	534:25	0:0	2	|=
water	534:28	0:0	2	1
water	534:29	0:0	2	;
if	536:4	537:18	2	(( ret =guess_ni_flag (s ) ) < 0)
cond	536:8	536:35	3	( ret =guess_ni_flag (s ) ) < 0
water	536:8	0:0	4	(
water	536:9	0:0	4	ret
op	536:13	0:0	4	=
call	536:15	536:30	4	guess_ni_flag
arg	536:29	536:30	5	s
water	536:29	0:0	6	s
water	536:31	0:0	4	)
op	536:33	0:0	4	<
water	536:35	0:0	4	0
stmts	537:8	537:18	3	
return	537:8	537:18	4	ret
water	537:15	0:0	5	ret
water	539:4	0:0	2	avi
op	539:7	0:0	2	->
water	539:9	0:0	2	non_interleaved
op	539:25	0:0	2	|=
water	539:28	0:0	2	ret
op	539:32	0:0	2	|
water	539:34	0:0	2	(
water	539:35	0:0	2	s
op	539:36	0:0	2	->
water	539:38	0:0	2	flags
op	539:44	0:0	2	&
water	539:46	0:0	2	AVFMT_FLAG_SORT_DTS
water	539:65	0:0	2	)
water	539:66	0:0	2	;
water	541:4	0:0	2	dict_entry
op	541:15	0:0	2	=
call	541:17	541:57	2	av_dict_get
arg	541:29	541:40	3	s->metadata
water	541:29	0:0	4	s
op	541:30	0:0	4	->
water	541:32	0:0	4	metadata
arg	541:42	541:48	3	"ISFT"
water	541:42	0:0	4	"ISFT"
arg	541:50	541:54	3	NULL
water	541:50	0:0	4	NULL
arg	541:56	541:57	3	0
water	541:56	0:0	4	0
water	541:58	0:0	2	;
if	542:4	548:8	2	(dict_entry && !strcmp (dict_entry -> value ,"PotEncoder" ))
cond	542:8	542:61	3	dict_entry && !strcmp (dict_entry -> value ,"PotEncoder" )
water	542:8	0:0	4	dict_entry
op	542:19	0:0	4	&&
op	542:22	0:0	4	!
call	542:23	542:61	4	strcmp
arg	542:30	542:47	5	dict_entry->value
water	542:30	0:0	6	dict_entry
op	542:40	0:0	6	->
water	542:42	0:0	6	value
arg	542:49	542:61	5	"PotEncoder"
water	542:49	0:0	6	"PotEncoder"
stmts	543:8	548:8	3	
for	543:8	548:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	543:13	543:18	5	i = 0 ;
water	543:13	0:0	6	i
op	543:15	0:0	6	=
water	543:17	0:0	6	0
water	543:18	0:0	6	;
cond	543:20	543:27	5	i < s -> nb_streams
water	543:20	0:0	6	i
op	543:22	0:0	6	<
water	543:24	0:0	6	s
op	543:25	0:0	6	->
water	543:27	0:0	6	nb_streams
forexpr	543:39	543:40	5	i ++
water	543:39	0:0	6	i
op	543:40	0:0	6	++
stmts	543:44	548:8	5	
water	543:44	0:0	6	{
decl	544:12	544:40	6	AVStream	*st
op	544:25	0:0	6	=
water	544:27	0:0	6	s
op	544:28	0:0	6	->
water	544:30	0:0	6	streams
op	544:37	0:0	6	[
water	544:38	0:0	6	i
op	544:39	0:0	6	]
if	545:12	547:54	6	(st -> codec -> codec_id == AV_CODEC_ID_MPEG1VIDEO || st -> codec -> codec_id == AV_CODEC_ID_MPEG2VIDEO)
cond	545:19	546:42	7	st -> codec -> codec_id == AV_CODEC_ID_MPEG1VIDEO || st -> codec -> codec_id == AV_CODEC_ID_MPEG2VIDEO
water	545:19	0:0	8	st
op	545:21	0:0	8	->
water	545:23	0:0	8	codec
op	545:28	0:0	8	->
water	545:30	0:0	8	codec_id
op	545:39	0:0	8	==
water	545:42	0:0	8	AV_CODEC_ID_MPEG1VIDEO
op	546:16	0:0	8	||
water	546:19	0:0	8	st
op	546:21	0:0	8	->
water	546:23	0:0	8	codec
op	546:28	0:0	8	->
water	546:30	0:0	8	codec_id
op	546:39	0:0	8	==
water	546:42	0:0	8	AV_CODEC_ID_MPEG2VIDEO
stmts	547:16	547:54	7	
water	547:16	0:0	8	st
op	547:18	0:0	8	->
water	547:20	0:0	8	need_parsing
op	547:33	0:0	8	=
water	547:35	0:0	8	AVSTREAM_PARSE_FULL
water	547:54	0:0	8	;
water	548:8	0:0	6	}
for	550:4	554:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	550:9	550:14	3	i = 0 ;
water	550:9	0:0	4	i
op	550:11	0:0	4	=
water	550:13	0:0	4	0
water	550:14	0:0	4	;
cond	550:16	550:23	3	i < s -> nb_streams
water	550:16	0:0	4	i
op	550:18	0:0	4	<
water	550:20	0:0	4	s
op	550:21	0:0	4	->
water	550:23	0:0	4	nb_streams
forexpr	550:35	550:36	3	i ++
water	550:35	0:0	4	i
op	550:36	0:0	4	++
stmts	550:40	554:4	3	
water	550:40	0:0	4	{
decl	551:8	551:36	4	AVStream	*st
op	551:21	0:0	4	=
water	551:23	0:0	4	s
op	551:24	0:0	4	->
water	551:26	0:0	4	streams
op	551:33	0:0	4	[
water	551:34	0:0	4	i
op	551:35	0:0	4	]
if	552:8	553:17	4	(st -> nb_index_entries)
cond	552:12	552:16	5	st -> nb_index_entries
water	552:12	0:0	6	st
op	552:14	0:0	6	->
water	552:16	0:0	6	nb_index_entries
stmts	553:12	553:17	5	
break	553:12	553:17	6	
water	554:4	0:0	4	}
if	557:4	558:32	2	(avi -> dv_demux)
cond	557:8	557:13	3	avi -> dv_demux
water	557:8	0:0	4	avi
op	557:11	0:0	4	->
water	557:13	0:0	4	dv_demux
stmts	558:8	558:32	3	
water	558:8	0:0	4	avi
op	558:11	0:0	4	->
water	558:13	0:0	4	non_interleaved
op	558:29	0:0	4	=
water	558:31	0:0	4	0
water	558:32	0:0	4	;
if	559:4	563:4	2	(i == s -> nb_streams && avi -> non_interleaved)
cond	559:8	559:35	3	i == s -> nb_streams && avi -> non_interleaved
water	559:8	0:0	4	i
op	559:10	0:0	4	==
water	559:13	0:0	4	s
op	559:14	0:0	4	->
water	559:16	0:0	4	nb_streams
op	559:27	0:0	4	&&
water	559:30	0:0	4	avi
op	559:33	0:0	4	->
water	559:35	0:0	4	non_interleaved
stmts	559:52	563:4	3	
water	559:52	0:0	4	{
call	560:8	561:78	4	av_log
arg	560:15	560:16	5	s
water	560:15	0:0	6	s
arg	560:18	560:32	5	AV_LOG_WARNING
water	560:18	0:0	6	AV_LOG_WARNING
arg	561:15	561:78	5	"Non-interleaved AVI without index, switching to interleaved\n"
water	561:15	0:0	6	"Non-interleaved AVI without index, switching to interleaved\n"
water	561:79	0:0	4	;
water	562:8	0:0	4	avi
op	562:11	0:0	4	->
water	562:13	0:0	4	non_interleaved
op	562:29	0:0	4	=
water	562:31	0:0	4	0
water	562:32	0:0	4	;
water	563:4	0:0	4	}
if	565:4	568:4	2	(avi -> non_interleaved)
cond	565:8	565:13	3	avi -> non_interleaved
water	565:8	0:0	4	avi
op	565:11	0:0	4	->
water	565:13	0:0	4	non_interleaved
stmts	565:30	568:4	3	
water	565:30	0:0	4	{
call	566:8	566:54	4	av_log
arg	566:15	566:16	5	s
water	566:15	0:0	6	s
arg	566:18	566:29	5	AV_LOG_INFO
water	566:18	0:0	6	AV_LOG_INFO
arg	566:31	566:54	5	"non-interleaved AVI\n"
water	566:31	0:0	6	"non-interleaved AVI\n"
water	566:55	0:0	4	;
call	567:8	567:21	4	clean_index
arg	567:20	567:21	5	s
water	567:20	0:0	6	s
water	567:22	0:0	4	;
water	568:4	0:0	4	}
call	570:4	570:51	2	ff_metadata_conv_ctx
arg	570:25	570:26	3	s
water	570:25	0:0	4	s
arg	570:28	570:32	3	NULL
water	570:28	0:0	4	NULL
arg	570:34	570:51	3	avi_metadata_conv
water	570:34	0:0	4	avi_metadata_conv
water	570:52	0:0	2	;
call	571:4	571:51	2	ff_metadata_conv_ctx
arg	571:25	571:26	3	s
water	571:25	0:0	4	s
arg	571:28	571:32	3	NULL
water	571:28	0:0	4	NULL
arg	571:34	571:51	3	ff_riff_info_conv
water	571:34	0:0	4	ff_riff_info_conv
water	571:52	0:0	2	;
return	573:4	573:12	2	0
water	573:11	0:0	3	0
