func	1:0	207:0	0	static int	raw_decode
params	1:21	0:0	1	
param	1:22	1:43	2	AVCodecContext *	avctx
param	1:45	1:55	2	void *	data
param	1:57	1:71	2	int *	got_frame
param	2:22	2:37	2	AVPacket *	avpkt
stmnts	0:0	206:19	1	
decl	4:4	4:72	2	const AVPixFmtDescriptor	*desc
op	4:35	0:0	2	=
call	4:37	4:71	3	av_pix_fmt_desc_get
arg	4:57	4:71	4	avctx->pix_fmt
water	4:57	0:0	5	avctx
op	4:62	0:0	5	->
water	4:64	0:0	5	pix_fmt
decl	5:4	5:53	2	RawVideoContext	*context
op	5:35	0:0	2	=
water	5:37	0:0	2	avctx
op	5:42	0:0	2	->
water	5:44	0:0	2	priv_data
decl	6:4	6:48	2	const uint8_t	*buf
op	6:35	0:0	2	=
water	6:37	0:0	2	avpkt
op	6:42	0:0	2	->
water	6:44	0:0	2	data
decl	7:4	7:48	2	int	buf_size
op	7:35	0:0	2	=
water	7:37	0:0	2	avpkt
op	7:42	0:0	2	->
water	7:44	0:0	2	size
decl	8:4	8:38	2	int	linesize_align
op	8:35	0:0	2	=
water	8:37	0:0	2	4
decl	9:4	9:16	2	int	res
water	9:11	0:0	2	,
decl	9:4	9:16	2	int	len
decl	10:4	10:17	2	int	need_copy
decl	12:4	12:29	2	AVFrame	*frame
op	12:23	0:0	2	=
water	12:25	0:0	2	data
decl	13:4	13:29	2	AVPicture	*picture
op	13:23	0:0	2	=
water	13:25	0:0	2	data
if	15:4	22:4	2	(( avctx -> bits_per_coded_sample == 4 || avctx -> bits_per_coded_sample == 2 ) && avctx -> pix_fmt == AV_PIX_FMT_PAL8 && ( ! avctx -> codec_tag || avctx -> codec_tag ==MKTAG ('r' ,'a' ,'w' ,' ' ) ))
cond	15:8	17:71	3	( avctx -> bits_per_coded_sample == 4 || avctx -> bits_per_coded_sample == 2 ) && avctx -> pix_fmt == AV_PIX_FMT_PAL8 && ( ! avctx -> codec_tag || avctx -> codec_tag ==MKTAG ('r' ,'a' ,'w' ,' ' ) )
water	15:8	0:0	4	(
water	15:9	0:0	4	avctx
op	15:14	0:0	4	->
water	15:16	0:0	4	bits_per_coded_sample
op	15:38	0:0	4	==
water	15:41	0:0	4	4
op	15:43	0:0	4	||
water	15:46	0:0	4	avctx
op	15:51	0:0	4	->
water	15:53	0:0	4	bits_per_coded_sample
op	15:75	0:0	4	==
water	15:78	0:0	4	2
water	15:79	0:0	4	)
op	15:81	0:0	4	&&
water	16:8	0:0	4	avctx
op	16:13	0:0	4	->
water	16:15	0:0	4	pix_fmt
op	16:23	0:0	4	==
water	16:26	0:0	4	AV_PIX_FMT_PAL8
op	16:42	0:0	4	&&
water	17:7	0:0	4	(
op	17:8	0:0	4	!
water	17:9	0:0	4	avctx
op	17:14	0:0	4	->
water	17:16	0:0	4	codec_tag
op	17:26	0:0	4	||
water	17:29	0:0	4	avctx
op	17:34	0:0	4	->
water	17:36	0:0	4	codec_tag
op	17:46	0:0	4	==
call	17:49	17:70	4	MKTAG
arg	17:55	17:58	5	'r'
water	17:55	0:0	6	'r'
arg	17:59	17:62	5	'a'
water	17:59	0:0	6	'a'
arg	17:63	17:66	5	'w'
water	17:63	0:0	6	'w'
arg	17:67	17:70	5	' '
water	17:67	0:0	6	' '
water	17:71	0:0	4	)
stmts	17:74	22:4	3	
water	17:74	0:0	4	{
water	18:8	0:0	4	context
op	18:15	0:0	4	->
water	18:17	0:0	4	is_2_4_bpp
op	18:28	0:0	4	=
water	18:30	0:0	4	1
water	18:31	0:0	4	;
water	19:8	0:0	4	context
op	19:15	0:0	4	->
water	19:17	0:0	4	frame_size
op	19:28	0:0	4	=
call	19:30	21:62	4	avpicture_get_size
arg	19:49	19:63	5	avctx->pix_fmt
water	19:49	0:0	6	avctx
op	19:54	0:0	6	->
water	19:56	0:0	6	pix_fmt
arg	20:49	20:74	5	FFALIGN(avctx->width,16)
call	20:49	20:73	6	FFALIGN
arg	20:57	20:69	7	avctx->width
water	20:57	0:0	8	avctx
op	20:62	0:0	8	->
water	20:64	0:0	8	width
arg	20:71	20:73	7	16
water	20:71	0:0	8	16
arg	21:49	21:62	5	avctx->height
water	21:49	0:0	6	avctx
op	21:54	0:0	6	->
water	21:56	0:0	6	height
water	21:63	0:0	4	;
water	22:4	0:0	4	}
else	22:6	26:4	2
stmts	22:11	26:4	3	
water	22:11	0:0	4	{
water	23:8	0:0	4	context
op	23:15	0:0	4	->
water	23:17	0:0	4	is_lt_16bpp
op	23:29	0:0	4	=
call	23:31	23:57	4	av_get_bits_per_pixel
arg	23:53	23:57	5	desc
water	23:53	0:0	6	desc
op	23:59	0:0	4	==
water	23:62	0:0	4	16
op	23:65	0:0	4	&&
water	23:68	0:0	4	avctx
op	23:73	0:0	4	->
water	23:75	0:0	4	bits_per_coded_sample
op	23:97	0:0	4	&&
water	23:100	0:0	4	avctx
op	23:105	0:0	4	->
water	23:107	0:0	4	bits_per_coded_sample
op	23:129	0:0	4	<
water	23:131	0:0	4	16
water	23:133	0:0	4	;
water	24:8	0:0	4	context
op	24:15	0:0	4	->
water	24:17	0:0	4	frame_size
op	24:28	0:0	4	=
call	24:30	25:62	4	avpicture_get_size
arg	24:49	24:63	5	avctx->pix_fmt
water	24:49	0:0	6	avctx
op	24:54	0:0	6	->
water	24:56	0:0	6	pix_fmt
arg	24:65	24:77	5	avctx->width
water	24:65	0:0	6	avctx
op	24:70	0:0	6	->
water	24:72	0:0	6	width
arg	25:49	25:62	5	avctx->height
water	25:49	0:0	6	avctx
op	25:54	0:0	6	->
water	25:56	0:0	6	height
water	25:63	0:0	4	;
water	26:4	0:0	4	}
if	27:4	28:34	2	(context -> frame_size < 0)
cond	27:8	27:30	3	context -> frame_size < 0
water	27:8	0:0	4	context
op	27:15	0:0	4	->
water	27:17	0:0	4	frame_size
op	27:28	0:0	4	<
water	27:30	0:0	4	0
stmts	28:8	28:34	3	
return	28:8	28:34	4	context->frame_size
water	28:15	0:0	5	context
op	28:22	0:0	5	->
water	28:24	0:0	5	frame_size
water	30:4	0:0	2	need_copy
op	30:14	0:0	2	=
op	30:16	0:0	2	!
water	30:17	0:0	2	avpkt
op	30:22	0:0	2	->
water	30:24	0:0	2	buf
op	30:28	0:0	2	||
water	30:31	0:0	2	context
op	30:38	0:0	2	->
water	30:40	0:0	2	is_2_4_bpp
op	30:51	0:0	2	||
water	30:54	0:0	2	context
op	30:61	0:0	2	->
water	30:63	0:0	2	is_yuv2
op	30:71	0:0	2	||
water	30:74	0:0	2	context
op	30:81	0:0	2	->
water	30:83	0:0	2	is_lt_16bpp
water	30:94	0:0	2	;
water	32:4	0:0	2	frame
op	32:9	0:0	2	->
water	32:11	0:0	2	pict_type
op	32:28	0:0	2	=
water	32:30	0:0	2	AV_PICTURE_TYPE_I
water	32:47	0:0	2	;
water	33:4	0:0	2	frame
op	33:9	0:0	2	->
water	33:11	0:0	2	key_frame
op	33:28	0:0	2	=
water	33:30	0:0	2	1
water	33:31	0:0	2	;
water	35:4	0:0	2	res
op	35:8	0:0	2	=
call	35:10	35:44	2	ff_decode_frame_props
arg	35:32	35:37	3	avctx
water	35:32	0:0	4	avctx
arg	35:39	35:44	3	frame
water	35:39	0:0	4	frame
water	35:45	0:0	2	;
if	36:4	37:18	2	(res < 0)
cond	36:8	36:14	3	res < 0
water	36:8	0:0	4	res
op	36:12	0:0	4	<
water	36:14	0:0	4	0
stmts	37:8	37:18	3	
return	37:8	37:18	4	res
water	37:15	0:0	5	res
call	39:4	39:62	2	av_frame_set_pkt_pos
arg	39:30	39:35	3	frame
water	39:30	0:0	4	frame
arg	39:37	39:62	3	avctx->internal->pkt->pos
water	39:37	0:0	4	avctx
op	39:42	0:0	4	->
water	39:44	0:0	4	internal
op	39:52	0:0	4	->
water	39:54	0:0	4	pkt
op	39:57	0:0	4	->
water	39:59	0:0	4	pos
water	39:63	0:0	2	;
call	40:4	40:67	2	av_frame_set_pkt_duration
arg	40:30	40:35	3	frame
water	40:30	0:0	4	frame
arg	40:37	40:67	3	avctx->internal->pkt->duration
water	40:37	0:0	4	avctx
op	40:42	0:0	4	->
water	40:44	0:0	4	internal
op	40:52	0:0	4	->
water	40:54	0:0	4	pkt
op	40:57	0:0	4	->
water	40:59	0:0	4	duration
water	40:68	0:0	2	;
if	42:4	45:4	2	(context -> tff >= 0)
cond	42:8	42:24	3	context -> tff >= 0
water	42:8	0:0	4	context
op	42:15	0:0	4	->
water	42:17	0:0	4	tff
op	42:21	0:0	4	>=
water	42:24	0:0	4	0
stmts	42:27	45:4	3	
water	42:27	0:0	4	{
water	43:8	0:0	4	frame
op	43:13	0:0	4	->
water	43:15	0:0	4	interlaced_frame
op	43:32	0:0	4	=
water	43:34	0:0	4	1
water	43:35	0:0	4	;
water	44:8	0:0	4	frame
op	44:13	0:0	4	->
water	44:15	0:0	4	top_field_first
op	44:32	0:0	4	=
water	44:34	0:0	4	context
op	44:41	0:0	4	->
water	44:43	0:0	4	tff
water	44:46	0:0	4	;
water	45:4	0:0	4	}
if	47:4	48:18	2	(( res =av_image_check_size (avctx -> width ,avctx -> height ,0 ,avctx ) ) < 0)
cond	47:8	47:77	3	( res =av_image_check_size (avctx -> width ,avctx -> height ,0 ,avctx ) ) < 0
water	47:8	0:0	4	(
water	47:9	0:0	4	res
op	47:13	0:0	4	=
call	47:15	47:72	4	av_image_check_size
arg	47:35	47:47	5	avctx->width
water	47:35	0:0	6	avctx
op	47:40	0:0	6	->
water	47:42	0:0	6	width
arg	47:49	47:62	5	avctx->height
water	47:49	0:0	6	avctx
op	47:54	0:0	6	->
water	47:56	0:0	6	height
arg	47:64	47:65	5	0
water	47:64	0:0	6	0
arg	47:67	47:72	5	avctx
water	47:67	0:0	6	avctx
water	47:73	0:0	4	)
op	47:75	0:0	4	<
water	47:77	0:0	4	0
stmts	48:8	48:18	3	
return	48:8	48:18	4	res
water	48:15	0:0	5	res
if	50:4	51:77	2	(need_copy)
cond	50:8	50:8	3	need_copy
water	50:8	0:0	4	need_copy
stmts	51:8	51:77	3	
water	51:8	0:0	4	frame
op	51:13	0:0	4	->
water	51:15	0:0	4	buf
op	51:18	0:0	4	[
water	51:19	0:0	4	0
op	51:20	0:0	4	]
op	51:22	0:0	4	=
call	51:24	51:76	4	av_buffer_alloc
arg	51:40	51:76	5	FFMAX(context->frame_size,buf_size)
call	51:40	51:75	6	FFMAX
arg	51:46	51:65	7	context->frame_size
water	51:46	0:0	8	context
op	51:53	0:0	8	->
water	51:55	0:0	8	frame_size
arg	51:67	51:75	7	buf_size
water	51:67	0:0	8	buf_size
water	51:77	0:0	4	;
else	52:4	53:49	2
stmts	53:8	53:49	3	
water	53:8	0:0	4	frame
op	53:13	0:0	4	->
water	53:15	0:0	4	buf
op	53:18	0:0	4	[
water	53:19	0:0	4	0
op	53:20	0:0	4	]
op	53:22	0:0	4	=
call	53:24	53:48	4	av_buffer_ref
arg	53:38	53:48	5	avpkt->buf
water	53:38	0:0	6	avpkt
op	53:43	0:0	6	->
water	53:45	0:0	6	buf
water	53:49	0:0	4	;
if	54:4	55:30	2	(! frame -> buf [ 0 ])
cond	54:8	54:21	3	! frame -> buf [ 0 ]
op	54:8	0:0	4	!
water	54:9	0:0	4	frame
op	54:14	0:0	4	->
water	54:16	0:0	4	buf
op	54:19	0:0	4	[
water	54:20	0:0	4	0
op	54:21	0:0	4	]
stmts	55:8	55:30	3	
return	55:8	55:30	4	AVERROR(ENOMEM)
call	55:15	55:29	5	AVERROR
arg	55:23	55:29	6	ENOMEM
water	55:23	0:0	7	ENOMEM
if	58:4	79:4	2	(context -> is_2_4_bpp)
cond	58:8	58:17	3	context -> is_2_4_bpp
water	58:8	0:0	4	context
op	58:15	0:0	4	->
water	58:17	0:0	4	is_2_4_bpp
stmts	58:29	79:4	3	
water	58:29	0:0	4	{
decl	59:8	59:13	4	int	i
decl	60:8	60:42	4	uint8_t	*dst
op	60:21	0:0	4	=
water	60:23	0:0	4	frame
op	60:28	0:0	4	->
water	60:30	0:0	4	buf
op	60:33	0:0	4	[
water	60:34	0:0	4	0
op	60:35	0:0	4	]
op	60:36	0:0	4	->
water	60:38	0:0	4	data
water	61:8	0:0	4	buf_size
op	61:17	0:0	4	=
water	61:19	0:0	4	context
op	61:26	0:0	4	->
water	61:28	0:0	4	frame_size
op	61:39	0:0	4	-
water	61:41	0:0	4	AVPALETTE_SIZE
water	61:55	0:0	4	;
if	62:8	68:8	4	(avctx -> bits_per_coded_sample == 4)
cond	62:12	62:44	5	avctx -> bits_per_coded_sample == 4
water	62:12	0:0	6	avctx
op	62:17	0:0	6	->
water	62:19	0:0	6	bits_per_coded_sample
op	62:41	0:0	6	==
water	62:44	0:0	6	4
stmts	62:47	68:8	5	
water	62:47	0:0	6	{
for	63:12	66:12	6	(i = 0 ;2 * i + 1 < buf_size && i < avpkt -> size;i ++)
forinit	63:17	63:22	7	i = 0 ;
water	63:17	0:0	8	i
op	63:19	0:0	8	=
water	63:21	0:0	8	0
water	63:22	0:0	8	;
cond	63:24	63:57	7	2 * i + 1 < buf_size && i < avpkt -> size
water	63:24	0:0	8	2
op	63:26	0:0	8	*
water	63:28	0:0	8	i
op	63:30	0:0	8	+
water	63:32	0:0	8	1
op	63:34	0:0	8	<
water	63:36	0:0	8	buf_size
op	63:45	0:0	8	&&
water	63:48	0:0	8	i
op	63:49	0:0	8	<
water	63:50	0:0	8	avpkt
op	63:55	0:0	8	->
water	63:57	0:0	8	size
forexpr	63:63	63:64	7	i ++
water	63:63	0:0	8	i
op	63:64	0:0	8	++
stmts	63:68	66:12	7	
water	63:68	0:0	8	{
water	64:16	0:0	8	dst
op	64:19	0:0	8	[
water	64:20	0:0	8	2
op	64:22	0:0	8	*
water	64:24	0:0	8	i
op	64:26	0:0	8	+
water	64:28	0:0	8	0
op	64:29	0:0	8	]
op	64:31	0:0	8	=
water	64:33	0:0	8	buf
op	64:36	0:0	8	[
water	64:37	0:0	8	i
op	64:38	0:0	8	]
op	64:40	0:0	8	>>
water	64:43	0:0	8	4
water	64:44	0:0	8	;
water	65:16	0:0	8	dst
op	65:19	0:0	8	[
water	65:20	0:0	8	2
op	65:22	0:0	8	*
water	65:24	0:0	8	i
op	65:26	0:0	8	+
water	65:28	0:0	8	1
op	65:29	0:0	8	]
op	65:31	0:0	8	=
water	65:33	0:0	8	buf
op	65:36	0:0	8	[
water	65:37	0:0	8	i
op	65:38	0:0	8	]
op	65:40	0:0	8	&
water	65:42	0:0	8	15
water	65:44	0:0	8	;
water	66:12	0:0	8	}
water	67:12	0:0	6	linesize_align
op	67:27	0:0	6	=
water	67:29	0:0	6	8
water	67:30	0:0	6	;
water	68:8	0:0	6	}
else	68:10	77:8	4
stmts	68:15	77:8	5	
water	68:15	0:0	6	{
call	69:12	69:56	6	av_assert0
arg	69:23	69:56	7	avctx->bits_per_coded_sample==2
water	69:23	0:0	8	avctx
op	69:28	0:0	8	->
water	69:30	0:0	8	bits_per_coded_sample
op	69:52	0:0	8	==
water	69:55	0:0	8	2
water	69:57	0:0	6	;
for	70:12	75:12	6	(i = 0 ;4 * i + 3 < buf_size && i < avpkt -> size;i ++)
forinit	70:17	70:22	7	i = 0 ;
water	70:17	0:0	8	i
op	70:19	0:0	8	=
water	70:21	0:0	8	0
water	70:22	0:0	8	;
cond	70:24	70:57	7	4 * i + 3 < buf_size && i < avpkt -> size
water	70:24	0:0	8	4
op	70:26	0:0	8	*
water	70:28	0:0	8	i
op	70:30	0:0	8	+
water	70:32	0:0	8	3
op	70:34	0:0	8	<
water	70:36	0:0	8	buf_size
op	70:45	0:0	8	&&
water	70:48	0:0	8	i
op	70:49	0:0	8	<
water	70:50	0:0	8	avpkt
op	70:55	0:0	8	->
water	70:57	0:0	8	size
forexpr	70:63	70:64	7	i ++
water	70:63	0:0	8	i
op	70:64	0:0	8	++
stmts	70:68	75:12	7	
water	70:68	0:0	8	{
water	71:16	0:0	8	dst
op	71:19	0:0	8	[
water	71:20	0:0	8	4
op	71:22	0:0	8	*
water	71:24	0:0	8	i
op	71:26	0:0	8	+
water	71:28	0:0	8	0
op	71:29	0:0	8	]
op	71:31	0:0	8	=
water	71:33	0:0	8	buf
op	71:36	0:0	8	[
water	71:37	0:0	8	i
op	71:38	0:0	8	]
op	71:40	0:0	8	>>
water	71:43	0:0	8	6
water	71:44	0:0	8	;
water	72:16	0:0	8	dst
op	72:19	0:0	8	[
water	72:20	0:0	8	4
op	72:22	0:0	8	*
water	72:24	0:0	8	i
op	72:26	0:0	8	+
water	72:28	0:0	8	1
op	72:29	0:0	8	]
op	72:31	0:0	8	=
water	72:33	0:0	8	buf
op	72:36	0:0	8	[
water	72:37	0:0	8	i
op	72:38	0:0	8	]
op	72:40	0:0	8	>>
water	72:43	0:0	8	4
op	72:45	0:0	8	&
water	72:47	0:0	8	3
water	72:48	0:0	8	;
water	73:16	0:0	8	dst
op	73:19	0:0	8	[
water	73:20	0:0	8	4
op	73:22	0:0	8	*
water	73:24	0:0	8	i
op	73:26	0:0	8	+
water	73:28	0:0	8	2
op	73:29	0:0	8	]
op	73:31	0:0	8	=
water	73:33	0:0	8	buf
op	73:36	0:0	8	[
water	73:37	0:0	8	i
op	73:38	0:0	8	]
op	73:40	0:0	8	>>
water	73:43	0:0	8	2
op	73:45	0:0	8	&
water	73:47	0:0	8	3
water	73:48	0:0	8	;
water	74:16	0:0	8	dst
op	74:19	0:0	8	[
water	74:20	0:0	8	4
op	74:22	0:0	8	*
water	74:24	0:0	8	i
op	74:26	0:0	8	+
water	74:28	0:0	8	3
op	74:29	0:0	8	]
op	74:31	0:0	8	=
water	74:33	0:0	8	buf
op	74:36	0:0	8	[
water	74:37	0:0	8	i
op	74:38	0:0	8	]
op	74:45	0:0	8	&
water	74:47	0:0	8	3
water	74:48	0:0	8	;
water	75:12	0:0	8	}
water	76:12	0:0	6	linesize_align
op	76:27	0:0	6	=
water	76:29	0:0	6	16
water	76:31	0:0	6	;
water	77:8	0:0	6	}
water	78:8	0:0	4	buf
op	78:12	0:0	4	=
water	78:14	0:0	4	dst
water	78:17	0:0	4	;
water	79:4	0:0	4	}
else	79:6	103:4	2
stmts	79:11	103:4	3	
if	79:11	103:4	4	(context -> is_lt_16bpp)
cond	79:15	79:24	5	context -> is_lt_16bpp
water	79:15	0:0	6	context
op	79:22	0:0	6	->
water	79:24	0:0	6	is_lt_16bpp
stmts	79:37	103:4	5	
water	79:37	0:0	6	{
decl	80:8	80:42	6	uint8_t	*dst
op	80:21	0:0	6	=
water	80:23	0:0	6	frame
op	80:28	0:0	6	->
water	80:30	0:0	6	buf
op	80:33	0:0	6	[
water	80:34	0:0	6	0
op	80:35	0:0	6	]
op	80:36	0:0	6	->
water	80:38	0:0	6	data
decl	81:8	81:75	6	int	packed
op	81:19	0:0	6	=
water	81:21	0:0	6	(
water	81:22	0:0	6	avctx
op	81:27	0:0	6	->
water	81:29	0:0	6	codec_tag
op	81:39	0:0	6	&
water	81:41	0:0	6	0
water	81:42	0:0	6	xFFFFFF
water	81:49	0:0	6	)
op	81:51	0:0	6	==
call	81:54	81:74	7	MKTAG
arg	81:60	81:63	8	'B'
water	81:60	0:0	9	'B'
arg	81:64	81:67	8	'I'
water	81:64	0:0	9	'I'
arg	81:68	81:71	8	'T'
water	81:68	0:0	9	'T'
arg	81:73	81:74	8	0
water	81:73	0:0	9	0
decl	82:8	82:44	6	int	swap
op	82:19	0:0	6	=
water	82:22	0:0	6	avctx
op	82:27	0:0	6	->
water	82:29	0:0	6	codec_tag
op	82:39	0:0	6	>>
water	82:42	0:0	6	24
if	84:8	95:8	6	(packed && swap)
cond	84:12	84:22	7	packed && swap
water	84:12	0:0	8	packed
op	84:19	0:0	8	&&
water	84:22	0:0	8	swap
stmts	84:28	95:8	7	
water	84:28	0:0	8	{
call	85:12	85:97	8	av_fast_padded_malloc
arg	85:34	85:57	9	&context->bitstream_buf
op	85:34	0:0	10	&
water	85:35	0:0	10	context
op	85:42	0:0	10	->
water	85:44	0:0	10	bitstream_buf
arg	85:59	85:87	9	&context->bitstream_buf_size
op	85:59	0:0	10	&
water	85:60	0:0	10	context
op	85:67	0:0	10	->
water	85:69	0:0	10	bitstream_buf_size
arg	85:89	85:97	9	buf_size
water	85:89	0:0	10	buf_size
water	85:98	0:0	8	;
if	86:12	87:38	8	(! context -> bitstream_buf)
cond	86:16	86:26	9	! context -> bitstream_buf
op	86:16	0:0	10	!
water	86:17	0:0	10	context
op	86:24	0:0	10	->
water	86:26	0:0	10	bitstream_buf
stmts	87:16	87:38	9	
return	87:16	87:38	10	AVERROR(ENOMEM)
call	87:23	87:37	11	AVERROR
arg	87:31	87:37	12	ENOMEM
water	87:31	0:0	13	ENOMEM
if	88:12	89:102	8	(swap == 16)
cond	88:16	88:24	9	swap == 16
water	88:16	0:0	10	swap
op	88:21	0:0	10	==
water	88:24	0:0	10	16
stmts	89:16	89:102	9	
call	89:16	89:101	10	context->bbdsp.bswap16_buf
arg	89:43	89:65	11	context->bitstream_buf
water	89:43	0:0	12	context
op	89:50	0:0	12	->
water	89:52	0:0	12	bitstream_buf
arg	89:67	89:87	11	(constuint16_t*)buf
water	89:67	0:0	12	(
water	89:68	0:0	12	const
water	89:74	0:0	12	uint16_t
op	89:82	0:0	12	*
water	89:83	0:0	12	)
water	89:84	0:0	12	buf
arg	89:89	89:101	11	buf_size/2
water	89:89	0:0	12	buf_size
op	89:98	0:0	12	/
water	89:100	0:0	12	2
water	89:102	0:0	10	;
else	90:12	91:100	8
stmts	90:17	91:100	9	
if	90:17	91:100	10	(swap == 32)
cond	90:21	90:29	11	swap == 32
water	90:21	0:0	12	swap
op	90:26	0:0	12	==
water	90:29	0:0	12	32
stmts	91:16	91:100	11	
call	91:16	91:99	12	context->bbdsp.bswap_buf
arg	91:41	91:63	13	context->bitstream_buf
water	91:41	0:0	14	context
op	91:48	0:0	14	->
water	91:50	0:0	14	bitstream_buf
arg	91:65	91:85	13	(constuint32_t*)buf
water	91:65	0:0	14	(
water	91:66	0:0	14	const
water	91:72	0:0	14	uint32_t
op	91:80	0:0	14	*
water	91:81	0:0	14	)
water	91:82	0:0	14	buf
arg	91:87	91:99	13	buf_size/4
water	91:87	0:0	14	buf_size
op	91:96	0:0	14	/
water	91:98	0:0	14	4
water	91:100	0:0	12	;
else	92:12	93:42	8
stmts	93:16	93:42	9	
return	93:16	93:42	10	AVERROR_INVALIDDATA
water	93:23	0:0	11	AVERROR_INVALIDDATA
water	94:12	0:0	8	buf
op	94:16	0:0	8	=
water	94:18	0:0	8	context
op	94:25	0:0	8	->
water	94:27	0:0	8	bitstream_buf
water	94:40	0:0	8	;
water	95:8	0:0	8	}
if	97:8	98:56	6	(desc -> flags & AV_PIX_FMT_FLAG_BE)
cond	97:12	97:26	7	desc -> flags & AV_PIX_FMT_FLAG_BE
water	97:12	0:0	8	desc
op	97:16	0:0	8	->
water	97:18	0:0	8	flags
op	97:24	0:0	8	&
water	97:26	0:0	8	AV_PIX_FMT_FLAG_BE
stmts	98:12	98:56	7	
call	98:12	98:55	8	scale16be
arg	98:22	98:27	9	avctx
water	98:22	0:0	10	avctx
arg	98:29	98:32	9	dst
water	98:29	0:0	10	dst
arg	98:34	98:37	9	buf
water	98:34	0:0	10	buf
arg	98:39	98:47	9	buf_size
water	98:39	0:0	10	buf_size
arg	98:49	98:55	9	packed
water	98:49	0:0	10	packed
water	98:56	0:0	8	;
else	99:8	100:56	6
stmts	100:12	100:56	7	
call	100:12	100:55	8	scale16le
arg	100:22	100:27	9	avctx
water	100:22	0:0	10	avctx
arg	100:29	100:32	9	dst
water	100:29	0:0	10	dst
arg	100:34	100:37	9	buf
water	100:34	0:0	10	buf
arg	100:39	100:47	9	buf_size
water	100:39	0:0	10	buf_size
arg	100:49	100:55	9	packed
water	100:49	0:0	10	packed
water	100:56	0:0	8	;
water	102:8	0:0	6	buf
op	102:12	0:0	6	=
water	102:14	0:0	6	dst
water	102:17	0:0	6	;
water	103:4	0:0	6	}
else	103:6	106:4	2
stmts	103:11	106:4	3	
if	103:11	106:4	4	(need_copy)
cond	103:15	103:15	5	need_copy
water	103:15	0:0	6	need_copy
stmts	103:26	106:4	5	
water	103:26	0:0	6	{
call	104:8	104:49	6	memcpy
arg	104:15	104:34	7	frame->buf[0]->data
water	104:15	0:0	8	frame
op	104:20	0:0	8	->
water	104:22	0:0	8	buf
op	104:25	0:0	8	[
water	104:26	0:0	8	0
op	104:27	0:0	8	]
op	104:28	0:0	8	->
water	104:30	0:0	8	data
arg	104:36	104:39	7	buf
water	104:36	0:0	8	buf
arg	104:41	104:49	7	buf_size
water	104:41	0:0	8	buf_size
water	104:50	0:0	6	;
water	105:8	0:0	6	buf
op	105:12	0:0	6	=
water	105:14	0:0	6	frame
op	105:19	0:0	6	->
water	105:21	0:0	6	buf
op	105:24	0:0	6	[
water	105:25	0:0	6	0
op	105:26	0:0	6	]
op	105:27	0:0	6	->
water	105:29	0:0	6	data
water	105:33	0:0	6	;
water	106:4	0:0	6	}
if	108:4	110:45	2	(avctx -> codec_tag ==MKTAG ('A' ,'V' ,'1' ,'x' ) || avctx -> codec_tag ==MKTAG ('A' ,'V' ,'u' ,'p' ))
cond	108:8	109:52	3	avctx -> codec_tag ==MKTAG ('A' ,'V' ,'1' ,'x' ) || avctx -> codec_tag ==MKTAG ('A' ,'V' ,'u' ,'p' )
water	108:8	0:0	4	avctx
op	108:13	0:0	4	->
water	108:15	0:0	4	codec_tag
op	108:25	0:0	4	==
call	108:28	108:52	4	MKTAG
arg	108:34	108:37	5	'A'
water	108:34	0:0	6	'A'
arg	108:39	108:42	5	'V'
water	108:39	0:0	6	'V'
arg	108:44	108:47	5	'1'
water	108:44	0:0	6	'1'
arg	108:49	108:52	5	'x'
water	108:49	0:0	6	'x'
op	108:54	0:0	4	||
water	109:8	0:0	4	avctx
op	109:13	0:0	4	->
water	109:15	0:0	4	codec_tag
op	109:25	0:0	4	==
call	109:28	109:52	4	MKTAG
arg	109:34	109:37	5	'A'
water	109:34	0:0	6	'A'
arg	109:39	109:42	5	'V'
water	109:39	0:0	6	'V'
arg	109:44	109:47	5	'u'
water	109:44	0:0	6	'u'
arg	109:49	109:52	5	'p'
water	109:49	0:0	6	'p'
stmts	110:8	110:45	3	
water	110:8	0:0	4	buf
op	110:12	0:0	4	+=
water	110:15	0:0	4	buf_size
op	110:24	0:0	4	-
water	110:26	0:0	4	context
op	110:33	0:0	4	->
water	110:35	0:0	4	frame_size
water	110:45	0:0	4	;
water	112:4	0:0	2	len
op	112:8	0:0	2	=
water	112:10	0:0	2	context
op	112:17	0:0	2	->
water	112:19	0:0	2	frame_size
op	112:30	0:0	2	-
water	112:32	0:0	2	(
water	112:33	0:0	2	avctx
op	112:38	0:0	2	->
water	112:40	0:0	2	pix_fmt
op	112:47	0:0	2	==
water	112:49	0:0	2	AV_PIX_FMT_PAL8
water	112:65	0:0	2	?
water	112:67	0:0	2	AVPALETTE_SIZE
water	112:82	0:0	2	:
water	112:84	0:0	2	0
water	112:85	0:0	2	)
water	112:86	0:0	2	;
if	113:4	117:4	2	(buf_size < len && ( avctx -> codec_tag & 0 xFFFFFF ) !=MKTAG ('B' ,'I' ,'T' ,0 ))
cond	113:8	113:79	3	buf_size < len && ( avctx -> codec_tag & 0 xFFFFFF ) !=MKTAG ('B' ,'I' ,'T' ,0 )
water	113:8	0:0	4	buf_size
op	113:17	0:0	4	<
water	113:19	0:0	4	len
op	113:23	0:0	4	&&
water	113:26	0:0	4	(
water	113:27	0:0	4	avctx
op	113:32	0:0	4	->
water	113:34	0:0	4	codec_tag
op	113:44	0:0	4	&
water	113:46	0:0	4	0
water	113:47	0:0	4	xFFFFFF
water	113:54	0:0	4	)
op	113:56	0:0	4	!=
call	113:59	113:79	4	MKTAG
arg	113:65	113:68	5	'B'
water	113:65	0:0	6	'B'
arg	113:69	113:72	5	'I'
water	113:69	0:0	6	'I'
arg	113:73	113:76	5	'T'
water	113:73	0:0	6	'T'
arg	113:78	113:79	5	0
water	113:78	0:0	6	0
stmts	113:82	117:4	3	
water	113:82	0:0	4	{
call	114:8	114:115	4	av_log
arg	114:15	114:20	5	avctx
water	114:15	0:0	6	avctx
arg	114:22	114:34	5	AV_LOG_ERROR
water	114:22	0:0	6	AV_LOG_ERROR
arg	114:36	114:100	5	"Invalid buffer size, packet size %d < expected frame_size %d\n"
water	114:36	0:0	6	"Invalid buffer size, packet size %d < expected frame_size %d\n"
arg	114:102	114:110	5	buf_size
water	114:102	0:0	6	buf_size
arg	114:112	114:115	5	len
water	114:112	0:0	6	len
water	114:116	0:0	4	;
call	115:8	115:38	4	av_buffer_unref
arg	115:24	115:38	5	&frame->buf[0]
op	115:24	0:0	6	&
water	115:25	0:0	6	frame
op	115:30	0:0	6	->
water	115:32	0:0	6	buf
op	115:35	0:0	6	[
water	115:36	0:0	6	0
op	115:37	0:0	6	]
water	115:39	0:0	4	;
return	116:8	116:30	4	AVERROR(EINVAL)
call	116:15	116:29	5	AVERROR
arg	116:23	116:29	6	EINVAL
water	116:23	0:0	7	EINVAL
water	117:4	0:0	4	}
if	119:4	123:4	2	(( res =avpicture_fill (picture ,buf ,avctx -> pix_fmt ,avctx -> width ,avctx -> height ) ) < 0)
cond	119:8	120:62	3	( res =avpicture_fill (picture ,buf ,avctx -> pix_fmt ,avctx -> width ,avctx -> height ) ) < 0
water	119:8	0:0	4	(
water	119:9	0:0	4	res
op	119:13	0:0	4	=
call	119:15	120:57	4	avpicture_fill
arg	119:30	119:37	5	picture
water	119:30	0:0	6	picture
arg	119:39	119:42	5	buf
water	119:39	0:0	6	buf
arg	119:44	119:58	5	avctx->pix_fmt
water	119:44	0:0	6	avctx
op	119:49	0:0	6	->
water	119:51	0:0	6	pix_fmt
arg	120:30	120:42	5	avctx->width
water	120:30	0:0	6	avctx
op	120:35	0:0	6	->
water	120:37	0:0	6	width
arg	120:44	120:57	5	avctx->height
water	120:44	0:0	6	avctx
op	120:49	0:0	6	->
water	120:51	0:0	6	height
water	120:58	0:0	4	)
op	120:60	0:0	4	<
water	120:62	0:0	4	0
stmts	120:65	123:4	3	
water	120:65	0:0	4	{
call	121:8	121:38	4	av_buffer_unref
arg	121:24	121:38	5	&frame->buf[0]
op	121:24	0:0	6	&
water	121:25	0:0	6	frame
op	121:30	0:0	6	->
water	121:32	0:0	6	buf
op	121:35	0:0	6	[
water	121:36	0:0	6	0
op	121:37	0:0	6	]
water	121:39	0:0	4	;
return	122:8	122:18	4	res
water	122:15	0:0	5	res
water	123:4	0:0	4	}
if	125:4	139:4	2	(avctx -> pix_fmt == AV_PIX_FMT_PAL8)
cond	125:8	125:26	3	avctx -> pix_fmt == AV_PIX_FMT_PAL8
water	125:8	0:0	4	avctx
op	125:13	0:0	4	->
water	125:15	0:0	4	pix_fmt
op	125:23	0:0	4	==
water	125:26	0:0	4	AV_PIX_FMT_PAL8
stmts	125:43	139:4	3	
water	125:43	0:0	4	{
decl	126:8	127:58	4	const uint8_t	*pal
op	126:27	0:0	4	=
call	126:29	127:57	5	av_packet_get_side_data
arg	126:53	126:58	6	avpkt
water	126:53	0:0	7	avpkt
arg	126:60	126:79	6	AV_PKT_DATA_PALETTE
water	126:60	0:0	7	AV_PKT_DATA_PALETTE
arg	127:53	127:57	6	NULL
water	127:53	0:0	7	NULL
if	129:8	138:8	4	(pal)
cond	129:12	129:12	5	pal
water	129:12	0:0	6	pal
stmts	129:17	138:8	5	
water	129:17	0:0	6	{
call	130:12	130:45	6	av_buffer_unref
arg	130:28	130:45	7	&context->palette
op	130:28	0:0	8	&
water	130:29	0:0	8	context
op	130:36	0:0	8	->
water	130:38	0:0	8	palette
water	130:46	0:0	6	;
water	131:12	0:0	6	context
op	131:19	0:0	6	->
water	131:21	0:0	6	palette
op	131:29	0:0	6	=
call	131:31	131:61	6	av_buffer_alloc
arg	131:47	131:61	7	AVPALETTE_SIZE
water	131:47	0:0	8	AVPALETTE_SIZE
water	131:62	0:0	6	;
if	132:12	135:12	6	(! context -> palette)
cond	132:16	132:26	7	! context -> palette
op	132:16	0:0	8	!
water	132:17	0:0	8	context
op	132:24	0:0	8	->
water	132:26	0:0	8	palette
stmts	132:35	135:12	7	
water	132:35	0:0	8	{
call	133:16	133:46	8	av_buffer_unref
arg	133:32	133:46	9	&frame->buf[0]
op	133:32	0:0	10	&
water	133:33	0:0	10	frame
op	133:38	0:0	10	->
water	133:40	0:0	10	buf
op	133:43	0:0	10	[
water	133:44	0:0	10	0
op	133:45	0:0	10	]
water	133:47	0:0	8	;
return	134:16	134:38	8	AVERROR(ENOMEM)
call	134:23	134:37	9	AVERROR
arg	134:31	134:37	10	ENOMEM
water	134:31	0:0	11	ENOMEM
water	135:12	0:0	8	}
call	136:12	136:62	6	memcpy
arg	136:19	136:41	7	context->palette->data
water	136:19	0:0	8	context
op	136:26	0:0	8	->
water	136:28	0:0	8	palette
op	136:35	0:0	8	->
water	136:37	0:0	8	data
arg	136:43	136:46	7	pal
water	136:43	0:0	8	pal
arg	136:48	136:62	7	AVPALETTE_SIZE
water	136:48	0:0	8	AVPALETTE_SIZE
water	136:63	0:0	6	;
water	137:12	0:0	6	frame
op	137:17	0:0	6	->
water	137:19	0:0	6	palette_has_changed
op	137:39	0:0	6	=
water	137:41	0:0	6	1
water	137:42	0:0	6	;
water	138:8	0:0	6	}
water	139:4	0:0	4	}
if	141:4	149:72	2	(( avctx -> pix_fmt == AV_PIX_FMT_BGR24 || avctx -> pix_fmt == AV_PIX_FMT_GRAY8 || avctx -> pix_fmt == AV_PIX_FMT_RGB555LE || avctx -> pix_fmt == AV_PIX_FMT_RGB555BE || avctx -> pix_fmt == AV_PIX_FMT_RGB565LE || avctx -> pix_fmt == AV_PIX_FMT_MONOWHITE || avctx -> pix_fmt == AV_PIX_FMT_PAL8 ) &&FFALIGN (frame -> linesize [ 0 ] ,linesize_align ) * avctx -> height <= buf_size)
cond	141:8	148:71	3	( avctx -> pix_fmt == AV_PIX_FMT_BGR24 || avctx -> pix_fmt == AV_PIX_FMT_GRAY8 || avctx -> pix_fmt == AV_PIX_FMT_RGB555LE || avctx -> pix_fmt == AV_PIX_FMT_RGB555BE || avctx -> pix_fmt == AV_PIX_FMT_RGB565LE || avctx -> pix_fmt == AV_PIX_FMT_MONOWHITE || avctx -> pix_fmt == AV_PIX_FMT_PAL8 ) &&FFALIGN (frame -> linesize [ 0 ] ,linesize_align ) * avctx -> height <= buf_size
water	141:8	0:0	4	(
water	141:9	0:0	4	avctx
op	141:14	0:0	4	->
water	141:16	0:0	4	pix_fmt
op	141:23	0:0	4	==
water	141:25	0:0	4	AV_PIX_FMT_BGR24
op	141:45	0:0	4	||
water	142:8	0:0	4	avctx
op	142:13	0:0	4	->
water	142:15	0:0	4	pix_fmt
op	142:22	0:0	4	==
water	142:24	0:0	4	AV_PIX_FMT_GRAY8
op	142:44	0:0	4	||
water	143:8	0:0	4	avctx
op	143:13	0:0	4	->
water	143:15	0:0	4	pix_fmt
op	143:22	0:0	4	==
water	143:24	0:0	4	AV_PIX_FMT_RGB555LE
op	143:44	0:0	4	||
water	144:8	0:0	4	avctx
op	144:13	0:0	4	->
water	144:15	0:0	4	pix_fmt
op	144:22	0:0	4	==
water	144:24	0:0	4	AV_PIX_FMT_RGB555BE
op	144:44	0:0	4	||
water	145:8	0:0	4	avctx
op	145:13	0:0	4	->
water	145:15	0:0	4	pix_fmt
op	145:22	0:0	4	==
water	145:24	0:0	4	AV_PIX_FMT_RGB565LE
op	145:44	0:0	4	||
water	146:8	0:0	4	avctx
op	146:13	0:0	4	->
water	146:15	0:0	4	pix_fmt
op	146:22	0:0	4	==
water	146:24	0:0	4	AV_PIX_FMT_MONOWHITE
op	146:45	0:0	4	||
water	147:8	0:0	4	avctx
op	147:13	0:0	4	->
water	147:15	0:0	4	pix_fmt
op	147:22	0:0	4	==
water	147:24	0:0	4	AV_PIX_FMT_PAL8
water	147:39	0:0	4	)
op	147:41	0:0	4	&&
call	148:8	148:50	4	FFALIGN
arg	148:16	148:34	5	frame->linesize[0]
water	148:16	0:0	6	frame
op	148:21	0:0	6	->
water	148:23	0:0	6	linesize
op	148:31	0:0	6	[
water	148:32	0:0	6	0
op	148:33	0:0	6	]
arg	148:36	148:50	5	linesize_align
water	148:36	0:0	6	linesize_align
op	148:52	0:0	4	*
water	148:54	0:0	4	avctx
op	148:59	0:0	4	->
water	148:61	0:0	4	height
op	148:68	0:0	4	<=
water	148:71	0:0	4	buf_size
stmts	149:8	149:72	3	
water	149:8	0:0	4	frame
op	149:13	0:0	4	->
water	149:15	0:0	4	linesize
op	149:23	0:0	4	[
water	149:24	0:0	4	0
op	149:25	0:0	4	]
op	149:27	0:0	4	=
call	149:29	149:71	4	FFALIGN
arg	149:37	149:55	5	frame->linesize[0]
water	149:37	0:0	6	frame
op	149:42	0:0	6	->
water	149:44	0:0	6	linesize
op	149:52	0:0	6	[
water	149:53	0:0	6	0
op	149:54	0:0	6	]
arg	149:57	149:71	5	linesize_align
water	149:57	0:0	6	linesize_align
water	149:72	0:0	4	;
if	151:4	158:4	2	(avctx -> pix_fmt == AV_PIX_FMT_NV12 && avctx -> codec_tag ==MKTAG ('N' ,'V' ,'1' ,'2' ) &&FFALIGN (frame -> linesize [ 0 ] ,linesize_align ) * avctx -> height +FFALIGN (frame -> linesize [ 1 ] ,linesize_align ) * ( ( avctx -> height + 1 ) / 2 ) <= buf_size)
cond	151:8	153:83	3	avctx -> pix_fmt == AV_PIX_FMT_NV12 && avctx -> codec_tag ==MKTAG ('N' ,'V' ,'1' ,'2' ) &&FFALIGN (frame -> linesize [ 0 ] ,linesize_align ) * avctx -> height +FFALIGN (frame -> linesize [ 1 ] ,linesize_align ) * ( ( avctx -> height + 1 ) / 2 ) <= buf_size
water	151:8	0:0	4	avctx
op	151:13	0:0	4	->
water	151:15	0:0	4	pix_fmt
op	151:23	0:0	4	==
water	151:26	0:0	4	AV_PIX_FMT_NV12
op	151:42	0:0	4	&&
water	151:45	0:0	4	avctx
op	151:50	0:0	4	->
water	151:52	0:0	4	codec_tag
op	151:62	0:0	4	==
call	151:65	151:89	4	MKTAG
arg	151:71	151:74	5	'N'
water	151:71	0:0	6	'N'
arg	151:76	151:79	5	'V'
water	151:76	0:0	6	'V'
arg	151:81	151:84	5	'1'
water	151:81	0:0	6	'1'
arg	151:86	151:89	5	'2'
water	151:86	0:0	6	'2'
op	151:91	0:0	4	&&
call	152:8	152:50	4	FFALIGN
arg	152:16	152:34	5	frame->linesize[0]
water	152:16	0:0	6	frame
op	152:21	0:0	6	->
water	152:23	0:0	6	linesize
op	152:31	0:0	6	[
water	152:32	0:0	6	0
op	152:33	0:0	6	]
arg	152:36	152:50	5	linesize_align
water	152:36	0:0	6	linesize_align
op	152:52	0:0	4	*
water	152:54	0:0	4	avctx
op	152:59	0:0	4	->
water	152:61	0:0	4	height
op	152:68	0:0	4	+
call	153:8	153:50	4	FFALIGN
arg	153:16	153:34	5	frame->linesize[1]
water	153:16	0:0	6	frame
op	153:21	0:0	6	->
water	153:23	0:0	6	linesize
op	153:31	0:0	6	[
water	153:32	0:0	6	1
op	153:33	0:0	6	]
arg	153:36	153:50	5	linesize_align
water	153:36	0:0	6	linesize_align
op	153:52	0:0	4	*
water	153:54	0:0	4	(
water	153:55	0:0	4	(
water	153:56	0:0	4	avctx
op	153:61	0:0	4	->
water	153:63	0:0	4	height
op	153:70	0:0	4	+
water	153:72	0:0	4	1
water	153:73	0:0	4	)
op	153:75	0:0	4	/
water	153:77	0:0	4	2
water	153:78	0:0	4	)
op	153:80	0:0	4	<=
water	153:83	0:0	4	buf_size
stmts	153:93	158:4	3	
water	153:93	0:0	4	{
decl	154:8	154:61	4	int	la0
op	154:16	0:0	4	=
call	154:18	154:60	5	FFALIGN
arg	154:26	154:44	6	frame->linesize[0]
water	154:26	0:0	7	frame
op	154:31	0:0	7	->
water	154:33	0:0	7	linesize
op	154:41	0:0	7	[
water	154:42	0:0	7	0
op	154:43	0:0	7	]
arg	154:46	154:60	6	linesize_align
water	154:46	0:0	7	linesize_align
water	155:8	0:0	4	frame
op	155:13	0:0	4	->
water	155:15	0:0	4	data
op	155:19	0:0	4	[
water	155:20	0:0	4	1
op	155:21	0:0	4	]
op	155:23	0:0	4	+=
water	155:26	0:0	4	(
water	155:27	0:0	4	la0
op	155:31	0:0	4	-
water	155:33	0:0	4	frame
op	155:38	0:0	4	->
water	155:40	0:0	4	linesize
op	155:48	0:0	4	[
water	155:49	0:0	4	0
op	155:50	0:0	4	]
water	155:51	0:0	4	)
op	155:53	0:0	4	*
water	155:55	0:0	4	avctx
op	155:60	0:0	4	->
water	155:62	0:0	4	height
water	155:68	0:0	4	;
water	156:8	0:0	4	frame
op	156:13	0:0	4	->
water	156:15	0:0	4	linesize
op	156:23	0:0	4	[
water	156:24	0:0	4	0
op	156:25	0:0	4	]
op	156:27	0:0	4	=
water	156:29	0:0	4	la0
water	156:32	0:0	4	;
water	157:8	0:0	4	frame
op	157:13	0:0	4	->
water	157:15	0:0	4	linesize
op	157:23	0:0	4	[
water	157:24	0:0	4	1
op	157:25	0:0	4	]
op	157:27	0:0	4	=
call	157:29	157:71	4	FFALIGN
arg	157:37	157:55	5	frame->linesize[1]
water	157:37	0:0	6	frame
op	157:42	0:0	6	->
water	157:44	0:0	6	linesize
op	157:52	0:0	6	[
water	157:53	0:0	6	1
op	157:54	0:0	6	]
arg	157:57	157:71	5	linesize_align
water	157:57	0:0	6	linesize_align
water	157:72	0:0	4	;
water	158:4	0:0	4	}
if	160:4	168:4	2	(( avctx -> pix_fmt == AV_PIX_FMT_PAL8 && buf_size < context -> frame_size ) || ( desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL ))
cond	160:8	161:48	3	( avctx -> pix_fmt == AV_PIX_FMT_PAL8 && buf_size < context -> frame_size ) || ( desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL )
water	160:8	0:0	4	(
water	160:9	0:0	4	avctx
op	160:14	0:0	4	->
water	160:16	0:0	4	pix_fmt
op	160:24	0:0	4	==
water	160:27	0:0	4	AV_PIX_FMT_PAL8
op	160:43	0:0	4	&&
water	160:46	0:0	4	buf_size
op	160:55	0:0	4	<
water	160:57	0:0	4	context
op	160:64	0:0	4	->
water	160:66	0:0	4	frame_size
water	160:76	0:0	4	)
op	160:78	0:0	4	||
water	161:8	0:0	4	(
water	161:9	0:0	4	desc
op	161:13	0:0	4	->
water	161:15	0:0	4	flags
op	161:21	0:0	4	&
water	161:23	0:0	4	AV_PIX_FMT_FLAG_PSEUDOPAL
water	161:48	0:0	4	)
stmts	161:51	168:4	3	
water	161:51	0:0	4	{
water	162:8	0:0	4	frame
op	162:13	0:0	4	->
water	162:15	0:0	4	buf
op	162:18	0:0	4	[
water	162:19	0:0	4	1
op	162:20	0:0	4	]
op	162:23	0:0	4	=
call	162:25	162:55	4	av_buffer_ref
arg	162:39	162:55	5	context->palette
water	162:39	0:0	6	context
op	162:46	0:0	6	->
water	162:48	0:0	6	palette
water	162:56	0:0	4	;
if	163:8	166:8	4	(! frame -> buf [ 1 ])
cond	163:12	163:25	5	! frame -> buf [ 1 ]
op	163:12	0:0	6	!
water	163:13	0:0	6	frame
op	163:18	0:0	6	->
water	163:20	0:0	6	buf
op	163:23	0:0	6	[
water	163:24	0:0	6	1
op	163:25	0:0	6	]
stmts	163:28	166:8	5	
water	163:28	0:0	6	{
call	164:12	164:42	6	av_buffer_unref
arg	164:28	164:42	7	&frame->buf[0]
op	164:28	0:0	8	&
water	164:29	0:0	8	frame
op	164:34	0:0	8	->
water	164:36	0:0	8	buf
op	164:39	0:0	8	[
water	164:40	0:0	8	0
op	164:41	0:0	8	]
water	164:43	0:0	6	;
return	165:12	165:34	6	AVERROR(ENOMEM)
call	165:19	165:33	7	AVERROR
arg	165:27	165:33	8	ENOMEM
water	165:27	0:0	9	ENOMEM
water	166:8	0:0	6	}
water	167:8	0:0	4	frame
op	167:13	0:0	4	->
water	167:15	0:0	4	data
op	167:19	0:0	4	[
water	167:20	0:0	4	1
op	167:21	0:0	4	]
op	167:23	0:0	4	=
water	167:25	0:0	4	frame
op	167:30	0:0	4	->
water	167:32	0:0	4	buf
op	167:35	0:0	4	[
water	167:36	0:0	4	1
op	167:37	0:0	4	]
op	167:38	0:0	4	->
water	167:40	0:0	4	data
water	167:44	0:0	4	;
water	168:4	0:0	4	}
if	170:4	172:58	2	(avctx -> pix_fmt == AV_PIX_FMT_BGR24 && ( ( frame -> linesize [ 0 ] + 3 ) & ~3 ) * avctx -> height <= buf_size)
cond	170:8	171:59	3	avctx -> pix_fmt == AV_PIX_FMT_BGR24 && ( ( frame -> linesize [ 0 ] + 3 ) & ~3 ) * avctx -> height <= buf_size
water	170:8	0:0	4	avctx
op	170:13	0:0	4	->
water	170:15	0:0	4	pix_fmt
op	170:23	0:0	4	==
water	170:26	0:0	4	AV_PIX_FMT_BGR24
op	170:43	0:0	4	&&
water	171:8	0:0	4	(
water	171:9	0:0	4	(
water	171:10	0:0	4	frame
op	171:15	0:0	4	->
water	171:17	0:0	4	linesize
op	171:25	0:0	4	[
water	171:26	0:0	4	0
op	171:27	0:0	4	]
op	171:29	0:0	4	+
water	171:31	0:0	4	3
water	171:32	0:0	4	)
op	171:34	0:0	4	&
water	171:36	0:0	4	~3
water	171:38	0:0	4	)
op	171:40	0:0	4	*
water	171:42	0:0	4	avctx
op	171:47	0:0	4	->
water	171:49	0:0	4	height
op	171:56	0:0	4	<=
water	171:59	0:0	4	buf_size
stmts	172:8	172:58	3	
water	172:8	0:0	4	frame
op	172:13	0:0	4	->
water	172:15	0:0	4	linesize
op	172:23	0:0	4	[
water	172:24	0:0	4	0
op	172:25	0:0	4	]
op	172:27	0:0	4	=
water	172:29	0:0	4	(
water	172:30	0:0	4	frame
op	172:35	0:0	4	->
water	172:37	0:0	4	linesize
op	172:45	0:0	4	[
water	172:46	0:0	4	0
op	172:47	0:0	4	]
op	172:49	0:0	4	+
water	172:51	0:0	4	3
water	172:52	0:0	4	)
op	172:54	0:0	4	&
water	172:56	0:0	4	~3
water	172:58	0:0	4	;
if	174:4	175:28	2	(context -> flip)
cond	174:8	174:17	3	context -> flip
water	174:8	0:0	4	context
op	174:15	0:0	4	->
water	174:17	0:0	4	flip
stmts	175:8	175:28	3	
call	175:8	175:27	4	flip
arg	175:13	175:18	5	avctx
water	175:13	0:0	6	avctx
arg	175:20	175:27	5	picture
water	175:20	0:0	6	picture
water	175:28	0:0	4	;
if	177:4	181:61	2	(avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'1' ,'2' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'1' ,'6' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'2' ,'4' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'U' ,'9' ))
cond	177:8	180:52	3	avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'1' ,'2' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'1' ,'6' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'2' ,'4' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'U' ,'9' )
water	177:8	0:0	4	avctx
op	177:13	0:0	4	->
water	177:15	0:0	4	codec_tag
op	177:25	0:0	4	==
call	177:28	177:52	4	MKTAG
arg	177:34	177:37	5	'Y'
water	177:34	0:0	6	'Y'
arg	177:39	177:42	5	'V'
water	177:39	0:0	6	'V'
arg	177:44	177:47	5	'1'
water	177:44	0:0	6	'1'
arg	177:49	177:52	5	'2'
water	177:49	0:0	6	'2'
op	177:54	0:0	4	||
water	178:8	0:0	4	avctx
op	178:13	0:0	4	->
water	178:15	0:0	4	codec_tag
op	178:25	0:0	4	==
call	178:28	178:52	4	MKTAG
arg	178:34	178:37	5	'Y'
water	178:34	0:0	6	'Y'
arg	178:39	178:42	5	'V'
water	178:39	0:0	6	'V'
arg	178:44	178:47	5	'1'
water	178:44	0:0	6	'1'
arg	178:49	178:52	5	'6'
water	178:49	0:0	6	'6'
op	178:54	0:0	4	||
water	179:8	0:0	4	avctx
op	179:13	0:0	4	->
water	179:15	0:0	4	codec_tag
op	179:25	0:0	4	==
call	179:28	179:52	4	MKTAG
arg	179:34	179:37	5	'Y'
water	179:34	0:0	6	'Y'
arg	179:39	179:42	5	'V'
water	179:39	0:0	6	'V'
arg	179:44	179:47	5	'2'
water	179:44	0:0	6	'2'
arg	179:49	179:52	5	'4'
water	179:49	0:0	6	'4'
op	179:54	0:0	4	||
water	180:8	0:0	4	avctx
op	180:13	0:0	4	->
water	180:15	0:0	4	codec_tag
op	180:25	0:0	4	==
call	180:28	180:52	4	MKTAG
arg	180:34	180:37	5	'Y'
water	180:34	0:0	6	'Y'
arg	180:39	180:42	5	'V'
water	180:39	0:0	6	'V'
arg	180:44	180:47	5	'U'
water	180:44	0:0	6	'U'
arg	180:49	180:52	5	'9'
water	180:49	0:0	6	'9'
stmts	181:8	181:61	3	
call	181:8	181:60	4	FFSWAP
arg	181:15	181:24	5	uint8_t*
water	181:15	0:0	6	uint8_t
op	181:23	0:0	6	*
arg	181:26	181:42	5	picture->data[1]
water	181:26	0:0	6	picture
op	181:33	0:0	6	->
water	181:35	0:0	6	data
op	181:39	0:0	6	[
water	181:40	0:0	6	1
op	181:41	0:0	6	]
arg	181:44	181:60	5	picture->data[2]
water	181:44	0:0	6	picture
op	181:51	0:0	6	->
water	181:53	0:0	6	data
op	181:57	0:0	6	[
water	181:58	0:0	6	2
op	181:59	0:0	6	]
water	181:61	0:0	4	;
if	183:4	186:4	2	(avctx -> codec_tag ==AV_RL32 ("I420" ) && ( avctx -> width + 1 ) * ( avctx -> height + 1 ) * 3 / 2 == buf_size)
cond	183:8	183:91	3	avctx -> codec_tag ==AV_RL32 ("I420" ) && ( avctx -> width + 1 ) * ( avctx -> height + 1 ) * 3 / 2 == buf_size
water	183:8	0:0	4	avctx
op	183:13	0:0	4	->
water	183:15	0:0	4	codec_tag
op	183:25	0:0	4	==
call	183:28	183:42	4	AV_RL32
arg	183:36	183:42	5	"I420"
water	183:36	0:0	6	"I420"
op	183:44	0:0	4	&&
water	183:47	0:0	4	(
water	183:48	0:0	4	avctx
op	183:53	0:0	4	->
water	183:55	0:0	4	width
op	183:60	0:0	4	+
water	183:61	0:0	4	1
water	183:62	0:0	4	)
op	183:63	0:0	4	*
water	183:64	0:0	4	(
water	183:65	0:0	4	avctx
op	183:70	0:0	4	->
water	183:72	0:0	4	height
op	183:78	0:0	4	+
water	183:79	0:0	4	1
water	183:80	0:0	4	)
op	183:82	0:0	4	*
water	183:84	0:0	4	3
op	183:85	0:0	4	/
water	183:86	0:0	4	2
op	183:88	0:0	4	==
water	183:91	0:0	4	buf_size
stmts	183:101	186:4	3	
water	183:101	0:0	4	{
water	184:8	0:0	4	picture
op	184:15	0:0	4	->
water	184:17	0:0	4	data
op	184:21	0:0	4	[
water	184:22	0:0	4	1
op	184:23	0:0	4	]
op	184:25	0:0	4	=
water	184:27	0:0	4	picture
op	184:34	0:0	4	->
water	184:36	0:0	4	data
op	184:40	0:0	4	[
water	184:41	0:0	4	1
op	184:42	0:0	4	]
op	184:44	0:0	4	+
water	184:47	0:0	4	(
water	184:48	0:0	4	avctx
op	184:53	0:0	4	->
water	184:55	0:0	4	width
op	184:60	0:0	4	+
water	184:61	0:0	4	1
water	184:62	0:0	4	)
op	184:63	0:0	4	*
water	184:64	0:0	4	(
water	184:65	0:0	4	avctx
op	184:70	0:0	4	->
water	184:72	0:0	4	height
op	184:78	0:0	4	+
water	184:79	0:0	4	1
water	184:80	0:0	4	)
op	184:82	0:0	4	-
water	184:83	0:0	4	avctx
op	184:88	0:0	4	->
water	184:90	0:0	4	width
op	184:95	0:0	4	*
water	184:96	0:0	4	avctx
op	184:101	0:0	4	->
water	184:103	0:0	4	height
water	184:109	0:0	4	;
water	185:8	0:0	4	picture
op	185:15	0:0	4	->
water	185:17	0:0	4	data
op	185:21	0:0	4	[
water	185:22	0:0	4	2
op	185:23	0:0	4	]
op	185:25	0:0	4	=
water	185:27	0:0	4	picture
op	185:34	0:0	4	->
water	185:36	0:0	4	data
op	185:40	0:0	4	[
water	185:41	0:0	4	2
op	185:42	0:0	4	]
op	185:44	0:0	4	+
water	185:46	0:0	4	(
water	185:47	0:0	4	(
water	185:48	0:0	4	avctx
op	185:53	0:0	4	->
water	185:55	0:0	4	width
op	185:60	0:0	4	+
water	185:61	0:0	4	1
water	185:62	0:0	4	)
op	185:63	0:0	4	*
water	185:64	0:0	4	(
water	185:65	0:0	4	avctx
op	185:70	0:0	4	->
water	185:72	0:0	4	height
op	185:78	0:0	4	+
water	185:79	0:0	4	1
water	185:80	0:0	4	)
op	185:82	0:0	4	-
water	185:83	0:0	4	avctx
op	185:88	0:0	4	->
water	185:90	0:0	4	width
op	185:95	0:0	4	*
water	185:96	0:0	4	avctx
op	185:101	0:0	4	->
water	185:103	0:0	4	height
water	185:109	0:0	4	)
op	185:110	0:0	4	*
water	185:111	0:0	4	5
op	185:112	0:0	4	/
water	185:113	0:0	4	4
water	185:114	0:0	4	;
water	186:4	0:0	4	}
if	188:4	197:4	2	(avctx -> codec_tag ==AV_RL32 ("yuv2" ) && avctx -> pix_fmt == AV_PIX_FMT_YUYV422)
cond	188:8	189:28	3	avctx -> codec_tag ==AV_RL32 ("yuv2" ) && avctx -> pix_fmt == AV_PIX_FMT_YUYV422
water	188:8	0:0	4	avctx
op	188:13	0:0	4	->
water	188:15	0:0	4	codec_tag
op	188:25	0:0	4	==
call	188:28	188:42	4	AV_RL32
arg	188:36	188:42	5	"yuv2"
water	188:36	0:0	6	"yuv2"
op	188:44	0:0	4	&&
water	189:8	0:0	4	avctx
op	189:13	0:0	4	->
water	189:15	0:0	4	pix_fmt
op	189:25	0:0	4	==
water	189:28	0:0	4	AV_PIX_FMT_YUYV422
stmts	189:48	197:4	3	
water	189:48	0:0	4	{
decl	190:8	190:16	4	int	x
water	190:13	0:0	4	,
decl	190:8	190:16	4	int	y
decl	191:8	191:40	4	uint8_t	*line
op	191:22	0:0	4	=
water	191:24	0:0	4	picture
op	191:31	0:0	4	->
water	191:33	0:0	4	data
op	191:37	0:0	4	[
water	191:38	0:0	4	0
op	191:39	0:0	4	]
for	192:8	196:8	4	(y = 0 ;y < avctx -> height;y ++)
forinit	192:13	192:18	5	y = 0 ;
water	192:13	0:0	6	y
op	192:15	0:0	6	=
water	192:17	0:0	6	0
water	192:18	0:0	6	;
cond	192:20	192:31	5	y < avctx -> height
water	192:20	0:0	6	y
op	192:22	0:0	6	<
water	192:24	0:0	6	avctx
op	192:29	0:0	6	->
water	192:31	0:0	6	height
forexpr	192:39	192:40	5	y ++
water	192:39	0:0	6	y
op	192:40	0:0	6	++
stmts	192:44	196:8	5	
water	192:44	0:0	6	{
for	193:12	194:39	6	(x = 0 ;x < avctx -> width;x ++)
forinit	193:17	193:22	7	x = 0 ;
water	193:17	0:0	8	x
op	193:19	0:0	8	=
water	193:21	0:0	8	0
water	193:22	0:0	8	;
cond	193:24	193:35	7	x < avctx -> width
water	193:24	0:0	8	x
op	193:26	0:0	8	<
water	193:28	0:0	8	avctx
op	193:33	0:0	8	->
water	193:35	0:0	8	width
forexpr	193:42	193:43	7	x ++
water	193:42	0:0	8	x
op	193:43	0:0	8	++
stmts	194:16	194:39	7	
water	194:16	0:0	8	line
op	194:20	0:0	8	[
water	194:21	0:0	8	2
op	194:23	0:0	8	*
water	194:25	0:0	8	x
op	194:27	0:0	8	+
water	194:29	0:0	8	1
op	194:30	0:0	8	]
op	194:32	0:0	8	^=
water	194:35	0:0	8	0
water	194:36	0:0	8	x80
water	194:39	0:0	8	;
water	195:12	0:0	6	line
op	195:17	0:0	6	+=
water	195:20	0:0	6	picture
op	195:27	0:0	6	->
water	195:29	0:0	6	linesize
op	195:37	0:0	6	[
water	195:38	0:0	6	0
op	195:39	0:0	6	]
water	195:40	0:0	6	;
water	196:8	0:0	6	}
water	197:4	0:0	4	}
if	199:4	203:4	2	(avctx -> field_order > AV_FIELD_PROGRESSIVE)
cond	199:8	199:29	3	avctx -> field_order > AV_FIELD_PROGRESSIVE
water	199:8	0:0	4	avctx
op	199:13	0:0	4	->
water	199:15	0:0	4	field_order
op	199:27	0:0	4	>
water	199:29	0:0	4	AV_FIELD_PROGRESSIVE
stmts	199:51	203:4	3	
water	199:51	0:0	4	{
water	200:8	0:0	4	frame
op	200:13	0:0	4	->
water	200:15	0:0	4	interlaced_frame
op	200:32	0:0	4	=
water	200:34	0:0	4	1
water	200:35	0:0	4	;
if	201:8	202:38	4	(avctx -> field_order == AV_FIELD_TT || avctx -> field_order == AV_FIELD_TB)
cond	201:12	201:71	5	avctx -> field_order == AV_FIELD_TT || avctx -> field_order == AV_FIELD_TB
water	201:12	0:0	6	avctx
op	201:17	0:0	6	->
water	201:19	0:0	6	field_order
op	201:31	0:0	6	==
water	201:34	0:0	6	AV_FIELD_TT
op	201:46	0:0	6	||
water	201:49	0:0	6	avctx
op	201:54	0:0	6	->
water	201:56	0:0	6	field_order
op	201:68	0:0	6	==
water	201:71	0:0	6	AV_FIELD_TB
stmts	202:12	202:38	5	
water	202:12	0:0	6	frame
op	202:17	0:0	6	->
water	202:19	0:0	6	top_field_first
op	202:35	0:0	6	=
water	202:37	0:0	6	1
water	202:38	0:0	6	;
water	203:4	0:0	4	}
op	205:4	0:0	2	*
water	205:5	0:0	2	got_frame
op	205:15	0:0	2	=
water	205:17	0:0	2	1
water	205:18	0:0	2	;
return	206:4	206:19	2	buf_size
water	206:11	0:0	3	buf_size
