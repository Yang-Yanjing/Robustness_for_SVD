func	1:0	60:0	0	static int	filter_slice
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
param	1:46	1:55	2	void *	arg
param	1:57	1:66	2	int	jobnr
param	2:24	2:35	2	int	nb_jobs
stmnts	0:0	59:12	1	
decl	4:4	4:31	2	TransContext	*s
op	4:20	0:0	2	=
water	4:22	0:0	2	ctx
op	4:25	0:0	2	->
water	4:27	0:0	2	priv
decl	5:4	5:24	2	ThreadData	*td
op	5:19	0:0	2	=
water	5:21	0:0	2	arg
decl	6:4	6:26	2	AVFrame	*out
op	6:17	0:0	2	=
water	6:19	0:0	2	td
op	6:21	0:0	2	->
water	6:23	0:0	2	out
decl	7:4	7:24	2	AVFrame	*in
op	7:16	0:0	2	=
water	7:18	0:0	2	td
op	7:20	0:0	2	->
water	7:22	0:0	2	in
decl	8:4	8:13	2	int	plane
for	10:4	57:4	2	(plane = 0 ;out -> data [ plane ];plane ++)
forinit	10:9	10:18	3	plane = 0 ;
water	10:9	0:0	4	plane
op	10:15	0:0	4	=
water	10:17	0:0	4	0
water	10:18	0:0	4	;
cond	10:20	10:35	3	out -> data [ plane ]
water	10:20	0:0	4	out
op	10:23	0:0	4	->
water	10:25	0:0	4	data
op	10:29	0:0	4	[
water	10:30	0:0	4	plane
op	10:35	0:0	4	]
forexpr	10:38	10:43	3	plane ++
water	10:38	0:0	4	plane
op	10:43	0:0	4	++
stmts	10:47	57:4	3	
water	10:47	0:0	4	{
decl	11:8	11:60	4	int	hsub
op	11:20	0:0	4	=
water	11:22	0:0	4	plane
op	11:28	0:0	4	==
water	11:31	0:0	4	1
op	11:33	0:0	4	||
water	11:36	0:0	4	plane
op	11:42	0:0	4	==
water	11:45	0:0	4	2
water	11:47	0:0	4	?
water	11:49	0:0	4	s
op	11:50	0:0	4	->
water	11:52	0:0	4	hsub
water	11:57	0:0	4	:
water	11:59	0:0	4	0
decl	12:8	12:60	4	int	vsub
op	12:20	0:0	4	=
water	12:22	0:0	4	plane
op	12:28	0:0	4	==
water	12:31	0:0	4	1
op	12:33	0:0	4	||
water	12:36	0:0	4	plane
op	12:42	0:0	4	==
water	12:45	0:0	4	2
water	12:47	0:0	4	?
water	12:49	0:0	4	s
op	12:50	0:0	4	->
water	12:52	0:0	4	vsub
water	12:57	0:0	4	:
water	12:59	0:0	4	0
decl	13:8	13:40	4	int	pixstep
op	13:20	0:0	4	=
water	13:22	0:0	4	s
op	13:23	0:0	4	->
water	13:25	0:0	4	pixsteps
op	13:33	0:0	4	[
water	13:34	0:0	4	plane
op	13:39	0:0	4	]
decl	14:8	14:54	4	int	inh
op	14:20	0:0	4	=
call	14:22	14:53	5	AV_CEIL_RSHIFT
arg	14:37	14:47	6	in->height
water	14:37	0:0	7	in
op	14:39	0:0	7	->
water	14:41	0:0	7	height
arg	14:49	14:53	6	vsub
water	14:49	0:0	7	vsub
decl	15:8	15:55	4	int	outw
op	15:20	0:0	4	=
call	15:22	15:54	5	AV_CEIL_RSHIFT
arg	15:37	15:47	6	out->width
water	15:37	0:0	7	out
op	15:40	0:0	7	->
water	15:42	0:0	7	width
arg	15:50	15:54	6	hsub
water	15:50	0:0	7	hsub
decl	16:8	16:55	4	int	outh
op	16:20	0:0	4	=
call	16:22	16:54	5	AV_CEIL_RSHIFT
arg	16:37	16:48	6	out->height
water	16:37	0:0	7	out
op	16:40	0:0	7	->
water	16:42	0:0	7	height
arg	16:50	16:54	6	vsub
water	16:50	0:0	7	vsub
decl	17:8	17:50	4	int	start
op	17:20	0:0	4	=
water	17:22	0:0	4	(
water	17:23	0:0	4	outh
op	17:28	0:0	4	*
water	17:31	0:0	4	jobnr
water	17:39	0:0	4	)
op	17:41	0:0	4	/
water	17:43	0:0	4	nb_jobs
decl	18:8	18:50	4	int	end
op	18:20	0:0	4	=
water	18:22	0:0	4	(
water	18:23	0:0	4	outh
op	18:28	0:0	4	*
water	18:30	0:0	4	(
water	18:31	0:0	4	jobnr
op	18:36	0:0	4	+
water	18:37	0:0	4	1
water	18:38	0:0	4	)
water	18:39	0:0	4	)
op	18:41	0:0	4	/
water	18:43	0:0	4	nb_jobs
decl	19:8	19:26	4	uint8_t	*dst
water	19:20	0:0	4	,
decl	19:8	19:26	4	uint8_t	*src
decl	20:8	20:36	4	int	dstlinesize
water	20:23	0:0	4	,
decl	20:8	20:36	4	int	srclinesize
decl	21:8	21:16	4	int	x
water	21:13	0:0	4	,
decl	21:8	21:16	4	int	y
water	23:8	0:0	4	dstlinesize
op	23:20	0:0	4	=
water	23:22	0:0	4	out
op	23:25	0:0	4	->
water	23:27	0:0	4	linesize
op	23:35	0:0	4	[
water	23:36	0:0	4	plane
op	23:41	0:0	4	]
water	23:42	0:0	4	;
water	24:8	0:0	4	dst
op	24:20	0:0	4	=
water	24:22	0:0	4	out
op	24:25	0:0	4	->
water	24:27	0:0	4	data
op	24:31	0:0	4	[
water	24:32	0:0	4	plane
op	24:37	0:0	4	]
op	24:39	0:0	4	+
water	24:41	0:0	4	start
op	24:47	0:0	4	*
water	24:49	0:0	4	dstlinesize
water	24:60	0:0	4	;
water	25:8	0:0	4	src
op	25:20	0:0	4	=
water	25:22	0:0	4	in
op	25:24	0:0	4	->
water	25:26	0:0	4	data
op	25:30	0:0	4	[
water	25:31	0:0	4	plane
op	25:36	0:0	4	]
water	25:37	0:0	4	;
water	26:8	0:0	4	srclinesize
op	26:20	0:0	4	=
water	26:22	0:0	4	in
op	26:24	0:0	4	->
water	26:26	0:0	4	linesize
op	26:34	0:0	4	[
water	26:35	0:0	4	plane
op	26:40	0:0	4	]
water	26:41	0:0	4	;
if	28:8	31:8	4	(s -> dir & 1)
cond	28:12	28:21	5	s -> dir & 1
water	28:12	0:0	6	s
op	28:13	0:0	6	->
water	28:15	0:0	6	dir
op	28:19	0:0	6	&
water	28:21	0:0	6	1
stmts	28:24	31:8	5	
water	28:24	0:0	6	{
water	29:12	0:0	6	src
op	29:24	0:0	6	+=
water	29:27	0:0	6	in
op	29:29	0:0	6	->
water	29:31	0:0	6	linesize
op	29:39	0:0	6	[
water	29:40	0:0	6	plane
op	29:45	0:0	6	]
op	29:47	0:0	6	*
water	29:49	0:0	6	(
water	29:50	0:0	6	inh
op	29:54	0:0	6	-
water	29:56	0:0	6	1
water	29:57	0:0	6	)
water	29:58	0:0	6	;
water	30:12	0:0	6	srclinesize
op	30:24	0:0	6	*=
op	30:27	0:0	6	-
water	30:28	0:0	6	1
water	30:29	0:0	6	;
water	31:8	0:0	6	}
if	33:8	36:8	4	(s -> dir & 2)
cond	33:12	33:21	5	s -> dir & 2
water	33:12	0:0	6	s
op	33:13	0:0	6	->
water	33:15	0:0	6	dir
op	33:19	0:0	6	&
water	33:21	0:0	6	2
stmts	33:24	36:8	5	
water	33:24	0:0	6	{
water	34:12	0:0	6	dst
op	34:25	0:0	6	=
water	34:27	0:0	6	out
op	34:30	0:0	6	->
water	34:32	0:0	6	data
op	34:36	0:0	6	[
water	34:37	0:0	6	plane
op	34:42	0:0	6	]
op	34:44	0:0	6	+
water	34:46	0:0	6	dstlinesize
op	34:58	0:0	6	*
water	34:60	0:0	6	(
water	34:61	0:0	6	outh
op	34:66	0:0	6	-
water	34:68	0:0	6	start
op	34:74	0:0	6	-
water	34:76	0:0	6	1
water	34:77	0:0	6	)
water	34:78	0:0	6	;
water	35:12	0:0	6	dstlinesize
op	35:24	0:0	6	*=
op	35:27	0:0	6	-
water	35:28	0:0	6	1
water	35:29	0:0	6	;
water	36:8	0:0	6	}
for	38:8	50:8	4	(y = start ;y < end - 7;y += 8)
forinit	38:13	38:22	5	y = start ;
water	38:13	0:0	6	y
op	38:15	0:0	6	=
water	38:17	0:0	6	start
water	38:22	0:0	6	;
cond	38:24	38:34	5	y < end - 7
water	38:24	0:0	6	y
op	38:26	0:0	6	<
water	38:28	0:0	6	end
op	38:32	0:0	6	-
water	38:34	0:0	6	7
forexpr	38:37	38:42	5	y += 8
water	38:37	0:0	6	y
op	38:39	0:0	6	+=
water	38:42	0:0	6	8
stmts	38:45	50:8	5	
water	38:45	0:0	6	{
for	39:12	44:12	6	(x = 0 ;x < outw - 7;x += 8)
forinit	39:17	39:22	7	x = 0 ;
water	39:17	0:0	8	x
op	39:19	0:0	8	=
water	39:21	0:0	8	0
water	39:22	0:0	8	;
cond	39:24	39:35	7	x < outw - 7
water	39:24	0:0	8	x
op	39:26	0:0	8	<
water	39:28	0:0	8	outw
op	39:33	0:0	8	-
water	39:35	0:0	8	7
forexpr	39:38	39:43	7	x += 8
water	39:38	0:0	8	x
op	39:40	0:0	8	+=
water	39:43	0:0	8	8
stmts	39:46	44:12	7	
water	39:46	0:0	8	{
call	40:16	43:44	8	s->transpose_8x8
arg	40:33	40:68	9	src+x*srclinesize+y*pixstep
water	40:33	0:0	10	src
op	40:37	0:0	10	+
water	40:39	0:0	10	x
op	40:41	0:0	10	*
water	40:43	0:0	10	srclinesize
op	40:55	0:0	10	+
water	40:57	0:0	10	y
op	40:59	0:0	10	*
water	40:61	0:0	10	pixstep
arg	41:33	41:44	9	srclinesize
water	41:33	0:0	10	srclinesize
arg	42:33	42:78	9	dst+(y-start)*dstlinesize+x*pixstep
water	42:33	0:0	10	dst
op	42:37	0:0	10	+
water	42:39	0:0	10	(
water	42:40	0:0	10	y
op	42:42	0:0	10	-
water	42:44	0:0	10	start
water	42:49	0:0	10	)
op	42:51	0:0	10	*
water	42:53	0:0	10	dstlinesize
op	42:65	0:0	10	+
water	42:67	0:0	10	x
op	42:69	0:0	10	*
water	42:71	0:0	10	pixstep
arg	43:33	43:44	9	dstlinesize
water	43:33	0:0	10	dstlinesize
water	43:45	0:0	8	;
water	44:12	0:0	8	}
if	45:12	49:66	6	(outw - x > 0 && end - y > 0)
cond	45:16	45:42	7	outw - x > 0 && end - y > 0
water	45:16	0:0	8	outw
op	45:21	0:0	8	-
water	45:23	0:0	8	x
op	45:25	0:0	8	>
water	45:27	0:0	8	0
op	45:29	0:0	8	&&
water	45:32	0:0	8	end
op	45:36	0:0	8	-
water	45:38	0:0	8	y
op	45:40	0:0	8	>
water	45:42	0:0	8	0
stmts	46:16	49:66	7	
call	46:16	49:65	8	s->transpose_block
arg	46:35	46:70	9	src+x*srclinesize+y*pixstep
water	46:35	0:0	10	src
op	46:39	0:0	10	+
water	46:41	0:0	10	x
op	46:43	0:0	10	*
water	46:45	0:0	10	srclinesize
op	46:57	0:0	10	+
water	46:59	0:0	10	y
op	46:61	0:0	10	*
water	46:63	0:0	10	pixstep
arg	47:35	47:46	9	srclinesize
water	47:35	0:0	10	srclinesize
arg	48:35	48:80	9	dst+(y-start)*dstlinesize+x*pixstep
water	48:35	0:0	10	dst
op	48:39	0:0	10	+
water	48:41	0:0	10	(
water	48:42	0:0	10	y
op	48:44	0:0	10	-
water	48:46	0:0	10	start
water	48:51	0:0	10	)
op	48:53	0:0	10	*
water	48:55	0:0	10	dstlinesize
op	48:67	0:0	10	+
water	48:69	0:0	10	x
op	48:71	0:0	10	*
water	48:73	0:0	10	pixstep
arg	49:35	49:46	9	dstlinesize
water	49:35	0:0	10	dstlinesize
arg	49:48	49:56	9	outw-x
water	49:48	0:0	10	outw
op	49:53	0:0	10	-
water	49:55	0:0	10	x
arg	49:58	49:65	9	end-y
water	49:58	0:0	10	end
op	49:62	0:0	10	-
water	49:64	0:0	10	y
water	49:66	0:0	8	;
water	50:8	0:0	6	}
if	52:8	56:58	4	(end - y > 0)
cond	52:12	52:22	5	end - y > 0
water	52:12	0:0	6	end
op	52:16	0:0	6	-
water	52:18	0:0	6	y
op	52:20	0:0	6	>
water	52:22	0:0	6	0
stmts	53:12	56:58	5	
call	53:12	56:57	6	s->transpose_block
arg	53:31	53:66	7	src+0*srclinesize+y*pixstep
water	53:31	0:0	8	src
op	53:35	0:0	8	+
water	53:37	0:0	8	0
op	53:39	0:0	8	*
water	53:41	0:0	8	srclinesize
op	53:53	0:0	8	+
water	53:55	0:0	8	y
op	53:57	0:0	8	*
water	53:59	0:0	8	pixstep
arg	54:31	54:42	7	srclinesize
water	54:31	0:0	8	srclinesize
arg	55:31	55:76	7	dst+(y-start)*dstlinesize+0*pixstep
water	55:31	0:0	8	dst
op	55:35	0:0	8	+
water	55:37	0:0	8	(
water	55:38	0:0	8	y
op	55:40	0:0	8	-
water	55:42	0:0	8	start
water	55:47	0:0	8	)
op	55:49	0:0	8	*
water	55:51	0:0	8	dstlinesize
op	55:63	0:0	8	+
water	55:65	0:0	8	0
op	55:67	0:0	8	*
water	55:69	0:0	8	pixstep
arg	56:31	56:42	7	dstlinesize
water	56:31	0:0	8	dstlinesize
arg	56:44	56:48	7	outw
water	56:44	0:0	8	outw
arg	56:50	56:57	7	end-y
water	56:50	0:0	8	end
op	56:54	0:0	8	-
water	56:56	0:0	8	y
water	56:58	0:0	6	;
water	57:4	0:0	4	}
return	59:4	59:12	2	0
water	59:11	0:0	3	0
