func	1:0	190:0	0	static int	raw_decode
params	1:21	0:0	1	
param	1:22	1:43	2	AVCodecContext *	avctx
param	1:45	1:55	2	void *	data
param	1:57	1:71	2	int *	got_frame
param	2:22	2:37	2	AVPacket *	avpkt
stmnts	0:0	189:19	1	
decl	4:4	4:72	2	const AVPixFmtDescriptor	*desc
op	4:35	0:0	2	=
call	4:37	4:71	3	av_pix_fmt_desc_get
arg	4:57	4:71	4	avctx->pix_fmt
water	4:57	0:0	5	avctx
op	4:62	0:0	5	->
water	4:64	0:0	5	pix_fmt
decl	5:4	5:53	2	RawVideoContext	*context
op	5:35	0:0	2	=
water	5:37	0:0	2	avctx
op	5:42	0:0	2	->
water	5:44	0:0	2	priv_data
decl	6:4	6:48	2	const uint8_t	*buf
op	6:35	0:0	2	=
water	6:37	0:0	2	avpkt
op	6:42	0:0	2	->
water	6:44	0:0	2	data
decl	7:4	7:48	2	int	buf_size
op	7:35	0:0	2	=
water	7:37	0:0	2	avpkt
op	7:42	0:0	2	->
water	7:44	0:0	2	size
decl	8:4	8:38	2	int	linesize_align
op	8:35	0:0	2	=
water	8:37	0:0	2	4
decl	9:4	9:16	2	int	res
water	9:11	0:0	2	,
decl	9:4	9:16	2	int	len
decl	10:4	10:115	2	int	need_copy
op	10:35	0:0	2	=
op	10:37	0:0	2	!
water	10:38	0:0	2	avpkt
op	10:43	0:0	2	->
water	10:45	0:0	2	buf
op	10:49	0:0	2	||
water	10:52	0:0	2	context
op	10:59	0:0	2	->
water	10:61	0:0	2	is_2_4_bpp
op	10:72	0:0	2	||
water	10:75	0:0	2	context
op	10:82	0:0	2	->
water	10:84	0:0	2	is_yuv2
op	10:92	0:0	2	||
water	10:95	0:0	2	context
op	10:102	0:0	2	->
water	10:104	0:0	2	is_lt_16bpp
decl	12:4	12:29	2	AVFrame	*frame
op	12:23	0:0	2	=
water	12:25	0:0	2	data
decl	13:4	13:29	2	AVPicture	*picture
op	13:23	0:0	2	=
water	13:25	0:0	2	data
water	15:4	0:0	2	frame
op	15:9	0:0	2	->
water	15:11	0:0	2	pict_type
op	15:28	0:0	2	=
water	15:30	0:0	2	AV_PICTURE_TYPE_I
water	15:47	0:0	2	;
water	16:4	0:0	2	frame
op	16:9	0:0	2	->
water	16:11	0:0	2	key_frame
op	16:28	0:0	2	=
water	16:30	0:0	2	1
water	16:31	0:0	2	;
water	18:4	0:0	2	res
op	18:8	0:0	2	=
call	18:10	18:44	2	ff_decode_frame_props
arg	18:32	18:37	3	avctx
water	18:32	0:0	4	avctx
arg	18:39	18:44	3	frame
water	18:39	0:0	4	frame
water	18:45	0:0	2	;
if	19:4	20:18	2	(res < 0)
cond	19:8	19:14	3	res < 0
water	19:8	0:0	4	res
op	19:12	0:0	4	<
water	19:14	0:0	4	0
stmts	20:8	20:18	3	
return	20:8	20:18	4	res
water	20:15	0:0	5	res
call	22:4	22:62	2	av_frame_set_pkt_pos
arg	22:30	22:35	3	frame
water	22:30	0:0	4	frame
arg	22:37	22:62	3	avctx->internal->pkt->pos
water	22:37	0:0	4	avctx
op	22:42	0:0	4	->
water	22:44	0:0	4	internal
op	22:52	0:0	4	->
water	22:54	0:0	4	pkt
op	22:57	0:0	4	->
water	22:59	0:0	4	pos
water	22:63	0:0	2	;
call	23:4	23:67	2	av_frame_set_pkt_duration
arg	23:30	23:35	3	frame
water	23:30	0:0	4	frame
arg	23:37	23:67	3	avctx->internal->pkt->duration
water	23:37	0:0	4	avctx
op	23:42	0:0	4	->
water	23:44	0:0	4	internal
op	23:52	0:0	4	->
water	23:54	0:0	4	pkt
op	23:57	0:0	4	->
water	23:59	0:0	4	duration
water	23:68	0:0	2	;
if	25:4	28:4	2	(context -> tff >= 0)
cond	25:8	25:24	3	context -> tff >= 0
water	25:8	0:0	4	context
op	25:15	0:0	4	->
water	25:17	0:0	4	tff
op	25:21	0:0	4	>=
water	25:24	0:0	4	0
stmts	25:27	28:4	3	
water	25:27	0:0	4	{
water	26:8	0:0	4	frame
op	26:13	0:0	4	->
water	26:15	0:0	4	interlaced_frame
op	26:32	0:0	4	=
water	26:34	0:0	4	1
water	26:35	0:0	4	;
water	27:8	0:0	4	frame
op	27:13	0:0	4	->
water	27:15	0:0	4	top_field_first
op	27:32	0:0	4	=
water	27:34	0:0	4	context
op	27:41	0:0	4	->
water	27:43	0:0	4	tff
water	27:46	0:0	4	;
water	28:4	0:0	4	}
if	30:4	31:18	2	(( res =av_image_check_size (avctx -> width ,avctx -> height ,0 ,avctx ) ) < 0)
cond	30:8	30:77	3	( res =av_image_check_size (avctx -> width ,avctx -> height ,0 ,avctx ) ) < 0
water	30:8	0:0	4	(
water	30:9	0:0	4	res
op	30:13	0:0	4	=
call	30:15	30:72	4	av_image_check_size
arg	30:35	30:47	5	avctx->width
water	30:35	0:0	6	avctx
op	30:40	0:0	6	->
water	30:42	0:0	6	width
arg	30:49	30:62	5	avctx->height
water	30:49	0:0	6	avctx
op	30:54	0:0	6	->
water	30:56	0:0	6	height
arg	30:64	30:65	5	0
water	30:64	0:0	6	0
arg	30:67	30:72	5	avctx
water	30:67	0:0	6	avctx
water	30:73	0:0	4	)
op	30:75	0:0	4	<
water	30:77	0:0	4	0
stmts	31:8	31:18	3	
return	31:8	31:18	4	res
water	31:15	0:0	5	res
if	33:4	34:77	2	(need_copy)
cond	33:8	33:8	3	need_copy
water	33:8	0:0	4	need_copy
stmts	34:8	34:77	3	
water	34:8	0:0	4	frame
op	34:13	0:0	4	->
water	34:15	0:0	4	buf
op	34:18	0:0	4	[
water	34:19	0:0	4	0
op	34:20	0:0	4	]
op	34:22	0:0	4	=
call	34:24	34:76	4	av_buffer_alloc
arg	34:40	34:76	5	FFMAX(context->frame_size,buf_size)
call	34:40	34:75	6	FFMAX
arg	34:46	34:65	7	context->frame_size
water	34:46	0:0	8	context
op	34:53	0:0	8	->
water	34:55	0:0	8	frame_size
arg	34:67	34:75	7	buf_size
water	34:67	0:0	8	buf_size
water	34:77	0:0	4	;
else	35:4	36:49	2
stmts	36:8	36:49	3	
water	36:8	0:0	4	frame
op	36:13	0:0	4	->
water	36:15	0:0	4	buf
op	36:18	0:0	4	[
water	36:19	0:0	4	0
op	36:20	0:0	4	]
op	36:22	0:0	4	=
call	36:24	36:48	4	av_buffer_ref
arg	36:38	36:48	5	avpkt->buf
water	36:38	0:0	6	avpkt
op	36:43	0:0	6	->
water	36:45	0:0	6	buf
water	36:49	0:0	4	;
if	37:4	38:30	2	(! frame -> buf [ 0 ])
cond	37:8	37:21	3	! frame -> buf [ 0 ]
op	37:8	0:0	4	!
water	37:9	0:0	4	frame
op	37:14	0:0	4	->
water	37:16	0:0	4	buf
op	37:19	0:0	4	[
water	37:20	0:0	4	0
op	37:21	0:0	4	]
stmts	38:8	38:30	3	
return	38:8	38:30	4	AVERROR(ENOMEM)
call	38:15	38:29	5	AVERROR
arg	38:23	38:29	6	ENOMEM
water	38:23	0:0	7	ENOMEM
if	41:4	62:4	2	(context -> is_2_4_bpp)
cond	41:8	41:17	3	context -> is_2_4_bpp
water	41:8	0:0	4	context
op	41:15	0:0	4	->
water	41:17	0:0	4	is_2_4_bpp
stmts	41:29	62:4	3	
water	41:29	0:0	4	{
decl	42:8	42:13	4	int	i
decl	43:8	43:42	4	uint8_t	*dst
op	43:21	0:0	4	=
water	43:23	0:0	4	frame
op	43:28	0:0	4	->
water	43:30	0:0	4	buf
op	43:33	0:0	4	[
water	43:34	0:0	4	0
op	43:35	0:0	4	]
op	43:36	0:0	4	->
water	43:38	0:0	4	data
water	44:8	0:0	4	buf_size
op	44:17	0:0	4	=
water	44:19	0:0	4	context
op	44:26	0:0	4	->
water	44:28	0:0	4	frame_size
op	44:39	0:0	4	-
water	44:41	0:0	4	AVPALETTE_SIZE
water	44:55	0:0	4	;
if	45:8	51:8	4	(avctx -> bits_per_coded_sample == 4)
cond	45:12	45:44	5	avctx -> bits_per_coded_sample == 4
water	45:12	0:0	6	avctx
op	45:17	0:0	6	->
water	45:19	0:0	6	bits_per_coded_sample
op	45:41	0:0	6	==
water	45:44	0:0	6	4
stmts	45:47	51:8	5	
water	45:47	0:0	6	{
for	46:12	49:12	6	(i = 0 ;2 * i + 1 < buf_size && i < avpkt -> size;i ++)
forinit	46:17	46:22	7	i = 0 ;
water	46:17	0:0	8	i
op	46:19	0:0	8	=
water	46:21	0:0	8	0
water	46:22	0:0	8	;
cond	46:24	46:57	7	2 * i + 1 < buf_size && i < avpkt -> size
water	46:24	0:0	8	2
op	46:26	0:0	8	*
water	46:28	0:0	8	i
op	46:30	0:0	8	+
water	46:32	0:0	8	1
op	46:34	0:0	8	<
water	46:36	0:0	8	buf_size
op	46:45	0:0	8	&&
water	46:48	0:0	8	i
op	46:49	0:0	8	<
water	46:50	0:0	8	avpkt
op	46:55	0:0	8	->
water	46:57	0:0	8	size
forexpr	46:63	46:64	7	i ++
water	46:63	0:0	8	i
op	46:64	0:0	8	++
stmts	46:68	49:12	7	
water	46:68	0:0	8	{
water	47:16	0:0	8	dst
op	47:19	0:0	8	[
water	47:20	0:0	8	2
op	47:22	0:0	8	*
water	47:24	0:0	8	i
op	47:26	0:0	8	+
water	47:28	0:0	8	0
op	47:29	0:0	8	]
op	47:31	0:0	8	=
water	47:33	0:0	8	buf
op	47:36	0:0	8	[
water	47:37	0:0	8	i
op	47:38	0:0	8	]
op	47:40	0:0	8	>>
water	47:43	0:0	8	4
water	47:44	0:0	8	;
water	48:16	0:0	8	dst
op	48:19	0:0	8	[
water	48:20	0:0	8	2
op	48:22	0:0	8	*
water	48:24	0:0	8	i
op	48:26	0:0	8	+
water	48:28	0:0	8	1
op	48:29	0:0	8	]
op	48:31	0:0	8	=
water	48:33	0:0	8	buf
op	48:36	0:0	8	[
water	48:37	0:0	8	i
op	48:38	0:0	8	]
op	48:40	0:0	8	&
water	48:42	0:0	8	15
water	48:44	0:0	8	;
water	49:12	0:0	8	}
water	50:12	0:0	6	linesize_align
op	50:27	0:0	6	=
water	50:29	0:0	6	8
water	50:30	0:0	6	;
water	51:8	0:0	6	}
else	51:10	60:8	4
stmts	51:15	60:8	5	
water	51:15	0:0	6	{
call	52:12	52:56	6	av_assert0
arg	52:23	52:56	7	avctx->bits_per_coded_sample==2
water	52:23	0:0	8	avctx
op	52:28	0:0	8	->
water	52:30	0:0	8	bits_per_coded_sample
op	52:52	0:0	8	==
water	52:55	0:0	8	2
water	52:57	0:0	6	;
for	53:12	58:12	6	(i = 0 ;4 * i + 3 < buf_size && i < avpkt -> size;i ++)
forinit	53:17	53:22	7	i = 0 ;
water	53:17	0:0	8	i
op	53:19	0:0	8	=
water	53:21	0:0	8	0
water	53:22	0:0	8	;
cond	53:24	53:57	7	4 * i + 3 < buf_size && i < avpkt -> size
water	53:24	0:0	8	4
op	53:26	0:0	8	*
water	53:28	0:0	8	i
op	53:30	0:0	8	+
water	53:32	0:0	8	3
op	53:34	0:0	8	<
water	53:36	0:0	8	buf_size
op	53:45	0:0	8	&&
water	53:48	0:0	8	i
op	53:49	0:0	8	<
water	53:50	0:0	8	avpkt
op	53:55	0:0	8	->
water	53:57	0:0	8	size
forexpr	53:63	53:64	7	i ++
water	53:63	0:0	8	i
op	53:64	0:0	8	++
stmts	53:68	58:12	7	
water	53:68	0:0	8	{
water	54:16	0:0	8	dst
op	54:19	0:0	8	[
water	54:20	0:0	8	4
op	54:22	0:0	8	*
water	54:24	0:0	8	i
op	54:26	0:0	8	+
water	54:28	0:0	8	0
op	54:29	0:0	8	]
op	54:31	0:0	8	=
water	54:33	0:0	8	buf
op	54:36	0:0	8	[
water	54:37	0:0	8	i
op	54:38	0:0	8	]
op	54:40	0:0	8	>>
water	54:43	0:0	8	6
water	54:44	0:0	8	;
water	55:16	0:0	8	dst
op	55:19	0:0	8	[
water	55:20	0:0	8	4
op	55:22	0:0	8	*
water	55:24	0:0	8	i
op	55:26	0:0	8	+
water	55:28	0:0	8	1
op	55:29	0:0	8	]
op	55:31	0:0	8	=
water	55:33	0:0	8	buf
op	55:36	0:0	8	[
water	55:37	0:0	8	i
op	55:38	0:0	8	]
op	55:40	0:0	8	>>
water	55:43	0:0	8	4
op	55:45	0:0	8	&
water	55:47	0:0	8	3
water	55:48	0:0	8	;
water	56:16	0:0	8	dst
op	56:19	0:0	8	[
water	56:20	0:0	8	4
op	56:22	0:0	8	*
water	56:24	0:0	8	i
op	56:26	0:0	8	+
water	56:28	0:0	8	2
op	56:29	0:0	8	]
op	56:31	0:0	8	=
water	56:33	0:0	8	buf
op	56:36	0:0	8	[
water	56:37	0:0	8	i
op	56:38	0:0	8	]
op	56:40	0:0	8	>>
water	56:43	0:0	8	2
op	56:45	0:0	8	&
water	56:47	0:0	8	3
water	56:48	0:0	8	;
water	57:16	0:0	8	dst
op	57:19	0:0	8	[
water	57:20	0:0	8	4
op	57:22	0:0	8	*
water	57:24	0:0	8	i
op	57:26	0:0	8	+
water	57:28	0:0	8	3
op	57:29	0:0	8	]
op	57:31	0:0	8	=
water	57:33	0:0	8	buf
op	57:36	0:0	8	[
water	57:37	0:0	8	i
op	57:38	0:0	8	]
op	57:45	0:0	8	&
water	57:47	0:0	8	3
water	57:48	0:0	8	;
water	58:12	0:0	8	}
water	59:12	0:0	6	linesize_align
op	59:27	0:0	6	=
water	59:29	0:0	6	16
water	59:31	0:0	6	;
water	60:8	0:0	6	}
water	61:8	0:0	4	buf
op	61:12	0:0	4	=
water	61:14	0:0	4	dst
water	61:17	0:0	4	;
water	62:4	0:0	4	}
else	62:6	86:4	2
stmts	62:11	86:4	3	
if	62:11	86:4	4	(context -> is_lt_16bpp)
cond	62:15	62:24	5	context -> is_lt_16bpp
water	62:15	0:0	6	context
op	62:22	0:0	6	->
water	62:24	0:0	6	is_lt_16bpp
stmts	62:37	86:4	5	
water	62:37	0:0	6	{
decl	63:8	63:42	6	uint8_t	*dst
op	63:21	0:0	6	=
water	63:23	0:0	6	frame
op	63:28	0:0	6	->
water	63:30	0:0	6	buf
op	63:33	0:0	6	[
water	63:34	0:0	6	0
op	63:35	0:0	6	]
op	63:36	0:0	6	->
water	63:38	0:0	6	data
decl	64:8	64:75	6	int	packed
op	64:19	0:0	6	=
water	64:21	0:0	6	(
water	64:22	0:0	6	avctx
op	64:27	0:0	6	->
water	64:29	0:0	6	codec_tag
op	64:39	0:0	6	&
water	64:41	0:0	6	0
water	64:42	0:0	6	xFFFFFF
water	64:49	0:0	6	)
op	64:51	0:0	6	==
call	64:54	64:74	7	MKTAG
arg	64:60	64:63	8	'B'
water	64:60	0:0	9	'B'
arg	64:64	64:67	8	'I'
water	64:64	0:0	9	'I'
arg	64:68	64:71	8	'T'
water	64:68	0:0	9	'T'
arg	64:73	64:74	8	0
water	64:73	0:0	9	0
decl	65:8	65:44	6	int	swap
op	65:19	0:0	6	=
water	65:22	0:0	6	avctx
op	65:27	0:0	6	->
water	65:29	0:0	6	codec_tag
op	65:39	0:0	6	>>
water	65:42	0:0	6	24
if	67:8	78:8	6	(packed && swap)
cond	67:12	67:22	7	packed && swap
water	67:12	0:0	8	packed
op	67:19	0:0	8	&&
water	67:22	0:0	8	swap
stmts	67:28	78:8	7	
water	67:28	0:0	8	{
call	68:12	68:97	8	av_fast_padded_malloc
arg	68:34	68:57	9	&context->bitstream_buf
op	68:34	0:0	10	&
water	68:35	0:0	10	context
op	68:42	0:0	10	->
water	68:44	0:0	10	bitstream_buf
arg	68:59	68:87	9	&context->bitstream_buf_size
op	68:59	0:0	10	&
water	68:60	0:0	10	context
op	68:67	0:0	10	->
water	68:69	0:0	10	bitstream_buf_size
arg	68:89	68:97	9	buf_size
water	68:89	0:0	10	buf_size
water	68:98	0:0	8	;
if	69:12	70:38	8	(! context -> bitstream_buf)
cond	69:16	69:26	9	! context -> bitstream_buf
op	69:16	0:0	10	!
water	69:17	0:0	10	context
op	69:24	0:0	10	->
water	69:26	0:0	10	bitstream_buf
stmts	70:16	70:38	9	
return	70:16	70:38	10	AVERROR(ENOMEM)
call	70:23	70:37	11	AVERROR
arg	70:31	70:37	12	ENOMEM
water	70:31	0:0	13	ENOMEM
if	71:12	72:102	8	(swap == 16)
cond	71:16	71:24	9	swap == 16
water	71:16	0:0	10	swap
op	71:21	0:0	10	==
water	71:24	0:0	10	16
stmts	72:16	72:102	9	
call	72:16	72:101	10	context->bbdsp.bswap16_buf
arg	72:43	72:65	11	context->bitstream_buf
water	72:43	0:0	12	context
op	72:50	0:0	12	->
water	72:52	0:0	12	bitstream_buf
arg	72:67	72:87	11	(constuint16_t*)buf
water	72:67	0:0	12	(
water	72:68	0:0	12	const
water	72:74	0:0	12	uint16_t
op	72:82	0:0	12	*
water	72:83	0:0	12	)
water	72:84	0:0	12	buf
arg	72:89	72:101	11	buf_size/2
water	72:89	0:0	12	buf_size
op	72:98	0:0	12	/
water	72:100	0:0	12	2
water	72:102	0:0	10	;
else	73:12	74:100	8
stmts	73:17	74:100	9	
if	73:17	74:100	10	(swap == 32)
cond	73:21	73:29	11	swap == 32
water	73:21	0:0	12	swap
op	73:26	0:0	12	==
water	73:29	0:0	12	32
stmts	74:16	74:100	11	
call	74:16	74:99	12	context->bbdsp.bswap_buf
arg	74:41	74:63	13	context->bitstream_buf
water	74:41	0:0	14	context
op	74:48	0:0	14	->
water	74:50	0:0	14	bitstream_buf
arg	74:65	74:85	13	(constuint32_t*)buf
water	74:65	0:0	14	(
water	74:66	0:0	14	const
water	74:72	0:0	14	uint32_t
op	74:80	0:0	14	*
water	74:81	0:0	14	)
water	74:82	0:0	14	buf
arg	74:87	74:99	13	buf_size/4
water	74:87	0:0	14	buf_size
op	74:96	0:0	14	/
water	74:98	0:0	14	4
water	74:100	0:0	12	;
else	75:12	76:42	8
stmts	76:16	76:42	9	
return	76:16	76:42	10	AVERROR_INVALIDDATA
water	76:23	0:0	11	AVERROR_INVALIDDATA
water	77:12	0:0	8	buf
op	77:16	0:0	8	=
water	77:18	0:0	8	context
op	77:25	0:0	8	->
water	77:27	0:0	8	bitstream_buf
water	77:40	0:0	8	;
water	78:8	0:0	8	}
if	80:8	81:56	6	(desc -> flags & AV_PIX_FMT_FLAG_BE)
cond	80:12	80:26	7	desc -> flags & AV_PIX_FMT_FLAG_BE
water	80:12	0:0	8	desc
op	80:16	0:0	8	->
water	80:18	0:0	8	flags
op	80:24	0:0	8	&
water	80:26	0:0	8	AV_PIX_FMT_FLAG_BE
stmts	81:12	81:56	7	
call	81:12	81:55	8	scale16be
arg	81:22	81:27	9	avctx
water	81:22	0:0	10	avctx
arg	81:29	81:32	9	dst
water	81:29	0:0	10	dst
arg	81:34	81:37	9	buf
water	81:34	0:0	10	buf
arg	81:39	81:47	9	buf_size
water	81:39	0:0	10	buf_size
arg	81:49	81:55	9	packed
water	81:49	0:0	10	packed
water	81:56	0:0	8	;
else	82:8	83:56	6
stmts	83:12	83:56	7	
call	83:12	83:55	8	scale16le
arg	83:22	83:27	9	avctx
water	83:22	0:0	10	avctx
arg	83:29	83:32	9	dst
water	83:29	0:0	10	dst
arg	83:34	83:37	9	buf
water	83:34	0:0	10	buf
arg	83:39	83:47	9	buf_size
water	83:39	0:0	10	buf_size
arg	83:49	83:55	9	packed
water	83:49	0:0	10	packed
water	83:56	0:0	8	;
water	85:8	0:0	6	buf
op	85:12	0:0	6	=
water	85:14	0:0	6	dst
water	85:17	0:0	6	;
water	86:4	0:0	6	}
else	86:6	89:4	2
stmts	86:11	89:4	3	
if	86:11	89:4	4	(need_copy)
cond	86:15	86:15	5	need_copy
water	86:15	0:0	6	need_copy
stmts	86:26	89:4	5	
water	86:26	0:0	6	{
call	87:8	87:49	6	memcpy
arg	87:15	87:34	7	frame->buf[0]->data
water	87:15	0:0	8	frame
op	87:20	0:0	8	->
water	87:22	0:0	8	buf
op	87:25	0:0	8	[
water	87:26	0:0	8	0
op	87:27	0:0	8	]
op	87:28	0:0	8	->
water	87:30	0:0	8	data
arg	87:36	87:39	7	buf
water	87:36	0:0	8	buf
arg	87:41	87:49	7	buf_size
water	87:41	0:0	8	buf_size
water	87:50	0:0	6	;
water	88:8	0:0	6	buf
op	88:12	0:0	6	=
water	88:14	0:0	6	frame
op	88:19	0:0	6	->
water	88:21	0:0	6	buf
op	88:24	0:0	6	[
water	88:25	0:0	6	0
op	88:26	0:0	6	]
op	88:27	0:0	6	->
water	88:29	0:0	6	data
water	88:33	0:0	6	;
water	89:4	0:0	6	}
if	91:4	93:45	2	(avctx -> codec_tag ==MKTAG ('A' ,'V' ,'1' ,'x' ) || avctx -> codec_tag ==MKTAG ('A' ,'V' ,'u' ,'p' ))
cond	91:8	92:52	3	avctx -> codec_tag ==MKTAG ('A' ,'V' ,'1' ,'x' ) || avctx -> codec_tag ==MKTAG ('A' ,'V' ,'u' ,'p' )
water	91:8	0:0	4	avctx
op	91:13	0:0	4	->
water	91:15	0:0	4	codec_tag
op	91:25	0:0	4	==
call	91:28	91:52	4	MKTAG
arg	91:34	91:37	5	'A'
water	91:34	0:0	6	'A'
arg	91:39	91:42	5	'V'
water	91:39	0:0	6	'V'
arg	91:44	91:47	5	'1'
water	91:44	0:0	6	'1'
arg	91:49	91:52	5	'x'
water	91:49	0:0	6	'x'
op	91:54	0:0	4	||
water	92:8	0:0	4	avctx
op	92:13	0:0	4	->
water	92:15	0:0	4	codec_tag
op	92:25	0:0	4	==
call	92:28	92:52	4	MKTAG
arg	92:34	92:37	5	'A'
water	92:34	0:0	6	'A'
arg	92:39	92:42	5	'V'
water	92:39	0:0	6	'V'
arg	92:44	92:47	5	'u'
water	92:44	0:0	6	'u'
arg	92:49	92:52	5	'p'
water	92:49	0:0	6	'p'
stmts	93:8	93:45	3	
water	93:8	0:0	4	buf
op	93:12	0:0	4	+=
water	93:15	0:0	4	buf_size
op	93:24	0:0	4	-
water	93:26	0:0	4	context
op	93:33	0:0	4	->
water	93:35	0:0	4	frame_size
water	93:45	0:0	4	;
water	95:4	0:0	2	len
op	95:8	0:0	2	=
water	95:10	0:0	2	context
op	95:17	0:0	2	->
water	95:19	0:0	2	frame_size
op	95:30	0:0	2	-
water	95:32	0:0	2	(
water	95:33	0:0	2	avctx
op	95:38	0:0	2	->
water	95:40	0:0	2	pix_fmt
op	95:47	0:0	2	==
water	95:49	0:0	2	AV_PIX_FMT_PAL8
water	95:65	0:0	2	?
water	95:67	0:0	2	AVPALETTE_SIZE
water	95:82	0:0	2	:
water	95:84	0:0	2	0
water	95:85	0:0	2	)
water	95:86	0:0	2	;
if	96:4	100:4	2	(buf_size < len && ( avctx -> codec_tag & 0 xFFFFFF ) !=MKTAG ('B' ,'I' ,'T' ,0 ))
cond	96:8	96:79	3	buf_size < len && ( avctx -> codec_tag & 0 xFFFFFF ) !=MKTAG ('B' ,'I' ,'T' ,0 )
water	96:8	0:0	4	buf_size
op	96:17	0:0	4	<
water	96:19	0:0	4	len
op	96:23	0:0	4	&&
water	96:26	0:0	4	(
water	96:27	0:0	4	avctx
op	96:32	0:0	4	->
water	96:34	0:0	4	codec_tag
op	96:44	0:0	4	&
water	96:46	0:0	4	0
water	96:47	0:0	4	xFFFFFF
water	96:54	0:0	4	)
op	96:56	0:0	4	!=
call	96:59	96:79	4	MKTAG
arg	96:65	96:68	5	'B'
water	96:65	0:0	6	'B'
arg	96:69	96:72	5	'I'
water	96:69	0:0	6	'I'
arg	96:73	96:76	5	'T'
water	96:73	0:0	6	'T'
arg	96:78	96:79	5	0
water	96:78	0:0	6	0
stmts	96:82	100:4	3	
water	96:82	0:0	4	{
call	97:8	97:115	4	av_log
arg	97:15	97:20	5	avctx
water	97:15	0:0	6	avctx
arg	97:22	97:34	5	AV_LOG_ERROR
water	97:22	0:0	6	AV_LOG_ERROR
arg	97:36	97:100	5	"Invalid buffer size, packet size %d < expected frame_size %d\n"
water	97:36	0:0	6	"Invalid buffer size, packet size %d < expected frame_size %d\n"
arg	97:102	97:110	5	buf_size
water	97:102	0:0	6	buf_size
arg	97:112	97:115	5	len
water	97:112	0:0	6	len
water	97:116	0:0	4	;
call	98:8	98:38	4	av_buffer_unref
arg	98:24	98:38	5	&frame->buf[0]
op	98:24	0:0	6	&
water	98:25	0:0	6	frame
op	98:30	0:0	6	->
water	98:32	0:0	6	buf
op	98:35	0:0	6	[
water	98:36	0:0	6	0
op	98:37	0:0	6	]
water	98:39	0:0	4	;
return	99:8	99:30	4	AVERROR(EINVAL)
call	99:15	99:29	5	AVERROR
arg	99:23	99:29	6	EINVAL
water	99:23	0:0	7	EINVAL
water	100:4	0:0	4	}
if	102:4	106:4	2	(( res =avpicture_fill (picture ,buf ,avctx -> pix_fmt ,avctx -> width ,avctx -> height ) ) < 0)
cond	102:8	103:62	3	( res =avpicture_fill (picture ,buf ,avctx -> pix_fmt ,avctx -> width ,avctx -> height ) ) < 0
water	102:8	0:0	4	(
water	102:9	0:0	4	res
op	102:13	0:0	4	=
call	102:15	103:57	4	avpicture_fill
arg	102:30	102:37	5	picture
water	102:30	0:0	6	picture
arg	102:39	102:42	5	buf
water	102:39	0:0	6	buf
arg	102:44	102:58	5	avctx->pix_fmt
water	102:44	0:0	6	avctx
op	102:49	0:0	6	->
water	102:51	0:0	6	pix_fmt
arg	103:30	103:42	5	avctx->width
water	103:30	0:0	6	avctx
op	103:35	0:0	6	->
water	103:37	0:0	6	width
arg	103:44	103:57	5	avctx->height
water	103:44	0:0	6	avctx
op	103:49	0:0	6	->
water	103:51	0:0	6	height
water	103:58	0:0	4	)
op	103:60	0:0	4	<
water	103:62	0:0	4	0
stmts	103:65	106:4	3	
water	103:65	0:0	4	{
call	104:8	104:38	4	av_buffer_unref
arg	104:24	104:38	5	&frame->buf[0]
op	104:24	0:0	6	&
water	104:25	0:0	6	frame
op	104:30	0:0	6	->
water	104:32	0:0	6	buf
op	104:35	0:0	6	[
water	104:36	0:0	6	0
op	104:37	0:0	6	]
water	104:39	0:0	4	;
return	105:8	105:18	4	res
water	105:15	0:0	5	res
water	106:4	0:0	4	}
if	108:4	122:4	2	(avctx -> pix_fmt == AV_PIX_FMT_PAL8)
cond	108:8	108:26	3	avctx -> pix_fmt == AV_PIX_FMT_PAL8
water	108:8	0:0	4	avctx
op	108:13	0:0	4	->
water	108:15	0:0	4	pix_fmt
op	108:23	0:0	4	==
water	108:26	0:0	4	AV_PIX_FMT_PAL8
stmts	108:43	122:4	3	
water	108:43	0:0	4	{
decl	109:8	110:58	4	const uint8_t	*pal
op	109:27	0:0	4	=
call	109:29	110:57	5	av_packet_get_side_data
arg	109:53	109:58	6	avpkt
water	109:53	0:0	7	avpkt
arg	109:60	109:79	6	AV_PKT_DATA_PALETTE
water	109:60	0:0	7	AV_PKT_DATA_PALETTE
arg	110:53	110:57	6	NULL
water	110:53	0:0	7	NULL
if	112:8	121:8	4	(pal)
cond	112:12	112:12	5	pal
water	112:12	0:0	6	pal
stmts	112:17	121:8	5	
water	112:17	0:0	6	{
call	113:12	113:45	6	av_buffer_unref
arg	113:28	113:45	7	&context->palette
op	113:28	0:0	8	&
water	113:29	0:0	8	context
op	113:36	0:0	8	->
water	113:38	0:0	8	palette
water	113:46	0:0	6	;
water	114:12	0:0	6	context
op	114:19	0:0	6	->
water	114:21	0:0	6	palette
op	114:29	0:0	6	=
call	114:31	114:61	6	av_buffer_alloc
arg	114:47	114:61	7	AVPALETTE_SIZE
water	114:47	0:0	8	AVPALETTE_SIZE
water	114:62	0:0	6	;
if	115:12	118:12	6	(! context -> palette)
cond	115:16	115:26	7	! context -> palette
op	115:16	0:0	8	!
water	115:17	0:0	8	context
op	115:24	0:0	8	->
water	115:26	0:0	8	palette
stmts	115:35	118:12	7	
water	115:35	0:0	8	{
call	116:16	116:46	8	av_buffer_unref
arg	116:32	116:46	9	&frame->buf[0]
op	116:32	0:0	10	&
water	116:33	0:0	10	frame
op	116:38	0:0	10	->
water	116:40	0:0	10	buf
op	116:43	0:0	10	[
water	116:44	0:0	10	0
op	116:45	0:0	10	]
water	116:47	0:0	8	;
return	117:16	117:38	8	AVERROR(ENOMEM)
call	117:23	117:37	9	AVERROR
arg	117:31	117:37	10	ENOMEM
water	117:31	0:0	11	ENOMEM
water	118:12	0:0	8	}
call	119:12	119:62	6	memcpy
arg	119:19	119:41	7	context->palette->data
water	119:19	0:0	8	context
op	119:26	0:0	8	->
water	119:28	0:0	8	palette
op	119:35	0:0	8	->
water	119:37	0:0	8	data
arg	119:43	119:46	7	pal
water	119:43	0:0	8	pal
arg	119:48	119:62	7	AVPALETTE_SIZE
water	119:48	0:0	8	AVPALETTE_SIZE
water	119:63	0:0	6	;
water	120:12	0:0	6	frame
op	120:17	0:0	6	->
water	120:19	0:0	6	palette_has_changed
op	120:39	0:0	6	=
water	120:41	0:0	6	1
water	120:42	0:0	6	;
water	121:8	0:0	6	}
water	122:4	0:0	4	}
if	124:4	132:72	2	(( avctx -> pix_fmt == AV_PIX_FMT_BGR24 || avctx -> pix_fmt == AV_PIX_FMT_GRAY8 || avctx -> pix_fmt == AV_PIX_FMT_RGB555LE || avctx -> pix_fmt == AV_PIX_FMT_RGB555BE || avctx -> pix_fmt == AV_PIX_FMT_RGB565LE || avctx -> pix_fmt == AV_PIX_FMT_MONOWHITE || avctx -> pix_fmt == AV_PIX_FMT_PAL8 ) &&FFALIGN (frame -> linesize [ 0 ] ,linesize_align ) * avctx -> height <= buf_size)
cond	124:8	131:71	3	( avctx -> pix_fmt == AV_PIX_FMT_BGR24 || avctx -> pix_fmt == AV_PIX_FMT_GRAY8 || avctx -> pix_fmt == AV_PIX_FMT_RGB555LE || avctx -> pix_fmt == AV_PIX_FMT_RGB555BE || avctx -> pix_fmt == AV_PIX_FMT_RGB565LE || avctx -> pix_fmt == AV_PIX_FMT_MONOWHITE || avctx -> pix_fmt == AV_PIX_FMT_PAL8 ) &&FFALIGN (frame -> linesize [ 0 ] ,linesize_align ) * avctx -> height <= buf_size
water	124:8	0:0	4	(
water	124:9	0:0	4	avctx
op	124:14	0:0	4	->
water	124:16	0:0	4	pix_fmt
op	124:23	0:0	4	==
water	124:25	0:0	4	AV_PIX_FMT_BGR24
op	124:45	0:0	4	||
water	125:8	0:0	4	avctx
op	125:13	0:0	4	->
water	125:15	0:0	4	pix_fmt
op	125:22	0:0	4	==
water	125:24	0:0	4	AV_PIX_FMT_GRAY8
op	125:44	0:0	4	||
water	126:8	0:0	4	avctx
op	126:13	0:0	4	->
water	126:15	0:0	4	pix_fmt
op	126:22	0:0	4	==
water	126:24	0:0	4	AV_PIX_FMT_RGB555LE
op	126:44	0:0	4	||
water	127:8	0:0	4	avctx
op	127:13	0:0	4	->
water	127:15	0:0	4	pix_fmt
op	127:22	0:0	4	==
water	127:24	0:0	4	AV_PIX_FMT_RGB555BE
op	127:44	0:0	4	||
water	128:8	0:0	4	avctx
op	128:13	0:0	4	->
water	128:15	0:0	4	pix_fmt
op	128:22	0:0	4	==
water	128:24	0:0	4	AV_PIX_FMT_RGB565LE
op	128:44	0:0	4	||
water	129:8	0:0	4	avctx
op	129:13	0:0	4	->
water	129:15	0:0	4	pix_fmt
op	129:22	0:0	4	==
water	129:24	0:0	4	AV_PIX_FMT_MONOWHITE
op	129:45	0:0	4	||
water	130:8	0:0	4	avctx
op	130:13	0:0	4	->
water	130:15	0:0	4	pix_fmt
op	130:22	0:0	4	==
water	130:24	0:0	4	AV_PIX_FMT_PAL8
water	130:39	0:0	4	)
op	130:41	0:0	4	&&
call	131:8	131:50	4	FFALIGN
arg	131:16	131:34	5	frame->linesize[0]
water	131:16	0:0	6	frame
op	131:21	0:0	6	->
water	131:23	0:0	6	linesize
op	131:31	0:0	6	[
water	131:32	0:0	6	0
op	131:33	0:0	6	]
arg	131:36	131:50	5	linesize_align
water	131:36	0:0	6	linesize_align
op	131:52	0:0	4	*
water	131:54	0:0	4	avctx
op	131:59	0:0	4	->
water	131:61	0:0	4	height
op	131:68	0:0	4	<=
water	131:71	0:0	4	buf_size
stmts	132:8	132:72	3	
water	132:8	0:0	4	frame
op	132:13	0:0	4	->
water	132:15	0:0	4	linesize
op	132:23	0:0	4	[
water	132:24	0:0	4	0
op	132:25	0:0	4	]
op	132:27	0:0	4	=
call	132:29	132:71	4	FFALIGN
arg	132:37	132:55	5	frame->linesize[0]
water	132:37	0:0	6	frame
op	132:42	0:0	6	->
water	132:44	0:0	6	linesize
op	132:52	0:0	6	[
water	132:53	0:0	6	0
op	132:54	0:0	6	]
arg	132:57	132:71	5	linesize_align
water	132:57	0:0	6	linesize_align
water	132:72	0:0	4	;
if	134:4	141:4	2	(avctx -> pix_fmt == AV_PIX_FMT_NV12 && avctx -> codec_tag ==MKTAG ('N' ,'V' ,'1' ,'2' ) &&FFALIGN (frame -> linesize [ 0 ] ,linesize_align ) * avctx -> height +FFALIGN (frame -> linesize [ 1 ] ,linesize_align ) * ( ( avctx -> height + 1 ) / 2 ) <= buf_size)
cond	134:8	136:83	3	avctx -> pix_fmt == AV_PIX_FMT_NV12 && avctx -> codec_tag ==MKTAG ('N' ,'V' ,'1' ,'2' ) &&FFALIGN (frame -> linesize [ 0 ] ,linesize_align ) * avctx -> height +FFALIGN (frame -> linesize [ 1 ] ,linesize_align ) * ( ( avctx -> height + 1 ) / 2 ) <= buf_size
water	134:8	0:0	4	avctx
op	134:13	0:0	4	->
water	134:15	0:0	4	pix_fmt
op	134:23	0:0	4	==
water	134:26	0:0	4	AV_PIX_FMT_NV12
op	134:42	0:0	4	&&
water	134:45	0:0	4	avctx
op	134:50	0:0	4	->
water	134:52	0:0	4	codec_tag
op	134:62	0:0	4	==
call	134:65	134:89	4	MKTAG
arg	134:71	134:74	5	'N'
water	134:71	0:0	6	'N'
arg	134:76	134:79	5	'V'
water	134:76	0:0	6	'V'
arg	134:81	134:84	5	'1'
water	134:81	0:0	6	'1'
arg	134:86	134:89	5	'2'
water	134:86	0:0	6	'2'
op	134:91	0:0	4	&&
call	135:8	135:50	4	FFALIGN
arg	135:16	135:34	5	frame->linesize[0]
water	135:16	0:0	6	frame
op	135:21	0:0	6	->
water	135:23	0:0	6	linesize
op	135:31	0:0	6	[
water	135:32	0:0	6	0
op	135:33	0:0	6	]
arg	135:36	135:50	5	linesize_align
water	135:36	0:0	6	linesize_align
op	135:52	0:0	4	*
water	135:54	0:0	4	avctx
op	135:59	0:0	4	->
water	135:61	0:0	4	height
op	135:68	0:0	4	+
call	136:8	136:50	4	FFALIGN
arg	136:16	136:34	5	frame->linesize[1]
water	136:16	0:0	6	frame
op	136:21	0:0	6	->
water	136:23	0:0	6	linesize
op	136:31	0:0	6	[
water	136:32	0:0	6	1
op	136:33	0:0	6	]
arg	136:36	136:50	5	linesize_align
water	136:36	0:0	6	linesize_align
op	136:52	0:0	4	*
water	136:54	0:0	4	(
water	136:55	0:0	4	(
water	136:56	0:0	4	avctx
op	136:61	0:0	4	->
water	136:63	0:0	4	height
op	136:70	0:0	4	+
water	136:72	0:0	4	1
water	136:73	0:0	4	)
op	136:75	0:0	4	/
water	136:77	0:0	4	2
water	136:78	0:0	4	)
op	136:80	0:0	4	<=
water	136:83	0:0	4	buf_size
stmts	136:93	141:4	3	
water	136:93	0:0	4	{
decl	137:8	137:61	4	int	la0
op	137:16	0:0	4	=
call	137:18	137:60	5	FFALIGN
arg	137:26	137:44	6	frame->linesize[0]
water	137:26	0:0	7	frame
op	137:31	0:0	7	->
water	137:33	0:0	7	linesize
op	137:41	0:0	7	[
water	137:42	0:0	7	0
op	137:43	0:0	7	]
arg	137:46	137:60	6	linesize_align
water	137:46	0:0	7	linesize_align
water	138:8	0:0	4	frame
op	138:13	0:0	4	->
water	138:15	0:0	4	data
op	138:19	0:0	4	[
water	138:20	0:0	4	1
op	138:21	0:0	4	]
op	138:23	0:0	4	+=
water	138:26	0:0	4	(
water	138:27	0:0	4	la0
op	138:31	0:0	4	-
water	138:33	0:0	4	frame
op	138:38	0:0	4	->
water	138:40	0:0	4	linesize
op	138:48	0:0	4	[
water	138:49	0:0	4	0
op	138:50	0:0	4	]
water	138:51	0:0	4	)
op	138:53	0:0	4	*
water	138:55	0:0	4	avctx
op	138:60	0:0	4	->
water	138:62	0:0	4	height
water	138:68	0:0	4	;
water	139:8	0:0	4	frame
op	139:13	0:0	4	->
water	139:15	0:0	4	linesize
op	139:23	0:0	4	[
water	139:24	0:0	4	0
op	139:25	0:0	4	]
op	139:27	0:0	4	=
water	139:29	0:0	4	la0
water	139:32	0:0	4	;
water	140:8	0:0	4	frame
op	140:13	0:0	4	->
water	140:15	0:0	4	linesize
op	140:23	0:0	4	[
water	140:24	0:0	4	1
op	140:25	0:0	4	]
op	140:27	0:0	4	=
call	140:29	140:71	4	FFALIGN
arg	140:37	140:55	5	frame->linesize[1]
water	140:37	0:0	6	frame
op	140:42	0:0	6	->
water	140:44	0:0	6	linesize
op	140:52	0:0	6	[
water	140:53	0:0	6	1
op	140:54	0:0	6	]
arg	140:57	140:71	5	linesize_align
water	140:57	0:0	6	linesize_align
water	140:72	0:0	4	;
water	141:4	0:0	4	}
if	143:4	151:4	2	(( avctx -> pix_fmt == AV_PIX_FMT_PAL8 && buf_size < context -> frame_size ) || ( desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL ))
cond	143:8	144:48	3	( avctx -> pix_fmt == AV_PIX_FMT_PAL8 && buf_size < context -> frame_size ) || ( desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL )
water	143:8	0:0	4	(
water	143:9	0:0	4	avctx
op	143:14	0:0	4	->
water	143:16	0:0	4	pix_fmt
op	143:24	0:0	4	==
water	143:27	0:0	4	AV_PIX_FMT_PAL8
op	143:43	0:0	4	&&
water	143:46	0:0	4	buf_size
op	143:55	0:0	4	<
water	143:57	0:0	4	context
op	143:64	0:0	4	->
water	143:66	0:0	4	frame_size
water	143:76	0:0	4	)
op	143:78	0:0	4	||
water	144:8	0:0	4	(
water	144:9	0:0	4	desc
op	144:13	0:0	4	->
water	144:15	0:0	4	flags
op	144:21	0:0	4	&
water	144:23	0:0	4	AV_PIX_FMT_FLAG_PSEUDOPAL
water	144:48	0:0	4	)
stmts	144:51	151:4	3	
water	144:51	0:0	4	{
water	145:8	0:0	4	frame
op	145:13	0:0	4	->
water	145:15	0:0	4	buf
op	145:18	0:0	4	[
water	145:19	0:0	4	1
op	145:20	0:0	4	]
op	145:23	0:0	4	=
call	145:25	145:55	4	av_buffer_ref
arg	145:39	145:55	5	context->palette
water	145:39	0:0	6	context
op	145:46	0:0	6	->
water	145:48	0:0	6	palette
water	145:56	0:0	4	;
if	146:8	149:8	4	(! frame -> buf [ 1 ])
cond	146:12	146:25	5	! frame -> buf [ 1 ]
op	146:12	0:0	6	!
water	146:13	0:0	6	frame
op	146:18	0:0	6	->
water	146:20	0:0	6	buf
op	146:23	0:0	6	[
water	146:24	0:0	6	1
op	146:25	0:0	6	]
stmts	146:28	149:8	5	
water	146:28	0:0	6	{
call	147:12	147:42	6	av_buffer_unref
arg	147:28	147:42	7	&frame->buf[0]
op	147:28	0:0	8	&
water	147:29	0:0	8	frame
op	147:34	0:0	8	->
water	147:36	0:0	8	buf
op	147:39	0:0	8	[
water	147:40	0:0	8	0
op	147:41	0:0	8	]
water	147:43	0:0	6	;
return	148:12	148:34	6	AVERROR(ENOMEM)
call	148:19	148:33	7	AVERROR
arg	148:27	148:33	8	ENOMEM
water	148:27	0:0	9	ENOMEM
water	149:8	0:0	6	}
water	150:8	0:0	4	frame
op	150:13	0:0	4	->
water	150:15	0:0	4	data
op	150:19	0:0	4	[
water	150:20	0:0	4	1
op	150:21	0:0	4	]
op	150:23	0:0	4	=
water	150:25	0:0	4	frame
op	150:30	0:0	4	->
water	150:32	0:0	4	buf
op	150:35	0:0	4	[
water	150:36	0:0	4	1
op	150:37	0:0	4	]
op	150:38	0:0	4	->
water	150:40	0:0	4	data
water	150:44	0:0	4	;
water	151:4	0:0	4	}
if	153:4	155:58	2	(avctx -> pix_fmt == AV_PIX_FMT_BGR24 && ( ( frame -> linesize [ 0 ] + 3 ) & ~3 ) * avctx -> height <= buf_size)
cond	153:8	154:59	3	avctx -> pix_fmt == AV_PIX_FMT_BGR24 && ( ( frame -> linesize [ 0 ] + 3 ) & ~3 ) * avctx -> height <= buf_size
water	153:8	0:0	4	avctx
op	153:13	0:0	4	->
water	153:15	0:0	4	pix_fmt
op	153:23	0:0	4	==
water	153:26	0:0	4	AV_PIX_FMT_BGR24
op	153:43	0:0	4	&&
water	154:8	0:0	4	(
water	154:9	0:0	4	(
water	154:10	0:0	4	frame
op	154:15	0:0	4	->
water	154:17	0:0	4	linesize
op	154:25	0:0	4	[
water	154:26	0:0	4	0
op	154:27	0:0	4	]
op	154:29	0:0	4	+
water	154:31	0:0	4	3
water	154:32	0:0	4	)
op	154:34	0:0	4	&
water	154:36	0:0	4	~3
water	154:38	0:0	4	)
op	154:40	0:0	4	*
water	154:42	0:0	4	avctx
op	154:47	0:0	4	->
water	154:49	0:0	4	height
op	154:56	0:0	4	<=
water	154:59	0:0	4	buf_size
stmts	155:8	155:58	3	
water	155:8	0:0	4	frame
op	155:13	0:0	4	->
water	155:15	0:0	4	linesize
op	155:23	0:0	4	[
water	155:24	0:0	4	0
op	155:25	0:0	4	]
op	155:27	0:0	4	=
water	155:29	0:0	4	(
water	155:30	0:0	4	frame
op	155:35	0:0	4	->
water	155:37	0:0	4	linesize
op	155:45	0:0	4	[
water	155:46	0:0	4	0
op	155:47	0:0	4	]
op	155:49	0:0	4	+
water	155:51	0:0	4	3
water	155:52	0:0	4	)
op	155:54	0:0	4	&
water	155:56	0:0	4	~3
water	155:58	0:0	4	;
if	157:4	158:28	2	(context -> flip)
cond	157:8	157:17	3	context -> flip
water	157:8	0:0	4	context
op	157:15	0:0	4	->
water	157:17	0:0	4	flip
stmts	158:8	158:28	3	
call	158:8	158:27	4	flip
arg	158:13	158:18	5	avctx
water	158:13	0:0	6	avctx
arg	158:20	158:27	5	picture
water	158:20	0:0	6	picture
water	158:28	0:0	4	;
if	160:4	164:61	2	(avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'1' ,'2' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'1' ,'6' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'2' ,'4' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'U' ,'9' ))
cond	160:8	163:52	3	avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'1' ,'2' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'1' ,'6' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'2' ,'4' ) || avctx -> codec_tag ==MKTAG ('Y' ,'V' ,'U' ,'9' )
water	160:8	0:0	4	avctx
op	160:13	0:0	4	->
water	160:15	0:0	4	codec_tag
op	160:25	0:0	4	==
call	160:28	160:52	4	MKTAG
arg	160:34	160:37	5	'Y'
water	160:34	0:0	6	'Y'
arg	160:39	160:42	5	'V'
water	160:39	0:0	6	'V'
arg	160:44	160:47	5	'1'
water	160:44	0:0	6	'1'
arg	160:49	160:52	5	'2'
water	160:49	0:0	6	'2'
op	160:54	0:0	4	||
water	161:8	0:0	4	avctx
op	161:13	0:0	4	->
water	161:15	0:0	4	codec_tag
op	161:25	0:0	4	==
call	161:28	161:52	4	MKTAG
arg	161:34	161:37	5	'Y'
water	161:34	0:0	6	'Y'
arg	161:39	161:42	5	'V'
water	161:39	0:0	6	'V'
arg	161:44	161:47	5	'1'
water	161:44	0:0	6	'1'
arg	161:49	161:52	5	'6'
water	161:49	0:0	6	'6'
op	161:54	0:0	4	||
water	162:8	0:0	4	avctx
op	162:13	0:0	4	->
water	162:15	0:0	4	codec_tag
op	162:25	0:0	4	==
call	162:28	162:52	4	MKTAG
arg	162:34	162:37	5	'Y'
water	162:34	0:0	6	'Y'
arg	162:39	162:42	5	'V'
water	162:39	0:0	6	'V'
arg	162:44	162:47	5	'2'
water	162:44	0:0	6	'2'
arg	162:49	162:52	5	'4'
water	162:49	0:0	6	'4'
op	162:54	0:0	4	||
water	163:8	0:0	4	avctx
op	163:13	0:0	4	->
water	163:15	0:0	4	codec_tag
op	163:25	0:0	4	==
call	163:28	163:52	4	MKTAG
arg	163:34	163:37	5	'Y'
water	163:34	0:0	6	'Y'
arg	163:39	163:42	5	'V'
water	163:39	0:0	6	'V'
arg	163:44	163:47	5	'U'
water	163:44	0:0	6	'U'
arg	163:49	163:52	5	'9'
water	163:49	0:0	6	'9'
stmts	164:8	164:61	3	
call	164:8	164:60	4	FFSWAP
arg	164:15	164:24	5	uint8_t*
water	164:15	0:0	6	uint8_t
op	164:23	0:0	6	*
arg	164:26	164:42	5	picture->data[1]
water	164:26	0:0	6	picture
op	164:33	0:0	6	->
water	164:35	0:0	6	data
op	164:39	0:0	6	[
water	164:40	0:0	6	1
op	164:41	0:0	6	]
arg	164:44	164:60	5	picture->data[2]
water	164:44	0:0	6	picture
op	164:51	0:0	6	->
water	164:53	0:0	6	data
op	164:57	0:0	6	[
water	164:58	0:0	6	2
op	164:59	0:0	6	]
water	164:61	0:0	4	;
if	166:4	169:4	2	(avctx -> codec_tag ==AV_RL32 ("I420" ) && ( avctx -> width + 1 ) * ( avctx -> height + 1 ) * 3 / 2 == buf_size)
cond	166:8	166:91	3	avctx -> codec_tag ==AV_RL32 ("I420" ) && ( avctx -> width + 1 ) * ( avctx -> height + 1 ) * 3 / 2 == buf_size
water	166:8	0:0	4	avctx
op	166:13	0:0	4	->
water	166:15	0:0	4	codec_tag
op	166:25	0:0	4	==
call	166:28	166:42	4	AV_RL32
arg	166:36	166:42	5	"I420"
water	166:36	0:0	6	"I420"
op	166:44	0:0	4	&&
water	166:47	0:0	4	(
water	166:48	0:0	4	avctx
op	166:53	0:0	4	->
water	166:55	0:0	4	width
op	166:60	0:0	4	+
water	166:61	0:0	4	1
water	166:62	0:0	4	)
op	166:63	0:0	4	*
water	166:64	0:0	4	(
water	166:65	0:0	4	avctx
op	166:70	0:0	4	->
water	166:72	0:0	4	height
op	166:78	0:0	4	+
water	166:79	0:0	4	1
water	166:80	0:0	4	)
op	166:82	0:0	4	*
water	166:84	0:0	4	3
op	166:85	0:0	4	/
water	166:86	0:0	4	2
op	166:88	0:0	4	==
water	166:91	0:0	4	buf_size
stmts	166:101	169:4	3	
water	166:101	0:0	4	{
water	167:8	0:0	4	picture
op	167:15	0:0	4	->
water	167:17	0:0	4	data
op	167:21	0:0	4	[
water	167:22	0:0	4	1
op	167:23	0:0	4	]
op	167:25	0:0	4	=
water	167:27	0:0	4	picture
op	167:34	0:0	4	->
water	167:36	0:0	4	data
op	167:40	0:0	4	[
water	167:41	0:0	4	1
op	167:42	0:0	4	]
op	167:44	0:0	4	+
water	167:47	0:0	4	(
water	167:48	0:0	4	avctx
op	167:53	0:0	4	->
water	167:55	0:0	4	width
op	167:60	0:0	4	+
water	167:61	0:0	4	1
water	167:62	0:0	4	)
op	167:63	0:0	4	*
water	167:64	0:0	4	(
water	167:65	0:0	4	avctx
op	167:70	0:0	4	->
water	167:72	0:0	4	height
op	167:78	0:0	4	+
water	167:79	0:0	4	1
water	167:80	0:0	4	)
op	167:82	0:0	4	-
water	167:83	0:0	4	avctx
op	167:88	0:0	4	->
water	167:90	0:0	4	width
op	167:95	0:0	4	*
water	167:96	0:0	4	avctx
op	167:101	0:0	4	->
water	167:103	0:0	4	height
water	167:109	0:0	4	;
water	168:8	0:0	4	picture
op	168:15	0:0	4	->
water	168:17	0:0	4	data
op	168:21	0:0	4	[
water	168:22	0:0	4	2
op	168:23	0:0	4	]
op	168:25	0:0	4	=
water	168:27	0:0	4	picture
op	168:34	0:0	4	->
water	168:36	0:0	4	data
op	168:40	0:0	4	[
water	168:41	0:0	4	2
op	168:42	0:0	4	]
op	168:44	0:0	4	+
water	168:46	0:0	4	(
water	168:47	0:0	4	(
water	168:48	0:0	4	avctx
op	168:53	0:0	4	->
water	168:55	0:0	4	width
op	168:60	0:0	4	+
water	168:61	0:0	4	1
water	168:62	0:0	4	)
op	168:63	0:0	4	*
water	168:64	0:0	4	(
water	168:65	0:0	4	avctx
op	168:70	0:0	4	->
water	168:72	0:0	4	height
op	168:78	0:0	4	+
water	168:79	0:0	4	1
water	168:80	0:0	4	)
op	168:82	0:0	4	-
water	168:83	0:0	4	avctx
op	168:88	0:0	4	->
water	168:90	0:0	4	width
op	168:95	0:0	4	*
water	168:96	0:0	4	avctx
op	168:101	0:0	4	->
water	168:103	0:0	4	height
water	168:109	0:0	4	)
op	168:110	0:0	4	*
water	168:111	0:0	4	5
op	168:112	0:0	4	/
water	168:113	0:0	4	4
water	168:114	0:0	4	;
water	169:4	0:0	4	}
if	171:4	180:4	2	(avctx -> codec_tag ==AV_RL32 ("yuv2" ) && avctx -> pix_fmt == AV_PIX_FMT_YUYV422)
cond	171:8	172:28	3	avctx -> codec_tag ==AV_RL32 ("yuv2" ) && avctx -> pix_fmt == AV_PIX_FMT_YUYV422
water	171:8	0:0	4	avctx
op	171:13	0:0	4	->
water	171:15	0:0	4	codec_tag
op	171:25	0:0	4	==
call	171:28	171:42	4	AV_RL32
arg	171:36	171:42	5	"yuv2"
water	171:36	0:0	6	"yuv2"
op	171:44	0:0	4	&&
water	172:8	0:0	4	avctx
op	172:13	0:0	4	->
water	172:15	0:0	4	pix_fmt
op	172:25	0:0	4	==
water	172:28	0:0	4	AV_PIX_FMT_YUYV422
stmts	172:48	180:4	3	
water	172:48	0:0	4	{
decl	173:8	173:16	4	int	x
water	173:13	0:0	4	,
decl	173:8	173:16	4	int	y
decl	174:8	174:40	4	uint8_t	*line
op	174:22	0:0	4	=
water	174:24	0:0	4	picture
op	174:31	0:0	4	->
water	174:33	0:0	4	data
op	174:37	0:0	4	[
water	174:38	0:0	4	0
op	174:39	0:0	4	]
for	175:8	179:8	4	(y = 0 ;y < avctx -> height;y ++)
forinit	175:13	175:18	5	y = 0 ;
water	175:13	0:0	6	y
op	175:15	0:0	6	=
water	175:17	0:0	6	0
water	175:18	0:0	6	;
cond	175:20	175:31	5	y < avctx -> height
water	175:20	0:0	6	y
op	175:22	0:0	6	<
water	175:24	0:0	6	avctx
op	175:29	0:0	6	->
water	175:31	0:0	6	height
forexpr	175:39	175:40	5	y ++
water	175:39	0:0	6	y
op	175:40	0:0	6	++
stmts	175:44	179:8	5	
water	175:44	0:0	6	{
for	176:12	177:39	6	(x = 0 ;x < avctx -> width;x ++)
forinit	176:17	176:22	7	x = 0 ;
water	176:17	0:0	8	x
op	176:19	0:0	8	=
water	176:21	0:0	8	0
water	176:22	0:0	8	;
cond	176:24	176:35	7	x < avctx -> width
water	176:24	0:0	8	x
op	176:26	0:0	8	<
water	176:28	0:0	8	avctx
op	176:33	0:0	8	->
water	176:35	0:0	8	width
forexpr	176:42	176:43	7	x ++
water	176:42	0:0	8	x
op	176:43	0:0	8	++
stmts	177:16	177:39	7	
water	177:16	0:0	8	line
op	177:20	0:0	8	[
water	177:21	0:0	8	2
op	177:23	0:0	8	*
water	177:25	0:0	8	x
op	177:27	0:0	8	+
water	177:29	0:0	8	1
op	177:30	0:0	8	]
op	177:32	0:0	8	^=
water	177:35	0:0	8	0
water	177:36	0:0	8	x80
water	177:39	0:0	8	;
water	178:12	0:0	6	line
op	178:17	0:0	6	+=
water	178:20	0:0	6	picture
op	178:27	0:0	6	->
water	178:29	0:0	6	linesize
op	178:37	0:0	6	[
water	178:38	0:0	6	0
op	178:39	0:0	6	]
water	178:40	0:0	6	;
water	179:8	0:0	6	}
water	180:4	0:0	4	}
if	182:4	186:4	2	(avctx -> field_order > AV_FIELD_PROGRESSIVE)
cond	182:8	182:29	3	avctx -> field_order > AV_FIELD_PROGRESSIVE
water	182:8	0:0	4	avctx
op	182:13	0:0	4	->
water	182:15	0:0	4	field_order
op	182:27	0:0	4	>
water	182:29	0:0	4	AV_FIELD_PROGRESSIVE
stmts	182:51	186:4	3	
water	182:51	0:0	4	{
water	183:8	0:0	4	frame
op	183:13	0:0	4	->
water	183:15	0:0	4	interlaced_frame
op	183:32	0:0	4	=
water	183:34	0:0	4	1
water	183:35	0:0	4	;
if	184:8	185:38	4	(avctx -> field_order == AV_FIELD_TT || avctx -> field_order == AV_FIELD_TB)
cond	184:12	184:71	5	avctx -> field_order == AV_FIELD_TT || avctx -> field_order == AV_FIELD_TB
water	184:12	0:0	6	avctx
op	184:17	0:0	6	->
water	184:19	0:0	6	field_order
op	184:31	0:0	6	==
water	184:34	0:0	6	AV_FIELD_TT
op	184:46	0:0	6	||
water	184:49	0:0	6	avctx
op	184:54	0:0	6	->
water	184:56	0:0	6	field_order
op	184:68	0:0	6	==
water	184:71	0:0	6	AV_FIELD_TB
stmts	185:12	185:38	5	
water	185:12	0:0	6	frame
op	185:17	0:0	6	->
water	185:19	0:0	6	top_field_first
op	185:35	0:0	6	=
water	185:37	0:0	6	1
water	185:38	0:0	6	;
water	186:4	0:0	4	}
op	188:4	0:0	2	*
water	188:5	0:0	2	got_frame
op	188:15	0:0	2	=
water	188:17	0:0	2	1
water	188:18	0:0	2	;
return	189:4	189:19	2	buf_size
water	189:11	0:0	3	buf_size
