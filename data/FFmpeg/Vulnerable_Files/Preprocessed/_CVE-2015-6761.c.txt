func	3:0	49:0	0	int	update_dimensions
params	3:21	0:0	1	
param	3:22	3:35	2	VP8Context *	s
param	3:37	3:46	2	int	width
param	3:48	3:58	2	int	height
param	3:60	3:70	2	int	is_vp7
stmnts	0:0	48:12	1	
decl	5:4	5:36	2	AVCodecContext	*avctx
op	5:26	0:0	2	=
water	5:28	0:0	2	s
op	5:29	0:0	2	->
water	5:31	0:0	2	avctx
decl	6:4	6:14	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:14	2	int	ret
if	8:4	15:4	2	(width != s -> avctx -> width || ( ( width + 15 ) / 16 != s -> mb_width || ( height + 15 ) / 16 != s -> mb_height ) && s -> macroblocks_base || height != s -> avctx -> height)
cond	8:8	9:28	3	width != s -> avctx -> width || ( ( width + 15 ) / 16 != s -> mb_width || ( height + 15 ) / 16 != s -> mb_height ) && s -> macroblocks_base || height != s -> avctx -> height
water	8:8	0:0	4	width
op	8:15	0:0	4	!=
water	8:18	0:0	4	s
op	8:19	0:0	4	->
water	8:21	0:0	4	avctx
op	8:26	0:0	4	->
water	8:28	0:0	4	width
op	8:34	0:0	4	||
water	8:37	0:0	4	(
water	8:38	0:0	4	(
water	8:39	0:0	4	width
op	8:44	0:0	4	+
water	8:45	0:0	4	15
water	8:47	0:0	4	)
op	8:48	0:0	4	/
water	8:49	0:0	4	16
op	8:52	0:0	4	!=
water	8:55	0:0	4	s
op	8:56	0:0	4	->
water	8:58	0:0	4	mb_width
op	8:67	0:0	4	||
water	8:70	0:0	4	(
water	8:71	0:0	4	height
op	8:77	0:0	4	+
water	8:78	0:0	4	15
water	8:80	0:0	4	)
op	8:81	0:0	4	/
water	8:82	0:0	4	16
op	8:85	0:0	4	!=
water	8:88	0:0	4	s
op	8:89	0:0	4	->
water	8:91	0:0	4	mb_height
water	8:100	0:0	4	)
op	8:102	0:0	4	&&
water	8:105	0:0	4	s
op	8:106	0:0	4	->
water	8:108	0:0	4	macroblocks_base
op	8:125	0:0	4	||
water	9:8	0:0	4	height
op	9:15	0:0	4	!=
water	9:18	0:0	4	s
op	9:19	0:0	4	->
water	9:21	0:0	4	avctx
op	9:26	0:0	4	->
water	9:28	0:0	4	height
stmts	9:36	15:4	3	
water	9:36	0:0	4	{
call	10:8	10:41	4	vp8_decode_flush_impl
arg	10:30	10:38	5	s->avctx
water	10:30	0:0	6	s
op	10:31	0:0	6	->
water	10:33	0:0	6	avctx
arg	10:40	10:41	5	1
water	10:40	0:0	6	1
water	10:42	0:0	4	;
water	12:8	0:0	4	ret
op	12:12	0:0	4	=
call	12:14	12:55	4	ff_set_dimensions
arg	12:32	12:40	5	s->avctx
water	12:32	0:0	6	s
op	12:33	0:0	6	->
water	12:35	0:0	6	avctx
arg	12:42	12:47	5	width
water	12:42	0:0	6	width
arg	12:49	12:55	5	height
water	12:49	0:0	6	height
water	12:56	0:0	4	;
if	13:8	14:22	4	(ret < 0)
cond	13:12	13:18	5	ret < 0
water	13:12	0:0	6	ret
op	13:16	0:0	6	<
water	13:18	0:0	6	0
stmts	14:12	14:22	5	
return	14:12	14:22	6	ret
water	14:19	0:0	7	ret
water	15:4	0:0	4	}
water	17:4	0:0	2	s
op	17:5	0:0	2	->
water	17:7	0:0	2	mb_width
op	17:17	0:0	2	=
water	17:19	0:0	2	(
water	17:20	0:0	2	s
op	17:21	0:0	2	->
water	17:23	0:0	2	avctx
op	17:28	0:0	2	->
water	17:30	0:0	2	coded_width
op	17:43	0:0	2	+
water	17:45	0:0	2	15
water	17:47	0:0	2	)
op	17:49	0:0	2	/
water	17:51	0:0	2	16
water	17:53	0:0	2	;
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	mb_height
op	18:17	0:0	2	=
water	18:19	0:0	2	(
water	18:20	0:0	2	s
op	18:21	0:0	2	->
water	18:23	0:0	2	avctx
op	18:28	0:0	2	->
water	18:30	0:0	2	coded_height
op	18:43	0:0	2	+
water	18:45	0:0	2	15
water	18:47	0:0	2	)
op	18:49	0:0	2	/
water	18:51	0:0	2	16
water	18:53	0:0	2	;
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	mb_layout
op	20:17	0:0	2	=
water	20:19	0:0	2	is_vp7
op	20:26	0:0	2	||
water	20:29	0:0	2	avctx
op	20:34	0:0	2	->
water	20:36	0:0	2	active_thread_type
op	20:55	0:0	2	==
water	20:58	0:0	2	FF_THREAD_SLICE
op	20:74	0:0	2	&&
call	21:19	21:69	2	FFMIN
arg	21:25	21:48	3	s->num_coeff_partitions
water	21:25	0:0	4	s
op	21:26	0:0	4	->
water	21:28	0:0	4	num_coeff_partitions
arg	21:50	21:69	3	avctx->thread_count
water	21:50	0:0	4	avctx
op	21:55	0:0	4	->
water	21:57	0:0	4	thread_count
op	21:71	0:0	2	>
water	21:73	0:0	2	1
water	21:74	0:0	2	;
if	22:4	26:4	2	(! s -> mb_layout)
cond	22:8	22:12	3	! s -> mb_layout
op	22:8	0:0	4	!
water	22:9	0:0	4	s
op	22:10	0:0	4	->
water	22:12	0:0	4	mb_layout
stmts	22:23	26:4	3	
water	22:23	0:0	4	{
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	macroblocks_base
op	23:34	0:0	4	=
call	23:36	24:70	4	av_mallocz
arg	23:47	24:70	5	(s->mb_width+s->mb_height*2+1)*sizeof(*s->macroblocks)
water	23:47	0:0	6	(
water	23:48	0:0	6	s
op	23:49	0:0	6	->
water	23:51	0:0	6	mb_width
op	23:60	0:0	6	+
water	23:62	0:0	6	s
op	23:63	0:0	6	->
water	23:65	0:0	6	mb_height
op	23:75	0:0	6	*
water	23:77	0:0	6	2
op	23:79	0:0	6	+
water	23:81	0:0	6	1
water	23:82	0:0	6	)
op	23:84	0:0	6	*
op	24:47	0:0	6	sizeof
water	24:53	0:0	6	(
op	24:54	0:0	6	*
water	24:55	0:0	6	s
op	24:56	0:0	6	->
water	24:58	0:0	6	macroblocks
water	24:69	0:0	6	)
water	24:71	0:0	4	;
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	intra4x4_pred_mode_top
op	25:34	0:0	4	=
call	25:36	25:62	4	av_mallocz
arg	25:47	25:62	5	s->mb_width*4
water	25:47	0:0	6	s
op	25:48	0:0	6	->
water	25:50	0:0	6	mb_width
op	25:59	0:0	6	*
water	25:61	0:0	6	4
water	25:63	0:0	4	;
water	26:4	0:0	4	}
else	26:6	28:65	2
stmts	27:8	28:65	3	
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	macroblocks_base
op	27:28	0:0	4	=
call	27:30	28:64	4	av_mallocz
arg	27:41	28:64	5	(s->mb_width+2)*(s->mb_height+2)*sizeof(*s->macroblocks)
water	27:41	0:0	6	(
water	27:42	0:0	6	s
op	27:43	0:0	6	->
water	27:45	0:0	6	mb_width
op	27:54	0:0	6	+
water	27:56	0:0	6	2
water	27:57	0:0	6	)
op	27:59	0:0	6	*
water	27:61	0:0	6	(
water	27:62	0:0	6	s
op	27:63	0:0	6	->
water	27:65	0:0	6	mb_height
op	27:75	0:0	6	+
water	27:77	0:0	6	2
water	27:78	0:0	6	)
op	27:80	0:0	6	*
op	28:41	0:0	6	sizeof
water	28:47	0:0	6	(
op	28:48	0:0	6	*
water	28:49	0:0	6	s
op	28:50	0:0	6	->
water	28:52	0:0	6	macroblocks
water	28:63	0:0	6	)
water	28:65	0:0	4	;
water	29:4	0:0	2	s
op	29:5	0:0	2	->
water	29:7	0:0	2	top_nnz
op	29:19	0:0	2	=
call	29:21	29:65	2	av_mallocz
arg	29:32	29:65	3	s->mb_width*sizeof(*s->top_nnz)
water	29:32	0:0	4	s
op	29:33	0:0	4	->
water	29:35	0:0	4	mb_width
op	29:44	0:0	4	*
op	29:46	0:0	4	sizeof
water	29:52	0:0	4	(
op	29:53	0:0	4	*
water	29:54	0:0	4	s
op	29:55	0:0	4	->
water	29:57	0:0	4	top_nnz
water	29:64	0:0	4	)
water	29:66	0:0	2	;
water	30:4	0:0	2	s
op	30:5	0:0	2	->
water	30:7	0:0	2	top_border
op	30:19	0:0	2	=
call	30:21	30:74	2	av_mallocz
arg	30:32	30:74	3	(s->mb_width+1)*sizeof(*s->top_border)
water	30:32	0:0	4	(
water	30:33	0:0	4	s
op	30:34	0:0	4	->
water	30:36	0:0	4	mb_width
op	30:45	0:0	4	+
water	30:47	0:0	4	1
water	30:48	0:0	4	)
op	30:50	0:0	4	*
op	30:52	0:0	4	sizeof
water	30:58	0:0	4	(
op	30:59	0:0	4	*
water	30:60	0:0	4	s
op	30:61	0:0	4	->
water	30:63	0:0	4	top_border
water	30:73	0:0	4	)
water	30:75	0:0	2	;
water	31:4	0:0	2	s
op	31:5	0:0	2	->
water	31:7	0:0	2	thread_data
op	31:19	0:0	2	=
call	31:21	31:67	2	av_mallocz
arg	31:32	31:67	3	MAX_THREADS*sizeof(VP8ThreadData)
water	31:32	0:0	4	MAX_THREADS
op	31:44	0:0	4	*
op	31:46	0:0	4	sizeof
water	31:52	0:0	4	(
water	31:53	0:0	4	VP8ThreadData
water	31:66	0:0	4	)
water	31:68	0:0	2	;
for	33:4	40:4	2	(i = 0 ;i < MAX_THREADS;i ++)
forinit	33:9	33:14	3	i = 0 ;
water	33:9	0:0	4	i
op	33:11	0:0	4	=
water	33:13	0:0	4	0
water	33:14	0:0	4	;
cond	33:16	33:20	3	i < MAX_THREADS
water	33:16	0:0	4	i
op	33:18	0:0	4	<
water	33:20	0:0	4	MAX_THREADS
forexpr	33:33	33:34	3	i ++
water	33:33	0:0	4	i
op	33:34	0:0	4	++
stmts	33:38	40:4	3	
water	33:38	0:0	4	{
water	34:8	0:0	4	s
op	34:9	0:0	4	->
water	34:11	0:0	4	thread_data
op	34:22	0:0	4	[
water	34:23	0:0	4	i
op	34:24	0:0	4	]
op	34:25	0:0	4	.
water	34:26	0:0	4	filter_strength
op	34:42	0:0	4	=
call	35:12	35:79	4	av_mallocz
arg	35:23	35:79	5	s->mb_width*sizeof(*s->thread_data[0].filter_strength)
water	35:23	0:0	6	s
op	35:24	0:0	6	->
water	35:26	0:0	6	mb_width
op	35:35	0:0	6	*
op	35:37	0:0	6	sizeof
water	35:43	0:0	6	(
op	35:44	0:0	6	*
water	35:45	0:0	6	s
op	35:46	0:0	6	->
water	35:48	0:0	6	thread_data
op	35:59	0:0	6	[
water	35:60	0:0	6	0
op	35:61	0:0	6	]
op	35:62	0:0	6	.
water	35:63	0:0	6	filter_strength
water	35:78	0:0	6	)
water	35:80	0:0	4	;
call	37:8	37:56	4	pthread_mutex_init
arg	37:27	37:50	5	&s->thread_data[i].lock
op	37:27	0:0	6	&
water	37:28	0:0	6	s
op	37:29	0:0	6	->
water	37:31	0:0	6	thread_data
op	37:42	0:0	6	[
water	37:43	0:0	6	i
op	37:44	0:0	6	]
op	37:45	0:0	6	.
water	37:46	0:0	6	lock
arg	37:52	37:56	5	NULL
water	37:52	0:0	6	NULL
water	37:57	0:0	4	;
call	38:8	38:55	4	pthread_cond_init
arg	38:26	38:49	5	&s->thread_data[i].cond
op	38:26	0:0	6	&
water	38:27	0:0	6	s
op	38:28	0:0	6	->
water	38:30	0:0	6	thread_data
op	38:41	0:0	6	[
water	38:42	0:0	6	i
op	38:43	0:0	6	]
op	38:44	0:0	6	.
water	38:45	0:0	6	cond
arg	38:51	38:55	5	NULL
water	38:51	0:0	6	NULL
water	38:56	0:0	4	;
water	40:4	0:0	4	}
if	42:4	44:30	2	(! s -> macroblocks_base || ! s -> top_nnz || ! s -> top_border || ( ! s -> intra4x4_pred_mode_top && ! s -> mb_layout ))
cond	42:8	43:52	3	! s -> macroblocks_base || ! s -> top_nnz || ! s -> top_border || ( ! s -> intra4x4_pred_mode_top && ! s -> mb_layout )
op	42:8	0:0	4	!
water	42:9	0:0	4	s
op	42:10	0:0	4	->
water	42:12	0:0	4	macroblocks_base
op	42:29	0:0	4	||
op	42:32	0:0	4	!
water	42:33	0:0	4	s
op	42:34	0:0	4	->
water	42:36	0:0	4	top_nnz
op	42:44	0:0	4	||
op	42:47	0:0	4	!
water	42:48	0:0	4	s
op	42:49	0:0	4	->
water	42:51	0:0	4	top_border
op	42:62	0:0	4	||
water	43:8	0:0	4	(
op	43:9	0:0	4	!
water	43:10	0:0	4	s
op	43:11	0:0	4	->
water	43:13	0:0	4	intra4x4_pred_mode_top
op	43:36	0:0	4	&&
op	43:39	0:0	4	!
water	43:40	0:0	4	s
op	43:41	0:0	4	->
water	43:43	0:0	4	mb_layout
water	43:52	0:0	4	)
stmts	44:8	44:30	3	
return	44:8	44:30	4	AVERROR(ENOMEM)
call	44:15	44:29	5	AVERROR
arg	44:23	44:29	6	ENOMEM
water	44:23	0:0	7	ENOMEM
water	46:4	0:0	2	s
op	46:5	0:0	2	->
water	46:7	0:0	2	macroblocks
op	46:19	0:0	2	=
water	46:21	0:0	2	s
op	46:22	0:0	2	->
water	46:24	0:0	2	macroblocks_base
op	46:41	0:0	2	+
water	46:43	0:0	2	1
water	46:44	0:0	2	;
return	48:4	48:12	2	0
water	48:11	0:0	3	0
