func	2:0	144:0	0	static int	ljpeg_decode_yuv_scan
params	2:32	0:0	1	
param	2:33	2:54	2	MJpegDecodeContext *	s
param	2:56	2:69	2	int	predictor
param	3:33	3:52	2	int	point_transform
param	3:54	3:71	2	int	nb_components
stmnts	0:0	143:12	1	
decl	5:4	5:27	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:27	2	int	mb_x
water	5:15	0:0	2	,
decl	5:4	5:27	2	int	mb_y
water	5:21	0:0	2	,
decl	5:4	5:27	2	int	mask
decl	6:4	6:28	2	int	bits
op	6:12	0:0	2	=
water	6:14	0:0	2	(
water	6:15	0:0	2	s
op	6:16	0:0	2	->
water	6:18	0:0	2	bits
op	6:22	0:0	2	+
water	6:23	0:0	2	7
water	6:24	0:0	2	)
op	6:25	0:0	2	&
water	6:26	0:0	2	~7
decl	7:4	7:23	2	int	resync_mb_y
op	7:20	0:0	2	=
water	7:22	0:0	2	0
decl	8:4	8:23	2	int	resync_mb_x
op	8:20	0:0	2	=
water	8:22	0:0	2	0
water	10:4	0:0	2	point_transform
op	10:20	0:0	2	+=
water	10:23	0:0	2	bits
op	10:28	0:0	2	-
water	10:30	0:0	2	s
op	10:31	0:0	2	->
water	10:33	0:0	2	bits
water	10:37	0:0	2	;
water	11:4	0:0	2	mask
op	11:9	0:0	2	=
water	11:11	0:0	2	(
water	11:12	0:0	2	(
water	11:13	0:0	2	1
op	11:15	0:0	2	<<
water	11:18	0:0	2	s
op	11:19	0:0	2	->
water	11:21	0:0	2	bits
water	11:25	0:0	2	)
op	11:27	0:0	2	-
water	11:29	0:0	2	1
water	11:30	0:0	2	)
op	11:32	0:0	2	<<
water	11:35	0:0	2	point_transform
water	11:50	0:0	2	;
call	13:4	13:51	2	av_assert0
arg	13:15	13:51	3	nb_components>=1&&nb_components<=4
water	13:15	0:0	4	nb_components
op	13:28	0:0	4	>=
water	13:30	0:0	4	1
op	13:32	0:0	4	&&
water	13:35	0:0	4	nb_components
op	13:48	0:0	4	<=
water	13:50	0:0	4	4
water	13:52	0:0	2	;
for	15:4	142:4	2	(mb_y = 0 ;mb_y < s -> mb_height;mb_y ++)
forinit	15:9	15:17	3	mb_y = 0 ;
water	15:9	0:0	4	mb_y
op	15:14	0:0	4	=
water	15:16	0:0	4	0
water	15:17	0:0	4	;
cond	15:19	15:29	3	mb_y < s -> mb_height
water	15:19	0:0	4	mb_y
op	15:24	0:0	4	<
water	15:26	0:0	4	s
op	15:27	0:0	4	->
water	15:29	0:0	4	mb_height
forexpr	15:40	15:44	3	mb_y ++
water	15:40	0:0	4	mb_y
op	15:44	0:0	4	++
stmts	15:48	142:4	3	
water	15:48	0:0	4	{
for	16:8	141:8	4	(mb_x = 0 ;mb_x < s -> mb_width;mb_x ++)
forinit	16:13	16:21	5	mb_x = 0 ;
water	16:13	0:0	6	mb_x
op	16:18	0:0	6	=
water	16:20	0:0	6	0
water	16:21	0:0	6	;
cond	16:23	16:33	5	mb_x < s -> mb_width
water	16:23	0:0	6	mb_x
op	16:28	0:0	6	<
water	16:30	0:0	6	s
op	16:31	0:0	6	->
water	16:33	0:0	6	mb_width
forexpr	16:43	16:47	5	mb_x ++
water	16:43	0:0	6	mb_x
op	16:47	0:0	6	++
stmts	16:51	141:8	5	
water	16:51	0:0	6	{
if	17:12	21:12	6	(s -> restart_interval && ! s -> restart_count)
cond	17:16	17:43	7	s -> restart_interval && ! s -> restart_count
water	17:16	0:0	8	s
op	17:17	0:0	8	->
water	17:19	0:0	8	restart_interval
op	17:36	0:0	8	&&
op	17:39	0:0	8	!
water	17:40	0:0	8	s
op	17:41	0:0	8	->
water	17:43	0:0	8	restart_count
stmts	17:57	21:12	7	
water	17:57	0:0	8	{
water	18:16	0:0	8	s
op	18:17	0:0	8	->
water	18:19	0:0	8	restart_count
op	18:33	0:0	8	=
water	18:35	0:0	8	s
op	18:36	0:0	8	->
water	18:38	0:0	8	restart_interval
water	18:54	0:0	8	;
water	19:16	0:0	8	resync_mb_x
op	19:28	0:0	8	=
water	19:30	0:0	8	mb_x
water	19:34	0:0	8	;
water	20:16	0:0	8	resync_mb_y
op	20:28	0:0	8	=
water	20:30	0:0	8	mb_y
water	20:34	0:0	8	;
water	21:12	0:0	8	}
if	23:12	93:12	6	(! mb_x || mb_y == resync_mb_y || mb_y == resync_mb_y + 1 && mb_x < resync_mb_x || s -> interlaced)
cond	23:15	23:97	7	! mb_x || mb_y == resync_mb_y || mb_y == resync_mb_y + 1 && mb_x < resync_mb_x || s -> interlaced
op	23:15	0:0	8	!
water	23:16	0:0	8	mb_x
op	23:21	0:0	8	||
water	23:24	0:0	8	mb_y
op	23:29	0:0	8	==
water	23:32	0:0	8	resync_mb_y
op	23:44	0:0	8	||
water	23:47	0:0	8	mb_y
op	23:52	0:0	8	==
water	23:55	0:0	8	resync_mb_y
op	23:66	0:0	8	+
water	23:67	0:0	8	1
op	23:69	0:0	8	&&
water	23:72	0:0	8	mb_x
op	23:77	0:0	8	<
water	23:79	0:0	8	resync_mb_x
op	23:91	0:0	8	||
water	23:94	0:0	8	s
op	23:95	0:0	8	->
water	23:97	0:0	8	interlaced
stmts	23:108	93:12	7	
water	23:108	0:0	8	{
decl	24:16	24:96	8	int	toprow
op	24:28	0:0	8	=
water	24:30	0:0	8	mb_y
op	24:35	0:0	8	==
water	24:38	0:0	8	resync_mb_y
op	24:50	0:0	8	||
water	24:53	0:0	8	mb_y
op	24:58	0:0	8	==
water	24:61	0:0	8	resync_mb_y
op	24:72	0:0	8	+
water	24:73	0:0	8	1
op	24:75	0:0	8	&&
water	24:78	0:0	8	mb_x
op	24:83	0:0	8	<
water	24:85	0:0	8	resync_mb_x
decl	25:16	25:81	8	int	leftcol
op	25:28	0:0	8	=
op	25:30	0:0	8	!
water	25:31	0:0	8	mb_x
op	25:36	0:0	8	||
water	25:39	0:0	8	mb_y
op	25:44	0:0	8	==
water	25:47	0:0	8	resync_mb_y
op	25:59	0:0	8	&&
water	25:62	0:0	8	mb_x
op	25:67	0:0	8	==
water	25:70	0:0	8	resync_mb_x
for	26:16	92:16	8	(i = 0 ;i < nb_components;i ++)
forinit	26:21	26:26	9	i = 0 ;
water	26:21	0:0	10	i
op	26:23	0:0	10	=
water	26:25	0:0	10	0
water	26:26	0:0	10	;
cond	26:28	26:32	9	i < nb_components
water	26:28	0:0	10	i
op	26:30	0:0	10	<
water	26:32	0:0	10	nb_components
forexpr	26:47	26:48	9	i ++
water	26:47	0:0	10	i
op	26:48	0:0	10	++
stmts	26:52	92:16	9	
water	26:52	0:0	10	{
decl	27:20	27:32	10	uint8_t	*ptr
decl	28:20	28:35	10	uint16_t	*ptr16
decl	29:20	29:53	10	int	n
water	29:25	0:0	10	,
decl	29:20	29:53	10	int	h
water	29:28	0:0	10	,
decl	29:20	29:53	10	int	v
water	29:31	0:0	10	,
decl	29:20	29:53	10	int	x
water	29:34	0:0	10	,
decl	29:20	29:53	10	int	y
water	29:37	0:0	10	,
decl	29:20	29:53	10	int	c
water	29:40	0:0	10	,
decl	29:20	29:53	10	int	j
water	29:43	0:0	10	,
decl	29:20	29:53	10	int	linesize
water	30:20	0:0	10	n
op	30:22	0:0	10	=
water	30:24	0:0	10	s
op	30:25	0:0	10	->
water	30:27	0:0	10	nb_blocks
op	30:36	0:0	10	[
water	30:37	0:0	10	i
op	30:38	0:0	10	]
water	30:39	0:0	10	;
water	31:20	0:0	10	c
op	31:22	0:0	10	=
water	31:24	0:0	10	s
op	31:25	0:0	10	->
water	31:27	0:0	10	comp_index
op	31:37	0:0	10	[
water	31:38	0:0	10	i
op	31:39	0:0	10	]
water	31:40	0:0	10	;
water	32:20	0:0	10	h
op	32:22	0:0	10	=
water	32:24	0:0	10	s
op	32:25	0:0	10	->
water	32:27	0:0	10	h_scount
op	32:35	0:0	10	[
water	32:36	0:0	10	i
op	32:37	0:0	10	]
water	32:38	0:0	10	;
water	33:20	0:0	10	v
op	33:22	0:0	10	=
water	33:24	0:0	10	s
op	33:25	0:0	10	->
water	33:27	0:0	10	v_scount
op	33:35	0:0	10	[
water	33:36	0:0	10	i
op	33:37	0:0	10	]
water	33:38	0:0	10	;
water	34:20	0:0	10	x
op	34:22	0:0	10	=
water	34:24	0:0	10	0
water	34:25	0:0	10	;
water	35:20	0:0	10	y
op	35:22	0:0	10	=
water	35:24	0:0	10	0
water	35:25	0:0	10	;
water	36:20	0:0	10	linesize
op	36:28	0:0	10	=
water	36:30	0:0	10	s
op	36:31	0:0	10	->
water	36:33	0:0	10	linesize
op	36:41	0:0	10	[
water	36:42	0:0	10	c
op	36:43	0:0	10	]
water	36:44	0:0	10	;
if	38:20	38:44	10	(bits > 8)
cond	38:23	38:28	11	bits > 8
water	38:23	0:0	12	bits
op	38:27	0:0	12	>
water	38:28	0:0	12	8
stmts	38:31	38:44	11	
water	38:31	0:0	12	linesize
op	38:40	0:0	12	/=
water	38:43	0:0	12	2
water	38:44	0:0	12	;
for	40:20	91:20	10	(j = 0 ;j < n;j ++)
forinit	40:24	40:27	11	j = 0 ;
water	40:24	0:0	12	j
op	40:25	0:0	12	=
water	40:26	0:0	12	0
water	40:27	0:0	12	;
cond	40:29	40:31	11	j < n
water	40:29	0:0	12	j
op	40:30	0:0	12	<
water	40:31	0:0	12	n
forexpr	40:34	40:35	11	j ++
water	40:34	0:0	12	j
op	40:35	0:0	12	++
stmts	40:39	91:20	11	
water	40:39	0:0	12	{
decl	41:24	41:36	12	int	pred
water	41:32	0:0	12	,
decl	41:24	41:36	12	int	dc
water	43:24	0:0	12	dc
op	43:27	0:0	12	=
call	43:29	43:62	12	mjpeg_decode_dc
arg	43:45	43:46	13	s
water	43:45	0:0	14	s
arg	43:48	43:62	13	s->dc_index[i]
water	43:48	0:0	14	s
op	43:49	0:0	14	->
water	43:51	0:0	14	dc_index
op	43:59	0:0	14	[
water	43:60	0:0	14	i
op	43:61	0:0	14	]
water	43:63	0:0	12	;
if	44:24	45:37	12	(dc == 0 xFFFFF)
cond	44:27	44:34	13	dc == 0 xFFFFF
water	44:27	0:0	14	dc
op	44:30	0:0	14	==
water	44:33	0:0	14	0
water	44:34	0:0	14	xFFFFF
stmts	45:28	45:37	13	
return	45:28	45:37	14	-1
op	45:35	0:0	15	-
water	45:36	0:0	15	1
if	46:24	66:24	12	(bits <= 8)
cond	46:27	46:33	13	bits <= 8
water	46:27	0:0	14	bits
op	46:31	0:0	14	<=
water	46:33	0:0	14	8
stmts	46:35	66:24	13	
water	46:35	0:0	14	{
water	47:24	0:0	14	ptr
op	47:28	0:0	14	=
water	47:30	0:0	14	s
op	47:31	0:0	14	->
water	47:33	0:0	14	picture_ptr
op	47:44	0:0	14	->
water	47:46	0:0	14	data
op	47:50	0:0	14	[
water	47:51	0:0	14	c
op	47:52	0:0	14	]
op	47:54	0:0	14	+
water	47:56	0:0	14	(
water	47:57	0:0	14	linesize
op	47:66	0:0	14	*
water	47:68	0:0	14	(
water	47:69	0:0	14	v
op	47:71	0:0	14	*
water	47:73	0:0	14	mb_y
op	47:78	0:0	14	+
water	47:80	0:0	14	y
water	47:81	0:0	14	)
water	47:82	0:0	14	)
op	47:84	0:0	14	+
water	47:86	0:0	14	(
water	47:87	0:0	14	h
op	47:89	0:0	14	*
water	47:91	0:0	14	mb_x
op	47:96	0:0	14	+
water	47:98	0:0	14	x
water	47:99	0:0	14	)
water	47:100	0:0	14	;
if	48:24	54:24	14	(y == 0 && toprow)
cond	48:27	48:35	15	y == 0 && toprow
water	48:27	0:0	16	y
op	48:28	0:0	16	==
water	48:30	0:0	16	0
op	48:32	0:0	16	&&
water	48:35	0:0	16	toprow
stmts	48:42	54:24	15	
water	48:42	0:0	16	{
if	49:28	51:28	16	(x == 0 && leftcol)
cond	49:31	49:39	17	x == 0 && leftcol
water	49:31	0:0	18	x
op	49:32	0:0	18	==
water	49:34	0:0	18	0
op	49:36	0:0	18	&&
water	49:39	0:0	18	leftcol
stmts	49:47	51:28	17	
water	49:47	0:0	18	{
water	50:32	0:0	18	pred
op	50:36	0:0	18	=
water	50:38	0:0	18	1
op	50:40	0:0	18	<<
water	50:43	0:0	18	(
water	50:44	0:0	18	bits
op	50:49	0:0	18	-
water	50:51	0:0	18	1
water	50:52	0:0	18	)
water	50:53	0:0	18	;
water	51:28	0:0	18	}
else	51:29	53:28	16
stmts	51:33	53:28	17	
water	51:33	0:0	18	{
water	52:32	0:0	18	pred
op	52:36	0:0	18	=
water	52:38	0:0	18	ptr
op	52:41	0:0	18	[
op	52:42	0:0	18	-
water	52:43	0:0	18	1
op	52:44	0:0	18	]
water	52:45	0:0	18	;
water	53:28	0:0	18	}
water	54:24	0:0	16	}
else	54:25	60:24	14
stmts	54:29	60:24	15	
water	54:29	0:0	16	{
if	55:28	57:28	16	(x == 0 && leftcol)
cond	55:31	55:39	17	x == 0 && leftcol
water	55:31	0:0	18	x
op	55:32	0:0	18	==
water	55:34	0:0	18	0
op	55:36	0:0	18	&&
water	55:39	0:0	18	leftcol
stmts	55:47	57:28	17	
water	55:47	0:0	18	{
water	56:32	0:0	18	pred
op	56:36	0:0	18	=
water	56:38	0:0	18	ptr
op	56:41	0:0	18	[
op	56:42	0:0	18	-
water	56:43	0:0	18	linesize
op	56:51	0:0	18	]
water	56:52	0:0	18	;
water	57:28	0:0	18	}
else	57:29	59:28	16
stmts	57:33	59:28	17	
water	57:33	0:0	18	{
call	58:32	58:98	18	PREDICT
arg	58:40	58:44	19	pred
water	58:40	0:0	20	pred
arg	58:46	58:62	19	ptr[-linesize-1]
water	58:46	0:0	20	ptr
op	58:49	0:0	20	[
op	58:50	0:0	20	-
water	58:51	0:0	20	linesize
op	58:59	0:0	20	-
water	58:60	0:0	20	1
op	58:61	0:0	20	]
arg	58:64	58:78	19	ptr[-linesize]
water	58:64	0:0	20	ptr
op	58:67	0:0	20	[
op	58:68	0:0	20	-
water	58:69	0:0	20	linesize
op	58:77	0:0	20	]
arg	58:80	58:87	19	ptr[-1]
water	58:80	0:0	20	ptr
op	58:83	0:0	20	[
op	58:84	0:0	20	-
water	58:85	0:0	20	1
op	58:86	0:0	20	]
arg	58:89	58:98	19	predictor
water	58:89	0:0	20	predictor
water	58:99	0:0	18	;
water	59:28	0:0	18	}
water	60:24	0:0	16	}
if	62:24	63:48	14	(s -> interlaced && s -> bottom_field)
cond	62:28	62:48	15	s -> interlaced && s -> bottom_field
water	62:28	0:0	16	s
op	62:29	0:0	16	->
water	62:31	0:0	16	interlaced
op	62:42	0:0	16	&&
water	62:45	0:0	16	s
op	62:46	0:0	16	->
water	62:48	0:0	16	bottom_field
stmts	63:28	63:48	15	
water	63:28	0:0	16	ptr
op	63:32	0:0	16	+=
water	63:35	0:0	16	linesize
op	63:44	0:0	16	>>
water	63:47	0:0	16	1
water	63:48	0:0	16	;
water	64:24	0:0	14	pred
op	64:29	0:0	14	&=
water	64:32	0:0	14	mask
water	64:36	0:0	14	;
op	65:24	0:0	14	*
water	65:25	0:0	14	ptr
op	65:28	0:0	14	=
water	65:30	0:0	14	pred
op	65:35	0:0	14	+
water	65:37	0:0	14	(
water	65:38	0:0	14	dc
op	65:41	0:0	14	<<
water	65:44	0:0	14	point_transform
water	65:59	0:0	14	)
water	65:60	0:0	14	;
water	66:24	0:0	14	}
else	66:25	86:24	12
stmts	66:29	86:24	13	
water	66:29	0:0	14	{
water	67:28	0:0	14	ptr16
op	67:34	0:0	14	=
call	67:36	67:122	14	(uint16_t*)
arg	67:48	67:122	15	s->picture_ptr->data[c]+2*(linesize*(v*mb_y+y))+2*(h*mb_x+x)
water	67:48	0:0	16	s
op	67:49	0:0	16	->
water	67:51	0:0	16	picture_ptr
op	67:62	0:0	16	->
water	67:64	0:0	16	data
op	67:68	0:0	16	[
water	67:69	0:0	16	c
op	67:70	0:0	16	]
op	67:72	0:0	16	+
water	67:74	0:0	16	2
op	67:75	0:0	16	*
water	67:76	0:0	16	(
water	67:77	0:0	16	linesize
op	67:86	0:0	16	*
water	67:88	0:0	16	(
water	67:89	0:0	16	v
op	67:91	0:0	16	*
water	67:93	0:0	16	mb_y
op	67:98	0:0	16	+
water	67:100	0:0	16	y
water	67:101	0:0	16	)
water	67:102	0:0	16	)
op	67:104	0:0	16	+
water	67:106	0:0	16	2
op	67:107	0:0	16	*
water	67:108	0:0	16	(
water	67:109	0:0	16	h
op	67:111	0:0	16	*
water	67:113	0:0	16	mb_x
op	67:118	0:0	16	+
water	67:120	0:0	16	x
water	67:121	0:0	16	)
water	67:123	0:0	14	;
if	68:28	74:28	14	(y == 0 && toprow)
cond	68:31	68:39	15	y == 0 && toprow
water	68:31	0:0	16	y
op	68:32	0:0	16	==
water	68:34	0:0	16	0
op	68:36	0:0	16	&&
water	68:39	0:0	16	toprow
stmts	68:46	74:28	15	
water	68:46	0:0	16	{
if	69:32	71:32	16	(x == 0 && leftcol)
cond	69:35	69:43	17	x == 0 && leftcol
water	69:35	0:0	18	x
op	69:36	0:0	18	==
water	69:38	0:0	18	0
op	69:40	0:0	18	&&
water	69:43	0:0	18	leftcol
stmts	69:51	71:32	17	
water	69:51	0:0	18	{
water	70:36	0:0	18	pred
op	70:40	0:0	18	=
water	70:42	0:0	18	1
op	70:44	0:0	18	<<
water	70:47	0:0	18	(
water	70:48	0:0	18	bits
op	70:53	0:0	18	-
water	70:55	0:0	18	1
water	70:56	0:0	18	)
water	70:57	0:0	18	;
water	71:32	0:0	18	}
else	71:33	73:32	16
stmts	71:37	73:32	17	
water	71:37	0:0	18	{
water	72:36	0:0	18	pred
op	72:40	0:0	18	=
water	72:42	0:0	18	ptr16
op	72:47	0:0	18	[
op	72:48	0:0	18	-
water	72:49	0:0	18	1
op	72:50	0:0	18	]
water	72:51	0:0	18	;
water	73:32	0:0	18	}
water	74:28	0:0	16	}
else	74:29	80:28	14
stmts	74:33	80:28	15	
water	74:33	0:0	16	{
if	75:32	77:32	16	(x == 0 && leftcol)
cond	75:35	75:43	17	x == 0 && leftcol
water	75:35	0:0	18	x
op	75:36	0:0	18	==
water	75:38	0:0	18	0
op	75:40	0:0	18	&&
water	75:43	0:0	18	leftcol
stmts	75:51	77:32	17	
water	75:51	0:0	18	{
water	76:36	0:0	18	pred
op	76:40	0:0	18	=
water	76:42	0:0	18	ptr16
op	76:47	0:0	18	[
op	76:48	0:0	18	-
water	76:49	0:0	18	linesize
op	76:57	0:0	18	]
water	76:58	0:0	18	;
water	77:32	0:0	18	}
else	77:33	79:32	16
stmts	77:37	79:32	17	
water	77:37	0:0	18	{
call	78:36	78:108	18	PREDICT
arg	78:44	78:48	19	pred
water	78:44	0:0	20	pred
arg	78:50	78:68	19	ptr16[-linesize-1]
water	78:50	0:0	20	ptr16
op	78:55	0:0	20	[
op	78:56	0:0	20	-
water	78:57	0:0	20	linesize
op	78:65	0:0	20	-
water	78:66	0:0	20	1
op	78:67	0:0	20	]
arg	78:70	78:86	19	ptr16[-linesize]
water	78:70	0:0	20	ptr16
op	78:75	0:0	20	[
op	78:76	0:0	20	-
water	78:77	0:0	20	linesize
op	78:85	0:0	20	]
arg	78:88	78:97	19	ptr16[-1]
water	78:88	0:0	20	ptr16
op	78:93	0:0	20	[
op	78:94	0:0	20	-
water	78:95	0:0	20	1
op	78:96	0:0	20	]
arg	78:99	78:108	19	predictor
water	78:99	0:0	20	predictor
water	78:109	0:0	18	;
water	79:32	0:0	18	}
water	80:28	0:0	16	}
if	82:28	83:54	14	(s -> interlaced && s -> bottom_field)
cond	82:32	82:52	15	s -> interlaced && s -> bottom_field
water	82:32	0:0	16	s
op	82:33	0:0	16	->
water	82:35	0:0	16	interlaced
op	82:46	0:0	16	&&
water	82:49	0:0	16	s
op	82:50	0:0	16	->
water	82:52	0:0	16	bottom_field
stmts	83:32	83:54	15	
water	83:32	0:0	16	ptr16
op	83:38	0:0	16	+=
water	83:41	0:0	16	linesize
op	83:50	0:0	16	>>
water	83:53	0:0	16	1
water	83:54	0:0	16	;
water	84:28	0:0	14	pred
op	84:33	0:0	14	&=
water	84:36	0:0	14	mask
water	84:40	0:0	14	;
op	85:28	0:0	14	*
water	85:29	0:0	14	ptr16
op	85:34	0:0	14	=
water	85:36	0:0	14	pred
op	85:41	0:0	14	+
water	85:43	0:0	14	(
water	85:44	0:0	14	dc
op	85:47	0:0	14	<<
water	85:50	0:0	14	point_transform
water	85:65	0:0	14	)
water	85:66	0:0	14	;
water	86:24	0:0	14	}
if	87:24	90:24	12	(++ x == h)
cond	87:28	87:35	13	++ x == h
op	87:28	0:0	14	++
water	87:30	0:0	14	x
op	87:32	0:0	14	==
water	87:35	0:0	14	h
stmts	87:38	90:24	13	
water	87:38	0:0	14	{
water	88:28	0:0	14	x
op	88:30	0:0	14	=
water	88:32	0:0	14	0
water	88:33	0:0	14	;
water	89:28	0:0	14	y
op	89:29	0:0	14	++
water	89:31	0:0	14	;
water	90:24	0:0	14	}
water	91:20	0:0	12	}
water	92:16	0:0	10	}
water	93:12	0:0	8	}
else	93:14	136:12	6
stmts	93:19	136:12	7	
water	93:19	0:0	8	{
for	94:16	135:16	8	(i = 0 ;i < nb_components;i ++)
forinit	94:21	94:26	9	i = 0 ;
water	94:21	0:0	10	i
op	94:23	0:0	10	=
water	94:25	0:0	10	0
water	94:26	0:0	10	;
cond	94:28	94:32	9	i < nb_components
water	94:28	0:0	10	i
op	94:30	0:0	10	<
water	94:32	0:0	10	nb_components
forexpr	94:47	94:48	9	i ++
water	94:47	0:0	10	i
op	94:48	0:0	10	++
stmts	94:52	135:16	9	
water	94:52	0:0	10	{
decl	95:20	95:32	10	uint8_t	*ptr
decl	96:20	96:35	10	uint16_t	*ptr16
decl	97:20	97:57	10	int	n
water	97:25	0:0	10	,
decl	97:20	97:57	10	int	h
water	97:28	0:0	10	,
decl	97:20	97:57	10	int	v
water	97:31	0:0	10	,
decl	97:20	97:57	10	int	x
water	97:34	0:0	10	,
decl	97:20	97:57	10	int	y
water	97:37	0:0	10	,
decl	97:20	97:57	10	int	c
water	97:40	0:0	10	,
decl	97:20	97:57	10	int	j
water	97:43	0:0	10	,
decl	97:20	97:57	10	int	linesize
water	97:53	0:0	10	,
decl	97:20	97:57	10	int	dc
water	98:20	0:0	10	n
op	98:29	0:0	10	=
water	98:31	0:0	10	s
op	98:32	0:0	10	->
water	98:34	0:0	10	nb_blocks
op	98:43	0:0	10	[
water	98:44	0:0	10	i
op	98:45	0:0	10	]
water	98:46	0:0	10	;
water	99:20	0:0	10	c
op	99:29	0:0	10	=
water	99:31	0:0	10	s
op	99:32	0:0	10	->
water	99:34	0:0	10	comp_index
op	99:44	0:0	10	[
water	99:45	0:0	10	i
op	99:46	0:0	10	]
water	99:47	0:0	10	;
water	100:20	0:0	10	h
op	100:29	0:0	10	=
water	100:31	0:0	10	s
op	100:32	0:0	10	->
water	100:34	0:0	10	h_scount
op	100:42	0:0	10	[
water	100:43	0:0	10	i
op	100:44	0:0	10	]
water	100:45	0:0	10	;
water	101:20	0:0	10	v
op	101:29	0:0	10	=
water	101:31	0:0	10	s
op	101:32	0:0	10	->
water	101:34	0:0	10	v_scount
op	101:42	0:0	10	[
water	101:43	0:0	10	i
op	101:44	0:0	10	]
water	101:45	0:0	10	;
water	102:20	0:0	10	x
op	102:29	0:0	10	=
water	102:31	0:0	10	0
water	102:32	0:0	10	;
water	103:20	0:0	10	y
op	103:29	0:0	10	=
water	103:31	0:0	10	0
water	103:32	0:0	10	;
water	104:20	0:0	10	linesize
op	104:29	0:0	10	=
water	104:31	0:0	10	s
op	104:32	0:0	10	->
water	104:34	0:0	10	linesize
op	104:42	0:0	10	[
water	104:43	0:0	10	c
op	104:44	0:0	10	]
water	104:45	0:0	10	;
if	106:20	106:44	10	(bits > 8)
cond	106:23	106:28	11	bits > 8
water	106:23	0:0	12	bits
op	106:27	0:0	12	>
water	106:28	0:0	12	8
stmts	106:31	106:44	11	
water	106:31	0:0	12	linesize
op	106:40	0:0	12	/=
water	106:43	0:0	12	2
water	106:44	0:0	12	;
for	108:20	134:20	10	(j = 0 ;j < n;j ++)
forinit	108:25	108:30	11	j = 0 ;
water	108:25	0:0	12	j
op	108:27	0:0	12	=
water	108:29	0:0	12	0
water	108:30	0:0	12	;
cond	108:32	108:36	11	j < n
water	108:32	0:0	12	j
op	108:34	0:0	12	<
water	108:36	0:0	12	n
forexpr	108:39	108:40	11	j ++
water	108:39	0:0	12	j
op	108:40	0:0	12	++
stmts	108:44	134:20	11	
water	108:44	0:0	12	{
decl	109:24	109:32	12	int	pred
water	111:24	0:0	12	dc
op	111:27	0:0	12	=
call	111:29	111:62	12	mjpeg_decode_dc
arg	111:45	111:46	13	s
water	111:45	0:0	14	s
arg	111:48	111:62	13	s->dc_index[i]
water	111:48	0:0	14	s
op	111:49	0:0	14	->
water	111:51	0:0	14	dc_index
op	111:59	0:0	14	[
water	111:60	0:0	14	i
op	111:61	0:0	14	]
water	111:63	0:0	12	;
if	112:24	113:37	12	(dc == 0 xFFFFF)
cond	112:27	112:34	13	dc == 0 xFFFFF
water	112:27	0:0	14	dc
op	112:30	0:0	14	==
water	112:33	0:0	14	0
water	112:34	0:0	14	xFFFFF
stmts	113:28	113:37	13	
return	113:28	113:37	14	-1
op	113:35	0:0	15	-
water	113:36	0:0	15	1
if	114:24	122:24	12	(bits <= 8)
cond	114:27	114:33	13	bits <= 8
water	114:27	0:0	14	bits
op	114:31	0:0	14	<=
water	114:33	0:0	14	8
stmts	114:35	122:24	13	
water	114:35	0:0	14	{
water	115:28	0:0	14	ptr
op	115:32	0:0	14	=
water	115:34	0:0	14	s
op	115:35	0:0	14	->
water	115:37	0:0	14	picture_ptr
op	115:48	0:0	14	->
water	115:50	0:0	14	data
op	115:54	0:0	14	[
water	115:55	0:0	14	c
op	115:56	0:0	14	]
op	115:58	0:0	14	+
water	116:30	0:0	14	(
water	116:31	0:0	14	linesize
op	116:40	0:0	14	*
water	116:42	0:0	14	(
water	116:43	0:0	14	v
op	116:45	0:0	14	*
water	116:47	0:0	14	mb_y
op	116:52	0:0	14	+
water	116:54	0:0	14	y
water	116:55	0:0	14	)
water	116:56	0:0	14	)
op	116:58	0:0	14	+
water	117:30	0:0	14	(
water	117:31	0:0	14	h
op	117:33	0:0	14	*
water	117:35	0:0	14	mb_x
op	117:40	0:0	14	+
water	117:42	0:0	14	x
water	117:43	0:0	14	)
water	117:44	0:0	14	;
call	118:28	118:94	14	PREDICT
arg	118:36	118:40	15	pred
water	118:36	0:0	16	pred
arg	118:42	118:58	15	ptr[-linesize-1]
water	118:42	0:0	16	ptr
op	118:45	0:0	16	[
op	118:46	0:0	16	-
water	118:47	0:0	16	linesize
op	118:55	0:0	16	-
water	118:56	0:0	16	1
op	118:57	0:0	16	]
arg	118:60	118:74	15	ptr[-linesize]
water	118:60	0:0	16	ptr
op	118:63	0:0	16	[
op	118:64	0:0	16	-
water	118:65	0:0	16	linesize
op	118:73	0:0	16	]
arg	118:76	118:83	15	ptr[-1]
water	118:76	0:0	16	ptr
op	118:79	0:0	16	[
op	118:80	0:0	16	-
water	118:81	0:0	16	1
op	118:82	0:0	16	]
arg	118:85	118:94	15	predictor
water	118:85	0:0	16	predictor
water	118:95	0:0	14	;
water	120:28	0:0	14	pred
op	120:33	0:0	14	&=
water	120:36	0:0	14	mask
water	120:40	0:0	14	;
op	121:28	0:0	14	*
water	121:29	0:0	14	ptr
op	121:33	0:0	14	=
water	121:35	0:0	14	pred
op	121:40	0:0	14	+
water	121:42	0:0	14	(
water	121:43	0:0	14	dc
op	121:46	0:0	14	<<
water	121:49	0:0	14	point_transform
water	121:64	0:0	14	)
water	121:65	0:0	14	;
water	122:24	0:0	14	}
else	122:25	128:24	12
stmts	122:29	128:24	13	
water	122:29	0:0	14	{
water	123:28	0:0	14	ptr16
op	123:34	0:0	14	=
call	123:36	123:122	14	(uint16_t*)
arg	123:48	123:122	15	s->picture_ptr->data[c]+2*(linesize*(v*mb_y+y))+2*(h*mb_x+x)
water	123:48	0:0	16	s
op	123:49	0:0	16	->
water	123:51	0:0	16	picture_ptr
op	123:62	0:0	16	->
water	123:64	0:0	16	data
op	123:68	0:0	16	[
water	123:69	0:0	16	c
op	123:70	0:0	16	]
op	123:72	0:0	16	+
water	123:74	0:0	16	2
op	123:75	0:0	16	*
water	123:76	0:0	16	(
water	123:77	0:0	16	linesize
op	123:86	0:0	16	*
water	123:88	0:0	16	(
water	123:89	0:0	16	v
op	123:91	0:0	16	*
water	123:93	0:0	16	mb_y
op	123:98	0:0	16	+
water	123:100	0:0	16	y
water	123:101	0:0	16	)
water	123:102	0:0	16	)
op	123:104	0:0	16	+
water	123:106	0:0	16	2
op	123:107	0:0	16	*
water	123:108	0:0	16	(
water	123:109	0:0	16	h
op	123:111	0:0	16	*
water	123:113	0:0	16	mb_x
op	123:118	0:0	16	+
water	123:120	0:0	16	x
water	123:121	0:0	16	)
water	123:123	0:0	14	;
call	124:28	124:100	14	PREDICT
arg	124:36	124:40	15	pred
water	124:36	0:0	16	pred
arg	124:42	124:60	15	ptr16[-linesize-1]
water	124:42	0:0	16	ptr16
op	124:47	0:0	16	[
op	124:48	0:0	16	-
water	124:49	0:0	16	linesize
op	124:57	0:0	16	-
water	124:58	0:0	16	1
op	124:59	0:0	16	]
arg	124:62	124:78	15	ptr16[-linesize]
water	124:62	0:0	16	ptr16
op	124:67	0:0	16	[
op	124:68	0:0	16	-
water	124:69	0:0	16	linesize
op	124:77	0:0	16	]
arg	124:80	124:89	15	ptr16[-1]
water	124:80	0:0	16	ptr16
op	124:85	0:0	16	[
op	124:86	0:0	16	-
water	124:87	0:0	16	1
op	124:88	0:0	16	]
arg	124:91	124:100	15	predictor
water	124:91	0:0	16	predictor
water	124:101	0:0	14	;
water	126:28	0:0	14	pred
op	126:33	0:0	14	&=
water	126:36	0:0	14	mask
water	126:40	0:0	14	;
op	127:28	0:0	14	*
water	127:29	0:0	14	ptr16
op	127:34	0:0	14	=
water	127:36	0:0	14	pred
op	127:41	0:0	14	+
water	127:43	0:0	14	(
water	127:44	0:0	14	dc
op	127:47	0:0	14	<<
water	127:50	0:0	14	point_transform
water	127:65	0:0	14	)
water	127:66	0:0	14	;
water	128:24	0:0	14	}
if	130:24	133:24	12	(++ x == h)
cond	130:28	130:35	13	++ x == h
op	130:28	0:0	14	++
water	130:30	0:0	14	x
op	130:32	0:0	14	==
water	130:35	0:0	14	h
stmts	130:38	133:24	13	
water	130:38	0:0	14	{
water	131:28	0:0	14	x
op	131:30	0:0	14	=
water	131:32	0:0	14	0
water	131:33	0:0	14	;
water	132:28	0:0	14	y
op	132:29	0:0	14	++
water	132:31	0:0	14	;
water	133:24	0:0	14	}
water	134:20	0:0	12	}
water	135:16	0:0	10	}
water	136:12	0:0	8	}
if	137:12	140:12	6	(s -> restart_interval && ! -- s -> restart_count)
cond	137:16	137:45	7	s -> restart_interval && ! -- s -> restart_count
water	137:16	0:0	8	s
op	137:17	0:0	8	->
water	137:19	0:0	8	restart_interval
op	137:36	0:0	8	&&
op	137:39	0:0	8	!
op	137:40	0:0	8	--
water	137:42	0:0	8	s
op	137:43	0:0	8	->
water	137:45	0:0	8	restart_count
stmts	137:60	140:12	7	
water	137:60	0:0	8	{
call	138:16	138:37	8	align_get_bits
arg	138:31	138:37	9	&s->gb
op	138:31	0:0	10	&
water	138:32	0:0	10	s
op	138:33	0:0	10	->
water	138:35	0:0	10	gb
water	138:38	0:0	8	;
call	139:16	139:36	8	skip_bits
arg	139:26	139:32	9	&s->gb
op	139:26	0:0	10	&
water	139:27	0:0	10	s
op	139:28	0:0	10	->
water	139:30	0:0	10	gb
arg	139:34	139:36	9	16
water	139:34	0:0	10	16
water	139:37	0:0	8	;
water	140:12	0:0	8	}
water	141:8	0:0	6	}
water	142:4	0:0	4	}
return	143:4	143:12	2	0
water	143:11	0:0	3	0
