func	1:0	98:0	0	int	ff_mms_asf_header_parser
params	1:28	0:0	1	
param	1:29	1:44	2	MMSContext *	mms
stmnts	0:0	97:12	1	
decl	3:4	3:32	2	uint8_t	*p
op	3:15	0:0	2	=
water	3:17	0:0	2	mms
op	3:20	0:0	2	->
water	3:22	0:0	2	asf_header
decl	4:4	4:16	2	uint8_t	*end
decl	5:4	5:24	2	int	flags
water	5:13	0:0	2	,
decl	5:4	5:24	2	int	stream_id
water	6:4	0:0	2	mms
op	6:7	0:0	2	->
water	6:9	0:0	2	stream_num
op	6:20	0:0	2	=
water	6:22	0:0	2	0
water	6:23	0:0	2	;
if	8:4	14:4	2	(mms -> asf_header_size < sizeof ( ff_asf_guid ) * 2 + 22 ||memcmp (p ,ff_asf_header ,sizeof ( ff_asf_guid ) ))
cond	8:8	9:52	3	mms -> asf_header_size < sizeof ( ff_asf_guid ) * 2 + 22 ||memcmp (p ,ff_asf_header ,sizeof ( ff_asf_guid ) )
water	8:8	0:0	4	mms
op	8:11	0:0	4	->
water	8:13	0:0	4	asf_header_size
op	8:29	0:0	4	<
op	8:31	0:0	4	sizeof
water	8:37	0:0	4	(
water	8:38	0:0	4	ff_asf_guid
water	8:49	0:0	4	)
op	8:51	0:0	4	*
water	8:53	0:0	4	2
op	8:55	0:0	4	+
water	8:57	0:0	4	22
op	8:60	0:0	4	||
call	9:8	9:52	4	memcmp
arg	9:15	9:16	5	p
water	9:15	0:0	6	p
arg	9:18	9:31	5	ff_asf_header
water	9:18	0:0	6	ff_asf_header
arg	9:33	9:52	5	sizeof(ff_asf_guid)
op	9:33	0:0	6	sizeof
water	9:39	0:0	6	(
water	9:40	0:0	6	ff_asf_guid
water	9:51	0:0	6	)
stmts	9:55	14:4	3	
water	9:55	0:0	4	{
call	10:8	12:35	4	av_log
arg	10:15	10:19	5	NULL
water	10:15	0:0	6	NULL
arg	10:21	10:33	5	AV_LOG_ERROR
water	10:21	0:0	6	AV_LOG_ERROR
arg	11:15	11:63	5	"Corrupt stream (invalid ASF header, size=%d)\n"
water	11:15	0:0	6	"Corrupt stream (invalid ASF header, size=%d)\n"
arg	12:15	12:35	5	mms->asf_header_size
water	12:15	0:0	6	mms
op	12:18	0:0	6	->
water	12:20	0:0	6	asf_header_size
water	12:36	0:0	4	;
return	13:8	13:34	4	AVERROR_INVALIDDATA
water	13:15	0:0	5	AVERROR_INVALIDDATA
water	14:4	0:0	4	}
water	16:4	0:0	2	end
op	16:8	0:0	2	=
water	16:10	0:0	2	mms
op	16:13	0:0	2	->
water	16:15	0:0	2	asf_header
op	16:26	0:0	2	+
water	16:28	0:0	2	mms
op	16:31	0:0	2	->
water	16:33	0:0	2	asf_header_size
water	16:48	0:0	2	;
water	18:4	0:0	2	p
op	18:6	0:0	2	+=
op	18:9	0:0	2	sizeof
water	18:15	0:0	2	(
water	18:16	0:0	2	ff_asf_guid
water	18:27	0:0	2	)
op	18:29	0:0	2	+
water	18:31	0:0	2	14
water	18:33	0:0	2	;
while	19:4	95:4	2	(end - p >= sizeof ( ff_asf_guid ) + 8)
cond	19:10	19:43	3	end - p >= sizeof ( ff_asf_guid ) + 8
water	19:10	0:0	4	end
op	19:14	0:0	4	-
water	19:16	0:0	4	p
op	19:18	0:0	4	>=
op	19:21	0:0	4	sizeof
water	19:27	0:0	4	(
water	19:28	0:0	4	ff_asf_guid
water	19:39	0:0	4	)
op	19:41	0:0	4	+
water	19:43	0:0	4	8
stmts	19:46	95:4	3	
water	19:46	0:0	4	{
decl	20:8	20:26	4	uint64_t	chunksize
if	21:8	23:8	4	(!memcmp (p ,ff_asf_data_header ,sizeof ( ff_asf_guid ) ))
cond	21:12	21:62	5	!memcmp (p ,ff_asf_data_header ,sizeof ( ff_asf_guid ) )
op	21:12	0:0	6	!
call	21:13	21:62	6	memcmp
arg	21:20	21:21	7	p
water	21:20	0:0	8	p
arg	21:23	21:41	7	ff_asf_data_header
water	21:23	0:0	8	ff_asf_data_header
arg	21:43	21:62	7	sizeof(ff_asf_guid)
op	21:43	0:0	8	sizeof
water	21:49	0:0	8	(
water	21:50	0:0	8	ff_asf_guid
water	21:61	0:0	8	)
stmts	21:65	23:8	5	
water	21:65	0:0	6	{
water	22:12	0:0	6	chunksize
op	22:22	0:0	6	=
water	22:24	0:0	6	50
water	22:26	0:0	6	;
water	23:8	0:0	6	}
else	23:10	25:8	4
stmts	23:15	25:8	5	
water	23:15	0:0	6	{
water	24:12	0:0	6	chunksize
op	24:22	0:0	6	=
call	24:24	24:55	6	AV_RL64
arg	24:32	24:55	7	p+sizeof(ff_asf_guid)
water	24:32	0:0	8	p
op	24:34	0:0	8	+
op	24:36	0:0	8	sizeof
water	24:42	0:0	8	(
water	24:43	0:0	8	ff_asf_guid
water	24:54	0:0	8	)
water	24:56	0:0	6	;
water	25:8	0:0	6	}
if	26:8	31:8	4	(! chunksize || chunksize > end - p)
cond	26:12	26:44	5	! chunksize || chunksize > end - p
op	26:12	0:0	6	!
water	26:13	0:0	6	chunksize
op	26:23	0:0	6	||
water	26:26	0:0	6	chunksize
op	26:36	0:0	6	>
water	26:38	0:0	6	end
op	26:42	0:0	6	-
water	26:44	0:0	6	p
stmts	26:47	31:8	5	
water	26:47	0:0	6	{
call	27:12	29:28	6	av_log
arg	27:19	27:23	7	NULL
water	27:19	0:0	8	NULL
arg	27:25	27:37	7	AV_LOG_ERROR
water	27:25	0:0	8	AV_LOG_ERROR
arg	28:19	28:77	7	"Corrupt stream (header chunksize %"PRId64" is invalid)\n"
water	28:19	0:0	8	"Corrupt stream (header chunksize %"
water	28:55	0:0	8	PRId64
water	28:61	0:0	8	" is invalid)\n"
arg	29:19	29:28	7	chunksize
water	29:19	0:0	8	chunksize
water	29:29	0:0	6	;
return	30:12	30:38	6	AVERROR_INVALIDDATA
water	30:19	0:0	7	AVERROR_INVALIDDATA
water	31:8	0:0	6	}
if	32:8	43:8	4	(!memcmp (p ,ff_asf_file_header ,sizeof ( ff_asf_guid ) ))
cond	32:12	32:62	5	!memcmp (p ,ff_asf_file_header ,sizeof ( ff_asf_guid ) )
op	32:12	0:0	6	!
call	32:13	32:62	6	memcmp
arg	32:20	32:21	7	p
water	32:20	0:0	8	p
arg	32:23	32:41	7	ff_asf_file_header
water	32:23	0:0	8	ff_asf_file_header
arg	32:43	32:62	7	sizeof(ff_asf_guid)
op	32:43	0:0	8	sizeof
water	32:49	0:0	8	(
water	32:50	0:0	8	ff_asf_guid
water	32:61	0:0	8	)
stmts	32:65	43:8	5	
water	32:65	0:0	6	{
if	34:12	42:12	6	(end - p > sizeof ( ff_asf_guid ) * 2 + 68)
cond	34:16	34:52	7	end - p > sizeof ( ff_asf_guid ) * 2 + 68
water	34:16	0:0	8	end
op	34:20	0:0	8	-
water	34:22	0:0	8	p
op	34:24	0:0	8	>
op	34:26	0:0	8	sizeof
water	34:32	0:0	8	(
water	34:33	0:0	8	ff_asf_guid
water	34:44	0:0	8	)
op	34:46	0:0	8	*
water	34:48	0:0	8	2
op	34:50	0:0	8	+
water	34:52	0:0	8	68
stmts	34:56	42:12	7	
water	34:56	0:0	8	{
water	35:16	0:0	8	mms
op	35:19	0:0	8	->
water	35:21	0:0	8	asf_packet_len
op	35:36	0:0	8	=
call	35:38	35:78	8	AV_RL32
arg	35:46	35:78	9	p+sizeof(ff_asf_guid)*2+64
water	35:46	0:0	10	p
op	35:48	0:0	10	+
op	35:50	0:0	10	sizeof
water	35:56	0:0	10	(
water	35:57	0:0	10	ff_asf_guid
water	35:68	0:0	10	)
op	35:70	0:0	10	*
water	35:72	0:0	10	2
op	35:74	0:0	10	+
water	35:76	0:0	10	64
water	35:79	0:0	8	;
if	36:16	41:16	8	(mms -> asf_packet_len <= 0 || mms -> asf_packet_len > sizeof ( mms -> in_buffer ))
cond	36:20	36:91	9	mms -> asf_packet_len <= 0 || mms -> asf_packet_len > sizeof ( mms -> in_buffer )
water	36:20	0:0	10	mms
op	36:23	0:0	10	->
water	36:25	0:0	10	asf_packet_len
op	36:40	0:0	10	<=
water	36:43	0:0	10	0
op	36:45	0:0	10	||
water	36:48	0:0	10	mms
op	36:51	0:0	10	->
water	36:53	0:0	10	asf_packet_len
op	36:68	0:0	10	>
op	36:70	0:0	10	sizeof
water	36:76	0:0	10	(
water	36:77	0:0	10	mms
op	36:80	0:0	10	->
water	36:82	0:0	10	in_buffer
water	36:91	0:0	10	)
stmts	36:94	41:16	9	
water	36:94	0:0	10	{
call	37:20	39:46	10	av_log
arg	37:27	37:31	11	NULL
water	37:27	0:0	12	NULL
arg	37:33	37:45	11	AV_LOG_ERROR
water	37:33	0:0	12	AV_LOG_ERROR
arg	38:27	38:68	11	"Corrupt stream (too large pkt_len %d)\n"
water	38:27	0:0	12	"Corrupt stream (too large pkt_len %d)\n"
arg	39:27	39:46	11	mms->asf_packet_len
water	39:27	0:0	12	mms
op	39:30	0:0	12	->
water	39:32	0:0	12	asf_packet_len
water	39:47	0:0	10	;
return	40:20	40:46	10	AVERROR_INVALIDDATA
water	40:27	0:0	11	AVERROR_INVALIDDATA
water	41:16	0:0	10	}
water	42:12	0:0	8	}
water	43:8	0:0	6	}
else	43:10	63:8	4
stmts	43:15	63:8	5	
if	43:15	63:8	6	(!memcmp (p ,ff_asf_stream_header ,sizeof ( ff_asf_guid ) ))
cond	43:19	43:71	7	!memcmp (p ,ff_asf_stream_header ,sizeof ( ff_asf_guid ) )
op	43:19	0:0	8	!
call	43:20	43:71	8	memcmp
arg	43:27	43:28	9	p
water	43:27	0:0	10	p
arg	43:30	43:50	9	ff_asf_stream_header
water	43:30	0:0	10	ff_asf_stream_header
arg	43:52	43:71	9	sizeof(ff_asf_guid)
op	43:52	0:0	10	sizeof
water	43:58	0:0	10	(
water	43:59	0:0	10	ff_asf_guid
water	43:70	0:0	10	)
stmts	43:74	63:8	7	
water	43:74	0:0	8	{
water	44:12	0:0	8	flags
op	44:22	0:0	8	=
call	44:24	44:62	8	AV_RL16
arg	44:32	44:62	9	p+sizeof(ff_asf_guid)*3+24
water	44:32	0:0	10	p
op	44:34	0:0	10	+
op	44:36	0:0	10	sizeof
water	44:42	0:0	10	(
water	44:43	0:0	10	ff_asf_guid
water	44:54	0:0	10	)
op	44:55	0:0	10	*
water	44:56	0:0	10	3
op	44:58	0:0	10	+
water	44:60	0:0	10	24
water	44:63	0:0	8	;
water	45:12	0:0	8	stream_id
op	45:22	0:0	8	=
water	45:24	0:0	8	flags
op	45:30	0:0	8	&
water	45:32	0:0	8	0
water	45:33	0:0	8	x7F
water	45:36	0:0	8	;
if	49:12	58:12	8	(mms -> stream_num < MMS_MAX_STREAMS && 46 + mms -> stream_num * 6 < sizeof ( mms -> out_buffer ))
cond	49:16	50:69	9	mms -> stream_num < MMS_MAX_STREAMS && 46 + mms -> stream_num * 6 < sizeof ( mms -> out_buffer )
water	49:16	0:0	10	mms
op	49:19	0:0	10	->
water	49:21	0:0	10	stream_num
op	49:32	0:0	10	<
water	49:34	0:0	10	MMS_MAX_STREAMS
op	49:50	0:0	10	&&
water	50:20	0:0	10	46
op	50:23	0:0	10	+
water	50:25	0:0	10	mms
op	50:28	0:0	10	->
water	50:30	0:0	10	stream_num
op	50:41	0:0	10	*
water	50:43	0:0	10	6
op	50:45	0:0	10	<
op	50:47	0:0	10	sizeof
water	50:53	0:0	10	(
water	50:54	0:0	10	mms
op	50:57	0:0	10	->
water	50:59	0:0	10	out_buffer
water	50:69	0:0	10	)
stmts	50:72	58:12	9	
water	50:72	0:0	10	{
water	51:16	0:0	10	mms
op	51:19	0:0	10	->
water	51:21	0:0	10	streams
op	51:29	0:0	10	=
call	51:31	53:76	10	av_fast_realloc
arg	51:47	51:59	11	mms->streams
water	51:47	0:0	12	mms
op	51:50	0:0	12	->
water	51:52	0:0	12	streams
arg	52:35	52:61	11	&mms->nb_streams_allocated
op	52:35	0:0	12	&
water	52:36	0:0	12	mms
op	52:39	0:0	12	->
water	52:41	0:0	12	nb_streams_allocated
arg	53:35	53:76	11	(mms->stream_num+1)*sizeof(MMSStream)
water	53:35	0:0	12	(
water	53:36	0:0	12	mms
op	53:39	0:0	12	->
water	53:41	0:0	12	stream_num
op	53:52	0:0	12	+
water	53:54	0:0	12	1
water	53:55	0:0	12	)
op	53:57	0:0	12	*
op	53:59	0:0	12	sizeof
water	53:65	0:0	12	(
water	53:66	0:0	12	MMSStream
water	53:75	0:0	12	)
water	53:77	0:0	10	;
if	54:16	55:42	10	(! mms -> streams)
cond	54:20	54:26	11	! mms -> streams
op	54:20	0:0	12	!
water	54:21	0:0	12	mms
op	54:24	0:0	12	->
water	54:26	0:0	12	streams
stmts	55:20	55:42	11	
return	55:20	55:42	12	AVERROR(ENOMEM)
call	55:27	55:41	13	AVERROR
arg	55:35	55:41	14	ENOMEM
water	55:35	0:0	15	ENOMEM
water	56:16	0:0	10	mms
op	56:19	0:0	10	->
water	56:21	0:0	10	streams
op	56:28	0:0	10	[
water	56:29	0:0	10	mms
op	56:32	0:0	10	->
water	56:34	0:0	10	stream_num
op	56:44	0:0	10	]
op	56:45	0:0	10	.
water	56:46	0:0	10	id
op	56:49	0:0	10	=
water	56:51	0:0	10	stream_id
water	56:60	0:0	10	;
water	57:16	0:0	10	mms
op	57:19	0:0	10	->
water	57:21	0:0	10	stream_num
op	57:31	0:0	10	++
water	57:33	0:0	10	;
water	58:12	0:0	10	}
else	58:14	62:12	8
stmts	58:19	62:12	9	
water	58:19	0:0	10	{
call	59:16	60:64	10	av_log
arg	59:23	59:27	11	NULL
water	59:23	0:0	12	NULL
arg	59:29	59:41	11	AV_LOG_ERROR
water	59:29	0:0	12	AV_LOG_ERROR
arg	60:23	60:64	11	"Corrupt stream (too many A/V streams)\n"
water	60:23	0:0	12	"Corrupt stream (too many A/V streams)\n"
water	60:65	0:0	10	;
return	61:16	61:42	10	AVERROR_INVALIDDATA
water	61:23	0:0	11	AVERROR_INVALIDDATA
water	62:12	0:0	10	}
water	63:8	0:0	8	}
else	63:10	91:8	4
stmts	63:15	91:8	5	
if	63:15	91:8	6	(!memcmp (p ,ff_asf_ext_stream_header ,sizeof ( ff_asf_guid ) ))
cond	63:19	63:75	7	!memcmp (p ,ff_asf_ext_stream_header ,sizeof ( ff_asf_guid ) )
op	63:19	0:0	8	!
call	63:20	63:75	8	memcmp
arg	63:27	63:28	9	p
water	63:27	0:0	10	p
arg	63:30	63:54	9	ff_asf_ext_stream_header
water	63:30	0:0	10	ff_asf_ext_stream_header
arg	63:56	63:75	9	sizeof(ff_asf_guid)
op	63:56	0:0	10	sizeof
water	63:62	0:0	10	(
water	63:63	0:0	10	ff_asf_guid
water	63:74	0:0	10	)
stmts	63:78	91:8	7	
water	63:78	0:0	8	{
if	64:12	90:12	8	(end - p >= 88)
cond	64:16	64:27	9	end - p >= 88
water	64:16	0:0	10	end
op	64:20	0:0	10	-
water	64:22	0:0	10	p
op	64:24	0:0	10	>=
water	64:27	0:0	10	88
stmts	64:31	90:12	9	
water	64:31	0:0	10	{
decl	65:16	65:83	10	int	stream_count
op	65:33	0:0	10	=
call	65:35	65:49	11	AV_RL16
arg	65:43	65:49	12	p+84
water	65:43	0:0	13	p
op	65:45	0:0	13	+
water	65:47	0:0	13	84
water	65:50	0:0	10	,
decl	65:16	65:83	10	int	ext_len_count
op	65:66	0:0	10	=
call	65:68	65:82	11	AV_RL16
arg	65:76	65:82	12	p+86
water	65:76	0:0	13	p
op	65:78	0:0	13	+
water	65:80	0:0	13	86
decl	66:16	66:40	10	uint64_t	skip_bytes
op	66:36	0:0	10	=
water	66:38	0:0	10	88
while	67:16	74:16	10	(stream_count --)
cond	67:23	67:35	11	stream_count --
water	67:23	0:0	12	stream_count
op	67:35	0:0	12	--
stmts	67:39	74:16	11	
water	67:39	0:0	12	{
if	68:20	72:20	12	(end - p < skip_bytes + 4)
cond	68:24	68:47	13	end - p < skip_bytes + 4
water	68:24	0:0	14	end
op	68:28	0:0	14	-
water	68:30	0:0	14	p
op	68:32	0:0	14	<
water	68:34	0:0	14	skip_bytes
op	68:45	0:0	14	+
water	68:47	0:0	14	4
stmts	68:50	72:20	13	
water	68:50	0:0	14	{
call	69:24	70:96	14	av_log
arg	69:31	69:35	15	NULL
water	69:31	0:0	16	NULL
arg	69:37	69:49	15	AV_LOG_ERROR
water	69:37	0:0	16	AV_LOG_ERROR
arg	70:31	70:96	15	"Corrupt stream (next stream name length is not in the buffer)\n"
water	70:31	0:0	16	"Corrupt stream (next stream name length is not in the buffer)\n"
water	70:97	0:0	14	;
return	71:24	71:50	14	AVERROR_INVALIDDATA
water	71:31	0:0	15	AVERROR_INVALIDDATA
water	72:20	0:0	14	}
water	73:20	0:0	12	skip_bytes
op	73:31	0:0	12	+=
water	73:34	0:0	12	4
op	73:36	0:0	12	+
call	73:38	73:64	12	AV_RL16
arg	73:46	73:64	13	p+skip_bytes+2
water	73:46	0:0	14	p
op	73:48	0:0	14	+
water	73:50	0:0	14	skip_bytes
op	73:61	0:0	14	+
water	73:63	0:0	14	2
water	73:65	0:0	12	;
water	74:16	0:0	12	}
while	75:16	82:16	10	(ext_len_count --)
cond	75:23	75:36	11	ext_len_count --
water	75:23	0:0	12	ext_len_count
op	75:36	0:0	12	--
stmts	75:40	82:16	11	
water	75:40	0:0	12	{
if	76:20	80:20	12	(end - p < skip_bytes + 22)
cond	76:24	76:47	13	end - p < skip_bytes + 22
water	76:24	0:0	14	end
op	76:28	0:0	14	-
water	76:30	0:0	14	p
op	76:32	0:0	14	<
water	76:34	0:0	14	skip_bytes
op	76:45	0:0	14	+
water	76:47	0:0	14	22
stmts	76:51	80:20	13	
water	76:51	0:0	14	{
call	77:24	78:106	14	av_log
arg	77:31	77:35	15	NULL
water	77:31	0:0	16	NULL
arg	77:37	77:49	15	AV_LOG_ERROR
water	77:37	0:0	16	AV_LOG_ERROR
arg	78:31	78:106	15	"Corrupt stream (next extension system info length is not in the buffer)\n"
water	78:31	0:0	16	"Corrupt stream (next extension system info length is not in the buffer)\n"
water	78:107	0:0	14	;
return	79:24	79:50	14	AVERROR_INVALIDDATA
water	79:31	0:0	15	AVERROR_INVALIDDATA
water	80:20	0:0	14	}
water	81:20	0:0	12	skip_bytes
op	81:31	0:0	12	+=
water	81:34	0:0	12	22
op	81:37	0:0	12	+
call	81:39	81:66	12	AV_RL32
arg	81:47	81:66	13	p+skip_bytes+18
water	81:47	0:0	14	p
op	81:49	0:0	14	+
water	81:51	0:0	14	skip_bytes
op	81:62	0:0	14	+
water	81:64	0:0	14	18
water	81:67	0:0	12	;
water	82:16	0:0	12	}
if	83:16	87:16	10	(end - p < skip_bytes)
cond	83:20	83:30	11	end - p < skip_bytes
water	83:20	0:0	12	end
op	83:24	0:0	12	-
water	83:26	0:0	12	p
op	83:28	0:0	12	<
water	83:30	0:0	12	skip_bytes
stmts	83:42	87:16	11	
water	83:42	0:0	12	{
call	84:20	85:96	12	av_log
arg	84:27	84:31	13	NULL
water	84:27	0:0	14	NULL
arg	84:33	84:45	13	AV_LOG_ERROR
water	84:33	0:0	14	AV_LOG_ERROR
arg	85:27	85:96	13	"Corrupt stream (the last extension system info length is invalid)\n"
water	85:27	0:0	14	"Corrupt stream (the last extension system info length is invalid)\n"
water	85:97	0:0	12	;
return	86:20	86:46	12	AVERROR_INVALIDDATA
water	86:27	0:0	13	AVERROR_INVALIDDATA
water	87:16	0:0	12	}
if	88:16	89:42	10	(chunksize - skip_bytes > 24)
cond	88:20	88:45	11	chunksize - skip_bytes > 24
water	88:20	0:0	12	chunksize
op	88:30	0:0	12	-
water	88:32	0:0	12	skip_bytes
op	88:43	0:0	12	>
water	88:45	0:0	12	24
stmts	89:20	89:42	11	
water	89:20	0:0	12	chunksize
op	89:30	0:0	12	=
water	89:32	0:0	12	skip_bytes
water	89:42	0:0	12	;
water	90:12	0:0	10	}
water	91:8	0:0	8	}
else	91:10	93:8	4
stmts	91:15	93:8	5	
if	91:15	93:8	6	(!memcmp (p ,ff_asf_head1_guid ,sizeof ( ff_asf_guid ) ))
cond	91:19	91:68	7	!memcmp (p ,ff_asf_head1_guid ,sizeof ( ff_asf_guid ) )
op	91:19	0:0	8	!
call	91:20	91:68	8	memcmp
arg	91:27	91:28	9	p
water	91:27	0:0	10	p
arg	91:30	91:47	9	ff_asf_head1_guid
water	91:30	0:0	10	ff_asf_head1_guid
arg	91:49	91:68	9	sizeof(ff_asf_guid)
op	91:49	0:0	10	sizeof
water	91:55	0:0	10	(
water	91:56	0:0	10	ff_asf_guid
water	91:67	0:0	10	)
stmts	91:71	93:8	7	
water	91:71	0:0	8	{
water	92:12	0:0	8	chunksize
op	92:22	0:0	8	=
water	92:24	0:0	8	46
water	92:26	0:0	8	;
water	93:8	0:0	8	}
water	94:8	0:0	4	p
op	94:10	0:0	4	+=
water	94:13	0:0	4	chunksize
water	94:22	0:0	4	;
water	95:4	0:0	4	}
return	97:4	97:12	2	0
water	97:11	0:0	3	0
