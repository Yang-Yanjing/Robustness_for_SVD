func	1:0	133:0	0	static int	handle_eac3
params	1:22	0:0	1	
param	1:23	1:41	2	MOVMuxContext *	mov
param	1:43	1:56	2	AVPacket *	pkt
param	1:58	1:73	2	MOVTrack *	track
stmnts	0:0	132:14	1	
decl	3:4	3:29	2	AC3HeaderInfo	*hdr
op	3:23	0:0	2	=
water	3:25	0:0	2	NULL
decl	4:4	4:26	2	struct eac3_info	*info
decl	5:4	5:23	2	int	num_blocks
water	5:18	0:0	2	,
decl	5:4	5:23	2	int	ret
if	7:4	8:30	2	(! track -> eac3_priv && ! ( track -> eac3_priv =av_mallocz (sizeof ( * info ) ) ))
cond	7:8	7:75	3	! track -> eac3_priv && ! ( track -> eac3_priv =av_mallocz (sizeof ( * info ) ) )
op	7:8	0:0	4	!
water	7:9	0:0	4	track
op	7:14	0:0	4	->
water	7:16	0:0	4	eac3_priv
op	7:26	0:0	4	&&
op	7:29	0:0	4	!
water	7:30	0:0	4	(
water	7:31	0:0	4	track
op	7:36	0:0	4	->
water	7:38	0:0	4	eac3_priv
op	7:48	0:0	4	=
call	7:50	7:74	4	av_mallocz
arg	7:61	7:74	5	sizeof(*info)
op	7:61	0:0	6	sizeof
water	7:67	0:0	6	(
op	7:68	0:0	6	*
water	7:69	0:0	6	info
water	7:73	0:0	6	)
water	7:75	0:0	4	)
stmts	8:8	8:30	3	
return	8:8	8:30	4	AVERROR(ENOMEM)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	ENOMEM
water	8:23	0:0	7	ENOMEM
water	9:4	0:0	2	info
op	9:9	0:0	2	=
water	9:11	0:0	2	track
op	9:16	0:0	2	->
water	9:18	0:0	2	eac3_priv
water	9:27	0:0	2	;
if	11:4	19:4	2	(avpriv_ac3_parse_header (& hdr ,pkt -> data ,pkt -> size ) < 0)
cond	11:8	11:62	3	avpriv_ac3_parse_header (& hdr ,pkt -> data ,pkt -> size ) < 0
call	11:8	11:58	4	avpriv_ac3_parse_header
arg	11:32	11:36	5	&hdr
op	11:32	0:0	6	&
water	11:33	0:0	6	hdr
arg	11:38	11:47	5	pkt->data
water	11:38	0:0	6	pkt
op	11:41	0:0	6	->
water	11:43	0:0	6	data
arg	11:49	11:58	5	pkt->size
water	11:49	0:0	6	pkt
op	11:52	0:0	6	->
water	11:54	0:0	6	size
op	11:60	0:0	4	<
water	11:62	0:0	4	0
stmts	11:65	19:4	3	
water	11:65	0:0	4	{
if	13:8	16:8	4	(! track -> entry)
cond	13:12	13:20	5	! track -> entry
op	13:12	0:0	6	!
water	13:13	0:0	6	track
op	13:18	0:0	6	->
water	13:20	0:0	6	entry
stmts	13:27	16:8	5	
water	13:27	0:0	6	{
call	14:12	14:92	6	av_log
arg	14:19	14:22	7	mov
water	14:19	0:0	8	mov
arg	14:24	14:38	7	AV_LOG_WARNING
water	14:24	0:0	8	AV_LOG_WARNING
arg	14:40	14:92	7	"Dropping invalid packet from start of the stream\n"
water	14:40	0:0	8	"Dropping invalid packet from start of the stream\n"
water	14:93	0:0	6	;
water	15:12	0:0	6	ret
op	15:16	0:0	6	=
water	15:18	0:0	6	0
water	15:19	0:0	6	;
water	16:8	0:0	6	}
else	16:10	17:37	4
stmts	17:12	17:37	5	
water	17:12	0:0	6	ret
op	17:16	0:0	6	=
water	17:18	0:0	6	AVERROR_INVALIDDATA
water	17:37	0:0	6	;
goto	18:8	18:16	4	end
water	18:13	0:0	5	end
water	19:4	0:0	4	}
water	21:4	0:0	2	info
op	21:8	0:0	2	->
water	21:10	0:0	2	data_rate
op	21:20	0:0	2	=
call	21:22	21:65	2	FFMAX
arg	21:28	21:43	3	info->data_rate
water	21:28	0:0	4	info
op	21:32	0:0	4	->
water	21:34	0:0	4	data_rate
arg	21:45	21:65	3	hdr->bit_rate/1000
water	21:45	0:0	4	hdr
op	21:48	0:0	4	->
water	21:50	0:0	4	bit_rate
op	21:59	0:0	4	/
water	21:61	0:0	4	1000
water	21:66	0:0	2	;
water	22:4	0:0	2	num_blocks
op	22:15	0:0	2	=
water	22:17	0:0	2	hdr
op	22:20	0:0	2	->
water	22:22	0:0	2	num_blocks
water	22:32	0:0	2	;
if	24:4	96:4	2	(! info -> ec3_done)
cond	24:8	24:15	3	! info -> ec3_done
op	24:8	0:0	4	!
water	24:9	0:0	4	info
op	24:13	0:0	4	->
water	24:15	0:0	4	ec3_done
stmts	24:25	96:4	3	
water	24:25	0:0	4	{
if	26:8	29:8	4	(hdr -> bitstream_id <= 10 && hdr -> substreamid != 0)
cond	26:12	26:59	5	hdr -> bitstream_id <= 10 && hdr -> substreamid != 0
water	26:12	0:0	6	hdr
op	26:15	0:0	6	->
water	26:17	0:0	6	bitstream_id
op	26:30	0:0	6	<=
water	26:33	0:0	6	10
op	26:36	0:0	6	&&
water	26:39	0:0	6	hdr
op	26:42	0:0	6	->
water	26:44	0:0	6	substreamid
op	26:56	0:0	6	!=
water	26:59	0:0	6	0
stmts	26:62	29:8	5	
water	26:62	0:0	6	{
water	27:12	0:0	6	ret
op	27:16	0:0	6	=
call	27:18	27:32	6	AVERROR
arg	27:26	27:32	7	EINVAL
water	27:26	0:0	8	EINVAL
water	27:33	0:0	6	;
goto	28:12	28:20	6	end
water	28:17	0:0	7	end
water	29:8	0:0	6	}
if	33:8	50:8	4	(hdr -> frame_type == EAC3_FRAME_TYPE_INDEPENDENT)
cond	33:12	33:31	5	hdr -> frame_type == EAC3_FRAME_TYPE_INDEPENDENT
water	33:12	0:0	6	hdr
op	33:15	0:0	6	->
water	33:17	0:0	6	frame_type
op	33:28	0:0	6	==
water	33:31	0:0	6	EAC3_FRAME_TYPE_INDEPENDENT
stmts	33:60	50:8	5	
water	33:60	0:0	6	{
if	35:12	38:12	6	(hdr -> substreamid > info -> num_ind_sub + 1)
cond	35:16	35:55	7	hdr -> substreamid > info -> num_ind_sub + 1
water	35:16	0:0	8	hdr
op	35:19	0:0	8	->
water	35:21	0:0	8	substreamid
op	35:33	0:0	8	>
water	35:35	0:0	8	info
op	35:39	0:0	8	->
water	35:41	0:0	8	num_ind_sub
op	35:53	0:0	8	+
water	35:55	0:0	8	1
stmts	35:58	38:12	7	
water	35:58	0:0	8	{
water	36:16	0:0	8	ret
op	36:20	0:0	8	=
call	36:22	36:36	8	AVERROR
arg	36:30	36:36	9	EINVAL
water	36:30	0:0	10	EINVAL
water	36:37	0:0	8	;
goto	37:16	37:24	8	end
water	37:21	0:0	9	end
water	38:12	0:0	8	}
if	40:12	45:12	6	(hdr -> substreamid == info -> num_ind_sub + 1)
cond	40:16	40:56	7	hdr -> substreamid == info -> num_ind_sub + 1
water	40:16	0:0	8	hdr
op	40:19	0:0	8	->
water	40:21	0:0	8	substreamid
op	40:33	0:0	8	==
water	40:36	0:0	8	info
op	40:40	0:0	8	->
water	40:42	0:0	8	num_ind_sub
op	40:54	0:0	8	+
water	40:56	0:0	8	1
stmts	40:59	45:12	7	
water	40:59	0:0	8	{
call	42:16	42:83	8	avpriv_request_sample
arg	42:38	42:48	9	track->par
water	42:38	0:0	10	track
op	42:43	0:0	10	->
water	42:45	0:0	10	par
arg	42:50	42:83	9	"Multiple independent substreams"
water	42:50	0:0	10	"Multiple independent substreams"
water	42:84	0:0	8	;
water	43:16	0:0	8	ret
op	43:20	0:0	8	=
water	43:22	0:0	8	AVERROR_PATCHWELCOME
water	43:42	0:0	8	;
goto	44:16	44:24	8	end
water	44:21	0:0	9	end
water	45:12	0:0	8	}
else	45:14	49:12	6
stmts	45:19	49:12	7	
if	45:19	49:12	8	(hdr -> substreamid < info -> num_ind_sub || hdr -> substreamid == 0 && info -> substream [ 0 ] . bsid)
cond	45:23	46:67	9	hdr -> substreamid < info -> num_ind_sub || hdr -> substreamid == 0 && info -> substream [ 0 ] . bsid
water	45:23	0:0	10	hdr
op	45:26	0:0	10	->
water	45:28	0:0	10	substreamid
op	45:40	0:0	10	<
water	45:42	0:0	10	info
op	45:46	0:0	10	->
water	45:48	0:0	10	num_ind_sub
op	45:60	0:0	10	||
water	46:23	0:0	10	hdr
op	46:26	0:0	10	->
water	46:28	0:0	10	substreamid
op	46:40	0:0	10	==
water	46:43	0:0	10	0
op	46:45	0:0	10	&&
water	46:48	0:0	10	info
op	46:52	0:0	10	->
water	46:54	0:0	10	substream
op	46:63	0:0	10	[
water	46:64	0:0	10	0
op	46:65	0:0	10	]
op	46:66	0:0	10	.
water	46:67	0:0	10	bsid
stmts	46:73	49:12	9	
water	46:73	0:0	10	{
water	47:16	0:0	10	info
op	47:20	0:0	10	->
water	47:22	0:0	10	ec3_done
op	47:31	0:0	10	=
water	47:33	0:0	10	1
water	47:34	0:0	10	;
goto	48:16	48:32	10	concatenate
water	48:21	0:0	11	concatenate
water	49:12	0:0	10	}
water	50:8	0:0	6	}
water	53:8	0:0	4	info
op	53:12	0:0	4	->
water	53:14	0:0	4	substream
op	53:23	0:0	4	[
water	53:24	0:0	4	hdr
op	53:27	0:0	4	->
water	53:29	0:0	4	substreamid
op	53:40	0:0	4	]
op	53:41	0:0	4	.
water	53:42	0:0	4	fscod
op	53:48	0:0	4	=
water	53:50	0:0	4	hdr
op	53:53	0:0	4	->
water	53:55	0:0	4	sr_code
water	53:62	0:0	4	;
water	54:8	0:0	4	info
op	54:12	0:0	4	->
water	54:14	0:0	4	substream
op	54:23	0:0	4	[
water	54:24	0:0	4	hdr
op	54:27	0:0	4	->
water	54:29	0:0	4	substreamid
op	54:40	0:0	4	]
op	54:41	0:0	4	.
water	54:42	0:0	4	bsid
op	54:48	0:0	4	=
water	54:50	0:0	4	hdr
op	54:53	0:0	4	->
water	54:55	0:0	4	bitstream_id
water	54:67	0:0	4	;
water	55:8	0:0	4	info
op	55:12	0:0	4	->
water	55:14	0:0	4	substream
op	55:23	0:0	4	[
water	55:24	0:0	4	hdr
op	55:27	0:0	4	->
water	55:29	0:0	4	substreamid
op	55:40	0:0	4	]
op	55:41	0:0	4	.
water	55:42	0:0	4	bsmod
op	55:48	0:0	4	=
water	55:50	0:0	4	hdr
op	55:53	0:0	4	->
water	55:55	0:0	4	bitstream_mode
water	55:69	0:0	4	;
water	56:8	0:0	4	info
op	56:12	0:0	4	->
water	56:14	0:0	4	substream
op	56:23	0:0	4	[
water	56:24	0:0	4	hdr
op	56:27	0:0	4	->
water	56:29	0:0	4	substreamid
op	56:40	0:0	4	]
op	56:41	0:0	4	.
water	56:42	0:0	4	acmod
op	56:48	0:0	4	=
water	56:50	0:0	4	hdr
op	56:53	0:0	4	->
water	56:55	0:0	4	channel_mode
water	56:67	0:0	4	;
water	57:8	0:0	4	info
op	57:12	0:0	4	->
water	57:14	0:0	4	substream
op	57:23	0:0	4	[
water	57:24	0:0	4	hdr
op	57:27	0:0	4	->
water	57:29	0:0	4	substreamid
op	57:40	0:0	4	]
op	57:41	0:0	4	.
water	57:42	0:0	4	lfeon
op	57:48	0:0	4	=
water	57:50	0:0	4	hdr
op	57:53	0:0	4	->
water	57:55	0:0	4	lfe_on
water	57:61	0:0	4	;
if	60:8	95:8	4	(pkt -> size != hdr -> frame_size)
cond	60:12	60:30	5	pkt -> size != hdr -> frame_size
water	60:12	0:0	6	pkt
op	60:15	0:0	6	->
water	60:17	0:0	6	size
op	60:22	0:0	6	!=
water	60:25	0:0	6	hdr
op	60:28	0:0	6	->
water	60:30	0:0	6	frame_size
stmts	60:42	95:8	5	
water	60:42	0:0	6	{
decl	61:12	61:44	6	int	cumul_size
op	61:27	0:0	6	=
water	61:29	0:0	6	hdr
op	61:32	0:0	6	->
water	61:34	0:0	6	frame_size
decl	62:12	62:41	6	int	parent
op	62:23	0:0	6	=
water	62:25	0:0	6	hdr
op	62:28	0:0	6	->
water	62:30	0:0	6	substreamid
while	64:12	94:12	6	(cumul_size != pkt -> size)
cond	64:19	64:38	7	cumul_size != pkt -> size
water	64:19	0:0	8	cumul_size
op	64:30	0:0	8	!=
water	64:33	0:0	8	pkt
op	64:36	0:0	8	->
water	64:38	0:0	8	size
stmts	64:44	94:12	7	
water	64:44	0:0	8	{
decl	65:16	65:33	8	GetBitContext	gbc
decl	66:16	66:21	8	int	i
water	67:16	0:0	8	ret
op	67:20	0:0	8	=
call	67:22	67:98	8	avpriv_ac3_parse_header
arg	67:46	67:50	9	&hdr
op	67:46	0:0	10	&
water	67:47	0:0	10	hdr
arg	67:52	67:74	9	pkt->data+cumul_size
water	67:52	0:0	10	pkt
op	67:55	0:0	10	->
water	67:57	0:0	10	data
op	67:62	0:0	10	+
water	67:64	0:0	10	cumul_size
arg	67:76	67:98	9	pkt->size-cumul_size
water	67:76	0:0	10	pkt
op	67:79	0:0	10	->
water	67:81	0:0	10	size
op	67:86	0:0	10	-
water	67:88	0:0	10	cumul_size
water	67:99	0:0	8	;
if	68:16	69:28	8	(ret < 0)
cond	68:20	68:26	9	ret < 0
water	68:20	0:0	10	ret
op	68:24	0:0	10	<
water	68:26	0:0	10	0
stmts	69:20	69:28	9	
goto	69:20	69:28	10	end
water	69:25	0:0	11	end
if	70:16	73:16	8	(hdr -> frame_type != EAC3_FRAME_TYPE_DEPENDENT)
cond	70:20	70:39	9	hdr -> frame_type != EAC3_FRAME_TYPE_DEPENDENT
water	70:20	0:0	10	hdr
op	70:23	0:0	10	->
water	70:25	0:0	10	frame_type
op	70:36	0:0	10	!=
water	70:39	0:0	10	EAC3_FRAME_TYPE_DEPENDENT
stmts	70:66	73:16	9	
water	70:66	0:0	10	{
water	71:20	0:0	10	ret
op	71:24	0:0	10	=
call	71:26	71:40	10	AVERROR
arg	71:34	71:40	11	EINVAL
water	71:34	0:0	12	EINVAL
water	71:41	0:0	10	;
goto	72:20	72:28	10	end
water	72:25	0:0	11	end
water	73:16	0:0	10	}
water	74:16	0:0	8	info
op	74:20	0:0	8	->
water	74:22	0:0	8	substream
op	74:31	0:0	8	[
water	74:32	0:0	8	parent
op	74:38	0:0	8	]
op	74:39	0:0	8	.
water	74:40	0:0	8	num_dep_sub
op	74:51	0:0	8	++
water	74:53	0:0	8	;
water	75:16	0:0	8	ret
op	75:20	0:0	8	/=
water	75:23	0:0	8	8
water	75:24	0:0	8	;
call	78:16	78:95	8	init_get_bits8
arg	78:31	78:35	9	&gbc
op	78:31	0:0	10	&
water	78:32	0:0	10	gbc
arg	78:37	78:65	9	pkt->data+cumul_size+ret
water	78:37	0:0	10	pkt
op	78:40	0:0	10	->
water	78:42	0:0	10	data
op	78:47	0:0	10	+
water	78:49	0:0	10	cumul_size
op	78:60	0:0	10	+
water	78:62	0:0	10	ret
arg	78:67	78:95	9	pkt->size-cumul_size-ret
water	78:67	0:0	10	pkt
op	78:70	0:0	10	->
water	78:72	0:0	10	size
op	78:77	0:0	10	-
water	78:79	0:0	10	cumul_size
op	78:90	0:0	10	-
water	78:92	0:0	10	ret
water	78:96	0:0	8	;
call	80:16	80:33	8	skip_bits
arg	80:26	80:30	9	&gbc
op	80:26	0:0	10	&
water	80:27	0:0	10	gbc
arg	80:32	80:33	9	5
water	80:32	0:0	10	5
water	80:34	0:0	8	;
for	82:16	87:16	8	(i = 0 ;i < ( hdr -> channel_mode ? 1 : 2 );i ++)
forinit	82:21	82:26	9	i = 0 ;
water	82:21	0:0	10	i
op	82:23	0:0	10	=
water	82:25	0:0	10	0
water	82:26	0:0	10	;
cond	82:28	82:58	9	i < ( hdr -> channel_mode ? 1 : 2 )
water	82:28	0:0	10	i
op	82:30	0:0	10	<
water	82:32	0:0	10	(
water	82:33	0:0	10	hdr
op	82:36	0:0	10	->
water	82:38	0:0	10	channel_mode
water	82:51	0:0	10	?
water	82:53	0:0	10	1
water	82:55	0:0	10	:
water	82:57	0:0	10	2
water	82:58	0:0	10	)
forexpr	82:61	82:62	9	i ++
water	82:61	0:0	10	i
op	82:62	0:0	10	++
stmts	82:66	87:16	9	
water	82:66	0:0	10	{
call	83:20	83:37	10	skip_bits
arg	83:30	83:34	11	&gbc
op	83:30	0:0	12	&
water	83:31	0:0	12	gbc
arg	83:36	83:37	11	5
water	83:36	0:0	12	5
water	83:38	0:0	10	;
if	84:20	86:20	10	(get_bits1 (& gbc ))
cond	84:24	84:38	11	get_bits1 (& gbc )
call	84:24	84:38	12	get_bits1
arg	84:34	84:38	13	&gbc
op	84:34	0:0	14	&
water	84:35	0:0	14	gbc
stmts	84:41	86:20	11	
water	84:41	0:0	12	{
call	85:24	85:41	12	skip_bits
arg	85:34	85:38	13	&gbc
op	85:34	0:0	14	&
water	85:35	0:0	14	gbc
arg	85:40	85:41	13	8
water	85:40	0:0	14	8
water	85:42	0:0	12	;
water	86:20	0:0	12	}
water	87:16	0:0	10	}
if	89:16	90:88	8	(get_bits1 (& gbc ))
cond	89:20	89:34	9	get_bits1 (& gbc )
call	89:20	89:34	10	get_bits1
arg	89:30	89:34	11	&gbc
op	89:30	0:0	12	&
water	89:31	0:0	12	gbc
stmts	90:20	90:88	9	
water	90:20	0:0	10	info
op	90:24	0:0	10	->
water	90:26	0:0	10	substream
op	90:35	0:0	10	[
water	90:36	0:0	10	parent
op	90:42	0:0	10	]
op	90:43	0:0	10	.
water	90:44	0:0	10	chan_loc
op	90:53	0:0	10	|=
water	90:56	0:0	10	(
call	90:57	90:74	10	get_bits
arg	90:66	90:70	11	&gbc
op	90:66	0:0	12	&
water	90:67	0:0	12	gbc
arg	90:72	90:74	11	16
water	90:72	0:0	12	16
op	90:76	0:0	10	>>
water	90:79	0:0	10	5
water	90:80	0:0	10	)
op	90:82	0:0	10	&
water	90:84	0:0	10	0
water	90:85	0:0	10	x1f
water	90:88	0:0	10	;
else	91:16	92:73	8
stmts	92:20	92:73	9	
water	92:20	0:0	10	info
op	92:24	0:0	10	->
water	92:26	0:0	10	substream
op	92:35	0:0	10	[
water	92:36	0:0	10	parent
op	92:42	0:0	10	]
op	92:43	0:0	10	.
water	92:44	0:0	10	chan_loc
op	92:53	0:0	10	|=
water	92:56	0:0	10	hdr
op	92:59	0:0	10	->
water	92:61	0:0	10	channel_mode
water	92:73	0:0	10	;
water	93:16	0:0	8	cumul_size
op	93:27	0:0	8	+=
water	93:30	0:0	8	hdr
op	93:33	0:0	8	->
water	93:35	0:0	8	frame_size
water	93:45	0:0	8	;
water	94:12	0:0	8	}
water	95:8	0:0	6	}
water	96:4	0:0	4	}
label	98:0	98:11	2	concatenate :
if	99:4	102:4	2	(! info -> num_blocks && num_blocks == 6)
cond	99:8	99:43	3	! info -> num_blocks && num_blocks == 6
op	99:8	0:0	4	!
water	99:9	0:0	4	info
op	99:13	0:0	4	->
water	99:15	0:0	4	num_blocks
op	99:26	0:0	4	&&
water	99:29	0:0	4	num_blocks
op	99:40	0:0	4	==
water	99:43	0:0	4	6
stmts	99:46	102:4	3	
water	99:46	0:0	4	{
water	100:8	0:0	4	ret
op	100:12	0:0	4	=
water	100:14	0:0	4	pkt
op	100:17	0:0	4	->
water	100:19	0:0	4	size
water	100:23	0:0	4	;
goto	101:8	101:16	4	end
water	101:13	0:0	5	end
water	102:4	0:0	4	}
else	103:4	106:4	2
stmts	103:9	106:4	3	
if	103:9	106:4	4	(info -> num_blocks + num_blocks > 6)
cond	103:13	103:45	5	info -> num_blocks + num_blocks > 6
water	103:13	0:0	6	info
op	103:17	0:0	6	->
water	103:19	0:0	6	num_blocks
op	103:30	0:0	6	+
water	103:32	0:0	6	num_blocks
op	103:43	0:0	6	>
water	103:45	0:0	6	6
stmts	103:48	106:4	5	
water	103:48	0:0	6	{
water	104:8	0:0	6	ret
op	104:12	0:0	6	=
water	104:14	0:0	6	AVERROR_INVALIDDATA
water	104:33	0:0	6	;
goto	105:8	105:16	6	end
water	105:13	0:0	7	end
water	106:4	0:0	6	}
if	108:4	113:4	2	(! info -> num_blocks)
cond	108:8	108:15	3	! info -> num_blocks
op	108:8	0:0	4	!
water	108:9	0:0	4	info
op	108:13	0:0	4	->
water	108:15	0:0	4	num_blocks
stmts	108:27	113:4	3	
water	108:27	0:0	4	{
water	109:8	0:0	4	ret
op	109:12	0:0	4	=
call	109:14	109:43	4	av_packet_ref
arg	109:28	109:38	5	&info->pkt
op	109:28	0:0	6	&
water	109:29	0:0	6	info
op	109:33	0:0	6	->
water	109:35	0:0	6	pkt
arg	109:40	109:43	5	pkt
water	109:40	0:0	6	pkt
water	109:44	0:0	4	;
if	110:8	111:41	4	(! ret)
cond	110:12	110:13	5	! ret
op	110:12	0:0	6	!
water	110:13	0:0	6	ret
stmts	111:12	111:41	5	
water	111:12	0:0	6	info
op	111:16	0:0	6	->
water	111:18	0:0	6	num_blocks
op	111:29	0:0	6	=
water	111:31	0:0	6	num_blocks
water	111:41	0:0	6	;
goto	112:8	112:16	4	end
water	112:13	0:0	5	end
water	113:4	0:0	4	}
else	113:6	126:4	2
stmts	113:11	126:4	3	
water	113:11	0:0	4	{
if	114:8	115:20	4	(( ret =av_grow_packet (& info -> pkt ,pkt -> size ) ) < 0)
cond	114:12	114:60	5	( ret =av_grow_packet (& info -> pkt ,pkt -> size ) ) < 0
water	114:12	0:0	6	(
water	114:13	0:0	6	ret
op	114:17	0:0	6	=
call	114:19	114:55	6	av_grow_packet
arg	114:34	114:44	7	&info->pkt
op	114:34	0:0	8	&
water	114:35	0:0	8	info
op	114:39	0:0	8	->
water	114:41	0:0	8	pkt
arg	114:46	114:55	7	pkt->size
water	114:46	0:0	8	pkt
op	114:49	0:0	8	->
water	114:51	0:0	8	size
water	114:56	0:0	6	)
op	114:58	0:0	6	<
water	114:60	0:0	6	0
stmts	115:12	115:20	5	
goto	115:12	115:20	6	end
water	115:17	0:0	7	end
call	116:8	116:80	4	memcpy
arg	116:15	116:58	5	info->pkt.data+info->pkt.size-pkt->size
water	116:15	0:0	6	info
op	116:19	0:0	6	->
water	116:21	0:0	6	pkt
op	116:24	0:0	6	.
water	116:25	0:0	6	data
op	116:30	0:0	6	+
water	116:32	0:0	6	info
op	116:36	0:0	6	->
water	116:38	0:0	6	pkt
op	116:41	0:0	6	.
water	116:42	0:0	6	size
op	116:47	0:0	6	-
water	116:49	0:0	6	pkt
op	116:52	0:0	6	->
water	116:54	0:0	6	size
arg	116:60	116:69	5	pkt->data
water	116:60	0:0	6	pkt
op	116:63	0:0	6	->
water	116:65	0:0	6	data
arg	116:71	116:80	5	pkt->size
water	116:71	0:0	6	pkt
op	116:74	0:0	6	->
water	116:76	0:0	6	size
water	116:81	0:0	4	;
water	117:8	0:0	4	info
op	117:12	0:0	4	->
water	117:14	0:0	4	num_blocks
op	117:25	0:0	4	+=
water	117:28	0:0	4	num_blocks
water	117:38	0:0	4	;
water	118:8	0:0	4	info
op	118:12	0:0	4	->
water	118:14	0:0	4	pkt
op	118:17	0:0	4	.
water	118:18	0:0	4	duration
op	118:27	0:0	4	+=
water	118:30	0:0	4	pkt
op	118:33	0:0	4	->
water	118:35	0:0	4	duration
water	118:43	0:0	4	;
if	119:8	120:20	4	(( ret =av_copy_packet_side_data (& info -> pkt ,pkt ) ) < 0)
cond	119:12	119:64	5	( ret =av_copy_packet_side_data (& info -> pkt ,pkt ) ) < 0
water	119:12	0:0	6	(
water	119:13	0:0	6	ret
op	119:17	0:0	6	=
call	119:19	119:59	6	av_copy_packet_side_data
arg	119:44	119:54	7	&info->pkt
op	119:44	0:0	8	&
water	119:45	0:0	8	info
op	119:49	0:0	8	->
water	119:51	0:0	8	pkt
arg	119:56	119:59	7	pkt
water	119:56	0:0	8	pkt
water	119:60	0:0	6	)
op	119:62	0:0	6	<
water	119:64	0:0	6	0
stmts	120:12	120:20	5	
goto	120:12	120:20	6	end
water	120:17	0:0	7	end
if	121:8	122:20	4	(info -> num_blocks != 6)
cond	121:12	121:32	5	info -> num_blocks != 6
water	121:12	0:0	6	info
op	121:16	0:0	6	->
water	121:18	0:0	6	num_blocks
op	121:29	0:0	6	!=
water	121:32	0:0	6	6
stmts	122:12	122:20	5	
goto	122:12	122:20	6	end
water	122:17	0:0	7	end
call	123:8	123:27	4	av_packet_unref
arg	123:24	123:27	5	pkt
water	123:24	0:0	6	pkt
water	123:28	0:0	4	;
call	124:8	124:42	4	av_packet_move_ref
arg	124:27	124:30	5	pkt
water	124:27	0:0	6	pkt
arg	124:32	124:42	5	&info->pkt
op	124:32	0:0	6	&
water	124:33	0:0	6	info
op	124:37	0:0	6	->
water	124:39	0:0	6	pkt
water	124:43	0:0	4	;
water	125:8	0:0	4	info
op	125:12	0:0	4	->
water	125:14	0:0	4	num_blocks
op	125:25	0:0	4	=
water	125:27	0:0	4	0
water	125:28	0:0	4	;
water	126:4	0:0	4	}
water	127:4	0:0	2	ret
op	127:8	0:0	2	=
water	127:10	0:0	2	pkt
op	127:13	0:0	2	->
water	127:15	0:0	2	size
water	127:19	0:0	2	;
label	129:0	129:3	2	end :
call	130:4	130:15	2	av_free
arg	130:12	130:15	3	hdr
water	130:12	0:0	4	hdr
water	130:16	0:0	2	;
return	132:4	132:14	2	ret
water	132:11	0:0	3	ret
