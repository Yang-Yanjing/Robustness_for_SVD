func	2:8	170:0	0	int	swr_init
params	2:20	0:0	1	
param	2:21	2:41	2	struct SwrContext *	s
stmnts	3:4	169:12	1	
water	3:4	0:0	2	s
op	3:5	0:0	2	->
water	3:7	0:0	2	in_buffer_index
op	3:22	0:0	2	=
water	3:24	0:0	2	0
water	3:25	0:0	2	;
water	4:4	0:0	2	s
op	4:5	0:0	2	->
water	4:7	0:0	2	in_buffer_count
op	4:22	0:0	2	=
water	4:24	0:0	2	0
water	4:25	0:0	2	;
water	5:4	0:0	2	s
op	5:5	0:0	2	->
water	5:7	0:0	2	resample_in_constraint
op	5:29	0:0	2	=
water	5:31	0:0	2	0
water	5:32	0:0	2	;
call	6:4	6:24	2	free_temp
arg	6:14	6:24	3	&s->postin
op	6:14	0:0	4	&
water	6:15	0:0	4	s
op	6:16	0:0	4	->
water	6:18	0:0	4	postin
water	6:25	0:0	2	;
call	7:4	7:24	2	free_temp
arg	7:14	7:24	3	&s->midbuf
op	7:14	0:0	4	&
water	7:15	0:0	4	s
op	7:16	0:0	4	->
water	7:18	0:0	4	midbuf
water	7:25	0:0	2	;
call	8:4	8:24	2	free_temp
arg	8:14	8:24	3	&s->preout
op	8:14	0:0	4	&
water	8:15	0:0	4	s
op	8:16	0:0	4	->
water	8:18	0:0	4	preout
water	8:25	0:0	2	;
call	9:4	9:27	2	free_temp
arg	9:14	9:27	3	&s->in_buffer
op	9:14	0:0	4	&
water	9:15	0:0	4	s
op	9:16	0:0	4	->
water	9:18	0:0	4	in_buffer
water	9:28	0:0	2	;
call	10:4	10:24	2	free_temp
arg	10:14	10:24	3	&s->dither
op	10:14	0:0	4	&
water	10:15	0:0	4	s
op	10:16	0:0	4	->
water	10:18	0:0	4	dither
water	10:25	0:0	2	;
call	11:4	11:40	2	memset
arg	11:11	11:19	3	s->in.ch
water	11:11	0:0	4	s
op	11:12	0:0	4	->
water	11:14	0:0	4	in
op	11:16	0:0	4	.
water	11:17	0:0	4	ch
arg	11:21	11:22	3	0
water	11:21	0:0	4	0
arg	11:24	11:40	3	sizeof(s->in.ch)
op	11:24	0:0	4	sizeof
water	11:30	0:0	4	(
water	11:31	0:0	4	s
op	11:32	0:0	4	->
water	11:34	0:0	4	in
op	11:36	0:0	4	.
water	11:37	0:0	4	ch
water	11:39	0:0	4	)
water	11:41	0:0	2	;
call	12:4	12:42	2	memset
arg	12:11	12:20	3	s->out.ch
water	12:11	0:0	4	s
op	12:12	0:0	4	->
water	12:14	0:0	4	out
op	12:17	0:0	4	.
water	12:18	0:0	4	ch
arg	12:22	12:23	3	0
water	12:22	0:0	4	0
arg	12:25	12:42	3	sizeof(s->out.ch)
op	12:25	0:0	4	sizeof
water	12:31	0:0	4	(
water	12:32	0:0	4	s
op	12:33	0:0	4	->
water	12:35	0:0	4	out
op	12:38	0:0	4	.
water	12:39	0:0	4	ch
water	12:41	0:0	4	)
water	12:43	0:0	2	;
call	13:4	13:43	2	swri_audio_convert_free
arg	13:28	13:43	3	&s->in_convert
op	13:28	0:0	4	&
water	13:29	0:0	4	s
op	13:30	0:0	4	->
water	13:33	0:0	4	in_convert
water	13:44	0:0	2	;
call	14:4	14:43	2	swri_audio_convert_free
arg	14:28	14:43	3	&s->out_convert
op	14:28	0:0	4	&
water	14:29	0:0	4	s
op	14:30	0:0	4	->
water	14:32	0:0	4	out_convert
water	14:44	0:0	2	;
call	15:4	15:44	2	swri_audio_convert_free
arg	15:28	15:44	3	&s->full_convert
op	15:28	0:0	4	&
water	15:29	0:0	4	s
op	15:30	0:0	4	->
water	15:32	0:0	4	full_convert
water	15:45	0:0	2	;
call	16:4	16:24	2	swri_rematrix_free
arg	16:23	16:24	3	s
water	16:23	0:0	4	s
water	16:25	0:0	2	;
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	flushed
op	18:15	0:0	2	=
water	18:17	0:0	2	0
water	18:18	0:0	2	;
if	20:4	23:4	2	(s -> in_sample_fmt >= AV_SAMPLE_FMT_NB)
cond	20:7	20:28	3	s -> in_sample_fmt >= AV_SAMPLE_FMT_NB
water	20:7	0:0	4	s
op	20:8	0:0	4	->
water	20:11	0:0	4	in_sample_fmt
op	20:25	0:0	4	>=
water	20:28	0:0	4	AV_SAMPLE_FMT_NB
stmts	20:45	23:4	3	
water	20:45	0:0	4	{
call	21:8	21:97	4	av_log
arg	21:15	21:16	5	s
water	21:15	0:0	6	s
arg	21:18	21:30	5	AV_LOG_ERROR
water	21:18	0:0	6	AV_LOG_ERROR
arg	21:32	21:79	5	"Requested input sample format %d is invalid\n"
water	21:32	0:0	6	"Requested input sample format %d is invalid\n"
arg	21:81	21:97	5	s->in_sample_fmt
water	21:81	0:0	6	s
op	21:82	0:0	6	->
water	21:84	0:0	6	in_sample_fmt
water	21:98	0:0	4	;
return	22:8	22:30	4	AVERROR(EINVAL)
call	22:15	22:29	5	AVERROR
arg	22:23	22:29	6	EINVAL
water	22:23	0:0	7	EINVAL
water	23:4	0:0	4	}
if	24:4	27:4	2	(s -> out_sample_fmt >= AV_SAMPLE_FMT_NB)
cond	24:7	24:28	3	s -> out_sample_fmt >= AV_SAMPLE_FMT_NB
water	24:7	0:0	4	s
op	24:8	0:0	4	->
water	24:10	0:0	4	out_sample_fmt
op	24:25	0:0	4	>=
water	24:28	0:0	4	AV_SAMPLE_FMT_NB
stmts	24:45	27:4	3	
water	24:45	0:0	4	{
call	25:8	25:99	4	av_log
arg	25:15	25:16	5	s
water	25:15	0:0	6	s
arg	25:18	25:30	5	AV_LOG_ERROR
water	25:18	0:0	6	AV_LOG_ERROR
arg	25:32	25:80	5	"Requested output sample format %d is invalid\n"
water	25:32	0:0	6	"Requested output sample format %d is invalid\n"
arg	25:82	25:99	5	s->out_sample_fmt
water	25:82	0:0	6	s
op	25:83	0:0	6	->
water	25:85	0:0	6	out_sample_fmt
water	25:100	0:0	4	;
return	26:8	26:30	4	AVERROR(EINVAL)
call	26:15	26:29	5	AVERROR
arg	26:23	26:29	6	EINVAL
water	26:23	0:0	7	EINVAL
water	27:4	0:0	4	}
if	29:4	38:4	2	(s -> int_sample_fmt == AV_SAMPLE_FMT_NONE)
cond	29:7	29:28	3	s -> int_sample_fmt == AV_SAMPLE_FMT_NONE
water	29:7	0:0	4	s
op	29:8	0:0	4	->
water	29:10	0:0	4	int_sample_fmt
op	29:25	0:0	4	==
water	29:28	0:0	4	AV_SAMPLE_FMT_NONE
stmts	29:47	38:4	3	
water	29:47	0:0	4	{
if	30:8	32:8	4	(av_get_planar_sample_fmt (s -> in_sample_fmt ) <= AV_SAMPLE_FMT_S16P)
cond	30:11	30:57	5	av_get_planar_sample_fmt (s -> in_sample_fmt ) <= AV_SAMPLE_FMT_S16P
call	30:11	30:52	6	av_get_planar_sample_fmt
arg	30:36	30:52	7	s->in_sample_fmt
water	30:36	0:0	8	s
op	30:37	0:0	8	->
water	30:39	0:0	8	in_sample_fmt
op	30:54	0:0	6	<=
water	30:57	0:0	6	AV_SAMPLE_FMT_S16P
stmts	30:76	32:8	5	
water	30:76	0:0	6	{
water	31:12	0:0	6	s
op	31:13	0:0	6	->
water	31:15	0:0	6	int_sample_fmt
op	31:29	0:0	6	=
water	31:31	0:0	6	AV_SAMPLE_FMT_S16P
water	31:49	0:0	6	;
water	32:8	0:0	6	}
else	32:9	34:8	4
stmts	32:14	34:8	5	
if	32:14	34:8	6	(av_get_planar_sample_fmt (s -> in_sample_fmt ) <= AV_SAMPLE_FMT_FLTP)
cond	32:17	32:63	7	av_get_planar_sample_fmt (s -> in_sample_fmt ) <= AV_SAMPLE_FMT_FLTP
call	32:17	32:58	8	av_get_planar_sample_fmt
arg	32:42	32:58	9	s->in_sample_fmt
water	32:42	0:0	10	s
op	32:43	0:0	10	->
water	32:45	0:0	10	in_sample_fmt
op	32:60	0:0	8	<=
water	32:63	0:0	8	AV_SAMPLE_FMT_FLTP
stmts	32:82	34:8	7	
water	32:82	0:0	8	{
water	33:12	0:0	8	s
op	33:13	0:0	8	->
water	33:15	0:0	8	int_sample_fmt
op	33:29	0:0	8	=
water	33:31	0:0	8	AV_SAMPLE_FMT_FLTP
water	33:49	0:0	8	;
water	34:8	0:0	8	}
else	34:9	37:8	4
stmts	34:13	37:8	5	
water	34:13	0:0	6	{
call	35:12	35:67	6	av_log
arg	35:19	35:20	7	s
water	35:19	0:0	8	s
arg	35:22	35:34	7	AV_LOG_DEBUG
water	35:22	0:0	8	AV_LOG_DEBUG
arg	35:36	35:67	7	"Using double precision mode\n"
water	35:36	0:0	8	"Using double precision mode\n"
water	35:68	0:0	6	;
water	36:12	0:0	6	s
op	36:13	0:0	6	->
water	36:15	0:0	6	int_sample_fmt
op	36:29	0:0	6	=
water	36:31	0:0	6	AV_SAMPLE_FMT_DBLP
water	36:49	0:0	6	;
water	37:8	0:0	6	}
water	38:4	0:0	4	}
if	40:4	46:4	2	(s -> int_sample_fmt != AV_SAMPLE_FMT_S16P && s -> int_sample_fmt != AV_SAMPLE_FMT_S32P && s -> int_sample_fmt != AV_SAMPLE_FMT_FLTP && s -> int_sample_fmt != AV_SAMPLE_FMT_DBLP)
cond	40:10	43:31	3	s -> int_sample_fmt != AV_SAMPLE_FMT_S16P && s -> int_sample_fmt != AV_SAMPLE_FMT_S32P && s -> int_sample_fmt != AV_SAMPLE_FMT_FLTP && s -> int_sample_fmt != AV_SAMPLE_FMT_DBLP
water	40:10	0:0	4	s
op	40:11	0:0	4	->
water	40:13	0:0	4	int_sample_fmt
op	40:28	0:0	4	!=
water	40:31	0:0	4	AV_SAMPLE_FMT_S16P
op	41:8	0:0	4	&&
water	41:10	0:0	4	s
op	41:11	0:0	4	->
water	41:13	0:0	4	int_sample_fmt
op	41:28	0:0	4	!=
water	41:31	0:0	4	AV_SAMPLE_FMT_S32P
op	42:8	0:0	4	&&
water	42:10	0:0	4	s
op	42:11	0:0	4	->
water	42:13	0:0	4	int_sample_fmt
op	42:28	0:0	4	!=
water	42:31	0:0	4	AV_SAMPLE_FMT_FLTP
op	43:8	0:0	4	&&
water	43:10	0:0	4	s
op	43:11	0:0	4	->
water	43:13	0:0	4	int_sample_fmt
op	43:28	0:0	4	!=
water	43:31	0:0	4	AV_SAMPLE_FMT_DBLP
stmts	43:50	46:4	3	
water	43:50	0:0	4	{
call	44:8	44:163	4	av_log
arg	44:15	44:16	5	s
water	44:15	0:0	6	s
arg	44:18	44:30	5	AV_LOG_ERROR
water	44:18	0:0	6	AV_LOG_ERROR
arg	44:32	44:120	5	"Requested sample format %s is not supported internally, S16/S32/FLT/DBL is supported\n"
water	44:32	0:0	6	"Requested sample format %s is not supported internally, S16/S32/FLT/DBL is supported\n"
arg	44:122	44:163	5	av_get_sample_fmt_name(s->int_sample_fmt)
call	44:122	44:162	6	av_get_sample_fmt_name
arg	44:145	44:162	7	s->int_sample_fmt
water	44:145	0:0	8	s
op	44:146	0:0	8	->
water	44:148	0:0	8	int_sample_fmt
water	44:164	0:0	4	;
return	45:8	45:30	4	AVERROR(EINVAL)
call	45:15	45:29	5	AVERROR
arg	45:23	45:29	6	EINVAL
water	45:23	0:0	7	EINVAL
water	46:4	0:0	4	}
switch	48:4	57:4	2	(s -> engine)
cond	48:11	48:14	3	s -> engine
water	48:11	0:0	4	s
op	48:12	0:0	4	->
water	48:14	0:0	4	engine
stmts	48:21	57:4	3	
water	48:21	0:0	4	{
water	50:8	0:0	4	extern
water	50:15	0:0	4	struct
water	50:22	0:0	4	Resampler
water	50:32	0:0	4	const
water	50:38	0:0	4	soxr_resampler
water	50:52	0:0	4	;
label	51:8	51:28	4	case SWR_ENGINE_SOXR :
water	51:30	0:0	4	s
op	51:31	0:0	4	->
water	51:33	0:0	4	resampler
op	51:43	0:0	4	=
op	51:45	0:0	4	&
water	51:46	0:0	4	soxr_resampler
water	51:60	0:0	4	;
break	51:62	51:67	4	
label	53:8	53:28	4	case SWR_ENGINE_SWR :
water	53:30	0:0	4	s
op	53:31	0:0	4	->
water	53:33	0:0	4	resampler
op	53:43	0:0	4	=
op	53:45	0:0	4	&
water	53:46	0:0	4	swri_resampler
water	53:60	0:0	4	;
break	53:62	53:67	4	
label	54:8	54:15	4	default :
call	55:12	55:82	4	av_log
arg	55:19	55:20	5	s
water	55:19	0:0	6	s
arg	55:22	55:34	5	AV_LOG_ERROR
water	55:22	0:0	6	AV_LOG_ERROR
arg	55:36	55:82	5	"Requested resampling engine is unavailable\n"
water	55:36	0:0	6	"Requested resampling engine is unavailable\n"
water	55:83	0:0	4	;
return	56:12	56:34	4	AVERROR(EINVAL)
call	56:19	56:33	5	AVERROR
arg	56:27	56:33	6	EINVAL
water	56:27	0:0	7	EINVAL
water	57:4	0:0	4	}
call	59:4	59:48	2	set_audiodata_fmt
arg	59:22	59:29	3	&s->in
op	59:22	0:0	4	&
water	59:23	0:0	4	s
op	59:24	0:0	4	->
water	59:27	0:0	4	in
arg	59:31	59:48	3	s->in_sample_fmt
water	59:31	0:0	4	s
op	59:32	0:0	4	->
water	59:35	0:0	4	in_sample_fmt
water	59:49	0:0	2	;
call	60:4	60:48	2	set_audiodata_fmt
arg	60:22	60:29	3	&s->out
op	60:22	0:0	4	&
water	60:23	0:0	4	s
op	60:24	0:0	4	->
water	60:26	0:0	4	out
arg	60:31	60:48	3	s->out_sample_fmt
water	60:31	0:0	4	s
op	60:32	0:0	4	->
water	60:34	0:0	4	out_sample_fmt
water	60:49	0:0	2	;
if	62:4	68:4	2	(s -> async)
cond	62:8	62:11	3	s -> async
water	62:8	0:0	4	s
op	62:9	0:0	4	->
water	62:11	0:0	4	async
stmts	62:18	68:4	3	
water	62:18	0:0	4	{
if	63:8	64:39	4	(s -> min_compensation >= FLT_MAX / 2)
cond	63:12	63:43	5	s -> min_compensation >= FLT_MAX / 2
water	63:12	0:0	6	s
op	63:13	0:0	6	->
water	63:15	0:0	6	min_compensation
op	63:32	0:0	6	>=
water	63:35	0:0	6	FLT_MAX
op	63:42	0:0	6	/
water	63:43	0:0	6	2
stmts	64:12	64:39	5	
water	64:12	0:0	6	s
op	64:13	0:0	6	->
water	64:15	0:0	6	min_compensation
op	64:32	0:0	6	=
water	64:34	0:0	6	0
op	64:35	0:0	6	.
water	64:36	0:0	6	001
water	64:39	0:0	6	;
if	65:8	67:8	4	(s -> async > 1 . 0001)
cond	65:12	65:25	5	s -> async > 1 . 0001
water	65:12	0:0	6	s
op	65:13	0:0	6	->
water	65:15	0:0	6	async
op	65:21	0:0	6	>
water	65:23	0:0	6	1
op	65:24	0:0	6	.
water	65:25	0:0	6	0001
stmts	65:31	67:8	5	
water	65:31	0:0	6	{
water	66:12	0:0	6	s
op	66:13	0:0	6	->
water	66:15	0:0	6	max_soft_compensation
op	66:37	0:0	6	=
water	66:39	0:0	6	s
op	66:40	0:0	6	->
water	66:42	0:0	6	async
op	66:48	0:0	6	/
water	66:50	0:0	6	(
water	66:51	0:0	6	double
water	66:57	0:0	6	)
water	66:59	0:0	6	s
op	66:60	0:0	6	->
water	66:62	0:0	6	in_sample_rate
water	66:76	0:0	6	;
water	67:8	0:0	6	}
water	68:4	0:0	4	}
if	70:4	72:4	2	(s -> out_sample_rate != s -> in_sample_rate || ( s -> flags & SWR_FLAG_RESAMPLE ))
cond	70:8	70:78	3	s -> out_sample_rate != s -> in_sample_rate || ( s -> flags & SWR_FLAG_RESAMPLE )
water	70:8	0:0	4	s
op	70:9	0:0	4	->
water	70:11	0:0	4	out_sample_rate
op	70:26	0:0	4	!=
water	70:28	0:0	4	s
op	70:29	0:0	4	->
water	70:31	0:0	4	in_sample_rate
op	70:46	0:0	4	||
water	70:49	0:0	4	(
water	70:50	0:0	4	s
op	70:51	0:0	4	->
water	70:53	0:0	4	flags
op	70:59	0:0	4	&
water	70:61	0:0	4	SWR_FLAG_RESAMPLE
water	70:78	0:0	4	)
stmts	70:80	72:4	3	
water	70:80	0:0	4	{
water	71:8	0:0	4	s
op	71:9	0:0	4	->
water	71:11	0:0	4	resample
op	71:20	0:0	4	=
call	71:22	71:227	4	s->resampler->init
arg	71:41	71:52	5	s->resample
water	71:41	0:0	6	s
op	71:42	0:0	6	->
water	71:44	0:0	6	resample
arg	71:54	71:72	5	s->out_sample_rate
water	71:54	0:0	6	s
op	71:55	0:0	6	->
water	71:57	0:0	6	out_sample_rate
arg	71:74	71:91	5	s->in_sample_rate
water	71:74	0:0	6	s
op	71:75	0:0	6	->
water	71:77	0:0	6	in_sample_rate
arg	71:93	71:107	5	s->filter_size
water	71:93	0:0	6	s
op	71:94	0:0	6	->
water	71:96	0:0	6	filter_size
arg	71:109	71:123	5	s->phase_shift
water	71:109	0:0	6	s
op	71:110	0:0	6	->
water	71:112	0:0	6	phase_shift
arg	71:125	71:141	5	s->linear_interp
water	71:125	0:0	6	s
op	71:126	0:0	6	->
water	71:128	0:0	6	linear_interp
arg	71:143	71:152	5	s->cutoff
water	71:143	0:0	6	s
op	71:144	0:0	6	->
water	71:146	0:0	6	cutoff
arg	71:154	71:171	5	s->int_sample_fmt
water	71:154	0:0	6	s
op	71:155	0:0	6	->
water	71:157	0:0	6	int_sample_fmt
arg	71:173	71:187	5	s->filter_type
water	71:173	0:0	6	s
op	71:174	0:0	6	->
water	71:176	0:0	6	filter_type
arg	71:189	71:203	5	s->kaiser_beta
water	71:189	0:0	6	s
op	71:190	0:0	6	->
water	71:192	0:0	6	kaiser_beta
arg	71:205	71:217	5	s->precision
water	71:205	0:0	6	s
op	71:206	0:0	6	->
water	71:208	0:0	6	precision
arg	71:219	71:227	5	s->cheby
water	71:219	0:0	6	s
op	71:220	0:0	6	->
water	71:222	0:0	6	cheby
water	71:228	0:0	4	;
water	72:4	0:0	4	}
else	72:5	73:40	2
stmts	73:8	73:40	3	
call	73:8	73:39	4	s->resampler->free
arg	73:27	73:39	5	&s->resample
op	73:27	0:0	6	&
water	73:28	0:0	6	s
op	73:29	0:0	6	->
water	73:31	0:0	6	resample
water	73:40	0:0	4	;
if	74:4	81:4	2	(s -> int_sample_fmt != AV_SAMPLE_FMT_S16P && s -> int_sample_fmt != AV_SAMPLE_FMT_S32P && s -> int_sample_fmt != AV_SAMPLE_FMT_FLTP && s -> int_sample_fmt != AV_SAMPLE_FMT_DBLP && s -> resample)
cond	74:11	78:14	3	s -> int_sample_fmt != AV_SAMPLE_FMT_S16P && s -> int_sample_fmt != AV_SAMPLE_FMT_S32P && s -> int_sample_fmt != AV_SAMPLE_FMT_FLTP && s -> int_sample_fmt != AV_SAMPLE_FMT_DBLP && s -> resample
water	74:11	0:0	4	s
op	74:12	0:0	4	->
water	74:14	0:0	4	int_sample_fmt
op	74:29	0:0	4	!=
water	74:32	0:0	4	AV_SAMPLE_FMT_S16P
op	75:8	0:0	4	&&
water	75:11	0:0	4	s
op	75:12	0:0	4	->
water	75:14	0:0	4	int_sample_fmt
op	75:29	0:0	4	!=
water	75:32	0:0	4	AV_SAMPLE_FMT_S32P
op	76:8	0:0	4	&&
water	76:11	0:0	4	s
op	76:12	0:0	4	->
water	76:14	0:0	4	int_sample_fmt
op	76:29	0:0	4	!=
water	76:32	0:0	4	AV_SAMPLE_FMT_FLTP
op	77:8	0:0	4	&&
water	77:11	0:0	4	s
op	77:12	0:0	4	->
water	77:14	0:0	4	int_sample_fmt
op	77:29	0:0	4	!=
water	77:32	0:0	4	AV_SAMPLE_FMT_DBLP
op	78:8	0:0	4	&&
water	78:11	0:0	4	s
op	78:12	0:0	4	->
water	78:14	0:0	4	resample
stmts	78:23	81:4	3	
water	78:23	0:0	4	{
call	79:8	79:91	4	av_log
arg	79:15	79:16	5	s
water	79:15	0:0	6	s
arg	79:18	79:30	5	AV_LOG_ERROR
water	79:18	0:0	6	AV_LOG_ERROR
arg	79:32	79:91	5	"Resampling only supported with internal s16/s32/flt/dbl\n"
water	79:32	0:0	6	"Resampling only supported with internal s16/s32/flt/dbl\n"
water	79:92	0:0	4	;
return	80:8	80:17	4	-1
op	80:15	0:0	5	-
water	80:16	0:0	5	1
water	81:4	0:0	4	}
if	83:4	84:40	2	(! s -> used_ch_count)
cond	83:7	83:11	3	! s -> used_ch_count
op	83:7	0:0	4	!
water	83:8	0:0	4	s
op	83:9	0:0	4	->
water	83:11	0:0	4	used_ch_count
stmts	84:8	84:40	3	
water	84:8	0:0	4	s
op	84:9	0:0	4	->
water	84:11	0:0	4	used_ch_count
op	84:24	0:0	4	=
water	84:26	0:0	4	s
op	84:27	0:0	4	->
water	84:29	0:0	4	in
op	84:31	0:0	4	.
water	84:32	0:0	4	ch_count
water	84:40	0:0	4	;
if	86:4	89:4	2	(s -> used_ch_count && s -> in_ch_layout && s -> used_ch_count !=av_get_channel_layout_nb_channels (s -> in_ch_layout ))
cond	86:7	86:117	3	s -> used_ch_count && s -> in_ch_layout && s -> used_ch_count !=av_get_channel_layout_nb_channels (s -> in_ch_layout )
water	86:7	0:0	4	s
op	86:8	0:0	4	->
water	86:10	0:0	4	used_ch_count
op	86:24	0:0	4	&&
water	86:27	0:0	4	s
op	86:28	0:0	4	->
water	86:31	0:0	4	in_ch_layout
op	86:44	0:0	4	&&
water	86:47	0:0	4	s
op	86:48	0:0	4	->
water	86:50	0:0	4	used_ch_count
op	86:64	0:0	4	!=
call	86:67	86:117	4	av_get_channel_layout_nb_channels
arg	86:101	86:117	5	s->in_ch_layout
water	86:101	0:0	6	s
op	86:102	0:0	6	->
water	86:105	0:0	6	in_ch_layout
stmts	86:119	89:4	3	
water	86:119	0:0	4	{
call	87:8	87:143	4	av_log
arg	87:15	87:16	5	s
water	87:15	0:0	6	s
arg	87:18	87:32	5	AV_LOG_WARNING
water	87:18	0:0	6	AV_LOG_WARNING
arg	87:34	87:143	5	"Input channel layout has a different number of channels than the number of used channels, ignoring layout\n"
water	87:34	0:0	6	"Input channel layout has a different number of channels than the number of used channels, ignoring layout\n"
water	87:144	0:0	4	;
water	88:8	0:0	4	s
op	88:9	0:0	4	->
water	88:12	0:0	4	in_ch_layout
op	88:24	0:0	4	=
water	88:26	0:0	4	0
water	88:27	0:0	4	;
water	89:4	0:0	4	}
if	91:4	92:73	2	(! s -> in_ch_layout)
cond	91:7	91:12	3	! s -> in_ch_layout
op	91:7	0:0	4	!
water	91:8	0:0	4	s
op	91:9	0:0	4	->
water	91:12	0:0	4	in_ch_layout
stmts	92:8	92:73	3	
water	92:8	0:0	4	s
op	92:9	0:0	4	->
water	92:12	0:0	4	in_ch_layout
op	92:24	0:0	4	=
call	92:26	92:72	4	av_get_default_channel_layout
arg	92:56	92:72	5	s->used_ch_count
water	92:56	0:0	6	s
op	92:57	0:0	6	->
water	92:59	0:0	6	used_ch_count
water	92:73	0:0	4	;
if	93:4	94:72	2	(! s -> out_ch_layout)
cond	93:7	93:11	3	! s -> out_ch_layout
op	93:7	0:0	4	!
water	93:8	0:0	4	s
op	93:9	0:0	4	->
water	93:11	0:0	4	out_ch_layout
stmts	94:8	94:72	3	
water	94:8	0:0	4	s
op	94:9	0:0	4	->
water	94:11	0:0	4	out_ch_layout
op	94:24	0:0	4	=
call	94:26	94:71	4	av_get_default_channel_layout
arg	94:56	94:71	5	s->out.ch_count
water	94:56	0:0	6	s
op	94:57	0:0	6	->
water	94:59	0:0	6	out
op	94:62	0:0	6	.
water	94:63	0:0	6	ch_count
water	94:72	0:0	4	;
water	96:4	0:0	2	s
op	96:5	0:0	2	->
water	96:7	0:0	2	rematrix
op	96:15	0:0	2	=
water	96:17	0:0	2	s
op	96:18	0:0	2	->
water	96:20	0:0	2	out_ch_layout
op	96:35	0:0	2	!=
water	96:37	0:0	2	s
op	96:38	0:0	2	->
water	96:40	0:0	2	in_ch_layout
op	96:53	0:0	2	||
water	96:56	0:0	2	s
op	96:57	0:0	2	->
water	96:59	0:0	2	rematrix_volume
op	96:74	0:0	2	!=
water	96:76	0:0	2	1
op	96:77	0:0	2	.
water	96:78	0:0	2	0
op	96:80	0:0	2	||
water	97:17	0:0	2	s
op	97:18	0:0	2	->
water	97:20	0:0	2	rematrix_custom
water	97:35	0:0	2	;
if	100:4	101:76	2	(! s -> in . ch_count)
cond	100:7	100:15	3	! s -> in . ch_count
op	100:7	0:0	4	!
water	100:8	0:0	4	s
op	100:9	0:0	4	->
water	100:12	0:0	4	in
op	100:14	0:0	4	.
water	100:15	0:0	4	ch_count
stmts	101:8	101:76	3	
water	101:8	0:0	4	s
op	101:9	0:0	4	->
water	101:12	0:0	4	in
op	101:14	0:0	4	.
water	101:15	0:0	4	ch_count
op	101:23	0:0	4	=
call	101:25	101:75	4	av_get_channel_layout_nb_channels
arg	101:59	101:75	5	s->in_ch_layout
water	101:59	0:0	6	s
op	101:60	0:0	6	->
water	101:63	0:0	6	in_ch_layout
water	101:76	0:0	4	;
if	102:4	103:40	2	(! s -> used_ch_count)
cond	102:7	102:11	3	! s -> used_ch_count
op	102:7	0:0	4	!
water	102:8	0:0	4	s
op	102:9	0:0	4	->
water	102:11	0:0	4	used_ch_count
stmts	103:8	103:40	3	
water	103:8	0:0	4	s
op	103:9	0:0	4	->
water	103:11	0:0	4	used_ch_count
op	103:24	0:0	4	=
water	103:26	0:0	4	s
op	103:27	0:0	4	->
water	103:29	0:0	4	in
op	103:31	0:0	4	.
water	103:32	0:0	4	ch_count
water	103:40	0:0	4	;
if	104:4	105:76	2	(! s -> out . ch_count)
cond	104:7	104:15	3	! s -> out . ch_count
op	104:7	0:0	4	!
water	104:8	0:0	4	s
op	104:9	0:0	4	->
water	104:11	0:0	4	out
op	104:14	0:0	4	.
water	104:15	0:0	4	ch_count
stmts	105:8	105:76	3	
water	105:8	0:0	4	s
op	105:9	0:0	4	->
water	105:11	0:0	4	out
op	105:14	0:0	4	.
water	105:15	0:0	4	ch_count
op	105:23	0:0	4	=
call	105:25	105:75	4	av_get_channel_layout_nb_channels
arg	105:59	105:75	5	s->out_ch_layout
water	105:59	0:0	6	s
op	105:60	0:0	6	->
water	105:62	0:0	6	out_ch_layout
water	105:76	0:0	4	;
if	107:4	111:4	2	(! s -> in . ch_count)
cond	107:7	107:15	3	! s -> in . ch_count
op	107:7	0:0	4	!
water	107:8	0:0	4	s
op	107:9	0:0	4	->
water	107:12	0:0	4	in
op	107:14	0:0	4	.
water	107:15	0:0	4	ch_count
stmts	107:24	111:4	3	
water	107:24	0:0	4	{
call	108:8	108:35	4	av_assert0
arg	108:19	108:35	5	!s->in_ch_layout
op	108:19	0:0	6	!
water	108:20	0:0	6	s
op	108:21	0:0	6	->
water	108:23	0:0	6	in_ch_layout
water	108:36	0:0	4	;
call	109:8	109:76	4	av_log
arg	109:15	109:16	5	s
water	109:15	0:0	6	s
arg	109:18	109:30	5	AV_LOG_ERROR
water	109:18	0:0	6	AV_LOG_ERROR
arg	109:32	109:76	5	"Input channel count and layout are unset\n"
water	109:32	0:0	6	"Input channel count and layout are unset\n"
water	109:77	0:0	4	;
return	110:8	110:17	4	-1
op	110:15	0:0	5	-
water	110:16	0:0	5	1
water	111:4	0:0	4	}
if	113:4	120:4	2	(( ! s -> out_ch_layout || ! s -> in_ch_layout ) && s -> used_ch_count != s -> out . ch_count && ! s -> rematrix_custom)
cond	113:8	113:94	3	( ! s -> out_ch_layout || ! s -> in_ch_layout ) && s -> used_ch_count != s -> out . ch_count && ! s -> rematrix_custom
water	113:8	0:0	4	(
op	113:9	0:0	4	!
water	113:10	0:0	4	s
op	113:11	0:0	4	->
water	113:13	0:0	4	out_ch_layout
op	113:27	0:0	4	||
op	113:30	0:0	4	!
water	113:31	0:0	4	s
op	113:32	0:0	4	->
water	113:34	0:0	4	in_ch_layout
water	113:46	0:0	4	)
op	113:48	0:0	4	&&
water	113:51	0:0	4	s
op	113:52	0:0	4	->
water	113:54	0:0	4	used_ch_count
op	113:68	0:0	4	!=
water	113:71	0:0	4	s
op	113:72	0:0	4	->
water	113:74	0:0	4	out
op	113:77	0:0	4	.
water	113:78	0:0	4	ch_count
op	113:87	0:0	4	&&
op	113:90	0:0	4	!
water	113:91	0:0	4	s
op	113:92	0:0	4	->
water	113:94	0:0	4	rematrix_custom
stmts	113:111	120:4	3	
water	113:111	0:0	4	{
decl	114:8	114:31	4	char	l1[1024]
water	114:21	0:0	4	,
decl	114:8	114:31	4	char	l2[1024]
call	115:8	115:86	4	av_get_channel_layout_string
arg	115:37	115:39	5	l1
water	115:37	0:0	6	l1
arg	115:41	115:51	5	sizeof(l1)
op	115:41	0:0	6	sizeof
water	115:47	0:0	6	(
water	115:48	0:0	6	l1
water	115:50	0:0	6	)
arg	115:53	115:68	5	s->in.ch_count
water	115:53	0:0	6	s
op	115:54	0:0	6	->
water	115:57	0:0	6	in
op	115:59	0:0	6	.
water	115:60	0:0	6	ch_count
arg	115:70	115:86	5	s->in_ch_layout
water	115:70	0:0	6	s
op	115:71	0:0	6	->
water	115:74	0:0	6	in_ch_layout
water	115:87	0:0	4	;
call	116:8	116:86	4	av_get_channel_layout_string
arg	116:37	116:39	5	l2
water	116:37	0:0	6	l2
arg	116:41	116:51	5	sizeof(l2)
op	116:41	0:0	6	sizeof
water	116:47	0:0	6	(
water	116:48	0:0	6	l2
water	116:50	0:0	6	)
arg	116:53	116:68	5	s->out.ch_count
water	116:53	0:0	6	s
op	116:54	0:0	6	->
water	116:56	0:0	6	out
op	116:59	0:0	6	.
water	116:60	0:0	6	ch_count
arg	116:70	116:86	5	s->out_ch_layout
water	116:70	0:0	6	s
op	116:71	0:0	6	->
water	116:73	0:0	6	out_ch_layout
water	116:87	0:0	4	;
call	117:8	118:71	4	av_log
arg	117:15	117:16	5	s
water	117:15	0:0	6	s
arg	117:18	117:30	5	AV_LOG_ERROR
water	117:18	0:0	6	AV_LOG_ERROR
arg	117:32	118:63	5	"Rematrix is needed between %s and %s ""but there is not enough information to do it\n"
water	117:32	0:0	6	"Rematrix is needed between %s and %s "
water	118:15	0:0	6	"but there is not enough information to do it\n"
arg	118:65	118:67	5	l1
water	118:65	0:0	6	l1
arg	118:69	118:71	5	l2
water	118:69	0:0	6	l2
water	118:72	0:0	4	;
return	119:8	119:17	4	-1
op	119:15	0:0	5	-
water	119:16	0:0	5	1
water	120:4	0:0	4	}
call	122:0	122:27	2	av_assert0
arg	122:11	122:27	3	s->used_ch_count
water	122:11	0:0	4	s
op	122:12	0:0	4	->
water	122:14	0:0	4	used_ch_count
water	122:28	0:0	2	;
call	123:0	123:26	2	av_assert0
arg	123:11	123:26	3	s->out.ch_count
water	123:11	0:0	4	s
op	123:12	0:0	4	->
water	123:14	0:0	4	out
op	123:17	0:0	4	.
water	123:18	0:0	4	ch_count
water	123:27	0:0	2	;
water	124:4	0:0	2	s
op	124:5	0:0	2	->
water	124:7	0:0	2	resample_first
op	124:21	0:0	2	=
water	124:23	0:0	2	RSC
op	124:26	0:0	2	*
water	124:27	0:0	2	s
op	124:28	0:0	2	->
water	124:30	0:0	2	out
op	124:33	0:0	2	.
water	124:34	0:0	2	ch_count
op	124:42	0:0	2	/
water	124:43	0:0	2	s
op	124:44	0:0	2	->
water	124:46	0:0	2	in
op	124:48	0:0	2	.
water	124:49	0:0	2	ch_count
op	124:58	0:0	2	-
water	124:60	0:0	2	RSC
op	124:64	0:0	2	<
water	124:66	0:0	2	s
op	124:67	0:0	2	->
water	124:69	0:0	2	out_sample_rate
op	124:84	0:0	2	/
water	124:85	0:0	2	(
water	124:86	0:0	2	float
water	124:91	0:0	2	)
water	124:92	0:0	2	s
op	124:93	0:0	2	->
water	124:96	0:0	2	in_sample_rate
op	124:111	0:0	2	-
water	124:113	0:0	2	1
op	124:114	0:0	2	.
water	124:115	0:0	2	0
water	124:116	0:0	2	;
water	126:4	0:0	2	s
op	126:5	0:0	2	->
water	126:7	0:0	2	in_buffer
op	126:16	0:0	2	=
water	126:18	0:0	2	s
op	126:19	0:0	2	->
water	126:21	0:0	2	in
water	126:23	0:0	2	;
if	128:4	132:4	2	(! s -> resample && ! s -> rematrix && ! s -> channel_map && ! s -> dither_method)
cond	128:7	128:62	3	! s -> resample && ! s -> rematrix && ! s -> channel_map && ! s -> dither_method
op	128:7	0:0	4	!
water	128:8	0:0	4	s
op	128:9	0:0	4	->
water	128:11	0:0	4	resample
op	128:20	0:0	4	&&
op	128:23	0:0	4	!
water	128:24	0:0	4	s
op	128:25	0:0	4	->
water	128:27	0:0	4	rematrix
op	128:36	0:0	4	&&
op	128:39	0:0	4	!
water	128:40	0:0	4	s
op	128:41	0:0	4	->
water	128:43	0:0	4	channel_map
op	128:55	0:0	4	&&
op	128:58	0:0	4	!
water	128:59	0:0	4	s
op	128:60	0:0	4	->
water	128:62	0:0	4	dither_method
stmts	128:76	132:4	3	
water	128:76	0:0	4	{
water	129:8	0:0	4	s
op	129:9	0:0	4	->
water	129:11	0:0	4	full_convert
op	129:24	0:0	4	=
call	129:26	130:94	4	swri_audio_convert_alloc
arg	129:51	129:68	5	s->out_sample_fmt
water	129:51	0:0	6	s
op	129:52	0:0	6	->
water	129:54	0:0	6	out_sample_fmt
arg	130:51	130:68	5	s->in_sample_fmt
water	130:51	0:0	6	s
op	130:52	0:0	6	->
water	130:55	0:0	6	in_sample_fmt
arg	130:70	130:85	5	s->in.ch_count
water	130:70	0:0	6	s
op	130:71	0:0	6	->
water	130:74	0:0	6	in
op	130:76	0:0	6	.
water	130:77	0:0	6	ch_count
arg	130:87	130:91	5	NULL
water	130:87	0:0	6	NULL
arg	130:93	130:94	5	0
water	130:93	0:0	6	0
water	130:95	0:0	4	;
return	131:8	131:16	4	0
water	131:15	0:0	5	0
water	132:4	0:0	4	}
water	134:4	0:0	2	s
op	134:5	0:0	2	->
water	134:7	0:0	2	in_convert
op	134:18	0:0	2	=
call	134:20	135:99	2	swri_audio_convert_alloc
arg	134:45	134:62	3	s->int_sample_fmt
water	134:45	0:0	4	s
op	134:46	0:0	4	->
water	134:48	0:0	4	int_sample_fmt
arg	135:45	135:62	3	s->in_sample_fmt
water	135:45	0:0	4	s
op	135:46	0:0	4	->
water	135:49	0:0	4	in_sample_fmt
arg	135:64	135:80	3	s->used_ch_count
water	135:64	0:0	4	s
op	135:65	0:0	4	->
water	135:67	0:0	4	used_ch_count
arg	135:82	135:96	3	s->channel_map
water	135:82	0:0	4	s
op	135:83	0:0	4	->
water	135:85	0:0	4	channel_map
arg	135:98	135:99	3	0
water	135:98	0:0	4	0
water	135:100	0:0	2	;
water	136:4	0:0	2	s
op	136:5	0:0	2	->
water	136:7	0:0	2	out_convert
op	136:18	0:0	2	=
call	136:20	137:88	2	swri_audio_convert_alloc
arg	136:45	136:62	3	s->out_sample_fmt
water	136:45	0:0	4	s
op	136:46	0:0	4	->
water	136:48	0:0	4	out_sample_fmt
arg	137:45	137:62	3	s->int_sample_fmt
water	137:45	0:0	4	s
op	137:46	0:0	4	->
water	137:48	0:0	4	int_sample_fmt
arg	137:64	137:79	3	s->out.ch_count
water	137:64	0:0	4	s
op	137:65	0:0	4	->
water	137:67	0:0	4	out
op	137:70	0:0	4	.
water	137:71	0:0	4	ch_count
arg	137:81	137:85	3	NULL
water	137:81	0:0	4	NULL
arg	137:87	137:88	3	0
water	137:87	0:0	4	0
water	137:89	0:0	2	;
water	140:4	0:0	2	s
op	140:5	0:0	2	->
water	140:7	0:0	2	postin
op	140:13	0:0	2	=
water	140:15	0:0	2	s
op	140:16	0:0	2	->
water	140:18	0:0	2	in
water	140:20	0:0	2	;
water	141:4	0:0	2	s
op	141:5	0:0	2	->
water	141:7	0:0	2	preout
op	141:13	0:0	2	=
water	141:15	0:0	2	s
op	141:16	0:0	2	->
water	141:18	0:0	2	out
water	141:21	0:0	2	;
water	142:4	0:0	2	s
op	142:5	0:0	2	->
water	142:7	0:0	2	midbuf
op	142:13	0:0	2	=
water	142:15	0:0	2	s
op	142:16	0:0	2	->
water	142:18	0:0	2	in
water	142:20	0:0	2	;
if	144:4	149:4	2	(s -> channel_map)
cond	144:7	144:10	3	s -> channel_map
water	144:7	0:0	4	s
op	144:8	0:0	4	->
water	144:10	0:0	4	channel_map
stmts	144:22	149:4	3	
water	144:22	0:0	4	{
water	145:8	0:0	4	s
op	145:9	0:0	4	->
water	145:11	0:0	4	postin
op	145:17	0:0	4	.
water	145:18	0:0	4	ch_count
op	145:26	0:0	4	=
water	146:8	0:0	4	s
op	146:9	0:0	4	->
water	146:11	0:0	4	midbuf
op	146:17	0:0	4	.
water	146:18	0:0	4	ch_count
op	146:26	0:0	4	=
water	146:28	0:0	4	s
op	146:29	0:0	4	->
water	146:31	0:0	4	used_ch_count
water	146:44	0:0	4	;
if	147:8	148:51	4	(s -> resample)
cond	147:11	147:14	5	s -> resample
water	147:11	0:0	6	s
op	147:12	0:0	6	->
water	147:14	0:0	6	resample
stmts	148:12	148:51	5	
water	148:12	0:0	6	s
op	148:13	0:0	6	->
water	148:15	0:0	6	in_buffer
op	148:24	0:0	6	.
water	148:25	0:0	6	ch_count
op	148:33	0:0	6	=
water	148:35	0:0	6	s
op	148:36	0:0	6	->
water	148:38	0:0	6	used_ch_count
water	148:51	0:0	6	;
water	149:4	0:0	4	}
if	150:4	154:4	2	(! s -> resample_first)
cond	150:7	150:11	3	! s -> resample_first
op	150:7	0:0	4	!
water	150:8	0:0	4	s
op	150:9	0:0	4	->
water	150:11	0:0	4	resample_first
stmts	150:26	154:4	3	
water	150:26	0:0	4	{
water	151:8	0:0	4	s
op	151:9	0:0	4	->
water	151:11	0:0	4	midbuf
op	151:17	0:0	4	.
water	151:18	0:0	4	ch_count
op	151:26	0:0	4	=
water	151:28	0:0	4	s
op	151:29	0:0	4	->
water	151:31	0:0	4	out
op	151:34	0:0	4	.
water	151:35	0:0	4	ch_count
water	151:43	0:0	4	;
if	152:8	153:51	4	(s -> resample)
cond	152:11	152:14	5	s -> resample
water	152:11	0:0	6	s
op	152:12	0:0	6	->
water	152:14	0:0	6	resample
stmts	153:12	153:51	5	
water	153:12	0:0	6	s
op	153:13	0:0	6	->
water	153:15	0:0	6	in_buffer
op	153:24	0:0	6	.
water	153:25	0:0	6	ch_count
op	153:34	0:0	6	=
water	153:36	0:0	6	s
op	153:37	0:0	6	->
water	153:39	0:0	6	out
op	153:42	0:0	6	.
water	153:43	0:0	6	ch_count
water	153:51	0:0	6	;
water	154:4	0:0	4	}
call	156:4	156:51	2	set_audiodata_fmt
arg	156:22	156:32	3	&s->postin
op	156:22	0:0	4	&
water	156:23	0:0	4	s
op	156:24	0:0	4	->
water	156:26	0:0	4	postin
arg	156:34	156:51	3	s->int_sample_fmt
water	156:34	0:0	4	s
op	156:35	0:0	4	->
water	156:37	0:0	4	int_sample_fmt
water	156:52	0:0	2	;
call	157:4	157:51	2	set_audiodata_fmt
arg	157:22	157:32	3	&s->midbuf
op	157:22	0:0	4	&
water	157:23	0:0	4	s
op	157:24	0:0	4	->
water	157:26	0:0	4	midbuf
arg	157:34	157:51	3	s->int_sample_fmt
water	157:34	0:0	4	s
op	157:35	0:0	4	->
water	157:37	0:0	4	int_sample_fmt
water	157:52	0:0	2	;
call	158:4	158:51	2	set_audiodata_fmt
arg	158:22	158:32	3	&s->preout
op	158:22	0:0	4	&
water	158:23	0:0	4	s
op	158:24	0:0	4	->
water	158:26	0:0	4	preout
arg	158:34	158:51	3	s->int_sample_fmt
water	158:34	0:0	4	s
op	158:35	0:0	4	->
water	158:37	0:0	4	int_sample_fmt
water	158:52	0:0	2	;
if	160:4	162:4	2	(s -> resample)
cond	160:7	160:10	3	s -> resample
water	160:7	0:0	4	s
op	160:8	0:0	4	->
water	160:10	0:0	4	resample
stmts	160:19	162:4	3	
water	160:19	0:0	4	{
call	161:8	161:58	4	set_audiodata_fmt
arg	161:26	161:39	5	&s->in_buffer
op	161:26	0:0	6	&
water	161:27	0:0	6	s
op	161:28	0:0	6	->
water	161:30	0:0	6	in_buffer
arg	161:41	161:58	5	s->int_sample_fmt
water	161:41	0:0	6	s
op	161:42	0:0	6	->
water	161:44	0:0	6	int_sample_fmt
water	161:59	0:0	4	;
water	162:4	0:0	4	}
water	164:4	0:0	2	s
op	164:5	0:0	2	->
water	164:7	0:0	2	dither
op	164:14	0:0	2	=
water	164:16	0:0	2	s
op	164:17	0:0	2	->
water	164:19	0:0	2	preout
water	164:25	0:0	2	;
if	166:4	167:36	2	(s -> rematrix || s -> dither_method)
cond	166:7	166:25	3	s -> rematrix || s -> dither_method
water	166:7	0:0	4	s
op	166:8	0:0	4	->
water	166:10	0:0	4	rematrix
op	166:19	0:0	4	||
water	166:22	0:0	4	s
op	166:23	0:0	4	->
water	166:25	0:0	4	dither_method
stmts	167:8	167:36	3	
return	167:8	167:36	4	swri_rematrix_init(s)
call	167:15	167:35	5	swri_rematrix_init
arg	167:34	167:35	6	s
water	167:34	0:0	7	s
return	169:4	169:12	2	0
water	169:11	0:0	3	0
