func	1:0	45:0	0	static int	matroska_parse_flac
params	1:30	0:0	1	
param	1:31	1:49	2	AVFormatContext *	s
param	2:31	2:51	2	MatroskaTrack *	track
param	3:31	3:42	2	int *	offset
stmnts	0:0	44:12	1	
decl	5:4	5:32	2	AVStream	*st
op	5:17	0:0	2	=
water	5:19	0:0	2	track
op	5:24	0:0	2	->
water	5:26	0:0	2	stream
decl	6:4	6:39	2	uint8_t	*p
op	6:15	0:0	2	=
water	6:17	0:0	2	track
op	6:22	0:0	2	->
water	6:24	0:0	2	codec_priv
op	6:34	0:0	2	.
water	6:35	0:0	2	data
decl	7:4	7:39	2	int	size
op	7:15	0:0	2	=
water	7:17	0:0	2	track
op	7:22	0:0	2	->
water	7:24	0:0	2	codec_priv
op	7:34	0:0	2	.
water	7:35	0:0	2	size
if	8:4	12:4	2	(size < 8 + FLAC_STREAMINFO_SIZE || p [ 4 ] & 0 x7f)
cond	8:8	8:51	3	size < 8 + FLAC_STREAMINFO_SIZE || p [ 4 ] & 0 x7f
water	8:8	0:0	4	size
op	8:13	0:0	4	<
water	8:15	0:0	4	8
op	8:17	0:0	4	+
water	8:19	0:0	4	FLAC_STREAMINFO_SIZE
op	8:40	0:0	4	||
water	8:43	0:0	4	p
op	8:44	0:0	4	[
water	8:45	0:0	4	4
op	8:46	0:0	4	]
op	8:48	0:0	4	&
water	8:50	0:0	4	0
water	8:51	0:0	4	x7f
stmts	8:56	12:4	3	
water	8:56	0:0	4	{
call	9:8	9:63	4	av_log
arg	9:15	9:16	5	s
water	9:15	0:0	6	s
arg	9:18	9:32	5	AV_LOG_WARNING
water	9:18	0:0	6	AV_LOG_WARNING
arg	9:34	9:63	5	"Invalid FLAC private data\n"
water	9:34	0:0	6	"Invalid FLAC private data\n"
water	9:64	0:0	4	;
water	10:8	0:0	4	track
op	10:13	0:0	4	->
water	10:15	0:0	4	codec_priv
op	10:25	0:0	4	.
water	10:26	0:0	4	size
op	10:31	0:0	4	=
water	10:33	0:0	4	0
water	10:34	0:0	4	;
return	11:8	11:16	4	0
water	11:15	0:0	5	0
water	12:4	0:0	4	}
op	13:4	0:0	2	*
water	13:5	0:0	2	offset
op	13:12	0:0	2	=
water	13:14	0:0	2	8
water	13:15	0:0	2	;
water	14:4	0:0	2	track
op	14:9	0:0	2	->
water	14:11	0:0	2	codec_priv
op	14:21	0:0	2	.
water	14:22	0:0	2	size
op	14:27	0:0	2	=
water	14:29	0:0	2	8
op	14:31	0:0	2	+
water	14:33	0:0	2	FLAC_STREAMINFO_SIZE
water	14:53	0:0	2	;
water	15:4	0:0	2	p
op	15:9	0:0	2	+=
water	15:12	0:0	2	track
op	15:17	0:0	2	->
water	15:19	0:0	2	codec_priv
op	15:29	0:0	2	.
water	15:30	0:0	2	size
water	15:34	0:0	2	;
water	16:4	0:0	2	size
op	16:9	0:0	2	-=
water	16:12	0:0	2	track
op	16:17	0:0	2	->
water	16:19	0:0	2	codec_priv
op	16:29	0:0	2	.
water	16:30	0:0	2	size
water	16:34	0:0	2	;
while	18:4	43:4	2	(size >= 4)
cond	18:11	18:19	3	size >= 4
water	18:11	0:0	4	size
op	18:16	0:0	4	>=
water	18:19	0:0	4	4
stmts	18:22	43:4	3	
water	18:22	0:0	4	{
decl	19:8	19:46	4	int	block_last
water	19:22	0:0	4	,
decl	19:8	19:46	4	int	block_type
water	19:34	0:0	4	,
decl	19:8	19:46	4	int	block_size
call	20:8	20:72	4	flac_parse_block_header
arg	20:32	20:33	5	p
water	20:32	0:0	6	p
arg	20:35	20:46	5	&block_last
op	20:35	0:0	6	&
water	20:36	0:0	6	block_last
arg	20:48	20:59	5	&block_type
op	20:48	0:0	6	&
water	20:49	0:0	6	block_type
arg	20:61	20:72	5	&block_size
op	20:61	0:0	6	&
water	20:62	0:0	6	block_size
water	20:73	0:0	4	;
water	21:8	0:0	4	p
op	21:13	0:0	4	+=
water	21:16	0:0	4	4
water	21:17	0:0	4	;
water	22:8	0:0	4	size
op	22:13	0:0	4	-=
water	22:16	0:0	4	4
water	22:17	0:0	4	;
if	23:8	24:20	4	(block_size > size)
cond	23:12	23:25	5	block_size > size
water	23:12	0:0	6	block_size
op	23:23	0:0	6	>
water	23:25	0:0	6	size
stmts	24:12	24:20	5	
return	24:12	24:20	6	0
water	24:19	0:0	7	0
if	26:8	40:8	4	(block_type == FLAC_METADATA_TYPE_VORBIS_COMMENT)
cond	26:12	26:26	5	block_type == FLAC_METADATA_TYPE_VORBIS_COMMENT
water	26:12	0:0	6	block_type
op	26:23	0:0	6	==
water	26:26	0:0	6	FLAC_METADATA_TYPE_VORBIS_COMMENT
stmts	26:61	40:8	5	
water	26:61	0:0	6	{
decl	27:12	27:37	6	AVDictionary	*dict
op	27:31	0:0	6	=
water	27:33	0:0	6	NULL
decl	28:12	28:37	6	AVDictionaryEntry	*chmask
call	29:12	29:56	6	ff_vorbis_comment
arg	29:30	29:31	7	s
water	29:30	0:0	8	s
arg	29:33	29:38	7	&dict
op	29:33	0:0	8	&
water	29:34	0:0	8	dict
arg	29:40	29:41	7	p
water	29:40	0:0	8	p
arg	29:43	29:53	7	block_size
water	29:43	0:0	8	block_size
arg	29:55	29:56	7	0
water	29:55	0:0	8	0
water	29:57	0:0	6	;
water	30:12	0:0	6	chmask
op	30:19	0:0	6	=
call	30:21	30:83	6	av_dict_get
arg	30:33	30:37	7	dict
water	30:33	0:0	8	dict
arg	30:39	30:74	7	"WAVEFORMATEXTENSIBLE_CHANNEL_MASK"
water	30:39	0:0	8	"WAVEFORMATEXTENSIBLE_CHANNEL_MASK"
arg	30:76	30:80	7	NULL
water	30:76	0:0	8	NULL
arg	30:82	30:83	7	0
water	30:82	0:0	8	0
water	30:84	0:0	6	;
if	31:12	38:12	6	(chmask)
cond	31:16	31:16	7	chmask
water	31:16	0:0	8	chmask
stmts	31:24	38:12	7	
water	31:24	0:0	8	{
decl	32:16	32:62	8	uint64_t	mask
op	32:30	0:0	8	=
call	32:32	32:61	9	strtol
arg	32:39	32:52	10	chmask->value
water	32:39	0:0	11	chmask
op	32:45	0:0	11	->
water	32:47	0:0	11	value
arg	32:54	32:58	10	NULL
water	32:54	0:0	11	NULL
arg	32:60	32:61	10	0
water	32:60	0:0	11	0
if	33:16	36:16	8	(! mask || mask & ~0x3ffffULL)
cond	33:20	33:36	9	! mask || mask & ~0x3ffffULL
op	33:20	0:0	10	!
water	33:21	0:0	10	mask
op	33:26	0:0	10	||
water	33:29	0:0	10	mask
op	33:34	0:0	10	&
water	33:36	0:0	10	~0x3ffffULL
stmts	33:49	36:16	9	
water	33:49	0:0	10	{
call	34:20	35:81	10	av_log
arg	34:27	34:28	11	s
water	34:27	0:0	12	s
arg	34:30	34:44	11	AV_LOG_WARNING
water	34:30	0:0	12	AV_LOG_WARNING
arg	35:27	35:81	11	"Invalid value of WAVEFORMATEXTENSIBLE_CHANNEL_MASK\n"
water	35:27	0:0	12	"Invalid value of WAVEFORMATEXTENSIBLE_CHANNEL_MASK\n"
water	35:82	0:0	10	;
water	36:16	0:0	10	}
else	36:18	37:52	8
stmts	37:20	37:52	9	
water	37:20	0:0	10	st
op	37:22	0:0	10	->
water	37:24	0:0	10	codec
op	37:29	0:0	10	->
water	37:31	0:0	10	channel_layout
op	37:46	0:0	10	=
water	37:48	0:0	10	mask
water	37:52	0:0	10	;
water	38:12	0:0	8	}
call	39:12	39:30	6	av_dict_free
arg	39:25	39:30	7	&dict
op	39:25	0:0	8	&
water	39:26	0:0	8	dict
water	39:31	0:0	6	;
water	40:8	0:0	6	}
water	41:8	0:0	4	p
op	41:13	0:0	4	+=
water	41:16	0:0	4	block_size
water	41:26	0:0	4	;
water	42:8	0:0	4	size
op	42:13	0:0	4	-=
water	42:16	0:0	4	block_size
water	42:26	0:0	4	;
water	43:4	0:0	4	}
return	44:4	44:12	2	0
water	44:11	0:0	3	0
