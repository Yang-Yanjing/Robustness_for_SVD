func	1:8	42:0	0	int	av_twofish_init
params	1:27	0:0	1	
param	1:28	1:41	2	AVTWOFISH *	cs
param	1:43	1:61	2	const uint8_t *	key
param	1:63	1:75	2	int	key_bits
stmnts	0:0	41:4	1	
decl	3:4	3:9	2	int	i
decl	4:4	4:22	2	uint8_t	keypad[32]
decl	5:4	5:39	2	uint32_t	Key[8]
water	5:19	0:0	2	,
decl	5:4	5:39	2	uint32_t	Me[4]
water	5:26	0:0	2	,
decl	5:4	5:39	2	uint32_t	Mo[4]
water	5:33	0:0	2	,
decl	5:4	5:39	2	uint32_t	A
water	5:36	0:0	2	,
decl	5:4	5:39	2	uint32_t	B
decl	6:4	6:35	2	const uint32_t	rho
op	6:23	0:0	2	=
water	6:25	0:0	2	0
water	6:26	0:0	2	x01010101
if	7:4	8:17	2	(key_bits < 0)
cond	7:8	7:19	3	key_bits < 0
water	7:8	0:0	4	key_bits
op	7:17	0:0	4	<
water	7:19	0:0	4	0
stmts	8:8	8:17	3	
return	8:8	8:17	4	-1
op	8:15	0:0	5	-
water	8:16	0:0	5	1
if	9:4	11:4	2	(key_bits <= 128)
cond	9:8	9:20	3	key_bits <= 128
water	9:8	0:0	4	key_bits
op	9:17	0:0	4	<=
water	9:20	0:0	4	128
stmts	9:25	11:4	3	
water	9:25	0:0	4	{
water	10:8	0:0	4	cs
op	10:10	0:0	4	->
water	10:12	0:0	4	ksize
op	10:18	0:0	4	=
water	10:20	0:0	4	2
water	10:21	0:0	4	;
water	11:4	0:0	4	}
else	11:6	13:4	2
stmts	11:11	13:4	3	
if	11:11	13:4	4	(key_bits <= 192)
cond	11:15	11:27	5	key_bits <= 192
water	11:15	0:0	6	key_bits
op	11:24	0:0	6	<=
water	11:27	0:0	6	192
stmts	11:32	13:4	5	
water	11:32	0:0	6	{
water	12:8	0:0	6	cs
op	12:10	0:0	6	->
water	12:12	0:0	6	ksize
op	12:18	0:0	6	=
water	12:20	0:0	6	3
water	12:21	0:0	6	;
water	13:4	0:0	6	}
else	13:6	15:4	2
stmts	13:11	15:4	3	
water	13:11	0:0	4	{
water	14:8	0:0	4	cs
op	14:10	0:0	4	->
water	14:12	0:0	4	ksize
op	14:18	0:0	4	=
water	14:20	0:0	4	4
water	14:21	0:0	4	;
water	15:4	0:0	4	}
call	16:4	16:36	2	memset
arg	16:11	16:17	3	keypad
water	16:11	0:0	4	keypad
arg	16:19	16:20	3	0
water	16:19	0:0	4	0
arg	16:22	16:36	3	sizeof(keypad)
op	16:22	0:0	4	sizeof
water	16:28	0:0	4	(
water	16:29	0:0	4	keypad
water	16:35	0:0	4	)
water	16:37	0:0	2	;
if	17:4	19:4	2	(key_bits <= 256)
cond	17:8	17:20	3	key_bits <= 256
water	17:8	0:0	4	key_bits
op	17:17	0:0	4	<=
water	17:20	0:0	4	256
stmts	17:25	19:4	3	
water	17:25	0:0	4	{
call	18:8	18:41	4	memcpy
arg	18:15	18:21	5	keypad
water	18:15	0:0	6	keypad
arg	18:23	18:26	5	key
water	18:23	0:0	6	key
arg	18:28	18:41	5	key_bits>>3
water	18:28	0:0	6	key_bits
op	18:37	0:0	6	>>
water	18:40	0:0	6	3
water	18:42	0:0	4	;
water	19:4	0:0	4	}
else	19:6	21:4	2
stmts	19:11	21:4	3	
water	19:11	0:0	4	{
call	20:8	20:30	4	memcpy
arg	20:15	20:21	5	keypad
water	20:15	0:0	6	keypad
arg	20:23	20:26	5	key
water	20:23	0:0	6	key
arg	20:28	20:30	5	32
water	20:28	0:0	6	32
water	20:31	0:0	4	;
water	21:4	0:0	4	}
for	22:4	23:40	2	(i = 0 ;i < 2 * cs -> ksize;i ++)
forinit	22:9	22:14	3	i = 0 ;
water	22:9	0:0	4	i
op	22:11	0:0	4	=
water	22:13	0:0	4	0
water	22:14	0:0	4	;
cond	22:16	22:28	3	i < 2 * cs -> ksize
water	22:16	0:0	4	i
op	22:18	0:0	4	<
water	22:20	0:0	4	2
op	22:22	0:0	4	*
water	22:24	0:0	4	cs
op	22:26	0:0	4	->
water	22:28	0:0	4	ksize
forexpr	22:36	22:37	3	i ++
water	22:36	0:0	4	i
op	22:37	0:0	4	++
stmts	23:8	23:40	3	
water	23:8	0:0	4	Key
op	23:11	0:0	4	[
water	23:12	0:0	4	i
op	23:13	0:0	4	]
op	23:15	0:0	4	=
call	23:17	23:39	4	AV_RL32
arg	23:25	23:39	5	keypad+4*i
water	23:25	0:0	6	keypad
op	23:32	0:0	6	+
water	23:34	0:0	6	4
op	23:36	0:0	6	*
water	23:38	0:0	6	i
water	23:40	0:0	4	;
for	24:4	28:4	2	(i = 0 ;i < cs -> ksize;i ++)
forinit	24:9	24:14	3	i = 0 ;
water	24:9	0:0	4	i
op	24:11	0:0	4	=
water	24:13	0:0	4	0
water	24:14	0:0	4	;
cond	24:16	24:24	3	i < cs -> ksize
water	24:16	0:0	4	i
op	24:18	0:0	4	<
water	24:20	0:0	4	cs
op	24:22	0:0	4	->
water	24:24	0:0	4	ksize
forexpr	24:31	24:32	3	i ++
water	24:31	0:0	4	i
op	24:32	0:0	4	++
stmts	24:36	28:4	3	
water	24:36	0:0	4	{
water	25:8	0:0	4	Me
op	25:10	0:0	4	[
water	25:11	0:0	4	i
op	25:12	0:0	4	]
op	25:14	0:0	4	=
water	25:16	0:0	4	Key
op	25:19	0:0	4	[
water	25:20	0:0	4	2
op	25:22	0:0	4	*
water	25:24	0:0	4	i
op	25:25	0:0	4	]
water	25:26	0:0	4	;
water	26:8	0:0	4	Mo
op	26:10	0:0	4	[
water	26:11	0:0	4	i
op	26:12	0:0	4	]
op	26:14	0:0	4	=
water	26:16	0:0	4	Key
op	26:19	0:0	4	[
water	26:20	0:0	4	2
op	26:22	0:0	4	*
water	26:24	0:0	4	i
op	26:26	0:0	4	+
water	26:28	0:0	4	1
op	26:29	0:0	4	]
water	26:30	0:0	4	;
water	27:8	0:0	4	cs
op	27:10	0:0	4	->
water	27:12	0:0	4	S
op	27:13	0:0	4	[
water	27:14	0:0	4	cs
op	27:16	0:0	4	->
water	27:18	0:0	4	ksize
op	27:24	0:0	4	-
water	27:26	0:0	4	i
op	27:28	0:0	4	-
water	27:30	0:0	4	1
op	27:31	0:0	4	]
op	27:33	0:0	4	=
call	27:35	27:53	4	tf_RS
arg	27:41	27:46	5	Me[i]
water	27:41	0:0	6	Me
op	27:43	0:0	6	[
water	27:44	0:0	6	i
op	27:45	0:0	6	]
arg	27:48	27:53	5	Mo[i]
water	27:48	0:0	6	Mo
op	27:50	0:0	6	[
water	27:51	0:0	6	i
op	27:52	0:0	6	]
water	27:54	0:0	4	;
water	28:4	0:0	4	}
call	29:4	29:20	2	precomputeMDS
arg	29:18	29:20	3	cs
water	29:18	0:0	4	cs
water	29:21	0:0	2	;
for	30:4	36:4	2	(i = 0 ;i < 20;i ++)
forinit	30:9	30:14	3	i = 0 ;
water	30:9	0:0	4	i
op	30:11	0:0	4	=
water	30:13	0:0	4	0
water	30:14	0:0	4	;
cond	30:16	30:20	3	i < 20
water	30:16	0:0	4	i
op	30:18	0:0	4	<
water	30:20	0:0	4	20
forexpr	30:24	30:25	3	i ++
water	30:24	0:0	4	i
op	30:25	0:0	4	++
stmts	30:29	36:4	3	
water	30:29	0:0	4	{
water	31:8	0:0	4	A
op	31:10	0:0	4	=
call	31:12	31:45	4	tf_h
arg	31:17	31:30	5	(2*i)*rho
water	31:17	0:0	6	(
water	31:18	0:0	6	2
op	31:20	0:0	6	*
water	31:22	0:0	6	i
water	31:23	0:0	6	)
op	31:25	0:0	6	*
water	31:27	0:0	6	rho
arg	31:32	31:34	5	Me
water	31:32	0:0	6	Me
arg	31:36	31:45	5	cs->ksize
water	31:36	0:0	6	cs
op	31:38	0:0	6	->
water	31:40	0:0	6	ksize
water	31:46	0:0	4	;
water	32:8	0:0	4	B
op	32:10	0:0	4	=
call	32:12	32:49	4	tf_h
arg	32:17	32:34	5	(2*i+1)*rho
water	32:17	0:0	6	(
water	32:18	0:0	6	2
op	32:20	0:0	6	*
water	32:22	0:0	6	i
op	32:24	0:0	6	+
water	32:26	0:0	6	1
water	32:27	0:0	6	)
op	32:29	0:0	6	*
water	32:31	0:0	6	rho
arg	32:36	32:38	5	Mo
water	32:36	0:0	6	Mo
arg	32:40	32:49	5	cs->ksize
water	32:40	0:0	6	cs
op	32:42	0:0	6	->
water	32:44	0:0	6	ksize
water	32:50	0:0	4	;
water	33:8	0:0	4	B
op	33:10	0:0	4	=
call	33:12	33:19	4	LR
arg	33:15	33:16	5	B
water	33:15	0:0	6	B
arg	33:18	33:19	5	8
water	33:18	0:0	6	8
water	33:20	0:0	4	;
water	34:8	0:0	4	cs
op	34:10	0:0	4	->
water	34:12	0:0	4	K
op	34:13	0:0	4	[
water	34:14	0:0	4	2
op	34:16	0:0	4	*
water	34:18	0:0	4	i
op	34:19	0:0	4	]
op	34:21	0:0	4	=
water	34:23	0:0	4	A
op	34:25	0:0	4	+
water	34:27	0:0	4	B
water	34:28	0:0	4	;
water	35:8	0:0	4	cs
op	35:10	0:0	4	->
water	35:12	0:0	4	K
op	35:13	0:0	4	[
water	35:14	0:0	4	2
op	35:16	0:0	4	*
water	35:18	0:0	4	i
op	35:20	0:0	4	+
water	35:22	0:0	4	1
op	35:23	0:0	4	]
op	35:25	0:0	4	=
call	35:27	35:46	4	LR
arg	35:30	35:43	5	(A+(2*B))
water	35:30	0:0	6	(
water	35:31	0:0	6	A
op	35:33	0:0	6	+
water	35:35	0:0	6	(
water	35:36	0:0	6	2
op	35:38	0:0	6	*
water	35:40	0:0	6	B
water	35:41	0:0	6	)
water	35:42	0:0	6	)
arg	35:45	35:46	5	9
water	35:45	0:0	6	9
water	35:47	0:0	4	;
water	36:4	0:0	4	}
if	37:4	39:4	2	(cs -> ksize << 6 != key_bits)
cond	37:8	37:26	3	cs -> ksize << 6 != key_bits
water	37:8	0:0	4	cs
op	37:10	0:0	4	->
water	37:12	0:0	4	ksize
op	37:18	0:0	4	<<
water	37:21	0:0	4	6
op	37:23	0:0	4	!=
water	37:26	0:0	4	key_bits
stmts	37:36	39:4	3	
water	37:36	0:0	4	{
return	38:8	38:16	4	1
water	38:15	0:0	5	1
water	39:4	0:0	4	}
else	39:6	41:4	2
stmts	39:11	41:4	3	
water	39:11	0:0	4	{
return	40:8	40:16	4	0
water	40:15	0:0	5	0
water	41:4	0:0	4	}
