func	1:0	369:0	0	static int	ffserver_parse_config_stream
params	1:39	0:0	1	
param	1:40	1:62	2	FFServerConfig *	config
param	1:64	1:79	2	const char *	cmd
param	2:40	2:54	2	const char * *	p
param	3:40	3:64	2	FFServerStream * *	pstream
stmnts	0:0	368:26	1	
decl	5:4	5:30	2	char	arg[1024]
water	5:18	0:0	2	,
decl	5:4	5:30	2	char	arg2[1024]
decl	6:4	6:26	2	FFServerStream	*stream
decl	7:4	7:11	2	int	val
call	8:4	8:22	2	av_assert0
arg	8:15	8:22	3	pstream
water	8:15	0:0	4	pstream
water	8:23	0:0	2	;
water	9:4	0:0	2	stream
op	9:11	0:0	2	=
op	9:13	0:0	2	*
water	9:14	0:0	2	pstream
water	9:21	0:0	2	;
if	10:4	45:4	2	(!av_strcasecmp (cmd ,"<Stream" ))
cond	10:8	10:37	3	!av_strcasecmp (cmd ,"<Stream" )
op	10:8	0:0	4	!
call	10:9	10:37	4	av_strcasecmp
arg	10:23	10:26	5	cmd
water	10:23	0:0	6	cmd
arg	10:28	10:37	5	"<Stream"
water	10:28	0:0	6	"<Stream"
stmts	10:40	45:4	3	
water	10:40	0:0	4	{
decl	11:8	11:15	4	char	*q
decl	12:8	12:25	4	FFServerStream	*s
water	13:8	0:0	4	stream
op	13:15	0:0	4	=
call	13:17	13:50	4	av_mallocz
arg	13:28	13:50	5	sizeof(FFServerStream)
op	13:28	0:0	6	sizeof
water	13:34	0:0	6	(
water	13:35	0:0	6	FFServerStream
water	13:49	0:0	6	)
water	13:51	0:0	4	;
if	14:8	15:34	4	(! stream)
cond	14:12	14:13	5	! stream
op	14:12	0:0	6	!
water	14:13	0:0	6	stream
stmts	15:12	15:34	5	
return	15:12	15:34	6	AVERROR(ENOMEM)
call	15:19	15:33	7	AVERROR
arg	15:27	15:33	8	ENOMEM
water	15:27	0:0	9	ENOMEM
water	16:8	0:0	4	config
op	16:14	0:0	4	->
water	16:16	0:0	4	dummy_actx
op	16:27	0:0	4	=
call	16:29	16:56	4	avcodec_alloc_context3
arg	16:52	16:56	5	NULL
water	16:52	0:0	6	NULL
water	16:57	0:0	4	;
water	17:8	0:0	4	config
op	17:14	0:0	4	->
water	17:16	0:0	4	dummy_vctx
op	17:27	0:0	4	=
call	17:29	17:56	4	avcodec_alloc_context3
arg	17:52	17:56	5	NULL
water	17:52	0:0	6	NULL
water	17:57	0:0	4	;
if	18:8	23:8	4	(! config -> dummy_vctx || ! config -> dummy_actx)
cond	18:12	18:44	5	! config -> dummy_vctx || ! config -> dummy_actx
op	18:12	0:0	6	!
water	18:13	0:0	6	config
op	18:19	0:0	6	->
water	18:21	0:0	6	dummy_vctx
op	18:32	0:0	6	||
op	18:35	0:0	6	!
water	18:36	0:0	6	config
op	18:42	0:0	6	->
water	18:44	0:0	6	dummy_actx
stmts	18:56	23:8	5	
water	18:56	0:0	6	{
call	19:12	19:26	6	av_free
arg	19:20	19:26	7	stream
water	19:20	0:0	8	stream
water	19:27	0:0	6	;
call	20:12	20:52	6	avcodec_free_context
arg	20:33	20:52	7	&config->dummy_vctx
op	20:33	0:0	8	&
water	20:34	0:0	8	config
op	20:40	0:0	8	->
water	20:42	0:0	8	dummy_vctx
water	20:53	0:0	6	;
call	21:12	21:52	6	avcodec_free_context
arg	21:33	21:52	7	&config->dummy_actx
op	21:33	0:0	8	&
water	21:34	0:0	8	config
op	21:40	0:0	8	->
water	21:42	0:0	8	dummy_actx
water	21:53	0:0	6	;
return	22:12	22:34	6	AVERROR(ENOMEM)
call	22:19	22:33	7	AVERROR
arg	22:27	22:33	8	ENOMEM
water	22:27	0:0	9	ENOMEM
water	23:8	0:0	6	}
water	24:8	0:0	4	config
op	24:14	0:0	4	->
water	24:16	0:0	4	dummy_actx
op	24:26	0:0	4	->
water	24:28	0:0	4	codec_type
op	24:39	0:0	4	=
water	24:41	0:0	4	AVMEDIA_TYPE_AUDIO
water	24:59	0:0	4	;
water	25:8	0:0	4	config
op	25:14	0:0	4	->
water	25:16	0:0	4	dummy_vctx
op	25:26	0:0	4	->
water	25:28	0:0	4	codec_type
op	25:39	0:0	4	=
water	25:41	0:0	4	AVMEDIA_TYPE_VIDEO
water	25:59	0:0	4	;
call	26:8	26:70	4	ffserver_get_arg
arg	26:25	26:41	5	stream->filename
water	26:25	0:0	6	stream
op	26:31	0:0	6	->
water	26:33	0:0	6	filename
arg	26:43	26:67	5	sizeof(stream->filename)
op	26:43	0:0	6	sizeof
water	26:49	0:0	6	(
water	26:50	0:0	6	stream
op	26:56	0:0	6	->
water	26:58	0:0	6	filename
water	26:66	0:0	6	)
arg	26:69	26:70	5	p
water	26:69	0:0	6	p
water	26:71	0:0	4	;
water	27:8	0:0	4	q
op	27:10	0:0	4	=
call	27:12	27:41	4	strrchr
arg	27:20	27:36	5	stream->filename
water	27:20	0:0	6	stream
op	27:26	0:0	6	->
water	27:28	0:0	6	filename
arg	27:38	27:41	5	'>'
water	27:38	0:0	6	'>'
water	27:42	0:0	4	;
if	28:8	29:21	4	(q)
cond	28:12	28:12	5	q
water	28:12	0:0	6	q
stmts	29:12	29:21	5	
op	29:12	0:0	6	*
water	29:13	0:0	6	q
op	29:15	0:0	6	=
water	29:17	0:0	6	'\0'
water	29:21	0:0	6	;
for	30:8	33:8	4	(s = config -> first_stream ;s;s = s -> next)
forinit	30:13	30:37	5	s = config -> first_stream ;
water	30:13	0:0	6	s
op	30:15	0:0	6	=
water	30:17	0:0	6	config
op	30:23	0:0	6	->
water	30:25	0:0	6	first_stream
water	30:37	0:0	6	;
cond	30:39	30:39	5	s
water	30:39	0:0	6	s
forexpr	30:42	30:49	5	s = s -> next
water	30:42	0:0	6	s
op	30:44	0:0	6	=
water	30:46	0:0	6	s
op	30:47	0:0	6	->
water	30:49	0:0	6	next
stmts	30:55	33:8	5	
water	30:55	0:0	6	{
if	31:12	32:70	6	(!strcmp (stream -> filename ,s -> filename ))
cond	31:16	31:53	7	!strcmp (stream -> filename ,s -> filename )
op	31:16	0:0	8	!
call	31:17	31:53	8	strcmp
arg	31:24	31:40	9	stream->filename
water	31:24	0:0	10	stream
op	31:30	0:0	10	->
water	31:32	0:0	10	filename
arg	31:42	31:53	9	s->filename
water	31:42	0:0	10	s
op	31:43	0:0	10	->
water	31:45	0:0	10	filename
stmts	32:16	32:70	7	
call	32:16	32:69	8	ERROR
arg	32:22	32:56	9	"Stream '%s' already registered\n"
water	32:22	0:0	10	"Stream '%s' already registered\n"
arg	32:58	32:69	9	s->filename
water	32:58	0:0	10	s
op	32:59	0:0	10	->
water	32:61	0:0	10	filename
water	32:70	0:0	8	;
water	33:8	0:0	6	}
water	34:8	0:0	4	stream
op	34:14	0:0	4	->
water	34:16	0:0	4	fmt
op	34:20	0:0	4	=
call	34:22	34:72	4	ffserver_guess_format
arg	34:44	34:48	5	NULL
water	34:44	0:0	6	NULL
arg	34:50	34:66	5	stream->filename
water	34:50	0:0	6	stream
op	34:56	0:0	6	->
water	34:58	0:0	6	filename
arg	34:68	34:72	5	NULL
water	34:68	0:0	6	NULL
water	34:73	0:0	4	;
if	35:8	38:8	4	(stream -> fmt)
cond	35:12	35:20	5	stream -> fmt
water	35:12	0:0	6	stream
op	35:18	0:0	6	->
water	35:20	0:0	6	fmt
stmts	35:25	38:8	5	
water	35:25	0:0	6	{
water	36:12	0:0	6	config
op	36:18	0:0	6	->
water	36:20	0:0	6	guessed_audio_codec_id
op	36:43	0:0	6	=
water	36:45	0:0	6	stream
op	36:51	0:0	6	->
water	36:53	0:0	6	fmt
op	36:56	0:0	6	->
water	36:58	0:0	6	audio_codec
water	36:69	0:0	6	;
water	37:12	0:0	6	config
op	37:18	0:0	6	->
water	37:20	0:0	6	guessed_video_codec_id
op	37:43	0:0	6	=
water	37:45	0:0	6	stream
op	37:51	0:0	6	->
water	37:53	0:0	6	fmt
op	37:56	0:0	6	->
water	37:58	0:0	6	video_codec
water	37:69	0:0	6	;
water	38:8	0:0	6	}
else	38:10	41:8	4
stmts	38:15	41:8	5	
water	38:15	0:0	6	{
water	39:12	0:0	6	config
op	39:18	0:0	6	->
water	39:20	0:0	6	guessed_audio_codec_id
op	39:43	0:0	6	=
water	39:45	0:0	6	AV_CODEC_ID_NONE
water	39:61	0:0	6	;
water	40:12	0:0	6	config
op	40:18	0:0	6	->
water	40:20	0:0	6	guessed_video_codec_id
op	40:43	0:0	6	=
water	40:45	0:0	6	AV_CODEC_ID_NONE
water	40:61	0:0	6	;
water	41:8	0:0	6	}
water	42:8	0:0	4	config
op	42:14	0:0	4	->
water	42:16	0:0	4	stream_use_defaults
op	42:36	0:0	4	=
water	42:38	0:0	4	config
op	42:44	0:0	4	->
water	42:46	0:0	4	use_defaults
water	42:58	0:0	4	;
op	43:8	0:0	4	*
water	43:9	0:0	4	pstream
op	43:17	0:0	4	=
water	43:19	0:0	4	stream
water	43:25	0:0	4	;
return	44:8	44:16	4	0
water	44:15	0:0	5	0
water	45:4	0:0	4	}
call	46:4	46:21	2	av_assert0
arg	46:15	46:21	3	stream
water	46:15	0:0	4	stream
water	46:22	0:0	2	;
if	47:4	61:4	2	(!av_strcasecmp (cmd ,"Feed" ))
cond	47:8	47:34	3	!av_strcasecmp (cmd ,"Feed" )
op	47:8	0:0	4	!
call	47:9	47:34	4	av_strcasecmp
arg	47:23	47:26	5	cmd
water	47:23	0:0	6	cmd
arg	47:28	47:34	5	"Feed"
water	47:28	0:0	6	"Feed"
stmts	47:37	61:4	3	
water	47:37	0:0	4	{
decl	48:8	48:29	4	FFServerStream	*sfeed
call	49:8	49:44	4	ffserver_get_arg
arg	49:25	49:28	5	arg
water	49:25	0:0	6	arg
arg	49:30	49:41	5	sizeof(arg)
op	49:30	0:0	6	sizeof
water	49:36	0:0	6	(
water	49:37	0:0	6	arg
water	49:40	0:0	6	)
arg	49:43	49:44	5	p
water	49:43	0:0	6	p
water	49:45	0:0	4	;
water	50:8	0:0	4	sfeed
op	50:14	0:0	4	=
water	50:16	0:0	4	config
op	50:22	0:0	4	->
water	50:24	0:0	4	first_feed
water	50:34	0:0	4	;
while	51:8	55:8	4	(sfeed)
cond	51:15	51:15	5	sfeed
water	51:15	0:0	6	sfeed
stmts	51:22	55:8	5	
water	51:22	0:0	6	{
if	52:12	53:21	6	(!strcmp (sfeed -> filename ,arg ))
cond	52:16	52:44	7	!strcmp (sfeed -> filename ,arg )
op	52:16	0:0	8	!
call	52:17	52:44	8	strcmp
arg	52:24	52:39	9	sfeed->filename
water	52:24	0:0	10	sfeed
op	52:29	0:0	10	->
water	52:31	0:0	10	filename
arg	52:41	52:44	9	arg
water	52:41	0:0	10	arg
stmts	53:16	53:21	7	
break	53:16	53:21	8	
water	54:12	0:0	6	sfeed
op	54:18	0:0	6	=
water	54:20	0:0	6	sfeed
op	54:25	0:0	6	->
water	54:27	0:0	6	next_feed
water	54:36	0:0	6	;
water	55:8	0:0	6	}
if	56:8	58:37	4	(! sfeed)
cond	56:12	56:13	5	! sfeed
op	56:12	0:0	6	!
water	56:13	0:0	6	sfeed
stmts	57:12	58:37	5	
call	57:12	58:36	6	ERROR
arg	57:18	57:72	7	"Feed with name '%s' for stream '%s' is not defined\n"
water	57:18	0:0	8	"Feed with name '%s' for stream '%s' is not defined\n"
arg	57:74	57:77	7	arg
water	57:74	0:0	8	arg
arg	58:20	58:36	7	stream->filename
water	58:20	0:0	8	stream
op	58:26	0:0	8	->
water	58:28	0:0	8	filename
water	58:37	0:0	6	;
else	59:8	60:32	4
stmts	60:12	60:32	5	
water	60:12	0:0	6	stream
op	60:18	0:0	6	->
water	60:20	0:0	6	feed
op	60:25	0:0	6	=
water	60:27	0:0	6	sfeed
water	60:32	0:0	6	;
water	61:4	0:0	4	}
else	61:6	81:4	2
stmts	61:11	81:4	3	
if	61:11	81:4	4	(!av_strcasecmp (cmd ,"Format" ))
cond	61:15	61:43	5	!av_strcasecmp (cmd ,"Format" )
op	61:15	0:0	6	!
call	61:16	61:43	6	av_strcasecmp
arg	61:30	61:33	7	cmd
water	61:30	0:0	8	cmd
arg	61:35	61:43	7	"Format"
water	61:35	0:0	8	"Format"
stmts	61:46	81:4	5	
water	61:46	0:0	6	{
call	62:8	62:44	6	ffserver_get_arg
arg	62:25	62:28	7	arg
water	62:25	0:0	8	arg
arg	62:30	62:41	7	sizeof(arg)
op	62:30	0:0	8	sizeof
water	62:36	0:0	8	(
water	62:37	0:0	8	arg
water	62:40	0:0	8	)
arg	62:43	62:44	7	p
water	62:43	0:0	8	p
water	62:45	0:0	6	;
if	63:8	66:8	6	(!strcmp (arg ,"status" ))
cond	63:12	63:33	7	!strcmp (arg ,"status" )
op	63:12	0:0	8	!
call	63:13	63:33	8	strcmp
arg	63:20	63:23	9	arg
water	63:20	0:0	10	arg
arg	63:25	63:33	9	"status"
water	63:25	0:0	10	"status"
stmts	63:36	66:8	7	
water	63:36	0:0	8	{
water	64:12	0:0	8	stream
op	64:18	0:0	8	->
water	64:20	0:0	8	stream_type
op	64:32	0:0	8	=
water	64:34	0:0	8	STREAM_TYPE_STATUS
water	64:52	0:0	8	;
water	65:12	0:0	8	stream
op	65:18	0:0	8	->
water	65:20	0:0	8	fmt
op	65:24	0:0	8	=
water	65:26	0:0	8	NULL
water	65:30	0:0	8	;
water	66:8	0:0	8	}
else	66:10	76:8	6
stmts	66:15	76:8	7	
water	66:15	0:0	8	{
water	67:12	0:0	8	stream
op	67:18	0:0	8	->
water	67:20	0:0	8	stream_type
op	67:32	0:0	8	=
water	67:34	0:0	8	STREAM_TYPE_LIVE
water	67:50	0:0	8	;
if	69:12	72:12	8	(!strcmp (arg ,"jpeg" ))
cond	69:16	69:35	9	!strcmp (arg ,"jpeg" )
op	69:16	0:0	10	!
call	69:17	69:35	10	strcmp
arg	69:24	69:27	11	arg
water	69:24	0:0	12	arg
arg	69:29	69:35	11	"jpeg"
water	69:29	0:0	12	"jpeg"
stmts	69:38	72:12	9	
water	69:38	0:0	10	{
call	70:16	70:40	10	strcpy
arg	70:23	70:26	11	arg
water	70:23	0:0	12	arg
arg	70:28	70:40	11	"singlejpeg"
water	70:28	0:0	12	"singlejpeg"
water	70:41	0:0	10	;
water	71:16	0:0	10	stream
op	71:22	0:0	10	->
water	71:24	0:0	10	single_frame
op	71:36	0:0	10	=
water	71:37	0:0	10	1
water	71:38	0:0	10	;
water	72:12	0:0	10	}
water	73:12	0:0	8	stream
op	73:18	0:0	8	->
water	73:20	0:0	8	fmt
op	73:24	0:0	8	=
call	73:26	73:63	8	ffserver_guess_format
arg	73:48	73:51	9	arg
water	73:48	0:0	10	arg
arg	73:53	73:57	9	NULL
water	73:53	0:0	10	NULL
arg	73:59	73:63	9	NULL
water	73:59	0:0	10	NULL
water	73:64	0:0	8	;
if	74:12	75:52	8	(! stream -> fmt)
cond	74:16	74:25	9	! stream -> fmt
op	74:16	0:0	10	!
water	74:17	0:0	10	stream
op	74:23	0:0	10	->
water	74:25	0:0	10	fmt
stmts	75:16	75:52	9	
call	75:16	75:51	10	ERROR
arg	75:22	75:46	11	"Unknown Format: '%s'\n"
water	75:22	0:0	12	"Unknown Format: '%s'\n"
arg	75:48	75:51	11	arg
water	75:48	0:0	12	arg
water	75:52	0:0	10	;
water	76:8	0:0	8	}
if	77:8	80:8	6	(stream -> fmt)
cond	77:12	77:20	7	stream -> fmt
water	77:12	0:0	8	stream
op	77:18	0:0	8	->
water	77:20	0:0	8	fmt
stmts	77:25	80:8	7	
water	77:25	0:0	8	{
water	78:12	0:0	8	config
op	78:18	0:0	8	->
water	78:20	0:0	8	guessed_audio_codec_id
op	78:43	0:0	8	=
water	78:45	0:0	8	stream
op	78:51	0:0	8	->
water	78:53	0:0	8	fmt
op	78:56	0:0	8	->
water	78:58	0:0	8	audio_codec
water	78:69	0:0	8	;
water	79:12	0:0	8	config
op	79:18	0:0	8	->
water	79:20	0:0	8	guessed_video_codec_id
op	79:43	0:0	8	=
water	79:45	0:0	8	stream
op	79:51	0:0	8	->
water	79:53	0:0	8	fmt
op	79:56	0:0	8	->
water	79:58	0:0	8	video_codec
water	79:69	0:0	8	;
water	80:8	0:0	8	}
water	81:4	0:0	6	}
else	81:6	86:4	2
stmts	81:11	86:4	3	
if	81:11	86:4	4	(!av_strcasecmp (cmd ,"InputFormat" ))
cond	81:15	81:48	5	!av_strcasecmp (cmd ,"InputFormat" )
op	81:15	0:0	6	!
call	81:16	81:48	6	av_strcasecmp
arg	81:30	81:33	7	cmd
water	81:30	0:0	8	cmd
arg	81:35	81:48	7	"InputFormat"
water	81:35	0:0	8	"InputFormat"
stmts	81:51	86:4	5	
water	81:51	0:0	6	{
call	82:8	82:44	6	ffserver_get_arg
arg	82:25	82:28	7	arg
water	82:25	0:0	8	arg
arg	82:30	82:41	7	sizeof(arg)
op	82:30	0:0	8	sizeof
water	82:36	0:0	8	(
water	82:37	0:0	8	arg
water	82:40	0:0	8	)
arg	82:43	82:44	7	p
water	82:43	0:0	8	p
water	82:45	0:0	6	;
water	83:8	0:0	6	stream
op	83:14	0:0	6	->
water	83:16	0:0	6	ifmt
op	83:21	0:0	6	=
call	83:23	83:47	6	av_find_input_format
arg	83:44	83:47	7	arg
water	83:44	0:0	8	arg
water	83:48	0:0	6	;
if	84:8	85:54	6	(! stream -> ifmt)
cond	84:12	84:21	7	! stream -> ifmt
op	84:12	0:0	8	!
water	84:13	0:0	8	stream
op	84:19	0:0	8	->
water	84:21	0:0	8	ifmt
stmts	85:12	85:54	7	
call	85:12	85:53	8	ERROR
arg	85:18	85:48	9	"Unknown input format: '%s'\n"
water	85:18	0:0	10	"Unknown input format: '%s'\n"
arg	85:50	85:53	9	arg
water	85:50	0:0	10	arg
water	85:54	0:0	8	;
water	86:4	0:0	6	}
else	86:6	92:4	2
stmts	86:11	92:4	3	
if	86:11	92:4	4	(!av_strcasecmp (cmd ,"FaviconURL" ))
cond	86:15	86:47	5	!av_strcasecmp (cmd ,"FaviconURL" )
op	86:15	0:0	6	!
call	86:16	86:47	6	av_strcasecmp
arg	86:30	86:33	7	cmd
water	86:30	0:0	8	cmd
arg	86:35	86:47	7	"FaviconURL"
water	86:35	0:0	8	"FaviconURL"
stmts	86:50	92:4	5	
water	86:50	0:0	6	{
if	87:8	89:53	6	(stream -> stream_type == STREAM_TYPE_STATUS)
cond	87:12	87:35	7	stream -> stream_type == STREAM_TYPE_STATUS
water	87:12	0:0	8	stream
op	87:18	0:0	8	->
water	87:20	0:0	8	stream_type
op	87:32	0:0	8	==
water	87:35	0:0	8	STREAM_TYPE_STATUS
stmts	88:12	89:53	7	
call	88:12	89:52	8	ffserver_get_arg
arg	88:29	88:50	9	stream->feed_filename
water	88:29	0:0	10	stream
op	88:35	0:0	10	->
water	88:37	0:0	10	feed_filename
arg	89:20	89:49	9	sizeof(stream->feed_filename)
op	89:20	0:0	10	sizeof
water	89:26	0:0	10	(
water	89:27	0:0	10	stream
op	89:33	0:0	10	->
water	89:35	0:0	10	feed_filename
water	89:48	0:0	10	)
arg	89:51	89:52	9	p
water	89:51	0:0	10	p
water	89:53	0:0	8	;
else	90:8	91:67	6
stmts	91:12	91:67	7	
call	91:12	91:66	8	ERROR
arg	91:18	91:66	9	"FaviconURL only permitted for status streams\n"
water	91:18	0:0	10	"FaviconURL only permitted for status streams\n"
water	91:67	0:0	8	;
water	92:4	0:0	6	}
else	92:6	106:4	2
stmts	92:11	106:4	3	
if	92:11	106:4	4	(!av_strcasecmp (cmd ,"Author" ) || !av_strcasecmp (cmd ,"Comment" ) || !av_strcasecmp (cmd ,"Copyright" ) || !av_strcasecmp (cmd ,"Title" ))
cond	92:15	95:42	5	!av_strcasecmp (cmd ,"Author" ) || !av_strcasecmp (cmd ,"Comment" ) || !av_strcasecmp (cmd ,"Copyright" ) || !av_strcasecmp (cmd ,"Title" )
op	92:15	0:0	6	!
call	92:16	92:43	6	av_strcasecmp
arg	92:30	92:33	7	cmd
water	92:30	0:0	8	cmd
arg	92:35	92:43	7	"Author"
water	92:35	0:0	8	"Author"
op	92:48	0:0	6	||
op	93:15	0:0	6	!
call	93:16	93:44	6	av_strcasecmp
arg	93:30	93:33	7	cmd
water	93:30	0:0	8	cmd
arg	93:35	93:44	7	"Comment"
water	93:35	0:0	8	"Comment"
op	93:48	0:0	6	||
op	94:15	0:0	6	!
call	94:16	94:46	6	av_strcasecmp
arg	94:30	94:33	7	cmd
water	94:30	0:0	8	cmd
arg	94:35	94:46	7	"Copyright"
water	94:35	0:0	8	"Copyright"
op	94:48	0:0	6	||
op	95:15	0:0	6	!
call	95:16	95:42	6	av_strcasecmp
arg	95:30	95:33	7	cmd
water	95:30	0:0	8	cmd
arg	95:35	95:42	7	"Title"
water	95:35	0:0	8	"Title"
stmts	95:45	106:4	5	
water	95:45	0:0	6	{
decl	96:8	96:20	6	char	key[32]
decl	97:8	97:13	6	int	i
call	98:8	98:44	6	ffserver_get_arg
arg	98:25	98:28	7	arg
water	98:25	0:0	8	arg
arg	98:30	98:41	7	sizeof(arg)
op	98:30	0:0	8	sizeof
water	98:36	0:0	8	(
water	98:37	0:0	8	arg
water	98:40	0:0	8	)
arg	98:43	98:44	7	p
water	98:43	0:0	8	p
water	98:45	0:0	6	;
for	99:8	100:39	6	(i = 0 ;i <strlen (cmd );i ++)
forinit	99:13	99:18	7	i = 0 ;
water	99:13	0:0	8	i
op	99:15	0:0	8	=
water	99:17	0:0	8	0
water	99:18	0:0	8	;
cond	99:20	99:34	7	i <strlen (cmd )
water	99:20	0:0	8	i
op	99:22	0:0	8	<
call	99:24	99:34	8	strlen
arg	99:31	99:34	9	cmd
water	99:31	0:0	10	cmd
forexpr	99:37	99:38	7	i ++
water	99:37	0:0	8	i
op	99:38	0:0	8	++
stmts	100:12	100:39	7	
water	100:12	0:0	8	key
op	100:15	0:0	8	[
water	100:16	0:0	8	i
op	100:17	0:0	8	]
op	100:19	0:0	8	=
call	100:21	100:38	8	av_tolower
arg	100:32	100:38	9	cmd[i]
water	100:32	0:0	10	cmd
op	100:35	0:0	10	[
water	100:36	0:0	10	i
op	100:37	0:0	10	]
water	100:39	0:0	8	;
water	101:8	0:0	6	key
op	101:11	0:0	6	[
water	101:12	0:0	6	i
op	101:13	0:0	6	]
op	101:15	0:0	6	=
water	101:17	0:0	6	0
water	101:18	0:0	6	;
call	102:8	103:58	6	WARNING
arg	102:16	103:48	7	"Deprecated '%s' option in configuration file. Use ""'Metadata %s VALUE' instead.\n"
water	102:16	0:0	8	"Deprecated '%s' option in configuration file. Use "
water	103:16	0:0	8	"'Metadata %s VALUE' instead.\n"
arg	103:50	103:53	7	cmd
water	103:50	0:0	8	cmd
arg	103:55	103:58	7	key
water	103:55	0:0	8	key
water	103:59	0:0	6	;
if	104:8	105:22	6	(av_dict_set (& stream -> metadata ,key ,arg ,0 ) < 0)
cond	104:12	104:58	7	av_dict_set (& stream -> metadata ,key ,arg ,0 ) < 0
call	104:12	104:54	8	av_dict_set
arg	104:24	104:41	9	&stream->metadata
op	104:24	0:0	10	&
water	104:25	0:0	10	stream
op	104:31	0:0	10	->
water	104:33	0:0	10	metadata
arg	104:43	104:46	9	key
water	104:43	0:0	10	key
arg	104:48	104:51	9	arg
water	104:48	0:0	10	arg
arg	104:53	104:54	9	0
water	104:53	0:0	10	0
op	104:56	0:0	8	<
water	104:58	0:0	8	0
stmts	105:12	105:22	7	
goto	105:12	105:22	8	nomem
water	105:17	0:0	9	nomem
water	106:4	0:0	6	}
else	106:6	111:4	2
stmts	106:11	111:4	3	
if	106:11	111:4	4	(!av_strcasecmp (cmd ,"Metadata" ))
cond	106:15	106:45	5	!av_strcasecmp (cmd ,"Metadata" )
op	106:15	0:0	6	!
call	106:16	106:45	6	av_strcasecmp
arg	106:30	106:33	7	cmd
water	106:30	0:0	8	cmd
arg	106:35	106:45	7	"Metadata"
water	106:35	0:0	8	"Metadata"
stmts	106:48	111:4	5	
water	106:48	0:0	6	{
call	107:8	107:44	6	ffserver_get_arg
arg	107:25	107:28	7	arg
water	107:25	0:0	8	arg
arg	107:30	107:41	7	sizeof(arg)
op	107:30	0:0	8	sizeof
water	107:36	0:0	8	(
water	107:37	0:0	8	arg
water	107:40	0:0	8	)
arg	107:43	107:44	7	p
water	107:43	0:0	8	p
water	107:45	0:0	6	;
call	108:8	108:46	6	ffserver_get_arg
arg	108:25	108:29	7	arg2
water	108:25	0:0	8	arg2
arg	108:31	108:43	7	sizeof(arg2)
op	108:31	0:0	8	sizeof
water	108:37	0:0	8	(
water	108:38	0:0	8	arg2
water	108:42	0:0	8	)
arg	108:45	108:46	7	p
water	108:45	0:0	8	p
water	108:47	0:0	6	;
if	109:8	110:22	6	(av_dict_set (& stream -> metadata ,arg ,arg2 ,0 ) < 0)
cond	109:12	109:59	7	av_dict_set (& stream -> metadata ,arg ,arg2 ,0 ) < 0
call	109:12	109:55	8	av_dict_set
arg	109:24	109:41	9	&stream->metadata
op	109:24	0:0	10	&
water	109:25	0:0	10	stream
op	109:31	0:0	10	->
water	109:33	0:0	10	metadata
arg	109:43	109:46	9	arg
water	109:43	0:0	10	arg
arg	109:48	109:52	9	arg2
water	109:48	0:0	10	arg2
arg	109:54	109:55	9	0
water	109:54	0:0	10	0
op	109:57	0:0	8	<
water	109:59	0:0	8	0
stmts	110:12	110:22	7	
goto	110:12	110:22	8	nomem
water	110:17	0:0	9	nomem
water	111:4	0:0	6	}
else	111:6	114:4	2
stmts	111:11	114:4	3	
if	111:11	114:4	4	(!av_strcasecmp (cmd ,"Preroll" ))
cond	111:15	111:44	5	!av_strcasecmp (cmd ,"Preroll" )
op	111:15	0:0	6	!
call	111:16	111:44	6	av_strcasecmp
arg	111:30	111:33	7	cmd
water	111:30	0:0	8	cmd
arg	111:35	111:44	7	"Preroll"
water	111:35	0:0	8	"Preroll"
stmts	111:47	114:4	5	
water	111:47	0:0	6	{
call	112:8	112:44	6	ffserver_get_arg
arg	112:25	112:28	7	arg
water	112:25	0:0	8	arg
arg	112:30	112:41	7	sizeof(arg)
op	112:30	0:0	8	sizeof
water	112:36	0:0	8	(
water	112:37	0:0	8	arg
water	112:40	0:0	8	)
arg	112:43	112:44	7	p
water	112:43	0:0	8	p
water	112:45	0:0	6	;
water	113:8	0:0	6	stream
op	113:14	0:0	6	->
water	113:16	0:0	6	prebuffer
op	113:26	0:0	6	=
call	113:28	113:36	6	atof
arg	113:33	113:36	7	arg
water	113:33	0:0	8	arg
op	113:38	0:0	6	*
water	113:40	0:0	6	1000
water	113:44	0:0	6	;
water	114:4	0:0	6	}
else	114:6	116:4	2
stmts	114:11	116:4	3	
if	114:11	116:4	4	(!av_strcasecmp (cmd ,"StartSendOnKey" ))
cond	114:15	114:51	5	!av_strcasecmp (cmd ,"StartSendOnKey" )
op	114:15	0:0	6	!
call	114:16	114:51	6	av_strcasecmp
arg	114:30	114:33	7	cmd
water	114:30	0:0	8	cmd
arg	114:35	114:51	7	"StartSendOnKey"
water	114:35	0:0	8	"StartSendOnKey"
stmts	114:54	116:4	5	
water	114:54	0:0	6	{
water	115:8	0:0	6	stream
op	115:14	0:0	6	->
water	115:16	0:0	6	send_on_key
op	115:28	0:0	6	=
water	115:30	0:0	6	1
water	115:31	0:0	6	;
water	116:4	0:0	6	}
else	116:6	119:4	2
stmts	116:11	119:4	3	
if	116:11	119:4	4	(!av_strcasecmp (cmd ,"AudioCodec" ))
cond	116:15	116:47	5	!av_strcasecmp (cmd ,"AudioCodec" )
op	116:15	0:0	6	!
call	116:16	116:47	6	av_strcasecmp
arg	116:30	116:33	7	cmd
water	116:30	0:0	8	cmd
arg	116:35	116:47	7	"AudioCodec"
water	116:35	0:0	8	"AudioCodec"
stmts	116:50	119:4	5	
water	116:50	0:0	6	{
call	117:8	117:44	6	ffserver_get_arg
arg	117:25	117:28	7	arg
water	117:25	0:0	8	arg
arg	117:30	117:41	7	sizeof(arg)
op	117:30	0:0	8	sizeof
water	117:36	0:0	8	(
water	117:37	0:0	8	arg
water	117:40	0:0	8	)
arg	117:43	117:44	7	p
water	117:43	0:0	8	p
water	117:45	0:0	6	;
call	118:8	118:58	6	ffserver_set_codec
arg	118:27	118:45	7	config->dummy_actx
water	118:27	0:0	8	config
op	118:33	0:0	8	->
water	118:35	0:0	8	dummy_actx
arg	118:47	118:50	7	arg
water	118:47	0:0	8	arg
arg	118:52	118:58	7	config
water	118:52	0:0	8	config
water	118:59	0:0	6	;
water	119:4	0:0	6	}
else	119:6	122:4	2
stmts	119:11	122:4	3	
if	119:11	122:4	4	(!av_strcasecmp (cmd ,"VideoCodec" ))
cond	119:15	119:47	5	!av_strcasecmp (cmd ,"VideoCodec" )
op	119:15	0:0	6	!
call	119:16	119:47	6	av_strcasecmp
arg	119:30	119:33	7	cmd
water	119:30	0:0	8	cmd
arg	119:35	119:47	7	"VideoCodec"
water	119:35	0:0	8	"VideoCodec"
stmts	119:50	122:4	5	
water	119:50	0:0	6	{
call	120:8	120:44	6	ffserver_get_arg
arg	120:25	120:28	7	arg
water	120:25	0:0	8	arg
arg	120:30	120:41	7	sizeof(arg)
op	120:30	0:0	8	sizeof
water	120:36	0:0	8	(
water	120:37	0:0	8	arg
water	120:40	0:0	8	)
arg	120:43	120:44	7	p
water	120:43	0:0	8	p
water	120:45	0:0	6	;
call	121:8	121:58	6	ffserver_set_codec
arg	121:27	121:45	7	config->dummy_vctx
water	121:27	0:0	8	config
op	121:33	0:0	8	->
water	121:35	0:0	8	dummy_vctx
arg	121:47	121:50	7	arg
water	121:47	0:0	8	arg
arg	121:52	121:58	7	config
water	121:52	0:0	8	config
water	121:59	0:0	6	;
water	122:4	0:0	6	}
else	122:6	125:4	2
stmts	122:11	125:4	3	
if	122:11	125:4	4	(!av_strcasecmp (cmd ,"MaxTime" ))
cond	122:15	122:44	5	!av_strcasecmp (cmd ,"MaxTime" )
op	122:15	0:0	6	!
call	122:16	122:44	6	av_strcasecmp
arg	122:30	122:33	7	cmd
water	122:30	0:0	8	cmd
arg	122:35	122:44	7	"MaxTime"
water	122:35	0:0	8	"MaxTime"
stmts	122:47	125:4	5	
water	122:47	0:0	6	{
call	123:8	123:44	6	ffserver_get_arg
arg	123:25	123:28	7	arg
water	123:25	0:0	8	arg
arg	123:30	123:41	7	sizeof(arg)
op	123:30	0:0	8	sizeof
water	123:36	0:0	8	(
water	123:37	0:0	8	arg
water	123:40	0:0	8	)
arg	123:43	123:44	7	p
water	123:43	0:0	8	p
water	123:45	0:0	6	;
water	124:8	0:0	6	stream
op	124:14	0:0	6	->
water	124:16	0:0	6	max_time
op	124:25	0:0	6	=
call	124:27	124:35	6	atof
arg	124:32	124:35	7	arg
water	124:32	0:0	8	arg
op	124:37	0:0	6	*
water	124:39	0:0	6	1000
water	124:43	0:0	6	;
water	125:4	0:0	6	}
else	125:6	133:4	2
stmts	125:11	133:4	3	
if	125:11	133:4	4	(!av_strcasecmp (cmd ,"AudioBitRate" ))
cond	125:15	125:49	5	!av_strcasecmp (cmd ,"AudioBitRate" )
op	125:15	0:0	6	!
call	125:16	125:49	6	av_strcasecmp
arg	125:30	125:33	7	cmd
water	125:30	0:0	8	cmd
arg	125:35	125:49	7	"AudioBitRate"
water	125:35	0:0	8	"AudioBitRate"
stmts	125:52	133:4	5	
water	125:52	0:0	6	{
decl	126:8	126:15	6	float	f
call	127:8	127:44	6	ffserver_get_arg
arg	127:25	127:28	7	arg
water	127:25	0:0	8	arg
arg	127:30	127:41	7	sizeof(arg)
op	127:30	0:0	8	sizeof
water	127:36	0:0	8	(
water	127:37	0:0	8	arg
water	127:40	0:0	8	)
arg	127:43	127:44	7	p
water	127:43	0:0	8	p
water	127:45	0:0	6	;
call	128:8	129:46	6	ffserver_set_float_param
arg	128:33	128:35	7	&f
op	128:33	0:0	8	&
water	128:34	0:0	8	f
arg	128:37	128:40	7	arg
water	128:37	0:0	8	arg
arg	128:42	128:46	7	1000
water	128:42	0:0	8	1000
arg	128:48	128:56	7	-FLT_MAX
op	128:48	0:0	8	-
water	128:49	0:0	8	FLT_MAX
arg	128:58	128:65	7	FLT_MAX
water	128:58	0:0	8	FLT_MAX
arg	128:67	128:73	7	config
water	128:67	0:0	8	config
arg	129:16	129:36	7	"Invalid %s: '%s'\n"
water	129:16	0:0	8	"Invalid %s: '%s'\n"
arg	129:38	129:41	7	cmd
water	129:38	0:0	8	cmd
arg	129:43	129:46	7	arg
water	129:43	0:0	8	arg
water	129:47	0:0	6	;
if	130:8	132:22	6	(ffserver_save_avoption_int ("b" ,( int64_t )lrintf (f ) ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0)
cond	130:12	131:74	7	ffserver_save_avoption_int ("b" ,( int64_t )lrintf (f ) ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0
call	130:12	131:70	8	ffserver_save_avoption_int
arg	130:39	130:42	9	"b"
water	130:39	0:0	10	"b"
arg	130:44	130:62	9	(int64_t)lrintf(f)
water	130:44	0:0	10	(
water	130:45	0:0	10	int64_t
water	130:52	0:0	10	)
call	130:53	130:61	10	lrintf
arg	130:60	130:61	11	f
water	130:60	0:0	12	f
arg	131:39	131:62	9	AV_OPT_FLAG_AUDIO_PARAM
water	131:39	0:0	10	AV_OPT_FLAG_AUDIO_PARAM
arg	131:64	131:70	9	config
water	131:64	0:0	10	config
op	131:72	0:0	8	<
water	131:74	0:0	8	0
stmts	132:12	132:22	7	
goto	132:12	132:22	8	nomem
water	132:17	0:0	9	nomem
water	133:4	0:0	6	}
else	133:6	137:4	2
stmts	133:11	137:4	3	
if	133:11	137:4	4	(!av_strcasecmp (cmd ,"AudioChannels" ))
cond	133:15	133:50	5	!av_strcasecmp (cmd ,"AudioChannels" )
op	133:15	0:0	6	!
call	133:16	133:50	6	av_strcasecmp
arg	133:30	133:33	7	cmd
water	133:30	0:0	8	cmd
arg	133:35	133:50	7	"AudioChannels"
water	133:35	0:0	8	"AudioChannels"
stmts	133:53	137:4	5	
water	133:53	0:0	6	{
call	134:8	134:44	6	ffserver_get_arg
arg	134:25	134:28	7	arg
water	134:25	0:0	8	arg
arg	134:30	134:41	7	sizeof(arg)
op	134:30	0:0	8	sizeof
water	134:36	0:0	8	(
water	134:37	0:0	8	arg
water	134:40	0:0	8	)
arg	134:43	134:44	7	p
water	134:43	0:0	8	p
water	134:45	0:0	6	;
if	135:8	136:22	6	(ffserver_save_avoption ("ac" ,arg ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0)
cond	135:12	135:81	7	ffserver_save_avoption ("ac" ,arg ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0
call	135:12	135:77	8	ffserver_save_avoption
arg	135:35	135:39	9	"ac"
water	135:35	0:0	10	"ac"
arg	135:41	135:44	9	arg
water	135:41	0:0	10	arg
arg	135:46	135:69	9	AV_OPT_FLAG_AUDIO_PARAM
water	135:46	0:0	10	AV_OPT_FLAG_AUDIO_PARAM
arg	135:71	135:77	9	config
water	135:71	0:0	10	config
op	135:79	0:0	8	<
water	135:81	0:0	8	0
stmts	136:12	136:22	7	
goto	136:12	136:22	8	nomem
water	136:17	0:0	9	nomem
water	137:4	0:0	6	}
else	137:6	141:4	2
stmts	137:11	141:4	3	
if	137:11	141:4	4	(!av_strcasecmp (cmd ,"AudioSampleRate" ))
cond	137:15	137:52	5	!av_strcasecmp (cmd ,"AudioSampleRate" )
op	137:15	0:0	6	!
call	137:16	137:52	6	av_strcasecmp
arg	137:30	137:33	7	cmd
water	137:30	0:0	8	cmd
arg	137:35	137:52	7	"AudioSampleRate"
water	137:35	0:0	8	"AudioSampleRate"
stmts	137:55	141:4	5	
water	137:55	0:0	6	{
call	138:8	138:44	6	ffserver_get_arg
arg	138:25	138:28	7	arg
water	138:25	0:0	8	arg
arg	138:30	138:41	7	sizeof(arg)
op	138:30	0:0	8	sizeof
water	138:36	0:0	8	(
water	138:37	0:0	8	arg
water	138:40	0:0	8	)
arg	138:43	138:44	7	p
water	138:43	0:0	8	p
water	138:45	0:0	6	;
if	139:8	140:22	6	(ffserver_save_avoption ("ar" ,arg ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0)
cond	139:12	139:81	7	ffserver_save_avoption ("ar" ,arg ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0
call	139:12	139:77	8	ffserver_save_avoption
arg	139:35	139:39	9	"ar"
water	139:35	0:0	10	"ar"
arg	139:41	139:44	9	arg
water	139:41	0:0	10	arg
arg	139:46	139:69	9	AV_OPT_FLAG_AUDIO_PARAM
water	139:46	0:0	10	AV_OPT_FLAG_AUDIO_PARAM
arg	139:71	139:77	9	config
water	139:71	0:0	10	config
op	139:79	0:0	8	<
water	139:81	0:0	8	0
stmts	140:12	140:22	7	
goto	140:12	140:22	8	nomem
water	140:17	0:0	9	nomem
water	141:4	0:0	6	}
else	141:6	158:4	2
stmts	141:11	158:4	3	
if	141:11	158:4	4	(!av_strcasecmp (cmd ,"VideoBitRateRange" ))
cond	141:15	141:54	5	!av_strcasecmp (cmd ,"VideoBitRateRange" )
op	141:15	0:0	6	!
call	141:16	141:54	6	av_strcasecmp
arg	141:30	141:33	7	cmd
water	141:30	0:0	8	cmd
arg	141:35	141:54	7	"VideoBitRateRange"
water	141:35	0:0	8	"VideoBitRateRange"
stmts	141:57	158:4	5	
water	141:57	0:0	6	{
decl	142:8	142:28	6	int	minrate
water	142:19	0:0	6	,
decl	142:8	142:28	6	int	maxrate
decl	143:8	143:18	6	char	*dash
call	144:8	144:44	6	ffserver_get_arg
arg	144:25	144:28	7	arg
water	144:25	0:0	8	arg
arg	144:30	144:41	7	sizeof(arg)
op	144:30	0:0	8	sizeof
water	144:36	0:0	8	(
water	144:37	0:0	8	arg
water	144:40	0:0	8	)
arg	144:43	144:44	7	p
water	144:43	0:0	8	p
water	144:45	0:0	6	;
water	145:8	0:0	6	dash
op	145:13	0:0	6	=
call	145:15	145:30	6	strchr
arg	145:22	145:25	7	arg
water	145:22	0:0	8	arg
arg	145:27	145:30	7	'-'
water	145:27	0:0	8	'-'
water	145:31	0:0	6	;
if	146:8	155:8	6	(dash)
cond	146:12	146:12	7	dash
water	146:12	0:0	8	dash
stmts	146:18	155:8	7	
water	146:18	0:0	8	{
op	147:12	0:0	8	*
water	147:13	0:0	8	dash
op	147:18	0:0	8	=
water	147:20	0:0	8	'\0'
water	147:24	0:0	8	;
water	148:12	0:0	8	dash
op	148:16	0:0	8	++
water	148:18	0:0	8	;
if	149:12	154:12	8	(ffserver_set_int_param (& minrate ,arg ,1000 ,0 ,INT_MAX ,config ,"Invalid %s: '%s'" ,cmd ,arg ) >= 0 &&ffserver_set_int_param (& maxrate ,dash ,1000 ,0 ,INT_MAX ,config ,"Invalid %s: '%s'" ,cmd ,arg ) >= 0)
cond	149:16	150:114	9	ffserver_set_int_param (& minrate ,arg ,1000 ,0 ,INT_MAX ,config ,"Invalid %s: '%s'" ,cmd ,arg ) >= 0 &&ffserver_set_int_param (& maxrate ,dash ,1000 ,0 ,INT_MAX ,config ,"Invalid %s: '%s'" ,cmd ,arg ) >= 0
call	149:16	149:109	10	ffserver_set_int_param
arg	149:39	149:47	11	&minrate
op	149:39	0:0	12	&
water	149:40	0:0	12	minrate
arg	149:49	149:52	11	arg
water	149:49	0:0	12	arg
arg	149:55	149:59	11	1000
water	149:55	0:0	12	1000
arg	149:61	149:62	11	0
water	149:61	0:0	12	0
arg	149:64	149:71	11	INT_MAX
water	149:64	0:0	12	INT_MAX
arg	149:73	149:79	11	config
water	149:73	0:0	12	config
arg	149:81	149:99	11	"Invalid %s: '%s'"
water	149:81	0:0	12	"Invalid %s: '%s'"
arg	149:101	149:104	11	cmd
water	149:101	0:0	12	cmd
arg	149:106	149:109	11	arg
water	149:106	0:0	12	arg
op	149:111	0:0	10	>=
water	149:114	0:0	10	0
op	149:116	0:0	10	&&
call	150:16	150:109	10	ffserver_set_int_param
arg	150:39	150:47	11	&maxrate
op	150:39	0:0	12	&
water	150:40	0:0	12	maxrate
arg	150:49	150:53	11	dash
water	150:49	0:0	12	dash
arg	150:55	150:59	11	1000
water	150:55	0:0	12	1000
arg	150:61	150:62	11	0
water	150:61	0:0	12	0
arg	150:64	150:71	11	INT_MAX
water	150:64	0:0	12	INT_MAX
arg	150:73	150:79	11	config
water	150:73	0:0	12	config
arg	150:81	150:99	11	"Invalid %s: '%s'"
water	150:81	0:0	12	"Invalid %s: '%s'"
arg	150:101	150:104	11	cmd
water	150:101	0:0	12	cmd
arg	150:106	150:109	11	arg
water	150:106	0:0	12	arg
op	150:111	0:0	10	>=
water	150:114	0:0	10	0
stmts	150:117	154:12	9	
water	150:117	0:0	10	{
if	151:16	153:26	10	(ffserver_save_avoption_int ("minrate" ,minrate ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0 ||ffserver_save_avoption_int ("maxrate" ,maxrate ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	151:20	152:102	11	ffserver_save_avoption_int ("minrate" ,minrate ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0 ||ffserver_save_avoption_int ("maxrate" ,maxrate ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	151:20	151:98	12	ffserver_save_avoption_int
arg	151:47	151:56	13	"minrate"
water	151:47	0:0	14	"minrate"
arg	151:58	151:65	13	minrate
water	151:58	0:0	14	minrate
arg	151:67	151:90	13	AV_OPT_FLAG_VIDEO_PARAM
water	151:67	0:0	14	AV_OPT_FLAG_VIDEO_PARAM
arg	151:92	151:98	13	config
water	151:92	0:0	14	config
op	151:100	0:0	12	<
water	151:102	0:0	12	0
op	151:104	0:0	12	||
call	152:20	152:98	12	ffserver_save_avoption_int
arg	152:47	152:56	13	"maxrate"
water	152:47	0:0	14	"maxrate"
arg	152:58	152:65	13	maxrate
water	152:58	0:0	14	maxrate
arg	152:67	152:90	13	AV_OPT_FLAG_VIDEO_PARAM
water	152:67	0:0	14	AV_OPT_FLAG_VIDEO_PARAM
arg	152:92	152:98	13	config
water	152:92	0:0	14	config
op	152:100	0:0	12	<
water	152:102	0:0	12	0
stmts	153:16	153:26	11	
goto	153:16	153:26	12	nomem
water	153:21	0:0	13	nomem
water	154:12	0:0	10	}
water	155:8	0:0	8	}
else	155:10	157:46	6
stmts	156:12	157:46	7	
call	156:12	157:45	8	ERROR
arg	156:18	157:40	9	"Incorrect format for VideoBitRateRange. It should be ""<min>-<max>: '%s'.\n"
water	156:18	0:0	10	"Incorrect format for VideoBitRateRange. It should be "
water	157:18	0:0	10	"<min>-<max>: '%s'.\n"
arg	157:42	157:45	9	arg
water	157:42	0:0	10	arg
water	157:46	0:0	8	;
water	158:4	0:0	6	}
else	158:6	163:4	2
stmts	158:11	163:4	3	
if	158:11	163:4	4	(!av_strcasecmp (cmd ,"Debug" ))
cond	158:15	158:42	5	!av_strcasecmp (cmd ,"Debug" )
op	158:15	0:0	6	!
call	158:16	158:42	6	av_strcasecmp
arg	158:30	158:33	7	cmd
water	158:30	0:0	8	cmd
arg	158:35	158:42	7	"Debug"
water	158:35	0:0	8	"Debug"
stmts	158:45	163:4	5	
water	158:45	0:0	6	{
call	159:8	159:44	6	ffserver_get_arg
arg	159:25	159:28	7	arg
water	159:25	0:0	8	arg
arg	159:30	159:41	7	sizeof(arg)
op	159:30	0:0	8	sizeof
water	159:36	0:0	8	(
water	159:37	0:0	8	arg
water	159:40	0:0	8	)
arg	159:43	159:44	7	p
water	159:43	0:0	8	p
water	159:45	0:0	6	;
if	160:8	162:22	6	(ffserver_save_avoption ("debug" ,arg ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0 ||ffserver_save_avoption ("debug" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	160:12	161:84	7	ffserver_save_avoption ("debug" ,arg ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0 ||ffserver_save_avoption ("debug" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	160:12	160:80	8	ffserver_save_avoption
arg	160:35	160:42	9	"debug"
water	160:35	0:0	10	"debug"
arg	160:44	160:47	9	arg
water	160:44	0:0	10	arg
arg	160:49	160:72	9	AV_OPT_FLAG_AUDIO_PARAM
water	160:49	0:0	10	AV_OPT_FLAG_AUDIO_PARAM
arg	160:74	160:80	9	config
water	160:74	0:0	10	config
op	160:82	0:0	8	<
water	160:84	0:0	8	0
op	160:86	0:0	8	||
call	161:12	161:80	8	ffserver_save_avoption
arg	161:35	161:42	9	"debug"
water	161:35	0:0	10	"debug"
arg	161:44	161:47	9	arg
water	161:44	0:0	10	arg
arg	161:49	161:72	9	AV_OPT_FLAG_VIDEO_PARAM
water	161:49	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	161:74	161:80	9	config
water	161:74	0:0	10	config
op	161:82	0:0	8	<
water	161:84	0:0	8	0
stmts	162:12	162:22	7	
goto	162:12	162:22	8	nomem
water	162:17	0:0	9	nomem
water	163:4	0:0	6	}
else	163:6	168:4	2
stmts	163:11	168:4	3	
if	163:11	168:4	4	(!av_strcasecmp (cmd ,"Strict" ))
cond	163:15	163:43	5	!av_strcasecmp (cmd ,"Strict" )
op	163:15	0:0	6	!
call	163:16	163:43	6	av_strcasecmp
arg	163:30	163:33	7	cmd
water	163:30	0:0	8	cmd
arg	163:35	163:43	7	"Strict"
water	163:35	0:0	8	"Strict"
stmts	163:46	168:4	5	
water	163:46	0:0	6	{
call	164:8	164:44	6	ffserver_get_arg
arg	164:25	164:28	7	arg
water	164:25	0:0	8	arg
arg	164:30	164:41	7	sizeof(arg)
op	164:30	0:0	8	sizeof
water	164:36	0:0	8	(
water	164:37	0:0	8	arg
water	164:40	0:0	8	)
arg	164:43	164:44	7	p
water	164:43	0:0	8	p
water	164:45	0:0	6	;
if	165:8	167:22	6	(ffserver_save_avoption ("strict" ,arg ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0 ||ffserver_save_avoption ("strict" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	165:12	166:85	7	ffserver_save_avoption ("strict" ,arg ,AV_OPT_FLAG_AUDIO_PARAM ,config ) < 0 ||ffserver_save_avoption ("strict" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	165:12	165:81	8	ffserver_save_avoption
arg	165:35	165:43	9	"strict"
water	165:35	0:0	10	"strict"
arg	165:45	165:48	9	arg
water	165:45	0:0	10	arg
arg	165:50	165:73	9	AV_OPT_FLAG_AUDIO_PARAM
water	165:50	0:0	10	AV_OPT_FLAG_AUDIO_PARAM
arg	165:75	165:81	9	config
water	165:75	0:0	10	config
op	165:83	0:0	8	<
water	165:85	0:0	8	0
op	165:87	0:0	8	||
call	166:12	166:81	8	ffserver_save_avoption
arg	166:35	166:43	9	"strict"
water	166:35	0:0	10	"strict"
arg	166:45	166:48	9	arg
water	166:45	0:0	10	arg
arg	166:50	166:73	9	AV_OPT_FLAG_VIDEO_PARAM
water	166:50	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	166:75	166:81	9	config
water	166:75	0:0	10	config
op	166:83	0:0	8	<
water	166:85	0:0	8	0
stmts	167:12	167:22	7	
goto	167:12	167:22	8	nomem
water	167:17	0:0	9	nomem
water	168:4	0:0	6	}
else	168:6	174:4	2
stmts	168:11	174:4	3	
if	168:11	174:4	4	(!av_strcasecmp (cmd ,"VideoBufferSize" ))
cond	168:15	168:52	5	!av_strcasecmp (cmd ,"VideoBufferSize" )
op	168:15	0:0	6	!
call	168:16	168:52	6	av_strcasecmp
arg	168:30	168:33	7	cmd
water	168:30	0:0	8	cmd
arg	168:35	168:52	7	"VideoBufferSize"
water	168:35	0:0	8	"VideoBufferSize"
stmts	168:55	174:4	5	
water	168:55	0:0	6	{
call	169:8	169:44	6	ffserver_get_arg
arg	169:25	169:28	7	arg
water	169:25	0:0	8	arg
arg	169:30	169:41	7	sizeof(arg)
op	169:30	0:0	8	sizeof
water	169:36	0:0	8	(
water	169:37	0:0	8	arg
water	169:40	0:0	8	)
arg	169:43	169:44	7	p
water	169:43	0:0	8	p
water	169:45	0:0	6	;
call	170:8	171:44	6	ffserver_set_int_param
arg	170:31	170:35	7	&val
op	170:31	0:0	8	&
water	170:32	0:0	8	val
arg	170:37	170:40	7	arg
water	170:37	0:0	8	arg
arg	170:42	170:48	7	8*1024
water	170:42	0:0	8	8
op	170:43	0:0	8	*
water	170:44	0:0	8	1024
arg	170:50	170:51	7	0
water	170:50	0:0	8	0
arg	170:53	170:60	7	INT_MAX
water	170:53	0:0	8	INT_MAX
arg	170:62	170:68	7	config
water	170:62	0:0	8	config
arg	171:16	171:34	7	"Invalid %s: '%s'"
water	171:16	0:0	8	"Invalid %s: '%s'"
arg	171:36	171:39	7	cmd
water	171:36	0:0	8	cmd
arg	171:41	171:44	7	arg
water	171:41	0:0	8	arg
water	171:45	0:0	6	;
if	172:8	173:22	6	(ffserver_save_avoption_int ("bufsize" ,val ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	172:12	172:90	7	ffserver_save_avoption_int ("bufsize" ,val ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	172:12	172:86	8	ffserver_save_avoption_int
arg	172:39	172:48	9	"bufsize"
water	172:39	0:0	10	"bufsize"
arg	172:50	172:53	9	val
water	172:50	0:0	10	val
arg	172:55	172:78	9	AV_OPT_FLAG_VIDEO_PARAM
water	172:55	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	172:80	172:86	9	config
water	172:80	0:0	10	config
op	172:88	0:0	8	<
water	172:90	0:0	8	0
stmts	173:12	173:22	7	
goto	173:12	173:22	8	nomem
water	173:17	0:0	9	nomem
water	174:4	0:0	6	}
else	174:6	180:4	2
stmts	174:11	180:4	3	
if	174:11	180:4	4	(!av_strcasecmp (cmd ,"VideoBitRateTolerance" ))
cond	174:15	174:58	5	!av_strcasecmp (cmd ,"VideoBitRateTolerance" )
op	174:15	0:0	6	!
call	174:16	174:58	6	av_strcasecmp
arg	174:30	174:33	7	cmd
water	174:30	0:0	8	cmd
arg	174:35	174:58	7	"VideoBitRateTolerance"
water	174:35	0:0	8	"VideoBitRateTolerance"
stmts	174:61	180:4	5	
water	174:61	0:0	6	{
call	175:8	175:44	6	ffserver_get_arg
arg	175:25	175:28	7	arg
water	175:25	0:0	8	arg
arg	175:30	175:41	7	sizeof(arg)
op	175:30	0:0	8	sizeof
water	175:36	0:0	8	(
water	175:37	0:0	8	arg
water	175:40	0:0	8	)
arg	175:43	175:44	7	p
water	175:43	0:0	8	p
water	175:45	0:0	6	;
call	176:8	177:59	6	ffserver_set_int_param
arg	176:31	176:35	7	&val
op	176:31	0:0	8	&
water	176:32	0:0	8	val
arg	176:37	176:40	7	arg
water	176:37	0:0	8	arg
arg	176:42	176:46	7	1000
water	176:42	0:0	8	1000
arg	176:48	176:55	7	INT_MIN
water	176:48	0:0	8	INT_MIN
arg	176:57	176:64	7	INT_MAX
water	176:57	0:0	8	INT_MAX
arg	176:66	176:72	7	config
water	176:66	0:0	8	config
arg	177:31	177:49	7	"Invalid %s: '%s'"
water	177:31	0:0	8	"Invalid %s: '%s'"
arg	177:51	177:54	7	cmd
water	177:51	0:0	8	cmd
arg	177:56	177:59	7	arg
water	177:56	0:0	8	arg
water	177:60	0:0	6	;
if	178:8	179:22	6	(ffserver_save_avoption_int ("bt" ,val ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	178:12	178:85	7	ffserver_save_avoption_int ("bt" ,val ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	178:12	178:81	8	ffserver_save_avoption_int
arg	178:39	178:43	9	"bt"
water	178:39	0:0	10	"bt"
arg	178:45	178:48	9	val
water	178:45	0:0	10	val
arg	178:50	178:73	9	AV_OPT_FLAG_VIDEO_PARAM
water	178:50	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	178:75	178:81	9	config
water	178:75	0:0	10	config
op	178:83	0:0	8	<
water	178:85	0:0	8	0
stmts	179:12	179:22	7	
goto	179:12	179:22	8	nomem
water	179:17	0:0	9	nomem
water	180:4	0:0	6	}
else	180:6	186:4	2
stmts	180:11	186:4	3	
if	180:11	186:4	4	(!av_strcasecmp (cmd ,"VideoBitRate" ))
cond	180:15	180:49	5	!av_strcasecmp (cmd ,"VideoBitRate" )
op	180:15	0:0	6	!
call	180:16	180:49	6	av_strcasecmp
arg	180:30	180:33	7	cmd
water	180:30	0:0	8	cmd
arg	180:35	180:49	7	"VideoBitRate"
water	180:35	0:0	8	"VideoBitRate"
stmts	180:52	186:4	5	
water	180:52	0:0	6	{
call	181:8	181:44	6	ffserver_get_arg
arg	181:25	181:28	7	arg
water	181:25	0:0	8	arg
arg	181:30	181:41	7	sizeof(arg)
op	181:30	0:0	8	sizeof
water	181:36	0:0	8	(
water	181:37	0:0	8	arg
water	181:40	0:0	8	)
arg	181:43	181:44	7	p
water	181:43	0:0	8	p
water	181:45	0:0	6	;
call	182:8	183:59	6	ffserver_set_int_param
arg	182:31	182:35	7	&val
op	182:31	0:0	8	&
water	182:32	0:0	8	val
arg	182:37	182:40	7	arg
water	182:37	0:0	8	arg
arg	182:42	182:46	7	1000
water	182:42	0:0	8	1000
arg	182:48	182:55	7	INT_MIN
water	182:48	0:0	8	INT_MIN
arg	182:57	182:64	7	INT_MAX
water	182:57	0:0	8	INT_MAX
arg	182:66	182:72	7	config
water	182:66	0:0	8	config
arg	183:31	183:49	7	"Invalid %s: '%s'"
water	183:31	0:0	8	"Invalid %s: '%s'"
arg	183:51	183:54	7	cmd
water	183:51	0:0	8	cmd
arg	183:56	183:59	7	arg
water	183:56	0:0	8	arg
water	183:60	0:0	6	;
if	184:8	185:21	6	(ffserver_save_avoption_int ("b" ,val ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	184:12	184:84	7	ffserver_save_avoption_int ("b" ,val ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	184:12	184:80	8	ffserver_save_avoption_int
arg	184:39	184:42	9	"b"
water	184:39	0:0	10	"b"
arg	184:44	184:47	9	val
water	184:44	0:0	10	val
arg	184:49	184:72	9	AV_OPT_FLAG_VIDEO_PARAM
water	184:49	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	184:74	184:80	9	config
water	184:74	0:0	10	config
op	184:82	0:0	8	<
water	184:84	0:0	8	0
stmts	185:11	185:21	7	
goto	185:11	185:21	8	nomem
water	185:16	0:0	9	nomem
water	186:4	0:0	6	}
else	186:6	198:4	2
stmts	186:11	198:4	3	
if	186:11	198:4	4	(!av_strcasecmp (cmd ,"VideoSize" ))
cond	186:15	186:46	5	!av_strcasecmp (cmd ,"VideoSize" )
op	186:15	0:0	6	!
call	186:16	186:46	6	av_strcasecmp
arg	186:30	186:33	7	cmd
water	186:30	0:0	8	cmd
arg	186:35	186:46	7	"VideoSize"
water	186:35	0:0	8	"VideoSize"
stmts	186:49	198:4	5	
water	186:49	0:0	6	{
decl	187:8	187:21	6	int	ret
water	187:15	0:0	6	,
decl	187:8	187:21	6	int	w
water	187:18	0:0	6	,
decl	187:8	187:21	6	int	h
call	188:8	188:44	6	ffserver_get_arg
arg	188:25	188:28	7	arg
water	188:25	0:0	8	arg
arg	188:30	188:41	7	sizeof(arg)
op	188:30	0:0	8	sizeof
water	188:36	0:0	8	(
water	188:37	0:0	8	arg
water	188:40	0:0	8	)
arg	188:43	188:44	7	p
water	188:43	0:0	8	p
water	188:45	0:0	6	;
water	189:8	0:0	6	ret
op	189:12	0:0	6	=
call	189:14	189:45	6	av_parse_video_size
arg	189:34	189:36	7	&w
op	189:34	0:0	8	&
water	189:35	0:0	8	w
arg	189:38	189:40	7	&h
op	189:38	0:0	8	&
water	189:39	0:0	8	h
arg	189:42	189:45	7	arg
water	189:42	0:0	8	arg
water	189:46	0:0	6	;
if	190:8	191:51	6	(ret < 0)
cond	190:12	190:18	7	ret < 0
water	190:12	0:0	8	ret
op	190:16	0:0	8	<
water	190:18	0:0	8	0
stmts	191:12	191:51	7	
call	191:12	191:50	8	ERROR
arg	191:18	191:45	9	"Invalid video size '%s'\n"
water	191:18	0:0	10	"Invalid video size '%s'\n"
arg	191:47	191:50	9	arg
water	191:47	0:0	10	arg
water	191:51	0:0	8	;
else	192:8	197:8	6
stmts	192:13	197:8	7	
water	192:13	0:0	8	{
if	193:12	194:62	8	(w % 2 || h % 2)
cond	193:16	193:29	9	w % 2 || h % 2
water	193:16	0:0	10	w
op	193:18	0:0	10	%
water	193:20	0:0	10	2
op	193:22	0:0	10	||
water	193:25	0:0	10	h
op	193:27	0:0	10	%
water	193:29	0:0	10	2
stmts	194:16	194:62	9	
call	194:16	194:61	10	WARNING
arg	194:24	194:61	11	"Image size is not a multiple of 2\n"
water	194:24	0:0	12	"Image size is not a multiple of 2\n"
water	194:62	0:0	10	;
if	195:12	196:26	8	(ffserver_save_avoption ("video_size" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	195:16	195:93	9	ffserver_save_avoption ("video_size" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	195:16	195:89	10	ffserver_save_avoption
arg	195:39	195:51	11	"video_size"
water	195:39	0:0	12	"video_size"
arg	195:53	195:56	11	arg
water	195:53	0:0	12	arg
arg	195:58	195:81	11	AV_OPT_FLAG_VIDEO_PARAM
water	195:58	0:0	12	AV_OPT_FLAG_VIDEO_PARAM
arg	195:83	195:89	11	config
water	195:83	0:0	12	config
op	195:91	0:0	10	<
water	195:93	0:0	10	0
stmts	196:16	196:26	9	
goto	196:16	196:26	10	nomem
water	196:21	0:0	11	nomem
water	197:8	0:0	8	}
water	198:4	0:0	6	}
else	198:6	203:4	2
stmts	198:11	203:4	3	
if	198:11	203:4	4	(!av_strcasecmp (cmd ,"VideoFrameRate" ))
cond	198:15	198:51	5	!av_strcasecmp (cmd ,"VideoFrameRate" )
op	198:15	0:0	6	!
call	198:16	198:51	6	av_strcasecmp
arg	198:30	198:33	7	cmd
water	198:30	0:0	8	cmd
arg	198:35	198:51	7	"VideoFrameRate"
water	198:35	0:0	8	"VideoFrameRate"
stmts	198:54	203:4	5	
water	198:54	0:0	6	{
call	199:8	199:52	6	ffserver_get_arg
arg	199:25	199:32	7	&arg[2]
op	199:25	0:0	8	&
water	199:26	0:0	8	arg
op	199:29	0:0	8	[
water	199:30	0:0	8	2
op	199:31	0:0	8	]
arg	199:34	199:49	7	sizeof(arg)-2
op	199:34	0:0	8	sizeof
water	199:40	0:0	8	(
water	199:41	0:0	8	arg
water	199:44	0:0	8	)
op	199:46	0:0	8	-
water	199:48	0:0	8	2
arg	199:51	199:52	7	p
water	199:51	0:0	8	p
water	199:53	0:0	6	;
water	200:8	0:0	6	arg
op	200:11	0:0	6	[
water	200:12	0:0	6	0
op	200:13	0:0	6	]
op	200:15	0:0	6	=
water	200:17	0:0	6	'1'
water	200:20	0:0	6	;
water	200:22	0:0	6	arg
op	200:25	0:0	6	[
water	200:26	0:0	6	1
op	200:27	0:0	6	]
op	200:29	0:0	6	=
water	200:31	0:0	6	'/'
water	200:34	0:0	6	;
if	201:8	202:22	6	(ffserver_save_avoption ("time_base" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	201:12	201:88	7	ffserver_save_avoption ("time_base" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	201:12	201:84	8	ffserver_save_avoption
arg	201:35	201:46	9	"time_base"
water	201:35	0:0	10	"time_base"
arg	201:48	201:51	9	arg
water	201:48	0:0	10	arg
arg	201:53	201:76	9	AV_OPT_FLAG_VIDEO_PARAM
water	201:53	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	201:78	201:84	9	config
water	201:78	0:0	10	config
op	201:86	0:0	8	<
water	201:88	0:0	8	0
stmts	202:12	202:22	7	
goto	202:12	202:22	8	nomem
water	202:17	0:0	9	nomem
water	203:4	0:0	6	}
else	203:6	211:4	2
stmts	203:11	211:4	3	
if	203:11	211:4	4	(!av_strcasecmp (cmd ,"PixelFormat" ))
cond	203:15	203:48	5	!av_strcasecmp (cmd ,"PixelFormat" )
op	203:15	0:0	6	!
call	203:16	203:48	6	av_strcasecmp
arg	203:30	203:33	7	cmd
water	203:30	0:0	8	cmd
arg	203:35	203:48	7	"PixelFormat"
water	203:35	0:0	8	"PixelFormat"
stmts	203:51	211:4	5	
water	203:51	0:0	6	{
decl	204:8	204:34	6	enum AVPixelFormat	pix_fmt
call	205:8	205:44	6	ffserver_get_arg
arg	205:25	205:28	7	arg
water	205:25	0:0	8	arg
arg	205:30	205:41	7	sizeof(arg)
op	205:30	0:0	8	sizeof
water	205:36	0:0	8	(
water	205:37	0:0	8	arg
water	205:40	0:0	8	)
arg	205:43	205:44	7	p
water	205:43	0:0	8	p
water	205:45	0:0	6	;
water	206:8	0:0	6	pix_fmt
op	206:16	0:0	6	=
call	206:18	206:36	6	av_get_pix_fmt
arg	206:33	206:36	7	arg
water	206:33	0:0	8	arg
water	206:37	0:0	6	;
if	207:8	208:54	6	(pix_fmt == AV_PIX_FMT_NONE)
cond	207:12	207:23	7	pix_fmt == AV_PIX_FMT_NONE
water	207:12	0:0	8	pix_fmt
op	207:20	0:0	8	==
water	207:23	0:0	8	AV_PIX_FMT_NONE
stmts	208:12	208:54	7	
call	208:12	208:53	8	ERROR
arg	208:18	208:48	9	"Unknown pixel format: '%s'\n"
water	208:18	0:0	10	"Unknown pixel format: '%s'\n"
arg	208:50	208:53	9	arg
water	208:50	0:0	10	arg
water	208:54	0:0	8	;
else	209:8	210:22	6
stmts	209:13	210:22	7	
if	209:13	210:22	8	(ffserver_save_avoption ("pixel_format" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	209:17	209:96	9	ffserver_save_avoption ("pixel_format" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	209:17	209:92	10	ffserver_save_avoption
arg	209:40	209:54	11	"pixel_format"
water	209:40	0:0	12	"pixel_format"
arg	209:56	209:59	11	arg
water	209:56	0:0	12	arg
arg	209:61	209:84	11	AV_OPT_FLAG_VIDEO_PARAM
water	209:61	0:0	12	AV_OPT_FLAG_VIDEO_PARAM
arg	209:86	209:92	11	config
water	209:86	0:0	12	config
op	209:94	0:0	10	<
water	209:96	0:0	10	0
stmts	210:12	210:22	9	
goto	210:12	210:22	10	nomem
water	210:17	0:0	11	nomem
water	211:4	0:0	6	}
else	211:6	215:4	2
stmts	211:11	215:4	3	
if	211:11	215:4	4	(!av_strcasecmp (cmd ,"VideoGopSize" ))
cond	211:15	211:49	5	!av_strcasecmp (cmd ,"VideoGopSize" )
op	211:15	0:0	6	!
call	211:16	211:49	6	av_strcasecmp
arg	211:30	211:33	7	cmd
water	211:30	0:0	8	cmd
arg	211:35	211:49	7	"VideoGopSize"
water	211:35	0:0	8	"VideoGopSize"
stmts	211:52	215:4	5	
water	211:52	0:0	6	{
call	212:8	212:44	6	ffserver_get_arg
arg	212:25	212:28	7	arg
water	212:25	0:0	8	arg
arg	212:30	212:41	7	sizeof(arg)
op	212:30	0:0	8	sizeof
water	212:36	0:0	8	(
water	212:37	0:0	8	arg
water	212:40	0:0	8	)
arg	212:43	212:44	7	p
water	212:43	0:0	8	p
water	212:45	0:0	6	;
if	213:8	214:22	6	(ffserver_save_avoption ("g" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	213:12	213:80	7	ffserver_save_avoption ("g" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	213:12	213:76	8	ffserver_save_avoption
arg	213:35	213:38	9	"g"
water	213:35	0:0	10	"g"
arg	213:40	213:43	9	arg
water	213:40	0:0	10	arg
arg	213:45	213:68	9	AV_OPT_FLAG_VIDEO_PARAM
water	213:45	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	213:70	213:76	9	config
water	213:70	0:0	10	config
op	213:78	0:0	8	<
water	213:80	0:0	8	0
stmts	214:12	214:22	7	
goto	214:12	214:22	8	nomem
water	214:17	0:0	9	nomem
water	215:4	0:0	6	}
else	215:6	218:4	2
stmts	215:11	218:4	3	
if	215:11	218:4	4	(!av_strcasecmp (cmd ,"VideoIntraOnly" ))
cond	215:15	215:51	5	!av_strcasecmp (cmd ,"VideoIntraOnly" )
op	215:15	0:0	6	!
call	215:16	215:51	6	av_strcasecmp
arg	215:30	215:33	7	cmd
water	215:30	0:0	8	cmd
arg	215:35	215:51	7	"VideoIntraOnly"
water	215:35	0:0	8	"VideoIntraOnly"
stmts	215:54	218:4	5	
water	215:54	0:0	6	{
if	216:8	217:22	6	(ffserver_save_avoption ("g" ,"1" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	216:12	216:80	7	ffserver_save_avoption ("g" ,"1" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	216:12	216:76	8	ffserver_save_avoption
arg	216:35	216:38	9	"g"
water	216:35	0:0	10	"g"
arg	216:40	216:43	9	"1"
water	216:40	0:0	10	"1"
arg	216:45	216:68	9	AV_OPT_FLAG_VIDEO_PARAM
water	216:45	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	216:70	216:76	9	config
water	216:70	0:0	10	config
op	216:78	0:0	8	<
water	216:80	0:0	8	0
stmts	217:12	217:22	7	
goto	217:12	217:22	8	nomem
water	217:17	0:0	9	nomem
water	218:4	0:0	6	}
else	218:6	221:4	2
stmts	218:11	221:4	3	
if	218:11	221:4	4	(!av_strcasecmp (cmd ,"VideoHighQuality" ))
cond	218:15	218:53	5	!av_strcasecmp (cmd ,"VideoHighQuality" )
op	218:15	0:0	6	!
call	218:16	218:53	6	av_strcasecmp
arg	218:30	218:33	7	cmd
water	218:30	0:0	8	cmd
arg	218:35	218:53	7	"VideoHighQuality"
water	218:35	0:0	8	"VideoHighQuality"
stmts	218:56	221:4	5	
water	218:56	0:0	6	{
if	219:8	220:22	6	(ffserver_save_avoption ("mbd" ,"+bits" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	219:12	219:86	7	ffserver_save_avoption ("mbd" ,"+bits" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	219:12	219:82	8	ffserver_save_avoption
arg	219:35	219:40	9	"mbd"
water	219:35	0:0	10	"mbd"
arg	219:42	219:49	9	"+bits"
water	219:42	0:0	10	"+bits"
arg	219:51	219:74	9	AV_OPT_FLAG_VIDEO_PARAM
water	219:51	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	219:76	219:82	9	config
water	219:76	0:0	10	config
op	219:84	0:0	8	<
water	219:86	0:0	8	0
stmts	220:12	220:22	7	
goto	220:12	220:22	8	nomem
water	220:17	0:0	9	nomem
water	221:4	0:0	6	}
else	221:6	225:4	2
stmts	221:11	225:4	3	
if	221:11	225:4	4	(!av_strcasecmp (cmd ,"Video4MotionVector" ))
cond	221:15	221:55	5	!av_strcasecmp (cmd ,"Video4MotionVector" )
op	221:15	0:0	6	!
call	221:16	221:55	6	av_strcasecmp
arg	221:30	221:33	7	cmd
water	221:30	0:0	8	cmd
arg	221:35	221:55	7	"Video4MotionVector"
water	221:35	0:0	8	"Video4MotionVector"
stmts	221:58	225:4	5	
water	221:58	0:0	6	{
if	222:8	224:22	6	(ffserver_save_avoption ("mbd" ,"+bits" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0 ||ffserver_save_avoption ("flags" ,"+mv4" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	222:12	223:87	7	ffserver_save_avoption ("mbd" ,"+bits" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0 ||ffserver_save_avoption ("flags" ,"+mv4" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	222:12	222:83	8	ffserver_save_avoption
arg	222:35	222:40	9	"mbd"
water	222:35	0:0	10	"mbd"
arg	222:42	222:49	9	"+bits"
water	222:42	0:0	10	"+bits"
arg	222:52	222:75	9	AV_OPT_FLAG_VIDEO_PARAM
water	222:52	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	222:77	222:83	9	config
water	222:77	0:0	10	config
op	222:85	0:0	8	<
water	222:87	0:0	8	0
op	222:89	0:0	8	||
call	223:12	223:83	8	ffserver_save_avoption
arg	223:35	223:42	9	"flags"
water	223:35	0:0	10	"flags"
arg	223:44	223:50	9	"+mv4"
water	223:44	0:0	10	"+mv4"
arg	223:52	223:75	9	AV_OPT_FLAG_VIDEO_PARAM
water	223:52	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	223:77	223:83	9	config
water	223:77	0:0	10	config
op	223:85	0:0	8	<
water	223:87	0:0	8	0
stmts	224:12	224:22	7	
goto	224:12	224:22	8	nomem
water	224:17	0:0	9	nomem
water	225:4	0:0	6	}
else	225:6	238:4	2
stmts	225:11	238:4	3	
if	225:11	238:4	4	(!av_strcasecmp (cmd ,"AVOptionVideo" ) || !av_strcasecmp (cmd ,"AVOptionAudio" ))
cond	225:15	226:50	5	!av_strcasecmp (cmd ,"AVOptionVideo" ) || !av_strcasecmp (cmd ,"AVOptionAudio" )
op	225:15	0:0	6	!
call	225:16	225:50	6	av_strcasecmp
arg	225:30	225:33	7	cmd
water	225:30	0:0	8	cmd
arg	225:35	225:50	7	"AVOptionVideo"
water	225:35	0:0	8	"AVOptionVideo"
op	225:52	0:0	6	||
op	226:15	0:0	6	!
call	226:16	226:50	6	av_strcasecmp
arg	226:30	226:33	7	cmd
water	226:30	0:0	8	cmd
arg	226:35	226:50	7	"AVOptionAudio"
water	226:35	0:0	8	"AVOptionAudio"
stmts	226:53	238:4	5	
water	226:53	0:0	6	{
decl	227:8	227:15	6	int	ret
call	228:8	228:44	6	ffserver_get_arg
arg	228:25	228:28	7	arg
water	228:25	0:0	8	arg
arg	228:30	228:41	7	sizeof(arg)
op	228:30	0:0	8	sizeof
water	228:36	0:0	8	(
water	228:37	0:0	8	arg
water	228:40	0:0	8	)
arg	228:43	228:44	7	p
water	228:43	0:0	8	p
water	228:45	0:0	6	;
call	229:8	229:46	6	ffserver_get_arg
arg	229:25	229:29	7	arg2
water	229:25	0:0	8	arg2
arg	229:31	229:43	7	sizeof(arg2)
op	229:31	0:0	8	sizeof
water	229:37	0:0	8	(
water	229:38	0:0	8	arg2
water	229:42	0:0	8	)
arg	229:45	229:46	7	p
water	229:45	0:0	8	p
water	229:47	0:0	6	;
if	230:8	232:48	6	(!av_strcasecmp (cmd ,"AVOptionVideo" ))
cond	230:12	230:47	7	!av_strcasecmp (cmd ,"AVOptionVideo" )
op	230:12	0:0	8	!
call	230:13	230:47	8	av_strcasecmp
arg	230:27	230:30	9	cmd
water	230:27	0:0	10	cmd
arg	230:32	230:47	9	"AVOptionVideo"
water	230:32	0:0	10	"AVOptionVideo"
stmts	231:12	232:48	7	
water	231:12	0:0	8	ret
op	231:16	0:0	8	=
call	231:18	232:47	8	ffserver_save_avoption
arg	231:41	231:44	9	arg
water	231:41	0:0	10	arg
arg	231:46	231:50	9	arg2
water	231:46	0:0	10	arg2
arg	231:52	231:75	9	AV_OPT_FLAG_VIDEO_PARAM
water	231:52	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	232:41	232:47	9	config
water	232:41	0:0	10	config
water	232:48	0:0	8	;
else	233:8	235:48	6
stmts	234:12	235:48	7	
water	234:12	0:0	8	ret
op	234:16	0:0	8	=
call	234:18	235:47	8	ffserver_save_avoption
arg	234:41	234:44	9	arg
water	234:41	0:0	10	arg
arg	234:46	234:50	9	arg2
water	234:46	0:0	10	arg2
arg	234:52	234:75	9	AV_OPT_FLAG_AUDIO_PARAM
water	234:52	0:0	10	AV_OPT_FLAG_AUDIO_PARAM
arg	235:41	235:47	9	config
water	235:41	0:0	10	config
water	235:48	0:0	8	;
if	236:8	237:22	6	(ret < 0)
cond	236:12	236:18	7	ret < 0
water	236:12	0:0	8	ret
op	236:16	0:0	8	<
water	236:18	0:0	8	0
stmts	237:12	237:22	7	
goto	237:12	237:22	8	nomem
water	237:17	0:0	9	nomem
water	238:4	0:0	6	}
else	238:6	245:4	2
stmts	238:11	245:4	3	
if	238:11	245:4	4	(!av_strcasecmp (cmd ,"AVPresetVideo" ) || !av_strcasecmp (cmd ,"AVPresetAudio" ))
cond	238:15	239:50	5	!av_strcasecmp (cmd ,"AVPresetVideo" ) || !av_strcasecmp (cmd ,"AVPresetAudio" )
op	238:15	0:0	6	!
call	238:16	238:50	6	av_strcasecmp
arg	238:30	238:33	7	cmd
water	238:30	0:0	8	cmd
arg	238:35	238:50	7	"AVPresetVideo"
water	238:35	0:0	8	"AVPresetVideo"
op	238:52	0:0	6	||
op	239:15	0:0	6	!
call	239:16	239:50	6	av_strcasecmp
arg	239:30	239:33	7	cmd
water	239:30	0:0	8	cmd
arg	239:35	239:50	7	"AVPresetAudio"
water	239:35	0:0	8	"AVPresetAudio"
stmts	239:53	245:4	5	
water	239:53	0:0	6	{
call	240:8	240:44	6	ffserver_get_arg
arg	240:25	240:28	7	arg
water	240:25	0:0	8	arg
arg	240:30	240:41	7	sizeof(arg)
op	240:30	0:0	8	sizeof
water	240:36	0:0	8	(
water	240:37	0:0	8	arg
water	240:40	0:0	8	)
arg	240:43	240:44	7	p
water	240:43	0:0	8	p
water	240:45	0:0	6	;
if	241:8	242:69	6	(!av_strcasecmp (cmd ,"AVPresetVideo" ))
cond	241:12	241:47	7	!av_strcasecmp (cmd ,"AVPresetVideo" )
op	241:12	0:0	8	!
call	241:13	241:47	8	av_strcasecmp
arg	241:27	241:30	9	cmd
water	241:27	0:0	10	cmd
arg	241:32	241:47	9	"AVPresetVideo"
water	241:32	0:0	10	"AVPresetVideo"
stmts	242:12	242:69	7	
call	242:12	242:68	8	ffserver_opt_preset
arg	242:32	242:35	9	arg
water	242:32	0:0	10	arg
arg	242:37	242:60	9	AV_OPT_FLAG_VIDEO_PARAM
water	242:37	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	242:62	242:68	9	config
water	242:62	0:0	10	config
water	242:69	0:0	8	;
else	243:8	244:69	6
stmts	244:12	244:69	7	
call	244:12	244:68	8	ffserver_opt_preset
arg	244:32	244:35	9	arg
water	244:32	0:0	10	arg
arg	244:37	244:60	9	AV_OPT_FLAG_AUDIO_PARAM
water	244:37	0:0	10	AV_OPT_FLAG_AUDIO_PARAM
arg	244:62	244:68	9	config
water	244:62	0:0	10	config
water	244:69	0:0	8	;
water	245:4	0:0	6	}
else	245:6	252:4	2
stmts	245:11	252:4	3	
if	245:11	252:4	4	(!av_strcasecmp (cmd ,"VideoTag" ))
cond	245:15	245:45	5	!av_strcasecmp (cmd ,"VideoTag" )
op	245:15	0:0	6	!
call	245:16	245:45	6	av_strcasecmp
arg	245:30	245:33	7	cmd
water	245:30	0:0	8	cmd
arg	245:35	245:45	7	"VideoTag"
water	245:35	0:0	8	"VideoTag"
stmts	245:48	252:4	5	
water	245:48	0:0	6	{
call	246:8	246:44	6	ffserver_get_arg
arg	246:25	246:28	7	arg
water	246:25	0:0	8	arg
arg	246:30	246:41	7	sizeof(arg)
op	246:30	0:0	8	sizeof
water	246:36	0:0	8	(
water	246:37	0:0	8	arg
water	246:40	0:0	8	)
arg	246:43	246:44	7	p
water	246:43	0:0	8	p
water	246:45	0:0	6	;
if	247:8	251:22	6	(strlen (arg ) == 4 &&ffserver_save_avoption_int ("codec_tag" ,MKTAG (arg [ 0 ] ,arg [ 1 ] ,arg [ 2 ] ,arg [ 3 ] ) ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	247:12	250:74	7	strlen (arg ) == 4 &&ffserver_save_avoption_int ("codec_tag" ,MKTAG (arg [ 0 ] ,arg [ 1 ] ,arg [ 2 ] ,arg [ 3 ] ) ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	247:12	247:22	8	strlen
arg	247:19	247:22	9	arg
water	247:19	0:0	10	arg
op	247:24	0:0	8	==
water	247:27	0:0	8	4
op	247:29	0:0	8	&&
call	248:12	250:70	8	ffserver_save_avoption_int
arg	248:39	248:50	9	"codec_tag"
water	248:39	0:0	10	"codec_tag"
arg	249:39	249:76	9	MKTAG(arg[0],arg[1],arg[2],arg[3])
call	249:39	249:75	10	MKTAG
arg	249:45	249:51	11	arg[0]
water	249:45	0:0	12	arg
op	249:48	0:0	12	[
water	249:49	0:0	12	0
op	249:50	0:0	12	]
arg	249:53	249:59	11	arg[1]
water	249:53	0:0	12	arg
op	249:56	0:0	12	[
water	249:57	0:0	12	1
op	249:58	0:0	12	]
arg	249:61	249:67	11	arg[2]
water	249:61	0:0	12	arg
op	249:64	0:0	12	[
water	249:65	0:0	12	2
op	249:66	0:0	12	]
arg	249:69	249:75	11	arg[3]
water	249:69	0:0	12	arg
op	249:72	0:0	12	[
water	249:73	0:0	12	3
op	249:74	0:0	12	]
arg	250:39	250:62	9	AV_OPT_FLAG_VIDEO_PARAM
water	250:39	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	250:64	250:70	9	config
water	250:64	0:0	10	config
op	250:72	0:0	8	<
water	250:74	0:0	8	0
stmts	251:12	251:22	7	
goto	251:12	251:22	8	nomem
water	251:17	0:0	9	nomem
water	252:4	0:0	6	}
else	252:6	256:4	2
stmts	252:11	256:4	3	
if	252:11	256:4	4	(!av_strcasecmp (cmd ,"BitExact" ))
cond	252:15	252:45	5	!av_strcasecmp (cmd ,"BitExact" )
op	252:15	0:0	6	!
call	252:16	252:45	6	av_strcasecmp
arg	252:30	252:33	7	cmd
water	252:30	0:0	8	cmd
arg	252:35	252:45	7	"BitExact"
water	252:35	0:0	8	"BitExact"
stmts	252:48	256:4	5	
water	252:48	0:0	6	{
water	253:8	0:0	6	config
op	253:14	0:0	6	->
water	253:16	0:0	6	bitexact
op	253:25	0:0	6	=
water	253:27	0:0	6	1
water	253:28	0:0	6	;
if	254:8	255:22	6	(ffserver_save_avoption ("flags" ,"+bitexact" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	254:12	254:92	7	ffserver_save_avoption ("flags" ,"+bitexact" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	254:12	254:88	8	ffserver_save_avoption
arg	254:35	254:42	9	"flags"
water	254:35	0:0	10	"flags"
arg	254:44	254:55	9	"+bitexact"
water	254:44	0:0	10	"+bitexact"
arg	254:57	254:80	9	AV_OPT_FLAG_VIDEO_PARAM
water	254:57	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	254:82	254:88	9	config
water	254:82	0:0	10	config
op	254:90	0:0	8	<
water	254:92	0:0	8	0
stmts	255:12	255:22	7	
goto	255:12	255:22	8	nomem
water	255:17	0:0	9	nomem
water	256:4	0:0	6	}
else	256:6	259:4	2
stmts	256:11	259:4	3	
if	256:11	259:4	4	(!av_strcasecmp (cmd ,"DctFastint" ))
cond	256:15	256:47	5	!av_strcasecmp (cmd ,"DctFastint" )
op	256:15	0:0	6	!
call	256:16	256:47	6	av_strcasecmp
arg	256:30	256:33	7	cmd
water	256:30	0:0	8	cmd
arg	256:35	256:47	7	"DctFastint"
water	256:35	0:0	8	"DctFastint"
stmts	256:50	259:4	5	
water	256:50	0:0	6	{
if	257:8	258:22	6	(ffserver_save_avoption ("dct" ,"fastint" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	257:12	257:88	7	ffserver_save_avoption ("dct" ,"fastint" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	257:12	257:84	8	ffserver_save_avoption
arg	257:35	257:40	9	"dct"
water	257:35	0:0	10	"dct"
arg	257:42	257:51	9	"fastint"
water	257:42	0:0	10	"fastint"
arg	257:53	257:76	9	AV_OPT_FLAG_VIDEO_PARAM
water	257:53	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	257:78	257:84	9	config
water	257:78	0:0	10	config
op	257:86	0:0	8	<
water	257:88	0:0	8	0
stmts	258:12	258:22	7	
goto	258:12	258:22	8	nomem
water	258:17	0:0	9	nomem
water	259:4	0:0	6	}
else	259:6	262:4	2
stmts	259:11	262:4	3	
if	259:11	262:4	4	(!av_strcasecmp (cmd ,"IdctSimple" ))
cond	259:15	259:47	5	!av_strcasecmp (cmd ,"IdctSimple" )
op	259:15	0:0	6	!
call	259:16	259:47	6	av_strcasecmp
arg	259:30	259:33	7	cmd
water	259:30	0:0	8	cmd
arg	259:35	259:47	7	"IdctSimple"
water	259:35	0:0	8	"IdctSimple"
stmts	259:50	262:4	5	
water	259:50	0:0	6	{
if	260:8	261:22	6	(ffserver_save_avoption ("idct" ,"simple" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	260:12	260:88	7	ffserver_save_avoption ("idct" ,"simple" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	260:12	260:84	8	ffserver_save_avoption
arg	260:35	260:41	9	"idct"
water	260:35	0:0	10	"idct"
arg	260:43	260:51	9	"simple"
water	260:43	0:0	10	"simple"
arg	260:53	260:76	9	AV_OPT_FLAG_VIDEO_PARAM
water	260:53	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	260:78	260:84	9	config
water	260:78	0:0	10	config
op	260:86	0:0	8	<
water	260:88	0:0	8	0
stmts	261:12	261:22	7	
goto	261:12	261:22	8	nomem
water	261:17	0:0	9	nomem
water	262:4	0:0	6	}
else	262:6	270:4	2
stmts	262:11	270:4	3	
if	262:11	270:4	4	(!av_strcasecmp (cmd ,"Qscale" ))
cond	262:15	262:43	5	!av_strcasecmp (cmd ,"Qscale" )
op	262:15	0:0	6	!
call	262:16	262:43	6	av_strcasecmp
arg	262:30	262:33	7	cmd
water	262:30	0:0	8	cmd
arg	262:35	262:43	7	"Qscale"
water	262:35	0:0	8	"Qscale"
stmts	262:46	270:4	5	
water	262:46	0:0	6	{
call	263:8	263:44	6	ffserver_get_arg
arg	263:25	263:28	7	arg
water	263:25	0:0	8	arg
arg	263:30	263:41	7	sizeof(arg)
op	263:30	0:0	8	sizeof
water	263:36	0:0	8	(
water	263:37	0:0	8	arg
water	263:40	0:0	8	)
arg	263:43	263:44	7	p
water	263:43	0:0	8	p
water	263:45	0:0	6	;
call	264:8	265:60	6	ffserver_set_int_param
arg	264:31	264:35	7	&val
op	264:31	0:0	8	&
water	264:32	0:0	8	val
arg	264:37	264:40	7	arg
water	264:37	0:0	8	arg
arg	264:42	264:43	7	0
water	264:42	0:0	8	0
arg	264:45	264:52	7	INT_MIN
water	264:45	0:0	8	INT_MIN
arg	264:54	264:61	7	INT_MAX
water	264:54	0:0	8	INT_MAX
arg	264:63	264:69	7	config
water	264:63	0:0	8	config
arg	265:31	265:55	7	"Invalid Qscale: '%s'\n"
water	265:31	0:0	8	"Invalid Qscale: '%s'\n"
arg	265:57	265:60	7	arg
water	265:57	0:0	8	arg
water	265:61	0:0	6	;
if	266:8	269:22	6	(ffserver_save_avoption ("flags" ,"+qscale" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0 ||ffserver_save_avoption_int ("global_quality" ,FF_QP2LAMBDA * val ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	266:12	268:74	7	ffserver_save_avoption ("flags" ,"+qscale" ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0 ||ffserver_save_avoption_int ("global_quality" ,FF_QP2LAMBDA * val ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	266:12	266:86	8	ffserver_save_avoption
arg	266:35	266:42	9	"flags"
water	266:35	0:0	10	"flags"
arg	266:44	266:53	9	"+qscale"
water	266:44	0:0	10	"+qscale"
arg	266:55	266:78	9	AV_OPT_FLAG_VIDEO_PARAM
water	266:55	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	266:80	266:86	9	config
water	266:80	0:0	10	config
op	266:88	0:0	8	<
water	266:90	0:0	8	0
op	266:92	0:0	8	||
call	267:12	268:70	8	ffserver_save_avoption_int
arg	267:39	267:55	9	"global_quality"
water	267:39	0:0	10	"global_quality"
arg	267:57	267:75	9	FF_QP2LAMBDA*val
water	267:57	0:0	10	FF_QP2LAMBDA
op	267:70	0:0	10	*
water	267:72	0:0	10	val
arg	268:39	268:62	9	AV_OPT_FLAG_VIDEO_PARAM
water	268:39	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	268:64	268:70	9	config
water	268:64	0:0	10	config
op	268:72	0:0	8	<
water	268:74	0:0	8	0
stmts	269:12	269:22	7	
goto	269:12	269:22	8	nomem
water	269:17	0:0	9	nomem
water	270:4	0:0	6	}
else	270:6	274:4	2
stmts	270:11	274:4	3	
if	270:11	274:4	4	(!av_strcasecmp (cmd ,"VideoQDiff" ))
cond	270:15	270:47	5	!av_strcasecmp (cmd ,"VideoQDiff" )
op	270:15	0:0	6	!
call	270:16	270:47	6	av_strcasecmp
arg	270:30	270:33	7	cmd
water	270:30	0:0	8	cmd
arg	270:35	270:47	7	"VideoQDiff"
water	270:35	0:0	8	"VideoQDiff"
stmts	270:50	274:4	5	
water	270:50	0:0	6	{
call	271:8	271:44	6	ffserver_get_arg
arg	271:25	271:28	7	arg
water	271:25	0:0	8	arg
arg	271:30	271:41	7	sizeof(arg)
op	271:30	0:0	8	sizeof
water	271:36	0:0	8	(
water	271:37	0:0	8	arg
water	271:40	0:0	8	)
arg	271:43	271:44	7	p
water	271:43	0:0	8	p
water	271:45	0:0	6	;
if	272:8	273:22	6	(ffserver_save_avoption ("qdiff" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	272:12	272:84	7	ffserver_save_avoption ("qdiff" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	272:12	272:80	8	ffserver_save_avoption
arg	272:35	272:42	9	"qdiff"
water	272:35	0:0	10	"qdiff"
arg	272:44	272:47	9	arg
water	272:44	0:0	10	arg
arg	272:49	272:72	9	AV_OPT_FLAG_VIDEO_PARAM
water	272:49	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	272:74	272:80	9	config
water	272:74	0:0	10	config
op	272:82	0:0	8	<
water	272:84	0:0	8	0
stmts	273:12	273:22	7	
goto	273:12	273:22	8	nomem
water	273:17	0:0	9	nomem
water	274:4	0:0	6	}
else	274:6	278:4	2
stmts	274:11	278:4	3	
if	274:11	278:4	4	(!av_strcasecmp (cmd ,"VideoQMax" ))
cond	274:15	274:46	5	!av_strcasecmp (cmd ,"VideoQMax" )
op	274:15	0:0	6	!
call	274:16	274:46	6	av_strcasecmp
arg	274:30	274:33	7	cmd
water	274:30	0:0	8	cmd
arg	274:35	274:46	7	"VideoQMax"
water	274:35	0:0	8	"VideoQMax"
stmts	274:49	278:4	5	
water	274:49	0:0	6	{
call	275:8	275:44	6	ffserver_get_arg
arg	275:25	275:28	7	arg
water	275:25	0:0	8	arg
arg	275:30	275:41	7	sizeof(arg)
op	275:30	0:0	8	sizeof
water	275:36	0:0	8	(
water	275:37	0:0	8	arg
water	275:40	0:0	8	)
arg	275:43	275:44	7	p
water	275:43	0:0	8	p
water	275:45	0:0	6	;
if	276:8	277:22	6	(ffserver_save_avoption ("qmax" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	276:12	276:83	7	ffserver_save_avoption ("qmax" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	276:12	276:79	8	ffserver_save_avoption
arg	276:35	276:41	9	"qmax"
water	276:35	0:0	10	"qmax"
arg	276:43	276:46	9	arg
water	276:43	0:0	10	arg
arg	276:48	276:71	9	AV_OPT_FLAG_VIDEO_PARAM
water	276:48	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	276:73	276:79	9	config
water	276:73	0:0	10	config
op	276:81	0:0	8	<
water	276:83	0:0	8	0
stmts	277:12	277:22	7	
goto	277:12	277:22	8	nomem
water	277:17	0:0	9	nomem
water	278:4	0:0	6	}
else	278:6	282:4	2
stmts	278:11	282:4	3	
if	278:11	282:4	4	(!av_strcasecmp (cmd ,"VideoQMin" ))
cond	278:15	278:46	5	!av_strcasecmp (cmd ,"VideoQMin" )
op	278:15	0:0	6	!
call	278:16	278:46	6	av_strcasecmp
arg	278:30	278:33	7	cmd
water	278:30	0:0	8	cmd
arg	278:35	278:46	7	"VideoQMin"
water	278:35	0:0	8	"VideoQMin"
stmts	278:49	282:4	5	
water	278:49	0:0	6	{
call	279:8	279:44	6	ffserver_get_arg
arg	279:25	279:28	7	arg
water	279:25	0:0	8	arg
arg	279:30	279:41	7	sizeof(arg)
op	279:30	0:0	8	sizeof
water	279:36	0:0	8	(
water	279:37	0:0	8	arg
water	279:40	0:0	8	)
arg	279:43	279:44	7	p
water	279:43	0:0	8	p
water	279:45	0:0	6	;
if	280:8	281:22	6	(ffserver_save_avoption ("qmin" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	280:12	280:83	7	ffserver_save_avoption ("qmin" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	280:12	280:79	8	ffserver_save_avoption
arg	280:35	280:41	9	"qmin"
water	280:35	0:0	10	"qmin"
arg	280:43	280:46	9	arg
water	280:43	0:0	10	arg
arg	280:48	280:71	9	AV_OPT_FLAG_VIDEO_PARAM
water	280:48	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	280:73	280:79	9	config
water	280:73	0:0	10	config
op	280:81	0:0	8	<
water	280:83	0:0	8	0
stmts	281:12	281:22	7	
goto	281:12	281:22	8	nomem
water	281:17	0:0	9	nomem
water	282:4	0:0	6	}
else	282:6	286:4	2
stmts	282:11	286:4	3	
if	282:11	286:4	4	(!av_strcasecmp (cmd ,"LumiMask" ))
cond	282:15	282:45	5	!av_strcasecmp (cmd ,"LumiMask" )
op	282:15	0:0	6	!
call	282:16	282:45	6	av_strcasecmp
arg	282:30	282:33	7	cmd
water	282:30	0:0	8	cmd
arg	282:35	282:45	7	"LumiMask"
water	282:35	0:0	8	"LumiMask"
stmts	282:48	286:4	5	
water	282:48	0:0	6	{
call	283:8	283:44	6	ffserver_get_arg
arg	283:25	283:28	7	arg
water	283:25	0:0	8	arg
arg	283:30	283:41	7	sizeof(arg)
op	283:30	0:0	8	sizeof
water	283:36	0:0	8	(
water	283:37	0:0	8	arg
water	283:40	0:0	8	)
arg	283:43	283:44	7	p
water	283:43	0:0	8	p
water	283:45	0:0	6	;
if	284:8	285:22	6	(ffserver_save_avoption ("lumi_mask" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	284:12	284:88	7	ffserver_save_avoption ("lumi_mask" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	284:12	284:84	8	ffserver_save_avoption
arg	284:35	284:46	9	"lumi_mask"
water	284:35	0:0	10	"lumi_mask"
arg	284:48	284:51	9	arg
water	284:48	0:0	10	arg
arg	284:53	284:76	9	AV_OPT_FLAG_VIDEO_PARAM
water	284:53	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	284:78	284:84	9	config
water	284:78	0:0	10	config
op	284:86	0:0	8	<
water	284:88	0:0	8	0
stmts	285:12	285:22	7	
goto	285:12	285:22	8	nomem
water	285:17	0:0	9	nomem
water	286:4	0:0	6	}
else	286:6	290:4	2
stmts	286:11	290:4	3	
if	286:11	290:4	4	(!av_strcasecmp (cmd ,"DarkMask" ))
cond	286:15	286:45	5	!av_strcasecmp (cmd ,"DarkMask" )
op	286:15	0:0	6	!
call	286:16	286:45	6	av_strcasecmp
arg	286:30	286:33	7	cmd
water	286:30	0:0	8	cmd
arg	286:35	286:45	7	"DarkMask"
water	286:35	0:0	8	"DarkMask"
stmts	286:48	290:4	5	
water	286:48	0:0	6	{
call	287:8	287:44	6	ffserver_get_arg
arg	287:25	287:28	7	arg
water	287:25	0:0	8	arg
arg	287:30	287:41	7	sizeof(arg)
op	287:30	0:0	8	sizeof
water	287:36	0:0	8	(
water	287:37	0:0	8	arg
water	287:40	0:0	8	)
arg	287:43	287:44	7	p
water	287:43	0:0	8	p
water	287:45	0:0	6	;
if	288:8	289:22	6	(ffserver_save_avoption ("dark_mask" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0)
cond	288:12	288:88	7	ffserver_save_avoption ("dark_mask" ,arg ,AV_OPT_FLAG_VIDEO_PARAM ,config ) < 0
call	288:12	288:84	8	ffserver_save_avoption
arg	288:35	288:46	9	"dark_mask"
water	288:35	0:0	10	"dark_mask"
arg	288:48	288:51	9	arg
water	288:48	0:0	10	arg
arg	288:53	288:76	9	AV_OPT_FLAG_VIDEO_PARAM
water	288:53	0:0	10	AV_OPT_FLAG_VIDEO_PARAM
arg	288:78	288:84	9	config
water	288:78	0:0	10	config
op	288:86	0:0	8	<
water	288:88	0:0	8	0
stmts	289:12	289:22	7	
goto	289:12	289:22	8	nomem
water	289:17	0:0	9	nomem
water	290:4	0:0	6	}
else	290:6	292:4	2
stmts	290:11	292:4	3	
if	290:11	292:4	4	(!av_strcasecmp (cmd ,"NoVideo" ))
cond	290:15	290:44	5	!av_strcasecmp (cmd ,"NoVideo" )
op	290:15	0:0	6	!
call	290:16	290:44	6	av_strcasecmp
arg	290:30	290:33	7	cmd
water	290:30	0:0	8	cmd
arg	290:35	290:44	7	"NoVideo"
water	290:35	0:0	8	"NoVideo"
stmts	290:47	292:4	5	
water	290:47	0:0	6	{
water	291:8	0:0	6	config
op	291:14	0:0	6	->
water	291:16	0:0	6	no_video
op	291:25	0:0	6	=
water	291:27	0:0	6	1
water	291:28	0:0	6	;
water	292:4	0:0	6	}
else	292:6	294:4	2
stmts	292:11	294:4	3	
if	292:11	294:4	4	(!av_strcasecmp (cmd ,"NoAudio" ))
cond	292:15	292:44	5	!av_strcasecmp (cmd ,"NoAudio" )
op	292:15	0:0	6	!
call	292:16	292:44	6	av_strcasecmp
arg	292:30	292:33	7	cmd
water	292:30	0:0	8	cmd
arg	292:35	292:44	7	"NoAudio"
water	292:35	0:0	8	"NoAudio"
stmts	292:47	294:4	5	
water	292:47	0:0	6	{
water	293:8	0:0	6	config
op	293:14	0:0	6	->
water	293:16	0:0	6	no_audio
op	293:25	0:0	6	=
water	293:27	0:0	6	1
water	293:28	0:0	6	;
water	294:4	0:0	6	}
else	294:6	297:4	2
stmts	294:11	297:4	3	
if	294:11	297:4	4	(!av_strcasecmp (cmd ,"ACL" ))
cond	294:15	294:40	5	!av_strcasecmp (cmd ,"ACL" )
op	294:15	0:0	6	!
call	294:16	294:40	6	av_strcasecmp
arg	294:30	294:33	7	cmd
water	294:30	0:0	8	cmd
arg	294:35	294:40	7	"ACL"
water	294:35	0:0	8	"ACL"
stmts	294:43	297:4	5	
water	294:43	0:0	6	{
call	295:8	296:32	6	ffserver_parse_acl_row
arg	295:31	295:37	7	stream
water	295:31	0:0	8	stream
arg	295:39	295:43	7	NULL
water	295:39	0:0	8	NULL
arg	295:45	295:49	7	NULL
water	295:45	0:0	8	NULL
arg	295:51	295:53	7	*p
op	295:51	0:0	8	*
water	295:52	0:0	8	p
arg	295:55	295:71	7	config->filename
water	295:55	0:0	8	config
op	295:61	0:0	8	->
water	295:63	0:0	8	filename
arg	296:16	296:32	7	config->line_num
water	296:16	0:0	8	config
op	296:22	0:0	8	->
water	296:24	0:0	8	line_num
water	296:33	0:0	6	;
water	297:4	0:0	6	}
else	297:6	299:4	2
stmts	297:11	299:4	3	
if	297:11	299:4	4	(!av_strcasecmp (cmd ,"DynamicACL" ))
cond	297:15	297:47	5	!av_strcasecmp (cmd ,"DynamicACL" )
op	297:15	0:0	6	!
call	297:16	297:47	6	av_strcasecmp
arg	297:30	297:33	7	cmd
water	297:30	0:0	8	cmd
arg	297:35	297:47	7	"DynamicACL"
water	297:35	0:0	8	"DynamicACL"
stmts	297:50	299:4	5	
water	297:50	0:0	6	{
call	298:8	298:76	6	ffserver_get_arg
arg	298:25	298:44	7	stream->dynamic_acl
water	298:25	0:0	8	stream
op	298:31	0:0	8	->
water	298:33	0:0	8	dynamic_acl
arg	298:46	298:73	7	sizeof(stream->dynamic_acl)
op	298:46	0:0	8	sizeof
water	298:52	0:0	8	(
water	298:53	0:0	8	stream
op	298:59	0:0	8	->
water	298:61	0:0	8	dynamic_acl
water	298:72	0:0	8	)
arg	298:75	298:76	7	p
water	298:75	0:0	8	p
water	298:77	0:0	6	;
water	299:4	0:0	6	}
else	299:6	303:4	2
stmts	299:11	303:4	3	
if	299:11	303:4	4	(!av_strcasecmp (cmd ,"RTSPOption" ))
cond	299:15	299:47	5	!av_strcasecmp (cmd ,"RTSPOption" )
op	299:15	0:0	6	!
call	299:16	299:47	6	av_strcasecmp
arg	299:30	299:33	7	cmd
water	299:30	0:0	8	cmd
arg	299:35	299:47	7	"RTSPOption"
water	299:35	0:0	8	"RTSPOption"
stmts	299:50	303:4	5	
water	299:50	0:0	6	{
call	300:8	300:44	6	ffserver_get_arg
arg	300:25	300:28	7	arg
water	300:25	0:0	8	arg
arg	300:30	300:41	7	sizeof(arg)
op	300:30	0:0	8	sizeof
water	300:36	0:0	8	(
water	300:37	0:0	8	arg
water	300:40	0:0	8	)
arg	300:43	300:44	7	p
water	300:43	0:0	8	p
water	300:45	0:0	6	;
call	301:8	301:37	6	av_freep
arg	301:17	301:37	7	&stream->rtsp_option
op	301:17	0:0	8	&
water	301:18	0:0	8	stream
op	301:24	0:0	8	->
water	301:26	0:0	8	rtsp_option
water	301:38	0:0	6	;
water	302:8	0:0	6	stream
op	302:14	0:0	6	->
water	302:16	0:0	6	rtsp_option
op	302:28	0:0	6	=
call	302:30	302:43	6	av_strdup
arg	302:40	302:43	7	arg
water	302:40	0:0	8	arg
water	302:44	0:0	6	;
water	303:4	0:0	6	}
else	303:6	309:4	2
stmts	303:11	309:4	3	
if	303:11	309:4	4	(!av_strcasecmp (cmd ,"MulticastAddress" ))
cond	303:15	303:53	5	!av_strcasecmp (cmd ,"MulticastAddress" )
op	303:15	0:0	6	!
call	303:16	303:53	6	av_strcasecmp
arg	303:30	303:33	7	cmd
water	303:30	0:0	8	cmd
arg	303:35	303:53	7	"MulticastAddress"
water	303:35	0:0	8	"MulticastAddress"
stmts	303:56	309:4	5	
water	303:56	0:0	6	{
call	304:8	304:44	6	ffserver_get_arg
arg	304:25	304:28	7	arg
water	304:25	0:0	8	arg
arg	304:30	304:41	7	sizeof(arg)
op	304:30	0:0	8	sizeof
water	304:36	0:0	8	(
water	304:37	0:0	8	arg
water	304:40	0:0	8	)
arg	304:43	304:44	7	p
water	304:43	0:0	8	p
water	304:45	0:0	6	;
if	305:8	306:57	6	(resolve_host (& stream -> multicast_ip ,arg ))
cond	305:12	305:51	7	resolve_host (& stream -> multicast_ip ,arg )
call	305:12	305:51	8	resolve_host
arg	305:25	305:46	9	&stream->multicast_ip
op	305:25	0:0	10	&
water	305:26	0:0	10	stream
op	305:32	0:0	10	->
water	305:34	0:0	10	multicast_ip
arg	305:48	305:51	9	arg
water	305:48	0:0	10	arg
stmts	306:12	306:57	7	
call	306:12	306:56	8	ERROR
arg	306:18	306:51	9	"Invalid host/IP address: '%s'\n"
water	306:18	0:0	10	"Invalid host/IP address: '%s'\n"
arg	306:53	306:56	9	arg
water	306:53	0:0	10	arg
water	306:57	0:0	8	;
water	307:8	0:0	6	stream
op	307:14	0:0	6	->
water	307:16	0:0	6	is_multicast
op	307:29	0:0	6	=
water	307:31	0:0	6	1
water	307:32	0:0	6	;
water	308:8	0:0	6	stream
op	308:14	0:0	6	->
water	308:16	0:0	6	loop
op	308:21	0:0	6	=
water	308:23	0:0	6	1
water	308:24	0:0	6	;
water	309:4	0:0	6	}
else	309:6	314:4	2
stmts	309:11	314:4	3	
if	309:11	314:4	4	(!av_strcasecmp (cmd ,"MulticastPort" ))
cond	309:15	309:50	5	!av_strcasecmp (cmd ,"MulticastPort" )
op	309:15	0:0	6	!
call	309:16	309:50	6	av_strcasecmp
arg	309:30	309:33	7	cmd
water	309:30	0:0	8	cmd
arg	309:35	309:50	7	"MulticastPort"
water	309:35	0:0	8	"MulticastPort"
stmts	309:53	314:4	5	
water	309:53	0:0	6	{
call	310:8	310:44	6	ffserver_get_arg
arg	310:25	310:28	7	arg
water	310:25	0:0	8	arg
arg	310:30	310:41	7	sizeof(arg)
op	310:30	0:0	8	sizeof
water	310:36	0:0	8	(
water	310:37	0:0	8	arg
water	310:40	0:0	8	)
arg	310:43	310:44	7	p
water	310:43	0:0	8	p
water	310:45	0:0	6	;
call	311:8	312:52	6	ffserver_set_int_param
arg	311:31	311:35	7	&val
op	311:31	0:0	8	&
water	311:32	0:0	8	val
arg	311:37	311:40	7	arg
water	311:37	0:0	8	arg
arg	311:42	311:43	7	0
water	311:42	0:0	8	0
arg	311:45	311:46	7	1
water	311:45	0:0	8	1
arg	311:48	311:53	7	65535
water	311:48	0:0	8	65535
arg	311:55	311:61	7	config
water	311:55	0:0	8	config
arg	312:16	312:47	7	"Invalid MulticastPort: '%s'\n"
water	312:16	0:0	8	"Invalid MulticastPort: '%s'\n"
arg	312:49	312:52	7	arg
water	312:49	0:0	8	arg
water	312:53	0:0	6	;
water	313:8	0:0	6	stream
op	313:14	0:0	6	->
water	313:16	0:0	6	multicast_port
op	313:31	0:0	6	=
water	313:33	0:0	6	val
water	313:36	0:0	6	;
water	314:4	0:0	6	}
else	314:6	319:4	2
stmts	314:11	319:4	3	
if	314:11	319:4	4	(!av_strcasecmp (cmd ,"MulticastTTL" ))
cond	314:15	314:49	5	!av_strcasecmp (cmd ,"MulticastTTL" )
op	314:15	0:0	6	!
call	314:16	314:49	6	av_strcasecmp
arg	314:30	314:33	7	cmd
water	314:30	0:0	8	cmd
arg	314:35	314:49	7	"MulticastTTL"
water	314:35	0:0	8	"MulticastTTL"
stmts	314:52	319:4	5	
water	314:52	0:0	6	{
call	315:8	315:44	6	ffserver_get_arg
arg	315:25	315:28	7	arg
water	315:25	0:0	8	arg
arg	315:30	315:41	7	sizeof(arg)
op	315:30	0:0	8	sizeof
water	315:36	0:0	8	(
water	315:37	0:0	8	arg
water	315:40	0:0	8	)
arg	315:43	315:44	7	p
water	315:43	0:0	8	p
water	315:45	0:0	6	;
call	316:8	317:51	6	ffserver_set_int_param
arg	316:31	316:35	7	&val
op	316:31	0:0	8	&
water	316:32	0:0	8	val
arg	316:37	316:40	7	arg
water	316:37	0:0	8	arg
arg	316:42	316:43	7	0
water	316:42	0:0	8	0
arg	316:45	316:52	7	INT_MIN
water	316:45	0:0	8	INT_MIN
arg	316:54	316:61	7	INT_MAX
water	316:54	0:0	8	INT_MAX
arg	316:63	316:69	7	config
water	316:63	0:0	8	config
arg	317:16	317:46	7	"Invalid MulticastTTL: '%s'\n"
water	317:16	0:0	8	"Invalid MulticastTTL: '%s'\n"
arg	317:48	317:51	7	arg
water	317:48	0:0	8	arg
water	317:52	0:0	6	;
water	318:8	0:0	6	stream
op	318:14	0:0	6	->
water	318:16	0:0	6	multicast_ttl
op	318:30	0:0	6	=
water	318:32	0:0	6	val
water	318:35	0:0	6	;
water	319:4	0:0	6	}
else	319:6	321:4	2
stmts	319:11	321:4	3	
if	319:11	321:4	4	(!av_strcasecmp (cmd ,"NoLoop" ))
cond	319:15	319:43	5	!av_strcasecmp (cmd ,"NoLoop" )
op	319:15	0:0	6	!
call	319:16	319:43	6	av_strcasecmp
arg	319:30	319:33	7	cmd
water	319:30	0:0	8	cmd
arg	319:35	319:43	7	"NoLoop"
water	319:35	0:0	8	"NoLoop"
stmts	319:46	321:4	5	
water	319:46	0:0	6	{
water	320:8	0:0	6	stream
op	320:14	0:0	6	->
water	320:16	0:0	6	loop
op	320:21	0:0	6	=
water	320:23	0:0	6	0
water	320:24	0:0	6	;
water	321:4	0:0	6	}
else	321:6	346:4	2
stmts	321:11	346:4	3	
if	321:11	346:4	4	(!av_strcasecmp (cmd ,"</Stream>" ))
cond	321:15	321:46	5	!av_strcasecmp (cmd ,"</Stream>" )
op	321:15	0:0	6	!
call	321:16	321:46	6	av_strcasecmp
arg	321:30	321:33	7	cmd
water	321:30	0:0	8	cmd
arg	321:35	321:46	7	"</Stream>"
water	321:35	0:0	8	"</Stream>"
stmts	321:49	346:4	5	
water	321:49	0:0	6	{
water	322:8	0:0	6	config
op	322:14	0:0	6	->
water	322:16	0:0	6	stream_use_defaults
op	322:36	0:0	6	&=
water	322:39	0:0	6	1
water	322:40	0:0	6	;
if	323:8	338:8	6	(stream -> feed && stream -> fmt &&strcmp (stream -> fmt -> name ,"ffm" ))
cond	323:12	323:74	7	stream -> feed && stream -> fmt &&strcmp (stream -> fmt -> name ,"ffm" )
water	323:12	0:0	8	stream
op	323:18	0:0	8	->
water	323:20	0:0	8	feed
op	323:25	0:0	8	&&
water	323:28	0:0	8	stream
op	323:34	0:0	8	->
water	323:36	0:0	8	fmt
op	323:40	0:0	8	&&
call	323:43	323:74	8	strcmp
arg	323:50	323:67	9	stream->fmt->name
water	323:50	0:0	10	stream
op	323:56	0:0	10	->
water	323:58	0:0	10	fmt
op	323:61	0:0	10	->
water	323:63	0:0	10	name
arg	323:69	323:74	9	"ffm"
water	323:69	0:0	10	"ffm"
stmts	323:77	338:8	7	
water	323:77	0:0	8	{
if	324:12	325:77	8	(config -> dummy_actx -> codec_id == AV_CODEC_ID_NONE)
cond	324:16	324:48	9	config -> dummy_actx -> codec_id == AV_CODEC_ID_NONE
water	324:16	0:0	10	config
op	324:22	0:0	10	->
water	324:24	0:0	10	dummy_actx
op	324:34	0:0	10	->
water	324:36	0:0	10	codec_id
op	324:45	0:0	10	==
water	324:48	0:0	10	AV_CODEC_ID_NONE
stmts	325:16	325:77	9	
water	325:16	0:0	10	config
op	325:22	0:0	10	->
water	325:24	0:0	10	dummy_actx
op	325:34	0:0	10	->
water	325:36	0:0	10	codec_id
op	325:45	0:0	10	=
water	325:47	0:0	10	config
op	325:53	0:0	10	->
water	325:55	0:0	10	guessed_audio_codec_id
water	325:77	0:0	10	;
if	326:12	330:12	8	(! config -> no_audio && config -> dummy_actx -> codec_id != AV_CODEC_ID_NONE)
cond	326:16	327:48	9	! config -> no_audio && config -> dummy_actx -> codec_id != AV_CODEC_ID_NONE
op	326:16	0:0	10	!
water	326:17	0:0	10	config
op	326:23	0:0	10	->
water	326:25	0:0	10	no_audio
op	326:34	0:0	10	&&
water	327:16	0:0	10	config
op	327:22	0:0	10	->
water	327:24	0:0	10	dummy_actx
op	327:34	0:0	10	->
water	327:36	0:0	10	codec_id
op	327:45	0:0	10	!=
water	327:48	0:0	10	AV_CODEC_ID_NONE
stmts	327:66	330:12	9	
water	327:66	0:0	10	{
decl	328:16	328:118	10	AVCodecContext	*audio_enc
op	328:42	0:0	10	=
call	328:44	328:117	11	avcodec_alloc_context3
arg	328:67	328:117	12	avcodec_find_encoder(config->dummy_actx->codec_id)
call	328:67	328:116	13	avcodec_find_encoder
arg	328:88	328:116	14	config->dummy_actx->codec_id
water	328:88	0:0	15	config
op	328:94	0:0	15	->
water	328:96	0:0	15	dummy_actx
op	328:106	0:0	15	->
water	328:108	0:0	15	codec_id
call	329:16	329:51	10	add_codec
arg	329:26	329:32	11	stream
water	329:26	0:0	12	stream
arg	329:34	329:43	11	audio_enc
water	329:34	0:0	12	audio_enc
arg	329:45	329:51	11	config
water	329:45	0:0	12	config
water	329:52	0:0	10	;
water	330:12	0:0	10	}
if	331:12	332:77	8	(config -> dummy_vctx -> codec_id == AV_CODEC_ID_NONE)
cond	331:16	331:48	9	config -> dummy_vctx -> codec_id == AV_CODEC_ID_NONE
water	331:16	0:0	10	config
op	331:22	0:0	10	->
water	331:24	0:0	10	dummy_vctx
op	331:34	0:0	10	->
water	331:36	0:0	10	codec_id
op	331:45	0:0	10	==
water	331:48	0:0	10	AV_CODEC_ID_NONE
stmts	332:16	332:77	9	
water	332:16	0:0	10	config
op	332:22	0:0	10	->
water	332:24	0:0	10	dummy_vctx
op	332:34	0:0	10	->
water	332:36	0:0	10	codec_id
op	332:45	0:0	10	=
water	332:47	0:0	10	config
op	332:53	0:0	10	->
water	332:55	0:0	10	guessed_video_codec_id
water	332:77	0:0	10	;
if	333:12	337:12	8	(! config -> no_video && config -> dummy_vctx -> codec_id != AV_CODEC_ID_NONE)
cond	333:16	334:48	9	! config -> no_video && config -> dummy_vctx -> codec_id != AV_CODEC_ID_NONE
op	333:16	0:0	10	!
water	333:17	0:0	10	config
op	333:23	0:0	10	->
water	333:25	0:0	10	no_video
op	333:34	0:0	10	&&
water	334:16	0:0	10	config
op	334:22	0:0	10	->
water	334:24	0:0	10	dummy_vctx
op	334:34	0:0	10	->
water	334:36	0:0	10	codec_id
op	334:45	0:0	10	!=
water	334:48	0:0	10	AV_CODEC_ID_NONE
stmts	334:66	337:12	9	
water	334:66	0:0	10	{
decl	335:16	335:118	10	AVCodecContext	*video_enc
op	335:42	0:0	10	=
call	335:44	335:117	11	avcodec_alloc_context3
arg	335:67	335:117	12	avcodec_find_encoder(config->dummy_vctx->codec_id)
call	335:67	335:116	13	avcodec_find_encoder
arg	335:88	335:116	14	config->dummy_vctx->codec_id
water	335:88	0:0	15	config
op	335:94	0:0	15	->
water	335:96	0:0	15	dummy_vctx
op	335:106	0:0	15	->
water	335:108	0:0	15	codec_id
call	336:16	336:51	10	add_codec
arg	336:26	336:32	11	stream
water	336:26	0:0	12	stream
arg	336:34	336:43	11	video_enc
water	336:34	0:0	12	video_enc
arg	336:45	336:51	11	config
water	336:45	0:0	12	config
water	336:52	0:0	10	;
water	337:12	0:0	10	}
water	338:8	0:0	8	}
call	339:8	339:40	6	av_dict_free
arg	339:21	339:40	7	&config->video_opts
op	339:21	0:0	8	&
water	339:22	0:0	8	config
op	339:28	0:0	8	->
water	339:30	0:0	8	video_opts
water	339:41	0:0	6	;
call	340:8	340:40	6	av_dict_free
arg	340:21	340:40	7	&config->audio_opts
op	340:21	0:0	8	&
water	340:22	0:0	8	config
op	340:28	0:0	8	->
water	340:30	0:0	8	audio_opts
water	340:41	0:0	6	;
call	341:8	341:48	6	avcodec_free_context
arg	341:29	341:48	7	&config->dummy_vctx
op	341:29	0:0	8	&
water	341:30	0:0	8	config
op	341:36	0:0	8	->
water	341:38	0:0	8	dummy_vctx
water	341:49	0:0	6	;
call	342:8	342:48	6	avcodec_free_context
arg	342:29	342:48	7	&config->dummy_actx
op	342:29	0:0	8	&
water	342:30	0:0	8	config
op	342:36	0:0	8	->
water	342:38	0:0	8	dummy_actx
water	342:49	0:0	6	;
water	343:8	0:0	6	config
op	343:14	0:0	6	->
water	343:16	0:0	6	no_video
op	343:25	0:0	6	=
water	343:27	0:0	6	0
water	343:28	0:0	6	;
water	344:8	0:0	6	config
op	344:14	0:0	6	->
water	344:16	0:0	6	no_audio
op	344:25	0:0	6	=
water	344:27	0:0	6	0
water	344:28	0:0	6	;
op	345:8	0:0	6	*
water	345:9	0:0	6	pstream
op	345:17	0:0	6	=
water	345:19	0:0	6	NULL
water	345:23	0:0	6	;
water	346:4	0:0	6	}
else	346:6	350:4	2
stmts	346:11	350:4	3	
if	346:11	350:4	4	(!av_strcasecmp (cmd ,"File" ) || !av_strcasecmp (cmd ,"ReadOnlyFile" ))
cond	346:15	347:49	5	!av_strcasecmp (cmd ,"File" ) || !av_strcasecmp (cmd ,"ReadOnlyFile" )
op	346:15	0:0	6	!
call	346:16	346:41	6	av_strcasecmp
arg	346:30	346:33	7	cmd
water	346:30	0:0	8	cmd
arg	346:35	346:41	7	"File"
water	346:35	0:0	8	"File"
op	346:43	0:0	6	||
op	347:15	0:0	6	!
call	347:16	347:49	6	av_strcasecmp
arg	347:30	347:33	7	cmd
water	347:30	0:0	8	cmd
arg	347:35	347:49	7	"ReadOnlyFile"
water	347:35	0:0	8	"ReadOnlyFile"
stmts	347:52	350:4	5	
water	347:52	0:0	6	{
call	348:8	349:17	6	ffserver_get_arg
arg	348:25	348:46	7	stream->feed_filename
water	348:25	0:0	8	stream
op	348:31	0:0	8	->
water	348:33	0:0	8	feed_filename
arg	348:48	348:77	7	sizeof(stream->feed_filename)
op	348:48	0:0	8	sizeof
water	348:54	0:0	8	(
water	348:55	0:0	8	stream
op	348:61	0:0	8	->
water	348:63	0:0	8	feed_filename
water	348:76	0:0	8	)
arg	349:16	349:17	7	p
water	349:16	0:0	8	p
water	349:18	0:0	6	;
water	350:4	0:0	6	}
else	350:6	354:4	2
stmts	350:11	354:4	3	
if	350:11	354:4	4	(!av_strcasecmp (cmd ,"UseDefaults" ))
cond	350:15	350:48	5	!av_strcasecmp (cmd ,"UseDefaults" )
op	350:15	0:0	6	!
call	350:16	350:48	6	av_strcasecmp
arg	350:30	350:33	7	cmd
water	350:30	0:0	8	cmd
arg	350:35	350:48	7	"UseDefaults"
water	350:35	0:0	8	"UseDefaults"
stmts	350:51	354:4	5	
water	350:51	0:0	6	{
if	351:8	352:65	6	(config -> stream_use_defaults > 1)
cond	351:12	351:42	7	config -> stream_use_defaults > 1
water	351:12	0:0	8	config
op	351:18	0:0	8	->
water	351:20	0:0	8	stream_use_defaults
op	351:40	0:0	8	>
water	351:42	0:0	8	1
stmts	352:12	352:65	7	
call	352:12	352:64	8	WARNING
arg	352:20	352:64	9	"Multiple UseDefaults/NoDefaults entries.\n"
water	352:20	0:0	10	"Multiple UseDefaults/NoDefaults entries.\n"
water	352:65	0:0	8	;
water	353:8	0:0	6	config
op	353:14	0:0	6	->
water	353:16	0:0	6	stream_use_defaults
op	353:36	0:0	6	=
water	353:38	0:0	6	3
water	353:39	0:0	6	;
water	354:4	0:0	6	}
else	354:6	358:4	2
stmts	354:11	358:4	3	
if	354:11	358:4	4	(!av_strcasecmp (cmd ,"NoDefaults" ))
cond	354:15	354:47	5	!av_strcasecmp (cmd ,"NoDefaults" )
op	354:15	0:0	6	!
call	354:16	354:47	6	av_strcasecmp
arg	354:30	354:33	7	cmd
water	354:30	0:0	8	cmd
arg	354:35	354:47	7	"NoDefaults"
water	354:35	0:0	8	"NoDefaults"
stmts	354:50	358:4	5	
water	354:50	0:0	6	{
if	355:8	356:65	6	(config -> stream_use_defaults > 1)
cond	355:12	355:42	7	config -> stream_use_defaults > 1
water	355:12	0:0	8	config
op	355:18	0:0	8	->
water	355:20	0:0	8	stream_use_defaults
op	355:40	0:0	8	>
water	355:42	0:0	8	1
stmts	356:12	356:65	7	
call	356:12	356:64	8	WARNING
arg	356:20	356:64	9	"Multiple UseDefaults/NoDefaults entries.\n"
water	356:20	0:0	10	"Multiple UseDefaults/NoDefaults entries.\n"
water	356:65	0:0	8	;
water	357:8	0:0	6	config
op	357:14	0:0	6	->
water	357:16	0:0	6	stream_use_defaults
op	357:36	0:0	6	=
water	357:38	0:0	6	2
water	357:39	0:0	6	;
water	358:4	0:0	6	}
else	358:6	360:4	2
stmts	358:11	360:4	3	
water	358:11	0:0	4	{
call	359:8	359:66	4	ERROR
arg	359:14	359:61	5	"Invalid entry '%s' inside <Stream></Stream>\n"
water	359:14	0:0	6	"Invalid entry '%s' inside <Stream></Stream>\n"
arg	359:63	359:66	5	cmd
water	359:63	0:0	6	cmd
water	359:67	0:0	4	;
water	360:4	0:0	4	}
return	361:4	361:12	2	0
water	361:11	0:0	3	0
label	362:2	362:7	2	nomem :
call	363:4	363:59	2	av_log
arg	363:11	363:15	3	NULL
water	363:11	0:0	4	NULL
arg	363:17	363:29	3	AV_LOG_ERROR
water	363:17	0:0	4	AV_LOG_ERROR
arg	363:31	363:59	3	"Out of memory. Aborting.\n"
water	363:31	0:0	4	"Out of memory. Aborting.\n"
water	363:60	0:0	2	;
call	364:4	364:36	2	av_dict_free
arg	364:17	364:36	3	&config->video_opts
op	364:17	0:0	4	&
water	364:18	0:0	4	config
op	364:24	0:0	4	->
water	364:26	0:0	4	video_opts
water	364:37	0:0	2	;
call	365:4	365:36	2	av_dict_free
arg	365:17	365:36	3	&config->audio_opts
op	365:17	0:0	4	&
water	365:18	0:0	4	config
op	365:24	0:0	4	->
water	365:26	0:0	4	audio_opts
water	365:37	0:0	2	;
call	366:4	366:44	2	avcodec_free_context
arg	366:25	366:44	3	&config->dummy_vctx
op	366:25	0:0	4	&
water	366:26	0:0	4	config
op	366:32	0:0	4	->
water	366:34	0:0	4	dummy_vctx
water	366:45	0:0	2	;
call	367:4	367:44	2	avcodec_free_context
arg	367:25	367:44	3	&config->dummy_actx
op	367:25	0:0	4	&
water	367:26	0:0	4	config
op	367:32	0:0	4	->
water	367:34	0:0	4	dummy_actx
water	367:45	0:0	2	;
return	368:4	368:26	2	AVERROR(ENOMEM)
call	368:11	368:25	3	AVERROR
arg	368:19	368:25	4	ENOMEM
water	368:19	0:0	5	ENOMEM
