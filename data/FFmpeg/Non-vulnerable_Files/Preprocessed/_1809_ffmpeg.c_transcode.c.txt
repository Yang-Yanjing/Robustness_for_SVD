func	1:0	121:0	0	static int	transcode
params	1:20	0:0	1	
param	1:21	1:25	2	void
stmnts	0:0	120:14	1	
decl	3:4	3:14	2	int	ret
water	3:11	0:0	2	,
decl	3:4	3:14	2	int	i
decl	4:4	4:23	2	AVFormatContext	*os
decl	5:4	5:21	2	OutputStream	*ost
decl	6:4	6:20	2	InputStream	*ist
decl	7:4	7:23	2	int64_t	timer_start
decl	8:4	8:37	2	int64_t	total_packets_written
op	8:34	0:0	2	=
water	8:36	0:0	2	0
water	9:4	0:0	2	ret
op	9:8	0:0	2	=
call	9:10	9:25	2	transcode_init
water	9:26	0:0	2	;
if	10:4	11:17	2	(ret < 0)
cond	10:8	10:14	3	ret < 0
water	10:8	0:0	4	ret
op	10:12	0:0	4	<
water	10:14	0:0	4	0
stmts	11:8	11:17	3	
goto	11:8	11:17	4	fail
water	11:13	0:0	5	fail
if	12:4	14:4	2	(stdin_interaction)
cond	12:8	12:8	3	stdin_interaction
water	12:8	0:0	4	stdin_interaction
stmts	12:27	14:4	3	
water	12:27	0:0	4	{
call	13:8	13:69	4	av_log
arg	13:15	13:19	5	NULL
water	13:15	0:0	6	NULL
arg	13:21	13:32	5	AV_LOG_INFO
water	13:21	0:0	6	AV_LOG_INFO
arg	13:34	13:69	5	"Press [q] to stop, [?] for help\n"
water	13:34	0:0	6	"Press [q] to stop, [?] for help\n"
water	13:70	0:0	4	;
water	14:4	0:0	4	}
water	15:4	0:0	2	timer_start
op	15:16	0:0	2	=
call	15:18	15:38	2	av_gettime_relative
water	15:39	0:0	2	;
if	17:4	18:17	2	(( ret =init_input_threads ( ) ) < 0)
cond	17:8	17:39	3	( ret =init_input_threads ( ) ) < 0
water	17:8	0:0	4	(
water	17:9	0:0	4	ret
op	17:13	0:0	4	=
call	17:15	17:34	4	init_input_threads
water	17:35	0:0	4	)
op	17:37	0:0	4	<
water	17:39	0:0	4	0
stmts	18:8	18:17	3	
goto	18:8	18:17	4	fail
water	18:13	0:0	5	fail
while	20:4	40:4	2	(! received_sigterm)
cond	20:11	20:12	3	! received_sigterm
op	20:11	0:0	4	!
water	20:12	0:0	4	received_sigterm
stmts	20:30	40:4	3	
water	20:30	0:0	4	{
decl	21:8	21:47	4	int64_t	cur_time
op	21:24	0:0	4	=
call	21:26	21:46	5	av_gettime_relative
if	23:8	25:21	4	(stdin_interaction)
cond	23:12	23:12	5	stdin_interaction
water	23:12	0:0	6	stdin_interaction
stmts	24:12	25:21	5	
if	24:12	25:21	6	(check_keyboard_interaction (cur_time ) < 0)
cond	24:16	24:55	7	check_keyboard_interaction (cur_time ) < 0
call	24:16	24:51	8	check_keyboard_interaction
arg	24:43	24:51	9	cur_time
water	24:43	0:0	10	cur_time
op	24:53	0:0	8	<
water	24:55	0:0	8	0
stmts	25:16	25:21	7	
break	25:16	25:21	8	
if	27:8	30:8	4	(!need_output ( ))
cond	27:12	27:25	5	!need_output ( )
op	27:12	0:0	6	!
call	27:13	27:25	6	need_output
stmts	27:28	30:8	5	
water	27:28	0:0	6	{
call	28:12	28:91	6	av_log
arg	28:19	28:23	7	NULL
water	28:19	0:0	8	NULL
arg	28:25	28:39	7	AV_LOG_VERBOSE
water	28:25	0:0	8	AV_LOG_VERBOSE
arg	28:41	28:91	7	"No more output streams to write to, finishing.\n"
water	28:41	0:0	8	"No more output streams to write to, finishing.\n"
water	28:92	0:0	6	;
break	29:12	29:17	6	
water	30:8	0:0	6	}
water	31:8	0:0	4	ret
op	31:12	0:0	4	=
call	31:14	31:29	4	transcode_step
water	31:30	0:0	4	;
if	32:8	37:8	4	(ret < 0 && ret != AVERROR_EOF)
cond	32:12	32:30	5	ret < 0 && ret != AVERROR_EOF
water	32:12	0:0	6	ret
op	32:16	0:0	6	<
water	32:18	0:0	6	0
op	32:20	0:0	6	&&
water	32:23	0:0	6	ret
op	32:27	0:0	6	!=
water	32:30	0:0	6	AVERROR_EOF
stmts	32:43	37:8	5	
water	32:43	0:0	6	{
decl	33:12	33:28	6	char	errbuf[128]
call	34:12	34:51	6	av_strerror
arg	34:24	34:27	7	ret
water	34:24	0:0	8	ret
arg	34:29	34:35	7	errbuf
water	34:29	0:0	8	errbuf
arg	34:37	34:51	7	sizeof(errbuf)
op	34:37	0:0	8	sizeof
water	34:43	0:0	8	(
water	34:44	0:0	8	errbuf
water	34:50	0:0	8	)
water	34:52	0:0	6	;
call	35:12	35:76	6	av_log
arg	35:19	35:23	7	NULL
water	35:19	0:0	8	NULL
arg	35:25	35:37	7	AV_LOG_ERROR
water	35:25	0:0	8	AV_LOG_ERROR
arg	35:39	35:68	7	"Error while filtering: %s\n"
water	35:39	0:0	8	"Error while filtering: %s\n"
arg	35:70	35:76	7	errbuf
water	35:70	0:0	8	errbuf
water	35:77	0:0	6	;
break	36:12	36:17	6	
water	37:8	0:0	6	}
call	39:8	39:45	4	print_report
arg	39:21	39:22	5	0
water	39:21	0:0	6	0
arg	39:24	39:35	5	timer_start
water	39:24	0:0	6	timer_start
arg	39:37	39:45	5	cur_time
water	39:37	0:0	6	cur_time
water	39:46	0:0	4	;
water	40:4	0:0	4	}
call	42:4	42:23	2	free_input_threads
water	42:24	0:0	2	;
for	45:4	50:4	2	(i = 0 ;i < nb_input_streams;i ++)
forinit	45:9	45:14	3	i = 0 ;
water	45:9	0:0	4	i
op	45:11	0:0	4	=
water	45:13	0:0	4	0
water	45:14	0:0	4	;
cond	45:16	45:20	3	i < nb_input_streams
water	45:16	0:0	4	i
op	45:18	0:0	4	<
water	45:20	0:0	4	nb_input_streams
forexpr	45:38	45:39	3	i ++
water	45:38	0:0	4	i
op	45:39	0:0	4	++
stmts	45:43	50:4	3	
water	45:43	0:0	4	{
water	46:8	0:0	4	ist
op	46:12	0:0	4	=
water	46:14	0:0	4	input_streams
op	46:27	0:0	4	[
water	46:28	0:0	4	i
op	46:29	0:0	4	]
water	46:30	0:0	4	;
if	47:8	49:8	4	(! input_files [ ist -> file_index ] -> eof_reached && ist -> decoding_needed)
cond	47:12	47:63	5	! input_files [ ist -> file_index ] -> eof_reached && ist -> decoding_needed
op	47:12	0:0	6	!
water	47:13	0:0	6	input_files
op	47:24	0:0	6	[
water	47:25	0:0	6	ist
op	47:28	0:0	6	->
water	47:30	0:0	6	file_index
op	47:40	0:0	6	]
op	47:41	0:0	6	->
water	47:43	0:0	6	eof_reached
op	47:55	0:0	6	&&
water	47:58	0:0	6	ist
op	47:61	0:0	6	->
water	47:63	0:0	6	decoding_needed
stmts	47:80	49:8	5	
water	47:80	0:0	6	{
call	48:12	48:45	6	process_input_packet
arg	48:33	48:36	7	ist
water	48:33	0:0	8	ist
arg	48:38	48:42	7	NULL
water	48:38	0:0	8	NULL
arg	48:44	48:45	7	0
water	48:44	0:0	8	0
water	48:46	0:0	6	;
water	49:8	0:0	6	}
water	50:4	0:0	4	}
call	51:4	51:19	2	flush_encoders
water	51:20	0:0	2	;
call	52:4	52:14	2	term_exit
water	52:15	0:0	2	;
for	54:4	68:4	2	(i = 0 ;i < nb_output_files;i ++)
forinit	54:9	54:14	3	i = 0 ;
water	54:9	0:0	4	i
op	54:11	0:0	4	=
water	54:13	0:0	4	0
water	54:14	0:0	4	;
cond	54:16	54:20	3	i < nb_output_files
water	54:16	0:0	4	i
op	54:18	0:0	4	<
water	54:20	0:0	4	nb_output_files
forexpr	54:37	54:38	3	i ++
water	54:37	0:0	4	i
op	54:38	0:0	4	++
stmts	54:42	68:4	3	
water	54:42	0:0	4	{
water	55:8	0:0	4	os
op	55:11	0:0	4	=
water	55:13	0:0	4	output_files
op	55:25	0:0	4	[
water	55:26	0:0	4	i
op	55:27	0:0	4	]
op	55:28	0:0	4	->
water	55:30	0:0	4	ctx
water	55:33	0:0	4	;
if	56:8	62:8	4	(! output_files [ i ] -> header_written)
cond	56:12	56:30	5	! output_files [ i ] -> header_written
op	56:12	0:0	6	!
water	56:13	0:0	6	output_files
op	56:25	0:0	6	[
water	56:26	0:0	6	i
op	56:27	0:0	6	]
op	56:28	0:0	6	->
water	56:30	0:0	6	header_written
stmts	56:46	62:8	5	
water	56:46	0:0	6	{
call	57:12	60:34	6	av_log
arg	57:19	57:23	7	NULL
water	57:19	0:0	8	NULL
arg	57:25	57:37	7	AV_LOG_ERROR
water	57:25	0:0	8	AV_LOG_ERROR
arg	58:19	59:71	7	"Nothing was written into output file %d (%s), because ""at least one of its streams received no packets.\n"
water	58:19	0:0	8	"Nothing was written into output file %d (%s), because "
water	59:19	0:0	8	"at least one of its streams received no packets.\n"
arg	60:19	60:20	7	i
water	60:19	0:0	8	i
arg	60:22	60:34	7	os->filename
water	60:22	0:0	8	os
op	60:24	0:0	8	->
water	60:26	0:0	8	filename
water	60:35	0:0	6	;
continue	61:12	61:20	6	
water	62:8	0:0	6	}
if	63:8	67:8	4	(( ret =av_write_trailer (os ) ) < 0)
cond	63:12	63:43	5	( ret =av_write_trailer (os ) ) < 0
water	63:12	0:0	6	(
water	63:13	0:0	6	ret
op	63:17	0:0	6	=
call	63:19	63:38	6	av_write_trailer
arg	63:36	63:38	7	os
water	63:36	0:0	8	os
water	63:39	0:0	6	)
op	63:41	0:0	6	<
water	63:43	0:0	6	0
stmts	63:46	67:8	5	
water	63:46	0:0	6	{
call	64:12	64:105	6	av_log
arg	64:19	64:23	7	NULL
water	64:19	0:0	8	NULL
arg	64:25	64:37	7	AV_LOG_ERROR
water	64:25	0:0	8	AV_LOG_ERROR
arg	64:39	64:74	7	"Error writing trailer of %s: %s\n"
water	64:39	0:0	8	"Error writing trailer of %s: %s\n"
arg	64:76	64:88	7	os->filename
water	64:76	0:0	8	os
op	64:78	0:0	8	->
water	64:80	0:0	8	filename
arg	64:90	64:105	7	av_err2str(ret)
call	64:90	64:104	8	av_err2str
arg	64:101	64:104	9	ret
water	64:101	0:0	10	ret
water	64:106	0:0	6	;
if	65:12	66:31	6	(exit_on_error)
cond	65:16	65:16	7	exit_on_error
water	65:16	0:0	8	exit_on_error
stmts	66:16	66:31	7	
call	66:16	66:30	8	exit_program
arg	66:29	66:30	9	1
water	66:29	0:0	10	1
water	66:31	0:0	8	;
water	67:8	0:0	6	}
water	68:4	0:0	4	}
call	70:4	70:54	2	print_report
arg	70:17	70:18	3	1
water	70:17	0:0	4	1
arg	70:20	70:31	3	timer_start
water	70:20	0:0	4	timer_start
arg	70:33	70:54	3	av_gettime_relative()
call	70:33	70:53	4	av_gettime_relative
water	70:55	0:0	2	;
for	72:4	78:4	2	(i = 0 ;i < nb_output_streams;i ++)
forinit	72:9	72:14	3	i = 0 ;
water	72:9	0:0	4	i
op	72:11	0:0	4	=
water	72:13	0:0	4	0
water	72:14	0:0	4	;
cond	72:16	72:20	3	i < nb_output_streams
water	72:16	0:0	4	i
op	72:18	0:0	4	<
water	72:20	0:0	4	nb_output_streams
forexpr	72:39	72:40	3	i ++
water	72:39	0:0	4	i
op	72:40	0:0	4	++
stmts	72:44	78:4	3	
water	72:44	0:0	4	{
water	73:8	0:0	4	ost
op	73:12	0:0	4	=
water	73:14	0:0	4	output_streams
op	73:28	0:0	4	[
water	73:29	0:0	4	i
op	73:30	0:0	4	]
water	73:31	0:0	4	;
if	74:8	76:8	4	(ost -> encoding_needed)
cond	74:12	74:17	5	ost -> encoding_needed
water	74:12	0:0	6	ost
op	74:15	0:0	6	->
water	74:17	0:0	6	encoding_needed
stmts	74:34	76:8	5	
water	74:34	0:0	6	{
call	75:12	75:44	6	av_freep
arg	75:21	75:44	7	&ost->enc_ctx->stats_in
op	75:21	0:0	8	&
water	75:22	0:0	8	ost
op	75:25	0:0	8	->
water	75:27	0:0	8	enc_ctx
op	75:34	0:0	8	->
water	75:36	0:0	8	stats_in
water	75:45	0:0	6	;
water	76:8	0:0	6	}
water	77:8	0:0	4	total_packets_written
op	77:30	0:0	4	+=
water	77:33	0:0	4	ost
op	77:36	0:0	4	->
water	77:38	0:0	4	packets_written
water	77:53	0:0	4	;
water	78:4	0:0	4	}
if	79:4	82:4	2	(! total_packets_written && ( abort_on_flags & ABORT_ON_FLAG_EMPTY_OUTPUT ))
cond	79:8	79:78	3	! total_packets_written && ( abort_on_flags & ABORT_ON_FLAG_EMPTY_OUTPUT )
op	79:8	0:0	4	!
water	79:9	0:0	4	total_packets_written
op	79:31	0:0	4	&&
water	79:34	0:0	4	(
water	79:35	0:0	4	abort_on_flags
op	79:50	0:0	4	&
water	79:52	0:0	4	ABORT_ON_FLAG_EMPTY_OUTPUT
water	79:78	0:0	4	)
stmts	79:81	82:4	3	
water	79:81	0:0	4	{
call	80:8	80:51	4	av_log
arg	80:15	80:19	5	NULL
water	80:15	0:0	6	NULL
arg	80:21	80:33	5	AV_LOG_FATAL
water	80:21	0:0	6	AV_LOG_FATAL
arg	80:35	80:51	5	"Empty output\n"
water	80:35	0:0	6	"Empty output\n"
water	80:52	0:0	4	;
call	81:8	81:22	4	exit_program
arg	81:21	81:22	5	1
water	81:21	0:0	6	1
water	81:23	0:0	4	;
water	82:4	0:0	4	}
for	84:4	91:4	2	(i = 0 ;i < nb_input_streams;i ++)
forinit	84:9	84:14	3	i = 0 ;
water	84:9	0:0	4	i
op	84:11	0:0	4	=
water	84:13	0:0	4	0
water	84:14	0:0	4	;
cond	84:16	84:20	3	i < nb_input_streams
water	84:16	0:0	4	i
op	84:18	0:0	4	<
water	84:20	0:0	4	nb_input_streams
forexpr	84:38	84:39	3	i ++
water	84:38	0:0	4	i
op	84:39	0:0	4	++
stmts	84:43	91:4	3	
water	84:43	0:0	4	{
water	85:8	0:0	4	ist
op	85:12	0:0	4	=
water	85:14	0:0	4	input_streams
op	85:27	0:0	4	[
water	85:28	0:0	4	i
op	85:29	0:0	4	]
water	85:30	0:0	4	;
if	86:8	90:8	4	(ist -> decoding_needed)
cond	86:12	86:17	5	ist -> decoding_needed
water	86:12	0:0	6	ist
op	86:15	0:0	6	->
water	86:17	0:0	6	decoding_needed
stmts	86:34	90:8	5	
water	86:34	0:0	6	{
call	87:12	87:38	6	avcodec_close
arg	87:26	87:38	7	ist->dec_ctx
water	87:26	0:0	8	ist
op	87:29	0:0	8	->
water	87:31	0:0	8	dec_ctx
water	87:39	0:0	6	;
if	88:12	89:49	6	(ist -> hwaccel_uninit)
cond	88:16	88:21	7	ist -> hwaccel_uninit
water	88:16	0:0	8	ist
op	88:19	0:0	8	->
water	88:21	0:0	8	hwaccel_uninit
stmts	89:16	89:49	7	
call	89:16	89:48	8	ist->hwaccel_uninit
arg	89:36	89:48	9	ist->dec_ctx
water	89:36	0:0	10	ist
op	89:39	0:0	10	->
water	89:41	0:0	10	dec_ctx
water	89:49	0:0	8	;
water	90:8	0:0	6	}
water	91:4	0:0	4	}
call	92:4	92:34	2	av_buffer_unref
arg	92:20	92:34	3	&hw_device_ctx
op	92:20	0:0	4	&
water	92:21	0:0	4	hw_device_ctx
water	92:35	0:0	2	;
water	94:4	0:0	2	ret
op	94:8	0:0	2	=
water	94:10	0:0	2	0
water	94:11	0:0	2	;
label	95:1	95:5	2	fail :
call	97:4	97:23	2	free_input_threads
water	97:24	0:0	2	;
if	99:4	119:4	2	(output_streams)
cond	99:8	99:8	3	output_streams
water	99:8	0:0	4	output_streams
stmts	99:24	119:4	3	
water	99:24	0:0	4	{
for	100:8	118:8	4	(i = 0 ;i < nb_output_streams;i ++)
forinit	100:13	100:18	5	i = 0 ;
water	100:13	0:0	6	i
op	100:15	0:0	6	=
water	100:17	0:0	6	0
water	100:18	0:0	6	;
cond	100:20	100:24	5	i < nb_output_streams
water	100:20	0:0	6	i
op	100:22	0:0	6	<
water	100:24	0:0	6	nb_output_streams
forexpr	100:43	100:44	5	i ++
water	100:43	0:0	6	i
op	100:44	0:0	6	++
stmts	100:48	118:8	5	
water	100:48	0:0	6	{
water	101:12	0:0	6	ost
op	101:16	0:0	6	=
water	101:18	0:0	6	output_streams
op	101:32	0:0	6	[
water	101:33	0:0	6	i
op	101:34	0:0	6	]
water	101:35	0:0	6	;
if	102:12	117:12	6	(ost)
cond	102:16	102:16	7	ost
water	102:16	0:0	8	ost
stmts	102:21	117:12	7	
water	102:21	0:0	8	{
if	103:16	109:16	8	(ost -> logfile)
cond	103:20	103:25	9	ost -> logfile
water	103:20	0:0	10	ost
op	103:23	0:0	10	->
water	103:25	0:0	10	logfile
stmts	103:34	109:16	9	
water	103:34	0:0	10	{
if	104:20	107:58	10	(fclose (ost -> logfile ))
cond	104:24	104:43	11	fclose (ost -> logfile )
call	104:24	104:43	12	fclose
arg	104:31	104:43	13	ost->logfile
water	104:31	0:0	14	ost
op	104:34	0:0	14	->
water	104:36	0:0	14	logfile
stmts	105:24	107:58	11	
call	105:24	107:57	12	av_log
arg	105:31	105:35	13	NULL
water	105:31	0:0	14	NULL
arg	105:37	105:49	13	AV_LOG_ERROR
water	105:37	0:0	14	AV_LOG_ERROR
arg	106:31	106:90	13	"Error closing logfile, loss of information possible: %s\n"
water	106:31	0:0	14	"Error closing logfile, loss of information possible: %s\n"
arg	107:31	107:57	13	av_err2str(AVERROR(errno))
call	107:31	107:56	14	av_err2str
arg	107:42	107:56	15	AVERROR(errno)
call	107:42	107:55	16	AVERROR
arg	107:50	107:55	17	errno
water	107:50	0:0	18	errno
water	107:58	0:0	12	;
water	108:20	0:0	10	ost
op	108:23	0:0	10	->
water	108:25	0:0	10	logfile
op	108:33	0:0	10	=
water	108:35	0:0	10	NULL
water	108:39	0:0	10	;
water	109:16	0:0	10	}
call	110:16	110:44	8	av_freep
arg	110:25	110:44	9	&ost->forced_kf_pts
op	110:25	0:0	10	&
water	110:26	0:0	10	ost
op	110:29	0:0	10	->
water	110:31	0:0	10	forced_kf_pts
water	110:45	0:0	8	;
call	111:16	111:35	8	av_freep
arg	111:25	111:35	9	&ost->apad
op	111:25	0:0	10	&
water	111:26	0:0	10	ost
op	111:29	0:0	10	->
water	111:31	0:0	10	apad
water	111:36	0:0	8	;
call	112:16	112:42	8	av_freep
arg	112:25	112:42	9	&ost->disposition
op	112:25	0:0	10	&
water	112:26	0:0	10	ost
op	112:29	0:0	10	->
water	112:31	0:0	10	disposition
water	112:43	0:0	8	;
call	113:16	113:47	8	av_dict_free
arg	113:29	113:47	9	&ost->encoder_opts
op	113:29	0:0	10	&
water	113:30	0:0	10	ost
op	113:33	0:0	10	->
water	113:35	0:0	10	encoder_opts
water	113:48	0:0	8	;
call	114:16	114:43	8	av_dict_free
arg	114:29	114:43	9	&ost->sws_dict
op	114:29	0:0	10	&
water	114:30	0:0	10	ost
op	114:33	0:0	10	->
water	114:35	0:0	10	sws_dict
water	114:44	0:0	8	;
call	115:16	115:43	8	av_dict_free
arg	115:29	115:43	9	&ost->swr_opts
op	115:29	0:0	10	&
water	115:30	0:0	10	ost
op	115:33	0:0	10	->
water	115:35	0:0	10	swr_opts
water	115:44	0:0	8	;
call	116:16	116:48	8	av_dict_free
arg	116:29	116:48	9	&ost->resample_opts
op	116:29	0:0	10	&
water	116:30	0:0	10	ost
op	116:33	0:0	10	->
water	116:35	0:0	10	resample_opts
water	116:49	0:0	8	;
water	117:12	0:0	8	}
water	118:8	0:0	6	}
water	119:4	0:0	4	}
return	120:4	120:14	2	ret
water	120:11	0:0	3	ret
