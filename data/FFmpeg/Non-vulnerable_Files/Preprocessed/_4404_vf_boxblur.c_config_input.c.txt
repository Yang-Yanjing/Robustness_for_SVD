func	1:0	51:4	0	static int	config_input
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
stmnts	0:0	50:30	1	
decl	3:4	3:72	2	const AVPixFmtDescriptor	*desc
op	3:35	0:0	2	=
call	3:37	3:71	3	av_pix_fmt_desc_get
arg	3:57	3:71	4	inlink->format
water	3:57	0:0	5	inlink
op	3:63	0:0	5	->
water	3:65	0:0	5	format
decl	4:4	4:41	2	AVFilterContext	*ctx
op	4:28	0:0	2	=
water	4:30	0:0	2	inlink
op	4:36	0:0	2	->
water	4:38	0:0	2	dst
decl	5:4	5:33	2	BoxBlurContext	*s
op	5:22	0:0	2	=
water	5:24	0:0	2	ctx
op	5:27	0:0	2	->
water	5:29	0:0	2	priv
decl	6:4	6:36	2	int	w
op	6:10	0:0	2	=
water	6:12	0:0	2	inlink
op	6:18	0:0	2	->
water	6:20	0:0	2	w
water	6:21	0:0	2	,
decl	6:4	6:36	2	int	h
op	6:25	0:0	2	=
water	6:27	0:0	2	inlink
op	6:33	0:0	2	->
water	6:35	0:0	2	h
decl	7:4	7:14	2	int	cw
water	7:10	0:0	2	,
decl	7:4	7:14	2	int	ch
decl	8:4	8:35	2	double	var_values[VARS_NB]
water	8:30	0:0	2	,
decl	8:4	8:35	2	double	res
decl	9:4	9:14	2	char	*expr
decl	10:4	10:11	2	int	ret
if	11:4	13:30	2	(! ( s -> temp [ 0 ] =av_malloc (2* FFMAX (w ,h ) ) ) || ! ( s -> temp [ 1 ] =av_malloc (2* FFMAX (w ,h ) ) ))
cond	11:8	12:47	3	! ( s -> temp [ 0 ] =av_malloc (2* FFMAX (w ,h ) ) ) || ! ( s -> temp [ 1 ] =av_malloc (2* FFMAX (w ,h ) ) )
op	11:8	0:0	4	!
water	11:9	0:0	4	(
water	11:10	0:0	4	s
op	11:11	0:0	4	->
water	11:13	0:0	4	temp
op	11:17	0:0	4	[
water	11:18	0:0	4	0
op	11:19	0:0	4	]
op	11:21	0:0	4	=
call	11:23	11:46	4	av_malloc
arg	11:33	11:46	5	2*FFMAX(w,h)
water	11:33	0:0	6	2
call	11:34	11:45	6	*FFMAX
arg	11:41	11:42	7	w
water	11:41	0:0	8	w
arg	11:44	11:45	7	h
water	11:44	0:0	8	h
water	11:47	0:0	4	)
op	11:49	0:0	4	||
op	12:8	0:0	4	!
water	12:9	0:0	4	(
water	12:10	0:0	4	s
op	12:11	0:0	4	->
water	12:13	0:0	4	temp
op	12:17	0:0	4	[
water	12:18	0:0	4	1
op	12:19	0:0	4	]
op	12:21	0:0	4	=
call	12:23	12:46	4	av_malloc
arg	12:33	12:46	5	2*FFMAX(w,h)
water	12:33	0:0	6	2
call	12:34	12:45	6	*FFMAX
arg	12:41	12:42	7	w
water	12:41	0:0	8	w
arg	12:44	12:45	7	h
water	12:44	0:0	8	h
water	12:47	0:0	4	)
stmts	13:8	13:30	3	
return	13:8	13:30	4	AVERROR(ENOMEM)
call	13:15	13:29	5	AVERROR
arg	13:23	13:29	6	ENOMEM
water	13:23	0:0	7	ENOMEM
water	14:4	0:0	2	s
op	14:5	0:0	2	->
water	14:7	0:0	2	hsub
op	14:12	0:0	2	=
water	14:14	0:0	2	desc
op	14:18	0:0	2	->
water	14:20	0:0	2	log2_chroma_w
water	14:33	0:0	2	;
water	15:4	0:0	2	s
op	15:5	0:0	2	->
water	15:7	0:0	2	vsub
op	15:12	0:0	2	=
water	15:14	0:0	2	desc
op	15:18	0:0	2	->
water	15:20	0:0	2	log2_chroma_h
water	15:33	0:0	2	;
water	16:4	0:0	2	var_values
op	16:14	0:0	2	[
water	16:15	0:0	2	VAR_W
op	16:20	0:0	2	]
op	16:28	0:0	2	=
water	16:30	0:0	2	inlink
op	16:36	0:0	2	->
water	16:38	0:0	2	w
water	16:39	0:0	2	;
water	17:4	0:0	2	var_values
op	17:14	0:0	2	[
water	17:15	0:0	2	VAR_H
op	17:20	0:0	2	]
op	17:28	0:0	2	=
water	17:30	0:0	2	inlink
op	17:36	0:0	2	->
water	17:38	0:0	2	h
water	17:39	0:0	2	;
water	18:4	0:0	2	var_values
op	18:14	0:0	2	[
water	18:15	0:0	2	VAR_CW
op	18:21	0:0	2	]
op	18:23	0:0	2	=
water	18:25	0:0	2	cw
op	18:28	0:0	2	=
water	18:30	0:0	2	w
op	18:31	0:0	2	>>
water	18:33	0:0	2	s
op	18:34	0:0	2	->
water	18:36	0:0	2	hsub
water	18:40	0:0	2	;
water	19:4	0:0	2	var_values
op	19:14	0:0	2	[
water	19:15	0:0	2	VAR_CH
op	19:21	0:0	2	]
op	19:23	0:0	2	=
water	19:25	0:0	2	ch
op	19:28	0:0	2	=
water	19:30	0:0	2	h
op	19:31	0:0	2	>>
water	19:33	0:0	2	s
op	19:34	0:0	2	->
water	19:36	0:0	2	vsub
water	19:40	0:0	2	;
water	20:4	0:0	2	var_values
op	20:14	0:0	2	[
water	20:15	0:0	2	VAR_HSUB
op	20:23	0:0	2	]
op	20:28	0:0	2	=
water	20:30	0:0	2	1
op	20:31	0:0	2	<<
water	20:33	0:0	2	s
op	20:34	0:0	2	->
water	20:36	0:0	2	hsub
water	20:40	0:0	2	;
water	21:4	0:0	2	var_values
op	21:14	0:0	2	[
water	21:15	0:0	2	VAR_VSUB
op	21:23	0:0	2	]
op	21:28	0:0	2	=
water	21:30	0:0	2	1
op	21:31	0:0	2	<<
water	21:33	0:0	2	s
op	21:34	0:0	2	->
water	21:36	0:0	2	vsub
water	21:40	0:0	2	;
water	23:4	0:0	2	expr
op	23:9	0:0	2	=
water	23:11	0:0	2	s
op	23:12	0:0	2	->
water	23:14	0:0	2	comp
water	24:4	0:0	2	ret
op	24:8	0:0	2	=
call	24:10	25:69	2	av_expr_parse_and_eval
arg	24:33	24:37	3	&res
op	24:33	0:0	4	&
water	24:34	0:0	4	res
arg	24:39	24:43	3	expr
water	24:39	0:0	4	expr
arg	24:45	24:54	3	var_names
water	24:45	0:0	4	var_names
arg	24:56	24:66	3	var_values
water	24:56	0:0	4	var_values
arg	25:33	25:37	3	NULL
water	25:33	0:0	4	NULL
arg	25:39	25:43	3	NULL
water	25:39	0:0	4	NULL
arg	25:45	25:49	3	NULL
water	25:45	0:0	4	NULL
arg	25:51	25:55	3	NULL
water	25:51	0:0	4	NULL
arg	25:57	25:61	3	NULL
water	25:57	0:0	4	NULL
arg	25:63	25:64	3	0
water	25:63	0:0	4	0
arg	25:66	25:69	3	ctx
water	25:66	0:0	4	ctx
water	25:70	0:0	2	;
water	26:4	0:0	2	s
op	26:5	0:0	2	->
water	26:7	0:0	2	comp
water	27:4	0:0	2	if
water	27:7	0:0	2	(
water	27:8	0:0	2	ret
op	27:12	0:0	2	<
water	27:14	0:0	2	0
water	27:15	0:0	2	)
water	27:17	0:0	2	{
water	28:8	0:0	2	av_log
water	28:14	0:0	2	(
water	28:15	0:0	2	NULL
water	28:19	0:0	2	,
water	28:21	0:0	2	AV_LOG_ERROR
water	28:33	0:0	2	,
water	29:15	0:0	2	"Error when evaluating "
water	30:8	0:0	2	return
water	30:15	0:0	2	ret
water	30:18	0:0	2	;
water	31:4	0:0	2	}
call	32:4	32:25	2	EVAL_RADIUS_EXPR
arg	32:21	32:25	3	luma
water	32:21	0:0	4	luma
water	32:26	0:0	2	;
call	33:4	33:27	2	EVAL_RADIUS_EXPR
arg	33:21	33:27	3	chroma
water	33:21	0:0	4	chroma
water	33:28	0:0	2	;
call	34:4	34:26	2	EVAL_RADIUS_EXPR
arg	34:21	34:26	3	alpha
water	34:21	0:0	4	alpha
water	34:27	0:0	2	;
call	35:4	43:23	2	av_log
arg	35:11	35:14	3	ctx
water	35:11	0:0	4	ctx
arg	35:16	35:30	3	AV_LOG_VERBOSE
water	35:16	0:0	4	AV_LOG_VERBOSE
arg	36:11	39:48	3	"luma_radius:%d luma_power:%d ""chroma_radius:%d chroma_power:%d ""alpha_radius:%d alpha_power:%d ""w:%d chroma_w:%d h:%d chroma_h:%d\n"
water	36:11	0:0	4	"luma_radius:%d luma_power:%d "
water	37:11	0:0	4	"chroma_radius:%d chroma_power:%d "
water	38:11	0:0	4	"alpha_radius:%d alpha_power:%d "
water	39:11	0:0	4	"w:%d chroma_w:%d h:%d chroma_h:%d\n"
arg	40:11	40:33	3	s->luma_param.radius
water	40:11	0:0	4	s
op	40:12	0:0	4	->
water	40:14	0:0	4	luma_param
op	40:26	0:0	4	.
water	40:27	0:0	4	radius
arg	40:35	40:56	3	s->luma_param.power
water	40:35	0:0	4	s
op	40:36	0:0	4	->
water	40:38	0:0	4	luma_param
op	40:50	0:0	4	.
water	40:51	0:0	4	power
arg	41:11	41:33	3	s->chroma_param.radius
water	41:11	0:0	4	s
op	41:12	0:0	4	->
water	41:14	0:0	4	chroma_param
op	41:26	0:0	4	.
water	41:27	0:0	4	radius
arg	41:35	41:56	3	s->chroma_param.power
water	41:35	0:0	4	s
op	41:36	0:0	4	->
water	41:38	0:0	4	chroma_param
op	41:50	0:0	4	.
water	41:51	0:0	4	power
arg	42:11	42:33	3	s->alpha_param.radius
water	42:11	0:0	4	s
op	42:12	0:0	4	->
water	42:14	0:0	4	alpha_param
op	42:26	0:0	4	.
water	42:27	0:0	4	radius
arg	42:35	42:56	3	s->alpha_param.power
water	42:35	0:0	4	s
op	42:36	0:0	4	->
water	42:38	0:0	4	alpha_param
op	42:50	0:0	4	.
water	42:51	0:0	4	power
arg	43:11	43:12	3	w
water	43:11	0:0	4	w
arg	43:14	43:16	3	cw
water	43:14	0:0	4	cw
arg	43:18	43:19	3	h
water	43:18	0:0	4	h
arg	43:21	43:23	3	ch
water	43:21	0:0	4	ch
water	43:24	0:0	2	;
water	45:4	0:0	2	if
water	45:7	0:0	2	(
water	45:8	0:0	2	s
op	45:9	0:0	2	->
water	45:11	0:0	2	comp
water	46:8	0:0	2	2
op	46:9	0:0	2	*
water	46:10	0:0	2	s
op	46:11	0:0	2	->
water	46:13	0:0	2	comp
water	47:8	0:0	2	av_log
water	47:14	0:0	2	(
water	47:15	0:0	2	ctx
water	47:18	0:0	2	,
water	47:20	0:0	2	AV_LOG_ERROR
water	47:32	0:0	2	,
water	48:15	0:0	2	"Invalid "
water	49:15	0:0	2	s
op	49:16	0:0	2	->
water	49:18	0:0	2	comp
water	50:8	0:0	2	return
call	50:15	50:29	2	AVERROR
arg	50:23	50:29	3	EINVAL
water	50:23	0:0	4	EINVAL
water	50:30	0:0	2	;
