func	1:0	50:0	0	int	ff_sdp_parse
params	1:16	0:0	1	
param	1:17	1:35	2	AVFormatContext *	s
param	1:37	1:56	2	const char *	content
stmnts	0:0	49:12	1	
decl	3:4	3:32	2	RTSPState	*rt
op	3:18	0:0	2	=
water	3:20	0:0	2	s
op	3:21	0:0	2	->
water	3:23	0:0	2	priv_data
decl	4:4	4:17	2	const char	*p
decl	5:4	5:17	2	int	letter
water	5:14	0:0	2	,
decl	5:4	5:17	2	int	i
decl	14:4	14:23	2	char	buf[16384]
water	14:19	0:0	2	,
decl	14:4	14:23	2	char	*q
decl	15:4	15:69	2	SDPParseState	sdp_parse_state
op	15:34	0:0	2	=
water	15:36	0:0	2	{
water	15:38	0:0	2	{
water	15:40	0:0	2	0
water	15:42	0:0	2	}
water	15:44	0:0	2	}
water	15:45	0:0	2	,
decl	15:4	15:69	2	SDPParseState	*s1
op	15:51	0:0	2	=
op	15:53	0:0	2	&
water	15:54	0:0	2	sdp_parse_state
water	16:4	0:0	2	p
op	16:6	0:0	2	=
water	16:8	0:0	2	content
water	16:15	0:0	2	;
for	17:4	40:4	2	(;;)
forinit	17:9	17:9	3	;
water	17:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	17:13	40:4	3	
water	17:13	0:0	4	{
water	18:8	0:0	4	p
op	18:10	0:0	4	+=
call	18:13	18:34	4	strspn
arg	18:20	18:21	5	p
water	18:20	0:0	6	p
arg	18:23	18:34	5	SPACE_CHARS
water	18:23	0:0	6	SPACE_CHARS
water	18:35	0:0	4	;
water	19:8	0:0	4	letter
op	19:15	0:0	4	=
op	19:17	0:0	4	*
water	19:18	0:0	4	p
water	19:19	0:0	4	;
if	20:8	21:17	4	(letter == '\0')
cond	20:12	20:22	5	letter == '\0'
water	20:12	0:0	6	letter
op	20:19	0:0	6	==
water	20:22	0:0	6	'\0'
stmts	21:12	21:17	5	
break	21:12	21:17	6	
water	22:8	0:0	4	p
op	22:9	0:0	4	++
water	22:11	0:0	4	;
if	23:8	24:26	4	(* p != '=')
cond	23:12	23:18	5	* p != '='
op	23:12	0:0	6	*
water	23:13	0:0	6	p
op	23:15	0:0	6	!=
water	23:18	0:0	6	'='
stmts	24:12	24:26	5	
goto	24:12	24:26	6	next_line
water	24:17	0:0	7	next_line
water	25:8	0:0	4	p
op	25:9	0:0	4	++
water	25:11	0:0	4	;
water	27:8	0:0	4	q
op	27:10	0:0	4	=
water	27:12	0:0	4	buf
water	27:15	0:0	4	;
while	28:8	32:8	4	(* p != '\n' && * p != '\r' && * p != '\0')
cond	28:15	28:49	5	* p != '\n' && * p != '\r' && * p != '\0'
op	28:15	0:0	6	*
water	28:16	0:0	6	p
op	28:18	0:0	6	!=
water	28:21	0:0	6	'\n'
op	28:26	0:0	6	&&
op	28:29	0:0	6	*
water	28:30	0:0	6	p
op	28:32	0:0	6	!=
water	28:35	0:0	6	'\r'
op	28:40	0:0	6	&&
op	28:43	0:0	6	*
water	28:44	0:0	6	p
op	28:46	0:0	6	!=
water	28:49	0:0	6	'\0'
stmts	28:55	32:8	5	
water	28:55	0:0	6	{
if	29:12	30:25	6	(( q - buf ) < sizeof ( buf ) - 1)
cond	29:16	29:42	7	( q - buf ) < sizeof ( buf ) - 1
water	29:16	0:0	8	(
water	29:17	0:0	8	q
op	29:19	0:0	8	-
water	29:21	0:0	8	buf
water	29:24	0:0	8	)
op	29:26	0:0	8	<
op	29:28	0:0	8	sizeof
water	29:34	0:0	8	(
water	29:35	0:0	8	buf
water	29:38	0:0	8	)
op	29:40	0:0	8	-
water	29:42	0:0	8	1
stmts	30:16	30:25	7	
op	30:16	0:0	8	*
water	30:17	0:0	8	q
op	30:18	0:0	8	++
op	30:21	0:0	8	=
op	30:23	0:0	8	*
water	30:24	0:0	8	p
water	30:25	0:0	8	;
water	31:12	0:0	6	p
op	31:13	0:0	6	++
water	31:15	0:0	6	;
water	32:8	0:0	6	}
op	33:8	0:0	4	*
water	33:9	0:0	4	q
op	33:11	0:0	4	=
water	33:13	0:0	4	'\0'
water	33:17	0:0	4	;
call	34:8	34:41	4	sdp_parse_line
arg	34:23	34:24	5	s
water	34:23	0:0	6	s
arg	34:26	34:28	5	s1
water	34:26	0:0	6	s1
arg	34:30	34:36	5	letter
water	34:30	0:0	6	letter
arg	34:38	34:41	5	buf
water	34:38	0:0	6	buf
water	34:42	0:0	4	;
label	35:4	35:13	4	next_line :
while	36:8	37:15	4	(* p != '\n' && * p != '\0')
cond	36:15	36:35	5	* p != '\n' && * p != '\0'
op	36:15	0:0	6	*
water	36:16	0:0	6	p
op	36:18	0:0	6	!=
water	36:21	0:0	6	'\n'
op	36:26	0:0	6	&&
op	36:29	0:0	6	*
water	36:30	0:0	6	p
op	36:32	0:0	6	!=
water	36:35	0:0	6	'\0'
stmts	37:12	37:15	5	
water	37:12	0:0	6	p
op	37:13	0:0	6	++
water	37:15	0:0	6	;
if	38:8	39:15	4	(* p == '\n')
cond	38:12	38:18	5	* p == '\n'
op	38:12	0:0	6	*
water	38:13	0:0	6	p
op	38:15	0:0	6	==
water	38:18	0:0	6	'\n'
stmts	39:12	39:15	5	
water	39:12	0:0	6	p
op	39:13	0:0	6	++
water	39:15	0:0	6	;
water	40:4	0:0	4	}
for	41:4	42:54	2	(i = 0 ;i < s1 -> nb_default_include_source_addrs;i ++)
forinit	41:9	41:14	3	i = 0 ;
water	41:9	0:0	4	i
op	41:11	0:0	4	=
water	41:13	0:0	4	0
water	41:14	0:0	4	;
cond	41:16	41:24	3	i < s1 -> nb_default_include_source_addrs
water	41:16	0:0	4	i
op	41:18	0:0	4	<
water	41:20	0:0	4	s1
op	41:22	0:0	4	->
water	41:24	0:0	4	nb_default_include_source_addrs
forexpr	41:57	41:58	3	i ++
water	41:57	0:0	4	i
op	41:58	0:0	4	++
stmts	42:8	42:54	3	
call	42:8	42:53	4	av_freep
arg	42:17	42:53	5	&s1->default_include_source_addrs[i]
op	42:17	0:0	6	&
water	42:18	0:0	6	s1
op	42:20	0:0	6	->
water	42:22	0:0	6	default_include_source_addrs
op	42:50	0:0	6	[
water	42:51	0:0	6	i
op	42:52	0:0	6	]
water	42:54	0:0	4	;
call	43:4	43:46	2	av_freep
arg	43:13	43:46	3	&s1->default_include_source_addrs
op	43:13	0:0	4	&
water	43:14	0:0	4	s1
op	43:16	0:0	4	->
water	43:18	0:0	4	default_include_source_addrs
water	43:47	0:0	2	;
for	44:4	45:54	2	(i = 0 ;i < s1 -> nb_default_exclude_source_addrs;i ++)
forinit	44:9	44:14	3	i = 0 ;
water	44:9	0:0	4	i
op	44:11	0:0	4	=
water	44:13	0:0	4	0
water	44:14	0:0	4	;
cond	44:16	44:24	3	i < s1 -> nb_default_exclude_source_addrs
water	44:16	0:0	4	i
op	44:18	0:0	4	<
water	44:20	0:0	4	s1
op	44:22	0:0	4	->
water	44:24	0:0	4	nb_default_exclude_source_addrs
forexpr	44:57	44:58	3	i ++
water	44:57	0:0	4	i
op	44:58	0:0	4	++
stmts	45:8	45:54	3	
call	45:8	45:53	4	av_freep
arg	45:17	45:53	5	&s1->default_exclude_source_addrs[i]
op	45:17	0:0	6	&
water	45:18	0:0	6	s1
op	45:20	0:0	6	->
water	45:22	0:0	6	default_exclude_source_addrs
op	45:50	0:0	6	[
water	45:51	0:0	6	i
op	45:52	0:0	6	]
water	45:54	0:0	4	;
call	46:4	46:46	2	av_freep
arg	46:13	46:46	3	&s1->default_exclude_source_addrs
op	46:13	0:0	4	&
water	46:14	0:0	4	s1
op	46:16	0:0	4	->
water	46:18	0:0	4	default_exclude_source_addrs
water	46:47	0:0	2	;
water	47:4	0:0	2	rt
op	47:6	0:0	2	->
water	47:8	0:0	2	p
op	47:10	0:0	2	=
call	47:12	47:78	2	av_malloc_array
arg	47:28	47:51	3	rt->nb_rtsp_streams+1
water	47:28	0:0	4	rt
op	47:30	0:0	4	->
water	47:32	0:0	4	nb_rtsp_streams
op	47:48	0:0	4	+
water	47:50	0:0	4	1
arg	47:53	47:78	3	sizeof(structpollfd)*2
op	47:53	0:0	4	sizeof
water	47:59	0:0	4	(
water	47:60	0:0	4	struct
water	47:67	0:0	4	pollfd
water	47:73	0:0	4	)
op	47:75	0:0	4	*
water	47:77	0:0	4	2
water	47:79	0:0	2	;
if	48:4	48:38	2	(! rt -> p)
cond	48:8	48:13	3	! rt -> p
op	48:8	0:0	4	!
water	48:9	0:0	4	rt
op	48:11	0:0	4	->
water	48:13	0:0	4	p
stmts	48:16	48:38	3	
return	48:16	48:38	4	AVERROR(ENOMEM)
call	48:23	48:37	5	AVERROR
arg	48:31	48:37	6	ENOMEM
water	48:31	0:0	7	ENOMEM
return	49:4	49:12	2	0
water	49:11	0:0	3	0
