func	1:0	23:0	0	static void	bit_alloc_masking
params	1:29	0:0	1	
param	1:30	1:49	2	AC3EncodeContext *	s
stmnts	0:0	22:4	1	
decl	3:4	3:15	2	int	blk
water	3:11	0:0	2	,
decl	3:4	3:15	2	int	ch
for	4:4	22:4	2	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	4:9	4:16	3	blk = 0 ;
water	4:9	0:0	4	blk
op	4:13	0:0	4	=
water	4:15	0:0	4	0
water	4:16	0:0	4	;
cond	4:18	4:27	3	blk < s -> num_blocks
water	4:18	0:0	4	blk
op	4:22	0:0	4	<
water	4:24	0:0	4	s
op	4:25	0:0	4	->
water	4:27	0:0	4	num_blocks
forexpr	4:39	4:42	3	blk ++
water	4:39	0:0	4	blk
op	4:42	0:0	4	++
stmts	4:46	22:4	3	
water	4:46	0:0	4	{
decl	5:8	5:41	4	AC3Block	*block
op	5:24	0:0	4	=
op	5:26	0:0	4	&
water	5:27	0:0	4	s
op	5:28	0:0	4	->
water	5:30	0:0	4	blocks
op	5:36	0:0	4	[
water	5:37	0:0	4	blk
op	5:40	0:0	4	]
for	6:8	21:8	4	(ch = ! block -> cpl_in_use ;ch <= s -> channels;ch ++)
forinit	6:13	6:36	5	ch = ! block -> cpl_in_use ;
water	6:13	0:0	6	ch
op	6:16	0:0	6	=
op	6:18	0:0	6	!
water	6:19	0:0	6	block
op	6:24	0:0	6	->
water	6:26	0:0	6	cpl_in_use
water	6:36	0:0	6	;
cond	6:38	6:47	5	ch <= s -> channels
water	6:38	0:0	6	ch
op	6:41	0:0	6	<=
water	6:44	0:0	6	s
op	6:45	0:0	6	->
water	6:47	0:0	6	channels
forexpr	6:57	6:59	5	ch ++
water	6:57	0:0	6	ch
op	6:59	0:0	6	++
stmts	6:63	21:8	5	
water	6:63	0:0	6	{
if	10:12	20:12	6	(s -> exp_strategy [ ch ] [ blk ] != EXP_REUSE)
cond	10:16	10:44	7	s -> exp_strategy [ ch ] [ blk ] != EXP_REUSE
water	10:16	0:0	8	s
op	10:17	0:0	8	->
water	10:19	0:0	8	exp_strategy
op	10:31	0:0	8	[
water	10:32	0:0	8	ch
op	10:34	0:0	8	]
op	10:35	0:0	8	[
water	10:36	0:0	8	blk
op	10:39	0:0	8	]
op	10:41	0:0	8	!=
water	10:44	0:0	8	EXP_REUSE
stmts	10:55	20:12	7	
water	10:55	0:0	8	{
call	11:16	13:61	8	ff_ac3_bit_alloc_calc_psd
arg	11:42	11:56	9	block->exp[ch]
water	11:42	0:0	10	block
op	11:47	0:0	10	->
water	11:49	0:0	10	exp
op	11:52	0:0	10	[
water	11:53	0:0	10	ch
op	11:55	0:0	10	]
arg	11:58	11:75	9	s->start_freq[ch]
water	11:58	0:0	10	s
op	11:59	0:0	10	->
water	11:61	0:0	10	start_freq
op	11:71	0:0	10	[
water	11:72	0:0	10	ch
op	11:74	0:0	10	]
arg	12:42	12:61	9	block->end_freq[ch]
water	12:42	0:0	10	block
op	12:47	0:0	10	->
water	12:49	0:0	10	end_freq
op	12:57	0:0	10	[
water	12:58	0:0	10	ch
op	12:60	0:0	10	]
arg	12:63	12:77	9	block->psd[ch]
water	12:63	0:0	10	block
op	12:68	0:0	10	->
water	12:70	0:0	10	psd
op	12:73	0:0	10	[
water	12:74	0:0	10	ch
op	12:76	0:0	10	]
arg	13:42	13:61	9	block->band_psd[ch]
water	13:42	0:0	10	block
op	13:47	0:0	10	->
water	13:49	0:0	10	band_psd
op	13:57	0:0	10	[
water	13:58	0:0	10	ch
op	13:60	0:0	10	]
water	13:62	0:0	8	;
call	14:16	19:58	8	ff_ac3_bit_alloc_calc_mask
arg	14:43	14:56	9	&s->bit_alloc
op	14:43	0:0	10	&
water	14:44	0:0	10	s
op	14:45	0:0	10	->
water	14:47	0:0	10	bit_alloc
arg	14:58	14:77	9	block->band_psd[ch]
water	14:58	0:0	10	block
op	14:63	0:0	10	->
water	14:65	0:0	10	band_psd
op	14:73	0:0	10	[
water	14:74	0:0	10	ch
op	14:76	0:0	10	]
arg	15:43	15:60	9	s->start_freq[ch]
water	15:43	0:0	10	s
op	15:44	0:0	10	->
water	15:46	0:0	10	start_freq
op	15:56	0:0	10	[
water	15:57	0:0	10	ch
op	15:59	0:0	10	]
arg	15:62	15:81	9	block->end_freq[ch]
water	15:62	0:0	10	block
op	15:67	0:0	10	->
water	15:69	0:0	10	end_freq
op	15:77	0:0	10	[
water	15:78	0:0	10	ch
op	15:80	0:0	10	]
arg	16:43	16:86	9	ff_ac3_fast_gain_tab[s->fast_gain_code[ch]]
water	16:43	0:0	10	ff_ac3_fast_gain_tab
op	16:63	0:0	10	[
water	16:64	0:0	10	s
op	16:65	0:0	10	->
water	16:67	0:0	10	fast_gain_code
op	16:81	0:0	10	[
water	16:82	0:0	10	ch
op	16:84	0:0	10	]
op	16:85	0:0	10	]
arg	17:43	17:63	9	ch==s->lfe_channel
water	17:43	0:0	10	ch
op	17:46	0:0	10	==
water	17:49	0:0	10	s
op	17:50	0:0	10	->
water	17:52	0:0	10	lfe_channel
arg	18:43	18:51	9	DBA_NONE
water	18:43	0:0	10	DBA_NONE
arg	18:53	18:54	9	0
water	18:53	0:0	10	0
arg	18:56	18:60	9	NULL
water	18:56	0:0	10	NULL
arg	18:62	18:66	9	NULL
water	18:62	0:0	10	NULL
arg	18:68	18:72	9	NULL
water	18:68	0:0	10	NULL
arg	19:43	19:58	9	block->mask[ch]
water	19:43	0:0	10	block
op	19:48	0:0	10	->
water	19:50	0:0	10	mask
op	19:54	0:0	10	[
water	19:55	0:0	10	ch
op	19:57	0:0	10	]
water	19:59	0:0	8	;
water	20:12	0:0	8	}
water	21:8	0:0	6	}
water	22:4	0:0	4	}
