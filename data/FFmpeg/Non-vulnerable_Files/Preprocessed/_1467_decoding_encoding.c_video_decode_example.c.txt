func	1:0	78:0	0	static void	video_decode_example
params	1:32	0:0	1	
param	1:33	1:56	2	const char *	outfilename
param	1:58	1:78	2	const char *	filename
stmnts	0:0	77:16	1	
decl	3:4	3:18	2	AVCodec	*codec
decl	4:4	4:27	2	AVCodecContext	*c
op	4:21	0:0	2	=
water	4:23	0:0	2	NULL
decl	5:4	5:19	2	int	frame_count
decl	6:4	6:11	2	FILE	*f
decl	7:4	7:18	2	AVFrame	*frame
decl	8:4	8:60	2	uint8_t	inbuf[INBUF_SIZE+AV_INPUT_BUFFER_PADDING_SIZE]
decl	9:4	9:18	2	AVPacket	avpkt
call	10:4	10:25	2	av_init_packet
arg	10:19	10:25	3	&avpkt
op	10:19	0:0	4	&
water	10:20	0:0	4	avpkt
water	10:26	0:0	2	;
call	12:4	12:62	2	memset
arg	12:11	12:29	3	inbuf+INBUF_SIZE
water	12:11	0:0	4	inbuf
op	12:17	0:0	4	+
water	12:19	0:0	4	INBUF_SIZE
arg	12:31	12:32	3	0
water	12:31	0:0	4	0
arg	12:34	12:62	3	AV_INPUT_BUFFER_PADDING_SIZE
water	12:34	0:0	4	AV_INPUT_BUFFER_PADDING_SIZE
water	12:63	0:0	2	;
call	13:4	13:64	2	printf
arg	13:11	13:41	3	"Decode video file %s to %s\n"
water	13:11	0:0	4	"Decode video file %s to %s\n"
arg	13:43	13:51	3	filename
water	13:43	0:0	4	filename
arg	13:53	13:64	3	outfilename
water	13:53	0:0	4	outfilename
water	13:65	0:0	2	;
water	15:4	0:0	2	codec
op	15:10	0:0	2	=
call	15:12	15:55	2	avcodec_find_decoder
arg	15:33	15:55	3	AV_CODEC_ID_MPEG1VIDEO
water	15:33	0:0	4	AV_CODEC_ID_MPEG1VIDEO
water	15:56	0:0	2	;
if	16:4	19:4	2	(! codec)
cond	16:8	16:9	3	! codec
op	16:8	0:0	4	!
water	16:9	0:0	4	codec
stmts	16:16	19:4	3	
water	16:16	0:0	4	{
call	17:8	17:43	4	fprintf
arg	17:16	17:22	5	stderr
water	17:16	0:0	6	stderr
arg	17:24	17:43	5	"Codec not found\n"
water	17:24	0:0	6	"Codec not found\n"
water	17:44	0:0	4	;
call	18:8	18:14	4	exit
arg	18:13	18:14	5	1
water	18:13	0:0	6	1
water	18:15	0:0	4	;
water	19:4	0:0	4	}
water	20:4	0:0	2	c
op	20:6	0:0	2	=
call	20:8	20:36	2	avcodec_alloc_context3
arg	20:31	20:36	3	codec
water	20:31	0:0	4	codec
water	20:37	0:0	2	;
if	21:4	24:4	2	(! c)
cond	21:8	21:9	3	! c
op	21:8	0:0	4	!
water	21:9	0:0	4	c
stmts	21:12	24:4	3	
water	21:12	0:0	4	{
call	22:8	22:66	4	fprintf
arg	22:16	22:22	5	stderr
water	22:16	0:0	6	stderr
arg	22:24	22:66	5	"Could not allocate video codec context\n"
water	22:24	0:0	6	"Could not allocate video codec context\n"
water	22:67	0:0	4	;
call	23:8	23:14	4	exit
arg	23:13	23:14	5	1
water	23:13	0:0	6	1
water	23:15	0:0	4	;
water	24:4	0:0	4	}
if	25:4	26:43	2	(codec -> capabilities & AV_CODEC_CAP_TRUNCATED)
cond	25:8	25:30	3	codec -> capabilities & AV_CODEC_CAP_TRUNCATED
water	25:8	0:0	4	codec
op	25:13	0:0	4	->
water	25:15	0:0	4	capabilities
op	25:28	0:0	4	&
water	25:30	0:0	4	AV_CODEC_CAP_TRUNCATED
stmts	26:8	26:43	3	
water	26:8	0:0	4	c
op	26:9	0:0	4	->
water	26:11	0:0	4	flags
op	26:17	0:0	4	|=
water	26:20	0:0	4	AV_CODEC_FLAG_TRUNCATED
water	26:43	0:0	4	;
if	31:4	34:4	2	(avcodec_open2 (c ,codec ,NULL ) < 0)
cond	31:8	31:40	3	avcodec_open2 (c ,codec ,NULL ) < 0
call	31:8	31:36	4	avcodec_open2
arg	31:22	31:23	5	c
water	31:22	0:0	6	c
arg	31:25	31:30	5	codec
water	31:25	0:0	6	codec
arg	31:32	31:36	5	NULL
water	31:32	0:0	6	NULL
op	31:38	0:0	4	<
water	31:40	0:0	4	0
stmts	31:43	34:4	3	
water	31:43	0:0	4	{
call	32:8	32:48	4	fprintf
arg	32:16	32:22	5	stderr
water	32:16	0:0	6	stderr
arg	32:24	32:48	5	"Could not open codec\n"
water	32:24	0:0	6	"Could not open codec\n"
water	32:49	0:0	4	;
call	33:8	33:14	4	exit
arg	33:13	33:14	5	1
water	33:13	0:0	6	1
water	33:15	0:0	4	;
water	34:4	0:0	4	}
water	35:4	0:0	2	f
op	35:6	0:0	2	=
call	35:8	35:28	2	fopen
arg	35:14	35:22	3	filename
water	35:14	0:0	4	filename
arg	35:24	35:28	3	"rb"
water	35:24	0:0	4	"rb"
water	35:29	0:0	2	;
if	36:4	39:4	2	(! f)
cond	36:8	36:9	3	! f
op	36:8	0:0	4	!
water	36:9	0:0	4	f
stmts	36:12	39:4	3	
water	36:12	0:0	4	{
call	37:8	37:55	4	fprintf
arg	37:16	37:22	5	stderr
water	37:16	0:0	6	stderr
arg	37:24	37:45	5	"Could not open %s\n"
water	37:24	0:0	6	"Could not open %s\n"
arg	37:47	37:55	5	filename
water	37:47	0:0	6	filename
water	37:56	0:0	4	;
call	38:8	38:14	4	exit
arg	38:13	38:14	5	1
water	38:13	0:0	6	1
water	38:15	0:0	4	;
water	39:4	0:0	4	}
water	40:4	0:0	2	frame
op	40:10	0:0	2	=
call	40:12	40:27	2	av_frame_alloc
water	40:28	0:0	2	;
if	41:4	44:4	2	(! frame)
cond	41:8	41:9	3	! frame
op	41:8	0:0	4	!
water	41:9	0:0	4	frame
stmts	41:16	44:4	3	
water	41:16	0:0	4	{
call	42:8	42:58	4	fprintf
arg	42:16	42:22	5	stderr
water	42:16	0:0	6	stderr
arg	42:24	42:58	5	"Could not allocate video frame\n"
water	42:24	0:0	6	"Could not allocate video frame\n"
water	42:59	0:0	4	;
call	43:8	43:14	4	exit
arg	43:13	43:14	5	1
water	43:13	0:0	6	1
water	43:15	0:0	4	;
water	44:4	0:0	4	}
water	45:4	0:0	2	frame_count
op	45:16	0:0	2	=
water	45:18	0:0	2	0
water	45:19	0:0	2	;
for	46:4	66:4	2	(;;)
forinit	46:9	46:9	3	;
water	46:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	46:13	66:4	3	
water	46:13	0:0	4	{
water	47:8	0:0	4	avpkt
op	47:13	0:0	4	.
water	47:14	0:0	4	size
op	47:19	0:0	4	=
call	47:21	47:50	4	fread
arg	47:27	47:32	5	inbuf
water	47:27	0:0	6	inbuf
arg	47:34	47:35	5	1
water	47:34	0:0	6	1
arg	47:37	47:47	5	INBUF_SIZE
water	47:37	0:0	6	INBUF_SIZE
arg	47:49	47:50	5	f
water	47:49	0:0	6	f
water	47:51	0:0	4	;
if	48:8	49:17	4	(avpkt . size == 0)
cond	48:12	48:26	5	avpkt . size == 0
water	48:12	0:0	6	avpkt
op	48:17	0:0	6	.
water	48:18	0:0	6	size
op	48:23	0:0	6	==
water	48:26	0:0	6	0
stmts	49:12	49:17	5	
break	49:12	49:17	6	
water	62:8	0:0	4	avpkt
op	62:13	0:0	4	.
water	62:14	0:0	4	data
op	62:19	0:0	4	=
water	62:21	0:0	4	inbuf
water	62:26	0:0	4	;
while	63:8	65:23	4	(avpkt . size > 0)
cond	63:15	63:28	5	avpkt . size > 0
water	63:15	0:0	6	avpkt
op	63:20	0:0	6	.
water	63:21	0:0	6	size
op	63:26	0:0	6	>
water	63:28	0:0	6	0
stmts	64:12	65:23	5	
if	64:12	65:23	6	(decode_write_frame (outfilename ,c ,frame ,& frame_count ,& avpkt ,0 ) < 0)
cond	64:16	64:85	7	decode_write_frame (outfilename ,c ,frame ,& frame_count ,& avpkt ,0 ) < 0
call	64:16	64:81	8	decode_write_frame
arg	64:35	64:46	9	outfilename
water	64:35	0:0	10	outfilename
arg	64:48	64:49	9	c
water	64:48	0:0	10	c
arg	64:51	64:56	9	frame
water	64:51	0:0	10	frame
arg	64:58	64:70	9	&frame_count
op	64:58	0:0	10	&
water	64:59	0:0	10	frame_count
arg	64:72	64:78	9	&avpkt
op	64:72	0:0	10	&
water	64:73	0:0	10	avpkt
arg	64:80	64:81	9	0
water	64:80	0:0	10	0
op	64:83	0:0	8	<
water	64:85	0:0	8	0
stmts	65:16	65:23	7	
call	65:16	65:22	8	exit
arg	65:21	65:22	9	1
water	65:21	0:0	10	1
water	65:23	0:0	8	;
water	66:4	0:0	4	}
water	70:4	0:0	2	avpkt
op	70:9	0:0	2	.
water	70:10	0:0	2	data
op	70:15	0:0	2	=
water	70:17	0:0	2	NULL
water	70:21	0:0	2	;
water	71:4	0:0	2	avpkt
op	71:9	0:0	2	.
water	71:10	0:0	2	size
op	71:15	0:0	2	=
water	71:17	0:0	2	0
water	71:18	0:0	2	;
call	72:4	72:69	2	decode_write_frame
arg	72:23	72:34	3	outfilename
water	72:23	0:0	4	outfilename
arg	72:36	72:37	3	c
water	72:36	0:0	4	c
arg	72:39	72:44	3	frame
water	72:39	0:0	4	frame
arg	72:46	72:58	3	&frame_count
op	72:46	0:0	4	&
water	72:47	0:0	4	frame_count
arg	72:60	72:66	3	&avpkt
op	72:60	0:0	4	&
water	72:61	0:0	4	avpkt
arg	72:68	72:69	3	1
water	72:68	0:0	4	1
water	72:70	0:0	2	;
call	73:4	73:12	2	fclose
arg	73:11	73:12	3	f
water	73:11	0:0	4	f
water	73:13	0:0	2	;
call	74:4	74:19	2	avcodec_close
arg	74:18	74:19	3	c
water	74:18	0:0	4	c
water	74:20	0:0	2	;
call	75:4	75:13	2	av_free
arg	75:12	75:13	3	c
water	75:12	0:0	4	c
water	75:14	0:0	2	;
call	76:4	76:24	2	av_frame_free
arg	76:18	76:24	3	&frame
op	76:18	0:0	4	&
water	76:19	0:0	4	frame
water	76:25	0:0	2	;
call	77:4	77:15	2	printf
arg	77:11	77:15	3	"\n"
water	77:11	0:0	4	"\n"
water	77:16	0:0	2	;
