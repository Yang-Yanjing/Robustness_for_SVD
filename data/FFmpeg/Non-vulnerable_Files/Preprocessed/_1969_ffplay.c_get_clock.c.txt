func	1:0	11:0	0	static double	get_clock
params	1:23	0:0	1	
param	1:24	1:32	2	Clock *	c
stmnts	3:4	10:4	1	
if	3:4	4:18	2	(* c -> queue_serial != c -> serial)
cond	3:8	3:31	3	* c -> queue_serial != c -> serial
op	3:8	0:0	4	*
water	3:9	0:0	4	c
op	3:10	0:0	4	->
water	3:12	0:0	4	queue_serial
op	3:25	0:0	4	!=
water	3:28	0:0	4	c
op	3:29	0:0	4	->
water	3:31	0:0	4	serial
stmts	4:8	4:18	3	
return	4:8	4:18	4	NAN
water	4:15	0:0	5	NAN
if	5:4	7:4	2	(c -> paused)
cond	5:8	5:11	3	c -> paused
water	5:8	0:0	4	c
op	5:9	0:0	4	->
water	5:11	0:0	4	paused
stmts	5:19	7:4	3	
water	5:19	0:0	4	{
return	6:8	6:21	4	c->pts
water	6:15	0:0	5	c
op	6:16	0:0	5	->
water	6:18	0:0	5	pts
water	7:4	0:0	4	}
else	7:6	10:4	2
stmts	7:11	10:4	3	
water	7:11	0:0	4	{
decl	8:8	8:55	4	double	time
op	8:20	0:0	4	=
call	8:22	8:42	5	av_gettime_relative
op	8:44	0:0	4	/
water	8:46	0:0	4	1000000
op	8:53	0:0	4	.
water	8:54	0:0	4	0
return	9:8	9:80	4	c->pts_drift+time-(time-c->last_updated)*(1.0-c->speed)
water	9:15	0:0	5	c
op	9:16	0:0	5	->
water	9:18	0:0	5	pts_drift
op	9:28	0:0	5	+
water	9:30	0:0	5	time
op	9:35	0:0	5	-
water	9:37	0:0	5	(
water	9:38	0:0	5	time
op	9:43	0:0	5	-
water	9:45	0:0	5	c
op	9:46	0:0	5	->
water	9:48	0:0	5	last_updated
water	9:60	0:0	5	)
op	9:62	0:0	5	*
water	9:64	0:0	5	(
water	9:65	0:0	5	1
op	9:66	0:0	5	.
water	9:67	0:0	5	0
op	9:69	0:0	5	-
water	9:71	0:0	5	c
op	9:72	0:0	5	->
water	9:74	0:0	5	speed
water	9:79	0:0	5	)
water	10:4	0:0	4	}
