func	1:0	36:0	0	int	ff_adx_decode_header
params	1:24	0:0	1	
param	1:25	1:46	2	AVCodecContext *	avctx
param	1:48	1:66	2	const uint8_t *	buf
param	2:25	2:36	2	int	bufsize
param	2:38	2:54	2	int *	header_size
param	2:56	2:66	2	int *	coeff
stmnts	0:0	35:12	1	
decl	4:4	4:22	2	int	offset
water	4:14	0:0	2	,
decl	4:4	4:22	2	int	cutoff
if	5:4	6:34	2	(bufsize < 24)
cond	5:8	5:18	3	bufsize < 24
water	5:8	0:0	4	bufsize
op	5:16	0:0	4	<
water	5:18	0:0	4	24
stmts	6:8	6:34	3	
return	6:8	6:34	4	AVERROR_INVALIDDATA
water	6:15	0:0	5	AVERROR_INVALIDDATA
if	7:4	8:34	2	(AV_RB16 (buf ) != 0 x8000)
cond	7:8	7:25	3	AV_RB16 (buf ) != 0 x8000
call	7:8	7:19	4	AV_RB16
arg	7:16	7:19	5	buf
water	7:16	0:0	6	buf
op	7:21	0:0	4	!=
water	7:24	0:0	4	0
water	7:25	0:0	4	x8000
stmts	8:8	8:34	3	
return	8:8	8:34	4	AVERROR_INVALIDDATA
water	8:15	0:0	5	AVERROR_INVALIDDATA
water	9:4	0:0	2	offset
op	9:11	0:0	2	=
call	9:13	9:28	2	AV_RB16
arg	9:21	9:28	3	buf+2
water	9:21	0:0	4	buf
op	9:25	0:0	4	+
water	9:27	0:0	4	2
op	9:30	0:0	2	+
water	9:32	0:0	2	4
water	9:33	0:0	2	;
if	11:4	12:34	2	(bufsize >= offset && offset >= 6 &&memcmp (buf + offset - 6 ,"(c)CRI" ,6 ))
cond	11:8	11:80	3	bufsize >= offset && offset >= 6 &&memcmp (buf + offset - 6 ,"(c)CRI" ,6 )
water	11:8	0:0	4	bufsize
op	11:16	0:0	4	>=
water	11:19	0:0	4	offset
op	11:26	0:0	4	&&
water	11:29	0:0	4	offset
op	11:36	0:0	4	>=
water	11:39	0:0	4	6
op	11:41	0:0	4	&&
call	11:44	11:80	4	memcmp
arg	11:51	11:67	5	buf+offset-6
water	11:51	0:0	6	buf
op	11:55	0:0	6	+
water	11:57	0:0	6	offset
op	11:64	0:0	6	-
water	11:66	0:0	6	6
arg	11:69	11:77	5	"(c)CRI"
water	11:69	0:0	6	"(c)CRI"
arg	11:79	11:80	5	6
water	11:79	0:0	6	6
stmts	12:8	12:34	3	
return	12:8	12:34	4	AVERROR_INVALIDDATA
water	12:15	0:0	5	AVERROR_INVALIDDATA
if	14:4	17:4	2	(buf [ 4 ] != 3 || buf [ 5 ] != 18 || buf [ 6 ] != 4)
cond	14:8	14:49	3	buf [ 4 ] != 3 || buf [ 5 ] != 18 || buf [ 6 ] != 4
water	14:8	0:0	4	buf
op	14:11	0:0	4	[
water	14:12	0:0	4	4
op	14:13	0:0	4	]
op	14:15	0:0	4	!=
water	14:18	0:0	4	3
op	14:20	0:0	4	||
water	14:23	0:0	4	buf
op	14:26	0:0	4	[
water	14:27	0:0	4	5
op	14:28	0:0	4	]
op	14:30	0:0	4	!=
water	14:33	0:0	4	18
op	14:36	0:0	4	||
water	14:39	0:0	4	buf
op	14:42	0:0	4	[
water	14:43	0:0	4	6
op	14:44	0:0	4	]
op	14:46	0:0	4	!=
water	14:49	0:0	4	4
stmts	14:52	17:4	3	
water	14:52	0:0	4	{
call	15:8	15:66	4	avpriv_request_sample
arg	15:30	15:35	5	avctx
water	15:30	0:0	6	avctx
arg	15:37	15:66	5	"Support for this ADX format"
water	15:37	0:0	6	"Support for this ADX format"
water	15:67	0:0	4	;
return	16:8	16:35	4	AVERROR_PATCHWELCOME
water	16:15	0:0	5	AVERROR_PATCHWELCOME
water	17:4	0:0	4	}
water	19:4	0:0	2	avctx
op	19:9	0:0	2	->
water	19:11	0:0	2	channels
op	19:20	0:0	2	=
water	19:22	0:0	2	buf
op	19:25	0:0	2	[
water	19:26	0:0	2	7
op	19:27	0:0	2	]
water	19:28	0:0	2	;
if	20:4	21:34	2	(avctx -> channels <= 0 || avctx -> channels > 2)
cond	20:8	20:50	3	avctx -> channels <= 0 || avctx -> channels > 2
water	20:8	0:0	4	avctx
op	20:13	0:0	4	->
water	20:15	0:0	4	channels
op	20:24	0:0	4	<=
water	20:27	0:0	4	0
op	20:29	0:0	4	||
water	20:32	0:0	4	avctx
op	20:37	0:0	4	->
water	20:39	0:0	4	channels
op	20:48	0:0	4	>
water	20:50	0:0	4	2
stmts	21:8	21:34	3	
return	21:8	21:34	4	AVERROR_INVALIDDATA
water	21:15	0:0	5	AVERROR_INVALIDDATA
water	23:4	0:0	2	avctx
op	23:9	0:0	2	->
water	23:11	0:0	2	sample_rate
op	23:23	0:0	2	=
call	23:25	23:40	2	AV_RB32
arg	23:33	23:40	3	buf+8
water	23:33	0:0	4	buf
op	23:37	0:0	4	+
water	23:39	0:0	4	8
water	23:41	0:0	2	;
if	24:4	26:34	2	(avctx -> sample_rate < 1 || avctx -> sample_rate > INT_MAX / ( avctx -> channels * BLOCK_SIZE * 8 ))
cond	24:8	25:72	3	avctx -> sample_rate < 1 || avctx -> sample_rate > INT_MAX / ( avctx -> channels * BLOCK_SIZE * 8 )
water	24:8	0:0	4	avctx
op	24:13	0:0	4	->
water	24:15	0:0	4	sample_rate
op	24:27	0:0	4	<
water	24:29	0:0	4	1
op	24:31	0:0	4	||
water	25:8	0:0	4	avctx
op	25:13	0:0	4	->
water	25:15	0:0	4	sample_rate
op	25:27	0:0	4	>
water	25:29	0:0	4	INT_MAX
op	25:37	0:0	4	/
water	25:39	0:0	4	(
water	25:40	0:0	4	avctx
op	25:45	0:0	4	->
water	25:47	0:0	4	channels
op	25:56	0:0	4	*
water	25:58	0:0	4	BLOCK_SIZE
op	25:69	0:0	4	*
water	25:71	0:0	4	8
water	25:72	0:0	4	)
stmts	26:8	26:34	3	
return	26:8	26:34	4	AVERROR_INVALIDDATA
water	26:15	0:0	5	AVERROR_INVALIDDATA
water	28:4	0:0	2	avctx
op	28:9	0:0	2	->
water	28:11	0:0	2	bit_rate
op	28:20	0:0	2	=
water	28:22	0:0	2	avctx
op	28:27	0:0	2	->
water	28:29	0:0	2	sample_rate
op	28:41	0:0	2	*
water	28:43	0:0	2	avctx
op	28:48	0:0	2	->
water	28:50	0:0	2	channels
op	28:59	0:0	2	*
water	28:61	0:0	2	BLOCK_SIZE
op	28:72	0:0	2	*
water	28:74	0:0	2	8
op	28:76	0:0	2	/
water	28:78	0:0	2	BLOCK_SAMPLES
water	28:91	0:0	2	;
if	30:4	33:4	2	(coeff)
cond	30:8	30:8	3	coeff
water	30:8	0:0	4	coeff
stmts	30:15	33:4	3	
water	30:15	0:0	4	{
water	31:8	0:0	4	cutoff
op	31:15	0:0	4	=
call	31:17	31:33	4	AV_RB16
arg	31:25	31:33	5	buf+16
water	31:25	0:0	6	buf
op	31:29	0:0	6	+
water	31:31	0:0	6	16
water	31:34	0:0	4	;
call	32:8	32:77	4	ff_adx_calculate_coeffs
arg	32:32	32:38	5	cutoff
water	32:32	0:0	6	cutoff
arg	32:40	32:58	5	avctx->sample_rate
water	32:40	0:0	6	avctx
op	32:45	0:0	6	->
water	32:47	0:0	6	sample_rate
arg	32:60	32:70	5	COEFF_BITS
water	32:60	0:0	6	COEFF_BITS
arg	32:72	32:77	5	coeff
water	32:72	0:0	6	coeff
water	32:78	0:0	4	;
water	33:4	0:0	4	}
op	34:4	0:0	2	*
water	34:5	0:0	2	header_size
op	34:17	0:0	2	=
water	34:19	0:0	2	offset
water	34:25	0:0	2	;
return	35:4	35:12	2	0
water	35:11	0:0	3	0
