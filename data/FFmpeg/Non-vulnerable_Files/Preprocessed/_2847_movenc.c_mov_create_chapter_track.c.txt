func	2:0	89:0	0	static int	mov_create_chapter_track
params	2:35	0:0	1	
param	2:36	2:54	2	AVFormatContext *	s
param	2:56	2:68	2	int	tracknum
stmnts	0:0	88:12	1	
decl	4:4	4:19	2	AVIOContext	*pb
decl	5:4	5:37	2	MOVMuxContext	*mov
op	5:23	0:0	2	=
water	5:25	0:0	2	s
op	5:26	0:0	2	->
water	5:28	0:0	2	priv_data
decl	6:4	6:44	2	MOVTrack	*track
op	6:20	0:0	2	=
op	6:22	0:0	2	&
water	6:23	0:0	2	mov
op	6:26	0:0	2	->
water	6:28	0:0	2	tracks
op	6:34	0:0	2	[
water	6:35	0:0	2	tracknum
op	6:43	0:0	2	]
decl	7:4	7:73	2	AVPacket	pkt
op	7:17	0:0	2	=
water	7:19	0:0	2	{
op	7:21	0:0	2	.
water	7:22	0:0	2	stream_index
op	7:35	0:0	2	=
water	7:37	0:0	2	tracknum
water	7:45	0:0	2	,
op	7:47	0:0	2	.
water	7:48	0:0	2	flags
op	7:54	0:0	2	=
water	7:56	0:0	2	AV_PKT_FLAG_KEY
water	7:72	0:0	2	}
decl	8:4	8:14	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:14	2	int	len
water	9:4	0:0	2	track
op	9:9	0:0	2	->
water	9:11	0:0	2	mode
op	9:16	0:0	2	=
water	9:18	0:0	2	mov
op	9:21	0:0	2	->
water	9:23	0:0	2	mode
water	9:27	0:0	2	;
water	10:4	0:0	2	track
op	10:9	0:0	2	->
water	10:11	0:0	2	tag
op	10:15	0:0	2	=
call	10:17	10:38	2	MKTAG
arg	10:23	10:26	3	't'
water	10:23	0:0	4	't'
arg	10:27	10:30	3	'e'
water	10:27	0:0	4	'e'
arg	10:31	10:34	3	'x'
water	10:31	0:0	4	'x'
arg	10:35	10:38	3	't'
water	10:35	0:0	4	't'
water	10:39	0:0	2	;
water	11:4	0:0	2	track
op	11:9	0:0	2	->
water	11:11	0:0	2	timescale
op	11:21	0:0	2	=
water	11:23	0:0	2	MOV_TIMESCALE
water	11:36	0:0	2	;
water	12:4	0:0	2	track
op	12:9	0:0	2	->
water	12:11	0:0	2	enc
op	12:15	0:0	2	=
call	12:17	12:44	2	avcodec_alloc_context3
arg	12:40	12:44	3	NULL
water	12:40	0:0	4	NULL
water	12:45	0:0	2	;
if	13:4	14:30	2	(! track -> enc)
cond	13:8	13:16	3	! track -> enc
op	13:8	0:0	4	!
water	13:9	0:0	4	track
op	13:14	0:0	4	->
water	13:16	0:0	4	enc
stmts	14:8	14:30	3	
return	14:8	14:30	4	AVERROR(ENOMEM)
call	14:15	14:29	5	AVERROR
arg	14:23	14:29	6	ENOMEM
water	14:23	0:0	7	ENOMEM
water	15:4	0:0	2	track
op	15:9	0:0	2	->
water	15:11	0:0	2	enc
op	15:14	0:0	2	->
water	15:16	0:0	2	codec_type
op	15:27	0:0	2	=
water	15:29	0:0	2	AVMEDIA_TYPE_SUBTITLE
water	15:50	0:0	2	;
decl	18:4	18:64	2	uint8_t	chapter_properties[43]
op	18:35	0:0	2	=
water	18:37	0:0	2	{
water	18:39	0:0	2	0
water	18:40	0:0	2	,
water	18:42	0:0	2	0
water	18:43	0:0	2	,
water	18:45	0:0	2	0
water	18:46	0:0	2	,
water	18:48	0:0	2	0
water	18:49	0:0	2	,
water	18:51	0:0	2	0
water	18:52	0:0	2	,
water	18:54	0:0	2	0
water	18:55	0:0	2	,
water	18:57	0:0	2	0
water	18:58	0:0	2	,
water	18:60	0:0	2	1
water	18:61	0:0	2	,
water	18:63	0:0	2	}
if	19:4	20:30	2	(ff_alloc_extradata (track -> enc ,sizeof ( chapter_properties ) ))
cond	19:8	19:65	3	ff_alloc_extradata (track -> enc ,sizeof ( chapter_properties ) )
call	19:8	19:65	4	ff_alloc_extradata
arg	19:27	19:37	5	track->enc
water	19:27	0:0	6	track
op	19:32	0:0	6	->
water	19:34	0:0	6	enc
arg	19:39	19:65	5	sizeof(chapter_properties)
op	19:39	0:0	6	sizeof
water	19:45	0:0	6	(
water	19:46	0:0	6	chapter_properties
water	19:64	0:0	6	)
stmts	20:8	20:30	3	
return	20:8	20:30	4	AVERROR(ENOMEM)
call	20:15	20:29	5	AVERROR
arg	20:23	20:29	6	ENOMEM
water	20:23	0:0	7	ENOMEM
call	21:4	21:80	2	memcpy
arg	21:11	21:32	3	track->enc->extradata
water	21:11	0:0	4	track
op	21:16	0:0	4	->
water	21:18	0:0	4	enc
op	21:21	0:0	4	->
water	21:23	0:0	4	extradata
arg	21:34	21:52	3	chapter_properties
water	21:34	0:0	4	chapter_properties
arg	21:54	21:80	3	sizeof(chapter_properties)
op	21:54	0:0	4	sizeof
water	21:60	0:0	4	(
water	21:61	0:0	4	chapter_properties
water	21:79	0:0	4	)
water	21:81	0:0	2	;
if	23:4	63:4	2	(avio_open_dyn_buf (& pb ) >= 0)
cond	23:8	23:34	3	avio_open_dyn_buf (& pb ) >= 0
call	23:8	23:29	4	avio_open_dyn_buf
arg	23:26	23:29	5	&pb
op	23:26	0:0	6	&
water	23:27	0:0	6	pb
op	23:31	0:0	4	>=
water	23:34	0:0	4	0
stmts	23:37	63:4	3	
water	23:37	0:0	4	{
decl	24:8	24:16	4	int	size
decl	25:8	25:20	4	uint8_t	*buf
call	28:8	28:26	4	avio_wb32
arg	28:18	28:20	5	pb
water	28:18	0:0	6	pb
arg	28:22	28:26	5	0x01
water	28:22	0:0	6	0
water	28:23	0:0	6	x01
water	28:27	0:0	4	;
call	29:8	29:24	4	avio_w8
arg	29:16	29:18	5	pb
water	29:16	0:0	6	pb
arg	29:20	29:24	5	0x00
water	29:20	0:0	6	0
water	29:21	0:0	6	x00
water	29:25	0:0	4	;
call	30:8	30:24	4	avio_w8
arg	30:16	30:18	5	pb
water	30:16	0:0	6	pb
arg	30:20	30:24	5	0x00
water	30:20	0:0	6	0
water	30:21	0:0	6	x00
water	30:25	0:0	4	;
call	31:8	31:24	4	avio_w8
arg	31:16	31:18	5	pb
water	31:16	0:0	6	pb
arg	31:20	31:24	5	0x00
water	31:20	0:0	6	0
water	31:21	0:0	6	x00
water	31:25	0:0	4	;
call	32:8	32:24	4	avio_w8
arg	32:16	32:18	5	pb
water	32:16	0:0	6	pb
arg	32:20	32:24	5	0x00
water	32:20	0:0	6	0
water	32:21	0:0	6	x00
water	32:25	0:0	4	;
call	33:8	33:24	4	avio_w8
arg	33:16	33:18	5	pb
water	33:16	0:0	6	pb
arg	33:20	33:24	5	0x00
water	33:20	0:0	6	0
water	33:21	0:0	6	x00
water	33:25	0:0	4	;
call	34:8	34:24	4	avio_w8
arg	34:16	34:18	5	pb
water	34:16	0:0	6	pb
arg	34:20	34:24	5	0x00
water	34:20	0:0	6	0
water	34:21	0:0	6	x00
water	34:25	0:0	4	;
call	36:8	36:26	4	avio_wb16
arg	36:18	36:20	5	pb
water	36:18	0:0	6	pb
arg	36:22	36:26	5	0x00
water	36:22	0:0	6	0
water	36:23	0:0	6	x00
water	36:27	0:0	4	;
call	37:8	37:26	4	avio_wb16
arg	37:18	37:20	5	pb
water	37:18	0:0	6	pb
arg	37:22	37:26	5	0x00
water	37:22	0:0	6	0
water	37:23	0:0	6	x00
water	37:27	0:0	4	;
call	38:8	38:26	4	avio_wb16
arg	38:18	38:20	5	pb
water	38:18	0:0	6	pb
arg	38:22	38:26	5	0x00
water	38:22	0:0	6	0
water	38:23	0:0	6	x00
water	38:27	0:0	4	;
call	39:8	39:26	4	avio_wb16
arg	39:18	39:20	5	pb
water	39:18	0:0	6	pb
arg	39:22	39:26	5	0x00
water	39:22	0:0	6	0
water	39:23	0:0	6	x00
water	39:27	0:0	4	;
call	41:8	41:26	4	avio_wb16
arg	41:18	41:20	5	pb
water	41:18	0:0	6	pb
arg	41:22	41:26	5	0x00
water	41:22	0:0	6	0
water	41:23	0:0	6	x00
water	41:27	0:0	4	;
call	42:8	42:26	4	avio_wb16
arg	42:18	42:20	5	pb
water	42:18	0:0	6	pb
arg	42:22	42:26	5	0x00
water	42:22	0:0	6	0
water	42:23	0:0	6	x00
water	42:27	0:0	4	;
call	43:8	43:26	4	avio_wb16
arg	43:18	43:20	5	pb
water	43:18	0:0	6	pb
arg	43:22	43:26	5	0x01
water	43:22	0:0	6	0
water	43:23	0:0	6	x01
water	43:27	0:0	4	;
call	44:8	44:24	4	avio_w8
arg	44:16	44:18	5	pb
water	44:16	0:0	6	pb
arg	44:20	44:24	5	0x00
water	44:20	0:0	6	0
water	44:21	0:0	6	x00
water	44:25	0:0	4	;
call	45:8	45:24	4	avio_w8
arg	45:16	45:18	5	pb
water	45:16	0:0	6	pb
arg	45:20	45:24	5	0x00
water	45:20	0:0	6	0
water	45:21	0:0	6	x00
water	45:25	0:0	4	;
call	46:8	46:24	4	avio_w8
arg	46:16	46:18	5	pb
water	46:16	0:0	6	pb
arg	46:20	46:24	5	0x00
water	46:20	0:0	6	0
water	46:21	0:0	6	x00
water	46:25	0:0	4	;
call	47:8	47:24	4	avio_w8
arg	47:16	47:18	5	pb
water	47:16	0:0	6	pb
arg	47:20	47:24	5	0x00
water	47:20	0:0	6	0
water	47:21	0:0	6	x00
water	47:25	0:0	4	;
call	48:8	48:24	4	avio_w8
arg	48:16	48:18	5	pb
water	48:16	0:0	6	pb
arg	48:20	48:24	5	0x00
water	48:20	0:0	6	0
water	48:21	0:0	6	x00
water	48:25	0:0	4	;
call	49:8	49:24	4	avio_w8
arg	49:16	49:18	5	pb
water	49:16	0:0	6	pb
arg	49:20	49:24	5	0x00
water	49:20	0:0	6	0
water	49:21	0:0	6	x00
water	49:25	0:0	4	;
call	51:8	51:26	4	avio_wb32
arg	51:18	51:20	5	pb
water	51:18	0:0	6	pb
arg	51:22	51:26	5	0x0D
water	51:22	0:0	6	0
water	51:23	0:0	6	x0D
water	51:27	0:0	4	;
call	52:8	52:31	4	ffio_wfourcc
arg	52:21	52:23	5	pb
water	52:21	0:0	6	pb
arg	52:25	52:31	5	"ftab"
water	52:25	0:0	6	"ftab"
water	52:32	0:0	4	;
call	53:8	53:26	4	avio_wb16
arg	53:18	53:20	5	pb
water	53:18	0:0	6	pb
arg	53:22	53:26	5	0x01
water	53:22	0:0	6	0
water	53:23	0:0	6	x01
water	53:27	0:0	4	;
call	55:8	55:26	4	avio_wb16
arg	55:18	55:20	5	pb
water	55:18	0:0	6	pb
arg	55:22	55:26	5	0x01
water	55:22	0:0	6	0
water	55:23	0:0	6	x01
water	55:27	0:0	4	;
call	56:8	56:24	4	avio_w8
arg	56:16	56:18	5	pb
water	56:16	0:0	6	pb
arg	56:20	56:24	5	0x00
water	56:20	0:0	6	0
water	56:21	0:0	6	x00
water	56:25	0:0	4	;
if	57:8	60:8	4	(( size =avio_close_dyn_buf (pb ,& buf ) ) > 0)
cond	57:12	57:52	5	( size =avio_close_dyn_buf (pb ,& buf ) ) > 0
water	57:12	0:0	6	(
water	57:13	0:0	6	size
op	57:18	0:0	6	=
call	57:20	57:47	6	avio_close_dyn_buf
arg	57:39	57:41	7	pb
water	57:39	0:0	8	pb
arg	57:43	57:47	7	&buf
op	57:43	0:0	8	&
water	57:44	0:0	8	buf
water	57:48	0:0	6	)
op	57:50	0:0	6	>
water	57:52	0:0	6	0
stmts	57:55	60:8	5	
water	57:55	0:0	6	{
water	58:12	0:0	6	track
op	58:17	0:0	6	->
water	58:19	0:0	6	enc
op	58:22	0:0	6	->
water	58:24	0:0	6	extradata
op	58:34	0:0	6	=
water	58:36	0:0	6	buf
water	58:39	0:0	6	;
water	59:12	0:0	6	track
op	59:17	0:0	6	->
water	59:19	0:0	6	enc
op	59:22	0:0	6	->
water	59:24	0:0	6	extradata_size
op	59:39	0:0	6	=
water	59:41	0:0	6	size
water	59:45	0:0	6	;
water	60:8	0:0	6	}
else	60:10	62:8	4
stmts	60:15	62:8	5	
water	60:15	0:0	6	{
call	61:12	61:25	6	av_freep
arg	61:21	61:25	7	&buf
op	61:21	0:0	8	&
water	61:22	0:0	8	buf
water	61:26	0:0	6	;
water	62:8	0:0	6	}
water	63:4	0:0	4	}
for	65:4	87:4	2	(i = 0 ;i < s -> nb_chapters;i ++)
forinit	65:9	65:14	3	i = 0 ;
water	65:9	0:0	4	i
op	65:11	0:0	4	=
water	65:13	0:0	4	0
water	65:14	0:0	4	;
cond	65:16	65:23	3	i < s -> nb_chapters
water	65:16	0:0	4	i
op	65:18	0:0	4	<
water	65:20	0:0	4	s
op	65:21	0:0	4	->
water	65:23	0:0	4	nb_chapters
forexpr	65:36	65:37	3	i ++
water	65:36	0:0	4	i
op	65:37	0:0	4	++
stmts	65:41	87:4	3	
water	65:41	0:0	4	{
decl	66:8	66:37	4	AVChapter	*c
op	66:21	0:0	4	=
water	66:23	0:0	4	s
op	66:24	0:0	4	->
water	66:26	0:0	4	chapters
op	66:34	0:0	4	[
water	66:35	0:0	4	i
op	66:36	0:0	4	]
decl	67:8	67:28	4	AVDictionaryEntry	*t
decl	68:8	68:87	4	int64_t	end
op	68:20	0:0	4	=
call	68:22	68:86	5	av_rescale_q
arg	68:35	68:41	6	c->end
water	68:35	0:0	7	c
op	68:36	0:0	7	->
water	68:38	0:0	7	end
arg	68:43	68:55	6	c->time_base
water	68:43	0:0	7	c
op	68:44	0:0	7	->
water	68:46	0:0	7	time_base
arg	68:57	68:86	6	(AVRational){1,MOV_TIMESCALE}
water	68:57	0:0	7	(
water	68:58	0:0	7	AVRational
water	68:68	0:0	7	)
water	68:69	0:0	7	{
water	68:70	0:0	7	1
water	68:71	0:0	7	,
water	68:72	0:0	7	MOV_TIMESCALE
water	68:85	0:0	7	}
water	69:8	0:0	4	pkt
op	69:11	0:0	4	.
water	69:12	0:0	4	pts
op	69:16	0:0	4	=
water	69:18	0:0	4	pkt
op	69:21	0:0	4	.
water	69:22	0:0	4	dts
op	69:26	0:0	4	=
call	69:28	69:94	4	av_rescale_q
arg	69:41	69:49	5	c->start
water	69:41	0:0	6	c
op	69:42	0:0	6	->
water	69:44	0:0	6	start
arg	69:51	69:63	5	c->time_base
water	69:51	0:0	6	c
op	69:52	0:0	6	->
water	69:54	0:0	6	time_base
arg	69:65	69:94	5	(AVRational){1,MOV_TIMESCALE}
water	69:65	0:0	6	(
water	69:66	0:0	6	AVRational
water	69:76	0:0	6	)
water	69:77	0:0	6	{
water	69:78	0:0	6	1
water	69:79	0:0	6	,
water	69:80	0:0	6	MOV_TIMESCALE
water	69:93	0:0	6	}
water	69:95	0:0	4	;
water	70:8	0:0	4	pkt
op	70:11	0:0	4	.
water	70:12	0:0	4	duration
op	70:21	0:0	4	=
water	70:23	0:0	4	end
op	70:27	0:0	4	-
water	70:29	0:0	4	pkt
op	70:32	0:0	4	.
water	70:33	0:0	4	dts
water	70:36	0:0	4	;
if	71:8	86:8	4	(( t =av_dict_get (c -> metadata ,"title" ,NULL ,0 ) ))
cond	71:12	71:59	5	( t =av_dict_get (c -> metadata ,"title" ,NULL ,0 ) )
water	71:12	0:0	6	(
water	71:13	0:0	6	t
op	71:15	0:0	6	=
call	71:17	71:58	6	av_dict_get
arg	71:29	71:40	7	c->metadata
water	71:29	0:0	8	c
op	71:30	0:0	8	->
water	71:32	0:0	8	metadata
arg	71:42	71:49	7	"title"
water	71:42	0:0	8	"title"
arg	71:51	71:55	7	NULL
water	71:51	0:0	8	NULL
arg	71:57	71:58	7	0
water	71:57	0:0	8	0
water	71:59	0:0	6	)
stmts	71:62	86:8	5	
water	71:62	0:0	6	{
decl	72:12	75:40	6	const char	encd[12]
op	72:32	0:0	6	=
water	72:34	0:0	6	{
water	73:16	0:0	6	0
water	73:17	0:0	6	x00
water	73:20	0:0	6	,
water	73:22	0:0	6	0
water	73:23	0:0	6	x00
water	73:26	0:0	6	,
water	73:28	0:0	6	0
water	73:29	0:0	6	x00
water	73:32	0:0	6	,
water	73:34	0:0	6	0
water	73:35	0:0	6	x0C
water	73:38	0:0	6	,
water	74:16	0:0	6	'e'
water	74:19	0:0	6	,
water	74:22	0:0	6	'n'
water	74:25	0:0	6	,
water	74:28	0:0	6	'c'
water	74:31	0:0	6	,
water	74:34	0:0	6	'd'
water	74:37	0:0	6	,
water	75:16	0:0	6	0
water	75:17	0:0	6	x00
water	75:20	0:0	6	,
water	75:22	0:0	6	0
water	75:23	0:0	6	x00
water	75:26	0:0	6	,
water	75:28	0:0	6	0
water	75:29	0:0	6	x01
water	75:32	0:0	6	,
water	75:34	0:0	6	0
water	75:35	0:0	6	x00
water	75:39	0:0	6	}
water	76:12	0:0	6	len
op	76:21	0:0	6	=
call	76:23	76:38	6	strlen
arg	76:30	76:38	7	t->value
water	76:30	0:0	8	t
op	76:31	0:0	8	->
water	76:33	0:0	8	value
water	76:39	0:0	6	;
water	77:12	0:0	6	pkt
op	77:15	0:0	6	.
water	77:16	0:0	6	size
op	77:21	0:0	6	=
water	77:23	0:0	6	len
op	77:27	0:0	6	+
water	77:29	0:0	6	2
op	77:31	0:0	6	+
water	77:33	0:0	6	12
water	77:35	0:0	6	;
water	78:12	0:0	6	pkt
op	78:15	0:0	6	.
water	78:16	0:0	6	data
op	78:21	0:0	6	=
call	78:23	78:41	6	av_malloc
arg	78:33	78:41	7	pkt.size
water	78:33	0:0	8	pkt
op	78:36	0:0	8	.
water	78:37	0:0	8	size
water	78:42	0:0	6	;
if	79:12	80:38	6	(! pkt . data)
cond	79:16	79:21	7	! pkt . data
op	79:16	0:0	8	!
water	79:17	0:0	8	pkt
op	79:20	0:0	8	.
water	79:21	0:0	8	data
stmts	80:16	80:38	7	
return	80:16	80:38	8	AVERROR(ENOMEM)
call	80:23	80:37	9	AVERROR
arg	80:31	80:37	10	ENOMEM
water	80:31	0:0	11	ENOMEM
call	81:12	81:33	6	AV_WB16
arg	81:20	81:28	7	pkt.data
water	81:20	0:0	8	pkt
op	81:23	0:0	8	.
water	81:24	0:0	8	data
arg	81:30	81:33	7	len
water	81:30	0:0	8	len
water	81:34	0:0	6	;
call	82:12	82:46	6	memcpy
arg	82:19	82:31	7	pkt.data+2
water	82:19	0:0	8	pkt
op	82:22	0:0	8	.
water	82:23	0:0	8	data
op	82:28	0:0	8	+
water	82:30	0:0	8	2
arg	82:33	82:41	7	t->value
water	82:33	0:0	8	t
op	82:34	0:0	8	->
water	82:36	0:0	8	value
arg	82:43	82:46	7	len
water	82:43	0:0	8	len
water	82:47	0:0	6	;
call	83:12	83:57	6	memcpy
arg	83:19	83:37	7	pkt.data+len+2
water	83:19	0:0	8	pkt
op	83:22	0:0	8	.
water	83:23	0:0	8	data
op	83:28	0:0	8	+
water	83:30	0:0	8	len
op	83:34	0:0	8	+
water	83:36	0:0	8	2
arg	83:39	83:43	7	encd
water	83:39	0:0	8	encd
arg	83:45	83:57	7	sizeof(encd)
op	83:45	0:0	8	sizeof
water	83:51	0:0	8	(
water	83:52	0:0	8	encd
water	83:56	0:0	8	)
water	83:58	0:0	6	;
call	84:12	84:39	6	ff_mov_write_packet
arg	84:32	84:33	7	s
water	84:32	0:0	8	s
arg	84:35	84:39	7	&pkt
op	84:35	0:0	8	&
water	84:36	0:0	8	pkt
water	84:40	0:0	6	;
call	85:12	85:30	6	av_freep
arg	85:21	85:30	7	&pkt.data
op	85:21	0:0	8	&
water	85:22	0:0	8	pkt
op	85:25	0:0	8	.
water	85:26	0:0	8	data
water	85:31	0:0	6	;
water	86:8	0:0	6	}
water	87:4	0:0	4	}
return	88:4	88:12	2	0
water	88:11	0:0	3	0
