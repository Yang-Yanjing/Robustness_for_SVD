func	1:0	78:0	0	static int	rtsp_parse_request
params	1:29	0:0	1	
param	1:30	1:44	2	HTTPContext *	c
stmnts	0:0	77:12	1	
decl	3:4	3:27	2	const char	*p
water	3:17	0:0	2	,
decl	3:4	3:27	2	const char	*p1
water	3:22	0:0	2	,
decl	3:4	3:27	2	const char	*p2
decl	4:4	4:16	2	char	cmd[32]
decl	5:4	5:18	2	char	url[1024]
decl	6:4	6:21	2	char	protocol[32]
decl	7:4	7:19	2	char	line[1024]
decl	8:4	8:11	2	int	len
decl	9:4	9:57	2	RTSPMessageHeader	header1
op	9:30	0:0	2	=
water	9:32	0:0	2	{
water	9:34	0:0	2	0
water	9:36	0:0	2	}
water	9:37	0:0	2	,
decl	9:4	9:57	2	RTSPMessageHeader	*header
op	9:47	0:0	2	=
op	9:49	0:0	2	&
water	9:50	0:0	2	header1
water	10:4	0:0	2	c
op	10:5	0:0	2	->
water	10:7	0:0	2	buffer_ptr
op	10:17	0:0	2	[
water	10:18	0:0	2	0
op	10:19	0:0	2	]
op	10:21	0:0	2	=
water	10:23	0:0	2	'\0'
water	10:27	0:0	2	;
water	11:4	0:0	2	p
op	11:6	0:0	2	=
water	11:8	0:0	2	c
op	11:9	0:0	2	->
water	11:11	0:0	2	buffer
water	11:17	0:0	2	;
call	12:4	12:33	2	get_word
arg	12:13	12:16	3	cmd
water	12:13	0:0	4	cmd
arg	12:18	12:29	3	sizeof(cmd)
op	12:18	0:0	4	sizeof
water	12:24	0:0	4	(
water	12:25	0:0	4	cmd
water	12:28	0:0	4	)
arg	12:31	12:33	3	&p
op	12:31	0:0	4	&
water	12:32	0:0	4	p
water	12:34	0:0	2	;
call	13:4	13:33	2	get_word
arg	13:13	13:16	3	url
water	13:13	0:0	4	url
arg	13:18	13:29	3	sizeof(url)
op	13:18	0:0	4	sizeof
water	13:24	0:0	4	(
water	13:25	0:0	4	url
water	13:28	0:0	4	)
arg	13:31	13:33	3	&p
op	13:31	0:0	4	&
water	13:32	0:0	4	p
water	13:34	0:0	2	;
call	14:4	14:43	2	get_word
arg	14:13	14:21	3	protocol
water	14:13	0:0	4	protocol
arg	14:23	14:39	3	sizeof(protocol)
op	14:23	0:0	4	sizeof
water	14:29	0:0	4	(
water	14:30	0:0	4	protocol
water	14:38	0:0	4	)
arg	14:41	14:43	3	&p
op	14:41	0:0	4	&
water	14:42	0:0	4	p
water	14:44	0:0	2	;
call	15:4	15:48	2	av_strlcpy
arg	15:15	15:24	3	c->method
water	15:15	0:0	4	c
op	15:16	0:0	4	->
water	15:18	0:0	4	method
arg	15:26	15:29	3	cmd
water	15:26	0:0	4	cmd
arg	15:31	15:48	3	sizeof(c->method)
op	15:31	0:0	4	sizeof
water	15:37	0:0	4	(
water	15:38	0:0	4	c
op	15:39	0:0	4	->
water	15:41	0:0	4	method
water	15:47	0:0	4	)
water	15:49	0:0	2	;
call	16:4	16:42	2	av_strlcpy
arg	16:15	16:21	3	c->url
water	16:15	0:0	4	c
op	16:16	0:0	4	->
water	16:18	0:0	4	url
arg	16:23	16:26	3	url
water	16:23	0:0	4	url
arg	16:28	16:42	3	sizeof(c->url)
op	16:28	0:0	4	sizeof
water	16:34	0:0	4	(
water	16:35	0:0	4	c
op	16:36	0:0	4	->
water	16:38	0:0	4	url
water	16:41	0:0	4	)
water	16:43	0:0	2	;
call	17:4	17:57	2	av_strlcpy
arg	17:15	17:26	3	c->protocol
water	17:15	0:0	4	c
op	17:16	0:0	4	->
water	17:18	0:0	4	protocol
arg	17:28	17:36	3	protocol
water	17:28	0:0	4	protocol
arg	17:38	17:57	3	sizeof(c->protocol)
op	17:38	0:0	4	sizeof
water	17:44	0:0	4	(
water	17:45	0:0	4	c
op	17:46	0:0	4	->
water	17:48	0:0	4	protocol
water	17:56	0:0	4	)
water	17:58	0:0	2	;
if	18:4	22:4	2	(avio_open_dyn_buf (& c -> pb ) < 0)
cond	18:8	18:36	3	avio_open_dyn_buf (& c -> pb ) < 0
call	18:8	18:32	4	avio_open_dyn_buf
arg	18:26	18:32	5	&c->pb
op	18:26	0:0	6	&
water	18:27	0:0	6	c
op	18:28	0:0	6	->
water	18:30	0:0	6	pb
op	18:34	0:0	4	<
water	18:36	0:0	4	0
stmts	18:39	22:4	3	
water	18:39	0:0	4	{
water	20:8	0:0	4	c
op	20:9	0:0	4	->
water	20:11	0:0	4	pb
op	20:14	0:0	4	=
water	20:16	0:0	4	NULL
water	20:20	0:0	4	;
return	21:8	21:17	4	-1
op	21:15	0:0	5	-
water	21:16	0:0	5	1
water	22:4	0:0	4	}
if	24:4	27:4	2	(strcmp (protocol ,"RTSP/1.0" ))
cond	24:8	24:35	3	strcmp (protocol ,"RTSP/1.0" )
call	24:8	24:35	4	strcmp
arg	24:15	24:23	5	protocol
water	24:15	0:0	6	protocol
arg	24:25	24:35	5	"RTSP/1.0"
water	24:25	0:0	6	"RTSP/1.0"
stmts	24:38	27:4	3	
water	24:38	0:0	4	{
call	25:8	25:47	4	rtsp_reply_error
arg	25:25	25:26	5	c
water	25:25	0:0	6	c
arg	25:28	25:47	5	RTSP_STATUS_VERSION
water	25:28	0:0	6	RTSP_STATUS_VERSION
water	25:48	0:0	4	;
goto	26:8	26:20	4	the_end
water	26:13	0:0	5	the_end
water	27:4	0:0	4	}
while	30:4	31:11	2	(* p != '\n' && * p != '\0')
cond	30:11	30:31	3	* p != '\n' && * p != '\0'
op	30:11	0:0	4	*
water	30:12	0:0	4	p
op	30:14	0:0	4	!=
water	30:17	0:0	4	'\n'
op	30:22	0:0	4	&&
op	30:25	0:0	4	*
water	30:26	0:0	4	p
op	30:28	0:0	4	!=
water	30:31	0:0	4	'\0'
stmts	31:8	31:11	3	
water	31:8	0:0	4	p
op	31:9	0:0	4	++
water	31:11	0:0	4	;
if	32:4	33:11	2	(* p == '\n')
cond	32:8	32:14	3	* p == '\n'
op	32:8	0:0	4	*
water	32:9	0:0	4	p
op	32:11	0:0	4	==
water	32:14	0:0	4	'\n'
stmts	33:8	33:11	3	
water	33:8	0:0	4	p
op	33:9	0:0	4	++
water	33:11	0:0	4	;
while	34:4	51:4	2	(* p != '\0')
cond	34:11	34:17	3	* p != '\0'
op	34:11	0:0	4	*
water	34:12	0:0	4	p
op	34:14	0:0	4	!=
water	34:17	0:0	4	'\0'
stmts	34:23	51:4	3	
water	34:23	0:0	4	{
water	35:8	0:0	4	p1
op	35:11	0:0	4	=
call	35:13	35:54	4	memchr
arg	35:20	35:21	5	p
water	35:20	0:0	6	p
arg	35:23	35:27	5	'\n'
water	35:23	0:0	6	'\n'
arg	35:29	35:54	5	(char*)c->buffer_ptr-p
water	35:29	0:0	6	(
water	35:30	0:0	6	char
op	35:35	0:0	6	*
water	35:36	0:0	6	)
water	35:37	0:0	6	c
op	35:38	0:0	6	->
water	35:40	0:0	6	buffer_ptr
op	35:51	0:0	6	-
water	35:53	0:0	6	p
water	35:55	0:0	4	;
if	36:8	37:17	4	(! p1)
cond	36:12	36:13	5	! p1
op	36:12	0:0	6	!
water	36:13	0:0	6	p1
stmts	37:12	37:17	5	
break	37:12	37:17	6	
water	38:8	0:0	4	p2
op	38:11	0:0	4	=
water	38:13	0:0	4	p1
water	38:15	0:0	4	;
if	39:8	40:16	4	(p2 > p && p2 [ - 1 ] == '\r')
cond	39:12	39:32	5	p2 > p && p2 [ - 1 ] == '\r'
water	39:12	0:0	6	p2
op	39:15	0:0	6	>
water	39:17	0:0	6	p
op	39:19	0:0	6	&&
water	39:22	0:0	6	p2
op	39:24	0:0	6	[
op	39:25	0:0	6	-
water	39:26	0:0	6	1
op	39:27	0:0	6	]
op	39:29	0:0	6	==
water	39:32	0:0	6	'\r'
stmts	40:12	40:16	5	
water	40:12	0:0	6	p2
op	40:14	0:0	6	--
water	40:16	0:0	6	;
if	42:8	43:17	4	(p2 == p)
cond	42:12	42:18	5	p2 == p
water	42:12	0:0	6	p2
op	42:15	0:0	6	==
water	42:18	0:0	6	p
stmts	43:12	43:17	5	
break	43:12	43:17	6	
water	44:8	0:0	4	len
op	44:12	0:0	4	=
water	44:14	0:0	4	p2
op	44:17	0:0	4	-
water	44:19	0:0	4	p
water	44:20	0:0	4	;
if	45:8	46:34	4	(len > sizeof ( line ) - 1)
cond	45:12	45:33	5	len > sizeof ( line ) - 1
water	45:12	0:0	6	len
op	45:16	0:0	6	>
op	45:18	0:0	6	sizeof
water	45:24	0:0	6	(
water	45:25	0:0	6	line
water	45:29	0:0	6	)
op	45:31	0:0	6	-
water	45:33	0:0	6	1
stmts	46:12	46:34	5	
water	46:12	0:0	6	len
op	46:16	0:0	6	=
op	46:18	0:0	6	sizeof
water	46:24	0:0	6	(
water	46:25	0:0	6	line
water	46:29	0:0	6	)
op	46:31	0:0	6	-
water	46:33	0:0	6	1
water	46:34	0:0	6	;
call	47:8	47:27	4	memcpy
arg	47:15	47:19	5	line
water	47:15	0:0	6	line
arg	47:21	47:22	5	p
water	47:21	0:0	6	p
arg	47:24	47:27	5	len
water	47:24	0:0	6	len
water	47:28	0:0	4	;
water	48:8	0:0	4	line
op	48:12	0:0	4	[
water	48:13	0:0	4	len
op	48:16	0:0	4	]
op	48:18	0:0	4	=
water	48:20	0:0	4	'\0'
water	48:24	0:0	4	;
call	49:8	49:57	4	ff_rtsp_parse_line
arg	49:27	49:31	5	NULL
water	49:27	0:0	6	NULL
arg	49:33	49:39	5	header
water	49:33	0:0	6	header
arg	49:41	49:45	5	line
water	49:41	0:0	6	line
arg	49:47	49:51	5	NULL
water	49:47	0:0	6	NULL
arg	49:53	49:57	5	NULL
water	49:53	0:0	6	NULL
water	49:58	0:0	4	;
water	50:8	0:0	4	p
op	50:10	0:0	4	=
water	50:12	0:0	4	p1
op	50:15	0:0	4	+
water	50:17	0:0	4	1
water	50:18	0:0	4	;
water	51:4	0:0	4	}
water	53:4	0:0	2	c
op	53:5	0:0	2	->
water	53:7	0:0	2	seq
op	53:11	0:0	2	=
water	53:13	0:0	2	header
op	53:19	0:0	2	->
water	53:21	0:0	2	seq
water	53:24	0:0	2	;
if	54:4	55:33	2	(!strcmp (cmd ,"DESCRIBE" ))
cond	54:8	54:31	3	!strcmp (cmd ,"DESCRIBE" )
op	54:8	0:0	4	!
call	54:9	54:31	4	strcmp
arg	54:16	54:19	5	cmd
water	54:16	0:0	6	cmd
arg	54:21	54:31	5	"DESCRIBE"
water	54:21	0:0	6	"DESCRIBE"
stmts	55:8	55:33	3	
call	55:8	55:32	4	rtsp_cmd_describe
arg	55:26	55:27	5	c
water	55:26	0:0	6	c
arg	55:29	55:32	5	url
water	55:29	0:0	6	url
water	55:33	0:0	4	;
else	56:4	57:32	2
stmts	56:9	57:32	3	
if	56:9	57:32	4	(!strcmp (cmd ,"OPTIONS" ))
cond	56:13	56:35	5	!strcmp (cmd ,"OPTIONS" )
op	56:13	0:0	6	!
call	56:14	56:35	6	strcmp
arg	56:21	56:24	7	cmd
water	56:21	0:0	8	cmd
arg	56:26	56:35	7	"OPTIONS"
water	56:26	0:0	8	"OPTIONS"
stmts	57:8	57:32	5	
call	57:8	57:31	6	rtsp_cmd_options
arg	57:25	57:26	7	c
water	57:25	0:0	8	c
arg	57:28	57:31	7	url
water	57:28	0:0	8	url
water	57:32	0:0	6	;
else	58:4	59:38	2
stmts	58:9	59:38	3	
if	58:9	59:38	4	(!strcmp (cmd ,"SETUP" ))
cond	58:13	58:33	5	!strcmp (cmd ,"SETUP" )
op	58:13	0:0	6	!
call	58:14	58:33	6	strcmp
arg	58:21	58:24	7	cmd
water	58:21	0:0	8	cmd
arg	58:26	58:33	7	"SETUP"
water	58:26	0:0	8	"SETUP"
stmts	59:8	59:38	5	
call	59:8	59:37	6	rtsp_cmd_setup
arg	59:23	59:24	7	c
water	59:23	0:0	8	c
arg	59:26	59:29	7	url
water	59:26	0:0	8	url
arg	59:31	59:37	7	header
water	59:31	0:0	8	header
water	59:38	0:0	6	;
else	60:4	61:37	2
stmts	60:9	61:37	3	
if	60:9	61:37	4	(!strcmp (cmd ,"PLAY" ))
cond	60:13	60:32	5	!strcmp (cmd ,"PLAY" )
op	60:13	0:0	6	!
call	60:14	60:32	6	strcmp
arg	60:21	60:24	7	cmd
water	60:21	0:0	8	cmd
arg	60:26	60:32	7	"PLAY"
water	60:26	0:0	8	"PLAY"
stmts	61:8	61:37	5	
call	61:8	61:36	6	rtsp_cmd_play
arg	61:22	61:23	7	c
water	61:22	0:0	8	c
arg	61:25	61:28	7	url
water	61:25	0:0	8	url
arg	61:30	61:36	7	header
water	61:30	0:0	8	header
water	61:37	0:0	6	;
else	62:4	63:45	2
stmts	62:9	63:45	3	
if	62:9	63:45	4	(!strcmp (cmd ,"PAUSE" ))
cond	62:13	62:33	5	!strcmp (cmd ,"PAUSE" )
op	62:13	0:0	6	!
call	62:14	62:33	6	strcmp
arg	62:21	62:24	7	cmd
water	62:21	0:0	8	cmd
arg	62:26	62:33	7	"PAUSE"
water	62:26	0:0	8	"PAUSE"
stmts	63:8	63:45	5	
call	63:8	63:44	6	rtsp_cmd_interrupt
arg	63:27	63:28	7	c
water	63:27	0:0	8	c
arg	63:30	63:33	7	url
water	63:30	0:0	8	url
arg	63:35	63:41	7	header
water	63:35	0:0	8	header
arg	63:43	63:44	7	1
water	63:43	0:0	8	1
water	63:45	0:0	6	;
else	64:4	65:45	2
stmts	64:9	65:45	3	
if	64:9	65:45	4	(!strcmp (cmd ,"TEARDOWN" ))
cond	64:13	64:36	5	!strcmp (cmd ,"TEARDOWN" )
op	64:13	0:0	6	!
call	64:14	64:36	6	strcmp
arg	64:21	64:24	7	cmd
water	64:21	0:0	8	cmd
arg	64:26	64:36	7	"TEARDOWN"
water	64:26	0:0	8	"TEARDOWN"
stmts	65:8	65:45	5	
call	65:8	65:44	6	rtsp_cmd_interrupt
arg	65:27	65:28	7	c
water	65:27	0:0	8	c
arg	65:30	65:33	7	url
water	65:30	0:0	8	url
arg	65:35	65:41	7	header
water	65:35	0:0	8	header
arg	65:43	65:44	7	0
water	65:43	0:0	8	0
water	65:45	0:0	6	;
else	66:4	67:47	2
stmts	67:8	67:47	3	
call	67:8	67:46	4	rtsp_reply_error
arg	67:25	67:26	5	c
water	67:25	0:0	6	c
arg	67:28	67:46	5	RTSP_STATUS_METHOD
water	67:28	0:0	6	RTSP_STATUS_METHOD
water	67:47	0:0	4	;
label	68:1	68:8	2	the_end :
water	69:4	0:0	2	len
op	69:8	0:0	2	=
call	69:10	69:49	2	avio_close_dyn_buf
arg	69:29	69:34	3	c->pb
water	69:29	0:0	4	c
op	69:30	0:0	4	->
water	69:32	0:0	4	pb
arg	69:36	69:49	3	&c->pb_buffer
op	69:36	0:0	4	&
water	69:37	0:0	4	c
op	69:38	0:0	4	->
water	69:40	0:0	4	pb_buffer
water	69:50	0:0	2	;
water	70:4	0:0	2	c
op	70:5	0:0	2	->
water	70:7	0:0	2	pb
op	70:10	0:0	2	=
water	70:12	0:0	2	NULL
water	70:16	0:0	2	;
if	71:4	73:17	2	(len < 0)
cond	71:8	71:14	3	len < 0
water	71:8	0:0	4	len
op	71:12	0:0	4	<
water	71:14	0:0	4	0
stmts	73:8	73:17	3	
return	73:8	73:17	4	-1
op	73:15	0:0	5	-
water	73:16	0:0	5	1
water	74:4	0:0	2	c
op	74:5	0:0	2	->
water	74:7	0:0	2	buffer_ptr
op	74:18	0:0	2	=
water	74:20	0:0	2	c
op	74:21	0:0	2	->
water	74:23	0:0	2	pb_buffer
water	74:32	0:0	2	;
water	75:4	0:0	2	c
op	75:5	0:0	2	->
water	75:7	0:0	2	buffer_end
op	75:18	0:0	2	=
water	75:20	0:0	2	c
op	75:21	0:0	2	->
water	75:23	0:0	2	pb_buffer
op	75:33	0:0	2	+
water	75:35	0:0	2	len
water	75:38	0:0	2	;
water	76:4	0:0	2	c
op	76:5	0:0	2	->
water	76:7	0:0	2	state
op	76:13	0:0	2	=
water	76:15	0:0	2	RTSPSTATE_SEND_REPLY
water	76:35	0:0	2	;
return	77:4	77:12	2	0
water	77:11	0:0	3	0
