func	1:0	64:0	0	static int	mpegts_set_stream_info
params	1:33	0:0	1	
param	1:34	1:46	2	AVStream *	st
param	1:48	1:63	2	PESContext *	pes
param	2:34	2:54	2	uint32_t	stream_type
param	2:56	2:78	2	uint32_t	prog_reg_desc
stmnts	0:0	63:12	1	
decl	4:4	4:46	2	int	old_codec_type
op	4:23	0:0	2	=
water	4:25	0:0	2	st
op	4:27	0:0	2	->
water	4:29	0:0	2	codec
op	4:34	0:0	2	->
water	4:36	0:0	2	codec_type
decl	5:4	5:43	2	int	old_codec_id
op	5:22	0:0	2	=
water	5:24	0:0	2	st
op	5:26	0:0	2	->
water	5:28	0:0	2	codec
op	5:33	0:0	2	->
water	5:35	0:0	2	codec_id
if	6:4	9:4	2	(avcodec_is_open (st -> codec ))
cond	6:8	6:33	3	avcodec_is_open (st -> codec )
call	6:8	6:33	4	avcodec_is_open
arg	6:24	6:33	5	st->codec
water	6:24	0:0	6	st
op	6:26	0:0	6	->
water	6:28	0:0	6	codec
stmts	6:36	9:4	3	
water	6:36	0:0	4	{
call	7:8	7:83	4	av_log
arg	7:15	7:26	5	pes->stream
water	7:15	0:0	6	pes
op	7:18	0:0	6	->
water	7:20	0:0	6	stream
arg	7:28	7:40	5	AV_LOG_DEBUG
water	7:28	0:0	6	AV_LOG_DEBUG
arg	7:42	7:83	5	"cannot set stream info, codec is open\n"
water	7:42	0:0	6	"cannot set stream info, codec is open\n"
water	7:84	0:0	4	;
return	8:8	8:16	4	0
water	8:15	0:0	5	0
water	9:4	0:0	4	}
call	10:4	10:40	2	avpriv_set_pts_info
arg	10:24	10:26	3	st
water	10:24	0:0	4	st
arg	10:28	10:30	3	33
water	10:28	0:0	4	33
arg	10:32	10:33	3	1
water	10:32	0:0	4	1
arg	10:35	10:40	3	90000
water	10:35	0:0	4	90000
water	10:41	0:0	2	;
water	11:4	0:0	2	st
op	11:6	0:0	2	->
water	11:8	0:0	2	priv_data
op	11:26	0:0	2	=
water	11:28	0:0	2	pes
water	11:31	0:0	2	;
water	12:4	0:0	2	st
op	12:6	0:0	2	->
water	12:8	0:0	2	codec
op	12:13	0:0	2	->
water	12:15	0:0	2	codec_type
op	12:26	0:0	2	=
water	12:28	0:0	2	AVMEDIA_TYPE_DATA
water	12:45	0:0	2	;
water	13:4	0:0	2	st
op	13:6	0:0	2	->
water	13:8	0:0	2	codec
op	13:13	0:0	2	->
water	13:15	0:0	2	codec_id
op	13:26	0:0	2	=
water	13:28	0:0	2	AV_CODEC_ID_NONE
water	13:44	0:0	2	;
water	14:4	0:0	2	st
op	14:6	0:0	2	->
water	14:8	0:0	2	need_parsing
op	14:26	0:0	2	=
water	14:28	0:0	2	AVSTREAM_PARSE_FULL
water	14:47	0:0	2	;
water	15:4	0:0	2	pes
op	15:7	0:0	2	->
water	15:9	0:0	2	st
op	15:21	0:0	2	=
water	15:23	0:0	2	st
water	15:25	0:0	2	;
water	16:4	0:0	2	pes
op	16:7	0:0	2	->
water	16:9	0:0	2	stream_type
op	16:21	0:0	2	=
water	16:23	0:0	2	stream_type
water	16:34	0:0	2	;
call	17:4	19:72	2	av_log
arg	17:11	17:22	3	pes->stream
water	17:11	0:0	4	pes
op	17:14	0:0	4	->
water	17:16	0:0	4	stream
arg	17:24	17:36	3	AV_LOG_DEBUG
water	17:24	0:0	4	AV_LOG_DEBUG
arg	18:11	18:65	3	"stream=%d stream_type=%x pid=%x prog_reg_desc=%.4s\n"
water	18:11	0:0	4	"stream=%d stream_type=%x pid=%x prog_reg_desc=%.4s\n"
arg	19:11	19:20	3	st->index
water	19:11	0:0	4	st
op	19:13	0:0	4	->
water	19:15	0:0	4	index
arg	19:22	19:38	3	pes->stream_type
water	19:22	0:0	4	pes
op	19:25	0:0	4	->
water	19:27	0:0	4	stream_type
arg	19:40	19:48	3	pes->pid
water	19:40	0:0	4	pes
op	19:43	0:0	4	->
water	19:45	0:0	4	pid
arg	19:50	19:72	3	(char*)&prog_reg_desc
water	19:50	0:0	4	(
water	19:51	0:0	4	char
op	19:56	0:0	4	*
water	19:57	0:0	4	)
op	19:58	0:0	4	&
water	19:59	0:0	4	prog_reg_desc
water	19:73	0:0	2	;
water	20:4	0:0	2	st
op	20:6	0:0	2	->
water	20:8	0:0	2	codec
op	20:13	0:0	2	->
water	20:15	0:0	2	codec_tag
op	20:25	0:0	2	=
water	20:27	0:0	2	pes
op	20:30	0:0	2	->
water	20:32	0:0	2	stream_type
water	20:43	0:0	2	;
call	21:4	21:59	2	mpegts_find_stream_type
arg	21:28	21:30	3	st
water	21:28	0:0	4	st
arg	21:32	21:48	3	pes->stream_type
water	21:32	0:0	4	pes
op	21:35	0:0	4	->
water	21:37	0:0	4	stream_type
arg	21:50	21:59	3	ISO_types
water	21:50	0:0	4	ISO_types
water	21:60	0:0	2	;
if	22:4	48:4	2	(( prog_reg_desc ==AV_RL32 ("HDMV" ) || prog_reg_desc ==AV_RL32 ("HDPR" ) ) && st -> codec -> codec_id == AV_CODEC_ID_NONE)
cond	22:8	24:31	3	( prog_reg_desc ==AV_RL32 ("HDMV" ) || prog_reg_desc ==AV_RL32 ("HDPR" ) ) && st -> codec -> codec_id == AV_CODEC_ID_NONE
water	22:8	0:0	4	(
water	22:9	0:0	4	prog_reg_desc
op	22:23	0:0	4	==
call	22:26	22:40	4	AV_RL32
arg	22:34	22:40	5	"HDMV"
water	22:34	0:0	6	"HDMV"
op	22:42	0:0	4	||
water	23:9	0:0	4	prog_reg_desc
op	23:23	0:0	4	==
call	23:26	23:40	4	AV_RL32
arg	23:34	23:40	5	"HDPR"
water	23:34	0:0	6	"HDPR"
water	23:41	0:0	4	)
op	23:43	0:0	4	&&
water	24:8	0:0	4	st
op	24:10	0:0	4	->
water	24:12	0:0	4	codec
op	24:17	0:0	4	->
water	24:19	0:0	4	codec_id
op	24:28	0:0	4	==
water	24:31	0:0	4	AV_CODEC_ID_NONE
stmts	24:49	48:4	3	
water	24:49	0:0	4	{
call	25:8	25:64	4	mpegts_find_stream_type
arg	25:32	25:34	5	st
water	25:32	0:0	6	st
arg	25:36	25:52	5	pes->stream_type
water	25:36	0:0	6	pes
op	25:39	0:0	6	->
water	25:41	0:0	6	stream_type
arg	25:54	25:64	5	HDMV_types
water	25:54	0:0	6	HDMV_types
water	25:65	0:0	4	;
if	26:8	47:8	4	(pes -> stream_type == 0 x83)
cond	26:12	26:33	5	pes -> stream_type == 0 x83
water	26:12	0:0	6	pes
op	26:15	0:0	6	->
water	26:17	0:0	6	stream_type
op	26:29	0:0	6	==
water	26:32	0:0	6	0
water	26:33	0:0	6	x83
stmts	26:38	47:8	5	
water	26:38	0:0	6	{
decl	29:12	29:28	6	AVStream	*sub_st
decl	31:12	31:61	6	PESContext	*sub_pes
op	31:32	0:0	6	=
call	31:34	31:60	7	av_malloc
arg	31:44	31:60	8	sizeof(*sub_pes)
op	31:44	0:0	9	sizeof
water	31:50	0:0	9	(
op	31:51	0:0	9	*
water	31:52	0:0	9	sub_pes
water	31:59	0:0	9	)
if	32:12	33:38	6	(! sub_pes)
cond	32:16	32:17	7	! sub_pes
op	32:16	0:0	8	!
water	32:17	0:0	8	sub_pes
stmts	33:16	33:38	7	
return	33:16	33:38	8	AVERROR(ENOMEM)
call	33:23	33:37	9	AVERROR
arg	33:31	33:37	10	ENOMEM
water	33:31	0:0	11	ENOMEM
call	34:12	34:49	6	memcpy
arg	34:19	34:26	7	sub_pes
water	34:19	0:0	8	sub_pes
arg	34:28	34:31	7	pes
water	34:28	0:0	8	pes
arg	34:33	34:49	7	sizeof(*sub_pes)
op	34:33	0:0	8	sizeof
water	34:39	0:0	8	(
op	34:40	0:0	8	*
water	34:41	0:0	8	sub_pes
water	34:48	0:0	8	)
water	34:50	0:0	6	;
water	35:12	0:0	6	sub_st
op	35:19	0:0	6	=
call	35:21	35:58	6	avformat_new_stream
arg	35:41	35:52	7	pes->stream
water	35:41	0:0	8	pes
op	35:44	0:0	8	->
water	35:46	0:0	8	stream
arg	35:54	35:58	7	NULL
water	35:54	0:0	8	NULL
water	35:59	0:0	6	;
if	36:12	39:12	6	(! sub_st)
cond	36:16	36:17	7	! sub_st
op	36:16	0:0	8	!
water	36:17	0:0	8	sub_st
stmts	36:25	39:12	7	
water	36:25	0:0	8	{
call	37:16	37:31	8	av_free
arg	37:24	37:31	9	sub_pes
water	37:24	0:0	10	sub_pes
water	37:32	0:0	8	;
return	38:16	38:38	8	AVERROR(ENOMEM)
call	38:23	38:37	9	AVERROR
arg	38:31	38:37	10	ENOMEM
water	38:31	0:0	11	ENOMEM
water	39:12	0:0	8	}
water	40:12	0:0	6	sub_st
op	40:18	0:0	6	->
water	40:20	0:0	6	id
op	40:23	0:0	6	=
water	40:25	0:0	6	pes
op	40:28	0:0	6	->
water	40:30	0:0	6	pid
water	40:33	0:0	6	;
call	41:12	41:52	6	avpriv_set_pts_info
arg	41:32	41:38	7	sub_st
water	41:32	0:0	8	sub_st
arg	41:40	41:42	7	33
water	41:40	0:0	8	33
arg	41:44	41:45	7	1
water	41:44	0:0	8	1
arg	41:47	41:52	7	90000
water	41:47	0:0	8	90000
water	41:53	0:0	6	;
water	42:12	0:0	6	sub_st
op	42:18	0:0	6	->
water	42:20	0:0	6	priv_data
op	42:38	0:0	6	=
water	42:40	0:0	6	sub_pes
water	42:47	0:0	6	;
water	43:12	0:0	6	sub_st
op	43:18	0:0	6	->
water	43:20	0:0	6	codec
op	43:25	0:0	6	->
water	43:27	0:0	6	codec_type
op	43:38	0:0	6	=
water	43:40	0:0	6	AVMEDIA_TYPE_AUDIO
water	43:58	0:0	6	;
water	44:12	0:0	6	sub_st
op	44:18	0:0	6	->
water	44:20	0:0	6	codec
op	44:25	0:0	6	->
water	44:27	0:0	6	codec_id
op	44:38	0:0	6	=
water	44:40	0:0	6	AV_CODEC_ID_AC3
water	44:55	0:0	6	;
water	45:12	0:0	6	sub_st
op	45:18	0:0	6	->
water	45:20	0:0	6	need_parsing
op	45:38	0:0	6	=
water	45:40	0:0	6	AVSTREAM_PARSE_FULL
water	45:59	0:0	6	;
water	46:12	0:0	6	sub_pes
op	46:19	0:0	6	->
water	46:21	0:0	6	sub_st
op	46:38	0:0	6	=
water	46:40	0:0	6	pes
op	46:43	0:0	6	->
water	46:45	0:0	6	sub_st
op	46:52	0:0	6	=
water	46:54	0:0	6	sub_st
water	46:60	0:0	6	;
water	47:8	0:0	6	}
water	48:4	0:0	4	}
if	49:4	50:65	2	(st -> codec -> codec_id == AV_CODEC_ID_NONE)
cond	49:8	49:31	3	st -> codec -> codec_id == AV_CODEC_ID_NONE
water	49:8	0:0	4	st
op	49:10	0:0	4	->
water	49:12	0:0	4	codec
op	49:17	0:0	4	->
water	49:19	0:0	4	codec_id
op	49:28	0:0	4	==
water	49:31	0:0	4	AV_CODEC_ID_NONE
stmts	50:8	50:65	3	
call	50:8	50:64	4	mpegts_find_stream_type
arg	50:32	50:34	5	st
water	50:32	0:0	6	st
arg	50:36	50:52	5	pes->stream_type
water	50:36	0:0	6	pes
op	50:39	0:0	6	->
water	50:41	0:0	6	stream_type
arg	50:54	50:64	5	MISC_types
water	50:54	0:0	6	MISC_types
water	50:65	0:0	4	;
if	51:4	54:4	2	(st -> codec -> codec_id == AV_CODEC_ID_NONE)
cond	51:8	51:31	3	st -> codec -> codec_id == AV_CODEC_ID_NONE
water	51:8	0:0	4	st
op	51:10	0:0	4	->
water	51:12	0:0	4	codec
op	51:17	0:0	4	->
water	51:19	0:0	4	codec_id
op	51:28	0:0	4	==
water	51:31	0:0	4	AV_CODEC_ID_NONE
stmts	51:49	54:4	3	
water	51:49	0:0	4	{
water	52:8	0:0	4	st
op	52:10	0:0	4	->
water	52:12	0:0	4	codec
op	52:17	0:0	4	->
water	52:19	0:0	4	codec_id
op	52:29	0:0	4	=
water	52:31	0:0	4	old_codec_id
water	52:43	0:0	4	;
water	53:8	0:0	4	st
op	53:10	0:0	4	->
water	53:12	0:0	4	codec
op	53:17	0:0	4	->
water	53:19	0:0	4	codec_type
op	53:30	0:0	4	=
water	53:32	0:0	4	old_codec_type
water	53:46	0:0	4	;
water	54:4	0:0	4	}
if	55:4	62:4	2	(( st -> codec -> codec_id == AV_CODEC_ID_NONE || ( st -> request_probe > 0 && st -> request_probe < AVPROBE_SCORE_STREAM_RETRY / 5 ) ) && !avcodec_is_open (st -> codec ) && stream_type == STREAM_TYPE_PRIVATE_DATA)
cond	55:8	58:23	3	( st -> codec -> codec_id == AV_CODEC_ID_NONE || ( st -> request_probe > 0 && st -> request_probe < AVPROBE_SCORE_STREAM_RETRY / 5 ) ) && !avcodec_is_open (st -> codec ) && stream_type == STREAM_TYPE_PRIVATE_DATA
water	55:8	0:0	4	(
water	55:9	0:0	4	st
op	55:11	0:0	4	->
water	55:13	0:0	4	codec
op	55:18	0:0	4	->
water	55:20	0:0	4	codec_id
op	55:29	0:0	4	==
water	55:32	0:0	4	AV_CODEC_ID_NONE
op	55:49	0:0	4	||
water	56:12	0:0	4	(
water	56:13	0:0	4	st
op	56:15	0:0	4	->
water	56:17	0:0	4	request_probe
op	56:31	0:0	4	>
water	56:33	0:0	4	0
op	56:35	0:0	4	&&
water	56:38	0:0	4	st
op	56:40	0:0	4	->
water	56:42	0:0	4	request_probe
op	56:56	0:0	4	<
water	56:58	0:0	4	AVPROBE_SCORE_STREAM_RETRY
op	56:85	0:0	4	/
water	56:87	0:0	4	5
water	56:88	0:0	4	)
water	56:89	0:0	4	)
op	56:91	0:0	4	&&
op	57:8	0:0	4	!
call	57:9	57:34	4	avcodec_is_open
arg	57:25	57:34	5	st->codec
water	57:25	0:0	6	st
op	57:27	0:0	6	->
water	57:29	0:0	6	codec
op	57:36	0:0	4	&&
water	58:8	0:0	4	stream_type
op	58:20	0:0	4	==
water	58:23	0:0	4	STREAM_TYPE_PRIVATE_DATA
stmts	58:49	62:4	3	
water	58:49	0:0	4	{
water	59:8	0:0	4	st
op	59:10	0:0	4	->
water	59:12	0:0	4	codec
op	59:17	0:0	4	->
water	59:19	0:0	4	codec_type
op	59:30	0:0	4	=
water	59:32	0:0	4	AVMEDIA_TYPE_DATA
water	59:49	0:0	4	;
water	60:8	0:0	4	st
op	60:10	0:0	4	->
water	60:12	0:0	4	codec
op	60:17	0:0	4	->
water	60:19	0:0	4	codec_id
op	60:30	0:0	4	=
water	60:32	0:0	4	AV_CODEC_ID_BIN_DATA
water	60:52	0:0	4	;
water	61:8	0:0	4	st
op	61:10	0:0	4	->
water	61:12	0:0	4	request_probe
op	61:26	0:0	4	=
water	61:28	0:0	4	AVPROBE_SCORE_STREAM_RETRY
op	61:55	0:0	4	/
water	61:57	0:0	4	5
water	61:58	0:0	4	;
water	62:4	0:0	4	}
return	63:4	63:12	2	0
water	63:11	0:0	3	0
