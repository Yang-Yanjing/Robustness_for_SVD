func	1:0	65:51	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:60	2	AVFrame *	inpic
stmnts	0:0	65:49	1	
decl	3:4	3:47	2	MCDeintContext	*mcdeint
op	3:28	0:0	2	=
water	3:30	0:0	2	inlink
op	3:36	0:0	2	->
water	3:38	0:0	2	dst
op	3:41	0:0	2	->
water	3:43	0:0	2	priv
decl	4:4	4:51	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	inlink
op	4:34	0:0	2	->
water	4:36	0:0	2	dst
op	4:39	0:0	2	->
water	4:41	0:0	2	outputs
op	4:48	0:0	2	[
water	4:49	0:0	2	0
op	4:50	0:0	2	]
decl	5:4	5:31	2	AVFrame	*outpic
water	5:19	0:0	2	,
decl	5:4	5:31	2	AVFrame	*frame_dec
decl	6:4	6:22	2	AVPacket	pkt
op	6:17	0:0	2	=
water	6:19	0:0	2	{
water	6:20	0:0	2	0
water	6:21	0:0	2	}
decl	7:4	7:35	2	int	x
water	7:9	0:0	2	,
decl	7:4	7:35	2	int	y
water	7:12	0:0	2	,
decl	7:4	7:35	2	int	i
water	7:15	0:0	2	,
decl	7:4	7:35	2	int	ret
water	7:20	0:0	2	,
decl	7:4	7:35	2	int	got_frame
op	7:32	0:0	2	=
water	7:34	0:0	2	0
water	8:4	0:0	2	outpic
op	8:11	0:0	2	=
call	8:13	8:64	2	ff_get_video_buffer
arg	8:33	8:40	3	outlink
water	8:33	0:0	4	outlink
arg	8:42	8:52	3	outlink->w
water	8:42	0:0	4	outlink
op	8:49	0:0	4	->
water	8:51	0:0	4	w
arg	8:54	8:64	3	outlink->h
water	8:54	0:0	4	outlink
op	8:61	0:0	4	->
water	8:63	0:0	4	h
water	8:65	0:0	2	;
if	9:4	12:4	2	(! outpic)
cond	9:8	9:9	3	! outpic
op	9:8	0:0	4	!
water	9:9	0:0	4	outpic
stmts	9:17	12:4	3	
water	9:17	0:0	4	{
call	10:8	10:28	4	av_frame_free
arg	10:22	10:28	5	&inpic
op	10:22	0:0	6	&
water	10:23	0:0	6	inpic
water	10:29	0:0	4	;
return	11:8	11:30	4	AVERROR(ENOMEM)
call	11:15	11:29	5	AVERROR
arg	11:23	11:29	6	ENOMEM
water	11:23	0:0	7	ENOMEM
water	12:4	0:0	4	}
call	13:4	13:37	2	av_frame_copy_props
arg	13:24	13:30	3	outpic
water	13:24	0:0	4	outpic
arg	13:32	13:37	3	inpic
water	13:32	0:0	4	inpic
water	13:38	0:0	2	;
water	14:4	0:0	2	inpic
op	14:9	0:0	2	->
water	14:11	0:0	2	quality
op	14:19	0:0	2	=
water	14:21	0:0	2	mcdeint
op	14:28	0:0	2	->
water	14:30	0:0	2	qp
op	14:33	0:0	2	*
water	14:35	0:0	2	FF_QP2LAMBDA
water	14:47	0:0	2	;
call	15:4	15:23	2	av_init_packet
arg	15:19	15:23	3	&pkt
op	15:19	0:0	4	&
water	15:20	0:0	4	pkt
water	15:24	0:0	2	;
water	16:4	0:0	2	ret
op	16:8	0:0	2	=
call	16:10	16:73	2	avcodec_encode_video2
arg	16:32	16:48	3	mcdeint->enc_ctx
water	16:32	0:0	4	mcdeint
op	16:39	0:0	4	->
water	16:41	0:0	4	enc_ctx
arg	16:50	16:54	3	&pkt
op	16:50	0:0	4	&
water	16:51	0:0	4	pkt
arg	16:56	16:61	3	inpic
water	16:56	0:0	4	inpic
arg	16:63	16:73	3	&got_frame
op	16:63	0:0	4	&
water	16:64	0:0	4	got_frame
water	16:74	0:0	2	;
if	17:4	18:16	2	(ret < 0)
cond	17:8	17:14	3	ret < 0
water	17:8	0:0	4	ret
op	17:12	0:0	4	<
water	17:14	0:0	4	0
stmts	18:8	18:16	3	
goto	18:8	18:16	4	end
water	18:13	0:0	5	end
water	19:4	0:0	2	frame_dec
op	19:14	0:0	2	=
water	19:16	0:0	2	mcdeint
op	19:23	0:0	2	->
water	19:25	0:0	2	enc_ctx
op	19:32	0:0	2	->
water	19:34	0:0	2	coded_frame
water	19:45	0:0	2	;
for	20:4	65:49	2	(i = 0 ;i < 3;i ++)
forinit	20:9	20:14	3	i = 0 ;
water	20:9	0:0	4	i
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:20	3	i < 3
water	20:16	0:0	4	i
op	20:18	0:0	4	<
water	20:20	0:0	4	3
forexpr	20:23	20:24	3	i ++
water	20:23	0:0	4	i
op	20:24	0:0	4	++
stmts	20:28	65:49	3	
water	20:28	0:0	4	{
decl	21:8	21:27	4	int	is_chroma
op	21:22	0:0	4	=
op	21:24	0:0	4	!
op	21:25	0:0	4	!
water	21:26	0:0	4	i
decl	22:8	22:52	4	int	w
op	22:14	0:0	4	=
call	22:16	22:51	5	FF_CEIL_RSHIFT
arg	22:31	22:40	6	inlink->w
water	22:31	0:0	7	inlink
op	22:37	0:0	7	->
water	22:39	0:0	7	w
arg	22:42	22:51	6	is_chroma
water	22:42	0:0	7	is_chroma
decl	23:8	23:52	4	int	h
op	23:14	0:0	4	=
call	23:16	23:51	5	FF_CEIL_RSHIFT
arg	23:31	23:40	6	inlink->h
water	23:31	0:0	7	inlink
op	23:37	0:0	7	->
water	23:39	0:0	7	h
arg	23:42	23:51	6	is_chroma
water	23:42	0:0	7	is_chroma
decl	24:8	24:41	4	int	fils
op	24:17	0:0	4	=
water	24:19	0:0	4	frame_dec
op	24:28	0:0	4	->
water	24:30	0:0	4	linesize
op	24:38	0:0	4	[
water	24:39	0:0	4	i
op	24:40	0:0	4	]
decl	25:8	25:41	4	int	srcs
op	25:17	0:0	4	=
water	25:19	0:0	4	inpic
op	25:28	0:0	4	->
water	25:30	0:0	4	linesize
op	25:38	0:0	4	[
water	25:39	0:0	4	i
op	25:40	0:0	4	]
decl	26:8	26:41	4	int	dsts
op	26:17	0:0	4	=
water	26:19	0:0	4	outpic
op	26:28	0:0	4	->
water	26:30	0:0	4	linesize
op	26:38	0:0	4	[
water	26:39	0:0	4	i
op	26:40	0:0	4	]
for	27:8	63:24	4	(y = 0 ;y < h;y ++)
forinit	27:13	27:18	5	y = 0 ;
water	27:13	0:0	6	y
op	27:15	0:0	6	=
water	27:17	0:0	6	0
water	27:18	0:0	6	;
cond	27:20	27:24	5	y < h
water	27:20	0:0	6	y
op	27:22	0:0	6	<
water	27:24	0:0	6	h
forexpr	27:27	27:28	5	y ++
water	27:27	0:0	6	y
op	27:28	0:0	6	++
stmts	27:32	63:24	5	
water	27:32	0:0	6	{
if	28:12	62:62	6	(( y ^ mcdeint -> parity ) & 1)
cond	28:16	28:40	7	( y ^ mcdeint -> parity ) & 1
water	28:16	0:0	8	(
water	28:17	0:0	8	y
op	28:19	0:0	8	^
water	28:21	0:0	8	mcdeint
op	28:28	0:0	8	->
water	28:30	0:0	8	parity
water	28:36	0:0	8	)
op	28:38	0:0	8	&
water	28:40	0:0	8	1
stmts	28:43	62:62	7	
water	28:43	0:0	8	{
for	29:16	62:61	8	(x = 0 ;x < w;x ++)
forinit	29:21	29:26	9	x = 0 ;
water	29:21	0:0	10	x
op	29:23	0:0	10	=
water	29:25	0:0	10	0
water	29:26	0:0	10	;
cond	29:28	29:32	9	x < w
water	29:28	0:0	10	x
op	29:30	0:0	10	<
water	29:32	0:0	10	w
forexpr	29:35	29:36	9	x ++
water	29:35	0:0	10	x
op	29:36	0:0	10	++
stmts	29:40	62:61	9	
water	29:40	0:0	10	{
decl	30:20	30:67	10	uint8_t	*filp
op	30:34	0:0	10	=
op	30:36	0:0	10	&
water	30:37	0:0	10	frame_dec
op	30:46	0:0	10	->
water	30:48	0:0	10	data
op	30:52	0:0	10	[
water	30:53	0:0	10	i
op	30:54	0:0	10	]
op	30:55	0:0	10	[
water	30:56	0:0	10	x
op	30:58	0:0	10	+
water	30:60	0:0	10	y
op	30:61	0:0	10	*
water	30:62	0:0	10	fils
op	30:66	0:0	10	]
decl	31:20	31:67	10	uint8_t	*srcp
op	31:34	0:0	10	=
op	31:36	0:0	10	&
water	31:37	0:0	10	inpic
op	31:46	0:0	10	->
water	31:48	0:0	10	data
op	31:52	0:0	10	[
water	31:53	0:0	10	i
op	31:54	0:0	10	]
op	31:55	0:0	10	[
water	31:56	0:0	10	x
op	31:58	0:0	10	+
water	31:60	0:0	10	y
op	31:61	0:0	10	*
water	31:62	0:0	10	srcs
op	31:66	0:0	10	]
decl	32:20	32:67	10	uint8_t	*dstp
op	32:34	0:0	10	=
op	32:36	0:0	10	&
water	32:37	0:0	10	outpic
op	32:46	0:0	10	->
water	32:48	0:0	10	data
op	32:52	0:0	10	[
water	32:53	0:0	10	i
op	32:54	0:0	10	]
op	32:55	0:0	10	[
water	32:56	0:0	10	x
op	32:58	0:0	10	+
water	32:60	0:0	10	y
op	32:61	0:0	10	*
water	32:62	0:0	10	dsts
op	32:66	0:0	10	]
if	33:20	62:59	10	(y > 0 && y < h - 1)
cond	33:24	33:39	11	y > 0 && y < h - 1
water	33:24	0:0	12	y
op	33:26	0:0	12	>
water	33:28	0:0	12	0
op	33:30	0:0	12	&&
water	33:33	0:0	12	y
op	33:35	0:0	12	<
water	33:37	0:0	12	h
op	33:38	0:0	12	-
water	33:39	0:0	12	1
stmts	33:41	62:59	11	
water	33:41	0:0	12	{
decl	34:24	34:54	12	int	is_edge
op	34:36	0:0	12	=
water	34:38	0:0	12	x
op	34:40	0:0	12	<
water	34:42	0:0	12	3
op	34:44	0:0	12	||
water	34:47	0:0	12	x
op	34:49	0:0	12	>
water	34:51	0:0	12	w
op	34:52	0:0	12	-
water	34:53	0:0	12	4
decl	35:24	35:61	12	int	diff0
op	35:34	0:0	12	=
water	35:36	0:0	12	filp
op	35:40	0:0	12	[
op	35:41	0:0	12	-
water	35:42	0:0	12	fils
op	35:46	0:0	12	]
op	35:48	0:0	12	-
water	35:50	0:0	12	srcp
op	35:54	0:0	12	[
op	35:55	0:0	12	-
water	35:56	0:0	12	srcs
op	35:60	0:0	12	]
decl	36:24	36:61	12	int	diff1
op	36:34	0:0	12	=
water	36:36	0:0	12	filp
op	36:40	0:0	12	[
op	36:41	0:0	12	+
water	36:42	0:0	12	fils
op	36:46	0:0	12	]
op	36:48	0:0	12	-
water	36:50	0:0	12	srcp
op	36:54	0:0	12	[
op	36:55	0:0	12	+
water	36:56	0:0	12	srcs
op	36:60	0:0	12	]
decl	37:24	37:42	12	int	temp
op	37:33	0:0	12	=
water	37:35	0:0	12	filp
op	37:39	0:0	12	[
water	37:40	0:0	12	0
op	37:41	0:0	12	]
water	40:3	0:0	12	FFABS
water	40:8	0:0	12	(
water	40:9	0:0	12	srcp
op	40:13	0:0	12	[
op	40:14	0:0	12	-
water	40:15	0:0	12	srcs
op	40:19	0:0	12	+
water	40:20	0:0	12	DELTA
water	40:25	0:0	12	(
op	40:26	0:0	12	-
water	40:27	0:0	12	1
op	40:28	0:0	12	+
water	40:29	0:0	12	(
water	40:30	0:0	12	j
water	40:31	0:0	12	)
water	40:32	0:0	12	)
op	40:33	0:0	12	]
op	40:35	0:0	12	-
water	40:37	0:0	12	srcp
op	40:41	0:0	12	[
op	40:42	0:0	12	+
water	40:43	0:0	12	srcs
op	40:47	0:0	12	+
water	40:48	0:0	12	DELTA
water	40:53	0:0	12	(
op	40:54	0:0	12	-
water	40:55	0:0	12	1
op	40:56	0:0	12	-
water	40:57	0:0	12	(
water	40:58	0:0	12	j
water	40:59	0:0	12	)
water	40:60	0:0	12	)
op	40:61	0:0	12	]
water	40:62	0:0	12	)
op	40:63	0:0	12	+
water	41:3	0:0	12	FFABS
water	41:8	0:0	12	(
water	41:9	0:0	12	srcp
op	41:13	0:0	12	[
op	41:14	0:0	12	-
water	41:15	0:0	12	srcs
op	41:19	0:0	12	+
water	41:20	0:0	12	DELTA
water	41:25	0:0	12	(
water	41:26	0:0	12	j
water	41:27	0:0	12	)
op	41:33	0:0	12	]
op	41:35	0:0	12	-
water	41:37	0:0	12	srcp
op	41:41	0:0	12	[
op	41:42	0:0	12	+
water	41:43	0:0	12	srcs
op	41:47	0:0	12	+
water	41:48	0:0	12	DELTA
water	41:53	0:0	12	(
op	41:56	0:0	12	-
water	41:57	0:0	12	(
water	41:58	0:0	12	j
water	41:59	0:0	12	)
water	41:60	0:0	12	)
op	41:61	0:0	12	]
water	41:62	0:0	12	)
op	41:63	0:0	12	+
water	42:3	0:0	12	FFABS
water	42:8	0:0	12	(
water	42:9	0:0	12	srcp
op	42:13	0:0	12	[
op	42:14	0:0	12	-
water	42:15	0:0	12	srcs
op	42:19	0:0	12	+
water	42:20	0:0	12	DELTA
water	42:25	0:0	12	(
water	42:26	0:0	12	1
op	42:27	0:0	12	+
water	42:28	0:0	12	(
water	42:29	0:0	12	j
water	42:30	0:0	12	)
water	42:31	0:0	12	)
op	42:33	0:0	12	]
op	42:35	0:0	12	-
water	42:37	0:0	12	srcp
op	42:41	0:0	12	[
op	42:42	0:0	12	+
water	42:43	0:0	12	srcs
op	42:47	0:0	12	+
water	42:48	0:0	12	DELTA
water	42:53	0:0	12	(
water	42:55	0:0	12	1
op	42:56	0:0	12	-
water	42:57	0:0	12	(
water	42:58	0:0	12	j
water	42:59	0:0	12	)
water	42:60	0:0	12	)
op	42:61	0:0	12	]
water	42:62	0:0	12	)
water	44:3	0:0	12	FFABS
water	44:8	0:0	12	(
water	44:9	0:0	12	srcp
op	44:13	0:0	12	[
op	44:14	0:0	12	-
water	44:15	0:0	12	srcs
op	44:19	0:0	12	-
water	44:20	0:0	12	1
op	44:21	0:0	12	+
water	44:22	0:0	12	(
water	44:23	0:0	12	j
water	44:24	0:0	12	)
op	44:25	0:0	12	]
op	44:27	0:0	12	-
water	44:29	0:0	12	srcp
op	44:33	0:0	12	[
op	44:34	0:0	12	+
water	44:35	0:0	12	srcs
op	44:39	0:0	12	-
water	44:40	0:0	12	1
op	44:41	0:0	12	-
water	44:42	0:0	12	(
water	44:43	0:0	12	j
water	44:44	0:0	12	)
op	44:45	0:0	12	]
water	44:46	0:0	12	)
op	44:47	0:0	12	+
water	45:3	0:0	12	FFABS
water	45:8	0:0	12	(
water	45:9	0:0	12	srcp
op	45:13	0:0	12	[
op	45:14	0:0	12	-
water	45:15	0:0	12	srcs
op	45:21	0:0	12	+
water	45:22	0:0	12	(
water	45:23	0:0	12	j
water	45:24	0:0	12	)
op	45:25	0:0	12	]
op	45:27	0:0	12	-
water	45:29	0:0	12	srcp
op	45:33	0:0	12	[
op	45:34	0:0	12	+
water	45:35	0:0	12	srcs
op	45:41	0:0	12	-
water	45:42	0:0	12	(
water	45:43	0:0	12	j
water	45:44	0:0	12	)
op	45:45	0:0	12	]
water	45:46	0:0	12	)
op	45:47	0:0	12	+
water	46:3	0:0	12	FFABS
water	46:8	0:0	12	(
water	46:9	0:0	12	srcp
op	46:13	0:0	12	[
op	46:14	0:0	12	-
water	46:15	0:0	12	srcs
op	46:19	0:0	12	+
water	46:20	0:0	12	1
op	46:21	0:0	12	+
water	46:22	0:0	12	(
water	46:23	0:0	12	j
water	46:24	0:0	12	)
op	46:25	0:0	12	]
op	46:27	0:0	12	-
water	46:29	0:0	12	srcp
op	46:33	0:0	12	[
op	46:34	0:0	12	+
water	46:35	0:0	12	srcs
op	46:39	0:0	12	+
water	46:40	0:0	12	1
op	46:41	0:0	12	-
water	46:42	0:0	12	(
water	46:43	0:0	12	j
water	46:44	0:0	12	)
op	46:45	0:0	12	]
water	46:46	0:0	12	)
water	48:4	0:0	12	{
decl	48:8	48:37	12	int	score
op	48:18	0:0	12	=
call	48:20	48:36	13	GET_SCORE_EDGE
arg	48:35	48:36	14	j
water	48:35	0:0	15	j
if	49:8	61:62	12	(score < spatial_score)
cond	49:12	49:20	13	score < spatial_score
water	49:12	0:0	14	score
op	49:18	0:0	14	<
water	49:20	0:0	14	spatial_score
stmts	49:34	61:62	13	
water	49:34	0:0	14	{
water	50:12	0:0	14	spatial_score
op	50:26	0:0	14	=
water	50:28	0:0	14	score
water	50:33	0:0	14	;
water	51:12	0:0	14	diff0
op	51:18	0:0	14	=
water	51:20	0:0	14	filp
op	51:24	0:0	14	[
op	51:25	0:0	14	-
water	51:26	0:0	14	fils
op	51:30	0:0	14	+
call	51:31	51:38	14	DELTA
arg	51:37	51:38	15	j
water	51:37	0:0	16	j
op	51:39	0:0	14	]
op	51:44	0:0	14	-
water	51:46	0:0	14	srcp
op	51:50	0:0	14	[
op	51:51	0:0	14	-
water	51:52	0:0	14	srcs
op	51:56	0:0	14	+
call	51:57	51:64	14	DELTA
arg	51:63	51:64	15	j
water	51:63	0:0	16	j
op	51:65	0:0	14	]
water	51:66	0:0	14	;
water	52:12	0:0	14	diff1
op	52:18	0:0	14	=
water	52:20	0:0	14	filp
op	52:24	0:0	14	[
op	52:25	0:0	14	+
water	52:26	0:0	14	fils
op	52:30	0:0	14	+
call	52:31	52:41	14	DELTA
arg	52:37	52:41	15	-(j)
op	52:37	0:0	16	-
water	52:38	0:0	16	(
water	52:39	0:0	16	j
water	52:40	0:0	16	)
op	52:42	0:0	14	]
op	52:44	0:0	14	-
water	52:46	0:0	14	srcp
op	52:50	0:0	14	[
op	52:51	0:0	14	+
water	52:52	0:0	14	srcs
op	52:56	0:0	14	+
call	52:57	52:67	14	DELTA
arg	52:63	52:67	15	-(j)
op	52:63	0:0	16	-
water	52:64	0:0	16	(
water	52:65	0:0	16	j
water	52:66	0:0	16	)
op	52:68	0:0	14	]
water	52:69	0:0	14	;
water	54:4	0:0	14	{
decl	54:8	54:32	14	int	score
op	54:18	0:0	14	=
call	54:20	54:31	15	GET_SCORE
arg	54:30	54:31	16	j
water	54:30	0:0	17	j
if	55:8	61:59	14	(score < spatial_score)
cond	55:12	55:20	15	score < spatial_score
water	55:12	0:0	16	score
op	55:18	0:0	16	<
water	55:20	0:0	16	spatial_score
stmts	55:34	61:59	15	
water	55:34	0:0	16	{
water	56:12	0:0	16	spatial_score
op	56:25	0:0	16	=
water	56:27	0:0	16	score
water	56:32	0:0	16	;
water	57:12	0:0	16	diff0
op	57:18	0:0	16	=
water	57:20	0:0	16	filp
op	57:24	0:0	16	[
op	57:25	0:0	16	-
water	57:26	0:0	16	fils
op	57:30	0:0	16	+
water	57:31	0:0	16	(
water	57:32	0:0	16	j
water	57:33	0:0	16	)
op	57:34	0:0	16	]
op	57:36	0:0	16	-
water	57:38	0:0	16	srcp
op	57:42	0:0	16	[
op	57:43	0:0	16	-
water	57:44	0:0	16	srcs
op	57:48	0:0	16	+
water	57:49	0:0	16	(
water	57:50	0:0	16	j
water	57:51	0:0	16	)
op	57:52	0:0	16	]
water	57:53	0:0	16	;
water	58:12	0:0	16	diff1
op	58:18	0:0	16	=
water	58:20	0:0	16	filp
op	58:24	0:0	16	[
op	58:25	0:0	16	+
water	58:26	0:0	16	fils
op	58:30	0:0	16	-
water	58:31	0:0	16	(
water	58:32	0:0	16	j
water	58:33	0:0	16	)
op	58:34	0:0	16	]
op	58:36	0:0	16	-
water	58:38	0:0	16	srcp
op	58:42	0:0	16	[
op	58:43	0:0	16	+
water	58:44	0:0	16	srcs
op	58:48	0:0	16	-
water	58:49	0:0	16	(
water	58:50	0:0	16	j
water	58:51	0:0	16	)
op	58:52	0:0	16	]
water	58:53	0:0	16	;
if	59:24	61:58	16	(is_edge)
cond	59:28	59:28	17	is_edge
water	59:28	0:0	18	is_edge
stmts	59:37	61:58	17	
water	59:37	0:0	18	{
decl	60:28	60:69	18	int	spatial_score
op	60:46	0:0	18	=
call	60:48	60:64	19	GET_SCORE_EDGE
arg	60:63	60:64	20	0
water	60:63	0:0	21	0
op	60:66	0:0	18	-
water	60:68	0:0	18	1
water	61:28	0:0	18	CHECK_EDGE
water	61:38	0:0	18	(
op	61:39	0:0	18	-
water	61:40	0:0	18	1
water	61:41	0:0	18	)
water	61:43	0:0	18	CHECK_EDGE
water	61:53	0:0	18	(
op	61:54	0:0	18	-
water	61:55	0:0	18	2
water	61:56	0:0	18	)
water	61:58	0:0	18	}
water	61:59	0:0	16	}
water	61:61	0:0	14	}
water	61:62	0:0	14	}
water	62:28	0:0	12	CHECK_EDGE
water	62:38	0:0	12	(
water	62:40	0:0	12	1
water	62:41	0:0	12	)
water	62:43	0:0	12	CHECK_EDGE
water	62:53	0:0	12	(
water	62:55	0:0	12	2
water	62:56	0:0	12	)
water	62:58	0:0	12	}
water	62:59	0:0	12	}
water	62:61	0:0	10	}
water	62:62	0:0	8	}
water	63:24	0:0	6	}
else	63:26	65:48	4
stmts	63:31	65:48	5	
water	63:31	0:0	6	{
decl	64:28	64:64	6	int	spatial_score
op	64:46	0:0	6	=
call	64:48	64:59	7	GET_SCORE
arg	64:58	64:59	8	0
water	64:58	0:0	9	0
op	64:61	0:0	6	-
water	64:63	0:0	6	1
water	65:28	0:0	6	CHECK
water	65:33	0:0	6	(
op	65:34	0:0	6	-
water	65:35	0:0	6	1
water	65:36	0:0	6	)
water	65:38	0:0	6	CHECK
water	65:43	0:0	6	(
op	65:44	0:0	6	-
water	65:45	0:0	6	2
water	65:46	0:0	6	)
water	65:48	0:0	6	}
water	65:49	0:0	4	}
