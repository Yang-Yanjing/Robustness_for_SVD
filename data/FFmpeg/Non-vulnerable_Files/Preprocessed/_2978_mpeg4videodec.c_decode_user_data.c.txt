func	1:0	44:0	0	static int	decode_user_data
params	1:27	0:0	1	
param	1:28	1:48	2	Mpeg4DecContext *	ctx
param	1:50	1:67	2	GetBitContext *	gb
stmnts	0:0	43:12	1	
decl	3:4	3:31	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	m
decl	4:4	4:17	2	char	buf[256]
decl	5:4	5:9	2	int	i
decl	6:4	6:9	2	int	e
decl	7:4	7:46	2	int	ver
op	7:12	0:0	2	=
water	7:14	0:0	2	0
water	7:15	0:0	2	,
decl	7:4	7:46	2	int	build
op	7:23	0:0	2	=
water	7:25	0:0	2	0
water	7:26	0:0	2	,
decl	7:4	7:46	2	int	ver2
op	7:33	0:0	2	=
water	7:35	0:0	2	0
water	7:36	0:0	2	,
decl	7:4	7:46	2	int	ver3
op	7:43	0:0	2	=
water	7:45	0:0	2	0
decl	8:4	8:13	2	char	last
for	9:4	13:4	2	(i = 0 ;i < 255 &&get_bits_count (gb ) < gb -> size_in_bits;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:52	3	i < 255 &&get_bits_count (gb ) < gb -> size_in_bits
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	255
op	9:24	0:0	4	&&
call	9:27	9:44	4	get_bits_count
arg	9:42	9:44	5	gb
water	9:42	0:0	6	gb
op	9:46	0:0	4	<
water	9:48	0:0	4	gb
op	9:50	0:0	4	->
water	9:52	0:0	4	size_in_bits
forexpr	9:66	9:67	3	i ++
water	9:66	0:0	4	i
op	9:67	0:0	4	++
stmts	9:71	13:4	3	
water	9:71	0:0	4	{
if	10:8	11:17	4	(show_bits (gb ,23 ) == 0)
cond	10:12	10:33	5	show_bits (gb ,23 ) == 0
call	10:12	10:28	6	show_bits
arg	10:22	10:24	7	gb
water	10:22	0:0	8	gb
arg	10:26	10:28	7	23
water	10:26	0:0	8	23
op	10:30	0:0	6	==
water	10:33	0:0	6	0
stmts	11:12	11:17	5	
break	11:12	11:17	6	
water	12:8	0:0	4	buf
op	12:11	0:0	4	[
water	12:12	0:0	4	i
op	12:13	0:0	4	]
op	12:15	0:0	4	=
call	12:17	12:31	4	get_bits
arg	12:26	12:28	5	gb
water	12:26	0:0	6	gb
arg	12:30	12:31	5	8
water	12:30	0:0	6	8
water	12:32	0:0	4	;
water	13:4	0:0	4	}
water	14:4	0:0	2	buf
op	14:7	0:0	2	[
water	14:8	0:0	2	i
op	14:9	0:0	2	]
op	14:11	0:0	2	=
water	14:13	0:0	2	0
water	14:14	0:0	2	;
water	16:4	0:0	2	e
op	16:6	0:0	2	=
call	16:8	16:58	2	sscanf
arg	16:15	16:18	3	buf
water	16:15	0:0	4	buf
arg	16:20	16:37	3	"DivX%dBuild%d%c"
water	16:20	0:0	4	"DivX%dBuild%d%c"
arg	16:39	16:43	3	&ver
op	16:39	0:0	4	&
water	16:40	0:0	4	ver
arg	16:45	16:51	3	&build
op	16:45	0:0	4	&
water	16:46	0:0	4	build
arg	16:53	16:58	3	&last
op	16:53	0:0	4	&
water	16:54	0:0	4	last
water	16:59	0:0	2	;
if	17:4	18:59	2	(e < 2)
cond	17:8	17:12	3	e < 2
water	17:8	0:0	4	e
op	17:10	0:0	4	<
water	17:12	0:0	4	2
stmts	18:8	18:59	3	
water	18:8	0:0	4	e
op	18:10	0:0	4	=
call	18:12	18:58	4	sscanf
arg	18:19	18:22	5	buf
water	18:19	0:0	6	buf
arg	18:24	18:37	5	"DivX%db%d%c"
water	18:24	0:0	6	"DivX%db%d%c"
arg	18:39	18:43	5	&ver
op	18:39	0:0	6	&
water	18:40	0:0	6	ver
arg	18:45	18:51	5	&build
op	18:45	0:0	6	&
water	18:46	0:0	6	build
arg	18:53	18:58	5	&last
op	18:53	0:0	6	&
water	18:54	0:0	6	last
water	18:59	0:0	4	;
if	19:4	23:4	2	(e >= 2)
cond	19:8	19:13	3	e >= 2
water	19:8	0:0	4	e
op	19:10	0:0	4	>=
water	19:13	0:0	4	2
stmts	19:16	23:4	3	
water	19:16	0:0	4	{
water	20:8	0:0	4	ctx
op	20:11	0:0	4	->
water	20:13	0:0	4	divx_version
op	20:26	0:0	4	=
water	20:28	0:0	4	ver
water	20:31	0:0	4	;
water	21:8	0:0	4	ctx
op	21:11	0:0	4	->
water	21:13	0:0	4	divx_build
op	21:26	0:0	4	=
water	21:28	0:0	4	build
water	21:33	0:0	4	;
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	divx_packed
op	22:24	0:0	4	=
water	22:26	0:0	4	e
op	22:28	0:0	4	==
water	22:31	0:0	4	3
op	22:33	0:0	4	&&
water	22:36	0:0	4	last
op	22:41	0:0	4	==
water	22:44	0:0	4	'p'
water	22:47	0:0	4	;
water	23:4	0:0	4	}
water	25:4	0:0	2	e
op	25:6	0:0	2	=
call	25:8	25:44	2	sscanf
arg	25:15	25:18	3	buf
water	25:15	0:0	4	buf
arg	25:20	25:36	3	"FFmpe%*[^b]b%d"
water	25:20	0:0	4	"FFmpe%*[^b]b%d"
arg	25:38	25:44	3	&build
op	25:38	0:0	4	&
water	25:39	0:0	4	build
op	25:46	0:0	2	+
water	25:48	0:0	2	3
water	25:49	0:0	2	;
if	26:4	27:94	2	(e != 4)
cond	26:8	26:13	3	e != 4
water	26:8	0:0	4	e
op	26:10	0:0	4	!=
water	26:13	0:0	4	4
stmts	27:8	27:94	3	
water	27:8	0:0	4	e
op	27:10	0:0	4	=
call	27:12	27:93	4	sscanf
arg	27:19	27:22	5	buf
water	27:19	0:0	6	buf
arg	27:24	27:65	5	"FFmpeg v%d.%d.%d / libavcodec build: %d"
water	27:24	0:0	6	"FFmpeg v%d.%d.%d / libavcodec build: %d"
arg	27:67	27:71	5	&ver
op	27:67	0:0	6	&
water	27:68	0:0	6	ver
arg	27:73	27:78	5	&ver2
op	27:73	0:0	6	&
water	27:74	0:0	6	ver2
arg	27:80	27:85	5	&ver3
op	27:80	0:0	6	&
water	27:81	0:0	6	ver3
arg	27:87	27:93	5	&build
op	27:87	0:0	6	&
water	27:88	0:0	6	build
water	27:94	0:0	4	;
if	28:4	32:4	2	(e != 4)
cond	28:8	28:13	3	e != 4
water	28:8	0:0	4	e
op	28:10	0:0	4	!=
water	28:13	0:0	4	4
stmts	28:16	32:4	3	
water	28:16	0:0	4	{
water	29:8	0:0	4	e
op	29:10	0:0	4	=
call	29:12	29:58	4	sscanf
arg	29:19	29:22	5	buf
water	29:19	0:0	6	buf
arg	29:24	29:38	5	"Lavc%d.%d.%d"
water	29:24	0:0	6	"Lavc%d.%d.%d"
arg	29:40	29:44	5	&ver
op	29:40	0:0	6	&
water	29:41	0:0	6	ver
arg	29:46	29:51	5	&ver2
op	29:46	0:0	6	&
water	29:47	0:0	6	ver2
arg	29:53	29:58	5	&ver3
op	29:53	0:0	6	&
water	29:54	0:0	6	ver3
op	29:60	0:0	4	+
water	29:62	0:0	4	1
water	29:63	0:0	4	;
if	30:8	31:52	4	(e > 1)
cond	30:12	30:16	5	e > 1
water	30:12	0:0	6	e
op	30:14	0:0	6	>
water	30:16	0:0	6	1
stmts	31:12	31:52	5	
water	31:12	0:0	6	build
op	31:18	0:0	6	=
water	31:20	0:0	6	(
water	31:21	0:0	6	ver
op	31:25	0:0	6	<<
water	31:28	0:0	6	16
water	31:30	0:0	6	)
op	31:32	0:0	6	+
water	31:34	0:0	6	(
water	31:35	0:0	6	ver2
op	31:40	0:0	6	<<
water	31:43	0:0	6	8
water	31:44	0:0	6	)
op	31:46	0:0	6	+
water	31:48	0:0	6	ver3
water	31:52	0:0	6	;
water	32:4	0:0	4	}
if	33:4	36:4	2	(e != 4)
cond	33:8	33:13	3	e != 4
water	33:8	0:0	4	e
op	33:10	0:0	4	!=
water	33:13	0:0	4	4
stmts	33:16	36:4	3	
water	33:16	0:0	4	{
if	34:8	35:34	4	(strcmp (buf ,"ffmpeg" ) == 0)
cond	34:12	34:37	5	strcmp (buf ,"ffmpeg" ) == 0
call	34:12	34:32	6	strcmp
arg	34:19	34:22	7	buf
water	34:19	0:0	8	buf
arg	34:24	34:32	7	"ffmpeg"
water	34:24	0:0	8	"ffmpeg"
op	34:34	0:0	6	==
water	34:37	0:0	6	0
stmts	35:12	35:34	5	
water	35:12	0:0	6	ctx
op	35:15	0:0	6	->
water	35:17	0:0	6	lavc_build
op	35:28	0:0	6	=
water	35:30	0:0	6	4600
water	35:34	0:0	6	;
water	36:4	0:0	4	}
if	37:4	38:31	2	(e == 4)
cond	37:8	37:13	3	e == 4
water	37:8	0:0	4	e
op	37:10	0:0	4	==
water	37:13	0:0	4	4
stmts	38:8	38:31	3	
water	38:8	0:0	4	ctx
op	38:11	0:0	4	->
water	38:13	0:0	4	lavc_build
op	38:24	0:0	4	=
water	38:26	0:0	4	build
water	38:31	0:0	4	;
water	40:4	0:0	2	e
op	40:6	0:0	2	=
call	40:8	40:36	2	sscanf
arg	40:15	40:18	3	buf
water	40:15	0:0	4	buf
arg	40:20	40:28	3	"XviD%d"
water	40:20	0:0	4	"XviD%d"
arg	40:30	40:36	3	&build
op	40:30	0:0	4	&
water	40:31	0:0	4	build
water	40:37	0:0	2	;
if	41:4	42:31	2	(e == 1)
cond	41:8	41:13	3	e == 1
water	41:8	0:0	4	e
op	41:10	0:0	4	==
water	41:13	0:0	4	1
stmts	42:8	42:31	3	
water	42:8	0:0	4	ctx
op	42:11	0:0	4	->
water	42:13	0:0	4	xvid_build
op	42:24	0:0	4	=
water	42:26	0:0	4	build
water	42:31	0:0	4	;
return	43:4	43:12	2	0
water	43:11	0:0	3	0
