func	1:0	66:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:31	2	char *	argv[]
stmnts	0:0	65:12	1	
decl	3:4	3:35	2	AVFormatContext	*fmt_ctx
op	3:29	0:0	2	=
water	3:31	0:0	2	NULL
decl	4:4	4:32	2	AVIOContext	*avio_ctx
op	4:26	0:0	2	=
water	4:28	0:0	2	NULL
decl	5:4	5:51	2	uint8_t	*buffer
op	5:20	0:0	2	=
water	5:22	0:0	2	NULL
water	5:26	0:0	2	,
decl	5:4	5:51	2	uint8_t	*avio_ctx_buffer
op	5:45	0:0	2	=
water	5:47	0:0	2	NULL
decl	6:4	6:51	2	size_t	buffer_size
water	6:22	0:0	2	,
decl	6:4	6:51	2	size_t	avio_ctx_buffer_size
op	6:45	0:0	2	=
water	6:47	0:0	2	4096
decl	7:4	7:31	2	char	*input_filename
op	7:25	0:0	2	=
water	7:27	0:0	2	NULL
decl	8:4	8:15	2	int	ret
op	8:12	0:0	2	=
water	8:14	0:0	2	0
decl	9:4	9:33	2	struct buffer_data	bd
op	9:26	0:0	2	=
water	9:28	0:0	2	{
water	9:30	0:0	2	0
water	9:32	0:0	2	}
if	10:4	15:4	2	(argc != 2)
cond	10:8	10:16	3	argc != 2
water	10:8	0:0	4	argc
op	10:13	0:0	4	!=
water	10:16	0:0	4	2
stmts	10:19	15:4	3	
water	10:19	0:0	4	{
call	11:8	13:58	4	fprintf
arg	11:16	11:22	5	stderr
water	11:16	0:0	6	stderr
arg	11:24	13:49	5	"usage: %s input_file\n""API example program to show how to read from a custom buffer ""accessed through AVIOContext.\n"
water	11:24	0:0	6	"usage: %s input_file\n"
water	12:16	0:0	6	"API example program to show how to read from a custom buffer "
water	13:16	0:0	6	"accessed through AVIOContext.\n"
arg	13:51	13:58	5	argv[0]
water	13:51	0:0	6	argv
op	13:55	0:0	6	[
water	13:56	0:0	6	0
op	13:57	0:0	6	]
water	13:59	0:0	4	;
return	14:8	14:16	4	1
water	14:15	0:0	5	1
water	15:4	0:0	4	}
water	16:4	0:0	2	input_filename
op	16:19	0:0	2	=
water	16:21	0:0	2	argv
op	16:25	0:0	2	[
water	16:26	0:0	2	1
op	16:27	0:0	2	]
water	16:28	0:0	2	;
call	18:4	18:20	2	av_register_all
water	18:21	0:0	2	;
water	20:4	0:0	2	ret
op	20:8	0:0	2	=
call	20:10	20:68	2	av_file_map
arg	20:22	20:36	3	input_filename
water	20:22	0:0	4	input_filename
arg	20:38	20:45	3	&buffer
op	20:38	0:0	4	&
water	20:39	0:0	4	buffer
arg	20:47	20:59	3	&buffer_size
op	20:47	0:0	4	&
water	20:48	0:0	4	buffer_size
arg	20:61	20:62	3	0
water	20:61	0:0	4	0
arg	20:64	20:68	3	NULL
water	20:64	0:0	4	NULL
water	20:69	0:0	2	;
if	21:4	22:16	2	(ret < 0)
cond	21:8	21:14	3	ret < 0
water	21:8	0:0	4	ret
op	21:12	0:0	4	<
water	21:14	0:0	4	0
stmts	22:8	22:16	3	
goto	22:8	22:16	4	end
water	22:13	0:0	5	end
water	24:4	0:0	2	bd
op	24:6	0:0	2	.
water	24:7	0:0	2	ptr
op	24:12	0:0	2	=
water	24:14	0:0	2	buffer
water	24:20	0:0	2	;
water	25:4	0:0	2	bd
op	25:6	0:0	2	.
water	25:7	0:0	2	size
op	25:12	0:0	2	=
water	25:14	0:0	2	buffer_size
water	25:25	0:0	2	;
if	26:4	29:4	2	(! ( fmt_ctx =avformat_alloc_context ( ) ))
cond	26:8	26:44	3	! ( fmt_ctx =avformat_alloc_context ( ) )
op	26:8	0:0	4	!
water	26:9	0:0	4	(
water	26:10	0:0	4	fmt_ctx
op	26:18	0:0	4	=
call	26:20	26:43	4	avformat_alloc_context
water	26:44	0:0	4	)
stmts	26:47	29:4	3	
water	26:47	0:0	4	{
water	27:8	0:0	4	ret
op	27:12	0:0	4	=
call	27:14	27:28	4	AVERROR
arg	27:22	27:28	5	ENOMEM
water	27:22	0:0	6	ENOMEM
water	27:29	0:0	4	;
goto	28:8	28:16	4	end
water	28:13	0:0	5	end
water	29:4	0:0	4	}
water	30:4	0:0	2	avio_ctx_buffer
op	30:20	0:0	2	=
call	30:22	30:52	2	av_malloc
arg	30:32	30:52	3	avio_ctx_buffer_size
water	30:32	0:0	4	avio_ctx_buffer_size
water	30:53	0:0	2	;
if	31:4	34:4	2	(! avio_ctx_buffer)
cond	31:8	31:9	3	! avio_ctx_buffer
op	31:8	0:0	4	!
water	31:9	0:0	4	avio_ctx_buffer
stmts	31:26	34:4	3	
water	31:26	0:0	4	{
water	32:8	0:0	4	ret
op	32:12	0:0	4	=
call	32:14	32:28	4	AVERROR
arg	32:22	32:28	5	ENOMEM
water	32:22	0:0	6	ENOMEM
water	32:29	0:0	4	;
goto	33:8	33:16	4	end
water	33:13	0:0	5	end
water	34:4	0:0	4	}
water	35:4	0:0	2	avio_ctx
op	35:13	0:0	2	=
call	35:15	36:66	2	avio_alloc_context
arg	35:34	35:49	3	avio_ctx_buffer
water	35:34	0:0	4	avio_ctx_buffer
arg	35:51	35:71	3	avio_ctx_buffer_size
water	35:51	0:0	4	avio_ctx_buffer_size
arg	36:34	36:35	3	0
water	36:34	0:0	4	0
arg	36:37	36:40	3	&bd
op	36:37	0:0	4	&
water	36:38	0:0	4	bd
arg	36:42	36:54	3	&read_packet
op	36:42	0:0	4	&
water	36:43	0:0	4	read_packet
arg	36:56	36:60	3	NULL
water	36:56	0:0	4	NULL
arg	36:62	36:66	3	NULL
water	36:62	0:0	4	NULL
water	36:67	0:0	2	;
if	37:4	40:4	2	(! avio_ctx)
cond	37:8	37:9	3	! avio_ctx
op	37:8	0:0	4	!
water	37:9	0:0	4	avio_ctx
stmts	37:19	40:4	3	
water	37:19	0:0	4	{
water	38:8	0:0	4	ret
op	38:12	0:0	4	=
call	38:14	38:28	4	AVERROR
arg	38:22	38:28	5	ENOMEM
water	38:22	0:0	6	ENOMEM
water	38:29	0:0	4	;
goto	39:8	39:16	4	end
water	39:13	0:0	5	end
water	40:4	0:0	4	}
water	41:4	0:0	2	fmt_ctx
op	41:11	0:0	2	->
water	41:13	0:0	2	pb
op	41:16	0:0	2	=
water	41:18	0:0	2	avio_ctx
water	41:26	0:0	2	;
water	42:4	0:0	2	ret
op	42:8	0:0	2	=
call	42:10	42:56	2	avformat_open_input
arg	42:30	42:38	3	&fmt_ctx
op	42:30	0:0	4	&
water	42:31	0:0	4	fmt_ctx
arg	42:40	42:44	3	NULL
water	42:40	0:0	4	NULL
arg	42:46	42:50	3	NULL
water	42:46	0:0	4	NULL
arg	42:52	42:56	3	NULL
water	42:52	0:0	4	NULL
water	42:57	0:0	2	;
if	43:4	46:4	2	(ret < 0)
cond	43:8	43:14	3	ret < 0
water	43:8	0:0	4	ret
op	43:12	0:0	4	<
water	43:14	0:0	4	0
stmts	43:17	46:4	3	
water	43:17	0:0	4	{
call	44:8	44:48	4	fprintf
arg	44:16	44:22	5	stderr
water	44:16	0:0	6	stderr
arg	44:24	44:48	5	"Could not open input\n"
water	44:24	0:0	6	"Could not open input\n"
water	44:49	0:0	4	;
goto	45:8	45:16	4	end
water	45:13	0:0	5	end
water	46:4	0:0	4	}
water	47:4	0:0	2	ret
op	47:8	0:0	2	=
call	47:10	47:49	2	avformat_find_stream_info
arg	47:36	47:43	3	fmt_ctx
water	47:36	0:0	4	fmt_ctx
arg	47:45	47:49	3	NULL
water	47:45	0:0	4	NULL
water	47:50	0:0	2	;
if	48:4	51:4	2	(ret < 0)
cond	48:8	48:14	3	ret < 0
water	48:8	0:0	4	ret
op	48:12	0:0	4	<
water	48:14	0:0	4	0
stmts	48:17	51:4	3	
water	48:17	0:0	4	{
call	49:8	49:61	4	fprintf
arg	49:16	49:22	5	stderr
water	49:16	0:0	6	stderr
arg	49:24	49:61	5	"Could not find stream information\n"
water	49:24	0:0	6	"Could not find stream information\n"
water	49:62	0:0	4	;
goto	50:8	50:16	4	end
water	50:13	0:0	5	end
water	51:4	0:0	4	}
call	52:4	52:48	2	av_dump_format
arg	52:19	52:26	3	fmt_ctx
water	52:19	0:0	4	fmt_ctx
arg	52:28	52:29	3	0
water	52:28	0:0	4	0
arg	52:31	52:45	3	input_filename
water	52:31	0:0	4	input_filename
arg	52:47	52:48	3	0
water	52:47	0:0	4	0
water	52:49	0:0	2	;
label	53:0	53:3	2	end :
call	54:4	54:33	2	avformat_close_input
arg	54:25	54:33	3	&fmt_ctx
op	54:25	0:0	4	&
water	54:26	0:0	4	fmt_ctx
water	54:34	0:0	2	;
if	56:4	59:4	2	(avio_ctx)
cond	56:8	56:8	3	avio_ctx
water	56:8	0:0	4	avio_ctx
stmts	56:18	59:4	3	
water	56:18	0:0	4	{
call	57:8	57:34	4	av_freep
arg	57:17	57:34	5	&avio_ctx->buffer
op	57:17	0:0	6	&
water	57:18	0:0	6	avio_ctx
op	57:26	0:0	6	->
water	57:28	0:0	6	buffer
water	57:35	0:0	4	;
call	58:8	58:26	4	av_freep
arg	58:17	58:26	5	&avio_ctx
op	58:17	0:0	6	&
water	58:18	0:0	6	avio_ctx
water	58:27	0:0	4	;
water	59:4	0:0	4	}
call	60:4	60:37	2	av_file_unmap
arg	60:18	60:24	3	buffer
water	60:18	0:0	4	buffer
arg	60:26	60:37	3	buffer_size
water	60:26	0:0	4	buffer_size
water	60:38	0:0	2	;
if	61:4	64:4	2	(ret < 0)
cond	61:8	61:14	3	ret < 0
water	61:8	0:0	4	ret
op	61:12	0:0	4	<
water	61:14	0:0	4	0
stmts	61:17	64:4	3	
water	61:17	0:0	4	{
call	62:8	62:63	4	fprintf
arg	62:16	62:22	5	stderr
water	62:16	0:0	6	stderr
arg	62:24	62:46	5	"Error occurred: %s\n"
water	62:24	0:0	6	"Error occurred: %s\n"
arg	62:48	62:63	5	av_err2str(ret)
call	62:48	62:62	6	av_err2str
arg	62:59	62:62	7	ret
water	62:59	0:0	8	ret
water	62:64	0:0	4	;
return	63:8	63:16	4	1
water	63:15	0:0	5	1
water	64:4	0:0	4	}
return	65:4	65:12	2	0
water	65:11	0:0	3	0
