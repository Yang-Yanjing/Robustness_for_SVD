func	1:0	47:0	0	static void	show_help_filter
params	1:28	0:0	1	
param	1:29	1:45	2	const char *	name
stmnts	0:0	45:42	1	
decl	4:4	4:50	2	const AVFilter	*f
op	4:22	0:0	2	=
call	4:24	4:49	3	avfilter_get_by_name
arg	4:45	4:49	4	name
water	4:45	0:0	5	name
decl	5:4	5:16	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:16	2	int	count
if	6:4	9:4	2	(! name)
cond	6:8	6:9	3	! name
op	6:8	0:0	4	!
water	6:9	0:0	4	name
stmts	6:15	9:4	3	
water	6:15	0:0	4	{
call	7:8	7:64	4	av_log
arg	7:15	7:19	5	NULL
water	7:15	0:0	6	NULL
arg	7:21	7:33	5	AV_LOG_ERROR
water	7:21	0:0	6	AV_LOG_ERROR
arg	7:35	7:64	5	"No filter name specified.\n"
water	7:35	0:0	6	"No filter name specified.\n"
water	7:65	0:0	4	;
return	8:8	8:14	4	
water	9:4	0:0	4	}
else	9:6	12:4	2
stmts	9:11	12:4	3	
if	9:11	12:4	4	(! f)
cond	9:15	9:16	5	! f
op	9:15	0:0	6	!
water	9:16	0:0	6	f
stmts	9:19	12:4	5	
water	9:19	0:0	6	{
call	10:8	10:65	6	av_log
arg	10:15	10:19	7	NULL
water	10:15	0:0	8	NULL
arg	10:21	10:33	7	AV_LOG_ERROR
water	10:21	0:0	8	AV_LOG_ERROR
arg	10:35	10:59	7	"Unknown filter '%s'.\n"
water	10:35	0:0	8	"Unknown filter '%s'.\n"
arg	10:61	10:65	7	name
water	10:61	0:0	8	name
water	10:66	0:0	6	;
return	11:8	11:14	6	
water	12:4	0:0	6	}
call	13:4	13:33	2	printf
arg	13:11	13:24	3	"Filter %s\n"
water	13:11	0:0	4	"Filter %s\n"
arg	13:26	13:33	3	f->name
water	13:26	0:0	4	f
op	13:27	0:0	4	->
water	13:29	0:0	4	name
water	13:34	0:0	2	;
if	14:4	15:40	2	(f -> description)
cond	14:8	14:11	3	f -> description
water	14:8	0:0	4	f
op	14:9	0:0	4	->
water	14:11	0:0	4	description
stmts	15:8	15:40	3	
call	15:8	15:39	4	printf
arg	15:15	15:23	5	"  %s\n"
water	15:15	0:0	6	"  %s\n"
arg	15:25	15:39	5	f->description
water	15:25	0:0	6	f
op	15:26	0:0	6	->
water	15:28	0:0	6	description
water	15:40	0:0	4	;
if	16:4	17:49	2	(f -> flags & AVFILTER_FLAG_SLICE_THREADS)
cond	16:8	16:19	3	f -> flags & AVFILTER_FLAG_SLICE_THREADS
water	16:8	0:0	4	f
op	16:9	0:0	4	->
water	16:11	0:0	4	flags
op	16:17	0:0	4	&
water	16:19	0:0	4	AVFILTER_FLAG_SLICE_THREADS
stmts	17:8	17:49	3	
call	17:8	17:48	4	printf
arg	17:15	17:48	5	"    slice threading supported\n"
water	17:15	0:0	6	"    slice threading supported\n"
water	17:49	0:0	4	;
call	18:4	18:26	2	printf
arg	18:11	18:26	3	"    Inputs:\n"
water	18:11	0:0	4	"    Inputs:\n"
water	18:27	0:0	2	;
water	19:4	0:0	2	count
op	19:10	0:0	2	=
call	19:12	19:40	2	avfilter_pad_count
arg	19:31	19:40	3	f->inputs
water	19:31	0:0	4	f
op	19:32	0:0	4	->
water	19:34	0:0	4	inputs
water	19:41	0:0	2	;
for	20:4	23:4	2	(i = 0 ;i < count;i ++)
forinit	20:9	20:14	3	i = 0 ;
water	20:9	0:0	4	i
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:20	3	i < count
water	20:16	0:0	4	i
op	20:18	0:0	4	<
water	20:20	0:0	4	count
forexpr	20:27	20:28	3	i ++
water	20:27	0:0	4	i
op	20:28	0:0	4	++
stmts	20:32	23:4	3	
water	20:32	0:0	4	{
call	21:8	22:69	4	printf
arg	21:15	21:38	5	"       #%d: %s (%s)\n"
water	21:15	0:0	6	"       #%d: %s (%s)\n"
arg	21:40	21:41	5	i
water	21:40	0:0	6	i
arg	21:43	21:78	5	avfilter_pad_get_name(f->inputs,i)
call	21:43	21:77	6	avfilter_pad_get_name
arg	21:65	21:74	7	f->inputs
water	21:65	0:0	8	f
op	21:66	0:0	8	->
water	21:68	0:0	8	inputs
arg	21:76	21:77	7	i
water	21:76	0:0	8	i
arg	22:15	22:69	5	media_type_string(avfilter_pad_get_type(f->inputs,i))
call	22:15	22:68	6	media_type_string
arg	22:33	22:68	7	avfilter_pad_get_type(f->inputs,i)
call	22:33	22:67	8	avfilter_pad_get_type
arg	22:55	22:64	9	f->inputs
water	22:55	0:0	10	f
op	22:56	0:0	10	->
water	22:58	0:0	10	inputs
arg	22:66	22:67	9	i
water	22:66	0:0	10	i
water	22:70	0:0	4	;
water	23:4	0:0	4	}
if	24:4	25:62	2	(f -> flags & AVFILTER_FLAG_DYNAMIC_INPUTS)
cond	24:8	24:19	3	f -> flags & AVFILTER_FLAG_DYNAMIC_INPUTS
water	24:8	0:0	4	f
op	24:9	0:0	4	->
water	24:11	0:0	4	flags
op	24:17	0:0	4	&
water	24:19	0:0	4	AVFILTER_FLAG_DYNAMIC_INPUTS
stmts	25:8	25:62	3	
call	25:8	25:61	4	printf
arg	25:15	25:61	5	"        dynamic (depending on the options)\n"
water	25:15	0:0	6	"        dynamic (depending on the options)\n"
water	25:62	0:0	4	;
else	26:4	27:48	2
stmts	26:9	27:48	3	
if	26:9	27:48	4	(! count)
cond	26:13	26:14	5	! count
op	26:13	0:0	6	!
water	26:14	0:0	6	count
stmts	27:8	27:48	5	
call	27:8	27:47	6	printf
arg	27:15	27:47	7	"        none (source filter)\n"
water	27:15	0:0	8	"        none (source filter)\n"
water	27:48	0:0	6	;
call	28:4	28:27	2	printf
arg	28:11	28:27	3	"    Outputs:\n"
water	28:11	0:0	4	"    Outputs:\n"
water	28:28	0:0	2	;
water	29:4	0:0	2	count
op	29:10	0:0	2	=
call	29:12	29:41	2	avfilter_pad_count
arg	29:31	29:41	3	f->outputs
water	29:31	0:0	4	f
op	29:32	0:0	4	->
water	29:34	0:0	4	outputs
water	29:42	0:0	2	;
for	30:4	33:4	2	(i = 0 ;i < count;i ++)
forinit	30:9	30:14	3	i = 0 ;
water	30:9	0:0	4	i
op	30:11	0:0	4	=
water	30:13	0:0	4	0
water	30:14	0:0	4	;
cond	30:16	30:20	3	i < count
water	30:16	0:0	4	i
op	30:18	0:0	4	<
water	30:20	0:0	4	count
forexpr	30:27	30:28	3	i ++
water	30:27	0:0	4	i
op	30:28	0:0	4	++
stmts	30:32	33:4	3	
water	30:32	0:0	4	{
call	31:8	32:70	4	printf
arg	31:15	31:38	5	"       #%d: %s (%s)\n"
water	31:15	0:0	6	"       #%d: %s (%s)\n"
arg	31:40	31:41	5	i
water	31:40	0:0	6	i
arg	31:43	31:79	5	avfilter_pad_get_name(f->outputs,i)
call	31:43	31:78	6	avfilter_pad_get_name
arg	31:65	31:75	7	f->outputs
water	31:65	0:0	8	f
op	31:66	0:0	8	->
water	31:68	0:0	8	outputs
arg	31:77	31:78	7	i
water	31:77	0:0	8	i
arg	32:15	32:70	5	media_type_string(avfilter_pad_get_type(f->outputs,i))
call	32:15	32:69	6	media_type_string
arg	32:33	32:69	7	avfilter_pad_get_type(f->outputs,i)
call	32:33	32:68	8	avfilter_pad_get_type
arg	32:55	32:65	9	f->outputs
water	32:55	0:0	10	f
op	32:56	0:0	10	->
water	32:58	0:0	10	outputs
arg	32:67	32:68	9	i
water	32:67	0:0	10	i
water	32:71	0:0	4	;
water	33:4	0:0	4	}
if	34:4	35:62	2	(f -> flags & AVFILTER_FLAG_DYNAMIC_OUTPUTS)
cond	34:8	34:19	3	f -> flags & AVFILTER_FLAG_DYNAMIC_OUTPUTS
water	34:8	0:0	4	f
op	34:9	0:0	4	->
water	34:11	0:0	4	flags
op	34:17	0:0	4	&
water	34:19	0:0	4	AVFILTER_FLAG_DYNAMIC_OUTPUTS
stmts	35:8	35:62	3	
call	35:8	35:61	4	printf
arg	35:15	35:61	5	"        dynamic (depending on the options)\n"
water	35:15	0:0	6	"        dynamic (depending on the options)\n"
water	35:62	0:0	4	;
else	36:4	37:46	2
stmts	36:9	37:46	3	
if	36:9	37:46	4	(! count)
cond	36:13	36:14	5	! count
op	36:13	0:0	6	!
water	36:14	0:0	6	count
stmts	37:8	37:46	5	
call	37:8	37:45	6	printf
arg	37:15	37:45	7	"        none (sink filter)\n"
water	37:15	0:0	8	"        none (sink filter)\n"
water	37:46	0:0	6	;
if	38:4	40:66	2	(f -> priv_class)
cond	38:8	38:11	3	f -> priv_class
water	38:8	0:0	4	f
op	38:9	0:0	4	->
water	38:11	0:0	4	priv_class
stmts	39:8	40:66	3	
call	39:8	40:65	4	show_help_children
arg	39:27	39:40	5	f->priv_class
water	39:27	0:0	6	f
op	39:28	0:0	6	->
water	39:30	0:0	6	priv_class
arg	39:42	40:65	5	AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_AUDIO_PARAM
water	39:42	0:0	6	AV_OPT_FLAG_VIDEO_PARAM
op	39:66	0:0	6	|
water	39:68	0:0	6	AV_OPT_FLAG_FILTERING_PARAM
op	39:96	0:0	6	|
water	40:42	0:0	6	AV_OPT_FLAG_AUDIO_PARAM
water	40:66	0:0	4	;
if	41:4	42:85	2	(f -> flags & AVFILTER_FLAG_SUPPORT_TIMELINE)
cond	41:8	41:19	3	f -> flags & AVFILTER_FLAG_SUPPORT_TIMELINE
water	41:8	0:0	4	f
op	41:9	0:0	4	->
water	41:11	0:0	4	flags
op	41:17	0:0	4	&
water	41:19	0:0	4	AVFILTER_FLAG_SUPPORT_TIMELINE
stmts	42:8	42:85	3	
call	42:8	42:84	4	printf
arg	42:15	42:84	5	"This filter has support for timeline through the 'enable' option.\n"
water	42:15	0:0	6	"This filter has support for timeline through the 'enable' option.\n"
water	42:85	0:0	4	;
call	44:4	45:41	2	av_log
arg	44:11	44:15	3	NULL
water	44:11	0:0	4	NULL
arg	44:17	44:29	3	AV_LOG_ERROR
water	44:17	0:0	4	AV_LOG_ERROR
arg	44:31	45:41	3	"Build without libavfilter; ""can not to satisfy request\n"
water	44:31	0:0	4	"Build without libavfilter; "
water	45:11	0:0	4	"can not to satisfy request\n"
water	45:42	0:0	2	;
