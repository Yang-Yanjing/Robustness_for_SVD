func	1:0	43:0	0	static int	init_input_stream
params	1:28	0:0	1	
param	1:29	1:42	2	int	ist_index
param	1:44	1:55	2	char *	error
param	1:57	1:70	2	int	error_len
stmnts	0:0	42:12	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:47	2	InputStream	*ist
op	4:21	0:0	2	=
water	4:23	0:0	2	input_streams
op	4:36	0:0	2	[
water	4:37	0:0	2	ist_index
op	4:46	0:0	2	]
if	5:4	39:4	2	(ist -> decoding_needed)
cond	5:8	5:13	3	ist -> decoding_needed
water	5:8	0:0	4	ist
op	5:11	0:0	4	->
water	5:13	0:0	4	decoding_needed
stmts	5:30	39:4	3	
water	5:30	0:0	4	{
decl	6:8	6:33	4	AVCodec	*codec
op	6:23	0:0	4	=
water	6:25	0:0	4	ist
op	6:28	0:0	4	->
water	6:30	0:0	4	dec
if	7:8	11:8	4	(! codec)
cond	7:12	7:13	5	! codec
op	7:12	0:0	6	!
water	7:13	0:0	6	codec
stmts	7:20	11:8	5	
water	7:20	0:0	6	{
call	8:12	9:93	6	snprintf
arg	8:21	8:26	7	error
water	8:21	0:0	8	error
arg	8:28	8:37	7	error_len
water	8:28	0:0	8	error_len
arg	8:39	8:93	7	"Decoder (codec %s) not found for input stream #%d:%d"
water	8:39	0:0	8	"Decoder (codec %s) not found for input stream #%d:%d"
arg	9:20	9:60	7	avcodec_get_name(ist->dec_ctx->codec_id)
call	9:20	9:59	8	avcodec_get_name
arg	9:37	9:59	9	ist->dec_ctx->codec_id
water	9:37	0:0	10	ist
op	9:40	0:0	10	->
water	9:42	0:0	10	dec_ctx
op	9:49	0:0	10	->
water	9:51	0:0	10	codec_id
arg	9:62	9:77	7	ist->file_index
water	9:62	0:0	8	ist
op	9:65	0:0	8	->
water	9:67	0:0	8	file_index
arg	9:79	9:93	7	ist->st->index
water	9:79	0:0	8	ist
op	9:82	0:0	8	->
water	9:84	0:0	8	st
op	9:86	0:0	8	->
water	9:88	0:0	8	index
water	9:94	0:0	6	;
return	10:12	10:34	6	AVERROR(EINVAL)
call	10:19	10:33	7	AVERROR
arg	10:27	10:33	8	EINVAL
water	10:27	0:0	9	EINVAL
water	11:8	0:0	6	}
water	12:8	0:0	4	ist
op	12:11	0:0	4	->
water	12:13	0:0	4	dec_ctx
op	12:20	0:0	4	->
water	12:22	0:0	4	opaque
op	12:44	0:0	4	=
water	12:46	0:0	4	ist
water	12:49	0:0	4	;
water	13:8	0:0	4	ist
op	13:11	0:0	4	->
water	13:13	0:0	4	dec_ctx
op	13:20	0:0	4	->
water	13:22	0:0	4	get_format
op	13:44	0:0	4	=
water	13:46	0:0	4	get_format
water	13:56	0:0	4	;
water	14:8	0:0	4	ist
op	14:11	0:0	4	->
water	14:13	0:0	4	dec_ctx
op	14:20	0:0	4	->
water	14:22	0:0	4	get_buffer2
op	14:44	0:0	4	=
water	14:46	0:0	4	get_buffer
water	14:56	0:0	4	;
water	15:8	0:0	4	ist
op	15:11	0:0	4	->
water	15:13	0:0	4	dec_ctx
op	15:20	0:0	4	->
water	15:22	0:0	4	thread_safe_callbacks
op	15:44	0:0	4	=
water	15:46	0:0	4	1
water	15:47	0:0	4	;
call	16:8	16:62	4	av_opt_set_int
arg	16:23	16:35	5	ist->dec_ctx
water	16:23	0:0	6	ist
op	16:26	0:0	6	->
water	16:28	0:0	6	dec_ctx
arg	16:37	16:56	5	"refcounted_frames"
water	16:37	0:0	6	"refcounted_frames"
arg	16:58	16:59	5	1
water	16:58	0:0	6	1
arg	16:61	16:62	5	0
water	16:61	0:0	6	0
water	16:63	0:0	4	;
if	17:8	22:8	4	(ist -> dec_ctx -> codec_id == AV_CODEC_ID_DVB_SUBTITLE && ( ist -> decoding_needed & DECODING_FOR_OST ))
cond	17:12	18:51	5	ist -> dec_ctx -> codec_id == AV_CODEC_ID_DVB_SUBTITLE && ( ist -> decoding_needed & DECODING_FOR_OST )
water	17:12	0:0	6	ist
op	17:15	0:0	6	->
water	17:17	0:0	6	dec_ctx
op	17:24	0:0	6	->
water	17:26	0:0	6	codec_id
op	17:35	0:0	6	==
water	17:38	0:0	6	AV_CODEC_ID_DVB_SUBTITLE
op	17:63	0:0	6	&&
water	18:11	0:0	6	(
water	18:12	0:0	6	ist
op	18:15	0:0	6	->
water	18:17	0:0	6	decoding_needed
op	18:33	0:0	6	&
water	18:35	0:0	6	DECODING_FOR_OST
water	18:51	0:0	6	)
stmts	18:54	22:8	5	
water	18:54	0:0	6	{
call	19:12	19:86	6	av_dict_set
arg	19:24	19:42	7	&ist->decoder_opts
op	19:24	0:0	8	&
water	19:25	0:0	8	ist
op	19:28	0:0	8	->
water	19:30	0:0	8	decoder_opts
arg	19:44	19:57	7	"compute_edt"
water	19:44	0:0	8	"compute_edt"
arg	19:59	19:62	7	"1"
water	19:59	0:0	8	"1"
arg	19:64	19:86	7	AV_DICT_DONT_OVERWRITE
water	19:64	0:0	8	AV_DICT_DONT_OVERWRITE
water	19:87	0:0	6	;
if	20:12	21:171	6	(ist -> decoding_needed & DECODING_FOR_FILTER)
cond	20:16	20:39	7	ist -> decoding_needed & DECODING_FOR_FILTER
water	20:16	0:0	8	ist
op	20:19	0:0	8	->
water	20:21	0:0	8	decoding_needed
op	20:37	0:0	8	&
water	20:39	0:0	8	DECODING_FOR_FILTER
stmts	21:16	21:171	7	
call	21:16	21:170	8	av_log
arg	21:23	21:27	9	NULL
water	21:23	0:0	10	NULL
arg	21:29	21:43	9	AV_LOG_WARNING
water	21:29	0:0	10	AV_LOG_WARNING
arg	21:45	21:170	9	"Warning using DVB subtitles for filtering and output at the same time is not fully supported, also see -compute_edt [0|1]\n"
water	21:45	0:0	10	"Warning using DVB subtitles for filtering and output at the same time is not fully supported, also see -compute_edt [0|1]\n"
water	21:171	0:0	8	;
water	22:8	0:0	6	}
call	23:8	23:88	4	av_dict_set
arg	23:20	23:38	5	&ist->decoder_opts
op	23:20	0:0	6	&
water	23:21	0:0	6	ist
op	23:24	0:0	6	->
water	23:26	0:0	6	decoder_opts
arg	23:40	23:57	5	"sub_text_format"
water	23:40	0:0	6	"sub_text_format"
arg	23:59	23:64	5	"ass"
water	23:59	0:0	6	"ass"
arg	23:66	23:88	5	AV_DICT_DONT_OVERWRITE
water	23:66	0:0	6	AV_DICT_DONT_OVERWRITE
water	23:89	0:0	4	;
call	26:8	26:66	4	av_codec_set_pkt_timebase
arg	26:34	26:46	5	ist->dec_ctx
water	26:34	0:0	6	ist
op	26:37	0:0	6	->
water	26:39	0:0	6	dec_ctx
arg	26:48	26:66	5	ist->st->time_base
water	26:48	0:0	6	ist
op	26:51	0:0	6	->
water	26:53	0:0	6	st
op	26:55	0:0	6	->
water	26:57	0:0	6	time_base
water	26:67	0:0	4	;
if	27:8	28:65	4	(!av_dict_get (ist -> decoder_opts ,"threads" ,NULL ,0 ))
cond	27:12	27:62	5	!av_dict_get (ist -> decoder_opts ,"threads" ,NULL ,0 )
op	27:12	0:0	6	!
call	27:13	27:62	6	av_dict_get
arg	27:25	27:42	7	ist->decoder_opts
water	27:25	0:0	8	ist
op	27:28	0:0	8	->
water	27:30	0:0	8	decoder_opts
arg	27:44	27:53	7	"threads"
water	27:44	0:0	8	"threads"
arg	27:55	27:59	7	NULL
water	27:55	0:0	8	NULL
arg	27:61	27:62	7	0
water	27:61	0:0	8	0
stmts	28:12	28:65	5	
call	28:12	28:64	6	av_dict_set
arg	28:24	28:42	7	&ist->decoder_opts
op	28:24	0:0	8	&
water	28:25	0:0	8	ist
op	28:28	0:0	8	->
water	28:30	0:0	8	decoder_opts
arg	28:44	28:53	7	"threads"
water	28:44	0:0	8	"threads"
arg	28:55	28:61	7	"auto"
water	28:55	0:0	8	"auto"
arg	28:63	28:64	7	0
water	28:63	0:0	8	0
water	28:65	0:0	6	;
if	29:8	37:8	4	(( ret =avcodec_open2 (ist -> dec_ctx ,codec ,& ist -> decoder_opts ) ) < 0)
cond	29:12	29:77	5	( ret =avcodec_open2 (ist -> dec_ctx ,codec ,& ist -> decoder_opts ) ) < 0
water	29:12	0:0	6	(
water	29:13	0:0	6	ret
op	29:17	0:0	6	=
call	29:19	29:72	6	avcodec_open2
arg	29:33	29:45	7	ist->dec_ctx
water	29:33	0:0	8	ist
op	29:36	0:0	8	->
water	29:38	0:0	8	dec_ctx
arg	29:47	29:52	7	codec
water	29:47	0:0	8	codec
arg	29:54	29:72	7	&ist->decoder_opts
op	29:54	0:0	8	&
water	29:55	0:0	8	ist
op	29:58	0:0	8	->
water	29:60	0:0	8	decoder_opts
water	29:73	0:0	6	)
op	29:75	0:0	6	<
water	29:77	0:0	6	0
stmts	29:80	37:8	5	
water	29:80	0:0	6	{
if	30:12	31:50	6	(ret == AVERROR_EXPERIMENTAL)
cond	30:16	30:23	7	ret == AVERROR_EXPERIMENTAL
water	30:16	0:0	8	ret
op	30:20	0:0	8	==
water	30:23	0:0	8	AVERROR_EXPERIMENTAL
stmts	31:16	31:50	7	
call	31:16	31:49	8	abort_codec_experimental
arg	31:41	31:46	9	codec
water	31:41	0:0	10	codec
arg	31:48	31:49	9	0
water	31:48	0:0	10	0
water	31:50	0:0	8	;
call	32:12	35:69	6	snprintf
arg	32:21	32:26	7	error
water	32:21	0:0	8	error
arg	32:28	32:37	7	error_len
water	32:28	0:0	8	error_len
arg	33:21	34:34	7	"Error while opening decoder for input stream ""#%d:%d : %s"
water	33:21	0:0	8	"Error while opening decoder for input stream "
water	34:21	0:0	8	"#%d:%d : %s"
arg	35:21	35:36	7	ist->file_index
water	35:21	0:0	8	ist
op	35:24	0:0	8	->
water	35:26	0:0	8	file_index
arg	35:38	35:52	7	ist->st->index
water	35:38	0:0	8	ist
op	35:41	0:0	8	->
water	35:43	0:0	8	st
op	35:45	0:0	8	->
water	35:47	0:0	8	index
arg	35:54	35:69	7	av_err2str(ret)
call	35:54	35:68	8	av_err2str
arg	35:65	35:68	9	ret
water	35:65	0:0	10	ret
water	35:70	0:0	6	;
return	36:12	36:22	6	ret
water	36:19	0:0	7	ret
water	37:8	0:0	6	}
call	38:8	38:42	4	assert_avoptions
arg	38:25	38:42	5	ist->decoder_opts
water	38:25	0:0	6	ist
op	38:28	0:0	6	->
water	38:30	0:0	6	decoder_opts
water	38:43	0:0	4	;
water	39:4	0:0	4	}
water	40:4	0:0	2	ist
op	40:7	0:0	2	->
water	40:9	0:0	2	next_pts
op	40:18	0:0	2	=
water	40:20	0:0	2	AV_NOPTS_VALUE
water	40:34	0:0	2	;
water	41:4	0:0	2	ist
op	41:7	0:0	2	->
water	41:9	0:0	2	next_dts
op	41:18	0:0	2	=
water	41:20	0:0	2	AV_NOPTS_VALUE
water	41:34	0:0	2	;
return	42:4	42:12	2	0
water	42:11	0:0	3	0
