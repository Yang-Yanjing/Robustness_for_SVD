func	1:0	217:0	0	static int	http_prepare_data
params	1:28	0:0	1	
param	1:29	1:43	2	HTTPContext *	c
stmnts	0:0	216:12	1	
decl	3:4	3:19	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:19	2	int	len
water	3:14	0:0	2	,
decl	3:4	3:19	2	int	ret
decl	4:4	4:24	2	AVFormatContext	*ctx
call	5:4	5:26	2	av_freep
arg	5:13	5:26	3	&c->pb_buffer
op	5:13	0:0	4	&
water	5:14	0:0	4	c
op	5:15	0:0	4	->
water	5:17	0:0	4	pb_buffer
water	5:27	0:0	2	;
switch	6:4	215:4	2	(c -> state)
cond	6:11	6:14	3	c -> state
water	6:11	0:0	4	c
op	6:12	0:0	4	->
water	6:14	0:0	4	state
stmts	6:21	215:4	3	
water	6:21	0:0	4	{
label	7:4	7:35	4	case HTTPSTATE_SEND_DATA_HEADER :
water	8:8	0:0	4	ctx
op	8:12	0:0	4	=
call	8:14	8:37	4	avformat_alloc_context
water	8:38	0:0	4	;
if	9:8	10:34	4	(! ctx)
cond	9:12	9:13	5	! ctx
op	9:12	0:0	6	!
water	9:13	0:0	6	ctx
stmts	10:12	10:34	5	
return	10:12	10:34	6	AVERROR(ENOMEM)
call	10:19	10:33	7	AVERROR
arg	10:27	10:33	8	ENOMEM
water	10:27	0:0	9	ENOMEM
water	11:8	0:0	4	c
op	11:9	0:0	4	->
water	11:11	0:0	4	pfmt_ctx
op	11:20	0:0	4	=
water	11:22	0:0	4	ctx
water	11:25	0:0	4	;
call	12:8	12:69	4	av_dict_copy
arg	12:21	12:45	5	&(c->pfmt_ctx->metadata)
op	12:21	0:0	6	&
water	12:22	0:0	6	(
water	12:23	0:0	6	c
op	12:24	0:0	6	->
water	12:26	0:0	6	pfmt_ctx
op	12:34	0:0	6	->
water	12:36	0:0	6	metadata
water	12:44	0:0	6	)
arg	12:47	12:66	5	c->stream->metadata
water	12:47	0:0	6	c
op	12:48	0:0	6	->
water	12:50	0:0	6	stream
op	12:56	0:0	6	->
water	12:58	0:0	6	metadata
arg	12:68	12:69	5	0
water	12:68	0:0	6	0
water	12:70	0:0	4	;
for	13:8	29:8	4	(i = 0 ;i < c -> stream -> nb_streams;i ++)
forinit	13:12	13:15	5	i = 0 ;
water	13:12	0:0	6	i
op	13:13	0:0	6	=
water	13:14	0:0	6	0
water	13:15	0:0	6	;
cond	13:16	13:29	5	i < c -> stream -> nb_streams
water	13:16	0:0	6	i
op	13:17	0:0	6	<
water	13:18	0:0	6	c
op	13:19	0:0	6	->
water	13:21	0:0	6	stream
op	13:27	0:0	6	->
water	13:29	0:0	6	nb_streams
forexpr	13:40	13:41	5	i ++
water	13:40	0:0	6	i
op	13:41	0:0	6	++
stmts	13:45	29:8	5	
water	13:45	0:0	6	{
decl	14:12	14:32	6	LayeredAVStream	*src
decl	15:12	15:65	6	AVStream	*st
op	15:25	0:0	6	=
call	15:27	15:64	7	avformat_new_stream
arg	15:47	15:58	8	c->pfmt_ctx
water	15:47	0:0	9	c
op	15:48	0:0	9	->
water	15:50	0:0	9	pfmt_ctx
arg	15:60	15:64	8	NULL
water	15:60	0:0	9	NULL
if	16:12	17:38	6	(! st)
cond	16:16	16:17	7	! st
op	16:16	0:0	8	!
water	16:17	0:0	8	st
stmts	17:16	17:38	7	
return	17:16	17:38	8	AVERROR(ENOMEM)
call	17:23	17:37	9	AVERROR
arg	17:31	17:37	10	ENOMEM
water	17:31	0:0	11	ENOMEM
if	20:12	22:43	6	(! c -> stream -> feed || c -> stream -> feed == c -> stream)
cond	20:16	21:38	7	! c -> stream -> feed || c -> stream -> feed == c -> stream
op	20:16	0:0	8	!
water	20:17	0:0	8	c
op	20:18	0:0	8	->
water	20:20	0:0	8	stream
op	20:26	0:0	8	->
water	20:28	0:0	8	feed
op	20:33	0:0	8	||
water	21:16	0:0	8	c
op	21:17	0:0	8	->
water	21:19	0:0	8	stream
op	21:25	0:0	8	->
water	21:27	0:0	8	feed
op	21:32	0:0	8	==
water	21:35	0:0	8	c
op	21:36	0:0	8	->
water	21:38	0:0	8	stream
stmts	22:16	22:43	7	
water	22:16	0:0	8	src
op	22:20	0:0	8	=
water	22:22	0:0	8	c
op	22:23	0:0	8	->
water	22:25	0:0	8	stream
op	22:31	0:0	8	->
water	22:33	0:0	8	streams
op	22:40	0:0	8	[
water	22:41	0:0	8	i
op	22:42	0:0	8	]
water	22:43	0:0	8	;
else	23:12	24:74	6
stmts	24:16	24:74	7	
water	24:16	0:0	8	src
op	24:20	0:0	8	=
water	24:22	0:0	8	c
op	24:23	0:0	8	->
water	24:25	0:0	8	stream
op	24:31	0:0	8	->
water	24:33	0:0	8	feed
op	24:37	0:0	8	->
water	24:39	0:0	8	streams
op	24:46	0:0	8	[
water	24:47	0:0	8	c
op	24:48	0:0	8	->
water	24:50	0:0	8	stream
op	24:56	0:0	8	->
water	24:58	0:0	8	feed_streams
op	24:70	0:0	8	[
water	24:71	0:0	8	i
op	24:72	0:0	8	]
op	24:73	0:0	8	]
water	24:74	0:0	8	;
call	25:12	25:55	6	unlayer_stream
arg	25:27	25:50	7	c->pfmt_ctx->streams[i]
water	25:27	0:0	8	c
op	25:28	0:0	8	->
water	25:30	0:0	8	pfmt_ctx
op	25:38	0:0	8	->
water	25:40	0:0	8	streams
op	25:47	0:0	8	[
water	25:48	0:0	8	i
op	25:49	0:0	8	]
arg	25:52	25:55	7	src
water	25:52	0:0	8	src
water	25:56	0:0	6	;
call	26:12	26:58	6	av_assert0
arg	26:23	26:58	7	!c->pfmt_ctx->streams[i]->priv_data
op	26:23	0:0	8	!
water	26:24	0:0	8	c
op	26:25	0:0	8	->
water	26:27	0:0	8	pfmt_ctx
op	26:35	0:0	8	->
water	26:37	0:0	8	streams
op	26:44	0:0	8	[
water	26:45	0:0	8	i
op	26:46	0:0	8	]
op	26:47	0:0	8	->
water	26:49	0:0	8	priv_data
water	26:59	0:0	6	;
if	27:12	28:57	6	(src -> codec -> flags & AV_CODEC_FLAG_BITEXACT)
cond	27:16	27:36	7	src -> codec -> flags & AV_CODEC_FLAG_BITEXACT
water	27:16	0:0	8	src
op	27:19	0:0	8	->
water	27:21	0:0	8	codec
op	27:26	0:0	8	->
water	27:28	0:0	8	flags
op	27:34	0:0	8	&
water	27:36	0:0	8	AV_CODEC_FLAG_BITEXACT
stmts	28:16	28:57	7	
water	28:16	0:0	8	c
op	28:17	0:0	8	->
water	28:19	0:0	8	pfmt_ctx
op	28:27	0:0	8	->
water	28:29	0:0	8	flags
op	28:35	0:0	8	|=
water	28:38	0:0	8	AVFMT_FLAG_BITEXACT
water	28:57	0:0	8	;
water	29:8	0:0	6	}
water	31:8	0:0	4	c
op	31:9	0:0	4	->
water	31:11	0:0	4	pfmt_ctx
op	31:19	0:0	4	->
water	31:21	0:0	4	oformat
op	31:29	0:0	4	=
water	31:31	0:0	4	c
op	31:32	0:0	4	->
water	31:34	0:0	4	stream
op	31:40	0:0	4	->
water	31:42	0:0	4	fmt
water	31:45	0:0	4	;
call	32:8	32:67	4	av_assert0
arg	32:19	32:67	5	c->pfmt_ctx->nb_streams==c->stream->nb_streams
water	32:19	0:0	6	c
op	32:20	0:0	6	->
water	32:22	0:0	6	pfmt_ctx
op	32:30	0:0	6	->
water	32:32	0:0	6	nb_streams
op	32:43	0:0	6	==
water	32:46	0:0	6	c
op	32:47	0:0	6	->
water	32:49	0:0	6	stream
op	32:55	0:0	6	->
water	32:57	0:0	6	nb_streams
water	32:68	0:0	4	;
water	33:8	0:0	4	c
op	33:9	0:0	4	->
water	33:11	0:0	4	got_key_frame
op	33:25	0:0	4	=
water	33:27	0:0	4	0
water	33:28	0:0	4	;
if	35:8	38:8	4	(avio_open_dyn_buf (& c -> pfmt_ctx -> pb ) < 0)
cond	35:12	35:50	5	avio_open_dyn_buf (& c -> pfmt_ctx -> pb ) < 0
call	35:12	35:46	6	avio_open_dyn_buf
arg	35:30	35:46	7	&c->pfmt_ctx->pb
op	35:30	0:0	8	&
water	35:31	0:0	8	c
op	35:32	0:0	8	->
water	35:34	0:0	8	pfmt_ctx
op	35:42	0:0	8	->
water	35:44	0:0	8	pb
op	35:48	0:0	6	<
water	35:50	0:0	6	0
stmts	35:53	38:8	5	
water	35:53	0:0	6	{
return	37:12	37:21	6	-1
op	37:19	0:0	7	-
water	37:20	0:0	7	1
water	38:8	0:0	6	}
water	39:8	0:0	4	c
op	39:9	0:0	4	->
water	39:11	0:0	4	pfmt_ctx
op	39:19	0:0	4	->
water	39:21	0:0	4	pb
op	39:23	0:0	4	->
water	39:25	0:0	4	seekable
op	39:34	0:0	4	=
water	39:36	0:0	4	0
water	39:37	0:0	4	;
water	45:8	0:0	4	c
op	45:9	0:0	4	->
water	45:11	0:0	4	pfmt_ctx
op	45:19	0:0	4	->
water	45:21	0:0	4	max_delay
op	45:31	0:0	4	=
call	45:33	45:55	4	(int)
arg	45:39	45:55	5	0.7*AV_TIME_BASE
water	45:39	0:0	6	0
op	45:40	0:0	6	.
water	45:41	0:0	6	7
op	45:42	0:0	6	*
water	45:43	0:0	6	AV_TIME_BASE
water	45:56	0:0	4	;
if	46:8	50:8	4	(( ret =avformat_write_header (c -> pfmt_ctx ,NULL ) ) < 0)
cond	46:12	46:63	5	( ret =avformat_write_header (c -> pfmt_ctx ,NULL ) ) < 0
water	46:12	0:0	6	(
water	46:13	0:0	6	ret
op	46:17	0:0	6	=
call	46:19	46:58	6	avformat_write_header
arg	46:41	46:52	7	c->pfmt_ctx
water	46:41	0:0	8	c
op	46:42	0:0	8	->
water	46:44	0:0	8	pfmt_ctx
arg	46:54	46:58	7	NULL
water	46:54	0:0	8	NULL
water	46:59	0:0	6	)
op	46:61	0:0	6	<
water	46:63	0:0	6	0
stmts	46:66	50:8	5	
water	46:66	0:0	6	{
call	47:12	48:57	6	http_log
arg	47:21	47:72	7	"Error writing output header for stream '%s': %s\n"
water	47:21	0:0	8	"Error writing output header for stream '%s': %s\n"
arg	48:21	48:40	7	c->stream->filename
water	48:21	0:0	8	c
op	48:22	0:0	8	->
water	48:24	0:0	8	stream
op	48:30	0:0	8	->
water	48:32	0:0	8	filename
arg	48:42	48:57	7	av_err2str(ret)
call	48:42	48:56	8	av_err2str
arg	48:53	48:56	9	ret
water	48:53	0:0	10	ret
water	48:58	0:0	6	;
return	49:12	49:22	6	ret
water	49:19	0:0	7	ret
water	50:8	0:0	6	}
call	51:8	51:43	4	av_dict_free
arg	51:21	51:43	5	&c->pfmt_ctx->metadata
op	51:21	0:0	6	&
water	51:22	0:0	6	c
op	51:23	0:0	6	->
water	51:25	0:0	6	pfmt_ctx
op	51:33	0:0	6	->
water	51:35	0:0	6	metadata
water	51:44	0:0	4	;
water	52:8	0:0	4	len
op	52:12	0:0	4	=
call	52:14	52:63	4	avio_close_dyn_buf
arg	52:33	52:48	5	c->pfmt_ctx->pb
water	52:33	0:0	6	c
op	52:34	0:0	6	->
water	52:36	0:0	6	pfmt_ctx
op	52:44	0:0	6	->
water	52:46	0:0	6	pb
arg	52:50	52:63	5	&c->pb_buffer
op	52:50	0:0	6	&
water	52:51	0:0	6	c
op	52:52	0:0	6	->
water	52:54	0:0	6	pb_buffer
water	52:64	0:0	4	;
water	53:8	0:0	4	c
op	53:9	0:0	4	->
water	53:11	0:0	4	buffer_ptr
op	53:22	0:0	4	=
water	53:24	0:0	4	c
op	53:25	0:0	4	->
water	53:27	0:0	4	pb_buffer
water	53:36	0:0	4	;
water	54:8	0:0	4	c
op	54:9	0:0	4	->
water	54:11	0:0	4	buffer_end
op	54:22	0:0	4	=
water	54:24	0:0	4	c
op	54:25	0:0	4	->
water	54:27	0:0	4	pb_buffer
op	54:37	0:0	4	+
water	54:39	0:0	4	len
water	54:42	0:0	4	;
water	55:8	0:0	4	c
op	55:9	0:0	4	->
water	55:11	0:0	4	state
op	55:17	0:0	4	=
water	55:19	0:0	4	HTTPSTATE_SEND_DATA
water	55:38	0:0	4	;
water	56:8	0:0	4	c
op	56:9	0:0	4	->
water	56:11	0:0	4	last_packet_sent
op	56:28	0:0	4	=
water	56:30	0:0	4	0
water	56:31	0:0	4	;
break	57:8	57:13	4	
label	58:4	58:28	4	case HTTPSTATE_SEND_DATA :
if	61:8	64:59	4	(c -> stream -> feed)
cond	61:12	61:23	5	c -> stream -> feed
water	61:12	0:0	6	c
op	61:13	0:0	6	->
water	61:15	0:0	6	stream
op	61:21	0:0	6	->
water	61:23	0:0	6	feed
stmts	62:12	64:59	5	
call	62:12	64:58	6	ffm_set_write_index
arg	62:32	62:41	7	c->fmt_in
water	62:32	0:0	8	c
op	62:33	0:0	8	->
water	62:35	0:0	8	fmt_in
arg	63:32	63:65	7	c->stream->feed->feed_write_index
water	63:32	0:0	8	c
op	63:33	0:0	8	->
water	63:35	0:0	8	stream
op	63:41	0:0	8	->
water	63:43	0:0	8	feed
op	63:47	0:0	8	->
water	63:49	0:0	8	feed_write_index
arg	64:32	64:58	7	c->stream->feed->feed_size
water	64:32	0:0	8	c
op	64:33	0:0	8	->
water	64:35	0:0	8	stream
op	64:41	0:0	8	->
water	64:43	0:0	8	feed
op	64:47	0:0	8	->
water	64:49	0:0	8	feed_size
water	64:59	0:0	6	;
if	65:8	68:50	4	(c -> stream -> max_time && c -> stream -> max_time + c -> start_time - cur_time < 0)
cond	65:12	66:61	5	c -> stream -> max_time && c -> stream -> max_time + c -> start_time - cur_time < 0
water	65:12	0:0	6	c
op	65:13	0:0	6	->
water	65:15	0:0	6	stream
op	65:21	0:0	6	->
water	65:23	0:0	6	max_time
op	65:32	0:0	6	&&
water	66:12	0:0	6	c
op	66:13	0:0	6	->
water	66:15	0:0	6	stream
op	66:21	0:0	6	->
water	66:23	0:0	6	max_time
op	66:32	0:0	6	+
water	66:34	0:0	6	c
op	66:35	0:0	6	->
water	66:37	0:0	6	start_time
op	66:48	0:0	6	-
water	66:50	0:0	6	cur_time
op	66:59	0:0	6	<
water	66:61	0:0	6	0
stmts	68:12	68:50	5	
water	68:12	0:0	6	c
op	68:13	0:0	6	->
water	68:15	0:0	6	state
op	68:21	0:0	6	=
water	68:23	0:0	6	HTTPSTATE_SEND_DATA_TRAILER
water	68:50	0:0	6	;
else	69:8	195:8	4
stmts	69:13	195:8	5	
water	69:13	0:0	6	{
decl	70:12	70:24	6	AVPacket	pkt
label	71:8	71:12	6	redo :
water	72:12	0:0	6	ret
op	72:16	0:0	6	=
call	72:18	72:47	6	av_read_frame
arg	72:32	72:41	7	c->fmt_in
water	72:32	0:0	8	c
op	72:33	0:0	8	->
water	72:35	0:0	8	fmt_in
arg	72:43	72:47	7	&pkt
op	72:43	0:0	8	&
water	72:44	0:0	8	pkt
water	72:48	0:0	6	;
if	73:12	94:12	6	(ret < 0)
cond	73:16	73:22	7	ret < 0
water	73:16	0:0	8	ret
op	73:20	0:0	8	<
water	73:22	0:0	8	0
stmts	73:25	94:12	7	
water	73:25	0:0	8	{
if	74:16	79:16	8	(c -> stream -> feed)
cond	74:20	74:31	9	c -> stream -> feed
water	74:20	0:0	10	c
op	74:21	0:0	10	->
water	74:23	0:0	10	stream
op	74:29	0:0	10	->
water	74:31	0:0	10	feed
stmts	74:37	79:16	9	
water	74:37	0:0	10	{
water	77:20	0:0	10	c
op	77:21	0:0	10	->
water	77:23	0:0	10	state
op	77:29	0:0	10	=
water	77:31	0:0	10	HTTPSTATE_WAIT_FEED
water	77:50	0:0	10	;
return	78:20	78:28	10	1
water	78:27	0:0	11	1
water	79:16	0:0	10	}
if	80:16	83:16	8	(ret ==AVERROR (EAGAIN ))
cond	80:20	80:41	9	ret ==AVERROR (EAGAIN )
water	80:20	0:0	10	ret
op	80:24	0:0	10	==
call	80:27	80:41	10	AVERROR
arg	80:35	80:41	11	EAGAIN
water	80:35	0:0	12	EAGAIN
stmts	80:44	83:16	9	
water	80:44	0:0	10	{
return	82:20	82:28	10	0
water	82:27	0:0	11	0
water	83:16	0:0	10	}
if	84:16	89:16	8	(c -> stream -> loop)
cond	84:20	84:31	9	c -> stream -> loop
water	84:20	0:0	10	c
op	84:21	0:0	10	->
water	84:23	0:0	10	stream
op	84:29	0:0	10	->
water	84:31	0:0	10	loop
stmts	84:37	89:16	9	
water	84:37	0:0	10	{
call	85:20	85:51	10	avformat_close_input
arg	85:41	85:51	11	&c->fmt_in
op	85:41	0:0	12	&
water	85:42	0:0	12	c
op	85:43	0:0	12	->
water	85:45	0:0	12	fmt_in
water	85:52	0:0	10	;
if	86:20	87:36	10	(open_input_stream (c ,"" ) < 0)
cond	86:24	86:51	11	open_input_stream (c ,"" ) < 0
call	86:24	86:47	12	open_input_stream
arg	86:42	86:43	13	c
water	86:42	0:0	14	c
arg	86:45	86:47	13	""
water	86:45	0:0	14	""
op	86:49	0:0	12	<
water	86:51	0:0	12	0
stmts	87:24	87:36	11	
goto	87:24	87:36	12	no_loop
water	87:29	0:0	13	no_loop
goto	88:20	88:29	10	redo
water	88:25	0:0	11	redo
water	89:16	0:0	10	}
else	89:18	93:16	8
stmts	89:23	93:16	9	
water	89:23	0:0	10	{
label	90:20	90:27	10	no_loop :
water	92:24	0:0	10	c
op	92:25	0:0	10	->
water	92:27	0:0	10	state
op	92:33	0:0	10	=
water	92:35	0:0	10	HTTPSTATE_SEND_DATA_TRAILER
water	92:62	0:0	10	;
water	93:16	0:0	10	}
water	94:12	0:0	8	}
else	94:14	194:12	6
stmts	94:19	194:12	7	
water	94:19	0:0	8	{
decl	95:16	95:51	8	int	source_index
op	95:33	0:0	8	=
water	95:35	0:0	8	pkt
op	95:38	0:0	8	.
water	95:39	0:0	8	stream_index
if	97:16	100:16	8	(c -> first_pts == AV_NOPTS_VALUE && pkt . dts != AV_NOPTS_VALUE)
cond	97:20	97:65	9	c -> first_pts == AV_NOPTS_VALUE && pkt . dts != AV_NOPTS_VALUE
water	97:20	0:0	10	c
op	97:21	0:0	10	->
water	97:23	0:0	10	first_pts
op	97:33	0:0	10	==
water	97:36	0:0	10	AV_NOPTS_VALUE
op	97:51	0:0	10	&&
water	97:54	0:0	10	pkt
op	97:57	0:0	10	.
water	97:58	0:0	10	dts
op	97:62	0:0	10	!=
water	97:65	0:0	10	AV_NOPTS_VALUE
stmts	97:81	100:16	9	
water	97:81	0:0	10	{
water	98:20	0:0	10	c
op	98:21	0:0	10	->
water	98:23	0:0	10	first_pts
op	98:33	0:0	10	=
call	98:35	98:120	10	av_rescale_q
arg	98:48	98:55	11	pkt.dts
water	98:48	0:0	12	pkt
op	98:51	0:0	12	.
water	98:52	0:0	12	dts
arg	98:57	98:104	11	c->fmt_in->streams[pkt.stream_index]->time_base
water	98:57	0:0	12	c
op	98:58	0:0	12	->
water	98:60	0:0	12	fmt_in
op	98:66	0:0	12	->
water	98:68	0:0	12	streams
op	98:75	0:0	12	[
water	98:76	0:0	12	pkt
op	98:79	0:0	12	.
water	98:80	0:0	12	stream_index
op	98:92	0:0	12	]
op	98:93	0:0	12	->
water	98:95	0:0	12	time_base
arg	98:106	98:120	11	AV_TIME_BASE_Q
water	98:106	0:0	12	AV_TIME_BASE_Q
water	98:121	0:0	10	;
water	99:20	0:0	10	c
op	99:21	0:0	10	->
water	99:23	0:0	10	start_time
op	99:34	0:0	10	=
water	99:36	0:0	10	cur_time
water	99:44	0:0	10	;
water	100:16	0:0	10	}
if	102:16	126:16	8	(c -> stream -> feed)
cond	102:20	102:31	9	c -> stream -> feed
water	102:20	0:0	10	c
op	102:21	0:0	10	->
water	102:23	0:0	10	stream
op	102:29	0:0	10	->
water	102:31	0:0	10	feed
stmts	102:37	126:16	9	
water	102:37	0:0	10	{
if	104:20	113:20	10	(c -> switch_pending)
cond	104:24	104:27	11	c -> switch_pending
water	104:24	0:0	12	c
op	104:25	0:0	12	->
water	104:27	0:0	12	switch_pending
stmts	104:43	113:20	11	
water	104:43	0:0	12	{
water	105:24	0:0	12	c
op	105:25	0:0	12	->
water	105:27	0:0	12	switch_pending
op	105:42	0:0	12	=
water	105:44	0:0	12	0
water	105:45	0:0	12	;
for	106:24	112:24	12	(i = 0 ;i < c -> stream -> nb_streams;i ++)
forinit	106:28	106:31	13	i = 0 ;
water	106:28	0:0	14	i
op	106:29	0:0	14	=
water	106:30	0:0	14	0
water	106:31	0:0	14	;
cond	106:32	106:45	13	i < c -> stream -> nb_streams
water	106:32	0:0	14	i
op	106:33	0:0	14	<
water	106:34	0:0	14	c
op	106:35	0:0	14	->
water	106:37	0:0	14	stream
op	106:43	0:0	14	->
water	106:45	0:0	14	nb_streams
forexpr	106:56	106:57	13	i ++
water	106:56	0:0	14	i
op	106:57	0:0	14	++
stmts	106:61	112:24	13	
water	106:61	0:0	14	{
if	107:28	109:66	14	(c -> switch_feed_streams [ i ] == pkt . stream_index)
cond	107:32	107:65	15	c -> switch_feed_streams [ i ] == pkt . stream_index
water	107:32	0:0	16	c
op	107:33	0:0	16	->
water	107:35	0:0	16	switch_feed_streams
op	107:54	0:0	16	[
water	107:55	0:0	16	i
op	107:56	0:0	16	]
op	107:58	0:0	16	==
water	107:61	0:0	16	pkt
op	107:64	0:0	16	.
water	107:65	0:0	16	stream_index
stmts	108:32	109:66	15	
if	108:32	109:66	16	(pkt . flags & AV_PKT_FLAG_KEY)
cond	108:36	108:48	17	pkt . flags & AV_PKT_FLAG_KEY
water	108:36	0:0	18	pkt
op	108:39	0:0	18	.
water	108:40	0:0	18	flags
op	108:46	0:0	18	&
water	108:48	0:0	18	AV_PKT_FLAG_KEY
stmts	109:36	109:66	17	
water	109:36	0:0	18	c
op	109:37	0:0	18	->
water	109:39	0:0	18	switch_feed_streams
op	109:58	0:0	18	[
water	109:59	0:0	18	i
op	109:60	0:0	18	]
op	109:62	0:0	18	=
op	109:64	0:0	18	-
water	109:65	0:0	18	1
water	109:66	0:0	18	;
if	110:28	111:53	14	(c -> switch_feed_streams [ i ] >= 0)
cond	110:32	110:61	15	c -> switch_feed_streams [ i ] >= 0
water	110:32	0:0	16	c
op	110:33	0:0	16	->
water	110:35	0:0	16	switch_feed_streams
op	110:54	0:0	16	[
water	110:55	0:0	16	i
op	110:56	0:0	16	]
op	110:58	0:0	16	>=
water	110:61	0:0	16	0
stmts	111:32	111:53	15	
water	111:32	0:0	16	c
op	111:33	0:0	16	->
water	111:35	0:0	16	switch_pending
op	111:50	0:0	16	=
water	111:52	0:0	16	1
water	111:53	0:0	16	;
water	112:24	0:0	14	}
water	113:20	0:0	12	}
for	114:20	125:20	10	(i = 0 ;i < c -> stream -> nb_streams;i ++)
forinit	114:24	114:27	11	i = 0 ;
water	114:24	0:0	12	i
op	114:25	0:0	12	=
water	114:26	0:0	12	0
water	114:27	0:0	12	;
cond	114:28	114:41	11	i < c -> stream -> nb_streams
water	114:28	0:0	12	i
op	114:29	0:0	12	<
water	114:30	0:0	12	c
op	114:31	0:0	12	->
water	114:33	0:0	12	stream
op	114:39	0:0	12	->
water	114:41	0:0	12	nb_streams
forexpr	114:52	114:53	11	i ++
water	114:52	0:0	12	i
op	114:53	0:0	12	++
stmts	114:57	125:20	11	
water	114:57	0:0	12	{
if	115:24	124:24	12	(c -> stream -> feed_streams [ i ] == pkt . stream_index)
cond	115:28	115:62	13	c -> stream -> feed_streams [ i ] == pkt . stream_index
water	115:28	0:0	14	c
op	115:29	0:0	14	->
water	115:31	0:0	14	stream
op	115:37	0:0	14	->
water	115:39	0:0	14	feed_streams
op	115:51	0:0	14	[
water	115:52	0:0	14	i
op	115:53	0:0	14	]
op	115:55	0:0	14	==
water	115:58	0:0	14	pkt
op	115:61	0:0	14	.
water	115:62	0:0	14	stream_index
stmts	115:76	124:24	13	
water	115:76	0:0	14	{
decl	116:28	116:75	14	AVStream	*st
op	116:41	0:0	14	=
water	116:43	0:0	14	c
op	116:44	0:0	14	->
water	116:46	0:0	14	fmt_in
op	116:52	0:0	14	->
water	116:54	0:0	14	streams
op	116:61	0:0	14	[
water	116:62	0:0	14	source_index
op	116:74	0:0	14	]
water	117:28	0:0	14	pkt
op	117:31	0:0	14	.
water	117:32	0:0	14	stream_index
op	117:45	0:0	14	=
water	117:47	0:0	14	i
water	117:48	0:0	14	;
if	118:28	121:52	14	(pkt . flags & AV_PKT_FLAG_KEY && ( st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO || c -> stream -> nb_streams == 1 ))
cond	118:32	120:59	15	pkt . flags & AV_PKT_FLAG_KEY && ( st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO || c -> stream -> nb_streams == 1 )
water	118:32	0:0	16	pkt
op	118:35	0:0	16	.
water	118:36	0:0	16	flags
op	118:42	0:0	16	&
water	118:44	0:0	16	AV_PKT_FLAG_KEY
op	118:60	0:0	16	&&
water	119:32	0:0	16	(
water	119:33	0:0	16	st
op	119:35	0:0	16	->
water	119:37	0:0	16	codecpar
op	119:45	0:0	16	->
water	119:47	0:0	16	codec_type
op	119:58	0:0	16	==
water	119:61	0:0	16	AVMEDIA_TYPE_VIDEO
op	119:80	0:0	16	||
water	120:33	0:0	16	c
op	120:34	0:0	16	->
water	120:36	0:0	16	stream
op	120:42	0:0	16	->
water	120:44	0:0	16	nb_streams
op	120:55	0:0	16	==
water	120:58	0:0	16	1
water	120:59	0:0	16	)
stmts	121:32	121:52	15	
water	121:32	0:0	16	c
op	121:33	0:0	16	->
water	121:35	0:0	16	got_key_frame
op	121:49	0:0	16	=
water	121:51	0:0	16	1
water	121:52	0:0	16	;
if	122:28	123:44	14	(! c -> stream -> send_on_key || c -> got_key_frame)
cond	122:32	122:62	15	! c -> stream -> send_on_key || c -> got_key_frame
op	122:32	0:0	16	!
water	122:33	0:0	16	c
op	122:34	0:0	16	->
water	122:36	0:0	16	stream
op	122:42	0:0	16	->
water	122:44	0:0	16	send_on_key
op	122:56	0:0	16	||
water	122:59	0:0	16	c
op	122:60	0:0	16	->
water	122:62	0:0	16	got_key_frame
stmts	123:32	123:44	15	
goto	123:32	123:44	16	send_it
water	123:37	0:0	17	send_it
water	124:24	0:0	14	}
water	125:20	0:0	12	}
water	126:16	0:0	10	}
else	126:18	192:16	8
stmts	126:23	192:16	9	
water	126:23	0:0	10	{
decl	127:20	127:39	10	AVStream	*ist
water	127:33	0:0	10	,
decl	127:20	127:39	10	AVStream	*ost
label	128:16	128:23	10	send_it :
water	129:20	0:0	10	ist
op	129:24	0:0	10	=
water	129:26	0:0	10	c
op	129:27	0:0	10	->
water	129:29	0:0	10	fmt_in
op	129:35	0:0	10	->
water	129:37	0:0	10	streams
op	129:44	0:0	10	[
water	129:45	0:0	10	source_index
op	129:57	0:0	10	]
water	129:58	0:0	10	;
if	133:20	149:20	10	(c -> is_packetized)
cond	133:24	133:27	11	c -> is_packetized
water	133:24	0:0	12	c
op	133:25	0:0	12	->
water	133:27	0:0	12	is_packetized
stmts	133:42	149:20	11	
water	133:42	0:0	12	{
if	135:24	138:24	12	(pkt . dts != AV_NOPTS_VALUE)
cond	135:28	135:39	13	pkt . dts != AV_NOPTS_VALUE
water	135:28	0:0	14	pkt
op	135:31	0:0	14	.
water	135:32	0:0	14	dts
op	135:36	0:0	14	!=
water	135:39	0:0	14	AV_NOPTS_VALUE
stmts	135:55	138:24	13	
water	135:55	0:0	14	{
water	136:28	0:0	14	c
op	136:29	0:0	14	->
water	136:31	0:0	14	cur_pts
op	136:39	0:0	14	=
call	136:41	136:93	14	av_rescale_q
arg	136:54	136:61	15	pkt.dts
water	136:54	0:0	16	pkt
op	136:57	0:0	16	.
water	136:58	0:0	16	dts
arg	136:63	136:77	15	ist->time_base
water	136:63	0:0	16	ist
op	136:66	0:0	16	->
water	136:68	0:0	16	time_base
arg	136:79	136:93	15	AV_TIME_BASE_Q
water	136:79	0:0	16	AV_TIME_BASE_Q
water	136:94	0:0	14	;
water	137:28	0:0	14	c
op	137:29	0:0	14	->
water	137:31	0:0	14	cur_pts
op	137:39	0:0	14	-=
water	137:42	0:0	14	c
op	137:43	0:0	14	->
water	137:45	0:0	14	first_pts
water	137:54	0:0	14	;
water	138:24	0:0	14	}
water	139:24	0:0	12	c
op	139:25	0:0	12	->
water	139:27	0:0	12	cur_frame_duration
op	139:46	0:0	12	=
call	139:48	139:105	12	av_rescale_q
arg	139:61	139:73	13	pkt.duration
water	139:61	0:0	14	pkt
op	139:64	0:0	14	.
water	139:65	0:0	14	duration
arg	139:75	139:89	13	ist->time_base
water	139:75	0:0	14	ist
op	139:78	0:0	14	->
water	139:80	0:0	14	time_base
arg	139:91	139:105	13	AV_TIME_BASE_Q
water	139:91	0:0	14	AV_TIME_BASE_Q
water	139:106	0:0	12	;
water	141:24	0:0	12	c
op	141:25	0:0	12	->
water	141:27	0:0	12	packet_stream_index
op	141:47	0:0	12	=
water	141:49	0:0	12	pkt
op	141:52	0:0	12	.
water	141:53	0:0	12	stream_index
water	141:65	0:0	12	;
water	142:24	0:0	12	ctx
op	142:28	0:0	12	=
water	142:30	0:0	12	c
op	142:31	0:0	12	->
water	142:33	0:0	12	rtp_ctx
op	142:40	0:0	12	[
water	142:41	0:0	12	c
op	142:42	0:0	12	->
water	142:44	0:0	12	packet_stream_index
op	142:63	0:0	12	]
water	142:64	0:0	12	;
if	143:24	146:24	12	(! ctx)
cond	143:27	143:28	13	! ctx
op	143:27	0:0	14	!
water	143:28	0:0	14	ctx
stmts	143:33	146:24	13	
water	143:33	0:0	14	{
call	144:28	144:48	14	av_packet_unref
arg	144:44	144:48	15	&pkt
op	144:44	0:0	16	&
water	144:45	0:0	16	pkt
water	144:49	0:0	14	;
break	145:28	145:33	14	
water	146:24	0:0	14	}
water	148:24	0:0	12	pkt
op	148:27	0:0	12	.
water	148:28	0:0	12	stream_index
op	148:41	0:0	12	=
water	148:43	0:0	12	0
water	148:44	0:0	12	;
water	149:20	0:0	12	}
else	149:22	152:20	10
stmts	149:27	152:20	11	
water	149:27	0:0	12	{
water	150:24	0:0	12	ctx
op	150:28	0:0	12	=
water	150:30	0:0	12	c
op	150:31	0:0	12	->
water	150:33	0:0	12	pfmt_ctx
water	150:41	0:0	12	;
water	152:20	0:0	12	}
if	153:20	161:20	10	(c -> is_packetized)
cond	153:24	153:27	11	c -> is_packetized
water	153:24	0:0	12	c
op	153:25	0:0	12	->
water	153:27	0:0	12	is_packetized
stmts	153:42	161:20	11	
water	153:42	0:0	12	{
decl	154:24	154:43	12	int	max_packet_size
if	155:24	156:70	12	(c -> rtp_protocol == RTSP_LOWER_TRANSPORT_TCP)
cond	155:28	155:47	13	c -> rtp_protocol == RTSP_LOWER_TRANSPORT_TCP
water	155:28	0:0	14	c
op	155:29	0:0	14	->
water	155:31	0:0	14	rtp_protocol
op	155:44	0:0	14	==
water	155:47	0:0	14	RTSP_LOWER_TRANSPORT_TCP
stmts	156:28	156:70	13	
water	156:28	0:0	14	max_packet_size
op	156:44	0:0	14	=
water	156:46	0:0	14	RTSP_TCP_MAX_PACKET_SIZE
water	156:70	0:0	14	;
else	157:24	158:101	12
stmts	158:28	158:101	13	
water	158:28	0:0	14	max_packet_size
op	158:44	0:0	14	=
water	158:46	0:0	14	c
op	158:47	0:0	14	->
water	158:49	0:0	14	rtp_handles
op	158:60	0:0	14	[
water	158:61	0:0	14	c
op	158:62	0:0	14	->
water	158:64	0:0	14	packet_stream_index
op	158:83	0:0	14	]
op	158:84	0:0	14	->
water	158:86	0:0	14	max_packet_size
water	158:101	0:0	14	;
water	159:24	0:0	12	ret
op	159:28	0:0	12	=
call	159:30	160:70	12	ffio_open_dyn_packet_buf
arg	159:55	159:63	13	&ctx->pb
op	159:55	0:0	14	&
water	159:56	0:0	14	ctx
op	159:59	0:0	14	->
water	159:61	0:0	14	pb
arg	160:55	160:70	13	max_packet_size
water	160:55	0:0	14	max_packet_size
water	160:71	0:0	12	;
water	161:20	0:0	12	}
else	161:22	162:57	10
stmts	162:24	162:57	11	
water	162:24	0:0	12	ret
op	162:28	0:0	12	=
call	162:30	162:56	12	avio_open_dyn_buf
arg	162:48	162:56	13	&ctx->pb
op	162:48	0:0	14	&
water	162:49	0:0	14	ctx
op	162:52	0:0	14	->
water	162:54	0:0	14	pb
water	162:57	0:0	12	;
if	163:20	166:20	10	(ret < 0)
cond	163:24	163:30	11	ret < 0
water	163:24	0:0	12	ret
op	163:28	0:0	12	<
water	163:30	0:0	12	0
stmts	163:33	166:20	11	
water	163:33	0:0	12	{
return	165:24	165:33	12	-1
op	165:31	0:0	13	-
water	165:32	0:0	13	1
water	166:20	0:0	12	}
water	167:20	0:0	10	ost
op	167:24	0:0	10	=
water	167:26	0:0	10	ctx
op	167:29	0:0	10	->
water	167:31	0:0	10	streams
op	167:38	0:0	10	[
water	167:39	0:0	10	pkt
op	167:42	0:0	10	.
water	167:43	0:0	10	stream_index
op	167:55	0:0	10	]
water	167:56	0:0	10	;
water	168:20	0:0	10	ctx
op	168:23	0:0	10	->
water	168:25	0:0	10	pb
op	168:27	0:0	10	->
water	168:29	0:0	10	seekable
op	168:38	0:0	10	=
water	168:40	0:0	10	0
water	168:41	0:0	10	;
if	169:20	171:62	10	(pkt . dts != AV_NOPTS_VALUE)
cond	169:24	169:35	11	pkt . dts != AV_NOPTS_VALUE
water	169:24	0:0	12	pkt
op	169:27	0:0	12	.
water	169:28	0:0	12	dts
op	169:32	0:0	12	!=
water	169:35	0:0	12	AV_NOPTS_VALUE
stmts	170:24	171:62	11	
water	170:24	0:0	12	pkt
op	170:27	0:0	12	.
water	170:28	0:0	12	dts
op	170:32	0:0	12	=
call	170:34	171:61	12	av_rescale_q
arg	170:47	170:54	13	pkt.dts
water	170:47	0:0	14	pkt
op	170:50	0:0	14	.
water	170:51	0:0	14	dts
arg	170:56	170:70	13	ist->time_base
water	170:56	0:0	14	ist
op	170:59	0:0	14	->
water	170:61	0:0	14	time_base
arg	171:47	171:61	13	ost->time_base
water	171:47	0:0	14	ost
op	171:50	0:0	14	->
water	171:52	0:0	14	time_base
water	171:62	0:0	12	;
if	172:20	174:62	10	(pkt . pts != AV_NOPTS_VALUE)
cond	172:24	172:35	11	pkt . pts != AV_NOPTS_VALUE
water	172:24	0:0	12	pkt
op	172:27	0:0	12	.
water	172:28	0:0	12	pts
op	172:32	0:0	12	!=
water	172:35	0:0	12	AV_NOPTS_VALUE
stmts	173:24	174:62	11	
water	173:24	0:0	12	pkt
op	173:27	0:0	12	.
water	173:28	0:0	12	pts
op	173:32	0:0	12	=
call	173:34	174:61	12	av_rescale_q
arg	173:47	173:54	13	pkt.pts
water	173:47	0:0	14	pkt
op	173:50	0:0	14	.
water	173:51	0:0	14	pts
arg	173:56	173:70	13	ist->time_base
water	173:56	0:0	14	ist
op	173:59	0:0	14	->
water	173:61	0:0	14	time_base
arg	174:47	174:61	13	ost->time_base
water	174:47	0:0	14	ost
op	174:50	0:0	14	->
water	174:52	0:0	14	time_base
water	174:62	0:0	12	;
water	175:20	0:0	10	pkt
op	175:23	0:0	10	.
water	175:24	0:0	10	duration
op	175:33	0:0	10	=
call	175:35	176:62	10	av_rescale_q
arg	175:48	175:60	11	pkt.duration
water	175:48	0:0	12	pkt
op	175:51	0:0	12	.
water	175:52	0:0	12	duration
arg	175:62	175:76	11	ist->time_base
water	175:62	0:0	12	ist
op	175:65	0:0	12	->
water	175:67	0:0	12	time_base
arg	176:48	176:62	11	ost->time_base
water	176:48	0:0	12	ost
op	176:51	0:0	12	->
water	176:53	0:0	12	time_base
water	176:63	0:0	10	;
if	177:20	181:20	10	(( ret =av_write_frame (ctx ,& pkt ) ) < 0)
cond	177:24	177:60	11	( ret =av_write_frame (ctx ,& pkt ) ) < 0
water	177:24	0:0	12	(
water	177:25	0:0	12	ret
op	177:29	0:0	12	=
call	177:31	177:55	12	av_write_frame
arg	177:46	177:49	13	ctx
water	177:46	0:0	14	ctx
arg	177:51	177:55	13	&pkt
op	177:51	0:0	14	&
water	177:52	0:0	14	pkt
water	177:56	0:0	12	)
op	177:58	0:0	12	<
water	177:60	0:0	12	0
stmts	177:63	181:20	11	
water	177:63	0:0	12	{
call	178:24	179:69	12	http_log
arg	178:33	178:86	13	"Error writing frame to output for stream '%s': %s\n"
water	178:33	0:0	14	"Error writing frame to output for stream '%s': %s\n"
arg	179:33	179:52	13	c->stream->filename
water	179:33	0:0	14	c
op	179:34	0:0	14	->
water	179:36	0:0	14	stream
op	179:42	0:0	14	->
water	179:44	0:0	14	filename
arg	179:54	179:69	13	av_err2str(ret)
call	179:54	179:68	14	av_err2str
arg	179:65	179:68	15	ret
water	179:65	0:0	16	ret
water	179:70	0:0	12	;
water	180:24	0:0	12	c
op	180:25	0:0	12	->
water	180:27	0:0	12	state
op	180:33	0:0	12	=
water	180:35	0:0	12	HTTPSTATE_SEND_DATA_TRAILER
water	180:62	0:0	12	;
water	181:20	0:0	12	}
call	182:20	182:42	10	av_freep
arg	182:29	182:42	11	&c->pb_buffer
op	182:29	0:0	12	&
water	182:30	0:0	12	c
op	182:31	0:0	12	->
water	182:33	0:0	12	pb_buffer
water	182:43	0:0	10	;
water	183:20	0:0	10	len
op	183:24	0:0	10	=
call	183:26	183:67	10	avio_close_dyn_buf
arg	183:45	183:52	11	ctx->pb
water	183:45	0:0	12	ctx
op	183:48	0:0	12	->
water	183:50	0:0	12	pb
arg	183:54	183:67	11	&c->pb_buffer
op	183:54	0:0	12	&
water	183:55	0:0	12	c
op	183:56	0:0	12	->
water	183:58	0:0	12	pb_buffer
water	183:68	0:0	10	;
water	184:20	0:0	10	ctx
op	184:23	0:0	10	->
water	184:25	0:0	10	pb
op	184:28	0:0	10	=
water	184:30	0:0	10	NULL
water	184:34	0:0	10	;
water	185:20	0:0	10	c
op	185:21	0:0	10	->
water	185:23	0:0	10	cur_frame_bytes
op	185:39	0:0	10	=
water	185:41	0:0	10	len
water	185:44	0:0	10	;
water	186:20	0:0	10	c
op	186:21	0:0	10	->
water	186:23	0:0	10	buffer_ptr
op	186:34	0:0	10	=
water	186:36	0:0	10	c
op	186:37	0:0	10	->
water	186:39	0:0	10	pb_buffer
water	186:48	0:0	10	;
water	187:20	0:0	10	c
op	187:21	0:0	10	->
water	187:23	0:0	10	buffer_end
op	187:34	0:0	10	=
water	187:36	0:0	10	c
op	187:37	0:0	10	->
water	187:39	0:0	10	pb_buffer
op	187:49	0:0	10	+
water	187:51	0:0	10	len
water	187:54	0:0	10	;
if	188:20	191:20	10	(len == 0)
cond	188:24	188:31	11	len == 0
water	188:24	0:0	12	len
op	188:28	0:0	12	==
water	188:31	0:0	12	0
stmts	188:34	191:20	11	
water	188:34	0:0	12	{
call	189:24	189:44	12	av_packet_unref
arg	189:40	189:44	13	&pkt
op	189:40	0:0	14	&
water	189:41	0:0	14	pkt
water	189:45	0:0	12	;
goto	190:24	190:33	12	redo
water	190:29	0:0	13	redo
water	191:20	0:0	12	}
water	192:16	0:0	10	}
call	193:16	193:36	8	av_packet_unref
arg	193:32	193:36	9	&pkt
op	193:32	0:0	10	&
water	193:33	0:0	10	pkt
water	193:37	0:0	8	;
water	194:12	0:0	8	}
water	195:8	0:0	6	}
break	196:8	196:13	4	
label	197:4	197:11	4	default :
label	198:4	198:36	4	case HTTPSTATE_SEND_DATA_TRAILER :
if	200:8	201:21	4	(c -> last_packet_sent || c -> is_packetized)
cond	200:12	200:38	5	c -> last_packet_sent || c -> is_packetized
water	200:12	0:0	6	c
op	200:13	0:0	6	->
water	200:15	0:0	6	last_packet_sent
op	200:32	0:0	6	||
water	200:35	0:0	6	c
op	200:36	0:0	6	->
water	200:38	0:0	6	is_packetized
stmts	201:12	201:21	5	
return	201:12	201:21	6	-1
op	201:19	0:0	7	-
water	201:20	0:0	7	1
water	202:8	0:0	4	ctx
op	202:12	0:0	4	=
water	202:14	0:0	4	c
op	202:15	0:0	4	->
water	202:17	0:0	4	pfmt_ctx
water	202:25	0:0	4	;
if	204:8	207:8	4	(avio_open_dyn_buf (& ctx -> pb ) < 0)
cond	204:12	204:42	5	avio_open_dyn_buf (& ctx -> pb ) < 0
call	204:12	204:38	6	avio_open_dyn_buf
arg	204:30	204:38	7	&ctx->pb
op	204:30	0:0	8	&
water	204:31	0:0	8	ctx
op	204:34	0:0	8	->
water	204:36	0:0	8	pb
op	204:40	0:0	6	<
water	204:42	0:0	6	0
stmts	204:45	207:8	5	
water	204:45	0:0	6	{
return	206:12	206:21	6	-1
op	206:19	0:0	7	-
water	206:20	0:0	7	1
water	207:8	0:0	6	}
water	208:8	0:0	4	c
op	208:9	0:0	4	->
water	208:11	0:0	4	pfmt_ctx
op	208:19	0:0	4	->
water	208:21	0:0	4	pb
op	208:23	0:0	4	->
water	208:25	0:0	4	seekable
op	208:34	0:0	4	=
water	208:36	0:0	4	0
water	208:37	0:0	4	;
call	209:8	209:28	4	av_write_trailer
arg	209:25	209:28	5	ctx
water	209:25	0:0	6	ctx
water	209:29	0:0	4	;
water	210:8	0:0	4	len
op	210:12	0:0	4	=
call	210:14	210:55	4	avio_close_dyn_buf
arg	210:33	210:40	5	ctx->pb
water	210:33	0:0	6	ctx
op	210:36	0:0	6	->
water	210:38	0:0	6	pb
arg	210:42	210:55	5	&c->pb_buffer
op	210:42	0:0	6	&
water	210:43	0:0	6	c
op	210:44	0:0	6	->
water	210:46	0:0	6	pb_buffer
water	210:56	0:0	4	;
water	211:8	0:0	4	c
op	211:9	0:0	4	->
water	211:11	0:0	4	buffer_ptr
op	211:22	0:0	4	=
water	211:24	0:0	4	c
op	211:25	0:0	4	->
water	211:27	0:0	4	pb_buffer
water	211:36	0:0	4	;
water	212:8	0:0	4	c
op	212:9	0:0	4	->
water	212:11	0:0	4	buffer_end
op	212:22	0:0	4	=
water	212:24	0:0	4	c
op	212:25	0:0	4	->
water	212:27	0:0	4	pb_buffer
op	212:37	0:0	4	+
water	212:39	0:0	4	len
water	212:42	0:0	4	;
water	213:8	0:0	4	c
op	213:9	0:0	4	->
water	213:11	0:0	4	last_packet_sent
op	213:28	0:0	4	=
water	213:30	0:0	4	1
water	213:31	0:0	4	;
break	214:8	214:13	4	
water	215:4	0:0	4	}
return	216:4	216:12	2	0
water	216:11	0:0	3	0
