func	1:8	56:0	0	int	ff_ac3_encode_init
params	1:30	0:0	1	
param	1:31	1:52	2	AVCodecContext *	avctx
stmnts	0:0	55:14	1	
decl	3:4	3:42	2	AC3EncodeContext	*s
op	3:24	0:0	2	=
water	3:26	0:0	2	avctx
op	3:31	0:0	2	->
water	3:33	0:0	2	priv_data
decl	4:4	4:26	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:26	2	int	frame_size_58
water	5:4	0:0	2	s
op	5:5	0:0	2	->
water	5:7	0:0	2	avctx
op	5:13	0:0	2	=
water	5:15	0:0	2	avctx
water	5:20	0:0	2	;
water	6:4	0:0	2	s
op	6:5	0:0	2	->
water	6:7	0:0	2	eac3
op	6:12	0:0	2	=
water	6:14	0:0	2	avctx
op	6:19	0:0	2	->
water	6:21	0:0	2	codec_id
op	6:30	0:0	2	==
water	6:33	0:0	2	AV_CODEC_ID_EAC3
water	6:49	0:0	2	;
call	7:4	7:23	2	ff_ac3_common_init
water	7:24	0:0	2	;
water	8:4	0:0	2	ret
op	8:8	0:0	2	=
call	8:10	8:28	2	validate_options
arg	8:27	8:28	3	s
water	8:27	0:0	4	s
water	8:29	0:0	2	;
if	9:4	10:18	2	(ret)
cond	9:8	9:8	3	ret
water	9:8	0:0	4	ret
stmts	10:8	10:18	3	
return	10:8	10:18	4	ret
water	10:15	0:0	5	ret
water	11:4	0:0	2	avctx
op	11:9	0:0	2	->
water	11:11	0:0	2	frame_size
op	11:22	0:0	2	=
water	11:24	0:0	2	AC3_BLOCK_SIZE
op	11:39	0:0	2	*
water	11:41	0:0	2	s
op	11:42	0:0	2	->
water	11:44	0:0	2	num_blocks
water	11:54	0:0	2	;
water	12:4	0:0	2	avctx
op	12:9	0:0	2	->
water	12:11	0:0	2	initial_padding
op	12:27	0:0	2	=
water	12:29	0:0	2	AC3_BLOCK_SIZE
water	12:43	0:0	2	;
water	13:4	0:0	2	s
op	13:5	0:0	2	->
water	13:7	0:0	2	bitstream_mode
op	13:22	0:0	2	=
water	13:24	0:0	2	avctx
op	13:29	0:0	2	->
water	13:31	0:0	2	audio_service_type
water	13:49	0:0	2	;
if	14:4	15:31	2	(s -> bitstream_mode == AV_AUDIO_SERVICE_TYPE_KARAOKE)
cond	14:8	14:29	3	s -> bitstream_mode == AV_AUDIO_SERVICE_TYPE_KARAOKE
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	bitstream_mode
op	14:26	0:0	4	==
water	14:29	0:0	4	AV_AUDIO_SERVICE_TYPE_KARAOKE
stmts	15:8	15:31	3	
water	15:8	0:0	4	s
op	15:9	0:0	4	->
water	15:11	0:0	4	bitstream_mode
op	15:26	0:0	4	=
water	15:28	0:0	4	0
water	15:29	0:0	4	x7
water	15:31	0:0	4	;
water	16:4	0:0	2	s
op	16:5	0:0	2	->
water	16:7	0:0	2	bits_written
op	16:23	0:0	2	=
water	16:25	0:0	2	0
water	16:26	0:0	2	;
water	17:4	0:0	2	s
op	17:5	0:0	2	->
water	17:7	0:0	2	samples_written
op	17:23	0:0	2	=
water	17:25	0:0	2	0
water	17:26	0:0	2	;
water	19:4	0:0	2	frame_size_58
op	19:18	0:0	2	=
water	19:20	0:0	2	(
water	19:21	0:0	2	(
water	19:23	0:0	2	s
op	19:24	0:0	2	->
water	19:26	0:0	2	frame_size
op	19:40	0:0	2	>>
water	19:43	0:0	2	2
water	19:44	0:0	2	)
op	19:46	0:0	2	+
water	19:48	0:0	2	(
water	19:50	0:0	2	s
op	19:51	0:0	2	->
water	19:53	0:0	2	frame_size
op	19:67	0:0	2	>>
water	19:70	0:0	2	4
water	19:71	0:0	2	)
water	19:72	0:0	2	)
op	19:74	0:0	2	<<
water	19:77	0:0	2	1
water	19:78	0:0	2	;
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	crc_inv
op	20:14	0:0	2	[
water	20:15	0:0	2	0
op	20:16	0:0	2	]
op	20:18	0:0	2	=
call	20:20	20:84	2	pow_poly
arg	20:29	20:46	3	(CRC16_POLY>>1)
water	20:29	0:0	4	(
water	20:30	0:0	4	CRC16_POLY
op	20:41	0:0	4	>>
water	20:44	0:0	4	1
water	20:45	0:0	4	)
arg	20:48	20:72	3	(8*frame_size_58)-16
water	20:48	0:0	4	(
water	20:49	0:0	4	8
op	20:51	0:0	4	*
water	20:53	0:0	4	frame_size_58
water	20:66	0:0	4	)
op	20:68	0:0	4	-
water	20:70	0:0	4	16
arg	20:74	20:84	3	CRC16_POLY
water	20:74	0:0	4	CRC16_POLY
water	20:85	0:0	2	;
if	21:4	24:4	2	(s -> bit_alloc . sr_code == 1)
cond	21:8	21:32	3	s -> bit_alloc . sr_code == 1
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	bit_alloc
op	21:20	0:0	4	.
water	21:21	0:0	4	sr_code
op	21:29	0:0	4	==
water	21:32	0:0	4	1
stmts	21:35	24:4	3	
water	21:35	0:0	4	{
water	22:8	0:0	4	frame_size_58
op	22:22	0:0	4	=
water	22:24	0:0	4	(
water	22:25	0:0	4	(
water	22:26	0:0	4	(
water	22:27	0:0	4	s
op	22:28	0:0	4	->
water	22:30	0:0	4	frame_size
op	22:40	0:0	4	+
water	22:41	0:0	4	2
water	22:42	0:0	4	)
op	22:44	0:0	4	>>
water	22:47	0:0	4	2
water	22:48	0:0	4	)
op	22:50	0:0	4	+
water	22:52	0:0	4	(
water	22:53	0:0	4	(
water	22:54	0:0	4	s
op	22:55	0:0	4	->
water	22:57	0:0	4	frame_size
op	22:67	0:0	4	+
water	22:68	0:0	4	2
water	22:69	0:0	4	)
op	22:71	0:0	4	>>
water	22:74	0:0	4	4
water	22:75	0:0	4	)
water	22:76	0:0	4	)
op	22:78	0:0	4	<<
water	22:81	0:0	4	1
water	22:82	0:0	4	;
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	crc_inv
op	23:18	0:0	4	[
water	23:19	0:0	4	1
op	23:20	0:0	4	]
op	23:22	0:0	4	=
call	23:24	23:88	4	pow_poly
arg	23:33	23:50	5	(CRC16_POLY>>1)
water	23:33	0:0	6	(
water	23:34	0:0	6	CRC16_POLY
op	23:45	0:0	6	>>
water	23:48	0:0	6	1
water	23:49	0:0	6	)
arg	23:52	23:76	5	(8*frame_size_58)-16
water	23:52	0:0	6	(
water	23:53	0:0	6	8
op	23:55	0:0	6	*
water	23:57	0:0	6	frame_size_58
water	23:70	0:0	6	)
op	23:72	0:0	6	-
water	23:74	0:0	6	16
arg	23:78	23:88	5	CRC16_POLY
water	23:78	0:0	6	CRC16_POLY
water	23:89	0:0	4	;
water	24:4	0:0	4	}
if	26:4	30:4	2	(CONFIG_AC3_FIXED_ENCODER && s -> fixed_point)
cond	26:8	26:39	3	CONFIG_AC3_FIXED_ENCODER && s -> fixed_point
water	26:8	0:0	4	CONFIG_AC3_FIXED_ENCODER
op	26:33	0:0	4	&&
water	26:36	0:0	4	s
op	26:37	0:0	4	->
water	26:39	0:0	4	fixed_point
stmts	26:52	30:4	3	
water	26:52	0:0	4	{
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	mdct_end
op	27:40	0:0	4	=
water	27:42	0:0	4	ff_ac3_fixed_mdct_end
water	27:63	0:0	4	;
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	mdct_init
op	28:40	0:0	4	=
water	28:42	0:0	4	ff_ac3_fixed_mdct_init
water	28:64	0:0	4	;
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	allocate_sample_buffers
op	29:40	0:0	4	=
water	29:42	0:0	4	ff_ac3_fixed_allocate_sample_buffers
water	29:78	0:0	4	;
water	30:4	0:0	4	}
else	30:6	34:4	2
stmts	30:11	34:4	3	
if	30:11	34:4	4	(CONFIG_AC3_ENCODER || CONFIG_EAC3_ENCODER)
cond	30:15	30:37	5	CONFIG_AC3_ENCODER || CONFIG_EAC3_ENCODER
water	30:15	0:0	6	CONFIG_AC3_ENCODER
op	30:34	0:0	6	||
water	30:37	0:0	6	CONFIG_EAC3_ENCODER
stmts	30:58	34:4	5	
water	30:58	0:0	6	{
water	31:8	0:0	6	s
op	31:9	0:0	6	->
water	31:11	0:0	6	mdct_end
op	31:40	0:0	6	=
water	31:42	0:0	6	ff_ac3_float_mdct_end
water	31:63	0:0	6	;
water	32:8	0:0	6	s
op	32:9	0:0	6	->
water	32:11	0:0	6	mdct_init
op	32:40	0:0	6	=
water	32:42	0:0	6	ff_ac3_float_mdct_init
water	32:64	0:0	6	;
water	33:8	0:0	6	s
op	33:9	0:0	6	->
water	33:11	0:0	6	allocate_sample_buffers
op	33:40	0:0	6	=
water	33:42	0:0	6	ff_ac3_float_allocate_sample_buffers
water	33:78	0:0	6	;
water	34:4	0:0	6	}
if	35:4	36:60	2	(CONFIG_EAC3_ENCODER && s -> eac3)
cond	35:8	35:34	3	CONFIG_EAC3_ENCODER && s -> eac3
water	35:8	0:0	4	CONFIG_EAC3_ENCODER
op	35:28	0:0	4	&&
water	35:31	0:0	4	s
op	35:32	0:0	4	->
water	35:34	0:0	4	eac3
stmts	36:8	36:60	3	
water	36:8	0:0	4	s
op	36:9	0:0	4	->
water	36:11	0:0	4	output_frame_header
op	36:31	0:0	4	=
water	36:33	0:0	4	ff_eac3_output_frame_header
water	36:60	0:0	4	;
else	37:4	38:56	2
stmts	38:8	38:56	3	
water	38:8	0:0	4	s
op	38:9	0:0	4	->
water	38:11	0:0	4	output_frame_header
op	38:31	0:0	4	=
water	38:33	0:0	4	ac3_output_frame_header
water	38:56	0:0	4	;
call	39:4	39:19	2	set_bandwidth
arg	39:18	39:19	3	s
water	39:18	0:0	4	s
water	39:20	0:0	2	;
call	40:4	40:19	2	exponent_init
arg	40:18	40:19	3	s
water	40:18	0:0	4	s
water	40:20	0:0	2	;
call	41:4	41:20	2	bit_alloc_init
arg	41:19	41:20	3	s
water	41:19	0:0	4	s
water	41:21	0:0	2	;
water	42:4	0:0	2	ret
op	42:8	0:0	2	=
call	42:10	42:24	2	s->mdct_init
arg	42:23	42:24	3	s
water	42:23	0:0	4	s
water	42:25	0:0	2	;
if	43:4	44:22	2	(ret)
cond	43:8	43:8	3	ret
water	43:8	0:0	4	ret
stmts	44:8	44:22	3	
goto	44:8	44:22	4	init_fail
water	44:13	0:0	5	init_fail
water	45:4	0:0	2	ret
op	45:8	0:0	2	=
call	45:10	45:28	2	allocate_buffers
arg	45:27	45:28	3	s
water	45:27	0:0	4	s
water	45:29	0:0	2	;
if	46:4	47:22	2	(ret)
cond	46:8	46:8	3	ret
water	46:8	0:0	4	ret
stmts	47:8	47:22	3	
goto	47:8	47:22	4	init_fail
water	47:13	0:0	5	init_fail
call	48:4	48:29	2	ff_audiodsp_init
arg	48:21	48:29	3	&s->adsp
op	48:21	0:0	4	&
water	48:22	0:0	4	s
op	48:23	0:0	4	->
water	48:25	0:0	4	adsp
water	48:30	0:0	2	;
call	49:4	49:34	2	ff_me_cmp_init
arg	49:19	49:27	3	&s->mecc
op	49:19	0:0	4	&
water	49:20	0:0	4	s
op	49:21	0:0	4	->
water	49:23	0:0	4	mecc
arg	49:29	49:34	3	avctx
water	49:29	0:0	4	avctx
water	49:35	0:0	2	;
call	50:4	50:68	2	ff_ac3dsp_init
arg	50:19	50:29	3	&s->ac3dsp
op	50:19	0:0	4	&
water	50:20	0:0	4	s
op	50:21	0:0	4	->
water	50:23	0:0	4	ac3dsp
arg	50:31	50:68	3	avctx->flags&AV_CODEC_FLAG_BITEXACT
water	50:31	0:0	4	avctx
op	50:36	0:0	4	->
water	50:38	0:0	4	flags
op	50:44	0:0	4	&
water	50:46	0:0	4	AV_CODEC_FLAG_BITEXACT
water	50:69	0:0	2	;
call	51:4	51:20	2	dprint_options
arg	51:19	51:20	3	s
water	51:19	0:0	4	s
water	51:21	0:0	2	;
return	52:4	52:12	2	0
water	52:11	0:0	3	0
label	53:0	53:9	2	init_fail :
call	54:4	54:29	2	ff_ac3_encode_close
arg	54:24	54:29	3	avctx
water	54:24	0:0	4	avctx
water	54:30	0:0	2	;
return	55:4	55:14	2	ret
water	55:11	0:0	3	ret
