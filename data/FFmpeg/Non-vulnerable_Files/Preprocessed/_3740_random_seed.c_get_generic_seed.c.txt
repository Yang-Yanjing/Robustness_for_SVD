func	1:0	37:0	0	static uint32_t	get_generic_seed
params	1:32	0:0	1	
param	1:33	1:37	2	void
stmnts	0:0	36:49	1	
decl	3:4	3:20	2	uint8_t	tmp[120]
decl	4:4	4:34	2	struct AVSHA	*sha
op	4:22	0:0	2	=
water	4:24	0:0	2	(
water	4:25	0:0	2	void
op	4:29	0:0	2	*
water	4:30	0:0	2	)
water	4:31	0:0	2	tmp
decl	5:4	5:23	2	clock_t	last_t
op	5:20	0:0	2	=
water	5:22	0:0	2	0
water	6:4	0:0	2	static
water	6:11	0:0	2	uint64_t
water	6:20	0:0	2	i
op	6:22	0:0	2	=
water	6:24	0:0	2	0
water	6:25	0:0	2	;
water	7:4	0:0	2	static
water	7:11	0:0	2	uint32_t
water	7:20	0:0	2	buffer
op	7:26	0:0	2	[
water	7:27	0:0	2	512
op	7:30	0:0	2	]
op	7:32	0:0	2	=
water	7:34	0:0	2	{
water	7:36	0:0	2	0
water	7:38	0:0	2	}
water	7:39	0:0	2	;
decl	8:4	8:28	2	unsigned char	digest[20]
decl	9:4	9:23	2	uint64_t	last_i
op	9:20	0:0	2	=
water	9:22	0:0	2	i
call	10:4	10:41	2	av_assert0
arg	10:15	10:41	3	sizeof(tmp)>=av_sha_size
op	10:15	0:0	4	sizeof
water	10:21	0:0	4	(
water	10:22	0:0	4	tmp
water	10:25	0:0	4	)
op	10:27	0:0	4	>=
water	10:30	0:0	4	av_sha_size
water	10:42	0:0	2	;
if	11:4	14:4	2	(TEST)
cond	11:7	11:7	3	TEST
water	11:7	0:0	4	TEST
stmts	11:12	14:4	3	
water	11:12	0:0	4	{
call	12:8	12:40	4	memset
arg	12:15	12:21	5	buffer
water	12:15	0:0	6	buffer
arg	12:23	12:24	5	0
water	12:23	0:0	6	0
arg	12:26	12:40	5	sizeof(buffer)
op	12:26	0:0	6	sizeof
water	12:32	0:0	6	(
water	12:33	0:0	6	buffer
water	12:39	0:0	6	)
water	12:41	0:0	4	;
water	13:8	0:0	4	last_i
op	13:15	0:0	4	=
water	13:17	0:0	4	i
op	13:19	0:0	4	=
water	13:21	0:0	4	0
water	13:22	0:0	4	;
water	14:4	0:0	4	}
else	14:5	19:4	2
stmts	14:9	19:4	3	
water	14:9	0:0	4	{
water	16:8	0:0	4	buffer
op	16:14	0:0	4	[
water	16:15	0:0	4	13
op	16:17	0:0	4	]
op	16:19	0:0	4	^=
call	16:22	16:35	4	AV_READ_TIME
water	16:36	0:0	4	;
water	17:8	0:0	4	buffer
op	17:14	0:0	4	[
water	17:15	0:0	4	41
op	17:17	0:0	4	]
op	17:19	0:0	4	^=
call	17:22	17:35	4	AV_READ_TIME
op	17:36	0:0	4	>>
water	17:38	0:0	4	32
water	17:40	0:0	4	;
water	19:4	0:0	4	}
for	20:4	30:4	2	(;;)
forinit	20:9	20:9	3	;
water	20:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	20:13	30:4	3	
water	20:13	0:0	4	{
decl	21:8	21:27	4	clock_t	t
op	21:18	0:0	4	=
call	21:20	21:26	5	clock
if	22:8	24:8	4	(last_t == t)
cond	22:12	22:22	5	last_t == t
water	22:12	0:0	6	last_t
op	22:19	0:0	6	==
water	22:22	0:0	6	t
stmts	22:25	24:8	5	
water	22:25	0:0	6	{
water	23:12	0:0	6	buffer
op	23:18	0:0	6	[
water	23:19	0:0	6	i
op	23:21	0:0	6	&
water	23:23	0:0	6	511
op	23:26	0:0	6	]
op	23:27	0:0	6	++
water	23:29	0:0	6	;
water	24:8	0:0	6	}
else	24:10	28:8	4
stmts	24:15	28:8	5	
water	24:15	0:0	6	{
water	25:12	0:0	6	buffer
op	25:18	0:0	6	[
op	25:19	0:0	6	++
water	25:21	0:0	6	i
op	25:23	0:0	6	&
water	25:25	0:0	6	511
op	25:28	0:0	6	]
op	25:30	0:0	6	+=
water	25:33	0:0	6	(
water	25:34	0:0	6	t
op	25:36	0:0	6	-
water	25:38	0:0	6	last_t
water	25:44	0:0	6	)
op	25:46	0:0	6	%
water	25:48	0:0	6	3294638521
water	25:58	0:0	6	U
water	25:59	0:0	6	;
if	26:12	27:21	6	(last_i && i - last_i > 4 || i - last_i > 64 || TEST && i - last_i > 8)
cond	26:16	26:84	7	last_i && i - last_i > 4 || i - last_i > 64 || TEST && i - last_i > 8
water	26:16	0:0	8	last_i
op	26:23	0:0	8	&&
water	26:26	0:0	8	i
op	26:28	0:0	8	-
water	26:30	0:0	8	last_i
op	26:37	0:0	8	>
water	26:39	0:0	8	4
op	26:41	0:0	8	||
water	26:44	0:0	8	i
op	26:46	0:0	8	-
water	26:48	0:0	8	last_i
op	26:55	0:0	8	>
water	26:57	0:0	8	64
op	26:60	0:0	8	||
water	26:63	0:0	8	TEST
op	26:68	0:0	8	&&
water	26:71	0:0	8	i
op	26:73	0:0	8	-
water	26:75	0:0	8	last_i
op	26:82	0:0	8	>
water	26:84	0:0	8	8
stmts	27:16	27:21	7	
break	27:16	27:21	8	
water	28:8	0:0	6	}
water	29:8	0:0	4	last_t
op	29:15	0:0	4	=
water	29:17	0:0	4	t
water	29:18	0:0	4	;
water	30:4	0:0	4	}
if	31:4	32:33	2	(TEST)
cond	31:7	31:7	3	TEST
water	31:7	0:0	4	TEST
stmts	32:8	32:33	3	
water	32:8	0:0	4	buffer
op	32:14	0:0	4	[
water	32:15	0:0	4	0
op	32:16	0:0	4	]
op	32:18	0:0	4	=
water	32:20	0:0	4	buffer
op	32:26	0:0	4	[
water	32:27	0:0	4	1
op	32:28	0:0	4	]
op	32:30	0:0	4	=
water	32:32	0:0	4	0
water	32:33	0:0	4	;
call	33:4	33:24	2	av_sha_init
arg	33:16	33:19	3	sha
water	33:16	0:0	4	sha
arg	33:21	33:24	3	160
water	33:21	0:0	4	160
water	33:25	0:0	2	;
call	34:4	34:62	2	av_sha_update
arg	34:18	34:21	3	sha
water	34:18	0:0	4	sha
arg	34:23	34:46	3	(constuint8_t*)buffer
water	34:23	0:0	4	(
water	34:24	0:0	4	const
water	34:30	0:0	4	uint8_t
op	34:38	0:0	4	*
water	34:39	0:0	4	)
water	34:40	0:0	4	buffer
arg	34:48	34:62	3	sizeof(buffer)
op	34:48	0:0	4	sizeof
water	34:54	0:0	4	(
water	34:55	0:0	4	buffer
water	34:61	0:0	4	)
water	34:63	0:0	2	;
call	35:4	35:28	2	av_sha_final
arg	35:17	35:20	3	sha
water	35:17	0:0	4	sha
arg	35:22	35:28	3	digest
water	35:22	0:0	4	digest
water	35:29	0:0	2	;
return	36:4	36:49	2	AV_RB32(digest)+AV_RB32(digest+16)
call	36:11	36:25	3	AV_RB32
arg	36:19	36:25	4	digest
water	36:19	0:0	5	digest
op	36:27	0:0	3	+
call	36:29	36:48	3	AV_RB32
arg	36:37	36:48	4	digest+16
water	36:37	0:0	5	digest
op	36:44	0:0	5	+
water	36:46	0:0	5	16
