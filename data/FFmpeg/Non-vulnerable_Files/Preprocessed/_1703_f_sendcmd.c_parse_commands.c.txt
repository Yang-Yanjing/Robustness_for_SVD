func	1:0	42:0	0	static int	parse_commands
params	1:25	0:0	1	
param	1:26	1:40	2	Command * *	cmds
param	1:42	1:54	2	int *	nb_cmds
param	1:56	1:74	2	int	interval_count
param	2:26	2:42	2	const char * *	buf
param	2:44	2:57	2	void *	log_ctx
stmnts	0:0	41:12	1	
decl	4:4	4:21	2	int	cmd_count
op	4:18	0:0	2	=
water	4:20	0:0	2	0
decl	5:4	5:18	2	int	ret
water	5:11	0:0	2	,
decl	5:4	5:18	2	int	n
op	5:15	0:0	2	=
water	5:17	0:0	2	0
decl	6:4	6:17	2	AVBPrint	pbuf
op	7:4	0:0	2	*
water	7:5	0:0	2	cmds
op	7:10	0:0	2	=
water	7:12	0:0	2	NULL
water	7:16	0:0	2	;
op	8:4	0:0	2	*
water	8:5	0:0	2	nb_cmds
op	8:13	0:0	2	=
water	8:15	0:0	2	0
water	8:16	0:0	2	;
while	9:4	40:4	2	(* * buf)
cond	9:11	9:13	3	* * buf
op	9:11	0:0	4	*
op	9:12	0:0	4	*
water	9:13	0:0	4	buf
stmts	9:18	40:4	3	
water	9:18	0:0	4	{
decl	10:8	10:19	4	Command	cmd
if	11:8	12:22	4	(( ret =parse_command (& cmd ,cmd_count ,interval_count ,buf ,log_ctx ) ) < 0)
cond	11:12	11:83	5	( ret =parse_command (& cmd ,cmd_count ,interval_count ,buf ,log_ctx ) ) < 0
water	11:12	0:0	6	(
water	11:13	0:0	6	ret
op	11:17	0:0	6	=
call	11:19	11:78	6	parse_command
arg	11:33	11:37	7	&cmd
op	11:33	0:0	8	&
water	11:34	0:0	8	cmd
arg	11:39	11:48	7	cmd_count
water	11:39	0:0	8	cmd_count
arg	11:50	11:64	7	interval_count
water	11:50	0:0	8	interval_count
arg	11:66	11:69	7	buf
water	11:66	0:0	8	buf
arg	11:71	11:78	7	log_ctx
water	11:71	0:0	8	log_ctx
water	11:79	0:0	6	)
op	11:81	0:0	6	<
water	11:83	0:0	6	0
stmts	12:12	12:22	5	
return	12:12	12:22	6	ret
water	12:19	0:0	7	ret
water	13:8	0:0	4	cmd_count
op	13:17	0:0	4	++
water	13:19	0:0	4	;
if	15:8	23:8	4	(* nb_cmds == n)
cond	15:12	15:24	5	* nb_cmds == n
op	15:12	0:0	6	*
water	15:13	0:0	6	nb_cmds
op	15:21	0:0	6	==
water	15:24	0:0	6	n
stmts	15:27	23:8	5	
water	15:27	0:0	6	{
water	16:12	0:0	6	n
op	16:14	0:0	6	=
call	16:16	16:29	6	FFMAX
arg	16:22	16:24	7	16
water	16:22	0:0	8	16
arg	16:26	16:29	7	2*n
water	16:26	0:0	8	2
op	16:27	0:0	8	*
water	16:28	0:0	8	n
water	16:30	0:0	6	;
op	17:12	0:0	6	*
water	17:13	0:0	6	cmds
op	17:18	0:0	6	=
call	17:20	17:60	6	av_realloc_f
arg	17:33	17:38	7	*cmds
op	17:33	0:0	8	*
water	17:34	0:0	8	cmds
arg	17:40	17:41	7	n
water	17:40	0:0	8	n
arg	17:43	17:60	7	2*sizeof(Command)
water	17:43	0:0	8	2
op	17:44	0:0	8	*
op	17:45	0:0	8	sizeof
water	17:51	0:0	8	(
water	17:52	0:0	8	Command
water	17:59	0:0	8	)
water	17:61	0:0	6	;
if	18:12	22:12	6	(! * cmds)
cond	18:16	18:18	7	! * cmds
op	18:16	0:0	8	!
op	18:17	0:0	8	*
water	18:18	0:0	8	cmds
stmts	18:24	22:12	7	
water	18:24	0:0	8	{
call	19:16	20:63	8	av_log
arg	19:23	19:30	9	log_ctx
water	19:23	0:0	10	log_ctx
arg	19:32	19:44	9	AV_LOG_ERROR
water	19:32	0:0	10	AV_LOG_ERROR
arg	20:23	20:63	9	"Could not (re)allocate command array\n"
water	20:23	0:0	10	"Could not (re)allocate command array\n"
water	20:64	0:0	8	;
return	21:16	21:38	8	AVERROR(ENOMEM)
call	21:23	21:37	9	AVERROR
arg	21:31	21:37	10	ENOMEM
water	21:31	0:0	11	ENOMEM
water	22:12	0:0	8	}
water	23:8	0:0	6	}
water	24:8	0:0	4	(
op	24:9	0:0	4	*
water	24:10	0:0	4	cmds
water	24:14	0:0	4	)
op	24:15	0:0	4	[
water	24:16	0:0	4	(
op	24:17	0:0	4	*
water	24:18	0:0	4	nb_cmds
water	24:25	0:0	4	)
op	24:26	0:0	4	++
op	24:28	0:0	4	]
op	24:30	0:0	4	=
water	24:32	0:0	4	cmd
water	24:35	0:0	4	;
op	25:8	0:0	4	*
water	25:9	0:0	4	buf
op	25:13	0:0	4	+=
call	25:16	25:35	4	strspn
arg	25:23	25:27	5	*buf
op	25:23	0:0	6	*
water	25:24	0:0	6	buf
arg	25:29	25:35	5	SPACES
water	25:29	0:0	6	SPACES
water	25:36	0:0	4	;
if	26:8	35:8	4	(* * buf && * * buf != ';' && * * buf != ',')
cond	26:12	26:46	5	* * buf && * * buf != ';' && * * buf != ','
op	26:12	0:0	6	*
op	26:13	0:0	6	*
water	26:14	0:0	6	buf
op	26:18	0:0	6	&&
op	26:21	0:0	6	*
op	26:22	0:0	6	*
water	26:23	0:0	6	buf
op	26:27	0:0	6	!=
water	26:30	0:0	6	';'
op	26:34	0:0	6	&&
op	26:37	0:0	6	*
op	26:38	0:0	6	*
water	26:39	0:0	6	buf
op	26:43	0:0	6	!=
water	26:46	0:0	6	','
stmts	26:51	35:8	5	
water	26:51	0:0	6	{
call	27:12	30:44	6	av_log
arg	27:19	27:26	7	log_ctx
water	27:19	0:0	8	log_ctx
arg	27:28	27:40	7	AV_LOG_ERROR
water	27:28	0:0	8	AV_LOG_ERROR
arg	28:19	29:51	7	"Missing separator or extraneous data found at the end of ""interval #%d, in command #%d\n"
water	28:19	0:0	8	"Missing separator or extraneous data found at the end of "
water	29:19	0:0	8	"interval #%d, in command #%d\n"
arg	30:19	30:33	7	interval_count
water	30:19	0:0	8	interval_count
arg	30:35	30:44	7	cmd_count
water	30:35	0:0	8	cmd_count
water	30:45	0:0	6	;
call	31:12	33:93	6	av_log
arg	31:19	31:26	7	log_ctx
water	31:19	0:0	8	log_ctx
arg	31:28	31:40	7	AV_LOG_ERROR
water	31:28	0:0	8	AV_LOG_ERROR
arg	32:19	32:84	7	"Command was parsed as: flags:[%s] target:%s command:%s arg:%s\n"
water	32:19	0:0	8	"Command was parsed as: flags:[%s] target:%s command:%s arg:%s\n"
arg	33:19	33:59	7	make_command_flags_str(&pbuf,cmd.flags)
call	33:19	33:58	8	make_command_flags_str
arg	33:42	33:47	9	&pbuf
op	33:42	0:0	10	&
water	33:43	0:0	10	pbuf
arg	33:49	33:58	9	cmd.flags
water	33:49	0:0	10	cmd
op	33:52	0:0	10	.
water	33:53	0:0	10	flags
arg	33:61	33:71	7	cmd.target
water	33:61	0:0	8	cmd
op	33:64	0:0	8	.
water	33:65	0:0	8	target
arg	33:73	33:84	7	cmd.command
water	33:73	0:0	8	cmd
op	33:76	0:0	8	.
water	33:77	0:0	8	command
arg	33:86	33:93	7	cmd.arg
water	33:86	0:0	8	cmd
op	33:89	0:0	8	.
water	33:90	0:0	8	arg
water	33:94	0:0	6	;
return	34:12	34:34	6	AVERROR(EINVAL)
call	34:19	34:33	7	AVERROR
arg	34:27	34:33	8	EINVAL
water	34:27	0:0	9	EINVAL
water	35:8	0:0	6	}
if	36:8	37:17	4	(* * buf == ';')
cond	36:12	36:21	5	* * buf == ';'
op	36:12	0:0	6	*
op	36:13	0:0	6	*
water	36:14	0:0	6	buf
op	36:18	0:0	6	==
water	36:21	0:0	6	';'
stmts	37:12	37:17	5	
break	37:12	37:17	6	
if	38:8	39:20	4	(* * buf == ',')
cond	38:12	38:21	5	* * buf == ','
op	38:12	0:0	6	*
op	38:13	0:0	6	*
water	38:14	0:0	6	buf
op	38:18	0:0	6	==
water	38:21	0:0	6	','
stmts	39:12	39:20	5	
water	39:12	0:0	6	(
op	39:13	0:0	6	*
water	39:14	0:0	6	buf
water	39:17	0:0	6	)
op	39:18	0:0	6	++
water	39:20	0:0	6	;
water	40:4	0:0	4	}
return	41:4	41:12	2	0
water	41:11	0:0	3	0
