func	1:0	56:0	0	static int	av_buffersrc_add_frame_internal
params	1:42	0:0	1	
param	1:43	1:63	2	AVFilterContext *	ctx
param	2:43	2:57	2	AVFrame *	frame
param	2:59	2:68	2	int	flags
stmnts	0:0	55:12	1	
decl	4:4	4:38	2	BufferSourceContext	*s
op	4:27	0:0	2	=
water	4:29	0:0	2	ctx
op	4:32	0:0	2	->
water	4:34	0:0	2	priv
decl	5:4	5:17	2	AVFrame	*copy
decl	6:4	6:23	2	int	refcounted
water	6:18	0:0	2	,
decl	6:4	6:23	2	int	ret
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	nb_failed_requests
op	7:26	0:0	2	=
water	7:28	0:0	2	0
water	7:29	0:0	2	;
if	8:4	11:4	2	(! frame)
cond	8:8	8:9	3	! frame
op	8:8	0:0	4	!
water	8:9	0:0	4	frame
stmts	8:16	11:4	3	
water	8:16	0:0	4	{
water	9:8	0:0	4	s
op	9:9	0:0	4	->
water	9:11	0:0	4	eof
op	9:15	0:0	4	=
water	9:17	0:0	4	1
water	9:18	0:0	4	;
return	10:8	10:16	4	0
water	10:15	0:0	5	0
water	11:4	0:0	4	}
else	11:6	12:30	2
stmts	11:11	12:30	3	
if	11:11	12:30	4	(s -> eof)
cond	11:15	11:18	5	s -> eof
water	11:15	0:0	6	s
op	11:16	0:0	6	->
water	11:18	0:0	6	eof
stmts	12:8	12:30	5	
return	12:8	12:30	6	AVERROR(EINVAL)
call	12:15	12:29	7	AVERROR
arg	12:23	12:29	8	EINVAL
water	12:23	0:0	9	EINVAL
water	13:4	0:0	2	refcounted
op	13:15	0:0	2	=
op	13:17	0:0	2	!
op	13:18	0:0	2	!
water	13:19	0:0	2	frame
op	13:24	0:0	2	->
water	13:26	0:0	2	buf
op	13:29	0:0	2	[
water	13:30	0:0	2	0
op	13:31	0:0	2	]
water	13:32	0:0	2	;
if	14:4	30:4	2	(! ( flags & AV_BUFFERSRC_FLAG_NO_CHECK_FORMAT ))
cond	14:8	14:51	3	! ( flags & AV_BUFFERSRC_FLAG_NO_CHECK_FORMAT )
op	14:8	0:0	4	!
water	14:9	0:0	4	(
water	14:10	0:0	4	flags
op	14:16	0:0	4	&
water	14:18	0:0	4	AV_BUFFERSRC_FLAG_NO_CHECK_FORMAT
water	14:51	0:0	4	)
stmts	14:54	30:4	3	
water	14:54	0:0	4	{
switch	15:4	29:4	4	(ctx -> outputs [ 0 ] -> type)
cond	15:12	15:29	5	ctx -> outputs [ 0 ] -> type
water	15:12	0:0	6	ctx
op	15:15	0:0	6	->
water	15:17	0:0	6	outputs
op	15:24	0:0	6	[
water	15:25	0:0	6	0
op	15:26	0:0	6	]
op	15:27	0:0	6	->
water	15:29	0:0	6	type
stmts	15:35	29:4	5	
water	15:35	0:0	6	{
label	16:4	16:27	6	case AVMEDIA_TYPE_VIDEO :
call	17:8	18:46	6	CHECK_VIDEO_PARAM_CHANGE
arg	17:33	17:36	7	ctx
water	17:33	0:0	8	ctx
arg	17:38	17:39	7	s
water	17:38	0:0	8	s
arg	17:41	17:53	7	frame->width
water	17:41	0:0	8	frame
op	17:46	0:0	8	->
water	17:48	0:0	8	width
arg	17:55	17:68	7	frame->height
water	17:55	0:0	8	frame
op	17:60	0:0	8	->
water	17:62	0:0	8	height
arg	18:33	18:46	7	frame->format
water	18:33	0:0	8	frame
op	18:38	0:0	8	->
water	18:40	0:0	8	format
water	18:47	0:0	6	;
break	19:8	19:13	6	
label	20:4	20:27	6	case AVMEDIA_TYPE_AUDIO :
if	22:8	23:53	6	(! frame -> channel_layout)
cond	22:12	22:20	7	! frame -> channel_layout
op	22:12	0:0	8	!
water	22:13	0:0	8	frame
op	22:18	0:0	8	->
water	22:20	0:0	8	channel_layout
stmts	23:12	23:53	7	
water	23:12	0:0	8	frame
op	23:17	0:0	8	->
water	23:19	0:0	8	channel_layout
op	23:34	0:0	8	=
water	23:36	0:0	8	s
op	23:37	0:0	8	->
water	23:39	0:0	8	channel_layout
water	23:53	0:0	8	;
call	24:8	25:76	6	CHECK_AUDIO_PARAM_CHANGE
arg	24:33	24:36	7	ctx
water	24:33	0:0	8	ctx
arg	24:38	24:39	7	s
water	24:38	0:0	8	s
arg	24:41	24:59	7	frame->sample_rate
water	24:41	0:0	8	frame
op	24:46	0:0	8	->
water	24:48	0:0	8	sample_rate
arg	24:61	24:82	7	frame->channel_layout
water	24:61	0:0	8	frame
op	24:66	0:0	8	->
water	24:68	0:0	8	channel_layout
arg	25:33	25:61	7	av_frame_get_channels(frame)
call	25:33	25:60	8	av_frame_get_channels
arg	25:55	25:60	9	frame
water	25:55	0:0	10	frame
arg	25:63	25:76	7	frame->format
water	25:63	0:0	8	frame
op	25:68	0:0	8	->
water	25:70	0:0	8	format
water	25:77	0:0	6	;
break	26:8	26:13	6	
label	27:4	27:11	6	default :
return	28:8	28:30	6	AVERROR(EINVAL)
call	28:15	28:29	7	AVERROR
arg	28:23	28:29	8	EINVAL
water	28:23	0:0	9	EINVAL
water	29:4	0:0	6	}
water	30:4	0:0	4	}
if	31:4	34:18	2	(!av_fifo_space (s -> fifo ) && ( ret =av_fifo_realloc2 (s -> fifo ,av_fifo_size (s -> fifo ) + sizeof ( copy ) ) ) < 0)
cond	31:8	33:58	3	!av_fifo_space (s -> fifo ) && ( ret =av_fifo_realloc2 (s -> fifo ,av_fifo_size (s -> fifo ) + sizeof ( copy ) ) ) < 0
op	31:8	0:0	4	!
call	31:9	31:30	4	av_fifo_space
arg	31:23	31:30	5	s->fifo
water	31:23	0:0	6	s
op	31:24	0:0	6	->
water	31:26	0:0	6	fifo
op	31:32	0:0	4	&&
water	32:8	0:0	4	(
water	32:9	0:0	4	ret
op	32:13	0:0	4	=
call	32:15	33:53	4	av_fifo_realloc2
arg	32:32	32:39	5	s->fifo
water	32:32	0:0	6	s
op	32:33	0:0	6	->
water	32:35	0:0	6	fifo
arg	32:41	33:53	5	av_fifo_size(s->fifo)+sizeof(copy)
call	32:41	32:61	6	av_fifo_size
arg	32:54	32:61	7	s->fifo
water	32:54	0:0	8	s
op	32:55	0:0	8	->
water	32:57	0:0	8	fifo
op	32:63	0:0	6	+
op	33:41	0:0	6	sizeof
water	33:47	0:0	6	(
water	33:48	0:0	6	copy
water	33:52	0:0	6	)
water	33:54	0:0	4	)
op	33:56	0:0	4	<
water	33:58	0:0	4	0
stmts	34:8	34:18	3	
return	34:8	34:18	4	ret
water	34:15	0:0	5	ret
if	35:4	36:30	2	(! ( copy =av_frame_alloc ( ) ))
cond	35:8	35:33	3	! ( copy =av_frame_alloc ( ) )
op	35:8	0:0	4	!
water	35:9	0:0	4	(
water	35:10	0:0	4	copy
op	35:15	0:0	4	=
call	35:17	35:32	4	av_frame_alloc
water	35:33	0:0	4	)
stmts	36:8	36:30	3	
return	36:8	36:30	4	AVERROR(ENOMEM)
call	36:15	36:29	5	AVERROR
arg	36:23	36:29	6	ENOMEM
water	36:23	0:0	7	ENOMEM
if	37:4	39:4	2	(refcounted)
cond	37:8	37:8	3	refcounted
water	37:8	0:0	4	refcounted
stmts	37:20	39:4	3	
water	37:20	0:0	4	{
call	38:8	38:37	4	av_frame_move_ref
arg	38:26	38:30	5	copy
water	38:26	0:0	6	copy
arg	38:32	38:37	5	frame
water	38:32	0:0	6	frame
water	38:38	0:0	4	;
water	39:4	0:0	4	}
else	39:6	45:4	2
stmts	39:11	45:4	3	
water	39:11	0:0	4	{
water	40:8	0:0	4	ret
op	40:12	0:0	4	=
call	40:14	40:38	4	av_frame_ref
arg	40:27	40:31	5	copy
water	40:27	0:0	6	copy
arg	40:33	40:38	5	frame
water	40:33	0:0	6	frame
water	40:39	0:0	4	;
if	41:8	44:8	4	(ret < 0)
cond	41:12	41:18	5	ret < 0
water	41:12	0:0	6	ret
op	41:16	0:0	6	<
water	41:18	0:0	6	0
stmts	41:21	44:8	5	
water	41:21	0:0	6	{
call	42:12	42:31	6	av_frame_free
arg	42:26	42:31	7	&copy
op	42:26	0:0	8	&
water	42:27	0:0	8	copy
water	42:32	0:0	6	;
return	43:12	43:22	6	ret
water	43:19	0:0	7	ret
water	44:8	0:0	6	}
water	45:4	0:0	4	}
if	46:4	51:4	2	(( ret =av_fifo_generic_write (s -> fifo ,& copy ,sizeof ( copy ) ,NULL ) ) < 0)
cond	46:8	46:76	3	( ret =av_fifo_generic_write (s -> fifo ,& copy ,sizeof ( copy ) ,NULL ) ) < 0
water	46:8	0:0	4	(
water	46:9	0:0	4	ret
op	46:13	0:0	4	=
call	46:15	46:71	4	av_fifo_generic_write
arg	46:37	46:44	5	s->fifo
water	46:37	0:0	6	s
op	46:38	0:0	6	->
water	46:40	0:0	6	fifo
arg	46:46	46:51	5	&copy
op	46:46	0:0	6	&
water	46:47	0:0	6	copy
arg	46:53	46:65	5	sizeof(copy)
op	46:53	0:0	6	sizeof
water	46:59	0:0	6	(
water	46:60	0:0	6	copy
water	46:64	0:0	6	)
arg	46:67	46:71	5	NULL
water	46:67	0:0	6	NULL
water	46:72	0:0	4	)
op	46:74	0:0	4	<
water	46:76	0:0	4	0
stmts	46:79	51:4	3	
water	46:79	0:0	4	{
if	47:8	48:42	4	(refcounted)
cond	47:12	47:12	5	refcounted
water	47:12	0:0	6	refcounted
stmts	48:12	48:42	5	
call	48:12	48:41	6	av_frame_move_ref
arg	48:30	48:35	7	frame
water	48:30	0:0	8	frame
arg	48:37	48:41	7	copy
water	48:37	0:0	8	copy
water	48:42	0:0	6	;
call	49:8	49:27	4	av_frame_free
arg	49:22	49:27	5	&copy
op	49:22	0:0	6	&
water	49:23	0:0	6	copy
water	49:28	0:0	4	;
return	50:8	50:18	4	ret
water	50:15	0:0	5	ret
water	51:4	0:0	4	}
if	52:4	54:22	2	(( flags & AV_BUFFERSRC_FLAG_PUSH ))
cond	52:8	52:39	3	( flags & AV_BUFFERSRC_FLAG_PUSH )
water	52:8	0:0	4	(
water	52:9	0:0	4	flags
op	52:15	0:0	4	&
water	52:17	0:0	4	AV_BUFFERSRC_FLAG_PUSH
water	52:39	0:0	4	)
stmts	53:8	54:22	3	
if	53:8	54:22	4	(( ret = ctx -> output_pads [ 0 ] .request_frame (ctx -> outputs [ 0 ] ) ) < 0)
cond	53:12	53:73	5	( ret = ctx -> output_pads [ 0 ] .request_frame (ctx -> outputs [ 0 ] ) ) < 0
water	53:12	0:0	6	(
water	53:13	0:0	6	ret
op	53:17	0:0	6	=
water	53:19	0:0	6	ctx
op	53:22	0:0	6	->
water	53:24	0:0	6	output_pads
op	53:35	0:0	6	[
water	53:36	0:0	6	0
op	53:37	0:0	6	]
op	53:38	0:0	6	.
call	53:39	53:68	6	request_frame
arg	53:53	53:68	7	ctx->outputs[0]
water	53:53	0:0	8	ctx
op	53:56	0:0	8	->
water	53:58	0:0	8	outputs
op	53:65	0:0	8	[
water	53:66	0:0	8	0
op	53:67	0:0	8	]
water	53:69	0:0	6	)
op	53:71	0:0	6	<
water	53:73	0:0	6	0
stmts	54:12	54:22	5	
return	54:12	54:22	6	ret
water	54:19	0:0	7	ret
return	55:4	55:12	2	0
water	55:11	0:0	3	0
