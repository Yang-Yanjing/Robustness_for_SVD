func	1:0	127:0	0	static int	matroska_decode_buffer
params	1:33	0:0	1	
param	1:34	1:47	2	uint8_t * *	buf
param	1:49	1:62	2	int *	buf_size
param	2:34	2:54	2	MatroskaTrack *	track
stmnts	0:0	126:17	1	
decl	4:4	4:60	2	MatroskaTrackEncoding	*encodings
op	4:37	0:0	2	=
water	4:39	0:0	2	track
op	4:44	0:0	2	->
water	4:46	0:0	2	encodings
op	4:55	0:0	2	.
water	4:56	0:0	2	elem
decl	5:4	5:24	2	uint8_t	*data
op	5:18	0:0	2	=
op	5:20	0:0	2	*
water	5:21	0:0	2	buf
decl	6:4	6:25	2	int	isize
op	6:14	0:0	2	=
op	6:16	0:0	2	*
water	6:17	0:0	2	buf_size
decl	7:4	7:28	2	uint8_t	*pkt_data
op	7:22	0:0	2	=
water	7:24	0:0	2	NULL
water	8:4	0:0	2	uint8_t
water	8:12	0:0	2	av_unused
op	8:22	0:0	2	*
water	8:23	0:0	2	newpktdata
water	8:33	0:0	2	;
decl	9:4	9:24	2	int	pkt_size
op	9:17	0:0	2	=
water	9:19	0:0	2	isize
decl	10:4	10:18	2	int	result
op	10:15	0:0	2	=
water	10:17	0:0	2	0
decl	11:4	11:12	2	int	olen
if	12:4	13:34	2	(pkt_size >= 10000000 U)
cond	12:8	12:28	3	pkt_size >= 10000000 U
water	12:8	0:0	4	pkt_size
op	12:17	0:0	4	>=
water	12:20	0:0	4	10000000
water	12:28	0:0	4	U
stmts	13:8	13:34	3	
return	13:8	13:34	4	AVERROR_INVALIDDATA
water	13:15	0:0	5	AVERROR_INVALIDDATA
switch	14:4	120:4	2	(encodings [ 0 ] . compression . algo)
cond	14:12	14:37	3	encodings [ 0 ] . compression . algo
water	14:12	0:0	4	encodings
op	14:21	0:0	4	[
water	14:22	0:0	4	0
op	14:23	0:0	4	]
op	14:24	0:0	4	.
water	14:25	0:0	4	compression
op	14:36	0:0	4	.
water	14:37	0:0	4	algo
stmts	14:43	120:4	3	
water	14:43	0:0	4	{
label	15:4	15:49	4	case MATROSKA_TRACK_ENCODING_COMP_HEADERSTRIP :
water	16:4	0:0	4	{
decl	17:8	17:64	4	int	header_size
op	17:24	0:0	4	=
water	17:26	0:0	4	encodings
op	17:35	0:0	4	[
water	17:36	0:0	4	0
op	17:37	0:0	4	]
op	17:38	0:0	4	.
water	17:39	0:0	4	compression
op	17:50	0:0	4	.
water	17:51	0:0	4	settings
op	17:59	0:0	4	.
water	17:60	0:0	4	size
decl	18:8	18:64	4	uint8_t	*header
op	18:24	0:0	4	=
water	18:26	0:0	4	encodings
op	18:35	0:0	4	[
water	18:36	0:0	4	0
op	18:37	0:0	4	]
op	18:38	0:0	4	.
water	18:39	0:0	4	compression
op	18:50	0:0	4	.
water	18:51	0:0	4	settings
op	18:59	0:0	4	.
water	18:60	0:0	4	data
if	19:8	22:8	4	(header_size && ! header)
cond	19:12	19:28	5	header_size && ! header
water	19:12	0:0	6	header_size
op	19:24	0:0	6	&&
op	19:27	0:0	6	!
water	19:28	0:0	6	header
stmts	19:36	22:8	5	
water	19:36	0:0	6	{
call	20:12	20:86	6	av_log
arg	20:19	20:23	7	NULL
water	20:19	0:0	8	NULL
arg	20:25	20:37	7	AV_LOG_ERROR
water	20:25	0:0	8	AV_LOG_ERROR
arg	20:39	20:86	7	"Compression size but no data in headerstrip\n"
water	20:39	0:0	8	"Compression size but no data in headerstrip\n"
water	20:87	0:0	6	;
return	21:12	21:21	6	-1
op	21:19	0:0	7	-
water	21:20	0:0	7	1
water	22:8	0:0	6	}
if	23:8	24:20	4	(! header_size)
cond	23:12	23:13	5	! header_size
op	23:12	0:0	6	!
water	23:13	0:0	6	header_size
stmts	24:12	24:20	5	
return	24:12	24:20	6	0
water	24:19	0:0	7	0
water	25:8	0:0	4	pkt_size
op	25:17	0:0	4	=
water	25:19	0:0	4	isize
op	25:25	0:0	4	+
water	25:27	0:0	4	header_size
water	25:38	0:0	4	;
water	26:8	0:0	4	pkt_data
op	26:17	0:0	4	=
call	26:19	26:37	4	av_malloc
arg	26:29	26:37	5	pkt_size
water	26:29	0:0	6	pkt_size
water	26:38	0:0	4	;
if	27:8	28:34	4	(! pkt_data)
cond	27:12	27:13	5	! pkt_data
op	27:12	0:0	6	!
water	27:13	0:0	6	pkt_data
stmts	28:12	28:34	5	
return	28:12	28:34	6	AVERROR(ENOMEM)
call	28:19	28:33	7	AVERROR
arg	28:27	28:33	8	ENOMEM
water	28:27	0:0	9	ENOMEM
call	29:8	29:44	4	memcpy
arg	29:15	29:23	5	pkt_data
water	29:15	0:0	6	pkt_data
arg	29:25	29:31	5	header
water	29:25	0:0	6	header
arg	29:33	29:44	5	header_size
water	29:33	0:0	6	header_size
water	29:45	0:0	4	;
call	30:8	30:50	4	memcpy
arg	30:15	30:37	5	pkt_data+header_size
water	30:15	0:0	6	pkt_data
op	30:24	0:0	6	+
water	30:26	0:0	6	header_size
arg	30:39	30:43	5	data
water	30:39	0:0	6	data
arg	30:45	30:50	5	isize
water	30:45	0:0	6	isize
water	30:51	0:0	4	;
break	31:8	31:13	4	
water	32:4	0:0	4	}
label	34:4	34:41	4	case MATROSKA_TRACK_ENCODING_COMP_LZO :
do	35:8	44:8	4	(result == AV_LZO_OUTPUT_FULL && pkt_size < 10000000)
cond	44:17	44:60	5	result == AV_LZO_OUTPUT_FULL && pkt_size < 10000000
water	44:17	0:0	6	result
op	44:24	0:0	6	==
water	44:27	0:0	6	AV_LZO_OUTPUT_FULL
op	44:46	0:0	6	&&
water	44:49	0:0	6	pkt_size
op	44:58	0:0	6	<
water	44:60	0:0	6	10000000
stmts	35:11	44:8	5	
water	35:11	0:0	6	{
water	36:12	0:0	6	olen
op	36:23	0:0	6	=
water	36:25	0:0	6	pkt_size
op	36:34	0:0	6	*=
water	36:37	0:0	6	3
water	36:38	0:0	6	;
water	37:12	0:0	6	newpktdata
op	37:23	0:0	6	=
call	37:25	37:78	6	av_realloc
arg	37:36	37:44	7	pkt_data
water	37:36	0:0	8	pkt_data
arg	37:46	37:78	7	pkt_size+AV_LZO_OUTPUT_PADDING
water	37:46	0:0	8	pkt_size
op	37:55	0:0	8	+
water	37:57	0:0	8	AV_LZO_OUTPUT_PADDING
water	37:79	0:0	6	;
if	38:12	41:12	6	(! newpktdata)
cond	38:16	38:17	7	! newpktdata
op	38:16	0:0	8	!
water	38:17	0:0	8	newpktdata
stmts	38:29	41:12	7	
water	38:29	0:0	8	{
water	39:16	0:0	8	result
op	39:23	0:0	8	=
call	39:25	39:39	8	AVERROR
arg	39:33	39:39	9	ENOMEM
water	39:33	0:0	10	ENOMEM
water	39:40	0:0	8	;
goto	40:16	40:27	8	failed
water	40:21	0:0	9	failed
water	41:12	0:0	8	}
water	42:12	0:0	6	pkt_data
op	42:21	0:0	6	=
water	42:23	0:0	6	newpktdata
water	42:33	0:0	6	;
water	43:12	0:0	6	result
op	43:21	0:0	6	=
call	43:23	43:68	6	av_lzo1x_decode
arg	43:39	43:47	7	pkt_data
water	43:39	0:0	8	pkt_data
arg	43:49	43:54	7	&olen
op	43:49	0:0	8	&
water	43:50	0:0	8	olen
arg	43:56	43:60	7	data
water	43:56	0:0	8	data
arg	43:62	43:68	7	&isize
op	43:62	0:0	8	&
water	43:63	0:0	8	isize
water	43:69	0:0	6	;
water	44:8	0:0	6	}
water	44:69	0:0	4	;
if	45:8	48:8	4	(result)
cond	45:12	45:12	5	result
water	45:12	0:0	6	result
stmts	45:20	48:8	5	
water	45:20	0:0	6	{
water	46:12	0:0	6	result
op	46:19	0:0	6	=
water	46:21	0:0	6	AVERROR_INVALIDDATA
water	46:40	0:0	6	;
goto	47:12	47:23	6	failed
water	47:17	0:0	7	failed
water	48:8	0:0	6	}
water	49:8	0:0	4	pkt_size
op	49:17	0:0	4	-=
water	49:20	0:0	4	olen
water	49:24	0:0	4	;
break	50:8	50:13	4	
label	53:4	53:42	4	case MATROSKA_TRACK_ENCODING_COMP_ZLIB :
water	54:4	0:0	4	{
decl	55:8	55:32	4	z_stream	zstream
op	55:25	0:0	4	=
water	55:27	0:0	4	{
water	55:29	0:0	4	0
water	55:31	0:0	4	}
if	56:8	57:21	4	(inflateInit (& zstream ) != Z_OK)
cond	56:12	56:37	5	inflateInit (& zstream ) != Z_OK
call	56:12	56:32	6	inflateInit
arg	56:24	56:32	7	&zstream
op	56:24	0:0	8	&
water	56:25	0:0	8	zstream
op	56:34	0:0	6	!=
water	56:37	0:0	6	Z_OK
stmts	57:12	57:21	5	
return	57:12	57:21	6	-1
op	57:19	0:0	7	-
water	57:20	0:0	7	1
water	58:8	0:0	4	zstream
op	58:15	0:0	4	.
water	58:16	0:0	4	next_in
op	58:25	0:0	4	=
water	58:27	0:0	4	data
water	58:31	0:0	4	;
water	59:8	0:0	4	zstream
op	59:15	0:0	4	.
water	59:16	0:0	4	avail_in
op	59:25	0:0	4	=
water	59:27	0:0	4	isize
water	59:32	0:0	4	;
do	60:8	72:8	4	(result == Z_OK && pkt_size < 10000000)
cond	72:17	72:46	5	result == Z_OK && pkt_size < 10000000
water	72:17	0:0	6	result
op	72:24	0:0	6	==
water	72:27	0:0	6	Z_OK
op	72:32	0:0	6	&&
water	72:35	0:0	6	pkt_size
op	72:44	0:0	6	<
water	72:46	0:0	6	10000000
stmts	60:11	72:8	5	
water	60:11	0:0	6	{
water	61:12	0:0	6	pkt_size
op	61:22	0:0	6	*=
water	61:25	0:0	6	3
water	61:26	0:0	6	;
water	62:12	0:0	6	newpktdata
op	62:23	0:0	6	=
call	62:25	62:54	6	av_realloc
arg	62:36	62:44	7	pkt_data
water	62:36	0:0	8	pkt_data
arg	62:46	62:54	7	pkt_size
water	62:46	0:0	8	pkt_size
water	62:55	0:0	6	;
if	63:12	67:12	6	(! newpktdata)
cond	63:16	63:17	7	! newpktdata
op	63:16	0:0	8	!
water	63:17	0:0	8	newpktdata
stmts	63:29	67:12	7	
water	63:29	0:0	8	{
call	64:16	64:35	8	inflateEnd
arg	64:27	64:35	9	&zstream
op	64:27	0:0	10	&
water	64:28	0:0	10	zstream
water	64:36	0:0	8	;
water	65:16	0:0	8	result
op	65:23	0:0	8	=
call	65:25	65:39	8	AVERROR
arg	65:33	65:39	9	ENOMEM
water	65:33	0:0	10	ENOMEM
water	65:40	0:0	8	;
goto	66:16	66:27	8	failed
water	66:21	0:0	9	failed
water	67:12	0:0	8	}
water	68:12	0:0	6	pkt_data
op	68:30	0:0	6	=
water	68:32	0:0	6	newpktdata
water	68:42	0:0	6	;
water	69:12	0:0	6	zstream
op	69:19	0:0	6	.
water	69:20	0:0	6	avail_out
op	69:30	0:0	6	=
water	69:32	0:0	6	pkt_size
op	69:41	0:0	6	-
water	69:43	0:0	6	zstream
op	69:50	0:0	6	.
water	69:51	0:0	6	total_out
water	69:60	0:0	6	;
water	70:12	0:0	6	zstream
op	70:19	0:0	6	.
water	70:20	0:0	6	next_out
op	70:30	0:0	6	=
water	70:32	0:0	6	pkt_data
op	70:41	0:0	6	+
water	70:43	0:0	6	zstream
op	70:50	0:0	6	.
water	70:51	0:0	6	total_out
water	70:60	0:0	6	;
water	71:12	0:0	6	result
op	71:19	0:0	6	=
call	71:21	71:49	6	inflate
arg	71:29	71:37	7	&zstream
op	71:29	0:0	8	&
water	71:30	0:0	8	zstream
arg	71:39	71:49	7	Z_NO_FLUSH
water	71:39	0:0	8	Z_NO_FLUSH
water	71:50	0:0	6	;
water	72:8	0:0	6	}
water	72:55	0:0	4	;
water	73:8	0:0	4	pkt_size
op	73:17	0:0	4	=
water	73:19	0:0	4	zstream
op	73:26	0:0	4	.
water	73:27	0:0	4	total_out
water	73:36	0:0	4	;
call	74:8	74:27	4	inflateEnd
arg	74:19	74:27	5	&zstream
op	74:19	0:0	6	&
water	74:20	0:0	6	zstream
water	74:28	0:0	4	;
if	75:8	81:8	4	(result != Z_STREAM_END)
cond	75:12	75:22	5	result != Z_STREAM_END
water	75:12	0:0	6	result
op	75:19	0:0	6	!=
water	75:22	0:0	6	Z_STREAM_END
stmts	75:36	81:8	5	
water	75:36	0:0	6	{
if	76:12	77:40	6	(result == Z_MEM_ERROR)
cond	76:16	76:26	7	result == Z_MEM_ERROR
water	76:16	0:0	8	result
op	76:23	0:0	8	==
water	76:26	0:0	8	Z_MEM_ERROR
stmts	77:16	77:40	7	
water	77:16	0:0	8	result
op	77:23	0:0	8	=
call	77:25	77:39	8	AVERROR
arg	77:33	77:39	9	ENOMEM
water	77:33	0:0	10	ENOMEM
water	77:40	0:0	8	;
else	78:12	79:44	6
stmts	79:16	79:44	7	
water	79:16	0:0	8	result
op	79:23	0:0	8	=
water	79:25	0:0	8	AVERROR_INVALIDDATA
water	79:44	0:0	8	;
goto	80:12	80:23	6	failed
water	80:17	0:0	7	failed
water	81:8	0:0	6	}
break	82:8	82:13	4	
water	83:4	0:0	4	}
label	86:4	86:43	4	case MATROSKA_TRACK_ENCODING_COMP_BZLIB :
water	87:4	0:0	4	{
decl	88:8	88:34	4	bz_stream	bzstream
op	88:27	0:0	4	=
water	88:29	0:0	4	{
water	88:31	0:0	4	0
water	88:33	0:0	4	}
if	89:8	90:21	4	(BZ2_bzDecompressInit (& bzstream ,0 ,0 ) != BZ_OK)
cond	89:12	89:53	5	BZ2_bzDecompressInit (& bzstream ,0 ,0 ) != BZ_OK
call	89:12	89:48	6	BZ2_bzDecompressInit
arg	89:33	89:42	7	&bzstream
op	89:33	0:0	8	&
water	89:34	0:0	8	bzstream
arg	89:44	89:45	7	0
water	89:44	0:0	8	0
arg	89:47	89:48	7	0
water	89:47	0:0	8	0
op	89:50	0:0	6	!=
water	89:53	0:0	6	BZ_OK
stmts	90:12	90:21	5	
return	90:12	90:21	6	-1
op	90:19	0:0	7	-
water	90:20	0:0	7	1
water	91:8	0:0	4	bzstream
op	91:16	0:0	4	.
water	91:17	0:0	4	next_in
op	91:26	0:0	4	=
water	91:28	0:0	4	data
water	91:32	0:0	4	;
water	92:8	0:0	4	bzstream
op	92:16	0:0	4	.
water	92:17	0:0	4	avail_in
op	92:26	0:0	4	=
water	92:28	0:0	4	isize
water	92:33	0:0	4	;
do	93:8	105:8	4	(result == BZ_OK && pkt_size < 10000000)
cond	105:17	105:47	5	result == BZ_OK && pkt_size < 10000000
water	105:17	0:0	6	result
op	105:24	0:0	6	==
water	105:27	0:0	6	BZ_OK
op	105:33	0:0	6	&&
water	105:36	0:0	6	pkt_size
op	105:45	0:0	6	<
water	105:47	0:0	6	10000000
stmts	93:11	105:8	5	
water	93:11	0:0	6	{
water	94:12	0:0	6	pkt_size
op	94:22	0:0	6	*=
water	94:25	0:0	6	3
water	94:26	0:0	6	;
water	95:12	0:0	6	newpktdata
op	95:23	0:0	6	=
call	95:25	95:54	6	av_realloc
arg	95:36	95:44	7	pkt_data
water	95:36	0:0	8	pkt_data
arg	95:46	95:54	7	pkt_size
water	95:46	0:0	8	pkt_size
water	95:55	0:0	6	;
if	96:12	100:12	6	(! newpktdata)
cond	96:16	96:17	7	! newpktdata
op	96:16	0:0	8	!
water	96:17	0:0	8	newpktdata
stmts	96:29	100:12	7	
water	96:29	0:0	8	{
call	97:16	97:45	8	BZ2_bzDecompressEnd
arg	97:36	97:45	9	&bzstream
op	97:36	0:0	10	&
water	97:37	0:0	10	bzstream
water	97:46	0:0	8	;
water	98:16	0:0	8	result
op	98:23	0:0	8	=
call	98:25	98:39	8	AVERROR
arg	98:33	98:39	9	ENOMEM
water	98:33	0:0	10	ENOMEM
water	98:40	0:0	8	;
goto	99:16	99:27	8	failed
water	99:21	0:0	9	failed
water	100:12	0:0	8	}
water	101:12	0:0	6	pkt_data
op	101:31	0:0	6	=
water	101:33	0:0	6	newpktdata
water	101:43	0:0	6	;
water	102:12	0:0	6	bzstream
op	102:20	0:0	6	.
water	102:21	0:0	6	avail_out
op	102:31	0:0	6	=
water	102:33	0:0	6	pkt_size
op	102:42	0:0	6	-
water	102:44	0:0	6	bzstream
op	102:52	0:0	6	.
water	102:53	0:0	6	total_out_lo32
water	102:67	0:0	6	;
water	103:12	0:0	6	bzstream
op	103:20	0:0	6	.
water	103:21	0:0	6	next_out
op	103:31	0:0	6	=
water	103:33	0:0	6	pkt_data
op	103:42	0:0	6	+
water	103:44	0:0	6	bzstream
op	103:52	0:0	6	.
water	103:53	0:0	6	total_out_lo32
water	103:67	0:0	6	;
water	104:12	0:0	6	result
op	104:19	0:0	6	=
call	104:21	104:47	6	BZ2_bzDecompress
arg	104:38	104:47	7	&bzstream
op	104:38	0:0	8	&
water	104:39	0:0	8	bzstream
water	104:48	0:0	6	;
water	105:8	0:0	6	}
water	105:56	0:0	4	;
water	106:8	0:0	4	pkt_size
op	106:17	0:0	4	=
water	106:19	0:0	4	bzstream
op	106:27	0:0	4	.
water	106:28	0:0	4	total_out_lo32
water	106:42	0:0	4	;
call	107:8	107:37	4	BZ2_bzDecompressEnd
arg	107:28	107:37	5	&bzstream
op	107:28	0:0	6	&
water	107:29	0:0	6	bzstream
water	107:38	0:0	4	;
if	108:8	114:8	4	(result != BZ_STREAM_END)
cond	108:12	108:22	5	result != BZ_STREAM_END
water	108:12	0:0	6	result
op	108:19	0:0	6	!=
water	108:22	0:0	6	BZ_STREAM_END
stmts	108:37	114:8	5	
water	108:37	0:0	6	{
if	109:12	110:40	6	(result == BZ_MEM_ERROR)
cond	109:16	109:26	7	result == BZ_MEM_ERROR
water	109:16	0:0	8	result
op	109:23	0:0	8	==
water	109:26	0:0	8	BZ_MEM_ERROR
stmts	110:16	110:40	7	
water	110:16	0:0	8	result
op	110:23	0:0	8	=
call	110:25	110:39	8	AVERROR
arg	110:33	110:39	9	ENOMEM
water	110:33	0:0	10	ENOMEM
water	110:40	0:0	8	;
else	111:12	112:44	6
stmts	112:16	112:44	7	
water	112:16	0:0	8	result
op	112:23	0:0	8	=
water	112:25	0:0	8	AVERROR_INVALIDDATA
water	112:44	0:0	8	;
goto	113:12	113:23	6	failed
water	113:17	0:0	7	failed
water	114:8	0:0	6	}
break	115:8	115:13	4	
water	116:4	0:0	4	}
label	118:4	118:11	4	default :
return	119:8	119:34	4	AVERROR_INVALIDDATA
water	119:15	0:0	5	AVERROR_INVALIDDATA
water	120:4	0:0	4	}
op	121:4	0:0	2	*
water	121:5	0:0	2	buf
op	121:14	0:0	2	=
water	121:16	0:0	2	pkt_data
water	121:24	0:0	2	;
op	122:4	0:0	2	*
water	122:5	0:0	2	buf_size
op	122:14	0:0	2	=
water	122:16	0:0	2	pkt_size
water	122:24	0:0	2	;
return	123:4	123:12	2	0
water	123:11	0:0	3	0
label	124:0	124:6	2	failed :
call	125:4	125:20	2	av_free
arg	125:12	125:20	3	pkt_data
water	125:12	0:0	4	pkt_data
water	125:21	0:0	2	;
return	126:4	126:17	2	result
water	126:11	0:0	3	result
