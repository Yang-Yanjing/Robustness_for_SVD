func	1:0	75:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	74:11	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:28	2	AVPacket	packet0
water	4:20	0:0	2	,
decl	4:4	4:28	2	AVPacket	packet
decl	5:4	5:37	2	AVFrame	*frame
op	5:19	0:0	2	=
call	5:21	5:36	3	av_frame_alloc
decl	6:4	6:42	2	AVFrame	*filt_frame
op	6:24	0:0	2	=
call	6:26	6:41	3	av_frame_alloc
decl	7:4	7:17	2	int	got_frame
if	8:4	11:4	2	(! frame || ! filt_frame)
cond	8:8	8:19	3	! frame || ! filt_frame
op	8:8	0:0	4	!
water	8:9	0:0	4	frame
op	8:15	0:0	4	||
op	8:18	0:0	4	!
water	8:19	0:0	4	filt_frame
stmts	8:31	11:4	3	
water	8:31	0:0	4	{
call	9:8	9:41	4	perror
arg	9:15	9:41	5	"Could not allocate frame"
water	9:15	0:0	6	"Could not allocate frame"
water	9:42	0:0	4	;
call	10:8	10:14	4	exit
arg	10:13	10:14	5	1
water	10:13	0:0	6	1
water	10:15	0:0	4	;
water	11:4	0:0	4	}
if	12:4	15:4	2	(argc != 2)
cond	12:8	12:16	3	argc != 2
water	12:8	0:0	4	argc
op	12:13	0:0	4	!=
water	12:16	0:0	4	2
stmts	12:19	15:4	3	
water	12:19	0:0	4	{
call	13:8	13:64	4	fprintf
arg	13:16	13:22	5	stderr
water	13:16	0:0	6	stderr
arg	13:24	13:47	5	"Usage: %s file | %s\n"
water	13:24	0:0	6	"Usage: %s file | %s\n"
arg	13:49	13:56	5	argv[0]
water	13:49	0:0	6	argv
op	13:53	0:0	6	[
water	13:54	0:0	6	0
op	13:55	0:0	6	]
arg	13:58	13:64	5	player
water	13:58	0:0	6	player
water	13:65	0:0	4	;
call	14:8	14:14	4	exit
arg	14:13	14:14	5	1
water	14:13	0:0	6	1
water	14:15	0:0	4	;
water	15:4	0:0	4	}
call	16:4	16:20	2	av_register_all
water	16:21	0:0	2	;
call	17:4	17:26	2	avfilter_register_all
water	17:27	0:0	2	;
if	18:4	19:16	2	(( ret =open_input_file (argv [ 1 ] ) ) < 0)
cond	18:8	18:43	3	( ret =open_input_file (argv [ 1 ] ) ) < 0
water	18:8	0:0	4	(
water	18:9	0:0	4	ret
op	18:13	0:0	4	=
call	18:15	18:38	4	open_input_file
arg	18:31	18:38	5	argv[1]
water	18:31	0:0	6	argv
op	18:35	0:0	6	[
water	18:36	0:0	6	1
op	18:37	0:0	6	]
water	18:39	0:0	4	)
op	18:41	0:0	4	<
water	18:43	0:0	4	0
stmts	19:8	19:16	3	
goto	19:8	19:16	4	end
water	19:13	0:0	5	end
if	20:4	21:16	2	(( ret =init_filters (filter_descr ) ) < 0)
cond	20:8	20:45	3	( ret =init_filters (filter_descr ) ) < 0
water	20:8	0:0	4	(
water	20:9	0:0	4	ret
op	20:13	0:0	4	=
call	20:15	20:40	4	init_filters
arg	20:28	20:40	5	filter_descr
water	20:28	0:0	6	filter_descr
water	20:41	0:0	4	)
op	20:43	0:0	4	<
water	20:45	0:0	4	0
stmts	21:8	21:16	3	
goto	21:8	21:16	4	end
water	21:13	0:0	5	end
water	23:4	0:0	2	packet0
op	23:11	0:0	2	.
water	23:12	0:0	2	data
op	23:17	0:0	2	=
water	23:19	0:0	2	NULL
water	23:23	0:0	2	;
water	24:4	0:0	2	packet
op	24:10	0:0	2	.
water	24:11	0:0	2	data
op	24:16	0:0	2	=
water	24:18	0:0	2	NULL
water	24:22	0:0	2	;
while	25:4	63:4	2	(1)
cond	25:11	25:11	3	1
water	25:11	0:0	4	1
stmts	25:14	63:4	3	
water	25:14	0:0	4	{
if	26:8	30:8	4	(! packet0 . data)
cond	26:12	26:21	5	! packet0 . data
op	26:12	0:0	6	!
water	26:13	0:0	6	packet0
op	26:20	0:0	6	.
water	26:21	0:0	6	data
stmts	26:27	30:8	5	
water	26:27	0:0	6	{
if	27:12	28:21	6	(( ret =av_read_frame (fmt_ctx ,& packet ) ) < 0)
cond	27:16	27:58	7	( ret =av_read_frame (fmt_ctx ,& packet ) ) < 0
water	27:16	0:0	8	(
water	27:17	0:0	8	ret
op	27:21	0:0	8	=
call	27:23	27:53	8	av_read_frame
arg	27:37	27:44	9	fmt_ctx
water	27:37	0:0	10	fmt_ctx
arg	27:46	27:53	9	&packet
op	27:46	0:0	10	&
water	27:47	0:0	10	packet
water	27:54	0:0	8	)
op	27:56	0:0	8	<
water	27:58	0:0	8	0
stmts	28:16	28:21	7	
break	28:16	28:21	8	
water	29:12	0:0	6	packet0
op	29:20	0:0	6	=
water	29:22	0:0	6	packet
water	29:28	0:0	6	;
water	30:8	0:0	6	}
if	31:8	59:8	4	(packet . stream_index == audio_stream_index)
cond	31:12	31:35	5	packet . stream_index == audio_stream_index
water	31:12	0:0	6	packet
op	31:18	0:0	6	.
water	31:19	0:0	6	stream_index
op	31:32	0:0	6	==
water	31:35	0:0	6	audio_stream_index
stmts	31:55	59:8	5	
water	31:55	0:0	6	{
water	32:12	0:0	6	got_frame
op	32:22	0:0	6	=
water	32:24	0:0	6	0
water	32:25	0:0	6	;
water	33:12	0:0	6	ret
op	33:16	0:0	6	=
call	33:18	33:75	6	avcodec_decode_audio4
arg	33:40	33:47	7	dec_ctx
water	33:40	0:0	8	dec_ctx
arg	33:49	33:54	7	frame
water	33:49	0:0	8	frame
arg	33:56	33:66	7	&got_frame
op	33:56	0:0	8	&
water	33:57	0:0	8	got_frame
arg	33:68	33:75	7	&packet
op	33:68	0:0	8	&
water	33:69	0:0	8	packet
water	33:76	0:0	6	;
if	34:12	37:12	6	(ret < 0)
cond	34:16	34:22	7	ret < 0
water	34:16	0:0	8	ret
op	34:20	0:0	8	<
water	34:22	0:0	8	0
stmts	34:25	37:12	7	
water	34:25	0:0	8	{
call	35:16	35:67	8	av_log
arg	35:23	35:27	9	NULL
water	35:23	0:0	10	NULL
arg	35:29	35:41	9	AV_LOG_ERROR
water	35:29	0:0	10	AV_LOG_ERROR
arg	35:43	35:67	9	"Error decoding audio\n"
water	35:43	0:0	10	"Error decoding audio\n"
water	35:68	0:0	8	;
continue	36:16	36:24	8	
water	37:12	0:0	8	}
water	38:12	0:0	6	packet
op	38:18	0:0	6	.
water	38:19	0:0	6	size
op	38:24	0:0	6	-=
water	38:27	0:0	6	ret
water	38:30	0:0	6	;
water	39:12	0:0	6	packet
op	39:18	0:0	6	.
water	39:19	0:0	6	data
op	39:24	0:0	6	+=
water	39:27	0:0	6	ret
water	39:30	0:0	6	;
if	40:12	56:12	6	(got_frame)
cond	40:16	40:16	7	got_frame
water	40:16	0:0	8	got_frame
stmts	40:27	56:12	7	
water	40:27	0:0	8	{
if	42:16	45:16	8	(av_buffersrc_add_frame_flags (buffersrc_ctx ,frame ,0 ) < 0)
cond	42:20	42:76	9	av_buffersrc_add_frame_flags (buffersrc_ctx ,frame ,0 ) < 0
call	42:20	42:72	10	av_buffersrc_add_frame_flags
arg	42:49	42:62	11	buffersrc_ctx
water	42:49	0:0	12	buffersrc_ctx
arg	42:64	42:69	11	frame
water	42:64	0:0	12	frame
arg	42:71	42:72	11	0
water	42:71	0:0	12	0
op	42:74	0:0	10	<
water	42:76	0:0	10	0
stmts	42:79	45:16	9	
water	42:79	0:0	10	{
call	43:20	43:92	10	av_log
arg	43:27	43:31	11	NULL
water	43:27	0:0	12	NULL
arg	43:33	43:45	11	AV_LOG_ERROR
water	43:33	0:0	12	AV_LOG_ERROR
arg	43:47	43:92	11	"Error while feeding the audio filtergraph\n"
water	43:47	0:0	12	"Error while feeding the audio filtergraph\n"
water	43:93	0:0	10	;
break	44:20	44:25	10	
water	45:16	0:0	10	}
while	47:16	55:16	8	(1)
cond	47:23	47:23	9	1
water	47:23	0:0	10	1
stmts	47:26	55:16	9	
water	47:26	0:0	10	{
water	48:20	0:0	10	ret
op	48:24	0:0	10	=
call	48:26	48:76	10	av_buffersink_get_frame
arg	48:50	48:64	11	buffersink_ctx
water	48:50	0:0	12	buffersink_ctx
arg	48:66	48:76	11	filt_frame
water	48:66	0:0	12	filt_frame
water	48:77	0:0	10	;
if	49:20	50:29	10	(ret ==AVERROR (EAGAIN ) || ret == AVERROR_EOF)
cond	49:24	49:57	11	ret ==AVERROR (EAGAIN ) || ret == AVERROR_EOF
water	49:24	0:0	12	ret
op	49:28	0:0	12	==
call	49:31	49:45	12	AVERROR
arg	49:39	49:45	13	EAGAIN
water	49:39	0:0	14	EAGAIN
op	49:47	0:0	12	||
water	49:50	0:0	12	ret
op	49:54	0:0	12	==
water	49:57	0:0	12	AVERROR_EOF
stmts	50:24	50:29	11	
break	50:24	50:29	12	
if	51:20	52:32	10	(ret < 0)
cond	51:24	51:30	11	ret < 0
water	51:24	0:0	12	ret
op	51:28	0:0	12	<
water	51:30	0:0	12	0
stmts	52:24	52:32	11	
goto	52:24	52:32	12	end
water	52:29	0:0	13	end
call	53:20	53:42	10	print_frame
arg	53:32	53:42	11	filt_frame
water	53:32	0:0	12	filt_frame
water	53:43	0:0	10	;
call	54:20	54:45	10	av_frame_unref
arg	54:35	54:45	11	filt_frame
water	54:35	0:0	12	filt_frame
water	54:46	0:0	10	;
water	55:16	0:0	10	}
water	56:12	0:0	8	}
if	57:12	58:40	6	(packet . size <= 0)
cond	57:16	57:31	7	packet . size <= 0
water	57:16	0:0	8	packet
op	57:22	0:0	8	.
water	57:23	0:0	8	size
op	57:28	0:0	8	<=
water	57:31	0:0	8	0
stmts	58:16	58:40	7	
call	58:16	58:39	8	av_free_packet
arg	58:31	58:39	9	&packet0
op	58:31	0:0	10	&
water	58:32	0:0	10	packet0
water	58:40	0:0	8	;
water	59:8	0:0	6	}
else	59:10	62:8	4
stmts	59:15	62:8	5	
water	59:15	0:0	6	{
call	61:12	61:35	6	av_free_packet
arg	61:27	61:35	7	&packet0
op	61:27	0:0	8	&
water	61:28	0:0	8	packet0
water	61:36	0:0	6	;
water	62:8	0:0	6	}
water	63:4	0:0	4	}
label	64:0	64:3	2	end :
call	65:4	65:37	2	avfilter_graph_free
arg	65:24	65:37	3	&filter_graph
op	65:24	0:0	4	&
water	65:25	0:0	4	filter_graph
water	65:38	0:0	2	;
call	66:4	66:25	2	avcodec_close
arg	66:18	66:25	3	dec_ctx
water	66:18	0:0	4	dec_ctx
water	66:26	0:0	2	;
call	67:4	67:33	2	avformat_close_input
arg	67:25	67:33	3	&fmt_ctx
op	67:25	0:0	4	&
water	67:26	0:0	4	fmt_ctx
water	67:34	0:0	2	;
call	68:4	68:24	2	av_frame_free
arg	68:18	68:24	3	&frame
op	68:18	0:0	4	&
water	68:19	0:0	4	frame
water	68:25	0:0	2	;
call	69:4	69:29	2	av_frame_free
arg	69:18	69:29	3	&filt_frame
op	69:18	0:0	4	&
water	69:19	0:0	4	filt_frame
water	69:30	0:0	2	;
if	70:4	73:4	2	(ret < 0 && ret != AVERROR_EOF)
cond	70:8	70:26	3	ret < 0 && ret != AVERROR_EOF
water	70:8	0:0	4	ret
op	70:12	0:0	4	<
water	70:14	0:0	4	0
op	70:16	0:0	4	&&
water	70:19	0:0	4	ret
op	70:23	0:0	4	!=
water	70:26	0:0	4	AVERROR_EOF
stmts	70:39	73:4	3	
water	70:39	0:0	4	{
call	71:8	71:63	4	fprintf
arg	71:16	71:22	5	stderr
water	71:16	0:0	6	stderr
arg	71:24	71:46	5	"Error occurred: %s\n"
water	71:24	0:0	6	"Error occurred: %s\n"
arg	71:48	71:63	5	av_err2str(ret)
call	71:48	71:62	6	av_err2str
arg	71:59	71:62	7	ret
water	71:59	0:0	8	ret
water	71:64	0:0	4	;
call	72:8	72:14	4	exit
arg	72:13	72:14	5	1
water	72:13	0:0	6	1
water	72:15	0:0	4	;
water	73:4	0:0	4	}
call	74:4	74:10	2	exit
arg	74:9	74:10	3	0
water	74:9	0:0	4	0
water	74:11	0:0	2	;
