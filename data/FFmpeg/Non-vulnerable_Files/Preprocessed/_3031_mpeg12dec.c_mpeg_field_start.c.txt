func	1:0	83:0	0	static int	mpeg_field_start
params	1:27	0:0	1	
param	1:28	1:45	2	MpegEncContext *	s
param	1:47	1:65	2	const uint8_t *	buf
param	1:67	1:79	2	int	buf_size
stmnts	0:0	82:12	1	
decl	3:4	3:36	2	AVCodecContext	*avctx
op	3:26	0:0	2	=
water	3:28	0:0	2	s
op	3:29	0:0	2	->
water	3:31	0:0	2	avctx
decl	4:4	4:46	2	Mpeg1Context	*s1
op	4:26	0:0	2	=
water	4:28	0:0	2	(
water	4:29	0:0	2	Mpeg1Context
op	4:42	0:0	2	*
water	4:43	0:0	2	)
water	4:45	0:0	2	s
decl	5:4	5:11	2	int	ret
if	7:4	57:4	2	(s -> first_field || s -> picture_structure == PICT_FRAME)
cond	7:8	7:50	3	s -> first_field || s -> picture_structure == PICT_FRAME
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	first_field
op	7:23	0:0	4	||
water	7:26	0:0	4	s
op	7:27	0:0	4	->
water	7:29	0:0	4	picture_structure
op	7:47	0:0	4	==
water	7:50	0:0	4	PICT_FRAME
stmts	7:62	57:4	3	
water	7:62	0:0	4	{
decl	8:8	8:33	4	AVFrameSideData	*pan_scan
if	9:8	10:22	4	(( ret =ff_mpv_frame_start (s ,avctx ) ) < 0)
cond	9:12	9:51	5	( ret =ff_mpv_frame_start (s ,avctx ) ) < 0
water	9:12	0:0	6	(
water	9:13	0:0	6	ret
op	9:17	0:0	6	=
call	9:19	9:46	6	ff_mpv_frame_start
arg	9:38	9:39	7	s
water	9:38	0:0	8	s
arg	9:41	9:46	7	avctx
water	9:41	0:0	8	avctx
water	9:47	0:0	6	)
op	9:49	0:0	6	<
water	9:51	0:0	6	0
stmts	10:12	10:22	5	
return	10:12	10:22	6	ret
water	10:19	0:0	7	ret
call	11:8	11:32	4	ff_mpeg_er_frame_start
arg	11:31	11:32	5	s
water	11:31	0:0	6	s
water	11:33	0:0	4	;
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	current_picture_ptr
op	13:30	0:0	4	->
water	13:32	0:0	4	f
op	13:33	0:0	4	->
water	13:35	0:0	4	repeat_pict
op	13:47	0:0	4	=
water	13:49	0:0	4	0
water	13:50	0:0	4	;
if	14:8	23:8	4	(s -> repeat_first_field)
cond	14:12	14:15	5	s -> repeat_first_field
water	14:12	0:0	6	s
op	14:13	0:0	6	->
water	14:15	0:0	6	repeat_first_field
stmts	14:35	23:8	5	
water	14:35	0:0	6	{
if	15:12	20:12	6	(s -> progressive_sequence)
cond	15:16	15:19	7	s -> progressive_sequence
water	15:16	0:0	8	s
op	15:17	0:0	8	->
water	15:19	0:0	8	progressive_sequence
stmts	15:41	20:12	7	
water	15:41	0:0	8	{
if	16:16	17:62	8	(s -> top_field_first)
cond	16:20	16:23	9	s -> top_field_first
water	16:20	0:0	10	s
op	16:21	0:0	10	->
water	16:23	0:0	10	top_field_first
stmts	17:20	17:62	9	
water	17:20	0:0	10	s
op	17:21	0:0	10	->
water	17:23	0:0	10	current_picture_ptr
op	17:42	0:0	10	->
water	17:44	0:0	10	f
op	17:45	0:0	10	->
water	17:47	0:0	10	repeat_pict
op	17:59	0:0	10	=
water	17:61	0:0	10	4
water	17:62	0:0	10	;
else	18:16	19:62	8
stmts	19:20	19:62	9	
water	19:20	0:0	10	s
op	19:21	0:0	10	->
water	19:23	0:0	10	current_picture_ptr
op	19:42	0:0	10	->
water	19:44	0:0	10	f
op	19:45	0:0	10	->
water	19:47	0:0	10	repeat_pict
op	19:59	0:0	10	=
water	19:61	0:0	10	2
water	19:62	0:0	10	;
water	20:12	0:0	8	}
else	20:14	22:12	6
stmts	20:19	22:12	7	
if	20:19	22:12	8	(s -> progressive_frame)
cond	20:23	20:26	9	s -> progressive_frame
water	20:23	0:0	10	s
op	20:24	0:0	10	->
water	20:26	0:0	10	progressive_frame
stmts	20:45	22:12	9	
water	20:45	0:0	10	{
water	21:16	0:0	10	s
op	21:17	0:0	10	->
water	21:19	0:0	10	current_picture_ptr
op	21:38	0:0	10	->
water	21:40	0:0	10	f
op	21:41	0:0	10	->
water	21:43	0:0	10	repeat_pict
op	21:55	0:0	10	=
water	21:57	0:0	10	1
water	21:58	0:0	10	;
water	22:12	0:0	10	}
water	23:8	0:0	6	}
water	24:8	0:0	4	pan_scan
op	24:17	0:0	4	=
call	24:19	26:62	4	av_frame_new_side_data
arg	24:42	24:67	5	s->current_picture_ptr->f
water	24:42	0:0	6	s
op	24:43	0:0	6	->
water	24:45	0:0	6	current_picture_ptr
op	24:64	0:0	6	->
water	24:66	0:0	6	f
arg	25:42	25:63	5	AV_FRAME_DATA_PANSCAN
water	25:42	0:0	6	AV_FRAME_DATA_PANSCAN
arg	26:42	26:62	5	sizeof(s1->pan_scan)
op	26:42	0:0	6	sizeof
water	26:48	0:0	6	(
water	26:49	0:0	6	s1
op	26:51	0:0	6	->
water	26:53	0:0	6	pan_scan
water	26:61	0:0	6	)
water	26:63	0:0	4	;
if	27:8	28:34	4	(! pan_scan)
cond	27:12	27:13	5	! pan_scan
op	27:12	0:0	6	!
water	27:13	0:0	6	pan_scan
stmts	28:12	28:34	5	
return	28:12	28:34	6	AVERROR(ENOMEM)
call	28:19	28:33	7	AVERROR
arg	28:27	28:33	8	ENOMEM
water	28:27	0:0	9	ENOMEM
call	29:8	29:66	4	memcpy
arg	29:15	29:29	5	pan_scan->data
water	29:15	0:0	6	pan_scan
op	29:23	0:0	6	->
water	29:25	0:0	6	data
arg	29:31	29:44	5	&s1->pan_scan
op	29:31	0:0	6	&
water	29:32	0:0	6	s1
op	29:34	0:0	6	->
water	29:36	0:0	6	pan_scan
arg	29:46	29:66	5	sizeof(s1->pan_scan)
op	29:46	0:0	6	sizeof
water	29:52	0:0	6	(
water	29:53	0:0	6	s1
op	29:55	0:0	6	->
water	29:57	0:0	6	pan_scan
water	29:65	0:0	6	)
water	29:67	0:0	4	;
if	30:8	38:8	4	(s1 -> a53_caption)
cond	30:12	30:16	5	s1 -> a53_caption
water	30:12	0:0	6	s1
op	30:14	0:0	6	->
water	30:16	0:0	6	a53_caption
stmts	30:29	38:8	5	
water	30:29	0:0	6	{
decl	31:12	33:37	6	AVFrameSideData	*sd
op	31:32	0:0	6	=
call	31:34	33:36	7	av_frame_new_side_data
arg	32:16	32:41	8	s->current_picture_ptr->f
water	32:16	0:0	9	s
op	32:17	0:0	9	->
water	32:19	0:0	9	current_picture_ptr
op	32:38	0:0	9	->
water	32:40	0:0	9	f
arg	32:43	32:63	8	AV_FRAME_DATA_A53_CC
water	32:43	0:0	9	AV_FRAME_DATA_A53_CC
arg	33:16	33:36	8	s1->a53_caption_size
water	33:16	0:0	9	s1
op	33:18	0:0	9	->
water	33:20	0:0	9	a53_caption_size
if	34:12	35:71	6	(sd)
cond	34:16	34:16	7	sd
water	34:16	0:0	8	sd
stmts	35:16	35:71	7	
call	35:16	35:70	8	memcpy
arg	35:23	35:31	9	sd->data
water	35:23	0:0	10	sd
op	35:25	0:0	10	->
water	35:27	0:0	10	data
arg	35:33	35:48	9	s1->a53_caption
water	35:33	0:0	10	s1
op	35:35	0:0	10	->
water	35:37	0:0	10	a53_caption
arg	35:50	35:70	9	s1->a53_caption_size
water	35:50	0:0	10	s1
op	35:52	0:0	10	->
water	35:54	0:0	10	a53_caption_size
water	35:71	0:0	8	;
call	36:12	36:37	6	av_freep
arg	36:21	36:37	7	&s1->a53_caption
op	36:21	0:0	8	&
water	36:22	0:0	8	s1
op	36:24	0:0	8	->
water	36:26	0:0	8	a53_caption
water	36:38	0:0	6	;
water	37:12	0:0	6	avctx
op	37:17	0:0	6	->
water	37:19	0:0	6	properties
op	37:30	0:0	6	|=
water	37:33	0:0	6	FF_CODEC_PROPERTY_CLOSED_CAPTIONS
water	37:66	0:0	6	;
water	38:8	0:0	6	}
if	39:8	45:8	4	(s1 -> has_stereo3d)
cond	39:12	39:16	5	s1 -> has_stereo3d
water	39:12	0:0	6	s1
op	39:14	0:0	6	->
water	39:16	0:0	6	has_stereo3d
stmts	39:30	45:8	5	
water	39:30	0:0	6	{
decl	40:12	40:88	6	AVStereo3D	*stereo
op	40:31	0:0	6	=
call	40:33	40:87	7	av_stereo3d_create_side_data
arg	40:62	40:87	8	s->current_picture_ptr->f
water	40:62	0:0	9	s
op	40:63	0:0	9	->
water	40:65	0:0	9	current_picture_ptr
op	40:84	0:0	9	->
water	40:86	0:0	9	f
if	41:12	42:38	6	(! stereo)
cond	41:16	41:17	7	! stereo
op	41:16	0:0	8	!
water	41:17	0:0	8	stereo
stmts	42:16	42:38	7	
return	42:16	42:38	8	AVERROR(ENOMEM)
call	42:23	42:37	9	AVERROR
arg	42:31	42:37	10	ENOMEM
water	42:31	0:0	11	ENOMEM
op	43:12	0:0	6	*
water	43:13	0:0	6	stereo
op	43:20	0:0	6	=
water	43:22	0:0	6	s1
op	43:24	0:0	6	->
water	43:26	0:0	6	stereo3d
water	43:34	0:0	6	;
water	44:12	0:0	6	s1
op	44:14	0:0	6	->
water	44:16	0:0	6	has_stereo3d
op	44:29	0:0	6	=
water	44:31	0:0	6	0
water	44:32	0:0	6	;
water	45:8	0:0	6	}
if	46:8	54:8	4	(s1 -> has_afd)
cond	46:12	46:16	5	s1 -> has_afd
water	46:12	0:0	6	s1
op	46:14	0:0	6	->
water	46:16	0:0	6	has_afd
stmts	46:25	54:8	5	
water	46:25	0:0	6	{
decl	47:12	49:60	6	AVFrameSideData	*sd
op	47:32	0:0	6	=
call	48:16	49:59	7	av_frame_new_side_data
arg	48:39	48:64	8	s->current_picture_ptr->f
water	48:39	0:0	9	s
op	48:40	0:0	9	->
water	48:42	0:0	9	current_picture_ptr
op	48:61	0:0	9	->
water	48:63	0:0	9	f
arg	49:39	49:56	8	AV_FRAME_DATA_AFD
water	49:39	0:0	9	AV_FRAME_DATA_AFD
arg	49:58	49:59	8	1
water	49:58	0:0	9	1
if	50:12	51:38	6	(! sd)
cond	50:16	50:17	7	! sd
op	50:16	0:0	8	!
water	50:17	0:0	8	sd
stmts	51:16	51:38	7	
return	51:16	51:38	8	AVERROR(ENOMEM)
call	51:23	51:37	9	AVERROR
arg	51:31	51:37	10	ENOMEM
water	51:31	0:0	11	ENOMEM
op	52:12	0:0	6	*
water	52:13	0:0	6	sd
op	52:15	0:0	6	->
water	52:17	0:0	6	data
op	52:24	0:0	6	=
water	52:26	0:0	6	s1
op	52:28	0:0	6	->
water	52:30	0:0	6	afd
water	52:33	0:0	6	;
water	53:12	0:0	6	s1
op	53:14	0:0	6	->
water	53:16	0:0	6	has_afd
op	53:24	0:0	6	=
water	53:26	0:0	6	0
water	53:27	0:0	6	;
water	54:8	0:0	6	}
if	55:8	56:41	4	(HAVE_THREADS && ( avctx -> active_thread_type & FF_THREAD_FRAME ))
cond	55:12	55:72	5	HAVE_THREADS && ( avctx -> active_thread_type & FF_THREAD_FRAME )
water	55:12	0:0	6	HAVE_THREADS
op	55:25	0:0	6	&&
water	55:28	0:0	6	(
water	55:29	0:0	6	avctx
op	55:34	0:0	6	->
water	55:36	0:0	6	active_thread_type
op	55:55	0:0	6	&
water	55:57	0:0	6	FF_THREAD_FRAME
water	55:72	0:0	6	)
stmts	56:12	56:41	5	
call	56:12	56:40	6	ff_thread_finish_setup
arg	56:35	56:40	7	avctx
water	56:35	0:0	8	avctx
water	56:41	0:0	6	;
water	57:4	0:0	4	}
else	57:6	77:4	2
stmts	57:11	77:4	3	
water	57:11	0:0	4	{
decl	58:8	58:13	4	int	i
if	59:8	62:8	4	(! s -> current_picture_ptr)
cond	59:12	59:16	5	! s -> current_picture_ptr
op	59:12	0:0	6	!
water	59:13	0:0	6	s
op	59:14	0:0	6	->
water	59:16	0:0	6	current_picture_ptr
stmts	59:37	62:8	5	
water	59:37	0:0	6	{
call	60:12	60:66	6	av_log
arg	60:19	60:27	7	s->avctx
water	60:19	0:0	8	s
op	60:20	0:0	8	->
water	60:22	0:0	8	avctx
arg	60:29	60:41	7	AV_LOG_ERROR
water	60:29	0:0	8	AV_LOG_ERROR
arg	60:43	60:66	7	"first field missing\n"
water	60:43	0:0	8	"first field missing\n"
water	60:67	0:0	6	;
return	61:12	61:38	6	AVERROR_INVALIDDATA
water	61:19	0:0	7	AVERROR_INVALIDDATA
water	62:8	0:0	6	}
if	63:8	70:8	4	(s -> avctx -> hwaccel && ( s -> avctx -> slice_flags & SLICE_FLAG_ALLOW_FIELD ))
cond	63:12	64:59	5	s -> avctx -> hwaccel && ( s -> avctx -> slice_flags & SLICE_FLAG_ALLOW_FIELD )
water	63:12	0:0	6	s
op	63:13	0:0	6	->
water	63:15	0:0	6	avctx
op	63:20	0:0	6	->
water	63:22	0:0	6	hwaccel
op	63:30	0:0	6	&&
water	64:12	0:0	6	(
water	64:13	0:0	6	s
op	64:14	0:0	6	->
water	64:16	0:0	6	avctx
op	64:21	0:0	6	->
water	64:23	0:0	6	slice_flags
op	64:35	0:0	6	&
water	64:37	0:0	6	SLICE_FLAG_ALLOW_FIELD
water	64:59	0:0	6	)
stmts	64:62	70:8	5	
water	64:62	0:0	6	{
if	65:12	69:12	6	(( ret =s -> avctx -> hwaccel -> end_frame (s -> avctx ) ) < 0)
cond	65:16	65:65	7	( ret =s -> avctx -> hwaccel -> end_frame (s -> avctx ) ) < 0
water	65:16	0:0	8	(
water	65:17	0:0	8	ret
op	65:21	0:0	8	=
call	65:23	65:60	8	s->avctx->hwaccel->end_frame
arg	65:52	65:60	9	s->avctx
water	65:52	0:0	10	s
op	65:53	0:0	10	->
water	65:55	0:0	10	avctx
water	65:61	0:0	8	)
op	65:63	0:0	8	<
water	65:65	0:0	8	0
stmts	65:68	69:12	7	
water	65:68	0:0	8	{
call	66:16	67:76	8	av_log
arg	66:23	66:28	9	avctx
water	66:23	0:0	10	avctx
arg	66:30	66:42	9	AV_LOG_ERROR
water	66:30	0:0	10	AV_LOG_ERROR
arg	67:23	67:76	9	"hardware accelerator failed to decode first field\n"
water	67:23	0:0	10	"hardware accelerator failed to decode first field\n"
water	67:77	0:0	8	;
return	68:16	68:26	8	ret
water	68:23	0:0	9	ret
water	69:12	0:0	8	}
water	70:8	0:0	6	}
for	71:8	76:8	4	(i = 0 ;i < 4;i ++)
forinit	71:13	71:18	5	i = 0 ;
water	71:13	0:0	6	i
op	71:15	0:0	6	=
water	71:17	0:0	6	0
water	71:18	0:0	6	;
cond	71:20	71:24	5	i < 4
water	71:20	0:0	6	i
op	71:22	0:0	6	<
water	71:24	0:0	6	4
forexpr	71:27	71:28	5	i ++
water	71:27	0:0	6	i
op	71:28	0:0	6	++
stmts	71:32	76:8	5	
water	71:32	0:0	6	{
water	72:12	0:0	6	s
op	72:13	0:0	6	->
water	72:15	0:0	6	current_picture
op	72:30	0:0	6	.
water	72:31	0:0	6	f
op	72:32	0:0	6	->
water	72:34	0:0	6	data
op	72:38	0:0	6	[
water	72:39	0:0	6	i
op	72:40	0:0	6	]
op	72:42	0:0	6	=
water	72:44	0:0	6	s
op	72:45	0:0	6	->
water	72:47	0:0	6	current_picture_ptr
op	72:66	0:0	6	->
water	72:68	0:0	6	f
op	72:69	0:0	6	->
water	72:71	0:0	6	data
op	72:75	0:0	6	[
water	72:76	0:0	6	i
op	72:77	0:0	6	]
water	72:78	0:0	6	;
if	73:12	75:58	6	(s -> picture_structure == PICT_BOTTOM_FIELD)
cond	73:16	73:40	7	s -> picture_structure == PICT_BOTTOM_FIELD
water	73:16	0:0	8	s
op	73:17	0:0	8	->
water	73:19	0:0	8	picture_structure
op	73:37	0:0	8	==
water	73:40	0:0	8	PICT_BOTTOM_FIELD
stmts	74:16	75:58	7	
water	74:16	0:0	8	s
op	74:17	0:0	8	->
water	74:19	0:0	8	current_picture
op	74:34	0:0	8	.
water	74:35	0:0	8	f
op	74:36	0:0	8	->
water	74:38	0:0	8	data
op	74:42	0:0	8	[
water	74:43	0:0	8	i
op	74:44	0:0	8	]
op	74:46	0:0	8	+=
water	75:20	0:0	8	s
op	75:21	0:0	8	->
water	75:23	0:0	8	current_picture_ptr
op	75:42	0:0	8	->
water	75:44	0:0	8	f
op	75:45	0:0	8	->
water	75:47	0:0	8	linesize
op	75:55	0:0	8	[
water	75:56	0:0	8	i
op	75:57	0:0	8	]
water	75:58	0:0	8	;
water	76:8	0:0	6	}
water	77:4	0:0	4	}
if	78:4	81:4	2	(avctx -> hwaccel)
cond	78:8	78:15	3	avctx -> hwaccel
water	78:8	0:0	4	avctx
op	78:13	0:0	4	->
water	78:15	0:0	4	hwaccel
stmts	78:24	81:4	3	
water	78:24	0:0	4	{
if	79:8	80:22	4	(( ret =avctx -> hwaccel -> start_frame (avctx ,buf ,buf_size ) ) < 0)
cond	79:12	79:72	5	( ret =avctx -> hwaccel -> start_frame (avctx ,buf ,buf_size ) ) < 0
water	79:12	0:0	6	(
water	79:13	0:0	6	ret
op	79:17	0:0	6	=
call	79:19	79:67	6	avctx->hwaccel->start_frame
arg	79:47	79:52	7	avctx
water	79:47	0:0	8	avctx
arg	79:54	79:57	7	buf
water	79:54	0:0	8	buf
arg	79:59	79:67	7	buf_size
water	79:59	0:0	8	buf_size
water	79:68	0:0	6	)
op	79:70	0:0	6	<
water	79:72	0:0	6	0
stmts	80:12	80:22	5	
return	80:12	80:22	6	ret
water	80:19	0:0	7	ret
water	81:4	0:0	4	}
return	82:4	82:12	2	0
water	82:11	0:0	3	0
