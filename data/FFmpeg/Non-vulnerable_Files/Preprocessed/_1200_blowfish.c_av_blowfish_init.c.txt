func	1:8	29:0	0	void	av_blowfish_init
params	1:29	0:0	1	
param	1:30	1:45	2	AVBlowfish *	ctx
param	1:47	1:65	2	const uint8_t *	key
param	1:67	1:78	2	int	key_len
stmnts	0:0	28:4	1	
decl	3:4	3:33	2	uint32_t	data
water	3:17	0:0	2	,
decl	3:4	3:33	2	uint32_t	data_l
water	3:25	0:0	2	,
decl	3:4	3:33	2	uint32_t	data_r
decl	4:4	4:15	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:15	2	int	j
water	4:12	0:0	2	,
decl	4:4	4:15	2	int	k
call	5:4	5:41	2	memcpy
arg	5:11	5:17	3	ctx->s
water	5:11	0:0	4	ctx
op	5:14	0:0	4	->
water	5:16	0:0	4	s
arg	5:19	5:25	3	orig_s
water	5:19	0:0	4	orig_s
arg	5:27	5:41	3	sizeof(orig_s)
op	5:27	0:0	4	sizeof
water	5:33	0:0	4	(
water	5:34	0:0	4	orig_s
water	5:40	0:0	4	)
water	5:42	0:0	2	;
water	6:4	0:0	2	j
op	6:6	0:0	2	=
water	6:8	0:0	2	0
water	6:9	0:0	2	;
for	7:4	15:4	2	(i = 0 ;i < AV_BF_ROUNDS + 2;++ i)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:35	3	i < AV_BF_ROUNDS + 2
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	AV_BF_ROUNDS
op	7:33	0:0	4	+
water	7:35	0:0	4	2
forexpr	7:38	7:40	3	++ i
op	7:38	0:0	4	++
water	7:40	0:0	4	i
stmts	7:43	15:4	3	
water	7:43	0:0	4	{
water	8:8	0:0	4	data
op	8:13	0:0	4	=
water	8:15	0:0	4	0
water	8:16	0:0	4	;
for	9:8	13:8	4	(k = 0 ;k < 4;k ++)
forinit	9:13	9:18	5	k = 0 ;
water	9:13	0:0	6	k
op	9:15	0:0	6	=
water	9:17	0:0	6	0
water	9:18	0:0	6	;
cond	9:20	9:24	5	k < 4
water	9:20	0:0	6	k
op	9:22	0:0	6	<
water	9:24	0:0	6	4
forexpr	9:27	9:28	5	k ++
water	9:27	0:0	6	k
op	9:28	0:0	6	++
stmts	9:32	13:8	5	
water	9:32	0:0	6	{
water	10:12	0:0	6	data
op	10:17	0:0	6	=
water	10:19	0:0	6	(
water	10:20	0:0	6	data
op	10:25	0:0	6	<<
water	10:28	0:0	6	8
water	10:29	0:0	6	)
op	10:31	0:0	6	|
water	10:33	0:0	6	key
op	10:36	0:0	6	[
water	10:37	0:0	6	j
op	10:38	0:0	6	]
water	10:39	0:0	6	;
if	11:12	12:21	6	(++ j >= key_len)
cond	11:16	11:23	7	++ j >= key_len
op	11:16	0:0	8	++
water	11:18	0:0	8	j
op	11:20	0:0	8	>=
water	11:23	0:0	8	key_len
stmts	12:16	12:21	7	
water	12:16	0:0	8	j
op	12:18	0:0	8	=
water	12:20	0:0	8	0
water	12:21	0:0	8	;
water	13:8	0:0	6	}
water	14:8	0:0	4	ctx
op	14:11	0:0	4	->
water	14:13	0:0	4	p
op	14:14	0:0	4	[
water	14:15	0:0	4	i
op	14:16	0:0	4	]
op	14:18	0:0	4	=
water	14:20	0:0	4	orig_p
op	14:26	0:0	4	[
water	14:27	0:0	4	i
op	14:28	0:0	4	]
op	14:30	0:0	4	^
water	14:32	0:0	4	data
water	14:36	0:0	4	;
water	15:4	0:0	4	}
water	16:4	0:0	2	data_l
op	16:11	0:0	2	=
water	16:13	0:0	2	data_r
op	16:20	0:0	2	=
water	16:22	0:0	2	0
water	16:23	0:0	2	;
for	17:4	21:4	2	(i = 0 ;i < AV_BF_ROUNDS + 2;i += 2)
forinit	17:9	17:14	3	i = 0 ;
water	17:9	0:0	4	i
op	17:11	0:0	4	=
water	17:13	0:0	4	0
water	17:14	0:0	4	;
cond	17:16	17:35	3	i < AV_BF_ROUNDS + 2
water	17:16	0:0	4	i
op	17:18	0:0	4	<
water	17:20	0:0	4	AV_BF_ROUNDS
op	17:33	0:0	4	+
water	17:35	0:0	4	2
forexpr	17:38	17:43	3	i += 2
water	17:38	0:0	4	i
op	17:40	0:0	4	+=
water	17:43	0:0	4	2
stmts	17:46	21:4	3	
water	17:46	0:0	4	{
call	18:8	18:54	4	av_blowfish_crypt_ecb
arg	18:30	18:33	5	ctx
water	18:30	0:0	6	ctx
arg	18:35	18:42	5	&data_l
op	18:35	0:0	6	&
water	18:36	0:0	6	data_l
arg	18:44	18:51	5	&data_r
op	18:44	0:0	6	&
water	18:45	0:0	6	data_r
arg	18:53	18:54	5	0
water	18:53	0:0	6	0
water	18:55	0:0	4	;
water	19:8	0:0	4	ctx
op	19:11	0:0	4	->
water	19:13	0:0	4	p
op	19:14	0:0	4	[
water	19:15	0:0	4	i
op	19:16	0:0	4	]
op	19:22	0:0	4	=
water	19:24	0:0	4	data_l
water	19:30	0:0	4	;
water	20:8	0:0	4	ctx
op	20:11	0:0	4	->
water	20:13	0:0	4	p
op	20:14	0:0	4	[
water	20:15	0:0	4	i
op	20:17	0:0	4	+
water	20:19	0:0	4	1
op	20:20	0:0	4	]
op	20:22	0:0	4	=
water	20:24	0:0	4	data_r
water	20:30	0:0	4	;
water	21:4	0:0	4	}
for	22:4	28:4	2	(i = 0 ;i < 4;++ i)
forinit	22:9	22:14	3	i = 0 ;
water	22:9	0:0	4	i
op	22:11	0:0	4	=
water	22:13	0:0	4	0
water	22:14	0:0	4	;
cond	22:16	22:20	3	i < 4
water	22:16	0:0	4	i
op	22:18	0:0	4	<
water	22:20	0:0	4	4
forexpr	22:23	22:25	3	++ i
op	22:23	0:0	4	++
water	22:25	0:0	4	i
stmts	22:28	28:4	3	
water	22:28	0:0	4	{
for	23:8	27:8	4	(j = 0 ;j < 256;j += 2)
forinit	23:13	23:18	5	j = 0 ;
water	23:13	0:0	6	j
op	23:15	0:0	6	=
water	23:17	0:0	6	0
water	23:18	0:0	6	;
cond	23:20	23:24	5	j < 256
water	23:20	0:0	6	j
op	23:22	0:0	6	<
water	23:24	0:0	6	256
forexpr	23:29	23:34	5	j += 2
water	23:29	0:0	6	j
op	23:31	0:0	6	+=
water	23:34	0:0	6	2
stmts	23:37	27:8	5	
water	23:37	0:0	6	{
call	24:12	24:58	6	av_blowfish_crypt_ecb
arg	24:34	24:37	7	ctx
water	24:34	0:0	8	ctx
arg	24:39	24:46	7	&data_l
op	24:39	0:0	8	&
water	24:40	0:0	8	data_l
arg	24:48	24:55	7	&data_r
op	24:48	0:0	8	&
water	24:49	0:0	8	data_r
arg	24:57	24:58	7	0
water	24:57	0:0	8	0
water	24:59	0:0	6	;
water	25:12	0:0	6	ctx
op	25:15	0:0	6	->
water	25:17	0:0	6	s
op	25:18	0:0	6	[
water	25:19	0:0	6	i
op	25:20	0:0	6	]
op	25:21	0:0	6	[
water	25:22	0:0	6	j
op	25:23	0:0	6	]
op	25:29	0:0	6	=
water	25:31	0:0	6	data_l
water	25:37	0:0	6	;
water	26:12	0:0	6	ctx
op	26:15	0:0	6	->
water	26:17	0:0	6	s
op	26:18	0:0	6	[
water	26:19	0:0	6	i
op	26:20	0:0	6	]
op	26:21	0:0	6	[
water	26:22	0:0	6	j
op	26:24	0:0	6	+
water	26:26	0:0	6	1
op	26:27	0:0	6	]
op	26:29	0:0	6	=
water	26:31	0:0	6	data_r
water	26:37	0:0	6	;
water	27:8	0:0	6	}
water	28:4	0:0	4	}
