func	1:0	19:0	0	static void	check_pred4x4
params	1:25	0:0	1	
param	1:26	1:44	2	H264PredContext *	h
param	1:46	1:59	2	uint8_t *	buf0
param	1:61	1:74	2	uint8_t *	buf1
param	2:26	2:35	2	int	codec
param	2:37	2:54	2	int	chroma_format
param	2:56	2:69	2	int	bit_depth
stmnts	4:4	18:4	1	
if	4:4	18:4	2	(chroma_format == 1)
cond	4:8	4:25	3	chroma_format == 1
water	4:8	0:0	4	chroma_format
op	4:22	0:0	4	==
water	4:25	0:0	4	1
stmts	4:28	18:4	3	
water	4:28	0:0	4	{
decl	5:8	5:39	4	uint8_t	*topright
op	5:26	0:0	4	=
water	5:28	0:0	4	buf0
op	5:33	0:0	4	+
water	5:35	0:0	4	2
op	5:36	0:0	4	*
water	5:37	0:0	4	16
decl	6:8	6:21	4	int	pred_mode
call	7:8	7:82	4	declare_func
arg	7:21	7:25	5	void
water	7:21	0:0	6	void
arg	7:27	7:39	5	uint8_t*src
water	7:27	0:0	6	uint8_t
op	7:35	0:0	6	*
water	7:36	0:0	6	src
arg	7:41	7:64	5	constuint8_t*topright
water	7:41	0:0	6	const
water	7:47	0:0	6	uint8_t
op	7:55	0:0	6	*
water	7:56	0:0	6	topright
arg	7:66	7:82	5	ptrdiff_tstride
water	7:66	0:0	6	ptrdiff_t
water	7:76	0:0	6	stride
water	7:83	0:0	4	;
for	8:8	17:8	4	(pred_mode = 0 ;pred_mode < 15;pred_mode ++)
forinit	8:13	8:26	5	pred_mode = 0 ;
water	8:13	0:0	6	pred_mode
op	8:23	0:0	6	=
water	8:25	0:0	6	0
water	8:26	0:0	6	;
cond	8:28	8:40	5	pred_mode < 15
water	8:28	0:0	6	pred_mode
op	8:38	0:0	6	<
water	8:40	0:0	6	15
forexpr	8:44	8:53	5	pred_mode ++
water	8:44	0:0	6	pred_mode
op	8:53	0:0	6	++
stmts	8:57	17:8	5	
water	8:57	0:0	6	{
if	9:12	16:12	6	(check_pred_func (h -> pred4x4 [ pred_mode ] ,"4x4" ,pred4x4_modes [ codec ] [ pred_mode ] ))
cond	9:16	9:93	7	check_pred_func (h -> pred4x4 [ pred_mode ] ,"4x4" ,pred4x4_modes [ codec ] [ pred_mode ] )
call	9:16	9:93	8	check_pred_func
arg	9:32	9:53	9	h->pred4x4[pred_mode]
water	9:32	0:0	10	h
op	9:33	0:0	10	->
water	9:35	0:0	10	pred4x4
op	9:42	0:0	10	[
water	9:43	0:0	10	pred_mode
op	9:52	0:0	10	]
arg	9:55	9:60	9	"4x4"
water	9:55	0:0	10	"4x4"
arg	9:62	9:93	9	pred4x4_modes[codec][pred_mode]
water	9:62	0:0	10	pred4x4_modes
op	9:75	0:0	10	[
water	9:76	0:0	10	codec
op	9:81	0:0	10	]
op	9:82	0:0	10	[
water	9:83	0:0	10	pred_mode
op	9:92	0:0	10	]
stmts	9:96	16:12	7	
water	9:96	0:0	8	{
call	10:16	10:34	8	randomize_buffers
water	10:35	0:0	8	;
call	11:16	11:56	8	call_ref
arg	11:25	11:29	9	src0
water	11:25	0:0	10	src0
arg	11:31	11:39	9	topright
water	11:31	0:0	10	topright
arg	11:41	11:56	9	12*SIZEOF_PIXEL
water	11:41	0:0	10	12
op	11:43	0:0	10	*
water	11:44	0:0	10	SIZEOF_PIXEL
water	11:57	0:0	8	;
call	12:16	12:56	8	call_new
arg	12:25	12:29	9	src1
water	12:25	0:0	10	src1
arg	12:31	12:39	9	topright
water	12:31	0:0	10	topright
arg	12:41	12:56	9	12*SIZEOF_PIXEL
water	12:41	0:0	10	12
op	12:43	0:0	10	*
water	12:44	0:0	10	SIZEOF_PIXEL
water	12:57	0:0	8	;
if	13:16	14:26	8	(memcmp (buf0 ,buf1 ,BUF_SIZE ))
cond	13:20	13:47	9	memcmp (buf0 ,buf1 ,BUF_SIZE )
call	13:20	13:47	10	memcmp
arg	13:27	13:31	11	buf0
water	13:27	0:0	12	buf0
arg	13:33	13:37	11	buf1
water	13:33	0:0	12	buf1
arg	13:39	13:47	11	BUF_SIZE
water	13:39	0:0	12	BUF_SIZE
stmts	14:20	14:26	9	
call	14:20	14:25	10	fail
water	14:26	0:0	10	;
call	15:16	15:57	8	bench_new
arg	15:26	15:30	9	src1
water	15:26	0:0	10	src1
arg	15:32	15:40	9	topright
water	15:32	0:0	10	topright
arg	15:42	15:57	9	12*SIZEOF_PIXEL
water	15:42	0:0	10	12
op	15:44	0:0	10	*
water	15:45	0:0	10	SIZEOF_PIXEL
water	15:58	0:0	8	;
water	16:12	0:0	8	}
water	17:8	0:0	6	}
water	18:4	0:0	4	}
