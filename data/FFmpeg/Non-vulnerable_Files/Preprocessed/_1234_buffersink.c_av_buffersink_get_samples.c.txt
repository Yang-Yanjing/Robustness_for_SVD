func	1:4	37:0	0	attribute_align_arg	av_buffersink_get_samples
params	1:49	0:0	1	
param	1:50	1:70	2	AVFilterContext *	ctx
param	2:50	2:64	2	AVFrame *	frame
param	2:66	2:80	2	int	nb_samples
stmnts	0:0	36:14	1	
decl	4:4	4:36	2	BufferSinkContext	*s
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	priv
decl	5:4	5:41	2	AVFilterLink	*link
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	inputs
op	5:38	0:0	2	[
water	5:39	0:0	2	0
op	5:40	0:0	2	]
decl	6:4	6:22	2	AVFrame	*cur_frame
decl	7:4	7:15	2	int	ret
op	7:12	0:0	2	=
water	7:14	0:0	2	0
if	8:4	12:4	2	(! s -> audio_fifo)
cond	8:8	8:12	3	! s -> audio_fifo
op	8:8	0:0	4	!
water	8:9	0:0	4	s
op	8:10	0:0	4	->
water	8:12	0:0	4	audio_fifo
stmts	8:24	12:4	3	
water	8:24	0:0	4	{
decl	9:8	9:40	4	int	nb_channels
op	9:24	0:0	4	=
water	9:26	0:0	4	link
op	9:30	0:0	4	->
water	9:32	0:0	4	channels
if	10:8	11:34	4	(! ( s -> audio_fifo =av_audio_fifo_alloc (link -> format ,nb_channels ,nb_samples ) ))
cond	10:12	10:88	5	! ( s -> audio_fifo =av_audio_fifo_alloc (link -> format ,nb_channels ,nb_samples ) )
op	10:12	0:0	6	!
water	10:13	0:0	6	(
water	10:14	0:0	6	s
op	10:15	0:0	6	->
water	10:17	0:0	6	audio_fifo
op	10:28	0:0	6	=
call	10:30	10:87	6	av_audio_fifo_alloc
arg	10:50	10:62	7	link->format
water	10:50	0:0	8	link
op	10:54	0:0	8	->
water	10:56	0:0	8	format
arg	10:64	10:75	7	nb_channels
water	10:64	0:0	8	nb_channels
arg	10:77	10:87	7	nb_samples
water	10:77	0:0	8	nb_samples
water	10:88	0:0	6	)
stmts	11:12	11:34	5	
return	11:12	11:34	6	AVERROR(ENOMEM)
call	11:19	11:33	7	AVERROR
arg	11:27	11:33	8	ENOMEM
water	11:27	0:0	9	ENOMEM
water	12:4	0:0	4	}
while	13:4	35:4	2	(ret >= 0)
cond	13:11	13:18	3	ret >= 0
water	13:11	0:0	4	ret
op	13:15	0:0	4	>=
water	13:18	0:0	4	0
stmts	13:21	35:4	3	
water	13:21	0:0	4	{
if	14:8	15:57	4	(av_audio_fifo_size (s -> audio_fifo ) >= nb_samples)
cond	14:12	14:49	5	av_audio_fifo_size (s -> audio_fifo ) >= nb_samples
call	14:12	14:44	6	av_audio_fifo_size
arg	14:31	14:44	7	s->audio_fifo
water	14:31	0:0	8	s
op	14:32	0:0	8	->
water	14:34	0:0	8	audio_fifo
op	14:46	0:0	6	>=
water	14:49	0:0	6	nb_samples
stmts	15:12	15:57	5	
return	15:12	15:57	6	read_from_fifo(ctx,frame,nb_samples)
call	15:19	15:56	7	read_from_fifo
arg	15:34	15:37	8	ctx
water	15:34	0:0	9	ctx
arg	15:39	15:44	8	frame
water	15:39	0:0	9	frame
arg	15:46	15:56	8	nb_samples
water	15:46	0:0	9	nb_samples
if	16:8	17:34	4	(! ( cur_frame =av_frame_alloc ( ) ))
cond	16:12	16:42	5	! ( cur_frame =av_frame_alloc ( ) )
op	16:12	0:0	6	!
water	16:13	0:0	6	(
water	16:14	0:0	6	cur_frame
op	16:24	0:0	6	=
call	16:26	16:41	6	av_frame_alloc
water	16:42	0:0	6	)
stmts	17:12	17:34	5	
return	17:12	17:34	6	AVERROR(ENOMEM)
call	17:19	17:33	7	AVERROR
arg	17:27	17:33	8	ENOMEM
water	17:27	0:0	9	ENOMEM
water	18:8	0:0	4	ret
op	18:12	0:0	4	=
call	18:14	18:61	4	av_buffersink_get_frame_flags
arg	18:44	18:47	5	ctx
water	18:44	0:0	6	ctx
arg	18:49	18:58	5	cur_frame
water	18:49	0:0	6	cur_frame
arg	18:60	18:61	5	0
water	18:60	0:0	6	0
water	18:62	0:0	4	;
if	19:8	22:8	4	(ret == AVERROR_EOF &&av_audio_fifo_size (s -> audio_fifo ))
cond	19:12	19:66	5	ret == AVERROR_EOF &&av_audio_fifo_size (s -> audio_fifo )
water	19:12	0:0	6	ret
op	19:16	0:0	6	==
water	19:19	0:0	6	AVERROR_EOF
op	19:31	0:0	6	&&
call	19:34	19:66	6	av_audio_fifo_size
arg	19:53	19:66	7	s->audio_fifo
water	19:53	0:0	8	s
op	19:54	0:0	8	->
water	19:56	0:0	8	audio_fifo
stmts	19:69	22:8	5	
water	19:69	0:0	6	{
call	20:12	20:36	6	av_frame_free
arg	20:26	20:36	7	&cur_frame
op	20:26	0:0	8	&
water	20:27	0:0	8	cur_frame
water	20:37	0:0	6	;
return	21:12	21:80	6	read_from_fifo(ctx,frame,av_audio_fifo_size(s->audio_fifo))
call	21:19	21:79	7	read_from_fifo
arg	21:34	21:37	8	ctx
water	21:34	0:0	9	ctx
arg	21:39	21:44	8	frame
water	21:39	0:0	9	frame
arg	21:46	21:79	8	av_audio_fifo_size(s->audio_fifo)
call	21:46	21:78	9	av_audio_fifo_size
arg	21:65	21:78	10	s->audio_fifo
water	21:65	0:0	11	s
op	21:66	0:0	11	->
water	21:68	0:0	11	audio_fifo
water	22:8	0:0	6	}
else	22:10	25:8	4
stmts	22:15	25:8	5	
if	22:15	25:8	6	(ret < 0)
cond	22:19	22:25	7	ret < 0
water	22:19	0:0	8	ret
op	22:23	0:0	8	<
water	22:25	0:0	8	0
stmts	22:28	25:8	7	
water	22:28	0:0	8	{
call	23:12	23:36	8	av_frame_free
arg	23:26	23:36	9	&cur_frame
op	23:26	0:0	10	&
water	23:27	0:0	10	cur_frame
water	23:37	0:0	8	;
return	24:12	24:22	8	ret
water	24:19	0:0	9	ret
water	25:8	0:0	8	}
if	26:8	31:8	4	(cur_frame -> pts != AV_NOPTS_VALUE)
cond	26:12	26:30	5	cur_frame -> pts != AV_NOPTS_VALUE
water	26:12	0:0	6	cur_frame
op	26:21	0:0	6	->
water	26:23	0:0	6	pts
op	26:27	0:0	6	!=
water	26:30	0:0	6	AV_NOPTS_VALUE
stmts	26:46	31:8	5	
water	26:46	0:0	6	{
water	27:12	0:0	6	s
op	27:13	0:0	6	->
water	27:15	0:0	6	next_pts
op	27:24	0:0	6	=
water	27:26	0:0	6	cur_frame
op	27:35	0:0	6	->
water	27:37	0:0	6	pts
op	27:41	0:0	6	-
call	28:26	30:54	6	av_rescale_q
arg	28:39	28:72	7	av_audio_fifo_size(s->audio_fifo)
call	28:39	28:71	8	av_audio_fifo_size
arg	28:58	28:71	9	s->audio_fifo
water	28:58	0:0	10	s
op	28:59	0:0	10	->
water	28:61	0:0	10	audio_fifo
arg	29:39	29:75	7	(AVRational){1,link->sample_rate}
water	29:39	0:0	8	(
water	29:40	0:0	8	AVRational
water	29:50	0:0	8	)
water	29:51	0:0	8	{
water	29:53	0:0	8	1
water	29:54	0:0	8	,
water	29:56	0:0	8	link
op	29:60	0:0	8	->
water	29:62	0:0	8	sample_rate
water	29:74	0:0	8	}
arg	30:39	30:54	7	link->time_base
water	30:39	0:0	8	link
op	30:43	0:0	8	->
water	30:45	0:0	8	time_base
water	30:55	0:0	6	;
water	31:8	0:0	6	}
water	32:8	0:0	4	ret
op	32:12	0:0	4	=
call	32:14	33:55	4	av_audio_fifo_write
arg	32:34	32:47	5	s->audio_fifo
water	32:34	0:0	6	s
op	32:35	0:0	6	->
water	32:37	0:0	6	audio_fifo
arg	32:49	32:81	5	(void**)cur_frame->extended_data
water	32:49	0:0	6	(
water	32:50	0:0	6	void
op	32:54	0:0	6	*
op	32:55	0:0	6	*
water	32:56	0:0	6	)
water	32:57	0:0	6	cur_frame
op	32:66	0:0	6	->
water	32:68	0:0	6	extended_data
arg	33:34	33:55	5	cur_frame->nb_samples
water	33:34	0:0	6	cur_frame
op	33:43	0:0	6	->
water	33:45	0:0	6	nb_samples
water	33:56	0:0	4	;
call	34:8	34:32	4	av_frame_free
arg	34:22	34:32	5	&cur_frame
op	34:22	0:0	6	&
water	34:23	0:0	6	cur_frame
water	34:33	0:0	4	;
water	35:4	0:0	4	}
return	36:4	36:14	2	ret
water	36:11	0:0	3	ret
