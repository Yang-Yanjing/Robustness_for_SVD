func	1:0	71:0	0	static int	gen_connect
params	1:22	0:0	1	
param	1:23	1:36	2	URLContext *	s
param	1:38	1:53	2	RTMPContext *	rt
stmnts	0:0	70:40	1	
decl	3:4	3:18	2	RTMPPacket	pkt
decl	4:4	4:14	2	uint8_t	*p
decl	5:4	5:11	2	int	ret
if	6:4	8:18	2	(( ret =ff_rtmp_packet_create (& pkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,4096 + APP_MAX_LENGTH ) ) < 0)
cond	6:8	7:66	3	( ret =ff_rtmp_packet_create (& pkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,4096 + APP_MAX_LENGTH ) ) < 0
water	6:8	0:0	4	(
water	6:9	0:0	4	ret
op	6:13	0:0	4	=
call	6:15	7:61	4	ff_rtmp_packet_create
arg	6:37	6:41	5	&pkt
op	6:37	0:0	6	&
water	6:38	0:0	6	pkt
arg	6:43	6:62	5	RTMP_SYSTEM_CHANNEL
water	6:43	0:0	6	RTMP_SYSTEM_CHANNEL
arg	6:64	6:78	5	RTMP_PT_INVOKE
water	6:64	0:0	6	RTMP_PT_INVOKE
arg	7:37	7:38	5	0
water	7:37	0:0	6	0
arg	7:40	7:61	5	4096+APP_MAX_LENGTH
water	7:40	0:0	6	4096
op	7:45	0:0	6	+
water	7:47	0:0	6	APP_MAX_LENGTH
water	7:62	0:0	4	)
op	7:64	0:0	4	<
water	7:66	0:0	4	0
stmts	8:8	8:18	3	
return	8:8	8:18	4	ret
water	8:15	0:0	5	ret
water	9:4	0:0	2	p
op	9:6	0:0	2	=
water	9:8	0:0	2	pkt
op	9:11	0:0	2	.
water	9:12	0:0	2	data
water	9:16	0:0	2	;
call	10:4	10:37	2	ff_amf_write_string
arg	10:24	10:26	3	&p
op	10:24	0:0	4	&
water	10:25	0:0	4	p
arg	10:28	10:37	3	"connect"
water	10:28	0:0	4	"connect"
water	10:38	0:0	2	;
call	11:4	11:44	2	ff_amf_write_number
arg	11:24	11:26	3	&p
op	11:24	0:0	4	&
water	11:25	0:0	4	p
arg	11:28	11:44	3	++rt->nb_invokes
op	11:28	0:0	4	++
water	11:30	0:0	4	rt
op	11:32	0:0	4	->
water	11:34	0:0	4	nb_invokes
water	11:45	0:0	2	;
call	12:4	12:32	2	ff_amf_write_object_start
arg	12:30	12:32	3	&p
op	12:30	0:0	4	&
water	12:31	0:0	4	p
water	12:33	0:0	2	;
call	13:4	13:37	2	ff_amf_write_field_name
arg	13:28	13:30	3	&p
op	13:28	0:0	4	&
water	13:29	0:0	4	p
arg	13:32	13:37	3	"app"
water	13:32	0:0	4	"app"
water	13:38	0:0	2	;
call	14:4	14:53	2	ff_amf_write_string2
arg	14:25	14:27	3	&p
op	14:25	0:0	4	&
water	14:26	0:0	4	p
arg	14:29	14:36	3	rt->app
water	14:29	0:0	4	rt
op	14:31	0:0	4	->
water	14:33	0:0	4	app
arg	14:38	14:53	3	rt->auth_params
water	14:38	0:0	4	rt
op	14:40	0:0	4	->
water	14:42	0:0	4	auth_params
water	14:54	0:0	2	;
if	15:4	18:4	2	(! rt -> is_input)
cond	15:8	15:13	3	! rt -> is_input
op	15:8	0:0	4	!
water	15:9	0:0	4	rt
op	15:11	0:0	4	->
water	15:13	0:0	4	is_input
stmts	15:23	18:4	3	
water	15:23	0:0	4	{
call	16:8	16:42	4	ff_amf_write_field_name
arg	16:32	16:34	5	&p
op	16:32	0:0	6	&
water	16:33	0:0	6	p
arg	16:36	16:42	5	"type"
water	16:36	0:0	6	"type"
water	16:43	0:0	4	;
call	17:8	17:44	4	ff_amf_write_string
arg	17:28	17:30	5	&p
op	17:28	0:0	6	&
water	17:29	0:0	6	p
arg	17:32	17:44	5	"nonprivate"
water	17:32	0:0	6	"nonprivate"
water	17:45	0:0	4	;
water	18:4	0:0	4	}
call	19:4	19:42	2	ff_amf_write_field_name
arg	19:28	19:30	3	&p
op	19:28	0:0	4	&
water	19:29	0:0	4	p
arg	19:32	19:42	3	"flashVer"
water	19:32	0:0	4	"flashVer"
water	19:43	0:0	2	;
call	20:4	20:40	2	ff_amf_write_string
arg	20:24	20:26	3	&p
op	20:24	0:0	4	&
water	20:25	0:0	4	p
arg	20:28	20:40	3	rt->flashver
water	20:28	0:0	4	rt
op	20:30	0:0	4	->
water	20:32	0:0	4	flashver
water	20:41	0:0	2	;
if	21:4	24:4	2	(rt -> swfurl)
cond	21:8	21:12	3	rt -> swfurl
water	21:8	0:0	4	rt
op	21:10	0:0	4	->
water	21:12	0:0	4	swfurl
stmts	21:20	24:4	3	
water	21:20	0:0	4	{
call	22:8	22:44	4	ff_amf_write_field_name
arg	22:32	22:34	5	&p
op	22:32	0:0	6	&
water	22:33	0:0	6	p
arg	22:36	22:44	5	"swfUrl"
water	22:36	0:0	6	"swfUrl"
water	22:45	0:0	4	;
call	23:8	23:42	4	ff_amf_write_string
arg	23:28	23:30	5	&p
op	23:28	0:0	6	&
water	23:29	0:0	6	p
arg	23:32	23:42	5	rt->swfurl
water	23:32	0:0	6	rt
op	23:34	0:0	6	->
water	23:36	0:0	6	swfurl
water	23:43	0:0	4	;
water	24:4	0:0	4	}
call	25:4	25:39	2	ff_amf_write_field_name
arg	25:28	25:30	3	&p
op	25:28	0:0	4	&
water	25:29	0:0	4	p
arg	25:32	25:39	3	"tcUrl"
water	25:32	0:0	4	"tcUrl"
water	25:40	0:0	2	;
call	26:4	26:55	2	ff_amf_write_string2
arg	26:25	26:27	3	&p
op	26:25	0:0	4	&
water	26:26	0:0	4	p
arg	26:29	26:38	3	rt->tcurl
water	26:29	0:0	4	rt
op	26:31	0:0	4	->
water	26:33	0:0	4	tcurl
arg	26:40	26:55	3	rt->auth_params
water	26:40	0:0	4	rt
op	26:42	0:0	4	->
water	26:44	0:0	4	auth_params
water	26:56	0:0	2	;
if	27:4	45:4	2	(rt -> is_input)
cond	27:8	27:12	3	rt -> is_input
water	27:8	0:0	4	rt
op	27:10	0:0	4	->
water	27:12	0:0	4	is_input
stmts	27:22	45:4	3	
water	27:22	0:0	4	{
call	28:8	28:42	4	ff_amf_write_field_name
arg	28:32	28:34	5	&p
op	28:32	0:0	6	&
water	28:33	0:0	6	p
arg	28:36	28:42	5	"fpad"
water	28:36	0:0	6	"fpad"
water	28:43	0:0	4	;
call	29:8	29:31	4	ff_amf_write_bool
arg	29:26	29:28	5	&p
op	29:26	0:0	6	&
water	29:27	0:0	6	p
arg	29:30	29:31	5	0
water	29:30	0:0	6	0
water	29:32	0:0	4	;
call	30:8	30:50	4	ff_amf_write_field_name
arg	30:32	30:34	5	&p
op	30:32	0:0	6	&
water	30:33	0:0	6	p
arg	30:36	30:50	5	"capabilities"
water	30:36	0:0	6	"capabilities"
water	30:51	0:0	4	;
call	31:8	31:36	4	ff_amf_write_number
arg	31:28	31:30	5	&p
op	31:28	0:0	6	&
water	31:29	0:0	6	p
arg	31:32	31:36	5	15.0
water	31:32	0:0	6	15
op	31:34	0:0	6	.
water	31:35	0:0	6	0
water	31:37	0:0	4	;
call	35:8	35:49	4	ff_amf_write_field_name
arg	35:32	35:34	5	&p
op	35:32	0:0	6	&
water	35:33	0:0	6	p
arg	35:36	35:49	5	"audioCodecs"
water	35:36	0:0	6	"audioCodecs"
water	35:50	0:0	4	;
call	36:8	36:38	4	ff_amf_write_number
arg	36:28	36:30	5	&p
op	36:28	0:0	6	&
water	36:29	0:0	6	p
arg	36:32	36:38	5	4071.0
water	36:32	0:0	6	4071
op	36:36	0:0	6	.
water	36:37	0:0	6	0
water	36:39	0:0	4	;
call	37:8	37:49	4	ff_amf_write_field_name
arg	37:32	37:34	5	&p
op	37:32	0:0	6	&
water	37:33	0:0	6	p
arg	37:36	37:49	5	"videoCodecs"
water	37:36	0:0	6	"videoCodecs"
water	37:50	0:0	4	;
call	38:8	38:37	4	ff_amf_write_number
arg	38:28	38:30	5	&p
op	38:28	0:0	6	&
water	38:29	0:0	6	p
arg	38:32	38:37	5	252.0
water	38:32	0:0	6	252
op	38:35	0:0	6	.
water	38:36	0:0	6	0
water	38:38	0:0	4	;
call	39:8	39:51	4	ff_amf_write_field_name
arg	39:32	39:34	5	&p
op	39:32	0:0	6	&
water	39:33	0:0	6	p
arg	39:36	39:51	5	"videoFunction"
water	39:36	0:0	6	"videoFunction"
water	39:52	0:0	4	;
call	40:8	40:35	4	ff_amf_write_number
arg	40:28	40:30	5	&p
op	40:28	0:0	6	&
water	40:29	0:0	6	p
arg	40:32	40:35	5	1.0
water	40:32	0:0	6	1
op	40:33	0:0	6	.
water	40:34	0:0	6	0
water	40:36	0:0	4	;
if	41:8	44:8	4	(rt -> pageurl)
cond	41:12	41:16	5	rt -> pageurl
water	41:12	0:0	6	rt
op	41:14	0:0	6	->
water	41:16	0:0	6	pageurl
stmts	41:25	44:8	5	
water	41:25	0:0	6	{
call	42:12	42:49	6	ff_amf_write_field_name
arg	42:36	42:38	7	&p
op	42:36	0:0	8	&
water	42:37	0:0	8	p
arg	42:40	42:49	7	"pageUrl"
water	42:40	0:0	8	"pageUrl"
water	42:50	0:0	6	;
call	43:12	43:47	6	ff_amf_write_string
arg	43:32	43:34	7	&p
op	43:32	0:0	8	&
water	43:33	0:0	8	p
arg	43:36	43:47	7	rt->pageurl
water	43:36	0:0	8	rt
op	43:38	0:0	8	->
water	43:40	0:0	8	pageurl
water	43:48	0:0	6	;
water	44:8	0:0	6	}
water	45:4	0:0	4	}
call	46:4	46:30	2	ff_amf_write_object_end
arg	46:28	46:30	3	&p
op	46:28	0:0	4	&
water	46:29	0:0	4	p
water	46:31	0:0	2	;
if	47:4	68:4	2	(rt -> conn)
cond	47:8	47:12	3	rt -> conn
water	47:8	0:0	4	rt
op	47:10	0:0	4	->
water	47:12	0:0	4	conn
stmts	47:18	68:4	3	
water	47:18	0:0	4	{
decl	48:8	48:30	4	char	*param
op	48:20	0:0	4	=
water	48:22	0:0	4	rt
op	48:24	0:0	4	->
water	48:26	0:0	4	conn
while	50:8	67:8	4	(param)
cond	50:15	50:15	5	param
water	50:15	0:0	6	param
stmts	50:22	67:8	5	
water	50:22	0:0	6	{
decl	51:12	51:21	6	char	*sep
water	52:12	0:0	6	param
op	52:18	0:0	6	+=
call	52:21	52:38	6	strspn
arg	52:28	52:33	7	param
water	52:28	0:0	8	param
arg	52:35	52:38	7	" "
water	52:35	0:0	8	" "
water	52:39	0:0	6	;
if	53:12	54:21	6	(! * param)
cond	53:16	53:18	7	! * param
op	53:16	0:0	8	!
op	53:17	0:0	8	*
water	53:18	0:0	8	param
stmts	54:16	54:21	7	
break	54:16	54:21	8	
water	55:12	0:0	6	sep
op	55:16	0:0	6	=
call	55:18	55:35	6	strchr
arg	55:25	55:30	7	param
water	55:25	0:0	8	param
arg	55:32	55:35	7	' '
water	55:32	0:0	8	' '
water	55:36	0:0	6	;
if	56:12	57:27	6	(sep)
cond	56:16	56:16	7	sep
water	56:16	0:0	8	sep
stmts	57:16	57:27	7	
op	57:16	0:0	8	*
water	57:17	0:0	8	sep
op	57:21	0:0	8	=
water	57:23	0:0	8	'\0'
water	57:27	0:0	8	;
if	58:12	62:12	6	(( ret =rtmp_write_amf_data (s ,param ,& p ) ) < 0)
cond	58:16	58:60	7	( ret =rtmp_write_amf_data (s ,param ,& p ) ) < 0
water	58:16	0:0	8	(
water	58:17	0:0	8	ret
op	58:21	0:0	8	=
call	58:23	58:55	8	rtmp_write_amf_data
arg	58:43	58:44	9	s
water	58:43	0:0	10	s
arg	58:46	58:51	9	param
water	58:46	0:0	10	param
arg	58:53	58:55	9	&p
op	58:53	0:0	10	&
water	58:54	0:0	10	p
water	58:56	0:0	8	)
op	58:58	0:0	8	<
water	58:60	0:0	8	0
stmts	58:63	62:12	7	
water	58:63	0:0	8	{
call	60:16	60:43	8	ff_rtmp_packet_destroy
arg	60:39	60:43	9	&pkt
op	60:39	0:0	10	&
water	60:40	0:0	10	pkt
water	60:44	0:0	8	;
return	61:16	61:26	8	ret
water	61:23	0:0	9	ret
water	62:12	0:0	8	}
if	63:12	64:31	6	(sep)
cond	63:16	63:16	7	sep
water	63:16	0:0	8	sep
stmts	64:16	64:31	7	
water	64:16	0:0	8	param
op	64:22	0:0	8	=
water	64:24	0:0	8	sep
op	64:28	0:0	8	+
water	64:30	0:0	8	1
water	64:31	0:0	8	;
else	65:12	66:21	6
stmts	66:16	66:21	7	
break	66:16	66:21	8	
water	67:8	0:0	6	}
water	68:4	0:0	4	}
water	69:4	0:0	2	pkt
op	69:7	0:0	2	.
water	69:8	0:0	2	size
op	69:13	0:0	2	=
water	69:15	0:0	2	p
op	69:17	0:0	2	-
water	69:19	0:0	2	pkt
op	69:22	0:0	2	.
water	69:23	0:0	2	data
water	69:27	0:0	2	;
return	70:4	70:40	2	rtmp_send_packet(rt,&pkt,1)
call	70:11	70:39	3	rtmp_send_packet
arg	70:28	70:30	4	rt
water	70:28	0:0	5	rt
arg	70:32	70:36	4	&pkt
op	70:32	0:0	5	&
water	70:33	0:0	5	pkt
arg	70:38	70:39	4	1
water	70:38	0:0	5	1
