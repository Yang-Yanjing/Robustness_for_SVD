func	1:0	37:0	0	static inline int	mpeg4_decode_dc
params	1:33	0:0	1	
param	1:34	1:51	2	MpegEncContext *	s
param	1:53	1:58	2	int	n
param	1:60	1:72	2	int *	dir_ptr
stmnts	0:0	36:52	1	
decl	3:4	3:19	2	int	level
water	3:13	0:0	2	,
decl	3:4	3:19	2	int	code
if	4:4	5:61	2	(n < 4)
cond	4:8	4:12	3	n < 4
water	4:8	0:0	4	n
op	4:10	0:0	4	<
water	4:12	0:0	4	4
stmts	5:8	5:61	3	
water	5:8	0:0	4	code
op	5:13	0:0	4	=
call	5:15	5:60	4	get_vlc2
arg	5:24	5:30	5	&s->gb
op	5:24	0:0	6	&
water	5:25	0:0	6	s
op	5:26	0:0	6	->
water	5:28	0:0	6	gb
arg	5:32	5:44	5	dc_lum.table
water	5:32	0:0	6	dc_lum
op	5:38	0:0	6	.
water	5:39	0:0	6	table
arg	5:46	5:57	5	DC_VLC_BITS
water	5:46	0:0	6	DC_VLC_BITS
arg	5:59	5:60	5	1
water	5:59	0:0	6	1
water	5:61	0:0	4	;
else	6:4	7:63	2
stmts	7:8	7:63	3	
water	7:8	0:0	4	code
op	7:13	0:0	4	=
call	7:15	7:62	4	get_vlc2
arg	7:24	7:30	5	&s->gb
op	7:24	0:0	6	&
water	7:25	0:0	6	s
op	7:26	0:0	6	->
water	7:28	0:0	6	gb
arg	7:32	7:46	5	dc_chrom.table
water	7:32	0:0	6	dc_chrom
op	7:40	0:0	6	.
water	7:41	0:0	6	table
arg	7:48	7:59	5	DC_VLC_BITS
water	7:48	0:0	6	DC_VLC_BITS
arg	7:61	7:62	5	1
water	7:61	0:0	6	1
water	7:63	0:0	4	;
if	8:4	11:4	2	(code < 0 || code > 9)
cond	8:8	8:27	3	code < 0 || code > 9
water	8:8	0:0	4	code
op	8:13	0:0	4	<
water	8:15	0:0	4	0
op	8:17	0:0	4	||
water	8:20	0:0	4	code
op	8:25	0:0	4	>
water	8:27	0:0	4	9
stmts	8:31	11:4	3	
water	8:31	0:0	4	{
call	9:8	9:57	4	av_log
arg	9:15	9:23	5	s->avctx
water	9:15	0:0	6	s
op	9:16	0:0	6	->
water	9:18	0:0	6	avctx
arg	9:25	9:37	5	AV_LOG_ERROR
water	9:25	0:0	6	AV_LOG_ERROR
arg	9:39	9:57	5	"illegal dc vlc\n"
water	9:39	0:0	6	"illegal dc vlc\n"
water	9:58	0:0	4	;
return	10:8	10:17	4	-1
op	10:15	0:0	5	-
water	10:16	0:0	5	1
water	11:4	0:0	4	}
if	12:4	14:4	2	(code == 0)
cond	12:8	12:16	3	code == 0
water	12:8	0:0	4	code
op	12:13	0:0	4	==
water	12:16	0:0	4	0
stmts	12:19	14:4	3	
water	12:19	0:0	4	{
water	13:8	0:0	4	level
op	13:14	0:0	4	=
water	13:16	0:0	4	0
water	13:17	0:0	4	;
water	14:4	0:0	4	}
else	14:6	35:4	2
stmts	14:11	35:4	3	
water	14:11	0:0	4	{
if	15:8	24:8	4	(IS_3IV1)
cond	15:12	15:12	5	IS_3IV1
water	15:12	0:0	6	IS_3IV1
stmts	15:21	24:8	5	
water	15:21	0:0	6	{
if	16:12	17:49	6	(code == 1)
cond	16:16	16:24	7	code == 1
water	16:16	0:0	8	code
op	16:21	0:0	8	==
water	16:24	0:0	8	1
stmts	17:16	17:49	7	
water	17:16	0:0	8	level
op	17:22	0:0	8	=
water	17:24	0:0	8	2
call	17:26	17:44	8	*get_bits1
arg	17:38	17:44	9	&s->gb
op	17:38	0:0	10	&
water	17:39	0:0	10	s
op	17:40	0:0	10	->
water	17:42	0:0	10	gb
op	17:46	0:0	8	-
water	17:48	0:0	8	1
water	17:49	0:0	8	;
else	18:12	23:12	6
stmts	18:17	23:12	7	
water	18:17	0:0	8	{
if	19:16	20:74	8	(get_bits1 (& s -> gb ))
cond	19:20	19:36	9	get_bits1 (& s -> gb )
call	19:20	19:36	10	get_bits1
arg	19:30	19:36	11	&s->gb
op	19:30	0:0	12	&
water	19:31	0:0	12	s
op	19:32	0:0	12	->
water	19:34	0:0	12	gb
stmts	20:20	20:74	9	
water	20:20	0:0	10	level
op	20:26	0:0	10	=
call	20:28	20:53	10	get_bits
arg	20:37	20:43	11	&s->gb
op	20:37	0:0	12	&
water	20:38	0:0	12	s
op	20:39	0:0	12	->
water	20:41	0:0	12	gb
arg	20:45	20:53	11	code-1
water	20:45	0:0	12	code
op	20:50	0:0	12	-
water	20:52	0:0	12	1
op	20:55	0:0	10	+
water	20:57	0:0	10	(
water	20:58	0:0	10	1
op	20:60	0:0	10	<<
water	20:63	0:0	10	(
water	20:64	0:0	10	code
op	20:69	0:0	10	-
water	20:71	0:0	10	1
water	20:72	0:0	10	)
water	20:73	0:0	10	)
water	20:74	0:0	10	;
else	21:16	22:75	8
stmts	22:20	22:75	9	
water	22:20	0:0	10	level
op	22:26	0:0	10	=
op	22:28	0:0	10	-
call	22:29	22:54	10	get_bits
arg	22:38	22:44	11	&s->gb
op	22:38	0:0	12	&
water	22:39	0:0	12	s
op	22:40	0:0	12	->
water	22:42	0:0	12	gb
arg	22:46	22:54	11	code-1
water	22:46	0:0	12	code
op	22:51	0:0	12	-
water	22:53	0:0	12	1
op	22:56	0:0	10	-
water	22:58	0:0	10	(
water	22:59	0:0	10	1
op	22:61	0:0	10	<<
water	22:64	0:0	10	(
water	22:65	0:0	10	code
op	22:70	0:0	10	-
water	22:72	0:0	10	1
water	22:73	0:0	10	)
water	22:74	0:0	10	)
water	22:75	0:0	10	;
water	23:12	0:0	8	}
water	24:8	0:0	6	}
else	24:10	26:8	4
stmts	24:15	26:8	5	
water	24:15	0:0	6	{
water	25:12	0:0	6	level
op	25:18	0:0	6	=
call	25:20	25:42	6	get_xbits
arg	25:30	25:36	7	&s->gb
op	25:30	0:0	8	&
water	25:31	0:0	8	s
op	25:32	0:0	8	->
water	25:34	0:0	8	gb
arg	25:38	25:42	7	code
water	25:38	0:0	8	code
water	25:43	0:0	6	;
water	26:8	0:0	6	}
if	27:8	34:8	4	(code > 8)
cond	27:12	27:19	5	code > 8
water	27:12	0:0	6	code
op	27:17	0:0	6	>
water	27:19	0:0	6	8
stmts	27:22	34:8	5	
water	27:22	0:0	6	{
if	28:12	33:12	6	(get_bits1 (& s -> gb ) == 0)
cond	28:16	28:37	7	get_bits1 (& s -> gb ) == 0
call	28:16	28:32	8	get_bits1
arg	28:26	28:32	9	&s->gb
op	28:26	0:0	10	&
water	28:27	0:0	10	s
op	28:28	0:0	10	->
water	28:30	0:0	10	gb
op	28:34	0:0	8	==
water	28:37	0:0	8	0
stmts	28:40	33:12	7	
water	28:40	0:0	8	{
if	29:16	32:16	8	(s -> avctx -> err_recognition & ( AV_EF_BITSTREAM | AV_EF_COMPLIANT ))
cond	29:20	29:80	9	s -> avctx -> err_recognition & ( AV_EF_BITSTREAM | AV_EF_COMPLIANT )
water	29:20	0:0	10	s
op	29:21	0:0	10	->
water	29:23	0:0	10	avctx
op	29:28	0:0	10	->
water	29:30	0:0	10	err_recognition
op	29:46	0:0	10	&
water	29:48	0:0	10	(
water	29:49	0:0	10	AV_EF_BITSTREAM
op	29:64	0:0	10	|
water	29:65	0:0	10	AV_EF_COMPLIANT
water	29:80	0:0	10	)
stmts	29:83	32:16	9	
water	29:83	0:0	10	{
call	30:20	30:76	10	av_log
arg	30:27	30:35	11	s->avctx
water	30:27	0:0	12	s
op	30:28	0:0	12	->
water	30:30	0:0	12	avctx
arg	30:37	30:49	11	AV_LOG_ERROR
water	30:37	0:0	12	AV_LOG_ERROR
arg	30:51	30:76	11	"dc marker bit missing\n"
water	30:51	0:0	12	"dc marker bit missing\n"
water	30:77	0:0	10	;
return	31:20	31:29	10	-1
op	31:27	0:0	11	-
water	31:28	0:0	11	1
water	32:16	0:0	10	}
water	33:12	0:0	8	}
water	34:8	0:0	6	}
water	35:4	0:0	4	}
return	36:4	36:52	2	ff_mpeg4_pred_dc(s,n,level,dir_ptr,0)
call	36:11	36:51	3	ff_mpeg4_pred_dc
arg	36:28	36:29	4	s
water	36:28	0:0	5	s
arg	36:31	36:32	4	n
water	36:31	0:0	5	n
arg	36:34	36:39	4	level
water	36:34	0:0	5	level
arg	36:41	36:48	4	dir_ptr
water	36:41	0:0	5	dir_ptr
arg	36:50	36:51	4	0
water	36:50	0:0	5	0
