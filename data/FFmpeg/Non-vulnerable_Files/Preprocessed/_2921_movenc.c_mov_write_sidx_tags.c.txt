func	1:0	34:0	0	static int	mov_write_sidx_tags
params	1:30	0:0	1	
param	1:31	1:46	2	AVIOContext *	pb
param	1:48	1:66	2	MOVMuxContext *	mov
param	2:31	2:41	2	int	tracks
param	2:43	2:55	2	int	ref_size
stmnts	0:0	33:12	1	
decl	4:4	4:21	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:21	2	int	round
water	4:16	0:0	2	,
decl	4:4	4:21	2	int	ret
decl	5:4	5:25	2	AVIOContext	*avio_buf
decl	6:4	6:22	2	int	total_size
op	6:19	0:0	2	=
water	6:21	0:0	2	0
for	7:4	32:4	2	(round = 0 ;round < 2;round ++)
forinit	7:9	7:18	3	round = 0 ;
water	7:9	0:0	4	round
op	7:15	0:0	4	=
water	7:17	0:0	4	0
water	7:18	0:0	4	;
cond	7:20	7:28	3	round < 2
water	7:20	0:0	4	round
op	7:26	0:0	4	<
water	7:28	0:0	4	2
forexpr	7:31	7:36	3	round ++
water	7:31	0:0	4	round
op	7:36	0:0	4	++
stmts	7:40	32:4	3	
water	7:40	0:0	4	{
if	12:8	15:8	4	(round == 0)
cond	12:12	12:21	5	round == 0
water	12:12	0:0	6	round
op	12:18	0:0	6	==
water	12:21	0:0	6	0
stmts	12:24	15:8	5	
water	12:24	0:0	6	{
if	13:12	14:26	6	(( ret =ffio_open_null_buf (& avio_buf ) ) < 0)
cond	13:16	13:56	7	( ret =ffio_open_null_buf (& avio_buf ) ) < 0
water	13:16	0:0	8	(
water	13:17	0:0	8	ret
op	13:21	0:0	8	=
call	13:23	13:51	8	ffio_open_null_buf
arg	13:42	13:51	9	&avio_buf
op	13:42	0:0	10	&
water	13:43	0:0	10	avio_buf
water	13:52	0:0	8	)
op	13:54	0:0	8	<
water	13:56	0:0	8	0
stmts	14:16	14:26	7	
return	14:16	14:26	8	ret
water	14:23	0:0	9	ret
water	15:8	0:0	6	}
else	15:10	17:8	4
stmts	15:15	17:8	5	
water	15:15	0:0	6	{
water	16:12	0:0	6	avio_buf
op	16:21	0:0	6	=
water	16:23	0:0	6	pb
water	16:25	0:0	6	;
water	17:8	0:0	6	}
for	18:8	29:8	4	(i = 0 ;i < mov -> nb_streams;i ++)
forinit	18:13	18:18	5	i = 0 ;
water	18:13	0:0	6	i
op	18:15	0:0	6	=
water	18:17	0:0	6	0
water	18:18	0:0	6	;
cond	18:20	18:29	5	i < mov -> nb_streams
water	18:20	0:0	6	i
op	18:22	0:0	6	<
water	18:24	0:0	6	mov
op	18:27	0:0	6	->
water	18:29	0:0	6	nb_streams
forexpr	18:41	18:42	5	i ++
water	18:41	0:0	6	i
op	18:42	0:0	6	++
stmts	18:46	29:8	5	
water	18:46	0:0	6	{
decl	19:12	19:45	6	MOVTrack	*track
op	19:28	0:0	6	=
op	19:30	0:0	6	&
water	19:31	0:0	6	mov
op	19:34	0:0	6	->
water	19:36	0:0	6	tracks
op	19:42	0:0	6	[
water	19:43	0:0	6	i
op	19:44	0:0	6	]
if	20:12	21:24	6	(tracks >= 0 && i != tracks)
cond	20:16	20:36	7	tracks >= 0 && i != tracks
water	20:16	0:0	8	tracks
op	20:23	0:0	8	>=
water	20:26	0:0	8	0
op	20:28	0:0	8	&&
water	20:31	0:0	8	i
op	20:33	0:0	8	!=
water	20:36	0:0	8	tracks
stmts	21:16	21:24	7	
continue	21:16	21:24	8	
if	25:12	26:24	6	(! track -> entry && ref_size > 0)
cond	25:16	25:44	7	! track -> entry && ref_size > 0
op	25:16	0:0	8	!
water	25:17	0:0	8	track
op	25:22	0:0	8	->
water	25:24	0:0	8	entry
op	25:30	0:0	8	&&
water	25:33	0:0	8	ref_size
op	25:42	0:0	8	>
water	25:44	0:0	8	0
stmts	26:16	26:24	7	
continue	26:16	26:24	8	
water	27:12	0:0	6	total_size
op	27:23	0:0	6	-=
call	27:26	28:55	6	mov_write_sidx_tag
arg	27:45	27:53	7	avio_buf
water	27:45	0:0	8	avio_buf
arg	27:55	27:60	7	track
water	27:55	0:0	8	track
arg	27:62	27:70	7	ref_size
water	27:62	0:0	8	ref_size
arg	28:45	28:55	7	total_size
water	28:45	0:0	8	total_size
water	28:56	0:0	6	;
water	29:8	0:0	6	}
if	30:8	31:54	4	(round == 0)
cond	30:12	30:21	5	round == 0
water	30:12	0:0	6	round
op	30:18	0:0	6	==
water	30:21	0:0	6	0
stmts	31:12	31:54	5	
water	31:12	0:0	6	total_size
op	31:23	0:0	6	=
call	31:25	31:53	6	ffio_close_null_buf
arg	31:45	31:53	7	avio_buf
water	31:45	0:0	8	avio_buf
water	31:54	0:0	6	;
water	32:4	0:0	4	}
return	33:4	33:12	2	0
water	33:11	0:0	3	0
