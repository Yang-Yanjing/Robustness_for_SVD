func	1:0	70:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:64	2	AVFrame *	insamples
stmnts	0:0	69:65	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:43	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	outputs
op	4:40	0:0	2	[
water	4:41	0:0	2	0
op	4:42	0:0	2	]
decl	5:4	5:42	2	AudioVectorScopeContext	*s
op	5:31	0:0	2	=
water	5:33	0:0	2	ctx
op	5:36	0:0	2	->
water	5:38	0:0	2	priv
decl	6:4	6:24	2	const int	hw
op	6:17	0:0	2	=
water	6:19	0:0	2	s
op	6:20	0:0	2	->
water	6:22	0:0	2	hw
decl	7:4	7:24	2	const int	hh
op	7:17	0:0	2	=
water	7:19	0:0	2	s
op	7:20	0:0	2	->
water	7:22	0:0	2	hh
water	8:4	0:0	2	unsigned
water	8:13	0:0	2	x
water	8:14	0:0	2	,
water	8:16	0:0	2	y
water	8:17	0:0	2	;
decl	9:4	9:31	2	const double	zoom
op	9:22	0:0	2	=
water	9:24	0:0	2	s
op	9:25	0:0	2	->
water	9:27	0:0	2	zoom
decl	10:4	10:9	2	int	i
if	11:4	21:4	2	(! s -> outpicref || s -> outpicref -> width != outlink -> w || s -> outpicref -> height != outlink -> h)
cond	11:8	12:58	3	! s -> outpicref || s -> outpicref -> width != outlink -> w || s -> outpicref -> height != outlink -> h
op	11:8	0:0	4	!
water	11:9	0:0	4	s
op	11:10	0:0	4	->
water	11:12	0:0	4	outpicref
op	11:22	0:0	4	||
water	11:25	0:0	4	s
op	11:26	0:0	4	->
water	11:28	0:0	4	outpicref
op	11:37	0:0	4	->
water	11:39	0:0	4	width
op	11:46	0:0	4	!=
water	11:49	0:0	4	outlink
op	11:56	0:0	4	->
water	11:58	0:0	4	w
op	11:60	0:0	4	||
water	12:25	0:0	4	s
op	12:26	0:0	4	->
water	12:28	0:0	4	outpicref
op	12:37	0:0	4	->
water	12:39	0:0	4	height
op	12:46	0:0	4	!=
water	12:49	0:0	4	outlink
op	12:56	0:0	4	->
water	12:58	0:0	4	h
stmts	12:61	21:4	3	
water	12:61	0:0	4	{
call	13:8	13:35	4	av_frame_free
arg	13:22	13:35	5	&s->outpicref
op	13:22	0:0	6	&
water	13:23	0:0	6	s
op	13:24	0:0	6	->
water	13:26	0:0	6	outpicref
water	13:36	0:0	4	;
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	outpicref
op	14:21	0:0	4	=
call	14:23	14:74	4	ff_get_video_buffer
arg	14:43	14:50	5	outlink
water	14:43	0:0	6	outlink
arg	14:52	14:62	5	outlink->w
water	14:52	0:0	6	outlink
op	14:59	0:0	6	->
water	14:61	0:0	6	w
arg	14:64	14:74	5	outlink->h
water	14:64	0:0	6	outlink
op	14:71	0:0	6	->
water	14:73	0:0	6	h
water	14:75	0:0	4	;
if	15:8	18:8	4	(! s -> outpicref)
cond	15:12	15:16	5	! s -> outpicref
op	15:12	0:0	6	!
water	15:13	0:0	6	s
op	15:14	0:0	6	->
water	15:16	0:0	6	outpicref
stmts	15:27	18:8	5	
water	15:27	0:0	6	{
call	16:12	16:36	6	av_frame_free
arg	16:26	16:36	7	&insamples
op	16:26	0:0	8	&
water	16:27	0:0	8	insamples
water	16:37	0:0	6	;
return	17:12	17:34	6	AVERROR(ENOMEM)
call	17:19	17:33	7	AVERROR
arg	17:27	17:33	8	ENOMEM
water	17:27	0:0	9	ENOMEM
water	18:8	0:0	6	}
for	19:8	20:92	4	(i = 0 ;i < outlink -> h;i ++)
forinit	19:13	19:18	5	i = 0 ;
water	19:13	0:0	6	i
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:33	5	i < outlink -> h
water	19:20	0:0	6	i
op	19:22	0:0	6	<
water	19:24	0:0	6	outlink
op	19:31	0:0	6	->
water	19:33	0:0	6	h
forexpr	19:36	19:37	5	i ++
water	19:36	0:0	6	i
op	19:37	0:0	6	++
stmts	20:12	20:92	5	
call	20:12	20:91	6	memset
arg	20:19	20:72	7	s->outpicref->data[0]+i*s->outpicref->linesize[0]
water	20:19	0:0	8	s
op	20:20	0:0	8	->
water	20:22	0:0	8	outpicref
op	20:31	0:0	8	->
water	20:33	0:0	8	data
op	20:37	0:0	8	[
water	20:38	0:0	8	0
op	20:39	0:0	8	]
op	20:41	0:0	8	+
water	20:43	0:0	8	i
op	20:45	0:0	8	*
water	20:47	0:0	8	s
op	20:48	0:0	8	->
water	20:50	0:0	8	outpicref
op	20:59	0:0	8	->
water	20:61	0:0	8	linesize
op	20:69	0:0	8	[
water	20:70	0:0	8	0
op	20:71	0:0	8	]
arg	20:74	20:75	7	0
water	20:74	0:0	8	0
arg	20:77	20:91	7	outlink->w*4
water	20:77	0:0	8	outlink
op	20:84	0:0	8	->
water	20:86	0:0	8	w
op	20:88	0:0	8	*
water	20:90	0:0	8	4
water	20:92	0:0	6	;
water	21:4	0:0	4	}
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	outpicref
op	22:16	0:0	2	->
water	22:18	0:0	2	pts
op	22:22	0:0	2	=
water	22:24	0:0	2	insamples
op	22:33	0:0	2	->
water	22:35	0:0	2	pts
water	22:38	0:0	2	;
call	23:4	23:10	2	fade
arg	23:9	23:10	3	s
water	23:9	0:0	4	s
water	23:11	0:0	2	;
switch	24:4	67:4	2	(insamples -> format)
cond	24:12	24:23	3	insamples -> format
water	24:12	0:0	4	insamples
op	24:21	0:0	4	->
water	24:23	0:0	4	format
stmts	24:31	67:4	3	
water	24:31	0:0	4	{
label	25:4	25:26	4	case AV_SAMPLE_FMT_S16 :
for	26:8	44:8	4	(i = 0 ;i < insamples -> nb_samples;i ++)
forinit	26:13	26:18	5	i = 0 ;
water	26:13	0:0	6	i
op	26:15	0:0	6	=
water	26:17	0:0	6	0
water	26:18	0:0	6	;
cond	26:20	26:35	5	i < insamples -> nb_samples
water	26:20	0:0	6	i
op	26:22	0:0	6	<
water	26:24	0:0	6	insamples
op	26:33	0:0	6	->
water	26:35	0:0	6	nb_samples
forexpr	26:47	26:48	5	i ++
water	26:47	0:0	6	i
op	26:48	0:0	6	++
stmts	26:52	44:8	5	
water	26:52	0:0	6	{
decl	27:12	27:64	6	int16_t	*src
op	27:25	0:0	6	=
water	27:27	0:0	6	(
water	27:28	0:0	6	int16_t
op	27:36	0:0	6	*
water	27:37	0:0	6	)
water	27:38	0:0	6	insamples
op	27:47	0:0	6	->
water	27:49	0:0	6	data
op	27:53	0:0	6	[
water	27:54	0:0	6	0
op	27:55	0:0	6	]
op	27:57	0:0	6	+
water	27:59	0:0	6	i
op	27:61	0:0	6	*
water	27:63	0:0	6	2
if	28:12	31:12	6	(s -> mode == LISSAJOUS)
cond	28:16	28:27	7	s -> mode == LISSAJOUS
water	28:16	0:0	8	s
op	28:17	0:0	8	->
water	28:19	0:0	8	mode
op	28:24	0:0	8	==
water	28:27	0:0	8	LISSAJOUS
stmts	28:38	31:12	7	
water	28:38	0:0	8	{
water	29:16	0:0	8	x
op	29:18	0:0	8	=
water	29:20	0:0	8	(
water	29:21	0:0	8	(
water	29:22	0:0	8	src
op	29:25	0:0	8	[
water	29:26	0:0	8	1
op	29:27	0:0	8	]
op	29:29	0:0	8	-
water	29:31	0:0	8	src
op	29:34	0:0	8	[
water	29:35	0:0	8	0
op	29:36	0:0	8	]
water	29:37	0:0	8	)
op	29:39	0:0	8	*
water	29:41	0:0	8	zoom
op	29:46	0:0	8	/
call	29:48	29:66	8	(float)
arg	29:56	29:66	9	UINT16_MAX
water	29:56	0:0	10	UINT16_MAX
op	29:68	0:0	8	+
water	29:70	0:0	8	1
water	29:71	0:0	8	)
op	29:73	0:0	8	*
water	29:75	0:0	8	hw
water	29:77	0:0	8	;
water	30:16	0:0	8	y
op	30:18	0:0	8	=
water	30:20	0:0	8	(
water	30:21	0:0	8	1
op	30:22	0:0	8	.
water	30:23	0:0	8	0
op	30:25	0:0	8	-
water	30:27	0:0	8	(
water	30:28	0:0	8	src
op	30:31	0:0	8	[
water	30:32	0:0	8	0
op	30:33	0:0	8	]
op	30:35	0:0	8	+
water	30:37	0:0	8	src
op	30:40	0:0	8	[
water	30:41	0:0	8	1
op	30:42	0:0	8	]
water	30:43	0:0	8	)
op	30:45	0:0	8	*
water	30:47	0:0	8	zoom
op	30:52	0:0	8	/
water	30:54	0:0	8	(
water	30:55	0:0	8	float
water	30:60	0:0	8	)
water	30:61	0:0	8	UINT16_MAX
water	30:71	0:0	8	)
op	30:73	0:0	8	*
water	30:75	0:0	8	hh
water	30:77	0:0	8	;
water	31:12	0:0	8	}
else	31:14	34:12	6
stmts	31:19	34:12	7	
if	31:19	34:12	8	(s -> mode == LISSAJOUS_XY)
cond	31:23	31:34	9	s -> mode == LISSAJOUS_XY
water	31:23	0:0	10	s
op	31:24	0:0	10	->
water	31:26	0:0	10	mode
op	31:31	0:0	10	==
water	31:34	0:0	10	LISSAJOUS_XY
stmts	31:48	34:12	9	
water	31:48	0:0	10	{
water	32:16	0:0	10	x
op	32:18	0:0	10	=
water	32:20	0:0	10	(
water	32:21	0:0	10	src
op	32:24	0:0	10	[
water	32:25	0:0	10	1
op	32:26	0:0	10	]
op	32:28	0:0	10	*
water	32:30	0:0	10	zoom
op	32:35	0:0	10	/
water	32:37	0:0	10	(
water	32:38	0:0	10	float
water	32:43	0:0	10	)
water	32:44	0:0	10	INT16_MAX
op	32:54	0:0	10	+
water	32:56	0:0	10	1
water	32:57	0:0	10	)
op	32:59	0:0	10	*
water	32:61	0:0	10	hw
water	32:63	0:0	10	;
water	33:16	0:0	10	y
op	33:18	0:0	10	=
water	33:20	0:0	10	(
water	33:21	0:0	10	src
op	33:24	0:0	10	[
water	33:25	0:0	10	0
op	33:26	0:0	10	]
op	33:28	0:0	10	*
water	33:30	0:0	10	zoom
op	33:35	0:0	10	/
water	33:37	0:0	10	(
water	33:38	0:0	10	float
water	33:43	0:0	10	)
water	33:44	0:0	10	INT16_MAX
op	33:54	0:0	10	+
water	33:56	0:0	10	1
water	33:57	0:0	10	)
op	33:59	0:0	10	*
water	33:61	0:0	10	hh
water	33:63	0:0	10	;
water	34:12	0:0	10	}
else	34:14	42:12	6
stmts	34:19	42:12	7	
water	34:19	0:0	8	{
decl	35:16	35:36	8	float	sx
water	35:24	0:0	8	,
decl	35:16	35:36	8	float	sy
water	35:28	0:0	8	,
decl	35:16	35:36	8	float	cx
water	35:32	0:0	8	,
decl	35:16	35:36	8	float	cy
water	36:16	0:0	8	sx
op	36:19	0:0	8	=
water	36:21	0:0	8	src
op	36:24	0:0	8	[
water	36:25	0:0	8	1
op	36:26	0:0	8	]
op	36:28	0:0	8	*
water	36:30	0:0	8	zoom
op	36:35	0:0	8	/
water	36:37	0:0	8	(
water	36:38	0:0	8	float
water	36:43	0:0	8	)
water	36:44	0:0	8	INT16_MAX
water	36:53	0:0	8	;
water	37:16	0:0	8	sy
op	37:19	0:0	8	=
water	37:21	0:0	8	src
op	37:24	0:0	8	[
water	37:25	0:0	8	0
op	37:26	0:0	8	]
op	37:28	0:0	8	*
water	37:30	0:0	8	zoom
op	37:35	0:0	8	/
water	37:37	0:0	8	(
water	37:38	0:0	8	float
water	37:43	0:0	8	)
water	37:44	0:0	8	INT16_MAX
water	37:53	0:0	8	;
water	38:16	0:0	8	cx
op	38:19	0:0	8	=
water	38:21	0:0	8	sx
call	38:24	38:45	8	*sqrtf
arg	38:32	38:45	9	1-0.5*sy*sy
water	38:32	0:0	10	1
op	38:34	0:0	10	-
water	38:36	0:0	10	0
op	38:37	0:0	10	.
water	38:38	0:0	10	5
op	38:39	0:0	10	*
water	38:40	0:0	10	sy
op	38:42	0:0	10	*
water	38:43	0:0	10	sy
water	38:46	0:0	8	;
water	39:16	0:0	8	cy
op	39:19	0:0	8	=
water	39:21	0:0	8	sy
call	39:24	39:45	8	*sqrtf
arg	39:32	39:45	9	1-0.5*sx*sx
water	39:32	0:0	10	1
op	39:34	0:0	10	-
water	39:36	0:0	10	0
op	39:37	0:0	10	.
water	39:38	0:0	10	5
op	39:39	0:0	10	*
water	39:40	0:0	10	sx
op	39:42	0:0	10	*
water	39:43	0:0	10	sx
water	39:46	0:0	8	;
water	40:16	0:0	8	x
op	40:18	0:0	8	=
water	40:20	0:0	8	hw
op	40:23	0:0	8	+
water	40:25	0:0	8	hw
call	40:28	40:44	8	*FFSIGN
arg	40:37	40:44	9	cx+cy
water	40:37	0:0	10	cx
op	40:40	0:0	10	+
water	40:42	0:0	10	cy
op	40:46	0:0	8	*
water	40:48	0:0	8	(
water	40:49	0:0	8	cx
op	40:52	0:0	8	-
water	40:54	0:0	8	cy
water	40:56	0:0	8	)
op	40:58	0:0	8	*
op	40:60	0:0	8	.
water	40:61	0:0	8	7
water	40:62	0:0	8	;
water	41:16	0:0	8	y
op	41:18	0:0	8	=
water	41:20	0:0	8	s
op	41:21	0:0	8	->
water	41:23	0:0	8	h
op	41:25	0:0	8	-
water	41:27	0:0	8	s
op	41:28	0:0	8	->
water	41:30	0:0	8	h
call	41:32	41:47	8	*FFABS
arg	41:40	41:47	9	cx+cy
water	41:40	0:0	10	cx
op	41:43	0:0	10	+
water	41:45	0:0	10	cy
op	41:49	0:0	8	*
op	41:51	0:0	8	.
water	41:52	0:0	8	7
water	41:53	0:0	8	;
water	42:12	0:0	8	}
call	43:12	43:28	6	draw_dot
arg	43:21	43:22	7	s
water	43:21	0:0	8	s
arg	43:24	43:25	7	x
water	43:24	0:0	8	x
arg	43:27	43:28	7	y
water	43:27	0:0	8	y
water	43:29	0:0	6	;
water	44:8	0:0	6	}
break	45:8	45:13	4	
label	46:4	46:26	4	case AV_SAMPLE_FMT_FLT :
for	47:8	65:8	4	(i = 0 ;i < insamples -> nb_samples;i ++)
forinit	47:13	47:18	5	i = 0 ;
water	47:13	0:0	6	i
op	47:15	0:0	6	=
water	47:17	0:0	6	0
water	47:18	0:0	6	;
cond	47:20	47:35	5	i < insamples -> nb_samples
water	47:20	0:0	6	i
op	47:22	0:0	6	<
water	47:24	0:0	6	insamples
op	47:33	0:0	6	->
water	47:35	0:0	6	nb_samples
forexpr	47:47	47:48	5	i ++
water	47:47	0:0	6	i
op	47:48	0:0	6	++
stmts	47:52	65:8	5	
water	47:52	0:0	6	{
decl	48:12	48:60	6	float	*src
op	48:23	0:0	6	=
water	48:25	0:0	6	(
water	48:26	0:0	6	float
op	48:32	0:0	6	*
water	48:33	0:0	6	)
water	48:34	0:0	6	insamples
op	48:43	0:0	6	->
water	48:45	0:0	6	data
op	48:49	0:0	6	[
water	48:50	0:0	6	0
op	48:51	0:0	6	]
op	48:53	0:0	6	+
water	48:55	0:0	6	i
op	48:57	0:0	6	*
water	48:59	0:0	6	2
if	49:12	52:12	6	(s -> mode == LISSAJOUS)
cond	49:16	49:27	7	s -> mode == LISSAJOUS
water	49:16	0:0	8	s
op	49:17	0:0	8	->
water	49:19	0:0	8	mode
op	49:24	0:0	8	==
water	49:27	0:0	8	LISSAJOUS
stmts	49:38	52:12	7	
water	49:38	0:0	8	{
water	50:16	0:0	8	x
op	50:18	0:0	8	=
water	50:20	0:0	8	(
water	50:21	0:0	8	(
water	50:22	0:0	8	src
op	50:25	0:0	8	[
water	50:26	0:0	8	1
op	50:27	0:0	8	]
op	50:29	0:0	8	-
water	50:31	0:0	8	src
op	50:34	0:0	8	[
water	50:35	0:0	8	0
op	50:36	0:0	8	]
water	50:37	0:0	8	)
op	50:39	0:0	8	*
water	50:41	0:0	8	zoom
op	50:46	0:0	8	/
water	50:48	0:0	8	2
op	50:50	0:0	8	+
water	50:52	0:0	8	1
water	50:53	0:0	8	)
op	50:55	0:0	8	*
water	50:57	0:0	8	hw
water	50:59	0:0	8	;
water	51:16	0:0	8	y
op	51:18	0:0	8	=
water	51:20	0:0	8	(
water	51:21	0:0	8	1
op	51:22	0:0	8	.
water	51:23	0:0	8	0
op	51:25	0:0	8	-
water	51:27	0:0	8	(
water	51:28	0:0	8	src
op	51:31	0:0	8	[
water	51:32	0:0	8	0
op	51:33	0:0	8	]
op	51:35	0:0	8	+
water	51:37	0:0	8	src
op	51:40	0:0	8	[
water	51:41	0:0	8	1
op	51:42	0:0	8	]
water	51:43	0:0	8	)
op	51:45	0:0	8	*
water	51:47	0:0	8	zoom
op	51:52	0:0	8	/
water	51:54	0:0	8	2
water	51:55	0:0	8	)
op	51:57	0:0	8	*
water	51:59	0:0	8	hh
water	51:61	0:0	8	;
water	52:12	0:0	8	}
else	52:14	55:12	6
stmts	52:19	55:12	7	
if	52:19	55:12	8	(s -> mode == LISSAJOUS_XY)
cond	52:23	52:34	9	s -> mode == LISSAJOUS_XY
water	52:23	0:0	10	s
op	52:24	0:0	10	->
water	52:26	0:0	10	mode
op	52:31	0:0	10	==
water	52:34	0:0	10	LISSAJOUS_XY
stmts	52:47	55:12	9	
water	52:47	0:0	10	{
water	53:16	0:0	10	x
op	53:18	0:0	10	=
water	53:20	0:0	10	(
water	53:21	0:0	10	src
op	53:24	0:0	10	[
water	53:25	0:0	10	1
op	53:26	0:0	10	]
op	53:28	0:0	10	*
water	53:30	0:0	10	zoom
op	53:35	0:0	10	+
water	53:37	0:0	10	1
water	53:38	0:0	10	)
op	53:40	0:0	10	*
water	53:42	0:0	10	hw
water	53:44	0:0	10	;
water	54:16	0:0	10	y
op	54:18	0:0	10	=
water	54:20	0:0	10	(
water	54:21	0:0	10	src
op	54:24	0:0	10	[
water	54:25	0:0	10	0
op	54:26	0:0	10	]
op	54:28	0:0	10	*
water	54:30	0:0	10	zoom
op	54:35	0:0	10	+
water	54:37	0:0	10	1
water	54:38	0:0	10	)
op	54:40	0:0	10	*
water	54:42	0:0	10	hh
water	54:44	0:0	10	;
water	55:12	0:0	10	}
else	55:14	63:12	6
stmts	55:19	63:12	7	
water	55:19	0:0	8	{
decl	56:16	56:36	8	float	sx
water	56:24	0:0	8	,
decl	56:16	56:36	8	float	sy
water	56:28	0:0	8	,
decl	56:16	56:36	8	float	cx
water	56:32	0:0	8	,
decl	56:16	56:36	8	float	cy
water	57:16	0:0	8	sx
op	57:19	0:0	8	=
water	57:21	0:0	8	src
op	57:24	0:0	8	[
water	57:25	0:0	8	1
op	57:26	0:0	8	]
op	57:28	0:0	8	*
water	57:30	0:0	8	zoom
water	57:34	0:0	8	;
water	58:16	0:0	8	sy
op	58:19	0:0	8	=
water	58:21	0:0	8	src
op	58:24	0:0	8	[
water	58:25	0:0	8	0
op	58:26	0:0	8	]
op	58:28	0:0	8	*
water	58:30	0:0	8	zoom
water	58:34	0:0	8	;
water	59:16	0:0	8	cx
op	59:19	0:0	8	=
water	59:21	0:0	8	sx
call	59:24	59:49	8	*sqrtf
arg	59:32	59:49	9	1-0.5*sy*sy
water	59:32	0:0	10	1
op	59:34	0:0	10	-
water	59:36	0:0	10	0
op	59:37	0:0	10	.
water	59:38	0:0	10	5
op	59:40	0:0	10	*
water	59:42	0:0	10	sy
op	59:45	0:0	10	*
water	59:47	0:0	10	sy
water	59:50	0:0	8	;
water	60:16	0:0	8	cy
op	60:19	0:0	8	=
water	60:21	0:0	8	sy
call	60:24	60:49	8	*sqrtf
arg	60:32	60:49	9	1-0.5*sx*sx
water	60:32	0:0	10	1
op	60:34	0:0	10	-
water	60:36	0:0	10	0
op	60:37	0:0	10	.
water	60:38	0:0	10	5
op	60:40	0:0	10	*
water	60:42	0:0	10	sx
op	60:45	0:0	10	*
water	60:47	0:0	10	sx
water	60:50	0:0	8	;
water	61:16	0:0	8	x
op	61:18	0:0	8	=
water	61:20	0:0	8	hw
op	61:23	0:0	8	+
water	61:25	0:0	8	hw
call	61:28	61:44	8	*FFSIGN
arg	61:37	61:44	9	cx+cy
water	61:37	0:0	10	cx
op	61:40	0:0	10	+
water	61:42	0:0	10	cy
op	61:46	0:0	8	*
water	61:48	0:0	8	(
water	61:49	0:0	8	cx
op	61:52	0:0	8	-
water	61:54	0:0	8	cy
water	61:56	0:0	8	)
op	61:58	0:0	8	*
op	61:60	0:0	8	.
water	61:61	0:0	8	7
water	61:62	0:0	8	;
water	62:16	0:0	8	y
op	62:18	0:0	8	=
water	62:20	0:0	8	s
op	62:21	0:0	8	->
water	62:23	0:0	8	h
op	62:25	0:0	8	-
water	62:27	0:0	8	s
op	62:28	0:0	8	->
water	62:30	0:0	8	h
call	62:32	62:47	8	*FFABS
arg	62:40	62:47	9	cx+cy
water	62:40	0:0	10	cx
op	62:43	0:0	10	+
water	62:45	0:0	10	cy
op	62:49	0:0	8	*
op	62:51	0:0	8	.
water	62:52	0:0	8	7
water	62:53	0:0	8	;
water	63:12	0:0	8	}
call	64:12	64:28	6	draw_dot
arg	64:21	64:22	7	s
water	64:21	0:0	8	s
arg	64:24	64:25	7	x
water	64:24	0:0	8	x
arg	64:27	64:28	7	y
water	64:27	0:0	8	y
water	64:29	0:0	6	;
water	65:8	0:0	6	}
break	66:8	66:13	4	
water	67:4	0:0	4	}
call	68:4	68:28	2	av_frame_free
arg	68:18	68:28	3	&insamples
op	68:18	0:0	4	&
water	68:19	0:0	4	insamples
water	68:29	0:0	2	;
return	69:4	69:65	2	ff_filter_frame(outlink,av_frame_clone(s->outpicref))
call	69:11	69:64	3	ff_filter_frame
arg	69:27	69:34	4	outlink
water	69:27	0:0	5	outlink
arg	69:36	69:64	4	av_frame_clone(s->outpicref)
call	69:36	69:63	5	av_frame_clone
arg	69:51	69:63	6	s->outpicref
water	69:51	0:0	7	s
op	69:52	0:0	7	->
water	69:54	0:0	7	outpicref
