func	1:15	40:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	39:12	1	
decl	3:4	3:33	2	LifeContext	*life
op	3:22	0:0	2	=
water	3:24	0:0	2	ctx
op	3:27	0:0	2	->
water	3:29	0:0	2	priv
decl	4:4	4:11	2	int	ret
if	5:4	6:46	2	(! life -> w && ! life -> filename)
cond	5:8	5:27	3	! life -> w && ! life -> filename
op	5:8	0:0	4	!
water	5:9	0:0	4	life
op	5:13	0:0	4	->
water	5:15	0:0	4	w
op	5:17	0:0	4	&&
op	5:20	0:0	4	!
water	5:21	0:0	4	life
op	5:25	0:0	4	->
water	5:27	0:0	4	filename
stmts	6:8	6:46	3	
call	6:8	6:45	4	av_opt_set
arg	6:19	6:23	5	life
water	6:19	0:0	6	life
arg	6:25	6:31	5	"size"
water	6:25	0:0	6	"size"
arg	6:33	6:42	5	"320x240"
water	6:33	0:0	6	"320x240"
arg	6:44	6:45	5	0
water	6:44	0:0	6	0
water	6:46	0:0	4	;
if	7:4	8:18	2	(( ret =parse_rule (& life -> born_rule ,& life -> stay_rule ,life -> rule_str ,ctx ) ) < 0)
cond	7:8	7:86	3	( ret =parse_rule (& life -> born_rule ,& life -> stay_rule ,life -> rule_str ,ctx ) ) < 0
water	7:8	0:0	4	(
water	7:9	0:0	4	ret
op	7:13	0:0	4	=
call	7:15	7:81	4	parse_rule
arg	7:26	7:42	5	&life->born_rule
op	7:26	0:0	6	&
water	7:27	0:0	6	life
op	7:31	0:0	6	->
water	7:33	0:0	6	born_rule
arg	7:44	7:60	5	&life->stay_rule
op	7:44	0:0	6	&
water	7:45	0:0	6	life
op	7:49	0:0	6	->
water	7:51	0:0	6	stay_rule
arg	7:62	7:76	5	life->rule_str
water	7:62	0:0	6	life
op	7:66	0:0	6	->
water	7:68	0:0	6	rule_str
arg	7:78	7:81	5	ctx
water	7:78	0:0	6	ctx
water	7:82	0:0	4	)
op	7:84	0:0	4	<
water	7:86	0:0	4	0
stmts	8:8	8:18	3	
return	8:8	8:18	4	ret
water	8:15	0:0	5	ret
if	9:4	11:75	2	(! life -> mold &&memcmp (life -> mold_color ,"\x00\x00\x00" ,3 ))
cond	9:8	9:65	3	! life -> mold &&memcmp (life -> mold_color ,"\x00\x00\x00" ,3 )
op	9:8	0:0	4	!
water	9:9	0:0	4	life
op	9:13	0:0	4	->
water	9:15	0:0	4	mold
op	9:20	0:0	4	&&
call	9:23	9:65	4	memcmp
arg	9:30	9:46	5	life->mold_color
water	9:30	0:0	6	life
op	9:34	0:0	6	->
water	9:36	0:0	6	mold_color
arg	9:48	9:62	5	"\x00\x00\x00"
water	9:48	0:0	6	"\x00\x00\x00"
arg	9:64	9:65	5	3
water	9:64	0:0	6	3
stmts	10:8	11:75	3	
call	10:8	11:74	4	av_log
arg	10:15	10:18	5	ctx
water	10:15	0:0	6	ctx
arg	10:20	10:34	5	AV_LOG_WARNING
water	10:20	0:0	6	AV_LOG_WARNING
arg	11:15	11:74	5	"Mold color is set while mold isn't, ignoring the color.\n"
water	11:15	0:0	6	"Mold color is set while mold isn't, ignoring the color.\n"
water	11:75	0:0	4	;
if	12:4	30:4	2	(! life -> filename)
cond	12:8	12:15	3	! life -> filename
op	12:8	0:0	4	!
water	12:9	0:0	4	life
op	12:13	0:0	4	->
water	12:15	0:0	4	filename
stmts	12:25	30:4	3	
water	12:25	0:0	4	{
decl	14:8	14:13	4	int	i
if	15:8	20:8	4	(! ( life -> buf [ 0 ] =av_calloc (life -> h * life -> w ,sizeof ( * life -> buf [ 0 ] ) ) ) || ! ( life -> buf [ 1 ] =av_calloc (life -> h * life -> w ,sizeof ( * life -> buf [ 1 ] ) ) ))
cond	15:12	16:80	5	! ( life -> buf [ 0 ] =av_calloc (life -> h * life -> w ,sizeof ( * life -> buf [ 0 ] ) ) ) || ! ( life -> buf [ 1 ] =av_calloc (life -> h * life -> w ,sizeof ( * life -> buf [ 1 ] ) ) )
op	15:12	0:0	6	!
water	15:13	0:0	6	(
water	15:14	0:0	6	life
op	15:18	0:0	6	->
water	15:20	0:0	6	buf
op	15:23	0:0	6	[
water	15:24	0:0	6	0
op	15:25	0:0	6	]
op	15:27	0:0	6	=
call	15:29	15:79	6	av_calloc
arg	15:39	15:56	7	life->h*life->w
water	15:39	0:0	8	life
op	15:43	0:0	8	->
water	15:45	0:0	8	h
op	15:47	0:0	8	*
water	15:49	0:0	8	life
op	15:53	0:0	8	->
water	15:55	0:0	8	w
arg	15:58	15:79	7	sizeof(*life->buf[0])
op	15:58	0:0	8	sizeof
water	15:64	0:0	8	(
op	15:65	0:0	8	*
water	15:66	0:0	8	life
op	15:70	0:0	8	->
water	15:72	0:0	8	buf
op	15:75	0:0	8	[
water	15:76	0:0	8	0
op	15:77	0:0	8	]
water	15:78	0:0	8	)
water	15:80	0:0	6	)
op	15:82	0:0	6	||
op	16:12	0:0	6	!
water	16:13	0:0	6	(
water	16:14	0:0	6	life
op	16:18	0:0	6	->
water	16:20	0:0	6	buf
op	16:23	0:0	6	[
water	16:24	0:0	6	1
op	16:25	0:0	6	]
op	16:27	0:0	6	=
call	16:29	16:79	6	av_calloc
arg	16:39	16:56	7	life->h*life->w
water	16:39	0:0	8	life
op	16:43	0:0	8	->
water	16:45	0:0	8	h
op	16:47	0:0	8	*
water	16:49	0:0	8	life
op	16:53	0:0	8	->
water	16:55	0:0	8	w
arg	16:58	16:79	7	sizeof(*life->buf[1])
op	16:58	0:0	8	sizeof
water	16:64	0:0	8	(
op	16:65	0:0	8	*
water	16:66	0:0	8	life
op	16:70	0:0	8	->
water	16:72	0:0	8	buf
op	16:75	0:0	8	[
water	16:76	0:0	8	1
op	16:77	0:0	8	]
water	16:78	0:0	8	)
water	16:80	0:0	6	)
stmts	16:83	20:8	5	
water	16:83	0:0	6	{
call	17:12	17:34	6	av_freep
arg	17:21	17:34	7	&life->buf[0]
op	17:21	0:0	8	&
water	17:22	0:0	8	life
op	17:26	0:0	8	->
water	17:28	0:0	8	buf
op	17:31	0:0	8	[
water	17:32	0:0	8	0
op	17:33	0:0	8	]
water	17:35	0:0	6	;
call	18:12	18:34	6	av_freep
arg	18:21	18:34	7	&life->buf[1]
op	18:21	0:0	8	&
water	18:22	0:0	8	life
op	18:26	0:0	8	->
water	18:28	0:0	8	buf
op	18:31	0:0	8	[
water	18:32	0:0	8	1
op	18:33	0:0	8	]
water	18:35	0:0	6	;
return	19:12	19:34	6	AVERROR(ENOMEM)
call	19:19	19:33	7	AVERROR
arg	19:27	19:33	8	ENOMEM
water	19:27	0:0	9	ENOMEM
water	20:8	0:0	6	}
if	21:8	22:52	4	(life -> random_seed == - 1)
cond	21:12	21:34	5	life -> random_seed == - 1
water	21:12	0:0	6	life
op	21:16	0:0	6	->
water	21:18	0:0	6	random_seed
op	21:30	0:0	6	==
op	21:33	0:0	6	-
water	21:34	0:0	6	1
stmts	22:12	22:52	5	
water	22:12	0:0	6	life
op	22:16	0:0	6	->
water	22:18	0:0	6	random_seed
op	22:30	0:0	6	=
call	22:32	22:51	6	av_get_random_seed
water	22:52	0:0	6	;
call	23:8	23:49	4	av_lfg_init
arg	23:20	23:30	5	&life->lfg
op	23:20	0:0	6	&
water	23:21	0:0	6	life
op	23:25	0:0	6	->
water	23:27	0:0	6	lfg
arg	23:32	23:49	5	life->random_seed
water	23:32	0:0	6	life
op	23:36	0:0	6	->
water	23:38	0:0	6	random_seed
water	23:50	0:0	4	;
for	24:8	28:8	4	(i = 0 ;i < life -> w * life -> h;i ++)
forinit	24:13	24:18	5	i = 0 ;
water	24:13	0:0	6	i
op	24:15	0:0	6	=
water	24:17	0:0	6	0
water	24:18	0:0	6	;
cond	24:20	24:40	5	i < life -> w * life -> h
water	24:20	0:0	6	i
op	24:22	0:0	6	<
water	24:24	0:0	6	life
op	24:28	0:0	6	->
water	24:30	0:0	6	w
op	24:32	0:0	6	*
water	24:34	0:0	6	life
op	24:38	0:0	6	->
water	24:40	0:0	6	h
forexpr	24:43	24:44	5	i ++
water	24:43	0:0	6	i
op	24:44	0:0	6	++
stmts	24:48	28:8	5	
water	24:48	0:0	6	{
decl	25:12	25:66	6	double	r
op	25:21	0:0	6	=
water	25:23	0:0	6	(
water	25:24	0:0	6	double
water	25:30	0:0	6	)
call	25:31	25:52	7	av_lfg_get
arg	25:42	25:52	8	&life->lfg
op	25:42	0:0	9	&
water	25:43	0:0	9	life
op	25:47	0:0	9	->
water	25:49	0:0	9	lfg
op	25:54	0:0	6	/
water	25:56	0:0	6	UINT32_MAX
if	26:12	27:44	6	(r <= life -> random_fill_ratio)
cond	26:16	26:27	7	r <= life -> random_fill_ratio
water	26:16	0:0	8	r
op	26:18	0:0	8	<=
water	26:21	0:0	8	life
op	26:25	0:0	8	->
water	26:27	0:0	8	random_fill_ratio
stmts	27:16	27:44	7	
water	27:16	0:0	8	life
op	27:20	0:0	8	->
water	27:22	0:0	8	buf
op	27:25	0:0	8	[
water	27:26	0:0	8	0
op	27:27	0:0	8	]
op	27:28	0:0	8	[
water	27:29	0:0	8	i
op	27:30	0:0	8	]
op	27:32	0:0	8	=
water	27:34	0:0	8	ALIVE_CELL
water	27:44	0:0	8	;
water	28:8	0:0	6	}
water	29:8	0:0	4	life
op	29:12	0:0	4	->
water	29:14	0:0	4	buf_idx
op	29:22	0:0	4	=
water	29:24	0:0	4	0
water	29:25	0:0	4	;
water	30:4	0:0	4	}
else	30:6	33:4	2
stmts	30:11	33:4	3	
water	30:11	0:0	4	{
if	31:8	32:22	4	(( ret =init_pattern_from_file (ctx ) ) < 0)
cond	31:12	31:50	5	( ret =init_pattern_from_file (ctx ) ) < 0
water	31:12	0:0	6	(
water	31:13	0:0	6	ret
op	31:17	0:0	6	=
call	31:19	31:45	6	init_pattern_from_file
arg	31:42	31:45	7	ctx
water	31:42	0:0	8	ctx
water	31:46	0:0	6	)
op	31:48	0:0	6	<
water	31:50	0:0	6	0
stmts	32:12	32:22	5	
return	32:12	32:22	6	ret
water	32:19	0:0	7	ret
water	33:4	0:0	4	}
call	34:4	38:28	2	av_log
arg	34:11	34:14	3	ctx
water	34:11	0:0	4	ctx
arg	34:16	34:30	3	AV_LOG_VERBOSE
water	34:16	0:0	4	AV_LOG_VERBOSE
arg	35:11	35:82	3	"s:%dx%d r:%d/%d rule:%s stay_rule:%d born_rule:%d stitch:%d seed:%u\n"
water	35:11	0:0	4	"s:%dx%d r:%d/%d rule:%s stay_rule:%d born_rule:%d stitch:%d seed:%u\n"
arg	36:11	36:18	3	life->w
water	36:11	0:0	4	life
op	36:15	0:0	4	->
water	36:17	0:0	4	w
arg	36:20	36:27	3	life->h
water	36:20	0:0	4	life
op	36:24	0:0	4	->
water	36:26	0:0	4	h
arg	36:29	36:49	3	life->frame_rate.num
water	36:29	0:0	4	life
op	36:33	0:0	4	->
water	36:35	0:0	4	frame_rate
op	36:45	0:0	4	.
water	36:46	0:0	4	num
arg	36:51	36:71	3	life->frame_rate.den
water	36:51	0:0	4	life
op	36:55	0:0	4	->
water	36:57	0:0	4	frame_rate
op	36:67	0:0	4	.
water	36:68	0:0	4	den
arg	37:11	37:25	3	life->rule_str
water	37:11	0:0	4	life
op	37:15	0:0	4	->
water	37:17	0:0	4	rule_str
arg	37:27	37:42	3	life->stay_rule
water	37:27	0:0	4	life
op	37:31	0:0	4	->
water	37:33	0:0	4	stay_rule
arg	37:44	37:59	3	life->born_rule
water	37:44	0:0	4	life
op	37:48	0:0	4	->
water	37:50	0:0	4	born_rule
arg	37:61	37:73	3	life->stitch
water	37:61	0:0	4	life
op	37:65	0:0	4	->
water	37:67	0:0	4	stitch
arg	38:11	38:28	3	life->random_seed
water	38:11	0:0	4	life
op	38:15	0:0	4	->
water	38:17	0:0	4	random_seed
water	38:29	0:0	2	;
return	39:4	39:12	2	0
water	39:11	0:0	3	0
