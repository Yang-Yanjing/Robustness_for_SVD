func	1:0	37:0	0	static int	configure_output_audio_filter
params	1:40	0:0	1	
param	1:41	1:56	2	FilterGraph *	fg
param	1:58	1:79	2	OutputFilter *	ofilter
param	1:81	1:99	2	AVFilterInOut *	out
stmnts	0:0	36:15	1	
decl	3:4	3:36	2	OutputStream	*ost
op	3:22	0:0	2	=
water	3:24	0:0	2	ofilter
op	3:31	0:0	2	->
water	3:33	0:0	2	ost
decl	4:4	4:53	2	OutputFile	*of
op	4:22	0:0	2	=
water	4:24	0:0	2	output_files
op	4:36	0:0	2	[
water	4:37	0:0	2	ost
op	4:40	0:0	2	->
water	4:42	0:0	2	file_index
op	4:52	0:0	2	]
decl	5:4	5:41	2	AVCodecContext	*codec
op	5:27	0:0	2	=
water	5:29	0:0	2	ost
op	5:32	0:0	2	->
water	5:34	0:0	2	enc_ctx
decl	6:4	6:50	2	AVFilterContext	*last_filter
op	6:33	0:0	2	=
water	6:35	0:0	2	out
op	6:38	0:0	2	->
water	6:40	0:0	2	filter_ctx
decl	7:4	7:30	2	int	pad_idx
op	7:16	0:0	2	=
water	7:18	0:0	2	out
op	7:21	0:0	2	->
water	7:23	0:0	2	pad_idx
decl	8:4	8:54	2	char	*sample_fmts
water	8:21	0:0	2	,
decl	8:4	8:54	2	char	*sample_rates
water	8:36	0:0	2	,
decl	8:4	8:54	2	char	*channel_layouts
decl	9:4	9:18	2	char	name[255]
decl	10:4	10:11	2	int	ret
call	11:4	11:73	2	snprintf
arg	11:13	11:17	3	name
water	11:13	0:0	4	name
arg	11:19	11:31	3	sizeof(name)
op	11:19	0:0	4	sizeof
water	11:25	0:0	4	(
water	11:26	0:0	4	name
water	11:30	0:0	4	)
arg	11:33	11:44	3	"out_%d_%d"
water	11:33	0:0	4	"out_%d_%d"
arg	11:46	11:61	3	ost->file_index
water	11:46	0:0	4	ost
op	11:49	0:0	4	->
water	11:51	0:0	4	file_index
arg	11:63	11:73	3	ost->index
water	11:63	0:0	4	ost
op	11:66	0:0	4	->
water	11:68	0:0	4	index
water	11:74	0:0	2	;
water	12:4	0:0	2	ret
op	12:8	0:0	2	=
call	12:10	14:66	2	avfilter_graph_create_filter
arg	12:39	12:55	3	&ofilter->filter
op	12:39	0:0	4	&
water	12:40	0:0	4	ofilter
op	12:47	0:0	4	->
water	12:49	0:0	4	filter
arg	13:39	13:74	3	avfilter_get_by_name("abuffersink")
call	13:39	13:73	4	avfilter_get_by_name
arg	13:60	13:73	5	"abuffersink"
water	13:60	0:0	6	"abuffersink"
arg	14:39	14:43	3	name
water	14:39	0:0	4	name
arg	14:45	14:49	3	NULL
water	14:45	0:0	4	NULL
arg	14:51	14:55	3	NULL
water	14:51	0:0	4	NULL
arg	14:57	14:66	3	fg->graph
water	14:57	0:0	4	fg
op	14:59	0:0	4	->
water	14:61	0:0	4	graph
water	14:67	0:0	2	;
if	15:4	16:18	2	(ret < 0)
cond	15:8	15:14	3	ret < 0
water	15:8	0:0	4	ret
op	15:12	0:0	4	<
water	15:14	0:0	4	0
stmts	16:8	16:18	3	
return	16:8	16:18	4	ret
water	16:15	0:0	5	ret
if	17:4	18:18	2	(( ret =av_opt_set_int (ofilter -> filter ,"all_channel_counts" ,1 ,AV_OPT_SEARCH_CHILDREN ) ) < 0)
cond	17:8	17:99	3	( ret =av_opt_set_int (ofilter -> filter ,"all_channel_counts" ,1 ,AV_OPT_SEARCH_CHILDREN ) ) < 0
water	17:8	0:0	4	(
water	17:9	0:0	4	ret
op	17:13	0:0	4	=
call	17:15	17:94	4	av_opt_set_int
arg	17:30	17:45	5	ofilter->filter
water	17:30	0:0	6	ofilter
op	17:37	0:0	6	->
water	17:39	0:0	6	filter
arg	17:47	17:67	5	"all_channel_counts"
water	17:47	0:0	6	"all_channel_counts"
arg	17:69	17:70	5	1
water	17:69	0:0	6	1
arg	17:72	17:94	5	AV_OPT_SEARCH_CHILDREN
water	17:72	0:0	6	AV_OPT_SEARCH_CHILDREN
water	17:95	0:0	4	)
op	17:97	0:0	4	<
water	17:99	0:0	4	0
stmts	18:8	18:18	3	
return	18:8	18:18	4	ret
water	18:15	0:0	5	ret
decl	20:4	20:29	2	AVFilterContext	*filt_ctx
call	22:4	23:56	2	av_log
arg	22:11	22:15	3	NULL
water	22:11	0:0	4	NULL
arg	22:17	22:28	3	AV_LOG_INFO
water	22:17	0:0	4	AV_LOG_INFO
arg	22:30	23:51	3	opt_name" is forwarded to lavfi ""similarly to -af "filter_name"=%s.\n"
water	22:30	0:0	4	opt_name
water	22:39	0:0	4	" is forwarded to lavfi "
water	23:11	0:0	4	"similarly to -af "
water	23:31	0:0	4	filter_name
water	23:43	0:0	4	"=%s.\n"
arg	23:53	23:56	3	arg
water	23:53	0:0	4	arg
water	23:57	0:0	2	;
water	25:4	0:0	2	ret
op	25:8	0:0	2	=
call	25:10	27:72	2	avfilter_graph_create_filter
arg	25:39	25:48	3	&filt_ctx
op	25:39	0:0	4	&
water	25:40	0:0	4	filt_ctx
arg	26:39	26:72	3	avfilter_get_by_name(filter_name)
call	26:39	26:71	4	avfilter_get_by_name
arg	26:60	26:71	5	filter_name
water	26:60	0:0	6	filter_name
arg	27:39	27:50	3	filter_name
water	27:39	0:0	4	filter_name
arg	27:52	27:55	3	arg
water	27:52	0:0	4	arg
arg	27:57	27:61	3	NULL
water	27:57	0:0	4	NULL
arg	27:63	27:72	3	fg->graph
water	27:63	0:0	4	fg
op	27:65	0:0	4	->
water	27:67	0:0	4	graph
water	27:73	0:0	2	;
if	28:4	29:18	2	(ret < 0)
cond	28:8	28:14	3	ret < 0
water	28:8	0:0	4	ret
op	28:12	0:0	4	<
water	28:14	0:0	4	0
stmts	29:8	29:18	3	
return	29:8	29:18	4	ret
water	29:15	0:0	5	ret
water	31:4	0:0	2	ret
op	31:8	0:0	2	=
call	31:10	31:57	2	avfilter_link
arg	31:24	31:35	3	last_filter
water	31:24	0:0	4	last_filter
arg	31:37	31:44	3	pad_idx
water	31:37	0:0	4	pad_idx
arg	31:46	31:54	3	filt_ctx
water	31:46	0:0	4	filt_ctx
arg	31:56	31:57	3	0
water	31:56	0:0	4	0
water	31:58	0:0	2	;
if	32:4	33:18	2	(ret < 0)
cond	32:8	32:14	3	ret < 0
water	32:8	0:0	4	ret
op	32:12	0:0	4	<
water	32:14	0:0	4	0
stmts	33:8	33:18	3	
return	33:8	33:18	4	ret
water	33:15	0:0	5	ret
water	35:4	0:0	2	last_filter
op	35:16	0:0	2	=
water	35:18	0:0	2	filt_ctx
water	35:26	0:0	2	;
water	36:4	0:0	2	pad_idx
op	36:12	0:0	2	=
water	36:14	0:0	2	0
water	36:15	0:0	2	;
decl	39:8	39:13	0	int	i
decl	40:8	40:24	0	AVBPrint	pan_buf
decl	56:8	56:31	0	AVFilterContext	*format
decl	57:8	57:22	0	char	args[256]
decl	85:8	85:22	0	char	args[256]
decl	90:8	90:22	0	char	args[256]
decl	91:8	91:13	0	int	i
