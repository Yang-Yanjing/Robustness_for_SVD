func	1:0	116:0	0	static int	vc1_decode_i_block
params	1:29	0:0	1	
param	1:30	1:43	2	VC1Context *	v
param	1:45	1:62	2	int16_t	block[64]
param	1:64	1:69	2	int	n
param	2:30	2:39	2	int	coded
param	2:41	2:54	2	int	codingset
stmnts	0:0	115:12	1	
decl	4:4	4:32	2	GetBitContext	*gb
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	v
op	4:26	0:0	2	->
water	4:28	0:0	2	s
op	4:29	0:0	2	.
water	4:30	0:0	2	gb
decl	5:4	5:29	2	MpegEncContext	*s
op	5:22	0:0	2	=
op	5:24	0:0	2	&
water	5:25	0:0	2	v
op	5:26	0:0	2	->
water	5:28	0:0	2	s
decl	6:4	6:23	2	int	dc_pred_dir
op	6:20	0:0	2	=
water	6:22	0:0	2	0
decl	7:4	7:9	2	int	i
decl	8:4	8:19	2	int16_t	*dc_val
decl	9:4	9:29	2	int16_t	*ac_val
water	9:19	0:0	2	,
decl	9:4	9:29	2	int16_t	*ac_val2
decl	10:4	10:21	2	int	dcdiff
water	10:14	0:0	2	,
decl	10:4	10:21	2	int	scale
if	12:4	14:4	2	(n < 4)
cond	12:8	12:12	3	n < 4
water	12:8	0:0	4	n
op	12:10	0:0	4	<
water	12:12	0:0	4	4
stmts	12:15	14:4	3	
water	12:15	0:0	4	{
water	13:8	0:0	4	dcdiff
op	13:15	0:0	4	=
call	13:17	13:95	4	get_vlc2
arg	13:26	13:32	5	&s->gb
op	13:26	0:0	6	&
water	13:27	0:0	6	s
op	13:28	0:0	6	->
water	13:30	0:0	6	gb
arg	13:34	13:79	5	ff_msmp4_dc_luma_vlc[s->dc_table_index].table
water	13:34	0:0	6	ff_msmp4_dc_luma_vlc
op	13:54	0:0	6	[
water	13:55	0:0	6	s
op	13:56	0:0	6	->
water	13:58	0:0	6	dc_table_index
op	13:72	0:0	6	]
op	13:73	0:0	6	.
water	13:74	0:0	6	table
arg	13:81	13:92	5	DC_VLC_BITS
water	13:81	0:0	6	DC_VLC_BITS
arg	13:94	13:95	5	3
water	13:94	0:0	6	3
water	13:96	0:0	4	;
water	14:4	0:0	4	}
else	14:6	16:4	2
stmts	14:11	16:4	3	
water	14:11	0:0	4	{
water	15:8	0:0	4	dcdiff
op	15:15	0:0	4	=
call	15:17	15:97	4	get_vlc2
arg	15:26	15:32	5	&s->gb
op	15:26	0:0	6	&
water	15:27	0:0	6	s
op	15:28	0:0	6	->
water	15:30	0:0	6	gb
arg	15:34	15:81	5	ff_msmp4_dc_chroma_vlc[s->dc_table_index].table
water	15:34	0:0	6	ff_msmp4_dc_chroma_vlc
op	15:56	0:0	6	[
water	15:57	0:0	6	s
op	15:58	0:0	6	->
water	15:60	0:0	6	dc_table_index
op	15:74	0:0	6	]
op	15:75	0:0	6	.
water	15:76	0:0	6	table
arg	15:83	15:94	5	DC_VLC_BITS
water	15:83	0:0	6	DC_VLC_BITS
arg	15:96	15:97	5	3
water	15:96	0:0	6	3
water	15:98	0:0	4	;
water	16:4	0:0	4	}
if	17:4	20:4	2	(dcdiff < 0)
cond	17:8	17:17	3	dcdiff < 0
water	17:8	0:0	4	dcdiff
op	17:15	0:0	4	<
water	17:17	0:0	4	0
stmts	17:20	20:4	3	
water	17:20	0:0	4	{
call	18:8	18:57	4	av_log
arg	18:15	18:23	5	s->avctx
water	18:15	0:0	6	s
op	18:16	0:0	6	->
water	18:18	0:0	6	avctx
arg	18:25	18:37	5	AV_LOG_ERROR
water	18:25	0:0	6	AV_LOG_ERROR
arg	18:39	18:57	5	"Illegal DC VLC\n"
water	18:39	0:0	6	"Illegal DC VLC\n"
water	18:58	0:0	4	;
return	19:8	19:17	4	-1
op	19:15	0:0	5	-
water	19:16	0:0	5	1
water	20:4	0:0	4	}
if	21:4	31:4	2	(dcdiff)
cond	21:8	21:8	3	dcdiff
water	21:8	0:0	4	dcdiff
stmts	21:16	31:4	3	
water	21:16	0:0	4	{
decl	22:8	22:64	4	const int	m
op	22:20	0:0	4	=
water	22:22	0:0	4	(
water	22:23	0:0	4	v
op	22:24	0:0	4	->
water	22:26	0:0	4	pq
op	22:29	0:0	4	==
water	22:32	0:0	4	1
op	22:34	0:0	4	||
water	22:37	0:0	4	v
op	22:38	0:0	4	->
water	22:40	0:0	4	pq
op	22:43	0:0	4	==
water	22:46	0:0	4	2
water	22:47	0:0	4	)
water	22:49	0:0	4	?
water	22:51	0:0	4	3
op	22:53	0:0	4	-
water	22:55	0:0	4	v
op	22:56	0:0	4	->
water	22:58	0:0	4	pq
water	22:61	0:0	4	:
water	22:63	0:0	4	0
if	23:8	25:8	4	(dcdiff == 119)
cond	23:12	23:22	5	dcdiff == 119
water	23:12	0:0	6	dcdiff
op	23:19	0:0	6	==
water	23:22	0:0	6	119
stmts	23:28	25:8	5	
water	23:28	0:0	6	{
water	24:12	0:0	6	dcdiff
op	24:19	0:0	6	=
call	24:21	24:39	6	get_bits
arg	24:30	24:32	7	gb
water	24:30	0:0	8	gb
arg	24:34	24:39	7	8+m
water	24:34	0:0	8	8
op	24:36	0:0	8	+
water	24:38	0:0	8	m
water	24:40	0:0	6	;
water	25:8	0:0	6	}
else	25:10	28:8	4
stmts	25:15	28:8	5	
water	25:15	0:0	6	{
if	26:12	27:73	6	(m)
cond	26:16	26:16	7	m
water	26:16	0:0	8	m
stmts	27:16	27:73	7	
water	27:16	0:0	8	dcdiff
op	27:23	0:0	8	=
water	27:25	0:0	8	(
water	27:26	0:0	8	dcdiff
op	27:33	0:0	8	<<
water	27:36	0:0	8	m
water	27:37	0:0	8	)
op	27:39	0:0	8	+
call	27:41	27:55	8	get_bits
arg	27:50	27:52	9	gb
water	27:50	0:0	10	gb
arg	27:54	27:55	9	m
water	27:54	0:0	10	m
op	27:57	0:0	8	-
water	27:59	0:0	8	(
water	27:60	0:0	8	(
water	27:61	0:0	8	1
op	27:63	0:0	8	<<
water	27:66	0:0	8	m
water	27:67	0:0	8	)
op	27:69	0:0	8	-
water	27:71	0:0	8	1
water	27:72	0:0	8	)
water	27:73	0:0	8	;
water	28:8	0:0	6	}
if	29:8	30:28	4	(get_bits1 (gb ))
cond	29:12	29:24	5	get_bits1 (gb )
call	29:12	29:24	6	get_bits1
arg	29:22	29:24	7	gb
water	29:22	0:0	8	gb
stmts	30:12	30:28	5	
water	30:12	0:0	6	dcdiff
op	30:19	0:0	6	=
op	30:21	0:0	6	-
water	30:22	0:0	6	dcdiff
water	30:28	0:0	6	;
water	31:4	0:0	4	}
water	33:4	0:0	2	dcdiff
op	33:11	0:0	2	+=
call	33:14	33:78	2	vc1_i_pred_dc
arg	33:28	33:33	3	&v->s
op	33:28	0:0	4	&
water	33:29	0:0	4	v
op	33:30	0:0	4	->
water	33:32	0:0	4	s
arg	33:35	33:45	3	v->overlap
water	33:35	0:0	4	v
op	33:36	0:0	4	->
water	33:38	0:0	4	overlap
arg	33:47	33:52	3	v->pq
water	33:47	0:0	4	v
op	33:48	0:0	4	->
water	33:50	0:0	4	pq
arg	33:54	33:55	3	n
water	33:54	0:0	4	n
arg	33:57	33:64	3	&dc_val
op	33:57	0:0	4	&
water	33:58	0:0	4	dc_val
arg	33:66	33:78	3	&dc_pred_dir
op	33:66	0:0	4	&
water	33:67	0:0	4	dc_pred_dir
water	33:79	0:0	2	;
op	34:4	0:0	2	*
water	34:5	0:0	2	dc_val
op	34:12	0:0	2	=
water	34:14	0:0	2	dcdiff
water	34:20	0:0	2	;
if	36:4	37:29	2	(n < 4)
cond	36:8	36:12	3	n < 4
water	36:8	0:0	4	n
op	36:10	0:0	4	<
water	36:12	0:0	4	4
stmts	37:8	37:29	3	
water	37:8	0:0	4	scale
op	37:14	0:0	4	=
water	37:16	0:0	4	s
op	37:17	0:0	4	->
water	37:19	0:0	4	y_dc_scale
water	37:29	0:0	4	;
else	38:4	39:29	2
stmts	39:8	39:29	3	
water	39:8	0:0	4	scale
op	39:14	0:0	4	=
water	39:16	0:0	4	s
op	39:17	0:0	4	->
water	39:19	0:0	4	c_dc_scale
water	39:29	0:0	4	;
water	40:4	0:0	2	block
op	40:9	0:0	2	[
water	40:10	0:0	2	0
op	40:11	0:0	2	]
op	40:13	0:0	2	=
water	40:15	0:0	2	dcdiff
op	40:22	0:0	2	*
water	40:24	0:0	2	scale
water	40:29	0:0	2	;
water	41:4	0:0	2	ac_val
op	41:12	0:0	2	=
water	41:14	0:0	2	s
op	41:15	0:0	2	->
water	41:17	0:0	2	ac_val
op	41:23	0:0	2	[
water	41:24	0:0	2	0
op	41:25	0:0	2	]
op	41:26	0:0	2	[
water	41:27	0:0	2	0
op	41:28	0:0	2	]
op	41:30	0:0	2	+
water	41:32	0:0	2	s
op	41:33	0:0	2	->
water	41:35	0:0	2	block_index
op	41:46	0:0	2	[
water	41:47	0:0	2	n
op	41:48	0:0	2	]
op	41:50	0:0	2	*
water	41:52	0:0	2	16
water	41:54	0:0	2	;
water	42:4	0:0	2	ac_val2
op	42:12	0:0	2	=
water	42:14	0:0	2	ac_val
water	42:20	0:0	2	;
if	43:4	44:20	2	(dc_pred_dir)
cond	43:8	43:8	3	dc_pred_dir
water	43:8	0:0	4	dc_pred_dir
stmts	44:8	44:20	3	
water	44:8	0:0	4	ac_val
op	44:15	0:0	4	-=
water	44:18	0:0	4	16
water	44:20	0:0	4	;
else	45:4	46:39	2
stmts	46:8	46:39	3	
water	46:8	0:0	4	ac_val
op	46:15	0:0	4	-=
water	46:18	0:0	4	16
op	46:21	0:0	4	*
water	46:23	0:0	4	s
op	46:24	0:0	4	->
water	46:26	0:0	4	block_wrap
op	46:36	0:0	4	[
water	46:37	0:0	4	n
op	46:38	0:0	4	]
water	46:39	0:0	4	;
water	47:4	0:0	2	scale
op	47:10	0:0	2	=
water	47:12	0:0	2	v
op	47:13	0:0	2	->
water	47:15	0:0	2	pq
op	47:18	0:0	2	*
water	47:20	0:0	2	2
op	47:22	0:0	2	+
water	47:24	0:0	2	v
op	47:25	0:0	2	->
water	47:27	0:0	2	halfpq
water	47:33	0:0	2	;
water	49:4	0:0	2	i
op	49:6	0:0	2	=
op	49:8	0:0	2	!
op	49:9	0:0	2	!
water	49:10	0:0	2	coded
water	49:15	0:0	2	;
if	50:4	92:4	2	(coded)
cond	50:8	50:8	3	coded
water	50:8	0:0	4	coded
stmts	50:15	92:4	3	
water	50:15	0:0	4	{
decl	51:8	51:33	4	int	last
op	51:17	0:0	4	=
water	51:19	0:0	4	0
water	51:20	0:0	4	,
decl	51:8	51:33	4	int	skip
water	51:26	0:0	4	,
decl	51:8	51:33	4	int	value
decl	52:8	52:31	4	const uint8_t	*zz_table
decl	53:8	53:13	4	int	k
if	54:8	59:8	4	(v -> s . ac_pred)
cond	54:12	54:17	5	v -> s . ac_pred
water	54:12	0:0	6	v
op	54:13	0:0	6	->
water	54:15	0:0	6	s
op	54:16	0:0	6	.
water	54:17	0:0	6	ac_pred
stmts	54:26	59:8	5	
water	54:26	0:0	6	{
if	55:12	56:39	6	(! dc_pred_dir)
cond	55:16	55:17	7	! dc_pred_dir
op	55:16	0:0	8	!
water	55:17	0:0	8	dc_pred_dir
stmts	56:16	56:39	7	
water	56:16	0:0	8	zz_table
op	56:25	0:0	8	=
water	56:27	0:0	8	v
op	56:28	0:0	8	->
water	56:30	0:0	8	zz_8x8
op	56:36	0:0	8	[
water	56:37	0:0	8	2
op	56:38	0:0	8	]
water	56:39	0:0	8	;
else	57:12	58:39	6
stmts	58:16	58:39	7	
water	58:16	0:0	8	zz_table
op	58:25	0:0	8	=
water	58:27	0:0	8	v
op	58:28	0:0	8	->
water	58:30	0:0	8	zz_8x8
op	58:36	0:0	8	[
water	58:37	0:0	8	3
op	58:38	0:0	8	]
water	58:39	0:0	8	;
water	59:8	0:0	6	}
else	59:10	60:35	4
stmts	60:12	60:35	5	
water	60:12	0:0	6	zz_table
op	60:21	0:0	6	=
water	60:23	0:0	6	v
op	60:24	0:0	6	->
water	60:26	0:0	6	zz_8x8
op	60:32	0:0	6	[
water	60:33	0:0	6	1
op	60:34	0:0	6	]
water	60:35	0:0	6	;
while	61:8	67:8	4	(! last)
cond	61:15	61:16	5	! last
op	61:15	0:0	6	!
water	61:16	0:0	6	last
stmts	61:22	67:8	5	
water	61:22	0:0	6	{
call	62:12	62:66	6	vc1_decode_ac_coeff
arg	62:32	62:33	7	v
water	62:32	0:0	8	v
arg	62:35	62:40	7	&last
op	62:35	0:0	8	&
water	62:36	0:0	8	last
arg	62:42	62:47	7	&skip
op	62:42	0:0	8	&
water	62:43	0:0	8	skip
arg	62:49	62:55	7	&value
op	62:49	0:0	8	&
water	62:50	0:0	8	value
arg	62:57	62:66	7	codingset
water	62:57	0:0	8	codingset
water	62:67	0:0	6	;
water	63:12	0:0	6	i
op	63:14	0:0	6	+=
water	63:17	0:0	6	skip
water	63:21	0:0	6	;
if	64:12	65:21	6	(i > 63)
cond	64:16	64:20	7	i > 63
water	64:16	0:0	8	i
op	64:18	0:0	8	>
water	64:20	0:0	8	63
stmts	65:16	65:21	7	
break	65:16	65:21	8	
water	66:12	0:0	6	block
op	66:17	0:0	6	[
water	66:18	0:0	6	zz_table
op	66:26	0:0	6	[
water	66:27	0:0	6	i
op	66:28	0:0	6	++
op	66:30	0:0	6	]
op	66:31	0:0	6	]
op	66:33	0:0	6	=
water	66:35	0:0	6	value
water	66:40	0:0	6	;
water	67:8	0:0	6	}
if	69:8	79:8	4	(s -> ac_pred)
cond	69:12	69:15	5	s -> ac_pred
water	69:12	0:0	6	s
op	69:13	0:0	6	->
water	69:15	0:0	6	ac_pred
stmts	69:24	79:8	5	
water	69:24	0:0	6	{
decl	70:12	70:18	6	int	sh
if	71:12	73:12	6	(dc_pred_dir)
cond	71:16	71:16	7	dc_pred_dir
water	71:16	0:0	8	dc_pred_dir
stmts	71:29	73:12	7	
water	71:29	0:0	8	{
water	72:16	0:0	8	sh
op	72:19	0:0	8	=
water	72:21	0:0	8	v
op	72:22	0:0	8	->
water	72:24	0:0	8	left_blk_sh
water	72:35	0:0	8	;
water	73:12	0:0	8	}
else	73:14	76:12	6
stmts	73:19	76:12	7	
water	73:19	0:0	8	{
water	74:16	0:0	8	sh
op	74:19	0:0	8	=
water	74:21	0:0	8	v
op	74:22	0:0	8	->
water	74:24	0:0	8	top_blk_sh
water	74:34	0:0	8	;
water	75:16	0:0	8	ac_val
op	75:23	0:0	8	+=
water	75:26	0:0	8	8
water	75:27	0:0	8	;
water	76:12	0:0	8	}
for	77:12	78:43	6	(k = 1 ;k < 8;k ++)
forinit	77:17	77:22	7	k = 1 ;
water	77:17	0:0	8	k
op	77:19	0:0	8	=
water	77:21	0:0	8	1
water	77:22	0:0	8	;
cond	77:24	77:28	7	k < 8
water	77:24	0:0	8	k
op	77:26	0:0	8	<
water	77:28	0:0	8	8
forexpr	77:31	77:32	7	k ++
water	77:31	0:0	8	k
op	77:32	0:0	8	++
stmts	78:16	78:43	7	
water	78:16	0:0	8	block
op	78:21	0:0	8	[
water	78:22	0:0	8	k
op	78:24	0:0	8	<<
water	78:27	0:0	8	sh
op	78:29	0:0	8	]
op	78:31	0:0	8	+=
water	78:34	0:0	8	ac_val
op	78:40	0:0	8	[
water	78:41	0:0	8	k
op	78:42	0:0	8	]
water	78:43	0:0	8	;
water	79:8	0:0	6	}
for	81:8	84:8	4	(k = 1 ;k < 8;k ++)
forinit	81:13	81:18	5	k = 1 ;
water	81:13	0:0	6	k
op	81:15	0:0	6	=
water	81:17	0:0	6	1
water	81:18	0:0	6	;
cond	81:20	81:24	5	k < 8
water	81:20	0:0	6	k
op	81:22	0:0	6	<
water	81:24	0:0	6	8
forexpr	81:27	81:28	5	k ++
water	81:27	0:0	6	k
op	81:28	0:0	6	++
stmts	81:32	84:8	5	
water	81:32	0:0	6	{
water	82:12	0:0	6	ac_val2
op	82:19	0:0	6	[
water	82:20	0:0	6	k
op	82:21	0:0	6	]
op	82:27	0:0	6	=
water	82:29	0:0	6	block
op	82:34	0:0	6	[
water	82:35	0:0	6	k
op	82:37	0:0	6	<<
water	82:40	0:0	6	v
op	82:41	0:0	6	->
water	82:43	0:0	6	left_blk_sh
op	82:54	0:0	6	]
water	82:55	0:0	6	;
water	83:12	0:0	6	ac_val2
op	83:19	0:0	6	[
water	83:20	0:0	6	k
op	83:22	0:0	6	+
water	83:24	0:0	6	8
op	83:25	0:0	6	]
op	83:27	0:0	6	=
water	83:29	0:0	6	block
op	83:34	0:0	6	[
water	83:35	0:0	6	k
op	83:37	0:0	6	<<
water	83:40	0:0	6	v
op	83:41	0:0	6	->
water	83:43	0:0	6	top_blk_sh
op	83:53	0:0	6	]
water	83:54	0:0	6	;
water	84:8	0:0	6	}
for	86:8	91:12	4	(k = 1 ;k < 64;k ++)
forinit	86:13	86:18	5	k = 1 ;
water	86:13	0:0	6	k
op	86:15	0:0	6	=
water	86:17	0:0	6	1
water	86:18	0:0	6	;
cond	86:20	86:24	5	k < 64
water	86:20	0:0	6	k
op	86:22	0:0	6	<
water	86:24	0:0	6	64
forexpr	86:28	86:29	5	k ++
water	86:28	0:0	6	k
op	86:29	0:0	6	++
stmts	87:12	91:12	5	
if	87:12	91:12	6	(block [ k ])
cond	87:16	87:23	7	block [ k ]
water	87:16	0:0	8	block
op	87:21	0:0	8	[
water	87:22	0:0	8	k
op	87:23	0:0	8	]
stmts	87:26	91:12	7	
water	87:26	0:0	8	{
water	88:16	0:0	8	block
op	88:21	0:0	8	[
water	88:22	0:0	8	k
op	88:23	0:0	8	]
op	88:25	0:0	8	*=
water	88:28	0:0	8	scale
water	88:33	0:0	8	;
if	89:16	90:63	8	(! v -> pquantizer)
cond	89:20	89:24	9	! v -> pquantizer
op	89:20	0:0	10	!
water	89:21	0:0	10	v
op	89:22	0:0	10	->
water	89:24	0:0	10	pquantizer
stmts	90:20	90:63	9	
water	90:20	0:0	10	block
op	90:25	0:0	10	[
water	90:26	0:0	10	k
op	90:27	0:0	10	]
op	90:29	0:0	10	+=
water	90:32	0:0	10	(
water	90:33	0:0	10	block
op	90:38	0:0	10	[
water	90:39	0:0	10	k
op	90:40	0:0	10	]
op	90:42	0:0	10	<
water	90:44	0:0	10	0
water	90:45	0:0	10	)
water	90:47	0:0	10	?
op	90:49	0:0	10	-
water	90:50	0:0	10	v
op	90:51	0:0	10	->
water	90:53	0:0	10	pq
water	90:56	0:0	10	:
water	90:58	0:0	10	v
op	90:59	0:0	10	->
water	90:61	0:0	10	pq
water	90:63	0:0	10	;
water	91:12	0:0	8	}
water	92:4	0:0	4	}
else	92:6	112:4	2
stmts	92:11	112:4	3	
water	92:11	0:0	4	{
decl	93:8	93:13	4	int	k
call	94:8	94:33	4	memset
arg	94:15	94:22	5	ac_val2
water	94:15	0:0	6	ac_val2
arg	94:24	94:25	5	0
water	94:24	0:0	6	0
arg	94:27	94:33	5	16*2
water	94:27	0:0	6	16
op	94:30	0:0	6	*
water	94:32	0:0	6	2
water	94:34	0:0	4	;
if	96:8	111:8	4	(s -> ac_pred)
cond	96:12	96:15	5	s -> ac_pred
water	96:12	0:0	6	s
op	96:13	0:0	6	->
water	96:15	0:0	6	ac_pred
stmts	96:24	111:8	5	
water	96:24	0:0	6	{
decl	97:12	97:18	6	int	sh
if	98:12	100:12	6	(dc_pred_dir)
cond	98:16	98:16	7	dc_pred_dir
water	98:16	0:0	8	dc_pred_dir
stmts	98:29	100:12	7	
water	98:29	0:0	8	{
water	99:16	0:0	8	sh
op	99:19	0:0	8	=
water	99:21	0:0	8	v
op	99:22	0:0	8	->
water	99:24	0:0	8	left_blk_sh
water	99:35	0:0	8	;
water	100:12	0:0	8	}
else	100:14	104:12	6
stmts	100:19	104:12	7	
water	100:19	0:0	8	{
water	101:16	0:0	8	sh
op	101:19	0:0	8	=
water	101:21	0:0	8	v
op	101:22	0:0	8	->
water	101:24	0:0	8	top_blk_sh
water	101:34	0:0	8	;
water	102:16	0:0	8	ac_val
op	102:24	0:0	8	+=
water	102:27	0:0	8	8
water	102:28	0:0	8	;
water	103:16	0:0	8	ac_val2
op	103:24	0:0	8	+=
water	103:27	0:0	8	8
water	103:28	0:0	8	;
water	104:12	0:0	8	}
call	105:12	105:41	6	memcpy
arg	105:19	105:26	7	ac_val2
water	105:19	0:0	8	ac_val2
arg	105:28	105:34	7	ac_val
water	105:28	0:0	8	ac_val
arg	105:36	105:41	7	8*2
water	105:36	0:0	8	8
op	105:38	0:0	8	*
water	105:40	0:0	8	2
water	105:42	0:0	6	;
for	106:12	110:12	6	(k = 1 ;k < 8;k ++)
forinit	106:17	106:22	7	k = 1 ;
water	106:17	0:0	8	k
op	106:19	0:0	8	=
water	106:21	0:0	8	1
water	106:22	0:0	8	;
cond	106:24	106:28	7	k < 8
water	106:24	0:0	8	k
op	106:26	0:0	8	<
water	106:28	0:0	8	8
forexpr	106:31	106:32	7	k ++
water	106:31	0:0	8	k
op	106:32	0:0	8	++
stmts	106:36	110:12	7	
water	106:36	0:0	8	{
water	107:16	0:0	8	block
op	107:21	0:0	8	[
water	107:22	0:0	8	k
op	107:24	0:0	8	<<
water	107:27	0:0	8	sh
op	107:29	0:0	8	]
op	107:31	0:0	8	=
water	107:33	0:0	8	ac_val
op	107:39	0:0	8	[
water	107:40	0:0	8	k
op	107:41	0:0	8	]
op	107:43	0:0	8	*
water	107:45	0:0	8	scale
water	107:50	0:0	8	;
if	108:16	109:75	8	(! v -> pquantizer && block [ k << sh ])
cond	108:20	108:51	9	! v -> pquantizer && block [ k << sh ]
op	108:20	0:0	10	!
water	108:21	0:0	10	v
op	108:22	0:0	10	->
water	108:24	0:0	10	pquantizer
op	108:35	0:0	10	&&
water	108:38	0:0	10	block
op	108:43	0:0	10	[
water	108:44	0:0	10	k
op	108:46	0:0	10	<<
water	108:49	0:0	10	sh
op	108:51	0:0	10	]
stmts	109:20	109:75	9	
water	109:20	0:0	10	block
op	109:25	0:0	10	[
water	109:26	0:0	10	k
op	109:28	0:0	10	<<
water	109:31	0:0	10	sh
op	109:33	0:0	10	]
op	109:35	0:0	10	+=
water	109:38	0:0	10	(
water	109:39	0:0	10	block
op	109:44	0:0	10	[
water	109:45	0:0	10	k
op	109:47	0:0	10	<<
water	109:50	0:0	10	sh
op	109:52	0:0	10	]
op	109:54	0:0	10	<
water	109:56	0:0	10	0
water	109:57	0:0	10	)
water	109:59	0:0	10	?
op	109:61	0:0	10	-
water	109:62	0:0	10	v
op	109:63	0:0	10	->
water	109:65	0:0	10	pq
water	109:68	0:0	10	:
water	109:70	0:0	10	v
op	109:71	0:0	10	->
water	109:73	0:0	10	pq
water	109:75	0:0	10	;
water	110:12	0:0	8	}
water	111:8	0:0	6	}
water	112:4	0:0	4	}
if	113:4	113:26	2	(s -> ac_pred)
cond	113:8	113:11	3	s -> ac_pred
water	113:8	0:0	4	s
op	113:9	0:0	4	->
water	113:11	0:0	4	ac_pred
stmts	113:20	113:26	3	
water	113:20	0:0	4	i
op	113:22	0:0	4	=
water	113:24	0:0	4	63
water	113:26	0:0	4	;
water	114:4	0:0	2	s
op	114:5	0:0	2	->
water	114:7	0:0	2	block_last_index
op	114:23	0:0	2	[
water	114:24	0:0	2	n
op	114:25	0:0	2	]
op	114:27	0:0	2	=
water	114:29	0:0	2	i
water	114:30	0:0	2	;
return	115:4	115:12	2	0
water	115:11	0:0	3	0
