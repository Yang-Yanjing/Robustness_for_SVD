func	1:0	74:0	0	static int	decode_p_block
params	1:25	0:0	1	
param	1:26	1:41	2	FourXContext *	f
param	1:43	1:56	2	uint16_t *	dst
param	1:58	1:77	2	const uint16_t *	src
param	2:26	2:35	2	int	log2w
param	2:37	2:46	2	int	log2h
param	2:48	2:58	2	int	stride
stmnts	0:0	73:12	1	
decl	4:4	4:38	2	int	index
water	4:13	0:0	2	,
decl	4:4	4:38	2	int	h
water	4:16	0:0	2	,
decl	4:4	4:38	2	int	code
water	4:22	0:0	2	,
decl	4:4	4:38	2	int	ret
water	4:27	0:0	2	,
decl	4:4	4:38	2	int	scale
op	4:35	0:0	2	=
water	4:37	0:0	2	1
decl	5:4	5:25	2	uint16_t	*start
water	5:19	0:0	2	,
decl	5:4	5:25	2	uint16_t	*end
water	6:4	0:0	2	unsigned
water	6:13	0:0	2	dc
op	6:16	0:0	2	=
water	6:18	0:0	2	0
water	6:19	0:0	2	;
call	7:4	7:39	2	av_assert0
arg	7:15	7:39	3	log2w>=0&&log2h>=0
water	7:15	0:0	4	log2w
op	7:21	0:0	4	>=
water	7:24	0:0	4	0
op	7:26	0:0	4	&&
water	7:29	0:0	4	log2h
op	7:35	0:0	4	>=
water	7:38	0:0	4	0
water	7:40	0:0	2	;
water	8:4	0:0	2	index
op	8:10	0:0	2	=
water	8:12	0:0	2	size2index
op	8:22	0:0	2	[
water	8:23	0:0	2	log2h
op	8:28	0:0	2	]
op	8:29	0:0	2	[
water	8:30	0:0	2	log2w
op	8:35	0:0	2	]
water	8:36	0:0	2	;
call	9:4	9:25	2	av_assert0
arg	9:15	9:25	3	index>=0
water	9:15	0:0	4	index
op	9:21	0:0	4	>=
water	9:24	0:0	4	0
water	9:26	0:0	2	;
water	10:4	0:0	2	h
op	10:10	0:0	2	=
water	10:12	0:0	2	1
op	10:14	0:0	2	<<
water	10:17	0:0	2	log2h
water	10:22	0:0	2	;
water	11:4	0:0	2	code
op	11:10	0:0	2	=
call	11:12	12:43	2	get_vlc2
arg	11:21	11:27	3	&f->gb
op	11:21	0:0	4	&
water	11:22	0:0	4	f
op	11:23	0:0	4	->
water	11:25	0:0	4	gb
arg	11:29	11:78	3	block_type_vlc[1-(f->version>1)][index].table
water	11:29	0:0	4	block_type_vlc
op	11:43	0:0	4	[
water	11:44	0:0	4	1
op	11:46	0:0	4	-
water	11:48	0:0	4	(
water	11:49	0:0	4	f
op	11:50	0:0	4	->
water	11:52	0:0	4	version
op	11:60	0:0	4	>
water	11:62	0:0	4	1
water	11:63	0:0	4	)
op	11:64	0:0	4	]
op	11:65	0:0	4	[
water	11:66	0:0	4	index
op	11:71	0:0	4	]
op	11:72	0:0	4	.
water	11:73	0:0	4	table
arg	12:21	12:40	3	BLOCK_TYPE_VLC_BITS
water	12:21	0:0	4	BLOCK_TYPE_VLC_BITS
arg	12:42	12:43	3	1
water	12:42	0:0	4	1
water	12:44	0:0	2	;
call	13:4	13:37	2	av_assert0
arg	13:15	13:37	3	code>=0&&code<=6
water	13:15	0:0	4	code
op	13:20	0:0	4	>=
water	13:23	0:0	4	0
op	13:25	0:0	4	&&
water	13:28	0:0	4	code
op	13:33	0:0	4	<=
water	13:36	0:0	4	6
water	13:38	0:0	2	;
water	14:4	0:0	2	start
op	14:10	0:0	2	=
water	14:12	0:0	2	f
op	14:13	0:0	2	->
water	14:15	0:0	2	last_frame_buffer
water	14:32	0:0	2	;
water	15:4	0:0	2	end
op	15:10	0:0	2	=
water	15:12	0:0	2	start
op	15:18	0:0	2	+
water	15:20	0:0	2	stride
op	15:27	0:0	2	*
water	15:29	0:0	2	(
water	15:30	0:0	2	f
op	15:31	0:0	2	->
water	15:33	0:0	2	avctx
op	15:38	0:0	2	->
water	15:40	0:0	2	height
op	15:47	0:0	2	-
water	15:49	0:0	2	h
op	15:51	0:0	2	+
water	15:53	0:0	2	1
water	15:54	0:0	2	)
op	15:56	0:0	2	-
water	15:58	0:0	2	(
water	15:59	0:0	2	1
op	15:61	0:0	2	<<
water	15:64	0:0	2	log2w
water	15:69	0:0	2	)
water	15:70	0:0	2	;
if	16:4	23:4	2	(code == 1)
cond	16:8	16:16	3	code == 1
water	16:8	0:0	4	code
op	16:13	0:0	4	==
water	16:16	0:0	4	1
stmts	16:19	23:4	3	
water	16:19	0:0	4	{
water	17:8	0:0	4	log2h
op	17:13	0:0	4	--
water	17:15	0:0	4	;
if	18:8	19:22	4	(( ret =decode_p_block (f ,dst ,src ,log2w ,log2h ,stride ) ) < 0)
cond	18:12	18:72	5	( ret =decode_p_block (f ,dst ,src ,log2w ,log2h ,stride ) ) < 0
water	18:12	0:0	6	(
water	18:13	0:0	6	ret
op	18:17	0:0	6	=
call	18:19	18:67	6	decode_p_block
arg	18:34	18:35	7	f
water	18:34	0:0	8	f
arg	18:37	18:40	7	dst
water	18:37	0:0	8	dst
arg	18:42	18:45	7	src
water	18:42	0:0	8	src
arg	18:47	18:52	7	log2w
water	18:47	0:0	8	log2w
arg	18:54	18:59	7	log2h
water	18:54	0:0	8	log2h
arg	18:61	18:67	7	stride
water	18:61	0:0	8	stride
water	18:68	0:0	6	)
op	18:70	0:0	6	<
water	18:72	0:0	6	0
stmts	19:12	19:22	5	
return	19:12	19:22	6	ret
water	19:19	0:0	7	ret
return	20:8	22:51	4	decode_p_block(f,dst+(stride<<log2h),src+(stride<<log2h),log2w,log2h,stride)
call	20:15	22:50	5	decode_p_block
arg	20:30	20:31	6	f
water	20:30	0:0	7	f
arg	20:33	20:56	6	dst+(stride<<log2h)
water	20:33	0:0	7	dst
op	20:37	0:0	7	+
water	20:39	0:0	7	(
water	20:40	0:0	7	stride
op	20:47	0:0	7	<<
water	20:50	0:0	7	log2h
water	20:55	0:0	7	)
arg	21:30	21:53	6	src+(stride<<log2h)
water	21:30	0:0	7	src
op	21:34	0:0	7	+
water	21:36	0:0	7	(
water	21:37	0:0	7	stride
op	21:44	0:0	7	<<
water	21:47	0:0	7	log2h
water	21:52	0:0	7	)
arg	22:30	22:35	6	log2w
water	22:30	0:0	7	log2w
arg	22:37	22:42	6	log2h
water	22:37	0:0	7	log2h
arg	22:44	22:50	6	stride
water	22:44	0:0	7	stride
water	23:4	0:0	4	}
else	23:6	30:4	2
stmts	23:11	30:4	3	
if	23:11	30:4	4	(code == 2)
cond	23:15	23:23	5	code == 2
water	23:15	0:0	6	code
op	23:20	0:0	6	==
water	23:23	0:0	6	2
stmts	23:26	30:4	5	
water	23:26	0:0	6	{
water	24:8	0:0	6	log2w
op	24:13	0:0	6	--
water	24:15	0:0	6	;
if	25:8	26:22	6	(( ret =decode_p_block (f ,dst ,src ,log2w ,log2h ,stride ) ) < 0)
cond	25:12	25:73	7	( ret =decode_p_block (f ,dst ,src ,log2w ,log2h ,stride ) ) < 0
water	25:12	0:0	8	(
water	25:13	0:0	8	ret
op	25:17	0:0	8	=
call	25:19	25:68	8	decode_p_block
arg	25:34	25:35	9	f
water	25:34	0:0	10	f
arg	25:37	25:41	9	dst
water	25:37	0:0	10	dst
arg	25:43	25:46	9	src
water	25:43	0:0	10	src
arg	25:48	25:53	9	log2w
water	25:48	0:0	10	log2w
arg	25:55	25:60	9	log2h
water	25:55	0:0	10	log2h
arg	25:62	25:68	9	stride
water	25:62	0:0	10	stride
water	25:69	0:0	8	)
op	25:71	0:0	8	<
water	25:73	0:0	8	0
stmts	26:12	26:22	7	
return	26:12	26:22	8	ret
water	26:19	0:0	9	ret
return	27:8	29:51	6	decode_p_block(f,dst+(1<<log2w),src+(1<<log2w),log2w,log2h,stride)
call	27:15	29:50	7	decode_p_block
arg	27:30	27:31	8	f
water	27:30	0:0	9	f
arg	27:33	27:51	8	dst+(1<<log2w)
water	27:33	0:0	9	dst
op	27:37	0:0	9	+
water	27:39	0:0	9	(
water	27:40	0:0	9	1
op	27:42	0:0	9	<<
water	27:45	0:0	9	log2w
water	27:50	0:0	9	)
arg	28:30	28:48	8	src+(1<<log2w)
water	28:30	0:0	9	src
op	28:34	0:0	9	+
water	28:36	0:0	9	(
water	28:37	0:0	9	1
op	28:39	0:0	9	<<
water	28:42	0:0	9	log2w
water	28:47	0:0	9	)
arg	29:30	29:35	8	log2w
water	29:30	0:0	9	log2w
arg	29:37	29:42	8	log2h
water	29:37	0:0	9	log2h
arg	29:44	29:50	8	stride
water	29:44	0:0	9	stride
water	30:4	0:0	6	}
else	30:6	43:4	2
stmts	30:11	43:4	3	
if	30:11	43:4	4	(code == 6)
cond	30:15	30:23	5	code == 6
water	30:15	0:0	6	code
op	30:20	0:0	6	==
water	30:23	0:0	6	6
stmts	30:26	43:4	5	
water	30:26	0:0	6	{
if	31:8	34:8	6	(bytestream2_get_bytes_left (& f -> g2 ) < 4)
cond	31:12	31:49	7	bytestream2_get_bytes_left (& f -> g2 ) < 4
call	31:12	31:45	8	bytestream2_get_bytes_left
arg	31:39	31:45	9	&f->g2
op	31:39	0:0	10	&
water	31:40	0:0	10	f
op	31:41	0:0	10	->
water	31:43	0:0	10	g2
op	31:47	0:0	8	<
water	31:49	0:0	8	4
stmts	31:52	34:8	7	
water	31:52	0:0	8	{
call	32:12	32:66	8	av_log
arg	32:19	32:27	9	f->avctx
water	32:19	0:0	10	f
op	32:20	0:0	10	->
water	32:22	0:0	10	avctx
arg	32:29	32:41	9	AV_LOG_ERROR
water	32:29	0:0	10	AV_LOG_ERROR
arg	32:43	32:66	9	"wordstream overread\n"
water	32:43	0:0	10	"wordstream overread\n"
water	32:67	0:0	8	;
return	33:12	33:38	8	AVERROR_INVALIDDATA
water	33:19	0:0	9	AVERROR_INVALIDDATA
water	34:8	0:0	8	}
if	35:8	38:8	6	(log2w)
cond	35:12	35:12	7	log2w
water	35:12	0:0	8	log2w
stmts	35:19	38:8	7	
water	35:19	0:0	8	{
water	36:12	0:0	8	dst
op	36:15	0:0	8	[
water	36:16	0:0	8	0
op	36:17	0:0	8	]
op	36:24	0:0	8	=
call	36:26	36:54	8	bytestream2_get_le16u
arg	36:48	36:54	9	&f->g2
op	36:48	0:0	10	&
water	36:49	0:0	10	f
op	36:50	0:0	10	->
water	36:52	0:0	10	g2
water	36:55	0:0	8	;
water	37:12	0:0	8	dst
op	37:15	0:0	8	[
water	37:16	0:0	8	1
op	37:17	0:0	8	]
op	37:24	0:0	8	=
call	37:26	37:54	8	bytestream2_get_le16u
arg	37:48	37:54	9	&f->g2
op	37:48	0:0	10	&
water	37:49	0:0	10	f
op	37:50	0:0	10	->
water	37:52	0:0	10	g2
water	37:55	0:0	8	;
water	38:8	0:0	8	}
else	38:10	41:8	6
stmts	38:15	41:8	7	
water	38:15	0:0	8	{
water	39:12	0:0	8	dst
op	39:15	0:0	8	[
water	39:16	0:0	8	0
op	39:17	0:0	8	]
op	39:24	0:0	8	=
call	39:26	39:54	8	bytestream2_get_le16u
arg	39:48	39:54	9	&f->g2
op	39:48	0:0	10	&
water	39:49	0:0	10	f
op	39:50	0:0	10	->
water	39:52	0:0	10	g2
water	39:55	0:0	8	;
water	40:12	0:0	8	dst
op	40:15	0:0	8	[
water	40:16	0:0	8	stride
op	40:22	0:0	8	]
op	40:24	0:0	8	=
call	40:26	40:54	8	bytestream2_get_le16u
arg	40:48	40:54	9	&f->g2
op	40:48	0:0	10	&
water	40:49	0:0	10	f
op	40:50	0:0	10	->
water	40:52	0:0	10	g2
water	40:55	0:0	8	;
water	41:8	0:0	8	}
return	42:8	42:16	6	0
water	42:15	0:0	7	0
water	43:4	0:0	6	}
if	44:4	47:4	2	(( code & 3 ) == 0 &&bytestream2_get_bytes_left (& f -> g ) < 1)
cond	44:8	44:59	3	( code & 3 ) == 0 &&bytestream2_get_bytes_left (& f -> g ) < 1
water	44:8	0:0	4	(
water	44:9	0:0	4	code
op	44:13	0:0	4	&
water	44:14	0:0	4	3
water	44:15	0:0	4	)
op	44:16	0:0	4	==
water	44:18	0:0	4	0
op	44:20	0:0	4	&&
call	44:23	44:55	4	bytestream2_get_bytes_left
arg	44:50	44:55	5	&f->g
op	44:50	0:0	6	&
water	44:51	0:0	6	f
op	44:52	0:0	6	->
water	44:54	0:0	6	g
op	44:57	0:0	4	<
water	44:59	0:0	4	1
stmts	44:62	47:4	3	
water	44:62	0:0	4	{
call	45:8	45:62	4	av_log
arg	45:15	45:23	5	f->avctx
water	45:15	0:0	6	f
op	45:16	0:0	6	->
water	45:18	0:0	6	avctx
arg	45:25	45:37	5	AV_LOG_ERROR
water	45:25	0:0	6	AV_LOG_ERROR
arg	45:39	45:62	5	"bytestream overread\n"
water	45:39	0:0	6	"bytestream overread\n"
water	45:63	0:0	4	;
return	46:8	46:34	4	AVERROR_INVALIDDATA
water	46:15	0:0	5	AVERROR_INVALIDDATA
water	47:4	0:0	4	}
if	48:4	50:4	2	(code == 0)
cond	48:8	48:16	3	code == 0
water	48:8	0:0	4	code
op	48:13	0:0	4	==
water	48:16	0:0	4	0
stmts	48:19	50:4	3	
water	48:19	0:0	4	{
water	49:8	0:0	4	src
op	49:13	0:0	4	+=
water	49:16	0:0	4	f
op	49:17	0:0	4	->
water	49:19	0:0	4	mv
op	49:21	0:0	4	[
call	49:22	49:48	4	bytestream2_get_byte
arg	49:43	49:48	5	&f->g
op	49:43	0:0	6	&
water	49:44	0:0	6	f
op	49:45	0:0	6	->
water	49:47	0:0	6	g
op	49:49	0:0	4	]
water	49:50	0:0	4	;
water	50:4	0:0	4	}
else	50:6	52:4	2
stmts	50:11	52:4	3	
if	50:11	52:4	4	(code == 3 && f -> version >= 2)
cond	50:15	50:42	5	code == 3 && f -> version >= 2
water	50:15	0:0	6	code
op	50:20	0:0	6	==
water	50:23	0:0	6	3
op	50:25	0:0	6	&&
water	50:28	0:0	6	f
op	50:29	0:0	6	->
water	50:31	0:0	6	version
op	50:39	0:0	6	>=
water	50:42	0:0	6	2
stmts	50:45	52:4	5	
water	50:45	0:0	6	{
return	51:8	51:16	6	0
water	51:15	0:0	7	0
water	52:4	0:0	6	}
else	52:6	59:4	2
stmts	52:11	59:4	3	
if	52:11	59:4	4	(code == 4)
cond	52:15	52:23	5	code == 4
water	52:15	0:0	6	code
op	52:20	0:0	6	==
water	52:23	0:0	6	4
stmts	52:26	59:4	5	
water	52:26	0:0	6	{
water	53:8	0:0	6	src
op	53:13	0:0	6	+=
water	53:16	0:0	6	f
op	53:17	0:0	6	->
water	53:19	0:0	6	mv
op	53:21	0:0	6	[
call	53:22	53:48	6	bytestream2_get_byte
arg	53:43	53:48	7	&f->g
op	53:43	0:0	8	&
water	53:44	0:0	8	f
op	53:45	0:0	8	->
water	53:47	0:0	8	g
op	53:49	0:0	6	]
water	53:50	0:0	6	;
if	54:8	57:8	6	(bytestream2_get_bytes_left (& f -> g2 ) < 2)
cond	54:12	54:49	7	bytestream2_get_bytes_left (& f -> g2 ) < 2
call	54:12	54:45	8	bytestream2_get_bytes_left
arg	54:39	54:45	9	&f->g2
op	54:39	0:0	10	&
water	54:40	0:0	10	f
op	54:41	0:0	10	->
water	54:43	0:0	10	g2
op	54:47	0:0	8	<
water	54:49	0:0	8	2
stmts	54:51	57:8	7	
water	54:51	0:0	8	{
call	55:12	55:66	8	av_log
arg	55:19	55:27	9	f->avctx
water	55:19	0:0	10	f
op	55:20	0:0	10	->
water	55:22	0:0	10	avctx
arg	55:29	55:41	9	AV_LOG_ERROR
water	55:29	0:0	10	AV_LOG_ERROR
arg	55:43	55:66	9	"wordstream overread\n"
water	55:43	0:0	10	"wordstream overread\n"
water	55:67	0:0	8	;
return	56:12	56:38	8	AVERROR_INVALIDDATA
water	56:19	0:0	9	AVERROR_INVALIDDATA
water	57:8	0:0	8	}
water	58:8	0:0	6	dc
op	58:14	0:0	6	=
call	58:16	58:43	6	bytestream2_get_le16
arg	58:37	58:43	7	&f->g2
op	58:37	0:0	8	&
water	58:38	0:0	8	f
op	58:39	0:0	8	->
water	58:41	0:0	8	g2
water	58:44	0:0	6	;
water	59:4	0:0	6	}
else	59:6	67:4	2
stmts	59:11	67:4	3	
if	59:11	67:4	4	(code == 5)
cond	59:15	59:23	5	code == 5
water	59:15	0:0	6	code
op	59:20	0:0	6	==
water	59:23	0:0	6	5
stmts	59:26	67:4	5	
water	59:26	0:0	6	{
if	60:8	63:8	6	(bytestream2_get_bytes_left (& f -> g2 ) < 2)
cond	60:12	60:49	7	bytestream2_get_bytes_left (& f -> g2 ) < 2
call	60:12	60:45	8	bytestream2_get_bytes_left
arg	60:39	60:45	9	&f->g2
op	60:39	0:0	10	&
water	60:40	0:0	10	f
op	60:41	0:0	10	->
water	60:43	0:0	10	g2
op	60:47	0:0	8	<
water	60:49	0:0	8	2
stmts	60:51	63:8	7	
water	60:51	0:0	8	{
call	61:12	61:66	8	av_log
arg	61:19	61:27	9	f->avctx
water	61:19	0:0	10	f
op	61:20	0:0	10	->
water	61:22	0:0	10	avctx
arg	61:29	61:41	9	AV_LOG_ERROR
water	61:29	0:0	10	AV_LOG_ERROR
arg	61:43	61:66	9	"wordstream overread\n"
water	61:43	0:0	10	"wordstream overread\n"
water	61:67	0:0	8	;
return	62:12	62:38	8	AVERROR_INVALIDDATA
water	62:19	0:0	9	AVERROR_INVALIDDATA
water	63:8	0:0	8	}
call	64:8	64:45	6	av_assert0
arg	64:19	64:45	7	start<=src&&src<=end
water	64:19	0:0	8	start
op	64:25	0:0	8	<=
water	64:28	0:0	8	src
op	64:32	0:0	8	&&
water	64:35	0:0	8	src
op	64:39	0:0	8	<=
water	64:42	0:0	8	end
water	64:46	0:0	6	;
water	65:8	0:0	6	scale
op	65:14	0:0	6	=
water	65:16	0:0	6	0
water	65:17	0:0	6	;
water	66:8	0:0	6	dc
op	66:14	0:0	6	=
call	66:16	66:43	6	bytestream2_get_le16
arg	66:37	66:43	7	&f->g2
op	66:37	0:0	8	&
water	66:38	0:0	8	f
op	66:39	0:0	8	->
water	66:41	0:0	8	g2
water	66:44	0:0	6	;
water	67:4	0:0	6	}
if	68:4	71:4	2	(start > src || src > end)
cond	68:8	68:29	3	start > src || src > end
water	68:8	0:0	4	start
op	68:14	0:0	4	>
water	68:16	0:0	4	src
op	68:20	0:0	4	||
water	68:23	0:0	4	src
op	68:27	0:0	4	>
water	68:29	0:0	4	end
stmts	68:34	71:4	3	
water	68:34	0:0	4	{
call	69:8	69:56	4	av_log
arg	69:15	69:23	5	f->avctx
water	69:15	0:0	6	f
op	69:16	0:0	6	->
water	69:18	0:0	6	avctx
arg	69:25	69:37	5	AV_LOG_ERROR
water	69:25	0:0	6	AV_LOG_ERROR
arg	69:39	69:56	5	"mv out of pic\n"
water	69:39	0:0	6	"mv out of pic\n"
water	69:57	0:0	4	;
return	70:8	70:34	4	AVERROR_INVALIDDATA
water	70:15	0:0	5	AVERROR_INVALIDDATA
water	71:4	0:0	4	}
call	72:4	72:46	2	mcdc
arg	72:9	72:12	3	dst
water	72:9	0:0	4	dst
arg	72:14	72:17	3	src
water	72:14	0:0	4	src
arg	72:19	72:24	3	log2w
water	72:19	0:0	4	log2w
arg	72:26	72:27	3	h
water	72:26	0:0	4	h
arg	72:29	72:35	3	stride
water	72:29	0:0	4	stride
arg	72:37	72:42	3	scale
water	72:37	0:0	4	scale
arg	72:44	72:46	3	dc
water	72:44	0:0	4	dc
water	72:47	0:0	2	;
return	73:4	73:12	2	0
water	73:11	0:0	3	0
