func	1:0	202:0	0	static int	vc1_decode_p_mb_intfr
params	1:32	0:0	1	
param	1:33	1:46	2	VC1Context *	v
stmnts	0:0	201:12	1	
decl	3:4	3:29	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	v
op	3:26	0:0	2	->
water	3:28	0:0	2	s
decl	4:4	4:30	2	GetBitContext	*gb
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	gb
decl	5:4	5:9	2	int	i
decl	6:4	6:49	2	int	mb_pos
op	6:15	0:0	2	=
water	6:17	0:0	2	s
op	6:18	0:0	2	->
water	6:20	0:0	2	mb_x
op	6:25	0:0	2	+
water	6:27	0:0	2	s
op	6:28	0:0	2	->
water	6:30	0:0	2	mb_y
op	6:35	0:0	2	*
water	6:37	0:0	2	s
op	6:38	0:0	2	->
water	6:40	0:0	2	mb_stride
decl	7:4	7:15	2	int	cbp
op	7:12	0:0	2	=
water	7:14	0:0	2	0
decl	8:4	8:22	2	int	mqdiff
water	8:14	0:0	2	,
decl	8:4	8:22	2	int	mquant
decl	9:4	9:23	2	int	ttmb
op	9:13	0:0	2	=
water	9:15	0:0	2	v
op	9:16	0:0	2	->
water	9:18	0:0	2	ttfrm
decl	10:4	10:25	2	int	mb_has_coeffs
op	10:22	0:0	2	=
water	10:24	0:0	2	1
decl	11:4	11:20	2	int	dmv_x
water	11:13	0:0	2	,
decl	11:4	11:20	2	int	dmv_y
decl	12:4	12:11	2	int	val
decl	13:4	13:23	2	int	first_block
op	13:20	0:0	2	=
water	13:22	0:0	2	1
decl	14:4	14:20	2	int	dst_idx
water	14:15	0:0	2	,
decl	14:4	14:20	2	int	off
decl	15:4	15:38	2	int	skipped
water	15:15	0:0	2	,
decl	15:4	15:38	2	int	fourmv
op	15:24	0:0	2	=
water	15:26	0:0	2	0
water	15:27	0:0	2	,
decl	15:4	15:38	2	int	twomv
op	15:35	0:0	2	=
water	15:37	0:0	2	0
decl	16:4	16:40	2	int	block_cbp
op	16:18	0:0	2	=
water	16:20	0:0	2	0
water	16:21	0:0	2	,
decl	16:4	16:40	2	int	pat
water	16:26	0:0	2	,
decl	16:4	16:40	2	int	block_tt
op	16:37	0:0	2	=
water	16:39	0:0	2	0
decl	17:4	17:28	2	int	idx_mbmode
op	17:19	0:0	2	=
water	17:21	0:0	2	0
water	17:22	0:0	2	,
decl	17:4	17:28	2	int	mvbp
decl	18:4	18:25	2	int	stride_y
water	18:16	0:0	2	,
decl	18:4	18:25	2	int	fieldtx
water	19:4	0:0	2	mquant
op	19:11	0:0	2	=
water	19:13	0:0	2	v
op	19:14	0:0	2	->
water	19:16	0:0	2	pq
water	19:18	0:0	2	;
if	20:4	21:31	2	(v -> skip_is_raw)
cond	20:8	20:11	3	v -> skip_is_raw
water	20:8	0:0	4	v
op	20:9	0:0	4	->
water	20:11	0:0	4	skip_is_raw
stmts	21:8	21:31	3	
water	21:8	0:0	4	skipped
op	21:16	0:0	4	=
call	21:18	21:30	4	get_bits1
arg	21:28	21:30	5	gb
water	21:28	0:0	6	gb
water	21:31	0:0	4	;
else	22:4	23:43	2
stmts	23:8	23:43	3	
water	23:8	0:0	4	skipped
op	23:16	0:0	4	=
water	23:18	0:0	4	v
op	23:19	0:0	4	->
water	23:21	0:0	4	s
op	23:22	0:0	4	.
water	23:23	0:0	4	mbskip_table
op	23:35	0:0	4	[
water	23:36	0:0	4	mb_pos
op	23:42	0:0	4	]
water	23:43	0:0	4	;
if	24:4	184:4	2	(! skipped)
cond	24:8	24:9	3	! skipped
op	24:8	0:0	4	!
water	24:9	0:0	4	skipped
stmts	24:18	184:4	3	
water	24:18	0:0	4	{
if	25:8	26:93	4	(v -> fourmvswitch)
cond	25:12	25:15	5	v -> fourmvswitch
water	25:12	0:0	6	v
op	25:13	0:0	6	->
water	25:15	0:0	6	fourmvswitch
stmts	26:12	26:93	5	
water	26:12	0:0	6	idx_mbmode
op	26:23	0:0	6	=
call	26:25	26:92	6	get_vlc2
arg	26:34	26:36	7	gb
water	26:34	0:0	8	gb
arg	26:38	26:58	7	v->mbmode_vlc->table
water	26:38	0:0	8	v
op	26:39	0:0	8	->
water	26:41	0:0	8	mbmode_vlc
op	26:51	0:0	8	->
water	26:53	0:0	8	table
arg	26:60	26:89	7	VC1_INTFR_4MV_MBMODE_VLC_BITS
water	26:60	0:0	8	VC1_INTFR_4MV_MBMODE_VLC_BITS
arg	26:91	26:92	7	2
water	26:91	0:0	8	2
water	26:93	0:0	6	;
else	27:8	28:96	4
stmts	28:12	28:96	5	
water	28:12	0:0	6	idx_mbmode
op	28:23	0:0	6	=
call	28:25	28:95	6	get_vlc2
arg	28:34	28:36	7	gb
water	28:34	0:0	8	gb
arg	28:38	28:58	7	v->mbmode_vlc->table
water	28:38	0:0	8	v
op	28:39	0:0	8	->
water	28:41	0:0	8	mbmode_vlc
op	28:51	0:0	8	->
water	28:53	0:0	8	table
arg	28:60	28:92	7	VC1_INTFR_NON4MV_MBMODE_VLC_BITS
water	28:60	0:0	8	VC1_INTFR_NON4MV_MBMODE_VLC_BITS
arg	28:94	28:95	7	2
water	28:94	0:0	8	2
water	28:96	0:0	6	;
switch	29:8	58:8	4	(ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ])
cond	29:16	29:67	5	ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ]
water	29:16	0:0	6	ff_vc1_mbmode_intfrp
op	29:36	0:0	6	[
water	29:37	0:0	6	v
op	29:38	0:0	6	->
water	29:40	0:0	6	fourmvswitch
op	29:52	0:0	6	]
op	29:53	0:0	6	[
water	29:54	0:0	6	idx_mbmode
op	29:64	0:0	6	]
op	29:65	0:0	6	[
water	29:66	0:0	6	0
op	29:67	0:0	6	]
stmts	29:70	58:8	5	
water	29:70	0:0	6	{
label	31:8	31:31	6	case MV_PMODE_INTFR_4MV :
water	32:12	0:0	6	fourmv
op	32:19	0:0	6	=
water	32:21	0:0	6	1
water	32:22	0:0	6	;
water	33:12	0:0	6	v
op	33:13	0:0	6	->
water	33:15	0:0	6	blk_mv_type
op	33:26	0:0	6	[
water	33:27	0:0	6	s
op	33:28	0:0	6	->
water	33:30	0:0	6	block_index
op	33:41	0:0	6	[
water	33:42	0:0	6	0
op	33:43	0:0	6	]
op	33:44	0:0	6	]
op	33:46	0:0	6	=
water	33:48	0:0	6	0
water	33:49	0:0	6	;
water	34:12	0:0	6	v
op	34:13	0:0	6	->
water	34:15	0:0	6	blk_mv_type
op	34:26	0:0	6	[
water	34:27	0:0	6	s
op	34:28	0:0	6	->
water	34:30	0:0	6	block_index
op	34:41	0:0	6	[
water	34:42	0:0	6	1
op	34:43	0:0	6	]
op	34:44	0:0	6	]
op	34:46	0:0	6	=
water	34:48	0:0	6	0
water	34:49	0:0	6	;
water	35:12	0:0	6	v
op	35:13	0:0	6	->
water	35:15	0:0	6	blk_mv_type
op	35:26	0:0	6	[
water	35:27	0:0	6	s
op	35:28	0:0	6	->
water	35:30	0:0	6	block_index
op	35:41	0:0	6	[
water	35:42	0:0	6	2
op	35:43	0:0	6	]
op	35:44	0:0	6	]
op	35:46	0:0	6	=
water	35:48	0:0	6	0
water	35:49	0:0	6	;
water	36:12	0:0	6	v
op	36:13	0:0	6	->
water	36:15	0:0	6	blk_mv_type
op	36:26	0:0	6	[
water	36:27	0:0	6	s
op	36:28	0:0	6	->
water	36:30	0:0	6	block_index
op	36:41	0:0	6	[
water	36:42	0:0	6	3
op	36:43	0:0	6	]
op	36:44	0:0	6	]
op	36:46	0:0	6	=
water	36:48	0:0	6	0
water	36:49	0:0	6	;
break	37:12	37:17	6	
label	38:8	38:37	6	case MV_PMODE_INTFR_4MV_FIELD :
water	39:12	0:0	6	fourmv
op	39:19	0:0	6	=
water	39:21	0:0	6	1
water	39:22	0:0	6	;
water	40:12	0:0	6	v
op	40:13	0:0	6	->
water	40:15	0:0	6	blk_mv_type
op	40:26	0:0	6	[
water	40:27	0:0	6	s
op	40:28	0:0	6	->
water	40:30	0:0	6	block_index
op	40:41	0:0	6	[
water	40:42	0:0	6	0
op	40:43	0:0	6	]
op	40:44	0:0	6	]
op	40:46	0:0	6	=
water	40:48	0:0	6	1
water	40:49	0:0	6	;
water	41:12	0:0	6	v
op	41:13	0:0	6	->
water	41:15	0:0	6	blk_mv_type
op	41:26	0:0	6	[
water	41:27	0:0	6	s
op	41:28	0:0	6	->
water	41:30	0:0	6	block_index
op	41:41	0:0	6	[
water	41:42	0:0	6	1
op	41:43	0:0	6	]
op	41:44	0:0	6	]
op	41:46	0:0	6	=
water	41:48	0:0	6	1
water	41:49	0:0	6	;
water	42:12	0:0	6	v
op	42:13	0:0	6	->
water	42:15	0:0	6	blk_mv_type
op	42:26	0:0	6	[
water	42:27	0:0	6	s
op	42:28	0:0	6	->
water	42:30	0:0	6	block_index
op	42:41	0:0	6	[
water	42:42	0:0	6	2
op	42:43	0:0	6	]
op	42:44	0:0	6	]
op	42:46	0:0	6	=
water	42:48	0:0	6	1
water	42:49	0:0	6	;
water	43:12	0:0	6	v
op	43:13	0:0	6	->
water	43:15	0:0	6	blk_mv_type
op	43:26	0:0	6	[
water	43:27	0:0	6	s
op	43:28	0:0	6	->
water	43:30	0:0	6	block_index
op	43:41	0:0	6	[
water	43:42	0:0	6	3
op	43:43	0:0	6	]
op	43:44	0:0	6	]
op	43:46	0:0	6	=
water	43:48	0:0	6	1
water	43:49	0:0	6	;
break	44:12	44:17	6	
label	45:8	45:37	6	case MV_PMODE_INTFR_2MV_FIELD :
water	46:12	0:0	6	twomv
op	46:18	0:0	6	=
water	46:20	0:0	6	1
water	46:21	0:0	6	;
water	47:12	0:0	6	v
op	47:13	0:0	6	->
water	47:15	0:0	6	blk_mv_type
op	47:26	0:0	6	[
water	47:27	0:0	6	s
op	47:28	0:0	6	->
water	47:30	0:0	6	block_index
op	47:41	0:0	6	[
water	47:42	0:0	6	0
op	47:43	0:0	6	]
op	47:44	0:0	6	]
op	47:46	0:0	6	=
water	47:48	0:0	6	1
water	47:49	0:0	6	;
water	48:12	0:0	6	v
op	48:13	0:0	6	->
water	48:15	0:0	6	blk_mv_type
op	48:26	0:0	6	[
water	48:27	0:0	6	s
op	48:28	0:0	6	->
water	48:30	0:0	6	block_index
op	48:41	0:0	6	[
water	48:42	0:0	6	1
op	48:43	0:0	6	]
op	48:44	0:0	6	]
op	48:46	0:0	6	=
water	48:48	0:0	6	1
water	48:49	0:0	6	;
water	49:12	0:0	6	v
op	49:13	0:0	6	->
water	49:15	0:0	6	blk_mv_type
op	49:26	0:0	6	[
water	49:27	0:0	6	s
op	49:28	0:0	6	->
water	49:30	0:0	6	block_index
op	49:41	0:0	6	[
water	49:42	0:0	6	2
op	49:43	0:0	6	]
op	49:44	0:0	6	]
op	49:46	0:0	6	=
water	49:48	0:0	6	1
water	49:49	0:0	6	;
water	50:12	0:0	6	v
op	50:13	0:0	6	->
water	50:15	0:0	6	blk_mv_type
op	50:26	0:0	6	[
water	50:27	0:0	6	s
op	50:28	0:0	6	->
water	50:30	0:0	6	block_index
op	50:41	0:0	6	[
water	50:42	0:0	6	3
op	50:43	0:0	6	]
op	50:44	0:0	6	]
op	50:46	0:0	6	=
water	50:48	0:0	6	1
water	50:49	0:0	6	;
break	51:12	51:17	6	
label	52:8	52:31	6	case MV_PMODE_INTFR_1MV :
water	53:12	0:0	6	v
op	53:13	0:0	6	->
water	53:15	0:0	6	blk_mv_type
op	53:26	0:0	6	[
water	53:27	0:0	6	s
op	53:28	0:0	6	->
water	53:30	0:0	6	block_index
op	53:41	0:0	6	[
water	53:42	0:0	6	0
op	53:43	0:0	6	]
op	53:44	0:0	6	]
op	53:46	0:0	6	=
water	53:48	0:0	6	0
water	53:49	0:0	6	;
water	54:12	0:0	6	v
op	54:13	0:0	6	->
water	54:15	0:0	6	blk_mv_type
op	54:26	0:0	6	[
water	54:27	0:0	6	s
op	54:28	0:0	6	->
water	54:30	0:0	6	block_index
op	54:41	0:0	6	[
water	54:42	0:0	6	1
op	54:43	0:0	6	]
op	54:44	0:0	6	]
op	54:46	0:0	6	=
water	54:48	0:0	6	0
water	54:49	0:0	6	;
water	55:12	0:0	6	v
op	55:13	0:0	6	->
water	55:15	0:0	6	blk_mv_type
op	55:26	0:0	6	[
water	55:27	0:0	6	s
op	55:28	0:0	6	->
water	55:30	0:0	6	block_index
op	55:41	0:0	6	[
water	55:42	0:0	6	2
op	55:43	0:0	6	]
op	55:44	0:0	6	]
op	55:46	0:0	6	=
water	55:48	0:0	6	0
water	55:49	0:0	6	;
water	56:12	0:0	6	v
op	56:13	0:0	6	->
water	56:15	0:0	6	blk_mv_type
op	56:26	0:0	6	[
water	56:27	0:0	6	s
op	56:28	0:0	6	->
water	56:30	0:0	6	block_index
op	56:41	0:0	6	[
water	56:42	0:0	6	3
op	56:43	0:0	6	]
op	56:44	0:0	6	]
op	56:46	0:0	6	=
water	56:48	0:0	6	0
water	56:49	0:0	6	;
break	57:12	57:17	6	
water	58:8	0:0	6	}
if	59:8	105:8	4	(ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ] == MV_PMODE_INTFR_INTRA)
cond	59:12	59:68	5	ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ] == MV_PMODE_INTFR_INTRA
water	59:12	0:0	6	ff_vc1_mbmode_intfrp
op	59:32	0:0	6	[
water	59:33	0:0	6	v
op	59:34	0:0	6	->
water	59:36	0:0	6	fourmvswitch
op	59:48	0:0	6	]
op	59:49	0:0	6	[
water	59:50	0:0	6	idx_mbmode
op	59:60	0:0	6	]
op	59:61	0:0	6	[
water	59:62	0:0	6	0
op	59:63	0:0	6	]
op	59:65	0:0	6	==
water	59:68	0:0	6	MV_PMODE_INTFR_INTRA
stmts	59:90	105:8	5	
water	59:90	0:0	6	{
for	60:12	63:12	6	(i = 0 ;i < 4;i ++)
forinit	60:17	60:22	7	i = 0 ;
water	60:17	0:0	8	i
op	60:19	0:0	8	=
water	60:21	0:0	8	0
water	60:22	0:0	8	;
cond	60:24	60:28	7	i < 4
water	60:24	0:0	8	i
op	60:26	0:0	8	<
water	60:28	0:0	8	4
forexpr	60:31	60:32	7	i ++
water	60:31	0:0	8	i
op	60:32	0:0	8	++
stmts	60:36	63:12	7	
water	60:36	0:0	8	{
water	61:16	0:0	8	s
op	61:17	0:0	8	->
water	61:19	0:0	8	current_picture
op	61:34	0:0	8	.
water	61:35	0:0	8	motion_val
op	61:45	0:0	8	[
water	61:46	0:0	8	1
op	61:47	0:0	8	]
op	61:48	0:0	8	[
water	61:49	0:0	8	s
op	61:50	0:0	8	->
water	61:52	0:0	8	block_index
op	61:63	0:0	8	[
water	61:64	0:0	8	i
op	61:65	0:0	8	]
op	61:66	0:0	8	]
op	61:67	0:0	8	[
water	61:68	0:0	8	0
op	61:69	0:0	8	]
op	61:71	0:0	8	=
water	61:73	0:0	8	0
water	61:74	0:0	8	;
water	62:16	0:0	8	s
op	62:17	0:0	8	->
water	62:19	0:0	8	current_picture
op	62:34	0:0	8	.
water	62:35	0:0	8	motion_val
op	62:45	0:0	8	[
water	62:46	0:0	8	1
op	62:47	0:0	8	]
op	62:48	0:0	8	[
water	62:49	0:0	8	s
op	62:50	0:0	8	->
water	62:52	0:0	8	block_index
op	62:63	0:0	8	[
water	62:64	0:0	8	i
op	62:65	0:0	8	]
op	62:66	0:0	8	]
op	62:67	0:0	8	[
water	62:68	0:0	8	1
op	62:69	0:0	8	]
op	62:71	0:0	8	=
water	62:73	0:0	8	0
water	62:74	0:0	8	;
water	63:12	0:0	8	}
water	64:12	0:0	6	v
op	64:13	0:0	6	->
water	64:15	0:0	6	is_intra
op	64:23	0:0	6	[
water	64:24	0:0	6	s
op	64:25	0:0	6	->
water	64:27	0:0	6	mb_x
op	64:31	0:0	6	]
op	64:33	0:0	6	=
water	64:35	0:0	6	0
water	64:36	0:0	6	x3f
water	64:39	0:0	6	;
water	65:12	0:0	6	s
op	65:13	0:0	6	->
water	65:15	0:0	6	mb_intra
op	65:33	0:0	6	=
water	65:35	0:0	6	1
water	65:36	0:0	6	;
water	66:12	0:0	6	s
op	66:13	0:0	6	->
water	66:15	0:0	6	current_picture
op	66:30	0:0	6	.
water	66:31	0:0	6	mb_type
op	66:38	0:0	6	[
water	66:39	0:0	6	mb_pos
op	66:45	0:0	6	]
op	66:47	0:0	6	=
water	66:49	0:0	6	MB_TYPE_INTRA
water	66:62	0:0	6	;
water	67:12	0:0	6	fieldtx
op	67:20	0:0	6	=
water	67:22	0:0	6	v
op	67:23	0:0	6	->
water	67:25	0:0	6	fieldtx_plane
op	67:38	0:0	6	[
water	67:39	0:0	6	mb_pos
op	67:45	0:0	6	]
op	67:47	0:0	6	=
call	67:49	67:61	6	get_bits1
arg	67:59	67:61	7	gb
water	67:59	0:0	8	gb
water	67:62	0:0	6	;
water	68:12	0:0	6	mb_has_coeffs
op	68:26	0:0	6	=
call	68:28	68:40	6	get_bits1
arg	68:38	68:40	7	gb
water	68:38	0:0	8	gb
water	68:41	0:0	6	;
if	69:12	70:90	6	(mb_has_coeffs)
cond	69:16	69:16	7	mb_has_coeffs
water	69:16	0:0	8	mb_has_coeffs
stmts	70:16	70:90	7	
water	70:16	0:0	8	cbp
op	70:20	0:0	8	=
water	70:22	0:0	8	1
op	70:24	0:0	8	+
call	70:26	70:89	8	get_vlc2
arg	70:35	70:43	9	&v->s.gb
op	70:35	0:0	10	&
water	70:36	0:0	10	v
op	70:37	0:0	10	->
water	70:39	0:0	10	s
op	70:40	0:0	10	.
water	70:41	0:0	10	gb
arg	70:45	70:64	9	v->cbpcy_vlc->table
water	70:45	0:0	10	v
op	70:46	0:0	10	->
water	70:48	0:0	10	cbpcy_vlc
op	70:57	0:0	10	->
water	70:59	0:0	10	table
arg	70:66	70:86	9	VC1_CBPCY_P_VLC_BITS
water	70:66	0:0	10	VC1_CBPCY_P_VLC_BITS
arg	70:88	70:89	9	2
water	70:88	0:0	10	2
water	70:90	0:0	8	;
water	71:12	0:0	6	v
op	71:13	0:0	6	->
water	71:15	0:0	6	s
op	71:16	0:0	6	.
water	71:17	0:0	6	ac_pred
op	71:25	0:0	6	=
water	71:27	0:0	6	v
op	71:28	0:0	6	->
water	71:30	0:0	6	acpred_plane
op	71:42	0:0	6	[
water	71:43	0:0	6	mb_pos
op	71:49	0:0	6	]
op	71:51	0:0	6	=
call	71:53	71:65	6	get_bits1
arg	71:63	71:65	7	gb
water	71:63	0:0	8	gb
water	71:66	0:0	6	;
call	72:12	72:23	6	GET_MQUANT
water	72:24	0:0	6	;
water	73:12	0:0	6	s
op	73:13	0:0	6	->
water	73:15	0:0	6	current_picture
op	73:30	0:0	6	.
water	73:31	0:0	6	qscale_table
op	73:43	0:0	6	[
water	73:44	0:0	6	mb_pos
op	73:50	0:0	6	]
op	73:52	0:0	6	=
water	73:54	0:0	6	mquant
water	73:60	0:0	6	;
water	75:12	0:0	6	s
op	75:13	0:0	6	->
water	75:15	0:0	6	y_dc_scale
op	75:26	0:0	6	=
water	75:28	0:0	6	s
op	75:29	0:0	6	->
water	75:31	0:0	6	y_dc_scale_table
op	75:47	0:0	6	[
water	75:48	0:0	6	mquant
op	75:54	0:0	6	]
water	75:55	0:0	6	;
water	76:12	0:0	6	s
op	76:13	0:0	6	->
water	76:15	0:0	6	c_dc_scale
op	76:26	0:0	6	=
water	76:28	0:0	6	s
op	76:29	0:0	6	->
water	76:31	0:0	6	c_dc_scale_table
op	76:47	0:0	6	[
water	76:48	0:0	6	mquant
op	76:54	0:0	6	]
water	76:55	0:0	6	;
water	77:12	0:0	6	dst_idx
op	77:20	0:0	6	=
water	77:22	0:0	6	0
water	77:23	0:0	6	;
for	78:12	104:12	6	(i = 0 ;i < 6;i ++)
forinit	78:17	78:22	7	i = 0 ;
water	78:17	0:0	8	i
op	78:19	0:0	8	=
water	78:21	0:0	8	0
water	78:22	0:0	8	;
cond	78:24	78:28	7	i < 6
water	78:24	0:0	8	i
op	78:26	0:0	8	<
water	78:28	0:0	8	6
forexpr	78:31	78:32	7	i ++
water	78:31	0:0	8	i
op	78:32	0:0	8	++
stmts	78:36	104:12	7	
water	78:36	0:0	8	{
water	79:16	0:0	8	v
op	79:17	0:0	8	->
water	79:19	0:0	8	a_avail
op	79:27	0:0	8	=
water	79:29	0:0	8	v
op	79:30	0:0	8	->
water	79:32	0:0	8	c_avail
op	79:49	0:0	8	=
water	79:51	0:0	8	0
water	79:52	0:0	8	;
water	80:16	0:0	8	v
op	80:17	0:0	8	->
water	80:19	0:0	8	mb_type
op	80:26	0:0	8	[
water	80:27	0:0	8	0
op	80:28	0:0	8	]
op	80:29	0:0	8	[
water	80:30	0:0	8	s
op	80:31	0:0	8	->
water	80:33	0:0	8	block_index
op	80:44	0:0	8	[
water	80:45	0:0	8	i
op	80:46	0:0	8	]
op	80:47	0:0	8	]
op	80:49	0:0	8	=
water	80:51	0:0	8	1
water	80:52	0:0	8	;
water	81:16	0:0	8	s
op	81:17	0:0	8	->
water	81:19	0:0	8	dc_val
op	81:25	0:0	8	[
water	81:26	0:0	8	0
op	81:27	0:0	8	]
op	81:28	0:0	8	[
water	81:29	0:0	8	s
op	81:30	0:0	8	->
water	81:32	0:0	8	block_index
op	81:43	0:0	8	[
water	81:44	0:0	8	i
op	81:45	0:0	8	]
op	81:46	0:0	8	]
op	81:49	0:0	8	=
water	81:51	0:0	8	0
water	81:52	0:0	8	;
water	82:16	0:0	8	dst_idx
op	82:24	0:0	8	+=
water	82:27	0:0	8	i
op	82:29	0:0	8	>>
water	82:32	0:0	8	2
water	82:33	0:0	8	;
water	83:16	0:0	8	val
op	83:20	0:0	8	=
water	83:22	0:0	8	(
water	83:23	0:0	8	(
water	83:24	0:0	8	cbp
op	83:28	0:0	8	>>
water	83:31	0:0	8	(
water	83:32	0:0	8	5
op	83:34	0:0	8	-
water	83:36	0:0	8	i
water	83:37	0:0	8	)
water	83:38	0:0	8	)
op	83:40	0:0	8	&
water	83:42	0:0	8	1
water	83:43	0:0	8	)
water	83:44	0:0	8	;
if	84:16	85:84	8	(i == 2 || i == 3 || ! s -> first_slice_line)
cond	84:20	84:44	9	i == 2 || i == 3 || ! s -> first_slice_line
water	84:20	0:0	10	i
op	84:22	0:0	10	==
water	84:25	0:0	10	2
op	84:27	0:0	10	||
water	84:30	0:0	10	i
op	84:32	0:0	10	==
water	84:35	0:0	10	3
op	84:37	0:0	10	||
op	84:40	0:0	10	!
water	84:41	0:0	10	s
op	84:42	0:0	10	->
water	84:44	0:0	10	first_slice_line
stmts	85:20	85:84	9	
water	85:20	0:0	10	v
op	85:21	0:0	10	->
water	85:23	0:0	10	a_avail
op	85:31	0:0	10	=
water	85:33	0:0	10	v
op	85:34	0:0	10	->
water	85:36	0:0	10	mb_type
op	85:43	0:0	10	[
water	85:44	0:0	10	0
op	85:45	0:0	10	]
op	85:46	0:0	10	[
water	85:47	0:0	10	s
op	85:48	0:0	10	->
water	85:50	0:0	10	block_index
op	85:61	0:0	10	[
water	85:62	0:0	10	i
op	85:63	0:0	10	]
op	85:65	0:0	10	-
water	85:67	0:0	10	s
op	85:68	0:0	10	->
water	85:70	0:0	10	block_wrap
op	85:80	0:0	10	[
water	85:81	0:0	10	i
op	85:82	0:0	10	]
op	85:83	0:0	10	]
water	85:84	0:0	10	;
if	86:16	87:69	8	(i == 1 || i == 3 || s -> mb_x)
cond	86:20	86:43	9	i == 1 || i == 3 || s -> mb_x
water	86:20	0:0	10	i
op	86:22	0:0	10	==
water	86:25	0:0	10	1
op	86:27	0:0	10	||
water	86:30	0:0	10	i
op	86:32	0:0	10	==
water	86:35	0:0	10	3
op	86:37	0:0	10	||
water	86:40	0:0	10	s
op	86:41	0:0	10	->
water	86:43	0:0	10	mb_x
stmts	87:20	87:69	9	
water	87:20	0:0	10	v
op	87:21	0:0	10	->
water	87:23	0:0	10	c_avail
op	87:31	0:0	10	=
water	87:33	0:0	10	v
op	87:34	0:0	10	->
water	87:36	0:0	10	mb_type
op	87:43	0:0	10	[
water	87:44	0:0	10	0
op	87:45	0:0	10	]
op	87:46	0:0	10	[
water	87:47	0:0	10	s
op	87:48	0:0	10	->
water	87:50	0:0	10	block_index
op	87:61	0:0	10	[
water	87:62	0:0	10	i
op	87:63	0:0	10	]
op	87:65	0:0	10	-
water	87:67	0:0	10	1
op	87:68	0:0	10	]
water	87:69	0:0	10	;
call	88:16	89:77	8	vc1_decode_intra_block
arg	88:39	88:40	9	v
water	88:39	0:0	10	v
arg	88:42	88:53	9	s->block[i]
water	88:42	0:0	10	s
op	88:43	0:0	10	->
water	88:45	0:0	10	block
op	88:50	0:0	10	[
water	88:51	0:0	10	i
op	88:52	0:0	10	]
arg	88:55	88:56	9	i
water	88:55	0:0	10	i
arg	88:58	88:61	9	val
water	88:58	0:0	10	val
arg	88:63	88:69	9	mquant
water	88:63	0:0	10	mquant
arg	89:39	89:77	9	(i&4)?v->codingset2:v->codingset
water	89:39	0:0	10	(
water	89:40	0:0	10	i
op	89:42	0:0	10	&
water	89:44	0:0	10	4
water	89:45	0:0	10	)
water	89:47	0:0	10	?
water	89:49	0:0	10	v
op	89:50	0:0	10	->
water	89:52	0:0	10	codingset2
water	89:63	0:0	10	:
water	89:65	0:0	10	v
op	89:66	0:0	10	->
water	89:68	0:0	10	codingset
water	89:78	0:0	8	;
if	90:16	91:28	8	(CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	90:20	90:83	9	CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
water	90:20	0:0	10	CONFIG_GRAY
op	90:32	0:0	10	&&
water	90:35	0:0	10	(
water	90:36	0:0	10	i
op	90:38	0:0	10	>
water	90:40	0:0	10	3
water	90:41	0:0	10	)
op	90:43	0:0	10	&&
water	90:46	0:0	10	(
water	90:47	0:0	10	s
op	90:48	0:0	10	->
water	90:50	0:0	10	avctx
op	90:55	0:0	10	->
water	90:57	0:0	10	flags
op	90:63	0:0	10	&
water	90:65	0:0	10	AV_CODEC_FLAG_GRAY
water	90:83	0:0	10	)
stmts	91:20	91:28	9	
continue	91:20	91:28	10	
call	92:16	92:55	8	v->vc1dsp.vc1_inv_trans_8x8
arg	92:44	92:55	9	s->block[i]
water	92:44	0:0	10	s
op	92:45	0:0	10	->
water	92:47	0:0	10	block
op	92:52	0:0	10	[
water	92:53	0:0	10	i
op	92:54	0:0	10	]
water	92:56	0:0	8	;
if	93:16	96:16	8	(i < 4)
cond	93:20	93:24	9	i < 4
water	93:20	0:0	10	i
op	93:22	0:0	10	<
water	93:24	0:0	10	4
stmts	93:27	96:16	9	
water	93:27	0:0	10	{
water	94:20	0:0	10	stride_y
op	94:29	0:0	10	=
water	94:31	0:0	10	s
op	94:32	0:0	10	->
water	94:34	0:0	10	linesize
op	94:43	0:0	10	<<
water	94:46	0:0	10	fieldtx
water	94:53	0:0	10	;
water	95:20	0:0	10	off
op	95:24	0:0	10	=
water	95:26	0:0	10	(
water	95:27	0:0	10	fieldtx
water	95:34	0:0	10	)
water	95:36	0:0	10	?
water	95:38	0:0	10	(
water	95:39	0:0	10	(
water	95:40	0:0	10	i
op	95:42	0:0	10	&
water	95:44	0:0	10	1
water	95:45	0:0	10	)
op	95:47	0:0	10	*
water	95:49	0:0	10	8
water	95:50	0:0	10	)
op	95:52	0:0	10	+
water	95:54	0:0	10	(
water	95:55	0:0	10	(
water	95:56	0:0	10	i
op	95:58	0:0	10	&
water	95:60	0:0	10	2
water	95:61	0:0	10	)
op	95:63	0:0	10	>>
water	95:66	0:0	10	1
water	95:67	0:0	10	)
op	95:69	0:0	10	*
water	95:71	0:0	10	s
op	95:72	0:0	10	->
water	95:74	0:0	10	linesize
water	95:83	0:0	10	:
water	95:85	0:0	10	(
water	95:86	0:0	10	i
op	95:88	0:0	10	&
water	95:90	0:0	10	1
water	95:91	0:0	10	)
op	95:93	0:0	10	*
water	95:95	0:0	10	8
op	95:97	0:0	10	+
water	95:99	0:0	10	4
op	95:101	0:0	10	*
water	95:103	0:0	10	(
water	95:104	0:0	10	i
op	95:106	0:0	10	&
water	95:108	0:0	10	2
water	95:109	0:0	10	)
op	95:111	0:0	10	*
water	95:113	0:0	10	s
op	95:114	0:0	10	->
water	95:116	0:0	10	linesize
water	95:124	0:0	10	;
water	96:16	0:0	10	}
else	96:18	99:16	8
stmts	96:23	99:16	9	
water	96:23	0:0	10	{
water	97:20	0:0	10	stride_y
op	97:29	0:0	10	=
water	97:31	0:0	10	s
op	97:32	0:0	10	->
water	97:34	0:0	10	uvlinesize
water	97:44	0:0	10	;
water	98:20	0:0	10	off
op	98:24	0:0	10	=
water	98:26	0:0	10	0
water	98:27	0:0	10	;
water	99:16	0:0	10	}
call	100:16	102:58	8	s->idsp.put_signed_pixels_clamped
arg	100:50	100:61	9	s->block[i]
water	100:50	0:0	10	s
op	100:51	0:0	10	->
water	100:53	0:0	10	block
op	100:58	0:0	10	[
water	100:59	0:0	10	i
op	100:60	0:0	10	]
arg	101:50	101:72	9	s->dest[dst_idx]+off
water	101:50	0:0	10	s
op	101:51	0:0	10	->
water	101:53	0:0	10	dest
op	101:57	0:0	10	[
water	101:58	0:0	10	dst_idx
op	101:65	0:0	10	]
op	101:67	0:0	10	+
water	101:69	0:0	10	off
arg	102:50	102:58	9	stride_y
water	102:50	0:0	10	stride_y
water	102:59	0:0	8	;
water	104:12	0:0	8	}
water	105:8	0:0	6	}
else	105:10	183:8	4
stmts	105:15	183:8	5	
water	105:15	0:0	6	{
water	106:12	0:0	6	mb_has_coeffs
op	106:26	0:0	6	=
water	106:28	0:0	6	ff_vc1_mbmode_intfrp
op	106:48	0:0	6	[
water	106:49	0:0	6	v
op	106:50	0:0	6	->
water	106:52	0:0	6	fourmvswitch
op	106:64	0:0	6	]
op	106:65	0:0	6	[
water	106:66	0:0	6	idx_mbmode
op	106:76	0:0	6	]
op	106:77	0:0	6	[
water	106:78	0:0	6	3
op	106:79	0:0	6	]
water	106:80	0:0	6	;
if	107:12	108:90	6	(mb_has_coeffs)
cond	107:16	107:16	7	mb_has_coeffs
water	107:16	0:0	8	mb_has_coeffs
stmts	108:16	108:90	7	
water	108:16	0:0	8	cbp
op	108:20	0:0	8	=
water	108:22	0:0	8	1
op	108:24	0:0	8	+
call	108:26	108:89	8	get_vlc2
arg	108:35	108:43	9	&v->s.gb
op	108:35	0:0	10	&
water	108:36	0:0	10	v
op	108:37	0:0	10	->
water	108:39	0:0	10	s
op	108:40	0:0	10	.
water	108:41	0:0	10	gb
arg	108:45	108:64	9	v->cbpcy_vlc->table
water	108:45	0:0	10	v
op	108:46	0:0	10	->
water	108:48	0:0	10	cbpcy_vlc
op	108:57	0:0	10	->
water	108:59	0:0	10	table
arg	108:66	108:86	9	VC1_CBPCY_P_VLC_BITS
water	108:66	0:0	10	VC1_CBPCY_P_VLC_BITS
arg	108:88	108:89	9	2
water	108:88	0:0	10	2
water	108:90	0:0	8	;
if	109:12	111:12	6	(ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ] == MV_PMODE_INTFR_2MV_FIELD)
cond	109:16	109:72	7	ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ] == MV_PMODE_INTFR_2MV_FIELD
water	109:16	0:0	8	ff_vc1_mbmode_intfrp
op	109:36	0:0	8	[
water	109:37	0:0	8	v
op	109:38	0:0	8	->
water	109:40	0:0	8	fourmvswitch
op	109:52	0:0	8	]
op	109:53	0:0	8	[
water	109:54	0:0	8	idx_mbmode
op	109:64	0:0	8	]
op	109:65	0:0	8	[
water	109:66	0:0	8	0
op	109:67	0:0	8	]
op	109:69	0:0	8	==
water	109:72	0:0	8	MV_PMODE_INTFR_2MV_FIELD
stmts	109:98	111:12	7	
water	109:98	0:0	8	{
water	110:16	0:0	8	v
op	110:17	0:0	8	->
water	110:19	0:0	8	twomvbp
op	110:27	0:0	8	=
call	110:29	110:98	8	get_vlc2
arg	110:38	110:40	9	gb
water	110:38	0:0	10	gb
arg	110:42	110:63	9	v->twomvbp_vlc->table
water	110:42	0:0	10	v
op	110:43	0:0	10	->
water	110:45	0:0	10	twomvbp_vlc
op	110:56	0:0	10	->
water	110:58	0:0	10	table
arg	110:65	110:95	9	VC1_2MV_BLOCK_PATTERN_VLC_BITS
water	110:65	0:0	10	VC1_2MV_BLOCK_PATTERN_VLC_BITS
arg	110:97	110:98	9	1
water	110:97	0:0	10	1
water	110:99	0:0	8	;
water	111:12	0:0	8	}
else	111:14	116:12	6
stmts	111:19	116:12	7	
water	111:19	0:0	8	{
if	112:16	115:16	8	(( ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ] == MV_PMODE_INTFR_4MV ) || ( ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ] == MV_PMODE_INTFR_4MV_FIELD ))
cond	112:20	113:104	9	( ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ] == MV_PMODE_INTFR_4MV ) || ( ff_vc1_mbmode_intfrp [ v -> fourmvswitch ] [ idx_mbmode ] [ 0 ] == MV_PMODE_INTFR_4MV_FIELD )
water	112:20	0:0	10	(
water	112:21	0:0	10	ff_vc1_mbmode_intfrp
op	112:41	0:0	10	[
water	112:42	0:0	10	v
op	112:43	0:0	10	->
water	112:45	0:0	10	fourmvswitch
op	112:57	0:0	10	]
op	112:58	0:0	10	[
water	112:59	0:0	10	idx_mbmode
op	112:69	0:0	10	]
op	112:70	0:0	10	[
water	112:71	0:0	10	0
op	112:72	0:0	10	]
op	112:74	0:0	10	==
water	112:77	0:0	10	MV_PMODE_INTFR_4MV
water	112:95	0:0	10	)
op	113:20	0:0	10	||
water	113:23	0:0	10	(
water	113:24	0:0	10	ff_vc1_mbmode_intfrp
op	113:44	0:0	10	[
water	113:45	0:0	10	v
op	113:46	0:0	10	->
water	113:48	0:0	10	fourmvswitch
op	113:60	0:0	10	]
op	113:61	0:0	10	[
water	113:62	0:0	10	idx_mbmode
op	113:72	0:0	10	]
op	113:73	0:0	10	[
water	113:74	0:0	10	0
op	113:75	0:0	10	]
op	113:77	0:0	10	==
water	113:80	0:0	10	MV_PMODE_INTFR_4MV_FIELD
water	113:104	0:0	10	)
stmts	113:107	115:16	9	
water	113:107	0:0	10	{
water	114:20	0:0	10	v
op	114:21	0:0	10	->
water	114:23	0:0	10	fourmvbp
op	114:32	0:0	10	=
call	114:34	114:104	10	get_vlc2
arg	114:43	114:45	11	gb
water	114:43	0:0	12	gb
arg	114:47	114:69	11	v->fourmvbp_vlc->table
water	114:47	0:0	12	v
op	114:48	0:0	12	->
water	114:50	0:0	12	fourmvbp_vlc
op	114:62	0:0	12	->
water	114:64	0:0	12	table
arg	114:71	114:101	11	VC1_4MV_BLOCK_PATTERN_VLC_BITS
water	114:71	0:0	12	VC1_4MV_BLOCK_PATTERN_VLC_BITS
arg	114:103	114:104	11	1
water	114:103	0:0	12	1
water	114:105	0:0	10	;
water	115:16	0:0	10	}
water	116:12	0:0	8	}
water	117:12	0:0	6	s
op	117:13	0:0	6	->
water	117:15	0:0	6	mb_intra
op	117:24	0:0	6	=
water	117:26	0:0	6	v
op	117:27	0:0	6	->
water	117:29	0:0	6	is_intra
op	117:37	0:0	6	[
water	117:38	0:0	6	s
op	117:39	0:0	6	->
water	117:41	0:0	6	mb_x
op	117:45	0:0	6	]
op	117:47	0:0	6	=
water	117:49	0:0	6	0
water	117:50	0:0	6	;
for	118:12	119:52	6	(i = 0 ;i < 6;i ++)
forinit	118:17	118:22	7	i = 0 ;
water	118:17	0:0	8	i
op	118:19	0:0	8	=
water	118:21	0:0	8	0
water	118:22	0:0	8	;
cond	118:24	118:28	7	i < 6
water	118:24	0:0	8	i
op	118:26	0:0	8	<
water	118:28	0:0	8	6
forexpr	118:31	118:32	7	i ++
water	118:31	0:0	8	i
op	118:32	0:0	8	++
stmts	119:16	119:52	7	
water	119:16	0:0	8	v
op	119:17	0:0	8	->
water	119:19	0:0	8	mb_type
op	119:26	0:0	8	[
water	119:27	0:0	8	0
op	119:28	0:0	8	]
op	119:29	0:0	8	[
water	119:30	0:0	8	s
op	119:31	0:0	8	->
water	119:33	0:0	8	block_index
op	119:44	0:0	8	[
water	119:45	0:0	8	i
op	119:46	0:0	8	]
op	119:47	0:0	8	]
op	119:49	0:0	8	=
water	119:51	0:0	8	0
water	119:52	0:0	8	;
water	120:12	0:0	6	fieldtx
op	120:20	0:0	6	=
water	120:22	0:0	6	v
op	120:23	0:0	6	->
water	120:25	0:0	6	fieldtx_plane
op	120:38	0:0	6	[
water	120:39	0:0	6	mb_pos
op	120:45	0:0	6	]
op	120:47	0:0	6	=
water	120:49	0:0	6	ff_vc1_mbmode_intfrp
op	120:69	0:0	6	[
water	120:70	0:0	6	v
op	120:71	0:0	6	->
water	120:73	0:0	6	fourmvswitch
op	120:85	0:0	6	]
op	120:86	0:0	6	[
water	120:87	0:0	6	idx_mbmode
op	120:97	0:0	6	]
op	120:98	0:0	6	[
water	120:99	0:0	6	1
op	120:100	0:0	6	]
water	120:101	0:0	6	;
water	122:12	0:0	6	dst_idx
op	122:20	0:0	6	=
water	122:22	0:0	6	0
water	122:23	0:0	6	;
if	123:12	133:12	6	(fourmv)
cond	123:16	123:16	7	fourmv
water	123:16	0:0	8	fourmv
stmts	123:24	133:12	7	
water	123:24	0:0	8	{
water	124:16	0:0	8	mvbp
op	124:21	0:0	8	=
water	124:23	0:0	8	v
op	124:24	0:0	8	->
water	124:26	0:0	8	fourmvbp
water	124:34	0:0	8	;
for	125:16	131:16	8	(i = 0 ;i < 4;i ++)
forinit	125:21	125:26	9	i = 0 ;
water	125:21	0:0	10	i
op	125:23	0:0	10	=
water	125:25	0:0	10	0
water	125:26	0:0	10	;
cond	125:28	125:32	9	i < 4
water	125:28	0:0	10	i
op	125:30	0:0	10	<
water	125:32	0:0	10	4
forexpr	125:35	125:36	9	i ++
water	125:35	0:0	10	i
op	125:36	0:0	10	++
stmts	125:40	131:16	9	
water	125:40	0:0	10	{
water	126:20	0:0	10	dmv_x
op	126:26	0:0	10	=
water	126:28	0:0	10	dmv_y
op	126:34	0:0	10	=
water	126:36	0:0	10	0
water	126:37	0:0	10	;
if	127:20	128:67	10	(mvbp & ( 8 >> i ))
cond	127:24	127:38	11	mvbp & ( 8 >> i )
water	127:24	0:0	12	mvbp
op	127:29	0:0	12	&
water	127:31	0:0	12	(
water	127:32	0:0	12	8
op	127:34	0:0	12	>>
water	127:37	0:0	12	i
water	127:38	0:0	12	)
stmts	128:24	128:67	11	
call	128:24	128:66	12	get_mvdata_interlaced
arg	128:46	128:47	13	v
water	128:46	0:0	14	v
arg	128:49	128:55	13	&dmv_x
op	128:49	0:0	14	&
water	128:50	0:0	14	dmv_x
arg	128:57	128:63	13	&dmv_y
op	128:57	0:0	14	&
water	128:58	0:0	14	dmv_y
arg	128:65	128:66	13	0
water	128:65	0:0	14	0
water	128:67	0:0	12	;
call	129:20	129:104	10	ff_vc1_pred_mv_intfr
arg	129:41	129:42	11	v
water	129:41	0:0	12	v
arg	129:44	129:45	11	i
water	129:44	0:0	12	i
arg	129:47	129:52	11	dmv_x
water	129:47	0:0	12	dmv_x
arg	129:54	129:59	11	dmv_y
water	129:54	0:0	12	dmv_y
arg	129:61	129:62	11	0
water	129:61	0:0	12	0
arg	129:64	129:74	11	v->range_x
water	129:64	0:0	12	v
op	129:65	0:0	12	->
water	129:67	0:0	12	range_x
arg	129:76	129:86	11	v->range_y
water	129:76	0:0	12	v
op	129:77	0:0	12	->
water	129:79	0:0	12	range_y
arg	129:88	129:101	11	v->mb_type[0]
water	129:88	0:0	12	v
op	129:89	0:0	12	->
water	129:91	0:0	12	mb_type
op	129:98	0:0	12	[
water	129:99	0:0	12	0
op	129:100	0:0	12	]
arg	129:103	129:104	11	0
water	129:103	0:0	12	0
water	129:105	0:0	10	;
call	130:20	130:49	10	ff_vc1_mc_4mv_luma
arg	130:39	130:40	11	v
water	130:39	0:0	12	v
arg	130:42	130:43	11	i
water	130:42	0:0	12	i
arg	130:45	130:46	11	0
water	130:45	0:0	12	0
arg	130:48	130:49	11	0
water	130:48	0:0	12	0
water	130:50	0:0	10	;
water	131:16	0:0	10	}
call	132:16	132:48	8	ff_vc1_mc_4mv_chroma4
arg	132:38	132:39	9	v
water	132:38	0:0	10	v
arg	132:41	132:42	9	0
water	132:41	0:0	10	0
arg	132:44	132:45	9	0
water	132:44	0:0	10	0
arg	132:47	132:48	9	0
water	132:47	0:0	10	0
water	132:49	0:0	8	;
water	133:12	0:0	8	}
else	133:14	150:12	6
stmts	133:19	150:12	7	
if	133:19	150:12	8	(twomv)
cond	133:23	133:23	9	twomv
water	133:23	0:0	10	twomv
stmts	133:30	150:12	9	
water	133:30	0:0	10	{
water	134:16	0:0	10	mvbp
op	134:22	0:0	10	=
water	134:24	0:0	10	v
op	134:25	0:0	10	->
water	134:27	0:0	10	twomvbp
water	134:34	0:0	10	;
water	135:16	0:0	10	dmv_x
op	135:22	0:0	10	=
water	135:24	0:0	10	dmv_y
op	135:30	0:0	10	=
water	135:32	0:0	10	0
water	135:33	0:0	10	;
if	136:16	138:16	10	(mvbp & 2)
cond	136:20	136:27	11	mvbp & 2
water	136:20	0:0	12	mvbp
op	136:25	0:0	12	&
water	136:27	0:0	12	2
stmts	136:30	138:16	11	
water	136:30	0:0	12	{
call	137:20	137:62	12	get_mvdata_interlaced
arg	137:42	137:43	13	v
water	137:42	0:0	14	v
arg	137:45	137:51	13	&dmv_x
op	137:45	0:0	14	&
water	137:46	0:0	14	dmv_x
arg	137:53	137:59	13	&dmv_y
op	137:53	0:0	14	&
water	137:54	0:0	14	dmv_y
arg	137:61	137:62	13	0
water	137:61	0:0	14	0
water	137:63	0:0	12	;
water	138:16	0:0	12	}
call	139:16	139:100	10	ff_vc1_pred_mv_intfr
arg	139:37	139:38	11	v
water	139:37	0:0	12	v
arg	139:40	139:41	11	0
water	139:40	0:0	12	0
arg	139:43	139:48	11	dmv_x
water	139:43	0:0	12	dmv_x
arg	139:50	139:55	11	dmv_y
water	139:50	0:0	12	dmv_y
arg	139:57	139:58	11	2
water	139:57	0:0	12	2
arg	139:60	139:70	11	v->range_x
water	139:60	0:0	12	v
op	139:61	0:0	12	->
water	139:63	0:0	12	range_x
arg	139:72	139:82	11	v->range_y
water	139:72	0:0	12	v
op	139:73	0:0	12	->
water	139:75	0:0	12	range_y
arg	139:84	139:97	11	v->mb_type[0]
water	139:84	0:0	12	v
op	139:85	0:0	12	->
water	139:87	0:0	12	mb_type
op	139:94	0:0	12	[
water	139:95	0:0	12	0
op	139:96	0:0	12	]
arg	139:99	139:100	11	0
water	139:99	0:0	12	0
water	139:101	0:0	10	;
call	140:16	140:45	10	ff_vc1_mc_4mv_luma
arg	140:35	140:36	11	v
water	140:35	0:0	12	v
arg	140:38	140:39	11	0
water	140:38	0:0	12	0
arg	140:41	140:42	11	0
water	140:41	0:0	12	0
arg	140:44	140:45	11	0
water	140:44	0:0	12	0
water	140:46	0:0	10	;
call	141:16	141:45	10	ff_vc1_mc_4mv_luma
arg	141:35	141:36	11	v
water	141:35	0:0	12	v
arg	141:38	141:39	11	1
water	141:38	0:0	12	1
arg	141:41	141:42	11	0
water	141:41	0:0	12	0
arg	141:44	141:45	11	0
water	141:44	0:0	12	0
water	141:46	0:0	10	;
water	142:16	0:0	10	dmv_x
op	142:22	0:0	10	=
water	142:24	0:0	10	dmv_y
op	142:30	0:0	10	=
water	142:32	0:0	10	0
water	142:33	0:0	10	;
if	143:16	145:16	10	(mvbp & 1)
cond	143:20	143:27	11	mvbp & 1
water	143:20	0:0	12	mvbp
op	143:25	0:0	12	&
water	143:27	0:0	12	1
stmts	143:30	145:16	11	
water	143:30	0:0	12	{
call	144:20	144:62	12	get_mvdata_interlaced
arg	144:42	144:43	13	v
water	144:42	0:0	14	v
arg	144:45	144:51	13	&dmv_x
op	144:45	0:0	14	&
water	144:46	0:0	14	dmv_x
arg	144:53	144:59	13	&dmv_y
op	144:53	0:0	14	&
water	144:54	0:0	14	dmv_y
arg	144:61	144:62	13	0
water	144:61	0:0	14	0
water	144:63	0:0	12	;
water	145:16	0:0	12	}
call	146:16	146:100	10	ff_vc1_pred_mv_intfr
arg	146:37	146:38	11	v
water	146:37	0:0	12	v
arg	146:40	146:41	11	2
water	146:40	0:0	12	2
arg	146:43	146:48	11	dmv_x
water	146:43	0:0	12	dmv_x
arg	146:50	146:55	11	dmv_y
water	146:50	0:0	12	dmv_y
arg	146:57	146:58	11	2
water	146:57	0:0	12	2
arg	146:60	146:70	11	v->range_x
water	146:60	0:0	12	v
op	146:61	0:0	12	->
water	146:63	0:0	12	range_x
arg	146:72	146:82	11	v->range_y
water	146:72	0:0	12	v
op	146:73	0:0	12	->
water	146:75	0:0	12	range_y
arg	146:84	146:97	11	v->mb_type[0]
water	146:84	0:0	12	v
op	146:85	0:0	12	->
water	146:87	0:0	12	mb_type
op	146:94	0:0	12	[
water	146:95	0:0	12	0
op	146:96	0:0	12	]
arg	146:99	146:100	11	0
water	146:99	0:0	12	0
water	146:101	0:0	10	;
call	147:16	147:45	10	ff_vc1_mc_4mv_luma
arg	147:35	147:36	11	v
water	147:35	0:0	12	v
arg	147:38	147:39	11	2
water	147:38	0:0	12	2
arg	147:41	147:42	11	0
water	147:41	0:0	12	0
arg	147:44	147:45	11	0
water	147:44	0:0	12	0
water	147:46	0:0	10	;
call	148:16	148:45	10	ff_vc1_mc_4mv_luma
arg	148:35	148:36	11	v
water	148:35	0:0	12	v
arg	148:38	148:39	11	3
water	148:38	0:0	12	3
arg	148:41	148:42	11	0
water	148:41	0:0	12	0
arg	148:44	148:45	11	0
water	148:44	0:0	12	0
water	148:46	0:0	10	;
call	149:16	149:48	10	ff_vc1_mc_4mv_chroma4
arg	149:38	149:39	11	v
water	149:38	0:0	12	v
arg	149:41	149:42	11	0
water	149:41	0:0	12	0
arg	149:44	149:45	11	0
water	149:44	0:0	12	0
arg	149:47	149:48	11	0
water	149:47	0:0	12	0
water	149:49	0:0	10	;
water	150:12	0:0	10	}
else	150:14	158:12	6
stmts	150:19	158:12	7	
water	150:19	0:0	8	{
water	151:16	0:0	8	mvbp
op	151:21	0:0	8	=
water	151:23	0:0	8	ff_vc1_mbmode_intfrp
op	151:43	0:0	8	[
water	151:44	0:0	8	v
op	151:45	0:0	8	->
water	151:47	0:0	8	fourmvswitch
op	151:59	0:0	8	]
op	151:60	0:0	8	[
water	151:61	0:0	8	idx_mbmode
op	151:71	0:0	8	]
op	151:72	0:0	8	[
water	151:73	0:0	8	2
op	151:74	0:0	8	]
water	151:75	0:0	8	;
water	152:16	0:0	8	dmv_x
op	152:22	0:0	8	=
water	152:24	0:0	8	dmv_y
op	152:30	0:0	8	=
water	152:32	0:0	8	0
water	152:33	0:0	8	;
if	153:16	155:16	8	(mvbp)
cond	153:20	153:20	9	mvbp
water	153:20	0:0	10	mvbp
stmts	153:26	155:16	9	
water	153:26	0:0	10	{
call	154:20	154:62	10	get_mvdata_interlaced
arg	154:42	154:43	11	v
water	154:42	0:0	12	v
arg	154:45	154:51	11	&dmv_x
op	154:45	0:0	12	&
water	154:46	0:0	12	dmv_x
arg	154:53	154:59	11	&dmv_y
op	154:53	0:0	12	&
water	154:54	0:0	12	dmv_y
arg	154:61	154:62	11	0
water	154:61	0:0	12	0
water	154:63	0:0	10	;
water	155:16	0:0	10	}
call	156:16	156:100	8	ff_vc1_pred_mv_intfr
arg	156:37	156:38	9	v
water	156:37	0:0	10	v
arg	156:40	156:41	9	0
water	156:40	0:0	10	0
arg	156:43	156:48	9	dmv_x
water	156:43	0:0	10	dmv_x
arg	156:50	156:55	9	dmv_y
water	156:50	0:0	10	dmv_y
arg	156:57	156:58	9	1
water	156:57	0:0	10	1
arg	156:60	156:70	9	v->range_x
water	156:60	0:0	10	v
op	156:61	0:0	10	->
water	156:63	0:0	10	range_x
arg	156:72	156:82	9	v->range_y
water	156:72	0:0	10	v
op	156:73	0:0	10	->
water	156:75	0:0	10	range_y
arg	156:84	156:97	9	v->mb_type[0]
water	156:84	0:0	10	v
op	156:85	0:0	10	->
water	156:87	0:0	10	mb_type
op	156:94	0:0	10	[
water	156:95	0:0	10	0
op	156:96	0:0	10	]
arg	156:99	156:100	9	0
water	156:99	0:0	10	0
water	156:101	0:0	8	;
call	157:16	157:34	8	ff_vc1_mc_1mv
arg	157:30	157:31	9	v
water	157:30	0:0	10	v
arg	157:33	157:34	9	0
water	157:33	0:0	10	0
water	157:35	0:0	8	;
water	158:12	0:0	8	}
if	159:12	160:28	6	(cbp)
cond	159:16	159:16	7	cbp
water	159:16	0:0	8	cbp
stmts	160:16	160:28	7	
call	160:16	160:27	8	GET_MQUANT
water	160:28	0:0	8	;
water	161:12	0:0	6	s
op	161:13	0:0	6	->
water	161:15	0:0	6	current_picture
op	161:30	0:0	6	.
water	161:31	0:0	6	qscale_table
op	161:43	0:0	6	[
water	161:44	0:0	6	mb_pos
op	161:50	0:0	6	]
op	161:52	0:0	6	=
water	161:54	0:0	6	mquant
water	161:60	0:0	6	;
if	162:12	163:93	6	(! v -> ttmbf && cbp)
cond	162:16	162:29	7	! v -> ttmbf && cbp
op	162:16	0:0	8	!
water	162:17	0:0	8	v
op	162:18	0:0	8	->
water	162:20	0:0	8	ttmbf
op	162:26	0:0	8	&&
water	162:29	0:0	8	cbp
stmts	163:16	163:93	7	
water	163:16	0:0	8	ttmb
op	163:21	0:0	8	=
call	163:23	163:92	8	get_vlc2
arg	163:32	163:34	9	gb
water	163:32	0:0	10	gb
arg	163:36	163:70	9	ff_vc1_ttmb_vlc[v->tt_index].table
water	163:36	0:0	10	ff_vc1_ttmb_vlc
op	163:51	0:0	10	[
water	163:52	0:0	10	v
op	163:53	0:0	10	->
water	163:55	0:0	10	tt_index
op	163:63	0:0	10	]
op	163:64	0:0	10	.
water	163:65	0:0	10	table
arg	163:72	163:89	9	VC1_TTMB_VLC_BITS
water	163:72	0:0	10	VC1_TTMB_VLC_BITS
arg	163:91	163:92	9	2
water	163:91	0:0	10	2
water	163:93	0:0	8	;
for	164:12	182:12	6	(i = 0 ;i < 6;i ++)
forinit	164:17	164:22	7	i = 0 ;
water	164:17	0:0	8	i
op	164:19	0:0	8	=
water	164:21	0:0	8	0
water	164:22	0:0	8	;
cond	164:24	164:28	7	i < 6
water	164:24	0:0	8	i
op	164:26	0:0	8	<
water	164:28	0:0	8	6
forexpr	164:31	164:32	7	i ++
water	164:31	0:0	8	i
op	164:32	0:0	8	++
stmts	164:36	182:12	7	
water	164:36	0:0	8	{
water	165:16	0:0	8	s
op	165:17	0:0	8	->
water	165:19	0:0	8	dc_val
op	165:25	0:0	8	[
water	165:26	0:0	8	0
op	165:27	0:0	8	]
op	165:28	0:0	8	[
water	165:29	0:0	8	s
op	165:30	0:0	8	->
water	165:32	0:0	8	block_index
op	165:43	0:0	8	[
water	165:44	0:0	8	i
op	165:45	0:0	8	]
op	165:46	0:0	8	]
op	165:48	0:0	8	=
water	165:50	0:0	8	0
water	165:51	0:0	8	;
water	166:16	0:0	8	dst_idx
op	166:24	0:0	8	+=
water	166:27	0:0	8	i
op	166:29	0:0	8	>>
water	166:32	0:0	8	2
water	166:33	0:0	8	;
water	167:16	0:0	8	val
op	167:20	0:0	8	=
water	167:22	0:0	8	(
water	167:23	0:0	8	(
water	167:24	0:0	8	cbp
op	167:28	0:0	8	>>
water	167:31	0:0	8	(
water	167:32	0:0	8	5
op	167:34	0:0	8	-
water	167:36	0:0	8	i
water	167:37	0:0	8	)
water	167:38	0:0	8	)
op	167:40	0:0	8	&
water	167:42	0:0	8	1
water	167:43	0:0	8	)
water	167:44	0:0	8	;
if	168:16	169:81	8	(! fieldtx)
cond	168:20	168:21	9	! fieldtx
op	168:20	0:0	10	!
water	168:21	0:0	10	fieldtx
stmts	169:20	169:81	9	
water	169:20	0:0	10	off
op	169:24	0:0	10	=
water	169:26	0:0	10	(
water	169:27	0:0	10	i
op	169:29	0:0	10	&
water	169:31	0:0	10	4
water	169:32	0:0	10	)
water	169:34	0:0	10	?
water	169:36	0:0	10	0
water	169:38	0:0	10	:
water	169:40	0:0	10	(
water	169:41	0:0	10	(
water	169:42	0:0	10	i
op	169:44	0:0	10	&
water	169:46	0:0	10	1
water	169:47	0:0	10	)
op	169:49	0:0	10	*
water	169:51	0:0	10	8
op	169:53	0:0	10	+
water	169:55	0:0	10	(
water	169:56	0:0	10	i
op	169:58	0:0	10	&
water	169:60	0:0	10	2
water	169:61	0:0	10	)
op	169:63	0:0	10	*
water	169:65	0:0	10	4
op	169:67	0:0	10	*
water	169:69	0:0	10	s
op	169:70	0:0	10	->
water	169:72	0:0	10	linesize
water	169:80	0:0	10	)
water	169:81	0:0	10	;
else	170:16	171:79	8
stmts	171:20	171:79	9	
water	171:20	0:0	10	off
op	171:24	0:0	10	=
water	171:26	0:0	10	(
water	171:27	0:0	10	i
op	171:29	0:0	10	&
water	171:31	0:0	10	4
water	171:32	0:0	10	)
water	171:34	0:0	10	?
water	171:36	0:0	10	0
water	171:38	0:0	10	:
water	171:40	0:0	10	(
water	171:41	0:0	10	(
water	171:42	0:0	10	i
op	171:44	0:0	10	&
water	171:46	0:0	10	1
water	171:47	0:0	10	)
op	171:49	0:0	10	*
water	171:51	0:0	10	8
op	171:53	0:0	10	+
water	171:55	0:0	10	(
water	171:56	0:0	10	(
water	171:57	0:0	10	i
op	171:59	0:0	10	>
water	171:61	0:0	10	1
water	171:62	0:0	10	)
op	171:64	0:0	10	*
water	171:66	0:0	10	s
op	171:67	0:0	10	->
water	171:69	0:0	10	linesize
water	171:77	0:0	10	)
water	171:78	0:0	10	)
water	171:79	0:0	10	;
if	172:16	181:16	8	(val)
cond	172:20	172:20	9	val
water	172:20	0:0	10	val
stmts	172:25	181:16	9	
water	172:25	0:0	10	{
water	173:20	0:0	10	pat
op	173:24	0:0	10	=
call	173:26	176:120	10	vc1_decode_p_block
arg	173:45	173:46	11	v
water	173:45	0:0	12	v
arg	173:48	173:59	11	s->block[i]
water	173:48	0:0	12	s
op	173:49	0:0	12	->
water	173:51	0:0	12	block
op	173:56	0:0	12	[
water	173:57	0:0	12	i
op	173:58	0:0	12	]
arg	173:61	173:62	11	i
water	173:61	0:0	12	i
arg	173:64	173:70	11	mquant
water	173:64	0:0	12	mquant
arg	173:72	173:76	11	ttmb
water	173:72	0:0	12	ttmb
arg	174:45	174:56	11	first_block
water	174:45	0:0	12	first_block
arg	174:58	174:80	11	s->dest[dst_idx]+off
water	174:58	0:0	12	s
op	174:59	0:0	12	->
water	174:61	0:0	12	dest
op	174:65	0:0	12	[
water	174:66	0:0	12	dst_idx
op	174:73	0:0	12	]
op	174:75	0:0	12	+
water	174:77	0:0	12	off
arg	175:45	175:95	11	(i&4)?s->uvlinesize:(s->linesize<<fieldtx)
water	175:45	0:0	12	(
water	175:46	0:0	12	i
op	175:48	0:0	12	&
water	175:50	0:0	12	4
water	175:51	0:0	12	)
water	175:53	0:0	12	?
water	175:55	0:0	12	s
op	175:56	0:0	12	->
water	175:58	0:0	12	uvlinesize
water	175:69	0:0	12	:
water	175:71	0:0	12	(
water	175:72	0:0	12	s
op	175:73	0:0	12	->
water	175:75	0:0	12	linesize
op	175:84	0:0	12	<<
water	175:87	0:0	12	fieldtx
water	175:94	0:0	12	)
arg	176:45	176:109	11	CONFIG_GRAY&&(i&4)&&(s->avctx->flags&AV_CODEC_FLAG_GRAY)
water	176:45	0:0	12	CONFIG_GRAY
op	176:57	0:0	12	&&
water	176:60	0:0	12	(
water	176:61	0:0	12	i
op	176:63	0:0	12	&
water	176:65	0:0	12	4
water	176:66	0:0	12	)
op	176:68	0:0	12	&&
water	176:71	0:0	12	(
water	176:72	0:0	12	s
op	176:73	0:0	12	->
water	176:75	0:0	12	avctx
op	176:80	0:0	12	->
water	176:82	0:0	12	flags
op	176:88	0:0	12	&
water	176:90	0:0	12	AV_CODEC_FLAG_GRAY
water	176:108	0:0	12	)
arg	176:111	176:120	11	&block_tt
op	176:111	0:0	12	&
water	176:112	0:0	12	block_tt
water	176:121	0:0	10	;
water	177:20	0:0	10	block_cbp
op	177:30	0:0	10	|=
water	177:33	0:0	10	pat
op	177:37	0:0	10	<<
water	177:40	0:0	10	(
water	177:41	0:0	10	i
op	177:43	0:0	10	<<
water	177:46	0:0	10	2
water	177:47	0:0	10	)
water	177:48	0:0	10	;
if	178:20	179:33	10	(! v -> ttmbf && ttmb < 8)
cond	178:24	178:44	11	! v -> ttmbf && ttmb < 8
op	178:24	0:0	12	!
water	178:25	0:0	12	v
op	178:26	0:0	12	->
water	178:28	0:0	12	ttmbf
op	178:34	0:0	12	&&
water	178:37	0:0	12	ttmb
op	178:42	0:0	12	<
water	178:44	0:0	12	8
stmts	179:24	179:33	11	
water	179:24	0:0	12	ttmb
op	179:29	0:0	12	=
op	179:31	0:0	12	-
water	179:32	0:0	12	1
water	179:33	0:0	12	;
water	180:20	0:0	10	first_block
op	180:32	0:0	10	=
water	180:34	0:0	10	0
water	180:35	0:0	10	;
water	181:16	0:0	10	}
water	182:12	0:0	8	}
water	183:8	0:0	6	}
water	184:4	0:0	4	}
else	184:6	198:4	2
stmts	184:11	198:4	3	
water	184:11	0:0	4	{
water	185:8	0:0	4	s
op	185:9	0:0	4	->
water	185:11	0:0	4	mb_intra
op	185:20	0:0	4	=
water	185:22	0:0	4	v
op	185:23	0:0	4	->
water	185:25	0:0	4	is_intra
op	185:33	0:0	4	[
water	185:34	0:0	4	s
op	185:35	0:0	4	->
water	185:37	0:0	4	mb_x
op	185:41	0:0	4	]
op	185:43	0:0	4	=
water	185:45	0:0	4	0
water	185:46	0:0	4	;
for	186:8	189:8	4	(i = 0 ;i < 6;i ++)
forinit	186:13	186:18	5	i = 0 ;
water	186:13	0:0	6	i
op	186:15	0:0	6	=
water	186:17	0:0	6	0
water	186:18	0:0	6	;
cond	186:20	186:24	5	i < 6
water	186:20	0:0	6	i
op	186:22	0:0	6	<
water	186:24	0:0	6	6
forexpr	186:27	186:28	5	i ++
water	186:27	0:0	6	i
op	186:28	0:0	6	++
stmts	186:32	189:8	5	
water	186:32	0:0	6	{
water	187:12	0:0	6	v
op	187:13	0:0	6	->
water	187:15	0:0	6	mb_type
op	187:22	0:0	6	[
water	187:23	0:0	6	0
op	187:24	0:0	6	]
op	187:25	0:0	6	[
water	187:26	0:0	6	s
op	187:27	0:0	6	->
water	187:29	0:0	6	block_index
op	187:40	0:0	6	[
water	187:41	0:0	6	i
op	187:42	0:0	6	]
op	187:43	0:0	6	]
op	187:45	0:0	6	=
water	187:47	0:0	6	0
water	187:48	0:0	6	;
water	188:12	0:0	6	s
op	188:13	0:0	6	->
water	188:15	0:0	6	dc_val
op	188:21	0:0	6	[
water	188:22	0:0	6	0
op	188:23	0:0	6	]
op	188:24	0:0	6	[
water	188:25	0:0	6	s
op	188:26	0:0	6	->
water	188:28	0:0	6	block_index
op	188:39	0:0	6	[
water	188:40	0:0	6	i
op	188:41	0:0	6	]
op	188:42	0:0	6	]
op	188:44	0:0	6	=
water	188:46	0:0	6	0
water	188:47	0:0	6	;
water	189:8	0:0	6	}
water	190:8	0:0	4	s
op	190:9	0:0	4	->
water	190:11	0:0	4	current_picture
op	190:26	0:0	4	.
water	190:27	0:0	4	mb_type
op	190:34	0:0	4	[
water	190:35	0:0	4	mb_pos
op	190:41	0:0	4	]
op	190:48	0:0	4	=
water	190:50	0:0	4	MB_TYPE_SKIP
water	190:62	0:0	4	;
water	191:8	0:0	4	s
op	191:9	0:0	4	->
water	191:11	0:0	4	current_picture
op	191:26	0:0	4	.
water	191:27	0:0	4	qscale_table
op	191:39	0:0	4	[
water	191:40	0:0	4	mb_pos
op	191:46	0:0	4	]
op	191:48	0:0	4	=
water	191:50	0:0	4	0
water	191:51	0:0	4	;
water	192:8	0:0	4	v
op	192:9	0:0	4	->
water	192:11	0:0	4	blk_mv_type
op	192:22	0:0	4	[
water	192:23	0:0	4	s
op	192:24	0:0	4	->
water	192:26	0:0	4	block_index
op	192:37	0:0	4	[
water	192:38	0:0	4	0
op	192:39	0:0	4	]
op	192:40	0:0	4	]
op	192:42	0:0	4	=
water	192:44	0:0	4	0
water	192:45	0:0	4	;
water	193:8	0:0	4	v
op	193:9	0:0	4	->
water	193:11	0:0	4	blk_mv_type
op	193:22	0:0	4	[
water	193:23	0:0	4	s
op	193:24	0:0	4	->
water	193:26	0:0	4	block_index
op	193:37	0:0	4	[
water	193:38	0:0	4	1
op	193:39	0:0	4	]
op	193:40	0:0	4	]
op	193:42	0:0	4	=
water	193:44	0:0	4	0
water	193:45	0:0	4	;
water	194:8	0:0	4	v
op	194:9	0:0	4	->
water	194:11	0:0	4	blk_mv_type
op	194:22	0:0	4	[
water	194:23	0:0	4	s
op	194:24	0:0	4	->
water	194:26	0:0	4	block_index
op	194:37	0:0	4	[
water	194:38	0:0	4	2
op	194:39	0:0	4	]
op	194:40	0:0	4	]
op	194:42	0:0	4	=
water	194:44	0:0	4	0
water	194:45	0:0	4	;
water	195:8	0:0	4	v
op	195:9	0:0	4	->
water	195:11	0:0	4	blk_mv_type
op	195:22	0:0	4	[
water	195:23	0:0	4	s
op	195:24	0:0	4	->
water	195:26	0:0	4	block_index
op	195:37	0:0	4	[
water	195:38	0:0	4	3
op	195:39	0:0	4	]
op	195:40	0:0	4	]
op	195:42	0:0	4	=
water	195:44	0:0	4	0
water	195:45	0:0	4	;
call	196:8	196:84	4	ff_vc1_pred_mv_intfr
arg	196:29	196:30	5	v
water	196:29	0:0	6	v
arg	196:32	196:33	5	0
water	196:32	0:0	6	0
arg	196:35	196:36	5	0
water	196:35	0:0	6	0
arg	196:38	196:39	5	0
water	196:38	0:0	6	0
arg	196:41	196:42	5	1
water	196:41	0:0	6	1
arg	196:44	196:54	5	v->range_x
water	196:44	0:0	6	v
op	196:45	0:0	6	->
water	196:47	0:0	6	range_x
arg	196:56	196:66	5	v->range_y
water	196:56	0:0	6	v
op	196:57	0:0	6	->
water	196:59	0:0	6	range_y
arg	196:68	196:81	5	v->mb_type[0]
water	196:68	0:0	6	v
op	196:69	0:0	6	->
water	196:71	0:0	6	mb_type
op	196:78	0:0	6	[
water	196:79	0:0	6	0
op	196:80	0:0	6	]
arg	196:83	196:84	5	0
water	196:83	0:0	6	0
water	196:85	0:0	4	;
call	197:8	197:26	4	ff_vc1_mc_1mv
arg	197:22	197:23	5	v
water	197:22	0:0	6	v
arg	197:25	197:26	5	0
water	197:25	0:0	6	0
water	197:27	0:0	4	;
water	198:4	0:0	4	}
if	199:4	200:88	2	(s -> mb_x == s -> mb_width - 1)
cond	199:8	199:33	3	s -> mb_x == s -> mb_width - 1
water	199:8	0:0	4	s
op	199:9	0:0	4	->
water	199:11	0:0	4	mb_x
op	199:16	0:0	4	==
water	199:19	0:0	4	s
op	199:20	0:0	4	->
water	199:22	0:0	4	mb_width
op	199:31	0:0	4	-
water	199:33	0:0	4	1
stmts	200:8	200:88	3	
call	200:8	200:87	4	memmove
arg	200:16	200:32	5	v->is_intra_base
water	200:16	0:0	6	v
op	200:17	0:0	6	->
water	200:19	0:0	6	is_intra_base
arg	200:34	200:45	5	v->is_intra
water	200:34	0:0	6	v
op	200:35	0:0	6	->
water	200:37	0:0	6	is_intra
arg	200:47	200:87	5	sizeof(v->is_intra_base[0])*s->mb_stride
op	200:47	0:0	6	sizeof
water	200:53	0:0	6	(
water	200:54	0:0	6	v
op	200:55	0:0	6	->
water	200:57	0:0	6	is_intra_base
op	200:70	0:0	6	[
water	200:71	0:0	6	0
op	200:72	0:0	6	]
water	200:73	0:0	6	)
op	200:74	0:0	6	*
water	200:75	0:0	6	s
op	200:76	0:0	6	->
water	200:78	0:0	6	mb_stride
water	200:88	0:0	4	;
return	201:4	201:12	2	0
water	201:11	0:0	3	0
