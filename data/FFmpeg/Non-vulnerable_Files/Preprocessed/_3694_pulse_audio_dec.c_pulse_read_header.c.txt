func	1:15	97:0	0	int	pulse_read_header
params	1:36	0:0	1	
param	1:37	1:55	2	AVFormatContext *	s
stmnts	0:0	96:14	1	
decl	3:4	3:32	2	PulseData	*pd
op	3:18	0:0	2	=
water	3:20	0:0	2	s
op	3:21	0:0	2	->
water	3:23	0:0	2	priv_data
decl	4:4	4:16	2	AVStream	*st
decl	5:4	5:23	2	char	*device
op	5:17	0:0	2	=
water	5:19	0:0	2	NULL
decl	6:4	6:11	2	int	ret
decl	7:4	8:84	2	enum AVCodecID	codec_id
op	7:28	0:0	2	=
water	8:8	0:0	2	s
op	8:9	0:0	2	->
water	8:11	0:0	2	audio_codec_id
op	8:26	0:0	2	==
water	8:29	0:0	2	AV_CODEC_ID_NONE
water	8:46	0:0	2	?
water	8:48	0:0	2	DEFAULT_CODEC_ID
water	8:65	0:0	2	:
water	8:67	0:0	2	s
op	8:68	0:0	2	->
water	8:70	0:0	2	audio_codec_id
decl	9:4	11:46	2	const pa_sample_spec	ss
op	9:28	0:0	2	=
water	9:30	0:0	2	{
call	9:32	9:68	3	ff_codec_id_to_pulse_format
arg	9:60	9:68	4	codec_id
water	9:60	0:0	5	codec_id
water	9:69	0:0	2	,
water	10:32	0:0	2	pd
op	10:34	0:0	2	->
water	10:36	0:0	2	sample_rate
water	10:47	0:0	2	,
water	11:32	0:0	2	pd
op	11:34	0:0	2	->
water	11:36	0:0	2	channels
water	11:45	0:0	2	}
decl	12:4	12:32	2	pa_buffer_attr	attr
op	12:24	0:0	2	=
water	12:26	0:0	2	{
op	12:28	0:0	2	-
water	12:29	0:0	2	1
water	12:31	0:0	2	}
water	13:4	0:0	2	st
op	13:7	0:0	2	=
call	13:9	13:36	2	avformat_new_stream
arg	13:29	13:30	3	s
water	13:29	0:0	4	s
arg	13:32	13:36	3	NULL
water	13:32	0:0	4	NULL
water	13:37	0:0	2	;
if	14:4	17:4	2	(! st)
cond	14:8	14:9	3	! st
op	14:8	0:0	4	!
water	14:9	0:0	4	st
stmts	14:13	17:4	3	
water	14:13	0:0	4	{
call	15:8	15:53	4	av_log
arg	15:15	15:16	5	s
water	15:15	0:0	6	s
arg	15:18	15:30	5	AV_LOG_ERROR
water	15:18	0:0	6	AV_LOG_ERROR
arg	15:32	15:53	5	"Cannot add stream\n"
water	15:32	0:0	6	"Cannot add stream\n"
water	15:54	0:0	4	;
return	16:8	16:30	4	AVERROR(ENOMEM)
call	16:15	16:29	5	AVERROR
arg	16:23	16:29	6	ENOMEM
water	16:23	0:0	7	ENOMEM
water	17:4	0:0	4	}
water	18:4	0:0	2	attr
op	18:8	0:0	2	.
water	18:9	0:0	2	fragsize
op	18:18	0:0	2	=
water	18:20	0:0	2	pd
op	18:22	0:0	2	->
water	18:24	0:0	2	fragment_size
water	18:37	0:0	2	;
if	19:4	20:28	2	(s -> filename [ 0 ] != '\0' &&strcmp (s -> filename ,"default" ))
cond	19:8	19:63	3	s -> filename [ 0 ] != '\0' &&strcmp (s -> filename ,"default" )
water	19:8	0:0	4	s
op	19:9	0:0	4	->
water	19:11	0:0	4	filename
op	19:19	0:0	4	[
water	19:20	0:0	4	0
op	19:21	0:0	4	]
op	19:23	0:0	4	!=
water	19:26	0:0	4	'\0'
op	19:31	0:0	4	&&
call	19:34	19:63	4	strcmp
arg	19:41	19:52	5	s->filename
water	19:41	0:0	6	s
op	19:42	0:0	6	->
water	19:44	0:0	6	filename
arg	19:54	19:63	5	"default"
water	19:54	0:0	6	"default"
stmts	20:8	20:28	3	
water	20:8	0:0	4	device
op	20:15	0:0	4	=
water	20:17	0:0	4	s
op	20:18	0:0	4	->
water	20:20	0:0	4	filename
water	20:28	0:0	4	;
if	21:4	24:4	2	(! ( pd -> mainloop =pa_threaded_mainloop_new ( ) ))
cond	21:8	21:51	3	! ( pd -> mainloop =pa_threaded_mainloop_new ( ) )
op	21:8	0:0	4	!
water	21:9	0:0	4	(
water	21:10	0:0	4	pd
op	21:12	0:0	4	->
water	21:14	0:0	4	mainloop
op	21:23	0:0	4	=
call	21:25	21:50	4	pa_threaded_mainloop_new
water	21:51	0:0	4	)
stmts	21:54	24:4	3	
water	21:54	0:0	4	{
call	22:8	22:21	4	pulse_close
arg	22:20	22:21	5	s
water	22:20	0:0	6	s
water	22:22	0:0	4	;
return	23:8	23:31	4	AVERROR_EXTERNAL
water	23:15	0:0	5	AVERROR_EXTERNAL
water	24:4	0:0	4	}
if	25:4	28:4	2	(! ( pd -> context =pa_context_new (pa_threaded_mainloop_get_api (pd -> mainloop ) ,pd -> name ) ))
cond	25:8	25:92	3	! ( pd -> context =pa_context_new (pa_threaded_mainloop_get_api (pd -> mainloop ) ,pd -> name ) )
op	25:8	0:0	4	!
water	25:9	0:0	4	(
water	25:10	0:0	4	pd
op	25:12	0:0	4	->
water	25:14	0:0	4	context
op	25:22	0:0	4	=
call	25:24	25:91	4	pa_context_new
arg	25:39	25:81	5	pa_threaded_mainloop_get_api(pd->mainloop)
call	25:39	25:80	6	pa_threaded_mainloop_get_api
arg	25:68	25:80	7	pd->mainloop
water	25:68	0:0	8	pd
op	25:70	0:0	8	->
water	25:72	0:0	8	mainloop
arg	25:83	25:91	5	pd->name
water	25:83	0:0	6	pd
op	25:85	0:0	6	->
water	25:87	0:0	6	name
water	25:92	0:0	4	)
stmts	25:95	28:4	3	
water	25:95	0:0	4	{
call	26:8	26:21	4	pulse_close
arg	26:20	26:21	5	s
water	26:20	0:0	6	s
water	26:22	0:0	4	;
return	27:8	27:31	4	AVERROR_EXTERNAL
water	27:15	0:0	5	AVERROR_EXTERNAL
water	28:4	0:0	4	}
call	29:4	29:67	2	pa_context_set_state_callback
arg	29:34	29:45	3	pd->context
water	29:34	0:0	4	pd
op	29:36	0:0	4	->
water	29:38	0:0	4	context
arg	29:47	29:63	3	context_state_cb
water	29:47	0:0	4	context_state_cb
arg	29:65	29:67	3	pd
water	29:65	0:0	4	pd
water	29:68	0:0	2	;
if	30:4	33:4	2	(pa_context_connect (pd -> context ,pd -> server ,0 ,NULL ) < 0)
cond	30:8	30:63	3	pa_context_connect (pd -> context ,pd -> server ,0 ,NULL ) < 0
call	30:8	30:59	4	pa_context_connect
arg	30:27	30:38	5	pd->context
water	30:27	0:0	6	pd
op	30:29	0:0	6	->
water	30:31	0:0	6	context
arg	30:40	30:50	5	pd->server
water	30:40	0:0	6	pd
op	30:42	0:0	6	->
water	30:44	0:0	6	server
arg	30:52	30:53	5	0
water	30:52	0:0	6	0
arg	30:55	30:59	5	NULL
water	30:55	0:0	6	NULL
op	30:61	0:0	4	<
water	30:63	0:0	4	0
stmts	30:66	33:4	3	
water	30:66	0:0	4	{
call	31:8	31:21	4	pulse_close
arg	31:20	31:21	5	s
water	31:20	0:0	6	s
water	31:22	0:0	4	;
return	32:8	32:53	4	AVERROR(pa_context_errno(pd->context))
call	32:15	32:52	5	AVERROR
arg	32:23	32:52	6	pa_context_errno(pd->context)
call	32:23	32:51	7	pa_context_errno
arg	32:40	32:51	8	pd->context
water	32:40	0:0	9	pd
op	32:42	0:0	9	->
water	32:44	0:0	9	context
water	33:4	0:0	4	}
call	34:4	34:42	2	pa_threaded_mainloop_lock
arg	34:30	34:42	3	pd->mainloop
water	34:30	0:0	4	pd
op	34:32	0:0	4	->
water	34:34	0:0	4	mainloop
water	34:43	0:0	2	;
if	35:4	38:4	2	(pa_threaded_mainloop_start (pd -> mainloop ) < 0)
cond	35:8	35:51	3	pa_threaded_mainloop_start (pd -> mainloop ) < 0
call	35:8	35:47	4	pa_threaded_mainloop_start
arg	35:35	35:47	5	pd->mainloop
water	35:35	0:0	6	pd
op	35:37	0:0	6	->
water	35:39	0:0	6	mainloop
op	35:49	0:0	4	<
water	35:51	0:0	4	0
stmts	35:54	38:4	3	
water	35:54	0:0	4	{
water	36:8	0:0	4	ret
op	36:12	0:0	4	=
op	36:14	0:0	4	-
water	36:15	0:0	4	1
water	36:16	0:0	4	;
goto	37:8	37:28	4	unlock_and_fail
water	37:13	0:0	5	unlock_and_fail
water	38:4	0:0	4	}
for	39:4	50:4	2	(;;)
forinit	39:9	39:9	3	;
water	39:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	39:13	50:4	3	
water	39:13	0:0	4	{
decl	40:8	40:32	4	pa_context_state_t	state
water	41:8	0:0	4	state
op	41:14	0:0	4	=
call	41:16	41:48	4	pa_context_get_state
arg	41:37	41:48	5	pd->context
water	41:37	0:0	6	pd
op	41:39	0:0	6	->
water	41:41	0:0	6	context
water	41:49	0:0	4	;
if	42:8	43:17	4	(state == PA_CONTEXT_READY)
cond	42:12	42:21	5	state == PA_CONTEXT_READY
water	42:12	0:0	6	state
op	42:18	0:0	6	==
water	42:21	0:0	6	PA_CONTEXT_READY
stmts	43:12	43:17	5	
break	43:12	43:17	6	
if	44:8	47:8	4	(!PA_CONTEXT_IS_GOOD (state ))
cond	44:12	44:37	5	!PA_CONTEXT_IS_GOOD (state )
op	44:12	0:0	6	!
call	44:13	44:37	6	PA_CONTEXT_IS_GOOD
arg	44:32	44:37	7	state
water	44:32	0:0	8	state
stmts	44:40	47:8	5	
water	44:40	0:0	6	{
water	45:12	0:0	6	ret
op	45:16	0:0	6	=
call	45:18	45:55	6	AVERROR
arg	45:26	45:55	7	pa_context_errno(pd->context)
call	45:26	45:54	8	pa_context_errno
arg	45:43	45:54	9	pd->context
water	45:43	0:0	10	pd
op	45:45	0:0	10	->
water	45:47	0:0	10	context
water	45:56	0:0	6	;
goto	46:12	46:32	6	unlock_and_fail
water	46:17	0:0	7	unlock_and_fail
water	47:8	0:0	6	}
call	49:8	49:46	4	pa_threaded_mainloop_wait
arg	49:34	49:46	5	pd->mainloop
water	49:34	0:0	6	pd
op	49:36	0:0	6	->
water	49:38	0:0	6	mainloop
water	49:47	0:0	4	;
water	50:4	0:0	4	}
if	51:4	54:4	2	(! ( pd -> stream =pa_stream_new (pd -> context ,pd -> stream_name ,& ss ,NULL ) ))
cond	51:8	51:77	3	! ( pd -> stream =pa_stream_new (pd -> context ,pd -> stream_name ,& ss ,NULL ) )
op	51:8	0:0	4	!
water	51:9	0:0	4	(
water	51:10	0:0	4	pd
op	51:12	0:0	4	->
water	51:14	0:0	4	stream
op	51:21	0:0	4	=
call	51:23	51:76	4	pa_stream_new
arg	51:37	51:48	5	pd->context
water	51:37	0:0	6	pd
op	51:39	0:0	6	->
water	51:41	0:0	6	context
arg	51:50	51:65	5	pd->stream_name
water	51:50	0:0	6	pd
op	51:52	0:0	6	->
water	51:54	0:0	6	stream_name
arg	51:67	51:70	5	&ss
op	51:67	0:0	6	&
water	51:68	0:0	6	ss
arg	51:72	51:76	5	NULL
water	51:72	0:0	6	NULL
water	51:77	0:0	4	)
stmts	51:80	54:4	3	
water	51:80	0:0	4	{
water	52:8	0:0	4	ret
op	52:12	0:0	4	=
call	52:14	52:51	4	AVERROR
arg	52:22	52:51	5	pa_context_errno(pd->context)
call	52:22	52:50	6	pa_context_errno
arg	52:39	52:50	7	pd->context
water	52:39	0:0	8	pd
op	52:41	0:0	8	->
water	52:43	0:0	8	context
water	52:52	0:0	4	;
goto	53:8	53:28	4	unlock_and_fail
water	53:13	0:0	5	unlock_and_fail
water	54:4	0:0	4	}
call	55:4	55:64	2	pa_stream_set_state_callback
arg	55:33	55:43	3	pd->stream
water	55:33	0:0	4	pd
op	55:35	0:0	4	->
water	55:37	0:0	4	stream
arg	55:45	55:60	3	stream_state_cb
water	55:45	0:0	4	stream_state_cb
arg	55:62	55:64	3	pd
water	55:62	0:0	4	pd
water	55:65	0:0	2	;
call	56:4	56:65	2	pa_stream_set_read_callback
arg	56:32	56:42	3	pd->stream
water	56:32	0:0	4	pd
op	56:34	0:0	4	->
water	56:36	0:0	4	stream
arg	56:44	56:61	3	stream_request_cb
water	56:44	0:0	4	stream_request_cb
arg	56:63	56:65	3	pd
water	56:63	0:0	4	pd
water	56:66	0:0	2	;
call	57:4	57:66	2	pa_stream_set_write_callback
arg	57:33	57:43	3	pd->stream
water	57:33	0:0	4	pd
op	57:35	0:0	4	->
water	57:37	0:0	4	stream
arg	57:45	57:62	3	stream_request_cb
water	57:45	0:0	4	stream_request_cb
arg	57:64	57:66	3	pd
water	57:64	0:0	4	pd
water	57:67	0:0	2	;
call	58:4	58:82	2	pa_stream_set_latency_update_callback
arg	58:42	58:52	3	pd->stream
water	58:42	0:0	4	pd
op	58:44	0:0	4	->
water	58:46	0:0	4	stream
arg	58:54	58:78	3	stream_latency_update_cb
water	58:54	0:0	4	stream_latency_update_cb
arg	58:80	58:82	3	pd
water	58:80	0:0	4	pd
water	58:83	0:0	2	;
water	59:4	0:0	2	ret
op	59:8	0:0	2	=
call	59:10	62:65	2	pa_stream_connect_record
arg	59:35	59:45	3	pd->stream
water	59:35	0:0	4	pd
op	59:37	0:0	4	->
water	59:39	0:0	4	stream
arg	59:47	59:53	3	device
water	59:47	0:0	4	device
arg	59:55	59:60	3	&attr
op	59:55	0:0	4	&
water	59:56	0:0	4	attr
arg	60:36	62:65	3	PA_STREAM_INTERPOLATE_TIMING|PA_STREAM_ADJUST_LATENCY|PA_STREAM_AUTO_TIMING_UPDATE
water	60:36	0:0	4	PA_STREAM_INTERPOLATE_TIMING
op	61:36	0:0	4	|
water	61:37	0:0	4	PA_STREAM_ADJUST_LATENCY
op	62:36	0:0	4	|
water	62:37	0:0	4	PA_STREAM_AUTO_TIMING_UPDATE
water	62:66	0:0	2	;
if	63:4	66:4	2	(ret < 0)
cond	63:8	63:14	3	ret < 0
water	63:8	0:0	4	ret
op	63:12	0:0	4	<
water	63:14	0:0	4	0
stmts	63:17	66:4	3	
water	63:17	0:0	4	{
water	64:8	0:0	4	ret
op	64:12	0:0	4	=
call	64:14	64:51	4	AVERROR
arg	64:22	64:51	5	pa_context_errno(pd->context)
call	64:22	64:50	6	pa_context_errno
arg	64:39	64:50	7	pd->context
water	64:39	0:0	8	pd
op	64:41	0:0	8	->
water	64:43	0:0	8	context
water	64:52	0:0	4	;
goto	65:8	65:28	4	unlock_and_fail
water	65:13	0:0	5	unlock_and_fail
water	66:4	0:0	4	}
for	67:4	78:4	2	(;;)
forinit	67:9	67:9	3	;
water	67:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	67:13	78:4	3	
water	67:13	0:0	4	{
decl	68:8	68:31	4	pa_stream_state_t	state
water	69:8	0:0	4	state
op	69:14	0:0	4	=
call	69:16	69:46	4	pa_stream_get_state
arg	69:36	69:46	5	pd->stream
water	69:36	0:0	6	pd
op	69:38	0:0	6	->
water	69:40	0:0	6	stream
water	69:47	0:0	4	;
if	70:8	71:17	4	(state == PA_STREAM_READY)
cond	70:12	70:21	5	state == PA_STREAM_READY
water	70:12	0:0	6	state
op	70:18	0:0	6	==
water	70:21	0:0	6	PA_STREAM_READY
stmts	71:12	71:17	5	
break	71:12	71:17	6	
if	72:8	75:8	4	(!PA_STREAM_IS_GOOD (state ))
cond	72:12	72:36	5	!PA_STREAM_IS_GOOD (state )
op	72:12	0:0	6	!
call	72:13	72:36	6	PA_STREAM_IS_GOOD
arg	72:31	72:36	7	state
water	72:31	0:0	8	state
stmts	72:39	75:8	5	
water	72:39	0:0	6	{
water	73:12	0:0	6	ret
op	73:16	0:0	6	=
call	73:18	73:55	6	AVERROR
arg	73:26	73:55	7	pa_context_errno(pd->context)
call	73:26	73:54	8	pa_context_errno
arg	73:43	73:54	9	pd->context
water	73:43	0:0	10	pd
op	73:45	0:0	10	->
water	73:47	0:0	10	context
water	73:56	0:0	6	;
goto	74:12	74:32	6	unlock_and_fail
water	74:17	0:0	7	unlock_and_fail
water	75:8	0:0	6	}
call	77:8	77:46	4	pa_threaded_mainloop_wait
arg	77:34	77:46	5	pd->mainloop
water	77:34	0:0	6	pd
op	77:36	0:0	6	->
water	77:38	0:0	6	mainloop
water	77:47	0:0	4	;
water	78:4	0:0	4	}
call	79:4	79:44	2	pa_threaded_mainloop_unlock
arg	79:32	79:44	3	pd->mainloop
water	79:32	0:0	4	pd
op	79:34	0:0	4	->
water	79:36	0:0	4	mainloop
water	79:45	0:0	2	;
water	81:4	0:0	2	st
op	81:6	0:0	2	->
water	81:8	0:0	2	codec
op	81:13	0:0	2	->
water	81:15	0:0	2	codec_type
op	81:27	0:0	2	=
water	81:29	0:0	2	AVMEDIA_TYPE_AUDIO
water	81:47	0:0	2	;
water	82:4	0:0	2	st
op	82:6	0:0	2	->
water	82:8	0:0	2	codec
op	82:13	0:0	2	->
water	82:15	0:0	2	codec_id
op	82:27	0:0	2	=
water	82:29	0:0	2	codec_id
water	82:37	0:0	2	;
water	83:4	0:0	2	st
op	83:6	0:0	2	->
water	83:8	0:0	2	codec
op	83:13	0:0	2	->
water	83:15	0:0	2	sample_rate
op	83:27	0:0	2	=
water	83:29	0:0	2	pd
op	83:31	0:0	2	->
water	83:33	0:0	2	sample_rate
water	83:44	0:0	2	;
water	84:4	0:0	2	st
op	84:6	0:0	2	->
water	84:8	0:0	2	codec
op	84:13	0:0	2	->
water	84:15	0:0	2	channels
op	84:27	0:0	2	=
water	84:29	0:0	2	pd
op	84:31	0:0	2	->
water	84:33	0:0	2	channels
water	84:41	0:0	2	;
call	85:4	85:42	2	avpriv_set_pts_info
arg	85:24	85:26	3	st
water	85:24	0:0	4	st
arg	85:28	85:30	3	64
water	85:28	0:0	4	64
arg	85:32	85:33	3	1
water	85:32	0:0	4	1
arg	85:35	85:42	3	1000000
water	85:35	0:0	4	1000000
water	85:43	0:0	2	;
water	86:4	0:0	2	pd
op	86:6	0:0	2	->
water	86:8	0:0	2	timefilter
op	86:19	0:0	2	=
call	86:21	87:51	2	ff_timefilter_new
arg	86:39	86:66	3	1000000.0/pd->sample_rate
water	86:39	0:0	4	1000000
op	86:46	0:0	4	.
water	86:47	0:0	4	0
op	86:49	0:0	4	/
water	86:51	0:0	4	pd
op	86:53	0:0	4	->
water	86:55	0:0	4	sample_rate
arg	87:39	87:43	3	1000
water	87:39	0:0	4	1000
arg	87:45	87:51	3	1.5E-6
water	87:45	0:0	4	1
op	87:46	0:0	4	.
water	87:47	0:0	4	5
water	87:48	0:0	4	E
op	87:49	0:0	4	-
water	87:50	0:0	4	6
water	87:52	0:0	2	;
if	88:4	91:4	2	(! pd -> timefilter)
cond	88:8	88:13	3	! pd -> timefilter
op	88:8	0:0	4	!
water	88:9	0:0	4	pd
op	88:11	0:0	4	->
water	88:13	0:0	4	timefilter
stmts	88:25	91:4	3	
water	88:25	0:0	4	{
call	89:8	89:21	4	pulse_close
arg	89:20	89:21	5	s
water	89:20	0:0	6	s
water	89:22	0:0	4	;
return	90:8	90:30	4	AVERROR(ENOMEM)
call	90:15	90:29	5	AVERROR
arg	90:23	90:29	6	ENOMEM
water	90:23	0:0	7	ENOMEM
water	91:4	0:0	4	}
return	92:4	92:12	2	0
water	92:11	0:0	3	0
label	93:0	93:15	2	unlock_and_fail :
call	94:4	94:44	2	pa_threaded_mainloop_unlock
arg	94:32	94:44	3	pd->mainloop
water	94:32	0:0	4	pd
op	94:34	0:0	4	->
water	94:36	0:0	4	mainloop
water	94:45	0:0	2	;
call	95:4	95:17	2	pulse_close
arg	95:16	95:17	3	s
water	95:16	0:0	4	s
water	95:18	0:0	2	;
return	96:4	96:14	2	ret
water	96:11	0:0	3	ret
