func	1:0	38:0	0	static int	config_input_ref
params	1:27	0:0	1	
param	1:28	1:48	2	AVFilterLink *	inlink
stmnts	0:0	37:12	1	
decl	3:4	3:72	2	const AVPixFmtDescriptor	*desc
op	3:35	0:0	2	=
call	3:37	3:71	3	av_pix_fmt_desc_get
arg	3:57	3:71	4	inlink->format
water	3:57	0:0	5	inlink
op	3:63	0:0	5	->
water	3:65	0:0	5	format
decl	4:4	4:39	2	AVFilterContext	*ctx
op	4:26	0:0	2	=
water	4:28	0:0	2	inlink
op	4:34	0:0	2	->
water	4:36	0:0	2	dst
decl	5:4	5:30	2	SSIMContext	*s
op	5:19	0:0	2	=
water	5:21	0:0	2	ctx
op	5:24	0:0	2	->
water	5:26	0:0	2	priv
decl	6:4	6:18	2	int	sum
op	6:12	0:0	2	=
water	6:14	0:0	2	0
water	6:15	0:0	2	,
decl	6:4	6:18	2	int	i
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	nb_components
op	7:21	0:0	2	=
water	7:23	0:0	2	desc
op	7:27	0:0	2	->
water	7:29	0:0	2	nb_components
water	7:42	0:0	2	;
if	8:4	12:4	2	(ctx -> inputs [ 0 ] -> w != ctx -> inputs [ 1 ] -> w || ctx -> inputs [ 0 ] -> h != ctx -> inputs [ 1 ] -> h)
cond	8:8	9:45	3	ctx -> inputs [ 0 ] -> w != ctx -> inputs [ 1 ] -> w || ctx -> inputs [ 0 ] -> h != ctx -> inputs [ 1 ] -> h
water	8:8	0:0	4	ctx
op	8:11	0:0	4	->
water	8:13	0:0	4	inputs
op	8:19	0:0	4	[
water	8:20	0:0	4	0
op	8:21	0:0	4	]
op	8:22	0:0	4	->
water	8:24	0:0	4	w
op	8:26	0:0	4	!=
water	8:29	0:0	4	ctx
op	8:32	0:0	4	->
water	8:34	0:0	4	inputs
op	8:40	0:0	4	[
water	8:41	0:0	4	1
op	8:42	0:0	4	]
op	8:43	0:0	4	->
water	8:45	0:0	4	w
op	8:47	0:0	4	||
water	9:8	0:0	4	ctx
op	9:11	0:0	4	->
water	9:13	0:0	4	inputs
op	9:19	0:0	4	[
water	9:20	0:0	4	0
op	9:21	0:0	4	]
op	9:22	0:0	4	->
water	9:24	0:0	4	h
op	9:26	0:0	4	!=
water	9:29	0:0	4	ctx
op	9:32	0:0	4	->
water	9:34	0:0	4	inputs
op	9:40	0:0	4	[
water	9:41	0:0	4	1
op	9:42	0:0	4	]
op	9:43	0:0	4	->
water	9:45	0:0	4	h
stmts	9:48	12:4	3	
water	9:48	0:0	4	{
call	10:8	10:84	4	av_log
arg	10:15	10:18	5	ctx
water	10:15	0:0	6	ctx
arg	10:20	10:32	5	AV_LOG_ERROR
water	10:20	0:0	6	AV_LOG_ERROR
arg	10:34	10:84	5	"Width and height of input videos must be same.\n"
water	10:34	0:0	6	"Width and height of input videos must be same.\n"
water	10:85	0:0	4	;
return	11:8	11:30	4	AVERROR(EINVAL)
call	11:15	11:29	5	AVERROR
arg	11:23	11:29	6	EINVAL
water	11:23	0:0	7	EINVAL
water	12:4	0:0	4	}
if	13:4	16:4	2	(ctx -> inputs [ 0 ] -> format != ctx -> inputs [ 1 ] -> format)
cond	13:8	13:50	3	ctx -> inputs [ 0 ] -> format != ctx -> inputs [ 1 ] -> format
water	13:8	0:0	4	ctx
op	13:11	0:0	4	->
water	13:13	0:0	4	inputs
op	13:19	0:0	4	[
water	13:20	0:0	4	0
op	13:21	0:0	4	]
op	13:22	0:0	4	->
water	13:24	0:0	4	format
op	13:31	0:0	4	!=
water	13:34	0:0	4	ctx
op	13:37	0:0	4	->
water	13:39	0:0	4	inputs
op	13:45	0:0	4	[
water	13:46	0:0	4	1
op	13:47	0:0	4	]
op	13:48	0:0	4	->
water	13:50	0:0	4	format
stmts	13:58	16:4	3	
water	13:58	0:0	4	{
call	14:8	14:74	4	av_log
arg	14:15	14:18	5	ctx
water	14:15	0:0	6	ctx
arg	14:20	14:32	5	AV_LOG_ERROR
water	14:20	0:0	6	AV_LOG_ERROR
arg	14:34	14:74	5	"Inputs must be of same pixel format.\n"
water	14:34	0:0	6	"Inputs must be of same pixel format.\n"
water	14:75	0:0	4	;
return	15:8	15:30	4	AVERROR(EINVAL)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	EINVAL
water	15:23	0:0	7	EINVAL
water	16:4	0:0	4	}
water	17:4	0:0	2	s
op	17:5	0:0	2	->
water	17:7	0:0	2	is_rgb
op	17:14	0:0	2	=
call	17:16	17:60	2	ff_fill_rgba_map
arg	17:33	17:44	3	s->rgba_map
water	17:33	0:0	4	s
op	17:34	0:0	4	->
water	17:36	0:0	4	rgba_map
arg	17:46	17:60	3	inlink->format
water	17:46	0:0	4	inlink
op	17:52	0:0	4	->
water	17:54	0:0	4	format
op	17:62	0:0	2	>=
water	17:65	0:0	2	0
water	17:66	0:0	2	;
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	comps
op	18:12	0:0	2	[
water	18:13	0:0	2	0
op	18:14	0:0	2	]
op	18:16	0:0	2	=
water	18:18	0:0	2	s
op	18:19	0:0	2	->
water	18:21	0:0	2	is_rgb
water	18:28	0:0	2	?
water	18:30	0:0	2	'R'
water	18:34	0:0	2	:
water	18:36	0:0	2	'Y'
water	18:39	0:0	2	;
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	comps
op	19:12	0:0	2	[
water	19:13	0:0	2	1
op	19:14	0:0	2	]
op	19:16	0:0	2	=
water	19:18	0:0	2	s
op	19:19	0:0	2	->
water	19:21	0:0	2	is_rgb
water	19:28	0:0	2	?
water	19:30	0:0	2	'G'
water	19:34	0:0	2	:
water	19:36	0:0	2	'U'
water	19:39	0:0	2	;
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	comps
op	20:12	0:0	2	[
water	20:13	0:0	2	2
op	20:14	0:0	2	]
op	20:16	0:0	2	=
water	20:18	0:0	2	s
op	20:19	0:0	2	->
water	20:21	0:0	2	is_rgb
water	20:28	0:0	2	?
water	20:30	0:0	2	'B'
water	20:34	0:0	2	:
water	20:36	0:0	2	'V'
water	20:39	0:0	2	;
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	comps
op	21:12	0:0	2	[
water	21:13	0:0	2	3
op	21:14	0:0	2	]
op	21:16	0:0	2	=
water	21:18	0:0	2	'A'
water	21:21	0:0	2	;
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	planeheight
op	22:18	0:0	2	[
water	22:19	0:0	2	1
op	22:20	0:0	2	]
op	22:22	0:0	2	=
water	22:24	0:0	2	s
op	22:25	0:0	2	->
water	22:27	0:0	2	planeheight
op	22:38	0:0	2	[
water	22:39	0:0	2	2
op	22:40	0:0	2	]
op	22:42	0:0	2	=
call	22:44	22:89	2	FF_CEIL_RSHIFT
arg	22:59	22:68	3	inlink->h
water	22:59	0:0	4	inlink
op	22:65	0:0	4	->
water	22:67	0:0	4	h
arg	22:70	22:89	3	desc->log2_chroma_h
water	22:70	0:0	4	desc
op	22:74	0:0	4	->
water	22:76	0:0	4	log2_chroma_h
water	22:90	0:0	2	;
water	23:4	0:0	2	s
op	23:5	0:0	2	->
water	23:7	0:0	2	planeheight
op	23:18	0:0	2	[
water	23:19	0:0	2	0
op	23:20	0:0	2	]
op	23:22	0:0	2	=
water	23:24	0:0	2	s
op	23:25	0:0	2	->
water	23:27	0:0	2	planeheight
op	23:38	0:0	2	[
water	23:39	0:0	2	3
op	23:40	0:0	2	]
op	23:42	0:0	2	=
water	23:44	0:0	2	inlink
op	23:50	0:0	2	->
water	23:52	0:0	2	h
water	23:53	0:0	2	;
water	24:4	0:0	2	s
op	24:5	0:0	2	->
water	24:7	0:0	2	planewidth
op	24:17	0:0	2	[
water	24:18	0:0	2	1
op	24:19	0:0	2	]
op	24:22	0:0	2	=
water	24:24	0:0	2	s
op	24:25	0:0	2	->
water	24:27	0:0	2	planewidth
op	24:37	0:0	2	[
water	24:38	0:0	2	2
op	24:39	0:0	2	]
op	24:42	0:0	2	=
call	24:44	24:89	2	FF_CEIL_RSHIFT
arg	24:59	24:68	3	inlink->w
water	24:59	0:0	4	inlink
op	24:65	0:0	4	->
water	24:67	0:0	4	w
arg	24:70	24:89	3	desc->log2_chroma_w
water	24:70	0:0	4	desc
op	24:74	0:0	4	->
water	24:76	0:0	4	log2_chroma_w
water	24:90	0:0	2	;
water	25:4	0:0	2	s
op	25:5	0:0	2	->
water	25:7	0:0	2	planewidth
op	25:17	0:0	2	[
water	25:18	0:0	2	0
op	25:19	0:0	2	]
op	25:22	0:0	2	=
water	25:24	0:0	2	s
op	25:25	0:0	2	->
water	25:27	0:0	2	planewidth
op	25:37	0:0	2	[
water	25:38	0:0	2	3
op	25:39	0:0	2	]
op	25:42	0:0	2	=
water	25:44	0:0	2	inlink
op	25:50	0:0	2	->
water	25:52	0:0	2	w
water	25:53	0:0	2	;
for	26:4	27:51	2	(i = 0 ;i < s -> nb_components;i ++)
forinit	26:9	26:14	3	i = 0 ;
water	26:9	0:0	4	i
op	26:11	0:0	4	=
water	26:13	0:0	4	0
water	26:14	0:0	4	;
cond	26:16	26:23	3	i < s -> nb_components
water	26:16	0:0	4	i
op	26:18	0:0	4	<
water	26:20	0:0	4	s
op	26:21	0:0	4	->
water	26:23	0:0	4	nb_components
forexpr	26:38	26:39	3	i ++
water	26:38	0:0	4	i
op	26:39	0:0	4	++
stmts	27:8	27:51	3	
water	27:8	0:0	4	sum
op	27:12	0:0	4	+=
water	27:15	0:0	4	s
op	27:16	0:0	4	->
water	27:18	0:0	4	planeheight
op	27:29	0:0	4	[
water	27:30	0:0	4	i
op	27:31	0:0	4	]
op	27:33	0:0	4	*
water	27:35	0:0	4	s
op	27:36	0:0	4	->
water	27:38	0:0	4	planewidth
op	27:48	0:0	4	[
water	27:49	0:0	4	i
op	27:50	0:0	4	]
water	27:51	0:0	4	;
for	28:4	29:73	2	(i = 0 ;i < s -> nb_components;i ++)
forinit	28:9	28:14	3	i = 0 ;
water	28:9	0:0	4	i
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:23	3	i < s -> nb_components
water	28:16	0:0	4	i
op	28:18	0:0	4	<
water	28:20	0:0	4	s
op	28:21	0:0	4	->
water	28:23	0:0	4	nb_components
forexpr	28:38	28:39	3	i ++
water	28:38	0:0	4	i
op	28:39	0:0	4	++
stmts	29:8	29:73	3	
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	coefs
op	29:16	0:0	4	[
water	29:17	0:0	4	i
op	29:18	0:0	4	]
op	29:20	0:0	4	=
water	29:22	0:0	4	(
water	29:23	0:0	4	double
water	29:29	0:0	4	)
water	29:31	0:0	4	s
op	29:32	0:0	4	->
water	29:34	0:0	4	planeheight
op	29:45	0:0	4	[
water	29:46	0:0	4	i
op	29:47	0:0	4	]
op	29:49	0:0	4	*
water	29:51	0:0	4	s
op	29:52	0:0	4	->
water	29:54	0:0	4	planewidth
op	29:64	0:0	4	[
water	29:65	0:0	4	i
op	29:66	0:0	4	]
op	29:68	0:0	4	/
water	29:70	0:0	4	sum
water	29:73	0:0	4	;
water	30:4	0:0	2	s
op	30:5	0:0	2	->
water	30:7	0:0	2	temp
op	30:12	0:0	2	=
call	30:14	30:63	2	av_malloc
arg	30:24	30:63	3	(2*inlink->w+12)*sizeof(*s->temp)
water	30:24	0:0	4	(
water	30:25	0:0	4	2
op	30:27	0:0	4	*
water	30:29	0:0	4	inlink
op	30:35	0:0	4	->
water	30:37	0:0	4	w
op	30:39	0:0	4	+
water	30:41	0:0	4	12
water	30:43	0:0	4	)
op	30:45	0:0	4	*
op	30:47	0:0	4	sizeof
water	30:53	0:0	4	(
op	30:54	0:0	4	*
water	30:55	0:0	4	s
op	30:56	0:0	4	->
water	30:58	0:0	4	temp
water	30:62	0:0	4	)
water	30:64	0:0	2	;
if	31:4	32:30	2	(! s -> temp)
cond	31:8	31:12	3	! s -> temp
op	31:8	0:0	4	!
water	31:9	0:0	4	s
op	31:10	0:0	4	->
water	31:12	0:0	4	temp
stmts	32:8	32:30	3	
return	32:8	32:30	4	AVERROR(ENOMEM)
call	32:15	32:29	5	AVERROR
arg	32:23	32:29	6	ENOMEM
water	32:23	0:0	7	ENOMEM
water	33:4	0:0	2	s
op	33:5	0:0	2	->
water	33:7	0:0	2	dsp
op	33:10	0:0	2	.
water	33:11	0:0	2	ssim_4x4_line
op	33:25	0:0	2	=
water	33:27	0:0	2	ssim_4x4xn
water	33:37	0:0	2	;
water	34:4	0:0	2	s
op	34:5	0:0	2	->
water	34:7	0:0	2	dsp
op	34:10	0:0	2	.
water	34:11	0:0	2	ssim_end_line
op	34:25	0:0	2	=
water	34:27	0:0	2	ssim_endn
water	34:36	0:0	2	;
if	35:4	36:33	2	(ARCH_X86)
cond	35:8	35:8	3	ARCH_X86
water	35:8	0:0	4	ARCH_X86
stmts	36:8	36:33	3	
call	36:8	36:32	4	ff_ssim_init_x86
arg	36:25	36:32	5	&s->dsp
op	36:25	0:0	6	&
water	36:26	0:0	6	s
op	36:27	0:0	6	->
water	36:29	0:0	6	dsp
water	36:33	0:0	4	;
return	37:4	37:12	2	0
water	37:11	0:0	3	0
