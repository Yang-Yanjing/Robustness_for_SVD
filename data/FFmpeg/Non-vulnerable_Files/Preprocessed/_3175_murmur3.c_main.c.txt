func	1:0	34:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	0:0	32:25	1	
decl	3:4	3:9	2	int	i
decl	4:4	4:33	2	uint8_t	hash_result[16]
op	4:28	0:0	2	=
water	4:30	0:0	2	{
water	4:31	0:0	2	0
water	4:32	0:0	2	}
decl	5:4	5:39	2	AVMurMur3	*ctx
op	5:19	0:0	2	=
call	5:21	5:38	3	av_murmur3_alloc
decl	7:4	7:25	2	uint8_t	in[256]
op	7:20	0:0	2	=
water	7:22	0:0	2	{
water	7:23	0:0	2	0
water	7:24	0:0	2	}
decl	8:4	8:42	2	uint8_t	*hashes
op	8:20	0:0	2	=
call	8:22	8:41	3	av_mallocz
arg	8:33	8:41	4	256*16
water	8:33	0:0	5	256
op	8:37	0:0	5	*
water	8:39	0:0	5	16
for	9:4	16:4	2	(i = 0 ;i < 256;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:20	3	i < 256
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	256
forexpr	9:25	9:26	3	i ++
water	9:25	0:0	4	i
op	9:26	0:0	4	++
stmts	10:4	16:4	3	
water	10:4	0:0	4	{
water	11:8	0:0	4	in
op	11:10	0:0	4	[
water	11:11	0:0	4	i
op	11:12	0:0	4	]
op	11:14	0:0	4	=
water	11:16	0:0	4	i
water	11:17	0:0	4	;
call	12:8	12:43	4	av_murmur3_init_seeded
arg	12:31	12:34	5	ctx
water	12:31	0:0	6	ctx
arg	12:36	12:43	5	256-i
water	12:36	0:0	6	256
op	12:40	0:0	6	-
water	12:42	0:0	6	i
water	12:44	0:0	4	;
call	14:8	14:36	4	av_murmur3_update
arg	14:26	14:29	5	ctx
water	14:26	0:0	6	ctx
arg	14:31	14:33	5	in
water	14:31	0:0	6	in
arg	14:35	14:36	5	i
water	14:35	0:0	6	i
water	14:37	0:0	4	;
call	15:8	15:45	4	av_murmur3_final
arg	15:25	15:28	5	ctx
water	15:25	0:0	6	ctx
arg	15:30	15:45	5	hashes+16*i
water	15:30	0:0	6	hashes
op	15:37	0:0	6	+
water	15:39	0:0	6	16
op	15:42	0:0	6	*
water	15:44	0:0	6	i
water	15:46	0:0	4	;
water	16:4	0:0	4	}
call	17:4	17:33	2	av_murmur3_init_seeded
arg	17:27	17:30	3	ctx
water	17:27	0:0	4	ctx
arg	17:32	17:33	3	0
water	17:32	0:0	4	0
water	17:34	0:0	2	;
call	18:4	18:43	2	av_murmur3_update
arg	18:22	18:25	3	ctx
water	18:22	0:0	4	ctx
arg	18:27	18:33	3	hashes
water	18:27	0:0	4	hashes
arg	18:35	18:43	3	256*16
water	18:35	0:0	4	256
op	18:39	0:0	4	*
water	18:41	0:0	4	16
water	18:44	0:0	2	;
call	19:4	19:37	2	av_murmur3_final
arg	19:21	19:24	3	ctx
water	19:21	0:0	4	ctx
arg	19:26	19:37	3	hash_result
water	19:26	0:0	4	hash_result
water	19:38	0:0	2	;
call	20:4	20:18	2	av_free
arg	20:12	20:18	3	hashes
water	20:12	0:0	4	hashes
water	20:19	0:0	2	;
call	21:4	21:17	2	av_freep
arg	21:13	21:17	3	&ctx
op	21:13	0:0	4	&
water	21:14	0:0	4	ctx
water	21:18	0:0	2	;
call	22:4	22:94	2	printf
arg	22:11	22:46	3	"result: 0x%"PRIx64" 0x%"PRIx64"\n"
water	22:11	0:0	4	"result: 0x%"
water	22:24	0:0	4	PRIx64
water	22:30	0:0	4	" 0x%"
water	22:36	0:0	4	PRIx64
water	22:42	0:0	4	"\n"
arg	22:48	22:68	3	AV_RL64(hash_result)
call	22:48	22:67	4	AV_RL64
arg	22:56	22:67	5	hash_result
water	22:56	0:0	6	hash_result
arg	22:70	22:94	3	AV_RL64(hash_result+8)
call	22:70	22:93	4	AV_RL64
arg	22:78	22:93	5	hash_result+8
water	22:78	0:0	6	hash_result
op	22:90	0:0	6	+
water	22:92	0:0	6	8
water	22:95	0:0	2	;
return	24:4	24:45	2	AV_RL32(hash_result)!=0x6384ba69
call	24:11	24:30	3	AV_RL32
arg	24:19	24:30	4	hash_result
water	24:19	0:0	5	hash_result
op	24:32	0:0	3	!=
water	24:35	0:0	3	0
water	24:36	0:0	3	x6384ba69
decl	26:4	26:38	2	uint8_t	*in
op	26:16	0:0	2	=
call	26:18	26:37	3	av_mallocz
arg	26:29	26:37	4	512*1024
water	26:29	0:0	5	512
op	26:32	0:0	5	*
water	26:33	0:0	5	1024
call	27:4	27:23	2	av_murmur3_init
arg	27:20	27:23	3	ctx
water	27:20	0:0	4	ctx
water	27:24	0:0	2	;
for	28:4	29:44	2	(i = 0 ;i < 40 * 1024;i ++)
forinit	28:9	28:14	3	i = 0 ;
water	28:9	0:0	4	i
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:23	3	i < 40 * 1024
water	28:16	0:0	4	i
op	28:18	0:0	4	<
water	28:20	0:0	4	40
op	28:22	0:0	4	*
water	28:23	0:0	4	1024
forexpr	28:29	28:30	3	i ++
water	28:29	0:0	4	i
op	28:30	0:0	4	++
stmts	29:8	29:44	3	
call	29:8	29:43	4	av_murmur3_update
arg	29:26	29:29	5	ctx
water	29:26	0:0	6	ctx
arg	29:31	29:33	5	in
water	29:31	0:0	6	in
arg	29:35	29:43	5	512*1024
water	29:35	0:0	6	512
op	29:38	0:0	6	*
water	29:39	0:0	6	1024
water	29:44	0:0	4	;
call	30:4	30:37	2	av_murmur3_final
arg	30:21	30:24	3	ctx
water	30:21	0:0	4	ctx
arg	30:26	30:37	3	hash_result
water	30:26	0:0	4	hash_result
water	30:38	0:0	2	;
call	31:4	31:14	2	av_free
arg	31:12	31:14	3	in
water	31:12	0:0	4	in
water	31:15	0:0	2	;
return	32:4	32:25	2	hash_result[0]
water	32:11	0:0	3	hash_result
op	32:22	0:0	3	[
water	32:23	0:0	3	0
op	32:24	0:0	3	]
