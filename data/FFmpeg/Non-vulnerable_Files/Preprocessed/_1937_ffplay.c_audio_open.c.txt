func	1:0	70:0	0	static int	audio_open
params	1:21	0:0	1	
param	1:22	1:34	2	void *	opaque
param	1:36	1:65	2	int64_t	wanted_channel_layout
param	1:67	1:89	2	int	wanted_nb_channels
param	1:91	1:113	2	int	wanted_sample_rate
param	1:115	1:150	2	struct AudioParams *	audio_hw_params
stmnts	0:0	69:20	1	
decl	3:4	3:35	2	SDL_AudioSpec	wanted_spec
water	3:29	0:0	2	,
decl	3:4	3:35	2	SDL_AudioSpec	spec
decl	4:4	4:19	2	const char	*env
water	5:4	0:0	2	static
water	5:11	0:0	2	const
water	5:17	0:0	2	int
water	5:21	0:0	2	next_nb_channels
op	5:37	0:0	2	[
op	5:38	0:0	2	]
op	5:40	0:0	2	=
water	5:42	0:0	2	{
water	5:43	0:0	2	0
water	5:44	0:0	2	,
water	5:46	0:0	2	0
water	5:47	0:0	2	,
water	5:49	0:0	2	1
water	5:50	0:0	2	,
water	5:52	0:0	2	6
water	5:53	0:0	2	,
water	5:55	0:0	2	2
water	5:56	0:0	2	,
water	5:58	0:0	2	6
water	5:59	0:0	2	,
water	5:61	0:0	2	4
water	5:62	0:0	2	,
water	5:64	0:0	2	6
water	5:65	0:0	2	}
water	5:66	0:0	2	;
water	6:4	0:0	2	static
water	6:11	0:0	2	const
water	6:17	0:0	2	int
water	6:21	0:0	2	next_sample_rates
op	6:38	0:0	2	[
op	6:39	0:0	2	]
op	6:41	0:0	2	=
water	6:43	0:0	2	{
water	6:44	0:0	2	0
water	6:45	0:0	2	,
water	6:47	0:0	2	44100
water	6:52	0:0	2	,
water	6:54	0:0	2	48000
water	6:59	0:0	2	,
water	6:61	0:0	2	96000
water	6:66	0:0	2	,
water	6:68	0:0	2	192000
water	6:74	0:0	2	}
water	6:75	0:0	2	;
decl	7:4	7:68	2	int	next_sample_rate_idx
op	7:29	0:0	2	=
call	7:31	7:63	3	FF_ARRAY_ELEMS
arg	7:46	7:63	4	next_sample_rates
water	7:46	0:0	5	next_sample_rates
op	7:65	0:0	2	-
water	7:67	0:0	2	1
water	8:4	0:0	2	env
op	8:8	0:0	2	=
call	8:10	8:41	2	SDL_getenv
arg	8:21	8:41	3	"SDL_AUDIO_CHANNELS"
water	8:21	0:0	4	"SDL_AUDIO_CHANNELS"
water	8:42	0:0	2	;
if	9:4	12:4	2	(env)
cond	9:8	9:8	3	env
water	9:8	0:0	4	env
stmts	9:13	12:4	3	
water	9:13	0:0	4	{
water	10:8	0:0	4	wanted_nb_channels
op	10:27	0:0	4	=
call	10:29	10:37	4	atoi
arg	10:34	10:37	5	env
water	10:34	0:0	6	env
water	10:38	0:0	4	;
water	11:8	0:0	4	wanted_channel_layout
op	11:30	0:0	4	=
call	11:32	11:80	4	av_get_default_channel_layout
arg	11:62	11:80	5	wanted_nb_channels
water	11:62	0:0	6	wanted_nb_channels
water	11:81	0:0	4	;
water	12:4	0:0	4	}
if	13:4	16:4	2	(! wanted_channel_layout || wanted_nb_channels !=av_get_channel_layout_nb_channels (wanted_channel_layout ))
cond	13:8	13:111	3	! wanted_channel_layout || wanted_nb_channels !=av_get_channel_layout_nb_channels (wanted_channel_layout )
op	13:8	0:0	4	!
water	13:9	0:0	4	wanted_channel_layout
op	13:31	0:0	4	||
water	13:34	0:0	4	wanted_nb_channels
op	13:53	0:0	4	!=
call	13:56	13:111	4	av_get_channel_layout_nb_channels
arg	13:90	13:111	5	wanted_channel_layout
water	13:90	0:0	6	wanted_channel_layout
stmts	13:114	16:4	3	
water	13:114	0:0	4	{
water	14:8	0:0	4	wanted_channel_layout
op	14:30	0:0	4	=
call	14:32	14:80	4	av_get_default_channel_layout
arg	14:62	14:80	5	wanted_nb_channels
water	14:62	0:0	6	wanted_nb_channels
water	14:81	0:0	4	;
water	15:8	0:0	4	wanted_channel_layout
op	15:30	0:0	4	&=
water	15:33	0:0	4	~AV_CH_LAYOUT_STEREO_DOWNMIX
water	15:61	0:0	4	;
water	16:4	0:0	4	}
water	17:4	0:0	2	wanted_nb_channels
op	17:23	0:0	2	=
call	17:25	17:80	2	av_get_channel_layout_nb_channels
arg	17:59	17:80	3	wanted_channel_layout
water	17:59	0:0	4	wanted_channel_layout
water	17:81	0:0	2	;
water	18:4	0:0	2	wanted_spec
op	18:15	0:0	2	.
water	18:16	0:0	2	channels
op	18:25	0:0	2	=
water	18:27	0:0	2	wanted_nb_channels
water	18:45	0:0	2	;
water	19:4	0:0	2	wanted_spec
op	19:15	0:0	2	.
water	19:16	0:0	2	freq
op	19:21	0:0	2	=
water	19:23	0:0	2	wanted_sample_rate
water	19:41	0:0	2	;
if	20:4	23:4	2	(wanted_spec . freq <= 0 || wanted_spec . channels <= 0)
cond	20:8	20:57	3	wanted_spec . freq <= 0 || wanted_spec . channels <= 0
water	20:8	0:0	4	wanted_spec
op	20:19	0:0	4	.
water	20:20	0:0	4	freq
op	20:25	0:0	4	<=
water	20:28	0:0	4	0
op	20:30	0:0	4	||
water	20:33	0:0	4	wanted_spec
op	20:44	0:0	4	.
water	20:45	0:0	4	channels
op	20:54	0:0	4	<=
water	20:57	0:0	4	0
stmts	20:60	23:4	3	
water	20:60	0:0	4	{
call	21:8	21:76	4	av_log
arg	21:15	21:19	5	NULL
water	21:15	0:0	6	NULL
arg	21:21	21:33	5	AV_LOG_ERROR
water	21:21	0:0	6	AV_LOG_ERROR
arg	21:35	21:76	5	"Invalid sample rate or channel count!\n"
water	21:35	0:0	6	"Invalid sample rate or channel count!\n"
water	21:77	0:0	4	;
return	22:8	22:17	4	-1
op	22:15	0:0	5	-
water	22:16	0:0	5	1
water	23:4	0:0	4	}
while	24:4	25:30	2	(next_sample_rate_idx && next_sample_rates [ next_sample_rate_idx ] >= wanted_spec . freq)
cond	24:11	24:90	3	next_sample_rate_idx && next_sample_rates [ next_sample_rate_idx ] >= wanted_spec . freq
water	24:11	0:0	4	next_sample_rate_idx
op	24:32	0:0	4	&&
water	24:35	0:0	4	next_sample_rates
op	24:52	0:0	4	[
water	24:53	0:0	4	next_sample_rate_idx
op	24:73	0:0	4	]
op	24:75	0:0	4	>=
water	24:78	0:0	4	wanted_spec
op	24:89	0:0	4	.
water	24:90	0:0	4	freq
stmts	25:8	25:30	3	
water	25:8	0:0	4	next_sample_rate_idx
op	25:28	0:0	4	--
water	25:30	0:0	4	;
water	26:4	0:0	2	wanted_spec
op	26:15	0:0	2	.
water	26:16	0:0	2	format
op	26:23	0:0	2	=
water	26:25	0:0	2	AUDIO_S16SYS
water	26:37	0:0	2	;
water	27:4	0:0	2	wanted_spec
op	27:15	0:0	2	.
water	27:16	0:0	2	silence
op	27:24	0:0	2	=
water	27:26	0:0	2	0
water	27:27	0:0	2	;
water	28:4	0:0	2	wanted_spec
op	28:15	0:0	2	.
water	28:16	0:0	2	samples
op	28:24	0:0	2	=
call	28:26	28:123	2	FFMAX
arg	28:32	28:57	3	SDL_AUDIO_MIN_BUFFER_SIZE
water	28:32	0:0	4	SDL_AUDIO_MIN_BUFFER_SIZE
arg	28:59	28:123	3	2<<av_log2(wanted_spec.freq/SDL_AUDIO_MAX_CALLBACKS_PER_SEC)
water	28:59	0:0	4	2
op	28:61	0:0	4	<<
call	28:64	28:122	4	av_log2
arg	28:72	28:122	5	wanted_spec.freq/SDL_AUDIO_MAX_CALLBACKS_PER_SEC
water	28:72	0:0	6	wanted_spec
op	28:83	0:0	6	.
water	28:84	0:0	6	freq
op	28:89	0:0	6	/
water	28:91	0:0	6	SDL_AUDIO_MAX_CALLBACKS_PER_SEC
water	28:124	0:0	2	;
water	29:4	0:0	2	wanted_spec
op	29:15	0:0	2	.
water	29:16	0:0	2	callback
op	29:25	0:0	2	=
water	29:27	0:0	2	sdl_audio_callback
water	29:45	0:0	2	;
water	30:4	0:0	2	wanted_spec
op	30:15	0:0	2	.
water	30:16	0:0	2	userdata
op	30:25	0:0	2	=
water	30:27	0:0	2	opaque
water	30:33	0:0	2	;
while	31:4	45:4	2	(SDL_OpenAudio (& wanted_spec ,& spec ) < 0)
cond	31:11	31:48	3	SDL_OpenAudio (& wanted_spec ,& spec ) < 0
call	31:11	31:44	4	SDL_OpenAudio
arg	31:25	31:37	5	&wanted_spec
op	31:25	0:0	6	&
water	31:26	0:0	6	wanted_spec
arg	31:39	31:44	5	&spec
op	31:39	0:0	6	&
water	31:40	0:0	6	spec
op	31:46	0:0	4	<
water	31:48	0:0	4	0
stmts	31:51	45:4	3	
water	31:51	0:0	4	{
call	32:8	33:69	4	av_log
arg	32:15	32:19	5	NULL
water	32:15	0:0	6	NULL
arg	32:21	32:35	5	AV_LOG_WARNING
water	32:21	0:0	6	AV_LOG_WARNING
arg	32:37	32:79	5	"SDL_OpenAudio (%d channels, %d Hz): %s\n"
water	32:37	0:0	6	"SDL_OpenAudio (%d channels, %d Hz): %s\n"
arg	33:15	33:35	5	wanted_spec.channels
water	33:15	0:0	6	wanted_spec
op	33:26	0:0	6	.
water	33:27	0:0	6	channels
arg	33:37	33:53	5	wanted_spec.freq
water	33:37	0:0	6	wanted_spec
op	33:48	0:0	6	.
water	33:49	0:0	6	freq
arg	33:55	33:69	5	SDL_GetError()
call	33:55	33:68	6	SDL_GetError
water	33:70	0:0	4	;
water	34:8	0:0	4	wanted_spec
op	34:19	0:0	4	.
water	34:20	0:0	4	channels
op	34:29	0:0	4	=
water	34:31	0:0	4	next_nb_channels
op	34:47	0:0	4	[
call	34:48	34:77	4	FFMIN
arg	34:54	34:55	5	7
water	34:54	0:0	6	7
arg	34:57	34:77	5	wanted_spec.channels
water	34:57	0:0	6	wanted_spec
op	34:68	0:0	6	.
water	34:69	0:0	6	channels
op	34:78	0:0	4	]
water	34:79	0:0	4	;
if	35:8	43:8	4	(! wanted_spec . channels)
cond	35:12	35:25	5	! wanted_spec . channels
op	35:12	0:0	6	!
water	35:13	0:0	6	wanted_spec
op	35:24	0:0	6	.
water	35:25	0:0	6	channels
stmts	35:35	43:8	5	
water	35:35	0:0	6	{
water	36:12	0:0	6	wanted_spec
op	36:23	0:0	6	.
water	36:24	0:0	6	freq
op	36:29	0:0	6	=
water	36:31	0:0	6	next_sample_rates
op	36:48	0:0	6	[
water	36:49	0:0	6	next_sample_rate_idx
op	36:69	0:0	6	--
op	36:71	0:0	6	]
water	36:72	0:0	6	;
water	37:12	0:0	6	wanted_spec
op	37:23	0:0	6	.
water	37:24	0:0	6	channels
op	37:33	0:0	6	=
water	37:35	0:0	6	wanted_nb_channels
water	37:53	0:0	6	;
if	38:12	42:12	6	(! wanted_spec . freq)
cond	38:16	38:29	7	! wanted_spec . freq
op	38:16	0:0	8	!
water	38:17	0:0	8	wanted_spec
op	38:28	0:0	8	.
water	38:29	0:0	8	freq
stmts	38:35	42:12	7	
water	38:35	0:0	8	{
call	39:16	40:73	8	av_log
arg	39:23	39:27	9	NULL
water	39:23	0:0	10	NULL
arg	39:29	39:41	9	AV_LOG_ERROR
water	39:29	0:0	10	AV_LOG_ERROR
arg	40:23	40:73	9	"No more combinations to try, audio open failed\n"
water	40:23	0:0	10	"No more combinations to try, audio open failed\n"
water	40:74	0:0	8	;
return	41:16	41:25	8	-1
op	41:23	0:0	9	-
water	41:24	0:0	9	1
water	42:12	0:0	8	}
water	43:8	0:0	6	}
water	44:8	0:0	4	wanted_channel_layout
op	44:30	0:0	4	=
call	44:32	44:82	4	av_get_default_channel_layout
arg	44:62	44:82	5	wanted_spec.channels
water	44:62	0:0	6	wanted_spec
op	44:73	0:0	6	.
water	44:74	0:0	6	channels
water	44:83	0:0	4	;
water	45:4	0:0	4	}
if	46:4	50:4	2	(spec . format != AUDIO_S16SYS)
cond	46:8	46:23	3	spec . format != AUDIO_S16SYS
water	46:8	0:0	4	spec
op	46:12	0:0	4	.
water	46:13	0:0	4	format
op	46:20	0:0	4	!=
water	46:23	0:0	4	AUDIO_S16SYS
stmts	46:37	50:4	3	
water	46:37	0:0	4	{
call	47:8	48:77	4	av_log
arg	47:15	47:19	5	NULL
water	47:15	0:0	6	NULL
arg	47:21	47:33	5	AV_LOG_ERROR
water	47:21	0:0	6	AV_LOG_ERROR
arg	48:15	48:64	5	"SDL advised audio format %d is not supported!\n"
water	48:15	0:0	6	"SDL advised audio format %d is not supported!\n"
arg	48:66	48:77	5	spec.format
water	48:66	0:0	6	spec
op	48:70	0:0	6	.
water	48:71	0:0	6	format
water	48:78	0:0	4	;
return	49:8	49:17	4	-1
op	49:15	0:0	5	-
water	49:16	0:0	5	1
water	50:4	0:0	4	}
if	51:4	58:4	2	(spec . channels != wanted_spec . channels)
cond	51:8	51:37	3	spec . channels != wanted_spec . channels
water	51:8	0:0	4	spec
op	51:12	0:0	4	.
water	51:13	0:0	4	channels
op	51:22	0:0	4	!=
water	51:25	0:0	4	wanted_spec
op	51:36	0:0	4	.
water	51:37	0:0	4	channels
stmts	51:47	58:4	3	
water	51:47	0:0	4	{
water	52:8	0:0	4	wanted_channel_layout
op	52:30	0:0	4	=
call	52:32	52:75	4	av_get_default_channel_layout
arg	52:62	52:75	5	spec.channels
water	52:62	0:0	6	spec
op	52:66	0:0	6	.
water	52:67	0:0	6	channels
water	52:76	0:0	4	;
if	53:8	57:8	4	(! wanted_channel_layout)
cond	53:12	53:13	5	! wanted_channel_layout
op	53:12	0:0	6	!
water	53:13	0:0	6	wanted_channel_layout
stmts	53:36	57:8	5	
water	53:36	0:0	6	{
call	54:12	55:84	6	av_log
arg	54:19	54:23	7	NULL
water	54:19	0:0	8	NULL
arg	54:25	54:37	7	AV_LOG_ERROR
water	54:25	0:0	8	AV_LOG_ERROR
arg	55:19	55:69	7	"SDL advised channel count %d is not supported!\n"
water	55:19	0:0	8	"SDL advised channel count %d is not supported!\n"
arg	55:71	55:84	7	spec.channels
water	55:71	0:0	8	spec
op	55:75	0:0	8	.
water	55:76	0:0	8	channels
water	55:85	0:0	6	;
return	56:12	56:21	6	-1
op	56:19	0:0	7	-
water	56:20	0:0	7	1
water	57:8	0:0	6	}
water	58:4	0:0	4	}
water	59:4	0:0	2	audio_hw_params
op	59:19	0:0	2	->
water	59:21	0:0	2	fmt
op	59:25	0:0	2	=
water	59:27	0:0	2	AV_SAMPLE_FMT_S16
water	59:44	0:0	2	;
water	60:4	0:0	2	audio_hw_params
op	60:19	0:0	2	->
water	60:21	0:0	2	freq
op	60:26	0:0	2	=
water	60:28	0:0	2	spec
op	60:32	0:0	2	.
water	60:33	0:0	2	freq
water	60:37	0:0	2	;
water	61:4	0:0	2	audio_hw_params
op	61:19	0:0	2	->
water	61:21	0:0	2	channel_layout
op	61:36	0:0	2	=
water	61:38	0:0	2	wanted_channel_layout
water	61:59	0:0	2	;
water	62:4	0:0	2	audio_hw_params
op	62:19	0:0	2	->
water	62:21	0:0	2	channels
op	62:30	0:0	2	=
water	62:33	0:0	2	spec
op	62:37	0:0	2	.
water	62:38	0:0	2	channels
water	62:46	0:0	2	;
water	63:4	0:0	2	audio_hw_params
op	63:19	0:0	2	->
water	63:21	0:0	2	frame_size
op	63:32	0:0	2	=
call	63:34	63:120	2	av_samples_get_buffer_size
arg	63:61	63:65	3	NULL
water	63:61	0:0	4	NULL
arg	63:67	63:92	3	audio_hw_params->channels
water	63:67	0:0	4	audio_hw_params
op	63:82	0:0	4	->
water	63:84	0:0	4	channels
arg	63:94	63:95	3	1
water	63:94	0:0	4	1
arg	63:97	63:117	3	audio_hw_params->fmt
water	63:97	0:0	4	audio_hw_params
op	63:112	0:0	4	->
water	63:114	0:0	4	fmt
arg	63:119	63:120	3	1
water	63:119	0:0	4	1
water	63:121	0:0	2	;
water	64:4	0:0	2	audio_hw_params
op	64:19	0:0	2	->
water	64:21	0:0	2	bytes_per_sec
op	64:35	0:0	2	=
call	64:37	64:143	2	av_samples_get_buffer_size
arg	64:64	64:68	3	NULL
water	64:64	0:0	4	NULL
arg	64:70	64:95	3	audio_hw_params->channels
water	64:70	0:0	4	audio_hw_params
op	64:85	0:0	4	->
water	64:87	0:0	4	channels
arg	64:97	64:118	3	audio_hw_params->freq
water	64:97	0:0	4	audio_hw_params
op	64:112	0:0	4	->
water	64:114	0:0	4	freq
arg	64:120	64:140	3	audio_hw_params->fmt
water	64:120	0:0	4	audio_hw_params
op	64:135	0:0	4	->
water	64:137	0:0	4	fmt
arg	64:142	64:143	3	1
water	64:142	0:0	4	1
water	64:144	0:0	2	;
if	65:4	68:4	2	(audio_hw_params -> bytes_per_sec <= 0 || audio_hw_params -> frame_size <= 0)
cond	65:8	65:78	3	audio_hw_params -> bytes_per_sec <= 0 || audio_hw_params -> frame_size <= 0
water	65:8	0:0	4	audio_hw_params
op	65:23	0:0	4	->
water	65:25	0:0	4	bytes_per_sec
op	65:39	0:0	4	<=
water	65:42	0:0	4	0
op	65:44	0:0	4	||
water	65:47	0:0	4	audio_hw_params
op	65:62	0:0	4	->
water	65:64	0:0	4	frame_size
op	65:75	0:0	4	<=
water	65:78	0:0	4	0
stmts	65:81	68:4	3	
water	65:81	0:0	4	{
call	66:8	66:72	4	av_log
arg	66:15	66:19	5	NULL
water	66:15	0:0	6	NULL
arg	66:21	66:33	5	AV_LOG_ERROR
water	66:21	0:0	6	AV_LOG_ERROR
arg	66:35	66:72	5	"av_samples_get_buffer_size failed\n"
water	66:35	0:0	6	"av_samples_get_buffer_size failed\n"
water	66:73	0:0	4	;
return	67:8	67:17	4	-1
op	67:15	0:0	5	-
water	67:16	0:0	5	1
water	68:4	0:0	4	}
return	69:4	69:20	2	spec.size
water	69:11	0:0	3	spec
op	69:15	0:0	3	.
water	69:16	0:0	3	size
