func	1:0	43:0	0	static int	config_props
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
stmnts	0:0	42:12	1	
decl	3:4	3:47	2	FFTFILTContext	*fftfilt
op	3:28	0:0	2	=
water	3:30	0:0	2	inlink
op	3:36	0:0	2	->
water	3:38	0:0	2	dst
op	3:41	0:0	2	->
water	3:43	0:0	2	priv
decl	4:4	4:34	2	const AVPixFmtDescriptor	*desc
decl	5:4	5:43	2	int	rdft_hbits
water	5:18	0:0	2	,
decl	5:4	5:43	2	int	rdft_vbits
water	5:30	0:0	2	,
decl	5:4	5:43	2	int	i
water	5:33	0:0	2	,
decl	5:4	5:43	2	int	j
water	5:36	0:0	2	,
decl	5:4	5:43	2	int	plane
decl	6:4	6:30	2	double	values[VAR_VARS_NB]
water	7:4	0:0	2	desc
op	7:9	0:0	2	=
call	7:11	7:45	2	av_pix_fmt_desc_get
arg	7:31	7:45	3	inlink->format
water	7:31	0:0	4	inlink
op	7:37	0:0	4	->
water	7:39	0:0	4	format
water	7:46	0:0	2	;
for	8:4	23:4	2	(i = 0 ;i < desc -> nb_components;i ++)
forinit	8:9	8:14	3	i = 0 ;
water	8:9	0:0	4	i
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:26	3	i < desc -> nb_components
water	8:16	0:0	4	i
op	8:18	0:0	4	<
water	8:20	0:0	4	desc
op	8:24	0:0	4	->
water	8:26	0:0	4	nb_components
forexpr	8:41	8:42	3	i ++
water	8:41	0:0	4	i
op	8:42	0:0	4	++
stmts	8:46	23:4	3	
water	8:46	0:0	4	{
decl	9:8	9:25	4	int	w
op	9:14	0:0	4	=
water	9:16	0:0	4	inlink
op	9:22	0:0	4	->
water	9:24	0:0	4	w
decl	10:8	10:25	4	int	h
op	10:14	0:0	4	=
water	10:16	0:0	4	inlink
op	10:22	0:0	4	->
water	10:24	0:0	4	h
for	12:8	12:68	4	(rdft_hbits = 1 ;1 << rdft_hbits < w * 10 / 9;rdft_hbits ++)
forinit	12:13	12:27	5	rdft_hbits = 1 ;
water	12:13	0:0	6	rdft_hbits
op	12:24	0:0	6	=
water	12:26	0:0	6	1
water	12:27	0:0	6	;
cond	12:29	12:52	5	1 << rdft_hbits < w * 10 / 9
water	12:29	0:0	6	1
op	12:31	0:0	6	<<
water	12:34	0:0	6	rdft_hbits
op	12:45	0:0	6	<
water	12:47	0:0	6	w
op	12:48	0:0	6	*
water	12:49	0:0	6	10
op	12:51	0:0	6	/
water	12:52	0:0	6	9
forexpr	12:55	12:65	5	rdft_hbits ++
water	12:55	0:0	6	rdft_hbits
op	12:65	0:0	6	++
stmts	12:68	12:68	5	
water	12:68	0:0	6	;
water	13:8	0:0	4	fftfilt
op	13:15	0:0	4	->
water	13:17	0:0	4	rdft_hbits
op	13:27	0:0	4	[
water	13:28	0:0	4	i
op	13:29	0:0	4	]
op	13:31	0:0	4	=
water	13:33	0:0	4	rdft_hbits
water	13:43	0:0	4	;
water	14:8	0:0	4	fftfilt
op	14:15	0:0	4	->
water	14:17	0:0	4	rdft_hlen
op	14:26	0:0	4	[
water	14:27	0:0	4	i
op	14:28	0:0	4	]
op	14:30	0:0	4	=
water	14:32	0:0	4	1
op	14:34	0:0	4	<<
water	14:37	0:0	4	rdft_hbits
water	14:47	0:0	4	;
if	15:8	16:34	4	(! ( fftfilt -> rdft_hdata [ i ] =av_malloc_array (h ,fftfilt -> rdft_hlen [ i ] * sizeof ( FFTSample ) ) ))
cond	15:12	15:100	5	! ( fftfilt -> rdft_hdata [ i ] =av_malloc_array (h ,fftfilt -> rdft_hlen [ i ] * sizeof ( FFTSample ) ) )
op	15:12	0:0	6	!
water	15:13	0:0	6	(
water	15:14	0:0	6	fftfilt
op	15:21	0:0	6	->
water	15:23	0:0	6	rdft_hdata
op	15:33	0:0	6	[
water	15:34	0:0	6	i
op	15:35	0:0	6	]
op	15:37	0:0	6	=
call	15:39	15:99	6	av_malloc_array
arg	15:55	15:56	7	h
water	15:55	0:0	8	h
arg	15:58	15:99	7	fftfilt->rdft_hlen[i]*sizeof(FFTSample)
water	15:58	0:0	8	fftfilt
op	15:65	0:0	8	->
water	15:67	0:0	8	rdft_hlen
op	15:76	0:0	8	[
water	15:77	0:0	8	i
op	15:78	0:0	8	]
op	15:80	0:0	8	*
op	15:82	0:0	8	sizeof
water	15:88	0:0	8	(
water	15:89	0:0	8	FFTSample
water	15:98	0:0	8	)
water	15:100	0:0	6	)
stmts	16:12	16:34	5	
return	16:12	16:34	6	AVERROR(ENOMEM)
call	16:19	16:33	7	AVERROR
arg	16:27	16:33	8	ENOMEM
water	16:27	0:0	9	ENOMEM
for	18:8	18:68	4	(rdft_vbits = 1 ;1 << rdft_vbits < h * 10 / 9;rdft_vbits ++)
forinit	18:13	18:27	5	rdft_vbits = 1 ;
water	18:13	0:0	6	rdft_vbits
op	18:24	0:0	6	=
water	18:26	0:0	6	1
water	18:27	0:0	6	;
cond	18:29	18:52	5	1 << rdft_vbits < h * 10 / 9
water	18:29	0:0	6	1
op	18:31	0:0	6	<<
water	18:34	0:0	6	rdft_vbits
op	18:45	0:0	6	<
water	18:47	0:0	6	h
op	18:48	0:0	6	*
water	18:49	0:0	6	10
op	18:51	0:0	6	/
water	18:52	0:0	6	9
forexpr	18:55	18:65	5	rdft_vbits ++
water	18:55	0:0	6	rdft_vbits
op	18:65	0:0	6	++
stmts	18:68	18:68	5	
water	18:68	0:0	6	;
water	19:8	0:0	4	fftfilt
op	19:15	0:0	4	->
water	19:17	0:0	4	rdft_vbits
op	19:27	0:0	4	[
water	19:28	0:0	4	i
op	19:29	0:0	4	]
op	19:31	0:0	4	=
water	19:33	0:0	4	rdft_vbits
water	19:43	0:0	4	;
water	20:8	0:0	4	fftfilt
op	20:15	0:0	4	->
water	20:17	0:0	4	rdft_vlen
op	20:26	0:0	4	[
water	20:27	0:0	4	i
op	20:28	0:0	4	]
op	20:30	0:0	4	=
water	20:32	0:0	4	1
op	20:34	0:0	4	<<
water	20:37	0:0	4	rdft_vbits
water	20:47	0:0	4	;
if	21:8	22:34	4	(! ( fftfilt -> rdft_vdata [ i ] =av_malloc_array (fftfilt -> rdft_hlen [ i ] ,fftfilt -> rdft_vlen [ i ] * sizeof ( FFTSample ) ) ))
cond	21:12	21:120	5	! ( fftfilt -> rdft_vdata [ i ] =av_malloc_array (fftfilt -> rdft_hlen [ i ] ,fftfilt -> rdft_vlen [ i ] * sizeof ( FFTSample ) ) )
op	21:12	0:0	6	!
water	21:13	0:0	6	(
water	21:14	0:0	6	fftfilt
op	21:21	0:0	6	->
water	21:23	0:0	6	rdft_vdata
op	21:33	0:0	6	[
water	21:34	0:0	6	i
op	21:35	0:0	6	]
op	21:37	0:0	6	=
call	21:39	21:119	6	av_malloc_array
arg	21:55	21:76	7	fftfilt->rdft_hlen[i]
water	21:55	0:0	8	fftfilt
op	21:62	0:0	8	->
water	21:64	0:0	8	rdft_hlen
op	21:73	0:0	8	[
water	21:74	0:0	8	i
op	21:75	0:0	8	]
arg	21:78	21:119	7	fftfilt->rdft_vlen[i]*sizeof(FFTSample)
water	21:78	0:0	8	fftfilt
op	21:85	0:0	8	->
water	21:87	0:0	8	rdft_vlen
op	21:96	0:0	8	[
water	21:97	0:0	8	i
op	21:98	0:0	8	]
op	21:100	0:0	8	*
op	21:102	0:0	8	sizeof
water	21:108	0:0	8	(
water	21:109	0:0	8	FFTSample
water	21:118	0:0	8	)
water	21:120	0:0	6	)
stmts	22:12	22:34	5	
return	22:12	22:34	6	AVERROR(ENOMEM)
call	22:19	22:33	7	AVERROR
arg	22:27	22:33	8	ENOMEM
water	22:27	0:0	9	ENOMEM
water	23:4	0:0	4	}
water	25:4	0:0	2	values
op	25:10	0:0	2	[
water	25:11	0:0	2	VAR_W
op	25:16	0:0	2	]
op	25:18	0:0	2	=
water	25:20	0:0	2	inlink
op	25:26	0:0	2	->
water	25:28	0:0	2	w
water	25:29	0:0	2	;
water	26:4	0:0	2	values
op	26:10	0:0	2	[
water	26:11	0:0	2	VAR_H
op	26:16	0:0	2	]
op	26:18	0:0	2	=
water	26:20	0:0	2	inlink
op	26:26	0:0	2	->
water	26:28	0:0	2	h
water	26:29	0:0	2	;
for	27:4	41:4	2	(plane = 0 ;plane < 3;plane ++)
forinit	27:9	27:18	3	plane = 0 ;
water	27:9	0:0	4	plane
op	27:15	0:0	4	=
water	27:17	0:0	4	0
water	27:18	0:0	4	;
cond	27:20	27:28	3	plane < 3
water	27:20	0:0	4	plane
op	27:26	0:0	4	<
water	27:28	0:0	4	3
forexpr	27:31	27:36	3	plane ++
water	27:31	0:0	4	plane
op	27:36	0:0	4	++
stmts	28:4	41:4	3	
water	28:4	0:0	4	{
if	29:8	30:34	4	(! ( fftfilt -> weight [ plane ] =av_malloc_array (fftfilt -> rdft_hlen [ plane ] ,fftfilt -> rdft_vlen [ plane ] * sizeof ( double ) ) ))
cond	29:11	29:124	5	! ( fftfilt -> weight [ plane ] =av_malloc_array (fftfilt -> rdft_hlen [ plane ] ,fftfilt -> rdft_vlen [ plane ] * sizeof ( double ) ) )
op	29:11	0:0	6	!
water	29:12	0:0	6	(
water	29:13	0:0	6	fftfilt
op	29:20	0:0	6	->
water	29:22	0:0	6	weight
op	29:28	0:0	6	[
water	29:29	0:0	6	plane
op	29:34	0:0	6	]
op	29:36	0:0	6	=
call	29:38	29:123	6	av_malloc_array
arg	29:54	29:79	7	fftfilt->rdft_hlen[plane]
water	29:54	0:0	8	fftfilt
op	29:61	0:0	8	->
water	29:63	0:0	8	rdft_hlen
op	29:72	0:0	8	[
water	29:73	0:0	8	plane
op	29:78	0:0	8	]
arg	29:81	29:123	7	fftfilt->rdft_vlen[plane]*sizeof(double)
water	29:81	0:0	8	fftfilt
op	29:88	0:0	8	->
water	29:90	0:0	8	rdft_vlen
op	29:99	0:0	8	[
water	29:100	0:0	8	plane
op	29:105	0:0	8	]
op	29:107	0:0	8	*
op	29:109	0:0	8	sizeof
water	29:115	0:0	8	(
water	29:116	0:0	8	double
water	29:122	0:0	8	)
water	29:124	0:0	6	)
stmts	30:12	30:34	5	
return	30:12	30:34	6	AVERROR(ENOMEM)
call	30:19	30:33	7	AVERROR
arg	30:27	30:33	8	ENOMEM
water	30:27	0:0	9	ENOMEM
for	31:8	40:8	4	(i = 0 ;i < fftfilt -> rdft_hlen [ plane ];i ++)
forinit	31:13	31:18	5	i = 0 ;
water	31:13	0:0	6	i
op	31:15	0:0	6	=
water	31:17	0:0	6	0
water	31:18	0:0	6	;
cond	31:20	31:48	5	i < fftfilt -> rdft_hlen [ plane ]
water	31:20	0:0	6	i
op	31:22	0:0	6	<
water	31:24	0:0	6	fftfilt
op	31:31	0:0	6	->
water	31:33	0:0	6	rdft_hlen
op	31:42	0:0	6	[
water	31:43	0:0	6	plane
op	31:48	0:0	6	]
forexpr	31:51	31:52	5	i ++
water	31:51	0:0	6	i
op	31:52	0:0	6	++
stmts	32:8	40:8	5	
water	32:8	0:0	6	{
water	33:12	0:0	6	values
op	33:18	0:0	6	[
water	33:19	0:0	6	VAR_X
op	33:24	0:0	6	]
op	33:26	0:0	6	=
water	33:28	0:0	6	i
water	33:29	0:0	6	;
for	34:12	39:12	6	(j = 0 ;j < fftfilt -> rdft_vlen [ plane ];j ++)
forinit	34:17	34:22	7	j = 0 ;
water	34:17	0:0	8	j
op	34:19	0:0	8	=
water	34:21	0:0	8	0
water	34:22	0:0	8	;
cond	34:24	34:52	7	j < fftfilt -> rdft_vlen [ plane ]
water	34:24	0:0	8	j
op	34:26	0:0	8	<
water	34:28	0:0	8	fftfilt
op	34:35	0:0	8	->
water	34:37	0:0	8	rdft_vlen
op	34:46	0:0	8	[
water	34:47	0:0	8	plane
op	34:52	0:0	8	]
forexpr	34:55	34:56	7	j ++
water	34:55	0:0	8	j
op	34:56	0:0	8	++
stmts	35:12	39:12	7	
water	35:12	0:0	8	{
water	36:16	0:0	8	values
op	36:22	0:0	8	[
water	36:23	0:0	8	VAR_Y
op	36:28	0:0	8	]
op	36:30	0:0	8	=
water	36:32	0:0	8	j
water	36:33	0:0	8	;
water	37:16	0:0	8	fftfilt
op	37:23	0:0	8	->
water	37:25	0:0	8	weight
op	37:31	0:0	8	[
water	37:32	0:0	8	plane
op	37:37	0:0	8	]
op	37:38	0:0	8	[
water	37:39	0:0	8	i
op	37:41	0:0	8	*
water	37:43	0:0	8	fftfilt
op	37:50	0:0	8	->
water	37:52	0:0	8	rdft_vlen
op	37:61	0:0	8	[
water	37:62	0:0	8	plane
op	37:67	0:0	8	]
op	37:69	0:0	8	+
water	37:71	0:0	8	j
op	37:72	0:0	8	]
op	37:74	0:0	8	=
call	38:16	38:73	8	av_expr_eval
arg	38:29	38:56	9	fftfilt->weight_expr[plane]
water	38:29	0:0	10	fftfilt
op	38:36	0:0	10	->
water	38:38	0:0	10	weight_expr
op	38:49	0:0	10	[
water	38:50	0:0	10	plane
op	38:55	0:0	10	]
arg	38:58	38:64	9	values
water	38:58	0:0	10	values
arg	38:66	38:73	9	fftfilt
water	38:66	0:0	10	fftfilt
water	38:74	0:0	8	;
water	39:12	0:0	8	}
water	40:8	0:0	6	}
water	41:4	0:0	4	}
return	42:4	42:12	2	0
water	42:11	0:0	3	0
