func	1:0	222:0	0	int	ff_parse_mpeg2_descriptor
params	1:29	0:0	1	
param	1:30	1:49	2	AVFormatContext *	fc
param	1:51	1:63	2	AVStream *	st
param	1:65	1:80	2	int	stream_type
param	2:30	2:48	2	const uint8_t * *	pp
param	2:50	2:78	2	const uint8_t *	desc_list_end
param	3:30	3:49	2	Mp4Descr *	mp4_descr
param	3:51	3:70	2	int	mp4_descr_count
param	3:72	3:79	2	int	pid
param	4:30	4:47	2	MpegTSContext *	ts
stmnts	0:0	221:12	1	
decl	6:4	6:27	2	const uint8_t	*desc_end
decl	7:4	7:83	2	int	desc_len
water	7:16	0:0	2	,
decl	7:4	7:83	2	int	desc_tag
water	7:26	0:0	2	,
decl	7:4	7:83	2	int	desc_es_id
water	7:38	0:0	2	,
decl	7:4	7:83	2	int	ext_desc_tag
water	7:52	0:0	2	,
decl	7:4	7:83	2	int	channels
water	7:62	0:0	2	,
decl	7:4	7:83	2	int	channel_config_code
decl	8:4	8:22	2	char	language[252]
decl	9:4	9:9	2	int	i
water	10:4	0:0	2	desc_tag
op	10:13	0:0	2	=
call	10:15	10:37	2	get8
arg	10:20	10:22	3	pp
water	10:20	0:0	4	pp
arg	10:24	10:37	3	desc_list_end
water	10:24	0:0	4	desc_list_end
water	10:38	0:0	2	;
if	11:4	12:34	2	(desc_tag < 0)
cond	11:8	11:19	3	desc_tag < 0
water	11:8	0:0	4	desc_tag
op	11:17	0:0	4	<
water	11:19	0:0	4	0
stmts	12:8	12:34	3	
return	12:8	12:34	4	AVERROR_INVALIDDATA
water	12:15	0:0	5	AVERROR_INVALIDDATA
water	13:4	0:0	2	desc_len
op	13:13	0:0	2	=
call	13:15	13:37	2	get8
arg	13:20	13:22	3	pp
water	13:20	0:0	4	pp
arg	13:24	13:37	3	desc_list_end
water	13:24	0:0	4	desc_list_end
water	13:38	0:0	2	;
if	14:4	15:34	2	(desc_len < 0)
cond	14:8	14:19	3	desc_len < 0
water	14:8	0:0	4	desc_len
op	14:17	0:0	4	<
water	14:19	0:0	4	0
stmts	15:8	15:34	3	
return	15:8	15:34	4	AVERROR_INVALIDDATA
water	15:15	0:0	5	AVERROR_INVALIDDATA
water	16:4	0:0	2	desc_end
op	16:13	0:0	2	=
op	16:15	0:0	2	*
water	16:16	0:0	2	pp
op	16:19	0:0	2	+
water	16:21	0:0	2	desc_len
water	16:29	0:0	2	;
if	17:4	18:34	2	(desc_end > desc_list_end)
cond	17:8	17:19	3	desc_end > desc_list_end
water	17:8	0:0	4	desc_end
op	17:17	0:0	4	>
water	17:19	0:0	4	desc_list_end
stmts	18:8	18:34	3	
return	18:8	18:34	4	AVERROR_INVALIDDATA
water	18:15	0:0	5	AVERROR_INVALIDDATA
call	19:4	19:71	2	av_log
arg	19:11	19:13	3	fc
water	19:11	0:0	4	fc
arg	19:15	19:27	3	AV_LOG_TRACE
water	19:15	0:0	4	AV_LOG_TRACE
arg	19:29	19:51	3	"tag: 0x%02x len=%d\n"
water	19:29	0:0	4	"tag: 0x%02x len=%d\n"
arg	19:53	19:61	3	desc_tag
water	19:53	0:0	4	desc_tag
arg	19:63	19:71	3	desc_len
water	19:63	0:0	4	desc_len
water	19:72	0:0	2	;
if	20:4	22:57	2	(( st -> codec -> codec_id == AV_CODEC_ID_NONE || st -> request_probe > 0 ) && stream_type == STREAM_TYPE_PRIVATE_DATA)
cond	20:8	21:23	3	( st -> codec -> codec_id == AV_CODEC_ID_NONE || st -> request_probe > 0 ) && stream_type == STREAM_TYPE_PRIVATE_DATA
water	20:8	0:0	4	(
water	20:9	0:0	4	st
op	20:11	0:0	4	->
water	20:13	0:0	4	codec
op	20:18	0:0	4	->
water	20:20	0:0	4	codec_id
op	20:29	0:0	4	==
water	20:32	0:0	4	AV_CODEC_ID_NONE
op	20:49	0:0	4	||
water	20:52	0:0	4	st
op	20:54	0:0	4	->
water	20:56	0:0	4	request_probe
op	20:70	0:0	4	>
water	20:72	0:0	4	0
water	20:73	0:0	4	)
op	20:75	0:0	4	&&
water	21:8	0:0	4	stream_type
op	21:20	0:0	4	==
water	21:23	0:0	4	STREAM_TYPE_PRIVATE_DATA
stmts	22:8	22:57	3	
call	22:8	22:56	4	mpegts_find_stream_type
arg	22:32	22:34	5	st
water	22:32	0:0	6	st
arg	22:36	22:44	5	desc_tag
water	22:36	0:0	6	desc_tag
arg	22:46	22:56	5	DESC_types
water	22:46	0:0	6	DESC_types
water	22:57	0:0	4	;
switch	23:4	219:4	2	(desc_tag)
cond	23:12	23:12	3	desc_tag
water	23:12	0:0	4	desc_tag
stmts	23:22	219:4	3	
water	23:22	0:0	4	{
label	24:4	24:13	4	case 0 x1E :
water	25:8	0:0	4	desc_es_id
op	25:19	0:0	4	=
call	25:21	25:39	4	get16
arg	25:27	25:29	5	pp
water	25:27	0:0	6	pp
arg	25:31	25:39	5	desc_end
water	25:31	0:0	6	desc_end
water	25:40	0:0	4	;
if	26:8	27:17	4	(desc_es_id < 0)
cond	26:12	26:25	5	desc_es_id < 0
water	26:12	0:0	6	desc_es_id
op	26:23	0:0	6	<
water	26:25	0:0	6	0
stmts	27:12	27:17	5	
break	27:12	27:17	6	
if	28:8	29:45	4	(ts && ts -> pids [ pid ])
cond	28:12	28:30	5	ts && ts -> pids [ pid ]
water	28:12	0:0	6	ts
op	28:15	0:0	6	&&
water	28:18	0:0	6	ts
op	28:20	0:0	6	->
water	28:22	0:0	6	pids
op	28:26	0:0	6	[
water	28:27	0:0	6	pid
op	28:30	0:0	6	]
stmts	29:12	29:45	5	
water	29:12	0:0	6	ts
op	29:14	0:0	6	->
water	29:16	0:0	6	pids
op	29:20	0:0	6	[
water	29:21	0:0	6	pid
op	29:24	0:0	6	]
op	29:25	0:0	6	->
water	29:27	0:0	6	es_id
op	29:33	0:0	6	=
water	29:35	0:0	6	desc_es_id
water	29:45	0:0	6	;
for	30:8	43:12	4	(i = 0 ;i < mp4_descr_count;i ++)
forinit	30:13	30:18	5	i = 0 ;
water	30:13	0:0	6	i
op	30:15	0:0	6	=
water	30:17	0:0	6	0
water	30:18	0:0	6	;
cond	30:20	30:24	5	i < mp4_descr_count
water	30:20	0:0	6	i
op	30:22	0:0	6	<
water	30:24	0:0	6	mp4_descr_count
forexpr	30:41	30:42	5	i ++
water	30:41	0:0	6	i
op	30:42	0:0	6	++
stmts	31:12	43:12	5	
if	31:12	43:12	6	(mp4_descr [ i ] . dec_config_descr_len && mp4_descr [ i ] . es_id == desc_es_id)
cond	31:16	32:38	7	mp4_descr [ i ] . dec_config_descr_len && mp4_descr [ i ] . es_id == desc_es_id
water	31:16	0:0	8	mp4_descr
op	31:25	0:0	8	[
water	31:26	0:0	8	i
op	31:27	0:0	8	]
op	31:28	0:0	8	.
water	31:29	0:0	8	dec_config_descr_len
op	31:50	0:0	8	&&
water	32:16	0:0	8	mp4_descr
op	32:25	0:0	8	[
water	32:26	0:0	8	i
op	32:27	0:0	8	]
op	32:28	0:0	8	.
water	32:29	0:0	8	es_id
op	32:35	0:0	8	==
water	32:38	0:0	8	desc_es_id
stmts	32:50	43:12	7	
water	32:50	0:0	8	{
decl	33:16	33:30	8	AVIOContext	pb
call	34:16	36:56	8	ffio_init_context
arg	34:34	34:37	9	&pb
op	34:34	0:0	10	&
water	34:35	0:0	10	pb
arg	34:39	34:68	9	mp4_descr[i].dec_config_descr
water	34:39	0:0	10	mp4_descr
op	34:48	0:0	10	[
water	34:49	0:0	10	i
op	34:50	0:0	10	]
op	34:51	0:0	10	.
water	34:52	0:0	10	dec_config_descr
arg	35:34	35:67	9	mp4_descr[i].dec_config_descr_len
water	35:34	0:0	10	mp4_descr
op	35:43	0:0	10	[
water	35:44	0:0	10	i
op	35:45	0:0	10	]
op	35:46	0:0	10	.
water	35:47	0:0	10	dec_config_descr_len
arg	35:69	35:70	9	0
water	35:69	0:0	10	0
arg	36:34	36:38	9	NULL
water	36:34	0:0	10	NULL
arg	36:40	36:44	9	NULL
water	36:40	0:0	10	NULL
arg	36:46	36:50	9	NULL
water	36:46	0:0	10	NULL
arg	36:52	36:56	9	NULL
water	36:52	0:0	10	NULL
water	36:57	0:0	8	;
call	37:16	37:56	8	ff_mp4_read_dec_config_descr
arg	37:45	37:47	9	fc
water	37:45	0:0	10	fc
arg	37:49	37:51	9	st
water	37:49	0:0	10	st
arg	37:53	37:56	9	&pb
op	37:53	0:0	10	&
water	37:54	0:0	10	pb
water	37:57	0:0	8	;
if	38:16	40:40	8	(st -> codec -> codec_id == AV_CODEC_ID_AAC && st -> codec -> extradata_size > 0)
cond	38:20	39:48	9	st -> codec -> codec_id == AV_CODEC_ID_AAC && st -> codec -> extradata_size > 0
water	38:20	0:0	10	st
op	38:22	0:0	10	->
water	38:24	0:0	10	codec
op	38:29	0:0	10	->
water	38:31	0:0	10	codec_id
op	38:40	0:0	10	==
water	38:43	0:0	10	AV_CODEC_ID_AAC
op	38:59	0:0	10	&&
water	39:20	0:0	10	st
op	39:22	0:0	10	->
water	39:24	0:0	10	codec
op	39:29	0:0	10	->
water	39:31	0:0	10	extradata_size
op	39:46	0:0	10	>
water	39:48	0:0	10	0
stmts	40:20	40:40	9	
water	40:20	0:0	10	st
op	40:22	0:0	10	->
water	40:24	0:0	10	need_parsing
op	40:37	0:0	10	=
water	40:39	0:0	10	0
water	40:40	0:0	10	;
if	41:16	42:71	8	(st -> codec -> codec_id == AV_CODEC_ID_MPEG4SYSTEMS)
cond	41:20	41:43	9	st -> codec -> codec_id == AV_CODEC_ID_MPEG4SYSTEMS
water	41:20	0:0	10	st
op	41:22	0:0	10	->
water	41:24	0:0	10	codec
op	41:29	0:0	10	->
water	41:31	0:0	10	codec_id
op	41:40	0:0	10	==
water	41:43	0:0	10	AV_CODEC_ID_MPEG4SYSTEMS
stmts	42:20	42:71	9	
call	42:20	42:70	10	mpegts_open_section_filter
arg	42:47	42:49	11	ts
water	42:47	0:0	12	ts
arg	42:51	42:54	11	pid
water	42:51	0:0	12	pid
arg	42:56	42:63	11	m4sl_cb
water	42:56	0:0	12	m4sl_cb
arg	42:65	42:67	11	ts
water	42:65	0:0	12	ts
arg	42:69	42:70	11	1
water	42:69	0:0	12	1
water	42:71	0:0	10	;
water	43:12	0:0	8	}
break	44:8	44:13	4	
label	45:4	45:13	4	case 0 x1F :
if	46:8	47:17	4	(get16 (pp ,desc_end ) < 0)
cond	46:12	46:34	5	get16 (pp ,desc_end ) < 0
call	46:12	46:30	6	get16
arg	46:18	46:20	7	pp
water	46:18	0:0	8	pp
arg	46:22	46:30	7	desc_end
water	46:22	0:0	8	desc_end
op	46:32	0:0	6	<
water	46:34	0:0	6	0
stmts	47:12	47:17	5	
break	47:12	47:17	6	
if	48:8	63:8	4	(mp4_descr_count > 0 && ( st -> codec -> codec_id == AV_CODEC_ID_AAC_LATM || ( st -> request_probe == 0 && st -> codec -> codec_id == AV_CODEC_ID_NONE ) || st -> request_probe > 0 ) && mp4_descr -> dec_config_descr_len && mp4_descr -> es_id == pid)
cond	48:12	52:67	5	mp4_descr_count > 0 && ( st -> codec -> codec_id == AV_CODEC_ID_AAC_LATM || ( st -> request_probe == 0 && st -> codec -> codec_id == AV_CODEC_ID_NONE ) || st -> request_probe > 0 ) && mp4_descr -> dec_config_descr_len && mp4_descr -> es_id == pid
water	48:12	0:0	6	mp4_descr_count
op	48:28	0:0	6	>
water	48:30	0:0	6	0
op	48:32	0:0	6	&&
water	49:12	0:0	6	(
water	49:13	0:0	6	st
op	49:15	0:0	6	->
water	49:17	0:0	6	codec
op	49:22	0:0	6	->
water	49:24	0:0	6	codec_id
op	49:33	0:0	6	==
water	49:36	0:0	6	AV_CODEC_ID_AAC_LATM
op	49:57	0:0	6	||
water	50:13	0:0	6	(
water	50:14	0:0	6	st
op	50:16	0:0	6	->
water	50:18	0:0	6	request_probe
op	50:32	0:0	6	==
water	50:35	0:0	6	0
op	50:37	0:0	6	&&
water	50:40	0:0	6	st
op	50:42	0:0	6	->
water	50:44	0:0	6	codec
op	50:49	0:0	6	->
water	50:51	0:0	6	codec_id
op	50:60	0:0	6	==
water	50:63	0:0	6	AV_CODEC_ID_NONE
water	50:79	0:0	6	)
op	50:81	0:0	6	||
water	51:13	0:0	6	st
op	51:15	0:0	6	->
water	51:17	0:0	6	request_probe
op	51:31	0:0	6	>
water	51:33	0:0	6	0
water	51:34	0:0	6	)
op	51:36	0:0	6	&&
water	52:12	0:0	6	mp4_descr
op	52:21	0:0	6	->
water	52:23	0:0	6	dec_config_descr_len
op	52:44	0:0	6	&&
water	52:47	0:0	6	mp4_descr
op	52:56	0:0	6	->
water	52:58	0:0	6	es_id
op	52:64	0:0	6	==
water	52:67	0:0	6	pid
stmts	52:72	63:8	5	
water	52:72	0:0	6	{
decl	53:12	53:26	6	AVIOContext	pb
call	54:12	56:52	6	ffio_init_context
arg	54:30	54:33	7	&pb
op	54:30	0:0	8	&
water	54:31	0:0	8	pb
arg	54:35	54:62	7	mp4_descr->dec_config_descr
water	54:35	0:0	8	mp4_descr
op	54:44	0:0	8	->
water	54:46	0:0	8	dec_config_descr
arg	55:30	55:61	7	mp4_descr->dec_config_descr_len
water	55:30	0:0	8	mp4_descr
op	55:39	0:0	8	->
water	55:41	0:0	8	dec_config_descr_len
arg	55:63	55:64	7	0
water	55:63	0:0	8	0
arg	56:30	56:34	7	NULL
water	56:30	0:0	8	NULL
arg	56:36	56:40	7	NULL
water	56:36	0:0	8	NULL
arg	56:42	56:46	7	NULL
water	56:42	0:0	8	NULL
arg	56:48	56:52	7	NULL
water	56:48	0:0	8	NULL
water	56:53	0:0	6	;
call	57:12	57:52	6	ff_mp4_read_dec_config_descr
arg	57:41	57:43	7	fc
water	57:41	0:0	8	fc
arg	57:45	57:47	7	st
water	57:45	0:0	8	st
arg	57:49	57:52	7	&pb
op	57:49	0:0	8	&
water	57:50	0:0	8	pb
water	57:53	0:0	6	;
if	58:12	62:12	6	(st -> codec -> codec_id == AV_CODEC_ID_AAC && st -> codec -> extradata_size > 0)
cond	58:16	59:44	7	st -> codec -> codec_id == AV_CODEC_ID_AAC && st -> codec -> extradata_size > 0
water	58:16	0:0	8	st
op	58:18	0:0	8	->
water	58:20	0:0	8	codec
op	58:25	0:0	8	->
water	58:27	0:0	8	codec_id
op	58:36	0:0	8	==
water	58:39	0:0	8	AV_CODEC_ID_AAC
op	58:55	0:0	8	&&
water	59:16	0:0	8	st
op	59:18	0:0	8	->
water	59:20	0:0	8	codec
op	59:25	0:0	8	->
water	59:27	0:0	8	extradata_size
op	59:42	0:0	8	>
water	59:44	0:0	8	0
stmts	59:47	62:12	7	
water	59:47	0:0	8	{
water	60:16	0:0	8	st
op	60:18	0:0	8	->
water	60:20	0:0	8	request_probe
op	60:34	0:0	8	=
water	60:36	0:0	8	st
op	60:38	0:0	8	->
water	60:40	0:0	8	need_parsing
op	60:53	0:0	8	=
water	60:55	0:0	8	0
water	60:56	0:0	8	;
water	61:16	0:0	8	st
op	61:18	0:0	8	->
water	61:20	0:0	8	codec
op	61:25	0:0	8	->
water	61:27	0:0	8	codec_type
op	61:38	0:0	8	=
water	61:40	0:0	8	AVMEDIA_TYPE_AUDIO
water	61:58	0:0	8	;
water	62:12	0:0	8	}
water	63:8	0:0	6	}
break	64:8	64:13	4	
label	65:4	65:13	4	case 0 x56 :
water	66:8	0:0	4	{
decl	67:12	67:37	4	uint8_t	*extradata
op	67:31	0:0	4	=
water	67:33	0:0	4	NULL
decl	68:12	68:45	4	int	language_count
op	68:31	0:0	4	=
water	68:33	0:0	4	desc_len
op	68:42	0:0	4	/
water	68:44	0:0	4	5
if	69:12	70:42	4	(desc_len > 0 && desc_len % 5 != 0)
cond	69:16	69:48	5	desc_len > 0 && desc_len % 5 != 0
water	69:16	0:0	6	desc_len
op	69:25	0:0	6	>
water	69:27	0:0	6	0
op	69:29	0:0	6	&&
water	69:32	0:0	6	desc_len
op	69:41	0:0	6	%
water	69:43	0:0	6	5
op	69:45	0:0	6	!=
water	69:48	0:0	6	0
stmts	70:16	70:42	5	
return	70:16	70:42	6	AVERROR_INVALIDDATA
water	70:23	0:0	7	AVERROR_INVALIDDATA
if	71:12	93:12	4	(language_count > 0)
cond	71:16	71:33	5	language_count > 0
water	71:16	0:0	6	language_count
op	71:31	0:0	6	>
water	71:33	0:0	6	0
stmts	71:36	93:12	5	
water	71:36	0:0	6	{
call	73:16	73:65	6	av_assert0
arg	73:27	73:65	7	language_count<=sizeof(language)/4
water	73:27	0:0	8	language_count
op	73:42	0:0	8	<=
op	73:45	0:0	8	sizeof
water	73:51	0:0	8	(
water	73:52	0:0	8	language
water	73:60	0:0	8	)
op	73:62	0:0	8	/
water	73:64	0:0	8	4
water	73:66	0:0	6	;
if	74:16	78:16	6	(st -> codec -> extradata == NULL)
cond	74:20	74:44	7	st -> codec -> extradata == NULL
water	74:20	0:0	8	st
op	74:22	0:0	8	->
water	74:24	0:0	8	codec
op	74:29	0:0	8	->
water	74:31	0:0	8	extradata
op	74:41	0:0	8	==
water	74:44	0:0	8	NULL
stmts	74:50	78:16	7	
water	74:50	0:0	8	{
if	75:20	77:20	8	(ff_alloc_extradata (st -> codec ,language_count * 2 ))
cond	75:24	75:72	9	ff_alloc_extradata (st -> codec ,language_count * 2 )
call	75:24	75:72	10	ff_alloc_extradata
arg	75:43	75:52	11	st->codec
water	75:43	0:0	12	st
op	75:45	0:0	12	->
water	75:47	0:0	12	codec
arg	75:54	75:72	11	language_count*2
water	75:54	0:0	12	language_count
op	75:69	0:0	12	*
water	75:71	0:0	12	2
stmts	75:75	77:20	9	
water	75:75	0:0	10	{
return	76:24	76:46	10	AVERROR(ENOMEM)
call	76:31	76:45	11	AVERROR
arg	76:39	76:45	12	ENOMEM
water	76:39	0:0	13	ENOMEM
water	77:20	0:0	10	}
water	78:16	0:0	8	}
if	79:15	80:45	6	(st -> codec -> extradata_size < language_count * 2)
cond	79:19	79:64	7	st -> codec -> extradata_size < language_count * 2
water	79:19	0:0	8	st
op	79:21	0:0	8	->
water	79:23	0:0	8	codec
op	79:28	0:0	8	->
water	79:30	0:0	8	extradata_size
op	79:45	0:0	8	<
water	79:47	0:0	8	language_count
op	79:62	0:0	8	*
water	79:64	0:0	8	2
stmts	80:19	80:45	7	
return	80:19	80:45	8	AVERROR_INVALIDDATA
water	80:26	0:0	9	AVERROR_INVALIDDATA
water	81:15	0:0	6	extradata
op	81:25	0:0	6	=
water	81:27	0:0	6	st
op	81:29	0:0	6	->
water	81:31	0:0	6	codec
op	81:36	0:0	6	->
water	81:38	0:0	6	extradata
water	81:47	0:0	6	;
for	82:16	90:16	6	(i = 0 ;i < language_count;i ++)
forinit	82:21	82:26	7	i = 0 ;
water	82:21	0:0	8	i
op	82:23	0:0	8	=
water	82:25	0:0	8	0
water	82:26	0:0	8	;
cond	82:28	82:32	7	i < language_count
water	82:28	0:0	8	i
op	82:30	0:0	8	<
water	82:32	0:0	8	language_count
forexpr	82:48	82:49	7	i ++
water	82:48	0:0	8	i
op	82:49	0:0	8	++
stmts	82:53	90:16	7	
water	82:53	0:0	8	{
water	83:20	0:0	8	language
op	83:28	0:0	8	[
water	83:29	0:0	8	i
op	83:31	0:0	8	*
water	83:33	0:0	8	4
op	83:35	0:0	8	+
water	83:37	0:0	8	0
op	83:38	0:0	8	]
op	83:40	0:0	8	=
call	83:42	83:59	8	get8
arg	83:47	83:49	9	pp
water	83:47	0:0	10	pp
arg	83:51	83:59	9	desc_end
water	83:51	0:0	10	desc_end
water	83:60	0:0	8	;
water	84:20	0:0	8	language
op	84:28	0:0	8	[
water	84:29	0:0	8	i
op	84:31	0:0	8	*
water	84:33	0:0	8	4
op	84:35	0:0	8	+
water	84:37	0:0	8	1
op	84:38	0:0	8	]
op	84:40	0:0	8	=
call	84:42	84:59	8	get8
arg	84:47	84:49	9	pp
water	84:47	0:0	10	pp
arg	84:51	84:59	9	desc_end
water	84:51	0:0	10	desc_end
water	84:60	0:0	8	;
water	85:20	0:0	8	language
op	85:28	0:0	8	[
water	85:29	0:0	8	i
op	85:31	0:0	8	*
water	85:33	0:0	8	4
op	85:35	0:0	8	+
water	85:37	0:0	8	2
op	85:38	0:0	8	]
op	85:40	0:0	8	=
call	85:42	85:59	8	get8
arg	85:47	85:49	9	pp
water	85:47	0:0	10	pp
arg	85:51	85:59	9	desc_end
water	85:51	0:0	10	desc_end
water	85:60	0:0	8	;
water	86:20	0:0	8	language
op	86:28	0:0	8	[
water	86:29	0:0	8	i
op	86:31	0:0	8	*
water	86:33	0:0	8	4
op	86:35	0:0	8	+
water	86:37	0:0	8	3
op	86:38	0:0	8	]
op	86:40	0:0	8	=
water	86:42	0:0	8	','
water	86:45	0:0	8	;
call	87:20	87:44	8	memcpy
arg	87:27	87:36	9	extradata
water	87:27	0:0	10	extradata
arg	87:38	87:41	9	*pp
op	87:38	0:0	10	*
water	87:39	0:0	10	pp
arg	87:43	87:44	9	2
water	87:43	0:0	10	2
water	87:45	0:0	8	;
water	88:20	0:0	8	extradata
op	88:30	0:0	8	+=
water	88:33	0:0	8	2
water	88:34	0:0	8	;
op	89:20	0:0	8	*
water	89:21	0:0	8	pp
op	89:24	0:0	8	+=
water	89:27	0:0	8	2
water	89:28	0:0	8	;
water	90:16	0:0	8	}
water	91:16	0:0	6	language
op	91:24	0:0	6	[
water	91:25	0:0	6	i
op	91:27	0:0	6	*
water	91:29	0:0	6	4
op	91:31	0:0	6	-
water	91:33	0:0	6	1
op	91:34	0:0	6	]
op	91:36	0:0	6	=
water	91:38	0:0	6	0
water	91:39	0:0	6	;
call	92:16	92:66	6	av_dict_set
arg	92:28	92:41	7	&st->metadata
op	92:28	0:0	8	&
water	92:29	0:0	8	st
op	92:31	0:0	8	->
water	92:33	0:0	8	metadata
arg	92:43	92:53	7	"language"
water	92:43	0:0	8	"language"
arg	92:55	92:63	7	language
water	92:55	0:0	8	language
arg	92:65	92:66	7	0
water	92:65	0:0	8	0
water	92:67	0:0	6	;
water	93:12	0:0	6	}
water	94:8	0:0	4	}
break	95:8	95:13	4	
label	96:4	96:13	4	case 0 x59 :
water	97:8	0:0	4	{
decl	103:12	103:45	4	int	language_count
op	103:31	0:0	4	=
water	103:33	0:0	4	desc_len
op	103:42	0:0	4	/
water	103:44	0:0	4	8
if	104:12	105:42	4	(desc_len > 0 && desc_len % 8 != 0)
cond	104:16	104:48	5	desc_len > 0 && desc_len % 8 != 0
water	104:16	0:0	6	desc_len
op	104:25	0:0	6	>
water	104:27	0:0	6	0
op	104:29	0:0	6	&&
water	104:32	0:0	6	desc_len
op	104:41	0:0	6	%
water	104:43	0:0	6	8
op	104:45	0:0	6	!=
water	104:48	0:0	6	0
stmts	105:16	105:42	5	
return	105:16	105:42	6	AVERROR_INVALIDDATA
water	105:23	0:0	7	AVERROR_INVALIDDATA
if	106:12	108:12	4	(language_count > 1)
cond	106:16	106:33	5	language_count > 1
water	106:16	0:0	6	language_count
op	106:31	0:0	6	>
water	106:33	0:0	6	1
stmts	106:36	108:12	5	
water	106:36	0:0	6	{
call	107:16	107:81	6	avpriv_request_sample
arg	107:38	107:40	7	fc
water	107:38	0:0	8	fc
arg	107:42	107:81	7	"DVB subtitles with multiple languages"
water	107:42	0:0	8	"DVB subtitles with multiple languages"
water	107:82	0:0	6	;
water	108:12	0:0	6	}
if	109:12	144:12	4	(language_count > 0)
cond	109:16	109:33	5	language_count > 0
water	109:16	0:0	6	language_count
op	109:31	0:0	6	>
water	109:33	0:0	6	0
stmts	109:36	144:12	5	
water	109:36	0:0	6	{
decl	110:16	110:34	6	uint8_t	*extradata
call	112:16	112:65	6	av_assert0
arg	112:27	112:65	7	language_count<=sizeof(language)/4
water	112:27	0:0	8	language_count
op	112:42	0:0	8	<=
op	112:45	0:0	8	sizeof
water	112:51	0:0	8	(
water	112:52	0:0	8	language
water	112:60	0:0	8	)
op	112:62	0:0	8	/
water	112:64	0:0	8	4
water	112:66	0:0	6	;
if	113:16	117:16	6	(st -> codec -> extradata == NULL)
cond	113:20	113:44	7	st -> codec -> extradata == NULL
water	113:20	0:0	8	st
op	113:22	0:0	8	->
water	113:24	0:0	8	codec
op	113:29	0:0	8	->
water	113:31	0:0	8	extradata
op	113:41	0:0	8	==
water	113:44	0:0	8	NULL
stmts	113:50	117:16	7	
water	113:50	0:0	8	{
if	114:20	116:20	8	(ff_alloc_extradata (st -> codec ,language_count * 5 ))
cond	114:24	114:72	9	ff_alloc_extradata (st -> codec ,language_count * 5 )
call	114:24	114:72	10	ff_alloc_extradata
arg	114:43	114:52	11	st->codec
water	114:43	0:0	12	st
op	114:45	0:0	12	->
water	114:47	0:0	12	codec
arg	114:54	114:72	11	language_count*5
water	114:54	0:0	12	language_count
op	114:69	0:0	12	*
water	114:71	0:0	12	5
stmts	114:75	116:20	9	
water	114:75	0:0	10	{
return	115:24	115:46	10	AVERROR(ENOMEM)
call	115:31	115:45	11	AVERROR
arg	115:39	115:45	12	ENOMEM
water	115:39	0:0	13	ENOMEM
water	116:20	0:0	10	}
water	117:16	0:0	8	}
if	118:16	119:46	6	(st -> codec -> extradata_size < language_count * 5)
cond	118:20	118:65	7	st -> codec -> extradata_size < language_count * 5
water	118:20	0:0	8	st
op	118:22	0:0	8	->
water	118:24	0:0	8	codec
op	118:29	0:0	8	->
water	118:31	0:0	8	extradata_size
op	118:46	0:0	8	<
water	118:48	0:0	8	language_count
op	118:63	0:0	8	*
water	118:65	0:0	8	5
stmts	119:20	119:46	7	
return	119:20	119:46	8	AVERROR_INVALIDDATA
water	119:27	0:0	9	AVERROR_INVALIDDATA
water	120:16	0:0	6	extradata
op	120:26	0:0	6	=
water	120:28	0:0	6	st
op	120:30	0:0	6	->
water	120:32	0:0	6	codec
op	120:37	0:0	6	->
water	120:39	0:0	6	extradata
water	120:48	0:0	6	;
for	121:16	141:16	6	(i = 0 ;i < language_count;i ++)
forinit	121:21	121:26	7	i = 0 ;
water	121:21	0:0	8	i
op	121:23	0:0	8	=
water	121:25	0:0	8	0
water	121:26	0:0	8	;
cond	121:28	121:32	7	i < language_count
water	121:28	0:0	8	i
op	121:30	0:0	8	<
water	121:32	0:0	8	language_count
forexpr	121:48	121:49	7	i ++
water	121:48	0:0	8	i
op	121:49	0:0	8	++
stmts	121:53	141:16	7	
water	121:53	0:0	8	{
water	122:20	0:0	8	language
op	122:28	0:0	8	[
water	122:29	0:0	8	i
op	122:31	0:0	8	*
water	122:33	0:0	8	4
op	122:35	0:0	8	+
water	122:37	0:0	8	0
op	122:38	0:0	8	]
op	122:40	0:0	8	=
call	122:42	122:59	8	get8
arg	122:47	122:49	9	pp
water	122:47	0:0	10	pp
arg	122:51	122:59	9	desc_end
water	122:51	0:0	10	desc_end
water	122:60	0:0	8	;
water	123:20	0:0	8	language
op	123:28	0:0	8	[
water	123:29	0:0	8	i
op	123:31	0:0	8	*
water	123:33	0:0	8	4
op	123:35	0:0	8	+
water	123:37	0:0	8	1
op	123:38	0:0	8	]
op	123:40	0:0	8	=
call	123:42	123:59	8	get8
arg	123:47	123:49	9	pp
water	123:47	0:0	10	pp
arg	123:51	123:59	9	desc_end
water	123:51	0:0	10	desc_end
water	123:60	0:0	8	;
water	124:20	0:0	8	language
op	124:28	0:0	8	[
water	124:29	0:0	8	i
op	124:31	0:0	8	*
water	124:33	0:0	8	4
op	124:35	0:0	8	+
water	124:37	0:0	8	2
op	124:38	0:0	8	]
op	124:40	0:0	8	=
call	124:42	124:59	8	get8
arg	124:47	124:49	9	pp
water	124:47	0:0	10	pp
arg	124:51	124:59	9	desc_end
water	124:51	0:0	10	desc_end
water	124:60	0:0	8	;
water	125:20	0:0	8	language
op	125:28	0:0	8	[
water	125:29	0:0	8	i
op	125:31	0:0	8	*
water	125:33	0:0	8	4
op	125:35	0:0	8	+
water	125:37	0:0	8	3
op	125:38	0:0	8	]
op	125:40	0:0	8	=
water	125:42	0:0	8	','
water	125:45	0:0	8	;
switch	127:20	136:20	8	(* pp [ 0 ])
cond	127:28	127:33	9	* pp [ 0 ]
op	127:28	0:0	10	*
water	127:29	0:0	10	pp
op	127:31	0:0	10	[
water	127:32	0:0	10	0
op	127:33	0:0	10	]
stmts	127:36	136:20	9	
water	127:36	0:0	10	{
label	128:20	128:29	10	case 0 x20 :
label	129:20	129:29	10	case 0 x21 :
label	130:20	130:29	10	case 0 x22 :
label	131:20	131:29	10	case 0 x23 :
label	132:20	132:29	10	case 0 x24 :
label	133:20	133:29	10	case 0 x25 :
water	134:24	0:0	10	st
op	134:26	0:0	10	->
water	134:28	0:0	10	disposition
op	134:40	0:0	10	|=
water	134:43	0:0	10	AV_DISPOSITION_HEARING_IMPAIRED
water	134:74	0:0	10	;
break	135:24	135:29	10	
water	136:20	0:0	10	}
water	137:20	0:0	8	extradata
op	137:29	0:0	8	[
water	137:30	0:0	8	4
op	137:31	0:0	8	]
op	137:33	0:0	8	=
call	137:35	137:52	8	get8
arg	137:40	137:42	9	pp
water	137:40	0:0	10	pp
arg	137:44	137:52	9	desc_end
water	137:44	0:0	10	desc_end
water	137:53	0:0	8	;
call	138:20	138:44	8	memcpy
arg	138:27	138:36	9	extradata
water	138:27	0:0	10	extradata
arg	138:38	138:41	9	*pp
op	138:38	0:0	10	*
water	138:39	0:0	10	pp
arg	138:43	138:44	9	4
water	138:43	0:0	10	4
water	138:45	0:0	8	;
water	139:20	0:0	8	extradata
op	139:30	0:0	8	+=
water	139:33	0:0	8	5
water	139:34	0:0	8	;
op	140:20	0:0	8	*
water	140:21	0:0	8	pp
op	140:24	0:0	8	+=
water	140:27	0:0	8	4
water	140:28	0:0	8	;
water	141:16	0:0	8	}
water	142:16	0:0	6	language
op	142:24	0:0	6	[
water	142:25	0:0	6	i
op	142:27	0:0	6	*
water	142:29	0:0	6	4
op	142:31	0:0	6	-
water	142:33	0:0	6	1
op	142:34	0:0	6	]
op	142:36	0:0	6	=
water	142:38	0:0	6	0
water	142:39	0:0	6	;
call	143:16	143:66	6	av_dict_set
arg	143:28	143:41	7	&st->metadata
op	143:28	0:0	8	&
water	143:29	0:0	8	st
op	143:31	0:0	8	->
water	143:33	0:0	8	metadata
arg	143:43	143:53	7	"language"
water	143:43	0:0	8	"language"
arg	143:55	143:63	7	language
water	143:55	0:0	8	language
arg	143:65	143:66	7	0
water	143:65	0:0	8	0
water	143:67	0:0	6	;
water	144:12	0:0	6	}
water	145:8	0:0	4	}
break	146:8	146:13	4	
label	147:4	147:13	4	case 0 x0a :
for	148:8	164:8	4	(i = 0 ;i + 4 <= desc_len;i += 4)
forinit	148:13	148:18	5	i = 0 ;
water	148:13	0:0	6	i
op	148:15	0:0	6	=
water	148:17	0:0	6	0
water	148:18	0:0	6	;
cond	148:20	148:29	5	i + 4 <= desc_len
water	148:20	0:0	6	i
op	148:22	0:0	6	+
water	148:24	0:0	6	4
op	148:26	0:0	6	<=
water	148:29	0:0	6	desc_len
forexpr	148:39	148:44	5	i += 4
water	148:39	0:0	6	i
op	148:41	0:0	6	+=
water	148:44	0:0	6	4
stmts	148:47	164:8	5	
water	148:47	0:0	6	{
water	149:12	0:0	6	language
op	149:20	0:0	6	[
water	149:21	0:0	6	i
op	149:23	0:0	6	+
water	149:25	0:0	6	0
op	149:26	0:0	6	]
op	149:28	0:0	6	=
call	149:30	149:47	6	get8
arg	149:35	149:37	7	pp
water	149:35	0:0	8	pp
arg	149:39	149:47	7	desc_end
water	149:39	0:0	8	desc_end
water	149:48	0:0	6	;
water	150:12	0:0	6	language
op	150:20	0:0	6	[
water	150:21	0:0	6	i
op	150:23	0:0	6	+
water	150:25	0:0	6	1
op	150:26	0:0	6	]
op	150:28	0:0	6	=
call	150:30	150:47	6	get8
arg	150:35	150:37	7	pp
water	150:35	0:0	8	pp
arg	150:39	150:47	7	desc_end
water	150:39	0:0	8	desc_end
water	150:48	0:0	6	;
water	151:12	0:0	6	language
op	151:20	0:0	6	[
water	151:21	0:0	6	i
op	151:23	0:0	6	+
water	151:25	0:0	6	2
op	151:26	0:0	6	]
op	151:28	0:0	6	=
call	151:30	151:47	6	get8
arg	151:35	151:37	7	pp
water	151:35	0:0	8	pp
arg	151:39	151:47	7	desc_end
water	151:39	0:0	8	desc_end
water	151:48	0:0	6	;
water	152:12	0:0	6	language
op	152:20	0:0	6	[
water	152:21	0:0	6	i
op	152:23	0:0	6	+
water	152:25	0:0	6	3
op	152:26	0:0	6	]
op	152:28	0:0	6	=
water	152:30	0:0	6	','
water	152:33	0:0	6	;
switch	153:12	163:12	6	(get8 (pp ,desc_end ))
cond	153:20	153:37	7	get8 (pp ,desc_end )
call	153:20	153:37	8	get8
arg	153:25	153:27	9	pp
water	153:25	0:0	10	pp
arg	153:29	153:37	9	desc_end
water	153:29	0:0	10	desc_end
stmts	153:40	163:12	7	
water	153:40	0:0	8	{
label	154:12	154:21	8	case 0 x01 :
water	155:16	0:0	8	st
op	155:18	0:0	8	->
water	155:20	0:0	8	disposition
op	155:32	0:0	8	|=
water	155:35	0:0	8	AV_DISPOSITION_CLEAN_EFFECTS
water	155:63	0:0	8	;
break	156:16	156:21	8	
label	157:12	157:21	8	case 0 x02 :
water	158:16	0:0	8	st
op	158:18	0:0	8	->
water	158:20	0:0	8	disposition
op	158:32	0:0	8	|=
water	158:35	0:0	8	AV_DISPOSITION_HEARING_IMPAIRED
water	158:66	0:0	8	;
break	159:16	159:21	8	
label	160:12	160:21	8	case 0 x03 :
water	161:16	0:0	8	st
op	161:18	0:0	8	->
water	161:20	0:0	8	disposition
op	161:32	0:0	8	|=
water	161:35	0:0	8	AV_DISPOSITION_VISUAL_IMPAIRED
water	161:65	0:0	8	;
break	162:16	162:21	8	
water	163:12	0:0	8	}
water	164:8	0:0	6	}
if	165:8	168:8	4	(i && language [ 0 ])
cond	165:12	165:27	5	i && language [ 0 ]
water	165:12	0:0	6	i
op	165:14	0:0	6	&&
water	165:17	0:0	6	language
op	165:25	0:0	6	[
water	165:26	0:0	6	0
op	165:27	0:0	6	]
stmts	165:30	168:8	5	
water	165:30	0:0	6	{
water	166:12	0:0	6	language
op	166:20	0:0	6	[
water	166:21	0:0	6	i
op	166:23	0:0	6	-
water	166:25	0:0	6	1
op	166:26	0:0	6	]
op	166:28	0:0	6	=
water	166:30	0:0	6	0
water	166:31	0:0	6	;
call	167:12	167:62	6	av_dict_set
arg	167:24	167:37	7	&st->metadata
op	167:24	0:0	8	&
water	167:25	0:0	8	st
op	167:27	0:0	8	->
water	167:29	0:0	8	metadata
arg	167:39	167:49	7	"language"
water	167:39	0:0	8	"language"
arg	167:51	167:59	7	language
water	167:51	0:0	8	language
arg	167:61	167:62	7	0
water	167:61	0:0	8	0
water	167:63	0:0	6	;
water	168:8	0:0	6	}
break	169:8	169:13	4	
label	170:4	170:13	4	case 0 x05 :
water	171:8	0:0	4	st
op	171:10	0:0	4	->
water	171:12	0:0	4	codec
op	171:17	0:0	4	->
water	171:19	0:0	4	codec_tag
op	171:29	0:0	4	=
call	171:31	171:53	4	bytestream_get_le32
arg	171:51	171:53	5	pp
water	171:51	0:0	6	pp
water	171:54	0:0	4	;
call	172:8	172:81	4	av_log
arg	172:15	172:17	5	fc
water	172:15	0:0	6	fc
arg	172:19	172:31	5	AV_LOG_TRACE
water	172:19	0:0	6	AV_LOG_TRACE
arg	172:33	172:50	5	"reg_desc=%.4s\n"
water	172:33	0:0	6	"reg_desc=%.4s\n"
arg	172:52	172:81	5	(char*)&st->codec->codec_tag
water	172:52	0:0	6	(
water	172:53	0:0	6	char
op	172:58	0:0	6	*
water	172:59	0:0	6	)
op	172:60	0:0	6	&
water	172:61	0:0	6	st
op	172:63	0:0	6	->
water	172:65	0:0	6	codec
op	172:70	0:0	6	->
water	172:72	0:0	6	codec_tag
water	172:82	0:0	4	;
if	173:8	174:73	4	(st -> codec -> codec_id == AV_CODEC_ID_NONE || st -> request_probe > 0)
cond	173:12	173:75	5	st -> codec -> codec_id == AV_CODEC_ID_NONE || st -> request_probe > 0
water	173:12	0:0	6	st
op	173:14	0:0	6	->
water	173:16	0:0	6	codec
op	173:21	0:0	6	->
water	173:23	0:0	6	codec_id
op	173:32	0:0	6	==
water	173:35	0:0	6	AV_CODEC_ID_NONE
op	173:52	0:0	6	||
water	173:55	0:0	6	st
op	173:57	0:0	6	->
water	173:59	0:0	6	request_probe
op	173:73	0:0	6	>
water	173:75	0:0	6	0
stmts	174:12	174:73	5	
call	174:12	174:72	6	mpegts_find_stream_type
arg	174:36	174:38	7	st
water	174:36	0:0	8	st
arg	174:40	174:60	7	st->codec->codec_tag
water	174:40	0:0	8	st
op	174:42	0:0	8	->
water	174:44	0:0	8	codec
op	174:49	0:0	8	->
water	174:51	0:0	8	codec_tag
arg	174:62	174:72	7	REGD_types
water	174:62	0:0	8	REGD_types
water	174:73	0:0	6	;
break	175:8	175:13	4	
label	176:4	176:13	4	case 0 x52 :
water	177:8	0:0	4	st
op	177:10	0:0	4	->
water	177:12	0:0	4	stream_identifier
op	177:30	0:0	4	=
water	177:32	0:0	4	1
op	177:34	0:0	4	+
call	177:36	177:53	4	get8
arg	177:41	177:43	5	pp
water	177:41	0:0	6	pp
arg	177:45	177:53	5	desc_end
water	177:45	0:0	6	desc_end
water	177:54	0:0	4	;
break	178:8	178:13	4	
label	179:4	179:13	4	case 0 x26 :
if	180:8	181:20	4	(get16 (pp ,desc_end ) == 0 xFFFF)
cond	180:12	180:36	5	get16 (pp ,desc_end ) == 0 xFFFF
call	180:12	180:30	6	get16
arg	180:18	180:20	7	pp
water	180:18	0:0	8	pp
arg	180:22	180:30	7	desc_end
water	180:22	0:0	8	desc_end
op	180:32	0:0	6	==
water	180:35	0:0	6	0
water	180:36	0:0	6	xFFFF
stmts	181:12	181:20	5	
op	181:12	0:0	6	*
water	181:13	0:0	6	pp
op	181:16	0:0	6	+=
water	181:19	0:0	6	4
water	181:20	0:0	6	;
if	182:8	186:8	4	(get8 (pp ,desc_end ) == 0 xFF)
cond	182:12	182:35	5	get8 (pp ,desc_end ) == 0 xFF
call	182:12	182:29	6	get8
arg	182:17	182:19	7	pp
water	182:17	0:0	8	pp
arg	182:21	182:29	7	desc_end
water	182:21	0:0	8	desc_end
op	182:31	0:0	6	==
water	182:34	0:0	6	0
water	182:35	0:0	6	xFF
stmts	182:40	186:8	5	
water	182:40	0:0	6	{
water	183:12	0:0	6	st
op	183:14	0:0	6	->
water	183:16	0:0	6	codec
op	183:21	0:0	6	->
water	183:23	0:0	6	codec_tag
op	183:33	0:0	6	=
call	183:35	183:57	6	bytestream_get_le32
arg	183:55	183:57	7	pp
water	183:55	0:0	8	pp
water	183:58	0:0	6	;
if	184:12	185:81	6	(st -> codec -> codec_id == AV_CODEC_ID_NONE)
cond	184:16	184:39	7	st -> codec -> codec_id == AV_CODEC_ID_NONE
water	184:16	0:0	8	st
op	184:18	0:0	8	->
water	184:20	0:0	8	codec
op	184:25	0:0	8	->
water	184:27	0:0	8	codec_id
op	184:36	0:0	8	==
water	184:39	0:0	8	AV_CODEC_ID_NONE
stmts	185:16	185:81	7	
call	185:16	185:80	8	mpegts_find_stream_type
arg	185:40	185:42	9	st
water	185:40	0:0	10	st
arg	185:44	185:64	9	st->codec->codec_tag
water	185:44	0:0	10	st
op	185:46	0:0	10	->
water	185:48	0:0	10	codec
op	185:53	0:0	10	->
water	185:55	0:0	10	codec_tag
arg	185:66	185:80	9	METADATA_types
water	185:66	0:0	10	METADATA_types
water	185:81	0:0	8	;
water	186:8	0:0	6	}
break	187:8	187:13	4	
label	188:4	188:13	4	case 0 x7f :
water	189:8	0:0	4	ext_desc_tag
op	189:21	0:0	4	=
call	189:23	189:40	4	get8
arg	189:28	189:30	5	pp
water	189:28	0:0	6	pp
arg	189:32	189:40	5	desc_end
water	189:32	0:0	6	desc_end
water	189:41	0:0	4	;
if	190:8	191:38	4	(ext_desc_tag < 0)
cond	190:12	190:27	5	ext_desc_tag < 0
water	190:12	0:0	6	ext_desc_tag
op	190:25	0:0	6	<
water	190:27	0:0	6	0
stmts	191:12	191:38	5	
return	191:12	191:38	6	AVERROR_INVALIDDATA
water	191:19	0:0	7	AVERROR_INVALIDDATA
if	192:8	215:8	4	(st -> codec -> codec_id == AV_CODEC_ID_OPUS && ext_desc_tag == 0 x80)
cond	192:12	193:29	5	st -> codec -> codec_id == AV_CODEC_ID_OPUS && ext_desc_tag == 0 x80
water	192:12	0:0	6	st
op	192:14	0:0	6	->
water	192:16	0:0	6	codec
op	192:21	0:0	6	->
water	192:23	0:0	6	codec_id
op	192:32	0:0	6	==
water	192:35	0:0	6	AV_CODEC_ID_OPUS
op	192:52	0:0	6	&&
water	193:12	0:0	6	ext_desc_tag
op	193:25	0:0	6	==
water	193:28	0:0	6	0
water	193:29	0:0	6	x80
stmts	193:34	215:8	5	
water	193:34	0:0	6	{
if	194:12	214:12	6	(! st -> codec -> extradata)
cond	194:16	194:28	7	! st -> codec -> extradata
op	194:16	0:0	8	!
water	194:17	0:0	8	st
op	194:19	0:0	8	->
water	194:21	0:0	8	codec
op	194:26	0:0	8	->
water	194:28	0:0	8	extradata
stmts	194:39	214:12	7	
water	194:39	0:0	8	{
water	195:16	0:0	8	st
op	195:18	0:0	8	->
water	195:20	0:0	8	codec
op	195:25	0:0	8	->
water	195:27	0:0	8	extradata
op	195:37	0:0	8	=
call	195:39	196:78	8	av_mallocz
arg	195:50	196:78	9	sizeof(opus_default_extradata)+AV_INPUT_BUFFER_PADDING_SIZE
op	195:50	0:0	10	sizeof
water	195:56	0:0	10	(
water	195:57	0:0	10	opus_default_extradata
water	195:79	0:0	10	)
op	195:81	0:0	10	+
water	196:50	0:0	10	AV_INPUT_BUFFER_PADDING_SIZE
water	196:79	0:0	8	;
if	197:16	198:42	8	(! st -> codec -> extradata)
cond	197:20	197:32	9	! st -> codec -> extradata
op	197:20	0:0	10	!
water	197:21	0:0	10	st
op	197:23	0:0	10	->
water	197:25	0:0	10	codec
op	197:30	0:0	10	->
water	197:32	0:0	10	extradata
stmts	198:20	198:42	9	
return	198:20	198:42	10	AVERROR(ENOMEM)
call	198:27	198:41	11	AVERROR
arg	198:35	198:41	12	ENOMEM
water	198:35	0:0	13	ENOMEM
water	199:16	0:0	8	st
op	199:18	0:0	8	->
water	199:20	0:0	8	codec
op	199:25	0:0	8	->
water	199:27	0:0	8	extradata_size
op	199:42	0:0	8	=
op	199:44	0:0	8	sizeof
water	199:50	0:0	8	(
water	199:51	0:0	8	opus_default_extradata
water	199:73	0:0	8	)
water	199:74	0:0	8	;
call	200:16	200:99	8	memcpy
arg	200:23	200:43	9	st->codec->extradata
water	200:23	0:0	10	st
op	200:25	0:0	10	->
water	200:27	0:0	10	codec
op	200:32	0:0	10	->
water	200:34	0:0	10	extradata
arg	200:45	200:67	9	opus_default_extradata
water	200:45	0:0	10	opus_default_extradata
arg	200:69	200:99	9	sizeof(opus_default_extradata)
op	200:69	0:0	10	sizeof
water	200:75	0:0	10	(
water	200:76	0:0	10	opus_default_extradata
water	200:98	0:0	10	)
water	200:100	0:0	8	;
water	201:16	0:0	8	channel_config_code
op	201:36	0:0	8	=
call	201:38	201:55	8	get8
arg	201:43	201:45	9	pp
water	201:43	0:0	10	pp
arg	201:47	201:55	9	desc_end
water	201:47	0:0	10	desc_end
water	201:56	0:0	8	;
if	202:16	203:46	8	(channel_config_code < 0)
cond	202:20	202:42	9	channel_config_code < 0
water	202:20	0:0	10	channel_config_code
op	202:40	0:0	10	<
water	202:42	0:0	10	0
stmts	203:20	203:46	9	
return	203:20	203:46	10	AVERROR_INVALIDDATA
water	203:27	0:0	11	AVERROR_INVALIDDATA
if	204:16	210:16	8	(channel_config_code <= 0 x8)
cond	204:20	204:44	9	channel_config_code <= 0 x8
water	204:20	0:0	10	channel_config_code
op	204:40	0:0	10	<=
water	204:43	0:0	10	0
water	204:44	0:0	10	x8
stmts	204:48	210:16	9	
water	204:48	0:0	10	{
water	205:20	0:0	10	st
op	205:22	0:0	10	->
water	205:24	0:0	10	codec
op	205:29	0:0	10	->
water	205:31	0:0	10	extradata
op	205:40	0:0	10	[
water	205:41	0:0	10	9
op	205:42	0:0	10	]
op	205:45	0:0	10	=
water	205:47	0:0	10	channels
op	205:56	0:0	10	=
water	205:58	0:0	10	channel_config_code
water	205:78	0:0	10	?
water	205:80	0:0	10	channel_config_code
water	205:100	0:0	10	:
water	205:102	0:0	10	2
water	205:103	0:0	10	;
water	206:20	0:0	10	st
op	206:22	0:0	10	->
water	206:24	0:0	10	codec
op	206:29	0:0	10	->
water	206:31	0:0	10	extradata
op	206:40	0:0	10	[
water	206:41	0:0	10	18
op	206:43	0:0	10	]
op	206:45	0:0	10	=
water	206:47	0:0	10	channel_config_code
water	206:67	0:0	10	?
water	206:69	0:0	10	(
water	206:70	0:0	10	channels
op	206:79	0:0	10	>
water	206:81	0:0	10	2
water	206:82	0:0	10	)
water	206:84	0:0	10	:
water	206:87	0:0	10	255
water	206:90	0:0	10	;
water	207:20	0:0	10	st
op	207:22	0:0	10	->
water	207:24	0:0	10	codec
op	207:29	0:0	10	->
water	207:31	0:0	10	extradata
op	207:40	0:0	10	[
water	207:41	0:0	10	19
op	207:43	0:0	10	]
op	207:45	0:0	10	=
water	207:47	0:0	10	opus_stream_cnt
op	207:62	0:0	10	[
water	207:63	0:0	10	channel_config_code
op	207:82	0:0	10	]
water	207:83	0:0	10	;
water	208:20	0:0	10	st
op	208:22	0:0	10	->
water	208:24	0:0	10	codec
op	208:29	0:0	10	->
water	208:31	0:0	10	extradata
op	208:40	0:0	10	[
water	208:41	0:0	10	20
op	208:43	0:0	10	]
op	208:45	0:0	10	=
water	208:47	0:0	10	opus_coupled_stream_cnt
op	208:70	0:0	10	[
water	208:71	0:0	10	channel_config_code
op	208:90	0:0	10	]
water	208:91	0:0	10	;
call	209:20	209:94	10	memcpy
arg	209:27	209:52	11	&st->codec->extradata[21]
op	209:27	0:0	12	&
water	209:28	0:0	12	st
op	209:30	0:0	12	->
water	209:32	0:0	12	codec
op	209:37	0:0	12	->
water	209:39	0:0	12	extradata
op	209:48	0:0	12	[
water	209:49	0:0	12	21
op	209:51	0:0	12	]
arg	209:54	209:84	11	opus_channel_map[channels-1]
water	209:54	0:0	12	opus_channel_map
op	209:70	0:0	12	[
water	209:71	0:0	12	channels
op	209:80	0:0	12	-
water	209:82	0:0	12	1
op	209:83	0:0	12	]
arg	209:86	209:94	11	channels
water	209:86	0:0	12	channels
water	209:95	0:0	10	;
water	210:16	0:0	10	}
else	210:18	212:16	8
stmts	210:23	212:16	9	
water	210:23	0:0	10	{
call	211:20	211:91	10	avpriv_request_sample
arg	211:42	211:44	11	fc
water	211:42	0:0	12	fc
arg	211:46	211:91	11	"Opus in MPEG-TS - channel_config_code > 0x8"
water	211:46	0:0	12	"Opus in MPEG-TS - channel_config_code > 0x8"
water	211:92	0:0	10	;
water	212:16	0:0	10	}
water	213:16	0:0	8	st
op	213:18	0:0	8	->
water	213:20	0:0	8	need_parsing
op	213:33	0:0	8	=
water	213:35	0:0	8	AVSTREAM_PARSE_FULL
water	213:54	0:0	8	;
water	214:12	0:0	8	}
water	215:8	0:0	6	}
break	216:8	216:13	4	
label	217:4	217:11	4	default :
break	218:8	218:13	4	
water	219:4	0:0	4	}
op	220:4	0:0	2	*
water	220:5	0:0	2	pp
op	220:8	0:0	2	=
water	220:10	0:0	2	desc_end
water	220:18	0:0	2	;
return	221:4	221:12	2	0
water	221:11	0:0	3	0
