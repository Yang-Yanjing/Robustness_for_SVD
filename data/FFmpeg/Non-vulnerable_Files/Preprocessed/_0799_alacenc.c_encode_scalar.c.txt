func	1:0	24:0	0	static void	encode_scalar
params	1:25	0:0	1	
param	1:26	1:46	2	AlacEncodeContext *	s
param	1:48	1:53	2	int	x
param	2:26	2:31	2	int	k
param	2:33	2:54	2	int	write_sample_size
stmnts	0:0	23:4	1	
decl	4:4	4:21	2	int	divisor
water	4:15	0:0	2	,
decl	4:4	4:21	2	int	q
water	4:18	0:0	2	,
decl	4:4	4:21	2	int	r
water	5:4	0:0	2	k
op	5:6	0:0	2	=
call	5:8	5:33	2	FFMIN
arg	5:14	5:15	3	k
water	5:14	0:0	4	k
arg	5:17	5:33	3	s->rc.k_modifier
water	5:17	0:0	4	s
op	5:18	0:0	4	->
water	5:20	0:0	4	rc
op	5:22	0:0	4	.
water	5:23	0:0	4	k_modifier
water	5:34	0:0	2	;
water	6:4	0:0	2	divisor
op	6:12	0:0	2	=
water	6:14	0:0	2	(
water	6:15	0:0	2	1
op	6:16	0:0	2	<<
water	6:18	0:0	2	k
water	6:19	0:0	2	)
op	6:21	0:0	2	-
water	6:23	0:0	2	1
water	6:24	0:0	2	;
water	7:4	0:0	2	q
op	7:6	0:0	2	=
water	7:8	0:0	2	x
op	7:10	0:0	2	/
water	7:12	0:0	2	divisor
water	7:19	0:0	2	;
water	8:4	0:0	2	r
op	8:6	0:0	2	=
water	8:8	0:0	2	x
op	8:10	0:0	2	%
water	8:12	0:0	2	divisor
water	8:19	0:0	2	;
if	9:4	13:4	2	(q > 8)
cond	9:8	9:12	3	q > 8
water	9:8	0:0	4	q
op	9:10	0:0	4	>
water	9:12	0:0	4	8
stmts	9:15	13:4	3	
water	9:15	0:0	4	{
call	11:8	11:47	4	put_bits
arg	11:17	11:26	5	&s->pbctx
op	11:17	0:0	6	&
water	11:18	0:0	6	s
op	11:19	0:0	6	->
water	11:21	0:0	6	pbctx
arg	11:28	11:29	5	9
water	11:28	0:0	6	9
arg	11:31	11:47	5	ALAC_ESCAPE_CODE
water	11:31	0:0	6	ALAC_ESCAPE_CODE
water	11:48	0:0	4	;
call	12:8	12:48	4	put_bits
arg	12:17	12:26	5	&s->pbctx
op	12:17	0:0	6	&
water	12:18	0:0	6	s
op	12:19	0:0	6	->
water	12:21	0:0	6	pbctx
arg	12:28	12:45	5	write_sample_size
water	12:28	0:0	6	write_sample_size
arg	12:47	12:48	5	x
water	12:47	0:0	6	x
water	12:49	0:0	4	;
water	13:4	0:0	4	}
else	13:6	23:4	2
stmts	13:11	23:4	3	
water	13:11	0:0	4	{
if	14:8	15:46	4	(q)
cond	14:12	14:12	5	q
water	14:12	0:0	6	q
stmts	15:12	15:46	5	
call	15:12	15:45	6	put_bits
arg	15:21	15:30	7	&s->pbctx
op	15:21	0:0	8	&
water	15:22	0:0	8	s
op	15:23	0:0	8	->
water	15:25	0:0	8	pbctx
arg	15:32	15:33	7	q
water	15:32	0:0	8	q
arg	15:35	15:45	7	(1<<q)-1
water	15:35	0:0	8	(
water	15:36	0:0	8	1
op	15:37	0:0	8	<<
water	15:39	0:0	8	q
water	15:40	0:0	8	)
op	15:42	0:0	8	-
water	15:44	0:0	8	1
water	15:46	0:0	6	;
call	16:8	16:32	4	put_bits
arg	16:17	16:26	5	&s->pbctx
op	16:17	0:0	6	&
water	16:18	0:0	6	s
op	16:19	0:0	6	->
water	16:21	0:0	6	pbctx
arg	16:28	16:29	5	1
water	16:28	0:0	6	1
arg	16:31	16:32	5	0
water	16:31	0:0	6	0
water	16:33	0:0	4	;
if	17:8	22:8	4	(k != 1)
cond	17:12	17:17	5	k != 1
water	17:12	0:0	6	k
op	17:14	0:0	6	!=
water	17:17	0:0	6	1
stmts	17:20	22:8	5	
water	17:20	0:0	6	{
if	18:12	19:43	6	(r > 0)
cond	18:16	18:20	7	r > 0
water	18:16	0:0	8	r
op	18:18	0:0	8	>
water	18:20	0:0	8	0
stmts	19:16	19:43	7	
call	19:16	19:42	8	put_bits
arg	19:25	19:34	9	&s->pbctx
op	19:25	0:0	10	&
water	19:26	0:0	10	s
op	19:27	0:0	10	->
water	19:29	0:0	10	pbctx
arg	19:36	19:37	9	k
water	19:36	0:0	10	k
arg	19:39	19:42	9	r+1
water	19:39	0:0	10	r
op	19:40	0:0	10	+
water	19:41	0:0	10	1
water	19:43	0:0	8	;
else	20:12	21:43	6
stmts	21:16	21:43	7	
call	21:16	21:42	8	put_bits
arg	21:25	21:34	9	&s->pbctx
op	21:25	0:0	10	&
water	21:26	0:0	10	s
op	21:27	0:0	10	->
water	21:29	0:0	10	pbctx
arg	21:36	21:39	9	k-1
water	21:36	0:0	10	k
op	21:37	0:0	10	-
water	21:38	0:0	10	1
arg	21:41	21:42	9	0
water	21:41	0:0	10	0
water	21:43	0:0	8	;
water	22:8	0:0	6	}
water	23:4	0:0	4	}
