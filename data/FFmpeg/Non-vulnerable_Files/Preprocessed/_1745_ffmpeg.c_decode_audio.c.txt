func	1:0	54:0	0	static int	decode_audio
params	1:23	0:0	1	
param	1:24	1:40	2	InputStream *	ist
param	1:42	1:55	2	AVPacket *	pkt
param	1:57	1:72	2	int *	got_output
param	2:24	2:42	2	int *	decode_failed
stmnts	0:0	53:30	1	
decl	4:4	4:26	2	AVFrame	*decoded_frame
decl	5:4	5:40	2	AVCodecContext	*avctx
op	5:26	0:0	2	=
water	5:28	0:0	2	ist
op	5:31	0:0	2	->
water	5:33	0:0	2	dec_ctx
decl	6:4	6:20	2	int	ret
water	6:11	0:0	2	,
decl	6:4	6:20	2	int	err
op	6:17	0:0	2	=
water	6:19	0:0	2	0
decl	7:4	7:31	2	AVRational	decoded_frame_tb
if	8:4	9:30	2	(! ist -> decoded_frame && ! ( ist -> decoded_frame =av_frame_alloc ( ) ))
cond	8:8	8:70	3	! ist -> decoded_frame && ! ( ist -> decoded_frame =av_frame_alloc ( ) )
op	8:8	0:0	4	!
water	8:9	0:0	4	ist
op	8:12	0:0	4	->
water	8:14	0:0	4	decoded_frame
op	8:28	0:0	4	&&
op	8:31	0:0	4	!
water	8:32	0:0	4	(
water	8:33	0:0	4	ist
op	8:36	0:0	4	->
water	8:38	0:0	4	decoded_frame
op	8:52	0:0	4	=
call	8:54	8:69	4	av_frame_alloc
water	8:70	0:0	4	)
stmts	9:8	9:30	3	
return	9:8	9:30	4	AVERROR(ENOMEM)
call	9:15	9:29	5	AVERROR
arg	9:23	9:29	6	ENOMEM
water	9:23	0:0	7	ENOMEM
if	10:4	11:30	2	(! ist -> filter_frame && ! ( ist -> filter_frame =av_frame_alloc ( ) ))
cond	10:8	10:68	3	! ist -> filter_frame && ! ( ist -> filter_frame =av_frame_alloc ( ) )
op	10:8	0:0	4	!
water	10:9	0:0	4	ist
op	10:12	0:0	4	->
water	10:14	0:0	4	filter_frame
op	10:27	0:0	4	&&
op	10:30	0:0	4	!
water	10:31	0:0	4	(
water	10:32	0:0	4	ist
op	10:35	0:0	4	->
water	10:37	0:0	4	filter_frame
op	10:50	0:0	4	=
call	10:52	10:67	4	av_frame_alloc
water	10:68	0:0	4	)
stmts	11:8	11:30	3	
return	11:8	11:30	4	AVERROR(ENOMEM)
call	11:15	11:29	5	AVERROR
arg	11:23	11:29	6	ENOMEM
water	11:23	0:0	7	ENOMEM
water	12:4	0:0	2	decoded_frame
op	12:18	0:0	2	=
water	12:20	0:0	2	ist
op	12:23	0:0	2	->
water	12:25	0:0	2	decoded_frame
water	12:38	0:0	2	;
call	13:4	13:25	2	update_benchmark
arg	13:21	13:25	3	NULL
water	13:21	0:0	4	NULL
water	13:26	0:0	2	;
water	14:4	0:0	2	ret
op	14:8	0:0	2	=
call	14:10	14:54	2	decode
arg	14:17	14:22	3	avctx
water	14:17	0:0	4	avctx
arg	14:24	14:37	3	decoded_frame
water	14:24	0:0	4	decoded_frame
arg	14:39	14:49	3	got_output
water	14:39	0:0	4	got_output
arg	14:51	14:54	3	pkt
water	14:51	0:0	4	pkt
water	14:55	0:0	2	;
call	15:4	15:74	2	update_benchmark
arg	15:21	15:41	3	"decode_audio %d.%d"
water	15:21	0:0	4	"decode_audio %d.%d"
arg	15:43	15:58	3	ist->file_index
water	15:43	0:0	4	ist
op	15:46	0:0	4	->
water	15:48	0:0	4	file_index
arg	15:60	15:74	3	ist->st->index
water	15:60	0:0	4	ist
op	15:63	0:0	4	->
water	15:65	0:0	4	st
op	15:67	0:0	4	->
water	15:69	0:0	4	index
water	15:75	0:0	2	;
if	16:4	17:26	2	(ret < 0)
cond	16:8	16:14	3	ret < 0
water	16:8	0:0	4	ret
op	16:12	0:0	4	<
water	16:14	0:0	4	0
stmts	17:8	17:26	3	
op	17:8	0:0	4	*
water	17:9	0:0	4	decode_failed
op	17:23	0:0	4	=
water	17:25	0:0	4	1
water	17:26	0:0	4	;
if	18:4	21:4	2	(ret >= 0 && avctx -> sample_rate <= 0)
cond	18:8	18:42	3	ret >= 0 && avctx -> sample_rate <= 0
water	18:8	0:0	4	ret
op	18:12	0:0	4	>=
water	18:15	0:0	4	0
op	18:17	0:0	4	&&
water	18:20	0:0	4	avctx
op	18:25	0:0	4	->
water	18:27	0:0	4	sample_rate
op	18:39	0:0	4	<=
water	18:42	0:0	4	0
stmts	18:45	21:4	3	
water	18:45	0:0	4	{
call	19:8	19:82	4	av_log
arg	19:15	19:20	5	avctx
water	19:15	0:0	6	avctx
arg	19:22	19:34	5	AV_LOG_ERROR
water	19:22	0:0	6	AV_LOG_ERROR
arg	19:36	19:62	5	"Sample rate %d invalid\n"
water	19:36	0:0	6	"Sample rate %d invalid\n"
arg	19:64	19:82	5	avctx->sample_rate
water	19:64	0:0	6	avctx
op	19:69	0:0	6	->
water	19:71	0:0	6	sample_rate
water	19:83	0:0	4	;
water	20:8	0:0	4	ret
op	20:12	0:0	4	=
water	20:14	0:0	4	AVERROR_INVALIDDATA
water	20:33	0:0	4	;
water	21:4	0:0	4	}
if	22:4	23:49	2	(ret != AVERROR_EOF)
cond	22:8	22:15	3	ret != AVERROR_EOF
water	22:8	0:0	4	ret
op	22:12	0:0	4	!=
water	22:15	0:0	4	AVERROR_EOF
stmts	23:8	23:49	3	
call	23:8	23:48	4	check_decode_result
arg	23:28	23:31	5	ist
water	23:28	0:0	6	ist
arg	23:33	23:43	5	got_output
water	23:33	0:0	6	got_output
arg	23:45	23:48	5	ret
water	23:45	0:0	6	ret
water	23:49	0:0	4	;
if	24:4	25:18	2	(! * got_output || ret < 0)
cond	24:8	24:30	3	! * got_output || ret < 0
op	24:8	0:0	4	!
op	24:9	0:0	4	*
water	24:10	0:0	4	got_output
op	24:21	0:0	4	||
water	24:24	0:0	4	ret
op	24:28	0:0	4	<
water	24:30	0:0	4	0
stmts	25:8	25:18	3	
return	25:8	25:18	4	ret
water	25:15	0:0	5	ret
water	26:4	0:0	2	ist
op	26:7	0:0	2	->
water	26:9	0:0	2	samples_decoded
op	26:25	0:0	2	+=
water	26:28	0:0	2	decoded_frame
op	26:41	0:0	2	->
water	26:43	0:0	2	nb_samples
water	26:53	0:0	2	;
water	27:4	0:0	2	ist
op	27:7	0:0	2	->
water	27:9	0:0	2	frames_decoded
op	27:23	0:0	2	++
water	27:25	0:0	2	;
water	31:4	0:0	2	ist
op	31:7	0:0	2	->
water	31:9	0:0	2	next_pts
op	31:18	0:0	2	+=
water	31:21	0:0	2	(
water	31:22	0:0	2	(
water	31:23	0:0	2	int64_t
water	31:30	0:0	2	)
water	31:31	0:0	2	AV_TIME_BASE
op	31:44	0:0	2	*
water	31:46	0:0	2	decoded_frame
op	31:59	0:0	2	->
water	31:61	0:0	2	nb_samples
water	31:71	0:0	2	)
op	31:73	0:0	2	/
water	32:21	0:0	2	avctx
op	32:26	0:0	2	->
water	32:28	0:0	2	sample_rate
water	32:39	0:0	2	;
water	33:4	0:0	2	ist
op	33:7	0:0	2	->
water	33:9	0:0	2	next_dts
op	33:18	0:0	2	+=
water	33:21	0:0	2	(
water	33:22	0:0	2	(
water	33:23	0:0	2	int64_t
water	33:30	0:0	2	)
water	33:31	0:0	2	AV_TIME_BASE
op	33:44	0:0	2	*
water	33:46	0:0	2	decoded_frame
op	33:59	0:0	2	->
water	33:61	0:0	2	nb_samples
water	33:71	0:0	2	)
op	33:73	0:0	2	/
water	34:21	0:0	2	avctx
op	34:26	0:0	2	->
water	34:28	0:0	2	sample_rate
water	34:39	0:0	2	;
if	36:4	38:4	2	(decoded_frame -> pts != AV_NOPTS_VALUE)
cond	36:8	36:30	3	decoded_frame -> pts != AV_NOPTS_VALUE
water	36:8	0:0	4	decoded_frame
op	36:21	0:0	4	->
water	36:23	0:0	4	pts
op	36:27	0:0	4	!=
water	36:30	0:0	4	AV_NOPTS_VALUE
stmts	36:46	38:4	3	
water	36:46	0:0	4	{
water	37:8	0:0	4	decoded_frame_tb
op	37:27	0:0	4	=
water	37:29	0:0	4	ist
op	37:32	0:0	4	->
water	37:34	0:0	4	st
op	37:36	0:0	4	->
water	37:38	0:0	4	time_base
water	37:47	0:0	4	;
water	38:4	0:0	4	}
else	38:6	41:4	2
stmts	38:11	41:4	3	
if	38:11	41:4	4	(pkt && pkt -> pts != AV_NOPTS_VALUE)
cond	38:15	38:34	5	pkt && pkt -> pts != AV_NOPTS_VALUE
water	38:15	0:0	6	pkt
op	38:19	0:0	6	&&
water	38:22	0:0	6	pkt
op	38:25	0:0	6	->
water	38:27	0:0	6	pts
op	38:31	0:0	6	!=
water	38:34	0:0	6	AV_NOPTS_VALUE
stmts	38:50	41:4	5	
water	38:50	0:0	6	{
water	39:8	0:0	6	decoded_frame
op	39:21	0:0	6	->
water	39:23	0:0	6	pts
op	39:27	0:0	6	=
water	39:29	0:0	6	pkt
op	39:32	0:0	6	->
water	39:34	0:0	6	pts
water	39:37	0:0	6	;
water	40:8	0:0	6	decoded_frame_tb
op	40:27	0:0	6	=
water	40:29	0:0	6	ist
op	40:32	0:0	6	->
water	40:34	0:0	6	st
op	40:36	0:0	6	->
water	40:38	0:0	6	time_base
water	40:47	0:0	6	;
water	41:4	0:0	6	}
else	41:5	44:4	2
stmts	41:10	44:4	3	
water	41:10	0:0	4	{
water	42:8	0:0	4	decoded_frame
op	42:21	0:0	4	->
water	42:23	0:0	4	pts
op	42:27	0:0	4	=
water	42:29	0:0	4	ist
op	42:32	0:0	4	->
water	42:34	0:0	4	dts
water	42:37	0:0	4	;
water	43:8	0:0	4	decoded_frame_tb
op	43:27	0:0	4	=
water	43:29	0:0	4	AV_TIME_BASE_Q
water	43:43	0:0	4	;
water	44:4	0:0	4	}
if	45:4	48:82	2	(decoded_frame -> pts != AV_NOPTS_VALUE)
cond	45:8	45:30	3	decoded_frame -> pts != AV_NOPTS_VALUE
water	45:8	0:0	4	decoded_frame
op	45:21	0:0	4	->
water	45:23	0:0	4	pts
op	45:27	0:0	4	!=
water	45:30	0:0	4	AV_NOPTS_VALUE
stmts	46:8	48:82	3	
water	46:8	0:0	4	decoded_frame
op	46:21	0:0	4	->
water	46:23	0:0	4	pts
op	46:27	0:0	4	=
call	46:29	48:81	4	av_rescale_delta
arg	46:46	46:62	5	decoded_frame_tb
water	46:46	0:0	6	decoded_frame_tb
arg	46:64	46:82	5	decoded_frame->pts
water	46:64	0:0	6	decoded_frame
op	46:77	0:0	6	->
water	46:79	0:0	6	pts
arg	47:46	47:81	5	(AVRational){1,avctx->sample_rate}
water	47:46	0:0	6	(
water	47:47	0:0	6	AVRational
water	47:57	0:0	6	)
water	47:58	0:0	6	{
water	47:59	0:0	6	1
water	47:60	0:0	6	,
water	47:62	0:0	6	avctx
op	47:67	0:0	6	->
water	47:69	0:0	6	sample_rate
water	47:80	0:0	6	}
arg	47:83	47:108	5	decoded_frame->nb_samples
water	47:83	0:0	6	decoded_frame
op	47:96	0:0	6	->
water	47:98	0:0	6	nb_samples
arg	47:110	47:144	5	&ist->filter_in_rescale_delta_last
op	47:110	0:0	6	&
water	47:111	0:0	6	ist
op	47:114	0:0	6	->
water	47:116	0:0	6	filter_in_rescale_delta_last
arg	48:46	48:81	5	(AVRational){1,avctx->sample_rate}
water	48:46	0:0	6	(
water	48:47	0:0	6	AVRational
water	48:57	0:0	6	)
water	48:58	0:0	6	{
water	48:59	0:0	6	1
water	48:60	0:0	6	,
water	48:62	0:0	6	avctx
op	48:67	0:0	6	->
water	48:69	0:0	6	sample_rate
water	48:80	0:0	6	}
water	48:82	0:0	4	;
water	49:4	0:0	2	ist
op	49:7	0:0	2	->
water	49:9	0:0	2	nb_samples
op	49:20	0:0	2	=
water	49:22	0:0	2	decoded_frame
op	49:35	0:0	2	->
water	49:37	0:0	2	nb_samples
water	49:47	0:0	2	;
water	50:4	0:0	2	err
op	50:8	0:0	2	=
call	50:10	50:50	2	send_frame_to_filters
arg	50:32	50:35	3	ist
water	50:32	0:0	4	ist
arg	50:37	50:50	3	decoded_frame
water	50:37	0:0	4	decoded_frame
water	50:51	0:0	2	;
call	51:4	51:36	2	av_frame_unref
arg	51:19	51:36	3	ist->filter_frame
water	51:19	0:0	4	ist
op	51:22	0:0	4	->
water	51:24	0:0	4	filter_frame
water	51:37	0:0	2	;
call	52:4	52:32	2	av_frame_unref
arg	52:19	52:32	3	decoded_frame
water	52:19	0:0	4	decoded_frame
water	52:33	0:0	2	;
return	53:4	53:30	2	err<0?err:ret
water	53:11	0:0	3	err
op	53:15	0:0	3	<
water	53:17	0:0	3	0
water	53:19	0:0	3	?
water	53:21	0:0	3	err
water	53:25	0:0	3	:
water	53:27	0:0	3	ret
