func	1:0	21:0	0	static int	get_input
params	1:20	0:0	1	
param	1:21	1:35	2	AVFrame *	frame
param	1:37	1:50	2	int	frame_num
stmnts	0:0	20:12	1	
decl	3:4	3:17	2	int	err
water	3:11	0:0	2	,
decl	3:4	3:17	2	int	i
water	3:14	0:0	2	,
decl	3:4	3:17	2	int	j
water	6:4	0:0	2	frame
op	6:9	0:0	2	->
water	6:11	0:0	2	sample_rate
op	6:26	0:0	2	=
water	6:28	0:0	2	INPUT_SAMPLERATE
water	6:44	0:0	2	;
water	7:4	0:0	2	frame
op	7:9	0:0	2	->
water	7:11	0:0	2	format
op	7:26	0:0	2	=
water	7:28	0:0	2	INPUT_FORMAT
water	7:40	0:0	2	;
water	8:4	0:0	2	frame
op	8:9	0:0	2	->
water	8:11	0:0	2	channel_layout
op	8:26	0:0	2	=
water	8:28	0:0	2	INPUT_CHANNEL_LAYOUT
water	8:48	0:0	2	;
water	9:4	0:0	2	frame
op	9:9	0:0	2	->
water	9:11	0:0	2	nb_samples
op	9:26	0:0	2	=
water	9:28	0:0	2	FRAME_SIZE
water	9:38	0:0	2	;
water	10:4	0:0	2	frame
op	10:9	0:0	2	->
water	10:11	0:0	2	pts
op	10:26	0:0	2	=
water	10:28	0:0	2	frame_num
op	10:38	0:0	2	*
water	10:40	0:0	2	FRAME_SIZE
water	10:50	0:0	2	;
water	11:4	0:0	2	err
op	11:8	0:0	2	=
call	11:10	11:38	2	av_frame_get_buffer
arg	11:30	11:35	3	frame
water	11:30	0:0	4	frame
arg	11:37	11:38	3	0
water	11:37	0:0	4	0
water	11:39	0:0	2	;
if	12:4	13:18	2	(err < 0)
cond	12:8	12:14	3	err < 0
water	12:8	0:0	4	err
op	12:12	0:0	4	<
water	12:14	0:0	4	0
stmts	13:8	13:18	3	
return	13:8	13:18	4	err
water	13:15	0:0	5	err
for	15:4	19:4	2	(i = 0 ;i < 5;i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:20	3	i < 5
water	15:16	0:0	4	i
op	15:18	0:0	4	<
water	15:20	0:0	4	5
forexpr	15:23	15:24	3	i ++
water	15:23	0:0	4	i
op	15:24	0:0	4	++
stmts	15:28	19:4	3	
water	15:28	0:0	4	{
decl	16:8	16:53	4	float	*data
op	16:20	0:0	4	=
water	16:22	0:0	4	(
water	16:23	0:0	4	float
op	16:28	0:0	4	*
water	16:29	0:0	4	)
water	16:30	0:0	4	frame
op	16:35	0:0	4	->
water	16:37	0:0	4	extended_data
op	16:50	0:0	4	[
water	16:51	0:0	4	i
op	16:52	0:0	4	]
for	17:8	18:76	4	(j = 0 ;j < frame -> nb_samples;j ++)
forinit	17:13	17:18	5	j = 0 ;
water	17:13	0:0	6	j
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:31	5	j < frame -> nb_samples
water	17:20	0:0	6	j
op	17:22	0:0	6	<
water	17:24	0:0	6	frame
op	17:29	0:0	6	->
water	17:31	0:0	6	nb_samples
forexpr	17:43	17:44	5	j ++
water	17:43	0:0	6	j
op	17:44	0:0	6	++
stmts	18:12	18:76	5	
water	18:12	0:0	6	data
op	18:16	0:0	6	[
water	18:17	0:0	6	j
op	18:18	0:0	6	]
op	18:20	0:0	6	=
call	18:22	18:75	6	sin
arg	18:26	18:75	7	2*M_PI*(frame_num+j)*(i+1)/FRAME_SIZE
water	18:26	0:0	8	2
op	18:28	0:0	8	*
water	18:30	0:0	8	M_PI
op	18:35	0:0	8	*
water	18:37	0:0	8	(
water	18:38	0:0	8	frame_num
op	18:48	0:0	8	+
water	18:50	0:0	8	j
water	18:51	0:0	8	)
op	18:53	0:0	8	*
water	18:55	0:0	8	(
water	18:56	0:0	8	i
op	18:58	0:0	8	+
water	18:60	0:0	8	1
water	18:61	0:0	8	)
op	18:63	0:0	8	/
water	18:65	0:0	8	FRAME_SIZE
water	18:76	0:0	6	;
water	19:4	0:0	4	}
return	20:4	20:12	2	0
water	20:11	0:0	3	0
