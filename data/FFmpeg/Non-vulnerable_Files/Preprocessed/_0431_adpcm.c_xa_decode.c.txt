func	1:0	66:0	0	static int	xa_decode
params	1:20	0:0	1	
param	1:21	1:42	2	AVCodecContext *	avctx
param	1:44	1:57	2	int16_t *	out0
param	1:59	1:72	2	int16_t *	out1
param	2:21	2:38	2	const uint8_t *	in
param	2:40	2:64	2	ADPCMChannelStatus *	left
param	3:21	3:46	2	ADPCMChannelStatus *	right
param	3:48	3:60	2	int	channels
param	3:62	3:79	2	int	sample_offset
stmnts	0:0	65:12	1	
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
decl	6:4	6:26	2	int	shift
water	6:13	0:0	2	,
decl	6:4	6:26	2	int	filter
water	6:20	0:0	2	,
decl	6:4	6:26	2	int	f0
water	6:23	0:0	2	,
decl	6:4	6:26	2	int	f1
decl	7:4	7:15	2	int	s_1
water	7:11	0:0	2	,
decl	7:4	7:15	2	int	s_2
decl	8:4	8:13	2	int	d
water	8:9	0:0	2	,
decl	8:4	8:13	2	int	s
water	8:11	0:0	2	,
decl	8:4	8:13	2	int	t
water	9:4	0:0	2	out0
op	9:9	0:0	2	+=
water	9:12	0:0	2	sample_offset
water	9:25	0:0	2	;
if	10:4	11:24	2	(channels == 1)
cond	10:8	10:20	3	channels == 1
water	10:8	0:0	4	channels
op	10:17	0:0	4	==
water	10:20	0:0	4	1
stmts	11:8	11:24	3	
water	11:8	0:0	4	out1
op	11:13	0:0	4	=
water	11:15	0:0	4	out0
op	11:20	0:0	4	+
water	11:22	0:0	4	28
water	11:24	0:0	4	;
else	12:4	13:29	2
stmts	13:8	13:29	3	
water	13:8	0:0	4	out1
op	13:13	0:0	4	+=
water	13:16	0:0	4	sample_offset
water	13:29	0:0	4	;
for	14:4	64:4	2	(i = 0 ;i < 4;i ++)
forinit	14:8	14:11	3	i = 0 ;
water	14:8	0:0	4	i
op	14:9	0:0	4	=
water	14:10	0:0	4	0
water	14:11	0:0	4	;
cond	14:12	14:14	3	i < 4
water	14:12	0:0	4	i
op	14:13	0:0	4	<
water	14:14	0:0	4	4
forexpr	14:16	14:17	3	i ++
water	14:16	0:0	4	i
op	14:17	0:0	4	++
stmts	14:21	64:4	3	
water	14:21	0:0	4	{
water	15:8	0:0	4	shift
op	15:15	0:0	4	=
water	15:17	0:0	4	12
op	15:20	0:0	4	-
water	15:22	0:0	4	(
water	15:23	0:0	4	in
op	15:25	0:0	4	[
water	15:26	0:0	4	4
op	15:27	0:0	4	+
water	15:28	0:0	4	i
op	15:29	0:0	4	*
water	15:30	0:0	4	2
op	15:31	0:0	4	]
op	15:33	0:0	4	&
water	15:35	0:0	4	15
water	15:37	0:0	4	)
water	15:38	0:0	4	;
water	16:8	0:0	4	filter
op	16:15	0:0	4	=
water	16:17	0:0	4	in
op	16:19	0:0	4	[
water	16:20	0:0	4	4
op	16:21	0:0	4	+
water	16:22	0:0	4	i
op	16:23	0:0	4	*
water	16:24	0:0	4	2
op	16:25	0:0	4	]
op	16:27	0:0	4	>>
water	16:30	0:0	4	4
water	16:31	0:0	4	;
if	17:8	20:8	4	(filter >=FF_ARRAY_ELEMS (xa_adpcm_table ))
cond	17:12	17:51	5	filter >=FF_ARRAY_ELEMS (xa_adpcm_table )
water	17:12	0:0	6	filter
op	17:19	0:0	6	>=
call	17:22	17:51	6	FF_ARRAY_ELEMS
arg	17:37	17:51	7	xa_adpcm_table
water	17:37	0:0	8	xa_adpcm_table
stmts	17:54	20:8	5	
water	17:54	0:0	6	{
call	18:12	18:77	6	avpriv_request_sample
arg	18:34	18:39	7	avctx
water	18:34	0:0	8	avctx
arg	18:41	18:69	7	"unknown XA-ADPCM filter %d"
water	18:41	0:0	8	"unknown XA-ADPCM filter %d"
arg	18:71	18:77	7	filter
water	18:71	0:0	8	filter
water	18:78	0:0	6	;
water	19:12	0:0	6	filter
op	19:18	0:0	6	=
water	19:19	0:0	6	0
water	19:20	0:0	6	;
water	20:8	0:0	6	}
water	21:8	0:0	4	f0
op	21:11	0:0	4	=
water	21:13	0:0	4	xa_adpcm_table
op	21:27	0:0	4	[
water	21:28	0:0	4	filter
op	21:34	0:0	4	]
op	21:35	0:0	4	[
water	21:36	0:0	4	0
op	21:37	0:0	4	]
water	21:38	0:0	4	;
water	22:8	0:0	4	f1
op	22:11	0:0	4	=
water	22:13	0:0	4	xa_adpcm_table
op	22:27	0:0	4	[
water	22:28	0:0	4	filter
op	22:34	0:0	4	]
op	22:35	0:0	4	[
water	22:36	0:0	4	1
op	22:37	0:0	4	]
water	22:38	0:0	4	;
water	23:8	0:0	4	s_1
op	23:12	0:0	4	=
water	23:14	0:0	4	left
op	23:18	0:0	4	->
water	23:20	0:0	4	sample1
water	23:27	0:0	4	;
water	24:8	0:0	4	s_2
op	24:12	0:0	4	=
water	24:14	0:0	4	left
op	24:18	0:0	4	->
water	24:20	0:0	4	sample2
water	24:27	0:0	4	;
for	25:8	32:8	4	(j = 0 ;j < 28;j ++)
forinit	25:12	25:15	5	j = 0 ;
water	25:12	0:0	6	j
op	25:13	0:0	6	=
water	25:14	0:0	6	0
water	25:15	0:0	6	;
cond	25:16	25:18	5	j < 28
water	25:16	0:0	6	j
op	25:17	0:0	6	<
water	25:18	0:0	6	28
forexpr	25:21	25:22	5	j ++
water	25:21	0:0	6	j
op	25:22	0:0	6	++
stmts	25:26	32:8	5	
water	25:26	0:0	6	{
water	26:12	0:0	6	d
op	26:14	0:0	6	=
water	26:16	0:0	6	in
op	26:18	0:0	6	[
water	26:19	0:0	6	16
op	26:21	0:0	6	+
water	26:22	0:0	6	i
op	26:23	0:0	6	+
water	26:24	0:0	6	j
op	26:25	0:0	6	*
water	26:26	0:0	6	4
op	26:27	0:0	6	]
water	26:28	0:0	6	;
water	27:12	0:0	6	t
op	27:14	0:0	6	=
call	27:16	27:32	6	sign_extend
arg	27:28	27:29	7	d
water	27:28	0:0	8	d
arg	27:31	27:32	7	4
water	27:31	0:0	8	4
water	27:33	0:0	6	;
water	28:12	0:0	6	s
op	28:14	0:0	6	=
water	28:16	0:0	6	(
water	28:18	0:0	6	t
op	28:19	0:0	6	<<
water	28:21	0:0	6	shift
water	28:27	0:0	6	)
op	28:29	0:0	6	+
water	28:31	0:0	6	(
water	28:32	0:0	6	(
water	28:33	0:0	6	s_1
op	28:36	0:0	6	*
water	28:37	0:0	6	f0
op	28:40	0:0	6	+
water	28:42	0:0	6	s_2
op	28:45	0:0	6	*
water	28:46	0:0	6	f1
op	28:48	0:0	6	+
water	28:49	0:0	6	32
water	28:51	0:0	6	)
op	28:52	0:0	6	>>
water	28:54	0:0	6	6
water	28:55	0:0	6	)
water	28:56	0:0	6	;
water	29:12	0:0	6	s_2
op	29:16	0:0	6	=
water	29:18	0:0	6	s_1
water	29:21	0:0	6	;
water	30:12	0:0	6	s_1
op	30:16	0:0	6	=
call	30:18	30:33	6	av_clip_int16
arg	30:32	30:33	7	s
water	30:32	0:0	8	s
water	30:34	0:0	6	;
water	31:12	0:0	6	out0
op	31:16	0:0	6	[
water	31:17	0:0	6	j
op	31:18	0:0	6	]
op	31:20	0:0	6	=
water	31:22	0:0	6	s_1
water	31:25	0:0	6	;
water	32:8	0:0	6	}
if	33:8	38:8	4	(channels == 2)
cond	33:12	33:24	5	channels == 2
water	33:12	0:0	6	channels
op	33:21	0:0	6	==
water	33:24	0:0	6	2
stmts	33:27	38:8	5	
water	33:27	0:0	6	{
water	34:12	0:0	6	left
op	34:16	0:0	6	->
water	34:18	0:0	6	sample1
op	34:26	0:0	6	=
water	34:28	0:0	6	s_1
water	34:31	0:0	6	;
water	35:12	0:0	6	left
op	35:16	0:0	6	->
water	35:18	0:0	6	sample2
op	35:26	0:0	6	=
water	35:28	0:0	6	s_2
water	35:31	0:0	6	;
water	36:12	0:0	6	s_1
op	36:16	0:0	6	=
water	36:18	0:0	6	right
op	36:23	0:0	6	->
water	36:25	0:0	6	sample1
water	36:32	0:0	6	;
water	37:12	0:0	6	s_2
op	37:16	0:0	6	=
water	37:18	0:0	6	right
op	37:23	0:0	6	->
water	37:25	0:0	6	sample2
water	37:32	0:0	6	;
water	38:8	0:0	6	}
water	39:8	0:0	4	shift
op	39:15	0:0	4	=
water	39:17	0:0	4	12
op	39:20	0:0	4	-
water	39:22	0:0	4	(
water	39:23	0:0	4	in
op	39:25	0:0	4	[
water	39:26	0:0	4	5
op	39:27	0:0	4	+
water	39:28	0:0	4	i
op	39:29	0:0	4	*
water	39:30	0:0	4	2
op	39:31	0:0	4	]
op	39:33	0:0	4	&
water	39:35	0:0	4	15
water	39:37	0:0	4	)
water	39:38	0:0	4	;
water	40:8	0:0	4	filter
op	40:15	0:0	4	=
water	40:17	0:0	4	in
op	40:19	0:0	4	[
water	40:20	0:0	4	5
op	40:21	0:0	4	+
water	40:22	0:0	4	i
op	40:23	0:0	4	*
water	40:24	0:0	4	2
op	40:25	0:0	4	]
op	40:27	0:0	4	>>
water	40:30	0:0	4	4
water	40:31	0:0	4	;
if	41:8	44:8	4	(filter >=FF_ARRAY_ELEMS (xa_adpcm_table ))
cond	41:12	41:51	5	filter >=FF_ARRAY_ELEMS (xa_adpcm_table )
water	41:12	0:0	6	filter
op	41:19	0:0	6	>=
call	41:22	41:51	6	FF_ARRAY_ELEMS
arg	41:37	41:51	7	xa_adpcm_table
water	41:37	0:0	8	xa_adpcm_table
stmts	41:54	44:8	5	
water	41:54	0:0	6	{
call	42:12	42:77	6	avpriv_request_sample
arg	42:34	42:39	7	avctx
water	42:34	0:0	8	avctx
arg	42:41	42:69	7	"unknown XA-ADPCM filter %d"
water	42:41	0:0	8	"unknown XA-ADPCM filter %d"
arg	42:71	42:77	7	filter
water	42:71	0:0	8	filter
water	42:78	0:0	6	;
water	43:12	0:0	6	filter
op	43:18	0:0	6	=
water	43:19	0:0	6	0
water	43:20	0:0	6	;
water	44:8	0:0	6	}
water	45:8	0:0	4	f0
op	45:11	0:0	4	=
water	45:13	0:0	4	xa_adpcm_table
op	45:27	0:0	4	[
water	45:28	0:0	4	filter
op	45:34	0:0	4	]
op	45:35	0:0	4	[
water	45:36	0:0	4	0
op	45:37	0:0	4	]
water	45:38	0:0	4	;
water	46:8	0:0	4	f1
op	46:11	0:0	4	=
water	46:13	0:0	4	xa_adpcm_table
op	46:27	0:0	4	[
water	46:28	0:0	4	filter
op	46:34	0:0	4	]
op	46:35	0:0	4	[
water	46:36	0:0	4	1
op	46:37	0:0	4	]
water	46:38	0:0	4	;
for	47:8	54:8	4	(j = 0 ;j < 28;j ++)
forinit	47:12	47:15	5	j = 0 ;
water	47:12	0:0	6	j
op	47:13	0:0	6	=
water	47:14	0:0	6	0
water	47:15	0:0	6	;
cond	47:16	47:18	5	j < 28
water	47:16	0:0	6	j
op	47:17	0:0	6	<
water	47:18	0:0	6	28
forexpr	47:21	47:22	5	j ++
water	47:21	0:0	6	j
op	47:22	0:0	6	++
stmts	47:26	54:8	5	
water	47:26	0:0	6	{
water	48:12	0:0	6	d
op	48:14	0:0	6	=
water	48:16	0:0	6	in
op	48:18	0:0	6	[
water	48:19	0:0	6	16
op	48:21	0:0	6	+
water	48:22	0:0	6	i
op	48:23	0:0	6	+
water	48:24	0:0	6	j
op	48:25	0:0	6	*
water	48:26	0:0	6	4
op	48:27	0:0	6	]
water	48:28	0:0	6	;
water	49:12	0:0	6	t
op	49:14	0:0	6	=
call	49:16	49:37	6	sign_extend
arg	49:28	49:34	7	d>>4
water	49:28	0:0	8	d
op	49:30	0:0	8	>>
water	49:33	0:0	8	4
arg	49:36	49:37	7	4
water	49:36	0:0	8	4
water	49:38	0:0	6	;
water	50:12	0:0	6	s
op	50:14	0:0	6	=
water	50:16	0:0	6	(
water	50:18	0:0	6	t
op	50:19	0:0	6	<<
water	50:21	0:0	6	shift
water	50:27	0:0	6	)
op	50:29	0:0	6	+
water	50:31	0:0	6	(
water	50:32	0:0	6	(
water	50:33	0:0	6	s_1
op	50:36	0:0	6	*
water	50:37	0:0	6	f0
op	50:40	0:0	6	+
water	50:42	0:0	6	s_2
op	50:45	0:0	6	*
water	50:46	0:0	6	f1
op	50:48	0:0	6	+
water	50:49	0:0	6	32
water	50:51	0:0	6	)
op	50:52	0:0	6	>>
water	50:54	0:0	6	6
water	50:55	0:0	6	)
water	50:56	0:0	6	;
water	51:12	0:0	6	s_2
op	51:16	0:0	6	=
water	51:18	0:0	6	s_1
water	51:21	0:0	6	;
water	52:12	0:0	6	s_1
op	52:16	0:0	6	=
call	52:18	52:33	6	av_clip_int16
arg	52:32	52:33	7	s
water	52:32	0:0	8	s
water	52:34	0:0	6	;
water	53:12	0:0	6	out1
op	53:16	0:0	6	[
water	53:17	0:0	6	j
op	53:18	0:0	6	]
op	53:20	0:0	6	=
water	53:22	0:0	6	s_1
water	53:25	0:0	6	;
water	54:8	0:0	6	}
if	55:8	58:8	4	(channels == 2)
cond	55:12	55:24	5	channels == 2
water	55:12	0:0	6	channels
op	55:21	0:0	6	==
water	55:24	0:0	6	2
stmts	55:27	58:8	5	
water	55:27	0:0	6	{
water	56:12	0:0	6	right
op	56:17	0:0	6	->
water	56:19	0:0	6	sample1
op	56:27	0:0	6	=
water	56:29	0:0	6	s_1
water	56:32	0:0	6	;
water	57:12	0:0	6	right
op	57:17	0:0	6	->
water	57:19	0:0	6	sample2
op	57:27	0:0	6	=
water	57:29	0:0	6	s_2
water	57:32	0:0	6	;
water	58:8	0:0	6	}
else	58:10	61:8	4
stmts	58:15	61:8	5	
water	58:15	0:0	6	{
water	59:12	0:0	6	left
op	59:16	0:0	6	->
water	59:18	0:0	6	sample1
op	59:26	0:0	6	=
water	59:28	0:0	6	s_1
water	59:31	0:0	6	;
water	60:12	0:0	6	left
op	60:16	0:0	6	->
water	60:18	0:0	6	sample2
op	60:26	0:0	6	=
water	60:28	0:0	6	s_2
water	60:31	0:0	6	;
water	61:8	0:0	6	}
water	62:8	0:0	4	out0
op	62:13	0:0	4	+=
water	62:16	0:0	4	28
op	62:19	0:0	4	*
water	62:21	0:0	4	(
water	62:22	0:0	4	3
op	62:24	0:0	4	-
water	62:26	0:0	4	channels
water	62:34	0:0	4	)
water	62:35	0:0	4	;
water	63:8	0:0	4	out1
op	63:13	0:0	4	+=
water	63:16	0:0	4	28
op	63:19	0:0	4	*
water	63:21	0:0	4	(
water	63:22	0:0	4	3
op	63:24	0:0	4	-
water	63:26	0:0	4	channels
water	63:34	0:0	4	)
water	63:35	0:0	4	;
water	64:4	0:0	4	}
return	65:4	65:12	2	0
water	65:11	0:0	3	0
