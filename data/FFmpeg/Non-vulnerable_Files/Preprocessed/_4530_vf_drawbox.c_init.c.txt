decl	1:7	1:35	0	const int	NUM_EXPR_EVALS
op	1:32	0:0	0	=
water	1:34	0:0	0	5
func	2:15	17:0	0	int	init
params	2:23	0:0	1	
param	2:24	2:44	2	AVFilterContext *	ctx
stmnts	0:0	16:12	1	
decl	4:4	4:33	2	DrawBoxContext	*s
op	4:22	0:0	2	=
water	4:24	0:0	2	ctx
op	4:27	0:0	2	->
water	4:29	0:0	2	priv
decl	5:4	5:25	2	uint8_t	rgba_color[4]
if	6:4	7:27	2	(!strcmp (s -> color_str ,"invert" ))
cond	6:8	6:38	3	!strcmp (s -> color_str ,"invert" )
op	6:8	0:0	4	!
call	6:9	6:38	4	strcmp
arg	6:16	6:28	5	s->color_str
water	6:16	0:0	6	s
op	6:17	0:0	6	->
water	6:19	0:0	6	color_str
arg	6:30	6:38	5	"invert"
water	6:30	0:0	6	"invert"
stmts	7:8	7:27	3	
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	invert_color
op	7:24	0:0	4	=
water	7:26	0:0	4	1
water	7:27	0:0	4	;
else	8:4	9:30	2
stmts	8:9	9:30	3	
if	8:9	9:30	4	(av_parse_color (rgba_color ,s -> color_str ,- 1 ,ctx ) < 0)
cond	8:13	8:65	5	av_parse_color (rgba_color ,s -> color_str ,- 1 ,ctx ) < 0
call	8:13	8:61	6	av_parse_color
arg	8:28	8:38	7	rgba_color
water	8:28	0:0	8	rgba_color
arg	8:40	8:52	7	s->color_str
water	8:40	0:0	8	s
op	8:41	0:0	8	->
water	8:43	0:0	8	color_str
arg	8:54	8:56	7	-1
op	8:54	0:0	8	-
water	8:55	0:0	8	1
arg	8:58	8:61	7	ctx
water	8:58	0:0	8	ctx
op	8:63	0:0	6	<
water	8:65	0:0	6	0
stmts	9:8	9:30	5	
return	9:8	9:30	6	AVERROR(EINVAL)
call	9:15	9:29	7	AVERROR
arg	9:23	9:29	8	EINVAL
water	9:23	0:0	9	EINVAL
if	10:4	15:4	2	(! s -> invert_color)
cond	10:8	10:12	3	! s -> invert_color
op	10:8	0:0	4	!
water	10:9	0:0	4	s
op	10:10	0:0	4	->
water	10:12	0:0	4	invert_color
stmts	10:26	15:4	3	
water	10:26	0:0	4	{
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	yuv_color
op	11:20	0:0	4	[
water	11:21	0:0	4	Y
op	11:22	0:0	4	]
op	11:24	0:0	4	=
call	11:26	11:83	4	RGB_TO_Y_CCIR
arg	11:40	11:53	5	rgba_color[0]
water	11:40	0:0	6	rgba_color
op	11:50	0:0	6	[
water	11:51	0:0	6	0
op	11:52	0:0	6	]
arg	11:55	11:68	5	rgba_color[1]
water	11:55	0:0	6	rgba_color
op	11:65	0:0	6	[
water	11:66	0:0	6	1
op	11:67	0:0	6	]
arg	11:70	11:83	5	rgba_color[2]
water	11:70	0:0	6	rgba_color
op	11:80	0:0	6	[
water	11:81	0:0	6	2
op	11:82	0:0	6	]
water	11:84	0:0	4	;
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	yuv_color
op	12:20	0:0	4	[
water	12:21	0:0	4	U
op	12:22	0:0	4	]
op	12:24	0:0	4	=
call	12:26	12:86	4	RGB_TO_U_CCIR
arg	12:40	12:53	5	rgba_color[0]
water	12:40	0:0	6	rgba_color
op	12:50	0:0	6	[
water	12:51	0:0	6	0
op	12:52	0:0	6	]
arg	12:55	12:68	5	rgba_color[1]
water	12:55	0:0	6	rgba_color
op	12:65	0:0	6	[
water	12:66	0:0	6	1
op	12:67	0:0	6	]
arg	12:70	12:83	5	rgba_color[2]
water	12:70	0:0	6	rgba_color
op	12:80	0:0	6	[
water	12:81	0:0	6	2
op	12:82	0:0	6	]
arg	12:85	12:86	5	0
water	12:85	0:0	6	0
water	12:87	0:0	4	;
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	yuv_color
op	13:20	0:0	4	[
water	13:21	0:0	4	V
op	13:22	0:0	4	]
op	13:24	0:0	4	=
call	13:26	13:86	4	RGB_TO_V_CCIR
arg	13:40	13:53	5	rgba_color[0]
water	13:40	0:0	6	rgba_color
op	13:50	0:0	6	[
water	13:51	0:0	6	0
op	13:52	0:0	6	]
arg	13:55	13:68	5	rgba_color[1]
water	13:55	0:0	6	rgba_color
op	13:65	0:0	6	[
water	13:66	0:0	6	1
op	13:67	0:0	6	]
arg	13:70	13:83	5	rgba_color[2]
water	13:70	0:0	6	rgba_color
op	13:80	0:0	6	[
water	13:81	0:0	6	2
op	13:82	0:0	6	]
arg	13:85	13:86	5	0
water	13:85	0:0	6	0
water	13:87	0:0	4	;
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	yuv_color
op	14:20	0:0	4	[
water	14:21	0:0	4	A
op	14:22	0:0	4	]
op	14:24	0:0	4	=
water	14:26	0:0	4	rgba_color
op	14:36	0:0	4	[
water	14:37	0:0	4	3
op	14:38	0:0	4	]
water	14:39	0:0	4	;
water	15:4	0:0	4	}
return	16:4	16:12	2	0
water	16:11	0:0	3	0
