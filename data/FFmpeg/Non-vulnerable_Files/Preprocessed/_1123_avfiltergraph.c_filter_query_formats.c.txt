func	1:0	35:0	0	static int	filter_query_formats
params	1:31	0:0	1	
param	1:32	1:52	2	AVFilterContext *	ctx
stmnts	0:0	34:12	1	
decl	3:4	3:14	2	int	ret
water	3:11	0:0	2	,
decl	3:4	3:14	2	int	i
decl	4:4	4:28	2	AVFilterFormats	*formats
decl	5:4	5:37	2	AVFilterChannelLayouts	*chlayouts
decl	6:4	6:32	2	AVFilterFormats	*samplerates
decl	7:4	9:46	2	enum AVMediaType	type
op	7:26	0:0	2	=
water	7:28	0:0	2	ctx
op	7:31	0:0	2	->
water	7:33	0:0	2	inputs
op	7:41	0:0	2	&&
water	7:44	0:0	2	ctx
op	7:47	0:0	2	->
water	7:49	0:0	2	inputs
op	7:56	0:0	2	[
water	7:57	0:0	2	0
op	7:58	0:0	2	]
water	7:60	0:0	2	?
water	7:62	0:0	2	ctx
op	7:65	0:0	2	->
water	7:67	0:0	2	inputs
op	7:74	0:0	2	[
water	7:75	0:0	2	0
op	7:76	0:0	2	]
op	7:77	0:0	2	->
water	7:79	0:0	2	type
water	7:84	0:0	2	:
water	8:28	0:0	2	ctx
op	8:31	0:0	2	->
water	8:33	0:0	2	outputs
op	8:41	0:0	2	&&
water	8:44	0:0	2	ctx
op	8:47	0:0	2	->
water	8:49	0:0	2	outputs
op	8:56	0:0	2	[
water	8:57	0:0	2	0
op	8:58	0:0	2	]
water	8:60	0:0	2	?
water	8:62	0:0	2	ctx
op	8:65	0:0	2	->
water	8:67	0:0	2	outputs
op	8:74	0:0	2	[
water	8:75	0:0	2	0
op	8:76	0:0	2	]
op	8:77	0:0	2	->
water	8:79	0:0	2	type
water	8:84	0:0	2	:
water	9:28	0:0	2	AVMEDIA_TYPE_VIDEO
if	10:4	15:4	2	(( ret =ctx -> filter -> query_formats (ctx ) ) < 0)
cond	10:8	10:50	3	( ret =ctx -> filter -> query_formats (ctx ) ) < 0
water	10:8	0:0	4	(
water	10:9	0:0	4	ret
op	10:13	0:0	4	=
call	10:15	10:45	4	ctx->filter->query_formats
arg	10:42	10:45	5	ctx
water	10:42	0:0	6	ctx
water	10:46	0:0	4	)
op	10:48	0:0	4	<
water	10:50	0:0	4	0
stmts	10:53	15:4	3	
water	10:53	0:0	4	{
if	11:8	13:46	4	(ret !=AVERROR (EAGAIN ))
cond	11:12	11:33	5	ret !=AVERROR (EAGAIN )
water	11:12	0:0	6	ret
op	11:16	0:0	6	!=
call	11:19	11:33	6	AVERROR
arg	11:27	11:33	7	EAGAIN
water	11:27	0:0	8	EAGAIN
stmts	12:12	13:46	5	
call	12:12	13:45	6	av_log
arg	12:19	12:22	7	ctx
water	12:19	0:0	8	ctx
arg	12:24	12:36	7	AV_LOG_ERROR
water	12:24	0:0	8	AV_LOG_ERROR
arg	12:38	12:74	7	"Query format failed for '%s': %s\n"
water	12:38	0:0	8	"Query format failed for '%s': %s\n"
arg	13:19	13:28	7	ctx->name
water	13:19	0:0	8	ctx
op	13:22	0:0	8	->
water	13:24	0:0	8	name
arg	13:30	13:45	7	av_err2str(ret)
call	13:30	13:44	8	av_err2str
arg	13:41	13:44	9	ret
water	13:41	0:0	10	ret
water	13:46	0:0	6	;
return	14:8	14:18	4	ret
water	14:15	0:0	5	ret
water	15:4	0:0	4	}
for	16:4	17:74	2	(i = 0 ;i < ctx -> nb_inputs;i ++)
forinit	16:9	16:14	3	i = 0 ;
water	16:9	0:0	4	i
op	16:11	0:0	4	=
water	16:13	0:0	4	0
water	16:14	0:0	4	;
cond	16:16	16:25	3	i < ctx -> nb_inputs
water	16:16	0:0	4	i
op	16:18	0:0	4	<
water	16:20	0:0	4	ctx
op	16:23	0:0	4	->
water	16:25	0:0	4	nb_inputs
forexpr	16:36	16:37	3	i ++
water	16:36	0:0	4	i
op	16:37	0:0	4	++
stmts	17:8	17:74	3	
call	17:8	17:73	4	sanitize_channel_layouts
arg	17:33	17:36	5	ctx
water	17:33	0:0	6	ctx
arg	17:38	17:73	5	ctx->inputs[i]->out_channel_layouts
water	17:38	0:0	6	ctx
op	17:41	0:0	6	->
water	17:43	0:0	6	inputs
op	17:49	0:0	6	[
water	17:50	0:0	6	i
op	17:51	0:0	6	]
op	17:52	0:0	6	->
water	17:54	0:0	6	out_channel_layouts
water	17:74	0:0	4	;
for	18:4	19:74	2	(i = 0 ;i < ctx -> nb_outputs;i ++)
forinit	18:9	18:14	3	i = 0 ;
water	18:9	0:0	4	i
op	18:11	0:0	4	=
water	18:13	0:0	4	0
water	18:14	0:0	4	;
cond	18:16	18:25	3	i < ctx -> nb_outputs
water	18:16	0:0	4	i
op	18:18	0:0	4	<
water	18:20	0:0	4	ctx
op	18:23	0:0	4	->
water	18:25	0:0	4	nb_outputs
forexpr	18:37	18:38	3	i ++
water	18:37	0:0	4	i
op	18:38	0:0	4	++
stmts	19:8	19:74	3	
call	19:8	19:73	4	sanitize_channel_layouts
arg	19:33	19:36	5	ctx
water	19:33	0:0	6	ctx
arg	19:38	19:73	5	ctx->outputs[i]->in_channel_layouts
water	19:38	0:0	6	ctx
op	19:41	0:0	6	->
water	19:43	0:0	6	outputs
op	19:50	0:0	6	[
water	19:51	0:0	6	i
op	19:52	0:0	6	]
op	19:53	0:0	6	->
water	19:55	0:0	6	in_channel_layouts
water	19:74	0:0	4	;
water	20:4	0:0	2	formats
op	20:12	0:0	2	=
call	20:14	20:33	2	ff_all_formats
arg	20:29	20:33	3	type
water	20:29	0:0	4	type
water	20:34	0:0	2	;
if	21:4	22:30	2	(! formats)
cond	21:8	21:9	3	! formats
op	21:8	0:0	4	!
water	21:9	0:0	4	formats
stmts	22:8	22:30	3	
return	22:8	22:30	4	AVERROR(ENOMEM)
call	22:15	22:29	5	AVERROR
arg	22:23	22:29	6	ENOMEM
water	22:23	0:0	7	ENOMEM
call	23:4	23:38	2	ff_set_common_formats
arg	23:26	23:29	3	ctx
water	23:26	0:0	4	ctx
arg	23:31	23:38	3	formats
water	23:31	0:0	4	formats
water	23:39	0:0	2	;
if	24:4	33:4	2	(type == AVMEDIA_TYPE_AUDIO)
cond	24:8	24:16	3	type == AVMEDIA_TYPE_AUDIO
water	24:8	0:0	4	type
op	24:13	0:0	4	==
water	24:16	0:0	4	AVMEDIA_TYPE_AUDIO
stmts	24:36	33:4	3	
water	24:36	0:0	4	{
water	25:8	0:0	4	samplerates
op	25:20	0:0	4	=
call	25:22	25:41	4	ff_all_samplerates
water	25:42	0:0	4	;
if	26:8	27:34	4	(! samplerates)
cond	26:12	26:13	5	! samplerates
op	26:12	0:0	6	!
water	26:13	0:0	6	samplerates
stmts	27:12	27:34	5	
return	27:12	27:34	6	AVERROR(ENOMEM)
call	27:19	27:33	7	AVERROR
arg	27:27	27:33	8	ENOMEM
water	27:27	0:0	9	ENOMEM
call	28:8	28:50	4	ff_set_common_samplerates
arg	28:34	28:37	5	ctx
water	28:34	0:0	6	ctx
arg	28:39	28:50	5	samplerates
water	28:39	0:0	6	samplerates
water	28:51	0:0	4	;
water	29:8	0:0	4	chlayouts
op	29:18	0:0	4	=
call	29:20	29:43	4	ff_all_channel_layouts
water	29:44	0:0	4	;
if	30:8	31:34	4	(! chlayouts)
cond	30:12	30:13	5	! chlayouts
op	30:12	0:0	6	!
water	30:13	0:0	6	chlayouts
stmts	31:12	31:34	5	
return	31:12	31:34	6	AVERROR(ENOMEM)
call	31:19	31:33	7	AVERROR
arg	31:27	31:33	8	ENOMEM
water	31:27	0:0	9	ENOMEM
call	32:8	32:52	4	ff_set_common_channel_layouts
arg	32:38	32:41	5	ctx
water	32:38	0:0	6	ctx
arg	32:43	32:52	5	chlayouts
water	32:43	0:0	6	chlayouts
water	32:53	0:0	4	;
water	33:4	0:0	4	}
return	34:4	34:12	2	0
water	34:11	0:0	3	0
