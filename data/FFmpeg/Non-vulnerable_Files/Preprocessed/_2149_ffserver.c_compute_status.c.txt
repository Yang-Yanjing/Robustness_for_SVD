func	1:0	208:0	0	static void	compute_status
params	1:26	0:0	1	
param	1:27	1:41	2	HTTPContext *	c
stmnts	0:0	207:38	1	
decl	3:4	3:19	2	HTTPContext	*c1
decl	4:4	4:26	2	FFServerStream	*stream
decl	5:4	5:11	2	char	*p
decl	6:4	6:13	2	time_t	ti
decl	7:4	7:14	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:14	2	int	len
decl	8:4	8:19	2	AVIOContext	*pb
if	9:4	14:4	2	(avio_open_dyn_buf (& pb ) < 0)
cond	9:8	9:33	3	avio_open_dyn_buf (& pb ) < 0
call	9:8	9:29	4	avio_open_dyn_buf
arg	9:26	9:29	5	&pb
op	9:26	0:0	6	&
water	9:27	0:0	6	pb
op	9:31	0:0	4	<
water	9:33	0:0	4	0
stmts	9:36	14:4	3	
water	9:36	0:0	4	{
water	11:8	0:0	4	c
op	11:9	0:0	4	->
water	11:11	0:0	4	buffer_ptr
op	11:22	0:0	4	=
water	11:24	0:0	4	c
op	11:25	0:0	4	->
water	11:27	0:0	4	buffer
water	11:33	0:0	4	;
water	12:8	0:0	4	c
op	12:9	0:0	4	->
water	12:11	0:0	4	buffer_end
op	12:22	0:0	4	=
water	12:24	0:0	4	c
op	12:25	0:0	4	->
water	12:27	0:0	4	buffer
water	12:33	0:0	4	;
return	13:8	13:14	4	
water	14:4	0:0	4	}
call	15:4	15:41	2	avio_printf
arg	15:16	15:18	3	pb
water	15:16	0:0	4	pb
arg	15:20	15:41	3	"HTTP/1.0 200 OK\r\n"
water	15:20	0:0	4	"HTTP/1.0 200 OK\r\n"
water	15:42	0:0	2	;
call	16:4	16:49	2	avio_printf
arg	16:16	16:18	3	pb
water	16:16	0:0	4	pb
arg	16:20	16:49	3	"Content-type: text/html\r\n"
water	16:20	0:0	4	"Content-type: text/html\r\n"
water	16:50	0:0	2	;
call	17:4	17:42	2	avio_printf
arg	17:16	17:18	3	pb
water	17:16	0:0	4	pb
arg	17:20	17:42	3	"Pragma: no-cache\r\n"
water	17:20	0:0	4	"Pragma: no-cache\r\n"
water	17:43	0:0	2	;
call	18:4	18:26	2	avio_printf
arg	18:16	18:18	3	pb
water	18:16	0:0	4	pb
arg	18:20	18:26	3	"\r\n"
water	18:20	0:0	4	"\r\n"
water	18:27	0:0	2	;
call	19:4	19:39	2	avio_printf
arg	19:16	19:18	3	pb
water	19:16	0:0	4	pb
arg	19:20	19:39	3	"<!DOCTYPE html>\n"
water	19:20	0:0	4	"<!DOCTYPE html>\n"
water	19:40	0:0	2	;
call	20:4	20:74	2	avio_printf
arg	20:16	20:18	3	pb
water	20:16	0:0	4	pb
arg	20:20	20:60	3	"<html><head><title>%s Status</title>\n"
water	20:20	0:0	4	"<html><head><title>%s Status</title>\n"
arg	20:62	20:74	3	program_name
water	20:62	0:0	4	program_name
water	20:75	0:0	2	;
if	21:4	23:45	2	(c -> stream -> feed_filename [ 0 ])
cond	21:8	21:34	3	c -> stream -> feed_filename [ 0 ]
water	21:8	0:0	4	c
op	21:9	0:0	4	->
water	21:11	0:0	4	stream
op	21:17	0:0	4	->
water	21:19	0:0	4	feed_filename
op	21:32	0:0	4	[
water	21:33	0:0	4	0
op	21:34	0:0	4	]
stmts	22:8	23:45	3	
call	22:8	23:44	4	avio_printf
arg	22:20	22:22	5	pb
water	22:20	0:0	6	pb
arg	22:24	22:68	5	"<link rel=\"shortcut icon\" href=\"%s\">\n"
water	22:24	0:0	6	"<link rel=\"shortcut icon\" href=\"%s\">\n"
arg	23:20	23:44	5	c->stream->feed_filename
water	23:20	0:0	6	c
op	23:21	0:0	6	->
water	23:23	0:0	6	stream
op	23:29	0:0	6	->
water	23:31	0:0	6	feed_filename
water	23:45	0:0	4	;
call	24:4	24:37	2	avio_printf
arg	24:16	24:18	3	pb
water	24:16	0:0	4	pb
arg	24:20	24:37	3	"</head>\n<body>"
water	24:20	0:0	4	"</head>\n<body>"
water	24:38	0:0	2	;
call	25:4	25:56	2	avio_printf
arg	25:16	25:18	3	pb
water	25:16	0:0	4	pb
arg	25:20	25:42	3	"<h1>%s Status</h1>\n"
water	25:20	0:0	4	"<h1>%s Status</h1>\n"
arg	25:44	25:56	3	program_name
water	25:44	0:0	4	program_name
water	25:57	0:0	2	;
call	27:4	27:50	2	avio_printf
arg	27:16	27:18	3	pb
water	27:16	0:0	4	pb
arg	27:20	27:50	3	"<h2>Available Streams</h2>\n"
water	27:20	0:0	4	"<h2>Available Streams</h2>\n"
water	27:51	0:0	2	;
call	28:4	28:31	2	avio_printf
arg	28:16	28:18	3	pb
water	28:16	0:0	4	pb
arg	28:20	28:31	3	"<table>\n"
water	28:20	0:0	4	"<table>\n"
water	28:32	0:0	2	;
call	29:4	29:172	2	avio_printf
arg	29:16	29:18	3	pb
water	29:16	0:0	4	pb
arg	29:20	29:172	3	"<tr><th>Path<th>Served<br>Conns<th><br>bytes<th>Format<th>Bit rate<br>kbit/s<th>Video<br>kbit/s<th><br>Codec<th>Audio<br>kbit/s<th><br>Codec<th>Feed\n"
water	29:20	0:0	4	"<tr><th>Path<th>Served<br>Conns<th><br>bytes<th>Format<th>Bit rate<br>kbit/s<th>Video<br>kbit/s<th><br>Codec<th>Audio<br>kbit/s<th><br>Codec<th>Feed\n"
water	29:173	0:0	2	;
water	30:4	0:0	2	stream
op	30:11	0:0	2	=
water	30:13	0:0	2	config
op	30:19	0:0	2	.
water	30:20	0:0	2	first_stream
water	30:32	0:0	2	;
while	31:4	119:4	2	(stream)
cond	31:11	31:11	3	stream
water	31:11	0:0	4	stream
stmts	31:19	119:4	3	
water	31:19	0:0	4	{
decl	32:8	32:28	4	char	sfilename[1024]
decl	33:8	33:18	4	char	*eosf
if	34:8	37:8	4	(stream -> feed == stream)
cond	34:12	34:28	5	stream -> feed == stream
water	34:12	0:0	6	stream
op	34:18	0:0	6	->
water	34:20	0:0	6	feed
op	34:25	0:0	6	==
water	34:28	0:0	6	stream
stmts	34:36	37:8	5	
water	34:36	0:0	6	{
water	35:12	0:0	6	stream
op	35:19	0:0	6	=
water	35:21	0:0	6	stream
op	35:27	0:0	6	->
water	35:29	0:0	6	next
water	35:33	0:0	6	;
continue	36:12	36:20	6	
water	37:8	0:0	6	}
call	38:8	38:70	4	av_strlcpy
arg	38:19	38:28	5	sfilename
water	38:19	0:0	6	sfilename
arg	38:30	38:46	5	stream->filename
water	38:30	0:0	6	stream
op	38:36	0:0	6	->
water	38:38	0:0	6	filename
arg	38:48	38:70	5	sizeof(sfilename)-10
op	38:48	0:0	6	sizeof
water	38:54	0:0	6	(
water	38:55	0:0	6	sfilename
water	38:64	0:0	6	)
op	38:66	0:0	6	-
water	38:68	0:0	6	10
water	38:71	0:0	4	;
water	39:8	0:0	4	eosf
op	39:13	0:0	4	=
water	39:15	0:0	4	sfilename
op	39:25	0:0	4	+
call	39:27	39:43	4	strlen
arg	39:34	39:43	5	sfilename
water	39:34	0:0	6	sfilename
water	39:44	0:0	4	;
if	40:8	57:8	4	(eosf - sfilename >= 4)
cond	40:12	40:32	5	eosf - sfilename >= 4
water	40:12	0:0	6	eosf
op	40:17	0:0	6	-
water	40:19	0:0	6	sfilename
op	40:29	0:0	6	>=
water	40:32	0:0	6	4
stmts	40:35	57:8	5	
water	40:35	0:0	6	{
if	41:12	42:40	6	(strcmp (eosf - 4 ,".asf" ) == 0)
cond	41:16	41:44	7	strcmp (eosf - 4 ,".asf" ) == 0
call	41:16	41:39	8	strcmp
arg	41:23	41:31	9	eosf-4
water	41:23	0:0	10	eosf
op	41:28	0:0	10	-
water	41:30	0:0	10	4
arg	41:33	41:39	9	".asf"
water	41:33	0:0	10	".asf"
op	41:41	0:0	8	==
water	41:44	0:0	8	0
stmts	42:16	42:40	7	
call	42:16	42:39	8	strcpy
arg	42:23	42:31	9	eosf-4
water	42:23	0:0	10	eosf
op	42:28	0:0	10	-
water	42:30	0:0	10	4
arg	42:33	42:39	9	".asx"
water	42:33	0:0	10	".asx"
water	42:40	0:0	8	;
else	43:12	44:40	6
stmts	43:17	44:40	7	
if	43:17	44:40	8	(strcmp (eosf - 3 ,".rm" ) == 0)
cond	43:21	43:48	9	strcmp (eosf - 3 ,".rm" ) == 0
call	43:21	43:43	10	strcmp
arg	43:28	43:36	11	eosf-3
water	43:28	0:0	12	eosf
op	43:33	0:0	12	-
water	43:35	0:0	12	3
arg	43:38	43:43	11	".rm"
water	43:38	0:0	12	".rm"
op	43:45	0:0	10	==
water	43:48	0:0	10	0
stmts	44:16	44:40	9	
call	44:16	44:39	10	strcpy
arg	44:23	44:31	11	eosf-3
water	44:23	0:0	12	eosf
op	44:28	0:0	12	-
water	44:30	0:0	12	3
arg	44:33	44:39	11	".ram"
water	44:33	0:0	12	".ram"
water	44:40	0:0	10	;
else	45:12	56:12	6
stmts	45:17	56:12	7	
if	45:17	56:12	8	(stream -> fmt && !strcmp (stream -> fmt -> name ,"rtp" ))
cond	45:21	45:68	9	stream -> fmt && !strcmp (stream -> fmt -> name ,"rtp" )
water	45:21	0:0	10	stream
op	45:27	0:0	10	->
water	45:29	0:0	10	fmt
op	45:33	0:0	10	&&
op	45:36	0:0	10	!
call	45:37	45:68	10	strcmp
arg	45:44	45:61	11	stream->fmt->name
water	45:44	0:0	12	stream
op	45:50	0:0	12	->
water	45:52	0:0	12	fmt
op	45:55	0:0	12	->
water	45:57	0:0	12	name
arg	45:63	45:68	11	"rtp"
water	45:63	0:0	12	"rtp"
stmts	45:71	56:12	9	
water	45:71	0:0	10	{
water	49:16	0:0	10	eosf
op	49:21	0:0	10	=
call	49:23	49:45	10	strrchr
arg	49:31	49:40	11	sfilename
water	49:31	0:0	12	sfilename
arg	49:42	49:45	11	'.'
water	49:42	0:0	12	'.'
water	49:46	0:0	10	;
if	50:16	51:56	10	(! eosf)
cond	50:20	50:21	11	! eosf
op	50:20	0:0	12	!
water	50:21	0:0	12	eosf
stmts	51:20	51:56	11	
water	51:20	0:0	12	eosf
op	51:25	0:0	12	=
water	51:27	0:0	12	sfilename
op	51:37	0:0	12	+
call	51:39	51:55	12	strlen
arg	51:46	51:55	13	sfilename
water	51:46	0:0	14	sfilename
water	51:56	0:0	12	;
if	52:16	53:40	10	(stream -> is_multicast)
cond	52:20	52:28	11	stream -> is_multicast
water	52:20	0:0	12	stream
op	52:26	0:0	12	->
water	52:28	0:0	12	is_multicast
stmts	53:20	53:40	11	
call	53:20	53:39	12	strcpy
arg	53:27	53:31	13	eosf
water	53:27	0:0	14	eosf
arg	53:33	53:39	13	".sdp"
water	53:33	0:0	14	".sdp"
water	53:40	0:0	12	;
else	54:16	55:41	10
stmts	55:20	55:41	11	
call	55:20	55:40	12	strcpy
arg	55:27	55:31	13	eosf
water	55:27	0:0	14	eosf
arg	55:33	55:40	13	".rtsp"
water	55:33	0:0	14	".rtsp"
water	55:41	0:0	12	;
water	56:12	0:0	10	}
water	57:8	0:0	6	}
call	58:8	59:47	4	avio_printf
arg	58:20	58:22	5	pb
water	58:20	0:0	6	pb
arg	58:24	58:57	5	"<tr><td><a href=\"/%s\">%s</a> "
water	58:24	0:0	6	"<tr><td><a href=\"/%s\">%s</a> "
arg	59:20	59:29	5	sfilename
water	59:20	0:0	6	sfilename
arg	59:31	59:47	5	stream->filename
water	59:31	0:0	6	stream
op	59:37	0:0	6	->
water	59:39	0:0	6	filename
water	59:48	0:0	4	;
call	60:8	61:40	4	avio_printf
arg	60:20	60:22	5	pb
water	60:20	0:0	6	pb
arg	60:24	60:39	5	"<td> %d <td> "
water	60:24	0:0	6	"<td> %d <td> "
arg	61:20	61:40	5	stream->conns_served
water	61:20	0:0	6	stream
op	61:26	0:0	6	->
water	61:28	0:0	6	conns_served
water	61:41	0:0	4	;
if	63:8	64:51	4	(! config . bitexact)
cond	63:12	63:20	5	! config . bitexact
op	63:12	0:0	6	!
water	63:13	0:0	6	config
op	63:19	0:0	6	.
water	63:20	0:0	6	bitexact
stmts	64:12	64:51	5	
call	64:12	64:50	6	fmt_bytecount
arg	64:26	64:28	7	pb
water	64:26	0:0	8	pb
arg	64:30	64:50	7	stream->bytes_served
water	64:30	0:0	8	stream
op	64:36	0:0	8	->
water	64:38	0:0	8	bytes_served
water	64:51	0:0	6	;
switch	65:8	117:8	4	(stream -> stream_type)
cond	65:15	65:23	5	stream -> stream_type
water	65:15	0:0	6	stream
op	65:21	0:0	6	->
water	65:23	0:0	6	stream_type
stmts	65:36	117:8	5	
water	65:36	0:0	6	{
label	66:8	66:29	6	case STREAM_TYPE_LIVE :
water	66:31	0:0	6	{
decl	67:12	67:34	6	int	audio_bit_rate
op	67:31	0:0	6	=
water	67:33	0:0	6	0
decl	68:12	68:34	6	int	video_bit_rate
op	68:31	0:0	6	=
water	68:33	0:0	6	0
decl	69:12	69:45	6	const char	*audio_codec_name
op	69:41	0:0	6	=
water	69:43	0:0	6	""
decl	70:12	70:45	6	const char	*video_codec_name
op	70:41	0:0	6	=
water	70:43	0:0	6	""
decl	71:12	71:51	6	const char	*audio_codec_name_extra
op	71:47	0:0	6	=
water	71:49	0:0	6	""
decl	72:12	72:51	6	const char	*video_codec_name_extra
op	72:47	0:0	6	=
water	72:49	0:0	6	""
for	73:12	99:12	6	(i = 0 ;i < stream -> nb_streams;i ++)
forinit	73:16	73:19	7	i = 0 ;
water	73:16	0:0	8	i
op	73:17	0:0	8	=
water	73:18	0:0	8	0
water	73:19	0:0	8	;
cond	73:20	73:30	7	i < stream -> nb_streams
water	73:20	0:0	8	i
op	73:21	0:0	8	<
water	73:22	0:0	8	stream
op	73:28	0:0	8	->
water	73:30	0:0	8	nb_streams
forexpr	73:41	73:42	7	i ++
water	73:41	0:0	8	i
op	73:42	0:0	8	++
stmts	73:46	99:12	7	
water	73:46	0:0	8	{
decl	74:16	74:56	8	LayeredAVStream	*st
op	74:36	0:0	8	=
water	74:38	0:0	8	stream
op	74:44	0:0	8	->
water	74:46	0:0	8	streams
op	74:53	0:0	8	[
water	74:54	0:0	8	i
op	74:55	0:0	8	]
decl	75:16	75:77	8	AVCodec	*codec
op	75:31	0:0	8	=
call	75:33	75:76	9	avcodec_find_encoder
arg	75:54	75:76	10	st->codecpar->codec_id
water	75:54	0:0	11	st
op	75:56	0:0	11	->
water	75:58	0:0	11	codecpar
op	75:66	0:0	11	->
water	75:68	0:0	11	codec_id
switch	76:16	98:16	8	(st -> codecpar -> codec_type)
cond	76:23	76:37	9	st -> codecpar -> codec_type
water	76:23	0:0	10	st
op	76:25	0:0	10	->
water	76:27	0:0	10	codecpar
op	76:35	0:0	10	->
water	76:37	0:0	10	codec_type
stmts	76:49	98:16	9	
water	76:49	0:0	10	{
label	77:16	77:39	10	case AVMEDIA_TYPE_AUDIO :
water	78:20	0:0	10	audio_bit_rate
op	78:35	0:0	10	+=
water	78:38	0:0	10	st
op	78:40	0:0	10	->
water	78:42	0:0	10	codecpar
op	78:50	0:0	10	->
water	78:52	0:0	10	bit_rate
water	78:60	0:0	10	;
if	79:20	83:20	10	(codec)
cond	79:24	79:24	11	codec
water	79:24	0:0	12	codec
stmts	79:31	83:20	11	
water	79:31	0:0	12	{
if	80:24	81:58	12	(* audio_codec_name)
cond	80:28	80:29	13	* audio_codec_name
op	80:28	0:0	14	*
water	80:29	0:0	14	audio_codec_name
stmts	81:28	81:58	13	
water	81:28	0:0	14	audio_codec_name_extra
op	81:51	0:0	14	=
water	81:53	0:0	14	"..."
water	81:58	0:0	14	;
water	82:24	0:0	12	audio_codec_name
op	82:41	0:0	12	=
water	82:43	0:0	12	codec
op	82:48	0:0	12	->
water	82:50	0:0	12	name
water	82:54	0:0	12	;
water	83:20	0:0	12	}
break	84:20	84:25	10	
label	85:16	85:39	10	case AVMEDIA_TYPE_VIDEO :
water	86:20	0:0	10	video_bit_rate
op	86:35	0:0	10	+=
water	86:38	0:0	10	st
op	86:40	0:0	10	->
water	86:42	0:0	10	codecpar
op	86:50	0:0	10	->
water	86:52	0:0	10	bit_rate
water	86:60	0:0	10	;
if	87:20	91:20	10	(codec)
cond	87:24	87:24	11	codec
water	87:24	0:0	12	codec
stmts	87:31	91:20	11	
water	87:31	0:0	12	{
if	88:24	89:58	12	(* video_codec_name)
cond	88:28	88:29	13	* video_codec_name
op	88:28	0:0	14	*
water	88:29	0:0	14	video_codec_name
stmts	89:28	89:58	13	
water	89:28	0:0	14	video_codec_name_extra
op	89:51	0:0	14	=
water	89:53	0:0	14	"..."
water	89:58	0:0	14	;
water	90:24	0:0	12	video_codec_name
op	90:41	0:0	12	=
water	90:43	0:0	12	codec
op	90:48	0:0	12	->
water	90:50	0:0	12	name
water	90:54	0:0	12	;
water	91:20	0:0	12	}
break	92:20	92:25	10	
label	93:16	93:38	10	case AVMEDIA_TYPE_DATA :
water	94:20	0:0	10	video_bit_rate
op	94:35	0:0	10	+=
water	94:38	0:0	10	st
op	94:40	0:0	10	->
water	94:42	0:0	10	codecpar
op	94:50	0:0	10	->
water	94:52	0:0	10	bit_rate
water	94:60	0:0	10	;
break	95:20	95:25	10	
label	96:16	96:23	10	default :
call	97:20	97:26	10	abort
water	97:27	0:0	10	;
water	98:16	0:0	10	}
water	99:12	0:0	8	}
call	100:12	105:64	6	avio_printf
arg	100:24	100:26	7	pb
water	100:24	0:0	8	pb
arg	100:28	101:43	7	"<td> %s <td> %d <td> %d <td> %s %s <td> ""%d <td> %s %s"
water	100:28	0:0	8	"<td> %s <td> %d <td> %d <td> %s %s <td> "
water	101:28	0:0	8	"%d <td> %s %s"
arg	102:24	102:41	7	stream->fmt->name
water	102:24	0:0	8	stream
op	102:30	0:0	8	->
water	102:32	0:0	8	fmt
op	102:35	0:0	8	->
water	102:37	0:0	8	name
arg	102:43	102:60	7	stream->bandwidth
water	102:43	0:0	8	stream
op	102:49	0:0	8	->
water	102:51	0:0	8	bandwidth
arg	103:24	103:45	7	video_bit_rate/1000
water	103:24	0:0	8	video_bit_rate
op	103:39	0:0	8	/
water	103:41	0:0	8	1000
arg	103:47	103:63	7	video_codec_name
water	103:47	0:0	8	video_codec_name
arg	104:24	104:46	7	video_codec_name_extra
water	104:24	0:0	8	video_codec_name_extra
arg	104:48	104:69	7	audio_bit_rate/1000
water	104:48	0:0	8	audio_bit_rate
op	104:63	0:0	8	/
water	104:65	0:0	8	1000
arg	105:24	105:40	7	audio_codec_name
water	105:24	0:0	8	audio_codec_name
arg	105:42	105:64	7	audio_codec_name_extra
water	105:42	0:0	8	audio_codec_name_extra
water	105:65	0:0	6	;
if	106:12	107:65	6	(stream -> feed)
cond	106:16	106:24	7	stream -> feed
water	106:16	0:0	8	stream
op	106:22	0:0	8	->
water	106:24	0:0	8	feed
stmts	107:16	107:65	7	
call	107:16	107:64	8	avio_printf
arg	107:28	107:30	9	pb
water	107:28	0:0	10	pb
arg	107:32	107:40	9	"<td>%s"
water	107:32	0:0	10	"<td>%s"
arg	107:42	107:64	9	stream->feed->filename
water	107:42	0:0	10	stream
op	107:48	0:0	10	->
water	107:50	0:0	10	feed
op	107:54	0:0	10	->
water	107:56	0:0	10	filename
water	107:65	0:0	8	;
else	108:12	109:64	6
stmts	109:16	109:64	7	
call	109:16	109:63	8	avio_printf
arg	109:28	109:30	9	pb
water	109:28	0:0	10	pb
arg	109:32	109:40	9	"<td>%s"
water	109:32	0:0	10	"<td>%s"
arg	109:42	109:63	9	stream->feed_filename
water	109:42	0:0	10	stream
op	109:48	0:0	10	->
water	109:50	0:0	10	feed_filename
water	109:64	0:0	8	;
call	110:12	110:32	6	avio_printf
arg	110:24	110:26	7	pb
water	110:24	0:0	8	pb
arg	110:28	110:32	7	"\n"
water	110:28	0:0	8	"\n"
water	110:33	0:0	6	;
water	111:8	0:0	6	}
break	112:12	112:17	6	
label	113:8	113:15	6	default :
call	114:12	115:54	6	avio_printf
arg	114:24	114:26	7	pb
water	114:24	0:0	8	pb
arg	114:28	115:54	7	"<td> - <td> - ""<td> - <td><td> - <td>\n"
water	114:28	0:0	8	"<td> - <td> - "
water	115:28	0:0	8	"<td> - <td><td> - <td>\n"
water	115:55	0:0	6	;
break	116:12	116:17	6	
water	117:8	0:0	6	}
water	118:8	0:0	4	stream
op	118:15	0:0	4	=
water	118:17	0:0	4	stream
op	118:23	0:0	4	->
water	118:25	0:0	4	next
water	118:29	0:0	4	;
water	119:4	0:0	4	}
call	120:4	120:32	2	avio_printf
arg	120:16	120:18	3	pb
water	120:16	0:0	4	pb
arg	120:20	120:32	3	"</table>\n"
water	120:20	0:0	4	"</table>\n"
water	120:33	0:0	2	;
water	121:4	0:0	2	stream
op	121:11	0:0	2	=
water	121:13	0:0	2	config
op	121:19	0:0	2	.
water	121:20	0:0	2	first_stream
water	121:32	0:0	2	;
while	122:4	155:4	2	(stream)
cond	122:11	122:11	3	stream
water	122:11	0:0	4	stream
stmts	122:19	155:4	3	
water	122:19	0:0	4	{
if	123:8	126:8	4	(stream -> feed != stream)
cond	123:12	123:28	5	stream -> feed != stream
water	123:12	0:0	6	stream
op	123:18	0:0	6	->
water	123:20	0:0	6	feed
op	123:25	0:0	6	!=
water	123:28	0:0	6	stream
stmts	123:36	126:8	5	
water	123:36	0:0	6	{
water	124:12	0:0	6	stream
op	124:19	0:0	6	=
water	124:21	0:0	6	stream
op	124:27	0:0	6	->
water	124:29	0:0	6	next
water	124:33	0:0	6	;
continue	125:12	125:20	6	
water	126:8	0:0	6	}
call	127:8	127:60	4	avio_printf
arg	127:20	127:22	5	pb
water	127:20	0:0	6	pb
arg	127:24	127:42	5	"<h2>Feed %s</h2>"
water	127:24	0:0	6	"<h2>Feed %s</h2>"
arg	127:44	127:60	5	stream->filename
water	127:44	0:0	6	stream
op	127:50	0:0	6	->
water	127:52	0:0	6	filename
water	127:61	0:0	4	;
if	128:8	152:8	4	(stream -> pid)
cond	128:12	128:20	5	stream -> pid
water	128:12	0:0	6	stream
op	128:18	0:0	6	->
water	128:20	0:0	6	pid
stmts	128:25	152:8	5	
water	128:25	0:0	6	{
call	129:12	129:80	6	avio_printf
arg	129:24	129:26	7	pb
water	129:24	0:0	8	pb
arg	129:28	129:57	7	"Running as pid %"PRId64".\n"
water	129:28	0:0	8	"Running as pid %"
water	129:46	0:0	8	PRId64
water	129:52	0:0	8	".\n"
arg	129:59	129:80	7	(int64_t)stream->pid
water	129:59	0:0	8	(
water	129:60	0:0	8	int64_t
water	129:67	0:0	8	)
water	129:69	0:0	8	stream
op	129:75	0:0	8	->
water	129:77	0:0	8	pid
water	129:81	0:0	6	;
water	131:12	0:0	6	{
decl	132:16	132:30	6	FILE	*pid_stat
decl	133:16	133:31	6	char	ps_cmd[64]
call	135:16	137:46	6	snprintf
arg	135:25	135:31	7	ps_cmd
water	135:25	0:0	8	ps_cmd
arg	135:33	135:47	7	sizeof(ps_cmd)
op	135:33	0:0	8	sizeof
water	135:39	0:0	8	(
water	135:40	0:0	8	ps_cmd
water	135:46	0:0	8	)
arg	136:25	136:73	7	"ps -o \"%%cpu,cputime\" --no-headers %"PRId64""
water	136:25	0:0	8	"ps -o \"%%cpu,cputime\" --no-headers %"
water	136:65	0:0	8	PRId64
water	136:71	0:0	8	""
arg	137:25	137:46	7	(int64_t)stream->pid
water	137:25	0:0	8	(
water	137:26	0:0	8	int64_t
water	137:33	0:0	8	)
water	137:35	0:0	8	stream
op	137:41	0:0	8	->
water	137:43	0:0	8	pid
water	137:47	0:0	6	;
water	138:17	0:0	6	pid_stat
op	138:26	0:0	6	=
call	138:28	138:45	6	popen
arg	138:34	138:40	7	ps_cmd
water	138:34	0:0	8	ps_cmd
arg	138:42	138:45	7	"r"
water	138:42	0:0	8	"r"
water	138:46	0:0	6	;
if	139:17	148:17	6	(pid_stat)
cond	139:21	139:21	7	pid_stat
water	139:21	0:0	8	pid_stat
stmts	139:31	148:17	7	
water	139:31	0:0	8	{
decl	140:21	140:37	8	char	cpuperc[10]
decl	141:21	141:37	8	char	cpuused[64]
if	142:21	146:21	8	(fscanf (pid_stat ,"%9s %63s" ,cpuperc ,cpuused ) == 2)
cond	142:25	142:75	9	fscanf (pid_stat ,"%9s %63s" ,cpuperc ,cpuused ) == 2
call	142:25	142:70	10	fscanf
arg	142:32	142:40	11	pid_stat
water	142:32	0:0	12	pid_stat
arg	142:42	142:52	11	"%9s %63s"
water	142:42	0:0	12	"%9s %63s"
arg	142:54	142:61	11	cpuperc
water	142:54	0:0	12	cpuperc
arg	142:63	142:70	11	cpuused
water	142:63	0:0	12	cpuused
op	142:72	0:0	10	==
water	142:75	0:0	10	2
stmts	142:78	146:21	9	
water	142:78	0:0	10	{
call	143:25	145:53	10	avio_printf
arg	143:37	143:39	11	pb
water	143:37	0:0	12	pb
arg	143:41	144:64	11	"Currently using %s%% of the cpu. ""Total time used %s.\n"
water	143:41	0:0	12	"Currently using %s%% of the cpu. "
water	144:41	0:0	12	"Total time used %s.\n"
arg	145:37	145:44	11	cpuperc
water	145:37	0:0	12	cpuperc
arg	145:46	145:53	11	cpuused
water	145:46	0:0	12	cpuused
water	145:54	0:0	10	;
water	146:21	0:0	10	}
call	147:21	147:36	8	fclose
arg	147:28	147:36	9	pid_stat
water	147:28	0:0	10	pid_stat
water	147:37	0:0	8	;
water	148:17	0:0	8	}
water	149:12	0:0	6	}
call	151:12	151:33	6	avio_printf
arg	151:24	151:26	7	pb
water	151:24	0:0	8	pb
arg	151:28	151:33	7	"<p>"
water	151:28	0:0	8	"<p>"
water	151:34	0:0	6	;
water	152:8	0:0	6	}
call	153:8	153:38	4	print_stream_params
arg	153:28	153:30	5	pb
water	153:28	0:0	6	pb
arg	153:32	153:38	5	stream
water	153:32	0:0	6	stream
water	153:39	0:0	4	;
water	154:8	0:0	4	stream
op	154:15	0:0	4	=
water	154:17	0:0	4	stream
op	154:23	0:0	4	->
water	154:25	0:0	4	next
water	154:29	0:0	4	;
water	155:4	0:0	4	}
call	157:4	157:50	2	avio_printf
arg	157:16	157:18	3	pb
water	157:16	0:0	4	pb
arg	157:20	157:50	3	"<h2>Connection Status</h2>\n"
water	157:20	0:0	4	"<h2>Connection Status</h2>\n"
water	157:51	0:0	2	;
call	158:4	159:57	2	avio_printf
arg	158:16	158:18	3	pb
water	158:16	0:0	4	pb
arg	158:20	158:58	3	"Number of connections: %d / %d<br>\n"
water	158:20	0:0	4	"Number of connections: %d / %d<br>\n"
arg	159:16	159:30	3	nb_connections
water	159:16	0:0	4	nb_connections
arg	159:32	159:57	3	config.nb_max_connections
water	159:32	0:0	4	config
op	159:38	0:0	4	.
water	159:39	0:0	4	nb_max_connections
water	159:58	0:0	2	;
call	160:4	161:55	2	avio_printf
arg	160:16	160:18	3	pb
water	160:16	0:0	4	pb
arg	160:20	160:69	3	"Bandwidth in use: %"PRIu64"k / %"PRIu64"k<br>\n"
water	160:20	0:0	4	"Bandwidth in use: %"
water	160:41	0:0	4	PRIu64
water	160:47	0:0	4	"k / %"
water	160:54	0:0	4	PRIu64
water	160:60	0:0	4	"k<br>\n"
arg	161:16	161:33	3	current_bandwidth
water	161:16	0:0	4	current_bandwidth
arg	161:35	161:55	3	config.max_bandwidth
water	161:35	0:0	4	config
op	161:41	0:0	4	.
water	161:42	0:0	4	max_bandwidth
water	161:56	0:0	2	;
call	162:4	162:31	2	avio_printf
arg	162:16	162:18	3	pb
water	162:16	0:0	4	pb
arg	162:20	162:31	3	"<table>\n"
water	162:20	0:0	4	"<table>\n"
water	162:32	0:0	2	;
call	163:4	164:66	2	avio_printf
arg	163:16	163:18	3	pb
water	163:16	0:0	4	pb
arg	163:20	164:66	3	"<tr><th>#<th>File<th>IP<th>URL<th>Proto<th>State<th>Target ""bit/s<th>Actual bit/s<th>Bytes transferred\n"
water	163:20	0:0	4	"<tr><th>#<th>File<th>IP<th>URL<th>Proto<th>State<th>Target "
water	164:20	0:0	4	"bit/s<th>Actual bit/s<th>Bytes transferred\n"
water	164:67	0:0	2	;
water	165:4	0:0	2	c1
op	165:7	0:0	2	=
water	165:9	0:0	2	first_http_ctx
water	165:23	0:0	2	;
water	166:4	0:0	2	i
op	166:6	0:0	2	=
water	166:8	0:0	2	0
water	166:9	0:0	2	;
while	167:4	196:4	2	(c1)
cond	167:11	167:11	3	c1
water	167:11	0:0	4	c1
stmts	167:15	196:4	3	
water	167:15	0:0	4	{
decl	168:8	168:19	4	int	bitrate
decl	169:8	169:13	4	int	j
water	170:8	0:0	4	bitrate
op	170:16	0:0	4	=
water	170:18	0:0	4	0
water	170:19	0:0	4	;
if	171:8	178:8	4	(c1 -> stream)
cond	171:12	171:16	5	c1 -> stream
water	171:12	0:0	6	c1
op	171:14	0:0	6	->
water	171:16	0:0	6	stream
stmts	171:24	178:8	5	
water	171:24	0:0	6	{
for	172:12	177:12	6	(j = 0 ;j < c1 -> stream -> nb_streams;j ++)
forinit	172:17	172:22	7	j = 0 ;
water	172:17	0:0	8	j
op	172:19	0:0	8	=
water	172:21	0:0	8	0
water	172:22	0:0	8	;
cond	172:24	172:40	7	j < c1 -> stream -> nb_streams
water	172:24	0:0	8	j
op	172:26	0:0	8	<
water	172:28	0:0	8	c1
op	172:30	0:0	8	->
water	172:32	0:0	8	stream
op	172:38	0:0	8	->
water	172:40	0:0	8	nb_streams
forexpr	172:52	172:53	7	j ++
water	172:52	0:0	8	j
op	172:53	0:0	8	++
stmts	172:57	177:12	7	
water	172:57	0:0	8	{
if	173:16	174:73	8	(! c1 -> stream -> feed)
cond	173:20	173:33	9	! c1 -> stream -> feed
op	173:20	0:0	10	!
water	173:21	0:0	10	c1
op	173:23	0:0	10	->
water	173:25	0:0	10	stream
op	173:31	0:0	10	->
water	173:33	0:0	10	feed
stmts	174:20	174:73	9	
water	174:20	0:0	10	bitrate
op	174:28	0:0	10	+=
water	174:31	0:0	10	c1
op	174:33	0:0	10	->
water	174:35	0:0	10	stream
op	174:41	0:0	10	->
water	174:43	0:0	10	streams
op	174:50	0:0	10	[
water	174:51	0:0	10	j
op	174:52	0:0	10	]
op	174:53	0:0	10	->
water	174:55	0:0	10	codecpar
op	174:63	0:0	10	->
water	174:65	0:0	10	bit_rate
water	174:73	0:0	10	;
else	175:16	176:97	8
stmts	175:21	176:97	9	
if	175:21	176:97	10	(c1 -> feed_streams [ j ] >= 0)
cond	175:25	175:48	11	c1 -> feed_streams [ j ] >= 0
water	175:25	0:0	12	c1
op	175:27	0:0	12	->
water	175:29	0:0	12	feed_streams
op	175:41	0:0	12	[
water	175:42	0:0	12	j
op	175:43	0:0	12	]
op	175:45	0:0	12	>=
water	175:48	0:0	12	0
stmts	176:20	176:97	11	
water	176:20	0:0	12	bitrate
op	176:28	0:0	12	+=
water	176:31	0:0	12	c1
op	176:33	0:0	12	->
water	176:35	0:0	12	stream
op	176:41	0:0	12	->
water	176:43	0:0	12	feed
op	176:47	0:0	12	->
water	176:49	0:0	12	streams
op	176:56	0:0	12	[
water	176:57	0:0	12	c1
op	176:59	0:0	12	->
water	176:61	0:0	12	feed_streams
op	176:73	0:0	12	[
water	176:74	0:0	12	j
op	176:75	0:0	12	]
op	176:76	0:0	12	]
op	176:77	0:0	12	->
water	176:79	0:0	12	codecpar
op	176:87	0:0	12	->
water	176:89	0:0	12	bit_rate
water	176:97	0:0	12	;
water	177:12	0:0	8	}
water	178:8	0:0	6	}
water	179:8	0:0	4	i
op	179:9	0:0	4	++
water	179:11	0:0	4	;
water	180:8	0:0	4	p
op	180:10	0:0	4	=
call	180:12	180:44	4	inet_ntoa
arg	180:22	180:44	5	c1->from_addr.sin_addr
water	180:22	0:0	6	c1
op	180:24	0:0	6	->
water	180:26	0:0	6	from_addr
op	180:35	0:0	6	.
water	180:36	0:0	6	sin_addr
water	180:45	0:0	4	;
call	181:8	181:64	4	clean_html
arg	181:19	181:32	5	c1->clean_url
water	181:19	0:0	6	c1
op	181:21	0:0	6	->
water	181:23	0:0	6	clean_url
arg	181:34	181:55	5	sizeof(c1->clean_url)
op	181:34	0:0	6	sizeof
water	181:40	0:0	6	(
water	181:41	0:0	6	c1
op	181:43	0:0	6	->
water	181:45	0:0	6	clean_url
water	181:54	0:0	6	)
arg	181:57	181:64	5	c1->url
water	181:57	0:0	6	c1
op	181:59	0:0	6	->
water	181:61	0:0	6	url
water	181:65	0:0	4	;
call	182:8	188:55	4	avio_printf
arg	182:20	182:22	5	pb
water	182:20	0:0	6	pb
arg	182:24	183:30	5	"<tr><td><b>%d</b><td>%s%s<td>%s<td>%s<td>%s<td>%s""<td>"
water	182:24	0:0	6	"<tr><td><b>%d</b><td>%s%s<td>%s<td>%s<td>%s<td>%s"
water	183:24	0:0	6	"<td>"
arg	184:20	184:21	5	i
water	184:20	0:0	6	i
arg	184:23	184:61	5	c1->stream?c1->stream->filename:""
water	184:23	0:0	6	c1
op	184:25	0:0	6	->
water	184:27	0:0	6	stream
water	184:34	0:0	6	?
water	184:36	0:0	6	c1
op	184:38	0:0	6	->
water	184:40	0:0	6	stream
op	184:46	0:0	6	->
water	184:48	0:0	6	filename
water	184:57	0:0	6	:
water	184:59	0:0	6	""
arg	185:20	185:72	5	c1->state==HTTPSTATE_RECEIVE_DATA?"(input)":""
water	185:20	0:0	6	c1
op	185:22	0:0	6	->
water	185:24	0:0	6	state
op	185:30	0:0	6	==
water	185:33	0:0	6	HTTPSTATE_RECEIVE_DATA
water	185:56	0:0	6	?
water	185:58	0:0	6	"(input)"
water	185:68	0:0	6	:
water	185:70	0:0	6	""
arg	186:20	186:21	5	p
water	186:20	0:0	6	p
arg	187:20	187:33	5	c1->clean_url
water	187:20	0:0	6	c1
op	187:22	0:0	6	->
water	187:24	0:0	6	clean_url
arg	188:20	188:32	5	c1->protocol
water	188:20	0:0	6	c1
op	188:22	0:0	6	->
water	188:24	0:0	6	protocol
arg	188:34	188:55	5	http_state[c1->state]
water	188:34	0:0	6	http_state
op	188:44	0:0	6	[
water	188:45	0:0	6	c1
op	188:47	0:0	6	->
water	188:49	0:0	6	state
op	188:54	0:0	6	]
water	188:56	0:0	4	;
call	189:8	189:33	4	fmt_bytecount
arg	189:22	189:24	5	pb
water	189:22	0:0	6	pb
arg	189:26	189:33	5	bitrate
water	189:26	0:0	6	bitrate
water	189:34	0:0	4	;
call	190:8	190:30	4	avio_printf
arg	190:20	190:22	5	pb
water	190:20	0:0	6	pb
arg	190:24	190:30	5	"<td>"
water	190:24	0:0	6	"<td>"
water	190:31	0:0	4	;
call	191:8	191:77	4	fmt_bytecount
arg	191:22	191:24	5	pb
water	191:22	0:0	6	pb
arg	191:26	191:77	5	compute_datarate(&c1->datarate,c1->data_count)*8
call	191:26	191:72	6	compute_datarate
arg	191:43	191:56	7	&c1->datarate
op	191:43	0:0	8	&
water	191:44	0:0	8	c1
op	191:46	0:0	8	->
water	191:48	0:0	8	datarate
arg	191:58	191:72	7	c1->data_count
water	191:58	0:0	8	c1
op	191:60	0:0	8	->
water	191:62	0:0	8	data_count
op	191:74	0:0	6	*
water	191:76	0:0	6	8
water	191:78	0:0	4	;
call	192:8	192:30	4	avio_printf
arg	192:20	192:22	5	pb
water	192:20	0:0	6	pb
arg	192:24	192:30	5	"<td>"
water	192:24	0:0	6	"<td>"
water	192:31	0:0	4	;
call	193:8	193:40	4	fmt_bytecount
arg	193:22	193:24	5	pb
water	193:22	0:0	6	pb
arg	193:26	193:40	5	c1->data_count
water	193:26	0:0	6	c1
op	193:28	0:0	6	->
water	193:30	0:0	6	data_count
water	193:41	0:0	4	;
call	194:8	194:28	4	avio_printf
arg	194:20	194:22	5	pb
water	194:20	0:0	6	pb
arg	194:24	194:28	5	"\n"
water	194:24	0:0	6	"\n"
water	194:29	0:0	4	;
water	195:8	0:0	4	c1
op	195:11	0:0	4	=
water	195:13	0:0	4	c1
op	195:15	0:0	4	->
water	195:17	0:0	4	next
water	195:21	0:0	4	;
water	196:4	0:0	4	}
call	197:4	197:32	2	avio_printf
arg	197:16	197:18	3	pb
water	197:16	0:0	4	pb
arg	197:20	197:32	3	"</table>\n"
water	197:20	0:0	4	"</table>\n"
water	197:33	0:0	2	;
if	198:4	203:4	2	(! config . bitexact)
cond	198:8	198:16	3	! config . bitexact
op	198:8	0:0	4	!
water	198:9	0:0	4	config
op	198:15	0:0	4	.
water	198:16	0:0	4	bitexact
stmts	198:26	203:4	3	
water	198:26	0:0	4	{
water	200:8	0:0	4	ti
op	200:11	0:0	4	=
call	200:13	200:22	4	time
arg	200:18	200:22	5	NULL
water	200:18	0:0	6	NULL
water	200:23	0:0	4	;
water	201:8	0:0	4	p
op	201:10	0:0	4	=
call	201:12	201:21	4	ctime
arg	201:18	201:21	5	&ti
op	201:18	0:0	6	&
water	201:19	0:0	6	ti
water	201:22	0:0	4	;
call	202:8	202:48	4	avio_printf
arg	202:20	202:22	5	pb
water	202:20	0:0	6	pb
arg	202:24	202:45	5	"<hr>Generated at %s"
water	202:24	0:0	6	"<hr>Generated at %s"
arg	202:47	202:48	5	p
water	202:47	0:0	6	p
water	202:49	0:0	4	;
water	203:4	0:0	4	}
call	204:4	204:40	2	avio_printf
arg	204:16	204:18	3	pb
water	204:16	0:0	4	pb
arg	204:20	204:40	3	"</body>\n</html>\n"
water	204:20	0:0	4	"</body>\n</html>\n"
water	204:41	0:0	2	;
water	205:4	0:0	2	len
op	205:8	0:0	2	=
call	205:10	205:46	2	avio_close_dyn_buf
arg	205:29	205:31	3	pb
water	205:29	0:0	4	pb
arg	205:33	205:46	3	&c->pb_buffer
op	205:33	0:0	4	&
water	205:34	0:0	4	c
op	205:35	0:0	4	->
water	205:37	0:0	4	pb_buffer
water	205:47	0:0	2	;
water	206:4	0:0	2	c
op	206:5	0:0	2	->
water	206:7	0:0	2	buffer_ptr
op	206:18	0:0	2	=
water	206:20	0:0	2	c
op	206:21	0:0	2	->
water	206:23	0:0	2	pb_buffer
water	206:32	0:0	2	;
water	207:4	0:0	2	c
op	207:5	0:0	2	->
water	207:7	0:0	2	buffer_end
op	207:18	0:0	2	=
water	207:20	0:0	2	c
op	207:21	0:0	2	->
water	207:23	0:0	2	pb_buffer
op	207:33	0:0	2	+
water	207:35	0:0	2	len
water	207:38	0:0	2	;
