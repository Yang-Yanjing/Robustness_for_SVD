func	1:0	42:0	0	static int	config_input_ref
params	1:27	0:0	1	
param	1:28	1:48	2	AVFilterLink *	inlink
stmnts	0:0	41:12	1	
decl	3:4	3:72	2	const AVPixFmtDescriptor	*desc
op	3:35	0:0	2	=
call	3:37	3:71	3	av_pix_fmt_desc_get
arg	3:57	3:71	4	inlink->format
water	3:57	0:0	5	inlink
op	3:63	0:0	5	->
water	3:65	0:0	5	format
decl	4:4	4:39	2	AVFilterContext	*ctx
op	4:26	0:0	2	=
water	4:28	0:0	2	inlink
op	4:34	0:0	2	->
water	4:36	0:0	2	dst
decl	5:4	5:30	2	PSNRContext	*s
op	5:19	0:0	2	=
water	5:21	0:0	2	ctx
op	5:24	0:0	2	->
water	5:26	0:0	2	priv
water	6:4	0:0	2	unsigned
water	6:13	0:0	2	sum
water	6:16	0:0	2	;
decl	7:4	7:9	2	int	j
water	8:4	0:0	2	s
op	8:5	0:0	2	->
water	8:7	0:0	2	nb_components
op	8:21	0:0	2	=
water	8:23	0:0	2	desc
op	8:27	0:0	2	->
water	8:29	0:0	2	nb_components
water	8:42	0:0	2	;
if	9:4	13:4	2	(ctx -> inputs [ 0 ] -> w != ctx -> inputs [ 1 ] -> w || ctx -> inputs [ 0 ] -> h != ctx -> inputs [ 1 ] -> h)
cond	9:8	10:45	3	ctx -> inputs [ 0 ] -> w != ctx -> inputs [ 1 ] -> w || ctx -> inputs [ 0 ] -> h != ctx -> inputs [ 1 ] -> h
water	9:8	0:0	4	ctx
op	9:11	0:0	4	->
water	9:13	0:0	4	inputs
op	9:19	0:0	4	[
water	9:20	0:0	4	0
op	9:21	0:0	4	]
op	9:22	0:0	4	->
water	9:24	0:0	4	w
op	9:26	0:0	4	!=
water	9:29	0:0	4	ctx
op	9:32	0:0	4	->
water	9:34	0:0	4	inputs
op	9:40	0:0	4	[
water	9:41	0:0	4	1
op	9:42	0:0	4	]
op	9:43	0:0	4	->
water	9:45	0:0	4	w
op	9:47	0:0	4	||
water	10:8	0:0	4	ctx
op	10:11	0:0	4	->
water	10:13	0:0	4	inputs
op	10:19	0:0	4	[
water	10:20	0:0	4	0
op	10:21	0:0	4	]
op	10:22	0:0	4	->
water	10:24	0:0	4	h
op	10:26	0:0	4	!=
water	10:29	0:0	4	ctx
op	10:32	0:0	4	->
water	10:34	0:0	4	inputs
op	10:40	0:0	4	[
water	10:41	0:0	4	1
op	10:42	0:0	4	]
op	10:43	0:0	4	->
water	10:45	0:0	4	h
stmts	10:48	13:4	3	
water	10:48	0:0	4	{
call	11:8	11:84	4	av_log
arg	11:15	11:18	5	ctx
water	11:15	0:0	6	ctx
arg	11:20	11:32	5	AV_LOG_ERROR
water	11:20	0:0	6	AV_LOG_ERROR
arg	11:34	11:84	5	"Width and height of input videos must be same.\n"
water	11:34	0:0	6	"Width and height of input videos must be same.\n"
water	11:85	0:0	4	;
return	12:8	12:30	4	AVERROR(EINVAL)
call	12:15	12:29	5	AVERROR
arg	12:23	12:29	6	EINVAL
water	12:23	0:0	7	EINVAL
water	13:4	0:0	4	}
if	14:4	17:4	2	(ctx -> inputs [ 0 ] -> format != ctx -> inputs [ 1 ] -> format)
cond	14:8	14:50	3	ctx -> inputs [ 0 ] -> format != ctx -> inputs [ 1 ] -> format
water	14:8	0:0	4	ctx
op	14:11	0:0	4	->
water	14:13	0:0	4	inputs
op	14:19	0:0	4	[
water	14:20	0:0	4	0
op	14:21	0:0	4	]
op	14:22	0:0	4	->
water	14:24	0:0	4	format
op	14:31	0:0	4	!=
water	14:34	0:0	4	ctx
op	14:37	0:0	4	->
water	14:39	0:0	4	inputs
op	14:45	0:0	4	[
water	14:46	0:0	4	1
op	14:47	0:0	4	]
op	14:48	0:0	4	->
water	14:50	0:0	4	format
stmts	14:58	17:4	3	
water	14:58	0:0	4	{
call	15:8	15:74	4	av_log
arg	15:15	15:18	5	ctx
water	15:15	0:0	6	ctx
arg	15:20	15:32	5	AV_LOG_ERROR
water	15:20	0:0	6	AV_LOG_ERROR
arg	15:34	15:74	5	"Inputs must be of same pixel format.\n"
water	15:34	0:0	6	"Inputs must be of same pixel format.\n"
water	15:75	0:0	4	;
return	16:8	16:30	4	AVERROR(EINVAL)
call	16:15	16:29	5	AVERROR
arg	16:23	16:29	6	EINVAL
water	16:23	0:0	7	EINVAL
water	17:4	0:0	4	}
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	max
op	18:10	0:0	2	[
water	18:11	0:0	2	0
op	18:12	0:0	2	]
op	18:14	0:0	2	=
water	18:16	0:0	2	(
water	18:17	0:0	2	1
op	18:19	0:0	2	<<
water	18:22	0:0	2	(
water	18:23	0:0	2	desc
op	18:27	0:0	2	->
water	18:29	0:0	2	comp
op	18:33	0:0	2	[
water	18:34	0:0	2	0
op	18:35	0:0	2	]
op	18:36	0:0	2	.
water	18:37	0:0	2	depth_minus1
op	18:50	0:0	2	+
water	18:52	0:0	2	1
water	18:53	0:0	2	)
water	18:54	0:0	2	)
op	18:56	0:0	2	-
water	18:58	0:0	2	1
water	18:59	0:0	2	;
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	max
op	19:10	0:0	2	[
water	19:11	0:0	2	1
op	19:12	0:0	2	]
op	19:14	0:0	2	=
water	19:16	0:0	2	(
water	19:17	0:0	2	1
op	19:19	0:0	2	<<
water	19:22	0:0	2	(
water	19:23	0:0	2	desc
op	19:27	0:0	2	->
water	19:29	0:0	2	comp
op	19:33	0:0	2	[
water	19:34	0:0	2	1
op	19:35	0:0	2	]
op	19:36	0:0	2	.
water	19:37	0:0	2	depth_minus1
op	19:50	0:0	2	+
water	19:52	0:0	2	1
water	19:53	0:0	2	)
water	19:54	0:0	2	)
op	19:56	0:0	2	-
water	19:58	0:0	2	1
water	19:59	0:0	2	;
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	max
op	20:10	0:0	2	[
water	20:11	0:0	2	2
op	20:12	0:0	2	]
op	20:14	0:0	2	=
water	20:16	0:0	2	(
water	20:17	0:0	2	1
op	20:19	0:0	2	<<
water	20:22	0:0	2	(
water	20:23	0:0	2	desc
op	20:27	0:0	2	->
water	20:29	0:0	2	comp
op	20:33	0:0	2	[
water	20:34	0:0	2	2
op	20:35	0:0	2	]
op	20:36	0:0	2	.
water	20:37	0:0	2	depth_minus1
op	20:50	0:0	2	+
water	20:52	0:0	2	1
water	20:53	0:0	2	)
water	20:54	0:0	2	)
op	20:56	0:0	2	-
water	20:58	0:0	2	1
water	20:59	0:0	2	;
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	max
op	21:10	0:0	2	[
water	21:11	0:0	2	3
op	21:12	0:0	2	]
op	21:14	0:0	2	=
water	21:16	0:0	2	(
water	21:17	0:0	2	1
op	21:19	0:0	2	<<
water	21:22	0:0	2	(
water	21:23	0:0	2	desc
op	21:27	0:0	2	->
water	21:29	0:0	2	comp
op	21:33	0:0	2	[
water	21:34	0:0	2	3
op	21:35	0:0	2	]
op	21:36	0:0	2	.
water	21:37	0:0	2	depth_minus1
op	21:50	0:0	2	+
water	21:52	0:0	2	1
water	21:53	0:0	2	)
water	21:54	0:0	2	)
op	21:56	0:0	2	-
water	21:58	0:0	2	1
water	21:59	0:0	2	;
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	is_rgb
op	22:14	0:0	2	=
call	22:16	22:60	2	ff_fill_rgba_map
arg	22:33	22:44	3	s->rgba_map
water	22:33	0:0	4	s
op	22:34	0:0	4	->
water	22:36	0:0	4	rgba_map
arg	22:46	22:60	3	inlink->format
water	22:46	0:0	4	inlink
op	22:52	0:0	4	->
water	22:54	0:0	4	format
op	22:62	0:0	2	>=
water	22:65	0:0	2	0
water	22:66	0:0	2	;
water	23:4	0:0	2	s
op	23:5	0:0	2	->
water	23:7	0:0	2	comps
op	23:12	0:0	2	[
water	23:13	0:0	2	0
op	23:14	0:0	2	]
op	23:16	0:0	2	=
water	23:18	0:0	2	s
op	23:19	0:0	2	->
water	23:21	0:0	2	is_rgb
water	23:28	0:0	2	?
water	23:30	0:0	2	'r'
water	23:34	0:0	2	:
water	23:36	0:0	2	'y'
water	23:40	0:0	2	;
water	24:4	0:0	2	s
op	24:5	0:0	2	->
water	24:7	0:0	2	comps
op	24:12	0:0	2	[
water	24:13	0:0	2	1
op	24:14	0:0	2	]
op	24:16	0:0	2	=
water	24:18	0:0	2	s
op	24:19	0:0	2	->
water	24:21	0:0	2	is_rgb
water	24:28	0:0	2	?
water	24:30	0:0	2	'g'
water	24:34	0:0	2	:
water	24:36	0:0	2	'u'
water	24:40	0:0	2	;
water	25:4	0:0	2	s
op	25:5	0:0	2	->
water	25:7	0:0	2	comps
op	25:12	0:0	2	[
water	25:13	0:0	2	2
op	25:14	0:0	2	]
op	25:16	0:0	2	=
water	25:18	0:0	2	s
op	25:19	0:0	2	->
water	25:21	0:0	2	is_rgb
water	25:28	0:0	2	?
water	25:30	0:0	2	'b'
water	25:34	0:0	2	:
water	25:36	0:0	2	'v'
water	25:40	0:0	2	;
water	26:4	0:0	2	s
op	26:5	0:0	2	->
water	26:7	0:0	2	comps
op	26:12	0:0	2	[
water	26:13	0:0	2	3
op	26:14	0:0	2	]
op	26:16	0:0	2	=
water	26:18	0:0	2	'a'
water	26:21	0:0	2	;
water	27:4	0:0	2	s
op	27:5	0:0	2	->
water	27:7	0:0	2	planeheight
op	27:18	0:0	2	[
water	27:19	0:0	2	1
op	27:20	0:0	2	]
op	27:22	0:0	2	=
water	27:24	0:0	2	s
op	27:25	0:0	2	->
water	27:27	0:0	2	planeheight
op	27:38	0:0	2	[
water	27:39	0:0	2	2
op	27:40	0:0	2	]
op	27:42	0:0	2	=
call	27:44	27:89	2	FF_CEIL_RSHIFT
arg	27:59	27:68	3	inlink->h
water	27:59	0:0	4	inlink
op	27:65	0:0	4	->
water	27:67	0:0	4	h
arg	27:70	27:89	3	desc->log2_chroma_h
water	27:70	0:0	4	desc
op	27:74	0:0	4	->
water	27:76	0:0	4	log2_chroma_h
water	27:90	0:0	2	;
water	28:4	0:0	2	s
op	28:5	0:0	2	->
water	28:7	0:0	2	planeheight
op	28:18	0:0	2	[
water	28:19	0:0	2	0
op	28:20	0:0	2	]
op	28:22	0:0	2	=
water	28:24	0:0	2	s
op	28:25	0:0	2	->
water	28:27	0:0	2	planeheight
op	28:38	0:0	2	[
water	28:39	0:0	2	3
op	28:40	0:0	2	]
op	28:42	0:0	2	=
water	28:44	0:0	2	inlink
op	28:50	0:0	2	->
water	28:52	0:0	2	h
water	28:53	0:0	2	;
water	29:4	0:0	2	s
op	29:5	0:0	2	->
water	29:7	0:0	2	planewidth
op	29:17	0:0	2	[
water	29:18	0:0	2	1
op	29:19	0:0	2	]
op	29:22	0:0	2	=
water	29:24	0:0	2	s
op	29:25	0:0	2	->
water	29:27	0:0	2	planewidth
op	29:37	0:0	2	[
water	29:38	0:0	2	2
op	29:39	0:0	2	]
op	29:42	0:0	2	=
call	29:44	29:89	2	FF_CEIL_RSHIFT
arg	29:59	29:68	3	inlink->w
water	29:59	0:0	4	inlink
op	29:65	0:0	4	->
water	29:67	0:0	4	w
arg	29:70	29:89	3	desc->log2_chroma_w
water	29:70	0:0	4	desc
op	29:74	0:0	4	->
water	29:76	0:0	4	log2_chroma_w
water	29:90	0:0	2	;
water	30:4	0:0	2	s
op	30:5	0:0	2	->
water	30:7	0:0	2	planewidth
op	30:17	0:0	2	[
water	30:18	0:0	2	0
op	30:19	0:0	2	]
op	30:22	0:0	2	=
water	30:24	0:0	2	s
op	30:25	0:0	2	->
water	30:27	0:0	2	planewidth
op	30:37	0:0	2	[
water	30:38	0:0	2	3
op	30:39	0:0	2	]
op	30:42	0:0	2	=
water	30:44	0:0	2	inlink
op	30:50	0:0	2	->
water	30:52	0:0	2	w
water	30:53	0:0	2	;
water	31:4	0:0	2	sum
op	31:8	0:0	2	=
water	31:10	0:0	2	0
water	31:11	0:0	2	;
for	32:4	33:51	2	(j = 0 ;j < s -> nb_components;j ++)
forinit	32:9	32:14	3	j = 0 ;
water	32:9	0:0	4	j
op	32:11	0:0	4	=
water	32:13	0:0	4	0
water	32:14	0:0	4	;
cond	32:16	32:23	3	j < s -> nb_components
water	32:16	0:0	4	j
op	32:18	0:0	4	<
water	32:20	0:0	4	s
op	32:21	0:0	4	->
water	32:23	0:0	4	nb_components
forexpr	32:38	32:39	3	j ++
water	32:38	0:0	4	j
op	32:39	0:0	4	++
stmts	33:8	33:51	3	
water	33:8	0:0	4	sum
op	33:12	0:0	4	+=
water	33:15	0:0	4	s
op	33:16	0:0	4	->
water	33:18	0:0	4	planeheight
op	33:29	0:0	4	[
water	33:30	0:0	4	j
op	33:31	0:0	4	]
op	33:33	0:0	4	*
water	33:35	0:0	4	s
op	33:36	0:0	4	->
water	33:38	0:0	4	planewidth
op	33:48	0:0	4	[
water	33:49	0:0	4	j
op	33:50	0:0	4	]
water	33:51	0:0	4	;
for	34:4	37:4	2	(j = 0 ;j < s -> nb_components;j ++)
forinit	34:9	34:14	3	j = 0 ;
water	34:9	0:0	4	j
op	34:11	0:0	4	=
water	34:13	0:0	4	0
water	34:14	0:0	4	;
cond	34:16	34:23	3	j < s -> nb_components
water	34:16	0:0	4	j
op	34:18	0:0	4	<
water	34:20	0:0	4	s
op	34:21	0:0	4	->
water	34:23	0:0	4	nb_components
forexpr	34:38	34:39	3	j ++
water	34:38	0:0	4	j
op	34:39	0:0	4	++
stmts	34:43	37:4	3	
water	34:43	0:0	4	{
water	35:8	0:0	4	s
op	35:9	0:0	4	->
water	35:11	0:0	4	planeweight
op	35:22	0:0	4	[
water	35:23	0:0	4	j
op	35:24	0:0	4	]
op	35:26	0:0	4	=
water	35:28	0:0	4	(
water	35:29	0:0	4	double
water	35:35	0:0	4	)
water	35:37	0:0	4	s
op	35:38	0:0	4	->
water	35:40	0:0	4	planeheight
op	35:51	0:0	4	[
water	35:52	0:0	4	j
op	35:53	0:0	4	]
op	35:55	0:0	4	*
water	35:57	0:0	4	s
op	35:58	0:0	4	->
water	35:60	0:0	4	planewidth
op	35:70	0:0	4	[
water	35:71	0:0	4	j
op	35:72	0:0	4	]
op	35:74	0:0	4	/
water	35:76	0:0	4	sum
water	35:79	0:0	4	;
water	36:8	0:0	4	s
op	36:9	0:0	4	->
water	36:11	0:0	4	average_max
op	36:23	0:0	4	+=
water	36:26	0:0	4	s
op	36:27	0:0	4	->
water	36:29	0:0	4	max
op	36:32	0:0	4	[
water	36:33	0:0	4	j
op	36:34	0:0	4	]
op	36:36	0:0	4	*
water	36:38	0:0	4	s
op	36:39	0:0	4	->
water	36:41	0:0	4	planeweight
op	36:52	0:0	4	[
water	36:53	0:0	4	j
op	36:54	0:0	4	]
water	36:55	0:0	4	;
water	37:4	0:0	4	}
water	38:4	0:0	2	s
op	38:5	0:0	2	->
water	38:7	0:0	2	dsp
op	38:10	0:0	2	.
water	38:11	0:0	2	sse_line
op	38:20	0:0	2	=
water	38:22	0:0	2	desc
op	38:26	0:0	2	->
water	38:28	0:0	2	comp
op	38:32	0:0	2	[
water	38:33	0:0	2	0
op	38:34	0:0	2	]
op	38:35	0:0	2	.
water	38:36	0:0	2	depth_minus1
op	38:49	0:0	2	>
water	38:51	0:0	2	7
water	38:53	0:0	2	?
water	38:55	0:0	2	sse_line_16bit
water	38:70	0:0	2	:
water	38:72	0:0	2	sse_line_8bit
water	38:85	0:0	2	;
if	39:4	40:65	2	(ARCH_X86)
cond	39:8	39:8	3	ARCH_X86
water	39:8	0:0	4	ARCH_X86
stmts	40:8	40:65	3	
call	40:8	40:64	4	ff_psnr_init_x86
arg	40:25	40:32	5	&s->dsp
op	40:25	0:0	6	&
water	40:26	0:0	6	s
op	40:27	0:0	6	->
water	40:29	0:0	6	dsp
arg	40:34	40:64	5	desc->comp[0].depth_minus1+1
water	40:34	0:0	6	desc
op	40:38	0:0	6	->
water	40:40	0:0	6	comp
op	40:44	0:0	6	[
water	40:45	0:0	6	0
op	40:46	0:0	6	]
op	40:47	0:0	6	.
water	40:48	0:0	6	depth_minus1
op	40:61	0:0	6	+
water	40:63	0:0	6	1
water	40:65	0:0	4	;
return	41:4	41:12	2	0
water	41:11	0:0	3	0
