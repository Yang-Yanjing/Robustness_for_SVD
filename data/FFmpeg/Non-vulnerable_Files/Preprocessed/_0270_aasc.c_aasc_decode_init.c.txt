func	1:15	31:0	0	int	aasc_decode_init
params	1:35	0:0	1	
param	1:36	1:57	2	AVCodecContext *	avctx
stmnts	0:0	30:12	1	
decl	3:4	3:37	2	AascContext	*s
op	3:19	0:0	2	=
water	3:21	0:0	2	avctx
op	3:26	0:0	2	->
water	3:28	0:0	2	priv_data
decl	4:4	4:16	2	uint8_t	*ptr
decl	5:4	5:9	2	int	i
water	6:4	0:0	2	s
op	6:5	0:0	2	->
water	6:7	0:0	2	avctx
op	6:13	0:0	2	=
water	6:15	0:0	2	avctx
water	6:20	0:0	2	;
switch	7:4	26:4	2	(avctx -> bits_per_coded_sample)
cond	7:12	7:19	3	avctx -> bits_per_coded_sample
water	7:12	0:0	4	avctx
op	7:17	0:0	4	->
water	7:19	0:0	4	bits_per_coded_sample
stmts	7:42	26:4	3	
water	7:42	0:0	4	{
label	8:4	8:10	4	case 8 :
water	9:8	0:0	4	avctx
op	9:13	0:0	4	->
water	9:15	0:0	4	pix_fmt
op	9:23	0:0	4	=
water	9:25	0:0	4	AV_PIX_FMT_PAL8
water	9:40	0:0	4	;
water	10:8	0:0	4	ptr
op	10:12	0:0	4	=
water	10:14	0:0	4	avctx
op	10:19	0:0	4	->
water	10:21	0:0	4	extradata
water	10:30	0:0	4	;
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	palette_size
op	11:24	0:0	4	=
call	11:26	11:69	4	FFMIN
arg	11:32	11:53	5	avctx->extradata_size
water	11:32	0:0	6	avctx
op	11:37	0:0	6	->
water	11:39	0:0	6	extradata_size
arg	11:55	11:69	5	AVPALETTE_SIZE
water	11:55	0:0	6	AVPALETTE_SIZE
water	11:70	0:0	4	;
for	12:8	15:8	4	(i = 0 ;i < s -> palette_size / 4;i ++)
forinit	12:13	12:18	5	i = 0 ;
water	12:13	0:0	6	i
op	12:15	0:0	6	=
water	12:17	0:0	6	0
water	12:18	0:0	6	;
cond	12:20	12:42	5	i < s -> palette_size / 4
water	12:20	0:0	6	i
op	12:22	0:0	6	<
water	12:24	0:0	6	s
op	12:25	0:0	6	->
water	12:27	0:0	6	palette_size
op	12:40	0:0	6	/
water	12:42	0:0	6	4
forexpr	12:45	12:46	5	i ++
water	12:45	0:0	6	i
op	12:46	0:0	6	++
stmts	12:50	15:8	5	
water	12:50	0:0	6	{
water	13:12	0:0	6	s
op	13:13	0:0	6	->
water	13:15	0:0	6	palette
op	13:22	0:0	6	[
water	13:23	0:0	6	i
op	13:24	0:0	6	]
op	13:26	0:0	6	=
water	13:28	0:0	6	0
water	13:29	0:0	6	xFFU
op	13:34	0:0	6	<<
water	13:37	0:0	6	24
op	13:40	0:0	6	|
call	13:42	13:53	6	AV_RL32
arg	13:50	13:53	7	ptr
water	13:50	0:0	8	ptr
water	13:54	0:0	6	;
water	14:12	0:0	6	ptr
op	14:16	0:0	6	+=
water	14:19	0:0	6	4
water	14:20	0:0	6	;
water	15:8	0:0	6	}
break	16:8	16:13	4	
label	17:4	17:11	4	case 16 :
water	18:8	0:0	4	avctx
op	18:13	0:0	4	->
water	18:15	0:0	4	pix_fmt
op	18:23	0:0	4	=
water	18:25	0:0	4	AV_PIX_FMT_RGB555LE
water	18:44	0:0	4	;
break	19:8	19:13	4	
label	20:4	20:11	4	case 24 :
water	21:8	0:0	4	avctx
op	21:13	0:0	4	->
water	21:15	0:0	4	pix_fmt
op	21:23	0:0	4	=
water	21:25	0:0	4	AV_PIX_FMT_BGR24
water	21:41	0:0	4	;
break	22:8	22:13	4	
label	23:4	23:11	4	default :
call	24:8	24:95	4	av_log
arg	24:15	24:20	5	avctx
water	24:15	0:0	6	avctx
arg	24:22	24:34	5	AV_LOG_ERROR
water	24:22	0:0	6	AV_LOG_ERROR
arg	24:36	24:65	5	"Unsupported bit depth: %d\n"
water	24:36	0:0	6	"Unsupported bit depth: %d\n"
arg	24:67	24:95	5	avctx->bits_per_coded_sample
water	24:67	0:0	6	avctx
op	24:72	0:0	6	->
water	24:74	0:0	6	bits_per_coded_sample
water	24:96	0:0	4	;
return	25:8	25:17	4	-1
op	25:15	0:0	5	-
water	25:16	0:0	5	1
water	26:4	0:0	4	}
water	27:4	0:0	2	s
op	27:5	0:0	2	->
water	27:7	0:0	2	frame
op	27:13	0:0	2	=
call	27:15	27:30	2	av_frame_alloc
water	27:31	0:0	2	;
if	28:4	29:30	2	(! s -> frame)
cond	28:8	28:12	3	! s -> frame
op	28:8	0:0	4	!
water	28:9	0:0	4	s
op	28:10	0:0	4	->
water	28:12	0:0	4	frame
stmts	29:8	29:30	3	
return	29:8	29:30	4	AVERROR(ENOMEM)
call	29:15	29:29	5	AVERROR
arg	29:23	29:29	6	ENOMEM
water	29:23	0:0	7	ENOMEM
return	30:4	30:12	2	0
water	30:11	0:0	3	0
