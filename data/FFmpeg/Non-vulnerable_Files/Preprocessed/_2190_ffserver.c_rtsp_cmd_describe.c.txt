func	1:0	43:0	0	static void	rtsp_cmd_describe
params	1:29	0:0	1	
param	1:30	1:44	2	HTTPContext *	c
param	1:46	1:61	2	const char *	url
stmnts	0:0	42:20	1	
decl	3:4	3:26	2	FFServerStream	*stream
decl	4:4	4:20	2	char	path1[1024]
decl	5:4	5:20	2	const char	*path
decl	6:4	6:20	2	uint8_t	*content
decl	7:4	7:22	2	int	content_length
decl	8:4	8:17	2	socklen_t	len
decl	9:4	9:30	2	struct sockaddr_in	my_addr
call	11:4	11:75	2	av_url_split
arg	11:17	11:21	3	NULL
water	11:17	0:0	4	NULL
arg	11:23	11:24	3	0
water	11:23	0:0	4	0
arg	11:26	11:30	3	NULL
water	11:26	0:0	4	NULL
arg	11:32	11:33	3	0
water	11:32	0:0	4	0
arg	11:35	11:39	3	NULL
water	11:35	0:0	4	NULL
arg	11:41	11:42	3	0
water	11:41	0:0	4	0
arg	11:44	11:48	3	NULL
water	11:44	0:0	4	NULL
arg	11:50	11:55	3	path1
water	11:50	0:0	4	path1
arg	11:57	11:70	3	sizeof(path1)
op	11:57	0:0	4	sizeof
water	11:63	0:0	4	(
water	11:64	0:0	4	path1
water	11:69	0:0	4	)
arg	11:72	11:75	3	url
water	11:72	0:0	4	url
water	11:76	0:0	2	;
water	12:4	0:0	2	path
op	12:9	0:0	2	=
water	12:11	0:0	2	path1
water	12:16	0:0	2	;
if	13:4	14:14	2	(* path == '/')
cond	13:8	13:17	3	* path == '/'
op	13:8	0:0	4	*
water	13:9	0:0	4	path
op	13:14	0:0	4	==
water	13:17	0:0	4	'/'
stmts	14:8	14:14	3	
water	14:8	0:0	4	path
op	14:12	0:0	4	++
water	14:14	0:0	4	;
for	15:4	21:4	2	(stream = config . first_stream ;stream;stream = stream -> next)
forinit	15:8	15:36	3	stream = config . first_stream ;
water	15:8	0:0	4	stream
op	15:15	0:0	4	=
water	15:17	0:0	4	config
op	15:23	0:0	4	.
water	15:24	0:0	4	first_stream
water	15:36	0:0	4	;
cond	15:38	15:38	3	stream
water	15:38	0:0	4	stream
forexpr	15:46	15:63	3	stream = stream -> next
water	15:46	0:0	4	stream
op	15:53	0:0	4	=
water	15:55	0:0	4	stream
op	15:61	0:0	4	->
water	15:63	0:0	4	next
stmts	15:69	21:4	3	
water	15:69	0:0	4	{
if	16:8	20:8	4	(! stream -> is_feed && stream -> fmt && !strcmp (stream -> fmt -> name ,"rtp" ) && !strcmp (path ,stream -> filename ))
cond	16:12	18:42	5	! stream -> is_feed && stream -> fmt && !strcmp (stream -> fmt -> name ,"rtp" ) && !strcmp (path ,stream -> filename )
op	16:12	0:0	6	!
water	16:13	0:0	6	stream
op	16:19	0:0	6	->
water	16:21	0:0	6	is_feed
op	16:29	0:0	6	&&
water	17:12	0:0	6	stream
op	17:18	0:0	6	->
water	17:20	0:0	6	fmt
op	17:24	0:0	6	&&
op	17:27	0:0	6	!
call	17:28	17:59	6	strcmp
arg	17:35	17:52	7	stream->fmt->name
water	17:35	0:0	8	stream
op	17:41	0:0	8	->
water	17:43	0:0	8	fmt
op	17:46	0:0	8	->
water	17:48	0:0	8	name
arg	17:54	17:59	7	"rtp"
water	17:54	0:0	8	"rtp"
op	17:61	0:0	6	&&
op	18:12	0:0	6	!
call	18:13	18:42	6	strcmp
arg	18:20	18:24	7	path
water	18:20	0:0	8	path
arg	18:26	18:42	7	stream->filename
water	18:26	0:0	8	stream
op	18:32	0:0	8	->
water	18:34	0:0	8	filename
stmts	18:45	20:8	5	
water	18:45	0:0	6	{
goto	19:12	19:22	6	found
water	19:17	0:0	7	found
water	20:8	0:0	6	}
water	21:4	0:0	4	}
call	23:4	23:45	2	rtsp_reply_error
arg	23:21	23:22	3	c
water	23:21	0:0	4	c
arg	23:24	23:45	3	RTSP_STATUS_NOT_FOUND
water	23:24	0:0	4	RTSP_STATUS_NOT_FOUND
water	23:46	0:0	2	;
return	24:4	24:10	2	
label	25:1	25:6	2	found :
water	28:4	0:0	2	len
op	28:8	0:0	2	=
op	28:10	0:0	2	sizeof
water	28:16	0:0	2	(
water	28:17	0:0	2	my_addr
water	28:24	0:0	2	)
water	28:25	0:0	2	;
call	29:4	29:56	2	getsockname
arg	29:16	29:21	3	c->fd
water	29:16	0:0	4	c
op	29:17	0:0	4	->
water	29:19	0:0	4	fd
arg	29:23	29:50	3	(structsockaddr*)&my_addr
water	29:23	0:0	4	(
water	29:24	0:0	4	struct
water	29:31	0:0	4	sockaddr
op	29:40	0:0	4	*
water	29:41	0:0	4	)
op	29:42	0:0	4	&
water	29:43	0:0	4	my_addr
arg	29:52	29:56	3	&len
op	29:52	0:0	4	&
water	29:53	0:0	4	len
water	29:57	0:0	2	;
water	30:4	0:0	2	content_length
op	30:19	0:0	2	=
call	30:21	31:61	2	prepare_sdp_description
arg	30:45	30:51	3	stream
water	30:45	0:0	4	stream
arg	30:53	30:61	3	&content
op	30:53	0:0	4	&
water	30:54	0:0	4	content
arg	31:45	31:61	3	my_addr.sin_addr
water	31:45	0:0	4	my_addr
op	31:52	0:0	4	.
water	31:53	0:0	4	sin_addr
water	31:62	0:0	2	;
if	32:4	35:4	2	(content_length < 0)
cond	32:8	32:25	3	content_length < 0
water	32:8	0:0	4	content_length
op	32:23	0:0	4	<
water	32:25	0:0	4	0
stmts	32:28	35:4	3	
water	32:28	0:0	4	{
call	33:8	33:48	4	rtsp_reply_error
arg	33:25	33:26	5	c
water	33:25	0:0	6	c
arg	33:28	33:48	5	RTSP_STATUS_INTERNAL
water	33:28	0:0	6	RTSP_STATUS_INTERNAL
water	33:49	0:0	4	;
return	34:8	34:14	4	
water	35:4	0:0	4	}
call	36:4	36:39	2	rtsp_reply_header
arg	36:22	36:23	3	c
water	36:22	0:0	4	c
arg	36:25	36:39	3	RTSP_STATUS_OK
water	36:25	0:0	4	RTSP_STATUS_OK
water	36:40	0:0	2	;
call	37:4	37:51	2	avio_printf
arg	37:16	37:21	3	c->pb
water	37:16	0:0	4	c
op	37:17	0:0	4	->
water	37:19	0:0	4	pb
arg	37:23	37:46	3	"Content-Base: %s/\r\n"
water	37:23	0:0	4	"Content-Base: %s/\r\n"
arg	37:48	37:51	3	url
water	37:48	0:0	4	url
water	37:52	0:0	2	;
call	38:4	38:58	2	avio_printf
arg	38:16	38:21	3	c->pb
water	38:16	0:0	4	c
op	38:17	0:0	4	->
water	38:19	0:0	4	pb
arg	38:23	38:58	3	"Content-Type: application/sdp\r\n"
water	38:23	0:0	4	"Content-Type: application/sdp\r\n"
water	38:59	0:0	2	;
call	39:4	39:63	2	avio_printf
arg	39:16	39:21	3	c->pb
water	39:16	0:0	4	c
op	39:17	0:0	4	->
water	39:19	0:0	4	pb
arg	39:23	39:47	3	"Content-Length: %d\r\n"
water	39:23	0:0	4	"Content-Length: %d\r\n"
arg	39:49	39:63	3	content_length
water	39:49	0:0	4	content_length
water	39:64	0:0	2	;
call	40:4	40:29	2	avio_printf
arg	40:16	40:21	3	c->pb
water	40:16	0:0	4	c
op	40:17	0:0	4	->
water	40:19	0:0	4	pb
arg	40:23	40:29	3	"\r\n"
water	40:23	0:0	4	"\r\n"
water	40:30	0:0	2	;
call	41:4	41:45	2	avio_write
arg	41:15	41:20	3	c->pb
water	41:15	0:0	4	c
op	41:16	0:0	4	->
water	41:18	0:0	4	pb
arg	41:22	41:29	3	content
water	41:22	0:0	4	content
arg	41:31	41:45	3	content_length
water	41:31	0:0	4	content_length
water	41:46	0:0	2	;
call	42:4	42:19	2	av_free
arg	42:12	42:19	3	content
water	42:12	0:0	4	content
water	42:20	0:0	2	;
