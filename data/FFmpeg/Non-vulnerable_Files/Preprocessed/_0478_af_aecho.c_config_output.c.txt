func	2:0	34:0	0	static int	config_output
params	2:24	0:0	1	
param	2:25	2:46	2	AVFilterLink *	outlink
stmnts	0:0	33:65	1	
decl	4:4	4:39	2	AVFilterContext	*ctx
op	4:25	0:0	2	=
water	4:27	0:0	2	outlink
op	4:34	0:0	2	->
water	4:36	0:0	2	src
decl	5:4	5:35	2	AudioEchoContext	*s
op	5:24	0:0	2	=
water	5:26	0:0	2	ctx
op	5:29	0:0	2	->
water	5:31	0:0	2	priv
decl	6:4	6:22	2	float	volume
op	6:17	0:0	2	=
water	6:19	0:0	2	1
op	6:20	0:0	2	.
water	6:21	0:0	2	0
decl	7:4	7:9	2	int	i
for	8:4	12:4	2	(i = 0 ;i < s -> nb_echoes;i ++)
forinit	8:9	8:14	3	i = 0 ;
water	8:9	0:0	4	i
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:23	3	i < s -> nb_echoes
water	8:16	0:0	4	i
op	8:18	0:0	4	<
water	8:20	0:0	4	s
op	8:21	0:0	4	->
water	8:23	0:0	4	nb_echoes
forexpr	8:34	8:35	3	i ++
water	8:34	0:0	4	i
op	8:35	0:0	4	++
stmts	8:39	12:4	3	
water	8:39	0:0	4	{
water	9:8	0:0	4	s
op	9:9	0:0	4	->
water	9:11	0:0	4	samples
op	9:18	0:0	4	[
water	9:19	0:0	4	i
op	9:20	0:0	4	]
op	9:22	0:0	4	=
water	9:24	0:0	4	s
op	9:25	0:0	4	->
water	9:27	0:0	4	delay
op	9:32	0:0	4	[
water	9:33	0:0	4	i
op	9:34	0:0	4	]
op	9:36	0:0	4	*
water	9:38	0:0	4	outlink
op	9:45	0:0	4	->
water	9:47	0:0	4	sample_rate
op	9:59	0:0	4	/
water	9:61	0:0	4	1000
op	9:65	0:0	4	.
water	9:66	0:0	4	0
water	9:67	0:0	4	;
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	max_samples
op	10:23	0:0	4	=
call	10:25	10:60	4	FFMAX
arg	10:31	10:45	5	s->max_samples
water	10:31	0:0	6	s
op	10:32	0:0	6	->
water	10:34	0:0	6	max_samples
arg	10:47	10:60	5	s->samples[i]
water	10:47	0:0	6	s
op	10:48	0:0	6	->
water	10:50	0:0	6	samples
op	10:57	0:0	6	[
water	10:58	0:0	6	i
op	10:59	0:0	6	]
water	10:61	0:0	4	;
water	11:8	0:0	4	volume
op	11:15	0:0	4	+=
water	11:18	0:0	4	s
op	11:19	0:0	4	->
water	11:21	0:0	4	decay
op	11:26	0:0	4	[
water	11:27	0:0	4	i
op	11:28	0:0	4	]
water	11:29	0:0	4	;
water	12:4	0:0	4	}
if	13:4	16:4	2	(s -> max_samples <= 0)
cond	13:8	13:26	3	s -> max_samples <= 0
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	max_samples
op	13:23	0:0	4	<=
water	13:26	0:0	4	0
stmts	13:29	16:4	3	
water	13:29	0:0	4	{
call	14:8	14:78	4	av_log
arg	14:15	14:18	5	ctx
water	14:15	0:0	6	ctx
arg	14:20	14:32	5	AV_LOG_ERROR
water	14:20	0:0	6	AV_LOG_ERROR
arg	14:34	14:78	5	"Nothing to echo - missing delay samples.\n"
water	14:34	0:0	6	"Nothing to echo - missing delay samples.\n"
water	14:79	0:0	4	;
return	15:8	15:30	4	AVERROR(EINVAL)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	EINVAL
water	15:23	0:0	7	EINVAL
water	16:4	0:0	4	}
water	17:4	0:0	2	s
op	17:5	0:0	2	->
water	17:7	0:0	2	fade_out
op	17:16	0:0	2	=
water	17:18	0:0	2	s
op	17:19	0:0	2	->
water	17:21	0:0	2	max_samples
water	17:32	0:0	2	;
if	18:4	20:75	2	(volume * s -> in_gain * s -> out_gain > 1 . 0)
cond	18:8	18:46	3	volume * s -> in_gain * s -> out_gain > 1 . 0
water	18:8	0:0	4	volume
op	18:15	0:0	4	*
water	18:17	0:0	4	s
op	18:18	0:0	4	->
water	18:20	0:0	4	in_gain
op	18:28	0:0	4	*
water	18:30	0:0	4	s
op	18:31	0:0	4	->
water	18:33	0:0	4	out_gain
op	18:42	0:0	4	>
water	18:44	0:0	4	1
op	18:45	0:0	4	.
water	18:46	0:0	4	0
stmts	19:8	20:75	3	
call	19:8	20:74	4	av_log
arg	19:15	19:18	5	ctx
water	19:15	0:0	6	ctx
arg	19:20	19:34	5	AV_LOG_WARNING
water	19:20	0:0	6	AV_LOG_WARNING
arg	20:15	20:61	5	"out_gain %f can cause saturation of output\n"
water	20:15	0:0	6	"out_gain %f can cause saturation of output\n"
arg	20:63	20:74	5	s->out_gain
water	20:63	0:0	6	s
op	20:64	0:0	6	->
water	20:66	0:0	6	out_gain
water	20:75	0:0	4	;
switch	21:4	26:4	2	(outlink -> format)
cond	21:12	21:21	3	outlink -> format
water	21:12	0:0	4	outlink
op	21:19	0:0	4	->
water	21:21	0:0	4	format
stmts	21:29	26:4	3	
water	21:29	0:0	4	{
label	22:4	22:27	4	case AV_SAMPLE_FMT_DBLP :
water	22:29	0:0	4	s
op	22:30	0:0	4	->
water	22:32	0:0	4	echo_samples
op	22:45	0:0	4	=
water	22:47	0:0	4	echo_samples_dblp
water	22:64	0:0	4	;
break	22:66	22:71	4	
label	23:4	23:27	4	case AV_SAMPLE_FMT_FLTP :
water	23:29	0:0	4	s
op	23:30	0:0	4	->
water	23:32	0:0	4	echo_samples
op	23:45	0:0	4	=
water	23:47	0:0	4	echo_samples_fltp
water	23:64	0:0	4	;
break	23:66	23:71	4	
label	24:4	24:27	4	case AV_SAMPLE_FMT_S16P :
water	24:29	0:0	4	s
op	24:30	0:0	4	->
water	24:32	0:0	4	echo_samples
op	24:45	0:0	4	=
water	24:47	0:0	4	echo_samples_s16p
water	24:64	0:0	4	;
break	24:66	24:71	4	
label	25:4	25:27	4	case AV_SAMPLE_FMT_S32P :
water	25:29	0:0	4	s
op	25:30	0:0	4	->
water	25:32	0:0	4	echo_samples
op	25:45	0:0	4	=
water	25:47	0:0	4	echo_samples_s32p
water	25:64	0:0	4	;
break	25:66	25:71	4	
water	26:4	0:0	4	}
if	27:4	28:34	2	(s -> delayptrs)
cond	27:8	27:11	3	s -> delayptrs
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	delayptrs
stmts	28:8	28:34	3	
call	28:8	28:33	4	av_freep
arg	28:17	28:33	5	&s->delayptrs[0]
op	28:17	0:0	6	&
water	28:18	0:0	6	s
op	28:19	0:0	6	->
water	28:21	0:0	6	delayptrs
op	28:30	0:0	6	[
water	28:31	0:0	6	0
op	28:32	0:0	6	]
water	28:34	0:0	4	;
call	29:4	29:26	2	av_freep
arg	29:13	29:26	3	&s->delayptrs
op	29:13	0:0	4	&
water	29:14	0:0	4	s
op	29:15	0:0	4	->
water	29:17	0:0	4	delayptrs
water	29:27	0:0	2	;
return	30:4	33:65	2	av_samples_alloc_array_and_samples(&s->delayptrs,NULL,outlink->channels,s->max_samples,outlink->format,0)
call	30:11	33:64	3	av_samples_alloc_array_and_samples
arg	30:46	30:59	4	&s->delayptrs
op	30:46	0:0	5	&
water	30:47	0:0	5	s
op	30:48	0:0	5	->
water	30:50	0:0	5	delayptrs
arg	30:61	30:65	4	NULL
water	30:61	0:0	5	NULL
arg	31:46	31:63	4	outlink->channels
water	31:46	0:0	5	outlink
op	31:53	0:0	5	->
water	31:55	0:0	5	channels
arg	32:46	32:60	4	s->max_samples
water	32:46	0:0	5	s
op	32:47	0:0	5	->
water	32:49	0:0	5	max_samples
arg	33:46	33:61	4	outlink->format
water	33:46	0:0	5	outlink
op	33:53	0:0	5	->
water	33:55	0:0	5	format
arg	33:63	33:64	4	0
water	33:63	0:0	5	0
