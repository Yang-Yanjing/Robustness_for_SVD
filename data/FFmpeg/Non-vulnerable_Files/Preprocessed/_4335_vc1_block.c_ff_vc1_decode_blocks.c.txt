func	1:0	35:0	0	void	ff_vc1_decode_blocks
params	1:25	0:0	1	
param	1:26	1:39	2	VC1Context *	v
stmnts	3:4	34:4	1	
water	3:4	0:0	2	v
op	3:5	0:0	2	->
water	3:7	0:0	2	s
op	3:8	0:0	2	.
water	3:9	0:0	2	esc3_level_length
op	3:27	0:0	2	=
water	3:29	0:0	2	0
water	3:30	0:0	2	;
if	4:4	6:4	2	(v -> x8_type)
cond	4:8	4:11	3	v -> x8_type
water	4:8	0:0	4	v
op	4:9	0:0	4	->
water	4:11	0:0	4	x8_type
stmts	4:20	6:4	3	
water	4:20	0:0	4	{
call	5:8	5:85	4	ff_intrax8_decode_picture
arg	5:34	5:40	5	&v->x8
op	5:34	0:0	6	&
water	5:35	0:0	6	v
op	5:36	0:0	6	->
water	5:38	0:0	6	x8
arg	5:42	5:61	5	2*v->pq+v->halfpq
water	5:42	0:0	6	2
op	5:43	0:0	6	*
water	5:44	0:0	6	v
op	5:45	0:0	6	->
water	5:47	0:0	6	pq
op	5:50	0:0	6	+
water	5:52	0:0	6	v
op	5:53	0:0	6	->
water	5:55	0:0	6	halfpq
arg	5:63	5:85	5	v->pq*!v->pquantizer
water	5:63	0:0	6	v
op	5:64	0:0	6	->
water	5:66	0:0	6	pq
op	5:69	0:0	6	*
op	5:71	0:0	6	!
water	5:72	0:0	6	v
op	5:73	0:0	6	->
water	5:75	0:0	6	pquantizer
water	5:86	0:0	4	;
water	6:4	0:0	4	}
else	6:6	34:4	2
stmts	6:11	34:4	3	
water	6:11	0:0	4	{
water	7:8	0:0	4	v
op	7:9	0:0	4	->
water	7:11	0:0	4	cur_blk_idx
op	7:27	0:0	4	=
water	7:30	0:0	4	0
water	7:31	0:0	4	;
water	8:8	0:0	4	v
op	8:9	0:0	4	->
water	8:11	0:0	4	left_blk_idx
op	8:27	0:0	4	=
op	8:29	0:0	4	-
water	8:30	0:0	4	1
water	8:31	0:0	4	;
water	9:8	0:0	4	v
op	9:9	0:0	4	->
water	9:11	0:0	4	topleft_blk_idx
op	9:27	0:0	4	=
water	9:30	0:0	4	1
water	9:31	0:0	4	;
water	10:8	0:0	4	v
op	10:9	0:0	4	->
water	10:11	0:0	4	top_blk_idx
op	10:27	0:0	4	=
water	10:30	0:0	4	2
water	10:31	0:0	4	;
switch	11:8	33:8	4	(v -> s . pict_type)
cond	11:16	11:21	5	v -> s . pict_type
water	11:16	0:0	6	v
op	11:17	0:0	6	->
water	11:19	0:0	6	s
op	11:20	0:0	6	.
water	11:21	0:0	6	pict_type
stmts	11:32	33:8	5	
water	11:32	0:0	6	{
label	12:8	12:30	6	case AV_PICTURE_TYPE_I :
if	13:12	14:42	6	(v -> profile == PROFILE_ADVANCED)
cond	13:16	13:30	7	v -> profile == PROFILE_ADVANCED
water	13:16	0:0	8	v
op	13:17	0:0	8	->
water	13:19	0:0	8	profile
op	13:27	0:0	8	==
water	13:30	0:0	8	PROFILE_ADVANCED
stmts	14:16	14:42	7	
call	14:16	14:41	8	vc1_decode_i_blocks_adv
arg	14:40	14:41	9	v
water	14:40	0:0	10	v
water	14:42	0:0	8	;
else	15:12	16:38	6
stmts	16:16	16:38	7	
call	16:16	16:37	8	vc1_decode_i_blocks
arg	16:36	16:37	9	v
water	16:36	0:0	10	v
water	16:38	0:0	8	;
break	17:12	17:17	6	
label	18:8	18:30	6	case AV_PICTURE_TYPE_P :
if	19:12	20:41	6	(v -> p_frame_skipped)
cond	19:16	19:19	7	v -> p_frame_skipped
water	19:16	0:0	8	v
op	19:17	0:0	8	->
water	19:19	0:0	8	p_frame_skipped
stmts	20:16	20:41	7	
call	20:16	20:40	8	vc1_decode_skip_blocks
arg	20:39	20:40	9	v
water	20:39	0:0	10	v
water	20:41	0:0	8	;
else	21:12	22:38	6
stmts	22:16	22:38	7	
call	22:16	22:37	8	vc1_decode_p_blocks
arg	22:36	22:37	9	v
water	22:36	0:0	10	v
water	22:38	0:0	8	;
break	23:12	23:17	6	
label	24:8	24:30	6	case AV_PICTURE_TYPE_B :
if	25:12	30:12	6	(v -> bi_type)
cond	25:16	25:19	7	v -> bi_type
water	25:16	0:0	8	v
op	25:17	0:0	8	->
water	25:19	0:0	8	bi_type
stmts	25:28	30:12	7	
water	25:28	0:0	8	{
if	26:16	27:46	8	(v -> profile == PROFILE_ADVANCED)
cond	26:20	26:34	9	v -> profile == PROFILE_ADVANCED
water	26:20	0:0	10	v
op	26:21	0:0	10	->
water	26:23	0:0	10	profile
op	26:31	0:0	10	==
water	26:34	0:0	10	PROFILE_ADVANCED
stmts	27:20	27:46	9	
call	27:20	27:45	10	vc1_decode_i_blocks_adv
arg	27:44	27:45	11	v
water	27:44	0:0	12	v
water	27:46	0:0	10	;
else	28:16	29:42	8
stmts	29:20	29:42	9	
call	29:20	29:41	10	vc1_decode_i_blocks
arg	29:40	29:41	11	v
water	29:40	0:0	12	v
water	29:42	0:0	10	;
water	30:12	0:0	8	}
else	30:14	31:38	6
stmts	31:16	31:38	7	
call	31:16	31:37	8	vc1_decode_b_blocks
arg	31:36	31:37	9	v
water	31:36	0:0	10	v
water	31:38	0:0	8	;
break	32:12	32:17	6	
water	33:8	0:0	6	}
water	34:4	0:0	4	}
