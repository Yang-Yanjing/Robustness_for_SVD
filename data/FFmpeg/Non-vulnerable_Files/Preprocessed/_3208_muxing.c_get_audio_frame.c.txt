func	1:0	20:0	0	static AVFrame *	get_audio_frame
params	1:31	0:0	1	
param	1:32	1:49	2	OutputStream *	ost
stmnts	0:0	19:16	1	
decl	3:4	3:35	2	AVFrame	*frame
op	3:19	0:0	2	=
water	3:21	0:0	2	ost
op	3:24	0:0	2	->
water	3:26	0:0	2	tmp_frame
decl	4:4	4:15	2	int	j
water	4:9	0:0	2	,
decl	4:4	4:15	2	int	i
water	4:12	0:0	2	,
decl	4:4	4:15	2	int	v
decl	5:4	5:41	2	int16_t	*q
op	5:15	0:0	2	=
water	5:17	0:0	2	(
water	5:18	0:0	2	int16_t
op	5:25	0:0	2	*
water	5:26	0:0	2	)
water	5:27	0:0	2	frame
op	5:32	0:0	2	->
water	5:34	0:0	2	data
op	5:38	0:0	2	[
water	5:39	0:0	2	0
op	5:40	0:0	2	]
if	7:4	9:19	2	(av_compare_ts (ost -> next_pts ,ost -> st -> codec -> time_base ,STREAM_DURATION ,( AVRational ) { 1 , 1 } ) >= 0)
cond	7:8	8:64	3	av_compare_ts (ost -> next_pts ,ost -> st -> codec -> time_base ,STREAM_DURATION ,( AVRational ) { 1 , 1 } ) >= 0
call	7:8	8:59	4	av_compare_ts
arg	7:22	7:35	5	ost->next_pts
water	7:22	0:0	6	ost
op	7:25	0:0	6	->
water	7:27	0:0	6	next_pts
arg	7:37	7:62	5	ost->st->codec->time_base
water	7:37	0:0	6	ost
op	7:40	0:0	6	->
water	7:42	0:0	6	st
op	7:44	0:0	6	->
water	7:46	0:0	6	codec
op	7:51	0:0	6	->
water	7:53	0:0	6	time_base
arg	8:22	8:37	5	STREAM_DURATION
water	8:22	0:0	6	STREAM_DURATION
arg	8:39	8:59	5	(AVRational){1,1}
water	8:39	0:0	6	(
water	8:40	0:0	6	AVRational
water	8:50	0:0	6	)
water	8:51	0:0	6	{
water	8:53	0:0	6	1
water	8:54	0:0	6	,
water	8:56	0:0	6	1
water	8:58	0:0	6	}
op	8:61	0:0	4	>=
water	8:64	0:0	4	0
stmts	9:8	9:19	3	
return	9:8	9:19	4	NULL
water	9:15	0:0	5	NULL
for	10:4	16:4	2	(j = 0 ;j < frame -> nb_samples;j ++)
forinit	10:9	10:14	3	j = 0 ;
water	10:9	0:0	4	j
op	10:11	0:0	4	=
water	10:13	0:0	4	0
water	10:14	0:0	4	;
cond	10:16	10:26	3	j < frame -> nb_samples
water	10:16	0:0	4	j
op	10:18	0:0	4	<
water	10:19	0:0	4	frame
op	10:24	0:0	4	->
water	10:26	0:0	4	nb_samples
forexpr	10:38	10:39	3	j ++
water	10:38	0:0	4	j
op	10:39	0:0	4	++
stmts	10:43	16:4	3	
water	10:43	0:0	4	{
water	11:8	0:0	4	v
op	11:10	0:0	4	=
call	11:12	11:37	4	(int)
arg	11:18	11:37	5	sin(ost->t)*10000
call	11:18	11:28	6	sin
arg	11:22	11:28	7	ost->t
water	11:22	0:0	8	ost
op	11:25	0:0	8	->
water	11:27	0:0	8	t
op	11:30	0:0	6	*
water	11:32	0:0	6	10000
water	11:38	0:0	4	;
for	12:8	13:20	4	(i = 0 ;i < ost -> st -> codec -> channels;i ++)
forinit	12:13	12:18	5	i = 0 ;
water	12:13	0:0	6	i
op	12:15	0:0	6	=
water	12:17	0:0	6	0
water	12:18	0:0	6	;
cond	12:20	12:40	5	i < ost -> st -> codec -> channels
water	12:20	0:0	6	i
op	12:22	0:0	6	<
water	12:24	0:0	6	ost
op	12:27	0:0	6	->
water	12:29	0:0	6	st
op	12:31	0:0	6	->
water	12:33	0:0	6	codec
op	12:38	0:0	6	->
water	12:40	0:0	6	channels
forexpr	12:50	12:51	5	i ++
water	12:50	0:0	6	i
op	12:51	0:0	6	++
stmts	13:12	13:20	5	
op	13:12	0:0	6	*
water	13:13	0:0	6	q
op	13:14	0:0	6	++
op	13:17	0:0	6	=
water	13:19	0:0	6	v
water	13:20	0:0	6	;
water	14:8	0:0	4	ost
op	14:11	0:0	4	->
water	14:13	0:0	4	t
op	14:19	0:0	4	+=
water	14:22	0:0	4	ost
op	14:25	0:0	4	->
water	14:27	0:0	4	tincr
water	14:32	0:0	4	;
water	15:8	0:0	4	ost
op	15:11	0:0	4	->
water	15:13	0:0	4	tincr
op	15:19	0:0	4	+=
water	15:22	0:0	4	ost
op	15:25	0:0	4	->
water	15:27	0:0	4	tincr2
water	15:33	0:0	4	;
water	16:4	0:0	4	}
water	17:4	0:0	2	frame
op	17:9	0:0	2	->
water	17:11	0:0	2	pts
op	17:15	0:0	2	=
water	17:17	0:0	2	ost
op	17:20	0:0	2	->
water	17:22	0:0	2	next_pts
water	17:30	0:0	2	;
water	18:4	0:0	2	ost
op	18:7	0:0	2	->
water	18:9	0:0	2	next_pts
op	18:19	0:0	2	+=
water	18:22	0:0	2	frame
op	18:27	0:0	2	->
water	18:29	0:0	2	nb_samples
water	18:39	0:0	2	;
return	19:4	19:16	2	frame
water	19:11	0:0	3	frame
