func	1:0	107:0	0	static void	encode_window_bands_info
params	1:36	0:0	1	
param	1:37	1:53	2	AACEncContext *	s
param	1:55	1:80	2	SingleChannelElement *	sce
param	2:37	2:44	2	int	win
param	2:46	2:59	2	int	group_len
param	2:61	2:79	2	const float	lambda
stmnts	4:4	106:4	1	
water	4:4	0:0	2	BandCodingPath
water	4:19	0:0	2	path
op	4:23	0:0	2	[
water	4:24	0:0	2	120
op	4:27	0:0	2	]
op	4:28	0:0	2	[
water	4:29	0:0	2	CB_TOT_ALL
op	4:39	0:0	2	]
water	4:40	0:0	2	;
decl	5:4	5:31	2	int	w
water	5:9	0:0	2	,
decl	5:4	5:31	2	int	swb
water	5:14	0:0	2	,
decl	5:4	5:31	2	int	cb
water	5:18	0:0	2	,
decl	5:4	5:31	2	int	start
water	5:25	0:0	2	,
decl	5:4	5:31	2	int	size
decl	6:4	6:12	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	j
decl	7:4	7:41	2	const int	max_sfb
op	7:23	0:0	2	=
water	7:25	0:0	2	sce
op	7:28	0:0	2	->
water	7:30	0:0	2	ics
op	7:33	0:0	2	.
water	7:34	0:0	2	max_sfb
decl	8:4	8:58	2	const int	run_bits
op	8:23	0:0	2	=
water	8:25	0:0	2	sce
op	8:28	0:0	2	->
water	8:30	0:0	2	ics
op	8:33	0:0	2	.
water	8:34	0:0	2	num_windows
op	8:46	0:0	2	==
water	8:49	0:0	2	1
water	8:51	0:0	2	?
water	8:53	0:0	2	5
water	8:55	0:0	2	:
water	8:57	0:0	2	3
decl	9:4	9:44	2	const int	run_esc
op	9:23	0:0	2	=
water	9:25	0:0	2	(
water	9:26	0:0	2	1
op	9:28	0:0	2	<<
water	9:31	0:0	2	run_bits
water	9:39	0:0	2	)
op	9:41	0:0	2	-
water	9:43	0:0	2	1
decl	10:4	10:24	2	int	idx
water	10:11	0:0	2	,
decl	10:4	10:24	2	int	ppos
water	10:17	0:0	2	,
decl	10:4	10:24	2	int	count
decl	11:4	11:46	2	int	stackrun[120]
water	11:21	0:0	2	,
decl	11:4	11:46	2	int	stackcb[120]
water	11:35	0:0	2	,
decl	11:4	11:46	2	int	stack_len
decl	12:4	12:31	2	float	next_minrd
op	12:21	0:0	2	=
water	12:23	0:0	2	INFINITY
decl	13:4	13:22	2	int	next_mincb
op	13:19	0:0	2	=
water	13:21	0:0	2	0
call	14:4	14:44	2	abs_pow34_v
arg	14:16	14:25	3	s->scoefs
water	14:16	0:0	4	s
op	14:17	0:0	4	->
water	14:19	0:0	4	scoefs
arg	14:27	14:38	3	sce->coeffs
water	14:27	0:0	4	sce
op	14:30	0:0	4	->
water	14:32	0:0	4	coeffs
arg	14:40	14:44	3	1024
water	14:40	0:0	4	1024
water	14:45	0:0	2	;
water	15:4	0:0	2	start
op	15:10	0:0	2	=
water	15:12	0:0	2	win
op	15:15	0:0	2	*
water	15:16	0:0	2	128
water	15:19	0:0	2	;
for	16:4	20:4	2	(cb = 0 ;cb < CB_TOT_ALL;cb ++)
forinit	16:9	16:15	3	cb = 0 ;
water	16:9	0:0	4	cb
op	16:12	0:0	4	=
water	16:14	0:0	4	0
water	16:15	0:0	4	;
cond	16:17	16:22	3	cb < CB_TOT_ALL
water	16:17	0:0	4	cb
op	16:20	0:0	4	<
water	16:22	0:0	4	CB_TOT_ALL
forexpr	16:34	16:36	3	cb ++
water	16:34	0:0	4	cb
op	16:36	0:0	4	++
stmts	16:40	20:4	3	
water	16:40	0:0	4	{
water	17:8	0:0	4	path
op	17:12	0:0	4	[
water	17:13	0:0	4	0
op	17:14	0:0	4	]
op	17:15	0:0	4	[
water	17:16	0:0	4	cb
op	17:18	0:0	4	]
op	17:19	0:0	4	.
water	17:20	0:0	4	cost
op	17:29	0:0	4	=
water	17:31	0:0	4	0
op	17:32	0:0	4	.
water	17:33	0:0	4	0
water	17:34	0:0	4	f
water	17:35	0:0	4	;
water	18:8	0:0	4	path
op	18:12	0:0	4	[
water	18:13	0:0	4	0
op	18:14	0:0	4	]
op	18:15	0:0	4	[
water	18:16	0:0	4	cb
op	18:18	0:0	4	]
op	18:19	0:0	4	.
water	18:20	0:0	4	prev_idx
op	18:29	0:0	4	=
op	18:31	0:0	4	-
water	18:32	0:0	4	1
water	18:33	0:0	4	;
water	19:8	0:0	4	path
op	19:12	0:0	4	[
water	19:13	0:0	4	0
op	19:14	0:0	4	]
op	19:15	0:0	4	[
water	19:16	0:0	4	cb
op	19:18	0:0	4	]
op	19:19	0:0	4	.
water	19:20	0:0	4	run
op	19:29	0:0	4	=
water	19:31	0:0	4	0
water	19:32	0:0	4	;
water	20:4	0:0	4	}
for	21:4	72:4	2	(swb = 0 ;swb < max_sfb;swb ++)
forinit	21:9	21:16	3	swb = 0 ;
water	21:9	0:0	4	swb
op	21:13	0:0	4	=
water	21:15	0:0	4	0
water	21:16	0:0	4	;
cond	21:18	21:24	3	swb < max_sfb
water	21:18	0:0	4	swb
op	21:22	0:0	4	<
water	21:24	0:0	4	max_sfb
forexpr	21:33	21:36	3	swb ++
water	21:33	0:0	4	swb
op	21:36	0:0	4	++
stmts	21:40	72:4	3	
water	21:40	0:0	4	{
water	22:8	0:0	4	size
op	22:13	0:0	4	=
water	22:15	0:0	4	sce
op	22:18	0:0	4	->
water	22:20	0:0	4	ics
op	22:23	0:0	4	.
water	22:24	0:0	4	swb_sizes
op	22:33	0:0	4	[
water	22:34	0:0	4	swb
op	22:37	0:0	4	]
water	22:38	0:0	4	;
if	23:8	29:8	4	(sce -> zeroes [ win * 16 + swb ])
cond	23:12	23:36	5	sce -> zeroes [ win * 16 + swb ]
water	23:12	0:0	6	sce
op	23:15	0:0	6	->
water	23:17	0:0	6	zeroes
op	23:23	0:0	6	[
water	23:24	0:0	6	win
op	23:27	0:0	6	*
water	23:28	0:0	6	16
op	23:31	0:0	6	+
water	23:33	0:0	6	swb
op	23:36	0:0	6	]
stmts	23:39	29:8	5	
water	23:39	0:0	6	{
for	24:12	28:12	6	(cb = 0 ;cb < CB_TOT_ALL;cb ++)
forinit	24:17	24:23	7	cb = 0 ;
water	24:17	0:0	8	cb
op	24:20	0:0	8	=
water	24:22	0:0	8	0
water	24:23	0:0	8	;
cond	24:25	24:30	7	cb < CB_TOT_ALL
water	24:25	0:0	8	cb
op	24:28	0:0	8	<
water	24:30	0:0	8	CB_TOT_ALL
forexpr	24:42	24:44	7	cb ++
water	24:42	0:0	8	cb
op	24:44	0:0	8	++
stmts	24:48	28:12	7	
water	24:48	0:0	8	{
water	25:16	0:0	8	path
op	25:20	0:0	8	[
water	25:21	0:0	8	swb
op	25:24	0:0	8	+
water	25:25	0:0	8	1
op	25:26	0:0	8	]
op	25:27	0:0	8	[
water	25:28	0:0	8	cb
op	25:30	0:0	8	]
op	25:31	0:0	8	.
water	25:32	0:0	8	prev_idx
op	25:41	0:0	8	=
water	25:43	0:0	8	cb
water	25:45	0:0	8	;
water	26:16	0:0	8	path
op	26:20	0:0	8	[
water	26:21	0:0	8	swb
op	26:24	0:0	8	+
water	26:25	0:0	8	1
op	26:26	0:0	8	]
op	26:27	0:0	8	[
water	26:28	0:0	8	cb
op	26:30	0:0	8	]
op	26:31	0:0	8	.
water	26:32	0:0	8	cost
op	26:41	0:0	8	=
water	26:43	0:0	8	path
op	26:47	0:0	8	[
water	26:48	0:0	8	swb
op	26:51	0:0	8	]
op	26:52	0:0	8	[
water	26:53	0:0	8	cb
op	26:55	0:0	8	]
op	26:56	0:0	8	.
water	26:57	0:0	8	cost
water	26:61	0:0	8	;
water	27:16	0:0	8	path
op	27:20	0:0	8	[
water	27:21	0:0	8	swb
op	27:24	0:0	8	+
water	27:25	0:0	8	1
op	27:26	0:0	8	]
op	27:27	0:0	8	[
water	27:28	0:0	8	cb
op	27:30	0:0	8	]
op	27:31	0:0	8	.
water	27:32	0:0	8	run
op	27:41	0:0	8	=
water	27:43	0:0	8	path
op	27:47	0:0	8	[
water	27:48	0:0	8	swb
op	27:51	0:0	8	]
op	27:52	0:0	8	[
water	27:53	0:0	8	cb
op	27:55	0:0	8	]
op	27:56	0:0	8	.
water	27:57	0:0	8	run
op	27:61	0:0	8	+
water	27:63	0:0	8	1
water	27:64	0:0	8	;
water	28:12	0:0	8	}
water	29:8	0:0	6	}
else	29:10	70:8	4
stmts	29:15	70:8	5	
water	29:15	0:0	6	{
decl	30:12	30:36	6	float	minrd
op	30:24	0:0	6	=
water	30:26	0:0	6	next_minrd
decl	31:12	31:34	6	int	mincb
op	31:22	0:0	6	=
water	31:24	0:0	6	next_mincb
water	32:12	0:0	6	next_minrd
op	32:23	0:0	6	=
water	32:25	0:0	6	INFINITY
water	32:33	0:0	6	;
water	33:12	0:0	6	next_mincb
op	33:23	0:0	6	=
water	33:25	0:0	6	0
water	33:26	0:0	6	;
for	34:12	69:12	6	(cb = 0 ;cb < CB_TOT_ALL;cb ++)
forinit	34:17	34:23	7	cb = 0 ;
water	34:17	0:0	8	cb
op	34:20	0:0	8	=
water	34:22	0:0	8	0
water	34:23	0:0	8	;
cond	34:25	34:30	7	cb < CB_TOT_ALL
water	34:25	0:0	8	cb
op	34:28	0:0	8	<
water	34:30	0:0	8	CB_TOT_ALL
forexpr	34:42	34:44	7	cb ++
water	34:42	0:0	8	cb
op	34:44	0:0	8	++
stmts	34:48	69:12	7	
water	34:48	0:0	8	{
decl	35:16	35:51	8	float	cost_stay_here
water	35:36	0:0	8	,
decl	35:16	35:51	8	float	cost_get_here
decl	36:16	36:31	8	float	rd
op	36:25	0:0	8	=
water	36:27	0:0	8	0
op	36:28	0:0	8	.
water	36:29	0:0	8	0
water	36:30	0:0	8	f
if	37:16	43:16	8	(cb >= 12 && sce -> band_type [ win * 16 + swb ] < aac_cb_out_map [ cb ] || cb < aac_cb_in_map [ sce -> band_type [ win * 16 + swb ] ] && sce -> band_type [ win * 16 + swb ] > aac_cb_out_map [ cb ])
cond	37:20	38:117	9	cb >= 12 && sce -> band_type [ win * 16 + swb ] < aac_cb_out_map [ cb ] || cb < aac_cb_in_map [ sce -> band_type [ win * 16 + swb ] ] && sce -> band_type [ win * 16 + swb ] > aac_cb_out_map [ cb ]
water	37:20	0:0	10	cb
op	37:23	0:0	10	>=
water	37:26	0:0	10	12
op	37:29	0:0	10	&&
water	37:32	0:0	10	sce
op	37:35	0:0	10	->
water	37:37	0:0	10	band_type
op	37:46	0:0	10	[
water	37:47	0:0	10	win
op	37:50	0:0	10	*
water	37:51	0:0	10	16
op	37:53	0:0	10	+
water	37:54	0:0	10	swb
op	37:57	0:0	10	]
op	37:59	0:0	10	<
water	37:61	0:0	10	aac_cb_out_map
op	37:75	0:0	10	[
water	37:76	0:0	10	cb
op	37:78	0:0	10	]
op	37:80	0:0	10	||
water	38:20	0:0	10	cb
op	38:24	0:0	10	<
water	38:26	0:0	10	aac_cb_in_map
op	38:39	0:0	10	[
water	38:40	0:0	10	sce
op	38:43	0:0	10	->
water	38:45	0:0	10	band_type
op	38:54	0:0	10	[
water	38:55	0:0	10	win
op	38:58	0:0	10	*
water	38:59	0:0	10	16
op	38:61	0:0	10	+
water	38:62	0:0	10	swb
op	38:65	0:0	10	]
op	38:66	0:0	10	]
op	38:68	0:0	10	&&
water	38:71	0:0	10	sce
op	38:74	0:0	10	->
water	38:76	0:0	10	band_type
op	38:85	0:0	10	[
water	38:86	0:0	10	win
op	38:89	0:0	10	*
water	38:90	0:0	10	16
op	38:92	0:0	10	+
water	38:93	0:0	10	swb
op	38:96	0:0	10	]
op	38:98	0:0	10	>
water	38:100	0:0	10	aac_cb_out_map
op	38:114	0:0	10	[
water	38:115	0:0	10	cb
op	38:117	0:0	10	]
stmts	38:120	43:16	9	
water	38:120	0:0	10	{
water	39:20	0:0	10	path
op	39:24	0:0	10	[
water	39:25	0:0	10	swb
op	39:28	0:0	10	+
water	39:29	0:0	10	1
op	39:30	0:0	10	]
op	39:31	0:0	10	[
water	39:32	0:0	10	cb
op	39:34	0:0	10	]
op	39:35	0:0	10	.
water	39:36	0:0	10	prev_idx
op	39:45	0:0	10	=
op	39:47	0:0	10	-
water	39:48	0:0	10	1
water	39:49	0:0	10	;
water	40:20	0:0	10	path
op	40:24	0:0	10	[
water	40:25	0:0	10	swb
op	40:28	0:0	10	+
water	40:29	0:0	10	1
op	40:30	0:0	10	]
op	40:31	0:0	10	[
water	40:32	0:0	10	cb
op	40:34	0:0	10	]
op	40:35	0:0	10	.
water	40:36	0:0	10	cost
op	40:45	0:0	10	=
water	40:47	0:0	10	INFINITY
water	40:55	0:0	10	;
water	41:20	0:0	10	path
op	41:24	0:0	10	[
water	41:25	0:0	10	swb
op	41:28	0:0	10	+
water	41:29	0:0	10	1
op	41:30	0:0	10	]
op	41:31	0:0	10	[
water	41:32	0:0	10	cb
op	41:34	0:0	10	]
op	41:35	0:0	10	.
water	41:36	0:0	10	run
op	41:45	0:0	10	=
water	41:47	0:0	10	path
op	41:51	0:0	10	[
water	41:52	0:0	10	swb
op	41:55	0:0	10	]
op	41:56	0:0	10	[
water	41:57	0:0	10	cb
op	41:59	0:0	10	]
op	41:60	0:0	10	.
water	41:61	0:0	10	run
op	41:65	0:0	10	+
water	41:67	0:0	10	1
water	41:68	0:0	10	;
continue	42:20	42:28	10	
water	43:16	0:0	10	}
for	44:16	50:16	8	(w = 0 ;w < group_len;w ++)
forinit	44:21	44:26	9	w = 0 ;
water	44:21	0:0	10	w
op	44:23	0:0	10	=
water	44:25	0:0	10	0
water	44:26	0:0	10	;
cond	44:28	44:32	9	w < group_len
water	44:28	0:0	10	w
op	44:30	0:0	10	<
water	44:32	0:0	10	group_len
forexpr	44:43	44:44	9	w ++
water	44:43	0:0	10	w
op	44:44	0:0	10	++
stmts	44:48	50:16	9	
water	44:48	0:0	10	{
decl	45:20	45:90	10	FFPsyBand	*band
op	45:36	0:0	10	=
op	45:38	0:0	10	&
water	45:39	0:0	10	s
op	45:40	0:0	10	->
water	45:42	0:0	10	psy
op	45:45	0:0	10	.
water	45:46	0:0	10	ch
op	45:48	0:0	10	[
water	45:49	0:0	10	s
op	45:50	0:0	10	->
water	45:52	0:0	10	cur_channel
op	45:63	0:0	10	]
op	45:64	0:0	10	.
water	45:65	0:0	10	psy_bands
op	45:74	0:0	10	[
water	45:75	0:0	10	(
water	45:76	0:0	10	win
op	45:79	0:0	10	+
water	45:80	0:0	10	w
water	45:81	0:0	10	)
op	45:82	0:0	10	*
water	45:83	0:0	10	16
op	45:85	0:0	10	+
water	45:86	0:0	10	swb
op	45:89	0:0	10	]
water	46:20	0:0	10	rd
op	46:23	0:0	10	+=
call	46:26	49:88	10	quantize_band_cost
arg	46:45	46:46	11	s
water	46:45	0:0	12	s
arg	46:48	46:75	11	&sce->coeffs[start+w*128]
op	46:48	0:0	12	&
water	46:49	0:0	12	sce
op	46:52	0:0	12	->
water	46:54	0:0	12	coeffs
op	46:60	0:0	12	[
water	46:61	0:0	12	start
op	46:67	0:0	12	+
water	46:69	0:0	12	w
op	46:70	0:0	12	*
water	46:71	0:0	12	128
op	46:74	0:0	12	]
arg	47:45	47:70	11	&s->scoefs[start+w*128]
op	47:45	0:0	12	&
water	47:46	0:0	12	s
op	47:47	0:0	12	->
water	47:49	0:0	12	scoefs
op	47:55	0:0	12	[
water	47:56	0:0	12	start
op	47:62	0:0	12	+
water	47:64	0:0	12	w
op	47:65	0:0	12	*
water	47:66	0:0	12	128
op	47:69	0:0	12	]
arg	47:72	47:76	11	size
water	47:72	0:0	12	size
arg	48:45	48:72	11	sce->sf_idx[(win+w)*16+swb]
water	48:45	0:0	12	sce
op	48:48	0:0	12	->
water	48:50	0:0	12	sf_idx
op	48:56	0:0	12	[
water	48:57	0:0	12	(
water	48:58	0:0	12	win
op	48:61	0:0	12	+
water	48:62	0:0	12	w
water	48:63	0:0	12	)
op	48:64	0:0	12	*
water	48:65	0:0	12	16
op	48:67	0:0	12	+
water	48:68	0:0	12	swb
op	48:71	0:0	12	]
arg	48:74	48:92	11	aac_cb_out_map[cb]
water	48:74	0:0	12	aac_cb_out_map
op	48:88	0:0	12	[
water	48:89	0:0	12	cb
op	48:91	0:0	12	]
arg	49:45	49:69	11	lambda/band->threshold
water	49:45	0:0	12	lambda
op	49:52	0:0	12	/
water	49:54	0:0	12	band
op	49:58	0:0	12	->
water	49:60	0:0	12	threshold
arg	49:71	49:79	11	INFINITY
water	49:71	0:0	12	INFINITY
arg	49:81	49:85	11	NULL
water	49:81	0:0	12	NULL
arg	49:87	49:88	11	0
water	49:87	0:0	12	0
water	49:89	0:0	10	;
water	50:16	0:0	10	}
water	51:16	0:0	8	cost_stay_here
op	51:31	0:0	8	=
water	51:33	0:0	8	path
op	51:37	0:0	8	[
water	51:38	0:0	8	swb
op	51:41	0:0	8	]
op	51:42	0:0	8	[
water	51:43	0:0	8	cb
op	51:45	0:0	8	]
op	51:46	0:0	8	.
water	51:47	0:0	8	cost
op	51:52	0:0	8	+
water	51:54	0:0	8	rd
water	51:56	0:0	8	;
water	52:16	0:0	8	cost_get_here
op	52:31	0:0	8	=
water	52:33	0:0	8	minrd
op	52:52	0:0	8	+
water	52:54	0:0	8	rd
op	52:57	0:0	8	+
water	52:59	0:0	8	run_bits
op	52:68	0:0	8	+
water	52:70	0:0	8	4
water	52:71	0:0	8	;
if	53:16	55:46	8	(run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ cb ] . run ] != run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ cb ] . run + 1 ])
cond	53:23	54:84	9	run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ cb ] . run ] != run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ cb ] . run + 1 ]
water	53:23	0:0	10	run_value_bits
op	53:37	0:0	10	[
water	53:38	0:0	10	sce
op	53:41	0:0	10	->
water	53:43	0:0	10	ics
op	53:46	0:0	10	.
water	53:47	0:0	10	num_windows
op	53:59	0:0	10	==
water	53:62	0:0	10	8
op	53:63	0:0	10	]
op	53:64	0:0	10	[
water	53:65	0:0	10	path
op	53:69	0:0	10	[
water	53:70	0:0	10	swb
op	53:73	0:0	10	]
op	53:74	0:0	10	[
water	53:75	0:0	10	cb
op	53:77	0:0	10	]
op	53:78	0:0	10	.
water	53:79	0:0	10	run
op	53:82	0:0	10	]
op	54:20	0:0	10	!=
water	54:23	0:0	10	run_value_bits
op	54:37	0:0	10	[
water	54:38	0:0	10	sce
op	54:41	0:0	10	->
water	54:43	0:0	10	ics
op	54:46	0:0	10	.
water	54:47	0:0	10	num_windows
op	54:59	0:0	10	==
water	54:62	0:0	10	8
op	54:63	0:0	10	]
op	54:64	0:0	10	[
water	54:65	0:0	10	path
op	54:69	0:0	10	[
water	54:70	0:0	10	swb
op	54:73	0:0	10	]
op	54:74	0:0	10	[
water	54:75	0:0	10	cb
op	54:77	0:0	10	]
op	54:78	0:0	10	.
water	54:79	0:0	10	run
op	54:82	0:0	10	+
water	54:83	0:0	10	1
op	54:84	0:0	10	]
stmts	55:20	55:46	9	
water	55:20	0:0	10	cost_stay_here
op	55:35	0:0	10	+=
water	55:38	0:0	10	run_bits
water	55:46	0:0	10	;
if	56:16	60:16	8	(cost_get_here < cost_stay_here)
cond	56:20	56:36	9	cost_get_here < cost_stay_here
water	56:20	0:0	10	cost_get_here
op	56:34	0:0	10	<
water	56:36	0:0	10	cost_stay_here
stmts	56:52	60:16	9	
water	56:52	0:0	10	{
water	57:20	0:0	10	path
op	57:24	0:0	10	[
water	57:25	0:0	10	swb
op	57:28	0:0	10	+
water	57:29	0:0	10	1
op	57:30	0:0	10	]
op	57:31	0:0	10	[
water	57:32	0:0	10	cb
op	57:34	0:0	10	]
op	57:35	0:0	10	.
water	57:36	0:0	10	prev_idx
op	57:45	0:0	10	=
water	57:47	0:0	10	mincb
water	57:52	0:0	10	;
water	58:20	0:0	10	path
op	58:24	0:0	10	[
water	58:25	0:0	10	swb
op	58:28	0:0	10	+
water	58:29	0:0	10	1
op	58:30	0:0	10	]
op	58:31	0:0	10	[
water	58:32	0:0	10	cb
op	58:34	0:0	10	]
op	58:35	0:0	10	.
water	58:36	0:0	10	cost
op	58:45	0:0	10	=
water	58:47	0:0	10	cost_get_here
water	58:60	0:0	10	;
water	59:20	0:0	10	path
op	59:24	0:0	10	[
water	59:25	0:0	10	swb
op	59:28	0:0	10	+
water	59:29	0:0	10	1
op	59:30	0:0	10	]
op	59:31	0:0	10	[
water	59:32	0:0	10	cb
op	59:34	0:0	10	]
op	59:35	0:0	10	.
water	59:36	0:0	10	run
op	59:45	0:0	10	=
water	59:47	0:0	10	1
water	59:48	0:0	10	;
water	60:16	0:0	10	}
else	60:18	64:16	8
stmts	60:23	64:16	9	
water	60:23	0:0	10	{
water	61:20	0:0	10	path
op	61:24	0:0	10	[
water	61:25	0:0	10	swb
op	61:28	0:0	10	+
water	61:29	0:0	10	1
op	61:30	0:0	10	]
op	61:31	0:0	10	[
water	61:32	0:0	10	cb
op	61:34	0:0	10	]
op	61:35	0:0	10	.
water	61:36	0:0	10	prev_idx
op	61:45	0:0	10	=
water	61:47	0:0	10	cb
water	61:49	0:0	10	;
water	62:20	0:0	10	path
op	62:24	0:0	10	[
water	62:25	0:0	10	swb
op	62:28	0:0	10	+
water	62:29	0:0	10	1
op	62:30	0:0	10	]
op	62:31	0:0	10	[
water	62:32	0:0	10	cb
op	62:34	0:0	10	]
op	62:35	0:0	10	.
water	62:36	0:0	10	cost
op	62:45	0:0	10	=
water	62:47	0:0	10	cost_stay_here
water	62:61	0:0	10	;
water	63:20	0:0	10	path
op	63:24	0:0	10	[
water	63:25	0:0	10	swb
op	63:28	0:0	10	+
water	63:29	0:0	10	1
op	63:30	0:0	10	]
op	63:31	0:0	10	[
water	63:32	0:0	10	cb
op	63:34	0:0	10	]
op	63:35	0:0	10	.
water	63:36	0:0	10	run
op	63:45	0:0	10	=
water	63:47	0:0	10	path
op	63:51	0:0	10	[
water	63:52	0:0	10	swb
op	63:55	0:0	10	]
op	63:56	0:0	10	[
water	63:57	0:0	10	cb
op	63:59	0:0	10	]
op	63:60	0:0	10	.
water	63:61	0:0	10	run
op	63:65	0:0	10	+
water	63:67	0:0	10	1
water	63:68	0:0	10	;
water	64:16	0:0	10	}
if	65:16	68:16	8	(path [ swb + 1 ] [ cb ] . cost < next_minrd)
cond	65:20	65:43	9	path [ swb + 1 ] [ cb ] . cost < next_minrd
water	65:20	0:0	10	path
op	65:24	0:0	10	[
water	65:25	0:0	10	swb
op	65:28	0:0	10	+
water	65:29	0:0	10	1
op	65:30	0:0	10	]
op	65:31	0:0	10	[
water	65:32	0:0	10	cb
op	65:34	0:0	10	]
op	65:35	0:0	10	.
water	65:36	0:0	10	cost
op	65:41	0:0	10	<
water	65:43	0:0	10	next_minrd
stmts	65:55	68:16	9	
water	65:55	0:0	10	{
water	66:20	0:0	10	next_minrd
op	66:31	0:0	10	=
water	66:33	0:0	10	path
op	66:37	0:0	10	[
water	66:38	0:0	10	swb
op	66:41	0:0	10	+
water	66:42	0:0	10	1
op	66:43	0:0	10	]
op	66:44	0:0	10	[
water	66:45	0:0	10	cb
op	66:47	0:0	10	]
op	66:48	0:0	10	.
water	66:49	0:0	10	cost
water	66:53	0:0	10	;
water	67:20	0:0	10	next_mincb
op	67:31	0:0	10	=
water	67:33	0:0	10	cb
water	67:35	0:0	10	;
water	68:16	0:0	10	}
water	69:12	0:0	8	}
water	70:8	0:0	6	}
water	71:8	0:0	4	start
op	71:14	0:0	4	+=
water	71:17	0:0	4	sce
op	71:20	0:0	4	->
water	71:22	0:0	4	ics
op	71:25	0:0	4	.
water	71:26	0:0	4	swb_sizes
op	71:35	0:0	4	[
water	71:36	0:0	4	swb
op	71:39	0:0	4	]
water	71:40	0:0	4	;
water	72:4	0:0	4	}
water	74:4	0:0	2	stack_len
op	74:14	0:0	2	=
water	74:16	0:0	2	0
water	74:17	0:0	2	;
water	75:4	0:0	2	idx
op	75:14	0:0	2	=
water	75:16	0:0	2	0
water	75:17	0:0	2	;
for	76:4	78:20	2	(cb = 1 ;cb < CB_TOT_ALL;cb ++)
forinit	76:9	76:15	3	cb = 1 ;
water	76:9	0:0	4	cb
op	76:12	0:0	4	=
water	76:14	0:0	4	1
water	76:15	0:0	4	;
cond	76:17	76:22	3	cb < CB_TOT_ALL
water	76:17	0:0	4	cb
op	76:20	0:0	4	<
water	76:22	0:0	4	CB_TOT_ALL
forexpr	76:34	76:36	3	cb ++
water	76:34	0:0	4	cb
op	76:36	0:0	4	++
stmts	77:8	78:20	3	
if	77:8	78:20	4	(path [ max_sfb ] [ cb ] . cost < path [ max_sfb ] [ idx ] . cost)
cond	77:12	77:56	5	path [ max_sfb ] [ cb ] . cost < path [ max_sfb ] [ idx ] . cost
water	77:12	0:0	6	path
op	77:16	0:0	6	[
water	77:17	0:0	6	max_sfb
op	77:24	0:0	6	]
op	77:25	0:0	6	[
water	77:26	0:0	6	cb
op	77:28	0:0	6	]
op	77:29	0:0	6	.
water	77:30	0:0	6	cost
op	77:35	0:0	6	<
water	77:37	0:0	6	path
op	77:41	0:0	6	[
water	77:42	0:0	6	max_sfb
op	77:49	0:0	6	]
op	77:50	0:0	6	[
water	77:51	0:0	6	idx
op	77:54	0:0	6	]
op	77:55	0:0	6	.
water	77:56	0:0	6	cost
stmts	78:12	78:20	5	
water	78:12	0:0	6	idx
op	78:16	0:0	6	=
water	78:18	0:0	6	cb
water	78:20	0:0	6	;
water	79:4	0:0	2	ppos
op	79:9	0:0	2	=
water	79:11	0:0	2	max_sfb
water	79:18	0:0	2	;
while	80:4	88:4	2	(ppos > 0)
cond	80:11	80:18	3	ppos > 0
water	80:11	0:0	4	ppos
op	80:16	0:0	4	>
water	80:18	0:0	4	0
stmts	80:21	88:4	3	
water	80:21	0:0	4	{
call	81:8	81:27	4	av_assert1
arg	81:19	81:27	5	idx>=0
water	81:19	0:0	6	idx
op	81:23	0:0	6	>=
water	81:26	0:0	6	0
water	81:28	0:0	4	;
water	82:8	0:0	4	cb
op	82:11	0:0	4	=
water	82:13	0:0	4	idx
water	82:16	0:0	4	;
water	83:8	0:0	4	stackrun
op	83:16	0:0	4	[
water	83:17	0:0	4	stack_len
op	83:26	0:0	4	]
op	83:28	0:0	4	=
water	83:30	0:0	4	path
op	83:34	0:0	4	[
water	83:35	0:0	4	ppos
op	83:39	0:0	4	]
op	83:40	0:0	4	[
water	83:41	0:0	4	cb
op	83:43	0:0	4	]
op	83:44	0:0	4	.
water	83:45	0:0	4	run
water	83:48	0:0	4	;
water	84:8	0:0	4	stackcb
op	84:16	0:0	4	[
water	84:17	0:0	4	stack_len
op	84:26	0:0	4	]
op	84:28	0:0	4	=
water	84:30	0:0	4	cb
water	84:32	0:0	4	;
water	85:8	0:0	4	idx
op	85:12	0:0	4	=
water	85:14	0:0	4	path
op	85:18	0:0	4	[
water	85:19	0:0	4	ppos
op	85:23	0:0	4	-
water	85:24	0:0	4	path
op	85:28	0:0	4	[
water	85:29	0:0	4	ppos
op	85:33	0:0	4	]
op	85:34	0:0	4	[
water	85:35	0:0	4	cb
op	85:37	0:0	4	]
op	85:38	0:0	4	.
water	85:39	0:0	4	run
op	85:42	0:0	4	+
water	85:43	0:0	4	1
op	85:44	0:0	4	]
op	85:45	0:0	4	[
water	85:46	0:0	4	cb
op	85:48	0:0	4	]
op	85:49	0:0	4	.
water	85:50	0:0	4	prev_idx
water	85:58	0:0	4	;
water	86:8	0:0	4	ppos
op	86:13	0:0	4	-=
water	86:16	0:0	4	path
op	86:20	0:0	4	[
water	86:21	0:0	4	ppos
op	86:25	0:0	4	]
op	86:26	0:0	4	[
water	86:27	0:0	4	cb
op	86:29	0:0	4	]
op	86:30	0:0	4	.
water	86:31	0:0	4	run
water	86:34	0:0	4	;
water	87:8	0:0	4	stack_len
op	87:17	0:0	4	++
water	87:19	0:0	4	;
water	88:4	0:0	4	}
water	90:4	0:0	2	start
op	90:10	0:0	2	=
water	90:12	0:0	2	0
water	90:13	0:0	2	;
for	91:4	106:4	2	(i = stack_len - 1 ;i >= 0;i --)
forinit	91:9	91:26	3	i = stack_len - 1 ;
water	91:9	0:0	4	i
op	91:11	0:0	4	=
water	91:13	0:0	4	stack_len
op	91:23	0:0	4	-
water	91:25	0:0	4	1
water	91:26	0:0	4	;
cond	91:28	91:33	3	i >= 0
water	91:28	0:0	4	i
op	91:30	0:0	4	>=
water	91:33	0:0	4	0
forexpr	91:36	91:37	3	i --
water	91:36	0:0	4	i
op	91:37	0:0	4	--
stmts	91:41	106:4	3	
water	91:41	0:0	4	{
water	92:8	0:0	4	cb
op	92:11	0:0	4	=
water	92:13	0:0	4	aac_cb_out_map
op	92:27	0:0	4	[
water	92:28	0:0	4	stackcb
op	92:35	0:0	4	[
water	92:36	0:0	4	i
op	92:37	0:0	4	]
op	92:38	0:0	4	]
water	92:39	0:0	4	;
call	93:8	93:30	4	put_bits
arg	93:17	93:23	5	&s->pb
op	93:17	0:0	6	&
water	93:18	0:0	6	s
op	93:19	0:0	6	->
water	93:21	0:0	6	pb
arg	93:25	93:26	5	4
water	93:25	0:0	6	4
arg	93:28	93:30	5	cb
water	93:28	0:0	6	cb
water	93:31	0:0	4	;
water	94:8	0:0	4	count
op	94:14	0:0	4	=
water	94:16	0:0	4	stackrun
op	94:24	0:0	4	[
water	94:25	0:0	4	i
op	94:26	0:0	4	]
water	94:27	0:0	4	;
call	95:8	95:55	4	memset
arg	95:15	95:43	5	sce->zeroes+win*16+start
water	95:15	0:0	6	sce
op	95:18	0:0	6	->
water	95:20	0:0	6	zeroes
op	95:27	0:0	6	+
water	95:29	0:0	6	win
op	95:32	0:0	6	*
water	95:33	0:0	6	16
op	95:36	0:0	6	+
water	95:38	0:0	6	start
arg	95:45	95:48	5	!cb
op	95:45	0:0	6	!
water	95:46	0:0	6	cb
arg	95:50	95:55	5	count
water	95:50	0:0	6	count
water	95:56	0:0	4	;
for	97:8	100:8	4	(j = 0 ;j < count;j ++)
forinit	97:13	97:18	5	j = 0 ;
water	97:13	0:0	6	j
op	97:15	0:0	6	=
water	97:17	0:0	6	0
water	97:18	0:0	6	;
cond	97:20	97:24	5	j < count
water	97:20	0:0	6	j
op	97:22	0:0	6	<
water	97:24	0:0	6	count
forexpr	97:31	97:32	5	j ++
water	97:31	0:0	6	j
op	97:32	0:0	6	++
stmts	97:36	100:8	5	
water	97:36	0:0	6	{
water	98:12	0:0	6	sce
op	98:15	0:0	6	->
water	98:17	0:0	6	band_type
op	98:26	0:0	6	[
water	98:27	0:0	6	win
op	98:30	0:0	6	*
water	98:31	0:0	6	16
op	98:34	0:0	6	+
water	98:36	0:0	6	start
op	98:41	0:0	6	]
op	98:43	0:0	6	=
water	98:45	0:0	6	cb
water	98:47	0:0	6	;
water	99:12	0:0	6	start
op	99:17	0:0	6	++
water	99:19	0:0	6	;
water	100:8	0:0	6	}
while	101:8	104:8	4	(count >= run_esc)
cond	101:15	101:24	5	count >= run_esc
water	101:15	0:0	6	count
op	101:21	0:0	6	>=
water	101:24	0:0	6	run_esc
stmts	101:33	104:8	5	
water	101:33	0:0	6	{
call	102:12	102:46	6	put_bits
arg	102:21	102:27	7	&s->pb
op	102:21	0:0	8	&
water	102:22	0:0	8	s
op	102:23	0:0	8	->
water	102:25	0:0	8	pb
arg	102:29	102:37	7	run_bits
water	102:29	0:0	8	run_bits
arg	102:39	102:46	7	run_esc
water	102:39	0:0	8	run_esc
water	102:47	0:0	6	;
water	103:12	0:0	6	count
op	103:18	0:0	6	-=
water	103:21	0:0	6	run_esc
water	103:28	0:0	6	;
water	104:8	0:0	6	}
call	105:8	105:40	4	put_bits
arg	105:17	105:23	5	&s->pb
op	105:17	0:0	6	&
water	105:18	0:0	6	s
op	105:19	0:0	6	->
water	105:21	0:0	6	pb
arg	105:25	105:33	5	run_bits
water	105:25	0:0	6	run_bits
arg	105:35	105:40	5	count
water	105:35	0:0	6	count
water	105:41	0:0	4	;
water	106:4	0:0	4	}
