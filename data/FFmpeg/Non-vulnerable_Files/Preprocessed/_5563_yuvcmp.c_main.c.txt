func	1:0	133:0	0	int	main
params	2:4	0:0	1	
param	2:5	2:13	2	int	argc
param	2:15	2:26	2	char * *	argv
stmnts	0:0	132:12	1	
decl	4:4	4:13	2	int	fd[2]
decl	5:4	5:24	2	int	print_pixels
op	5:21	0:0	2	=
water	5:23	0:0	2	0
decl	6:4	6:23	2	int	dump_blocks
op	6:20	0:0	2	=
water	6:22	0:0	2	0
decl	7:4	7:13	2	int	width
decl	8:4	8:14	2	int	height
decl	9:4	9:19	2	int	to_skip
op	9:16	0:0	2	=
water	9:18	0:0	2	0
if	10:4	13:4	2	(argc < 6)
cond	10:8	10:15	3	argc < 6
water	10:8	0:0	4	argc
op	10:13	0:0	4	<
water	10:15	0:0	4	6
stmts	10:18	13:4	3	
water	10:18	0:0	4	{
call	11:8	11:109	4	fprintf
arg	11:16	11:22	5	stderr
water	11:16	0:0	6	stderr
arg	11:24	11:100	5	"%s [YUV file 1] [YUV file 2] width height pixelcmp|blockdump (# to skip)\n"
water	11:24	0:0	6	"%s [YUV file 1] [YUV file 2] width height pixelcmp|blockdump (# to skip)\n"
arg	11:102	11:109	5	argv[0]
water	11:102	0:0	6	argv
op	11:106	0:0	6	[
water	11:107	0:0	6	0
op	11:108	0:0	6	]
water	11:110	0:0	4	;
return	12:8	12:16	4	1
water	12:15	0:0	5	1
water	13:4	0:0	4	}
water	14:4	0:0	2	width
op	14:11	0:0	2	=
call	14:13	14:25	2	atoi
arg	14:18	14:25	3	argv[3]
water	14:18	0:0	4	argv
op	14:22	0:0	4	[
water	14:23	0:0	4	3
op	14:24	0:0	4	]
water	14:26	0:0	2	;
water	15:4	0:0	2	height
op	15:11	0:0	2	=
call	15:13	15:25	2	atoi
arg	15:18	15:25	3	argv[4]
water	15:18	0:0	4	argv
op	15:22	0:0	4	[
water	15:23	0:0	4	4
op	15:24	0:0	4	]
water	15:26	0:0	2	;
if	16:4	17:31	2	(argc > 6)
cond	16:8	16:15	3	argc > 6
water	16:8	0:0	4	argc
op	16:13	0:0	4	>
water	16:15	0:0	4	6
stmts	17:8	17:31	3	
water	17:8	0:0	4	to_skip
op	17:16	0:0	4	=
call	17:18	17:30	4	atoi
arg	17:23	17:30	5	argv[6]
water	17:23	0:0	6	argv
op	17:27	0:0	6	[
water	17:28	0:0	6	6
op	17:29	0:0	6	]
water	17:31	0:0	4	;
water	18:4	0:0	2	uint8_t
op	18:12	0:0	2	*
water	18:13	0:0	2	Y
op	18:14	0:0	2	[
water	18:15	0:0	2	2
op	18:16	0:0	2	]
water	18:17	0:0	2	,
op	18:19	0:0	2	*
water	18:20	0:0	2	C
op	18:21	0:0	2	[
water	18:22	0:0	2	2
op	18:23	0:0	2	]
op	18:24	0:0	2	[
water	18:25	0:0	2	2
op	18:26	0:0	2	]
water	18:27	0:0	2	;
decl	19:4	19:18	2	int	i
water	19:9	0:0	2	,
decl	19:4	19:18	2	int	v
water	19:12	0:0	2	,
decl	19:4	19:18	2	int	c
water	19:15	0:0	2	,
decl	19:4	19:18	2	int	p
decl	20:4	20:29	2	int	lsiz
op	20:13	0:0	2	=
water	20:15	0:0	2	width
op	20:21	0:0	2	*
water	20:23	0:0	2	height
decl	21:4	21:33	2	int	csiz
op	21:13	0:0	2	=
water	21:15	0:0	2	width
op	21:21	0:0	2	*
water	21:23	0:0	2	height
op	21:30	0:0	2	/
water	21:32	0:0	2	4
decl	22:4	22:12	2	int	x
water	22:9	0:0	2	,
decl	22:4	22:12	2	int	y
decl	23:4	23:26	2	int	cwidth
op	23:15	0:0	2	=
water	23:17	0:0	2	width
op	23:23	0:0	2	/
water	23:25	0:0	2	2
decl	24:4	24:20	2	int	fr
op	24:11	0:0	2	=
water	24:13	0:0	2	to_skip
decl	25:4	25:10	2	int	mb
decl	26:4	26:18	2	char	*mberrors
decl	27:4	27:18	2	int	mb_x
water	27:12	0:0	2	,
decl	27:4	27:18	2	int	mb_y
decl	28:4	28:14	2	uint8_t	*a
decl	29:4	29:14	2	uint8_t	*b
decl	30:4	30:15	2	int	die
op	30:12	0:0	2	=
water	30:14	0:0	2	0
water	31:4	0:0	2	print_pixels
op	31:17	0:0	2	=
call	31:19	31:45	2	strstr
arg	31:26	31:33	3	argv[5]
water	31:26	0:0	4	argv
op	31:30	0:0	4	[
water	31:31	0:0	4	5
op	31:32	0:0	4	]
arg	31:35	31:45	3	"pixelcmp"
water	31:35	0:0	4	"pixelcmp"
water	31:47	0:0	2	?
water	31:49	0:0	2	1
water	31:51	0:0	2	:
water	31:53	0:0	2	0
water	31:54	0:0	2	;
water	32:4	0:0	2	dump_blocks
op	32:17	0:0	2	=
call	32:19	32:46	2	strstr
arg	32:26	32:33	3	argv[5]
water	32:26	0:0	4	argv
op	32:30	0:0	4	[
water	32:31	0:0	4	5
op	32:32	0:0	4	]
arg	32:35	32:46	3	"blockdump"
water	32:35	0:0	4	"blockdump"
water	32:48	0:0	2	?
water	32:50	0:0	2	1
water	32:52	0:0	2	:
water	32:54	0:0	2	0
water	32:55	0:0	2	;
for	33:4	45:4	2	(i = 0 ;i < 2;i ++)
forinit	33:8	33:13	3	i = 0 ;
water	33:8	0:0	4	i
op	33:10	0:0	4	=
water	33:12	0:0	4	0
water	33:13	0:0	4	;
cond	33:15	33:19	3	i < 2
water	33:15	0:0	4	i
op	33:17	0:0	4	<
water	33:19	0:0	4	2
forexpr	33:22	33:23	3	i ++
water	33:22	0:0	4	i
op	33:23	0:0	4	++
stmts	33:27	45:4	3	
water	33:27	0:0	4	{
water	34:8	0:0	4	Y
op	34:9	0:0	4	[
water	34:10	0:0	4	i
op	34:11	0:0	4	]
op	34:13	0:0	4	=
call	34:15	34:26	4	malloc
arg	34:22	34:26	5	lsiz
water	34:22	0:0	6	lsiz
water	34:27	0:0	4	;
water	35:8	0:0	4	C
op	35:9	0:0	4	[
water	35:10	0:0	4	0
op	35:11	0:0	4	]
op	35:12	0:0	4	[
water	35:13	0:0	4	i
op	35:14	0:0	4	]
op	35:16	0:0	4	=
call	35:18	35:29	4	malloc
arg	35:25	35:29	5	csiz
water	35:25	0:0	6	csiz
water	35:30	0:0	4	;
water	36:8	0:0	4	C
op	36:9	0:0	4	[
water	36:10	0:0	4	1
op	36:11	0:0	4	]
op	36:12	0:0	4	[
water	36:13	0:0	4	i
op	36:14	0:0	4	]
op	36:16	0:0	4	=
call	36:18	36:29	4	malloc
arg	36:25	36:29	5	csiz
water	36:25	0:0	6	csiz
water	36:30	0:0	4	;
water	37:8	0:0	4	fd
op	37:10	0:0	4	[
water	37:11	0:0	4	i
op	37:12	0:0	4	]
op	37:14	0:0	4	=
call	37:16	37:42	4	open
arg	37:21	37:32	5	argv[1+i]
water	37:21	0:0	6	argv
op	37:25	0:0	6	[
water	37:26	0:0	6	1
op	37:28	0:0	6	+
water	37:30	0:0	6	i
op	37:31	0:0	6	]
arg	37:34	37:42	5	O_RDONLY
water	37:34	0:0	6	O_RDONLY
water	37:43	0:0	4	;
if	38:8	41:8	4	(fd [ i ] == - 1)
cond	38:11	38:21	5	fd [ i ] == - 1
water	38:11	0:0	6	fd
op	38:13	0:0	6	[
water	38:14	0:0	6	i
op	38:15	0:0	6	]
op	38:17	0:0	6	==
op	38:20	0:0	6	-
water	38:21	0:0	6	1
stmts	38:24	41:8	5	
water	38:24	0:0	6	{
call	39:12	39:25	6	perror
arg	39:19	39:25	7	"open"
water	39:19	0:0	8	"open"
water	39:26	0:0	6	;
call	40:12	40:18	6	exit
arg	40:17	40:18	7	1
water	40:17	0:0	8	1
water	40:19	0:0	6	;
water	41:8	0:0	6	}
call	42:8	42:33	4	fcntl
arg	42:14	42:19	5	fd[i]
water	42:14	0:0	6	fd
op	42:16	0:0	6	[
water	42:17	0:0	6	i
op	42:18	0:0	6	]
arg	42:21	42:30	5	F_NOCACHE
water	42:21	0:0	6	F_NOCACHE
arg	42:32	42:33	5	1
water	42:32	0:0	6	1
water	42:34	0:0	4	;
if	43:8	44:61	4	(to_skip)
cond	43:12	43:12	5	to_skip
water	43:12	0:0	6	to_skip
stmts	44:12	44:61	5	
call	44:12	44:60	6	lseek
arg	44:18	44:23	7	fd[i]
water	44:18	0:0	8	fd
op	44:20	0:0	8	[
water	44:21	0:0	8	i
op	44:22	0:0	8	]
arg	44:25	44:50	7	to_skip*(lsiz+2*csiz)
water	44:25	0:0	8	to_skip
op	44:33	0:0	8	*
water	44:35	0:0	8	(
water	44:36	0:0	8	lsiz
op	44:41	0:0	8	+
water	44:43	0:0	8	2
op	44:44	0:0	8	*
water	44:45	0:0	8	csiz
water	44:49	0:0	8	)
arg	44:52	44:60	7	SEEK_SET
water	44:52	0:0	8	SEEK_SET
water	44:61	0:0	6	;
water	45:4	0:0	4	}
water	46:4	0:0	2	mb_x
op	46:9	0:0	2	=
water	46:11	0:0	2	width
op	46:17	0:0	2	/
water	46:19	0:0	2	16
water	46:21	0:0	2	;
water	47:4	0:0	2	mb_y
op	47:9	0:0	2	=
water	47:11	0:0	2	height
op	47:18	0:0	2	/
water	47:20	0:0	2	16
water	47:22	0:0	2	;
water	48:4	0:0	2	mberrors
op	48:13	0:0	2	=
call	48:15	48:33	2	malloc
arg	48:22	48:33	3	mb_x*mb_y
water	48:22	0:0	4	mb_x
op	48:27	0:0	4	*
water	48:29	0:0	4	mb_y
water	48:34	0:0	2	;
while	49:4	131:4	2	(! die)
cond	49:10	49:11	3	! die
op	49:10	0:0	4	!
water	49:11	0:0	4	die
stmts	49:16	131:4	3	
water	49:16	0:0	4	{
call	50:8	50:39	4	memset
arg	50:15	50:23	5	mberrors
water	50:15	0:0	6	mberrors
arg	50:25	50:26	5	0
water	50:25	0:0	6	0
arg	50:28	50:39	5	mb_x*mb_y
water	50:28	0:0	6	mb_x
op	50:33	0:0	6	*
water	50:35	0:0	6	mb_y
water	50:40	0:0	4	;
call	51:8	51:41	4	printf
arg	51:15	51:35	5	"Loading frame %d\n"
water	51:15	0:0	6	"Loading frame %d\n"
arg	51:37	51:41	5	++fr
op	51:37	0:0	6	++
water	51:39	0:0	6	fr
water	51:42	0:0	4	;
for	52:8	58:8	4	(i = 0 ;i < 2;i ++)
forinit	52:12	52:17	5	i = 0 ;
water	52:12	0:0	6	i
op	52:14	0:0	6	=
water	52:16	0:0	6	0
water	52:17	0:0	6	;
cond	52:19	52:23	5	i < 2
water	52:19	0:0	6	i
op	52:21	0:0	6	<
water	52:23	0:0	6	2
forexpr	52:26	52:27	5	i ++
water	52:26	0:0	6	i
op	52:27	0:0	6	++
stmts	52:31	58:8	5	
water	52:31	0:0	6	{
water	53:12	0:0	6	v
op	53:14	0:0	6	=
call	53:16	53:38	6	read
arg	53:21	53:26	7	fd[i]
water	53:21	0:0	8	fd
op	53:23	0:0	8	[
water	53:24	0:0	8	i
op	53:25	0:0	8	]
arg	53:28	53:32	7	Y[i]
water	53:28	0:0	8	Y
op	53:29	0:0	8	[
water	53:30	0:0	8	i
op	53:31	0:0	8	]
arg	53:34	53:38	7	lsiz
water	53:34	0:0	8	lsiz
water	53:39	0:0	6	;
if	54:12	57:12	6	(v != lsiz)
cond	54:15	54:20	7	v != lsiz
water	54:15	0:0	8	v
op	54:17	0:0	8	!=
water	54:20	0:0	8	lsiz
stmts	54:26	57:12	7	
water	54:26	0:0	8	{
call	55:16	55:81	8	fprintf
arg	55:24	55:30	9	stderr
water	55:24	0:0	10	stderr
arg	55:32	55:74	9	"Unable to read Y from file %d, exiting\n"
water	55:32	0:0	10	"Unable to read Y from file %d, exiting\n"
arg	55:76	55:81	9	i+1
water	55:76	0:0	10	i
op	55:78	0:0	10	+
water	55:80	0:0	10	1
water	55:82	0:0	8	;
return	56:16	56:24	8	1
water	56:23	0:0	9	1
water	57:12	0:0	8	}
water	58:8	0:0	6	}
for	59:8	74:8	4	(c = 0 ;c < lsiz;c ++)
forinit	59:12	59:17	5	c = 0 ;
water	59:12	0:0	6	c
op	59:14	0:0	6	=
water	59:16	0:0	6	0
water	59:17	0:0	6	;
cond	59:19	59:23	5	c < lsiz
water	59:19	0:0	6	c
op	59:21	0:0	6	<
water	59:23	0:0	6	lsiz
forexpr	59:29	59:30	5	c ++
water	59:29	0:0	6	c
op	59:30	0:0	6	++
stmts	59:34	74:8	5	
water	59:34	0:0	6	{
if	60:12	73:12	6	(Y [ 0 ] [ c ] != Y [ 1 ] [ c ])
cond	60:15	60:32	7	Y [ 0 ] [ c ] != Y [ 1 ] [ c ]
water	60:15	0:0	8	Y
op	60:16	0:0	8	[
water	60:17	0:0	8	0
op	60:18	0:0	8	]
op	60:19	0:0	8	[
water	60:20	0:0	8	c
op	60:21	0:0	8	]
op	60:23	0:0	8	!=
water	60:26	0:0	8	Y
op	60:27	0:0	8	[
water	60:28	0:0	8	1
op	60:29	0:0	8	]
op	60:30	0:0	8	[
water	60:31	0:0	8	c
op	60:32	0:0	8	]
stmts	60:35	73:12	7	
water	60:35	0:0	8	{
water	61:16	0:0	8	x
op	61:18	0:0	8	=
water	61:20	0:0	8	c
op	61:22	0:0	8	%
water	61:24	0:0	8	width
water	61:29	0:0	8	;
water	62:16	0:0	8	y
op	62:18	0:0	8	=
water	62:20	0:0	8	c
op	62:22	0:0	8	/
water	62:24	0:0	8	width
water	62:29	0:0	8	;
water	63:16	0:0	8	mb
op	63:19	0:0	8	=
water	63:21	0:0	8	x
op	63:23	0:0	8	/
water	63:25	0:0	8	16
op	63:28	0:0	8	+
water	63:30	0:0	8	(
water	63:31	0:0	8	y
op	63:33	0:0	8	/
water	63:35	0:0	8	16
water	63:37	0:0	8	)
op	63:39	0:0	8	*
water	63:41	0:0	8	mb_x
water	63:45	0:0	8	;
if	64:16	71:30	8	(print_pixels)
cond	64:19	64:19	9	print_pixels
water	64:19	0:0	10	print_pixels
stmts	65:20	71:30	9	
call	65:20	71:29	10	printf
arg	65:27	65:91	11	"Luma diff 0x%02x != 0x%02x at pixel (%4d,%-4d) mb(%d,%d) #%d\n"
water	65:27	0:0	12	"Luma diff 0x%02x != 0x%02x at pixel (%4d,%-4d) mb(%d,%d) #%d\n"
arg	66:27	66:34	11	Y[0][c]
water	66:27	0:0	12	Y
op	66:28	0:0	12	[
water	66:29	0:0	12	0
op	66:30	0:0	12	]
op	66:31	0:0	12	[
water	66:32	0:0	12	c
op	66:33	0:0	12	]
arg	67:27	67:34	11	Y[1][c]
water	67:27	0:0	12	Y
op	67:28	0:0	12	[
water	67:29	0:0	12	1
op	67:30	0:0	12	]
op	67:31	0:0	12	[
water	67:32	0:0	12	c
op	67:33	0:0	12	]
arg	68:27	68:28	11	x
water	68:27	0:0	12	x
arg	68:30	68:31	11	y
water	68:30	0:0	12	y
arg	69:27	69:33	11	x/16
water	69:27	0:0	12	x
op	69:29	0:0	12	/
water	69:31	0:0	12	16
arg	70:27	70:33	11	y/16
water	70:27	0:0	12	y
op	70:29	0:0	12	/
water	70:31	0:0	12	16
arg	71:27	71:29	11	mb
water	71:27	0:0	12	mb
water	71:30	0:0	10	;
water	72:16	0:0	8	mberrors
op	72:24	0:0	8	[
water	72:25	0:0	8	mb
op	72:27	0:0	8	]
op	72:29	0:0	8	|=
water	72:32	0:0	8	1
water	72:33	0:0	8	;
water	73:12	0:0	8	}
water	74:8	0:0	6	}
for	76:8	103:8	4	(p = 0 ;p < 2;p ++)
forinit	76:12	76:17	5	p = 0 ;
water	76:12	0:0	6	p
op	76:14	0:0	6	=
water	76:16	0:0	6	0
water	76:17	0:0	6	;
cond	76:19	76:23	5	p < 2
water	76:19	0:0	6	p
op	76:21	0:0	6	<
water	76:23	0:0	6	2
forexpr	76:26	76:27	5	p ++
water	76:26	0:0	6	p
op	76:27	0:0	6	++
stmts	76:31	103:8	5	
water	76:31	0:0	6	{
for	77:12	84:12	6	(i = 0 ;i < 2;i ++)
forinit	77:16	77:21	7	i = 0 ;
water	77:16	0:0	8	i
op	77:18	0:0	8	=
water	77:20	0:0	8	0
water	77:21	0:0	8	;
cond	77:23	77:27	7	i < 2
water	77:23	0:0	8	i
op	77:25	0:0	8	<
water	77:27	0:0	8	2
forexpr	77:30	77:31	7	i ++
water	77:30	0:0	8	i
op	77:31	0:0	8	++
stmts	77:35	84:12	7	
water	77:35	0:0	8	{
water	78:16	0:0	8	v
op	78:18	0:0	8	=
call	78:20	78:45	8	read
arg	78:25	78:30	9	fd[i]
water	78:25	0:0	10	fd
op	78:27	0:0	10	[
water	78:28	0:0	10	i
op	78:29	0:0	10	]
arg	78:32	78:39	9	C[p][i]
water	78:32	0:0	10	C
op	78:33	0:0	10	[
water	78:34	0:0	10	p
op	78:35	0:0	10	]
op	78:36	0:0	10	[
water	78:37	0:0	10	i
op	78:38	0:0	10	]
arg	78:41	78:45	9	csiz
water	78:41	0:0	10	csiz
water	78:46	0:0	8	;
if	79:16	83:16	8	(v != csiz)
cond	79:19	79:24	9	v != csiz
water	79:19	0:0	10	v
op	79:21	0:0	10	!=
water	79:24	0:0	10	csiz
stmts	79:30	83:16	9	
water	79:30	0:0	10	{
call	80:20	81:42	10	fprintf
arg	80:28	80:34	11	stderr
water	80:28	0:0	12	stderr
arg	80:36	80:79	11	"Unable to read %c from file %d, exiting\n"
water	80:36	0:0	12	"Unable to read %c from file %d, exiting\n"
arg	81:28	81:35	11	"UV"[p]
water	81:28	0:0	12	"UV"
op	81:32	0:0	12	[
water	81:33	0:0	12	p
op	81:34	0:0	12	]
arg	81:37	81:42	11	i+1
water	81:37	0:0	12	i
op	81:39	0:0	12	+
water	81:41	0:0	12	1
water	81:43	0:0	10	;
return	82:20	82:28	10	1
water	82:27	0:0	11	1
water	83:16	0:0	10	}
water	84:12	0:0	8	}
for	85:12	102:12	6	(c = 0 ;c < csiz;c ++)
forinit	85:16	85:21	7	c = 0 ;
water	85:16	0:0	8	c
op	85:18	0:0	8	=
water	85:20	0:0	8	0
water	85:21	0:0	8	;
cond	85:23	85:27	7	c < csiz
water	85:23	0:0	8	c
op	85:25	0:0	8	<
water	85:27	0:0	8	csiz
forexpr	85:33	85:34	7	c ++
water	85:33	0:0	8	c
op	85:34	0:0	8	++
stmts	85:38	102:12	7	
water	85:38	0:0	8	{
if	86:16	101:16	8	(C [ p ] [ 0 ] [ c ] != C [ p ] [ 1 ] [ c ])
cond	86:19	86:42	9	C [ p ] [ 0 ] [ c ] != C [ p ] [ 1 ] [ c ]
water	86:19	0:0	10	C
op	86:20	0:0	10	[
water	86:21	0:0	10	p
op	86:22	0:0	10	]
op	86:23	0:0	10	[
water	86:24	0:0	10	0
op	86:25	0:0	10	]
op	86:26	0:0	10	[
water	86:27	0:0	10	c
op	86:28	0:0	10	]
op	86:30	0:0	10	!=
water	86:33	0:0	10	C
op	86:34	0:0	10	[
water	86:35	0:0	10	p
op	86:36	0:0	10	]
op	86:37	0:0	10	[
water	86:38	0:0	10	1
op	86:39	0:0	10	]
op	86:40	0:0	10	[
water	86:41	0:0	10	c
op	86:42	0:0	10	]
stmts	86:45	101:16	9	
water	86:45	0:0	10	{
water	87:20	0:0	10	x
op	87:22	0:0	10	=
water	87:24	0:0	10	c
op	87:26	0:0	10	%
water	87:28	0:0	10	cwidth
water	87:34	0:0	10	;
water	88:20	0:0	10	y
op	88:22	0:0	10	=
water	88:24	0:0	10	c
op	88:26	0:0	10	/
water	88:28	0:0	10	cwidth
water	88:34	0:0	10	;
water	89:20	0:0	10	mb
op	89:23	0:0	10	=
water	89:25	0:0	10	x
op	89:27	0:0	10	/
water	89:29	0:0	10	8
op	89:31	0:0	10	+
water	89:33	0:0	10	(
water	89:34	0:0	10	y
op	89:36	0:0	10	/
water	89:38	0:0	10	8
water	89:39	0:0	10	)
op	89:41	0:0	10	*
water	89:43	0:0	10	mb_x
water	89:47	0:0	10	;
water	90:20	0:0	10	mberrors
op	90:28	0:0	10	[
water	90:29	0:0	10	mb
op	90:31	0:0	10	]
op	90:33	0:0	10	|=
water	90:36	0:0	10	2
op	90:38	0:0	10	<<
water	90:41	0:0	10	p
water	90:42	0:0	10	;
if	91:20	100:58	10	(print_pixels)
cond	91:23	91:23	11	print_pixels
water	91:23	0:0	12	print_pixels
stmts	92:24	100:58	11	
call	92:24	100:57	12	printf
arg	92:31	93:51	13	"c%c diff 0x%02x != 0x%02x at pixel (%4d,%-4d) ""mb(%3d,%-3d) #%d\n"
water	92:31	0:0	14	"c%c diff 0x%02x != 0x%02x at pixel (%4d,%-4d) "
water	93:31	0:0	14	"mb(%3d,%-3d) #%d\n"
arg	94:31	94:44	13	p?'r':'b'
water	94:31	0:0	14	p
water	94:33	0:0	14	?
water	94:35	0:0	14	'r'
water	94:39	0:0	14	:
water	94:41	0:0	14	'b'
arg	95:31	95:41	13	C[p][0][c]
water	95:31	0:0	14	C
op	95:32	0:0	14	[
water	95:33	0:0	14	p
op	95:34	0:0	14	]
op	95:35	0:0	14	[
water	95:36	0:0	14	0
op	95:37	0:0	14	]
op	95:38	0:0	14	[
water	95:39	0:0	14	c
op	95:40	0:0	14	]
arg	96:31	96:41	13	C[p][1][c]
water	96:31	0:0	14	C
op	96:32	0:0	14	[
water	96:33	0:0	14	p
op	96:34	0:0	14	]
op	96:35	0:0	14	[
water	96:36	0:0	14	1
op	96:37	0:0	14	]
op	96:38	0:0	14	[
water	96:39	0:0	14	c
op	96:40	0:0	14	]
arg	97:31	97:32	13	x
water	97:31	0:0	14	x
arg	97:34	97:35	13	y
water	97:34	0:0	14	y
arg	98:31	98:36	13	x/8
water	98:31	0:0	14	x
op	98:33	0:0	14	/
water	98:35	0:0	14	8
arg	99:31	99:36	13	y/8
water	99:31	0:0	14	y
op	99:33	0:0	14	/
water	99:35	0:0	14	8
arg	100:31	100:57	13	x/8+y/8*cwidth/8
water	100:31	0:0	14	x
op	100:33	0:0	14	/
water	100:35	0:0	14	8
op	100:37	0:0	14	+
water	100:39	0:0	14	y
op	100:41	0:0	14	/
water	100:43	0:0	14	8
op	100:45	0:0	14	*
water	100:47	0:0	14	cwidth
op	100:54	0:0	14	/
water	100:56	0:0	14	8
water	100:58	0:0	12	;
water	101:16	0:0	10	}
water	102:12	0:0	8	}
water	103:8	0:0	6	}
for	104:8	130:8	4	(i = 0 ;i < mb_x * mb_y;i ++)
forinit	104:12	104:17	5	i = 0 ;
water	104:12	0:0	6	i
op	104:14	0:0	6	=
water	104:16	0:0	6	0
water	104:17	0:0	6	;
cond	104:19	104:30	5	i < mb_x * mb_y
water	104:19	0:0	6	i
op	104:21	0:0	6	<
water	104:23	0:0	6	mb_x
op	104:28	0:0	6	*
water	104:30	0:0	6	mb_y
forexpr	104:36	104:37	5	i ++
water	104:36	0:0	6	i
op	104:37	0:0	6	++
stmts	104:41	130:8	5	
water	104:41	0:0	6	{
water	105:12	0:0	6	x
op	105:14	0:0	6	=
water	105:16	0:0	6	i
op	105:18	0:0	6	%
water	105:20	0:0	6	mb_x
water	105:24	0:0	6	;
water	106:12	0:0	6	y
op	106:14	0:0	6	=
water	106:16	0:0	6	i
op	106:18	0:0	6	/
water	106:20	0:0	6	mb_x
water	106:24	0:0	6	;
if	107:12	129:12	6	(mberrors [ i ])
cond	107:15	107:25	7	mberrors [ i ]
water	107:15	0:0	8	mberrors
op	107:23	0:0	8	[
water	107:24	0:0	8	i
op	107:25	0:0	8	]
stmts	107:28	129:12	7	
water	107:28	0:0	8	{
water	108:16	0:0	8	die
op	108:20	0:0	8	=
water	108:22	0:0	8	1
water	108:23	0:0	8	;
call	109:16	113:50	8	printf
arg	109:23	109:62	9	"MB (%3d,%-3d) %4d %d %c%c%c damaged\n"
water	109:23	0:0	10	"MB (%3d,%-3d) %4d %d %c%c%c damaged\n"
arg	110:23	110:24	9	x
water	110:23	0:0	10	x
arg	110:26	110:27	9	y
water	110:26	0:0	10	y
arg	110:29	110:30	9	i
water	110:29	0:0	10	i
arg	110:32	110:43	9	mberrors[i]
water	110:32	0:0	10	mberrors
op	110:40	0:0	10	[
water	110:41	0:0	10	i
op	110:42	0:0	10	]
arg	111:23	111:50	9	mberrors[i]&1?'Y':' '
water	111:23	0:0	10	mberrors
op	111:31	0:0	10	[
water	111:32	0:0	10	i
op	111:33	0:0	10	]
op	111:35	0:0	10	&
water	111:37	0:0	10	1
water	111:39	0:0	10	?
water	111:41	0:0	10	'Y'
water	111:45	0:0	10	:
water	111:47	0:0	10	' '
arg	112:23	112:50	9	mberrors[i]&2?'U':' '
water	112:23	0:0	10	mberrors
op	112:31	0:0	10	[
water	112:32	0:0	10	i
op	112:33	0:0	10	]
op	112:35	0:0	10	&
water	112:37	0:0	10	2
water	112:39	0:0	10	?
water	112:41	0:0	10	'U'
water	112:45	0:0	10	:
water	112:47	0:0	10	' '
arg	113:23	113:50	9	mberrors[i]&4?'V':' '
water	113:23	0:0	10	mberrors
op	113:31	0:0	10	[
water	113:32	0:0	10	i
op	113:33	0:0	10	]
op	113:35	0:0	10	&
water	113:37	0:0	10	4
water	113:39	0:0	10	?
water	113:41	0:0	10	'V'
water	113:45	0:0	10	:
water	113:47	0:0	10	' '
water	113:51	0:0	8	;
if	114:16	128:16	8	(dump_blocks)
cond	114:19	114:19	9	dump_blocks
water	114:19	0:0	10	dump_blocks
stmts	114:32	128:16	9	
water	114:32	0:0	10	{
water	115:20	0:0	10	a
op	115:22	0:0	10	=
water	115:24	0:0	10	Y
op	115:25	0:0	10	[
water	115:26	0:0	10	0
op	115:27	0:0	10	]
op	115:29	0:0	10	+
water	115:31	0:0	10	x
op	115:33	0:0	10	*
water	115:35	0:0	10	16
op	115:38	0:0	10	+
water	115:40	0:0	10	y
op	115:42	0:0	10	*
water	115:44	0:0	10	16
op	115:47	0:0	10	*
water	115:49	0:0	10	width
water	115:54	0:0	10	;
water	116:20	0:0	10	b
op	116:22	0:0	10	=
water	116:24	0:0	10	Y
op	116:25	0:0	10	[
water	116:26	0:0	10	1
op	116:27	0:0	10	]
op	116:29	0:0	10	+
water	116:31	0:0	10	x
op	116:33	0:0	10	*
water	116:35	0:0	10	16
op	116:38	0:0	10	+
water	116:40	0:0	10	y
op	116:42	0:0	10	*
water	116:44	0:0	10	16
op	116:47	0:0	10	*
water	116:49	0:0	10	width
water	116:54	0:0	10	;
for	117:20	127:20	10	(y = 0 ;y < 16;y ++)
forinit	117:24	117:29	11	y = 0 ;
water	117:24	0:0	12	y
op	117:26	0:0	12	=
water	117:28	0:0	12	0
water	117:29	0:0	12	;
cond	117:31	117:35	11	y < 16
water	117:31	0:0	12	y
op	117:33	0:0	12	<
water	117:35	0:0	12	16
forexpr	117:39	117:40	11	y ++
water	117:39	0:0	12	y
op	117:40	0:0	12	++
stmts	117:44	127:20	11	
water	117:44	0:0	12	{
call	118:24	118:47	12	printf
arg	118:31	118:36	13	"%c "
water	118:31	0:0	14	"%c "
arg	118:38	118:47	13	"TB"[y&1]
water	118:38	0:0	14	"TB"
op	118:42	0:0	14	[
water	118:43	0:0	14	y
op	118:44	0:0	14	&
water	118:45	0:0	14	1
op	118:46	0:0	14	]
water	118:48	0:0	12	;
for	119:24	121:84	12	(x = 0 ;x < 16;x ++)
forinit	119:28	119:33	13	x = 0 ;
water	119:28	0:0	14	x
op	119:30	0:0	14	=
water	119:32	0:0	14	0
water	119:33	0:0	14	;
cond	119:35	119:39	13	x < 16
water	119:35	0:0	14	x
op	119:37	0:0	14	<
water	119:39	0:0	14	16
forexpr	119:43	119:44	13	x ++
water	119:43	0:0	14	x
op	119:44	0:0	14	++
stmts	120:28	121:84	13	
call	120:28	121:83	14	printf
arg	120:35	120:43	15	"%02x%c"
water	120:35	0:0	16	"%02x%c"
arg	120:45	120:61	15	a[x+y*width]
water	120:45	0:0	16	a
op	120:46	0:0	16	[
water	120:47	0:0	16	x
op	120:49	0:0	16	+
water	120:51	0:0	16	y
op	120:53	0:0	16	*
water	120:55	0:0	16	width
op	120:60	0:0	16	]
arg	121:35	121:83	15	a[x+y*width]!=b[x+y*width]?'<':' '
water	121:35	0:0	16	a
op	121:36	0:0	16	[
water	121:37	0:0	16	x
op	121:39	0:0	16	+
water	121:41	0:0	16	y
op	121:43	0:0	16	*
water	121:45	0:0	16	width
op	121:50	0:0	16	]
op	121:52	0:0	16	!=
water	121:55	0:0	16	b
op	121:56	0:0	16	[
water	121:57	0:0	16	x
op	121:59	0:0	16	+
water	121:61	0:0	16	y
op	121:63	0:0	16	*
water	121:65	0:0	16	width
op	121:70	0:0	16	]
water	121:72	0:0	16	?
water	121:74	0:0	16	'<'
water	121:78	0:0	16	:
water	121:80	0:0	16	' '
water	121:84	0:0	14	;
call	122:24	122:35	12	printf
arg	122:31	122:35	13	"| "
water	122:31	0:0	14	"| "
water	122:36	0:0	12	;
for	123:24	125:84	12	(x = 0 ;x < 16;x ++)
forinit	123:28	123:33	13	x = 0 ;
water	123:28	0:0	14	x
op	123:30	0:0	14	=
water	123:32	0:0	14	0
water	123:33	0:0	14	;
cond	123:35	123:39	13	x < 16
water	123:35	0:0	14	x
op	123:37	0:0	14	<
water	123:39	0:0	14	16
forexpr	123:43	123:44	13	x ++
water	123:43	0:0	14	x
op	123:44	0:0	14	++
stmts	124:28	125:84	13	
call	124:28	125:83	14	printf
arg	124:35	124:43	15	"%02x%c"
water	124:35	0:0	16	"%02x%c"
arg	124:45	124:61	15	b[x+y*width]
water	124:45	0:0	16	b
op	124:46	0:0	16	[
water	124:47	0:0	16	x
op	124:49	0:0	16	+
water	124:51	0:0	16	y
op	124:53	0:0	16	*
water	124:55	0:0	16	width
op	124:60	0:0	16	]
arg	125:35	125:83	15	a[x+y*width]!=b[x+y*width]?'<':' '
water	125:35	0:0	16	a
op	125:36	0:0	16	[
water	125:37	0:0	16	x
op	125:39	0:0	16	+
water	125:41	0:0	16	y
op	125:43	0:0	16	*
water	125:45	0:0	16	width
op	125:50	0:0	16	]
op	125:52	0:0	16	!=
water	125:55	0:0	16	b
op	125:56	0:0	16	[
water	125:57	0:0	16	x
op	125:59	0:0	16	+
water	125:61	0:0	16	y
op	125:63	0:0	16	*
water	125:65	0:0	16	width
op	125:70	0:0	16	]
water	125:72	0:0	16	?
water	125:74	0:0	16	'<'
water	125:78	0:0	16	:
water	125:80	0:0	16	' '
water	125:84	0:0	14	;
call	126:24	126:35	12	printf
arg	126:31	126:35	13	"\n"
water	126:31	0:0	14	"\n"
water	126:36	0:0	12	;
water	127:20	0:0	12	}
water	128:16	0:0	10	}
water	129:12	0:0	8	}
water	130:8	0:0	6	}
water	131:4	0:0	4	}
return	132:4	132:12	2	0
water	132:11	0:0	3	0
