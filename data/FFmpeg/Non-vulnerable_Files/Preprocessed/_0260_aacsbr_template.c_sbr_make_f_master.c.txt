func	2:0	190:0	0	static int	sbr_make_f_master
params	2:28	0:0	1	
param	2:29	2:43	2	AACContext *	ac
param	2:45	2:73	2	SpectralBandReplication *	sbr
param	3:29	3:57	2	SpectrumParameters *	spectrum
stmnts	0:0	189:12	1	
decl	5:4	5:43	2	unsigned int	temp
water	5:21	0:0	2	,
decl	5:4	5:43	2	unsigned int	max_qmf_subbands
op	5:40	0:0	2	=
water	5:42	0:0	2	0
decl	6:4	6:36	2	unsigned int	start_min
water	6:26	0:0	2	,
decl	6:4	6:36	2	unsigned int	stop_min
decl	7:4	7:9	2	int	k
decl	8:4	8:32	2	const int8_t	*sbr_offset_ptr
decl	9:4	9:23	2	int16_t	stop_dk[13]
if	10:4	12:4	2	(sbr -> sample_rate < 32000)
cond	10:8	10:27	3	sbr -> sample_rate < 32000
water	10:8	0:0	4	sbr
op	10:11	0:0	4	->
water	10:13	0:0	4	sample_rate
op	10:25	0:0	4	<
water	10:27	0:0	4	32000
stmts	10:34	12:4	3	
water	10:34	0:0	4	{
water	11:8	0:0	4	temp
op	11:13	0:0	4	=
water	11:15	0:0	4	3000
water	11:19	0:0	4	;
water	12:4	0:0	4	}
else	12:6	14:4	2
stmts	12:11	14:4	3	
if	12:11	14:4	4	(sbr -> sample_rate < 64000)
cond	12:15	12:34	5	sbr -> sample_rate < 64000
water	12:15	0:0	6	sbr
op	12:18	0:0	6	->
water	12:20	0:0	6	sample_rate
op	12:32	0:0	6	<
water	12:34	0:0	6	64000
stmts	12:41	14:4	5	
water	12:41	0:0	6	{
water	13:8	0:0	6	temp
op	13:13	0:0	6	=
water	13:15	0:0	6	4000
water	13:19	0:0	6	;
water	14:4	0:0	6	}
else	14:6	15:19	2
stmts	15:8	15:19	3	
water	15:8	0:0	4	temp
op	15:13	0:0	4	=
water	15:15	0:0	4	5000
water	15:19	0:0	4	;
switch	16:4	39:4	2	(sbr -> sample_rate)
cond	16:12	16:17	3	sbr -> sample_rate
water	16:12	0:0	4	sbr
op	16:15	0:0	4	->
water	16:17	0:0	4	sample_rate
stmts	16:30	39:4	3	
water	16:30	0:0	4	{
label	17:4	17:14	4	case 16000 :
water	18:8	0:0	4	sbr_offset_ptr
op	18:23	0:0	4	=
water	18:25	0:0	4	sbr_offset
op	18:35	0:0	4	[
water	18:36	0:0	4	0
op	18:37	0:0	4	]
water	18:38	0:0	4	;
break	19:8	19:13	4	
label	20:4	20:14	4	case 22050 :
water	21:8	0:0	4	sbr_offset_ptr
op	21:23	0:0	4	=
water	21:25	0:0	4	sbr_offset
op	21:35	0:0	4	[
water	21:36	0:0	4	1
op	21:37	0:0	4	]
water	21:38	0:0	4	;
break	22:8	22:13	4	
label	23:4	23:14	4	case 24000 :
water	24:8	0:0	4	sbr_offset_ptr
op	24:23	0:0	4	=
water	24:25	0:0	4	sbr_offset
op	24:35	0:0	4	[
water	24:36	0:0	4	2
op	24:37	0:0	4	]
water	24:38	0:0	4	;
break	25:8	25:13	4	
label	26:4	26:14	4	case 32000 :
water	27:8	0:0	4	sbr_offset_ptr
op	27:23	0:0	4	=
water	27:25	0:0	4	sbr_offset
op	27:35	0:0	4	[
water	27:36	0:0	4	3
op	27:37	0:0	4	]
water	27:38	0:0	4	;
break	28:8	28:13	4	
label	29:4	29:14	4	case 44100 :
label	29:16	29:26	4	case 48000 :
label	29:28	29:38	4	case 64000 :
water	30:8	0:0	4	sbr_offset_ptr
op	30:23	0:0	4	=
water	30:25	0:0	4	sbr_offset
op	30:35	0:0	4	[
water	30:36	0:0	4	4
op	30:37	0:0	4	]
water	30:38	0:0	4	;
break	31:8	31:13	4	
label	32:4	32:14	4	case 88200 :
label	32:16	32:26	4	case 96000 :
label	32:28	32:39	4	case 128000 :
label	32:41	32:52	4	case 176400 :
label	32:54	32:65	4	case 192000 :
water	33:8	0:0	4	sbr_offset_ptr
op	33:23	0:0	4	=
water	33:25	0:0	4	sbr_offset
op	33:35	0:0	4	[
water	33:36	0:0	4	5
op	33:37	0:0	4	]
water	33:38	0:0	4	;
break	34:8	34:13	4	
label	35:4	35:11	4	default :
call	36:8	37:72	4	av_log
arg	36:15	36:24	5	ac->avctx
water	36:15	0:0	6	ac
op	36:17	0:0	6	->
water	36:19	0:0	6	avctx
arg	36:26	36:38	5	AV_LOG_ERROR
water	36:26	0:0	6	AV_LOG_ERROR
arg	37:15	37:54	5	"Unsupported sample rate for SBR: %d\n"
water	37:15	0:0	6	"Unsupported sample rate for SBR: %d\n"
arg	37:56	37:72	5	sbr->sample_rate
water	37:56	0:0	6	sbr
op	37:59	0:0	6	->
water	37:61	0:0	6	sample_rate
water	37:73	0:0	4	;
return	38:8	38:17	4	-1
op	38:15	0:0	5	-
water	38:16	0:0	5	1
water	39:4	0:0	4	}
water	40:4	0:0	2	start_min
op	40:14	0:0	2	=
water	40:16	0:0	2	(
water	40:17	0:0	2	(
water	40:18	0:0	2	temp
op	40:23	0:0	2	<<
water	40:26	0:0	2	7
water	40:27	0:0	2	)
op	40:29	0:0	2	+
water	40:31	0:0	2	(
water	40:32	0:0	2	sbr
op	40:35	0:0	2	->
water	40:37	0:0	2	sample_rate
op	40:49	0:0	2	>>
water	40:52	0:0	2	1
water	40:53	0:0	2	)
water	40:54	0:0	2	)
op	40:56	0:0	2	/
water	40:58	0:0	2	sbr
op	40:61	0:0	2	->
water	40:63	0:0	2	sample_rate
water	40:74	0:0	2	;
water	41:4	0:0	2	stop_min
op	41:14	0:0	2	=
water	41:16	0:0	2	(
water	41:17	0:0	2	(
water	41:18	0:0	2	temp
op	41:23	0:0	2	<<
water	41:26	0:0	2	8
water	41:27	0:0	2	)
op	41:29	0:0	2	+
water	41:31	0:0	2	(
water	41:32	0:0	2	sbr
op	41:35	0:0	2	->
water	41:37	0:0	2	sample_rate
op	41:49	0:0	2	>>
water	41:52	0:0	2	1
water	41:53	0:0	2	)
water	41:54	0:0	2	)
op	41:56	0:0	2	/
water	41:58	0:0	2	sbr
op	41:61	0:0	2	->
water	41:63	0:0	2	sample_rate
water	41:74	0:0	2	;
water	42:4	0:0	2	sbr
op	42:7	0:0	2	->
water	42:9	0:0	2	k
op	42:10	0:0	2	[
water	42:11	0:0	2	0
op	42:12	0:0	2	]
op	42:14	0:0	2	=
water	42:16	0:0	2	start_min
op	42:26	0:0	2	+
water	42:28	0:0	2	sbr_offset_ptr
op	42:42	0:0	2	[
water	42:43	0:0	2	spectrum
op	42:51	0:0	2	->
water	42:53	0:0	2	bs_start_freq
op	42:66	0:0	2	]
water	42:67	0:0	2	;
if	43:4	49:4	2	(spectrum -> bs_stop_freq < 14)
cond	43:8	43:33	3	spectrum -> bs_stop_freq < 14
water	43:8	0:0	4	spectrum
op	43:16	0:0	4	->
water	43:18	0:0	4	bs_stop_freq
op	43:31	0:0	4	<
water	43:33	0:0	4	14
stmts	43:37	49:4	3	
water	43:37	0:0	4	{
water	44:8	0:0	4	sbr
op	44:11	0:0	4	->
water	44:13	0:0	4	k
op	44:14	0:0	4	[
water	44:15	0:0	4	2
op	44:16	0:0	4	]
op	44:18	0:0	4	=
water	44:20	0:0	4	stop_min
water	44:28	0:0	4	;
call	45:8	45:44	4	make_bands
arg	45:19	45:26	5	stop_dk
water	45:19	0:0	6	stop_dk
arg	45:28	45:36	5	stop_min
water	45:28	0:0	6	stop_min
arg	45:38	45:40	5	64
water	45:38	0:0	6	64
arg	45:42	45:44	5	13
water	45:42	0:0	6	13
water	45:45	0:0	4	;
call	46:8	46:78	4	qsort
arg	46:14	46:21	5	stop_dk
water	46:14	0:0	6	stop_dk
arg	46:23	46:25	5	13
water	46:23	0:0	6	13
arg	46:27	46:45	5	sizeof(stop_dk[0])
op	46:27	0:0	6	sizeof
water	46:33	0:0	6	(
water	46:34	0:0	6	stop_dk
op	46:41	0:0	6	[
water	46:42	0:0	6	0
op	46:43	0:0	6	]
water	46:44	0:0	6	)
arg	46:47	46:78	5	qsort_comparison_function_int16
water	46:47	0:0	6	qsort_comparison_function_int16
water	46:79	0:0	4	;
for	47:8	48:35	4	(k = 0 ;k < spectrum -> bs_stop_freq;k ++)
forinit	47:13	47:18	5	k = 0 ;
water	47:13	0:0	6	k
op	47:15	0:0	6	=
water	47:17	0:0	6	0
water	47:18	0:0	6	;
cond	47:20	47:34	5	k < spectrum -> bs_stop_freq
water	47:20	0:0	6	k
op	47:22	0:0	6	<
water	47:24	0:0	6	spectrum
op	47:32	0:0	6	->
water	47:34	0:0	6	bs_stop_freq
forexpr	47:48	47:49	5	k ++
water	47:48	0:0	6	k
op	47:49	0:0	6	++
stmts	48:12	48:35	5	
water	48:12	0:0	6	sbr
op	48:15	0:0	6	->
water	48:17	0:0	6	k
op	48:18	0:0	6	[
water	48:19	0:0	6	2
op	48:20	0:0	6	]
op	48:22	0:0	6	+=
water	48:25	0:0	6	stop_dk
op	48:32	0:0	6	[
water	48:33	0:0	6	k
op	48:34	0:0	6	]
water	48:35	0:0	6	;
water	49:4	0:0	4	}
else	49:6	51:4	2
stmts	49:11	51:4	3	
if	49:11	51:4	4	(spectrum -> bs_stop_freq == 14)
cond	49:15	49:41	5	spectrum -> bs_stop_freq == 14
water	49:15	0:0	6	spectrum
op	49:23	0:0	6	->
water	49:25	0:0	6	bs_stop_freq
op	49:38	0:0	6	==
water	49:41	0:0	6	14
stmts	49:45	51:4	5	
water	49:45	0:0	6	{
water	50:8	0:0	6	sbr
op	50:11	0:0	6	->
water	50:13	0:0	6	k
op	50:14	0:0	6	[
water	50:15	0:0	6	2
op	50:16	0:0	6	]
op	50:18	0:0	6	=
water	50:20	0:0	6	2
op	50:21	0:0	6	*
water	50:22	0:0	6	sbr
op	50:25	0:0	6	->
water	50:27	0:0	6	k
op	50:28	0:0	6	[
water	50:29	0:0	6	0
op	50:30	0:0	6	]
water	50:31	0:0	6	;
water	51:4	0:0	6	}
else	51:6	53:4	2
stmts	51:11	53:4	3	
if	51:11	53:4	4	(spectrum -> bs_stop_freq == 15)
cond	51:15	51:41	5	spectrum -> bs_stop_freq == 15
water	51:15	0:0	6	spectrum
op	51:23	0:0	6	->
water	51:25	0:0	6	bs_stop_freq
op	51:38	0:0	6	==
water	51:41	0:0	6	15
stmts	51:45	53:4	5	
water	51:45	0:0	6	{
water	52:8	0:0	6	sbr
op	52:11	0:0	6	->
water	52:13	0:0	6	k
op	52:14	0:0	6	[
water	52:15	0:0	6	2
op	52:16	0:0	6	]
op	52:18	0:0	6	=
water	52:20	0:0	6	3
op	52:21	0:0	6	*
water	52:22	0:0	6	sbr
op	52:25	0:0	6	->
water	52:27	0:0	6	k
op	52:28	0:0	6	[
water	52:29	0:0	6	0
op	52:30	0:0	6	]
water	52:31	0:0	6	;
water	53:4	0:0	6	}
else	53:6	57:4	2
stmts	53:11	57:4	3	
water	53:11	0:0	4	{
call	54:8	55:67	4	av_log
arg	54:15	54:24	5	ac->avctx
water	54:15	0:0	6	ac
op	54:17	0:0	6	->
water	54:19	0:0	6	avctx
arg	54:26	54:38	5	AV_LOG_ERROR
water	54:26	0:0	6	AV_LOG_ERROR
arg	55:15	55:43	5	"Invalid bs_stop_freq: %d\n"
water	55:15	0:0	6	"Invalid bs_stop_freq: %d\n"
arg	55:45	55:67	5	spectrum->bs_stop_freq
water	55:45	0:0	6	spectrum
op	55:53	0:0	6	->
water	55:55	0:0	6	bs_stop_freq
water	55:68	0:0	4	;
return	56:8	56:17	4	-1
op	56:15	0:0	5	-
water	56:16	0:0	5	1
water	57:4	0:0	4	}
water	58:4	0:0	2	sbr
op	58:7	0:0	2	->
water	58:9	0:0	2	k
op	58:10	0:0	2	[
water	58:11	0:0	2	2
op	58:12	0:0	2	]
op	58:14	0:0	2	=
call	58:16	58:35	2	FFMIN
arg	58:22	58:24	3	64
water	58:22	0:0	4	64
arg	58:26	58:35	3	sbr->k[2]
water	58:26	0:0	4	sbr
op	58:29	0:0	4	->
water	58:31	0:0	4	k
op	58:32	0:0	4	[
water	58:33	0:0	4	2
op	58:34	0:0	4	]
water	58:36	0:0	2	;
if	60:4	62:4	2	(sbr -> sample_rate <= 32000)
cond	60:8	60:28	3	sbr -> sample_rate <= 32000
water	60:8	0:0	4	sbr
op	60:11	0:0	4	->
water	60:13	0:0	4	sample_rate
op	60:25	0:0	4	<=
water	60:28	0:0	4	32000
stmts	60:35	62:4	3	
water	60:35	0:0	4	{
water	61:8	0:0	4	max_qmf_subbands
op	61:25	0:0	4	=
water	61:27	0:0	4	48
water	61:29	0:0	4	;
water	62:4	0:0	4	}
else	62:6	64:4	2
stmts	62:11	64:4	3	
if	62:11	64:4	4	(sbr -> sample_rate == 44100)
cond	62:15	62:35	5	sbr -> sample_rate == 44100
water	62:15	0:0	6	sbr
op	62:18	0:0	6	->
water	62:20	0:0	6	sample_rate
op	62:32	0:0	6	==
water	62:35	0:0	6	44100
stmts	62:42	64:4	5	
water	62:42	0:0	6	{
water	63:8	0:0	6	max_qmf_subbands
op	63:25	0:0	6	=
water	63:27	0:0	6	35
water	63:29	0:0	6	;
water	64:4	0:0	6	}
else	64:6	65:29	2
stmts	64:11	65:29	3	
if	64:11	65:29	4	(sbr -> sample_rate >= 48000)
cond	64:15	64:35	5	sbr -> sample_rate >= 48000
water	64:15	0:0	6	sbr
op	64:18	0:0	6	->
water	64:20	0:0	6	sample_rate
op	64:32	0:0	6	>=
water	64:35	0:0	6	48000
stmts	65:8	65:29	5	
water	65:8	0:0	6	max_qmf_subbands
op	65:25	0:0	6	=
water	65:27	0:0	6	32
water	65:29	0:0	6	;
else	66:4	67:21	2
stmts	67:8	67:21	3	
call	67:8	67:20	4	av_assert0
arg	67:19	67:20	5	0
water	67:19	0:0	6	0
water	67:21	0:0	4	;
if	68:4	72:4	2	(sbr -> k [ 2 ] - sbr -> k [ 0 ] > max_qmf_subbands)
cond	68:8	68:32	3	sbr -> k [ 2 ] - sbr -> k [ 0 ] > max_qmf_subbands
water	68:8	0:0	4	sbr
op	68:11	0:0	4	->
water	68:13	0:0	4	k
op	68:14	0:0	4	[
water	68:15	0:0	4	2
op	68:16	0:0	4	]
op	68:18	0:0	4	-
water	68:20	0:0	4	sbr
op	68:23	0:0	4	->
water	68:25	0:0	4	k
op	68:26	0:0	4	[
water	68:27	0:0	4	0
op	68:28	0:0	4	]
op	68:30	0:0	4	>
water	68:32	0:0	4	max_qmf_subbands
stmts	68:50	72:4	3	
water	68:50	0:0	4	{
call	69:8	70:86	4	av_log
arg	69:15	69:24	5	ac->avctx
water	69:15	0:0	6	ac
op	69:17	0:0	6	->
water	69:19	0:0	6	avctx
arg	69:26	69:38	5	AV_LOG_ERROR
water	69:26	0:0	6	AV_LOG_ERROR
arg	70:15	70:63	5	"Invalid bitstream, too many QMF subbands: %d\n"
water	70:15	0:0	6	"Invalid bitstream, too many QMF subbands: %d\n"
arg	70:65	70:86	5	sbr->k[2]-sbr->k[0]
water	70:65	0:0	6	sbr
op	70:68	0:0	6	->
water	70:70	0:0	6	k
op	70:71	0:0	6	[
water	70:72	0:0	6	2
op	70:73	0:0	6	]
op	70:75	0:0	6	-
water	70:77	0:0	6	sbr
op	70:80	0:0	6	->
water	70:82	0:0	6	k
op	70:83	0:0	6	[
water	70:84	0:0	6	0
op	70:85	0:0	6	]
water	70:87	0:0	4	;
return	71:8	71:17	4	-1
op	71:15	0:0	5	-
water	71:16	0:0	5	1
water	72:4	0:0	4	}
if	73:4	91:4	2	(! spectrum -> bs_freq_scale)
cond	73:8	73:19	3	! spectrum -> bs_freq_scale
op	73:8	0:0	4	!
water	73:9	0:0	4	spectrum
op	73:17	0:0	4	->
water	73:19	0:0	4	bs_freq_scale
stmts	73:34	91:4	3	
water	73:34	0:0	4	{
decl	74:8	74:22	4	int	dk
water	74:14	0:0	4	,
decl	74:8	74:22	4	int	k2diff
water	75:8	0:0	4	dk
op	75:11	0:0	4	=
water	75:13	0:0	4	spectrum
op	75:21	0:0	4	->
water	75:23	0:0	4	bs_alter_scale
op	75:38	0:0	4	+
water	75:40	0:0	4	1
water	75:41	0:0	4	;
water	76:8	0:0	4	sbr
op	76:11	0:0	4	->
water	76:13	0:0	4	n_master
op	76:22	0:0	4	=
water	76:24	0:0	4	(
water	76:25	0:0	4	(
water	76:26	0:0	4	sbr
op	76:29	0:0	4	->
water	76:31	0:0	4	k
op	76:32	0:0	4	[
water	76:33	0:0	4	2
op	76:34	0:0	4	]
op	76:36	0:0	4	-
water	76:38	0:0	4	sbr
op	76:41	0:0	4	->
water	76:43	0:0	4	k
op	76:44	0:0	4	[
water	76:45	0:0	4	0
op	76:46	0:0	4	]
op	76:48	0:0	4	+
water	76:50	0:0	4	(
water	76:51	0:0	4	dk
op	76:53	0:0	4	&
water	76:54	0:0	4	2
water	76:55	0:0	4	)
water	76:56	0:0	4	)
op	76:58	0:0	4	>>
water	76:61	0:0	4	dk
water	76:63	0:0	4	)
op	76:65	0:0	4	<<
water	76:68	0:0	4	1
water	76:69	0:0	4	;
if	77:8	78:21	4	(check_n_master (ac -> avctx ,sbr -> n_master ,sbr -> spectrum_params . bs_xover_band ))
cond	77:12	77:87	5	check_n_master (ac -> avctx ,sbr -> n_master ,sbr -> spectrum_params . bs_xover_band )
call	77:12	77:87	6	check_n_master
arg	77:27	77:36	7	ac->avctx
water	77:27	0:0	8	ac
op	77:29	0:0	8	->
water	77:31	0:0	8	avctx
arg	77:38	77:51	7	sbr->n_master
water	77:38	0:0	8	sbr
op	77:41	0:0	8	->
water	77:43	0:0	8	n_master
arg	77:53	77:87	7	sbr->spectrum_params.bs_xover_band
water	77:53	0:0	8	sbr
op	77:56	0:0	8	->
water	77:58	0:0	8	spectrum_params
op	77:73	0:0	8	.
water	77:74	0:0	8	bs_xover_band
stmts	78:12	78:21	5	
return	78:12	78:21	6	-1
op	78:19	0:0	7	-
water	78:20	0:0	7	1
for	79:8	80:33	4	(k = 1 ;k <= sbr -> n_master;k ++)
forinit	79:13	79:18	5	k = 1 ;
water	79:13	0:0	6	k
op	79:15	0:0	6	=
water	79:17	0:0	6	1
water	79:18	0:0	6	;
cond	79:20	79:30	5	k <= sbr -> n_master
water	79:20	0:0	6	k
op	79:22	0:0	6	<=
water	79:25	0:0	6	sbr
op	79:28	0:0	6	->
water	79:30	0:0	6	n_master
forexpr	79:40	79:41	5	k ++
water	79:40	0:0	6	k
op	79:41	0:0	6	++
stmts	80:12	80:33	5	
water	80:12	0:0	6	sbr
op	80:15	0:0	6	->
water	80:17	0:0	6	f_master
op	80:25	0:0	6	[
water	80:26	0:0	6	k
op	80:27	0:0	6	]
op	80:29	0:0	6	=
water	80:31	0:0	6	dk
water	80:33	0:0	6	;
water	81:8	0:0	4	k2diff
op	81:15	0:0	4	=
water	81:17	0:0	4	sbr
op	81:20	0:0	4	->
water	81:22	0:0	4	k
op	81:23	0:0	4	[
water	81:24	0:0	4	2
op	81:25	0:0	4	]
op	81:27	0:0	4	-
water	81:29	0:0	4	sbr
op	81:32	0:0	4	->
water	81:34	0:0	4	k
op	81:35	0:0	4	[
water	81:36	0:0	4	0
op	81:37	0:0	4	]
op	81:39	0:0	4	-
water	81:41	0:0	4	sbr
op	81:44	0:0	4	->
water	81:46	0:0	4	n_master
op	81:55	0:0	4	*
water	81:57	0:0	4	dk
water	81:59	0:0	4	;
if	82:8	85:8	4	(k2diff < 0)
cond	82:12	82:21	5	k2diff < 0
water	82:12	0:0	6	k2diff
op	82:19	0:0	6	<
water	82:21	0:0	6	0
stmts	82:24	85:8	5	
water	82:24	0:0	6	{
water	83:12	0:0	6	sbr
op	83:15	0:0	6	->
water	83:17	0:0	6	f_master
op	83:25	0:0	6	[
water	83:26	0:0	6	1
op	83:27	0:0	6	]
op	83:28	0:0	6	--
water	83:30	0:0	6	;
water	84:12	0:0	6	sbr
op	84:15	0:0	6	->
water	84:17	0:0	6	f_master
op	84:25	0:0	6	[
water	84:26	0:0	6	2
op	84:27	0:0	6	]
op	84:28	0:0	6	-=
water	84:31	0:0	6	(
water	84:32	0:0	6	k2diff
op	84:39	0:0	6	<
op	84:41	0:0	6	-
water	84:42	0:0	6	1
water	84:43	0:0	6	)
water	84:44	0:0	6	;
water	85:8	0:0	6	}
else	85:10	87:8	4
stmts	85:15	87:8	5	
if	85:15	87:8	6	(k2diff)
cond	85:19	85:19	7	k2diff
water	85:19	0:0	8	k2diff
stmts	85:27	87:8	7	
water	85:27	0:0	8	{
water	86:12	0:0	8	sbr
op	86:15	0:0	8	->
water	86:17	0:0	8	f_master
op	86:25	0:0	8	[
water	86:26	0:0	8	sbr
op	86:29	0:0	8	->
water	86:31	0:0	8	n_master
op	86:39	0:0	8	]
op	86:40	0:0	8	++
water	86:42	0:0	8	;
water	87:8	0:0	8	}
water	88:8	0:0	4	sbr
op	88:11	0:0	4	->
water	88:13	0:0	4	f_master
op	88:21	0:0	4	[
water	88:22	0:0	4	0
op	88:23	0:0	4	]
op	88:25	0:0	4	=
water	88:27	0:0	4	sbr
op	88:30	0:0	4	->
water	88:32	0:0	4	k
op	88:33	0:0	4	[
water	88:34	0:0	4	0
op	88:35	0:0	4	]
water	88:36	0:0	4	;
for	89:8	90:52	4	(k = 1 ;k <= sbr -> n_master;k ++)
forinit	89:13	89:18	5	k = 1 ;
water	89:13	0:0	6	k
op	89:15	0:0	6	=
water	89:17	0:0	6	1
water	89:18	0:0	6	;
cond	89:20	89:30	5	k <= sbr -> n_master
water	89:20	0:0	6	k
op	89:22	0:0	6	<=
water	89:25	0:0	6	sbr
op	89:28	0:0	6	->
water	89:30	0:0	6	n_master
forexpr	89:40	89:41	5	k ++
water	89:40	0:0	6	k
op	89:41	0:0	6	++
stmts	90:12	90:52	5	
water	90:12	0:0	6	sbr
op	90:15	0:0	6	->
water	90:17	0:0	6	f_master
op	90:25	0:0	6	[
water	90:26	0:0	6	k
op	90:27	0:0	6	]
op	90:29	0:0	6	+=
water	90:32	0:0	6	sbr
op	90:35	0:0	6	->
water	90:37	0:0	6	f_master
op	90:45	0:0	6	[
water	90:46	0:0	6	k
op	90:48	0:0	6	-
water	90:50	0:0	6	1
op	90:51	0:0	6	]
water	90:52	0:0	6	;
water	91:4	0:0	4	}
else	91:6	188:4	2
stmts	91:11	188:4	3	
water	91:11	0:0	4	{
decl	92:8	92:52	4	int	half_bands
op	92:23	0:0	4	=
water	92:25	0:0	4	7
op	92:27	0:0	4	-
water	92:29	0:0	4	spectrum
op	92:37	0:0	4	->
water	92:39	0:0	4	bs_freq_scale
decl	93:8	93:36	4	int	two_regions
water	93:23	0:0	4	,
decl	93:8	93:36	4	int	num_bands_0
decl	94:8	94:30	4	int	vdk0_max
water	94:20	0:0	4	,
decl	94:8	94:30	4	int	vdk1_min
decl	95:8	95:23	4	int16_t	vk0[49]
decl	97:8	97:23	4	int	tmp
water	97:15	0:0	4	,
decl	97:8	97:23	4	int	nz
op	97:20	0:0	4	=
water	97:22	0:0	4	0
if	99:8	102:8	4	(49 * sbr -> k [ 2 ] > 110 * sbr -> k [ 0 ])
cond	99:12	99:43	5	49 * sbr -> k [ 2 ] > 110 * sbr -> k [ 0 ]
water	99:12	0:0	6	49
op	99:15	0:0	6	*
water	99:17	0:0	6	sbr
op	99:20	0:0	6	->
water	99:22	0:0	6	k
op	99:23	0:0	6	[
water	99:24	0:0	6	2
op	99:25	0:0	6	]
op	99:27	0:0	6	>
water	99:29	0:0	6	110
op	99:33	0:0	6	*
water	99:35	0:0	6	sbr
op	99:38	0:0	6	->
water	99:40	0:0	6	k
op	99:41	0:0	6	[
water	99:42	0:0	6	0
op	99:43	0:0	6	]
stmts	99:46	102:8	5	
water	99:46	0:0	6	{
water	100:12	0:0	6	two_regions
op	100:24	0:0	6	=
water	100:26	0:0	6	1
water	100:27	0:0	6	;
water	101:12	0:0	6	sbr
op	101:15	0:0	6	->
water	101:17	0:0	6	k
op	101:18	0:0	6	[
water	101:19	0:0	6	1
op	101:20	0:0	6	]
op	101:22	0:0	6	=
water	101:24	0:0	6	2
op	101:26	0:0	6	*
water	101:28	0:0	6	sbr
op	101:31	0:0	6	->
water	101:33	0:0	6	k
op	101:34	0:0	6	[
water	101:35	0:0	6	0
op	101:36	0:0	6	]
water	101:37	0:0	6	;
water	102:8	0:0	6	}
else	102:10	105:8	4
stmts	102:15	105:8	5	
water	102:15	0:0	6	{
water	103:12	0:0	6	two_regions
op	103:24	0:0	6	=
water	103:26	0:0	6	0
water	103:27	0:0	6	;
water	104:12	0:0	6	sbr
op	104:15	0:0	6	->
water	104:17	0:0	6	k
op	104:18	0:0	6	[
water	104:19	0:0	6	1
op	104:20	0:0	6	]
op	104:22	0:0	6	=
water	104:24	0:0	6	sbr
op	104:27	0:0	6	->
water	104:29	0:0	6	k
op	104:30	0:0	6	[
water	104:31	0:0	6	2
op	104:32	0:0	6	]
water	104:33	0:0	6	;
water	105:8	0:0	6	}
water	107:8	0:0	4	tmp
op	107:12	0:0	4	=
water	107:14	0:0	4	(
water	107:15	0:0	4	sbr
op	107:18	0:0	4	->
water	107:20	0:0	4	k
op	107:21	0:0	4	[
water	107:22	0:0	4	1
op	107:23	0:0	4	]
op	107:25	0:0	4	<<
water	107:28	0:0	4	23
water	107:30	0:0	4	)
op	107:32	0:0	4	/
water	107:34	0:0	4	sbr
op	107:37	0:0	4	->
water	107:39	0:0	4	k
op	107:40	0:0	4	[
water	107:41	0:0	4	0
op	107:42	0:0	4	]
water	107:43	0:0	4	;
while	108:8	111:8	4	(tmp < 0 x40000000)
cond	108:15	108:22	5	tmp < 0 x40000000
water	108:15	0:0	6	tmp
op	108:19	0:0	6	<
water	108:21	0:0	6	0
water	108:22	0:0	6	x40000000
stmts	108:33	111:8	5	
water	108:33	0:0	6	{
water	109:10	0:0	6	tmp
op	109:14	0:0	6	<<=
water	109:18	0:0	6	1
water	109:19	0:0	6	;
water	110:10	0:0	6	nz
op	110:12	0:0	6	++
water	110:14	0:0	6	;
water	111:8	0:0	6	}
water	112:8	0:0	4	tmp
op	112:12	0:0	4	=
call	112:14	112:40	4	fixed_log
arg	112:24	112:40	5	tmp-0x80000000
water	112:24	0:0	6	tmp
op	112:28	0:0	6	-
water	112:30	0:0	6	0
water	112:31	0:0	6	x80000000
water	112:41	0:0	4	;
water	113:8	0:0	4	tmp
op	113:12	0:0	4	=
call	113:14	113:71	4	(int)
arg	113:20	113:71	5	((int64_t)tmp*CONST_RECIP_LN2+0x20000000)>>30
water	113:20	0:0	6	(
water	113:21	0:0	6	(
water	113:22	0:0	6	int64_t
water	113:29	0:0	6	)
water	113:30	0:0	6	tmp
op	113:34	0:0	6	*
water	113:36	0:0	6	CONST_RECIP_LN2
op	113:52	0:0	6	+
water	113:54	0:0	6	0
water	113:55	0:0	6	x20000000
water	113:64	0:0	6	)
op	113:66	0:0	6	>>
water	113:69	0:0	6	30
water	113:72	0:0	4	;
water	114:8	0:0	4	tmp
op	114:12	0:0	4	=
water	114:14	0:0	4	(
water	114:15	0:0	4	(
water	114:16	0:0	4	(
water	114:17	0:0	4	tmp
op	114:21	0:0	4	+
water	114:23	0:0	4	0
water	114:24	0:0	4	x80
water	114:27	0:0	4	)
op	114:29	0:0	4	>>
water	114:32	0:0	4	8
water	114:33	0:0	4	)
op	114:35	0:0	4	+
water	114:37	0:0	4	(
water	114:38	0:0	4	(
water	114:39	0:0	4	8
op	114:41	0:0	4	-
water	114:43	0:0	4	nz
water	114:45	0:0	4	)
op	114:47	0:0	4	<<
water	114:50	0:0	4	23
water	114:52	0:0	4	)
water	114:53	0:0	4	)
op	114:55	0:0	4	*
water	114:57	0:0	4	half_bands
water	114:67	0:0	4	;
water	115:8	0:0	4	num_bands_0
op	115:20	0:0	4	=
water	115:22	0:0	4	(
water	115:23	0:0	4	(
water	115:24	0:0	4	tmp
op	115:28	0:0	4	+
water	115:30	0:0	4	0
water	115:31	0:0	4	x400000
water	115:38	0:0	4	)
op	115:40	0:0	4	>>
water	115:43	0:0	4	23
water	115:45	0:0	4	)
op	115:47	0:0	4	*
water	115:49	0:0	4	2
water	115:50	0:0	4	;
water	117:8	0:0	4	num_bands_0
op	117:20	0:0	4	=
call	117:22	117:77	4	lrintf
arg	117:29	117:77	5	half_bands*log2f(sbr->k[1]/(float)sbr->k[0])
water	117:29	0:0	6	half_bands
call	117:40	117:76	6	*log2f
arg	117:48	117:76	7	sbr->k[1]/(float)sbr->k[0]
water	117:48	0:0	8	sbr
op	117:51	0:0	8	->
water	117:53	0:0	8	k
op	117:54	0:0	8	[
water	117:55	0:0	8	1
op	117:56	0:0	8	]
op	117:58	0:0	8	/
water	117:60	0:0	8	(
water	117:61	0:0	8	float
water	117:66	0:0	8	)
water	117:67	0:0	8	sbr
op	117:70	0:0	8	->
water	117:72	0:0	8	k
op	117:73	0:0	8	[
water	117:74	0:0	8	0
op	117:75	0:0	8	]
op	117:79	0:0	4	*
water	117:81	0:0	4	2
water	117:82	0:0	4	;
if	119:8	122:8	4	(num_bands_0 <= 0)
cond	119:12	119:27	5	num_bands_0 <= 0
water	119:12	0:0	6	num_bands_0
op	119:24	0:0	6	<=
water	119:27	0:0	6	0
stmts	119:30	122:8	5	
water	119:30	0:0	6	{
call	120:12	120:84	6	av_log
arg	120:19	120:28	7	ac->avctx
water	120:19	0:0	8	ac
op	120:21	0:0	8	->
water	120:23	0:0	8	avctx
arg	120:30	120:42	7	AV_LOG_ERROR
water	120:30	0:0	8	AV_LOG_ERROR
arg	120:44	120:71	7	"Invalid num_bands_0: %d\n"
water	120:44	0:0	8	"Invalid num_bands_0: %d\n"
arg	120:73	120:84	7	num_bands_0
water	120:73	0:0	8	num_bands_0
water	120:85	0:0	6	;
return	121:12	121:21	6	-1
op	121:19	0:0	7	-
water	121:20	0:0	7	1
water	122:8	0:0	6	}
water	123:8	0:0	4	vk0
op	123:11	0:0	4	[
water	123:12	0:0	4	0
op	123:13	0:0	4	]
op	123:15	0:0	4	=
water	123:17	0:0	4	0
water	123:18	0:0	4	;
call	124:8	124:59	4	make_bands
arg	124:19	124:24	5	vk0+1
water	124:19	0:0	6	vk0
op	124:22	0:0	6	+
water	124:23	0:0	6	1
arg	124:26	124:35	5	sbr->k[0]
water	124:26	0:0	6	sbr
op	124:29	0:0	6	->
water	124:31	0:0	6	k
op	124:32	0:0	6	[
water	124:33	0:0	6	0
op	124:34	0:0	6	]
arg	124:37	124:46	5	sbr->k[1]
water	124:37	0:0	6	sbr
op	124:40	0:0	6	->
water	124:42	0:0	6	k
op	124:43	0:0	6	[
water	124:44	0:0	6	1
op	124:45	0:0	6	]
arg	124:48	124:59	5	num_bands_0
water	124:48	0:0	6	num_bands_0
water	124:60	0:0	4	;
call	125:8	125:83	4	qsort
arg	125:14	125:21	5	vk0+1
water	125:14	0:0	6	vk0
op	125:18	0:0	6	+
water	125:20	0:0	6	1
arg	125:23	125:34	5	num_bands_0
water	125:23	0:0	6	num_bands_0
arg	125:36	125:50	5	sizeof(vk0[1])
op	125:36	0:0	6	sizeof
water	125:42	0:0	6	(
water	125:43	0:0	6	vk0
op	125:46	0:0	6	[
water	125:47	0:0	6	1
op	125:48	0:0	6	]
water	125:49	0:0	6	)
arg	125:52	125:83	5	qsort_comparison_function_int16
water	125:52	0:0	6	qsort_comparison_function_int16
water	125:84	0:0	4	;
water	126:8	0:0	4	vdk0_max
op	126:17	0:0	4	=
water	126:19	0:0	4	vk0
op	126:22	0:0	4	[
water	126:23	0:0	4	num_bands_0
op	126:34	0:0	4	]
water	126:35	0:0	4	;
water	127:8	0:0	4	vk0
op	127:11	0:0	4	[
water	127:12	0:0	4	0
op	127:13	0:0	4	]
op	127:15	0:0	4	=
water	127:17	0:0	4	sbr
op	127:20	0:0	4	->
water	127:22	0:0	4	k
op	127:23	0:0	4	[
water	127:24	0:0	4	0
op	127:25	0:0	4	]
water	127:26	0:0	4	;
for	128:8	134:8	4	(k = 1 ;k <= num_bands_0;k ++)
forinit	128:13	128:18	5	k = 1 ;
water	128:13	0:0	6	k
op	128:15	0:0	6	=
water	128:17	0:0	6	1
water	128:18	0:0	6	;
cond	128:20	128:25	5	k <= num_bands_0
water	128:20	0:0	6	k
op	128:22	0:0	6	<=
water	128:25	0:0	6	num_bands_0
forexpr	128:38	128:39	5	k ++
water	128:38	0:0	6	k
op	128:39	0:0	6	++
stmts	128:43	134:8	5	
water	128:43	0:0	6	{
if	129:12	132:12	6	(vk0 [ k ] <= 0)
cond	129:16	129:26	7	vk0 [ k ] <= 0
water	129:16	0:0	8	vk0
op	129:19	0:0	8	[
water	129:20	0:0	8	k
op	129:21	0:0	8	]
op	129:23	0:0	8	<=
water	129:26	0:0	8	0
stmts	129:29	132:12	7	
water	129:29	0:0	8	{
call	130:16	130:83	8	av_log
arg	130:23	130:32	9	ac->avctx
water	130:23	0:0	10	ac
op	130:25	0:0	10	->
water	130:27	0:0	10	avctx
arg	130:34	130:46	9	AV_LOG_ERROR
water	130:34	0:0	10	AV_LOG_ERROR
arg	130:48	130:72	9	"Invalid vDk0[%d]: %d\n"
water	130:48	0:0	10	"Invalid vDk0[%d]: %d\n"
arg	130:74	130:75	9	k
water	130:74	0:0	10	k
arg	130:77	130:83	9	vk0[k]
water	130:77	0:0	10	vk0
op	130:80	0:0	10	[
water	130:81	0:0	10	k
op	130:82	0:0	10	]
water	130:84	0:0	8	;
return	131:16	131:25	8	-1
op	131:23	0:0	9	-
water	131:24	0:0	9	1
water	132:12	0:0	8	}
water	133:12	0:0	6	vk0
op	133:15	0:0	6	[
water	133:16	0:0	6	k
op	133:17	0:0	6	]
op	133:19	0:0	6	+=
water	133:22	0:0	6	vk0
op	133:25	0:0	6	[
water	133:26	0:0	6	k
op	133:27	0:0	6	-
water	133:28	0:0	6	1
op	133:29	0:0	6	]
water	133:30	0:0	6	;
water	134:8	0:0	6	}
if	135:8	182:8	4	(two_regions)
cond	135:12	135:12	5	two_regions
water	135:12	0:0	6	two_regions
stmts	135:25	182:8	5	
water	135:25	0:0	6	{
decl	136:12	136:27	6	int16_t	vk1[49]
decl	138:12	138:27	6	int	num_bands_1
water	139:12	0:0	6	tmp
op	139:16	0:0	6	=
water	139:18	0:0	6	(
water	139:19	0:0	6	sbr
op	139:22	0:0	6	->
water	139:24	0:0	6	k
op	139:25	0:0	6	[
water	139:26	0:0	6	2
op	139:27	0:0	6	]
op	139:29	0:0	6	<<
water	139:32	0:0	6	23
water	139:34	0:0	6	)
op	139:36	0:0	6	/
water	139:38	0:0	6	sbr
op	139:41	0:0	6	->
water	139:43	0:0	6	k
op	139:44	0:0	6	[
water	139:45	0:0	6	1
op	139:46	0:0	6	]
water	139:47	0:0	6	;
water	140:12	0:0	6	nz
op	140:15	0:0	6	=
water	140:17	0:0	6	0
water	140:18	0:0	6	;
while	141:12	144:12	6	(tmp < 0 x40000000)
cond	141:19	141:26	7	tmp < 0 x40000000
water	141:19	0:0	8	tmp
op	141:23	0:0	8	<
water	141:25	0:0	8	0
water	141:26	0:0	8	x40000000
stmts	141:37	144:12	7	
water	141:37	0:0	8	{
water	142:14	0:0	8	tmp
op	142:18	0:0	8	<<=
water	142:22	0:0	8	1
water	142:23	0:0	8	;
water	143:14	0:0	8	nz
op	143:16	0:0	8	++
water	143:18	0:0	8	;
water	144:12	0:0	8	}
water	145:12	0:0	6	tmp
op	145:16	0:0	6	=
call	145:18	145:44	6	fixed_log
arg	145:28	145:44	7	tmp-0x80000000
water	145:28	0:0	8	tmp
op	145:32	0:0	8	-
water	145:34	0:0	8	0
water	145:35	0:0	8	x80000000
water	145:45	0:0	6	;
water	146:12	0:0	6	tmp
op	146:16	0:0	6	=
call	146:18	146:75	6	(int)
arg	146:24	146:75	7	((int64_t)tmp*CONST_RECIP_LN2+0x20000000)>>30
water	146:24	0:0	8	(
water	146:25	0:0	8	(
water	146:26	0:0	8	int64_t
water	146:33	0:0	8	)
water	146:34	0:0	8	tmp
op	146:38	0:0	8	*
water	146:40	0:0	8	CONST_RECIP_LN2
op	146:56	0:0	8	+
water	146:58	0:0	8	0
water	146:59	0:0	8	x20000000
water	146:68	0:0	8	)
op	146:70	0:0	8	>>
water	146:73	0:0	8	30
water	146:76	0:0	6	;
water	147:12	0:0	6	tmp
op	147:16	0:0	6	=
water	147:18	0:0	6	(
water	147:19	0:0	6	(
water	147:20	0:0	6	(
water	147:21	0:0	6	tmp
op	147:25	0:0	6	+
water	147:27	0:0	6	0
water	147:28	0:0	6	x80
water	147:31	0:0	6	)
op	147:33	0:0	6	>>
water	147:36	0:0	6	8
water	147:37	0:0	6	)
op	147:39	0:0	6	+
water	147:41	0:0	6	(
water	147:42	0:0	6	(
water	147:43	0:0	6	8
op	147:45	0:0	6	-
water	147:47	0:0	6	nz
water	147:49	0:0	6	)
op	147:51	0:0	6	<<
water	147:54	0:0	6	23
water	147:56	0:0	6	)
water	147:57	0:0	6	)
op	147:59	0:0	6	*
water	147:61	0:0	6	half_bands
water	147:71	0:0	6	;
if	148:12	149:77	6	(spectrum -> bs_alter_scale)
cond	148:16	148:26	7	spectrum -> bs_alter_scale
water	148:16	0:0	8	spectrum
op	148:24	0:0	8	->
water	148:26	0:0	8	bs_alter_scale
stmts	149:16	149:77	7	
water	149:16	0:0	8	tmp
op	149:20	0:0	8	=
call	149:22	149:76	8	(int)
arg	149:28	149:76	9	((int64_t)tmp*CONST_076923+0x40000000)>>31
water	149:28	0:0	10	(
water	149:29	0:0	10	(
water	149:30	0:0	10	int64_t
water	149:37	0:0	10	)
water	149:38	0:0	10	tmp
op	149:42	0:0	10	*
water	149:44	0:0	10	CONST_076923
op	149:57	0:0	10	+
water	149:59	0:0	10	0
water	149:60	0:0	10	x40000000
water	149:69	0:0	10	)
op	149:71	0:0	10	>>
water	149:74	0:0	10	31
water	149:77	0:0	8	;
water	150:12	0:0	6	num_bands_1
op	150:24	0:0	6	=
water	150:26	0:0	6	(
water	150:27	0:0	6	(
water	150:28	0:0	6	tmp
op	150:32	0:0	6	+
water	150:34	0:0	6	0
water	150:35	0:0	6	x400000
water	150:42	0:0	6	)
op	150:44	0:0	6	>>
water	150:47	0:0	6	23
water	150:49	0:0	6	)
op	150:51	0:0	6	*
water	150:53	0:0	6	2
water	150:54	0:0	6	;
decl	152:12	153:59	6	float	invwarp
op	152:26	0:0	6	=
water	152:28	0:0	6	spectrum
op	152:36	0:0	6	->
water	152:38	0:0	6	bs_alter_scale
water	152:53	0:0	6	?
water	152:55	0:0	6	0
op	152:56	0:0	6	.
water	152:57	0:0	6	76923076923076923077
water	152:77	0:0	6	f
water	153:53	0:0	6	:
water	153:55	0:0	6	1
op	153:56	0:0	6	.
water	153:57	0:0	6	0
water	153:58	0:0	6	f
decl	154:12	155:77	6	int	num_bands_1
op	154:28	0:0	6	=
call	154:30	155:72	7	lrintf
arg	154:37	155:72	8	half_bands*invwarp*log2f(sbr->k[2]/(float)sbr->k[1])
water	154:37	0:0	9	half_bands
op	154:48	0:0	9	*
water	154:50	0:0	9	invwarp
call	154:58	155:71	9	*log2f
arg	155:43	155:71	10	sbr->k[2]/(float)sbr->k[1]
water	155:43	0:0	11	sbr
op	155:46	0:0	11	->
water	155:48	0:0	11	k
op	155:49	0:0	11	[
water	155:50	0:0	11	2
op	155:51	0:0	11	]
op	155:53	0:0	11	/
water	155:55	0:0	11	(
water	155:56	0:0	11	float
water	155:61	0:0	11	)
water	155:62	0:0	11	sbr
op	155:65	0:0	11	->
water	155:67	0:0	11	k
op	155:68	0:0	11	[
water	155:69	0:0	11	1
op	155:70	0:0	11	]
op	155:74	0:0	6	*
water	155:76	0:0	6	2
call	157:12	157:63	6	make_bands
arg	157:23	157:28	7	vk1+1
water	157:23	0:0	8	vk1
op	157:26	0:0	8	+
water	157:27	0:0	8	1
arg	157:30	157:39	7	sbr->k[1]
water	157:30	0:0	8	sbr
op	157:33	0:0	8	->
water	157:35	0:0	8	k
op	157:36	0:0	8	[
water	157:37	0:0	8	1
op	157:38	0:0	8	]
arg	157:41	157:50	7	sbr->k[2]
water	157:41	0:0	8	sbr
op	157:44	0:0	8	->
water	157:46	0:0	8	k
op	157:47	0:0	8	[
water	157:48	0:0	8	2
op	157:49	0:0	8	]
arg	157:52	157:63	7	num_bands_1
water	157:52	0:0	8	num_bands_1
water	157:64	0:0	6	;
water	158:12	0:0	6	vdk1_min
op	158:21	0:0	6	=
call	158:23	158:59	6	array_min_int16
arg	158:39	158:46	7	vk1+1
water	158:39	0:0	8	vk1
op	158:43	0:0	8	+
water	158:45	0:0	8	1
arg	158:48	158:59	7	num_bands_1
water	158:48	0:0	8	num_bands_1
water	158:60	0:0	6	;
if	159:12	165:12	6	(vdk1_min < vdk0_max)
cond	159:16	159:27	7	vdk1_min < vdk0_max
water	159:16	0:0	8	vdk1_min
op	159:25	0:0	8	<
water	159:27	0:0	8	vdk0_max
stmts	159:37	165:12	7	
water	159:37	0:0	8	{
decl	160:16	160:26	8	int	change
call	161:16	161:91	8	qsort
arg	161:22	161:29	9	vk1+1
water	161:22	0:0	10	vk1
op	161:26	0:0	10	+
water	161:28	0:0	10	1
arg	161:31	161:42	9	num_bands_1
water	161:31	0:0	10	num_bands_1
arg	161:44	161:58	9	sizeof(vk1[1])
op	161:44	0:0	10	sizeof
water	161:50	0:0	10	(
water	161:51	0:0	10	vk1
op	161:54	0:0	10	[
water	161:55	0:0	10	1
op	161:56	0:0	10	]
water	161:57	0:0	10	)
arg	161:60	161:91	9	qsort_comparison_function_int16
water	161:60	0:0	10	qsort_comparison_function_int16
water	161:92	0:0	8	;
water	162:16	0:0	8	change
op	162:23	0:0	8	=
call	162:25	162:82	8	FFMIN
arg	162:31	162:48	9	vdk0_max-vk1[1]
water	162:31	0:0	10	vdk0_max
op	162:40	0:0	10	-
water	162:42	0:0	10	vk1
op	162:45	0:0	10	[
water	162:46	0:0	10	1
op	162:47	0:0	10	]
arg	162:50	162:82	9	(vk1[num_bands_1]-vk1[1])>>1
water	162:50	0:0	10	(
water	162:51	0:0	10	vk1
op	162:54	0:0	10	[
water	162:55	0:0	10	num_bands_1
op	162:66	0:0	10	]
op	162:68	0:0	10	-
water	162:70	0:0	10	vk1
op	162:73	0:0	10	[
water	162:74	0:0	10	1
op	162:75	0:0	10	]
water	162:76	0:0	10	)
op	162:78	0:0	10	>>
water	162:81	0:0	10	1
water	162:83	0:0	8	;
water	163:16	0:0	8	vk1
op	163:19	0:0	8	[
water	163:20	0:0	8	1
op	163:21	0:0	8	]
op	163:33	0:0	8	+=
water	163:36	0:0	8	change
water	163:42	0:0	8	;
water	164:16	0:0	8	vk1
op	164:19	0:0	8	[
water	164:20	0:0	8	num_bands_1
op	164:31	0:0	8	]
op	164:33	0:0	8	-=
water	164:36	0:0	8	change
water	164:42	0:0	8	;
water	165:12	0:0	8	}
call	166:12	166:87	6	qsort
arg	166:18	166:25	7	vk1+1
water	166:18	0:0	8	vk1
op	166:22	0:0	8	+
water	166:24	0:0	8	1
arg	166:27	166:38	7	num_bands_1
water	166:27	0:0	8	num_bands_1
arg	166:40	166:54	7	sizeof(vk1[1])
op	166:40	0:0	8	sizeof
water	166:46	0:0	8	(
water	166:47	0:0	8	vk1
op	166:50	0:0	8	[
water	166:51	0:0	8	1
op	166:52	0:0	8	]
water	166:53	0:0	8	)
arg	166:56	166:87	7	qsort_comparison_function_int16
water	166:56	0:0	8	qsort_comparison_function_int16
water	166:88	0:0	6	;
water	167:12	0:0	6	vk1
op	167:15	0:0	6	[
water	167:16	0:0	6	0
op	167:17	0:0	6	]
op	167:19	0:0	6	=
water	167:21	0:0	6	sbr
op	167:24	0:0	6	->
water	167:26	0:0	6	k
op	167:27	0:0	6	[
water	167:28	0:0	6	1
op	167:29	0:0	6	]
water	167:30	0:0	6	;
for	168:12	174:12	6	(k = 1 ;k <= num_bands_1;k ++)
forinit	168:17	168:22	7	k = 1 ;
water	168:17	0:0	8	k
op	168:19	0:0	8	=
water	168:21	0:0	8	1
water	168:22	0:0	8	;
cond	168:24	168:29	7	k <= num_bands_1
water	168:24	0:0	8	k
op	168:26	0:0	8	<=
water	168:29	0:0	8	num_bands_1
forexpr	168:42	168:43	7	k ++
water	168:42	0:0	8	k
op	168:43	0:0	8	++
stmts	168:47	174:12	7	
water	168:47	0:0	8	{
if	169:16	172:16	8	(vk1 [ k ] <= 0)
cond	169:20	169:30	9	vk1 [ k ] <= 0
water	169:20	0:0	10	vk1
op	169:23	0:0	10	[
water	169:24	0:0	10	k
op	169:25	0:0	10	]
op	169:27	0:0	10	<=
water	169:30	0:0	10	0
stmts	169:33	172:16	9	
water	169:33	0:0	10	{
call	170:20	170:87	10	av_log
arg	170:27	170:36	11	ac->avctx
water	170:27	0:0	12	ac
op	170:29	0:0	12	->
water	170:31	0:0	12	avctx
arg	170:38	170:50	11	AV_LOG_ERROR
water	170:38	0:0	12	AV_LOG_ERROR
arg	170:52	170:76	11	"Invalid vDk1[%d]: %d\n"
water	170:52	0:0	12	"Invalid vDk1[%d]: %d\n"
arg	170:78	170:79	11	k
water	170:78	0:0	12	k
arg	170:81	170:87	11	vk1[k]
water	170:81	0:0	12	vk1
op	170:84	0:0	12	[
water	170:85	0:0	12	k
op	170:86	0:0	12	]
water	170:88	0:0	10	;
return	171:20	171:29	10	-1
op	171:27	0:0	11	-
water	171:28	0:0	11	1
water	172:16	0:0	10	}
water	173:16	0:0	8	vk1
op	173:19	0:0	8	[
water	173:20	0:0	8	k
op	173:21	0:0	8	]
op	173:23	0:0	8	+=
water	173:26	0:0	8	vk1
op	173:29	0:0	8	[
water	173:30	0:0	8	k
op	173:31	0:0	8	-
water	173:32	0:0	8	1
op	173:33	0:0	8	]
water	173:34	0:0	8	;
water	174:12	0:0	8	}
water	175:12	0:0	6	sbr
op	175:15	0:0	6	->
water	175:17	0:0	6	n_master
op	175:26	0:0	6	=
water	175:28	0:0	6	num_bands_0
op	175:40	0:0	6	+
water	175:42	0:0	6	num_bands_1
water	175:53	0:0	6	;
if	176:12	177:25	6	(check_n_master (ac -> avctx ,sbr -> n_master ,sbr -> spectrum_params . bs_xover_band ))
cond	176:16	176:91	7	check_n_master (ac -> avctx ,sbr -> n_master ,sbr -> spectrum_params . bs_xover_band )
call	176:16	176:91	8	check_n_master
arg	176:31	176:40	9	ac->avctx
water	176:31	0:0	10	ac
op	176:33	0:0	10	->
water	176:35	0:0	10	avctx
arg	176:42	176:55	9	sbr->n_master
water	176:42	0:0	10	sbr
op	176:45	0:0	10	->
water	176:47	0:0	10	n_master
arg	176:57	176:91	9	sbr->spectrum_params.bs_xover_band
water	176:57	0:0	10	sbr
op	176:60	0:0	10	->
water	176:62	0:0	10	spectrum_params
op	176:77	0:0	10	.
water	176:78	0:0	10	bs_xover_band
stmts	177:16	177:25	7	
return	177:16	177:25	8	-1
op	177:23	0:0	9	-
water	177:24	0:0	9	1
call	178:12	179:63	6	memcpy
arg	178:19	178:36	7	&sbr->f_master[0]
op	178:19	0:0	8	&
water	178:20	0:0	8	sbr
op	178:23	0:0	8	->
water	178:25	0:0	8	f_master
op	178:33	0:0	8	[
water	178:34	0:0	8	0
op	178:35	0:0	8	]
arg	178:52	178:55	7	vk0
water	178:52	0:0	8	vk0
arg	179:19	179:63	7	(num_bands_0+1)*sizeof(sbr->f_master[0])
water	179:19	0:0	8	(
water	179:20	0:0	8	num_bands_0
op	179:32	0:0	8	+
water	179:34	0:0	8	1
water	179:35	0:0	8	)
op	179:37	0:0	8	*
op	179:39	0:0	8	sizeof
water	179:45	0:0	8	(
water	179:46	0:0	8	sbr
op	179:49	0:0	8	->
water	179:51	0:0	8	f_master
op	179:59	0:0	8	[
water	179:60	0:0	8	0
op	179:61	0:0	8	]
water	179:62	0:0	8	)
water	179:64	0:0	6	;
call	180:12	181:63	6	memcpy
arg	180:19	180:50	7	&sbr->f_master[num_bands_0+1]
op	180:19	0:0	8	&
water	180:20	0:0	8	sbr
op	180:23	0:0	8	->
water	180:25	0:0	8	f_master
op	180:33	0:0	8	[
water	180:34	0:0	8	num_bands_0
op	180:46	0:0	8	+
water	180:48	0:0	8	1
op	180:49	0:0	8	]
arg	180:52	180:59	7	vk1+1
water	180:52	0:0	8	vk1
op	180:56	0:0	8	+
water	180:58	0:0	8	1
arg	181:20	181:63	7	num_bands_1*sizeof(sbr->f_master[0])
water	181:20	0:0	8	num_bands_1
op	181:37	0:0	8	*
op	181:39	0:0	8	sizeof
water	181:45	0:0	8	(
water	181:46	0:0	8	sbr
op	181:49	0:0	8	->
water	181:51	0:0	8	f_master
op	181:59	0:0	8	[
water	181:60	0:0	8	0
op	181:61	0:0	8	]
water	181:62	0:0	8	)
water	181:64	0:0	6	;
water	182:8	0:0	6	}
else	182:10	187:8	4
stmts	182:15	187:8	5	
water	182:15	0:0	6	{
water	183:12	0:0	6	sbr
op	183:15	0:0	6	->
water	183:17	0:0	6	n_master
op	183:26	0:0	6	=
water	183:28	0:0	6	num_bands_0
water	183:39	0:0	6	;
if	184:12	185:25	6	(check_n_master (ac -> avctx ,sbr -> n_master ,sbr -> spectrum_params . bs_xover_band ))
cond	184:16	184:91	7	check_n_master (ac -> avctx ,sbr -> n_master ,sbr -> spectrum_params . bs_xover_band )
call	184:16	184:91	8	check_n_master
arg	184:31	184:40	9	ac->avctx
water	184:31	0:0	10	ac
op	184:33	0:0	10	->
water	184:35	0:0	10	avctx
arg	184:42	184:55	9	sbr->n_master
water	184:42	0:0	10	sbr
op	184:45	0:0	10	->
water	184:47	0:0	10	n_master
arg	184:57	184:91	9	sbr->spectrum_params.bs_xover_band
water	184:57	0:0	10	sbr
op	184:60	0:0	10	->
water	184:62	0:0	10	spectrum_params
op	184:77	0:0	10	.
water	184:78	0:0	10	bs_xover_band
stmts	185:16	185:25	7	
return	185:16	185:25	8	-1
op	185:23	0:0	9	-
water	185:24	0:0	9	1
call	186:12	186:83	6	memcpy
arg	186:19	186:32	7	sbr->f_master
water	186:19	0:0	8	sbr
op	186:22	0:0	8	->
water	186:24	0:0	8	f_master
arg	186:34	186:37	7	vk0
water	186:34	0:0	8	vk0
arg	186:39	186:83	7	(num_bands_0+1)*sizeof(sbr->f_master[0])
water	186:39	0:0	8	(
water	186:40	0:0	8	num_bands_0
op	186:52	0:0	8	+
water	186:54	0:0	8	1
water	186:55	0:0	8	)
op	186:57	0:0	8	*
op	186:59	0:0	8	sizeof
water	186:65	0:0	8	(
water	186:66	0:0	8	sbr
op	186:69	0:0	8	->
water	186:71	0:0	8	f_master
op	186:79	0:0	8	[
water	186:80	0:0	8	0
op	186:81	0:0	8	]
water	186:82	0:0	8	)
water	186:84	0:0	6	;
water	187:8	0:0	6	}
water	188:4	0:0	4	}
return	189:4	189:12	2	0
water	189:11	0:0	3	0
