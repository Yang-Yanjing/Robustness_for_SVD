func	1:0	95:0	0	static int	send_invoke_response
params	1:31	0:0	1	
param	1:32	1:45	2	URLContext *	s
param	1:47	1:62	2	RTMPPacket *	pkt
stmnts	0:0	94:14	1	
decl	3:4	3:34	2	RTMPContext	*rt
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:17	2	double	seqnum
decl	5:4	5:21	2	char	filename[64]
decl	6:4	6:20	2	char	command[64]
decl	7:4	7:17	2	int	stringlen
decl	8:4	8:15	2	char	*pchar
decl	9:4	9:32	2	const uint8_t	*p
op	9:21	0:0	2	=
water	9:23	0:0	2	pkt
op	9:26	0:0	2	->
water	9:28	0:0	2	data
decl	10:4	10:27	2	uint8_t	*pp
op	10:21	0:0	2	=
water	10:23	0:0	2	NULL
decl	11:4	11:28	2	RTMPPacket	spkt
op	11:21	0:0	2	=
water	11:23	0:0	2	{
water	11:25	0:0	2	0
water	11:27	0:0	2	}
decl	12:4	12:22	2	GetByteContext	gbc
decl	13:4	13:11	2	int	ret
call	14:4	14:39	2	bytestream2_init
arg	14:21	14:25	3	&gbc
op	14:21	0:0	4	&
water	14:22	0:0	4	gbc
arg	14:27	14:28	3	p
water	14:27	0:0	4	p
arg	14:30	14:39	3	pkt->size
water	14:30	0:0	4	pkt
op	14:33	0:0	4	->
water	14:35	0:0	4	size
water	14:40	0:0	2	;
if	15:4	19:4	2	(ff_amf_read_string (& gbc ,command ,sizeof ( command ) ,& stringlen ))
cond	15:8	16:37	3	ff_amf_read_string (& gbc ,command ,sizeof ( command ) ,& stringlen )
call	15:8	16:37	4	ff_amf_read_string
arg	15:27	15:31	5	&gbc
op	15:27	0:0	6	&
water	15:28	0:0	6	gbc
arg	15:33	15:40	5	command
water	15:33	0:0	6	command
arg	15:42	15:57	5	sizeof(command)
op	15:42	0:0	6	sizeof
water	15:48	0:0	6	(
water	15:49	0:0	6	command
water	15:56	0:0	6	)
arg	16:27	16:37	5	&stringlen
op	16:27	0:0	6	&
water	16:28	0:0	6	stringlen
stmts	16:40	19:4	3	
water	16:40	0:0	4	{
call	17:8	17:54	4	av_log
arg	17:15	17:16	5	s
water	17:15	0:0	6	s
arg	17:18	17:30	5	AV_LOG_ERROR
water	17:18	0:0	6	AV_LOG_ERROR
arg	17:32	17:54	5	"Error in PT_INVOKE\n"
water	17:32	0:0	6	"Error in PT_INVOKE\n"
water	17:55	0:0	4	;
return	18:8	18:34	4	AVERROR_INVALIDDATA
water	18:15	0:0	5	AVERROR_INVALIDDATA
water	19:4	0:0	4	}
water	20:4	0:0	2	ret
op	20:8	0:0	2	=
call	20:10	20:42	2	ff_amf_read_number
arg	20:29	20:33	3	&gbc
op	20:29	0:0	4	&
water	20:30	0:0	4	gbc
arg	20:35	20:42	3	&seqnum
op	20:35	0:0	4	&
water	20:36	0:0	4	seqnum
water	20:43	0:0	2	;
if	21:4	22:18	2	(ret)
cond	21:8	21:8	3	ret
water	21:8	0:0	4	ret
stmts	22:8	22:18	3	
return	22:8	22:18	4	ret
water	22:15	0:0	5	ret
water	23:4	0:0	2	ret
op	23:8	0:0	2	=
call	23:10	23:31	2	ff_amf_read_null
arg	23:27	23:31	3	&gbc
op	23:27	0:0	4	&
water	23:28	0:0	4	gbc
water	23:32	0:0	2	;
if	24:4	25:18	2	(ret)
cond	24:8	24:8	3	ret
water	24:8	0:0	4	ret
stmts	25:8	25:18	3	
return	25:8	25:18	4	ret
water	25:15	0:0	5	ret
if	26:4	45:4	2	(!strcmp (command ,"FCPublish" ) || !strcmp (command ,"publish" ))
cond	26:8	27:34	3	!strcmp (command ,"FCPublish" ) || !strcmp (command ,"publish" )
op	26:8	0:0	4	!
call	26:9	26:36	4	strcmp
arg	26:16	26:23	5	command
water	26:16	0:0	6	command
arg	26:25	26:36	5	"FCPublish"
water	26:25	0:0	6	"FCPublish"
op	26:38	0:0	4	||
op	27:8	0:0	4	!
call	27:9	27:34	4	strcmp
arg	27:16	27:23	5	command
water	27:16	0:0	6	command
arg	27:25	27:34	5	"publish"
water	27:25	0:0	6	"publish"
stmts	27:37	45:4	3	
water	27:37	0:0	4	{
water	28:8	0:0	4	ret
op	28:12	0:0	4	=
call	28:14	29:61	4	ff_amf_read_string
arg	28:33	28:37	5	&gbc
op	28:33	0:0	6	&
water	28:34	0:0	6	gbc
arg	28:39	28:47	5	filename
water	28:39	0:0	6	filename
arg	29:33	29:49	5	sizeof(filename)
op	29:33	0:0	6	sizeof
water	29:39	0:0	6	(
water	29:40	0:0	6	filename
water	29:48	0:0	6	)
arg	29:51	29:61	5	&stringlen
op	29:51	0:0	6	&
water	29:52	0:0	6	stringlen
water	29:62	0:0	4	;
if	31:8	43:8	4	(s -> filename)
cond	31:12	31:15	5	s -> filename
water	31:12	0:0	6	s
op	31:13	0:0	6	->
water	31:15	0:0	6	filename
stmts	31:25	43:8	5	
water	31:25	0:0	6	{
water	32:12	0:0	6	pchar
op	32:18	0:0	6	=
call	32:20	32:44	6	strrchr
arg	32:28	32:39	7	s->filename
water	32:28	0:0	8	s
op	32:29	0:0	8	->
water	32:31	0:0	8	filename
arg	32:41	32:44	7	'/'
water	32:41	0:0	8	'/'
water	32:45	0:0	6	;
if	33:12	38:12	6	(! pchar)
cond	33:16	33:17	7	! pchar
op	33:16	0:0	8	!
water	33:17	0:0	8	pchar
stmts	33:24	38:12	7	
water	33:24	0:0	8	{
call	34:16	36:34	8	av_log
arg	34:23	34:24	9	s
water	34:23	0:0	10	s
arg	34:26	34:40	9	AV_LOG_WARNING
water	34:26	0:0	10	AV_LOG_WARNING
arg	35:23	35:65	9	"Unable to find / in url %s, bad format\n"
water	35:23	0:0	10	"Unable to find / in url %s, bad format\n"
arg	36:23	36:34	9	s->filename
water	36:23	0:0	10	s
op	36:24	0:0	10	->
water	36:26	0:0	10	filename
water	36:35	0:0	8	;
water	37:16	0:0	8	pchar
op	37:22	0:0	8	=
water	37:24	0:0	8	s
op	37:25	0:0	8	->
water	37:27	0:0	8	filename
water	37:35	0:0	8	;
water	38:12	0:0	8	}
water	39:12	0:0	6	pchar
op	39:17	0:0	6	++
water	39:19	0:0	6	;
if	40:12	42:48	6	(strcmp (pchar ,filename ))
cond	40:16	40:38	7	strcmp (pchar ,filename )
call	40:16	40:38	8	strcmp
arg	40:23	40:28	9	pchar
water	40:23	0:0	10	pchar
arg	40:30	40:38	9	filename
water	40:30	0:0	10	filename
stmts	41:16	42:48	7	
call	41:16	42:47	8	av_log
arg	41:23	41:24	9	s
water	41:23	0:0	10	s
arg	41:26	41:40	9	AV_LOG_WARNING
water	41:26	0:0	10	AV_LOG_WARNING
arg	41:42	42:30	9	"Unexpected stream %s, expecting"" %s\n"
water	41:42	0:0	10	"Unexpected stream %s, expecting"
water	42:23	0:0	10	" %s\n"
arg	42:32	42:40	9	filename
water	42:32	0:0	10	filename
arg	42:42	42:47	9	pchar
water	42:42	0:0	10	pchar
water	42:48	0:0	8	;
water	43:8	0:0	6	}
water	44:8	0:0	4	rt
op	44:10	0:0	4	->
water	44:12	0:0	4	state
op	44:18	0:0	4	=
water	44:20	0:0	4	STATE_RECEIVING
water	44:35	0:0	4	;
water	45:4	0:0	4	}
if	46:4	55:4	2	(!strcmp (command ,"FCPublish" ))
cond	46:8	46:36	3	!strcmp (command ,"FCPublish" )
op	46:8	0:0	4	!
call	46:9	46:36	4	strcmp
arg	46:16	46:23	5	command
water	46:16	0:0	6	command
arg	46:25	46:36	5	"FCPublish"
water	46:25	0:0	6	"FCPublish"
stmts	46:39	55:4	3	
water	46:39	0:0	4	{
if	47:8	52:8	4	(( ret =ff_rtmp_packet_create (& spkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,RTMP_PKTDATA_DEFAULT_SIZE ) ) < 0)
cond	47:12	49:71	5	( ret =ff_rtmp_packet_create (& spkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,RTMP_PKTDATA_DEFAULT_SIZE ) ) < 0
water	47:12	0:0	6	(
water	47:13	0:0	6	ret
op	47:17	0:0	6	=
call	47:19	49:66	6	ff_rtmp_packet_create
arg	47:41	47:46	7	&spkt
op	47:41	0:0	8	&
water	47:42	0:0	8	spkt
arg	47:48	47:67	7	RTMP_SYSTEM_CHANNEL
water	47:48	0:0	8	RTMP_SYSTEM_CHANNEL
arg	48:41	48:55	7	RTMP_PT_INVOKE
water	48:41	0:0	8	RTMP_PT_INVOKE
arg	48:57	48:58	7	0
water	48:57	0:0	8	0
arg	49:41	49:66	7	RTMP_PKTDATA_DEFAULT_SIZE
water	49:41	0:0	8	RTMP_PKTDATA_DEFAULT_SIZE
water	49:67	0:0	6	)
op	49:69	0:0	6	<
water	49:71	0:0	6	0
stmts	49:74	52:8	5	
water	49:74	0:0	6	{
call	50:12	50:72	6	av_log
arg	50:19	50:20	7	s
water	50:19	0:0	8	s
arg	50:22	50:34	7	AV_LOG_ERROR
water	50:22	0:0	8	AV_LOG_ERROR
arg	50:36	50:72	7	"Unable to create response packet\n"
water	50:36	0:0	8	"Unable to create response packet\n"
water	50:73	0:0	6	;
return	51:12	51:22	6	ret
water	51:19	0:0	7	ret
water	52:8	0:0	6	}
water	53:8	0:0	4	pp
op	53:11	0:0	4	=
water	53:13	0:0	4	spkt
op	53:17	0:0	4	.
water	53:18	0:0	4	data
water	53:22	0:0	4	;
call	54:8	54:46	4	ff_amf_write_string
arg	54:28	54:31	5	&pp
op	54:28	0:0	6	&
water	54:29	0:0	6	pp
arg	54:33	54:46	5	"onFCPublish"
water	54:33	0:0	6	"onFCPublish"
water	54:47	0:0	4	;
water	55:4	0:0	4	}
else	55:6	62:4	2
stmts	55:11	62:4	3	
if	55:11	62:4	4	(!strcmp (command ,"publish" ))
cond	55:15	55:41	5	!strcmp (command ,"publish" )
op	55:15	0:0	6	!
call	55:16	55:41	6	strcmp
arg	55:23	55:30	7	command
water	55:23	0:0	8	command
arg	55:32	55:41	7	"publish"
water	55:32	0:0	8	"publish"
stmts	55:44	62:4	5	
water	55:44	0:0	6	{
water	56:8	0:0	6	ret
op	56:12	0:0	6	=
call	56:14	56:27	6	write_begin
arg	56:26	56:27	7	s
water	56:26	0:0	8	s
water	56:28	0:0	6	;
if	57:8	58:22	6	(ret < 0)
cond	57:12	57:18	7	ret < 0
water	57:12	0:0	8	ret
op	57:16	0:0	8	<
water	57:18	0:0	8	0
stmts	58:12	58:22	7	
return	58:12	58:22	8	ret
water	58:19	0:0	9	ret
return	60:8	61:36	6	write_status(s,pkt,"NetStream.Publish.Start",filename)
call	60:15	61:35	7	write_status
arg	60:28	60:29	8	s
water	60:28	0:0	9	s
arg	60:31	60:34	8	pkt
water	60:31	0:0	9	pkt
arg	60:36	60:61	8	"NetStream.Publish.Start"
water	60:36	0:0	9	"NetStream.Publish.Start"
arg	61:27	61:35	8	filename
water	61:27	0:0	9	filename
water	62:4	0:0	6	}
else	62:6	69:4	2
stmts	62:11	69:4	3	
if	62:11	69:4	4	(!strcmp (command ,"play" ))
cond	62:15	62:38	5	!strcmp (command ,"play" )
op	62:15	0:0	6	!
call	62:16	62:38	6	strcmp
arg	62:23	62:30	7	command
water	62:23	0:0	8	command
arg	62:32	62:38	7	"play"
water	62:32	0:0	8	"play"
stmts	62:41	69:4	5	
water	62:41	0:0	6	{
water	63:8	0:0	6	ret
op	63:12	0:0	6	=
call	63:14	63:27	6	write_begin
arg	63:26	63:27	7	s
water	63:26	0:0	8	s
water	63:28	0:0	6	;
if	64:8	65:22	6	(ret < 0)
cond	64:12	64:18	7	ret < 0
water	64:12	0:0	8	ret
op	64:16	0:0	8	<
water	64:18	0:0	8	0
stmts	65:12	65:22	7	
return	65:12	65:22	8	ret
water	65:19	0:0	9	ret
water	66:8	0:0	6	rt
op	66:10	0:0	6	->
water	66:12	0:0	6	state
op	66:18	0:0	6	=
water	66:20	0:0	6	STATE_SENDING
water	66:33	0:0	6	;
return	67:8	68:37	6	write_status(s,pkt,"NetStream.Play.Start",filename)
call	67:15	68:36	7	write_status
arg	67:28	67:29	8	s
water	67:28	0:0	9	s
arg	67:31	67:34	8	pkt
water	67:31	0:0	9	pkt
arg	67:36	67:58	8	"NetStream.Play.Start"
water	67:36	0:0	9	"NetStream.Play.Start"
arg	68:28	68:36	8	filename
water	68:28	0:0	9	filename
water	69:4	0:0	6	}
else	69:6	89:4	2
stmts	69:11	89:4	3	
water	69:11	0:0	4	{
if	70:8	75:8	4	(( ret =ff_rtmp_packet_create (& spkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,RTMP_PKTDATA_DEFAULT_SIZE ) ) < 0)
cond	70:12	72:71	5	( ret =ff_rtmp_packet_create (& spkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,RTMP_PKTDATA_DEFAULT_SIZE ) ) < 0
water	70:12	0:0	6	(
water	70:13	0:0	6	ret
op	70:17	0:0	6	=
call	70:19	72:66	6	ff_rtmp_packet_create
arg	70:41	70:46	7	&spkt
op	70:41	0:0	8	&
water	70:42	0:0	8	spkt
arg	70:48	70:67	7	RTMP_SYSTEM_CHANNEL
water	70:48	0:0	8	RTMP_SYSTEM_CHANNEL
arg	71:41	71:55	7	RTMP_PT_INVOKE
water	71:41	0:0	8	RTMP_PT_INVOKE
arg	71:57	71:58	7	0
water	71:57	0:0	8	0
arg	72:41	72:66	7	RTMP_PKTDATA_DEFAULT_SIZE
water	72:41	0:0	8	RTMP_PKTDATA_DEFAULT_SIZE
water	72:67	0:0	6	)
op	72:69	0:0	6	<
water	72:71	0:0	6	0
stmts	72:74	75:8	5	
water	72:74	0:0	6	{
call	73:12	73:72	6	av_log
arg	73:19	73:20	7	s
water	73:19	0:0	8	s
arg	73:22	73:34	7	AV_LOG_ERROR
water	73:22	0:0	8	AV_LOG_ERROR
arg	73:36	73:72	7	"Unable to create response packet\n"
water	73:36	0:0	8	"Unable to create response packet\n"
water	73:73	0:0	6	;
return	74:12	74:22	6	ret
water	74:19	0:0	7	ret
water	75:8	0:0	6	}
water	76:8	0:0	4	pp
op	76:11	0:0	4	=
water	76:13	0:0	4	spkt
op	76:17	0:0	4	.
water	76:18	0:0	4	data
water	76:22	0:0	4	;
call	77:8	77:42	4	ff_amf_write_string
arg	77:28	77:31	5	&pp
op	77:28	0:0	6	&
water	77:29	0:0	6	pp
arg	77:33	77:42	5	"_result"
water	77:33	0:0	6	"_result"
water	77:43	0:0	4	;
call	78:8	78:39	4	ff_amf_write_number
arg	78:28	78:31	5	&pp
op	78:28	0:0	6	&
water	78:29	0:0	6	pp
arg	78:33	78:39	5	seqnum
water	78:33	0:0	6	seqnum
water	78:40	0:0	4	;
call	79:8	79:29	4	ff_amf_write_null
arg	79:26	79:29	5	&pp
op	79:26	0:0	6	&
water	79:27	0:0	6	pp
water	79:30	0:0	4	;
if	80:8	88:8	4	(!strcmp (command ,"createStream" ))
cond	80:12	80:43	5	!strcmp (command ,"createStream" )
op	80:12	0:0	6	!
call	80:13	80:43	6	strcmp
arg	80:20	80:27	7	command
water	80:20	0:0	8	command
arg	80:29	80:43	7	"createStream"
water	80:29	0:0	8	"createStream"
stmts	80:46	88:8	5	
water	80:46	0:0	6	{
water	81:12	0:0	6	rt
op	81:14	0:0	6	->
water	81:16	0:0	6	nb_streamid
op	81:27	0:0	6	++
water	81:29	0:0	6	;
if	82:12	83:33	6	(rt -> nb_streamid == 0 || rt -> nb_streamid == 2)
cond	82:16	82:59	7	rt -> nb_streamid == 0 || rt -> nb_streamid == 2
water	82:16	0:0	8	rt
op	82:18	0:0	8	->
water	82:20	0:0	8	nb_streamid
op	82:32	0:0	8	==
water	82:35	0:0	8	0
op	82:37	0:0	8	||
water	82:40	0:0	8	rt
op	82:42	0:0	8	->
water	82:44	0:0	8	nb_streamid
op	82:56	0:0	8	==
water	82:59	0:0	8	2
stmts	83:16	83:33	7	
water	83:16	0:0	8	rt
op	83:18	0:0	8	->
water	83:20	0:0	8	nb_streamid
op	83:31	0:0	8	++
water	83:33	0:0	8	;
call	84:12	84:52	6	ff_amf_write_number
arg	84:32	84:35	7	&pp
op	84:32	0:0	8	&
water	84:33	0:0	8	pp
arg	84:37	84:52	7	rt->nb_streamid
water	84:37	0:0	8	rt
op	84:39	0:0	8	->
water	84:41	0:0	8	nb_streamid
water	84:53	0:0	6	;
water	88:8	0:0	6	}
water	89:4	0:0	4	}
water	90:4	0:0	2	spkt
op	90:8	0:0	2	.
water	90:9	0:0	2	size
op	90:14	0:0	2	=
water	90:16	0:0	2	pp
op	90:19	0:0	2	-
water	90:21	0:0	2	spkt
op	90:25	0:0	2	.
water	90:26	0:0	2	data
water	90:30	0:0	2	;
water	91:4	0:0	2	ret
op	91:8	0:0	2	=
call	91:10	92:68	2	ff_rtmp_packet_write
arg	91:31	91:41	3	rt->stream
water	91:31	0:0	4	rt
op	91:33	0:0	4	->
water	91:35	0:0	4	stream
arg	91:43	91:48	3	&spkt
op	91:43	0:0	4	&
water	91:44	0:0	4	spkt
arg	91:50	91:68	3	rt->out_chunk_size
water	91:50	0:0	4	rt
op	91:52	0:0	4	->
water	91:54	0:0	4	out_chunk_size
arg	92:31	92:47	3	&rt->prev_pkt[1]
op	92:31	0:0	4	&
water	92:32	0:0	4	rt
op	92:34	0:0	4	->
water	92:36	0:0	4	prev_pkt
op	92:44	0:0	4	[
water	92:45	0:0	4	1
op	92:46	0:0	4	]
arg	92:49	92:68	3	&rt->nb_prev_pkt[1]
op	92:49	0:0	4	&
water	92:50	0:0	4	rt
op	92:52	0:0	4	->
water	92:54	0:0	4	nb_prev_pkt
op	92:65	0:0	4	[
water	92:66	0:0	4	1
op	92:67	0:0	4	]
water	92:69	0:0	2	;
call	93:4	93:32	2	ff_rtmp_packet_destroy
arg	93:27	93:32	3	&spkt
op	93:27	0:0	4	&
water	93:28	0:0	4	spkt
water	93:33	0:0	2	;
return	94:4	94:14	2	ret
water	94:11	0:0	3	ret
