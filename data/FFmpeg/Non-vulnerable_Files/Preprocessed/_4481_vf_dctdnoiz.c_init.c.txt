func	1:15	29:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	28:12	1	
decl	3:4	3:34	2	DCTdnoizContext	*s
op	3:23	0:0	2	=
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	priv
water	4:4	0:0	2	s
op	4:5	0:0	2	->
water	4:7	0:0	2	bsize
op	4:13	0:0	2	=
water	4:15	0:0	2	1
op	4:17	0:0	2	<<
water	4:20	0:0	2	s
op	4:21	0:0	2	->
water	4:23	0:0	2	n
water	4:24	0:0	2	;
if	5:4	6:33	2	(s -> overlap == - 1)
cond	5:8	5:23	3	s -> overlap == - 1
water	5:8	0:0	4	s
op	5:9	0:0	4	->
water	5:11	0:0	4	overlap
op	5:19	0:0	4	==
op	5:22	0:0	4	-
water	5:23	0:0	4	1
stmts	6:8	6:33	3	
water	6:8	0:0	4	s
op	6:9	0:0	4	->
water	6:11	0:0	4	overlap
op	6:19	0:0	4	=
water	6:21	0:0	4	s
op	6:22	0:0	4	->
water	6:24	0:0	4	bsize
op	6:30	0:0	4	-
water	6:32	0:0	4	1
water	6:33	0:0	4	;
if	7:4	12:4	2	(s -> overlap > s -> bsize - 1)
cond	7:8	7:32	3	s -> overlap > s -> bsize - 1
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	overlap
op	7:19	0:0	4	>
water	7:21	0:0	4	s
op	7:22	0:0	4	->
water	7:24	0:0	4	bsize
op	7:30	0:0	4	-
water	7:32	0:0	4	1
stmts	7:35	12:4	3	
water	7:35	0:0	4	{
call	8:8	10:47	4	av_log
arg	8:15	8:16	5	s
water	8:15	0:0	6	s
arg	8:18	8:30	5	AV_LOG_ERROR
water	8:18	0:0	6	AV_LOG_ERROR
arg	8:32	9:45	5	"Overlap value can not except %d ""with a block size of %dx%d\n"
water	8:32	0:0	6	"Overlap value can not except %d "
water	9:15	0:0	6	"with a block size of %dx%d\n"
arg	10:15	10:27	5	s->bsize-1
water	10:15	0:0	6	s
op	10:16	0:0	6	->
water	10:18	0:0	6	bsize
op	10:24	0:0	6	-
water	10:26	0:0	6	1
arg	10:29	10:37	5	s->bsize
water	10:29	0:0	6	s
op	10:30	0:0	6	->
water	10:32	0:0	6	bsize
arg	10:39	10:47	5	s->bsize
water	10:39	0:0	6	s
op	10:40	0:0	6	->
water	10:42	0:0	6	bsize
water	10:48	0:0	4	;
return	11:8	11:30	4	AVERROR(EINVAL)
call	11:15	11:29	5	AVERROR
arg	11:23	11:29	6	EINVAL
water	11:23	0:0	7	EINVAL
water	12:4	0:0	4	}
if	13:4	19:4	2	(s -> expr_str)
cond	13:8	13:11	3	s -> expr_str
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	expr_str
stmts	13:21	19:4	3	
water	13:21	0:0	4	{
switch	14:8	18:8	4	(s -> n)
cond	14:16	14:19	5	s -> n
water	14:16	0:0	6	s
op	14:17	0:0	6	->
water	14:19	0:0	6	n
stmts	14:22	18:8	5	
water	14:22	0:0	6	{
label	15:8	15:14	6	case 3 :
water	15:16	0:0	6	s
op	15:17	0:0	6	->
water	15:19	0:0	6	filter_freq_func
op	15:36	0:0	6	=
water	15:38	0:0	6	filter_freq_expr_8
water	15:56	0:0	6	;
break	15:59	15:64	6	
label	16:8	16:14	6	case 4 :
water	16:16	0:0	6	s
op	16:17	0:0	6	->
water	16:19	0:0	6	filter_freq_func
op	16:36	0:0	6	=
water	16:38	0:0	6	filter_freq_expr_16
water	16:57	0:0	6	;
break	16:59	16:64	6	
label	17:8	17:15	6	default :
call	17:17	17:29	6	av_assert0
arg	17:28	17:29	7	0
water	17:28	0:0	8	0
water	17:30	0:0	6	;
water	18:8	0:0	6	}
water	19:4	0:0	4	}
else	19:6	25:4	2
stmts	19:11	25:4	3	
water	19:11	0:0	4	{
switch	20:8	24:8	4	(s -> n)
cond	20:16	20:19	5	s -> n
water	20:16	0:0	6	s
op	20:17	0:0	6	->
water	20:19	0:0	6	n
stmts	20:22	24:8	5	
water	20:22	0:0	6	{
label	21:8	21:14	6	case 3 :
water	21:16	0:0	6	s
op	21:17	0:0	6	->
water	21:19	0:0	6	filter_freq_func
op	21:36	0:0	6	=
water	21:38	0:0	6	filter_freq_sigma_8
water	21:57	0:0	6	;
break	21:60	21:65	6	
label	22:8	22:14	6	case 4 :
water	22:16	0:0	6	s
op	22:17	0:0	6	->
water	22:19	0:0	6	filter_freq_func
op	22:36	0:0	6	=
water	22:38	0:0	6	filter_freq_sigma_16
water	22:58	0:0	6	;
break	22:60	22:65	6	
label	23:8	23:15	6	default :
call	23:17	23:29	6	av_assert0
arg	23:28	23:29	7	0
water	23:28	0:0	8	0
water	23:30	0:0	6	;
water	24:8	0:0	6	}
water	25:4	0:0	4	}
water	26:4	0:0	2	s
op	26:5	0:0	2	->
water	26:7	0:0	2	th
op	26:12	0:0	2	=
water	26:14	0:0	2	s
op	26:15	0:0	2	->
water	26:17	0:0	2	sigma
op	26:23	0:0	2	*
water	26:25	0:0	2	3
op	26:26	0:0	2	.
water	26:27	0:0	2	;
water	27:4	0:0	2	s
op	27:5	0:0	2	->
water	27:7	0:0	2	step
op	27:12	0:0	2	=
water	27:14	0:0	2	s
op	27:15	0:0	2	->
water	27:17	0:0	2	bsize
op	27:23	0:0	2	-
water	27:25	0:0	2	s
op	27:26	0:0	2	->
water	27:28	0:0	2	overlap
water	27:35	0:0	2	;
return	28:4	28:12	2	0
water	28:11	0:0	3	0
