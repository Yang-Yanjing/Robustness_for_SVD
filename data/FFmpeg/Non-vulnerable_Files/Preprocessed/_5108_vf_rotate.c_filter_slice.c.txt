func	1:0	83:0	0	static int	filter_slice
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
param	1:46	1:55	2	void *	arg
param	1:57	1:64	2	int	job
param	1:66	1:77	2	int	nb_jobs
stmnts	0:0	82:12	1	
decl	3:4	3:24	2	ThreadData	*td
op	3:19	0:0	2	=
water	3:21	0:0	2	arg
decl	4:4	4:24	2	AVFrame	*in
op	4:16	0:0	2	=
water	4:18	0:0	2	td
op	4:20	0:0	2	->
water	4:22	0:0	2	in
decl	5:4	5:26	2	AVFrame	*out
op	5:17	0:0	2	=
water	5:19	0:0	2	td
op	5:21	0:0	2	->
water	5:23	0:0	2	out
decl	6:4	6:31	2	RotContext	*rot
op	6:20	0:0	2	=
water	6:22	0:0	2	ctx
op	6:25	0:0	2	->
water	6:27	0:0	2	priv
decl	7:4	7:46	2	const int	outw
op	7:19	0:0	2	=
water	7:21	0:0	2	td
op	7:23	0:0	2	->
water	7:25	0:0	2	outw
water	7:29	0:0	2	,
decl	7:4	7:46	2	const int	outh
op	7:36	0:0	2	=
water	7:38	0:0	2	td
op	7:40	0:0	2	->
water	7:42	0:0	2	outh
decl	8:4	8:42	2	const int	inw
op	8:18	0:0	2	=
water	8:20	0:0	2	td
op	8:22	0:0	2	->
water	8:24	0:0	2	inw
water	8:27	0:0	2	,
decl	8:4	8:42	2	const int	inh
op	8:33	0:0	2	=
water	8:35	0:0	2	td
op	8:37	0:0	2	->
water	8:39	0:0	2	inh
decl	9:4	9:31	2	const int	plane
op	9:20	0:0	2	=
water	9:22	0:0	2	td
op	9:24	0:0	2	->
water	9:26	0:0	2	plane
decl	10:4	10:38	2	const int	xi
op	10:17	0:0	2	=
water	10:19	0:0	2	td
op	10:21	0:0	2	->
water	10:23	0:0	2	xi
water	10:25	0:0	2	,
decl	10:4	10:38	2	const int	yi
op	10:30	0:0	2	=
water	10:32	0:0	2	td
op	10:34	0:0	2	->
water	10:36	0:0	2	yi
decl	11:4	11:34	2	const int	c
op	11:16	0:0	2	=
water	11:18	0:0	2	td
op	11:20	0:0	2	->
water	11:22	0:0	2	c
water	11:23	0:0	2	,
decl	11:4	11:34	2	const int	s
op	11:27	0:0	2	=
water	11:29	0:0	2	td
op	11:31	0:0	2	->
water	11:33	0:0	2	s
decl	12:4	12:48	2	const int	start
op	12:20	0:0	2	=
water	12:22	0:0	2	(
water	12:23	0:0	2	outh
op	12:28	0:0	2	*
water	12:31	0:0	2	job
water	12:37	0:0	2	)
op	12:39	0:0	2	/
water	12:41	0:0	2	nb_jobs
decl	13:4	13:48	2	const int	end
op	13:20	0:0	2	=
water	13:22	0:0	2	(
water	13:23	0:0	2	outh
op	13:28	0:0	2	*
water	13:30	0:0	2	(
water	13:31	0:0	2	job
op	13:34	0:0	2	+
water	13:35	0:0	2	1
water	13:36	0:0	2	)
water	13:37	0:0	2	)
op	13:39	0:0	2	/
water	13:41	0:0	2	nb_jobs
decl	14:4	14:39	2	int	xprime
op	14:15	0:0	2	=
water	14:17	0:0	2	td
op	14:19	0:0	2	->
water	14:21	0:0	2	xprime
op	14:28	0:0	2	+
water	14:30	0:0	2	start
op	14:36	0:0	2	*
water	14:38	0:0	2	s
decl	15:4	15:39	2	int	yprime
op	15:15	0:0	2	=
water	15:17	0:0	2	td
op	15:19	0:0	2	->
water	15:21	0:0	2	yprime
op	15:28	0:0	2	+
water	15:30	0:0	2	start
op	15:36	0:0	2	*
water	15:38	0:0	2	c
decl	16:4	16:18	2	int	i
water	16:9	0:0	2	,
decl	16:4	16:18	2	int	j
water	16:12	0:0	2	,
decl	16:4	16:18	2	int	x
water	16:15	0:0	2	,
decl	16:4	16:18	2	int	y
for	17:4	81:4	2	(j = start ;j < end;j ++)
forinit	17:9	17:18	3	j = start ;
water	17:9	0:0	4	j
op	17:11	0:0	4	=
water	17:13	0:0	4	start
water	17:18	0:0	4	;
cond	17:20	17:24	3	j < end
water	17:20	0:0	4	j
op	17:22	0:0	4	<
water	17:24	0:0	4	end
forexpr	17:29	17:30	3	j ++
water	17:29	0:0	4	j
op	17:30	0:0	4	++
stmts	17:34	81:4	3	
water	17:34	0:0	4	{
water	18:8	0:0	4	x
op	18:10	0:0	4	=
water	18:12	0:0	4	xprime
op	18:19	0:0	4	+
water	18:21	0:0	4	xi
op	18:24	0:0	4	+
water	18:26	0:0	4	FIXP
op	18:30	0:0	4	*
water	18:31	0:0	4	(
water	18:32	0:0	4	inw
op	18:35	0:0	4	-
water	18:36	0:0	4	1
water	18:37	0:0	4	)
op	18:38	0:0	4	/
water	18:39	0:0	4	2
water	18:40	0:0	4	;
water	19:8	0:0	4	y
op	19:10	0:0	4	=
water	19:12	0:0	4	yprime
op	19:19	0:0	4	+
water	19:21	0:0	4	yi
op	19:24	0:0	4	+
water	19:26	0:0	4	FIXP
op	19:30	0:0	4	*
water	19:31	0:0	4	(
water	19:32	0:0	4	inh
op	19:35	0:0	4	-
water	19:36	0:0	4	1
water	19:37	0:0	4	)
op	19:38	0:0	4	/
water	19:39	0:0	4	2
water	19:40	0:0	4	;
if	20:8	24:8	4	(fabs (rot -> angle - 0 ) < FLT_EPSILON && outw == inw && outh == inh)
cond	20:12	20:73	5	fabs (rot -> angle - 0 ) < FLT_EPSILON && outw == inw && outh == inh
call	20:12	20:31	6	fabs
arg	20:17	20:31	7	rot->angle-0
water	20:17	0:0	8	rot
op	20:20	0:0	8	->
water	20:22	0:0	8	angle
op	20:28	0:0	8	-
water	20:30	0:0	8	0
op	20:33	0:0	6	<
water	20:35	0:0	6	FLT_EPSILON
op	20:47	0:0	6	&&
water	20:50	0:0	6	outw
op	20:55	0:0	6	==
water	20:58	0:0	6	inw
op	20:62	0:0	6	&&
water	20:65	0:0	6	outh
op	20:70	0:0	6	==
water	20:73	0:0	6	inh
stmts	20:78	24:8	5	
water	20:78	0:0	6	{
call	21:12	23:82	6	simple_rotate
arg	21:26	21:69	7	out->data[plane]+j*out->linesize[plane]
water	21:26	0:0	8	out
op	21:29	0:0	8	->
water	21:31	0:0	8	data
op	21:35	0:0	8	[
water	21:36	0:0	8	plane
op	21:41	0:0	8	]
op	21:43	0:0	8	+
water	21:45	0:0	8	j
op	21:47	0:0	8	*
water	21:49	0:0	8	out
op	21:52	0:0	8	->
water	21:54	0:0	8	linesize
op	21:62	0:0	8	[
water	21:63	0:0	8	plane
op	21:68	0:0	8	]
arg	22:27	22:69	7	in->data[plane]+j*in->linesize[plane]
water	22:27	0:0	8	in
op	22:29	0:0	8	->
water	22:31	0:0	8	data
op	22:35	0:0	8	[
water	22:36	0:0	8	plane
op	22:41	0:0	8	]
op	22:43	0:0	8	+
water	22:45	0:0	8	j
op	22:47	0:0	8	*
water	22:50	0:0	8	in
op	22:52	0:0	8	->
water	22:54	0:0	8	linesize
op	22:62	0:0	8	[
water	22:63	0:0	8	plane
op	22:68	0:0	8	]
arg	23:26	23:45	7	in->linesize[plane]
water	23:26	0:0	8	in
op	23:28	0:0	8	->
water	23:30	0:0	8	linesize
op	23:38	0:0	8	[
water	23:39	0:0	8	plane
op	23:44	0:0	8	]
arg	23:47	23:48	7	0
water	23:47	0:0	8	0
arg	23:50	23:76	7	rot->draw.pixelstep[plane]
water	23:50	0:0	8	rot
op	23:53	0:0	8	->
water	23:55	0:0	8	draw
op	23:59	0:0	8	.
water	23:60	0:0	8	pixelstep
op	23:69	0:0	8	[
water	23:70	0:0	8	plane
op	23:75	0:0	8	]
arg	23:78	23:82	7	outw
water	23:78	0:0	8	outw
water	23:83	0:0	6	;
water	24:8	0:0	6	}
else	24:10	28:8	4
stmts	24:15	28:8	5	
if	24:15	28:8	6	(fabs (rot -> angle - M_PI / 2 ) < FLT_EPSILON && outw == inh && outh == inw)
cond	24:19	24:85	7	fabs (rot -> angle - M_PI / 2 ) < FLT_EPSILON && outw == inh && outh == inw
call	24:19	24:43	8	fabs
arg	24:24	24:43	9	rot->angle-M_PI/2
water	24:24	0:0	10	rot
op	24:27	0:0	10	->
water	24:29	0:0	10	angle
op	24:35	0:0	10	-
water	24:37	0:0	10	M_PI
op	24:41	0:0	10	/
water	24:42	0:0	10	2
op	24:45	0:0	8	<
water	24:47	0:0	8	FLT_EPSILON
op	24:59	0:0	8	&&
water	24:62	0:0	8	outw
op	24:67	0:0	8	==
water	24:70	0:0	8	inh
op	24:74	0:0	8	&&
water	24:77	0:0	8	outh
op	24:82	0:0	8	==
water	24:85	0:0	8	inw
stmts	24:90	28:8	7	
water	24:90	0:0	8	{
call	25:12	27:82	8	simple_rotate
arg	25:26	25:69	9	out->data[plane]+j*out->linesize[plane]
water	25:26	0:0	10	out
op	25:29	0:0	10	->
water	25:31	0:0	10	data
op	25:35	0:0	10	[
water	25:36	0:0	10	plane
op	25:41	0:0	10	]
op	25:43	0:0	10	+
water	25:45	0:0	10	j
op	25:47	0:0	10	*
water	25:49	0:0	10	out
op	25:52	0:0	10	->
water	25:54	0:0	10	linesize
op	25:62	0:0	10	[
water	25:63	0:0	10	plane
op	25:68	0:0	10	]
arg	26:27	26:75	9	in->data[plane]+j*rot->draw.pixelstep[plane]
water	26:27	0:0	10	in
op	26:29	0:0	10	->
water	26:31	0:0	10	data
op	26:35	0:0	10	[
water	26:36	0:0	10	plane
op	26:41	0:0	10	]
op	26:43	0:0	10	+
water	26:45	0:0	10	j
op	26:47	0:0	10	*
water	26:49	0:0	10	rot
op	26:52	0:0	10	->
water	26:54	0:0	10	draw
op	26:58	0:0	10	.
water	26:59	0:0	10	pixelstep
op	26:68	0:0	10	[
water	26:69	0:0	10	plane
op	26:74	0:0	10	]
arg	27:26	27:45	9	in->linesize[plane]
water	27:26	0:0	10	in
op	27:28	0:0	10	->
water	27:30	0:0	10	linesize
op	27:38	0:0	10	[
water	27:39	0:0	10	plane
op	27:44	0:0	10	]
arg	27:47	27:48	9	1
water	27:47	0:0	10	1
arg	27:50	27:76	9	rot->draw.pixelstep[plane]
water	27:50	0:0	10	rot
op	27:53	0:0	10	->
water	27:55	0:0	10	draw
op	27:59	0:0	10	.
water	27:60	0:0	10	pixelstep
op	27:69	0:0	10	[
water	27:70	0:0	10	plane
op	27:75	0:0	10	]
arg	27:78	27:82	9	outw
water	27:78	0:0	10	outw
water	27:83	0:0	8	;
water	28:8	0:0	8	}
else	28:10	32:8	4
stmts	28:15	32:8	5	
if	28:15	32:8	6	(fabs (rot -> angle - M_PI ) < FLT_EPSILON && outw == inw && outh == inh)
cond	28:19	28:83	7	fabs (rot -> angle - M_PI ) < FLT_EPSILON && outw == inw && outh == inh
call	28:19	28:41	8	fabs
arg	28:24	28:41	9	rot->angle-M_PI
water	28:24	0:0	10	rot
op	28:27	0:0	10	->
water	28:29	0:0	10	angle
op	28:35	0:0	10	-
water	28:37	0:0	10	M_PI
op	28:43	0:0	8	<
water	28:45	0:0	8	FLT_EPSILON
op	28:57	0:0	8	&&
water	28:60	0:0	8	outw
op	28:65	0:0	8	==
water	28:68	0:0	8	inw
op	28:72	0:0	8	&&
water	28:75	0:0	8	outh
op	28:80	0:0	8	==
water	28:83	0:0	8	inh
stmts	28:88	32:8	7	
water	28:88	0:0	8	{
call	29:12	31:82	8	simple_rotate
arg	29:26	29:69	9	out->data[plane]+j*out->linesize[plane]
water	29:26	0:0	10	out
op	29:29	0:0	10	->
water	29:31	0:0	10	data
op	29:35	0:0	10	[
water	29:36	0:0	10	plane
op	29:41	0:0	10	]
op	29:43	0:0	10	+
water	29:45	0:0	10	j
op	29:47	0:0	10	*
water	29:49	0:0	10	out
op	29:52	0:0	10	->
water	29:54	0:0	10	linesize
op	29:62	0:0	10	[
water	29:63	0:0	10	plane
op	29:68	0:0	10	]
arg	30:27	30:78	9	in->data[plane]+(outh-j-1)*in->linesize[plane]
water	30:27	0:0	10	in
op	30:29	0:0	10	->
water	30:31	0:0	10	data
op	30:35	0:0	10	[
water	30:36	0:0	10	plane
op	30:41	0:0	10	]
op	30:43	0:0	10	+
water	30:45	0:0	10	(
water	30:46	0:0	10	outh
op	30:50	0:0	10	-
water	30:51	0:0	10	j
op	30:52	0:0	10	-
water	30:53	0:0	10	1
water	30:54	0:0	10	)
op	30:56	0:0	10	*
water	30:59	0:0	10	in
op	30:61	0:0	10	->
water	30:63	0:0	10	linesize
op	30:71	0:0	10	[
water	30:72	0:0	10	plane
op	30:77	0:0	10	]
arg	31:26	31:45	9	in->linesize[plane]
water	31:26	0:0	10	in
op	31:28	0:0	10	->
water	31:30	0:0	10	linesize
op	31:38	0:0	10	[
water	31:39	0:0	10	plane
op	31:44	0:0	10	]
arg	31:47	31:48	9	2
water	31:47	0:0	10	2
arg	31:50	31:76	9	rot->draw.pixelstep[plane]
water	31:50	0:0	10	rot
op	31:53	0:0	10	->
water	31:55	0:0	10	draw
op	31:59	0:0	10	.
water	31:60	0:0	10	pixelstep
op	31:69	0:0	10	[
water	31:70	0:0	10	plane
op	31:75	0:0	10	]
arg	31:78	31:82	9	outw
water	31:78	0:0	10	outw
water	31:83	0:0	8	;
water	32:8	0:0	8	}
else	32:10	36:8	4
stmts	32:15	36:8	5	
if	32:15	36:8	6	(fabs (rot -> angle - 3 * M_PI / 2 ) < FLT_EPSILON && outw == inh && outh == inw)
cond	32:19	32:87	7	fabs (rot -> angle - 3 * M_PI / 2 ) < FLT_EPSILON && outw == inh && outh == inw
call	32:19	32:45	8	fabs
arg	32:24	32:45	9	rot->angle-3*M_PI/2
water	32:24	0:0	10	rot
op	32:27	0:0	10	->
water	32:29	0:0	10	angle
op	32:35	0:0	10	-
water	32:37	0:0	10	3
op	32:38	0:0	10	*
water	32:39	0:0	10	M_PI
op	32:43	0:0	10	/
water	32:44	0:0	10	2
op	32:47	0:0	8	<
water	32:49	0:0	8	FLT_EPSILON
op	32:61	0:0	8	&&
water	32:64	0:0	8	outw
op	32:69	0:0	8	==
water	32:72	0:0	8	inh
op	32:76	0:0	8	&&
water	32:79	0:0	8	outh
op	32:84	0:0	8	==
water	32:87	0:0	8	inw
stmts	32:92	36:8	7	
water	32:92	0:0	8	{
call	33:12	35:82	8	simple_rotate
arg	33:26	33:69	9	out->data[plane]+j*out->linesize[plane]
water	33:26	0:0	10	out
op	33:29	0:0	10	->
water	33:31	0:0	10	data
op	33:35	0:0	10	[
water	33:36	0:0	10	plane
op	33:41	0:0	10	]
op	33:43	0:0	10	+
water	33:45	0:0	10	j
op	33:47	0:0	10	*
water	33:49	0:0	10	out
op	33:52	0:0	10	->
water	33:54	0:0	10	linesize
op	33:62	0:0	10	[
water	33:63	0:0	10	plane
op	33:68	0:0	10	]
arg	34:27	34:84	9	in->data[plane]+(outh-j-1)*rot->draw.pixelstep[plane]
water	34:27	0:0	10	in
op	34:29	0:0	10	->
water	34:31	0:0	10	data
op	34:35	0:0	10	[
water	34:36	0:0	10	plane
op	34:41	0:0	10	]
op	34:43	0:0	10	+
water	34:45	0:0	10	(
water	34:46	0:0	10	outh
op	34:50	0:0	10	-
water	34:51	0:0	10	j
op	34:52	0:0	10	-
water	34:53	0:0	10	1
water	34:54	0:0	10	)
op	34:56	0:0	10	*
water	34:58	0:0	10	rot
op	34:61	0:0	10	->
water	34:63	0:0	10	draw
op	34:67	0:0	10	.
water	34:68	0:0	10	pixelstep
op	34:77	0:0	10	[
water	34:78	0:0	10	plane
op	34:83	0:0	10	]
arg	35:26	35:45	9	in->linesize[plane]
water	35:26	0:0	10	in
op	35:28	0:0	10	->
water	35:30	0:0	10	linesize
op	35:38	0:0	10	[
water	35:39	0:0	10	plane
op	35:44	0:0	10	]
arg	35:47	35:48	9	3
water	35:47	0:0	10	3
arg	35:50	35:76	9	rot->draw.pixelstep[plane]
water	35:50	0:0	10	rot
op	35:53	0:0	10	->
water	35:55	0:0	10	draw
op	35:59	0:0	10	.
water	35:60	0:0	10	pixelstep
op	35:69	0:0	10	[
water	35:70	0:0	10	plane
op	35:75	0:0	10	]
arg	35:78	35:82	9	outw
water	35:78	0:0	10	outw
water	35:83	0:0	8	;
water	36:8	0:0	8	}
else	36:10	78:8	4
stmts	36:15	78:8	5	
water	36:15	0:0	6	{
for	37:8	77:8	6	(i = 0 ;i < outw;i ++)
forinit	37:13	37:18	7	i = 0 ;
water	37:13	0:0	8	i
op	37:15	0:0	8	=
water	37:17	0:0	8	0
water	37:18	0:0	8	;
cond	37:20	37:24	7	i < outw
water	37:20	0:0	8	i
op	37:22	0:0	8	<
water	37:24	0:0	8	outw
forexpr	37:30	37:31	7	i ++
water	37:30	0:0	8	i
op	37:31	0:0	8	++
stmts	37:35	77:8	7	
water	37:35	0:0	8	{
decl	38:12	38:21	8	int32_t	v
decl	39:12	39:22	8	int	x1
water	39:18	0:0	8	,
decl	39:12	39:22	8	int	y1
decl	40:12	40:31	8	uint8_t	*pin
water	40:24	0:0	8	,
decl	40:12	40:31	8	uint8_t	*pout
water	41:12	0:0	8	x1
op	41:15	0:0	8	=
water	41:17	0:0	8	x
op	41:18	0:0	8	>>
water	41:20	0:0	8	16
water	41:22	0:0	8	;
water	42:12	0:0	8	y1
op	42:15	0:0	8	=
water	42:17	0:0	8	y
op	42:18	0:0	8	>>
water	42:20	0:0	8	16
water	42:22	0:0	8	;
if	44:12	74:12	8	(x1 >= - 1 && x1 <= inw && y1 >= - 1 && y1 <= inh)
cond	44:16	44:59	9	x1 >= - 1 && x1 <= inw && y1 >= - 1 && y1 <= inh
water	44:16	0:0	10	x1
op	44:19	0:0	10	>=
op	44:22	0:0	10	-
water	44:23	0:0	10	1
op	44:25	0:0	10	&&
water	44:28	0:0	10	x1
op	44:31	0:0	10	<=
water	44:34	0:0	10	inw
op	44:38	0:0	10	&&
water	44:41	0:0	10	y1
op	44:44	0:0	10	>=
op	44:47	0:0	10	-
water	44:48	0:0	10	1
op	44:50	0:0	10	&&
water	44:53	0:0	10	y1
op	44:56	0:0	10	<=
water	44:59	0:0	10	inh
stmts	44:64	74:12	9	
water	44:64	0:0	10	{
decl	45:16	45:34	10	uint8_t	inp_inv[4]
water	46:16	0:0	10	pout
op	46:21	0:0	10	=
water	46:23	0:0	10	out
op	46:26	0:0	10	->
water	46:28	0:0	10	data
op	46:32	0:0	10	[
water	46:33	0:0	10	plane
op	46:38	0:0	10	]
op	46:40	0:0	10	+
water	46:42	0:0	10	j
op	46:44	0:0	10	*
water	46:46	0:0	10	out
op	46:49	0:0	10	->
water	46:51	0:0	10	linesize
op	46:59	0:0	10	[
water	46:60	0:0	10	plane
op	46:65	0:0	10	]
op	46:67	0:0	10	+
water	46:69	0:0	10	i
op	46:71	0:0	10	*
water	46:73	0:0	10	rot
op	46:76	0:0	10	->
water	46:78	0:0	10	draw
op	46:82	0:0	10	.
water	46:83	0:0	10	pixelstep
op	46:92	0:0	10	[
water	46:93	0:0	10	plane
op	46:98	0:0	10	]
water	46:99	0:0	10	;
if	47:16	51:16	10	(rot -> use_bilinear)
cond	47:20	47:25	11	rot -> use_bilinear
water	47:20	0:0	12	rot
op	47:23	0:0	12	->
water	47:25	0:0	12	use_bilinear
stmts	47:39	51:16	11	
water	47:39	0:0	12	{
water	48:20	0:0	12	pin
op	48:24	0:0	12	=
call	48:26	50:65	12	interpolate_bilinear
arg	48:47	48:54	13	inp_inv
water	48:47	0:0	14	inp_inv
arg	49:47	49:62	13	in->data[plane]
water	49:47	0:0	14	in
op	49:49	0:0	14	->
water	49:51	0:0	14	data
op	49:55	0:0	14	[
water	49:56	0:0	14	plane
op	49:61	0:0	14	]
arg	49:64	49:83	13	in->linesize[plane]
water	49:64	0:0	14	in
op	49:66	0:0	14	->
water	49:68	0:0	14	linesize
op	49:76	0:0	14	[
water	49:77	0:0	14	plane
op	49:82	0:0	14	]
arg	49:85	49:111	13	rot->draw.pixelstep[plane]
water	49:85	0:0	14	rot
op	49:88	0:0	14	->
water	49:90	0:0	14	draw
op	49:94	0:0	14	.
water	49:95	0:0	14	pixelstep
op	49:104	0:0	14	[
water	49:105	0:0	14	plane
op	49:110	0:0	14	]
arg	50:47	50:48	13	x
water	50:47	0:0	14	x
arg	50:50	50:51	13	y
water	50:50	0:0	14	y
arg	50:53	50:58	13	inw-1
water	50:53	0:0	14	inw
op	50:56	0:0	14	-
water	50:57	0:0	14	1
arg	50:60	50:65	13	inh-1
water	50:60	0:0	14	inh
op	50:63	0:0	14	-
water	50:64	0:0	14	1
water	50:66	0:0	12	;
water	51:16	0:0	12	}
else	51:18	55:16	10
stmts	51:23	55:16	11	
water	51:23	0:0	12	{
decl	52:20	52:50	12	int	x2
op	52:27	0:0	12	=
call	52:29	52:49	13	av_clip
arg	52:37	52:39	14	x1
water	52:37	0:0	15	x1
arg	52:41	52:42	14	0
water	52:41	0:0	15	0
arg	52:44	52:49	14	inw-1
water	52:44	0:0	15	inw
op	52:47	0:0	15	-
water	52:48	0:0	15	1
decl	53:20	53:50	12	int	y2
op	53:27	0:0	12	=
call	53:29	53:49	13	av_clip
arg	53:37	53:39	14	y1
water	53:37	0:0	15	y1
arg	53:41	53:42	14	0
water	53:41	0:0	15	0
arg	53:44	53:49	14	inh-1
water	53:44	0:0	15	inh
op	53:47	0:0	15	-
water	53:48	0:0	15	1
water	54:20	0:0	12	pin
op	54:24	0:0	12	=
water	54:26	0:0	12	in
op	54:28	0:0	12	->
water	54:30	0:0	12	data
op	54:34	0:0	12	[
water	54:35	0:0	12	plane
op	54:40	0:0	12	]
op	54:42	0:0	12	+
water	54:44	0:0	12	y2
op	54:47	0:0	12	*
water	54:49	0:0	12	in
op	54:51	0:0	12	->
water	54:53	0:0	12	linesize
op	54:61	0:0	12	[
water	54:62	0:0	12	plane
op	54:67	0:0	12	]
op	54:69	0:0	12	+
water	54:71	0:0	12	x2
op	54:74	0:0	12	*
water	54:76	0:0	12	rot
op	54:79	0:0	12	->
water	54:81	0:0	12	draw
op	54:85	0:0	12	.
water	54:86	0:0	12	pixelstep
op	54:95	0:0	12	[
water	54:96	0:0	12	plane
op	54:101	0:0	12	]
water	54:102	0:0	12	;
water	55:16	0:0	12	}
switch	56:16	73:16	10	(rot -> draw . pixelstep [ plane ])
cond	56:24	56:49	11	rot -> draw . pixelstep [ plane ]
water	56:24	0:0	12	rot
op	56:27	0:0	12	->
water	56:29	0:0	12	draw
op	56:33	0:0	12	.
water	56:34	0:0	12	pixelstep
op	56:43	0:0	12	[
water	56:44	0:0	12	plane
op	56:49	0:0	12	]
stmts	56:52	73:16	11	
water	56:52	0:0	12	{
label	57:16	57:22	12	case 1 :
op	58:20	0:0	12	*
water	58:21	0:0	12	pout
op	58:26	0:0	12	=
op	58:28	0:0	12	*
water	58:29	0:0	12	pin
water	58:32	0:0	12	;
break	59:20	59:25	12	
label	60:16	60:22	12	case 2 :
op	61:20	0:0	12	*
water	61:21	0:0	12	(
water	61:22	0:0	12	(
water	61:23	0:0	12	uint16_t
op	61:32	0:0	12	*
water	61:33	0:0	12	)
water	61:34	0:0	12	pout
water	61:38	0:0	12	)
op	61:40	0:0	12	=
op	61:42	0:0	12	*
water	61:43	0:0	12	(
water	61:44	0:0	12	(
water	61:45	0:0	12	uint16_t
op	61:54	0:0	12	*
water	61:55	0:0	12	)
water	61:56	0:0	12	pin
water	61:59	0:0	12	)
water	61:60	0:0	12	;
break	62:20	62:25	12	
label	63:16	63:22	12	case 3 :
water	64:20	0:0	12	v
op	64:22	0:0	12	=
call	64:24	64:35	12	AV_RB24
arg	64:32	64:35	13	pin
water	64:32	0:0	14	pin
water	64:36	0:0	12	;
call	65:20	65:35	12	AV_WB24
arg	65:28	65:32	13	pout
water	65:28	0:0	14	pout
arg	65:34	65:35	13	v
water	65:34	0:0	14	v
water	65:36	0:0	12	;
break	66:20	66:25	12	
label	67:16	67:22	12	case 4 :
op	68:20	0:0	12	*
water	68:21	0:0	12	(
water	68:22	0:0	12	(
water	68:23	0:0	12	uint32_t
op	68:32	0:0	12	*
water	68:33	0:0	12	)
water	68:34	0:0	12	pout
water	68:38	0:0	12	)
op	68:40	0:0	12	=
op	68:42	0:0	12	*
water	68:43	0:0	12	(
water	68:44	0:0	12	(
water	68:45	0:0	12	uint32_t
op	68:54	0:0	12	*
water	68:55	0:0	12	)
water	68:56	0:0	12	pin
water	68:59	0:0	12	)
water	68:60	0:0	12	;
break	69:20	69:25	12	
label	70:16	70:23	12	default :
call	71:20	71:64	12	memcpy
arg	71:27	71:31	13	pout
water	71:27	0:0	14	pout
arg	71:33	71:36	13	pin
water	71:33	0:0	14	pin
arg	71:38	71:64	13	rot->draw.pixelstep[plane]
water	71:38	0:0	14	rot
op	71:41	0:0	14	->
water	71:43	0:0	14	draw
op	71:47	0:0	14	.
water	71:48	0:0	14	pixelstep
op	71:57	0:0	14	[
water	71:58	0:0	14	plane
op	71:63	0:0	14	]
water	71:65	0:0	12	;
break	72:20	72:25	12	
water	73:16	0:0	12	}
water	74:12	0:0	10	}
water	75:12	0:0	8	x
op	75:14	0:0	8	+=
water	75:17	0:0	8	c
water	75:18	0:0	8	;
water	76:12	0:0	8	y
op	76:14	0:0	8	-=
water	76:17	0:0	8	s
water	76:18	0:0	8	;
water	77:8	0:0	8	}
water	78:8	0:0	6	}
water	79:8	0:0	4	xprime
op	79:15	0:0	4	+=
water	79:18	0:0	4	s
water	79:19	0:0	4	;
water	80:8	0:0	4	yprime
op	80:15	0:0	4	+=
water	80:18	0:0	4	c
water	80:19	0:0	4	;
water	81:4	0:0	4	}
return	82:4	82:12	2	0
water	82:11	0:0	3	0
