func	1:15	57:0	0	int	opengl_write_header
params	1:38	0:0	1	
param	1:39	1:57	2	AVFormatContext *	h
stmnts	0:0	56:14	1	
decl	3:4	3:40	2	OpenGLContext	*opengl
op	3:26	0:0	2	=
water	3:28	0:0	2	h
op	3:29	0:0	2	->
water	3:31	0:0	2	priv_data
decl	4:4	4:16	2	AVStream	*st
decl	5:4	5:11	2	int	ret
if	6:4	11:4	2	(h -> nb_streams != 1 || h -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_VIDEO || h -> streams [ 0 ] -> codec -> codec_id != AV_CODEC_ID_RAWVIDEO)
cond	6:8	8:42	3	h -> nb_streams != 1 || h -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_VIDEO || h -> streams [ 0 ] -> codec -> codec_id != AV_CODEC_ID_RAWVIDEO
water	6:8	0:0	4	h
op	6:9	0:0	4	->
water	6:11	0:0	4	nb_streams
op	6:22	0:0	4	!=
water	6:25	0:0	4	1
op	6:27	0:0	4	||
water	7:8	0:0	4	h
op	7:9	0:0	4	->
water	7:11	0:0	4	streams
op	7:18	0:0	4	[
water	7:19	0:0	4	0
op	7:20	0:0	4	]
op	7:21	0:0	4	->
water	7:23	0:0	4	codec
op	7:28	0:0	4	->
water	7:30	0:0	4	codec_type
op	7:41	0:0	4	!=
water	7:44	0:0	4	AVMEDIA_TYPE_VIDEO
op	7:63	0:0	4	||
water	8:8	0:0	4	h
op	8:9	0:0	4	->
water	8:11	0:0	4	streams
op	8:18	0:0	4	[
water	8:19	0:0	4	0
op	8:20	0:0	4	]
op	8:21	0:0	4	->
water	8:23	0:0	4	codec
op	8:28	0:0	4	->
water	8:30	0:0	4	codec_id
op	8:39	0:0	4	!=
water	8:42	0:0	4	AV_CODEC_ID_RAWVIDEO
stmts	8:64	11:4	3	
water	8:64	0:0	4	{
call	9:8	9:81	4	av_log
arg	9:15	9:21	5	opengl
water	9:15	0:0	6	opengl
arg	9:23	9:35	5	AV_LOG_ERROR
water	9:23	0:0	6	AV_LOG_ERROR
arg	9:37	9:81	5	"Only a single video stream is supported.\n"
water	9:37	0:0	6	"Only a single video stream is supported.\n"
water	9:82	0:0	4	;
return	10:8	10:30	4	AVERROR(EINVAL)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	EINVAL
water	10:23	0:0	7	EINVAL
water	11:4	0:0	4	}
water	12:4	0:0	2	st
op	12:7	0:0	2	=
water	12:9	0:0	2	h
op	12:10	0:0	2	->
water	12:12	0:0	2	streams
op	12:19	0:0	2	[
water	12:20	0:0	2	0
op	12:21	0:0	2	]
water	12:22	0:0	2	;
water	13:4	0:0	2	opengl
op	13:10	0:0	2	->
water	13:12	0:0	2	width
op	13:18	0:0	2	=
water	13:20	0:0	2	st
op	13:22	0:0	2	->
water	13:24	0:0	2	codec
op	13:29	0:0	2	->
water	13:31	0:0	2	width
water	13:36	0:0	2	;
water	14:4	0:0	2	opengl
op	14:10	0:0	2	->
water	14:12	0:0	2	height
op	14:19	0:0	2	=
water	14:21	0:0	2	st
op	14:23	0:0	2	->
water	14:25	0:0	2	codec
op	14:30	0:0	2	->
water	14:32	0:0	2	height
water	14:38	0:0	2	;
water	15:4	0:0	2	opengl
op	15:10	0:0	2	->
water	15:12	0:0	2	pix_fmt
op	15:20	0:0	2	=
water	15:22	0:0	2	st
op	15:24	0:0	2	->
water	15:26	0:0	2	codec
op	15:31	0:0	2	->
water	15:33	0:0	2	pix_fmt
water	15:40	0:0	2	;
if	16:4	17:44	2	(! opengl -> window_width)
cond	16:8	16:17	3	! opengl -> window_width
op	16:8	0:0	4	!
water	16:9	0:0	4	opengl
op	16:15	0:0	4	->
water	16:17	0:0	4	window_width
stmts	17:8	17:44	3	
water	17:8	0:0	4	opengl
op	17:14	0:0	4	->
water	17:16	0:0	4	window_width
op	17:29	0:0	4	=
water	17:31	0:0	4	opengl
op	17:37	0:0	4	->
water	17:39	0:0	4	width
water	17:44	0:0	4	;
if	18:4	19:46	2	(! opengl -> window_height)
cond	18:8	18:17	3	! opengl -> window_height
op	18:8	0:0	4	!
water	18:9	0:0	4	opengl
op	18:15	0:0	4	->
water	18:17	0:0	4	window_height
stmts	19:8	19:46	3	
water	19:8	0:0	4	opengl
op	19:14	0:0	4	->
water	19:16	0:0	4	window_height
op	19:30	0:0	4	=
water	19:32	0:0	4	opengl
op	19:38	0:0	4	->
water	19:40	0:0	4	height
water	19:46	0:0	4	;
if	20:4	21:53	2	(! opengl -> window_title && ! opengl -> no_window)
cond	20:8	20:42	3	! opengl -> window_title && ! opengl -> no_window
op	20:8	0:0	4	!
water	20:9	0:0	4	opengl
op	20:15	0:0	4	->
water	20:17	0:0	4	window_title
op	20:30	0:0	4	&&
op	20:33	0:0	4	!
water	20:34	0:0	4	opengl
op	20:40	0:0	4	->
water	20:42	0:0	4	no_window
stmts	21:8	21:53	3	
water	21:8	0:0	4	opengl
op	21:14	0:0	4	->
water	21:16	0:0	4	window_title
op	21:29	0:0	4	=
call	21:31	21:52	4	av_strdup
arg	21:41	21:52	5	h->filename
water	21:41	0:0	6	h
op	21:42	0:0	6	->
water	21:44	0:0	6	filename
water	21:53	0:0	4	;
if	22:4	23:17	2	(( ret =opengl_create_window (h ) ))
cond	22:8	22:38	3	( ret =opengl_create_window (h ) )
water	22:8	0:0	4	(
water	22:9	0:0	4	ret
op	22:13	0:0	4	=
call	22:15	22:37	4	opengl_create_window
arg	22:36	22:37	5	h
water	22:36	0:0	6	h
water	22:38	0:0	4	)
stmts	23:8	23:17	3	
goto	23:8	23:17	4	fail
water	23:13	0:0	5	fail
if	24:4	25:17	2	(( ret =opengl_read_limits (opengl ) ) < 0)
cond	24:8	24:45	3	( ret =opengl_read_limits (opengl ) ) < 0
water	24:8	0:0	4	(
water	24:9	0:0	4	ret
op	24:13	0:0	4	=
call	24:15	24:40	4	opengl_read_limits
arg	24:34	24:40	5	opengl
water	24:34	0:0	6	opengl
water	24:41	0:0	4	)
op	24:43	0:0	4	<
water	24:45	0:0	4	0
stmts	25:8	25:17	3	
goto	25:8	25:17	4	fail
water	25:13	0:0	5	fail
if	26:4	31:4	2	(opengl -> width > opengl -> max_texture_size || opengl -> height > opengl -> max_texture_size)
cond	26:8	26:77	3	opengl -> width > opengl -> max_texture_size || opengl -> height > opengl -> max_texture_size
water	26:8	0:0	4	opengl
op	26:14	0:0	4	->
water	26:16	0:0	4	width
op	26:22	0:0	4	>
water	26:24	0:0	4	opengl
op	26:30	0:0	4	->
water	26:32	0:0	4	max_texture_size
op	26:49	0:0	4	||
water	26:52	0:0	4	opengl
op	26:58	0:0	4	->
water	26:60	0:0	4	height
op	26:67	0:0	4	>
water	26:69	0:0	4	opengl
op	26:75	0:0	4	->
water	26:77	0:0	4	max_texture_size
stmts	26:95	31:4	3	
water	26:95	0:0	4	{
call	27:8	28:96	4	av_log
arg	27:15	27:21	5	opengl
water	27:15	0:0	6	opengl
arg	27:23	27:35	5	AV_LOG_ERROR
water	27:23	0:0	6	AV_LOG_ERROR
arg	27:37	27:91	5	"Too big picture %dx%d, max supported size is %dx%d\n"
water	27:37	0:0	6	"Too big picture %dx%d, max supported size is %dx%d\n"
arg	28:15	28:28	5	opengl->width
water	28:15	0:0	6	opengl
op	28:21	0:0	6	->
water	28:23	0:0	6	width
arg	28:30	28:44	5	opengl->height
water	28:30	0:0	6	opengl
op	28:36	0:0	6	->
water	28:38	0:0	6	height
arg	28:46	28:70	5	opengl->max_texture_size
water	28:46	0:0	6	opengl
op	28:52	0:0	6	->
water	28:54	0:0	6	max_texture_size
arg	28:72	28:96	5	opengl->max_texture_size
water	28:72	0:0	6	opengl
op	28:78	0:0	6	->
water	28:80	0:0	6	max_texture_size
water	28:97	0:0	4	;
water	29:8	0:0	4	ret
op	29:12	0:0	4	=
call	29:14	29:28	4	AVERROR
arg	29:22	29:28	5	EINVAL
water	29:22	0:0	6	EINVAL
water	29:29	0:0	4	;
goto	30:8	30:17	4	fail
water	30:13	0:0	5	fail
water	31:4	0:0	4	}
if	32:4	33:17	2	(( ret =opengl_load_procedures (opengl ) ) < 0)
cond	32:8	32:49	3	( ret =opengl_load_procedures (opengl ) ) < 0
water	32:8	0:0	4	(
water	32:9	0:0	4	ret
op	32:13	0:0	4	=
call	32:15	32:44	4	opengl_load_procedures
arg	32:38	32:44	5	opengl
water	32:38	0:0	6	opengl
water	32:45	0:0	4	)
op	32:47	0:0	4	<
water	32:49	0:0	4	0
stmts	33:8	33:17	3	
goto	33:8	33:17	4	fail
water	33:13	0:0	5	fail
call	34:4	34:32	2	opengl_fill_color_map
arg	34:26	34:32	3	opengl
water	34:26	0:0	4	opengl
water	34:33	0:0	2	;
call	35:4	35:36	2	opengl_get_texture_params
arg	35:30	35:36	3	opengl
water	35:30	0:0	4	opengl
water	35:37	0:0	2	;
if	36:4	37:17	2	(( ret =opengl_init_context (opengl ) ) < 0)
cond	36:8	36:46	3	( ret =opengl_init_context (opengl ) ) < 0
water	36:8	0:0	4	(
water	36:9	0:0	4	ret
op	36:13	0:0	4	=
call	36:15	36:41	4	opengl_init_context
arg	36:35	36:41	5	opengl
water	36:35	0:0	6	opengl
water	36:42	0:0	4	)
op	36:44	0:0	4	<
water	36:46	0:0	4	0
stmts	37:8	37:17	3	
goto	37:8	37:17	4	fail
water	37:13	0:0	5	fail
if	38:4	39:17	2	(( ret =opengl_prepare_vertex (h ) ) < 0)
cond	38:8	38:43	3	( ret =opengl_prepare_vertex (h ) ) < 0
water	38:8	0:0	4	(
water	38:9	0:0	4	ret
op	38:13	0:0	4	=
call	38:15	38:38	4	opengl_prepare_vertex
arg	38:37	38:38	5	h
water	38:37	0:0	6	h
water	38:39	0:0	4	)
op	38:41	0:0	4	<
water	38:43	0:0	4	0
stmts	39:8	39:17	3	
goto	39:8	39:17	4	fail
water	39:13	0:0	5	fail
call	40:4	40:31	2	glClear
arg	40:12	40:31	3	GL_COLOR_BUFFER_BIT
water	40:12	0:0	4	GL_COLOR_BUFFER_BIT
water	40:32	0:0	2	;
if	42:4	43:28	2	(! opengl -> no_window)
cond	42:8	42:17	3	! opengl -> no_window
op	42:8	0:0	4	!
water	42:9	0:0	4	opengl
op	42:15	0:0	4	->
water	42:17	0:0	4	no_window
stmts	43:8	43:28	3	
call	43:8	43:27	4	SDL_GL_SwapBuffers
water	43:28	0:0	4	;
if	45:4	49:4	2	(opengl -> no_window && ( ret =avdevice_dev_to_app_control_message (h ,AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER ,NULL ,0 ) ) < 0)
cond	45:8	46:104	3	opengl -> no_window && ( ret =avdevice_dev_to_app_control_message (h ,AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER ,NULL ,0 ) ) < 0
water	45:8	0:0	4	opengl
op	45:14	0:0	4	->
water	45:16	0:0	4	no_window
op	45:26	0:0	4	&&
water	46:8	0:0	4	(
water	46:9	0:0	4	ret
op	46:13	0:0	4	=
call	46:15	46:99	4	avdevice_dev_to_app_control_message
arg	46:51	46:52	5	h
water	46:51	0:0	6	h
arg	46:54	46:89	5	AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER
water	46:54	0:0	6	AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER
arg	46:91	46:96	5	NULL
water	46:91	0:0	6	NULL
arg	46:98	46:99	5	0
water	46:98	0:0	6	0
water	46:100	0:0	4	)
op	46:102	0:0	4	<
water	46:104	0:0	4	0
stmts	46:107	49:4	3	
water	46:107	0:0	4	{
call	47:8	47:85	4	av_log
arg	47:15	47:21	5	opengl
water	47:15	0:0	6	opengl
arg	47:23	47:35	5	AV_LOG_ERROR
water	47:23	0:0	6	AV_LOG_ERROR
arg	47:37	47:85	5	"Application failed to display window buffer.\n"
water	47:37	0:0	6	"Application failed to display window buffer.\n"
water	47:86	0:0	4	;
goto	48:8	48:17	4	fail
water	48:13	0:0	5	fail
water	49:4	0:0	4	}
water	50:4	0:0	2	ret
op	50:8	0:0	2	=
water	50:10	0:0	2	AVERROR_EXTERNAL
water	50:26	0:0	2	;
call	51:4	51:29	2	OPENGL_ERROR_CHECK
arg	51:23	51:29	3	opengl
water	51:23	0:0	4	opengl
water	51:30	0:0	2	;
water	52:4	0:0	2	opengl
op	52:10	0:0	2	->
water	52:12	0:0	2	inited
op	52:19	0:0	2	=
water	52:21	0:0	2	1
water	52:22	0:0	2	;
return	53:4	53:12	2	0
water	53:11	0:0	3	0
label	54:2	54:6	2	fail :
call	55:4	55:26	2	opengl_write_trailer
arg	55:25	55:26	3	h
water	55:25	0:0	4	h
water	55:27	0:0	2	;
return	56:4	56:14	2	ret
water	56:11	0:0	3	ret
