func	1:0	256:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:31	2	char *	argv[]
stmnts	0:0	255:12	1	
decl	3:4	3:24	2	FILE	*infile
op	3:18	0:0	2	=
water	3:20	0:0	2	NULL
decl	4:4	4:24	2	FILE	*outfile
op	4:18	0:0	2	=
water	4:20	0:0	2	NULL
decl	5:4	5:48	2	unsigned char	atom_bytes[ATOM_PREAMBLE_SIZE]
decl	6:4	6:28	2	uint32_t	atom_type
op	6:25	0:0	2	=
water	6:27	0:0	2	0
decl	7:4	7:28	2	uint64_t	atom_size
op	7:25	0:0	2	=
water	7:27	0:0	2	0
decl	8:4	8:28	2	uint64_t	atom_offset
op	8:25	0:0	2	=
water	8:27	0:0	2	0
decl	9:4	9:23	2	int64_t	last_offset
decl	10:4	10:35	2	unsigned char	*moov_atom
op	10:29	0:0	2	=
water	10:31	0:0	2	NULL
decl	11:4	11:35	2	unsigned char	*ftyp_atom
op	11:29	0:0	2	=
water	11:31	0:0	2	NULL
decl	12:4	12:27	2	uint64_t	moov_atom_size
decl	13:4	13:31	2	uint64_t	ftyp_atom_size
op	13:28	0:0	2	=
water	13:30	0:0	2	0
decl	14:4	14:17	2	uint64_t	i
water	14:14	0:0	2	,
decl	14:4	14:17	2	uint64_t	j
decl	15:4	15:25	2	uint32_t	offset_count
decl	16:4	16:27	2	uint64_t	current_offset
decl	17:4	17:28	2	int64_t	start_offset
op	17:25	0:0	2	=
water	17:27	0:0	2	0
decl	18:4	18:37	2	unsigned char	*copy_buffer
op	18:31	0:0	2	=
water	18:33	0:0	2	NULL
decl	19:4	19:21	2	int	bytes_to_copy
if	20:4	24:4	2	(argc != 3)
cond	20:8	20:16	3	argc != 3
water	20:8	0:0	4	argc
op	20:13	0:0	4	!=
water	20:16	0:0	4	3
stmts	20:19	24:4	3	
water	20:19	0:0	4	{
call	21:8	22:81	4	printf
arg	21:15	22:81	5	"Usage: qt-faststart <infile.mov> <outfile.mov>\n""Note: alternatively you can use -movflags +faststart in ffmpeg\n"
water	21:15	0:0	6	"Usage: qt-faststart <infile.mov> <outfile.mov>\n"
water	22:15	0:0	6	"Note: alternatively you can use -movflags +faststart in ffmpeg\n"
water	22:82	0:0	4	;
return	23:8	23:16	4	0
water	23:15	0:0	5	0
water	24:4	0:0	4	}
if	25:4	28:4	2	(!strcmp (argv [ 1 ] ,argv [ 2 ] ))
cond	25:8	25:32	3	!strcmp (argv [ 1 ] ,argv [ 2 ] )
op	25:8	0:0	4	!
call	25:9	25:32	4	strcmp
arg	25:16	25:23	5	argv[1]
water	25:16	0:0	6	argv
op	25:20	0:0	6	[
water	25:21	0:0	6	1
op	25:22	0:0	6	]
arg	25:25	25:32	5	argv[2]
water	25:25	0:0	6	argv
op	25:29	0:0	6	[
water	25:30	0:0	6	2
op	25:31	0:0	6	]
stmts	25:35	28:4	3	
water	25:35	0:0	4	{
call	26:8	26:71	4	fprintf
arg	26:16	26:22	5	stderr
water	26:16	0:0	6	stderr
arg	26:24	26:71	5	"input and output files need to be different\n"
water	26:24	0:0	6	"input and output files need to be different\n"
water	26:72	0:0	4	;
return	27:8	27:16	4	1
water	27:15	0:0	5	1
water	28:4	0:0	4	}
water	29:4	0:0	2	infile
op	29:11	0:0	2	=
call	29:13	29:32	2	fopen
arg	29:19	29:26	3	argv[1]
water	29:19	0:0	4	argv
op	29:23	0:0	4	[
water	29:24	0:0	4	1
op	29:25	0:0	4	]
arg	29:28	29:32	3	"rb"
water	29:28	0:0	4	"rb"
water	29:33	0:0	2	;
if	30:4	33:4	2	(! infile)
cond	30:8	30:9	3	! infile
op	30:8	0:0	4	!
water	30:9	0:0	4	infile
stmts	30:17	33:4	3	
water	30:17	0:0	4	{
call	31:8	31:22	4	perror
arg	31:15	31:22	5	argv[1]
water	31:15	0:0	6	argv
op	31:19	0:0	6	[
water	31:20	0:0	6	1
op	31:21	0:0	6	]
water	31:23	0:0	4	;
goto	32:8	32:22	4	error_out
water	32:13	0:0	5	error_out
water	33:4	0:0	4	}
while	36:4	101:4	2	(!feof (infile ))
cond	36:11	36:23	3	!feof (infile )
op	36:11	0:0	4	!
call	36:12	36:23	4	feof
arg	36:17	36:23	5	infile
water	36:17	0:0	6	infile
stmts	36:26	101:4	3	
water	36:26	0:0	4	{
if	37:8	39:8	4	(fread (atom_bytes ,ATOM_PREAMBLE_SIZE ,1 ,infile ) != 1)
cond	37:12	37:64	5	fread (atom_bytes ,ATOM_PREAMBLE_SIZE ,1 ,infile ) != 1
call	37:12	37:59	6	fread
arg	37:18	37:28	7	atom_bytes
water	37:18	0:0	8	atom_bytes
arg	37:30	37:48	7	ATOM_PREAMBLE_SIZE
water	37:30	0:0	8	ATOM_PREAMBLE_SIZE
arg	37:50	37:51	7	1
water	37:50	0:0	8	1
arg	37:53	37:59	7	infile
water	37:53	0:0	8	infile
op	37:61	0:0	6	!=
water	37:64	0:0	6	1
stmts	37:67	39:8	5	
water	37:67	0:0	6	{
break	38:12	38:17	6	
water	39:8	0:0	6	}
water	40:8	0:0	4	atom_size
op	40:18	0:0	4	=
call	40:20	40:40	4	BE_32
arg	40:26	40:40	5	&atom_bytes[0]
op	40:26	0:0	6	&
water	40:27	0:0	6	atom_bytes
op	40:37	0:0	6	[
water	40:38	0:0	6	0
op	40:39	0:0	6	]
water	40:41	0:0	4	;
water	41:8	0:0	4	atom_type
op	41:18	0:0	4	=
call	41:20	41:40	4	BE_32
arg	41:26	41:40	5	&atom_bytes[4]
op	41:26	0:0	6	&
water	41:27	0:0	6	atom_bytes
op	41:37	0:0	6	[
water	41:38	0:0	6	4
op	41:39	0:0	6	]
water	41:41	0:0	4	;
if	43:8	58:8	4	(atom_type == FTYP_ATOM)
cond	43:12	43:25	5	atom_type == FTYP_ATOM
water	43:12	0:0	6	atom_type
op	43:22	0:0	6	==
water	43:25	0:0	6	FTYP_ATOM
stmts	43:36	58:8	5	
water	43:36	0:0	6	{
water	44:12	0:0	6	ftyp_atom_size
op	44:27	0:0	6	=
water	44:29	0:0	6	atom_size
water	44:38	0:0	6	;
call	45:12	45:26	6	free
arg	45:17	45:26	7	ftyp_atom
water	45:17	0:0	8	ftyp_atom
water	45:27	0:0	6	;
water	46:12	0:0	6	ftyp_atom
op	46:22	0:0	6	=
call	46:24	46:45	6	malloc
arg	46:31	46:45	7	ftyp_atom_size
water	46:31	0:0	8	ftyp_atom_size
water	46:46	0:0	6	;
if	47:12	51:12	6	(! ftyp_atom)
cond	47:16	47:17	7	! ftyp_atom
op	47:16	0:0	8	!
water	47:17	0:0	8	ftyp_atom
stmts	47:28	51:12	7	
water	47:28	0:0	8	{
call	48:16	49:32	8	printf
arg	48:23	48:75	9	"could not allocate %"PRIu64" bytes for ftyp atom\n"
water	48:23	0:0	10	"could not allocate %"
water	48:45	0:0	10	PRIu64
water	48:51	0:0	10	" bytes for ftyp atom\n"
arg	49:23	49:32	9	atom_size
water	49:23	0:0	10	atom_size
water	49:33	0:0	8	;
goto	50:16	50:30	8	error_out
water	50:21	0:0	9	error_out
water	51:12	0:0	8	}
if	52:12	57:12	6	(fseeko (infile ,- ATOM_PREAMBLE_SIZE ,SEEK_CUR ) ||fread (ftyp_atom ,atom_size ,1 ,infile ) != 1 || ( start_offset =ftello (infile ) ) < 0)
cond	52:16	54:50	7	fseeko (infile ,- ATOM_PREAMBLE_SIZE ,SEEK_CUR ) ||fread (ftyp_atom ,atom_size ,1 ,infile ) != 1 || ( start_offset =ftello (infile ) ) < 0
call	52:16	52:60	8	fseeko
arg	52:23	52:29	9	infile
water	52:23	0:0	10	infile
arg	52:31	52:50	9	-ATOM_PREAMBLE_SIZE
op	52:31	0:0	10	-
water	52:32	0:0	10	ATOM_PREAMBLE_SIZE
arg	52:52	52:60	9	SEEK_CUR
water	52:52	0:0	10	SEEK_CUR
op	52:62	0:0	8	||
call	53:16	53:53	8	fread
arg	53:22	53:31	9	ftyp_atom
water	53:22	0:0	10	ftyp_atom
arg	53:33	53:42	9	atom_size
water	53:33	0:0	10	atom_size
arg	53:44	53:45	9	1
water	53:44	0:0	10	1
arg	53:47	53:53	9	infile
water	53:47	0:0	10	infile
op	53:55	0:0	8	!=
water	53:58	0:0	8	1
op	53:60	0:0	8	||
water	54:16	0:0	8	(
water	54:17	0:0	8	start_offset
op	54:30	0:0	8	=
call	54:32	54:45	8	ftello
arg	54:39	54:45	9	infile
water	54:39	0:0	10	infile
water	54:46	0:0	8	)
op	54:48	0:0	8	<
water	54:50	0:0	8	0
stmts	54:53	57:12	7	
water	54:53	0:0	8	{
call	55:16	55:30	8	perror
arg	55:23	55:30	9	argv[1]
water	55:23	0:0	10	argv
op	55:27	0:0	10	[
water	55:28	0:0	10	1
op	55:29	0:0	10	]
water	55:31	0:0	8	;
goto	56:16	56:30	8	error_out
water	56:21	0:0	9	error_out
water	57:12	0:0	8	}
water	58:8	0:0	6	}
else	58:10	74:8	4
stmts	58:15	74:8	5	
water	58:15	0:0	6	{
decl	59:12	59:19	6	int	ret
if	61:12	67:12	6	(atom_size == 1)
cond	61:16	61:29	7	atom_size == 1
water	61:16	0:0	8	atom_size
op	61:26	0:0	8	==
water	61:29	0:0	8	1
stmts	61:32	67:12	7	
water	61:32	0:0	8	{
if	62:16	64:16	8	(fread (atom_bytes ,ATOM_PREAMBLE_SIZE ,1 ,infile ) != 1)
cond	62:20	62:72	9	fread (atom_bytes ,ATOM_PREAMBLE_SIZE ,1 ,infile ) != 1
call	62:20	62:67	10	fread
arg	62:26	62:36	11	atom_bytes
water	62:26	0:0	12	atom_bytes
arg	62:38	62:56	11	ATOM_PREAMBLE_SIZE
water	62:38	0:0	12	ATOM_PREAMBLE_SIZE
arg	62:58	62:59	11	1
water	62:58	0:0	12	1
arg	62:61	62:67	11	infile
water	62:61	0:0	12	infile
op	62:69	0:0	10	!=
water	62:72	0:0	10	1
stmts	62:75	64:16	9	
water	62:75	0:0	10	{
break	63:20	63:25	10	
water	64:16	0:0	10	}
water	65:16	0:0	8	atom_size
op	65:26	0:0	8	=
call	65:28	65:48	8	BE_64
arg	65:34	65:48	9	&atom_bytes[0]
op	65:34	0:0	10	&
water	65:35	0:0	10	atom_bytes
op	65:45	0:0	10	[
water	65:46	0:0	10	0
op	65:47	0:0	10	]
water	65:49	0:0	8	;
water	66:16	0:0	8	ret
op	66:20	0:0	8	=
call	66:22	66:81	8	fseeko
arg	66:29	66:35	9	infile
water	66:29	0:0	10	infile
arg	66:37	66:71	9	atom_size-ATOM_PREAMBLE_SIZE*2
water	66:37	0:0	10	atom_size
op	66:47	0:0	10	-
water	66:49	0:0	10	ATOM_PREAMBLE_SIZE
op	66:68	0:0	10	*
water	66:70	0:0	10	2
arg	66:73	66:81	9	SEEK_CUR
water	66:73	0:0	10	SEEK_CUR
water	66:82	0:0	8	;
water	67:12	0:0	8	}
else	67:14	69:12	6
stmts	67:19	69:12	7	
water	67:19	0:0	8	{
water	68:16	0:0	8	ret
op	68:20	0:0	8	=
call	68:22	68:77	8	fseeko
arg	68:29	68:35	9	infile
water	68:29	0:0	10	infile
arg	68:37	68:67	9	atom_size-ATOM_PREAMBLE_SIZE
water	68:37	0:0	10	atom_size
op	68:47	0:0	10	-
water	68:49	0:0	10	ATOM_PREAMBLE_SIZE
arg	68:69	68:77	9	SEEK_CUR
water	68:69	0:0	10	SEEK_CUR
water	68:78	0:0	8	;
water	69:12	0:0	8	}
if	70:12	73:12	6	(ret)
cond	70:16	70:16	7	ret
water	70:16	0:0	8	ret
stmts	70:21	73:12	7	
water	70:21	0:0	8	{
call	71:16	71:30	8	perror
arg	71:23	71:30	9	argv[1]
water	71:23	0:0	10	argv
op	71:27	0:0	10	[
water	71:28	0:0	10	1
op	71:29	0:0	10	]
water	71:31	0:0	8	;
goto	72:16	72:30	8	error_out
water	72:21	0:0	9	error_out
water	73:12	0:0	8	}
water	74:8	0:0	6	}
call	75:8	81:24	4	printf
arg	75:15	75:49	5	"%c%c%c%c %10"PRIu64" %"PRIu64"\n"
water	75:15	0:0	6	"%c%c%c%c %10"
water	75:29	0:0	6	PRIu64
water	75:35	0:0	6	" %"
water	75:39	0:0	6	PRIu64
water	75:45	0:0	6	"\n"
arg	76:15	76:38	5	(atom_type>>24)&255
water	76:15	0:0	6	(
water	76:16	0:0	6	atom_type
op	76:26	0:0	6	>>
water	76:29	0:0	6	24
water	76:31	0:0	6	)
op	76:33	0:0	6	&
water	76:35	0:0	6	255
arg	77:15	77:38	5	(atom_type>>16)&255
water	77:15	0:0	6	(
water	77:16	0:0	6	atom_type
op	77:26	0:0	6	>>
water	77:29	0:0	6	16
water	77:31	0:0	6	)
op	77:33	0:0	6	&
water	77:35	0:0	6	255
arg	78:15	78:38	5	(atom_type>>8)&255
water	78:15	0:0	6	(
water	78:16	0:0	6	atom_type
op	78:26	0:0	6	>>
water	78:30	0:0	6	8
water	78:31	0:0	6	)
op	78:33	0:0	6	&
water	78:35	0:0	6	255
arg	79:15	79:38	5	(atom_type>>0)&255
water	79:15	0:0	6	(
water	79:16	0:0	6	atom_type
op	79:26	0:0	6	>>
water	79:30	0:0	6	0
water	79:31	0:0	6	)
op	79:33	0:0	6	&
water	79:35	0:0	6	255
arg	80:15	80:26	5	atom_offset
water	80:15	0:0	6	atom_offset
arg	81:15	81:24	5	atom_size
water	81:15	0:0	6	atom_size
water	81:25	0:0	4	;
if	82:8	94:8	4	(( atom_type != FREE_ATOM ) && ( atom_type != JUNK_ATOM ) && ( atom_type != MDAT_ATOM ) && ( atom_type != MOOV_ATOM ) && ( atom_type != PNOT_ATOM ) && ( atom_type != SKIP_ATOM ) && ( atom_type != WIDE_ATOM ) && ( atom_type != PICT_ATOM ) && ( atom_type != UUID_ATOM ) && ( atom_type != FTYP_ATOM ))
cond	82:12	91:35	5	( atom_type != FREE_ATOM ) && ( atom_type != JUNK_ATOM ) && ( atom_type != MDAT_ATOM ) && ( atom_type != MOOV_ATOM ) && ( atom_type != PNOT_ATOM ) && ( atom_type != SKIP_ATOM ) && ( atom_type != WIDE_ATOM ) && ( atom_type != PICT_ATOM ) && ( atom_type != UUID_ATOM ) && ( atom_type != FTYP_ATOM )
water	82:12	0:0	6	(
water	82:13	0:0	6	atom_type
op	82:23	0:0	6	!=
water	82:26	0:0	6	FREE_ATOM
water	82:35	0:0	6	)
op	82:37	0:0	6	&&
water	83:12	0:0	6	(
water	83:13	0:0	6	atom_type
op	83:23	0:0	6	!=
water	83:26	0:0	6	JUNK_ATOM
water	83:35	0:0	6	)
op	83:37	0:0	6	&&
water	84:12	0:0	6	(
water	84:13	0:0	6	atom_type
op	84:23	0:0	6	!=
water	84:26	0:0	6	MDAT_ATOM
water	84:35	0:0	6	)
op	84:37	0:0	6	&&
water	85:12	0:0	6	(
water	85:13	0:0	6	atom_type
op	85:23	0:0	6	!=
water	85:26	0:0	6	MOOV_ATOM
water	85:35	0:0	6	)
op	85:37	0:0	6	&&
water	86:12	0:0	6	(
water	86:13	0:0	6	atom_type
op	86:23	0:0	6	!=
water	86:26	0:0	6	PNOT_ATOM
water	86:35	0:0	6	)
op	86:37	0:0	6	&&
water	87:12	0:0	6	(
water	87:13	0:0	6	atom_type
op	87:23	0:0	6	!=
water	87:26	0:0	6	SKIP_ATOM
water	87:35	0:0	6	)
op	87:37	0:0	6	&&
water	88:12	0:0	6	(
water	88:13	0:0	6	atom_type
op	88:23	0:0	6	!=
water	88:26	0:0	6	WIDE_ATOM
water	88:35	0:0	6	)
op	88:37	0:0	6	&&
water	89:12	0:0	6	(
water	89:13	0:0	6	atom_type
op	89:23	0:0	6	!=
water	89:26	0:0	6	PICT_ATOM
water	89:35	0:0	6	)
op	89:37	0:0	6	&&
water	90:12	0:0	6	(
water	90:13	0:0	6	atom_type
op	90:23	0:0	6	!=
water	90:26	0:0	6	UUID_ATOM
water	90:35	0:0	6	)
op	90:37	0:0	6	&&
water	91:12	0:0	6	(
water	91:13	0:0	6	atom_type
op	91:23	0:0	6	!=
water	91:26	0:0	6	FTYP_ATOM
water	91:35	0:0	6	)
stmts	91:38	94:8	5	
water	91:38	0:0	6	{
call	92:12	92:84	6	printf
arg	92:19	92:84	7	"encountered non-QT top-level atom (is this a QuickTime file?)\n"
water	92:19	0:0	8	"encountered non-QT top-level atom (is this a QuickTime file?)\n"
water	92:85	0:0	6	;
break	93:12	93:17	6	
water	94:8	0:0	6	}
water	95:8	0:0	4	atom_offset
op	95:20	0:0	4	+=
water	95:23	0:0	4	atom_size
water	95:32	0:0	4	;
if	99:8	100:17	4	(atom_size < 8)
cond	99:12	99:24	5	atom_size < 8
water	99:12	0:0	6	atom_size
op	99:22	0:0	6	<
water	99:24	0:0	6	8
stmts	100:12	100:17	5	
break	100:12	100:17	6	
water	101:4	0:0	4	}
if	102:4	107:4	2	(atom_type != MOOV_ATOM)
cond	102:8	102:21	3	atom_type != MOOV_ATOM
water	102:8	0:0	4	atom_type
op	102:18	0:0	4	!=
water	102:21	0:0	4	MOOV_ATOM
stmts	102:32	107:4	3	
water	102:32	0:0	4	{
call	103:8	103:56	4	printf
arg	103:15	103:56	5	"last atom in file was not a moov atom\n"
water	103:15	0:0	6	"last atom in file was not a moov atom\n"
water	103:57	0:0	4	;
call	104:8	104:22	4	free
arg	104:13	104:22	5	ftyp_atom
water	104:13	0:0	6	ftyp_atom
water	104:23	0:0	4	;
call	105:8	105:21	4	fclose
arg	105:15	105:21	5	infile
water	105:15	0:0	6	infile
water	105:22	0:0	4	;
return	106:8	106:16	4	0
water	106:15	0:0	5	0
water	107:4	0:0	4	}
if	110:4	113:4	2	(fseeko (infile ,- atom_size ,SEEK_END ))
cond	110:8	110:43	3	fseeko (infile ,- atom_size ,SEEK_END )
call	110:8	110:43	4	fseeko
arg	110:15	110:21	5	infile
water	110:15	0:0	6	infile
arg	110:23	110:33	5	-atom_size
op	110:23	0:0	6	-
water	110:24	0:0	6	atom_size
arg	110:35	110:43	5	SEEK_END
water	110:35	0:0	6	SEEK_END
stmts	110:46	113:4	3	
water	110:46	0:0	4	{
call	111:8	111:22	4	perror
arg	111:15	111:22	5	argv[1]
water	111:15	0:0	6	argv
op	111:19	0:0	6	[
water	111:20	0:0	6	1
op	111:21	0:0	6	]
water	111:23	0:0	4	;
goto	112:8	112:22	4	error_out
water	112:13	0:0	5	error_out
water	113:4	0:0	4	}
water	114:4	0:0	2	last_offset
op	114:19	0:0	2	=
call	114:21	114:34	2	ftello
arg	114:28	114:34	3	infile
water	114:28	0:0	4	infile
water	114:35	0:0	2	;
if	115:4	118:4	2	(last_offset < 0)
cond	115:8	115:22	3	last_offset < 0
water	115:8	0:0	4	last_offset
op	115:20	0:0	4	<
water	115:22	0:0	4	0
stmts	115:25	118:4	3	
water	115:25	0:0	4	{
call	116:8	116:22	4	perror
arg	116:15	116:22	5	argv[1]
water	116:15	0:0	6	argv
op	116:19	0:0	6	[
water	116:20	0:0	6	1
op	116:21	0:0	6	]
water	116:23	0:0	4	;
goto	117:8	117:22	4	error_out
water	117:13	0:0	5	error_out
water	118:4	0:0	4	}
water	119:4	0:0	2	moov_atom_size
op	119:19	0:0	2	=
water	119:21	0:0	2	atom_size
water	119:30	0:0	2	;
water	120:4	0:0	2	moov_atom
op	120:19	0:0	2	=
call	120:21	120:42	2	malloc
arg	120:28	120:42	3	moov_atom_size
water	120:28	0:0	4	moov_atom_size
water	120:43	0:0	2	;
if	121:4	124:4	2	(! moov_atom)
cond	121:8	121:9	3	! moov_atom
op	121:8	0:0	4	!
water	121:9	0:0	4	moov_atom
stmts	121:20	124:4	3	
water	121:20	0:0	4	{
call	122:8	122:78	4	printf
arg	122:15	122:67	5	"could not allocate %"PRIu64" bytes for moov atom\n"
water	122:15	0:0	6	"could not allocate %"
water	122:37	0:0	6	PRIu64
water	122:43	0:0	6	" bytes for moov atom\n"
arg	122:69	122:78	5	atom_size
water	122:69	0:0	6	atom_size
water	122:79	0:0	4	;
goto	123:8	123:22	4	error_out
water	123:13	0:0	5	error_out
water	124:4	0:0	4	}
if	125:4	128:4	2	(fread (moov_atom ,atom_size ,1 ,infile ) != 1)
cond	125:8	125:50	3	fread (moov_atom ,atom_size ,1 ,infile ) != 1
call	125:8	125:45	4	fread
arg	125:14	125:23	5	moov_atom
water	125:14	0:0	6	moov_atom
arg	125:25	125:34	5	atom_size
water	125:25	0:0	6	atom_size
arg	125:36	125:37	5	1
water	125:36	0:0	6	1
arg	125:39	125:45	5	infile
water	125:39	0:0	6	infile
op	125:47	0:0	4	!=
water	125:50	0:0	4	1
stmts	125:53	128:4	3	
water	125:53	0:0	4	{
call	126:8	126:22	4	perror
arg	126:15	126:22	5	argv[1]
water	126:15	0:0	6	argv
op	126:19	0:0	6	[
water	126:20	0:0	6	1
op	126:21	0:0	6	]
water	126:23	0:0	4	;
goto	127:8	127:22	4	error_out
water	127:13	0:0	5	error_out
water	128:4	0:0	4	}
if	131:4	134:4	2	(BE_32 (& moov_atom [ 12 ] ) == CMOV_ATOM)
cond	131:8	131:33	3	BE_32 (& moov_atom [ 12 ] ) == CMOV_ATOM
call	131:8	131:28	4	BE_32
arg	131:14	131:28	5	&moov_atom[12]
op	131:14	0:0	6	&
water	131:15	0:0	6	moov_atom
op	131:24	0:0	6	[
water	131:25	0:0	6	12
op	131:27	0:0	6	]
op	131:30	0:0	4	==
water	131:33	0:0	4	CMOV_ATOM
stmts	131:44	134:4	3	
water	131:44	0:0	4	{
call	132:8	132:74	4	printf
arg	132:15	132:74	5	"this utility does not support compressed moov atoms yet\n"
water	132:15	0:0	6	"this utility does not support compressed moov atoms yet\n"
water	132:75	0:0	4	;
goto	133:8	133:22	4	error_out
water	133:13	0:0	5	error_out
water	134:4	0:0	4	}
call	136:4	136:17	2	fclose
arg	136:11	136:17	3	infile
water	136:11	0:0	4	infile
water	136:18	0:0	2	;
water	137:4	0:0	2	infile
op	137:11	0:0	2	=
water	137:13	0:0	2	NULL
water	137:17	0:0	2	;
for	139:4	188:4	2	(i = 4 ;i < moov_atom_size - 4;i ++)
forinit	139:9	139:14	3	i = 4 ;
water	139:9	0:0	4	i
op	139:11	0:0	4	=
water	139:13	0:0	4	4
water	139:14	0:0	4	;
cond	139:16	139:37	3	i < moov_atom_size - 4
water	139:16	0:0	4	i
op	139:18	0:0	4	<
water	139:20	0:0	4	moov_atom_size
op	139:35	0:0	4	-
water	139:37	0:0	4	4
forexpr	139:40	139:41	3	i ++
water	139:40	0:0	4	i
op	139:41	0:0	4	++
stmts	139:45	188:4	3	
water	139:45	0:0	4	{
water	140:8	0:0	4	atom_type
op	140:18	0:0	4	=
call	140:20	140:39	4	BE_32
arg	140:26	140:39	5	&moov_atom[i]
op	140:26	0:0	6	&
water	140:27	0:0	6	moov_atom
op	140:36	0:0	6	[
water	140:37	0:0	6	i
op	140:38	0:0	6	]
water	140:40	0:0	4	;
if	141:8	162:8	4	(atom_type == STCO_ATOM)
cond	141:12	141:25	5	atom_type == STCO_ATOM
water	141:12	0:0	6	atom_type
op	141:22	0:0	6	==
water	141:25	0:0	6	STCO_ATOM
stmts	141:36	162:8	5	
water	141:36	0:0	6	{
call	142:12	142:45	6	printf
arg	142:19	142:45	7	" patching stco atom...\n"
water	142:19	0:0	8	" patching stco atom...\n"
water	142:46	0:0	6	;
water	143:12	0:0	6	atom_size
op	143:22	0:0	6	=
call	143:24	143:47	6	BE_32
arg	143:30	143:47	7	&moov_atom[i-4]
op	143:30	0:0	8	&
water	143:31	0:0	8	moov_atom
op	143:40	0:0	8	[
water	143:41	0:0	8	i
op	143:43	0:0	8	-
water	143:45	0:0	8	4
op	143:46	0:0	8	]
water	143:48	0:0	6	;
if	144:12	147:12	6	(i + atom_size - 4 > moov_atom_size)
cond	144:16	144:36	7	i + atom_size - 4 > moov_atom_size
water	144:16	0:0	8	i
op	144:18	0:0	8	+
water	144:20	0:0	8	atom_size
op	144:30	0:0	8	-
water	144:32	0:0	8	4
op	144:34	0:0	8	>
water	144:36	0:0	8	moov_atom_size
stmts	144:52	147:12	7	
water	144:52	0:0	8	{
call	145:16	145:41	8	printf
arg	145:23	145:41	9	" bad atom size\n"
water	145:23	0:0	10	" bad atom size\n"
water	145:42	0:0	8	;
goto	146:16	146:30	8	error_out
water	146:21	0:0	9	error_out
water	147:12	0:0	8	}
water	148:12	0:0	6	offset_count
op	148:25	0:0	6	=
call	148:27	148:50	6	BE_32
arg	148:33	148:50	7	&moov_atom[i+8]
op	148:33	0:0	8	&
water	148:34	0:0	8	moov_atom
op	148:43	0:0	8	[
water	148:44	0:0	8	i
op	148:46	0:0	8	+
water	148:48	0:0	8	8
op	148:49	0:0	8	]
water	148:51	0:0	6	;
if	149:12	152:12	6	(i + 12 + offset_count* UINT64_C (4 ) > moov_atom_size)
cond	149:16	149:54	7	i + 12 + offset_count* UINT64_C (4 ) > moov_atom_size
water	149:16	0:0	8	i
op	149:18	0:0	8	+
water	149:20	0:0	8	12
op	149:23	0:0	8	+
water	149:25	0:0	8	offset_count
call	149:38	149:50	8	*UINT64_C
arg	149:49	149:50	9	4
water	149:49	0:0	10	4
op	149:52	0:0	8	>
water	149:54	0:0	8	moov_atom_size
stmts	149:70	152:12	7	
water	149:70	0:0	8	{
call	150:16	150:55	8	printf
arg	150:23	150:55	9	" bad atom size/element count\n"
water	150:23	0:0	10	" bad atom size/element count\n"
water	150:56	0:0	8	;
goto	151:16	151:30	8	error_out
water	151:21	0:0	9	error_out
water	152:12	0:0	8	}
for	153:12	160:12	6	(j = 0 ;j < offset_count;j ++)
forinit	153:17	153:22	7	j = 0 ;
water	153:17	0:0	8	j
op	153:19	0:0	8	=
water	153:21	0:0	8	0
water	153:22	0:0	8	;
cond	153:24	153:28	7	j < offset_count
water	153:24	0:0	8	j
op	153:26	0:0	8	<
water	153:28	0:0	8	offset_count
forexpr	153:42	153:43	7	j ++
water	153:42	0:0	8	j
op	153:43	0:0	8	++
stmts	153:47	160:12	7	
water	153:47	0:0	8	{
water	154:16	0:0	8	current_offset
op	154:32	0:0	8	=
call	154:34	154:66	8	BE_32
arg	154:40	154:66	9	&moov_atom[i+12+j*4]
op	154:40	0:0	10	&
water	154:41	0:0	10	moov_atom
op	154:50	0:0	10	[
water	154:51	0:0	10	i
op	154:53	0:0	10	+
water	154:55	0:0	10	12
op	154:58	0:0	10	+
water	154:60	0:0	10	j
op	154:62	0:0	10	*
water	154:64	0:0	10	4
op	154:65	0:0	10	]
water	154:67	0:0	8	;
water	155:16	0:0	8	current_offset
op	155:31	0:0	8	+=
water	155:34	0:0	8	moov_atom_size
water	155:48	0:0	8	;
water	156:16	0:0	8	moov_atom
op	156:25	0:0	8	[
water	156:26	0:0	8	i
op	156:28	0:0	8	+
water	156:30	0:0	8	12
op	156:33	0:0	8	+
water	156:35	0:0	8	j
op	156:37	0:0	8	*
water	156:39	0:0	8	4
op	156:41	0:0	8	+
water	156:43	0:0	8	0
op	156:44	0:0	8	]
op	156:46	0:0	8	=
water	156:48	0:0	8	(
water	156:49	0:0	8	current_offset
op	156:64	0:0	8	>>
water	156:67	0:0	8	24
water	156:69	0:0	8	)
op	156:71	0:0	8	&
water	156:73	0:0	8	0
water	156:74	0:0	8	xFF
water	156:77	0:0	8	;
water	157:16	0:0	8	moov_atom
op	157:25	0:0	8	[
water	157:26	0:0	8	i
op	157:28	0:0	8	+
water	157:30	0:0	8	12
op	157:33	0:0	8	+
water	157:35	0:0	8	j
op	157:37	0:0	8	*
water	157:39	0:0	8	4
op	157:41	0:0	8	+
water	157:43	0:0	8	1
op	157:44	0:0	8	]
op	157:46	0:0	8	=
water	157:48	0:0	8	(
water	157:49	0:0	8	current_offset
op	157:64	0:0	8	>>
water	157:67	0:0	8	16
water	157:69	0:0	8	)
op	157:71	0:0	8	&
water	157:73	0:0	8	0
water	157:74	0:0	8	xFF
water	157:77	0:0	8	;
water	158:16	0:0	8	moov_atom
op	158:25	0:0	8	[
water	158:26	0:0	8	i
op	158:28	0:0	8	+
water	158:30	0:0	8	12
op	158:33	0:0	8	+
water	158:35	0:0	8	j
op	158:37	0:0	8	*
water	158:39	0:0	8	4
op	158:41	0:0	8	+
water	158:43	0:0	8	2
op	158:44	0:0	8	]
op	158:46	0:0	8	=
water	158:48	0:0	8	(
water	158:49	0:0	8	current_offset
op	158:64	0:0	8	>>
water	158:68	0:0	8	8
water	158:69	0:0	8	)
op	158:71	0:0	8	&
water	158:73	0:0	8	0
water	158:74	0:0	8	xFF
water	158:77	0:0	8	;
water	159:16	0:0	8	moov_atom
op	159:25	0:0	8	[
water	159:26	0:0	8	i
op	159:28	0:0	8	+
water	159:30	0:0	8	12
op	159:33	0:0	8	+
water	159:35	0:0	8	j
op	159:37	0:0	8	*
water	159:39	0:0	8	4
op	159:41	0:0	8	+
water	159:43	0:0	8	3
op	159:44	0:0	8	]
op	159:46	0:0	8	=
water	159:48	0:0	8	(
water	159:49	0:0	8	current_offset
op	159:64	0:0	8	>>
water	159:68	0:0	8	0
water	159:69	0:0	8	)
op	159:71	0:0	8	&
water	159:73	0:0	8	0
water	159:74	0:0	8	xFF
water	159:77	0:0	8	;
water	160:12	0:0	8	}
water	161:12	0:0	6	i
op	161:14	0:0	6	+=
water	161:17	0:0	6	atom_size
op	161:27	0:0	6	-
water	161:29	0:0	6	4
water	161:30	0:0	6	;
water	162:8	0:0	6	}
else	162:10	187:8	4
stmts	162:15	187:8	5	
if	162:15	187:8	6	(atom_type == CO64_ATOM)
cond	162:19	162:32	7	atom_type == CO64_ATOM
water	162:19	0:0	8	atom_type
op	162:29	0:0	8	==
water	162:32	0:0	8	CO64_ATOM
stmts	162:43	187:8	7	
water	162:43	0:0	8	{
call	163:12	163:45	8	printf
arg	163:19	163:45	9	" patching co64 atom...\n"
water	163:19	0:0	10	" patching co64 atom...\n"
water	163:46	0:0	8	;
water	164:12	0:0	8	atom_size
op	164:22	0:0	8	=
call	164:24	164:47	8	BE_32
arg	164:30	164:47	9	&moov_atom[i-4]
op	164:30	0:0	10	&
water	164:31	0:0	10	moov_atom
op	164:40	0:0	10	[
water	164:41	0:0	10	i
op	164:43	0:0	10	-
water	164:45	0:0	10	4
op	164:46	0:0	10	]
water	164:48	0:0	8	;
if	165:12	168:12	8	(i + atom_size - 4 > moov_atom_size)
cond	165:16	165:36	9	i + atom_size - 4 > moov_atom_size
water	165:16	0:0	10	i
op	165:18	0:0	10	+
water	165:20	0:0	10	atom_size
op	165:30	0:0	10	-
water	165:32	0:0	10	4
op	165:34	0:0	10	>
water	165:36	0:0	10	moov_atom_size
stmts	165:52	168:12	9	
water	165:52	0:0	10	{
call	166:16	166:41	10	printf
arg	166:23	166:41	11	" bad atom size\n"
water	166:23	0:0	12	" bad atom size\n"
water	166:42	0:0	10	;
goto	167:16	167:30	10	error_out
water	167:21	0:0	11	error_out
water	168:12	0:0	10	}
water	169:12	0:0	8	offset_count
op	169:25	0:0	8	=
call	169:27	169:50	8	BE_32
arg	169:33	169:50	9	&moov_atom[i+8]
op	169:33	0:0	10	&
water	169:34	0:0	10	moov_atom
op	169:43	0:0	10	[
water	169:44	0:0	10	i
op	169:46	0:0	10	+
water	169:48	0:0	10	8
op	169:49	0:0	10	]
water	169:51	0:0	8	;
if	170:12	173:12	8	(i + 12 + offset_count* UINT64_C (8 ) > moov_atom_size)
cond	170:16	170:54	9	i + 12 + offset_count* UINT64_C (8 ) > moov_atom_size
water	170:16	0:0	10	i
op	170:18	0:0	10	+
water	170:20	0:0	10	12
op	170:23	0:0	10	+
water	170:25	0:0	10	offset_count
call	170:38	170:50	10	*UINT64_C
arg	170:49	170:50	11	8
water	170:49	0:0	12	8
op	170:52	0:0	10	>
water	170:54	0:0	10	moov_atom_size
stmts	170:70	173:12	9	
water	170:70	0:0	10	{
call	171:16	171:55	10	printf
arg	171:23	171:55	11	" bad atom size/element count\n"
water	171:23	0:0	12	" bad atom size/element count\n"
water	171:56	0:0	10	;
goto	172:16	172:30	10	error_out
water	172:21	0:0	11	error_out
water	173:12	0:0	10	}
for	174:12	185:12	8	(j = 0 ;j < offset_count;j ++)
forinit	174:17	174:22	9	j = 0 ;
water	174:17	0:0	10	j
op	174:19	0:0	10	=
water	174:21	0:0	10	0
water	174:22	0:0	10	;
cond	174:24	174:28	9	j < offset_count
water	174:24	0:0	10	j
op	174:26	0:0	10	<
water	174:28	0:0	10	offset_count
forexpr	174:42	174:43	9	j ++
water	174:42	0:0	10	j
op	174:43	0:0	10	++
stmts	174:47	185:12	9	
water	174:47	0:0	10	{
water	175:16	0:0	10	current_offset
op	175:32	0:0	10	=
call	175:34	175:66	10	BE_64
arg	175:40	175:66	11	&moov_atom[i+12+j*8]
op	175:40	0:0	12	&
water	175:41	0:0	12	moov_atom
op	175:50	0:0	12	[
water	175:51	0:0	12	i
op	175:53	0:0	12	+
water	175:55	0:0	12	12
op	175:58	0:0	12	+
water	175:60	0:0	12	j
op	175:62	0:0	12	*
water	175:64	0:0	12	8
op	175:65	0:0	12	]
water	175:67	0:0	10	;
water	176:16	0:0	10	current_offset
op	176:31	0:0	10	+=
water	176:34	0:0	10	moov_atom_size
water	176:48	0:0	10	;
water	177:16	0:0	10	moov_atom
op	177:25	0:0	10	[
water	177:26	0:0	10	i
op	177:28	0:0	10	+
water	177:30	0:0	10	12
op	177:33	0:0	10	+
water	177:35	0:0	10	j
op	177:37	0:0	10	*
water	177:39	0:0	10	8
op	177:41	0:0	10	+
water	177:43	0:0	10	0
op	177:44	0:0	10	]
op	177:46	0:0	10	=
water	177:48	0:0	10	(
water	177:49	0:0	10	current_offset
op	177:64	0:0	10	>>
water	177:67	0:0	10	56
water	177:69	0:0	10	)
op	177:71	0:0	10	&
water	177:73	0:0	10	0
water	177:74	0:0	10	xFF
water	177:77	0:0	10	;
water	178:16	0:0	10	moov_atom
op	178:25	0:0	10	[
water	178:26	0:0	10	i
op	178:28	0:0	10	+
water	178:30	0:0	10	12
op	178:33	0:0	10	+
water	178:35	0:0	10	j
op	178:37	0:0	10	*
water	178:39	0:0	10	8
op	178:41	0:0	10	+
water	178:43	0:0	10	1
op	178:44	0:0	10	]
op	178:46	0:0	10	=
water	178:48	0:0	10	(
water	178:49	0:0	10	current_offset
op	178:64	0:0	10	>>
water	178:67	0:0	10	48
water	178:69	0:0	10	)
op	178:71	0:0	10	&
water	178:73	0:0	10	0
water	178:74	0:0	10	xFF
water	178:77	0:0	10	;
water	179:16	0:0	10	moov_atom
op	179:25	0:0	10	[
water	179:26	0:0	10	i
op	179:28	0:0	10	+
water	179:30	0:0	10	12
op	179:33	0:0	10	+
water	179:35	0:0	10	j
op	179:37	0:0	10	*
water	179:39	0:0	10	8
op	179:41	0:0	10	+
water	179:43	0:0	10	2
op	179:44	0:0	10	]
op	179:46	0:0	10	=
water	179:48	0:0	10	(
water	179:49	0:0	10	current_offset
op	179:64	0:0	10	>>
water	179:67	0:0	10	40
water	179:69	0:0	10	)
op	179:71	0:0	10	&
water	179:73	0:0	10	0
water	179:74	0:0	10	xFF
water	179:77	0:0	10	;
water	180:16	0:0	10	moov_atom
op	180:25	0:0	10	[
water	180:26	0:0	10	i
op	180:28	0:0	10	+
water	180:30	0:0	10	12
op	180:33	0:0	10	+
water	180:35	0:0	10	j
op	180:37	0:0	10	*
water	180:39	0:0	10	8
op	180:41	0:0	10	+
water	180:43	0:0	10	3
op	180:44	0:0	10	]
op	180:46	0:0	10	=
water	180:48	0:0	10	(
water	180:49	0:0	10	current_offset
op	180:64	0:0	10	>>
water	180:67	0:0	10	32
water	180:69	0:0	10	)
op	180:71	0:0	10	&
water	180:73	0:0	10	0
water	180:74	0:0	10	xFF
water	180:77	0:0	10	;
water	181:16	0:0	10	moov_atom
op	181:25	0:0	10	[
water	181:26	0:0	10	i
op	181:28	0:0	10	+
water	181:30	0:0	10	12
op	181:33	0:0	10	+
water	181:35	0:0	10	j
op	181:37	0:0	10	*
water	181:39	0:0	10	8
op	181:41	0:0	10	+
water	181:43	0:0	10	4
op	181:44	0:0	10	]
op	181:46	0:0	10	=
water	181:48	0:0	10	(
water	181:49	0:0	10	current_offset
op	181:64	0:0	10	>>
water	181:67	0:0	10	24
water	181:69	0:0	10	)
op	181:71	0:0	10	&
water	181:73	0:0	10	0
water	181:74	0:0	10	xFF
water	181:77	0:0	10	;
water	182:16	0:0	10	moov_atom
op	182:25	0:0	10	[
water	182:26	0:0	10	i
op	182:28	0:0	10	+
water	182:30	0:0	10	12
op	182:33	0:0	10	+
water	182:35	0:0	10	j
op	182:37	0:0	10	*
water	182:39	0:0	10	8
op	182:41	0:0	10	+
water	182:43	0:0	10	5
op	182:44	0:0	10	]
op	182:46	0:0	10	=
water	182:48	0:0	10	(
water	182:49	0:0	10	current_offset
op	182:64	0:0	10	>>
water	182:67	0:0	10	16
water	182:69	0:0	10	)
op	182:71	0:0	10	&
water	182:73	0:0	10	0
water	182:74	0:0	10	xFF
water	182:77	0:0	10	;
water	183:16	0:0	10	moov_atom
op	183:25	0:0	10	[
water	183:26	0:0	10	i
op	183:28	0:0	10	+
water	183:30	0:0	10	12
op	183:33	0:0	10	+
water	183:35	0:0	10	j
op	183:37	0:0	10	*
water	183:39	0:0	10	8
op	183:41	0:0	10	+
water	183:43	0:0	10	6
op	183:44	0:0	10	]
op	183:46	0:0	10	=
water	183:48	0:0	10	(
water	183:49	0:0	10	current_offset
op	183:64	0:0	10	>>
water	183:68	0:0	10	8
water	183:69	0:0	10	)
op	183:71	0:0	10	&
water	183:73	0:0	10	0
water	183:74	0:0	10	xFF
water	183:77	0:0	10	;
water	184:16	0:0	10	moov_atom
op	184:25	0:0	10	[
water	184:26	0:0	10	i
op	184:28	0:0	10	+
water	184:30	0:0	10	12
op	184:33	0:0	10	+
water	184:35	0:0	10	j
op	184:37	0:0	10	*
water	184:39	0:0	10	8
op	184:41	0:0	10	+
water	184:43	0:0	10	7
op	184:44	0:0	10	]
op	184:46	0:0	10	=
water	184:48	0:0	10	(
water	184:49	0:0	10	current_offset
op	184:64	0:0	10	>>
water	184:68	0:0	10	0
water	184:69	0:0	10	)
op	184:71	0:0	10	&
water	184:73	0:0	10	0
water	184:74	0:0	10	xFF
water	184:77	0:0	10	;
water	185:12	0:0	10	}
water	186:12	0:0	8	i
op	186:14	0:0	8	+=
water	186:17	0:0	8	atom_size
op	186:27	0:0	8	-
water	186:29	0:0	8	4
water	186:30	0:0	8	;
water	187:8	0:0	8	}
water	188:4	0:0	4	}
water	190:4	0:0	2	infile
op	190:11	0:0	2	=
call	190:13	190:32	2	fopen
arg	190:19	190:26	3	argv[1]
water	190:19	0:0	4	argv
op	190:23	0:0	4	[
water	190:24	0:0	4	1
op	190:25	0:0	4	]
arg	190:28	190:32	3	"rb"
water	190:28	0:0	4	"rb"
water	190:33	0:0	2	;
if	191:4	194:4	2	(! infile)
cond	191:8	191:9	3	! infile
op	191:8	0:0	4	!
water	191:9	0:0	4	infile
stmts	191:17	194:4	3	
water	191:17	0:0	4	{
call	192:8	192:22	4	perror
arg	192:15	192:22	5	argv[1]
water	192:15	0:0	6	argv
op	192:19	0:0	6	[
water	192:20	0:0	6	1
op	192:21	0:0	6	]
water	192:23	0:0	4	;
goto	193:8	193:22	4	error_out
water	193:13	0:0	5	error_out
water	194:4	0:0	4	}
if	195:4	201:4	2	(start_offset > 0)
cond	195:8	195:23	3	start_offset > 0
water	195:8	0:0	4	start_offset
op	195:21	0:0	4	>
water	195:23	0:0	4	0
stmts	195:26	201:4	3	
water	195:26	0:0	4	{
if	196:8	199:8	4	(fseeko (infile ,start_offset ,SEEK_SET ))
cond	196:12	196:49	5	fseeko (infile ,start_offset ,SEEK_SET )
call	196:12	196:49	6	fseeko
arg	196:19	196:25	7	infile
water	196:19	0:0	8	infile
arg	196:27	196:39	7	start_offset
water	196:27	0:0	8	start_offset
arg	196:41	196:49	7	SEEK_SET
water	196:41	0:0	8	SEEK_SET
stmts	196:52	199:8	5	
water	196:52	0:0	6	{
call	197:12	197:26	6	perror
arg	197:19	197:26	7	argv[1]
water	197:19	0:0	8	argv
op	197:23	0:0	8	[
water	197:24	0:0	8	1
op	197:25	0:0	8	]
water	197:27	0:0	6	;
goto	198:12	198:26	6	error_out
water	198:17	0:0	7	error_out
water	199:8	0:0	6	}
water	200:8	0:0	4	last_offset
op	200:20	0:0	4	-=
water	200:23	0:0	4	start_offset
water	200:35	0:0	4	;
water	201:4	0:0	4	}
water	202:4	0:0	2	outfile
op	202:12	0:0	2	=
call	202:14	202:33	2	fopen
arg	202:20	202:27	3	argv[2]
water	202:20	0:0	4	argv
op	202:24	0:0	4	[
water	202:25	0:0	4	2
op	202:26	0:0	4	]
arg	202:29	202:33	3	"wb"
water	202:29	0:0	4	"wb"
water	202:34	0:0	2	;
if	203:4	206:4	2	(! outfile)
cond	203:8	203:9	3	! outfile
op	203:8	0:0	4	!
water	203:9	0:0	4	outfile
stmts	203:18	206:4	3	
water	203:18	0:0	4	{
call	204:8	204:22	4	perror
arg	204:15	204:22	5	argv[2]
water	204:15	0:0	6	argv
op	204:19	0:0	6	[
water	204:20	0:0	6	2
op	204:21	0:0	6	]
water	204:23	0:0	4	;
goto	205:8	205:22	4	error_out
water	205:13	0:0	5	error_out
water	206:4	0:0	4	}
if	208:4	214:4	2	(ftyp_atom_size > 0)
cond	208:8	208:25	3	ftyp_atom_size > 0
water	208:8	0:0	4	ftyp_atom_size
op	208:23	0:0	4	>
water	208:25	0:0	4	0
stmts	208:28	214:4	3	
water	208:28	0:0	4	{
call	209:8	209:40	4	printf
arg	209:15	209:40	5	" writing ftyp atom...\n"
water	209:15	0:0	6	" writing ftyp atom...\n"
water	209:41	0:0	4	;
if	210:8	213:8	4	(fwrite (ftyp_atom ,ftyp_atom_size ,1 ,outfile ) != 1)
cond	210:12	210:61	5	fwrite (ftyp_atom ,ftyp_atom_size ,1 ,outfile ) != 1
call	210:12	210:56	6	fwrite
arg	210:19	210:28	7	ftyp_atom
water	210:19	0:0	8	ftyp_atom
arg	210:30	210:44	7	ftyp_atom_size
water	210:30	0:0	8	ftyp_atom_size
arg	210:46	210:47	7	1
water	210:46	0:0	8	1
arg	210:49	210:56	7	outfile
water	210:49	0:0	8	outfile
op	210:58	0:0	6	!=
water	210:61	0:0	6	1
stmts	210:64	213:8	5	
water	210:64	0:0	6	{
call	211:12	211:26	6	perror
arg	211:19	211:26	7	argv[2]
water	211:19	0:0	8	argv
op	211:23	0:0	8	[
water	211:24	0:0	8	2
op	211:25	0:0	8	]
water	211:27	0:0	6	;
goto	212:12	212:26	6	error_out
water	212:17	0:0	7	error_out
water	213:8	0:0	6	}
water	214:4	0:0	4	}
call	216:4	216:36	2	printf
arg	216:11	216:36	3	" writing moov atom...\n"
water	216:11	0:0	4	" writing moov atom...\n"
water	216:37	0:0	2	;
if	217:4	220:4	2	(fwrite (moov_atom ,moov_atom_size ,1 ,outfile ) != 1)
cond	217:8	217:57	3	fwrite (moov_atom ,moov_atom_size ,1 ,outfile ) != 1
call	217:8	217:52	4	fwrite
arg	217:15	217:24	5	moov_atom
water	217:15	0:0	6	moov_atom
arg	217:26	217:40	5	moov_atom_size
water	217:26	0:0	6	moov_atom_size
arg	217:42	217:43	5	1
water	217:42	0:0	6	1
arg	217:45	217:52	5	outfile
water	217:45	0:0	6	outfile
op	217:54	0:0	4	!=
water	217:57	0:0	4	1
stmts	217:60	220:4	3	
water	217:60	0:0	4	{
call	218:8	218:22	4	perror
arg	218:15	218:22	5	argv[2]
water	218:15	0:0	6	argv
op	218:19	0:0	6	[
water	218:20	0:0	6	2
op	218:21	0:0	6	]
water	218:23	0:0	4	;
goto	219:8	219:22	4	error_out
water	219:13	0:0	5	error_out
water	220:4	0:0	4	}
water	222:4	0:0	2	bytes_to_copy
op	222:18	0:0	2	=
call	222:20	222:53	2	MIN
arg	222:24	222:40	3	COPY_BUFFER_SIZE
water	222:24	0:0	4	COPY_BUFFER_SIZE
arg	222:42	222:53	3	last_offset
water	222:42	0:0	4	last_offset
water	222:54	0:0	2	;
water	223:4	0:0	2	copy_buffer
op	223:16	0:0	2	=
call	223:18	223:38	2	malloc
arg	223:25	223:38	3	bytes_to_copy
water	223:25	0:0	4	bytes_to_copy
water	223:39	0:0	2	;
if	224:4	227:4	2	(! copy_buffer)
cond	224:8	224:9	3	! copy_buffer
op	224:8	0:0	4	!
water	224:9	0:0	4	copy_buffer
stmts	224:22	227:4	3	
water	224:22	0:0	4	{
call	225:8	225:77	4	printf
arg	225:15	225:62	5	"could not allocate %d bytes for copy_buffer\n"
water	225:15	0:0	6	"could not allocate %d bytes for copy_buffer\n"
arg	225:64	225:77	5	bytes_to_copy
water	225:64	0:0	6	bytes_to_copy
water	225:78	0:0	4	;
goto	226:8	226:22	4	error_out
water	226:13	0:0	5	error_out
water	227:4	0:0	4	}
call	228:4	228:39	2	printf
arg	228:11	228:39	3	" copying rest of file...\n"
water	228:11	0:0	4	" copying rest of file...\n"
water	228:40	0:0	2	;
while	229:4	240:4	2	(last_offset)
cond	229:11	229:11	3	last_offset
water	229:11	0:0	4	last_offset
stmts	229:24	240:4	3	
water	229:24	0:0	4	{
water	230:8	0:0	4	bytes_to_copy
op	230:22	0:0	4	=
call	230:24	230:54	4	MIN
arg	230:28	230:41	5	bytes_to_copy
water	230:28	0:0	6	bytes_to_copy
arg	230:43	230:54	5	last_offset
water	230:43	0:0	6	last_offset
water	230:55	0:0	4	;
if	231:8	234:8	4	(fread (copy_buffer ,bytes_to_copy ,1 ,infile ) != 1)
cond	231:12	231:60	5	fread (copy_buffer ,bytes_to_copy ,1 ,infile ) != 1
call	231:12	231:55	6	fread
arg	231:18	231:29	7	copy_buffer
water	231:18	0:0	8	copy_buffer
arg	231:31	231:44	7	bytes_to_copy
water	231:31	0:0	8	bytes_to_copy
arg	231:46	231:47	7	1
water	231:46	0:0	8	1
arg	231:49	231:55	7	infile
water	231:49	0:0	8	infile
op	231:57	0:0	6	!=
water	231:60	0:0	6	1
stmts	231:63	234:8	5	
water	231:63	0:0	6	{
call	232:12	232:26	6	perror
arg	232:19	232:26	7	argv[1]
water	232:19	0:0	8	argv
op	232:23	0:0	8	[
water	232:24	0:0	8	1
op	232:25	0:0	8	]
water	232:27	0:0	6	;
goto	233:12	233:26	6	error_out
water	233:17	0:0	7	error_out
water	234:8	0:0	6	}
if	235:8	238:8	4	(fwrite (copy_buffer ,bytes_to_copy ,1 ,outfile ) != 1)
cond	235:12	235:62	5	fwrite (copy_buffer ,bytes_to_copy ,1 ,outfile ) != 1
call	235:12	235:57	6	fwrite
arg	235:19	235:30	7	copy_buffer
water	235:19	0:0	8	copy_buffer
arg	235:32	235:45	7	bytes_to_copy
water	235:32	0:0	8	bytes_to_copy
arg	235:47	235:48	7	1
water	235:47	0:0	8	1
arg	235:50	235:57	7	outfile
water	235:50	0:0	8	outfile
op	235:59	0:0	6	!=
water	235:62	0:0	6	1
stmts	235:65	238:8	5	
water	235:65	0:0	6	{
call	236:12	236:26	6	perror
arg	236:19	236:26	7	argv[2]
water	236:19	0:0	8	argv
op	236:23	0:0	8	[
water	236:24	0:0	8	2
op	236:25	0:0	8	]
water	236:27	0:0	6	;
goto	237:12	237:26	6	error_out
water	237:17	0:0	7	error_out
water	238:8	0:0	6	}
water	239:8	0:0	4	last_offset
op	239:20	0:0	4	-=
water	239:23	0:0	4	bytes_to_copy
water	239:36	0:0	4	;
water	240:4	0:0	4	}
call	241:4	241:17	2	fclose
arg	241:11	241:17	3	infile
water	241:11	0:0	4	infile
water	241:18	0:0	2	;
call	242:4	242:18	2	fclose
arg	242:11	242:18	3	outfile
water	242:11	0:0	4	outfile
water	242:19	0:0	2	;
call	243:4	243:18	2	free
arg	243:9	243:18	3	moov_atom
water	243:9	0:0	4	moov_atom
water	243:19	0:0	2	;
call	244:4	244:18	2	free
arg	244:9	244:18	3	ftyp_atom
water	244:9	0:0	4	ftyp_atom
water	244:19	0:0	2	;
call	245:4	245:20	2	free
arg	245:9	245:20	3	copy_buffer
water	245:9	0:0	4	copy_buffer
water	245:21	0:0	2	;
return	246:4	246:12	2	0
water	246:11	0:0	3	0
label	247:0	247:9	2	error_out :
if	248:4	249:22	2	(infile)
cond	248:8	248:8	3	infile
water	248:8	0:0	4	infile
stmts	249:8	249:22	3	
call	249:8	249:21	4	fclose
arg	249:15	249:21	5	infile
water	249:15	0:0	6	infile
water	249:22	0:0	4	;
if	250:4	251:23	2	(outfile)
cond	250:8	250:8	3	outfile
water	250:8	0:0	4	outfile
stmts	251:8	251:23	3	
call	251:8	251:22	4	fclose
arg	251:15	251:22	5	outfile
water	251:15	0:0	6	outfile
water	251:23	0:0	4	;
call	252:4	252:18	2	free
arg	252:9	252:18	3	moov_atom
water	252:9	0:0	4	moov_atom
water	252:19	0:0	2	;
call	253:4	253:18	2	free
arg	253:9	253:18	3	ftyp_atom
water	253:9	0:0	4	ftyp_atom
water	253:19	0:0	2	;
call	254:4	254:20	2	free
arg	254:9	254:20	3	copy_buffer
water	254:9	0:0	4	copy_buffer
water	254:21	0:0	2	;
return	255:4	255:12	2	1
water	255:11	0:0	3	1
