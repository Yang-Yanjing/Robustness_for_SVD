func	1:0	64:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	0:0	63:12	1	
decl	3:4	3:20	2	AVRational	a
water	3:16	0:0	2	,
decl	3:4	3:20	2	AVRational	b
water	3:18	0:0	2	,
decl	3:4	3:20	2	AVRational	r
for	4:4	23:4	2	(a . num = - 2 ;a . num <= 2;a . num ++)
forinit	4:9	4:19	3	a . num = - 2 ;
water	4:9	0:0	4	a
op	4:10	0:0	4	.
water	4:11	0:0	4	num
op	4:15	0:0	4	=
op	4:17	0:0	4	-
water	4:18	0:0	4	2
water	4:19	0:0	4	;
cond	4:21	4:30	3	a . num <= 2
water	4:21	0:0	4	a
op	4:22	0:0	4	.
water	4:23	0:0	4	num
op	4:27	0:0	4	<=
water	4:30	0:0	4	2
forexpr	4:33	4:38	3	a . num ++
water	4:33	0:0	4	a
op	4:34	0:0	4	.
water	4:35	0:0	4	num
op	4:38	0:0	4	++
stmts	4:42	23:4	3	
water	4:42	0:0	4	{
for	5:8	22:8	4	(a . den = - 2 ;a . den <= 2;a . den ++)
forinit	5:13	5:23	5	a . den = - 2 ;
water	5:13	0:0	6	a
op	5:14	0:0	6	.
water	5:15	0:0	6	den
op	5:19	0:0	6	=
op	5:21	0:0	6	-
water	5:22	0:0	6	2
water	5:23	0:0	6	;
cond	5:25	5:34	5	a . den <= 2
water	5:25	0:0	6	a
op	5:26	0:0	6	.
water	5:27	0:0	6	den
op	5:31	0:0	6	<=
water	5:34	0:0	6	2
forexpr	5:37	5:42	5	a . den ++
water	5:37	0:0	6	a
op	5:38	0:0	6	.
water	5:39	0:0	6	den
op	5:42	0:0	6	++
stmts	5:46	22:8	5	
water	5:46	0:0	6	{
for	6:12	21:12	6	(b . num = - 2 ;b . num <= 2;b . num ++)
forinit	6:17	6:27	7	b . num = - 2 ;
water	6:17	0:0	8	b
op	6:18	0:0	8	.
water	6:19	0:0	8	num
op	6:23	0:0	8	=
op	6:25	0:0	8	-
water	6:26	0:0	8	2
water	6:27	0:0	8	;
cond	6:29	6:38	7	b . num <= 2
water	6:29	0:0	8	b
op	6:30	0:0	8	.
water	6:31	0:0	8	num
op	6:35	0:0	8	<=
water	6:38	0:0	8	2
forexpr	6:41	6:46	7	b . num ++
water	6:41	0:0	8	b
op	6:42	0:0	8	.
water	6:43	0:0	8	num
op	6:46	0:0	8	++
stmts	6:50	21:12	7	
water	6:50	0:0	8	{
for	7:16	20:16	8	(b . den = - 2 ;b . den <= 2;b . den ++)
forinit	7:21	7:31	9	b . den = - 2 ;
water	7:21	0:0	10	b
op	7:22	0:0	10	.
water	7:23	0:0	10	den
op	7:27	0:0	10	=
op	7:29	0:0	10	-
water	7:30	0:0	10	2
water	7:31	0:0	10	;
cond	7:33	7:42	9	b . den <= 2
water	7:33	0:0	10	b
op	7:34	0:0	10	.
water	7:35	0:0	10	den
op	7:39	0:0	10	<=
water	7:42	0:0	10	2
forexpr	7:45	7:50	9	b . den ++
water	7:45	0:0	10	b
op	7:46	0:0	10	.
water	7:47	0:0	10	den
op	7:50	0:0	10	++
stmts	7:54	20:16	9	
water	7:54	0:0	10	{
decl	8:20	8:41	10	int	c
op	8:26	0:0	10	=
call	8:28	8:40	11	av_cmp_q
arg	8:37	8:38	12	a
water	8:37	0:0	13	a
arg	8:39	8:40	12	b
water	8:39	0:0	13	b
decl	9:20	10:58	10	double	d
op	9:29	0:0	10	=
call	9:31	9:39	11	av_q2d
arg	9:38	9:39	12	a
water	9:38	0:0	13	a
op	9:41	0:0	10	==
call	9:44	9:52	11	av_q2d
arg	9:51	9:52	12	b
water	9:51	0:0	13	b
water	9:54	0:0	10	?
water	10:31	0:0	10	0
water	10:33	0:0	10	:
water	10:35	0:0	10	(
call	10:36	10:44	11	av_q2d
arg	10:43	10:44	12	a
water	10:43	0:0	13	a
op	10:46	0:0	10	-
call	10:48	10:56	11	av_q2d
arg	10:55	10:56	12	b
water	10:55	0:0	13	b
water	10:57	0:0	10	)
if	11:20	11:42	10	(d > 0)
cond	11:24	11:28	11	d > 0
water	11:24	0:0	12	d
op	11:26	0:0	12	>
water	11:28	0:0	12	0
stmts	11:37	11:42	11	
water	11:37	0:0	12	d
op	11:39	0:0	12	=
water	11:41	0:0	12	1
water	11:42	0:0	12	;
else	12:20	12:43	10
stmts	12:25	12:43	11	
if	12:25	12:43	12	(d < 0)
cond	12:29	12:33	13	d < 0
water	12:29	0:0	14	d
op	12:31	0:0	14	<
water	12:33	0:0	14	0
stmts	12:37	12:43	13	
water	12:37	0:0	14	d
op	12:39	0:0	14	=
op	12:41	0:0	14	-
water	12:42	0:0	14	1
water	12:43	0:0	14	;
else	13:20	13:48	10
stmts	13:25	13:48	11	
if	13:25	13:48	12	(d != d)
cond	13:29	13:34	13	d != d
water	13:29	0:0	14	d
op	13:31	0:0	14	!=
water	13:34	0:0	14	d
stmts	13:37	13:48	13	
water	13:37	0:0	14	d
op	13:39	0:0	14	=
water	13:41	0:0	14	INT_MIN
water	13:48	0:0	14	;
if	14:20	16:56	10	(c != d)
cond	14:24	14:29	11	c != d
water	14:24	0:0	12	c
op	14:26	0:0	12	!=
water	14:29	0:0	12	d
stmts	15:24	16:56	11	
call	15:24	16:55	12	av_log
arg	15:31	15:35	13	NULL
water	15:31	0:0	14	NULL
arg	15:37	15:49	13	AV_LOG_ERROR
water	15:37	0:0	14	AV_LOG_ERROR
arg	15:51	15:73	13	"%d/%d %d/%d, %d %f\n"
water	15:51	0:0	14	"%d/%d %d/%d, %d %f\n"
arg	15:75	15:80	13	a.num
water	15:75	0:0	14	a
op	15:76	0:0	14	.
water	15:77	0:0	14	num
arg	16:31	16:36	13	a.den
water	16:31	0:0	14	a
op	16:32	0:0	14	.
water	16:33	0:0	14	den
arg	16:38	16:43	13	b.num
water	16:38	0:0	14	b
op	16:39	0:0	14	.
water	16:40	0:0	14	num
arg	16:45	16:50	13	b.den
water	16:45	0:0	14	b
op	16:46	0:0	14	.
water	16:47	0:0	14	den
arg	16:52	16:53	13	c
water	16:52	0:0	14	c
arg	16:54	16:55	13	d
water	16:54	0:0	14	d
water	16:56	0:0	12	;
water	17:20	0:0	10	r
op	17:22	0:0	10	=
call	17:24	17:49	10	av_sub_q
arg	17:33	17:46	11	av_add_q(b,a)
call	17:33	17:45	12	av_add_q
arg	17:42	17:43	13	b
water	17:42	0:0	14	b
arg	17:44	17:45	13	a
water	17:44	0:0	14	a
arg	17:48	17:49	11	b
water	17:48	0:0	12	b
water	17:50	0:0	10	;
if	18:20	19:74	10	(b . den && ( r . num * a . den != a . num * r . den || ! r . num != ! a . num || ! r . den != ! a . den ))
cond	18:23	18:99	11	b . den && ( r . num * a . den != a . num * r . den || ! r . num != ! a . num || ! r . den != ! a . den )
water	18:23	0:0	12	b
op	18:24	0:0	12	.
water	18:25	0:0	12	den
op	18:29	0:0	12	&&
water	18:32	0:0	12	(
water	18:33	0:0	12	r
op	18:34	0:0	12	.
water	18:35	0:0	12	num
op	18:38	0:0	12	*
water	18:39	0:0	12	a
op	18:40	0:0	12	.
water	18:41	0:0	12	den
op	18:45	0:0	12	!=
water	18:48	0:0	12	a
op	18:49	0:0	12	.
water	18:50	0:0	12	num
op	18:53	0:0	12	*
water	18:54	0:0	12	r
op	18:55	0:0	12	.
water	18:56	0:0	12	den
op	18:60	0:0	12	||
op	18:63	0:0	12	!
water	18:64	0:0	12	r
op	18:65	0:0	12	.
water	18:66	0:0	12	num
op	18:70	0:0	12	!=
op	18:73	0:0	12	!
water	18:74	0:0	12	a
op	18:75	0:0	12	.
water	18:76	0:0	12	num
op	18:80	0:0	12	||
op	18:83	0:0	12	!
water	18:84	0:0	12	r
op	18:85	0:0	12	.
water	18:86	0:0	12	den
op	18:90	0:0	12	!=
op	18:93	0:0	12	!
water	18:94	0:0	12	a
op	18:95	0:0	12	.
water	18:96	0:0	12	den
water	18:99	0:0	12	)
stmts	19:24	19:74	11	
call	19:24	19:73	12	av_log
arg	19:31	19:35	13	NULL
water	19:31	0:0	14	NULL
arg	19:37	19:49	13	AV_LOG_ERROR
water	19:37	0:0	14	AV_LOG_ERROR
arg	19:51	19:59	13	"%d/%d "
water	19:51	0:0	14	"%d/%d "
arg	19:61	19:66	13	r.num
water	19:61	0:0	14	r
op	19:62	0:0	14	.
water	19:63	0:0	14	num
arg	19:68	19:73	13	r.den
water	19:68	0:0	14	r
op	19:69	0:0	14	.
water	19:70	0:0	14	den
water	19:74	0:0	12	;
water	20:16	0:0	10	}
water	21:12	0:0	8	}
water	22:8	0:0	6	}
water	23:4	0:0	4	}
for	24:4	51:4	2	(a . num = 1 ;a . num <= 10;a . num ++)
forinit	24:9	24:18	3	a . num = 1 ;
water	24:9	0:0	4	a
op	24:10	0:0	4	.
water	24:11	0:0	4	num
op	24:15	0:0	4	=
water	24:17	0:0	4	1
water	24:18	0:0	4	;
cond	24:20	24:29	3	a . num <= 10
water	24:20	0:0	4	a
op	24:21	0:0	4	.
water	24:22	0:0	4	num
op	24:26	0:0	4	<=
water	24:29	0:0	4	10
forexpr	24:33	24:38	3	a . num ++
water	24:33	0:0	4	a
op	24:34	0:0	4	.
water	24:35	0:0	4	num
op	24:38	0:0	4	++
stmts	24:42	51:4	3	
water	24:42	0:0	4	{
for	25:8	50:8	4	(a . den = 1 ;a . den <= 10;a . den ++)
forinit	25:13	25:22	5	a . den = 1 ;
water	25:13	0:0	6	a
op	25:14	0:0	6	.
water	25:15	0:0	6	den
op	25:19	0:0	6	=
water	25:21	0:0	6	1
water	25:22	0:0	6	;
cond	25:24	25:33	5	a . den <= 10
water	25:24	0:0	6	a
op	25:25	0:0	6	.
water	25:26	0:0	6	den
op	25:30	0:0	6	<=
water	25:33	0:0	6	10
forexpr	25:37	25:42	5	a . den ++
water	25:37	0:0	6	a
op	25:38	0:0	6	.
water	25:39	0:0	6	den
op	25:42	0:0	6	++
stmts	25:46	50:8	5	
water	25:46	0:0	6	{
if	26:12	27:24	6	(av_gcd (a . num ,a . den ) > 1)
cond	26:16	26:39	7	av_gcd (a . num ,a . den ) > 1
call	26:16	26:35	8	av_gcd
arg	26:23	26:28	9	a.num
water	26:23	0:0	10	a
op	26:24	0:0	10	.
water	26:25	0:0	10	num
arg	26:30	26:35	9	a.den
water	26:30	0:0	10	a
op	26:31	0:0	10	.
water	26:32	0:0	10	den
op	26:37	0:0	8	>
water	26:39	0:0	8	1
stmts	27:16	27:24	7	
continue	27:16	27:24	8	
for	28:12	49:12	6	(b . num = 1 ;b . num <= 10;b . num ++)
forinit	28:17	28:26	7	b . num = 1 ;
water	28:17	0:0	8	b
op	28:18	0:0	8	.
water	28:19	0:0	8	num
op	28:23	0:0	8	=
water	28:25	0:0	8	1
water	28:26	0:0	8	;
cond	28:28	28:37	7	b . num <= 10
water	28:28	0:0	8	b
op	28:29	0:0	8	.
water	28:30	0:0	8	num
op	28:34	0:0	8	<=
water	28:37	0:0	8	10
forexpr	28:41	28:46	7	b . num ++
water	28:41	0:0	8	b
op	28:42	0:0	8	.
water	28:43	0:0	8	num
op	28:46	0:0	8	++
stmts	28:50	49:12	7	
water	28:50	0:0	8	{
for	29:16	48:16	8	(b . den = 1 ;b . den <= 10;b . den ++)
forinit	29:21	29:30	9	b . den = 1 ;
water	29:21	0:0	10	b
op	29:22	0:0	10	.
water	29:23	0:0	10	den
op	29:27	0:0	10	=
water	29:29	0:0	10	1
water	29:30	0:0	10	;
cond	29:32	29:41	9	b . den <= 10
water	29:32	0:0	10	b
op	29:33	0:0	10	.
water	29:34	0:0	10	den
op	29:38	0:0	10	<=
water	29:41	0:0	10	10
forexpr	29:45	29:50	9	b . den ++
water	29:45	0:0	10	b
op	29:46	0:0	10	.
water	29:47	0:0	10	den
op	29:50	0:0	10	++
stmts	29:54	48:16	9	
water	29:54	0:0	10	{
decl	30:20	30:29	10	int	start
if	31:20	32:32	10	(av_gcd (b . num ,b . den ) > 1)
cond	31:24	31:47	11	av_gcd (b . num ,b . den ) > 1
call	31:24	31:43	12	av_gcd
arg	31:31	31:36	13	b.num
water	31:31	0:0	14	b
op	31:32	0:0	14	.
water	31:33	0:0	14	num
arg	31:38	31:43	13	b.den
water	31:38	0:0	14	b
op	31:39	0:0	14	.
water	31:40	0:0	14	den
op	31:45	0:0	12	>
water	31:47	0:0	12	1
stmts	32:24	32:32	11	
continue	32:24	32:32	12	
if	33:20	34:32	10	(av_cmp_q (b ,a ) < 0)
cond	33:24	33:41	11	av_cmp_q (b ,a ) < 0
call	33:24	33:37	12	av_cmp_q
arg	33:33	33:34	13	b
water	33:33	0:0	14	b
arg	33:36	33:37	13	a
water	33:36	0:0	14	a
op	33:39	0:0	12	<
water	33:41	0:0	12	0
stmts	34:24	34:32	11	
continue	34:24	34:32	12	
for	35:20	47:20	10	(start = 0 ;start < 10;start ++)
forinit	35:25	35:34	11	start = 0 ;
water	35:25	0:0	12	start
op	35:31	0:0	12	=
water	35:33	0:0	12	0
water	35:34	0:0	12	;
cond	35:36	35:44	11	start < 10
water	35:36	0:0	12	start
op	35:42	0:0	12	<
water	35:44	0:0	12	10
forexpr	35:49	35:54	11	start ++
water	35:49	0:0	12	start
op	35:54	0:0	12	++
stmts	35:58	47:20	11	
water	35:58	0:0	12	{
decl	36:24	36:38	12	int	acc
op	36:31	0:0	12	=
water	36:33	0:0	12	start
decl	37:24	37:29	12	int	i
for	38:24	46:24	12	(i = 0 ;i < 100;i ++)
forinit	38:29	38:34	13	i = 0 ;
water	38:29	0:0	14	i
op	38:31	0:0	14	=
water	38:33	0:0	14	0
water	38:34	0:0	14	;
cond	38:36	38:38	13	i < 100
water	38:36	0:0	14	i
op	38:37	0:0	14	<
water	38:38	0:0	14	100
forexpr	38:43	38:44	13	i ++
water	38:43	0:0	14	i
op	38:44	0:0	14	++
stmts	38:48	46:24	13	
water	38:48	0:0	14	{
decl	39:28	39:71	14	int	exact
op	39:38	0:0	14	=
water	39:40	0:0	14	start
op	39:46	0:0	14	+
call	39:48	39:70	15	av_rescale_q
arg	39:61	39:64	16	i+1
water	39:61	0:0	17	i
op	39:62	0:0	17	+
water	39:63	0:0	17	1
arg	39:66	39:67	16	b
water	39:66	0:0	17	b
arg	39:69	39:70	16	a
water	39:69	0:0	17	a
water	40:28	0:0	14	acc
op	40:32	0:0	14	=
call	40:34	40:60	14	av_add_stable
arg	40:48	40:49	15	a
water	40:48	0:0	16	a
arg	40:51	40:54	15	acc
water	40:51	0:0	16	acc
arg	40:56	40:57	15	b
water	40:56	0:0	16	b
arg	40:59	40:60	15	1
water	40:59	0:0	16	1
water	40:61	0:0	14	;
if	41:28	45:28	14	(FFABS (acc - exact ) > 2)
cond	41:32	41:53	15	FFABS (acc - exact ) > 2
call	41:32	41:49	16	FFABS
arg	41:38	41:49	17	acc-exact
water	41:38	0:0	18	acc
op	41:42	0:0	18	-
water	41:44	0:0	18	exact
op	41:51	0:0	16	>
water	41:53	0:0	16	2
stmts	41:56	45:28	15	
water	41:56	0:0	16	{
call	42:32	43:70	16	av_log
arg	42:39	42:43	17	NULL
water	42:39	0:0	18	NULL
arg	42:45	42:57	17	AV_LOG_ERROR
water	42:45	0:0	18	AV_LOG_ERROR
arg	42:59	42:81	17	"%d/%d %d/%d, %d %d\n"
water	42:59	0:0	18	"%d/%d %d/%d, %d %d\n"
arg	42:83	42:88	17	a.num
water	42:83	0:0	18	a
op	42:84	0:0	18	.
water	42:85	0:0	18	num
arg	43:39	43:44	17	a.den
water	43:39	0:0	18	a
op	43:40	0:0	18	.
water	43:41	0:0	18	den
arg	43:46	43:51	17	b.num
water	43:46	0:0	18	b
op	43:47	0:0	18	.
water	43:48	0:0	18	num
arg	43:53	43:58	17	b.den
water	43:53	0:0	18	b
op	43:54	0:0	18	.
water	43:55	0:0	18	den
arg	43:60	43:63	17	acc
water	43:60	0:0	18	acc
arg	43:65	43:70	17	exact
water	43:65	0:0	18	exact
water	43:71	0:0	16	;
return	44:32	44:40	16	1
water	44:39	0:0	17	1
water	45:28	0:0	16	}
water	46:24	0:0	14	}
water	47:20	0:0	12	}
water	48:16	0:0	10	}
water	49:12	0:0	8	}
water	50:8	0:0	6	}
water	51:4	0:0	4	}
for	52:4	62:4	2	(a . den = 1 ;a . den < 0 x100000000U / 3;a . den *= 3)
forinit	52:9	52:18	3	a . den = 1 ;
water	52:9	0:0	4	a
op	52:10	0:0	4	.
water	52:11	0:0	4	den
op	52:15	0:0	4	=
water	52:17	0:0	4	1
water	52:18	0:0	4	;
cond	52:20	52:41	3	a . den < 0 x100000000U / 3
water	52:20	0:0	4	a
op	52:21	0:0	4	.
water	52:22	0:0	4	den
op	52:26	0:0	4	<
water	52:28	0:0	4	0
water	52:29	0:0	4	x100000000U
op	52:40	0:0	4	/
water	52:41	0:0	4	3
forexpr	52:44	52:51	3	a . den *= 3
water	52:44	0:0	4	a
op	52:45	0:0	4	.
water	52:46	0:0	4	den
op	52:49	0:0	4	*=
water	52:51	0:0	4	3
stmts	52:54	62:4	3	
water	52:54	0:0	4	{
for	53:8	61:8	4	(a . num = - 1 ;a . num < ( 1 << 27 );a . num += 1 + a . num / 100)
forinit	53:13	53:23	5	a . num = - 1 ;
water	53:13	0:0	6	a
op	53:14	0:0	6	.
water	53:15	0:0	6	num
op	53:19	0:0	6	=
op	53:21	0:0	6	-
water	53:22	0:0	6	1
water	53:23	0:0	6	;
cond	53:25	53:39	5	a . num < ( 1 << 27 )
water	53:25	0:0	6	a
op	53:26	0:0	6	.
water	53:27	0:0	6	num
op	53:31	0:0	6	<
water	53:33	0:0	6	(
water	53:34	0:0	6	1
op	53:35	0:0	6	<<
water	53:37	0:0	6	27
water	53:39	0:0	6	)
forexpr	53:42	53:61	5	a . num += 1 + a . num / 100
water	53:42	0:0	6	a
op	53:43	0:0	6	.
water	53:44	0:0	6	num
op	53:48	0:0	6	+=
water	53:51	0:0	6	1
op	53:53	0:0	6	+
water	53:55	0:0	6	a
op	53:56	0:0	6	.
water	53:57	0:0	6	num
op	53:60	0:0	6	/
water	53:61	0:0	6	100
stmts	53:66	61:8	5	
water	53:66	0:0	6	{
decl	54:12	54:53	6	float	f
op	54:21	0:0	6	=
call	54:23	54:52	7	av_int2float
arg	54:36	54:52	8	av_q2intfloat(a)
call	54:36	54:51	9	av_q2intfloat
arg	54:50	54:51	10	a
water	54:50	0:0	11	a
decl	55:12	55:32	6	float	f2
op	55:21	0:0	6	=
call	55:23	55:31	7	av_q2d
arg	55:30	55:31	8	a
water	55:30	0:0	9	a
if	56:12	60:12	6	(fabs (f - f2 ) >fabs (f ) / 5000000)
cond	56:16	56:39	7	fabs (f - f2 ) >fabs (f ) / 5000000
call	56:16	56:27	8	fabs
arg	56:21	56:27	9	f-f2
water	56:21	0:0	10	f
op	56:23	0:0	10	-
water	56:25	0:0	10	f2
op	56:29	0:0	8	>
call	56:31	56:37	8	fabs
arg	56:36	56:37	9	f
water	56:36	0:0	10	f
op	56:38	0:0	8	/
water	56:39	0:0	8	5000000
stmts	56:48	60:12	7	
water	56:48	0:0	8	{
call	57:16	58:35	8	av_log
arg	57:23	57:27	9	NULL
water	57:23	0:0	10	NULL
arg	57:29	57:41	9	AV_LOG_ERROR
water	57:29	0:0	10	AV_LOG_ERROR
arg	57:43	57:58	9	"%d/%d %f %f\n"
water	57:43	0:0	10	"%d/%d %f %f\n"
arg	57:60	57:65	9	a.num
water	57:60	0:0	10	a
op	57:61	0:0	10	.
water	57:62	0:0	10	num
arg	58:23	58:28	9	a.den
water	58:23	0:0	10	a
op	58:24	0:0	10	.
water	58:25	0:0	10	den
arg	58:30	58:31	9	f
water	58:30	0:0	10	f
arg	58:33	58:35	9	f2
water	58:33	0:0	10	f2
water	58:36	0:0	8	;
return	59:16	59:24	8	1
water	59:23	0:0	9	1
water	60:12	0:0	8	}
water	61:8	0:0	6	}
water	62:4	0:0	4	}
return	63:4	63:12	2	0
water	63:11	0:0	3	0
