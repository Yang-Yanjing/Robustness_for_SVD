func	1:0	85:0	0	static void	filter
params	1:18	0:0	1	
param	1:19	1:33	2	USPPContext *	p
param	1:35	1:50	2	uint8_t *	dst[3]
param	1:52	1:67	2	uint8_t *	src[3]
param	2:19	2:36	2	int	dst_stride[3]
param	2:38	2:55	2	int	src_stride[3]
param	2:57	2:66	2	int	width
param	3:19	3:29	2	int	height
param	3:31	3:48	2	uint8_t *	qp_store
param	3:50	3:63	2	int	qp_stride
stmnts	0:0	84:4	1	
decl	5:4	5:18	2	int	x
water	5:9	0:0	2	,
decl	5:4	5:18	2	int	y
water	5:12	0:0	2	,
decl	5:4	5:18	2	int	i
water	5:15	0:0	2	,
decl	5:4	5:18	2	int	j
decl	6:4	6:38	2	const int	count
op	6:20	0:0	2	=
water	6:22	0:0	2	1
op	6:23	0:0	2	<<
water	6:25	0:0	2	p
op	6:26	0:0	2	->
water	6:28	0:0	2	log2_count
for	7:4	29:4	2	(i = 0 ;i < 3;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:20	3	i < 3
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	3
forexpr	7:23	7:24	3	i ++
water	7:23	0:0	4	i
op	7:24	0:0	4	++
stmts	7:28	29:4	3	
water	7:28	0:0	4	{
decl	8:8	8:27	4	int	is_chroma
op	8:22	0:0	4	=
op	8:24	0:0	4	!
op	8:25	0:0	4	!
water	8:26	0:0	4	i
decl	9:8	9:63	4	int	w
op	9:14	0:0	4	=
call	9:16	9:62	5	FF_CEIL_RSHIFT
arg	9:31	9:36	6	width
water	9:31	0:0	7	width
arg	9:39	9:62	6	is_chroma?p->hsub:0
water	9:39	0:0	7	is_chroma
water	9:49	0:0	7	?
water	9:51	0:0	7	p
op	9:52	0:0	7	->
water	9:54	0:0	7	hsub
water	9:59	0:0	7	:
water	9:61	0:0	7	0
decl	10:8	10:63	4	int	h
op	10:14	0:0	4	=
call	10:16	10:62	5	FF_CEIL_RSHIFT
arg	10:31	10:37	6	height
water	10:31	0:0	7	height
arg	10:39	10:62	6	is_chroma?p->vsub:0
water	10:39	0:0	7	is_chroma
water	10:49	0:0	7	?
water	10:51	0:0	7	p
op	10:52	0:0	7	->
water	10:54	0:0	7	vsub
water	10:59	0:0	7	:
water	10:61	0:0	7	0
decl	11:8	11:38	4	int	stride
op	11:19	0:0	4	=
water	11:21	0:0	4	p
op	11:22	0:0	4	->
water	11:24	0:0	4	temp_stride
op	11:35	0:0	4	[
water	11:36	0:0	4	i
op	11:37	0:0	4	]
decl	12:8	12:54	4	int	block
op	12:18	0:0	4	=
water	12:20	0:0	4	BLOCK
op	12:26	0:0	4	>>
water	12:29	0:0	4	(
water	12:30	0:0	4	is_chroma
water	12:40	0:0	4	?
water	12:42	0:0	4	p
op	12:43	0:0	4	->
water	12:45	0:0	4	hsub
water	12:50	0:0	4	:
water	12:52	0:0	4	0
water	12:53	0:0	4	)
if	13:8	14:20	4	(! src [ i ] || ! dst [ i ])
cond	13:12	13:29	5	! src [ i ] || ! dst [ i ]
op	13:12	0:0	6	!
water	13:13	0:0	6	src
op	13:16	0:0	6	[
water	13:17	0:0	6	i
op	13:18	0:0	6	]
op	13:20	0:0	6	||
op	13:23	0:0	6	!
water	13:24	0:0	6	dst
op	13:27	0:0	6	[
water	13:28	0:0	6	i
op	13:29	0:0	6	]
stmts	14:12	14:20	5	
continue	14:12	14:20	6	
for	15:8	22:8	4	(y = 0 ;y < h;y ++)
forinit	15:13	15:18	5	y = 0 ;
water	15:13	0:0	6	y
op	15:15	0:0	6	=
water	15:17	0:0	6	0
water	15:18	0:0	6	;
cond	15:20	15:24	5	y < h
water	15:20	0:0	6	y
op	15:22	0:0	6	<
water	15:24	0:0	6	h
forexpr	15:27	15:28	5	y ++
water	15:27	0:0	6	y
op	15:28	0:0	6	++
stmts	15:32	22:8	5	
water	15:32	0:0	6	{
decl	16:12	16:59	6	int	index
op	16:22	0:0	6	=
water	16:24	0:0	6	block
op	16:30	0:0	6	+
water	16:32	0:0	6	block
op	16:38	0:0	6	*
water	16:40	0:0	6	stride
op	16:47	0:0	6	+
water	16:49	0:0	6	y
op	16:51	0:0	6	*
water	16:53	0:0	6	stride
call	17:12	17:68	6	memcpy
arg	17:19	17:36	7	p->src[i]+index
water	17:19	0:0	8	p
op	17:20	0:0	8	->
water	17:22	0:0	8	src
op	17:25	0:0	8	[
water	17:26	0:0	8	i
op	17:27	0:0	8	]
op	17:29	0:0	8	+
water	17:31	0:0	8	index
arg	17:38	17:64	7	src[i]+y*src_stride[i]
water	17:38	0:0	8	src
op	17:41	0:0	8	[
water	17:42	0:0	8	i
op	17:43	0:0	8	]
op	17:45	0:0	8	+
water	17:47	0:0	8	y
op	17:49	0:0	8	*
water	17:51	0:0	8	src_stride
op	17:61	0:0	8	[
water	17:62	0:0	8	i
op	17:63	0:0	8	]
arg	17:66	17:68	7	w
water	17:66	0:0	8	w
water	17:69	0:0	6	;
for	18:12	21:12	6	(x = 0 ;x < block;x ++)
forinit	18:17	18:22	7	x = 0 ;
water	18:17	0:0	8	x
op	18:19	0:0	8	=
water	18:21	0:0	8	0
water	18:22	0:0	8	;
cond	18:24	18:28	7	x < block
water	18:24	0:0	8	x
op	18:26	0:0	8	<
water	18:28	0:0	8	block
forexpr	18:35	18:36	7	x ++
water	18:35	0:0	8	x
op	18:36	0:0	8	++
stmts	18:40	21:12	7	
water	18:40	0:0	8	{
water	19:16	0:0	8	p
op	19:17	0:0	8	->
water	19:19	0:0	8	src
op	19:22	0:0	8	[
water	19:23	0:0	8	i
op	19:24	0:0	8	]
op	19:25	0:0	8	[
water	19:26	0:0	8	index
op	19:36	0:0	8	-
water	19:38	0:0	8	x
op	19:40	0:0	8	-
water	19:42	0:0	8	1
op	19:43	0:0	8	]
op	19:45	0:0	8	=
water	19:47	0:0	8	p
op	19:48	0:0	8	->
water	19:50	0:0	8	src
op	19:53	0:0	8	[
water	19:54	0:0	8	i
op	19:55	0:0	8	]
op	19:56	0:0	8	[
water	19:57	0:0	8	index
op	19:63	0:0	8	+
water	19:69	0:0	8	x
op	19:74	0:0	8	]
water	19:75	0:0	8	;
water	20:16	0:0	8	p
op	20:17	0:0	8	->
water	20:19	0:0	8	src
op	20:22	0:0	8	[
water	20:23	0:0	8	i
op	20:24	0:0	8	]
op	20:25	0:0	8	[
water	20:26	0:0	8	index
op	20:32	0:0	8	+
water	20:34	0:0	8	w
op	20:36	0:0	8	+
water	20:38	0:0	8	x
op	20:43	0:0	8	]
op	20:45	0:0	8	=
water	20:47	0:0	8	p
op	20:48	0:0	8	->
water	20:50	0:0	8	src
op	20:53	0:0	8	[
water	20:54	0:0	8	i
op	20:55	0:0	8	]
op	20:56	0:0	8	[
water	20:57	0:0	8	index
op	20:63	0:0	8	+
water	20:65	0:0	8	w
op	20:67	0:0	8	-
water	20:69	0:0	8	x
op	20:71	0:0	8	-
water	20:73	0:0	8	1
op	20:74	0:0	8	]
water	20:75	0:0	8	;
water	21:12	0:0	8	}
water	22:8	0:0	6	}
for	23:8	26:8	4	(y = 0 ;y < block;y ++)
forinit	23:13	23:18	5	y = 0 ;
water	23:13	0:0	6	y
op	23:15	0:0	6	=
water	23:17	0:0	6	0
water	23:18	0:0	6	;
cond	23:20	23:24	5	y < block
water	23:20	0:0	6	y
op	23:22	0:0	6	<
water	23:24	0:0	6	block
forexpr	23:31	23:32	5	y ++
water	23:31	0:0	6	y
op	23:32	0:0	6	++
stmts	23:36	26:8	5	
water	23:36	0:0	6	{
call	24:12	24:97	6	memcpy
arg	24:19	24:53	7	p->src[i]+(block-1-y)*stride
water	24:19	0:0	8	p
op	24:20	0:0	8	->
water	24:22	0:0	8	src
op	24:25	0:0	8	[
water	24:26	0:0	8	i
op	24:27	0:0	8	]
op	24:29	0:0	8	+
water	24:31	0:0	8	(
water	24:34	0:0	8	block
op	24:39	0:0	8	-
water	24:40	0:0	8	1
op	24:41	0:0	8	-
water	24:42	0:0	8	y
water	24:43	0:0	8	)
op	24:45	0:0	8	*
water	24:47	0:0	8	stride
arg	24:55	24:89	7	p->src[i]+(y+block)*stride
water	24:55	0:0	8	p
op	24:56	0:0	8	->
water	24:58	0:0	8	src
op	24:61	0:0	8	[
water	24:62	0:0	8	i
op	24:63	0:0	8	]
op	24:65	0:0	8	+
water	24:67	0:0	8	(
water	24:70	0:0	8	y
op	24:71	0:0	8	+
water	24:72	0:0	8	block
water	24:79	0:0	8	)
op	24:81	0:0	8	*
water	24:83	0:0	8	stride
arg	24:91	24:97	7	stride
water	24:91	0:0	8	stride
water	24:98	0:0	6	;
call	25:12	25:97	6	memcpy
arg	25:19	25:53	7	p->src[i]+(h+block+y)*stride
water	25:19	0:0	8	p
op	25:20	0:0	8	->
water	25:22	0:0	8	src
op	25:25	0:0	8	[
water	25:26	0:0	8	i
op	25:27	0:0	8	]
op	25:29	0:0	8	+
water	25:31	0:0	8	(
water	25:32	0:0	8	h
op	25:33	0:0	8	+
water	25:34	0:0	8	block
op	25:41	0:0	8	+
water	25:42	0:0	8	y
water	25:43	0:0	8	)
op	25:45	0:0	8	*
water	25:47	0:0	8	stride
arg	25:55	25:89	7	p->src[i]+(h-y+block-1)*stride
water	25:55	0:0	8	p
op	25:56	0:0	8	->
water	25:58	0:0	8	src
op	25:61	0:0	8	[
water	25:62	0:0	8	i
op	25:63	0:0	8	]
op	25:65	0:0	8	+
water	25:67	0:0	8	(
water	25:68	0:0	8	h
op	25:69	0:0	8	-
water	25:70	0:0	8	y
op	25:71	0:0	8	+
water	25:72	0:0	8	block
op	25:77	0:0	8	-
water	25:78	0:0	8	1
water	25:79	0:0	8	)
op	25:81	0:0	8	*
water	25:83	0:0	8	stride
arg	25:91	25:97	7	stride
water	25:91	0:0	8	stride
water	25:98	0:0	6	;
water	26:8	0:0	6	}
water	27:8	0:0	4	p
op	27:9	0:0	4	->
water	27:11	0:0	4	frame
op	27:16	0:0	4	->
water	27:18	0:0	4	linesize
op	27:26	0:0	4	[
water	27:27	0:0	4	i
op	27:28	0:0	4	]
op	27:30	0:0	4	=
water	27:32	0:0	4	stride
water	27:38	0:0	4	;
call	28:8	28:72	4	memset
arg	28:15	28:25	5	p->temp[i]
water	28:15	0:0	6	p
op	28:16	0:0	6	->
water	28:18	0:0	6	temp
op	28:22	0:0	6	[
water	28:23	0:0	6	i
op	28:24	0:0	6	]
arg	28:27	28:28	5	0
water	28:27	0:0	6	0
arg	28:30	28:72	5	(h+2*block)*stride*sizeof(int16_t)
water	28:30	0:0	6	(
water	28:31	0:0	6	h
op	28:33	0:0	6	+
water	28:35	0:0	6	2
op	28:37	0:0	6	*
water	28:39	0:0	6	block
water	28:44	0:0	6	)
op	28:46	0:0	6	*
water	28:48	0:0	6	stride
op	28:55	0:0	6	*
op	28:57	0:0	6	sizeof
water	28:63	0:0	6	(
water	28:64	0:0	6	int16_t
water	28:71	0:0	6	)
water	28:73	0:0	4	;
water	29:4	0:0	4	}
if	30:4	31:48	2	(p -> qp)
cond	30:8	30:11	3	p -> qp
water	30:8	0:0	4	p
op	30:9	0:0	4	->
water	30:11	0:0	4	qp
stmts	31:8	31:48	3	
water	31:8	0:0	4	p
op	31:9	0:0	4	->
water	31:11	0:0	4	frame
op	31:16	0:0	4	->
water	31:18	0:0	4	quality
op	31:26	0:0	4	=
water	31:28	0:0	4	p
op	31:29	0:0	4	->
water	31:31	0:0	4	qp
op	31:34	0:0	4	*
water	31:36	0:0	4	FF_QP2LAMBDA
water	31:48	0:0	4	;
else	32:4	40:4	2
stmts	32:9	40:4	3	
water	32:9	0:0	4	{
decl	33:8	33:19	4	int	qpsum
op	33:17	0:0	4	=
water	33:18	0:0	4	0
decl	34:8	34:47	4	int	qpcount
op	34:20	0:0	4	=
water	34:22	0:0	4	(
water	34:23	0:0	4	height
op	34:29	0:0	4	>>
water	34:31	0:0	4	4
water	34:32	0:0	4	)
op	34:34	0:0	4	*
water	34:36	0:0	4	(
water	34:37	0:0	4	height
op	34:43	0:0	4	>>
water	34:45	0:0	4	4
water	34:46	0:0	4	)
for	35:8	38:8	4	(y = 0 ;y < ( height >> 4 );y ++)
forinit	35:13	35:18	5	y = 0 ;
water	35:13	0:0	6	y
op	35:15	0:0	6	=
water	35:17	0:0	6	0
water	35:18	0:0	6	;
cond	35:20	35:34	5	y < ( height >> 4 )
water	35:20	0:0	6	y
op	35:22	0:0	6	<
water	35:24	0:0	6	(
water	35:25	0:0	6	height
op	35:31	0:0	6	>>
water	35:33	0:0	6	4
water	35:34	0:0	6	)
forexpr	35:37	35:38	5	y ++
water	35:37	0:0	6	y
op	35:38	0:0	6	++
stmts	35:42	38:8	5	
water	35:42	0:0	6	{
for	36:12	37:52	6	(x = 0 ;x < ( width >> 4 );x ++)
forinit	36:17	36:22	7	x = 0 ;
water	36:17	0:0	8	x
op	36:19	0:0	8	=
water	36:21	0:0	8	0
water	36:22	0:0	8	;
cond	36:24	36:37	7	x < ( width >> 4 )
water	36:24	0:0	8	x
op	36:26	0:0	8	<
water	36:28	0:0	8	(
water	36:29	0:0	8	width
op	36:34	0:0	8	>>
water	36:36	0:0	8	4
water	36:37	0:0	8	)
forexpr	36:40	36:41	7	x ++
water	36:40	0:0	8	x
op	36:41	0:0	8	++
stmts	37:16	37:52	7	
water	37:16	0:0	8	qpsum
op	37:22	0:0	8	+=
water	37:25	0:0	8	qp_store
op	37:33	0:0	8	[
water	37:34	0:0	8	x
op	37:36	0:0	8	+
water	37:38	0:0	8	y
op	37:40	0:0	8	*
water	37:42	0:0	8	qp_stride
op	37:51	0:0	8	]
water	37:52	0:0	8	;
water	38:8	0:0	6	}
water	39:8	0:0	4	p
op	39:9	0:0	4	->
water	39:11	0:0	4	frame
op	39:16	0:0	4	->
water	39:18	0:0	4	quality
op	39:26	0:0	4	=
call	39:28	39:88	4	ff_norm_qscale
arg	39:43	39:72	5	(qpsum+qpcount/2)/qpcount
water	39:43	0:0	6	(
water	39:44	0:0	6	qpsum
op	39:50	0:0	6	+
water	39:52	0:0	6	qpcount
op	39:59	0:0	6	/
water	39:60	0:0	6	2
water	39:61	0:0	6	)
op	39:63	0:0	6	/
water	39:65	0:0	6	qpcount
arg	39:74	39:88	5	p->qscale_type
water	39:74	0:0	6	p
op	39:75	0:0	6	->
water	39:77	0:0	6	qscale_type
op	39:90	0:0	4	*
water	39:92	0:0	4	FF_QP2LAMBDA
water	39:104	0:0	4	;
water	40:4	0:0	4	}
water	42:4	0:0	2	p
op	42:5	0:0	2	->
water	42:7	0:0	2	frame
op	42:12	0:0	2	->
water	42:14	0:0	2	height
op	42:21	0:0	2	=
water	42:23	0:0	2	height
water	42:29	0:0	2	;
water	43:4	0:0	2	p
op	43:5	0:0	2	->
water	43:7	0:0	2	frame
op	43:12	0:0	2	->
water	43:14	0:0	2	width
op	43:21	0:0	2	=
water	43:23	0:0	2	width
water	43:28	0:0	2	;
for	44:4	75:4	2	(i = 0 ;i < count;i ++)
forinit	44:9	44:14	3	i = 0 ;
water	44:9	0:0	4	i
op	44:11	0:0	4	=
water	44:13	0:0	4	0
water	44:14	0:0	4	;
cond	44:16	44:20	3	i < count
water	44:16	0:0	4	i
op	44:18	0:0	4	<
water	44:20	0:0	4	count
forexpr	44:27	44:28	3	i ++
water	44:27	0:0	4	i
op	44:28	0:0	4	++
stmts	44:32	75:4	3	
water	44:32	0:0	4	{
decl	45:8	45:43	4	const int	x1
op	45:21	0:0	4	=
water	45:23	0:0	4	offset
op	45:29	0:0	4	[
water	45:30	0:0	4	i
op	45:31	0:0	4	+
water	45:32	0:0	4	count
op	45:37	0:0	4	-
water	45:38	0:0	4	1
op	45:39	0:0	4	]
op	45:40	0:0	4	[
water	45:41	0:0	4	0
op	45:42	0:0	4	]
decl	46:8	46:43	4	const int	y1
op	46:21	0:0	4	=
water	46:23	0:0	4	offset
op	46:29	0:0	4	[
water	46:30	0:0	4	i
op	46:31	0:0	4	+
water	46:32	0:0	4	count
op	46:37	0:0	4	-
water	46:38	0:0	4	1
op	46:39	0:0	4	]
op	46:40	0:0	4	[
water	46:41	0:0	4	1
op	46:42	0:0	4	]
decl	47:8	47:37	4	const int	x1c
op	47:22	0:0	4	=
water	47:24	0:0	4	x1
op	47:27	0:0	4	>>
water	47:30	0:0	4	p
op	47:31	0:0	4	->
water	47:33	0:0	4	hsub
decl	48:8	48:37	4	const int	y1c
op	48:22	0:0	4	=
water	48:24	0:0	4	y1
op	48:27	0:0	4	>>
water	48:30	0:0	4	p
op	48:31	0:0	4	->
water	48:33	0:0	4	vsub
decl	49:8	49:43	4	const int	BLOCKc
op	49:25	0:0	4	=
water	49:27	0:0	4	BLOCK
op	49:33	0:0	4	>>
water	49:36	0:0	4	p
op	49:37	0:0	4	->
water	49:39	0:0	4	hsub
decl	50:8	50:18	4	int	offset
decl	51:8	51:26	4	AVPacket	pkt
op	51:21	0:0	4	=
water	51:23	0:0	4	{
water	51:24	0:0	4	0
water	51:25	0:0	4	}
decl	52:8	52:23	4	int	got_pkt_ptr
call	53:8	53:27	4	av_init_packet
arg	53:23	53:27	5	&pkt
op	53:23	0:0	6	&
water	53:24	0:0	6	pkt
water	53:28	0:0	4	;
water	54:8	0:0	4	pkt
op	54:11	0:0	4	.
water	54:12	0:0	4	data
op	54:17	0:0	4	=
water	54:19	0:0	4	p
op	54:20	0:0	4	->
water	54:22	0:0	4	outbuf
water	54:28	0:0	4	;
water	55:8	0:0	4	pkt
op	55:11	0:0	4	.
water	55:12	0:0	4	size
op	55:17	0:0	4	=
water	55:19	0:0	4	p
op	55:20	0:0	4	->
water	55:22	0:0	4	outbuf_size
water	55:33	0:0	4	;
water	56:8	0:0	4	p
op	56:9	0:0	4	->
water	56:11	0:0	4	frame
op	56:16	0:0	4	->
water	56:18	0:0	4	data
op	56:22	0:0	4	[
water	56:23	0:0	4	0
op	56:24	0:0	4	]
op	56:26	0:0	4	=
water	56:28	0:0	4	p
op	56:29	0:0	4	->
water	56:31	0:0	4	src
op	56:34	0:0	4	[
water	56:35	0:0	4	0
op	56:36	0:0	4	]
op	56:38	0:0	4	+
water	56:40	0:0	4	x1
op	56:45	0:0	4	+
water	56:47	0:0	4	y1
op	56:52	0:0	4	*
water	56:54	0:0	4	p
op	56:55	0:0	4	->
water	56:57	0:0	4	frame
op	56:62	0:0	4	->
water	56:64	0:0	4	linesize
op	56:72	0:0	4	[
water	56:73	0:0	4	0
op	56:74	0:0	4	]
water	56:75	0:0	4	;
water	57:8	0:0	4	p
op	57:9	0:0	4	->
water	57:11	0:0	4	frame
op	57:16	0:0	4	->
water	57:18	0:0	4	data
op	57:22	0:0	4	[
water	57:23	0:0	4	1
op	57:24	0:0	4	]
op	57:26	0:0	4	=
water	57:28	0:0	4	p
op	57:29	0:0	4	->
water	57:31	0:0	4	src
op	57:34	0:0	4	[
water	57:35	0:0	4	1
op	57:36	0:0	4	]
op	57:38	0:0	4	+
water	57:40	0:0	4	x1c
op	57:45	0:0	4	+
water	57:47	0:0	4	y1c
op	57:52	0:0	4	*
water	57:54	0:0	4	p
op	57:55	0:0	4	->
water	57:57	0:0	4	frame
op	57:62	0:0	4	->
water	57:64	0:0	4	linesize
op	57:72	0:0	4	[
water	57:73	0:0	4	1
op	57:74	0:0	4	]
water	57:75	0:0	4	;
water	58:8	0:0	4	p
op	58:9	0:0	4	->
water	58:11	0:0	4	frame
op	58:16	0:0	4	->
water	58:18	0:0	4	data
op	58:22	0:0	4	[
water	58:23	0:0	4	2
op	58:24	0:0	4	]
op	58:26	0:0	4	=
water	58:28	0:0	4	p
op	58:29	0:0	4	->
water	58:31	0:0	4	src
op	58:34	0:0	4	[
water	58:35	0:0	4	2
op	58:36	0:0	4	]
op	58:38	0:0	4	+
water	58:40	0:0	4	x1c
op	58:45	0:0	4	+
water	58:47	0:0	4	y1c
op	58:52	0:0	4	*
water	58:54	0:0	4	p
op	58:55	0:0	4	->
water	58:57	0:0	4	frame
op	58:62	0:0	4	->
water	58:64	0:0	4	linesize
op	58:72	0:0	4	[
water	58:73	0:0	4	2
op	58:74	0:0	4	]
water	58:75	0:0	4	;
water	59:8	0:0	4	p
op	59:9	0:0	4	->
water	59:11	0:0	4	frame
op	59:16	0:0	4	->
water	59:18	0:0	4	format
op	59:26	0:0	4	=
water	59:28	0:0	4	p
op	59:29	0:0	4	->
water	59:31	0:0	4	avctx_enc
op	59:40	0:0	4	[
water	59:41	0:0	4	i
op	59:42	0:0	4	]
op	59:43	0:0	4	->
water	59:45	0:0	4	pix_fmt
water	59:52	0:0	4	;
call	60:8	60:75	4	avcodec_encode_video2
arg	60:30	60:45	5	p->avctx_enc[i]
water	60:30	0:0	6	p
op	60:31	0:0	6	->
water	60:33	0:0	6	avctx_enc
op	60:42	0:0	6	[
water	60:43	0:0	6	i
op	60:44	0:0	6	]
arg	60:47	60:51	5	&pkt
op	60:47	0:0	6	&
water	60:48	0:0	6	pkt
arg	60:53	60:61	5	p->frame
water	60:53	0:0	6	p
op	60:54	0:0	6	->
water	60:56	0:0	6	frame
arg	60:63	60:75	5	&got_pkt_ptr
op	60:63	0:0	6	&
water	60:64	0:0	6	got_pkt_ptr
water	60:76	0:0	4	;
water	61:8	0:0	4	p
op	61:9	0:0	4	->
water	61:11	0:0	4	frame_dec
op	61:21	0:0	4	=
water	61:23	0:0	4	p
op	61:24	0:0	4	->
water	61:26	0:0	4	avctx_enc
op	61:35	0:0	4	[
water	61:36	0:0	4	i
op	61:37	0:0	4	]
op	61:38	0:0	4	->
water	61:40	0:0	4	coded_frame
water	61:51	0:0	4	;
water	62:8	0:0	4	offset
op	62:15	0:0	4	=
water	62:17	0:0	4	(
water	62:18	0:0	4	BLOCK
op	62:23	0:0	4	-
water	62:24	0:0	4	x1
water	62:26	0:0	4	)
op	62:28	0:0	4	+
water	62:30	0:0	4	(
water	62:31	0:0	4	BLOCK
op	62:36	0:0	4	-
water	62:37	0:0	4	y1
water	62:39	0:0	4	)
op	62:41	0:0	4	*
water	62:43	0:0	4	p
op	62:44	0:0	4	->
water	62:46	0:0	4	frame_dec
op	62:55	0:0	4	->
water	62:57	0:0	4	linesize
op	62:65	0:0	4	[
water	62:66	0:0	4	0
op	62:67	0:0	4	]
water	62:68	0:0	4	;
for	63:8	65:122	4	(y = 0 ;y < height;y ++)
forinit	63:13	63:18	5	y = 0 ;
water	63:13	0:0	6	y
op	63:15	0:0	6	=
water	63:17	0:0	6	0
water	63:18	0:0	6	;
cond	63:20	63:24	5	y < height
water	63:20	0:0	6	y
op	63:22	0:0	6	<
water	63:24	0:0	6	height
forexpr	63:32	63:33	5	y ++
water	63:32	0:0	6	y
op	63:33	0:0	6	++
stmts	64:12	65:122	5	
for	64:12	65:122	6	(x = 0 ;x < width;x ++)
forinit	64:17	64:22	7	x = 0 ;
water	64:17	0:0	8	x
op	64:19	0:0	8	=
water	64:21	0:0	8	0
water	64:22	0:0	8	;
cond	64:24	64:28	7	x < width
water	64:24	0:0	8	x
op	64:26	0:0	8	<
water	64:28	0:0	8	width
forexpr	64:35	64:36	7	x ++
water	64:35	0:0	8	x
op	64:36	0:0	8	++
stmts	65:16	65:122	7	
water	65:16	0:0	8	p
op	65:17	0:0	8	->
water	65:19	0:0	8	temp
op	65:23	0:0	8	[
water	65:24	0:0	8	0
op	65:25	0:0	8	]
op	65:26	0:0	8	[
water	65:27	0:0	8	x
op	65:29	0:0	8	+
water	65:31	0:0	8	y
op	65:33	0:0	8	*
water	65:35	0:0	8	p
op	65:36	0:0	8	->
water	65:38	0:0	8	temp_stride
op	65:49	0:0	8	[
water	65:50	0:0	8	0
op	65:51	0:0	8	]
op	65:52	0:0	8	]
op	65:54	0:0	8	+=
water	65:57	0:0	8	p
op	65:58	0:0	8	->
water	65:60	0:0	8	frame_dec
op	65:69	0:0	8	->
water	65:71	0:0	8	data
op	65:75	0:0	8	[
water	65:76	0:0	8	0
op	65:77	0:0	8	]
op	65:78	0:0	8	[
water	65:79	0:0	8	x
op	65:81	0:0	8	+
water	65:83	0:0	8	y
op	65:85	0:0	8	*
water	65:87	0:0	8	p
op	65:88	0:0	8	->
water	65:90	0:0	8	frame_dec
op	65:99	0:0	8	->
water	65:101	0:0	8	linesize
op	65:109	0:0	8	[
water	65:110	0:0	8	0
op	65:111	0:0	8	]
op	65:113	0:0	8	+
water	65:115	0:0	8	offset
op	65:121	0:0	8	]
water	65:122	0:0	8	;
if	66:8	67:20	4	(! src [ 2 ] || ! dst [ 2 ])
cond	66:12	66:29	5	! src [ 2 ] || ! dst [ 2 ]
op	66:12	0:0	6	!
water	66:13	0:0	6	src
op	66:16	0:0	6	[
water	66:17	0:0	6	2
op	66:18	0:0	6	]
op	66:20	0:0	6	||
op	66:23	0:0	6	!
water	66:24	0:0	6	dst
op	66:27	0:0	6	[
water	66:28	0:0	6	2
op	66:29	0:0	6	]
stmts	67:12	67:20	5	
continue	67:12	67:20	6	
water	68:8	0:0	4	offset
op	68:15	0:0	4	=
water	68:17	0:0	4	(
water	68:18	0:0	4	BLOCKc
op	68:24	0:0	4	-
water	68:25	0:0	4	x1c
water	68:28	0:0	4	)
op	68:30	0:0	4	+
water	68:32	0:0	4	(
water	68:33	0:0	4	BLOCKc
op	68:39	0:0	4	-
water	68:40	0:0	4	y1c
water	68:43	0:0	4	)
op	68:45	0:0	4	*
water	68:47	0:0	4	p
op	68:48	0:0	4	->
water	68:50	0:0	4	frame_dec
op	68:59	0:0	4	->
water	68:61	0:0	4	linesize
op	68:69	0:0	4	[
water	68:70	0:0	4	1
op	68:71	0:0	4	]
water	68:72	0:0	4	;
for	69:8	74:8	4	(y = 0 ;y <FF_CEIL_RSHIFT (height ,p -> vsub );y ++)
forinit	69:13	69:18	5	y = 0 ;
water	69:13	0:0	6	y
op	69:15	0:0	6	=
water	69:17	0:0	6	0
water	69:18	0:0	6	;
cond	69:20	69:54	5	y <FF_CEIL_RSHIFT (height ,p -> vsub )
water	69:20	0:0	6	y
op	69:22	0:0	6	<
call	69:24	69:54	6	FF_CEIL_RSHIFT
arg	69:39	69:45	7	height
water	69:39	0:0	8	height
arg	69:47	69:54	7	p->vsub
water	69:47	0:0	8	p
op	69:48	0:0	8	->
water	69:50	0:0	8	vsub
forexpr	69:57	69:58	5	y ++
water	69:57	0:0	6	y
op	69:58	0:0	6	++
stmts	69:62	74:8	5	
water	69:62	0:0	6	{
for	70:12	73:12	6	(x = 0 ;x <FF_CEIL_RSHIFT (width ,p -> hsub );x ++)
forinit	70:17	70:22	7	x = 0 ;
water	70:17	0:0	8	x
op	70:19	0:0	8	=
water	70:21	0:0	8	0
water	70:22	0:0	8	;
cond	70:24	70:57	7	x <FF_CEIL_RSHIFT (width ,p -> hsub )
water	70:24	0:0	8	x
op	70:26	0:0	8	<
call	70:28	70:57	8	FF_CEIL_RSHIFT
arg	70:43	70:48	9	width
water	70:43	0:0	10	width
arg	70:50	70:57	9	p->hsub
water	70:50	0:0	10	p
op	70:51	0:0	10	->
water	70:53	0:0	10	hsub
forexpr	70:60	70:61	7	x ++
water	70:60	0:0	8	x
op	70:61	0:0	8	++
stmts	70:65	73:12	7	
water	70:65	0:0	8	{
water	71:16	0:0	8	p
op	71:17	0:0	8	->
water	71:19	0:0	8	temp
op	71:23	0:0	8	[
water	71:24	0:0	8	1
op	71:25	0:0	8	]
op	71:26	0:0	8	[
water	71:27	0:0	8	x
op	71:29	0:0	8	+
water	71:31	0:0	8	y
op	71:33	0:0	8	*
water	71:35	0:0	8	p
op	71:36	0:0	8	->
water	71:38	0:0	8	temp_stride
op	71:49	0:0	8	[
water	71:50	0:0	8	1
op	71:51	0:0	8	]
op	71:52	0:0	8	]
op	71:54	0:0	8	+=
water	71:57	0:0	8	p
op	71:58	0:0	8	->
water	71:60	0:0	8	frame_dec
op	71:69	0:0	8	->
water	71:71	0:0	8	data
op	71:75	0:0	8	[
water	71:76	0:0	8	1
op	71:77	0:0	8	]
op	71:78	0:0	8	[
water	71:79	0:0	8	x
op	71:81	0:0	8	+
water	71:83	0:0	8	y
op	71:85	0:0	8	*
water	71:87	0:0	8	p
op	71:88	0:0	8	->
water	71:90	0:0	8	frame_dec
op	71:99	0:0	8	->
water	71:101	0:0	8	linesize
op	71:109	0:0	8	[
water	71:110	0:0	8	1
op	71:111	0:0	8	]
op	71:113	0:0	8	+
water	71:115	0:0	8	offset
op	71:121	0:0	8	]
water	71:122	0:0	8	;
water	72:16	0:0	8	p
op	72:17	0:0	8	->
water	72:19	0:0	8	temp
op	72:23	0:0	8	[
water	72:24	0:0	8	2
op	72:25	0:0	8	]
op	72:26	0:0	8	[
water	72:27	0:0	8	x
op	72:29	0:0	8	+
water	72:31	0:0	8	y
op	72:33	0:0	8	*
water	72:35	0:0	8	p
op	72:36	0:0	8	->
water	72:38	0:0	8	temp_stride
op	72:49	0:0	8	[
water	72:50	0:0	8	2
op	72:51	0:0	8	]
op	72:52	0:0	8	]
op	72:54	0:0	8	+=
water	72:57	0:0	8	p
op	72:58	0:0	8	->
water	72:60	0:0	8	frame_dec
op	72:69	0:0	8	->
water	72:71	0:0	8	data
op	72:75	0:0	8	[
water	72:76	0:0	8	2
op	72:77	0:0	8	]
op	72:78	0:0	8	[
water	72:79	0:0	8	x
op	72:81	0:0	8	+
water	72:83	0:0	8	y
op	72:85	0:0	8	*
water	72:87	0:0	8	p
op	72:88	0:0	8	->
water	72:90	0:0	8	frame_dec
op	72:99	0:0	8	->
water	72:101	0:0	8	linesize
op	72:109	0:0	8	[
water	72:110	0:0	8	2
op	72:111	0:0	8	]
op	72:113	0:0	8	+
water	72:115	0:0	8	offset
op	72:121	0:0	8	]
water	72:122	0:0	8	;
water	73:12	0:0	8	}
water	74:8	0:0	6	}
water	75:4	0:0	4	}
for	76:4	84:4	2	(j = 0 ;j < 3;j ++)
forinit	76:9	76:14	3	j = 0 ;
water	76:9	0:0	4	j
op	76:11	0:0	4	=
water	76:13	0:0	4	0
water	76:14	0:0	4	;
cond	76:16	76:20	3	j < 3
water	76:16	0:0	4	j
op	76:18	0:0	4	<
water	76:20	0:0	4	3
forexpr	76:23	76:24	3	j ++
water	76:23	0:0	4	j
op	76:24	0:0	4	++
stmts	76:28	84:4	3	
water	76:28	0:0	4	{
decl	77:8	77:27	4	int	is_chroma
op	77:22	0:0	4	=
op	77:24	0:0	4	!
op	77:25	0:0	4	!
water	77:26	0:0	4	j
if	78:8	79:20	4	(! dst [ j ])
cond	78:12	78:18	5	! dst [ j ]
op	78:12	0:0	6	!
water	78:13	0:0	6	dst
op	78:16	0:0	6	[
water	78:17	0:0	6	j
op	78:18	0:0	6	]
stmts	79:12	79:20	5	
continue	79:12	79:20	6	
call	80:8	83:37	4	store_slice_c
arg	80:22	80:28	5	dst[j]
water	80:22	0:0	6	dst
op	80:25	0:0	6	[
water	80:26	0:0	6	j
op	80:27	0:0	6	]
arg	80:30	80:40	5	p->temp[j]
water	80:30	0:0	6	p
op	80:31	0:0	6	->
water	80:33	0:0	6	temp
op	80:37	0:0	6	[
water	80:38	0:0	6	j
op	80:39	0:0	6	]
arg	80:42	80:55	5	dst_stride[j]
water	80:42	0:0	6	dst_stride
op	80:52	0:0	6	[
water	80:53	0:0	6	j
op	80:54	0:0	6	]
arg	80:57	80:74	5	p->temp_stride[j]
water	80:57	0:0	6	p
op	80:58	0:0	6	->
water	80:60	0:0	6	temp_stride
op	80:71	0:0	6	[
water	80:72	0:0	6	j
op	80:73	0:0	6	]
arg	81:22	81:69	5	FF_CEIL_RSHIFT(width,is_chroma?p->hsub:0)
call	81:22	81:68	6	FF_CEIL_RSHIFT
arg	81:37	81:42	7	width
water	81:37	0:0	8	width
arg	81:45	81:68	7	is_chroma?p->hsub:0
water	81:45	0:0	8	is_chroma
water	81:55	0:0	8	?
water	81:57	0:0	8	p
op	81:58	0:0	8	->
water	81:60	0:0	8	hsub
water	81:65	0:0	8	:
water	81:67	0:0	8	0
arg	82:22	82:69	5	FF_CEIL_RSHIFT(height,is_chroma?p->vsub:0)
call	82:22	82:68	6	FF_CEIL_RSHIFT
arg	82:37	82:43	7	height
water	82:37	0:0	8	height
arg	82:45	82:68	7	is_chroma?p->vsub:0
water	82:45	0:0	8	is_chroma
water	82:55	0:0	8	?
water	82:57	0:0	8	p
op	82:58	0:0	8	->
water	82:60	0:0	8	vsub
water	82:65	0:0	8	:
water	82:67	0:0	8	0
arg	83:22	83:37	5	8-p->log2_count
water	83:22	0:0	6	8
op	83:23	0:0	6	-
water	83:24	0:0	6	p
op	83:25	0:0	6	->
water	83:27	0:0	6	log2_count
water	83:38	0:0	4	;
water	84:4	0:0	4	}
