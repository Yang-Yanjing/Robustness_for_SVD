func	1:0	108:0	0	static int	acrossfade_filter_frame
params	1:34	0:0	1	
param	1:35	1:55	2	AVFilterLink *	inlink
param	1:57	1:68	2	AVFrame *	in
stmnts	0:0	107:14	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:26	0:0	2	=
water	3:28	0:0	2	inlink
op	3:34	0:0	2	->
water	3:36	0:0	2	dst
decl	4:4	4:37	2	AudioFadeContext	*s
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	priv
decl	5:4	5:43	2	AVFilterLink	*outlink
op	5:26	0:0	2	=
water	5:28	0:0	2	ctx
op	5:31	0:0	2	->
water	5:33	0:0	2	outputs
op	5:40	0:0	2	[
water	5:41	0:0	2	0
op	5:42	0:0	2	]
decl	6:4	6:35	2	AVFrame	*out
water	6:16	0:0	2	,
decl	6:4	6:35	2	AVFrame	*cf[2]
op	6:25	0:0	2	=
water	6:27	0:0	2	{
water	6:29	0:0	2	NULL
water	6:34	0:0	2	}
decl	7:4	7:27	2	int	ret
op	7:12	0:0	2	=
water	7:14	0:0	2	0
water	7:15	0:0	2	,
decl	7:4	7:27	2	int	nb_samples
if	8:4	13:4	2	(s -> crossfade_is_over)
cond	8:8	8:11	3	s -> crossfade_is_over
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	crossfade_is_over
stmts	8:30	13:4	3	
water	8:30	0:0	4	{
water	9:8	0:0	4	in
op	9:10	0:0	4	->
water	9:12	0:0	4	pts
op	9:16	0:0	4	=
water	9:18	0:0	4	s
op	9:19	0:0	4	->
water	9:21	0:0	4	pts
water	9:24	0:0	4	;
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	pts
op	10:15	0:0	4	+=
call	10:18	11:71	4	av_rescale_q
arg	10:31	10:45	5	in->nb_samples
water	10:31	0:0	6	in
op	10:33	0:0	6	->
water	10:35	0:0	6	nb_samples
arg	11:12	11:51	5	(AVRational){1,outlink->sample_rate}
water	11:12	0:0	6	(
water	11:13	0:0	6	AVRational
water	11:23	0:0	6	)
water	11:24	0:0	6	{
water	11:26	0:0	6	1
water	11:27	0:0	6	,
water	11:29	0:0	6	outlink
op	11:36	0:0	6	->
water	11:38	0:0	6	sample_rate
water	11:50	0:0	6	}
arg	11:53	11:71	5	outlink->time_base
water	11:53	0:0	6	outlink
op	11:60	0:0	6	->
water	11:62	0:0	6	time_base
water	11:72	0:0	4	;
return	12:8	12:43	4	ff_filter_frame(outlink,in)
call	12:15	12:42	5	ff_filter_frame
arg	12:31	12:38	6	outlink
water	12:31	0:0	7	outlink
arg	12:40	12:42	6	in
water	12:40	0:0	7	in
water	13:4	0:0	4	}
else	13:6	28:4	2
stmts	13:11	28:4	3	
if	13:11	28:4	4	(inlink == ctx -> inputs [ 0 ])
cond	13:15	13:38	5	inlink == ctx -> inputs [ 0 ]
water	13:15	0:0	6	inlink
op	13:22	0:0	6	==
water	13:25	0:0	6	ctx
op	13:28	0:0	6	->
water	13:30	0:0	6	inputs
op	13:36	0:0	6	[
water	13:37	0:0	6	0
op	13:38	0:0	6	]
stmts	13:41	28:4	5	
water	13:41	0:0	6	{
call	14:8	14:82	6	av_audio_fifo_write
arg	14:28	14:38	7	s->fifo[0]
water	14:28	0:0	8	s
op	14:29	0:0	8	->
water	14:31	0:0	8	fifo
op	14:35	0:0	8	[
water	14:36	0:0	8	0
op	14:37	0:0	8	]
arg	14:40	14:66	7	(void**)in->extended_data
water	14:40	0:0	8	(
water	14:41	0:0	8	void
op	14:46	0:0	8	*
op	14:47	0:0	8	*
water	14:48	0:0	8	)
water	14:49	0:0	8	in
op	14:51	0:0	8	->
water	14:53	0:0	8	extended_data
arg	14:68	14:82	7	in->nb_samples
water	14:68	0:0	8	in
op	14:70	0:0	8	->
water	14:72	0:0	8	nb_samples
water	14:83	0:0	6	;
water	15:8	0:0	6	nb_samples
op	15:19	0:0	6	=
call	15:21	15:50	6	av_audio_fifo_size
arg	15:40	15:50	7	s->fifo[0]
water	15:40	0:0	8	s
op	15:41	0:0	8	->
water	15:43	0:0	8	fifo
op	15:47	0:0	8	[
water	15:48	0:0	8	0
op	15:49	0:0	8	]
op	15:52	0:0	6	-
water	15:54	0:0	6	s
op	15:55	0:0	6	->
water	15:57	0:0	6	nb_samples
water	15:67	0:0	6	;
if	16:8	27:8	6	(nb_samples > 0)
cond	16:12	16:25	7	nb_samples > 0
water	16:12	0:0	8	nb_samples
op	16:23	0:0	8	>
water	16:25	0:0	8	0
stmts	16:28	27:8	7	
water	16:28	0:0	8	{
water	17:12	0:0	8	out
op	17:16	0:0	8	=
call	17:18	17:57	8	ff_get_audio_buffer
arg	17:38	17:45	9	outlink
water	17:38	0:0	10	outlink
arg	17:47	17:57	9	nb_samples
water	17:47	0:0	10	nb_samples
water	17:58	0:0	8	;
if	18:12	21:12	8	(! out)
cond	18:16	18:17	9	! out
op	18:16	0:0	10	!
water	18:17	0:0	10	out
stmts	18:22	21:12	9	
water	18:22	0:0	10	{
water	19:16	0:0	10	ret
op	19:20	0:0	10	=
call	19:22	19:36	10	AVERROR
arg	19:30	19:36	11	ENOMEM
water	19:30	0:0	12	ENOMEM
water	19:37	0:0	10	;
goto	20:16	20:25	10	fail
water	20:21	0:0	11	fail
water	21:12	0:0	10	}
call	22:12	22:82	8	av_audio_fifo_read
arg	22:31	22:41	9	s->fifo[0]
water	22:31	0:0	10	s
op	22:32	0:0	10	->
water	22:34	0:0	10	fifo
op	22:38	0:0	10	[
water	22:39	0:0	10	0
op	22:40	0:0	10	]
arg	22:43	22:70	9	(void**)out->extended_data
water	22:43	0:0	10	(
water	22:44	0:0	10	void
op	22:49	0:0	10	*
op	22:50	0:0	10	*
water	22:51	0:0	10	)
water	22:52	0:0	10	out
op	22:55	0:0	10	->
water	22:57	0:0	10	extended_data
arg	22:72	22:82	9	nb_samples
water	22:72	0:0	10	nb_samples
water	22:83	0:0	8	;
water	23:12	0:0	8	out
op	23:15	0:0	8	->
water	23:17	0:0	8	pts
op	23:21	0:0	8	=
water	23:23	0:0	8	s
op	23:24	0:0	8	->
water	23:26	0:0	8	pts
water	23:29	0:0	8	;
water	24:12	0:0	8	s
op	24:13	0:0	8	->
water	24:15	0:0	8	pts
op	24:19	0:0	8	+=
call	24:22	25:75	8	av_rescale_q
arg	24:35	24:45	9	nb_samples
water	24:35	0:0	10	nb_samples
arg	25:16	25:55	9	(AVRational){1,outlink->sample_rate}
water	25:16	0:0	10	(
water	25:17	0:0	10	AVRational
water	25:27	0:0	10	)
water	25:28	0:0	10	{
water	25:30	0:0	10	1
water	25:31	0:0	10	,
water	25:33	0:0	10	outlink
op	25:40	0:0	10	->
water	25:42	0:0	10	sample_rate
water	25:54	0:0	10	}
arg	25:57	25:75	9	outlink->time_base
water	25:57	0:0	10	outlink
op	25:64	0:0	10	->
water	25:66	0:0	10	time_base
water	25:76	0:0	8	;
water	26:12	0:0	8	ret
op	26:16	0:0	8	=
call	26:18	26:46	8	ff_filter_frame
arg	26:34	26:41	9	outlink
water	26:34	0:0	10	outlink
arg	26:43	26:46	9	out
water	26:43	0:0	10	out
water	26:47	0:0	8	;
water	27:8	0:0	8	}
water	28:4	0:0	6	}
else	28:6	48:4	2
stmts	28:11	48:4	3	
if	28:11	48:4	4	(av_audio_fifo_size (s -> fifo [ 1 ] ) < s -> nb_samples)
cond	28:15	28:51	5	av_audio_fifo_size (s -> fifo [ 1 ] ) < s -> nb_samples
call	28:15	28:44	6	av_audio_fifo_size
arg	28:34	28:44	7	s->fifo[1]
water	28:34	0:0	8	s
op	28:35	0:0	8	->
water	28:37	0:0	8	fifo
op	28:41	0:0	8	[
water	28:42	0:0	8	1
op	28:43	0:0	8	]
op	28:46	0:0	6	<
water	28:48	0:0	6	s
op	28:49	0:0	6	->
water	28:51	0:0	6	nb_samples
stmts	28:63	48:4	5	
water	28:63	0:0	6	{
if	29:8	46:8	6	(! s -> overlap &&av_audio_fifo_size (s -> fifo [ 0 ] ) > 0)
cond	29:12	29:60	7	! s -> overlap &&av_audio_fifo_size (s -> fifo [ 0 ] ) > 0
op	29:12	0:0	8	!
water	29:13	0:0	8	s
op	29:14	0:0	8	->
water	29:16	0:0	8	overlap
op	29:24	0:0	8	&&
call	29:27	29:56	8	av_audio_fifo_size
arg	29:46	29:56	9	s->fifo[0]
water	29:46	0:0	10	s
op	29:47	0:0	10	->
water	29:49	0:0	10	fifo
op	29:53	0:0	10	[
water	29:54	0:0	10	0
op	29:55	0:0	10	]
op	29:58	0:0	8	>
water	29:60	0:0	8	0
stmts	29:63	46:8	7	
water	29:63	0:0	8	{
water	30:12	0:0	8	nb_samples
op	30:23	0:0	8	=
call	30:25	30:54	8	av_audio_fifo_size
arg	30:44	30:54	9	s->fifo[0]
water	30:44	0:0	10	s
op	30:45	0:0	10	->
water	30:47	0:0	10	fifo
op	30:51	0:0	10	[
water	30:52	0:0	10	0
op	30:53	0:0	10	]
water	30:55	0:0	8	;
water	31:12	0:0	8	cf
op	31:14	0:0	8	[
water	31:15	0:0	8	0
op	31:16	0:0	8	]
op	31:18	0:0	8	=
call	31:20	31:59	8	ff_get_audio_buffer
arg	31:40	31:47	9	outlink
water	31:40	0:0	10	outlink
arg	31:49	31:59	9	nb_samples
water	31:49	0:0	10	nb_samples
water	31:60	0:0	8	;
water	32:12	0:0	8	out
op	32:16	0:0	8	=
call	32:18	32:57	8	ff_get_audio_buffer
arg	32:38	32:45	9	outlink
water	32:38	0:0	10	outlink
arg	32:47	32:57	9	nb_samples
water	32:47	0:0	10	nb_samples
water	32:58	0:0	8	;
if	33:12	36:12	8	(! out || ! cf [ 0 ])
cond	33:16	33:29	9	! out || ! cf [ 0 ]
op	33:16	0:0	10	!
water	33:17	0:0	10	out
op	33:21	0:0	10	||
op	33:24	0:0	10	!
water	33:25	0:0	10	cf
op	33:27	0:0	10	[
water	33:28	0:0	10	0
op	33:29	0:0	10	]
stmts	33:32	36:12	9	
water	33:32	0:0	10	{
water	34:16	0:0	10	ret
op	34:20	0:0	10	=
call	34:22	34:36	10	AVERROR
arg	34:30	34:36	11	ENOMEM
water	34:30	0:0	12	ENOMEM
water	34:37	0:0	10	;
goto	35:16	35:25	10	fail
water	35:21	0:0	11	fail
water	36:12	0:0	10	}
call	37:12	37:84	8	av_audio_fifo_read
arg	37:31	37:41	9	s->fifo[0]
water	37:31	0:0	10	s
op	37:32	0:0	10	->
water	37:34	0:0	10	fifo
op	37:38	0:0	10	[
water	37:39	0:0	10	0
op	37:40	0:0	10	]
arg	37:43	37:72	9	(void**)cf[0]->extended_data
water	37:43	0:0	10	(
water	37:44	0:0	10	void
op	37:49	0:0	10	*
op	37:50	0:0	10	*
water	37:51	0:0	10	)
water	37:52	0:0	10	cf
op	37:54	0:0	10	[
water	37:55	0:0	10	0
op	37:56	0:0	10	]
op	37:57	0:0	10	->
water	37:59	0:0	10	extended_data
arg	37:74	37:84	9	nb_samples
water	37:74	0:0	10	nb_samples
water	37:85	0:0	8	;
call	38:12	39:87	8	s->fade_samples
arg	38:28	38:46	9	out->extended_data
water	38:28	0:0	10	out
op	38:31	0:0	10	->
water	38:33	0:0	10	extended_data
arg	38:48	38:68	9	cf[0]->extended_data
water	38:48	0:0	10	cf
op	38:50	0:0	10	[
water	38:51	0:0	10	0
op	38:52	0:0	10	]
op	38:53	0:0	10	->
water	38:55	0:0	10	extended_data
arg	38:70	38:80	9	nb_samples
water	38:70	0:0	10	nb_samples
arg	39:28	39:45	9	outlink->channels
water	39:28	0:0	10	outlink
op	39:35	0:0	10	->
water	39:37	0:0	10	channels
arg	39:47	39:49	9	-1
op	39:47	0:0	10	-
water	39:48	0:0	10	1
arg	39:51	39:65	9	nb_samples-1
water	39:51	0:0	10	nb_samples
op	39:62	0:0	10	-
water	39:64	0:0	10	1
arg	39:67	39:77	9	nb_samples
water	39:67	0:0	10	nb_samples
arg	39:79	39:87	9	s->curve
water	39:79	0:0	10	s
op	39:80	0:0	10	->
water	39:82	0:0	10	curve
water	39:88	0:0	8	;
water	40:12	0:0	8	out
op	40:15	0:0	8	->
water	40:17	0:0	8	pts
op	40:21	0:0	8	=
water	40:23	0:0	8	s
op	40:24	0:0	8	->
water	40:26	0:0	8	pts
water	40:29	0:0	8	;
water	41:12	0:0	8	s
op	41:13	0:0	8	->
water	41:15	0:0	8	pts
op	41:19	0:0	8	+=
call	41:22	42:75	8	av_rescale_q
arg	41:35	41:45	9	nb_samples
water	41:35	0:0	10	nb_samples
arg	42:16	42:55	9	(AVRational){1,outlink->sample_rate}
water	42:16	0:0	10	(
water	42:17	0:0	10	AVRational
water	42:27	0:0	10	)
water	42:28	0:0	10	{
water	42:30	0:0	10	1
water	42:31	0:0	10	,
water	42:33	0:0	10	outlink
op	42:40	0:0	10	->
water	42:42	0:0	10	sample_rate
water	42:54	0:0	10	}
arg	42:57	42:75	9	outlink->time_base
water	42:57	0:0	10	outlink
op	42:64	0:0	10	->
water	42:66	0:0	10	time_base
water	42:76	0:0	8	;
water	43:12	0:0	8	ret
op	43:16	0:0	8	=
call	43:18	43:46	8	ff_filter_frame
arg	43:34	43:41	9	outlink
water	43:34	0:0	10	outlink
arg	43:43	43:46	9	out
water	43:43	0:0	10	out
water	43:47	0:0	8	;
if	44:12	45:25	8	(ret < 0)
cond	44:16	44:22	9	ret < 0
water	44:16	0:0	10	ret
op	44:20	0:0	10	<
water	44:22	0:0	10	0
stmts	45:16	45:25	9	
goto	45:16	45:25	10	fail
water	45:21	0:0	11	fail
water	46:8	0:0	8	}
call	47:8	47:82	6	av_audio_fifo_write
arg	47:28	47:38	7	s->fifo[1]
water	47:28	0:0	8	s
op	47:29	0:0	8	->
water	47:31	0:0	8	fifo
op	47:35	0:0	8	[
water	47:36	0:0	8	1
op	47:37	0:0	8	]
arg	47:40	47:66	7	(void**)in->extended_data
water	47:40	0:0	8	(
water	47:41	0:0	8	void
op	47:46	0:0	8	*
op	47:47	0:0	8	*
water	47:48	0:0	8	)
water	47:49	0:0	8	in
op	47:51	0:0	8	->
water	47:53	0:0	8	extended_data
arg	47:68	47:82	7	in->nb_samples
water	47:68	0:0	8	in
op	47:70	0:0	8	->
water	47:72	0:0	8	nb_samples
water	47:83	0:0	6	;
water	48:4	0:0	6	}
else	48:6	102:4	2
stmts	48:11	102:4	3	
if	48:11	102:4	4	(av_audio_fifo_size (s -> fifo [ 1 ] ) >= s -> nb_samples)
cond	48:15	48:52	5	av_audio_fifo_size (s -> fifo [ 1 ] ) >= s -> nb_samples
call	48:15	48:44	6	av_audio_fifo_size
arg	48:34	48:44	7	s->fifo[1]
water	48:34	0:0	8	s
op	48:35	0:0	8	->
water	48:37	0:0	8	fifo
op	48:41	0:0	8	[
water	48:42	0:0	8	1
op	48:43	0:0	8	]
op	48:46	0:0	6	>=
water	48:49	0:0	6	s
op	48:50	0:0	6	->
water	48:52	0:0	6	nb_samples
stmts	48:64	102:4	5	
water	48:64	0:0	6	{
if	49:8	70:8	6	(s -> overlap)
cond	49:12	49:15	7	s -> overlap
water	49:12	0:0	8	s
op	49:13	0:0	8	->
water	49:15	0:0	8	overlap
stmts	49:24	70:8	7	
water	49:24	0:0	8	{
water	50:12	0:0	8	cf
op	50:14	0:0	8	[
water	50:15	0:0	8	0
op	50:16	0:0	8	]
op	50:18	0:0	8	=
call	50:20	50:62	8	ff_get_audio_buffer
arg	50:40	50:47	9	outlink
water	50:40	0:0	10	outlink
arg	50:49	50:62	9	s->nb_samples
water	50:49	0:0	10	s
op	50:50	0:0	10	->
water	50:52	0:0	10	nb_samples
water	50:63	0:0	8	;
water	51:12	0:0	8	cf
op	51:14	0:0	8	[
water	51:15	0:0	8	1
op	51:16	0:0	8	]
op	51:18	0:0	8	=
call	51:20	51:62	8	ff_get_audio_buffer
arg	51:40	51:47	9	outlink
water	51:40	0:0	10	outlink
arg	51:49	51:62	9	s->nb_samples
water	51:49	0:0	10	s
op	51:50	0:0	10	->
water	51:52	0:0	10	nb_samples
water	51:63	0:0	8	;
water	52:12	0:0	8	out
op	52:16	0:0	8	=
call	52:18	52:60	8	ff_get_audio_buffer
arg	52:38	52:45	9	outlink
water	52:38	0:0	10	outlink
arg	52:47	52:60	9	s->nb_samples
water	52:47	0:0	10	s
op	52:48	0:0	10	->
water	52:50	0:0	10	nb_samples
water	52:61	0:0	8	;
if	53:12	57:12	8	(! out || ! cf [ 0 ] || ! cf [ 1 ])
cond	53:16	53:39	9	! out || ! cf [ 0 ] || ! cf [ 1 ]
op	53:16	0:0	10	!
water	53:17	0:0	10	out
op	53:21	0:0	10	||
op	53:24	0:0	10	!
water	53:25	0:0	10	cf
op	53:27	0:0	10	[
water	53:28	0:0	10	0
op	53:29	0:0	10	]
op	53:31	0:0	10	||
op	53:34	0:0	10	!
water	53:35	0:0	10	cf
op	53:37	0:0	10	[
water	53:38	0:0	10	1
op	53:39	0:0	10	]
stmts	53:42	57:12	9	
water	53:42	0:0	10	{
call	54:16	54:34	10	av_frame_free
arg	54:30	54:34	11	&out
op	54:30	0:0	12	&
water	54:31	0:0	12	out
water	54:35	0:0	10	;
water	55:16	0:0	10	ret
op	55:20	0:0	10	=
call	55:22	55:36	10	AVERROR
arg	55:30	55:36	11	ENOMEM
water	55:30	0:0	12	ENOMEM
water	55:37	0:0	10	;
goto	56:16	56:25	10	fail
water	56:21	0:0	11	fail
water	57:12	0:0	10	}
call	58:12	58:87	8	av_audio_fifo_read
arg	58:31	58:41	9	s->fifo[0]
water	58:31	0:0	10	s
op	58:32	0:0	10	->
water	58:34	0:0	10	fifo
op	58:38	0:0	10	[
water	58:39	0:0	10	0
op	58:40	0:0	10	]
arg	58:43	58:72	9	(void**)cf[0]->extended_data
water	58:43	0:0	10	(
water	58:44	0:0	10	void
op	58:49	0:0	10	*
op	58:50	0:0	10	*
water	58:51	0:0	10	)
water	58:52	0:0	10	cf
op	58:54	0:0	10	[
water	58:55	0:0	10	0
op	58:56	0:0	10	]
op	58:57	0:0	10	->
water	58:59	0:0	10	extended_data
arg	58:74	58:87	9	s->nb_samples
water	58:74	0:0	10	s
op	58:75	0:0	10	->
water	58:77	0:0	10	nb_samples
water	58:88	0:0	8	;
call	59:12	59:87	8	av_audio_fifo_read
arg	59:31	59:41	9	s->fifo[1]
water	59:31	0:0	10	s
op	59:32	0:0	10	->
water	59:34	0:0	10	fifo
op	59:38	0:0	10	[
water	59:39	0:0	10	1
op	59:40	0:0	10	]
arg	59:43	59:72	9	(void**)cf[1]->extended_data
water	59:43	0:0	10	(
water	59:44	0:0	10	void
op	59:49	0:0	10	*
op	59:50	0:0	10	*
water	59:51	0:0	10	)
water	59:52	0:0	10	cf
op	59:54	0:0	10	[
water	59:55	0:0	10	1
op	59:56	0:0	10	]
op	59:57	0:0	10	->
water	59:59	0:0	10	extended_data
arg	59:74	59:87	9	s->nb_samples
water	59:74	0:0	10	s
op	59:75	0:0	10	->
water	59:77	0:0	10	nb_samples
water	59:88	0:0	8	;
call	60:12	63:52	8	s->crossfade_samples
arg	60:33	60:51	9	out->extended_data
water	60:33	0:0	10	out
op	60:36	0:0	10	->
water	60:38	0:0	10	extended_data
arg	60:53	60:73	9	cf[0]->extended_data
water	60:53	0:0	10	cf
op	60:55	0:0	10	[
water	60:56	0:0	10	0
op	60:57	0:0	10	]
op	60:58	0:0	10	->
water	60:60	0:0	10	extended_data
arg	61:33	61:53	9	cf[1]->extended_data
water	61:33	0:0	10	cf
op	61:35	0:0	10	[
water	61:36	0:0	10	1
op	61:37	0:0	10	]
op	61:38	0:0	10	->
water	61:40	0:0	10	extended_data
arg	62:33	62:46	9	s->nb_samples
water	62:33	0:0	10	s
op	62:34	0:0	10	->
water	62:36	0:0	10	nb_samples
arg	62:48	62:73	9	av_frame_get_channels(in)
call	62:48	62:72	10	av_frame_get_channels
arg	62:70	62:72	11	in
water	62:70	0:0	12	in
arg	63:33	63:41	9	s->curve
water	63:33	0:0	10	s
op	63:34	0:0	10	->
water	63:36	0:0	10	curve
arg	63:43	63:52	9	s->curve2
water	63:43	0:0	10	s
op	63:44	0:0	10	->
water	63:46	0:0	10	curve2
water	63:53	0:0	8	;
water	64:12	0:0	8	out
op	64:15	0:0	8	->
water	64:17	0:0	8	pts
op	64:21	0:0	8	=
water	64:23	0:0	8	s
op	64:24	0:0	8	->
water	64:26	0:0	8	pts
water	64:29	0:0	8	;
water	65:12	0:0	8	s
op	65:13	0:0	8	->
water	65:15	0:0	8	pts
op	65:19	0:0	8	+=
call	65:22	66:75	8	av_rescale_q
arg	65:35	65:48	9	s->nb_samples
water	65:35	0:0	10	s
op	65:36	0:0	10	->
water	65:38	0:0	10	nb_samples
arg	66:16	66:55	9	(AVRational){1,outlink->sample_rate}
water	66:16	0:0	10	(
water	66:17	0:0	10	AVRational
water	66:27	0:0	10	)
water	66:28	0:0	10	{
water	66:30	0:0	10	1
water	66:31	0:0	10	,
water	66:33	0:0	10	outlink
op	66:40	0:0	10	->
water	66:42	0:0	10	sample_rate
water	66:54	0:0	10	}
arg	66:57	66:75	9	outlink->time_base
water	66:57	0:0	10	outlink
op	66:64	0:0	10	->
water	66:66	0:0	10	time_base
water	66:76	0:0	8	;
water	67:12	0:0	8	ret
op	67:16	0:0	8	=
call	67:18	67:46	8	ff_filter_frame
arg	67:34	67:41	9	outlink
water	67:34	0:0	10	outlink
arg	67:43	67:46	9	out
water	67:43	0:0	10	out
water	67:47	0:0	8	;
if	68:12	69:25	8	(ret < 0)
cond	68:16	68:22	9	ret < 0
water	68:16	0:0	10	ret
op	68:20	0:0	10	<
water	68:22	0:0	10	0
stmts	69:16	69:25	9	
goto	69:16	69:25	10	fail
water	69:21	0:0	11	fail
water	70:8	0:0	8	}
else	70:10	87:8	6
stmts	70:15	87:8	7	
water	70:15	0:0	8	{
water	71:12	0:0	8	out
op	71:16	0:0	8	=
call	71:18	71:60	8	ff_get_audio_buffer
arg	71:38	71:45	9	outlink
water	71:38	0:0	10	outlink
arg	71:47	71:60	9	s->nb_samples
water	71:47	0:0	10	s
op	71:48	0:0	10	->
water	71:50	0:0	10	nb_samples
water	71:61	0:0	8	;
water	72:12	0:0	8	cf
op	72:14	0:0	8	[
water	72:15	0:0	8	1
op	72:16	0:0	8	]
op	72:18	0:0	8	=
call	72:20	72:62	8	ff_get_audio_buffer
arg	72:40	72:47	9	outlink
water	72:40	0:0	10	outlink
arg	72:49	72:62	9	s->nb_samples
water	72:49	0:0	10	s
op	72:50	0:0	10	->
water	72:52	0:0	10	nb_samples
water	72:63	0:0	8	;
if	73:12	77:12	8	(! out || ! cf [ 1 ])
cond	73:16	73:29	9	! out || ! cf [ 1 ]
op	73:16	0:0	10	!
water	73:17	0:0	10	out
op	73:21	0:0	10	||
op	73:24	0:0	10	!
water	73:25	0:0	10	cf
op	73:27	0:0	10	[
water	73:28	0:0	10	1
op	73:29	0:0	10	]
stmts	73:32	77:12	9	
water	73:32	0:0	10	{
water	74:16	0:0	10	ret
op	74:20	0:0	10	=
call	74:22	74:36	10	AVERROR
arg	74:30	74:36	11	ENOMEM
water	74:30	0:0	12	ENOMEM
water	74:37	0:0	10	;
call	75:16	75:34	10	av_frame_free
arg	75:30	75:34	11	&out
op	75:30	0:0	12	&
water	75:31	0:0	12	out
water	75:35	0:0	10	;
goto	76:16	76:25	10	fail
water	76:21	0:0	11	fail
water	77:12	0:0	10	}
call	78:12	78:87	8	av_audio_fifo_read
arg	78:31	78:41	9	s->fifo[1]
water	78:31	0:0	10	s
op	78:32	0:0	10	->
water	78:34	0:0	10	fifo
op	78:38	0:0	10	[
water	78:39	0:0	10	1
op	78:40	0:0	10	]
arg	78:43	78:72	9	(void**)cf[1]->extended_data
water	78:43	0:0	10	(
water	78:44	0:0	10	void
op	78:49	0:0	10	*
op	78:50	0:0	10	*
water	78:51	0:0	10	)
water	78:52	0:0	10	cf
op	78:54	0:0	10	[
water	78:55	0:0	10	1
op	78:56	0:0	10	]
op	78:57	0:0	10	->
water	78:59	0:0	10	extended_data
arg	78:74	78:87	9	s->nb_samples
water	78:74	0:0	10	s
op	78:75	0:0	10	->
water	78:77	0:0	10	nb_samples
water	78:88	0:0	8	;
call	79:12	80:77	8	s->fade_samples
arg	79:28	79:46	9	out->extended_data
water	79:28	0:0	10	out
op	79:31	0:0	10	->
water	79:33	0:0	10	extended_data
arg	79:48	79:68	9	cf[1]->extended_data
water	79:48	0:0	10	cf
op	79:50	0:0	10	[
water	79:51	0:0	10	1
op	79:52	0:0	10	]
op	79:53	0:0	10	->
water	79:55	0:0	10	extended_data
arg	79:70	79:83	9	s->nb_samples
water	79:70	0:0	10	s
op	79:71	0:0	10	->
water	79:73	0:0	10	nb_samples
arg	80:28	80:45	9	outlink->channels
water	80:28	0:0	10	outlink
op	80:35	0:0	10	->
water	80:37	0:0	10	channels
arg	80:47	80:48	9	1
water	80:47	0:0	10	1
arg	80:50	80:51	9	0
water	80:50	0:0	10	0
arg	80:53	80:66	9	s->nb_samples
water	80:53	0:0	10	s
op	80:54	0:0	10	->
water	80:56	0:0	10	nb_samples
arg	80:68	80:77	9	s->curve2
water	80:68	0:0	10	s
op	80:69	0:0	10	->
water	80:71	0:0	10	curve2
water	80:78	0:0	8	;
water	81:12	0:0	8	out
op	81:15	0:0	8	->
water	81:17	0:0	8	pts
op	81:21	0:0	8	=
water	81:23	0:0	8	s
op	81:24	0:0	8	->
water	81:26	0:0	8	pts
water	81:29	0:0	8	;
water	82:12	0:0	8	s
op	82:13	0:0	8	->
water	82:15	0:0	8	pts
op	82:19	0:0	8	+=
call	82:22	83:75	8	av_rescale_q
arg	82:35	82:48	9	s->nb_samples
water	82:35	0:0	10	s
op	82:36	0:0	10	->
water	82:38	0:0	10	nb_samples
arg	83:16	83:55	9	(AVRational){1,outlink->sample_rate}
water	83:16	0:0	10	(
water	83:17	0:0	10	AVRational
water	83:27	0:0	10	)
water	83:28	0:0	10	{
water	83:30	0:0	10	1
water	83:31	0:0	10	,
water	83:33	0:0	10	outlink
op	83:40	0:0	10	->
water	83:42	0:0	10	sample_rate
water	83:54	0:0	10	}
arg	83:57	83:75	9	outlink->time_base
water	83:57	0:0	10	outlink
op	83:64	0:0	10	->
water	83:66	0:0	10	time_base
water	83:76	0:0	8	;
water	84:12	0:0	8	ret
op	84:16	0:0	8	=
call	84:18	84:46	8	ff_filter_frame
arg	84:34	84:41	9	outlink
water	84:34	0:0	10	outlink
arg	84:43	84:46	9	out
water	84:43	0:0	10	out
water	84:47	0:0	8	;
if	85:12	86:25	8	(ret < 0)
cond	85:16	85:22	9	ret < 0
water	85:16	0:0	10	ret
op	85:20	0:0	10	<
water	85:22	0:0	10	0
stmts	86:16	86:25	9	
goto	86:16	86:25	10	fail
water	86:21	0:0	11	fail
water	87:8	0:0	8	}
water	88:8	0:0	6	nb_samples
op	88:19	0:0	6	=
call	88:21	88:50	6	av_audio_fifo_size
arg	88:40	88:50	7	s->fifo[1]
water	88:40	0:0	8	s
op	88:41	0:0	8	->
water	88:43	0:0	8	fifo
op	88:47	0:0	8	[
water	88:48	0:0	8	1
op	88:49	0:0	8	]
water	88:51	0:0	6	;
if	89:8	100:8	6	(nb_samples > 0)
cond	89:12	89:25	7	nb_samples > 0
water	89:12	0:0	8	nb_samples
op	89:23	0:0	8	>
water	89:25	0:0	8	0
stmts	89:28	100:8	7	
water	89:28	0:0	8	{
water	90:12	0:0	8	out
op	90:16	0:0	8	=
call	90:18	90:57	8	ff_get_audio_buffer
arg	90:38	90:45	9	outlink
water	90:38	0:0	10	outlink
arg	90:47	90:57	9	nb_samples
water	90:47	0:0	10	nb_samples
water	90:58	0:0	8	;
if	91:12	94:12	8	(! out)
cond	91:16	91:17	9	! out
op	91:16	0:0	10	!
water	91:17	0:0	10	out
stmts	91:22	94:12	9	
water	91:22	0:0	10	{
water	92:16	0:0	10	ret
op	92:20	0:0	10	=
call	92:22	92:36	10	AVERROR
arg	92:30	92:36	11	ENOMEM
water	92:30	0:0	12	ENOMEM
water	92:37	0:0	10	;
goto	93:16	93:25	10	fail
water	93:21	0:0	11	fail
water	94:12	0:0	10	}
call	95:12	95:82	8	av_audio_fifo_read
arg	95:31	95:41	9	s->fifo[1]
water	95:31	0:0	10	s
op	95:32	0:0	10	->
water	95:34	0:0	10	fifo
op	95:38	0:0	10	[
water	95:39	0:0	10	1
op	95:40	0:0	10	]
arg	95:43	95:70	9	(void**)out->extended_data
water	95:43	0:0	10	(
water	95:44	0:0	10	void
op	95:49	0:0	10	*
op	95:50	0:0	10	*
water	95:51	0:0	10	)
water	95:52	0:0	10	out
op	95:55	0:0	10	->
water	95:57	0:0	10	extended_data
arg	95:72	95:82	9	nb_samples
water	95:72	0:0	10	nb_samples
water	95:83	0:0	8	;
water	96:12	0:0	8	out
op	96:15	0:0	8	->
water	96:17	0:0	8	pts
op	96:21	0:0	8	=
water	96:23	0:0	8	s
op	96:24	0:0	8	->
water	96:26	0:0	8	pts
water	96:29	0:0	8	;
water	97:12	0:0	8	s
op	97:13	0:0	8	->
water	97:15	0:0	8	pts
op	97:19	0:0	8	+=
call	97:22	98:75	8	av_rescale_q
arg	97:35	97:45	9	nb_samples
water	97:35	0:0	10	nb_samples
arg	98:16	98:55	9	(AVRational){1,outlink->sample_rate}
water	98:16	0:0	10	(
water	98:17	0:0	10	AVRational
water	98:27	0:0	10	)
water	98:28	0:0	10	{
water	98:30	0:0	10	1
water	98:31	0:0	10	,
water	98:33	0:0	10	outlink
op	98:40	0:0	10	->
water	98:42	0:0	10	sample_rate
water	98:54	0:0	10	}
arg	98:57	98:75	9	outlink->time_base
water	98:57	0:0	10	outlink
op	98:64	0:0	10	->
water	98:66	0:0	10	time_base
water	98:76	0:0	8	;
water	99:12	0:0	8	ret
op	99:16	0:0	8	=
call	99:18	99:46	8	ff_filter_frame
arg	99:34	99:41	9	outlink
water	99:34	0:0	10	outlink
arg	99:43	99:46	9	out
water	99:43	0:0	10	out
water	99:47	0:0	8	;
water	100:8	0:0	8	}
water	101:8	0:0	6	s
op	101:9	0:0	6	->
water	101:11	0:0	6	crossfade_is_over
op	101:29	0:0	6	=
water	101:31	0:0	6	1
water	101:32	0:0	6	;
water	102:4	0:0	6	}
label	103:0	103:4	2	fail :
call	104:4	104:21	2	av_frame_free
arg	104:18	104:21	3	&in
op	104:18	0:0	4	&
water	104:19	0:0	4	in
water	104:22	0:0	2	;
call	105:4	105:24	2	av_frame_free
arg	105:18	105:24	3	&cf[0]
op	105:18	0:0	4	&
water	105:19	0:0	4	cf
op	105:21	0:0	4	[
water	105:22	0:0	4	0
op	105:23	0:0	4	]
water	105:25	0:0	2	;
call	106:4	106:24	2	av_frame_free
arg	106:18	106:24	3	&cf[1]
op	106:18	0:0	4	&
water	106:19	0:0	4	cf
op	106:21	0:0	4	[
water	106:22	0:0	4	1
op	106:23	0:0	4	]
water	106:25	0:0	2	;
return	107:4	107:14	2	ret
water	107:11	0:0	3	ret
