func	1:0	47:0	0	int	ff_audio_data_combine
params	1:25	0:0	1	
param	1:26	1:40	2	AudioData *	dst
param	1:42	1:56	2	int	dst_offset
param	1:58	1:72	2	AudioData *	src
param	2:26	2:40	2	int	src_offset
param	2:42	2:56	2	int	nb_samples
stmnts	0:0	46:12	1	
decl	4:4	4:42	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:42	2	int	p
water	4:14	0:0	2	,
decl	4:4	4:42	2	int	dst_offset2
water	4:27	0:0	2	,
decl	4:4	4:42	2	int	dst_move_size
if	6:4	9:4	2	(dst -> sample_fmt != src -> sample_fmt || dst -> channels != src -> channels)
cond	6:8	6:68	3	dst -> sample_fmt != src -> sample_fmt || dst -> channels != src -> channels
water	6:8	0:0	4	dst
op	6:11	0:0	4	->
water	6:13	0:0	4	sample_fmt
op	6:24	0:0	4	!=
water	6:27	0:0	4	src
op	6:30	0:0	4	->
water	6:32	0:0	4	sample_fmt
op	6:43	0:0	4	||
water	6:46	0:0	4	dst
op	6:49	0:0	4	->
water	6:51	0:0	4	channels
op	6:60	0:0	4	!=
water	6:63	0:0	4	src
op	6:66	0:0	4	->
water	6:68	0:0	4	channels
stmts	6:78	9:4	3	
water	6:78	0:0	4	{
call	7:8	7:60	4	av_log
arg	7:15	7:18	5	src
water	7:15	0:0	6	src
arg	7:20	7:32	5	AV_LOG_ERROR
water	7:20	0:0	6	AV_LOG_ERROR
arg	7:34	7:60	5	"sample format mismatch\n"
water	7:34	0:0	6	"sample format mismatch\n"
water	7:61	0:0	4	;
return	8:8	8:30	4	AVERROR(EINVAL)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	EINVAL
water	8:23	0:0	7	EINVAL
water	9:4	0:0	4	}
if	11:4	16:4	2	(dst_offset < 0 || dst_offset > dst -> nb_samples || src_offset < 0 || src_offset > src -> nb_samples)
cond	11:8	12:44	3	dst_offset < 0 || dst_offset > dst -> nb_samples || src_offset < 0 || src_offset > src -> nb_samples
water	11:8	0:0	4	dst_offset
op	11:19	0:0	4	<
water	11:21	0:0	4	0
op	11:23	0:0	4	||
water	11:26	0:0	4	dst_offset
op	11:37	0:0	4	>
water	11:39	0:0	4	dst
op	11:42	0:0	4	->
water	11:44	0:0	4	nb_samples
op	11:55	0:0	4	||
water	12:8	0:0	4	src_offset
op	12:19	0:0	4	<
water	12:21	0:0	4	0
op	12:23	0:0	4	||
water	12:26	0:0	4	src_offset
op	12:37	0:0	4	>
water	12:39	0:0	4	src
op	12:42	0:0	4	->
water	12:44	0:0	4	nb_samples
stmts	12:56	16:4	3	
water	12:56	0:0	4	{
call	13:8	14:37	4	av_log
arg	13:15	13:18	5	src
water	13:15	0:0	6	src
arg	13:20	13:32	5	AV_LOG_ERROR
water	13:20	0:0	6	AV_LOG_ERROR
arg	13:34	13:73	5	"offset out-of-bounds: src=%d dst=%d\n"
water	13:34	0:0	6	"offset out-of-bounds: src=%d dst=%d\n"
arg	14:15	14:25	5	src_offset
water	14:15	0:0	6	src_offset
arg	14:27	14:37	5	dst_offset
water	14:27	0:0	6	dst_offset
water	14:38	0:0	4	;
return	15:8	15:30	4	AVERROR(EINVAL)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	EINVAL
water	15:23	0:0	7	EINVAL
water	16:4	0:0	4	}
if	18:4	19:49	2	(nb_samples > src -> nb_samples - src_offset)
cond	18:8	18:39	3	nb_samples > src -> nb_samples - src_offset
water	18:8	0:0	4	nb_samples
op	18:19	0:0	4	>
water	18:21	0:0	4	src
op	18:24	0:0	4	->
water	18:26	0:0	4	nb_samples
op	18:37	0:0	4	-
water	18:39	0:0	4	src_offset
stmts	19:8	19:49	3	
water	19:8	0:0	4	nb_samples
op	19:19	0:0	4	=
water	19:21	0:0	4	src
op	19:24	0:0	4	->
water	19:26	0:0	4	nb_samples
op	19:37	0:0	4	-
water	19:39	0:0	4	src_offset
water	19:49	0:0	4	;
if	20:4	21:16	2	(nb_samples <= 0)
cond	20:8	20:22	3	nb_samples <= 0
water	20:8	0:0	4	nb_samples
op	20:19	0:0	4	<=
water	20:22	0:0	4	0
stmts	21:8	21:16	3	
return	21:8	21:16	4	0
water	21:15	0:0	5	0
if	23:4	26:4	2	(dst -> read_only)
cond	23:8	23:13	3	dst -> read_only
water	23:8	0:0	4	dst
op	23:11	0:0	4	->
water	23:13	0:0	4	read_only
stmts	23:24	26:4	3	
water	23:24	0:0	4	{
call	24:8	24:54	4	av_log
arg	24:15	24:18	5	dst
water	24:15	0:0	6	dst
arg	24:20	24:32	5	AV_LOG_ERROR
water	24:20	0:0	6	AV_LOG_ERROR
arg	24:34	24:54	5	"dst is read-only\n"
water	24:34	0:0	6	"dst is read-only\n"
water	24:55	0:0	4	;
return	25:8	25:30	4	AVERROR(EINVAL)
call	25:15	25:29	5	AVERROR
arg	25:23	25:29	6	EINVAL
water	25:23	0:0	7	EINVAL
water	26:4	0:0	4	}
water	28:4	0:0	2	ret
op	28:8	0:0	2	=
call	28:10	28:65	2	ff_audio_data_realloc
arg	28:32	28:35	3	dst
water	28:32	0:0	4	dst
arg	28:37	28:65	3	dst->nb_samples+nb_samples
water	28:37	0:0	4	dst
op	28:40	0:0	4	->
water	28:42	0:0	4	nb_samples
op	28:53	0:0	4	+
water	28:55	0:0	4	nb_samples
water	28:66	0:0	2	;
if	29:4	32:4	2	(ret < 0)
cond	29:8	29:14	3	ret < 0
water	29:8	0:0	4	ret
op	29:12	0:0	4	<
water	29:14	0:0	4	0
stmts	29:17	32:4	3	
water	29:17	0:0	4	{
call	30:8	30:60	4	av_log
arg	30:15	30:18	5	dst
water	30:15	0:0	6	dst
arg	30:20	30:32	5	AV_LOG_ERROR
water	30:20	0:0	6	AV_LOG_ERROR
arg	30:34	30:60	5	"error reallocating dst\n"
water	30:34	0:0	6	"error reallocating dst\n"
water	30:61	0:0	4	;
return	31:8	31:18	4	ret
water	31:15	0:0	5	ret
water	32:4	0:0	4	}
water	33:4	0:0	2	dst_offset2
op	33:18	0:0	2	=
water	33:20	0:0	2	dst_offset
op	33:31	0:0	2	+
water	33:33	0:0	2	nb_samples
water	33:43	0:0	2	;
water	34:4	0:0	2	dst_move_size
op	34:18	0:0	2	=
water	34:20	0:0	2	dst
op	34:23	0:0	2	->
water	34:25	0:0	2	nb_samples
op	34:36	0:0	2	-
water	34:38	0:0	2	dst_offset
water	34:48	0:0	2	;
for	35:4	44:4	2	(p = 0 ;p < src -> planes;p ++)
forinit	35:9	35:14	3	p = 0 ;
water	35:9	0:0	4	p
op	35:11	0:0	4	=
water	35:13	0:0	4	0
water	35:14	0:0	4	;
cond	35:16	35:25	3	p < src -> planes
water	35:16	0:0	4	p
op	35:18	0:0	4	<
water	35:20	0:0	4	src
op	35:23	0:0	4	->
water	35:25	0:0	4	planes
forexpr	35:33	35:34	3	p ++
water	35:33	0:0	4	p
op	35:34	0:0	4	++
stmts	35:38	44:4	3	
water	35:38	0:0	4	{
if	36:8	40:8	4	(dst_move_size > 0)
cond	36:12	36:28	5	dst_move_size > 0
water	36:12	0:0	6	dst_move_size
op	36:26	0:0	6	>
water	36:28	0:0	6	0
stmts	36:31	40:8	5	
water	36:31	0:0	6	{
call	37:12	39:47	6	memmove
arg	37:20	37:60	7	dst->data[p]+dst_offset2*dst->stride
water	37:20	0:0	8	dst
op	37:23	0:0	8	->
water	37:25	0:0	8	data
op	37:29	0:0	8	[
water	37:30	0:0	8	p
op	37:31	0:0	8	]
op	37:33	0:0	8	+
water	37:35	0:0	8	dst_offset2
op	37:47	0:0	8	*
water	37:49	0:0	8	dst
op	37:52	0:0	8	->
water	37:54	0:0	8	stride
arg	38:20	38:60	7	dst->data[p]+dst_offset*dst->stride
water	38:20	0:0	8	dst
op	38:23	0:0	8	->
water	38:25	0:0	8	data
op	38:29	0:0	8	[
water	38:30	0:0	8	p
op	38:31	0:0	8	]
op	38:33	0:0	8	+
water	38:35	0:0	8	dst_offset
op	38:47	0:0	8	*
water	38:49	0:0	8	dst
op	38:52	0:0	8	->
water	38:54	0:0	8	stride
arg	39:20	39:47	7	dst_move_size*dst->stride
water	39:20	0:0	8	dst_move_size
op	39:34	0:0	8	*
water	39:36	0:0	8	dst
op	39:39	0:0	8	->
water	39:41	0:0	8	stride
water	39:48	0:0	6	;
water	40:8	0:0	6	}
call	41:8	43:39	4	memcpy
arg	41:15	41:54	5	dst->data[p]+dst_offset*dst->stride
water	41:15	0:0	6	dst
op	41:18	0:0	6	->
water	41:20	0:0	6	data
op	41:24	0:0	6	[
water	41:25	0:0	6	p
op	41:26	0:0	6	]
op	41:28	0:0	6	+
water	41:30	0:0	6	dst_offset
op	41:41	0:0	6	*
water	41:43	0:0	6	dst
op	41:46	0:0	6	->
water	41:48	0:0	6	stride
arg	42:15	42:54	5	src->data[p]+src_offset*src->stride
water	42:15	0:0	6	src
op	42:18	0:0	6	->
water	42:20	0:0	6	data
op	42:24	0:0	6	[
water	42:25	0:0	6	p
op	42:26	0:0	6	]
op	42:28	0:0	6	+
water	42:30	0:0	6	src_offset
op	42:41	0:0	6	*
water	42:43	0:0	6	src
op	42:46	0:0	6	->
water	42:48	0:0	6	stride
arg	43:15	43:39	5	nb_samples*src->stride
water	43:15	0:0	6	nb_samples
op	43:26	0:0	6	*
water	43:28	0:0	6	src
op	43:31	0:0	6	->
water	43:33	0:0	6	stride
water	43:40	0:0	4	;
water	44:4	0:0	4	}
water	45:4	0:0	2	dst
op	45:7	0:0	2	->
water	45:9	0:0	2	nb_samples
op	45:20	0:0	2	+=
water	45:23	0:0	2	nb_samples
water	45:33	0:0	2	;
return	46:4	46:12	2	0
water	46:11	0:0	3	0
