func	1:0	74:0	0	static int	generate_interval
params	1:28	0:0	1	
param	1:29	1:38	2	void *	log
param	1:40	1:60	2	struct sbg_script *	s
param	2:29	2:55	2	struct ws_intervals *	inter
param	3:29	3:40	2	int64_t	ts1
param	3:42	3:53	2	int64_t	ts2
param	4:29	4:56	2	struct sbg_script_synth *	s1
param	5:29	5:56	2	struct sbg_script_synth *	s2
param	6:29	6:43	2	int	transition
stmnts	0:0	73:12	1	
decl	8:4	8:9	2	int	r
if	9:4	10:16	2	(ts2 <= ts1 || ( s1 -> vol == 0 && s2 -> vol == 0 ))
cond	9:8	9:51	3	ts2 <= ts1 || ( s1 -> vol == 0 && s2 -> vol == 0 )
water	9:8	0:0	4	ts2
op	9:12	0:0	4	<=
water	9:15	0:0	4	ts1
op	9:19	0:0	4	||
water	9:22	0:0	4	(
water	9:23	0:0	4	s1
op	9:25	0:0	4	->
water	9:27	0:0	4	vol
op	9:31	0:0	4	==
water	9:34	0:0	4	0
op	9:36	0:0	4	&&
water	9:39	0:0	4	s2
op	9:41	0:0	4	->
water	9:43	0:0	4	vol
op	9:47	0:0	4	==
water	9:50	0:0	4	0
water	9:51	0:0	4	)
stmts	10:8	10:16	3	
return	10:8	10:16	4	0
water	10:15	0:0	5	0
switch	11:4	72:4	2	(s1 -> type)
cond	11:12	11:16	3	s1 -> type
water	11:12	0:0	4	s1
op	11:14	0:0	4	->
water	11:16	0:0	4	type
stmts	11:22	72:4	3	
water	11:22	0:0	4	{
label	12:8	12:26	4	case SBG_TYPE_NONE :
break	13:12	13:17	4	
label	14:8	14:26	4	case SBG_TYPE_SINE :
if	15:12	22:12	4	(s1 -> beat == 0 && s2 -> beat == 0)
cond	15:16	15:45	5	s1 -> beat == 0 && s2 -> beat == 0
water	15:16	0:0	6	s1
op	15:18	0:0	6	->
water	15:20	0:0	6	beat
op	15:25	0:0	6	==
water	15:28	0:0	6	0
op	15:30	0:0	6	&&
water	15:33	0:0	6	s2
op	15:35	0:0	6	->
water	15:37	0:0	6	beat
op	15:42	0:0	6	==
water	15:45	0:0	6	0
stmts	15:48	22:12	5	
water	15:48	0:0	6	{
water	16:16	0:0	6	r
op	16:18	0:0	6	=
call	16:20	18:58	6	add_interval
arg	16:33	16:38	7	inter
water	16:33	0:0	8	inter
arg	16:40	16:47	7	WS_SINE
water	16:40	0:0	8	WS_SINE
arg	16:49	16:50	7	3
water	16:49	0:0	8	3
arg	16:52	16:61	7	s1->ref.l
water	16:52	0:0	8	s1
op	16:54	0:0	8	->
water	16:56	0:0	8	ref
op	16:59	0:0	8	.
water	16:60	0:0	8	l
arg	17:33	17:36	7	ts1
water	17:33	0:0	8	ts1
arg	17:38	17:49	7	s1->carrier
water	17:38	0:0	8	s1
op	17:40	0:0	8	->
water	17:42	0:0	8	carrier
arg	17:51	17:58	7	s1->vol
water	17:51	0:0	8	s1
op	17:53	0:0	8	->
water	17:55	0:0	8	vol
arg	18:33	18:36	7	ts2
water	18:33	0:0	8	ts2
arg	18:38	18:49	7	s2->carrier
water	18:38	0:0	8	s2
op	18:40	0:0	8	->
water	18:42	0:0	8	carrier
arg	18:51	18:58	7	s2->vol
water	18:51	0:0	8	s2
op	18:53	0:0	8	->
water	18:55	0:0	8	vol
water	18:59	0:0	6	;
if	19:16	20:28	6	(r < 0)
cond	19:20	19:24	7	r < 0
water	19:20	0:0	8	r
op	19:22	0:0	8	<
water	19:24	0:0	8	0
stmts	20:20	20:28	7	
return	20:20	20:28	8	r
water	20:27	0:0	9	r
water	21:16	0:0	6	s2
op	21:18	0:0	6	->
water	21:20	0:0	6	ref
op	21:23	0:0	6	.
water	21:24	0:0	6	l
op	21:26	0:0	6	=
water	21:28	0:0	6	s2
op	21:30	0:0	6	->
water	21:32	0:0	6	ref
op	21:35	0:0	6	.
water	21:36	0:0	6	r
op	21:38	0:0	6	=
water	21:40	0:0	6	r
water	21:41	0:0	6	;
water	22:12	0:0	6	}
else	22:14	35:12	4
stmts	22:19	35:12	5	
water	22:19	0:0	6	{
water	23:16	0:0	6	r
op	23:18	0:0	6	=
call	23:20	25:73	6	add_interval
arg	23:33	23:38	7	inter
water	23:33	0:0	8	inter
arg	23:40	23:47	7	WS_SINE
water	23:40	0:0	8	WS_SINE
arg	23:49	23:50	7	1
water	23:49	0:0	8	1
arg	23:52	23:61	7	s1->ref.l
water	23:52	0:0	8	s1
op	23:54	0:0	8	->
water	23:56	0:0	8	ref
op	23:59	0:0	8	.
water	23:60	0:0	8	l
arg	24:33	24:36	7	ts1
water	24:33	0:0	8	ts1
arg	24:38	24:64	7	s1->carrier+s1->beat/2
water	24:38	0:0	8	s1
op	24:40	0:0	8	->
water	24:42	0:0	8	carrier
op	24:50	0:0	8	+
water	24:52	0:0	8	s1
op	24:54	0:0	8	->
water	24:56	0:0	8	beat
op	24:61	0:0	8	/
water	24:63	0:0	8	2
arg	24:66	24:73	7	s1->vol
water	24:66	0:0	8	s1
op	24:68	0:0	8	->
water	24:70	0:0	8	vol
arg	25:33	25:36	7	ts2
water	25:33	0:0	8	ts2
arg	25:38	25:64	7	s2->carrier+s2->beat/2
water	25:38	0:0	8	s2
op	25:40	0:0	8	->
water	25:42	0:0	8	carrier
op	25:50	0:0	8	+
water	25:52	0:0	8	s2
op	25:54	0:0	8	->
water	25:56	0:0	8	beat
op	25:61	0:0	8	/
water	25:63	0:0	8	2
arg	25:66	25:73	7	s2->vol
water	25:66	0:0	8	s2
op	25:68	0:0	8	->
water	25:70	0:0	8	vol
water	25:74	0:0	6	;
if	26:16	27:28	6	(r < 0)
cond	26:20	26:24	7	r < 0
water	26:20	0:0	8	r
op	26:22	0:0	8	<
water	26:24	0:0	8	0
stmts	27:20	27:28	7	
return	27:20	27:28	8	r
water	27:27	0:0	9	r
water	28:16	0:0	6	s2
op	28:18	0:0	6	->
water	28:20	0:0	6	ref
op	28:23	0:0	6	.
water	28:24	0:0	6	l
op	28:26	0:0	6	=
water	28:28	0:0	6	r
water	28:29	0:0	6	;
water	29:16	0:0	6	r
op	29:18	0:0	6	=
call	29:20	31:73	6	add_interval
arg	29:33	29:38	7	inter
water	29:33	0:0	8	inter
arg	29:40	29:47	7	WS_SINE
water	29:40	0:0	8	WS_SINE
arg	29:49	29:50	7	2
water	29:49	0:0	8	2
arg	29:52	29:61	7	s1->ref.r
water	29:52	0:0	8	s1
op	29:54	0:0	8	->
water	29:56	0:0	8	ref
op	29:59	0:0	8	.
water	29:60	0:0	8	r
arg	30:33	30:36	7	ts1
water	30:33	0:0	8	ts1
arg	30:38	30:64	7	s1->carrier-s1->beat/2
water	30:38	0:0	8	s1
op	30:40	0:0	8	->
water	30:42	0:0	8	carrier
op	30:50	0:0	8	-
water	30:52	0:0	8	s1
op	30:54	0:0	8	->
water	30:56	0:0	8	beat
op	30:61	0:0	8	/
water	30:63	0:0	8	2
arg	30:66	30:73	7	s1->vol
water	30:66	0:0	8	s1
op	30:68	0:0	8	->
water	30:70	0:0	8	vol
arg	31:33	31:36	7	ts2
water	31:33	0:0	8	ts2
arg	31:38	31:64	7	s2->carrier-s2->beat/2
water	31:38	0:0	8	s2
op	31:40	0:0	8	->
water	31:42	0:0	8	carrier
op	31:50	0:0	8	-
water	31:52	0:0	8	s2
op	31:54	0:0	8	->
water	31:56	0:0	8	beat
op	31:61	0:0	8	/
water	31:63	0:0	8	2
arg	31:66	31:73	7	s2->vol
water	31:66	0:0	8	s2
op	31:68	0:0	8	->
water	31:70	0:0	8	vol
water	31:74	0:0	6	;
if	32:16	33:28	6	(r < 0)
cond	32:20	32:24	7	r < 0
water	32:20	0:0	8	r
op	32:22	0:0	8	<
water	32:24	0:0	8	0
stmts	33:20	33:28	7	
return	33:20	33:28	8	r
water	33:27	0:0	9	r
water	34:16	0:0	6	s2
op	34:18	0:0	6	->
water	34:20	0:0	6	ref
op	34:23	0:0	6	.
water	34:24	0:0	6	r
op	34:26	0:0	6	=
water	34:28	0:0	6	r
water	34:29	0:0	6	;
water	35:12	0:0	6	}
break	36:12	36:17	4	
label	37:8	37:26	4	case SBG_TYPE_BELL :
if	38:12	42:12	4	(transition == 2)
cond	38:16	38:30	5	transition == 2
water	38:16	0:0	6	transition
op	38:27	0:0	6	==
water	38:30	0:0	6	2
stmts	38:33	42:12	5	
water	38:33	0:0	6	{
water	39:16	0:0	6	r
op	39:18	0:0	6	=
call	39:20	39:69	6	add_bell
arg	39:29	39:34	7	inter
water	39:29	0:0	8	inter
arg	39:36	39:37	7	s
water	39:36	0:0	8	s
arg	39:39	39:42	7	ts1
water	39:39	0:0	8	ts1
arg	39:44	39:47	7	ts2
water	39:44	0:0	8	ts2
arg	39:49	39:60	7	s1->carrier
water	39:49	0:0	8	s1
op	39:51	0:0	8	->
water	39:53	0:0	8	carrier
arg	39:62	39:69	7	s2->vol
water	39:62	0:0	8	s2
op	39:64	0:0	8	->
water	39:66	0:0	8	vol
water	39:70	0:0	6	;
if	40:16	41:28	6	(r < 0)
cond	40:20	40:24	7	r < 0
water	40:20	0:0	8	r
op	40:22	0:0	8	<
water	40:24	0:0	8	0
stmts	41:20	41:28	7	
return	41:20	41:28	8	r
water	41:27	0:0	9	r
water	42:12	0:0	6	}
break	43:12	43:17	4	
label	44:8	44:26	4	case SBG_TYPE_SPIN :
call	45:12	46:69	4	av_log
arg	45:19	45:22	5	log
water	45:19	0:0	6	log
arg	45:24	45:38	5	AV_LOG_WARNING
water	45:24	0:0	6	AV_LOG_WARNING
arg	45:40	46:69	5	"Spinning noise not implemented, ""using pink noise instead.\n"
water	45:40	0:0	6	"Spinning noise not implemented, "
water	46:40	0:0	6	"using pink noise instead.\n"
water	46:70	0:0	4	;
label	48:8	48:27	4	case SBG_TYPE_NOISE :
water	59:12	0:0	4	r
op	59:14	0:0	4	=
call	59:16	61:58	4	add_interval
arg	59:29	59:34	5	inter
water	59:29	0:0	6	inter
arg	59:36	59:44	5	WS_NOISE
water	59:36	0:0	6	WS_NOISE
arg	59:46	59:47	5	3
water	59:46	0:0	6	3
arg	59:49	59:58	5	s1->ref.l
water	59:49	0:0	6	s1
op	59:51	0:0	6	->
water	59:53	0:0	6	ref
op	59:56	0:0	6	.
water	59:57	0:0	6	l
arg	60:29	60:32	5	ts1
water	60:29	0:0	6	ts1
arg	60:34	60:35	5	0
water	60:34	0:0	6	0
arg	60:37	60:58	5	s1->vol-s1->vol/4
water	60:37	0:0	6	s1
op	60:39	0:0	6	->
water	60:41	0:0	6	vol
op	60:45	0:0	6	-
water	60:47	0:0	6	s1
op	60:49	0:0	6	->
water	60:51	0:0	6	vol
op	60:55	0:0	6	/
water	60:57	0:0	6	4
arg	61:29	61:32	5	ts2
water	61:29	0:0	6	ts2
arg	61:34	61:35	5	0
water	61:34	0:0	6	0
arg	61:37	61:58	5	s2->vol-s2->vol/4
water	61:37	0:0	6	s2
op	61:39	0:0	6	->
water	61:41	0:0	6	vol
op	61:45	0:0	6	-
water	61:47	0:0	6	s2
op	61:49	0:0	6	->
water	61:51	0:0	6	vol
op	61:55	0:0	6	/
water	61:57	0:0	6	4
water	61:59	0:0	4	;
if	62:12	63:24	4	(r < 0)
cond	62:16	62:20	5	r < 0
water	62:16	0:0	6	r
op	62:18	0:0	6	<
water	62:20	0:0	6	0
stmts	63:16	63:24	5	
return	63:16	63:24	6	r
water	63:23	0:0	7	r
water	64:12	0:0	4	s2
op	64:14	0:0	4	->
water	64:16	0:0	4	ref
op	64:19	0:0	4	.
water	64:20	0:0	4	l
op	64:22	0:0	4	=
water	64:24	0:0	4	s2
op	64:26	0:0	4	->
water	64:28	0:0	4	ref
op	64:31	0:0	4	.
water	64:32	0:0	4	r
op	64:34	0:0	4	=
water	64:36	0:0	4	r
water	64:37	0:0	4	;
break	65:12	65:17	4	
label	66:8	66:25	4	case SBG_TYPE_MIX :
label	68:8	68:15	4	default :
call	69:12	70:59	4	av_log
arg	69:19	69:22	5	log
water	69:19	0:0	6	log
arg	69:24	69:36	5	AV_LOG_ERROR
water	69:24	0:0	6	AV_LOG_ERROR
arg	70:19	70:49	5	"Type %d is not implemented\n"
water	70:19	0:0	6	"Type %d is not implemented\n"
arg	70:51	70:59	5	s1->type
water	70:51	0:0	6	s1
op	70:53	0:0	6	->
water	70:55	0:0	6	type
water	70:60	0:0	4	;
return	71:12	71:39	4	AVERROR_PATCHWELCOME
water	71:19	0:0	5	AVERROR_PATCHWELCOME
water	72:4	0:0	4	}
return	73:4	73:12	2	0
water	73:11	0:0	3	0
