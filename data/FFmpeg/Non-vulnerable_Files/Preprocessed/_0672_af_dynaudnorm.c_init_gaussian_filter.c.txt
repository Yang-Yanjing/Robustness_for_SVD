decl	1:7	1:129	0	const double	s_pi
op	1:25	0:0	0	=
water	1:27	0:0	0	3
op	1:28	0:0	0	.
water	1:29	0:0	0	1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679
func	2:0	23:0	0	static void	init_gaussian_filter
params	2:32	0:0	1	
param	2:33	2:65	2	DynamicAudioNormalizerContext *	s
stmnts	0:0	22:4	1	
decl	4:4	4:29	2	double	total_weight
op	4:24	0:0	2	=
water	4:26	0:0	2	0
op	4:27	0:0	2	.
water	4:28	0:0	2	0
decl	5:4	5:77	2	const double	sigma
op	5:23	0:0	2	=
water	5:25	0:0	2	(
water	5:26	0:0	2	(
water	5:27	0:0	2	(
water	5:28	0:0	2	s
op	5:29	0:0	2	->
water	5:31	0:0	2	filter_size
op	5:43	0:0	2	/
water	5:45	0:0	2	2
op	5:46	0:0	2	.
water	5:47	0:0	2	0
water	5:48	0:0	2	)
op	5:50	0:0	2	-
water	5:52	0:0	2	1
op	5:53	0:0	2	.
water	5:54	0:0	2	0
water	5:55	0:0	2	)
op	5:57	0:0	2	/
water	5:59	0:0	2	3
op	5:60	0:0	2	.
water	5:61	0:0	2	0
water	5:62	0:0	2	)
op	5:64	0:0	2	+
water	5:66	0:0	2	(
water	5:67	0:0	2	1
op	5:68	0:0	2	.
water	5:69	0:0	2	0
op	5:71	0:0	2	/
water	5:73	0:0	2	3
op	5:74	0:0	2	.
water	5:75	0:0	2	0
water	5:76	0:0	2	)
decl	6:4	6:17	2	double	adjust
decl	7:4	7:9	2	int	i
decl	9:4	9:41	2	const int	offset
op	9:21	0:0	2	=
water	9:23	0:0	2	s
op	9:24	0:0	2	->
water	9:26	0:0	2	filter_size
op	9:38	0:0	2	/
water	9:40	0:0	2	2
decl	10:4	10:54	2	const double	c1
op	10:20	0:0	2	=
water	10:22	0:0	2	1
op	10:23	0:0	2	.
water	10:24	0:0	2	0
op	10:26	0:0	2	/
water	10:28	0:0	2	(
water	10:29	0:0	2	sigma
call	10:35	10:52	3	*sqrt
arg	10:42	10:52	4	2.0*s_pi
water	10:42	0:0	5	2
op	10:43	0:0	5	.
water	10:44	0:0	5	0
op	10:46	0:0	5	*
water	10:48	0:0	5	s_pi
water	10:53	0:0	2	)
decl	11:4	11:43	2	const double	c2
op	11:20	0:0	2	=
water	11:22	0:0	2	2
op	11:23	0:0	2	.
water	11:24	0:0	2	0
call	11:26	11:42	3	*pow
arg	11:32	11:37	4	sigma
water	11:32	0:0	5	sigma
arg	11:39	11:42	4	2.0
water	11:39	0:0	5	2
op	11:40	0:0	5	.
water	11:41	0:0	5	0
for	13:4	17:4	2	(i = 0 ;i < s -> filter_size;i ++)
forinit	13:9	13:14	3	i = 0 ;
water	13:9	0:0	4	i
op	13:11	0:0	4	=
water	13:13	0:0	4	0
water	13:14	0:0	4	;
cond	13:16	13:23	3	i < s -> filter_size
water	13:16	0:0	4	i
op	13:18	0:0	4	<
water	13:20	0:0	4	s
op	13:21	0:0	4	->
water	13:23	0:0	4	filter_size
forexpr	13:36	13:37	3	i ++
water	13:36	0:0	4	i
op	13:37	0:0	4	++
stmts	13:41	17:4	3	
water	13:41	0:0	4	{
decl	14:8	14:32	4	const int	x
op	14:20	0:0	4	=
water	14:22	0:0	4	i
op	14:24	0:0	4	-
water	14:26	0:0	4	offset
water	15:8	0:0	4	s
op	15:9	0:0	4	->
water	15:11	0:0	4	weights
op	15:18	0:0	4	[
water	15:19	0:0	4	i
op	15:20	0:0	4	]
op	15:22	0:0	4	=
water	15:24	0:0	4	c1
call	15:27	15:52	4	*exp
arg	15:33	15:52	5	-(pow(x,2.0)/c2)
op	15:33	0:0	6	-
water	15:34	0:0	6	(
call	15:35	15:45	6	pow
arg	15:39	15:40	7	x
water	15:39	0:0	8	x
arg	15:42	15:45	7	2.0
water	15:42	0:0	8	2
op	15:43	0:0	8	.
water	15:44	0:0	8	0
op	15:47	0:0	6	/
water	15:49	0:0	6	c2
water	15:51	0:0	6	)
water	15:53	0:0	4	;
water	16:8	0:0	4	total_weight
op	16:21	0:0	4	+=
water	16:24	0:0	4	s
op	16:25	0:0	4	->
water	16:27	0:0	4	weights
op	16:34	0:0	4	[
water	16:35	0:0	4	i
op	16:36	0:0	4	]
water	16:37	0:0	4	;
water	17:4	0:0	4	}
water	19:4	0:0	2	adjust
op	19:11	0:0	2	=
water	19:13	0:0	2	1
op	19:14	0:0	2	.
water	19:15	0:0	2	0
op	19:17	0:0	2	/
water	19:19	0:0	2	total_weight
water	19:31	0:0	2	;
for	20:4	22:4	2	(i = 0 ;i < s -> filter_size;i ++)
forinit	20:9	20:14	3	i = 0 ;
water	20:9	0:0	4	i
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:23	3	i < s -> filter_size
water	20:16	0:0	4	i
op	20:18	0:0	4	<
water	20:20	0:0	4	s
op	20:21	0:0	4	->
water	20:23	0:0	4	filter_size
forexpr	20:36	20:37	3	i ++
water	20:36	0:0	4	i
op	20:37	0:0	4	++
stmts	20:41	22:4	3	
water	20:41	0:0	4	{
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	weights
op	21:18	0:0	4	[
water	21:19	0:0	4	i
op	21:20	0:0	4	]
op	21:22	0:0	4	*=
water	21:25	0:0	4	adjust
water	21:31	0:0	4	;
water	22:4	0:0	4	}
