func	1:0	196:0	0	static void	adpcm_compress_trellis
params	1:34	0:0	1	
param	1:35	1:56	2	AVCodecContext *	avctx
param	2:35	2:57	2	const int16_t *	samples
param	2:59	2:71	2	uint8_t *	dst
param	3:35	3:56	2	ADPCMChannelStatus *	c
param	3:58	3:63	2	int	n
param	3:65	3:75	2	int	stride
stmnts	0:0	195:34	1	
decl	6:4	6:44	2	ADPCMEncodeContext	*s
op	6:26	0:0	2	=
water	6:28	0:0	2	avctx
op	6:33	0:0	2	->
water	6:35	0:0	2	priv_data
decl	7:4	7:44	2	const int	frontier
op	7:23	0:0	2	=
water	7:25	0:0	2	1
op	7:27	0:0	2	<<
water	7:30	0:0	2	avctx
op	7:35	0:0	2	->
water	7:37	0:0	2	trellis
decl	8:4	8:41	2	const int	version
op	8:23	0:0	2	=
water	8:25	0:0	2	avctx
op	8:30	0:0	2	->
water	8:32	0:0	2	codec
op	8:37	0:0	2	->
water	8:39	0:0	2	id
decl	9:4	9:43	2	TrellisPath	*paths
op	9:29	0:0	2	=
water	9:31	0:0	2	s
op	9:32	0:0	2	->
water	9:34	0:0	2	paths
water	9:39	0:0	2	,
decl	9:4	9:43	2	TrellisPath	*p
decl	10:4	10:42	2	TrellisNode	*node_buf
op	10:29	0:0	2	=
water	10:31	0:0	2	s
op	10:32	0:0	2	->
water	10:34	0:0	2	node_buf
decl	11:4	11:43	2	TrellisNode	**nodep_buf
op	11:29	0:0	2	=
water	11:31	0:0	2	s
op	11:32	0:0	2	->
water	11:34	0:0	2	nodep_buf
decl	12:4	12:40	2	TrellisNode	**nodes
op	12:29	0:0	2	=
water	12:31	0:0	2	nodep_buf
decl	13:4	13:51	2	TrellisNode	**nodes_next
op	13:29	0:0	2	=
water	13:31	0:0	2	nodep_buf
op	13:41	0:0	2	+
water	13:43	0:0	2	frontier
decl	14:4	14:54	2	int	pathn
op	14:14	0:0	2	=
water	14:16	0:0	2	0
water	14:17	0:0	2	,
decl	14:4	14:54	2	int	froze
op	14:25	0:0	2	=
op	14:27	0:0	2	-
water	14:28	0:0	2	1
water	14:29	0:0	2	,
decl	14:4	14:54	2	int	i
water	14:32	0:0	2	,
decl	14:4	14:54	2	int	j
water	14:35	0:0	2	,
decl	14:4	14:54	2	int	k
water	14:38	0:0	2	,
decl	14:4	14:54	2	int	generation
op	14:51	0:0	2	=
water	14:53	0:0	2	0
decl	15:4	15:35	2	uint8_t	*hash
op	15:18	0:0	2	=
water	15:20	0:0	2	s
op	15:21	0:0	2	->
water	15:23	0:0	2	trellis_hash
call	16:4	16:44	2	memset
arg	16:11	16:15	3	hash
water	16:11	0:0	4	hash
arg	16:17	16:21	3	0xff
water	16:17	0:0	4	0
water	16:18	0:0	4	xff
arg	16:23	16:44	3	65536*sizeof(*hash)
water	16:23	0:0	4	65536
op	16:29	0:0	4	*
op	16:31	0:0	4	sizeof
water	16:37	0:0	4	(
op	16:38	0:0	4	*
water	16:39	0:0	4	hash
water	16:43	0:0	4	)
water	16:45	0:0	2	;
call	17:4	17:58	2	memset
arg	17:11	17:20	3	nodep_buf
water	17:11	0:0	4	nodep_buf
arg	17:22	17:23	3	0
water	17:22	0:0	4	0
arg	17:25	17:58	3	2*frontier*sizeof(*nodep_buf)
water	17:25	0:0	4	2
op	17:27	0:0	4	*
water	17:29	0:0	4	frontier
op	17:38	0:0	4	*
op	17:40	0:0	4	sizeof
water	17:46	0:0	4	(
op	17:47	0:0	4	*
water	17:48	0:0	4	nodep_buf
water	17:57	0:0	4	)
water	17:59	0:0	2	;
water	18:4	0:0	2	nodes
op	18:9	0:0	2	[
water	18:10	0:0	2	0
op	18:11	0:0	2	]
op	18:22	0:0	2	=
water	18:24	0:0	2	node_buf
op	18:33	0:0	2	+
water	18:35	0:0	2	frontier
water	18:43	0:0	2	;
water	19:4	0:0	2	nodes
op	19:9	0:0	2	[
water	19:10	0:0	2	0
op	19:11	0:0	2	]
op	19:12	0:0	2	->
water	19:14	0:0	2	ssd
op	19:22	0:0	2	=
water	19:24	0:0	2	0
water	19:25	0:0	2	;
water	20:4	0:0	2	nodes
op	20:9	0:0	2	[
water	20:10	0:0	2	0
op	20:11	0:0	2	]
op	20:12	0:0	2	->
water	20:14	0:0	2	path
op	20:22	0:0	2	=
water	20:24	0:0	2	0
water	20:25	0:0	2	;
water	21:4	0:0	2	nodes
op	21:9	0:0	2	[
water	21:10	0:0	2	0
op	21:11	0:0	2	]
op	21:12	0:0	2	->
water	21:14	0:0	2	step
op	21:22	0:0	2	=
water	21:24	0:0	2	c
op	21:25	0:0	2	->
water	21:27	0:0	2	step_index
water	21:37	0:0	2	;
water	22:4	0:0	2	nodes
op	22:9	0:0	2	[
water	22:10	0:0	2	0
op	22:11	0:0	2	]
op	22:12	0:0	2	->
water	22:14	0:0	2	sample1
op	22:22	0:0	2	=
water	22:24	0:0	2	c
op	22:25	0:0	2	->
water	22:27	0:0	2	sample1
water	22:34	0:0	2	;
water	23:4	0:0	2	nodes
op	23:9	0:0	2	[
water	23:10	0:0	2	0
op	23:11	0:0	2	]
op	23:12	0:0	2	->
water	23:14	0:0	2	sample2
op	23:22	0:0	2	=
water	23:24	0:0	2	c
op	23:25	0:0	2	->
water	23:27	0:0	2	sample2
water	23:34	0:0	2	;
if	24:4	27:42	2	(version == AV_CODEC_ID_ADPCM_IMA_WAV || version == AV_CODEC_ID_ADPCM_IMA_QT || version == AV_CODEC_ID_ADPCM_SWF)
cond	24:8	26:19	3	version == AV_CODEC_ID_ADPCM_IMA_WAV || version == AV_CODEC_ID_ADPCM_IMA_QT || version == AV_CODEC_ID_ADPCM_SWF
water	24:8	0:0	4	version
op	24:16	0:0	4	==
water	24:19	0:0	4	AV_CODEC_ID_ADPCM_IMA_WAV
op	24:45	0:0	4	||
water	25:8	0:0	4	version
op	25:16	0:0	4	==
water	25:19	0:0	4	AV_CODEC_ID_ADPCM_IMA_QT
op	25:45	0:0	4	||
water	26:8	0:0	4	version
op	26:16	0:0	4	==
water	26:19	0:0	4	AV_CODEC_ID_ADPCM_SWF
stmts	27:8	27:42	3	
water	27:8	0:0	4	nodes
op	27:13	0:0	4	[
water	27:14	0:0	4	0
op	27:15	0:0	4	]
op	27:16	0:0	4	->
water	27:18	0:0	4	sample1
op	27:26	0:0	4	=
water	27:28	0:0	4	c
op	27:29	0:0	4	->
water	27:31	0:0	4	prev_sample
water	27:42	0:0	4	;
if	28:4	29:34	2	(version == AV_CODEC_ID_ADPCM_MS)
cond	28:8	28:19	3	version == AV_CODEC_ID_ADPCM_MS
water	28:8	0:0	4	version
op	28:16	0:0	4	==
water	28:19	0:0	4	AV_CODEC_ID_ADPCM_MS
stmts	29:8	29:34	3	
water	29:8	0:0	4	nodes
op	29:13	0:0	4	[
water	29:14	0:0	4	0
op	29:15	0:0	4	]
op	29:16	0:0	4	->
water	29:18	0:0	4	step
op	29:23	0:0	4	=
water	29:25	0:0	4	c
op	29:26	0:0	4	->
water	29:28	0:0	4	idelta
water	29:34	0:0	4	;
if	30:4	38:4	2	(version == AV_CODEC_ID_ADPCM_YAMAHA)
cond	30:8	30:19	3	version == AV_CODEC_ID_ADPCM_YAMAHA
water	30:8	0:0	4	version
op	30:16	0:0	4	==
water	30:19	0:0	4	AV_CODEC_ID_ADPCM_YAMAHA
stmts	30:45	38:4	3	
water	30:45	0:0	4	{
if	31:8	34:8	4	(c -> step == 0)
cond	31:12	31:23	5	c -> step == 0
water	31:12	0:0	6	c
op	31:13	0:0	6	->
water	31:15	0:0	6	step
op	31:20	0:0	6	==
water	31:23	0:0	6	0
stmts	31:26	34:8	5	
water	31:26	0:0	6	{
water	32:12	0:0	6	nodes
op	32:17	0:0	6	[
water	32:18	0:0	6	0
op	32:19	0:0	6	]
op	32:20	0:0	6	->
water	32:22	0:0	6	step
op	32:30	0:0	6	=
water	32:32	0:0	6	127
water	32:35	0:0	6	;
water	33:12	0:0	6	nodes
op	33:17	0:0	6	[
water	33:18	0:0	6	0
op	33:19	0:0	6	]
op	33:20	0:0	6	->
water	33:22	0:0	6	sample1
op	33:30	0:0	6	=
water	33:32	0:0	6	0
water	33:33	0:0	6	;
water	34:8	0:0	6	}
else	34:10	37:8	4
stmts	34:15	37:8	5	
water	34:15	0:0	6	{
water	35:12	0:0	6	nodes
op	35:17	0:0	6	[
water	35:18	0:0	6	0
op	35:19	0:0	6	]
op	35:20	0:0	6	->
water	35:22	0:0	6	step
op	35:30	0:0	6	=
water	35:32	0:0	6	c
op	35:33	0:0	6	->
water	35:35	0:0	6	step
water	35:39	0:0	6	;
water	36:12	0:0	6	nodes
op	36:17	0:0	6	[
water	36:18	0:0	6	0
op	36:19	0:0	6	]
op	36:20	0:0	6	->
water	36:22	0:0	6	sample1
op	36:30	0:0	6	=
water	36:32	0:0	6	c
op	36:33	0:0	6	->
water	36:35	0:0	6	predictor
water	36:44	0:0	6	;
water	37:8	0:0	6	}
water	38:4	0:0	4	}
for	39:4	184:4	2	(i = 0 ;i < n;i ++)
forinit	39:9	39:14	3	i = 0 ;
water	39:9	0:0	4	i
op	39:11	0:0	4	=
water	39:13	0:0	4	0
water	39:14	0:0	4	;
cond	39:16	39:20	3	i < n
water	39:16	0:0	4	i
op	39:18	0:0	4	<
water	39:20	0:0	4	n
forexpr	39:23	39:24	3	i ++
water	39:23	0:0	4	i
op	39:24	0:0	4	++
stmts	39:28	184:4	3	
water	39:28	0:0	4	{
decl	40:8	40:50	4	TrellisNode	*t
op	40:23	0:0	4	=
water	40:25	0:0	4	node_buf
op	40:34	0:0	4	+
water	40:36	0:0	4	frontier
op	40:44	0:0	4	*
water	40:45	0:0	4	(
water	40:46	0:0	4	i
op	40:47	0:0	4	&
water	40:48	0:0	4	1
water	40:49	0:0	4	)
decl	41:8	41:23	4	TrellisNode	**u
decl	42:8	42:42	4	int	sample
op	42:21	0:0	4	=
water	42:23	0:0	4	samples
op	42:30	0:0	4	[
water	42:31	0:0	4	i
op	42:33	0:0	4	*
water	42:35	0:0	4	stride
op	42:41	0:0	4	]
decl	43:8	43:24	4	int	heap_pos
op	43:21	0:0	4	=
water	43:23	0:0	4	0
call	44:8	44:61	4	memset
arg	44:15	44:25	5	nodes_next
water	44:15	0:0	6	nodes_next
arg	44:27	44:28	5	0
water	44:27	0:0	6	0
arg	44:30	44:61	5	frontier*sizeof(TrellisNode*)
water	44:30	0:0	6	frontier
op	44:39	0:0	6	*
op	44:41	0:0	6	sizeof
water	44:47	0:0	6	(
water	44:48	0:0	6	TrellisNode
op	44:59	0:0	6	*
water	44:60	0:0	6	)
water	44:62	0:0	4	;
for	45:8	155:8	4	(j = 0 ;j < frontier && nodes [ j ];j ++)
forinit	45:13	45:18	5	j = 0 ;
water	45:13	0:0	6	j
op	45:15	0:0	6	=
water	45:17	0:0	6	0
water	45:18	0:0	6	;
cond	45:20	45:43	5	j < frontier && nodes [ j ]
water	45:20	0:0	6	j
op	45:22	0:0	6	<
water	45:24	0:0	6	frontier
op	45:33	0:0	6	&&
water	45:36	0:0	6	nodes
op	45:41	0:0	6	[
water	45:42	0:0	6	j
op	45:43	0:0	6	]
forexpr	45:46	45:47	5	j ++
water	45:46	0:0	6	j
op	45:47	0:0	6	++
stmts	45:51	155:8	5	
water	45:51	0:0	6	{
decl	48:12	48:56	6	const int	range
op	48:28	0:0	6	=
water	48:30	0:0	6	(
water	48:31	0:0	6	j
op	48:33	0:0	6	<
water	48:35	0:0	6	frontier
op	48:44	0:0	6	/
water	48:46	0:0	6	2
water	48:47	0:0	6	)
water	48:49	0:0	6	?
water	48:51	0:0	6	1
water	48:53	0:0	6	:
water	48:55	0:0	6	0
decl	49:12	49:44	6	const int	step
op	49:28	0:0	6	=
water	49:30	0:0	6	nodes
op	49:35	0:0	6	[
water	49:36	0:0	6	j
op	49:37	0:0	6	]
op	49:38	0:0	6	->
water	49:40	0:0	6	step
decl	50:12	50:20	6	int	nidx
if	51:12	127:12	6	(version == AV_CODEC_ID_ADPCM_MS)
cond	51:16	51:27	7	version == AV_CODEC_ID_ADPCM_MS
water	51:16	0:0	8	version
op	51:24	0:0	8	==
water	51:27	0:0	8	AV_CODEC_ID_ADPCM_MS
stmts	51:49	127:12	7	
water	51:49	0:0	8	{
decl	52:16	53:76	8	const int	predictor
op	52:36	0:0	8	=
water	52:38	0:0	8	(
water	52:39	0:0	8	(
water	52:40	0:0	8	nodes
op	52:45	0:0	8	[
water	52:46	0:0	8	j
op	52:47	0:0	8	]
op	52:48	0:0	8	->
water	52:50	0:0	8	sample1
op	52:58	0:0	8	*
water	52:60	0:0	8	c
op	52:61	0:0	8	->
water	52:63	0:0	8	coeff1
water	52:69	0:0	8	)
op	52:71	0:0	8	+
water	53:39	0:0	8	(
water	53:40	0:0	8	nodes
op	53:45	0:0	8	[
water	53:46	0:0	8	j
op	53:47	0:0	8	]
op	53:48	0:0	8	->
water	53:50	0:0	8	sample2
op	53:58	0:0	8	*
water	53:60	0:0	8	c
op	53:61	0:0	8	->
water	53:63	0:0	8	coeff2
water	53:69	0:0	8	)
water	53:70	0:0	8	)
op	53:72	0:0	8	/
water	53:74	0:0	8	64
decl	54:16	54:60	8	const int	div
op	54:31	0:0	8	=
water	54:33	0:0	8	(
water	54:34	0:0	8	sample
op	54:41	0:0	8	-
water	54:43	0:0	8	predictor
water	54:52	0:0	8	)
op	54:54	0:0	8	/
water	54:56	0:0	8	step
decl	55:16	55:58	8	const int	nmin
op	55:31	0:0	8	=
call	55:33	55:57	9	av_clip
arg	55:41	55:50	10	div-range
water	55:41	0:0	11	div
op	55:44	0:0	11	-
water	55:45	0:0	11	range
arg	55:52	55:54	10	-8
op	55:52	0:0	11	-
water	55:53	0:0	11	8
arg	55:56	55:57	10	6
water	55:56	0:0	11	6
decl	56:16	56:58	8	const int	nmax
op	56:31	0:0	8	=
call	56:33	56:57	9	av_clip
arg	56:41	56:50	10	div+range
water	56:41	0:0	11	div
op	56:44	0:0	11	+
water	56:45	0:0	11	range
arg	56:52	56:54	10	-7
op	56:52	0:0	11	-
water	56:53	0:0	11	7
arg	56:56	56:57	10	7
water	56:56	0:0	11	7
for	57:16	126:16	8	(nidx = nmin ;nidx <= nmax;nidx ++)
forinit	57:21	57:32	9	nidx = nmin ;
water	57:21	0:0	10	nidx
op	57:26	0:0	10	=
water	57:28	0:0	10	nmin
water	57:32	0:0	10	;
cond	57:34	57:42	9	nidx <= nmax
water	57:34	0:0	10	nidx
op	57:39	0:0	10	<=
water	57:42	0:0	10	nmax
forexpr	57:48	57:52	9	nidx ++
water	57:48	0:0	10	nidx
op	57:52	0:0	10	++
stmts	57:56	126:16	9	
water	57:56	0:0	10	{
decl	58:20	58:49	10	const int	nibble
op	58:37	0:0	10	=
water	58:39	0:0	10	nidx
op	58:44	0:0	10	&
water	58:46	0:0	10	0
water	58:47	0:0	10	xf
decl	59:20	59:62	10	int	dec_sample
op	59:37	0:0	10	=
water	59:39	0:0	10	predictor
op	59:49	0:0	10	+
water	59:51	0:0	10	nidx
op	59:56	0:0	10	*
water	59:58	0:0	10	step
decl	61:20	61:25	10	int	d
decl	62:20	62:32	10	uint32_t	ssd
decl	63:20	63:27	10	int	pos
decl	64:20	64:34	10	TrellisNode	*u
decl	65:20	65:30	10	uint8_t	*h
water	66:20	0:0	10	dec_sample
op	66:31	0:0	10	=
call	66:33	66:57	10	av_clip_int16
arg	66:47	66:57	11	dec_sample
water	66:47	0:0	12	dec_sample
water	66:58	0:0	10	;
water	67:20	0:0	10	d
op	67:22	0:0	10	=
water	67:24	0:0	10	sample
op	67:31	0:0	10	-
water	67:33	0:0	10	dec_sample
water	67:43	0:0	10	;
water	68:20	0:0	10	ssd
op	68:24	0:0	10	=
water	68:26	0:0	10	nodes
op	68:31	0:0	10	[
water	68:32	0:0	10	j
op	68:33	0:0	10	]
op	68:34	0:0	10	->
water	68:36	0:0	10	ssd
op	68:40	0:0	10	+
water	68:42	0:0	10	d
op	68:43	0:0	10	*
water	68:44	0:0	10	(
water	68:45	0:0	10	unsigned
water	68:53	0:0	10	)
water	68:54	0:0	10	d
water	68:55	0:0	10	;
if	73:20	86:52	10	(ssd < nodes [ j ] -> ssd)
cond	73:24	73:40	11	ssd < nodes [ j ] -> ssd
water	73:24	0:0	12	ssd
op	73:28	0:0	12	<
water	73:30	0:0	12	nodes
op	73:35	0:0	12	[
water	73:36	0:0	12	j
op	73:37	0:0	12	]
op	73:38	0:0	12	->
water	73:40	0:0	12	ssd
stmts	74:24	86:52	11	
water	74:24	0:0	12	goto
water	74:29	0:0	12	next_
water	86:20	0:0	12	h
op	86:22	0:0	12	=
op	86:24	0:0	12	&
water	86:25	0:0	12	hash
op	86:29	0:0	12	[
water	86:30	0:0	12	(
water	86:31	0:0	12	uint16_t
water	86:39	0:0	12	)
water	86:41	0:0	12	dec_sample
op	86:51	0:0	12	]
water	86:52	0:0	12	;
if	87:20	100:35	10	(* h == generation)
cond	87:24	87:30	11	* h == generation
op	87:24	0:0	12	*
water	87:25	0:0	12	h
op	87:27	0:0	12	==
water	87:30	0:0	12	generation
stmts	88:24	100:35	11	
water	88:24	0:0	12	goto
water	88:29	0:0	12	next_
water	89:20	0:0	12	if
water	89:23	0:0	12	(
water	89:24	0:0	12	heap_pos
op	89:33	0:0	12	<
water	89:35	0:0	12	frontier
water	89:43	0:0	12	)
water	89:45	0:0	12	{
water	90:24	0:0	12	pos
op	90:28	0:0	12	=
water	90:30	0:0	12	heap_pos
op	90:38	0:0	12	++
water	90:40	0:0	12	;
water	91:20	0:0	12	}
water	91:22	0:0	12	else
water	91:27	0:0	12	{
water	94:24	0:0	12	pos
op	94:28	0:0	12	=
water	94:30	0:0	12	(
water	94:31	0:0	12	frontier
op	94:40	0:0	12	>>
water	94:43	0:0	12	1
water	94:44	0:0	12	)
op	94:46	0:0	12	+
water	95:30	0:0	12	(
water	95:31	0:0	12	heap_pos
op	95:40	0:0	12	&
water	95:42	0:0	12	(
water	95:43	0:0	12	(
water	95:44	0:0	12	frontier
op	95:53	0:0	12	>>
water	95:56	0:0	12	1
water	95:57	0:0	12	)
op	95:59	0:0	12	-
water	95:61	0:0	12	1
water	95:62	0:0	12	)
water	95:63	0:0	12	)
water	95:64	0:0	12	;
water	96:24	0:0	12	if
water	96:27	0:0	12	(
water	96:28	0:0	12	ssd
op	96:32	0:0	12	>
water	96:34	0:0	12	nodes_next
op	96:44	0:0	12	[
water	96:45	0:0	12	pos
op	96:48	0:0	12	]
op	96:49	0:0	12	->
water	96:51	0:0	12	ssd
water	96:54	0:0	12	)
water	97:28	0:0	12	goto
water	97:33	0:0	12	next_
water	98:24	0:0	12	heap_pos
op	98:32	0:0	12	++
water	98:34	0:0	12	;
water	99:20	0:0	12	}
op	100:20	0:0	12	*
water	100:21	0:0	12	h
op	100:23	0:0	12	=
water	100:25	0:0	12	generation
water	100:35	0:0	12	;
water	101:20	0:0	10	u
op	101:23	0:0	10	=
water	101:25	0:0	10	nodes_next
op	101:35	0:0	10	[
water	101:36	0:0	10	pos
op	101:39	0:0	10	]
water	101:40	0:0	10	;
if	102:20	107:20	10	(! u)
cond	102:24	102:25	11	! u
op	102:24	0:0	12	!
water	102:25	0:0	12	u
stmts	102:28	107:20	11	
water	102:28	0:0	12	{
call	103:24	103:76	12	av_assert1
arg	103:35	103:76	13	pathn<FREEZE_INTERVAL<<avctx->trellis
water	103:35	0:0	14	pathn
op	103:41	0:0	14	<
water	103:43	0:0	14	FREEZE_INTERVAL
op	103:59	0:0	14	<<
water	103:62	0:0	14	avctx
op	103:67	0:0	14	->
water	103:69	0:0	14	trellis
water	103:77	0:0	12	;
water	104:24	0:0	12	u
op	104:26	0:0	12	=
water	104:28	0:0	12	t
op	104:29	0:0	12	++
water	104:31	0:0	12	;
water	105:24	0:0	12	nodes_next
op	105:34	0:0	12	[
water	105:35	0:0	12	pos
op	105:38	0:0	12	]
op	105:40	0:0	12	=
water	105:42	0:0	12	u
water	105:43	0:0	12	;
water	106:24	0:0	12	u
op	106:25	0:0	12	->
water	106:27	0:0	12	path
op	106:32	0:0	12	=
water	106:34	0:0	12	pathn
op	106:39	0:0	12	++
water	106:41	0:0	12	;
water	107:20	0:0	12	}
water	108:20	0:0	10	u
op	108:21	0:0	10	->
water	108:23	0:0	10	ssd
op	108:28	0:0	10	=
water	108:30	0:0	10	ssd
water	108:33	0:0	10	;
water	109:20	0:0	10	u
op	109:21	0:0	10	->
water	109:23	0:0	10	step
op	109:28	0:0	10	=
water	109:30	0:0	10	STEP_INDEX
water	109:40	0:0	10	;
water	110:20	0:0	10	u
op	110:21	0:0	10	->
water	110:23	0:0	10	sample2
op	110:31	0:0	10	=
water	110:33	0:0	10	nodes
op	110:38	0:0	10	[
water	110:39	0:0	10	j
op	110:40	0:0	10	]
op	110:41	0:0	10	->
water	110:43	0:0	10	sample1
water	110:50	0:0	10	;
water	111:20	0:0	10	u
op	111:21	0:0	10	->
water	111:23	0:0	10	sample1
op	111:31	0:0	10	=
water	111:33	0:0	10	dec_sample
water	111:43	0:0	10	;
water	112:20	0:0	10	paths
op	112:25	0:0	10	[
water	112:26	0:0	10	u
op	112:27	0:0	10	->
water	112:29	0:0	10	path
op	112:33	0:0	10	]
op	112:34	0:0	10	.
water	112:35	0:0	10	nibble
op	112:42	0:0	10	=
water	112:44	0:0	10	nibble
water	112:50	0:0	10	;
water	113:20	0:0	10	paths
op	113:25	0:0	10	[
water	113:26	0:0	10	u
op	113:27	0:0	10	->
water	113:29	0:0	10	path
op	113:33	0:0	10	]
op	113:34	0:0	10	.
water	113:35	0:0	10	prev
op	113:42	0:0	10	=
water	113:44	0:0	10	nodes
op	113:49	0:0	10	[
water	113:50	0:0	10	j
op	113:51	0:0	10	]
op	113:52	0:0	10	->
water	113:54	0:0	10	path
water	113:58	0:0	10	;
while	116:20	122:20	10	(pos > 0)
cond	116:27	116:33	11	pos > 0
water	116:27	0:0	12	pos
op	116:31	0:0	12	>
water	116:33	0:0	12	0
stmts	116:36	122:20	11	
water	116:36	0:0	12	{
decl	117:24	117:51	12	int	parent
op	117:35	0:0	12	=
water	117:37	0:0	12	(
water	117:38	0:0	12	pos
op	117:42	0:0	12	-
water	117:44	0:0	12	1
water	117:45	0:0	12	)
op	117:47	0:0	12	>>
water	117:50	0:0	12	1
if	118:24	119:33	12	(nodes_next [ parent ] -> ssd <= ssd)
cond	118:28	118:55	13	nodes_next [ parent ] -> ssd <= ssd
water	118:28	0:0	14	nodes_next
op	118:38	0:0	14	[
water	118:39	0:0	14	parent
op	118:45	0:0	14	]
op	118:46	0:0	14	->
water	118:48	0:0	14	ssd
op	118:52	0:0	14	<=
water	118:55	0:0	14	ssd
stmts	119:28	119:33	13	
break	119:28	119:33	14	
call	120:24	120:80	12	FFSWAP
arg	120:31	120:43	13	TrellisNode*
water	120:31	0:0	14	TrellisNode
op	120:42	0:0	14	*
arg	120:45	120:63	13	nodes_next[parent]
water	120:45	0:0	14	nodes_next
op	120:55	0:0	14	[
water	120:56	0:0	14	parent
op	120:62	0:0	14	]
arg	120:65	120:80	13	nodes_next[pos]
water	120:65	0:0	14	nodes_next
op	120:75	0:0	14	[
water	120:76	0:0	14	pos
op	120:79	0:0	14	]
water	120:81	0:0	12	;
water	121:24	0:0	12	pos
op	121:28	0:0	12	=
water	121:30	0:0	12	parent
water	121:36	0:0	12	;
water	122:20	0:0	12	}
decl	123:20	125:79	10	next_	STORE_NODE
water	124:30	0:0	10	(
water	124:31	0:0	10	ms
water	124:33	0:0	10	,
call	124:35	125:77	11	FFMAX
arg	124:41	124:43	12	16
water	124:41	0:0	13	16
arg	125:31	125:77	12	(ff_adpcm_AdaptationTable[nibble]*step)>>8
water	125:31	0:0	13	(
water	125:32	0:0	13	ff_adpcm_AdaptationTable
op	125:56	0:0	13	[
water	125:57	0:0	13	nibble
op	125:63	0:0	13	]
op	125:65	0:0	13	*
water	125:67	0:0	13	step
water	125:71	0:0	13	)
op	125:73	0:0	13	>>
water	125:76	0:0	13	8
water	125:78	0:0	10	)
water	126:16	0:0	10	}
water	127:12	0:0	8	}
else	127:14	148:12	6
stmts	127:19	148:12	7	
if	127:19	148:12	8	(version == AV_CODEC_ID_ADPCM_IMA_WAV || version == AV_CODEC_ID_ADPCM_IMA_QT || version == AV_CODEC_ID_ADPCM_SWF)
cond	127:23	129:34	9	version == AV_CODEC_ID_ADPCM_IMA_WAV || version == AV_CODEC_ID_ADPCM_IMA_QT || version == AV_CODEC_ID_ADPCM_SWF
water	127:23	0:0	10	version
op	127:31	0:0	10	==
water	127:34	0:0	10	AV_CODEC_ID_ADPCM_IMA_WAV
op	127:60	0:0	10	||
water	128:23	0:0	10	version
op	128:31	0:0	10	==
water	128:34	0:0	10	AV_CODEC_ID_ADPCM_IMA_QT
op	128:60	0:0	10	||
water	129:23	0:0	10	version
op	129:31	0:0	10	==
water	129:34	0:0	10	AV_CODEC_ID_ADPCM_SWF
stmts	129:57	148:12	9	
water	129:57	0:0	10	{
decl	131:16	131:55	10	const int	predictor
op	131:36	0:0	10	=
water	131:38	0:0	10	nodes
op	131:43	0:0	10	[
water	131:44	0:0	10	j
op	131:45	0:0	10	]
op	131:46	0:0	10	->
water	131:48	0:0	10	sample1
decl	132:16	132:69	10	const int	div
op	132:30	0:0	10	=
water	132:32	0:0	10	(
water	132:33	0:0	10	sample
op	132:40	0:0	10	-
water	132:42	0:0	10	predictor
water	132:51	0:0	10	)
op	132:53	0:0	10	*
water	132:55	0:0	10	4
op	132:57	0:0	10	/
water	132:59	0:0	10	STEP_TABLE
decl	133:16	133:54	10	int	nmin
op	133:25	0:0	10	=
call	133:27	133:53	11	av_clip
arg	133:35	133:46	12	div-range
water	133:35	0:0	13	div
op	133:39	0:0	13	-
water	133:41	0:0	13	range
arg	133:48	133:50	12	-7
op	133:48	0:0	13	-
water	133:49	0:0	13	7
arg	133:52	133:53	12	6
water	133:52	0:0	13	6
decl	134:16	134:54	10	int	nmax
op	134:25	0:0	10	=
call	134:27	134:53	11	av_clip
arg	134:35	134:46	12	div+range
water	134:35	0:0	13	div
op	134:39	0:0	13	+
water	134:41	0:0	13	range
arg	134:48	134:50	12	-6
op	134:48	0:0	13	-
water	134:49	0:0	13	6
arg	134:52	134:53	12	7
water	134:52	0:0	13	7
if	135:16	136:26	10	(nmin <= 0)
cond	135:20	135:28	11	nmin <= 0
water	135:20	0:0	12	nmin
op	135:25	0:0	12	<=
water	135:28	0:0	12	0
stmts	136:20	136:26	11	
water	136:20	0:0	12	nmin
op	136:24	0:0	12	--
water	136:26	0:0	12	;
if	137:16	138:26	10	(nmax < 0)
cond	137:20	137:27	11	nmax < 0
water	137:20	0:0	12	nmax
op	137:25	0:0	12	<
water	137:27	0:0	12	0
stmts	138:20	138:26	11	
water	138:20	0:0	12	nmax
op	138:24	0:0	12	--
water	138:26	0:0	12	;
for	139:16	145:16	10	(nidx = nmin ;nidx <= nmax;nidx ++)
forinit	139:21	139:32	11	nidx = nmin ;
water	139:21	0:0	12	nidx
op	139:26	0:0	12	=
water	139:28	0:0	12	nmin
water	139:32	0:0	12	;
cond	139:34	139:42	11	nidx <= nmax
water	139:34	0:0	12	nidx
op	139:39	0:0	12	<=
water	139:42	0:0	12	nmax
forexpr	139:48	139:52	11	nidx ++
water	139:48	0:0	12	nidx
op	139:52	0:0	12	++
stmts	139:56	145:16	11	
water	139:56	0:0	12	{
decl	140:20	140:65	12	const int	nibble
op	140:37	0:0	12	=
water	140:39	0:0	12	nidx
op	140:44	0:0	12	<
water	140:46	0:0	12	0
water	140:48	0:0	12	?
water	140:50	0:0	12	7
op	140:52	0:0	12	-
water	140:54	0:0	12	nidx
water	140:59	0:0	12	:
water	140:61	0:0	12	nidx
decl	141:20	143:76	12	int	dec_sample
op	141:35	0:0	12	=
water	141:37	0:0	12	predictor
op	141:47	0:0	12	+
water	142:36	0:0	12	(
water	142:37	0:0	12	STEP_TABLE
op	142:48	0:0	12	*
water	143:37	0:0	12	ff_adpcm_yamaha_difflookup
op	143:63	0:0	12	[
water	143:64	0:0	12	nibble
op	143:70	0:0	12	]
water	143:71	0:0	12	)
op	143:73	0:0	12	/
water	143:75	0:0	12	8
call	144:20	144:47	12	STORE_NODE
arg	144:31	144:35	13	NAME
water	144:31	0:0	14	NAME
arg	144:37	144:47	13	STEP_INDEX
water	144:37	0:0	14	STEP_INDEX
water	144:48	0:0	12	;
water	145:16	0:0	12	}
call	146:16	147:78	10	LOOP_NODES
arg	146:27	146:30	11	ima
water	146:27	0:0	12	ima
arg	146:32	146:57	11	ff_adpcm_step_table[step]
water	146:32	0:0	12	ff_adpcm_step_table
op	146:51	0:0	12	[
water	146:52	0:0	12	step
op	146:56	0:0	12	]
arg	147:27	147:78	11	av_clip(step+ff_adpcm_index_table[nibble],0,88)
call	147:27	147:77	12	av_clip
arg	147:35	147:70	13	step+ff_adpcm_index_table[nibble]
water	147:35	0:0	14	step
op	147:40	0:0	14	+
water	147:42	0:0	14	ff_adpcm_index_table
op	147:62	0:0	14	[
water	147:63	0:0	14	nibble
op	147:69	0:0	14	]
arg	147:72	147:73	13	0
water	147:72	0:0	14	0
arg	147:75	147:77	13	88
water	147:75	0:0	14	88
water	147:79	0:0	10	;
water	148:12	0:0	10	}
else	148:14	154:12	6
stmts	148:19	154:12	7	
water	148:19	0:0	8	{
call	149:16	151:46	8	LOOP_NODES
arg	149:27	149:33	9	yamaha
water	149:27	0:0	10	yamaha
arg	149:35	149:39	9	step
water	149:35	0:0	10	step
arg	150:27	151:46	9	av_clip((step*ff_adpcm_yamaha_indexscale[nibble])>>8,127,24567)
call	150:27	151:45	10	av_clip
arg	150:35	150:83	11	(step*ff_adpcm_yamaha_indexscale[nibble])>>8
water	150:35	0:0	12	(
water	150:36	0:0	12	step
op	150:41	0:0	12	*
water	150:43	0:0	12	ff_adpcm_yamaha_indexscale
op	150:69	0:0	12	[
water	150:70	0:0	12	nibble
op	150:76	0:0	12	]
water	150:77	0:0	12	)
op	150:79	0:0	12	>>
water	150:82	0:0	12	8
arg	151:35	151:38	11	127
water	151:35	0:0	12	127
arg	151:40	151:45	11	24567
water	151:40	0:0	12	24567
water	151:47	0:0	8	;
water	154:12	0:0	8	}
water	155:8	0:0	6	}
water	156:8	0:0	4	u
op	156:10	0:0	4	=
water	156:12	0:0	4	nodes
water	156:17	0:0	4	;
water	157:8	0:0	4	nodes
op	157:14	0:0	4	=
water	157:16	0:0	4	nodes_next
water	157:26	0:0	4	;
water	158:8	0:0	4	nodes_next
op	158:19	0:0	4	=
water	158:21	0:0	4	u
water	158:22	0:0	4	;
water	159:8	0:0	4	generation
op	159:18	0:0	4	++
water	159:20	0:0	4	;
if	160:8	163:8	4	(generation == 255)
cond	160:12	160:26	5	generation == 255
water	160:12	0:0	6	generation
op	160:23	0:0	6	==
water	160:26	0:0	6	255
stmts	160:31	163:8	5	
water	160:31	0:0	6	{
call	161:12	161:52	6	memset
arg	161:19	161:23	7	hash
water	161:19	0:0	8	hash
arg	161:25	161:29	7	0xff
water	161:25	0:0	8	0
water	161:26	0:0	8	xff
arg	161:31	161:52	7	65536*sizeof(*hash)
water	161:31	0:0	8	65536
op	161:37	0:0	8	*
op	161:39	0:0	8	sizeof
water	161:45	0:0	8	(
op	161:46	0:0	8	*
water	161:47	0:0	8	hash
water	161:51	0:0	8	)
water	161:53	0:0	6	;
water	162:12	0:0	6	generation
op	162:23	0:0	6	=
water	162:25	0:0	6	0
water	162:26	0:0	6	;
water	163:8	0:0	6	}
if	165:8	169:8	4	(nodes [ 0 ] -> ssd > ( 1 << 28 ))
cond	165:12	165:36	5	nodes [ 0 ] -> ssd > ( 1 << 28 )
water	165:12	0:0	6	nodes
op	165:17	0:0	6	[
water	165:18	0:0	6	0
op	165:19	0:0	6	]
op	165:20	0:0	6	->
water	165:22	0:0	6	ssd
op	165:26	0:0	6	>
water	165:28	0:0	6	(
water	165:29	0:0	6	1
op	165:31	0:0	6	<<
water	165:34	0:0	6	28
water	165:36	0:0	6	)
stmts	165:39	169:8	5	
water	165:39	0:0	6	{
for	166:12	167:46	6	(j = 1 ;j < frontier && nodes [ j ];j ++)
forinit	166:17	166:22	7	j = 1 ;
water	166:17	0:0	8	j
op	166:19	0:0	8	=
water	166:21	0:0	8	1
water	166:22	0:0	8	;
cond	166:24	166:47	7	j < frontier && nodes [ j ]
water	166:24	0:0	8	j
op	166:26	0:0	8	<
water	166:28	0:0	8	frontier
op	166:37	0:0	8	&&
water	166:40	0:0	8	nodes
op	166:45	0:0	8	[
water	166:46	0:0	8	j
op	166:47	0:0	8	]
forexpr	166:50	166:51	7	j ++
water	166:50	0:0	8	j
op	166:51	0:0	8	++
stmts	167:16	167:46	7	
water	167:16	0:0	8	nodes
op	167:21	0:0	8	[
water	167:22	0:0	8	j
op	167:23	0:0	8	]
op	167:24	0:0	8	->
water	167:26	0:0	8	ssd
op	167:30	0:0	8	-=
water	167:33	0:0	8	nodes
op	167:38	0:0	8	[
water	167:39	0:0	8	0
op	167:40	0:0	8	]
op	167:41	0:0	8	->
water	167:43	0:0	8	ssd
water	167:46	0:0	8	;
water	168:12	0:0	6	nodes
op	168:17	0:0	6	[
water	168:18	0:0	6	0
op	168:19	0:0	6	]
op	168:20	0:0	6	->
water	168:22	0:0	6	ssd
op	168:26	0:0	6	=
water	168:28	0:0	6	0
water	168:29	0:0	6	;
water	169:8	0:0	6	}
if	171:8	183:8	4	(i == froze + FREEZE_INTERVAL)
cond	171:12	171:25	5	i == froze + FREEZE_INTERVAL
water	171:12	0:0	6	i
op	171:14	0:0	6	==
water	171:17	0:0	6	froze
op	171:23	0:0	6	+
water	171:25	0:0	6	FREEZE_INTERVAL
stmts	171:42	183:8	5	
water	171:42	0:0	6	{
water	172:12	0:0	6	p
op	172:14	0:0	6	=
op	172:16	0:0	6	&
water	172:17	0:0	6	paths
op	172:22	0:0	6	[
water	172:23	0:0	6	nodes
op	172:28	0:0	6	[
water	172:29	0:0	6	0
op	172:30	0:0	6	]
op	172:31	0:0	6	->
water	172:33	0:0	6	path
op	172:37	0:0	6	]
water	172:38	0:0	6	;
for	173:12	176:12	6	(k = i ;k > froze;k --)
forinit	173:17	173:22	7	k = i ;
water	173:17	0:0	8	k
op	173:19	0:0	8	=
water	173:21	0:0	8	i
water	173:22	0:0	8	;
cond	173:24	173:28	7	k > froze
water	173:24	0:0	8	k
op	173:26	0:0	8	>
water	173:28	0:0	8	froze
forexpr	173:35	173:36	7	k --
water	173:35	0:0	8	k
op	173:36	0:0	8	--
stmts	173:40	176:12	7	
water	173:40	0:0	8	{
water	174:16	0:0	8	dst
op	174:19	0:0	8	[
water	174:20	0:0	8	k
op	174:21	0:0	8	]
op	174:23	0:0	8	=
water	174:25	0:0	8	p
op	174:26	0:0	8	->
water	174:28	0:0	8	nibble
water	174:34	0:0	8	;
water	175:16	0:0	8	p
op	175:18	0:0	8	=
op	175:20	0:0	8	&
water	175:21	0:0	8	paths
op	175:26	0:0	8	[
water	175:27	0:0	8	p
op	175:28	0:0	8	->
water	175:30	0:0	8	prev
op	175:34	0:0	8	]
water	175:35	0:0	8	;
water	176:12	0:0	8	}
water	177:12	0:0	6	froze
op	177:18	0:0	6	=
water	177:20	0:0	6	i
water	177:21	0:0	6	;
water	178:12	0:0	6	pathn
op	178:18	0:0	6	=
water	178:20	0:0	6	0
water	178:21	0:0	6	;
call	182:12	182:70	6	memset
arg	182:19	182:28	7	nodes+1
water	182:19	0:0	8	nodes
op	182:25	0:0	8	+
water	182:27	0:0	8	1
arg	182:30	182:31	7	0
water	182:30	0:0	8	0
arg	182:33	182:70	7	(frontier-1)*sizeof(TrellisNode*)
water	182:33	0:0	8	(
water	182:34	0:0	8	frontier
op	182:43	0:0	8	-
water	182:45	0:0	8	1
water	182:46	0:0	8	)
op	182:48	0:0	8	*
op	182:50	0:0	8	sizeof
water	182:56	0:0	8	(
water	182:57	0:0	8	TrellisNode
op	182:68	0:0	8	*
water	182:69	0:0	8	)
water	182:71	0:0	6	;
water	183:8	0:0	6	}
water	184:4	0:0	4	}
water	185:4	0:0	2	p
op	185:6	0:0	2	=
op	185:8	0:0	2	&
water	185:9	0:0	2	paths
op	185:14	0:0	2	[
water	185:15	0:0	2	nodes
op	185:20	0:0	2	[
water	185:21	0:0	2	0
op	185:22	0:0	2	]
op	185:23	0:0	2	->
water	185:25	0:0	2	path
op	185:29	0:0	2	]
water	185:30	0:0	2	;
for	186:4	189:4	2	(i = n - 1 ;i > froze;i --)
forinit	186:9	186:18	3	i = n - 1 ;
water	186:9	0:0	4	i
op	186:11	0:0	4	=
water	186:13	0:0	4	n
op	186:15	0:0	4	-
water	186:17	0:0	4	1
water	186:18	0:0	4	;
cond	186:20	186:24	3	i > froze
water	186:20	0:0	4	i
op	186:22	0:0	4	>
water	186:24	0:0	4	froze
forexpr	186:31	186:32	3	i --
water	186:31	0:0	4	i
op	186:32	0:0	4	--
stmts	186:36	189:4	3	
water	186:36	0:0	4	{
water	187:8	0:0	4	dst
op	187:11	0:0	4	[
water	187:12	0:0	4	i
op	187:13	0:0	4	]
op	187:15	0:0	4	=
water	187:17	0:0	4	p
op	187:18	0:0	4	->
water	187:20	0:0	4	nibble
water	187:26	0:0	4	;
water	188:8	0:0	4	p
op	188:10	0:0	4	=
op	188:12	0:0	4	&
water	188:13	0:0	4	paths
op	188:18	0:0	4	[
water	188:19	0:0	4	p
op	188:20	0:0	4	->
water	188:22	0:0	4	prev
op	188:26	0:0	4	]
water	188:27	0:0	4	;
water	189:4	0:0	4	}
water	190:4	0:0	2	c
op	190:5	0:0	2	->
water	190:7	0:0	2	predictor
op	190:18	0:0	2	=
water	190:20	0:0	2	nodes
op	190:25	0:0	2	[
water	190:26	0:0	2	0
op	190:27	0:0	2	]
op	190:28	0:0	2	->
water	190:30	0:0	2	sample1
water	190:37	0:0	2	;
water	191:4	0:0	2	c
op	191:5	0:0	2	->
water	191:7	0:0	2	sample1
op	191:18	0:0	2	=
water	191:20	0:0	2	nodes
op	191:25	0:0	2	[
water	191:26	0:0	2	0
op	191:27	0:0	2	]
op	191:28	0:0	2	->
water	191:30	0:0	2	sample1
water	191:37	0:0	2	;
water	192:4	0:0	2	c
op	192:5	0:0	2	->
water	192:7	0:0	2	sample2
op	192:18	0:0	2	=
water	192:20	0:0	2	nodes
op	192:25	0:0	2	[
water	192:26	0:0	2	0
op	192:27	0:0	2	]
op	192:28	0:0	2	->
water	192:30	0:0	2	sample2
water	192:37	0:0	2	;
water	193:4	0:0	2	c
op	193:5	0:0	2	->
water	193:7	0:0	2	step_index
op	193:18	0:0	2	=
water	193:20	0:0	2	nodes
op	193:25	0:0	2	[
water	193:26	0:0	2	0
op	193:27	0:0	2	]
op	193:28	0:0	2	->
water	193:30	0:0	2	step
water	193:34	0:0	2	;
water	194:4	0:0	2	c
op	194:5	0:0	2	->
water	194:7	0:0	2	step
op	194:18	0:0	2	=
water	194:20	0:0	2	nodes
op	194:25	0:0	2	[
water	194:26	0:0	2	0
op	194:27	0:0	2	]
op	194:28	0:0	2	->
water	194:30	0:0	2	step
water	194:34	0:0	2	;
water	195:4	0:0	2	c
op	195:5	0:0	2	->
water	195:7	0:0	2	idelta
op	195:18	0:0	2	=
water	195:20	0:0	2	nodes
op	195:25	0:0	2	[
water	195:26	0:0	2	0
op	195:27	0:0	2	]
op	195:28	0:0	2	->
water	195:30	0:0	2	step
water	195:34	0:0	2	;
