func	1:0	307:0	0	static int	mxf_parse_structural_metadata
params	1:40	0:0	1	
param	1:41	1:56	2	MXFContext *	mxf
stmnts	0:0	306:14	1	
decl	3:4	3:39	2	MXFPackage	*material_package
op	3:33	0:0	2	=
water	3:35	0:0	2	NULL
decl	4:4	4:20	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:20	2	int	j
water	4:12	0:0	2	,
decl	4:4	4:20	2	int	k
water	4:15	0:0	2	,
decl	4:4	4:20	2	int	ret
call	5:4	5:86	2	av_log
arg	5:11	5:18	3	mxf->fc
water	5:11	0:0	4	mxf
op	5:14	0:0	4	->
water	5:16	0:0	4	fc
arg	5:20	5:32	3	AV_LOG_TRACE
water	5:20	0:0	4	AV_LOG_TRACE
arg	5:34	5:60	3	"metadata sets count %d\n"
water	5:34	0:0	4	"metadata sets count %d\n"
arg	5:62	5:86	3	mxf->metadata_sets_count
water	5:62	0:0	4	mxf
op	5:65	0:0	4	->
water	5:67	0:0	4	metadata_sets_count
water	5:87	0:0	2	;
for	7:4	10:4	2	(i = 0 ;i < mxf -> packages_count;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:25	3	i < mxf -> packages_count
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	mxf
op	7:23	0:0	4	->
water	7:25	0:0	4	packages_count
forexpr	7:41	7:42	3	i ++
water	7:41	0:0	4	i
op	7:42	0:0	4	++
stmts	7:46	10:4	3	
water	7:46	0:0	4	{
water	8:8	0:0	4	material_package
op	8:25	0:0	4	=
call	8:27	8:94	4	mxf_resolve_strong_ref
arg	8:50	8:53	5	mxf
water	8:50	0:0	6	mxf
arg	8:55	8:77	5	&mxf->packages_refs[i]
op	8:55	0:0	6	&
water	8:56	0:0	6	mxf
op	8:59	0:0	6	->
water	8:61	0:0	6	packages_refs
op	8:74	0:0	6	[
water	8:75	0:0	6	i
op	8:76	0:0	6	]
arg	8:79	8:94	5	MaterialPackage
water	8:79	0:0	6	MaterialPackage
water	8:95	0:0	4	;
if	9:8	9:35	4	(material_package)
cond	9:12	9:12	5	material_package
water	9:12	0:0	6	material_package
stmts	9:30	9:35	5	
break	9:30	9:35	6	
water	10:4	0:0	4	}
if	11:4	14:4	2	(! material_package)
cond	11:8	11:9	3	! material_package
op	11:8	0:0	4	!
water	11:9	0:0	4	material_package
stmts	11:27	14:4	3	
water	11:27	0:0	4	{
call	12:8	12:67	4	av_log
arg	12:15	12:22	5	mxf->fc
water	12:15	0:0	6	mxf
op	12:18	0:0	6	->
water	12:20	0:0	6	fc
arg	12:24	12:36	5	AV_LOG_ERROR
water	12:24	0:0	6	AV_LOG_ERROR
arg	12:38	12:67	5	"no material package found\n"
water	12:38	0:0	6	"no material package found\n"
water	12:68	0:0	4	;
return	13:8	13:34	4	AVERROR_INVALIDDATA
water	13:15	0:0	5	AVERROR_INVALIDDATA
water	14:4	0:0	4	}
call	15:4	15:87	2	mxf_add_umid_metadata
arg	15:26	15:44	3	&mxf->fc->metadata
op	15:26	0:0	4	&
water	15:27	0:0	4	mxf
op	15:30	0:0	4	->
water	15:32	0:0	4	fc
op	15:34	0:0	4	->
water	15:36	0:0	4	metadata
arg	15:46	15:69	3	"material_package_umid"
water	15:46	0:0	4	"material_package_umid"
arg	15:71	15:87	3	material_package
water	15:71	0:0	4	material_package
water	15:88	0:0	2	;
if	16:4	17:91	2	(material_package -> name && material_package -> name [ 0 ])
cond	16:8	16:58	3	material_package -> name && material_package -> name [ 0 ]
water	16:8	0:0	4	material_package
op	16:24	0:0	4	->
water	16:26	0:0	4	name
op	16:31	0:0	4	&&
water	16:34	0:0	4	material_package
op	16:50	0:0	4	->
water	16:52	0:0	4	name
op	16:56	0:0	4	[
water	16:57	0:0	4	0
op	16:58	0:0	4	]
stmts	17:8	17:91	3	
call	17:8	17:90	4	av_dict_set
arg	17:20	17:38	5	&mxf->fc->metadata
op	17:20	0:0	6	&
water	17:21	0:0	6	mxf
op	17:24	0:0	6	->
water	17:26	0:0	6	fc
op	17:28	0:0	6	->
water	17:30	0:0	6	metadata
arg	17:40	17:63	5	"material_package_name"
water	17:40	0:0	6	"material_package_name"
arg	17:65	17:87	5	material_package->name
water	17:65	0:0	6	material_package
op	17:81	0:0	6	->
water	17:83	0:0	6	name
arg	17:89	17:90	5	0
water	17:89	0:0	6	0
water	17:91	0:0	4	;
call	18:4	18:72	2	mxf_parse_package_comments
arg	18:31	18:34	3	mxf
water	18:31	0:0	4	mxf
arg	18:36	18:54	3	&mxf->fc->metadata
op	18:36	0:0	4	&
water	18:37	0:0	4	mxf
op	18:40	0:0	4	->
water	18:42	0:0	4	fc
op	18:44	0:0	4	->
water	18:46	0:0	4	metadata
arg	18:56	18:72	3	material_package
water	18:56	0:0	4	material_package
water	18:73	0:0	2	;
for	19:4	303:4	2	(i = 0 ;i < material_package -> tracks_count;i ++)
forinit	19:9	19:14	3	i = 0 ;
water	19:9	0:0	4	i
op	19:11	0:0	4	=
water	19:13	0:0	4	0
water	19:14	0:0	4	;
cond	19:16	19:38	3	i < material_package -> tracks_count
water	19:16	0:0	4	i
op	19:18	0:0	4	<
water	19:20	0:0	4	material_package
op	19:36	0:0	4	->
water	19:38	0:0	4	tracks_count
forexpr	19:52	19:53	3	i ++
water	19:52	0:0	4	i
op	19:53	0:0	4	++
stmts	19:57	303:4	3	
water	19:57	0:0	4	{
decl	20:8	20:41	4	MXFPackage	*source_package
op	20:35	0:0	4	=
water	20:37	0:0	4	NULL
decl	21:8	21:39	4	MXFTrack	*material_track
op	21:33	0:0	4	=
water	21:35	0:0	4	NULL
decl	22:8	22:37	4	MXFTrack	*source_track
op	22:31	0:0	4	=
water	22:33	0:0	4	NULL
decl	23:8	23:35	4	MXFTrack	*temp_track
op	23:29	0:0	4	=
water	23:31	0:0	4	NULL
decl	24:8	24:40	4	MXFDescriptor	*descriptor
op	24:34	0:0	4	=
water	24:36	0:0	4	NULL
decl	25:8	25:48	4	MXFStructuralComponent	*component
op	25:42	0:0	4	=
water	25:44	0:0	4	NULL
decl	26:8	26:43	4	MXFTimecodeComponent	*mxf_tc
op	26:37	0:0	4	=
water	26:39	0:0	4	NULL
decl	27:8	27:40	4	UID	*essence_container_ul
op	27:34	0:0	4	=
water	27:36	0:0	4	NULL
decl	28:8	28:41	4	const MXFCodecUL	*codec_ul
op	28:35	0:0	4	=
water	28:37	0:0	4	NULL
decl	29:8	29:45	4	const MXFCodecUL	*container_ul
op	29:39	0:0	4	=
water	29:41	0:0	4	NULL
decl	30:8	30:43	4	const MXFCodecUL	*pix_fmt_ul
op	30:37	0:0	4	=
water	30:39	0:0	4	NULL
decl	31:8	31:20	4	AVStream	*st
decl	32:8	32:21	4	AVTimecode	tc
decl	33:8	33:17	4	int	flags
if	34:8	37:8	4	(! ( material_track =mxf_resolve_strong_ref (mxf ,& material_package -> tracks_refs [ i ] ,Track ) ))
cond	34:12	34:100	5	! ( material_track =mxf_resolve_strong_ref (mxf ,& material_package -> tracks_refs [ i ] ,Track ) )
op	34:12	0:0	6	!
water	34:13	0:0	6	(
water	34:14	0:0	6	material_track
op	34:29	0:0	6	=
call	34:31	34:99	6	mxf_resolve_strong_ref
arg	34:54	34:57	7	mxf
water	34:54	0:0	8	mxf
arg	34:59	34:92	7	&material_package->tracks_refs[i]
op	34:59	0:0	8	&
water	34:60	0:0	8	material_package
op	34:76	0:0	8	->
water	34:78	0:0	8	tracks_refs
op	34:89	0:0	8	[
water	34:90	0:0	8	i
op	34:91	0:0	8	]
arg	34:94	34:99	7	Track
water	34:94	0:0	8	Track
water	34:100	0:0	6	)
stmts	34:103	37:8	5	
water	34:103	0:0	6	{
call	35:12	35:89	6	av_log
arg	35:19	35:26	7	mxf->fc
water	35:19	0:0	8	mxf
op	35:22	0:0	8	->
water	35:24	0:0	8	fc
arg	35:28	35:40	7	AV_LOG_ERROR
water	35:28	0:0	8	AV_LOG_ERROR
arg	35:42	35:89	7	"could not resolve material track strong ref\n"
water	35:42	0:0	8	"could not resolve material track strong ref\n"
water	35:90	0:0	6	;
continue	36:12	36:20	6	
water	37:8	0:0	6	}
if	38:8	44:8	4	(( component =mxf_resolve_strong_ref (mxf ,& material_track -> sequence_ref ,TimecodeComponent ) ))
cond	38:12	38:102	5	( component =mxf_resolve_strong_ref (mxf ,& material_track -> sequence_ref ,TimecodeComponent ) )
water	38:12	0:0	6	(
water	38:13	0:0	6	component
op	38:23	0:0	6	=
call	38:25	38:101	6	mxf_resolve_strong_ref
arg	38:48	38:51	7	mxf
water	38:48	0:0	8	mxf
arg	38:53	38:82	7	&material_track->sequence_ref
op	38:53	0:0	8	&
water	38:54	0:0	8	material_track
op	38:68	0:0	8	->
water	38:70	0:0	8	sequence_ref
arg	38:84	38:101	7	TimecodeComponent
water	38:84	0:0	8	TimecodeComponent
water	38:102	0:0	6	)
stmts	38:105	44:8	5	
water	38:105	0:0	6	{
water	39:12	0:0	6	mxf_tc
op	39:19	0:0	6	=
water	39:21	0:0	6	(
water	39:22	0:0	6	MXFTimecodeComponent
op	39:42	0:0	6	*
water	39:43	0:0	6	)
water	39:44	0:0	6	component
water	39:53	0:0	6	;
water	40:12	0:0	6	flags
op	40:18	0:0	6	=
water	40:20	0:0	6	mxf_tc
op	40:26	0:0	6	->
water	40:28	0:0	6	drop_frame
op	40:39	0:0	6	==
water	40:42	0:0	6	1
water	40:44	0:0	6	?
water	40:46	0:0	6	AV_TIMECODE_FLAG_DROPFRAME
water	40:73	0:0	6	:
water	40:75	0:0	6	0
water	40:76	0:0	6	;
if	41:12	43:12	6	(av_timecode_init (& tc ,mxf_tc -> rate ,flags ,mxf_tc -> start_frame ,mxf -> fc ) == 0)
cond	41:16	41:92	7	av_timecode_init (& tc ,mxf_tc -> rate ,flags ,mxf_tc -> start_frame ,mxf -> fc ) == 0
call	41:16	41:87	8	av_timecode_init
arg	41:33	41:36	9	&tc
op	41:33	0:0	10	&
water	41:34	0:0	10	tc
arg	41:38	41:50	9	mxf_tc->rate
water	41:38	0:0	10	mxf_tc
op	41:44	0:0	10	->
water	41:46	0:0	10	rate
arg	41:52	41:57	9	flags
water	41:52	0:0	10	flags
arg	41:59	41:78	9	mxf_tc->start_frame
water	41:59	0:0	10	mxf_tc
op	41:65	0:0	10	->
water	41:67	0:0	10	start_frame
arg	41:80	41:87	9	mxf->fc
water	41:80	0:0	10	mxf
op	41:83	0:0	10	->
water	41:85	0:0	10	fc
op	41:89	0:0	8	==
water	41:92	0:0	8	0
stmts	41:95	43:12	7	
water	41:95	0:0	8	{
call	42:16	42:77	8	mxf_add_timecode_metadata
arg	42:42	42:60	9	&mxf->fc->metadata
op	42:42	0:0	10	&
water	42:43	0:0	10	mxf
op	42:46	0:0	10	->
water	42:48	0:0	10	fc
op	42:50	0:0	10	->
water	42:52	0:0	10	metadata
arg	42:62	42:72	9	"timecode"
water	42:62	0:0	10	"timecode"
arg	42:74	42:77	9	&tc
op	42:74	0:0	10	&
water	42:75	0:0	10	tc
water	42:78	0:0	8	;
water	43:12	0:0	8	}
water	44:8	0:0	6	}
if	45:8	48:8	4	(! ( material_track -> sequence =mxf_resolve_strong_ref (mxf ,& material_track -> sequence_ref ,Sequence ) ))
cond	45:12	45:109	5	! ( material_track -> sequence =mxf_resolve_strong_ref (mxf ,& material_track -> sequence_ref ,Sequence ) )
op	45:12	0:0	6	!
water	45:13	0:0	6	(
water	45:14	0:0	6	material_track
op	45:28	0:0	6	->
water	45:30	0:0	6	sequence
op	45:39	0:0	6	=
call	45:41	45:108	6	mxf_resolve_strong_ref
arg	45:64	45:67	7	mxf
water	45:64	0:0	8	mxf
arg	45:69	45:98	7	&material_track->sequence_ref
op	45:69	0:0	8	&
water	45:70	0:0	8	material_track
op	45:84	0:0	8	->
water	45:86	0:0	8	sequence_ref
arg	45:100	45:108	7	Sequence
water	45:100	0:0	8	Sequence
water	45:109	0:0	6	)
stmts	45:112	48:8	5	
water	45:112	0:0	6	{
call	46:12	46:98	6	av_log
arg	46:19	46:26	7	mxf->fc
water	46:19	0:0	8	mxf
op	46:22	0:0	8	->
water	46:24	0:0	8	fc
arg	46:28	46:40	7	AV_LOG_ERROR
water	46:28	0:0	8	AV_LOG_ERROR
arg	46:42	46:98	7	"could not resolve material track sequence strong ref\n"
water	46:42	0:0	8	"could not resolve material track sequence strong ref\n"
water	46:99	0:0	6	;
continue	47:12	47:20	6	
water	48:8	0:0	6	}
for	49:8	59:8	4	(j = 0 ;j < material_track -> sequence -> structural_components_count;j ++)
forinit	49:13	49:18	5	j = 0 ;
water	49:13	0:0	6	j
op	49:15	0:0	6	=
water	49:17	0:0	6	0
water	49:18	0:0	6	;
cond	49:20	49:50	5	j < material_track -> sequence -> structural_components_count
water	49:20	0:0	6	j
op	49:22	0:0	6	<
water	49:24	0:0	6	material_track
op	49:38	0:0	6	->
water	49:40	0:0	6	sequence
op	49:48	0:0	6	->
water	49:50	0:0	6	structural_components_count
forexpr	49:79	49:80	5	j ++
water	49:79	0:0	6	j
op	49:80	0:0	6	++
stmts	49:84	59:8	5	
water	49:84	0:0	6	{
water	50:12	0:0	6	component
op	50:22	0:0	6	=
call	50:24	50:127	6	mxf_resolve_strong_ref
arg	50:47	50:50	7	mxf
water	50:47	0:0	8	mxf
arg	50:52	50:108	7	&material_track->sequence->structural_components_refs[j]
op	50:52	0:0	8	&
water	50:53	0:0	8	material_track
op	50:67	0:0	8	->
water	50:69	0:0	8	sequence
op	50:77	0:0	8	->
water	50:79	0:0	8	structural_components_refs
op	50:105	0:0	8	[
water	50:106	0:0	8	j
op	50:107	0:0	8	]
arg	50:110	50:127	7	TimecodeComponent
water	50:110	0:0	8	TimecodeComponent
water	50:128	0:0	6	;
if	51:12	52:24	6	(! component)
cond	51:16	51:17	7	! component
op	51:16	0:0	8	!
water	51:17	0:0	8	component
stmts	52:16	52:24	7	
continue	52:16	52:24	8	
water	53:12	0:0	6	mxf_tc
op	53:19	0:0	6	=
water	53:21	0:0	6	(
water	53:22	0:0	6	MXFTimecodeComponent
op	53:42	0:0	6	*
water	53:43	0:0	6	)
water	53:44	0:0	6	component
water	53:53	0:0	6	;
water	54:12	0:0	6	flags
op	54:18	0:0	6	=
water	54:20	0:0	6	mxf_tc
op	54:26	0:0	6	->
water	54:28	0:0	6	drop_frame
op	54:39	0:0	6	==
water	54:42	0:0	6	1
water	54:44	0:0	6	?
water	54:46	0:0	6	AV_TIMECODE_FLAG_DROPFRAME
water	54:73	0:0	6	:
water	54:75	0:0	6	0
water	54:76	0:0	6	;
if	55:12	58:12	6	(av_timecode_init (& tc ,mxf_tc -> rate ,flags ,mxf_tc -> start_frame ,mxf -> fc ) == 0)
cond	55:16	55:92	7	av_timecode_init (& tc ,mxf_tc -> rate ,flags ,mxf_tc -> start_frame ,mxf -> fc ) == 0
call	55:16	55:87	8	av_timecode_init
arg	55:33	55:36	9	&tc
op	55:33	0:0	10	&
water	55:34	0:0	10	tc
arg	55:38	55:50	9	mxf_tc->rate
water	55:38	0:0	10	mxf_tc
op	55:44	0:0	10	->
water	55:46	0:0	10	rate
arg	55:52	55:57	9	flags
water	55:52	0:0	10	flags
arg	55:59	55:78	9	mxf_tc->start_frame
water	55:59	0:0	10	mxf_tc
op	55:65	0:0	10	->
water	55:67	0:0	10	start_frame
arg	55:80	55:87	9	mxf->fc
water	55:80	0:0	10	mxf
op	55:83	0:0	10	->
water	55:85	0:0	10	fc
op	55:89	0:0	8	==
water	55:92	0:0	8	0
stmts	55:95	58:12	7	
water	55:95	0:0	8	{
call	56:16	56:77	8	mxf_add_timecode_metadata
arg	56:42	56:60	9	&mxf->fc->metadata
op	56:42	0:0	10	&
water	56:43	0:0	10	mxf
op	56:46	0:0	10	->
water	56:48	0:0	10	fc
op	56:50	0:0	10	->
water	56:52	0:0	10	metadata
arg	56:62	56:72	9	"timecode"
water	56:62	0:0	10	"timecode"
arg	56:74	56:77	9	&tc
op	56:74	0:0	10	&
water	56:75	0:0	10	tc
water	56:78	0:0	8	;
break	57:16	57:21	8	
water	58:12	0:0	8	}
water	59:8	0:0	6	}
for	61:8	85:8	4	(j = 0 ;j < material_track -> sequence -> structural_components_count;j ++)
forinit	61:13	61:18	5	j = 0 ;
water	61:13	0:0	6	j
op	61:15	0:0	6	=
water	61:17	0:0	6	0
water	61:18	0:0	6	;
cond	61:20	61:50	5	j < material_track -> sequence -> structural_components_count
water	61:20	0:0	6	j
op	61:22	0:0	6	<
water	61:24	0:0	6	material_track
op	61:38	0:0	6	->
water	61:40	0:0	6	sequence
op	61:48	0:0	6	->
water	61:50	0:0	6	structural_components_count
forexpr	61:79	61:80	5	j ++
water	61:79	0:0	6	j
op	61:80	0:0	6	++
stmts	61:84	85:8	5	
water	61:84	0:0	6	{
water	62:12	0:0	6	component
op	62:22	0:0	6	=
call	62:24	62:108	6	mxf_resolve_sourceclip
arg	62:47	62:50	7	mxf
water	62:47	0:0	8	mxf
arg	62:52	62:108	7	&material_track->sequence->structural_components_refs[j]
op	62:52	0:0	8	&
water	62:53	0:0	8	material_track
op	62:67	0:0	8	->
water	62:69	0:0	8	sequence
op	62:77	0:0	8	->
water	62:79	0:0	8	structural_components_refs
op	62:105	0:0	8	[
water	62:106	0:0	8	j
op	62:107	0:0	8	]
water	62:109	0:0	6	;
if	63:12	64:24	6	(! component)
cond	63:16	63:17	7	! component
op	63:16	0:0	8	!
water	63:17	0:0	8	component
stmts	64:16	64:24	7	
continue	64:16	64:24	8	
water	65:12	0:0	6	source_package
op	65:27	0:0	6	=
call	65:29	65:90	6	mxf_resolve_source_package
arg	65:56	65:59	7	mxf
water	65:56	0:0	8	mxf
arg	65:61	65:90	7	component->source_package_uid
water	65:61	0:0	8	component
op	65:70	0:0	8	->
water	65:72	0:0	8	source_package_uid
water	65:91	0:0	6	;
if	66:12	69:12	6	(! source_package)
cond	66:16	66:17	7	! source_package
op	66:16	0:0	8	!
water	66:17	0:0	8	source_package
stmts	66:33	69:12	7	
water	66:33	0:0	8	{
call	67:16	67:132	8	av_log
arg	67:23	67:30	9	mxf->fc
water	67:23	0:0	10	mxf
op	67:26	0:0	10	->
water	67:28	0:0	10	fc
arg	67:32	67:44	9	AV_LOG_TRACE
water	67:32	0:0	10	AV_LOG_TRACE
arg	67:46	67:106	9	"material track %d: no corresponding source package found\n"
water	67:46	0:0	10	"material track %d: no corresponding source package found\n"
arg	67:108	67:132	9	material_track->track_id
water	67:108	0:0	10	material_track
op	67:122	0:0	10	->
water	67:124	0:0	10	track_id
water	67:133	0:0	8	;
break	68:16	68:21	8	
water	69:12	0:0	8	}
for	70:12	80:12	6	(k = 0 ;k < source_package -> tracks_count;k ++)
forinit	70:17	70:22	7	k = 0 ;
water	70:17	0:0	8	k
op	70:19	0:0	8	=
water	70:21	0:0	8	0
water	70:22	0:0	8	;
cond	70:24	70:44	7	k < source_package -> tracks_count
water	70:24	0:0	8	k
op	70:26	0:0	8	<
water	70:28	0:0	8	source_package
op	70:42	0:0	8	->
water	70:44	0:0	8	tracks_count
forexpr	70:58	70:59	7	k ++
water	70:58	0:0	8	k
op	70:59	0:0	8	++
stmts	70:63	80:12	7	
water	70:63	0:0	8	{
if	71:16	75:16	8	(! ( temp_track =mxf_resolve_strong_ref (mxf ,& source_package -> tracks_refs [ k ] ,Track ) ))
cond	71:20	71:102	9	! ( temp_track =mxf_resolve_strong_ref (mxf ,& source_package -> tracks_refs [ k ] ,Track ) )
op	71:20	0:0	10	!
water	71:21	0:0	10	(
water	71:22	0:0	10	temp_track
op	71:33	0:0	10	=
call	71:35	71:101	10	mxf_resolve_strong_ref
arg	71:58	71:61	11	mxf
water	71:58	0:0	12	mxf
arg	71:63	71:94	11	&source_package->tracks_refs[k]
op	71:63	0:0	12	&
water	71:64	0:0	12	source_package
op	71:78	0:0	12	->
water	71:80	0:0	12	tracks_refs
op	71:91	0:0	12	[
water	71:92	0:0	12	k
op	71:93	0:0	12	]
arg	71:96	71:101	11	Track
water	71:96	0:0	12	Track
water	71:102	0:0	10	)
stmts	71:105	75:16	9	
water	71:105	0:0	10	{
call	72:20	72:95	10	av_log
arg	72:27	72:34	11	mxf->fc
water	72:27	0:0	12	mxf
op	72:30	0:0	12	->
water	72:32	0:0	12	fc
arg	72:36	72:48	11	AV_LOG_ERROR
water	72:36	0:0	12	AV_LOG_ERROR
arg	72:50	72:95	11	"could not resolve source track strong ref\n"
water	72:50	0:0	12	"could not resolve source track strong ref\n"
water	72:96	0:0	10	;
water	73:20	0:0	10	ret
op	73:24	0:0	10	=
water	73:26	0:0	10	AVERROR_INVALIDDATA
water	73:45	0:0	10	;
goto	74:20	74:38	10	fail_and_free
water	74:25	0:0	11	fail_and_free
water	75:16	0:0	10	}
if	76:16	79:16	8	(temp_track -> track_id == component -> source_track_id)
cond	76:20	76:55	9	temp_track -> track_id == component -> source_track_id
water	76:20	0:0	10	temp_track
op	76:30	0:0	10	->
water	76:32	0:0	10	track_id
op	76:41	0:0	10	==
water	76:44	0:0	10	component
op	76:53	0:0	10	->
water	76:55	0:0	10	source_track_id
stmts	76:72	79:16	9	
water	76:72	0:0	10	{
water	77:20	0:0	10	source_track
op	77:33	0:0	10	=
water	77:35	0:0	10	temp_track
water	77:45	0:0	10	;
break	78:20	78:25	10	
water	79:16	0:0	10	}
water	80:12	0:0	8	}
if	81:12	84:12	6	(! source_track)
cond	81:16	81:17	7	! source_track
op	81:16	0:0	8	!
water	81:17	0:0	8	source_track
stmts	81:31	84:12	7	
water	81:31	0:0	8	{
call	82:16	82:130	8	av_log
arg	82:23	82:30	9	mxf->fc
water	82:23	0:0	10	mxf
op	82:26	0:0	10	->
water	82:28	0:0	10	fc
arg	82:32	82:44	9	AV_LOG_ERROR
water	82:32	0:0	10	AV_LOG_ERROR
arg	82:46	82:104	9	"material track %d: no corresponding source track found\n"
water	82:46	0:0	10	"material track %d: no corresponding source track found\n"
arg	82:106	82:130	9	material_track->track_id
water	82:106	0:0	10	material_track
op	82:120	0:0	10	->
water	82:122	0:0	10	track_id
water	82:131	0:0	8	;
break	83:16	83:21	8	
water	84:12	0:0	8	}
water	85:8	0:0	6	}
if	86:8	87:20	4	(! source_track || ! component)
cond	86:12	86:30	5	! source_track || ! component
op	86:12	0:0	6	!
water	86:13	0:0	6	source_track
op	86:26	0:0	6	||
op	86:29	0:0	6	!
water	86:30	0:0	6	component
stmts	87:12	87:20	5	
continue	87:12	87:20	6	
if	88:8	92:8	4	(! ( source_track -> sequence =mxf_resolve_strong_ref (mxf ,& source_track -> sequence_ref ,Sequence ) ))
cond	88:12	88:105	5	! ( source_track -> sequence =mxf_resolve_strong_ref (mxf ,& source_track -> sequence_ref ,Sequence ) )
op	88:12	0:0	6	!
water	88:13	0:0	6	(
water	88:14	0:0	6	source_track
op	88:26	0:0	6	->
water	88:28	0:0	6	sequence
op	88:37	0:0	6	=
call	88:39	88:104	6	mxf_resolve_strong_ref
arg	88:62	88:65	7	mxf
water	88:62	0:0	8	mxf
arg	88:67	88:94	7	&source_track->sequence_ref
op	88:67	0:0	8	&
water	88:68	0:0	8	source_track
op	88:80	0:0	8	->
water	88:82	0:0	8	sequence_ref
arg	88:96	88:104	7	Sequence
water	88:96	0:0	8	Sequence
water	88:105	0:0	6	)
stmts	88:108	92:8	5	
water	88:108	0:0	6	{
call	89:12	89:96	6	av_log
arg	89:19	89:26	7	mxf->fc
water	89:19	0:0	8	mxf
op	89:22	0:0	8	->
water	89:24	0:0	8	fc
arg	89:28	89:40	7	AV_LOG_ERROR
water	89:28	0:0	8	AV_LOG_ERROR
arg	89:42	89:96	7	"could not resolve source track sequence strong ref\n"
water	89:42	0:0	8	"could not resolve source track sequence strong ref\n"
water	89:97	0:0	6	;
water	90:12	0:0	6	ret
op	90:16	0:0	6	=
water	90:18	0:0	6	AVERROR_INVALIDDATA
water	90:37	0:0	6	;
goto	91:12	91:30	6	fail_and_free
water	91:17	0:0	7	fail_and_free
water	92:8	0:0	6	}
if	95:8	98:8	4	(memcmp (material_track -> sequence -> data_definition_ul ,source_track -> sequence -> data_definition_ul ,16 ))
cond	95:12	95:111	5	memcmp (material_track -> sequence -> data_definition_ul ,source_track -> sequence -> data_definition_ul ,16 )
call	95:12	95:111	6	memcmp
arg	95:19	95:63	7	material_track->sequence->data_definition_ul
water	95:19	0:0	8	material_track
op	95:33	0:0	8	->
water	95:35	0:0	8	sequence
op	95:43	0:0	8	->
water	95:45	0:0	8	data_definition_ul
arg	95:65	95:107	7	source_track->sequence->data_definition_ul
water	95:65	0:0	8	source_track
op	95:77	0:0	8	->
water	95:79	0:0	8	sequence
op	95:87	0:0	8	->
water	95:89	0:0	8	data_definition_ul
arg	95:109	95:111	7	16
water	95:109	0:0	8	16
stmts	95:114	98:8	5	
water	95:114	0:0	6	{
call	96:12	96:114	6	av_log
arg	96:19	96:26	7	mxf->fc
water	96:19	0:0	8	mxf
op	96:22	0:0	8	->
water	96:24	0:0	8	fc
arg	96:28	96:40	7	AV_LOG_ERROR
water	96:28	0:0	8	AV_LOG_ERROR
arg	96:42	96:88	7	"material track %d: DataDefinition mismatch\n"
water	96:42	0:0	8	"material track %d: DataDefinition mismatch\n"
arg	96:90	96:114	7	material_track->track_id
water	96:90	0:0	8	material_track
op	96:104	0:0	8	->
water	96:106	0:0	8	track_id
water	96:115	0:0	6	;
continue	97:12	97:20	6	
water	98:8	0:0	6	}
water	99:8	0:0	4	st
op	99:11	0:0	4	=
call	99:13	99:46	4	avformat_new_stream
arg	99:33	99:40	5	mxf->fc
water	99:33	0:0	6	mxf
op	99:36	0:0	6	->
water	99:38	0:0	6	fc
arg	99:42	99:46	5	NULL
water	99:42	0:0	6	NULL
water	99:47	0:0	4	;
if	100:8	104:8	4	(! st)
cond	100:12	100:13	5	! st
op	100:12	0:0	6	!
water	100:13	0:0	6	st
stmts	100:17	104:8	5	
water	100:17	0:0	6	{
call	101:12	101:71	6	av_log
arg	101:19	101:26	7	mxf->fc
water	101:19	0:0	8	mxf
op	101:22	0:0	8	->
water	101:24	0:0	8	fc
arg	101:28	101:40	7	AV_LOG_ERROR
water	101:28	0:0	8	AV_LOG_ERROR
arg	101:42	101:71	7	"could not allocate stream\n"
water	101:42	0:0	8	"could not allocate stream\n"
water	101:72	0:0	6	;
water	102:12	0:0	6	ret
op	102:16	0:0	6	=
call	102:18	102:32	6	AVERROR
arg	102:26	102:32	7	ENOMEM
water	102:26	0:0	8	ENOMEM
water	102:33	0:0	6	;
goto	103:12	103:30	6	fail_and_free
water	103:17	0:0	7	fail_and_free
water	104:8	0:0	6	}
water	105:8	0:0	4	st
op	105:10	0:0	4	->
water	105:12	0:0	4	id
op	105:15	0:0	4	=
water	105:17	0:0	4	source_track
op	105:29	0:0	4	->
water	105:31	0:0	4	track_id
water	105:39	0:0	4	;
water	106:8	0:0	4	st
op	106:10	0:0	4	->
water	106:12	0:0	4	priv_data
op	106:22	0:0	4	=
water	106:24	0:0	4	source_track
water	106:36	0:0	4	;
water	107:8	0:0	4	source_package
op	107:22	0:0	4	->
water	107:24	0:0	4	descriptor
op	107:35	0:0	4	=
call	107:37	107:105	4	mxf_resolve_strong_ref
arg	107:60	107:63	5	mxf
water	107:60	0:0	6	mxf
arg	107:65	107:96	5	&source_package->descriptor_ref
op	107:65	0:0	6	&
water	107:66	0:0	6	source_package
op	107:80	0:0	6	->
water	107:82	0:0	6	descriptor_ref
arg	107:98	107:105	5	AnyType
water	107:98	0:0	6	AnyType
water	107:106	0:0	4	;
water	108:8	0:0	4	descriptor
op	108:19	0:0	4	=
call	108:21	108:104	4	mxf_resolve_multidescriptor
arg	108:49	108:52	5	mxf
water	108:49	0:0	6	mxf
arg	108:54	108:80	5	source_package->descriptor
water	108:54	0:0	6	source_package
op	108:68	0:0	6	->
water	108:70	0:0	6	descriptor
arg	108:82	108:104	5	source_track->track_id
water	108:82	0:0	6	source_track
op	108:94	0:0	6	->
water	108:96	0:0	6	track_id
water	108:105	0:0	4	;
if	111:8	112:109	4	(descriptor && descriptor -> duration != AV_NOPTS_VALUE)
cond	111:12	111:50	5	descriptor && descriptor -> duration != AV_NOPTS_VALUE
water	111:12	0:0	6	descriptor
op	111:23	0:0	6	&&
water	111:26	0:0	6	descriptor
op	111:36	0:0	6	->
water	111:38	0:0	6	duration
op	111:47	0:0	6	!=
water	111:50	0:0	6	AV_NOPTS_VALUE
stmts	112:12	112:109	5	
water	112:12	0:0	6	source_track
op	112:24	0:0	6	->
water	112:26	0:0	6	original_duration
op	112:44	0:0	6	=
water	112:46	0:0	6	st
op	112:48	0:0	6	->
water	112:50	0:0	6	duration
op	112:59	0:0	6	=
call	112:61	112:108	6	FFMIN
arg	112:67	112:87	7	descriptor->duration
water	112:67	0:0	8	descriptor
op	112:77	0:0	8	->
water	112:79	0:0	8	duration
arg	112:89	112:108	7	component->duration
water	112:89	0:0	8	component
op	112:98	0:0	8	->
water	112:100	0:0	8	duration
water	112:109	0:0	6	;
else	113:8	114:80	4
stmts	114:12	114:80	5	
water	114:12	0:0	6	source_track
op	114:24	0:0	6	->
water	114:26	0:0	6	original_duration
op	114:44	0:0	6	=
water	114:46	0:0	6	st
op	114:48	0:0	6	->
water	114:50	0:0	6	duration
op	114:59	0:0	6	=
water	114:61	0:0	6	component
op	114:70	0:0	6	->
water	114:72	0:0	6	duration
water	114:80	0:0	6	;
if	115:8	116:41	4	(st -> duration == - 1)
cond	115:12	115:29	5	st -> duration == - 1
water	115:12	0:0	6	st
op	115:14	0:0	6	->
water	115:16	0:0	6	duration
op	115:25	0:0	6	==
op	115:28	0:0	6	-
water	115:29	0:0	6	1
stmts	116:12	116:41	5	
water	116:12	0:0	6	st
op	116:14	0:0	6	->
water	116:16	0:0	6	duration
op	116:25	0:0	6	=
water	116:27	0:0	6	AV_NOPTS_VALUE
water	116:41	0:0	6	;
water	117:8	0:0	4	st
op	117:10	0:0	4	->
water	117:12	0:0	4	start_time
op	117:23	0:0	4	=
water	117:25	0:0	4	component
op	117:34	0:0	4	->
water	117:36	0:0	4	start_position
water	117:50	0:0	4	;
if	118:8	126:8	4	(material_track -> edit_rate . num <= 0 || material_track -> edit_rate . den <= 0)
cond	118:12	119:45	5	material_track -> edit_rate . num <= 0 || material_track -> edit_rate . den <= 0
water	118:12	0:0	6	material_track
op	118:26	0:0	6	->
water	118:28	0:0	6	edit_rate
op	118:37	0:0	6	.
water	118:38	0:0	6	num
op	118:42	0:0	6	<=
water	118:45	0:0	6	0
op	118:47	0:0	6	||
water	119:12	0:0	6	material_track
op	119:26	0:0	6	->
water	119:28	0:0	6	edit_rate
op	119:37	0:0	6	.
water	119:38	0:0	6	den
op	119:42	0:0	6	<=
water	119:45	0:0	6	0
stmts	119:48	126:8	5	
water	119:48	0:0	6	{
call	120:12	124:59	6	av_log
arg	120:19	120:26	7	mxf->fc
water	120:19	0:0	8	mxf
op	120:22	0:0	8	->
water	120:24	0:0	8	fc
arg	120:28	120:42	7	AV_LOG_WARNING
water	120:28	0:0	8	AV_LOG_WARNING
arg	121:19	122:41	7	"Invalid edit rate (%d/%d) found on stream #%d, ""defaulting to 25/1\n"
water	121:19	0:0	8	"Invalid edit rate (%d/%d) found on stream #%d, "
water	122:19	0:0	8	"defaulting to 25/1\n"
arg	123:19	123:48	7	material_track->edit_rate.num
water	123:19	0:0	8	material_track
op	123:33	0:0	8	->
water	123:35	0:0	8	edit_rate
op	123:44	0:0	8	.
water	123:45	0:0	8	num
arg	124:19	124:48	7	material_track->edit_rate.den
water	124:19	0:0	8	material_track
op	124:33	0:0	8	->
water	124:35	0:0	8	edit_rate
op	124:44	0:0	8	.
water	124:45	0:0	8	den
arg	124:50	124:59	7	st->index
water	124:50	0:0	8	st
op	124:52	0:0	8	->
water	124:54	0:0	8	index
water	124:60	0:0	6	;
water	125:12	0:0	6	material_track
op	125:26	0:0	6	->
water	125:28	0:0	6	edit_rate
op	125:38	0:0	6	=
water	125:40	0:0	6	(
water	125:41	0:0	6	AVRational
water	125:51	0:0	6	)
water	125:52	0:0	6	{
water	125:53	0:0	6	25
water	125:55	0:0	6	,
water	125:57	0:0	6	1
water	125:58	0:0	6	}
water	125:59	0:0	6	;
water	126:8	0:0	6	}
call	127:8	127:96	4	avpriv_set_pts_info
arg	127:28	127:30	5	st
water	127:28	0:0	6	st
arg	127:32	127:34	5	64
water	127:32	0:0	6	64
arg	127:36	127:65	5	material_track->edit_rate.den
water	127:36	0:0	6	material_track
op	127:50	0:0	6	->
water	127:52	0:0	6	edit_rate
op	127:61	0:0	6	.
water	127:62	0:0	6	den
arg	127:67	127:96	5	material_track->edit_rate.num
water	127:67	0:0	6	material_track
op	127:81	0:0	6	->
water	127:83	0:0	6	edit_rate
op	127:92	0:0	6	.
water	127:93	0:0	6	num
water	127:97	0:0	4	;
water	130:8	0:0	4	source_track
op	130:20	0:0	4	->
water	130:22	0:0	4	edit_rate
op	130:32	0:0	4	=
water	130:34	0:0	4	material_track
op	130:48	0:0	4	->
water	130:50	0:0	4	edit_rate
water	130:59	0:0	4	;
call	131:8	131:93	4	PRINT_KEY
arg	131:18	131:25	5	mxf->fc
water	131:18	0:0	6	mxf
op	131:21	0:0	6	->
water	131:23	0:0	6	fc
arg	131:27	131:49	5	"data definition   ul"
water	131:27	0:0	6	"data definition   ul"
arg	131:51	131:93	5	source_track->sequence->data_definition_ul
water	131:51	0:0	6	source_track
op	131:63	0:0	6	->
water	131:65	0:0	6	sequence
op	131:73	0:0	6	->
water	131:75	0:0	6	data_definition_ul
water	131:94	0:0	4	;
water	132:8	0:0	4	codec_ul
op	132:17	0:0	4	=
call	132:19	132:107	4	mxf_get_codec_ul
arg	132:36	132:62	5	ff_mxf_data_definition_uls
water	132:36	0:0	6	ff_mxf_data_definition_uls
arg	132:64	132:107	5	&source_track->sequence->data_definition_ul
op	132:64	0:0	6	&
water	132:65	0:0	6	source_track
op	132:77	0:0	6	->
water	132:79	0:0	6	sequence
op	132:87	0:0	6	->
water	132:89	0:0	6	data_definition_ul
water	132:108	0:0	4	;
water	133:8	0:0	4	st
op	133:10	0:0	4	->
water	133:12	0:0	4	codec
op	133:17	0:0	4	->
water	133:19	0:0	4	codec_type
op	133:30	0:0	4	=
water	133:32	0:0	4	codec_ul
op	133:40	0:0	4	->
water	133:42	0:0	4	id
water	133:44	0:0	4	;
if	134:8	137:8	4	(! descriptor)
cond	134:12	134:13	5	! descriptor
op	134:12	0:0	6	!
water	134:13	0:0	6	descriptor
stmts	134:25	137:8	5	
water	134:25	0:0	6	{
call	135:12	135:127	6	av_log
arg	135:19	135:26	7	mxf->fc
water	135:19	0:0	8	mxf
op	135:22	0:0	8	->
water	135:24	0:0	8	fc
arg	135:28	135:39	7	AV_LOG_INFO
water	135:28	0:0	8	AV_LOG_INFO
arg	135:41	135:92	7	"source track %d: stream %d, no descriptor found\n"
water	135:41	0:0	8	"source track %d: stream %d, no descriptor found\n"
arg	135:94	135:116	7	source_track->track_id
water	135:94	0:0	8	source_track
op	135:106	0:0	8	->
water	135:108	0:0	8	track_id
arg	135:118	135:127	7	st->index
water	135:118	0:0	8	st
op	135:120	0:0	8	->
water	135:122	0:0	8	index
water	135:128	0:0	6	;
continue	136:12	136:20	6	
water	137:8	0:0	6	}
call	138:8	138:79	4	PRINT_KEY
arg	138:18	138:25	5	mxf->fc
water	138:18	0:0	6	mxf
op	138:21	0:0	6	->
water	138:23	0:0	6	fc
arg	138:27	138:49	5	"essence codec     ul"
water	138:27	0:0	6	"essence codec     ul"
arg	138:51	138:79	5	descriptor->essence_codec_ul
water	138:51	0:0	6	descriptor
op	138:61	0:0	6	->
water	138:63	0:0	6	essence_codec_ul
water	138:80	0:0	4	;
call	139:8	139:83	4	PRINT_KEY
arg	139:18	139:25	5	mxf->fc
water	139:18	0:0	6	mxf
op	139:21	0:0	6	->
water	139:23	0:0	6	fc
arg	139:27	139:49	5	"essence container ul"
water	139:27	0:0	6	"essence container ul"
arg	139:51	139:83	5	descriptor->essence_container_ul
water	139:51	0:0	6	descriptor
op	139:61	0:0	6	->
water	139:63	0:0	6	essence_container_ul
water	139:84	0:0	4	;
water	140:8	0:0	4	essence_container_ul
op	140:29	0:0	4	=
op	140:31	0:0	4	&
water	140:32	0:0	4	descriptor
op	140:42	0:0	4	->
water	140:44	0:0	4	essence_container_ul
water	140:64	0:0	4	;
if	143:8	152:8	4	(IS_KLV_KEY (essence_container_ul ,mxf_encrypted_essence_container ))
cond	143:12	143:76	5	IS_KLV_KEY (essence_container_ul ,mxf_encrypted_essence_container )
call	143:12	143:76	6	IS_KLV_KEY
arg	143:23	143:43	7	essence_container_ul
water	143:23	0:0	8	essence_container_ul
arg	143:45	143:76	7	mxf_encrypted_essence_container
water	143:45	0:0	8	mxf_encrypted_essence_container
stmts	143:79	152:8	5	
water	143:79	0:0	6	{
call	144:12	144:70	6	av_log
arg	144:19	144:26	7	mxf->fc
water	144:19	0:0	8	mxf
op	144:22	0:0	8	->
water	144:24	0:0	8	fc
arg	144:28	144:39	7	AV_LOG_INFO
water	144:28	0:0	8	AV_LOG_INFO
arg	144:41	144:70	7	"broken encrypted mxf file\n"
water	144:41	0:0	8	"broken encrypted mxf file\n"
water	144:71	0:0	6	;
for	145:12	151:12	6	(k = 0 ;k < mxf -> metadata_sets_count;k ++)
forinit	145:17	145:22	7	k = 0 ;
water	145:17	0:0	8	k
op	145:19	0:0	8	=
water	145:21	0:0	8	0
water	145:22	0:0	8	;
cond	145:24	145:33	7	k < mxf -> metadata_sets_count
water	145:24	0:0	8	k
op	145:26	0:0	8	<
water	145:28	0:0	8	mxf
op	145:31	0:0	8	->
water	145:33	0:0	8	metadata_sets_count
forexpr	145:54	145:55	7	k ++
water	145:54	0:0	8	k
op	145:55	0:0	8	++
stmts	145:59	151:12	7	
water	145:59	0:0	8	{
decl	146:16	146:64	8	MXFMetadataSet	*metadata
op	146:41	0:0	8	=
water	146:43	0:0	8	mxf
op	146:46	0:0	8	->
water	146:48	0:0	8	metadata_sets
op	146:61	0:0	8	[
water	146:62	0:0	8	k
op	146:63	0:0	8	]
if	147:16	150:16	8	(metadata -> type == CryptoContext)
cond	147:20	147:38	9	metadata -> type == CryptoContext
water	147:20	0:0	10	metadata
op	147:28	0:0	10	->
water	147:30	0:0	10	type
op	147:35	0:0	10	==
water	147:38	0:0	10	CryptoContext
stmts	147:53	150:16	9	
water	147:53	0:0	10	{
water	148:20	0:0	10	essence_container_ul
op	148:41	0:0	10	=
op	148:43	0:0	10	&
water	148:44	0:0	10	(
water	148:45	0:0	10	(
water	148:46	0:0	10	MXFCryptoContext
op	148:63	0:0	10	*
water	148:64	0:0	10	)
water	148:65	0:0	10	metadata
water	148:73	0:0	10	)
op	148:74	0:0	10	->
water	148:76	0:0	10	source_container_ul
water	148:95	0:0	10	;
break	149:20	149:25	10	
water	150:16	0:0	10	}
water	151:12	0:0	8	}
water	152:8	0:0	6	}
water	154:8	0:0	4	codec_ul
op	154:17	0:0	4	=
call	154:19	154:83	4	mxf_get_codec_ul
arg	154:36	154:52	5	ff_mxf_codec_uls
water	154:36	0:0	6	ff_mxf_codec_uls
arg	154:54	154:83	5	&descriptor->essence_codec_ul
op	154:54	0:0	6	&
water	154:55	0:0	6	descriptor
op	154:65	0:0	6	->
water	154:67	0:0	6	essence_codec_ul
water	154:84	0:0	4	;
water	155:8	0:0	4	st
op	155:10	0:0	4	->
water	155:12	0:0	4	codec
op	155:17	0:0	4	->
water	155:19	0:0	4	codec_id
op	155:28	0:0	4	=
water	155:30	0:0	4	(
water	155:31	0:0	4	enum
water	155:36	0:0	4	AVCodecID
water	155:45	0:0	4	)
water	155:46	0:0	4	codec_ul
op	155:54	0:0	4	->
water	155:56	0:0	4	id
water	155:58	0:0	4	;
if	156:8	159:8	4	(st -> codec -> codec_id == AV_CODEC_ID_NONE)
cond	156:12	156:35	5	st -> codec -> codec_id == AV_CODEC_ID_NONE
water	156:12	0:0	6	st
op	156:14	0:0	6	->
water	156:16	0:0	6	codec
op	156:21	0:0	6	->
water	156:23	0:0	6	codec_id
op	156:32	0:0	6	==
water	156:35	0:0	6	AV_CODEC_ID_NONE
stmts	156:53	159:8	5	
water	156:53	0:0	6	{
water	157:12	0:0	6	codec_ul
op	157:21	0:0	6	=
call	157:23	157:79	6	mxf_get_codec_ul
arg	157:40	157:56	7	ff_mxf_codec_uls
water	157:40	0:0	8	ff_mxf_codec_uls
arg	157:58	157:79	7	&descriptor->codec_ul
op	157:58	0:0	8	&
water	157:59	0:0	8	descriptor
op	157:69	0:0	8	->
water	157:71	0:0	8	codec_ul
water	157:80	0:0	6	;
water	158:12	0:0	6	st
op	158:14	0:0	6	->
water	158:16	0:0	6	codec
op	158:21	0:0	6	->
water	158:23	0:0	6	codec_id
op	158:32	0:0	6	=
water	158:34	0:0	6	(
water	158:35	0:0	6	enum
water	158:40	0:0	6	AVCodecID
water	158:49	0:0	6	)
water	158:50	0:0	6	codec_ul
op	158:58	0:0	6	->
water	158:60	0:0	6	id
water	158:62	0:0	6	;
water	159:8	0:0	6	}
call	160:8	161:52	4	av_log
arg	160:15	160:22	5	mxf->fc
water	160:15	0:0	6	mxf
op	160:18	0:0	6	->
water	160:20	0:0	6	fc
arg	160:24	160:38	5	AV_LOG_VERBOSE
water	160:24	0:0	6	AV_LOG_VERBOSE
arg	160:40	160:63	5	"%s: Universal Label: "
water	160:40	0:0	6	"%s: Universal Label: "
arg	161:15	161:52	5	avcodec_get_name(st->codec->codec_id)
call	161:15	161:51	6	avcodec_get_name
arg	161:32	161:51	7	st->codec->codec_id
water	161:32	0:0	8	st
op	161:34	0:0	8	->
water	161:36	0:0	8	codec
op	161:41	0:0	8	->
water	161:43	0:0	8	codec_id
water	161:53	0:0	4	;
for	162:8	167:8	4	(k = 0 ;k < 16;k ++)
forinit	162:13	162:18	5	k = 0 ;
water	162:13	0:0	6	k
op	162:15	0:0	6	=
water	162:17	0:0	6	0
water	162:18	0:0	6	;
cond	162:20	162:24	5	k < 16
water	162:20	0:0	6	k
op	162:22	0:0	6	<
water	162:24	0:0	6	16
forexpr	162:28	162:29	5	k ++
water	162:28	0:0	6	k
op	162:29	0:0	6	++
stmts	162:33	167:8	5	
water	162:33	0:0	6	{
call	163:12	164:50	6	av_log
arg	163:19	163:26	7	mxf->fc
water	163:19	0:0	8	mxf
op	163:22	0:0	8	->
water	163:24	0:0	8	fc
arg	163:28	163:42	7	AV_LOG_VERBOSE
water	163:28	0:0	8	AV_LOG_VERBOSE
arg	163:44	163:50	7	"%.2x"
water	163:44	0:0	8	"%.2x"
arg	164:19	164:50	7	descriptor->essence_codec_ul[k]
water	164:19	0:0	8	descriptor
op	164:29	0:0	8	->
water	164:31	0:0	8	essence_codec_ul
op	164:47	0:0	8	[
water	164:48	0:0	8	k
op	164:49	0:0	8	]
water	164:51	0:0	6	;
if	165:12	166:52	6	(! ( k + 1 & 19 ) || k == 5)
cond	165:16	165:36	7	! ( k + 1 & 19 ) || k == 5
op	165:16	0:0	8	!
water	165:17	0:0	8	(
water	165:18	0:0	8	k
op	165:19	0:0	8	+
water	165:20	0:0	8	1
op	165:22	0:0	8	&
water	165:24	0:0	8	19
water	165:26	0:0	8	)
op	165:28	0:0	8	||
water	165:31	0:0	8	k
op	165:33	0:0	8	==
water	165:36	0:0	8	5
stmts	166:16	166:52	7	
call	166:16	166:51	8	av_log
arg	166:23	166:30	9	mxf->fc
water	166:23	0:0	10	mxf
op	166:26	0:0	10	->
water	166:28	0:0	10	fc
arg	166:32	166:46	9	AV_LOG_VERBOSE
water	166:32	0:0	10	AV_LOG_VERBOSE
arg	166:48	166:51	9	"."
water	166:48	0:0	10	"."
water	166:52	0:0	8	;
water	167:8	0:0	6	}
call	168:8	168:44	4	av_log
arg	168:15	168:22	5	mxf->fc
water	168:15	0:0	6	mxf
op	168:18	0:0	6	->
water	168:20	0:0	6	fc
arg	168:24	168:38	5	AV_LOG_VERBOSE
water	168:24	0:0	6	AV_LOG_VERBOSE
arg	168:40	168:44	5	"\n"
water	168:40	0:0	6	"\n"
water	168:45	0:0	4	;
call	169:8	169:80	4	mxf_add_umid_metadata
arg	169:30	169:43	5	&st->metadata
op	169:30	0:0	6	&
water	169:31	0:0	6	st
op	169:33	0:0	6	->
water	169:35	0:0	6	metadata
arg	169:45	169:64	5	"file_package_umid"
water	169:45	0:0	6	"file_package_umid"
arg	169:66	169:80	5	source_package
water	169:66	0:0	6	source_package
water	169:81	0:0	4	;
if	170:8	171:84	4	(source_package -> name && source_package -> name [ 0 ])
cond	170:12	170:58	5	source_package -> name && source_package -> name [ 0 ]
water	170:12	0:0	6	source_package
op	170:26	0:0	6	->
water	170:28	0:0	6	name
op	170:33	0:0	6	&&
water	170:36	0:0	6	source_package
op	170:50	0:0	6	->
water	170:52	0:0	6	name
op	170:56	0:0	6	[
water	170:57	0:0	6	0
op	170:58	0:0	6	]
stmts	171:12	171:84	5	
call	171:12	171:83	6	av_dict_set
arg	171:24	171:37	7	&st->metadata
op	171:24	0:0	8	&
water	171:25	0:0	8	st
op	171:27	0:0	8	->
water	171:29	0:0	8	metadata
arg	171:39	171:58	7	"file_package_name"
water	171:39	0:0	8	"file_package_name"
arg	171:60	171:80	7	source_package->name
water	171:60	0:0	8	source_package
op	171:74	0:0	8	->
water	171:76	0:0	8	name
arg	171:82	171:83	7	0
water	171:82	0:0	8	0
water	171:84	0:0	6	;
call	172:8	172:63	4	mxf_parse_physical_source_package
arg	172:42	172:45	5	mxf
water	172:42	0:0	6	mxf
arg	172:47	172:59	5	source_track
water	172:47	0:0	6	source_track
arg	172:61	172:63	5	st
water	172:61	0:0	6	st
water	172:64	0:0	4	;
if	173:8	245:8	4	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	173:12	173:37	5	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	173:12	0:0	6	st
op	173:14	0:0	6	->
water	173:16	0:0	6	codec
op	173:21	0:0	6	->
water	173:23	0:0	6	codec_type
op	173:34	0:0	6	==
water	173:37	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	173:57	245:8	5	
water	173:57	0:0	6	{
water	174:12	0:0	6	source_track
op	174:24	0:0	6	->
water	174:26	0:0	6	intra_only
op	174:37	0:0	6	=
call	174:39	174:67	6	mxf_is_intra_only
arg	174:57	174:67	7	descriptor
water	174:57	0:0	8	descriptor
water	174:68	0:0	6	;
water	175:12	0:0	6	container_ul
op	175:25	0:0	6	=
call	175:27	175:99	6	mxf_get_codec_ul
arg	175:44	175:77	7	mxf_picture_essence_container_uls
water	175:44	0:0	8	mxf_picture_essence_container_uls
arg	175:79	175:99	7	essence_container_ul
water	175:79	0:0	8	essence_container_ul
water	175:100	0:0	6	;
if	176:12	177:54	6	(st -> codec -> codec_id == AV_CODEC_ID_NONE)
cond	176:16	176:39	7	st -> codec -> codec_id == AV_CODEC_ID_NONE
water	176:16	0:0	8	st
op	176:18	0:0	8	->
water	176:20	0:0	8	codec
op	176:25	0:0	8	->
water	176:27	0:0	8	codec_id
op	176:36	0:0	8	==
water	176:39	0:0	8	AV_CODEC_ID_NONE
stmts	177:16	177:54	7	
water	177:16	0:0	8	st
op	177:18	0:0	8	->
water	177:20	0:0	8	codec
op	177:25	0:0	8	->
water	177:27	0:0	8	codec_id
op	177:36	0:0	8	=
water	177:38	0:0	8	container_ul
op	177:50	0:0	8	->
water	177:52	0:0	8	id
water	177:54	0:0	8	;
water	178:12	0:0	6	st
op	178:14	0:0	6	->
water	178:16	0:0	6	codec
op	178:21	0:0	6	->
water	178:23	0:0	6	width
op	178:29	0:0	6	=
water	178:31	0:0	6	descriptor
op	178:41	0:0	6	->
water	178:43	0:0	6	width
water	178:48	0:0	6	;
water	179:12	0:0	6	st
op	179:14	0:0	6	->
water	179:16	0:0	6	codec
op	179:21	0:0	6	->
water	179:23	0:0	6	height
op	179:30	0:0	6	=
water	179:32	0:0	6	descriptor
op	179:42	0:0	6	->
water	179:44	0:0	6	height
water	179:50	0:0	6	;
switch	180:12	214:12	6	(descriptor -> frame_layout)
cond	180:20	180:32	7	descriptor -> frame_layout
water	180:20	0:0	8	descriptor
op	180:30	0:0	8	->
water	180:32	0:0	8	frame_layout
stmts	180:46	214:12	7	
water	180:46	0:0	8	{
label	181:16	181:30	8	case FullFrame :
water	182:20	0:0	8	st
op	182:22	0:0	8	->
water	182:24	0:0	8	codec
op	182:29	0:0	8	->
water	182:31	0:0	8	field_order
op	182:43	0:0	8	=
water	182:45	0:0	8	AV_FIELD_PROGRESSIVE
water	182:65	0:0	8	;
break	183:20	183:25	8	
label	184:16	184:29	8	case OneField :
call	186:20	186:100	8	av_log
arg	186:27	186:34	9	mxf->fc
water	186:27	0:0	10	mxf
op	186:30	0:0	10	->
water	186:32	0:0	10	fc
arg	186:36	186:47	9	AV_LOG_INFO
water	186:36	0:0	10	AV_LOG_INFO
arg	186:49	186:100	9	"OneField frame layout isn't currently supported\n"
water	186:49	0:0	10	"OneField frame layout isn't currently supported\n"
water	186:101	0:0	8	;
break	187:20	187:25	8	
label	190:16	190:32	8	case MixedFields :
break	191:20	191:25	8	
label	192:16	192:35	8	case SegmentedFrame :
water	193:20	0:0	8	st
op	193:22	0:0	8	->
water	193:24	0:0	8	codec
op	193:29	0:0	8	->
water	193:31	0:0	8	field_order
op	193:43	0:0	8	=
water	193:45	0:0	8	AV_FIELD_PROGRESSIVE
water	193:65	0:0	8	;
label	194:16	194:35	8	case SeparateFields :
switch	195:20	208:20	8	(descriptor -> field_dominance)
cond	195:28	195:40	9	descriptor -> field_dominance
water	195:28	0:0	10	descriptor
op	195:38	0:0	10	->
water	195:40	0:0	10	field_dominance
stmts	195:57	208:20	9	
water	195:57	0:0	10	{
label	196:20	196:32	10	case MXF_TFF :
water	197:24	0:0	10	st
op	197:26	0:0	10	->
water	197:28	0:0	10	codec
op	197:33	0:0	10	->
water	197:35	0:0	10	field_order
op	197:47	0:0	10	=
water	197:49	0:0	10	AV_FIELD_TT
water	197:60	0:0	10	;
break	198:24	198:29	10	
label	199:20	199:32	10	case MXF_BFF :
water	200:24	0:0	10	st
op	200:26	0:0	10	->
water	200:28	0:0	10	codec
op	200:33	0:0	10	->
water	200:35	0:0	10	field_order
op	200:47	0:0	10	=
water	200:49	0:0	10	AV_FIELD_BB
water	200:60	0:0	10	;
break	201:24	201:29	10	
label	202:20	202:27	10	default :
call	203:24	205:73	10	avpriv_request_sample
arg	203:46	203:53	11	mxf->fc
water	203:46	0:0	12	mxf
op	203:49	0:0	12	->
water	203:51	0:0	12	fc
arg	204:46	204:74	11	"Field dominance %d support"
water	204:46	0:0	12	"Field dominance %d support"
arg	205:46	205:73	11	descriptor->field_dominance
water	205:46	0:0	12	descriptor
op	205:56	0:0	12	->
water	205:58	0:0	12	field_dominance
water	205:74	0:0	10	;
label	206:20	206:26	10	case 0 :
break	207:24	207:29	10	
water	208:20	0:0	10	}
water	210:20	0:0	8	st
op	210:22	0:0	8	->
water	210:24	0:0	8	codec
op	210:29	0:0	8	->
water	210:31	0:0	8	height
op	210:38	0:0	8	*=
water	210:41	0:0	8	2
water	210:42	0:0	8	;
break	211:20	211:25	8	
label	212:16	212:23	8	default :
call	213:20	213:108	8	av_log
arg	213:27	213:34	9	mxf->fc
water	213:27	0:0	10	mxf
op	213:30	0:0	10	->
water	213:32	0:0	10	fc
arg	213:36	213:47	9	AV_LOG_INFO
water	213:36	0:0	10	AV_LOG_INFO
arg	213:49	213:82	9	"Unknown frame layout type: %d\n"
water	213:49	0:0	10	"Unknown frame layout type: %d\n"
arg	213:84	213:108	9	descriptor->frame_layout
water	213:84	0:0	10	descriptor
op	213:94	0:0	10	->
water	213:96	0:0	10	frame_layout
water	213:109	0:0	8	;
water	214:12	0:0	8	}
if	215:12	235:12	6	(st -> codec -> codec_id == AV_CODEC_ID_RAWVIDEO)
cond	215:16	215:39	7	st -> codec -> codec_id == AV_CODEC_ID_RAWVIDEO
water	215:16	0:0	8	st
op	215:18	0:0	8	->
water	215:20	0:0	8	codec
op	215:25	0:0	8	->
water	215:27	0:0	8	codec_id
op	215:36	0:0	8	==
water	215:39	0:0	8	AV_CODEC_ID_RAWVIDEO
stmts	215:61	235:12	7	
water	215:61	0:0	8	{
water	216:16	0:0	8	st
op	216:18	0:0	8	->
water	216:20	0:0	8	codec
op	216:25	0:0	8	->
water	216:27	0:0	8	pix_fmt
op	216:35	0:0	8	=
water	216:37	0:0	8	descriptor
op	216:47	0:0	8	->
water	216:49	0:0	8	pix_fmt
water	216:56	0:0	8	;
if	217:16	234:16	8	(st -> codec -> pix_fmt == AV_PIX_FMT_NONE)
cond	217:20	217:42	9	st -> codec -> pix_fmt == AV_PIX_FMT_NONE
water	217:20	0:0	10	st
op	217:22	0:0	10	->
water	217:24	0:0	10	codec
op	217:29	0:0	10	->
water	217:31	0:0	10	pix_fmt
op	217:39	0:0	10	==
water	217:42	0:0	10	AV_PIX_FMT_NONE
stmts	217:59	234:16	9	
water	217:59	0:0	10	{
water	218:20	0:0	10	pix_fmt_ul
op	218:31	0:0	10	=
call	218:33	219:79	10	mxf_get_codec_ul
arg	218:50	218:73	11	ff_mxf_pixel_format_uls
water	218:50	0:0	12	ff_mxf_pixel_format_uls
arg	219:50	219:79	11	&descriptor->essence_codec_ul
op	219:50	0:0	12	&
water	219:51	0:0	12	descriptor
op	219:61	0:0	12	->
water	219:63	0:0	12	essence_codec_ul
water	219:80	0:0	10	;
water	220:20	0:0	10	st
op	220:22	0:0	10	->
water	220:24	0:0	10	codec
op	220:29	0:0	10	->
water	220:31	0:0	10	pix_fmt
op	220:39	0:0	10	=
water	220:41	0:0	10	(
water	220:42	0:0	10	enum
water	220:47	0:0	10	AVPixelFormat
water	220:60	0:0	10	)
water	220:61	0:0	10	pix_fmt_ul
op	220:71	0:0	10	->
water	220:73	0:0	10	id
water	220:75	0:0	10	;
if	221:20	233:20	10	(st -> codec -> pix_fmt == AV_PIX_FMT_NONE)
cond	221:24	221:46	11	st -> codec -> pix_fmt == AV_PIX_FMT_NONE
water	221:24	0:0	12	st
op	221:26	0:0	12	->
water	221:28	0:0	12	codec
op	221:33	0:0	12	->
water	221:35	0:0	12	pix_fmt
op	221:43	0:0	12	==
water	221:46	0:0	12	AV_PIX_FMT_NONE
stmts	221:63	233:20	11	
water	221:63	0:0	12	{
water	222:24	0:0	12	st
op	222:26	0:0	12	->
water	222:28	0:0	12	codec
op	222:33	0:0	12	->
water	222:35	0:0	12	codec_tag
op	222:45	0:0	12	=
call	222:47	223:93	12	mxf_get_codec_ul
arg	222:64	222:84	13	ff_mxf_codec_tag_uls
water	222:64	0:0	14	ff_mxf_codec_tag_uls
arg	223:64	223:93	13	&descriptor->essence_codec_ul
op	223:64	0:0	14	&
water	223:65	0:0	14	descriptor
op	223:75	0:0	14	->
water	223:77	0:0	14	essence_codec_ul
op	223:94	0:0	12	->
water	223:96	0:0	12	id
water	223:98	0:0	12	;
if	224:24	232:24	12	(! st -> codec -> codec_tag)
cond	224:28	224:40	13	! st -> codec -> codec_tag
op	224:28	0:0	14	!
water	224:29	0:0	14	st
op	224:31	0:0	14	->
water	224:33	0:0	14	codec
op	224:38	0:0	14	->
water	224:40	0:0	14	codec_tag
stmts	224:51	232:24	13	
water	224:51	0:0	14	{
if	227:28	231:28	14	(descriptor -> horiz_subsampling == 2 && descriptor -> vert_subsampling == 1 && descriptor -> component_depth == 8)
cond	227:32	229:63	15	descriptor -> horiz_subsampling == 2 && descriptor -> vert_subsampling == 1 && descriptor -> component_depth == 8
water	227:32	0:0	16	descriptor
op	227:42	0:0	16	->
water	227:44	0:0	16	horiz_subsampling
op	227:62	0:0	16	==
water	227:65	0:0	16	2
op	227:67	0:0	16	&&
water	228:32	0:0	16	descriptor
op	228:42	0:0	16	->
water	228:44	0:0	16	vert_subsampling
op	228:61	0:0	16	==
water	228:64	0:0	16	1
op	228:66	0:0	16	&&
water	229:32	0:0	16	descriptor
op	229:42	0:0	16	->
water	229:44	0:0	16	component_depth
op	229:60	0:0	16	==
water	229:63	0:0	16	8
stmts	229:66	231:28	15	
water	229:66	0:0	16	{
water	230:32	0:0	16	st
op	230:34	0:0	16	->
water	230:36	0:0	16	codec
op	230:41	0:0	16	->
water	230:43	0:0	16	pix_fmt
op	230:51	0:0	16	=
water	230:53	0:0	16	AV_PIX_FMT_UYVY422
water	230:71	0:0	16	;
water	231:28	0:0	16	}
water	232:24	0:0	14	}
water	233:20	0:0	12	}
water	234:16	0:0	10	}
water	235:12	0:0	8	}
water	236:12	0:0	6	st
op	236:14	0:0	6	->
water	236:16	0:0	6	need_parsing
op	236:29	0:0	6	=
water	236:31	0:0	6	AVSTREAM_PARSE_HEADERS
water	236:53	0:0	6	;
if	237:12	239:12	6	(material_track -> sequence -> origin)
cond	237:16	237:42	7	material_track -> sequence -> origin
water	237:16	0:0	8	material_track
op	237:30	0:0	8	->
water	237:32	0:0	8	sequence
op	237:40	0:0	8	->
water	237:42	0:0	8	origin
stmts	237:50	239:12	7	
water	237:50	0:0	8	{
call	238:16	238:107	8	av_dict_set_int
arg	238:32	238:45	9	&st->metadata
op	238:32	0:0	10	&
water	238:33	0:0	10	st
op	238:35	0:0	10	->
water	238:37	0:0	10	metadata
arg	238:47	238:70	9	"material_track_origin"
water	238:47	0:0	10	"material_track_origin"
arg	238:72	238:104	9	material_track->sequence->origin
water	238:72	0:0	10	material_track
op	238:86	0:0	10	->
water	238:88	0:0	10	sequence
op	238:96	0:0	10	->
water	238:98	0:0	10	origin
arg	238:106	238:107	9	0
water	238:106	0:0	10	0
water	238:108	0:0	8	;
water	239:12	0:0	8	}
if	240:12	242:12	6	(source_track -> sequence -> origin)
cond	240:16	240:40	7	source_track -> sequence -> origin
water	240:16	0:0	8	source_track
op	240:28	0:0	8	->
water	240:30	0:0	8	sequence
op	240:38	0:0	8	->
water	240:40	0:0	8	origin
stmts	240:48	242:12	7	
water	240:48	0:0	8	{
call	241:16	241:103	8	av_dict_set_int
arg	241:32	241:45	9	&st->metadata
op	241:32	0:0	10	&
water	241:33	0:0	10	st
op	241:35	0:0	10	->
water	241:37	0:0	10	metadata
arg	241:47	241:68	9	"source_track_origin"
water	241:47	0:0	10	"source_track_origin"
arg	241:70	241:100	9	source_track->sequence->origin
water	241:70	0:0	10	source_track
op	241:82	0:0	10	->
water	241:84	0:0	10	sequence
op	241:92	0:0	10	->
water	241:94	0:0	10	origin
arg	241:102	241:103	9	0
water	241:102	0:0	10	0
water	241:104	0:0	8	;
water	242:12	0:0	8	}
if	243:12	244:67	6	(descriptor -> aspect_ratio . num && descriptor -> aspect_ratio . den)
cond	243:16	243:73	7	descriptor -> aspect_ratio . num && descriptor -> aspect_ratio . den
water	243:16	0:0	8	descriptor
op	243:26	0:0	8	->
water	243:28	0:0	8	aspect_ratio
op	243:40	0:0	8	.
water	243:41	0:0	8	num
op	243:45	0:0	8	&&
water	243:48	0:0	8	descriptor
op	243:58	0:0	8	->
water	243:60	0:0	8	aspect_ratio
op	243:72	0:0	8	.
water	243:73	0:0	8	den
stmts	244:16	244:67	7	
water	244:16	0:0	8	st
op	244:18	0:0	8	->
water	244:20	0:0	8	display_aspect_ratio
op	244:41	0:0	8	=
water	244:43	0:0	8	descriptor
op	244:53	0:0	8	->
water	244:55	0:0	8	aspect_ratio
water	244:67	0:0	8	;
water	245:8	0:0	6	}
else	245:10	281:8	4
stmts	245:15	281:8	5	
if	245:15	281:8	6	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	245:19	245:44	7	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	245:19	0:0	8	st
op	245:21	0:0	8	->
water	245:23	0:0	8	codec
op	245:28	0:0	8	->
water	245:30	0:0	8	codec_type
op	245:41	0:0	8	==
water	245:44	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	245:64	281:8	7	
water	245:64	0:0	8	{
water	246:12	0:0	8	container_ul
op	246:25	0:0	8	=
call	246:27	246:97	8	mxf_get_codec_ul
arg	246:44	246:75	9	mxf_sound_essence_container_uls
water	246:44	0:0	10	mxf_sound_essence_container_uls
arg	246:77	246:97	9	essence_container_ul
water	246:77	0:0	10	essence_container_ul
water	246:98	0:0	8	;
if	248:12	249:70	8	(st -> codec -> codec_id == AV_CODEC_ID_NONE || ( st -> codec -> codec_id == AV_CODEC_ID_PCM_ALAW && ( enum AVCodecID ) container_ul -> id != AV_CODEC_ID_NONE ))
cond	248:16	248:159	9	st -> codec -> codec_id == AV_CODEC_ID_NONE || ( st -> codec -> codec_id == AV_CODEC_ID_PCM_ALAW && ( enum AVCodecID ) container_ul -> id != AV_CODEC_ID_NONE )
water	248:16	0:0	10	st
op	248:18	0:0	10	->
water	248:20	0:0	10	codec
op	248:25	0:0	10	->
water	248:27	0:0	10	codec_id
op	248:36	0:0	10	==
water	248:39	0:0	10	AV_CODEC_ID_NONE
op	248:56	0:0	10	||
water	248:59	0:0	10	(
water	248:60	0:0	10	st
op	248:62	0:0	10	->
water	248:64	0:0	10	codec
op	248:69	0:0	10	->
water	248:71	0:0	10	codec_id
op	248:80	0:0	10	==
water	248:83	0:0	10	AV_CODEC_ID_PCM_ALAW
op	248:104	0:0	10	&&
water	248:107	0:0	10	(
water	248:108	0:0	10	enum
water	248:113	0:0	10	AVCodecID
water	248:122	0:0	10	)
water	248:123	0:0	10	container_ul
op	248:135	0:0	10	->
water	248:137	0:0	10	id
op	248:140	0:0	10	!=
water	248:143	0:0	10	AV_CODEC_ID_NONE
water	248:159	0:0	10	)
stmts	249:16	249:70	9	
water	249:16	0:0	10	st
op	249:18	0:0	10	->
water	249:20	0:0	10	codec
op	249:25	0:0	10	->
water	249:27	0:0	10	codec_id
op	249:36	0:0	10	=
water	249:38	0:0	10	(
water	249:39	0:0	10	enum
water	249:44	0:0	10	AVCodecID
water	249:53	0:0	10	)
water	249:54	0:0	10	container_ul
op	249:66	0:0	10	->
water	249:68	0:0	10	id
water	249:70	0:0	10	;
water	250:12	0:0	8	st
op	250:14	0:0	8	->
water	250:16	0:0	8	codec
op	250:21	0:0	8	->
water	250:23	0:0	8	channels
op	250:32	0:0	8	=
water	250:34	0:0	8	descriptor
op	250:44	0:0	8	->
water	250:46	0:0	8	channels
water	250:54	0:0	8	;
water	251:12	0:0	8	st
op	251:14	0:0	8	->
water	251:16	0:0	8	codec
op	251:21	0:0	8	->
water	251:23	0:0	8	bits_per_coded_sample
op	251:45	0:0	8	=
water	251:47	0:0	8	descriptor
op	251:57	0:0	8	->
water	251:59	0:0	8	bits_per_sample
water	251:74	0:0	8	;
if	252:12	255:12	8	(descriptor -> sample_rate . den > 0)
cond	252:16	252:46	9	descriptor -> sample_rate . den > 0
water	252:16	0:0	10	descriptor
op	252:26	0:0	10	->
water	252:28	0:0	10	sample_rate
op	252:39	0:0	10	.
water	252:40	0:0	10	den
op	252:44	0:0	10	>
water	252:46	0:0	10	0
stmts	252:49	255:12	9	
water	252:49	0:0	10	{
water	253:16	0:0	10	st
op	253:18	0:0	10	->
water	253:20	0:0	10	codec
op	253:25	0:0	10	->
water	253:27	0:0	10	sample_rate
op	253:39	0:0	10	=
water	253:41	0:0	10	descriptor
op	253:51	0:0	10	->
water	253:53	0:0	10	sample_rate
op	253:64	0:0	10	.
water	253:65	0:0	10	num
op	253:69	0:0	10	/
water	253:71	0:0	10	descriptor
op	253:81	0:0	10	->
water	253:83	0:0	10	sample_rate
op	253:94	0:0	10	.
water	253:95	0:0	10	den
water	253:98	0:0	10	;
call	254:16	254:100	10	avpriv_set_pts_info
arg	254:36	254:38	11	st
water	254:36	0:0	12	st
arg	254:40	254:42	11	64
water	254:40	0:0	12	64
arg	254:44	254:71	11	descriptor->sample_rate.den
water	254:44	0:0	12	descriptor
op	254:54	0:0	12	->
water	254:56	0:0	12	sample_rate
op	254:67	0:0	12	.
water	254:68	0:0	12	den
arg	254:73	254:100	11	descriptor->sample_rate.num
water	254:73	0:0	12	descriptor
op	254:83	0:0	12	->
water	254:85	0:0	12	sample_rate
op	254:96	0:0	12	.
water	254:97	0:0	12	num
water	254:101	0:0	10	;
water	255:12	0:0	10	}
else	255:14	261:12	8
stmts	255:19	261:12	9	
water	255:19	0:0	10	{
call	256:16	259:32	10	av_log
arg	256:23	256:30	11	mxf->fc
water	256:23	0:0	12	mxf
op	256:26	0:0	12	->
water	256:28	0:0	12	fc
arg	256:32	256:46	11	AV_LOG_WARNING
water	256:32	0:0	12	AV_LOG_WARNING
arg	256:48	257:76	11	"invalid sample rate (%d/%d) ""found for stream #%d, time base forced to 1/48000\n"
water	256:48	0:0	12	"invalid sample rate (%d/%d) "
water	257:23	0:0	12	"found for stream #%d, time base forced to 1/48000\n"
arg	258:23	258:50	11	descriptor->sample_rate.num
water	258:23	0:0	12	descriptor
op	258:33	0:0	12	->
water	258:35	0:0	12	sample_rate
op	258:46	0:0	12	.
water	258:47	0:0	12	num
arg	258:52	258:79	11	descriptor->sample_rate.den
water	258:52	0:0	12	descriptor
op	258:62	0:0	12	->
water	258:64	0:0	12	sample_rate
op	258:75	0:0	12	.
water	258:76	0:0	12	den
arg	259:23	259:32	11	st->index
water	259:23	0:0	12	st
op	259:25	0:0	12	->
water	259:27	0:0	12	index
water	259:33	0:0	10	;
call	260:16	260:52	10	avpriv_set_pts_info
arg	260:36	260:38	11	st
water	260:36	0:0	12	st
arg	260:40	260:42	11	64
water	260:40	0:0	12	64
arg	260:44	260:45	11	1
water	260:44	0:0	12	1
arg	260:47	260:52	11	48000
water	260:47	0:0	12	48000
water	260:53	0:0	10	;
water	261:12	0:0	10	}
if	263:12	266:58	8	(st -> duration != AV_NOPTS_VALUE)
cond	263:16	263:32	9	st -> duration != AV_NOPTS_VALUE
water	263:16	0:0	10	st
op	263:18	0:0	10	->
water	263:20	0:0	10	duration
op	263:29	0:0	10	!=
water	263:32	0:0	10	AV_NOPTS_VALUE
stmts	264:16	266:58	9	
water	264:16	0:0	10	st
op	264:18	0:0	10	->
water	264:20	0:0	10	duration
op	264:29	0:0	10	=
call	264:31	266:57	10	av_rescale_q
arg	264:44	264:56	11	st->duration
water	264:44	0:0	12	st
op	264:46	0:0	12	->
water	264:48	0:0	12	duration
arg	265:44	265:79	11	av_inv_q(material_track->edit_rate)
call	265:44	265:78	12	av_inv_q
arg	265:53	265:78	13	material_track->edit_rate
water	265:53	0:0	14	material_track
op	265:67	0:0	14	->
water	265:69	0:0	14	edit_rate
arg	266:44	266:57	11	st->time_base
water	266:44	0:0	12	st
op	266:46	0:0	12	->
water	266:48	0:0	12	time_base
water	266:58	0:0	10	;
if	268:12	273:12	8	(st -> codec -> codec_id == AV_CODEC_ID_PCM_S16LE)
cond	268:16	268:39	9	st -> codec -> codec_id == AV_CODEC_ID_PCM_S16LE
water	268:16	0:0	10	st
op	268:18	0:0	10	->
water	268:20	0:0	10	codec
op	268:25	0:0	10	->
water	268:27	0:0	10	codec_id
op	268:36	0:0	10	==
water	268:39	0:0	10	AV_CODEC_ID_PCM_S16LE
stmts	268:62	273:12	9	
water	268:62	0:0	10	{
if	269:16	270:63	10	(descriptor -> bits_per_sample > 16 && descriptor -> bits_per_sample <= 24)
cond	269:20	269:87	11	descriptor -> bits_per_sample > 16 && descriptor -> bits_per_sample <= 24
water	269:20	0:0	12	descriptor
op	269:30	0:0	12	->
water	269:32	0:0	12	bits_per_sample
op	269:48	0:0	12	>
water	269:50	0:0	12	16
op	269:53	0:0	12	&&
water	269:56	0:0	12	descriptor
op	269:66	0:0	12	->
water	269:68	0:0	12	bits_per_sample
op	269:84	0:0	12	<=
water	269:87	0:0	12	24
stmts	270:20	270:63	11	
water	270:20	0:0	12	st
op	270:22	0:0	12	->
water	270:24	0:0	12	codec
op	270:29	0:0	12	->
water	270:31	0:0	12	codec_id
op	270:40	0:0	12	=
water	270:42	0:0	12	AV_CODEC_ID_PCM_S24LE
water	270:63	0:0	12	;
else	271:16	272:63	10
stmts	271:21	272:63	11	
if	271:21	272:63	12	(descriptor -> bits_per_sample == 32)
cond	271:25	271:56	13	descriptor -> bits_per_sample == 32
water	271:25	0:0	14	descriptor
op	271:35	0:0	14	->
water	271:37	0:0	14	bits_per_sample
op	271:53	0:0	14	==
water	271:56	0:0	14	32
stmts	272:20	272:63	13	
water	272:20	0:0	14	st
op	272:22	0:0	14	->
water	272:24	0:0	14	codec
op	272:29	0:0	14	->
water	272:31	0:0	14	codec_id
op	272:40	0:0	14	=
water	272:42	0:0	14	AV_CODEC_ID_PCM_S32LE
water	272:63	0:0	14	;
water	273:12	0:0	10	}
else	273:14	278:12	8
stmts	273:19	278:12	9	
if	273:19	278:12	10	(st -> codec -> codec_id == AV_CODEC_ID_PCM_S16BE)
cond	273:23	273:46	11	st -> codec -> codec_id == AV_CODEC_ID_PCM_S16BE
water	273:23	0:0	12	st
op	273:25	0:0	12	->
water	273:27	0:0	12	codec
op	273:32	0:0	12	->
water	273:34	0:0	12	codec_id
op	273:43	0:0	12	==
water	273:46	0:0	12	AV_CODEC_ID_PCM_S16BE
stmts	273:69	278:12	11	
water	273:69	0:0	12	{
if	274:16	275:63	12	(descriptor -> bits_per_sample > 16 && descriptor -> bits_per_sample <= 24)
cond	274:20	274:87	13	descriptor -> bits_per_sample > 16 && descriptor -> bits_per_sample <= 24
water	274:20	0:0	14	descriptor
op	274:30	0:0	14	->
water	274:32	0:0	14	bits_per_sample
op	274:48	0:0	14	>
water	274:50	0:0	14	16
op	274:53	0:0	14	&&
water	274:56	0:0	14	descriptor
op	274:66	0:0	14	->
water	274:68	0:0	14	bits_per_sample
op	274:84	0:0	14	<=
water	274:87	0:0	14	24
stmts	275:20	275:63	13	
water	275:20	0:0	14	st
op	275:22	0:0	14	->
water	275:24	0:0	14	codec
op	275:29	0:0	14	->
water	275:31	0:0	14	codec_id
op	275:40	0:0	14	=
water	275:42	0:0	14	AV_CODEC_ID_PCM_S24BE
water	275:63	0:0	14	;
else	276:16	277:63	12
stmts	276:21	277:63	13	
if	276:21	277:63	14	(descriptor -> bits_per_sample == 32)
cond	276:25	276:56	15	descriptor -> bits_per_sample == 32
water	276:25	0:0	16	descriptor
op	276:35	0:0	16	->
water	276:37	0:0	16	bits_per_sample
op	276:53	0:0	16	==
water	276:56	0:0	16	32
stmts	277:20	277:63	15	
water	277:20	0:0	16	st
op	277:22	0:0	16	->
water	277:24	0:0	16	codec
op	277:29	0:0	16	->
water	277:31	0:0	16	codec_id
op	277:40	0:0	16	=
water	277:42	0:0	16	AV_CODEC_ID_PCM_S32BE
water	277:63	0:0	16	;
water	278:12	0:0	12	}
else	278:14	280:12	8
stmts	278:19	280:12	9	
if	278:19	280:12	10	(st -> codec -> codec_id == AV_CODEC_ID_MP2)
cond	278:23	278:46	11	st -> codec -> codec_id == AV_CODEC_ID_MP2
water	278:23	0:0	12	st
op	278:25	0:0	12	->
water	278:27	0:0	12	codec
op	278:32	0:0	12	->
water	278:34	0:0	12	codec_id
op	278:43	0:0	12	==
water	278:46	0:0	12	AV_CODEC_ID_MP2
stmts	278:63	280:12	11	
water	278:63	0:0	12	{
water	279:16	0:0	12	st
op	279:18	0:0	12	->
water	279:20	0:0	12	need_parsing
op	279:33	0:0	12	=
water	279:35	0:0	12	AVSTREAM_PARSE_FULL
water	279:54	0:0	12	;
water	280:12	0:0	12	}
water	281:8	0:0	8	}
else	281:10	289:8	4
stmts	281:15	289:8	5	
if	281:15	289:8	6	(st -> codec -> codec_type == AVMEDIA_TYPE_DATA)
cond	281:19	281:44	7	st -> codec -> codec_type == AVMEDIA_TYPE_DATA
water	281:19	0:0	8	st
op	281:21	0:0	8	->
water	281:23	0:0	8	codec
op	281:28	0:0	8	->
water	281:30	0:0	8	codec_type
op	281:41	0:0	8	==
water	281:44	0:0	8	AVMEDIA_TYPE_DATA
stmts	281:63	289:8	7	
water	281:63	0:0	8	{
decl	282:12	283:69	8	int	codec_id
op	282:25	0:0	8	=
call	282:27	283:64	9	mxf_get_codec_ul
arg	282:44	282:74	10	mxf_data_essence_container_uls
water	282:44	0:0	11	mxf_data_essence_container_uls
arg	283:44	283:64	10	essence_container_ul
water	283:44	0:0	11	essence_container_ul
op	283:65	0:0	8	->
water	283:67	0:0	8	id
if	284:12	288:12	8	(codec_id >= 0 && codec_id <FF_ARRAY_ELEMS (mxf_data_essence_descriptor ))
cond	284:16	285:69	9	codec_id >= 0 && codec_id <FF_ARRAY_ELEMS (mxf_data_essence_descriptor )
water	284:16	0:0	10	codec_id
op	284:25	0:0	10	>=
water	284:28	0:0	10	0
op	284:30	0:0	10	&&
water	285:16	0:0	10	codec_id
op	285:25	0:0	10	<
call	285:27	285:69	10	FF_ARRAY_ELEMS
arg	285:42	285:69	11	mxf_data_essence_descriptor
water	285:42	0:0	12	mxf_data_essence_descriptor
stmts	285:72	288:12	9	
water	285:72	0:0	10	{
call	286:16	287:68	10	av_dict_set
arg	286:28	286:41	11	&st->metadata
op	286:28	0:0	12	&
water	286:29	0:0	12	st
op	286:31	0:0	12	->
water	286:33	0:0	12	metadata
arg	286:43	286:54	11	"data_type"
water	286:43	0:0	12	"data_type"
arg	287:28	287:65	11	mxf_data_essence_descriptor[codec_id]
water	287:28	0:0	12	mxf_data_essence_descriptor
op	287:55	0:0	12	[
water	287:56	0:0	12	codec_id
op	287:64	0:0	12	]
arg	287:67	287:68	11	0
water	287:67	0:0	12	0
water	287:69	0:0	10	;
water	288:12	0:0	10	}
water	289:8	0:0	8	}
if	290:8	294:8	4	(descriptor -> extradata)
cond	290:12	290:24	5	descriptor -> extradata
water	290:12	0:0	6	descriptor
op	290:22	0:0	6	->
water	290:24	0:0	6	extradata
stmts	290:35	294:8	5	
water	290:35	0:0	6	{
if	291:12	293:12	6	(!ff_alloc_extradata (st -> codec ,descriptor -> extradata_size ))
cond	291:16	291:73	7	!ff_alloc_extradata (st -> codec ,descriptor -> extradata_size )
op	291:16	0:0	8	!
call	291:17	291:73	8	ff_alloc_extradata
arg	291:36	291:45	9	st->codec
water	291:36	0:0	10	st
op	291:38	0:0	10	->
water	291:40	0:0	10	codec
arg	291:47	291:73	9	descriptor->extradata_size
water	291:47	0:0	10	descriptor
op	291:57	0:0	10	->
water	291:59	0:0	10	extradata_size
stmts	291:76	293:12	7	
water	291:76	0:0	8	{
call	292:16	292:94	8	memcpy
arg	292:23	292:43	9	st->codec->extradata
water	292:23	0:0	10	st
op	292:25	0:0	10	->
water	292:27	0:0	10	codec
op	292:32	0:0	10	->
water	292:34	0:0	10	extradata
arg	292:45	292:66	9	descriptor->extradata
water	292:45	0:0	10	descriptor
op	292:55	0:0	10	->
water	292:57	0:0	10	extradata
arg	292:68	292:94	9	descriptor->extradata_size
water	292:68	0:0	10	descriptor
op	292:78	0:0	10	->
water	292:80	0:0	10	extradata_size
water	292:95	0:0	8	;
water	293:12	0:0	8	}
water	294:8	0:0	6	}
else	294:10	298:8	4
stmts	294:15	298:8	5	
if	294:15	298:8	6	(st -> codec -> codec_id == AV_CODEC_ID_H264)
cond	294:19	294:42	7	st -> codec -> codec_id == AV_CODEC_ID_H264
water	294:19	0:0	8	st
op	294:21	0:0	8	->
water	294:23	0:0	8	codec
op	294:28	0:0	8	->
water	294:30	0:0	8	codec_id
op	294:39	0:0	8	==
water	294:42	0:0	8	AV_CODEC_ID_H264
stmts	294:60	298:8	7	
water	294:60	0:0	8	{
water	295:12	0:0	8	ret
op	295:16	0:0	8	=
call	295:18	295:47	8	ff_generate_avci_extradata
arg	295:45	295:47	9	st
water	295:45	0:0	10	st
water	295:48	0:0	8	;
if	296:12	297:26	8	(ret < 0)
cond	296:16	296:22	9	ret < 0
water	296:16	0:0	10	ret
op	296:20	0:0	10	<
water	296:22	0:0	10	0
stmts	297:16	297:26	9	
return	297:16	297:26	10	ret
water	297:23	0:0	11	ret
water	298:8	0:0	8	}
if	299:8	302:8	4	(st -> codec -> codec_type != AVMEDIA_TYPE_DATA && ( * essence_container_ul ) [ 15 ] > 0 x01)
cond	299:12	299:89	5	st -> codec -> codec_type != AVMEDIA_TYPE_DATA && ( * essence_container_ul ) [ 15 ] > 0 x01
water	299:12	0:0	6	st
op	299:14	0:0	6	->
water	299:16	0:0	6	codec
op	299:21	0:0	6	->
water	299:23	0:0	6	codec_type
op	299:34	0:0	6	!=
water	299:37	0:0	6	AVMEDIA_TYPE_DATA
op	299:55	0:0	6	&&
water	299:58	0:0	6	(
op	299:59	0:0	6	*
water	299:60	0:0	6	essence_container_ul
water	299:80	0:0	6	)
op	299:81	0:0	6	[
water	299:82	0:0	6	15
op	299:84	0:0	6	]
op	299:86	0:0	6	>
water	299:88	0:0	6	0
water	299:89	0:0	6	x01
stmts	299:94	302:8	5	
water	299:94	0:0	6	{
water	301:12	0:0	6	st
op	301:14	0:0	6	->
water	301:16	0:0	6	need_parsing
op	301:29	0:0	6	=
water	301:31	0:0	6	AVSTREAM_PARSE_TIMESTAMPS
water	301:56	0:0	6	;
water	302:8	0:0	6	}
water	303:4	0:0	4	}
water	304:4	0:0	2	ret
op	304:8	0:0	2	=
water	304:10	0:0	2	0
water	304:11	0:0	2	;
label	305:0	305:13	2	fail_and_free :
return	306:4	306:14	2	ret
water	306:11	0:0	3	ret
