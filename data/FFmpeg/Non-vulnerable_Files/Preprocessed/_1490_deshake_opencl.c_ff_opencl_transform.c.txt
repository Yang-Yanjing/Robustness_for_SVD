func	1:0	70:0	0	int	ff_opencl_transform
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
param	2:24	2:33	2	int	width
param	2:35	2:45	2	int	height
param	2:47	2:53	2	int	cw
param	2:55	2:61	2	int	ch
param	3:24	3:45	2	const float *	matrix_y
param	3:47	3:69	2	const float *	matrix_uv
param	4:24	4:58	2	enum InterpolateMethod	interpolate
param	5:24	5:44	2	enum FillMethod	fill
param	5:46	5:57	2	AVFrame *	in
param	5:59	5:71	2	AVFrame *	out
stmnts	0:0	69:14	1	
decl	7:4	7:15	2	int	ret
op	7:12	0:0	2	=
water	7:14	0:0	2	0
decl	8:4	8:17	2	cl_int	status
decl	9:4	9:39	2	DeshakeContext	*deshake
op	9:28	0:0	2	=
water	9:30	0:0	2	ctx
op	9:33	0:0	2	->
water	9:35	0:0	2	priv
decl	10:4	10:82	2	float4	packed_matrix_lu
op	10:28	0:0	2	=
water	10:30	0:0	2	{
water	10:31	0:0	2	matrix_y
op	10:39	0:0	2	[
water	10:40	0:0	2	0
op	10:41	0:0	2	]
water	10:42	0:0	2	,
water	10:44	0:0	2	matrix_y
op	10:52	0:0	2	[
water	10:53	0:0	2	1
op	10:54	0:0	2	]
water	10:55	0:0	2	,
water	10:57	0:0	2	matrix_y
op	10:65	0:0	2	[
water	10:66	0:0	2	2
op	10:67	0:0	2	]
water	10:68	0:0	2	,
water	10:70	0:0	2	matrix_y
op	10:78	0:0	2	[
water	10:79	0:0	2	5
op	10:80	0:0	2	]
water	10:81	0:0	2	}
decl	11:4	11:86	2	float4	packed_matrix_ch
op	11:28	0:0	2	=
water	11:30	0:0	2	{
water	11:31	0:0	2	matrix_uv
op	11:40	0:0	2	[
water	11:41	0:0	2	0
op	11:42	0:0	2	]
water	11:43	0:0	2	,
water	11:45	0:0	2	matrix_uv
op	11:54	0:0	2	[
water	11:55	0:0	2	1
op	11:56	0:0	2	]
water	11:57	0:0	2	,
water	11:59	0:0	2	matrix_uv
op	11:68	0:0	2	[
water	11:69	0:0	2	2
op	11:70	0:0	2	]
water	11:71	0:0	2	,
water	11:73	0:0	2	matrix_uv
op	11:82	0:0	2	[
water	11:83	0:0	2	5
op	11:84	0:0	2	]
water	11:85	0:0	2	}
decl	12:4	12:92	2	size_t	global_worksize_lu[2]
op	12:33	0:0	2	=
water	12:35	0:0	2	{
water	12:36	0:0	2	(
water	12:37	0:0	2	size_t
water	12:43	0:0	2	)
call	12:44	12:61	3	ROUND_TO_16
arg	12:56	12:61	4	width
water	12:56	0:0	5	width
water	12:62	0:0	2	,
water	12:64	0:0	2	(
water	12:65	0:0	2	size_t
water	12:71	0:0	2	)
call	12:72	12:90	3	ROUND_TO_16
arg	12:84	12:90	4	height
water	12:84	0:0	5	height
water	12:91	0:0	2	}
decl	13:4	13:89	2	size_t	global_worksize_ch[2]
op	13:33	0:0	2	=
water	13:35	0:0	2	{
water	13:36	0:0	2	(
water	13:37	0:0	2	size_t
water	13:43	0:0	2	)
call	13:44	13:58	3	ROUND_TO_16
arg	13:56	13:58	4	cw
water	13:56	0:0	5	cw
water	13:59	0:0	2	,
call	13:61	13:87	3	(size_t)
arg	13:70	13:87	4	2*ROUND_TO_16(ch)
water	13:70	0:0	5	2
call	13:71	13:86	5	*ROUND_TO_16
arg	13:84	13:86	6	ch
water	13:84	0:0	7	ch
water	13:88	0:0	2	}
decl	14:4	14:39	2	size_t	local_worksize[2]
op	14:29	0:0	2	=
water	14:31	0:0	2	{
water	14:32	0:0	2	16
water	14:34	0:0	2	,
water	14:36	0:0	2	16
water	14:38	0:0	2	}
decl	15:4	15:32	2	FFOpenclParam	param_lu
op	15:27	0:0	2	=
water	15:29	0:0	2	{
water	15:30	0:0	2	0
water	15:31	0:0	2	}
decl	16:4	16:32	2	FFOpenclParam	param_ch
op	16:27	0:0	2	=
water	16:29	0:0	2	{
water	16:30	0:0	2	0
water	16:31	0:0	2	}
water	17:4	0:0	2	param_lu
op	17:12	0:0	2	.
water	17:13	0:0	2	ctx
op	17:17	0:0	2	=
water	17:19	0:0	2	param_ch
op	17:27	0:0	2	.
water	17:28	0:0	2	ctx
op	17:32	0:0	2	=
water	17:34	0:0	2	ctx
water	17:37	0:0	2	;
water	18:4	0:0	2	param_lu
op	18:12	0:0	2	.
water	18:13	0:0	2	kernel
op	18:20	0:0	2	=
water	18:22	0:0	2	deshake
op	18:29	0:0	2	->
water	18:31	0:0	2	opencl_ctx
op	18:41	0:0	2	.
water	18:42	0:0	2	kernel_luma
water	18:53	0:0	2	;
water	19:4	0:0	2	param_ch
op	19:12	0:0	2	.
water	19:13	0:0	2	kernel
op	19:20	0:0	2	=
water	19:22	0:0	2	deshake
op	19:29	0:0	2	->
water	19:31	0:0	2	opencl_ctx
op	19:41	0:0	2	.
water	19:42	0:0	2	kernel_chroma
water	19:55	0:0	2	;
if	20:4	23:4	2	(( unsigned int ) interpolate > INTERPOLATE_BIQUADRATIC)
cond	20:8	20:36	3	( unsigned int ) interpolate > INTERPOLATE_BIQUADRATIC
water	20:8	0:0	4	(
water	20:9	0:0	4	unsigned
water	20:18	0:0	4	int
water	20:21	0:0	4	)
water	20:22	0:0	4	interpolate
op	20:34	0:0	4	>
water	20:36	0:0	4	INTERPOLATE_BIQUADRATIC
stmts	20:61	23:4	3	
water	20:61	0:0	4	{
call	21:8	21:76	4	av_log
arg	21:15	21:18	5	ctx
water	21:15	0:0	6	ctx
arg	21:20	21:32	5	AV_LOG_ERROR
water	21:20	0:0	6	AV_LOG_ERROR
arg	21:34	21:76	5	"Selected interpolate method is invalid\n"
water	21:34	0:0	6	"Selected interpolate method is invalid\n"
water	21:77	0:0	4	;
return	22:8	22:30	4	AVERROR(EINVAL)
call	22:15	22:29	5	AVERROR
arg	22:23	22:29	6	EINVAL
water	22:23	0:0	7	EINVAL
water	23:4	0:0	4	}
water	24:4	0:0	2	ret
op	24:8	0:0	2	=
call	24:10	34:38	2	avpriv_opencl_set_parameter
arg	24:38	24:47	3	&param_lu
op	24:38	0:0	4	&
water	24:39	0:0	4	param_lu
arg	25:34	25:84	3	FF_OPENCL_PARAM_INFO(deshake->opencl_ctx.cl_inbuf)
call	25:34	25:83	4	FF_OPENCL_PARAM_INFO
arg	25:55	25:83	5	deshake->opencl_ctx.cl_inbuf
water	25:55	0:0	6	deshake
op	25:62	0:0	6	->
water	25:64	0:0	6	opencl_ctx
op	25:74	0:0	6	.
water	25:75	0:0	6	cl_inbuf
arg	26:34	26:85	3	FF_OPENCL_PARAM_INFO(deshake->opencl_ctx.cl_outbuf)
call	26:34	26:84	4	FF_OPENCL_PARAM_INFO
arg	26:55	26:84	5	deshake->opencl_ctx.cl_outbuf
water	26:55	0:0	6	deshake
op	26:62	0:0	6	->
water	26:64	0:0	6	opencl_ctx
op	26:74	0:0	6	.
water	26:75	0:0	6	cl_outbuf
arg	27:34	27:72	3	FF_OPENCL_PARAM_INFO(packed_matrix_lu)
call	27:34	27:71	4	FF_OPENCL_PARAM_INFO
arg	27:55	27:71	5	packed_matrix_lu
water	27:55	0:0	6	packed_matrix_lu
arg	28:34	28:67	3	FF_OPENCL_PARAM_INFO(interpolate)
call	28:34	28:66	4	FF_OPENCL_PARAM_INFO
arg	28:55	28:66	5	interpolate
water	28:55	0:0	6	interpolate
arg	29:34	29:60	3	FF_OPENCL_PARAM_INFO(fill)
call	29:34	29:59	4	FF_OPENCL_PARAM_INFO
arg	29:55	29:59	5	fill
water	29:55	0:0	6	fill
arg	30:34	30:71	3	FF_OPENCL_PARAM_INFO(in->linesize[0])
call	30:34	30:70	4	FF_OPENCL_PARAM_INFO
arg	30:55	30:70	5	in->linesize[0]
water	30:55	0:0	6	in
op	30:57	0:0	6	->
water	30:59	0:0	6	linesize
op	30:67	0:0	6	[
water	30:68	0:0	6	0
op	30:69	0:0	6	]
arg	31:34	31:72	3	FF_OPENCL_PARAM_INFO(out->linesize[0])
call	31:34	31:71	4	FF_OPENCL_PARAM_INFO
arg	31:55	31:71	5	out->linesize[0]
water	31:55	0:0	6	out
op	31:58	0:0	6	->
water	31:60	0:0	6	linesize
op	31:68	0:0	6	[
water	31:69	0:0	6	0
op	31:70	0:0	6	]
arg	32:34	32:62	3	FF_OPENCL_PARAM_INFO(height)
call	32:34	32:61	4	FF_OPENCL_PARAM_INFO
arg	32:55	32:61	5	height
water	32:55	0:0	6	height
arg	33:34	33:61	3	FF_OPENCL_PARAM_INFO(width)
call	33:34	33:60	4	FF_OPENCL_PARAM_INFO
arg	33:55	33:60	5	width
water	33:55	0:0	6	width
arg	34:34	34:38	3	NULL
water	34:34	0:0	4	NULL
water	34:39	0:0	2	;
if	35:4	36:18	2	(ret < 0)
cond	35:8	35:14	3	ret < 0
water	35:8	0:0	4	ret
op	35:12	0:0	4	<
water	35:14	0:0	4	0
stmts	36:8	36:18	3	
return	36:8	36:18	4	ret
water	36:15	0:0	5	ret
water	37:4	0:0	2	ret
op	37:8	0:0	2	=
call	37:10	51:38	2	avpriv_opencl_set_parameter
arg	37:38	37:47	3	&param_ch
op	37:38	0:0	4	&
water	37:39	0:0	4	param_ch
arg	38:34	38:84	3	FF_OPENCL_PARAM_INFO(deshake->opencl_ctx.cl_inbuf)
call	38:34	38:83	4	FF_OPENCL_PARAM_INFO
arg	38:55	38:83	5	deshake->opencl_ctx.cl_inbuf
water	38:55	0:0	6	deshake
op	38:62	0:0	6	->
water	38:64	0:0	6	opencl_ctx
op	38:74	0:0	6	.
water	38:75	0:0	6	cl_inbuf
arg	39:34	39:85	3	FF_OPENCL_PARAM_INFO(deshake->opencl_ctx.cl_outbuf)
call	39:34	39:84	4	FF_OPENCL_PARAM_INFO
arg	39:55	39:84	5	deshake->opencl_ctx.cl_outbuf
water	39:55	0:0	6	deshake
op	39:62	0:0	6	->
water	39:64	0:0	6	opencl_ctx
op	39:74	0:0	6	.
water	39:75	0:0	6	cl_outbuf
arg	40:34	40:72	3	FF_OPENCL_PARAM_INFO(packed_matrix_ch)
call	40:34	40:71	4	FF_OPENCL_PARAM_INFO
arg	40:55	40:71	5	packed_matrix_ch
water	40:55	0:0	6	packed_matrix_ch
arg	41:34	41:67	3	FF_OPENCL_PARAM_INFO(interpolate)
call	41:34	41:66	4	FF_OPENCL_PARAM_INFO
arg	41:55	41:66	5	interpolate
water	41:55	0:0	6	interpolate
arg	42:34	42:60	3	FF_OPENCL_PARAM_INFO(fill)
call	42:34	42:59	4	FF_OPENCL_PARAM_INFO
arg	42:55	42:59	5	fill
water	42:55	0:0	6	fill
arg	43:34	43:71	3	FF_OPENCL_PARAM_INFO(in->linesize[0])
call	43:34	43:70	4	FF_OPENCL_PARAM_INFO
arg	43:55	43:70	5	in->linesize[0]
water	43:55	0:0	6	in
op	43:57	0:0	6	->
water	43:59	0:0	6	linesize
op	43:67	0:0	6	[
water	43:68	0:0	6	0
op	43:69	0:0	6	]
arg	44:34	44:72	3	FF_OPENCL_PARAM_INFO(out->linesize[0])
call	44:34	44:71	4	FF_OPENCL_PARAM_INFO
arg	44:55	44:71	5	out->linesize[0]
water	44:55	0:0	6	out
op	44:58	0:0	6	->
water	44:60	0:0	6	linesize
op	44:68	0:0	6	[
water	44:69	0:0	6	0
op	44:70	0:0	6	]
arg	45:34	45:71	3	FF_OPENCL_PARAM_INFO(in->linesize[1])
call	45:34	45:70	4	FF_OPENCL_PARAM_INFO
arg	45:55	45:70	5	in->linesize[1]
water	45:55	0:0	6	in
op	45:57	0:0	6	->
water	45:59	0:0	6	linesize
op	45:67	0:0	6	[
water	45:68	0:0	6	1
op	45:69	0:0	6	]
arg	46:34	46:72	3	FF_OPENCL_PARAM_INFO(out->linesize[1])
call	46:34	46:71	4	FF_OPENCL_PARAM_INFO
arg	46:55	46:71	5	out->linesize[1]
water	46:55	0:0	6	out
op	46:58	0:0	6	->
water	46:60	0:0	6	linesize
op	46:68	0:0	6	[
water	46:69	0:0	6	1
op	46:70	0:0	6	]
arg	47:34	47:62	3	FF_OPENCL_PARAM_INFO(height)
call	47:34	47:61	4	FF_OPENCL_PARAM_INFO
arg	47:55	47:61	5	height
water	47:55	0:0	6	height
arg	48:34	48:61	3	FF_OPENCL_PARAM_INFO(width)
call	48:34	48:60	4	FF_OPENCL_PARAM_INFO
arg	48:55	48:60	5	width
water	48:55	0:0	6	width
arg	49:34	49:58	3	FF_OPENCL_PARAM_INFO(ch)
call	49:34	49:57	4	FF_OPENCL_PARAM_INFO
arg	49:55	49:57	5	ch
water	49:55	0:0	6	ch
arg	50:34	50:58	3	FF_OPENCL_PARAM_INFO(cw)
call	50:34	50:57	4	FF_OPENCL_PARAM_INFO
arg	50:55	50:57	5	cw
water	50:55	0:0	6	cw
arg	51:34	51:38	3	NULL
water	51:34	0:0	4	NULL
water	51:39	0:0	2	;
if	52:4	53:18	2	(ret < 0)
cond	52:8	52:14	3	ret < 0
water	52:8	0:0	4	ret
op	52:12	0:0	4	<
water	52:14	0:0	4	0
stmts	53:8	53:18	3	
return	53:8	53:18	4	ret
water	53:15	0:0	5	ret
water	54:4	0:0	2	status
op	54:11	0:0	2	=
call	54:13	56:85	2	clEnqueueNDRangeKernel
arg	54:36	54:69	3	deshake->opencl_ctx.command_queue
water	54:36	0:0	4	deshake
op	54:43	0:0	4	->
water	54:45	0:0	4	opencl_ctx
op	54:55	0:0	4	.
water	54:56	0:0	4	command_queue
arg	55:36	55:67	3	deshake->opencl_ctx.kernel_luma
water	55:36	0:0	4	deshake
op	55:43	0:0	4	->
water	55:45	0:0	4	opencl_ctx
op	55:55	0:0	4	.
water	55:56	0:0	4	kernel_luma
arg	55:69	55:70	3	2
water	55:69	0:0	4	2
arg	55:72	55:76	3	NULL
water	55:72	0:0	4	NULL
arg	56:36	56:54	3	global_worksize_lu
water	56:36	0:0	4	global_worksize_lu
arg	56:56	56:70	3	local_worksize
water	56:56	0:0	4	local_worksize
arg	56:72	56:73	3	0
water	56:72	0:0	4	0
arg	56:75	56:79	3	NULL
water	56:75	0:0	4	NULL
arg	56:81	56:85	3	NULL
water	56:81	0:0	4	NULL
water	56:86	0:0	2	;
water	57:4	0:0	2	status
op	57:11	0:0	2	|=
call	57:14	59:85	2	clEnqueueNDRangeKernel
arg	57:37	57:70	3	deshake->opencl_ctx.command_queue
water	57:37	0:0	4	deshake
op	57:44	0:0	4	->
water	57:46	0:0	4	opencl_ctx
op	57:56	0:0	4	.
water	57:57	0:0	4	command_queue
arg	58:36	58:69	3	deshake->opencl_ctx.kernel_chroma
water	58:36	0:0	4	deshake
op	58:43	0:0	4	->
water	58:45	0:0	4	opencl_ctx
op	58:55	0:0	4	.
water	58:56	0:0	4	kernel_chroma
arg	58:71	58:72	3	2
water	58:71	0:0	4	2
arg	58:74	58:78	3	NULL
water	58:74	0:0	4	NULL
arg	59:36	59:54	3	global_worksize_ch
water	59:36	0:0	4	global_worksize_ch
arg	59:56	59:70	3	local_worksize
water	59:56	0:0	4	local_worksize
arg	59:72	59:73	3	0
water	59:72	0:0	4	0
arg	59:75	59:79	3	NULL
water	59:75	0:0	4	NULL
arg	59:81	59:85	3	NULL
water	59:81	0:0	4	NULL
water	59:86	0:0	2	;
if	60:4	63:4	2	(status != CL_SUCCESS)
cond	60:8	60:18	3	status != CL_SUCCESS
water	60:8	0:0	4	status
op	60:15	0:0	4	!=
water	60:18	0:0	4	CL_SUCCESS
stmts	60:30	63:4	3	
water	60:30	0:0	4	{
call	61:8	61:100	4	av_log
arg	61:15	61:18	5	ctx
water	61:15	0:0	6	ctx
arg	61:20	61:32	5	AV_LOG_ERROR
water	61:20	0:0	6	AV_LOG_ERROR
arg	61:34	61:74	5	"OpenCL run kernel error occurred: %s\n"
water	61:34	0:0	6	"OpenCL run kernel error occurred: %s\n"
arg	61:76	61:100	5	av_opencl_errstr(status)
call	61:76	61:99	6	av_opencl_errstr
arg	61:93	61:99	7	status
water	61:93	0:0	8	status
water	61:101	0:0	4	;
return	62:8	62:31	4	AVERROR_EXTERNAL
water	62:15	0:0	5	AVERROR_EXTERNAL
water	63:4	0:0	4	}
water	64:4	0:0	2	ret
op	64:8	0:0	2	=
call	64:10	66:72	2	av_opencl_buffer_read_image
arg	64:38	64:47	3	out->data
water	64:38	0:0	4	out
op	64:41	0:0	4	->
water	64:43	0:0	4	data
arg	64:49	64:83	3	deshake->opencl_ctx.out_plane_size
water	64:49	0:0	4	deshake
op	64:56	0:0	4	->
water	64:58	0:0	4	opencl_ctx
op	64:68	0:0	4	.
water	64:69	0:0	4	out_plane_size
arg	65:38	65:67	3	deshake->opencl_ctx.plane_num
water	65:38	0:0	4	deshake
op	65:45	0:0	4	->
water	65:47	0:0	4	opencl_ctx
op	65:57	0:0	4	.
water	65:58	0:0	4	plane_num
arg	65:69	65:98	3	deshake->opencl_ctx.cl_outbuf
water	65:69	0:0	4	deshake
op	65:76	0:0	4	->
water	65:78	0:0	4	opencl_ctx
op	65:88	0:0	4	.
water	65:89	0:0	4	cl_outbuf
arg	66:38	66:72	3	deshake->opencl_ctx.cl_outbuf_size
water	66:38	0:0	4	deshake
op	66:45	0:0	4	->
water	66:47	0:0	4	opencl_ctx
op	66:57	0:0	4	.
water	66:58	0:0	4	cl_outbuf_size
water	66:73	0:0	2	;
if	67:4	68:18	2	(ret < 0)
cond	67:8	67:14	3	ret < 0
water	67:8	0:0	4	ret
op	67:12	0:0	4	<
water	67:14	0:0	4	0
stmts	68:8	68:18	3	
return	68:8	68:18	4	ret
water	68:15	0:0	5	ret
return	69:4	69:14	2	ret
water	69:11	0:0	3	ret
