func	1:0	159:0	0	static void	add_input_streams
params	1:29	0:0	1	
param	1:30	1:47	2	OptionsContext *	o
param	1:49	1:68	2	AVFormatContext *	ic
stmnts	0:0	158:4	1	
decl	3:4	3:14	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:14	2	int	ret
for	4:4	158:4	2	(i = 0 ;i < ic -> nb_streams;i ++)
forinit	4:9	4:14	3	i = 0 ;
water	4:9	0:0	4	i
op	4:11	0:0	4	=
water	4:13	0:0	4	0
water	4:14	0:0	4	;
cond	4:16	4:24	3	i < ic -> nb_streams
water	4:16	0:0	4	i
op	4:18	0:0	4	<
water	4:20	0:0	4	ic
op	4:22	0:0	4	->
water	4:24	0:0	4	nb_streams
forexpr	4:36	4:37	3	i ++
water	4:36	0:0	4	i
op	4:37	0:0	4	++
stmts	4:41	158:4	3	
water	4:41	0:0	4	{
decl	5:8	5:37	4	AVStream	*st
op	5:21	0:0	4	=
water	5:23	0:0	4	ic
op	5:25	0:0	4	->
water	5:27	0:0	4	streams
op	5:34	0:0	4	[
water	5:35	0:0	4	i
op	5:36	0:0	4	]
decl	6:8	6:45	4	AVCodecParameters	*par
op	6:31	0:0	4	=
water	6:33	0:0	4	st
op	6:35	0:0	4	->
water	6:37	0:0	4	codecpar
decl	7:8	7:51	4	InputStream	*ist
op	7:25	0:0	4	=
call	7:27	7:50	5	av_mallocz
arg	7:38	7:50	6	sizeof(*ist)
op	7:38	0:0	7	sizeof
water	7:44	0:0	7	(
op	7:45	0:0	7	*
water	7:46	0:0	7	ist
water	7:49	0:0	7	)
decl	8:8	8:71	4	char	*framerate
op	8:24	0:0	4	=
water	8:26	0:0	4	NULL
water	8:30	0:0	4	,
decl	8:8	8:71	4	char	*hwaccel
op	8:41	0:0	4	=
water	8:43	0:0	4	NULL
water	8:47	0:0	4	,
decl	8:8	8:71	4	char	*hwaccel_device
op	8:65	0:0	4	=
water	8:67	0:0	4	NULL
decl	9:8	9:42	4	char	*hwaccel_output_format
op	9:36	0:0	4	=
water	9:38	0:0	4	NULL
decl	10:8	10:30	4	char	*codec_tag
op	10:24	0:0	4	=
water	10:26	0:0	4	NULL
decl	11:8	11:18	4	char	*next
decl	12:8	12:32	4	char	*discard_str
op	12:26	0:0	4	=
water	12:28	0:0	4	NULL
decl	13:8	13:47	4	const AVClass	*cc
op	13:26	0:0	4	=
call	13:28	13:46	5	avcodec_get_class
decl	14:8	14:80	4	const AVOption	*discard_opt
op	14:36	0:0	4	=
call	14:38	14:79	5	av_opt_find
arg	14:50	14:53	6	&cc
op	14:50	0:0	7	&
water	14:51	0:0	7	cc
arg	14:55	14:67	6	"skip_frame"
water	14:55	0:0	7	"skip_frame"
arg	14:69	14:73	6	NULL
water	14:69	0:0	7	NULL
arg	14:75	14:76	6	0
water	14:75	0:0	7	0
arg	14:78	14:79	6	0
water	14:78	0:0	7	0
if	15:8	16:27	4	(! ist)
cond	15:12	15:13	5	! ist
op	15:12	0:0	6	!
water	15:13	0:0	6	ist
stmts	16:12	16:27	5	
call	16:12	16:26	6	exit_program
arg	16:25	16:26	7	1
water	16:25	0:0	8	1
water	16:27	0:0	6	;
call	17:8	17:50	4	GROW_ARRAY
arg	17:19	17:32	5	input_streams
water	17:19	0:0	6	input_streams
arg	17:34	17:50	5	nb_input_streams
water	17:34	0:0	6	nb_input_streams
water	17:51	0:0	4	;
water	18:8	0:0	4	input_streams
op	18:21	0:0	4	[
water	18:22	0:0	4	nb_input_streams
op	18:39	0:0	4	-
water	18:41	0:0	4	1
op	18:42	0:0	4	]
op	18:44	0:0	4	=
water	18:46	0:0	4	ist
water	18:49	0:0	4	;
water	19:8	0:0	4	ist
op	19:11	0:0	4	->
water	19:13	0:0	4	st
op	19:16	0:0	4	=
water	19:18	0:0	4	st
water	19:20	0:0	4	;
water	20:8	0:0	4	ist
op	20:11	0:0	4	->
water	20:13	0:0	4	file_index
op	20:24	0:0	4	=
water	20:26	0:0	4	nb_input_files
water	20:40	0:0	4	;
water	21:8	0:0	4	ist
op	21:11	0:0	4	->
water	21:13	0:0	4	discard
op	21:21	0:0	4	=
water	21:23	0:0	4	1
water	21:24	0:0	4	;
water	22:8	0:0	4	st
op	22:10	0:0	4	->
water	22:12	0:0	4	discard
op	22:21	0:0	4	=
water	22:23	0:0	4	AVDISCARD_ALL
water	22:36	0:0	4	;
water	23:8	0:0	4	ist
op	23:11	0:0	4	->
water	23:13	0:0	4	nb_samples
op	23:24	0:0	4	=
water	23:26	0:0	4	0
water	23:27	0:0	4	;
water	24:8	0:0	4	ist
op	24:11	0:0	4	->
water	24:13	0:0	4	min_pts
op	24:21	0:0	4	=
water	24:23	0:0	4	INT64_MAX
water	24:32	0:0	4	;
water	25:8	0:0	4	ist
op	25:11	0:0	4	->
water	25:13	0:0	4	max_pts
op	25:21	0:0	4	=
water	25:23	0:0	4	INT64_MIN
water	25:32	0:0	4	;
water	26:8	0:0	4	ist
op	26:11	0:0	4	->
water	26:13	0:0	4	ts_scale
op	26:22	0:0	4	=
water	26:24	0:0	4	1
op	26:25	0:0	4	.
water	26:26	0:0	4	0
water	26:27	0:0	4	;
call	27:8	27:65	4	MATCH_PER_STREAM_OPT
arg	27:29	27:37	5	ts_scale
water	27:29	0:0	6	ts_scale
arg	27:39	27:42	5	dbl
water	27:39	0:0	6	dbl
arg	27:44	27:57	5	ist->ts_scale
water	27:44	0:0	6	ist
op	27:47	0:0	6	->
water	27:49	0:0	6	ts_scale
arg	27:59	27:61	5	ic
water	27:59	0:0	6	ic
arg	27:63	27:65	5	st
water	27:63	0:0	6	st
water	27:66	0:0	4	;
water	28:8	0:0	4	ist
op	28:11	0:0	4	->
water	28:13	0:0	4	autorotate
op	28:24	0:0	4	=
water	28:26	0:0	4	1
water	28:27	0:0	4	;
call	29:8	29:67	4	MATCH_PER_STREAM_OPT
arg	29:29	29:39	5	autorotate
water	29:29	0:0	6	autorotate
arg	29:41	29:42	5	i
water	29:41	0:0	6	i
arg	29:44	29:59	5	ist->autorotate
water	29:44	0:0	6	ist
op	29:47	0:0	6	->
water	29:49	0:0	6	autorotate
arg	29:61	29:63	5	ic
water	29:61	0:0	6	ic
arg	29:65	29:67	5	st
water	29:65	0:0	6	st
water	29:68	0:0	4	;
call	30:8	30:63	4	MATCH_PER_STREAM_OPT
arg	30:29	30:39	5	codec_tags
water	30:29	0:0	6	codec_tags
arg	30:41	30:44	5	str
water	30:41	0:0	6	str
arg	30:46	30:55	5	codec_tag
water	30:46	0:0	6	codec_tag
arg	30:57	30:59	5	ic
water	30:57	0:0	6	ic
arg	30:61	30:63	5	st
water	30:61	0:0	6	st
water	30:64	0:0	4	;
if	31:8	36:8	4	(codec_tag)
cond	31:12	31:12	5	codec_tag
water	31:12	0:0	6	codec_tag
stmts	31:23	36:8	5	
water	31:23	0:0	6	{
decl	32:12	32:54	6	uint32_t	tag
op	32:25	0:0	6	=
call	32:27	32:53	7	strtol
arg	32:34	32:43	8	codec_tag
water	32:34	0:0	9	codec_tag
arg	32:45	32:50	8	&next
op	32:45	0:0	9	&
water	32:46	0:0	9	next
arg	32:52	32:53	8	0
water	32:52	0:0	9	0
if	33:12	34:40	6	(* next)
cond	33:16	33:17	7	* next
op	33:16	0:0	8	*
water	33:17	0:0	8	next
stmts	34:16	34:40	7	
water	34:16	0:0	8	tag
op	34:20	0:0	8	=
call	34:22	34:39	8	AV_RL32
arg	34:30	34:39	9	codec_tag
water	34:30	0:0	10	codec_tag
water	34:40	0:0	8	;
water	35:12	0:0	6	st
op	35:14	0:0	6	->
water	35:16	0:0	6	codecpar
op	35:24	0:0	6	->
water	35:26	0:0	6	codec_tag
op	35:36	0:0	6	=
water	35:38	0:0	6	tag
water	35:41	0:0	6	;
water	36:8	0:0	6	}
water	37:8	0:0	4	ist
op	37:11	0:0	4	->
water	37:13	0:0	4	dec
op	37:17	0:0	4	=
call	37:19	37:43	4	choose_decoder
arg	37:34	37:35	5	o
water	37:34	0:0	6	o
arg	37:37	37:39	5	ic
water	37:37	0:0	6	ic
arg	37:41	37:43	5	st
water	37:41	0:0	6	st
water	37:44	0:0	4	;
water	38:8	0:0	4	ist
op	38:11	0:0	4	->
water	38:13	0:0	4	decoder_opts
op	38:26	0:0	4	=
call	38:28	38:109	4	filter_codec_opts
arg	38:46	38:62	5	o->g->codec_opts
water	38:46	0:0	6	o
op	38:47	0:0	6	->
water	38:49	0:0	6	g
op	38:50	0:0	6	->
water	38:52	0:0	6	codec_opts
arg	38:64	38:91	5	ist->st->codecpar->codec_id
water	38:64	0:0	6	ist
op	38:67	0:0	6	->
water	38:69	0:0	6	st
op	38:71	0:0	6	->
water	38:73	0:0	6	codecpar
op	38:81	0:0	6	->
water	38:83	0:0	6	codec_id
arg	38:93	38:95	5	ic
water	38:93	0:0	6	ic
arg	38:97	38:99	5	st
water	38:97	0:0	6	st
arg	38:101	38:109	5	ist->dec
water	38:101	0:0	6	ist
op	38:104	0:0	6	->
water	38:106	0:0	6	dec
water	38:110	0:0	4	;
water	39:8	0:0	4	ist
op	39:11	0:0	4	->
water	39:13	0:0	4	reinit_filters
op	39:28	0:0	4	=
op	39:30	0:0	4	-
water	39:31	0:0	4	1
water	39:32	0:0	4	;
call	40:8	40:75	4	MATCH_PER_STREAM_OPT
arg	40:29	40:43	5	reinit_filters
water	40:29	0:0	6	reinit_filters
arg	40:45	40:46	5	i
water	40:45	0:0	6	i
arg	40:48	40:67	5	ist->reinit_filters
water	40:48	0:0	6	ist
op	40:51	0:0	6	->
water	40:53	0:0	6	reinit_filters
arg	40:69	40:71	5	ic
water	40:69	0:0	6	ic
arg	40:73	40:75	5	st
water	40:73	0:0	6	st
water	40:76	0:0	4	;
call	41:8	41:62	4	MATCH_PER_STREAM_OPT
arg	41:29	41:36	5	discard
water	41:29	0:0	6	discard
arg	41:38	41:41	5	str
water	41:38	0:0	6	str
arg	41:43	41:54	5	discard_str
water	41:43	0:0	6	discard_str
arg	41:56	41:58	5	ic
water	41:56	0:0	6	ic
arg	41:60	41:62	5	st
water	41:60	0:0	6	st
water	41:63	0:0	4	;
water	42:8	0:0	4	ist
op	42:11	0:0	4	->
water	42:13	0:0	4	user_set_discard
op	42:30	0:0	4	=
water	42:32	0:0	4	AVDISCARD_NONE
water	42:46	0:0	4	;
if	43:8	47:8	4	(discard_str &&av_opt_eval_int (& cc ,discard_opt ,discard_str ,& ist -> user_set_discard ) < 0)
cond	43:12	43:100	5	discard_str &&av_opt_eval_int (& cc ,discard_opt ,discard_str ,& ist -> user_set_discard ) < 0
water	43:12	0:0	6	discard_str
op	43:24	0:0	6	&&
call	43:27	43:96	6	av_opt_eval_int
arg	43:43	43:46	7	&cc
op	43:43	0:0	8	&
water	43:44	0:0	8	cc
arg	43:48	43:59	7	discard_opt
water	43:48	0:0	8	discard_opt
arg	43:61	43:72	7	discard_str
water	43:61	0:0	8	discard_str
arg	43:74	43:96	7	&ist->user_set_discard
op	43:74	0:0	8	&
water	43:75	0:0	8	ist
op	43:78	0:0	8	->
water	43:80	0:0	8	user_set_discard
op	43:98	0:0	6	<
water	43:100	0:0	6	0
stmts	43:103	47:8	5	
water	43:103	0:0	6	{
call	44:12	45:31	6	av_log
arg	44:19	44:23	7	NULL
water	44:19	0:0	8	NULL
arg	44:25	44:37	7	AV_LOG_ERROR
water	44:25	0:0	8	AV_LOG_ERROR
arg	44:39	44:68	7	"Error parsing discard %s.\n"
water	44:39	0:0	8	"Error parsing discard %s.\n"
arg	45:20	45:31	7	discard_str
water	45:20	0:0	8	discard_str
water	45:32	0:0	6	;
call	46:12	46:26	6	exit_program
arg	46:25	46:26	7	1
water	46:25	0:0	8	1
water	46:27	0:0	6	;
water	47:8	0:0	6	}
water	48:8	0:0	4	ist
op	48:11	0:0	4	->
water	48:13	0:0	4	filter_in_rescale_delta_last
op	48:42	0:0	4	=
water	48:44	0:0	4	AV_NOPTS_VALUE
water	48:58	0:0	4	;
water	49:8	0:0	4	ist
op	49:11	0:0	4	->
water	49:13	0:0	4	dec_ctx
op	49:21	0:0	4	=
call	49:23	49:54	4	avcodec_alloc_context3
arg	49:46	49:54	5	ist->dec
water	49:46	0:0	6	ist
op	49:49	0:0	6	->
water	49:51	0:0	6	dec
water	49:55	0:0	4	;
if	50:8	53:8	4	(! ist -> dec_ctx)
cond	50:12	50:18	5	! ist -> dec_ctx
op	50:12	0:0	6	!
water	50:13	0:0	6	ist
op	50:16	0:0	6	->
water	50:18	0:0	6	dec_ctx
stmts	50:27	53:8	5	
water	50:27	0:0	6	{
call	51:12	51:80	6	av_log
arg	51:19	51:23	7	NULL
water	51:19	0:0	8	NULL
arg	51:25	51:37	7	AV_LOG_ERROR
water	51:25	0:0	8	AV_LOG_ERROR
arg	51:39	51:80	7	"Error allocating the decoder context.\n"
water	51:39	0:0	8	"Error allocating the decoder context.\n"
water	51:81	0:0	6	;
call	52:12	52:26	6	exit_program
arg	52:25	52:26	7	1
water	52:25	0:0	8	1
water	52:27	0:0	6	;
water	53:8	0:0	6	}
water	54:8	0:0	4	ret
op	54:12	0:0	4	=
call	54:14	54:61	4	avcodec_parameters_to_context
arg	54:44	54:56	5	ist->dec_ctx
water	54:44	0:0	6	ist
op	54:47	0:0	6	->
water	54:49	0:0	6	dec_ctx
arg	54:58	54:61	5	par
water	54:58	0:0	6	par
water	54:62	0:0	4	;
if	55:8	58:8	4	(ret < 0)
cond	55:12	55:18	5	ret < 0
water	55:12	0:0	6	ret
op	55:16	0:0	6	<
water	55:18	0:0	6	0
stmts	55:21	58:8	5	
water	55:21	0:0	6	{
call	56:12	56:82	6	av_log
arg	56:19	56:23	7	NULL
water	56:19	0:0	8	NULL
arg	56:25	56:37	7	AV_LOG_ERROR
water	56:25	0:0	8	AV_LOG_ERROR
arg	56:39	56:82	7	"Error initializing the decoder context.\n"
water	56:39	0:0	8	"Error initializing the decoder context.\n"
water	56:83	0:0	6	;
call	57:12	57:26	6	exit_program
arg	57:25	57:26	7	1
water	57:25	0:0	8	1
water	57:27	0:0	6	;
water	58:8	0:0	6	}
switch	59:8	152:8	4	(par -> codec_type)
cond	59:16	59:21	5	par -> codec_type
water	59:16	0:0	6	par
op	59:19	0:0	6	->
water	59:21	0:0	6	codec_type
stmts	59:33	152:8	5	
water	59:33	0:0	6	{
label	60:8	60:31	6	case AVMEDIA_TYPE_VIDEO :
if	61:12	62:62	6	(! ist -> dec)
cond	61:15	61:21	7	! ist -> dec
op	61:15	0:0	8	!
water	61:16	0:0	8	ist
op	61:19	0:0	8	->
water	61:21	0:0	8	dec
stmts	62:16	62:62	7	
water	62:16	0:0	8	ist
op	62:19	0:0	8	->
water	62:21	0:0	8	dec
op	62:25	0:0	8	=
call	62:27	62:61	8	avcodec_find_decoder
arg	62:48	62:61	9	par->codec_id
water	62:48	0:0	10	par
op	62:51	0:0	10	->
water	62:53	0:0	10	codec_id
water	62:62	0:0	8	;
if	64:12	71:12	6	(av_codec_get_lowres (st -> codec ))
cond	64:16	64:45	7	av_codec_get_lowres (st -> codec )
call	64:16	64:45	8	av_codec_get_lowres
arg	64:36	64:45	9	st->codec
water	64:36	0:0	10	st
op	64:38	0:0	10	->
water	64:40	0:0	10	codec
stmts	64:48	71:12	7	
water	64:48	0:0	8	{
call	65:16	65:80	8	av_codec_set_lowres
arg	65:36	65:48	9	ist->dec_ctx
water	65:36	0:0	10	ist
op	65:39	0:0	10	->
water	65:41	0:0	10	dec_ctx
arg	65:50	65:80	9	av_codec_get_lowres(st->codec)
call	65:50	65:79	10	av_codec_get_lowres
arg	65:70	65:79	11	st->codec
water	65:70	0:0	12	st
op	65:72	0:0	12	->
water	65:74	0:0	12	codec
water	65:81	0:0	8	;
water	66:16	0:0	8	ist
op	66:19	0:0	8	->
water	66:21	0:0	8	dec_ctx
op	66:28	0:0	8	->
water	66:30	0:0	8	width
op	66:37	0:0	8	=
water	66:39	0:0	8	st
op	66:41	0:0	8	->
water	66:43	0:0	8	codec
op	66:48	0:0	8	->
water	66:50	0:0	8	width
water	66:55	0:0	8	;
water	67:16	0:0	8	ist
op	67:19	0:0	8	->
water	67:21	0:0	8	dec_ctx
op	67:28	0:0	8	->
water	67:30	0:0	8	height
op	67:37	0:0	8	=
water	67:39	0:0	8	st
op	67:41	0:0	8	->
water	67:43	0:0	8	codec
op	67:48	0:0	8	->
water	67:50	0:0	8	height
water	67:56	0:0	8	;
water	68:16	0:0	8	ist
op	68:19	0:0	8	->
water	68:21	0:0	8	dec_ctx
op	68:28	0:0	8	->
water	68:30	0:0	8	coded_width
op	68:43	0:0	8	=
water	68:45	0:0	8	st
op	68:47	0:0	8	->
water	68:49	0:0	8	codec
op	68:54	0:0	8	->
water	68:56	0:0	8	coded_width
water	68:67	0:0	8	;
water	69:16	0:0	8	ist
op	69:19	0:0	8	->
water	69:21	0:0	8	dec_ctx
op	69:28	0:0	8	->
water	69:30	0:0	8	coded_height
op	69:43	0:0	8	=
water	69:45	0:0	8	st
op	69:47	0:0	8	->
water	69:49	0:0	8	codec
op	69:54	0:0	8	->
water	69:56	0:0	8	coded_height
water	69:68	0:0	8	;
water	70:16	0:0	8	ist
op	70:19	0:0	8	->
water	70:21	0:0	8	dec_ctx
op	70:28	0:0	8	->
water	70:30	0:0	8	flags
op	70:36	0:0	8	|=
water	70:39	0:0	8	CODEC_FLAG_EMU_EDGE
water	70:58	0:0	8	;
water	71:12	0:0	8	}
water	74:12	0:0	6	ist
op	74:15	0:0	6	->
water	74:17	0:0	6	dec_ctx
op	74:24	0:0	6	->
water	74:26	0:0	6	framerate
op	74:36	0:0	6	=
water	74:38	0:0	6	st
op	74:40	0:0	6	->
water	74:42	0:0	6	avg_frame_rate
water	74:56	0:0	6	;
call	75:12	75:68	6	MATCH_PER_STREAM_OPT
arg	75:33	75:44	7	frame_rates
water	75:33	0:0	8	frame_rates
arg	75:46	75:49	7	str
water	75:46	0:0	8	str
arg	75:51	75:60	7	framerate
water	75:51	0:0	8	framerate
arg	75:62	75:64	7	ic
water	75:62	0:0	8	ic
arg	75:66	75:68	7	st
water	75:66	0:0	8	st
water	75:69	0:0	6	;
if	76:12	81:12	6	(framerate &&av_parse_video_rate (& ist -> framerate ,framerate ) < 0)
cond	76:16	77:62	7	framerate &&av_parse_video_rate (& ist -> framerate ,framerate ) < 0
water	76:16	0:0	8	framerate
op	76:26	0:0	8	&&
call	76:29	77:58	8	av_parse_video_rate
arg	76:49	76:64	9	&ist->framerate
op	76:49	0:0	10	&
water	76:50	0:0	10	ist
op	76:53	0:0	10	->
water	76:55	0:0	10	framerate
arg	77:49	77:58	9	framerate
water	77:49	0:0	10	framerate
op	77:60	0:0	8	<
water	77:62	0:0	8	0
stmts	77:65	81:12	7	
water	77:65	0:0	8	{
call	78:16	79:32	8	av_log
arg	78:23	78:27	9	NULL
water	78:23	0:0	10	NULL
arg	78:29	78:41	9	AV_LOG_ERROR
water	78:29	0:0	10	AV_LOG_ERROR
arg	78:43	78:74	9	"Error parsing framerate %s.\n"
water	78:43	0:0	10	"Error parsing framerate %s.\n"
arg	79:23	79:32	9	framerate
water	79:23	0:0	10	framerate
water	79:33	0:0	8	;
call	80:16	80:30	8	exit_program
arg	80:29	80:30	9	1
water	80:29	0:0	10	1
water	80:31	0:0	8	;
water	81:12	0:0	8	}
water	82:12	0:0	6	ist
op	82:15	0:0	6	->
water	82:17	0:0	6	top_field_first
op	82:33	0:0	6	=
op	82:35	0:0	6	-
water	82:36	0:0	6	1
water	82:37	0:0	6	;
call	83:12	83:81	6	MATCH_PER_STREAM_OPT
arg	83:33	83:48	7	top_field_first
water	83:33	0:0	8	top_field_first
arg	83:50	83:51	7	i
water	83:50	0:0	8	i
arg	83:53	83:73	7	ist->top_field_first
water	83:53	0:0	8	ist
op	83:56	0:0	8	->
water	83:58	0:0	8	top_field_first
arg	83:75	83:77	7	ic
water	83:75	0:0	8	ic
arg	83:79	83:81	7	st
water	83:79	0:0	8	st
water	83:82	0:0	6	;
call	84:12	84:63	6	MATCH_PER_STREAM_OPT
arg	84:33	84:41	7	hwaccels
water	84:33	0:0	8	hwaccels
arg	84:43	84:46	7	str
water	84:43	0:0	8	str
arg	84:48	84:55	7	hwaccel
water	84:48	0:0	8	hwaccel
arg	84:57	84:59	7	ic
water	84:57	0:0	8	ic
arg	84:61	84:63	7	st
water	84:61	0:0	8	st
water	84:64	0:0	6	;
if	85:12	108:12	6	(hwaccel)
cond	85:16	85:16	7	hwaccel
water	85:16	0:0	8	hwaccel
stmts	85:25	108:12	7	
water	85:25	0:0	8	{
if	86:16	87:50	8	(!strcmp (hwaccel ,"none" ))
cond	86:20	86:43	9	!strcmp (hwaccel ,"none" )
op	86:20	0:0	10	!
call	86:21	86:43	10	strcmp
arg	86:28	86:35	11	hwaccel
water	86:28	0:0	12	hwaccel
arg	86:37	86:43	11	"none"
water	86:37	0:0	12	"none"
stmts	87:20	87:50	9	
water	87:20	0:0	10	ist
op	87:23	0:0	10	->
water	87:25	0:0	10	hwaccel_id
op	87:36	0:0	10	=
water	87:38	0:0	10	HWACCEL_NONE
water	87:50	0:0	10	;
else	88:16	89:50	8
stmts	88:21	89:50	9	
if	88:21	89:50	10	(!strcmp (hwaccel ,"auto" ))
cond	88:25	88:48	11	!strcmp (hwaccel ,"auto" )
op	88:25	0:0	12	!
call	88:26	88:48	12	strcmp
arg	88:33	88:40	13	hwaccel
water	88:33	0:0	14	hwaccel
arg	88:42	88:48	13	"auto"
water	88:42	0:0	14	"auto"
stmts	89:20	89:50	11	
water	89:20	0:0	12	ist
op	89:23	0:0	12	->
water	89:25	0:0	12	hwaccel_id
op	89:36	0:0	12	=
water	89:38	0:0	12	HWACCEL_AUTO
water	89:50	0:0	12	;
else	90:16	107:16	8
stmts	90:21	107:16	9	
water	90:21	0:0	10	{
decl	91:20	91:25	10	int	i
for	92:20	97:20	10	(i = 0 ;hwaccels [ i ] . name;i ++)
forinit	92:25	92:30	11	i = 0 ;
water	92:25	0:0	12	i
op	92:27	0:0	12	=
water	92:29	0:0	12	0
water	92:30	0:0	12	;
cond	92:32	92:44	11	hwaccels [ i ] . name
water	92:32	0:0	12	hwaccels
op	92:40	0:0	12	[
water	92:41	0:0	12	i
op	92:42	0:0	12	]
op	92:43	0:0	12	.
water	92:44	0:0	12	name
forexpr	92:50	92:51	11	i ++
water	92:50	0:0	12	i
op	92:51	0:0	12	++
stmts	92:55	97:20	11	
water	92:55	0:0	12	{
if	93:24	96:24	12	(!strcmp (hwaccels [ i ] . name ,hwaccel ))
cond	93:28	93:61	13	!strcmp (hwaccels [ i ] . name ,hwaccel )
op	93:28	0:0	14	!
call	93:29	93:61	14	strcmp
arg	93:36	93:52	15	hwaccels[i].name
water	93:36	0:0	16	hwaccels
op	93:44	0:0	16	[
water	93:45	0:0	16	i
op	93:46	0:0	16	]
op	93:47	0:0	16	.
water	93:48	0:0	16	name
arg	93:54	93:61	15	hwaccel
water	93:54	0:0	16	hwaccel
stmts	93:64	96:24	13	
water	93:64	0:0	14	{
water	94:28	0:0	14	ist
op	94:31	0:0	14	->
water	94:33	0:0	14	hwaccel_id
op	94:44	0:0	14	=
water	94:46	0:0	14	hwaccels
op	94:54	0:0	14	[
water	94:55	0:0	14	i
op	94:56	0:0	14	]
op	94:57	0:0	14	.
water	94:58	0:0	14	id
water	94:60	0:0	14	;
break	95:28	95:33	14	
water	96:24	0:0	14	}
water	97:20	0:0	12	}
if	98:20	106:20	10	(! ist -> hwaccel_id)
cond	98:24	98:30	11	! ist -> hwaccel_id
op	98:24	0:0	12	!
water	98:25	0:0	12	ist
op	98:28	0:0	12	->
water	98:30	0:0	12	hwaccel_id
stmts	98:42	106:20	11	
water	98:42	0:0	12	{
call	99:24	100:38	12	av_log
arg	99:31	99:35	13	NULL
water	99:31	0:0	14	NULL
arg	99:37	99:49	13	AV_LOG_FATAL
water	99:37	0:0	14	AV_LOG_FATAL
arg	99:51	99:80	13	"Unrecognized hwaccel: %s.\n"
water	99:51	0:0	14	"Unrecognized hwaccel: %s.\n"
arg	100:31	100:38	13	hwaccel
water	100:31	0:0	14	hwaccel
water	100:39	0:0	12	;
call	101:24	101:73	12	av_log
arg	101:31	101:35	13	NULL
water	101:31	0:0	14	NULL
arg	101:37	101:49	13	AV_LOG_FATAL
water	101:37	0:0	14	AV_LOG_FATAL
arg	101:51	101:73	13	"Supported hwaccels: "
water	101:51	0:0	14	"Supported hwaccels: "
water	101:74	0:0	12	;
for	102:24	103:79	12	(i = 0 ;hwaccels [ i ] . name;i ++)
forinit	102:29	102:34	13	i = 0 ;
water	102:29	0:0	14	i
op	102:31	0:0	14	=
water	102:33	0:0	14	0
water	102:34	0:0	14	;
cond	102:36	102:48	13	hwaccels [ i ] . name
water	102:36	0:0	14	hwaccels
op	102:44	0:0	14	[
water	102:45	0:0	14	i
op	102:46	0:0	14	]
op	102:47	0:0	14	.
water	102:48	0:0	14	name
forexpr	102:54	102:55	13	i ++
water	102:54	0:0	14	i
op	102:55	0:0	14	++
stmts	103:28	103:79	13	
call	103:28	103:78	14	av_log
arg	103:35	103:39	15	NULL
water	103:35	0:0	16	NULL
arg	103:41	103:53	15	AV_LOG_FATAL
water	103:41	0:0	16	AV_LOG_FATAL
arg	103:55	103:60	15	"%s "
water	103:55	0:0	16	"%s "
arg	103:62	103:78	15	hwaccels[i].name
water	103:62	0:0	16	hwaccels
op	103:70	0:0	16	[
water	103:71	0:0	16	i
op	103:72	0:0	16	]
op	103:73	0:0	16	.
water	103:74	0:0	16	name
water	103:79	0:0	14	;
call	104:24	104:55	12	av_log
arg	104:31	104:35	13	NULL
water	104:31	0:0	14	NULL
arg	104:37	104:49	13	AV_LOG_FATAL
water	104:37	0:0	14	AV_LOG_FATAL
arg	104:51	104:55	13	"\n"
water	104:51	0:0	14	"\n"
water	104:56	0:0	12	;
call	105:24	105:38	12	exit_program
arg	105:37	105:38	13	1
water	105:37	0:0	14	1
water	105:39	0:0	12	;
water	106:20	0:0	12	}
water	107:16	0:0	10	}
water	108:12	0:0	8	}
call	109:12	109:77	6	MATCH_PER_STREAM_OPT
arg	109:33	109:48	7	hwaccel_devices
water	109:33	0:0	8	hwaccel_devices
arg	109:50	109:53	7	str
water	109:50	0:0	8	str
arg	109:55	109:69	7	hwaccel_device
water	109:55	0:0	8	hwaccel_device
arg	109:71	109:73	7	ic
water	109:71	0:0	8	ic
arg	109:75	109:77	7	st
water	109:75	0:0	8	st
water	109:78	0:0	6	;
if	110:12	114:12	6	(hwaccel_device)
cond	110:16	110:16	7	hwaccel_device
water	110:16	0:0	8	hwaccel_device
stmts	110:32	114:12	7	
water	110:32	0:0	8	{
water	111:16	0:0	8	ist
op	111:19	0:0	8	->
water	111:21	0:0	8	hwaccel_device
op	111:36	0:0	8	=
call	111:38	111:62	8	av_strdup
arg	111:48	111:62	9	hwaccel_device
water	111:48	0:0	10	hwaccel_device
water	111:63	0:0	8	;
if	112:16	113:35	8	(! ist -> hwaccel_device)
cond	112:20	112:26	9	! ist -> hwaccel_device
op	112:20	0:0	10	!
water	112:21	0:0	10	ist
op	112:24	0:0	10	->
water	112:26	0:0	10	hwaccel_device
stmts	113:20	113:35	9	
call	113:20	113:34	10	exit_program
arg	113:33	113:34	11	1
water	113:33	0:0	12	1
water	113:35	0:0	10	;
water	114:12	0:0	8	}
call	115:12	116:62	6	MATCH_PER_STREAM_OPT
arg	115:33	115:55	7	hwaccel_output_formats
water	115:33	0:0	8	hwaccel_output_formats
arg	115:57	115:60	7	str
water	115:57	0:0	8	str
arg	116:33	116:54	7	hwaccel_output_format
water	116:33	0:0	8	hwaccel_output_format
arg	116:56	116:58	7	ic
water	116:56	0:0	8	ic
arg	116:60	116:62	7	st
water	116:60	0:0	8	st
water	116:63	0:0	6	;
if	117:12	123:12	6	(hwaccel_output_format)
cond	117:16	117:16	7	hwaccel_output_format
water	117:16	0:0	8	hwaccel_output_format
stmts	117:39	123:12	7	
water	117:39	0:0	8	{
water	118:16	0:0	8	ist
op	118:19	0:0	8	->
water	118:21	0:0	8	hwaccel_output_format
op	118:43	0:0	8	=
call	118:45	118:81	8	av_get_pix_fmt
arg	118:60	118:81	9	hwaccel_output_format
water	118:60	0:0	10	hwaccel_output_format
water	118:82	0:0	8	;
if	119:16	122:16	8	(ist -> hwaccel_output_format == AV_PIX_FMT_NONE)
cond	119:20	119:50	9	ist -> hwaccel_output_format == AV_PIX_FMT_NONE
water	119:20	0:0	10	ist
op	119:23	0:0	10	->
water	119:25	0:0	10	hwaccel_output_format
op	119:47	0:0	10	==
water	119:50	0:0	10	AV_PIX_FMT_NONE
stmts	119:67	122:16	9	
water	119:67	0:0	10	{
call	120:20	121:62	10	av_log
arg	120:27	120:31	11	NULL
water	120:27	0:0	12	NULL
arg	120:33	120:45	11	AV_LOG_FATAL
water	120:33	0:0	12	AV_LOG_FATAL
arg	120:47	121:39	11	"Unrecognised hwaccel output ""format: %s"
water	120:47	0:0	12	"Unrecognised hwaccel output "
water	121:27	0:0	12	"format: %s"
arg	121:41	121:62	11	hwaccel_output_format
water	121:41	0:0	12	hwaccel_output_format
water	121:63	0:0	10	;
water	122:16	0:0	10	}
water	123:12	0:0	8	}
else	123:14	125:12	6
stmts	123:19	125:12	7	
water	123:19	0:0	8	{
water	124:16	0:0	8	ist
op	124:19	0:0	8	->
water	124:21	0:0	8	hwaccel_output_format
op	124:43	0:0	8	=
water	124:45	0:0	8	AV_PIX_FMT_NONE
water	124:60	0:0	8	;
water	125:12	0:0	8	}
water	126:12	0:0	6	ist
op	126:15	0:0	6	->
water	126:17	0:0	6	hwaccel_pix_fmt
op	126:33	0:0	6	=
water	126:35	0:0	6	AV_PIX_FMT_NONE
water	126:50	0:0	6	;
break	127:12	127:17	6	
label	128:8	128:31	6	case AVMEDIA_TYPE_AUDIO :
water	129:12	0:0	6	ist
op	129:15	0:0	6	->
water	129:17	0:0	6	guess_layout_max
op	129:34	0:0	6	=
water	129:36	0:0	6	INT_MAX
water	129:43	0:0	6	;
call	130:12	130:83	6	MATCH_PER_STREAM_OPT
arg	130:33	130:49	7	guess_layout_max
water	130:33	0:0	8	guess_layout_max
arg	130:51	130:52	7	i
water	130:51	0:0	8	i
arg	130:54	130:75	7	ist->guess_layout_max
water	130:54	0:0	8	ist
op	130:57	0:0	8	->
water	130:59	0:0	8	guess_layout_max
arg	130:77	130:79	7	ic
water	130:77	0:0	8	ic
arg	130:81	130:83	7	st
water	130:81	0:0	8	st
water	130:84	0:0	6	;
call	131:12	131:42	6	guess_input_channel_layout
arg	131:39	131:42	7	ist
water	131:39	0:0	8	ist
water	131:43	0:0	6	;
break	132:12	132:17	6	
label	133:8	133:30	6	case AVMEDIA_TYPE_DATA :
label	134:8	134:34	6	case AVMEDIA_TYPE_SUBTITLE :
water	134:36	0:0	6	{
decl	135:12	135:36	6	char	*canvas_size
op	135:30	0:0	6	=
water	135:32	0:0	6	NULL
if	136:12	137:62	6	(! ist -> dec)
cond	136:15	136:21	7	! ist -> dec
op	136:15	0:0	8	!
water	136:16	0:0	8	ist
op	136:19	0:0	8	->
water	136:21	0:0	8	dec
stmts	137:16	137:62	7	
water	137:16	0:0	8	ist
op	137:19	0:0	8	->
water	137:21	0:0	8	dec
op	137:25	0:0	8	=
call	137:27	137:61	8	avcodec_find_decoder
arg	137:48	137:61	9	par->codec_id
water	137:48	0:0	10	par
op	137:51	0:0	10	->
water	137:53	0:0	10	codec_id
water	137:62	0:0	8	;
call	138:12	138:83	6	MATCH_PER_STREAM_OPT
arg	138:33	138:49	7	fix_sub_duration
water	138:33	0:0	8	fix_sub_duration
arg	138:51	138:52	7	i
water	138:51	0:0	8	i
arg	138:54	138:75	7	ist->fix_sub_duration
water	138:54	0:0	8	ist
op	138:57	0:0	8	->
water	138:59	0:0	8	fix_sub_duration
arg	138:77	138:79	7	ic
water	138:77	0:0	8	ic
arg	138:81	138:83	7	st
water	138:81	0:0	8	st
water	138:84	0:0	6	;
call	139:12	139:71	6	MATCH_PER_STREAM_OPT
arg	139:33	139:45	7	canvas_sizes
water	139:33	0:0	8	canvas_sizes
arg	139:47	139:50	7	str
water	139:47	0:0	8	str
arg	139:52	139:63	7	canvas_size
water	139:52	0:0	8	canvas_size
arg	139:65	139:67	7	ic
water	139:65	0:0	8	ic
arg	139:69	139:71	7	st
water	139:69	0:0	8	st
water	139:72	0:0	6	;
if	140:12	144:12	6	(canvas_size &&av_parse_video_size (& ist -> dec_ctx -> width ,& ist -> dec_ctx -> height ,canvas_size ) < 0)
cond	140:16	141:96	7	canvas_size &&av_parse_video_size (& ist -> dec_ctx -> width ,& ist -> dec_ctx -> height ,canvas_size ) < 0
water	140:16	0:0	8	canvas_size
op	140:28	0:0	8	&&
call	141:16	141:92	8	av_parse_video_size
arg	141:36	141:56	9	&ist->dec_ctx->width
op	141:36	0:0	10	&
water	141:37	0:0	10	ist
op	141:40	0:0	10	->
water	141:42	0:0	10	dec_ctx
op	141:49	0:0	10	->
water	141:51	0:0	10	width
arg	141:58	141:79	9	&ist->dec_ctx->height
op	141:58	0:0	10	&
water	141:59	0:0	10	ist
op	141:62	0:0	10	->
water	141:64	0:0	10	dec_ctx
op	141:71	0:0	10	->
water	141:73	0:0	10	height
arg	141:81	141:92	9	canvas_size
water	141:81	0:0	10	canvas_size
op	141:94	0:0	8	<
water	141:96	0:0	8	0
stmts	141:99	144:12	7	
water	141:99	0:0	8	{
call	142:16	142:84	8	av_log
arg	142:23	142:27	9	NULL
water	142:23	0:0	10	NULL
arg	142:29	142:41	9	AV_LOG_FATAL
water	142:29	0:0	10	AV_LOG_FATAL
arg	142:43	142:71	9	"Invalid canvas size: %s.\n"
water	142:43	0:0	10	"Invalid canvas size: %s.\n"
arg	142:73	142:84	9	canvas_size
water	142:73	0:0	10	canvas_size
water	142:85	0:0	8	;
call	143:16	143:30	8	exit_program
arg	143:29	143:30	9	1
water	143:29	0:0	10	1
water	143:31	0:0	8	;
water	144:12	0:0	8	}
break	145:12	145:17	6	
water	146:8	0:0	6	}
label	147:8	147:36	6	case AVMEDIA_TYPE_ATTACHMENT :
label	148:8	148:33	6	case AVMEDIA_TYPE_UNKNOWN :
break	149:12	149:17	6	
label	150:8	150:15	6	default :
call	151:12	151:18	6	abort
water	151:19	0:0	6	;
water	152:8	0:0	6	}
water	153:8	0:0	4	ret
op	153:12	0:0	4	=
call	153:14	153:63	4	avcodec_parameters_from_context
arg	153:46	153:49	5	par
water	153:46	0:0	6	par
arg	153:51	153:63	5	ist->dec_ctx
water	153:51	0:0	6	ist
op	153:54	0:0	6	->
water	153:56	0:0	6	dec_ctx
water	153:64	0:0	4	;
if	154:8	157:8	4	(ret < 0)
cond	154:12	154:18	5	ret < 0
water	154:12	0:0	6	ret
op	154:16	0:0	6	<
water	154:18	0:0	6	0
stmts	154:21	157:8	5	
water	154:21	0:0	6	{
call	155:12	155:82	6	av_log
arg	155:19	155:23	7	NULL
water	155:19	0:0	8	NULL
arg	155:25	155:37	7	AV_LOG_ERROR
water	155:25	0:0	8	AV_LOG_ERROR
arg	155:39	155:82	7	"Error initializing the decoder context.\n"
water	155:39	0:0	8	"Error initializing the decoder context.\n"
water	155:83	0:0	6	;
call	156:12	156:26	6	exit_program
arg	156:25	156:26	7	1
water	156:25	0:0	8	1
water	156:27	0:0	6	;
water	157:8	0:0	6	}
water	158:4	0:0	4	}
