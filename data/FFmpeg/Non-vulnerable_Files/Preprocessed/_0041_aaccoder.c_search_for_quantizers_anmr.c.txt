func	1:0	143:0	0	static void	search_for_quantizers_anmr
params	1:38	0:0	1	
param	1:39	1:60	2	AVCodecContext *	avctx
param	1:62	1:78	2	AACEncContext *	s
param	2:39	2:64	2	SingleChannelElement *	sce
param	3:39	3:57	2	const float	lambda
stmnts	0:0	142:62	1	
decl	5:4	5:30	2	int	q
water	5:9	0:0	2	,
decl	5:4	5:30	2	int	w
water	5:12	0:0	2	,
decl	5:4	5:30	2	int	w2
water	5:16	0:0	2	,
decl	5:4	5:30	2	int	g
water	5:19	0:0	2	,
decl	5:4	5:30	2	int	start
op	5:27	0:0	2	=
water	5:29	0:0	2	0
decl	6:4	6:12	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	j
decl	7:4	7:11	2	int	idx
water	8:4	0:0	2	TrellisPath
water	8:16	0:0	2	paths
op	8:21	0:0	2	[
water	8:22	0:0	2	TRELLIS_STAGES
op	8:36	0:0	2	]
op	8:37	0:0	2	[
water	8:38	0:0	2	TRELLIS_STATES
op	8:52	0:0	2	]
water	8:53	0:0	2	;
decl	9:4	9:32	2	int	bandaddr[TRELLIS_STAGES]
decl	10:4	10:12	2	int	minq
decl	11:4	11:17	2	float	mincost
decl	12:4	12:49	2	float	q0f
op	12:14	0:0	2	=
water	12:16	0:0	2	FLT_MAX
water	12:23	0:0	2	,
decl	12:4	12:49	2	float	q1f
op	12:29	0:0	2	=
water	12:31	0:0	2	0
op	12:32	0:0	2	.
water	12:33	0:0	2	0
water	12:34	0:0	2	f
water	12:35	0:0	2	,
decl	12:4	12:49	2	float	qnrgf
op	12:43	0:0	2	=
water	12:45	0:0	2	0
op	12:46	0:0	2	.
water	12:47	0:0	2	0
water	12:48	0:0	2	f
decl	13:4	13:24	2	int	q0
water	13:10	0:0	2	,
decl	13:4	13:24	2	int	q1
water	13:14	0:0	2	,
decl	13:4	13:24	2	int	qcnt
op	13:21	0:0	2	=
water	13:23	0:0	2	0
for	14:4	22:4	2	(i = 0 ;i < 1024;i ++)
forinit	14:9	14:14	3	i = 0 ;
water	14:9	0:0	4	i
op	14:11	0:0	4	=
water	14:13	0:0	4	0
water	14:14	0:0	4	;
cond	14:16	14:20	3	i < 1024
water	14:16	0:0	4	i
op	14:18	0:0	4	<
water	14:20	0:0	4	1024
forexpr	14:26	14:27	3	i ++
water	14:26	0:0	4	i
op	14:27	0:0	4	++
stmts	14:31	22:4	3	
water	14:31	0:0	4	{
decl	15:8	15:39	4	float	t
op	15:16	0:0	4	=
call	15:18	15:38	5	fabsf
arg	15:24	15:38	6	sce->coeffs[i]
water	15:24	0:0	7	sce
op	15:27	0:0	7	->
water	15:29	0:0	7	coeffs
op	15:35	0:0	7	[
water	15:36	0:0	7	i
op	15:37	0:0	7	]
if	16:8	21:8	4	(t > 0 . 0 f)
cond	16:12	16:19	5	t > 0 . 0 f
water	16:12	0:0	6	t
op	16:14	0:0	6	>
water	16:16	0:0	6	0
op	16:17	0:0	6	.
water	16:18	0:0	6	0
water	16:19	0:0	6	f
stmts	16:22	21:8	5	
water	16:22	0:0	6	{
water	17:12	0:0	6	q0f
op	17:16	0:0	6	=
call	17:18	17:30	6	FFMIN
arg	17:24	17:27	7	q0f
water	17:24	0:0	8	q0f
arg	17:29	17:30	7	t
water	17:29	0:0	8	t
water	17:31	0:0	6	;
water	18:12	0:0	6	q1f
op	18:16	0:0	6	=
call	18:18	18:30	6	FFMAX
arg	18:24	18:27	7	q1f
water	18:24	0:0	8	q1f
arg	18:29	18:30	7	t
water	18:29	0:0	8	t
water	18:31	0:0	6	;
water	19:12	0:0	6	qnrgf
op	19:18	0:0	6	+=
water	19:21	0:0	6	t
op	19:22	0:0	6	*
water	19:23	0:0	6	t
water	19:24	0:0	6	;
water	20:12	0:0	6	qcnt
op	20:16	0:0	6	++
water	20:18	0:0	6	;
water	21:8	0:0	6	}
water	22:4	0:0	4	}
if	23:4	27:4	2	(! qcnt)
cond	23:8	23:9	3	! qcnt
op	23:8	0:0	4	!
water	23:9	0:0	4	qcnt
stmts	23:15	27:4	3	
water	23:15	0:0	4	{
call	24:8	24:50	4	memset
arg	24:15	24:26	5	sce->sf_idx
water	24:15	0:0	6	sce
op	24:18	0:0	6	->
water	24:20	0:0	6	sf_idx
arg	24:28	24:29	5	0
water	24:28	0:0	6	0
arg	24:31	24:50	5	sizeof(sce->sf_idx)
op	24:31	0:0	6	sizeof
water	24:37	0:0	6	(
water	24:38	0:0	6	sce
op	24:41	0:0	6	->
water	24:43	0:0	6	sf_idx
water	24:49	0:0	6	)
water	24:51	0:0	4	;
call	25:8	25:50	4	memset
arg	25:15	25:26	5	sce->zeroes
water	25:15	0:0	6	sce
op	25:18	0:0	6	->
water	25:20	0:0	6	zeroes
arg	25:28	25:29	5	1
water	25:28	0:0	6	1
arg	25:31	25:50	5	sizeof(sce->zeroes)
op	25:31	0:0	6	sizeof
water	25:37	0:0	6	(
water	25:38	0:0	6	sce
op	25:41	0:0	6	->
water	25:43	0:0	6	zeroes
water	25:49	0:0	6	)
water	25:51	0:0	4	;
return	26:8	26:14	4	
water	27:4	0:0	4	}
water	29:4	0:0	2	q0
op	29:7	0:0	2	=
call	29:9	29:23	2	coef2minsf
arg	29:20	29:23	3	q0f
water	29:20	0:0	4	q0f
water	29:24	0:0	2	;
water	31:4	0:0	2	q1
op	31:7	0:0	2	=
call	31:9	31:23	2	coef2maxsf
arg	31:20	31:23	3	q1f
water	31:20	0:0	4	q1f
water	31:24	0:0	2	;
if	32:4	46:4	2	(q1 - q0 > 60)
cond	32:8	32:18	3	q1 - q0 > 60
water	32:8	0:0	4	q1
op	32:11	0:0	4	-
water	32:13	0:0	4	q0
op	32:16	0:0	4	>
water	32:18	0:0	4	60
stmts	32:22	46:4	3	
water	32:22	0:0	4	{
decl	33:8	33:23	4	int	q0low
op	33:19	0:0	4	=
water	33:21	0:0	4	q0
decl	34:8	34:23	4	int	q1high
op	34:19	0:0	4	=
water	34:21	0:0	4	q1
decl	36:8	36:97	4	int	qnrg
op	36:17	0:0	4	=
call	36:19	36:96	5	av_clip_uint8
arg	36:33	36:96	6	log2f(sqrtf(qnrgf/qcnt))*4-31+SCALE_ONE_POS-SCALE_DIV_512
call	36:33	36:56	7	log2f
arg	36:39	36:56	8	sqrtf(qnrgf/qcnt)
call	36:39	36:55	9	sqrtf
arg	36:45	36:55	10	qnrgf/qcnt
water	36:45	0:0	11	qnrgf
op	36:50	0:0	11	/
water	36:51	0:0	11	qcnt
op	36:57	0:0	7	*
water	36:58	0:0	7	4
op	36:60	0:0	7	-
water	36:62	0:0	7	31
op	36:65	0:0	7	+
water	36:67	0:0	7	SCALE_ONE_POS
op	36:81	0:0	7	-
water	36:83	0:0	7	SCALE_DIV_512
water	37:8	0:0	4	q1
op	37:11	0:0	4	=
water	37:13	0:0	4	qnrg
op	37:18	0:0	4	+
water	37:20	0:0	4	30
water	37:22	0:0	4	;
water	38:8	0:0	4	q0
op	38:11	0:0	4	=
water	38:13	0:0	4	qnrg
op	38:18	0:0	4	-
water	38:20	0:0	4	30
water	38:22	0:0	4	;
if	39:8	42:8	4	(q0 < q0low)
cond	39:12	39:17	5	q0 < q0low
water	39:12	0:0	6	q0
op	39:15	0:0	6	<
water	39:17	0:0	6	q0low
stmts	39:24	42:8	5	
water	39:24	0:0	6	{
water	40:12	0:0	6	q1
op	40:15	0:0	6	+=
water	40:18	0:0	6	q0low
op	40:24	0:0	6	-
water	40:26	0:0	6	q0
water	40:28	0:0	6	;
water	41:12	0:0	6	q0
op	41:16	0:0	6	=
water	41:18	0:0	6	q0low
water	41:23	0:0	6	;
water	42:8	0:0	6	}
else	42:10	45:8	4
stmts	42:15	45:8	5	
if	42:15	45:8	6	(q1 > q1high)
cond	42:19	42:24	7	q1 > q1high
water	42:19	0:0	8	q1
op	42:22	0:0	8	>
water	42:24	0:0	8	q1high
stmts	42:32	45:8	7	
water	42:32	0:0	8	{
water	43:12	0:0	8	q0
op	43:15	0:0	8	-=
water	43:18	0:0	8	q1
op	43:21	0:0	8	-
water	43:23	0:0	8	q1high
water	43:29	0:0	8	;
water	44:12	0:0	8	q1
op	44:16	0:0	8	=
water	44:18	0:0	8	q1high
water	44:24	0:0	8	;
water	45:8	0:0	8	}
water	46:4	0:0	4	}
for	47:4	50:4	2	(i = 0 ;i < TRELLIS_STATES;i ++)
forinit	47:9	47:14	3	i = 0 ;
water	47:9	0:0	4	i
op	47:11	0:0	4	=
water	47:13	0:0	4	0
water	47:14	0:0	4	;
cond	47:16	47:20	3	i < TRELLIS_STATES
water	47:16	0:0	4	i
op	47:18	0:0	4	<
water	47:20	0:0	4	TRELLIS_STATES
forexpr	47:36	47:37	3	i ++
water	47:36	0:0	4	i
op	47:37	0:0	4	++
stmts	47:41	50:4	3	
water	47:41	0:0	4	{
water	48:8	0:0	4	paths
op	48:13	0:0	4	[
water	48:14	0:0	4	0
op	48:15	0:0	4	]
op	48:16	0:0	4	[
water	48:17	0:0	4	i
op	48:18	0:0	4	]
op	48:19	0:0	4	.
water	48:20	0:0	4	cost
op	48:28	0:0	4	=
water	48:30	0:0	4	0
op	48:31	0:0	4	.
water	48:32	0:0	4	0
water	48:33	0:0	4	f
water	48:34	0:0	4	;
water	49:8	0:0	4	paths
op	49:13	0:0	4	[
water	49:14	0:0	4	0
op	49:15	0:0	4	]
op	49:16	0:0	4	[
water	49:17	0:0	4	i
op	49:18	0:0	4	]
op	49:19	0:0	4	.
water	49:20	0:0	4	prev
op	49:28	0:0	4	=
op	49:30	0:0	4	-
water	49:31	0:0	4	1
water	49:32	0:0	4	;
water	50:4	0:0	4	}
for	51:4	56:4	2	(j = 1 ;j < TRELLIS_STAGES;j ++)
forinit	51:9	51:14	3	j = 1 ;
water	51:9	0:0	4	j
op	51:11	0:0	4	=
water	51:13	0:0	4	1
water	51:14	0:0	4	;
cond	51:16	51:20	3	j < TRELLIS_STAGES
water	51:16	0:0	4	j
op	51:18	0:0	4	<
water	51:20	0:0	4	TRELLIS_STAGES
forexpr	51:36	51:37	3	j ++
water	51:36	0:0	4	j
op	51:37	0:0	4	++
stmts	51:41	56:4	3	
water	51:41	0:0	4	{
for	52:8	55:8	4	(i = 0 ;i < TRELLIS_STATES;i ++)
forinit	52:13	52:18	5	i = 0 ;
water	52:13	0:0	6	i
op	52:15	0:0	6	=
water	52:17	0:0	6	0
water	52:18	0:0	6	;
cond	52:20	52:24	5	i < TRELLIS_STATES
water	52:20	0:0	6	i
op	52:22	0:0	6	<
water	52:24	0:0	6	TRELLIS_STATES
forexpr	52:40	52:41	5	i ++
water	52:40	0:0	6	i
op	52:41	0:0	6	++
stmts	52:45	55:8	5	
water	52:45	0:0	6	{
water	53:12	0:0	6	paths
op	53:17	0:0	6	[
water	53:18	0:0	6	j
op	53:19	0:0	6	]
op	53:20	0:0	6	[
water	53:21	0:0	6	i
op	53:22	0:0	6	]
op	53:23	0:0	6	.
water	53:24	0:0	6	cost
op	53:32	0:0	6	=
water	53:34	0:0	6	INFINITY
water	53:42	0:0	6	;
water	54:12	0:0	6	paths
op	54:17	0:0	6	[
water	54:18	0:0	6	j
op	54:19	0:0	6	]
op	54:20	0:0	6	[
water	54:21	0:0	6	i
op	54:22	0:0	6	]
op	54:23	0:0	6	.
water	54:24	0:0	6	prev
op	54:32	0:0	6	=
op	54:34	0:0	6	-
water	54:35	0:0	6	2
water	54:36	0:0	6	;
water	55:8	0:0	6	}
water	56:4	0:0	4	}
water	57:4	0:0	2	idx
op	57:8	0:0	2	=
water	57:10	0:0	2	1
water	57:11	0:0	2	;
call	58:4	58:44	2	abs_pow34_v
arg	58:16	58:25	3	s->scoefs
water	58:16	0:0	4	s
op	58:17	0:0	4	->
water	58:19	0:0	4	scoefs
arg	58:27	58:38	3	sce->coeffs
water	58:27	0:0	4	sce
op	58:30	0:0	4	->
water	58:32	0:0	4	coeffs
arg	58:40	58:44	3	1024
water	58:40	0:0	4	1024
water	58:45	0:0	2	;
for	59:4	123:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	59:9	59:14	3	w = 0 ;
water	59:9	0:0	4	w
op	59:11	0:0	4	=
water	59:13	0:0	4	0
water	59:14	0:0	4	;
cond	59:16	59:29	3	w < sce -> ics . num_windows
water	59:16	0:0	4	w
op	59:18	0:0	4	<
water	59:20	0:0	4	sce
op	59:23	0:0	4	->
water	59:25	0:0	4	ics
op	59:28	0:0	4	.
water	59:29	0:0	4	num_windows
forexpr	59:42	59:67	3	w += sce -> ics . group_len [ w ]
water	59:42	0:0	4	w
op	59:44	0:0	4	+=
water	59:47	0:0	4	sce
op	59:50	0:0	4	->
water	59:52	0:0	4	ics
op	59:55	0:0	4	.
water	59:56	0:0	4	group_len
op	59:65	0:0	4	[
water	59:66	0:0	4	w
op	59:67	0:0	4	]
stmts	59:70	123:4	3	
water	59:70	0:0	4	{
water	60:8	0:0	4	start
op	60:14	0:0	4	=
water	60:16	0:0	4	w
op	60:17	0:0	4	*
water	60:18	0:0	4	128
water	60:21	0:0	4	;
for	61:8	122:8	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	61:13	61:18	5	g = 0 ;
water	61:13	0:0	6	g
op	61:15	0:0	6	=
water	61:17	0:0	6	0
water	61:18	0:0	6	;
cond	61:20	61:33	5	g < sce -> ics . num_swb
water	61:20	0:0	6	g
op	61:22	0:0	6	<
water	61:24	0:0	6	sce
op	61:27	0:0	6	->
water	61:29	0:0	6	ics
op	61:32	0:0	6	.
water	61:33	0:0	6	num_swb
forexpr	61:42	61:43	5	g ++
water	61:42	0:0	6	g
op	61:43	0:0	6	++
stmts	61:47	122:8	5	
water	61:47	0:0	6	{
decl	62:12	62:52	6	const float	*coefs
op	62:31	0:0	6	=
op	62:33	0:0	6	&
water	62:34	0:0	6	sce
op	62:37	0:0	6	->
water	62:39	0:0	6	coeffs
op	62:45	0:0	6	[
water	62:46	0:0	6	start
op	62:51	0:0	6	]
decl	63:12	63:28	6	float	qmin
water	63:22	0:0	6	,
decl	63:12	63:28	6	float	qmax
decl	64:12	64:22	6	int	nz
op	64:19	0:0	6	=
water	64:21	0:0	6	0
water	65:12	0:0	6	bandaddr
op	65:20	0:0	6	[
water	65:21	0:0	6	idx
op	65:24	0:0	6	]
op	65:26	0:0	6	=
water	65:28	0:0	6	w
op	65:30	0:0	6	*
water	65:32	0:0	6	16
op	65:35	0:0	6	+
water	65:37	0:0	6	g
water	65:38	0:0	6	;
water	66:12	0:0	6	qmin
op	66:17	0:0	6	=
water	66:19	0:0	6	INT_MAX
water	66:26	0:0	6	;
water	67:12	0:0	6	qmax
op	67:17	0:0	6	=
water	67:19	0:0	6	0
op	67:20	0:0	6	.
water	67:21	0:0	6	0
water	67:22	0:0	6	f
water	67:23	0:0	6	;
for	68:12	82:12	6	(w2 = 0 ;w2 < sce -> ics . group_len [ w ];w2 ++)
forinit	68:17	68:23	7	w2 = 0 ;
water	68:17	0:0	8	w2
op	68:20	0:0	8	=
water	68:22	0:0	8	0
water	68:23	0:0	8	;
cond	68:25	68:50	7	w2 < sce -> ics . group_len [ w ]
water	68:25	0:0	8	w2
op	68:28	0:0	8	<
water	68:30	0:0	8	sce
op	68:33	0:0	8	->
water	68:35	0:0	8	ics
op	68:38	0:0	8	.
water	68:39	0:0	8	group_len
op	68:48	0:0	8	[
water	68:49	0:0	8	w
op	68:50	0:0	8	]
forexpr	68:53	68:55	7	w2 ++
water	68:53	0:0	8	w2
op	68:55	0:0	8	++
stmts	68:59	82:12	7	
water	68:59	0:0	8	{
decl	69:16	69:83	8	FFPsyBand	*band
op	69:32	0:0	8	=
op	69:34	0:0	8	&
water	69:35	0:0	8	s
op	69:36	0:0	8	->
water	69:38	0:0	8	psy
op	69:41	0:0	8	.
water	69:42	0:0	8	ch
op	69:44	0:0	8	[
water	69:45	0:0	8	s
op	69:46	0:0	8	->
water	69:48	0:0	8	cur_channel
op	69:59	0:0	8	]
op	69:60	0:0	8	.
water	69:61	0:0	8	psy_bands
op	69:70	0:0	8	[
water	69:71	0:0	8	(
water	69:72	0:0	8	w
op	69:73	0:0	8	+
water	69:74	0:0	8	w2
water	69:76	0:0	8	)
op	69:77	0:0	8	*
water	69:78	0:0	8	16
op	69:80	0:0	8	+
water	69:81	0:0	8	g
op	69:82	0:0	8	]
if	70:16	73:16	8	(band -> energy <= band -> threshold || band -> threshold == 0 . 0 f)
cond	70:20	70:77	9	band -> energy <= band -> threshold || band -> threshold == 0 . 0 f
water	70:20	0:0	10	band
op	70:24	0:0	10	->
water	70:26	0:0	10	energy
op	70:33	0:0	10	<=
water	70:36	0:0	10	band
op	70:40	0:0	10	->
water	70:42	0:0	10	threshold
op	70:52	0:0	10	||
water	70:55	0:0	10	band
op	70:59	0:0	10	->
water	70:61	0:0	10	threshold
op	70:71	0:0	10	==
water	70:74	0:0	10	0
op	70:75	0:0	10	.
water	70:76	0:0	10	0
water	70:77	0:0	10	f
stmts	70:80	73:16	9	
water	70:80	0:0	10	{
water	71:20	0:0	10	sce
op	71:23	0:0	10	->
water	71:25	0:0	10	zeroes
op	71:31	0:0	10	[
water	71:32	0:0	10	(
water	71:33	0:0	10	w
op	71:34	0:0	10	+
water	71:35	0:0	10	w2
water	71:37	0:0	10	)
op	71:38	0:0	10	*
water	71:39	0:0	10	16
op	71:41	0:0	10	+
water	71:42	0:0	10	g
op	71:43	0:0	10	]
op	71:45	0:0	10	=
water	71:47	0:0	10	1
water	71:48	0:0	10	;
continue	72:20	72:28	10	
water	73:16	0:0	10	}
water	74:16	0:0	8	sce
op	74:19	0:0	8	->
water	74:21	0:0	8	zeroes
op	74:27	0:0	8	[
water	74:28	0:0	8	(
water	74:29	0:0	8	w
op	74:30	0:0	8	+
water	74:31	0:0	8	w2
water	74:33	0:0	8	)
op	74:34	0:0	8	*
water	74:35	0:0	8	16
op	74:37	0:0	8	+
water	74:38	0:0	8	g
op	74:39	0:0	8	]
op	74:41	0:0	8	=
water	74:43	0:0	8	0
water	74:44	0:0	8	;
water	75:16	0:0	8	nz
op	75:19	0:0	8	=
water	75:21	0:0	8	1
water	75:22	0:0	8	;
for	76:16	81:16	8	(i = 0 ;i < sce -> ics . swb_sizes [ g ];i ++)
forinit	76:21	76:26	9	i = 0 ;
water	76:21	0:0	10	i
op	76:23	0:0	10	=
water	76:25	0:0	10	0
water	76:26	0:0	10	;
cond	76:28	76:52	9	i < sce -> ics . swb_sizes [ g ]
water	76:28	0:0	10	i
op	76:30	0:0	10	<
water	76:32	0:0	10	sce
op	76:35	0:0	10	->
water	76:37	0:0	10	ics
op	76:40	0:0	10	.
water	76:41	0:0	10	swb_sizes
op	76:50	0:0	10	[
water	76:51	0:0	10	g
op	76:52	0:0	10	]
forexpr	76:55	76:56	9	i ++
water	76:55	0:0	10	i
op	76:56	0:0	10	++
stmts	76:60	81:16	9	
water	76:60	0:0	10	{
decl	77:20	77:52	10	float	t
op	77:28	0:0	10	=
call	77:30	77:51	11	fabsf
arg	77:36	77:51	12	coefs[w2*128+i]
water	77:36	0:0	13	coefs
op	77:41	0:0	13	[
water	77:42	0:0	13	w2
op	77:44	0:0	13	*
water	77:45	0:0	13	128
op	77:48	0:0	13	+
water	77:49	0:0	13	i
op	77:50	0:0	13	]
if	78:20	79:45	10	(t > 0 . 0 f)
cond	78:24	78:31	11	t > 0 . 0 f
water	78:24	0:0	12	t
op	78:26	0:0	12	>
water	78:28	0:0	12	0
op	78:29	0:0	12	.
water	78:30	0:0	12	0
water	78:31	0:0	12	f
stmts	79:24	79:45	11	
water	79:24	0:0	12	qmin
op	79:29	0:0	12	=
call	79:31	79:44	12	FFMIN
arg	79:37	79:41	13	qmin
water	79:37	0:0	14	qmin
arg	79:43	79:44	13	t
water	79:43	0:0	14	t
water	79:45	0:0	12	;
water	80:20	0:0	10	qmax
op	80:25	0:0	10	=
call	80:27	80:40	10	FFMAX
arg	80:33	80:37	11	qmax
water	80:33	0:0	12	qmax
arg	80:39	80:40	11	t
water	80:39	0:0	12	t
water	80:41	0:0	10	;
water	81:16	0:0	10	}
water	82:12	0:0	8	}
if	83:12	113:12	6	(nz)
cond	83:16	83:16	7	nz
water	83:16	0:0	8	nz
stmts	83:20	113:12	7	
water	83:20	0:0	8	{
decl	84:16	84:38	8	int	minscale
water	84:28	0:0	8	,
decl	84:16	84:38	8	int	maxscale
decl	85:16	85:38	8	float	minrd
op	85:28	0:0	8	=
water	85:30	0:0	8	INFINITY
decl	86:16	86:28	8	float	maxval
water	88:16	0:0	8	minscale
op	88:25	0:0	8	=
call	88:27	88:42	8	coef2minsf
arg	88:38	88:42	9	qmin
water	88:38	0:0	10	qmin
water	88:43	0:0	8	;
water	90:16	0:0	8	maxscale
op	90:25	0:0	8	=
call	90:27	90:42	8	coef2maxsf
arg	90:38	90:42	9	qmax
water	90:38	0:0	10	qmax
water	90:43	0:0	8	;
water	91:16	0:0	8	minscale
op	91:25	0:0	8	=
call	91:27	91:71	8	av_clip
arg	91:35	91:48	9	minscale-q0
water	91:35	0:0	10	minscale
op	91:44	0:0	10	-
water	91:46	0:0	10	q0
arg	91:50	91:51	9	0
water	91:50	0:0	10	0
arg	91:53	91:71	9	TRELLIS_STATES-1
water	91:53	0:0	10	TRELLIS_STATES
op	91:68	0:0	10	-
water	91:70	0:0	10	1
water	91:72	0:0	8	;
water	92:16	0:0	8	maxscale
op	92:25	0:0	8	=
call	92:27	92:67	8	av_clip
arg	92:35	92:48	9	maxscale-q0
water	92:35	0:0	10	maxscale
op	92:44	0:0	10	-
water	92:46	0:0	10	q0
arg	92:50	92:51	9	0
water	92:50	0:0	10	0
arg	92:53	92:67	9	TRELLIS_STATES
water	92:53	0:0	10	TRELLIS_STATES
water	92:68	0:0	8	;
water	93:16	0:0	8	maxval
op	93:23	0:0	8	=
call	93:25	93:99	8	find_max_val
arg	93:38	93:59	9	sce->ics.group_len[w]
water	93:38	0:0	10	sce
op	93:41	0:0	10	->
water	93:43	0:0	10	ics
op	93:46	0:0	10	.
water	93:47	0:0	10	group_len
op	93:56	0:0	10	[
water	93:57	0:0	10	w
op	93:58	0:0	10	]
arg	93:61	93:82	9	sce->ics.swb_sizes[g]
water	93:61	0:0	10	sce
op	93:64	0:0	10	->
water	93:66	0:0	10	ics
op	93:69	0:0	10	.
water	93:70	0:0	10	swb_sizes
op	93:79	0:0	10	[
water	93:80	0:0	10	g
op	93:81	0:0	10	]
arg	93:84	93:99	9	s->scoefs+start
water	93:84	0:0	10	s
op	93:85	0:0	10	->
water	93:87	0:0	10	scoefs
op	93:93	0:0	10	+
water	93:94	0:0	10	start
water	93:100	0:0	8	;
for	94:16	112:16	8	(q = minscale ;q < maxscale;q ++)
forinit	94:21	94:33	9	q = minscale ;
water	94:21	0:0	10	q
op	94:23	0:0	10	=
water	94:25	0:0	10	minscale
water	94:33	0:0	10	;
cond	94:35	94:39	9	q < maxscale
water	94:35	0:0	10	q
op	94:37	0:0	10	<
water	94:39	0:0	10	maxscale
forexpr	94:49	94:50	9	q ++
water	94:49	0:0	10	q
op	94:50	0:0	10	++
stmts	94:54	112:16	9	
water	94:54	0:0	10	{
decl	95:20	95:34	10	float	dist
op	95:31	0:0	10	=
water	95:33	0:0	10	0
decl	96:20	96:71	10	int	cb
op	96:27	0:0	10	=
call	96:29	96:70	11	find_min_book
arg	96:43	96:49	12	maxval
water	96:43	0:0	13	maxval
arg	96:51	96:70	12	sce->sf_idx[w*16+g]
water	96:51	0:0	13	sce
op	96:54	0:0	13	->
water	96:56	0:0	13	sf_idx
op	96:62	0:0	13	[
water	96:63	0:0	13	w
op	96:64	0:0	13	*
water	96:65	0:0	13	16
op	96:67	0:0	13	+
water	96:68	0:0	13	g
op	96:69	0:0	13	]
for	97:20	101:20	10	(w2 = 0 ;w2 < sce -> ics . group_len [ w ];w2 ++)
forinit	97:25	97:31	11	w2 = 0 ;
water	97:25	0:0	12	w2
op	97:28	0:0	12	=
water	97:30	0:0	12	0
water	97:31	0:0	12	;
cond	97:33	97:58	11	w2 < sce -> ics . group_len [ w ]
water	97:33	0:0	12	w2
op	97:36	0:0	12	<
water	97:38	0:0	12	sce
op	97:41	0:0	12	->
water	97:43	0:0	12	ics
op	97:46	0:0	12	.
water	97:47	0:0	12	group_len
op	97:56	0:0	12	[
water	97:57	0:0	12	w
op	97:58	0:0	12	]
forexpr	97:61	97:63	11	w2 ++
water	97:61	0:0	12	w2
op	97:63	0:0	12	++
stmts	97:67	101:20	11	
water	97:67	0:0	12	{
decl	98:24	98:91	12	FFPsyBand	*band
op	98:40	0:0	12	=
op	98:42	0:0	12	&
water	98:43	0:0	12	s
op	98:44	0:0	12	->
water	98:46	0:0	12	psy
op	98:49	0:0	12	.
water	98:50	0:0	12	ch
op	98:52	0:0	12	[
water	98:53	0:0	12	s
op	98:54	0:0	12	->
water	98:56	0:0	12	cur_channel
op	98:67	0:0	12	]
op	98:68	0:0	12	.
water	98:69	0:0	12	psy_bands
op	98:78	0:0	12	[
water	98:79	0:0	12	(
water	98:80	0:0	12	w
op	98:81	0:0	12	+
water	98:82	0:0	12	w2
water	98:84	0:0	12	)
op	98:85	0:0	12	*
water	98:86	0:0	12	16
op	98:88	0:0	12	+
water	98:89	0:0	12	g
op	98:90	0:0	12	]
water	99:24	0:0	12	dist
op	99:29	0:0	12	+=
call	99:32	100:106	12	quantize_band_cost
arg	99:51	99:52	13	s
water	99:51	0:0	14	s
arg	99:54	99:68	13	coefs+w2*128
water	99:54	0:0	14	coefs
op	99:60	0:0	14	+
water	99:62	0:0	14	w2
op	99:64	0:0	14	*
water	99:65	0:0	14	128
arg	99:70	99:96	13	s->scoefs+start+w2*128
water	99:70	0:0	14	s
op	99:71	0:0	14	->
water	99:73	0:0	14	scoefs
op	99:80	0:0	14	+
water	99:82	0:0	14	start
op	99:88	0:0	14	+
water	99:90	0:0	14	w2
op	99:92	0:0	14	*
water	99:93	0:0	14	128
arg	99:98	99:119	13	sce->ics.swb_sizes[g]
water	99:98	0:0	14	sce
op	99:101	0:0	14	->
water	99:103	0:0	14	ics
op	99:106	0:0	14	.
water	99:107	0:0	14	swb_sizes
op	99:116	0:0	14	[
water	99:117	0:0	14	g
op	99:118	0:0	14	]
arg	100:51	100:57	13	q+q0
water	100:51	0:0	14	q
op	100:53	0:0	14	+
water	100:55	0:0	14	q0
arg	100:59	100:61	13	cb
water	100:59	0:0	14	cb
arg	100:63	100:87	13	lambda/band->threshold
water	100:63	0:0	14	lambda
op	100:70	0:0	14	/
water	100:72	0:0	14	band
op	100:76	0:0	14	->
water	100:78	0:0	14	threshold
arg	100:89	100:97	13	INFINITY
water	100:89	0:0	14	INFINITY
arg	100:99	100:103	13	NULL
water	100:99	0:0	14	NULL
arg	100:105	100:106	13	0
water	100:105	0:0	14	0
water	100:107	0:0	12	;
water	101:20	0:0	12	}
water	102:20	0:0	10	minrd
op	102:26	0:0	10	=
call	102:28	102:45	10	FFMIN
arg	102:34	102:39	11	minrd
water	102:34	0:0	12	minrd
arg	102:41	102:45	11	dist
water	102:41	0:0	12	dist
water	102:46	0:0	10	;
for	103:20	111:20	10	(i = 0 ;i < q1 - q0;i ++)
forinit	103:25	103:30	11	i = 0 ;
water	103:25	0:0	12	i
op	103:27	0:0	12	=
water	103:29	0:0	12	0
water	103:30	0:0	12	;
cond	103:32	103:41	11	i < q1 - q0
water	103:32	0:0	12	i
op	103:34	0:0	12	<
water	103:36	0:0	12	q1
op	103:39	0:0	12	-
water	103:41	0:0	12	q0
forexpr	103:45	103:46	11	i ++
water	103:45	0:0	12	i
op	103:46	0:0	12	++
stmts	103:50	111:20	11	
water	103:50	0:0	12	{
decl	104:24	104:34	12	float	cost
water	105:24	0:0	12	cost
op	105:29	0:0	12	=
water	105:31	0:0	12	paths
op	105:36	0:0	12	[
water	105:37	0:0	12	idx
op	105:41	0:0	12	-
water	105:43	0:0	12	1
op	105:44	0:0	12	]
op	105:45	0:0	12	[
water	105:46	0:0	12	i
op	105:47	0:0	12	]
op	105:48	0:0	12	.
water	105:49	0:0	12	cost
op	105:54	0:0	12	+
water	105:56	0:0	12	dist
op	106:31	0:0	12	+
water	106:33	0:0	12	ff_aac_scalefactor_bits
op	106:56	0:0	12	[
water	106:57	0:0	12	q
op	106:59	0:0	12	-
water	106:61	0:0	12	i
op	106:63	0:0	12	+
water	106:65	0:0	12	SCALE_DIFF_ZERO
op	106:80	0:0	12	]
water	106:81	0:0	12	;
if	107:24	110:24	12	(cost < paths [ idx ] [ q ] . cost)
cond	107:28	107:49	13	cost < paths [ idx ] [ q ] . cost
water	107:28	0:0	14	cost
op	107:33	0:0	14	<
water	107:35	0:0	14	paths
op	107:40	0:0	14	[
water	107:41	0:0	14	idx
op	107:44	0:0	14	]
op	107:45	0:0	14	[
water	107:46	0:0	14	q
op	107:47	0:0	14	]
op	107:48	0:0	14	.
water	107:49	0:0	14	cost
stmts	107:55	110:24	13	
water	107:55	0:0	14	{
water	108:28	0:0	14	paths
op	108:33	0:0	14	[
water	108:34	0:0	14	idx
op	108:37	0:0	14	]
op	108:38	0:0	14	[
water	108:39	0:0	14	q
op	108:40	0:0	14	]
op	108:41	0:0	14	.
water	108:42	0:0	14	cost
op	108:50	0:0	14	=
water	108:52	0:0	14	cost
water	108:56	0:0	14	;
water	109:28	0:0	14	paths
op	109:33	0:0	14	[
water	109:34	0:0	14	idx
op	109:37	0:0	14	]
op	109:38	0:0	14	[
water	109:39	0:0	14	q
op	109:40	0:0	14	]
op	109:41	0:0	14	.
water	109:42	0:0	14	prev
op	109:50	0:0	14	=
water	109:52	0:0	14	i
water	109:53	0:0	14	;
water	110:24	0:0	14	}
water	111:20	0:0	12	}
water	112:16	0:0	10	}
water	113:12	0:0	8	}
else	113:14	118:12	6
stmts	113:19	118:12	7	
water	113:19	0:0	8	{
for	114:16	117:16	8	(q = 0 ;q < q1 - q0;q ++)
forinit	114:21	114:26	9	q = 0 ;
water	114:21	0:0	10	q
op	114:23	0:0	10	=
water	114:25	0:0	10	0
water	114:26	0:0	10	;
cond	114:28	114:37	9	q < q1 - q0
water	114:28	0:0	10	q
op	114:30	0:0	10	<
water	114:32	0:0	10	q1
op	114:35	0:0	10	-
water	114:37	0:0	10	q0
forexpr	114:41	114:42	9	q ++
water	114:41	0:0	10	q
op	114:42	0:0	10	++
stmts	114:46	117:16	9	
water	114:46	0:0	10	{
water	115:20	0:0	10	paths
op	115:25	0:0	10	[
water	115:26	0:0	10	idx
op	115:29	0:0	10	]
op	115:30	0:0	10	[
water	115:31	0:0	10	q
op	115:32	0:0	10	]
op	115:33	0:0	10	.
water	115:34	0:0	10	cost
op	115:39	0:0	10	=
water	115:41	0:0	10	paths
op	115:46	0:0	10	[
water	115:47	0:0	10	idx
op	115:51	0:0	10	-
water	115:53	0:0	10	1
op	115:54	0:0	10	]
op	115:55	0:0	10	[
water	115:56	0:0	10	q
op	115:57	0:0	10	]
op	115:58	0:0	10	.
water	115:59	0:0	10	cost
op	115:64	0:0	10	+
water	115:66	0:0	10	1
water	115:67	0:0	10	;
water	116:20	0:0	10	paths
op	116:25	0:0	10	[
water	116:26	0:0	10	idx
op	116:29	0:0	10	]
op	116:30	0:0	10	[
water	116:31	0:0	10	q
op	116:32	0:0	10	]
op	116:33	0:0	10	.
water	116:34	0:0	10	prev
op	116:39	0:0	10	=
water	116:41	0:0	10	q
water	116:42	0:0	10	;
water	117:16	0:0	10	}
water	118:12	0:0	8	}
water	119:12	0:0	6	sce
op	119:15	0:0	6	->
water	119:17	0:0	6	zeroes
op	119:23	0:0	6	[
water	119:24	0:0	6	w
op	119:25	0:0	6	*
water	119:26	0:0	6	16
op	119:28	0:0	6	+
water	119:29	0:0	6	g
op	119:30	0:0	6	]
op	119:32	0:0	6	=
op	119:34	0:0	6	!
water	119:35	0:0	6	nz
water	119:37	0:0	6	;
water	120:12	0:0	6	start
op	120:18	0:0	6	+=
water	120:21	0:0	6	sce
op	120:24	0:0	6	->
water	120:26	0:0	6	ics
op	120:29	0:0	6	.
water	120:30	0:0	6	swb_sizes
op	120:39	0:0	6	[
water	120:40	0:0	6	g
op	120:41	0:0	6	]
water	120:42	0:0	6	;
water	121:12	0:0	6	idx
op	121:15	0:0	6	++
water	121:17	0:0	6	;
water	122:8	0:0	6	}
water	123:4	0:0	4	}
water	124:4	0:0	2	idx
op	124:7	0:0	2	--
water	124:9	0:0	2	;
water	125:4	0:0	2	mincost
op	125:12	0:0	2	=
water	125:14	0:0	2	paths
op	125:19	0:0	2	[
water	125:20	0:0	2	idx
op	125:23	0:0	2	]
op	125:24	0:0	2	[
water	125:25	0:0	2	0
op	125:26	0:0	2	]
op	125:27	0:0	2	.
water	125:28	0:0	2	cost
water	125:32	0:0	2	;
water	126:4	0:0	2	minq
op	126:12	0:0	2	=
water	126:14	0:0	2	0
water	126:15	0:0	2	;
for	127:4	132:4	2	(i = 1 ;i < TRELLIS_STATES;i ++)
forinit	127:9	127:14	3	i = 1 ;
water	127:9	0:0	4	i
op	127:11	0:0	4	=
water	127:13	0:0	4	1
water	127:14	0:0	4	;
cond	127:16	127:20	3	i < TRELLIS_STATES
water	127:16	0:0	4	i
op	127:18	0:0	4	<
water	127:20	0:0	4	TRELLIS_STATES
forexpr	127:36	127:37	3	i ++
water	127:36	0:0	4	i
op	127:37	0:0	4	++
stmts	127:41	132:4	3	
water	127:41	0:0	4	{
if	128:8	131:8	4	(paths [ idx ] [ i ] . cost < mincost)
cond	128:12	128:33	5	paths [ idx ] [ i ] . cost < mincost
water	128:12	0:0	6	paths
op	128:17	0:0	6	[
water	128:18	0:0	6	idx
op	128:21	0:0	6	]
op	128:22	0:0	6	[
water	128:23	0:0	6	i
op	128:24	0:0	6	]
op	128:25	0:0	6	.
water	128:26	0:0	6	cost
op	128:31	0:0	6	<
water	128:33	0:0	6	mincost
stmts	128:42	131:8	5	
water	128:42	0:0	6	{
water	129:12	0:0	6	mincost
op	129:20	0:0	6	=
water	129:22	0:0	6	paths
op	129:27	0:0	6	[
water	129:28	0:0	6	idx
op	129:31	0:0	6	]
op	129:32	0:0	6	[
water	129:33	0:0	6	i
op	129:34	0:0	6	]
op	129:35	0:0	6	.
water	129:36	0:0	6	cost
water	129:40	0:0	6	;
water	130:12	0:0	6	minq
op	130:17	0:0	6	=
water	130:19	0:0	6	i
water	130:20	0:0	6	;
water	131:8	0:0	6	}
water	132:4	0:0	4	}
while	133:4	137:4	2	(idx)
cond	133:11	133:11	3	idx
water	133:11	0:0	4	idx
stmts	133:16	137:4	3	
water	133:16	0:0	4	{
water	134:8	0:0	4	sce
op	134:11	0:0	4	->
water	134:13	0:0	4	sf_idx
op	134:19	0:0	4	[
water	134:20	0:0	4	bandaddr
op	134:28	0:0	4	[
water	134:29	0:0	4	idx
op	134:32	0:0	4	]
op	134:33	0:0	4	]
op	134:35	0:0	4	=
water	134:37	0:0	4	minq
op	134:42	0:0	4	+
water	134:44	0:0	4	q0
water	134:46	0:0	4	;
water	135:8	0:0	4	minq
op	135:13	0:0	4	=
water	135:15	0:0	4	paths
op	135:20	0:0	4	[
water	135:21	0:0	4	idx
op	135:24	0:0	4	]
op	135:25	0:0	4	[
water	135:26	0:0	4	minq
op	135:30	0:0	4	]
op	135:31	0:0	4	.
water	135:32	0:0	4	prev
water	135:36	0:0	4	;
water	136:8	0:0	4	idx
op	136:11	0:0	4	--
water	136:13	0:0	4	;
water	137:4	0:0	4	}
for	139:4	142:62	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	139:9	139:14	3	w = 0 ;
water	139:9	0:0	4	w
op	139:11	0:0	4	=
water	139:13	0:0	4	0
water	139:14	0:0	4	;
cond	139:16	139:29	3	w < sce -> ics . num_windows
water	139:16	0:0	4	w
op	139:18	0:0	4	<
water	139:20	0:0	4	sce
op	139:23	0:0	4	->
water	139:25	0:0	4	ics
op	139:28	0:0	4	.
water	139:29	0:0	4	num_windows
forexpr	139:42	139:67	3	w += sce -> ics . group_len [ w ]
water	139:42	0:0	4	w
op	139:44	0:0	4	+=
water	139:47	0:0	4	sce
op	139:50	0:0	4	->
water	139:52	0:0	4	ics
op	139:55	0:0	4	.
water	139:56	0:0	4	group_len
op	139:65	0:0	4	[
water	139:66	0:0	4	w
op	139:67	0:0	4	]
stmts	140:8	142:62	3	
for	140:8	142:62	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	140:13	140:18	5	g = 0 ;
water	140:13	0:0	6	g
op	140:15	0:0	6	=
water	140:17	0:0	6	0
water	140:18	0:0	6	;
cond	140:21	140:34	5	g < sce -> ics . num_swb
water	140:21	0:0	6	g
op	140:23	0:0	6	<
water	140:25	0:0	6	sce
op	140:28	0:0	6	->
water	140:30	0:0	6	ics
op	140:33	0:0	6	.
water	140:34	0:0	6	num_swb
forexpr	140:43	140:44	5	g ++
water	140:43	0:0	6	g
op	140:44	0:0	6	++
stmts	141:12	142:62	5	
for	141:12	142:62	6	(w2 = 1 ;w2 < sce -> ics . group_len [ w ];w2 ++)
forinit	141:17	141:23	7	w2 = 1 ;
water	141:17	0:0	8	w2
op	141:20	0:0	8	=
water	141:22	0:0	8	1
water	141:23	0:0	8	;
cond	141:25	141:50	7	w2 < sce -> ics . group_len [ w ]
water	141:25	0:0	8	w2
op	141:28	0:0	8	<
water	141:30	0:0	8	sce
op	141:33	0:0	8	->
water	141:35	0:0	8	ics
op	141:38	0:0	8	.
water	141:39	0:0	8	group_len
op	141:48	0:0	8	[
water	141:49	0:0	8	w
op	141:50	0:0	8	]
forexpr	141:53	141:55	7	w2 ++
water	141:53	0:0	8	w2
op	141:55	0:0	8	++
stmts	142:16	142:62	7	
water	142:16	0:0	8	sce
op	142:19	0:0	8	->
water	142:21	0:0	8	sf_idx
op	142:27	0:0	8	[
water	142:28	0:0	8	(
water	142:29	0:0	8	w
op	142:30	0:0	8	+
water	142:31	0:0	8	w2
water	142:33	0:0	8	)
op	142:34	0:0	8	*
water	142:35	0:0	8	16
op	142:37	0:0	8	+
water	142:38	0:0	8	g
op	142:39	0:0	8	]
op	142:41	0:0	8	=
water	142:43	0:0	8	sce
op	142:46	0:0	8	->
water	142:48	0:0	8	sf_idx
op	142:54	0:0	8	[
water	142:55	0:0	8	w
op	142:56	0:0	8	*
water	142:57	0:0	8	16
op	142:59	0:0	8	+
water	142:60	0:0	8	g
op	142:61	0:0	8	]
water	142:62	0:0	8	;
