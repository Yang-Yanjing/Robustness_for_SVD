func	1:0	185:0	0	static int	get_nb_samples
params	1:25	0:0	1	
param	1:26	1:47	2	AVCodecContext *	avctx
param	1:49	1:67	2	GetByteContext *	gb
param	2:26	2:38	2	int	buf_size
param	2:40	2:58	2	int *	coded_samples
param	2:60	2:82	2	int *	approx_nb_samples
stmnts	0:0	184:21	1	
decl	4:4	4:44	2	ADPCMDecodeContext	*s
op	4:26	0:0	2	=
water	4:28	0:0	2	avctx
op	4:33	0:0	2	->
water	4:35	0:0	2	priv_data
decl	5:4	5:29	2	int	nb_samples
op	5:26	0:0	2	=
water	5:28	0:0	2	0
decl	6:4	6:43	2	int	ch
op	6:26	0:0	2	=
water	6:28	0:0	2	avctx
op	6:33	0:0	2	->
water	6:35	0:0	2	channels
decl	7:4	7:29	2	int	has_coded_samples
op	7:26	0:0	2	=
water	7:28	0:0	2	0
decl	8:4	8:19	2	int	header_size
op	9:4	0:0	2	*
water	9:5	0:0	2	coded_samples
op	9:19	0:0	2	=
water	9:21	0:0	2	0
water	9:22	0:0	2	;
op	10:4	0:0	2	*
water	10:5	0:0	2	approx_nb_samples
op	10:23	0:0	2	=
water	10:25	0:0	2	0
water	10:26	0:0	2	;
if	11:4	12:16	2	(ch <= 0)
cond	11:7	11:13	3	ch <= 0
water	11:7	0:0	4	ch
op	11:10	0:0	4	<=
water	11:13	0:0	4	0
stmts	12:8	12:16	3	
return	12:8	12:16	4	0
water	12:15	0:0	5	0
switch	13:4	34:4	2	(avctx -> codec -> id)
cond	13:12	13:26	3	avctx -> codec -> id
water	13:12	0:0	4	avctx
op	13:17	0:0	4	->
water	13:19	0:0	4	codec
op	13:24	0:0	4	->
water	13:26	0:0	4	id
stmts	13:30	34:4	3	
water	13:30	0:0	4	{
label	15:4	15:33	4	case AV_CODEC_ID_ADPCM_EA_XAS :
if	16:8	17:20	4	(buf_size < 76 * ch)
cond	16:12	16:28	5	buf_size < 76 * ch
water	16:12	0:0	6	buf_size
op	16:21	0:0	6	<
water	16:23	0:0	6	76
op	16:26	0:0	6	*
water	16:28	0:0	6	ch
stmts	17:12	17:20	5	
return	17:12	17:20	6	0
water	17:19	0:0	7	0
water	18:8	0:0	4	nb_samples
op	18:19	0:0	4	=
water	18:21	0:0	4	128
water	18:24	0:0	4	;
break	19:8	19:13	4	
label	20:4	20:33	4	case AV_CODEC_ID_ADPCM_IMA_QT :
if	21:8	22:20	4	(buf_size < 34 * ch)
cond	21:12	21:28	5	buf_size < 34 * ch
water	21:12	0:0	6	buf_size
op	21:21	0:0	6	<
water	21:23	0:0	6	34
op	21:26	0:0	6	*
water	21:28	0:0	6	ch
stmts	22:12	22:20	5	
return	22:12	22:20	6	0
water	22:19	0:0	7	0
water	23:8	0:0	4	nb_samples
op	23:19	0:0	4	=
water	23:21	0:0	4	64
water	23:23	0:0	4	;
break	24:8	24:13	4	
label	26:4	26:29	4	case AV_CODEC_ID_ADPCM_CT :
label	27:4	27:34	4	case AV_CODEC_ID_ADPCM_IMA_APC :
label	28:4	28:38	4	case AV_CODEC_ID_ADPCM_IMA_EA_SEAD :
label	29:4	29:34	4	case AV_CODEC_ID_ADPCM_IMA_OKI :
label	30:4	30:33	4	case AV_CODEC_ID_ADPCM_IMA_WS :
label	31:4	31:33	4	case AV_CODEC_ID_ADPCM_YAMAHA :
water	32:8	0:0	4	nb_samples
op	32:19	0:0	4	=
water	32:21	0:0	4	buf_size
op	32:30	0:0	4	*
water	32:32	0:0	4	2
op	32:34	0:0	4	/
water	32:36	0:0	4	ch
water	32:38	0:0	4	;
break	33:8	33:13	4	
water	34:4	0:0	4	}
if	35:4	36:25	2	(nb_samples)
cond	35:8	35:8	3	nb_samples
water	35:8	0:0	4	nb_samples
stmts	36:8	36:25	3	
return	36:8	36:25	4	nb_samples
water	36:15	0:0	5	nb_samples
water	38:4	0:0	2	header_size
op	38:16	0:0	2	=
water	38:18	0:0	2	0
water	38:19	0:0	2	;
switch	39:4	44:4	2	(avctx -> codec -> id)
cond	39:12	39:26	3	avctx -> codec -> id
water	39:12	0:0	4	avctx
op	39:17	0:0	4	->
water	39:19	0:0	4	codec
op	39:24	0:0	4	->
water	39:26	0:0	4	id
stmts	39:30	44:4	3	
water	39:30	0:0	4	{
label	40:8	40:34	4	case AV_CODEC_ID_ADPCM_4XM :
label	41:8	41:38	4	case AV_CODEC_ID_ADPCM_IMA_ISS :
water	41:44	0:0	4	header_size
op	41:56	0:0	4	=
water	41:58	0:0	4	4
op	41:60	0:0	4	*
water	41:62	0:0	4	ch
water	41:64	0:0	4	;
break	41:71	41:76	4	
label	42:8	42:38	4	case AV_CODEC_ID_ADPCM_IMA_AMV :
water	42:44	0:0	4	header_size
op	42:56	0:0	4	=
water	42:58	0:0	4	8
water	42:59	0:0	4	;
break	42:71	42:76	4	
label	43:8	43:41	4	case AV_CODEC_ID_ADPCM_IMA_SMJPEG :
water	43:44	0:0	4	header_size
op	43:56	0:0	4	=
water	43:58	0:0	4	4
op	43:60	0:0	4	*
water	43:62	0:0	4	ch
water	43:64	0:0	4	;
break	43:71	43:76	4	
water	44:4	0:0	4	}
if	45:4	46:48	2	(header_size > 0)
cond	45:8	45:22	3	header_size > 0
water	45:8	0:0	4	header_size
op	45:20	0:0	4	>
water	45:22	0:0	4	0
stmts	46:8	46:48	3	
return	46:8	46:48	4	(buf_size-header_size)*2/ch
water	46:15	0:0	5	(
water	46:16	0:0	5	buf_size
op	46:25	0:0	5	-
water	46:27	0:0	5	header_size
water	46:38	0:0	5	)
op	46:40	0:0	5	*
water	46:42	0:0	5	2
op	46:44	0:0	5	/
water	46:46	0:0	5	ch
switch	48:4	180:4	2	(avctx -> codec -> id)
cond	48:12	48:26	3	avctx -> codec -> id
water	48:12	0:0	4	avctx
op	48:17	0:0	4	->
water	48:19	0:0	4	codec
op	48:24	0:0	4	->
water	48:26	0:0	4	id
stmts	48:30	180:4	3	
water	48:30	0:0	4	{
label	49:4	49:29	4	case AV_CODEC_ID_ADPCM_EA :
water	50:8	0:0	4	has_coded_samples
op	50:26	0:0	4	=
water	50:28	0:0	4	1
water	50:29	0:0	4	;
op	51:8	0:0	4	*
water	51:9	0:0	4	coded_samples
op	51:24	0:0	4	=
call	51:26	51:49	4	bytestream2_get_le32
arg	51:47	51:49	5	gb
water	51:47	0:0	6	gb
water	51:50	0:0	4	;
op	52:8	0:0	4	*
water	52:9	0:0	4	coded_samples
op	52:23	0:0	4	-=
op	52:26	0:0	4	*
water	52:27	0:0	4	coded_samples
op	52:41	0:0	4	%
water	52:43	0:0	4	28
water	52:45	0:0	4	;
water	53:8	0:0	4	nb_samples
op	53:24	0:0	4	=
water	53:26	0:0	4	(
water	53:27	0:0	4	buf_size
op	53:36	0:0	4	-
water	53:38	0:0	4	12
water	53:40	0:0	4	)
op	53:42	0:0	4	/
water	53:44	0:0	4	30
op	53:47	0:0	4	*
water	53:49	0:0	4	28
water	53:51	0:0	4	;
break	54:8	54:13	4	
label	55:4	55:38	4	case AV_CODEC_ID_ADPCM_IMA_EA_EACS :
water	56:8	0:0	4	has_coded_samples
op	56:26	0:0	4	=
water	56:28	0:0	4	1
water	56:29	0:0	4	;
op	57:8	0:0	4	*
water	57:9	0:0	4	coded_samples
op	57:23	0:0	4	=
call	57:25	57:48	4	bytestream2_get_le32
arg	57:46	57:48	5	gb
water	57:46	0:0	6	gb
water	57:49	0:0	4	;
water	58:8	0:0	4	nb_samples
op	58:23	0:0	4	=
water	58:25	0:0	4	(
water	58:26	0:0	4	buf_size
op	58:35	0:0	4	-
water	58:37	0:0	4	(
water	58:38	0:0	4	4
op	58:40	0:0	4	+
water	58:42	0:0	4	8
op	58:44	0:0	4	*
water	58:46	0:0	4	ch
water	58:48	0:0	4	)
water	58:49	0:0	4	)
op	58:51	0:0	4	*
water	58:53	0:0	4	2
op	58:55	0:0	4	/
water	58:57	0:0	4	ch
water	58:59	0:0	4	;
break	59:8	59:13	4	
label	60:4	60:38	4	case AV_CODEC_ID_ADPCM_EA_MAXIS_XA :
water	61:8	0:0	4	nb_samples
op	61:19	0:0	4	=
water	61:21	0:0	4	(
water	61:22	0:0	4	buf_size
op	61:31	0:0	4	-
water	61:33	0:0	4	ch
water	61:35	0:0	4	)
op	61:37	0:0	4	/
water	61:39	0:0	4	ch
op	61:42	0:0	4	*
water	61:44	0:0	4	2
water	61:45	0:0	4	;
break	62:8	62:13	4	
label	63:4	63:32	4	case AV_CODEC_ID_ADPCM_EA_R1 :
label	64:4	64:32	4	case AV_CODEC_ID_ADPCM_EA_R2 :
label	65:4	65:32	4	case AV_CODEC_ID_ADPCM_EA_R3 :
water	68:8	0:0	4	has_coded_samples
op	68:26	0:0	4	=
water	68:28	0:0	4	1
water	68:29	0:0	4	;
switch	69:8	82:8	4	(avctx -> codec -> id)
cond	69:16	69:30	5	avctx -> codec -> id
water	69:16	0:0	6	avctx
op	69:21	0:0	6	->
water	69:23	0:0	6	codec
op	69:28	0:0	6	->
water	69:30	0:0	6	id
stmts	69:34	82:8	5	
water	69:34	0:0	6	{
label	70:8	70:36	6	case AV_CODEC_ID_ADPCM_EA_R1 :
water	71:12	0:0	6	header_size
op	71:27	0:0	6	=
water	71:29	0:0	6	4
op	71:31	0:0	6	+
water	71:33	0:0	6	9
op	71:35	0:0	6	*
water	71:37	0:0	6	ch
water	71:39	0:0	6	;
op	72:12	0:0	6	*
water	72:13	0:0	6	coded_samples
op	72:27	0:0	6	=
call	72:29	72:52	6	bytestream2_get_le32
arg	72:50	72:52	7	gb
water	72:50	0:0	8	gb
water	72:53	0:0	6	;
break	73:12	73:17	6	
label	74:8	74:36	6	case AV_CODEC_ID_ADPCM_EA_R2 :
water	75:12	0:0	6	header_size
op	75:27	0:0	6	=
water	75:29	0:0	6	4
op	75:31	0:0	6	+
water	75:33	0:0	6	5
op	75:35	0:0	6	*
water	75:37	0:0	6	ch
water	75:39	0:0	6	;
op	76:12	0:0	6	*
water	76:13	0:0	6	coded_samples
op	76:27	0:0	6	=
call	76:29	76:52	6	bytestream2_get_le32
arg	76:50	76:52	7	gb
water	76:50	0:0	8	gb
water	76:53	0:0	6	;
break	77:12	77:17	6	
label	78:8	78:36	6	case AV_CODEC_ID_ADPCM_EA_R3 :
water	79:12	0:0	6	header_size
op	79:27	0:0	6	=
water	79:29	0:0	6	4
op	79:31	0:0	6	+
water	79:33	0:0	6	5
op	79:35	0:0	6	*
water	79:37	0:0	6	ch
water	79:39	0:0	6	;
op	80:12	0:0	6	*
water	80:13	0:0	6	coded_samples
op	80:27	0:0	6	=
call	80:29	80:52	6	bytestream2_get_be32
arg	80:50	80:52	7	gb
water	80:50	0:0	8	gb
water	80:53	0:0	6	;
break	81:12	81:17	6	
water	82:8	0:0	6	}
op	83:8	0:0	4	*
water	83:9	0:0	4	coded_samples
op	83:23	0:0	4	-=
op	83:26	0:0	4	*
water	83:27	0:0	4	coded_samples
op	83:41	0:0	4	%
water	83:43	0:0	4	28
water	83:45	0:0	4	;
water	84:8	0:0	4	nb_samples
op	84:24	0:0	4	=
water	84:26	0:0	4	(
water	84:27	0:0	4	buf_size
op	84:36	0:0	4	-
water	84:38	0:0	4	header_size
water	84:49	0:0	4	)
op	84:51	0:0	4	*
water	84:53	0:0	4	2
op	84:55	0:0	4	/
water	84:57	0:0	4	ch
water	84:59	0:0	4	;
water	85:8	0:0	4	nb_samples
op	85:23	0:0	4	-=
water	85:26	0:0	4	nb_samples
op	85:37	0:0	4	%
water	85:39	0:0	4	28
water	85:41	0:0	4	;
op	86:8	0:0	4	*
water	86:9	0:0	4	approx_nb_samples
op	86:27	0:0	4	=
water	86:29	0:0	4	1
water	86:30	0:0	4	;
break	87:8	87:13	4	
label	88:4	88:34	4	case AV_CODEC_ID_ADPCM_IMA_DK3 :
if	89:8	90:58	4	(avctx -> block_align > 0)
cond	89:12	89:33	5	avctx -> block_align > 0
water	89:12	0:0	6	avctx
op	89:17	0:0	6	->
water	89:19	0:0	6	block_align
op	89:31	0:0	6	>
water	89:33	0:0	6	0
stmts	90:12	90:58	5	
water	90:12	0:0	6	buf_size
op	90:21	0:0	6	=
call	90:23	90:57	6	FFMIN
arg	90:29	90:37	7	buf_size
water	90:29	0:0	8	buf_size
arg	90:39	90:57	7	avctx->block_align
water	90:39	0:0	8	avctx
op	90:44	0:0	8	->
water	90:46	0:0	8	block_align
water	90:58	0:0	6	;
water	91:8	0:0	4	nb_samples
op	91:19	0:0	4	=
water	91:21	0:0	4	(
water	91:22	0:0	4	(
water	91:23	0:0	4	buf_size
op	91:32	0:0	4	-
water	91:34	0:0	4	16
water	91:36	0:0	4	)
op	91:38	0:0	4	*
water	91:40	0:0	4	2
op	91:42	0:0	4	/
water	91:44	0:0	4	3
op	91:46	0:0	4	*
water	91:48	0:0	4	4
water	91:49	0:0	4	)
op	91:51	0:0	4	/
water	91:53	0:0	4	ch
water	91:55	0:0	4	;
break	92:8	92:13	4	
label	93:4	93:34	4	case AV_CODEC_ID_ADPCM_IMA_DK4 :
if	94:8	95:58	4	(avctx -> block_align > 0)
cond	94:12	94:33	5	avctx -> block_align > 0
water	94:12	0:0	6	avctx
op	94:17	0:0	6	->
water	94:19	0:0	6	block_align
op	94:31	0:0	6	>
water	94:33	0:0	6	0
stmts	95:12	95:58	5	
water	95:12	0:0	6	buf_size
op	95:21	0:0	6	=
call	95:23	95:57	6	FFMIN
arg	95:29	95:37	7	buf_size
water	95:29	0:0	8	buf_size
arg	95:39	95:57	7	avctx->block_align
water	95:39	0:0	8	avctx
op	95:44	0:0	8	->
water	95:46	0:0	8	block_align
water	95:58	0:0	6	;
if	96:8	97:38	4	(buf_size < 4 * ch)
cond	96:12	96:27	5	buf_size < 4 * ch
water	96:12	0:0	6	buf_size
op	96:21	0:0	6	<
water	96:23	0:0	6	4
op	96:25	0:0	6	*
water	96:27	0:0	6	ch
stmts	97:12	97:38	5	
return	97:12	97:38	6	AVERROR_INVALIDDATA
water	97:19	0:0	7	AVERROR_INVALIDDATA
water	98:8	0:0	4	nb_samples
op	98:19	0:0	4	=
water	98:21	0:0	4	1
op	98:23	0:0	4	+
water	98:25	0:0	4	(
water	98:26	0:0	4	buf_size
op	98:35	0:0	4	-
water	98:37	0:0	4	4
op	98:39	0:0	4	*
water	98:41	0:0	4	ch
water	98:43	0:0	4	)
op	98:45	0:0	4	*
water	98:47	0:0	4	2
op	98:49	0:0	4	/
water	98:51	0:0	4	ch
water	98:53	0:0	4	;
break	99:8	99:13	4	
label	100:4	100:34	4	case AV_CODEC_ID_ADPCM_IMA_RAD :
if	101:8	102:58	4	(avctx -> block_align > 0)
cond	101:12	101:33	5	avctx -> block_align > 0
water	101:12	0:0	6	avctx
op	101:17	0:0	6	->
water	101:19	0:0	6	block_align
op	101:31	0:0	6	>
water	101:33	0:0	6	0
stmts	102:12	102:58	5	
water	102:12	0:0	6	buf_size
op	102:21	0:0	6	=
call	102:23	102:57	6	FFMIN
arg	102:29	102:37	7	buf_size
water	102:29	0:0	8	buf_size
arg	102:39	102:57	7	avctx->block_align
water	102:39	0:0	8	avctx
op	102:44	0:0	8	->
water	102:46	0:0	8	block_align
water	102:58	0:0	6	;
water	103:8	0:0	4	nb_samples
op	103:19	0:0	4	=
water	103:21	0:0	4	(
water	103:22	0:0	4	buf_size
op	103:31	0:0	4	-
water	103:33	0:0	4	4
op	103:35	0:0	4	*
water	103:37	0:0	4	ch
water	103:39	0:0	4	)
op	103:41	0:0	4	*
water	103:43	0:0	4	2
op	103:45	0:0	4	/
water	103:47	0:0	4	ch
water	103:49	0:0	4	;
break	104:8	104:13	4	
label	105:4	105:34	4	case AV_CODEC_ID_ADPCM_IMA_WAV :
water	106:4	0:0	4	{
decl	107:8	107:78	4	int	bsize
op	107:18	0:0	4	=
water	107:20	0:0	4	ff_adpcm_ima_block_sizes
op	107:44	0:0	4	[
water	107:45	0:0	4	avctx
op	107:50	0:0	4	->
water	107:52	0:0	4	bits_per_coded_sample
op	107:74	0:0	4	-
water	107:76	0:0	4	2
op	107:77	0:0	4	]
decl	108:8	108:83	4	int	bsamples
op	108:21	0:0	4	=
water	108:23	0:0	4	ff_adpcm_ima_block_samples
op	108:49	0:0	4	[
water	108:50	0:0	4	avctx
op	108:55	0:0	4	->
water	108:57	0:0	4	bits_per_coded_sample
op	108:79	0:0	4	-
water	108:81	0:0	4	2
op	108:82	0:0	4	]
if	109:8	110:58	4	(avctx -> block_align > 0)
cond	109:12	109:33	5	avctx -> block_align > 0
water	109:12	0:0	6	avctx
op	109:17	0:0	6	->
water	109:19	0:0	6	block_align
op	109:31	0:0	6	>
water	109:33	0:0	6	0
stmts	110:12	110:58	5	
water	110:12	0:0	6	buf_size
op	110:21	0:0	6	=
call	110:23	110:57	6	FFMIN
arg	110:29	110:37	7	buf_size
water	110:29	0:0	8	buf_size
arg	110:39	110:57	7	avctx->block_align
water	110:39	0:0	8	avctx
op	110:44	0:0	8	->
water	110:46	0:0	8	block_align
water	110:58	0:0	6	;
if	111:8	112:38	4	(buf_size < 4 * ch)
cond	111:12	111:27	5	buf_size < 4 * ch
water	111:12	0:0	6	buf_size
op	111:21	0:0	6	<
water	111:23	0:0	6	4
op	111:25	0:0	6	*
water	111:27	0:0	6	ch
stmts	112:12	112:38	5	
return	112:12	112:38	6	AVERROR_INVALIDDATA
water	112:19	0:0	7	AVERROR_INVALIDDATA
water	113:8	0:0	4	nb_samples
op	113:19	0:0	4	=
water	113:21	0:0	4	1
op	113:23	0:0	4	+
water	113:25	0:0	4	(
water	113:26	0:0	4	buf_size
op	113:35	0:0	4	-
water	113:37	0:0	4	4
op	113:39	0:0	4	*
water	113:41	0:0	4	ch
water	113:43	0:0	4	)
op	113:45	0:0	4	/
water	113:47	0:0	4	(
water	113:48	0:0	4	bsize
op	113:54	0:0	4	*
water	113:56	0:0	4	ch
water	113:58	0:0	4	)
op	113:60	0:0	4	*
water	113:62	0:0	4	bsamples
water	113:70	0:0	4	;
break	114:8	114:13	4	
water	115:4	0:0	4	}
label	116:4	116:29	4	case AV_CODEC_ID_ADPCM_MS :
if	117:8	118:58	4	(avctx -> block_align > 0)
cond	117:12	117:33	5	avctx -> block_align > 0
water	117:12	0:0	6	avctx
op	117:17	0:0	6	->
water	117:19	0:0	6	block_align
op	117:31	0:0	6	>
water	117:33	0:0	6	0
stmts	118:12	118:58	5	
water	118:12	0:0	6	buf_size
op	118:21	0:0	6	=
call	118:23	118:57	6	FFMIN
arg	118:29	118:37	7	buf_size
water	118:29	0:0	8	buf_size
arg	118:39	118:57	7	avctx->block_align
water	118:39	0:0	8	avctx
op	118:44	0:0	8	->
water	118:46	0:0	8	block_align
water	118:58	0:0	6	;
water	119:8	0:0	4	nb_samples
op	119:19	0:0	4	=
water	119:21	0:0	4	(
water	119:22	0:0	4	buf_size
op	119:31	0:0	4	-
water	119:33	0:0	4	6
op	119:35	0:0	4	*
water	119:37	0:0	4	ch
water	119:39	0:0	4	)
op	119:41	0:0	4	*
water	119:43	0:0	4	2
op	119:45	0:0	4	/
water	119:47	0:0	4	ch
water	119:49	0:0	4	;
break	120:8	120:13	4	
label	121:4	121:34	4	case AV_CODEC_ID_ADPCM_SBPRO_2 :
label	122:4	122:34	4	case AV_CODEC_ID_ADPCM_SBPRO_3 :
label	123:4	123:34	4	case AV_CODEC_ID_ADPCM_SBPRO_4 :
water	124:4	0:0	4	{
decl	125:8	125:28	4	int	samples_per_byte
switch	126:8	130:8	4	(avctx -> codec -> id)
cond	126:16	126:30	5	avctx -> codec -> id
water	126:16	0:0	6	avctx
op	126:21	0:0	6	->
water	126:23	0:0	6	codec
op	126:28	0:0	6	->
water	126:30	0:0	6	id
stmts	126:34	130:8	5	
water	126:34	0:0	6	{
label	127:8	127:38	6	case AV_CODEC_ID_ADPCM_SBPRO_2 :
water	127:40	0:0	6	samples_per_byte
op	127:57	0:0	6	=
water	127:59	0:0	6	4
water	127:60	0:0	6	;
break	127:62	127:67	6	
label	128:8	128:38	6	case AV_CODEC_ID_ADPCM_SBPRO_3 :
water	128:40	0:0	6	samples_per_byte
op	128:57	0:0	6	=
water	128:59	0:0	6	3
water	128:60	0:0	6	;
break	128:62	128:67	6	
label	129:8	129:38	6	case AV_CODEC_ID_ADPCM_SBPRO_4 :
water	129:40	0:0	6	samples_per_byte
op	129:57	0:0	6	=
water	129:59	0:0	6	2
water	129:60	0:0	6	;
break	129:62	129:67	6	
water	130:8	0:0	6	}
if	131:8	136:8	4	(! s -> status [ 0 ] . step_index)
cond	131:12	131:26	5	! s -> status [ 0 ] . step_index
op	131:12	0:0	6	!
water	131:13	0:0	6	s
op	131:14	0:0	6	->
water	131:16	0:0	6	status
op	131:22	0:0	6	[
water	131:23	0:0	6	0
op	131:24	0:0	6	]
op	131:25	0:0	6	.
water	131:26	0:0	6	step_index
stmts	131:38	136:8	5	
water	131:38	0:0	6	{
if	132:12	133:42	6	(buf_size < ch)
cond	132:16	132:27	7	buf_size < ch
water	132:16	0:0	8	buf_size
op	132:25	0:0	8	<
water	132:27	0:0	8	ch
stmts	133:16	133:42	7	
return	133:16	133:42	8	AVERROR_INVALIDDATA
water	133:23	0:0	9	AVERROR_INVALIDDATA
water	134:12	0:0	6	nb_samples
op	134:22	0:0	6	++
water	134:24	0:0	6	;
water	135:12	0:0	6	buf_size
op	135:21	0:0	6	-=
water	135:24	0:0	6	ch
water	135:26	0:0	6	;
water	136:8	0:0	6	}
water	137:8	0:0	4	nb_samples
op	137:19	0:0	4	+=
water	137:22	0:0	4	buf_size
op	137:31	0:0	4	*
water	137:33	0:0	4	samples_per_byte
op	137:50	0:0	4	/
water	137:52	0:0	4	ch
water	137:54	0:0	4	;
break	138:8	138:13	4	
water	139:4	0:0	4	}
label	140:4	140:30	4	case AV_CODEC_ID_ADPCM_SWF :
water	141:4	0:0	4	{
decl	142:8	142:45	4	int	buf_bits
op	142:27	0:0	4	=
water	142:29	0:0	4	buf_size
op	142:38	0:0	4	*
water	142:40	0:0	4	8
op	142:42	0:0	4	-
water	142:44	0:0	4	2
decl	143:8	143:64	4	int	nbits
op	143:27	0:0	4	=
water	143:29	0:0	4	(
call	143:30	143:53	5	bytestream2_get_byte
arg	143:51	143:53	6	gb
water	143:51	0:0	7	gb
op	143:55	0:0	4	>>
water	143:58	0:0	4	6
water	143:59	0:0	4	)
op	143:61	0:0	4	+
water	143:63	0:0	4	2
decl	144:8	144:36	4	int	block_hdr_size
op	144:27	0:0	4	=
water	144:29	0:0	4	22
op	144:32	0:0	4	*
water	144:34	0:0	4	ch
decl	145:8	145:63	4	int	block_size
op	145:27	0:0	4	=
water	145:29	0:0	4	block_hdr_size
op	145:44	0:0	4	+
water	145:46	0:0	4	nbits
op	145:52	0:0	4	*
water	145:54	0:0	4	ch
op	145:57	0:0	4	*
water	145:59	0:0	4	4095
decl	146:8	146:50	4	int	nblocks
op	146:27	0:0	4	=
water	146:29	0:0	4	buf_bits
op	146:38	0:0	4	/
water	146:40	0:0	4	block_size
decl	147:8	147:60	4	int	bits_left
op	147:27	0:0	4	=
water	147:29	0:0	4	buf_bits
op	147:38	0:0	4	-
water	147:40	0:0	4	nblocks
op	147:48	0:0	4	*
water	147:50	0:0	4	block_size
water	148:8	0:0	4	nb_samples
op	148:27	0:0	4	=
water	148:29	0:0	4	nblocks
op	148:37	0:0	4	*
water	148:39	0:0	4	4096
water	148:43	0:0	4	;
if	149:8	150:73	4	(bits_left >= block_hdr_size)
cond	149:12	149:25	5	bits_left >= block_hdr_size
water	149:12	0:0	6	bits_left
op	149:22	0:0	6	>=
water	149:25	0:0	6	block_hdr_size
stmts	150:12	150:73	5	
water	150:12	0:0	6	nb_samples
op	150:23	0:0	6	+=
water	150:26	0:0	6	1
op	150:28	0:0	6	+
water	150:30	0:0	6	(
water	150:31	0:0	6	bits_left
op	150:41	0:0	6	-
water	150:43	0:0	6	block_hdr_size
water	150:57	0:0	6	)
op	150:59	0:0	6	/
water	150:61	0:0	6	(
water	150:62	0:0	6	nbits
op	150:68	0:0	6	*
water	150:70	0:0	6	ch
water	150:72	0:0	6	)
water	150:73	0:0	6	;
break	151:8	151:13	4	
water	152:4	0:0	4	}
label	153:4	153:30	4	case AV_CODEC_ID_ADPCM_THP :
label	154:4	154:33	4	case AV_CODEC_ID_ADPCM_THP_LE :
if	155:8	158:8	4	(avctx -> extradata)
cond	155:12	155:19	5	avctx -> extradata
water	155:12	0:0	6	avctx
op	155:17	0:0	6	->
water	155:19	0:0	6	extradata
stmts	155:30	158:8	5	
water	155:30	0:0	6	{
water	156:12	0:0	6	nb_samples
op	156:23	0:0	6	=
water	156:25	0:0	6	buf_size
op	156:34	0:0	6	*
water	156:36	0:0	6	14
op	156:39	0:0	6	/
water	156:41	0:0	6	(
water	156:42	0:0	6	8
op	156:44	0:0	6	*
water	156:46	0:0	6	ch
water	156:48	0:0	6	)
water	156:49	0:0	6	;
break	157:12	157:17	6	
water	158:8	0:0	6	}
water	159:8	0:0	4	has_coded_samples
op	159:26	0:0	4	=
water	159:28	0:0	4	1
water	159:29	0:0	4	;
call	160:8	160:30	4	bytestream2_skip
arg	160:25	160:27	5	gb
water	160:25	0:0	6	gb
arg	160:29	160:30	5	4
water	160:29	0:0	6	4
water	160:31	0:0	4	;
op	161:8	0:0	4	*
water	161:9	0:0	4	coded_samples
op	161:24	0:0	4	=
water	161:26	0:0	4	(
water	161:27	0:0	4	avctx
op	161:32	0:0	4	->
water	161:34	0:0	4	codec
op	161:39	0:0	4	->
water	161:41	0:0	4	id
op	161:44	0:0	4	==
water	161:47	0:0	4	AV_CODEC_ID_ADPCM_THP_LE
water	161:71	0:0	4	)
water	161:73	0:0	4	?
call	162:26	162:49	4	bytestream2_get_le32
arg	162:47	162:49	5	gb
water	162:47	0:0	6	gb
water	162:51	0:0	4	:
call	163:26	163:49	4	bytestream2_get_be32
arg	163:47	163:49	5	gb
water	163:47	0:0	6	gb
water	163:50	0:0	4	;
water	164:8	0:0	4	buf_size
op	164:23	0:0	4	-=
water	164:26	0:0	4	8
op	164:28	0:0	4	+
water	164:30	0:0	4	36
op	164:33	0:0	4	*
water	164:35	0:0	4	ch
water	164:37	0:0	4	;
water	165:8	0:0	4	buf_size
op	165:23	0:0	4	/=
water	165:26	0:0	4	ch
water	165:28	0:0	4	;
water	166:8	0:0	4	nb_samples
op	166:24	0:0	4	=
water	166:26	0:0	4	buf_size
op	166:35	0:0	4	/
water	166:37	0:0	4	8
op	166:39	0:0	4	*
water	166:41	0:0	4	14
water	166:43	0:0	4	;
if	167:8	168:52	4	(buf_size % 8 > 1)
cond	167:12	167:27	5	buf_size % 8 > 1
water	167:12	0:0	6	buf_size
op	167:21	0:0	6	%
water	167:23	0:0	6	8
op	167:25	0:0	6	>
water	167:27	0:0	6	1
stmts	168:12	168:52	5	
water	168:12	0:0	6	nb_samples
op	168:27	0:0	6	+=
water	168:30	0:0	6	(
water	168:31	0:0	6	buf_size
op	168:40	0:0	6	%
water	168:42	0:0	6	8
op	168:44	0:0	6	-
water	168:46	0:0	6	1
water	168:47	0:0	6	)
op	168:49	0:0	6	*
water	168:51	0:0	6	2
water	168:52	0:0	6	;
op	169:8	0:0	4	*
water	169:9	0:0	4	approx_nb_samples
op	169:27	0:0	4	=
water	169:29	0:0	4	1
water	169:30	0:0	4	;
break	170:8	170:13	4	
label	171:4	171:30	4	case AV_CODEC_ID_ADPCM_AFC :
water	172:8	0:0	4	nb_samples
op	172:19	0:0	4	=
water	172:21	0:0	4	buf_size
op	172:30	0:0	4	/
water	172:32	0:0	4	(
water	172:33	0:0	4	9
op	172:35	0:0	4	*
water	172:37	0:0	4	ch
water	172:39	0:0	4	)
op	172:41	0:0	4	*
water	172:43	0:0	4	16
water	172:45	0:0	4	;
break	173:8	173:13	4	
label	174:4	174:29	4	case AV_CODEC_ID_ADPCM_XA :
water	175:8	0:0	4	nb_samples
op	175:19	0:0	4	=
water	175:21	0:0	4	(
water	175:22	0:0	4	buf_size
op	175:31	0:0	4	/
water	175:33	0:0	4	128
water	175:36	0:0	4	)
op	175:38	0:0	4	*
water	175:40	0:0	4	224
op	175:44	0:0	4	/
water	175:46	0:0	4	ch
water	175:48	0:0	4	;
break	176:8	176:13	4	
label	177:4	177:30	4	case AV_CODEC_ID_ADPCM_DTK :
water	178:8	0:0	4	nb_samples
op	178:19	0:0	4	=
water	178:21	0:0	4	buf_size
op	178:30	0:0	4	/
water	178:32	0:0	4	(
water	178:33	0:0	4	16
op	178:36	0:0	4	*
water	178:38	0:0	4	ch
water	178:40	0:0	4	)
op	178:42	0:0	4	*
water	178:44	0:0	4	28
water	178:46	0:0	4	;
break	179:8	179:13	4	
water	180:4	0:0	4	}
if	182:4	183:34	2	(has_coded_samples && ( * coded_samples <= 0 || * coded_samples > nb_samples ))
cond	182:8	182:80	3	has_coded_samples && ( * coded_samples <= 0 || * coded_samples > nb_samples )
water	182:8	0:0	4	has_coded_samples
op	182:26	0:0	4	&&
water	182:29	0:0	4	(
op	182:30	0:0	4	*
water	182:31	0:0	4	coded_samples
op	182:45	0:0	4	<=
water	182:48	0:0	4	0
op	182:50	0:0	4	||
op	182:53	0:0	4	*
water	182:54	0:0	4	coded_samples
op	182:68	0:0	4	>
water	182:70	0:0	4	nb_samples
water	182:80	0:0	4	)
stmts	183:8	183:34	3	
return	183:8	183:34	4	AVERROR_INVALIDDATA
water	183:15	0:0	5	AVERROR_INVALIDDATA
return	184:4	184:21	2	nb_samples
water	184:11	0:0	3	nb_samples
