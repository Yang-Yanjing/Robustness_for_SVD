func	1:0	163:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:57	2	AVFrame *	in
stmnts	0:0	162:14	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:43	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	outputs
op	4:40	0:0	2	[
water	4:41	0:0	2	0
op	4:42	0:0	2	]
decl	5:4	5:39	2	SilenceRemoveContext	*s
op	5:28	0:0	2	=
water	5:30	0:0	2	ctx
op	5:33	0:0	2	->
water	5:35	0:0	2	priv
decl	6:4	6:32	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:32	2	int	j
water	6:12	0:0	2	,
decl	6:4	6:32	2	int	threshold
water	6:23	0:0	2	,
decl	6:4	6:32	2	int	ret
op	6:29	0:0	2	=
water	6:31	0:0	2	0
decl	7:4	7:48	2	int	nbs
water	7:11	0:0	2	,
decl	7:4	7:48	2	int	nb_samples_read
water	7:28	0:0	2	,
decl	7:4	7:48	2	int	nb_samples_written
decl	8:4	8:47	2	double	*obuf
water	8:16	0:0	2	,
decl	8:4	8:47	2	double	*ibuf
op	8:24	0:0	2	=
water	8:26	0:0	2	(
water	8:27	0:0	2	double
op	8:34	0:0	2	*
water	8:35	0:0	2	)
water	8:36	0:0	2	in
op	8:38	0:0	2	->
water	8:40	0:0	2	data
op	8:44	0:0	2	[
water	8:45	0:0	2	0
op	8:46	0:0	2	]
decl	9:4	9:16	2	AVFrame	*out
water	10:4	0:0	2	nb_samples_read
op	10:20	0:0	2	=
water	10:22	0:0	2	nb_samples_written
op	10:41	0:0	2	=
water	10:43	0:0	2	0
water	10:44	0:0	2	;
switch	11:4	160:4	2	(s -> mode)
cond	11:12	11:15	3	s -> mode
water	11:12	0:0	4	s
op	11:13	0:0	4	->
water	11:15	0:0	4	mode
stmts	11:21	160:4	3	
water	11:21	0:0	4	{
label	12:4	12:21	4	case SILENCE_TRIM :
label	13:0	13:12	4	silence_trim :
water	14:8	0:0	4	nbs
op	14:12	0:0	4	=
water	14:14	0:0	4	in
op	14:16	0:0	4	->
water	14:18	0:0	4	nb_samples
op	14:29	0:0	4	-
water	14:31	0:0	4	nb_samples_read
op	14:47	0:0	4	/
water	14:49	0:0	4	inlink
op	14:55	0:0	4	->
water	14:57	0:0	4	channels
water	14:65	0:0	4	;
if	15:8	16:17	4	(! nbs)
cond	15:12	15:13	5	! nbs
op	15:12	0:0	6	!
water	15:13	0:0	6	nbs
stmts	16:12	16:17	5	
break	16:12	16:17	6	
for	17:8	43:8	4	(i = 0 ;i < nbs;i ++)
forinit	17:13	17:18	5	i = 0 ;
water	17:13	0:0	6	i
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:24	5	i < nbs
water	17:20	0:0	6	i
op	17:22	0:0	6	<
water	17:24	0:0	6	nbs
forexpr	17:29	17:30	5	i ++
water	17:29	0:0	6	i
op	17:30	0:0	6	++
stmts	17:34	43:8	5	
water	17:34	0:0	6	{
water	18:12	0:0	6	threshold
op	18:22	0:0	6	=
water	18:24	0:0	6	0
water	18:25	0:0	6	;
for	19:12	21:12	6	(j = 0 ;j < inlink -> channels;j ++)
forinit	19:17	19:22	7	j = 0 ;
water	19:17	0:0	8	j
op	19:19	0:0	8	=
water	19:21	0:0	8	0
water	19:22	0:0	8	;
cond	19:24	19:36	7	j < inlink -> channels
water	19:24	0:0	8	j
op	19:26	0:0	8	<
water	19:28	0:0	8	inlink
op	19:34	0:0	8	->
water	19:36	0:0	8	channels
forexpr	19:46	19:47	7	j ++
water	19:46	0:0	8	j
op	19:47	0:0	8	++
stmts	19:51	21:12	7	
water	19:51	0:0	8	{
water	20:16	0:0	8	threshold
op	20:26	0:0	8	|=
call	20:29	20:51	8	compute_rms
arg	20:41	20:42	9	s
water	20:41	0:0	10	s
arg	20:44	20:51	9	ibuf[j]
water	20:44	0:0	10	ibuf
op	20:48	0:0	10	[
water	20:49	0:0	10	j
op	20:50	0:0	10	]
op	20:53	0:0	8	>
water	20:55	0:0	8	s
op	20:56	0:0	8	->
water	20:58	0:0	8	start_threshold
water	20:73	0:0	8	;
water	21:12	0:0	8	}
if	22:12	36:12	6	(threshold)
cond	22:16	22:16	7	threshold
water	22:16	0:0	8	threshold
stmts	22:27	36:12	7	
water	22:27	0:0	8	{
for	23:16	27:16	8	(j = 0 ;j < inlink -> channels;j ++)
forinit	23:21	23:26	9	j = 0 ;
water	23:21	0:0	10	j
op	23:23	0:0	10	=
water	23:25	0:0	10	0
water	23:26	0:0	10	;
cond	23:28	23:40	9	j < inlink -> channels
water	23:28	0:0	10	j
op	23:30	0:0	10	<
water	23:32	0:0	10	inlink
op	23:38	0:0	10	->
water	23:40	0:0	10	channels
forexpr	23:50	23:51	9	j ++
water	23:50	0:0	10	j
op	23:51	0:0	10	++
stmts	23:55	27:16	9	
water	23:55	0:0	10	{
call	24:20	24:39	10	update_rms
arg	24:31	24:32	11	s
water	24:31	0:0	12	s
arg	24:34	24:39	11	*ibuf
op	24:34	0:0	12	*
water	24:35	0:0	12	ibuf
water	24:40	0:0	10	;
water	25:20	0:0	10	s
op	25:21	0:0	10	->
water	25:23	0:0	10	start_holdoff
op	25:36	0:0	10	[
water	25:37	0:0	10	s
op	25:38	0:0	10	->
water	25:40	0:0	10	start_holdoff_end
op	25:57	0:0	10	++
op	25:59	0:0	10	]
op	25:61	0:0	10	=
op	25:63	0:0	10	*
water	25:64	0:0	10	ibuf
op	25:68	0:0	10	++
water	25:70	0:0	10	;
water	26:20	0:0	10	nb_samples_read
op	26:35	0:0	10	++
water	26:37	0:0	10	;
water	27:16	0:0	10	}
if	28:16	35:16	8	(s -> start_holdoff_end >= s -> start_duration * inlink -> channels)
cond	28:20	28:72	9	s -> start_holdoff_end >= s -> start_duration * inlink -> channels
water	28:20	0:0	10	s
op	28:21	0:0	10	->
water	28:23	0:0	10	start_holdoff_end
op	28:41	0:0	10	>=
water	28:44	0:0	10	s
op	28:45	0:0	10	->
water	28:47	0:0	10	start_duration
op	28:62	0:0	10	*
water	28:64	0:0	10	inlink
op	28:70	0:0	10	->
water	28:72	0:0	10	channels
stmts	28:82	35:16	9	
water	28:82	0:0	10	{
if	29:20	32:20	10	(++ s -> start_found_periods >= s -> start_periods)
cond	29:24	29:55	11	++ s -> start_found_periods >= s -> start_periods
op	29:24	0:0	12	++
water	29:26	0:0	12	s
op	29:27	0:0	12	->
water	29:29	0:0	12	start_found_periods
op	29:49	0:0	12	>=
water	29:52	0:0	12	s
op	29:53	0:0	12	->
water	29:55	0:0	12	start_periods
stmts	29:70	32:20	11	
water	29:70	0:0	12	{
water	30:24	0:0	12	s
op	30:25	0:0	12	->
water	30:27	0:0	12	mode
op	30:32	0:0	12	=
water	30:34	0:0	12	SILENCE_TRIM_FLUSH
water	30:52	0:0	12	;
goto	31:24	31:47	12	silence_trim_flush
water	31:29	0:0	13	silence_trim_flush
water	32:20	0:0	12	}
water	33:20	0:0	10	s
op	33:21	0:0	10	->
water	33:23	0:0	10	start_holdoff_offset
op	33:44	0:0	10	=
water	33:46	0:0	10	0
water	33:47	0:0	10	;
water	34:20	0:0	10	s
op	34:21	0:0	10	->
water	34:23	0:0	10	start_holdoff_end
op	34:41	0:0	10	=
water	34:43	0:0	10	0
water	34:44	0:0	10	;
water	35:16	0:0	10	}
water	36:12	0:0	8	}
else	36:14	42:12	6
stmts	36:19	42:12	7	
water	36:19	0:0	8	{
water	37:16	0:0	8	s
op	37:17	0:0	8	->
water	37:19	0:0	8	start_holdoff_end
op	37:37	0:0	8	=
water	37:39	0:0	8	0
water	37:40	0:0	8	;
for	38:16	39:42	8	(j = 0 ;j < inlink -> channels;j ++)
forinit	38:21	38:26	9	j = 0 ;
water	38:21	0:0	10	j
op	38:23	0:0	10	=
water	38:25	0:0	10	0
water	38:26	0:0	10	;
cond	38:28	38:40	9	j < inlink -> channels
water	38:28	0:0	10	j
op	38:30	0:0	10	<
water	38:32	0:0	10	inlink
op	38:38	0:0	10	->
water	38:40	0:0	10	channels
forexpr	38:50	38:51	9	j ++
water	38:50	0:0	10	j
op	38:51	0:0	10	++
stmts	39:20	39:42	9	
call	39:20	39:41	10	update_rms
arg	39:31	39:32	11	s
water	39:31	0:0	12	s
arg	39:34	39:41	11	ibuf[j]
water	39:34	0:0	12	ibuf
op	39:38	0:0	12	[
water	39:39	0:0	12	j
op	39:40	0:0	12	]
water	39:42	0:0	10	;
water	40:16	0:0	8	ibuf
op	40:21	0:0	8	+=
water	40:24	0:0	8	inlink
op	40:30	0:0	8	->
water	40:32	0:0	8	channels
water	40:40	0:0	8	;
water	41:16	0:0	8	nb_samples_read
op	41:32	0:0	8	+=
water	41:35	0:0	8	inlink
op	41:41	0:0	8	->
water	41:43	0:0	8	channels
water	41:51	0:0	8	;
water	42:12	0:0	8	}
water	43:8	0:0	6	}
break	44:8	44:13	4	
label	45:4	45:27	4	case SILENCE_TRIM_FLUSH :
label	46:0	46:18	4	silence_trim_flush :
water	47:8	0:0	4	nbs
op	47:13	0:0	4	=
water	47:15	0:0	4	s
op	47:16	0:0	4	->
water	47:18	0:0	4	start_holdoff_end
op	47:36	0:0	4	-
water	47:38	0:0	4	s
op	47:39	0:0	4	->
water	47:41	0:0	4	start_holdoff_offset
water	47:61	0:0	4	;
water	48:8	0:0	4	nbs
op	48:12	0:0	4	-=
water	48:15	0:0	4	nbs
op	48:19	0:0	4	%
water	48:21	0:0	4	inlink
op	48:27	0:0	4	->
water	48:29	0:0	4	channels
water	48:37	0:0	4	;
if	49:8	50:17	4	(! nbs)
cond	49:12	49:13	5	! nbs
op	49:12	0:0	6	!
water	49:13	0:0	6	nbs
stmts	50:12	50:17	5	
break	50:12	50:17	6	
water	51:8	0:0	4	out
op	51:12	0:0	4	=
call	51:14	51:64	4	ff_get_audio_buffer
arg	51:34	51:40	5	inlink
water	51:34	0:0	6	inlink
arg	51:42	51:64	5	nbs/inlink->channels
water	51:42	0:0	6	nbs
op	51:46	0:0	6	/
water	51:48	0:0	6	inlink
op	51:54	0:0	6	->
water	51:56	0:0	6	channels
water	51:65	0:0	4	;
if	52:8	55:8	4	(! out)
cond	52:12	52:13	5	! out
op	52:12	0:0	6	!
water	52:13	0:0	6	out
stmts	52:18	55:8	5	
water	52:18	0:0	6	{
call	53:12	53:29	6	av_frame_free
arg	53:26	53:29	7	&in
op	53:26	0:0	8	&
water	53:27	0:0	8	in
water	53:30	0:0	6	;
return	54:12	54:34	6	AVERROR(ENOMEM)
call	54:19	54:33	7	AVERROR
arg	54:27	54:33	8	ENOMEM
water	54:27	0:0	9	ENOMEM
water	55:8	0:0	6	}
call	56:8	57:35	4	memcpy
arg	56:15	56:27	5	out->data[0]
water	56:15	0:0	6	out
op	56:18	0:0	6	->
water	56:20	0:0	6	data
op	56:24	0:0	6	[
water	56:25	0:0	6	0
op	56:26	0:0	6	]
arg	56:29	56:71	5	&s->start_holdoff[s->start_holdoff_offset]
op	56:29	0:0	6	&
water	56:30	0:0	6	s
op	56:31	0:0	6	->
water	56:33	0:0	6	start_holdoff
op	56:46	0:0	6	[
water	56:47	0:0	6	s
op	56:48	0:0	6	->
water	56:50	0:0	6	start_holdoff_offset
op	56:70	0:0	6	]
arg	57:15	57:35	5	nbs*sizeof(double)
water	57:15	0:0	6	nbs
op	57:19	0:0	6	*
op	57:21	0:0	6	sizeof
water	57:27	0:0	6	(
water	57:28	0:0	6	double
water	57:34	0:0	6	)
water	57:36	0:0	4	;
water	58:8	0:0	4	s
op	58:9	0:0	4	->
water	58:11	0:0	4	start_holdoff_offset
op	58:32	0:0	4	+=
water	58:35	0:0	4	nbs
water	58:38	0:0	4	;
water	59:8	0:0	4	ret
op	59:12	0:0	4	=
call	59:14	59:42	4	ff_filter_frame
arg	59:30	59:37	5	outlink
water	59:30	0:0	6	outlink
arg	59:39	59:42	5	out
water	59:39	0:0	6	out
water	59:43	0:0	4	;
if	60:8	65:8	4	(s -> start_holdoff_offset == s -> start_holdoff_end)
cond	60:12	60:42	5	s -> start_holdoff_offset == s -> start_holdoff_end
water	60:12	0:0	6	s
op	60:13	0:0	6	->
water	60:15	0:0	6	start_holdoff_offset
op	60:36	0:0	6	==
water	60:39	0:0	6	s
op	60:40	0:0	6	->
water	60:42	0:0	6	start_holdoff_end
stmts	60:61	65:8	5	
water	60:61	0:0	6	{
water	61:12	0:0	6	s
op	61:13	0:0	6	->
water	61:15	0:0	6	start_holdoff_offset
op	61:36	0:0	6	=
water	61:38	0:0	6	0
water	61:39	0:0	6	;
water	62:12	0:0	6	s
op	62:13	0:0	6	->
water	62:15	0:0	6	start_holdoff_end
op	62:33	0:0	6	=
water	62:35	0:0	6	0
water	62:36	0:0	6	;
water	63:12	0:0	6	s
op	63:13	0:0	6	->
water	63:15	0:0	6	mode
op	63:20	0:0	6	=
water	63:22	0:0	6	SILENCE_COPY
water	63:34	0:0	6	;
goto	64:12	64:29	6	silence_copy
water	64:17	0:0	7	silence_copy
water	65:8	0:0	6	}
break	66:8	66:13	4	
label	67:4	67:21	4	case SILENCE_COPY :
label	68:0	68:12	4	silence_copy :
water	69:8	0:0	4	nbs
op	69:12	0:0	4	=
water	69:14	0:0	4	in
op	69:16	0:0	4	->
water	69:18	0:0	4	nb_samples
op	69:29	0:0	4	-
water	69:31	0:0	4	nb_samples_read
op	69:47	0:0	4	/
water	69:49	0:0	4	inlink
op	69:55	0:0	4	->
water	69:57	0:0	4	channels
water	69:65	0:0	4	;
if	70:8	71:17	4	(! nbs)
cond	70:12	70:13	5	! nbs
op	70:12	0:0	6	!
water	70:13	0:0	6	nbs
stmts	71:12	71:17	5	
break	71:12	71:17	6	
water	72:8	0:0	4	out
op	72:12	0:0	4	=
call	72:14	72:45	4	ff_get_audio_buffer
arg	72:34	72:40	5	inlink
water	72:34	0:0	6	inlink
arg	72:42	72:45	5	nbs
water	72:42	0:0	6	nbs
water	72:46	0:0	4	;
if	73:8	76:8	4	(! out)
cond	73:12	73:13	5	! out
op	73:12	0:0	6	!
water	73:13	0:0	6	out
stmts	73:18	76:8	5	
water	73:18	0:0	6	{
call	74:12	74:29	6	av_frame_free
arg	74:26	74:29	7	&in
op	74:26	0:0	8	&
water	74:27	0:0	8	in
water	74:30	0:0	6	;
return	75:12	75:34	6	AVERROR(ENOMEM)
call	75:19	75:33	7	AVERROR
arg	75:27	75:33	8	ENOMEM
water	75:27	0:0	9	ENOMEM
water	76:8	0:0	6	}
water	77:8	0:0	4	obuf
op	77:13	0:0	4	=
water	77:15	0:0	4	(
water	77:16	0:0	4	double
op	77:23	0:0	4	*
water	77:24	0:0	4	)
water	77:25	0:0	4	out
op	77:28	0:0	4	->
water	77:30	0:0	4	data
op	77:34	0:0	4	[
water	77:35	0:0	4	0
op	77:36	0:0	4	]
water	77:37	0:0	4	;
if	78:8	130:8	4	(s -> stop_periods)
cond	78:12	78:15	5	s -> stop_periods
water	78:12	0:0	6	s
op	78:13	0:0	6	->
water	78:15	0:0	6	stop_periods
stmts	78:29	130:8	5	
water	78:29	0:0	6	{
for	79:12	128:12	6	(i = 0 ;i < nbs;i ++)
forinit	79:17	79:22	7	i = 0 ;
water	79:17	0:0	8	i
op	79:19	0:0	8	=
water	79:21	0:0	8	0
water	79:22	0:0	8	;
cond	79:24	79:28	7	i < nbs
water	79:24	0:0	8	i
op	79:26	0:0	8	<
water	79:28	0:0	8	nbs
forexpr	79:33	79:34	7	i ++
water	79:33	0:0	8	i
op	79:34	0:0	8	++
stmts	79:38	128:12	7	
water	79:38	0:0	8	{
water	80:16	0:0	8	threshold
op	80:26	0:0	8	=
water	80:28	0:0	8	1
water	80:29	0:0	8	;
for	81:16	82:76	8	(j = 0 ;j < inlink -> channels;j ++)
forinit	81:21	81:26	9	j = 0 ;
water	81:21	0:0	10	j
op	81:23	0:0	10	=
water	81:25	0:0	10	0
water	81:26	0:0	10	;
cond	81:28	81:40	9	j < inlink -> channels
water	81:28	0:0	10	j
op	81:30	0:0	10	<
water	81:32	0:0	10	inlink
op	81:38	0:0	10	->
water	81:40	0:0	10	channels
forexpr	81:50	81:51	9	j ++
water	81:50	0:0	10	j
op	81:51	0:0	10	++
stmts	82:20	82:76	9	
water	82:20	0:0	10	threshold
op	82:30	0:0	10	&=
call	82:33	82:55	10	compute_rms
arg	82:45	82:46	11	s
water	82:45	0:0	12	s
arg	82:48	82:55	11	ibuf[j]
water	82:48	0:0	12	ibuf
op	82:52	0:0	12	[
water	82:53	0:0	12	j
op	82:54	0:0	12	]
op	82:57	0:0	10	>
water	82:59	0:0	10	s
op	82:60	0:0	10	->
water	82:62	0:0	10	stop_threshold
water	82:76	0:0	10	;
if	83:16	87:16	8	(threshold && s -> stop_holdoff_end && ! s -> leave_silence)
cond	83:20	83:60	9	threshold && s -> stop_holdoff_end && ! s -> leave_silence
water	83:20	0:0	10	threshold
op	83:30	0:0	10	&&
water	83:33	0:0	10	s
op	83:34	0:0	10	->
water	83:36	0:0	10	stop_holdoff_end
op	83:53	0:0	10	&&
op	83:56	0:0	10	!
water	83:57	0:0	10	s
op	83:58	0:0	10	->
water	83:60	0:0	10	leave_silence
stmts	83:75	87:16	9	
water	83:75	0:0	10	{
water	84:20	0:0	10	s
op	84:21	0:0	10	->
water	84:23	0:0	10	mode
op	84:28	0:0	10	=
water	84:30	0:0	10	SILENCE_COPY_FLUSH
water	84:48	0:0	10	;
call	85:20	85:65	10	flush
arg	85:26	85:29	11	out
water	85:26	0:0	12	out
arg	85:31	85:38	11	outlink
water	85:31	0:0	12	outlink
arg	85:40	85:59	11	&nb_samples_written
op	85:40	0:0	12	&
water	85:41	0:0	12	nb_samples_written
arg	85:61	85:65	11	&ret
op	85:61	0:0	12	&
water	85:62	0:0	12	ret
water	85:66	0:0	10	;
goto	86:20	86:43	10	silence_copy_flush
water	86:25	0:0	11	silence_copy_flush
water	87:16	0:0	10	}
else	87:18	94:16	8
stmts	87:23	94:16	9	
if	87:23	94:16	10	(threshold)
cond	87:27	87:27	11	threshold
water	87:27	0:0	12	threshold
stmts	87:38	94:16	11	
water	87:38	0:0	12	{
for	88:20	93:20	12	(j = 0 ;j < inlink -> channels;j ++)
forinit	88:25	88:30	13	j = 0 ;
water	88:25	0:0	14	j
op	88:27	0:0	14	=
water	88:29	0:0	14	0
water	88:30	0:0	14	;
cond	88:32	88:44	13	j < inlink -> channels
water	88:32	0:0	14	j
op	88:34	0:0	14	<
water	88:36	0:0	14	inlink
op	88:42	0:0	14	->
water	88:44	0:0	14	channels
forexpr	88:54	88:55	13	j ++
water	88:54	0:0	14	j
op	88:55	0:0	14	++
stmts	88:59	93:20	13	
water	88:59	0:0	14	{
call	89:24	89:43	14	update_rms
arg	89:35	89:36	15	s
water	89:35	0:0	16	s
arg	89:38	89:43	15	*ibuf
op	89:38	0:0	16	*
water	89:39	0:0	16	ibuf
water	89:44	0:0	14	;
op	90:24	0:0	14	*
water	90:25	0:0	14	obuf
op	90:29	0:0	14	++
op	90:32	0:0	14	=
op	90:34	0:0	14	*
water	90:35	0:0	14	ibuf
op	90:39	0:0	14	++
water	90:41	0:0	14	;
water	91:24	0:0	14	nb_samples_read
op	91:39	0:0	14	++
water	91:41	0:0	14	;
water	92:24	0:0	14	nb_samples_written
op	92:42	0:0	14	++
water	92:44	0:0	14	;
water	93:20	0:0	14	}
water	94:16	0:0	12	}
else	94:18	127:16	8
stmts	94:23	127:16	9	
if	94:23	127:16	10	(! threshold)
cond	94:27	94:28	11	! threshold
op	94:27	0:0	12	!
water	94:28	0:0	12	threshold
stmts	94:39	127:16	11	
water	94:39	0:0	12	{
for	95:20	103:20	12	(j = 0 ;j < inlink -> channels;j ++)
forinit	95:25	95:30	13	j = 0 ;
water	95:25	0:0	14	j
op	95:27	0:0	14	=
water	95:29	0:0	14	0
water	95:30	0:0	14	;
cond	95:32	95:44	13	j < inlink -> channels
water	95:32	0:0	14	j
op	95:34	0:0	14	<
water	95:36	0:0	14	inlink
op	95:42	0:0	14	->
water	95:44	0:0	14	channels
forexpr	95:54	95:55	13	j ++
water	95:54	0:0	14	j
op	95:55	0:0	14	++
stmts	95:59	103:20	13	
water	95:59	0:0	14	{
call	96:24	96:43	14	update_rms
arg	96:35	96:36	15	s
water	96:35	0:0	16	s
arg	96:38	96:43	15	*ibuf
op	96:38	0:0	16	*
water	96:39	0:0	16	ibuf
water	96:44	0:0	14	;
if	97:24	100:24	14	(s -> leave_silence)
cond	97:28	97:31	15	s -> leave_silence
water	97:28	0:0	16	s
op	97:29	0:0	16	->
water	97:31	0:0	16	leave_silence
stmts	97:46	100:24	15	
water	97:46	0:0	16	{
op	98:28	0:0	16	*
water	98:29	0:0	16	obuf
op	98:33	0:0	16	++
op	98:36	0:0	16	=
op	98:38	0:0	16	*
water	98:39	0:0	16	ibuf
water	98:43	0:0	16	;
water	99:28	0:0	16	nb_samples_written
op	99:46	0:0	16	++
water	99:48	0:0	16	;
water	100:24	0:0	16	}
water	101:24	0:0	14	s
op	101:25	0:0	14	->
water	101:27	0:0	14	stop_holdoff
op	101:39	0:0	14	[
water	101:40	0:0	14	s
op	101:41	0:0	14	->
water	101:43	0:0	14	stop_holdoff_end
op	101:59	0:0	14	++
op	101:61	0:0	14	]
op	101:63	0:0	14	=
op	101:65	0:0	14	*
water	101:66	0:0	14	ibuf
op	101:70	0:0	14	++
water	101:72	0:0	14	;
water	102:24	0:0	14	nb_samples_read
op	102:39	0:0	14	++
water	102:41	0:0	14	;
water	103:20	0:0	14	}
if	104:20	126:20	12	(s -> stop_holdoff_end >= s -> stop_duration * inlink -> channels)
cond	104:24	104:74	13	s -> stop_holdoff_end >= s -> stop_duration * inlink -> channels
water	104:24	0:0	14	s
op	104:25	0:0	14	->
water	104:27	0:0	14	stop_holdoff_end
op	104:44	0:0	14	>=
water	104:47	0:0	14	s
op	104:48	0:0	14	->
water	104:50	0:0	14	stop_duration
op	104:64	0:0	14	*
water	104:66	0:0	14	inlink
op	104:72	0:0	14	->
water	104:74	0:0	14	channels
stmts	104:84	126:20	13	
water	104:84	0:0	14	{
if	105:24	122:24	14	(++ s -> stop_found_periods >= s -> stop_periods)
cond	105:28	105:58	15	++ s -> stop_found_periods >= s -> stop_periods
op	105:28	0:0	16	++
water	105:30	0:0	16	s
op	105:31	0:0	16	->
water	105:33	0:0	16	stop_found_periods
op	105:52	0:0	16	>=
water	105:55	0:0	16	s
op	105:56	0:0	16	->
water	105:58	0:0	16	stop_periods
stmts	105:72	122:24	15	
water	105:72	0:0	16	{
water	106:28	0:0	16	s
op	106:29	0:0	16	->
water	106:31	0:0	16	stop_holdoff_offset
op	106:51	0:0	16	=
water	106:53	0:0	16	0
water	106:54	0:0	16	;
water	107:28	0:0	16	s
op	107:29	0:0	16	->
water	107:31	0:0	16	stop_holdoff_end
op	107:48	0:0	16	=
water	107:50	0:0	16	0
water	107:51	0:0	16	;
if	108:28	112:28	16	(! s -> restart)
cond	108:32	108:36	17	! s -> restart
op	108:32	0:0	18	!
water	108:33	0:0	18	s
op	108:34	0:0	18	->
water	108:36	0:0	18	restart
stmts	108:45	112:28	17	
water	108:45	0:0	18	{
water	109:32	0:0	18	s
op	109:33	0:0	18	->
water	109:35	0:0	18	mode
op	109:40	0:0	18	=
water	109:42	0:0	18	SILENCE_STOP
water	109:54	0:0	18	;
call	110:32	110:77	18	flush
arg	110:38	110:41	19	out
water	110:38	0:0	20	out
arg	110:43	110:50	19	outlink
water	110:43	0:0	20	outlink
arg	110:52	110:71	19	&nb_samples_written
op	110:52	0:0	20	&
water	110:53	0:0	20	nb_samples_written
arg	110:73	110:77	19	&ret
op	110:73	0:0	20	&
water	110:74	0:0	20	ret
water	110:78	0:0	18	;
goto	111:32	111:49	18	silence_stop
water	111:37	0:0	19	silence_stop
water	112:28	0:0	18	}
else	112:30	121:28	16
stmts	112:35	121:28	17	
water	112:35	0:0	18	{
water	113:32	0:0	18	s
op	113:33	0:0	18	->
water	113:35	0:0	18	stop_found_periods
op	113:54	0:0	18	=
water	113:56	0:0	18	0
water	113:57	0:0	18	;
water	114:32	0:0	18	s
op	114:33	0:0	18	->
water	114:35	0:0	18	start_found_periods
op	114:55	0:0	18	=
water	114:57	0:0	18	0
water	114:58	0:0	18	;
water	115:32	0:0	18	s
op	115:33	0:0	18	->
water	115:35	0:0	18	start_holdoff_offset
op	115:56	0:0	18	=
water	115:58	0:0	18	0
water	115:59	0:0	18	;
water	116:32	0:0	18	s
op	116:33	0:0	18	->
water	116:35	0:0	18	start_holdoff_end
op	116:53	0:0	18	=
water	116:55	0:0	18	0
water	116:56	0:0	18	;
call	117:32	117:43	18	clear_rms
arg	117:42	117:43	19	s
water	117:42	0:0	20	s
water	117:44	0:0	18	;
water	118:32	0:0	18	s
op	118:33	0:0	18	->
water	118:35	0:0	18	mode
op	118:40	0:0	18	=
water	118:42	0:0	18	SILENCE_TRIM
water	118:54	0:0	18	;
call	119:32	119:77	18	flush
arg	119:38	119:41	19	out
water	119:38	0:0	20	out
arg	119:43	119:50	19	outlink
water	119:43	0:0	20	outlink
arg	119:52	119:71	19	&nb_samples_written
op	119:52	0:0	20	&
water	119:53	0:0	20	nb_samples_written
arg	119:73	119:77	19	&ret
op	119:73	0:0	20	&
water	119:74	0:0	20	ret
water	119:78	0:0	18	;
goto	120:32	120:49	18	silence_trim
water	120:37	0:0	19	silence_trim
water	121:28	0:0	18	}
water	122:24	0:0	16	}
water	123:24	0:0	14	s
op	123:25	0:0	14	->
water	123:27	0:0	14	mode
op	123:32	0:0	14	=
water	123:34	0:0	14	SILENCE_COPY_FLUSH
water	123:52	0:0	14	;
call	124:24	124:69	14	flush
arg	124:30	124:33	15	out
water	124:30	0:0	16	out
arg	124:35	124:42	15	outlink
water	124:35	0:0	16	outlink
arg	124:44	124:63	15	&nb_samples_written
op	124:44	0:0	16	&
water	124:45	0:0	16	nb_samples_written
arg	124:65	124:69	15	&ret
op	124:65	0:0	16	&
water	124:66	0:0	16	ret
water	124:70	0:0	14	;
goto	125:24	125:47	14	silence_copy_flush
water	125:29	0:0	15	silence_copy_flush
water	126:20	0:0	14	}
water	127:16	0:0	12	}
water	128:12	0:0	8	}
call	129:12	129:57	6	flush
arg	129:18	129:21	7	out
water	129:18	0:0	8	out
arg	129:23	129:30	7	outlink
water	129:23	0:0	8	outlink
arg	129:32	129:51	7	&nb_samples_written
op	129:32	0:0	8	&
water	129:33	0:0	8	nb_samples_written
arg	129:53	129:57	7	&ret
op	129:53	0:0	8	&
water	129:54	0:0	8	ret
water	129:58	0:0	6	;
water	130:8	0:0	6	}
else	130:10	133:8	4
stmts	130:15	133:8	5	
water	130:15	0:0	6	{
call	131:12	131:70	6	memcpy
arg	131:19	131:23	7	obuf
water	131:19	0:0	8	obuf
arg	131:25	131:29	7	ibuf
water	131:25	0:0	8	ibuf
arg	131:31	131:70	7	sizeof(double)*nbs*inlink->channels
op	131:31	0:0	8	sizeof
water	131:37	0:0	8	(
water	131:38	0:0	8	double
water	131:44	0:0	8	)
op	131:46	0:0	8	*
water	131:48	0:0	8	nbs
op	131:52	0:0	8	*
water	131:54	0:0	8	inlink
op	131:60	0:0	8	->
water	131:62	0:0	8	channels
water	131:71	0:0	6	;
water	132:12	0:0	6	ret
op	132:16	0:0	6	=
call	132:18	132:46	6	ff_filter_frame
arg	132:34	132:41	7	outlink
water	132:34	0:0	8	outlink
arg	132:43	132:46	7	out
water	132:43	0:0	8	out
water	132:47	0:0	6	;
water	133:8	0:0	6	}
break	134:8	134:13	4	
label	135:4	135:27	4	case SILENCE_COPY_FLUSH :
label	136:0	136:18	4	silence_copy_flush :
water	137:8	0:0	4	nbs
op	137:13	0:0	4	=
water	137:15	0:0	4	s
op	137:16	0:0	4	->
water	137:18	0:0	4	stop_holdoff_end
op	137:35	0:0	4	-
water	137:37	0:0	4	s
op	137:38	0:0	4	->
water	137:40	0:0	4	stop_holdoff_offset
water	137:59	0:0	4	;
water	138:8	0:0	4	nbs
op	138:12	0:0	4	-=
water	138:15	0:0	4	nbs
op	138:19	0:0	4	%
water	138:21	0:0	4	inlink
op	138:27	0:0	4	->
water	138:29	0:0	4	channels
water	138:37	0:0	4	;
if	139:8	140:17	4	(! nbs)
cond	139:12	139:13	5	! nbs
op	139:12	0:0	6	!
water	139:13	0:0	6	nbs
stmts	140:12	140:17	5	
break	140:12	140:17	6	
water	141:8	0:0	4	out
op	141:12	0:0	4	=
call	141:14	141:64	4	ff_get_audio_buffer
arg	141:34	141:40	5	inlink
water	141:34	0:0	6	inlink
arg	141:42	141:64	5	nbs/inlink->channels
water	141:42	0:0	6	nbs
op	141:46	0:0	6	/
water	141:48	0:0	6	inlink
op	141:54	0:0	6	->
water	141:56	0:0	6	channels
water	141:65	0:0	4	;
if	142:8	145:8	4	(! out)
cond	142:12	142:13	5	! out
op	142:12	0:0	6	!
water	142:13	0:0	6	out
stmts	142:18	145:8	5	
water	142:18	0:0	6	{
call	143:12	143:29	6	av_frame_free
arg	143:26	143:29	7	&in
op	143:26	0:0	8	&
water	143:27	0:0	8	in
water	143:30	0:0	6	;
return	144:12	144:34	6	AVERROR(ENOMEM)
call	144:19	144:33	7	AVERROR
arg	144:27	144:33	8	ENOMEM
water	144:27	0:0	9	ENOMEM
water	145:8	0:0	6	}
call	146:8	147:35	4	memcpy
arg	146:15	146:27	5	out->data[0]
water	146:15	0:0	6	out
op	146:18	0:0	6	->
water	146:20	0:0	6	data
op	146:24	0:0	6	[
water	146:25	0:0	6	0
op	146:26	0:0	6	]
arg	146:29	146:69	5	&s->stop_holdoff[s->stop_holdoff_offset]
op	146:29	0:0	6	&
water	146:30	0:0	6	s
op	146:31	0:0	6	->
water	146:33	0:0	6	stop_holdoff
op	146:45	0:0	6	[
water	146:46	0:0	6	s
op	146:47	0:0	6	->
water	146:49	0:0	6	stop_holdoff_offset
op	146:68	0:0	6	]
arg	147:15	147:35	5	nbs*sizeof(double)
water	147:15	0:0	6	nbs
op	147:19	0:0	6	*
op	147:21	0:0	6	sizeof
water	147:27	0:0	6	(
water	147:28	0:0	6	double
water	147:34	0:0	6	)
water	147:36	0:0	4	;
water	148:8	0:0	4	s
op	148:9	0:0	4	->
water	148:11	0:0	4	stop_holdoff_offset
op	148:31	0:0	4	+=
water	148:34	0:0	4	nbs
water	148:37	0:0	4	;
water	149:8	0:0	4	ret
op	149:12	0:0	4	=
call	149:14	149:42	4	ff_filter_frame
arg	149:30	149:37	5	outlink
water	149:30	0:0	6	outlink
arg	149:39	149:42	5	out
water	149:39	0:0	6	out
water	149:43	0:0	4	;
if	150:8	155:8	4	(s -> stop_holdoff_offset == s -> stop_holdoff_end)
cond	150:12	150:41	5	s -> stop_holdoff_offset == s -> stop_holdoff_end
water	150:12	0:0	6	s
op	150:13	0:0	6	->
water	150:15	0:0	6	stop_holdoff_offset
op	150:35	0:0	6	==
water	150:38	0:0	6	s
op	150:39	0:0	6	->
water	150:41	0:0	6	stop_holdoff_end
stmts	150:59	155:8	5	
water	150:59	0:0	6	{
water	151:12	0:0	6	s
op	151:13	0:0	6	->
water	151:15	0:0	6	stop_holdoff_offset
op	151:35	0:0	6	=
water	151:37	0:0	6	0
water	151:38	0:0	6	;
water	152:12	0:0	6	s
op	152:13	0:0	6	->
water	152:15	0:0	6	stop_holdoff_end
op	152:32	0:0	6	=
water	152:34	0:0	6	0
water	152:35	0:0	6	;
water	153:12	0:0	6	s
op	153:13	0:0	6	->
water	153:15	0:0	6	mode
op	153:20	0:0	6	=
water	153:22	0:0	6	SILENCE_COPY
water	153:34	0:0	6	;
goto	154:12	154:29	6	silence_copy
water	154:17	0:0	7	silence_copy
water	155:8	0:0	6	}
break	156:8	156:13	4	
label	157:4	157:21	4	case SILENCE_STOP :
label	158:0	158:12	4	silence_stop :
break	159:8	159:13	4	
water	160:4	0:0	4	}
call	161:4	161:21	2	av_frame_free
arg	161:18	161:21	3	&in
op	161:18	0:0	4	&
water	161:19	0:0	4	in
water	161:22	0:0	2	;
return	162:4	162:14	2	ret
water	162:11	0:0	3	ret
