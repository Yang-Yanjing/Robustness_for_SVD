func	1:0	58:0	0	static void	filter
params	1:18	0:0	1	
param	1:19	1:32	2	PP7Context *	p
param	1:34	1:46	2	uint8_t *	dst
param	1:48	1:60	2	uint8_t *	src
param	2:19	2:33	2	int	dst_stride
param	2:35	2:49	2	int	src_stride
param	3:19	3:28	2	int	width
param	3:30	3:40	2	int	height
param	4:19	4:36	2	uint8_t *	qp_store
param	4:38	4:51	2	int	qp_stride
param	4:53	4:64	2	int	is_luma
stmnts	0:0	57:4	1	
decl	6:4	6:12	2	int	x
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	y
decl	7:4	7:77	2	const int	stride
op	7:21	0:0	2	=
water	7:23	0:0	2	is_luma
water	7:31	0:0	2	?
water	7:33	0:0	2	p
op	7:34	0:0	2	->
water	7:36	0:0	2	temp_stride
water	7:48	0:0	2	:
water	7:50	0:0	2	(
water	7:51	0:0	2	(
water	7:52	0:0	2	width
op	7:58	0:0	2	+
water	7:60	0:0	2	16
op	7:63	0:0	2	+
water	7:65	0:0	2	15
water	7:67	0:0	2	)
op	7:69	0:0	2	&
water	7:71	0:0	2	(
water	7:72	0:0	2	~15
water	7:75	0:0	2	)
water	7:76	0:0	2	)
decl	8:4	8:40	2	uint8_t	*p_src
op	8:19	0:0	2	=
water	8:21	0:0	2	p
op	8:22	0:0	2	->
water	8:24	0:0	2	src
op	8:28	0:0	2	+
water	8:30	0:0	2	8
op	8:32	0:0	2	*
water	8:34	0:0	2	stride
decl	9:4	9:38	2	int16_t	*block
op	9:19	0:0	2	=
water	9:21	0:0	2	(
water	9:22	0:0	2	int16_t
op	9:30	0:0	2	*
water	9:31	0:0	2	)
water	9:32	0:0	2	p
op	9:33	0:0	2	->
water	9:35	0:0	2	src
decl	10:4	10:45	2	int16_t	*temp
op	10:19	0:0	2	=
call	10:21	10:44	3	(int16_t*)
arg	10:33	10:44	4	p->src+32
water	10:33	0:0	5	p
op	10:34	0:0	5	->
water	10:36	0:0	5	src
op	10:40	0:0	5	+
water	10:42	0:0	5	32
if	11:4	11:28	2	(! src || ! dst)
cond	11:8	11:17	3	! src || ! dst
op	11:8	0:0	4	!
water	11:9	0:0	4	src
op	11:13	0:0	4	||
op	11:16	0:0	4	!
water	11:17	0:0	4	dst
stmts	11:22	11:28	3	
return	11:22	11:28	4	
for	12:4	19:4	2	(y = 0 ;y < height;y ++)
forinit	12:9	12:14	3	y = 0 ;
water	12:9	0:0	4	y
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:20	3	y < height
water	12:16	0:0	4	y
op	12:18	0:0	4	<
water	12:20	0:0	4	height
forexpr	12:28	12:29	3	y ++
water	12:28	0:0	4	y
op	12:29	0:0	4	++
stmts	12:33	19:4	3	
water	12:33	0:0	4	{
decl	13:8	13:47	4	int	index
op	13:18	0:0	4	=
water	13:20	0:0	4	8
op	13:22	0:0	4	+
water	13:24	0:0	4	8
op	13:26	0:0	4	*
water	13:28	0:0	4	stride
op	13:35	0:0	4	+
water	13:37	0:0	4	y
op	13:39	0:0	4	*
water	13:41	0:0	4	stride
call	14:8	14:57	4	memcpy
arg	14:15	14:28	5	p_src+index
water	14:15	0:0	6	p_src
op	14:21	0:0	6	+
water	14:23	0:0	6	index
arg	14:30	14:50	5	src+y*src_stride
water	14:30	0:0	6	src
op	14:34	0:0	6	+
water	14:36	0:0	6	y
op	14:38	0:0	6	*
water	14:40	0:0	6	src_stride
arg	14:52	14:57	5	width
water	14:52	0:0	6	width
water	14:58	0:0	4	;
for	15:8	18:8	4	(x = 0 ;x < 8;x ++)
forinit	15:13	15:18	5	x = 0 ;
water	15:13	0:0	6	x
op	15:15	0:0	6	=
water	15:17	0:0	6	0
water	15:18	0:0	6	;
cond	15:20	15:24	5	x < 8
water	15:20	0:0	6	x
op	15:22	0:0	6	<
water	15:24	0:0	6	8
forexpr	15:27	15:28	5	x ++
water	15:27	0:0	6	x
op	15:28	0:0	6	++
stmts	15:32	18:8	5	
water	15:32	0:0	6	{
water	16:12	0:0	6	p_src
op	16:17	0:0	6	[
water	16:18	0:0	6	index
op	16:32	0:0	6	-
water	16:34	0:0	6	x
op	16:36	0:0	6	-
water	16:38	0:0	6	1
op	16:39	0:0	6	]
op	16:40	0:0	6	=
water	16:42	0:0	6	p_src
op	16:47	0:0	6	[
water	16:48	0:0	6	index
op	16:54	0:0	6	+
water	16:64	0:0	6	x
op	16:69	0:0	6	]
water	16:70	0:0	6	;
water	17:12	0:0	6	p_src
op	17:17	0:0	6	[
water	17:18	0:0	6	index
op	17:24	0:0	6	+
water	17:26	0:0	6	width
op	17:32	0:0	6	+
water	17:34	0:0	6	x
op	17:39	0:0	6	]
op	17:40	0:0	6	=
water	17:42	0:0	6	p_src
op	17:47	0:0	6	[
water	17:48	0:0	6	index
op	17:54	0:0	6	+
water	17:56	0:0	6	width
op	17:62	0:0	6	-
water	17:64	0:0	6	x
op	17:66	0:0	6	-
water	17:68	0:0	6	1
op	17:69	0:0	6	]
water	17:70	0:0	6	;
water	18:8	0:0	6	}
water	19:4	0:0	4	}
for	20:4	23:4	2	(y = 0 ;y < 8;y ++)
forinit	20:9	20:14	3	y = 0 ;
water	20:9	0:0	4	y
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:20	3	y < 8
water	20:16	0:0	4	y
op	20:18	0:0	4	<
water	20:20	0:0	4	8
forexpr	20:23	20:24	3	y ++
water	20:23	0:0	4	y
op	20:24	0:0	4	++
stmts	20:28	23:4	3	
water	20:28	0:0	4	{
call	21:8	21:91	4	memcpy
arg	21:15	21:48	5	p_src+(7-y)*stride
water	21:15	0:0	6	p_src
op	21:21	0:0	6	+
water	21:23	0:0	6	(
water	21:28	0:0	6	7
op	21:30	0:0	6	-
water	21:32	0:0	6	y
water	21:38	0:0	6	)
op	21:40	0:0	6	*
water	21:42	0:0	6	stride
arg	21:50	21:83	5	p_src+(y+8)*stride
water	21:50	0:0	6	p_src
op	21:56	0:0	6	+
water	21:58	0:0	6	(
water	21:63	0:0	6	y
op	21:65	0:0	6	+
water	21:67	0:0	6	8
water	21:73	0:0	6	)
op	21:75	0:0	6	*
water	21:77	0:0	6	stride
arg	21:85	21:91	5	stride
water	21:85	0:0	6	stride
water	21:92	0:0	4	;
call	22:8	22:91	4	memcpy
arg	22:15	22:48	5	p_src+(height+8+y)*stride
water	22:15	0:0	6	p_src
op	22:21	0:0	6	+
water	22:23	0:0	6	(
water	22:24	0:0	6	height
op	22:31	0:0	6	+
water	22:33	0:0	6	8
op	22:35	0:0	6	+
water	22:37	0:0	6	y
water	22:38	0:0	6	)
op	22:40	0:0	6	*
water	22:42	0:0	6	stride
arg	22:50	22:83	5	p_src+(height-y+7)*stride
water	22:50	0:0	6	p_src
op	22:56	0:0	6	+
water	22:58	0:0	6	(
water	22:59	0:0	6	height
op	22:66	0:0	6	-
water	22:68	0:0	6	y
op	22:70	0:0	6	+
water	22:72	0:0	6	7
water	22:73	0:0	6	)
op	22:75	0:0	6	*
water	22:77	0:0	6	stride
arg	22:85	22:91	5	stride
water	22:85	0:0	6	stride
water	22:92	0:0	4	;
water	23:4	0:0	4	}
for	25:4	57:4	2	(y = 0 ;y < height;y ++)
forinit	25:9	25:14	3	y = 0 ;
water	25:9	0:0	4	y
op	25:11	0:0	4	=
water	25:13	0:0	4	0
water	25:14	0:0	4	;
cond	25:16	25:20	3	y < height
water	25:16	0:0	4	y
op	25:18	0:0	4	<
water	25:20	0:0	4	height
forexpr	25:28	25:29	3	y ++
water	25:28	0:0	4	y
op	25:29	0:0	4	++
stmts	25:33	57:4	3	
water	25:33	0:0	4	{
for	26:8	31:8	4	(x = - 8 ;x < 0;x += 4)
forinit	26:13	26:19	5	x = - 8 ;
water	26:13	0:0	6	x
op	26:15	0:0	6	=
op	26:17	0:0	6	-
water	26:18	0:0	6	8
water	26:19	0:0	6	;
cond	26:21	26:25	5	x < 0
water	26:21	0:0	6	x
op	26:23	0:0	6	<
water	26:25	0:0	6	0
forexpr	26:28	26:33	5	x += 4
water	26:28	0:0	6	x
op	26:30	0:0	6	+=
water	26:33	0:0	6	4
stmts	26:36	31:8	5	
water	26:36	0:0	6	{
decl	27:12	27:73	6	const int	index
op	27:28	0:0	6	=
water	27:30	0:0	6	x
op	27:32	0:0	6	+
water	27:34	0:0	6	y
op	27:36	0:0	6	*
water	27:38	0:0	6	stride
op	27:45	0:0	6	+
water	27:47	0:0	6	(
water	27:48	0:0	6	8
op	27:50	0:0	6	-
water	27:52	0:0	6	3
water	27:53	0:0	6	)
op	27:55	0:0	6	*
water	27:57	0:0	6	(
water	27:58	0:0	6	1
op	27:60	0:0	6	+
water	27:62	0:0	6	stride
water	27:68	0:0	6	)
op	27:70	0:0	6	+
water	27:72	0:0	6	8
decl	28:12	28:41	6	uint8_t	*src
op	28:26	0:0	6	=
water	28:28	0:0	6	p_src
op	28:34	0:0	6	+
water	28:36	0:0	6	index
decl	29:12	29:40	6	int16_t	*tp
op	29:26	0:0	6	=
water	29:28	0:0	6	temp
op	29:33	0:0	6	+
water	29:35	0:0	6	4
op	29:37	0:0	6	*
water	29:39	0:0	6	x
call	30:12	30:42	6	dctA_c
arg	30:19	30:29	7	tp+4*8
water	30:19	0:0	8	tp
op	30:22	0:0	8	+
water	30:24	0:0	8	4
op	30:26	0:0	8	*
water	30:28	0:0	8	8
arg	30:31	30:34	7	src
water	30:31	0:0	8	src
arg	30:36	30:42	7	stride
water	30:36	0:0	8	stride
water	30:43	0:0	6	;
water	31:8	0:0	6	}
for	32:8	56:8	4	(x = 0 ;x < width;)
forinit	32:13	32:18	5	x = 0 ;
water	32:13	0:0	6	x
op	32:15	0:0	6	=
water	32:17	0:0	6	0
water	32:18	0:0	6	;
cond	32:20	32:24	5	x < width
water	32:20	0:0	6	x
op	32:22	0:0	6	<
water	32:24	0:0	6	width
forexpr	0:0	0:0	5	
stmts	32:33	56:8	5	
water	32:33	0:0	6	{
decl	33:12	33:39	6	const int	qps
op	33:26	0:0	6	=
water	33:28	0:0	6	3
op	33:30	0:0	6	+
water	33:32	0:0	6	is_luma
decl	34:12	34:18	6	int	qp
decl	35:12	35:41	6	int	end
op	35:20	0:0	6	=
call	35:22	35:40	7	FFMIN
arg	35:28	35:33	8	x+8
water	35:28	0:0	9	x
op	35:30	0:0	9	+
water	35:32	0:0	9	8
arg	35:35	35:40	8	width
water	35:35	0:0	9	width
if	36:12	37:26	6	(p -> qp)
cond	36:16	36:19	7	p -> qp
water	36:16	0:0	8	p
op	36:17	0:0	8	->
water	36:19	0:0	8	qp
stmts	37:16	37:26	7	
water	37:16	0:0	8	qp
op	37:19	0:0	8	=
water	37:21	0:0	8	p
op	37:22	0:0	8	->
water	37:24	0:0	8	qp
water	37:26	0:0	8	;
else	38:12	41:12	6
stmts	38:17	41:12	7	
water	38:17	0:0	8	{
water	39:16	0:0	8	qp
op	39:19	0:0	8	=
water	39:21	0:0	8	qp_store
op	39:29	0:0	8	[
water	39:31	0:0	8	(
call	39:32	39:50	8	FFMIN
arg	39:38	39:39	9	x
water	39:38	0:0	10	x
arg	39:41	39:50	9	width-1
water	39:41	0:0	10	width
op	39:47	0:0	10	-
water	39:49	0:0	10	1
op	39:52	0:0	8	>>
water	39:55	0:0	8	qps
water	39:58	0:0	8	)
op	39:60	0:0	8	+
water	39:62	0:0	8	(
call	39:63	39:82	8	FFMIN
arg	39:69	39:70	9	y
water	39:69	0:0	10	y
arg	39:72	39:82	9	height-1
water	39:72	0:0	10	height
op	39:79	0:0	10	-
water	39:81	0:0	10	1
op	39:84	0:0	8	>>
water	39:87	0:0	8	qps
water	39:90	0:0	8	)
op	39:92	0:0	8	*
water	39:94	0:0	8	qp_stride
op	39:103	0:0	8	]
water	39:104	0:0	8	;
water	40:16	0:0	8	qp
op	40:19	0:0	8	=
call	40:21	40:54	8	ff_norm_qscale
arg	40:36	40:38	9	qp
water	40:36	0:0	10	qp
arg	40:40	40:54	9	p->qscale_type
water	40:40	0:0	10	p
op	40:41	0:0	10	->
water	40:43	0:0	10	qscale_type
water	40:55	0:0	8	;
water	41:12	0:0	8	}
for	42:12	55:12	6	(;x < end;x ++)
forinit	42:17	42:17	7	;
water	42:17	0:0	8	;
cond	42:19	42:23	7	x < end
water	42:19	0:0	8	x
op	42:21	0:0	8	<
water	42:23	0:0	8	end
forexpr	42:28	42:29	7	x ++
water	42:28	0:0	8	x
op	42:29	0:0	8	++
stmts	42:33	55:12	7	
water	42:33	0:0	8	{
decl	43:16	43:77	8	const int	index
op	43:32	0:0	8	=
water	43:34	0:0	8	x
op	43:36	0:0	8	+
water	43:38	0:0	8	y
op	43:40	0:0	8	*
water	43:42	0:0	8	stride
op	43:49	0:0	8	+
water	43:51	0:0	8	(
water	43:52	0:0	8	8
op	43:54	0:0	8	-
water	43:56	0:0	8	3
water	43:57	0:0	8	)
op	43:59	0:0	8	*
water	43:61	0:0	8	(
water	43:62	0:0	8	1
op	43:64	0:0	8	+
water	43:66	0:0	8	stride
water	43:72	0:0	8	)
op	43:74	0:0	8	+
water	43:76	0:0	8	8
decl	44:16	44:44	8	uint8_t	*src
op	44:29	0:0	8	=
water	44:31	0:0	8	p_src
op	44:37	0:0	8	+
water	44:39	0:0	8	index
decl	45:16	45:43	8	int16_t	*tp
op	45:29	0:0	8	=
water	45:31	0:0	8	temp
op	45:36	0:0	8	+
water	45:38	0:0	8	4
op	45:40	0:0	8	*
water	45:42	0:0	8	x
decl	46:16	46:21	8	int	v
if	47:16	48:51	8	(( x & 3 ) == 0)
cond	47:20	47:31	9	( x & 3 ) == 0
water	47:20	0:0	10	(
water	47:21	0:0	10	x
op	47:23	0:0	10	&
water	47:25	0:0	10	3
water	47:26	0:0	10	)
op	47:28	0:0	10	==
water	47:31	0:0	10	0
stmts	48:20	48:51	9	
call	48:20	48:50	10	dctA_c
arg	48:27	48:37	11	tp+4*8
water	48:27	0:0	12	tp
op	48:30	0:0	12	+
water	48:32	0:0	12	4
op	48:34	0:0	12	*
water	48:36	0:0	12	8
arg	48:39	48:42	11	src
water	48:39	0:0	12	src
arg	48:44	48:50	11	stride
water	48:44	0:0	12	stride
water	48:51	0:0	10	;
call	49:16	49:33	8	p->dctB
arg	49:24	49:29	9	block
water	49:24	0:0	10	block
arg	49:31	49:33	9	tp
water	49:31	0:0	10	tp
water	49:34	0:0	8	;
water	50:16	0:0	8	v
op	50:18	0:0	8	=
call	50:20	50:46	8	p->requantize
arg	50:34	50:35	9	p
water	50:34	0:0	10	p
arg	50:37	50:42	9	block
water	50:37	0:0	10	block
arg	50:44	50:46	9	qp
water	50:44	0:0	10	qp
water	50:47	0:0	8	;
water	51:16	0:0	8	v
op	51:18	0:0	8	=
water	51:20	0:0	8	(
water	51:21	0:0	8	v
op	51:23	0:0	8	+
water	51:25	0:0	8	dither
op	51:31	0:0	8	[
water	51:32	0:0	8	y
op	51:34	0:0	8	&
water	51:36	0:0	8	7
op	51:37	0:0	8	]
op	51:38	0:0	8	[
water	51:39	0:0	8	x
op	51:41	0:0	8	&
water	51:43	0:0	8	7
op	51:44	0:0	8	]
water	51:45	0:0	8	)
op	51:47	0:0	8	>>
water	51:50	0:0	8	6
water	51:51	0:0	8	;
if	52:16	53:34	8	(( unsigned ) v > 255)
cond	52:20	52:34	9	( unsigned ) v > 255
water	52:20	0:0	10	(
water	52:21	0:0	10	unsigned
water	52:29	0:0	10	)
water	52:30	0:0	10	v
op	52:32	0:0	10	>
water	52:34	0:0	10	255
stmts	53:20	53:34	9	
water	53:20	0:0	10	v
op	53:22	0:0	10	=
water	53:24	0:0	10	(
op	53:25	0:0	10	-
water	53:26	0:0	10	v
water	53:27	0:0	10	)
op	53:29	0:0	10	>>
water	53:32	0:0	10	31
water	53:34	0:0	10	;
water	54:16	0:0	8	dst
op	54:19	0:0	8	[
water	54:20	0:0	8	x
op	54:22	0:0	8	+
water	54:24	0:0	8	y
op	54:26	0:0	8	*
water	54:28	0:0	8	dst_stride
op	54:38	0:0	8	]
op	54:40	0:0	8	=
water	54:42	0:0	8	v
water	54:43	0:0	8	;
water	55:12	0:0	8	}
water	56:8	0:0	6	}
water	57:4	0:0	4	}
