func	1:0	41:0	0	static int	decode_i2_frame
params	1:26	0:0	1	
param	1:27	1:42	2	FourXContext *	f
param	1:44	1:62	2	const uint8_t *	buf
param	1:64	1:74	2	int	length
stmnts	0:0	40:12	1	
decl	3:4	3:20	2	int	x
water	3:9	0:0	2	,
decl	3:4	3:20	2	int	y
water	3:12	0:0	2	,
decl	3:4	3:20	2	int	x2
water	3:16	0:0	2	,
decl	3:4	3:20	2	int	y2
decl	4:4	4:38	2	const int	width
op	4:21	0:0	2	=
water	4:23	0:0	2	f
op	4:24	0:0	2	->
water	4:26	0:0	2	avctx
op	4:31	0:0	2	->
water	4:33	0:0	2	width
decl	5:4	5:39	2	const int	height
op	5:21	0:0	2	=
water	5:23	0:0	2	f
op	5:24	0:0	2	->
water	5:26	0:0	2	avctx
op	5:31	0:0	2	->
water	5:33	0:0	2	height
decl	6:4	6:77	2	const int	mbs
op	6:21	0:0	2	=
water	6:23	0:0	2	(
call	6:24	6:41	3	FFALIGN
arg	6:32	6:37	4	width
water	6:32	0:0	5	width
arg	6:39	6:41	4	16
water	6:39	0:0	5	16
op	6:43	0:0	2	>>
water	6:46	0:0	2	4
water	6:47	0:0	2	)
op	6:49	0:0	2	*
water	6:51	0:0	2	(
call	6:52	6:70	3	FFALIGN
arg	6:60	6:66	4	height
water	6:60	0:0	5	height
arg	6:68	6:70	4	16
water	6:68	0:0	5	16
op	6:72	0:0	2	>>
water	6:75	0:0	2	4
water	6:76	0:0	2	)
decl	7:4	7:38	2	uint16_t	*dst
op	7:21	0:0	2	=
water	7:23	0:0	2	f
op	7:24	0:0	2	->
water	7:26	0:0	2	frame_buffer
decl	8:4	8:41	2	const uint8_t	*buf_end
op	8:27	0:0	2	=
water	8:29	0:0	2	buf
op	8:33	0:0	2	+
water	8:35	0:0	2	length
decl	9:4	9:21	2	GetByteContext	g3
if	10:4	13:4	2	(length < mbs * 8)
cond	10:8	10:23	3	length < mbs * 8
water	10:8	0:0	4	length
op	10:15	0:0	4	<
water	10:17	0:0	4	mbs
op	10:21	0:0	4	*
water	10:23	0:0	4	8
stmts	10:26	13:4	3	
water	10:26	0:0	4	{
call	11:8	11:64	4	av_log
arg	11:15	11:23	5	f->avctx
water	11:15	0:0	6	f
op	11:16	0:0	6	->
water	11:18	0:0	6	avctx
arg	11:25	11:37	5	AV_LOG_ERROR
water	11:25	0:0	6	AV_LOG_ERROR
arg	11:39	11:64	5	"packet size too small\n"
water	11:39	0:0	6	"packet size too small\n"
water	11:65	0:0	4	;
return	12:8	12:34	4	AVERROR_INVALIDDATA
water	12:15	0:0	5	AVERROR_INVALIDDATA
water	13:4	0:0	4	}
call	14:4	14:37	2	bytestream2_init
arg	14:21	14:24	3	&g3
op	14:21	0:0	4	&
water	14:22	0:0	4	g3
arg	14:26	14:29	3	buf
water	14:26	0:0	4	buf
arg	14:31	14:37	3	length
water	14:31	0:0	4	length
water	14:38	0:0	2	;
for	15:4	39:4	2	(y = 0 ;y < height;y += 16)
forinit	15:9	15:14	3	y = 0 ;
water	15:9	0:0	4	y
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:20	3	y < height
water	15:16	0:0	4	y
op	15:18	0:0	4	<
water	15:20	0:0	4	height
forexpr	15:28	15:33	3	y += 16
water	15:28	0:0	4	y
op	15:30	0:0	4	+=
water	15:33	0:0	4	16
stmts	15:37	39:4	3	
water	15:37	0:0	4	{
for	16:8	37:8	4	(x = 0 ;x < width;x += 16)
forinit	16:13	16:18	5	x = 0 ;
water	16:13	0:0	6	x
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:24	5	x < width
water	16:20	0:0	6	x
op	16:22	0:0	6	<
water	16:24	0:0	6	width
forexpr	16:31	16:36	5	x += 16
water	16:31	0:0	6	x
op	16:33	0:0	6	+=
water	16:36	0:0	6	16
stmts	16:40	37:8	5	
water	16:40	0:0	6	{
decl	17:12	17:47	6	unsigned int	color[4]
op	17:34	0:0	6	=
water	17:36	0:0	6	{
water	17:38	0:0	6	0
water	17:40	0:0	6	}
water	17:41	0:0	6	,
decl	17:12	17:47	6	unsigned int	bits
if	18:12	19:25	6	(buf_end - buf < 8)
cond	18:16	18:32	7	buf_end - buf < 8
water	18:16	0:0	8	buf_end
op	18:24	0:0	8	-
water	18:26	0:0	8	buf
op	18:30	0:0	8	<
water	18:32	0:0	8	8
stmts	19:16	19:25	7	
return	19:16	19:25	8	-1
op	19:23	0:0	9	-
water	19:24	0:0	9	1
water	21:12	0:0	6	color
op	21:17	0:0	6	[
water	21:18	0:0	6	0
op	21:19	0:0	6	]
op	21:21	0:0	6	=
call	21:23	21:48	6	bytestream2_get_le16u
arg	21:45	21:48	7	&g3
op	21:45	0:0	8	&
water	21:46	0:0	8	g3
water	21:49	0:0	6	;
water	22:12	0:0	6	color
op	22:17	0:0	6	[
water	22:18	0:0	6	1
op	22:19	0:0	6	]
op	22:21	0:0	6	=
call	22:23	22:48	6	bytestream2_get_le16u
arg	22:45	22:48	7	&g3
op	22:45	0:0	8	&
water	22:46	0:0	8	g3
water	22:49	0:0	6	;
if	23:12	24:61	6	(color [ 0 ] & 0 x8000)
cond	23:16	23:28	7	color [ 0 ] & 0 x8000
water	23:16	0:0	8	color
op	23:21	0:0	8	[
water	23:22	0:0	8	0
op	23:23	0:0	8	]
op	23:25	0:0	8	&
water	23:27	0:0	8	0
water	23:28	0:0	8	x8000
stmts	24:16	24:61	7	
call	24:16	24:60	8	av_log
arg	24:23	24:31	9	f->avctx
water	24:23	0:0	10	f
op	24:24	0:0	10	->
water	24:26	0:0	10	avctx
arg	24:33	24:45	9	AV_LOG_ERROR
water	24:33	0:0	10	AV_LOG_ERROR
arg	24:47	24:60	9	"unk bit 1\n"
water	24:47	0:0	10	"unk bit 1\n"
water	24:61	0:0	8	;
if	25:12	26:61	6	(color [ 1 ] & 0 x8000)
cond	25:16	25:28	7	color [ 1 ] & 0 x8000
water	25:16	0:0	8	color
op	25:21	0:0	8	[
water	25:22	0:0	8	1
op	25:23	0:0	8	]
op	25:25	0:0	8	&
water	25:27	0:0	8	0
water	25:28	0:0	8	x8000
stmts	26:16	26:61	7	
call	26:16	26:60	8	av_log
arg	26:23	26:31	9	f->avctx
water	26:23	0:0	10	f
op	26:24	0:0	10	->
water	26:26	0:0	10	avctx
arg	26:33	26:45	9	AV_LOG_ERROR
water	26:33	0:0	10	AV_LOG_ERROR
arg	26:47	26:60	9	"unk bit 2\n"
water	26:47	0:0	10	"unk bit 2\n"
water	26:61	0:0	8	;
water	27:12	0:0	6	color
op	27:17	0:0	6	[
water	27:18	0:0	6	2
op	27:19	0:0	6	]
op	27:21	0:0	6	=
call	27:23	27:45	6	mix
arg	27:27	27:35	7	color[0]
water	27:27	0:0	8	color
op	27:32	0:0	8	[
water	27:33	0:0	8	0
op	27:34	0:0	8	]
arg	27:37	27:45	7	color[1]
water	27:37	0:0	8	color
op	27:42	0:0	8	[
water	27:43	0:0	8	1
op	27:44	0:0	8	]
water	27:46	0:0	6	;
water	28:12	0:0	6	color
op	28:17	0:0	6	[
water	28:18	0:0	6	3
op	28:19	0:0	6	]
op	28:21	0:0	6	=
call	28:23	28:45	6	mix
arg	28:27	28:35	7	color[1]
water	28:27	0:0	8	color
op	28:32	0:0	8	[
water	28:33	0:0	8	1
op	28:34	0:0	8	]
arg	28:37	28:45	7	color[0]
water	28:37	0:0	8	color
op	28:42	0:0	8	[
water	28:43	0:0	8	0
op	28:44	0:0	8	]
water	28:46	0:0	6	;
water	29:12	0:0	6	bits
op	29:17	0:0	6	=
call	29:19	29:44	6	bytestream2_get_le32u
arg	29:41	29:44	7	&g3
op	29:41	0:0	8	&
water	29:42	0:0	8	g3
water	29:45	0:0	6	;
for	30:12	35:12	6	(y2 = 0 ;y2 < 16;y2 ++)
forinit	30:17	30:23	7	y2 = 0 ;
water	30:17	0:0	8	y2
op	30:20	0:0	8	=
water	30:22	0:0	8	0
water	30:23	0:0	8	;
cond	30:25	30:30	7	y2 < 16
water	30:25	0:0	8	y2
op	30:28	0:0	8	<
water	30:30	0:0	8	16
forexpr	30:34	30:36	7	y2 ++
water	30:34	0:0	8	y2
op	30:36	0:0	8	++
stmts	30:40	35:12	7	
water	30:40	0:0	8	{
for	31:16	34:16	8	(x2 = 0 ;x2 < 16;x2 ++)
forinit	31:21	31:27	9	x2 = 0 ;
water	31:21	0:0	10	x2
op	31:24	0:0	10	=
water	31:26	0:0	10	0
water	31:27	0:0	10	;
cond	31:29	31:34	9	x2 < 16
water	31:29	0:0	10	x2
op	31:32	0:0	10	<
water	31:34	0:0	10	16
forexpr	31:38	31:40	9	x2 ++
water	31:38	0:0	10	x2
op	31:40	0:0	10	++
stmts	31:44	34:16	9	
water	31:44	0:0	10	{
decl	32:20	32:61	10	int	index
op	32:30	0:0	10	=
water	32:32	0:0	10	2
op	32:34	0:0	10	*
water	32:36	0:0	10	(
water	32:37	0:0	10	x2
op	32:40	0:0	10	>>
water	32:43	0:0	10	2
water	32:44	0:0	10	)
op	32:46	0:0	10	+
water	32:48	0:0	10	8
op	32:50	0:0	10	*
water	32:52	0:0	10	(
water	32:53	0:0	10	y2
op	32:56	0:0	10	>>
water	32:59	0:0	10	2
water	32:60	0:0	10	)
water	33:20	0:0	10	dst
op	33:23	0:0	10	[
water	33:24	0:0	10	y2
op	33:27	0:0	10	*
water	33:29	0:0	10	width
op	33:35	0:0	10	+
water	33:37	0:0	10	x2
op	33:39	0:0	10	]
op	33:41	0:0	10	=
water	33:43	0:0	10	color
op	33:48	0:0	10	[
water	33:49	0:0	10	(
water	33:50	0:0	10	bits
op	33:55	0:0	10	>>
water	33:58	0:0	10	index
water	33:63	0:0	10	)
op	33:65	0:0	10	&
water	33:67	0:0	10	3
op	33:68	0:0	10	]
water	33:69	0:0	10	;
water	34:16	0:0	10	}
water	35:12	0:0	8	}
water	36:12	0:0	6	dst
op	36:16	0:0	6	+=
water	36:19	0:0	6	16
water	36:21	0:0	6	;
water	37:8	0:0	6	}
water	38:8	0:0	4	dst
op	38:12	0:0	4	+=
water	38:15	0:0	4	16
op	38:18	0:0	4	*
water	38:20	0:0	4	width
op	38:26	0:0	4	-
water	38:28	0:0	4	x
water	38:29	0:0	4	;
water	39:4	0:0	4	}
return	40:4	40:12	2	0
water	40:11	0:0	3	0
