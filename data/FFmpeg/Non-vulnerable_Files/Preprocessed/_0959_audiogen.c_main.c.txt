func	1:0	99:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	98:12	1	
decl	3:4	3:32	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:32	2	int	a
water	3:12	0:0	2	,
decl	3:4	3:32	2	int	v
water	3:15	0:0	2	,
decl	3:4	3:32	2	int	j
water	3:18	0:0	2	,
decl	3:4	3:32	2	int	f
water	3:21	0:0	2	,
decl	3:4	3:32	2	int	amp
water	3:26	0:0	2	,
decl	3:4	3:32	2	int	ampa
decl	4:4	4:25	2	unsigned int	seed
op	4:22	0:0	2	=
water	4:24	0:0	2	1
decl	5:4	5:48	2	int	tabf1[MAX_CHANNELS]
water	5:27	0:0	2	,
decl	5:4	5:48	2	int	tabf2[MAX_CHANNELS]
decl	6:4	6:26	2	int	taba[MAX_CHANNELS]
decl	7:4	7:27	2	int	sample_rate
op	7:20	0:0	2	=
water	7:22	0:0	2	44100
decl	8:4	8:23	2	int	nb_channels
op	8:20	0:0	2	=
water	8:22	0:0	2	2
decl	9:4	9:13	2	char	*ext
if	10:4	16:4	2	(argc < 2 || argc > 5)
cond	10:8	10:27	3	argc < 2 || argc > 5
water	10:8	0:0	4	argc
op	10:13	0:0	4	<
water	10:15	0:0	4	2
op	10:17	0:0	4	||
water	10:20	0:0	4	argc
op	10:25	0:0	4	>
water	10:27	0:0	4	5
stmts	10:30	16:4	3	
water	10:30	0:0	4	{
call	11:8	14:52	4	printf
arg	11:15	14:43	5	"usage: %s file [<sample rate> [<channels>] [<random seed>]]\n""generate a test raw 16 bit audio stream\n""If the file extension is .wav a WAVE header will be added.\n""default: 44100 Hz stereo\n"
water	11:15	0:0	6	"usage: %s file [<sample rate> [<channels>] [<random seed>]]\n"
water	12:15	0:0	6	"generate a test raw 16 bit audio stream\n"
water	13:15	0:0	6	"If the file extension is .wav a WAVE header will be added.\n"
water	14:15	0:0	6	"default: 44100 Hz stereo\n"
arg	14:45	14:52	5	argv[0]
water	14:45	0:0	6	argv
op	14:49	0:0	6	[
water	14:50	0:0	6	0
op	14:51	0:0	6	]
water	14:53	0:0	4	;
call	15:8	15:14	4	exit
arg	15:13	15:14	5	1
water	15:13	0:0	6	1
water	15:15	0:0	4	;
water	16:4	0:0	4	}
if	17:4	23:4	2	(argc > 2)
cond	17:8	17:15	3	argc > 2
water	17:8	0:0	4	argc
op	17:13	0:0	4	>
water	17:15	0:0	4	2
stmts	17:18	23:4	3	
water	17:18	0:0	4	{
water	18:8	0:0	4	sample_rate
op	18:20	0:0	4	=
call	18:22	18:34	4	atoi
arg	18:27	18:34	5	argv[2]
water	18:27	0:0	6	argv
op	18:31	0:0	6	[
water	18:32	0:0	6	2
op	18:33	0:0	6	]
water	18:35	0:0	4	;
if	19:8	22:8	4	(sample_rate <= 0)
cond	19:12	19:27	5	sample_rate <= 0
water	19:12	0:0	6	sample_rate
op	19:24	0:0	6	<=
water	19:27	0:0	6	0
stmts	19:30	22:8	5	
water	19:30	0:0	6	{
call	20:12	20:68	6	fprintf
arg	20:20	20:26	7	stderr
water	20:20	0:0	8	stderr
arg	20:28	20:55	7	"invalid sample rate: %d\n"
water	20:28	0:0	8	"invalid sample rate: %d\n"
arg	20:57	20:68	7	sample_rate
water	20:57	0:0	8	sample_rate
water	20:69	0:0	6	;
return	21:12	21:20	6	1
water	21:19	0:0	7	1
water	22:8	0:0	6	}
water	23:4	0:0	4	}
if	24:4	30:4	2	(argc > 3)
cond	24:8	24:15	3	argc > 3
water	24:8	0:0	4	argc
op	24:13	0:0	4	>
water	24:15	0:0	4	3
stmts	24:18	30:4	3	
water	24:18	0:0	4	{
water	25:8	0:0	4	nb_channels
op	25:20	0:0	4	=
call	25:22	25:34	4	atoi
arg	25:27	25:34	5	argv[3]
water	25:27	0:0	6	argv
op	25:31	0:0	6	[
water	25:32	0:0	6	3
op	25:33	0:0	6	]
water	25:35	0:0	4	;
if	26:8	29:8	4	(nb_channels < 1 || nb_channels > MAX_CHANNELS)
cond	26:12	26:45	5	nb_channels < 1 || nb_channels > MAX_CHANNELS
water	26:12	0:0	6	nb_channels
op	26:24	0:0	6	<
water	26:26	0:0	6	1
op	26:28	0:0	6	||
water	26:31	0:0	6	nb_channels
op	26:43	0:0	6	>
water	26:45	0:0	6	MAX_CHANNELS
stmts	26:59	29:8	5	
water	26:59	0:0	6	{
call	27:12	27:75	6	fprintf
arg	27:20	27:26	7	stderr
water	27:20	0:0	8	stderr
arg	27:28	27:62	7	"invalid number of channels: %d\n"
water	27:28	0:0	8	"invalid number of channels: %d\n"
arg	27:64	27:75	7	nb_channels
water	27:64	0:0	8	nb_channels
water	27:76	0:0	6	;
return	28:12	28:20	6	1
water	28:19	0:0	7	1
water	29:8	0:0	6	}
water	30:4	0:0	4	}
if	31:4	32:28	2	(argc > 4)
cond	31:8	31:15	3	argc > 4
water	31:8	0:0	4	argc
op	31:13	0:0	4	>
water	31:15	0:0	4	4
stmts	32:8	32:28	3	
water	32:8	0:0	4	seed
op	32:13	0:0	4	=
call	32:15	32:27	4	atoi
arg	32:20	32:27	5	argv[4]
water	32:20	0:0	6	argv
op	32:24	0:0	6	[
water	32:25	0:0	6	4
op	32:26	0:0	6	]
water	32:28	0:0	4	;
water	33:4	0:0	2	outfile
op	33:12	0:0	2	=
call	33:14	33:33	2	fopen
arg	33:20	33:27	3	argv[1]
water	33:20	0:0	4	argv
op	33:24	0:0	4	[
water	33:25	0:0	4	1
op	33:26	0:0	4	]
arg	33:29	33:33	3	"wb"
water	33:29	0:0	4	"wb"
water	33:34	0:0	2	;
if	34:4	37:4	2	(! outfile)
cond	34:8	34:9	3	! outfile
op	34:8	0:0	4	!
water	34:9	0:0	4	outfile
stmts	34:18	37:4	3	
water	34:18	0:0	4	{
call	35:8	35:22	4	perror
arg	35:15	35:22	5	argv[1]
water	35:15	0:0	6	argv
op	35:19	0:0	6	[
water	35:20	0:0	6	1
op	35:21	0:0	6	]
water	35:23	0:0	4	;
return	36:8	36:16	4	1
water	36:15	0:0	5	1
water	37:4	0:0	4	}
if	38:4	39:65	2	(( ext =strrchr (argv [ 1 ] ,'.' ) ) && !strcmp (ext ,".wav" ))
cond	38:8	38:60	3	( ext =strrchr (argv [ 1 ] ,'.' ) ) && !strcmp (ext ,".wav" )
water	38:8	0:0	4	(
water	38:9	0:0	4	ext
op	38:13	0:0	4	=
call	38:15	38:35	4	strrchr
arg	38:23	38:30	5	argv[1]
water	38:23	0:0	6	argv
op	38:27	0:0	6	[
water	38:28	0:0	6	1
op	38:29	0:0	6	]
arg	38:32	38:35	5	'.'
water	38:32	0:0	6	'.'
water	38:36	0:0	4	)
op	38:38	0:0	4	&&
op	38:41	0:0	4	!
call	38:42	38:60	4	strcmp
arg	38:49	38:52	5	ext
water	38:49	0:0	6	ext
arg	38:54	38:60	5	".wav"
water	38:54	0:0	6	".wav"
stmts	39:8	39:65	3	
call	39:8	39:64	4	put_wav_header
arg	39:23	39:34	5	sample_rate
water	39:23	0:0	6	sample_rate
arg	39:36	39:47	5	nb_channels
water	39:36	0:0	6	nb_channels
arg	39:49	39:64	5	6*sample_rate
water	39:49	0:0	6	6
op	39:51	0:0	6	*
water	39:53	0:0	6	sample_rate
water	39:65	0:0	4	;
water	41:4	0:0	2	a
op	41:6	0:0	2	=
water	41:8	0:0	2	0
water	41:9	0:0	2	;
for	42:4	47:4	2	(i = 0 ;i < 1 * sample_rate;i ++)
forinit	42:9	42:14	3	i = 0 ;
water	42:9	0:0	4	i
op	42:11	0:0	4	=
water	42:13	0:0	4	0
water	42:14	0:0	4	;
cond	42:16	42:24	3	i < 1 * sample_rate
water	42:16	0:0	4	i
op	42:18	0:0	4	<
water	42:20	0:0	4	1
op	42:22	0:0	4	*
water	42:24	0:0	4	sample_rate
forexpr	42:37	42:38	3	i ++
water	42:37	0:0	4	i
op	42:38	0:0	4	++
stmts	42:42	47:4	3	
water	42:42	0:0	4	{
water	43:8	0:0	4	v
op	43:10	0:0	4	=
water	43:12	0:0	4	(
call	43:13	43:22	4	int_cos
arg	43:21	43:22	5	a
water	43:21	0:0	6	a
op	43:24	0:0	4	*
water	43:26	0:0	4	10000
water	43:31	0:0	4	)
op	43:33	0:0	4	>>
water	43:36	0:0	4	FRAC_BITS
water	43:45	0:0	4	;
for	44:8	45:20	4	(j = 0 ;j < nb_channels;j ++)
forinit	44:13	44:18	5	j = 0 ;
water	44:13	0:0	6	j
op	44:15	0:0	6	=
water	44:17	0:0	6	0
water	44:18	0:0	6	;
cond	44:20	44:24	5	j < nb_channels
water	44:20	0:0	6	j
op	44:22	0:0	6	<
water	44:24	0:0	6	nb_channels
forexpr	44:37	44:38	5	j ++
water	44:37	0:0	6	j
op	44:38	0:0	6	++
stmts	45:12	45:20	5	
call	45:12	45:19	6	put16
arg	45:18	45:19	7	v
water	45:18	0:0	8	v
water	45:20	0:0	6	;
water	46:8	0:0	4	a
op	46:10	0:0	4	+=
water	46:13	0:0	4	(
water	46:14	0:0	4	1000
op	46:19	0:0	4	*
water	46:21	0:0	4	FRAC_ONE
water	46:29	0:0	4	)
op	46:31	0:0	4	/
water	46:33	0:0	4	sample_rate
water	46:44	0:0	4	;
water	47:4	0:0	4	}
water	49:4	0:0	2	a
op	49:6	0:0	2	=
water	49:8	0:0	2	0
water	49:9	0:0	2	;
for	50:4	56:4	2	(i = 0 ;i < 1 * sample_rate;i ++)
forinit	50:9	50:14	3	i = 0 ;
water	50:9	0:0	4	i
op	50:11	0:0	4	=
water	50:13	0:0	4	0
water	50:14	0:0	4	;
cond	50:16	50:24	3	i < 1 * sample_rate
water	50:16	0:0	4	i
op	50:18	0:0	4	<
water	50:20	0:0	4	1
op	50:22	0:0	4	*
water	50:24	0:0	4	sample_rate
forexpr	50:37	50:38	3	i ++
water	50:37	0:0	4	i
op	50:38	0:0	4	++
stmts	50:42	56:4	3	
water	50:42	0:0	4	{
water	51:8	0:0	4	v
op	51:10	0:0	4	=
water	51:12	0:0	4	(
call	51:13	51:22	4	int_cos
arg	51:21	51:22	5	a
water	51:21	0:0	6	a
op	51:24	0:0	4	*
water	51:26	0:0	4	10000
water	51:31	0:0	4	)
op	51:33	0:0	4	>>
water	51:36	0:0	4	FRAC_BITS
water	51:45	0:0	4	;
for	52:8	53:20	4	(j = 0 ;j < nb_channels;j ++)
forinit	52:13	52:18	5	j = 0 ;
water	52:13	0:0	6	j
op	52:15	0:0	6	=
water	52:17	0:0	6	0
water	52:18	0:0	6	;
cond	52:20	52:24	5	j < nb_channels
water	52:20	0:0	6	j
op	52:22	0:0	6	<
water	52:24	0:0	6	nb_channels
forexpr	52:37	52:38	5	j ++
water	52:37	0:0	6	j
op	52:38	0:0	6	++
stmts	53:12	53:20	5	
call	53:12	53:19	6	put16
arg	53:18	53:19	7	v
water	53:18	0:0	8	v
water	53:20	0:0	6	;
water	54:8	0:0	4	f
op	54:11	0:0	4	=
water	54:13	0:0	4	100
op	54:17	0:0	4	+
water	54:19	0:0	4	(
water	54:20	0:0	4	(
water	54:21	0:0	4	(
water	54:22	0:0	4	10000
op	54:28	0:0	4	-
water	54:30	0:0	4	100
water	54:33	0:0	4	)
op	54:35	0:0	4	*
water	54:37	0:0	4	i
water	54:38	0:0	4	)
op	54:40	0:0	4	/
water	54:42	0:0	4	sample_rate
water	54:53	0:0	4	)
water	54:54	0:0	4	;
water	55:8	0:0	4	a
op	55:10	0:0	4	+=
water	55:13	0:0	4	(
water	55:14	0:0	4	f
op	55:16	0:0	4	*
water	55:18	0:0	4	FRAC_ONE
water	55:26	0:0	4	)
op	55:28	0:0	4	/
water	55:30	0:0	4	sample_rate
water	55:41	0:0	4	;
water	56:4	0:0	4	}
for	58:4	62:4	2	(i = 0 ;i < sample_rate / 2;i ++)
forinit	58:9	58:14	3	i = 0 ;
water	58:9	0:0	4	i
op	58:11	0:0	4	=
water	58:13	0:0	4	0
water	58:14	0:0	4	;
cond	58:16	58:34	3	i < sample_rate / 2
water	58:16	0:0	4	i
op	58:18	0:0	4	<
water	58:20	0:0	4	sample_rate
op	58:32	0:0	4	/
water	58:34	0:0	4	2
forexpr	58:37	58:38	3	i ++
water	58:37	0:0	4	i
op	58:38	0:0	4	++
stmts	58:42	62:4	3	
water	58:42	0:0	4	{
water	59:8	0:0	4	v
op	59:10	0:0	4	=
call	59:12	59:30	4	myrnd
arg	59:18	59:23	5	&seed
op	59:18	0:0	6	&
water	59:19	0:0	6	seed
arg	59:25	59:30	5	20000
water	59:25	0:0	6	20000
op	59:32	0:0	4	-
water	59:34	0:0	4	10000
water	59:39	0:0	4	;
for	60:8	61:20	4	(j = 0 ;j < nb_channels;j ++)
forinit	60:13	60:18	5	j = 0 ;
water	60:13	0:0	6	j
op	60:15	0:0	6	=
water	60:17	0:0	6	0
water	60:18	0:0	6	;
cond	60:20	60:24	5	j < nb_channels
water	60:20	0:0	6	j
op	60:22	0:0	6	<
water	60:24	0:0	6	nb_channels
forexpr	60:37	60:38	5	j ++
water	60:37	0:0	6	j
op	60:38	0:0	6	++
stmts	61:12	61:20	5	
call	61:12	61:19	6	put16
arg	61:18	61:19	7	v
water	61:18	0:0	8	v
water	61:20	0:0	6	;
water	62:4	0:0	4	}
for	64:4	68:4	2	(i = 0 ;i < sample_rate / 2;i ++)
forinit	64:9	64:14	3	i = 0 ;
water	64:9	0:0	4	i
op	64:11	0:0	4	=
water	64:13	0:0	4	0
water	64:14	0:0	4	;
cond	64:16	64:34	3	i < sample_rate / 2
water	64:16	0:0	4	i
op	64:18	0:0	4	<
water	64:20	0:0	4	sample_rate
op	64:32	0:0	4	/
water	64:34	0:0	4	2
forexpr	64:37	64:38	3	i ++
water	64:37	0:0	4	i
op	64:38	0:0	4	++
stmts	64:42	68:4	3	
water	64:42	0:0	4	{
water	65:8	0:0	4	v
op	65:10	0:0	4	=
call	65:12	65:30	4	myrnd
arg	65:18	65:23	5	&seed
op	65:18	0:0	6	&
water	65:19	0:0	6	seed
arg	65:25	65:30	5	65535
water	65:25	0:0	6	65535
op	65:32	0:0	4	-
water	65:34	0:0	4	32768
water	65:39	0:0	4	;
for	66:8	67:20	4	(j = 0 ;j < nb_channels;j ++)
forinit	66:13	66:18	5	j = 0 ;
water	66:13	0:0	6	j
op	66:15	0:0	6	=
water	66:17	0:0	6	0
water	66:18	0:0	6	;
cond	66:20	66:24	5	j < nb_channels
water	66:20	0:0	6	j
op	66:22	0:0	6	<
water	66:24	0:0	6	nb_channels
forexpr	66:37	66:38	5	j ++
water	66:37	0:0	6	j
op	66:38	0:0	6	++
stmts	67:12	67:20	5	
call	67:12	67:19	6	put16
arg	67:18	67:19	7	v
water	67:18	0:0	8	v
water	67:20	0:0	6	;
water	68:4	0:0	4	}
for	70:4	74:4	2	(j = 0 ;j < nb_channels;j ++)
forinit	70:9	70:14	3	j = 0 ;
water	70:9	0:0	4	j
op	70:11	0:0	4	=
water	70:13	0:0	4	0
water	70:14	0:0	4	;
cond	70:16	70:20	3	j < nb_channels
water	70:16	0:0	4	j
op	70:18	0:0	4	<
water	70:20	0:0	4	nb_channels
forexpr	70:33	70:34	3	j ++
water	70:33	0:0	4	j
op	70:34	0:0	4	++
stmts	70:38	74:4	3	
water	70:38	0:0	4	{
water	71:8	0:0	4	taba
op	71:12	0:0	4	[
water	71:13	0:0	4	j
op	71:14	0:0	4	]
op	71:17	0:0	4	=
water	71:19	0:0	4	0
water	71:20	0:0	4	;
water	72:8	0:0	4	tabf1
op	72:13	0:0	4	[
water	72:14	0:0	4	j
op	72:15	0:0	4	]
op	72:17	0:0	4	=
water	72:19	0:0	4	100
op	72:23	0:0	4	+
call	72:25	72:42	4	myrnd
arg	72:31	72:36	5	&seed
op	72:31	0:0	6	&
water	72:32	0:0	6	seed
arg	72:38	72:42	5	5000
water	72:38	0:0	6	5000
water	72:43	0:0	4	;
water	73:8	0:0	4	tabf2
op	73:13	0:0	4	[
water	73:14	0:0	4	j
op	73:15	0:0	4	]
op	73:17	0:0	4	=
water	73:19	0:0	4	100
op	73:23	0:0	4	+
call	73:25	73:42	4	myrnd
arg	73:31	73:36	5	&seed
op	73:31	0:0	6	&
water	73:32	0:0	6	seed
arg	73:38	73:42	5	5000
water	73:38	0:0	6	5000
water	73:43	0:0	4	;
water	74:4	0:0	4	}
for	75:4	82:4	2	(i = 0 ;i < 1 * sample_rate;i ++)
forinit	75:9	75:14	3	i = 0 ;
water	75:9	0:0	4	i
op	75:11	0:0	4	=
water	75:13	0:0	4	0
water	75:14	0:0	4	;
cond	75:16	75:24	3	i < 1 * sample_rate
water	75:16	0:0	4	i
op	75:18	0:0	4	<
water	75:20	0:0	4	1
op	75:22	0:0	4	*
water	75:24	0:0	4	sample_rate
forexpr	75:37	75:38	3	i ++
water	75:37	0:0	4	i
op	75:38	0:0	4	++
stmts	75:42	82:4	3	
water	75:42	0:0	4	{
for	76:8	81:8	4	(j = 0 ;j < nb_channels;j ++)
forinit	76:13	76:18	5	j = 0 ;
water	76:13	0:0	6	j
op	76:15	0:0	6	=
water	76:17	0:0	6	0
water	76:18	0:0	6	;
cond	76:20	76:24	5	j < nb_channels
water	76:20	0:0	6	j
op	76:22	0:0	6	<
water	76:24	0:0	6	nb_channels
forexpr	76:37	76:38	5	j ++
water	76:37	0:0	6	j
op	76:38	0:0	6	++
stmts	76:42	81:8	5	
water	76:42	0:0	6	{
water	77:12	0:0	6	v
op	77:14	0:0	6	=
water	77:16	0:0	6	(
call	77:17	77:32	6	int_cos
arg	77:25	77:32	7	taba[j]
water	77:25	0:0	8	taba
op	77:29	0:0	8	[
water	77:30	0:0	8	j
op	77:31	0:0	8	]
op	77:34	0:0	6	*
water	77:36	0:0	6	10000
water	77:41	0:0	6	)
op	77:43	0:0	6	>>
water	77:46	0:0	6	FRAC_BITS
water	77:55	0:0	6	;
call	78:12	78:19	6	put16
arg	78:18	78:19	7	v
water	78:18	0:0	8	v
water	78:20	0:0	6	;
water	79:12	0:0	6	f
op	79:21	0:0	6	=
water	79:23	0:0	6	tabf1
op	79:28	0:0	6	[
water	79:29	0:0	6	j
op	79:30	0:0	6	]
op	79:32	0:0	6	+
water	79:34	0:0	6	(
water	79:35	0:0	6	(
water	79:36	0:0	6	(
water	79:37	0:0	6	tabf2
op	79:42	0:0	6	[
water	79:43	0:0	6	j
op	79:44	0:0	6	]
op	79:46	0:0	6	-
water	79:48	0:0	6	tabf1
op	79:53	0:0	6	[
water	79:54	0:0	6	j
op	79:55	0:0	6	]
water	79:56	0:0	6	)
op	79:58	0:0	6	*
water	79:60	0:0	6	i
water	79:61	0:0	6	)
op	79:63	0:0	6	/
water	79:65	0:0	6	sample_rate
water	79:76	0:0	6	)
water	79:77	0:0	6	;
water	80:12	0:0	6	taba
op	80:16	0:0	6	[
water	80:17	0:0	6	j
op	80:18	0:0	6	]
op	80:20	0:0	6	+=
water	80:23	0:0	6	(
water	80:24	0:0	6	f
op	80:26	0:0	6	*
water	80:28	0:0	6	FRAC_ONE
water	80:36	0:0	6	)
op	80:38	0:0	6	/
water	80:40	0:0	6	sample_rate
water	80:51	0:0	6	;
water	81:8	0:0	6	}
water	82:4	0:0	4	}
water	84:4	0:0	2	a
op	84:9	0:0	2	=
water	84:11	0:0	2	0
water	84:12	0:0	2	;
water	85:4	0:0	2	ampa
op	85:9	0:0	2	=
water	85:11	0:0	2	0
water	85:12	0:0	2	;
for	86:4	96:4	2	(i = 0 ;i < 2 * sample_rate;i ++)
forinit	86:9	86:14	3	i = 0 ;
water	86:9	0:0	4	i
op	86:11	0:0	4	=
water	86:13	0:0	4	0
water	86:14	0:0	4	;
cond	86:16	86:24	3	i < 2 * sample_rate
water	86:16	0:0	4	i
op	86:18	0:0	4	<
water	86:20	0:0	4	2
op	86:22	0:0	4	*
water	86:24	0:0	4	sample_rate
forexpr	86:37	86:38	3	i ++
water	86:37	0:0	4	i
op	86:38	0:0	4	++
stmts	86:42	96:4	3	
water	86:42	0:0	4	{
for	87:8	95:8	4	(j = 0 ;j < nb_channels;j ++)
forinit	87:13	87:18	5	j = 0 ;
water	87:13	0:0	6	j
op	87:15	0:0	6	=
water	87:17	0:0	6	0
water	87:18	0:0	6	;
cond	87:20	87:24	5	j < nb_channels
water	87:20	0:0	6	j
op	87:22	0:0	6	<
water	87:24	0:0	6	nb_channels
forexpr	87:37	87:38	5	j ++
water	87:37	0:0	6	j
op	87:38	0:0	6	++
stmts	87:42	95:8	5	
water	87:42	0:0	6	{
water	88:12	0:0	6	amp
op	88:16	0:0	6	=
water	88:18	0:0	6	(
water	88:19	0:0	6	(
water	88:20	0:0	6	FRAC_ONE
op	88:29	0:0	6	+
call	88:31	88:43	6	int_cos
arg	88:39	88:43	7	ampa
water	88:39	0:0	8	ampa
water	88:44	0:0	6	)
op	88:46	0:0	6	*
water	88:48	0:0	6	5000
water	88:52	0:0	6	)
op	88:54	0:0	6	>>
water	88:57	0:0	6	FRAC_BITS
water	88:66	0:0	6	;
if	89:12	90:33	6	(j & 1)
cond	89:16	89:20	7	j & 1
water	89:16	0:0	8	j
op	89:18	0:0	8	&
water	89:20	0:0	8	1
stmts	90:16	90:33	7	
water	90:16	0:0	8	amp
op	90:20	0:0	8	=
water	90:22	0:0	8	10000
op	90:28	0:0	8	-
water	90:30	0:0	8	amp
water	90:33	0:0	8	;
water	91:12	0:0	6	v
op	91:14	0:0	6	=
water	91:16	0:0	6	(
call	91:17	91:26	6	int_cos
arg	91:25	91:26	7	a
water	91:25	0:0	8	a
op	91:28	0:0	6	*
water	91:30	0:0	6	amp
water	91:33	0:0	6	)
op	91:35	0:0	6	>>
water	91:38	0:0	6	FRAC_BITS
water	91:47	0:0	6	;
call	92:12	92:19	6	put16
arg	92:18	92:19	7	v
water	92:18	0:0	8	v
water	92:20	0:0	6	;
water	93:12	0:0	6	a
op	93:17	0:0	6	+=
water	93:20	0:0	6	(
water	93:21	0:0	6	500
op	93:25	0:0	6	*
water	93:27	0:0	6	FRAC_ONE
water	93:35	0:0	6	)
op	93:37	0:0	6	/
water	93:39	0:0	6	sample_rate
water	93:50	0:0	6	;
water	94:12	0:0	6	ampa
op	94:17	0:0	6	+=
water	94:20	0:0	6	(
water	94:21	0:0	6	2
op	94:23	0:0	6	*
water	94:25	0:0	6	FRAC_ONE
water	94:33	0:0	6	)
op	94:35	0:0	6	/
water	94:37	0:0	6	sample_rate
water	94:48	0:0	6	;
water	95:8	0:0	6	}
water	96:4	0:0	4	}
call	97:4	97:18	2	fclose
arg	97:11	97:18	3	outfile
water	97:11	0:0	4	outfile
water	97:19	0:0	2	;
return	98:4	98:12	2	0
water	98:11	0:0	3	0
