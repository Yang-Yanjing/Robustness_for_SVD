func	1:0	105:0	0	static int	config_props
params	1:23	0:0	1	
param	1:24	1:42	2	AVFilterLink *	link
stmnts	0:0	104:12	1	
decl	3:4	3:36	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	link
op	3:31	0:0	2	->
water	3:33	0:0	2	dst
decl	4:4	4:31	2	PanContext	*pan
op	4:20	0:0	2	=
water	4:22	0:0	2	ctx
op	4:25	0:0	2	->
water	4:27	0:0	2	priv
decl	5:4	5:24	2	char	buf[1024]
water	5:18	0:0	2	,
decl	5:4	5:24	2	char	*cur
decl	6:4	6:18	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:18	2	int	j
water	6:12	0:0	2	,
decl	6:4	6:18	2	int	k
water	6:15	0:0	2	,
decl	6:4	6:18	2	int	r
decl	7:4	7:12	2	double	t
if	8:4	17:4	2	(pan -> need_renumber)
cond	8:8	8:13	3	pan -> need_renumber
water	8:8	0:0	4	pan
op	8:11	0:0	4	->
water	8:13	0:0	4	need_renumber
stmts	8:28	17:4	3	
water	8:28	0:0	4	{
for	10:8	16:8	4	(i = j = 0 ;i < MAX_CHANNELS;i ++)
forinit	10:13	10:22	5	i = j = 0 ;
water	10:13	0:0	6	i
op	10:15	0:0	6	=
water	10:17	0:0	6	j
op	10:19	0:0	6	=
water	10:21	0:0	6	0
water	10:22	0:0	6	;
cond	10:24	10:28	5	i < MAX_CHANNELS
water	10:24	0:0	6	i
op	10:26	0:0	6	<
water	10:28	0:0	6	MAX_CHANNELS
forexpr	10:42	10:43	5	i ++
water	10:42	0:0	6	i
op	10:43	0:0	6	++
stmts	10:47	16:8	5	
water	10:47	0:0	6	{
if	11:12	15:12	6	(( link -> channel_layout >> i ) & 1)
cond	11:16	11:46	7	( link -> channel_layout >> i ) & 1
water	11:16	0:0	8	(
water	11:17	0:0	8	link
op	11:21	0:0	8	->
water	11:23	0:0	8	channel_layout
op	11:38	0:0	8	>>
water	11:41	0:0	8	i
water	11:42	0:0	8	)
op	11:44	0:0	8	&
water	11:46	0:0	8	1
stmts	11:49	15:12	7	
water	11:49	0:0	8	{
for	12:16	13:53	8	(k = 0 ;k < pan -> nb_output_channels;k ++)
forinit	12:21	12:26	9	k = 0 ;
water	12:21	0:0	10	k
op	12:23	0:0	10	=
water	12:25	0:0	10	0
water	12:26	0:0	10	;
cond	12:28	12:37	9	k < pan -> nb_output_channels
water	12:28	0:0	10	k
op	12:30	0:0	10	<
water	12:32	0:0	10	pan
op	12:35	0:0	10	->
water	12:37	0:0	10	nb_output_channels
forexpr	12:57	12:58	9	k ++
water	12:57	0:0	10	k
op	12:58	0:0	10	++
stmts	13:20	13:53	9	
water	13:20	0:0	10	pan
op	13:23	0:0	10	->
water	13:25	0:0	10	gain
op	13:29	0:0	10	[
water	13:30	0:0	10	k
op	13:31	0:0	10	]
op	13:32	0:0	10	[
water	13:33	0:0	10	j
op	13:34	0:0	10	]
op	13:36	0:0	10	=
water	13:38	0:0	10	pan
op	13:41	0:0	10	->
water	13:43	0:0	10	gain
op	13:47	0:0	10	[
water	13:48	0:0	10	k
op	13:49	0:0	10	]
op	13:50	0:0	10	[
water	13:51	0:0	10	i
op	13:52	0:0	10	]
water	13:53	0:0	10	;
water	14:16	0:0	8	j
op	14:17	0:0	8	++
water	14:19	0:0	8	;
water	15:12	0:0	8	}
water	16:8	0:0	6	}
water	17:4	0:0	4	}
if	20:4	26:4	2	(link -> channels > MAX_CHANNELS || pan -> nb_output_channels > MAX_CHANNELS)
cond	20:8	21:34	3	link -> channels > MAX_CHANNELS || pan -> nb_output_channels > MAX_CHANNELS
water	20:8	0:0	4	link
op	20:12	0:0	4	->
water	20:14	0:0	4	channels
op	20:23	0:0	4	>
water	20:25	0:0	4	MAX_CHANNELS
op	20:38	0:0	4	||
water	21:8	0:0	4	pan
op	21:11	0:0	4	->
water	21:13	0:0	4	nb_output_channels
op	21:32	0:0	4	>
water	21:34	0:0	4	MAX_CHANNELS
stmts	21:48	26:4	3	
water	21:48	0:0	4	{
call	22:8	24:69	4	av_log
arg	22:15	22:18	5	ctx
water	22:15	0:0	6	ctx
arg	22:20	22:32	5	AV_LOG_ERROR
water	22:20	0:0	6	AV_LOG_ERROR
arg	23:15	24:55	5	"af_pan support a maximum of %d channels. ""Feel free to ask for a higher limit.\n"
water	23:15	0:0	6	"af_pan support a maximum of %d channels. "
water	24:15	0:0	6	"Feel free to ask for a higher limit.\n"
arg	24:57	24:69	5	MAX_CHANNELS
water	24:57	0:0	6	MAX_CHANNELS
water	24:70	0:0	4	;
return	25:8	25:35	4	AVERROR_PATCHWELCOME
water	25:15	0:0	5	AVERROR_PATCHWELCOME
water	26:4	0:0	4	}
water	28:4	0:0	2	pan
op	28:7	0:0	2	->
water	28:9	0:0	2	swr
op	28:13	0:0	2	=
call	28:15	31:40	2	swr_alloc_set_opts
arg	28:34	28:42	3	pan->swr
water	28:34	0:0	4	pan
op	28:37	0:0	4	->
water	28:39	0:0	4	swr
arg	29:34	29:57	3	pan->out_channel_layout
water	29:34	0:0	4	pan
op	29:37	0:0	4	->
water	29:39	0:0	4	out_channel_layout
arg	29:59	29:71	3	link->format
water	29:59	0:0	4	link
op	29:63	0:0	4	->
water	29:65	0:0	4	format
arg	29:73	29:90	3	link->sample_rate
water	29:73	0:0	4	link
op	29:77	0:0	4	->
water	29:79	0:0	4	sample_rate
arg	30:34	30:54	3	link->channel_layout
water	30:34	0:0	4	link
op	30:38	0:0	4	->
water	30:40	0:0	4	channel_layout
arg	30:59	30:71	3	link->format
water	30:59	0:0	4	link
op	30:63	0:0	4	->
water	30:65	0:0	4	format
arg	30:73	30:90	3	link->sample_rate
water	30:73	0:0	4	link
op	30:77	0:0	4	->
water	30:79	0:0	4	sample_rate
arg	31:34	31:35	3	0
water	31:34	0:0	4	0
arg	31:37	31:40	3	ctx
water	31:37	0:0	4	ctx
water	31:41	0:0	2	;
if	32:4	33:30	2	(! pan -> swr)
cond	32:8	32:14	3	! pan -> swr
op	32:8	0:0	4	!
water	32:9	0:0	4	pan
op	32:12	0:0	4	->
water	32:14	0:0	4	swr
stmts	33:8	33:30	3	
return	33:8	33:30	4	AVERROR(ENOMEM)
call	33:15	33:29	5	AVERROR
arg	33:23	33:29	6	ENOMEM
water	33:23	0:0	7	ENOMEM
if	34:4	37:4	2	(! link -> channel_layout)
cond	34:8	34:15	3	! link -> channel_layout
op	34:8	0:0	4	!
water	34:9	0:0	4	link
op	34:13	0:0	4	->
water	34:15	0:0	4	channel_layout
stmts	34:31	37:4	3	
water	34:31	0:0	4	{
if	35:8	36:34	4	(av_opt_set_int (pan -> swr ,"ich" ,link -> channels ,0 ) < 0)
cond	35:12	35:65	5	av_opt_set_int (pan -> swr ,"ich" ,link -> channels ,0 ) < 0
call	35:12	35:61	6	av_opt_set_int
arg	35:27	35:35	7	pan->swr
water	35:27	0:0	8	pan
op	35:30	0:0	8	->
water	35:32	0:0	8	swr
arg	35:37	35:42	7	"ich"
water	35:37	0:0	8	"ich"
arg	35:44	35:58	7	link->channels
water	35:44	0:0	8	link
op	35:48	0:0	8	->
water	35:50	0:0	8	channels
arg	35:60	35:61	7	0
water	35:60	0:0	8	0
op	35:63	0:0	6	<
water	35:65	0:0	6	0
stmts	36:12	36:34	5	
return	36:12	36:34	6	AVERROR(EINVAL)
call	36:19	36:33	7	AVERROR
arg	36:27	36:33	8	EINVAL
water	36:27	0:0	9	EINVAL
water	37:4	0:0	4	}
if	38:4	41:4	2	(! pan -> out_channel_layout)
cond	38:8	38:14	3	! pan -> out_channel_layout
op	38:8	0:0	4	!
water	38:9	0:0	4	pan
op	38:12	0:0	4	->
water	38:14	0:0	4	out_channel_layout
stmts	38:34	41:4	3	
water	38:34	0:0	4	{
if	39:8	40:34	4	(av_opt_set_int (pan -> swr ,"och" ,pan -> nb_output_channels ,0 ) < 0)
cond	39:12	39:74	5	av_opt_set_int (pan -> swr ,"och" ,pan -> nb_output_channels ,0 ) < 0
call	39:12	39:70	6	av_opt_set_int
arg	39:27	39:35	7	pan->swr
water	39:27	0:0	8	pan
op	39:30	0:0	8	->
water	39:32	0:0	8	swr
arg	39:37	39:42	7	"och"
water	39:37	0:0	8	"och"
arg	39:44	39:67	7	pan->nb_output_channels
water	39:44	0:0	8	pan
op	39:47	0:0	8	->
water	39:49	0:0	8	nb_output_channels
arg	39:69	39:70	7	0
water	39:69	0:0	8	0
op	39:72	0:0	6	<
water	39:74	0:0	6	0
stmts	40:12	40:34	5	
return	40:12	40:34	6	AVERROR(EINVAL)
call	40:19	40:33	7	AVERROR
arg	40:27	40:33	8	EINVAL
water	40:27	0:0	9	EINVAL
water	41:4	0:0	4	}
if	43:4	58:4	2	(pan -> pure_gains)
cond	43:8	43:13	3	pan -> pure_gains
water	43:8	0:0	4	pan
op	43:11	0:0	4	->
water	43:13	0:0	4	pure_gains
stmts	43:25	58:4	3	
water	43:25	0:0	4	{
for	45:8	54:8	4	(i = 0 ;i < pan -> nb_output_channels;i ++)
forinit	45:13	45:18	5	i = 0 ;
water	45:13	0:0	6	i
op	45:15	0:0	6	=
water	45:17	0:0	6	0
water	45:18	0:0	6	;
cond	45:20	45:29	5	i < pan -> nb_output_channels
water	45:20	0:0	6	i
op	45:22	0:0	6	<
water	45:24	0:0	6	pan
op	45:27	0:0	6	->
water	45:29	0:0	6	nb_output_channels
forexpr	45:49	45:50	5	i ++
water	45:49	0:0	6	i
op	45:50	0:0	6	++
stmts	45:54	54:8	5	
water	45:54	0:0	6	{
decl	46:12	46:26	6	int	ch_id
op	46:22	0:0	6	=
op	46:24	0:0	6	-
water	46:25	0:0	6	1
for	47:12	52:12	6	(j = 0 ;j < link -> channels;j ++)
forinit	47:17	47:22	7	j = 0 ;
water	47:17	0:0	8	j
op	47:19	0:0	8	=
water	47:21	0:0	8	0
water	47:22	0:0	8	;
cond	47:24	47:34	7	j < link -> channels
water	47:24	0:0	8	j
op	47:26	0:0	8	<
water	47:28	0:0	8	link
op	47:32	0:0	8	->
water	47:34	0:0	8	channels
forexpr	47:44	47:45	7	j ++
water	47:44	0:0	8	j
op	47:45	0:0	8	++
stmts	47:49	52:12	7	
water	47:49	0:0	8	{
if	48:16	51:16	8	(pan -> gain [ i ] [ j ])
cond	48:20	48:34	9	pan -> gain [ i ] [ j ]
water	48:20	0:0	10	pan
op	48:23	0:0	10	->
water	48:25	0:0	10	gain
op	48:29	0:0	10	[
water	48:30	0:0	10	i
op	48:31	0:0	10	]
op	48:32	0:0	10	[
water	48:33	0:0	10	j
op	48:34	0:0	10	]
stmts	48:37	51:16	9	
water	48:37	0:0	10	{
water	49:20	0:0	10	ch_id
op	49:26	0:0	10	=
water	49:28	0:0	10	j
water	49:29	0:0	10	;
break	50:20	50:25	10	
water	51:16	0:0	10	}
water	52:12	0:0	8	}
water	53:12	0:0	6	pan
op	53:15	0:0	6	->
water	53:17	0:0	6	channel_map
op	53:28	0:0	6	[
water	53:29	0:0	6	i
op	53:30	0:0	6	]
op	53:32	0:0	6	=
water	53:34	0:0	6	ch_id
water	53:39	0:0	6	;
water	54:8	0:0	6	}
call	55:8	55:66	4	av_opt_set_int
arg	55:23	55:31	5	pan->swr
water	55:23	0:0	6	pan
op	55:26	0:0	6	->
water	55:28	0:0	6	swr
arg	55:33	55:38	5	"icl"
water	55:33	0:0	6	"icl"
arg	55:40	55:63	5	pan->out_channel_layout
water	55:40	0:0	6	pan
op	55:43	0:0	6	->
water	55:45	0:0	6	out_channel_layout
arg	55:65	55:66	5	0
water	55:65	0:0	6	0
water	55:67	0:0	4	;
call	56:8	56:66	4	av_opt_set_int
arg	56:23	56:31	5	pan->swr
water	56:23	0:0	6	pan
op	56:26	0:0	6	->
water	56:28	0:0	6	swr
arg	56:33	56:38	5	"uch"
water	56:33	0:0	6	"uch"
arg	56:40	56:63	5	pan->nb_output_channels
water	56:40	0:0	6	pan
op	56:43	0:0	6	->
water	56:45	0:0	6	nb_output_channels
arg	56:65	56:66	5	0
water	56:65	0:0	6	0
water	56:67	0:0	4	;
call	57:8	57:58	4	swr_set_channel_mapping
arg	57:32	57:40	5	pan->swr
water	57:32	0:0	6	pan
op	57:35	0:0	6	->
water	57:37	0:0	6	swr
arg	57:42	57:58	5	pan->channel_map
water	57:42	0:0	6	pan
op	57:45	0:0	6	->
water	57:47	0:0	6	channel_map
water	57:59	0:0	4	;
water	58:4	0:0	4	}
else	58:6	79:4	2
stmts	58:11	79:4	3	
water	58:11	0:0	4	{
for	60:8	75:8	4	(i = 0 ;i < pan -> nb_output_channels;i ++)
forinit	60:13	60:18	5	i = 0 ;
water	60:13	0:0	6	i
op	60:15	0:0	6	=
water	60:17	0:0	6	0
water	60:18	0:0	6	;
cond	60:20	60:29	5	i < pan -> nb_output_channels
water	60:20	0:0	6	i
op	60:22	0:0	6	<
water	60:24	0:0	6	pan
op	60:27	0:0	6	->
water	60:29	0:0	6	nb_output_channels
forexpr	60:49	60:50	5	i ++
water	60:49	0:0	6	i
op	60:50	0:0	6	++
stmts	60:54	75:8	5	
water	60:54	0:0	6	{
if	61:12	62:24	6	(! ( ( pan -> need_renorm >> i ) & 1 ))
cond	61:16	61:45	7	! ( ( pan -> need_renorm >> i ) & 1 )
op	61:16	0:0	8	!
water	61:17	0:0	8	(
water	61:18	0:0	8	(
water	61:19	0:0	8	pan
op	61:22	0:0	8	->
water	61:24	0:0	8	need_renorm
op	61:36	0:0	8	>>
water	61:39	0:0	8	i
water	61:40	0:0	8	)
op	61:42	0:0	8	&
water	61:44	0:0	8	1
water	61:45	0:0	8	)
stmts	62:16	62:24	7	
continue	62:16	62:24	8	
water	63:12	0:0	6	t
op	63:14	0:0	6	=
water	63:16	0:0	6	0
water	63:17	0:0	6	;
for	64:12	65:36	6	(j = 0 ;j < link -> channels;j ++)
forinit	64:17	64:22	7	j = 0 ;
water	64:17	0:0	8	j
op	64:19	0:0	8	=
water	64:21	0:0	8	0
water	64:22	0:0	8	;
cond	64:24	64:34	7	j < link -> channels
water	64:24	0:0	8	j
op	64:26	0:0	8	<
water	64:28	0:0	8	link
op	64:32	0:0	8	->
water	64:34	0:0	8	channels
forexpr	64:44	64:45	7	j ++
water	64:44	0:0	8	j
op	64:45	0:0	8	++
stmts	65:16	65:36	7	
water	65:16	0:0	8	t
op	65:18	0:0	8	+=
water	65:21	0:0	8	pan
op	65:24	0:0	8	->
water	65:26	0:0	8	gain
op	65:30	0:0	8	[
water	65:31	0:0	8	i
op	65:32	0:0	8	]
op	65:33	0:0	8	[
water	65:34	0:0	8	j
op	65:35	0:0	8	]
water	65:36	0:0	8	;
if	66:12	72:12	6	(t > - 1 E - 5 && t < 1 E - 5)
cond	66:16	66:36	7	t > - 1 E - 5 && t < 1 E - 5
water	66:16	0:0	8	t
op	66:18	0:0	8	>
op	66:20	0:0	8	-
water	66:21	0:0	8	1
water	66:22	0:0	8	E
op	66:23	0:0	8	-
water	66:24	0:0	8	5
op	66:26	0:0	8	&&
water	66:29	0:0	8	t
op	66:31	0:0	8	<
water	66:33	0:0	8	1
water	66:34	0:0	8	E
op	66:35	0:0	8	-
water	66:36	0:0	8	5
stmts	66:39	72:12	7	
water	66:39	0:0	8	{
if	68:16	70:75	8	(t)
cond	68:20	68:20	9	t
water	68:20	0:0	10	t
stmts	69:20	70:75	9	
call	69:20	70:74	10	av_log
arg	69:27	69:30	11	ctx
water	69:27	0:0	12	ctx
arg	69:32	69:46	11	AV_LOG_WARNING
water	69:32	0:0	12	AV_LOG_WARNING
arg	70:27	70:74	11	"Degenerate coefficients while renormalizing\n"
water	70:27	0:0	12	"Degenerate coefficients while renormalizing\n"
water	70:75	0:0	10	;
continue	71:16	71:24	8	
water	72:12	0:0	8	}
for	73:12	74:36	6	(j = 0 ;j < link -> channels;j ++)
forinit	73:17	73:22	7	j = 0 ;
water	73:17	0:0	8	j
op	73:19	0:0	8	=
water	73:21	0:0	8	0
water	73:22	0:0	8	;
cond	73:24	73:34	7	j < link -> channels
water	73:24	0:0	8	j
op	73:26	0:0	8	<
water	73:28	0:0	8	link
op	73:32	0:0	8	->
water	73:34	0:0	8	channels
forexpr	73:44	73:45	7	j ++
water	73:44	0:0	8	j
op	73:45	0:0	8	++
stmts	74:16	74:36	7	
water	74:16	0:0	8	pan
op	74:19	0:0	8	->
water	74:21	0:0	8	gain
op	74:25	0:0	8	[
water	74:26	0:0	8	i
op	74:27	0:0	8	]
op	74:28	0:0	8	[
water	74:29	0:0	8	j
op	74:30	0:0	8	]
op	74:32	0:0	8	/=
water	74:35	0:0	8	t
water	74:36	0:0	8	;
water	75:8	0:0	6	}
call	76:8	76:63	4	av_opt_set_int
arg	76:23	76:31	5	pan->swr
water	76:23	0:0	6	pan
op	76:26	0:0	6	->
water	76:28	0:0	6	swr
arg	76:33	76:38	5	"icl"
water	76:33	0:0	6	"icl"
arg	76:40	76:60	5	link->channel_layout
water	76:40	0:0	6	link
op	76:44	0:0	6	->
water	76:46	0:0	6	channel_layout
arg	76:62	76:63	5	0
water	76:62	0:0	6	0
water	76:64	0:0	4	;
call	77:8	77:66	4	av_opt_set_int
arg	77:23	77:31	5	pan->swr
water	77:23	0:0	6	pan
op	77:26	0:0	6	->
water	77:28	0:0	6	swr
arg	77:33	77:38	5	"ocl"
water	77:33	0:0	6	"ocl"
arg	77:40	77:63	5	pan->out_channel_layout
water	77:40	0:0	6	pan
op	77:43	0:0	6	->
water	77:45	0:0	6	out_channel_layout
arg	77:65	77:66	5	0
water	77:65	0:0	6	0
water	77:67	0:0	4	;
call	78:8	78:74	4	swr_set_matrix
arg	78:23	78:31	5	pan->swr
water	78:23	0:0	6	pan
op	78:26	0:0	6	->
water	78:28	0:0	6	swr
arg	78:33	78:45	5	pan->gain[0]
water	78:33	0:0	6	pan
op	78:36	0:0	6	->
water	78:38	0:0	6	gain
op	78:42	0:0	6	[
water	78:43	0:0	6	0
op	78:44	0:0	6	]
arg	78:47	78:74	5	pan->gain[1]-pan->gain[0]
water	78:47	0:0	6	pan
op	78:50	0:0	6	->
water	78:52	0:0	6	gain
op	78:56	0:0	6	[
water	78:57	0:0	6	1
op	78:58	0:0	6	]
op	78:60	0:0	6	-
water	78:62	0:0	6	pan
op	78:65	0:0	6	->
water	78:67	0:0	6	gain
op	78:71	0:0	6	[
water	78:72	0:0	6	0
op	78:73	0:0	6	]
water	78:75	0:0	4	;
water	79:4	0:0	4	}
water	80:4	0:0	2	r
op	80:6	0:0	2	=
call	80:8	80:25	2	swr_init
arg	80:17	80:25	3	pan->swr
water	80:17	0:0	4	pan
op	80:20	0:0	4	->
water	80:22	0:0	4	swr
water	80:26	0:0	2	;
if	81:4	82:16	2	(r < 0)
cond	81:8	81:12	3	r < 0
water	81:8	0:0	4	r
op	81:10	0:0	4	<
water	81:12	0:0	4	0
stmts	82:8	82:16	3	
return	82:8	82:16	4	r
water	82:15	0:0	5	r
for	84:4	92:4	2	(i = 0 ;i < pan -> nb_output_channels;i ++)
forinit	84:9	84:14	3	i = 0 ;
water	84:9	0:0	4	i
op	84:11	0:0	4	=
water	84:13	0:0	4	0
water	84:14	0:0	4	;
cond	84:16	84:25	3	i < pan -> nb_output_channels
water	84:16	0:0	4	i
op	84:18	0:0	4	<
water	84:20	0:0	4	pan
op	84:23	0:0	4	->
water	84:25	0:0	4	nb_output_channels
forexpr	84:45	84:46	3	i ++
water	84:45	0:0	4	i
op	84:46	0:0	4	++
stmts	84:50	92:4	3	
water	84:50	0:0	4	{
water	85:8	0:0	4	cur
op	85:12	0:0	4	=
water	85:14	0:0	4	buf
water	85:17	0:0	4	;
for	86:8	90:8	4	(j = 0 ;j < link -> channels;j ++)
forinit	86:13	86:18	5	j = 0 ;
water	86:13	0:0	6	j
op	86:15	0:0	6	=
water	86:17	0:0	6	0
water	86:18	0:0	6	;
cond	86:20	86:30	5	j < link -> channels
water	86:20	0:0	6	j
op	86:22	0:0	6	<
water	86:24	0:0	6	link
op	86:28	0:0	6	->
water	86:30	0:0	6	channels
forexpr	86:40	86:41	5	j ++
water	86:40	0:0	6	j
op	86:41	0:0	6	++
stmts	86:45	90:8	5	
water	86:45	0:0	6	{
water	87:12	0:0	6	r
op	87:14	0:0	6	=
call	87:16	88:59	6	snprintf
arg	87:25	87:28	7	cur
water	87:25	0:0	8	cur
arg	87:30	87:53	7	buf+sizeof(buf)-cur
water	87:30	0:0	8	buf
op	87:34	0:0	8	+
op	87:36	0:0	8	sizeof
water	87:42	0:0	8	(
water	87:43	0:0	8	buf
water	87:46	0:0	8	)
op	87:48	0:0	8	-
water	87:50	0:0	8	cur
arg	87:55	87:67	7	"%s%.3g i%d"
water	87:55	0:0	8	"%s%.3g i%d"
arg	88:25	88:39	7	j?" + ":""
water	88:25	0:0	8	j
water	88:27	0:0	8	?
water	88:29	0:0	8	" + "
water	88:35	0:0	8	:
water	88:37	0:0	8	""
arg	88:41	88:56	7	pan->gain[i][j]
water	88:41	0:0	8	pan
op	88:44	0:0	8	->
water	88:46	0:0	8	gain
op	88:50	0:0	8	[
water	88:51	0:0	8	i
op	88:52	0:0	8	]
op	88:53	0:0	8	[
water	88:54	0:0	8	j
op	88:55	0:0	8	]
arg	88:58	88:59	7	j
water	88:58	0:0	8	j
water	88:60	0:0	6	;
water	89:12	0:0	6	cur
op	89:16	0:0	6	+=
call	89:19	89:51	6	FFMIN
arg	89:25	89:48	7	buf+sizeof(buf)-cur
water	89:25	0:0	8	buf
op	89:29	0:0	8	+
op	89:31	0:0	8	sizeof
water	89:37	0:0	8	(
water	89:38	0:0	8	buf
water	89:41	0:0	8	)
op	89:43	0:0	8	-
water	89:45	0:0	8	cur
arg	89:50	89:51	7	r
water	89:50	0:0	8	r
water	89:52	0:0	6	;
water	90:8	0:0	6	}
call	91:8	91:56	4	av_log
arg	91:15	91:18	5	ctx
water	91:15	0:0	6	ctx
arg	91:20	91:34	5	AV_LOG_VERBOSE
water	91:20	0:0	6	AV_LOG_VERBOSE
arg	91:36	91:48	5	"o%d = %s\n"
water	91:36	0:0	6	"o%d = %s\n"
arg	91:50	91:51	5	i
water	91:50	0:0	6	i
arg	91:53	91:56	5	buf
water	91:53	0:0	6	buf
water	91:57	0:0	4	;
water	92:4	0:0	4	}
if	94:4	103:4	2	(pan -> pure_gains)
cond	94:8	94:13	3	pan -> pure_gains
water	94:8	0:0	4	pan
op	94:11	0:0	4	->
water	94:13	0:0	4	pure_gains
stmts	94:25	103:4	3	
water	94:25	0:0	4	{
call	95:8	95:65	4	av_log
arg	95:15	95:18	5	ctx
water	95:15	0:0	6	ctx
arg	95:20	95:31	5	AV_LOG_INFO
water	95:20	0:0	6	AV_LOG_INFO
arg	95:33	95:65	5	"Pure channel mapping detected:"
water	95:33	0:0	6	"Pure channel mapping detected:"
water	95:66	0:0	4	;
for	96:8	98:46	4	(i = 0 ;i < pan -> nb_output_channels;i ++)
forinit	96:13	96:18	5	i = 0 ;
water	96:13	0:0	6	i
op	96:15	0:0	6	=
water	96:17	0:0	6	0
water	96:18	0:0	6	;
cond	96:20	96:29	5	i < pan -> nb_output_channels
water	96:20	0:0	6	i
op	96:22	0:0	6	<
water	96:24	0:0	6	pan
op	96:27	0:0	6	->
water	96:29	0:0	6	nb_output_channels
forexpr	96:49	96:50	5	i ++
water	96:49	0:0	6	i
op	96:50	0:0	6	++
stmts	97:12	98:46	5	
if	97:12	98:46	6	(pan -> channel_map [ i ] < 0)
cond	97:16	97:38	7	pan -> channel_map [ i ] < 0
water	97:16	0:0	8	pan
op	97:19	0:0	8	->
water	97:21	0:0	8	channel_map
op	97:32	0:0	8	[
water	97:33	0:0	8	i
op	97:34	0:0	8	]
op	97:36	0:0	8	<
water	97:38	0:0	8	0
stmts	98:16	98:46	7	
call	98:16	98:45	8	av_log
arg	98:23	98:26	9	ctx
water	98:23	0:0	10	ctx
arg	98:28	98:39	9	AV_LOG_INFO
water	98:28	0:0	10	AV_LOG_INFO
arg	98:41	98:45	9	" M"
water	98:41	0:0	10	" M"
water	98:46	0:0	8	;
else	99:12	100:68	4
stmts	100:16	100:68	5	
call	100:16	100:67	6	av_log
arg	100:23	100:26	7	ctx
water	100:23	0:0	8	ctx
arg	100:28	100:39	7	AV_LOG_INFO
water	100:28	0:0	8	AV_LOG_INFO
arg	100:41	100:46	7	" %d"
water	100:41	0:0	8	" %d"
arg	100:48	100:67	7	pan->channel_map[i]
water	100:48	0:0	8	pan
op	100:51	0:0	8	->
water	100:53	0:0	8	channel_map
op	100:64	0:0	8	[
water	100:65	0:0	8	i
op	100:66	0:0	8	]
water	100:68	0:0	6	;
call	101:8	101:37	4	av_log
arg	101:15	101:18	5	ctx
water	101:15	0:0	6	ctx
arg	101:20	101:31	5	AV_LOG_INFO
water	101:20	0:0	6	AV_LOG_INFO
arg	101:33	101:37	5	"\n"
water	101:33	0:0	6	"\n"
water	101:38	0:0	4	;
return	102:8	102:16	4	0
water	102:15	0:0	5	0
water	103:4	0:0	4	}
return	104:4	104:12	2	0
water	104:11	0:0	3	0
