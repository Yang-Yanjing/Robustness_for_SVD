func	1:0	94:0	0	static int	mov_write_tkhd_tag
params	1:29	0:0	1	
param	1:30	1:45	2	AVIOContext *	pb
param	1:47	1:65	2	MOVMuxContext *	mov
param	2:30	2:45	2	MOVTrack *	track
param	2:47	2:59	2	AVStream *	st
stmnts	0:0	93:15	1	
decl	4:4	5:68	2	int64_t	duration
op	4:21	0:0	2	=
call	4:23	5:67	3	av_rescale_rnd
arg	4:38	4:59	4	track->track_duration
water	4:38	0:0	5	track
op	4:43	0:0	5	->
water	4:45	0:0	5	track_duration
arg	4:61	4:74	4	MOV_TIMESCALE
water	4:61	0:0	5	MOV_TIMESCALE
arg	5:38	5:54	4	track->timescale
water	5:38	0:0	5	track
op	5:43	0:0	5	->
water	5:45	0:0	5	timescale
arg	5:56	5:67	4	AV_ROUND_UP
water	5:56	0:0	5	AV_ROUND_UP
decl	6:4	6:46	2	int	version
op	6:16	0:0	2	=
water	6:18	0:0	2	duration
op	6:27	0:0	2	<
water	6:29	0:0	2	INT32_MAX
water	6:39	0:0	2	?
water	6:41	0:0	2	0
water	6:43	0:0	2	:
water	6:45	0:0	2	1
decl	7:4	7:40	2	int	flags
op	7:16	0:0	2	=
water	7:18	0:0	2	MOV_TKHD_FLAG_IN_MOVIE
decl	8:4	8:20	2	int	rotation
op	8:17	0:0	2	=
water	8:19	0:0	2	0
decl	9:4	9:19	2	int	group
op	9:16	0:0	2	=
water	9:18	0:0	2	0
decl	10:4	10:35	2	uint32_t	*display_matrix
op	10:29	0:0	2	=
water	10:31	0:0	2	NULL
decl	11:4	11:35	2	int	display_matrix_size
water	11:32	0:0	2	,
decl	11:4	11:35	2	int	i
if	12:4	21:4	2	(st)
cond	12:8	12:8	3	st
water	12:8	0:0	4	st
stmts	12:12	21:4	3	
water	12:12	0:0	4	{
if	13:8	14:29	4	(mov -> per_stream_grouping)
cond	13:12	13:17	5	mov -> per_stream_grouping
water	13:12	0:0	6	mov
op	13:15	0:0	6	->
water	13:17	0:0	6	per_stream_grouping
stmts	14:12	14:29	5	
water	14:12	0:0	6	group
op	14:18	0:0	6	=
water	14:20	0:0	6	st
op	14:22	0:0	6	->
water	14:24	0:0	6	index
water	14:29	0:0	6	;
else	15:8	16:41	4
stmts	16:12	16:41	5	
water	16:12	0:0	6	group
op	16:18	0:0	6	=
water	16:20	0:0	6	st
op	16:22	0:0	6	->
water	16:24	0:0	6	codec
op	16:29	0:0	6	->
water	16:31	0:0	6	codec_type
water	16:41	0:0	6	;
water	17:8	0:0	4	display_matrix
op	17:23	0:0	4	=
water	17:25	0:0	4	(
water	17:26	0:0	4	uint32_t
op	17:34	0:0	4	*
water	17:35	0:0	4	)
call	17:36	18:80	4	av_stream_get_side_data
arg	17:60	17:62	5	st
water	17:60	0:0	6	st
arg	17:64	17:89	5	AV_PKT_DATA_DISPLAYMATRIX
water	17:64	0:0	6	AV_PKT_DATA_DISPLAYMATRIX
arg	18:60	18:80	5	&display_matrix_size
op	18:60	0:0	6	&
water	18:61	0:0	6	display_matrix_size
water	18:81	0:0	4	;
if	19:8	20:33	4	(display_matrix && display_matrix_size < 9 * sizeof ( * display_matrix ))
cond	19:12	19:78	5	display_matrix && display_matrix_size < 9 * sizeof ( * display_matrix )
water	19:12	0:0	6	display_matrix
op	19:27	0:0	6	&&
water	19:30	0:0	6	display_matrix_size
op	19:50	0:0	6	<
water	19:52	0:0	6	9
op	19:54	0:0	6	*
op	19:56	0:0	6	sizeof
water	19:62	0:0	6	(
op	19:63	0:0	6	*
water	19:64	0:0	6	display_matrix
water	19:78	0:0	6	)
stmts	20:12	20:33	5	
water	20:12	0:0	6	display_matrix
op	20:27	0:0	6	=
water	20:29	0:0	6	NULL
water	20:33	0:0	6	;
water	21:4	0:0	4	}
if	22:4	23:38	2	(track -> flags & MOV_TRACK_ENABLED)
cond	22:8	22:23	3	track -> flags & MOV_TRACK_ENABLED
water	22:8	0:0	4	track
op	22:13	0:0	4	->
water	22:15	0:0	4	flags
op	22:21	0:0	4	&
water	22:23	0:0	4	MOV_TRACK_ENABLED
stmts	23:8	23:38	3	
water	23:8	0:0	4	flags
op	23:14	0:0	4	|=
water	23:17	0:0	4	MOV_TKHD_FLAG_ENABLED
water	23:38	0:0	4	;
if	24:4	25:19	2	(track -> mode == MODE_ISM)
cond	24:8	24:23	3	track -> mode == MODE_ISM
water	24:8	0:0	4	track
op	24:13	0:0	4	->
water	24:15	0:0	4	mode
op	24:20	0:0	4	==
water	24:23	0:0	4	MODE_ISM
stmts	25:8	25:19	3	
water	25:8	0:0	4	version
op	25:16	0:0	4	=
water	25:18	0:0	4	1
water	25:19	0:0	4	;
water	26:4	0:0	2	(
water	26:5	0:0	2	version
op	26:13	0:0	2	==
water	26:16	0:0	2	1
water	26:17	0:0	2	)
water	26:19	0:0	2	?
call	26:21	26:38	2	avio_wb32
arg	26:31	26:33	3	pb
water	26:31	0:0	4	pb
arg	26:35	26:38	3	104
water	26:35	0:0	4	104
water	26:40	0:0	2	:
call	26:42	26:58	2	avio_wb32
arg	26:52	26:54	3	pb
water	26:52	0:0	4	pb
arg	26:56	26:58	3	92
water	26:56	0:0	4	92
water	26:59	0:0	2	;
call	27:4	27:27	2	ffio_wfourcc
arg	27:17	27:19	3	pb
water	27:17	0:0	4	pb
arg	27:21	27:27	3	"tkhd"
water	27:21	0:0	4	"tkhd"
water	27:28	0:0	2	;
call	28:4	28:23	2	avio_w8
arg	28:12	28:14	3	pb
water	28:12	0:0	4	pb
arg	28:16	28:23	3	version
water	28:16	0:0	4	version
water	28:24	0:0	2	;
call	29:4	29:23	2	avio_wb24
arg	29:14	29:16	3	pb
water	29:14	0:0	4	pb
arg	29:18	29:23	3	flags
water	29:18	0:0	4	flags
water	29:24	0:0	2	;
if	30:4	33:4	2	(version == 1)
cond	30:8	30:19	3	version == 1
water	30:8	0:0	4	version
op	30:16	0:0	4	==
water	30:19	0:0	4	1
stmts	30:22	33:4	3	
water	30:22	0:0	4	{
call	31:8	31:33	4	avio_wb64
arg	31:18	31:20	5	pb
water	31:18	0:0	6	pb
arg	31:22	31:33	5	track->time
water	31:22	0:0	6	track
op	31:27	0:0	6	->
water	31:29	0:0	6	time
water	31:34	0:0	4	;
call	32:8	32:33	4	avio_wb64
arg	32:18	32:20	5	pb
water	32:18	0:0	6	pb
arg	32:22	32:33	5	track->time
water	32:22	0:0	6	track
op	32:27	0:0	6	->
water	32:29	0:0	6	time
water	32:34	0:0	4	;
water	33:4	0:0	4	}
else	33:6	36:4	2
stmts	33:11	36:4	3	
water	33:11	0:0	4	{
call	34:8	34:33	4	avio_wb32
arg	34:18	34:20	5	pb
water	34:18	0:0	6	pb
arg	34:22	34:33	5	track->time
water	34:22	0:0	6	track
op	34:27	0:0	6	->
water	34:29	0:0	6	time
water	34:34	0:0	4	;
call	35:8	35:33	4	avio_wb32
arg	35:18	35:20	5	pb
water	35:18	0:0	6	pb
arg	35:22	35:33	5	track->time
water	35:22	0:0	6	track
op	35:27	0:0	6	->
water	35:29	0:0	6	time
water	35:34	0:0	4	;
water	36:4	0:0	4	}
call	37:4	37:33	2	avio_wb32
arg	37:14	37:16	3	pb
water	37:14	0:0	4	pb
arg	37:18	37:33	3	track->track_id
water	37:18	0:0	4	track
op	37:23	0:0	4	->
water	37:25	0:0	4	track_id
water	37:34	0:0	2	;
call	38:4	38:19	2	avio_wb32
arg	38:14	38:16	3	pb
water	38:14	0:0	4	pb
arg	38:18	38:19	3	0
water	38:18	0:0	4	0
water	38:20	0:0	2	;
if	39:4	40:96	2	(! track -> entry && mov -> mode == MODE_ISM)
cond	39:8	39:38	3	! track -> entry && mov -> mode == MODE_ISM
op	39:8	0:0	4	!
water	39:9	0:0	4	track
op	39:14	0:0	4	->
water	39:16	0:0	4	entry
op	39:22	0:0	4	&&
water	39:25	0:0	4	mov
op	39:28	0:0	4	->
water	39:30	0:0	4	mode
op	39:35	0:0	4	==
water	39:38	0:0	4	MODE_ISM
stmts	40:8	40:96	3	
water	40:8	0:0	4	(
water	40:9	0:0	4	version
op	40:17	0:0	4	==
water	40:20	0:0	4	1
water	40:21	0:0	4	)
water	40:23	0:0	4	?
call	40:25	40:67	4	avio_wb64
arg	40:35	40:37	5	pb
water	40:35	0:0	6	pb
arg	40:39	40:67	5	UINT64_C(0xffffffffffffffff)
call	40:39	40:66	6	UINT64_C
arg	40:48	40:66	7	0xffffffffffffffff
water	40:48	0:0	8	0
water	40:49	0:0	8	xffffffffffffffff
water	40:69	0:0	4	:
call	40:71	40:95	4	avio_wb32
arg	40:81	40:83	5	pb
water	40:81	0:0	6	pb
arg	40:85	40:95	5	0xffffffff
water	40:85	0:0	6	0
water	40:86	0:0	6	xffffffff
water	40:96	0:0	4	;
else	41:4	42:60	2
stmts	41:9	42:60	3	
if	41:9	42:60	4	(! track -> entry)
cond	41:13	41:21	5	! track -> entry
op	41:13	0:0	6	!
water	41:14	0:0	6	track
op	41:19	0:0	6	->
water	41:21	0:0	6	entry
stmts	42:8	42:60	5	
water	42:8	0:0	6	(
water	42:9	0:0	6	version
op	42:17	0:0	6	==
water	42:20	0:0	6	1
water	42:21	0:0	6	)
water	42:23	0:0	6	?
call	42:25	42:40	6	avio_wb64
arg	42:35	42:37	7	pb
water	42:35	0:0	8	pb
arg	42:39	42:40	7	0
water	42:39	0:0	8	0
water	42:42	0:0	6	:
call	42:44	42:59	6	avio_wb32
arg	42:54	42:56	7	pb
water	42:54	0:0	8	pb
arg	42:58	42:59	7	0
water	42:58	0:0	8	0
water	42:60	0:0	6	;
else	43:4	44:74	2
stmts	44:8	44:74	3	
water	44:8	0:0	4	(
water	44:9	0:0	4	version
op	44:17	0:0	4	==
water	44:20	0:0	4	1
water	44:21	0:0	4	)
water	44:23	0:0	4	?
call	44:25	44:47	4	avio_wb64
arg	44:35	44:37	5	pb
water	44:35	0:0	6	pb
arg	44:39	44:47	5	duration
water	44:39	0:0	6	duration
water	44:49	0:0	4	:
call	44:51	44:73	4	avio_wb32
arg	44:61	44:63	5	pb
water	44:61	0:0	6	pb
arg	44:65	44:73	5	duration
water	44:65	0:0	6	duration
water	44:74	0:0	4	;
call	45:4	45:19	2	avio_wb32
arg	45:14	45:16	3	pb
water	45:14	0:0	4	pb
arg	45:18	45:19	3	0
water	45:18	0:0	4	0
water	45:20	0:0	2	;
call	46:4	46:19	2	avio_wb32
arg	46:14	46:16	3	pb
water	46:14	0:0	4	pb
arg	46:18	46:19	3	0
water	46:18	0:0	4	0
water	46:20	0:0	2	;
call	47:4	47:19	2	avio_wb16
arg	47:14	47:16	3	pb
water	47:14	0:0	4	pb
arg	47:18	47:19	3	0
water	47:18	0:0	4	0
water	47:20	0:0	2	;
call	48:4	48:23	2	avio_wb16
arg	48:14	48:16	3	pb
water	48:14	0:0	4	pb
arg	48:18	48:23	3	group
water	48:18	0:0	4	group
water	48:24	0:0	2	;
if	50:4	51:29	2	(track -> enc -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	50:8	50:34	3	track -> enc -> codec_type == AVMEDIA_TYPE_AUDIO
water	50:8	0:0	4	track
op	50:13	0:0	4	->
water	50:15	0:0	4	enc
op	50:18	0:0	4	->
water	50:20	0:0	4	codec_type
op	50:31	0:0	4	==
water	50:34	0:0	4	AVMEDIA_TYPE_AUDIO
stmts	51:8	51:29	3	
call	51:8	51:28	4	avio_wb16
arg	51:18	51:20	5	pb
water	51:18	0:0	6	pb
arg	51:22	51:28	5	0x0100
water	51:22	0:0	6	0
water	51:23	0:0	6	x0100
water	51:29	0:0	4	;
else	52:4	53:24	2
stmts	53:8	53:24	3	
call	53:8	53:23	4	avio_wb16
arg	53:18	53:20	5	pb
water	53:18	0:0	6	pb
arg	53:22	53:23	5	0
water	53:22	0:0	6	0
water	53:24	0:0	4	;
call	54:4	54:19	2	avio_wb16
arg	54:14	54:16	3	pb
water	54:14	0:0	4	pb
arg	54:18	54:19	3	0
water	54:18	0:0	4	0
water	54:20	0:0	2	;
if	56:4	59:4	2	(st && st -> metadata)
cond	56:8	56:18	3	st && st -> metadata
water	56:8	0:0	4	st
op	56:11	0:0	4	&&
water	56:14	0:0	4	st
op	56:16	0:0	4	->
water	56:18	0:0	4	metadata
stmts	56:28	59:4	3	
water	56:28	0:0	4	{
decl	57:8	57:77	4	AVDictionaryEntry	*rot
op	57:31	0:0	4	=
call	57:33	57:76	5	av_dict_get
arg	57:45	57:57	6	st->metadata
water	57:45	0:0	7	st
op	57:47	0:0	7	->
water	57:49	0:0	7	metadata
arg	57:59	57:67	6	"rotate"
water	57:59	0:0	7	"rotate"
arg	57:69	57:73	6	NULL
water	57:69	0:0	7	NULL
arg	57:75	57:76	6	0
water	57:75	0:0	7	0
water	58:8	0:0	4	rotation
op	58:17	0:0	4	=
water	58:19	0:0	4	(
water	58:20	0:0	4	rot
op	58:24	0:0	4	&&
water	58:27	0:0	4	rot
op	58:30	0:0	4	->
water	58:32	0:0	4	value
water	58:37	0:0	4	)
water	58:39	0:0	4	?
call	58:41	58:56	4	atoi
arg	58:46	58:56	5	rot->value
water	58:46	0:0	6	rot
op	58:49	0:0	6	->
water	58:51	0:0	6	value
water	58:58	0:0	4	:
water	58:60	0:0	4	0
water	58:61	0:0	4	;
water	59:4	0:0	4	}
if	60:4	63:4	2	(display_matrix)
cond	60:8	60:8	3	display_matrix
water	60:8	0:0	4	display_matrix
stmts	60:24	63:4	3	
water	60:24	0:0	4	{
for	61:8	62:44	4	(i = 0 ;i < 9;i ++)
forinit	61:13	61:18	5	i = 0 ;
water	61:13	0:0	6	i
op	61:15	0:0	6	=
water	61:17	0:0	6	0
water	61:18	0:0	6	;
cond	61:20	61:24	5	i < 9
water	61:20	0:0	6	i
op	61:22	0:0	6	<
water	61:24	0:0	6	9
forexpr	61:27	61:28	5	i ++
water	61:27	0:0	6	i
op	61:28	0:0	6	++
stmts	62:12	62:44	5	
call	62:12	62:43	6	avio_wb32
arg	62:22	62:24	7	pb
water	62:22	0:0	8	pb
arg	62:26	62:43	7	display_matrix[i]
water	62:26	0:0	8	display_matrix
op	62:40	0:0	8	[
water	62:41	0:0	8	i
op	62:42	0:0	8	]
water	62:44	0:0	6	;
water	63:4	0:0	4	}
else	63:6	65:4	2
stmts	63:11	65:4	3	
if	63:11	65:4	4	(rotation == 90)
cond	63:15	63:27	5	rotation == 90
water	63:15	0:0	6	rotation
op	63:24	0:0	6	==
water	63:27	0:0	6	90
stmts	63:31	65:4	5	
water	63:31	0:0	6	{
call	64:8	64:62	6	write_matrix
arg	64:21	64:23	7	pb
water	64:21	0:0	8	pb
arg	64:26	64:27	7	0
water	64:26	0:0	8	0
arg	64:30	64:31	7	1
water	64:30	0:0	8	1
arg	64:33	64:35	7	-1
op	64:33	0:0	8	-
water	64:34	0:0	8	1
arg	64:38	64:39	7	0
water	64:38	0:0	8	0
arg	64:41	64:59	7	track->enc->height
water	64:41	0:0	8	track
op	64:46	0:0	8	->
water	64:48	0:0	8	enc
op	64:51	0:0	8	->
water	64:53	0:0	8	height
arg	64:61	64:62	7	0
water	64:61	0:0	8	0
water	64:63	0:0	6	;
water	65:4	0:0	6	}
else	65:6	67:4	2
stmts	65:11	67:4	3	
if	65:11	67:4	4	(rotation == 180)
cond	65:15	65:27	5	rotation == 180
water	65:15	0:0	6	rotation
op	65:24	0:0	6	==
water	65:27	0:0	6	180
stmts	65:32	67:4	5	
water	65:32	0:0	6	{
call	66:8	66:78	6	write_matrix
arg	66:21	66:23	7	pb
water	66:21	0:0	8	pb
arg	66:25	66:27	7	-1
op	66:25	0:0	8	-
water	66:26	0:0	8	1
arg	66:30	66:31	7	0
water	66:30	0:0	8	0
arg	66:34	66:35	7	0
water	66:34	0:0	8	0
arg	66:37	66:39	7	-1
op	66:37	0:0	8	-
water	66:38	0:0	8	1
arg	66:41	66:58	7	track->enc->width
water	66:41	0:0	8	track
op	66:46	0:0	8	->
water	66:48	0:0	8	enc
op	66:51	0:0	8	->
water	66:53	0:0	8	width
arg	66:60	66:78	7	track->enc->height
water	66:60	0:0	8	track
op	66:65	0:0	8	->
water	66:67	0:0	8	enc
op	66:70	0:0	8	->
water	66:72	0:0	8	height
water	66:79	0:0	6	;
water	67:4	0:0	6	}
else	67:6	69:4	2
stmts	67:11	69:4	3	
if	67:11	69:4	4	(rotation == 270)
cond	67:15	67:27	5	rotation == 270
water	67:15	0:0	6	rotation
op	67:24	0:0	6	==
water	67:27	0:0	6	270
stmts	67:32	69:4	5	
water	67:32	0:0	6	{
call	68:8	68:61	6	write_matrix
arg	68:21	68:23	7	pb
water	68:21	0:0	8	pb
arg	68:26	68:27	7	0
water	68:26	0:0	8	0
arg	68:29	68:31	7	-1
op	68:29	0:0	8	-
water	68:30	0:0	8	1
arg	68:34	68:35	7	1
water	68:34	0:0	8	1
arg	68:38	68:39	7	0
water	68:38	0:0	8	0
arg	68:41	68:42	7	0
water	68:41	0:0	8	0
arg	68:44	68:61	7	track->enc->width
water	68:44	0:0	8	track
op	68:49	0:0	8	->
water	68:51	0:0	8	enc
op	68:54	0:0	8	->
water	68:56	0:0	8	width
water	68:62	0:0	6	;
water	69:4	0:0	6	}
else	69:6	71:4	2
stmts	69:11	71:4	3	
water	69:11	0:0	4	{
call	70:8	70:45	4	write_matrix
arg	70:21	70:23	5	pb
water	70:21	0:0	6	pb
arg	70:26	70:27	5	1
water	70:26	0:0	6	1
arg	70:30	70:31	5	0
water	70:30	0:0	6	0
arg	70:34	70:35	5	0
water	70:34	0:0	6	0
arg	70:38	70:39	5	1
water	70:38	0:0	6	1
arg	70:41	70:42	5	0
water	70:41	0:0	6	0
arg	70:44	70:45	5	0
water	70:44	0:0	6	0
water	70:46	0:0	4	;
water	71:4	0:0	4	}
if	73:4	89:4	2	(st && ( track -> enc -> codec_type == AVMEDIA_TYPE_VIDEO || track -> enc -> codec_type == AVMEDIA_TYPE_SUBTITLE ))
cond	73:8	74:62	3	st && ( track -> enc -> codec_type == AVMEDIA_TYPE_VIDEO || track -> enc -> codec_type == AVMEDIA_TYPE_SUBTITLE )
water	73:8	0:0	4	st
op	73:11	0:0	4	&&
water	73:14	0:0	4	(
water	73:15	0:0	4	track
op	73:20	0:0	4	->
water	73:22	0:0	4	enc
op	73:25	0:0	4	->
water	73:27	0:0	4	codec_type
op	73:38	0:0	4	==
water	73:41	0:0	4	AVMEDIA_TYPE_VIDEO
op	73:60	0:0	4	||
water	74:15	0:0	4	track
op	74:20	0:0	4	->
water	74:22	0:0	4	enc
op	74:25	0:0	4	->
water	74:27	0:0	4	codec_type
op	74:38	0:0	4	==
water	74:41	0:0	4	AVMEDIA_TYPE_SUBTITLE
water	74:62	0:0	4	)
stmts	74:65	89:4	3	
water	74:65	0:0	4	{
if	75:8	78:8	4	(track -> mode == MODE_MOV)
cond	75:12	75:27	5	track -> mode == MODE_MOV
water	75:12	0:0	6	track
op	75:17	0:0	6	->
water	75:19	0:0	6	mode
op	75:24	0:0	6	==
water	75:27	0:0	6	MODE_MOV
stmts	75:37	78:8	5	
water	75:37	0:0	6	{
call	76:12	76:49	6	avio_wb32
arg	76:22	76:24	7	pb
water	76:22	0:0	8	pb
arg	76:26	76:49	7	track->enc->width<<16
water	76:26	0:0	8	track
op	76:31	0:0	8	->
water	76:33	0:0	8	enc
op	76:36	0:0	8	->
water	76:38	0:0	8	width
op	76:44	0:0	8	<<
water	76:47	0:0	8	16
water	76:50	0:0	6	;
call	77:12	77:45	6	avio_wb32
arg	77:22	77:24	7	pb
water	77:22	0:0	8	pb
arg	77:26	77:45	7	track->height<<16
water	77:26	0:0	8	track
op	77:31	0:0	8	->
water	77:33	0:0	8	height
op	77:40	0:0	8	<<
water	77:43	0:0	8	16
water	77:46	0:0	6	;
water	78:8	0:0	6	}
else	78:10	88:8	4
stmts	78:15	88:8	5	
water	78:15	0:0	6	{
decl	79:12	81:78	6	int64_t	track_width_1616
op	79:37	0:0	6	=
call	79:39	81:77	7	av_rescale
arg	79:50	79:77	8	st->sample_aspect_ratio.num
water	79:50	0:0	9	st
op	79:52	0:0	9	->
water	79:54	0:0	9	sample_aspect_ratio
op	79:73	0:0	9	.
water	79:74	0:0	9	num
arg	80:50	80:79	8	track->enc->width*0x10000LL
water	80:50	0:0	9	track
op	80:55	0:0	9	->
water	80:57	0:0	9	enc
op	80:60	0:0	9	->
water	80:62	0:0	9	width
op	80:68	0:0	9	*
water	80:70	0:0	9	0
water	80:71	0:0	9	x10000LL
arg	81:50	81:77	8	st->sample_aspect_ratio.den
water	81:50	0:0	9	st
op	81:52	0:0	9	->
water	81:54	0:0	9	sample_aspect_ratio
op	81:73	0:0	9	.
water	81:74	0:0	9	den
if	82:12	85:63	6	(! track_width_1616 || track -> height != track -> enc -> height || track_width_1616 > UINT32_MAX)
cond	82:16	84:35	7	! track_width_1616 || track -> height != track -> enc -> height || track_width_1616 > UINT32_MAX
op	82:16	0:0	8	!
water	82:17	0:0	8	track_width_1616
op	82:34	0:0	8	||
water	83:16	0:0	8	track
op	83:21	0:0	8	->
water	83:23	0:0	8	height
op	83:30	0:0	8	!=
water	83:33	0:0	8	track
op	83:38	0:0	8	->
water	83:40	0:0	8	enc
op	83:43	0:0	8	->
water	83:45	0:0	8	height
op	83:52	0:0	8	||
water	84:16	0:0	8	track_width_1616
op	84:33	0:0	8	>
water	84:35	0:0	8	UINT32_MAX
stmts	85:16	85:63	7	
water	85:16	0:0	8	track_width_1616
op	85:33	0:0	8	=
water	85:35	0:0	8	track
op	85:40	0:0	8	->
water	85:42	0:0	8	enc
op	85:45	0:0	8	->
water	85:47	0:0	8	width
op	85:53	0:0	8	*
water	85:55	0:0	8	0
water	85:56	0:0	8	x10000U
water	85:63	0:0	8	;
call	86:12	86:42	6	avio_wb32
arg	86:22	86:24	7	pb
water	86:22	0:0	8	pb
arg	86:26	86:42	7	track_width_1616
water	86:26	0:0	8	track_width_1616
water	86:43	0:0	6	;
call	87:12	87:50	6	avio_wb32
arg	87:22	87:24	7	pb
water	87:22	0:0	8	pb
arg	87:26	87:50	7	track->height*0x10000U
water	87:26	0:0	8	track
op	87:31	0:0	8	->
water	87:33	0:0	8	height
op	87:40	0:0	8	*
water	87:42	0:0	8	0
water	87:43	0:0	8	x10000U
water	87:51	0:0	6	;
water	88:8	0:0	6	}
water	89:4	0:0	4	}
else	89:6	92:4	2
stmts	89:11	92:4	3	
water	89:11	0:0	4	{
call	90:8	90:23	4	avio_wb32
arg	90:18	90:20	5	pb
water	90:18	0:0	6	pb
arg	90:22	90:23	5	0
water	90:22	0:0	6	0
water	90:24	0:0	4	;
call	91:8	91:23	4	avio_wb32
arg	91:18	91:20	5	pb
water	91:18	0:0	6	pb
arg	91:22	91:23	5	0
water	91:22	0:0	6	0
water	91:24	0:0	4	;
water	92:4	0:0	4	}
return	93:4	93:15	2	0x5c
water	93:11	0:0	3	0
water	93:12	0:0	3	x5c
