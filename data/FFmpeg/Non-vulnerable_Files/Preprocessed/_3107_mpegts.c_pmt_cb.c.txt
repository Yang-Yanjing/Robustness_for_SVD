func	1:0	146:0	0	static void	pmt_cb
params	1:18	0:0	1	
param	1:19	1:39	2	MpegTSFilter *	filter
param	1:41	1:63	2	const uint8_t *	section
param	1:65	1:80	2	int	section_len
stmnts	0:0	145:46	1	
decl	3:4	3:55	2	MpegTSContext	*ts
op	3:22	0:0	2	=
water	3:24	0:0	2	filter
op	3:30	0:0	2	->
water	3:32	0:0	2	u
op	3:33	0:0	2	.
water	3:34	0:0	2	section_filter
op	3:48	0:0	2	.
water	3:49	0:0	2	opaque
decl	4:4	4:57	2	MpegTSSectionFilter	*tssf
op	4:30	0:0	2	=
op	4:32	0:0	2	&
water	4:33	0:0	2	filter
op	4:39	0:0	2	->
water	4:41	0:0	2	u
op	4:42	0:0	2	.
water	4:43	0:0	2	section_filter
decl	5:4	5:30	2	SectionHeader	h1
water	5:20	0:0	2	,
decl	5:4	5:30	2	SectionHeader	*h
op	5:25	0:0	2	=
op	5:27	0:0	2	&
water	5:28	0:0	2	h1
decl	6:4	6:19	2	PESContext	*pes
decl	7:4	7:16	2	AVStream	*st
decl	8:4	8:44	2	const uint8_t	*p
water	8:20	0:0	2	,
decl	8:4	8:44	2	const uint8_t	*p_end
water	8:28	0:0	2	,
decl	8:4	8:44	2	const uint8_t	*desc_list_end
decl	9:4	9:54	2	int	program_info_length
water	9:27	0:0	2	,
decl	9:4	9:54	2	int	pcr_pid
water	9:36	0:0	2	,
decl	9:4	9:54	2	int	pid
water	9:41	0:0	2	,
decl	9:4	9:54	2	int	stream_type
decl	10:4	10:21	2	int	desc_list_len
decl	11:4	11:30	2	uint32_t	prog_reg_desc
op	11:27	0:0	2	=
water	11:29	0:0	2	0
decl	12:4	12:27	2	int	mp4_descr_count
op	12:24	0:0	2	=
water	12:26	0:0	2	0
decl	13:4	13:55	2	Mp4Descr	mp4_descr[MAX_MP4_DESCR_COUNT]
op	13:44	0:0	2	=
water	13:46	0:0	2	{
water	13:48	0:0	2	{
water	13:50	0:0	2	0
water	13:52	0:0	2	}
water	13:54	0:0	2	}
decl	14:4	14:9	2	int	i
call	15:4	15:65	2	av_log
arg	15:11	15:21	3	ts->stream
water	15:11	0:0	4	ts
op	15:13	0:0	4	->
water	15:15	0:0	4	stream
arg	15:23	15:35	3	AV_LOG_TRACE
water	15:23	0:0	4	AV_LOG_TRACE
arg	15:37	15:52	3	"PMT: len %i\n"
water	15:37	0:0	4	"PMT: len %i\n"
arg	15:54	15:65	3	section_len
water	15:54	0:0	4	section_len
water	15:66	0:0	2	;
call	16:4	16:51	2	hex_dump_debug
arg	16:19	16:29	3	ts->stream
water	16:19	0:0	4	ts
op	16:21	0:0	4	->
water	16:23	0:0	4	stream
arg	16:31	16:38	3	section
water	16:31	0:0	4	section
arg	16:40	16:51	3	section_len
water	16:40	0:0	4	section_len
water	16:52	0:0	2	;
water	17:4	0:0	2	p_end
op	17:10	0:0	2	=
water	17:12	0:0	2	section
op	17:20	0:0	2	+
water	17:22	0:0	2	section_len
op	17:34	0:0	2	-
water	17:36	0:0	2	4
water	17:37	0:0	2	;
water	18:4	0:0	2	p
op	18:6	0:0	2	=
water	18:8	0:0	2	section
water	18:15	0:0	2	;
if	19:4	20:14	2	(parse_section_header (h ,& p ,p_end ) < 0)
cond	19:8	19:45	3	parse_section_header (h ,& p ,p_end ) < 0
call	19:8	19:41	4	parse_section_header
arg	19:29	19:30	5	h
water	19:29	0:0	6	h
arg	19:32	19:34	5	&p
op	19:32	0:0	6	&
water	19:33	0:0	6	p
arg	19:36	19:41	5	p_end
water	19:36	0:0	6	p_end
op	19:43	0:0	4	<
water	19:45	0:0	4	0
stmts	20:8	20:14	3	
return	20:8	20:14	4	
if	21:4	22:14	2	(skip_identical (h ,tssf ))
cond	21:8	21:30	3	skip_identical (h ,tssf )
call	21:8	21:30	4	skip_identical
arg	21:23	21:24	5	h
water	21:23	0:0	6	h
arg	21:26	21:30	5	tssf
water	21:26	0:0	6	tssf
stmts	22:8	22:14	3	
return	22:8	22:14	4	
call	23:4	24:58	2	av_log
arg	23:11	23:21	3	ts->stream
water	23:11	0:0	4	ts
op	23:13	0:0	4	->
water	23:15	0:0	4	stream
arg	23:23	23:35	3	AV_LOG_TRACE
water	23:23	0:0	4	AV_LOG_TRACE
arg	23:37	23:74	3	"sid=0x%x sec_num=%d/%d version=%d\n"
water	23:37	0:0	4	"sid=0x%x sec_num=%d/%d version=%d\n"
arg	24:12	24:17	3	h->id
water	24:12	0:0	4	h
op	24:13	0:0	4	->
water	24:15	0:0	4	id
arg	24:19	24:29	3	h->sec_num
water	24:19	0:0	4	h
op	24:20	0:0	4	->
water	24:22	0:0	4	sec_num
arg	24:31	24:46	3	h->last_sec_num
water	24:31	0:0	4	h
op	24:32	0:0	4	->
water	24:34	0:0	4	last_sec_num
arg	24:48	24:58	3	h->version
water	24:48	0:0	4	h
op	24:49	0:0	4	->
water	24:51	0:0	4	version
water	24:59	0:0	2	;
if	25:4	26:14	2	(h -> tid != PMT_TID)
cond	25:8	25:18	3	h -> tid != PMT_TID
water	25:8	0:0	4	h
op	25:9	0:0	4	->
water	25:11	0:0	4	tid
op	25:15	0:0	4	!=
water	25:18	0:0	4	PMT_TID
stmts	26:8	26:14	3	
return	26:8	26:14	4	
if	27:4	28:14	2	(! ts -> scan_all_pmts && ts -> skip_changes)
cond	27:8	27:34	3	! ts -> scan_all_pmts && ts -> skip_changes
op	27:8	0:0	4	!
water	27:9	0:0	4	ts
op	27:11	0:0	4	->
water	27:13	0:0	4	scan_all_pmts
op	27:27	0:0	4	&&
water	27:30	0:0	4	ts
op	27:32	0:0	4	->
water	27:34	0:0	4	skip_changes
stmts	28:8	28:14	3	
return	28:8	28:14	4	
if	29:4	30:32	2	(! ts -> skip_clear)
cond	29:8	29:13	3	! ts -> skip_clear
op	29:8	0:0	4	!
water	29:9	0:0	4	ts
op	29:11	0:0	4	->
water	29:13	0:0	4	skip_clear
stmts	30:8	30:32	3	
call	30:8	30:31	4	clear_program
arg	30:22	30:24	5	ts
water	30:22	0:0	6	ts
arg	30:26	30:31	5	h->id
water	30:26	0:0	6	h
op	30:27	0:0	6	->
water	30:29	0:0	6	id
water	30:32	0:0	4	;
water	31:4	0:0	2	pcr_pid
op	31:12	0:0	2	=
call	31:14	31:29	2	get16
arg	31:20	31:22	3	&p
op	31:20	0:0	4	&
water	31:21	0:0	4	p
arg	31:24	31:29	3	p_end
water	31:24	0:0	4	p_end
water	31:30	0:0	2	;
if	32:4	33:14	2	(pcr_pid < 0)
cond	32:8	32:18	3	pcr_pid < 0
water	32:8	0:0	4	pcr_pid
op	32:16	0:0	4	<
water	32:18	0:0	4	0
stmts	33:8	33:14	3	
return	33:8	33:14	4	
water	34:4	0:0	2	pcr_pid
op	34:12	0:0	2	&=
water	34:15	0:0	2	0
water	34:16	0:0	2	x1fff
water	34:21	0:0	2	;
call	35:4	35:37	2	add_pid_to_pmt
arg	35:19	35:21	3	ts
water	35:19	0:0	4	ts
arg	35:23	35:28	3	h->id
water	35:23	0:0	4	h
op	35:24	0:0	4	->
water	35:26	0:0	4	id
arg	35:30	35:37	3	pcr_pid
water	35:30	0:0	4	pcr_pid
water	35:38	0:0	2	;
call	36:4	36:42	2	set_pcr_pid
arg	36:16	36:26	3	ts->stream
water	36:16	0:0	4	ts
op	36:18	0:0	4	->
water	36:20	0:0	4	stream
arg	36:28	36:33	3	h->id
water	36:28	0:0	4	h
op	36:29	0:0	4	->
water	36:31	0:0	4	id
arg	36:35	36:42	3	pcr_pid
water	36:35	0:0	4	pcr_pid
water	36:43	0:0	2	;
call	37:4	37:62	2	av_log
arg	37:11	37:21	3	ts->stream
water	37:11	0:0	4	ts
op	37:13	0:0	4	->
water	37:15	0:0	4	stream
arg	37:23	37:35	3	AV_LOG_TRACE
water	37:23	0:0	4	AV_LOG_TRACE
arg	37:37	37:53	3	"pcr_pid=0x%x\n"
water	37:37	0:0	4	"pcr_pid=0x%x\n"
arg	37:55	37:62	3	pcr_pid
water	37:55	0:0	4	pcr_pid
water	37:63	0:0	2	;
water	38:4	0:0	2	program_info_length
op	38:24	0:0	2	=
call	38:26	38:41	2	get16
arg	38:32	38:34	3	&p
op	38:32	0:0	4	&
water	38:33	0:0	4	p
arg	38:36	38:41	3	p_end
water	38:36	0:0	4	p_end
water	38:42	0:0	2	;
if	39:4	40:14	2	(program_info_length < 0)
cond	39:8	39:30	3	program_info_length < 0
water	39:8	0:0	4	program_info_length
op	39:28	0:0	4	<
water	39:30	0:0	4	0
stmts	40:8	40:14	3	
return	40:8	40:14	4	
water	41:4	0:0	2	program_info_length
op	41:24	0:0	2	&=
water	41:27	0:0	2	0
water	41:28	0:0	2	xfff
water	41:32	0:0	2	;
while	42:4	62:4	2	(program_info_length >= 2)
cond	42:11	42:34	3	program_info_length >= 2
water	42:11	0:0	4	program_info_length
op	42:31	0:0	4	>=
water	42:34	0:0	4	2
stmts	42:37	62:4	3	
water	42:37	0:0	4	{
decl	43:8	43:24	4	uint8_t	tag
water	43:19	0:0	4	,
decl	43:8	43:24	4	uint8_t	len
water	44:8	0:0	4	tag
op	44:12	0:0	4	=
call	44:14	44:28	4	get8
arg	44:19	44:21	5	&p
op	44:19	0:0	6	&
water	44:20	0:0	6	p
arg	44:23	44:28	5	p_end
water	44:23	0:0	6	p_end
water	44:29	0:0	4	;
water	45:8	0:0	4	len
op	45:12	0:0	4	=
call	45:14	45:28	4	get8
arg	45:19	45:21	5	&p
op	45:19	0:0	6	&
water	45:20	0:0	6	p
arg	45:23	45:28	5	p_end
water	45:23	0:0	6	p_end
water	45:29	0:0	4	;
call	46:8	46:81	4	av_log
arg	46:15	46:25	5	ts->stream
water	46:15	0:0	6	ts
op	46:17	0:0	6	->
water	46:19	0:0	6	stream
arg	46:27	46:39	5	AV_LOG_TRACE
water	46:27	0:0	6	AV_LOG_TRACE
arg	46:41	46:71	5	"program tag: 0x%02x len=%d\n"
water	46:41	0:0	6	"program tag: 0x%02x len=%d\n"
arg	46:73	46:76	5	tag
water	46:73	0:0	6	tag
arg	46:78	46:81	5	len
water	46:78	0:0	6	len
water	46:82	0:0	4	;
if	47:8	49:17	4	(len > program_info_length - 2)
cond	47:12	47:40	5	len > program_info_length - 2
water	47:12	0:0	6	len
op	47:16	0:0	6	>
water	47:18	0:0	6	program_info_length
op	47:38	0:0	6	-
water	47:40	0:0	6	2
stmts	49:12	49:17	5	
break	49:12	49:17	6	
water	50:8	0:0	4	program_info_length
op	50:28	0:0	4	-=
water	50:31	0:0	4	len
op	50:35	0:0	4	+
water	50:37	0:0	4	2
water	50:38	0:0	4	;
if	51:8	57:8	4	(tag == 0 x1d)
cond	51:12	51:20	5	tag == 0 x1d
water	51:12	0:0	6	tag
op	51:16	0:0	6	==
water	51:19	0:0	6	0
water	51:20	0:0	6	x1d
stmts	51:25	57:8	5	
water	51:25	0:0	6	{
call	52:12	52:26	6	get8
arg	52:17	52:19	7	&p
op	52:17	0:0	8	&
water	52:18	0:0	8	p
arg	52:21	52:26	7	p_end
water	52:21	0:0	8	p_end
water	52:27	0:0	6	;
call	53:12	53:26	6	get8
arg	53:17	53:19	7	&p
op	53:17	0:0	8	&
water	53:18	0:0	8	p
arg	53:21	53:26	7	p_end
water	53:21	0:0	8	p_end
water	53:27	0:0	6	;
water	54:12	0:0	6	len
op	54:16	0:0	6	-=
water	54:19	0:0	6	2
water	54:20	0:0	6	;
call	55:12	56:63	6	mp4_read_iods
arg	55:26	55:36	7	ts->stream
water	55:26	0:0	8	ts
op	55:28	0:0	8	->
water	55:30	0:0	8	stream
arg	55:38	55:39	7	p
water	55:38	0:0	8	p
arg	55:41	55:44	7	len
water	55:41	0:0	8	len
arg	55:46	55:73	7	mp4_descr+mp4_descr_count
water	55:46	0:0	8	mp4_descr
op	55:56	0:0	8	+
water	55:58	0:0	8	mp4_descr_count
arg	56:26	56:42	7	&mp4_descr_count
op	56:26	0:0	8	&
water	56:27	0:0	8	mp4_descr_count
arg	56:44	56:63	7	MAX_MP4_DESCR_COUNT
water	56:44	0:0	8	MAX_MP4_DESCR_COUNT
water	56:64	0:0	6	;
water	57:8	0:0	6	}
else	57:10	60:8	4
stmts	57:15	60:8	5	
if	57:15	60:8	6	(tag == 0 x05 && len >= 4)
cond	57:19	57:41	7	tag == 0 x05 && len >= 4
water	57:19	0:0	8	tag
op	57:23	0:0	8	==
water	57:26	0:0	8	0
water	57:27	0:0	8	x05
op	57:31	0:0	8	&&
water	57:34	0:0	8	len
op	57:38	0:0	8	>=
water	57:41	0:0	8	4
stmts	57:44	60:8	7	
water	57:44	0:0	8	{
water	58:12	0:0	8	prog_reg_desc
op	58:26	0:0	8	=
call	58:28	58:50	8	bytestream_get_le32
arg	58:48	58:50	9	&p
op	58:48	0:0	10	&
water	58:49	0:0	10	p
water	58:51	0:0	8	;
water	59:12	0:0	8	len
op	59:16	0:0	8	-=
water	59:19	0:0	8	4
water	59:20	0:0	8	;
water	60:8	0:0	8	}
water	61:8	0:0	4	p
op	61:10	0:0	4	+=
water	61:13	0:0	4	len
water	61:16	0:0	4	;
water	62:4	0:0	4	}
water	63:4	0:0	2	p
op	63:6	0:0	2	+=
water	63:9	0:0	2	program_info_length
water	63:28	0:0	2	;
if	64:4	65:16	2	(p >= p_end)
cond	64:8	64:13	3	p >= p_end
water	64:8	0:0	4	p
op	64:10	0:0	4	>=
water	64:13	0:0	4	p_end
stmts	65:8	65:16	3	
goto	65:8	65:16	4	out
water	65:13	0:0	5	out
if	67:4	68:26	2	(! ts -> stream -> nb_streams)
cond	67:8	67:21	3	! ts -> stream -> nb_streams
op	67:8	0:0	4	!
water	67:9	0:0	4	ts
op	67:11	0:0	4	->
water	67:13	0:0	4	stream
op	67:19	0:0	4	->
water	67:21	0:0	4	nb_streams
stmts	68:8	68:26	3	
water	68:8	0:0	4	ts
op	68:10	0:0	4	->
water	68:12	0:0	4	stop_parse
op	68:23	0:0	4	=
water	68:25	0:0	4	2
water	68:26	0:0	4	;
call	69:4	69:27	2	set_pmt_found
arg	69:18	69:20	3	ts
water	69:18	0:0	4	ts
arg	69:22	69:27	3	h->id
water	69:22	0:0	4	h
op	69:23	0:0	4	->
water	69:25	0:0	4	id
water	69:28	0:0	2	;
for	70:4	140:4	2	(;;)
forinit	70:9	70:9	3	;
water	70:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	70:13	140:4	3	
water	70:13	0:0	4	{
water	71:8	0:0	4	st
op	71:11	0:0	4	=
water	71:13	0:0	4	0
water	71:14	0:0	4	;
water	72:8	0:0	4	pes
op	72:12	0:0	4	=
water	72:14	0:0	4	NULL
water	72:18	0:0	4	;
water	73:8	0:0	4	stream_type
op	73:20	0:0	4	=
call	73:22	73:36	4	get8
arg	73:27	73:29	5	&p
op	73:27	0:0	6	&
water	73:28	0:0	6	p
arg	73:31	73:36	5	p_end
water	73:31	0:0	6	p_end
water	73:37	0:0	4	;
if	74:8	75:17	4	(stream_type < 0)
cond	74:12	74:26	5	stream_type < 0
water	74:12	0:0	6	stream_type
op	74:24	0:0	6	<
water	74:26	0:0	6	0
stmts	75:12	75:17	5	
break	75:12	75:17	6	
water	76:8	0:0	4	pid
op	76:12	0:0	4	=
call	76:14	76:29	4	get16
arg	76:20	76:22	5	&p
op	76:20	0:0	6	&
water	76:21	0:0	6	p
arg	76:24	76:29	5	p_end
water	76:24	0:0	6	p_end
water	76:30	0:0	4	;
if	77:8	78:20	4	(pid < 0)
cond	77:12	77:18	5	pid < 0
water	77:12	0:0	6	pid
op	77:16	0:0	6	<
water	77:18	0:0	6	0
stmts	78:12	78:20	5	
goto	78:12	78:20	6	out
water	78:17	0:0	7	out
water	79:8	0:0	4	pid
op	79:12	0:0	4	&=
water	79:15	0:0	4	0
water	79:16	0:0	4	x1fff
water	79:21	0:0	4	;
if	80:8	81:20	4	(pid == ts -> current_pid)
cond	80:12	80:23	5	pid == ts -> current_pid
water	80:12	0:0	6	pid
op	80:16	0:0	6	==
water	80:19	0:0	6	ts
op	80:21	0:0	6	->
water	80:23	0:0	6	current_pid
stmts	81:12	81:20	5	
goto	81:12	81:20	6	out
water	81:17	0:0	7	out
if	83:8	92:8	4	(ts -> pids [ pid ] && ts -> pids [ pid ] -> type == MPEGTS_PES)
cond	83:12	83:52	5	ts -> pids [ pid ] && ts -> pids [ pid ] -> type == MPEGTS_PES
water	83:12	0:0	6	ts
op	83:14	0:0	6	->
water	83:16	0:0	6	pids
op	83:20	0:0	6	[
water	83:21	0:0	6	pid
op	83:24	0:0	6	]
op	83:26	0:0	6	&&
water	83:29	0:0	6	ts
op	83:31	0:0	6	->
water	83:33	0:0	6	pids
op	83:37	0:0	6	[
water	83:38	0:0	6	pid
op	83:41	0:0	6	]
op	83:42	0:0	6	->
water	83:44	0:0	6	type
op	83:49	0:0	6	==
water	83:52	0:0	6	MPEGTS_PES
stmts	83:64	92:8	5	
water	83:64	0:0	6	{
water	84:12	0:0	6	pes
op	84:16	0:0	6	=
water	84:18	0:0	6	ts
op	84:20	0:0	6	->
water	84:22	0:0	6	pids
op	84:26	0:0	6	[
water	84:27	0:0	6	pid
op	84:30	0:0	6	]
op	84:31	0:0	6	->
water	84:33	0:0	6	u
op	84:34	0:0	6	.
water	84:35	0:0	6	pes_filter
op	84:45	0:0	6	.
water	84:46	0:0	6	opaque
water	84:52	0:0	6	;
if	85:12	90:12	6	(! pes -> st)
cond	85:16	85:22	7	! pes -> st
op	85:16	0:0	8	!
water	85:17	0:0	8	pes
op	85:20	0:0	8	->
water	85:22	0:0	8	st
stmts	85:26	90:12	7	
water	85:26	0:0	8	{
water	86:16	0:0	8	pes
op	86:19	0:0	8	->
water	86:21	0:0	8	st
op	86:28	0:0	8	=
call	86:30	86:67	8	avformat_new_stream
arg	86:50	86:61	9	pes->stream
water	86:50	0:0	10	pes
op	86:53	0:0	10	->
water	86:55	0:0	10	stream
arg	86:63	86:67	9	NULL
water	86:63	0:0	10	NULL
water	86:68	0:0	8	;
if	87:16	88:28	8	(! pes -> st)
cond	87:20	87:26	9	! pes -> st
op	87:20	0:0	10	!
water	87:21	0:0	10	pes
op	87:24	0:0	10	->
water	87:26	0:0	10	st
stmts	88:20	88:28	9	
goto	88:20	88:28	10	out
water	88:25	0:0	11	out
water	89:16	0:0	8	pes
op	89:19	0:0	8	->
water	89:21	0:0	8	st
op	89:23	0:0	8	->
water	89:25	0:0	8	id
op	89:28	0:0	8	=
water	89:30	0:0	8	pes
op	89:33	0:0	8	->
water	89:35	0:0	8	pid
water	89:38	0:0	8	;
water	90:12	0:0	8	}
water	91:12	0:0	6	st
op	91:15	0:0	6	=
water	91:17	0:0	6	pes
op	91:20	0:0	6	->
water	91:22	0:0	6	st
water	91:24	0:0	6	;
water	92:8	0:0	6	}
else	92:10	102:8	4
stmts	92:15	102:8	5	
if	92:15	102:8	6	(stream_type != 0 x13)
cond	92:19	92:35	7	stream_type != 0 x13
water	92:19	0:0	8	stream_type
op	92:31	0:0	8	!=
water	92:34	0:0	8	0
water	92:35	0:0	8	x13
stmts	92:40	102:8	7	
water	92:40	0:0	8	{
if	93:12	94:54	8	(ts -> pids [ pid ])
cond	93:16	93:28	9	ts -> pids [ pid ]
water	93:16	0:0	10	ts
op	93:18	0:0	10	->
water	93:20	0:0	10	pids
op	93:24	0:0	10	[
water	93:25	0:0	10	pid
op	93:28	0:0	10	]
stmts	94:16	94:54	9	
call	94:16	94:53	10	mpegts_close_filter
arg	94:36	94:38	11	ts
water	94:36	0:0	12	ts
arg	94:40	94:53	11	ts->pids[pid]
water	94:40	0:0	12	ts
op	94:42	0:0	12	->
water	94:44	0:0	12	pids
op	94:48	0:0	12	[
water	94:49	0:0	12	pid
op	94:52	0:0	12	]
water	94:54	0:0	10	;
water	95:12	0:0	8	pes
op	95:16	0:0	8	=
call	95:18	95:49	8	add_pes_stream
arg	95:33	95:35	9	ts
water	95:33	0:0	10	ts
arg	95:37	95:40	9	pid
water	95:37	0:0	10	pid
arg	95:42	95:49	9	pcr_pid
water	95:42	0:0	10	pcr_pid
water	95:50	0:0	8	;
if	96:12	101:12	8	(pes)
cond	96:16	96:16	9	pes
water	96:16	0:0	10	pes
stmts	96:21	101:12	9	
water	96:21	0:0	10	{
water	97:16	0:0	10	st
op	97:19	0:0	10	=
call	97:21	97:58	10	avformat_new_stream
arg	97:41	97:52	11	pes->stream
water	97:41	0:0	12	pes
op	97:44	0:0	12	->
water	97:46	0:0	12	stream
arg	97:54	97:58	11	NULL
water	97:54	0:0	12	NULL
water	97:59	0:0	10	;
if	98:16	99:28	10	(! st)
cond	98:20	98:21	11	! st
op	98:20	0:0	12	!
water	98:21	0:0	12	st
stmts	99:20	99:28	11	
goto	99:20	99:28	12	out
water	99:25	0:0	13	out
water	100:16	0:0	10	st
op	100:18	0:0	10	->
water	100:20	0:0	10	id
op	100:23	0:0	10	=
water	100:25	0:0	10	pes
op	100:28	0:0	10	->
water	100:30	0:0	10	pid
water	100:33	0:0	10	;
water	101:12	0:0	10	}
water	102:8	0:0	8	}
else	102:10	113:8	4
stmts	102:15	113:8	5	
water	102:15	0:0	6	{
decl	103:12	103:59	6	int	idx
op	103:20	0:0	6	=
call	103:22	103:58	7	ff_find_stream_index
arg	103:43	103:53	8	ts->stream
water	103:43	0:0	9	ts
op	103:45	0:0	9	->
water	103:47	0:0	9	stream
arg	103:55	103:58	8	pid
water	103:55	0:0	9	pid
if	104:12	106:12	6	(idx >= 0)
cond	104:16	104:23	7	idx >= 0
water	104:16	0:0	8	idx
op	104:20	0:0	8	>=
water	104:23	0:0	8	0
stmts	104:26	106:12	7	
water	104:26	0:0	8	{
water	105:16	0:0	8	st
op	105:19	0:0	8	=
water	105:21	0:0	8	ts
op	105:23	0:0	8	->
water	105:25	0:0	8	stream
op	105:31	0:0	8	->
water	105:33	0:0	8	streams
op	105:40	0:0	8	[
water	105:41	0:0	8	idx
op	105:44	0:0	8	]
water	105:45	0:0	8	;
water	106:12	0:0	8	}
else	106:14	112:12	6
stmts	106:19	112:12	7	
water	106:19	0:0	8	{
water	107:16	0:0	8	st
op	107:19	0:0	8	=
call	107:21	107:57	8	avformat_new_stream
arg	107:41	107:51	9	ts->stream
water	107:41	0:0	10	ts
op	107:43	0:0	10	->
water	107:45	0:0	10	stream
arg	107:53	107:57	9	NULL
water	107:53	0:0	10	NULL
water	107:58	0:0	8	;
if	108:16	109:28	8	(! st)
cond	108:20	108:21	9	! st
op	108:20	0:0	10	!
water	108:21	0:0	10	st
stmts	109:20	109:28	9	
goto	109:20	109:28	10	out
water	109:25	0:0	11	out
water	110:16	0:0	8	st
op	110:18	0:0	8	->
water	110:20	0:0	8	id
op	110:23	0:0	8	=
water	110:25	0:0	8	pid
water	110:28	0:0	8	;
water	111:16	0:0	8	st
op	111:18	0:0	8	->
water	111:20	0:0	8	codec
op	111:25	0:0	8	->
water	111:27	0:0	8	codec_type
op	111:38	0:0	8	=
water	111:40	0:0	8	AVMEDIA_TYPE_DATA
water	111:57	0:0	8	;
water	112:12	0:0	8	}
water	113:8	0:0	6	}
if	114:8	115:20	4	(! st)
cond	114:12	114:13	5	! st
op	114:12	0:0	6	!
water	114:13	0:0	6	st
stmts	115:12	115:20	5	
goto	115:12	115:20	6	out
water	115:17	0:0	7	out
if	116:8	117:71	4	(pes && ! pes -> stream_type)
cond	116:12	116:25	5	pes && ! pes -> stream_type
water	116:12	0:0	6	pes
op	116:16	0:0	6	&&
op	116:19	0:0	6	!
water	116:20	0:0	6	pes
op	116:23	0:0	6	->
water	116:25	0:0	6	stream_type
stmts	117:12	117:71	5	
call	117:12	117:70	6	mpegts_set_stream_info
arg	117:35	117:37	7	st
water	117:35	0:0	8	st
arg	117:39	117:42	7	pes
water	117:39	0:0	8	pes
arg	117:44	117:55	7	stream_type
water	117:44	0:0	8	stream_type
arg	117:57	117:70	7	prog_reg_desc
water	117:57	0:0	8	prog_reg_desc
water	117:71	0:0	6	;
call	118:8	118:37	4	add_pid_to_pmt
arg	118:23	118:25	5	ts
water	118:23	0:0	6	ts
arg	118:27	118:32	5	h->id
water	118:27	0:0	6	h
op	118:28	0:0	6	->
water	118:30	0:0	6	id
arg	118:34	118:37	5	pid
water	118:34	0:0	6	pid
water	118:38	0:0	4	;
call	119:8	119:64	4	ff_program_add_stream_index
arg	119:36	119:46	5	ts->stream
water	119:36	0:0	6	ts
op	119:38	0:0	6	->
water	119:40	0:0	6	stream
arg	119:48	119:53	5	h->id
water	119:48	0:0	6	h
op	119:49	0:0	6	->
water	119:51	0:0	6	id
arg	119:55	119:64	5	st->index
water	119:55	0:0	6	st
op	119:57	0:0	6	->
water	119:59	0:0	6	index
water	119:65	0:0	4	;
water	120:8	0:0	4	desc_list_len
op	120:22	0:0	4	=
call	120:24	120:39	4	get16
arg	120:30	120:32	5	&p
op	120:30	0:0	6	&
water	120:31	0:0	6	p
arg	120:34	120:39	5	p_end
water	120:34	0:0	6	p_end
water	120:40	0:0	4	;
if	121:8	122:20	4	(desc_list_len < 0)
cond	121:12	121:28	5	desc_list_len < 0
water	121:12	0:0	6	desc_list_len
op	121:26	0:0	6	<
water	121:28	0:0	6	0
stmts	122:12	122:20	5	
goto	122:12	122:20	6	out
water	122:17	0:0	7	out
water	123:8	0:0	4	desc_list_len
op	123:22	0:0	4	&=
water	123:25	0:0	4	0
water	123:26	0:0	4	xfff
water	123:30	0:0	4	;
water	124:8	0:0	4	desc_list_end
op	124:23	0:0	4	=
water	124:25	0:0	4	p
op	124:27	0:0	4	+
water	124:29	0:0	4	desc_list_len
water	124:42	0:0	4	;
if	125:8	126:20	4	(desc_list_end > p_end)
cond	125:12	125:28	5	desc_list_end > p_end
water	125:12	0:0	6	desc_list_end
op	125:26	0:0	6	>
water	125:28	0:0	6	p_end
stmts	126:12	126:20	5	
goto	126:12	126:20	6	out
water	126:17	0:0	7	out
for	127:8	138:8	4	(;;)
forinit	127:13	127:13	5	;
water	127:13	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	127:17	138:8	5	
water	127:17	0:0	6	{
if	128:12	131:21	6	(ff_parse_mpeg2_descriptor (ts -> stream ,st ,stream_type ,& p ,desc_list_end ,mp4_descr ,mp4_descr_count ,pid ,ts ) < 0)
cond	128:16	130:70	7	ff_parse_mpeg2_descriptor (ts -> stream ,st ,stream_type ,& p ,desc_list_end ,mp4_descr ,mp4_descr_count ,pid ,ts ) < 0
call	128:16	130:66	8	ff_parse_mpeg2_descriptor
arg	128:42	128:52	9	ts->stream
water	128:42	0:0	10	ts
op	128:44	0:0	10	->
water	128:46	0:0	10	stream
arg	128:54	128:56	9	st
water	128:54	0:0	10	st
arg	128:58	128:69	9	stream_type
water	128:58	0:0	10	stream_type
arg	128:71	128:73	9	&p
op	128:71	0:0	10	&
water	128:72	0:0	10	p
arg	129:42	129:55	9	desc_list_end
water	129:42	0:0	10	desc_list_end
arg	129:57	129:66	9	mp4_descr
water	129:57	0:0	10	mp4_descr
arg	130:42	130:57	9	mp4_descr_count
water	130:42	0:0	10	mp4_descr_count
arg	130:59	130:62	9	pid
water	130:59	0:0	10	pid
arg	130:64	130:66	9	ts
water	130:64	0:0	10	ts
op	130:68	0:0	8	<
water	130:70	0:0	8	0
stmts	131:16	131:21	7	
break	131:16	131:21	8	
if	132:12	137:12	6	(pes && prog_reg_desc ==AV_RL32 ("HDMV" ) && stream_type == 0 x83 && pes -> sub_st)
cond	132:16	133:44	7	pes && prog_reg_desc ==AV_RL32 ("HDMV" ) && stream_type == 0 x83 && pes -> sub_st
water	132:16	0:0	8	pes
op	132:20	0:0	8	&&
water	132:23	0:0	8	prog_reg_desc
op	132:37	0:0	8	==
call	132:40	132:54	8	AV_RL32
arg	132:48	132:54	9	"HDMV"
water	132:48	0:0	10	"HDMV"
op	132:56	0:0	8	&&
water	133:16	0:0	8	stream_type
op	133:28	0:0	8	==
water	133:31	0:0	8	0
water	133:32	0:0	8	x83
op	133:36	0:0	8	&&
water	133:39	0:0	8	pes
op	133:42	0:0	8	->
water	133:44	0:0	8	sub_st
stmts	133:52	137:12	7	
water	133:52	0:0	8	{
call	134:16	135:62	8	ff_program_add_stream_index
arg	134:44	134:54	9	ts->stream
water	134:44	0:0	10	ts
op	134:46	0:0	10	->
water	134:48	0:0	10	stream
arg	134:56	134:61	9	h->id
water	134:56	0:0	10	h
op	134:57	0:0	10	->
water	134:59	0:0	10	id
arg	135:44	135:62	9	pes->sub_st->index
water	135:44	0:0	10	pes
op	135:47	0:0	10	->
water	135:49	0:0	10	sub_st
op	135:55	0:0	10	->
water	135:57	0:0	10	index
water	135:63	0:0	8	;
water	136:16	0:0	8	pes
op	136:19	0:0	8	->
water	136:21	0:0	8	sub_st
op	136:27	0:0	8	->
water	136:29	0:0	8	codec
op	136:34	0:0	8	->
water	136:36	0:0	8	codec_tag
op	136:46	0:0	8	=
water	136:48	0:0	8	st
op	136:50	0:0	8	->
water	136:52	0:0	8	codec
op	136:57	0:0	8	->
water	136:59	0:0	8	codec_tag
water	136:68	0:0	8	;
water	137:12	0:0	8	}
water	138:8	0:0	6	}
water	139:8	0:0	4	p
op	139:10	0:0	4	=
water	139:12	0:0	4	desc_list_end
water	139:25	0:0	4	;
water	140:4	0:0	4	}
if	141:4	142:43	2	(! ts -> pids [ pcr_pid ])
cond	141:8	141:25	3	! ts -> pids [ pcr_pid ]
op	141:8	0:0	4	!
water	141:9	0:0	4	ts
op	141:11	0:0	4	->
water	141:13	0:0	4	pids
op	141:17	0:0	4	[
water	141:18	0:0	4	pcr_pid
op	141:25	0:0	4	]
stmts	142:8	142:43	3	
call	142:8	142:42	4	mpegts_open_pcr_filter
arg	142:31	142:33	5	ts
water	142:31	0:0	6	ts
arg	142:35	142:42	5	pcr_pid
water	142:35	0:0	6	pcr_pid
water	142:43	0:0	4	;
label	143:0	143:3	2	out :
for	144:4	145:46	2	(i = 0 ;i < mp4_descr_count;i ++)
forinit	144:9	144:14	3	i = 0 ;
water	144:9	0:0	4	i
op	144:11	0:0	4	=
water	144:13	0:0	4	0
water	144:14	0:0	4	;
cond	144:16	144:20	3	i < mp4_descr_count
water	144:16	0:0	4	i
op	144:18	0:0	4	<
water	144:20	0:0	4	mp4_descr_count
forexpr	144:37	144:38	3	i ++
water	144:37	0:0	4	i
op	144:38	0:0	4	++
stmts	145:8	145:46	3	
call	145:8	145:45	4	av_free
arg	145:16	145:45	5	mp4_descr[i].dec_config_descr
water	145:16	0:0	6	mp4_descr
op	145:25	0:0	6	[
water	145:26	0:0	6	i
op	145:27	0:0	6	]
op	145:28	0:0	6	.
water	145:29	0:0	6	dec_config_descr
water	145:46	0:0	4	;
