func	1:0	60:0	0	int	ff_convert_dither
params	1:21	0:0	1	
param	1:22	1:38	2	DitherContext *	c
param	1:40	1:54	2	AudioData *	dst
param	1:56	1:70	2	AudioData *	src
stmnts	0:0	59:12	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:23	2	AudioData	*flt_data
if	6:4	7:25	2	(dst -> sample_fmt == AV_SAMPLE_FMT_S16P)
cond	6:8	6:27	3	dst -> sample_fmt == AV_SAMPLE_FMT_S16P
water	6:8	0:0	4	dst
op	6:11	0:0	4	->
water	6:13	0:0	4	sample_fmt
op	6:24	0:0	4	==
water	6:27	0:0	4	AV_SAMPLE_FMT_S16P
stmts	7:8	7:25	3	
water	7:8	0:0	4	c
op	7:9	0:0	4	->
water	7:11	0:0	4	s16_data
op	7:20	0:0	4	=
water	7:22	0:0	4	dst
water	7:25	0:0	4	;
else	8:4	13:4	2
stmts	8:9	13:4	3	
water	8:9	0:0	4	{
water	10:8	0:0	4	ret
op	10:12	0:0	4	=
call	10:14	10:64	4	ff_audio_data_realloc
arg	10:36	10:47	5	c->s16_data
water	10:36	0:0	6	c
op	10:37	0:0	6	->
water	10:39	0:0	6	s16_data
arg	10:49	10:64	5	src->nb_samples
water	10:49	0:0	6	src
op	10:52	0:0	6	->
water	10:54	0:0	6	nb_samples
water	10:65	0:0	4	;
if	11:8	12:22	4	(ret < 0)
cond	11:12	11:18	5	ret < 0
water	11:12	0:0	6	ret
op	11:16	0:0	6	<
water	11:18	0:0	6	0
stmts	12:12	12:22	5	
return	12:12	12:22	6	ret
water	12:19	0:0	7	ret
water	13:4	0:0	4	}
if	14:4	20:4	2	(src -> sample_fmt != AV_SAMPLE_FMT_FLTP || c -> apply_map)
cond	14:8	14:52	3	src -> sample_fmt != AV_SAMPLE_FMT_FLTP || c -> apply_map
water	14:8	0:0	4	src
op	14:11	0:0	4	->
water	14:13	0:0	4	sample_fmt
op	14:24	0:0	4	!=
water	14:27	0:0	4	AV_SAMPLE_FMT_FLTP
op	14:46	0:0	4	||
water	14:49	0:0	4	c
op	14:50	0:0	4	->
water	14:52	0:0	4	apply_map
stmts	14:63	20:4	3	
water	14:63	0:0	4	{
water	16:8	0:0	4	ret
op	16:12	0:0	4	=
call	16:14	16:64	4	ff_audio_data_realloc
arg	16:36	16:47	5	c->flt_data
water	16:36	0:0	6	c
op	16:37	0:0	6	->
water	16:39	0:0	6	flt_data
arg	16:49	16:64	5	src->nb_samples
water	16:49	0:0	6	src
op	16:52	0:0	6	->
water	16:54	0:0	6	nb_samples
water	16:65	0:0	4	;
if	17:8	18:22	4	(ret < 0)
cond	17:12	17:18	5	ret < 0
water	17:12	0:0	6	ret
op	17:16	0:0	6	<
water	17:18	0:0	6	0
stmts	18:12	18:22	5	
return	18:12	18:22	6	ret
water	18:19	0:0	7	ret
water	19:8	0:0	4	flt_data
op	19:17	0:0	4	=
water	19:19	0:0	4	c
op	19:20	0:0	4	->
water	19:22	0:0	4	flt_data
water	19:30	0:0	4	;
water	20:4	0:0	4	}
if	21:4	26:4	2	(src -> sample_fmt != AV_SAMPLE_FMT_FLTP)
cond	21:8	21:27	3	src -> sample_fmt != AV_SAMPLE_FMT_FLTP
water	21:8	0:0	4	src
op	21:11	0:0	4	->
water	21:13	0:0	4	sample_fmt
op	21:24	0:0	4	!=
water	21:27	0:0	4	AV_SAMPLE_FMT_FLTP
stmts	21:47	26:4	3	
water	21:47	0:0	4	{
water	23:8	0:0	4	ret
op	23:12	0:0	4	=
call	23:14	23:54	4	ff_audio_convert
arg	23:31	23:39	5	c->ac_in
water	23:31	0:0	6	c
op	23:32	0:0	6	->
water	23:34	0:0	6	ac_in
arg	23:41	23:49	5	flt_data
water	23:41	0:0	6	flt_data
arg	23:51	23:54	5	src
water	23:51	0:0	6	src
water	23:55	0:0	4	;
if	24:8	25:22	4	(ret < 0)
cond	24:12	24:18	5	ret < 0
water	24:12	0:0	6	ret
op	24:16	0:0	6	<
water	24:18	0:0	6	0
stmts	25:12	25:22	5	
return	25:12	25:22	6	ret
water	25:19	0:0	7	ret
water	26:4	0:0	4	}
else	26:6	30:4	2
stmts	26:11	30:4	3	
if	26:11	30:4	4	(c -> apply_map)
cond	26:15	26:18	5	c -> apply_map
water	26:15	0:0	6	c
op	26:16	0:0	6	->
water	26:18	0:0	6	apply_map
stmts	26:29	30:4	5	
water	26:29	0:0	6	{
water	27:8	0:0	6	ret
op	27:12	0:0	6	=
call	27:14	27:62	6	ff_audio_data_copy
arg	27:33	27:41	7	flt_data
water	27:33	0:0	8	flt_data
arg	27:43	27:46	7	src
water	27:43	0:0	8	src
arg	27:48	27:62	7	c->ch_map_info
water	27:48	0:0	8	c
op	27:49	0:0	8	->
water	27:51	0:0	8	ch_map_info
water	27:63	0:0	6	;
if	28:8	29:22	6	(ret < 0)
cond	28:12	28:18	7	ret < 0
water	28:12	0:0	8	ret
op	28:16	0:0	8	<
water	28:18	0:0	8	0
stmts	29:12	29:22	7	
return	29:12	29:22	8	ret
water	29:19	0:0	9	ret
water	30:4	0:0	6	}
else	30:6	32:4	2
stmts	30:11	32:4	3	
water	30:11	0:0	4	{
water	31:8	0:0	4	flt_data
op	31:17	0:0	4	=
water	31:19	0:0	4	src
water	31:22	0:0	4	;
water	32:4	0:0	4	}
if	34:4	45:4	2	(c -> method != AV_RESAMPLE_DITHER_TRIANGULAR_NS)
cond	34:8	34:21	3	c -> method != AV_RESAMPLE_DITHER_TRIANGULAR_NS
water	34:8	0:0	4	c
op	34:9	0:0	4	->
water	34:11	0:0	4	method
op	34:18	0:0	4	!=
water	34:21	0:0	4	AV_RESAMPLE_DITHER_TRIANGULAR_NS
stmts	34:55	45:4	3	
water	34:55	0:0	4	{
decl	35:8	35:82	4	int	ptr_align
op	35:26	0:0	4	=
call	35:28	35:81	5	FFMIN
arg	35:34	35:53	6	flt_data->ptr_align
water	35:34	0:0	7	flt_data
op	35:42	0:0	7	->
water	35:44	0:0	7	ptr_align
arg	35:59	35:81	6	c->s16_data->ptr_align
water	35:59	0:0	7	c
op	35:60	0:0	7	->
water	35:62	0:0	7	s16_data
op	35:70	0:0	7	->
water	35:72	0:0	7	ptr_align
decl	36:8	36:86	4	int	samples_align
op	36:26	0:0	4	=
call	36:28	36:85	5	FFMIN
arg	36:34	36:57	6	flt_data->samples_align
water	36:34	0:0	7	flt_data
op	36:42	0:0	7	->
water	36:44	0:0	7	samples_align
arg	36:59	36:85	6	c->s16_data->samples_align
water	36:59	0:0	7	c
op	36:60	0:0	7	->
water	36:62	0:0	7	s16_data
op	36:70	0:0	7	->
water	36:72	0:0	7	samples_align
decl	37:8	37:75	4	int	aligned_len
op	37:26	0:0	4	=
call	37:28	37:74	5	FFALIGN
arg	37:36	37:51	6	src->nb_samples
water	37:36	0:0	7	src
op	37:39	0:0	7	->
water	37:41	0:0	7	nb_samples
arg	37:53	37:74	6	c->ddsp.samples_align
water	37:53	0:0	7	c
op	37:54	0:0	7	->
water	37:56	0:0	7	ddsp
op	37:60	0:0	7	.
water	37:61	0:0	7	samples_align
if	38:8	41:8	4	(! ( ptr_align % c -> ddsp . ptr_align ) && samples_align >= aligned_len)
cond	38:12	38:65	5	! ( ptr_align % c -> ddsp . ptr_align ) && samples_align >= aligned_len
op	38:12	0:0	6	!
water	38:13	0:0	6	(
water	38:14	0:0	6	ptr_align
op	38:24	0:0	6	%
water	38:26	0:0	6	c
op	38:27	0:0	6	->
water	38:29	0:0	6	ddsp
op	38:33	0:0	6	.
water	38:34	0:0	6	ptr_align
water	38:43	0:0	6	)
op	38:45	0:0	6	&&
water	38:48	0:0	6	samples_align
op	38:62	0:0	6	>=
water	38:65	0:0	6	aligned_len
stmts	38:78	41:8	5	
water	38:78	0:0	6	{
water	39:12	0:0	6	c
op	39:13	0:0	6	->
water	39:15	0:0	6	quantize
op	39:29	0:0	6	=
water	39:31	0:0	6	c
op	39:32	0:0	6	->
water	39:34	0:0	6	ddsp
op	39:38	0:0	6	.
water	39:39	0:0	6	quantize
water	39:47	0:0	6	;
water	40:12	0:0	6	c
op	40:13	0:0	6	->
water	40:15	0:0	6	samples_align
op	40:29	0:0	6	=
water	40:31	0:0	6	c
op	40:32	0:0	6	->
water	40:34	0:0	6	ddsp
op	40:38	0:0	6	.
water	40:39	0:0	6	samples_align
water	40:52	0:0	6	;
water	41:8	0:0	6	}
else	41:10	44:8	4
stmts	41:15	44:8	5	
water	41:15	0:0	6	{
water	42:12	0:0	6	c
op	42:13	0:0	6	->
water	42:15	0:0	6	quantize
op	42:29	0:0	6	=
water	42:31	0:0	6	quantize_c
water	42:41	0:0	6	;
water	43:12	0:0	6	c
op	43:13	0:0	6	->
water	43:15	0:0	6	samples_align
op	43:29	0:0	6	=
water	43:31	0:0	6	1
water	43:32	0:0	6	;
water	44:8	0:0	6	}
water	45:4	0:0	4	}
water	46:4	0:0	2	ret
op	46:8	0:0	2	=
call	46:10	48:41	2	convert_samples
arg	46:26	46:27	3	c
water	46:26	0:0	4	c
arg	46:29	46:58	3	(int16_t**)c->s16_data->data
water	46:29	0:0	4	(
water	46:30	0:0	4	int16_t
op	46:38	0:0	4	*
op	46:39	0:0	4	*
water	46:40	0:0	4	)
water	46:41	0:0	4	c
op	46:42	0:0	4	->
water	46:44	0:0	4	s16_data
op	46:52	0:0	4	->
water	46:54	0:0	4	data
arg	47:26	47:57	3	(float*const*)flt_data->data
water	47:26	0:0	4	(
water	47:27	0:0	4	float
op	47:33	0:0	4	*
water	47:35	0:0	4	const
op	47:41	0:0	4	*
water	47:42	0:0	4	)
water	47:43	0:0	4	flt_data
op	47:51	0:0	4	->
water	47:53	0:0	4	data
arg	47:59	47:72	3	src->channels
water	47:59	0:0	4	src
op	47:62	0:0	4	->
water	47:64	0:0	4	channels
arg	48:26	48:41	3	src->nb_samples
water	48:26	0:0	4	src
op	48:29	0:0	4	->
water	48:31	0:0	4	nb_samples
water	48:42	0:0	2	;
if	49:4	50:18	2	(ret < 0)
cond	49:8	49:14	3	ret < 0
water	49:8	0:0	4	ret
op	49:12	0:0	4	<
water	49:14	0:0	4	0
stmts	50:8	50:18	3	
return	50:8	50:18	4	ret
water	50:15	0:0	5	ret
water	51:4	0:0	2	c
op	51:5	0:0	2	->
water	51:7	0:0	2	s16_data
op	51:15	0:0	2	->
water	51:17	0:0	2	nb_samples
op	51:28	0:0	2	=
water	51:30	0:0	2	src
op	51:33	0:0	2	->
water	51:35	0:0	2	nb_samples
water	51:45	0:0	2	;
if	53:4	57:4	2	(dst -> sample_fmt == AV_SAMPLE_FMT_S16)
cond	53:8	53:27	3	dst -> sample_fmt == AV_SAMPLE_FMT_S16
water	53:8	0:0	4	dst
op	53:11	0:0	4	->
water	53:13	0:0	4	sample_fmt
op	53:24	0:0	4	==
water	53:27	0:0	4	AV_SAMPLE_FMT_S16
stmts	53:46	57:4	3	
water	53:46	0:0	4	{
water	54:8	0:0	4	ret
op	54:12	0:0	4	=
call	54:14	54:58	4	ff_audio_convert
arg	54:31	54:40	5	c->ac_out
water	54:31	0:0	6	c
op	54:32	0:0	6	->
water	54:34	0:0	6	ac_out
arg	54:42	54:45	5	dst
water	54:42	0:0	6	dst
arg	54:47	54:58	5	c->s16_data
water	54:47	0:0	6	c
op	54:48	0:0	6	->
water	54:50	0:0	6	s16_data
water	54:59	0:0	4	;
if	55:8	56:22	4	(ret < 0)
cond	55:12	55:18	5	ret < 0
water	55:12	0:0	6	ret
op	55:16	0:0	6	<
water	55:18	0:0	6	0
stmts	56:12	56:22	5	
return	56:12	56:22	6	ret
water	56:19	0:0	7	ret
water	57:4	0:0	4	}
else	57:6	58:26	2
stmts	58:8	58:26	3	
water	58:8	0:0	4	c
op	58:9	0:0	4	->
water	58:11	0:0	4	s16_data
op	58:20	0:0	4	=
water	58:22	0:0	4	NULL
water	58:26	0:0	4	;
return	59:4	59:12	2	0
water	59:11	0:0	3	0
