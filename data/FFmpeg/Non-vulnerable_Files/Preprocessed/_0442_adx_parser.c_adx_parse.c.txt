func	1:0	46:0	0	static int	adx_parse
params	1:20	0:0	1	
param	1:21	1:45	2	AVCodecParserContext *	s1
param	2:27	2:48	2	AVCodecContext *	avctx
param	3:27	3:50	2	const uint8_t * *	poutbuf
param	3:52	3:69	2	int *	poutbuf_size
param	4:27	4:45	2	const uint8_t *	buf
param	4:47	4:59	2	int	buf_size
stmnts	0:0	45:15	1	
decl	6:4	6:38	2	ADXParseContext	*s
op	6:23	0:0	2	=
water	6:25	0:0	2	s1
op	6:27	0:0	2	->
water	6:29	0:0	2	priv_data
decl	7:4	7:29	2	ParseContext	*pc
op	7:21	0:0	2	=
op	7:23	0:0	2	&
water	7:24	0:0	2	s
op	7:25	0:0	2	->
water	7:27	0:0	2	pc
decl	8:4	8:28	2	int	next
op	8:13	0:0	2	=
water	8:15	0:0	2	END_NOT_FOUND
decl	9:4	9:9	2	int	i
decl	10:4	10:32	2	uint64_t	state
op	10:19	0:0	2	=
water	10:21	0:0	2	pc
op	10:23	0:0	2	->
water	10:25	0:0	2	state64
if	11:4	27:4	2	(! s -> header_size)
cond	11:8	11:12	3	! s -> header_size
op	11:8	0:0	4	!
water	11:9	0:0	4	s
op	11:10	0:0	4	->
water	11:12	0:0	4	header_size
stmts	11:25	27:4	3	
water	11:25	0:0	4	{
for	12:8	25:8	4	(i = 0 ;i < buf_size;i ++)
forinit	12:13	12:18	5	i = 0 ;
water	12:13	0:0	6	i
op	12:15	0:0	6	=
water	12:17	0:0	6	0
water	12:18	0:0	6	;
cond	12:20	12:24	5	i < buf_size
water	12:20	0:0	6	i
op	12:22	0:0	6	<
water	12:24	0:0	6	buf_size
forexpr	12:34	12:35	5	i ++
water	12:34	0:0	6	i
op	12:35	0:0	6	++
stmts	12:39	25:8	5	
water	12:39	0:0	6	{
water	13:12	0:0	6	state
op	13:18	0:0	6	=
water	13:20	0:0	6	(
water	13:21	0:0	6	state
op	13:27	0:0	6	<<
water	13:30	0:0	6	8
water	13:31	0:0	6	)
op	13:33	0:0	6	|
water	13:35	0:0	6	buf
op	13:38	0:0	6	[
water	13:39	0:0	6	i
op	13:40	0:0	6	]
water	13:41	0:0	6	;
if	15:12	24:12	6	(( state & 0 xFFFF0000FFFFFF00 ) == 0 x8000000003120400ULL)
cond	15:16	15:49	7	( state & 0 xFFFF0000FFFFFF00 ) == 0 x8000000003120400ULL
water	15:16	0:0	8	(
water	15:17	0:0	8	state
op	15:23	0:0	8	&
water	15:25	0:0	8	0
water	15:26	0:0	8	xFFFF0000FFFFFF00
water	15:43	0:0	8	)
op	15:45	0:0	8	==
water	15:48	0:0	8	0
water	15:49	0:0	8	x8000000003120400ULL
stmts	15:71	24:12	7	
water	15:71	0:0	8	{
decl	16:16	16:46	8	int	channels
op	16:32	0:0	8	=
water	16:34	0:0	8	state
op	16:40	0:0	8	&
water	16:42	0:0	8	0
water	16:43	0:0	8	xFF
decl	17:16	17:62	8	int	header_size
op	17:32	0:0	8	=
water	17:34	0:0	8	(
water	17:35	0:0	8	(
water	17:36	0:0	8	state
op	17:42	0:0	8	>>
water	17:45	0:0	8	32
water	17:47	0:0	8	)
op	17:49	0:0	8	&
water	17:51	0:0	8	0
water	17:52	0:0	8	xFFFF
water	17:57	0:0	8	)
op	17:59	0:0	8	+
water	17:61	0:0	8	4
if	18:16	23:16	8	(channels > 0 && header_size >= 8)
cond	18:20	18:51	9	channels > 0 && header_size >= 8
water	18:20	0:0	10	channels
op	18:29	0:0	10	>
water	18:31	0:0	10	0
op	18:33	0:0	10	&&
water	18:36	0:0	10	header_size
op	18:48	0:0	10	>=
water	18:51	0:0	10	8
stmts	18:54	23:16	9	
water	18:54	0:0	10	{
water	19:20	0:0	10	s
op	19:21	0:0	10	->
water	19:23	0:0	10	header_size
op	19:35	0:0	10	=
water	19:37	0:0	10	header_size
water	19:48	0:0	10	;
water	20:20	0:0	10	s
op	20:21	0:0	10	->
water	20:23	0:0	10	block_size
op	20:35	0:0	10	=
water	20:37	0:0	10	BLOCK_SIZE
op	20:48	0:0	10	*
water	20:50	0:0	10	channels
water	20:58	0:0	10	;
water	21:20	0:0	10	s
op	21:21	0:0	10	->
water	21:23	0:0	10	remaining
op	21:35	0:0	10	=
water	21:37	0:0	10	i
op	21:39	0:0	10	-
water	21:41	0:0	10	7
op	21:43	0:0	10	+
water	21:45	0:0	10	s
op	21:46	0:0	10	->
water	21:48	0:0	10	header_size
op	21:60	0:0	10	+
water	21:62	0:0	10	s
op	21:63	0:0	10	->
water	21:65	0:0	10	block_size
water	21:75	0:0	10	;
break	22:20	22:25	10	
water	23:16	0:0	10	}
water	24:12	0:0	8	}
water	25:8	0:0	6	}
water	26:8	0:0	4	pc
op	26:10	0:0	4	->
water	26:12	0:0	4	state64
op	26:20	0:0	4	=
water	26:22	0:0	4	state
water	26:27	0:0	4	;
water	27:4	0:0	4	}
if	28:4	36:4	2	(s -> header_size)
cond	28:8	28:11	3	s -> header_size
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	header_size
stmts	28:24	36:4	3	
water	28:24	0:0	4	{
if	29:8	30:40	4	(! s -> remaining)
cond	29:12	29:16	5	! s -> remaining
op	29:12	0:0	6	!
water	29:13	0:0	6	s
op	29:14	0:0	6	->
water	29:16	0:0	6	remaining
stmts	30:12	30:40	5	
water	30:12	0:0	6	s
op	30:13	0:0	6	->
water	30:15	0:0	6	remaining
op	30:25	0:0	6	=
water	30:27	0:0	6	s
op	30:28	0:0	6	->
water	30:30	0:0	6	block_size
water	30:40	0:0	6	;
if	31:8	34:8	4	(s -> remaining <= buf_size)
cond	31:12	31:28	5	s -> remaining <= buf_size
water	31:12	0:0	6	s
op	31:13	0:0	6	->
water	31:15	0:0	6	remaining
op	31:25	0:0	6	<=
water	31:28	0:0	6	buf_size
stmts	31:38	34:8	5	
water	31:38	0:0	6	{
water	32:12	0:0	6	next
op	32:17	0:0	6	=
water	32:19	0:0	6	s
op	32:20	0:0	6	->
water	32:22	0:0	6	remaining
water	32:31	0:0	6	;
water	33:12	0:0	6	s
op	33:13	0:0	6	->
water	33:15	0:0	6	remaining
op	33:25	0:0	6	=
water	33:27	0:0	6	0
water	33:28	0:0	6	;
water	34:8	0:0	6	}
else	34:10	35:36	4
stmts	35:12	35:36	5	
water	35:12	0:0	6	s
op	35:13	0:0	6	->
water	35:15	0:0	6	remaining
op	35:25	0:0	6	-=
water	35:28	0:0	6	buf_size
water	35:36	0:0	6	;
water	36:4	0:0	4	}
if	37:4	41:4	2	(ff_combine_frame (pc ,next ,& buf ,& buf_size ) < 0 || ! buf_size)
cond	37:8	37:60	3	ff_combine_frame (pc ,next ,& buf ,& buf_size ) < 0 || ! buf_size
call	37:8	37:50	4	ff_combine_frame
arg	37:25	37:27	5	pc
water	37:25	0:0	6	pc
arg	37:29	37:33	5	next
water	37:29	0:0	6	next
arg	37:35	37:39	5	&buf
op	37:35	0:0	6	&
water	37:36	0:0	6	buf
arg	37:41	37:50	5	&buf_size
op	37:41	0:0	6	&
water	37:42	0:0	6	buf_size
op	37:52	0:0	4	<
water	37:54	0:0	4	0
op	37:56	0:0	4	||
op	37:59	0:0	4	!
water	37:60	0:0	4	buf_size
stmts	37:70	41:4	3	
water	37:70	0:0	4	{
op	38:8	0:0	4	*
water	38:9	0:0	4	poutbuf
op	38:22	0:0	4	=
water	38:24	0:0	4	NULL
water	38:28	0:0	4	;
op	39:8	0:0	4	*
water	39:9	0:0	4	poutbuf_size
op	39:22	0:0	4	=
water	39:24	0:0	4	0
water	39:25	0:0	4	;
return	40:8	40:23	4	buf_size
water	40:15	0:0	5	buf_size
water	41:4	0:0	4	}
water	42:4	0:0	2	s1
op	42:6	0:0	2	->
water	42:8	0:0	2	duration
op	42:17	0:0	2	=
water	42:19	0:0	2	BLOCK_SAMPLES
water	42:32	0:0	2	;
op	43:4	0:0	2	*
water	43:5	0:0	2	poutbuf
op	43:13	0:0	2	=
water	43:15	0:0	2	buf
water	43:18	0:0	2	;
op	44:4	0:0	2	*
water	44:5	0:0	2	poutbuf_size
op	44:18	0:0	2	=
water	44:20	0:0	2	buf_size
water	44:28	0:0	2	;
return	45:4	45:15	2	next
water	45:11	0:0	3	next
