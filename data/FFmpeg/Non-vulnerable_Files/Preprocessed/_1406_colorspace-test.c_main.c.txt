func	1:0	122:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	121:20	1	
decl	3:4	3:18	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:18	2	int	funcNum
decl	4:4	4:40	2	uint8_t	*srcBuffer
op	4:23	0:0	2	=
call	4:25	4:39	3	av_malloc
arg	4:35	4:39	4	SIZE
water	4:35	0:0	5	SIZE
decl	5:4	5:40	2	uint8_t	*dstBuffer
op	5:23	0:0	2	=
call	5:25	5:39	3	av_malloc
arg	5:35	5:39	4	SIZE
water	5:35	0:0	5	SIZE
decl	6:4	6:26	2	int	failedNum
op	6:23	0:0	2	=
water	6:25	0:0	2	0
decl	7:4	7:26	2	int	passedNum
op	7:23	0:0	2	=
water	7:25	0:0	2	0
if	8:4	9:17	2	(! srcBuffer || ! dstBuffer)
cond	8:8	8:23	3	! srcBuffer || ! dstBuffer
op	8:8	0:0	4	!
water	8:9	0:0	4	srcBuffer
op	8:19	0:0	4	||
op	8:22	0:0	4	!
water	8:23	0:0	4	dstBuffer
stmts	9:8	9:17	3	
return	9:8	9:17	4	-1
op	9:15	0:0	5	-
water	9:16	0:0	5	1
call	10:4	10:60	2	av_log
arg	10:11	10:15	3	NULL
water	10:11	0:0	4	NULL
arg	10:17	10:28	3	AV_LOG_INFO
water	10:17	0:0	4	AV_LOG_INFO
arg	10:30	10:60	3	"memory corruption test ...\n"
water	10:30	0:0	4	"memory corruption test ...\n"
water	10:61	0:0	2	;
call	11:4	11:21	2	sws_rgb2rgb_init
water	11:22	0:0	2	;
for	12:4	117:4	2	(funcNum = 0 ;;funcNum ++)
forinit	12:9	12:20	3	funcNum = 0 ;
water	12:9	0:0	4	funcNum
op	12:17	0:0	4	=
water	12:19	0:0	4	0
water	12:20	0:0	4	;
cond	0:0	0:0	3	
forexpr	12:24	12:31	3	funcNum ++
water	12:24	0:0	4	funcNum
op	12:31	0:0	4	++
stmts	12:35	117:4	3	
water	12:35	0:0	4	{
struct	13:8	18:8	4	func_info_s
decl	14:12	14:23	5	int	src_bpp
decl	15:12	15:23	5	int	dst_bpp
decl	16:12	16:28	5	const char	*name
water	17:12	0:0	5	void
water	17:17	0:0	5	(
op	17:18	0:0	5	*
water	17:19	0:0	5	func
water	17:23	0:0	5	)
water	17:24	0:0	5	(
water	17:25	0:0	5	const
water	17:31	0:0	5	uint8_t
op	17:39	0:0	5	*
water	17:40	0:0	5	src
water	17:43	0:0	5	,
water	17:45	0:0	5	uint8_t
op	17:53	0:0	5	*
water	17:54	0:0	5	dst
water	17:57	0:0	5	,
water	17:59	0:0	5	int
water	17:63	0:0	5	src_size
water	17:71	0:0	5	)
water	17:72	0:0	5	;
decl	13:8	56:9	4	func_info_s	func_info[]
op	18:22	0:0	4	=
water	18:24	0:0	4	{
call	19:12	19:32	5	FUNC
arg	19:17	19:18	6	2
water	19:17	0:0	7	2
arg	19:20	19:21	6	2
water	19:20	0:0	7	2
arg	19:23	19:32	6	rgb12to15
water	19:23	0:0	7	rgb12to15
water	19:33	0:0	4	,
call	20:12	20:32	5	FUNC
arg	20:17	20:18	6	2
water	20:17	0:0	7	2
arg	20:20	20:21	6	2
water	20:20	0:0	7	2
arg	20:23	20:32	6	rgb15to16
water	20:23	0:0	7	rgb15to16
water	20:33	0:0	4	,
call	21:12	21:32	5	FUNC
arg	21:17	21:18	6	2
water	21:17	0:0	7	2
arg	21:20	21:21	6	3
water	21:20	0:0	7	3
arg	21:23	21:32	6	rgb15to24
water	21:23	0:0	7	rgb15to24
water	21:33	0:0	4	,
call	22:12	22:32	5	FUNC
arg	22:17	22:18	6	2
water	22:17	0:0	7	2
arg	22:20	22:21	6	4
water	22:20	0:0	7	4
arg	22:23	22:32	6	rgb15to32
water	22:23	0:0	7	rgb15to32
water	22:33	0:0	4	,
call	23:12	23:32	5	FUNC
arg	23:17	23:18	6	2
water	23:17	0:0	7	2
arg	23:20	23:21	6	3
water	23:20	0:0	7	3
arg	23:23	23:32	6	rgb16to24
water	23:23	0:0	7	rgb16to24
water	23:33	0:0	4	,
call	24:12	24:32	5	FUNC
arg	24:17	24:18	6	2
water	24:17	0:0	7	2
arg	24:20	24:21	6	4
water	24:20	0:0	7	4
arg	24:23	24:32	6	rgb16to32
water	24:23	0:0	7	rgb16to32
water	24:33	0:0	4	,
call	25:12	25:32	5	FUNC
arg	25:17	25:18	6	3
water	25:17	0:0	7	3
arg	25:20	25:21	6	2
water	25:20	0:0	7	2
arg	25:23	25:32	6	rgb24to15
water	25:23	0:0	7	rgb24to15
water	25:33	0:0	4	,
call	26:12	26:32	5	FUNC
arg	26:17	26:18	6	3
water	26:17	0:0	7	3
arg	26:20	26:21	6	2
water	26:20	0:0	7	2
arg	26:23	26:32	6	rgb24to16
water	26:23	0:0	7	rgb24to16
water	26:33	0:0	4	,
call	27:12	27:32	5	FUNC
arg	27:17	27:18	6	3
water	27:17	0:0	7	3
arg	27:20	27:21	6	4
water	27:20	0:0	7	4
arg	27:23	27:32	6	rgb24to32
water	27:23	0:0	7	rgb24to32
water	27:33	0:0	4	,
call	28:12	28:32	5	FUNC
arg	28:17	28:18	6	4
water	28:17	0:0	7	4
arg	28:20	28:21	6	2
water	28:20	0:0	7	2
arg	28:23	28:32	6	rgb32to15
water	28:23	0:0	7	rgb32to15
water	28:33	0:0	4	,
call	29:12	29:32	5	FUNC
arg	29:17	29:18	6	4
water	29:17	0:0	7	4
arg	29:20	29:21	6	2
water	29:20	0:0	7	2
arg	29:23	29:32	6	rgb32to16
water	29:23	0:0	7	rgb32to16
water	29:33	0:0	4	,
call	30:12	30:32	5	FUNC
arg	30:17	30:18	6	4
water	30:17	0:0	7	4
arg	30:20	30:21	6	3
water	30:20	0:0	7	3
arg	30:23	30:32	6	rgb32to24
water	30:23	0:0	7	rgb32to24
water	30:33	0:0	4	,
call	31:12	31:32	5	FUNC
arg	31:17	31:18	6	2
water	31:17	0:0	7	2
arg	31:20	31:21	6	2
water	31:20	0:0	7	2
arg	31:23	31:32	6	rgb16to15
water	31:23	0:0	7	rgb16to15
water	31:33	0:0	4	,
call	32:12	32:35	5	FUNC
arg	32:17	32:18	6	2
water	32:17	0:0	7	2
arg	32:20	32:21	6	2
water	32:20	0:0	7	2
arg	32:23	32:35	6	rgb12tobgr12
water	32:23	0:0	7	rgb12tobgr12
water	32:36	0:0	4	,
call	33:12	33:35	5	FUNC
arg	33:17	33:18	6	2
water	33:17	0:0	7	2
arg	33:20	33:21	6	2
water	33:20	0:0	7	2
arg	33:23	33:35	6	rgb15tobgr15
water	33:23	0:0	7	rgb15tobgr15
water	33:36	0:0	4	,
call	34:12	34:35	5	FUNC
arg	34:17	34:18	6	2
water	34:17	0:0	7	2
arg	34:20	34:21	6	2
water	34:20	0:0	7	2
arg	34:23	34:35	6	rgb15tobgr16
water	34:23	0:0	7	rgb15tobgr16
water	34:36	0:0	4	,
call	35:12	35:35	5	FUNC
arg	35:17	35:18	6	2
water	35:17	0:0	7	2
arg	35:20	35:21	6	3
water	35:20	0:0	7	3
arg	35:23	35:35	6	rgb15tobgr24
water	35:23	0:0	7	rgb15tobgr24
water	35:36	0:0	4	,
call	36:12	36:35	5	FUNC
arg	36:17	36:18	6	2
water	36:17	0:0	7	2
arg	36:20	36:21	6	4
water	36:20	0:0	7	4
arg	36:23	36:35	6	rgb15tobgr32
water	36:23	0:0	7	rgb15tobgr32
water	36:36	0:0	4	,
call	37:12	37:35	5	FUNC
arg	37:17	37:18	6	2
water	37:17	0:0	7	2
arg	37:20	37:21	6	2
water	37:20	0:0	7	2
arg	37:23	37:35	6	rgb16tobgr15
water	37:23	0:0	7	rgb16tobgr15
water	37:36	0:0	4	,
call	38:12	38:35	5	FUNC
arg	38:17	38:18	6	2
water	38:17	0:0	7	2
arg	38:20	38:21	6	2
water	38:20	0:0	7	2
arg	38:23	38:35	6	rgb16tobgr16
water	38:23	0:0	7	rgb16tobgr16
water	38:36	0:0	4	,
call	39:12	39:35	5	FUNC
arg	39:17	39:18	6	2
water	39:17	0:0	7	2
arg	39:20	39:21	6	3
water	39:20	0:0	7	3
arg	39:23	39:35	6	rgb16tobgr24
water	39:23	0:0	7	rgb16tobgr24
water	39:36	0:0	4	,
call	40:12	40:35	5	FUNC
arg	40:17	40:18	6	2
water	40:17	0:0	7	2
arg	40:20	40:21	6	4
water	40:20	0:0	7	4
arg	40:23	40:35	6	rgb16tobgr32
water	40:23	0:0	7	rgb16tobgr32
water	40:36	0:0	4	,
call	41:12	41:35	5	FUNC
arg	41:17	41:18	6	3
water	41:17	0:0	7	3
arg	41:20	41:21	6	2
water	41:20	0:0	7	2
arg	41:23	41:35	6	rgb24tobgr15
water	41:23	0:0	7	rgb24tobgr15
water	41:36	0:0	4	,
call	42:12	42:35	5	FUNC
arg	42:17	42:18	6	3
water	42:17	0:0	7	3
arg	42:20	42:21	6	2
water	42:20	0:0	7	2
arg	42:23	42:35	6	rgb24tobgr16
water	42:23	0:0	7	rgb24tobgr16
water	42:36	0:0	4	,
call	43:12	43:35	5	FUNC
arg	43:17	43:18	6	3
water	43:17	0:0	7	3
arg	43:20	43:21	6	3
water	43:20	0:0	7	3
arg	43:23	43:35	6	rgb24tobgr24
water	43:23	0:0	7	rgb24tobgr24
water	43:36	0:0	4	,
call	44:12	44:35	5	FUNC
arg	44:17	44:18	6	3
water	44:17	0:0	7	3
arg	44:20	44:21	6	4
water	44:20	0:0	7	4
arg	44:23	44:35	6	rgb24tobgr32
water	44:23	0:0	7	rgb24tobgr32
water	44:36	0:0	4	,
call	45:12	45:35	5	FUNC
arg	45:17	45:18	6	4
water	45:17	0:0	7	4
arg	45:20	45:21	6	2
water	45:20	0:0	7	2
arg	45:23	45:35	6	rgb32tobgr15
water	45:23	0:0	7	rgb32tobgr15
water	45:36	0:0	4	,
call	46:12	46:35	5	FUNC
arg	46:17	46:18	6	4
water	46:17	0:0	7	4
arg	46:20	46:21	6	2
water	46:20	0:0	7	2
arg	46:23	46:35	6	rgb32tobgr16
water	46:23	0:0	7	rgb32tobgr16
water	46:36	0:0	4	,
call	47:12	47:35	5	FUNC
arg	47:17	47:18	6	4
water	47:17	0:0	7	4
arg	47:20	47:21	6	3
water	47:20	0:0	7	3
arg	47:23	47:35	6	rgb32tobgr24
water	47:23	0:0	7	rgb32tobgr24
water	47:36	0:0	4	,
call	48:12	48:41	5	FUNC
arg	48:17	48:18	6	4
water	48:17	0:0	7	4
arg	48:20	48:21	6	4
water	48:20	0:0	7	4
arg	48:23	48:41	6	shuffle_bytes_2103
water	48:23	0:0	7	shuffle_bytes_2103
water	48:42	0:0	4	,
call	49:12	49:43	5	FUNC
arg	49:17	49:18	6	6
water	49:17	0:0	7	6
arg	49:20	49:21	6	6
water	49:20	0:0	7	6
arg	49:23	49:43	6	rgb48tobgr48_nobswap
water	49:23	0:0	7	rgb48tobgr48_nobswap
water	49:44	0:0	4	,
call	50:12	50:41	5	FUNC
arg	50:17	50:18	6	6
water	50:17	0:0	7	6
arg	50:20	50:21	6	6
water	50:20	0:0	7	6
arg	50:23	50:41	6	rgb48tobgr48_bswap
water	50:23	0:0	7	rgb48tobgr48_bswap
water	50:42	0:0	4	,
call	51:12	51:40	5	FUNC
arg	51:17	51:18	6	8
water	51:17	0:0	7	8
arg	51:20	51:21	6	6
water	51:20	0:0	7	6
arg	51:23	51:40	6	rgb64to48_nobswap
water	51:23	0:0	7	rgb64to48_nobswap
water	51:41	0:0	4	,
call	52:12	52:38	5	FUNC
arg	52:17	52:18	6	8
water	52:17	0:0	7	8
arg	52:20	52:21	6	6
water	52:20	0:0	7	6
arg	52:23	52:38	6	rgb64to48_bswap
water	52:23	0:0	7	rgb64to48_bswap
water	52:39	0:0	4	,
call	53:12	53:43	5	FUNC
arg	53:17	53:18	6	8
water	53:17	0:0	7	8
arg	53:20	53:21	6	6
water	53:20	0:0	7	6
arg	53:23	53:43	6	rgb64tobgr48_nobswap
water	53:23	0:0	7	rgb64tobgr48_nobswap
water	53:44	0:0	4	,
call	54:12	54:41	5	FUNC
arg	54:17	54:18	6	8
water	54:17	0:0	7	8
arg	54:20	54:21	6	6
water	54:20	0:0	7	6
arg	54:23	54:41	6	rgb64tobgr48_bswap
water	54:23	0:0	7	rgb64tobgr48_bswap
water	54:42	0:0	4	,
call	55:12	55:27	5	FUNC
arg	55:17	55:18	6	0
water	55:17	0:0	7	0
arg	55:20	55:21	6	0
water	55:20	0:0	7	0
arg	55:23	55:27	6	NULL
water	55:23	0:0	7	NULL
water	56:8	0:0	4	}
decl	57:8	57:17	4	int	width
decl	58:8	58:22	4	int	failed
op	58:19	0:0	4	=
water	58:21	0:0	4	0
decl	59:8	59:22	4	int	srcBpp
op	59:19	0:0	4	=
water	59:21	0:0	4	0
decl	60:8	60:22	4	int	dstBpp
op	60:19	0:0	4	=
water	60:21	0:0	4	0
if	61:8	62:17	4	(! func_info [ funcNum ] . func)
cond	61:12	61:32	5	! func_info [ funcNum ] . func
op	61:12	0:0	6	!
water	61:13	0:0	6	func_info
op	61:22	0:0	6	[
water	61:23	0:0	6	funcNum
op	61:30	0:0	6	]
op	61:31	0:0	6	.
water	61:32	0:0	6	func
stmts	62:12	62:17	5	
break	62:12	62:17	6	
call	63:8	63:37	4	av_log
arg	63:15	63:19	5	NULL
water	63:15	0:0	6	NULL
arg	63:21	63:32	5	AV_LOG_INFO
water	63:21	0:0	6	AV_LOG_INFO
arg	63:34	63:37	5	"."
water	63:34	0:0	6	"."
water	63:38	0:0	4	;
call	64:8	64:39	4	memset
arg	64:15	64:24	5	srcBuffer
water	64:15	0:0	6	srcBuffer
arg	64:26	64:33	5	srcByte
water	64:26	0:0	6	srcByte
arg	64:35	64:39	5	SIZE
water	64:35	0:0	6	SIZE
water	64:40	0:0	4	;
for	65:8	112:8	4	(width = 63 ;width > 0;width --)
forinit	65:13	65:23	5	width = 63 ;
water	65:13	0:0	6	width
op	65:19	0:0	6	=
water	65:21	0:0	6	63
water	65:23	0:0	6	;
cond	65:25	65:33	5	width > 0
water	65:25	0:0	6	width
op	65:31	0:0	6	>
water	65:33	0:0	6	0
forexpr	65:36	65:41	5	width --
water	65:36	0:0	6	width
op	65:41	0:0	6	--
stmts	65:45	112:8	5	
water	65:45	0:0	6	{
decl	66:12	66:25	6	int	dstOffset
for	67:12	111:12	6	(dstOffset = 128 ;dstOffset < 196;dstOffset += 4)
forinit	67:17	67:32	7	dstOffset = 128 ;
water	67:17	0:0	8	dstOffset
op	67:27	0:0	8	=
water	67:29	0:0	8	128
water	67:32	0:0	8	;
cond	67:34	67:46	7	dstOffset < 196
water	67:34	0:0	8	dstOffset
op	67:44	0:0	8	<
water	67:46	0:0	8	196
forexpr	67:51	67:64	7	dstOffset += 4
water	67:51	0:0	8	dstOffset
op	67:61	0:0	8	+=
water	67:64	0:0	8	4
stmts	67:67	111:12	7	
water	67:67	0:0	8	{
decl	68:16	68:29	8	int	srcOffset
call	69:16	69:47	8	memset
arg	69:23	69:32	9	dstBuffer
water	69:23	0:0	10	dstBuffer
arg	69:34	69:41	9	dstByte
water	69:34	0:0	10	dstByte
arg	69:43	69:47	9	SIZE
water	69:43	0:0	10	SIZE
water	69:48	0:0	8	;
for	70:16	110:16	8	(srcOffset = 128 ;srcOffset < 196;srcOffset += 4)
forinit	70:21	70:36	9	srcOffset = 128 ;
water	70:21	0:0	10	srcOffset
op	70:31	0:0	10	=
water	70:33	0:0	10	128
water	70:36	0:0	10	;
cond	70:38	70:50	9	srcOffset < 196
water	70:38	0:0	10	srcOffset
op	70:48	0:0	10	<
water	70:50	0:0	10	196
forexpr	70:55	70:68	9	srcOffset += 4
water	70:55	0:0	10	srcOffset
op	70:65	0:0	10	+=
water	70:68	0:0	10	4
stmts	70:71	110:16	9	
water	70:71	0:0	10	{
decl	71:20	71:60	10	uint8_t	*src
op	71:37	0:0	10	=
water	71:39	0:0	10	srcBuffer
op	71:49	0:0	10	+
water	71:51	0:0	10	srcOffset
decl	72:20	72:60	10	uint8_t	*dst
op	72:37	0:0	10	=
water	72:39	0:0	10	dstBuffer
op	72:49	0:0	10	+
water	72:51	0:0	10	dstOffset
decl	73:20	73:43	10	const char	*name
op	73:37	0:0	10	=
water	73:39	0:0	10	NULL
if	75:20	76:29	10	(failed)
cond	75:24	75:24	11	failed
water	75:24	0:0	12	failed
stmts	76:24	76:29	11	
break	76:24	76:29	12	
water	77:20	0:0	10	srcBpp
op	77:27	0:0	10	=
water	77:29	0:0	10	func_info
op	77:38	0:0	10	[
water	77:39	0:0	10	funcNum
op	77:46	0:0	10	]
op	77:47	0:0	10	.
water	77:48	0:0	10	src_bpp
water	77:55	0:0	10	;
water	78:20	0:0	10	dstBpp
op	78:27	0:0	10	=
water	78:29	0:0	10	func_info
op	78:38	0:0	10	[
water	78:39	0:0	10	funcNum
op	78:46	0:0	10	]
op	78:47	0:0	10	.
water	78:48	0:0	10	dst_bpp
water	78:55	0:0	10	;
water	79:20	0:0	10	name
op	79:27	0:0	10	=
water	79:29	0:0	10	func_info
op	79:38	0:0	10	[
water	79:39	0:0	10	funcNum
op	79:46	0:0	10	]
op	79:47	0:0	10	.
water	79:48	0:0	10	name
water	79:52	0:0	10	;
water	80:20	0:0	10	func_info
op	80:29	0:0	10	[
water	80:30	0:0	10	funcNum
op	80:37	0:0	10	]
op	80:38	0:0	10	.
call	80:39	80:68	10	func
arg	80:44	80:47	11	src
water	80:44	0:0	12	src
arg	80:49	80:52	11	dst
water	80:49	0:0	12	dst
arg	80:54	80:68	11	width*srcBpp
water	80:54	0:0	12	width
op	80:60	0:0	12	*
water	80:62	0:0	12	srcBpp
water	80:69	0:0	10	;
if	81:20	82:29	10	(! srcBpp)
cond	81:24	81:25	11	! srcBpp
op	81:24	0:0	12	!
water	81:25	0:0	12	srcBpp
stmts	82:24	82:29	11	
break	82:24	82:29	12	
for	83:20	91:20	10	(i = 0 ;i < SIZE;i ++)
forinit	83:25	83:30	11	i = 0 ;
water	83:25	0:0	12	i
op	83:27	0:0	12	=
water	83:29	0:0	12	0
water	83:30	0:0	12	;
cond	83:32	83:36	11	i < SIZE
water	83:32	0:0	12	i
op	83:34	0:0	12	<
water	83:36	0:0	12	SIZE
forexpr	83:42	83:43	11	i ++
water	83:42	0:0	12	i
op	83:43	0:0	12	++
stmts	83:47	91:20	11	
water	83:47	0:0	12	{
if	84:24	90:24	12	(srcBuffer [ i ] != srcByte)
cond	84:28	84:44	13	srcBuffer [ i ] != srcByte
water	84:28	0:0	14	srcBuffer
op	84:37	0:0	14	[
water	84:38	0:0	14	i
op	84:39	0:0	14	]
op	84:41	0:0	14	!=
water	84:44	0:0	14	srcByte
stmts	84:53	90:24	13	
water	84:53	0:0	14	{
call	85:28	87:71	14	av_log
arg	85:35	85:39	15	NULL
water	85:35	0:0	16	NULL
arg	85:41	85:52	15	AV_LOG_INFO
water	85:41	0:0	16	AV_LOG_INFO
arg	86:35	86:78	15	"src damaged at %d w:%d src:%d dst:%d %s\n"
water	86:35	0:0	16	"src damaged at %d w:%d src:%d dst:%d %s\n"
arg	87:35	87:36	15	i
water	87:35	0:0	16	i
arg	87:38	87:43	15	width
water	87:38	0:0	16	width
arg	87:45	87:54	15	srcOffset
water	87:45	0:0	16	srcOffset
arg	87:56	87:65	15	dstOffset
water	87:56	0:0	16	dstOffset
arg	87:67	87:71	15	name
water	87:67	0:0	16	name
water	87:72	0:0	14	;
water	88:28	0:0	14	failed
op	88:35	0:0	14	=
water	88:37	0:0	14	1
water	88:38	0:0	14	;
break	89:28	89:33	14	
water	90:24	0:0	14	}
water	91:20	0:0	12	}
for	92:20	100:20	10	(i = 0 ;i < dstOffset;i ++)
forinit	92:25	92:30	11	i = 0 ;
water	92:25	0:0	12	i
op	92:27	0:0	12	=
water	92:29	0:0	12	0
water	92:30	0:0	12	;
cond	92:32	92:36	11	i < dstOffset
water	92:32	0:0	12	i
op	92:34	0:0	12	<
water	92:36	0:0	12	dstOffset
forexpr	92:47	92:48	11	i ++
water	92:47	0:0	12	i
op	92:48	0:0	12	++
stmts	92:52	100:20	11	
water	92:52	0:0	12	{
if	93:24	99:24	12	(dstBuffer [ i ] != dstByte)
cond	93:28	93:44	13	dstBuffer [ i ] != dstByte
water	93:28	0:0	14	dstBuffer
op	93:37	0:0	14	[
water	93:38	0:0	14	i
op	93:39	0:0	14	]
op	93:41	0:0	14	!=
water	93:44	0:0	14	dstByte
stmts	93:53	99:24	13	
water	93:53	0:0	14	{
call	94:28	96:71	14	av_log
arg	94:35	94:39	15	NULL
water	94:35	0:0	16	NULL
arg	94:41	94:52	15	AV_LOG_INFO
water	94:41	0:0	16	AV_LOG_INFO
arg	95:35	95:78	15	"dst damaged at %d w:%d src:%d dst:%d %s\n"
water	95:35	0:0	16	"dst damaged at %d w:%d src:%d dst:%d %s\n"
arg	96:35	96:36	15	i
water	96:35	0:0	16	i
arg	96:38	96:43	15	width
water	96:38	0:0	16	width
arg	96:45	96:54	15	srcOffset
water	96:45	0:0	16	srcOffset
arg	96:56	96:65	15	dstOffset
water	96:56	0:0	16	dstOffset
arg	96:67	96:71	15	name
water	96:67	0:0	16	name
water	96:72	0:0	14	;
water	97:28	0:0	14	failed
op	97:35	0:0	14	=
water	97:37	0:0	14	1
water	97:38	0:0	14	;
break	98:28	98:33	14	
water	99:24	0:0	14	}
water	100:20	0:0	12	}
for	101:20	109:20	10	(i = dstOffset + width * dstBpp ;i < SIZE;i ++)
forinit	101:25	101:55	11	i = dstOffset + width * dstBpp ;
water	101:25	0:0	12	i
op	101:27	0:0	12	=
water	101:29	0:0	12	dstOffset
op	101:39	0:0	12	+
water	101:41	0:0	12	width
op	101:47	0:0	12	*
water	101:49	0:0	12	dstBpp
water	101:55	0:0	12	;
cond	101:57	101:61	11	i < SIZE
water	101:57	0:0	12	i
op	101:59	0:0	12	<
water	101:61	0:0	12	SIZE
forexpr	101:67	101:68	11	i ++
water	101:67	0:0	12	i
op	101:68	0:0	12	++
stmts	101:72	109:20	11	
water	101:72	0:0	12	{
if	102:24	108:24	12	(dstBuffer [ i ] != dstByte)
cond	102:28	102:44	13	dstBuffer [ i ] != dstByte
water	102:28	0:0	14	dstBuffer
op	102:37	0:0	14	[
water	102:38	0:0	14	i
op	102:39	0:0	14	]
op	102:41	0:0	14	!=
water	102:44	0:0	14	dstByte
stmts	102:53	108:24	13	
water	102:53	0:0	14	{
call	103:28	105:71	14	av_log
arg	103:35	103:39	15	NULL
water	103:35	0:0	16	NULL
arg	103:41	103:52	15	AV_LOG_INFO
water	103:41	0:0	16	AV_LOG_INFO
arg	104:35	104:78	15	"dst damaged at %d w:%d src:%d dst:%d %s\n"
water	104:35	0:0	16	"dst damaged at %d w:%d src:%d dst:%d %s\n"
arg	105:35	105:36	15	i
water	105:35	0:0	16	i
arg	105:38	105:43	15	width
water	105:38	0:0	16	width
arg	105:45	105:54	15	srcOffset
water	105:45	0:0	16	srcOffset
arg	105:56	105:65	15	dstOffset
water	105:56	0:0	16	dstOffset
arg	105:67	105:71	15	name
water	105:67	0:0	16	name
water	105:72	0:0	14	;
water	106:28	0:0	14	failed
op	106:35	0:0	14	=
water	106:37	0:0	14	1
water	106:38	0:0	14	;
break	107:28	107:33	14	
water	108:24	0:0	14	}
water	109:20	0:0	12	}
water	110:16	0:0	10	}
water	111:12	0:0	8	}
water	112:8	0:0	6	}
if	113:8	114:23	4	(failed)
cond	113:12	113:12	5	failed
water	113:12	0:0	6	failed
stmts	114:12	114:23	5	
water	114:12	0:0	6	failedNum
op	114:21	0:0	6	++
water	114:23	0:0	6	;
else	115:8	116:23	4
stmts	115:13	116:23	5	
if	115:13	116:23	6	(srcBpp)
cond	115:17	115:17	7	srcBpp
water	115:17	0:0	8	srcBpp
stmts	116:12	116:23	7	
water	116:12	0:0	8	passedNum
op	116:21	0:0	8	++
water	116:23	0:0	8	;
water	117:4	0:0	4	}
call	118:4	120:31	2	av_log
arg	118:11	118:15	3	NULL
water	118:11	0:0	4	NULL
arg	118:17	118:28	3	AV_LOG_INFO
water	118:17	0:0	4	AV_LOG_INFO
arg	119:11	119:78	3	"\n%d converters passed, %d converters randomly overwrote memory\n"
water	119:11	0:0	4	"\n%d converters passed, %d converters randomly overwrote memory\n"
arg	120:11	120:20	3	passedNum
water	120:11	0:0	4	passedNum
arg	120:22	120:31	3	failedNum
water	120:22	0:0	4	failedNum
water	120:32	0:0	2	;
return	121:4	121:20	2	failedNum
water	121:11	0:0	3	failedNum
