func	1:0	83:0	0	static void	write_element
params	1:25	0:0	1	
param	1:26	1:46	2	AlacEncodeContext *	s
param	2:26	2:59	2	enum AlacRawDataBlockType	element
param	2:61	2:73	2	int	instance
param	3:26	3:49	2	const uint8_t *	samples0
param	3:51	3:74	2	const uint8_t *	samples1
stmnts	5:4	82:4	1	
water	5:4	0:0	2	uint8_t
water	5:12	0:0	2	const
op	5:18	0:0	2	*
water	5:19	0:0	2	samples
op	5:26	0:0	2	[
water	5:27	0:0	2	2
op	5:28	0:0	2	]
op	5:30	0:0	2	=
water	5:32	0:0	2	{
water	5:34	0:0	2	samples0
water	5:42	0:0	2	,
water	5:44	0:0	2	samples1
water	5:53	0:0	2	}
water	5:54	0:0	2	;
decl	6:4	6:22	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:22	2	int	j
water	6:12	0:0	2	,
decl	6:4	6:22	2	int	channels
decl	7:4	7:27	2	int	prediction_type
op	7:24	0:0	2	=
water	7:26	0:0	2	0
decl	8:4	8:33	2	PutBitContext	*pb
op	8:22	0:0	2	=
op	8:24	0:0	2	&
water	8:25	0:0	2	s
op	8:26	0:0	2	->
water	8:28	0:0	2	pbctx
water	9:4	0:0	2	channels
op	9:13	0:0	2	=
water	9:15	0:0	2	element
op	9:23	0:0	2	==
water	9:26	0:0	2	TYPE_CPE
water	9:35	0:0	2	?
water	9:37	0:0	2	2
water	9:39	0:0	2	:
water	9:41	0:0	2	1
water	9:42	0:0	2	;
if	10:4	29:4	2	(s -> verbatim)
cond	10:8	10:11	3	s -> verbatim
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	verbatim
stmts	10:21	29:4	3	
water	10:21	0:0	4	{
call	11:8	11:49	4	write_element_header
arg	11:29	11:30	5	s
water	11:29	0:0	6	s
arg	11:32	11:39	5	element
water	11:32	0:0	6	element
arg	11:41	11:49	5	instance
water	11:41	0:0	6	instance
water	11:50	0:0	4	;
if	13:8	21:8	4	(s -> avctx -> sample_fmt == AV_SAMPLE_FMT_S32P)
cond	13:12	13:36	5	s -> avctx -> sample_fmt == AV_SAMPLE_FMT_S32P
water	13:12	0:0	6	s
op	13:13	0:0	6	->
water	13:15	0:0	6	avctx
op	13:20	0:0	6	->
water	13:22	0:0	6	sample_fmt
op	13:33	0:0	6	==
water	13:36	0:0	6	AV_SAMPLE_FMT_S32P
stmts	13:56	21:8	5	
water	13:56	0:0	6	{
decl	14:12	14:58	6	int	shift
op	14:22	0:0	6	=
water	14:24	0:0	6	32
op	14:27	0:0	6	-
water	14:29	0:0	6	s
op	14:30	0:0	6	->
water	14:32	0:0	6	avctx
op	14:37	0:0	6	->
water	14:39	0:0	6	bits_per_raw_sample
water	15:12	0:0	6	int32_t
water	15:20	0:0	6	const
op	15:26	0:0	6	*
water	15:27	0:0	6	samples_s32
op	15:38	0:0	6	[
water	15:39	0:0	6	2
op	15:40	0:0	6	]
op	15:42	0:0	6	=
water	15:44	0:0	6	{
water	15:46	0:0	6	(
water	15:47	0:0	6	const
water	15:53	0:0	6	int32_t
op	15:61	0:0	6	*
water	15:62	0:0	6	)
water	15:63	0:0	6	samples0
water	15:71	0:0	6	,
water	16:46	0:0	6	(
water	16:47	0:0	6	const
water	16:53	0:0	6	int32_t
op	16:61	0:0	6	*
water	16:62	0:0	6	)
water	16:63	0:0	6	samples1
water	16:72	0:0	6	}
water	16:73	0:0	6	;
for	17:12	20:57	6	(i = 0 ;i < s -> frame_size;i ++)
forinit	17:17	17:22	7	i = 0 ;
water	17:17	0:0	8	i
op	17:19	0:0	8	=
water	17:21	0:0	8	0
water	17:22	0:0	8	;
cond	17:24	17:31	7	i < s -> frame_size
water	17:24	0:0	8	i
op	17:26	0:0	8	<
water	17:28	0:0	8	s
op	17:29	0:0	8	->
water	17:31	0:0	8	frame_size
forexpr	17:43	17:44	7	i ++
water	17:43	0:0	8	i
op	17:44	0:0	8	++
stmts	18:16	20:57	7	
for	18:16	20:57	8	(j = 0 ;j < channels;j ++)
forinit	18:21	18:26	9	j = 0 ;
water	18:21	0:0	10	j
op	18:23	0:0	10	=
water	18:25	0:0	10	0
water	18:26	0:0	10	;
cond	18:28	18:32	9	j < channels
water	18:28	0:0	10	j
op	18:30	0:0	10	<
water	18:32	0:0	10	channels
forexpr	18:42	18:43	9	j ++
water	18:42	0:0	10	j
op	18:43	0:0	10	++
stmts	19:20	20:57	9	
call	19:20	20:56	10	put_sbits
arg	19:30	19:32	11	pb
water	19:30	0:0	12	pb
arg	19:34	19:63	11	s->avctx->bits_per_raw_sample
water	19:34	0:0	12	s
op	19:35	0:0	12	->
water	19:37	0:0	12	avctx
op	19:42	0:0	12	->
water	19:44	0:0	12	bits_per_raw_sample
arg	20:30	20:56	11	samples_s32[j][i]>>shift
water	20:30	0:0	12	samples_s32
op	20:41	0:0	12	[
water	20:42	0:0	12	j
op	20:43	0:0	12	]
op	20:44	0:0	12	[
water	20:45	0:0	12	i
op	20:46	0:0	12	]
op	20:48	0:0	12	>>
water	20:51	0:0	12	shift
water	20:57	0:0	10	;
water	21:8	0:0	6	}
else	21:10	28:8	4
stmts	21:15	28:8	5	
water	21:15	0:0	6	{
water	22:12	0:0	6	int16_t
water	22:20	0:0	6	const
op	22:26	0:0	6	*
water	22:27	0:0	6	samples_s16
op	22:38	0:0	6	[
water	22:39	0:0	6	2
op	22:40	0:0	6	]
op	22:42	0:0	6	=
water	22:44	0:0	6	{
water	22:46	0:0	6	(
water	22:47	0:0	6	const
water	22:53	0:0	6	int16_t
op	22:61	0:0	6	*
water	22:62	0:0	6	)
water	22:63	0:0	6	samples0
water	22:71	0:0	6	,
water	23:46	0:0	6	(
water	23:47	0:0	6	const
water	23:53	0:0	6	int16_t
op	23:61	0:0	6	*
water	23:62	0:0	6	)
water	23:63	0:0	6	samples1
water	23:72	0:0	6	}
water	23:73	0:0	6	;
for	24:12	27:48	6	(i = 0 ;i < s -> frame_size;i ++)
forinit	24:17	24:22	7	i = 0 ;
water	24:17	0:0	8	i
op	24:19	0:0	8	=
water	24:21	0:0	8	0
water	24:22	0:0	8	;
cond	24:24	24:31	7	i < s -> frame_size
water	24:24	0:0	8	i
op	24:26	0:0	8	<
water	24:28	0:0	8	s
op	24:29	0:0	8	->
water	24:31	0:0	8	frame_size
forexpr	24:43	24:44	7	i ++
water	24:43	0:0	8	i
op	24:44	0:0	8	++
stmts	25:16	27:48	7	
for	25:16	27:48	8	(j = 0 ;j < channels;j ++)
forinit	25:21	25:26	9	j = 0 ;
water	25:21	0:0	10	j
op	25:23	0:0	10	=
water	25:25	0:0	10	0
water	25:26	0:0	10	;
cond	25:28	25:32	9	j < channels
water	25:28	0:0	10	j
op	25:30	0:0	10	<
water	25:32	0:0	10	channels
forexpr	25:42	25:43	9	j ++
water	25:42	0:0	10	j
op	25:43	0:0	10	++
stmts	26:20	27:48	9	
call	26:20	27:47	10	put_sbits
arg	26:30	26:32	11	pb
water	26:30	0:0	12	pb
arg	26:34	26:63	11	s->avctx->bits_per_raw_sample
water	26:34	0:0	12	s
op	26:35	0:0	12	->
water	26:37	0:0	12	avctx
op	26:42	0:0	12	->
water	26:44	0:0	12	bits_per_raw_sample
arg	27:30	27:47	11	samples_s16[j][i]
water	27:30	0:0	12	samples_s16
op	27:41	0:0	12	[
water	27:42	0:0	12	j
op	27:43	0:0	12	]
op	27:44	0:0	12	[
water	27:45	0:0	12	i
op	27:46	0:0	12	]
water	27:48	0:0	10	;
water	28:8	0:0	6	}
water	29:4	0:0	4	}
else	29:6	82:4	2
stmts	29:11	82:4	3	
water	29:11	0:0	4	{
water	30:8	0:0	4	s
op	30:9	0:0	4	->
water	30:11	0:0	4	write_sample_size
op	30:29	0:0	4	=
water	30:31	0:0	4	s
op	30:32	0:0	4	->
water	30:34	0:0	4	avctx
op	30:39	0:0	4	->
water	30:41	0:0	4	bits_per_raw_sample
op	30:61	0:0	4	-
water	30:63	0:0	4	s
op	30:64	0:0	4	->
water	30:66	0:0	4	extra_bits
op	30:77	0:0	4	+
water	31:31	0:0	4	channels
op	31:40	0:0	4	-
water	31:42	0:0	4	1
water	31:43	0:0	4	;
call	32:8	32:48	4	init_sample_buffers
arg	32:28	32:29	5	s
water	32:28	0:0	6	s
arg	32:31	32:39	5	channels
water	32:31	0:0	6	channels
arg	32:41	32:48	5	samples
water	32:41	0:0	6	samples
water	32:49	0:0	4	;
call	33:8	33:49	4	write_element_header
arg	33:29	33:30	5	s
water	33:29	0:0	6	s
arg	33:32	33:39	5	element
water	33:32	0:0	6	element
arg	33:41	33:49	5	instance
water	33:41	0:0	6	instance
water	33:50	0:0	4	;
if	35:8	45:8	4	(s -> extra_bits)
cond	35:12	35:15	5	s -> extra_bits
water	35:12	0:0	6	s
op	35:13	0:0	6	->
water	35:15	0:0	6	extra_bits
stmts	35:27	45:8	5	
water	35:27	0:0	6	{
decl	36:12	36:52	6	uint32_t	mask
op	36:26	0:0	6	=
water	36:28	0:0	6	(
water	36:29	0:0	6	1
op	36:31	0:0	6	<<
water	36:34	0:0	6	s
op	36:35	0:0	6	->
water	36:37	0:0	6	extra_bits
water	36:47	0:0	6	)
op	36:49	0:0	6	-
water	36:51	0:0	6	1
for	37:12	44:12	6	(j = 0 ;j < channels;j ++)
forinit	37:17	37:22	7	j = 0 ;
water	37:17	0:0	8	j
op	37:19	0:0	8	=
water	37:21	0:0	8	0
water	37:22	0:0	8	;
cond	37:24	37:28	7	j < channels
water	37:24	0:0	8	j
op	37:26	0:0	8	<
water	37:28	0:0	8	channels
forexpr	37:38	37:39	7	j ++
water	37:38	0:0	8	j
op	37:39	0:0	8	++
stmts	37:43	44:12	7	
water	37:43	0:0	8	{
decl	38:16	38:52	8	int32_t	*extra
op	38:31	0:0	8	=
water	38:33	0:0	8	s
op	38:34	0:0	8	->
water	38:36	0:0	8	predictor_buf
op	38:49	0:0	8	[
water	38:50	0:0	8	j
op	38:51	0:0	8	]
decl	39:16	39:49	8	int32_t	*smp
op	39:31	0:0	8	=
water	39:33	0:0	8	s
op	39:34	0:0	8	->
water	39:36	0:0	8	sample_buf
op	39:46	0:0	8	[
water	39:47	0:0	8	j
op	39:48	0:0	8	]
for	40:16	43:16	8	(i = 0 ;i < s -> frame_size;i ++)
forinit	40:21	40:26	9	i = 0 ;
water	40:21	0:0	10	i
op	40:23	0:0	10	=
water	40:25	0:0	10	0
water	40:26	0:0	10	;
cond	40:28	40:35	9	i < s -> frame_size
water	40:28	0:0	10	i
op	40:30	0:0	10	<
water	40:32	0:0	10	s
op	40:33	0:0	10	->
water	40:35	0:0	10	frame_size
forexpr	40:47	40:48	9	i ++
water	40:47	0:0	10	i
op	40:48	0:0	10	++
stmts	40:52	43:16	9	
water	40:52	0:0	10	{
water	41:20	0:0	10	extra
op	41:25	0:0	10	[
water	41:26	0:0	10	i
op	41:27	0:0	10	]
op	41:29	0:0	10	=
water	41:31	0:0	10	smp
op	41:34	0:0	10	[
water	41:35	0:0	10	i
op	41:36	0:0	10	]
op	41:38	0:0	10	&
water	41:40	0:0	10	mask
water	41:44	0:0	10	;
water	42:20	0:0	10	smp
op	42:23	0:0	10	[
water	42:24	0:0	10	i
op	42:25	0:0	10	]
op	42:27	0:0	10	>>=
water	42:31	0:0	10	s
op	42:32	0:0	10	->
water	42:34	0:0	10	extra_bits
water	42:44	0:0	10	;
water	43:16	0:0	10	}
water	44:12	0:0	8	}
water	45:8	0:0	6	}
if	46:8	47:40	4	(channels == 2)
cond	46:12	46:24	5	channels == 2
water	46:12	0:0	6	channels
op	46:21	0:0	6	==
water	46:24	0:0	6	2
stmts	47:12	47:40	5	
call	47:12	47:39	6	alac_stereo_decorrelation
arg	47:38	47:39	7	s
water	47:38	0:0	8	s
water	47:40	0:0	6	;
else	48:8	49:64	4
stmts	49:12	49:64	5	
water	49:12	0:0	6	s
op	49:13	0:0	6	->
water	49:15	0:0	6	interlacing_shift
op	49:33	0:0	6	=
water	49:35	0:0	6	s
op	49:36	0:0	6	->
water	49:38	0:0	6	interlacing_leftweight
op	49:61	0:0	6	=
water	49:63	0:0	6	0
water	49:64	0:0	6	;
call	50:8	50:44	4	put_bits
arg	50:17	50:19	5	pb
water	50:17	0:0	6	pb
arg	50:21	50:22	5	8
water	50:21	0:0	6	8
arg	50:24	50:44	5	s->interlacing_shift
water	50:24	0:0	6	s
op	50:25	0:0	6	->
water	50:27	0:0	6	interlacing_shift
water	50:45	0:0	4	;
call	51:8	51:49	4	put_bits
arg	51:17	51:19	5	pb
water	51:17	0:0	6	pb
arg	51:21	51:22	5	8
water	51:21	0:0	6	8
arg	51:24	51:49	5	s->interlacing_leftweight
water	51:24	0:0	6	s
op	51:25	0:0	6	->
water	51:27	0:0	6	interlacing_leftweight
water	51:50	0:0	4	;
for	52:8	61:8	4	(i = 0 ;i < channels;i ++)
forinit	52:13	52:18	5	i = 0 ;
water	52:13	0:0	6	i
op	52:15	0:0	6	=
water	52:17	0:0	6	0
water	52:18	0:0	6	;
cond	52:20	52:24	5	i < channels
water	52:20	0:0	6	i
op	52:22	0:0	6	<
water	52:24	0:0	6	channels
forexpr	52:34	52:35	5	i ++
water	52:34	0:0	6	i
op	52:35	0:0	6	++
stmts	52:39	61:8	5	
water	52:39	0:0	6	{
call	53:12	53:38	6	calc_predictor_params
arg	53:34	53:35	7	s
water	53:34	0:0	8	s
arg	53:37	53:38	7	i
water	53:37	0:0	8	i
water	53:39	0:0	6	;
call	54:12	54:43	6	put_bits
arg	54:21	54:23	7	pb
water	54:21	0:0	8	pb
arg	54:25	54:26	7	4
water	54:25	0:0	8	4
arg	54:28	54:43	7	prediction_type
water	54:28	0:0	8	prediction_type
water	54:44	0:0	6	;
call	55:12	55:47	6	put_bits
arg	55:21	55:23	7	pb
water	55:21	0:0	8	pb
arg	55:25	55:26	7	4
water	55:25	0:0	8	4
arg	55:28	55:47	7	s->lpc[i].lpc_quant
water	55:28	0:0	8	s
op	55:29	0:0	8	->
water	55:31	0:0	8	lpc
op	55:34	0:0	8	[
water	55:35	0:0	8	i
op	55:36	0:0	8	]
op	55:37	0:0	8	.
water	55:38	0:0	8	lpc_quant
water	55:48	0:0	6	;
call	56:12	56:47	6	put_bits
arg	56:21	56:23	7	pb
water	56:21	0:0	8	pb
arg	56:25	56:26	7	3
water	56:25	0:0	8	3
arg	56:28	56:47	7	s->rc.rice_modifier
water	56:28	0:0	8	s
op	56:29	0:0	8	->
water	56:31	0:0	8	rc
op	56:33	0:0	8	.
water	56:34	0:0	8	rice_modifier
water	56:48	0:0	6	;
call	57:12	57:47	6	put_bits
arg	57:21	57:23	7	pb
water	57:21	0:0	8	pb
arg	57:25	57:26	7	5
water	57:25	0:0	8	5
arg	57:28	57:47	7	s->lpc[i].lpc_order
water	57:28	0:0	8	s
op	57:29	0:0	8	->
water	57:31	0:0	8	lpc
op	57:34	0:0	8	[
water	57:35	0:0	8	i
op	57:36	0:0	8	]
op	57:37	0:0	8	.
water	57:38	0:0	8	lpc_order
water	57:48	0:0	6	;
for	59:12	60:57	6	(j = 0 ;j < s -> lpc [ i ] . lpc_order;j ++)
forinit	59:17	59:22	7	j = 0 ;
water	59:17	0:0	8	j
op	59:19	0:0	8	=
water	59:21	0:0	8	0
water	59:22	0:0	8	;
cond	59:24	59:38	7	j < s -> lpc [ i ] . lpc_order
water	59:24	0:0	8	j
op	59:26	0:0	8	<
water	59:28	0:0	8	s
op	59:29	0:0	8	->
water	59:31	0:0	8	lpc
op	59:34	0:0	8	[
water	59:35	0:0	8	i
op	59:36	0:0	8	]
op	59:37	0:0	8	.
water	59:38	0:0	8	lpc_order
forexpr	59:49	59:50	7	j ++
water	59:49	0:0	8	j
op	59:50	0:0	8	++
stmts	60:16	60:57	7	
call	60:16	60:56	8	put_sbits
arg	60:26	60:28	9	pb
water	60:26	0:0	10	pb
arg	60:30	60:32	9	16
water	60:30	0:0	10	16
arg	60:34	60:56	9	s->lpc[i].lpc_coeff[j]
water	60:34	0:0	10	s
op	60:35	0:0	10	->
water	60:37	0:0	10	lpc
op	60:40	0:0	10	[
water	60:41	0:0	10	i
op	60:42	0:0	10	]
op	60:43	0:0	10	.
water	60:44	0:0	10	lpc_coeff
op	60:53	0:0	10	[
water	60:54	0:0	10	j
op	60:55	0:0	10	]
water	60:57	0:0	8	;
water	61:8	0:0	6	}
if	63:8	69:8	4	(s -> extra_bits)
cond	63:12	63:15	5	s -> extra_bits
water	63:12	0:0	6	s
op	63:13	0:0	6	->
water	63:15	0:0	6	extra_bits
stmts	63:27	69:8	5	
water	63:27	0:0	6	{
for	64:12	68:12	6	(i = 0 ;i < s -> frame_size;i ++)
forinit	64:17	64:22	7	i = 0 ;
water	64:17	0:0	8	i
op	64:19	0:0	8	=
water	64:21	0:0	8	0
water	64:22	0:0	8	;
cond	64:24	64:31	7	i < s -> frame_size
water	64:24	0:0	8	i
op	64:26	0:0	8	<
water	64:28	0:0	8	s
op	64:29	0:0	8	->
water	64:31	0:0	8	frame_size
forexpr	64:43	64:44	7	i ++
water	64:43	0:0	8	i
op	64:44	0:0	8	++
stmts	64:48	68:12	7	
water	64:48	0:0	8	{
for	65:16	67:16	8	(j = 0 ;j < channels;j ++)
forinit	65:21	65:26	9	j = 0 ;
water	65:21	0:0	10	j
op	65:23	0:0	10	=
water	65:25	0:0	10	0
water	65:26	0:0	10	;
cond	65:28	65:32	9	j < channels
water	65:28	0:0	10	j
op	65:30	0:0	10	<
water	65:32	0:0	10	channels
forexpr	65:42	65:43	9	j ++
water	65:42	0:0	10	j
op	65:43	0:0	10	++
stmts	65:47	67:16	9	
water	65:47	0:0	10	{
call	66:20	66:70	10	put_bits
arg	66:29	66:31	11	pb
water	66:29	0:0	12	pb
arg	66:33	66:46	11	s->extra_bits
water	66:33	0:0	12	s
op	66:34	0:0	12	->
water	66:36	0:0	12	extra_bits
arg	66:48	66:70	11	s->predictor_buf[j][i]
water	66:48	0:0	12	s
op	66:49	0:0	12	->
water	66:51	0:0	12	predictor_buf
op	66:64	0:0	12	[
water	66:65	0:0	12	j
op	66:66	0:0	12	]
op	66:67	0:0	12	[
water	66:68	0:0	12	i
op	66:69	0:0	12	]
water	66:71	0:0	10	;
water	67:16	0:0	10	}
water	68:12	0:0	8	}
water	69:8	0:0	6	}
for	71:8	81:8	4	(i = 0 ;i < channels;i ++)
forinit	71:13	71:18	5	i = 0 ;
water	71:13	0:0	6	i
op	71:15	0:0	6	=
water	71:17	0:0	6	0
water	71:18	0:0	6	;
cond	71:20	71:24	5	i < channels
water	71:20	0:0	6	i
op	71:22	0:0	6	<
water	71:24	0:0	6	channels
forexpr	71:34	71:35	5	i ++
water	71:34	0:0	6	i
op	71:35	0:0	6	++
stmts	71:39	81:8	5	
water	71:39	0:0	6	{
call	72:12	72:38	6	alac_linear_predictor
arg	72:34	72:35	7	s
water	72:34	0:0	8	s
arg	72:37	72:38	7	i
water	72:37	0:0	8	i
water	72:39	0:0	6	;
if	74:12	79:12	6	(prediction_type == 15)
cond	74:16	74:35	7	prediction_type == 15
water	74:16	0:0	8	prediction_type
op	74:32	0:0	8	==
water	74:35	0:0	8	15
stmts	74:39	79:12	7	
water	74:39	0:0	8	{
decl	76:16	76:55	8	int32_t	*residual
op	76:34	0:0	8	=
water	76:36	0:0	8	s
op	76:37	0:0	8	->
water	76:39	0:0	8	predictor_buf
op	76:52	0:0	8	[
water	76:53	0:0	8	i
op	76:54	0:0	8	]
for	77:16	78:50	8	(j = s -> frame_size - 1 ;j > 0;j --)
forinit	77:21	77:42	9	j = s -> frame_size - 1 ;
water	77:21	0:0	10	j
op	77:23	0:0	10	=
water	77:25	0:0	10	s
op	77:26	0:0	10	->
water	77:28	0:0	10	frame_size
op	77:39	0:0	10	-
water	77:41	0:0	10	1
water	77:42	0:0	10	;
cond	77:44	77:48	9	j > 0
water	77:44	0:0	10	j
op	77:46	0:0	10	>
water	77:48	0:0	10	0
forexpr	77:51	77:52	9	j --
water	77:51	0:0	10	j
op	77:52	0:0	10	--
stmts	78:20	78:50	9	
water	78:20	0:0	10	residual
op	78:28	0:0	10	[
water	78:29	0:0	10	j
op	78:30	0:0	10	]
op	78:32	0:0	10	-=
water	78:35	0:0	10	residual
op	78:43	0:0	10	[
water	78:44	0:0	10	j
op	78:46	0:0	10	-
water	78:48	0:0	10	1
op	78:49	0:0	10	]
water	78:50	0:0	10	;
water	79:12	0:0	8	}
call	80:12	80:35	6	alac_entropy_coder
arg	80:31	80:32	7	s
water	80:31	0:0	8	s
arg	80:34	80:35	7	i
water	80:34	0:0	8	i
water	80:36	0:0	6	;
water	81:8	0:0	6	}
water	82:4	0:0	4	}
