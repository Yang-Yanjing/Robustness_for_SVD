func	1:0	83:0	0	static void	sbr_gain_calc
params	1:25	0:0	1	
param	1:26	1:40	2	AACContext *	ac
param	1:42	1:70	2	SpectralBandReplication *	sbr
param	2:26	2:42	2	SBRData *	ch_data
param	2:44	2:60	2	const int	e_a[2]
stmnts	0:0	82:4	1	
decl	4:4	4:15	2	int	e
water	4:9	0:0	2	,
decl	4:4	4:15	2	int	k
water	4:12	0:0	2	,
decl	4:4	4:15	2	int	m
water	6:4	0:0	2	static
water	6:11	0:0	2	const
water	6:17	0:0	2	SoftFloat
water	6:27	0:0	2	limgain
op	6:34	0:0	2	[
water	6:35	0:0	2	4
op	6:36	0:0	2	]
op	6:38	0:0	2	=
water	6:40	0:0	2	{
water	6:42	0:0	2	{
water	6:44	0:0	2	760155524
water	6:53	0:0	2	,
water	6:56	0:0	2	0
water	6:58	0:0	2	}
water	6:59	0:0	2	,
water	6:61	0:0	2	{
water	6:63	0:0	2	0
water	6:64	0:0	2	x20000000
water	6:73	0:0	2	,
water	6:76	0:0	2	1
water	6:78	0:0	2	}
water	6:79	0:0	2	,
water	7:44	0:0	2	{
water	7:46	0:0	2	758351638
water	7:55	0:0	2	,
water	7:58	0:0	2	1
water	7:60	0:0	2	}
water	7:61	0:0	2	,
water	7:63	0:0	2	{
water	7:65	0:0	2	625000000
water	7:74	0:0	2	,
water	7:76	0:0	2	34
water	7:79	0:0	2	}
water	7:81	0:0	2	}
water	7:82	0:0	2	;
for	8:4	82:4	2	(e = 0 ;e < ch_data -> bs_num_env;e ++)
forinit	8:9	8:14	3	e = 0 ;
water	8:9	0:0	4	e
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:29	3	e < ch_data -> bs_num_env
water	8:16	0:0	4	e
op	8:18	0:0	4	<
water	8:20	0:0	4	ch_data
op	8:27	0:0	4	->
water	8:29	0:0	4	bs_num_env
forexpr	8:41	8:42	3	e ++
water	8:41	0:0	4	e
op	8:42	0:0	4	++
stmts	8:46	82:4	3	
water	8:46	0:0	4	{
decl	9:8	9:53	4	int	delta
op	9:18	0:0	4	=
op	9:20	0:0	4	!
water	9:21	0:0	4	(
water	9:22	0:0	4	(
water	9:23	0:0	4	e
op	9:25	0:0	4	==
water	9:28	0:0	4	e_a
op	9:31	0:0	4	[
water	9:32	0:0	4	1
op	9:33	0:0	4	]
water	9:34	0:0	4	)
op	9:36	0:0	4	||
water	9:39	0:0	4	(
water	9:40	0:0	4	e
op	9:42	0:0	4	==
water	9:45	0:0	4	e_a
op	9:48	0:0	4	[
water	9:49	0:0	4	0
op	9:50	0:0	4	]
water	9:51	0:0	4	)
water	9:52	0:0	4	)
for	10:8	81:8	4	(k = 0 ;k < sbr -> n_lim;k ++)
forinit	10:13	10:18	5	k = 0 ;
water	10:13	0:0	6	k
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:20	10:29	5	k < sbr -> n_lim
water	10:20	0:0	6	k
op	10:22	0:0	6	<
water	10:24	0:0	6	sbr
op	10:27	0:0	6	->
water	10:29	0:0	6	n_lim
forexpr	10:36	10:37	5	k ++
water	10:36	0:0	6	k
op	10:37	0:0	6	++
stmts	10:41	81:8	5	
water	10:41	0:0	6	{
decl	11:12	11:42	6	SoftFloat	gain_boost
water	11:32	0:0	6	,
decl	11:12	11:42	6	SoftFloat	gain_max
decl	12:12	12:52	6	SoftFloat	sum[2]
op	12:29	0:0	6	=
water	12:31	0:0	6	{
water	12:33	0:0	6	{
water	12:35	0:0	6	0
water	12:36	0:0	6	,
water	12:38	0:0	6	0
water	12:39	0:0	6	}
water	12:40	0:0	6	,
water	12:42	0:0	6	{
water	12:44	0:0	6	0
water	12:45	0:0	6	,
water	12:47	0:0	6	0
water	12:49	0:0	6	}
water	12:51	0:0	6	}
for	13:12	35:12	6	(m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ];m ++)
forinit	13:17	13:52	7	m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;
water	13:17	0:0	8	m
op	13:19	0:0	8	=
water	13:21	0:0	8	sbr
op	13:24	0:0	8	->
water	13:26	0:0	8	f_tablelim
op	13:36	0:0	8	[
water	13:37	0:0	8	k
op	13:38	0:0	8	]
op	13:40	0:0	8	-
water	13:42	0:0	8	sbr
op	13:45	0:0	8	->
water	13:47	0:0	8	kx
op	13:49	0:0	8	[
water	13:50	0:0	8	1
op	13:51	0:0	8	]
water	13:52	0:0	8	;
cond	13:54	13:92	7	m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ]
water	13:54	0:0	8	m
op	13:56	0:0	8	<
water	13:58	0:0	8	sbr
op	13:61	0:0	8	->
water	13:63	0:0	8	f_tablelim
op	13:73	0:0	8	[
water	13:74	0:0	8	k
op	13:76	0:0	8	+
water	13:78	0:0	8	1
op	13:79	0:0	8	]
op	13:81	0:0	8	-
water	13:83	0:0	8	sbr
op	13:86	0:0	8	->
water	13:88	0:0	8	kx
op	13:90	0:0	8	[
water	13:91	0:0	8	1
op	13:92	0:0	8	]
forexpr	13:95	13:96	7	m ++
water	13:95	0:0	8	m
op	13:96	0:0	8	++
stmts	13:100	35:12	7	
water	13:100	0:0	8	{
decl	14:16	15:84	8	const SoftFloat	temp
op	14:37	0:0	8	=
call	14:39	15:83	9	av_div_sf
arg	14:49	14:72	10	sbr->e_origmapped[e][m]
water	14:49	0:0	11	sbr
op	14:52	0:0	11	->
water	14:54	0:0	11	e_origmapped
op	14:66	0:0	11	[
water	14:67	0:0	11	e
op	14:68	0:0	11	]
op	14:69	0:0	11	[
water	14:70	0:0	11	m
op	14:71	0:0	11	]
arg	15:44	15:83	10	av_add_sf(FLOAT_1,sbr->q_mapped[e][m])
call	15:44	15:82	11	av_add_sf
arg	15:54	15:61	12	FLOAT_1
water	15:54	0:0	13	FLOAT_1
arg	15:63	15:82	12	sbr->q_mapped[e][m]
water	15:63	0:0	13	sbr
op	15:66	0:0	13	->
water	15:68	0:0	13	q_mapped
op	15:76	0:0	13	[
water	15:77	0:0	13	e
op	15:78	0:0	13	]
op	15:79	0:0	13	[
water	15:80	0:0	13	m
op	15:81	0:0	13	]
water	16:16	0:0	8	sbr
op	16:19	0:0	8	->
water	16:21	0:0	8	q_m
op	16:24	0:0	8	[
water	16:25	0:0	8	e
op	16:26	0:0	8	]
op	16:27	0:0	8	[
water	16:28	0:0	8	m
op	16:29	0:0	8	]
op	16:31	0:0	8	=
call	16:33	16:80	8	av_sqrt_sf
arg	16:44	16:80	9	av_mul_sf(temp,sbr->q_mapped[e][m])
call	16:44	16:79	10	av_mul_sf
arg	16:54	16:58	11	temp
water	16:54	0:0	12	temp
arg	16:60	16:79	11	sbr->q_mapped[e][m]
water	16:60	0:0	12	sbr
op	16:63	0:0	12	->
water	16:65	0:0	12	q_mapped
op	16:73	0:0	12	[
water	16:74	0:0	12	e
op	16:75	0:0	12	]
op	16:76	0:0	12	[
water	16:77	0:0	12	m
op	16:78	0:0	12	]
water	16:81	0:0	8	;
water	17:16	0:0	8	sbr
op	17:19	0:0	8	->
water	17:21	0:0	8	s_m
op	17:24	0:0	8	[
water	17:25	0:0	8	e
op	17:26	0:0	8	]
op	17:27	0:0	8	[
water	17:28	0:0	8	m
op	17:29	0:0	8	]
op	17:31	0:0	8	=
call	17:33	17:107	8	av_sqrt_sf
arg	17:44	17:107	9	av_mul_sf(temp,av_int2sf(ch_data->s_indexmapped[e+1][m],0))
call	17:44	17:106	10	av_mul_sf
arg	17:54	17:58	11	temp
water	17:54	0:0	12	temp
arg	17:60	17:106	11	av_int2sf(ch_data->s_indexmapped[e+1][m],0)
call	17:60	17:105	12	av_int2sf
arg	17:70	17:102	13	ch_data->s_indexmapped[e+1][m]
water	17:70	0:0	14	ch_data
op	17:77	0:0	14	->
water	17:79	0:0	14	s_indexmapped
op	17:92	0:0	14	[
water	17:93	0:0	14	e
op	17:95	0:0	14	+
water	17:97	0:0	14	1
op	17:98	0:0	14	]
op	17:99	0:0	14	[
water	17:100	0:0	14	m
op	17:101	0:0	14	]
arg	17:104	17:105	13	0
water	17:104	0:0	14	0
water	17:108	0:0	8	;
if	18:16	27:16	8	(! sbr -> s_mapped [ e ] [ m ])
cond	18:20	18:39	9	! sbr -> s_mapped [ e ] [ m ]
op	18:20	0:0	10	!
water	18:21	0:0	10	sbr
op	18:24	0:0	10	->
water	18:26	0:0	10	s_mapped
op	18:34	0:0	10	[
water	18:35	0:0	10	e
op	18:36	0:0	10	]
op	18:37	0:0	10	[
water	18:38	0:0	10	m
op	18:39	0:0	10	]
stmts	18:42	27:16	9	
water	18:42	0:0	10	{
if	19:20	23:20	10	(delta)
cond	19:24	19:24	11	delta
water	19:24	0:0	12	delta
stmts	19:31	23:20	11	
water	19:31	0:0	12	{
water	20:22	0:0	12	sbr
op	20:25	0:0	12	->
water	20:27	0:0	12	gain
op	20:31	0:0	12	[
water	20:32	0:0	12	e
op	20:33	0:0	12	]
op	20:34	0:0	12	[
water	20:35	0:0	12	m
op	20:36	0:0	12	]
op	20:38	0:0	12	=
call	20:40	22:85	12	av_sqrt_sf
arg	20:51	22:85	13	av_div_sf(sbr->e_origmapped[e][m],av_mul_sf(av_add_sf(FLOAT_1,sbr->e_curr[e][m]),av_add_sf(FLOAT_1,sbr->q_mapped[e][m])))
call	20:51	22:84	14	av_div_sf
arg	20:61	20:84	15	sbr->e_origmapped[e][m]
water	20:61	0:0	16	sbr
op	20:64	0:0	16	->
water	20:66	0:0	16	e_origmapped
op	20:78	0:0	16	[
water	20:79	0:0	16	e
op	20:80	0:0	16	]
op	20:81	0:0	16	[
water	20:82	0:0	16	m
op	20:83	0:0	16	]
arg	21:44	22:84	15	av_mul_sf(av_add_sf(FLOAT_1,sbr->e_curr[e][m]),av_add_sf(FLOAT_1,sbr->q_mapped[e][m]))
call	21:44	22:83	16	av_mul_sf
arg	21:54	21:91	17	av_add_sf(FLOAT_1,sbr->e_curr[e][m])
call	21:54	21:90	18	av_add_sf
arg	21:64	21:71	19	FLOAT_1
water	21:64	0:0	20	FLOAT_1
arg	21:73	21:90	19	sbr->e_curr[e][m]
water	21:73	0:0	20	sbr
op	21:76	0:0	20	->
water	21:78	0:0	20	e_curr
op	21:84	0:0	20	[
water	21:85	0:0	20	e
op	21:86	0:0	20	]
op	21:87	0:0	20	[
water	21:88	0:0	20	m
op	21:89	0:0	20	]
arg	22:44	22:83	17	av_add_sf(FLOAT_1,sbr->q_mapped[e][m])
call	22:44	22:82	18	av_add_sf
arg	22:54	22:61	19	FLOAT_1
water	22:54	0:0	20	FLOAT_1
arg	22:63	22:82	19	sbr->q_mapped[e][m]
water	22:63	0:0	20	sbr
op	22:66	0:0	20	->
water	22:68	0:0	20	q_mapped
op	22:76	0:0	20	[
water	22:77	0:0	20	e
op	22:78	0:0	20	]
op	22:79	0:0	20	[
water	22:80	0:0	20	m
op	22:81	0:0	20	]
water	22:86	0:0	12	;
water	23:20	0:0	12	}
else	23:22	26:20	10
stmts	23:27	26:20	11	
water	23:27	0:0	12	{
water	24:22	0:0	12	sbr
op	24:25	0:0	12	->
water	24:27	0:0	12	gain
op	24:31	0:0	12	[
water	24:32	0:0	12	e
op	24:33	0:0	12	]
op	24:34	0:0	12	[
water	24:35	0:0	12	m
op	24:36	0:0	12	]
op	24:38	0:0	12	=
call	24:40	25:82	12	av_sqrt_sf
arg	24:51	25:82	13	av_div_sf(sbr->e_origmapped[e][m],av_add_sf(FLOAT_1,sbr->e_curr[e][m]))
call	24:51	25:81	14	av_div_sf
arg	24:61	24:84	15	sbr->e_origmapped[e][m]
water	24:61	0:0	16	sbr
op	24:64	0:0	16	->
water	24:66	0:0	16	e_origmapped
op	24:78	0:0	16	[
water	24:79	0:0	16	e
op	24:80	0:0	16	]
op	24:81	0:0	16	[
water	24:82	0:0	16	m
op	24:83	0:0	16	]
arg	25:44	25:81	15	av_add_sf(FLOAT_1,sbr->e_curr[e][m])
call	25:44	25:80	16	av_add_sf
arg	25:54	25:61	17	FLOAT_1
water	25:54	0:0	18	FLOAT_1
arg	25:63	25:80	17	sbr->e_curr[e][m]
water	25:63	0:0	18	sbr
op	25:66	0:0	18	->
water	25:68	0:0	18	e_curr
op	25:74	0:0	18	[
water	25:75	0:0	18	e
op	25:76	0:0	18	]
op	25:77	0:0	18	[
water	25:78	0:0	18	m
op	25:79	0:0	18	]
water	25:83	0:0	12	;
water	26:20	0:0	12	}
water	27:16	0:0	10	}
else	27:18	34:16	8
stmts	27:23	34:16	9	
water	27:23	0:0	10	{
water	28:20	0:0	10	sbr
op	28:23	0:0	10	->
water	28:25	0:0	10	gain
op	28:29	0:0	10	[
water	28:30	0:0	10	e
op	28:31	0:0	10	]
op	28:32	0:0	10	[
water	28:33	0:0	10	m
op	28:34	0:0	10	]
op	28:36	0:0	10	=
call	28:38	33:89	10	av_sqrt_sf
arg	29:40	33:89	11	av_div_sf(av_mul_sf(sbr->e_origmapped[e][m],sbr->q_mapped[e][m]),av_mul_sf(av_add_sf(FLOAT_1,sbr->e_curr[e][m]),av_add_sf(FLOAT_1,sbr->q_mapped[e][m])))
call	29:40	33:88	12	av_div_sf
arg	30:44	30:99	13	av_mul_sf(sbr->e_origmapped[e][m],sbr->q_mapped[e][m])
call	30:44	30:98	14	av_mul_sf
arg	30:54	30:77	15	sbr->e_origmapped[e][m]
water	30:54	0:0	16	sbr
op	30:57	0:0	16	->
water	30:59	0:0	16	e_origmapped
op	30:71	0:0	16	[
water	30:72	0:0	16	e
op	30:73	0:0	16	]
op	30:74	0:0	16	[
water	30:75	0:0	16	m
op	30:76	0:0	16	]
arg	30:79	30:98	15	sbr->q_mapped[e][m]
water	30:79	0:0	16	sbr
op	30:82	0:0	16	->
water	30:84	0:0	16	q_mapped
op	30:92	0:0	16	[
water	30:93	0:0	16	e
op	30:94	0:0	16	]
op	30:95	0:0	16	[
water	30:96	0:0	16	m
op	30:97	0:0	16	]
arg	31:44	33:88	13	av_mul_sf(av_add_sf(FLOAT_1,sbr->e_curr[e][m]),av_add_sf(FLOAT_1,sbr->q_mapped[e][m]))
call	31:44	33:87	14	av_mul_sf
arg	32:48	32:85	15	av_add_sf(FLOAT_1,sbr->e_curr[e][m])
call	32:48	32:84	16	av_add_sf
arg	32:58	32:65	17	FLOAT_1
water	32:58	0:0	18	FLOAT_1
arg	32:67	32:84	17	sbr->e_curr[e][m]
water	32:67	0:0	18	sbr
op	32:70	0:0	18	->
water	32:72	0:0	18	e_curr
op	32:78	0:0	18	[
water	32:79	0:0	18	e
op	32:80	0:0	18	]
op	32:81	0:0	18	[
water	32:82	0:0	18	m
op	32:83	0:0	18	]
arg	33:48	33:87	15	av_add_sf(FLOAT_1,sbr->q_mapped[e][m])
call	33:48	33:86	16	av_add_sf
arg	33:58	33:65	17	FLOAT_1
water	33:58	0:0	18	FLOAT_1
arg	33:67	33:86	17	sbr->q_mapped[e][m]
water	33:67	0:0	18	sbr
op	33:70	0:0	18	->
water	33:72	0:0	18	q_mapped
op	33:80	0:0	18	[
water	33:81	0:0	18	e
op	33:82	0:0	18	]
op	33:83	0:0	18	[
water	33:84	0:0	18	m
op	33:85	0:0	18	]
water	33:90	0:0	10	;
water	34:16	0:0	10	}
water	35:12	0:0	8	}
for	36:12	39:12	6	(m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ];m ++)
forinit	36:17	36:52	7	m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;
water	36:17	0:0	8	m
op	36:19	0:0	8	=
water	36:21	0:0	8	sbr
op	36:24	0:0	8	->
water	36:26	0:0	8	f_tablelim
op	36:36	0:0	8	[
water	36:37	0:0	8	k
op	36:38	0:0	8	]
op	36:40	0:0	8	-
water	36:42	0:0	8	sbr
op	36:45	0:0	8	->
water	36:47	0:0	8	kx
op	36:49	0:0	8	[
water	36:50	0:0	8	1
op	36:51	0:0	8	]
water	36:52	0:0	8	;
cond	36:54	36:92	7	m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ]
water	36:54	0:0	8	m
op	36:56	0:0	8	<
water	36:58	0:0	8	sbr
op	36:61	0:0	8	->
water	36:63	0:0	8	f_tablelim
op	36:73	0:0	8	[
water	36:74	0:0	8	k
op	36:76	0:0	8	+
water	36:78	0:0	8	1
op	36:79	0:0	8	]
op	36:81	0:0	8	-
water	36:83	0:0	8	sbr
op	36:86	0:0	8	->
water	36:88	0:0	8	kx
op	36:90	0:0	8	[
water	36:91	0:0	8	1
op	36:92	0:0	8	]
forexpr	36:95	36:96	7	m ++
water	36:95	0:0	8	m
op	36:96	0:0	8	++
stmts	36:100	39:12	7	
water	36:100	0:0	8	{
water	37:16	0:0	8	sum
op	37:19	0:0	8	[
water	37:20	0:0	8	0
op	37:21	0:0	8	]
op	37:23	0:0	8	=
call	37:25	37:66	8	av_add_sf
arg	37:35	37:41	9	sum[0]
water	37:35	0:0	10	sum
op	37:38	0:0	10	[
water	37:39	0:0	10	0
op	37:40	0:0	10	]
arg	37:43	37:66	9	sbr->e_origmapped[e][m]
water	37:43	0:0	10	sbr
op	37:46	0:0	10	->
water	37:48	0:0	10	e_origmapped
op	37:60	0:0	10	[
water	37:61	0:0	10	e
op	37:62	0:0	10	]
op	37:63	0:0	10	[
water	37:64	0:0	10	m
op	37:65	0:0	10	]
water	37:67	0:0	8	;
water	38:16	0:0	8	sum
op	38:19	0:0	8	[
water	38:20	0:0	8	1
op	38:21	0:0	8	]
op	38:23	0:0	8	=
call	38:25	38:60	8	av_add_sf
arg	38:35	38:41	9	sum[1]
water	38:35	0:0	10	sum
op	38:38	0:0	10	[
water	38:39	0:0	10	1
op	38:40	0:0	10	]
arg	38:43	38:60	9	sbr->e_curr[e][m]
water	38:43	0:0	10	sbr
op	38:46	0:0	10	->
water	38:48	0:0	10	e_curr
op	38:54	0:0	10	[
water	38:55	0:0	10	e
op	38:56	0:0	10	]
op	38:57	0:0	10	[
water	38:58	0:0	10	m
op	38:59	0:0	10	]
water	38:61	0:0	8	;
water	39:12	0:0	8	}
water	40:12	0:0	6	gain_max
op	40:21	0:0	6	=
call	40:23	44:70	6	av_mul_sf
arg	40:33	40:63	7	limgain[sbr->bs_limiter_gains]
water	40:33	0:0	8	limgain
op	40:40	0:0	8	[
water	40:41	0:0	8	sbr
op	40:44	0:0	8	->
water	40:46	0:0	8	bs_limiter_gains
op	40:62	0:0	8	]
arg	41:28	44:70	7	av_sqrt_sf(av_div_sf(av_add_sf(FLOAT_EPSILON,sum[0]),av_add_sf(FLOAT_EPSILON,sum[1])))
call	41:28	44:69	8	av_sqrt_sf
arg	42:32	44:69	9	av_div_sf(av_add_sf(FLOAT_EPSILON,sum[0]),av_add_sf(FLOAT_EPSILON,sum[1]))
call	42:32	44:68	10	av_div_sf
arg	43:36	43:68	11	av_add_sf(FLOAT_EPSILON,sum[0])
call	43:36	43:67	12	av_add_sf
arg	43:46	43:59	13	FLOAT_EPSILON
water	43:46	0:0	14	FLOAT_EPSILON
arg	43:61	43:67	13	sum[0]
water	43:61	0:0	14	sum
op	43:64	0:0	14	[
water	43:65	0:0	14	0
op	43:66	0:0	14	]
arg	44:36	44:68	11	av_add_sf(FLOAT_EPSILON,sum[1])
call	44:36	44:67	12	av_add_sf
arg	44:46	44:59	13	FLOAT_EPSILON
water	44:46	0:0	14	FLOAT_EPSILON
arg	44:61	44:67	13	sum[1]
water	44:61	0:0	14	sum
op	44:64	0:0	14	[
water	44:65	0:0	14	1
op	44:66	0:0	14	]
water	44:71	0:0	6	;
if	45:12	46:37	6	(av_gt_sf (gain_max ,FLOAT_100000 ))
cond	45:16	45:47	7	av_gt_sf (gain_max ,FLOAT_100000 )
call	45:16	45:47	8	av_gt_sf
arg	45:25	45:33	9	gain_max
water	45:25	0:0	10	gain_max
arg	45:35	45:47	9	FLOAT_100000
water	45:35	0:0	10	FLOAT_100000
stmts	46:14	46:37	7	
water	46:14	0:0	8	gain_max
op	46:23	0:0	8	=
water	46:25	0:0	8	FLOAT_100000
water	46:37	0:0	8	;
for	47:12	55:12	6	(m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ];m ++)
forinit	47:17	47:52	7	m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;
water	47:17	0:0	8	m
op	47:19	0:0	8	=
water	47:21	0:0	8	sbr
op	47:24	0:0	8	->
water	47:26	0:0	8	f_tablelim
op	47:36	0:0	8	[
water	47:37	0:0	8	k
op	47:38	0:0	8	]
op	47:40	0:0	8	-
water	47:42	0:0	8	sbr
op	47:45	0:0	8	->
water	47:47	0:0	8	kx
op	47:49	0:0	8	[
water	47:50	0:0	8	1
op	47:51	0:0	8	]
water	47:52	0:0	8	;
cond	47:54	47:92	7	m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ]
water	47:54	0:0	8	m
op	47:56	0:0	8	<
water	47:58	0:0	8	sbr
op	47:61	0:0	8	->
water	47:63	0:0	8	f_tablelim
op	47:73	0:0	8	[
water	47:74	0:0	8	k
op	47:76	0:0	8	+
water	47:78	0:0	8	1
op	47:79	0:0	8	]
op	47:81	0:0	8	-
water	47:83	0:0	8	sbr
op	47:86	0:0	8	->
water	47:88	0:0	8	kx
op	47:90	0:0	8	[
water	47:91	0:0	8	1
op	47:92	0:0	8	]
forexpr	47:95	47:96	7	m ++
water	47:95	0:0	8	m
op	47:96	0:0	8	++
stmts	47:100	55:12	7	
water	47:100	0:0	8	{
decl	48:16	50:56	8	SoftFloat	q_m_max
op	48:34	0:0	8	=
call	48:36	50:55	9	av_div_sf
arg	49:40	49:75	10	av_mul_sf(sbr->q_m[e][m],gain_max)
call	49:40	49:74	11	av_mul_sf
arg	49:50	49:64	12	sbr->q_m[e][m]
water	49:50	0:0	13	sbr
op	49:53	0:0	13	->
water	49:55	0:0	13	q_m
op	49:58	0:0	13	[
water	49:59	0:0	13	e
op	49:60	0:0	13	]
op	49:61	0:0	13	[
water	49:62	0:0	13	m
op	49:63	0:0	13	]
arg	49:66	49:74	12	gain_max
water	49:66	0:0	13	gain_max
arg	50:40	50:55	10	sbr->gain[e][m]
water	50:40	0:0	11	sbr
op	50:43	0:0	11	->
water	50:45	0:0	11	gain
op	50:49	0:0	11	[
water	50:50	0:0	11	e
op	50:51	0:0	11	]
op	50:52	0:0	11	[
water	50:53	0:0	11	m
op	50:54	0:0	11	]
if	51:16	52:42	8	(av_gt_sf (sbr -> q_m [ e ] [ m ] ,q_m_max ))
cond	51:20	51:52	9	av_gt_sf (sbr -> q_m [ e ] [ m ] ,q_m_max )
call	51:20	51:52	10	av_gt_sf
arg	51:29	51:43	11	sbr->q_m[e][m]
water	51:29	0:0	12	sbr
op	51:32	0:0	12	->
water	51:34	0:0	12	q_m
op	51:37	0:0	12	[
water	51:38	0:0	12	e
op	51:39	0:0	12	]
op	51:40	0:0	12	[
water	51:41	0:0	12	m
op	51:42	0:0	12	]
arg	51:45	51:52	11	q_m_max
water	51:45	0:0	12	q_m_max
stmts	52:18	52:42	9	
water	52:18	0:0	10	sbr
op	52:21	0:0	10	->
water	52:23	0:0	10	q_m
op	52:26	0:0	10	[
water	52:27	0:0	10	e
op	52:28	0:0	10	]
op	52:29	0:0	10	[
water	52:30	0:0	10	m
op	52:31	0:0	10	]
op	52:33	0:0	10	=
water	52:35	0:0	10	q_m_max
water	52:42	0:0	10	;
if	53:16	54:44	8	(av_gt_sf (sbr -> gain [ e ] [ m ] ,gain_max ))
cond	53:20	53:54	9	av_gt_sf (sbr -> gain [ e ] [ m ] ,gain_max )
call	53:20	53:54	10	av_gt_sf
arg	53:29	53:44	11	sbr->gain[e][m]
water	53:29	0:0	12	sbr
op	53:32	0:0	12	->
water	53:34	0:0	12	gain
op	53:38	0:0	12	[
water	53:39	0:0	12	e
op	53:40	0:0	12	]
op	53:41	0:0	12	[
water	53:42	0:0	12	m
op	53:43	0:0	12	]
arg	53:46	53:54	11	gain_max
water	53:46	0:0	12	gain_max
stmts	54:18	54:44	9	
water	54:18	0:0	10	sbr
op	54:21	0:0	10	->
water	54:23	0:0	10	gain
op	54:27	0:0	10	[
water	54:28	0:0	10	e
op	54:29	0:0	10	]
op	54:30	0:0	10	[
water	54:31	0:0	10	m
op	54:32	0:0	10	]
op	54:34	0:0	10	=
water	54:36	0:0	10	gain_max
water	54:44	0:0	10	;
water	55:12	0:0	8	}
water	56:12	0:0	6	sum
op	56:15	0:0	6	[
water	56:16	0:0	6	0
op	56:17	0:0	6	]
op	56:19	0:0	6	=
water	56:21	0:0	6	sum
op	56:24	0:0	6	[
water	56:25	0:0	6	1
op	56:26	0:0	6	]
op	56:28	0:0	6	=
water	56:30	0:0	6	FLOAT_0
water	56:37	0:0	6	;
for	57:12	69:12	6	(m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ];m ++)
forinit	57:17	57:52	7	m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;
water	57:17	0:0	8	m
op	57:19	0:0	8	=
water	57:21	0:0	8	sbr
op	57:24	0:0	8	->
water	57:26	0:0	8	f_tablelim
op	57:36	0:0	8	[
water	57:37	0:0	8	k
op	57:38	0:0	8	]
op	57:40	0:0	8	-
water	57:42	0:0	8	sbr
op	57:45	0:0	8	->
water	57:47	0:0	8	kx
op	57:49	0:0	8	[
water	57:50	0:0	8	1
op	57:51	0:0	8	]
water	57:52	0:0	8	;
cond	57:54	57:92	7	m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ]
water	57:54	0:0	8	m
op	57:56	0:0	8	<
water	57:58	0:0	8	sbr
op	57:61	0:0	8	->
water	57:63	0:0	8	f_tablelim
op	57:73	0:0	8	[
water	57:74	0:0	8	k
op	57:76	0:0	8	+
water	57:78	0:0	8	1
op	57:79	0:0	8	]
op	57:81	0:0	8	-
water	57:83	0:0	8	sbr
op	57:86	0:0	8	->
water	57:88	0:0	8	kx
op	57:90	0:0	8	[
water	57:91	0:0	8	1
op	57:92	0:0	8	]
forexpr	57:95	57:96	7	m ++
water	57:95	0:0	8	m
op	57:96	0:0	8	++
stmts	57:100	69:12	7	
water	57:100	0:0	8	{
water	58:16	0:0	8	sum
op	58:19	0:0	8	[
water	58:20	0:0	8	0
op	58:21	0:0	8	]
op	58:23	0:0	8	=
call	58:25	58:66	8	av_add_sf
arg	58:35	58:41	9	sum[0]
water	58:35	0:0	10	sum
op	58:38	0:0	10	[
water	58:39	0:0	10	0
op	58:40	0:0	10	]
arg	58:43	58:66	9	sbr->e_origmapped[e][m]
water	58:43	0:0	10	sbr
op	58:46	0:0	10	->
water	58:48	0:0	10	e_origmapped
op	58:60	0:0	10	[
water	58:61	0:0	10	e
op	58:62	0:0	10	]
op	58:63	0:0	10	[
water	58:64	0:0	10	m
op	58:65	0:0	10	]
water	58:67	0:0	8	;
water	59:16	0:0	8	sum
op	59:19	0:0	8	[
water	59:20	0:0	8	1
op	59:21	0:0	8	]
op	59:23	0:0	8	=
call	59:25	63:48	8	av_add_sf
arg	59:35	59:41	9	sum[1]
water	59:35	0:0	10	sum
op	59:38	0:0	10	[
water	59:39	0:0	10	1
op	59:40	0:0	10	]
arg	60:28	63:48	9	av_mul_sf(av_mul_sf(sbr->e_curr[e][m],sbr->gain[e][m]),sbr->gain[e][m])
call	60:28	63:47	10	av_mul_sf
arg	61:32	62:58	11	av_mul_sf(sbr->e_curr[e][m],sbr->gain[e][m])
call	61:32	62:57	12	av_mul_sf
arg	61:42	61:59	13	sbr->e_curr[e][m]
water	61:42	0:0	14	sbr
op	61:45	0:0	14	->
water	61:47	0:0	14	e_curr
op	61:53	0:0	14	[
water	61:54	0:0	14	e
op	61:55	0:0	14	]
op	61:56	0:0	14	[
water	61:57	0:0	14	m
op	61:58	0:0	14	]
arg	62:42	62:57	13	sbr->gain[e][m]
water	62:42	0:0	14	sbr
op	62:45	0:0	14	->
water	62:47	0:0	14	gain
op	62:51	0:0	14	[
water	62:52	0:0	14	e
op	62:53	0:0	14	]
op	62:54	0:0	14	[
water	62:55	0:0	14	m
op	62:56	0:0	14	]
arg	63:32	63:47	11	sbr->gain[e][m]
water	63:32	0:0	12	sbr
op	63:35	0:0	12	->
water	63:37	0:0	12	gain
op	63:41	0:0	12	[
water	63:42	0:0	12	e
op	63:43	0:0	12	]
op	63:44	0:0	12	[
water	63:45	0:0	12	m
op	63:46	0:0	12	]
water	63:49	0:0	8	;
water	64:16	0:0	8	sum
op	64:19	0:0	8	[
water	64:20	0:0	8	1
op	64:21	0:0	8	]
op	64:23	0:0	8	=
call	64:25	65:69	8	av_add_sf
arg	64:35	64:41	9	sum[1]
water	64:35	0:0	10	sum
op	64:38	0:0	10	[
water	64:39	0:0	10	1
op	64:40	0:0	10	]
arg	65:28	65:69	9	av_mul_sf(sbr->s_m[e][m],sbr->s_m[e][m])
call	65:28	65:68	10	av_mul_sf
arg	65:38	65:52	11	sbr->s_m[e][m]
water	65:38	0:0	12	sbr
op	65:41	0:0	12	->
water	65:43	0:0	12	s_m
op	65:46	0:0	12	[
water	65:47	0:0	12	e
op	65:48	0:0	12	]
op	65:49	0:0	12	[
water	65:50	0:0	12	m
op	65:51	0:0	12	]
arg	65:54	65:68	11	sbr->s_m[e][m]
water	65:54	0:0	12	sbr
op	65:57	0:0	12	->
water	65:59	0:0	12	s_m
op	65:62	0:0	12	[
water	65:63	0:0	12	e
op	65:64	0:0	12	]
op	65:65	0:0	12	[
water	65:66	0:0	12	m
op	65:67	0:0	12	]
water	65:70	0:0	8	;
if	66:16	68:74	8	(delta && ! sbr -> s_m [ e ] [ m ] . mant)
cond	66:20	66:45	9	delta && ! sbr -> s_m [ e ] [ m ] . mant
water	66:20	0:0	10	delta
op	66:26	0:0	10	&&
op	66:29	0:0	10	!
water	66:30	0:0	10	sbr
op	66:33	0:0	10	->
water	66:35	0:0	10	s_m
op	66:38	0:0	10	[
water	66:39	0:0	10	e
op	66:40	0:0	10	]
op	66:41	0:0	10	[
water	66:42	0:0	10	m
op	66:43	0:0	10	]
op	66:44	0:0	10	.
water	66:45	0:0	10	mant
stmts	67:18	68:74	9	
water	67:18	0:0	10	sum
op	67:21	0:0	10	[
water	67:22	0:0	10	1
op	67:23	0:0	10	]
op	67:25	0:0	10	=
call	67:27	68:73	10	av_add_sf
arg	67:37	67:43	11	sum[1]
water	67:37	0:0	12	sum
op	67:40	0:0	12	[
water	67:41	0:0	12	1
op	67:42	0:0	12	]
arg	68:32	68:73	11	av_mul_sf(sbr->q_m[e][m],sbr->q_m[e][m])
call	68:32	68:72	12	av_mul_sf
arg	68:42	68:56	13	sbr->q_m[e][m]
water	68:42	0:0	14	sbr
op	68:45	0:0	14	->
water	68:47	0:0	14	q_m
op	68:50	0:0	14	[
water	68:51	0:0	14	e
op	68:52	0:0	14	]
op	68:53	0:0	14	[
water	68:54	0:0	14	m
op	68:55	0:0	14	]
arg	68:58	68:72	13	sbr->q_m[e][m]
water	68:58	0:0	14	sbr
op	68:61	0:0	14	->
water	68:63	0:0	14	q_m
op	68:66	0:0	14	[
water	68:67	0:0	14	e
op	68:68	0:0	14	]
op	68:69	0:0	14	[
water	68:70	0:0	14	m
op	68:71	0:0	14	]
water	68:74	0:0	10	;
water	69:12	0:0	8	}
water	70:12	0:0	6	gain_boost
op	70:23	0:0	6	=
call	70:25	73:65	6	av_sqrt_sf
arg	71:28	73:65	7	av_div_sf(av_add_sf(FLOAT_EPSILON,sum[0]),av_add_sf(FLOAT_EPSILON,sum[1]))
call	71:28	73:64	8	av_div_sf
arg	72:32	72:64	9	av_add_sf(FLOAT_EPSILON,sum[0])
call	72:32	72:63	10	av_add_sf
arg	72:42	72:55	11	FLOAT_EPSILON
water	72:42	0:0	12	FLOAT_EPSILON
arg	72:57	72:63	11	sum[0]
water	72:57	0:0	12	sum
op	72:60	0:0	12	[
water	72:61	0:0	12	0
op	72:62	0:0	12	]
arg	73:32	73:64	9	av_add_sf(FLOAT_EPSILON,sum[1])
call	73:32	73:63	10	av_add_sf
arg	73:42	73:55	11	FLOAT_EPSILON
water	73:42	0:0	12	FLOAT_EPSILON
arg	73:57	73:63	11	sum[1]
water	73:57	0:0	12	sum
op	73:60	0:0	12	[
water	73:61	0:0	12	1
op	73:62	0:0	12	]
water	73:66	0:0	6	;
if	74:12	75:43	6	(av_gt_sf (gain_boost ,FLOAT_1584893192 ))
cond	74:16	74:53	7	av_gt_sf (gain_boost ,FLOAT_1584893192 )
call	74:16	74:53	8	av_gt_sf
arg	74:25	74:35	9	gain_boost
water	74:25	0:0	10	gain_boost
arg	74:37	74:53	9	FLOAT_1584893192
water	74:37	0:0	10	FLOAT_1584893192
stmts	75:14	75:43	7	
water	75:14	0:0	8	gain_boost
op	75:25	0:0	8	=
water	75:27	0:0	8	FLOAT_1584893192
water	75:43	0:0	8	;
for	76:12	80:12	6	(m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ];m ++)
forinit	76:17	76:52	7	m = sbr -> f_tablelim [ k ] - sbr -> kx [ 1 ] ;
water	76:17	0:0	8	m
op	76:19	0:0	8	=
water	76:21	0:0	8	sbr
op	76:24	0:0	8	->
water	76:26	0:0	8	f_tablelim
op	76:36	0:0	8	[
water	76:37	0:0	8	k
op	76:38	0:0	8	]
op	76:40	0:0	8	-
water	76:42	0:0	8	sbr
op	76:45	0:0	8	->
water	76:47	0:0	8	kx
op	76:49	0:0	8	[
water	76:50	0:0	8	1
op	76:51	0:0	8	]
water	76:52	0:0	8	;
cond	76:54	76:92	7	m < sbr -> f_tablelim [ k + 1 ] - sbr -> kx [ 1 ]
water	76:54	0:0	8	m
op	76:56	0:0	8	<
water	76:58	0:0	8	sbr
op	76:61	0:0	8	->
water	76:63	0:0	8	f_tablelim
op	76:73	0:0	8	[
water	76:74	0:0	8	k
op	76:76	0:0	8	+
water	76:78	0:0	8	1
op	76:79	0:0	8	]
op	76:81	0:0	8	-
water	76:83	0:0	8	sbr
op	76:86	0:0	8	->
water	76:88	0:0	8	kx
op	76:90	0:0	8	[
water	76:91	0:0	8	1
op	76:92	0:0	8	]
forexpr	76:95	76:96	7	m ++
water	76:95	0:0	8	m
op	76:96	0:0	8	++
stmts	76:100	80:12	7	
water	76:100	0:0	8	{
water	77:16	0:0	8	sbr
op	77:19	0:0	8	->
water	77:21	0:0	8	gain
op	77:25	0:0	8	[
water	77:26	0:0	8	e
op	77:27	0:0	8	]
op	77:28	0:0	8	[
water	77:29	0:0	8	m
op	77:30	0:0	8	]
op	77:32	0:0	8	=
call	77:34	77:71	8	av_mul_sf
arg	77:44	77:59	9	sbr->gain[e][m]
water	77:44	0:0	10	sbr
op	77:47	0:0	10	->
water	77:49	0:0	10	gain
op	77:53	0:0	10	[
water	77:54	0:0	10	e
op	77:55	0:0	10	]
op	77:56	0:0	10	[
water	77:57	0:0	10	m
op	77:58	0:0	10	]
arg	77:61	77:71	9	gain_boost
water	77:61	0:0	10	gain_boost
water	77:72	0:0	8	;
water	78:16	0:0	8	sbr
op	78:19	0:0	8	->
water	78:21	0:0	8	q_m
op	78:24	0:0	8	[
water	78:25	0:0	8	e
op	78:26	0:0	8	]
op	78:27	0:0	8	[
water	78:28	0:0	8	m
op	78:29	0:0	8	]
op	78:32	0:0	8	=
call	78:34	78:70	8	av_mul_sf
arg	78:44	78:58	9	sbr->q_m[e][m]
water	78:44	0:0	10	sbr
op	78:47	0:0	10	->
water	78:49	0:0	10	q_m
op	78:52	0:0	10	[
water	78:53	0:0	10	e
op	78:54	0:0	10	]
op	78:55	0:0	10	[
water	78:56	0:0	10	m
op	78:57	0:0	10	]
arg	78:60	78:70	9	gain_boost
water	78:60	0:0	10	gain_boost
water	78:71	0:0	8	;
water	79:16	0:0	8	sbr
op	79:19	0:0	8	->
water	79:21	0:0	8	s_m
op	79:24	0:0	8	[
water	79:25	0:0	8	e
op	79:26	0:0	8	]
op	79:27	0:0	8	[
water	79:28	0:0	8	m
op	79:29	0:0	8	]
op	79:32	0:0	8	=
call	79:34	79:70	8	av_mul_sf
arg	79:44	79:58	9	sbr->s_m[e][m]
water	79:44	0:0	10	sbr
op	79:47	0:0	10	->
water	79:49	0:0	10	s_m
op	79:52	0:0	10	[
water	79:53	0:0	10	e
op	79:54	0:0	10	]
op	79:55	0:0	10	[
water	79:56	0:0	10	m
op	79:57	0:0	10	]
arg	79:60	79:70	9	gain_boost
water	79:60	0:0	10	gain_boost
water	79:71	0:0	8	;
water	80:12	0:0	8	}
water	81:8	0:0	6	}
water	82:4	0:0	4	}
