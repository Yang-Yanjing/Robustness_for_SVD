func	1:0	153:0	0	static void	opt_list
params	1:20	0:0	1	
param	1:21	1:30	2	void *	obj
param	1:32	1:48	2	void *	av_log_obj
param	1:50	1:66	2	const char *	unit
param	2:21	2:34	2	int	req_flags
param	2:36	2:49	2	int	rej_flags
stmnts	0:0	152:4	1	
decl	4:4	4:28	2	const AVOption	*opt
op	4:23	0:0	2	=
water	4:24	0:0	2	NULL
decl	5:4	5:21	2	AVOptionRanges	*r
decl	6:4	6:9	2	int	i
while	7:4	152:4	2	(( opt =av_opt_next (obj ,opt ) ))
cond	7:11	7:39	3	( opt =av_opt_next (obj ,opt ) )
water	7:11	0:0	4	(
water	7:12	0:0	4	opt
op	7:16	0:0	4	=
call	7:18	7:38	4	av_opt_next
arg	7:30	7:33	5	obj
water	7:30	0:0	6	obj
arg	7:35	7:38	5	opt
water	7:35	0:0	6	opt
water	7:39	0:0	4	)
stmts	7:42	152:4	3	
water	7:42	0:0	4	{
if	8:8	9:20	4	(! ( opt -> flags & req_flags ) || ( opt -> flags & rej_flags ))
cond	8:12	8:64	5	! ( opt -> flags & req_flags ) || ( opt -> flags & rej_flags )
op	8:12	0:0	6	!
water	8:13	0:0	6	(
water	8:14	0:0	6	opt
op	8:17	0:0	6	->
water	8:19	0:0	6	flags
op	8:25	0:0	6	&
water	8:27	0:0	6	req_flags
water	8:36	0:0	6	)
op	8:38	0:0	6	||
water	8:41	0:0	6	(
water	8:42	0:0	6	opt
op	8:45	0:0	6	->
water	8:47	0:0	6	flags
op	8:53	0:0	6	&
water	8:55	0:0	6	rej_flags
water	8:64	0:0	6	)
stmts	9:12	9:20	5	
continue	9:12	9:20	6	
if	14:8	15:20	4	(! unit && opt -> type == AV_OPT_TYPE_CONST)
cond	14:12	14:32	5	! unit && opt -> type == AV_OPT_TYPE_CONST
op	14:12	0:0	6	!
water	14:13	0:0	6	unit
op	14:18	0:0	6	&&
water	14:21	0:0	6	opt
op	14:24	0:0	6	->
water	14:26	0:0	6	type
op	14:30	0:0	6	==
water	14:32	0:0	6	AV_OPT_TYPE_CONST
stmts	15:12	15:20	5	
continue	15:12	15:20	6	
else	16:8	17:20	4
stmts	16:13	17:20	5	
if	16:13	17:20	6	(unit && opt -> type != AV_OPT_TYPE_CONST)
cond	16:17	16:36	7	unit && opt -> type != AV_OPT_TYPE_CONST
water	16:17	0:0	8	unit
op	16:22	0:0	8	&&
water	16:25	0:0	8	opt
op	16:28	0:0	8	->
water	16:30	0:0	8	type
op	16:34	0:0	8	!=
water	16:36	0:0	8	AV_OPT_TYPE_CONST
stmts	17:12	17:20	7	
continue	17:12	17:20	8	
else	18:8	19:20	4
stmts	18:13	19:20	5	
if	18:13	19:20	6	(unit && opt -> type == AV_OPT_TYPE_CONST &&strcmp (unit ,opt -> unit ))
cond	18:17	18:79	7	unit && opt -> type == AV_OPT_TYPE_CONST &&strcmp (unit ,opt -> unit )
water	18:17	0:0	8	unit
op	18:22	0:0	8	&&
water	18:25	0:0	8	opt
op	18:28	0:0	8	->
water	18:30	0:0	8	type
op	18:34	0:0	8	==
water	18:36	0:0	8	AV_OPT_TYPE_CONST
op	18:54	0:0	8	&&
call	18:57	18:79	8	strcmp
arg	18:64	18:68	9	unit
water	18:64	0:0	10	unit
arg	18:70	18:79	9	opt->unit
water	18:70	0:0	10	opt
op	18:73	0:0	10	->
water	18:75	0:0	10	unit
stmts	19:12	19:20	7	
continue	19:12	19:20	8	
else	20:8	21:69	4
stmts	20:13	21:69	5	
if	20:13	21:69	6	(unit && opt -> type == AV_OPT_TYPE_CONST)
cond	20:17	20:38	7	unit && opt -> type == AV_OPT_TYPE_CONST
water	20:17	0:0	8	unit
op	20:22	0:0	8	&&
water	20:25	0:0	8	opt
op	20:28	0:0	8	->
water	20:30	0:0	8	type
op	20:35	0:0	8	==
water	20:38	0:0	8	AV_OPT_TYPE_CONST
stmts	21:12	21:69	7	
call	21:12	21:68	8	av_log
arg	21:19	21:29	9	av_log_obj
water	21:19	0:0	10	av_log_obj
arg	21:31	21:42	9	AV_LOG_INFO
water	21:31	0:0	10	AV_LOG_INFO
arg	21:44	21:57	9	"     %-15s "
water	21:44	0:0	10	"     %-15s "
arg	21:59	21:68	9	opt->name
water	21:59	0:0	10	opt
op	21:62	0:0	10	->
water	21:64	0:0	10	name
water	21:69	0:0	8	;
else	22:8	25:29	4
stmts	23:12	25:29	5	
call	23:12	25:28	6	av_log
arg	23:19	23:29	7	av_log_obj
water	23:19	0:0	8	av_log_obj
arg	23:31	23:42	7	AV_LOG_INFO
water	23:31	0:0	8	AV_LOG_INFO
arg	23:44	23:56	7	"  %s%-17s "
water	23:44	0:0	8	"  %s%-17s "
arg	24:19	24:72	7	(opt->flags&AV_OPT_FLAG_FILTERING_PARAM)?"":"-"
water	24:19	0:0	8	(
water	24:20	0:0	8	opt
op	24:23	0:0	8	->
water	24:25	0:0	8	flags
op	24:31	0:0	8	&
water	24:33	0:0	8	AV_OPT_FLAG_FILTERING_PARAM
water	24:60	0:0	8	)
water	24:62	0:0	8	?
water	24:64	0:0	8	""
water	24:67	0:0	8	:
water	24:69	0:0	8	"-"
arg	25:19	25:28	7	opt->name
water	25:19	0:0	8	opt
op	25:22	0:0	8	->
water	25:24	0:0	8	name
water	25:29	0:0	6	;
switch	26:8	76:8	4	(opt -> type)
cond	26:16	26:21	5	opt -> type
water	26:16	0:0	6	opt
op	26:19	0:0	6	->
water	26:21	0:0	6	type
stmts	26:27	76:8	5	
water	26:27	0:0	6	{
label	27:12	27:34	6	case AV_OPT_TYPE_FLAGS :
call	28:16	28:67	6	av_log
arg	28:23	28:33	7	av_log_obj
water	28:23	0:0	8	av_log_obj
arg	28:35	28:46	7	AV_LOG_INFO
water	28:35	0:0	8	AV_LOG_INFO
arg	28:48	28:56	7	"%-12s "
water	28:48	0:0	8	"%-12s "
arg	28:58	28:67	7	"<flags>"
water	28:58	0:0	8	"<flags>"
water	28:68	0:0	6	;
break	29:16	29:21	6	
label	30:12	30:32	6	case AV_OPT_TYPE_INT :
call	31:16	31:65	6	av_log
arg	31:23	31:33	7	av_log_obj
water	31:23	0:0	8	av_log_obj
arg	31:35	31:46	7	AV_LOG_INFO
water	31:35	0:0	8	AV_LOG_INFO
arg	31:48	31:56	7	"%-12s "
water	31:48	0:0	8	"%-12s "
arg	31:58	31:65	7	"<int>"
water	31:58	0:0	8	"<int>"
water	31:66	0:0	6	;
break	32:16	32:21	6	
label	33:12	33:34	6	case AV_OPT_TYPE_INT64 :
call	34:16	34:67	6	av_log
arg	34:23	34:33	7	av_log_obj
water	34:23	0:0	8	av_log_obj
arg	34:35	34:46	7	AV_LOG_INFO
water	34:35	0:0	8	AV_LOG_INFO
arg	34:48	34:56	7	"%-12s "
water	34:48	0:0	8	"%-12s "
arg	34:58	34:67	7	"<int64>"
water	34:58	0:0	8	"<int64>"
water	34:68	0:0	6	;
break	35:16	35:21	6	
label	36:12	36:35	6	case AV_OPT_TYPE_DOUBLE :
call	37:16	37:68	6	av_log
arg	37:23	37:33	7	av_log_obj
water	37:23	0:0	8	av_log_obj
arg	37:35	37:46	7	AV_LOG_INFO
water	37:35	0:0	8	AV_LOG_INFO
arg	37:48	37:56	7	"%-12s "
water	37:48	0:0	8	"%-12s "
arg	37:58	37:68	7	"<double>"
water	37:58	0:0	8	"<double>"
water	37:69	0:0	6	;
break	38:16	38:21	6	
label	39:12	39:34	6	case AV_OPT_TYPE_FLOAT :
call	40:16	40:67	6	av_log
arg	40:23	40:33	7	av_log_obj
water	40:23	0:0	8	av_log_obj
arg	40:35	40:46	7	AV_LOG_INFO
water	40:35	0:0	8	AV_LOG_INFO
arg	40:48	40:56	7	"%-12s "
water	40:48	0:0	8	"%-12s "
arg	40:58	40:67	7	"<float>"
water	40:58	0:0	8	"<float>"
water	40:68	0:0	6	;
break	41:16	41:21	6	
label	42:12	42:35	6	case AV_OPT_TYPE_STRING :
call	43:16	43:68	6	av_log
arg	43:23	43:33	7	av_log_obj
water	43:23	0:0	8	av_log_obj
arg	43:35	43:46	7	AV_LOG_INFO
water	43:35	0:0	8	AV_LOG_INFO
arg	43:48	43:56	7	"%-12s "
water	43:48	0:0	8	"%-12s "
arg	43:58	43:68	7	"<string>"
water	43:58	0:0	8	"<string>"
water	43:69	0:0	6	;
break	44:16	44:21	6	
label	45:12	45:37	6	case AV_OPT_TYPE_RATIONAL :
call	46:16	46:70	6	av_log
arg	46:23	46:33	7	av_log_obj
water	46:23	0:0	8	av_log_obj
arg	46:35	46:46	7	AV_LOG_INFO
water	46:35	0:0	8	AV_LOG_INFO
arg	46:48	46:56	7	"%-12s "
water	46:48	0:0	8	"%-12s "
arg	46:58	46:70	7	"<rational>"
water	46:58	0:0	8	"<rational>"
water	46:71	0:0	6	;
break	47:16	47:21	6	
label	48:12	48:35	6	case AV_OPT_TYPE_BINARY :
call	49:16	49:68	6	av_log
arg	49:23	49:33	7	av_log_obj
water	49:23	0:0	8	av_log_obj
arg	49:35	49:46	7	AV_LOG_INFO
water	49:35	0:0	8	AV_LOG_INFO
arg	49:48	49:56	7	"%-12s "
water	49:48	0:0	8	"%-12s "
arg	49:58	49:68	7	"<binary>"
water	49:58	0:0	8	"<binary>"
water	49:69	0:0	6	;
break	50:16	50:21	6	
label	51:12	51:39	6	case AV_OPT_TYPE_IMAGE_SIZE :
call	52:16	52:72	6	av_log
arg	52:23	52:33	7	av_log_obj
water	52:23	0:0	8	av_log_obj
arg	52:35	52:46	7	AV_LOG_INFO
water	52:35	0:0	8	AV_LOG_INFO
arg	52:48	52:56	7	"%-12s "
water	52:48	0:0	8	"%-12s "
arg	52:58	52:72	7	"<image_size>"
water	52:58	0:0	8	"<image_size>"
water	52:73	0:0	6	;
break	53:16	53:21	6	
label	54:12	54:39	6	case AV_OPT_TYPE_VIDEO_RATE :
call	55:16	55:72	6	av_log
arg	55:23	55:33	7	av_log_obj
water	55:23	0:0	8	av_log_obj
arg	55:35	55:46	7	AV_LOG_INFO
water	55:35	0:0	8	AV_LOG_INFO
arg	55:48	55:56	7	"%-12s "
water	55:48	0:0	8	"%-12s "
arg	55:58	55:72	7	"<video_rate>"
water	55:58	0:0	8	"<video_rate>"
water	55:73	0:0	6	;
break	56:16	56:21	6	
label	57:12	57:38	6	case AV_OPT_TYPE_PIXEL_FMT :
call	58:16	58:69	6	av_log
arg	58:23	58:33	7	av_log_obj
water	58:23	0:0	8	av_log_obj
arg	58:35	58:46	7	AV_LOG_INFO
water	58:35	0:0	8	AV_LOG_INFO
arg	58:48	58:56	7	"%-12s "
water	58:48	0:0	8	"%-12s "
arg	58:58	58:69	7	"<pix_fmt>"
water	58:58	0:0	8	"<pix_fmt>"
water	58:70	0:0	6	;
break	59:16	59:21	6	
label	60:12	60:39	6	case AV_OPT_TYPE_SAMPLE_FMT :
call	61:16	61:72	6	av_log
arg	61:23	61:33	7	av_log_obj
water	61:23	0:0	8	av_log_obj
arg	61:35	61:46	7	AV_LOG_INFO
water	61:35	0:0	8	AV_LOG_INFO
arg	61:48	61:56	7	"%-12s "
water	61:48	0:0	8	"%-12s "
arg	61:58	61:72	7	"<sample_fmt>"
water	61:58	0:0	8	"<sample_fmt>"
water	61:73	0:0	6	;
break	62:16	62:21	6	
label	63:12	63:37	6	case AV_OPT_TYPE_DURATION :
call	64:16	64:70	6	av_log
arg	64:23	64:33	7	av_log_obj
water	64:23	0:0	8	av_log_obj
arg	64:35	64:46	7	AV_LOG_INFO
water	64:35	0:0	8	AV_LOG_INFO
arg	64:48	64:56	7	"%-12s "
water	64:48	0:0	8	"%-12s "
arg	64:58	64:70	7	"<duration>"
water	64:58	0:0	8	"<duration>"
water	64:71	0:0	6	;
break	65:16	65:21	6	
label	66:12	66:34	6	case AV_OPT_TYPE_COLOR :
call	67:16	67:67	6	av_log
arg	67:23	67:33	7	av_log_obj
water	67:23	0:0	8	av_log_obj
arg	67:35	67:46	7	AV_LOG_INFO
water	67:35	0:0	8	AV_LOG_INFO
arg	67:48	67:56	7	"%-12s "
water	67:48	0:0	8	"%-12s "
arg	67:58	67:67	7	"<color>"
water	67:58	0:0	8	"<color>"
water	67:68	0:0	6	;
break	68:16	68:21	6	
label	69:12	69:43	6	case AV_OPT_TYPE_CHANNEL_LAYOUT :
call	70:16	70:76	6	av_log
arg	70:23	70:33	7	av_log_obj
water	70:23	0:0	8	av_log_obj
arg	70:35	70:46	7	AV_LOG_INFO
water	70:35	0:0	8	AV_LOG_INFO
arg	70:48	70:56	7	"%-12s "
water	70:48	0:0	8	"%-12s "
arg	70:58	70:76	7	"<channel_layout>"
water	70:58	0:0	8	"<channel_layout>"
water	70:77	0:0	6	;
break	71:16	71:21	6	
label	72:12	72:34	6	case AV_OPT_TYPE_CONST :
label	73:12	73:19	6	default :
call	74:16	74:60	6	av_log
arg	74:23	74:33	7	av_log_obj
water	74:23	0:0	8	av_log_obj
arg	74:35	74:46	7	AV_LOG_INFO
water	74:35	0:0	8	AV_LOG_INFO
arg	74:48	74:56	7	"%-12s "
water	74:48	0:0	8	"%-12s "
arg	74:58	74:60	7	""
water	74:58	0:0	8	""
water	74:61	0:0	6	;
break	75:16	75:21	6	
water	76:8	0:0	6	}
call	77:8	77:99	4	av_log
arg	77:15	77:25	5	av_log_obj
water	77:15	0:0	6	av_log_obj
arg	77:27	77:38	5	AV_LOG_INFO
water	77:27	0:0	6	AV_LOG_INFO
arg	77:40	77:44	5	"%c"
water	77:40	0:0	6	"%c"
arg	77:46	77:99	5	(opt->flags&AV_OPT_FLAG_ENCODING_PARAM)?'E':'.'
water	77:46	0:0	6	(
water	77:47	0:0	6	opt
op	77:50	0:0	6	->
water	77:52	0:0	6	flags
op	77:58	0:0	6	&
water	77:60	0:0	6	AV_OPT_FLAG_ENCODING_PARAM
water	77:86	0:0	6	)
water	77:88	0:0	6	?
water	77:90	0:0	6	'E'
water	77:94	0:0	6	:
water	77:96	0:0	6	'.'
water	77:100	0:0	4	;
call	78:8	78:99	4	av_log
arg	78:15	78:25	5	av_log_obj
water	78:15	0:0	6	av_log_obj
arg	78:27	78:38	5	AV_LOG_INFO
water	78:27	0:0	6	AV_LOG_INFO
arg	78:40	78:44	5	"%c"
water	78:40	0:0	6	"%c"
arg	78:46	78:99	5	(opt->flags&AV_OPT_FLAG_DECODING_PARAM)?'D':'.'
water	78:46	0:0	6	(
water	78:47	0:0	6	opt
op	78:50	0:0	6	->
water	78:52	0:0	6	flags
op	78:58	0:0	6	&
water	78:60	0:0	6	AV_OPT_FLAG_DECODING_PARAM
water	78:86	0:0	6	)
water	78:88	0:0	6	?
water	78:90	0:0	6	'D'
water	78:94	0:0	6	:
water	78:96	0:0	6	'.'
water	78:100	0:0	4	;
call	79:8	79:99	4	av_log
arg	79:15	79:25	5	av_log_obj
water	79:15	0:0	6	av_log_obj
arg	79:27	79:38	5	AV_LOG_INFO
water	79:27	0:0	6	AV_LOG_INFO
arg	79:40	79:44	5	"%c"
water	79:40	0:0	6	"%c"
arg	79:46	79:99	5	(opt->flags&AV_OPT_FLAG_FILTERING_PARAM)?'F':'.'
water	79:46	0:0	6	(
water	79:47	0:0	6	opt
op	79:50	0:0	6	->
water	79:52	0:0	6	flags
op	79:58	0:0	6	&
water	79:60	0:0	6	AV_OPT_FLAG_FILTERING_PARAM
water	79:87	0:0	6	)
water	79:88	0:0	6	?
water	79:90	0:0	6	'F'
water	79:94	0:0	6	:
water	79:96	0:0	6	'.'
water	79:100	0:0	4	;
call	80:8	80:99	4	av_log
arg	80:15	80:25	5	av_log_obj
water	80:15	0:0	6	av_log_obj
arg	80:27	80:38	5	AV_LOG_INFO
water	80:27	0:0	6	AV_LOG_INFO
arg	80:40	80:44	5	"%c"
water	80:40	0:0	6	"%c"
arg	80:46	80:99	5	(opt->flags&AV_OPT_FLAG_VIDEO_PARAM)?'V':'.'
water	80:46	0:0	6	(
water	80:47	0:0	6	opt
op	80:50	0:0	6	->
water	80:52	0:0	6	flags
op	80:58	0:0	6	&
water	80:60	0:0	6	AV_OPT_FLAG_VIDEO_PARAM
water	80:86	0:0	6	)
water	80:88	0:0	6	?
water	80:90	0:0	6	'V'
water	80:94	0:0	6	:
water	80:96	0:0	6	'.'
water	80:100	0:0	4	;
call	81:8	81:99	4	av_log
arg	81:15	81:25	5	av_log_obj
water	81:15	0:0	6	av_log_obj
arg	81:27	81:38	5	AV_LOG_INFO
water	81:27	0:0	6	AV_LOG_INFO
arg	81:40	81:44	5	"%c"
water	81:40	0:0	6	"%c"
arg	81:46	81:99	5	(opt->flags&AV_OPT_FLAG_AUDIO_PARAM)?'A':'.'
water	81:46	0:0	6	(
water	81:47	0:0	6	opt
op	81:50	0:0	6	->
water	81:52	0:0	6	flags
op	81:58	0:0	6	&
water	81:60	0:0	6	AV_OPT_FLAG_AUDIO_PARAM
water	81:86	0:0	6	)
water	81:88	0:0	6	?
water	81:90	0:0	6	'A'
water	81:94	0:0	6	:
water	81:96	0:0	6	'.'
water	81:100	0:0	4	;
call	82:8	82:99	4	av_log
arg	82:15	82:25	5	av_log_obj
water	82:15	0:0	6	av_log_obj
arg	82:27	82:38	5	AV_LOG_INFO
water	82:27	0:0	6	AV_LOG_INFO
arg	82:40	82:44	5	"%c"
water	82:40	0:0	6	"%c"
arg	82:46	82:99	5	(opt->flags&AV_OPT_FLAG_SUBTITLE_PARAM)?'S':'.'
water	82:46	0:0	6	(
water	82:47	0:0	6	opt
op	82:50	0:0	6	->
water	82:52	0:0	6	flags
op	82:58	0:0	6	&
water	82:60	0:0	6	AV_OPT_FLAG_SUBTITLE_PARAM
water	82:86	0:0	6	)
water	82:88	0:0	6	?
water	82:90	0:0	6	'S'
water	82:94	0:0	6	:
water	82:96	0:0	6	'.'
water	82:100	0:0	4	;
call	83:8	83:99	4	av_log
arg	83:15	83:25	5	av_log_obj
water	83:15	0:0	6	av_log_obj
arg	83:27	83:38	5	AV_LOG_INFO
water	83:27	0:0	6	AV_LOG_INFO
arg	83:40	83:44	5	"%c"
water	83:40	0:0	6	"%c"
arg	83:46	83:99	5	(opt->flags&AV_OPT_FLAG_EXPORT)?'X':'.'
water	83:46	0:0	6	(
water	83:47	0:0	6	opt
op	83:50	0:0	6	->
water	83:52	0:0	6	flags
op	83:58	0:0	6	&
water	83:60	0:0	6	AV_OPT_FLAG_EXPORT
water	83:78	0:0	6	)
water	83:88	0:0	6	?
water	83:90	0:0	6	'X'
water	83:94	0:0	6	:
water	83:96	0:0	6	'.'
water	83:100	0:0	4	;
call	84:8	84:99	4	av_log
arg	84:15	84:25	5	av_log_obj
water	84:15	0:0	6	av_log_obj
arg	84:27	84:38	5	AV_LOG_INFO
water	84:27	0:0	6	AV_LOG_INFO
arg	84:40	84:44	5	"%c"
water	84:40	0:0	6	"%c"
arg	84:46	84:99	5	(opt->flags&AV_OPT_FLAG_READONLY)?'R':'.'
water	84:46	0:0	6	(
water	84:47	0:0	6	opt
op	84:50	0:0	6	->
water	84:52	0:0	6	flags
op	84:58	0:0	6	&
water	84:60	0:0	6	AV_OPT_FLAG_READONLY
water	84:80	0:0	6	)
water	84:88	0:0	6	?
water	84:90	0:0	6	'R'
water	84:94	0:0	6	:
water	84:96	0:0	6	'.'
water	84:100	0:0	4	;
if	85:8	86:61	4	(opt -> help)
cond	85:12	85:17	5	opt -> help
water	85:12	0:0	6	opt
op	85:15	0:0	6	->
water	85:17	0:0	6	help
stmts	86:12	86:61	5	
call	86:12	86:60	6	av_log
arg	86:19	86:29	7	av_log_obj
water	86:19	0:0	8	av_log_obj
arg	86:31	86:42	7	AV_LOG_INFO
water	86:31	0:0	8	AV_LOG_INFO
arg	86:44	86:49	7	" %s"
water	86:44	0:0	8	" %s"
arg	86:51	86:60	7	opt->help
water	86:51	0:0	8	opt
op	86:54	0:0	8	->
water	86:56	0:0	8	help
water	86:61	0:0	6	;
if	87:8	104:8	4	(av_opt_query_ranges (& r ,obj ,opt -> name ,AV_OPT_SEARCH_FAKE_OBJ ) >= 0)
cond	87:12	87:79	5	av_opt_query_ranges (& r ,obj ,opt -> name ,AV_OPT_SEARCH_FAKE_OBJ ) >= 0
call	87:12	87:74	6	av_opt_query_ranges
arg	87:32	87:34	7	&r
op	87:32	0:0	8	&
water	87:33	0:0	8	r
arg	87:36	87:39	7	obj
water	87:36	0:0	8	obj
arg	87:41	87:50	7	opt->name
water	87:41	0:0	8	opt
op	87:44	0:0	8	->
water	87:46	0:0	8	name
arg	87:52	87:74	7	AV_OPT_SEARCH_FAKE_OBJ
water	87:52	0:0	8	AV_OPT_SEARCH_FAKE_OBJ
op	87:76	0:0	6	>=
water	87:79	0:0	6	0
stmts	87:82	104:8	5	
water	87:82	0:0	6	{
switch	88:12	102:12	6	(opt -> type)
cond	88:20	88:25	7	opt -> type
water	88:20	0:0	8	opt
op	88:23	0:0	8	->
water	88:25	0:0	8	type
stmts	88:31	102:12	7	
water	88:31	0:0	8	{
label	89:12	89:32	8	case AV_OPT_TYPE_INT :
label	90:12	90:34	8	case AV_OPT_TYPE_INT64 :
label	91:12	91:35	8	case AV_OPT_TYPE_DOUBLE :
label	92:12	92:34	8	case AV_OPT_TYPE_FLOAT :
label	93:12	93:37	8	case AV_OPT_TYPE_RATIONAL :
for	94:16	100:16	8	(i = 0 ;i < r -> nb_ranges;i ++)
forinit	94:21	94:26	9	i = 0 ;
water	94:21	0:0	10	i
op	94:23	0:0	10	=
water	94:25	0:0	10	0
water	94:26	0:0	10	;
cond	94:28	94:35	9	i < r -> nb_ranges
water	94:28	0:0	10	i
op	94:30	0:0	10	<
water	94:32	0:0	10	r
op	94:33	0:0	10	->
water	94:35	0:0	10	nb_ranges
forexpr	94:46	94:47	9	i ++
water	94:46	0:0	10	i
op	94:47	0:0	10	++
stmts	94:51	100:16	9	
water	94:51	0:0	10	{
call	95:20	95:61	10	av_log
arg	95:27	95:37	11	av_log_obj
water	95:27	0:0	12	av_log_obj
arg	95:39	95:50	11	AV_LOG_INFO
water	95:39	0:0	12	AV_LOG_INFO
arg	95:52	95:61	11	" (from "
water	95:52	0:0	12	" (from "
water	95:62	0:0	10	;
call	96:20	96:77	10	log_value
arg	96:30	96:40	11	av_log_obj
water	96:30	0:0	12	av_log_obj
arg	96:42	96:53	11	AV_LOG_INFO
water	96:42	0:0	12	AV_LOG_INFO
arg	96:55	96:77	11	r->range[i]->value_min
water	96:55	0:0	12	r
op	96:56	0:0	12	->
water	96:58	0:0	12	range
op	96:63	0:0	12	[
water	96:64	0:0	12	i
op	96:65	0:0	12	]
op	96:66	0:0	12	->
water	96:68	0:0	12	value_min
water	96:78	0:0	10	;
call	97:20	97:58	10	av_log
arg	97:27	97:37	11	av_log_obj
water	97:27	0:0	12	av_log_obj
arg	97:39	97:50	11	AV_LOG_INFO
water	97:39	0:0	12	AV_LOG_INFO
arg	97:52	97:58	11	" to "
water	97:52	0:0	12	" to "
water	97:59	0:0	10	;
call	98:20	98:77	10	log_value
arg	98:30	98:40	11	av_log_obj
water	98:30	0:0	12	av_log_obj
arg	98:42	98:53	11	AV_LOG_INFO
water	98:42	0:0	12	AV_LOG_INFO
arg	98:55	98:77	11	r->range[i]->value_max
water	98:55	0:0	12	r
op	98:56	0:0	12	->
water	98:58	0:0	12	range
op	98:63	0:0	12	[
water	98:64	0:0	12	i
op	98:65	0:0	12	]
op	98:66	0:0	12	->
water	98:68	0:0	12	value_max
water	98:78	0:0	10	;
call	99:20	99:55	10	av_log
arg	99:27	99:37	11	av_log_obj
water	99:27	0:0	12	av_log_obj
arg	99:39	99:50	11	AV_LOG_INFO
water	99:39	0:0	12	AV_LOG_INFO
arg	99:52	99:55	11	")"
water	99:52	0:0	12	")"
water	99:56	0:0	10	;
water	100:16	0:0	10	}
break	101:16	101:21	8	
water	102:12	0:0	8	}
call	103:12	103:34	6	av_opt_freep_ranges
arg	103:32	103:34	7	&r
op	103:32	0:0	8	&
water	103:33	0:0	8	r
water	103:35	0:0	6	;
water	104:8	0:0	6	}
if	105:8	147:8	4	(opt -> type != AV_OPT_TYPE_CONST && opt -> type != AV_OPT_TYPE_BINARY && ! ( ( opt -> type == AV_OPT_TYPE_COLOR || opt -> type == AV_OPT_TYPE_IMAGE_SIZE || opt -> type == AV_OPT_TYPE_STRING || opt -> type == AV_OPT_TYPE_VIDEO_RATE ) && ! opt -> default_val . str ))
cond	105:12	111:39	5	opt -> type != AV_OPT_TYPE_CONST && opt -> type != AV_OPT_TYPE_BINARY && ! ( ( opt -> type == AV_OPT_TYPE_COLOR || opt -> type == AV_OPT_TYPE_IMAGE_SIZE || opt -> type == AV_OPT_TYPE_STRING || opt -> type == AV_OPT_TYPE_VIDEO_RATE ) && ! opt -> default_val . str )
water	105:12	0:0	6	opt
op	105:15	0:0	6	->
water	105:17	0:0	6	type
op	105:22	0:0	6	!=
water	105:25	0:0	6	AV_OPT_TYPE_CONST
op	105:44	0:0	6	&&
water	106:12	0:0	6	opt
op	106:15	0:0	6	->
water	106:17	0:0	6	type
op	106:22	0:0	6	!=
water	106:25	0:0	6	AV_OPT_TYPE_BINARY
op	106:44	0:0	6	&&
op	107:16	0:0	6	!
water	107:17	0:0	6	(
water	107:18	0:0	6	(
water	107:19	0:0	6	opt
op	107:22	0:0	6	->
water	107:24	0:0	6	type
op	107:29	0:0	6	==
water	107:32	0:0	6	AV_OPT_TYPE_COLOR
op	107:55	0:0	6	||
water	108:19	0:0	6	opt
op	108:22	0:0	6	->
water	108:24	0:0	6	type
op	108:29	0:0	6	==
water	108:32	0:0	6	AV_OPT_TYPE_IMAGE_SIZE
op	108:55	0:0	6	||
water	109:19	0:0	6	opt
op	109:22	0:0	6	->
water	109:24	0:0	6	type
op	109:29	0:0	6	==
water	109:32	0:0	6	AV_OPT_TYPE_STRING
op	109:55	0:0	6	||
water	110:19	0:0	6	opt
op	110:22	0:0	6	->
water	110:24	0:0	6	type
op	110:29	0:0	6	==
water	110:32	0:0	6	AV_OPT_TYPE_VIDEO_RATE
water	110:54	0:0	6	)
op	110:56	0:0	6	&&
op	111:18	0:0	6	!
water	111:19	0:0	6	opt
op	111:22	0:0	6	->
water	111:24	0:0	6	default_val
op	111:35	0:0	6	.
water	111:36	0:0	6	str
water	111:39	0:0	6	)
stmts	111:42	147:8	5	
water	111:42	0:0	6	{
call	112:12	112:56	6	av_log
arg	112:19	112:29	7	av_log_obj
water	112:19	0:0	8	av_log_obj
arg	112:31	112:42	7	AV_LOG_INFO
water	112:31	0:0	8	AV_LOG_INFO
arg	112:44	112:56	7	" (default "
water	112:44	0:0	8	" (default "
water	112:57	0:0	6	;
switch	113:12	145:12	6	(opt -> type)
cond	113:20	113:25	7	opt -> type
water	113:20	0:0	8	opt
op	113:23	0:0	8	->
water	113:25	0:0	8	type
stmts	113:31	145:12	7	
water	113:31	0:0	8	{
label	114:12	114:34	8	case AV_OPT_TYPE_FLAGS :
call	115:16	115:79	8	av_log
arg	115:23	115:33	9	av_log_obj
water	115:23	0:0	10	av_log_obj
arg	115:35	115:46	9	AV_LOG_INFO
water	115:35	0:0	10	AV_LOG_INFO
arg	115:48	115:57	9	"%"PRIX64
water	115:48	0:0	10	"%"
water	115:51	0:0	10	PRIX64
arg	115:59	115:79	9	opt->default_val.i64
water	115:59	0:0	10	opt
op	115:62	0:0	10	->
water	115:64	0:0	10	default_val
op	115:75	0:0	10	.
water	115:76	0:0	10	i64
water	115:80	0:0	8	;
break	116:16	116:21	8	
label	117:12	117:37	8	case AV_OPT_TYPE_DURATION :
label	118:12	118:32	8	case AV_OPT_TYPE_INT :
label	119:12	119:34	8	case AV_OPT_TYPE_INT64 :
call	120:16	120:71	8	log_value
arg	120:26	120:36	9	av_log_obj
water	120:26	0:0	10	av_log_obj
arg	120:38	120:49	9	AV_LOG_INFO
water	120:38	0:0	10	AV_LOG_INFO
arg	120:51	120:71	9	opt->default_val.i64
water	120:51	0:0	10	opt
op	120:54	0:0	10	->
water	120:56	0:0	10	default_val
op	120:67	0:0	10	.
water	120:68	0:0	10	i64
water	120:72	0:0	8	;
break	121:16	121:21	8	
label	122:12	122:35	8	case AV_OPT_TYPE_DOUBLE :
label	123:12	123:34	8	case AV_OPT_TYPE_FLOAT :
call	124:16	124:71	8	log_value
arg	124:26	124:36	9	av_log_obj
water	124:26	0:0	10	av_log_obj
arg	124:38	124:49	9	AV_LOG_INFO
water	124:38	0:0	10	AV_LOG_INFO
arg	124:51	124:71	9	opt->default_val.dbl
water	124:51	0:0	10	opt
op	124:54	0:0	10	->
water	124:56	0:0	10	default_val
op	124:67	0:0	10	.
water	124:68	0:0	10	dbl
water	124:72	0:0	8	;
break	125:16	125:21	8	
label	126:12	126:37	8	case AV_OPT_TYPE_RATIONAL :
water	126:39	0:0	8	{
decl	127:16	127:68	8	AVRational	q
op	127:29	0:0	8	=
call	127:31	127:67	9	av_d2q
arg	127:38	127:58	10	opt->default_val.dbl
water	127:38	0:0	11	opt
op	127:41	0:0	11	->
water	127:43	0:0	11	default_val
op	127:54	0:0	11	.
water	127:55	0:0	11	dbl
arg	127:60	127:67	10	INT_MAX
water	127:60	0:0	11	INT_MAX
call	128:16	128:69	8	av_log
arg	128:23	128:33	9	av_log_obj
water	128:23	0:0	10	av_log_obj
arg	128:35	128:46	9	AV_LOG_INFO
water	128:35	0:0	10	AV_LOG_INFO
arg	128:48	128:55	9	"%d/%d"
water	128:48	0:0	10	"%d/%d"
arg	128:57	128:62	9	q.num
water	128:57	0:0	10	q
op	128:58	0:0	10	.
water	128:59	0:0	10	num
arg	128:64	128:69	9	q.den
water	128:64	0:0	10	q
op	128:65	0:0	10	.
water	128:66	0:0	10	den
water	128:70	0:0	8	;
water	128:72	0:0	8	}
break	129:16	129:21	8	
label	130:12	130:38	8	case AV_OPT_TYPE_PIXEL_FMT :
call	131:16	131:125	8	av_log
arg	131:23	131:33	9	av_log_obj
water	131:23	0:0	10	av_log_obj
arg	131:35	131:46	9	AV_LOG_INFO
water	131:35	0:0	10	AV_LOG_INFO
arg	131:48	131:52	9	"%s"
water	131:48	0:0	10	"%s"
arg	131:54	131:125	9	(char*)av_x_if_null(av_get_pix_fmt_name(opt->default_val.i64),"none")
water	131:54	0:0	10	(
water	131:55	0:0	10	char
op	131:60	0:0	10	*
water	131:61	0:0	10	)
call	131:62	131:124	10	av_x_if_null
arg	131:75	131:116	11	av_get_pix_fmt_name(opt->default_val.i64)
call	131:75	131:115	12	av_get_pix_fmt_name
arg	131:95	131:115	13	opt->default_val.i64
water	131:95	0:0	14	opt
op	131:98	0:0	14	->
water	131:100	0:0	14	default_val
op	131:111	0:0	14	.
water	131:112	0:0	14	i64
arg	131:118	131:124	11	"none"
water	131:118	0:0	12	"none"
water	131:126	0:0	8	;
break	132:16	132:21	8	
label	133:12	133:39	8	case AV_OPT_TYPE_SAMPLE_FMT :
call	134:16	134:128	8	av_log
arg	134:23	134:33	9	av_log_obj
water	134:23	0:0	10	av_log_obj
arg	134:35	134:46	9	AV_LOG_INFO
water	134:35	0:0	10	AV_LOG_INFO
arg	134:48	134:52	9	"%s"
water	134:48	0:0	10	"%s"
arg	134:54	134:128	9	(char*)av_x_if_null(av_get_sample_fmt_name(opt->default_val.i64),"none")
water	134:54	0:0	10	(
water	134:55	0:0	10	char
op	134:60	0:0	10	*
water	134:61	0:0	10	)
call	134:62	134:127	10	av_x_if_null
arg	134:75	134:119	11	av_get_sample_fmt_name(opt->default_val.i64)
call	134:75	134:118	12	av_get_sample_fmt_name
arg	134:98	134:118	13	opt->default_val.i64
water	134:98	0:0	14	opt
op	134:101	0:0	14	->
water	134:103	0:0	14	default_val
op	134:114	0:0	14	.
water	134:115	0:0	14	i64
arg	134:121	134:127	11	"none"
water	134:121	0:0	12	"none"
water	134:129	0:0	8	;
break	135:16	135:21	8	
label	136:12	136:34	8	case AV_OPT_TYPE_COLOR :
label	137:12	137:39	8	case AV_OPT_TYPE_IMAGE_SIZE :
label	138:12	138:35	8	case AV_OPT_TYPE_STRING :
label	139:12	139:39	8	case AV_OPT_TYPE_VIDEO_RATE :
call	140:16	140:78	8	av_log
arg	140:23	140:33	9	av_log_obj
water	140:23	0:0	10	av_log_obj
arg	140:35	140:46	9	AV_LOG_INFO
water	140:35	0:0	10	AV_LOG_INFO
arg	140:48	140:56	9	"\"%s\""
water	140:48	0:0	10	"\"%s\""
arg	140:58	140:78	9	opt->default_val.str
water	140:58	0:0	10	opt
op	140:61	0:0	10	->
water	140:63	0:0	10	default_val
op	140:74	0:0	10	.
water	140:75	0:0	10	str
water	140:79	0:0	8	;
break	141:16	141:21	8	
label	142:12	142:43	8	case AV_OPT_TYPE_CHANNEL_LAYOUT :
call	143:16	143:81	8	av_log
arg	143:23	143:33	9	av_log_obj
water	143:23	0:0	10	av_log_obj
arg	143:35	143:46	9	AV_LOG_INFO
water	143:35	0:0	10	AV_LOG_INFO
arg	143:48	143:59	9	"0x%"PRIx64
water	143:48	0:0	10	"0x%"
water	143:53	0:0	10	PRIx64
arg	143:61	143:81	9	opt->default_val.i64
water	143:61	0:0	10	opt
op	143:64	0:0	10	->
water	143:66	0:0	10	default_val
op	143:77	0:0	10	.
water	143:78	0:0	10	i64
water	143:82	0:0	8	;
break	144:16	144:21	8	
water	145:12	0:0	8	}
call	146:12	146:47	6	av_log
arg	146:19	146:29	7	av_log_obj
water	146:19	0:0	8	av_log_obj
arg	146:31	146:42	7	AV_LOG_INFO
water	146:31	0:0	8	AV_LOG_INFO
arg	146:44	146:47	7	")"
water	146:44	0:0	8	")"
water	146:48	0:0	6	;
water	147:8	0:0	6	}
call	148:8	148:44	4	av_log
arg	148:15	148:25	5	av_log_obj
water	148:15	0:0	6	av_log_obj
arg	148:27	148:38	5	AV_LOG_INFO
water	148:27	0:0	6	AV_LOG_INFO
arg	148:40	148:44	5	"\n"
water	148:40	0:0	6	"\n"
water	148:45	0:0	4	;
if	149:8	151:8	4	(opt -> unit && opt -> type != AV_OPT_TYPE_CONST)
cond	149:12	149:38	5	opt -> unit && opt -> type != AV_OPT_TYPE_CONST
water	149:12	0:0	6	opt
op	149:15	0:0	6	->
water	149:17	0:0	6	unit
op	149:22	0:0	6	&&
water	149:25	0:0	6	opt
op	149:28	0:0	6	->
water	149:30	0:0	6	type
op	149:35	0:0	6	!=
water	149:38	0:0	6	AV_OPT_TYPE_CONST
stmts	149:57	151:8	5	
water	149:57	0:0	6	{
call	150:12	150:69	6	opt_list
arg	150:21	150:24	7	obj
water	150:21	0:0	8	obj
arg	150:26	150:36	7	av_log_obj
water	150:26	0:0	8	av_log_obj
arg	150:38	150:47	7	opt->unit
water	150:38	0:0	8	opt
op	150:41	0:0	8	->
water	150:43	0:0	8	unit
arg	150:49	150:58	7	req_flags
water	150:49	0:0	8	req_flags
arg	150:60	150:69	7	rej_flags
water	150:60	0:0	8	rej_flags
water	150:70	0:0	6	;
water	151:8	0:0	6	}
water	152:4	0:0	4	}
