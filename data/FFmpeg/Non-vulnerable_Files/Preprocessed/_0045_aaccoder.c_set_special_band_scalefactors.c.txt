func	1:0	33:0	0	static void	set_special_band_scalefactors
params	1:41	0:0	1	
param	1:42	1:58	2	AACEncContext *	s
param	1:60	1:85	2	SingleChannelElement *	sce
stmnts	0:0	32:4	1	
decl	3:4	3:23	2	int	w
water	3:9	0:0	2	,
decl	3:4	3:23	2	int	g
water	3:12	0:0	2	,
decl	3:4	3:23	2	int	start
op	3:20	0:0	2	=
water	3:22	0:0	2	0
decl	4:4	4:66	2	int	minscaler_n
op	4:20	0:0	2	=
water	4:22	0:0	2	sce
op	4:25	0:0	2	->
water	4:27	0:0	2	sf_idx
op	4:33	0:0	2	[
water	4:34	0:0	2	0
op	4:35	0:0	2	]
water	4:36	0:0	2	,
decl	4:4	4:66	2	int	minscaler_i
op	4:50	0:0	2	=
water	4:52	0:0	2	sce
op	4:55	0:0	2	->
water	4:57	0:0	2	sf_idx
op	4:63	0:0	2	[
water	4:64	0:0	2	0
op	4:65	0:0	2	]
decl	5:4	5:17	2	int	bands
op	5:14	0:0	2	=
water	5:16	0:0	2	0
for	6:4	20:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	6:9	6:14	3	w = 0 ;
water	6:9	0:0	4	w
op	6:11	0:0	4	=
water	6:13	0:0	4	0
water	6:14	0:0	4	;
cond	6:16	6:29	3	w < sce -> ics . num_windows
water	6:16	0:0	4	w
op	6:18	0:0	4	<
water	6:20	0:0	4	sce
op	6:23	0:0	4	->
water	6:25	0:0	4	ics
op	6:28	0:0	4	.
water	6:29	0:0	4	num_windows
forexpr	6:42	6:67	3	w += sce -> ics . group_len [ w ]
water	6:42	0:0	4	w
op	6:44	0:0	4	+=
water	6:47	0:0	4	sce
op	6:50	0:0	4	->
water	6:52	0:0	4	ics
op	6:55	0:0	4	.
water	6:56	0:0	4	group_len
op	6:65	0:0	4	[
water	6:66	0:0	4	w
op	6:67	0:0	4	]
stmts	6:70	20:4	3	
water	6:70	0:0	4	{
water	7:8	0:0	4	start
op	7:14	0:0	4	=
water	7:16	0:0	4	0
water	7:17	0:0	4	;
for	8:8	19:8	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	8:13	8:18	5	g = 0 ;
water	8:13	0:0	6	g
op	8:15	0:0	6	=
water	8:17	0:0	6	0
water	8:18	0:0	6	;
cond	8:21	8:34	5	g < sce -> ics . num_swb
water	8:21	0:0	6	g
op	8:23	0:0	6	<
water	8:25	0:0	6	sce
op	8:28	0:0	6	->
water	8:30	0:0	6	ics
op	8:33	0:0	6	.
water	8:34	0:0	6	num_swb
forexpr	8:43	8:44	5	g ++
water	8:43	0:0	6	g
op	8:44	0:0	6	++
stmts	8:48	19:8	5	
water	8:48	0:0	6	{
if	9:12	13:12	6	(sce -> band_type [ w * 16 + g ] == INTENSITY_BT || sce -> band_type [ w * 16 + g ] == INTENSITY_BT2)
cond	9:16	9:84	7	sce -> band_type [ w * 16 + g ] == INTENSITY_BT || sce -> band_type [ w * 16 + g ] == INTENSITY_BT2
water	9:16	0:0	8	sce
op	9:19	0:0	8	->
water	9:21	0:0	8	band_type
op	9:30	0:0	8	[
water	9:31	0:0	8	w
op	9:32	0:0	8	*
water	9:33	0:0	8	16
op	9:35	0:0	8	+
water	9:36	0:0	8	g
op	9:37	0:0	8	]
op	9:39	0:0	8	==
water	9:42	0:0	8	INTENSITY_BT
op	9:55	0:0	8	||
water	9:58	0:0	8	sce
op	9:61	0:0	8	->
water	9:63	0:0	8	band_type
op	9:72	0:0	8	[
water	9:73	0:0	8	w
op	9:74	0:0	8	*
water	9:75	0:0	8	16
op	9:77	0:0	8	+
water	9:78	0:0	8	g
op	9:79	0:0	8	]
op	9:81	0:0	8	==
water	9:84	0:0	8	INTENSITY_BT2
stmts	9:99	13:12	7	
water	9:99	0:0	8	{
water	10:16	0:0	8	sce
op	10:19	0:0	8	->
water	10:21	0:0	8	sf_idx
op	10:27	0:0	8	[
water	10:28	0:0	8	w
op	10:29	0:0	8	*
water	10:30	0:0	8	16
op	10:32	0:0	8	+
water	10:33	0:0	8	g
op	10:34	0:0	8	]
op	10:36	0:0	8	=
call	10:38	10:93	8	av_clip
arg	10:46	10:82	9	ceilf(log2f(sce->is_ener[w*16+g])*2)
call	10:46	10:81	10	ceilf
arg	10:52	10:81	11	log2f(sce->is_ener[w*16+g])*2
call	10:52	10:78	12	log2f
arg	10:58	10:78	13	sce->is_ener[w*16+g]
water	10:58	0:0	14	sce
op	10:61	0:0	14	->
water	10:63	0:0	14	is_ener
op	10:70	0:0	14	[
water	10:71	0:0	14	w
op	10:72	0:0	14	*
water	10:73	0:0	14	16
op	10:75	0:0	14	+
water	10:76	0:0	14	g
op	10:77	0:0	14	]
op	10:79	0:0	12	*
water	10:80	0:0	12	2
arg	10:84	10:88	9	-155
op	10:84	0:0	10	-
water	10:85	0:0	10	155
arg	10:90	10:93	9	100
water	10:90	0:0	10	100
water	10:94	0:0	8	;
water	11:16	0:0	8	minscaler_i
op	11:28	0:0	8	=
call	11:30	11:68	8	FFMIN
arg	11:36	11:47	9	minscaler_i
water	11:36	0:0	10	minscaler_i
arg	11:49	11:68	9	sce->sf_idx[w*16+g]
water	11:49	0:0	10	sce
op	11:52	0:0	10	->
water	11:54	0:0	10	sf_idx
op	11:60	0:0	10	[
water	11:61	0:0	10	w
op	11:62	0:0	10	*
water	11:63	0:0	10	16
op	11:65	0:0	10	+
water	11:66	0:0	10	g
op	11:67	0:0	10	]
water	11:69	0:0	8	;
water	12:16	0:0	8	bands
op	12:21	0:0	8	++
water	12:23	0:0	8	;
water	13:12	0:0	8	}
else	13:14	17:12	6
stmts	13:19	17:12	7	
if	13:19	17:12	8	(sce -> band_type [ w * 16 + g ] == NOISE_BT)
cond	13:23	13:49	9	sce -> band_type [ w * 16 + g ] == NOISE_BT
water	13:23	0:0	10	sce
op	13:26	0:0	10	->
water	13:28	0:0	10	band_type
op	13:37	0:0	10	[
water	13:38	0:0	10	w
op	13:39	0:0	10	*
water	13:40	0:0	10	16
op	13:42	0:0	10	+
water	13:43	0:0	10	g
op	13:44	0:0	10	]
op	13:46	0:0	10	==
water	13:49	0:0	10	NOISE_BT
stmts	13:59	17:12	9	
water	13:59	0:0	10	{
water	14:16	0:0	10	sce
op	14:19	0:0	10	->
water	14:21	0:0	10	sf_idx
op	14:27	0:0	10	[
water	14:28	0:0	10	w
op	14:29	0:0	10	*
water	14:30	0:0	10	16
op	14:32	0:0	10	+
water	14:33	0:0	10	g
op	14:34	0:0	10	]
op	14:36	0:0	10	=
call	14:38	14:89	10	av_clip
arg	14:46	14:78	11	4+log2f(sce->pns_ener[w*16+g])*2
water	14:46	0:0	12	4
op	14:47	0:0	12	+
call	14:48	14:75	12	log2f
arg	14:54	14:75	13	sce->pns_ener[w*16+g]
water	14:54	0:0	14	sce
op	14:57	0:0	14	->
water	14:59	0:0	14	pns_ener
op	14:67	0:0	14	[
water	14:68	0:0	14	w
op	14:69	0:0	14	*
water	14:70	0:0	14	16
op	14:72	0:0	14	+
water	14:73	0:0	14	g
op	14:74	0:0	14	]
op	14:76	0:0	12	*
water	14:77	0:0	12	2
arg	14:80	14:84	11	-100
op	14:80	0:0	12	-
water	14:81	0:0	12	100
arg	14:86	14:89	11	155
water	14:86	0:0	12	155
water	14:90	0:0	10	;
water	15:16	0:0	10	minscaler_n
op	15:28	0:0	10	=
call	15:30	15:68	10	FFMIN
arg	15:36	15:47	11	minscaler_n
water	15:36	0:0	12	minscaler_n
arg	15:49	15:68	11	sce->sf_idx[w*16+g]
water	15:49	0:0	12	sce
op	15:52	0:0	12	->
water	15:54	0:0	12	sf_idx
op	15:60	0:0	12	[
water	15:61	0:0	12	w
op	15:62	0:0	12	*
water	15:63	0:0	12	16
op	15:65	0:0	12	+
water	15:66	0:0	12	g
op	15:67	0:0	12	]
water	15:69	0:0	10	;
water	16:16	0:0	10	bands
op	16:21	0:0	10	++
water	16:23	0:0	10	;
water	17:12	0:0	10	}
water	18:12	0:0	6	start
op	18:18	0:0	6	+=
water	18:21	0:0	6	sce
op	18:24	0:0	6	->
water	18:26	0:0	6	ics
op	18:29	0:0	6	.
water	18:30	0:0	6	swb_sizes
op	18:39	0:0	6	[
water	18:40	0:0	6	g
op	18:41	0:0	6	]
water	18:42	0:0	6	;
water	19:8	0:0	6	}
water	20:4	0:0	4	}
if	21:4	22:14	2	(! bands)
cond	21:8	21:9	3	! bands
op	21:8	0:0	4	!
water	21:9	0:0	4	bands
stmts	22:8	22:14	3	
return	22:8	22:14	4	
for	24:4	32:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	24:9	24:14	3	w = 0 ;
water	24:9	0:0	4	w
op	24:11	0:0	4	=
water	24:13	0:0	4	0
water	24:14	0:0	4	;
cond	24:16	24:29	3	w < sce -> ics . num_windows
water	24:16	0:0	4	w
op	24:18	0:0	4	<
water	24:20	0:0	4	sce
op	24:23	0:0	4	->
water	24:25	0:0	4	ics
op	24:28	0:0	4	.
water	24:29	0:0	4	num_windows
forexpr	24:42	24:67	3	w += sce -> ics . group_len [ w ]
water	24:42	0:0	4	w
op	24:44	0:0	4	+=
water	24:47	0:0	4	sce
op	24:50	0:0	4	->
water	24:52	0:0	4	ics
op	24:55	0:0	4	.
water	24:56	0:0	4	group_len
op	24:65	0:0	4	[
water	24:66	0:0	4	w
op	24:67	0:0	4	]
stmts	24:70	32:4	3	
water	24:70	0:0	4	{
for	25:8	31:8	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	25:13	25:18	5	g = 0 ;
water	25:13	0:0	6	g
op	25:15	0:0	6	=
water	25:17	0:0	6	0
water	25:18	0:0	6	;
cond	25:21	25:34	5	g < sce -> ics . num_swb
water	25:21	0:0	6	g
op	25:23	0:0	6	<
water	25:25	0:0	6	sce
op	25:28	0:0	6	->
water	25:30	0:0	6	ics
op	25:33	0:0	6	.
water	25:34	0:0	6	num_swb
forexpr	25:43	25:44	5	g ++
water	25:43	0:0	6	g
op	25:44	0:0	6	++
stmts	25:48	31:8	5	
water	25:48	0:0	6	{
if	26:12	28:12	6	(sce -> band_type [ w * 16 + g ] == INTENSITY_BT || sce -> band_type [ w * 16 + g ] == INTENSITY_BT2)
cond	26:16	26:84	7	sce -> band_type [ w * 16 + g ] == INTENSITY_BT || sce -> band_type [ w * 16 + g ] == INTENSITY_BT2
water	26:16	0:0	8	sce
op	26:19	0:0	8	->
water	26:21	0:0	8	band_type
op	26:30	0:0	8	[
water	26:31	0:0	8	w
op	26:32	0:0	8	*
water	26:33	0:0	8	16
op	26:35	0:0	8	+
water	26:36	0:0	8	g
op	26:37	0:0	8	]
op	26:39	0:0	8	==
water	26:42	0:0	8	INTENSITY_BT
op	26:55	0:0	8	||
water	26:58	0:0	8	sce
op	26:61	0:0	8	->
water	26:63	0:0	8	band_type
op	26:72	0:0	8	[
water	26:73	0:0	8	w
op	26:74	0:0	8	*
water	26:75	0:0	8	16
op	26:77	0:0	8	+
water	26:78	0:0	8	g
op	26:79	0:0	8	]
op	26:81	0:0	8	==
water	26:84	0:0	8	INTENSITY_BT2
stmts	26:99	28:12	7	
water	26:99	0:0	8	{
water	27:16	0:0	8	sce
op	27:19	0:0	8	->
water	27:21	0:0	8	sf_idx
op	27:27	0:0	8	[
water	27:28	0:0	8	w
op	27:29	0:0	8	*
water	27:30	0:0	8	16
op	27:32	0:0	8	+
water	27:33	0:0	8	g
op	27:34	0:0	8	]
op	27:36	0:0	8	=
call	27:38	27:108	8	av_clip
arg	27:46	27:65	9	sce->sf_idx[w*16+g]
water	27:46	0:0	10	sce
op	27:49	0:0	10	->
water	27:51	0:0	10	sf_idx
op	27:57	0:0	10	[
water	27:58	0:0	10	w
op	27:59	0:0	10	*
water	27:60	0:0	10	16
op	27:62	0:0	10	+
water	27:63	0:0	10	g
op	27:64	0:0	10	]
arg	27:67	27:78	9	minscaler_i
water	27:67	0:0	10	minscaler_i
arg	27:80	27:108	9	minscaler_i+SCALE_MAX_DIFF
water	27:80	0:0	10	minscaler_i
op	27:92	0:0	10	+
water	27:94	0:0	10	SCALE_MAX_DIFF
water	27:109	0:0	8	;
water	28:12	0:0	8	}
else	28:14	30:12	6
stmts	28:19	30:12	7	
if	28:19	30:12	8	(sce -> band_type [ w * 16 + g ] == NOISE_BT)
cond	28:23	28:49	9	sce -> band_type [ w * 16 + g ] == NOISE_BT
water	28:23	0:0	10	sce
op	28:26	0:0	10	->
water	28:28	0:0	10	band_type
op	28:37	0:0	10	[
water	28:38	0:0	10	w
op	28:39	0:0	10	*
water	28:40	0:0	10	16
op	28:42	0:0	10	+
water	28:43	0:0	10	g
op	28:44	0:0	10	]
op	28:46	0:0	10	==
water	28:49	0:0	10	NOISE_BT
stmts	28:59	30:12	9	
water	28:59	0:0	10	{
water	29:16	0:0	10	sce
op	29:19	0:0	10	->
water	29:21	0:0	10	sf_idx
op	29:27	0:0	10	[
water	29:28	0:0	10	w
op	29:29	0:0	10	*
water	29:30	0:0	10	16
op	29:32	0:0	10	+
water	29:33	0:0	10	g
op	29:34	0:0	10	]
op	29:36	0:0	10	=
call	29:38	29:108	10	av_clip
arg	29:46	29:65	11	sce->sf_idx[w*16+g]
water	29:46	0:0	12	sce
op	29:49	0:0	12	->
water	29:51	0:0	12	sf_idx
op	29:57	0:0	12	[
water	29:58	0:0	12	w
op	29:59	0:0	12	*
water	29:60	0:0	12	16
op	29:62	0:0	12	+
water	29:63	0:0	12	g
op	29:64	0:0	12	]
arg	29:67	29:78	11	minscaler_n
water	29:67	0:0	12	minscaler_n
arg	29:80	29:108	11	minscaler_n+SCALE_MAX_DIFF
water	29:80	0:0	12	minscaler_n
op	29:92	0:0	12	+
water	29:94	0:0	12	SCALE_MAX_DIFF
water	29:109	0:0	10	;
water	30:12	0:0	10	}
water	31:8	0:0	6	}
water	32:4	0:0	4	}
