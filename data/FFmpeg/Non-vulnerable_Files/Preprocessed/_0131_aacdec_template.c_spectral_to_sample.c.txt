func	1:0	67:0	0	static void	spectral_to_sample
params	1:30	0:0	1	
param	1:31	1:45	2	AACContext *	ac
param	1:47	1:58	2	int	samples
stmnts	0:0	66:4	1	
decl	3:4	3:15	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:15	2	int	type
call	4:4	4:27	2	void
arg	4:10	4:27	3	*imdct_and_window
op	4:10	0:0	4	*
water	4:11	0:0	4	imdct_and_window
water	4:28	0:0	2	(
water	4:29	0:0	2	AACContext
op	4:40	0:0	2	*
water	4:41	0:0	2	ac
water	4:43	0:0	2	,
water	4:45	0:0	2	SingleChannelElement
op	4:66	0:0	2	*
water	4:67	0:0	2	sce
water	4:70	0:0	2	)
water	4:71	0:0	2	;
switch	5:4	14:4	2	(ac -> oc [ 1 ] . m4ac . object_type)
cond	5:12	5:27	3	ac -> oc [ 1 ] . m4ac . object_type
water	5:12	0:0	4	ac
op	5:14	0:0	4	->
water	5:16	0:0	4	oc
op	5:18	0:0	4	[
water	5:19	0:0	4	1
op	5:20	0:0	4	]
op	5:21	0:0	4	.
water	5:22	0:0	4	m4ac
op	5:26	0:0	4	.
water	5:27	0:0	4	object_type
stmts	5:40	14:4	3	
water	5:40	0:0	4	{
label	6:4	6:22	4	case AOT_ER_AAC_LD :
water	7:8	0:0	4	imdct_and_window
op	7:25	0:0	4	=
water	7:27	0:0	4	imdct_and_windowing_ld
water	7:49	0:0	4	;
break	8:8	8:13	4	
label	9:4	9:23	4	case AOT_ER_AAC_ELD :
water	10:8	0:0	4	imdct_and_window
op	10:25	0:0	4	=
water	10:27	0:0	4	imdct_and_windowing_eld
water	10:50	0:0	4	;
break	11:8	11:13	4	
label	12:4	12:11	4	default :
water	13:8	0:0	4	imdct_and_window
op	13:25	0:0	4	=
water	13:27	0:0	4	ac
op	13:29	0:0	4	->
water	13:31	0:0	4	imdct_and_windowing
water	13:50	0:0	4	;
water	14:4	0:0	4	}
for	15:4	66:4	2	(type = 3 ;type >= 0;type --)
forinit	15:9	15:17	3	type = 3 ;
water	15:9	0:0	4	type
op	15:14	0:0	4	=
water	15:16	0:0	4	3
water	15:17	0:0	4	;
cond	15:19	15:27	3	type >= 0
water	15:19	0:0	4	type
op	15:24	0:0	4	>=
water	15:27	0:0	4	0
forexpr	15:30	15:34	3	type --
water	15:30	0:0	4	type
op	15:34	0:0	4	--
stmts	15:38	66:4	3	
water	15:38	0:0	4	{
for	16:8	65:8	4	(i = 0 ;i < MAX_ELEM_ID;i ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:24	5	i < MAX_ELEM_ID
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	MAX_ELEM_ID
forexpr	16:37	16:38	5	i ++
water	16:37	0:0	6	i
op	16:38	0:0	6	++
stmts	16:42	65:8	5	
water	16:42	0:0	6	{
decl	17:12	17:50	6	ChannelElement	*che
op	17:32	0:0	6	=
water	17:34	0:0	6	ac
op	17:36	0:0	6	->
water	17:38	0:0	6	che
op	17:41	0:0	6	[
water	17:42	0:0	6	type
op	17:46	0:0	6	]
op	17:47	0:0	6	[
water	17:48	0:0	6	i
op	17:49	0:0	6	]
if	18:12	62:12	6	(che && che -> present)
cond	18:16	18:28	7	che && che -> present
water	18:16	0:0	8	che
op	18:20	0:0	8	&&
water	18:23	0:0	8	che
op	18:26	0:0	8	->
water	18:28	0:0	8	present
stmts	18:37	62:12	7	
water	18:37	0:0	8	{
if	19:16	20:110	8	(type <= TYPE_CPE)
cond	19:20	19:28	9	type <= TYPE_CPE
water	19:20	0:0	10	type
op	19:25	0:0	10	<=
water	19:28	0:0	10	TYPE_CPE
stmts	20:20	20:110	9	
call	20:20	20:109	10	apply_channel_coupling
arg	20:43	20:45	11	ac
water	20:43	0:0	12	ac
arg	20:47	20:50	11	che
water	20:47	0:0	12	che
arg	20:52	20:56	11	type
water	20:52	0:0	12	type
arg	20:58	20:59	11	i
water	20:58	0:0	12	i
arg	20:61	20:71	11	BEFORE_TNS
water	20:61	0:0	12	BEFORE_TNS
arg	20:73	20:109	11	AAC_RENAME(apply_dependent_coupling)
call	20:73	20:108	12	AAC_RENAME
arg	20:84	20:108	13	apply_dependent_coupling
water	20:84	0:0	14	apply_dependent_coupling
water	20:110	0:0	10	;
if	21:16	28:16	8	(ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP)
cond	21:20	21:50	9	ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP
water	21:20	0:0	10	ac
op	21:22	0:0	10	->
water	21:24	0:0	10	oc
op	21:26	0:0	10	[
water	21:27	0:0	10	1
op	21:28	0:0	10	]
op	21:29	0:0	10	.
water	21:30	0:0	10	m4ac
op	21:34	0:0	10	.
water	21:35	0:0	10	object_type
op	21:47	0:0	10	==
water	21:50	0:0	10	AOT_AAC_LTP
stmts	21:63	28:16	9	
water	21:63	0:0	10	{
if	22:20	27:20	10	(che -> ch [ 0 ] . ics . predictor_present)
cond	22:24	22:39	11	che -> ch [ 0 ] . ics . predictor_present
water	22:24	0:0	12	che
op	22:27	0:0	12	->
water	22:29	0:0	12	ch
op	22:31	0:0	12	[
water	22:32	0:0	12	0
op	22:33	0:0	12	]
op	22:34	0:0	12	.
water	22:35	0:0	12	ics
op	22:38	0:0	12	.
water	22:39	0:0	12	predictor_present
stmts	22:58	27:20	11	
water	22:58	0:0	12	{
if	23:24	24:58	12	(che -> ch [ 0 ] . ics . ltp . present)
cond	23:28	23:47	13	che -> ch [ 0 ] . ics . ltp . present
water	23:28	0:0	14	che
op	23:31	0:0	14	->
water	23:33	0:0	14	ch
op	23:35	0:0	14	[
water	23:36	0:0	14	0
op	23:37	0:0	14	]
op	23:38	0:0	14	.
water	23:39	0:0	14	ics
op	23:42	0:0	14	.
water	23:43	0:0	14	ltp
op	23:46	0:0	14	.
water	23:47	0:0	14	present
stmts	24:28	24:58	13	
call	24:28	24:57	14	ac->apply_ltp
arg	24:42	24:44	15	ac
water	24:42	0:0	16	ac
arg	24:46	24:57	15	&che->ch[0]
op	24:46	0:0	16	&
water	24:47	0:0	16	che
op	24:50	0:0	16	->
water	24:52	0:0	16	ch
op	24:54	0:0	16	[
water	24:55	0:0	16	0
op	24:56	0:0	16	]
water	24:58	0:0	14	;
if	25:24	26:58	12	(che -> ch [ 1 ] . ics . ltp . present && type == TYPE_CPE)
cond	25:28	25:66	13	che -> ch [ 1 ] . ics . ltp . present && type == TYPE_CPE
water	25:28	0:0	14	che
op	25:31	0:0	14	->
water	25:33	0:0	14	ch
op	25:35	0:0	14	[
water	25:36	0:0	14	1
op	25:37	0:0	14	]
op	25:38	0:0	14	.
water	25:39	0:0	14	ics
op	25:42	0:0	14	.
water	25:43	0:0	14	ltp
op	25:46	0:0	14	.
water	25:47	0:0	14	present
op	25:55	0:0	14	&&
water	25:58	0:0	14	type
op	25:63	0:0	14	==
water	25:66	0:0	14	TYPE_CPE
stmts	26:28	26:58	13	
call	26:28	26:57	14	ac->apply_ltp
arg	26:42	26:44	15	ac
water	26:42	0:0	16	ac
arg	26:46	26:57	15	&che->ch[1]
op	26:46	0:0	16	&
water	26:47	0:0	16	che
op	26:50	0:0	16	->
water	26:52	0:0	16	ch
op	26:54	0:0	16	[
water	26:55	0:0	16	1
op	26:56	0:0	16	]
water	26:58	0:0	14	;
water	27:20	0:0	12	}
water	28:16	0:0	10	}
if	29:16	30:89	8	(che -> ch [ 0 ] . tns . present)
cond	29:20	29:35	9	che -> ch [ 0 ] . tns . present
water	29:20	0:0	10	che
op	29:23	0:0	10	->
water	29:25	0:0	10	ch
op	29:27	0:0	10	[
water	29:28	0:0	10	0
op	29:29	0:0	10	]
op	29:30	0:0	10	.
water	29:31	0:0	10	tns
op	29:34	0:0	10	.
water	29:35	0:0	10	present
stmts	30:20	30:89	9	
call	30:20	30:88	10	ac->apply_tns
arg	30:34	30:51	11	che->ch[0].coeffs
water	30:34	0:0	12	che
op	30:37	0:0	12	->
water	30:39	0:0	12	ch
op	30:41	0:0	12	[
water	30:42	0:0	12	0
op	30:43	0:0	12	]
op	30:44	0:0	12	.
water	30:45	0:0	12	coeffs
arg	30:53	30:68	11	&che->ch[0].tns
op	30:53	0:0	12	&
water	30:54	0:0	12	che
op	30:57	0:0	12	->
water	30:59	0:0	12	ch
op	30:61	0:0	12	[
water	30:62	0:0	12	0
op	30:63	0:0	12	]
op	30:64	0:0	12	.
water	30:65	0:0	12	tns
arg	30:70	30:85	11	&che->ch[0].ics
op	30:70	0:0	12	&
water	30:71	0:0	12	che
op	30:74	0:0	12	->
water	30:76	0:0	12	ch
op	30:78	0:0	12	[
water	30:79	0:0	12	0
op	30:80	0:0	12	]
op	30:81	0:0	12	.
water	30:82	0:0	12	ics
arg	30:87	30:88	11	1
water	30:87	0:0	12	1
water	30:89	0:0	10	;
if	31:16	32:89	8	(che -> ch [ 1 ] . tns . present)
cond	31:20	31:35	9	che -> ch [ 1 ] . tns . present
water	31:20	0:0	10	che
op	31:23	0:0	10	->
water	31:25	0:0	10	ch
op	31:27	0:0	10	[
water	31:28	0:0	10	1
op	31:29	0:0	10	]
op	31:30	0:0	10	.
water	31:31	0:0	10	tns
op	31:34	0:0	10	.
water	31:35	0:0	10	present
stmts	32:20	32:89	9	
call	32:20	32:88	10	ac->apply_tns
arg	32:34	32:51	11	che->ch[1].coeffs
water	32:34	0:0	12	che
op	32:37	0:0	12	->
water	32:39	0:0	12	ch
op	32:41	0:0	12	[
water	32:42	0:0	12	1
op	32:43	0:0	12	]
op	32:44	0:0	12	.
water	32:45	0:0	12	coeffs
arg	32:53	32:68	11	&che->ch[1].tns
op	32:53	0:0	12	&
water	32:54	0:0	12	che
op	32:57	0:0	12	->
water	32:59	0:0	12	ch
op	32:61	0:0	12	[
water	32:62	0:0	12	1
op	32:63	0:0	12	]
op	32:64	0:0	12	.
water	32:65	0:0	12	tns
arg	32:70	32:85	11	&che->ch[1].ics
op	32:70	0:0	12	&
water	32:71	0:0	12	che
op	32:74	0:0	12	->
water	32:76	0:0	12	ch
op	32:78	0:0	12	[
water	32:79	0:0	12	1
op	32:80	0:0	12	]
op	32:81	0:0	12	.
water	32:82	0:0	12	ics
arg	32:87	32:88	11	1
water	32:87	0:0	12	1
water	32:89	0:0	10	;
if	33:16	34:121	8	(type <= TYPE_CPE)
cond	33:20	33:28	9	type <= TYPE_CPE
water	33:20	0:0	10	type
op	33:25	0:0	10	<=
water	33:28	0:0	10	TYPE_CPE
stmts	34:20	34:121	9	
call	34:20	34:120	10	apply_channel_coupling
arg	34:43	34:45	11	ac
water	34:43	0:0	12	ac
arg	34:47	34:50	11	che
water	34:47	0:0	12	che
arg	34:52	34:56	11	type
water	34:52	0:0	12	type
arg	34:58	34:59	11	i
water	34:58	0:0	12	i
arg	34:61	34:82	11	BETWEEN_TNS_AND_IMDCT
water	34:61	0:0	12	BETWEEN_TNS_AND_IMDCT
arg	34:84	34:120	11	AAC_RENAME(apply_dependent_coupling)
call	34:84	34:119	12	AAC_RENAME
arg	34:95	34:119	13	apply_dependent_coupling
water	34:95	0:0	14	apply_dependent_coupling
water	34:121	0:0	10	;
if	35:16	47:16	8	(type != TYPE_CCE || che -> coup . coupling_point == AFTER_IMDCT)
cond	35:20	35:68	9	type != TYPE_CCE || che -> coup . coupling_point == AFTER_IMDCT
water	35:20	0:0	10	type
op	35:25	0:0	10	!=
water	35:28	0:0	10	TYPE_CCE
op	35:37	0:0	10	||
water	35:40	0:0	10	che
op	35:43	0:0	10	->
water	35:45	0:0	10	coup
op	35:49	0:0	10	.
water	35:50	0:0	10	coupling_point
op	35:65	0:0	10	==
water	35:68	0:0	10	AFTER_IMDCT
stmts	35:81	47:16	9	
water	35:81	0:0	10	{
call	36:20	36:52	10	imdct_and_window
arg	36:37	36:39	11	ac
water	36:37	0:0	12	ac
arg	36:41	36:52	11	&che->ch[0]
op	36:41	0:0	12	&
water	36:42	0:0	12	che
op	36:45	0:0	12	->
water	36:47	0:0	12	ch
op	36:49	0:0	12	[
water	36:50	0:0	12	0
op	36:51	0:0	12	]
water	36:53	0:0	10	;
if	37:20	38:55	10	(ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP)
cond	37:24	37:54	11	ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP
water	37:24	0:0	12	ac
op	37:26	0:0	12	->
water	37:28	0:0	12	oc
op	37:30	0:0	12	[
water	37:31	0:0	12	1
op	37:32	0:0	12	]
op	37:33	0:0	12	.
water	37:34	0:0	12	m4ac
op	37:38	0:0	12	.
water	37:39	0:0	12	object_type
op	37:51	0:0	12	==
water	37:54	0:0	12	AOT_AAC_LTP
stmts	38:24	38:55	11	
call	38:24	38:54	12	ac->update_ltp
arg	38:39	38:41	13	ac
water	38:39	0:0	14	ac
arg	38:43	38:54	13	&che->ch[0]
op	38:43	0:0	14	&
water	38:44	0:0	14	che
op	38:47	0:0	14	->
water	38:49	0:0	14	ch
op	38:51	0:0	14	[
water	38:52	0:0	14	0
op	38:53	0:0	14	]
water	38:55	0:0	12	;
if	39:20	43:20	10	(type == TYPE_CPE)
cond	39:24	39:32	11	type == TYPE_CPE
water	39:24	0:0	12	type
op	39:29	0:0	12	==
water	39:32	0:0	12	TYPE_CPE
stmts	39:42	43:20	11	
water	39:42	0:0	12	{
call	40:24	40:56	12	imdct_and_window
arg	40:41	40:43	13	ac
water	40:41	0:0	14	ac
arg	40:45	40:56	13	&che->ch[1]
op	40:45	0:0	14	&
water	40:46	0:0	14	che
op	40:49	0:0	14	->
water	40:51	0:0	14	ch
op	40:53	0:0	14	[
water	40:54	0:0	14	1
op	40:55	0:0	14	]
water	40:57	0:0	12	;
if	41:24	42:59	12	(ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP)
cond	41:28	41:58	13	ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP
water	41:28	0:0	14	ac
op	41:30	0:0	14	->
water	41:32	0:0	14	oc
op	41:34	0:0	14	[
water	41:35	0:0	14	1
op	41:36	0:0	14	]
op	41:37	0:0	14	.
water	41:38	0:0	14	m4ac
op	41:42	0:0	14	.
water	41:43	0:0	14	object_type
op	41:55	0:0	14	==
water	41:58	0:0	14	AOT_AAC_LTP
stmts	42:28	42:59	13	
call	42:28	42:58	14	ac->update_ltp
arg	42:43	42:45	15	ac
water	42:43	0:0	16	ac
arg	42:47	42:58	15	&che->ch[1]
op	42:47	0:0	16	&
water	42:48	0:0	16	che
op	42:51	0:0	16	->
water	42:53	0:0	16	ch
op	42:55	0:0	16	[
water	42:56	0:0	16	1
op	42:57	0:0	16	]
water	42:59	0:0	14	;
water	43:20	0:0	12	}
if	44:20	46:20	10	(ac -> oc [ 1 ] . m4ac . sbr > 0)
cond	44:24	44:45	11	ac -> oc [ 1 ] . m4ac . sbr > 0
water	44:24	0:0	12	ac
op	44:26	0:0	12	->
water	44:28	0:0	12	oc
op	44:30	0:0	12	[
water	44:31	0:0	12	1
op	44:32	0:0	12	]
op	44:33	0:0	12	.
water	44:34	0:0	12	m4ac
op	44:38	0:0	12	.
water	44:39	0:0	12	sbr
op	44:43	0:0	12	>
water	44:45	0:0	12	0
stmts	44:48	46:20	11	
water	44:48	0:0	12	{
call	45:24	45:47	12	AAC_RENAME
arg	45:35	45:47	13	ff_sbr_apply
water	45:35	0:0	14	ff_sbr_apply
water	45:48	0:0	12	(
water	45:49	0:0	12	ac
water	45:51	0:0	12	,
op	45:53	0:0	12	&
water	45:54	0:0	12	che
op	45:57	0:0	12	->
water	45:59	0:0	12	sbr
water	45:62	0:0	12	,
water	45:64	0:0	12	type
water	45:68	0:0	12	,
water	45:70	0:0	12	che
op	45:73	0:0	12	->
water	45:75	0:0	12	ch
op	45:77	0:0	12	[
water	45:78	0:0	12	0
op	45:79	0:0	12	]
op	45:80	0:0	12	.
water	45:81	0:0	12	ret
water	45:84	0:0	12	,
water	45:86	0:0	12	che
op	45:89	0:0	12	->
water	45:91	0:0	12	ch
op	45:93	0:0	12	[
water	45:94	0:0	12	1
op	45:95	0:0	12	]
op	45:96	0:0	12	.
water	45:97	0:0	12	ret
water	45:100	0:0	12	)
water	45:101	0:0	12	;
water	46:20	0:0	12	}
water	47:16	0:0	10	}
if	48:16	49:113	8	(type <= TYPE_CCE)
cond	48:20	48:28	9	type <= TYPE_CCE
water	48:20	0:0	10	type
op	48:25	0:0	10	<=
water	48:28	0:0	10	TYPE_CCE
stmts	49:20	49:113	9	
call	49:20	49:112	10	apply_channel_coupling
arg	49:43	49:45	11	ac
water	49:43	0:0	12	ac
arg	49:47	49:50	11	che
water	49:47	0:0	12	che
arg	49:52	49:56	11	type
water	49:52	0:0	12	type
arg	49:58	49:59	11	i
water	49:58	0:0	12	i
arg	49:61	49:72	11	AFTER_IMDCT
water	49:61	0:0	12	AFTER_IMDCT
arg	49:74	49:112	11	AAC_RENAME(apply_independent_coupling)
call	49:74	49:111	12	AAC_RENAME
arg	49:85	49:111	13	apply_independent_coupling
water	49:85	0:0	14	apply_independent_coupling
water	49:113	0:0	10	;
water	51:16	0:0	8	{
decl	52:20	52:25	8	int	j
for	54:20	58:20	8	(j = 0 ;j < samples;j ++)
forinit	54:24	54:29	9	j = 0 ;
water	54:24	0:0	10	j
op	54:26	0:0	10	=
water	54:28	0:0	10	0
water	54:29	0:0	10	;
cond	54:31	54:33	9	j < samples
water	54:31	0:0	10	j
op	54:32	0:0	10	<
water	54:33	0:0	10	samples
forexpr	54:42	54:43	9	j ++
water	54:42	0:0	10	j
op	54:43	0:0	10	++
stmts	54:46	58:20	9	
water	54:46	0:0	10	{
water	55:24	0:0	10	che
op	55:27	0:0	10	->
water	55:29	0:0	10	ch
op	55:31	0:0	10	[
water	55:32	0:0	10	0
op	55:33	0:0	10	]
op	55:34	0:0	10	.
water	55:35	0:0	10	ret
op	55:38	0:0	10	[
water	55:39	0:0	10	j
op	55:40	0:0	10	]
op	55:42	0:0	10	=
water	55:44	0:0	10	(
water	55:45	0:0	10	int32_t
water	55:52	0:0	10	)
call	55:53	55:97	10	av_clipl_int32
arg	55:68	55:97	11	(int64_t)che->ch[0].ret[j]<<7
water	55:68	0:0	12	(
water	55:69	0:0	12	int64_t
water	55:76	0:0	12	)
water	55:77	0:0	12	che
op	55:80	0:0	12	->
water	55:82	0:0	12	ch
op	55:84	0:0	12	[
water	55:85	0:0	12	0
op	55:86	0:0	12	]
op	55:87	0:0	12	.
water	55:88	0:0	12	ret
op	55:91	0:0	12	[
water	55:92	0:0	12	j
op	55:93	0:0	12	]
op	55:94	0:0	12	<<
water	55:96	0:0	12	7
op	55:98	0:0	10	+
water	55:99	0:0	10	0
water	55:100	0:0	10	x8000
water	55:105	0:0	10	;
if	56:24	57:109	10	(type == TYPE_CPE)
cond	56:27	56:35	11	type == TYPE_CPE
water	56:27	0:0	12	type
op	56:32	0:0	12	==
water	56:35	0:0	12	TYPE_CPE
stmts	57:28	57:109	11	
water	57:28	0:0	12	che
op	57:31	0:0	12	->
water	57:33	0:0	12	ch
op	57:35	0:0	12	[
water	57:36	0:0	12	1
op	57:37	0:0	12	]
op	57:38	0:0	12	.
water	57:39	0:0	12	ret
op	57:42	0:0	12	[
water	57:43	0:0	12	j
op	57:44	0:0	12	]
op	57:46	0:0	12	=
water	57:48	0:0	12	(
water	57:49	0:0	12	int32_t
water	57:56	0:0	12	)
call	57:57	57:101	12	av_clipl_int32
arg	57:72	57:101	13	(int64_t)che->ch[1].ret[j]<<7
water	57:72	0:0	14	(
water	57:73	0:0	14	int64_t
water	57:80	0:0	14	)
water	57:81	0:0	14	che
op	57:84	0:0	14	->
water	57:86	0:0	14	ch
op	57:88	0:0	14	[
water	57:89	0:0	14	1
op	57:90	0:0	14	]
op	57:91	0:0	14	.
water	57:92	0:0	14	ret
op	57:95	0:0	14	[
water	57:96	0:0	14	j
op	57:97	0:0	14	]
op	57:98	0:0	14	<<
water	57:100	0:0	14	7
op	57:102	0:0	12	+
water	57:103	0:0	12	0
water	57:104	0:0	12	x8000
water	57:109	0:0	12	;
water	58:20	0:0	10	}
water	59:16	0:0	8	}
water	61:16	0:0	8	che
op	61:19	0:0	8	->
water	61:21	0:0	8	present
op	61:29	0:0	8	=
water	61:31	0:0	8	0
water	61:32	0:0	8	;
water	62:12	0:0	8	}
else	62:14	64:12	6
stmts	62:19	64:12	7	
if	62:19	64:12	8	(che)
cond	62:23	62:23	9	che
water	62:23	0:0	10	che
stmts	62:28	64:12	9	
water	62:28	0:0	10	{
call	63:16	63:92	10	av_log
arg	63:23	63:32	11	ac->avctx
water	63:23	0:0	12	ac
op	63:25	0:0	12	->
water	63:27	0:0	12	avctx
arg	63:34	63:48	11	AV_LOG_VERBOSE
water	63:34	0:0	12	AV_LOG_VERBOSE
arg	63:50	63:83	11	"ChannelElement %d.%d missing \n"
water	63:50	0:0	12	"ChannelElement %d.%d missing \n"
arg	63:85	63:89	11	type
water	63:85	0:0	12	type
arg	63:91	63:92	11	i
water	63:91	0:0	12	i
water	63:93	0:0	10	;
water	64:12	0:0	10	}
water	65:8	0:0	6	}
water	66:4	0:0	4	}
