func	1:0	26:0	0	static int	query_formats
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
stmnts	0:0	25:12	1	
decl	3:4	3:29	2	AVFilterFormats	*formats
decl	4:4	4:30	2	enum AVPixelFormat	pix_fmt
decl	5:4	5:24	2	int	ret
if	8:4	24:4	2	(ctx -> inputs [ 0 ])
cond	8:8	8:21	3	ctx -> inputs [ 0 ]
water	8:8	0:0	4	ctx
op	8:11	0:0	4	->
water	8:13	0:0	4	inputs
op	8:19	0:0	4	[
water	8:20	0:0	4	0
op	8:21	0:0	4	]
stmts	8:24	24:4	3	
water	8:24	0:0	4	{
decl	9:8	9:45	4	const AVPixFmtDescriptor	*desc
op	9:39	0:0	4	=
water	9:41	0:0	4	NULL
water	10:8	0:0	4	formats
op	10:16	0:0	4	=
water	10:18	0:0	4	NULL
water	10:22	0:0	4	;
while	11:8	21:8	4	(( desc =av_pix_fmt_desc_next (desc ) ))
cond	11:15	11:49	5	( desc =av_pix_fmt_desc_next (desc ) )
water	11:15	0:0	6	(
water	11:16	0:0	6	desc
op	11:21	0:0	6	=
call	11:23	11:48	6	av_pix_fmt_desc_next
arg	11:44	11:48	7	desc
water	11:44	0:0	8	desc
water	11:49	0:0	6	)
stmts	11:52	21:8	5	
water	11:52	0:0	6	{
water	12:12	0:0	6	pix_fmt
op	12:20	0:0	6	=
call	12:22	12:49	6	av_pix_fmt_desc_get_id
arg	12:45	12:49	7	desc
water	12:45	0:0	8	desc
water	12:50	0:0	6	;
if	13:12	20:12	6	(! ( desc -> flags & AV_PIX_FMT_FLAG_HWACCEL || desc -> flags & AV_PIX_FMT_FLAG_PAL || desc -> flags & AV_PIX_FMT_FLAG_BITSTREAM ) && desc -> nb_components && ! desc -> log2_chroma_h && ( ret =ff_add_format (& formats ,pix_fmt ) ) < 0)
cond	13:16	17:59	7	! ( desc -> flags & AV_PIX_FMT_FLAG_HWACCEL || desc -> flags & AV_PIX_FMT_FLAG_PAL || desc -> flags & AV_PIX_FMT_FLAG_BITSTREAM ) && desc -> nb_components && ! desc -> log2_chroma_h && ( ret =ff_add_format (& formats ,pix_fmt ) ) < 0
op	13:16	0:0	8	!
water	13:17	0:0	8	(
water	13:18	0:0	8	desc
op	13:22	0:0	8	->
water	13:24	0:0	8	flags
op	13:30	0:0	8	&
water	13:32	0:0	8	AV_PIX_FMT_FLAG_HWACCEL
op	13:56	0:0	8	||
water	14:18	0:0	8	desc
op	14:22	0:0	8	->
water	14:24	0:0	8	flags
op	14:30	0:0	8	&
water	14:32	0:0	8	AV_PIX_FMT_FLAG_PAL
op	14:56	0:0	8	||
water	15:18	0:0	8	desc
op	15:22	0:0	8	->
water	15:24	0:0	8	flags
op	15:30	0:0	8	&
water	15:32	0:0	8	AV_PIX_FMT_FLAG_BITSTREAM
water	15:57	0:0	8	)
op	15:59	0:0	8	&&
water	16:16	0:0	8	desc
op	16:20	0:0	8	->
water	16:22	0:0	8	nb_components
op	16:36	0:0	8	&&
op	16:39	0:0	8	!
water	16:40	0:0	8	desc
op	16:44	0:0	8	->
water	16:46	0:0	8	log2_chroma_h
op	16:60	0:0	8	&&
water	17:16	0:0	8	(
water	17:17	0:0	8	ret
op	17:21	0:0	8	=
call	17:23	17:54	8	ff_add_format
arg	17:37	17:45	9	&formats
op	17:37	0:0	10	&
water	17:38	0:0	10	formats
arg	17:47	17:54	9	pix_fmt
water	17:47	0:0	10	pix_fmt
water	17:55	0:0	8	)
op	17:57	0:0	8	<
water	17:59	0:0	8	0
stmts	17:62	20:12	7	
water	17:62	0:0	8	{
call	18:16	18:41	8	ff_formats_unref
arg	18:33	18:41	9	&formats
op	18:33	0:0	10	&
water	18:34	0:0	10	formats
water	18:42	0:0	8	;
return	19:16	19:26	8	ret
water	19:23	0:0	9	ret
water	20:12	0:0	8	}
water	21:8	0:0	6	}
call	22:8	22:60	4	ff_formats_ref
arg	22:23	22:30	5	formats
water	22:23	0:0	6	formats
arg	22:32	22:60	5	&ctx->inputs[0]->out_formats
op	22:32	0:0	6	&
water	22:33	0:0	6	ctx
op	22:36	0:0	6	->
water	22:38	0:0	6	inputs
op	22:44	0:0	6	[
water	22:45	0:0	6	0
op	22:46	0:0	6	]
op	22:47	0:0	6	->
water	22:49	0:0	6	out_formats
water	22:61	0:0	4	;
call	23:8	23:60	4	ff_formats_ref
arg	23:23	23:30	5	formats
water	23:23	0:0	6	formats
arg	23:32	23:60	5	&ctx->outputs[0]->in_formats
op	23:32	0:0	6	&
water	23:33	0:0	6	ctx
op	23:36	0:0	6	->
water	23:38	0:0	6	outputs
op	23:45	0:0	6	[
water	23:46	0:0	6	0
op	23:47	0:0	6	]
op	23:48	0:0	6	->
water	23:50	0:0	6	in_formats
water	23:61	0:0	4	;
water	24:4	0:0	4	}
return	25:4	25:12	2	0
water	25:11	0:0	3	0
