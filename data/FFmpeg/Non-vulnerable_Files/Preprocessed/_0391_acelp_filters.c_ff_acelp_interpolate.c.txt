func	1:0	27:0	0	void	ff_acelp_interpolate
params	1:25	0:0	1	
param	1:26	1:38	2	int16_t *	out
param	1:40	1:57	2	const int16_t *	in
param	2:26	2:54	2	const int16_t *	filter_coeffs
param	2:56	2:69	2	int	precision
param	3:26	3:38	2	int	frac_pos
param	3:40	3:57	2	int	filter_length
param	3:59	3:69	2	int	length
stmnts	0:0	26:4	1	
decl	5:4	5:12	2	int	n
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	i
call	6:4	6:52	2	av_assert1
arg	6:15	6:52	3	frac_pos>=0&&frac_pos<precision
water	6:15	0:0	4	frac_pos
op	6:24	0:0	4	>=
water	6:27	0:0	4	0
op	6:29	0:0	4	&&
water	6:32	0:0	4	frac_pos
op	6:41	0:0	4	<
water	6:43	0:0	4	precision
water	6:53	0:0	2	;
for	7:4	26:4	2	(n = 0 ;n < length;n ++)
forinit	7:9	7:14	3	n = 0 ;
water	7:9	0:0	4	n
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:20	3	n < length
water	7:16	0:0	4	n
op	7:18	0:0	4	<
water	7:20	0:0	4	length
forexpr	7:28	7:29	3	n ++
water	7:28	0:0	4	n
op	7:29	0:0	4	++
stmts	7:33	26:4	3	
water	7:33	0:0	4	{
decl	8:8	8:19	4	int	idx
op	8:16	0:0	4	=
water	8:18	0:0	4	0
decl	9:8	9:22	4	int	v
op	9:14	0:0	4	=
water	9:16	0:0	4	0
water	9:17	0:0	4	x4000
for	10:8	22:8	4	(i = 0 ;i < filter_length;)
forinit	10:13	10:18	5	i = 0 ;
water	10:13	0:0	6	i
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:20	10:24	5	i < filter_length
water	10:20	0:0	6	i
op	10:22	0:0	6	<
water	10:24	0:0	6	filter_length
forexpr	0:0	0:0	5	
stmts	10:40	22:8	5	
water	10:40	0:0	6	{
water	18:12	0:0	6	v
op	18:14	0:0	6	+=
water	18:17	0:0	6	in
op	18:19	0:0	6	[
water	18:20	0:0	6	n
op	18:22	0:0	6	+
water	18:24	0:0	6	i
op	18:25	0:0	6	]
op	18:27	0:0	6	*
water	18:29	0:0	6	filter_coeffs
op	18:42	0:0	6	[
water	18:43	0:0	6	idx
op	18:47	0:0	6	+
water	18:49	0:0	6	frac_pos
op	18:57	0:0	6	]
water	18:58	0:0	6	;
water	19:12	0:0	6	idx
op	19:16	0:0	6	+=
water	19:19	0:0	6	precision
water	19:28	0:0	6	;
water	20:12	0:0	6	i
op	20:13	0:0	6	++
water	20:15	0:0	6	;
water	21:12	0:0	6	v
op	21:14	0:0	6	+=
water	21:17	0:0	6	in
op	21:19	0:0	6	[
water	21:20	0:0	6	n
op	21:22	0:0	6	-
water	21:24	0:0	6	i
op	21:25	0:0	6	]
op	21:27	0:0	6	*
water	21:29	0:0	6	filter_coeffs
op	21:42	0:0	6	[
water	21:43	0:0	6	idx
op	21:47	0:0	6	-
water	21:49	0:0	6	frac_pos
op	21:57	0:0	6	]
water	21:58	0:0	6	;
water	22:8	0:0	6	}
if	23:8	24:104	4	(av_clip_int16 (v >> 15 ) != ( v >> 15 ))
cond	23:12	23:46	5	av_clip_int16 (v >> 15 ) != ( v >> 15 )
call	23:12	23:33	6	av_clip_int16
arg	23:26	23:33	7	v>>15
water	23:26	0:0	8	v
op	23:28	0:0	8	>>
water	23:31	0:0	8	15
op	23:35	0:0	6	!=
water	23:38	0:0	6	(
water	23:39	0:0	6	v
op	23:41	0:0	6	>>
water	23:44	0:0	6	15
water	23:46	0:0	6	)
stmts	24:12	24:104	5	
call	24:12	24:103	6	av_log
arg	24:19	24:23	7	NULL
water	24:19	0:0	8	NULL
arg	24:25	24:39	7	AV_LOG_WARNING
water	24:25	0:0	8	AV_LOG_WARNING
arg	24:41	24:103	7	"overflow that would need cliping in ff_acelp_interpolate()\n"
water	24:41	0:0	8	"overflow that would need cliping in ff_acelp_interpolate()\n"
water	24:104	0:0	6	;
water	25:8	0:0	4	out
op	25:11	0:0	4	[
water	25:12	0:0	4	n
op	25:13	0:0	4	]
op	25:15	0:0	4	=
water	25:17	0:0	4	v
op	25:19	0:0	4	>>
water	25:22	0:0	4	15
water	25:24	0:0	4	;
water	26:4	0:0	4	}
decl	33:4	33:12	0	int	n
water	33:9	0:0	0	,
decl	33:4	33:12	0	int	i
decl	36:8	36:19	0	int	idx
op	36:16	0:0	0	=
water	36:18	0:0	0	0
decl	37:8	37:22	0	int	v
op	37:14	0:0	0	=
water	37:16	0:0	0	0
water	37:17	0:0	0	x4000
