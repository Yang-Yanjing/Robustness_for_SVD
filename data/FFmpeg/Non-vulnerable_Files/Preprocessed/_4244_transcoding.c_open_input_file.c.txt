decl	1:7	1:35	0	FilteringContext	*filter_ctx
func	2:0	34:0	0	static int	open_input_file
params	2:26	0:0	1	
param	2:27	2:47	2	const char *	filename
stmnts	0:0	33:12	1	
decl	4:4	4:11	2	int	ret
decl	5:4	5:18	2	unsigned int	i
water	6:4	0:0	2	ifmt_ctx
op	6:13	0:0	2	=
water	6:15	0:0	2	NULL
water	6:19	0:0	2	;
if	7:4	10:4	2	(( ret =avformat_open_input (& ifmt_ctx ,filename ,NULL ,NULL ) ) < 0)
cond	7:8	7:71	3	( ret =avformat_open_input (& ifmt_ctx ,filename ,NULL ,NULL ) ) < 0
water	7:8	0:0	4	(
water	7:9	0:0	4	ret
op	7:13	0:0	4	=
call	7:15	7:66	4	avformat_open_input
arg	7:35	7:44	5	&ifmt_ctx
op	7:35	0:0	6	&
water	7:36	0:0	6	ifmt_ctx
arg	7:46	7:54	5	filename
water	7:46	0:0	6	filename
arg	7:56	7:60	5	NULL
water	7:56	0:0	6	NULL
arg	7:62	7:66	5	NULL
water	7:62	0:0	6	NULL
water	7:67	0:0	4	)
op	7:69	0:0	4	<
water	7:71	0:0	4	0
stmts	7:74	10:4	3	
water	7:74	0:0	4	{
call	8:8	8:61	4	av_log
arg	8:15	8:19	5	NULL
water	8:15	0:0	6	NULL
arg	8:21	8:33	5	AV_LOG_ERROR
water	8:21	0:0	6	AV_LOG_ERROR
arg	8:35	8:61	5	"Cannot open input file\n"
water	8:35	0:0	6	"Cannot open input file\n"
water	8:62	0:0	4	;
return	9:8	9:18	4	ret
water	9:15	0:0	5	ret
water	10:4	0:0	4	}
if	11:4	14:4	2	(( ret =avformat_find_stream_info (ifmt_ctx ,NULL ) ) < 0)
cond	11:8	11:60	3	( ret =avformat_find_stream_info (ifmt_ctx ,NULL ) ) < 0
water	11:8	0:0	4	(
water	11:9	0:0	4	ret
op	11:13	0:0	4	=
call	11:15	11:55	4	avformat_find_stream_info
arg	11:41	11:49	5	ifmt_ctx
water	11:41	0:0	6	ifmt_ctx
arg	11:51	11:55	5	NULL
water	11:51	0:0	6	NULL
water	11:56	0:0	4	)
op	11:58	0:0	4	<
water	11:60	0:0	4	0
stmts	11:63	14:4	3	
water	11:63	0:0	4	{
call	12:8	12:69	4	av_log
arg	12:15	12:19	5	NULL
water	12:15	0:0	6	NULL
arg	12:21	12:33	5	AV_LOG_ERROR
water	12:21	0:0	6	AV_LOG_ERROR
arg	12:35	12:69	5	"Cannot find stream information\n"
water	12:35	0:0	6	"Cannot find stream information\n"
water	12:70	0:0	4	;
return	13:8	13:18	4	ret
water	13:15	0:0	5	ret
water	14:4	0:0	4	}
for	15:4	31:4	2	(i = 0 ;i < ifmt_ctx -> nb_streams;i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:30	3	i < ifmt_ctx -> nb_streams
water	15:16	0:0	4	i
op	15:18	0:0	4	<
water	15:20	0:0	4	ifmt_ctx
op	15:28	0:0	4	->
water	15:30	0:0	4	nb_streams
forexpr	15:42	15:43	3	i ++
water	15:42	0:0	4	i
op	15:43	0:0	4	++
stmts	15:47	31:4	3	
water	15:47	0:0	4	{
decl	16:8	16:24	4	AVStream	*stream
decl	17:8	17:33	4	AVCodecContext	*codec_ctx
water	18:8	0:0	4	stream
op	18:15	0:0	4	=
water	18:17	0:0	4	ifmt_ctx
op	18:25	0:0	4	->
water	18:27	0:0	4	streams
op	18:34	0:0	4	[
water	18:35	0:0	4	i
op	18:36	0:0	4	]
water	18:37	0:0	4	;
water	19:8	0:0	4	codec_ctx
op	19:18	0:0	4	=
water	19:20	0:0	4	stream
op	19:26	0:0	4	->
water	19:28	0:0	4	codec
water	19:33	0:0	4	;
if	21:8	30:8	4	(codec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO || codec_ctx -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	21:12	22:44	5	codec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO || codec_ctx -> codec_type == AVMEDIA_TYPE_AUDIO
water	21:12	0:0	6	codec_ctx
op	21:21	0:0	6	->
water	21:23	0:0	6	codec_type
op	21:34	0:0	6	==
water	21:37	0:0	6	AVMEDIA_TYPE_VIDEO
op	22:16	0:0	6	||
water	22:19	0:0	6	codec_ctx
op	22:28	0:0	6	->
water	22:30	0:0	6	codec_type
op	22:41	0:0	6	==
water	22:44	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	22:64	30:8	5	
water	22:64	0:0	6	{
water	24:12	0:0	6	ret
op	24:16	0:0	6	=
call	24:18	25:67	6	avcodec_open2
arg	24:32	24:41	7	codec_ctx
water	24:32	0:0	8	codec_ctx
arg	25:20	25:61	7	avcodec_find_decoder(codec_ctx->codec_id)
call	25:20	25:60	8	avcodec_find_decoder
arg	25:41	25:60	9	codec_ctx->codec_id
water	25:41	0:0	10	codec_ctx
op	25:50	0:0	10	->
water	25:52	0:0	10	codec_id
arg	25:63	25:67	7	NULL
water	25:63	0:0	8	NULL
water	25:68	0:0	6	;
if	26:12	29:12	6	(ret < 0)
cond	26:16	26:22	7	ret < 0
water	26:16	0:0	8	ret
op	26:20	0:0	8	<
water	26:22	0:0	8	0
stmts	26:25	29:12	7	
water	26:25	0:0	8	{
call	27:16	27:87	8	av_log
arg	27:23	27:27	9	NULL
water	27:23	0:0	10	NULL
arg	27:29	27:41	9	AV_LOG_ERROR
water	27:29	0:0	10	AV_LOG_ERROR
arg	27:43	27:84	9	"Failed to open decoder for stream #%u\n"
water	27:43	0:0	10	"Failed to open decoder for stream #%u\n"
arg	27:86	27:87	9	i
water	27:86	0:0	10	i
water	27:88	0:0	8	;
return	28:16	28:26	8	ret
water	28:23	0:0	9	ret
water	29:12	0:0	8	}
water	30:8	0:0	6	}
water	31:4	0:0	4	}
call	32:4	32:43	2	av_dump_format
arg	32:19	32:27	3	ifmt_ctx
water	32:19	0:0	4	ifmt_ctx
arg	32:29	32:30	3	0
water	32:29	0:0	4	0
arg	32:32	32:40	3	filename
water	32:32	0:0	4	filename
arg	32:42	32:43	3	0
water	32:42	0:0	4	0
water	32:44	0:0	2	;
return	33:4	33:12	2	0
water	33:11	0:0	3	0
