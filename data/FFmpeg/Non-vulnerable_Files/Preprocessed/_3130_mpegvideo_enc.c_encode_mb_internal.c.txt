func	1:24	347:0	0	void	encode_mb_internal
params	1:47	0:0	1	
param	1:48	1:65	2	MpegEncContext *	s
param	2:48	2:60	2	int	motion_x
param	2:62	2:74	2	int	motion_y
param	3:48	3:67	2	int	mb_block_height
param	4:48	4:66	2	int	mb_block_width
param	5:48	5:66	2	int	mb_block_count
stmnts	7:4	346:4	1	
water	7:4	0:0	2	int16_t
water	7:12	0:0	2	weight
op	7:18	0:0	2	[
water	7:19	0:0	2	12
op	7:21	0:0	2	]
op	7:22	0:0	2	[
water	7:23	0:0	2	64
op	7:25	0:0	2	]
water	7:26	0:0	2	;
water	8:4	0:0	2	int16_t
water	8:12	0:0	2	orig
op	8:16	0:0	2	[
water	8:17	0:0	2	12
op	8:19	0:0	2	]
op	8:20	0:0	2	[
water	8:21	0:0	2	64
op	8:23	0:0	2	]
water	8:24	0:0	2	;
decl	9:4	9:28	2	const int	mb_x
op	9:19	0:0	2	=
water	9:21	0:0	2	s
op	9:22	0:0	2	->
water	9:24	0:0	2	mb_x
decl	10:4	10:28	2	const int	mb_y
op	10:19	0:0	2	=
water	10:21	0:0	2	s
op	10:22	0:0	2	->
water	10:24	0:0	2	mb_y
decl	11:4	11:9	2	int	i
decl	12:4	12:20	2	int	skip_dct[12]
decl	13:4	13:36	2	int	dct_offset
op	13:19	0:0	2	=
water	13:21	0:0	2	s
op	13:22	0:0	2	->
water	13:24	0:0	2	linesize
op	13:33	0:0	2	*
water	13:35	0:0	2	8
decl	14:4	14:41	2	int	uv_dct_offset
op	14:22	0:0	2	=
water	14:24	0:0	2	s
op	14:25	0:0	2	->
water	14:27	0:0	2	uvlinesize
op	14:38	0:0	2	*
water	14:40	0:0	2	8
decl	15:4	15:36	2	uint8_t	*ptr_y
water	15:18	0:0	2	,
decl	15:4	15:36	2	uint8_t	*ptr_cb
water	15:27	0:0	2	,
decl	15:4	15:36	2	uint8_t	*ptr_cr
decl	16:4	16:28	2	ptrdiff_t	wrap_y
water	16:20	0:0	2	,
decl	16:4	16:28	2	ptrdiff_t	wrap_c
for	17:4	18:32	2	(i = 0 ;i < mb_block_count;i ++)
forinit	17:9	17:14	3	i = 0 ;
water	17:9	0:0	4	i
op	17:11	0:0	4	=
water	17:13	0:0	4	0
water	17:14	0:0	4	;
cond	17:16	17:20	3	i < mb_block_count
water	17:16	0:0	4	i
op	17:18	0:0	4	<
water	17:20	0:0	4	mb_block_count
forexpr	17:36	17:37	3	i ++
water	17:36	0:0	4	i
op	17:37	0:0	4	++
stmts	18:8	18:32	3	
water	18:8	0:0	4	skip_dct
op	18:16	0:0	4	[
water	18:17	0:0	4	i
op	18:18	0:0	4	]
op	18:20	0:0	4	=
water	18:22	0:0	4	s
op	18:23	0:0	4	->
water	18:25	0:0	4	skipdct
water	18:32	0:0	4	;
if	19:4	42:4	2	(s -> adaptive_quant)
cond	19:8	19:11	3	s -> adaptive_quant
water	19:8	0:0	4	s
op	19:9	0:0	4	->
water	19:11	0:0	4	adaptive_quant
stmts	19:27	42:4	3	
water	19:27	0:0	4	{
decl	20:8	20:37	4	const int	last_qp
op	20:26	0:0	4	=
water	20:28	0:0	4	s
op	20:29	0:0	4	->
water	20:31	0:0	4	qscale
decl	21:8	21:52	4	const int	mb_xy
op	21:24	0:0	4	=
water	21:26	0:0	4	mb_x
op	21:31	0:0	4	+
water	21:33	0:0	4	mb_y
op	21:38	0:0	4	*
water	21:40	0:0	4	s
op	21:41	0:0	4	->
water	21:43	0:0	4	mb_stride
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	lambda
op	22:18	0:0	4	=
water	22:20	0:0	4	s
op	22:21	0:0	4	->
water	22:23	0:0	4	lambda_table
op	22:35	0:0	4	[
water	22:36	0:0	4	mb_xy
op	22:41	0:0	4	]
water	22:42	0:0	4	;
call	23:8	23:23	4	update_qscale
arg	23:22	23:23	5	s
water	23:22	0:0	6	s
water	23:24	0:0	4	;
if	24:8	40:8	4	(! ( s -> mpv_flags & FF_MPV_FLAG_QP_RD ))
cond	24:12	24:46	5	! ( s -> mpv_flags & FF_MPV_FLAG_QP_RD )
op	24:12	0:0	6	!
water	24:13	0:0	6	(
water	24:14	0:0	6	s
op	24:15	0:0	6	->
water	24:17	0:0	6	mpv_flags
op	24:27	0:0	6	&
water	24:29	0:0	6	FF_MPV_FLAG_QP_RD
water	24:46	0:0	6	)
stmts	24:49	40:8	5	
water	24:49	0:0	6	{
water	25:12	0:0	6	s
op	25:13	0:0	6	->
water	25:15	0:0	6	qscale
op	25:22	0:0	6	=
water	25:24	0:0	6	s
op	25:25	0:0	6	->
water	25:27	0:0	6	current_picture_ptr
op	25:46	0:0	6	->
water	25:48	0:0	6	qscale_table
op	25:60	0:0	6	[
water	25:61	0:0	6	mb_xy
op	25:66	0:0	6	]
water	25:67	0:0	6	;
water	26:12	0:0	6	s
op	26:13	0:0	6	->
water	26:15	0:0	6	dquant
op	26:22	0:0	6	=
water	26:24	0:0	6	s
op	26:25	0:0	6	->
water	26:27	0:0	6	qscale
op	26:34	0:0	6	-
water	26:36	0:0	6	last_qp
water	26:43	0:0	6	;
if	27:12	39:12	6	(s -> out_format == FMT_H263)
cond	27:16	27:33	7	s -> out_format == FMT_H263
water	27:16	0:0	8	s
op	27:17	0:0	8	->
water	27:19	0:0	8	out_format
op	27:30	0:0	8	==
water	27:33	0:0	8	FMT_H263
stmts	27:43	39:12	7	
water	27:43	0:0	8	{
water	28:16	0:0	8	s
op	28:17	0:0	8	->
water	28:19	0:0	8	dquant
op	28:26	0:0	8	=
call	28:28	28:52	8	av_clip
arg	28:36	28:45	9	s->dquant
water	28:36	0:0	10	s
op	28:37	0:0	10	->
water	28:39	0:0	10	dquant
arg	28:47	28:49	9	-2
op	28:47	0:0	10	-
water	28:48	0:0	10	2
arg	28:51	28:52	9	2
water	28:51	0:0	10	2
water	28:53	0:0	8	;
if	29:16	38:16	8	(s -> codec_id == AV_CODEC_ID_MPEG4)
cond	29:20	29:35	9	s -> codec_id == AV_CODEC_ID_MPEG4
water	29:20	0:0	10	s
op	29:21	0:0	10	->
water	29:23	0:0	10	codec_id
op	29:32	0:0	10	==
water	29:35	0:0	10	AV_CODEC_ID_MPEG4
stmts	29:54	38:16	9	
water	29:54	0:0	10	{
if	30:20	37:20	10	(! s -> mb_intra)
cond	30:24	30:28	11	! s -> mb_intra
op	30:24	0:0	12	!
water	30:25	0:0	12	s
op	30:26	0:0	12	->
water	30:28	0:0	12	mb_intra
stmts	30:38	37:20	11	
water	30:38	0:0	12	{
if	31:24	34:24	12	(s -> pict_type == AV_PICTURE_TYPE_B)
cond	31:28	31:44	13	s -> pict_type == AV_PICTURE_TYPE_B
water	31:28	0:0	14	s
op	31:29	0:0	14	->
water	31:31	0:0	14	pict_type
op	31:41	0:0	14	==
water	31:44	0:0	14	AV_PICTURE_TYPE_B
stmts	31:63	34:24	13	
water	31:63	0:0	14	{
if	32:28	33:45	14	(s -> dquant & 1 || s -> mv_dir & MV_DIRECT)
cond	32:32	32:61	15	s -> dquant & 1 || s -> mv_dir & MV_DIRECT
water	32:32	0:0	16	s
op	32:33	0:0	16	->
water	32:35	0:0	16	dquant
op	32:42	0:0	16	&
water	32:44	0:0	16	1
op	32:46	0:0	16	||
water	32:49	0:0	16	s
op	32:50	0:0	16	->
water	32:52	0:0	16	mv_dir
op	32:59	0:0	16	&
water	32:61	0:0	16	MV_DIRECT
stmts	33:32	33:45	15	
water	33:32	0:0	16	s
op	33:33	0:0	16	->
water	33:35	0:0	16	dquant
op	33:42	0:0	16	=
water	33:44	0:0	16	0
water	33:45	0:0	16	;
water	34:24	0:0	14	}
if	35:24	36:41	12	(s -> mv_type == MV_TYPE_8X8)
cond	35:28	35:42	13	s -> mv_type == MV_TYPE_8X8
water	35:28	0:0	14	s
op	35:29	0:0	14	->
water	35:31	0:0	14	mv_type
op	35:39	0:0	14	==
water	35:42	0:0	14	MV_TYPE_8X8
stmts	36:28	36:41	13	
water	36:28	0:0	14	s
op	36:29	0:0	14	->
water	36:31	0:0	14	dquant
op	36:38	0:0	14	=
water	36:40	0:0	14	0
water	36:41	0:0	14	;
water	37:20	0:0	12	}
water	38:16	0:0	10	}
water	39:12	0:0	8	}
water	40:8	0:0	6	}
call	41:8	41:44	4	ff_set_qscale
arg	41:22	41:23	5	s
water	41:22	0:0	6	s
arg	41:25	41:44	5	last_qp+s->dquant
water	41:25	0:0	6	last_qp
op	41:33	0:0	6	+
water	41:35	0:0	6	s
op	41:36	0:0	6	->
water	41:38	0:0	6	dquant
water	41:45	0:0	4	;
water	42:4	0:0	4	}
else	42:6	43:47	2
stmts	42:11	43:47	3	
if	42:11	43:47	4	(s -> mpv_flags & FF_MPV_FLAG_QP_RD)
cond	42:15	42:30	5	s -> mpv_flags & FF_MPV_FLAG_QP_RD
water	42:15	0:0	6	s
op	42:16	0:0	6	->
water	42:18	0:0	6	mpv_flags
op	42:28	0:0	6	&
water	42:30	0:0	6	FF_MPV_FLAG_QP_RD
stmts	43:8	43:47	5	
call	43:8	43:46	6	ff_set_qscale
arg	43:22	43:23	7	s
water	43:22	0:0	8	s
arg	43:25	43:46	7	s->qscale+s->dquant
water	43:25	0:0	8	s
op	43:26	0:0	8	->
water	43:28	0:0	8	qscale
op	43:35	0:0	8	+
water	43:37	0:0	8	s
op	43:38	0:0	8	->
water	43:40	0:0	8	dquant
water	43:47	0:0	6	;
water	44:4	0:0	2	wrap_y
op	44:11	0:0	2	=
water	44:13	0:0	2	s
op	44:14	0:0	2	->
water	44:16	0:0	2	linesize
water	44:24	0:0	2	;
water	45:4	0:0	2	wrap_c
op	45:11	0:0	2	=
water	45:13	0:0	2	s
op	45:14	0:0	2	->
water	45:16	0:0	2	uvlinesize
water	45:26	0:0	2	;
water	46:4	0:0	2	ptr_y
op	46:11	0:0	2	=
water	46:13	0:0	2	s
op	46:14	0:0	2	->
water	46:16	0:0	2	new_picture
op	46:27	0:0	2	.
water	46:28	0:0	2	f
op	46:29	0:0	2	->
water	46:31	0:0	2	data
op	46:35	0:0	2	[
water	46:36	0:0	2	0
op	46:37	0:0	2	]
op	46:39	0:0	2	+
water	47:13	0:0	2	(
water	47:14	0:0	2	mb_y
op	47:19	0:0	2	*
water	47:21	0:0	2	16
op	47:24	0:0	2	*
water	47:26	0:0	2	wrap_y
water	47:32	0:0	2	)
op	47:47	0:0	2	+
water	47:49	0:0	2	mb_x
op	47:54	0:0	2	*
water	47:56	0:0	2	16
water	47:58	0:0	2	;
water	48:4	0:0	2	ptr_cb
op	48:11	0:0	2	=
water	48:13	0:0	2	s
op	48:14	0:0	2	->
water	48:16	0:0	2	new_picture
op	48:27	0:0	2	.
water	48:28	0:0	2	f
op	48:29	0:0	2	->
water	48:31	0:0	2	data
op	48:35	0:0	2	[
water	48:36	0:0	2	1
op	48:37	0:0	2	]
op	48:39	0:0	2	+
water	49:13	0:0	2	(
water	49:14	0:0	2	mb_y
op	49:19	0:0	2	*
water	49:21	0:0	2	mb_block_height
op	49:37	0:0	2	*
water	49:39	0:0	2	wrap_c
water	49:45	0:0	2	)
op	49:47	0:0	2	+
water	49:49	0:0	2	mb_x
op	49:54	0:0	2	*
water	49:56	0:0	2	mb_block_width
water	49:70	0:0	2	;
water	50:4	0:0	2	ptr_cr
op	50:11	0:0	2	=
water	50:13	0:0	2	s
op	50:14	0:0	2	->
water	50:16	0:0	2	new_picture
op	50:27	0:0	2	.
water	50:28	0:0	2	f
op	50:29	0:0	2	->
water	50:31	0:0	2	data
op	50:35	0:0	2	[
water	50:36	0:0	2	2
op	50:37	0:0	2	]
op	50:39	0:0	2	+
water	51:13	0:0	2	(
water	51:14	0:0	2	mb_y
op	51:19	0:0	2	*
water	51:21	0:0	2	mb_block_height
op	51:37	0:0	2	*
water	51:39	0:0	2	wrap_c
water	51:45	0:0	2	)
op	51:47	0:0	2	+
water	51:49	0:0	2	mb_x
op	51:54	0:0	2	*
water	51:56	0:0	2	mb_block_width
water	51:70	0:0	2	;
if	52:4	73:4	2	(( mb_x * 16 + 16 > s -> width || mb_y * 16 + 16 > s -> height ) && s -> codec_id != AV_CODEC_ID_AMV)
cond	52:7	52:83	3	( mb_x * 16 + 16 > s -> width || mb_y * 16 + 16 > s -> height ) && s -> codec_id != AV_CODEC_ID_AMV
water	52:7	0:0	4	(
water	52:8	0:0	4	mb_x
op	52:13	0:0	4	*
water	52:15	0:0	4	16
op	52:18	0:0	4	+
water	52:20	0:0	4	16
op	52:23	0:0	4	>
water	52:25	0:0	4	s
op	52:26	0:0	4	->
water	52:28	0:0	4	width
op	52:34	0:0	4	||
water	52:37	0:0	4	mb_y
op	52:42	0:0	4	*
water	52:44	0:0	4	16
op	52:47	0:0	4	+
water	52:49	0:0	4	16
op	52:52	0:0	4	>
water	52:54	0:0	4	s
op	52:55	0:0	4	->
water	52:57	0:0	4	height
water	52:63	0:0	4	)
op	52:65	0:0	4	&&
water	52:68	0:0	4	s
op	52:69	0:0	4	->
water	52:71	0:0	4	codec_id
op	52:80	0:0	4	!=
water	52:83	0:0	4	AV_CODEC_ID_AMV
stmts	52:99	73:4	3	
water	52:99	0:0	4	{
decl	53:8	53:59	4	uint8_t	*ebuf
op	53:22	0:0	4	=
water	53:24	0:0	4	s
op	53:25	0:0	4	->
water	53:27	0:0	4	sc
op	53:29	0:0	4	.
water	53:30	0:0	4	edge_emu_buffer
op	53:46	0:0	4	+
water	53:48	0:0	4	36
op	53:51	0:0	4	*
water	53:53	0:0	4	wrap_y
decl	54:8	54:69	4	int	cw
op	54:15	0:0	4	=
water	54:17	0:0	4	(
water	54:18	0:0	4	s
op	54:19	0:0	4	->
water	54:21	0:0	4	width
op	54:28	0:0	4	+
water	54:30	0:0	4	s
op	54:31	0:0	4	->
water	54:33	0:0	4	chroma_x_shift
water	54:47	0:0	4	)
op	54:49	0:0	4	>>
water	54:52	0:0	4	s
op	54:53	0:0	4	->
water	54:55	0:0	4	chroma_x_shift
decl	55:8	55:69	4	int	ch
op	55:15	0:0	4	=
water	55:17	0:0	4	(
water	55:18	0:0	4	s
op	55:19	0:0	4	->
water	55:21	0:0	4	height
op	55:28	0:0	4	+
water	55:30	0:0	4	s
op	55:31	0:0	4	->
water	55:33	0:0	4	chroma_y_shift
water	55:47	0:0	4	)
op	55:49	0:0	4	>>
water	55:52	0:0	4	s
op	55:53	0:0	4	->
water	55:55	0:0	4	chroma_y_shift
call	56:8	59:52	4	s->vdsp.emulated_edge_mc
arg	56:33	56:37	5	ebuf
water	56:33	0:0	6	ebuf
arg	56:39	56:44	5	ptr_y
water	56:39	0:0	6	ptr_y
arg	57:33	57:39	5	wrap_y
water	57:33	0:0	6	wrap_y
arg	57:41	57:47	5	wrap_y
water	57:41	0:0	6	wrap_y
arg	58:33	58:35	5	16
water	58:33	0:0	6	16
arg	58:37	58:39	5	16
water	58:37	0:0	6	16
arg	58:41	58:50	5	mb_x*16
water	58:41	0:0	6	mb_x
op	58:46	0:0	6	*
water	58:48	0:0	6	16
arg	58:52	58:61	5	mb_y*16
water	58:52	0:0	6	mb_y
op	58:57	0:0	6	*
water	58:59	0:0	6	16
arg	59:33	59:41	5	s->width
water	59:33	0:0	6	s
op	59:34	0:0	6	->
water	59:36	0:0	6	width
arg	59:43	59:52	5	s->height
water	59:43	0:0	6	s
op	59:44	0:0	6	->
water	59:46	0:0	6	height
water	59:53	0:0	4	;
water	60:8	0:0	4	ptr_y
op	60:14	0:0	4	=
water	60:16	0:0	4	ebuf
water	60:20	0:0	4	;
call	61:8	65:39	4	s->vdsp.emulated_edge_mc
arg	61:33	61:51	5	ebuf+16*wrap_y
water	61:33	0:0	6	ebuf
op	61:38	0:0	6	+
water	61:40	0:0	6	16
op	61:43	0:0	6	*
water	61:45	0:0	6	wrap_y
arg	61:53	61:59	5	ptr_cb
water	61:53	0:0	6	ptr_cb
arg	62:33	62:39	5	wrap_c
water	62:33	0:0	6	wrap_c
arg	62:41	62:47	5	wrap_c
water	62:41	0:0	6	wrap_c
arg	63:33	63:47	5	mb_block_width
water	63:33	0:0	6	mb_block_width
arg	63:49	63:64	5	mb_block_height
water	63:49	0:0	6	mb_block_height
arg	64:33	64:54	5	mb_x*mb_block_width
water	64:33	0:0	6	mb_x
op	64:38	0:0	6	*
water	64:40	0:0	6	mb_block_width
arg	64:56	64:78	5	mb_y*mb_block_height
water	64:56	0:0	6	mb_y
op	64:61	0:0	6	*
water	64:63	0:0	6	mb_block_height
arg	65:33	65:35	5	cw
water	65:33	0:0	6	cw
arg	65:37	65:39	5	ch
water	65:37	0:0	6	ch
water	65:40	0:0	4	;
water	66:8	0:0	4	ptr_cb
op	66:15	0:0	4	=
water	66:17	0:0	4	ebuf
op	66:22	0:0	4	+
water	66:24	0:0	4	16
op	66:27	0:0	4	*
water	66:29	0:0	4	wrap_y
water	66:35	0:0	4	;
call	67:8	71:39	4	s->vdsp.emulated_edge_mc
arg	67:33	67:56	5	ebuf+16*wrap_y+16
water	67:33	0:0	6	ebuf
op	67:38	0:0	6	+
water	67:40	0:0	6	16
op	67:43	0:0	6	*
water	67:45	0:0	6	wrap_y
op	67:52	0:0	6	+
water	67:54	0:0	6	16
arg	67:58	67:64	5	ptr_cr
water	67:58	0:0	6	ptr_cr
arg	68:33	68:39	5	wrap_c
water	68:33	0:0	6	wrap_c
arg	68:41	68:47	5	wrap_c
water	68:41	0:0	6	wrap_c
arg	69:33	69:47	5	mb_block_width
water	69:33	0:0	6	mb_block_width
arg	69:49	69:64	5	mb_block_height
water	69:49	0:0	6	mb_block_height
arg	70:33	70:54	5	mb_x*mb_block_width
water	70:33	0:0	6	mb_x
op	70:38	0:0	6	*
water	70:40	0:0	6	mb_block_width
arg	70:56	70:78	5	mb_y*mb_block_height
water	70:56	0:0	6	mb_y
op	70:61	0:0	6	*
water	70:63	0:0	6	mb_block_height
arg	71:33	71:35	5	cw
water	71:33	0:0	6	cw
arg	71:37	71:39	5	ch
water	71:37	0:0	6	ch
water	71:40	0:0	4	;
water	72:8	0:0	4	ptr_cr
op	72:15	0:0	4	=
water	72:17	0:0	4	ebuf
op	72:22	0:0	4	+
water	72:24	0:0	4	16
op	72:27	0:0	4	*
water	72:29	0:0	4	wrap_y
op	72:36	0:0	4	+
water	72:38	0:0	4	16
water	72:40	0:0	4	;
water	73:4	0:0	4	}
if	74:4	119:4	2	(s -> mb_intra)
cond	74:8	74:11	3	s -> mb_intra
water	74:8	0:0	4	s
op	74:9	0:0	4	->
water	74:11	0:0	4	mb_intra
stmts	74:21	119:4	3	
water	74:21	0:0	4	{
if	75:8	96:8	4	(s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_DCT)
cond	75:12	75:30	5	s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_DCT
water	75:12	0:0	6	s
op	75:13	0:0	6	->
water	75:15	0:0	6	avctx
op	75:20	0:0	6	->
water	75:22	0:0	6	flags
op	75:28	0:0	6	&
water	75:30	0:0	6	AV_CODEC_FLAG_INTERLACED_DCT
stmts	75:60	96:8	5	
water	75:60	0:0	6	{
decl	76:12	76:51	6	int	progressive_score
water	76:33	0:0	6	,
decl	76:12	76:51	6	int	interlaced_score
water	77:12	0:0	6	s
op	77:13	0:0	6	->
water	77:15	0:0	6	interlaced_dct
op	77:30	0:0	6	=
water	77:32	0:0	6	0
water	77:33	0:0	6	;
water	78:12	0:0	6	progressive_score
op	78:30	0:0	6	=
water	78:32	0:0	6	s
op	78:33	0:0	6	->
water	78:35	0:0	6	mecc
op	78:39	0:0	6	.
water	78:40	0:0	6	ildct_cmp
op	78:49	0:0	6	[
water	78:50	0:0	6	4
op	78:51	0:0	6	]
water	78:52	0:0	6	(
water	78:53	0:0	6	s
water	78:54	0:0	6	,
water	78:56	0:0	6	ptr_y
water	78:61	0:0	6	,
water	78:63	0:0	6	NULL
water	78:67	0:0	6	,
water	78:69	0:0	6	wrap_y
water	78:75	0:0	6	,
water	78:77	0:0	6	8
water	78:78	0:0	6	)
op	78:80	0:0	6	+
water	79:32	0:0	6	s
op	79:33	0:0	6	->
water	79:35	0:0	6	mecc
op	79:39	0:0	6	.
water	79:40	0:0	6	ildct_cmp
op	79:49	0:0	6	[
water	79:50	0:0	6	4
op	79:51	0:0	6	]
water	79:52	0:0	6	(
water	79:53	0:0	6	s
water	79:54	0:0	6	,
water	79:56	0:0	6	ptr_y
op	79:62	0:0	6	+
water	79:64	0:0	6	wrap_y
op	79:71	0:0	6	*
water	79:73	0:0	6	8
water	79:74	0:0	6	,
water	80:53	0:0	6	NULL
water	80:57	0:0	6	,
water	80:59	0:0	6	wrap_y
water	80:65	0:0	6	,
water	80:67	0:0	6	8
water	80:68	0:0	6	)
op	80:70	0:0	6	-
water	80:72	0:0	6	400
water	80:75	0:0	6	;
if	81:12	95:12	6	(progressive_score > 0)
cond	81:16	81:36	7	progressive_score > 0
water	81:16	0:0	8	progressive_score
op	81:34	0:0	8	>
water	81:36	0:0	8	0
stmts	81:39	95:12	7	
water	81:39	0:0	8	{
water	82:16	0:0	8	interlaced_score
op	82:33	0:0	8	=
water	82:35	0:0	8	s
op	82:36	0:0	8	->
water	82:38	0:0	8	mecc
op	82:42	0:0	8	.
water	82:43	0:0	8	ildct_cmp
op	82:52	0:0	8	[
water	82:53	0:0	8	4
op	82:54	0:0	8	]
water	82:55	0:0	8	(
water	82:56	0:0	8	s
water	82:57	0:0	8	,
water	82:59	0:0	8	ptr_y
water	82:64	0:0	8	,
water	83:56	0:0	8	NULL
water	83:60	0:0	8	,
water	83:62	0:0	8	wrap_y
op	83:69	0:0	8	*
water	83:71	0:0	8	2
water	83:72	0:0	8	,
water	83:74	0:0	8	8
water	83:75	0:0	8	)
op	83:77	0:0	8	+
water	84:35	0:0	8	s
op	84:36	0:0	8	->
water	84:38	0:0	8	mecc
op	84:42	0:0	8	.
water	84:43	0:0	8	ildct_cmp
op	84:52	0:0	8	[
water	84:53	0:0	8	4
op	84:54	0:0	8	]
water	84:55	0:0	8	(
water	84:56	0:0	8	s
water	84:57	0:0	8	,
water	84:59	0:0	8	ptr_y
op	84:65	0:0	8	+
water	84:67	0:0	8	wrap_y
water	84:73	0:0	8	,
water	85:56	0:0	8	NULL
water	85:60	0:0	8	,
water	85:62	0:0	8	wrap_y
op	85:69	0:0	8	*
water	85:71	0:0	8	2
water	85:72	0:0	8	,
water	85:74	0:0	8	8
water	85:75	0:0	8	)
water	85:76	0:0	8	;
if	86:16	94:16	8	(progressive_score > interlaced_score)
cond	86:20	86:40	9	progressive_score > interlaced_score
water	86:20	0:0	10	progressive_score
op	86:38	0:0	10	>
water	86:40	0:0	10	interlaced_score
stmts	86:58	94:16	9	
water	86:58	0:0	10	{
water	87:20	0:0	10	s
op	87:21	0:0	10	->
water	87:23	0:0	10	interlaced_dct
op	87:38	0:0	10	=
water	87:40	0:0	10	1
water	87:41	0:0	10	;
water	88:20	0:0	10	dct_offset
op	88:31	0:0	10	=
water	88:33	0:0	10	wrap_y
water	88:39	0:0	10	;
water	89:20	0:0	10	uv_dct_offset
op	89:34	0:0	10	=
water	89:36	0:0	10	wrap_c
water	89:42	0:0	10	;
water	90:20	0:0	10	wrap_y
op	90:27	0:0	10	<<=
water	90:31	0:0	10	1
water	90:32	0:0	10	;
if	91:20	93:36	10	(s -> chroma_format == CHROMA_422 || s -> chroma_format == CHROMA_444)
cond	91:24	92:44	11	s -> chroma_format == CHROMA_422 || s -> chroma_format == CHROMA_444
water	91:24	0:0	12	s
op	91:25	0:0	12	->
water	91:27	0:0	12	chroma_format
op	91:41	0:0	12	==
water	91:44	0:0	12	CHROMA_422
op	91:55	0:0	12	||
water	92:24	0:0	12	s
op	92:25	0:0	12	->
water	92:27	0:0	12	chroma_format
op	92:41	0:0	12	==
water	92:44	0:0	12	CHROMA_444
stmts	93:24	93:36	11	
water	93:24	0:0	12	wrap_c
op	93:31	0:0	12	<<=
water	93:35	0:0	12	1
water	93:36	0:0	12	;
water	94:16	0:0	10	}
water	95:12	0:0	8	}
water	96:8	0:0	6	}
call	97:8	97:70	4	s->pdsp.get_pixels
arg	97:27	97:38	5	s->block[0]
water	97:27	0:0	6	s
op	97:28	0:0	6	->
water	97:30	0:0	6	block
op	97:35	0:0	6	[
water	97:36	0:0	6	0
op	97:37	0:0	6	]
arg	97:40	97:45	5	ptr_y
water	97:40	0:0	6	ptr_y
arg	97:64	97:70	5	wrap_y
water	97:64	0:0	6	wrap_y
water	97:71	0:0	4	;
call	98:8	98:70	4	s->pdsp.get_pixels
arg	98:27	98:38	5	s->block[1]
water	98:27	0:0	6	s
op	98:28	0:0	6	->
water	98:30	0:0	6	block
op	98:35	0:0	6	[
water	98:36	0:0	6	1
op	98:37	0:0	6	]
arg	98:40	98:49	5	ptr_y+8
water	98:40	0:0	6	ptr_y
op	98:46	0:0	6	+
water	98:48	0:0	6	8
arg	98:64	98:70	5	wrap_y
water	98:64	0:0	6	wrap_y
water	98:71	0:0	4	;
call	99:8	99:70	4	s->pdsp.get_pixels
arg	99:27	99:38	5	s->block[2]
water	99:27	0:0	6	s
op	99:28	0:0	6	->
water	99:30	0:0	6	block
op	99:35	0:0	6	[
water	99:36	0:0	6	2
op	99:37	0:0	6	]
arg	99:40	99:58	5	ptr_y+dct_offset
water	99:40	0:0	6	ptr_y
op	99:46	0:0	6	+
water	99:48	0:0	6	dct_offset
arg	99:64	99:70	5	wrap_y
water	99:64	0:0	6	wrap_y
water	99:71	0:0	4	;
call	100:8	100:70	4	s->pdsp.get_pixels
arg	100:27	100:38	5	s->block[3]
water	100:27	0:0	6	s
op	100:28	0:0	6	->
water	100:30	0:0	6	block
op	100:35	0:0	6	[
water	100:36	0:0	6	3
op	100:37	0:0	6	]
arg	100:40	100:62	5	ptr_y+dct_offset+8
water	100:40	0:0	6	ptr_y
op	100:46	0:0	6	+
water	100:48	0:0	6	dct_offset
op	100:59	0:0	6	+
water	100:61	0:0	6	8
arg	100:64	100:70	5	wrap_y
water	100:64	0:0	6	wrap_y
water	100:71	0:0	4	;
if	101:8	104:8	4	(s -> avctx -> flags & AV_CODEC_FLAG_GRAY)
cond	101:12	101:30	5	s -> avctx -> flags & AV_CODEC_FLAG_GRAY
water	101:12	0:0	6	s
op	101:13	0:0	6	->
water	101:15	0:0	6	avctx
op	101:20	0:0	6	->
water	101:22	0:0	6	flags
op	101:28	0:0	6	&
water	101:30	0:0	6	AV_CODEC_FLAG_GRAY
stmts	101:50	104:8	5	
water	101:50	0:0	6	{
water	102:12	0:0	6	skip_dct
op	102:20	0:0	6	[
water	102:21	0:0	6	4
op	102:22	0:0	6	]
op	102:24	0:0	6	=
water	102:26	0:0	6	1
water	102:27	0:0	6	;
water	103:12	0:0	6	skip_dct
op	103:20	0:0	6	[
water	103:21	0:0	6	5
op	103:22	0:0	6	]
op	103:24	0:0	6	=
water	103:26	0:0	6	1
water	103:27	0:0	6	;
water	104:8	0:0	6	}
else	104:10	118:8	4
stmts	104:15	118:8	5	
water	104:15	0:0	6	{
call	105:12	105:58	6	s->pdsp.get_pixels
arg	105:31	105:42	7	s->block[4]
water	105:31	0:0	8	s
op	105:32	0:0	8	->
water	105:34	0:0	8	block
op	105:39	0:0	8	[
water	105:40	0:0	8	4
op	105:41	0:0	8	]
arg	105:44	105:50	7	ptr_cb
water	105:44	0:0	8	ptr_cb
arg	105:52	105:58	7	wrap_c
water	105:52	0:0	8	wrap_c
water	105:59	0:0	6	;
call	106:12	106:58	6	s->pdsp.get_pixels
arg	106:31	106:42	7	s->block[5]
water	106:31	0:0	8	s
op	106:32	0:0	8	->
water	106:34	0:0	8	block
op	106:39	0:0	8	[
water	106:40	0:0	8	5
op	106:41	0:0	8	]
arg	106:44	106:50	7	ptr_cr
water	106:44	0:0	8	ptr_cr
arg	106:52	106:58	7	wrap_c
water	106:52	0:0	8	wrap_c
water	106:59	0:0	6	;
if	107:12	110:12	6	(! s -> chroma_y_shift && s -> chroma_x_shift)
cond	107:16	107:41	7	! s -> chroma_y_shift && s -> chroma_x_shift
op	107:16	0:0	8	!
water	107:17	0:0	8	s
op	107:18	0:0	8	->
water	107:20	0:0	8	chroma_y_shift
op	107:35	0:0	8	&&
water	107:38	0:0	8	s
op	107:39	0:0	8	->
water	107:41	0:0	8	chroma_x_shift
stmts	107:57	110:12	7	
water	107:57	0:0	8	{
call	108:16	108:78	8	s->pdsp.get_pixels
arg	108:35	108:46	9	s->block[6]
water	108:35	0:0	10	s
op	108:36	0:0	10	->
water	108:38	0:0	10	block
op	108:43	0:0	10	[
water	108:44	0:0	10	6
op	108:45	0:0	10	]
arg	108:48	108:70	9	ptr_cb+uv_dct_offset
water	108:48	0:0	10	ptr_cb
op	108:55	0:0	10	+
water	108:57	0:0	10	uv_dct_offset
arg	108:72	108:78	9	wrap_c
water	108:72	0:0	10	wrap_c
water	108:79	0:0	8	;
call	109:16	109:78	8	s->pdsp.get_pixels
arg	109:35	109:46	9	s->block[7]
water	109:35	0:0	10	s
op	109:36	0:0	10	->
water	109:38	0:0	10	block
op	109:43	0:0	10	[
water	109:44	0:0	10	7
op	109:45	0:0	10	]
arg	109:48	109:70	9	ptr_cr+uv_dct_offset
water	109:48	0:0	10	ptr_cr
op	109:55	0:0	10	+
water	109:57	0:0	10	uv_dct_offset
arg	109:72	109:78	9	wrap_c
water	109:72	0:0	10	wrap_c
water	109:79	0:0	8	;
water	110:12	0:0	8	}
else	110:14	117:12	6
stmts	110:19	117:12	7	
if	110:19	117:12	8	(! s -> chroma_y_shift && ! s -> chroma_x_shift)
cond	110:23	110:49	9	! s -> chroma_y_shift && ! s -> chroma_x_shift
op	110:23	0:0	10	!
water	110:24	0:0	10	s
op	110:25	0:0	10	->
water	110:27	0:0	10	chroma_y_shift
op	110:42	0:0	10	&&
op	110:45	0:0	10	!
water	110:46	0:0	10	s
op	110:47	0:0	10	->
water	110:49	0:0	10	chroma_x_shift
stmts	110:65	117:12	9	
water	110:65	0:0	10	{
call	111:16	111:67	10	s->pdsp.get_pixels
arg	111:35	111:47	11	s->block[6]
water	111:35	0:0	12	s
op	111:36	0:0	12	->
water	111:38	0:0	12	block
op	111:43	0:0	12	[
water	111:45	0:0	12	6
op	111:46	0:0	12	]
arg	111:49	111:59	11	ptr_cb+8
water	111:49	0:0	12	ptr_cb
op	111:56	0:0	12	+
water	111:58	0:0	12	8
arg	111:61	111:67	11	wrap_c
water	111:61	0:0	12	wrap_c
water	111:68	0:0	10	;
call	112:16	112:67	10	s->pdsp.get_pixels
arg	112:35	112:47	11	s->block[7]
water	112:35	0:0	12	s
op	112:36	0:0	12	->
water	112:38	0:0	12	block
op	112:43	0:0	12	[
water	112:45	0:0	12	7
op	112:46	0:0	12	]
arg	112:49	112:59	11	ptr_cr+8
water	112:49	0:0	12	ptr_cr
op	112:56	0:0	12	+
water	112:58	0:0	12	8
arg	112:61	112:67	11	wrap_c
water	112:61	0:0	12	wrap_c
water	112:68	0:0	10	;
call	113:16	113:79	10	s->pdsp.get_pixels
arg	113:35	113:47	11	s->block[8]
water	113:35	0:0	12	s
op	113:36	0:0	12	->
water	113:38	0:0	12	block
op	113:43	0:0	12	[
water	113:45	0:0	12	8
op	113:46	0:0	12	]
arg	113:49	113:71	11	ptr_cb+uv_dct_offset
water	113:49	0:0	12	ptr_cb
op	113:56	0:0	12	+
water	113:58	0:0	12	uv_dct_offset
arg	113:73	113:79	11	wrap_c
water	113:73	0:0	12	wrap_c
water	113:80	0:0	10	;
call	114:16	114:79	10	s->pdsp.get_pixels
arg	114:35	114:47	11	s->block[9]
water	114:35	0:0	12	s
op	114:36	0:0	12	->
water	114:38	0:0	12	block
op	114:43	0:0	12	[
water	114:45	0:0	12	9
op	114:46	0:0	12	]
arg	114:49	114:71	11	ptr_cr+uv_dct_offset
water	114:49	0:0	12	ptr_cr
op	114:56	0:0	12	+
water	114:58	0:0	12	uv_dct_offset
arg	114:73	114:79	11	wrap_c
water	114:73	0:0	12	wrap_c
water	114:80	0:0	10	;
call	115:16	115:83	10	s->pdsp.get_pixels
arg	115:35	115:47	11	s->block[10]
water	115:35	0:0	12	s
op	115:36	0:0	12	->
water	115:38	0:0	12	block
op	115:43	0:0	12	[
water	115:44	0:0	12	10
op	115:46	0:0	12	]
arg	115:49	115:75	11	ptr_cb+uv_dct_offset+8
water	115:49	0:0	12	ptr_cb
op	115:56	0:0	12	+
water	115:58	0:0	12	uv_dct_offset
op	115:72	0:0	12	+
water	115:74	0:0	12	8
arg	115:77	115:83	11	wrap_c
water	115:77	0:0	12	wrap_c
water	115:84	0:0	10	;
call	116:16	116:83	10	s->pdsp.get_pixels
arg	116:35	116:47	11	s->block[11]
water	116:35	0:0	12	s
op	116:36	0:0	12	->
water	116:38	0:0	12	block
op	116:43	0:0	12	[
water	116:44	0:0	12	11
op	116:46	0:0	12	]
arg	116:49	116:75	11	ptr_cr+uv_dct_offset+8
water	116:49	0:0	12	ptr_cr
op	116:56	0:0	12	+
water	116:58	0:0	12	uv_dct_offset
op	116:72	0:0	12	+
water	116:74	0:0	12	8
arg	116:77	116:83	11	wrap_c
water	116:77	0:0	12	wrap_c
water	116:84	0:0	10	;
water	117:12	0:0	10	}
water	118:8	0:0	6	}
water	119:4	0:0	4	}
else	119:6	218:4	2
stmts	119:11	218:4	3	
water	119:11	0:0	4	{
call	120:8	120:31	4	op_pixels_func
arg	120:24	120:31	5	*op_pix
op	120:24	0:0	6	*
water	120:25	0:0	6	op_pix
op	120:32	0:0	4	[
water	120:33	0:0	4	4
op	120:34	0:0	4	]
water	120:35	0:0	4	;
call	121:8	121:30	4	qpel_mc_func
arg	121:22	121:30	5	*op_qpix
op	121:22	0:0	6	*
water	121:23	0:0	6	op_qpix
op	121:31	0:0	4	[
water	121:32	0:0	4	16
op	121:34	0:0	4	]
water	121:35	0:0	4	;
decl	122:8	122:43	4	uint8_t	*dest_y
water	122:23	0:0	4	,
decl	122:8	122:43	4	uint8_t	*dest_cb
water	122:33	0:0	4	,
decl	122:8	122:43	4	uint8_t	*dest_cr
water	123:8	0:0	4	dest_y
op	123:16	0:0	4	=
water	123:18	0:0	4	s
op	123:19	0:0	4	->
water	123:21	0:0	4	dest
op	123:25	0:0	4	[
water	123:26	0:0	4	0
op	123:27	0:0	4	]
water	123:28	0:0	4	;
water	124:8	0:0	4	dest_cb
op	124:16	0:0	4	=
water	124:18	0:0	4	s
op	124:19	0:0	4	->
water	124:21	0:0	4	dest
op	124:25	0:0	4	[
water	124:26	0:0	4	1
op	124:27	0:0	4	]
water	124:28	0:0	4	;
water	125:8	0:0	4	dest_cr
op	125:16	0:0	4	=
water	125:18	0:0	4	s
op	125:19	0:0	4	->
water	125:21	0:0	4	dest
op	125:25	0:0	4	[
water	125:26	0:0	4	2
op	125:27	0:0	4	]
water	125:28	0:0	4	;
if	126:8	129:8	4	(( ! s -> no_rounding ) || s -> pict_type == AV_PICTURE_TYPE_B)
cond	126:12	126:49	5	( ! s -> no_rounding ) || s -> pict_type == AV_PICTURE_TYPE_B
water	126:12	0:0	6	(
op	126:13	0:0	6	!
water	126:14	0:0	6	s
op	126:15	0:0	6	->
water	126:17	0:0	6	no_rounding
water	126:28	0:0	6	)
op	126:30	0:0	6	||
water	126:33	0:0	6	s
op	126:34	0:0	6	->
water	126:36	0:0	6	pict_type
op	126:46	0:0	6	==
water	126:49	0:0	6	AV_PICTURE_TYPE_B
stmts	126:68	129:8	5	
water	126:68	0:0	6	{
water	127:12	0:0	6	op_pix
op	127:20	0:0	6	=
water	127:22	0:0	6	s
op	127:23	0:0	6	->
water	127:25	0:0	6	hdsp
op	127:29	0:0	6	.
water	127:30	0:0	6	put_pixels_tab
water	127:44	0:0	6	;
water	128:12	0:0	6	op_qpix
op	128:20	0:0	6	=
water	128:22	0:0	6	s
op	128:23	0:0	6	->
water	128:25	0:0	6	qdsp
op	128:29	0:0	6	.
water	128:30	0:0	6	put_qpel_pixels_tab
water	128:49	0:0	6	;
water	129:8	0:0	6	}
else	129:10	132:8	4
stmts	129:15	132:8	5	
water	129:15	0:0	6	{
water	130:12	0:0	6	op_pix
op	130:20	0:0	6	=
water	130:22	0:0	6	s
op	130:23	0:0	6	->
water	130:25	0:0	6	hdsp
op	130:29	0:0	6	.
water	130:30	0:0	6	put_no_rnd_pixels_tab
water	130:51	0:0	6	;
water	131:12	0:0	6	op_qpix
op	131:20	0:0	6	=
water	131:22	0:0	6	s
op	131:23	0:0	6	->
water	131:25	0:0	6	qdsp
op	131:29	0:0	6	.
water	131:30	0:0	6	put_no_rnd_qpel_pixels_tab
water	131:56	0:0	6	;
water	132:8	0:0	6	}
if	133:8	139:8	4	(s -> mv_dir & MV_DIR_FORWARD)
cond	133:12	133:24	5	s -> mv_dir & MV_DIR_FORWARD
water	133:12	0:0	6	s
op	133:13	0:0	6	->
water	133:15	0:0	6	mv_dir
op	133:22	0:0	6	&
water	133:24	0:0	6	MV_DIR_FORWARD
stmts	133:40	139:8	5	
water	133:40	0:0	6	{
call	134:12	136:41	6	ff_mpv_motion
arg	134:26	134:27	7	s
water	134:26	0:0	8	s
arg	134:29	134:35	7	dest_y
water	134:29	0:0	8	dest_y
arg	134:37	134:44	7	dest_cb
water	134:37	0:0	8	dest_cb
arg	134:46	134:53	7	dest_cr
water	134:46	0:0	8	dest_cr
arg	134:55	134:56	7	0
water	134:55	0:0	8	0
arg	135:26	135:49	7	s->last_picture.f->data
water	135:26	0:0	8	s
op	135:27	0:0	8	->
water	135:29	0:0	8	last_picture
op	135:41	0:0	8	.
water	135:42	0:0	8	f
op	135:43	0:0	8	->
water	135:45	0:0	8	data
arg	136:26	136:32	7	op_pix
water	136:26	0:0	8	op_pix
arg	136:34	136:41	7	op_qpix
water	136:34	0:0	8	op_qpix
water	136:42	0:0	6	;
water	137:12	0:0	6	op_pix
op	137:20	0:0	6	=
water	137:22	0:0	6	s
op	137:23	0:0	6	->
water	137:25	0:0	6	hdsp
op	137:29	0:0	6	.
water	137:30	0:0	6	avg_pixels_tab
water	137:44	0:0	6	;
water	138:12	0:0	6	op_qpix
op	138:20	0:0	6	=
water	138:22	0:0	6	s
op	138:23	0:0	6	->
water	138:25	0:0	6	qdsp
op	138:29	0:0	6	.
water	138:30	0:0	6	avg_qpel_pixels_tab
water	138:49	0:0	6	;
water	139:8	0:0	6	}
if	140:8	144:8	4	(s -> mv_dir & MV_DIR_BACKWARD)
cond	140:12	140:24	5	s -> mv_dir & MV_DIR_BACKWARD
water	140:12	0:0	6	s
op	140:13	0:0	6	->
water	140:15	0:0	6	mv_dir
op	140:22	0:0	6	&
water	140:24	0:0	6	MV_DIR_BACKWARD
stmts	140:41	144:8	5	
water	140:41	0:0	6	{
call	141:12	143:41	6	ff_mpv_motion
arg	141:26	141:27	7	s
water	141:26	0:0	8	s
arg	141:29	141:35	7	dest_y
water	141:29	0:0	8	dest_y
arg	141:37	141:44	7	dest_cb
water	141:37	0:0	8	dest_cb
arg	141:46	141:53	7	dest_cr
water	141:46	0:0	8	dest_cr
arg	141:55	141:56	7	1
water	141:55	0:0	8	1
arg	142:26	142:49	7	s->next_picture.f->data
water	142:26	0:0	8	s
op	142:27	0:0	8	->
water	142:29	0:0	8	next_picture
op	142:41	0:0	8	.
water	142:42	0:0	8	f
op	142:43	0:0	8	->
water	142:45	0:0	8	data
arg	143:26	143:32	7	op_pix
water	143:26	0:0	8	op_pix
arg	143:34	143:41	7	op_qpix
water	143:34	0:0	8	op_qpix
water	143:42	0:0	6	;
water	144:8	0:0	6	}
if	145:8	169:8	4	(s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_DCT)
cond	145:12	145:30	5	s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_DCT
water	145:12	0:0	6	s
op	145:13	0:0	6	->
water	145:15	0:0	6	avctx
op	145:20	0:0	6	->
water	145:22	0:0	6	flags
op	145:28	0:0	6	&
water	145:30	0:0	6	AV_CODEC_FLAG_INTERLACED_DCT
stmts	145:60	169:8	5	
water	145:60	0:0	6	{
decl	146:12	146:51	6	int	progressive_score
water	146:33	0:0	6	,
decl	146:12	146:51	6	int	interlaced_score
water	147:12	0:0	6	s
op	147:13	0:0	6	->
water	147:15	0:0	6	interlaced_dct
op	147:30	0:0	6	=
water	147:32	0:0	6	0
water	147:33	0:0	6	;
water	148:12	0:0	6	progressive_score
op	148:30	0:0	6	=
water	148:32	0:0	6	s
op	148:33	0:0	6	->
water	148:35	0:0	6	mecc
op	148:39	0:0	6	.
water	148:40	0:0	6	ildct_cmp
op	148:49	0:0	6	[
water	148:50	0:0	6	0
op	148:51	0:0	6	]
water	148:52	0:0	6	(
water	148:53	0:0	6	s
water	148:54	0:0	6	,
water	148:56	0:0	6	dest_y
water	148:62	0:0	6	,
water	148:64	0:0	6	ptr_y
water	148:69	0:0	6	,
water	148:71	0:0	6	wrap_y
water	148:77	0:0	6	,
water	148:79	0:0	6	8
water	148:80	0:0	6	)
op	148:82	0:0	6	+
water	149:32	0:0	6	s
op	149:33	0:0	6	->
water	149:35	0:0	6	mecc
op	149:39	0:0	6	.
water	149:40	0:0	6	ildct_cmp
op	149:49	0:0	6	[
water	149:50	0:0	6	0
op	149:51	0:0	6	]
water	149:52	0:0	6	(
water	149:53	0:0	6	s
water	149:54	0:0	6	,
water	149:56	0:0	6	dest_y
op	149:63	0:0	6	+
water	149:65	0:0	6	wrap_y
op	149:72	0:0	6	*
water	149:74	0:0	6	8
water	149:75	0:0	6	,
water	150:53	0:0	6	ptr_y
op	150:59	0:0	6	+
water	150:61	0:0	6	wrap_y
op	150:68	0:0	6	*
water	150:70	0:0	6	8
water	150:71	0:0	6	,
water	151:53	0:0	6	wrap_y
water	151:59	0:0	6	,
water	151:61	0:0	6	8
water	151:62	0:0	6	)
op	151:64	0:0	6	-
water	151:66	0:0	6	400
water	151:69	0:0	6	;
if	152:12	153:40	6	(s -> avctx -> ildct_cmp == FF_CMP_VSSE)
cond	152:16	152:39	7	s -> avctx -> ildct_cmp == FF_CMP_VSSE
water	152:16	0:0	8	s
op	152:17	0:0	8	->
water	152:19	0:0	8	avctx
op	152:24	0:0	8	->
water	152:26	0:0	8	ildct_cmp
op	152:36	0:0	8	==
water	152:39	0:0	8	FF_CMP_VSSE
stmts	153:16	153:40	7	
water	153:16	0:0	8	progressive_score
op	153:34	0:0	8	-=
water	153:37	0:0	8	400
water	153:40	0:0	8	;
if	154:12	168:12	6	(progressive_score > 0)
cond	154:16	154:36	7	progressive_score > 0
water	154:16	0:0	8	progressive_score
op	154:34	0:0	8	>
water	154:36	0:0	8	0
stmts	154:39	168:12	7	
water	154:39	0:0	8	{
water	155:16	0:0	8	interlaced_score
op	155:33	0:0	8	=
water	155:35	0:0	8	s
op	155:36	0:0	8	->
water	155:38	0:0	8	mecc
op	155:42	0:0	8	.
water	155:43	0:0	8	ildct_cmp
op	155:52	0:0	8	[
water	155:53	0:0	8	0
op	155:54	0:0	8	]
water	155:55	0:0	8	(
water	155:56	0:0	8	s
water	155:57	0:0	8	,
water	155:59	0:0	8	dest_y
water	155:65	0:0	8	,
water	155:67	0:0	8	ptr_y
water	155:72	0:0	8	,
water	156:56	0:0	8	wrap_y
op	156:63	0:0	8	*
water	156:65	0:0	8	2
water	156:66	0:0	8	,
water	156:68	0:0	8	8
water	156:69	0:0	8	)
op	156:71	0:0	8	+
water	157:35	0:0	8	s
op	157:36	0:0	8	->
water	157:38	0:0	8	mecc
op	157:42	0:0	8	.
water	157:43	0:0	8	ildct_cmp
op	157:52	0:0	8	[
water	157:53	0:0	8	0
op	157:54	0:0	8	]
water	157:55	0:0	8	(
water	157:56	0:0	8	s
water	157:57	0:0	8	,
water	157:59	0:0	8	dest_y
op	157:66	0:0	8	+
water	157:68	0:0	8	wrap_y
water	157:74	0:0	8	,
water	158:56	0:0	8	ptr_y
op	158:62	0:0	8	+
water	158:64	0:0	8	wrap_y
water	158:70	0:0	8	,
water	159:56	0:0	8	wrap_y
op	159:63	0:0	8	*
water	159:65	0:0	8	2
water	159:66	0:0	8	,
water	159:68	0:0	8	8
water	159:69	0:0	8	)
water	159:70	0:0	8	;
if	160:16	167:16	8	(progressive_score > interlaced_score)
cond	160:20	160:40	9	progressive_score > interlaced_score
water	160:20	0:0	10	progressive_score
op	160:38	0:0	10	>
water	160:40	0:0	10	interlaced_score
stmts	160:58	167:16	9	
water	160:58	0:0	10	{
water	161:20	0:0	10	s
op	161:21	0:0	10	->
water	161:23	0:0	10	interlaced_dct
op	161:38	0:0	10	=
water	161:40	0:0	10	1
water	161:41	0:0	10	;
water	162:20	0:0	10	dct_offset
op	162:31	0:0	10	=
water	162:33	0:0	10	wrap_y
water	162:39	0:0	10	;
water	163:20	0:0	10	uv_dct_offset
op	163:34	0:0	10	=
water	163:36	0:0	10	wrap_c
water	163:42	0:0	10	;
water	164:20	0:0	10	wrap_y
op	164:27	0:0	10	<<=
water	164:31	0:0	10	1
water	164:32	0:0	10	;
if	165:20	166:36	10	(s -> chroma_format == CHROMA_422)
cond	165:24	165:44	11	s -> chroma_format == CHROMA_422
water	165:24	0:0	12	s
op	165:25	0:0	12	->
water	165:27	0:0	12	chroma_format
op	165:41	0:0	12	==
water	165:44	0:0	12	CHROMA_422
stmts	166:24	166:36	11	
water	166:24	0:0	12	wrap_c
op	166:31	0:0	12	<<=
water	166:35	0:0	12	1
water	166:36	0:0	12	;
water	167:16	0:0	10	}
water	168:12	0:0	8	}
water	169:8	0:0	6	}
call	170:8	170:62	4	s->pdsp.diff_pixels
arg	170:28	170:39	5	s->block[0]
water	170:28	0:0	6	s
op	170:29	0:0	6	->
water	170:31	0:0	6	block
op	170:36	0:0	6	[
water	170:37	0:0	6	0
op	170:38	0:0	6	]
arg	170:41	170:46	5	ptr_y
water	170:41	0:0	6	ptr_y
arg	170:48	170:54	5	dest_y
water	170:48	0:0	6	dest_y
arg	170:56	170:62	5	wrap_y
water	170:56	0:0	6	wrap_y
water	170:63	0:0	4	;
call	171:8	171:70	4	s->pdsp.diff_pixels
arg	171:28	171:39	5	s->block[1]
water	171:28	0:0	6	s
op	171:29	0:0	6	->
water	171:31	0:0	6	block
op	171:36	0:0	6	[
water	171:37	0:0	6	1
op	171:38	0:0	6	]
arg	171:41	171:50	5	ptr_y+8
water	171:41	0:0	6	ptr_y
op	171:47	0:0	6	+
water	171:49	0:0	6	8
arg	171:52	171:62	5	dest_y+8
water	171:52	0:0	6	dest_y
op	171:59	0:0	6	+
water	171:61	0:0	6	8
arg	171:64	171:70	5	wrap_y
water	171:64	0:0	6	wrap_y
water	171:71	0:0	4	;
call	172:8	173:55	4	s->pdsp.diff_pixels
arg	172:28	172:39	5	s->block[2]
water	172:28	0:0	6	s
op	172:29	0:0	6	->
water	172:31	0:0	6	block
op	172:36	0:0	6	[
water	172:37	0:0	6	2
op	172:38	0:0	6	]
arg	172:41	172:59	5	ptr_y+dct_offset
water	172:41	0:0	6	ptr_y
op	172:47	0:0	6	+
water	172:49	0:0	6	dct_offset
arg	173:28	173:47	5	dest_y+dct_offset
water	173:28	0:0	6	dest_y
op	173:35	0:0	6	+
water	173:37	0:0	6	dct_offset
arg	173:49	173:55	5	wrap_y
water	173:49	0:0	6	wrap_y
water	173:56	0:0	4	;
call	174:8	175:59	4	s->pdsp.diff_pixels
arg	174:28	174:39	5	s->block[3]
water	174:28	0:0	6	s
op	174:29	0:0	6	->
water	174:31	0:0	6	block
op	174:36	0:0	6	[
water	174:37	0:0	6	3
op	174:38	0:0	6	]
arg	174:41	174:63	5	ptr_y+dct_offset+8
water	174:41	0:0	6	ptr_y
op	174:47	0:0	6	+
water	174:49	0:0	6	dct_offset
op	174:60	0:0	6	+
water	174:62	0:0	6	8
arg	175:28	175:51	5	dest_y+dct_offset+8
water	175:28	0:0	6	dest_y
op	175:35	0:0	6	+
water	175:37	0:0	6	dct_offset
op	175:48	0:0	6	+
water	175:50	0:0	6	8
arg	175:53	175:59	5	wrap_y
water	175:53	0:0	6	wrap_y
water	175:60	0:0	4	;
if	176:8	179:8	4	(s -> avctx -> flags & AV_CODEC_FLAG_GRAY)
cond	176:12	176:30	5	s -> avctx -> flags & AV_CODEC_FLAG_GRAY
water	176:12	0:0	6	s
op	176:13	0:0	6	->
water	176:15	0:0	6	avctx
op	176:20	0:0	6	->
water	176:22	0:0	6	flags
op	176:28	0:0	6	&
water	176:30	0:0	6	AV_CODEC_FLAG_GRAY
stmts	176:50	179:8	5	
water	176:50	0:0	6	{
water	177:12	0:0	6	skip_dct
op	177:20	0:0	6	[
water	177:21	0:0	6	4
op	177:22	0:0	6	]
op	177:24	0:0	6	=
water	177:26	0:0	6	1
water	177:27	0:0	6	;
water	178:12	0:0	6	skip_dct
op	178:20	0:0	6	[
water	178:21	0:0	6	5
op	178:22	0:0	6	]
op	178:24	0:0	6	=
water	178:26	0:0	6	1
water	178:27	0:0	6	;
water	179:8	0:0	6	}
else	179:10	188:8	4
stmts	179:15	188:8	5	
water	179:15	0:0	6	{
call	180:12	180:68	6	s->pdsp.diff_pixels
arg	180:32	180:43	7	s->block[4]
water	180:32	0:0	8	s
op	180:33	0:0	8	->
water	180:35	0:0	8	block
op	180:40	0:0	8	[
water	180:41	0:0	8	4
op	180:42	0:0	8	]
arg	180:45	180:51	7	ptr_cb
water	180:45	0:0	8	ptr_cb
arg	180:53	180:60	7	dest_cb
water	180:53	0:0	8	dest_cb
arg	180:62	180:68	7	wrap_c
water	180:62	0:0	8	wrap_c
water	180:69	0:0	6	;
call	181:12	181:68	6	s->pdsp.diff_pixels
arg	181:32	181:43	7	s->block[5]
water	181:32	0:0	8	s
op	181:33	0:0	8	->
water	181:35	0:0	8	block
op	181:40	0:0	8	[
water	181:41	0:0	8	5
op	181:42	0:0	8	]
arg	181:45	181:51	7	ptr_cr
water	181:45	0:0	8	ptr_cr
arg	181:53	181:60	7	dest_cr
water	181:53	0:0	8	dest_cr
arg	181:62	181:68	7	wrap_c
water	181:62	0:0	8	wrap_c
water	181:69	0:0	6	;
if	182:12	187:12	6	(! s -> chroma_y_shift)
cond	182:16	182:20	7	! s -> chroma_y_shift
op	182:16	0:0	8	!
water	182:17	0:0	8	s
op	182:18	0:0	8	->
water	182:20	0:0	8	chroma_y_shift
stmts	182:36	187:12	7	
water	182:36	0:0	8	{
call	183:16	184:67	8	s->pdsp.diff_pixels
arg	183:36	183:47	9	s->block[6]
water	183:36	0:0	10	s
op	183:37	0:0	10	->
water	183:39	0:0	10	block
op	183:44	0:0	10	[
water	183:45	0:0	10	6
op	183:46	0:0	10	]
arg	183:49	183:71	9	ptr_cb+uv_dct_offset
water	183:49	0:0	10	ptr_cb
op	183:56	0:0	10	+
water	183:58	0:0	10	uv_dct_offset
arg	184:36	184:59	9	dest_cb+uv_dct_offset
water	184:36	0:0	10	dest_cb
op	184:44	0:0	10	+
water	184:46	0:0	10	uv_dct_offset
arg	184:61	184:67	9	wrap_c
water	184:61	0:0	10	wrap_c
water	184:68	0:0	8	;
call	185:16	186:67	8	s->pdsp.diff_pixels
arg	185:36	185:47	9	s->block[7]
water	185:36	0:0	10	s
op	185:37	0:0	10	->
water	185:39	0:0	10	block
op	185:44	0:0	10	[
water	185:45	0:0	10	7
op	185:46	0:0	10	]
arg	185:49	185:71	9	ptr_cr+uv_dct_offset
water	185:49	0:0	10	ptr_cr
op	185:56	0:0	10	+
water	185:58	0:0	10	uv_dct_offset
arg	186:36	186:59	9	dest_cr+uv_dct_offset
water	186:36	0:0	10	dest_cr
op	186:44	0:0	10	+
water	186:46	0:0	10	uv_dct_offset
arg	186:61	186:67	9	wrap_c
water	186:61	0:0	10	wrap_c
water	186:68	0:0	8	;
water	187:12	0:0	8	}
water	188:8	0:0	6	}
if	190:8	217:8	4	(s -> current_picture . mc_mb_var [ s -> mb_stride * mb_y + mb_x ] < 2 * s -> qscale * s -> qscale)
cond	190:12	191:35	5	s -> current_picture . mc_mb_var [ s -> mb_stride * mb_y + mb_x ] < 2 * s -> qscale * s -> qscale
water	190:12	0:0	6	s
op	190:13	0:0	6	->
water	190:15	0:0	6	current_picture
op	190:30	0:0	6	.
water	190:31	0:0	6	mc_mb_var
op	190:40	0:0	6	[
water	190:41	0:0	6	s
op	190:42	0:0	6	->
water	190:44	0:0	6	mb_stride
op	190:54	0:0	6	*
water	190:56	0:0	6	mb_y
op	190:61	0:0	6	+
water	190:63	0:0	6	mb_x
op	190:67	0:0	6	]
op	190:69	0:0	6	<
water	191:16	0:0	6	2
op	191:18	0:0	6	*
water	191:20	0:0	6	s
op	191:21	0:0	6	->
water	191:23	0:0	6	qscale
op	191:30	0:0	6	*
water	191:32	0:0	6	s
op	191:33	0:0	6	->
water	191:35	0:0	6	qscale
stmts	191:43	217:8	5	
water	191:43	0:0	6	{
if	193:12	194:31	6	(s -> mecc . sad [ 1 ] ( NULL , ptr_y , dest_y , wrap_y , 8 ) < 20 * s -> qscale)
cond	193:16	193:73	7	s -> mecc . sad [ 1 ] ( NULL , ptr_y , dest_y , wrap_y , 8 ) < 20 * s -> qscale
water	193:16	0:0	8	s
op	193:17	0:0	8	->
water	193:19	0:0	8	mecc
op	193:23	0:0	8	.
water	193:24	0:0	8	sad
op	193:27	0:0	8	[
water	193:28	0:0	8	1
op	193:29	0:0	8	]
water	193:30	0:0	8	(
water	193:31	0:0	8	NULL
water	193:35	0:0	8	,
water	193:37	0:0	8	ptr_y
water	193:42	0:0	8	,
water	193:44	0:0	8	dest_y
water	193:50	0:0	8	,
water	193:52	0:0	8	wrap_y
water	193:58	0:0	8	,
water	193:60	0:0	8	8
water	193:61	0:0	8	)
op	193:63	0:0	8	<
water	193:65	0:0	8	20
op	193:68	0:0	8	*
water	193:70	0:0	8	s
op	193:71	0:0	8	->
water	193:73	0:0	8	qscale
stmts	194:16	194:31	7	
water	194:16	0:0	8	skip_dct
op	194:24	0:0	8	[
water	194:25	0:0	8	0
op	194:26	0:0	8	]
op	194:28	0:0	8	=
water	194:30	0:0	8	1
water	194:31	0:0	8	;
if	195:12	196:31	6	(s -> mecc . sad [ 1 ] ( NULL , ptr_y + 8 , dest_y + 8 , wrap_y , 8 ) < 20 * s -> qscale)
cond	195:16	195:81	7	s -> mecc . sad [ 1 ] ( NULL , ptr_y + 8 , dest_y + 8 , wrap_y , 8 ) < 20 * s -> qscale
water	195:16	0:0	8	s
op	195:17	0:0	8	->
water	195:19	0:0	8	mecc
op	195:23	0:0	8	.
water	195:24	0:0	8	sad
op	195:27	0:0	8	[
water	195:28	0:0	8	1
op	195:29	0:0	8	]
water	195:30	0:0	8	(
water	195:31	0:0	8	NULL
water	195:35	0:0	8	,
water	195:37	0:0	8	ptr_y
op	195:43	0:0	8	+
water	195:45	0:0	8	8
water	195:46	0:0	8	,
water	195:48	0:0	8	dest_y
op	195:55	0:0	8	+
water	195:57	0:0	8	8
water	195:58	0:0	8	,
water	195:60	0:0	8	wrap_y
water	195:66	0:0	8	,
water	195:68	0:0	8	8
water	195:69	0:0	8	)
op	195:71	0:0	8	<
water	195:73	0:0	8	20
op	195:76	0:0	8	*
water	195:78	0:0	8	s
op	195:79	0:0	8	->
water	195:81	0:0	8	qscale
stmts	196:16	196:31	7	
water	196:16	0:0	8	skip_dct
op	196:24	0:0	8	[
water	196:25	0:0	8	1
op	196:26	0:0	8	]
op	196:28	0:0	8	=
water	196:30	0:0	8	1
water	196:31	0:0	8	;
if	197:12	199:31	6	(s -> mecc . sad [ 1 ] ( NULL , ptr_y + dct_offset , dest_y + dct_offset , wrap_y , 8 ) < 20 * s -> qscale)
cond	197:16	198:52	7	s -> mecc . sad [ 1 ] ( NULL , ptr_y + dct_offset , dest_y + dct_offset , wrap_y , 8 ) < 20 * s -> qscale
water	197:16	0:0	8	s
op	197:17	0:0	8	->
water	197:19	0:0	8	mecc
op	197:23	0:0	8	.
water	197:24	0:0	8	sad
op	197:27	0:0	8	[
water	197:28	0:0	8	1
op	197:29	0:0	8	]
water	197:30	0:0	8	(
water	197:31	0:0	8	NULL
water	197:35	0:0	8	,
water	197:37	0:0	8	ptr_y
op	197:43	0:0	8	+
water	197:45	0:0	8	dct_offset
water	197:55	0:0	8	,
water	197:57	0:0	8	dest_y
op	197:64	0:0	8	+
water	197:66	0:0	8	dct_offset
water	197:76	0:0	8	,
water	198:31	0:0	8	wrap_y
water	198:37	0:0	8	,
water	198:39	0:0	8	8
water	198:40	0:0	8	)
op	198:42	0:0	8	<
water	198:44	0:0	8	20
op	198:47	0:0	8	*
water	198:49	0:0	8	s
op	198:50	0:0	8	->
water	198:52	0:0	8	qscale
stmts	199:16	199:31	7	
water	199:16	0:0	8	skip_dct
op	199:24	0:0	8	[
water	199:25	0:0	8	2
op	199:26	0:0	8	]
op	199:28	0:0	8	=
water	199:30	0:0	8	1
water	199:31	0:0	8	;
if	200:12	202:31	6	(s -> mecc . sad [ 1 ] ( NULL , ptr_y + dct_offset + 8 , dest_y + dct_offset + 8 , wrap_y , 8 ) < 20 * s -> qscale)
cond	200:16	201:52	7	s -> mecc . sad [ 1 ] ( NULL , ptr_y + dct_offset + 8 , dest_y + dct_offset + 8 , wrap_y , 8 ) < 20 * s -> qscale
water	200:16	0:0	8	s
op	200:17	0:0	8	->
water	200:19	0:0	8	mecc
op	200:23	0:0	8	.
water	200:24	0:0	8	sad
op	200:27	0:0	8	[
water	200:28	0:0	8	1
op	200:29	0:0	8	]
water	200:30	0:0	8	(
water	200:31	0:0	8	NULL
water	200:35	0:0	8	,
water	200:37	0:0	8	ptr_y
op	200:43	0:0	8	+
water	200:45	0:0	8	dct_offset
op	200:56	0:0	8	+
water	200:58	0:0	8	8
water	200:59	0:0	8	,
water	200:61	0:0	8	dest_y
op	200:68	0:0	8	+
water	200:70	0:0	8	dct_offset
op	200:81	0:0	8	+
water	200:83	0:0	8	8
water	200:84	0:0	8	,
water	201:31	0:0	8	wrap_y
water	201:37	0:0	8	,
water	201:39	0:0	8	8
water	201:40	0:0	8	)
op	201:42	0:0	8	<
water	201:44	0:0	8	20
op	201:47	0:0	8	*
water	201:49	0:0	8	s
op	201:50	0:0	8	->
water	201:52	0:0	8	qscale
stmts	202:16	202:31	7	
water	202:16	0:0	8	skip_dct
op	202:24	0:0	8	[
water	202:25	0:0	8	3
op	202:26	0:0	8	]
op	202:28	0:0	8	=
water	202:30	0:0	8	1
water	202:31	0:0	8	;
if	203:12	204:31	6	(s -> mecc . sad [ 1 ] ( NULL , ptr_cb , dest_cb , wrap_c , 8 ) < 20 * s -> qscale)
cond	203:16	203:75	7	s -> mecc . sad [ 1 ] ( NULL , ptr_cb , dest_cb , wrap_c , 8 ) < 20 * s -> qscale
water	203:16	0:0	8	s
op	203:17	0:0	8	->
water	203:19	0:0	8	mecc
op	203:23	0:0	8	.
water	203:24	0:0	8	sad
op	203:27	0:0	8	[
water	203:28	0:0	8	1
op	203:29	0:0	8	]
water	203:30	0:0	8	(
water	203:31	0:0	8	NULL
water	203:35	0:0	8	,
water	203:37	0:0	8	ptr_cb
water	203:43	0:0	8	,
water	203:45	0:0	8	dest_cb
water	203:52	0:0	8	,
water	203:54	0:0	8	wrap_c
water	203:60	0:0	8	,
water	203:62	0:0	8	8
water	203:63	0:0	8	)
op	203:65	0:0	8	<
water	203:67	0:0	8	20
op	203:70	0:0	8	*
water	203:72	0:0	8	s
op	203:73	0:0	8	->
water	203:75	0:0	8	qscale
stmts	204:16	204:31	7	
water	204:16	0:0	8	skip_dct
op	204:24	0:0	8	[
water	204:25	0:0	8	4
op	204:26	0:0	8	]
op	204:28	0:0	8	=
water	204:30	0:0	8	1
water	204:31	0:0	8	;
if	205:12	206:31	6	(s -> mecc . sad [ 1 ] ( NULL , ptr_cr , dest_cr , wrap_c , 8 ) < 20 * s -> qscale)
cond	205:16	205:75	7	s -> mecc . sad [ 1 ] ( NULL , ptr_cr , dest_cr , wrap_c , 8 ) < 20 * s -> qscale
water	205:16	0:0	8	s
op	205:17	0:0	8	->
water	205:19	0:0	8	mecc
op	205:23	0:0	8	.
water	205:24	0:0	8	sad
op	205:27	0:0	8	[
water	205:28	0:0	8	1
op	205:29	0:0	8	]
water	205:30	0:0	8	(
water	205:31	0:0	8	NULL
water	205:35	0:0	8	,
water	205:37	0:0	8	ptr_cr
water	205:43	0:0	8	,
water	205:45	0:0	8	dest_cr
water	205:52	0:0	8	,
water	205:54	0:0	8	wrap_c
water	205:60	0:0	8	,
water	205:62	0:0	8	8
water	205:63	0:0	8	)
op	205:65	0:0	8	<
water	205:67	0:0	8	20
op	205:70	0:0	8	*
water	205:72	0:0	8	s
op	205:73	0:0	8	->
water	205:75	0:0	8	qscale
stmts	206:16	206:31	7	
water	206:16	0:0	8	skip_dct
op	206:24	0:0	8	[
water	206:25	0:0	8	5
op	206:26	0:0	8	]
op	206:28	0:0	8	=
water	206:30	0:0	8	1
water	206:31	0:0	8	;
if	207:12	216:12	6	(! s -> chroma_y_shift)
cond	207:16	207:20	7	! s -> chroma_y_shift
op	207:16	0:0	8	!
water	207:17	0:0	8	s
op	207:18	0:0	8	->
water	207:20	0:0	8	chroma_y_shift
stmts	207:36	216:12	7	
water	207:36	0:0	8	{
if	208:16	211:35	8	(s -> mecc . sad [ 1 ] ( NULL , ptr_cb + uv_dct_offset , dest_cb + uv_dct_offset , wrap_c , 8 ) < 20 * s -> qscale)
cond	208:20	210:56	9	s -> mecc . sad [ 1 ] ( NULL , ptr_cb + uv_dct_offset , dest_cb + uv_dct_offset , wrap_c , 8 ) < 20 * s -> qscale
water	208:20	0:0	10	s
op	208:21	0:0	10	->
water	208:23	0:0	10	mecc
op	208:27	0:0	10	.
water	208:28	0:0	10	sad
op	208:31	0:0	10	[
water	208:32	0:0	10	1
op	208:33	0:0	10	]
water	208:34	0:0	10	(
water	208:35	0:0	10	NULL
water	208:39	0:0	10	,
water	208:41	0:0	10	ptr_cb
op	208:48	0:0	10	+
water	208:50	0:0	10	uv_dct_offset
water	208:63	0:0	10	,
water	209:35	0:0	10	dest_cb
op	209:43	0:0	10	+
water	209:45	0:0	10	uv_dct_offset
water	209:58	0:0	10	,
water	210:35	0:0	10	wrap_c
water	210:41	0:0	10	,
water	210:43	0:0	10	8
water	210:44	0:0	10	)
op	210:46	0:0	10	<
water	210:48	0:0	10	20
op	210:51	0:0	10	*
water	210:53	0:0	10	s
op	210:54	0:0	10	->
water	210:56	0:0	10	qscale
stmts	211:20	211:35	9	
water	211:20	0:0	10	skip_dct
op	211:28	0:0	10	[
water	211:29	0:0	10	6
op	211:30	0:0	10	]
op	211:32	0:0	10	=
water	211:34	0:0	10	1
water	211:35	0:0	10	;
if	212:16	215:35	8	(s -> mecc . sad [ 1 ] ( NULL , ptr_cr + uv_dct_offset , dest_cr + uv_dct_offset , wrap_c , 8 ) < 20 * s -> qscale)
cond	212:20	214:56	9	s -> mecc . sad [ 1 ] ( NULL , ptr_cr + uv_dct_offset , dest_cr + uv_dct_offset , wrap_c , 8 ) < 20 * s -> qscale
water	212:20	0:0	10	s
op	212:21	0:0	10	->
water	212:23	0:0	10	mecc
op	212:27	0:0	10	.
water	212:28	0:0	10	sad
op	212:31	0:0	10	[
water	212:32	0:0	10	1
op	212:33	0:0	10	]
water	212:34	0:0	10	(
water	212:35	0:0	10	NULL
water	212:39	0:0	10	,
water	212:41	0:0	10	ptr_cr
op	212:48	0:0	10	+
water	212:50	0:0	10	uv_dct_offset
water	212:63	0:0	10	,
water	213:35	0:0	10	dest_cr
op	213:43	0:0	10	+
water	213:45	0:0	10	uv_dct_offset
water	213:58	0:0	10	,
water	214:35	0:0	10	wrap_c
water	214:41	0:0	10	,
water	214:43	0:0	10	8
water	214:44	0:0	10	)
op	214:46	0:0	10	<
water	214:48	0:0	10	20
op	214:51	0:0	10	*
water	214:53	0:0	10	s
op	214:54	0:0	10	->
water	214:56	0:0	10	qscale
stmts	215:20	215:35	9	
water	215:20	0:0	10	skip_dct
op	215:28	0:0	10	[
water	215:29	0:0	10	7
op	215:30	0:0	10	]
op	215:32	0:0	10	=
water	215:34	0:0	10	1
water	215:35	0:0	10	;
water	216:12	0:0	8	}
water	217:8	0:0	6	}
water	218:4	0:0	4	}
if	219:4	241:4	2	(s -> quantizer_noise_shaping)
cond	219:8	219:11	3	s -> quantizer_noise_shaping
water	219:8	0:0	4	s
op	219:9	0:0	4	->
water	219:11	0:0	4	quantizer_noise_shaping
stmts	219:36	241:4	3	
water	219:36	0:0	4	{
if	220:8	221:72	4	(! skip_dct [ 0 ])
cond	220:12	220:23	5	! skip_dct [ 0 ]
op	220:12	0:0	6	!
water	220:13	0:0	6	skip_dct
op	220:21	0:0	6	[
water	220:22	0:0	6	0
op	220:23	0:0	6	]
stmts	221:12	221:72	5	
call	221:12	221:71	6	get_visual_weight
arg	221:30	221:39	7	weight[0]
water	221:30	0:0	8	weight
op	221:36	0:0	8	[
water	221:37	0:0	8	0
op	221:38	0:0	8	]
arg	221:41	221:63	7	ptr_y
water	221:41	0:0	8	ptr_y
arg	221:65	221:71	7	wrap_y
water	221:65	0:0	8	wrap_y
water	221:72	0:0	6	;
if	222:8	223:72	4	(! skip_dct [ 1 ])
cond	222:12	222:23	5	! skip_dct [ 1 ]
op	222:12	0:0	6	!
water	222:13	0:0	6	skip_dct
op	222:21	0:0	6	[
water	222:22	0:0	6	1
op	222:23	0:0	6	]
stmts	223:12	223:72	5	
call	223:12	223:71	6	get_visual_weight
arg	223:30	223:39	7	weight[1]
water	223:30	0:0	8	weight
op	223:36	0:0	8	[
water	223:37	0:0	8	1
op	223:38	0:0	8	]
arg	223:41	223:63	7	ptr_y+8
water	223:41	0:0	8	ptr_y
op	223:60	0:0	8	+
water	223:62	0:0	8	8
arg	223:65	223:71	7	wrap_y
water	223:65	0:0	8	wrap_y
water	223:72	0:0	6	;
if	224:8	225:72	4	(! skip_dct [ 2 ])
cond	224:12	224:23	5	! skip_dct [ 2 ]
op	224:12	0:0	6	!
water	224:13	0:0	6	skip_dct
op	224:21	0:0	6	[
water	224:22	0:0	6	2
op	224:23	0:0	6	]
stmts	225:12	225:72	5	
call	225:12	225:71	6	get_visual_weight
arg	225:30	225:39	7	weight[2]
water	225:30	0:0	8	weight
op	225:36	0:0	8	[
water	225:37	0:0	8	2
op	225:38	0:0	8	]
arg	225:41	225:63	7	ptr_y+dct_offset
water	225:41	0:0	8	ptr_y
op	225:47	0:0	8	+
water	225:49	0:0	8	dct_offset
arg	225:65	225:71	7	wrap_y
water	225:65	0:0	8	wrap_y
water	225:72	0:0	6	;
if	226:8	227:72	4	(! skip_dct [ 3 ])
cond	226:12	226:23	5	! skip_dct [ 3 ]
op	226:12	0:0	6	!
water	226:13	0:0	6	skip_dct
op	226:21	0:0	6	[
water	226:22	0:0	6	3
op	226:23	0:0	6	]
stmts	227:12	227:72	5	
call	227:12	227:71	6	get_visual_weight
arg	227:30	227:39	7	weight[3]
water	227:30	0:0	8	weight
op	227:36	0:0	8	[
water	227:37	0:0	8	3
op	227:38	0:0	8	]
arg	227:41	227:63	7	ptr_y+dct_offset+8
water	227:41	0:0	8	ptr_y
op	227:47	0:0	8	+
water	227:49	0:0	8	dct_offset
op	227:60	0:0	8	+
water	227:62	0:0	8	8
arg	227:65	227:71	7	wrap_y
water	227:65	0:0	8	wrap_y
water	227:72	0:0	6	;
if	228:8	229:72	4	(! skip_dct [ 4 ])
cond	228:12	228:23	5	! skip_dct [ 4 ]
op	228:12	0:0	6	!
water	228:13	0:0	6	skip_dct
op	228:21	0:0	6	[
water	228:22	0:0	6	4
op	228:23	0:0	6	]
stmts	229:12	229:72	5	
call	229:12	229:71	6	get_visual_weight
arg	229:30	229:39	7	weight[4]
water	229:30	0:0	8	weight
op	229:36	0:0	8	[
water	229:37	0:0	8	4
op	229:38	0:0	8	]
arg	229:41	229:63	7	ptr_cb
water	229:41	0:0	8	ptr_cb
arg	229:65	229:71	7	wrap_c
water	229:65	0:0	8	wrap_c
water	229:72	0:0	6	;
if	230:8	231:72	4	(! skip_dct [ 5 ])
cond	230:12	230:23	5	! skip_dct [ 5 ]
op	230:12	0:0	6	!
water	230:13	0:0	6	skip_dct
op	230:21	0:0	6	[
water	230:22	0:0	6	5
op	230:23	0:0	6	]
stmts	231:12	231:72	5	
call	231:12	231:71	6	get_visual_weight
arg	231:30	231:39	7	weight[5]
water	231:30	0:0	8	weight
op	231:36	0:0	8	[
water	231:37	0:0	8	5
op	231:38	0:0	8	]
arg	231:41	231:63	7	ptr_cr
water	231:41	0:0	8	ptr_cr
arg	231:65	231:71	7	wrap_c
water	231:65	0:0	8	wrap_c
water	231:72	0:0	6	;
if	232:8	239:8	4	(! s -> chroma_y_shift)
cond	232:12	232:16	5	! s -> chroma_y_shift
op	232:12	0:0	6	!
water	232:13	0:0	6	s
op	232:14	0:0	6	->
water	232:16	0:0	6	chroma_y_shift
stmts	232:32	239:8	5	
water	232:32	0:0	6	{
if	233:12	235:41	6	(! skip_dct [ 6 ])
cond	233:16	233:27	7	! skip_dct [ 6 ]
op	233:16	0:0	8	!
water	233:17	0:0	8	skip_dct
op	233:25	0:0	8	[
water	233:26	0:0	8	6
op	233:27	0:0	8	]
stmts	234:16	235:41	7	
call	234:16	235:40	8	get_visual_weight
arg	234:34	234:43	9	weight[6]
water	234:34	0:0	10	weight
op	234:40	0:0	10	[
water	234:41	0:0	10	6
op	234:42	0:0	10	]
arg	234:45	234:67	9	ptr_cb+uv_dct_offset
water	234:45	0:0	10	ptr_cb
op	234:52	0:0	10	+
water	234:54	0:0	10	uv_dct_offset
arg	235:34	235:40	9	wrap_c
water	235:34	0:0	10	wrap_c
water	235:41	0:0	8	;
if	236:12	238:41	6	(! skip_dct [ 7 ])
cond	236:16	236:27	7	! skip_dct [ 7 ]
op	236:16	0:0	8	!
water	236:17	0:0	8	skip_dct
op	236:25	0:0	8	[
water	236:26	0:0	8	7
op	236:27	0:0	8	]
stmts	237:16	238:41	7	
call	237:16	238:40	8	get_visual_weight
arg	237:34	237:43	9	weight[7]
water	237:34	0:0	10	weight
op	237:40	0:0	10	[
water	237:41	0:0	10	7
op	237:42	0:0	10	]
arg	237:45	237:67	9	ptr_cr+uv_dct_offset
water	237:45	0:0	10	ptr_cr
op	237:52	0:0	10	+
water	237:54	0:0	10	uv_dct_offset
arg	238:34	238:40	9	wrap_c
water	238:34	0:0	10	wrap_c
water	238:41	0:0	8	;
water	239:8	0:0	6	}
call	240:8	240:74	4	memcpy
arg	240:15	240:22	5	orig[0]
water	240:15	0:0	6	orig
op	240:19	0:0	6	[
water	240:20	0:0	6	0
op	240:21	0:0	6	]
arg	240:24	240:35	5	s->block[0]
water	240:24	0:0	6	s
op	240:25	0:0	6	->
water	240:27	0:0	6	block
op	240:32	0:0	6	[
water	240:33	0:0	6	0
op	240:34	0:0	6	]
arg	240:37	240:74	5	sizeof(int16_t)*64*mb_block_count
op	240:37	0:0	6	sizeof
water	240:43	0:0	6	(
water	240:44	0:0	6	int16_t
water	240:51	0:0	6	)
op	240:53	0:0	6	*
water	240:55	0:0	6	64
op	240:58	0:0	6	*
water	240:60	0:0	6	mb_block_count
water	240:75	0:0	4	;
water	241:4	0:0	4	}
call	243:4	243:59	2	av_assert2
arg	243:15	243:59	3	s->out_format!=FMT_MJPEG||s->qscale==8
water	243:15	0:0	4	s
op	243:16	0:0	4	->
water	243:18	0:0	4	out_format
op	243:29	0:0	4	!=
water	243:32	0:0	4	FMT_MJPEG
op	243:42	0:0	4	||
water	243:45	0:0	4	s
op	243:46	0:0	4	->
water	243:48	0:0	4	qscale
op	243:55	0:0	4	==
water	243:58	0:0	4	8
water	243:60	0:0	2	;
water	244:4	0:0	2	{
for	245:8	258:8	2	(i = 0 ;i < mb_block_count;i ++)
forinit	245:13	245:18	3	i = 0 ;
water	245:13	0:0	4	i
op	245:15	0:0	4	=
water	245:17	0:0	4	0
water	245:18	0:0	4	;
cond	245:20	245:24	3	i < mb_block_count
water	245:20	0:0	4	i
op	245:22	0:0	4	<
water	245:24	0:0	4	mb_block_count
forexpr	245:40	245:41	3	i ++
water	245:40	0:0	4	i
op	245:41	0:0	4	++
stmts	245:45	258:8	3	
water	245:45	0:0	4	{
if	246:12	256:12	4	(! skip_dct [ i ])
cond	246:16	246:27	5	! skip_dct [ i ]
op	246:16	0:0	6	!
water	246:17	0:0	6	skip_dct
op	246:25	0:0	6	[
water	246:26	0:0	6	i
op	246:27	0:0	6	]
stmts	246:30	256:12	5	
water	246:30	0:0	6	{
decl	247:16	247:28	6	int	overflow
water	248:16	0:0	6	s
op	248:17	0:0	6	->
water	248:19	0:0	6	block_last_index
op	248:35	0:0	6	[
water	248:36	0:0	6	i
op	248:37	0:0	6	]
op	248:39	0:0	6	=
call	248:41	248:96	6	s->dct_quantize
arg	248:57	248:58	7	s
water	248:57	0:0	8	s
arg	248:60	248:71	7	s->block[i]
water	248:60	0:0	8	s
op	248:61	0:0	8	->
water	248:63	0:0	8	block
op	248:68	0:0	8	[
water	248:69	0:0	8	i
op	248:70	0:0	8	]
arg	248:73	248:74	7	i
water	248:73	0:0	8	i
arg	248:76	248:85	7	s->qscale
water	248:76	0:0	8	s
op	248:77	0:0	8	->
water	248:79	0:0	8	qscale
arg	248:87	248:96	7	&overflow
op	248:87	0:0	8	&
water	248:88	0:0	8	overflow
water	248:97	0:0	6	;
if	254:16	255:71	6	(overflow)
cond	254:20	254:20	7	overflow
water	254:20	0:0	8	overflow
stmts	255:20	255:71	7	
call	255:20	255:70	8	clip_coeffs
arg	255:32	255:33	9	s
water	255:32	0:0	10	s
arg	255:35	255:46	9	s->block[i]
water	255:35	0:0	10	s
op	255:36	0:0	10	->
water	255:38	0:0	10	block
op	255:43	0:0	10	[
water	255:44	0:0	10	i
op	255:45	0:0	10	]
arg	255:48	255:70	9	s->block_last_index[i]
water	255:48	0:0	10	s
op	255:49	0:0	10	->
water	255:51	0:0	10	block_last_index
op	255:67	0:0	10	[
water	255:68	0:0	10	i
op	255:69	0:0	10	]
water	255:71	0:0	8	;
water	256:12	0:0	6	}
else	256:14	257:43	4
stmts	257:16	257:43	5	
water	257:16	0:0	6	s
op	257:17	0:0	6	->
water	257:19	0:0	6	block_last_index
op	257:35	0:0	6	[
water	257:36	0:0	6	i
op	257:37	0:0	6	]
op	257:39	0:0	6	=
op	257:41	0:0	6	-
water	257:42	0:0	6	1
water	257:43	0:0	6	;
water	258:8	0:0	4	}
if	259:8	267:8	2	(s -> quantizer_noise_shaping)
cond	259:12	259:15	3	s -> quantizer_noise_shaping
water	259:12	0:0	4	s
op	259:13	0:0	4	->
water	259:15	0:0	4	quantizer_noise_shaping
stmts	259:40	267:8	3	
water	259:40	0:0	4	{
for	260:12	266:12	4	(i = 0 ;i < mb_block_count;i ++)
forinit	260:17	260:22	5	i = 0 ;
water	260:17	0:0	6	i
op	260:19	0:0	6	=
water	260:21	0:0	6	0
water	260:22	0:0	6	;
cond	260:24	260:28	5	i < mb_block_count
water	260:24	0:0	6	i
op	260:26	0:0	6	<
water	260:28	0:0	6	mb_block_count
forexpr	260:44	260:45	5	i ++
water	260:44	0:0	6	i
op	260:45	0:0	6	++
stmts	260:49	266:12	5	
water	260:49	0:0	6	{
if	261:16	265:16	6	(! skip_dct [ i ])
cond	261:20	261:31	7	! skip_dct [ i ]
op	261:20	0:0	8	!
water	261:21	0:0	8	skip_dct
op	261:29	0:0	8	[
water	261:30	0:0	8	i
op	261:31	0:0	8	]
stmts	261:34	265:16	7	
water	261:34	0:0	8	{
water	262:20	0:0	8	s
op	262:21	0:0	8	->
water	262:23	0:0	8	block_last_index
op	262:39	0:0	8	[
water	262:40	0:0	8	i
op	262:41	0:0	8	]
op	262:43	0:0	8	=
call	263:24	264:65	8	dct_quantize_refine
arg	263:44	263:45	9	s
water	263:44	0:0	10	s
arg	263:47	263:58	9	s->block[i]
water	263:47	0:0	10	s
op	263:48	0:0	10	->
water	263:50	0:0	10	block
op	263:55	0:0	10	[
water	263:56	0:0	10	i
op	263:57	0:0	10	]
arg	263:60	263:69	9	weight[i]
water	263:60	0:0	10	weight
op	263:66	0:0	10	[
water	263:67	0:0	10	i
op	263:68	0:0	10	]
arg	264:44	264:51	9	orig[i]
water	264:44	0:0	10	orig
op	264:48	0:0	10	[
water	264:49	0:0	10	i
op	264:50	0:0	10	]
arg	264:53	264:54	9	i
water	264:53	0:0	10	i
arg	264:56	264:65	9	s->qscale
water	264:56	0:0	10	s
op	264:57	0:0	10	->
water	264:59	0:0	10	qscale
water	264:66	0:0	8	;
water	265:16	0:0	8	}
water	266:12	0:0	6	}
water	267:8	0:0	4	}
if	268:8	270:74	2	(s -> luma_elim_threshold && ! s -> mb_intra)
cond	268:12	268:42	3	s -> luma_elim_threshold && ! s -> mb_intra
water	268:12	0:0	4	s
op	268:13	0:0	4	->
water	268:15	0:0	4	luma_elim_threshold
op	268:35	0:0	4	&&
op	268:38	0:0	4	!
water	268:39	0:0	4	s
op	268:40	0:0	4	->
water	268:42	0:0	4	mb_intra
stmts	269:12	270:74	3	
for	269:12	270:74	4	(i = 0 ;i < 4;i ++)
forinit	269:17	269:22	5	i = 0 ;
water	269:17	0:0	6	i
op	269:19	0:0	6	=
water	269:21	0:0	6	0
water	269:22	0:0	6	;
cond	269:24	269:28	5	i < 4
water	269:24	0:0	6	i
op	269:26	0:0	6	<
water	269:28	0:0	6	4
forexpr	269:31	269:32	5	i ++
water	269:31	0:0	6	i
op	269:32	0:0	6	++
stmts	270:16	270:74	5	
call	270:16	270:73	6	dct_single_coeff_elimination
arg	270:45	270:46	7	s
water	270:45	0:0	8	s
arg	270:48	270:49	7	i
water	270:48	0:0	8	i
arg	270:51	270:73	7	s->luma_elim_threshold
water	270:51	0:0	8	s
op	270:52	0:0	8	->
water	270:54	0:0	8	luma_elim_threshold
water	270:74	0:0	6	;
if	271:8	273:76	2	(s -> chroma_elim_threshold && ! s -> mb_intra)
cond	271:12	271:44	3	s -> chroma_elim_threshold && ! s -> mb_intra
water	271:12	0:0	4	s
op	271:13	0:0	4	->
water	271:15	0:0	4	chroma_elim_threshold
op	271:37	0:0	4	&&
op	271:40	0:0	4	!
water	271:41	0:0	4	s
op	271:42	0:0	4	->
water	271:44	0:0	4	mb_intra
stmts	272:12	273:76	3	
for	272:12	273:76	4	(i = 4 ;i < mb_block_count;i ++)
forinit	272:17	272:22	5	i = 4 ;
water	272:17	0:0	6	i
op	272:19	0:0	6	=
water	272:21	0:0	6	4
water	272:22	0:0	6	;
cond	272:24	272:28	5	i < mb_block_count
water	272:24	0:0	6	i
op	272:26	0:0	6	<
water	272:28	0:0	6	mb_block_count
forexpr	272:44	272:45	5	i ++
water	272:44	0:0	6	i
op	272:45	0:0	6	++
stmts	273:16	273:76	5	
call	273:16	273:75	6	dct_single_coeff_elimination
arg	273:45	273:46	7	s
water	273:45	0:0	8	s
arg	273:48	273:49	7	i
water	273:48	0:0	8	i
arg	273:51	273:75	7	s->chroma_elim_threshold
water	273:51	0:0	8	s
op	273:52	0:0	8	->
water	273:54	0:0	8	chroma_elim_threshold
water	273:76	0:0	6	;
if	274:8	279:8	2	(s -> mpv_flags & FF_MPV_FLAG_CBP_RD)
cond	274:12	274:27	3	s -> mpv_flags & FF_MPV_FLAG_CBP_RD
water	274:12	0:0	4	s
op	274:13	0:0	4	->
water	274:15	0:0	4	mpv_flags
op	274:25	0:0	4	&
water	274:27	0:0	4	FF_MPV_FLAG_CBP_RD
stmts	274:47	279:8	3	
water	274:47	0:0	4	{
for	275:12	278:12	4	(i = 0 ;i < mb_block_count;i ++)
forinit	275:17	275:22	5	i = 0 ;
water	275:17	0:0	6	i
op	275:19	0:0	6	=
water	275:21	0:0	6	0
water	275:22	0:0	6	;
cond	275:24	275:28	5	i < mb_block_count
water	275:24	0:0	6	i
op	275:26	0:0	6	<
water	275:28	0:0	6	mb_block_count
forexpr	275:44	275:45	5	i ++
water	275:44	0:0	6	i
op	275:45	0:0	6	++
stmts	275:49	278:12	5	
water	275:49	0:0	6	{
if	276:16	277:53	6	(s -> block_last_index [ i ] == - 1)
cond	276:20	276:47	7	s -> block_last_index [ i ] == - 1
water	276:20	0:0	8	s
op	276:21	0:0	8	->
water	276:23	0:0	8	block_last_index
op	276:39	0:0	8	[
water	276:40	0:0	8	i
op	276:41	0:0	8	]
op	276:43	0:0	8	==
op	276:46	0:0	8	-
water	276:47	0:0	8	1
stmts	277:20	277:53	7	
water	277:20	0:0	8	s
op	277:21	0:0	8	->
water	277:23	0:0	8	coded_score
op	277:34	0:0	8	[
water	277:35	0:0	8	i
op	277:36	0:0	8	]
op	277:38	0:0	8	=
water	277:40	0:0	8	INT_MAX
op	277:48	0:0	8	/
water	277:50	0:0	8	256
water	277:53	0:0	8	;
water	278:12	0:0	6	}
water	279:8	0:0	4	}
water	280:4	0:0	2	}
if	281:4	292:4	2	(( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ) && s -> mb_intra)
cond	281:8	281:53	3	( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ) && s -> mb_intra
water	281:8	0:0	4	(
water	281:9	0:0	4	s
op	281:10	0:0	4	->
water	281:12	0:0	4	avctx
op	281:17	0:0	4	->
water	281:19	0:0	4	flags
op	281:25	0:0	4	&
water	281:27	0:0	4	AV_CODEC_FLAG_GRAY
water	281:45	0:0	4	)
op	281:47	0:0	4	&&
water	281:50	0:0	4	s
op	281:51	0:0	4	->
water	281:53	0:0	4	mb_intra
stmts	281:63	292:4	3	
water	281:63	0:0	4	{
water	282:8	0:0	4	s
op	282:9	0:0	4	->
water	282:11	0:0	4	block_last_index
op	282:27	0:0	4	[
water	282:28	0:0	4	4
op	282:29	0:0	4	]
op	282:31	0:0	4	=
water	283:8	0:0	4	s
op	283:9	0:0	4	->
water	283:11	0:0	4	block_last_index
op	283:27	0:0	4	[
water	283:28	0:0	4	5
op	283:29	0:0	4	]
op	283:31	0:0	4	=
water	283:33	0:0	4	0
water	283:34	0:0	4	;
water	284:8	0:0	4	s
op	284:9	0:0	4	->
water	284:11	0:0	4	block
op	284:16	0:0	4	[
water	284:17	0:0	4	4
op	284:18	0:0	4	]
op	284:19	0:0	4	[
water	284:20	0:0	4	0
op	284:21	0:0	4	]
op	284:23	0:0	4	=
water	285:8	0:0	4	s
op	285:9	0:0	4	->
water	285:11	0:0	4	block
op	285:16	0:0	4	[
water	285:17	0:0	4	5
op	285:18	0:0	4	]
op	285:19	0:0	4	[
water	285:20	0:0	4	0
op	285:21	0:0	4	]
op	285:23	0:0	4	=
water	285:25	0:0	4	(
water	285:26	0:0	4	1024
op	285:31	0:0	4	+
water	285:33	0:0	4	s
op	285:34	0:0	4	->
water	285:36	0:0	4	c_dc_scale
op	285:47	0:0	4	/
water	285:49	0:0	4	2
water	285:50	0:0	4	)
op	285:52	0:0	4	/
water	285:54	0:0	4	s
op	285:55	0:0	4	->
water	285:57	0:0	4	c_dc_scale
water	285:67	0:0	4	;
if	286:8	291:8	4	(! s -> chroma_y_shift)
cond	286:12	286:16	5	! s -> chroma_y_shift
op	286:12	0:0	6	!
water	286:13	0:0	6	s
op	286:14	0:0	6	->
water	286:16	0:0	6	chroma_y_shift
stmts	286:32	291:8	5	
water	286:32	0:0	6	{
for	287:12	290:12	6	(i = 6 ;i < 12;i ++)
forinit	287:17	287:20	7	i = 6 ;
water	287:17	0:0	8	i
op	287:18	0:0	8	=
water	287:19	0:0	8	6
water	287:20	0:0	8	;
cond	287:22	287:24	7	i < 12
water	287:22	0:0	8	i
op	287:23	0:0	8	<
water	287:24	0:0	8	12
forexpr	287:28	287:29	7	i ++
water	287:28	0:0	8	i
op	287:29	0:0	8	++
stmts	287:33	290:12	7	
water	287:33	0:0	8	{
water	288:16	0:0	8	s
op	288:17	0:0	8	->
water	288:19	0:0	8	block_last_index
op	288:35	0:0	8	[
water	288:36	0:0	8	i
op	288:37	0:0	8	]
op	288:39	0:0	8	=
water	288:41	0:0	8	0
water	288:42	0:0	8	;
water	289:16	0:0	8	s
op	289:17	0:0	8	->
water	289:19	0:0	8	block
op	289:24	0:0	8	[
water	289:25	0:0	8	i
op	289:26	0:0	8	]
op	289:27	0:0	8	[
water	289:28	0:0	8	0
op	289:29	0:0	8	]
op	289:31	0:0	8	=
water	289:33	0:0	8	s
op	289:34	0:0	8	->
water	289:36	0:0	8	block
op	289:41	0:0	8	[
water	289:42	0:0	8	4
op	289:43	0:0	8	]
op	289:44	0:0	8	[
water	289:45	0:0	8	0
op	289:46	0:0	8	]
water	289:47	0:0	8	;
water	290:12	0:0	8	}
water	291:8	0:0	6	}
water	292:4	0:0	4	}
if	294:4	305:4	2	(s -> alternate_scan && s -> dct_quantize != ff_dct_quantize_c)
cond	294:8	294:48	3	s -> alternate_scan && s -> dct_quantize != ff_dct_quantize_c
water	294:8	0:0	4	s
op	294:9	0:0	4	->
water	294:11	0:0	4	alternate_scan
op	294:26	0:0	4	&&
water	294:29	0:0	4	s
op	294:30	0:0	4	->
water	294:32	0:0	4	dct_quantize
op	294:45	0:0	4	!=
water	294:48	0:0	4	ff_dct_quantize_c
stmts	294:67	305:4	3	
water	294:67	0:0	4	{
for	295:8	304:8	4	(i = 0 ;i < mb_block_count;i ++)
forinit	295:13	295:18	5	i = 0 ;
water	295:13	0:0	6	i
op	295:15	0:0	6	=
water	295:17	0:0	6	0
water	295:18	0:0	6	;
cond	295:20	295:24	5	i < mb_block_count
water	295:20	0:0	6	i
op	295:22	0:0	6	<
water	295:24	0:0	6	mb_block_count
forexpr	295:40	295:41	5	i ++
water	295:40	0:0	6	i
op	295:41	0:0	6	++
stmts	295:45	304:8	5	
water	295:45	0:0	6	{
decl	296:12	296:17	6	int	j
if	297:12	303:12	6	(s -> block_last_index [ i ] > 0)
cond	297:16	297:41	7	s -> block_last_index [ i ] > 0
water	297:16	0:0	8	s
op	297:17	0:0	8	->
water	297:19	0:0	8	block_last_index
op	297:35	0:0	8	[
water	297:36	0:0	8	i
op	297:37	0:0	8	]
op	297:39	0:0	8	>
water	297:41	0:0	8	0
stmts	297:44	303:12	7	
water	297:44	0:0	8	{
for	298:16	301:16	8	(j = 63 ;j > 0;j --)
forinit	298:21	298:27	9	j = 63 ;
water	298:21	0:0	10	j
op	298:23	0:0	10	=
water	298:25	0:0	10	63
water	298:27	0:0	10	;
cond	298:29	298:33	9	j > 0
water	298:29	0:0	10	j
op	298:31	0:0	10	>
water	298:33	0:0	10	0
forexpr	298:36	298:37	9	j --
water	298:36	0:0	10	j
op	298:37	0:0	10	--
stmts	298:41	301:16	9	
water	298:41	0:0	10	{
if	299:20	300:29	10	(s -> block [ i ] [ s -> intra_scantable . permutated [ j ] ])
cond	299:24	299:68	11	s -> block [ i ] [ s -> intra_scantable . permutated [ j ] ]
water	299:24	0:0	12	s
op	299:25	0:0	12	->
water	299:27	0:0	12	block
op	299:32	0:0	12	[
water	299:33	0:0	12	i
op	299:34	0:0	12	]
op	299:35	0:0	12	[
water	299:36	0:0	12	s
op	299:37	0:0	12	->
water	299:39	0:0	12	intra_scantable
op	299:54	0:0	12	.
water	299:55	0:0	12	permutated
op	299:65	0:0	12	[
water	299:66	0:0	12	j
op	299:67	0:0	12	]
op	299:68	0:0	12	]
stmts	300:24	300:29	11	
break	300:24	300:29	12	
water	301:16	0:0	10	}
water	302:16	0:0	8	s
op	302:17	0:0	8	->
water	302:19	0:0	8	block_last_index
op	302:35	0:0	8	[
water	302:36	0:0	8	i
op	302:37	0:0	8	]
op	302:39	0:0	8	=
water	302:41	0:0	8	j
water	302:42	0:0	8	;
water	303:12	0:0	8	}
water	304:8	0:0	6	}
water	305:4	0:0	4	}
switch	307:4	346:4	2	(s -> codec_id)
cond	307:11	307:14	3	s -> codec_id
water	307:11	0:0	4	s
op	307:12	0:0	4	->
water	307:14	0:0	4	codec_id
stmts	307:23	346:4	3	
water	307:23	0:0	4	{
label	308:4	308:31	4	case AV_CODEC_ID_MPEG1VIDEO :
label	309:4	309:31	4	case AV_CODEC_ID_MPEG2VIDEO :
if	310:8	311:63	4	(CONFIG_MPEG1VIDEO_ENCODER || CONFIG_MPEG2VIDEO_ENCODER)
cond	310:12	310:41	5	CONFIG_MPEG1VIDEO_ENCODER || CONFIG_MPEG2VIDEO_ENCODER
water	310:12	0:0	6	CONFIG_MPEG1VIDEO_ENCODER
op	310:38	0:0	6	||
water	310:41	0:0	6	CONFIG_MPEG2VIDEO_ENCODER
stmts	311:12	311:63	5	
call	311:12	311:62	6	ff_mpeg1_encode_mb
arg	311:31	311:32	7	s
water	311:31	0:0	8	s
arg	311:34	311:42	7	s->block
water	311:34	0:0	8	s
op	311:35	0:0	8	->
water	311:37	0:0	8	block
arg	311:44	311:52	7	motion_x
water	311:44	0:0	8	motion_x
arg	311:54	311:62	7	motion_y
water	311:54	0:0	8	motion_y
water	311:63	0:0	6	;
break	312:8	312:13	4	
label	313:4	313:26	4	case AV_CODEC_ID_MPEG4 :
if	314:8	315:63	4	(CONFIG_MPEG4_ENCODER)
cond	314:12	314:12	5	CONFIG_MPEG4_ENCODER
water	314:12	0:0	6	CONFIG_MPEG4_ENCODER
stmts	315:12	315:63	5	
call	315:12	315:62	6	ff_mpeg4_encode_mb
arg	315:31	315:32	7	s
water	315:31	0:0	8	s
arg	315:34	315:42	7	s->block
water	315:34	0:0	8	s
op	315:35	0:0	8	->
water	315:37	0:0	8	block
arg	315:44	315:52	7	motion_x
water	315:44	0:0	8	motion_x
arg	315:54	315:62	7	motion_y
water	315:54	0:0	8	motion_y
water	315:63	0:0	6	;
break	316:8	316:13	4	
label	317:4	317:30	4	case AV_CODEC_ID_MSMPEG4V2 :
label	318:4	318:30	4	case AV_CODEC_ID_MSMPEG4V3 :
label	319:4	319:25	4	case AV_CODEC_ID_WMV1 :
if	320:8	321:65	4	(CONFIG_MSMPEG4_ENCODER)
cond	320:12	320:12	5	CONFIG_MSMPEG4_ENCODER
water	320:12	0:0	6	CONFIG_MSMPEG4_ENCODER
stmts	321:12	321:65	5	
call	321:12	321:64	6	ff_msmpeg4_encode_mb
arg	321:33	321:34	7	s
water	321:33	0:0	8	s
arg	321:36	321:44	7	s->block
water	321:36	0:0	8	s
op	321:37	0:0	8	->
water	321:39	0:0	8	block
arg	321:46	321:54	7	motion_x
water	321:46	0:0	8	motion_x
arg	321:56	321:64	7	motion_y
water	321:56	0:0	8	motion_y
water	321:65	0:0	6	;
break	322:8	322:13	4	
label	323:4	323:25	4	case AV_CODEC_ID_WMV2 :
if	324:8	325:62	4	(CONFIG_WMV2_ENCODER)
cond	324:12	324:12	5	CONFIG_WMV2_ENCODER
water	324:12	0:0	6	CONFIG_WMV2_ENCODER
stmts	325:12	325:62	5	
call	325:12	325:61	6	ff_wmv2_encode_mb
arg	325:30	325:31	7	s
water	325:30	0:0	8	s
arg	325:33	325:41	7	s->block
water	325:33	0:0	8	s
op	325:34	0:0	8	->
water	325:36	0:0	8	block
arg	325:43	325:51	7	motion_x
water	325:43	0:0	8	motion_x
arg	325:53	325:61	7	motion_y
water	325:53	0:0	8	motion_y
water	325:62	0:0	6	;
break	326:8	326:13	4	
label	327:4	327:25	4	case AV_CODEC_ID_H261 :
if	328:8	329:62	4	(CONFIG_H261_ENCODER)
cond	328:12	328:12	5	CONFIG_H261_ENCODER
water	328:12	0:0	6	CONFIG_H261_ENCODER
stmts	329:12	329:62	5	
call	329:12	329:61	6	ff_h261_encode_mb
arg	329:30	329:31	7	s
water	329:30	0:0	8	s
arg	329:33	329:41	7	s->block
water	329:33	0:0	8	s
op	329:34	0:0	8	->
water	329:36	0:0	8	block
arg	329:43	329:51	7	motion_x
water	329:43	0:0	8	motion_x
arg	329:53	329:61	7	motion_y
water	329:53	0:0	8	motion_y
water	329:62	0:0	6	;
break	330:8	330:13	4	
label	331:4	331:25	4	case AV_CODEC_ID_H263 :
label	332:4	332:26	4	case AV_CODEC_ID_H263P :
label	333:4	333:25	4	case AV_CODEC_ID_FLV1 :
label	334:4	334:25	4	case AV_CODEC_ID_RV10 :
label	335:4	335:25	4	case AV_CODEC_ID_RV20 :
if	336:8	337:62	4	(CONFIG_H263_ENCODER)
cond	336:12	336:12	5	CONFIG_H263_ENCODER
water	336:12	0:0	6	CONFIG_H263_ENCODER
stmts	337:12	337:62	5	
call	337:12	337:61	6	ff_h263_encode_mb
arg	337:30	337:31	7	s
water	337:30	0:0	8	s
arg	337:33	337:41	7	s->block
water	337:33	0:0	8	s
op	337:34	0:0	8	->
water	337:36	0:0	8	block
arg	337:43	337:51	7	motion_x
water	337:43	0:0	8	motion_x
arg	337:53	337:61	7	motion_y
water	337:53	0:0	8	motion_y
water	337:62	0:0	6	;
break	338:8	338:13	4	
label	339:4	339:26	4	case AV_CODEC_ID_MJPEG :
label	340:4	340:24	4	case AV_CODEC_ID_AMV :
if	341:8	342:43	4	(CONFIG_MJPEG_ENCODER)
cond	341:12	341:12	5	CONFIG_MJPEG_ENCODER
water	341:12	0:0	6	CONFIG_MJPEG_ENCODER
stmts	342:12	342:43	5	
call	342:12	342:42	6	ff_mjpeg_encode_mb
arg	342:31	342:32	7	s
water	342:31	0:0	8	s
arg	342:34	342:42	7	s->block
water	342:34	0:0	8	s
op	342:35	0:0	8	->
water	342:37	0:0	8	block
water	342:43	0:0	6	;
break	343:8	343:13	4	
label	344:4	344:11	4	default :
call	345:8	345:20	4	av_assert1
arg	345:19	345:20	5	0
water	345:19	0:0	6	0
water	345:21	0:0	4	;
water	346:4	0:0	4	}
