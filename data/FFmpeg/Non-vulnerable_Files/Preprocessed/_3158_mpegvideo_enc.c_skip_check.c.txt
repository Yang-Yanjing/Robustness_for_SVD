func	1:0	36:0	0	static int	skip_check
params	1:21	0:0	1	
param	1:22	1:39	2	MpegEncContext *	s
param	1:41	1:51	2	Picture *	p
param	1:53	1:65	2	Picture *	ref
stmnts	0:0	35:12	1	
decl	3:4	3:19	2	int	x
water	3:9	0:0	2	,
decl	3:4	3:19	2	int	y
water	3:12	0:0	2	,
decl	3:4	3:19	2	int	plane
decl	4:4	4:17	2	int	score
op	4:14	0:0	2	=
water	4:16	0:0	2	0
decl	5:4	5:23	2	int64_t	score64
op	5:20	0:0	2	=
water	5:22	0:0	2	0
for	6:4	24:4	2	(plane = 0 ;plane < 3;plane ++)
forinit	6:9	6:18	3	plane = 0 ;
water	6:9	0:0	4	plane
op	6:15	0:0	4	=
water	6:17	0:0	4	0
water	6:18	0:0	4	;
cond	6:20	6:28	3	plane < 3
water	6:20	0:0	4	plane
op	6:26	0:0	4	<
water	6:28	0:0	4	3
forexpr	6:31	6:36	3	plane ++
water	6:31	0:0	4	plane
op	6:36	0:0	4	++
stmts	6:40	24:4	3	
water	6:40	0:0	4	{
decl	7:8	7:48	4	const int	stride
op	7:25	0:0	4	=
water	7:27	0:0	4	p
op	7:28	0:0	4	->
water	7:30	0:0	4	f
op	7:31	0:0	4	->
water	7:33	0:0	4	linesize
op	7:41	0:0	4	[
water	7:42	0:0	4	plane
op	7:47	0:0	4	]
decl	8:8	8:36	4	const int	bw
op	8:21	0:0	4	=
water	8:23	0:0	4	plane
water	8:29	0:0	4	?
water	8:31	0:0	4	1
water	8:33	0:0	4	:
water	8:35	0:0	4	2
for	9:8	23:8	4	(y = 0 ;y < s -> mb_height * bw;y ++)
forinit	9:13	9:18	5	y = 0 ;
water	9:13	0:0	6	y
op	9:15	0:0	6	=
water	9:17	0:0	6	0
water	9:18	0:0	6	;
cond	9:20	9:39	5	y < s -> mb_height * bw
water	9:20	0:0	6	y
op	9:22	0:0	6	<
water	9:24	0:0	6	s
op	9:25	0:0	6	->
water	9:27	0:0	6	mb_height
op	9:37	0:0	6	*
water	9:39	0:0	6	bw
forexpr	9:43	9:44	5	y ++
water	9:43	0:0	6	y
op	9:44	0:0	6	++
stmts	9:48	23:8	5	
water	9:48	0:0	6	{
for	10:12	22:12	6	(x = 0 ;x < s -> mb_width * bw;x ++)
forinit	10:17	10:22	7	x = 0 ;
water	10:17	0:0	8	x
op	10:19	0:0	8	=
water	10:21	0:0	8	0
water	10:22	0:0	8	;
cond	10:24	10:42	7	x < s -> mb_width * bw
water	10:24	0:0	8	x
op	10:26	0:0	8	<
water	10:28	0:0	8	s
op	10:29	0:0	8	->
water	10:31	0:0	8	mb_width
op	10:40	0:0	8	*
water	10:42	0:0	8	bw
forexpr	10:46	10:47	7	x ++
water	10:46	0:0	8	x
op	10:47	0:0	8	++
stmts	10:51	22:12	7	
water	10:51	0:0	8	{
decl	11:16	11:44	8	int	off
op	11:24	0:0	8	=
water	11:26	0:0	8	p
op	11:27	0:0	8	->
water	11:29	0:0	8	shared
water	11:36	0:0	8	?
water	11:38	0:0	8	0
water	11:40	0:0	8	:
water	11:42	0:0	8	16
decl	12:16	12:78	8	uint8_t	*dptr
op	12:30	0:0	8	=
water	12:32	0:0	8	p
op	12:33	0:0	8	->
water	12:35	0:0	8	f
op	12:36	0:0	8	->
water	12:38	0:0	8	data
op	12:42	0:0	8	[
water	12:43	0:0	8	plane
op	12:48	0:0	8	]
op	12:50	0:0	8	+
water	12:52	0:0	8	8
op	12:54	0:0	8	*
water	12:56	0:0	8	(
water	12:57	0:0	8	x
op	12:59	0:0	8	+
water	12:61	0:0	8	y
op	12:63	0:0	8	*
water	12:65	0:0	8	stride
water	12:71	0:0	8	)
op	12:73	0:0	8	+
water	12:75	0:0	8	off
decl	13:16	13:74	8	uint8_t	*rptr
op	13:30	0:0	8	=
water	13:32	0:0	8	ref
op	13:35	0:0	8	->
water	13:37	0:0	8	f
op	13:38	0:0	8	->
water	13:40	0:0	8	data
op	13:44	0:0	8	[
water	13:45	0:0	8	plane
op	13:50	0:0	8	]
op	13:52	0:0	8	+
water	13:54	0:0	8	8
op	13:56	0:0	8	*
water	13:58	0:0	8	(
water	13:59	0:0	8	x
op	13:61	0:0	8	+
water	13:63	0:0	8	y
op	13:65	0:0	8	*
water	13:67	0:0	8	stride
water	13:73	0:0	8	)
decl	14:16	14:75	8	int	v
op	14:22	0:0	8	=
water	14:24	0:0	8	s
op	14:25	0:0	8	->
water	14:27	0:0	8	mecc
op	14:31	0:0	8	.
water	14:32	0:0	8	frame_skip_cmp
op	14:46	0:0	8	[
water	14:47	0:0	8	1
op	14:48	0:0	8	]
water	14:49	0:0	8	(
water	14:50	0:0	8	s
water	14:51	0:0	8	,
water	14:53	0:0	8	dptr
water	14:57	0:0	8	,
water	14:59	0:0	8	rptr
water	14:63	0:0	8	,
water	14:65	0:0	8	stride
water	14:71	0:0	8	,
water	14:73	0:0	8	8
water	14:74	0:0	8	)
switch	15:16	21:16	8	(FFABS (s -> avctx -> frame_skip_exp ))
cond	15:24	15:54	9	FFABS (s -> avctx -> frame_skip_exp )
call	15:24	15:54	10	FFABS
arg	15:30	15:54	11	s->avctx->frame_skip_exp
water	15:30	0:0	12	s
op	15:31	0:0	12	->
water	15:33	0:0	12	avctx
op	15:38	0:0	12	->
water	15:40	0:0	12	frame_skip_exp
stmts	15:57	21:16	9	
water	15:57	0:0	10	{
label	16:16	16:22	10	case 0 :
water	16:24	0:0	10	score
op	16:33	0:0	10	=
call	16:36	16:50	10	FFMAX
arg	16:42	16:47	11	score
water	16:42	0:0	12	score
arg	16:49	16:50	11	v
water	16:49	0:0	12	v
water	16:51	0:0	10	;
break	16:62	16:67	10	
label	17:16	17:22	10	case 1 :
water	17:24	0:0	10	score
op	17:32	0:0	10	+=
call	17:35	17:42	10	FFABS
arg	17:41	17:42	11	v
water	17:41	0:0	12	v
water	17:43	0:0	10	;
break	17:62	17:67	10	
label	18:16	18:22	10	case 2 :
water	18:24	0:0	10	score64
op	18:32	0:0	10	+=
water	18:35	0:0	10	v
op	18:37	0:0	10	*
water	18:39	0:0	10	(
water	18:40	0:0	10	int64_t
water	18:47	0:0	10	)
water	18:48	0:0	10	v
water	18:49	0:0	10	;
break	18:73	18:78	10	
label	19:16	19:22	10	case 3 :
water	19:24	0:0	10	score64
op	19:32	0:0	10	+=
call	19:35	19:59	10	FFABS
arg	19:41	19:59	11	v*(int64_t)v*v
water	19:41	0:0	12	v
op	19:43	0:0	12	*
water	19:45	0:0	12	(
water	19:46	0:0	12	int64_t
water	19:53	0:0	12	)
water	19:54	0:0	12	v
op	19:56	0:0	12	*
water	19:58	0:0	12	v
water	19:60	0:0	10	;
break	19:73	19:78	10	
label	20:16	20:22	10	case 4 :
water	20:24	0:0	10	score64
op	20:32	0:0	10	+=
water	20:35	0:0	10	(
water	20:36	0:0	10	v
op	20:38	0:0	10	*
water	20:40	0:0	10	(
water	20:41	0:0	10	int64_t
water	20:48	0:0	10	)
water	20:49	0:0	10	v
water	20:50	0:0	10	)
op	20:52	0:0	10	*
water	20:54	0:0	10	(
water	20:55	0:0	10	v
op	20:57	0:0	10	*
water	20:59	0:0	10	(
water	20:60	0:0	10	int64_t
water	20:67	0:0	10	)
water	20:68	0:0	10	v
water	20:69	0:0	10	)
water	20:70	0:0	10	;
break	20:73	20:78	10	
water	21:16	0:0	10	}
water	22:12	0:0	8	}
water	23:8	0:0	6	}
water	24:4	0:0	4	}
call	25:4	25:11	2	emms_c
water	25:12	0:0	2	;
if	26:4	27:23	2	(score)
cond	26:8	26:8	3	score
water	26:8	0:0	4	score
stmts	27:8	27:23	3	
water	27:8	0:0	4	score64
op	27:16	0:0	4	=
water	27:18	0:0	4	score
water	27:23	0:0	4	;
if	28:4	30:52	2	(s -> avctx -> frame_skip_exp < 0)
cond	28:8	28:35	3	s -> avctx -> frame_skip_exp < 0
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	avctx
op	28:16	0:0	4	->
water	28:18	0:0	4	frame_skip_exp
op	28:33	0:0	4	<
water	28:35	0:0	4	0
stmts	29:8	30:52	3	
water	29:8	0:0	4	score64
op	29:16	0:0	4	=
call	29:18	30:51	4	pow
arg	29:22	29:68	5	score64/(double)(s->mb_width*s->mb_height)
water	29:22	0:0	6	score64
op	29:30	0:0	6	/
call	29:32	29:67	6	(double)
arg	29:41	29:67	7	s->mb_width*s->mb_height
water	29:41	0:0	8	s
op	29:42	0:0	8	->
water	29:44	0:0	8	mb_width
op	29:53	0:0	8	*
water	29:55	0:0	8	s
op	29:56	0:0	8	->
water	29:58	0:0	8	mb_height
arg	30:22	30:51	5	-1.0/s->avctx->frame_skip_exp
op	30:22	0:0	6	-
water	30:23	0:0	6	1
op	30:24	0:0	6	.
water	30:25	0:0	6	0
op	30:26	0:0	6	/
water	30:27	0:0	6	s
op	30:28	0:0	6	->
water	30:30	0:0	6	avctx
op	30:35	0:0	6	->
water	30:37	0:0	6	frame_skip_exp
water	30:52	0:0	4	;
if	31:4	32:16	2	(score64 < s -> avctx -> frame_skip_threshold)
cond	31:8	31:28	3	score64 < s -> avctx -> frame_skip_threshold
water	31:8	0:0	4	score64
op	31:16	0:0	4	<
water	31:18	0:0	4	s
op	31:19	0:0	4	->
water	31:21	0:0	4	avctx
op	31:26	0:0	4	->
water	31:28	0:0	4	frame_skip_threshold
stmts	32:8	32:16	3	
return	32:8	32:16	4	1
water	32:15	0:0	5	1
if	33:4	34:16	2	(score64 < ( ( s -> avctx -> frame_skip_factor * ( int64_t ) s -> lambda ) >> 8 ))
cond	33:8	33:74	3	score64 < ( ( s -> avctx -> frame_skip_factor * ( int64_t ) s -> lambda ) >> 8 )
water	33:8	0:0	4	score64
op	33:16	0:0	4	<
water	33:18	0:0	4	(
water	33:19	0:0	4	(
water	33:20	0:0	4	s
op	33:21	0:0	4	->
water	33:23	0:0	4	avctx
op	33:28	0:0	4	->
water	33:30	0:0	4	frame_skip_factor
op	33:48	0:0	4	*
water	33:50	0:0	4	(
water	33:51	0:0	4	int64_t
water	33:58	0:0	4	)
water	33:59	0:0	4	s
op	33:60	0:0	4	->
water	33:62	0:0	4	lambda
water	33:68	0:0	4	)
op	33:70	0:0	4	>>
water	33:73	0:0	4	8
water	33:74	0:0	4	)
stmts	34:8	34:16	3	
return	34:8	34:16	4	1
water	34:15	0:0	5	1
return	35:4	35:12	2	0
water	35:11	0:0	3	0
