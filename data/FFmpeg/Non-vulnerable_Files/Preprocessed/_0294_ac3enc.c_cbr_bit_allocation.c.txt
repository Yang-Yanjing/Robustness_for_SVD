func	1:0	36:0	0	static int	cbr_bit_allocation
params	1:29	0:0	1	
param	1:30	1:49	2	AC3EncodeContext *	s
stmnts	0:0	35:12	1	
decl	3:4	3:10	2	int	ch
decl	4:4	4:17	2	int	bits_left
decl	5:4	5:28	2	int	snr_offset
water	5:18	0:0	2	,
decl	5:4	5:28	2	int	snr_incr
water	6:4	0:0	2	bits_left
op	6:14	0:0	2	=
water	6:16	0:0	2	8
op	6:18	0:0	2	*
water	6:20	0:0	2	s
op	6:21	0:0	2	->
water	6:23	0:0	2	frame_size
op	6:34	0:0	2	-
water	6:36	0:0	2	(
water	6:37	0:0	2	s
op	6:38	0:0	2	->
water	6:40	0:0	2	frame_bits
op	6:51	0:0	2	+
water	6:53	0:0	2	s
op	6:54	0:0	2	->
water	6:56	0:0	2	exponent_bits
water	6:69	0:0	2	)
water	6:70	0:0	2	;
if	7:4	8:30	2	(bits_left < 0)
cond	7:8	7:20	3	bits_left < 0
water	7:8	0:0	4	bits_left
op	7:18	0:0	4	<
water	7:20	0:0	4	0
stmts	8:8	8:30	3	
return	8:8	8:30	4	AVERROR(EINVAL)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	EINVAL
water	8:23	0:0	7	EINVAL
water	9:4	0:0	2	snr_offset
op	9:15	0:0	2	=
water	9:17	0:0	2	s
op	9:18	0:0	2	->
water	9:20	0:0	2	coarse_snr_offset
op	9:38	0:0	2	<<
water	9:41	0:0	2	4
water	9:42	0:0	2	;
if	12:4	15:4	2	(( snr_offset | s -> fine_snr_offset [ 1 ] ) == 1023)
cond	12:8	12:48	3	( snr_offset | s -> fine_snr_offset [ 1 ] ) == 1023
water	12:8	0:0	4	(
water	12:9	0:0	4	snr_offset
op	12:20	0:0	4	|
water	12:22	0:0	4	s
op	12:23	0:0	4	->
water	12:25	0:0	4	fine_snr_offset
op	12:40	0:0	4	[
water	12:41	0:0	4	1
op	12:42	0:0	4	]
water	12:43	0:0	4	)
op	12:45	0:0	4	==
water	12:48	0:0	4	1023
stmts	12:54	15:4	3	
water	12:54	0:0	4	{
if	13:8	14:20	4	(bit_alloc (s ,1023 ) <= bits_left)
cond	13:12	13:34	5	bit_alloc (s ,1023 ) <= bits_left
call	13:12	13:29	6	bit_alloc
arg	13:22	13:23	7	s
water	13:22	0:0	8	s
arg	13:25	13:29	7	1023
water	13:25	0:0	8	1023
op	13:31	0:0	6	<=
water	13:34	0:0	6	bits_left
stmts	14:12	14:20	5	
return	14:12	14:20	6	0
water	14:19	0:0	7	0
water	15:4	0:0	4	}
while	16:4	19:4	2	(snr_offset >= 0 &&bit_alloc (s ,snr_offset ) > bits_left)
cond	16:11	17:38	3	snr_offset >= 0 &&bit_alloc (s ,snr_offset ) > bits_left
water	16:11	0:0	4	snr_offset
op	16:22	0:0	4	>=
water	16:25	0:0	4	0
op	16:27	0:0	4	&&
call	17:11	17:34	4	bit_alloc
arg	17:21	17:22	5	s
water	17:21	0:0	6	s
arg	17:24	17:34	5	snr_offset
water	17:24	0:0	6	snr_offset
op	17:36	0:0	4	>
water	17:38	0:0	4	bits_left
stmts	17:49	19:4	3	
water	17:49	0:0	4	{
water	18:8	0:0	4	snr_offset
op	18:19	0:0	4	-=
water	18:22	0:0	4	64
water	18:24	0:0	4	;
water	19:4	0:0	4	}
if	20:4	21:30	2	(snr_offset < 0)
cond	20:8	20:21	3	snr_offset < 0
water	20:8	0:0	4	snr_offset
op	20:19	0:0	4	<
water	20:21	0:0	4	0
stmts	21:8	21:30	3	
return	21:8	21:30	4	AVERROR(EINVAL)
call	21:15	21:29	5	AVERROR
arg	21:23	21:29	6	EINVAL
water	21:23	0:0	7	EINVAL
call	22:4	22:51	2	FFSWAP
arg	22:11	22:20	3	uint8_t*
water	22:11	0:0	4	uint8_t
op	22:19	0:0	4	*
arg	22:22	22:35	3	s->bap_buffer
water	22:22	0:0	4	s
op	22:23	0:0	4	->
water	22:25	0:0	4	bap_buffer
arg	22:37	22:51	3	s->bap1_buffer
water	22:37	0:0	4	s
op	22:38	0:0	4	->
water	22:40	0:0	4	bap1_buffer
water	22:52	0:0	2	;
for	23:4	29:4	2	(snr_incr = 64 ;snr_incr > 0;snr_incr >>= 2)
forinit	23:9	23:22	3	snr_incr = 64 ;
water	23:9	0:0	4	snr_incr
op	23:18	0:0	4	=
water	23:20	0:0	4	64
water	23:22	0:0	4	;
cond	23:24	23:35	3	snr_incr > 0
water	23:24	0:0	4	snr_incr
op	23:33	0:0	4	>
water	23:35	0:0	4	0
forexpr	23:38	23:51	3	snr_incr >>= 2
water	23:38	0:0	4	snr_incr
op	23:47	0:0	4	>>=
water	23:51	0:0	4	2
stmts	23:54	29:4	3	
water	23:54	0:0	4	{
while	24:8	28:8	4	(snr_offset + snr_incr <= 1023 &&bit_alloc (s ,snr_offset + snr_incr ) <= bits_left)
cond	24:15	25:54	5	snr_offset + snr_incr <= 1023 &&bit_alloc (s ,snr_offset + snr_incr ) <= bits_left
water	24:15	0:0	6	snr_offset
op	24:26	0:0	6	+
water	24:28	0:0	6	snr_incr
op	24:37	0:0	6	<=
water	24:40	0:0	6	1023
op	24:45	0:0	6	&&
call	25:15	25:49	6	bit_alloc
arg	25:25	25:26	7	s
water	25:25	0:0	8	s
arg	25:28	25:49	7	snr_offset+snr_incr
water	25:28	0:0	8	snr_offset
op	25:39	0:0	8	+
water	25:41	0:0	8	snr_incr
op	25:51	0:0	6	<=
water	25:54	0:0	6	bits_left
stmts	25:65	28:8	5	
water	25:65	0:0	6	{
water	26:12	0:0	6	snr_offset
op	26:23	0:0	6	+=
water	26:26	0:0	6	snr_incr
water	26:34	0:0	6	;
call	27:12	27:59	6	FFSWAP
arg	27:19	27:28	7	uint8_t*
water	27:19	0:0	8	uint8_t
op	27:27	0:0	8	*
arg	27:30	27:43	7	s->bap_buffer
water	27:30	0:0	8	s
op	27:31	0:0	8	->
water	27:33	0:0	8	bap_buffer
arg	27:45	27:59	7	s->bap1_buffer
water	27:45	0:0	8	s
op	27:46	0:0	8	->
water	27:48	0:0	8	bap1_buffer
water	27:60	0:0	6	;
water	28:8	0:0	6	}
water	29:4	0:0	4	}
call	30:4	30:51	2	FFSWAP
arg	30:11	30:20	3	uint8_t*
water	30:11	0:0	4	uint8_t
op	30:19	0:0	4	*
arg	30:22	30:35	3	s->bap_buffer
water	30:22	0:0	4	s
op	30:23	0:0	4	->
water	30:25	0:0	4	bap_buffer
arg	30:37	30:51	3	s->bap1_buffer
water	30:37	0:0	4	s
op	30:38	0:0	4	->
water	30:40	0:0	4	bap1_buffer
water	30:52	0:0	2	;
call	31:4	31:21	2	reset_block_bap
arg	31:20	31:21	3	s
water	31:20	0:0	4	s
water	31:22	0:0	2	;
water	32:4	0:0	2	s
op	32:5	0:0	2	->
water	32:7	0:0	2	coarse_snr_offset
op	32:25	0:0	2	=
water	32:27	0:0	2	snr_offset
op	32:38	0:0	2	>>
water	32:41	0:0	2	4
water	32:42	0:0	2	;
for	33:4	34:49	2	(ch = ! s -> cpl_on ;ch <= s -> channels;ch ++)
forinit	33:9	33:24	3	ch = ! s -> cpl_on ;
water	33:9	0:0	4	ch
op	33:12	0:0	4	=
op	33:14	0:0	4	!
water	33:15	0:0	4	s
op	33:16	0:0	4	->
water	33:18	0:0	4	cpl_on
water	33:24	0:0	4	;
cond	33:26	33:35	3	ch <= s -> channels
water	33:26	0:0	4	ch
op	33:29	0:0	4	<=
water	33:32	0:0	4	s
op	33:33	0:0	4	->
water	33:35	0:0	4	channels
forexpr	33:45	33:47	3	ch ++
water	33:45	0:0	4	ch
op	33:47	0:0	4	++
stmts	34:8	34:49	3	
water	34:8	0:0	4	s
op	34:9	0:0	4	->
water	34:11	0:0	4	fine_snr_offset
op	34:26	0:0	4	[
water	34:27	0:0	4	ch
op	34:29	0:0	4	]
op	34:31	0:0	4	=
water	34:33	0:0	4	snr_offset
op	34:44	0:0	4	&
water	34:46	0:0	4	0
water	34:47	0:0	4	xF
water	34:49	0:0	4	;
return	35:4	35:12	2	0
water	35:11	0:0	3	0
