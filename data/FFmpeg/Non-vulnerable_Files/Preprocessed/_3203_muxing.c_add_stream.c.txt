func	1:0	77:0	0	static void	add_stream
params	1:22	0:0	1	
param	1:23	1:40	2	OutputStream *	ost
param	1:42	1:61	2	AVFormatContext *	oc
param	2:23	2:38	2	AVCodec * *	codec
param	3:23	3:46	2	enum AVCodecID	codec_id
stmnts	0:0	76:47	1	
decl	5:4	5:21	2	AVCodecContext	*c
decl	6:4	6:9	2	int	i
op	8:4	0:0	2	*
water	8:5	0:0	2	codec
op	8:11	0:0	2	=
call	8:13	8:42	2	avcodec_find_encoder
arg	8:34	8:42	3	codec_id
water	8:34	0:0	4	codec_id
water	8:43	0:0	2	;
if	9:4	13:4	2	(! ( * codec ))
cond	9:8	9:16	3	! ( * codec )
op	9:8	0:0	4	!
water	9:9	0:0	4	(
op	9:10	0:0	4	*
water	9:11	0:0	4	codec
water	9:16	0:0	4	)
stmts	9:19	13:4	3	
water	9:19	0:0	4	{
call	10:8	11:42	4	fprintf
arg	10:16	10:22	5	stderr
water	10:16	0:0	6	stderr
arg	10:24	10:59	5	"Could not find encoder for '%s'\n"
water	10:24	0:0	6	"Could not find encoder for '%s'\n"
arg	11:16	11:42	5	avcodec_get_name(codec_id)
call	11:16	11:41	6	avcodec_get_name
arg	11:33	11:41	7	codec_id
water	11:33	0:0	8	codec_id
water	11:43	0:0	4	;
call	12:8	12:14	4	exit
arg	12:13	12:14	5	1
water	12:13	0:0	6	1
water	12:15	0:0	4	;
water	13:4	0:0	4	}
water	14:4	0:0	2	ost
op	14:7	0:0	2	->
water	14:9	0:0	2	st
op	14:12	0:0	2	=
call	14:14	14:44	2	avformat_new_stream
arg	14:34	14:36	3	oc
water	14:34	0:0	4	oc
arg	14:38	14:44	3	*codec
op	14:38	0:0	4	*
water	14:39	0:0	4	codec
water	14:45	0:0	2	;
if	15:4	18:4	2	(! ost -> st)
cond	15:8	15:14	3	! ost -> st
op	15:8	0:0	4	!
water	15:9	0:0	4	ost
op	15:12	0:0	4	->
water	15:14	0:0	4	st
stmts	15:18	18:4	3	
water	15:18	0:0	4	{
call	16:8	16:53	4	fprintf
arg	16:16	16:22	5	stderr
water	16:16	0:0	6	stderr
arg	16:24	16:53	5	"Could not allocate stream\n"
water	16:24	0:0	6	"Could not allocate stream\n"
water	16:54	0:0	4	;
call	17:8	17:14	4	exit
arg	17:13	17:14	5	1
water	17:13	0:0	6	1
water	17:15	0:0	4	;
water	18:4	0:0	4	}
water	19:4	0:0	2	ost
op	19:7	0:0	2	->
water	19:9	0:0	2	st
op	19:11	0:0	2	->
water	19:13	0:0	2	id
op	19:16	0:0	2	=
water	19:18	0:0	2	oc
op	19:20	0:0	2	->
water	19:22	0:0	2	nb_streams
op	19:32	0:0	2	-
water	19:33	0:0	2	1
water	19:34	0:0	2	;
water	20:4	0:0	2	c
op	20:6	0:0	2	=
water	20:8	0:0	2	ost
op	20:11	0:0	2	->
water	20:13	0:0	2	st
op	20:15	0:0	2	->
water	20:17	0:0	2	codec
water	20:22	0:0	2	;
switch	21:4	73:4	2	(( * codec ) -> type)
cond	21:12	21:22	3	( * codec ) -> type
water	21:12	0:0	4	(
op	21:13	0:0	4	*
water	21:14	0:0	4	codec
water	21:19	0:0	4	)
op	21:20	0:0	4	->
water	21:22	0:0	4	type
stmts	21:28	73:4	3	
water	21:28	0:0	4	{
label	22:4	22:27	4	case AVMEDIA_TYPE_AUDIO :
water	23:8	0:0	4	c
op	23:9	0:0	4	->
water	23:11	0:0	4	sample_fmt
op	23:23	0:0	4	=
water	23:25	0:0	4	(
op	23:26	0:0	4	*
water	23:27	0:0	4	codec
water	23:32	0:0	4	)
op	23:33	0:0	4	->
water	23:35	0:0	4	sample_fmts
water	23:47	0:0	4	?
water	24:12	0:0	4	(
op	24:13	0:0	4	*
water	24:14	0:0	4	codec
water	24:19	0:0	4	)
op	24:20	0:0	4	->
water	24:22	0:0	4	sample_fmts
op	24:33	0:0	4	[
water	24:34	0:0	4	0
op	24:35	0:0	4	]
water	24:37	0:0	4	:
water	24:39	0:0	4	AV_SAMPLE_FMT_FLTP
water	24:57	0:0	4	;
water	25:8	0:0	4	c
op	25:9	0:0	4	->
water	25:11	0:0	4	bit_rate
op	25:23	0:0	4	=
water	25:25	0:0	4	64000
water	25:30	0:0	4	;
water	26:8	0:0	4	c
op	26:9	0:0	4	->
water	26:11	0:0	4	sample_rate
op	26:23	0:0	4	=
water	26:25	0:0	4	44100
water	26:30	0:0	4	;
if	27:8	33:8	4	(( * codec ) -> supported_samplerates)
cond	27:12	27:22	5	( * codec ) -> supported_samplerates
water	27:12	0:0	6	(
op	27:13	0:0	6	*
water	27:14	0:0	6	codec
water	27:19	0:0	6	)
op	27:20	0:0	6	->
water	27:22	0:0	6	supported_samplerates
stmts	27:45	33:8	5	
water	27:45	0:0	6	{
water	28:12	0:0	6	c
op	28:13	0:0	6	->
water	28:15	0:0	6	sample_rate
op	28:27	0:0	6	=
water	28:29	0:0	6	(
op	28:30	0:0	6	*
water	28:31	0:0	6	codec
water	28:36	0:0	6	)
op	28:37	0:0	6	->
water	28:39	0:0	6	supported_samplerates
op	28:60	0:0	6	[
water	28:61	0:0	6	0
op	28:62	0:0	6	]
water	28:63	0:0	6	;
for	29:12	32:12	6	(i = 0 ;( * codec ) -> supported_samplerates [ i ];i ++)
forinit	29:17	29:22	7	i = 0 ;
water	29:17	0:0	8	i
op	29:19	0:0	8	=
water	29:21	0:0	8	0
water	29:22	0:0	8	;
cond	29:24	29:57	7	( * codec ) -> supported_samplerates [ i ]
water	29:24	0:0	8	(
op	29:25	0:0	8	*
water	29:26	0:0	8	codec
water	29:31	0:0	8	)
op	29:32	0:0	8	->
water	29:34	0:0	8	supported_samplerates
op	29:55	0:0	8	[
water	29:56	0:0	8	i
op	29:57	0:0	8	]
forexpr	29:60	29:61	7	i ++
water	29:60	0:0	8	i
op	29:61	0:0	8	++
stmts	29:65	32:12	7	
water	29:65	0:0	8	{
if	30:16	31:42	8	(( * codec ) -> supported_samplerates [ i ] == 44100)
cond	30:20	30:58	9	( * codec ) -> supported_samplerates [ i ] == 44100
water	30:20	0:0	10	(
op	30:21	0:0	10	*
water	30:22	0:0	10	codec
water	30:27	0:0	10	)
op	30:28	0:0	10	->
water	30:30	0:0	10	supported_samplerates
op	30:51	0:0	10	[
water	30:52	0:0	10	i
op	30:53	0:0	10	]
op	30:55	0:0	10	==
water	30:58	0:0	10	44100
stmts	31:20	31:42	9	
water	31:20	0:0	10	c
op	31:21	0:0	10	->
water	31:23	0:0	10	sample_rate
op	31:35	0:0	10	=
water	31:37	0:0	10	44100
water	31:42	0:0	10	;
water	32:12	0:0	8	}
water	33:8	0:0	6	}
water	34:8	0:0	4	c
op	34:9	0:0	4	->
water	34:11	0:0	4	channels
op	34:27	0:0	4	=
call	34:29	34:80	4	av_get_channel_layout_nb_channels
arg	34:63	34:80	5	c->channel_layout
water	34:63	0:0	6	c
op	34:64	0:0	6	->
water	34:66	0:0	6	channel_layout
water	34:81	0:0	4	;
water	35:8	0:0	4	c
op	35:9	0:0	4	->
water	35:11	0:0	4	channel_layout
op	35:26	0:0	4	=
water	35:28	0:0	4	AV_CH_LAYOUT_STEREO
water	35:47	0:0	4	;
if	36:8	42:8	4	(( * codec ) -> channel_layouts)
cond	36:12	36:22	5	( * codec ) -> channel_layouts
water	36:12	0:0	6	(
op	36:13	0:0	6	*
water	36:14	0:0	6	codec
water	36:19	0:0	6	)
op	36:20	0:0	6	->
water	36:22	0:0	6	channel_layouts
stmts	36:39	42:8	5	
water	36:39	0:0	6	{
water	37:12	0:0	6	c
op	37:13	0:0	6	->
water	37:15	0:0	6	channel_layout
op	37:30	0:0	6	=
water	37:32	0:0	6	(
op	37:33	0:0	6	*
water	37:34	0:0	6	codec
water	37:39	0:0	6	)
op	37:40	0:0	6	->
water	37:42	0:0	6	channel_layouts
op	37:57	0:0	6	[
water	37:58	0:0	6	0
op	37:59	0:0	6	]
water	37:60	0:0	6	;
for	38:12	41:12	6	(i = 0 ;( * codec ) -> channel_layouts [ i ];i ++)
forinit	38:17	38:22	7	i = 0 ;
water	38:17	0:0	8	i
op	38:19	0:0	8	=
water	38:21	0:0	8	0
water	38:22	0:0	8	;
cond	38:24	38:51	7	( * codec ) -> channel_layouts [ i ]
water	38:24	0:0	8	(
op	38:25	0:0	8	*
water	38:26	0:0	8	codec
water	38:31	0:0	8	)
op	38:32	0:0	8	->
water	38:34	0:0	8	channel_layouts
op	38:49	0:0	8	[
water	38:50	0:0	8	i
op	38:51	0:0	8	]
forexpr	38:54	38:55	7	i ++
water	38:54	0:0	8	i
op	38:55	0:0	8	++
stmts	38:59	41:12	7	
water	38:59	0:0	8	{
if	39:16	40:59	8	(( * codec ) -> channel_layouts [ i ] == AV_CH_LAYOUT_STEREO)
cond	39:20	39:52	9	( * codec ) -> channel_layouts [ i ] == AV_CH_LAYOUT_STEREO
water	39:20	0:0	10	(
op	39:21	0:0	10	*
water	39:22	0:0	10	codec
water	39:27	0:0	10	)
op	39:28	0:0	10	->
water	39:30	0:0	10	channel_layouts
op	39:45	0:0	10	[
water	39:46	0:0	10	i
op	39:47	0:0	10	]
op	39:49	0:0	10	==
water	39:52	0:0	10	AV_CH_LAYOUT_STEREO
stmts	40:20	40:59	9	
water	40:20	0:0	10	c
op	40:21	0:0	10	->
water	40:23	0:0	10	channel_layout
op	40:38	0:0	10	=
water	40:40	0:0	10	AV_CH_LAYOUT_STEREO
water	40:59	0:0	10	;
water	41:12	0:0	8	}
water	42:8	0:0	6	}
water	43:8	0:0	4	c
op	43:9	0:0	4	->
water	43:11	0:0	4	channels
op	43:27	0:0	4	=
call	43:29	43:80	4	av_get_channel_layout_nb_channels
arg	43:63	43:80	5	c->channel_layout
water	43:63	0:0	6	c
op	43:64	0:0	6	->
water	43:66	0:0	6	channel_layout
water	43:81	0:0	4	;
water	44:8	0:0	4	ost
op	44:11	0:0	4	->
water	44:13	0:0	4	st
op	44:15	0:0	4	->
water	44:17	0:0	4	time_base
op	44:27	0:0	4	=
water	44:29	0:0	4	(
water	44:30	0:0	4	AVRational
water	44:40	0:0	4	)
water	44:41	0:0	4	{
water	44:43	0:0	4	1
water	44:44	0:0	4	,
water	44:46	0:0	4	c
op	44:47	0:0	4	->
water	44:49	0:0	4	sample_rate
water	44:61	0:0	4	}
water	44:62	0:0	4	;
break	45:8	45:13	4	
label	46:4	46:27	4	case AVMEDIA_TYPE_VIDEO :
water	47:8	0:0	4	c
op	47:9	0:0	4	->
water	47:11	0:0	4	codec_id
op	47:20	0:0	4	=
water	47:22	0:0	4	codec_id
water	47:30	0:0	4	;
water	48:8	0:0	4	c
op	48:9	0:0	4	->
water	48:11	0:0	4	bit_rate
op	48:20	0:0	4	=
water	48:22	0:0	4	400000
water	48:28	0:0	4	;
water	50:8	0:0	4	c
op	50:9	0:0	4	->
water	50:11	0:0	4	width
op	50:20	0:0	4	=
water	50:22	0:0	4	352
water	50:25	0:0	4	;
water	51:8	0:0	4	c
op	51:9	0:0	4	->
water	51:11	0:0	4	height
op	51:20	0:0	4	=
water	51:22	0:0	4	288
water	51:25	0:0	4	;
water	56:8	0:0	4	ost
op	56:11	0:0	4	->
water	56:13	0:0	4	st
op	56:15	0:0	4	->
water	56:17	0:0	4	time_base
op	56:27	0:0	4	=
water	56:29	0:0	4	(
water	56:30	0:0	4	AVRational
water	56:40	0:0	4	)
water	56:41	0:0	4	{
water	56:43	0:0	4	1
water	56:44	0:0	4	,
water	56:46	0:0	4	STREAM_FRAME_RATE
water	56:64	0:0	4	}
water	56:65	0:0	4	;
water	57:8	0:0	4	c
op	57:9	0:0	4	->
water	57:11	0:0	4	time_base
op	57:27	0:0	4	=
water	57:29	0:0	4	ost
op	57:32	0:0	4	->
water	57:34	0:0	4	st
op	57:36	0:0	4	->
water	57:38	0:0	4	time_base
water	57:47	0:0	4	;
water	58:8	0:0	4	c
op	58:9	0:0	4	->
water	58:11	0:0	4	gop_size
op	58:25	0:0	4	=
water	58:27	0:0	4	12
water	58:29	0:0	4	;
water	59:8	0:0	4	c
op	59:9	0:0	4	->
water	59:11	0:0	4	pix_fmt
op	59:25	0:0	4	=
water	59:27	0:0	4	STREAM_PIX_FMT
water	59:41	0:0	4	;
if	60:8	63:8	4	(c -> codec_id == AV_CODEC_ID_MPEG2VIDEO)
cond	60:12	60:27	5	c -> codec_id == AV_CODEC_ID_MPEG2VIDEO
water	60:12	0:0	6	c
op	60:13	0:0	6	->
water	60:15	0:0	6	codec_id
op	60:24	0:0	6	==
water	60:27	0:0	6	AV_CODEC_ID_MPEG2VIDEO
stmts	60:51	63:8	5	
water	60:51	0:0	6	{
water	62:12	0:0	6	c
op	62:13	0:0	6	->
water	62:15	0:0	6	max_b_frames
op	62:28	0:0	6	=
water	62:30	0:0	6	2
water	62:31	0:0	6	;
water	63:8	0:0	6	}
if	64:8	69:8	4	(c -> codec_id == AV_CODEC_ID_MPEG1VIDEO)
cond	64:12	64:27	5	c -> codec_id == AV_CODEC_ID_MPEG1VIDEO
water	64:12	0:0	6	c
op	64:13	0:0	6	->
water	64:15	0:0	6	codec_id
op	64:24	0:0	6	==
water	64:27	0:0	6	AV_CODEC_ID_MPEG1VIDEO
stmts	64:51	69:8	5	
water	64:51	0:0	6	{
water	68:12	0:0	6	c
op	68:13	0:0	6	->
water	68:15	0:0	6	mb_decision
op	68:27	0:0	6	=
water	68:29	0:0	6	2
water	68:30	0:0	6	;
water	69:8	0:0	6	}
break	70:4	70:9	4	
label	71:4	71:11	4	default :
break	72:8	72:13	4	
water	73:4	0:0	4	}
if	75:4	76:47	2	(oc -> oformat -> flags & AVFMT_GLOBALHEADER)
cond	75:8	75:29	3	oc -> oformat -> flags & AVFMT_GLOBALHEADER
water	75:8	0:0	4	oc
op	75:10	0:0	4	->
water	75:12	0:0	4	oformat
op	75:19	0:0	4	->
water	75:21	0:0	4	flags
op	75:27	0:0	4	&
water	75:29	0:0	4	AVFMT_GLOBALHEADER
stmts	76:8	76:47	3	
water	76:8	0:0	4	c
op	76:9	0:0	4	->
water	76:11	0:0	4	flags
op	76:17	0:0	4	|=
water	76:20	0:0	4	AV_CODEC_FLAG_GLOBAL_HEADER
water	76:47	0:0	4	;
