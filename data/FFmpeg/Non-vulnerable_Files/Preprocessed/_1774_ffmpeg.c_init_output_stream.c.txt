func	1:0	161:0	0	static int	init_output_stream
params	1:29	0:0	1	
param	1:30	1:47	2	OutputStream *	ost
param	1:49	1:60	2	char *	error
param	1:62	1:75	2	int	error_len
stmnts	0:0	160:14	1	
decl	3:4	3:15	2	int	ret
op	3:12	0:0	2	=
water	3:14	0:0	2	0
if	4:4	108:4	2	(ost -> encoding_needed)
cond	4:8	4:13	3	ost -> encoding_needed
water	4:8	0:0	4	ost
op	4:11	0:0	4	->
water	4:13	0:0	4	encoding_needed
stmts	4:30	108:4	3	
water	4:30	0:0	4	{
decl	5:8	5:38	4	AVCodec	*codec
op	5:28	0:0	4	=
water	5:30	0:0	4	ost
op	5:33	0:0	4	->
water	5:35	0:0	4	enc
decl	6:8	6:34	4	AVCodecContext	*dec
op	6:28	0:0	4	=
water	6:30	0:0	4	NULL
decl	7:8	7:24	4	InputStream	*ist
water	8:8	0:0	4	ret
op	8:12	0:0	4	=
call	8:14	8:43	4	init_output_stream_encode
arg	8:40	8:43	5	ost
water	8:40	0:0	6	ost
water	8:44	0:0	4	;
if	9:8	10:22	4	(ret < 0)
cond	9:12	9:18	5	ret < 0
water	9:12	0:0	6	ret
op	9:16	0:0	6	<
water	9:18	0:0	6	0
stmts	10:12	10:22	5	
return	10:12	10:22	6	ret
water	10:19	0:0	7	ret
if	11:8	12:30	4	(( ist =get_input_stream (ost ) ))
cond	11:12	11:40	5	( ist =get_input_stream (ost ) )
water	11:12	0:0	6	(
water	11:13	0:0	6	ist
op	11:17	0:0	6	=
call	11:19	11:39	6	get_input_stream
arg	11:36	11:39	7	ost
water	11:36	0:0	8	ost
water	11:40	0:0	6	)
stmts	12:12	12:30	5	
water	12:12	0:0	6	dec
op	12:16	0:0	6	=
water	12:18	0:0	6	ist
op	12:21	0:0	6	->
water	12:23	0:0	6	dec_ctx
water	12:30	0:0	6	;
if	13:8	20:8	4	(dec && dec -> subtitle_header)
cond	13:12	13:24	5	dec && dec -> subtitle_header
water	13:12	0:0	6	dec
op	13:16	0:0	6	&&
water	13:19	0:0	6	dec
op	13:22	0:0	6	->
water	13:24	0:0	6	subtitle_header
stmts	13:41	20:8	5	
water	13:41	0:0	6	{
water	15:12	0:0	6	ost
op	15:15	0:0	6	->
water	15:17	0:0	6	enc_ctx
op	15:24	0:0	6	->
water	15:26	0:0	6	subtitle_header
op	15:42	0:0	6	=
call	15:44	15:84	6	av_mallocz
arg	15:55	15:84	7	dec->subtitle_header_size+1
water	15:55	0:0	8	dec
op	15:58	0:0	8	->
water	15:60	0:0	8	subtitle_header_size
op	15:81	0:0	8	+
water	15:83	0:0	8	1
water	15:85	0:0	6	;
if	16:12	17:38	6	(! ost -> enc_ctx -> subtitle_header)
cond	16:16	16:31	7	! ost -> enc_ctx -> subtitle_header
op	16:16	0:0	8	!
water	16:17	0:0	8	ost
op	16:20	0:0	8	->
water	16:22	0:0	8	enc_ctx
op	16:29	0:0	8	->
water	16:31	0:0	8	subtitle_header
stmts	17:16	17:38	7	
return	17:16	17:38	8	AVERROR(ENOMEM)
call	17:23	17:37	9	AVERROR
arg	17:31	17:37	10	ENOMEM
water	17:31	0:0	11	ENOMEM
call	18:12	18:97	6	memcpy
arg	18:19	18:48	7	ost->enc_ctx->subtitle_header
water	18:19	0:0	8	ost
op	18:22	0:0	8	->
water	18:24	0:0	8	enc_ctx
op	18:31	0:0	8	->
water	18:33	0:0	8	subtitle_header
arg	18:50	18:70	7	dec->subtitle_header
water	18:50	0:0	8	dec
op	18:53	0:0	8	->
water	18:55	0:0	8	subtitle_header
arg	18:72	18:97	7	dec->subtitle_header_size
water	18:72	0:0	8	dec
op	18:75	0:0	8	->
water	18:77	0:0	8	subtitle_header_size
water	18:98	0:0	6	;
water	19:12	0:0	6	ost
op	19:15	0:0	6	->
water	19:17	0:0	6	enc_ctx
op	19:24	0:0	6	->
water	19:26	0:0	6	subtitle_header_size
op	19:47	0:0	6	=
water	19:49	0:0	6	dec
op	19:52	0:0	6	->
water	19:54	0:0	6	subtitle_header_size
water	19:74	0:0	6	;
water	20:8	0:0	6	}
if	21:8	22:65	4	(!av_dict_get (ost -> encoder_opts ,"threads" ,NULL ,0 ))
cond	21:12	21:62	5	!av_dict_get (ost -> encoder_opts ,"threads" ,NULL ,0 )
op	21:12	0:0	6	!
call	21:13	21:62	6	av_dict_get
arg	21:25	21:42	7	ost->encoder_opts
water	21:25	0:0	8	ost
op	21:28	0:0	8	->
water	21:30	0:0	8	encoder_opts
arg	21:44	21:53	7	"threads"
water	21:44	0:0	8	"threads"
arg	21:55	21:59	7	NULL
water	21:55	0:0	8	NULL
arg	21:61	21:62	7	0
water	21:61	0:0	8	0
stmts	22:12	22:65	5	
call	22:12	22:64	6	av_dict_set
arg	22:24	22:42	7	&ost->encoder_opts
op	22:24	0:0	8	&
water	22:25	0:0	8	ost
op	22:28	0:0	8	->
water	22:30	0:0	8	encoder_opts
arg	22:44	22:53	7	"threads"
water	22:44	0:0	8	"threads"
arg	22:55	22:61	7	"auto"
water	22:55	0:0	8	"auto"
arg	22:63	22:64	7	0
water	22:63	0:0	8	0
water	22:65	0:0	6	;
if	23:8	27:61	4	(ost -> enc -> type == AVMEDIA_TYPE_AUDIO && ! codec -> defaults && !av_dict_get (ost -> encoder_opts ,"b" ,NULL ,0 ) && !av_dict_get (ost -> encoder_opts ,"ab" ,NULL ,0 ))
cond	23:12	26:57	5	ost -> enc -> type == AVMEDIA_TYPE_AUDIO && ! codec -> defaults && !av_dict_get (ost -> encoder_opts ,"b" ,NULL ,0 ) && !av_dict_get (ost -> encoder_opts ,"ab" ,NULL ,0 )
water	23:12	0:0	6	ost
op	23:15	0:0	6	->
water	23:17	0:0	6	enc
op	23:20	0:0	6	->
water	23:22	0:0	6	type
op	23:27	0:0	6	==
water	23:30	0:0	6	AVMEDIA_TYPE_AUDIO
op	23:49	0:0	6	&&
op	24:12	0:0	6	!
water	24:13	0:0	6	codec
op	24:18	0:0	6	->
water	24:20	0:0	6	defaults
op	24:29	0:0	6	&&
op	25:12	0:0	6	!
call	25:13	25:56	6	av_dict_get
arg	25:25	25:42	7	ost->encoder_opts
water	25:25	0:0	8	ost
op	25:28	0:0	8	->
water	25:30	0:0	8	encoder_opts
arg	25:44	25:47	7	"b"
water	25:44	0:0	8	"b"
arg	25:49	25:53	7	NULL
water	25:49	0:0	8	NULL
arg	25:55	25:56	7	0
water	25:55	0:0	8	0
op	25:58	0:0	6	&&
op	26:12	0:0	6	!
call	26:13	26:57	6	av_dict_get
arg	26:25	26:42	7	ost->encoder_opts
water	26:25	0:0	8	ost
op	26:28	0:0	8	->
water	26:30	0:0	8	encoder_opts
arg	26:44	26:48	7	"ab"
water	26:44	0:0	8	"ab"
arg	26:50	26:54	7	NULL
water	26:50	0:0	8	NULL
arg	26:56	26:57	7	0
water	26:56	0:0	8	0
stmts	27:12	27:61	5	
call	27:12	27:60	6	av_dict_set
arg	27:24	27:42	7	&ost->encoder_opts
op	27:24	0:0	8	&
water	27:25	0:0	8	ost
op	27:28	0:0	8	->
water	27:30	0:0	8	encoder_opts
arg	27:44	27:47	7	"b"
water	27:44	0:0	8	"b"
arg	27:49	27:57	7	"128000"
water	27:49	0:0	8	"128000"
arg	27:59	27:60	7	0
water	27:59	0:0	8	0
water	27:61	0:0	6	;
if	28:8	34:8	4	(ost -> filter &&av_buffersink_get_hw_frames_ctx (ost -> filter -> filter ) && ( ( AVHWFramesContext * )av_buffersink_get_hw_frames_ctx (ost -> filter -> filter ) -> data ) -> format ==av_buffersink_get_format (ost -> filter -> filter ))
cond	28:12	30:56	5	ost -> filter &&av_buffersink_get_hw_frames_ctx (ost -> filter -> filter ) && ( ( AVHWFramesContext * )av_buffersink_get_hw_frames_ctx (ost -> filter -> filter ) -> data ) -> format ==av_buffersink_get_format (ost -> filter -> filter )
water	28:12	0:0	6	ost
op	28:15	0:0	6	->
water	28:17	0:0	6	filter
op	28:24	0:0	6	&&
call	28:27	28:78	6	av_buffersink_get_hw_frames_ctx
arg	28:59	28:78	7	ost->filter->filter
water	28:59	0:0	8	ost
op	28:62	0:0	8	->
water	28:64	0:0	8	filter
op	28:70	0:0	8	->
water	28:72	0:0	8	filter
op	28:80	0:0	6	&&
water	29:12	0:0	6	(
water	29:13	0:0	6	(
water	29:14	0:0	6	AVHWFramesContext
op	29:31	0:0	6	*
water	29:32	0:0	6	)
call	29:33	29:84	6	av_buffersink_get_hw_frames_ctx
arg	29:65	29:84	7	ost->filter->filter
water	29:65	0:0	8	ost
op	29:68	0:0	8	->
water	29:70	0:0	8	filter
op	29:76	0:0	8	->
water	29:78	0:0	8	filter
op	29:85	0:0	6	->
water	29:87	0:0	6	data
water	29:91	0:0	6	)
op	29:92	0:0	6	->
water	29:94	0:0	6	format
op	29:101	0:0	6	==
call	30:12	30:56	6	av_buffersink_get_format
arg	30:37	30:56	7	ost->filter->filter
water	30:37	0:0	8	ost
op	30:40	0:0	8	->
water	30:42	0:0	8	filter
op	30:48	0:0	8	->
water	30:50	0:0	8	filter
stmts	30:59	34:8	5	
water	30:59	0:0	6	{
water	31:12	0:0	6	ost
op	31:15	0:0	6	->
water	31:17	0:0	6	enc_ctx
op	31:24	0:0	6	->
water	31:26	0:0	6	hw_frames_ctx
op	31:40	0:0	6	=
call	31:42	31:108	6	av_buffer_ref
arg	31:56	31:108	7	av_buffersink_get_hw_frames_ctx(ost->filter->filter)
call	31:56	31:107	8	av_buffersink_get_hw_frames_ctx
arg	31:88	31:107	9	ost->filter->filter
water	31:88	0:0	10	ost
op	31:91	0:0	10	->
water	31:93	0:0	10	filter
op	31:99	0:0	10	->
water	31:101	0:0	10	filter
water	31:109	0:0	6	;
if	32:12	33:38	6	(! ost -> enc_ctx -> hw_frames_ctx)
cond	32:16	32:31	7	! ost -> enc_ctx -> hw_frames_ctx
op	32:16	0:0	8	!
water	32:17	0:0	8	ost
op	32:20	0:0	8	->
water	32:22	0:0	8	enc_ctx
op	32:29	0:0	8	->
water	32:31	0:0	8	hw_frames_ctx
stmts	33:16	33:38	7	
return	33:16	33:38	8	AVERROR(ENOMEM)
call	33:23	33:37	9	AVERROR
arg	33:31	33:37	10	ENOMEM
water	33:31	0:0	11	ENOMEM
water	34:8	0:0	6	}
if	35:8	43:8	4	(( ret =avcodec_open2 (ost -> enc_ctx ,codec ,& ost -> encoder_opts ) ) < 0)
cond	35:12	35:77	5	( ret =avcodec_open2 (ost -> enc_ctx ,codec ,& ost -> encoder_opts ) ) < 0
water	35:12	0:0	6	(
water	35:13	0:0	6	ret
op	35:17	0:0	6	=
call	35:19	35:72	6	avcodec_open2
arg	35:33	35:45	7	ost->enc_ctx
water	35:33	0:0	8	ost
op	35:36	0:0	8	->
water	35:38	0:0	8	enc_ctx
arg	35:47	35:52	7	codec
water	35:47	0:0	8	codec
arg	35:54	35:72	7	&ost->encoder_opts
op	35:54	0:0	8	&
water	35:55	0:0	8	ost
op	35:58	0:0	8	->
water	35:60	0:0	8	encoder_opts
water	35:73	0:0	6	)
op	35:75	0:0	6	<
water	35:77	0:0	6	0
stmts	35:80	43:8	5	
water	35:80	0:0	6	{
if	36:12	37:50	6	(ret == AVERROR_EXPERIMENTAL)
cond	36:16	36:23	7	ret == AVERROR_EXPERIMENTAL
water	36:16	0:0	8	ret
op	36:20	0:0	8	==
water	36:23	0:0	8	AVERROR_EXPERIMENTAL
stmts	37:16	37:50	7	
call	37:16	37:49	8	abort_codec_experimental
arg	37:41	37:46	9	codec
water	37:41	0:0	10	codec
arg	37:48	37:49	9	1
water	37:48	0:0	10	1
water	37:50	0:0	8	;
call	38:12	41:47	6	snprintf
arg	38:21	38:26	7	error
water	38:21	0:0	8	error
arg	38:28	38:37	7	error_len
water	38:28	0:0	8	error_len
arg	39:21	40:89	7	"Error while opening encoder for output stream #%d:%d - ""maybe incorrect parameters such as bit_rate, rate, width or height"
water	39:21	0:0	8	"Error while opening encoder for output stream #%d:%d - "
water	40:21	0:0	8	"maybe incorrect parameters such as bit_rate, rate, width or height"
arg	41:20	41:35	7	ost->file_index
water	41:20	0:0	8	ost
op	41:23	0:0	8	->
water	41:25	0:0	8	file_index
arg	41:37	41:47	7	ost->index
water	41:37	0:0	8	ost
op	41:40	0:0	8	->
water	41:42	0:0	8	index
water	41:48	0:0	6	;
return	42:12	42:22	6	ret
water	42:19	0:0	7	ret
water	43:8	0:0	6	}
if	44:8	47:69	4	(ost -> enc -> type == AVMEDIA_TYPE_AUDIO && ! ( ost -> enc -> capabilities & AV_CODEC_CAP_VARIABLE_FRAME_SIZE ))
cond	44:12	45:71	5	ost -> enc -> type == AVMEDIA_TYPE_AUDIO && ! ( ost -> enc -> capabilities & AV_CODEC_CAP_VARIABLE_FRAME_SIZE )
water	44:12	0:0	6	ost
op	44:15	0:0	6	->
water	44:17	0:0	6	enc
op	44:20	0:0	6	->
water	44:22	0:0	6	type
op	44:27	0:0	6	==
water	44:30	0:0	6	AVMEDIA_TYPE_AUDIO
op	44:49	0:0	6	&&
op	45:12	0:0	6	!
water	45:13	0:0	6	(
water	45:14	0:0	6	ost
op	45:17	0:0	6	->
water	45:19	0:0	6	enc
op	45:22	0:0	6	->
water	45:24	0:0	6	capabilities
op	45:37	0:0	6	&
water	45:39	0:0	6	AV_CODEC_CAP_VARIABLE_FRAME_SIZE
water	45:71	0:0	6	)
stmts	46:12	47:69	5	
call	46:12	47:68	6	av_buffersink_set_frame_size
arg	46:41	46:60	7	ost->filter->filter
water	46:41	0:0	8	ost
op	46:44	0:0	8	->
water	46:46	0:0	8	filter
op	46:52	0:0	8	->
water	46:54	0:0	8	filter
arg	47:44	47:68	7	ost->enc_ctx->frame_size
water	47:44	0:0	8	ost
op	47:47	0:0	8	->
water	47:49	0:0	8	enc_ctx
op	47:56	0:0	8	->
water	47:58	0:0	8	frame_size
water	47:69	0:0	6	;
call	48:8	48:42	4	assert_avoptions
arg	48:25	48:42	5	ost->encoder_opts
water	48:25	0:0	6	ost
op	48:28	0:0	6	->
water	48:30	0:0	6	encoder_opts
water	48:43	0:0	4	;
if	49:8	51:87	4	(ost -> enc_ctx -> bit_rate && ost -> enc_ctx -> bit_rate < 1000)
cond	49:12	49:63	5	ost -> enc_ctx -> bit_rate && ost -> enc_ctx -> bit_rate < 1000
water	49:12	0:0	6	ost
op	49:15	0:0	6	->
water	49:17	0:0	6	enc_ctx
op	49:24	0:0	6	->
water	49:26	0:0	6	bit_rate
op	49:35	0:0	6	&&
water	49:38	0:0	6	ost
op	49:41	0:0	6	->
water	49:43	0:0	6	enc_ctx
op	49:50	0:0	6	->
water	49:52	0:0	6	bit_rate
op	49:61	0:0	6	<
water	49:63	0:0	6	1000
stmts	50:12	51:87	5	
call	50:12	51:86	6	av_log
arg	50:19	50:23	7	NULL
water	50:19	0:0	8	NULL
arg	50:25	50:39	7	AV_LOG_WARNING
water	50:25	0:0	8	AV_LOG_WARNING
arg	50:41	51:86	7	"The bitrate parameter is set too low."" It takes bits/s as argument, not kbits/s\n"
water	50:41	0:0	8	"The bitrate parameter is set too low."
water	51:41	0:0	8	" It takes bits/s as argument, not kbits/s\n"
water	51:87	0:0	6	;
water	52:8	0:0	4	ret
op	52:12	0:0	4	=
call	52:14	52:77	4	avcodec_parameters_from_context
arg	52:46	52:63	5	ost->st->codecpar
water	52:46	0:0	6	ost
op	52:49	0:0	6	->
water	52:51	0:0	6	st
op	52:53	0:0	6	->
water	52:55	0:0	6	codecpar
arg	52:65	52:77	5	ost->enc_ctx
water	52:65	0:0	6	ost
op	52:68	0:0	6	->
water	52:70	0:0	6	enc_ctx
water	52:78	0:0	4	;
if	53:8	57:8	4	(ret < 0)
cond	53:12	53:18	5	ret < 0
water	53:12	0:0	6	ret
op	53:16	0:0	6	<
water	53:18	0:0	6	0
stmts	53:21	57:8	5	
water	53:21	0:0	6	{
call	54:12	55:74	6	av_log
arg	54:19	54:23	7	NULL
water	54:19	0:0	8	NULL
arg	54:25	54:37	7	AV_LOG_FATAL
water	54:25	0:0	8	AV_LOG_FATAL
arg	55:19	55:74	7	"Error initializing the output stream codec context.\n"
water	55:19	0:0	8	"Error initializing the output stream codec context.\n"
water	55:75	0:0	6	;
call	56:12	56:26	6	exit_program
arg	56:25	56:26	7	1
water	56:25	0:0	8	1
water	56:27	0:0	6	;
water	57:8	0:0	6	}
water	61:8	0:0	4	ret
op	61:12	0:0	4	=
call	61:14	61:63	4	avcodec_copy_context
arg	61:35	61:49	5	ost->st->codec
water	61:35	0:0	6	ost
op	61:38	0:0	6	->
water	61:40	0:0	6	st
op	61:42	0:0	6	->
water	61:44	0:0	6	codec
arg	61:51	61:63	5	ost->enc_ctx
water	61:51	0:0	6	ost
op	61:54	0:0	6	->
water	61:56	0:0	6	enc_ctx
water	61:64	0:0	4	;
if	62:8	63:22	4	(ret < 0)
cond	62:12	62:18	5	ret < 0
water	62:12	0:0	6	ret
op	62:16	0:0	6	<
water	62:18	0:0	6	0
stmts	63:12	63:22	5	
return	63:12	63:22	6	ret
water	63:19	0:0	7	ret
if	64:8	81:8	4	(ost -> enc_ctx -> nb_coded_side_data)
cond	64:12	64:26	5	ost -> enc_ctx -> nb_coded_side_data
water	64:12	0:0	6	ost
op	64:15	0:0	6	->
water	64:17	0:0	6	enc_ctx
op	64:24	0:0	6	->
water	64:26	0:0	6	nb_coded_side_data
stmts	64:46	81:8	5	
water	64:46	0:0	6	{
decl	65:12	65:17	6	int	i
water	66:12	0:0	6	ost
op	66:15	0:0	6	->
water	66:17	0:0	6	st
op	66:19	0:0	6	->
water	66:21	0:0	6	side_data
op	66:31	0:0	6	=
call	66:33	67:77	6	av_realloc_array
arg	66:50	66:54	7	NULL
water	66:50	0:0	8	NULL
arg	66:56	66:88	7	ost->enc_ctx->nb_coded_side_data
water	66:56	0:0	8	ost
op	66:59	0:0	8	->
water	66:61	0:0	8	enc_ctx
op	66:68	0:0	8	->
water	66:70	0:0	8	nb_coded_side_data
arg	67:50	67:77	7	sizeof(*ost->st->side_data)
op	67:50	0:0	8	sizeof
water	67:56	0:0	8	(
op	67:57	0:0	8	*
water	67:58	0:0	8	ost
op	67:61	0:0	8	->
water	67:63	0:0	8	st
op	67:65	0:0	8	->
water	67:67	0:0	8	side_data
water	67:76	0:0	8	)
water	67:78	0:0	6	;
if	68:12	69:38	6	(! ost -> st -> side_data)
cond	68:16	68:26	7	! ost -> st -> side_data
op	68:16	0:0	8	!
water	68:17	0:0	8	ost
op	68:20	0:0	8	->
water	68:22	0:0	8	st
op	68:24	0:0	8	->
water	68:26	0:0	8	side_data
stmts	69:16	69:38	7	
return	69:16	69:38	8	AVERROR(ENOMEM)
call	69:23	69:37	9	AVERROR
arg	69:31	69:37	10	ENOMEM
water	69:31	0:0	11	ENOMEM
for	70:12	80:12	6	(i = 0 ;i < ost -> enc_ctx -> nb_coded_side_data;i ++)
forinit	70:17	70:22	7	i = 0 ;
water	70:17	0:0	8	i
op	70:19	0:0	8	=
water	70:21	0:0	8	0
water	70:22	0:0	8	;
cond	70:24	70:42	7	i < ost -> enc_ctx -> nb_coded_side_data
water	70:24	0:0	8	i
op	70:26	0:0	8	<
water	70:28	0:0	8	ost
op	70:31	0:0	8	->
water	70:33	0:0	8	enc_ctx
op	70:40	0:0	8	->
water	70:42	0:0	8	nb_coded_side_data
forexpr	70:62	70:63	7	i ++
water	70:62	0:0	8	i
op	70:63	0:0	8	++
stmts	70:67	80:12	7	
water	70:67	0:0	8	{
decl	71:16	71:82	8	const AVPacketSideData	*sd_src
op	71:47	0:0	8	=
op	71:49	0:0	8	&
water	71:50	0:0	8	ost
op	71:53	0:0	8	->
water	71:55	0:0	8	enc_ctx
op	71:62	0:0	8	->
water	71:64	0:0	8	coded_side_data
op	71:79	0:0	8	[
water	71:80	0:0	8	i
op	71:81	0:0	8	]
decl	72:16	72:65	8	AVPacketSideData	*sd_dst
op	72:41	0:0	8	=
op	72:43	0:0	8	&
water	72:44	0:0	8	ost
op	72:47	0:0	8	->
water	72:49	0:0	8	st
op	72:51	0:0	8	->
water	72:53	0:0	8	side_data
op	72:62	0:0	8	[
water	72:63	0:0	8	i
op	72:64	0:0	8	]
water	73:16	0:0	8	sd_dst
op	73:22	0:0	8	->
water	73:24	0:0	8	data
op	73:29	0:0	8	=
call	73:31	73:53	8	av_malloc
arg	73:41	73:53	9	sd_src->size
water	73:41	0:0	10	sd_src
op	73:47	0:0	10	->
water	73:49	0:0	10	size
water	73:54	0:0	8	;
if	74:16	75:42	8	(! sd_dst -> data)
cond	74:20	74:29	9	! sd_dst -> data
op	74:20	0:0	10	!
water	74:21	0:0	10	sd_dst
op	74:27	0:0	10	->
water	74:29	0:0	10	data
stmts	75:20	75:42	9	
return	75:20	75:42	10	AVERROR(ENOMEM)
call	75:27	75:41	11	AVERROR
arg	75:35	75:41	12	ENOMEM
water	75:35	0:0	13	ENOMEM
call	76:16	76:63	8	memcpy
arg	76:23	76:35	9	sd_dst->data
water	76:23	0:0	10	sd_dst
op	76:29	0:0	10	->
water	76:31	0:0	10	data
arg	76:37	76:49	9	sd_src->data
water	76:37	0:0	10	sd_src
op	76:43	0:0	10	->
water	76:45	0:0	10	data
arg	76:51	76:63	9	sd_src->size
water	76:51	0:0	10	sd_src
op	76:57	0:0	10	->
water	76:59	0:0	10	size
water	76:64	0:0	8	;
water	77:16	0:0	8	sd_dst
op	77:22	0:0	8	->
water	77:24	0:0	8	size
op	77:29	0:0	8	=
water	77:31	0:0	8	sd_src
op	77:37	0:0	8	->
water	77:39	0:0	8	size
water	77:43	0:0	8	;
water	78:16	0:0	8	sd_dst
op	78:22	0:0	8	->
water	78:24	0:0	8	type
op	78:29	0:0	8	=
water	78:31	0:0	8	sd_src
op	78:37	0:0	8	->
water	78:39	0:0	8	type
water	78:43	0:0	8	;
water	79:16	0:0	8	ost
op	79:19	0:0	8	->
water	79:21	0:0	8	st
op	79:23	0:0	8	->
water	79:25	0:0	8	nb_side_data
op	79:37	0:0	8	++
water	79:39	0:0	8	;
water	80:12	0:0	8	}
water	81:8	0:0	6	}
if	89:8	100:8	4	(ist)
cond	89:12	89:12	5	ist
water	89:12	0:0	6	ist
stmts	89:17	100:8	5	
water	89:17	0:0	6	{
decl	90:12	90:17	6	int	i
for	91:12	99:12	6	(i = 0 ;i < ist -> st -> nb_side_data;i ++)
forinit	91:17	91:22	7	i = 0 ;
water	91:17	0:0	8	i
op	91:19	0:0	8	=
water	91:21	0:0	8	0
water	91:22	0:0	8	;
cond	91:24	91:37	7	i < ist -> st -> nb_side_data
water	91:24	0:0	8	i
op	91:26	0:0	8	<
water	91:28	0:0	8	ist
op	91:31	0:0	8	->
water	91:33	0:0	8	st
op	91:35	0:0	8	->
water	91:37	0:0	8	nb_side_data
forexpr	91:51	91:52	7	i ++
water	91:51	0:0	8	i
op	91:52	0:0	8	++
stmts	91:56	99:12	7	
water	91:56	0:0	8	{
decl	92:16	92:61	8	AVPacketSideData	*sd
op	92:37	0:0	8	=
op	92:39	0:0	8	&
water	92:40	0:0	8	ist
op	92:43	0:0	8	->
water	92:45	0:0	8	st
op	92:47	0:0	8	->
water	92:49	0:0	8	side_data
op	92:58	0:0	8	[
water	92:59	0:0	8	i
op	92:60	0:0	8	]
decl	93:16	93:83	8	uint8_t	*dst
op	93:29	0:0	8	=
call	93:31	93:82	9	av_stream_new_side_data
arg	93:55	93:62	10	ost->st
water	93:55	0:0	11	ost
op	93:58	0:0	11	->
water	93:60	0:0	11	st
arg	93:64	93:72	10	sd->type
water	93:64	0:0	11	sd
op	93:66	0:0	11	->
water	93:68	0:0	11	type
arg	93:74	93:82	10	sd->size
water	93:74	0:0	11	sd
op	93:76	0:0	11	->
water	93:78	0:0	11	size
if	94:16	95:42	8	(! dst)
cond	94:20	94:21	9	! dst
op	94:20	0:0	10	!
water	94:21	0:0	10	dst
stmts	95:20	95:42	9	
return	95:20	95:42	10	AVERROR(ENOMEM)
call	95:27	95:41	11	AVERROR
arg	95:35	95:41	12	ENOMEM
water	95:35	0:0	13	ENOMEM
call	96:16	96:46	8	memcpy
arg	96:23	96:26	9	dst
water	96:23	0:0	10	dst
arg	96:28	96:36	9	sd->data
water	96:28	0:0	10	sd
op	96:30	0:0	10	->
water	96:32	0:0	10	data
arg	96:38	96:46	9	sd->size
water	96:38	0:0	10	sd
op	96:40	0:0	10	->
water	96:42	0:0	10	size
water	96:47	0:0	8	;
if	97:16	98:63	8	(ist -> autorotate && sd -> type == AV_PKT_DATA_DISPLAYMATRIX)
cond	97:20	97:51	9	ist -> autorotate && sd -> type == AV_PKT_DATA_DISPLAYMATRIX
water	97:20	0:0	10	ist
op	97:23	0:0	10	->
water	97:25	0:0	10	autorotate
op	97:36	0:0	10	&&
water	97:39	0:0	10	sd
op	97:41	0:0	10	->
water	97:43	0:0	10	type
op	97:48	0:0	10	==
water	97:51	0:0	10	AV_PKT_DATA_DISPLAYMATRIX
stmts	98:20	98:63	9	
call	98:20	98:62	10	av_display_rotation_set
arg	98:44	98:59	11	(uint32_t*)dst
water	98:44	0:0	12	(
water	98:45	0:0	12	uint32_t
op	98:54	0:0	12	*
water	98:55	0:0	12	)
water	98:56	0:0	12	dst
arg	98:61	98:62	11	0
water	98:61	0:0	12	0
water	98:63	0:0	10	;
water	99:12	0:0	8	}
water	100:8	0:0	6	}
if	102:8	103:86	4	(ost -> st -> time_base . num <= 0 || ost -> st -> time_base . den <= 0)
cond	102:12	102:69	5	ost -> st -> time_base . num <= 0 || ost -> st -> time_base . den <= 0
water	102:12	0:0	6	ost
op	102:15	0:0	6	->
water	102:17	0:0	6	st
op	102:19	0:0	6	->
water	102:21	0:0	6	time_base
op	102:30	0:0	6	.
water	102:31	0:0	6	num
op	102:35	0:0	6	<=
water	102:38	0:0	6	0
op	102:40	0:0	6	||
water	102:43	0:0	6	ost
op	102:46	0:0	6	->
water	102:48	0:0	6	st
op	102:50	0:0	6	->
water	102:52	0:0	6	time_base
op	102:61	0:0	6	.
water	102:62	0:0	6	den
op	102:66	0:0	6	<=
water	102:69	0:0	6	0
stmts	103:12	103:86	5	
water	103:12	0:0	6	ost
op	103:15	0:0	6	->
water	103:17	0:0	6	st
op	103:19	0:0	6	->
water	103:21	0:0	6	time_base
op	103:31	0:0	6	=
call	103:33	103:85	6	av_add_q
arg	103:42	103:65	7	ost->enc_ctx->time_base
water	103:42	0:0	8	ost
op	103:45	0:0	8	->
water	103:47	0:0	8	enc_ctx
op	103:54	0:0	8	->
water	103:56	0:0	8	time_base
arg	103:67	103:85	7	(AVRational){0,1}
water	103:67	0:0	8	(
water	103:68	0:0	8	AVRational
water	103:78	0:0	8	)
water	103:79	0:0	8	{
water	103:80	0:0	8	0
water	103:81	0:0	8	,
water	103:83	0:0	8	1
water	103:84	0:0	8	}
water	103:86	0:0	6	;
if	105:8	106:103	4	(ost -> st -> duration <= 0 && ist && ist -> st -> duration > 0)
cond	105:12	105:65	5	ost -> st -> duration <= 0 && ist && ist -> st -> duration > 0
water	105:12	0:0	6	ost
op	105:15	0:0	6	->
water	105:17	0:0	6	st
op	105:19	0:0	6	->
water	105:21	0:0	6	duration
op	105:30	0:0	6	<=
water	105:33	0:0	6	0
op	105:35	0:0	6	&&
water	105:38	0:0	6	ist
op	105:42	0:0	6	&&
water	105:45	0:0	6	ist
op	105:48	0:0	6	->
water	105:50	0:0	6	st
op	105:52	0:0	6	->
water	105:54	0:0	6	duration
op	105:63	0:0	6	>
water	105:65	0:0	6	0
stmts	106:12	106:103	5	
water	106:12	0:0	6	ost
op	106:15	0:0	6	->
water	106:17	0:0	6	st
op	106:19	0:0	6	->
water	106:21	0:0	6	duration
op	106:30	0:0	6	=
call	106:32	106:102	6	av_rescale_q
arg	106:45	106:62	7	ist->st->duration
water	106:45	0:0	8	ist
op	106:48	0:0	8	->
water	106:50	0:0	8	st
op	106:52	0:0	8	->
water	106:54	0:0	8	duration
arg	106:64	106:82	7	ist->st->time_base
water	106:64	0:0	8	ist
op	106:67	0:0	8	->
water	106:69	0:0	8	st
op	106:71	0:0	8	->
water	106:73	0:0	8	time_base
arg	106:84	106:102	7	ost->st->time_base
water	106:84	0:0	8	ost
op	106:87	0:0	8	->
water	106:89	0:0	8	st
op	106:91	0:0	8	->
water	106:93	0:0	8	time_base
water	106:103	0:0	6	;
water	107:8	0:0	4	ost
op	107:11	0:0	4	->
water	107:13	0:0	4	st
op	107:15	0:0	4	->
water	107:17	0:0	4	codec
op	107:22	0:0	4	->
water	107:24	0:0	4	codec
op	107:29	0:0	4	=
water	107:31	0:0	4	ost
op	107:34	0:0	4	->
water	107:36	0:0	4	enc_ctx
op	107:43	0:0	4	->
water	107:45	0:0	4	codec
water	107:50	0:0	4	;
water	108:4	0:0	4	}
else	108:6	119:4	2
stmts	108:11	119:4	3	
if	108:11	119:4	4	(ost -> stream_copy)
cond	108:15	108:20	5	ost -> stream_copy
water	108:15	0:0	6	ost
op	108:18	0:0	6	->
water	108:20	0:0	6	stream_copy
stmts	108:33	119:4	5	
water	108:33	0:0	6	{
water	109:8	0:0	6	ret
op	109:12	0:0	6	=
call	109:14	109:47	6	init_output_stream_streamcopy
arg	109:44	109:47	7	ost
water	109:44	0:0	8	ost
water	109:48	0:0	6	;
if	110:8	111:22	6	(ret < 0)
cond	110:12	110:18	7	ret < 0
water	110:12	0:0	8	ret
op	110:16	0:0	8	<
water	110:18	0:0	8	0
stmts	111:12	111:22	7	
return	111:12	111:22	8	ret
water	111:19	0:0	9	ret
water	116:8	0:0	6	ret
op	116:12	0:0	6	=
call	116:14	116:80	6	avcodec_parameters_to_context
arg	116:44	116:61	7	ost->parser_avctx
water	116:44	0:0	8	ost
op	116:47	0:0	8	->
water	116:49	0:0	8	parser_avctx
arg	116:63	116:80	7	ost->st->codecpar
water	116:63	0:0	8	ost
op	116:66	0:0	8	->
water	116:68	0:0	8	st
op	116:70	0:0	8	->
water	116:72	0:0	8	codecpar
water	116:81	0:0	6	;
if	117:8	118:22	6	(ret < 0)
cond	117:12	117:18	7	ret < 0
water	117:12	0:0	8	ret
op	117:16	0:0	8	<
water	117:18	0:0	8	0
stmts	118:12	118:22	7	
return	118:12	118:22	8	ret
water	118:19	0:0	9	ret
water	119:4	0:0	6	}
if	121:4	149:4	2	(ost -> disposition)
cond	121:8	121:13	3	ost -> disposition
water	121:8	0:0	4	ost
op	121:11	0:0	4	->
water	121:13	0:0	4	disposition
stmts	121:26	149:4	3	
water	121:26	0:0	4	{
water	122:8	0:0	4	static
water	122:15	0:0	4	const
water	122:21	0:0	4	AVOption
water	122:30	0:0	4	opts
op	122:34	0:0	4	[
op	122:35	0:0	4	]
op	122:37	0:0	4	=
water	122:39	0:0	4	{
water	123:12	0:0	4	{
water	123:14	0:0	4	"disposition"
water	123:36	0:0	4	,
water	123:38	0:0	4	NULL
water	123:42	0:0	4	,
water	123:44	0:0	4	0
water	123:45	0:0	4	,
water	123:47	0:0	4	AV_OPT_TYPE_FLAGS
water	123:64	0:0	4	,
water	123:66	0:0	4	{
op	123:68	0:0	4	.
water	123:69	0:0	4	i64
op	123:73	0:0	4	=
water	123:75	0:0	4	0
water	123:77	0:0	4	}
water	123:78	0:0	4	,
water	123:80	0:0	4	INT64_MIN
water	123:89	0:0	4	,
water	123:91	0:0	4	INT64_MAX
water	123:100	0:0	4	,
op	123:102	0:0	4	.
water	123:103	0:0	4	unit
op	123:108	0:0	4	=
water	123:110	0:0	4	"flags"
water	123:118	0:0	4	}
water	123:119	0:0	4	,
water	124:12	0:0	4	{
water	124:14	0:0	4	"default"
water	124:36	0:0	4	,
water	124:38	0:0	4	NULL
water	124:42	0:0	4	,
water	124:44	0:0	4	0
water	124:45	0:0	4	,
water	124:47	0:0	4	AV_OPT_TYPE_CONST
water	124:64	0:0	4	,
water	124:66	0:0	4	{
op	124:68	0:0	4	.
water	124:69	0:0	4	i64
op	124:73	0:0	4	=
water	124:75	0:0	4	AV_DISPOSITION_DEFAULT
water	124:108	0:0	4	}
water	124:109	0:0	4	,
op	124:114	0:0	4	.
water	124:115	0:0	4	unit
op	124:120	0:0	4	=
water	124:122	0:0	4	"flags"
water	124:130	0:0	4	}
water	124:131	0:0	4	,
water	125:12	0:0	4	{
water	125:14	0:0	4	"dub"
water	125:36	0:0	4	,
water	125:38	0:0	4	NULL
water	125:42	0:0	4	,
water	125:44	0:0	4	0
water	125:45	0:0	4	,
water	125:47	0:0	4	AV_OPT_TYPE_CONST
water	125:64	0:0	4	,
water	125:66	0:0	4	{
op	125:68	0:0	4	.
water	125:69	0:0	4	i64
op	125:73	0:0	4	=
water	125:75	0:0	4	AV_DISPOSITION_DUB
water	125:108	0:0	4	}
water	125:109	0:0	4	,
op	125:114	0:0	4	.
water	125:115	0:0	4	unit
op	125:120	0:0	4	=
water	125:122	0:0	4	"flags"
water	125:130	0:0	4	}
water	125:131	0:0	4	,
water	126:12	0:0	4	{
water	126:14	0:0	4	"original"
water	126:36	0:0	4	,
water	126:38	0:0	4	NULL
water	126:42	0:0	4	,
water	126:44	0:0	4	0
water	126:45	0:0	4	,
water	126:47	0:0	4	AV_OPT_TYPE_CONST
water	126:64	0:0	4	,
water	126:66	0:0	4	{
op	126:68	0:0	4	.
water	126:69	0:0	4	i64
op	126:73	0:0	4	=
water	126:75	0:0	4	AV_DISPOSITION_ORIGINAL
water	126:108	0:0	4	}
water	126:109	0:0	4	,
op	126:114	0:0	4	.
water	126:115	0:0	4	unit
op	126:120	0:0	4	=
water	126:122	0:0	4	"flags"
water	126:130	0:0	4	}
water	126:131	0:0	4	,
water	127:12	0:0	4	{
water	127:14	0:0	4	"comment"
water	127:36	0:0	4	,
water	127:38	0:0	4	NULL
water	127:42	0:0	4	,
water	127:44	0:0	4	0
water	127:45	0:0	4	,
water	127:47	0:0	4	AV_OPT_TYPE_CONST
water	127:64	0:0	4	,
water	127:66	0:0	4	{
op	127:68	0:0	4	.
water	127:69	0:0	4	i64
op	127:73	0:0	4	=
water	127:75	0:0	4	AV_DISPOSITION_COMMENT
water	127:108	0:0	4	}
water	127:109	0:0	4	,
op	127:114	0:0	4	.
water	127:115	0:0	4	unit
op	127:120	0:0	4	=
water	127:122	0:0	4	"flags"
water	127:130	0:0	4	}
water	127:131	0:0	4	,
water	128:12	0:0	4	{
water	128:14	0:0	4	"lyrics"
water	128:36	0:0	4	,
water	128:38	0:0	4	NULL
water	128:42	0:0	4	,
water	128:44	0:0	4	0
water	128:45	0:0	4	,
water	128:47	0:0	4	AV_OPT_TYPE_CONST
water	128:64	0:0	4	,
water	128:66	0:0	4	{
op	128:68	0:0	4	.
water	128:69	0:0	4	i64
op	128:73	0:0	4	=
water	128:75	0:0	4	AV_DISPOSITION_LYRICS
water	128:108	0:0	4	}
water	128:109	0:0	4	,
op	128:114	0:0	4	.
water	128:115	0:0	4	unit
op	128:120	0:0	4	=
water	128:122	0:0	4	"flags"
water	128:130	0:0	4	}
water	128:131	0:0	4	,
water	129:12	0:0	4	{
water	129:14	0:0	4	"karaoke"
water	129:36	0:0	4	,
water	129:38	0:0	4	NULL
water	129:42	0:0	4	,
water	129:44	0:0	4	0
water	129:45	0:0	4	,
water	129:47	0:0	4	AV_OPT_TYPE_CONST
water	129:64	0:0	4	,
water	129:66	0:0	4	{
op	129:68	0:0	4	.
water	129:69	0:0	4	i64
op	129:73	0:0	4	=
water	129:75	0:0	4	AV_DISPOSITION_KARAOKE
water	129:108	0:0	4	}
water	129:109	0:0	4	,
op	129:114	0:0	4	.
water	129:115	0:0	4	unit
op	129:120	0:0	4	=
water	129:122	0:0	4	"flags"
water	129:130	0:0	4	}
water	129:131	0:0	4	,
water	130:12	0:0	4	{
water	130:14	0:0	4	"forced"
water	130:36	0:0	4	,
water	130:38	0:0	4	NULL
water	130:42	0:0	4	,
water	130:44	0:0	4	0
water	130:45	0:0	4	,
water	130:47	0:0	4	AV_OPT_TYPE_CONST
water	130:64	0:0	4	,
water	130:66	0:0	4	{
op	130:68	0:0	4	.
water	130:69	0:0	4	i64
op	130:73	0:0	4	=
water	130:75	0:0	4	AV_DISPOSITION_FORCED
water	130:108	0:0	4	}
water	130:109	0:0	4	,
op	130:114	0:0	4	.
water	130:115	0:0	4	unit
op	130:120	0:0	4	=
water	130:122	0:0	4	"flags"
water	130:130	0:0	4	}
water	130:131	0:0	4	,
water	131:12	0:0	4	{
water	131:14	0:0	4	"hearing_impaired"
water	131:36	0:0	4	,
water	131:38	0:0	4	NULL
water	131:42	0:0	4	,
water	131:44	0:0	4	0
water	131:45	0:0	4	,
water	131:47	0:0	4	AV_OPT_TYPE_CONST
water	131:64	0:0	4	,
water	131:66	0:0	4	{
op	131:68	0:0	4	.
water	131:69	0:0	4	i64
op	131:73	0:0	4	=
water	131:75	0:0	4	AV_DISPOSITION_HEARING_IMPAIRED
water	131:108	0:0	4	}
water	131:109	0:0	4	,
op	131:114	0:0	4	.
water	131:115	0:0	4	unit
op	131:120	0:0	4	=
water	131:122	0:0	4	"flags"
water	131:130	0:0	4	}
water	131:131	0:0	4	,
water	132:12	0:0	4	{
water	132:14	0:0	4	"visual_impaired"
water	132:36	0:0	4	,
water	132:38	0:0	4	NULL
water	132:42	0:0	4	,
water	132:44	0:0	4	0
water	132:45	0:0	4	,
water	132:47	0:0	4	AV_OPT_TYPE_CONST
water	132:64	0:0	4	,
water	132:66	0:0	4	{
op	132:68	0:0	4	.
water	132:69	0:0	4	i64
op	132:73	0:0	4	=
water	132:75	0:0	4	AV_DISPOSITION_VISUAL_IMPAIRED
water	132:108	0:0	4	}
water	132:109	0:0	4	,
op	132:114	0:0	4	.
water	132:115	0:0	4	unit
op	132:120	0:0	4	=
water	132:122	0:0	4	"flags"
water	132:130	0:0	4	}
water	132:131	0:0	4	,
water	133:12	0:0	4	{
water	133:14	0:0	4	"clean_effects"
water	133:36	0:0	4	,
water	133:38	0:0	4	NULL
water	133:42	0:0	4	,
water	133:44	0:0	4	0
water	133:45	0:0	4	,
water	133:47	0:0	4	AV_OPT_TYPE_CONST
water	133:64	0:0	4	,
water	133:66	0:0	4	{
op	133:68	0:0	4	.
water	133:69	0:0	4	i64
op	133:73	0:0	4	=
water	133:75	0:0	4	AV_DISPOSITION_CLEAN_EFFECTS
water	133:108	0:0	4	}
water	133:109	0:0	4	,
op	133:114	0:0	4	.
water	133:115	0:0	4	unit
op	133:120	0:0	4	=
water	133:122	0:0	4	"flags"
water	133:130	0:0	4	}
water	133:131	0:0	4	,
water	134:12	0:0	4	{
water	134:14	0:0	4	"captions"
water	134:36	0:0	4	,
water	134:38	0:0	4	NULL
water	134:42	0:0	4	,
water	134:44	0:0	4	0
water	134:45	0:0	4	,
water	134:47	0:0	4	AV_OPT_TYPE_CONST
water	134:64	0:0	4	,
water	134:66	0:0	4	{
op	134:68	0:0	4	.
water	134:69	0:0	4	i64
op	134:73	0:0	4	=
water	134:75	0:0	4	AV_DISPOSITION_CAPTIONS
water	134:108	0:0	4	}
water	134:109	0:0	4	,
op	134:114	0:0	4	.
water	134:115	0:0	4	unit
op	134:120	0:0	4	=
water	134:122	0:0	4	"flags"
water	134:130	0:0	4	}
water	134:131	0:0	4	,
water	135:12	0:0	4	{
water	135:14	0:0	4	"descriptions"
water	135:36	0:0	4	,
water	135:38	0:0	4	NULL
water	135:42	0:0	4	,
water	135:44	0:0	4	0
water	135:45	0:0	4	,
water	135:47	0:0	4	AV_OPT_TYPE_CONST
water	135:64	0:0	4	,
water	135:66	0:0	4	{
op	135:68	0:0	4	.
water	135:69	0:0	4	i64
op	135:73	0:0	4	=
water	135:75	0:0	4	AV_DISPOSITION_DESCRIPTIONS
water	135:108	0:0	4	}
water	135:109	0:0	4	,
op	135:114	0:0	4	.
water	135:115	0:0	4	unit
op	135:120	0:0	4	=
water	135:122	0:0	4	"flags"
water	135:130	0:0	4	}
water	135:131	0:0	4	,
water	136:12	0:0	4	{
water	136:14	0:0	4	"metadata"
water	136:36	0:0	4	,
water	136:38	0:0	4	NULL
water	136:42	0:0	4	,
water	136:44	0:0	4	0
water	136:45	0:0	4	,
water	136:47	0:0	4	AV_OPT_TYPE_CONST
water	136:64	0:0	4	,
water	136:66	0:0	4	{
op	136:68	0:0	4	.
water	136:69	0:0	4	i64
op	136:73	0:0	4	=
water	136:75	0:0	4	AV_DISPOSITION_METADATA
water	136:108	0:0	4	}
water	136:109	0:0	4	,
op	136:114	0:0	4	.
water	136:115	0:0	4	unit
op	136:120	0:0	4	=
water	136:122	0:0	4	"flags"
water	136:130	0:0	4	}
water	136:131	0:0	4	,
water	137:12	0:0	4	{
water	137:14	0:0	4	NULL
water	137:19	0:0	4	}
water	137:20	0:0	4	,
water	138:8	0:0	4	}
water	138:9	0:0	4	;
water	139:8	0:0	4	static
water	139:15	0:0	4	const
water	139:21	0:0	4	AVClass
water	139:29	0:0	4	class
op	139:35	0:0	4	=
water	139:37	0:0	4	{
op	140:12	0:0	4	.
water	140:13	0:0	4	class_name
op	140:24	0:0	4	=
water	140:26	0:0	4	""
water	140:28	0:0	4	,
op	141:12	0:0	4	.
water	141:13	0:0	4	item_name
op	141:24	0:0	4	=
water	141:26	0:0	4	av_default_item_name
water	141:46	0:0	4	,
op	142:12	0:0	4	.
water	142:13	0:0	4	option
op	142:24	0:0	4	=
water	142:26	0:0	4	opts
water	142:30	0:0	4	,
op	143:12	0:0	4	.
water	143:13	0:0	4	version
op	143:24	0:0	4	=
water	143:26	0:0	4	LIBAVUTIL_VERSION_INT
water	143:47	0:0	4	,
water	144:8	0:0	4	}
water	144:9	0:0	4	;
decl	145:8	145:38	4	const AVClass	*pclass
op	145:30	0:0	4	=
op	145:32	0:0	4	&
water	145:33	0:0	4	class
water	146:8	0:0	4	ret
op	146:12	0:0	4	=
call	146:14	146:90	4	av_opt_eval_flags
arg	146:32	146:39	5	&pclass
op	146:32	0:0	6	&
water	146:33	0:0	6	pclass
arg	146:41	146:49	5	&opts[0]
op	146:41	0:0	6	&
water	146:42	0:0	6	opts
op	146:46	0:0	6	[
water	146:47	0:0	6	0
op	146:48	0:0	6	]
arg	146:51	146:67	5	ost->disposition
water	146:51	0:0	6	ost
op	146:54	0:0	6	->
water	146:56	0:0	6	disposition
arg	146:69	146:90	5	&ost->st->disposition
op	146:69	0:0	6	&
water	146:70	0:0	6	ost
op	146:73	0:0	6	->
water	146:75	0:0	6	st
op	146:77	0:0	6	->
water	146:79	0:0	6	disposition
water	146:91	0:0	4	;
if	147:8	148:22	4	(ret < 0)
cond	147:12	147:18	5	ret < 0
water	147:12	0:0	6	ret
op	147:16	0:0	6	<
water	147:18	0:0	6	0
stmts	148:12	148:22	5	
return	148:12	148:22	6	ret
water	148:19	0:0	7	ret
water	149:4	0:0	4	}
water	153:4	0:0	2	ret
op	153:8	0:0	2	=
call	153:10	153:30	2	init_output_bsfs
arg	153:27	153:30	3	ost
water	153:27	0:0	4	ost
water	153:31	0:0	2	;
if	154:4	155:18	2	(ret < 0)
cond	154:8	154:14	3	ret < 0
water	154:8	0:0	4	ret
op	154:12	0:0	4	<
water	154:14	0:0	4	0
stmts	155:8	155:18	3	
return	155:8	155:18	4	ret
water	155:15	0:0	5	ret
water	156:4	0:0	2	ost
op	156:7	0:0	2	->
water	156:9	0:0	2	initialized
op	156:21	0:0	2	=
water	156:23	0:0	2	1
water	156:24	0:0	2	;
water	157:4	0:0	2	ret
op	157:8	0:0	2	=
call	157:10	157:79	2	check_init_output_file
arg	157:33	157:62	3	output_files[ost->file_index]
water	157:33	0:0	4	output_files
op	157:45	0:0	4	[
water	157:46	0:0	4	ost
op	157:49	0:0	4	->
water	157:51	0:0	4	file_index
op	157:61	0:0	4	]
arg	157:64	157:79	3	ost->file_index
water	157:64	0:0	4	ost
op	157:67	0:0	4	->
water	157:69	0:0	4	file_index
water	157:80	0:0	2	;
if	158:4	159:18	2	(ret < 0)
cond	158:8	158:14	3	ret < 0
water	158:8	0:0	4	ret
op	158:12	0:0	4	<
water	158:14	0:0	4	0
stmts	159:8	159:18	3	
return	159:8	159:18	4	ret
water	159:15	0:0	5	ret
return	160:4	160:14	2	ret
water	160:11	0:0	3	ret
