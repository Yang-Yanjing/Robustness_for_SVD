func	1:0	26:0	0	AVDictionaryEntry *	av_dict_get
params	1:30	0:0	1	
param	1:31	1:52	2	const AVDictionary *	m
param	1:54	1:69	2	const char *	key
param	2:31	2:60	2	const AVDictionaryEntry *	prev
param	2:62	2:71	2	int	flags
stmnts	0:0	25:15	1	
decl	4:4	4:21	2	unsigned int	i
water	4:18	0:0	2	,
decl	4:4	4:21	2	unsigned int	j
if	5:4	6:19	2	(! m)
cond	5:8	5:9	3	! m
op	5:8	0:0	4	!
water	5:9	0:0	4	m
stmts	6:8	6:19	3	
return	6:8	6:19	4	NULL
water	6:15	0:0	5	NULL
if	7:4	8:31	2	(prev)
cond	7:8	7:8	3	prev
water	7:8	0:0	4	prev
stmts	8:8	8:31	3	
water	8:8	0:0	4	i
op	8:10	0:0	4	=
water	8:12	0:0	4	prev
op	8:17	0:0	4	-
water	8:19	0:0	4	m
op	8:20	0:0	4	->
water	8:22	0:0	4	elems
op	8:28	0:0	4	+
water	8:30	0:0	4	1
water	8:31	0:0	4	;
else	9:4	10:13	2
stmts	10:8	10:13	3	
water	10:8	0:0	4	i
op	10:10	0:0	4	=
water	10:12	0:0	4	0
water	10:13	0:0	4	;
for	11:4	24:4	2	(;i < m -> count;i ++)
forinit	11:9	11:9	3	;
water	11:9	0:0	4	;
cond	11:11	11:18	3	i < m -> count
water	11:11	0:0	4	i
op	11:13	0:0	4	<
water	11:15	0:0	4	m
op	11:16	0:0	4	->
water	11:18	0:0	4	count
forexpr	11:25	11:26	3	i ++
water	11:25	0:0	4	i
op	11:26	0:0	4	++
stmts	11:30	24:4	3	
water	11:30	0:0	4	{
decl	12:8	12:39	4	const char	*s
op	12:22	0:0	4	=
water	12:24	0:0	4	m
op	12:25	0:0	4	->
water	12:27	0:0	4	elems
op	12:32	0:0	4	[
water	12:33	0:0	4	i
op	12:34	0:0	4	]
op	12:35	0:0	4	.
water	12:36	0:0	4	key
if	13:8	15:16	4	(flags & AV_DICT_MATCH_CASE)
cond	13:12	13:20	5	flags & AV_DICT_MATCH_CASE
water	13:12	0:0	6	flags
op	13:18	0:0	6	&
water	13:20	0:0	6	AV_DICT_MATCH_CASE
stmts	14:12	15:16	5	
for	14:12	15:16	6	(j = 0 ;s [ j ] == key [ j ] && key [ j ];j ++)
forinit	14:17	14:22	7	j = 0 ;
water	14:17	0:0	8	j
op	14:19	0:0	8	=
water	14:21	0:0	8	0
water	14:22	0:0	8	;
cond	14:24	14:47	7	s [ j ] == key [ j ] && key [ j ]
water	14:24	0:0	8	s
op	14:25	0:0	8	[
water	14:26	0:0	8	j
op	14:27	0:0	8	]
op	14:29	0:0	8	==
water	14:32	0:0	8	key
op	14:35	0:0	8	[
water	14:36	0:0	8	j
op	14:37	0:0	8	]
op	14:39	0:0	8	&&
water	14:42	0:0	8	key
op	14:45	0:0	8	[
water	14:46	0:0	8	j
op	14:47	0:0	8	]
forexpr	14:50	14:51	7	j ++
water	14:50	0:0	8	j
op	14:51	0:0	8	++
stmts	15:16	15:16	7	
water	15:16	0:0	8	;
else	16:8	18:16	4
stmts	17:12	18:16	5	
for	17:12	18:16	6	(j = 0 ;av_toupper (s [ j ] ) ==av_toupper (key [ j ] ) && key [ j ];j ++)
forinit	17:17	17:22	7	j = 0 ;
water	17:17	0:0	8	j
op	17:19	0:0	8	=
water	17:21	0:0	8	0
water	17:22	0:0	8	;
cond	17:24	17:71	7	av_toupper (s [ j ] ) ==av_toupper (key [ j ] ) && key [ j ]
call	17:24	17:39	8	av_toupper
arg	17:35	17:39	9	s[j]
water	17:35	0:0	10	s
op	17:36	0:0	10	[
water	17:37	0:0	10	j
op	17:38	0:0	10	]
op	17:41	0:0	8	==
call	17:44	17:61	8	av_toupper
arg	17:55	17:61	9	key[j]
water	17:55	0:0	10	key
op	17:58	0:0	10	[
water	17:59	0:0	10	j
op	17:60	0:0	10	]
op	17:63	0:0	8	&&
water	17:66	0:0	8	key
op	17:69	0:0	8	[
water	17:70	0:0	8	j
op	17:71	0:0	8	]
forexpr	17:74	17:75	7	j ++
water	17:74	0:0	8	j
op	17:75	0:0	8	++
stmts	18:16	18:16	7	
water	18:16	0:0	8	;
if	19:8	20:20	4	(key [ j ])
cond	19:12	19:17	5	key [ j ]
water	19:12	0:0	6	key
op	19:15	0:0	6	[
water	19:16	0:0	6	j
op	19:17	0:0	6	]
stmts	20:12	20:20	5	
continue	20:12	20:20	6	
if	21:8	22:20	4	(s [ j ] && ! ( flags & AV_DICT_IGNORE_SUFFIX ))
cond	21:12	21:51	5	s [ j ] && ! ( flags & AV_DICT_IGNORE_SUFFIX )
water	21:12	0:0	6	s
op	21:13	0:0	6	[
water	21:14	0:0	6	j
op	21:15	0:0	6	]
op	21:17	0:0	6	&&
op	21:20	0:0	6	!
water	21:21	0:0	6	(
water	21:22	0:0	6	flags
op	21:28	0:0	6	&
water	21:30	0:0	6	AV_DICT_IGNORE_SUFFIX
water	21:51	0:0	6	)
stmts	22:12	22:20	5	
continue	22:12	22:20	6	
return	23:8	23:27	4	&m->elems[i]
op	23:15	0:0	5	&
water	23:16	0:0	5	m
op	23:17	0:0	5	->
water	23:19	0:0	5	elems
op	23:24	0:0	5	[
water	23:25	0:0	5	i
op	23:26	0:0	5	]
water	24:4	0:0	4	}
return	25:4	25:15	2	NULL
water	25:11	0:0	3	NULL
