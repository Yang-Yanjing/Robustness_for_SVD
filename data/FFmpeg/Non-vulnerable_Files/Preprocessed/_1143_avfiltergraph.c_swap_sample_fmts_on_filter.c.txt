func	1:0	49:0	0	static void	swap_sample_fmts_on_filter
params	1:38	0:0	1	
param	1:39	1:62	2	AVFilterContext *	filter
stmnts	0:0	48:4	1	
decl	3:4	3:29	2	AVFilterLink	*link
op	3:23	0:0	2	=
water	3:25	0:0	2	NULL
decl	4:4	4:19	2	int	format
water	4:14	0:0	2	,
decl	4:4	4:19	2	int	bps
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
for	6:4	11:4	2	(i = 0 ;i < filter -> nb_inputs;i ++)
forinit	6:9	6:14	3	i = 0 ;
water	6:9	0:0	4	i
op	6:11	0:0	4	=
water	6:13	0:0	4	0
water	6:14	0:0	4	;
cond	6:16	6:28	3	i < filter -> nb_inputs
water	6:16	0:0	4	i
op	6:18	0:0	4	<
water	6:20	0:0	4	filter
op	6:26	0:0	4	->
water	6:28	0:0	4	nb_inputs
forexpr	6:39	6:40	3	i ++
water	6:39	0:0	4	i
op	6:40	0:0	4	++
stmts	6:44	11:4	3	
water	6:44	0:0	4	{
water	7:8	0:0	4	link
op	7:13	0:0	4	=
water	7:15	0:0	4	filter
op	7:21	0:0	4	->
water	7:23	0:0	4	inputs
op	7:29	0:0	4	[
water	7:30	0:0	4	i
op	7:31	0:0	4	]
water	7:32	0:0	4	;
if	8:8	10:17	4	(link -> type == AVMEDIA_TYPE_AUDIO && link -> out_formats -> nb_formats == 1)
cond	8:12	9:45	5	link -> type == AVMEDIA_TYPE_AUDIO && link -> out_formats -> nb_formats == 1
water	8:12	0:0	6	link
op	8:16	0:0	6	->
water	8:18	0:0	6	type
op	8:23	0:0	6	==
water	8:26	0:0	6	AVMEDIA_TYPE_AUDIO
op	8:45	0:0	6	&&
water	9:12	0:0	6	link
op	9:16	0:0	6	->
water	9:18	0:0	6	out_formats
op	9:29	0:0	6	->
water	9:31	0:0	6	nb_formats
op	9:42	0:0	6	==
water	9:45	0:0	6	1
stmts	10:12	10:17	5	
break	10:12	10:17	6	
water	11:4	0:0	4	}
if	12:4	13:14	2	(i == filter -> nb_inputs)
cond	12:8	12:21	3	i == filter -> nb_inputs
water	12:8	0:0	4	i
op	12:10	0:0	4	==
water	12:13	0:0	4	filter
op	12:19	0:0	4	->
water	12:21	0:0	4	nb_inputs
stmts	13:8	13:14	3	
return	13:8	13:14	4	
water	14:4	0:0	2	format
op	14:11	0:0	2	=
water	14:13	0:0	2	link
op	14:17	0:0	2	->
water	14:19	0:0	2	out_formats
op	14:30	0:0	2	->
water	14:32	0:0	2	formats
op	14:39	0:0	2	[
water	14:40	0:0	2	0
op	14:41	0:0	2	]
water	14:42	0:0	2	;
water	15:4	0:0	2	bps
op	15:11	0:0	2	=
call	15:13	15:43	2	av_get_bytes_per_sample
arg	15:37	15:43	3	format
water	15:37	0:0	4	format
water	15:44	0:0	2	;
for	16:4	48:4	2	(i = 0 ;i < filter -> nb_outputs;i ++)
forinit	16:9	16:14	3	i = 0 ;
water	16:9	0:0	4	i
op	16:11	0:0	4	=
water	16:13	0:0	4	0
water	16:14	0:0	4	;
cond	16:16	16:28	3	i < filter -> nb_outputs
water	16:16	0:0	4	i
op	16:18	0:0	4	<
water	16:20	0:0	4	filter
op	16:26	0:0	4	->
water	16:28	0:0	4	nb_outputs
forexpr	16:40	16:41	3	i ++
water	16:40	0:0	4	i
op	16:41	0:0	4	++
stmts	16:45	48:4	3	
water	16:45	0:0	4	{
decl	17:8	17:50	4	AVFilterLink	*outlink
op	17:30	0:0	4	=
water	17:32	0:0	4	filter
op	17:38	0:0	4	->
water	17:40	0:0	4	outputs
op	17:47	0:0	4	[
water	17:48	0:0	4	i
op	17:49	0:0	4	]
decl	18:8	18:47	4	int	best_idx
op	18:21	0:0	4	=
op	18:23	0:0	4	-
water	18:24	0:0	4	1
water	18:25	0:0	4	,
decl	18:8	18:47	4	int	best_score
op	18:38	0:0	4	=
water	18:40	0:0	4	INT_MIN
if	19:8	21:20	4	(outlink -> type != AVMEDIA_TYPE_AUDIO || outlink -> in_formats -> nb_formats < 2)
cond	19:12	20:46	5	outlink -> type != AVMEDIA_TYPE_AUDIO || outlink -> in_formats -> nb_formats < 2
water	19:12	0:0	6	outlink
op	19:19	0:0	6	->
water	19:21	0:0	6	type
op	19:26	0:0	6	!=
water	19:29	0:0	6	AVMEDIA_TYPE_AUDIO
op	19:48	0:0	6	||
water	20:12	0:0	6	outlink
op	20:19	0:0	6	->
water	20:21	0:0	6	in_formats
op	20:31	0:0	6	->
water	20:33	0:0	6	nb_formats
op	20:44	0:0	6	<
water	20:46	0:0	6	2
stmts	21:12	21:20	5	
continue	21:12	21:20	6	
for	22:8	44:8	4	(j = 0 ;j < outlink -> in_formats -> nb_formats;j ++)
forinit	22:13	22:18	5	j = 0 ;
water	22:13	0:0	6	j
op	22:15	0:0	6	=
water	22:17	0:0	6	0
water	22:18	0:0	6	;
cond	22:20	22:45	5	j < outlink -> in_formats -> nb_formats
water	22:20	0:0	6	j
op	22:22	0:0	6	<
water	22:24	0:0	6	outlink
op	22:31	0:0	6	->
water	22:33	0:0	6	in_formats
op	22:43	0:0	6	->
water	22:45	0:0	6	nb_formats
forexpr	22:57	22:58	5	j ++
water	22:57	0:0	6	j
op	22:58	0:0	6	++
stmts	22:62	44:8	5	
water	22:62	0:0	6	{
decl	23:12	23:60	6	int	out_format
op	23:27	0:0	6	=
water	23:29	0:0	6	outlink
op	23:36	0:0	6	->
water	23:38	0:0	6	in_formats
op	23:48	0:0	6	->
water	23:50	0:0	6	formats
op	23:57	0:0	6	[
water	23:58	0:0	6	j
op	23:59	0:0	6	]
decl	24:12	24:64	6	int	out_bps
op	24:27	0:0	6	=
call	24:29	24:63	7	av_get_bytes_per_sample
arg	24:53	24:63	8	out_format
water	24:53	0:0	9	out_format
decl	25:12	25:21	6	int	score
if	26:12	30:12	6	(av_get_packed_sample_fmt (out_format ) == format ||av_get_planar_sample_fmt (out_format ) == format)
cond	26:16	27:56	7	av_get_packed_sample_fmt (out_format ) == format ||av_get_planar_sample_fmt (out_format ) == format
call	26:16	26:51	8	av_get_packed_sample_fmt
arg	26:41	26:51	9	out_format
water	26:41	0:0	10	out_format
op	26:53	0:0	8	==
water	26:56	0:0	8	format
op	26:63	0:0	8	||
call	27:16	27:51	8	av_get_planar_sample_fmt
arg	27:41	27:51	9	out_format
water	27:41	0:0	10	out_format
op	27:53	0:0	8	==
water	27:56	0:0	8	format
stmts	27:64	30:12	7	
water	27:64	0:0	8	{
water	28:16	0:0	8	best_idx
op	28:27	0:0	8	=
water	28:29	0:0	8	j
water	28:30	0:0	8	;
break	29:16	29:21	8	
water	30:12	0:0	8	}
if	32:12	35:12	6	(bps == 4 && out_bps == 8)
cond	32:16	32:39	7	bps == 4 && out_bps == 8
water	32:16	0:0	8	bps
op	32:20	0:0	8	==
water	32:23	0:0	8	4
op	32:25	0:0	8	&&
water	32:28	0:0	8	out_bps
op	32:36	0:0	8	==
water	32:39	0:0	8	8
stmts	32:42	35:12	7	
water	32:42	0:0	8	{
water	33:16	0:0	8	best_idx
op	33:25	0:0	8	=
water	33:27	0:0	8	j
water	33:28	0:0	8	;
break	34:16	34:21	8	
water	35:12	0:0	8	}
water	37:12	0:0	6	score
op	37:18	0:0	6	=
op	37:20	0:0	6	-
call	37:21	37:38	6	abs
arg	37:25	37:38	7	out_bps-bps
water	37:25	0:0	8	out_bps
op	37:33	0:0	8	-
water	37:35	0:0	8	bps
water	37:39	0:0	6	;
if	38:12	39:34	6	(out_bps >= bps)
cond	38:16	38:27	7	out_bps >= bps
water	38:16	0:0	8	out_bps
op	38:24	0:0	8	>=
water	38:27	0:0	8	bps
stmts	39:16	39:34	7	
water	39:16	0:0	8	score
op	39:22	0:0	8	+=
water	39:25	0:0	8	INT_MAX
op	39:32	0:0	8	/
water	39:33	0:0	8	2
water	39:34	0:0	8	;
if	40:12	43:12	6	(score > best_score)
cond	40:16	40:24	7	score > best_score
water	40:16	0:0	8	score
op	40:22	0:0	8	>
water	40:24	0:0	8	best_score
stmts	40:36	43:12	7	
water	40:36	0:0	8	{
water	41:16	0:0	8	best_score
op	41:27	0:0	8	=
water	41:29	0:0	8	score
water	41:34	0:0	8	;
water	42:16	0:0	8	best_idx
op	42:27	0:0	8	=
water	42:29	0:0	8	j
water	42:30	0:0	8	;
water	43:12	0:0	8	}
water	44:8	0:0	6	}
call	45:8	45:32	4	av_assert0
arg	45:19	45:32	5	best_idx>=0
water	45:19	0:0	6	best_idx
op	45:28	0:0	6	>=
water	45:31	0:0	6	0
water	45:33	0:0	4	;
call	46:8	47:53	4	FFSWAP
arg	46:15	46:18	5	int
water	46:15	0:0	6	int
arg	46:20	46:51	5	outlink->in_formats->formats[0]
water	46:20	0:0	6	outlink
op	46:27	0:0	6	->
water	46:29	0:0	6	in_formats
op	46:39	0:0	6	->
water	46:41	0:0	6	formats
op	46:48	0:0	6	[
water	46:49	0:0	6	0
op	46:50	0:0	6	]
arg	47:15	47:53	5	outlink->in_formats->formats[best_idx]
water	47:15	0:0	6	outlink
op	47:22	0:0	6	->
water	47:24	0:0	6	in_formats
op	47:34	0:0	6	->
water	47:36	0:0	6	formats
op	47:43	0:0	6	[
water	47:44	0:0	6	best_idx
op	47:52	0:0	6	]
water	47:54	0:0	4	;
water	48:4	0:0	4	}
