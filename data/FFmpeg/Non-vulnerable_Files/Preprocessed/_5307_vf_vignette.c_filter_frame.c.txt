func	1:0	72:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:57	2	AVFrame *	in
stmnts	3:4	71:40	1	
water	3:4	0:0	2	unsigned
water	3:13	0:0	2	x
water	3:14	0:0	2	,
water	3:16	0:0	2	y
water	3:17	0:0	2	,
water	3:19	0:0	2	direct
op	3:26	0:0	2	=
water	3:28	0:0	2	0
water	3:29	0:0	2	;
decl	4:4	4:38	2	AVFilterContext	*ctx
op	4:25	0:0	2	=
water	4:27	0:0	2	inlink
op	4:33	0:0	2	->
water	4:35	0:0	2	dst
decl	5:4	5:34	2	VignetteContext	*s
op	5:23	0:0	2	=
water	5:25	0:0	2	ctx
op	5:28	0:0	2	->
water	5:30	0:0	2	priv
decl	6:4	6:43	2	AVFilterLink	*outlink
op	6:26	0:0	2	=
water	6:28	0:0	2	ctx
op	6:31	0:0	2	->
water	6:33	0:0	2	outputs
op	6:40	0:0	2	[
water	6:41	0:0	2	0
op	6:42	0:0	2	]
decl	7:4	7:16	2	AVFrame	*out
if	8:4	11:4	2	(av_frame_is_writable (in ))
cond	8:8	8:31	3	av_frame_is_writable (in )
call	8:8	8:31	4	av_frame_is_writable
arg	8:29	8:31	5	in
water	8:29	0:0	6	in
stmts	8:34	11:4	3	
water	8:34	0:0	4	{
water	9:8	0:0	4	direct
op	9:15	0:0	4	=
water	9:17	0:0	4	1
water	9:18	0:0	4	;
water	10:8	0:0	4	out
op	10:12	0:0	4	=
water	10:14	0:0	4	in
water	10:16	0:0	4	;
water	11:4	0:0	4	}
else	11:6	18:4	2
stmts	11:11	18:4	3	
water	11:11	0:0	4	{
water	12:8	0:0	4	out
op	12:12	0:0	4	=
call	12:14	12:65	4	ff_get_video_buffer
arg	12:34	12:41	5	outlink
water	12:34	0:0	6	outlink
arg	12:43	12:53	5	outlink->w
water	12:43	0:0	6	outlink
op	12:50	0:0	6	->
water	12:52	0:0	6	w
arg	12:55	12:65	5	outlink->h
water	12:55	0:0	6	outlink
op	12:62	0:0	6	->
water	12:64	0:0	6	h
water	12:66	0:0	4	;
if	13:8	16:8	4	(! out)
cond	13:12	13:13	5	! out
op	13:12	0:0	6	!
water	13:13	0:0	6	out
stmts	13:18	16:8	5	
water	13:18	0:0	6	{
call	14:12	14:29	6	av_frame_free
arg	14:26	14:29	7	&in
op	14:26	0:0	8	&
water	14:27	0:0	8	in
water	14:30	0:0	6	;
return	15:12	15:34	6	AVERROR(ENOMEM)
call	15:19	15:33	7	AVERROR
arg	15:27	15:33	8	ENOMEM
water	15:27	0:0	9	ENOMEM
water	16:8	0:0	6	}
call	17:8	17:35	4	av_frame_copy_props
arg	17:28	17:31	5	out
water	17:28	0:0	6	out
arg	17:33	17:35	5	in
water	17:33	0:0	6	in
water	17:36	0:0	4	;
water	18:4	0:0	4	}
if	19:4	20:37	2	(s -> eval_mode == EVAL_MODE_FRAME)
cond	19:8	19:24	3	s -> eval_mode == EVAL_MODE_FRAME
water	19:8	0:0	4	s
op	19:9	0:0	4	->
water	19:11	0:0	4	eval_mode
op	19:21	0:0	4	==
water	19:24	0:0	4	EVAL_MODE_FRAME
stmts	20:8	20:37	3	
call	20:8	20:36	4	update_context
arg	20:23	20:24	5	s
water	20:23	0:0	6	s
arg	20:26	20:32	5	inlink
water	20:26	0:0	6	inlink
arg	20:34	20:36	5	in
water	20:34	0:0	6	in
water	20:37	0:0	4	;
if	21:4	41:4	2	(s -> desc -> flags & AV_PIX_FMT_FLAG_RGB)
cond	21:8	21:25	3	s -> desc -> flags & AV_PIX_FMT_FLAG_RGB
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	desc
op	21:15	0:0	4	->
water	21:17	0:0	4	flags
op	21:23	0:0	4	&
water	21:25	0:0	4	AV_PIX_FMT_FLAG_RGB
stmts	21:46	41:4	3	
water	21:46	0:0	4	{
decl	22:8	22:41	4	uint8_t	*dst
op	22:27	0:0	4	=
water	22:29	0:0	4	out
op	22:32	0:0	4	->
water	22:34	0:0	4	data
op	22:38	0:0	4	[
water	22:39	0:0	4	0
op	22:40	0:0	4	]
decl	23:8	23:41	4	const uint8_t	*src
op	23:27	0:0	4	=
water	23:29	0:0	4	in
op	23:32	0:0	4	->
water	23:34	0:0	4	data
op	23:38	0:0	4	[
water	23:39	0:0	4	0
op	23:40	0:0	4	]
decl	24:8	24:35	4	const float	*fmap
op	24:26	0:0	4	=
water	24:28	0:0	4	s
op	24:29	0:0	4	->
water	24:31	0:0	4	fmap
decl	25:8	25:49	4	const int	dst_linesize
op	25:31	0:0	4	=
water	25:33	0:0	4	out
op	25:36	0:0	4	->
water	25:38	0:0	4	linesize
op	25:46	0:0	4	[
water	25:47	0:0	4	0
op	25:48	0:0	4	]
decl	26:8	26:49	4	const int	src_linesize
op	26:31	0:0	4	=
water	26:33	0:0	4	in
op	26:36	0:0	4	->
water	26:38	0:0	4	linesize
op	26:46	0:0	4	[
water	26:47	0:0	4	0
op	26:48	0:0	4	]
decl	27:8	27:50	4	const int	fmap_linesize
op	27:32	0:0	4	=
water	27:34	0:0	4	s
op	27:35	0:0	4	->
water	27:37	0:0	4	fmap_linesize
for	28:8	40:8	4	(y = 0 ;y < inlink -> h;y ++)
forinit	28:13	28:18	5	y = 0 ;
water	28:13	0:0	6	y
op	28:15	0:0	6	=
water	28:17	0:0	6	0
water	28:18	0:0	6	;
cond	28:20	28:32	5	y < inlink -> h
water	28:20	0:0	6	y
op	28:22	0:0	6	<
water	28:24	0:0	6	inlink
op	28:30	0:0	6	->
water	28:32	0:0	6	h
forexpr	28:35	28:36	5	y ++
water	28:35	0:0	6	y
op	28:36	0:0	6	++
stmts	28:40	40:8	5	
water	28:40	0:0	6	{
decl	29:12	29:37	6	uint8_t	*dstp
op	29:32	0:0	6	=
water	29:34	0:0	6	dst
decl	30:12	30:37	6	const uint8_t	*srcp
op	30:32	0:0	6	=
water	30:34	0:0	6	src
for	31:12	36:12	6	(x = 0 ;x < inlink -> w;x ++ , dstp += 3 , srcp += 3)
forinit	31:17	31:22	7	x = 0 ;
water	31:17	0:0	8	x
op	31:19	0:0	8	=
water	31:21	0:0	8	0
water	31:22	0:0	8	;
cond	31:24	31:36	7	x < inlink -> w
water	31:24	0:0	8	x
op	31:26	0:0	8	<
water	31:28	0:0	8	inlink
op	31:34	0:0	8	->
water	31:36	0:0	8	w
forexpr	31:39	31:63	7	x ++ , dstp += 3 , srcp += 3
water	31:39	0:0	8	x
op	31:40	0:0	8	++
water	31:42	0:0	8	,
water	31:44	0:0	8	dstp
op	31:49	0:0	8	+=
water	31:52	0:0	8	3
water	31:53	0:0	8	,
water	31:55	0:0	8	srcp
op	31:60	0:0	8	+=
water	31:63	0:0	8	3
stmts	31:66	36:12	7	
water	31:66	0:0	8	{
decl	32:16	32:39	8	const float	f
op	32:30	0:0	8	=
water	32:32	0:0	8	fmap
op	32:36	0:0	8	[
water	32:37	0:0	8	x
op	32:38	0:0	8	]
water	33:16	0:0	8	dstp
op	33:20	0:0	8	[
water	33:21	0:0	8	0
op	33:22	0:0	8	]
op	33:24	0:0	8	=
call	33:26	33:73	8	av_clip_uint8
arg	33:40	33:73	9	srcp[0]*f+get_dither_value(s)
water	33:40	0:0	10	srcp
op	33:44	0:0	10	[
water	33:45	0:0	10	0
op	33:46	0:0	10	]
op	33:48	0:0	10	*
water	33:50	0:0	10	f
op	33:52	0:0	10	+
call	33:54	33:72	10	get_dither_value
arg	33:71	33:72	11	s
water	33:71	0:0	12	s
water	33:74	0:0	8	;
water	34:16	0:0	8	dstp
op	34:20	0:0	8	[
water	34:21	0:0	8	1
op	34:22	0:0	8	]
op	34:24	0:0	8	=
call	34:26	34:73	8	av_clip_uint8
arg	34:40	34:73	9	srcp[1]*f+get_dither_value(s)
water	34:40	0:0	10	srcp
op	34:44	0:0	10	[
water	34:45	0:0	10	1
op	34:46	0:0	10	]
op	34:48	0:0	10	*
water	34:50	0:0	10	f
op	34:52	0:0	10	+
call	34:54	34:72	10	get_dither_value
arg	34:71	34:72	11	s
water	34:71	0:0	12	s
water	34:74	0:0	8	;
water	35:16	0:0	8	dstp
op	35:20	0:0	8	[
water	35:21	0:0	8	2
op	35:22	0:0	8	]
op	35:24	0:0	8	=
call	35:26	35:73	8	av_clip_uint8
arg	35:40	35:73	9	srcp[2]*f+get_dither_value(s)
water	35:40	0:0	10	srcp
op	35:44	0:0	10	[
water	35:45	0:0	10	2
op	35:46	0:0	10	]
op	35:48	0:0	10	*
water	35:50	0:0	10	f
op	35:52	0:0	10	+
call	35:54	35:72	10	get_dither_value
arg	35:71	35:72	11	s
water	35:71	0:0	12	s
water	35:74	0:0	8	;
water	36:12	0:0	8	}
water	37:12	0:0	6	dst
op	37:16	0:0	6	+=
water	37:19	0:0	6	dst_linesize
water	37:31	0:0	6	;
water	38:12	0:0	6	src
op	38:16	0:0	6	+=
water	38:19	0:0	6	src_linesize
water	38:31	0:0	6	;
water	39:12	0:0	6	fmap
op	39:17	0:0	6	+=
water	39:20	0:0	6	fmap_linesize
water	39:33	0:0	6	;
water	40:8	0:0	6	}
water	41:4	0:0	4	}
else	41:6	68:4	2
stmts	41:11	68:4	3	
water	41:11	0:0	4	{
decl	42:8	42:17	4	int	plane
for	43:8	67:8	4	(plane = 0 ;plane < 4 && in -> data [ plane ] && in -> linesize [ plane ];plane ++)
forinit	43:13	43:22	5	plane = 0 ;
water	43:13	0:0	6	plane
op	43:19	0:0	6	=
water	43:21	0:0	6	0
water	43:22	0:0	6	;
cond	43:24	43:74	5	plane < 4 && in -> data [ plane ] && in -> linesize [ plane ]
water	43:24	0:0	6	plane
op	43:30	0:0	6	<
water	43:32	0:0	6	4
op	43:34	0:0	6	&&
water	43:37	0:0	6	in
op	43:39	0:0	6	->
water	43:41	0:0	6	data
op	43:45	0:0	6	[
water	43:46	0:0	6	plane
op	43:51	0:0	6	]
op	43:53	0:0	6	&&
water	43:56	0:0	6	in
op	43:58	0:0	6	->
water	43:60	0:0	6	linesize
op	43:68	0:0	6	[
water	43:69	0:0	6	plane
op	43:74	0:0	6	]
forexpr	43:77	43:82	5	plane ++
water	43:77	0:0	6	plane
op	43:82	0:0	6	++
stmts	43:86	67:8	5	
water	43:86	0:0	6	{
decl	44:12	44:49	6	uint8_t	*dst
op	44:31	0:0	6	=
water	44:33	0:0	6	out
op	44:36	0:0	6	->
water	44:38	0:0	6	data
op	44:42	0:0	6	[
water	44:43	0:0	6	plane
op	44:48	0:0	6	]
decl	45:12	45:49	6	const uint8_t	*src
op	45:31	0:0	6	=
water	45:33	0:0	6	in
op	45:36	0:0	6	->
water	45:38	0:0	6	data
op	45:42	0:0	6	[
water	45:43	0:0	6	plane
op	45:48	0:0	6	]
decl	46:12	46:39	6	const float	*fmap
op	46:30	0:0	6	=
water	46:32	0:0	6	s
op	46:33	0:0	6	->
water	46:35	0:0	6	fmap
decl	47:12	47:57	6	const int	dst_linesize
op	47:35	0:0	6	=
water	47:37	0:0	6	out
op	47:40	0:0	6	->
water	47:42	0:0	6	linesize
op	47:50	0:0	6	[
water	47:51	0:0	6	plane
op	47:56	0:0	6	]
decl	48:12	48:57	6	const int	src_linesize
op	48:35	0:0	6	=
water	48:37	0:0	6	in
op	48:40	0:0	6	->
water	48:42	0:0	6	linesize
op	48:50	0:0	6	[
water	48:51	0:0	6	plane
op	48:56	0:0	6	]
decl	49:12	49:54	6	const int	fmap_linesize
op	49:36	0:0	6	=
water	49:38	0:0	6	s
op	49:39	0:0	6	->
water	49:41	0:0	6	fmap_linesize
decl	50:12	50:55	6	const int	chroma
op	50:29	0:0	6	=
water	50:31	0:0	6	plane
op	50:37	0:0	6	==
water	50:40	0:0	6	1
op	50:42	0:0	6	||
water	50:45	0:0	6	plane
op	50:51	0:0	6	==
water	50:54	0:0	6	2
decl	51:12	51:64	6	const int	hsub
op	51:27	0:0	6	=
water	51:29	0:0	6	chroma
water	51:36	0:0	6	?
water	51:38	0:0	6	s
op	51:39	0:0	6	->
water	51:41	0:0	6	desc
op	51:45	0:0	6	->
water	51:47	0:0	6	log2_chroma_w
water	51:61	0:0	6	:
water	51:63	0:0	6	0
decl	52:12	52:64	6	const int	vsub
op	52:27	0:0	6	=
water	52:29	0:0	6	chroma
water	52:36	0:0	6	?
water	52:38	0:0	6	s
op	52:39	0:0	6	->
water	52:41	0:0	6	desc
op	52:45	0:0	6	->
water	52:47	0:0	6	log2_chroma_h
water	52:61	0:0	6	:
water	52:63	0:0	6	0
decl	53:12	53:57	6	const int	w
op	53:24	0:0	6	=
call	53:26	53:56	7	FF_CEIL_RSHIFT
arg	53:41	53:50	8	inlink->w
water	53:41	0:0	9	inlink
op	53:47	0:0	9	->
water	53:49	0:0	9	w
arg	53:52	53:56	8	hsub
water	53:52	0:0	9	hsub
decl	54:12	54:57	6	const int	h
op	54:24	0:0	6	=
call	54:26	54:56	7	FF_CEIL_RSHIFT
arg	54:41	54:50	8	inlink->h
water	54:41	0:0	9	inlink
op	54:47	0:0	9	->
water	54:49	0:0	9	h
arg	54:52	54:56	8	vsub
water	54:52	0:0	9	vsub
for	55:12	66:12	6	(y = 0 ;y < h;y ++)
forinit	55:17	55:22	7	y = 0 ;
water	55:17	0:0	8	y
op	55:19	0:0	8	=
water	55:21	0:0	8	0
water	55:22	0:0	8	;
cond	55:24	55:28	7	y < h
water	55:24	0:0	8	y
op	55:26	0:0	8	<
water	55:28	0:0	8	h
forexpr	55:31	55:32	7	y ++
water	55:31	0:0	8	y
op	55:32	0:0	8	++
stmts	55:36	66:12	7	
water	55:36	0:0	8	{
decl	56:16	56:35	8	uint8_t	*dstp
op	56:30	0:0	8	=
water	56:32	0:0	8	dst
decl	57:16	57:41	8	const uint8_t	*srcp
op	57:36	0:0	8	=
water	57:38	0:0	8	src
for	58:16	62:16	8	(x = 0 ;x < w;x ++)
forinit	58:21	58:26	9	x = 0 ;
water	58:21	0:0	10	x
op	58:23	0:0	10	=
water	58:25	0:0	10	0
water	58:26	0:0	10	;
cond	58:28	58:32	9	x < w
water	58:28	0:0	10	x
op	58:30	0:0	10	<
water	58:32	0:0	10	w
forexpr	58:35	58:36	9	x ++
water	58:35	0:0	10	x
op	58:36	0:0	10	++
stmts	58:40	62:16	9	
water	58:40	0:0	10	{
decl	59:20	59:57	10	const double	dv
op	59:36	0:0	10	=
call	59:38	59:56	11	get_dither_value
arg	59:55	59:56	12	s
water	59:55	0:0	13	s
if	60:20	60:101	10	(chroma)
cond	60:24	60:24	11	chroma
water	60:24	0:0	12	chroma
stmts	60:32	60:101	11	
op	60:32	0:0	12	*
water	60:33	0:0	12	dstp
op	60:37	0:0	12	++
op	60:40	0:0	12	=
call	60:42	60:100	12	av_clip_uint8
arg	60:56	60:100	13	fmap[x<<hsub]*(*srcp++-127)+127+dv
water	60:56	0:0	14	fmap
op	60:60	0:0	14	[
water	60:61	0:0	14	x
op	60:63	0:0	14	<<
water	60:66	0:0	14	hsub
op	60:70	0:0	14	]
op	60:72	0:0	14	*
water	60:74	0:0	14	(
op	60:75	0:0	14	*
water	60:76	0:0	14	srcp
op	60:80	0:0	14	++
op	60:83	0:0	14	-
water	60:85	0:0	14	127
water	60:88	0:0	14	)
op	60:90	0:0	14	+
water	60:92	0:0	14	127
op	60:96	0:0	14	+
water	60:98	0:0	14	dv
water	60:101	0:0	12	;
else	61:20	61:101	10
stmts	61:32	61:101	11	
op	61:32	0:0	12	*
water	61:33	0:0	12	dstp
op	61:37	0:0	12	++
op	61:40	0:0	12	=
call	61:42	61:100	12	av_clip_uint8
arg	61:56	61:100	13	fmap[x]**srcp+++dv
water	61:56	0:0	14	fmap
op	61:60	0:0	14	[
water	61:61	0:0	14	x
op	61:70	0:0	14	]
op	61:72	0:0	14	*
op	61:75	0:0	14	*
water	61:76	0:0	14	srcp
op	61:80	0:0	14	++
op	61:96	0:0	14	+
water	61:98	0:0	14	dv
water	61:101	0:0	12	;
water	62:16	0:0	10	}
water	63:16	0:0	8	dst
op	63:20	0:0	8	+=
water	63:23	0:0	8	dst_linesize
water	63:35	0:0	8	;
water	64:16	0:0	8	src
op	64:20	0:0	8	+=
water	64:23	0:0	8	src_linesize
water	64:35	0:0	8	;
water	65:16	0:0	8	fmap
op	65:21	0:0	8	+=
water	65:24	0:0	8	fmap_linesize
op	65:38	0:0	8	<<
water	65:41	0:0	8	vsub
water	65:45	0:0	8	;
water	66:12	0:0	8	}
water	67:8	0:0	6	}
water	68:4	0:0	4	}
if	69:4	70:26	2	(! direct)
cond	69:8	69:9	3	! direct
op	69:8	0:0	4	!
water	69:9	0:0	4	direct
stmts	70:8	70:26	3	
call	70:8	70:25	4	av_frame_free
arg	70:22	70:25	5	&in
op	70:22	0:0	6	&
water	70:23	0:0	6	in
water	70:26	0:0	4	;
return	71:4	71:40	2	ff_filter_frame(outlink,out)
call	71:11	71:39	3	ff_filter_frame
arg	71:27	71:34	4	outlink
water	71:27	0:0	5	outlink
arg	71:36	71:39	4	out
water	71:36	0:0	5	out
