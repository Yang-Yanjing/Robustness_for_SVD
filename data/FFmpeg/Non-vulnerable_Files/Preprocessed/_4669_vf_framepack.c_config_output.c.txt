func	1:0	59:0	0	static int	config_output
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	58:12	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:45	2	FramepackContext	*s
op	4:25	0:0	2	=
water	4:27	0:0	2	outlink
op	4:34	0:0	2	->
water	4:36	0:0	2	src
op	4:39	0:0	2	->
water	4:41	0:0	2	priv
decl	5:4	5:47	2	int	width
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	inputs
op	5:38	0:0	2	[
water	5:39	0:0	2	LEFT
op	5:43	0:0	2	]
op	5:44	0:0	2	->
water	5:46	0:0	2	w
decl	6:4	6:47	2	int	height
op	6:25	0:0	2	=
water	6:27	0:0	2	ctx
op	6:30	0:0	2	->
water	6:32	0:0	2	inputs
op	6:38	0:0	2	[
water	6:39	0:0	2	LEFT
op	6:43	0:0	2	]
op	6:44	0:0	2	->
water	6:46	0:0	2	h
decl	7:4	7:55	2	AVRational	time_base
op	7:25	0:0	2	=
water	7:27	0:0	2	ctx
op	7:30	0:0	2	->
water	7:32	0:0	2	inputs
op	7:38	0:0	2	[
water	7:39	0:0	2	LEFT
op	7:43	0:0	2	]
op	7:44	0:0	2	->
water	7:46	0:0	2	time_base
decl	8:4	8:57	2	AVRational	frame_rate
op	8:26	0:0	2	=
water	8:28	0:0	2	ctx
op	8:31	0:0	2	->
water	8:33	0:0	2	inputs
op	8:39	0:0	2	[
water	8:40	0:0	2	LEFT
op	8:44	0:0	2	]
op	8:45	0:0	2	->
water	8:47	0:0	2	frame_rate
if	10:4	17:4	2	(width != ctx -> inputs [ RIGHT ] -> w || height != ctx -> inputs [ RIGHT ] -> h)
cond	10:8	11:38	3	width != ctx -> inputs [ RIGHT ] -> w || height != ctx -> inputs [ RIGHT ] -> h
water	10:8	0:0	4	width
op	10:15	0:0	4	!=
water	10:18	0:0	4	ctx
op	10:21	0:0	4	->
water	10:23	0:0	4	inputs
op	10:29	0:0	4	[
water	10:30	0:0	4	RIGHT
op	10:35	0:0	4	]
op	10:36	0:0	4	->
water	10:38	0:0	4	w
op	10:40	0:0	4	||
water	11:8	0:0	4	height
op	11:15	0:0	4	!=
water	11:18	0:0	4	ctx
op	11:21	0:0	4	->
water	11:23	0:0	4	inputs
op	11:29	0:0	4	[
water	11:30	0:0	4	RIGHT
op	11:35	0:0	4	]
op	11:36	0:0	4	->
water	11:38	0:0	4	h
stmts	11:41	17:4	3	
water	11:41	0:0	4	{
call	12:8	15:59	4	av_log
arg	12:15	12:18	5	ctx
water	12:15	0:0	6	ctx
arg	12:20	12:32	5	AV_LOG_ERROR
water	12:20	0:0	6	AV_LOG_ERROR
arg	13:15	13:64	5	"Left and right sizes differ (%dx%d vs %dx%d).\n"
water	13:15	0:0	6	"Left and right sizes differ (%dx%d vs %dx%d).\n"
arg	14:15	14:20	5	width
water	14:15	0:0	6	width
arg	14:22	14:28	5	height
water	14:22	0:0	6	height
arg	15:15	15:36	5	ctx->inputs[RIGHT]->w
water	15:15	0:0	6	ctx
op	15:18	0:0	6	->
water	15:20	0:0	6	inputs
op	15:26	0:0	6	[
water	15:27	0:0	6	RIGHT
op	15:32	0:0	6	]
op	15:33	0:0	6	->
water	15:35	0:0	6	w
arg	15:38	15:59	5	ctx->inputs[RIGHT]->h
water	15:38	0:0	6	ctx
op	15:41	0:0	6	->
water	15:43	0:0	6	inputs
op	15:49	0:0	6	[
water	15:50	0:0	6	RIGHT
op	15:55	0:0	6	]
op	15:56	0:0	6	->
water	15:58	0:0	6	h
water	15:60	0:0	4	;
return	16:8	16:34	4	AVERROR_INVALIDDATA
water	16:15	0:0	5	AVERROR_INVALIDDATA
water	17:4	0:0	4	}
else	17:6	24:4	2
stmts	17:11	24:4	3	
if	17:11	24:4	4	(av_cmp_q (time_base ,ctx -> inputs [ RIGHT ] -> time_base ) != 0)
cond	17:15	17:69	5	av_cmp_q (time_base ,ctx -> inputs [ RIGHT ] -> time_base ) != 0
call	17:15	17:64	6	av_cmp_q
arg	17:24	17:33	7	time_base
water	17:24	0:0	8	time_base
arg	17:35	17:64	7	ctx->inputs[RIGHT]->time_base
water	17:35	0:0	8	ctx
op	17:38	0:0	8	->
water	17:40	0:0	8	inputs
op	17:46	0:0	8	[
water	17:47	0:0	8	RIGHT
op	17:52	0:0	8	]
op	17:53	0:0	8	->
water	17:55	0:0	8	time_base
op	17:66	0:0	6	!=
water	17:69	0:0	6	0
stmts	17:72	24:4	5	
water	17:72	0:0	6	{
call	18:8	22:48	6	av_log
arg	18:15	18:18	7	ctx
water	18:15	0:0	8	ctx
arg	18:20	18:32	7	AV_LOG_ERROR
water	18:20	0:0	8	AV_LOG_ERROR
arg	19:15	19:69	7	"Left and right time bases differ (%d/%d vs %d/%d).\n"
water	19:15	0:0	8	"Left and right time bases differ (%d/%d vs %d/%d).\n"
arg	20:15	20:28	7	time_base.num
water	20:15	0:0	8	time_base
op	20:24	0:0	8	.
water	20:25	0:0	8	num
arg	20:30	20:43	7	time_base.den
water	20:30	0:0	8	time_base
op	20:39	0:0	8	.
water	20:40	0:0	8	den
arg	21:15	21:48	7	ctx->inputs[RIGHT]->time_base.num
water	21:15	0:0	8	ctx
op	21:18	0:0	8	->
water	21:20	0:0	8	inputs
op	21:26	0:0	8	[
water	21:27	0:0	8	RIGHT
op	21:32	0:0	8	]
op	21:33	0:0	8	->
water	21:35	0:0	8	time_base
op	21:44	0:0	8	.
water	21:45	0:0	8	num
arg	22:15	22:48	7	ctx->inputs[RIGHT]->time_base.den
water	22:15	0:0	8	ctx
op	22:18	0:0	8	->
water	22:20	0:0	8	inputs
op	22:26	0:0	8	[
water	22:27	0:0	8	RIGHT
op	22:32	0:0	8	]
op	22:33	0:0	8	->
water	22:35	0:0	8	time_base
op	22:44	0:0	8	.
water	22:45	0:0	8	den
water	22:49	0:0	6	;
return	23:8	23:34	6	AVERROR_INVALIDDATA
water	23:15	0:0	7	AVERROR_INVALIDDATA
water	24:4	0:0	6	}
else	24:6	31:4	2
stmts	24:11	31:4	3	
if	24:11	31:4	4	(av_cmp_q (frame_rate ,ctx -> inputs [ RIGHT ] -> frame_rate ) != 0)
cond	24:15	24:71	5	av_cmp_q (frame_rate ,ctx -> inputs [ RIGHT ] -> frame_rate ) != 0
call	24:15	24:66	6	av_cmp_q
arg	24:24	24:34	7	frame_rate
water	24:24	0:0	8	frame_rate
arg	24:36	24:66	7	ctx->inputs[RIGHT]->frame_rate
water	24:36	0:0	8	ctx
op	24:39	0:0	8	->
water	24:41	0:0	8	inputs
op	24:47	0:0	8	[
water	24:48	0:0	8	RIGHT
op	24:53	0:0	8	]
op	24:54	0:0	8	->
water	24:56	0:0	8	frame_rate
op	24:68	0:0	6	!=
water	24:71	0:0	6	0
stmts	24:74	31:4	5	
water	24:74	0:0	6	{
call	25:8	29:49	6	av_log
arg	25:15	25:18	7	ctx
water	25:15	0:0	8	ctx
arg	25:20	25:32	7	AV_LOG_ERROR
water	25:20	0:0	8	AV_LOG_ERROR
arg	26:15	26:69	7	"Left and right framerates differ (%d/%d vs %d/%d).\n"
water	26:15	0:0	8	"Left and right framerates differ (%d/%d vs %d/%d).\n"
arg	27:15	27:29	7	frame_rate.num
water	27:15	0:0	8	frame_rate
op	27:25	0:0	8	.
water	27:26	0:0	8	num
arg	27:31	27:45	7	frame_rate.den
water	27:31	0:0	8	frame_rate
op	27:41	0:0	8	.
water	27:42	0:0	8	den
arg	28:15	28:49	7	ctx->inputs[RIGHT]->frame_rate.num
water	28:15	0:0	8	ctx
op	28:18	0:0	8	->
water	28:20	0:0	8	inputs
op	28:26	0:0	8	[
water	28:27	0:0	8	RIGHT
op	28:32	0:0	8	]
op	28:33	0:0	8	->
water	28:35	0:0	8	frame_rate
op	28:45	0:0	8	.
water	28:46	0:0	8	num
arg	29:15	29:49	7	ctx->inputs[RIGHT]->frame_rate.den
water	29:15	0:0	8	ctx
op	29:18	0:0	8	->
water	29:20	0:0	8	inputs
op	29:26	0:0	8	[
water	29:27	0:0	8	RIGHT
op	29:32	0:0	8	]
op	29:33	0:0	8	->
water	29:35	0:0	8	frame_rate
op	29:45	0:0	8	.
water	29:46	0:0	8	den
water	29:50	0:0	6	;
return	30:8	30:34	6	AVERROR_INVALIDDATA
water	30:15	0:0	7	AVERROR_INVALIDDATA
water	31:4	0:0	6	}
water	32:4	0:0	2	s
op	32:5	0:0	2	->
water	32:7	0:0	2	pix_desc
op	32:16	0:0	2	=
call	32:18	32:53	2	av_pix_fmt_desc_get
arg	32:38	32:53	3	outlink->format
water	32:38	0:0	4	outlink
op	32:45	0:0	4	->
water	32:47	0:0	4	format
water	32:54	0:0	2	;
if	33:4	34:26	2	(! s -> pix_desc)
cond	33:8	33:12	3	! s -> pix_desc
op	33:8	0:0	4	!
water	33:9	0:0	4	s
op	33:10	0:0	4	->
water	33:12	0:0	4	pix_desc
stmts	34:8	34:26	3	
return	34:8	34:26	4	AVERROR_BUG
water	34:15	0:0	5	AVERROR_BUG
switch	36:4	53:4	2	(s -> format)
cond	36:12	36:15	3	s -> format
water	36:12	0:0	4	s
op	36:13	0:0	4	->
water	36:15	0:0	4	format
stmts	36:23	53:4	3	
water	36:23	0:0	4	{
label	37:4	37:34	4	case AV_STEREO3D_FRAMESEQUENCE :
water	38:8	0:0	4	time_base
op	38:17	0:0	4	.
water	38:18	0:0	4	den
op	38:22	0:0	4	*=
water	38:25	0:0	4	2
water	38:26	0:0	4	;
water	39:8	0:0	4	frame_rate
op	39:18	0:0	4	.
water	39:19	0:0	4	num
op	39:23	0:0	4	*=
water	39:26	0:0	4	2
water	39:27	0:0	4	;
water	40:8	0:0	4	s
op	40:9	0:0	4	->
water	40:11	0:0	4	double_pts
op	40:22	0:0	4	=
water	40:24	0:0	4	AV_NOPTS_VALUE
water	40:38	0:0	4	;
break	41:8	41:13	4	
label	42:4	42:28	4	case AV_STEREO3D_COLUMNS :
label	43:4	43:31	4	case AV_STEREO3D_SIDEBYSIDE :
water	44:8	0:0	4	width
op	44:14	0:0	4	*=
water	44:17	0:0	4	2
water	44:18	0:0	4	;
break	45:8	45:13	4	
label	46:4	46:26	4	case AV_STEREO3D_LINES :
label	47:4	47:30	4	case AV_STEREO3D_TOPBOTTOM :
water	48:8	0:0	4	height
op	48:15	0:0	4	*=
water	48:18	0:0	4	2
water	48:19	0:0	4	;
break	49:8	49:13	4	
label	50:4	50:11	4	default :
call	51:8	51:57	4	av_log
arg	51:15	51:18	5	ctx
water	51:15	0:0	6	ctx
arg	51:20	51:32	5	AV_LOG_ERROR
water	51:20	0:0	6	AV_LOG_ERROR
arg	51:34	51:57	5	"Unknown packing mode."
water	51:34	0:0	6	"Unknown packing mode."
water	51:58	0:0	4	;
return	52:8	52:34	4	AVERROR_INVALIDDATA
water	52:15	0:0	5	AVERROR_INVALIDDATA
water	53:4	0:0	4	}
water	54:4	0:0	2	outlink
op	54:11	0:0	2	->
water	54:13	0:0	2	w
op	54:23	0:0	2	=
water	54:25	0:0	2	width
water	54:30	0:0	2	;
water	55:4	0:0	2	outlink
op	55:11	0:0	2	->
water	55:13	0:0	2	h
op	55:23	0:0	2	=
water	55:25	0:0	2	height
water	55:31	0:0	2	;
water	56:4	0:0	2	outlink
op	56:11	0:0	2	->
water	56:13	0:0	2	time_base
op	56:23	0:0	2	=
water	56:25	0:0	2	time_base
water	56:34	0:0	2	;
water	57:4	0:0	2	outlink
op	57:11	0:0	2	->
water	57:13	0:0	2	frame_rate
op	57:23	0:0	2	=
water	57:25	0:0	2	frame_rate
water	57:35	0:0	2	;
return	58:4	58:12	2	0
water	58:11	0:0	3	0
