func	1:0	94:0	0	static int	read_interval_packets
params	1:32	0:0	1	
param	1:33	1:49	2	WriterContext *	w
param	1:51	1:67	2	InputFile *	ifile
param	2:33	2:61	2	const ReadInterval *	interval
param	2:63	2:78	2	int64_t *	cur_ts
stmnts	0:0	93:14	1	
decl	4:4	4:45	2	AVFormatContext	*fmt_ctx
op	4:29	0:0	2	=
water	4:31	0:0	2	ifile
op	4:36	0:0	2	->
water	4:38	0:0	2	fmt_ctx
decl	5:4	5:22	2	AVPacket	pkt
water	5:16	0:0	2	,
decl	5:4	5:22	2	AVPacket	pkt1
decl	6:4	6:25	2	AVFrame	*frame
op	6:19	0:0	2	=
water	6:21	0:0	2	NULL
decl	7:4	7:39	2	int	ret
op	7:12	0:0	2	=
water	7:14	0:0	2	0
water	7:15	0:0	2	,
decl	7:4	7:39	2	int	i
op	7:19	0:0	2	=
water	7:21	0:0	2	0
water	7:22	0:0	2	,
decl	7:4	7:39	2	int	frame_count
op	7:36	0:0	2	=
water	7:38	0:0	2	0
decl	8:4	8:51	2	int64_t	start
op	8:18	0:0	2	=
op	8:20	0:0	2	-
water	8:21	0:0	2	INT64_MAX
water	8:30	0:0	2	,
decl	8:4	8:51	2	int64_t	end
op	8:36	0:0	2	=
water	8:38	0:0	2	interval
op	8:46	0:0	2	->
water	8:48	0:0	2	end
decl	9:4	9:78	2	int	has_start
op	9:18	0:0	2	=
water	9:20	0:0	2	0
water	9:21	0:0	2	,
decl	9:4	9:78	2	int	has_end
op	9:31	0:0	2	=
water	9:33	0:0	2	interval
op	9:41	0:0	2	->
water	9:43	0:0	2	has_end
op	9:51	0:0	2	&&
op	9:54	0:0	2	!
water	9:55	0:0	2	interval
op	9:63	0:0	2	->
water	9:65	0:0	2	end_is_offset
call	10:4	10:23	2	av_init_packet
arg	10:19	10:23	3	&pkt
op	10:19	0:0	4	&
water	10:20	0:0	4	pkt
water	10:24	0:0	2	;
call	11:4	11:60	2	av_log
arg	11:11	11:15	3	NULL
water	11:11	0:0	4	NULL
arg	11:17	11:31	3	AV_LOG_VERBOSE
water	11:17	0:0	4	AV_LOG_VERBOSE
arg	11:33	11:60	3	"Processing read interval "
water	11:33	0:0	4	"Processing read interval "
water	11:61	0:0	2	;
call	12:4	12:52	2	log_read_interval
arg	12:22	12:30	3	interval
water	12:22	0:0	4	interval
arg	12:32	12:36	3	NULL
water	12:32	0:0	4	NULL
arg	12:38	12:52	3	AV_LOG_VERBOSE
water	12:38	0:0	4	AV_LOG_VERBOSE
water	12:53	0:0	2	;
if	13:4	34:4	2	(interval -> has_start)
cond	13:8	13:18	3	interval -> has_start
water	13:8	0:0	4	interval
op	13:16	0:0	4	->
water	13:18	0:0	4	has_start
stmts	13:29	34:4	3	
water	13:29	0:0	4	{
decl	14:8	14:22	4	int64_t	target
if	15:8	24:8	4	(interval -> start_is_offset)
cond	15:12	15:22	5	interval -> start_is_offset
water	15:12	0:0	6	interval
op	15:20	0:0	6	->
water	15:22	0:0	6	start_is_offset
stmts	15:39	24:8	5	
water	15:39	0:0	6	{
if	16:12	22:12	6	(* cur_ts == AV_NOPTS_VALUE)
cond	16:16	16:27	7	* cur_ts == AV_NOPTS_VALUE
op	16:16	0:0	8	*
water	16:17	0:0	8	cur_ts
op	16:24	0:0	8	==
water	16:27	0:0	8	AV_NOPTS_VALUE
stmts	16:43	22:12	7	
water	16:43	0:0	8	{
call	17:16	19:51	8	av_log
arg	17:23	17:27	9	NULL
water	17:23	0:0	10	NULL
arg	17:29	17:41	9	AV_LOG_ERROR
water	17:29	0:0	10	AV_LOG_ERROR
arg	18:23	19:51	9	"Could not seek to relative position since current ""timestamp is not defined\n"
water	18:23	0:0	10	"Could not seek to relative position since current "
water	19:23	0:0	10	"timestamp is not defined\n"
water	19:52	0:0	8	;
water	20:16	0:0	8	ret
op	20:20	0:0	8	=
call	20:22	20:36	8	AVERROR
arg	20:30	20:36	9	EINVAL
water	20:30	0:0	10	EINVAL
water	20:37	0:0	8	;
goto	21:16	21:24	8	end
water	21:21	0:0	9	end
water	22:12	0:0	8	}
water	23:12	0:0	6	target
op	23:19	0:0	6	=
op	23:21	0:0	6	*
water	23:22	0:0	6	cur_ts
op	23:29	0:0	6	+
water	23:31	0:0	6	interval
op	23:39	0:0	6	->
water	23:41	0:0	6	start
water	23:46	0:0	6	;
water	24:8	0:0	6	}
else	24:10	26:8	4
stmts	24:15	26:8	5	
water	24:15	0:0	6	{
water	25:12	0:0	6	target
op	25:19	0:0	6	=
water	25:21	0:0	6	interval
op	25:29	0:0	6	->
water	25:31	0:0	6	start
water	25:36	0:0	6	;
water	26:8	0:0	6	}
call	27:8	28:53	4	av_log
arg	27:15	27:19	5	NULL
water	27:15	0:0	6	NULL
arg	27:21	27:35	5	AV_LOG_VERBOSE
water	27:21	0:0	6	AV_LOG_VERBOSE
arg	27:37	27:80	5	"Seeking to read interval start point %s\n"
water	27:37	0:0	6	"Seeking to read interval start point %s\n"
arg	28:15	28:53	5	av_ts2timestr(target,&AV_TIME_BASE_Q)
call	28:15	28:52	6	av_ts2timestr
arg	28:29	28:35	7	target
water	28:29	0:0	8	target
arg	28:37	28:52	7	&AV_TIME_BASE_Q
op	28:37	0:0	8	&
water	28:38	0:0	8	AV_TIME_BASE_Q
water	28:54	0:0	4	;
if	29:8	33:8	4	(( ret =avformat_seek_file (fmt_ctx ,- 1 ,- INT64_MAX ,target ,INT64_MAX ,0 ) ) < 0)
cond	29:12	29:88	5	( ret =avformat_seek_file (fmt_ctx ,- 1 ,- INT64_MAX ,target ,INT64_MAX ,0 ) ) < 0
water	29:12	0:0	6	(
water	29:13	0:0	6	ret
op	29:17	0:0	6	=
call	29:19	29:83	6	avformat_seek_file
arg	29:38	29:45	7	fmt_ctx
water	29:38	0:0	8	fmt_ctx
arg	29:47	29:49	7	-1
op	29:47	0:0	8	-
water	29:48	0:0	8	1
arg	29:51	29:61	7	-INT64_MAX
op	29:51	0:0	8	-
water	29:52	0:0	8	INT64_MAX
arg	29:63	29:69	7	target
water	29:63	0:0	8	target
arg	29:71	29:80	7	INT64_MAX
water	29:71	0:0	8	INT64_MAX
arg	29:82	29:83	7	0
water	29:82	0:0	8	0
water	29:84	0:0	6	)
op	29:86	0:0	6	<
water	29:88	0:0	6	0
stmts	29:91	33:8	5	
water	29:91	0:0	6	{
call	30:12	31:51	6	av_log
arg	30:19	30:23	7	NULL
water	30:19	0:0	8	NULL
arg	30:25	30:37	7	AV_LOG_ERROR
water	30:25	0:0	8	AV_LOG_ERROR
arg	30:39	30:83	7	"Could not seek to position %"PRId64": %s\n"
water	30:39	0:0	8	"Could not seek to position %"
water	30:69	0:0	8	PRId64
water	30:75	0:0	8	": %s\n"
arg	31:19	31:34	7	interval->start
water	31:19	0:0	8	interval
op	31:27	0:0	8	->
water	31:29	0:0	8	start
arg	31:36	31:51	7	av_err2str(ret)
call	31:36	31:50	8	av_err2str
arg	31:47	31:50	9	ret
water	31:47	0:0	10	ret
water	31:52	0:0	6	;
goto	32:12	32:20	6	end
water	32:17	0:0	7	end
water	33:8	0:0	6	}
water	34:4	0:0	4	}
water	35:4	0:0	2	frame
op	35:10	0:0	2	=
call	35:12	35:27	2	av_frame_alloc
water	35:28	0:0	2	;
if	36:4	39:4	2	(! frame)
cond	36:8	36:9	3	! frame
op	36:8	0:0	4	!
water	36:9	0:0	4	frame
stmts	36:16	39:4	3	
water	36:16	0:0	4	{
water	37:8	0:0	4	ret
op	37:12	0:0	4	=
call	37:14	37:28	4	AVERROR
arg	37:22	37:28	5	ENOMEM
water	37:22	0:0	6	ENOMEM
water	37:29	0:0	4	;
goto	38:8	38:16	4	end
water	38:13	0:0	5	end
water	39:4	0:0	4	}
while	40:4	77:4	2	(!av_read_frame (fmt_ctx ,& pkt ))
cond	40:11	40:39	3	!av_read_frame (fmt_ctx ,& pkt )
op	40:11	0:0	4	!
call	40:12	40:39	4	av_read_frame
arg	40:26	40:33	5	fmt_ctx
water	40:26	0:0	6	fmt_ctx
arg	40:35	40:39	5	&pkt
op	40:35	0:0	6	&
water	40:36	0:0	6	pkt
stmts	40:42	77:4	3	
water	40:42	0:0	4	{
if	41:8	46:8	4	(ifile -> nb_streams > nb_streams)
cond	41:12	41:32	5	ifile -> nb_streams > nb_streams
water	41:12	0:0	6	ifile
op	41:17	0:0	6	->
water	41:19	0:0	6	nb_streams
op	41:30	0:0	6	>
water	41:32	0:0	6	nb_streams
stmts	41:44	46:8	5	
water	41:44	0:0	6	{
call	42:12	42:85	6	REALLOCZ_ARRAY_STREAM
arg	42:34	42:51	7	nb_streams_frames
water	42:34	0:0	8	nb_streams_frames
arg	42:54	42:64	7	nb_streams
water	42:54	0:0	8	nb_streams
arg	42:66	42:85	7	fmt_ctx->nb_streams
water	42:66	0:0	8	fmt_ctx
op	42:73	0:0	8	->
water	42:75	0:0	8	nb_streams
water	42:86	0:0	6	;
call	43:12	43:85	6	REALLOCZ_ARRAY_STREAM
arg	43:34	43:52	7	nb_streams_packets
water	43:34	0:0	8	nb_streams_packets
arg	43:54	43:64	7	nb_streams
water	43:54	0:0	8	nb_streams
arg	43:66	43:85	7	fmt_ctx->nb_streams
water	43:66	0:0	8	fmt_ctx
op	43:73	0:0	8	->
water	43:75	0:0	8	nb_streams
water	43:86	0:0	6	;
call	44:12	44:85	6	REALLOCZ_ARRAY_STREAM
arg	44:34	44:50	7	selected_streams
water	44:34	0:0	8	selected_streams
arg	44:54	44:64	7	nb_streams
water	44:54	0:0	8	nb_streams
arg	44:66	44:85	7	fmt_ctx->nb_streams
water	44:66	0:0	8	fmt_ctx
op	44:73	0:0	8	->
water	44:75	0:0	8	nb_streams
water	44:86	0:0	6	;
water	45:12	0:0	6	nb_streams
op	45:23	0:0	6	=
water	45:25	0:0	6	ifile
op	45:30	0:0	6	->
water	45:32	0:0	6	nb_streams
water	45:42	0:0	6	;
water	46:8	0:0	6	}
if	47:8	75:8	4	(selected_streams [ pkt . stream_index ])
cond	47:12	47:45	5	selected_streams [ pkt . stream_index ]
water	47:12	0:0	6	selected_streams
op	47:28	0:0	6	[
water	47:29	0:0	6	pkt
op	47:32	0:0	6	.
water	47:33	0:0	6	stream_index
op	47:45	0:0	6	]
stmts	47:48	75:8	5	
water	47:48	0:0	6	{
decl	48:12	48:74	6	AVRational	tb
op	48:26	0:0	6	=
water	48:28	0:0	6	ifile
op	48:33	0:0	6	->
water	48:35	0:0	6	streams
op	48:42	0:0	6	[
water	48:43	0:0	6	pkt
op	48:46	0:0	6	.
water	48:47	0:0	6	stream_index
op	48:59	0:0	6	]
op	48:60	0:0	6	.
water	48:61	0:0	6	st
op	48:63	0:0	6	->
water	48:65	0:0	6	time_base
if	49:12	50:67	6	(pkt . pts != AV_NOPTS_VALUE)
cond	49:16	49:27	7	pkt . pts != AV_NOPTS_VALUE
water	49:16	0:0	8	pkt
op	49:19	0:0	8	.
water	49:20	0:0	8	pts
op	49:24	0:0	8	!=
water	49:27	0:0	8	AV_NOPTS_VALUE
stmts	50:16	50:67	7	
op	50:16	0:0	8	*
water	50:17	0:0	8	cur_ts
op	50:24	0:0	8	=
call	50:26	50:66	8	av_rescale_q
arg	50:39	50:46	9	pkt.pts
water	50:39	0:0	10	pkt
op	50:42	0:0	10	.
water	50:43	0:0	10	pts
arg	50:48	50:50	9	tb
water	50:48	0:0	10	tb
arg	50:52	50:66	9	AV_TIME_BASE_Q
water	50:52	0:0	10	AV_TIME_BASE_Q
water	50:67	0:0	8	;
if	51:12	54:12	6	(! has_start && * cur_ts != AV_NOPTS_VALUE)
cond	51:16	51:41	7	! has_start && * cur_ts != AV_NOPTS_VALUE
op	51:16	0:0	8	!
water	51:17	0:0	8	has_start
op	51:27	0:0	8	&&
op	51:30	0:0	8	*
water	51:31	0:0	8	cur_ts
op	51:38	0:0	8	!=
water	51:41	0:0	8	AV_NOPTS_VALUE
stmts	51:57	54:12	7	
water	51:57	0:0	8	{
water	52:16	0:0	8	start
op	52:22	0:0	8	=
op	52:24	0:0	8	*
water	52:25	0:0	8	cur_ts
water	52:31	0:0	8	;
water	53:16	0:0	8	has_start
op	53:26	0:0	8	=
water	53:28	0:0	8	1
water	53:29	0:0	8	;
water	54:12	0:0	8	}
if	55:12	58:12	6	(has_start && ! has_end && interval -> end_is_offset)
cond	55:16	55:51	7	has_start && ! has_end && interval -> end_is_offset
water	55:16	0:0	8	has_start
op	55:26	0:0	8	&&
op	55:29	0:0	8	!
water	55:30	0:0	8	has_end
op	55:38	0:0	8	&&
water	55:41	0:0	8	interval
op	55:49	0:0	8	->
water	55:51	0:0	8	end_is_offset
stmts	55:66	58:12	7	
water	55:66	0:0	8	{
water	56:16	0:0	8	end
op	56:20	0:0	8	=
water	56:22	0:0	8	start
op	56:28	0:0	8	+
water	56:30	0:0	8	interval
op	56:38	0:0	8	->
water	56:40	0:0	8	end
water	56:43	0:0	8	;
water	57:16	0:0	8	has_end
op	57:24	0:0	8	=
water	57:26	0:0	8	1
water	57:27	0:0	8	;
water	58:12	0:0	8	}
if	59:12	62:12	6	(interval -> end_is_offset && interval -> duration_frames)
cond	59:16	59:53	7	interval -> end_is_offset && interval -> duration_frames
water	59:16	0:0	8	interval
op	59:24	0:0	8	->
water	59:26	0:0	8	end_is_offset
op	59:40	0:0	8	&&
water	59:43	0:0	8	interval
op	59:51	0:0	8	->
water	59:53	0:0	8	duration_frames
stmts	59:70	62:12	7	
water	59:70	0:0	8	{
if	60:16	61:25	8	(frame_count >= interval -> end)
cond	60:20	60:45	9	frame_count >= interval -> end
water	60:20	0:0	10	frame_count
op	60:32	0:0	10	>=
water	60:35	0:0	10	interval
op	60:43	0:0	10	->
water	60:45	0:0	10	end
stmts	61:20	61:25	9	
break	61:20	61:25	10	
water	62:12	0:0	8	}
else	62:14	64:12	6
stmts	62:19	64:12	7	
if	62:19	64:12	8	(has_end && * cur_ts != AV_NOPTS_VALUE && * cur_ts >= end)
cond	62:23	62:74	9	has_end && * cur_ts != AV_NOPTS_VALUE && * cur_ts >= end
water	62:23	0:0	10	has_end
op	62:31	0:0	10	&&
op	62:34	0:0	10	*
water	62:35	0:0	10	cur_ts
op	62:42	0:0	10	!=
water	62:45	0:0	10	AV_NOPTS_VALUE
op	62:60	0:0	10	&&
op	62:63	0:0	10	*
water	62:64	0:0	10	cur_ts
op	62:71	0:0	10	>=
water	62:74	0:0	10	end
stmts	62:79	64:12	9	
water	62:79	0:0	10	{
break	63:16	63:21	10	
water	64:12	0:0	10	}
water	65:12	0:0	6	frame_count
op	65:23	0:0	6	++
water	65:25	0:0	6	;
if	66:12	70:12	6	(do_read_packets)
cond	66:16	66:16	7	do_read_packets
water	66:16	0:0	8	do_read_packets
stmts	66:33	70:12	7	
water	66:33	0:0	8	{
if	67:16	68:52	8	(do_show_packets)
cond	67:20	67:20	9	do_show_packets
water	67:20	0:0	10	do_show_packets
stmts	68:20	68:52	9	
call	68:20	68:51	10	show_packet
arg	68:32	68:33	11	w
water	68:32	0:0	12	w
arg	68:35	68:40	11	ifile
water	68:35	0:0	12	ifile
arg	68:42	68:46	11	&pkt
op	68:42	0:0	12	&
water	68:43	0:0	12	pkt
arg	68:48	68:51	11	i++
water	68:48	0:0	12	i
op	68:49	0:0	12	++
water	68:52	0:0	10	;
water	69:16	0:0	8	nb_streams_packets
op	69:34	0:0	8	[
water	69:35	0:0	8	pkt
op	69:38	0:0	8	.
water	69:39	0:0	8	stream_index
op	69:51	0:0	8	]
op	69:52	0:0	8	++
water	69:54	0:0	8	;
water	70:12	0:0	8	}
if	71:12	74:12	6	(do_read_frames)
cond	71:16	71:16	7	do_read_frames
water	71:16	0:0	8	do_read_frames
stmts	71:32	74:12	7	
water	71:32	0:0	8	{
water	72:16	0:0	8	pkt1
op	72:21	0:0	8	=
water	72:23	0:0	8	pkt
water	72:26	0:0	8	;
while	73:16	73:78	8	(pkt1 . size &&process_frame (w ,ifile ,frame ,& pkt1 ) > 0)
cond	73:23	73:76	9	pkt1 . size &&process_frame (w ,ifile ,frame ,& pkt1 ) > 0
water	73:23	0:0	10	pkt1
op	73:27	0:0	10	.
water	73:28	0:0	10	size
op	73:33	0:0	10	&&
call	73:36	73:72	10	process_frame
arg	73:50	73:51	11	w
water	73:50	0:0	12	w
arg	73:53	73:58	11	ifile
water	73:53	0:0	12	ifile
arg	73:60	73:65	11	frame
water	73:60	0:0	12	frame
arg	73:67	73:72	11	&pkt1
op	73:67	0:0	12	&
water	73:68	0:0	12	pkt1
op	73:74	0:0	10	>
water	73:76	0:0	10	0
stmts	73:78	73:78	9	
water	73:78	0:0	10	;
water	74:12	0:0	8	}
water	75:8	0:0	6	}
call	76:8	76:28	4	av_packet_unref
arg	76:24	76:28	5	&pkt
op	76:24	0:0	6	&
water	76:25	0:0	6	pkt
water	76:29	0:0	4	;
water	77:4	0:0	4	}
call	78:4	78:23	2	av_init_packet
arg	78:19	78:23	3	&pkt
op	78:19	0:0	4	&
water	78:20	0:0	4	pkt
water	78:24	0:0	2	;
water	79:4	0:0	2	pkt
op	79:7	0:0	2	.
water	79:8	0:0	2	data
op	79:13	0:0	2	=
water	79:15	0:0	2	NULL
water	79:19	0:0	2	;
water	80:4	0:0	2	pkt
op	80:7	0:0	2	.
water	80:8	0:0	2	size
op	80:13	0:0	2	=
water	80:15	0:0	2	0
water	80:16	0:0	2	;
for	82:4	86:4	2	(i = 0 ;i < fmt_ctx -> nb_streams;i ++)
forinit	82:9	82:14	3	i = 0 ;
water	82:9	0:0	4	i
op	82:11	0:0	4	=
water	82:13	0:0	4	0
water	82:14	0:0	4	;
cond	82:16	82:29	3	i < fmt_ctx -> nb_streams
water	82:16	0:0	4	i
op	82:18	0:0	4	<
water	82:20	0:0	4	fmt_ctx
op	82:27	0:0	4	->
water	82:29	0:0	4	nb_streams
forexpr	82:41	82:42	3	i ++
water	82:41	0:0	4	i
op	82:42	0:0	4	++
stmts	82:46	86:4	3	
water	82:46	0:0	4	{
water	83:8	0:0	4	pkt
op	83:11	0:0	4	.
water	83:12	0:0	4	stream_index
op	83:25	0:0	4	=
water	83:27	0:0	4	i
water	83:28	0:0	4	;
if	84:8	85:60	4	(do_read_frames)
cond	84:12	84:12	5	do_read_frames
water	84:12	0:0	6	do_read_frames
stmts	85:12	85:60	5	
while	85:12	85:60	6	(process_frame (w ,ifile ,frame ,& pkt ) > 0)
cond	85:19	85:58	7	process_frame (w ,ifile ,frame ,& pkt ) > 0
call	85:19	85:54	8	process_frame
arg	85:33	85:34	9	w
water	85:33	0:0	10	w
arg	85:36	85:41	9	ifile
water	85:36	0:0	10	ifile
arg	85:43	85:48	9	frame
water	85:43	0:0	10	frame
arg	85:50	85:54	9	&pkt
op	85:50	0:0	10	&
water	85:51	0:0	10	pkt
op	85:56	0:0	8	>
water	85:58	0:0	8	0
stmts	85:60	85:60	7	
water	85:60	0:0	8	;
water	86:4	0:0	4	}
label	87:0	87:3	2	end :
call	88:4	88:24	2	av_frame_free
arg	88:18	88:24	3	&frame
op	88:18	0:0	4	&
water	88:19	0:0	4	frame
water	88:25	0:0	2	;
if	89:4	92:4	2	(ret < 0)
cond	89:8	89:14	3	ret < 0
water	89:8	0:0	4	ret
op	89:12	0:0	4	<
water	89:14	0:0	4	0
stmts	89:17	92:4	3	
water	89:17	0:0	4	{
call	90:8	90:72	4	av_log
arg	90:15	90:19	5	NULL
water	90:15	0:0	6	NULL
arg	90:21	90:33	5	AV_LOG_ERROR
water	90:21	0:0	6	AV_LOG_ERROR
arg	90:35	90:72	5	"Could not read packets in interval "
water	90:35	0:0	6	"Could not read packets in interval "
water	90:73	0:0	4	;
call	91:8	91:54	4	log_read_interval
arg	91:26	91:34	5	interval
water	91:26	0:0	6	interval
arg	91:36	91:40	5	NULL
water	91:36	0:0	6	NULL
arg	91:42	91:54	5	AV_LOG_ERROR
water	91:42	0:0	6	AV_LOG_ERROR
water	91:55	0:0	4	;
water	92:4	0:0	4	}
return	93:4	93:14	2	ret
water	93:11	0:0	3	ret
