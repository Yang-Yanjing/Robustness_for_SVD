func	1:0	177:0	0	static OutputStream *	new_output_stream
params	1:38	0:0	1	
param	1:39	1:56	2	OptionsContext *	o
param	1:58	1:77	2	AVFormatContext *	oc
param	1:79	1:100	2	enum AVMediaType	type
param	1:102	1:118	2	int	source_index
stmnts	0:0	176:14	1	
decl	3:4	3:21	2	OutputStream	*ost
decl	4:4	4:48	2	AVStream	*st
op	4:17	0:0	2	=
call	4:19	4:47	3	avformat_new_stream
arg	4:39	4:41	4	oc
water	4:39	0:0	5	oc
arg	4:43	4:47	4	NULL
water	4:43	0:0	5	NULL
decl	5:4	5:46	2	int	idx
op	5:17	0:0	2	=
water	5:19	0:0	2	oc
op	5:21	0:0	2	->
water	5:23	0:0	2	nb_streams
op	5:34	0:0	2	-
water	5:36	0:0	2	1
water	5:37	0:0	2	,
decl	5:4	5:46	2	int	ret
op	5:43	0:0	2	=
water	5:45	0:0	2	0
decl	6:4	6:46	2	const char	*bsfs
op	6:21	0:0	2	=
water	6:23	0:0	2	NULL
water	6:27	0:0	2	,
decl	6:4	6:46	2	const char	*time_base
op	6:40	0:0	2	=
water	6:42	0:0	2	NULL
decl	7:4	7:33	2	char	*next
water	7:14	0:0	2	,
decl	7:4	7:33	2	char	*codec_tag
op	7:27	0:0	2	=
water	7:29	0:0	2	NULL
decl	8:4	8:22	2	double	qscale
op	8:18	0:0	2	=
op	8:20	0:0	2	-
water	8:21	0:0	2	1
decl	9:4	9:9	2	int	i
if	10:4	13:4	2	(! st)
cond	10:8	10:9	3	! st
op	10:8	0:0	4	!
water	10:9	0:0	4	st
stmts	10:13	13:4	3	
water	10:13	0:0	4	{
call	11:8	11:62	4	av_log
arg	11:15	11:19	5	NULL
water	11:15	0:0	6	NULL
arg	11:21	11:33	5	AV_LOG_FATAL
water	11:21	0:0	6	AV_LOG_FATAL
arg	11:35	11:62	5	"Could not alloc stream.\n"
water	11:35	0:0	6	"Could not alloc stream.\n"
water	11:63	0:0	4	;
call	12:8	12:22	4	exit_program
arg	12:21	12:22	5	1
water	12:21	0:0	6	1
water	12:23	0:0	4	;
water	13:4	0:0	4	}
if	14:4	15:52	2	(oc -> nb_streams - 1 < o -> nb_streamid_map)
cond	14:8	14:32	3	oc -> nb_streams - 1 < o -> nb_streamid_map
water	14:8	0:0	4	oc
op	14:10	0:0	4	->
water	14:12	0:0	4	nb_streams
op	14:23	0:0	4	-
water	14:25	0:0	4	1
op	14:27	0:0	4	<
water	14:29	0:0	4	o
op	14:30	0:0	4	->
water	14:32	0:0	4	nb_streamid_map
stmts	15:8	15:52	3	
water	15:8	0:0	4	st
op	15:10	0:0	4	->
water	15:12	0:0	4	id
op	15:15	0:0	4	=
water	15:17	0:0	4	o
op	15:18	0:0	4	->
water	15:20	0:0	4	streamid_map
op	15:32	0:0	4	[
water	15:33	0:0	4	oc
op	15:35	0:0	4	->
water	15:37	0:0	4	nb_streams
op	15:48	0:0	4	-
water	15:50	0:0	4	1
op	15:51	0:0	4	]
water	15:52	0:0	4	;
call	16:4	16:48	2	GROW_ARRAY
arg	16:15	16:29	3	output_streams
water	16:15	0:0	4	output_streams
arg	16:31	16:48	3	nb_output_streams
water	16:31	0:0	4	nb_output_streams
water	16:49	0:0	2	;
if	17:4	18:23	2	(! ( ost =av_mallocz (sizeof ( * ost ) ) ))
cond	17:8	17:40	3	! ( ost =av_mallocz (sizeof ( * ost ) ) )
op	17:8	0:0	4	!
water	17:9	0:0	4	(
water	17:10	0:0	4	ost
op	17:14	0:0	4	=
call	17:16	17:39	4	av_mallocz
arg	17:27	17:39	5	sizeof(*ost)
op	17:27	0:0	6	sizeof
water	17:33	0:0	6	(
op	17:34	0:0	6	*
water	17:35	0:0	6	ost
water	17:38	0:0	6	)
water	17:40	0:0	4	)
stmts	18:8	18:23	3	
call	18:8	18:22	4	exit_program
arg	18:21	18:22	5	1
water	18:21	0:0	6	1
water	18:23	0:0	4	;
water	19:4	0:0	2	output_streams
op	19:18	0:0	2	[
water	19:19	0:0	2	nb_output_streams
op	19:37	0:0	2	-
water	19:39	0:0	2	1
op	19:40	0:0	2	]
op	19:42	0:0	2	=
water	19:44	0:0	2	ost
water	19:47	0:0	2	;
water	20:4	0:0	2	ost
op	20:7	0:0	2	->
water	20:9	0:0	2	file_index
op	20:20	0:0	2	=
water	20:22	0:0	2	nb_output_files
op	20:38	0:0	2	-
water	20:40	0:0	2	1
water	20:41	0:0	2	;
water	21:4	0:0	2	ost
op	21:7	0:0	2	->
water	21:9	0:0	2	index
op	21:20	0:0	2	=
water	21:22	0:0	2	idx
water	21:25	0:0	2	;
water	22:4	0:0	2	ost
op	22:7	0:0	2	->
water	22:9	0:0	2	st
op	22:20	0:0	2	=
water	22:22	0:0	2	st
water	22:24	0:0	2	;
water	23:4	0:0	2	st
op	23:6	0:0	2	->
water	23:8	0:0	2	codecpar
op	23:16	0:0	2	->
water	23:18	0:0	2	codec_type
op	23:29	0:0	2	=
water	23:31	0:0	2	type
water	23:35	0:0	2	;
water	24:4	0:0	2	ret
op	24:8	0:0	2	=
call	24:10	24:35	2	choose_encoder
arg	24:25	24:26	3	o
water	24:25	0:0	4	o
arg	24:28	24:30	3	oc
water	24:28	0:0	4	oc
arg	24:32	24:35	3	ost
water	24:32	0:0	4	ost
water	24:36	0:0	2	;
if	25:4	29:4	2	(ret < 0)
cond	25:8	25:14	3	ret < 0
water	25:8	0:0	4	ret
op	25:12	0:0	4	<
water	25:14	0:0	4	0
stmts	25:17	29:4	3	
water	25:17	0:0	4	{
call	26:8	27:53	4	av_log
arg	26:15	26:19	5	NULL
water	26:15	0:0	6	NULL
arg	26:21	26:33	5	AV_LOG_FATAL
water	26:21	0:0	6	AV_LOG_FATAL
arg	26:35	27:24	5	"Error selecting an encoder for stream ""%d:%d\n"
water	26:35	0:0	6	"Error selecting an encoder for stream "
water	27:15	0:0	6	"%d:%d\n"
arg	27:26	27:41	5	ost->file_index
water	27:26	0:0	6	ost
op	27:29	0:0	6	->
water	27:31	0:0	6	file_index
arg	27:43	27:53	5	ost->index
water	27:43	0:0	6	ost
op	27:46	0:0	6	->
water	27:48	0:0	6	index
water	27:54	0:0	4	;
call	28:8	28:22	4	exit_program
arg	28:21	28:22	5	1
water	28:21	0:0	6	1
water	28:23	0:0	4	;
water	29:4	0:0	4	}
water	30:4	0:0	2	ost
op	30:7	0:0	2	->
water	30:9	0:0	2	enc_ctx
op	30:17	0:0	2	=
call	30:19	30:50	2	avcodec_alloc_context3
arg	30:42	30:50	3	ost->enc
water	30:42	0:0	4	ost
op	30:45	0:0	4	->
water	30:47	0:0	4	enc
water	30:51	0:0	2	;
if	31:4	34:4	2	(! ost -> enc_ctx)
cond	31:8	31:14	3	! ost -> enc_ctx
op	31:8	0:0	4	!
water	31:9	0:0	4	ost
op	31:12	0:0	4	->
water	31:14	0:0	4	enc_ctx
stmts	31:23	34:4	3	
water	31:23	0:0	4	{
call	32:8	32:77	4	av_log
arg	32:15	32:19	5	NULL
water	32:15	0:0	6	NULL
arg	32:21	32:33	5	AV_LOG_ERROR
water	32:21	0:0	6	AV_LOG_ERROR
arg	32:35	32:77	5	"Error allocating the encoding context.\n"
water	32:35	0:0	6	"Error allocating the encoding context.\n"
water	32:78	0:0	4	;
call	33:8	33:22	4	exit_program
arg	33:21	33:22	5	1
water	33:21	0:0	6	1
water	33:23	0:0	4	;
water	34:4	0:0	4	}
water	35:4	0:0	2	ost
op	35:7	0:0	2	->
water	35:9	0:0	2	enc_ctx
op	35:16	0:0	2	->
water	35:18	0:0	2	codec_type
op	35:29	0:0	2	=
water	35:31	0:0	2	type
water	35:35	0:0	2	;
water	36:4	0:0	2	ost
op	36:7	0:0	2	->
water	36:9	0:0	2	ref_par
op	36:17	0:0	2	=
call	36:19	36:44	2	avcodec_parameters_alloc
water	36:45	0:0	2	;
if	37:4	40:4	2	(! ost -> ref_par)
cond	37:8	37:14	3	! ost -> ref_par
op	37:8	0:0	4	!
water	37:9	0:0	4	ost
op	37:12	0:0	4	->
water	37:14	0:0	4	ref_par
stmts	37:23	40:4	3	
water	37:23	0:0	4	{
call	38:8	38:80	4	av_log
arg	38:15	38:19	5	NULL
water	38:15	0:0	6	NULL
arg	38:21	38:33	5	AV_LOG_ERROR
water	38:21	0:0	6	AV_LOG_ERROR
arg	38:35	38:80	5	"Error allocating the encoding parameters.\n"
water	38:35	0:0	6	"Error allocating the encoding parameters.\n"
water	38:81	0:0	4	;
call	39:8	39:22	4	exit_program
arg	39:21	39:22	5	1
water	39:21	0:0	6	1
water	39:23	0:0	4	;
water	40:4	0:0	4	}
if	41:4	69:4	2	(ost -> enc)
cond	41:8	41:13	3	ost -> enc
water	41:8	0:0	4	ost
op	41:11	0:0	4	->
water	41:13	0:0	4	enc
stmts	41:18	69:4	3	
water	41:18	0:0	4	{
decl	42:8	42:29	4	AVIOContext	*s
op	42:23	0:0	4	=
water	42:25	0:0	4	NULL
decl	43:8	43:53	4	char	*buf
op	43:18	0:0	4	=
water	43:20	0:0	4	NULL
water	43:24	0:0	4	,
decl	43:8	43:53	4	char	*arg
op	43:31	0:0	4	=
water	43:33	0:0	4	NULL
water	43:37	0:0	4	,
decl	43:8	43:53	4	char	*preset
op	43:47	0:0	4	=
water	43:49	0:0	4	NULL
water	44:8	0:0	4	ost
op	44:11	0:0	4	->
water	44:13	0:0	4	encoder_opts
op	44:27	0:0	4	=
call	44:29	44:95	4	filter_codec_opts
arg	44:47	44:63	5	o->g->codec_opts
water	44:47	0:0	6	o
op	44:48	0:0	6	->
water	44:50	0:0	6	g
op	44:51	0:0	6	->
water	44:53	0:0	6	codec_opts
arg	44:65	44:77	5	ost->enc->id
water	44:65	0:0	6	ost
op	44:68	0:0	6	->
water	44:70	0:0	6	enc
op	44:73	0:0	6	->
water	44:75	0:0	6	id
arg	44:79	44:81	5	oc
water	44:79	0:0	6	oc
arg	44:83	44:85	5	st
water	44:83	0:0	6	st
arg	44:87	44:95	5	ost->enc
water	44:87	0:0	6	ost
op	44:90	0:0	6	->
water	44:92	0:0	6	enc
water	44:96	0:0	4	;
call	45:8	45:57	4	MATCH_PER_STREAM_OPT
arg	45:29	45:36	5	presets
water	45:29	0:0	6	presets
arg	45:38	45:41	5	str
water	45:38	0:0	6	str
arg	45:43	45:49	5	preset
water	45:43	0:0	6	preset
arg	45:51	45:53	5	oc
water	45:51	0:0	6	oc
arg	45:55	45:57	5	st
water	45:55	0:0	6	st
water	45:58	0:0	4	;
if	46:8	62:8	4	(preset && ( ! ( ret =get_preset_file_2 (preset ,ost -> enc -> name ,& s ) ) ))
cond	46:12	46:77	5	preset && ( ! ( ret =get_preset_file_2 (preset ,ost -> enc -> name ,& s ) ) )
water	46:12	0:0	6	preset
op	46:19	0:0	6	&&
water	46:22	0:0	6	(
op	46:23	0:0	6	!
water	46:24	0:0	6	(
water	46:25	0:0	6	ret
op	46:29	0:0	6	=
call	46:31	46:75	6	get_preset_file_2
arg	46:49	46:55	7	preset
water	46:49	0:0	8	preset
arg	46:57	46:71	7	ost->enc->name
water	46:57	0:0	8	ost
op	46:60	0:0	8	->
water	46:62	0:0	8	enc
op	46:65	0:0	8	->
water	46:67	0:0	8	name
arg	46:73	46:75	7	&s
op	46:73	0:0	8	&
water	46:74	0:0	8	s
water	46:76	0:0	6	)
water	46:77	0:0	6	)
stmts	46:80	62:8	5	
water	46:80	0:0	6	{
do	47:12	60:12	6	(! s -> eof_reached)
cond	60:21	60:25	7	! s -> eof_reached
op	60:21	0:0	8	!
water	60:22	0:0	8	s
op	60:23	0:0	8	->
water	60:25	0:0	8	eof_reached
stmts	47:16	60:12	7	
water	47:16	0:0	8	{
water	48:16	0:0	8	buf
op	48:20	0:0	8	=
call	48:22	48:32	8	get_line
arg	48:31	48:32	9	s
water	48:31	0:0	10	s
water	48:33	0:0	8	;
if	49:16	52:16	8	(! buf [ 0 ] || buf [ 0 ] == '#')
cond	49:20	49:41	9	! buf [ 0 ] || buf [ 0 ] == '#'
op	49:20	0:0	10	!
water	49:21	0:0	10	buf
op	49:24	0:0	10	[
water	49:25	0:0	10	0
op	49:26	0:0	10	]
op	49:28	0:0	10	||
water	49:31	0:0	10	buf
op	49:34	0:0	10	[
water	49:35	0:0	10	0
op	49:36	0:0	10	]
op	49:38	0:0	10	==
water	49:41	0:0	10	'#'
stmts	49:46	52:16	9	
water	49:46	0:0	10	{
call	50:20	50:31	10	av_free
arg	50:28	50:31	11	buf
water	50:28	0:0	12	buf
water	50:32	0:0	10	;
continue	51:20	51:28	10	
water	52:16	0:0	10	}
if	53:16	56:16	8	(! ( arg =strchr (buf ,'=' ) ))
cond	53:20	53:44	9	! ( arg =strchr (buf ,'=' ) )
op	53:20	0:0	10	!
water	53:21	0:0	10	(
water	53:22	0:0	10	arg
op	53:26	0:0	10	=
call	53:28	53:43	10	strchr
arg	53:35	53:38	11	buf
water	53:35	0:0	12	buf
arg	53:40	53:43	11	'='
water	53:40	0:0	12	'='
water	53:44	0:0	10	)
stmts	53:47	56:16	9	
water	53:47	0:0	10	{
call	54:20	54:89	10	av_log
arg	54:27	54:31	11	NULL
water	54:27	0:0	12	NULL
arg	54:33	54:45	11	AV_LOG_FATAL
water	54:33	0:0	12	AV_LOG_FATAL
arg	54:47	54:89	11	"Invalid line found in the preset file.\n"
water	54:47	0:0	12	"Invalid line found in the preset file.\n"
water	54:90	0:0	10	;
call	55:20	55:34	10	exit_program
arg	55:33	55:34	11	1
water	55:33	0:0	12	1
water	55:35	0:0	10	;
water	56:16	0:0	10	}
op	57:16	0:0	8	*
water	57:17	0:0	8	arg
op	57:20	0:0	8	++
op	57:23	0:0	8	=
water	57:25	0:0	8	0
water	57:26	0:0	8	;
call	58:16	58:80	8	av_dict_set
arg	58:28	58:46	9	&ost->encoder_opts
op	58:28	0:0	10	&
water	58:29	0:0	10	ost
op	58:32	0:0	10	->
water	58:34	0:0	10	encoder_opts
arg	58:48	58:51	9	buf
water	58:48	0:0	10	buf
arg	58:53	58:56	9	arg
water	58:53	0:0	10	arg
arg	58:58	58:80	9	AV_DICT_DONT_OVERWRITE
water	58:58	0:0	10	AV_DICT_DONT_OVERWRITE
water	58:81	0:0	8	;
call	59:16	59:27	8	av_free
arg	59:24	59:27	9	buf
water	59:24	0:0	10	buf
water	59:28	0:0	8	;
water	60:12	0:0	8	}
water	60:37	0:0	6	;
call	61:12	61:26	6	avio_closep
arg	61:24	61:26	7	&s
op	61:24	0:0	8	&
water	61:25	0:0	8	s
water	61:27	0:0	6	;
water	62:8	0:0	6	}
if	63:8	68:8	4	(ret)
cond	63:12	63:12	5	ret
water	63:12	0:0	6	ret
stmts	63:17	68:8	5	
water	63:17	0:0	6	{
call	64:12	66:54	6	av_log
arg	64:19	64:23	7	NULL
water	64:19	0:0	8	NULL
arg	64:25	64:37	7	AV_LOG_FATAL
water	64:25	0:0	8	AV_LOG_FATAL
arg	65:19	65:85	7	"Preset %s specified for stream %d:%d, but could not be opened.\n"
water	65:19	0:0	8	"Preset %s specified for stream %d:%d, but could not be opened.\n"
arg	66:19	66:25	7	preset
water	66:19	0:0	8	preset
arg	66:27	66:42	7	ost->file_index
water	66:27	0:0	8	ost
op	66:30	0:0	8	->
water	66:32	0:0	8	file_index
arg	66:44	66:54	7	ost->index
water	66:44	0:0	8	ost
op	66:47	0:0	8	->
water	66:49	0:0	8	index
water	66:55	0:0	6	;
call	67:12	67:26	6	exit_program
arg	67:25	67:26	7	1
water	67:25	0:0	8	1
water	67:27	0:0	6	;
water	68:8	0:0	6	}
water	69:4	0:0	4	}
else	69:6	71:4	2
stmts	69:11	71:4	3	
water	69:11	0:0	4	{
water	70:8	0:0	4	ost
op	70:11	0:0	4	->
water	70:13	0:0	4	encoder_opts
op	70:26	0:0	4	=
call	70:28	70:94	4	filter_codec_opts
arg	70:46	70:62	5	o->g->codec_opts
water	70:46	0:0	6	o
op	70:47	0:0	6	->
water	70:49	0:0	6	g
op	70:50	0:0	6	->
water	70:52	0:0	6	codec_opts
arg	70:64	70:80	5	AV_CODEC_ID_NONE
water	70:64	0:0	6	AV_CODEC_ID_NONE
arg	70:82	70:84	5	oc
water	70:82	0:0	6	oc
arg	70:86	70:88	5	st
water	70:86	0:0	6	st
arg	70:90	70:94	5	NULL
water	70:90	0:0	6	NULL
water	70:95	0:0	4	;
water	71:4	0:0	4	}
call	72:4	72:59	2	MATCH_PER_STREAM_OPT
arg	72:25	72:35	3	time_bases
water	72:25	0:0	4	time_bases
arg	72:37	72:40	3	str
water	72:37	0:0	4	str
arg	72:42	72:51	3	time_base
water	72:42	0:0	4	time_base
arg	72:53	72:55	3	oc
water	72:53	0:0	4	oc
arg	72:57	72:59	3	st
water	72:57	0:0	4	st
water	72:60	0:0	2	;
if	73:4	81:4	2	(time_base)
cond	73:8	73:8	3	time_base
water	73:8	0:0	4	time_base
stmts	73:19	81:4	3	
water	73:19	0:0	4	{
decl	74:8	74:20	4	AVRational	q
if	75:8	79:8	4	(av_parse_ratio (& q ,time_base ,INT_MAX ,0 ,NULL ) < 0 || q . num <= 0 || q . den <= 0)
cond	75:12	76:35	5	av_parse_ratio (& q ,time_base ,INT_MAX ,0 ,NULL ) < 0 || q . num <= 0 || q . den <= 0
call	75:12	75:58	6	av_parse_ratio
arg	75:27	75:29	7	&q
op	75:27	0:0	8	&
water	75:28	0:0	8	q
arg	75:31	75:40	7	time_base
water	75:31	0:0	8	time_base
arg	75:42	75:49	7	INT_MAX
water	75:42	0:0	8	INT_MAX
arg	75:51	75:52	7	0
water	75:51	0:0	8	0
arg	75:54	75:58	7	NULL
water	75:54	0:0	8	NULL
op	75:60	0:0	6	<
water	75:62	0:0	6	0
op	75:64	0:0	6	||
water	76:12	0:0	6	q
op	76:13	0:0	6	.
water	76:14	0:0	6	num
op	76:18	0:0	6	<=
water	76:21	0:0	6	0
op	76:23	0:0	6	||
water	76:26	0:0	6	q
op	76:27	0:0	6	.
water	76:28	0:0	6	den
op	76:32	0:0	6	<=
water	76:35	0:0	6	0
stmts	76:38	79:8	5	
water	76:38	0:0	6	{
call	77:12	77:75	6	av_log
arg	77:19	77:23	7	NULL
water	77:19	0:0	8	NULL
arg	77:25	77:37	7	AV_LOG_FATAL
water	77:25	0:0	8	AV_LOG_FATAL
arg	77:39	77:64	7	"Invalid time base: %s\n"
water	77:39	0:0	8	"Invalid time base: %s\n"
arg	77:66	77:75	7	time_base
water	77:66	0:0	8	time_base
water	77:76	0:0	6	;
call	78:12	78:26	6	exit_program
arg	78:25	78:26	7	1
water	78:25	0:0	8	1
water	78:27	0:0	6	;
water	79:8	0:0	6	}
water	80:8	0:0	4	st
op	80:10	0:0	4	->
water	80:12	0:0	4	time_base
op	80:22	0:0	4	=
water	80:24	0:0	4	q
water	80:25	0:0	4	;
water	81:4	0:0	4	}
water	82:4	0:0	2	ost
op	82:7	0:0	2	->
water	82:9	0:0	2	max_frames
op	82:20	0:0	2	=
water	82:22	0:0	2	INT64_MAX
water	82:31	0:0	2	;
call	83:4	83:65	2	MATCH_PER_STREAM_OPT
arg	83:25	83:35	3	max_frames
water	83:25	0:0	4	max_frames
arg	83:37	83:40	3	i64
water	83:37	0:0	4	i64
arg	83:42	83:57	3	ost->max_frames
water	83:42	0:0	4	ost
op	83:45	0:0	4	->
water	83:47	0:0	4	max_frames
arg	83:59	83:61	3	oc
water	83:59	0:0	4	oc
arg	83:63	83:65	3	st
water	83:63	0:0	4	st
water	83:66	0:0	2	;
for	84:4	90:4	2	(i = 0 ;i < o -> nb_max_frames;i ++)
forinit	84:9	84:14	3	i = 0 ;
water	84:9	0:0	4	i
op	84:11	0:0	4	=
water	84:13	0:0	4	0
water	84:14	0:0	4	;
cond	84:16	84:21	3	i < o -> nb_max_frames
water	84:16	0:0	4	i
op	84:17	0:0	4	<
water	84:18	0:0	4	o
op	84:19	0:0	4	->
water	84:21	0:0	4	nb_max_frames
forexpr	84:36	84:37	3	i ++
water	84:36	0:0	4	i
op	84:37	0:0	4	++
stmts	84:41	90:4	3	
water	84:41	0:0	4	{
decl	85:8	85:44	4	char	*p
op	85:16	0:0	4	=
water	85:18	0:0	4	o
op	85:19	0:0	4	->
water	85:21	0:0	4	max_frames
op	85:31	0:0	4	[
water	85:32	0:0	4	i
op	85:33	0:0	4	]
op	85:34	0:0	4	.
water	85:35	0:0	4	specifier
if	86:8	89:8	4	(! * p && type != AVMEDIA_TYPE_VIDEO)
cond	86:12	86:27	5	! * p && type != AVMEDIA_TYPE_VIDEO
op	86:12	0:0	6	!
op	86:13	0:0	6	*
water	86:14	0:0	6	p
op	86:16	0:0	6	&&
water	86:19	0:0	6	type
op	86:24	0:0	6	!=
water	86:27	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	86:47	89:8	5	
water	86:47	0:0	6	{
call	87:12	87:121	6	av_log
arg	87:19	87:23	7	NULL
water	87:19	0:0	8	NULL
arg	87:25	87:39	7	AV_LOG_WARNING
water	87:25	0:0	8	AV_LOG_WARNING
arg	87:41	87:121	7	"Applying unspecific -frames to non video streams, maybe you meant -vframes ?\n"
water	87:41	0:0	8	"Applying unspecific -frames to non video streams, maybe you meant -vframes ?\n"
water	87:122	0:0	6	;
break	88:12	88:17	6	
water	89:8	0:0	6	}
water	90:4	0:0	4	}
water	91:4	0:0	2	ost
op	91:7	0:0	2	->
water	91:9	0:0	2	copy_prior_start
op	91:26	0:0	2	=
op	91:28	0:0	2	-
water	91:29	0:0	2	1
water	91:30	0:0	2	;
call	92:4	92:75	2	MATCH_PER_STREAM_OPT
arg	92:25	92:41	3	copy_prior_start
water	92:25	0:0	4	copy_prior_start
arg	92:43	92:44	3	i
water	92:43	0:0	4	i
arg	92:46	92:67	3	ost->copy_prior_start
water	92:46	0:0	4	ost
op	92:49	0:0	4	->
water	92:51	0:0	4	copy_prior_start
arg	92:69	92:72	3	oc
water	92:69	0:0	4	oc
arg	92:73	92:75	3	st
water	92:73	0:0	4	st
water	92:76	0:0	2	;
call	93:4	93:61	2	MATCH_PER_STREAM_OPT
arg	93:25	93:42	3	bitstream_filters
water	93:25	0:0	4	bitstream_filters
arg	93:44	93:47	3	str
water	93:44	0:0	4	str
arg	93:49	93:53	3	bsfs
water	93:49	0:0	4	bsfs
arg	93:55	93:57	3	oc
water	93:55	0:0	4	oc
arg	93:59	93:61	3	st
water	93:59	0:0	4	st
water	93:62	0:0	2	;
while	94:4	133:4	2	(bsfs && * bsfs)
cond	94:11	94:20	3	bsfs && * bsfs
water	94:11	0:0	4	bsfs
op	94:16	0:0	4	&&
op	94:19	0:0	4	*
water	94:20	0:0	4	bsfs
stmts	94:26	133:4	3	
water	94:26	0:0	4	{
decl	95:8	95:39	4	const AVBitStreamFilter	*filter
decl	96:8	96:46	4	char	*bsf
water	96:17	0:0	4	,
decl	96:8	96:46	4	char	*bsf_options_str
water	96:35	0:0	4	,
decl	96:8	96:46	4	char	*bsf_name
water	97:8	0:0	4	bsf
op	97:12	0:0	4	=
call	97:14	97:37	4	av_get_token
arg	97:27	97:32	5	&bsfs
op	97:27	0:0	6	&
water	97:28	0:0	6	bsfs
arg	97:34	97:37	5	","
water	97:34	0:0	6	","
water	97:38	0:0	4	;
if	98:8	99:27	4	(! bsf)
cond	98:12	98:13	5	! bsf
op	98:12	0:0	6	!
water	98:13	0:0	6	bsf
stmts	99:12	99:27	5	
call	99:12	99:26	6	exit_program
arg	99:25	99:26	7	1
water	99:25	0:0	8	1
water	99:27	0:0	6	;
water	100:8	0:0	4	bsf_name
op	100:17	0:0	4	=
call	100:19	100:55	4	av_strtok
arg	100:29	100:32	5	bsf
water	100:29	0:0	6	bsf
arg	100:34	100:37	5	"="
water	100:34	0:0	6	"="
arg	100:39	100:55	5	&bsf_options_str
op	100:39	0:0	6	&
water	100:40	0:0	6	bsf_options_str
water	100:56	0:0	4	;
if	101:8	102:27	4	(! bsf_name)
cond	101:12	101:13	5	! bsf_name
op	101:12	0:0	6	!
water	101:13	0:0	6	bsf_name
stmts	102:12	102:27	5	
call	102:12	102:26	6	exit_program
arg	102:25	102:26	7	1
water	102:25	0:0	8	1
water	102:27	0:0	6	;
water	103:8	0:0	4	filter
op	103:15	0:0	4	=
call	103:17	103:44	4	av_bsf_get_by_name
arg	103:36	103:44	5	bsf_name
water	103:36	0:0	6	bsf_name
water	103:45	0:0	4	;
if	104:8	107:8	4	(! filter)
cond	104:12	104:13	5	! filter
op	104:12	0:0	6	!
water	104:13	0:0	6	filter
stmts	104:21	107:8	5	
water	104:21	0:0	6	{
call	105:12	105:80	6	av_log
arg	105:19	105:23	7	NULL
water	105:19	0:0	8	NULL
arg	105:25	105:37	7	AV_LOG_FATAL
water	105:25	0:0	8	AV_LOG_FATAL
arg	105:39	105:70	7	"Unknown bitstream filter %s\n"
water	105:39	0:0	8	"Unknown bitstream filter %s\n"
arg	105:72	105:80	7	bsf_name
water	105:72	0:0	8	bsf_name
water	105:81	0:0	6	;
call	106:12	106:26	6	exit_program
arg	106:25	106:26	7	1
water	106:25	0:0	8	1
water	106:27	0:0	6	;
water	107:8	0:0	6	}
water	108:8	0:0	4	ost
op	108:11	0:0	4	->
water	108:13	0:0	4	bsf_ctx
op	108:21	0:0	4	=
call	108:23	110:61	4	av_realloc_array
arg	108:40	108:52	5	ost->bsf_ctx
water	108:40	0:0	6	ost
op	108:43	0:0	6	->
water	108:45	0:0	6	bsf_ctx
arg	109:40	109:69	5	ost->nb_bitstream_filters+1
water	109:40	0:0	6	ost
op	109:43	0:0	6	->
water	109:45	0:0	6	nb_bitstream_filters
op	109:66	0:0	6	+
water	109:68	0:0	6	1
arg	110:40	110:61	5	sizeof(*ost->bsf_ctx)
op	110:40	0:0	6	sizeof
water	110:46	0:0	6	(
op	110:47	0:0	6	*
water	110:48	0:0	6	ost
op	110:51	0:0	6	->
water	110:53	0:0	6	bsf_ctx
water	110:60	0:0	6	)
water	110:62	0:0	4	;
if	111:8	112:27	4	(! ost -> bsf_ctx)
cond	111:12	111:18	5	! ost -> bsf_ctx
op	111:12	0:0	6	!
water	111:13	0:0	6	ost
op	111:16	0:0	6	->
water	111:18	0:0	6	bsf_ctx
stmts	112:12	112:27	5	
call	112:12	112:26	6	exit_program
arg	112:25	112:26	7	1
water	112:25	0:0	8	1
water	112:27	0:0	6	;
water	113:8	0:0	4	ret
op	113:12	0:0	4	=
call	113:14	113:75	4	av_bsf_alloc
arg	113:27	113:33	5	filter
water	113:27	0:0	6	filter
arg	113:35	113:75	5	&ost->bsf_ctx[ost->nb_bitstream_filters]
op	113:35	0:0	6	&
water	113:36	0:0	6	ost
op	113:39	0:0	6	->
water	113:41	0:0	6	bsf_ctx
op	113:48	0:0	6	[
water	113:49	0:0	6	ost
op	113:52	0:0	6	->
water	113:54	0:0	6	nb_bitstream_filters
op	113:74	0:0	6	]
water	113:76	0:0	4	;
if	114:8	117:8	4	(ret < 0)
cond	114:12	114:18	5	ret < 0
water	114:12	0:0	6	ret
op	114:16	0:0	6	<
water	114:18	0:0	6	0
stmts	114:21	117:8	5	
water	114:21	0:0	6	{
call	115:12	115:86	6	av_log
arg	115:19	115:23	7	NULL
water	115:19	0:0	8	NULL
arg	115:25	115:37	7	AV_LOG_ERROR
water	115:25	0:0	8	AV_LOG_ERROR
arg	115:39	115:86	7	"Error allocating a bitstream filter context\n"
water	115:39	0:0	8	"Error allocating a bitstream filter context\n"
water	115:87	0:0	6	;
call	116:12	116:26	6	exit_program
arg	116:25	116:26	7	1
water	116:25	0:0	8	1
water	116:27	0:0	6	;
water	117:8	0:0	6	}
water	118:8	0:0	4	ost
op	118:11	0:0	4	->
water	118:13	0:0	4	nb_bitstream_filters
op	118:33	0:0	4	++
water	118:35	0:0	4	;
if	119:8	129:8	4	(bsf_options_str && filter -> priv_class)
cond	119:12	119:39	5	bsf_options_str && filter -> priv_class
water	119:12	0:0	6	bsf_options_str
op	119:28	0:0	6	&&
water	119:31	0:0	6	filter
op	119:37	0:0	6	->
water	119:39	0:0	6	priv_class
stmts	119:51	129:8	5	
water	119:51	0:0	6	{
decl	120:12	120:105	6	const AVOption	*opt
op	120:32	0:0	6	=
call	120:34	120:104	7	av_opt_next
arg	120:46	120:98	8	ost->bsf_ctx[ost->nb_bitstream_filters-1]->priv_data
water	120:46	0:0	9	ost
op	120:49	0:0	9	->
water	120:51	0:0	9	bsf_ctx
op	120:58	0:0	9	[
water	120:59	0:0	9	ost
op	120:62	0:0	9	->
water	120:64	0:0	9	nb_bitstream_filters
op	120:84	0:0	9	-
water	120:85	0:0	9	1
op	120:86	0:0	9	]
op	120:87	0:0	9	->
water	120:89	0:0	9	priv_data
arg	120:100	120:104	8	NULL
water	120:100	0:0	9	NULL
decl	121:12	121:46	6	const char	*shorthand[2]
op	121:38	0:0	6	=
water	121:40	0:0	6	{
water	121:41	0:0	6	NULL
water	121:45	0:0	6	}
if	122:12	123:40	6	(opt)
cond	122:16	122:16	7	opt
water	122:16	0:0	8	opt
stmts	123:16	123:40	7	
water	123:16	0:0	8	shorthand
op	123:25	0:0	8	[
water	123:26	0:0	8	0
op	123:27	0:0	8	]
op	123:29	0:0	8	=
water	123:31	0:0	8	opt
op	123:34	0:0	8	->
water	123:36	0:0	8	name
water	123:40	0:0	8	;
water	124:12	0:0	6	ret
op	124:16	0:0	6	=
call	124:18	124:131	6	av_opt_set_from_string
arg	124:41	124:93	7	ost->bsf_ctx[ost->nb_bitstream_filters-1]->priv_data
water	124:41	0:0	8	ost
op	124:44	0:0	8	->
water	124:46	0:0	8	bsf_ctx
op	124:53	0:0	8	[
water	124:54	0:0	8	ost
op	124:57	0:0	8	->
water	124:59	0:0	8	nb_bitstream_filters
op	124:79	0:0	8	-
water	124:80	0:0	8	1
op	124:81	0:0	8	]
op	124:82	0:0	8	->
water	124:84	0:0	8	priv_data
arg	124:95	124:110	7	bsf_options_str
water	124:95	0:0	8	bsf_options_str
arg	124:112	124:121	7	shorthand
water	124:112	0:0	8	shorthand
arg	124:123	124:126	7	"="
water	124:123	0:0	8	"="
arg	124:128	124:131	7	":"
water	124:128	0:0	8	":"
water	124:132	0:0	6	;
if	125:12	128:12	6	(ret < 0)
cond	125:16	125:22	7	ret < 0
water	125:16	0:0	8	ret
op	125:20	0:0	8	<
water	125:22	0:0	8	0
stmts	125:25	128:12	7	
water	125:25	0:0	8	{
call	126:16	126:102	8	av_log
arg	126:23	126:27	9	NULL
water	126:23	0:0	10	NULL
arg	126:29	126:41	9	AV_LOG_ERROR
water	126:29	0:0	10	AV_LOG_ERROR
arg	126:43	126:92	9	"Error parsing options for bitstream filter %s\n"
water	126:43	0:0	10	"Error parsing options for bitstream filter %s\n"
arg	126:94	126:102	9	bsf_name
water	126:94	0:0	10	bsf_name
water	126:103	0:0	8	;
call	127:16	127:30	8	exit_program
arg	127:29	127:30	9	1
water	127:29	0:0	10	1
water	127:31	0:0	8	;
water	128:12	0:0	8	}
water	129:8	0:0	6	}
call	130:8	130:21	4	av_freep
arg	130:17	130:21	5	&bsf
op	130:17	0:0	6	&
water	130:18	0:0	6	bsf
water	130:22	0:0	4	;
if	131:8	132:18	4	(* bsfs)
cond	131:12	131:13	5	* bsfs
op	131:12	0:0	6	*
water	131:13	0:0	6	bsfs
stmts	132:12	132:18	5	
water	132:12	0:0	6	bsfs
op	132:16	0:0	6	++
water	132:18	0:0	6	;
water	133:4	0:0	4	}
if	134:4	140:4	2	(ost -> nb_bitstream_filters)
cond	134:8	134:13	3	ost -> nb_bitstream_filters
water	134:8	0:0	4	ost
op	134:11	0:0	4	->
water	134:13	0:0	4	nb_bitstream_filters
stmts	134:35	140:4	3	
water	134:35	0:0	4	{
water	135:8	0:0	4	ost
op	135:11	0:0	4	->
water	135:13	0:0	4	bsf_extradata_updated
op	135:35	0:0	4	=
call	135:37	135:116	4	av_mallocz_array
arg	135:54	135:79	5	ost->nb_bitstream_filters
water	135:54	0:0	6	ost
op	135:57	0:0	6	->
water	135:59	0:0	6	nb_bitstream_filters
arg	135:81	135:116	5	sizeof(*ost->bsf_extradata_updated)
op	135:81	0:0	6	sizeof
water	135:87	0:0	6	(
op	135:88	0:0	6	*
water	135:89	0:0	6	ost
op	135:92	0:0	6	->
water	135:94	0:0	6	bsf_extradata_updated
water	135:115	0:0	6	)
water	135:117	0:0	4	;
if	136:8	139:8	4	(! ost -> bsf_extradata_updated)
cond	136:12	136:18	5	! ost -> bsf_extradata_updated
op	136:12	0:0	6	!
water	136:13	0:0	6	ost
op	136:16	0:0	6	->
water	136:18	0:0	6	bsf_extradata_updated
stmts	136:41	139:8	5	
water	136:41	0:0	6	{
call	137:12	137:84	6	av_log
arg	137:19	137:23	7	NULL
water	137:19	0:0	8	NULL
arg	137:25	137:37	7	AV_LOG_FATAL
water	137:25	0:0	8	AV_LOG_FATAL
arg	137:39	137:84	7	"Bitstream filter memory allocation failed\n"
water	137:39	0:0	8	"Bitstream filter memory allocation failed\n"
water	137:85	0:0	6	;
call	138:12	138:26	6	exit_program
arg	138:25	138:26	7	1
water	138:25	0:0	8	1
water	138:27	0:0	6	;
water	139:8	0:0	6	}
water	140:4	0:0	4	}
call	141:4	141:59	2	MATCH_PER_STREAM_OPT
arg	141:25	141:35	3	codec_tags
water	141:25	0:0	4	codec_tags
arg	141:37	141:40	3	str
water	141:37	0:0	4	str
arg	141:42	141:51	3	codec_tag
water	141:42	0:0	4	codec_tag
arg	141:53	141:55	3	oc
water	141:53	0:0	4	oc
arg	141:57	141:59	3	st
water	141:57	0:0	4	st
water	141:60	0:0	2	;
if	142:4	148:4	2	(codec_tag)
cond	142:8	142:8	3	codec_tag
water	142:8	0:0	4	codec_tag
stmts	142:19	148:4	3	
water	142:19	0:0	4	{
decl	143:8	143:50	4	uint32_t	tag
op	143:21	0:0	4	=
call	143:23	143:49	5	strtol
arg	143:30	143:39	6	codec_tag
water	143:30	0:0	7	codec_tag
arg	143:41	143:46	6	&next
op	143:41	0:0	7	&
water	143:42	0:0	7	next
arg	143:48	143:49	6	0
water	143:48	0:0	7	0
if	144:8	145:36	4	(* next)
cond	144:12	144:13	5	* next
op	144:12	0:0	6	*
water	144:13	0:0	6	next
stmts	145:12	145:36	5	
water	145:12	0:0	6	tag
op	145:16	0:0	6	=
call	145:18	145:35	6	AV_RL32
arg	145:26	145:35	7	codec_tag
water	145:26	0:0	8	codec_tag
water	145:36	0:0	6	;
water	146:8	0:0	4	ost
op	146:11	0:0	4	->
water	146:13	0:0	4	st
op	146:15	0:0	4	->
water	146:17	0:0	4	codecpar
op	146:25	0:0	4	->
water	146:27	0:0	4	codec_tag
op	146:37	0:0	4	=
water	147:8	0:0	4	ost
op	147:11	0:0	4	->
water	147:13	0:0	4	enc_ctx
op	147:20	0:0	4	->
water	147:22	0:0	4	codec_tag
op	147:32	0:0	4	=
water	147:34	0:0	4	tag
water	147:37	0:0	4	;
water	148:4	0:0	4	}
call	149:4	149:52	2	MATCH_PER_STREAM_OPT
arg	149:25	149:31	3	qscale
water	149:25	0:0	4	qscale
arg	149:33	149:36	3	dbl
water	149:33	0:0	4	dbl
arg	149:38	149:44	3	qscale
water	149:38	0:0	4	qscale
arg	149:46	149:48	3	oc
water	149:46	0:0	4	oc
arg	149:50	149:52	3	st
water	149:50	0:0	4	st
water	149:53	0:0	2	;
if	150:4	153:4	2	(qscale >= 0)
cond	150:8	150:18	3	qscale >= 0
water	150:8	0:0	4	qscale
op	150:15	0:0	4	>=
water	150:18	0:0	4	0
stmts	150:21	153:4	3	
water	150:21	0:0	4	{
water	151:8	0:0	4	ost
op	151:11	0:0	4	->
water	151:13	0:0	4	enc_ctx
op	151:20	0:0	4	->
water	151:22	0:0	4	flags
op	151:28	0:0	4	|=
water	151:31	0:0	4	AV_CODEC_FLAG_QSCALE
water	151:51	0:0	4	;
water	152:8	0:0	4	ost
op	152:11	0:0	4	->
water	152:13	0:0	4	enc_ctx
op	152:20	0:0	4	->
water	152:22	0:0	4	global_quality
op	152:37	0:0	4	=
water	152:39	0:0	4	FF_QP2LAMBDA
op	152:52	0:0	4	*
water	152:54	0:0	4	qscale
water	152:60	0:0	4	;
water	153:4	0:0	4	}
call	154:4	154:67	2	MATCH_PER_STREAM_OPT
arg	154:25	154:36	3	disposition
water	154:25	0:0	4	disposition
arg	154:38	154:41	3	str
water	154:38	0:0	4	str
arg	154:43	154:59	3	ost->disposition
water	154:43	0:0	4	ost
op	154:46	0:0	4	->
water	154:48	0:0	4	disposition
arg	154:61	154:63	3	oc
water	154:61	0:0	4	oc
arg	154:65	154:67	3	st
water	154:65	0:0	4	st
water	154:68	0:0	2	;
water	155:4	0:0	2	ost
op	155:7	0:0	2	->
water	155:9	0:0	2	disposition
op	155:21	0:0	2	=
call	155:23	155:49	2	av_strdup
arg	155:33	155:49	3	ost->disposition
water	155:33	0:0	4	ost
op	155:36	0:0	4	->
water	155:38	0:0	4	disposition
water	155:50	0:0	2	;
water	156:4	0:0	2	ost
op	156:7	0:0	2	->
water	156:9	0:0	2	max_muxing_queue_size
op	156:31	0:0	2	=
water	156:33	0:0	2	128
water	156:36	0:0	2	;
call	157:4	157:85	2	MATCH_PER_STREAM_OPT
arg	157:25	157:46	3	max_muxing_queue_size
water	157:25	0:0	4	max_muxing_queue_size
arg	157:48	157:49	3	i
water	157:48	0:0	4	i
arg	157:51	157:77	3	ost->max_muxing_queue_size
water	157:51	0:0	4	ost
op	157:54	0:0	4	->
water	157:56	0:0	4	max_muxing_queue_size
arg	157:79	157:81	3	oc
water	157:79	0:0	4	oc
arg	157:83	157:85	3	st
water	157:83	0:0	4	st
water	157:86	0:0	2	;
water	158:4	0:0	2	ost
op	158:7	0:0	2	->
water	158:9	0:0	2	max_muxing_queue_size
op	158:31	0:0	2	*=
op	158:34	0:0	2	sizeof
water	158:40	0:0	2	(
water	158:41	0:0	2	AVPacket
water	158:49	0:0	2	)
water	158:50	0:0	2	;
if	159:4	160:58	2	(oc -> oformat -> flags & AVFMT_GLOBALHEADER)
cond	159:8	159:29	3	oc -> oformat -> flags & AVFMT_GLOBALHEADER
water	159:8	0:0	4	oc
op	159:10	0:0	4	->
water	159:12	0:0	4	oformat
op	159:19	0:0	4	->
water	159:21	0:0	4	flags
op	159:27	0:0	4	&
water	159:29	0:0	4	AVFMT_GLOBALHEADER
stmts	160:8	160:58	3	
water	160:8	0:0	4	ost
op	160:11	0:0	4	->
water	160:13	0:0	4	enc_ctx
op	160:20	0:0	4	->
water	160:22	0:0	4	flags
op	160:28	0:0	4	|=
water	160:31	0:0	4	AV_CODEC_FLAG_GLOBAL_HEADER
water	160:58	0:0	4	;
call	161:4	161:50	2	av_dict_copy
arg	161:17	161:31	3	&ost->sws_dict
op	161:17	0:0	4	&
water	161:18	0:0	4	ost
op	161:21	0:0	4	->
water	161:23	0:0	4	sws_dict
arg	161:33	161:47	3	o->g->sws_dict
water	161:33	0:0	4	o
op	161:34	0:0	4	->
water	161:36	0:0	4	g
op	161:37	0:0	4	->
water	161:39	0:0	4	sws_dict
arg	161:49	161:50	3	0
water	161:49	0:0	4	0
water	161:51	0:0	2	;
call	162:4	162:50	2	av_dict_copy
arg	162:17	162:31	3	&ost->swr_opts
op	162:17	0:0	4	&
water	162:18	0:0	4	ost
op	162:21	0:0	4	->
water	162:23	0:0	4	swr_opts
arg	162:33	162:47	3	o->g->swr_opts
water	162:33	0:0	4	o
op	162:34	0:0	4	->
water	162:36	0:0	4	g
op	162:37	0:0	4	->
water	162:39	0:0	4	swr_opts
arg	162:49	162:50	3	0
water	162:49	0:0	4	0
water	162:51	0:0	2	;
if	163:4	164:66	2	(ost -> enc &&av_get_exact_bits_per_sample (ost -> enc -> id ) == 24)
cond	163:8	163:66	3	ost -> enc &&av_get_exact_bits_per_sample (ost -> enc -> id ) == 24
water	163:8	0:0	4	ost
op	163:11	0:0	4	->
water	163:13	0:0	4	enc
op	163:17	0:0	4	&&
call	163:20	163:61	4	av_get_exact_bits_per_sample
arg	163:49	163:61	5	ost->enc->id
water	163:49	0:0	6	ost
op	163:52	0:0	6	->
water	163:54	0:0	6	enc
op	163:57	0:0	6	->
water	163:59	0:0	6	id
op	163:63	0:0	4	==
water	163:66	0:0	4	24
stmts	164:8	164:66	3	
call	164:8	164:65	4	av_dict_set
arg	164:20	164:34	5	&ost->swr_opts
op	164:20	0:0	6	&
water	164:21	0:0	6	ost
op	164:24	0:0	6	->
water	164:26	0:0	6	swr_opts
arg	164:36	164:56	5	"output_sample_bits"
water	164:36	0:0	6	"output_sample_bits"
arg	164:58	164:62	5	"24"
water	164:58	0:0	6	"24"
arg	164:64	164:65	5	0
water	164:64	0:0	6	0
water	164:66	0:0	4	;
call	165:4	165:60	2	av_dict_copy
arg	165:17	165:36	3	&ost->resample_opts
op	165:17	0:0	4	&
water	165:18	0:0	4	ost
op	165:21	0:0	4	->
water	165:23	0:0	4	resample_opts
arg	165:38	165:57	3	o->g->resample_opts
water	165:38	0:0	4	o
op	165:39	0:0	4	->
water	165:41	0:0	4	g
op	165:42	0:0	4	->
water	165:44	0:0	4	resample_opts
arg	165:59	165:60	3	0
water	165:59	0:0	4	0
water	165:61	0:0	2	;
water	166:4	0:0	2	ost
op	166:7	0:0	2	->
water	166:9	0:0	2	source_index
op	166:22	0:0	2	=
water	166:24	0:0	2	source_index
water	166:36	0:0	2	;
if	167:4	171:4	2	(source_index >= 0)
cond	167:8	167:24	3	source_index >= 0
water	167:8	0:0	4	source_index
op	167:21	0:0	4	>=
water	167:24	0:0	4	0
stmts	167:27	171:4	3	
water	167:27	0:0	4	{
water	168:8	0:0	4	ost
op	168:11	0:0	4	->
water	168:13	0:0	4	sync_ist
op	168:22	0:0	4	=
water	168:24	0:0	4	input_streams
op	168:37	0:0	4	[
water	168:38	0:0	4	source_index
op	168:50	0:0	4	]
water	168:51	0:0	4	;
water	169:8	0:0	4	input_streams
op	169:21	0:0	4	[
water	169:22	0:0	4	source_index
op	169:34	0:0	4	]
op	169:35	0:0	4	->
water	169:37	0:0	4	discard
op	169:45	0:0	4	=
water	169:47	0:0	4	0
water	169:48	0:0	4	;
water	170:8	0:0	4	input_streams
op	170:21	0:0	4	[
water	170:22	0:0	4	source_index
op	170:34	0:0	4	]
op	170:35	0:0	4	->
water	170:37	0:0	4	st
op	170:39	0:0	4	->
water	170:41	0:0	4	discard
op	170:49	0:0	4	=
water	170:51	0:0	4	input_streams
op	170:64	0:0	4	[
water	170:65	0:0	4	source_index
op	170:77	0:0	4	]
op	170:78	0:0	4	->
water	170:80	0:0	4	user_set_discard
water	170:96	0:0	4	;
water	171:4	0:0	4	}
water	172:4	0:0	2	ost
op	172:7	0:0	2	->
water	172:9	0:0	2	last_mux_dts
op	172:22	0:0	2	=
water	172:24	0:0	2	AV_NOPTS_VALUE
water	172:38	0:0	2	;
water	173:4	0:0	2	ost
op	173:7	0:0	2	->
water	173:9	0:0	2	muxing_queue
op	173:22	0:0	2	=
call	173:24	173:58	2	av_fifo_alloc
arg	173:38	173:58	3	8*sizeof(AVPacket)
water	173:38	0:0	4	8
op	173:40	0:0	4	*
op	173:42	0:0	4	sizeof
water	173:48	0:0	4	(
water	173:49	0:0	4	AVPacket
water	173:57	0:0	4	)
water	173:59	0:0	2	;
if	174:4	175:23	2	(! ost -> muxing_queue)
cond	174:8	174:14	3	! ost -> muxing_queue
op	174:8	0:0	4	!
water	174:9	0:0	4	ost
op	174:12	0:0	4	->
water	174:14	0:0	4	muxing_queue
stmts	175:8	175:23	3	
call	175:8	175:22	4	exit_program
arg	175:21	175:22	5	1
water	175:21	0:0	6	1
water	175:23	0:0	4	;
return	176:4	176:14	2	ost
water	176:11	0:0	3	ost
