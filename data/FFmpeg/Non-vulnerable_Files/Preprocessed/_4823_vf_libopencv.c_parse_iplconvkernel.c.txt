func	1:0	43:0	0	static int	parse_iplconvkernel
params	1:30	0:0	1	
param	1:31	1:53	2	IplConvKernel * *	kernel
param	1:55	1:64	2	char *	buf
param	1:66	1:79	2	void *	log_ctx
stmnts	0:0	42:14	1	
decl	3:4	3:57	2	char	shape_filename[128]
op	3:29	0:0	2	=
water	3:31	0:0	2	""
water	3:33	0:0	2	,
decl	3:4	3:57	2	char	shape_str[32]
op	3:49	0:0	2	=
water	3:51	0:0	2	"rect"
decl	4:4	4:77	2	int	cols
op	4:13	0:0	2	=
water	4:15	0:0	2	0
water	4:16	0:0	2	,
decl	4:4	4:77	2	int	rows
op	4:23	0:0	2	=
water	4:25	0:0	2	0
water	4:26	0:0	2	,
decl	4:4	4:77	2	int	anchor_x
op	4:37	0:0	2	=
water	4:39	0:0	2	0
water	4:40	0:0	2	,
decl	4:4	4:77	2	int	anchor_y
op	4:51	0:0	2	=
water	4:53	0:0	2	0
water	4:54	0:0	2	,
decl	4:4	4:77	2	int	shape
op	4:62	0:0	2	=
water	4:64	0:0	2	CV_SHAPE_RECT
decl	5:4	5:31	2	int	*values
op	5:16	0:0	2	=
water	5:18	0:0	2	NULL
water	5:22	0:0	2	,
decl	5:4	5:31	2	int	ret
op	5:28	0:0	2	=
water	5:30	0:0	2	0
call	6:4	6:106	2	sscanf
arg	6:11	6:14	3	buf
water	6:11	0:0	4	buf
arg	6:16	6:43	3	"%dx%d+%dx%d/%32[^=]=%127s"
water	6:16	0:0	4	"%dx%d+%dx%d/%32[^=]=%127s"
arg	6:45	6:50	3	&cols
op	6:45	0:0	4	&
water	6:46	0:0	4	cols
arg	6:52	6:57	3	&rows
op	6:52	0:0	4	&
water	6:53	0:0	4	rows
arg	6:59	6:68	3	&anchor_x
op	6:59	0:0	4	&
water	6:60	0:0	4	anchor_x
arg	6:70	6:79	3	&anchor_y
op	6:70	0:0	4	&
water	6:71	0:0	4	anchor_y
arg	6:81	6:90	3	shape_str
water	6:81	0:0	4	shape_str
arg	6:92	6:106	3	shape_filename
water	6:92	0:0	4	shape_filename
water	6:107	0:0	2	;
if	7:4	7:65	2	(!strcmp (shape_str ,"rect" ))
cond	7:13	7:41	3	!strcmp (shape_str ,"rect" )
op	7:13	0:0	4	!
call	7:14	7:41	4	strcmp
arg	7:21	7:30	5	shape_str
water	7:21	0:0	6	shape_str
arg	7:32	7:41	5	"rect"
water	7:32	0:0	6	"rect"
stmts	7:44	7:65	3	
water	7:44	0:0	4	shape
op	7:50	0:0	4	=
water	7:52	0:0	4	CV_SHAPE_RECT
water	7:65	0:0	4	;
else	8:4	8:66	2
stmts	8:9	8:66	3	
if	8:9	8:66	4	(!strcmp (shape_str ,"cross" ))
cond	8:13	8:41	5	!strcmp (shape_str ,"cross" )
op	8:13	0:0	6	!
call	8:14	8:41	6	strcmp
arg	8:21	8:30	7	shape_str
water	8:21	0:0	8	shape_str
arg	8:32	8:41	7	"cross"
water	8:32	0:0	8	"cross"
stmts	8:44	8:66	5	
water	8:44	0:0	6	shape
op	8:50	0:0	6	=
water	8:52	0:0	6	CV_SHAPE_CROSS
water	8:66	0:0	6	;
else	9:4	9:68	2
stmts	9:9	9:68	3	
if	9:9	9:68	4	(!strcmp (shape_str ,"ellipse" ))
cond	9:13	9:41	5	!strcmp (shape_str ,"ellipse" )
op	9:13	0:0	6	!
call	9:14	9:41	6	strcmp
arg	9:21	9:30	7	shape_str
water	9:21	0:0	8	shape_str
arg	9:32	9:41	7	"ellipse"
water	9:32	0:0	8	"ellipse"
stmts	9:44	9:68	5	
water	9:44	0:0	6	shape
op	9:50	0:0	6	=
water	9:52	0:0	6	CV_SHAPE_ELLIPSE
water	9:68	0:0	6	;
else	10:4	14:4	2
stmts	10:9	14:4	3	
if	10:9	14:4	4	(!strcmp (shape_str ,"custom" ))
cond	10:13	10:41	5	!strcmp (shape_str ,"custom" )
op	10:13	0:0	6	!
call	10:14	10:41	6	strcmp
arg	10:21	10:30	7	shape_str
water	10:21	0:0	8	shape_str
arg	10:32	10:41	7	"custom"
water	10:32	0:0	8	"custom"
stmts	10:44	14:4	5	
water	10:44	0:0	6	{
water	11:8	0:0	6	shape
op	11:14	0:0	6	=
water	11:16	0:0	6	CV_SHAPE_CUSTOM
water	11:31	0:0	6	;
if	12:8	13:22	6	(( ret =read_shape_from_file (& cols ,& rows ,& values ,shape_filename ,log_ctx ) ) < 0)
cond	12:12	12:91	7	( ret =read_shape_from_file (& cols ,& rows ,& values ,shape_filename ,log_ctx ) ) < 0
water	12:12	0:0	8	(
water	12:13	0:0	8	ret
op	12:17	0:0	8	=
call	12:19	12:86	8	read_shape_from_file
arg	12:40	12:45	9	&cols
op	12:40	0:0	10	&
water	12:41	0:0	10	cols
arg	12:47	12:52	9	&rows
op	12:47	0:0	10	&
water	12:48	0:0	10	rows
arg	12:54	12:61	9	&values
op	12:54	0:0	10	&
water	12:55	0:0	10	values
arg	12:63	12:77	9	shape_filename
water	12:63	0:0	10	shape_filename
arg	12:79	12:86	9	log_ctx
water	12:79	0:0	10	log_ctx
water	12:87	0:0	8	)
op	12:89	0:0	8	<
water	12:91	0:0	8	0
stmts	13:12	13:22	7	
return	13:12	13:22	8	ret
water	13:19	0:0	9	ret
water	14:4	0:0	6	}
else	14:6	19:4	2
stmts	14:11	19:4	3	
water	14:11	0:0	4	{
call	15:8	16:69	4	av_log
arg	15:15	15:22	5	log_ctx
water	15:15	0:0	6	log_ctx
arg	15:24	15:36	5	AV_LOG_ERROR
water	15:24	0:0	6	AV_LOG_ERROR
arg	16:15	16:58	5	"Shape unspecified or type '%s' unknown.\n"
water	16:15	0:0	6	"Shape unspecified or type '%s' unknown.\n"
arg	16:60	16:69	5	shape_str
water	16:60	0:0	6	shape_str
water	16:70	0:0	4	;
water	17:8	0:0	4	ret
op	17:12	0:0	4	=
call	17:14	17:28	4	AVERROR
arg	17:22	17:28	5	EINVAL
water	17:22	0:0	6	EINVAL
water	17:29	0:0	4	;
goto	18:8	18:16	4	out
water	18:13	0:0	5	out
water	19:4	0:0	4	}
if	20:4	25:4	2	(rows <= 0 || cols <= 0)
cond	20:8	20:29	3	rows <= 0 || cols <= 0
water	20:8	0:0	4	rows
op	20:13	0:0	4	<=
water	20:16	0:0	4	0
op	20:18	0:0	4	||
water	20:21	0:0	4	cols
op	20:26	0:0	4	<=
water	20:29	0:0	4	0
stmts	20:32	25:4	3	
water	20:32	0:0	4	{
call	21:8	22:79	4	av_log
arg	21:15	21:22	5	log_ctx
water	21:15	0:0	6	log_ctx
arg	21:24	21:36	5	AV_LOG_ERROR
water	21:24	0:0	6	AV_LOG_ERROR
arg	22:15	22:67	5	"Invalid non-positive values for shape size %dx%d\n"
water	22:15	0:0	6	"Invalid non-positive values for shape size %dx%d\n"
arg	22:69	22:73	5	cols
water	22:69	0:0	6	cols
arg	22:75	22:79	5	rows
water	22:75	0:0	6	rows
water	22:80	0:0	4	;
water	23:8	0:0	4	ret
op	23:12	0:0	4	=
call	23:14	23:28	4	AVERROR
arg	23:22	23:28	5	EINVAL
water	23:22	0:0	6	EINVAL
water	23:29	0:0	4	;
goto	24:8	24:16	4	out
water	24:13	0:0	5	out
water	25:4	0:0	4	}
if	26:4	32:4	2	(anchor_x < 0 || anchor_y < 0 || anchor_x >= cols || anchor_y >= rows)
cond	26:8	26:72	3	anchor_x < 0 || anchor_y < 0 || anchor_x >= cols || anchor_y >= rows
water	26:8	0:0	4	anchor_x
op	26:17	0:0	4	<
water	26:19	0:0	4	0
op	26:21	0:0	4	||
water	26:24	0:0	4	anchor_y
op	26:33	0:0	4	<
water	26:35	0:0	4	0
op	26:37	0:0	4	||
water	26:40	0:0	4	anchor_x
op	26:49	0:0	4	>=
water	26:52	0:0	4	cols
op	26:57	0:0	4	||
water	26:60	0:0	4	anchor_y
op	26:69	0:0	4	>=
water	26:72	0:0	4	rows
stmts	26:78	32:4	3	
water	26:78	0:0	4	{
call	27:8	29:45	4	av_log
arg	27:15	27:22	5	log_ctx
water	27:15	0:0	6	log_ctx
arg	27:24	27:36	5	AV_LOG_ERROR
water	27:24	0:0	6	AV_LOG_ERROR
arg	28:15	28:82	5	"Shape anchor %dx%d is not inside the rectangle with size %dx%d.\n"
water	28:15	0:0	6	"Shape anchor %dx%d is not inside the rectangle with size %dx%d.\n"
arg	29:15	29:23	5	anchor_x
water	29:15	0:0	6	anchor_x
arg	29:25	29:33	5	anchor_y
water	29:25	0:0	6	anchor_y
arg	29:35	29:39	5	cols
water	29:35	0:0	6	cols
arg	29:41	29:45	5	rows
water	29:41	0:0	6	rows
water	29:46	0:0	4	;
water	30:8	0:0	4	ret
op	30:12	0:0	4	=
call	30:14	30:28	4	AVERROR
arg	30:22	30:28	5	EINVAL
water	30:22	0:0	6	EINVAL
water	30:29	0:0	4	;
goto	31:8	31:16	4	out
water	31:13	0:0	5	out
water	32:4	0:0	4	}
op	33:4	0:0	2	*
water	33:5	0:0	2	kernel
op	33:12	0:0	2	=
call	33:14	33:88	2	cvCreateStructuringElementEx
arg	33:43	33:47	3	cols
water	33:43	0:0	4	cols
arg	33:49	33:53	3	rows
water	33:49	0:0	4	rows
arg	33:55	33:63	3	anchor_x
water	33:55	0:0	4	anchor_x
arg	33:65	33:73	3	anchor_y
water	33:65	0:0	4	anchor_y
arg	33:75	33:80	3	shape
water	33:75	0:0	4	shape
arg	33:82	33:88	3	values
water	33:82	0:0	4	values
water	33:89	0:0	2	;
if	34:4	37:4	2	(! * kernel)
cond	34:8	34:10	3	! * kernel
op	34:8	0:0	4	!
op	34:9	0:0	4	*
water	34:10	0:0	4	kernel
stmts	34:18	37:4	3	
water	34:18	0:0	4	{
water	35:8	0:0	4	ret
op	35:12	0:0	4	=
call	35:14	35:28	4	AVERROR
arg	35:22	35:28	5	ENOMEM
water	35:22	0:0	6	ENOMEM
water	35:29	0:0	4	;
goto	36:8	36:16	4	out
water	36:13	0:0	5	out
water	37:4	0:0	4	}
call	38:4	39:52	2	av_log
arg	38:11	38:18	3	log_ctx
water	38:11	0:0	4	log_ctx
arg	38:20	38:34	3	AV_LOG_VERBOSE
water	38:20	0:0	4	AV_LOG_VERBOSE
arg	38:36	38:89	3	"Structuring element: w:%d h:%d x:%d y:%d shape:%s\n"
water	38:36	0:0	4	"Structuring element: w:%d h:%d x:%d y:%d shape:%s\n"
arg	39:11	39:15	3	rows
water	39:11	0:0	4	rows
arg	39:17	39:21	3	cols
water	39:17	0:0	4	cols
arg	39:23	39:31	3	anchor_x
water	39:23	0:0	4	anchor_x
arg	39:33	39:41	3	anchor_y
water	39:33	0:0	4	anchor_y
arg	39:43	39:52	3	shape_str
water	39:43	0:0	4	shape_str
water	39:53	0:0	2	;
label	40:0	40:3	2	out :
call	41:4	41:20	2	av_freep
arg	41:13	41:20	3	&values
op	41:13	0:0	4	&
water	41:14	0:0	4	values
water	41:21	0:0	2	;
return	42:4	42:14	2	ret
water	42:11	0:0	3	ret
