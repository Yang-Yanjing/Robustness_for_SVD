func	1:0	47:0	0	static int	compute_mask
params	1:23	0:0	1	
param	1:24	1:32	2	int	step
param	1:34	1:48	2	uint32_t *	mask
stmnts	0:0	46:14	1	
decl	3:4	3:21	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:21	2	int	z
water	3:12	0:0	2	,
decl	3:4	3:21	2	int	ret
op	3:18	0:0	2	=
water	3:20	0:0	2	0
decl	4:4	4:56	2	int	counter_size
op	4:21	0:0	2	=
op	4:23	0:0	2	sizeof
water	4:29	0:0	2	(
water	4:30	0:0	2	uint32_t
water	4:38	0:0	2	)
op	4:40	0:0	2	*
water	4:42	0:0	2	(
water	4:43	0:0	2	2
op	4:45	0:0	2	*
water	4:47	0:0	2	step
op	4:52	0:0	2	+
water	4:54	0:0	2	1
water	4:55	0:0	2	)
decl	5:4	5:54	2	uint32_t	*temp1_counter
water	5:27	0:0	2	,
decl	5:4	5:54	2	uint32_t	*temp2_counter
water	5:43	0:0	2	,
decl	5:4	5:54	2	uint32_t	**counter
water	6:4	0:0	2	temp1_counter
op	6:18	0:0	2	=
call	6:20	6:43	2	av_mallocz
arg	6:31	6:43	3	counter_size
water	6:31	0:0	4	counter_size
water	6:44	0:0	2	;
if	7:4	10:4	2	(! temp1_counter)
cond	7:8	7:9	3	! temp1_counter
op	7:8	0:0	4	!
water	7:9	0:0	4	temp1_counter
stmts	7:24	10:4	3	
water	7:24	0:0	4	{
water	8:8	0:0	4	ret
op	8:12	0:0	4	=
call	8:14	8:28	4	AVERROR
arg	8:22	8:28	5	ENOMEM
water	8:22	0:0	6	ENOMEM
water	8:29	0:0	4	;
goto	9:8	9:16	4	end
water	9:13	0:0	5	end
water	10:4	0:0	4	}
water	11:4	0:0	2	temp2_counter
op	11:18	0:0	2	=
call	11:20	11:43	2	av_mallocz
arg	11:31	11:43	3	counter_size
water	11:31	0:0	4	counter_size
water	11:44	0:0	2	;
if	12:4	15:4	2	(! temp2_counter)
cond	12:8	12:9	3	! temp2_counter
op	12:8	0:0	4	!
water	12:9	0:0	4	temp2_counter
stmts	12:24	15:4	3	
water	12:24	0:0	4	{
water	13:8	0:0	4	ret
op	13:12	0:0	4	=
call	13:14	13:28	4	AVERROR
arg	13:22	13:28	5	ENOMEM
water	13:22	0:0	6	ENOMEM
water	13:29	0:0	4	;
goto	14:8	14:16	4	end
water	14:13	0:0	5	end
water	15:4	0:0	4	}
water	16:4	0:0	2	counter
op	16:12	0:0	2	=
call	16:14	16:63	2	av_mallocz_array
arg	16:31	16:43	3	2*step+1
water	16:31	0:0	4	2
op	16:33	0:0	4	*
water	16:35	0:0	4	step
op	16:40	0:0	4	+
water	16:42	0:0	4	1
arg	16:45	16:63	3	sizeof(uint32_t*)
op	16:45	0:0	4	sizeof
water	16:51	0:0	4	(
water	16:52	0:0	4	uint32_t
op	16:61	0:0	4	*
water	16:62	0:0	4	)
water	16:64	0:0	2	;
if	17:4	20:4	2	(! counter)
cond	17:8	17:9	3	! counter
op	17:8	0:0	4	!
water	17:9	0:0	4	counter
stmts	17:18	20:4	3	
water	17:18	0:0	4	{
water	18:8	0:0	4	ret
op	18:12	0:0	4	=
call	18:14	18:28	4	AVERROR
arg	18:22	18:28	5	ENOMEM
water	18:22	0:0	6	ENOMEM
water	18:29	0:0	4	;
goto	19:8	19:16	4	end
water	19:13	0:0	5	end
water	20:4	0:0	4	}
for	21:4	27:4	2	(i = 0 ;i < 2 * step + 1;i ++)
forinit	21:9	21:14	3	i = 0 ;
water	21:9	0:0	4	i
op	21:11	0:0	4	=
water	21:13	0:0	4	0
water	21:14	0:0	4	;
cond	21:16	21:31	3	i < 2 * step + 1
water	21:16	0:0	4	i
op	21:18	0:0	4	<
water	21:20	0:0	4	2
op	21:22	0:0	4	*
water	21:24	0:0	4	step
op	21:29	0:0	4	+
water	21:31	0:0	4	1
forexpr	21:34	21:35	3	i ++
water	21:34	0:0	4	i
op	21:35	0:0	4	++
stmts	21:39	27:4	3	
water	21:39	0:0	4	{
water	22:8	0:0	4	counter
op	22:15	0:0	4	[
water	22:16	0:0	4	i
op	22:17	0:0	4	]
op	22:19	0:0	4	=
call	22:21	22:44	4	av_mallocz
arg	22:32	22:44	5	counter_size
water	22:32	0:0	6	counter_size
water	22:45	0:0	4	;
if	23:8	26:8	4	(! counter [ i ])
cond	23:12	23:22	5	! counter [ i ]
op	23:12	0:0	6	!
water	23:13	0:0	6	counter
op	23:20	0:0	6	[
water	23:21	0:0	6	i
op	23:22	0:0	6	]
stmts	23:25	26:8	5	
water	23:25	0:0	6	{
water	24:12	0:0	6	ret
op	24:16	0:0	6	=
call	24:18	24:32	6	AVERROR
arg	24:26	24:32	7	ENOMEM
water	24:26	0:0	8	ENOMEM
water	24:33	0:0	6	;
goto	25:12	25:20	6	end
water	25:17	0:0	7	end
water	26:8	0:0	6	}
water	27:4	0:0	4	}
for	28:4	37:4	2	(i = 0 ;i < 2 * step + 1;i ++)
forinit	28:9	28:14	3	i = 0 ;
water	28:9	0:0	4	i
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:31	3	i < 2 * step + 1
water	28:16	0:0	4	i
op	28:18	0:0	4	<
water	28:20	0:0	4	2
op	28:22	0:0	4	*
water	28:24	0:0	4	step
op	28:29	0:0	4	+
water	28:31	0:0	4	1
forexpr	28:34	28:35	3	i ++
water	28:34	0:0	4	i
op	28:35	0:0	4	++
stmts	28:39	37:4	3	
water	28:39	0:0	4	{
call	29:8	29:45	4	memset
arg	29:15	29:28	5	temp1_counter
water	29:15	0:0	6	temp1_counter
arg	29:30	29:31	5	0
water	29:30	0:0	6	0
arg	29:33	29:45	5	counter_size
water	29:33	0:0	6	counter_size
water	29:46	0:0	4	;
water	30:8	0:0	4	temp1_counter
op	30:21	0:0	4	[
water	30:22	0:0	4	i
op	30:23	0:0	4	]
op	30:25	0:0	4	=
water	30:27	0:0	4	1
water	30:28	0:0	4	;
for	31:8	36:8	4	(z = 0 ;z < step * 2;z += 2)
forinit	31:13	31:18	5	z = 0 ;
water	31:13	0:0	6	z
op	31:15	0:0	6	=
water	31:17	0:0	6	0
water	31:18	0:0	6	;
cond	31:20	31:31	5	z < step * 2
water	31:20	0:0	6	z
op	31:22	0:0	6	<
water	31:24	0:0	6	step
op	31:29	0:0	6	*
water	31:31	0:0	6	2
forexpr	31:34	31:39	5	z += 2
water	31:34	0:0	6	z
op	31:36	0:0	6	+=
water	31:39	0:0	6	2
stmts	31:42	36:8	5	
water	31:42	0:0	6	{
call	32:12	32:79	6	add_mask_counter
arg	32:29	32:42	7	temp2_counter
water	32:29	0:0	8	temp2_counter
arg	32:44	32:54	7	counter[z]
water	32:44	0:0	8	counter
op	32:51	0:0	8	[
water	32:52	0:0	8	z
op	32:53	0:0	8	]
arg	32:56	32:69	7	temp1_counter
water	32:56	0:0	8	temp1_counter
arg	32:71	32:79	7	step*2
water	32:71	0:0	8	step
op	32:76	0:0	8	*
water	32:78	0:0	8	2
water	32:80	0:0	6	;
call	33:12	33:58	6	memcpy
arg	33:19	33:29	7	counter[z]
water	33:19	0:0	8	counter
op	33:26	0:0	8	[
water	33:27	0:0	8	z
op	33:28	0:0	8	]
arg	33:31	33:44	7	temp1_counter
water	33:31	0:0	8	temp1_counter
arg	33:46	33:58	7	counter_size
water	33:46	0:0	8	counter_size
water	33:59	0:0	6	;
call	34:12	34:83	6	add_mask_counter
arg	34:29	34:42	7	temp1_counter
water	34:29	0:0	8	temp1_counter
arg	34:44	34:58	7	counter[z+1]
water	34:44	0:0	8	counter
op	34:51	0:0	8	[
water	34:52	0:0	8	z
op	34:54	0:0	8	+
water	34:56	0:0	8	1
op	34:57	0:0	8	]
arg	34:60	34:73	7	temp2_counter
water	34:60	0:0	8	temp2_counter
arg	34:75	34:83	7	step*2
water	34:75	0:0	8	step
op	34:80	0:0	8	*
water	34:82	0:0	8	2
water	34:84	0:0	6	;
call	35:12	35:62	6	memcpy
arg	35:19	35:33	7	counter[z+1]
water	35:19	0:0	8	counter
op	35:26	0:0	8	[
water	35:27	0:0	8	z
op	35:29	0:0	8	+
water	35:31	0:0	8	1
op	35:32	0:0	8	]
arg	35:35	35:48	7	temp2_counter
water	35:35	0:0	8	temp2_counter
arg	35:50	35:62	7	counter_size
water	35:50	0:0	8	counter_size
water	35:63	0:0	6	;
water	36:8	0:0	6	}
water	37:4	0:0	4	}
call	38:4	38:44	2	memcpy
arg	38:11	38:15	3	mask
water	38:11	0:0	4	mask
arg	38:17	38:30	3	temp1_counter
water	38:17	0:0	4	temp1_counter
arg	38:32	38:44	3	counter_size
water	38:32	0:0	4	counter_size
water	38:45	0:0	2	;
label	39:0	39:3	2	end :
call	40:4	40:27	2	av_freep
arg	40:13	40:27	3	&temp1_counter
op	40:13	0:0	4	&
water	40:14	0:0	4	temp1_counter
water	40:28	0:0	2	;
call	41:4	41:27	2	av_freep
arg	41:13	41:27	3	&temp2_counter
op	41:13	0:0	4	&
water	41:14	0:0	4	temp2_counter
water	41:28	0:0	2	;
for	42:4	44:4	2	(i = 0 ;i < 2 * step + 1;i ++)
forinit	42:9	42:14	3	i = 0 ;
water	42:9	0:0	4	i
op	42:11	0:0	4	=
water	42:13	0:0	4	0
water	42:14	0:0	4	;
cond	42:16	42:31	3	i < 2 * step + 1
water	42:16	0:0	4	i
op	42:18	0:0	4	<
water	42:20	0:0	4	2
op	42:22	0:0	4	*
water	42:24	0:0	4	step
op	42:29	0:0	4	+
water	42:31	0:0	4	1
forexpr	42:34	42:35	3	i ++
water	42:34	0:0	4	i
op	42:35	0:0	4	++
stmts	42:39	44:4	3	
water	42:39	0:0	4	{
call	43:8	43:28	4	av_freep
arg	43:17	43:28	5	&counter[i]
op	43:17	0:0	6	&
water	43:18	0:0	6	counter
op	43:25	0:0	6	[
water	43:26	0:0	6	i
op	43:27	0:0	6	]
water	43:29	0:0	4	;
water	44:4	0:0	4	}
call	45:4	45:21	2	av_freep
arg	45:13	45:21	3	&counter
op	45:13	0:0	4	&
water	45:14	0:0	4	counter
water	45:22	0:0	2	;
return	46:4	46:14	2	ret
water	46:11	0:0	3	ret
