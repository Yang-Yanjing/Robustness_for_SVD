func	1:0	129:0	0	static void	codebook_trellis_rate
params	1:33	0:0	1	
param	1:34	1:50	2	AACEncContext *	s
param	1:52	1:77	2	SingleChannelElement *	sce
param	2:34	2:41	2	int	win
param	2:43	2:56	2	int	group_len
param	2:58	2:76	2	const float	lambda
stmnts	4:4	128:4	1	
water	4:4	0:0	2	BandCodingPath
water	4:19	0:0	2	path
op	4:23	0:0	2	[
water	4:24	0:0	2	120
op	4:27	0:0	2	]
op	4:28	0:0	2	[
water	4:29	0:0	2	CB_TOT_ALL
op	4:39	0:0	2	]
water	4:40	0:0	2	;
decl	5:4	5:31	2	int	w
water	5:9	0:0	2	,
decl	5:4	5:31	2	int	swb
water	5:14	0:0	2	,
decl	5:4	5:31	2	int	cb
water	5:18	0:0	2	,
decl	5:4	5:31	2	int	start
water	5:25	0:0	2	,
decl	5:4	5:31	2	int	size
decl	6:4	6:12	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	j
decl	7:4	7:41	2	const int	max_sfb
op	7:23	0:0	2	=
water	7:25	0:0	2	sce
op	7:28	0:0	2	->
water	7:30	0:0	2	ics
op	7:33	0:0	2	.
water	7:34	0:0	2	max_sfb
decl	8:4	8:58	2	const int	run_bits
op	8:23	0:0	2	=
water	8:25	0:0	2	sce
op	8:28	0:0	2	->
water	8:30	0:0	2	ics
op	8:33	0:0	2	.
water	8:34	0:0	2	num_windows
op	8:46	0:0	2	==
water	8:49	0:0	2	1
water	8:51	0:0	2	?
water	8:53	0:0	2	5
water	8:55	0:0	2	:
water	8:57	0:0	2	3
decl	9:4	9:44	2	const int	run_esc
op	9:23	0:0	2	=
water	9:25	0:0	2	(
water	9:26	0:0	2	1
op	9:28	0:0	2	<<
water	9:31	0:0	2	run_bits
water	9:39	0:0	2	)
op	9:41	0:0	2	-
water	9:43	0:0	2	1
decl	10:4	10:24	2	int	idx
water	10:11	0:0	2	,
decl	10:4	10:24	2	int	ppos
water	10:17	0:0	2	,
decl	10:4	10:24	2	int	count
decl	11:4	11:46	2	int	stackrun[120]
water	11:21	0:0	2	,
decl	11:4	11:46	2	int	stackcb[120]
water	11:35	0:0	2	,
decl	11:4	11:46	2	int	stack_len
decl	12:4	12:33	2	float	next_minbits
op	12:23	0:0	2	=
water	12:25	0:0	2	INFINITY
decl	13:4	13:22	2	int	next_mincb
op	13:19	0:0	2	=
water	13:21	0:0	2	0
call	14:4	14:44	2	abs_pow34_v
arg	14:16	14:25	3	s->scoefs
water	14:16	0:0	4	s
op	14:17	0:0	4	->
water	14:19	0:0	4	scoefs
arg	14:27	14:38	3	sce->coeffs
water	14:27	0:0	4	sce
op	14:30	0:0	4	->
water	14:32	0:0	4	coeffs
arg	14:40	14:44	3	1024
water	14:40	0:0	4	1024
water	14:45	0:0	2	;
water	15:4	0:0	2	start
op	15:10	0:0	2	=
water	15:12	0:0	2	win
op	15:15	0:0	2	*
water	15:16	0:0	2	128
water	15:19	0:0	2	;
for	16:4	20:4	2	(cb = 0 ;cb < CB_TOT_ALL;cb ++)
forinit	16:9	16:15	3	cb = 0 ;
water	16:9	0:0	4	cb
op	16:12	0:0	4	=
water	16:14	0:0	4	0
water	16:15	0:0	4	;
cond	16:17	16:22	3	cb < CB_TOT_ALL
water	16:17	0:0	4	cb
op	16:20	0:0	4	<
water	16:22	0:0	4	CB_TOT_ALL
forexpr	16:34	16:36	3	cb ++
water	16:34	0:0	4	cb
op	16:36	0:0	4	++
stmts	16:40	20:4	3	
water	16:40	0:0	4	{
water	17:8	0:0	4	path
op	17:12	0:0	4	[
water	17:13	0:0	4	0
op	17:14	0:0	4	]
op	17:15	0:0	4	[
water	17:16	0:0	4	cb
op	17:18	0:0	4	]
op	17:19	0:0	4	.
water	17:20	0:0	4	cost
op	17:29	0:0	4	=
water	17:31	0:0	4	run_bits
op	17:39	0:0	4	+
water	17:40	0:0	4	4
water	17:41	0:0	4	;
water	18:8	0:0	4	path
op	18:12	0:0	4	[
water	18:13	0:0	4	0
op	18:14	0:0	4	]
op	18:15	0:0	4	[
water	18:16	0:0	4	cb
op	18:18	0:0	4	]
op	18:19	0:0	4	.
water	18:20	0:0	4	prev_idx
op	18:29	0:0	4	=
op	18:31	0:0	4	-
water	18:32	0:0	4	1
water	18:33	0:0	4	;
water	19:8	0:0	4	path
op	19:12	0:0	4	[
water	19:13	0:0	4	0
op	19:14	0:0	4	]
op	19:15	0:0	4	[
water	19:16	0:0	4	cb
op	19:18	0:0	4	]
op	19:19	0:0	4	.
water	19:20	0:0	4	run
op	19:29	0:0	4	=
water	19:31	0:0	4	0
water	19:32	0:0	4	;
water	20:4	0:0	4	}
for	21:4	94:4	2	(swb = 0 ;swb < max_sfb;swb ++)
forinit	21:9	21:16	3	swb = 0 ;
water	21:9	0:0	4	swb
op	21:13	0:0	4	=
water	21:15	0:0	4	0
water	21:16	0:0	4	;
cond	21:18	21:24	3	swb < max_sfb
water	21:18	0:0	4	swb
op	21:22	0:0	4	<
water	21:24	0:0	4	max_sfb
forexpr	21:33	21:36	3	swb ++
water	21:33	0:0	4	swb
op	21:36	0:0	4	++
stmts	21:40	94:4	3	
water	21:40	0:0	4	{
water	22:8	0:0	4	size
op	22:13	0:0	4	=
water	22:15	0:0	4	sce
op	22:18	0:0	4	->
water	22:20	0:0	4	ics
op	22:23	0:0	4	.
water	22:24	0:0	4	swb_sizes
op	22:33	0:0	4	[
water	22:34	0:0	4	swb
op	22:37	0:0	4	]
water	22:38	0:0	4	;
if	23:8	45:8	4	(sce -> zeroes [ win * 16 + swb ])
cond	23:12	23:36	5	sce -> zeroes [ win * 16 + swb ]
water	23:12	0:0	6	sce
op	23:15	0:0	6	->
water	23:17	0:0	6	zeroes
op	23:23	0:0	6	[
water	23:24	0:0	6	win
op	23:27	0:0	6	*
water	23:28	0:0	6	16
op	23:31	0:0	6	+
water	23:33	0:0	6	swb
op	23:36	0:0	6	]
stmts	23:39	45:8	5	
water	23:39	0:0	6	{
decl	24:12	24:52	6	float	cost_stay_here
op	24:33	0:0	6	=
water	24:35	0:0	6	path
op	24:39	0:0	6	[
water	24:40	0:0	6	swb
op	24:43	0:0	6	]
op	24:44	0:0	6	[
water	24:45	0:0	6	0
op	24:46	0:0	6	]
op	24:47	0:0	6	.
water	24:48	0:0	6	cost
decl	25:12	25:62	6	float	cost_get_here
op	25:33	0:0	6	=
water	25:35	0:0	6	next_minbits
op	25:48	0:0	6	+
water	25:50	0:0	6	run_bits
op	25:59	0:0	6	+
water	25:61	0:0	6	4
if	26:12	28:42	6	(run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ 0 ] . run ] != run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ 0 ] . run + 1 ])
cond	26:19	27:79	7	run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ 0 ] . run ] != run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ 0 ] . run + 1 ]
water	26:19	0:0	8	run_value_bits
op	26:33	0:0	8	[
water	26:34	0:0	8	sce
op	26:37	0:0	8	->
water	26:39	0:0	8	ics
op	26:42	0:0	8	.
water	26:43	0:0	8	num_windows
op	26:55	0:0	8	==
water	26:58	0:0	8	8
op	26:59	0:0	8	]
op	26:60	0:0	8	[
water	26:61	0:0	8	path
op	26:65	0:0	8	[
water	26:66	0:0	8	swb
op	26:69	0:0	8	]
op	26:70	0:0	8	[
water	26:71	0:0	8	0
op	26:72	0:0	8	]
op	26:73	0:0	8	.
water	26:74	0:0	8	run
op	26:77	0:0	8	]
op	27:16	0:0	8	!=
water	27:19	0:0	8	run_value_bits
op	27:33	0:0	8	[
water	27:34	0:0	8	sce
op	27:37	0:0	8	->
water	27:39	0:0	8	ics
op	27:42	0:0	8	.
water	27:43	0:0	8	num_windows
op	27:55	0:0	8	==
water	27:58	0:0	8	8
op	27:59	0:0	8	]
op	27:60	0:0	8	[
water	27:61	0:0	8	path
op	27:65	0:0	8	[
water	27:66	0:0	8	swb
op	27:69	0:0	8	]
op	27:70	0:0	8	[
water	27:71	0:0	8	0
op	27:72	0:0	8	]
op	27:73	0:0	8	.
water	27:74	0:0	8	run
op	27:77	0:0	8	+
water	27:78	0:0	8	1
op	27:79	0:0	8	]
stmts	28:16	28:42	7	
water	28:16	0:0	8	cost_stay_here
op	28:31	0:0	8	+=
water	28:34	0:0	8	run_bits
water	28:42	0:0	8	;
if	29:12	33:12	6	(cost_get_here < cost_stay_here)
cond	29:16	29:32	7	cost_get_here < cost_stay_here
water	29:16	0:0	8	cost_get_here
op	29:30	0:0	8	<
water	29:32	0:0	8	cost_stay_here
stmts	29:48	33:12	7	
water	29:48	0:0	8	{
water	30:16	0:0	8	path
op	30:20	0:0	8	[
water	30:21	0:0	8	swb
op	30:24	0:0	8	+
water	30:25	0:0	8	1
op	30:26	0:0	8	]
op	30:27	0:0	8	[
water	30:28	0:0	8	0
op	30:29	0:0	8	]
op	30:30	0:0	8	.
water	30:31	0:0	8	prev_idx
op	30:40	0:0	8	=
water	30:42	0:0	8	next_mincb
water	30:52	0:0	8	;
water	31:16	0:0	8	path
op	31:20	0:0	8	[
water	31:21	0:0	8	swb
op	31:24	0:0	8	+
water	31:25	0:0	8	1
op	31:26	0:0	8	]
op	31:27	0:0	8	[
water	31:28	0:0	8	0
op	31:29	0:0	8	]
op	31:30	0:0	8	.
water	31:31	0:0	8	cost
op	31:40	0:0	8	=
water	31:42	0:0	8	cost_get_here
water	31:55	0:0	8	;
water	32:16	0:0	8	path
op	32:20	0:0	8	[
water	32:21	0:0	8	swb
op	32:24	0:0	8	+
water	32:25	0:0	8	1
op	32:26	0:0	8	]
op	32:27	0:0	8	[
water	32:28	0:0	8	0
op	32:29	0:0	8	]
op	32:30	0:0	8	.
water	32:31	0:0	8	run
op	32:40	0:0	8	=
water	32:42	0:0	8	1
water	32:43	0:0	8	;
water	33:12	0:0	8	}
else	33:14	37:12	6
stmts	33:19	37:12	7	
water	33:19	0:0	8	{
water	34:16	0:0	8	path
op	34:20	0:0	8	[
water	34:21	0:0	8	swb
op	34:24	0:0	8	+
water	34:25	0:0	8	1
op	34:26	0:0	8	]
op	34:27	0:0	8	[
water	34:28	0:0	8	0
op	34:29	0:0	8	]
op	34:30	0:0	8	.
water	34:31	0:0	8	prev_idx
op	34:40	0:0	8	=
water	34:42	0:0	8	0
water	34:43	0:0	8	;
water	35:16	0:0	8	path
op	35:20	0:0	8	[
water	35:21	0:0	8	swb
op	35:24	0:0	8	+
water	35:25	0:0	8	1
op	35:26	0:0	8	]
op	35:27	0:0	8	[
water	35:28	0:0	8	0
op	35:29	0:0	8	]
op	35:30	0:0	8	.
water	35:31	0:0	8	cost
op	35:40	0:0	8	=
water	35:42	0:0	8	cost_stay_here
water	35:56	0:0	8	;
water	36:16	0:0	8	path
op	36:20	0:0	8	[
water	36:21	0:0	8	swb
op	36:24	0:0	8	+
water	36:25	0:0	8	1
op	36:26	0:0	8	]
op	36:27	0:0	8	[
water	36:28	0:0	8	0
op	36:29	0:0	8	]
op	36:30	0:0	8	.
water	36:31	0:0	8	run
op	36:40	0:0	8	=
water	36:42	0:0	8	path
op	36:46	0:0	8	[
water	36:47	0:0	8	swb
op	36:50	0:0	8	]
op	36:51	0:0	8	[
water	36:52	0:0	8	0
op	36:53	0:0	8	]
op	36:54	0:0	8	.
water	36:55	0:0	8	run
op	36:59	0:0	8	+
water	36:61	0:0	8	1
water	36:62	0:0	8	;
water	37:12	0:0	8	}
water	38:12	0:0	6	next_minbits
op	38:25	0:0	6	=
water	38:27	0:0	6	path
op	38:31	0:0	6	[
water	38:32	0:0	6	swb
op	38:35	0:0	6	+
water	38:36	0:0	6	1
op	38:37	0:0	6	]
op	38:38	0:0	6	[
water	38:39	0:0	6	0
op	38:40	0:0	6	]
op	38:41	0:0	6	.
water	38:42	0:0	6	cost
water	38:46	0:0	6	;
water	39:12	0:0	6	next_mincb
op	39:23	0:0	6	=
water	39:25	0:0	6	0
water	39:26	0:0	6	;
for	40:12	44:12	6	(cb = 1 ;cb < CB_TOT_ALL;cb ++)
forinit	40:17	40:23	7	cb = 1 ;
water	40:17	0:0	8	cb
op	40:20	0:0	8	=
water	40:22	0:0	8	1
water	40:23	0:0	8	;
cond	40:25	40:30	7	cb < CB_TOT_ALL
water	40:25	0:0	8	cb
op	40:28	0:0	8	<
water	40:30	0:0	8	CB_TOT_ALL
forexpr	40:42	40:44	7	cb ++
water	40:42	0:0	8	cb
op	40:44	0:0	8	++
stmts	40:48	44:12	7	
water	40:48	0:0	8	{
water	41:16	0:0	8	path
op	41:20	0:0	8	[
water	41:21	0:0	8	swb
op	41:24	0:0	8	+
water	41:25	0:0	8	1
op	41:26	0:0	8	]
op	41:27	0:0	8	[
water	41:28	0:0	8	cb
op	41:30	0:0	8	]
op	41:31	0:0	8	.
water	41:32	0:0	8	cost
op	41:37	0:0	8	=
water	41:39	0:0	8	61450
water	41:44	0:0	8	;
water	42:16	0:0	8	path
op	42:20	0:0	8	[
water	42:21	0:0	8	swb
op	42:24	0:0	8	+
water	42:25	0:0	8	1
op	42:26	0:0	8	]
op	42:27	0:0	8	[
water	42:28	0:0	8	cb
op	42:30	0:0	8	]
op	42:31	0:0	8	.
water	42:32	0:0	8	prev_idx
op	42:41	0:0	8	=
op	42:43	0:0	8	-
water	42:44	0:0	8	1
water	42:45	0:0	8	;
water	43:16	0:0	8	path
op	43:20	0:0	8	[
water	43:21	0:0	8	swb
op	43:24	0:0	8	+
water	43:25	0:0	8	1
op	43:26	0:0	8	]
op	43:27	0:0	8	[
water	43:28	0:0	8	cb
op	43:30	0:0	8	]
op	43:31	0:0	8	.
water	43:32	0:0	8	run
op	43:36	0:0	8	=
water	43:38	0:0	8	0
water	43:39	0:0	8	;
water	44:12	0:0	8	}
water	45:8	0:0	6	}
else	45:10	92:8	4
stmts	45:15	92:8	5	
water	45:15	0:0	6	{
decl	46:12	46:40	6	float	minbits
op	46:26	0:0	6	=
water	46:28	0:0	6	next_minbits
decl	47:12	47:34	6	int	mincb
op	47:22	0:0	6	=
water	47:24	0:0	6	next_mincb
decl	48:12	48:52	6	int	startcb
op	48:24	0:0	6	=
water	48:26	0:0	6	sce
op	48:29	0:0	6	->
water	48:31	0:0	6	band_type
op	48:40	0:0	6	[
water	48:41	0:0	6	win
op	48:44	0:0	6	*
water	48:45	0:0	6	16
op	48:47	0:0	6	+
water	48:48	0:0	6	swb
op	48:51	0:0	6	]
water	49:12	0:0	6	startcb
op	49:20	0:0	6	=
water	49:22	0:0	6	aac_cb_in_map
op	49:35	0:0	6	[
water	49:36	0:0	6	startcb
op	49:43	0:0	6	]
water	49:44	0:0	6	;
water	50:12	0:0	6	next_minbits
op	50:25	0:0	6	=
water	50:27	0:0	6	INFINITY
water	50:35	0:0	6	;
water	51:12	0:0	6	next_mincb
op	51:23	0:0	6	=
water	51:25	0:0	6	0
water	51:26	0:0	6	;
for	52:12	56:12	6	(cb = 0 ;cb < startcb;cb ++)
forinit	52:17	52:23	7	cb = 0 ;
water	52:17	0:0	8	cb
op	52:20	0:0	8	=
water	52:22	0:0	8	0
water	52:23	0:0	8	;
cond	52:25	52:30	7	cb < startcb
water	52:25	0:0	8	cb
op	52:28	0:0	8	<
water	52:30	0:0	8	startcb
forexpr	52:39	52:41	7	cb ++
water	52:39	0:0	8	cb
op	52:41	0:0	8	++
stmts	52:45	56:12	7	
water	52:45	0:0	8	{
water	53:16	0:0	8	path
op	53:20	0:0	8	[
water	53:21	0:0	8	swb
op	53:24	0:0	8	+
water	53:25	0:0	8	1
op	53:26	0:0	8	]
op	53:27	0:0	8	[
water	53:28	0:0	8	cb
op	53:30	0:0	8	]
op	53:31	0:0	8	.
water	53:32	0:0	8	cost
op	53:37	0:0	8	=
water	53:39	0:0	8	61450
water	53:44	0:0	8	;
water	54:16	0:0	8	path
op	54:20	0:0	8	[
water	54:21	0:0	8	swb
op	54:24	0:0	8	+
water	54:25	0:0	8	1
op	54:26	0:0	8	]
op	54:27	0:0	8	[
water	54:28	0:0	8	cb
op	54:30	0:0	8	]
op	54:31	0:0	8	.
water	54:32	0:0	8	prev_idx
op	54:41	0:0	8	=
op	54:43	0:0	8	-
water	54:44	0:0	8	1
water	54:45	0:0	8	;
water	55:16	0:0	8	path
op	55:20	0:0	8	[
water	55:21	0:0	8	swb
op	55:24	0:0	8	+
water	55:25	0:0	8	1
op	55:26	0:0	8	]
op	55:27	0:0	8	[
water	55:28	0:0	8	cb
op	55:30	0:0	8	]
op	55:31	0:0	8	.
water	55:32	0:0	8	run
op	55:36	0:0	8	=
water	55:38	0:0	8	0
water	55:39	0:0	8	;
water	56:12	0:0	8	}
for	57:12	91:12	6	(cb = startcb ;cb < CB_TOT_ALL;cb ++)
forinit	57:17	57:29	7	cb = startcb ;
water	57:17	0:0	8	cb
op	57:20	0:0	8	=
water	57:22	0:0	8	startcb
water	57:29	0:0	8	;
cond	57:31	57:36	7	cb < CB_TOT_ALL
water	57:31	0:0	8	cb
op	57:34	0:0	8	<
water	57:36	0:0	8	CB_TOT_ALL
forexpr	57:48	57:50	7	cb ++
water	57:48	0:0	8	cb
op	57:50	0:0	8	++
stmts	57:54	91:12	7	
water	57:54	0:0	8	{
decl	58:16	58:51	8	float	cost_stay_here
water	58:36	0:0	8	,
decl	58:16	58:51	8	float	cost_get_here
decl	59:16	59:33	8	float	bits
op	59:27	0:0	8	=
water	59:29	0:0	8	0
op	59:30	0:0	8	.
water	59:31	0:0	8	0
water	59:32	0:0	8	f
if	60:16	65:16	8	(cb >= 12 && sce -> band_type [ win * 16 + swb ] != aac_cb_out_map [ cb ])
cond	60:20	60:79	9	cb >= 12 && sce -> band_type [ win * 16 + swb ] != aac_cb_out_map [ cb ]
water	60:20	0:0	10	cb
op	60:23	0:0	10	>=
water	60:26	0:0	10	12
op	60:29	0:0	10	&&
water	60:32	0:0	10	sce
op	60:35	0:0	10	->
water	60:37	0:0	10	band_type
op	60:46	0:0	10	[
water	60:47	0:0	10	win
op	60:50	0:0	10	*
water	60:51	0:0	10	16
op	60:53	0:0	10	+
water	60:54	0:0	10	swb
op	60:57	0:0	10	]
op	60:59	0:0	10	!=
water	60:62	0:0	10	aac_cb_out_map
op	60:76	0:0	10	[
water	60:77	0:0	10	cb
op	60:79	0:0	10	]
stmts	60:82	65:16	9	
water	60:82	0:0	10	{
water	61:20	0:0	10	path
op	61:24	0:0	10	[
water	61:25	0:0	10	swb
op	61:28	0:0	10	+
water	61:29	0:0	10	1
op	61:30	0:0	10	]
op	61:31	0:0	10	[
water	61:32	0:0	10	cb
op	61:34	0:0	10	]
op	61:35	0:0	10	.
water	61:36	0:0	10	cost
op	61:41	0:0	10	=
water	61:43	0:0	10	61450
water	61:48	0:0	10	;
water	62:20	0:0	10	path
op	62:24	0:0	10	[
water	62:25	0:0	10	swb
op	62:28	0:0	10	+
water	62:29	0:0	10	1
op	62:30	0:0	10	]
op	62:31	0:0	10	[
water	62:32	0:0	10	cb
op	62:34	0:0	10	]
op	62:35	0:0	10	.
water	62:36	0:0	10	prev_idx
op	62:45	0:0	10	=
op	62:47	0:0	10	-
water	62:48	0:0	10	1
water	62:49	0:0	10	;
water	63:20	0:0	10	path
op	63:24	0:0	10	[
water	63:25	0:0	10	swb
op	63:28	0:0	10	+
water	63:29	0:0	10	1
op	63:30	0:0	10	]
op	63:31	0:0	10	[
water	63:32	0:0	10	cb
op	63:34	0:0	10	]
op	63:35	0:0	10	.
water	63:36	0:0	10	run
op	63:40	0:0	10	=
water	63:42	0:0	10	0
water	63:43	0:0	10	;
continue	64:20	64:28	10	
water	65:16	0:0	10	}
for	66:16	72:16	8	(w = 0 ;w < group_len;w ++)
forinit	66:21	66:26	9	w = 0 ;
water	66:21	0:0	10	w
op	66:23	0:0	10	=
water	66:25	0:0	10	0
water	66:26	0:0	10	;
cond	66:28	66:32	9	w < group_len
water	66:28	0:0	10	w
op	66:30	0:0	10	<
water	66:32	0:0	10	group_len
forexpr	66:43	66:44	9	w ++
water	66:43	0:0	10	w
op	66:44	0:0	10	++
stmts	66:48	72:16	9	
water	66:48	0:0	10	{
water	67:20	0:0	10	bits
op	67:25	0:0	10	+=
call	67:28	71:67	10	quantize_band_cost
arg	67:47	67:48	11	s
water	67:47	0:0	12	s
arg	67:50	67:77	11	&sce->coeffs[start+w*128]
op	67:50	0:0	12	&
water	67:51	0:0	12	sce
op	67:54	0:0	12	->
water	67:56	0:0	12	coeffs
op	67:62	0:0	12	[
water	67:63	0:0	12	start
op	67:69	0:0	12	+
water	67:71	0:0	12	w
op	67:72	0:0	12	*
water	67:73	0:0	12	128
op	67:76	0:0	12	]
arg	68:47	68:72	11	&s->scoefs[start+w*128]
op	68:47	0:0	12	&
water	68:48	0:0	12	s
op	68:49	0:0	12	->
water	68:51	0:0	12	scoefs
op	68:57	0:0	12	[
water	68:58	0:0	12	start
op	68:64	0:0	12	+
water	68:66	0:0	12	w
op	68:67	0:0	12	*
water	68:68	0:0	12	128
op	68:71	0:0	12	]
arg	68:74	68:78	11	size
water	68:74	0:0	12	size
arg	69:47	69:70	11	sce->sf_idx[win*16+swb]
water	69:47	0:0	12	sce
op	69:50	0:0	12	->
water	69:52	0:0	12	sf_idx
op	69:58	0:0	12	[
water	69:59	0:0	12	win
op	69:62	0:0	12	*
water	69:63	0:0	12	16
op	69:65	0:0	12	+
water	69:66	0:0	12	swb
op	69:69	0:0	12	]
arg	70:47	70:65	11	aac_cb_out_map[cb]
water	70:47	0:0	12	aac_cb_out_map
op	70:61	0:0	12	[
water	70:62	0:0	12	cb
op	70:64	0:0	12	]
arg	71:47	71:48	11	0
water	71:47	0:0	12	0
arg	71:50	71:58	11	INFINITY
water	71:50	0:0	12	INFINITY
arg	71:60	71:64	11	NULL
water	71:60	0:0	12	NULL
arg	71:66	71:67	11	0
water	71:66	0:0	12	0
water	71:68	0:0	10	;
water	72:16	0:0	10	}
water	73:16	0:0	8	cost_stay_here
op	73:31	0:0	8	=
water	73:33	0:0	8	path
op	73:37	0:0	8	[
water	73:38	0:0	8	swb
op	73:41	0:0	8	]
op	73:42	0:0	8	[
water	73:43	0:0	8	cb
op	73:45	0:0	8	]
op	73:46	0:0	8	.
water	73:47	0:0	8	cost
op	73:52	0:0	8	+
water	73:54	0:0	8	bits
water	73:58	0:0	8	;
water	74:16	0:0	8	cost_get_here
op	74:31	0:0	8	=
water	74:33	0:0	8	minbits
op	74:52	0:0	8	+
water	74:54	0:0	8	bits
op	74:59	0:0	8	+
water	74:61	0:0	8	run_bits
op	74:70	0:0	8	+
water	74:72	0:0	8	4
water	74:73	0:0	8	;
if	75:16	77:46	8	(run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ cb ] . run ] != run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ cb ] . run + 1 ])
cond	75:23	76:84	9	run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ cb ] . run ] != run_value_bits [ sce -> ics . num_windows == 8 ] [ path [ swb ] [ cb ] . run + 1 ]
water	75:23	0:0	10	run_value_bits
op	75:37	0:0	10	[
water	75:38	0:0	10	sce
op	75:41	0:0	10	->
water	75:43	0:0	10	ics
op	75:46	0:0	10	.
water	75:47	0:0	10	num_windows
op	75:59	0:0	10	==
water	75:62	0:0	10	8
op	75:63	0:0	10	]
op	75:64	0:0	10	[
water	75:65	0:0	10	path
op	75:69	0:0	10	[
water	75:70	0:0	10	swb
op	75:73	0:0	10	]
op	75:74	0:0	10	[
water	75:75	0:0	10	cb
op	75:77	0:0	10	]
op	75:78	0:0	10	.
water	75:79	0:0	10	run
op	75:82	0:0	10	]
op	76:20	0:0	10	!=
water	76:23	0:0	10	run_value_bits
op	76:37	0:0	10	[
water	76:38	0:0	10	sce
op	76:41	0:0	10	->
water	76:43	0:0	10	ics
op	76:46	0:0	10	.
water	76:47	0:0	10	num_windows
op	76:59	0:0	10	==
water	76:62	0:0	10	8
op	76:63	0:0	10	]
op	76:64	0:0	10	[
water	76:65	0:0	10	path
op	76:69	0:0	10	[
water	76:70	0:0	10	swb
op	76:73	0:0	10	]
op	76:74	0:0	10	[
water	76:75	0:0	10	cb
op	76:77	0:0	10	]
op	76:78	0:0	10	.
water	76:79	0:0	10	run
op	76:82	0:0	10	+
water	76:83	0:0	10	1
op	76:84	0:0	10	]
stmts	77:20	77:46	9	
water	77:20	0:0	10	cost_stay_here
op	77:35	0:0	10	+=
water	77:38	0:0	10	run_bits
water	77:46	0:0	10	;
if	78:16	82:16	8	(cost_get_here < cost_stay_here)
cond	78:20	78:36	9	cost_get_here < cost_stay_here
water	78:20	0:0	10	cost_get_here
op	78:34	0:0	10	<
water	78:36	0:0	10	cost_stay_here
stmts	78:52	82:16	9	
water	78:52	0:0	10	{
water	79:20	0:0	10	path
op	79:24	0:0	10	[
water	79:25	0:0	10	swb
op	79:28	0:0	10	+
water	79:29	0:0	10	1
op	79:30	0:0	10	]
op	79:31	0:0	10	[
water	79:32	0:0	10	cb
op	79:34	0:0	10	]
op	79:35	0:0	10	.
water	79:36	0:0	10	prev_idx
op	79:45	0:0	10	=
water	79:47	0:0	10	mincb
water	79:52	0:0	10	;
water	80:20	0:0	10	path
op	80:24	0:0	10	[
water	80:25	0:0	10	swb
op	80:28	0:0	10	+
water	80:29	0:0	10	1
op	80:30	0:0	10	]
op	80:31	0:0	10	[
water	80:32	0:0	10	cb
op	80:34	0:0	10	]
op	80:35	0:0	10	.
water	80:36	0:0	10	cost
op	80:45	0:0	10	=
water	80:47	0:0	10	cost_get_here
water	80:60	0:0	10	;
water	81:20	0:0	10	path
op	81:24	0:0	10	[
water	81:25	0:0	10	swb
op	81:28	0:0	10	+
water	81:29	0:0	10	1
op	81:30	0:0	10	]
op	81:31	0:0	10	[
water	81:32	0:0	10	cb
op	81:34	0:0	10	]
op	81:35	0:0	10	.
water	81:36	0:0	10	run
op	81:45	0:0	10	=
water	81:47	0:0	10	1
water	81:48	0:0	10	;
water	82:16	0:0	10	}
else	82:18	86:16	8
stmts	82:23	86:16	9	
water	82:23	0:0	10	{
water	83:20	0:0	10	path
op	83:24	0:0	10	[
water	83:25	0:0	10	swb
op	83:28	0:0	10	+
water	83:29	0:0	10	1
op	83:30	0:0	10	]
op	83:31	0:0	10	[
water	83:32	0:0	10	cb
op	83:34	0:0	10	]
op	83:35	0:0	10	.
water	83:36	0:0	10	prev_idx
op	83:45	0:0	10	=
water	83:47	0:0	10	cb
water	83:49	0:0	10	;
water	84:20	0:0	10	path
op	84:24	0:0	10	[
water	84:25	0:0	10	swb
op	84:28	0:0	10	+
water	84:29	0:0	10	1
op	84:30	0:0	10	]
op	84:31	0:0	10	[
water	84:32	0:0	10	cb
op	84:34	0:0	10	]
op	84:35	0:0	10	.
water	84:36	0:0	10	cost
op	84:45	0:0	10	=
water	84:47	0:0	10	cost_stay_here
water	84:61	0:0	10	;
water	85:20	0:0	10	path
op	85:24	0:0	10	[
water	85:25	0:0	10	swb
op	85:28	0:0	10	+
water	85:29	0:0	10	1
op	85:30	0:0	10	]
op	85:31	0:0	10	[
water	85:32	0:0	10	cb
op	85:34	0:0	10	]
op	85:35	0:0	10	.
water	85:36	0:0	10	run
op	85:45	0:0	10	=
water	85:47	0:0	10	path
op	85:51	0:0	10	[
water	85:52	0:0	10	swb
op	85:55	0:0	10	]
op	85:56	0:0	10	[
water	85:57	0:0	10	cb
op	85:59	0:0	10	]
op	85:60	0:0	10	.
water	85:61	0:0	10	run
op	85:65	0:0	10	+
water	85:67	0:0	10	1
water	85:68	0:0	10	;
water	86:16	0:0	10	}
if	87:16	90:16	8	(path [ swb + 1 ] [ cb ] . cost < next_minbits)
cond	87:20	87:43	9	path [ swb + 1 ] [ cb ] . cost < next_minbits
water	87:20	0:0	10	path
op	87:24	0:0	10	[
water	87:25	0:0	10	swb
op	87:28	0:0	10	+
water	87:29	0:0	10	1
op	87:30	0:0	10	]
op	87:31	0:0	10	[
water	87:32	0:0	10	cb
op	87:34	0:0	10	]
op	87:35	0:0	10	.
water	87:36	0:0	10	cost
op	87:41	0:0	10	<
water	87:43	0:0	10	next_minbits
stmts	87:57	90:16	9	
water	87:57	0:0	10	{
water	88:20	0:0	10	next_minbits
op	88:33	0:0	10	=
water	88:35	0:0	10	path
op	88:39	0:0	10	[
water	88:40	0:0	10	swb
op	88:43	0:0	10	+
water	88:44	0:0	10	1
op	88:45	0:0	10	]
op	88:46	0:0	10	[
water	88:47	0:0	10	cb
op	88:49	0:0	10	]
op	88:50	0:0	10	.
water	88:51	0:0	10	cost
water	88:55	0:0	10	;
water	89:20	0:0	10	next_mincb
op	89:31	0:0	10	=
water	89:33	0:0	10	cb
water	89:35	0:0	10	;
water	90:16	0:0	10	}
water	91:12	0:0	8	}
water	92:8	0:0	6	}
water	93:8	0:0	4	start
op	93:14	0:0	4	+=
water	93:17	0:0	4	sce
op	93:20	0:0	4	->
water	93:22	0:0	4	ics
op	93:25	0:0	4	.
water	93:26	0:0	4	swb_sizes
op	93:35	0:0	4	[
water	93:36	0:0	4	swb
op	93:39	0:0	4	]
water	93:40	0:0	4	;
water	94:4	0:0	4	}
water	96:4	0:0	2	stack_len
op	96:14	0:0	2	=
water	96:16	0:0	2	0
water	96:17	0:0	2	;
water	97:4	0:0	2	idx
op	97:14	0:0	2	=
water	97:16	0:0	2	0
water	97:17	0:0	2	;
for	98:4	100:20	2	(cb = 1 ;cb < CB_TOT_ALL;cb ++)
forinit	98:9	98:15	3	cb = 1 ;
water	98:9	0:0	4	cb
op	98:12	0:0	4	=
water	98:14	0:0	4	1
water	98:15	0:0	4	;
cond	98:17	98:22	3	cb < CB_TOT_ALL
water	98:17	0:0	4	cb
op	98:20	0:0	4	<
water	98:22	0:0	4	CB_TOT_ALL
forexpr	98:34	98:36	3	cb ++
water	98:34	0:0	4	cb
op	98:36	0:0	4	++
stmts	99:8	100:20	3	
if	99:8	100:20	4	(path [ max_sfb ] [ cb ] . cost < path [ max_sfb ] [ idx ] . cost)
cond	99:12	99:56	5	path [ max_sfb ] [ cb ] . cost < path [ max_sfb ] [ idx ] . cost
water	99:12	0:0	6	path
op	99:16	0:0	6	[
water	99:17	0:0	6	max_sfb
op	99:24	0:0	6	]
op	99:25	0:0	6	[
water	99:26	0:0	6	cb
op	99:28	0:0	6	]
op	99:29	0:0	6	.
water	99:30	0:0	6	cost
op	99:35	0:0	6	<
water	99:37	0:0	6	path
op	99:41	0:0	6	[
water	99:42	0:0	6	max_sfb
op	99:49	0:0	6	]
op	99:50	0:0	6	[
water	99:51	0:0	6	idx
op	99:54	0:0	6	]
op	99:55	0:0	6	.
water	99:56	0:0	6	cost
stmts	100:12	100:20	5	
water	100:12	0:0	6	idx
op	100:16	0:0	6	=
water	100:18	0:0	6	cb
water	100:20	0:0	6	;
water	101:4	0:0	2	ppos
op	101:9	0:0	2	=
water	101:11	0:0	2	max_sfb
water	101:18	0:0	2	;
while	102:4	110:4	2	(ppos > 0)
cond	102:11	102:18	3	ppos > 0
water	102:11	0:0	4	ppos
op	102:16	0:0	4	>
water	102:18	0:0	4	0
stmts	102:21	110:4	3	
water	102:21	0:0	4	{
call	103:8	103:27	4	av_assert1
arg	103:19	103:27	5	idx>=0
water	103:19	0:0	6	idx
op	103:23	0:0	6	>=
water	103:26	0:0	6	0
water	103:28	0:0	4	;
water	104:8	0:0	4	cb
op	104:11	0:0	4	=
water	104:13	0:0	4	idx
water	104:16	0:0	4	;
water	105:8	0:0	4	stackrun
op	105:16	0:0	4	[
water	105:17	0:0	4	stack_len
op	105:26	0:0	4	]
op	105:28	0:0	4	=
water	105:30	0:0	4	path
op	105:34	0:0	4	[
water	105:35	0:0	4	ppos
op	105:39	0:0	4	]
op	105:40	0:0	4	[
water	105:41	0:0	4	cb
op	105:43	0:0	4	]
op	105:44	0:0	4	.
water	105:45	0:0	4	run
water	105:48	0:0	4	;
water	106:8	0:0	4	stackcb
op	106:16	0:0	4	[
water	106:17	0:0	4	stack_len
op	106:26	0:0	4	]
op	106:28	0:0	4	=
water	106:30	0:0	4	cb
water	106:32	0:0	4	;
water	107:8	0:0	4	idx
op	107:12	0:0	4	=
water	107:14	0:0	4	path
op	107:18	0:0	4	[
water	107:19	0:0	4	ppos
op	107:23	0:0	4	-
water	107:24	0:0	4	path
op	107:28	0:0	4	[
water	107:29	0:0	4	ppos
op	107:33	0:0	4	]
op	107:34	0:0	4	[
water	107:35	0:0	4	cb
op	107:37	0:0	4	]
op	107:38	0:0	4	.
water	107:39	0:0	4	run
op	107:42	0:0	4	+
water	107:43	0:0	4	1
op	107:44	0:0	4	]
op	107:45	0:0	4	[
water	107:46	0:0	4	cb
op	107:48	0:0	4	]
op	107:49	0:0	4	.
water	107:50	0:0	4	prev_idx
water	107:58	0:0	4	;
water	108:8	0:0	4	ppos
op	108:13	0:0	4	-=
water	108:16	0:0	4	path
op	108:20	0:0	4	[
water	108:21	0:0	4	ppos
op	108:25	0:0	4	]
op	108:26	0:0	4	[
water	108:27	0:0	4	cb
op	108:29	0:0	4	]
op	108:30	0:0	4	.
water	108:31	0:0	4	run
water	108:34	0:0	4	;
water	109:8	0:0	4	stack_len
op	109:17	0:0	4	++
water	109:19	0:0	4	;
water	110:4	0:0	4	}
water	112:4	0:0	2	start
op	112:10	0:0	2	=
water	112:12	0:0	2	0
water	112:13	0:0	2	;
for	113:4	128:4	2	(i = stack_len - 1 ;i >= 0;i --)
forinit	113:9	113:26	3	i = stack_len - 1 ;
water	113:9	0:0	4	i
op	113:11	0:0	4	=
water	113:13	0:0	4	stack_len
op	113:23	0:0	4	-
water	113:25	0:0	4	1
water	113:26	0:0	4	;
cond	113:28	113:33	3	i >= 0
water	113:28	0:0	4	i
op	113:30	0:0	4	>=
water	113:33	0:0	4	0
forexpr	113:36	113:37	3	i --
water	113:36	0:0	4	i
op	113:37	0:0	4	--
stmts	113:41	128:4	3	
water	113:41	0:0	4	{
water	114:8	0:0	4	cb
op	114:11	0:0	4	=
water	114:13	0:0	4	aac_cb_out_map
op	114:27	0:0	4	[
water	114:28	0:0	4	stackcb
op	114:35	0:0	4	[
water	114:36	0:0	4	i
op	114:37	0:0	4	]
op	114:38	0:0	4	]
water	114:39	0:0	4	;
call	115:8	115:30	4	put_bits
arg	115:17	115:23	5	&s->pb
op	115:17	0:0	6	&
water	115:18	0:0	6	s
op	115:19	0:0	6	->
water	115:21	0:0	6	pb
arg	115:25	115:26	5	4
water	115:25	0:0	6	4
arg	115:28	115:30	5	cb
water	115:28	0:0	6	cb
water	115:31	0:0	4	;
water	116:8	0:0	4	count
op	116:14	0:0	4	=
water	116:16	0:0	4	stackrun
op	116:24	0:0	4	[
water	116:25	0:0	4	i
op	116:26	0:0	4	]
water	116:27	0:0	4	;
call	117:8	117:55	4	memset
arg	117:15	117:43	5	sce->zeroes+win*16+start
water	117:15	0:0	6	sce
op	117:18	0:0	6	->
water	117:20	0:0	6	zeroes
op	117:27	0:0	6	+
water	117:29	0:0	6	win
op	117:32	0:0	6	*
water	117:33	0:0	6	16
op	117:36	0:0	6	+
water	117:38	0:0	6	start
arg	117:45	117:48	5	!cb
op	117:45	0:0	6	!
water	117:46	0:0	6	cb
arg	117:50	117:55	5	count
water	117:50	0:0	6	count
water	117:56	0:0	4	;
for	119:8	122:8	4	(j = 0 ;j < count;j ++)
forinit	119:13	119:18	5	j = 0 ;
water	119:13	0:0	6	j
op	119:15	0:0	6	=
water	119:17	0:0	6	0
water	119:18	0:0	6	;
cond	119:20	119:24	5	j < count
water	119:20	0:0	6	j
op	119:22	0:0	6	<
water	119:24	0:0	6	count
forexpr	119:31	119:32	5	j ++
water	119:31	0:0	6	j
op	119:32	0:0	6	++
stmts	119:36	122:8	5	
water	119:36	0:0	6	{
water	120:12	0:0	6	sce
op	120:15	0:0	6	->
water	120:17	0:0	6	band_type
op	120:26	0:0	6	[
water	120:27	0:0	6	win
op	120:30	0:0	6	*
water	120:31	0:0	6	16
op	120:34	0:0	6	+
water	120:36	0:0	6	start
op	120:41	0:0	6	]
op	120:43	0:0	6	=
water	120:45	0:0	6	cb
water	120:47	0:0	6	;
water	121:12	0:0	6	start
op	121:17	0:0	6	++
water	121:19	0:0	6	;
water	122:8	0:0	6	}
while	123:8	126:8	4	(count >= run_esc)
cond	123:15	123:24	5	count >= run_esc
water	123:15	0:0	6	count
op	123:21	0:0	6	>=
water	123:24	0:0	6	run_esc
stmts	123:33	126:8	5	
water	123:33	0:0	6	{
call	124:12	124:46	6	put_bits
arg	124:21	124:27	7	&s->pb
op	124:21	0:0	8	&
water	124:22	0:0	8	s
op	124:23	0:0	8	->
water	124:25	0:0	8	pb
arg	124:29	124:37	7	run_bits
water	124:29	0:0	8	run_bits
arg	124:39	124:46	7	run_esc
water	124:39	0:0	8	run_esc
water	124:47	0:0	6	;
water	125:12	0:0	6	count
op	125:18	0:0	6	-=
water	125:21	0:0	6	run_esc
water	125:28	0:0	6	;
water	126:8	0:0	6	}
call	127:8	127:40	4	put_bits
arg	127:17	127:23	5	&s->pb
op	127:17	0:0	6	&
water	127:18	0:0	6	s
op	127:19	0:0	6	->
water	127:21	0:0	6	pb
arg	127:25	127:33	5	run_bits
water	127:25	0:0	6	run_bits
arg	127:35	127:40	5	count
water	127:35	0:0	6	count
water	127:41	0:0	4	;
water	128:4	0:0	4	}
