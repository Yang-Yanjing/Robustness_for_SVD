func	1:0	50:0	0	static int	write_streamheader
params	1:29	0:0	1	
param	1:30	1:52	2	AVFormatContext *	avctx
param	1:54	1:69	2	AVIOContext *	bc
param	2:30	2:42	2	AVStream *	st
param	2:44	2:49	2	int	i
stmnts	0:0	49:12	1	
decl	4:4	4:44	2	NUTContext	*nut
op	4:26	0:0	2	=
water	4:28	0:0	2	avctx
op	4:33	0:0	2	->
water	4:35	0:0	2	priv_data
decl	5:4	5:37	2	AVCodecContext	*codec
op	5:26	0:0	2	=
water	5:28	0:0	2	st
op	5:30	0:0	2	->
water	5:32	0:0	2	codec
call	6:4	6:18	2	ff_put_v
arg	6:13	6:15	3	bc
water	6:13	0:0	4	bc
arg	6:17	6:18	3	i
water	6:17	0:0	4	i
water	6:19	0:0	2	;
switch	7:4	12:4	2	(codec -> codec_type)
cond	7:12	7:19	3	codec -> codec_type
water	7:12	0:0	4	codec
op	7:17	0:0	4	->
water	7:19	0:0	4	codec_type
stmts	7:31	12:4	3	
water	7:31	0:0	4	{
label	8:4	8:27	4	case AVMEDIA_TYPE_VIDEO :
call	8:32	8:46	4	ff_put_v
arg	8:41	8:43	5	bc
water	8:41	0:0	6	bc
arg	8:45	8:46	5	0
water	8:45	0:0	6	0
water	8:47	0:0	4	;
break	8:49	8:54	4	
label	9:4	9:27	4	case AVMEDIA_TYPE_AUDIO :
call	9:32	9:46	4	ff_put_v
arg	9:41	9:43	5	bc
water	9:41	0:0	6	bc
arg	9:45	9:46	5	1
water	9:45	0:0	6	1
water	9:47	0:0	4	;
break	9:49	9:54	4	
label	10:4	10:30	4	case AVMEDIA_TYPE_SUBTITLE :
call	10:32	10:46	4	ff_put_v
arg	10:41	10:43	5	bc
water	10:41	0:0	6	bc
arg	10:45	10:46	5	2
water	10:45	0:0	6	2
water	10:47	0:0	4	;
break	10:49	10:54	4	
label	11:4	11:11	4	default :
call	11:32	11:46	4	ff_put_v
arg	11:41	11:43	5	bc
water	11:41	0:0	6	bc
arg	11:45	11:46	5	3
water	11:45	0:0	6	3
water	11:47	0:0	4	;
break	11:49	11:54	4	
water	12:4	0:0	4	}
call	13:4	13:18	2	ff_put_v
arg	13:13	13:15	3	bc
water	13:13	0:0	4	bc
arg	13:17	13:18	3	4
water	13:17	0:0	4	4
water	13:19	0:0	2	;
if	14:4	16:4	2	(codec -> codec_tag)
cond	14:8	14:15	3	codec -> codec_tag
water	14:8	0:0	4	codec
op	14:13	0:0	4	->
water	14:15	0:0	4	codec_tag
stmts	14:26	16:4	3	
water	14:26	0:0	4	{
call	15:8	15:38	4	avio_wl32
arg	15:18	15:20	5	bc
water	15:18	0:0	6	bc
arg	15:22	15:38	5	codec->codec_tag
water	15:22	0:0	6	codec
op	15:27	0:0	6	->
water	15:29	0:0	6	codec_tag
water	15:39	0:0	4	;
water	16:4	0:0	4	}
else	16:6	19:4	2
stmts	16:11	19:4	3	
water	16:11	0:0	4	{
call	17:8	17:77	4	av_log
arg	17:15	17:20	5	avctx
water	17:15	0:0	6	avctx
arg	17:22	17:34	5	AV_LOG_ERROR
water	17:22	0:0	6	AV_LOG_ERROR
arg	17:36	17:74	5	"No codec tag defined for stream %d\n"
water	17:36	0:0	6	"No codec tag defined for stream %d\n"
arg	17:76	17:77	5	i
water	17:76	0:0	6	i
water	17:78	0:0	4	;
return	18:8	18:30	4	AVERROR(EINVAL)
call	18:15	18:29	5	AVERROR
arg	18:23	18:29	6	EINVAL
water	18:23	0:0	7	EINVAL
water	19:4	0:0	4	}
call	20:4	20:58	2	ff_put_v
arg	20:13	20:15	3	bc
water	20:13	0:0	4	bc
arg	20:17	20:58	3	nut->stream[i].time_base-nut->time_base
water	20:17	0:0	4	nut
op	20:20	0:0	4	->
water	20:22	0:0	4	stream
op	20:28	0:0	4	[
water	20:29	0:0	4	i
op	20:30	0:0	4	]
op	20:31	0:0	4	.
water	20:32	0:0	4	time_base
op	20:42	0:0	4	-
water	20:44	0:0	4	nut
op	20:47	0:0	4	->
water	20:49	0:0	4	time_base
water	20:59	0:0	2	;
call	21:4	21:45	2	ff_put_v
arg	21:13	21:15	3	bc
water	21:13	0:0	4	bc
arg	21:17	21:45	3	nut->stream[i].msb_pts_shift
water	21:17	0:0	4	nut
op	21:20	0:0	4	->
water	21:22	0:0	4	stream
op	21:28	0:0	4	[
water	21:29	0:0	4	i
op	21:30	0:0	4	]
op	21:31	0:0	4	.
water	21:32	0:0	4	msb_pts_shift
water	21:46	0:0	2	;
call	22:4	22:48	2	ff_put_v
arg	22:13	22:15	3	bc
water	22:13	0:0	4	bc
arg	22:17	22:48	3	nut->stream[i].max_pts_distance
water	22:17	0:0	4	nut
op	22:20	0:0	4	->
water	22:22	0:0	4	stream
op	22:28	0:0	4	[
water	22:29	0:0	4	i
op	22:30	0:0	4	]
op	22:31	0:0	4	.
water	22:32	0:0	4	max_pts_distance
water	22:49	0:0	2	;
call	23:4	23:36	2	ff_put_v
arg	23:13	23:15	3	bc
water	23:13	0:0	4	bc
arg	23:17	23:36	3	codec->has_b_frames
water	23:17	0:0	4	codec
op	23:22	0:0	4	->
water	23:24	0:0	4	has_b_frames
water	23:37	0:0	2	;
call	24:4	24:17	2	avio_w8
arg	24:12	24:14	3	bc
water	24:12	0:0	4	bc
arg	24:16	24:17	3	0
water	24:16	0:0	4	0
water	24:18	0:0	2	;
call	25:4	25:38	2	ff_put_v
arg	25:13	25:15	3	bc
water	25:13	0:0	4	bc
arg	25:17	25:38	3	codec->extradata_size
water	25:17	0:0	4	codec
op	25:22	0:0	4	->
water	25:24	0:0	4	extradata_size
water	25:39	0:0	2	;
call	26:4	26:58	2	avio_write
arg	26:15	26:17	3	bc
water	26:15	0:0	4	bc
arg	26:19	26:35	3	codec->extradata
water	26:19	0:0	4	codec
op	26:24	0:0	4	->
water	26:26	0:0	4	extradata
arg	26:37	26:58	3	codec->extradata_size
water	26:37	0:0	4	codec
op	26:42	0:0	4	->
water	26:44	0:0	4	extradata_size
water	26:59	0:0	2	;
switch	27:4	48:4	2	(codec -> codec_type)
cond	27:12	27:19	3	codec -> codec_type
water	27:12	0:0	4	codec
op	27:17	0:0	4	->
water	27:19	0:0	4	codec_type
stmts	27:31	48:4	3	
water	27:31	0:0	4	{
label	28:4	28:27	4	case AVMEDIA_TYPE_AUDIO :
call	29:8	29:39	4	ff_put_v
arg	29:17	29:19	5	bc
water	29:17	0:0	6	bc
arg	29:21	29:39	5	codec->sample_rate
water	29:21	0:0	6	codec
op	29:26	0:0	6	->
water	29:28	0:0	6	sample_rate
water	29:40	0:0	4	;
call	30:8	30:22	4	ff_put_v
arg	30:17	30:19	5	bc
water	30:17	0:0	6	bc
arg	30:21	30:22	5	1
water	30:21	0:0	6	1
water	30:23	0:0	4	;
call	31:8	31:36	4	ff_put_v
arg	31:17	31:19	5	bc
water	31:17	0:0	6	bc
arg	31:21	31:36	5	codec->channels
water	31:21	0:0	6	codec
op	31:26	0:0	6	->
water	31:28	0:0	6	channels
water	31:37	0:0	4	;
break	32:8	32:13	4	
label	33:4	33:27	4	case AVMEDIA_TYPE_VIDEO :
call	34:8	34:33	4	ff_put_v
arg	34:17	34:19	5	bc
water	34:17	0:0	6	bc
arg	34:21	34:33	5	codec->width
water	34:21	0:0	6	codec
op	34:26	0:0	6	->
water	34:28	0:0	6	width
water	34:34	0:0	4	;
call	35:8	35:34	4	ff_put_v
arg	35:17	35:19	5	bc
water	35:17	0:0	6	bc
arg	35:21	35:34	5	codec->height
water	35:21	0:0	6	codec
op	35:26	0:0	6	->
water	35:28	0:0	6	height
water	35:35	0:0	4	;
if	36:8	40:8	4	(st -> sample_aspect_ratio . num <= 0 || st -> sample_aspect_ratio . den <= 0)
cond	36:12	37:43	5	st -> sample_aspect_ratio . num <= 0 || st -> sample_aspect_ratio . den <= 0
water	36:12	0:0	6	st
op	36:14	0:0	6	->
water	36:16	0:0	6	sample_aspect_ratio
op	36:35	0:0	6	.
water	36:36	0:0	6	num
op	36:40	0:0	6	<=
water	36:43	0:0	6	0
op	36:45	0:0	6	||
water	37:12	0:0	6	st
op	37:14	0:0	6	->
water	37:16	0:0	6	sample_aspect_ratio
op	37:35	0:0	6	.
water	37:36	0:0	6	den
op	37:40	0:0	6	<=
water	37:43	0:0	6	0
stmts	37:46	40:8	5	
water	37:46	0:0	6	{
call	38:12	38:26	6	ff_put_v
arg	38:21	38:23	7	bc
water	38:21	0:0	8	bc
arg	38:25	38:26	7	0
water	38:25	0:0	8	0
water	38:27	0:0	6	;
call	39:12	39:26	6	ff_put_v
arg	39:21	39:23	7	bc
water	39:21	0:0	8	bc
arg	39:25	39:26	7	0
water	39:25	0:0	8	0
water	39:27	0:0	6	;
water	40:8	0:0	6	}
else	40:10	43:8	4
stmts	40:15	43:8	5	
water	40:15	0:0	6	{
call	41:12	41:52	6	ff_put_v
arg	41:21	41:23	7	bc
water	41:21	0:0	8	bc
arg	41:25	41:52	7	st->sample_aspect_ratio.num
water	41:25	0:0	8	st
op	41:27	0:0	8	->
water	41:29	0:0	8	sample_aspect_ratio
op	41:48	0:0	8	.
water	41:49	0:0	8	num
water	41:53	0:0	6	;
call	42:12	42:52	6	ff_put_v
arg	42:21	42:23	7	bc
water	42:21	0:0	8	bc
arg	42:25	42:52	7	st->sample_aspect_ratio.den
water	42:25	0:0	8	st
op	42:27	0:0	8	->
water	42:29	0:0	8	sample_aspect_ratio
op	42:48	0:0	8	.
water	42:49	0:0	8	den
water	42:53	0:0	6	;
water	43:8	0:0	6	}
call	44:8	44:22	4	ff_put_v
arg	44:17	44:19	5	bc
water	44:17	0:0	6	bc
arg	44:21	44:22	5	0
water	44:21	0:0	6	0
water	44:23	0:0	4	;
break	45:8	45:13	4	
label	46:4	46:11	4	default :
break	47:8	47:13	4	
water	48:4	0:0	4	}
return	49:4	49:12	2	0
water	49:11	0:0	3	0
