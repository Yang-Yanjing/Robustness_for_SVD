func	1:0	72:0	0	int	ff_dct_quantize_c
params	1:21	0:0	1	
param	1:22	1:39	2	MpegEncContext *	s
param	2:24	2:38	2	int16_t *	block
param	2:40	2:45	2	int	n
param	3:24	3:34	2	int	qscale
param	3:36	3:49	2	int *	overflow
stmnts	0:0	71:24	1	
decl	5:4	5:46	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:46	2	int	j
water	5:12	0:0	2	,
decl	5:4	5:46	2	int	level
water	5:19	0:0	2	,
decl	5:4	5:46	2	int	last_non_zero
water	5:34	0:0	2	,
decl	5:4	5:46	2	int	q
water	5:37	0:0	2	,
decl	5:4	5:46	2	int	start_i
decl	6:4	6:19	2	const int	*qmat
decl	7:4	7:58	2	const uint8_t	*scantable
op	7:28	0:0	2	=
water	7:30	0:0	2	s
op	7:31	0:0	2	->
water	7:33	0:0	2	intra_scantable
op	7:48	0:0	2	.
water	7:49	0:0	2	scantable
decl	8:4	8:12	2	int	bias
decl	9:4	9:13	2	int	max
op	9:11	0:0	2	=
water	9:12	0:0	2	0
decl	10:4	10:39	2	unsigned int	threshold1
water	10:27	0:0	2	,
decl	10:4	10:39	2	unsigned int	threshold2
call	11:4	11:22	2	s->fdsp.fdct
arg	11:17	11:22	3	block
water	11:17	0:0	4	block
water	11:23	0:0	2	;
if	12:4	13:32	2	(s -> dct_error_sum)
cond	12:7	12:10	3	s -> dct_error_sum
water	12:7	0:0	4	s
op	12:8	0:0	4	->
water	12:10	0:0	4	dct_error_sum
stmts	13:8	13:32	3	
call	13:8	13:31	4	s->denoise_dct
arg	13:23	13:24	5	s
water	13:23	0:0	6	s
arg	13:26	13:31	5	block
water	13:26	0:0	6	block
water	13:32	0:0	4	;
if	14:4	30:4	2	(s -> mb_intra)
cond	14:8	14:11	3	s -> mb_intra
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	mb_intra
stmts	14:21	30:4	3	
water	14:21	0:0	4	{
if	15:8	21:8	4	(! s -> h263_aic)
cond	15:12	15:16	5	! s -> h263_aic
op	15:12	0:0	6	!
water	15:13	0:0	6	s
op	15:14	0:0	6	->
water	15:16	0:0	6	h263_aic
stmts	15:26	21:8	5	
water	15:26	0:0	6	{
if	16:12	17:33	6	(n < 4)
cond	16:16	16:20	7	n < 4
water	16:16	0:0	8	n
op	16:18	0:0	8	<
water	16:20	0:0	8	4
stmts	17:16	17:33	7	
water	17:16	0:0	8	q
op	17:18	0:0	8	=
water	17:20	0:0	8	s
op	17:21	0:0	8	->
water	17:23	0:0	8	y_dc_scale
water	17:33	0:0	8	;
else	18:12	19:33	6
stmts	19:16	19:33	7	
water	19:16	0:0	8	q
op	19:18	0:0	8	=
water	19:20	0:0	8	s
op	19:21	0:0	8	->
water	19:23	0:0	8	c_dc_scale
water	19:33	0:0	8	;
water	20:12	0:0	6	q
op	20:14	0:0	6	=
water	20:16	0:0	6	q
op	20:18	0:0	6	<<
water	20:21	0:0	6	3
water	20:22	0:0	6	;
water	21:8	0:0	6	}
else	21:10	23:22	4
stmts	23:12	23:22	5	
water	23:12	0:0	6	q
op	23:14	0:0	6	=
water	23:16	0:0	6	1
op	23:18	0:0	6	<<
water	23:21	0:0	6	3
water	23:22	0:0	6	;
water	25:8	0:0	4	block
op	25:13	0:0	4	[
water	25:14	0:0	4	0
op	25:15	0:0	4	]
op	25:17	0:0	4	=
water	25:19	0:0	4	(
water	25:20	0:0	4	block
op	25:25	0:0	4	[
water	25:26	0:0	4	0
op	25:27	0:0	4	]
op	25:29	0:0	4	+
water	25:31	0:0	4	(
water	25:32	0:0	4	q
op	25:34	0:0	4	>>
water	25:37	0:0	4	1
water	25:38	0:0	4	)
water	25:39	0:0	4	)
op	25:41	0:0	4	/
water	25:43	0:0	4	q
water	25:44	0:0	4	;
water	26:8	0:0	4	start_i
op	26:16	0:0	4	=
water	26:18	0:0	4	1
water	26:19	0:0	4	;
water	27:8	0:0	4	last_non_zero
op	27:22	0:0	4	=
water	27:24	0:0	4	0
water	27:25	0:0	4	;
water	28:8	0:0	4	qmat
op	28:13	0:0	4	=
water	28:15	0:0	4	n
op	28:17	0:0	4	<
water	28:19	0:0	4	4
water	28:21	0:0	4	?
water	28:23	0:0	4	s
op	28:24	0:0	4	->
water	28:26	0:0	4	q_intra_matrix
op	28:40	0:0	4	[
water	28:41	0:0	4	qscale
op	28:47	0:0	4	]
water	28:49	0:0	4	:
water	28:51	0:0	4	s
op	28:52	0:0	4	->
water	28:54	0:0	4	q_chroma_intra_matrix
op	28:75	0:0	4	[
water	28:76	0:0	4	qscale
op	28:82	0:0	4	]
water	28:83	0:0	4	;
water	29:8	0:0	4	bias
op	29:12	0:0	4	=
water	29:14	0:0	4	s
op	29:15	0:0	4	->
water	29:17	0:0	4	intra_quant_bias
op	29:33	0:0	4	*
water	29:34	0:0	4	(
water	29:35	0:0	4	1
op	29:36	0:0	4	<<
water	29:38	0:0	4	(
water	29:39	0:0	4	QMAT_SHIFT
op	29:50	0:0	4	-
water	29:52	0:0	4	QUANT_BIAS_SHIFT
water	29:68	0:0	4	)
water	29:69	0:0	4	)
water	29:70	0:0	4	;
water	30:4	0:0	4	}
else	30:6	35:4	2
stmts	30:11	35:4	3	
water	30:11	0:0	4	{
water	31:8	0:0	4	start_i
op	31:16	0:0	4	=
water	31:18	0:0	4	0
water	31:19	0:0	4	;
water	32:8	0:0	4	last_non_zero
op	32:22	0:0	4	=
op	32:24	0:0	4	-
water	32:25	0:0	4	1
water	32:26	0:0	4	;
water	33:8	0:0	4	qmat
op	33:13	0:0	4	=
water	33:15	0:0	4	s
op	33:16	0:0	4	->
water	33:18	0:0	4	q_inter_matrix
op	33:32	0:0	4	[
water	33:33	0:0	4	qscale
op	33:39	0:0	4	]
water	33:40	0:0	4	;
water	34:8	0:0	4	bias
op	34:12	0:0	4	=
water	34:14	0:0	4	s
op	34:15	0:0	4	->
water	34:17	0:0	4	inter_quant_bias
op	34:33	0:0	4	*
water	34:34	0:0	4	(
water	34:35	0:0	4	1
op	34:36	0:0	4	<<
water	34:38	0:0	4	(
water	34:39	0:0	4	QMAT_SHIFT
op	34:50	0:0	4	-
water	34:52	0:0	4	QUANT_BIAS_SHIFT
water	34:68	0:0	4	)
water	34:69	0:0	4	)
water	34:70	0:0	4	;
water	35:4	0:0	4	}
water	36:4	0:0	2	threshold1
op	36:14	0:0	2	=
water	36:16	0:0	2	(
water	36:17	0:0	2	1
op	36:18	0:0	2	<<
water	36:20	0:0	2	QMAT_SHIFT
water	36:30	0:0	2	)
op	36:32	0:0	2	-
water	36:34	0:0	2	bias
op	36:39	0:0	2	-
water	36:41	0:0	2	1
water	36:42	0:0	2	;
water	37:4	0:0	2	threshold2
op	37:14	0:0	2	=
water	37:16	0:0	2	(
water	37:17	0:0	2	threshold1
op	37:27	0:0	2	<<
water	37:29	0:0	2	1
water	37:30	0:0	2	)
water	37:31	0:0	2	;
for	38:4	47:4	2	(i = 63 ;i >= start_i;i --)
forinit	38:8	38:12	3	i = 63 ;
water	38:8	0:0	4	i
op	38:9	0:0	4	=
water	38:10	0:0	4	63
water	38:12	0:0	4	;
cond	38:13	38:16	3	i >= start_i
water	38:13	0:0	4	i
op	38:14	0:0	4	>=
water	38:16	0:0	4	start_i
forexpr	38:24	38:25	3	i --
water	38:24	0:0	4	i
op	38:25	0:0	4	--
stmts	38:29	47:4	3	
water	38:29	0:0	4	{
water	39:8	0:0	4	j
op	39:10	0:0	4	=
water	39:12	0:0	4	scantable
op	39:21	0:0	4	[
water	39:22	0:0	4	i
op	39:23	0:0	4	]
water	39:24	0:0	4	;
water	40:8	0:0	4	level
op	40:14	0:0	4	=
water	40:16	0:0	4	block
op	40:21	0:0	4	[
water	40:22	0:0	4	j
op	40:23	0:0	4	]
op	40:25	0:0	4	*
water	40:27	0:0	4	qmat
op	40:31	0:0	4	[
water	40:32	0:0	4	j
op	40:33	0:0	4	]
water	40:34	0:0	4	;
if	41:8	44:8	4	((( unsigned ) (level + threshold1 ) ) > threshold2)
cond	41:11	41:42	5	(( unsigned ) (level + threshold1 ) ) > threshold2
water	41:11	0:0	6	(
call	41:12	41:39	6	(unsigned)
arg	41:23	41:39	7	level+threshold1
water	41:23	0:0	8	level
op	41:28	0:0	8	+
water	41:29	0:0	8	threshold1
water	41:40	0:0	6	)
op	41:41	0:0	6	>
water	41:42	0:0	6	threshold2
stmts	41:53	44:8	5	
water	41:53	0:0	6	{
water	42:12	0:0	6	last_non_zero
op	42:26	0:0	6	=
water	42:28	0:0	6	i
water	42:29	0:0	6	;
break	43:12	43:17	6	
water	44:8	0:0	6	}
else	44:9	46:8	4
stmts	44:13	46:8	5	
water	44:13	0:0	6	{
water	45:12	0:0	6	block
op	45:17	0:0	6	[
water	45:18	0:0	6	j
op	45:19	0:0	6	]
op	45:20	0:0	6	=
water	45:21	0:0	6	0
water	45:22	0:0	6	;
water	46:8	0:0	6	}
water	47:4	0:0	4	}
for	48:4	65:4	2	(i = start_i ;i <= last_non_zero;i ++)
forinit	48:8	48:17	3	i = start_i ;
water	48:8	0:0	4	i
op	48:9	0:0	4	=
water	48:10	0:0	4	start_i
water	48:17	0:0	4	;
cond	48:19	48:22	3	i <= last_non_zero
water	48:19	0:0	4	i
op	48:20	0:0	4	<=
water	48:22	0:0	4	last_non_zero
forexpr	48:37	48:38	3	i ++
water	48:37	0:0	4	i
op	48:38	0:0	4	++
stmts	48:42	65:4	3	
water	48:42	0:0	4	{
water	49:8	0:0	4	j
op	49:10	0:0	4	=
water	49:12	0:0	4	scantable
op	49:21	0:0	4	[
water	49:22	0:0	4	i
op	49:23	0:0	4	]
water	49:24	0:0	4	;
water	50:8	0:0	4	level
op	50:14	0:0	4	=
water	50:16	0:0	4	block
op	50:21	0:0	4	[
water	50:22	0:0	4	j
op	50:23	0:0	4	]
op	50:25	0:0	4	*
water	50:27	0:0	4	qmat
op	50:31	0:0	4	[
water	50:32	0:0	4	j
op	50:33	0:0	4	]
water	50:34	0:0	4	;
if	53:8	62:8	4	((( unsigned ) (level + threshold1 ) ) > threshold2)
cond	53:11	53:42	5	(( unsigned ) (level + threshold1 ) ) > threshold2
water	53:11	0:0	6	(
call	53:12	53:39	6	(unsigned)
arg	53:23	53:39	7	level+threshold1
water	53:23	0:0	8	level
op	53:28	0:0	8	+
water	53:29	0:0	8	threshold1
water	53:40	0:0	6	)
op	53:41	0:0	6	>
water	53:42	0:0	6	threshold2
stmts	53:53	62:8	5	
water	53:53	0:0	6	{
if	54:12	57:12	6	(level > 0)
cond	54:15	54:21	7	level > 0
water	54:15	0:0	8	level
op	54:20	0:0	8	>
water	54:21	0:0	8	0
stmts	54:23	57:12	7	
water	54:23	0:0	8	{
water	55:16	0:0	8	level
op	55:21	0:0	8	=
water	55:23	0:0	8	(
water	55:24	0:0	8	bias
op	55:29	0:0	8	+
water	55:31	0:0	8	level
water	55:36	0:0	8	)
op	55:37	0:0	8	>>
water	55:39	0:0	8	QMAT_SHIFT
water	55:49	0:0	8	;
water	56:16	0:0	8	block
op	56:21	0:0	8	[
water	56:22	0:0	8	j
op	56:23	0:0	8	]
op	56:24	0:0	8	=
water	56:26	0:0	8	level
water	56:31	0:0	8	;
water	57:12	0:0	8	}
else	57:13	60:12	6
stmts	57:17	60:12	7	
water	57:17	0:0	8	{
water	58:16	0:0	8	level
op	58:21	0:0	8	=
water	58:23	0:0	8	(
water	58:24	0:0	8	bias
op	58:29	0:0	8	-
water	58:31	0:0	8	level
water	58:36	0:0	8	)
op	58:37	0:0	8	>>
water	58:39	0:0	8	QMAT_SHIFT
water	58:49	0:0	8	;
water	59:16	0:0	8	block
op	59:21	0:0	8	[
water	59:22	0:0	8	j
op	59:23	0:0	8	]
op	59:24	0:0	8	=
op	59:26	0:0	8	-
water	59:27	0:0	8	level
water	59:32	0:0	8	;
water	60:12	0:0	8	}
water	61:12	0:0	6	max
op	61:16	0:0	6	|=
water	61:18	0:0	6	level
water	61:23	0:0	6	;
water	62:8	0:0	6	}
else	62:9	64:8	4
stmts	62:13	64:8	5	
water	62:13	0:0	6	{
water	63:12	0:0	6	block
op	63:17	0:0	6	[
water	63:18	0:0	6	j
op	63:19	0:0	6	]
op	63:20	0:0	6	=
water	63:21	0:0	6	0
water	63:22	0:0	6	;
water	64:8	0:0	6	}
water	65:4	0:0	4	}
op	66:4	0:0	2	*
water	66:5	0:0	2	overflow
op	66:13	0:0	2	=
water	66:15	0:0	2	s
op	66:16	0:0	2	->
water	66:18	0:0	2	max_qcoeff
op	66:29	0:0	2	<
water	66:31	0:0	2	max
water	66:34	0:0	2	;
if	68:4	70:47	2	(s -> idsp . perm_type != FF_IDCT_PERM_NONE)
cond	68:8	68:29	3	s -> idsp . perm_type != FF_IDCT_PERM_NONE
water	68:8	0:0	4	s
op	68:9	0:0	4	->
water	68:11	0:0	4	idsp
op	68:15	0:0	4	.
water	68:16	0:0	4	perm_type
op	68:26	0:0	4	!=
water	68:29	0:0	4	FF_IDCT_PERM_NONE
stmts	69:8	70:47	3	
call	69:8	70:46	4	block_permute
arg	69:22	69:27	5	block
water	69:22	0:0	6	block
arg	69:29	69:53	5	s->idsp.idct_permutation
water	69:29	0:0	6	s
op	69:30	0:0	6	->
water	69:32	0:0	6	idsp
op	69:36	0:0	6	.
water	69:37	0:0	6	idct_permutation
arg	70:22	70:31	5	scantable
water	70:22	0:0	6	scantable
arg	70:33	70:46	5	last_non_zero
water	70:33	0:0	6	last_non_zero
water	70:47	0:0	4	;
return	71:4	71:24	2	last_non_zero
water	71:11	0:0	3	last_non_zero
decl	75:7	81:1	0	const AVOption	h263_options[]
op	75:37	0:0	0	=
water	75:39	0:0	0	{
water	76:4	0:0	0	{
water	76:6	0:0	0	"obmc"
water	76:12	0:0	0	,
water	76:22	0:0	0	"use overlapped block motion compensation."
water	76:65	0:0	0	,
call	76:67	76:78	1	OFFSET
arg	76:74	76:78	2	obmc
water	76:74	0:0	3	obmc
water	76:79	0:0	0	,
water	76:81	0:0	0	AV_OPT_TYPE_INT
water	76:96	0:0	0	,
water	76:98	0:0	0	{
op	76:100	0:0	0	.
water	76:101	0:0	0	i64
op	76:105	0:0	0	=
water	76:107	0:0	0	0
water	76:109	0:0	0	}
water	76:110	0:0	0	,
water	76:112	0:0	0	0
water	76:113	0:0	0	,
water	76:115	0:0	0	1
water	76:116	0:0	0	,
water	76:118	0:0	0	VE
water	76:121	0:0	0	}
water	76:122	0:0	0	,
water	77:4	0:0	0	{
water	77:6	0:0	0	"structured_slices"
water	77:25	0:0	0	,
water	77:26	0:0	0	"Write slice start position at every GOB header instead of just GOB number."
water	77:102	0:0	0	,
call	77:104	77:132	1	OFFSET
arg	77:111	77:132	2	h263_slice_structured
water	77:111	0:0	3	h263_slice_structured
water	77:133	0:0	0	,
water	77:135	0:0	0	AV_OPT_TYPE_INT
water	77:150	0:0	0	,
water	77:152	0:0	0	{
op	77:154	0:0	0	.
water	77:155	0:0	0	i64
op	77:159	0:0	0	=
water	77:161	0:0	0	0
water	77:163	0:0	0	}
water	77:164	0:0	0	,
water	77:166	0:0	0	0
water	77:167	0:0	0	,
water	77:169	0:0	0	1
water	77:170	0:0	0	,
water	77:172	0:0	0	VE
water	77:174	0:0	0	}
water	77:175	0:0	0	,
water	78:4	0:0	0	{
water	78:6	0:0	0	"mb_info"
water	78:15	0:0	0	,
water	78:22	0:0	0	"emit macroblock info for RFC 2190 packetization, the parameter value is the maximum payload size"
water	78:120	0:0	0	,
call	78:122	78:136	1	OFFSET
arg	78:129	78:136	2	mb_info
water	78:129	0:0	3	mb_info
water	78:137	0:0	0	,
water	78:139	0:0	0	AV_OPT_TYPE_INT
water	78:154	0:0	0	,
water	78:156	0:0	0	{
op	78:158	0:0	0	.
water	78:159	0:0	0	i64
op	78:163	0:0	0	=
water	78:165	0:0	0	0
water	78:167	0:0	0	}
water	78:168	0:0	0	,
water	78:170	0:0	0	0
water	78:171	0:0	0	,
water	78:173	0:0	0	INT_MAX
water	78:180	0:0	0	,
water	78:182	0:0	0	VE
water	78:185	0:0	0	}
water	78:186	0:0	0	,
water	79:4	0:0	0	FF_MPV_COMMON_OPTS
water	80:4	0:0	0	{
water	80:6	0:0	0	NULL
water	80:11	0:0	0	}
water	80:12	0:0	0	,
water	81:0	0:0	0	}
decl	82:7	87:1	0	const AVClass	h263_class
op	82:32	0:0	0	=
water	82:34	0:0	0	{
op	83:4	0:0	0	.
water	83:5	0:0	0	class_name
op	83:16	0:0	0	=
water	83:18	0:0	0	"H.263 encoder"
water	83:33	0:0	0	,
op	84:4	0:0	0	.
water	84:5	0:0	0	item_name
op	84:16	0:0	0	=
water	84:18	0:0	0	av_default_item_name
water	84:38	0:0	0	,
op	85:4	0:0	0	.
water	85:5	0:0	0	option
op	85:16	0:0	0	=
water	85:18	0:0	0	h263_options
water	85:30	0:0	0	,
op	86:4	0:0	0	.
water	86:5	0:0	0	version
op	86:16	0:0	0	=
water	86:18	0:0	0	LIBAVUTIL_VERSION_INT
water	86:39	0:0	0	,
water	87:0	0:0	0	}
decl	88:0	99:1	0	AVCodec	ff_h263_encoder
op	88:24	0:0	0	=
water	88:26	0:0	0	{
op	89:4	0:0	0	.
water	89:5	0:0	0	name
op	89:20	0:0	0	=
water	89:22	0:0	0	"h263"
water	89:28	0:0	0	,
op	90:4	0:0	0	.
water	90:5	0:0	0	long_name
op	90:20	0:0	0	=
call	90:22	90:63	1	NULL_IF_CONFIG_SMALL
arg	90:43	90:63	2	"H.263 / H.263-1996"
water	90:43	0:0	3	"H.263 / H.263-1996"
water	90:64	0:0	0	,
op	91:4	0:0	0	.
water	91:5	0:0	0	type
op	91:20	0:0	0	=
water	91:22	0:0	0	AVMEDIA_TYPE_VIDEO
water	91:40	0:0	0	,
op	92:4	0:0	0	.
water	92:5	0:0	0	id
op	92:20	0:0	0	=
water	92:22	0:0	0	AV_CODEC_ID_H263
water	92:38	0:0	0	,
op	93:4	0:0	0	.
water	93:5	0:0	0	priv_data_size
op	93:20	0:0	0	=
op	93:22	0:0	0	sizeof
water	93:28	0:0	0	(
water	93:29	0:0	0	MpegEncContext
water	93:43	0:0	0	)
water	93:44	0:0	0	,
op	94:4	0:0	0	.
water	94:5	0:0	0	init
op	94:20	0:0	0	=
water	94:22	0:0	0	ff_mpv_encode_init
water	94:40	0:0	0	,
op	95:4	0:0	0	.
water	95:5	0:0	0	encode2
op	95:20	0:0	0	=
water	95:22	0:0	0	ff_mpv_encode_picture
water	95:43	0:0	0	,
op	96:4	0:0	0	.
water	96:5	0:0	0	close
op	96:20	0:0	0	=
water	96:22	0:0	0	ff_mpv_encode_end
water	96:39	0:0	0	,
op	97:4	0:0	0	.
water	97:5	0:0	0	pix_fmts
op	97:13	0:0	0	=
water	97:15	0:0	0	(
water	97:16	0:0	0	const
water	97:22	0:0	0	enum
water	97:27	0:0	0	AVPixelFormat
op	97:40	0:0	0	[
op	97:41	0:0	0	]
water	97:42	0:0	0	)
water	97:43	0:0	0	{
water	97:44	0:0	0	AV_PIX_FMT_YUV420P
water	97:62	0:0	0	,
water	97:64	0:0	0	AV_PIX_FMT_NONE
water	97:79	0:0	0	}
water	97:80	0:0	0	,
op	98:4	0:0	0	.
water	98:5	0:0	0	priv_class
op	98:20	0:0	0	=
op	98:22	0:0	0	&
water	98:23	0:0	0	h263_class
water	98:33	0:0	0	,
water	99:0	0:0	0	}
decl	100:7	107:1	0	const AVOption	h263p_options[]
op	100:38	0:0	0	=
water	100:40	0:0	0	{
water	101:4	0:0	0	{
water	101:6	0:0	0	"umv"
water	101:11	0:0	0	,
water	101:20	0:0	0	"Use unlimited motion vectors."
water	101:51	0:0	0	,
call	101:56	101:70	1	OFFSET
arg	101:63	101:70	2	umvplus
water	101:63	0:0	3	umvplus
water	101:71	0:0	0	,
water	101:73	0:0	0	AV_OPT_TYPE_INT
water	101:88	0:0	0	,
water	101:90	0:0	0	{
op	101:92	0:0	0	.
water	101:93	0:0	0	i64
op	101:97	0:0	0	=
water	101:99	0:0	0	0
water	101:101	0:0	0	}
water	101:102	0:0	0	,
water	101:104	0:0	0	0
water	101:105	0:0	0	,
water	101:107	0:0	0	1
water	101:108	0:0	0	,
water	101:110	0:0	0	VE
water	101:113	0:0	0	}
water	101:114	0:0	0	,
water	102:4	0:0	0	{
water	102:6	0:0	0	"aiv"
water	102:11	0:0	0	,
water	102:20	0:0	0	"Use alternative inter VLC."
water	102:48	0:0	0	,
call	102:56	102:76	1	OFFSET
arg	102:63	102:76	2	alt_inter_vlc
water	102:63	0:0	3	alt_inter_vlc
water	102:77	0:0	0	,
water	102:79	0:0	0	AV_OPT_TYPE_INT
water	102:94	0:0	0	,
water	102:96	0:0	0	{
op	102:98	0:0	0	.
water	102:99	0:0	0	i64
op	102:103	0:0	0	=
water	102:105	0:0	0	0
water	102:107	0:0	0	}
water	102:108	0:0	0	,
water	102:110	0:0	0	0
water	102:111	0:0	0	,
water	102:113	0:0	0	1
water	102:114	0:0	0	,
water	102:116	0:0	0	VE
water	102:119	0:0	0	}
water	102:120	0:0	0	,
water	103:4	0:0	0	{
water	103:6	0:0	0	"obmc"
water	103:12	0:0	0	,
water	103:20	0:0	0	"use overlapped block motion compensation."
water	103:63	0:0	0	,
call	103:65	103:76	1	OFFSET
arg	103:72	103:76	2	obmc
water	103:72	0:0	3	obmc
water	103:77	0:0	0	,
water	103:79	0:0	0	AV_OPT_TYPE_INT
water	103:94	0:0	0	,
water	103:96	0:0	0	{
op	103:98	0:0	0	.
water	103:99	0:0	0	i64
op	103:103	0:0	0	=
water	103:105	0:0	0	0
water	103:107	0:0	0	}
water	103:108	0:0	0	,
water	103:110	0:0	0	0
water	103:111	0:0	0	,
water	103:113	0:0	0	1
water	103:114	0:0	0	,
water	103:116	0:0	0	VE
water	103:119	0:0	0	}
water	103:120	0:0	0	,
water	104:4	0:0	0	{
water	104:6	0:0	0	"structured_slices"
water	104:25	0:0	0	,
water	104:27	0:0	0	"Write slice start position at every GOB header instead of just GOB number."
water	104:103	0:0	0	,
call	104:105	104:133	1	OFFSET
arg	104:112	104:133	2	h263_slice_structured
water	104:112	0:0	3	h263_slice_structured
water	104:134	0:0	0	,
water	104:136	0:0	0	AV_OPT_TYPE_INT
water	104:151	0:0	0	,
water	104:153	0:0	0	{
op	104:155	0:0	0	.
water	104:156	0:0	0	i64
op	104:160	0:0	0	=
water	104:162	0:0	0	0
water	104:164	0:0	0	}
water	104:165	0:0	0	,
water	104:167	0:0	0	0
water	104:168	0:0	0	,
water	104:170	0:0	0	1
water	104:171	0:0	0	,
water	104:173	0:0	0	VE
water	104:175	0:0	0	}
water	104:176	0:0	0	,
water	105:4	0:0	0	FF_MPV_COMMON_OPTS
water	106:4	0:0	0	{
water	106:6	0:0	0	NULL
water	106:11	0:0	0	}
water	106:12	0:0	0	,
water	107:0	0:0	0	}
decl	108:7	113:1	0	const AVClass	h263p_class
op	108:33	0:0	0	=
water	108:35	0:0	0	{
op	109:4	0:0	0	.
water	109:5	0:0	0	class_name
op	109:16	0:0	0	=
water	109:18	0:0	0	"H.263p encoder"
water	109:34	0:0	0	,
op	110:4	0:0	0	.
water	110:5	0:0	0	item_name
op	110:16	0:0	0	=
water	110:18	0:0	0	av_default_item_name
water	110:38	0:0	0	,
op	111:4	0:0	0	.
water	111:5	0:0	0	option
op	111:16	0:0	0	=
water	111:18	0:0	0	h263p_options
water	111:31	0:0	0	,
op	112:4	0:0	0	.
water	112:5	0:0	0	version
op	112:16	0:0	0	=
water	112:18	0:0	0	LIBAVUTIL_VERSION_INT
water	112:39	0:0	0	,
water	113:0	0:0	0	}
decl	114:0	126:1	0	AVCodec	ff_h263p_encoder
op	114:25	0:0	0	=
water	114:27	0:0	0	{
op	115:4	0:0	0	.
water	115:5	0:0	0	name
op	115:20	0:0	0	=
water	115:22	0:0	0	"h263p"
water	115:29	0:0	0	,
op	116:4	0:0	0	.
water	116:5	0:0	0	long_name
op	116:20	0:0	0	=
call	116:22	116:82	1	NULL_IF_CONFIG_SMALL
arg	116:43	116:82	2	"H.263+ / H.263-1998 / H.263 version 2"
water	116:43	0:0	3	"H.263+ / H.263-1998 / H.263 version 2"
water	116:83	0:0	0	,
op	117:4	0:0	0	.
water	117:5	0:0	0	type
op	117:20	0:0	0	=
water	117:22	0:0	0	AVMEDIA_TYPE_VIDEO
water	117:40	0:0	0	,
op	118:4	0:0	0	.
water	118:5	0:0	0	id
op	118:20	0:0	0	=
water	118:22	0:0	0	AV_CODEC_ID_H263P
water	118:39	0:0	0	,
op	119:4	0:0	0	.
water	119:5	0:0	0	priv_data_size
op	119:20	0:0	0	=
op	119:22	0:0	0	sizeof
water	119:28	0:0	0	(
water	119:29	0:0	0	MpegEncContext
water	119:43	0:0	0	)
water	119:44	0:0	0	,
op	120:4	0:0	0	.
water	120:5	0:0	0	init
op	120:20	0:0	0	=
water	120:22	0:0	0	ff_mpv_encode_init
water	120:40	0:0	0	,
op	121:4	0:0	0	.
water	121:5	0:0	0	encode2
op	121:20	0:0	0	=
water	121:22	0:0	0	ff_mpv_encode_picture
water	121:43	0:0	0	,
op	122:4	0:0	0	.
water	122:5	0:0	0	close
op	122:20	0:0	0	=
water	122:22	0:0	0	ff_mpv_encode_end
water	122:39	0:0	0	,
op	123:4	0:0	0	.
water	123:5	0:0	0	capabilities
op	123:20	0:0	0	=
water	123:22	0:0	0	AV_CODEC_CAP_SLICE_THREADS
water	123:48	0:0	0	,
op	124:4	0:0	0	.
water	124:5	0:0	0	pix_fmts
op	124:20	0:0	0	=
water	124:22	0:0	0	(
water	124:23	0:0	0	const
water	124:29	0:0	0	enum
water	124:34	0:0	0	AVPixelFormat
op	124:47	0:0	0	[
op	124:48	0:0	0	]
water	124:49	0:0	0	)
water	124:50	0:0	0	{
water	124:52	0:0	0	AV_PIX_FMT_YUV420P
water	124:70	0:0	0	,
water	124:72	0:0	0	AV_PIX_FMT_NONE
water	124:88	0:0	0	}
water	124:89	0:0	0	,
op	125:4	0:0	0	.
water	125:5	0:0	0	priv_class
op	125:20	0:0	0	=
op	125:22	0:0	0	&
water	125:23	0:0	0	h263p_class
water	125:34	0:0	0	,
water	126:0	0:0	0	}
decl	127:7	132:1	0	const AVClass	msmpeg4v2_class
op	127:37	0:0	0	=
water	127:39	0:0	0	{
op	128:4	0:0	0	.
water	128:5	0:0	0	class_name
op	128:16	0:0	0	=
water	128:18	0:0	0	"msmpeg4v2 encoder"
water	128:37	0:0	0	,
op	129:4	0:0	0	.
water	129:5	0:0	0	item_name
op	129:16	0:0	0	=
water	129:18	0:0	0	av_default_item_name
water	129:38	0:0	0	,
op	130:4	0:0	0	.
water	130:5	0:0	0	option
op	130:16	0:0	0	=
water	130:18	0:0	0	ff_mpv_generic_options
water	130:40	0:0	0	,
op	131:4	0:0	0	.
water	131:5	0:0	0	version
op	131:16	0:0	0	=
water	131:18	0:0	0	LIBAVUTIL_VERSION_INT
water	131:39	0:0	0	,
water	132:0	0:0	0	}
decl	133:0	144:1	0	AVCodec	ff_msmpeg4v2_encoder
op	133:29	0:0	0	=
water	133:31	0:0	0	{
op	134:4	0:0	0	.
water	134:5	0:0	0	name
op	134:20	0:0	0	=
water	134:22	0:0	0	"msmpeg4v2"
water	134:33	0:0	0	,
op	135:4	0:0	0	.
water	135:5	0:0	0	long_name
op	135:20	0:0	0	=
call	135:22	135:86	1	NULL_IF_CONFIG_SMALL
arg	135:43	135:86	2	"MPEG-4 part 2 Microsoft variant version 2"
water	135:43	0:0	3	"MPEG-4 part 2 Microsoft variant version 2"
water	135:87	0:0	0	,
op	136:4	0:0	0	.
water	136:5	0:0	0	type
op	136:20	0:0	0	=
water	136:22	0:0	0	AVMEDIA_TYPE_VIDEO
water	136:40	0:0	0	,
op	137:4	0:0	0	.
water	137:5	0:0	0	id
op	137:20	0:0	0	=
water	137:22	0:0	0	AV_CODEC_ID_MSMPEG4V2
water	137:43	0:0	0	,
op	138:4	0:0	0	.
water	138:5	0:0	0	priv_data_size
op	138:20	0:0	0	=
op	138:22	0:0	0	sizeof
water	138:28	0:0	0	(
water	138:29	0:0	0	MpegEncContext
water	138:43	0:0	0	)
water	138:44	0:0	0	,
op	139:4	0:0	0	.
water	139:5	0:0	0	init
op	139:20	0:0	0	=
water	139:22	0:0	0	ff_mpv_encode_init
water	139:40	0:0	0	,
op	140:4	0:0	0	.
water	140:5	0:0	0	encode2
op	140:20	0:0	0	=
water	140:22	0:0	0	ff_mpv_encode_picture
water	140:43	0:0	0	,
op	141:4	0:0	0	.
water	141:5	0:0	0	close
op	141:20	0:0	0	=
water	141:22	0:0	0	ff_mpv_encode_end
water	141:39	0:0	0	,
op	142:4	0:0	0	.
water	142:5	0:0	0	pix_fmts
op	142:20	0:0	0	=
water	142:22	0:0	0	(
water	142:23	0:0	0	const
water	142:29	0:0	0	enum
water	142:34	0:0	0	AVPixelFormat
op	142:47	0:0	0	[
op	142:48	0:0	0	]
water	142:49	0:0	0	)
water	142:50	0:0	0	{
water	142:52	0:0	0	AV_PIX_FMT_YUV420P
water	142:70	0:0	0	,
water	142:72	0:0	0	AV_PIX_FMT_NONE
water	142:88	0:0	0	}
water	142:89	0:0	0	,
op	143:4	0:0	0	.
water	143:5	0:0	0	priv_class
op	143:20	0:0	0	=
op	143:22	0:0	0	&
water	143:23	0:0	0	msmpeg4v2_class
water	143:38	0:0	0	,
water	144:0	0:0	0	}
decl	145:7	150:1	0	const AVClass	msmpeg4v3_class
op	145:37	0:0	0	=
water	145:39	0:0	0	{
op	146:4	0:0	0	.
water	146:5	0:0	0	class_name
op	146:16	0:0	0	=
water	146:18	0:0	0	"msmpeg4v3 encoder"
water	146:37	0:0	0	,
op	147:4	0:0	0	.
water	147:5	0:0	0	item_name
op	147:16	0:0	0	=
water	147:18	0:0	0	av_default_item_name
water	147:38	0:0	0	,
op	148:4	0:0	0	.
water	148:5	0:0	0	option
op	148:16	0:0	0	=
water	148:18	0:0	0	ff_mpv_generic_options
water	148:40	0:0	0	,
op	149:4	0:0	0	.
water	149:5	0:0	0	version
op	149:16	0:0	0	=
water	149:18	0:0	0	LIBAVUTIL_VERSION_INT
water	149:39	0:0	0	,
water	150:0	0:0	0	}
decl	151:0	162:1	0	AVCodec	ff_msmpeg4v3_encoder
op	151:29	0:0	0	=
water	151:31	0:0	0	{
op	152:4	0:0	0	.
water	152:5	0:0	0	name
op	152:20	0:0	0	=
water	152:22	0:0	0	"msmpeg4"
water	152:31	0:0	0	,
op	153:4	0:0	0	.
water	153:5	0:0	0	long_name
op	153:20	0:0	0	=
call	153:22	153:86	1	NULL_IF_CONFIG_SMALL
arg	153:43	153:86	2	"MPEG-4 part 2 Microsoft variant version 3"
water	153:43	0:0	3	"MPEG-4 part 2 Microsoft variant version 3"
water	153:87	0:0	0	,
op	154:4	0:0	0	.
water	154:5	0:0	0	type
op	154:20	0:0	0	=
water	154:22	0:0	0	AVMEDIA_TYPE_VIDEO
water	154:40	0:0	0	,
op	155:4	0:0	0	.
water	155:5	0:0	0	id
op	155:20	0:0	0	=
water	155:22	0:0	0	AV_CODEC_ID_MSMPEG4V3
water	155:43	0:0	0	,
op	156:4	0:0	0	.
water	156:5	0:0	0	priv_data_size
op	156:20	0:0	0	=
op	156:22	0:0	0	sizeof
water	156:28	0:0	0	(
water	156:29	0:0	0	MpegEncContext
water	156:43	0:0	0	)
water	156:44	0:0	0	,
op	157:4	0:0	0	.
water	157:5	0:0	0	init
op	157:20	0:0	0	=
water	157:22	0:0	0	ff_mpv_encode_init
water	157:40	0:0	0	,
op	158:4	0:0	0	.
water	158:5	0:0	0	encode2
op	158:20	0:0	0	=
water	158:22	0:0	0	ff_mpv_encode_picture
water	158:43	0:0	0	,
op	159:4	0:0	0	.
water	159:5	0:0	0	close
op	159:20	0:0	0	=
water	159:22	0:0	0	ff_mpv_encode_end
water	159:39	0:0	0	,
op	160:4	0:0	0	.
water	160:5	0:0	0	pix_fmts
op	160:20	0:0	0	=
water	160:22	0:0	0	(
water	160:23	0:0	0	const
water	160:29	0:0	0	enum
water	160:34	0:0	0	AVPixelFormat
op	160:47	0:0	0	[
op	160:48	0:0	0	]
water	160:49	0:0	0	)
water	160:50	0:0	0	{
water	160:52	0:0	0	AV_PIX_FMT_YUV420P
water	160:70	0:0	0	,
water	160:72	0:0	0	AV_PIX_FMT_NONE
water	160:88	0:0	0	}
water	160:89	0:0	0	,
op	161:4	0:0	0	.
water	161:5	0:0	0	priv_class
op	161:20	0:0	0	=
op	161:22	0:0	0	&
water	161:23	0:0	0	msmpeg4v3_class
water	161:38	0:0	0	,
water	162:0	0:0	0	}
decl	163:7	168:1	0	const AVClass	wmv1_class
op	163:32	0:0	0	=
water	163:34	0:0	0	{
op	164:4	0:0	0	.
water	164:5	0:0	0	class_name
op	164:16	0:0	0	=
water	164:18	0:0	0	"wmv1 encoder"
water	164:32	0:0	0	,
op	165:4	0:0	0	.
water	165:5	0:0	0	item_name
op	165:16	0:0	0	=
water	165:18	0:0	0	av_default_item_name
water	165:38	0:0	0	,
op	166:4	0:0	0	.
water	166:5	0:0	0	option
op	166:16	0:0	0	=
water	166:18	0:0	0	ff_mpv_generic_options
water	166:40	0:0	0	,
op	167:4	0:0	0	.
water	167:5	0:0	0	version
op	167:16	0:0	0	=
water	167:18	0:0	0	LIBAVUTIL_VERSION_INT
water	167:39	0:0	0	,
water	168:0	0:0	0	}
decl	169:0	180:1	0	AVCodec	ff_wmv1_encoder
op	169:24	0:0	0	=
water	169:26	0:0	0	{
op	170:4	0:0	0	.
water	170:5	0:0	0	name
op	170:20	0:0	0	=
water	170:22	0:0	0	"wmv1"
water	170:28	0:0	0	,
op	171:4	0:0	0	.
water	171:5	0:0	0	long_name
op	171:20	0:0	0	=
call	171:22	171:66	1	NULL_IF_CONFIG_SMALL
arg	171:43	171:66	2	"Windows Media Video 7"
water	171:43	0:0	3	"Windows Media Video 7"
water	171:67	0:0	0	,
op	172:4	0:0	0	.
water	172:5	0:0	0	type
op	172:20	0:0	0	=
water	172:22	0:0	0	AVMEDIA_TYPE_VIDEO
water	172:40	0:0	0	,
op	173:4	0:0	0	.
water	173:5	0:0	0	id
op	173:20	0:0	0	=
water	173:22	0:0	0	AV_CODEC_ID_WMV1
water	173:38	0:0	0	,
op	174:4	0:0	0	.
water	174:5	0:0	0	priv_data_size
op	174:20	0:0	0	=
op	174:22	0:0	0	sizeof
water	174:28	0:0	0	(
water	174:29	0:0	0	MpegEncContext
water	174:43	0:0	0	)
water	174:44	0:0	0	,
op	175:4	0:0	0	.
water	175:5	0:0	0	init
op	175:20	0:0	0	=
water	175:22	0:0	0	ff_mpv_encode_init
water	175:40	0:0	0	,
op	176:4	0:0	0	.
water	176:5	0:0	0	encode2
op	176:20	0:0	0	=
water	176:22	0:0	0	ff_mpv_encode_picture
water	176:43	0:0	0	,
op	177:4	0:0	0	.
water	177:5	0:0	0	close
op	177:20	0:0	0	=
water	177:22	0:0	0	ff_mpv_encode_end
water	177:39	0:0	0	,
op	178:4	0:0	0	.
water	178:5	0:0	0	pix_fmts
op	178:20	0:0	0	=
water	178:22	0:0	0	(
water	178:23	0:0	0	const
water	178:29	0:0	0	enum
water	178:34	0:0	0	AVPixelFormat
op	178:47	0:0	0	[
op	178:48	0:0	0	]
water	178:49	0:0	0	)
water	178:50	0:0	0	{
water	178:52	0:0	0	AV_PIX_FMT_YUV420P
water	178:70	0:0	0	,
water	178:72	0:0	0	AV_PIX_FMT_NONE
water	178:88	0:0	0	}
water	178:89	0:0	0	,
op	179:4	0:0	0	.
water	179:5	0:0	0	priv_class
op	179:20	0:0	0	=
op	179:22	0:0	0	&
water	179:23	0:0	0	wmv1_class
water	179:33	0:0	0	,
water	180:0	0:0	0	}
