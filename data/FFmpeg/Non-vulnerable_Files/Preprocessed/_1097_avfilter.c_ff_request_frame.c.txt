func	1:0	29:0	0	int	ff_request_frame
params	1:20	0:0	1	
param	1:21	1:39	2	AVFilterLink *	link
stmnts	0:0	28:14	1	
decl	3:4	3:16	2	int	ret
op	3:12	0:0	2	=
op	3:14	0:0	2	-
water	3:15	0:0	2	1
call	4:4	4:40	2	FF_TPRINTF_START
arg	4:21	4:25	3	NULL
water	4:21	0:0	4	NULL
arg	4:27	4:40	3	request_frame
water	4:27	0:0	4	request_frame
water	4:41	0:0	2	;
call	4:43	4:69	2	ff_tlog_link
arg	4:56	4:60	3	NULL
water	4:56	0:0	4	NULL
arg	4:62	4:66	3	link
water	4:62	0:0	4	link
arg	4:68	4:69	3	1
water	4:68	0:0	4	1
water	4:70	0:0	2	;
if	5:4	6:26	2	(link -> closed)
cond	5:8	5:14	3	link -> closed
water	5:8	0:0	4	link
op	5:12	0:0	4	->
water	5:14	0:0	4	closed
stmts	6:8	6:26	3	
return	6:8	6:26	4	AVERROR_EOF
water	6:15	0:0	5	AVERROR_EOF
call	7:4	7:37	2	av_assert0
arg	7:15	7:37	3	!link->frame_requested
op	7:15	0:0	4	!
water	7:16	0:0	4	link
op	7:20	0:0	4	->
water	7:22	0:0	4	frame_requested
water	7:38	0:0	2	;
water	8:4	0:0	2	link
op	8:8	0:0	2	->
water	8:10	0:0	2	frame_requested
op	8:26	0:0	2	=
water	8:28	0:0	2	1
water	8:29	0:0	2	;
while	9:4	27:4	2	(link -> frame_requested)
cond	9:11	9:17	3	link -> frame_requested
water	9:11	0:0	4	link
op	9:15	0:0	4	->
water	9:17	0:0	4	frame_requested
stmts	9:34	27:4	3	
water	9:34	0:0	4	{
if	10:8	11:51	4	(link -> srcpad -> request_frame)
cond	10:12	10:26	5	link -> srcpad -> request_frame
water	10:12	0:0	6	link
op	10:16	0:0	6	->
water	10:18	0:0	6	srcpad
op	10:24	0:0	6	->
water	10:26	0:0	6	request_frame
stmts	11:12	11:51	5	
water	11:12	0:0	6	ret
op	11:16	0:0	6	=
call	11:18	11:50	6	link->srcpad->request_frame
arg	11:46	11:50	7	link
water	11:46	0:0	8	link
water	11:51	0:0	6	;
else	12:8	13:56	4
stmts	12:13	13:56	5	
if	12:13	13:56	6	(link -> src -> inputs [ 0 ])
cond	12:17	12:36	7	link -> src -> inputs [ 0 ]
water	12:17	0:0	8	link
op	12:21	0:0	8	->
water	12:23	0:0	8	src
op	12:26	0:0	8	->
water	12:28	0:0	8	inputs
op	12:34	0:0	8	[
water	12:35	0:0	8	0
op	12:36	0:0	8	]
stmts	13:12	13:56	7	
water	13:12	0:0	8	ret
op	13:16	0:0	8	=
call	13:18	13:55	8	ff_request_frame
arg	13:35	13:55	9	link->src->inputs[0]
water	13:35	0:0	10	link
op	13:39	0:0	10	->
water	13:41	0:0	10	src
op	13:44	0:0	10	->
water	13:46	0:0	10	inputs
op	13:52	0:0	10	[
water	13:53	0:0	10	0
op	13:54	0:0	10	]
water	13:56	0:0	8	;
if	14:8	18:8	4	(ret == AVERROR_EOF && link -> partial_buf)
cond	14:12	14:40	5	ret == AVERROR_EOF && link -> partial_buf
water	14:12	0:0	6	ret
op	14:16	0:0	6	==
water	14:19	0:0	6	AVERROR_EOF
op	14:31	0:0	6	&&
water	14:34	0:0	6	link
op	14:38	0:0	6	->
water	14:40	0:0	6	partial_buf
stmts	14:53	18:8	5	
water	14:53	0:0	6	{
decl	15:12	15:45	6	AVFrame	*pbuf
op	15:26	0:0	6	=
water	15:28	0:0	6	link
op	15:32	0:0	6	->
water	15:34	0:0	6	partial_buf
water	16:12	0:0	6	link
op	16:16	0:0	6	->
water	16:18	0:0	6	partial_buf
op	16:30	0:0	6	=
water	16:32	0:0	6	NULL
water	16:36	0:0	6	;
water	17:12	0:0	6	ret
op	17:16	0:0	6	=
call	17:18	17:51	6	ff_filter_frame_framed
arg	17:41	17:45	7	link
water	17:41	0:0	8	link
arg	17:47	17:51	7	pbuf
water	17:47	0:0	8	pbuf
water	17:52	0:0	6	;
water	18:8	0:0	6	}
if	19:8	23:8	4	(ret < 0)
cond	19:12	19:18	5	ret < 0
water	19:12	0:0	6	ret
op	19:16	0:0	6	<
water	19:18	0:0	6	0
stmts	19:21	23:8	5	
water	19:21	0:0	6	{
water	20:12	0:0	6	link
op	20:16	0:0	6	->
water	20:18	0:0	6	frame_requested
op	20:34	0:0	6	=
water	20:36	0:0	6	0
water	20:37	0:0	6	;
if	21:12	22:32	6	(ret == AVERROR_EOF)
cond	21:16	21:23	7	ret == AVERROR_EOF
water	21:16	0:0	8	ret
op	21:20	0:0	8	==
water	21:23	0:0	8	AVERROR_EOF
stmts	22:16	22:32	7	
water	22:16	0:0	8	link
op	22:20	0:0	8	->
water	22:22	0:0	8	closed
op	22:29	0:0	8	=
water	22:31	0:0	8	1
water	22:32	0:0	8	;
water	23:8	0:0	6	}
else	23:10	26:8	4
stmts	23:15	26:8	5	
water	23:15	0:0	6	{
call	24:12	25:62	6	av_assert0
arg	24:23	25:62	7	!link->frame_requested||link->flags&FF_LINK_FLAG_REQUEST_LOOP
op	24:23	0:0	8	!
water	24:24	0:0	8	link
op	24:28	0:0	8	->
water	24:30	0:0	8	frame_requested
op	24:46	0:0	8	||
water	25:23	0:0	8	link
op	25:27	0:0	8	->
water	25:29	0:0	8	flags
op	25:35	0:0	8	&
water	25:37	0:0	8	FF_LINK_FLAG_REQUEST_LOOP
water	25:63	0:0	6	;
water	26:8	0:0	6	}
water	27:4	0:0	4	}
return	28:4	28:14	2	ret
water	28:11	0:0	3	ret
