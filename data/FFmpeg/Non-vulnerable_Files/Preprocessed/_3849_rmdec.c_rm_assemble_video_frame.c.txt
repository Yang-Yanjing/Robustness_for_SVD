func	1:0	104:0	0	static int	rm_assemble_video_frame
params	1:34	0:0	1	
param	1:35	1:53	2	AVFormatContext *	s
param	1:55	1:70	2	AVIOContext *	pb
param	2:35	2:53	2	RMDemuxContext *	rm
param	2:55	2:68	2	RMStream *	vst
param	3:35	3:48	2	AVPacket *	pkt
param	3:50	3:57	2	int	len
param	3:59	3:68	2	int *	pseq
param	4:35	4:53	2	int64_t *	timestamp
stmnts	0:0	103:12	1	
decl	6:4	6:11	2	int	hdr
decl	7:4	7:47	2	int	seq
op	7:12	0:0	2	=
water	7:14	0:0	2	0
water	7:15	0:0	2	,
decl	7:4	7:47	2	int	pic_num
op	7:25	0:0	2	=
water	7:27	0:0	2	0
water	7:28	0:0	2	,
decl	7:4	7:47	2	int	len2
op	7:35	0:0	2	=
water	7:37	0:0	2	0
water	7:38	0:0	2	,
decl	7:4	7:47	2	int	pos
op	7:44	0:0	2	=
water	7:46	0:0	2	0
decl	8:4	8:12	2	int	type
decl	9:4	9:11	2	int	ret
water	10:4	0:0	2	hdr
op	10:8	0:0	2	=
call	10:10	10:20	2	avio_r8
arg	10:18	10:20	3	pb
water	10:18	0:0	4	pb
water	10:21	0:0	2	;
water	10:23	0:0	2	len
op	10:26	0:0	2	--
water	10:28	0:0	2	;
water	11:4	0:0	2	type
op	11:9	0:0	2	=
water	11:11	0:0	2	hdr
op	11:15	0:0	2	>>
water	11:18	0:0	2	6
water	11:19	0:0	2	;
if	12:4	14:4	2	(type != 3)
cond	12:7	12:15	3	type != 3
water	12:7	0:0	4	type
op	12:12	0:0	4	!=
water	12:15	0:0	4	3
stmts	12:17	14:4	3	
water	12:17	0:0	4	{
water	13:8	0:0	4	seq
op	13:12	0:0	4	=
call	13:14	13:24	4	avio_r8
arg	13:22	13:24	5	pb
water	13:22	0:0	6	pb
water	13:25	0:0	4	;
water	13:27	0:0	4	len
op	13:30	0:0	4	--
water	13:32	0:0	4	;
water	14:4	0:0	4	}
if	15:4	19:4	2	(type != 1)
cond	15:7	15:15	3	type != 1
water	15:7	0:0	4	type
op	15:12	0:0	4	!=
water	15:15	0:0	4	1
stmts	15:17	19:4	3	
water	15:17	0:0	4	{
water	16:8	0:0	4	len2
op	16:13	0:0	4	=
call	16:15	16:31	4	get_num
arg	16:23	16:25	5	pb
water	16:23	0:0	6	pb
arg	16:27	16:31	5	&len
op	16:27	0:0	6	&
water	16:28	0:0	6	len
water	16:32	0:0	4	;
water	17:8	0:0	4	pos
op	17:13	0:0	4	=
call	17:15	17:31	4	get_num
arg	17:23	17:25	5	pb
water	17:23	0:0	6	pb
arg	17:27	17:31	5	&len
op	17:27	0:0	6	&
water	17:28	0:0	6	len
water	17:32	0:0	4	;
water	18:8	0:0	4	pic_num
op	18:16	0:0	4	=
call	18:18	18:28	4	avio_r8
arg	18:26	18:28	5	pb
water	18:26	0:0	6	pb
water	18:29	0:0	4	;
water	18:31	0:0	4	len
op	18:34	0:0	4	--
water	18:36	0:0	4	;
water	19:4	0:0	4	}
if	20:4	23:4	2	(len < 0)
cond	20:7	20:11	3	len < 0
water	20:7	0:0	4	len
op	20:10	0:0	4	<
water	20:11	0:0	4	0
stmts	20:14	23:4	3	
water	20:14	0:0	4	{
call	21:8	21:53	4	av_log
arg	21:15	21:16	5	s
water	21:15	0:0	6	s
arg	21:18	21:30	5	AV_LOG_ERROR
water	21:18	0:0	6	AV_LOG_ERROR
arg	21:32	21:53	5	"Insufficient data\n"
water	21:32	0:0	6	"Insufficient data\n"
water	21:54	0:0	4	;
return	22:8	22:17	4	-1
op	22:15	0:0	5	-
water	22:16	0:0	5	1
water	23:4	0:0	4	}
water	24:4	0:0	2	rm
op	24:6	0:0	2	->
water	24:8	0:0	2	remaining_len
op	24:22	0:0	2	=
water	24:24	0:0	2	len
water	24:27	0:0	2	;
if	25:4	46:4	2	(type & 1)
cond	25:7	25:12	3	type & 1
water	25:7	0:0	4	type
op	25:11	0:0	4	&
water	25:12	0:0	4	1
stmts	25:14	46:4	3	
water	25:14	0:0	4	{
if	26:8	29:8	4	(type == 3)
cond	26:11	26:19	5	type == 3
water	26:11	0:0	6	type
op	26:16	0:0	6	==
water	26:19	0:0	6	3
stmts	26:21	29:8	5	
water	26:21	0:0	6	{
water	27:12	0:0	6	len
op	27:15	0:0	6	=
water	27:17	0:0	6	len2
water	27:21	0:0	6	;
op	28:12	0:0	6	*
water	28:13	0:0	6	timestamp
op	28:23	0:0	6	=
water	28:25	0:0	6	pos
water	28:28	0:0	6	;
water	29:8	0:0	6	}
if	30:8	33:8	4	(rm -> remaining_len < len)
cond	30:11	30:31	5	rm -> remaining_len < len
water	30:11	0:0	6	rm
op	30:13	0:0	6	->
water	30:15	0:0	6	remaining_len
op	30:29	0:0	6	<
water	30:31	0:0	6	len
stmts	30:36	33:8	5	
water	30:36	0:0	6	{
call	31:12	31:66	6	av_log
arg	31:19	31:20	7	s
water	31:19	0:0	8	s
arg	31:22	31:34	7	AV_LOG_ERROR
water	31:22	0:0	8	AV_LOG_ERROR
arg	31:36	31:66	7	"Insufficient remaining len\n"
water	31:36	0:0	8	"Insufficient remaining len\n"
water	31:67	0:0	6	;
return	32:12	32:21	6	-1
op	32:19	0:0	7	-
water	32:20	0:0	7	1
water	33:8	0:0	6	}
water	34:8	0:0	4	rm
op	34:10	0:0	4	->
water	34:12	0:0	4	remaining_len
op	34:26	0:0	4	-=
water	34:29	0:0	4	len
water	34:32	0:0	4	;
if	35:8	36:31	4	(av_new_packet (pkt ,len + 9 ) < 0)
cond	35:11	35:41	5	av_new_packet (pkt ,len + 9 ) < 0
call	35:11	35:37	6	av_new_packet
arg	35:25	35:28	7	pkt
water	35:25	0:0	8	pkt
arg	35:30	35:37	7	len+9
water	35:30	0:0	8	len
op	35:34	0:0	8	+
water	35:36	0:0	8	9
op	35:39	0:0	6	<
water	35:41	0:0	6	0
stmts	36:12	36:31	5	
return	36:12	36:31	6	AVERROR(EIO)
call	36:19	36:30	7	AVERROR
arg	36:27	36:30	8	EIO
water	36:27	0:0	9	EIO
water	37:8	0:0	4	pkt
op	37:11	0:0	4	->
water	37:13	0:0	4	data
op	37:17	0:0	4	[
water	37:18	0:0	4	0
op	37:19	0:0	4	]
op	37:21	0:0	4	=
water	37:23	0:0	4	0
water	37:24	0:0	4	;
call	38:8	38:32	4	AV_WL32
arg	38:16	38:29	5	pkt->data+1
water	38:16	0:0	6	pkt
op	38:19	0:0	6	->
water	38:21	0:0	6	data
op	38:26	0:0	6	+
water	38:28	0:0	6	1
arg	38:31	38:32	5	1
water	38:31	0:0	6	1
water	38:33	0:0	4	;
call	39:8	39:32	4	AV_WL32
arg	39:16	39:29	5	pkt->data+5
water	39:16	0:0	6	pkt
op	39:19	0:0	6	->
water	39:21	0:0	6	data
op	39:26	0:0	6	+
water	39:28	0:0	6	5
arg	39:31	39:32	5	0
water	39:31	0:0	6	0
water	39:33	0:0	4	;
if	40:8	44:8	4	(( ret =avio_read (pb ,pkt -> data + 9 ,len ) ) != len)
cond	40:12	40:57	5	( ret =avio_read (pb ,pkt -> data + 9 ,len ) ) != len
water	40:12	0:0	6	(
water	40:13	0:0	6	ret
op	40:17	0:0	6	=
call	40:19	40:51	6	avio_read
arg	40:29	40:31	7	pb
water	40:29	0:0	8	pb
arg	40:33	40:46	7	pkt->data+9
water	40:33	0:0	8	pkt
op	40:36	0:0	8	->
water	40:38	0:0	8	data
op	40:43	0:0	8	+
water	40:45	0:0	8	9
arg	40:48	40:51	7	len
water	40:48	0:0	8	len
water	40:52	0:0	6	)
op	40:54	0:0	6	!=
water	40:57	0:0	6	len
stmts	40:62	44:8	5	
water	40:62	0:0	6	{
call	41:12	41:30	6	av_free_packet
arg	41:27	41:30	7	pkt
water	41:27	0:0	8	pkt
water	41:31	0:0	6	;
call	42:12	42:68	6	av_log
arg	42:19	42:20	7	s
water	42:19	0:0	8	s
arg	42:22	42:34	7	AV_LOG_ERROR
water	42:22	0:0	8	AV_LOG_ERROR
arg	42:36	42:63	7	"Failed to read %d bytes\n"
water	42:36	0:0	8	"Failed to read %d bytes\n"
arg	42:65	42:68	7	len
water	42:65	0:0	8	len
water	42:69	0:0	6	;
return	43:12	43:47	6	ret<0?ret:AVERROR(EIO)
water	43:19	0:0	7	ret
op	43:23	0:0	7	<
water	43:25	0:0	7	0
water	43:27	0:0	7	?
water	43:29	0:0	7	ret
water	43:33	0:0	7	:
call	43:35	43:46	7	AVERROR
arg	43:43	43:46	8	EIO
water	43:43	0:0	9	EIO
water	44:8	0:0	6	}
return	45:8	45:16	4	0
water	45:15	0:0	5	0
water	46:4	0:0	4	}
op	48:4	0:0	2	*
water	48:5	0:0	2	pseq
op	48:10	0:0	2	=
water	48:12	0:0	2	seq
water	48:15	0:0	2	;
if	49:4	64:4	2	(( seq & 0 x7F ) == 1 || vst -> curpic_num != pic_num)
cond	49:7	49:47	3	( seq & 0 x7F ) == 1 || vst -> curpic_num != pic_num
water	49:7	0:0	4	(
water	49:8	0:0	4	seq
op	49:12	0:0	4	&
water	49:14	0:0	4	0
water	49:15	0:0	4	x7F
water	49:18	0:0	4	)
op	49:20	0:0	4	==
water	49:23	0:0	4	1
op	49:25	0:0	4	||
water	49:28	0:0	4	vst
op	49:31	0:0	4	->
water	49:33	0:0	4	curpic_num
op	49:44	0:0	4	!=
water	49:47	0:0	4	pic_num
stmts	49:55	64:4	3	
water	49:55	0:0	4	{
if	50:8	53:8	4	(len2 >ffio_limit (pb ,len2 ))
cond	50:12	50:38	5	len2 >ffio_limit (pb ,len2 )
water	50:12	0:0	6	len2
op	50:17	0:0	6	>
call	50:19	50:38	6	ffio_limit
arg	50:30	50:32	7	pb
water	50:30	0:0	8	pb
arg	50:34	50:38	7	len2
water	50:34	0:0	8	len2
stmts	50:41	53:8	5	
water	50:41	0:0	6	{
call	51:12	51:63	6	av_log
arg	51:19	51:20	7	s
water	51:19	0:0	8	s
arg	51:22	51:34	7	AV_LOG_ERROR
water	51:22	0:0	8	AV_LOG_ERROR
arg	51:36	51:63	7	"Impossibly sized packet\n"
water	51:36	0:0	8	"Impossibly sized packet\n"
water	51:64	0:0	6	;
return	52:12	52:38	6	AVERROR_INVALIDDATA
water	52:19	0:0	7	AVERROR_INVALIDDATA
water	53:8	0:0	6	}
water	54:8	0:0	4	vst
op	54:11	0:0	4	->
water	54:13	0:0	4	slices
op	54:20	0:0	4	=
water	54:22	0:0	4	(
water	54:23	0:0	4	(
water	54:24	0:0	4	hdr
op	54:28	0:0	4	&
water	54:30	0:0	4	0
water	54:31	0:0	4	x3F
water	54:34	0:0	4	)
op	54:36	0:0	4	<<
water	54:39	0:0	4	1
water	54:40	0:0	4	)
op	54:42	0:0	4	+
water	54:44	0:0	4	1
water	54:45	0:0	4	;
water	55:8	0:0	4	vst
op	55:11	0:0	4	->
water	55:13	0:0	4	videobufsize
op	55:26	0:0	4	=
water	55:28	0:0	4	len2
op	55:33	0:0	4	+
water	55:35	0:0	4	8
op	55:36	0:0	4	*
water	55:37	0:0	4	vst
op	55:40	0:0	4	->
water	55:42	0:0	4	slices
op	55:49	0:0	4	+
water	55:51	0:0	4	1
water	55:52	0:0	4	;
call	56:8	56:32	4	av_free_packet
arg	56:23	56:32	5	&vst->pkt
op	56:23	0:0	6	&
water	56:24	0:0	6	vst
op	56:27	0:0	6	->
water	56:29	0:0	6	pkt
water	56:33	0:0	4	;
if	57:8	58:34	4	(av_new_packet (& vst -> pkt ,vst -> videobufsize ) < 0)
cond	57:11	57:57	5	av_new_packet (& vst -> pkt ,vst -> videobufsize ) < 0
call	57:11	57:53	6	av_new_packet
arg	57:25	57:34	7	&vst->pkt
op	57:25	0:0	8	&
water	57:26	0:0	8	vst
op	57:29	0:0	8	->
water	57:31	0:0	8	pkt
arg	57:36	57:53	7	vst->videobufsize
water	57:36	0:0	8	vst
op	57:39	0:0	8	->
water	57:41	0:0	8	videobufsize
op	57:55	0:0	6	<
water	57:57	0:0	6	0
stmts	58:12	58:34	5	
return	58:12	58:34	6	AVERROR(ENOMEM)
call	58:19	58:33	7	AVERROR
arg	58:27	58:33	8	ENOMEM
water	58:27	0:0	9	ENOMEM
call	59:8	59:46	4	memset
arg	59:15	59:28	5	vst->pkt.data
water	59:15	0:0	6	vst
op	59:18	0:0	6	->
water	59:20	0:0	6	pkt
op	59:23	0:0	6	.
water	59:24	0:0	6	data
arg	59:30	59:31	5	0
water	59:30	0:0	6	0
arg	59:33	59:46	5	vst->pkt.size
water	59:33	0:0	6	vst
op	59:36	0:0	6	->
water	59:38	0:0	6	pkt
op	59:41	0:0	6	.
water	59:42	0:0	6	size
water	59:47	0:0	4	;
water	60:8	0:0	4	vst
op	60:11	0:0	4	->
water	60:13	0:0	4	videobufpos
op	60:25	0:0	4	=
water	60:27	0:0	4	8
op	60:28	0:0	4	*
water	60:29	0:0	4	vst
op	60:32	0:0	4	->
water	60:34	0:0	4	slices
op	60:41	0:0	4	+
water	60:43	0:0	4	1
water	60:44	0:0	4	;
water	61:8	0:0	4	vst
op	61:11	0:0	4	->
water	61:13	0:0	4	cur_slice
op	61:23	0:0	4	=
water	61:25	0:0	4	0
water	61:26	0:0	4	;
water	62:8	0:0	4	vst
op	62:11	0:0	4	->
water	62:13	0:0	4	curpic_num
op	62:24	0:0	4	=
water	62:26	0:0	4	pic_num
water	62:33	0:0	4	;
water	63:8	0:0	4	vst
op	63:11	0:0	4	->
water	63:13	0:0	4	pktpos
op	63:20	0:0	4	=
call	63:22	63:34	4	avio_tell
arg	63:32	63:34	5	pb
water	63:32	0:0	6	pb
water	63:35	0:0	4	;
water	64:4	0:0	4	}
if	65:4	66:29	2	(type == 2)
cond	65:7	65:15	3	type == 2
water	65:7	0:0	4	type
op	65:12	0:0	4	==
water	65:15	0:0	4	2
stmts	66:8	66:29	3	
water	66:8	0:0	4	len
op	66:12	0:0	4	=
call	66:14	66:28	4	FFMIN
arg	66:20	66:23	5	len
water	66:20	0:0	6	len
arg	66:25	66:28	5	pos
water	66:25	0:0	6	pos
water	66:29	0:0	4	;
if	67:4	70:4	2	(++ vst -> cur_slice > vst -> slices)
cond	67:7	67:31	3	++ vst -> cur_slice > vst -> slices
op	67:7	0:0	4	++
water	67:9	0:0	4	vst
op	67:12	0:0	4	->
water	67:14	0:0	4	cur_slice
op	67:24	0:0	4	>
water	67:26	0:0	4	vst
op	67:29	0:0	4	->
water	67:31	0:0	4	slices
stmts	67:39	70:4	3	
water	67:39	0:0	4	{
call	68:8	68:75	4	av_log
arg	68:15	68:16	5	s
water	68:15	0:0	6	s
arg	68:18	68:30	5	AV_LOG_ERROR
water	68:18	0:0	6	AV_LOG_ERROR
arg	68:32	68:59	5	"cur slice %d, too large\n"
water	68:32	0:0	6	"cur slice %d, too large\n"
arg	68:61	68:75	5	vst->cur_slice
water	68:61	0:0	6	vst
op	68:64	0:0	6	->
water	68:66	0:0	6	cur_slice
water	68:76	0:0	4	;
return	69:8	69:16	4	1
water	69:15	0:0	5	1
water	70:4	0:0	4	}
if	71:4	72:30	2	(! vst -> pkt . data)
cond	71:7	71:17	3	! vst -> pkt . data
op	71:7	0:0	4	!
water	71:8	0:0	4	vst
op	71:11	0:0	4	->
water	71:13	0:0	4	pkt
op	71:16	0:0	4	.
water	71:17	0:0	4	data
stmts	72:8	72:30	3	
return	72:8	72:30	4	AVERROR(ENOMEM)
call	72:15	72:29	5	AVERROR
arg	72:23	72:29	6	ENOMEM
water	72:23	0:0	7	ENOMEM
call	73:4	73:51	2	AV_WL32
arg	73:12	73:48	3	vst->pkt.data-7+8*vst->cur_slice
water	73:12	0:0	4	vst
op	73:15	0:0	4	->
water	73:17	0:0	4	pkt
op	73:20	0:0	4	.
water	73:21	0:0	4	data
op	73:26	0:0	4	-
water	73:28	0:0	4	7
op	73:30	0:0	4	+
water	73:32	0:0	4	8
op	73:33	0:0	4	*
water	73:34	0:0	4	vst
op	73:37	0:0	4	->
water	73:39	0:0	4	cur_slice
arg	73:50	73:51	3	1
water	73:50	0:0	4	1
water	73:52	0:0	2	;
call	74:4	74:86	2	AV_WL32
arg	74:12	74:48	3	vst->pkt.data-3+8*vst->cur_slice
water	74:12	0:0	4	vst
op	74:15	0:0	4	->
water	74:17	0:0	4	pkt
op	74:20	0:0	4	.
water	74:21	0:0	4	data
op	74:26	0:0	4	-
water	74:28	0:0	4	3
op	74:30	0:0	4	+
water	74:32	0:0	4	8
op	74:33	0:0	4	*
water	74:34	0:0	4	vst
op	74:37	0:0	4	->
water	74:39	0:0	4	cur_slice
arg	74:50	74:86	3	vst->videobufpos-8*vst->slices-1
water	74:50	0:0	4	vst
op	74:53	0:0	4	->
water	74:55	0:0	4	videobufpos
op	74:67	0:0	4	-
water	74:69	0:0	4	8
op	74:70	0:0	4	*
water	74:71	0:0	4	vst
op	74:74	0:0	4	->
water	74:76	0:0	4	slices
op	74:83	0:0	4	-
water	74:85	0:0	4	1
water	74:87	0:0	2	;
if	75:4	78:4	2	(vst -> videobufpos + len > vst -> videobufsize)
cond	75:7	75:37	3	vst -> videobufpos + len > vst -> videobufsize
water	75:7	0:0	4	vst
op	75:10	0:0	4	->
water	75:12	0:0	4	videobufpos
op	75:24	0:0	4	+
water	75:26	0:0	4	len
op	75:30	0:0	4	>
water	75:32	0:0	4	vst
op	75:35	0:0	4	->
water	75:37	0:0	4	videobufsize
stmts	75:51	78:4	3	
water	75:51	0:0	4	{
call	76:8	76:56	4	av_log
arg	76:15	76:16	5	s
water	76:15	0:0	6	s
arg	76:18	76:30	5	AV_LOG_ERROR
water	76:18	0:0	6	AV_LOG_ERROR
arg	76:32	76:56	5	"outside videobufsize\n"
water	76:32	0:0	6	"outside videobufsize\n"
water	76:57	0:0	4	;
return	77:8	77:16	4	1
water	77:15	0:0	5	1
water	78:4	0:0	4	}
if	79:4	80:27	2	(avio_read (pb ,vst -> pkt . data + vst -> videobufpos ,len ) != len)
cond	79:8	79:64	3	avio_read (pb ,vst -> pkt . data + vst -> videobufpos ,len ) != len
call	79:8	79:59	4	avio_read
arg	79:18	79:20	5	pb
water	79:18	0:0	6	pb
arg	79:22	79:54	5	vst->pkt.data+vst->videobufpos
water	79:22	0:0	6	vst
op	79:25	0:0	6	->
water	79:27	0:0	6	pkt
op	79:30	0:0	6	.
water	79:31	0:0	6	data
op	79:36	0:0	6	+
water	79:38	0:0	6	vst
op	79:41	0:0	6	->
water	79:43	0:0	6	videobufpos
arg	79:56	79:59	5	len
water	79:56	0:0	6	len
op	79:61	0:0	4	!=
water	79:64	0:0	4	len
stmts	80:8	80:27	3	
return	80:8	80:27	4	AVERROR(EIO)
call	80:15	80:26	5	AVERROR
arg	80:23	80:26	6	EIO
water	80:23	0:0	7	EIO
water	81:4	0:0	2	vst
op	81:7	0:0	2	->
water	81:9	0:0	2	videobufpos
op	81:21	0:0	2	+=
water	81:24	0:0	2	len
water	81:27	0:0	2	;
water	82:4	0:0	2	rm
op	82:6	0:0	2	->
water	82:8	0:0	2	remaining_len
op	82:21	0:0	2	-=
water	82:24	0:0	2	len
water	82:27	0:0	2	;
if	83:4	102:4	2	(type == 2 || vst -> videobufpos == vst -> videobufsize)
cond	83:8	83:46	3	type == 2 || vst -> videobufpos == vst -> videobufsize
water	83:8	0:0	4	type
op	83:13	0:0	4	==
water	83:16	0:0	4	2
op	83:18	0:0	4	||
water	83:21	0:0	4	vst
op	83:24	0:0	4	->
water	83:26	0:0	4	videobufpos
op	83:38	0:0	4	==
water	83:41	0:0	4	vst
op	83:44	0:0	4	->
water	83:46	0:0	4	videobufsize
stmts	83:60	102:4	3	
water	83:60	0:0	4	{
water	84:8	0:0	4	vst
op	84:11	0:0	4	->
water	84:13	0:0	4	pkt
op	84:16	0:0	4	.
water	84:17	0:0	4	data
op	84:21	0:0	4	[
water	84:22	0:0	4	0
op	84:23	0:0	4	]
op	84:25	0:0	4	=
water	84:27	0:0	4	vst
op	84:30	0:0	4	->
water	84:32	0:0	4	cur_slice
op	84:41	0:0	4	-
water	84:42	0:0	4	1
water	84:43	0:0	4	;
op	85:8	0:0	4	*
water	85:9	0:0	4	pkt
op	85:12	0:0	4	=
water	85:14	0:0	4	vst
op	85:17	0:0	4	->
water	85:19	0:0	4	pkt
water	85:22	0:0	4	;
water	86:8	0:0	4	vst
op	86:11	0:0	4	->
water	86:13	0:0	4	pkt
op	86:16	0:0	4	.
water	86:17	0:0	4	data
op	86:21	0:0	4	=
water	86:23	0:0	4	NULL
water	86:27	0:0	4	;
water	87:8	0:0	4	vst
op	87:11	0:0	4	->
water	87:13	0:0	4	pkt
op	87:16	0:0	4	.
water	87:17	0:0	4	size
op	87:21	0:0	4	=
water	87:23	0:0	4	0
water	87:24	0:0	4	;
water	88:8	0:0	4	vst
op	88:11	0:0	4	->
water	88:13	0:0	4	pkt
op	88:16	0:0	4	.
water	88:17	0:0	4	buf
op	88:21	0:0	4	=
water	88:23	0:0	4	NULL
water	88:27	0:0	4	;
water	90:0	0:0	4	FF_DISABLE_DEPRECATION_WARNINGS
water	91:8	0:0	4	vst
op	91:11	0:0	4	->
water	91:13	0:0	4	pkt
op	91:16	0:0	4	.
water	91:17	0:0	4	destruct
op	91:26	0:0	4	=
water	91:28	0:0	4	NULL
water	91:32	0:0	4	;
water	92:0	0:0	4	FF_ENABLE_DEPRECATION_WARNINGS
water	94:8	0:0	4	if
water	94:10	0:0	4	(
water	94:11	0:0	4	vst
op	94:14	0:0	4	->
water	94:16	0:0	4	slices
op	94:23	0:0	4	!=
water	94:26	0:0	4	vst
op	94:29	0:0	4	->
water	94:31	0:0	4	cur_slice
water	94:40	0:0	4	)
call	95:12	96:52	4	memmove
arg	95:20	95:52	5	pkt->data+1+8*vst->cur_slice
water	95:20	0:0	6	pkt
op	95:23	0:0	6	->
water	95:25	0:0	6	data
op	95:30	0:0	6	+
water	95:32	0:0	6	1
op	95:34	0:0	6	+
water	95:36	0:0	6	8
op	95:37	0:0	6	*
water	95:38	0:0	6	vst
op	95:41	0:0	6	->
water	95:43	0:0	6	cur_slice
arg	95:54	95:83	5	pkt->data+1+8*vst->slices
water	95:54	0:0	6	pkt
op	95:57	0:0	6	->
water	95:59	0:0	6	data
op	95:64	0:0	6	+
water	95:66	0:0	6	1
op	95:68	0:0	6	+
water	95:70	0:0	6	8
op	95:71	0:0	6	*
water	95:72	0:0	6	vst
op	95:75	0:0	6	->
water	95:77	0:0	6	slices
arg	96:16	96:52	5	vst->videobufpos-1-8*vst->slices
water	96:16	0:0	6	vst
op	96:19	0:0	6	->
water	96:21	0:0	6	videobufpos
op	96:33	0:0	6	-
water	96:35	0:0	6	1
op	96:37	0:0	6	-
water	96:39	0:0	6	8
op	96:40	0:0	6	*
water	96:41	0:0	6	vst
op	96:44	0:0	6	->
water	96:46	0:0	6	slices
water	96:53	0:0	4	;
water	97:8	0:0	4	pkt
op	97:11	0:0	4	->
water	97:13	0:0	4	size
op	97:18	0:0	4	=
water	97:20	0:0	4	vst
op	97:23	0:0	4	->
water	97:25	0:0	4	videobufpos
op	97:37	0:0	4	+
water	97:39	0:0	4	8
op	97:40	0:0	4	*
water	97:41	0:0	4	(
water	97:42	0:0	4	vst
op	97:45	0:0	4	->
water	97:47	0:0	4	cur_slice
op	97:57	0:0	4	-
water	97:59	0:0	4	vst
op	97:62	0:0	4	->
water	97:64	0:0	4	slices
water	97:70	0:0	4	)
water	97:71	0:0	4	;
water	98:8	0:0	4	pkt
op	98:11	0:0	4	->
water	98:13	0:0	4	pts
op	98:17	0:0	4	=
water	98:19	0:0	4	AV_NOPTS_VALUE
water	98:33	0:0	4	;
water	99:8	0:0	4	pkt
op	99:11	0:0	4	->
water	99:13	0:0	4	pos
op	99:17	0:0	4	=
water	99:19	0:0	4	vst
op	99:22	0:0	4	->
water	99:24	0:0	4	pktpos
water	99:30	0:0	4	;
water	100:8	0:0	4	vst
op	100:11	0:0	4	->
water	100:13	0:0	4	slices
op	100:20	0:0	4	=
water	100:22	0:0	4	0
water	100:23	0:0	4	;
return	101:8	101:16	4	0
water	101:15	0:0	5	0
water	102:4	0:0	4	}
return	103:4	103:12	2	1
water	103:11	0:0	3	1
