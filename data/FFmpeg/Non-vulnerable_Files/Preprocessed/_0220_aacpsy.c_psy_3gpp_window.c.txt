func	1:17	79:0	0	FFPsyWindowInfo	psy_3gpp_window
params	1:48	0:0	1	
param	1:49	1:66	2	FFPsyContext *	ctx
param	2:49	2:69	2	const int16_t *	audio
param	3:49	3:66	2	const int16_t *	la
param	4:49	4:60	2	int	channel
param	4:62	4:75	2	int	prev_type
stmnts	0:0	78:13	1	
decl	6:4	6:12	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	j
decl	7:4	7:70	2	int	br
op	7:25	0:0	2	=
water	7:27	0:0	2	ctx
op	7:30	0:0	2	->
water	7:32	0:0	2	avctx
op	7:37	0:0	2	->
water	7:39	0:0	2	bit_rate
op	7:48	0:0	2	/
water	7:50	0:0	2	ctx
op	7:53	0:0	2	->
water	7:55	0:0	2	avctx
op	7:60	0:0	2	->
water	7:62	0:0	2	channels
decl	8:4	8:48	2	int	attack_ratio
op	8:25	0:0	2	=
water	8:27	0:0	2	br
op	8:30	0:0	2	<=
water	8:33	0:0	2	16000
water	8:39	0:0	2	?
water	8:41	0:0	2	18
water	8:44	0:0	2	:
water	8:46	0:0	2	10
decl	9:4	9:63	2	AacPsyContext	*pctx
op	9:24	0:0	2	=
water	9:26	0:0	2	(
water	9:27	0:0	2	AacPsyContext
op	9:40	0:0	2	*
water	9:41	0:0	2	)
water	9:43	0:0	2	ctx
op	9:46	0:0	2	->
water	9:48	0:0	2	model_priv_data
decl	10:4	10:44	2	AacPsyChannel	*pch
op	10:24	0:0	2	=
op	10:26	0:0	2	&
water	10:27	0:0	2	pctx
op	10:31	0:0	2	->
water	10:33	0:0	2	ch
op	10:35	0:0	2	[
water	10:36	0:0	2	channel
op	10:43	0:0	2	]
decl	11:4	11:28	2	uint8_t	grouping
op	11:25	0:0	2	=
water	11:27	0:0	2	0
decl	12:4	12:47	2	int	next_type
op	12:25	0:0	2	=
water	12:27	0:0	2	pch
op	12:30	0:0	2	->
water	12:32	0:0	2	next_window_seq
decl	13:4	13:35	2	FFPsyWindowInfo	wi
op	13:24	0:0	2	=
water	13:26	0:0	2	{
water	13:28	0:0	2	{
water	13:30	0:0	2	0
water	13:32	0:0	2	}
water	13:34	0:0	2	}
if	14:4	60:4	2	(la)
cond	14:8	14:8	3	la
water	14:8	0:0	4	la
stmts	14:12	60:4	3	
water	14:12	0:0	4	{
decl	15:8	15:21	4	float	s[8]
water	15:18	0:0	4	,
decl	15:8	15:21	4	float	v
decl	16:8	16:31	4	int	switch_to_eight
op	16:28	0:0	4	=
water	16:30	0:0	4	0
decl	17:8	17:35	4	float	sum
op	17:18	0:0	4	=
water	17:20	0:0	4	0
op	17:21	0:0	4	.
water	17:22	0:0	4	0
water	17:23	0:0	4	,
decl	17:8	17:35	4	float	sum2
op	17:30	0:0	4	=
water	17:32	0:0	4	0
op	17:33	0:0	4	.
water	17:34	0:0	4	0
decl	18:8	18:24	4	int	attack_n
op	18:21	0:0	4	=
water	18:23	0:0	4	0
decl	19:8	19:26	4	int	stay_short
op	19:23	0:0	4	=
water	19:25	0:0	4	0
for	20:8	27:8	4	(i = 0 ;i < 8;i ++)
forinit	20:13	20:18	5	i = 0 ;
water	20:13	0:0	6	i
op	20:15	0:0	6	=
water	20:17	0:0	6	0
water	20:18	0:0	6	;
cond	20:20	20:24	5	i < 8
water	20:20	0:0	6	i
op	20:22	0:0	6	<
water	20:24	0:0	6	8
forexpr	20:27	20:28	5	i ++
water	20:27	0:0	6	i
op	20:28	0:0	6	++
stmts	20:32	27:8	5	
water	20:32	0:0	6	{
for	21:12	24:12	6	(j = 0 ;j < 128;j ++)
forinit	21:17	21:22	7	j = 0 ;
water	21:17	0:0	8	j
op	21:19	0:0	8	=
water	21:21	0:0	8	0
water	21:22	0:0	8	;
cond	21:24	21:28	7	j < 128
water	21:24	0:0	8	j
op	21:26	0:0	8	<
water	21:28	0:0	8	128
forexpr	21:33	21:34	7	j ++
water	21:33	0:0	8	j
op	21:34	0:0	8	++
stmts	21:38	24:12	7	
water	21:38	0:0	8	{
water	22:16	0:0	8	v
op	22:18	0:0	8	=
call	22:20	22:58	8	iir_filter
arg	22:31	22:42	9	la[i*128+j]
water	22:31	0:0	10	la
op	22:33	0:0	10	[
water	22:34	0:0	10	i
op	22:35	0:0	10	*
water	22:36	0:0	10	128
op	22:39	0:0	10	+
water	22:40	0:0	10	j
op	22:41	0:0	10	]
arg	22:44	22:58	9	pch->iir_state
water	22:44	0:0	10	pch
op	22:47	0:0	10	->
water	22:49	0:0	10	iir_state
water	22:59	0:0	8	;
water	23:16	0:0	8	sum
op	23:20	0:0	8	+=
water	23:23	0:0	8	v
op	23:24	0:0	8	*
water	23:25	0:0	8	v
water	23:26	0:0	8	;
water	24:12	0:0	8	}
water	25:12	0:0	6	s
op	25:13	0:0	6	[
water	25:14	0:0	6	i
op	25:15	0:0	6	]
op	25:18	0:0	6	=
water	25:20	0:0	6	sum
water	25:23	0:0	6	;
water	26:12	0:0	6	sum2
op	26:17	0:0	6	+=
water	26:20	0:0	6	sum
water	26:23	0:0	6	;
water	27:8	0:0	6	}
for	28:8	34:8	4	(i = 0 ;i < 8;i ++)
forinit	28:13	28:18	5	i = 0 ;
water	28:13	0:0	6	i
op	28:15	0:0	6	=
water	28:17	0:0	6	0
water	28:18	0:0	6	;
cond	28:20	28:24	5	i < 8
water	28:20	0:0	6	i
op	28:22	0:0	6	<
water	28:24	0:0	6	8
forexpr	28:27	28:28	5	i ++
water	28:27	0:0	6	i
op	28:28	0:0	6	++
stmts	28:32	34:8	5	
water	28:32	0:0	6	{
if	29:12	33:12	6	(s [ i ] > pch -> win_energy * attack_ratio)
cond	29:16	29:41	7	s [ i ] > pch -> win_energy * attack_ratio
water	29:16	0:0	8	s
op	29:17	0:0	8	[
water	29:18	0:0	8	i
op	29:19	0:0	8	]
op	29:21	0:0	8	>
water	29:23	0:0	8	pch
op	29:26	0:0	8	->
water	29:28	0:0	8	win_energy
op	29:39	0:0	8	*
water	29:41	0:0	8	attack_ratio
stmts	29:55	33:12	7	
water	29:55	0:0	8	{
water	30:16	0:0	8	attack_n
op	30:32	0:0	8	=
water	30:34	0:0	8	i
op	30:36	0:0	8	+
water	30:38	0:0	8	1
water	30:39	0:0	8	;
water	31:16	0:0	8	switch_to_eight
op	31:32	0:0	8	=
water	31:34	0:0	8	1
water	31:35	0:0	8	;
break	32:16	32:21	8	
water	33:12	0:0	8	}
water	34:8	0:0	6	}
water	35:8	0:0	4	pch
op	35:11	0:0	4	->
water	35:13	0:0	4	win_energy
op	35:24	0:0	4	=
water	35:26	0:0	4	pch
op	35:29	0:0	4	->
water	35:31	0:0	4	win_energy
op	35:41	0:0	4	*
water	35:42	0:0	4	7
op	35:43	0:0	4	/
water	35:44	0:0	4	8
op	35:46	0:0	4	+
water	35:48	0:0	4	sum2
op	35:52	0:0	4	/
water	35:53	0:0	4	64
water	35:55	0:0	4	;
water	36:8	0:0	4	wi
op	36:10	0:0	4	.
water	36:11	0:0	4	window_type
op	36:22	0:0	4	[
water	36:23	0:0	4	1
op	36:24	0:0	4	]
op	36:26	0:0	4	=
water	36:28	0:0	4	prev_type
water	36:37	0:0	4	;
switch	37:8	57:8	4	(prev_type)
cond	37:16	37:16	5	prev_type
water	37:16	0:0	6	prev_type
stmts	37:27	57:8	5	
water	37:27	0:0	6	{
label	38:8	38:31	6	case ONLY_LONG_SEQUENCE :
water	39:12	0:0	6	wi
op	39:14	0:0	6	.
water	39:15	0:0	6	window_type
op	39:26	0:0	6	[
water	39:27	0:0	6	0
op	39:28	0:0	6	]
op	39:30	0:0	6	=
water	39:32	0:0	6	switch_to_eight
water	39:48	0:0	6	?
water	39:50	0:0	6	LONG_START_SEQUENCE
water	39:70	0:0	6	:
water	39:72	0:0	6	ONLY_LONG_SEQUENCE
water	39:90	0:0	6	;
water	40:12	0:0	6	next_type
op	40:22	0:0	6	=
water	40:24	0:0	6	switch_to_eight
water	40:40	0:0	6	?
water	40:42	0:0	6	EIGHT_SHORT_SEQUENCE
water	40:63	0:0	6	:
water	40:65	0:0	6	ONLY_LONG_SEQUENCE
water	40:83	0:0	6	;
break	41:12	41:17	6	
label	42:8	42:32	6	case LONG_START_SEQUENCE :
water	43:12	0:0	6	wi
op	43:14	0:0	6	.
water	43:15	0:0	6	window_type
op	43:26	0:0	6	[
water	43:27	0:0	6	0
op	43:28	0:0	6	]
op	43:30	0:0	6	=
water	43:32	0:0	6	EIGHT_SHORT_SEQUENCE
water	43:52	0:0	6	;
water	44:12	0:0	6	grouping
op	44:21	0:0	6	=
water	44:23	0:0	6	pch
op	44:26	0:0	6	->
water	44:28	0:0	6	next_grouping
water	44:41	0:0	6	;
water	45:12	0:0	6	next_type
op	45:22	0:0	6	=
water	45:24	0:0	6	switch_to_eight
water	45:40	0:0	6	?
water	45:42	0:0	6	EIGHT_SHORT_SEQUENCE
water	45:63	0:0	6	:
water	45:65	0:0	6	LONG_STOP_SEQUENCE
water	45:83	0:0	6	;
break	46:12	46:17	6	
label	47:8	47:31	6	case LONG_STOP_SEQUENCE :
water	48:12	0:0	6	wi
op	48:14	0:0	6	.
water	48:15	0:0	6	window_type
op	48:26	0:0	6	[
water	48:27	0:0	6	0
op	48:28	0:0	6	]
op	48:30	0:0	6	=
water	48:32	0:0	6	switch_to_eight
water	48:48	0:0	6	?
water	48:50	0:0	6	LONG_START_SEQUENCE
water	48:70	0:0	6	:
water	48:72	0:0	6	ONLY_LONG_SEQUENCE
water	48:90	0:0	6	;
water	49:12	0:0	6	next_type
op	49:22	0:0	6	=
water	49:24	0:0	6	switch_to_eight
water	49:40	0:0	6	?
water	49:42	0:0	6	EIGHT_SHORT_SEQUENCE
water	49:63	0:0	6	:
water	49:65	0:0	6	ONLY_LONG_SEQUENCE
water	49:83	0:0	6	;
break	50:12	50:17	6	
label	51:8	51:33	6	case EIGHT_SHORT_SEQUENCE :
water	52:12	0:0	6	stay_short
op	52:23	0:0	6	=
water	52:25	0:0	6	next_type
op	52:35	0:0	6	==
water	52:38	0:0	6	EIGHT_SHORT_SEQUENCE
op	52:59	0:0	6	||
water	52:62	0:0	6	switch_to_eight
water	52:77	0:0	6	;
water	53:12	0:0	6	wi
op	53:14	0:0	6	.
water	53:15	0:0	6	window_type
op	53:26	0:0	6	[
water	53:27	0:0	6	0
op	53:28	0:0	6	]
op	53:30	0:0	6	=
water	53:32	0:0	6	stay_short
water	53:43	0:0	6	?
water	53:45	0:0	6	EIGHT_SHORT_SEQUENCE
water	53:66	0:0	6	:
water	53:68	0:0	6	LONG_STOP_SEQUENCE
water	53:86	0:0	6	;
water	54:12	0:0	6	grouping
op	54:21	0:0	6	=
water	54:23	0:0	6	next_type
op	54:33	0:0	6	==
water	54:36	0:0	6	EIGHT_SHORT_SEQUENCE
water	54:57	0:0	6	?
water	54:59	0:0	6	pch
op	54:62	0:0	6	->
water	54:64	0:0	6	next_grouping
water	54:78	0:0	6	:
water	54:80	0:0	6	0
water	54:81	0:0	6	;
water	55:12	0:0	6	next_type
op	55:22	0:0	6	=
water	55:24	0:0	6	switch_to_eight
water	55:40	0:0	6	?
water	55:42	0:0	6	EIGHT_SHORT_SEQUENCE
water	55:63	0:0	6	:
water	55:65	0:0	6	LONG_STOP_SEQUENCE
water	55:83	0:0	6	;
break	56:12	56:17	6	
water	57:8	0:0	6	}
water	58:8	0:0	4	pch
op	58:11	0:0	4	->
water	58:13	0:0	4	next_grouping
op	58:27	0:0	4	=
water	58:29	0:0	4	window_grouping
op	58:44	0:0	4	[
water	58:45	0:0	4	attack_n
op	58:53	0:0	4	]
water	58:54	0:0	4	;
water	59:8	0:0	4	pch
op	59:11	0:0	4	->
water	59:13	0:0	4	next_window_seq
op	59:29	0:0	4	=
water	59:31	0:0	4	next_type
water	59:40	0:0	4	;
water	60:4	0:0	4	}
else	60:6	64:4	2
stmts	60:11	64:4	3	
water	60:11	0:0	4	{
for	61:8	62:41	4	(i = 0 ;i < 3;i ++)
forinit	61:13	61:18	5	i = 0 ;
water	61:13	0:0	6	i
op	61:15	0:0	6	=
water	61:17	0:0	6	0
water	61:18	0:0	6	;
cond	61:20	61:24	5	i < 3
water	61:20	0:0	6	i
op	61:22	0:0	6	<
water	61:24	0:0	6	3
forexpr	61:27	61:28	5	i ++
water	61:27	0:0	6	i
op	61:28	0:0	6	++
stmts	62:12	62:41	5	
water	62:12	0:0	6	wi
op	62:14	0:0	6	.
water	62:15	0:0	6	window_type
op	62:26	0:0	6	[
water	62:27	0:0	6	i
op	62:28	0:0	6	]
op	62:30	0:0	6	=
water	62:32	0:0	6	prev_type
water	62:41	0:0	6	;
water	63:8	0:0	4	grouping
op	63:17	0:0	4	=
water	63:19	0:0	4	(
water	63:20	0:0	4	prev_type
op	63:30	0:0	4	==
water	63:33	0:0	4	EIGHT_SHORT_SEQUENCE
water	63:53	0:0	4	)
water	63:55	0:0	4	?
water	63:57	0:0	4	window_grouping
op	63:72	0:0	4	[
water	63:73	0:0	4	0
op	63:74	0:0	4	]
water	63:76	0:0	4	:
water	63:78	0:0	4	0
water	63:79	0:0	4	;
water	64:4	0:0	4	}
water	65:4	0:0	2	wi
op	65:6	0:0	2	.
water	65:7	0:0	2	window_shape
op	65:22	0:0	2	=
water	65:24	0:0	2	1
water	65:25	0:0	2	;
if	66:4	69:4	2	(wi . window_type [ 0 ] != EIGHT_SHORT_SEQUENCE)
cond	66:8	66:29	3	wi . window_type [ 0 ] != EIGHT_SHORT_SEQUENCE
water	66:8	0:0	4	wi
op	66:10	0:0	4	.
water	66:11	0:0	4	window_type
op	66:22	0:0	4	[
water	66:23	0:0	4	0
op	66:24	0:0	4	]
op	66:26	0:0	4	!=
water	66:29	0:0	4	EIGHT_SHORT_SEQUENCE
stmts	66:51	69:4	3	
water	66:51	0:0	4	{
water	67:8	0:0	4	wi
op	67:10	0:0	4	.
water	67:11	0:0	4	num_windows
op	67:23	0:0	4	=
water	67:25	0:0	4	1
water	67:26	0:0	4	;
water	68:8	0:0	4	wi
op	68:10	0:0	4	.
water	68:11	0:0	4	grouping
op	68:19	0:0	4	[
water	68:20	0:0	4	0
op	68:21	0:0	4	]
op	68:23	0:0	4	=
water	68:25	0:0	4	1
water	68:26	0:0	4	;
water	69:4	0:0	4	}
else	69:6	77:4	2
stmts	69:11	77:4	3	
water	69:11	0:0	4	{
decl	70:8	70:23	4	int	lastgrp
op	70:20	0:0	4	=
water	70:22	0:0	4	0
water	71:8	0:0	4	wi
op	71:10	0:0	4	.
water	71:11	0:0	4	num_windows
op	71:23	0:0	4	=
water	71:25	0:0	4	8
water	71:26	0:0	4	;
for	72:8	76:8	4	(i = 0 ;i < 8;i ++)
forinit	72:13	72:18	5	i = 0 ;
water	72:13	0:0	6	i
op	72:15	0:0	6	=
water	72:17	0:0	6	0
water	72:18	0:0	6	;
cond	72:20	72:24	5	i < 8
water	72:20	0:0	6	i
op	72:22	0:0	6	<
water	72:24	0:0	6	8
forexpr	72:27	72:28	5	i ++
water	72:27	0:0	6	i
op	72:28	0:0	6	++
stmts	72:32	76:8	5	
water	72:32	0:0	6	{
if	73:12	74:27	6	(! ( ( grouping >> i ) & 1 ))
cond	73:16	73:37	7	! ( ( grouping >> i ) & 1 )
op	73:16	0:0	8	!
water	73:17	0:0	8	(
water	73:18	0:0	8	(
water	73:19	0:0	8	grouping
op	73:28	0:0	8	>>
water	73:31	0:0	8	i
water	73:32	0:0	8	)
op	73:34	0:0	8	&
water	73:36	0:0	8	1
water	73:37	0:0	8	)
stmts	74:16	74:27	7	
water	74:16	0:0	8	lastgrp
op	74:24	0:0	8	=
water	74:26	0:0	8	i
water	74:27	0:0	8	;
water	75:12	0:0	6	wi
op	75:14	0:0	6	.
water	75:15	0:0	6	grouping
op	75:23	0:0	6	[
water	75:24	0:0	6	lastgrp
op	75:31	0:0	6	]
op	75:32	0:0	6	++
water	75:34	0:0	6	;
water	76:8	0:0	6	}
water	77:4	0:0	4	}
return	78:4	78:13	2	wi
water	78:11	0:0	3	wi
