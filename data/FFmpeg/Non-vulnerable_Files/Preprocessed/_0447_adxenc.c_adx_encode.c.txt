func	1:0	49:0	0	static void	adx_encode
params	1:22	0:0	1	
param	1:23	1:36	2	ADXContext *	c
param	1:38	1:50	2	uint8_t *	adx
param	1:52	1:70	2	const int16_t *	wav
param	2:23	2:44	2	ADXChannelState *	prev
param	2:46	2:58	2	int	channels
stmnts	0:0	48:23	1	
decl	4:4	4:20	2	PutBitContext	pb
decl	5:4	5:13	2	int	scale
decl	6:4	6:12	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	j
decl	7:4	7:21	2	int	s0
water	7:10	0:0	2	,
decl	7:4	7:21	2	int	s1
water	7:14	0:0	2	,
decl	7:4	7:21	2	int	s2
water	7:18	0:0	2	,
decl	7:4	7:21	2	int	d
decl	8:4	8:15	2	int	max
op	8:12	0:0	2	=
water	8:14	0:0	2	0
decl	9:4	9:15	2	int	min
op	9:12	0:0	2	=
water	9:14	0:0	2	0
water	10:4	0:0	2	s1
op	10:7	0:0	2	=
water	10:9	0:0	2	prev
op	10:13	0:0	2	->
water	10:15	0:0	2	s1
water	10:17	0:0	2	;
water	11:4	0:0	2	s2
op	11:7	0:0	2	=
water	11:9	0:0	2	prev
op	11:13	0:0	2	->
water	11:15	0:0	2	s2
water	11:17	0:0	2	;
for	12:4	21:4	2	(i = 0 , j = 0 ;j < 32;i += channels , j ++)
forinit	12:9	12:21	3	i = 0 , j = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	,
water	12:16	0:0	4	j
op	12:18	0:0	4	=
water	12:20	0:0	4	0
water	12:21	0:0	4	;
cond	12:23	12:27	3	j < 32
water	12:23	0:0	4	j
op	12:25	0:0	4	<
water	12:27	0:0	4	32
forexpr	12:31	12:47	3	i += channels , j ++
water	12:31	0:0	4	i
op	12:33	0:0	4	+=
water	12:36	0:0	4	channels
water	12:44	0:0	4	,
water	12:46	0:0	4	j
op	12:47	0:0	4	++
stmts	12:51	21:4	3	
water	12:51	0:0	4	{
water	13:8	0:0	4	s0
op	13:11	0:0	4	=
water	13:13	0:0	4	wav
op	13:16	0:0	4	[
water	13:17	0:0	4	i
op	13:18	0:0	4	]
water	13:19	0:0	4	;
water	14:8	0:0	4	d
op	14:10	0:0	4	=
water	14:12	0:0	4	(
water	14:13	0:0	4	(
water	14:14	0:0	4	s0
op	14:17	0:0	4	<<
water	14:20	0:0	4	COEFF_BITS
water	14:30	0:0	4	)
op	14:32	0:0	4	-
water	14:34	0:0	4	c
op	14:35	0:0	4	->
water	14:37	0:0	4	coeff
op	14:42	0:0	4	[
water	14:43	0:0	4	0
op	14:44	0:0	4	]
op	14:46	0:0	4	*
water	14:48	0:0	4	s1
op	14:51	0:0	4	-
water	14:53	0:0	4	c
op	14:54	0:0	4	->
water	14:56	0:0	4	coeff
op	14:61	0:0	4	[
water	14:62	0:0	4	1
op	14:63	0:0	4	]
op	14:65	0:0	4	*
water	14:67	0:0	4	s2
water	14:69	0:0	4	)
op	14:71	0:0	4	>>
water	14:74	0:0	4	COEFF_BITS
water	14:84	0:0	4	;
if	15:8	16:19	4	(max < d)
cond	15:12	15:18	5	max < d
water	15:12	0:0	6	max
op	15:16	0:0	6	<
water	15:18	0:0	6	d
stmts	16:12	16:19	5	
water	16:12	0:0	6	max
op	16:16	0:0	6	=
water	16:18	0:0	6	d
water	16:19	0:0	6	;
if	17:8	18:19	4	(min > d)
cond	17:12	17:18	5	min > d
water	17:12	0:0	6	min
op	17:16	0:0	6	>
water	17:18	0:0	6	d
stmts	18:12	18:19	5	
water	18:12	0:0	6	min
op	18:16	0:0	6	=
water	18:18	0:0	6	d
water	18:19	0:0	6	;
water	19:8	0:0	4	s2
op	19:11	0:0	4	=
water	19:13	0:0	4	s1
water	19:15	0:0	4	;
water	20:8	0:0	4	s1
op	20:11	0:0	4	=
water	20:13	0:0	4	s0
water	20:15	0:0	4	;
water	21:4	0:0	4	}
if	22:4	27:4	2	(max == 0 && min == 0)
cond	22:8	22:27	3	max == 0 && min == 0
water	22:8	0:0	4	max
op	22:12	0:0	4	==
water	22:15	0:0	4	0
op	22:17	0:0	4	&&
water	22:20	0:0	4	min
op	22:24	0:0	4	==
water	22:27	0:0	4	0
stmts	22:30	27:4	3	
water	22:30	0:0	4	{
water	23:8	0:0	4	prev
op	23:12	0:0	4	->
water	23:14	0:0	4	s1
op	23:17	0:0	4	=
water	23:19	0:0	4	s1
water	23:21	0:0	4	;
water	24:8	0:0	4	prev
op	24:12	0:0	4	->
water	24:14	0:0	4	s2
op	24:17	0:0	4	=
water	24:19	0:0	4	s2
water	24:21	0:0	4	;
call	25:8	25:33	4	memset
arg	25:15	25:18	5	adx
water	25:15	0:0	6	adx
arg	25:20	25:21	5	0
water	25:20	0:0	6	0
arg	25:23	25:33	5	BLOCK_SIZE
water	25:23	0:0	6	BLOCK_SIZE
water	25:34	0:0	4	;
return	26:8	26:14	4	
water	27:4	0:0	4	}
if	28:4	29:23	2	(max / 7 > - min / 8)
cond	28:8	28:25	3	max / 7 > - min / 8
water	28:8	0:0	4	max
op	28:12	0:0	4	/
water	28:14	0:0	4	7
op	28:16	0:0	4	>
op	28:18	0:0	4	-
water	28:19	0:0	4	min
op	28:23	0:0	4	/
water	28:25	0:0	4	8
stmts	29:8	29:23	3	
water	29:8	0:0	4	scale
op	29:14	0:0	4	=
water	29:16	0:0	4	max
op	29:20	0:0	4	/
water	29:22	0:0	4	7
water	29:23	0:0	4	;
else	30:4	31:24	2
stmts	31:8	31:24	3	
water	31:8	0:0	4	scale
op	31:14	0:0	4	=
op	31:16	0:0	4	-
water	31:17	0:0	4	min
op	31:21	0:0	4	/
water	31:23	0:0	4	8
water	31:24	0:0	4	;
if	32:4	33:17	2	(scale == 0)
cond	32:8	32:17	3	scale == 0
water	32:8	0:0	4	scale
op	32:14	0:0	4	==
water	32:17	0:0	4	0
stmts	33:8	33:17	3	
water	33:8	0:0	4	scale
op	33:14	0:0	4	=
water	33:16	0:0	4	1
water	33:17	0:0	4	;
call	34:4	34:22	2	AV_WB16
arg	34:12	34:15	3	adx
water	34:12	0:0	4	adx
arg	34:17	34:22	3	scale
water	34:17	0:0	4	scale
water	34:23	0:0	2	;
call	35:4	35:34	2	init_put_bits
arg	35:18	35:21	3	&pb
op	35:18	0:0	4	&
water	35:19	0:0	4	pb
arg	35:23	35:30	3	adx+2
water	35:23	0:0	4	adx
op	35:27	0:0	4	+
water	35:29	0:0	4	2
arg	35:32	35:34	3	16
water	35:32	0:0	4	16
water	35:35	0:0	2	;
water	36:4	0:0	2	s1
op	36:7	0:0	2	=
water	36:9	0:0	2	prev
op	36:13	0:0	2	->
water	36:15	0:0	2	s1
water	36:17	0:0	2	;
water	37:4	0:0	2	s2
op	37:7	0:0	2	=
water	37:9	0:0	2	prev
op	37:13	0:0	2	->
water	37:15	0:0	2	s2
water	37:17	0:0	2	;
for	38:4	45:4	2	(i = 0 , j = 0 ;j < 32;i += channels , j ++)
forinit	38:9	38:21	3	i = 0 , j = 0 ;
water	38:9	0:0	4	i
op	38:11	0:0	4	=
water	38:13	0:0	4	0
water	38:14	0:0	4	,
water	38:16	0:0	4	j
op	38:18	0:0	4	=
water	38:20	0:0	4	0
water	38:21	0:0	4	;
cond	38:23	38:27	3	j < 32
water	38:23	0:0	4	j
op	38:25	0:0	4	<
water	38:27	0:0	4	32
forexpr	38:31	38:47	3	i += channels , j ++
water	38:31	0:0	4	i
op	38:33	0:0	4	+=
water	38:36	0:0	4	channels
water	38:44	0:0	4	,
water	38:46	0:0	4	j
op	38:47	0:0	4	++
stmts	38:51	45:4	3	
water	38:51	0:0	4	{
water	39:8	0:0	4	d
op	39:10	0:0	4	=
water	39:12	0:0	4	(
water	39:13	0:0	4	(
water	39:14	0:0	4	wav
op	39:17	0:0	4	[
water	39:18	0:0	4	i
op	39:19	0:0	4	]
op	39:21	0:0	4	<<
water	39:24	0:0	4	COEFF_BITS
water	39:34	0:0	4	)
op	39:36	0:0	4	-
water	39:38	0:0	4	c
op	39:39	0:0	4	->
water	39:41	0:0	4	coeff
op	39:46	0:0	4	[
water	39:47	0:0	4	0
op	39:48	0:0	4	]
op	39:50	0:0	4	*
water	39:52	0:0	4	s1
op	39:55	0:0	4	-
water	39:57	0:0	4	c
op	39:58	0:0	4	->
water	39:60	0:0	4	coeff
op	39:65	0:0	4	[
water	39:66	0:0	4	1
op	39:67	0:0	4	]
op	39:69	0:0	4	*
water	39:71	0:0	4	s2
water	39:73	0:0	4	)
op	39:75	0:0	4	>>
water	39:78	0:0	4	COEFF_BITS
water	39:88	0:0	4	;
water	40:8	0:0	4	d
op	40:10	0:0	4	=
call	40:12	40:50	4	av_clip_intp2
arg	40:26	40:47	5	ROUNDED_DIV(d,scale)
call	40:26	40:46	6	ROUNDED_DIV
arg	40:38	40:39	7	d
water	40:38	0:0	8	d
arg	40:41	40:46	7	scale
water	40:41	0:0	8	scale
arg	40:49	40:50	5	3
water	40:49	0:0	6	3
water	40:51	0:0	4	;
call	41:8	41:27	4	put_sbits
arg	41:18	41:21	5	&pb
op	41:18	0:0	6	&
water	41:19	0:0	6	pb
arg	41:23	41:24	5	4
water	41:23	0:0	6	4
arg	41:26	41:27	5	d
water	41:26	0:0	6	d
water	41:28	0:0	4	;
water	42:8	0:0	4	s0
op	42:11	0:0	4	=
water	42:13	0:0	4	(
water	42:14	0:0	4	(
water	42:15	0:0	4	d
op	42:17	0:0	4	<<
water	42:20	0:0	4	COEFF_BITS
water	42:30	0:0	4	)
op	42:32	0:0	4	*
water	42:34	0:0	4	scale
op	42:40	0:0	4	+
water	42:42	0:0	4	c
op	42:43	0:0	4	->
water	42:45	0:0	4	coeff
op	42:50	0:0	4	[
water	42:51	0:0	4	0
op	42:52	0:0	4	]
op	42:54	0:0	4	*
water	42:56	0:0	4	s1
op	42:59	0:0	4	+
water	42:61	0:0	4	c
op	42:62	0:0	4	->
water	42:64	0:0	4	coeff
op	42:69	0:0	4	[
water	42:70	0:0	4	1
op	42:71	0:0	4	]
op	42:73	0:0	4	*
water	42:75	0:0	4	s2
water	42:77	0:0	4	)
op	42:79	0:0	4	>>
water	42:82	0:0	4	COEFF_BITS
water	42:92	0:0	4	;
water	43:8	0:0	4	s2
op	43:11	0:0	4	=
water	43:13	0:0	4	s1
water	43:15	0:0	4	;
water	44:8	0:0	4	s1
op	44:11	0:0	4	=
water	44:13	0:0	4	s0
water	44:15	0:0	4	;
water	45:4	0:0	4	}
water	46:4	0:0	2	prev
op	46:8	0:0	2	->
water	46:10	0:0	2	s1
op	46:13	0:0	2	=
water	46:15	0:0	2	s1
water	46:17	0:0	2	;
water	47:4	0:0	2	prev
op	47:8	0:0	2	->
water	47:10	0:0	2	s2
op	47:13	0:0	2	=
water	47:15	0:0	2	s2
water	47:17	0:0	2	;
call	48:4	48:22	2	flush_put_bits
arg	48:19	48:22	3	&pb
op	48:19	0:0	4	&
water	48:20	0:0	4	pb
water	48:23	0:0	2	;
