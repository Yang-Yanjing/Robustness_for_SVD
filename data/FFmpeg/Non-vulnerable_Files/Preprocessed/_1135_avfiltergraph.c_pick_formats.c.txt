func	1:0	48:0	0	static int	pick_formats
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterGraph *	graph
stmnts	0:0	47:12	1	
decl	3:4	3:17	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:17	2	int	j
water	3:12	0:0	2	,
decl	3:4	3:17	2	int	ret
decl	4:4	4:14	2	int	change
do	5:4	37:4	2	(change)
cond	37:11	37:11	3	change
water	37:11	0:0	4	change
stmts	5:6	37:4	3	
water	5:6	0:0	4	{
water	6:8	0:0	4	change
op	6:15	0:0	4	=
water	6:17	0:0	4	0
water	6:18	0:0	4	;
for	7:8	36:8	4	(i = 0 ;i < graph -> nb_filters;i ++)
forinit	7:13	7:18	5	i = 0 ;
water	7:13	0:0	6	i
op	7:15	0:0	6	=
water	7:17	0:0	6	0
water	7:18	0:0	6	;
cond	7:20	7:31	5	i < graph -> nb_filters
water	7:20	0:0	6	i
op	7:22	0:0	6	<
water	7:24	0:0	6	graph
op	7:29	0:0	6	->
water	7:31	0:0	6	nb_filters
forexpr	7:43	7:44	5	i ++
water	7:43	0:0	6	i
op	7:44	0:0	6	++
stmts	7:48	36:8	5	
water	7:48	0:0	6	{
decl	8:12	8:55	6	AVFilterContext	*filter
op	8:36	0:0	6	=
water	8:38	0:0	6	graph
op	8:43	0:0	6	->
water	8:45	0:0	6	filters
op	8:52	0:0	6	[
water	8:53	0:0	6	i
op	8:54	0:0	6	]
if	9:12	17:12	6	(filter -> nb_inputs)
cond	9:16	9:24	7	filter -> nb_inputs
water	9:16	0:0	8	filter
op	9:22	0:0	8	->
water	9:24	0:0	8	nb_inputs
stmts	9:34	17:12	7	
water	9:34	0:0	8	{
for	10:16	16:16	8	(j = 0 ;j < filter -> nb_inputs;j ++)
forinit	10:21	10:26	9	j = 0 ;
water	10:21	0:0	10	j
op	10:23	0:0	10	=
water	10:25	0:0	10	0
water	10:26	0:0	10	;
cond	10:28	10:40	9	j < filter -> nb_inputs
water	10:28	0:0	10	j
op	10:30	0:0	10	<
water	10:32	0:0	10	filter
op	10:38	0:0	10	->
water	10:40	0:0	10	nb_inputs
forexpr	10:51	10:52	9	j ++
water	10:51	0:0	10	j
op	10:52	0:0	10	++
stmts	10:55	16:16	9	
water	10:55	0:0	10	{
if	11:20	15:20	10	(filter -> inputs [ j ] -> in_formats && filter -> inputs [ j ] -> in_formats -> nb_formats == 1)
cond	11:23	11:101	11	filter -> inputs [ j ] -> in_formats && filter -> inputs [ j ] -> in_formats -> nb_formats == 1
water	11:23	0:0	12	filter
op	11:29	0:0	12	->
water	11:31	0:0	12	inputs
op	11:37	0:0	12	[
water	11:38	0:0	12	j
op	11:39	0:0	12	]
op	11:40	0:0	12	->
water	11:42	0:0	12	in_formats
op	11:53	0:0	12	&&
water	11:56	0:0	12	filter
op	11:62	0:0	12	->
water	11:64	0:0	12	inputs
op	11:70	0:0	12	[
water	11:71	0:0	12	j
op	11:72	0:0	12	]
op	11:73	0:0	12	->
water	11:75	0:0	12	in_formats
op	11:85	0:0	12	->
water	11:87	0:0	12	nb_formats
op	11:98	0:0	12	==
water	11:101	0:0	12	1
stmts	11:104	15:20	11	
water	11:104	0:0	12	{
if	12:24	13:38	12	(( ret =pick_format (filter -> inputs [ j ] ,NULL ) ) < 0)
cond	12:28	12:75	13	( ret =pick_format (filter -> inputs [ j ] ,NULL ) ) < 0
water	12:28	0:0	14	(
water	12:29	0:0	14	ret
op	12:33	0:0	14	=
call	12:35	12:70	14	pick_format
arg	12:47	12:64	15	filter->inputs[j]
water	12:47	0:0	16	filter
op	12:53	0:0	16	->
water	12:55	0:0	16	inputs
op	12:61	0:0	16	[
water	12:62	0:0	16	j
op	12:63	0:0	16	]
arg	12:66	12:70	15	NULL
water	12:66	0:0	16	NULL
water	12:71	0:0	14	)
op	12:73	0:0	14	<
water	12:75	0:0	14	0
stmts	13:28	13:38	13	
return	13:28	13:38	14	ret
water	13:35	0:0	15	ret
water	14:24	0:0	12	change
op	14:31	0:0	12	=
water	14:33	0:0	12	1
water	14:34	0:0	12	;
water	15:20	0:0	12	}
water	16:16	0:0	10	}
water	17:12	0:0	8	}
if	18:12	26:12	6	(filter -> nb_outputs)
cond	18:16	18:24	7	filter -> nb_outputs
water	18:16	0:0	8	filter
op	18:22	0:0	8	->
water	18:24	0:0	8	nb_outputs
stmts	18:35	26:12	7	
water	18:35	0:0	8	{
for	19:16	25:16	8	(j = 0 ;j < filter -> nb_outputs;j ++)
forinit	19:21	19:26	9	j = 0 ;
water	19:21	0:0	10	j
op	19:23	0:0	10	=
water	19:25	0:0	10	0
water	19:26	0:0	10	;
cond	19:28	19:40	9	j < filter -> nb_outputs
water	19:28	0:0	10	j
op	19:30	0:0	10	<
water	19:32	0:0	10	filter
op	19:38	0:0	10	->
water	19:40	0:0	10	nb_outputs
forexpr	19:52	19:53	9	j ++
water	19:52	0:0	10	j
op	19:53	0:0	10	++
stmts	19:56	25:16	9	
water	19:56	0:0	10	{
if	20:20	24:20	10	(filter -> outputs [ j ] -> in_formats && filter -> outputs [ j ] -> in_formats -> nb_formats == 1)
cond	20:23	20:103	11	filter -> outputs [ j ] -> in_formats && filter -> outputs [ j ] -> in_formats -> nb_formats == 1
water	20:23	0:0	12	filter
op	20:29	0:0	12	->
water	20:31	0:0	12	outputs
op	20:38	0:0	12	[
water	20:39	0:0	12	j
op	20:40	0:0	12	]
op	20:41	0:0	12	->
water	20:43	0:0	12	in_formats
op	20:54	0:0	12	&&
water	20:57	0:0	12	filter
op	20:63	0:0	12	->
water	20:65	0:0	12	outputs
op	20:72	0:0	12	[
water	20:73	0:0	12	j
op	20:74	0:0	12	]
op	20:75	0:0	12	->
water	20:77	0:0	12	in_formats
op	20:87	0:0	12	->
water	20:89	0:0	12	nb_formats
op	20:100	0:0	12	==
water	20:103	0:0	12	1
stmts	20:106	24:20	11	
water	20:106	0:0	12	{
if	21:24	22:38	12	(( ret =pick_format (filter -> outputs [ j ] ,NULL ) ) < 0)
cond	21:28	21:76	13	( ret =pick_format (filter -> outputs [ j ] ,NULL ) ) < 0
water	21:28	0:0	14	(
water	21:29	0:0	14	ret
op	21:33	0:0	14	=
call	21:35	21:71	14	pick_format
arg	21:47	21:65	15	filter->outputs[j]
water	21:47	0:0	16	filter
op	21:53	0:0	16	->
water	21:55	0:0	16	outputs
op	21:62	0:0	16	[
water	21:63	0:0	16	j
op	21:64	0:0	16	]
arg	21:67	21:71	15	NULL
water	21:67	0:0	16	NULL
water	21:72	0:0	14	)
op	21:74	0:0	14	<
water	21:76	0:0	14	0
stmts	22:28	22:38	13	
return	22:28	22:38	14	ret
water	22:35	0:0	15	ret
water	23:24	0:0	12	change
op	23:31	0:0	12	=
water	23:33	0:0	12	1
water	23:34	0:0	12	;
water	24:20	0:0	12	}
water	25:16	0:0	10	}
water	26:12	0:0	8	}
if	27:12	35:12	6	(filter -> nb_inputs && filter -> nb_outputs && filter -> inputs [ 0 ] -> format >= 0)
cond	27:16	27:86	7	filter -> nb_inputs && filter -> nb_outputs && filter -> inputs [ 0 ] -> format >= 0
water	27:16	0:0	8	filter
op	27:22	0:0	8	->
water	27:24	0:0	8	nb_inputs
op	27:34	0:0	8	&&
water	27:37	0:0	8	filter
op	27:43	0:0	8	->
water	27:45	0:0	8	nb_outputs
op	27:56	0:0	8	&&
water	27:59	0:0	8	filter
op	27:65	0:0	8	->
water	27:67	0:0	8	inputs
op	27:73	0:0	8	[
water	27:74	0:0	8	0
op	27:75	0:0	8	]
op	27:76	0:0	8	->
water	27:78	0:0	8	format
op	27:84	0:0	8	>=
water	27:86	0:0	8	0
stmts	27:89	35:12	7	
water	27:89	0:0	8	{
for	28:16	34:16	8	(j = 0 ;j < filter -> nb_outputs;j ++)
forinit	28:21	28:26	9	j = 0 ;
water	28:21	0:0	10	j
op	28:23	0:0	10	=
water	28:25	0:0	10	0
water	28:26	0:0	10	;
cond	28:28	28:40	9	j < filter -> nb_outputs
water	28:28	0:0	10	j
op	28:30	0:0	10	<
water	28:32	0:0	10	filter
op	28:38	0:0	10	->
water	28:40	0:0	10	nb_outputs
forexpr	28:52	28:53	9	j ++
water	28:52	0:0	10	j
op	28:53	0:0	10	++
stmts	28:57	34:16	9	
water	28:57	0:0	10	{
if	29:20	33:20	10	(filter -> outputs [ j ] -> format < 0)
cond	29:23	29:50	11	filter -> outputs [ j ] -> format < 0
water	29:23	0:0	12	filter
op	29:29	0:0	12	->
water	29:31	0:0	12	outputs
op	29:38	0:0	12	[
water	29:39	0:0	12	j
op	29:40	0:0	12	]
op	29:41	0:0	12	->
water	29:43	0:0	12	format
op	29:49	0:0	12	<
water	29:50	0:0	12	0
stmts	29:53	33:20	11	
water	29:53	0:0	12	{
if	30:24	31:38	12	(( ret =pick_format (filter -> outputs [ j ] ,filter -> inputs [ 0 ] ) ) < 0)
cond	30:28	30:89	13	( ret =pick_format (filter -> outputs [ j ] ,filter -> inputs [ 0 ] ) ) < 0
water	30:28	0:0	14	(
water	30:29	0:0	14	ret
op	30:33	0:0	14	=
call	30:35	30:84	14	pick_format
arg	30:47	30:65	15	filter->outputs[j]
water	30:47	0:0	16	filter
op	30:53	0:0	16	->
water	30:55	0:0	16	outputs
op	30:62	0:0	16	[
water	30:63	0:0	16	j
op	30:64	0:0	16	]
arg	30:67	30:84	15	filter->inputs[0]
water	30:67	0:0	16	filter
op	30:73	0:0	16	->
water	30:75	0:0	16	inputs
op	30:81	0:0	16	[
water	30:82	0:0	16	0
op	30:83	0:0	16	]
water	30:85	0:0	14	)
op	30:87	0:0	14	<
water	30:89	0:0	14	0
stmts	31:28	31:38	13	
return	31:28	31:38	14	ret
water	31:35	0:0	15	ret
water	32:24	0:0	12	change
op	32:31	0:0	12	=
water	32:33	0:0	12	1
water	32:34	0:0	12	;
water	33:20	0:0	12	}
water	34:16	0:0	10	}
water	35:12	0:0	8	}
water	36:8	0:0	6	}
water	37:4	0:0	4	}
water	37:18	0:0	2	;
for	38:4	46:4	2	(i = 0 ;i < graph -> nb_filters;i ++)
forinit	38:9	38:14	3	i = 0 ;
water	38:9	0:0	4	i
op	38:11	0:0	4	=
water	38:13	0:0	4	0
water	38:14	0:0	4	;
cond	38:16	38:27	3	i < graph -> nb_filters
water	38:16	0:0	4	i
op	38:18	0:0	4	<
water	38:20	0:0	4	graph
op	38:25	0:0	4	->
water	38:27	0:0	4	nb_filters
forexpr	38:39	38:40	3	i ++
water	38:39	0:0	4	i
op	38:40	0:0	4	++
stmts	38:44	46:4	3	
water	38:44	0:0	4	{
decl	39:8	39:51	4	AVFilterContext	*filter
op	39:32	0:0	4	=
water	39:34	0:0	4	graph
op	39:39	0:0	4	->
water	39:41	0:0	4	filters
op	39:48	0:0	4	[
water	39:49	0:0	4	i
op	39:50	0:0	4	]
for	40:8	42:26	4	(j = 0 ;j < filter -> nb_inputs;j ++)
forinit	40:13	40:18	5	j = 0 ;
water	40:13	0:0	6	j
op	40:15	0:0	6	=
water	40:17	0:0	6	0
water	40:18	0:0	6	;
cond	40:20	40:32	5	j < filter -> nb_inputs
water	40:20	0:0	6	j
op	40:22	0:0	6	<
water	40:24	0:0	6	filter
op	40:30	0:0	6	->
water	40:32	0:0	6	nb_inputs
forexpr	40:43	40:44	5	j ++
water	40:43	0:0	6	j
op	40:44	0:0	6	++
stmts	41:12	42:26	5	
if	41:12	42:26	6	(( ret =pick_format (filter -> inputs [ j ] ,NULL ) ) < 0)
cond	41:16	41:63	7	( ret =pick_format (filter -> inputs [ j ] ,NULL ) ) < 0
water	41:16	0:0	8	(
water	41:17	0:0	8	ret
op	41:21	0:0	8	=
call	41:23	41:58	8	pick_format
arg	41:35	41:52	9	filter->inputs[j]
water	41:35	0:0	10	filter
op	41:41	0:0	10	->
water	41:43	0:0	10	inputs
op	41:49	0:0	10	[
water	41:50	0:0	10	j
op	41:51	0:0	10	]
arg	41:54	41:58	9	NULL
water	41:54	0:0	10	NULL
water	41:59	0:0	8	)
op	41:61	0:0	8	<
water	41:63	0:0	8	0
stmts	42:16	42:26	7	
return	42:16	42:26	8	ret
water	42:23	0:0	9	ret
for	43:8	45:26	4	(j = 0 ;j < filter -> nb_outputs;j ++)
forinit	43:13	43:18	5	j = 0 ;
water	43:13	0:0	6	j
op	43:15	0:0	6	=
water	43:17	0:0	6	0
water	43:18	0:0	6	;
cond	43:20	43:32	5	j < filter -> nb_outputs
water	43:20	0:0	6	j
op	43:22	0:0	6	<
water	43:24	0:0	6	filter
op	43:30	0:0	6	->
water	43:32	0:0	6	nb_outputs
forexpr	43:44	43:45	5	j ++
water	43:44	0:0	6	j
op	43:45	0:0	6	++
stmts	44:12	45:26	5	
if	44:12	45:26	6	(( ret =pick_format (filter -> outputs [ j ] ,NULL ) ) < 0)
cond	44:16	44:64	7	( ret =pick_format (filter -> outputs [ j ] ,NULL ) ) < 0
water	44:16	0:0	8	(
water	44:17	0:0	8	ret
op	44:21	0:0	8	=
call	44:23	44:59	8	pick_format
arg	44:35	44:53	9	filter->outputs[j]
water	44:35	0:0	10	filter
op	44:41	0:0	10	->
water	44:43	0:0	10	outputs
op	44:50	0:0	10	[
water	44:51	0:0	10	j
op	44:52	0:0	10	]
arg	44:55	44:59	9	NULL
water	44:55	0:0	10	NULL
water	44:60	0:0	8	)
op	44:62	0:0	8	<
water	44:64	0:0	8	0
stmts	45:16	45:26	7	
return	45:16	45:26	8	ret
water	45:23	0:0	9	ret
water	46:4	0:0	4	}
return	47:4	47:12	2	0
water	47:11	0:0	3	0
