func	1:0	46:0	0	static int	pulse_control_message
params	1:32	0:0	1	
param	1:33	1:51	2	AVFormatContext *	h
param	1:53	1:61	2	int	type
param	2:33	2:43	2	void *	data
param	2:45	2:61	2	size_t	data_size
stmnts	0:0	45:26	1	
decl	4:4	4:31	2	PulseData	*s
op	4:17	0:0	2	=
water	4:19	0:0	2	h
op	4:20	0:0	2	->
water	4:22	0:0	2	priv_data
decl	5:4	5:11	2	int	ret
switch	6:4	44:4	2	(type)
cond	6:11	6:11	3	type
water	6:11	0:0	4	type
stmts	6:17	44:4	3	
water	6:17	0:0	4	{
label	7:4	7:28	4	case AV_APP_TO_DEV_PAUSE :
return	8:8	8:36	4	pulse_set_pause(s,1)
call	8:15	8:35	5	pulse_set_pause
arg	8:31	8:32	6	s
water	8:31	0:0	7	s
arg	8:34	8:35	6	1
water	8:34	0:0	7	1
label	9:4	9:27	4	case AV_APP_TO_DEV_PLAY :
return	10:8	10:36	4	pulse_set_pause(s,0)
call	10:15	10:35	5	pulse_set_pause
arg	10:31	10:32	6	s
water	10:31	0:0	7	s
arg	10:34	10:35	6	0
water	10:34	0:0	7	0
label	11:4	11:35	4	case AV_APP_TO_DEV_TOGGLE_PAUSE :
return	12:8	12:66	4	pulse_set_pause(s,!pa_stream_is_corked(s->stream))
call	12:15	12:65	5	pulse_set_pause
arg	12:31	12:32	6	s
water	12:31	0:0	7	s
arg	12:34	12:65	6	!pa_stream_is_corked(s->stream)
op	12:34	0:0	7	!
call	12:35	12:64	7	pa_stream_is_corked
arg	12:55	12:64	8	s->stream
water	12:55	0:0	9	s
op	12:56	0:0	9	->
water	12:58	0:0	9	stream
label	13:4	13:27	4	case AV_APP_TO_DEV_MUTE :
if	14:8	17:8	4	(! s -> mute)
cond	14:12	14:16	5	! s -> mute
op	14:12	0:0	6	!
water	14:13	0:0	6	s
op	14:14	0:0	6	->
water	14:16	0:0	6	mute
stmts	14:22	17:8	5	
water	14:22	0:0	6	{
water	15:12	0:0	6	s
op	15:13	0:0	6	->
water	15:15	0:0	6	mute
op	15:20	0:0	6	=
water	15:22	0:0	6	1
water	15:23	0:0	6	;
return	16:12	16:36	6	pulse_set_mute(s)
call	16:19	16:35	7	pulse_set_mute
arg	16:34	16:35	8	s
water	16:34	0:0	9	s
water	17:8	0:0	6	}
return	18:8	18:16	4	0
water	18:15	0:0	5	0
label	19:4	19:29	4	case AV_APP_TO_DEV_UNMUTE :
if	20:8	23:8	4	(s -> mute)
cond	20:12	20:15	5	s -> mute
water	20:12	0:0	6	s
op	20:13	0:0	6	->
water	20:15	0:0	6	mute
stmts	20:21	23:8	5	
water	20:21	0:0	6	{
water	21:12	0:0	6	s
op	21:13	0:0	6	->
water	21:15	0:0	6	mute
op	21:20	0:0	6	=
water	21:22	0:0	6	0
water	21:23	0:0	6	;
return	22:12	22:36	6	pulse_set_mute(s)
call	22:19	22:35	7	pulse_set_mute
arg	22:34	22:35	8	s
water	22:34	0:0	9	s
water	23:8	0:0	6	}
return	24:8	24:16	4	0
water	24:15	0:0	5	0
label	25:4	25:34	4	case AV_APP_TO_DEV_TOGGLE_MUTE :
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	mute
op	26:16	0:0	4	=
op	26:18	0:0	4	!
water	26:19	0:0	4	s
op	26:20	0:0	4	->
water	26:22	0:0	4	mute
water	26:26	0:0	4	;
return	27:8	27:32	4	pulse_set_mute(s)
call	27:15	27:31	5	pulse_set_mute
arg	27:30	27:31	6	s
water	27:30	0:0	7	s
label	28:4	28:33	4	case AV_APP_TO_DEV_SET_VOLUME :
return	29:8	29:51	4	pulse_set_volume(s,*(double*)data)
call	29:15	29:50	5	pulse_set_volume
arg	29:32	29:33	6	s
water	29:32	0:0	7	s
arg	29:35	29:50	6	*(double*)data
op	29:35	0:0	7	*
water	29:36	0:0	7	(
water	29:37	0:0	7	double
op	29:44	0:0	7	*
water	29:45	0:0	7	)
water	29:46	0:0	7	data
label	30:4	30:33	4	case AV_APP_TO_DEV_GET_VOLUME :
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	last_volume
op	31:23	0:0	4	=
water	31:25	0:0	4	PA_VOLUME_INVALID
water	31:42	0:0	4	;
call	32:8	32:45	4	pa_threaded_mainloop_lock
arg	32:34	32:45	5	s->mainloop
water	32:34	0:0	6	s
op	32:35	0:0	6	->
water	32:37	0:0	6	mainloop
water	32:46	0:0	4	;
water	33:8	0:0	4	ret
op	33:12	0:0	4	=
call	33:14	33:44	4	pulse_update_sink_input_info
arg	33:43	33:44	5	h
water	33:43	0:0	6	h
water	33:45	0:0	4	;
call	34:8	34:47	4	pa_threaded_mainloop_unlock
arg	34:36	34:47	5	s->mainloop
water	34:36	0:0	6	s
op	34:37	0:0	6	->
water	34:39	0:0	6	mainloop
water	34:48	0:0	4	;
return	35:8	35:18	4	ret
water	35:15	0:0	5	ret
label	36:4	36:31	4	case AV_APP_TO_DEV_GET_MUTE :
water	37:8	0:0	4	s
op	37:9	0:0	4	->
water	37:11	0:0	4	mute
op	37:16	0:0	4	=
op	37:18	0:0	4	-
water	37:19	0:0	4	1
water	37:20	0:0	4	;
call	38:8	38:45	4	pa_threaded_mainloop_lock
arg	38:34	38:45	5	s->mainloop
water	38:34	0:0	6	s
op	38:35	0:0	6	->
water	38:37	0:0	6	mainloop
water	38:46	0:0	4	;
water	39:8	0:0	4	ret
op	39:12	0:0	4	=
call	39:14	39:44	4	pulse_update_sink_input_info
arg	39:43	39:44	5	h
water	39:43	0:0	6	h
water	39:45	0:0	4	;
call	40:8	40:47	4	pa_threaded_mainloop_unlock
arg	40:36	40:47	5	s->mainloop
water	40:36	0:0	6	s
op	40:37	0:0	6	->
water	40:39	0:0	6	mainloop
water	40:48	0:0	4	;
return	41:8	41:18	4	ret
water	41:15	0:0	5	ret
label	42:4	42:11	4	default :
break	43:8	43:13	4	
water	44:4	0:0	4	}
return	45:4	45:26	2	AVERROR(ENOSYS)
call	45:11	45:25	3	AVERROR
arg	45:19	45:25	4	ENOSYS
water	45:19	0:0	5	ENOSYS
