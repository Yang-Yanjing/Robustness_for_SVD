func	1:0	61:0	0	static int	compand_delay
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
param	1:47	1:61	2	AVFrame *	frame
stmnts	0:0	60:12	1	
decl	3:4	3:36	2	CompandContext	*s
op	3:25	0:0	2	=
water	3:27	0:0	2	ctx
op	3:30	0:0	2	->
water	3:32	0:0	2	priv
decl	4:4	4:41	2	AVFilterLink	*inlink
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	inputs
op	4:38	0:0	2	[
water	4:39	0:0	2	0
op	4:40	0:0	2	]
decl	5:4	5:41	2	const int	channels
op	5:23	0:0	2	=
water	5:25	0:0	2	inlink
op	5:31	0:0	2	->
water	5:33	0:0	2	channels
decl	6:4	6:44	2	const int	nb_samples
op	6:25	0:0	2	=
water	6:27	0:0	2	frame
op	6:32	0:0	2	->
water	6:34	0:0	2	nb_samples
decl	7:4	7:60	2	int	chan
water	7:12	0:0	2	,
decl	7:4	7:60	2	int	i
water	7:15	0:0	2	,
decl	7:4	7:60	2	int	av_uninit
water	7:26	0:0	2	(
water	7:27	0:0	2	dindex
water	7:33	0:0	2	)
water	7:34	0:0	2	,
decl	7:4	7:60	2	int	oindex
water	7:42	0:0	2	,
decl	7:4	7:60	2	int	av_uninit
water	7:53	0:0	2	(
water	7:54	0:0	2	count
water	7:59	0:0	2	)
decl	8:4	8:31	2	AVFrame	*out_frame
op	8:25	0:0	2	=
water	8:27	0:0	2	NULL
decl	9:4	9:11	2	int	err
if	10:4	12:4	2	(s -> pts == AV_NOPTS_VALUE)
cond	10:8	10:18	3	s -> pts == AV_NOPTS_VALUE
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	pts
op	10:15	0:0	4	==
water	10:18	0:0	4	AV_NOPTS_VALUE
stmts	10:34	12:4	3	
water	10:34	0:0	4	{
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	pts
op	11:15	0:0	4	=
water	11:17	0:0	4	(
water	11:18	0:0	4	frame
op	11:23	0:0	4	->
water	11:25	0:0	4	pts
op	11:29	0:0	4	==
water	11:32	0:0	4	AV_NOPTS_VALUE
water	11:46	0:0	4	)
water	11:48	0:0	4	?
water	11:50	0:0	4	0
water	11:52	0:0	4	:
water	11:54	0:0	4	frame
op	11:59	0:0	4	->
water	11:61	0:0	4	pts
water	11:64	0:0	4	;
water	12:4	0:0	4	}
call	13:4	13:27	2	av_assert1
arg	13:15	13:27	3	channels>0
water	13:15	0:0	4	channels
op	13:24	0:0	4	>
water	13:26	0:0	4	0
water	13:28	0:0	2	;
for	14:4	52:4	2	(chan = 0 ;chan < channels;chan ++)
forinit	14:9	14:17	3	chan = 0 ;
water	14:9	0:0	4	chan
op	14:14	0:0	4	=
water	14:16	0:0	4	0
water	14:17	0:0	4	;
cond	14:19	14:26	3	chan < channels
water	14:19	0:0	4	chan
op	14:24	0:0	4	<
water	14:26	0:0	4	channels
forexpr	14:36	14:40	3	chan ++
water	14:36	0:0	4	chan
op	14:40	0:0	4	++
stmts	14:44	52:4	3	
water	14:44	0:0	4	{
decl	15:8	15:45	4	AVFrame	*delay_frame
op	15:29	0:0	4	=
water	15:31	0:0	4	s
op	15:32	0:0	4	->
water	15:34	0:0	4	delay_frame
decl	16:8	16:67	4	const double	*src
op	16:29	0:0	4	=
water	16:31	0:0	4	(
water	16:32	0:0	4	double
op	16:39	0:0	4	*
water	16:40	0:0	4	)
water	16:41	0:0	4	frame
op	16:46	0:0	4	->
water	16:48	0:0	4	extended_data
op	16:61	0:0	4	[
water	16:62	0:0	4	chan
op	16:66	0:0	4	]
decl	17:8	17:73	4	double	*dbuf
op	17:29	0:0	4	=
water	17:31	0:0	4	(
water	17:32	0:0	4	double
op	17:39	0:0	4	*
water	17:40	0:0	4	)
water	17:41	0:0	4	delay_frame
op	17:52	0:0	4	->
water	17:54	0:0	4	extended_data
op	17:67	0:0	4	[
water	17:68	0:0	4	chan
op	17:72	0:0	4	]
decl	18:8	18:49	4	ChanParam	*cp
op	18:29	0:0	4	=
op	18:31	0:0	4	&
water	18:32	0:0	4	s
op	18:33	0:0	4	->
water	18:35	0:0	4	channels
op	18:43	0:0	4	[
water	18:44	0:0	4	chan
op	18:48	0:0	4	]
decl	19:8	19:19	4	double	*dst
water	20:8	0:0	4	count
op	20:15	0:0	4	=
water	20:17	0:0	4	s
op	20:18	0:0	4	->
water	20:20	0:0	4	delay_count
water	20:31	0:0	4	;
water	21:8	0:0	4	dindex
op	21:15	0:0	4	=
water	21:17	0:0	4	s
op	21:18	0:0	4	->
water	21:20	0:0	4	delay_index
water	21:31	0:0	4	;
for	22:8	51:8	4	(i = 0 , oindex = 0 ;i < nb_samples;i ++)
forinit	22:13	22:30	5	i = 0 , oindex = 0 ;
water	22:13	0:0	6	i
op	22:15	0:0	6	=
water	22:17	0:0	6	0
water	22:18	0:0	6	,
water	22:20	0:0	6	oindex
op	22:27	0:0	6	=
water	22:29	0:0	6	0
water	22:30	0:0	6	;
cond	22:32	22:36	5	i < nb_samples
water	22:32	0:0	6	i
op	22:34	0:0	6	<
water	22:36	0:0	6	nb_samples
forexpr	22:48	22:49	5	i ++
water	22:48	0:0	6	i
op	22:49	0:0	6	++
stmts	22:53	51:8	5	
water	22:53	0:0	6	{
decl	23:12	23:36	6	const double	in
op	23:28	0:0	6	=
water	23:30	0:0	6	src
op	23:33	0:0	6	[
water	23:34	0:0	6	i
op	23:35	0:0	6	]
call	24:12	24:38	6	update_volume
arg	24:26	24:28	7	cp
water	24:26	0:0	8	cp
arg	24:30	24:38	7	fabs(in)
call	24:30	24:37	8	fabs
arg	24:35	24:37	9	in
water	24:35	0:0	10	in
water	24:39	0:0	6	;
if	25:12	46:12	6	(count >= s -> delay_samples)
cond	25:16	25:28	7	count >= s -> delay_samples
water	25:16	0:0	8	count
op	25:22	0:0	8	>=
water	25:25	0:0	8	s
op	25:26	0:0	8	->
water	25:28	0:0	8	delay_samples
stmts	25:43	46:12	7	
water	25:43	0:0	8	{
if	26:16	42:16	8	(! out_frame)
cond	26:20	26:21	9	! out_frame
op	26:20	0:0	10	!
water	26:21	0:0	10	out_frame
stmts	26:32	42:16	9	
water	26:32	0:0	10	{
water	27:20	0:0	10	out_frame
op	27:30	0:0	10	=
call	27:32	27:74	10	ff_get_audio_buffer
arg	27:52	27:58	11	inlink
water	27:52	0:0	12	inlink
arg	27:60	27:74	11	nb_samples-i
water	27:60	0:0	12	nb_samples
op	27:71	0:0	12	-
water	27:73	0:0	12	i
water	27:75	0:0	10	;
if	28:20	31:20	10	(! out_frame)
cond	28:24	28:25	11	! out_frame
op	28:24	0:0	12	!
water	28:25	0:0	12	out_frame
stmts	28:36	31:20	11	
water	28:36	0:0	12	{
call	29:24	29:44	12	av_frame_free
arg	29:38	29:44	13	&frame
op	29:38	0:0	14	&
water	29:39	0:0	14	frame
water	29:45	0:0	12	;
return	30:24	30:46	12	AVERROR(ENOMEM)
call	30:31	30:45	13	AVERROR
arg	30:39	30:45	14	ENOMEM
water	30:39	0:0	15	ENOMEM
water	31:20	0:0	12	}
water	32:20	0:0	10	err
op	32:24	0:0	10	=
call	32:26	32:62	10	av_frame_copy_props
arg	32:46	32:55	11	out_frame
water	32:46	0:0	12	out_frame
arg	32:57	32:62	11	frame
water	32:57	0:0	12	frame
water	32:63	0:0	10	;
if	33:20	37:20	10	(err < 0)
cond	33:24	33:30	11	err < 0
water	33:24	0:0	12	err
op	33:28	0:0	12	<
water	33:30	0:0	12	0
stmts	33:33	37:20	11	
water	33:33	0:0	12	{
call	34:24	34:48	12	av_frame_free
arg	34:38	34:48	13	&out_frame
op	34:38	0:0	14	&
water	34:39	0:0	14	out_frame
water	34:49	0:0	12	;
call	35:24	35:44	12	av_frame_free
arg	35:38	35:44	13	&frame
op	35:38	0:0	14	&
water	35:39	0:0	14	frame
water	35:45	0:0	12	;
return	36:24	36:34	12	err
water	36:31	0:0	13	err
water	37:20	0:0	12	}
water	38:20	0:0	10	out_frame
op	38:29	0:0	10	->
water	38:31	0:0	10	pts
op	38:35	0:0	10	=
water	38:37	0:0	10	s
op	38:38	0:0	10	->
water	38:40	0:0	10	pts
water	38:43	0:0	10	;
water	39:20	0:0	10	s
op	39:21	0:0	10	->
water	39:23	0:0	10	pts
op	39:27	0:0	10	+=
call	39:30	41:41	10	av_rescale_q
arg	39:43	39:57	11	nb_samples-i
water	39:43	0:0	12	nb_samples
op	39:54	0:0	12	-
water	39:56	0:0	12	i
arg	40:24	40:62	11	(AVRational){1,inlink->sample_rate}
water	40:24	0:0	12	(
water	40:25	0:0	12	AVRational
water	40:35	0:0	12	)
water	40:36	0:0	12	{
water	40:38	0:0	12	1
water	40:39	0:0	12	,
water	40:41	0:0	12	inlink
op	40:47	0:0	12	->
water	40:49	0:0	12	sample_rate
water	40:61	0:0	12	}
arg	41:24	41:41	11	inlink->time_base
water	41:24	0:0	12	inlink
op	41:30	0:0	12	->
water	41:32	0:0	12	time_base
water	41:42	0:0	10	;
water	42:16	0:0	10	}
water	43:16	0:0	8	dst
op	43:20	0:0	8	=
water	43:22	0:0	8	(
water	43:23	0:0	8	double
op	43:30	0:0	8	*
water	43:31	0:0	8	)
water	43:32	0:0	8	out_frame
op	43:41	0:0	8	->
water	43:43	0:0	8	extended_data
op	43:56	0:0	8	[
water	43:57	0:0	8	chan
op	43:61	0:0	8	]
water	43:62	0:0	8	;
water	44:16	0:0	8	dst
op	44:19	0:0	8	[
water	44:20	0:0	8	oindex
op	44:26	0:0	8	++
op	44:28	0:0	8	]
op	44:30	0:0	8	=
call	44:32	45:56	8	av_clipd
arg	44:41	45:49	9	dbuf[dindex]*get_volume(s,cp->volume)
water	44:41	0:0	10	dbuf
op	44:45	0:0	10	[
water	44:46	0:0	10	dindex
op	44:52	0:0	10	]
call	44:54	45:48	10	*get_volume
arg	45:35	45:36	11	s
water	45:35	0:0	12	s
arg	45:38	45:48	11	cp->volume
water	45:38	0:0	12	cp
op	45:40	0:0	12	->
water	45:42	0:0	12	volume
arg	45:51	45:53	9	-1
op	45:51	0:0	10	-
water	45:52	0:0	10	1
arg	45:55	45:56	9	1
water	45:55	0:0	10	1
water	45:57	0:0	8	;
water	46:12	0:0	8	}
else	46:14	48:12	6
stmts	46:19	48:12	7	
water	46:19	0:0	8	{
water	47:16	0:0	8	count
op	47:21	0:0	8	++
water	47:23	0:0	8	;
water	48:12	0:0	8	}
water	49:12	0:0	6	dbuf
op	49:16	0:0	6	[
water	49:17	0:0	6	dindex
op	49:23	0:0	6	]
op	49:25	0:0	6	=
water	49:27	0:0	6	in
water	49:29	0:0	6	;
water	50:12	0:0	6	dindex
op	50:19	0:0	6	=
call	50:21	50:53	6	MOD
arg	50:25	50:35	7	dindex+1
water	50:25	0:0	8	dindex
op	50:32	0:0	8	+
water	50:34	0:0	8	1
arg	50:37	50:53	7	s->delay_samples
water	50:37	0:0	8	s
op	50:38	0:0	8	->
water	50:40	0:0	8	delay_samples
water	50:54	0:0	6	;
water	51:8	0:0	6	}
water	52:4	0:0	4	}
water	53:4	0:0	2	s
op	53:5	0:0	2	->
water	53:7	0:0	2	delay_count
op	53:19	0:0	2	=
water	53:21	0:0	2	count
water	53:26	0:0	2	;
water	54:4	0:0	2	s
op	54:5	0:0	2	->
water	54:7	0:0	2	delay_index
op	54:19	0:0	2	=
water	54:21	0:0	2	dindex
water	54:27	0:0	2	;
call	55:4	55:24	2	av_frame_free
arg	55:18	55:24	3	&frame
op	55:18	0:0	4	&
water	55:19	0:0	4	frame
water	55:25	0:0	2	;
if	56:4	59:4	2	(out_frame)
cond	56:8	56:8	3	out_frame
water	56:8	0:0	4	out_frame
stmts	56:19	59:4	3	
water	56:19	0:0	4	{
water	57:8	0:0	4	err
op	57:12	0:0	4	=
call	57:14	57:56	4	ff_filter_frame
arg	57:30	57:45	5	ctx->outputs[0]
water	57:30	0:0	6	ctx
op	57:33	0:0	6	->
water	57:35	0:0	6	outputs
op	57:42	0:0	6	[
water	57:43	0:0	6	0
op	57:44	0:0	6	]
arg	57:47	57:56	5	out_frame
water	57:47	0:0	6	out_frame
water	57:57	0:0	4	;
return	58:8	58:18	4	err
water	58:15	0:0	5	err
water	59:4	0:0	4	}
return	60:4	60:12	2	0
water	60:11	0:0	3	0
