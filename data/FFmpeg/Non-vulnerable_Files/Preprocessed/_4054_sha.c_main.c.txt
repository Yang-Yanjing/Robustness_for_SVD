func	1:0	45:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	0:0	44:12	1	
decl	3:4	3:15	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:15	2	int	j
water	3:12	0:0	2	,
decl	3:4	3:15	2	int	k
decl	4:4	4:13	2	AVSHA	ctx
decl	5:4	5:28	2	unsigned char	digest[32]
water	6:4	0:0	2	static
water	6:11	0:0	2	const
water	6:17	0:0	2	int
water	6:21	0:0	2	lengths
op	6:28	0:0	2	[
water	6:29	0:0	2	3
op	6:30	0:0	2	]
op	6:32	0:0	2	=
water	6:34	0:0	2	{
water	6:36	0:0	2	160
water	6:39	0:0	2	,
water	6:41	0:0	2	224
water	6:44	0:0	2	,
water	6:46	0:0	2	256
water	6:50	0:0	2	}
water	6:51	0:0	2	;
for	7:4	43:4	2	(j = 0 ;j < 3;j ++)
forinit	7:9	7:14	3	j = 0 ;
water	7:9	0:0	4	j
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:20	3	j < 3
water	7:16	0:0	4	j
op	7:18	0:0	4	<
water	7:20	0:0	4	3
forexpr	7:23	7:24	3	j ++
water	7:23	0:0	4	j
op	7:24	0:0	4	++
stmts	7:28	43:4	3	
water	7:28	0:0	4	{
call	8:8	8:45	4	printf
arg	8:15	8:33	5	"Testing SHA-%d\n"
water	8:15	0:0	6	"Testing SHA-%d\n"
arg	8:35	8:45	5	lengths[j]
water	8:35	0:0	6	lengths
op	8:42	0:0	6	[
water	8:43	0:0	6	j
op	8:44	0:0	6	]
water	8:46	0:0	4	;
for	9:8	22:8	4	(k = 0 ;k < 3;k ++)
forinit	9:13	9:18	5	k = 0 ;
water	9:13	0:0	6	k
op	9:15	0:0	6	=
water	9:17	0:0	6	0
water	9:18	0:0	6	;
cond	9:20	9:24	5	k < 3
water	9:20	0:0	6	k
op	9:22	0:0	6	<
water	9:24	0:0	6	3
forexpr	9:27	9:28	5	k ++
water	9:27	0:0	6	k
op	9:28	0:0	6	++
stmts	9:32	22:8	5	
water	9:32	0:0	6	{
call	10:12	10:40	6	av_sha_init
arg	10:24	10:28	7	&ctx
op	10:24	0:0	8	&
water	10:25	0:0	8	ctx
arg	10:30	10:40	7	lengths[j]
water	10:30	0:0	8	lengths
op	10:37	0:0	8	[
water	10:38	0:0	8	j
op	10:39	0:0	8	]
water	10:41	0:0	6	;
if	11:12	12:45	6	(k == 0)
cond	11:16	11:21	7	k == 0
water	11:16	0:0	8	k
op	11:18	0:0	8	==
water	11:21	0:0	8	0
stmts	12:16	12:45	7	
call	12:16	12:44	8	av_sha_update
arg	12:30	12:34	9	&ctx
op	12:30	0:0	10	&
water	12:31	0:0	10	ctx
arg	12:36	12:41	9	"abc"
water	12:36	0:0	10	"abc"
arg	12:43	12:44	9	3
water	12:43	0:0	10	3
water	12:45	0:0	8	;
else	13:12	14:99	6
stmts	13:17	14:99	7	
if	13:17	14:99	8	(k == 1)
cond	13:21	13:26	9	k == 1
water	13:21	0:0	10	k
op	13:23	0:0	10	==
water	13:26	0:0	10	1
stmts	14:16	14:99	9	
call	14:16	14:98	10	av_sha_update
arg	14:30	14:34	11	&ctx
op	14:30	0:0	12	&
water	14:31	0:0	12	ctx
arg	14:36	14:94	11	"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
water	14:36	0:0	12	"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
arg	14:96	14:98	11	56
water	14:96	0:0	12	56
water	14:99	0:0	10	;
else	15:12	17:47	6
stmts	16:16	17:47	7	
for	16:16	17:47	8	(i = 0 ;i < 1000 * 1000;i ++)
forinit	16:21	16:26	9	i = 0 ;
water	16:21	0:0	10	i
op	16:23	0:0	10	=
water	16:25	0:0	10	0
water	16:26	0:0	10	;
cond	16:28	16:37	9	i < 1000 * 1000
water	16:28	0:0	10	i
op	16:30	0:0	10	<
water	16:32	0:0	10	1000
op	16:36	0:0	10	*
water	16:37	0:0	10	1000
forexpr	16:43	16:44	9	i ++
water	16:43	0:0	10	i
op	16:44	0:0	10	++
stmts	17:20	17:47	9	
call	17:20	17:46	10	av_sha_update
arg	17:34	17:38	11	&ctx
op	17:34	0:0	12	&
water	17:35	0:0	12	ctx
arg	17:40	17:43	11	"a"
water	17:40	0:0	12	"a"
arg	17:45	17:46	11	1
water	17:45	0:0	12	1
water	17:47	0:0	10	;
call	18:12	18:37	6	av_sha_final
arg	18:25	18:29	7	&ctx
op	18:25	0:0	8	&
water	18:26	0:0	8	ctx
arg	18:31	18:37	7	digest
water	18:31	0:0	8	digest
water	18:38	0:0	6	;
for	19:12	20:41	6	(i = 0 ;i < lengths [ j ] >> 3;i ++)
forinit	19:17	19:22	7	i = 0 ;
water	19:17	0:0	8	i
op	19:19	0:0	8	=
water	19:21	0:0	8	0
water	19:22	0:0	8	;
cond	19:24	19:42	7	i < lengths [ j ] >> 3
water	19:24	0:0	8	i
op	19:26	0:0	8	<
water	19:28	0:0	8	lengths
op	19:35	0:0	8	[
water	19:36	0:0	8	j
op	19:37	0:0	8	]
op	19:39	0:0	8	>>
water	19:42	0:0	8	3
forexpr	19:45	19:46	7	i ++
water	19:45	0:0	8	i
op	19:46	0:0	8	++
stmts	20:16	20:41	7	
call	20:16	20:40	8	printf
arg	20:23	20:29	9	"%02X"
water	20:23	0:0	10	"%02X"
arg	20:31	20:40	9	digest[i]
water	20:31	0:0	10	digest
op	20:37	0:0	10	[
water	20:38	0:0	10	i
op	20:39	0:0	10	]
water	20:41	0:0	8	;
call	21:12	21:24	6	putchar
arg	21:20	21:24	7	'\n'
water	21:20	0:0	8	'\n'
water	21:25	0:0	6	;
water	22:8	0:0	6	}
switch	23:8	42:8	4	(j)
cond	23:16	23:16	5	j
water	23:16	0:0	6	j
stmts	23:19	42:8	5	
water	23:19	0:0	6	{
label	24:8	24:14	6	case 0 :
call	26:12	28:67	6	printf
arg	26:19	28:67	7	"A9993E36 4706816A BA3E2571 7850C26C 9CD0D89D\n""84983E44 1C3BD26E BAAE4AA1 F95129E5 E54670F1\n""34AA973C D4C4DAA4 F61EEB2B DBAD2731 6534016F\n"
water	26:19	0:0	8	"A9993E36 4706816A BA3E2571 7850C26C 9CD0D89D\n"
water	27:19	0:0	8	"84983E44 1C3BD26E BAAE4AA1 F95129E5 E54670F1\n"
water	28:19	0:0	8	"34AA973C D4C4DAA4 F61EEB2B DBAD2731 6534016F\n"
water	28:68	0:0	6	;
break	29:12	29:17	6	
label	30:8	30:14	6	case 1 :
call	32:12	34:85	6	printf
arg	32:19	34:85	7	"23097d22 3405d822 8642a477 bda255b3 2aadbce4 bda0b3f7 e36c9da7\n""75388b16 512776cc 5dba5da1 fd890150 b0c6455c b4f58b19 52522525\n""20794655 980c91d8 bbb4c1ea 97618a4b f03f4258 1948b2ee 4ee7ad67\n"
water	32:19	0:0	8	"23097d22 3405d822 8642a477 bda255b3 2aadbce4 bda0b3f7 e36c9da7\n"
water	33:19	0:0	8	"75388b16 512776cc 5dba5da1 fd890150 b0c6455c b4f58b19 52522525\n"
water	34:19	0:0	8	"20794655 980c91d8 bbb4c1ea 97618a4b f03f4258 1948b2ee 4ee7ad67\n"
water	34:86	0:0	6	;
break	35:12	35:17	6	
label	36:8	36:14	6	case 2 :
call	38:12	40:94	6	printf
arg	38:19	40:94	7	"ba7816bf 8f01cfea 414140de 5dae2223 b00361a3 96177a9c b410ff61 f20015ad\n""248d6a61 d20638b8 e5c02693 0c3e6039 a33ce459 64ff2167 f6ecedd4 19db06c1\n""cdc76e5c 9914fb92 81a1c7e2 84d73e67 f1809a48 a497200e 046d39cc c7112cd0\n"
water	38:19	0:0	8	"ba7816bf 8f01cfea 414140de 5dae2223 b00361a3 96177a9c b410ff61 f20015ad\n"
water	39:19	0:0	8	"248d6a61 d20638b8 e5c02693 0c3e6039 a33ce459 64ff2167 f6ecedd4 19db06c1\n"
water	40:19	0:0	8	"cdc76e5c 9914fb92 81a1c7e2 84d73e67 f1809a48 a497200e 046d39cc c7112cd0\n"
water	40:95	0:0	6	;
break	41:12	41:17	6	
water	42:8	0:0	6	}
water	43:4	0:0	4	}
return	44:4	44:12	2	0
water	44:11	0:0	3	0
