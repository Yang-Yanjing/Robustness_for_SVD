func	1:0	154:0	0	static void	vc1_decode_b_mb_intfi
params	1:33	0:0	1	
param	1:34	1:47	2	VC1Context *	v
stmnts	0:0	153:4	1	
decl	3:4	3:29	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	v
op	3:26	0:0	2	->
water	3:28	0:0	2	s
decl	4:4	4:30	2	GetBitContext	*gb
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	gb
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
decl	6:4	6:49	2	int	mb_pos
op	6:15	0:0	2	=
water	6:17	0:0	2	s
op	6:18	0:0	2	->
water	6:20	0:0	2	mb_x
op	6:25	0:0	2	+
water	6:27	0:0	2	s
op	6:28	0:0	2	->
water	6:30	0:0	2	mb_y
op	6:35	0:0	2	*
water	6:37	0:0	2	s
op	6:38	0:0	2	->
water	6:40	0:0	2	mb_stride
decl	7:4	7:15	2	int	cbp
op	7:12	0:0	2	=
water	7:14	0:0	2	0
decl	8:4	8:22	2	int	mqdiff
water	8:14	0:0	2	,
decl	8:4	8:22	2	int	mquant
decl	9:4	9:23	2	int	ttmb
op	9:13	0:0	2	=
water	9:15	0:0	2	v
op	9:16	0:0	2	->
water	9:18	0:0	2	ttfrm
decl	10:4	10:25	2	int	mb_has_coeffs
op	10:22	0:0	2	=
water	10:24	0:0	2	0
decl	11:4	11:11	2	int	val
decl	12:4	12:23	2	int	first_block
op	12:20	0:0	2	=
water	12:22	0:0	2	1
decl	13:4	13:20	2	int	dst_idx
water	13:15	0:0	2	,
decl	13:4	13:20	2	int	off
decl	14:4	14:11	2	int	fwd
decl	15:4	15:40	2	int	dmv_x[2]
water	15:16	0:0	2	,
decl	15:4	15:40	2	int	dmv_y[2]
water	15:26	0:0	2	,
decl	15:4	15:40	2	int	pred_flag[2]
decl	16:4	16:35	2	int	bmvtype
op	16:16	0:0	2	=
water	16:18	0:0	2	BMV_TYPE_BACKWARD
decl	17:4	17:18	2	int	idx_mbmode
water	18:4	0:0	2	mquant
op	18:16	0:0	2	=
water	18:18	0:0	2	v
op	18:19	0:0	2	->
water	18:21	0:0	2	pq
water	18:23	0:0	2	;
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	mb_intra
op	19:16	0:0	2	=
water	19:18	0:0	2	0
water	19:19	0:0	2	;
water	20:4	0:0	2	idx_mbmode
op	20:15	0:0	2	=
call	20:17	20:77	2	get_vlc2
arg	20:26	20:28	3	gb
water	20:26	0:0	4	gb
arg	20:30	20:50	3	v->mbmode_vlc->table
water	20:30	0:0	4	v
op	20:31	0:0	4	->
water	20:33	0:0	4	mbmode_vlc
op	20:43	0:0	4	->
water	20:45	0:0	4	table
arg	20:52	20:74	3	VC1_IF_MBMODE_VLC_BITS
water	20:52	0:0	4	VC1_IF_MBMODE_VLC_BITS
arg	20:76	20:77	3	2
water	20:76	0:0	4	2
water	20:78	0:0	2	;
if	21:4	62:4	2	(idx_mbmode <= 1)
cond	21:8	21:22	3	idx_mbmode <= 1
water	21:8	0:0	4	idx_mbmode
op	21:19	0:0	4	<=
water	21:22	0:0	4	1
stmts	21:25	62:4	3	
water	21:25	0:0	4	{
water	22:8	0:0	4	v
op	22:9	0:0	4	->
water	22:11	0:0	4	is_intra
op	22:19	0:0	4	[
water	22:20	0:0	4	s
op	22:21	0:0	4	->
water	22:23	0:0	4	mb_x
op	22:27	0:0	4	]
op	22:29	0:0	4	=
water	22:31	0:0	4	0
water	22:32	0:0	4	x3f
water	22:35	0:0	4	;
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	mb_intra
op	23:29	0:0	4	=
water	23:31	0:0	4	1
water	23:32	0:0	4	;
water	24:8	0:0	4	s
op	24:9	0:0	4	->
water	24:11	0:0	4	current_picture
op	24:26	0:0	4	.
water	24:27	0:0	4	motion_val
op	24:37	0:0	4	[
water	24:38	0:0	4	1
op	24:39	0:0	4	]
op	24:40	0:0	4	[
water	24:41	0:0	4	s
op	24:42	0:0	4	->
water	24:44	0:0	4	block_index
op	24:55	0:0	4	[
water	24:56	0:0	4	0
op	24:57	0:0	4	]
op	24:58	0:0	4	]
op	24:59	0:0	4	[
water	24:60	0:0	4	0
op	24:61	0:0	4	]
op	24:63	0:0	4	=
water	24:65	0:0	4	0
water	24:66	0:0	4	;
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	current_picture
op	25:26	0:0	4	.
water	25:27	0:0	4	motion_val
op	25:37	0:0	4	[
water	25:38	0:0	4	1
op	25:39	0:0	4	]
op	25:40	0:0	4	[
water	25:41	0:0	4	s
op	25:42	0:0	4	->
water	25:44	0:0	4	block_index
op	25:55	0:0	4	[
water	25:56	0:0	4	0
op	25:57	0:0	4	]
op	25:58	0:0	4	]
op	25:59	0:0	4	[
water	25:60	0:0	4	1
op	25:61	0:0	4	]
op	25:63	0:0	4	=
water	25:65	0:0	4	0
water	25:66	0:0	4	;
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	current_picture
op	26:26	0:0	4	.
water	26:27	0:0	4	mb_type
op	26:34	0:0	4	[
water	26:35	0:0	4	mb_pos
op	26:42	0:0	4	+
water	26:44	0:0	4	v
op	26:45	0:0	4	->
water	26:47	0:0	4	mb_off
op	26:53	0:0	4	]
op	26:63	0:0	4	=
water	26:65	0:0	4	MB_TYPE_INTRA
water	26:78	0:0	4	;
call	27:8	27:19	4	GET_MQUANT
water	27:20	0:0	4	;
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	current_picture
op	28:26	0:0	4	.
water	28:27	0:0	4	qscale_table
op	28:39	0:0	4	[
water	28:40	0:0	4	mb_pos
op	28:46	0:0	4	]
op	28:48	0:0	4	=
water	28:50	0:0	4	mquant
water	28:56	0:0	4	;
water	30:8	0:0	4	s
op	30:9	0:0	4	->
water	30:11	0:0	4	y_dc_scale
op	30:22	0:0	4	=
water	30:24	0:0	4	s
op	30:25	0:0	4	->
water	30:27	0:0	4	y_dc_scale_table
op	30:43	0:0	4	[
water	30:44	0:0	4	mquant
op	30:50	0:0	4	]
water	30:51	0:0	4	;
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	c_dc_scale
op	31:22	0:0	4	=
water	31:24	0:0	4	s
op	31:25	0:0	4	->
water	31:27	0:0	4	c_dc_scale_table
op	31:43	0:0	4	[
water	31:44	0:0	4	mquant
op	31:50	0:0	4	]
water	31:51	0:0	4	;
water	32:8	0:0	4	v
op	32:9	0:0	4	->
water	32:11	0:0	4	s
op	32:12	0:0	4	.
water	32:13	0:0	4	ac_pred
op	32:22	0:0	4	=
water	32:24	0:0	4	v
op	32:25	0:0	4	->
water	32:27	0:0	4	acpred_plane
op	32:39	0:0	4	[
water	32:40	0:0	4	mb_pos
op	32:46	0:0	4	]
op	32:48	0:0	4	=
call	32:50	32:62	4	get_bits1
arg	32:60	32:62	5	gb
water	32:60	0:0	6	gb
water	32:63	0:0	4	;
water	33:8	0:0	4	mb_has_coeffs
op	33:22	0:0	4	=
water	33:24	0:0	4	idx_mbmode
op	33:35	0:0	4	&
water	33:37	0:0	4	1
water	33:38	0:0	4	;
if	34:8	35:85	4	(mb_has_coeffs)
cond	34:12	34:12	5	mb_has_coeffs
water	34:12	0:0	6	mb_has_coeffs
stmts	35:12	35:85	5	
water	35:12	0:0	6	cbp
op	35:16	0:0	6	=
water	35:18	0:0	6	1
op	35:20	0:0	6	+
call	35:22	35:84	6	get_vlc2
arg	35:31	35:39	7	&v->s.gb
op	35:31	0:0	8	&
water	35:32	0:0	8	v
op	35:33	0:0	8	->
water	35:35	0:0	8	s
op	35:36	0:0	8	.
water	35:37	0:0	8	gb
arg	35:41	35:60	7	v->cbpcy_vlc->table
water	35:41	0:0	8	v
op	35:42	0:0	8	->
water	35:44	0:0	8	cbpcy_vlc
op	35:53	0:0	8	->
water	35:55	0:0	8	table
arg	35:62	35:81	7	VC1_ICBPCY_VLC_BITS
water	35:62	0:0	8	VC1_ICBPCY_VLC_BITS
arg	35:83	35:84	7	2
water	35:83	0:0	8	2
water	35:85	0:0	6	;
water	36:8	0:0	4	dst_idx
op	36:16	0:0	4	=
water	36:18	0:0	4	0
water	36:19	0:0	4	;
for	37:8	61:8	4	(i = 0 ;i < 6;i ++)
forinit	37:13	37:18	5	i = 0 ;
water	37:13	0:0	6	i
op	37:15	0:0	6	=
water	37:17	0:0	6	0
water	37:18	0:0	6	;
cond	37:20	37:24	5	i < 6
water	37:20	0:0	6	i
op	37:22	0:0	6	<
water	37:24	0:0	6	6
forexpr	37:27	37:28	5	i ++
water	37:27	0:0	6	i
op	37:28	0:0	6	++
stmts	37:32	61:8	5	
water	37:32	0:0	6	{
water	38:12	0:0	6	v
op	38:13	0:0	6	->
water	38:15	0:0	6	a_avail
op	38:23	0:0	6	=
water	38:25	0:0	6	v
op	38:26	0:0	6	->
water	38:28	0:0	6	c_avail
op	38:45	0:0	6	=
water	38:47	0:0	6	0
water	38:48	0:0	6	;
water	39:12	0:0	6	v
op	39:13	0:0	6	->
water	39:15	0:0	6	mb_type
op	39:22	0:0	6	[
water	39:23	0:0	6	0
op	39:24	0:0	6	]
op	39:25	0:0	6	[
water	39:26	0:0	6	s
op	39:27	0:0	6	->
water	39:29	0:0	6	block_index
op	39:40	0:0	6	[
water	39:41	0:0	6	i
op	39:42	0:0	6	]
op	39:43	0:0	6	]
op	39:45	0:0	6	=
water	39:47	0:0	6	1
water	39:48	0:0	6	;
water	40:12	0:0	6	s
op	40:13	0:0	6	->
water	40:15	0:0	6	dc_val
op	40:21	0:0	6	[
water	40:22	0:0	6	0
op	40:23	0:0	6	]
op	40:24	0:0	6	[
water	40:25	0:0	6	s
op	40:26	0:0	6	->
water	40:28	0:0	6	block_index
op	40:39	0:0	6	[
water	40:40	0:0	6	i
op	40:41	0:0	6	]
op	40:42	0:0	6	]
op	40:45	0:0	6	=
water	40:47	0:0	6	0
water	40:48	0:0	6	;
water	41:12	0:0	6	dst_idx
op	41:20	0:0	6	+=
water	41:23	0:0	6	i
op	41:25	0:0	6	>>
water	41:28	0:0	6	2
water	41:29	0:0	6	;
water	42:12	0:0	6	val
op	42:16	0:0	6	=
water	42:18	0:0	6	(
water	42:19	0:0	6	(
water	42:20	0:0	6	cbp
op	42:24	0:0	6	>>
water	42:27	0:0	6	(
water	42:28	0:0	6	5
op	42:30	0:0	6	-
water	42:32	0:0	6	i
water	42:33	0:0	6	)
water	42:34	0:0	6	)
op	42:36	0:0	6	&
water	42:38	0:0	6	1
water	42:39	0:0	6	)
water	42:40	0:0	6	;
if	43:12	44:80	6	(i == 2 || i == 3 || ! s -> first_slice_line)
cond	43:16	43:40	7	i == 2 || i == 3 || ! s -> first_slice_line
water	43:16	0:0	8	i
op	43:18	0:0	8	==
water	43:21	0:0	8	2
op	43:23	0:0	8	||
water	43:26	0:0	8	i
op	43:28	0:0	8	==
water	43:31	0:0	8	3
op	43:33	0:0	8	||
op	43:36	0:0	8	!
water	43:37	0:0	8	s
op	43:38	0:0	8	->
water	43:40	0:0	8	first_slice_line
stmts	44:16	44:80	7	
water	44:16	0:0	8	v
op	44:17	0:0	8	->
water	44:19	0:0	8	a_avail
op	44:27	0:0	8	=
water	44:29	0:0	8	v
op	44:30	0:0	8	->
water	44:32	0:0	8	mb_type
op	44:39	0:0	8	[
water	44:40	0:0	8	0
op	44:41	0:0	8	]
op	44:42	0:0	8	[
water	44:43	0:0	8	s
op	44:44	0:0	8	->
water	44:46	0:0	8	block_index
op	44:57	0:0	8	[
water	44:58	0:0	8	i
op	44:59	0:0	8	]
op	44:61	0:0	8	-
water	44:63	0:0	8	s
op	44:64	0:0	8	->
water	44:66	0:0	8	block_wrap
op	44:76	0:0	8	[
water	44:77	0:0	8	i
op	44:78	0:0	8	]
op	44:79	0:0	8	]
water	44:80	0:0	8	;
if	45:12	46:65	6	(i == 1 || i == 3 || s -> mb_x)
cond	45:16	45:39	7	i == 1 || i == 3 || s -> mb_x
water	45:16	0:0	8	i
op	45:18	0:0	8	==
water	45:21	0:0	8	1
op	45:23	0:0	8	||
water	45:26	0:0	8	i
op	45:28	0:0	8	==
water	45:31	0:0	8	3
op	45:33	0:0	8	||
water	45:36	0:0	8	s
op	45:37	0:0	8	->
water	45:39	0:0	8	mb_x
stmts	46:16	46:65	7	
water	46:16	0:0	8	v
op	46:17	0:0	8	->
water	46:19	0:0	8	c_avail
op	46:27	0:0	8	=
water	46:29	0:0	8	v
op	46:30	0:0	8	->
water	46:32	0:0	8	mb_type
op	46:39	0:0	8	[
water	46:40	0:0	8	0
op	46:41	0:0	8	]
op	46:42	0:0	8	[
water	46:43	0:0	8	s
op	46:44	0:0	8	->
water	46:46	0:0	8	block_index
op	46:57	0:0	8	[
water	46:58	0:0	8	i
op	46:59	0:0	8	]
op	46:61	0:0	8	-
water	46:63	0:0	8	1
op	46:64	0:0	8	]
water	46:65	0:0	8	;
call	47:12	48:73	6	vc1_decode_intra_block
arg	47:35	47:36	7	v
water	47:35	0:0	8	v
arg	47:38	47:49	7	s->block[i]
water	47:38	0:0	8	s
op	47:39	0:0	8	->
water	47:41	0:0	8	block
op	47:46	0:0	8	[
water	47:47	0:0	8	i
op	47:48	0:0	8	]
arg	47:51	47:52	7	i
water	47:51	0:0	8	i
arg	47:54	47:57	7	val
water	47:54	0:0	8	val
arg	47:59	47:65	7	mquant
water	47:59	0:0	8	mquant
arg	48:35	48:73	7	(i&4)?v->codingset2:v->codingset
water	48:35	0:0	8	(
water	48:36	0:0	8	i
op	48:38	0:0	8	&
water	48:40	0:0	8	4
water	48:41	0:0	8	)
water	48:43	0:0	8	?
water	48:45	0:0	8	v
op	48:46	0:0	8	->
water	48:48	0:0	8	codingset2
water	48:59	0:0	8	:
water	48:61	0:0	8	v
op	48:62	0:0	8	->
water	48:64	0:0	8	codingset
water	48:74	0:0	6	;
if	49:12	50:24	6	(CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	49:16	49:79	7	CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
water	49:16	0:0	8	CONFIG_GRAY
op	49:28	0:0	8	&&
water	49:31	0:0	8	(
water	49:32	0:0	8	i
op	49:34	0:0	8	>
water	49:36	0:0	8	3
water	49:37	0:0	8	)
op	49:39	0:0	8	&&
water	49:42	0:0	8	(
water	49:43	0:0	8	s
op	49:44	0:0	8	->
water	49:46	0:0	8	avctx
op	49:51	0:0	8	->
water	49:53	0:0	8	flags
op	49:59	0:0	8	&
water	49:61	0:0	8	AV_CODEC_FLAG_GRAY
water	49:79	0:0	8	)
stmts	50:16	50:24	7	
continue	50:16	50:24	8	
call	51:12	51:51	6	v->vc1dsp.vc1_inv_trans_8x8
arg	51:40	51:51	7	s->block[i]
water	51:40	0:0	8	s
op	51:41	0:0	8	->
water	51:43	0:0	8	block
op	51:48	0:0	8	[
water	51:49	0:0	8	i
op	51:50	0:0	8	]
water	51:52	0:0	6	;
if	52:12	54:40	6	(v -> rangeredfrm)
cond	52:16	52:19	7	v -> rangeredfrm
water	52:16	0:0	8	v
op	52:17	0:0	8	->
water	52:19	0:0	8	rangeredfrm
stmts	53:16	54:40	7	
for	53:16	54:40	8	(j = 0 ;j < 64;j ++)
forinit	53:21	53:26	9	j = 0 ;
water	53:21	0:0	10	j
op	53:23	0:0	10	=
water	53:25	0:0	10	0
water	53:26	0:0	10	;
cond	53:28	53:32	9	j < 64
water	53:28	0:0	10	j
op	53:30	0:0	10	<
water	53:32	0:0	10	64
forexpr	53:36	53:37	9	j ++
water	53:36	0:0	10	j
op	53:37	0:0	10	++
stmts	54:20	54:40	9	
water	54:20	0:0	10	s
op	54:21	0:0	10	->
water	54:23	0:0	10	block
op	54:28	0:0	10	[
water	54:29	0:0	10	i
op	54:30	0:0	10	]
op	54:31	0:0	10	[
water	54:32	0:0	10	j
op	54:33	0:0	10	]
op	54:35	0:0	10	<<=
water	54:39	0:0	10	1
water	54:40	0:0	10	;
water	55:12	0:0	6	off
op	55:17	0:0	6	=
water	55:19	0:0	6	(
water	55:20	0:0	6	i
op	55:22	0:0	6	&
water	55:24	0:0	6	4
water	55:25	0:0	6	)
water	55:27	0:0	6	?
water	55:29	0:0	6	0
water	55:31	0:0	6	:
water	55:33	0:0	6	(
water	55:34	0:0	6	(
water	55:35	0:0	6	i
op	55:37	0:0	6	&
water	55:39	0:0	6	1
water	55:40	0:0	6	)
op	55:42	0:0	6	*
water	55:44	0:0	6	8
op	55:46	0:0	6	+
water	55:48	0:0	6	(
water	55:49	0:0	6	i
op	55:51	0:0	6	&
water	55:53	0:0	6	2
water	55:54	0:0	6	)
op	55:56	0:0	6	*
water	55:58	0:0	6	4
op	55:60	0:0	6	*
water	55:62	0:0	6	s
op	55:63	0:0	6	->
water	55:65	0:0	6	linesize
water	55:73	0:0	6	)
water	55:74	0:0	6	;
call	56:12	59:67	6	s->idsp.put_signed_pixels_clamped
arg	56:46	56:57	7	s->block[i]
water	56:46	0:0	8	s
op	56:47	0:0	8	->
water	56:49	0:0	8	block
op	56:54	0:0	8	[
water	56:55	0:0	8	i
op	56:56	0:0	8	]
arg	57:46	57:68	7	s->dest[dst_idx]+off
water	57:46	0:0	8	s
op	57:47	0:0	8	->
water	57:49	0:0	8	dest
op	57:53	0:0	8	[
water	57:54	0:0	8	dst_idx
op	57:61	0:0	8	]
op	57:63	0:0	8	+
water	57:65	0:0	8	off
arg	58:46	59:67	7	(i&4)?s->uvlinesize:s->linesize
water	58:46	0:0	8	(
water	58:47	0:0	8	i
op	58:49	0:0	8	&
water	58:51	0:0	8	4
water	58:52	0:0	8	)
water	58:54	0:0	8	?
water	58:56	0:0	8	s
op	58:57	0:0	8	->
water	58:59	0:0	8	uvlinesize
water	59:54	0:0	8	:
water	59:56	0:0	8	s
op	59:57	0:0	8	->
water	59:59	0:0	8	linesize
water	59:68	0:0	6	;
water	61:8	0:0	6	}
water	62:4	0:0	4	}
else	62:6	153:4	2
stmts	62:11	153:4	3	
water	62:11	0:0	4	{
water	63:8	0:0	4	s
op	63:9	0:0	4	->
water	63:11	0:0	4	mb_intra
op	63:20	0:0	4	=
water	63:22	0:0	4	v
op	63:23	0:0	4	->
water	63:25	0:0	4	is_intra
op	63:33	0:0	4	[
water	63:34	0:0	4	s
op	63:35	0:0	4	->
water	63:37	0:0	4	mb_x
op	63:41	0:0	4	]
op	63:43	0:0	4	=
water	63:45	0:0	4	0
water	63:46	0:0	4	;
water	64:8	0:0	4	s
op	64:9	0:0	4	->
water	64:11	0:0	4	current_picture
op	64:26	0:0	4	.
water	64:27	0:0	4	mb_type
op	64:34	0:0	4	[
water	64:35	0:0	4	mb_pos
op	64:42	0:0	4	+
water	64:44	0:0	4	v
op	64:45	0:0	4	->
water	64:47	0:0	4	mb_off
op	64:53	0:0	4	]
op	64:55	0:0	4	=
water	64:57	0:0	4	MB_TYPE_16x16
water	64:70	0:0	4	;
for	65:8	66:48	4	(i = 0 ;i < 6;i ++)
forinit	65:13	65:18	5	i = 0 ;
water	65:13	0:0	6	i
op	65:15	0:0	6	=
water	65:17	0:0	6	0
water	65:18	0:0	6	;
cond	65:20	65:24	5	i < 6
water	65:20	0:0	6	i
op	65:22	0:0	6	<
water	65:24	0:0	6	6
forexpr	65:27	65:28	5	i ++
water	65:27	0:0	6	i
op	65:28	0:0	6	++
stmts	66:12	66:48	5	
water	66:12	0:0	6	v
op	66:13	0:0	6	->
water	66:15	0:0	6	mb_type
op	66:22	0:0	6	[
water	66:23	0:0	6	0
op	66:24	0:0	6	]
op	66:25	0:0	6	[
water	66:26	0:0	6	s
op	66:27	0:0	6	->
water	66:29	0:0	6	block_index
op	66:40	0:0	6	[
water	66:41	0:0	6	i
op	66:42	0:0	6	]
op	66:43	0:0	6	]
op	66:45	0:0	6	=
water	66:47	0:0	6	0
water	66:48	0:0	6	;
if	67:8	68:61	4	(v -> fmb_is_raw)
cond	67:12	67:15	5	v -> fmb_is_raw
water	67:12	0:0	6	v
op	67:13	0:0	6	->
water	67:15	0:0	6	fmb_is_raw
stmts	68:12	68:61	5	
water	68:12	0:0	6	fwd
op	68:16	0:0	6	=
water	68:18	0:0	6	v
op	68:19	0:0	6	->
water	68:21	0:0	6	forward_mb_plane
op	68:37	0:0	6	[
water	68:38	0:0	6	mb_pos
op	68:44	0:0	6	]
op	68:46	0:0	6	=
call	68:48	68:60	6	get_bits1
arg	68:58	68:60	7	gb
water	68:58	0:0	8	gb
water	68:61	0:0	6	;
else	69:8	70:45	4
stmts	70:12	70:45	5	
water	70:12	0:0	6	fwd
op	70:16	0:0	6	=
water	70:18	0:0	6	v
op	70:19	0:0	6	->
water	70:21	0:0	6	forward_mb_plane
op	70:37	0:0	6	[
water	70:38	0:0	6	mb_pos
op	70:44	0:0	6	]
water	70:45	0:0	6	;
if	71:8	109:8	4	(idx_mbmode <= 5)
cond	71:12	71:26	5	idx_mbmode <= 5
water	71:12	0:0	6	idx_mbmode
op	71:23	0:0	6	<=
water	71:26	0:0	6	5
stmts	71:29	109:8	5	
water	71:29	0:0	6	{
decl	72:12	72:29	6	int	interpmvp
op	72:26	0:0	6	=
water	72:28	0:0	6	0
water	73:12	0:0	6	dmv_x
op	73:17	0:0	6	[
water	73:18	0:0	6	0
op	73:19	0:0	6	]
op	73:25	0:0	6	=
water	73:27	0:0	6	dmv_x
op	73:32	0:0	6	[
water	73:33	0:0	6	1
op	73:34	0:0	6	]
op	73:36	0:0	6	=
water	73:38	0:0	6	dmv_y
op	73:43	0:0	6	[
water	73:44	0:0	6	0
op	73:45	0:0	6	]
op	73:47	0:0	6	=
water	73:49	0:0	6	dmv_y
op	73:54	0:0	6	[
water	73:55	0:0	6	1
op	73:56	0:0	6	]
op	73:58	0:0	6	=
water	73:60	0:0	6	0
water	73:61	0:0	6	;
water	74:12	0:0	6	pred_flag
op	74:21	0:0	6	[
water	74:22	0:0	6	0
op	74:23	0:0	6	]
op	74:25	0:0	6	=
water	74:27	0:0	6	pred_flag
op	74:36	0:0	6	[
water	74:37	0:0	6	1
op	74:38	0:0	6	]
op	74:40	0:0	6	=
water	74:42	0:0	6	0
water	74:43	0:0	6	;
if	75:12	76:42	6	(fwd)
cond	75:16	75:16	7	fwd
water	75:16	0:0	8	fwd
stmts	76:16	76:42	7	
water	76:16	0:0	8	bmvtype
op	76:24	0:0	8	=
water	76:26	0:0	8	BMV_TYPE_FORWARD
water	76:42	0:0	8	;
else	77:12	90:12	6
stmts	77:17	90:12	7	
water	77:17	0:0	8	{
water	78:16	0:0	8	bmvtype
op	78:24	0:0	8	=
call	78:26	78:38	8	decode012
arg	78:36	78:38	9	gb
water	78:36	0:0	10	gb
water	78:39	0:0	8	;
switch	79:16	89:16	8	(bmvtype)
cond	79:24	79:24	9	bmvtype
water	79:24	0:0	10	bmvtype
stmts	79:33	89:16	9	
water	79:33	0:0	10	{
label	80:16	80:22	10	case 0 :
water	81:20	0:0	10	bmvtype
op	81:28	0:0	10	=
water	81:30	0:0	10	BMV_TYPE_BACKWARD
water	81:47	0:0	10	;
break	82:20	82:25	10	
label	83:16	83:22	10	case 1 :
water	84:20	0:0	10	bmvtype
op	84:28	0:0	10	=
water	84:30	0:0	10	BMV_TYPE_DIRECT
water	84:45	0:0	10	;
break	85:20	85:25	10	
label	86:16	86:22	10	case 2 :
water	87:20	0:0	10	bmvtype
op	87:30	0:0	10	=
water	87:32	0:0	10	BMV_TYPE_INTERPOLATED
water	87:53	0:0	10	;
water	88:20	0:0	10	interpmvp
op	88:30	0:0	10	=
call	88:32	88:44	10	get_bits1
arg	88:42	88:44	11	gb
water	88:42	0:0	12	gb
water	88:45	0:0	10	;
water	89:16	0:0	10	}
water	90:12	0:0	8	}
water	91:12	0:0	6	v
op	91:13	0:0	6	->
water	91:15	0:0	6	bmvtype
op	91:23	0:0	6	=
water	91:25	0:0	6	bmvtype
water	91:32	0:0	6	;
if	92:12	94:12	6	(bmvtype != BMV_TYPE_DIRECT && idx_mbmode & 1)
cond	92:16	92:59	7	bmvtype != BMV_TYPE_DIRECT && idx_mbmode & 1
water	92:16	0:0	8	bmvtype
op	92:24	0:0	8	!=
water	92:27	0:0	8	BMV_TYPE_DIRECT
op	92:43	0:0	8	&&
water	92:46	0:0	8	idx_mbmode
op	92:57	0:0	8	&
water	92:59	0:0	8	1
stmts	92:62	94:12	7	
water	92:62	0:0	8	{
call	93:16	93:157	8	get_mvdata_interlaced
arg	93:38	93:39	9	v
water	93:38	0:0	10	v
arg	93:41	93:77	9	&dmv_x[bmvtype==BMV_TYPE_BACKWARD]
op	93:41	0:0	10	&
water	93:42	0:0	10	dmv_x
op	93:47	0:0	10	[
water	93:48	0:0	10	bmvtype
op	93:56	0:0	10	==
water	93:59	0:0	10	BMV_TYPE_BACKWARD
op	93:76	0:0	10	]
arg	93:79	93:115	9	&dmv_y[bmvtype==BMV_TYPE_BACKWARD]
op	93:79	0:0	10	&
water	93:80	0:0	10	dmv_y
op	93:85	0:0	10	[
water	93:86	0:0	10	bmvtype
op	93:94	0:0	10	==
water	93:97	0:0	10	BMV_TYPE_BACKWARD
op	93:114	0:0	10	]
arg	93:117	93:157	9	&pred_flag[bmvtype==BMV_TYPE_BACKWARD]
op	93:117	0:0	10	&
water	93:118	0:0	10	pred_flag
op	93:127	0:0	10	[
water	93:128	0:0	10	bmvtype
op	93:136	0:0	10	==
water	93:139	0:0	10	BMV_TYPE_BACKWARD
op	93:156	0:0	10	]
water	93:158	0:0	8	;
water	94:12	0:0	8	}
if	95:12	97:12	6	(interpmvp)
cond	95:16	95:16	7	interpmvp
water	95:16	0:0	8	interpmvp
stmts	95:27	97:12	7	
water	95:27	0:0	8	{
call	96:16	96:76	8	get_mvdata_interlaced
arg	96:38	96:39	9	v
water	96:38	0:0	10	v
arg	96:41	96:50	9	&dmv_x[1]
op	96:41	0:0	10	&
water	96:42	0:0	10	dmv_x
op	96:47	0:0	10	[
water	96:48	0:0	10	1
op	96:49	0:0	10	]
arg	96:52	96:61	9	&dmv_y[1]
op	96:52	0:0	10	&
water	96:53	0:0	10	dmv_y
op	96:58	0:0	10	[
water	96:59	0:0	10	1
op	96:60	0:0	10	]
arg	96:63	96:76	9	&pred_flag[1]
op	96:63	0:0	10	&
water	96:64	0:0	10	pred_flag
op	96:73	0:0	10	[
water	96:74	0:0	10	1
op	96:75	0:0	10	]
water	96:77	0:0	8	;
water	97:12	0:0	8	}
if	98:12	105:12	6	(bmvtype == BMV_TYPE_DIRECT)
cond	98:16	98:27	7	bmvtype == BMV_TYPE_DIRECT
water	98:16	0:0	8	bmvtype
op	98:24	0:0	8	==
water	98:27	0:0	8	BMV_TYPE_DIRECT
stmts	98:44	105:12	7	
water	98:44	0:0	8	{
water	99:16	0:0	8	dmv_x
op	99:21	0:0	8	[
water	99:22	0:0	8	0
op	99:23	0:0	8	]
op	99:25	0:0	8	=
water	99:27	0:0	8	dmv_y
op	99:32	0:0	8	[
water	99:33	0:0	8	0
op	99:34	0:0	8	]
op	99:36	0:0	8	=
water	99:38	0:0	8	pred_flag
op	99:47	0:0	8	[
water	99:48	0:0	8	0
op	99:49	0:0	8	]
op	99:51	0:0	8	=
water	99:53	0:0	8	0
water	99:54	0:0	8	;
water	100:16	0:0	8	dmv_x
op	100:21	0:0	8	[
water	100:22	0:0	8	1
op	100:23	0:0	8	]
op	100:25	0:0	8	=
water	100:27	0:0	8	dmv_y
op	100:32	0:0	8	[
water	100:33	0:0	8	1
op	100:34	0:0	8	]
op	100:36	0:0	8	=
water	100:38	0:0	8	pred_flag
op	100:47	0:0	8	[
water	100:48	0:0	8	0
op	100:49	0:0	8	]
op	100:51	0:0	8	=
water	100:53	0:0	8	0
water	100:54	0:0	8	;
if	101:16	104:16	8	(! s -> next_picture_ptr -> field_picture)
cond	101:20	101:42	9	! s -> next_picture_ptr -> field_picture
op	101:20	0:0	10	!
water	101:21	0:0	10	s
op	101:22	0:0	10	->
water	101:24	0:0	10	next_picture_ptr
op	101:40	0:0	10	->
water	101:42	0:0	10	field_picture
stmts	101:57	104:16	9	
water	101:57	0:0	10	{
call	102:20	102:98	10	av_log
arg	102:27	102:35	11	s->avctx
water	102:27	0:0	12	s
op	102:28	0:0	12	->
water	102:30	0:0	12	avctx
arg	102:37	102:49	11	AV_LOG_ERROR
water	102:37	0:0	12	AV_LOG_ERROR
arg	102:51	102:98	11	"Mixed field/frame direct mode not supported\n"
water	102:51	0:0	12	"Mixed field/frame direct mode not supported\n"
water	102:99	0:0	10	;
return	103:20	103:26	10	
water	104:16	0:0	10	}
water	105:12	0:0	8	}
call	106:12	106:67	6	ff_vc1_pred_b_mv_intfi
arg	106:35	106:36	7	v
water	106:35	0:0	8	v
arg	106:38	106:39	7	0
water	106:38	0:0	8	0
arg	106:41	106:46	7	dmv_x
water	106:41	0:0	8	dmv_x
arg	106:48	106:53	7	dmv_y
water	106:48	0:0	8	dmv_y
arg	106:55	106:56	7	1
water	106:55	0:0	8	1
arg	106:58	106:67	7	pred_flag
water	106:58	0:0	8	pred_flag
water	106:68	0:0	6	;
call	107:12	107:75	6	vc1_b_mc
arg	107:21	107:22	7	v
water	107:21	0:0	8	v
arg	107:24	107:29	7	dmv_x
water	107:24	0:0	8	dmv_x
arg	107:31	107:36	7	dmv_y
water	107:31	0:0	8	dmv_y
arg	107:38	107:66	7	(bmvtype==BMV_TYPE_DIRECT)
water	107:38	0:0	8	(
water	107:39	0:0	8	bmvtype
op	107:47	0:0	8	==
water	107:50	0:0	8	BMV_TYPE_DIRECT
water	107:65	0:0	8	)
arg	107:68	107:75	7	bmvtype
water	107:68	0:0	8	bmvtype
water	107:76	0:0	6	;
water	108:12	0:0	6	mb_has_coeffs
op	108:26	0:0	6	=
op	108:28	0:0	6	!
water	108:29	0:0	6	(
water	108:30	0:0	6	idx_mbmode
op	108:41	0:0	6	&
water	108:43	0:0	6	2
water	108:44	0:0	6	)
water	108:45	0:0	6	;
water	109:8	0:0	6	}
else	109:10	127:8	4
stmts	109:15	127:8	5	
water	109:15	0:0	6	{
if	110:12	111:42	6	(fwd)
cond	110:16	110:16	7	fwd
water	110:16	0:0	8	fwd
stmts	111:16	111:42	7	
water	111:16	0:0	8	bmvtype
op	111:24	0:0	8	=
water	111:26	0:0	8	BMV_TYPE_FORWARD
water	111:42	0:0	8	;
water	112:12	0:0	6	v
op	112:13	0:0	6	->
water	112:15	0:0	6	bmvtype
op	112:24	0:0	6	=
water	112:26	0:0	6	bmvtype
water	112:33	0:0	6	;
water	113:12	0:0	6	v
op	113:13	0:0	6	->
water	113:15	0:0	6	fourmvbp
op	113:24	0:0	6	=
call	113:26	113:96	6	get_vlc2
arg	113:35	113:37	7	gb
water	113:35	0:0	8	gb
arg	113:39	113:61	7	v->fourmvbp_vlc->table
water	113:39	0:0	8	v
op	113:40	0:0	8	->
water	113:42	0:0	8	fourmvbp_vlc
op	113:54	0:0	8	->
water	113:56	0:0	8	table
arg	113:63	113:93	7	VC1_4MV_BLOCK_PATTERN_VLC_BITS
water	113:63	0:0	8	VC1_4MV_BLOCK_PATTERN_VLC_BITS
arg	113:95	113:96	7	1
water	113:95	0:0	8	1
water	113:97	0:0	6	;
for	114:12	124:12	6	(i = 0 ;i < 4;i ++)
forinit	114:17	114:22	7	i = 0 ;
water	114:17	0:0	8	i
op	114:19	0:0	8	=
water	114:21	0:0	8	0
water	114:22	0:0	8	;
cond	114:24	114:28	7	i < 4
water	114:24	0:0	8	i
op	114:26	0:0	8	<
water	114:28	0:0	8	4
forexpr	114:31	114:32	7	i ++
water	114:31	0:0	8	i
op	114:32	0:0	8	++
stmts	114:36	124:12	7	
water	114:36	0:0	8	{
water	115:16	0:0	8	dmv_x
op	115:21	0:0	8	[
water	115:22	0:0	8	0
op	115:23	0:0	8	]
op	115:25	0:0	8	=
water	115:27	0:0	8	dmv_y
op	115:32	0:0	8	[
water	115:33	0:0	8	0
op	115:34	0:0	8	]
op	115:36	0:0	8	=
water	115:38	0:0	8	pred_flag
op	115:47	0:0	8	[
water	115:48	0:0	8	0
op	115:49	0:0	8	]
op	115:51	0:0	8	=
water	115:53	0:0	8	0
water	115:54	0:0	8	;
water	116:16	0:0	8	dmv_x
op	116:21	0:0	8	[
water	116:22	0:0	8	1
op	116:23	0:0	8	]
op	116:25	0:0	8	=
water	116:27	0:0	8	dmv_y
op	116:32	0:0	8	[
water	116:33	0:0	8	1
op	116:34	0:0	8	]
op	116:36	0:0	8	=
water	116:38	0:0	8	pred_flag
op	116:47	0:0	8	[
water	116:48	0:0	8	1
op	116:49	0:0	8	]
op	116:51	0:0	8	=
water	116:53	0:0	8	0
water	116:54	0:0	8	;
if	117:16	121:16	8	(v -> fourmvbp & ( 8 >> i ))
cond	117:20	117:41	9	v -> fourmvbp & ( 8 >> i )
water	117:20	0:0	10	v
op	117:21	0:0	10	->
water	117:23	0:0	10	fourmvbp
op	117:32	0:0	10	&
water	117:34	0:0	10	(
water	117:35	0:0	10	8
op	117:37	0:0	10	>>
water	117:40	0:0	10	i
water	117:41	0:0	10	)
stmts	117:44	121:16	9	
water	117:44	0:0	10	{
call	118:20	120:81	10	get_mvdata_interlaced
arg	118:42	118:43	11	v
water	118:42	0:0	12	v
arg	118:45	118:81	11	&dmv_x[bmvtype==BMV_TYPE_BACKWARD]
op	118:45	0:0	12	&
water	118:46	0:0	12	dmv_x
op	118:51	0:0	12	[
water	118:52	0:0	12	bmvtype
op	118:60	0:0	12	==
water	118:63	0:0	12	BMV_TYPE_BACKWARD
op	118:80	0:0	12	]
arg	119:45	119:81	11	&dmv_y[bmvtype==BMV_TYPE_BACKWARD]
op	119:45	0:0	12	&
water	119:46	0:0	12	dmv_y
op	119:51	0:0	12	[
water	119:52	0:0	12	bmvtype
op	119:60	0:0	12	==
water	119:63	0:0	12	BMV_TYPE_BACKWARD
op	119:80	0:0	12	]
arg	120:41	120:81	11	&pred_flag[bmvtype==BMV_TYPE_BACKWARD]
op	120:41	0:0	12	&
water	120:42	0:0	12	pred_flag
op	120:51	0:0	12	[
water	120:52	0:0	12	bmvtype
op	120:60	0:0	12	==
water	120:63	0:0	12	BMV_TYPE_BACKWARD
op	120:80	0:0	12	]
water	120:82	0:0	10	;
water	121:16	0:0	10	}
call	122:16	122:71	8	ff_vc1_pred_b_mv_intfi
arg	122:39	122:40	9	v
water	122:39	0:0	10	v
arg	122:42	122:43	9	i
water	122:42	0:0	10	i
arg	122:45	122:50	9	dmv_x
water	122:45	0:0	10	dmv_x
arg	122:52	122:57	9	dmv_y
water	122:52	0:0	10	dmv_y
arg	122:59	122:60	9	0
water	122:59	0:0	10	0
arg	122:62	122:71	9	pred_flag
water	122:62	0:0	10	pred_flag
water	122:72	0:0	8	;
call	123:16	123:72	8	ff_vc1_mc_4mv_luma
arg	123:35	123:36	9	v
water	123:35	0:0	10	v
arg	123:38	123:39	9	i
water	123:38	0:0	10	i
arg	123:41	123:69	9	bmvtype==BMV_TYPE_BACKWARD
water	123:41	0:0	10	bmvtype
op	123:49	0:0	10	==
water	123:52	0:0	10	BMV_TYPE_BACKWARD
arg	123:71	123:72	9	0
water	123:71	0:0	10	0
water	123:73	0:0	8	;
water	124:12	0:0	8	}
call	125:12	125:64	6	ff_vc1_mc_4mv_chroma
arg	125:33	125:34	7	v
water	125:33	0:0	8	v
arg	125:36	125:64	7	bmvtype==BMV_TYPE_BACKWARD
water	125:36	0:0	8	bmvtype
op	125:44	0:0	8	==
water	125:47	0:0	8	BMV_TYPE_BACKWARD
water	125:65	0:0	6	;
water	126:12	0:0	6	mb_has_coeffs
op	126:26	0:0	6	=
water	126:28	0:0	6	idx_mbmode
op	126:39	0:0	6	&
water	126:41	0:0	6	1
water	126:42	0:0	6	;
water	127:8	0:0	6	}
if	128:8	129:86	4	(mb_has_coeffs)
cond	128:12	128:12	5	mb_has_coeffs
water	128:12	0:0	6	mb_has_coeffs
stmts	129:12	129:86	5	
water	129:12	0:0	6	cbp
op	129:16	0:0	6	=
water	129:18	0:0	6	1
op	129:20	0:0	6	+
call	129:22	129:85	6	get_vlc2
arg	129:31	129:39	7	&v->s.gb
op	129:31	0:0	8	&
water	129:32	0:0	8	v
op	129:33	0:0	8	->
water	129:35	0:0	8	s
op	129:36	0:0	8	.
water	129:37	0:0	8	gb
arg	129:41	129:60	7	v->cbpcy_vlc->table
water	129:41	0:0	8	v
op	129:42	0:0	8	->
water	129:44	0:0	8	cbpcy_vlc
op	129:53	0:0	8	->
water	129:55	0:0	8	table
arg	129:62	129:82	7	VC1_CBPCY_P_VLC_BITS
water	129:62	0:0	8	VC1_CBPCY_P_VLC_BITS
arg	129:84	129:85	7	2
water	129:84	0:0	8	2
water	129:86	0:0	6	;
if	130:8	132:8	4	(cbp)
cond	130:12	130:12	5	cbp
water	130:12	0:0	6	cbp
stmts	130:17	132:8	5	
water	130:17	0:0	6	{
call	131:12	131:23	6	GET_MQUANT
water	131:24	0:0	6	;
water	132:8	0:0	6	}
water	133:8	0:0	4	s
op	133:9	0:0	4	->
water	133:11	0:0	4	current_picture
op	133:26	0:0	4	.
water	133:27	0:0	4	qscale_table
op	133:39	0:0	4	[
water	133:40	0:0	4	mb_pos
op	133:46	0:0	4	]
op	133:48	0:0	4	=
water	133:50	0:0	4	mquant
water	133:56	0:0	4	;
if	134:8	136:8	4	(! v -> ttmbf && cbp)
cond	134:12	134:25	5	! v -> ttmbf && cbp
op	134:12	0:0	6	!
water	134:13	0:0	6	v
op	134:14	0:0	6	->
water	134:16	0:0	6	ttmbf
op	134:22	0:0	6	&&
water	134:25	0:0	6	cbp
stmts	134:30	136:8	5	
water	134:30	0:0	6	{
water	135:12	0:0	6	ttmb
op	135:17	0:0	6	=
call	135:19	135:88	6	get_vlc2
arg	135:28	135:30	7	gb
water	135:28	0:0	8	gb
arg	135:32	135:66	7	ff_vc1_ttmb_vlc[v->tt_index].table
water	135:32	0:0	8	ff_vc1_ttmb_vlc
op	135:47	0:0	8	[
water	135:48	0:0	8	v
op	135:49	0:0	8	->
water	135:51	0:0	8	tt_index
op	135:59	0:0	8	]
op	135:60	0:0	8	.
water	135:61	0:0	8	table
arg	135:68	135:85	7	VC1_TTMB_VLC_BITS
water	135:68	0:0	8	VC1_TTMB_VLC_BITS
arg	135:87	135:88	7	2
water	135:87	0:0	8	2
water	135:89	0:0	6	;
water	136:8	0:0	6	}
water	137:8	0:0	4	dst_idx
op	137:16	0:0	4	=
water	137:18	0:0	4	0
water	137:19	0:0	4	;
for	138:8	152:8	4	(i = 0 ;i < 6;i ++)
forinit	138:13	138:18	5	i = 0 ;
water	138:13	0:0	6	i
op	138:15	0:0	6	=
water	138:17	0:0	6	0
water	138:18	0:0	6	;
cond	138:20	138:24	5	i < 6
water	138:20	0:0	6	i
op	138:22	0:0	6	<
water	138:24	0:0	6	6
forexpr	138:27	138:28	5	i ++
water	138:27	0:0	6	i
op	138:28	0:0	6	++
stmts	138:32	152:8	5	
water	138:32	0:0	6	{
water	139:12	0:0	6	s
op	139:13	0:0	6	->
water	139:15	0:0	6	dc_val
op	139:21	0:0	6	[
water	139:22	0:0	6	0
op	139:23	0:0	6	]
op	139:24	0:0	6	[
water	139:25	0:0	6	s
op	139:26	0:0	6	->
water	139:28	0:0	6	block_index
op	139:39	0:0	6	[
water	139:40	0:0	6	i
op	139:41	0:0	6	]
op	139:42	0:0	6	]
op	139:44	0:0	6	=
water	139:46	0:0	6	0
water	139:47	0:0	6	;
water	140:12	0:0	6	dst_idx
op	140:20	0:0	6	+=
water	140:23	0:0	6	i
op	140:25	0:0	6	>>
water	140:28	0:0	6	2
water	140:29	0:0	6	;
water	141:12	0:0	6	val
op	141:16	0:0	6	=
water	141:18	0:0	6	(
water	141:19	0:0	6	(
water	141:20	0:0	6	cbp
op	141:24	0:0	6	>>
water	141:27	0:0	6	(
water	141:28	0:0	6	5
op	141:30	0:0	6	-
water	141:32	0:0	6	i
water	141:33	0:0	6	)
water	141:34	0:0	6	)
op	141:36	0:0	6	&
water	141:38	0:0	6	1
water	141:39	0:0	6	)
water	141:40	0:0	6	;
water	142:12	0:0	6	off
op	142:16	0:0	6	=
water	142:18	0:0	6	(
water	142:19	0:0	6	i
op	142:21	0:0	6	&
water	142:23	0:0	6	4
water	142:24	0:0	6	)
water	142:26	0:0	6	?
water	142:28	0:0	6	0
water	142:30	0:0	6	:
water	142:32	0:0	6	(
water	142:33	0:0	6	i
op	142:35	0:0	6	&
water	142:37	0:0	6	1
water	142:38	0:0	6	)
op	142:40	0:0	6	*
water	142:42	0:0	6	8
op	142:44	0:0	6	+
water	142:46	0:0	6	(
water	142:47	0:0	6	i
op	142:49	0:0	6	&
water	142:51	0:0	6	2
water	142:52	0:0	6	)
op	142:54	0:0	6	*
water	142:56	0:0	6	4
op	142:58	0:0	6	*
water	142:60	0:0	6	s
op	142:61	0:0	6	->
water	142:63	0:0	6	linesize
water	142:71	0:0	6	;
if	143:12	151:12	6	(val)
cond	143:16	143:16	7	val
water	143:16	0:0	8	val
stmts	143:21	151:12	7	
water	143:21	0:0	8	{
call	144:16	147:105	8	vc1_decode_p_block
arg	144:35	144:36	9	v
water	144:35	0:0	10	v
arg	144:38	144:49	9	s->block[i]
water	144:38	0:0	10	s
op	144:39	0:0	10	->
water	144:41	0:0	10	block
op	144:46	0:0	10	[
water	144:47	0:0	10	i
op	144:48	0:0	10	]
arg	144:51	144:52	9	i
water	144:51	0:0	10	i
arg	144:54	144:60	9	mquant
water	144:54	0:0	10	mquant
arg	144:62	144:66	9	ttmb
water	144:62	0:0	10	ttmb
arg	145:35	145:46	9	first_block
water	145:35	0:0	10	first_block
arg	145:48	145:70	9	s->dest[dst_idx]+off
water	145:48	0:0	10	s
op	145:49	0:0	10	->
water	145:51	0:0	10	dest
op	145:55	0:0	10	[
water	145:56	0:0	10	dst_idx
op	145:63	0:0	10	]
op	145:65	0:0	10	+
water	145:67	0:0	10	off
arg	146:35	146:72	9	(i&4)?s->uvlinesize:s->linesize
water	146:35	0:0	10	(
water	146:36	0:0	10	i
op	146:38	0:0	10	&
water	146:40	0:0	10	4
water	146:41	0:0	10	)
water	146:43	0:0	10	?
water	146:45	0:0	10	s
op	146:46	0:0	10	->
water	146:48	0:0	10	uvlinesize
water	146:59	0:0	10	:
water	146:61	0:0	10	s
op	146:62	0:0	10	->
water	146:64	0:0	10	linesize
arg	147:35	147:99	9	CONFIG_GRAY&&(i&4)&&(s->avctx->flags&AV_CODEC_FLAG_GRAY)
water	147:35	0:0	10	CONFIG_GRAY
op	147:47	0:0	10	&&
water	147:50	0:0	10	(
water	147:51	0:0	10	i
op	147:53	0:0	10	&
water	147:55	0:0	10	4
water	147:56	0:0	10	)
op	147:58	0:0	10	&&
water	147:61	0:0	10	(
water	147:62	0:0	10	s
op	147:63	0:0	10	->
water	147:65	0:0	10	avctx
op	147:70	0:0	10	->
water	147:72	0:0	10	flags
op	147:78	0:0	10	&
water	147:80	0:0	10	AV_CODEC_FLAG_GRAY
water	147:98	0:0	10	)
arg	147:101	147:105	9	NULL
water	147:101	0:0	10	NULL
water	147:106	0:0	8	;
if	148:16	149:29	8	(! v -> ttmbf && ttmb < 8)
cond	148:20	148:40	9	! v -> ttmbf && ttmb < 8
op	148:20	0:0	10	!
water	148:21	0:0	10	v
op	148:22	0:0	10	->
water	148:24	0:0	10	ttmbf
op	148:30	0:0	10	&&
water	148:33	0:0	10	ttmb
op	148:38	0:0	10	<
water	148:40	0:0	10	8
stmts	149:20	149:29	9	
water	149:20	0:0	10	ttmb
op	149:25	0:0	10	=
op	149:27	0:0	10	-
water	149:28	0:0	10	1
water	149:29	0:0	10	;
water	150:16	0:0	8	first_block
op	150:28	0:0	8	=
water	150:30	0:0	8	0
water	150:31	0:0	8	;
water	151:12	0:0	8	}
water	152:8	0:0	6	}
water	153:4	0:0	4	}
