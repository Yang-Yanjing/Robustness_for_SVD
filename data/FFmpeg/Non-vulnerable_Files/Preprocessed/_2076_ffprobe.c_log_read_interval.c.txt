func	1:0	20:0	0	static void	log_read_interval
params	1:29	0:0	1	
param	1:30	1:58	2	const ReadInterval *	interval
param	1:60	1:73	2	void *	log_ctx
param	1:75	1:88	2	int	log_level
stmnts	3:4	19:36	1	
call	3:4	3:52	2	av_log
arg	3:11	3:18	3	log_ctx
water	3:11	0:0	4	log_ctx
arg	3:20	3:29	3	log_level
water	3:20	0:0	4	log_level
arg	3:31	3:38	3	"id:%d"
water	3:31	0:0	4	"id:%d"
arg	3:40	3:52	3	interval->id
water	3:40	0:0	4	interval
op	3:48	0:0	4	->
water	3:50	0:0	4	id
water	3:53	0:0	2	;
if	4:4	7:4	2	(interval -> has_start)
cond	4:8	4:18	3	interval -> has_start
water	4:8	0:0	4	interval
op	4:16	0:0	4	->
water	4:18	0:0	4	has_start
stmts	4:29	7:4	3	
water	4:29	0:0	4	{
call	5:8	6:62	4	av_log
arg	5:15	5:22	5	log_ctx
water	5:15	0:0	6	log_ctx
arg	5:24	5:33	5	log_level
water	5:24	0:0	6	log_level
arg	5:35	5:48	5	" start:%s%s"
water	5:35	0:0	6	" start:%s%s"
arg	5:50	5:86	5	interval->start_is_offset?"+":""
water	5:50	0:0	6	interval
op	5:58	0:0	6	->
water	5:60	0:0	6	start_is_offset
water	5:76	0:0	6	?
water	5:78	0:0	6	"+"
water	5:82	0:0	6	:
water	5:84	0:0	6	""
arg	6:15	6:62	5	av_ts2timestr(interval->start,&AV_TIME_BASE_Q)
call	6:15	6:61	6	av_ts2timestr
arg	6:29	6:44	7	interval->start
water	6:29	0:0	8	interval
op	6:37	0:0	8	->
water	6:39	0:0	8	start
arg	6:46	6:61	7	&AV_TIME_BASE_Q
op	6:46	0:0	8	&
water	6:47	0:0	8	AV_TIME_BASE_Q
water	6:63	0:0	4	;
water	7:4	0:0	4	}
else	7:6	9:4	2
stmts	7:11	9:4	3	
water	7:11	0:0	4	{
call	8:8	8:47	4	av_log
arg	8:15	8:22	5	log_ctx
water	8:15	0:0	6	log_ctx
arg	8:24	8:33	5	log_level
water	8:24	0:0	6	log_level
arg	8:35	8:47	5	" start:N/A"
water	8:35	0:0	6	" start:N/A"
water	8:48	0:0	4	;
water	9:4	0:0	4	}
if	10:4	16:4	2	(interval -> has_end)
cond	10:8	10:18	3	interval -> has_end
water	10:8	0:0	4	interval
op	10:16	0:0	4	->
water	10:18	0:0	4	has_end
stmts	10:27	16:4	3	
water	10:27	0:0	4	{
call	11:8	11:80	4	av_log
arg	11:15	11:22	5	log_ctx
water	11:15	0:0	6	log_ctx
arg	11:24	11:33	5	log_level
water	11:24	0:0	6	log_level
arg	11:35	11:44	5	" end:%s"
water	11:35	0:0	6	" end:%s"
arg	11:46	11:80	5	interval->end_is_offset?"+":""
water	11:46	0:0	6	interval
op	11:54	0:0	6	->
water	11:56	0:0	6	end_is_offset
water	11:70	0:0	6	?
water	11:72	0:0	6	"+"
water	11:76	0:0	6	:
water	11:78	0:0	6	""
water	11:81	0:0	4	;
if	12:8	13:65	4	(interval -> duration_frames)
cond	12:12	12:22	5	interval -> duration_frames
water	12:12	0:0	6	interval
op	12:20	0:0	6	->
water	12:22	0:0	6	duration_frames
stmts	13:12	13:65	5	
call	13:12	13:64	6	av_log
arg	13:19	13:26	7	log_ctx
water	13:19	0:0	8	log_ctx
arg	13:28	13:37	7	log_level
water	13:28	0:0	8	log_level
arg	13:39	13:49	7	"#%"PRId64
water	13:39	0:0	8	"#%"
water	13:43	0:0	8	PRId64
arg	13:51	13:64	7	interval->end
water	13:51	0:0	8	interval
op	13:59	0:0	8	->
water	13:61	0:0	8	end
water	13:65	0:0	6	;
else	14:8	15:91	4
stmts	15:12	15:91	5	
call	15:12	15:90	6	av_log
arg	15:19	15:26	7	log_ctx
water	15:19	0:0	8	log_ctx
arg	15:28	15:37	7	log_level
water	15:28	0:0	8	log_level
arg	15:39	15:43	7	"%s"
water	15:39	0:0	8	"%s"
arg	15:45	15:90	7	av_ts2timestr(interval->end,&AV_TIME_BASE_Q)
call	15:45	15:89	8	av_ts2timestr
arg	15:59	15:72	9	interval->end
water	15:59	0:0	10	interval
op	15:67	0:0	10	->
water	15:69	0:0	10	end
arg	15:74	15:89	9	&AV_TIME_BASE_Q
op	15:74	0:0	10	&
water	15:75	0:0	10	AV_TIME_BASE_Q
water	15:91	0:0	6	;
water	16:4	0:0	4	}
else	16:6	18:4	2
stmts	16:11	18:4	3	
water	16:11	0:0	4	{
call	17:8	17:45	4	av_log
arg	17:15	17:22	5	log_ctx
water	17:15	0:0	6	log_ctx
arg	17:24	17:33	5	log_level
water	17:24	0:0	6	log_level
arg	17:35	17:45	5	" end:N/A"
water	17:35	0:0	6	" end:N/A"
water	17:46	0:0	4	;
water	18:4	0:0	4	}
call	19:4	19:35	2	av_log
arg	19:11	19:18	3	log_ctx
water	19:11	0:0	4	log_ctx
arg	19:20	19:29	3	log_level
water	19:20	0:0	4	log_level
arg	19:31	19:35	3	"\n"
water	19:31	0:0	4	"\n"
water	19:36	0:0	2	;
