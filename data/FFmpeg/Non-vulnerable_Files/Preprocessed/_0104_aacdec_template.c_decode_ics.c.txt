func	1:0	64:0	0	static int	decode_ics
params	1:21	0:0	1	
param	1:22	1:36	2	AACContext *	ac
param	1:38	1:63	2	SingleChannelElement *	sce
param	2:22	2:39	2	GetBitContext *	gb
param	2:41	2:58	2	int	common_window
param	2:60	2:74	2	int	scale_flag
stmnts	0:0	63:12	1	
decl	4:4	4:15	2	Pulse	pulse
decl	5:4	5:44	2	TemporalNoiseShaping	*tns
op	5:33	0:0	2	=
op	5:35	0:0	2	&
water	5:36	0:0	2	sce
op	5:39	0:0	2	->
water	5:41	0:0	2	tns
decl	6:4	6:44	2	IndividualChannelStream	*ics
op	6:33	0:0	2	=
op	6:35	0:0	2	&
water	6:36	0:0	2	sce
op	6:39	0:0	2	->
water	6:41	0:0	2	ics
decl	7:4	7:31	2	INTFLOAT	*out
op	7:18	0:0	2	=
water	7:20	0:0	2	sce
op	7:23	0:0	2	->
water	7:25	0:0	2	coeffs
decl	8:4	8:61	2	int	global_gain
water	8:19	0:0	2	,
decl	8:4	8:61	2	int	eld_syntax
water	8:31	0:0	2	,
decl	8:4	8:61	2	int	er_syntax
water	8:42	0:0	2	,
decl	8:4	8:61	2	int	pulse_present
op	8:58	0:0	2	=
water	8:60	0:0	2	0
decl	9:4	9:11	2	int	ret
water	10:4	0:0	2	eld_syntax
op	10:15	0:0	2	=
water	10:17	0:0	2	ac
op	10:19	0:0	2	->
water	10:21	0:0	2	oc
op	10:23	0:0	2	[
water	10:24	0:0	2	1
op	10:25	0:0	2	]
op	10:26	0:0	2	.
water	10:27	0:0	2	m4ac
op	10:31	0:0	2	.
water	10:32	0:0	2	object_type
op	10:44	0:0	2	==
water	10:47	0:0	2	AOT_ER_AAC_ELD
water	10:61	0:0	2	;
water	11:4	0:0	2	er_syntax
op	11:15	0:0	2	=
water	11:17	0:0	2	ac
op	11:19	0:0	2	->
water	11:21	0:0	2	oc
op	11:23	0:0	2	[
water	11:24	0:0	2	1
op	11:25	0:0	2	]
op	11:26	0:0	2	.
water	11:27	0:0	2	m4ac
op	11:31	0:0	2	.
water	11:32	0:0	2	object_type
op	11:44	0:0	2	==
water	11:47	0:0	2	AOT_ER_AAC_LC
op	11:61	0:0	2	||
water	12:17	0:0	2	ac
op	12:19	0:0	2	->
water	12:21	0:0	2	oc
op	12:23	0:0	2	[
water	12:24	0:0	2	1
op	12:25	0:0	2	]
op	12:26	0:0	2	.
water	12:27	0:0	2	m4ac
op	12:31	0:0	2	.
water	12:32	0:0	2	object_type
op	12:44	0:0	2	==
water	12:47	0:0	2	AOT_ER_AAC_LTP
op	12:62	0:0	2	||
water	13:17	0:0	2	ac
op	13:19	0:0	2	->
water	13:21	0:0	2	oc
op	13:23	0:0	2	[
water	13:24	0:0	2	1
op	13:25	0:0	2	]
op	13:26	0:0	2	.
water	13:27	0:0	2	m4ac
op	13:31	0:0	2	.
water	13:32	0:0	2	object_type
op	13:44	0:0	2	==
water	13:47	0:0	2	AOT_ER_AAC_LD
op	13:61	0:0	2	||
water	14:17	0:0	2	ac
op	14:19	0:0	2	->
water	14:21	0:0	2	oc
op	14:23	0:0	2	[
water	14:24	0:0	2	1
op	14:25	0:0	2	]
op	14:26	0:0	2	.
water	14:27	0:0	2	m4ac
op	14:31	0:0	2	.
water	14:32	0:0	2	object_type
op	14:44	0:0	2	==
water	14:47	0:0	2	AOT_ER_AAC_ELD
water	14:61	0:0	2	;
water	18:4	0:0	2	pulse
op	18:9	0:0	2	.
water	18:10	0:0	2	num_pulse
op	18:20	0:0	2	=
water	18:22	0:0	2	0
water	18:23	0:0	2	;
water	19:4	0:0	2	global_gain
op	19:16	0:0	2	=
call	19:18	19:32	2	get_bits
arg	19:27	19:29	3	gb
water	19:27	0:0	4	gb
arg	19:31	19:32	3	8
water	19:31	0:0	4	8
water	19:33	0:0	2	;
if	20:4	23:4	2	(! common_window && ! scale_flag)
cond	20:8	20:27	3	! common_window && ! scale_flag
op	20:8	0:0	4	!
water	20:9	0:0	4	common_window
op	20:23	0:0	4	&&
op	20:26	0:0	4	!
water	20:27	0:0	4	scale_flag
stmts	20:39	23:4	3	
water	20:39	0:0	4	{
if	21:8	22:38	4	(decode_ics_info (ac ,ics ,gb ) < 0)
cond	21:12	21:43	5	decode_ics_info (ac ,ics ,gb ) < 0
call	21:12	21:39	6	decode_ics_info
arg	21:28	21:30	7	ac
water	21:28	0:0	8	ac
arg	21:32	21:35	7	ics
water	21:32	0:0	8	ics
arg	21:37	21:39	7	gb
water	21:37	0:0	8	gb
op	21:41	0:0	6	<
water	21:43	0:0	6	0
stmts	22:12	22:38	5	
return	22:12	22:38	6	AVERROR_INVALIDDATA
water	22:19	0:0	7	AVERROR_INVALIDDATA
water	23:4	0:0	4	}
if	24:4	26:18	2	(( ret =decode_band_types (ac ,sce -> band_type ,sce -> band_type_run_end ,gb ,ics ) ) < 0)
cond	24:8	25:69	3	( ret =decode_band_types (ac ,sce -> band_type ,sce -> band_type_run_end ,gb ,ics ) ) < 0
water	24:8	0:0	4	(
water	24:9	0:0	4	ret
op	24:13	0:0	4	=
call	24:15	25:64	4	decode_band_types
arg	24:33	24:35	5	ac
water	24:33	0:0	6	ac
arg	24:37	24:51	5	sce->band_type
water	24:37	0:0	6	sce
op	24:40	0:0	6	->
water	24:42	0:0	6	band_type
arg	25:33	25:55	5	sce->band_type_run_end
water	25:33	0:0	6	sce
op	25:36	0:0	6	->
water	25:38	0:0	6	band_type_run_end
arg	25:57	25:59	5	gb
water	25:57	0:0	6	gb
arg	25:61	25:64	5	ics
water	25:61	0:0	6	ics
water	25:65	0:0	4	)
op	25:67	0:0	4	<
water	25:69	0:0	4	0
stmts	26:8	26:18	3	
return	26:8	26:18	4	ret
water	26:15	0:0	5	ret
if	27:4	29:18	2	(( ret =decode_scalefactors (ac ,sce -> sf ,gb ,global_gain ,ics ,sce -> band_type ,sce -> band_type_run_end ) ) < 0)
cond	27:8	28:77	3	( ret =decode_scalefactors (ac ,sce -> sf ,gb ,global_gain ,ics ,sce -> band_type ,sce -> band_type_run_end ) ) < 0
water	27:8	0:0	4	(
water	27:9	0:0	4	ret
op	27:13	0:0	4	=
call	27:15	28:72	4	decode_scalefactors
arg	27:35	27:37	5	ac
water	27:35	0:0	6	ac
arg	27:39	27:46	5	sce->sf
water	27:39	0:0	6	sce
op	27:42	0:0	6	->
water	27:44	0:0	6	sf
arg	27:48	27:50	5	gb
water	27:48	0:0	6	gb
arg	27:52	27:63	5	global_gain
water	27:52	0:0	6	global_gain
arg	27:65	27:68	5	ics
water	27:65	0:0	6	ics
arg	28:34	28:48	5	sce->band_type
water	28:34	0:0	6	sce
op	28:37	0:0	6	->
water	28:39	0:0	6	band_type
arg	28:50	28:72	5	sce->band_type_run_end
water	28:50	0:0	6	sce
op	28:53	0:0	6	->
water	28:55	0:0	6	band_type_run_end
water	28:73	0:0	4	)
op	28:75	0:0	4	<
water	28:77	0:0	4	0
stmts	29:8	29:18	3	
return	29:8	29:18	4	ret
water	29:15	0:0	5	ret
water	30:4	0:0	2	pulse_present
op	30:18	0:0	2	=
water	30:20	0:0	2	0
water	30:21	0:0	2	;
if	31:4	57:4	2	(! scale_flag)
cond	31:8	31:9	3	! scale_flag
op	31:8	0:0	4	!
water	31:9	0:0	4	scale_flag
stmts	31:21	57:4	3	
water	31:21	0:0	4	{
if	32:8	43:8	4	(! eld_syntax && ( pulse_present =get_bits1 (gb ) ))
cond	32:12	32:57	5	! eld_syntax && ( pulse_present =get_bits1 (gb ) )
op	32:12	0:0	6	!
water	32:13	0:0	6	eld_syntax
op	32:24	0:0	6	&&
water	32:27	0:0	6	(
water	32:28	0:0	6	pulse_present
op	32:42	0:0	6	=
call	32:44	32:56	6	get_bits1
arg	32:54	32:56	7	gb
water	32:54	0:0	8	gb
water	32:57	0:0	6	)
stmts	32:60	43:8	5	
water	32:60	0:0	6	{
if	33:12	37:12	6	(ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE)
cond	33:16	33:43	7	ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE
water	33:16	0:0	8	ics
op	33:19	0:0	8	->
water	33:21	0:0	8	window_sequence
op	33:36	0:0	8	[
water	33:37	0:0	8	0
op	33:38	0:0	8	]
op	33:40	0:0	8	==
water	33:43	0:0	8	EIGHT_SHORT_SEQUENCE
stmts	33:65	37:12	7	
water	33:65	0:0	8	{
call	34:16	35:74	8	av_log
arg	34:23	34:32	9	ac->avctx
water	34:23	0:0	10	ac
op	34:25	0:0	10	->
water	34:27	0:0	10	avctx
arg	34:34	34:46	9	AV_LOG_ERROR
water	34:34	0:0	10	AV_LOG_ERROR
arg	35:23	35:74	9	"Pulse tool not allowed in eight short sequence.\n"
water	35:23	0:0	10	"Pulse tool not allowed in eight short sequence.\n"
water	35:75	0:0	8	;
return	36:16	36:42	8	AVERROR_INVALIDDATA
water	36:23	0:0	9	AVERROR_INVALIDDATA
water	37:12	0:0	8	}
if	38:12	42:12	6	(decode_pulses (& pulse ,gb ,ics -> swb_offset ,ics -> num_swb ))
cond	38:16	38:71	7	decode_pulses (& pulse ,gb ,ics -> swb_offset ,ics -> num_swb )
call	38:16	38:71	8	decode_pulses
arg	38:30	38:36	9	&pulse
op	38:30	0:0	10	&
water	38:31	0:0	10	pulse
arg	38:38	38:40	9	gb
water	38:38	0:0	10	gb
arg	38:42	38:57	9	ics->swb_offset
water	38:42	0:0	10	ics
op	38:45	0:0	10	->
water	38:47	0:0	10	swb_offset
arg	38:59	38:71	9	ics->num_swb
water	38:59	0:0	10	ics
op	38:62	0:0	10	->
water	38:64	0:0	10	num_swb
stmts	38:74	42:12	7	
water	38:74	0:0	8	{
call	39:16	40:57	8	av_log
arg	39:23	39:32	9	ac->avctx
water	39:23	0:0	10	ac
op	39:25	0:0	10	->
water	39:27	0:0	10	avctx
arg	39:34	39:46	9	AV_LOG_ERROR
water	39:34	0:0	10	AV_LOG_ERROR
arg	40:23	40:57	9	"Pulse data corrupt or invalid.\n"
water	40:23	0:0	10	"Pulse data corrupt or invalid.\n"
water	40:58	0:0	8	;
return	41:16	41:42	8	AVERROR_INVALIDDATA
water	41:23	0:0	9	AVERROR_INVALIDDATA
water	42:12	0:0	8	}
water	43:8	0:0	6	}
water	44:8	0:0	4	tns
op	44:11	0:0	4	->
water	44:13	0:0	4	present
op	44:21	0:0	4	=
call	44:23	44:35	4	get_bits1
arg	44:33	44:35	5	gb
water	44:33	0:0	6	gb
water	44:36	0:0	4	;
if	45:8	47:42	4	(tns -> present && ! er_syntax)
cond	45:12	45:29	5	tns -> present && ! er_syntax
water	45:12	0:0	6	tns
op	45:15	0:0	6	->
water	45:17	0:0	6	present
op	45:25	0:0	6	&&
op	45:28	0:0	6	!
water	45:29	0:0	6	er_syntax
stmts	46:12	47:42	5	
if	46:12	47:42	6	(decode_tns (ac ,tns ,gb ,ics ) < 0)
cond	46:16	46:47	7	decode_tns (ac ,tns ,gb ,ics ) < 0
call	46:16	46:43	8	decode_tns
arg	46:27	46:29	9	ac
water	46:27	0:0	10	ac
arg	46:31	46:34	9	tns
water	46:31	0:0	10	tns
arg	46:36	46:38	9	gb
water	46:36	0:0	10	gb
arg	46:40	46:43	9	ics
water	46:40	0:0	10	ics
op	46:45	0:0	8	<
water	46:47	0:0	8	0
stmts	47:16	47:42	7	
return	47:16	47:42	8	AVERROR_INVALIDDATA
water	47:23	0:0	9	AVERROR_INVALIDDATA
if	48:8	51:8	4	(! eld_syntax &&get_bits1 (gb ))
cond	48:12	48:39	5	! eld_syntax &&get_bits1 (gb )
op	48:12	0:0	6	!
water	48:13	0:0	6	eld_syntax
op	48:24	0:0	6	&&
call	48:27	48:39	6	get_bits1
arg	48:37	48:39	7	gb
water	48:37	0:0	8	gb
stmts	48:42	51:8	5	
water	48:42	0:0	6	{
call	49:12	49:50	6	avpriv_request_sample
arg	49:34	49:43	7	ac->avctx
water	49:34	0:0	8	ac
op	49:36	0:0	8	->
water	49:38	0:0	8	avctx
arg	49:45	49:50	7	"SSR"
water	49:45	0:0	8	"SSR"
water	49:51	0:0	6	;
return	50:12	50:39	6	AVERROR_PATCHWELCOME
water	50:19	0:0	7	AVERROR_PATCHWELCOME
water	51:8	0:0	6	}
if	54:8	56:42	4	(tns -> present && er_syntax)
cond	54:12	54:28	5	tns -> present && er_syntax
water	54:12	0:0	6	tns
op	54:15	0:0	6	->
water	54:17	0:0	6	present
op	54:25	0:0	6	&&
water	54:28	0:0	6	er_syntax
stmts	55:12	56:42	5	
if	55:12	56:42	6	(decode_tns (ac ,tns ,gb ,ics ) < 0)
cond	55:16	55:47	7	decode_tns (ac ,tns ,gb ,ics ) < 0
call	55:16	55:43	8	decode_tns
arg	55:27	55:29	9	ac
water	55:27	0:0	10	ac
arg	55:31	55:34	9	tns
water	55:31	0:0	10	tns
arg	55:36	55:38	9	gb
water	55:36	0:0	10	gb
arg	55:40	55:43	9	ics
water	55:40	0:0	10	ics
op	55:45	0:0	8	<
water	55:47	0:0	8	0
stmts	56:16	56:42	7	
return	56:16	56:42	8	AVERROR_INVALIDDATA
water	56:23	0:0	9	AVERROR_INVALIDDATA
water	57:4	0:0	4	}
if	58:4	60:34	2	(decode_spectrum_and_dequant (ac ,out ,gb ,sce -> sf ,pulse_present ,& pulse ,ics ,sce -> band_type ) < 0)
cond	58:8	59:67	3	decode_spectrum_and_dequant (ac ,out ,gb ,sce -> sf ,pulse_present ,& pulse ,ics ,sce -> band_type ) < 0
call	58:8	59:63	4	decode_spectrum_and_dequant
arg	58:36	58:38	5	ac
water	58:36	0:0	6	ac
arg	58:40	58:43	5	out
water	58:40	0:0	6	out
arg	58:45	58:47	5	gb
water	58:45	0:0	6	gb
arg	58:49	58:56	5	sce->sf
water	58:49	0:0	6	sce
op	58:52	0:0	6	->
water	58:54	0:0	6	sf
arg	58:58	58:71	5	pulse_present
water	58:58	0:0	6	pulse_present
arg	59:36	59:42	5	&pulse
op	59:36	0:0	6	&
water	59:37	0:0	6	pulse
arg	59:44	59:47	5	ics
water	59:44	0:0	6	ics
arg	59:49	59:63	5	sce->band_type
water	59:49	0:0	6	sce
op	59:52	0:0	6	->
water	59:54	0:0	6	band_type
op	59:65	0:0	4	<
water	59:67	0:0	4	0
stmts	60:8	60:34	3	
return	60:8	60:34	4	AVERROR_INVALIDDATA
water	60:15	0:0	5	AVERROR_INVALIDDATA
if	61:4	62:33	2	(ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_MAIN && ! common_window)
cond	61:8	61:55	3	ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_MAIN && ! common_window
water	61:8	0:0	4	ac
op	61:10	0:0	4	->
water	61:12	0:0	4	oc
op	61:14	0:0	4	[
water	61:15	0:0	4	1
op	61:16	0:0	4	]
op	61:17	0:0	4	.
water	61:18	0:0	4	m4ac
op	61:22	0:0	4	.
water	61:23	0:0	4	object_type
op	61:35	0:0	4	==
water	61:38	0:0	4	AOT_AAC_MAIN
op	61:51	0:0	4	&&
op	61:54	0:0	4	!
water	61:55	0:0	4	common_window
stmts	62:8	62:33	3	
call	62:8	62:32	4	apply_prediction
arg	62:25	62:27	5	ac
water	62:25	0:0	6	ac
arg	62:29	62:32	5	sce
water	62:29	0:0	6	sce
water	62:33	0:0	4	;
return	63:4	63:12	2	0
water	63:11	0:0	3	0
