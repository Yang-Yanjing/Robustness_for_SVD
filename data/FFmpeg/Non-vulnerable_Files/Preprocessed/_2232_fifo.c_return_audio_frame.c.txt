func	1:0	72:0	0	static int	return_audio_frame
params	1:29	0:0	1	
param	1:30	1:50	2	AVFilterContext *	ctx
stmnts	0:0	71:37	1	
decl	3:4	3:40	2	AVFilterLink	*link
op	3:23	0:0	2	=
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	outputs
op	3:37	0:0	2	[
water	3:38	0:0	2	0
op	3:39	0:0	2	]
decl	4:4	4:30	2	FifoContext	*s
op	4:19	0:0	2	=
water	4:21	0:0	2	ctx
op	4:24	0:0	2	->
water	4:26	0:0	2	priv
decl	5:4	5:61	2	AVFrame	*head
op	5:18	0:0	2	=
water	5:20	0:0	2	s
op	5:21	0:0	2	->
water	5:23	0:0	2	root
op	5:27	0:0	2	.
water	5:28	0:0	2	next
water	5:33	0:0	2	?
water	5:35	0:0	2	s
op	5:36	0:0	2	->
water	5:38	0:0	2	root
op	5:42	0:0	2	.
water	5:43	0:0	2	next
op	5:47	0:0	2	->
water	5:49	0:0	2	frame
water	5:55	0:0	2	:
water	5:57	0:0	2	NULL
decl	6:4	6:16	2	AVFrame	*out
decl	7:4	7:11	2	int	ret
if	9:4	10:26	2	(! head && ! s -> out)
cond	9:8	9:21	3	! head && ! s -> out
op	9:8	0:0	4	!
water	9:9	0:0	4	head
op	9:14	0:0	4	&&
op	9:17	0:0	4	!
water	9:18	0:0	4	s
op	9:19	0:0	4	->
water	9:21	0:0	4	out
stmts	10:8	10:26	3	
return	10:8	10:26	4	AVERROR_EOF
water	10:15	0:0	5	AVERROR_EOF
if	11:4	24:4	2	(! s -> out && head -> nb_samples >= link -> request_samples &&calc_ptr_alignment (head ) >= 32)
cond	11:8	13:36	3	! s -> out && head -> nb_samples >= link -> request_samples &&calc_ptr_alignment (head ) >= 32
op	11:8	0:0	4	!
water	11:9	0:0	4	s
op	11:10	0:0	4	->
water	11:12	0:0	4	out
op	11:16	0:0	4	&&
water	12:8	0:0	4	head
op	12:12	0:0	4	->
water	12:14	0:0	4	nb_samples
op	12:25	0:0	4	>=
water	12:28	0:0	4	link
op	12:32	0:0	4	->
water	12:34	0:0	4	request_samples
op	12:50	0:0	4	&&
call	13:8	13:31	4	calc_ptr_alignment
arg	13:27	13:31	5	head
water	13:27	0:0	6	head
op	13:33	0:0	4	>=
water	13:36	0:0	4	32
stmts	13:40	24:4	3	
water	13:40	0:0	4	{
if	14:8	17:8	4	(head -> nb_samples == link -> request_samples)
cond	14:12	14:38	5	head -> nb_samples == link -> request_samples
water	14:12	0:0	6	head
op	14:16	0:0	6	->
water	14:18	0:0	6	nb_samples
op	14:29	0:0	6	==
water	14:32	0:0	6	link
op	14:36	0:0	6	->
water	14:38	0:0	6	request_samples
stmts	14:55	17:8	5	
water	14:55	0:0	6	{
water	15:12	0:0	6	out
op	15:16	0:0	6	=
water	15:18	0:0	6	head
water	15:22	0:0	6	;
call	16:12	16:23	6	queue_pop
arg	16:22	16:23	7	s
water	16:22	0:0	8	s
water	16:24	0:0	6	;
water	17:8	0:0	6	}
else	17:10	23:8	4
stmts	17:15	23:8	5	
water	17:15	0:0	6	{
water	18:12	0:0	6	out
op	18:16	0:0	6	=
call	18:18	18:37	6	av_frame_clone
arg	18:33	18:37	7	head
water	18:33	0:0	8	head
water	18:38	0:0	6	;
if	19:12	20:38	6	(! out)
cond	19:16	19:17	7	! out
op	19:16	0:0	8	!
water	19:17	0:0	8	out
stmts	20:16	20:38	7	
return	20:16	20:38	8	AVERROR(ENOMEM)
call	20:23	20:37	9	AVERROR
arg	20:31	20:37	10	ENOMEM
water	20:31	0:0	11	ENOMEM
water	21:12	0:0	6	out
op	21:15	0:0	6	->
water	21:17	0:0	6	nb_samples
op	21:28	0:0	6	=
water	21:30	0:0	6	link
op	21:34	0:0	6	->
water	21:36	0:0	6	request_samples
water	21:51	0:0	6	;
call	22:12	22:59	6	buffer_offset
arg	22:26	22:30	7	link
water	22:26	0:0	8	link
arg	22:32	22:36	7	head
water	22:32	0:0	8	head
arg	22:38	22:59	7	link->request_samples
water	22:38	0:0	8	link
op	22:42	0:0	8	->
water	22:44	0:0	8	request_samples
water	22:60	0:0	6	;
water	23:8	0:0	6	}
water	24:4	0:0	4	}
else	24:6	70:4	2
stmts	24:11	70:4	3	
water	24:11	0:0	4	{
decl	25:8	25:81	4	int	nb_channels
op	25:24	0:0	4	=
call	25:26	25:80	5	av_get_channel_layout_nb_channels
arg	25:60	25:80	6	link->channel_layout
water	25:60	0:0	7	link
op	25:64	0:0	7	->
water	25:66	0:0	7	channel_layout
if	26:8	33:8	4	(! s -> out)
cond	26:12	26:16	5	! s -> out
op	26:12	0:0	6	!
water	26:13	0:0	6	s
op	26:14	0:0	6	->
water	26:16	0:0	6	out
stmts	26:21	33:8	5	
water	26:21	0:0	6	{
water	27:12	0:0	6	s
op	27:13	0:0	6	->
water	27:15	0:0	6	out
op	27:19	0:0	6	=
call	27:21	27:68	6	ff_get_audio_buffer
arg	27:41	27:45	7	link
water	27:41	0:0	8	link
arg	27:47	27:68	7	link->request_samples
water	27:47	0:0	8	link
op	27:51	0:0	8	->
water	27:53	0:0	8	request_samples
water	27:69	0:0	6	;
if	28:12	29:38	6	(! s -> out)
cond	28:16	28:20	7	! s -> out
op	28:16	0:0	8	!
water	28:17	0:0	8	s
op	28:18	0:0	8	->
water	28:20	0:0	8	out
stmts	29:16	29:38	7	
return	29:16	29:38	8	AVERROR(ENOMEM)
call	29:23	29:37	9	AVERROR
arg	29:31	29:37	10	ENOMEM
water	29:31	0:0	11	ENOMEM
water	30:12	0:0	6	s
op	30:13	0:0	6	->
water	30:15	0:0	6	out
op	30:18	0:0	6	->
water	30:20	0:0	6	nb_samples
op	30:31	0:0	6	=
water	30:33	0:0	6	0
water	30:34	0:0	6	;
water	31:12	0:0	6	s
op	31:13	0:0	6	->
water	31:15	0:0	6	out
op	31:18	0:0	6	->
water	31:20	0:0	6	pts
op	31:42	0:0	6	=
water	31:44	0:0	6	head
op	31:48	0:0	6	->
water	31:50	0:0	6	pts
water	31:53	0:0	6	;
water	32:12	0:0	6	s
op	32:13	0:0	6	->
water	32:15	0:0	6	allocated_samples
op	32:42	0:0	6	=
water	32:44	0:0	6	link
op	32:48	0:0	6	->
water	32:50	0:0	6	request_samples
water	32:65	0:0	6	;
water	33:8	0:0	6	}
else	33:10	37:8	4
stmts	33:15	37:8	5	
if	33:15	37:8	6	(link -> request_samples != s -> allocated_samples)
cond	33:19	33:47	7	link -> request_samples != s -> allocated_samples
water	33:19	0:0	8	link
op	33:23	0:0	8	->
water	33:25	0:0	8	request_samples
op	33:41	0:0	8	!=
water	33:44	0:0	8	s
op	33:45	0:0	8	->
water	33:47	0:0	8	allocated_samples
stmts	33:66	37:8	7	
water	33:66	0:0	8	{
call	34:12	35:43	8	av_log
arg	34:19	34:22	9	ctx
water	34:19	0:0	10	ctx
arg	34:24	34:36	9	AV_LOG_ERROR
water	34:24	0:0	10	AV_LOG_ERROR
arg	34:38	35:43	9	"request_samples changed before the ""buffer was returned.\n"
water	34:38	0:0	10	"request_samples changed before the "
water	35:19	0:0	10	"buffer was returned.\n"
water	35:44	0:0	8	;
return	36:12	36:34	8	AVERROR(EINVAL)
call	36:19	36:33	9	AVERROR
arg	36:27	36:33	10	EINVAL
water	36:27	0:0	11	EINVAL
water	37:8	0:0	8	}
while	38:8	67:8	4	(s -> out -> nb_samples < s -> allocated_samples)
cond	38:15	38:39	5	s -> out -> nb_samples < s -> allocated_samples
water	38:15	0:0	6	s
op	38:16	0:0	6	->
water	38:18	0:0	6	out
op	38:21	0:0	6	->
water	38:23	0:0	6	nb_samples
op	38:34	0:0	6	<
water	38:36	0:0	6	s
op	38:37	0:0	6	->
water	38:39	0:0	6	allocated_samples
stmts	38:58	67:8	5	
water	38:58	0:0	6	{
decl	39:12	39:19	6	int	len
if	40:12	53:12	6	(! s -> root . next)
cond	40:16	40:25	7	! s -> root . next
op	40:16	0:0	8	!
water	40:17	0:0	8	s
op	40:18	0:0	8	->
water	40:20	0:0	8	root
op	40:24	0:0	8	.
water	40:25	0:0	8	next
stmts	40:31	53:12	7	
water	40:31	0:0	8	{
water	41:16	0:0	8	ret
op	41:20	0:0	8	=
call	41:22	41:53	8	ff_request_frame
arg	41:39	41:53	9	ctx->inputs[0]
water	41:39	0:0	10	ctx
op	41:42	0:0	10	->
water	41:44	0:0	10	inputs
op	41:50	0:0	10	[
water	41:51	0:0	10	0
op	41:52	0:0	10	]
water	41:54	0:0	8	;
if	42:16	50:16	8	(ret == AVERROR_EOF)
cond	42:20	42:27	9	ret == AVERROR_EOF
water	42:20	0:0	10	ret
op	42:24	0:0	10	==
water	42:27	0:0	10	AVERROR_EOF
stmts	42:40	50:16	9	
water	42:40	0:0	10	{
call	43:20	47:68	10	av_samples_set_silence
arg	43:43	43:64	11	s->out->extended_data
water	43:43	0:0	12	s
op	43:44	0:0	12	->
water	43:46	0:0	12	out
op	43:49	0:0	12	->
water	43:51	0:0	12	extended_data
arg	44:43	44:61	11	s->out->nb_samples
water	44:43	0:0	12	s
op	44:44	0:0	12	->
water	44:46	0:0	12	out
op	44:49	0:0	12	->
water	44:51	0:0	12	nb_samples
arg	45:43	46:61	11	s->allocated_samples-s->out->nb_samples
water	45:43	0:0	12	s
op	45:44	0:0	12	->
water	45:46	0:0	12	allocated_samples
op	45:64	0:0	12	-
water	46:43	0:0	12	s
op	46:44	0:0	12	->
water	46:46	0:0	12	out
op	46:49	0:0	12	->
water	46:51	0:0	12	nb_samples
arg	47:43	47:54	11	nb_channels
water	47:43	0:0	12	nb_channels
arg	47:56	47:68	11	link->format
water	47:56	0:0	12	link
op	47:60	0:0	12	->
water	47:62	0:0	12	format
water	47:69	0:0	10	;
water	48:20	0:0	10	s
op	48:21	0:0	10	->
water	48:23	0:0	10	out
op	48:26	0:0	10	->
water	48:28	0:0	10	nb_samples
op	48:39	0:0	10	=
water	48:41	0:0	10	s
op	48:42	0:0	10	->
water	48:44	0:0	10	allocated_samples
water	48:61	0:0	10	;
break	49:20	49:25	10	
water	50:16	0:0	10	}
else	50:18	51:30	8
stmts	50:23	51:30	9	
if	50:23	51:30	10	(ret < 0)
cond	50:27	50:33	11	ret < 0
water	50:27	0:0	12	ret
op	50:31	0:0	12	<
water	50:33	0:0	12	0
stmts	51:20	51:30	11	
return	51:20	51:30	12	ret
water	51:27	0:0	13	ret
call	52:16	52:39	8	av_assert0
arg	52:27	52:39	9	s->root.next
water	52:27	0:0	10	s
op	52:28	0:0	10	->
water	52:30	0:0	10	root
op	52:34	0:0	10	.
water	52:35	0:0	10	next
water	52:40	0:0	8	;
water	53:12	0:0	8	}
water	54:12	0:0	6	head
op	54:17	0:0	6	=
water	54:19	0:0	6	s
op	54:20	0:0	6	->
water	54:22	0:0	6	root
op	54:26	0:0	6	.
water	54:27	0:0	6	next
op	54:31	0:0	6	->
water	54:33	0:0	6	frame
water	54:38	0:0	6	;
water	55:12	0:0	6	len
op	55:16	0:0	6	=
call	55:18	56:40	6	FFMIN
arg	55:24	55:65	7	s->allocated_samples-s->out->nb_samples
water	55:24	0:0	8	s
op	55:25	0:0	8	->
water	55:27	0:0	8	allocated_samples
op	55:45	0:0	8	-
water	55:47	0:0	8	s
op	55:48	0:0	8	->
water	55:50	0:0	8	out
op	55:53	0:0	8	->
water	55:55	0:0	8	nb_samples
arg	56:24	56:40	7	head->nb_samples
water	56:24	0:0	8	head
op	56:28	0:0	8	->
water	56:30	0:0	8	nb_samples
water	56:41	0:0	6	;
call	57:12	59:40	6	av_samples_copy
arg	57:28	57:49	7	s->out->extended_data
water	57:28	0:0	8	s
op	57:29	0:0	8	->
water	57:31	0:0	8	out
op	57:34	0:0	8	->
water	57:36	0:0	8	extended_data
arg	57:51	57:70	7	head->extended_data
water	57:51	0:0	8	head
op	57:55	0:0	8	->
water	57:57	0:0	8	extended_data
arg	58:28	58:46	7	s->out->nb_samples
water	58:28	0:0	8	s
op	58:29	0:0	8	->
water	58:31	0:0	8	out
op	58:34	0:0	8	->
water	58:36	0:0	8	nb_samples
arg	58:48	58:49	7	0
water	58:48	0:0	8	0
arg	58:51	58:54	7	len
water	58:51	0:0	8	len
arg	58:56	58:67	7	nb_channels
water	58:56	0:0	8	nb_channels
arg	59:28	59:40	7	link->format
water	59:28	0:0	8	link
op	59:32	0:0	8	->
water	59:34	0:0	8	format
water	59:41	0:0	6	;
water	60:12	0:0	6	s
op	60:13	0:0	6	->
water	60:15	0:0	6	out
op	60:18	0:0	6	->
water	60:20	0:0	6	nb_samples
op	60:31	0:0	6	+=
water	60:34	0:0	6	len
water	60:37	0:0	6	;
if	61:12	64:12	6	(len == head -> nb_samples)
cond	61:16	61:29	7	len == head -> nb_samples
water	61:16	0:0	8	len
op	61:20	0:0	8	==
water	61:23	0:0	8	head
op	61:27	0:0	8	->
water	61:29	0:0	8	nb_samples
stmts	61:41	64:12	7	
water	61:41	0:0	8	{
call	62:16	62:35	8	av_frame_free
arg	62:30	62:35	9	&head
op	62:30	0:0	10	&
water	62:31	0:0	10	head
water	62:36	0:0	8	;
call	63:16	63:27	8	queue_pop
arg	63:26	63:27	9	s
water	63:26	0:0	10	s
water	63:28	0:0	8	;
water	64:12	0:0	8	}
else	64:14	66:12	6
stmts	64:19	66:12	7	
water	64:19	0:0	8	{
call	65:16	65:45	8	buffer_offset
arg	65:30	65:34	9	link
water	65:30	0:0	10	link
arg	65:36	65:40	9	head
water	65:36	0:0	10	head
arg	65:42	65:45	9	len
water	65:42	0:0	10	len
water	65:46	0:0	8	;
water	66:12	0:0	8	}
water	67:8	0:0	6	}
water	68:8	0:0	4	out
op	68:12	0:0	4	=
water	68:14	0:0	4	s
op	68:15	0:0	4	->
water	68:17	0:0	4	out
water	68:20	0:0	4	;
water	69:8	0:0	4	s
op	69:9	0:0	4	->
water	69:11	0:0	4	out
op	69:15	0:0	4	=
water	69:17	0:0	4	NULL
water	69:21	0:0	4	;
water	70:4	0:0	4	}
return	71:4	71:37	2	ff_filter_frame(link,out)
call	71:11	71:36	3	ff_filter_frame
arg	71:27	71:31	4	link
water	71:27	0:0	5	link
arg	71:33	71:36	4	out
water	71:33	0:0	5	out
