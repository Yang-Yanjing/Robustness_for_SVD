func	1:0	16:0	0	static int	sse
params	1:14	0:0	1	
param	1:15	1:32	2	MpegEncContext *	s
param	1:34	1:47	2	uint8_t *	src1
param	1:49	1:62	2	uint8_t *	src2
param	1:64	1:69	2	int	w
param	1:71	1:76	2	int	h
param	1:78	1:88	2	int	stride
stmnts	0:0	15:14	1	
decl	2:4	2:38	2	uint32_t	*sq
op	2:17	0:0	2	=
water	2:19	0:0	2	ff_square_tab
op	2:33	0:0	2	+
water	2:35	0:0	2	256
decl	3:4	3:13	2	int	acc
op	3:11	0:0	2	=
water	3:12	0:0	2	0
decl	4:4	4:11	2	int	x
water	4:9	0:0	2	,
decl	4:4	4:11	2	int	y
if	5:4	6:59	2	(w == 16 && h == 16)
cond	5:7	5:19	3	w == 16 && h == 16
water	5:7	0:0	4	w
op	5:8	0:0	4	==
water	5:10	0:0	4	16
op	5:13	0:0	4	&&
water	5:16	0:0	4	h
op	5:17	0:0	4	==
water	5:19	0:0	4	16
stmts	6:8	6:59	3	
return	6:8	6:59	4	s->mecc.sse[0](NULL,src1,src2,stride,16)
water	6:15	0:0	5	s
op	6:16	0:0	5	->
water	6:18	0:0	5	mecc
op	6:22	0:0	5	.
water	6:23	0:0	5	sse
op	6:26	0:0	5	[
water	6:27	0:0	5	0
op	6:28	0:0	5	]
water	6:29	0:0	5	(
water	6:30	0:0	5	NULL
water	6:34	0:0	5	,
water	6:36	0:0	5	src1
water	6:40	0:0	5	,
water	6:42	0:0	5	src2
water	6:46	0:0	5	,
water	6:48	0:0	5	stride
water	6:54	0:0	5	,
water	6:56	0:0	5	16
water	6:58	0:0	5	)
else	7:4	8:58	2
stmts	7:9	8:58	3	
if	7:9	8:58	4	(w == 8 && h == 8)
cond	7:12	7:23	5	w == 8 && h == 8
water	7:12	0:0	6	w
op	7:13	0:0	6	==
water	7:15	0:0	6	8
op	7:17	0:0	6	&&
water	7:20	0:0	6	h
op	7:21	0:0	6	==
water	7:23	0:0	6	8
stmts	8:8	8:58	5	
return	8:8	8:58	6	s->mecc.sse[1](NULL,src1,src2,stride,8)
water	8:15	0:0	7	s
op	8:16	0:0	7	->
water	8:18	0:0	7	mecc
op	8:22	0:0	7	.
water	8:23	0:0	7	sse
op	8:26	0:0	7	[
water	8:27	0:0	7	1
op	8:28	0:0	7	]
water	8:29	0:0	7	(
water	8:30	0:0	7	NULL
water	8:34	0:0	7	,
water	8:36	0:0	7	src1
water	8:40	0:0	7	,
water	8:42	0:0	7	src2
water	8:46	0:0	7	,
water	8:48	0:0	7	stride
water	8:54	0:0	7	,
water	8:56	0:0	7	8
water	8:57	0:0	7	)
for	9:4	13:4	2	(y = 0 ;y < h;y ++)
forinit	9:8	9:11	3	y = 0 ;
water	9:8	0:0	4	y
op	9:9	0:0	4	=
water	9:10	0:0	4	0
water	9:11	0:0	4	;
cond	9:13	9:15	3	y < h
water	9:13	0:0	4	y
op	9:14	0:0	4	<
water	9:15	0:0	4	h
forexpr	9:18	9:19	3	y ++
water	9:18	0:0	4	y
op	9:19	0:0	4	++
stmts	9:22	13:4	3	
water	9:22	0:0	4	{
for	10:8	12:8	4	(x = 0 ;x < w;x ++)
forinit	10:12	10:15	5	x = 0 ;
water	10:12	0:0	6	x
op	10:13	0:0	6	=
water	10:14	0:0	6	0
water	10:15	0:0	6	;
cond	10:17	10:19	5	x < w
water	10:17	0:0	6	x
op	10:18	0:0	6	<
water	10:19	0:0	6	w
forexpr	10:22	10:23	5	x ++
water	10:22	0:0	6	x
op	10:23	0:0	6	++
stmts	10:26	12:8	5	
water	10:26	0:0	6	{
water	11:12	0:0	6	acc
op	11:15	0:0	6	+=
water	11:18	0:0	6	sq
op	11:20	0:0	6	[
water	11:21	0:0	6	src1
op	11:25	0:0	6	[
water	11:26	0:0	6	x
op	11:28	0:0	6	+
water	11:30	0:0	6	y
op	11:31	0:0	6	*
water	11:32	0:0	6	stride
op	11:38	0:0	6	]
op	11:40	0:0	6	-
water	11:42	0:0	6	src2
op	11:46	0:0	6	[
water	11:47	0:0	6	x
op	11:49	0:0	6	+
water	11:51	0:0	6	y
op	11:52	0:0	6	*
water	11:53	0:0	6	stride
op	11:59	0:0	6	]
op	11:60	0:0	6	]
water	11:61	0:0	6	;
water	12:8	0:0	6	}
water	13:4	0:0	4	}
call	14:4	14:21	2	av_assert2
arg	14:15	14:21	3	acc>=0
water	14:15	0:0	4	acc
op	14:18	0:0	4	>=
water	14:20	0:0	4	0
water	14:22	0:0	2	;
return	15:4	15:14	2	acc
water	15:11	0:0	3	acc
