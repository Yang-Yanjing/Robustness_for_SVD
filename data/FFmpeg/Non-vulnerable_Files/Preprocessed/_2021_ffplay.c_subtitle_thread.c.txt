func	1:0	28:0	0	static int	subtitle_thread
params	1:26	0:0	1	
param	1:27	1:36	2	void *	arg
stmnts	0:0	27:12	1	
decl	3:4	3:24	2	VideoState	*is
op	3:19	0:0	2	=
water	3:21	0:0	2	arg
decl	4:4	4:13	2	Frame	*sp
decl	5:4	5:20	2	int	got_subtitle
decl	6:4	6:14	2	double	pts
for	7:4	26:4	2	(;;)
forinit	7:9	7:9	3	;
water	7:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	7:13	26:4	3	
water	7:13	0:0	4	{
if	8:8	9:20	4	(! ( sp =frame_queue_peek_writable (& is -> subpq ) ))
cond	8:12	8:56	5	! ( sp =frame_queue_peek_writable (& is -> subpq ) )
op	8:12	0:0	6	!
water	8:13	0:0	6	(
water	8:14	0:0	6	sp
op	8:17	0:0	6	=
call	8:19	8:55	6	frame_queue_peek_writable
arg	8:45	8:55	7	&is->subpq
op	8:45	0:0	8	&
water	8:46	0:0	8	is
op	8:48	0:0	8	->
water	8:50	0:0	8	subpq
water	8:56	0:0	6	)
stmts	9:12	9:20	5	
return	9:12	9:20	6	0
water	9:19	0:0	7	0
if	10:8	11:17	4	(( got_subtitle =decoder_decode_frame (& is -> subdec ,NULL ,& sp -> sub ) ) < 0)
cond	10:12	10:81	5	( got_subtitle =decoder_decode_frame (& is -> subdec ,NULL ,& sp -> sub ) ) < 0
water	10:12	0:0	6	(
water	10:13	0:0	6	got_subtitle
op	10:26	0:0	6	=
call	10:28	10:76	6	decoder_decode_frame
arg	10:49	10:60	7	&is->subdec
op	10:49	0:0	8	&
water	10:50	0:0	8	is
op	10:52	0:0	8	->
water	10:54	0:0	8	subdec
arg	10:62	10:66	7	NULL
water	10:62	0:0	8	NULL
arg	10:68	10:76	7	&sp->sub
op	10:68	0:0	8	&
water	10:69	0:0	8	sp
op	10:71	0:0	8	->
water	10:73	0:0	8	sub
water	10:77	0:0	6	)
op	10:79	0:0	6	<
water	10:81	0:0	6	0
stmts	11:12	11:17	5	
break	11:12	11:17	6	
water	12:8	0:0	4	pts
op	12:12	0:0	4	=
water	12:14	0:0	4	0
water	12:15	0:0	4	;
if	13:8	23:8	4	(got_subtitle && sp -> sub . format == 0)
cond	13:12	13:46	5	got_subtitle && sp -> sub . format == 0
water	13:12	0:0	6	got_subtitle
op	13:25	0:0	6	&&
water	13:28	0:0	6	sp
op	13:30	0:0	6	->
water	13:32	0:0	6	sub
op	13:35	0:0	6	.
water	13:36	0:0	6	format
op	13:43	0:0	6	==
water	13:46	0:0	6	0
stmts	13:49	23:8	5	
water	13:49	0:0	6	{
if	14:12	15:56	6	(sp -> sub . pts != AV_NOPTS_VALUE)
cond	14:16	14:31	7	sp -> sub . pts != AV_NOPTS_VALUE
water	14:16	0:0	8	sp
op	14:18	0:0	8	->
water	14:20	0:0	8	sub
op	14:23	0:0	8	.
water	14:24	0:0	8	pts
op	14:28	0:0	8	!=
water	14:31	0:0	8	AV_NOPTS_VALUE
stmts	15:16	15:56	7	
water	15:16	0:0	8	pts
op	15:20	0:0	8	=
water	15:22	0:0	8	sp
op	15:24	0:0	8	->
water	15:26	0:0	8	sub
op	15:29	0:0	8	.
water	15:30	0:0	8	pts
op	15:34	0:0	8	/
water	15:36	0:0	8	(
water	15:37	0:0	8	double
water	15:43	0:0	8	)
water	15:44	0:0	8	AV_TIME_BASE
water	15:56	0:0	8	;
water	16:12	0:0	6	sp
op	16:14	0:0	6	->
water	16:16	0:0	6	pts
op	16:20	0:0	6	=
water	16:22	0:0	6	pts
water	16:25	0:0	6	;
water	17:12	0:0	6	sp
op	17:14	0:0	6	->
water	17:16	0:0	6	serial
op	17:23	0:0	6	=
water	17:25	0:0	6	is
op	17:27	0:0	6	->
water	17:29	0:0	6	subdec
op	17:35	0:0	6	.
water	17:36	0:0	6	pkt_serial
water	17:46	0:0	6	;
water	18:12	0:0	6	sp
op	18:14	0:0	6	->
water	18:16	0:0	6	width
op	18:22	0:0	6	=
water	18:24	0:0	6	is
op	18:26	0:0	6	->
water	18:28	0:0	6	subdec
op	18:34	0:0	6	.
water	18:35	0:0	6	avctx
op	18:40	0:0	6	->
water	18:42	0:0	6	width
water	18:47	0:0	6	;
water	19:12	0:0	6	sp
op	19:14	0:0	6	->
water	19:16	0:0	6	height
op	19:23	0:0	6	=
water	19:25	0:0	6	is
op	19:27	0:0	6	->
water	19:29	0:0	6	subdec
op	19:35	0:0	6	.
water	19:36	0:0	6	avctx
op	19:41	0:0	6	->
water	19:43	0:0	6	height
water	19:49	0:0	6	;
water	20:12	0:0	6	sp
op	20:14	0:0	6	->
water	20:16	0:0	6	uploaded
op	20:25	0:0	6	=
water	20:27	0:0	6	0
water	20:28	0:0	6	;
call	22:12	22:39	6	frame_queue_push
arg	22:29	22:39	7	&is->subpq
op	22:29	0:0	8	&
water	22:30	0:0	8	is
op	22:32	0:0	8	->
water	22:34	0:0	8	subpq
water	22:40	0:0	6	;
water	23:8	0:0	6	}
else	23:10	25:8	4
stmts	23:15	25:8	5	
if	23:15	25:8	6	(got_subtitle)
cond	23:19	23:19	7	got_subtitle
water	23:19	0:0	8	got_subtitle
stmts	23:33	25:8	7	
water	23:33	0:0	8	{
call	24:12	24:36	8	avsubtitle_free
arg	24:28	24:36	9	&sp->sub
op	24:28	0:0	10	&
water	24:29	0:0	10	sp
op	24:31	0:0	10	->
water	24:33	0:0	10	sub
water	24:37	0:0	8	;
water	25:8	0:0	8	}
water	26:4	0:0	4	}
return	27:4	27:12	2	0
water	27:11	0:0	3	0
