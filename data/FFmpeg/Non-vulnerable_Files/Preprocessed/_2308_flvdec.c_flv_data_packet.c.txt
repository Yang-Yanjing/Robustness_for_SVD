func	1:0	57:0	0	static int	flv_data_packet
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
param	1:47	1:60	2	AVPacket *	pkt
param	2:27	2:38	2	int64_t	dts
param	2:40	2:52	2	int64_t	next
stmnts	0:0	56:14	1	
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:26	2	AVStream	*st
op	5:20	0:0	2	=
water	5:22	0:0	2	NULL
decl	6:4	6:16	2	char	buf[20]
decl	7:4	7:33	2	int	ret
op	7:12	0:0	2	=
water	7:14	0:0	2	AVERROR_INVALIDDATA
decl	8:4	8:22	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:22	2	int	length
op	8:18	0:0	2	=
op	8:20	0:0	2	-
water	8:21	0:0	2	1
decl	9:4	9:17	2	int	array
op	9:14	0:0	2	=
water	9:16	0:0	2	0
switch	10:4	19:4	2	(avio_r8 (pb ))
cond	10:12	10:22	3	avio_r8 (pb )
call	10:12	10:22	4	avio_r8
arg	10:20	10:22	5	pb
water	10:20	0:0	6	pb
stmts	10:25	19:4	3	
water	10:25	0:0	4	{
label	11:4	11:28	4	case AMF_DATA_TYPE_ARRAY :
water	12:8	0:0	4	array
op	12:14	0:0	4	=
water	12:16	0:0	4	1
water	12:17	0:0	4	;
label	13:4	13:33	4	case AMF_DATA_TYPE_MIXEDARRAY :
call	14:8	14:33	4	avio_seek
arg	14:18	14:20	5	pb
water	14:18	0:0	6	pb
arg	14:22	14:23	5	4
water	14:22	0:0	6	4
arg	14:25	14:33	5	SEEK_CUR
water	14:25	0:0	6	SEEK_CUR
water	14:34	0:0	4	;
label	15:4	15:29	4	case AMF_DATA_TYPE_OBJECT :
break	16:8	16:13	4	
label	17:4	17:11	4	default :
goto	18:8	18:17	4	skip
water	18:13	0:0	5	skip
water	19:4	0:0	4	}
while	20:4	33:4	2	(array || ( ret =amf_get_string (pb ,buf ,sizeof ( buf ) ) ) > 0)
cond	20:11	20:67	3	array || ( ret =amf_get_string (pb ,buf ,sizeof ( buf ) ) ) > 0
water	20:11	0:0	4	array
op	20:17	0:0	4	||
water	20:20	0:0	4	(
water	20:21	0:0	4	ret
op	20:25	0:0	4	=
call	20:27	20:62	4	amf_get_string
arg	20:42	20:44	5	pb
water	20:42	0:0	6	pb
arg	20:46	20:49	5	buf
water	20:46	0:0	6	buf
arg	20:51	20:62	5	sizeof(buf)
op	20:51	0:0	6	sizeof
water	20:57	0:0	6	(
water	20:58	0:0	6	buf
water	20:61	0:0	6	)
water	20:63	0:0	4	)
op	20:65	0:0	4	>
water	20:67	0:0	4	0
stmts	20:70	33:4	3	
water	20:70	0:0	4	{
decl	21:8	21:38	4	AMFDataType	type
op	21:25	0:0	4	=
call	21:27	21:37	5	avio_r8
arg	21:35	21:37	6	pb
water	21:35	0:0	7	pb
if	22:8	29:8	4	(type == AMF_DATA_TYPE_STRING && ( array || !strcmp (buf ,"text" ) ))
cond	22:12	22:74	5	type == AMF_DATA_TYPE_STRING && ( array || !strcmp (buf ,"text" ) )
water	22:12	0:0	6	type
op	22:17	0:0	6	==
water	22:20	0:0	6	AMF_DATA_TYPE_STRING
op	22:41	0:0	6	&&
water	22:44	0:0	6	(
water	22:45	0:0	6	array
op	22:51	0:0	6	||
op	22:54	0:0	6	!
call	22:55	22:73	6	strcmp
arg	22:62	22:65	7	buf
water	22:62	0:0	8	buf
arg	22:67	22:73	7	"text"
water	22:67	0:0	8	"text"
water	22:74	0:0	6	)
stmts	22:77	29:8	5	
water	22:77	0:0	6	{
water	23:12	0:0	6	length
op	23:19	0:0	6	=
call	23:21	23:33	6	avio_rb16
arg	23:31	23:33	7	pb
water	23:31	0:0	8	pb
water	23:34	0:0	6	;
water	24:12	0:0	6	ret
op	24:19	0:0	6	=
call	24:21	24:50	6	av_get_packet
arg	24:35	24:37	7	pb
water	24:35	0:0	8	pb
arg	24:39	24:42	7	pkt
water	24:39	0:0	8	pkt
arg	24:44	24:50	7	length
water	24:44	0:0	8	length
water	24:51	0:0	6	;
if	25:12	26:25	6	(ret < 0)
cond	25:16	25:22	7	ret < 0
water	25:16	0:0	8	ret
op	25:20	0:0	8	<
water	25:22	0:0	8	0
stmts	26:16	26:25	7	
goto	26:16	26:25	8	skip
water	26:21	0:0	9	skip
else	27:12	28:21	6
stmts	28:16	28:21	7	
break	28:16	28:21	8	
water	29:8	0:0	6	}
else	29:10	32:8	4
stmts	29:15	32:8	5	
water	29:15	0:0	6	{
if	30:12	31:25	6	(( ret =amf_skip_tag (pb ,type ) ) < 0)
cond	30:16	30:49	7	( ret =amf_skip_tag (pb ,type ) ) < 0
water	30:16	0:0	8	(
water	30:17	0:0	8	ret
op	30:21	0:0	8	=
call	30:23	30:44	8	amf_skip_tag
arg	30:36	30:38	9	pb
water	30:36	0:0	10	pb
arg	30:40	30:44	9	type
water	30:40	0:0	10	type
water	30:45	0:0	8	)
op	30:47	0:0	8	<
water	30:49	0:0	8	0
stmts	31:16	31:25	7	
goto	31:16	31:25	8	skip
water	31:21	0:0	9	skip
water	32:8	0:0	6	}
water	33:4	0:0	4	}
if	34:4	37:4	2	(length < 0)
cond	34:8	34:17	3	length < 0
water	34:8	0:0	4	length
op	34:15	0:0	4	<
water	34:17	0:0	4	0
stmts	34:20	37:4	3	
water	34:20	0:0	4	{
water	35:8	0:0	4	ret
op	35:12	0:0	4	=
water	35:14	0:0	4	AVERROR_INVALIDDATA
water	35:33	0:0	4	;
goto	36:8	36:17	4	skip
water	36:13	0:0	5	skip
water	37:4	0:0	4	}
for	38:4	42:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	38:9	38:14	3	i = 0 ;
water	38:9	0:0	4	i
op	38:11	0:0	4	=
water	38:13	0:0	4	0
water	38:14	0:0	4	;
cond	38:16	38:23	3	i < s -> nb_streams
water	38:16	0:0	4	i
op	38:18	0:0	4	<
water	38:20	0:0	4	s
op	38:21	0:0	4	->
water	38:23	0:0	4	nb_streams
forexpr	38:35	38:36	3	i ++
water	38:35	0:0	4	i
op	38:36	0:0	4	++
stmts	38:40	42:4	3	
water	38:40	0:0	4	{
water	39:8	0:0	4	st
op	39:11	0:0	4	=
water	39:13	0:0	4	s
op	39:14	0:0	4	->
water	39:16	0:0	4	streams
op	39:23	0:0	4	[
water	39:24	0:0	4	i
op	39:25	0:0	4	]
water	39:26	0:0	4	;
if	40:8	41:17	4	(st -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE)
cond	40:12	40:37	5	st -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE
water	40:12	0:0	6	st
op	40:14	0:0	6	->
water	40:16	0:0	6	codec
op	40:21	0:0	6	->
water	40:23	0:0	6	codec_type
op	40:34	0:0	6	==
water	40:37	0:0	6	AVMEDIA_TYPE_SUBTITLE
stmts	41:12	41:17	5	
break	41:12	41:17	6	
water	42:4	0:0	4	}
if	43:4	48:4	2	(i == s -> nb_streams)
cond	43:8	43:16	3	i == s -> nb_streams
water	43:8	0:0	4	i
op	43:10	0:0	4	==
water	43:13	0:0	4	s
op	43:14	0:0	4	->
water	43:16	0:0	4	nb_streams
stmts	43:28	48:4	3	
water	43:28	0:0	4	{
water	44:8	0:0	4	st
op	44:11	0:0	4	=
call	44:13	44:51	4	create_stream
arg	44:27	44:28	5	s
water	44:27	0:0	6	s
arg	44:30	44:51	5	AVMEDIA_TYPE_SUBTITLE
water	44:30	0:0	6	AVMEDIA_TYPE_SUBTITLE
water	44:52	0:0	4	;
if	45:8	46:34	4	(! st)
cond	45:12	45:13	5	! st
op	45:12	0:0	6	!
water	45:13	0:0	6	st
stmts	46:12	46:34	5	
return	46:12	46:34	6	AVERROR(ENOMEM)
call	46:19	46:33	7	AVERROR
arg	46:27	46:33	8	ENOMEM
water	46:27	0:0	9	ENOMEM
water	47:8	0:0	4	st
op	47:10	0:0	4	->
water	47:12	0:0	4	codec
op	47:17	0:0	4	->
water	47:19	0:0	4	codec_id
op	47:28	0:0	4	=
water	47:30	0:0	4	AV_CODEC_ID_TEXT
water	47:46	0:0	4	;
water	48:4	0:0	4	}
water	49:4	0:0	2	pkt
op	49:7	0:0	2	->
water	49:9	0:0	2	dts
op	49:14	0:0	2	=
water	49:16	0:0	2	dts
water	49:19	0:0	2	;
water	50:4	0:0	2	pkt
op	50:7	0:0	2	->
water	50:9	0:0	2	pts
op	50:14	0:0	2	=
water	50:16	0:0	2	dts
water	50:19	0:0	2	;
water	51:4	0:0	2	pkt
op	51:7	0:0	2	->
water	51:9	0:0	2	size
op	51:14	0:0	2	=
water	51:16	0:0	2	ret
water	51:19	0:0	2	;
water	52:4	0:0	2	pkt
op	52:7	0:0	2	->
water	52:9	0:0	2	stream_index
op	52:22	0:0	2	=
water	52:24	0:0	2	st
op	52:26	0:0	2	->
water	52:28	0:0	2	index
water	52:33	0:0	2	;
water	53:4	0:0	2	pkt
op	53:7	0:0	2	->
water	53:9	0:0	2	flags
op	53:21	0:0	2	|=
water	53:24	0:0	2	AV_PKT_FLAG_KEY
water	53:39	0:0	2	;
label	54:0	54:4	2	skip :
call	55:4	55:39	2	avio_seek
arg	55:14	55:19	3	s->pb
water	55:14	0:0	4	s
op	55:15	0:0	4	->
water	55:17	0:0	4	pb
arg	55:21	55:29	3	next+4
water	55:21	0:0	4	next
op	55:26	0:0	4	+
water	55:28	0:0	4	4
arg	55:31	55:39	3	SEEK_SET
water	55:31	0:0	4	SEEK_SET
water	55:40	0:0	2	;
return	56:4	56:14	2	ret
water	56:11	0:0	3	ret
