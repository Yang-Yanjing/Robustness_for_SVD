func	1:0	62:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	61:18	1	
decl	3:4	3:26	2	int	ret
op	3:12	0:0	2	=
water	3:14	0:0	2	0
water	3:15	0:0	2	,
decl	3:4	3:26	2	int	got_frame
if	4:4	7:4	2	(argc != 2)
cond	4:8	4:16	3	argc != 2
water	4:8	0:0	4	argc
op	4:13	0:0	4	!=
water	4:16	0:0	4	2
stmts	4:19	7:4	3	
water	4:19	0:0	4	{
call	5:8	5:54	4	fprintf
arg	5:16	5:22	5	stderr
water	5:16	0:0	6	stderr
arg	5:24	5:45	5	"Usage: %s <video>\n"
water	5:24	0:0	6	"Usage: %s <video>\n"
arg	5:47	5:54	5	argv[0]
water	5:47	0:0	6	argv
op	5:51	0:0	6	[
water	5:52	0:0	6	0
op	5:53	0:0	6	]
water	5:55	0:0	4	;
call	6:8	6:14	4	exit
arg	6:13	6:14	5	1
water	6:13	0:0	6	1
water	6:15	0:0	4	;
water	7:4	0:0	4	}
water	8:4	0:0	2	src_filename
op	8:17	0:0	2	=
water	8:19	0:0	2	argv
op	8:23	0:0	2	[
water	8:24	0:0	2	1
op	8:25	0:0	2	]
water	8:26	0:0	2	;
call	9:4	9:20	2	av_register_all
water	9:21	0:0	2	;
if	10:4	13:4	2	(avformat_open_input (& fmt_ctx ,src_filename ,NULL ,NULL ) < 0)
cond	10:8	10:66	3	avformat_open_input (& fmt_ctx ,src_filename ,NULL ,NULL ) < 0
call	10:8	10:62	4	avformat_open_input
arg	10:28	10:36	5	&fmt_ctx
op	10:28	0:0	6	&
water	10:29	0:0	6	fmt_ctx
arg	10:38	10:50	5	src_filename
water	10:38	0:0	6	src_filename
arg	10:52	10:56	5	NULL
water	10:52	0:0	6	NULL
arg	10:58	10:62	5	NULL
water	10:58	0:0	6	NULL
op	10:64	0:0	4	<
water	10:66	0:0	4	0
stmts	10:69	13:4	3	
water	10:69	0:0	4	{
call	11:8	11:71	4	fprintf
arg	11:16	11:22	5	stderr
water	11:16	0:0	6	stderr
arg	11:24	11:57	5	"Could not open source file %s\n"
water	11:24	0:0	6	"Could not open source file %s\n"
arg	11:59	11:71	5	src_filename
water	11:59	0:0	6	src_filename
water	11:72	0:0	4	;
call	12:8	12:14	4	exit
arg	12:13	12:14	5	1
water	12:13	0:0	6	1
water	12:15	0:0	4	;
water	13:4	0:0	4	}
if	14:4	17:4	2	(avformat_find_stream_info (fmt_ctx ,NULL ) < 0)
cond	14:8	14:51	3	avformat_find_stream_info (fmt_ctx ,NULL ) < 0
call	14:8	14:47	4	avformat_find_stream_info
arg	14:34	14:41	5	fmt_ctx
water	14:34	0:0	6	fmt_ctx
arg	14:43	14:47	5	NULL
water	14:43	0:0	6	NULL
op	14:49	0:0	4	<
water	14:51	0:0	4	0
stmts	14:54	17:4	3	
water	14:54	0:0	4	{
call	15:8	15:61	4	fprintf
arg	15:16	15:22	5	stderr
water	15:16	0:0	6	stderr
arg	15:24	15:61	5	"Could not find stream information\n"
water	15:24	0:0	6	"Could not find stream information\n"
water	15:62	0:0	4	;
call	16:8	16:14	4	exit
arg	16:13	16:14	5	1
water	16:13	0:0	6	1
water	16:15	0:0	4	;
water	17:4	0:0	4	}
if	18:4	21:4	2	(open_codec_context (& video_stream_idx ,fmt_ctx ,AVMEDIA_TYPE_VIDEO ) >= 0)
cond	18:8	18:78	3	open_codec_context (& video_stream_idx ,fmt_ctx ,AVMEDIA_TYPE_VIDEO ) >= 0
call	18:8	18:73	4	open_codec_context
arg	18:27	18:44	5	&video_stream_idx
op	18:27	0:0	6	&
water	18:28	0:0	6	video_stream_idx
arg	18:46	18:53	5	fmt_ctx
water	18:46	0:0	6	fmt_ctx
arg	18:55	18:73	5	AVMEDIA_TYPE_VIDEO
water	18:55	0:0	6	AVMEDIA_TYPE_VIDEO
op	18:75	0:0	4	>=
water	18:78	0:0	4	0
stmts	18:81	21:4	3	
water	18:81	0:0	4	{
water	19:8	0:0	4	video_stream
op	19:21	0:0	4	=
water	19:23	0:0	4	fmt_ctx
op	19:30	0:0	4	->
water	19:32	0:0	4	streams
op	19:39	0:0	4	[
water	19:40	0:0	4	video_stream_idx
op	19:56	0:0	4	]
water	19:57	0:0	4	;
water	20:8	0:0	4	video_dec_ctx
op	20:22	0:0	4	=
water	20:24	0:0	4	video_stream
op	20:36	0:0	4	->
water	20:38	0:0	4	codec
water	20:43	0:0	4	;
water	21:4	0:0	4	}
call	22:4	22:46	2	av_dump_format
arg	22:19	22:26	3	fmt_ctx
water	22:19	0:0	4	fmt_ctx
arg	22:28	22:29	3	0
water	22:28	0:0	4	0
arg	22:31	22:43	3	src_filename
water	22:31	0:0	4	src_filename
arg	22:45	22:46	3	0
water	22:45	0:0	4	0
water	22:47	0:0	2	;
if	23:4	27:4	2	(! video_stream)
cond	23:8	23:9	3	! video_stream
op	23:8	0:0	4	!
water	23:9	0:0	4	video_stream
stmts	23:23	27:4	3	
water	23:23	0:0	4	{
call	24:8	24:78	4	fprintf
arg	24:16	24:22	5	stderr
water	24:16	0:0	6	stderr
arg	24:24	24:78	5	"Could not find video stream in the input, aborting\n"
water	24:24	0:0	6	"Could not find video stream in the input, aborting\n"
water	24:79	0:0	4	;
water	25:8	0:0	4	ret
op	25:12	0:0	4	=
water	25:14	0:0	4	1
water	25:15	0:0	4	;
goto	26:8	26:16	4	end
water	26:13	0:0	5	end
water	27:4	0:0	4	}
water	28:4	0:0	2	frame
op	28:10	0:0	2	=
call	28:12	28:27	2	av_frame_alloc
water	28:28	0:0	2	;
if	29:4	33:4	2	(! frame)
cond	29:8	29:9	3	! frame
op	29:8	0:0	4	!
water	29:9	0:0	4	frame
stmts	29:16	33:4	3	
water	29:16	0:0	4	{
call	30:8	30:52	4	fprintf
arg	30:16	30:22	5	stderr
water	30:16	0:0	6	stderr
arg	30:24	30:52	5	"Could not allocate frame\n"
water	30:24	0:0	6	"Could not allocate frame\n"
water	30:53	0:0	4	;
water	31:8	0:0	4	ret
op	31:12	0:0	4	=
call	31:14	31:28	4	AVERROR
arg	31:22	31:28	5	ENOMEM
water	31:22	0:0	6	ENOMEM
water	31:29	0:0	4	;
goto	32:8	32:16	4	end
water	32:13	0:0	5	end
water	33:4	0:0	4	}
call	34:4	34:70	2	printf
arg	34:11	34:70	3	"framenum,source,blockw,blockh,srcx,srcy,dstx,dsty,flags\n"
water	34:11	0:0	4	"framenum,source,blockw,blockh,srcx,srcy,dstx,dsty,flags\n"
water	34:71	0:0	2	;
call	36:4	36:23	2	av_init_packet
arg	36:19	36:23	3	&pkt
op	36:19	0:0	4	&
water	36:20	0:0	4	pkt
water	36:24	0:0	2	;
water	37:4	0:0	2	pkt
op	37:7	0:0	2	.
water	37:8	0:0	2	data
op	37:13	0:0	2	=
water	37:15	0:0	2	NULL
water	37:19	0:0	2	;
water	38:4	0:0	2	pkt
op	38:7	0:0	2	.
water	38:8	0:0	2	size
op	38:13	0:0	2	=
water	38:15	0:0	2	0
water	38:16	0:0	2	;
while	40:4	50:4	2	(av_read_frame (fmt_ctx ,& pkt ) >= 0)
cond	40:11	40:43	3	av_read_frame (fmt_ctx ,& pkt ) >= 0
call	40:11	40:38	4	av_read_frame
arg	40:25	40:32	5	fmt_ctx
water	40:25	0:0	6	fmt_ctx
arg	40:34	40:38	5	&pkt
op	40:34	0:0	6	&
water	40:35	0:0	6	pkt
op	40:40	0:0	4	>=
water	40:43	0:0	4	0
stmts	40:46	50:4	3	
water	40:46	0:0	4	{
decl	41:8	41:31	4	AVPacket	orig_pkt
op	41:26	0:0	4	=
water	41:28	0:0	4	pkt
do	42:8	48:8	4	(pkt . size > 0)
cond	48:17	48:28	5	pkt . size > 0
water	48:17	0:0	6	pkt
op	48:20	0:0	6	.
water	48:21	0:0	6	size
op	48:26	0:0	6	>
water	48:28	0:0	6	0
stmts	42:11	48:8	5	
water	42:11	0:0	6	{
water	43:12	0:0	6	ret
op	43:16	0:0	6	=
call	43:18	43:45	6	decode_packet
arg	43:32	43:42	7	&got_frame
op	43:32	0:0	8	&
water	43:33	0:0	8	got_frame
arg	43:44	43:45	7	0
water	43:44	0:0	8	0
water	43:46	0:0	6	;
if	44:12	45:21	6	(ret < 0)
cond	44:16	44:22	7	ret < 0
water	44:16	0:0	8	ret
op	44:20	0:0	8	<
water	44:22	0:0	8	0
stmts	45:16	45:21	7	
break	45:16	45:21	8	
water	46:12	0:0	6	pkt
op	46:15	0:0	6	.
water	46:16	0:0	6	data
op	46:21	0:0	6	+=
water	46:24	0:0	6	ret
water	46:27	0:0	6	;
water	47:12	0:0	6	pkt
op	47:15	0:0	6	.
water	47:16	0:0	6	size
op	47:21	0:0	6	-=
water	47:24	0:0	6	ret
water	47:27	0:0	6	;
water	48:8	0:0	6	}
water	48:30	0:0	4	;
call	49:8	49:32	4	av_free_packet
arg	49:23	49:32	5	&orig_pkt
op	49:23	0:0	6	&
water	49:24	0:0	6	orig_pkt
water	49:33	0:0	4	;
water	50:4	0:0	4	}
water	52:4	0:0	2	pkt
op	52:7	0:0	2	.
water	52:8	0:0	2	data
op	52:13	0:0	2	=
water	52:15	0:0	2	NULL
water	52:19	0:0	2	;
water	53:4	0:0	2	pkt
op	53:7	0:0	2	.
water	53:8	0:0	2	size
op	53:13	0:0	2	=
water	53:15	0:0	2	0
water	53:16	0:0	2	;
do	54:4	56:4	2	(got_frame)
cond	56:13	56:13	3	got_frame
water	56:13	0:0	4	got_frame
stmts	54:7	56:4	3	
water	54:7	0:0	4	{
call	55:8	55:35	4	decode_packet
arg	55:22	55:32	5	&got_frame
op	55:22	0:0	6	&
water	55:23	0:0	6	got_frame
arg	55:34	55:35	5	1
water	55:34	0:0	6	1
water	55:36	0:0	4	;
water	56:4	0:0	4	}
water	56:23	0:0	2	;
label	57:0	57:3	2	end :
call	58:4	58:31	2	avcodec_close
arg	58:18	58:31	3	video_dec_ctx
water	58:18	0:0	4	video_dec_ctx
water	58:32	0:0	2	;
call	59:4	59:33	2	avformat_close_input
arg	59:25	59:33	3	&fmt_ctx
op	59:25	0:0	4	&
water	59:26	0:0	4	fmt_ctx
water	59:34	0:0	2	;
call	60:4	60:24	2	av_frame_free
arg	60:18	60:24	3	&frame
op	60:18	0:0	4	&
water	60:19	0:0	4	frame
water	60:25	0:0	2	;
return	61:4	61:18	2	ret<0
water	61:11	0:0	3	ret
op	61:15	0:0	3	<
water	61:17	0:0	3	0
