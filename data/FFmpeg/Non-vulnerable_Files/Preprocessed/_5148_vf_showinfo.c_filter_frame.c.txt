func	1:0	75:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:60	2	AVFrame *	frame
stmnts	0:0	74:58	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:72	2	const AVPixFmtDescriptor	*desc
op	4:35	0:0	2	=
call	4:37	4:71	3	av_pix_fmt_desc_get
arg	4:57	4:71	4	inlink->format
water	4:57	0:0	5	inlink
op	4:63	0:0	5	->
water	4:65	0:0	5	format
decl	5:4	5:50	2	uint32_t	plane_checksum[4]
op	5:31	0:0	2	=
water	5:33	0:0	2	{
water	5:34	0:0	2	0
water	5:35	0:0	2	}
water	5:36	0:0	2	,
decl	5:4	5:50	2	uint32_t	checksum
op	5:47	0:0	2	=
water	5:49	0:0	2	0
decl	6:4	6:39	2	int64_t	sum[4]
op	6:19	0:0	2	=
water	6:21	0:0	2	{
water	6:22	0:0	2	0
water	6:23	0:0	2	}
water	6:24	0:0	2	,
decl	6:4	6:39	2	int64_t	sum2[4]
op	6:34	0:0	2	=
water	6:36	0:0	2	{
water	6:37	0:0	2	0
water	6:38	0:0	2	}
decl	7:4	7:31	2	int32_t	pixelcount[4]
op	7:26	0:0	2	=
water	7:28	0:0	2	{
water	7:29	0:0	2	0
water	7:30	0:0	2	}
decl	8:4	8:44	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:44	2	int	plane
water	8:16	0:0	2	,
decl	8:4	8:44	2	int	vsub
op	8:23	0:0	2	=
water	8:25	0:0	2	desc
op	8:29	0:0	2	->
water	8:31	0:0	2	log2_chroma_h
for	9:4	22:4	2	(plane = 0 ;plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ];plane ++)
forinit	9:9	9:18	3	plane = 0 ;
water	9:9	0:0	4	plane
op	9:15	0:0	4	=
water	9:17	0:0	4	0
water	9:18	0:0	4	;
cond	9:20	9:76	3	plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ]
water	9:20	0:0	4	plane
op	9:26	0:0	4	<
water	9:28	0:0	4	4
op	9:30	0:0	4	&&
water	9:33	0:0	4	frame
op	9:38	0:0	4	->
water	9:40	0:0	4	data
op	9:44	0:0	4	[
water	9:45	0:0	4	plane
op	9:50	0:0	4	]
op	9:52	0:0	4	&&
water	9:55	0:0	4	frame
op	9:60	0:0	4	->
water	9:62	0:0	4	linesize
op	9:70	0:0	4	[
water	9:71	0:0	4	plane
op	9:76	0:0	4	]
forexpr	9:79	9:84	3	plane ++
water	9:79	0:0	4	plane
op	9:84	0:0	4	++
stmts	9:88	22:4	3	
water	9:88	0:0	4	{
decl	10:8	10:42	4	uint8_t	*data
op	10:22	0:0	4	=
water	10:24	0:0	4	frame
op	10:29	0:0	4	->
water	10:31	0:0	4	data
op	10:35	0:0	4	[
water	10:36	0:0	4	plane
op	10:41	0:0	4	]
decl	11:8	11:86	4	int	h
op	11:14	0:0	4	=
water	11:16	0:0	4	plane
op	11:22	0:0	4	==
water	11:25	0:0	4	1
op	11:27	0:0	4	||
water	11:30	0:0	4	plane
op	11:36	0:0	4	==
water	11:39	0:0	4	2
water	11:41	0:0	4	?
call	11:43	11:73	5	FF_CEIL_RSHIFT
arg	11:58	11:67	6	inlink->h
water	11:58	0:0	7	inlink
op	11:64	0:0	7	->
water	11:66	0:0	7	h
arg	11:69	11:73	6	vsub
water	11:69	0:0	7	vsub
water	11:75	0:0	4	:
water	11:77	0:0	4	inlink
op	11:83	0:0	4	->
water	11:85	0:0	4	h
decl	12:8	12:80	4	int	linesize
op	12:21	0:0	4	=
call	12:23	12:79	5	av_image_get_linesize
arg	12:45	12:58	6	frame->format
water	12:45	0:0	7	frame
op	12:50	0:0	7	->
water	12:52	0:0	7	format
arg	12:60	12:72	6	frame->width
water	12:60	0:0	7	frame
op	12:65	0:0	7	->
water	12:67	0:0	7	width
arg	12:74	12:79	6	plane
water	12:74	0:0	7	plane
if	13:8	14:27	4	(linesize < 0)
cond	13:12	13:23	5	linesize < 0
water	13:12	0:0	6	linesize
op	13:21	0:0	6	<
water	13:23	0:0	6	0
stmts	14:12	14:27	5	
return	14:12	14:27	6	linesize
water	14:19	0:0	7	linesize
for	15:8	21:8	4	(i = 0 ;i < h;i ++)
forinit	15:13	15:18	5	i = 0 ;
water	15:13	0:0	6	i
op	15:15	0:0	6	=
water	15:17	0:0	6	0
water	15:18	0:0	6	;
cond	15:20	15:24	5	i < h
water	15:20	0:0	6	i
op	15:22	0:0	6	<
water	15:24	0:0	6	h
forexpr	15:27	15:28	5	i ++
water	15:27	0:0	6	i
op	15:28	0:0	6	++
stmts	15:32	21:8	5	
water	15:32	0:0	6	{
water	16:12	0:0	6	plane_checksum
op	16:26	0:0	6	[
water	16:27	0:0	6	plane
op	16:32	0:0	6	]
op	16:34	0:0	6	=
call	16:36	16:91	6	av_adler32_update
arg	16:54	16:75	7	plane_checksum[plane]
water	16:54	0:0	8	plane_checksum
op	16:68	0:0	8	[
water	16:69	0:0	8	plane
op	16:74	0:0	8	]
arg	16:77	16:81	7	data
water	16:77	0:0	8	data
arg	16:83	16:91	7	linesize
water	16:83	0:0	8	linesize
water	16:92	0:0	6	;
water	17:12	0:0	6	checksum
op	17:21	0:0	6	=
call	17:23	17:65	6	av_adler32_update
arg	17:41	17:49	7	checksum
water	17:41	0:0	8	checksum
arg	17:51	17:55	7	data
water	17:51	0:0	8	data
arg	17:57	17:65	7	linesize
water	17:57	0:0	8	linesize
water	17:66	0:0	6	;
call	18:12	18:69	6	update_sample_stats
arg	18:32	18:36	7	data
water	18:32	0:0	8	data
arg	18:38	18:46	7	linesize
water	18:38	0:0	8	linesize
arg	18:48	18:57	7	sum+plane
water	18:48	0:0	8	sum
op	18:51	0:0	8	+
water	18:52	0:0	8	plane
arg	18:59	18:69	7	sum2+plane
water	18:59	0:0	8	sum2
op	18:63	0:0	8	+
water	18:64	0:0	8	plane
water	18:70	0:0	6	;
water	19:12	0:0	6	pixelcount
op	19:22	0:0	6	[
water	19:23	0:0	6	plane
op	19:28	0:0	6	]
op	19:30	0:0	6	+=
water	19:33	0:0	6	linesize
water	19:41	0:0	6	;
water	20:12	0:0	6	data
op	20:17	0:0	6	+=
water	20:20	0:0	6	frame
op	20:25	0:0	6	->
water	20:27	0:0	6	linesize
op	20:35	0:0	6	[
water	20:36	0:0	6	plane
op	20:41	0:0	6	]
water	20:42	0:0	6	;
water	21:8	0:0	6	}
water	22:4	0:0	4	}
call	23:4	36:38	2	av_log
arg	23:11	23:14	3	ctx
water	23:11	0:0	4	ctx
arg	23:16	23:27	3	AV_LOG_INFO
water	23:16	0:0	4	AV_LOG_INFO
arg	24:11	26:59	3	"n:%4"PRId64" pts:%7s pts_time:%-7s pos:%9"PRId64" ""fmt:%s sar:%d/%d s:%dx%d i:%c iskey:%d type:%c ""checksum:%08"PRIX32" plane_checksum:[%08"PRIX32
water	24:11	0:0	4	"n:%4"
water	24:17	0:0	4	PRId64
water	24:23	0:0	4	" pts:%7s pts_time:%-7s pos:%9"
water	24:54	0:0	4	PRId64
water	24:60	0:0	4	" "
water	25:11	0:0	4	"fmt:%s sar:%d/%d s:%dx%d i:%c iskey:%d type:%c "
water	26:11	0:0	4	"checksum:%08"
water	26:25	0:0	4	PRIX32
water	26:31	0:0	4	" plane_checksum:[%08"
water	26:53	0:0	4	PRIX32
arg	27:11	27:30	3	inlink->frame_count
water	27:11	0:0	4	inlink
op	27:17	0:0	4	->
water	27:19	0:0	4	frame_count
arg	28:11	28:32	3	av_ts2str(frame->pts)
call	28:11	28:31	4	av_ts2str
arg	28:21	28:31	5	frame->pts
water	28:21	0:0	6	frame
op	28:26	0:0	6	->
water	28:28	0:0	6	pts
arg	28:34	28:79	3	av_ts2timestr(frame->pts,&inlink->time_base)
call	28:34	28:78	4	av_ts2timestr
arg	28:48	28:58	5	frame->pts
water	28:48	0:0	6	frame
op	28:53	0:0	6	->
water	28:55	0:0	6	pts
arg	28:60	28:78	5	&inlink->time_base
op	28:60	0:0	6	&
water	28:61	0:0	6	inlink
op	28:67	0:0	6	->
water	28:69	0:0	6	time_base
arg	28:81	28:108	3	av_frame_get_pkt_pos(frame)
call	28:81	28:107	4	av_frame_get_pkt_pos
arg	28:102	28:107	5	frame
water	28:102	0:0	6	frame
arg	29:11	29:21	3	desc->name
water	29:11	0:0	4	desc
op	29:15	0:0	4	->
water	29:17	0:0	4	name
arg	30:11	30:41	3	frame->sample_aspect_ratio.num
water	30:11	0:0	4	frame
op	30:16	0:0	4	->
water	30:18	0:0	4	sample_aspect_ratio
op	30:37	0:0	4	.
water	30:38	0:0	4	num
arg	30:43	30:73	3	frame->sample_aspect_ratio.den
water	30:43	0:0	4	frame
op	30:48	0:0	4	->
water	30:50	0:0	4	sample_aspect_ratio
op	30:69	0:0	4	.
water	30:70	0:0	4	den
arg	31:11	31:23	3	frame->width
water	31:11	0:0	4	frame
op	31:16	0:0	4	->
water	31:18	0:0	4	width
arg	31:25	31:38	3	frame->height
water	31:25	0:0	4	frame
op	31:30	0:0	4	->
water	31:32	0:0	4	height
arg	32:11	33:47	3	!frame->interlaced_frame?'P':frame->top_field_first?'T':'B'
op	32:11	0:0	4	!
water	32:12	0:0	4	frame
op	32:17	0:0	4	->
water	32:19	0:0	4	interlaced_frame
water	32:36	0:0	4	?
water	32:38	0:0	4	'P'
water	32:42	0:0	4	:
water	33:11	0:0	4	frame
op	33:16	0:0	4	->
water	33:18	0:0	4	top_field_first
water	33:36	0:0	4	?
water	33:38	0:0	4	'T'
water	33:42	0:0	4	:
water	33:44	0:0	4	'B'
arg	34:11	34:27	3	frame->key_frame
water	34:11	0:0	4	frame
op	34:16	0:0	4	->
water	34:18	0:0	4	key_frame
arg	35:11	35:53	3	av_get_picture_type_char(frame->pict_type)
call	35:11	35:52	4	av_get_picture_type_char
arg	35:36	35:52	5	frame->pict_type
water	35:36	0:0	6	frame
op	35:41	0:0	6	->
water	35:43	0:0	6	pict_type
arg	36:11	36:19	3	checksum
water	36:11	0:0	4	checksum
arg	36:21	36:38	3	plane_checksum[0]
water	36:21	0:0	4	plane_checksum
op	36:35	0:0	4	[
water	36:36	0:0	4	0
op	36:37	0:0	4	]
water	36:39	0:0	2	;
for	37:4	38:69	2	(plane = 1 ;plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ];plane ++)
forinit	37:9	37:18	3	plane = 1 ;
water	37:9	0:0	4	plane
op	37:15	0:0	4	=
water	37:17	0:0	4	1
water	37:18	0:0	4	;
cond	37:20	37:76	3	plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ]
water	37:20	0:0	4	plane
op	37:26	0:0	4	<
water	37:28	0:0	4	4
op	37:30	0:0	4	&&
water	37:33	0:0	4	frame
op	37:38	0:0	4	->
water	37:40	0:0	4	data
op	37:44	0:0	4	[
water	37:45	0:0	4	plane
op	37:50	0:0	4	]
op	37:52	0:0	4	&&
water	37:55	0:0	4	frame
op	37:60	0:0	4	->
water	37:62	0:0	4	linesize
op	37:70	0:0	4	[
water	37:71	0:0	4	plane
op	37:76	0:0	4	]
forexpr	37:79	37:84	3	plane ++
water	37:79	0:0	4	plane
op	37:84	0:0	4	++
stmts	38:8	38:69	3	
call	38:8	38:68	4	av_log
arg	38:15	38:18	5	ctx
water	38:15	0:0	6	ctx
arg	38:20	38:31	5	AV_LOG_INFO
water	38:20	0:0	6	AV_LOG_INFO
arg	38:33	38:45	5	" %08"PRIX32
water	38:33	0:0	6	" %08"
water	38:39	0:0	6	PRIX32
arg	38:47	38:68	5	plane_checksum[plane]
water	38:47	0:0	6	plane_checksum
op	38:61	0:0	6	[
water	38:62	0:0	6	plane
op	38:67	0:0	6	]
water	38:69	0:0	4	;
call	39:4	39:39	2	av_log
arg	39:11	39:14	3	ctx
water	39:11	0:0	4	ctx
arg	39:16	39:27	3	AV_LOG_INFO
water	39:16	0:0	4	AV_LOG_INFO
arg	39:29	39:39	3	"] mean:["
water	39:29	0:0	4	"] mean:["
water	39:40	0:0	2	;
for	40:4	41:102	2	(plane = 0 ;plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ];plane ++)
forinit	40:9	40:18	3	plane = 0 ;
water	40:9	0:0	4	plane
op	40:15	0:0	4	=
water	40:17	0:0	4	0
water	40:18	0:0	4	;
cond	40:20	40:76	3	plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ]
water	40:20	0:0	4	plane
op	40:26	0:0	4	<
water	40:28	0:0	4	4
op	40:30	0:0	4	&&
water	40:33	0:0	4	frame
op	40:38	0:0	4	->
water	40:40	0:0	4	data
op	40:44	0:0	4	[
water	40:45	0:0	4	plane
op	40:50	0:0	4	]
op	40:52	0:0	4	&&
water	40:55	0:0	4	frame
op	40:60	0:0	4	->
water	40:62	0:0	4	linesize
op	40:70	0:0	4	[
water	40:71	0:0	4	plane
op	40:76	0:0	4	]
forexpr	40:79	40:84	3	plane ++
water	40:79	0:0	4	plane
op	40:84	0:0	4	++
stmts	41:8	41:102	3	
call	41:8	41:101	4	av_log
arg	41:15	41:18	5	ctx
water	41:15	0:0	6	ctx
arg	41:20	41:31	5	AV_LOG_INFO
water	41:20	0:0	6	AV_LOG_INFO
arg	41:33	41:45	5	"%"PRId64" "
water	41:33	0:0	6	"%"
water	41:36	0:0	6	PRId64
water	41:42	0:0	6	" "
arg	41:47	41:101	5	(sum[plane]+pixelcount[plane]/2)/pixelcount[plane]
water	41:47	0:0	6	(
water	41:48	0:0	6	sum
op	41:51	0:0	6	[
water	41:52	0:0	6	plane
op	41:57	0:0	6	]
op	41:59	0:0	6	+
water	41:61	0:0	6	pixelcount
op	41:71	0:0	6	[
water	41:72	0:0	6	plane
op	41:77	0:0	6	]
op	41:78	0:0	6	/
water	41:79	0:0	6	2
water	41:80	0:0	6	)
op	41:82	0:0	6	/
water	41:84	0:0	6	pixelcount
op	41:94	0:0	6	[
water	41:95	0:0	6	plane
op	41:100	0:0	6	]
water	41:102	0:0	4	;
call	42:4	42:42	2	av_log
arg	42:11	42:14	3	ctx
water	42:11	0:0	4	ctx
arg	42:16	42:27	3	AV_LOG_INFO
water	42:16	0:0	4	AV_LOG_INFO
arg	42:29	42:42	3	"\b] stdev:["
water	42:29	0:0	4	"\b] stdev:["
water	42:43	0:0	2	;
for	43:4	45:103	2	(plane = 0 ;plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ];plane ++)
forinit	43:9	43:18	3	plane = 0 ;
water	43:9	0:0	4	plane
op	43:15	0:0	4	=
water	43:17	0:0	4	0
water	43:18	0:0	4	;
cond	43:20	43:76	3	plane < 4 && frame -> data [ plane ] && frame -> linesize [ plane ]
water	43:20	0:0	4	plane
op	43:26	0:0	4	<
water	43:28	0:0	4	4
op	43:30	0:0	4	&&
water	43:33	0:0	4	frame
op	43:38	0:0	4	->
water	43:40	0:0	4	data
op	43:44	0:0	4	[
water	43:45	0:0	4	plane
op	43:50	0:0	4	]
op	43:52	0:0	4	&&
water	43:55	0:0	4	frame
op	43:60	0:0	4	->
water	43:62	0:0	4	linesize
op	43:70	0:0	4	[
water	43:71	0:0	4	plane
op	43:76	0:0	4	]
forexpr	43:79	43:84	3	plane ++
water	43:79	0:0	4	plane
op	43:84	0:0	4	++
stmts	44:8	45:103	3	
call	44:8	45:102	4	av_log
arg	44:15	44:18	5	ctx
water	44:15	0:0	6	ctx
arg	44:20	44:31	5	AV_LOG_INFO
water	44:20	0:0	6	AV_LOG_INFO
arg	44:33	44:41	5	"%3.1f "
water	44:33	0:0	6	"%3.1f "
arg	45:15	45:102	5	sqrt((sum2[plane]-sum[plane]*(double)sum[plane]/pixelcount[plane])/pixelcount[plane])
call	45:15	45:101	6	sqrt
arg	45:20	45:101	7	(sum2[plane]-sum[plane]*(double)sum[plane]/pixelcount[plane])/pixelcount[plane]
water	45:20	0:0	8	(
water	45:21	0:0	8	sum2
op	45:25	0:0	8	[
water	45:26	0:0	8	plane
op	45:31	0:0	8	]
op	45:33	0:0	8	-
water	45:35	0:0	8	sum
op	45:38	0:0	8	[
water	45:39	0:0	8	plane
op	45:44	0:0	8	]
op	45:45	0:0	8	*
water	45:46	0:0	8	(
water	45:47	0:0	8	double
water	45:53	0:0	8	)
water	45:54	0:0	8	sum
op	45:57	0:0	8	[
water	45:58	0:0	8	plane
op	45:63	0:0	8	]
op	45:64	0:0	8	/
water	45:65	0:0	8	pixelcount
op	45:75	0:0	8	[
water	45:76	0:0	8	plane
op	45:81	0:0	8	]
water	45:82	0:0	8	)
op	45:83	0:0	8	/
water	45:84	0:0	8	pixelcount
op	45:94	0:0	8	[
water	45:95	0:0	8	plane
op	45:100	0:0	8	]
water	45:103	0:0	4	;
call	46:4	46:36	2	av_log
arg	46:11	46:14	3	ctx
water	46:11	0:0	4	ctx
arg	46:16	46:27	3	AV_LOG_INFO
water	46:16	0:0	4	AV_LOG_INFO
arg	46:29	46:36	3	"\b]\n"
water	46:29	0:0	4	"\b]\n"
water	46:37	0:0	2	;
for	47:4	73:4	2	(i = 0 ;i < frame -> nb_side_data;i ++)
forinit	47:9	47:14	3	i = 0 ;
water	47:9	0:0	4	i
op	47:11	0:0	4	=
water	47:13	0:0	4	0
water	47:14	0:0	4	;
cond	47:16	47:27	3	i < frame -> nb_side_data
water	47:16	0:0	4	i
op	47:18	0:0	4	<
water	47:20	0:0	4	frame
op	47:25	0:0	4	->
water	47:27	0:0	4	nb_side_data
forexpr	47:41	47:42	3	i ++
water	47:41	0:0	4	i
op	47:42	0:0	4	++
stmts	47:46	73:4	3	
water	47:46	0:0	4	{
decl	48:8	48:49	4	AVFrameSideData	*sd
op	48:28	0:0	4	=
water	48:30	0:0	4	frame
op	48:35	0:0	4	->
water	48:37	0:0	4	side_data
op	48:46	0:0	4	[
water	48:47	0:0	4	i
op	48:48	0:0	4	]
call	49:8	49:49	4	av_log
arg	49:15	49:18	5	ctx
water	49:15	0:0	6	ctx
arg	49:20	49:31	5	AV_LOG_INFO
water	49:20	0:0	6	AV_LOG_INFO
arg	49:33	49:49	5	"  side data - "
water	49:33	0:0	6	"  side data - "
water	49:50	0:0	4	;
switch	50:8	71:8	4	(sd -> type)
cond	50:16	50:20	5	sd -> type
water	50:16	0:0	6	sd
op	50:18	0:0	6	->
water	50:20	0:0	6	type
stmts	50:26	71:8	5	
water	50:26	0:0	6	{
label	51:8	51:34	6	case AV_FRAME_DATA_PANSCAN :
call	52:12	52:47	6	av_log
arg	52:19	52:22	7	ctx
water	52:19	0:0	8	ctx
arg	52:24	52:35	7	AV_LOG_INFO
water	52:24	0:0	8	AV_LOG_INFO
arg	52:37	52:47	7	"pan/scan"
water	52:37	0:0	8	"pan/scan"
water	52:48	0:0	6	;
break	53:12	53:17	6	
label	54:8	54:33	6	case AV_FRAME_DATA_A53_CC :
call	55:12	55:80	6	av_log
arg	55:19	55:22	7	ctx
water	55:19	0:0	8	ctx
arg	55:24	55:35	7	AV_LOG_INFO
water	55:24	0:0	8	AV_LOG_INFO
arg	55:37	55:70	7	"A/53 closed captions (%d bytes)"
water	55:37	0:0	8	"A/53 closed captions (%d bytes)"
arg	55:72	55:80	7	sd->size
water	55:72	0:0	8	sd
op	55:74	0:0	8	->
water	55:76	0:0	8	size
water	55:81	0:0	6	;
break	56:12	56:17	6	
label	57:8	57:35	6	case AV_FRAME_DATA_STEREO3D :
call	58:12	58:33	6	dump_stereo3d
arg	58:26	58:29	7	ctx
water	58:26	0:0	8	ctx
arg	58:31	58:33	7	sd
water	58:31	0:0	8	sd
water	58:34	0:0	6	;
break	59:12	59:17	6	
label	60:8	60:40	6	case AV_FRAME_DATA_DISPLAYMATRIX :
call	61:12	62:63	6	av_log
arg	61:19	61:22	7	ctx
water	61:19	0:0	8	ctx
arg	61:24	61:35	7	AV_LOG_INFO
water	61:24	0:0	8	AV_LOG_INFO
arg	61:37	61:78	7	"displaymatrix: rotation of %.2f degrees"
water	61:37	0:0	8	"displaymatrix: rotation of %.2f degrees"
arg	62:19	62:63	7	av_display_rotation_get((int32_t*)sd->data)
call	62:19	62:62	8	av_display_rotation_get
arg	62:43	62:62	9	(int32_t*)sd->data
water	62:43	0:0	10	(
water	62:44	0:0	10	int32_t
op	62:52	0:0	10	*
water	62:53	0:0	10	)
water	62:54	0:0	10	sd
op	62:56	0:0	10	->
water	62:58	0:0	10	data
water	62:64	0:0	6	;
break	63:12	63:17	6	
label	64:8	64:30	6	case AV_FRAME_DATA_AFD :
call	65:12	65:72	6	av_log
arg	65:19	65:22	7	ctx
water	65:19	0:0	8	ctx
arg	65:24	65:35	7	AV_LOG_INFO
water	65:24	0:0	8	AV_LOG_INFO
arg	65:37	65:59	7	"afd: value of %"PRIu8
water	65:37	0:0	8	"afd: value of %"
water	65:54	0:0	8	PRIu8
arg	65:61	65:72	7	sd->data[0]
water	65:61	0:0	8	sd
op	65:63	0:0	8	->
water	65:65	0:0	8	data
op	65:69	0:0	8	[
water	65:70	0:0	8	0
op	65:71	0:0	8	]
water	65:73	0:0	6	;
break	66:12	66:17	6	
label	67:8	67:15	6	default :
call	68:12	69:37	6	av_log
arg	68:19	68:22	7	ctx
water	68:19	0:0	8	ctx
arg	68:24	68:38	7	AV_LOG_WARNING
water	68:24	0:0	8	AV_LOG_WARNING
arg	68:40	68:78	7	"unknown side data type %d (%d bytes)"
water	68:40	0:0	8	"unknown side data type %d (%d bytes)"
arg	69:19	69:27	7	sd->type
water	69:19	0:0	8	sd
op	69:21	0:0	8	->
water	69:23	0:0	8	type
arg	69:29	69:37	7	sd->size
water	69:29	0:0	8	sd
op	69:31	0:0	8	->
water	69:33	0:0	8	size
water	69:38	0:0	6	;
break	70:12	70:17	6	
water	71:8	0:0	6	}
call	72:8	72:37	4	av_log
arg	72:15	72:18	5	ctx
water	72:15	0:0	6	ctx
arg	72:20	72:31	5	AV_LOG_INFO
water	72:20	0:0	6	AV_LOG_INFO
arg	72:33	72:37	5	"\n"
water	72:33	0:0	6	"\n"
water	72:38	0:0	4	;
water	73:4	0:0	4	}
return	74:4	74:58	2	ff_filter_frame(inlink->dst->outputs[0],frame)
call	74:11	74:57	3	ff_filter_frame
arg	74:27	74:50	4	inlink->dst->outputs[0]
water	74:27	0:0	5	inlink
op	74:33	0:0	5	->
water	74:35	0:0	5	dst
op	74:38	0:0	5	->
water	74:40	0:0	5	outputs
op	74:47	0:0	5	[
water	74:48	0:0	5	0
op	74:49	0:0	5	]
arg	74:52	74:57	4	frame
water	74:52	0:0	5	frame
