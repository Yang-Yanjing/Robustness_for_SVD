func	1:0	66:0	0	static int	sdp_parse_rtpmap
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
param	2:28	2:40	2	AVStream *	st
param	2:42	2:61	2	RTSPStream *	rtsp_st
param	3:28	3:44	2	int	payload_type
param	3:46	3:59	2	const char *	p
stmnts	0:0	65:12	1	
decl	5:4	5:37	2	AVCodecContext	*codec
op	5:26	0:0	2	=
water	5:28	0:0	2	st
op	5:30	0:0	2	->
water	5:32	0:0	2	codec
decl	6:4	6:17	2	char	buf[256]
decl	7:4	7:9	2	int	i
decl	8:4	8:14	2	AVCodec	*c
decl	9:4	9:22	2	const char	*c_name
call	14:4	14:43	2	get_word_sep
arg	14:17	14:20	3	buf
water	14:17	0:0	4	buf
arg	14:22	14:33	3	sizeof(buf)
op	14:22	0:0	4	sizeof
water	14:28	0:0	4	(
water	14:29	0:0	4	buf
water	14:32	0:0	4	)
arg	14:35	14:39	3	"/ "
water	14:35	0:0	4	"/ "
arg	14:41	14:43	3	&p
op	14:41	0:0	4	&
water	14:42	0:0	4	p
water	14:44	0:0	2	;
if	15:4	19:4	2	(payload_type < RTP_PT_PRIVATE)
cond	15:8	15:23	3	payload_type < RTP_PT_PRIVATE
water	15:8	0:0	4	payload_type
op	15:21	0:0	4	<
water	15:23	0:0	4	RTP_PT_PRIVATE
stmts	15:39	19:4	3	
water	15:39	0:0	4	{
water	18:8	0:0	4	codec
op	18:13	0:0	4	->
water	18:15	0:0	4	codec_id
op	18:24	0:0	4	=
call	18:26	18:64	4	ff_rtp_codec_id
arg	18:42	18:45	5	buf
water	18:42	0:0	6	buf
arg	18:47	18:64	5	codec->codec_type
water	18:47	0:0	6	codec
op	18:52	0:0	6	->
water	18:54	0:0	6	codec_type
water	18:65	0:0	4	;
water	19:4	0:0	4	}
if	20:4	30:4	2	(codec -> codec_id == AV_CODEC_ID_NONE)
cond	20:8	20:27	3	codec -> codec_id == AV_CODEC_ID_NONE
water	20:8	0:0	4	codec
op	20:13	0:0	4	->
water	20:15	0:0	4	codec_id
op	20:24	0:0	4	==
water	20:27	0:0	4	AV_CODEC_ID_NONE
stmts	20:45	30:4	3	
water	20:45	0:0	4	{
decl	21:8	22:63	4	RTPDynamicProtocolHandler	*handler
op	21:43	0:0	4	=
call	22:12	22:62	5	ff_rtp_handler_find_by_name
arg	22:40	22:43	6	buf
water	22:40	0:0	7	buf
arg	22:45	22:62	6	codec->codec_type
water	22:45	0:0	7	codec
op	22:50	0:0	7	->
water	22:52	0:0	7	codec_type
call	23:8	23:45	4	init_rtp_handler
arg	23:25	23:32	5	handler
water	23:25	0:0	6	handler
arg	23:34	23:41	5	rtsp_st
water	23:34	0:0	6	rtsp_st
arg	23:43	23:45	5	st
water	23:43	0:0	6	st
water	23:46	0:0	4	;
if	28:8	29:69	4	(! rtsp_st -> dynamic_handler)
cond	28:12	28:22	5	! rtsp_st -> dynamic_handler
op	28:12	0:0	6	!
water	28:13	0:0	6	rtsp_st
op	28:20	0:0	6	->
water	28:22	0:0	6	dynamic_handler
stmts	29:12	29:69	5	
water	29:12	0:0	6	codec
op	29:17	0:0	6	->
water	29:19	0:0	6	codec_id
op	29:28	0:0	6	=
call	29:30	29:68	6	ff_rtp_codec_id
arg	29:46	29:49	7	buf
water	29:46	0:0	8	buf
arg	29:51	29:68	7	codec->codec_type
water	29:51	0:0	8	codec
op	29:56	0:0	8	->
water	29:58	0:0	8	codec_type
water	29:69	0:0	6	;
water	30:4	0:0	4	}
water	31:4	0:0	2	c
op	31:6	0:0	2	=
call	31:8	31:44	2	avcodec_find_decoder
arg	31:29	31:44	3	codec->codec_id
water	31:29	0:0	4	codec
op	31:34	0:0	4	->
water	31:36	0:0	4	codec_id
water	31:45	0:0	2	;
if	32:4	33:24	2	(c && c -> name)
cond	32:8	32:16	3	c && c -> name
water	32:8	0:0	4	c
op	32:10	0:0	4	&&
water	32:13	0:0	4	c
op	32:14	0:0	4	->
water	32:16	0:0	4	name
stmts	33:8	33:24	3	
water	33:8	0:0	4	c_name
op	33:15	0:0	4	=
water	33:17	0:0	4	c
op	33:18	0:0	4	->
water	33:20	0:0	4	name
water	33:24	0:0	4	;
else	34:4	35:25	2
stmts	35:8	35:25	3	
water	35:8	0:0	4	c_name
op	35:15	0:0	4	=
water	35:17	0:0	4	"(null)"
water	35:25	0:0	4	;
call	36:4	36:42	2	get_word_sep
arg	36:17	36:20	3	buf
water	36:17	0:0	4	buf
arg	36:22	36:33	3	sizeof(buf)
op	36:22	0:0	4	sizeof
water	36:28	0:0	4	(
water	36:29	0:0	4	buf
water	36:32	0:0	4	)
arg	36:35	36:38	3	"/"
water	36:35	0:0	4	"/"
arg	36:40	36:42	3	&p
op	36:40	0:0	4	&
water	36:41	0:0	4	p
water	36:43	0:0	2	;
water	37:4	0:0	2	i
op	37:6	0:0	2	=
call	37:8	37:16	2	atoi
arg	37:13	37:16	3	buf
water	37:13	0:0	4	buf
water	37:17	0:0	2	;
switch	38:4	63:4	2	(codec -> codec_type)
cond	38:12	38:19	3	codec -> codec_type
water	38:12	0:0	4	codec
op	38:17	0:0	4	->
water	38:19	0:0	4	codec_type
stmts	38:31	63:4	3	
water	38:31	0:0	4	{
label	39:4	39:27	4	case AVMEDIA_TYPE_AUDIO :
call	40:8	40:66	4	av_log
arg	40:15	40:16	5	s
water	40:15	0:0	6	s
arg	40:18	40:30	5	AV_LOG_DEBUG
water	40:18	0:0	6	AV_LOG_DEBUG
arg	40:32	40:58	5	"audio codec set to: %s\n"
water	40:32	0:0	6	"audio codec set to: %s\n"
arg	40:60	40:66	5	c_name
water	40:60	0:0	6	c_name
water	40:67	0:0	4	;
water	41:8	0:0	4	codec
op	41:13	0:0	4	->
water	41:15	0:0	4	sample_rate
op	41:27	0:0	4	=
water	41:29	0:0	4	RTSP_DEFAULT_AUDIO_SAMPLERATE
water	41:58	0:0	4	;
water	42:8	0:0	4	codec
op	42:13	0:0	4	->
water	42:15	0:0	4	channels
op	42:24	0:0	4	=
water	42:26	0:0	4	RTSP_DEFAULT_NB_AUDIO_CHANNELS
water	42:56	0:0	4	;
if	43:8	50:8	4	(i > 0)
cond	43:12	43:16	5	i > 0
water	43:12	0:0	6	i
op	43:14	0:0	6	>
water	43:16	0:0	6	0
stmts	43:19	50:8	5	
water	43:19	0:0	6	{
water	44:12	0:0	6	codec
op	44:17	0:0	6	->
water	44:19	0:0	6	sample_rate
op	44:31	0:0	6	=
water	44:33	0:0	6	i
water	44:34	0:0	6	;
call	45:12	45:61	6	avpriv_set_pts_info
arg	45:32	45:34	7	st
water	45:32	0:0	8	st
arg	45:36	45:38	7	32
water	45:36	0:0	8	32
arg	45:40	45:41	7	1
water	45:40	0:0	8	1
arg	45:43	45:61	7	codec->sample_rate
water	45:43	0:0	8	codec
op	45:48	0:0	8	->
water	45:50	0:0	8	sample_rate
water	45:62	0:0	6	;
call	46:12	46:50	6	get_word_sep
arg	46:25	46:28	7	buf
water	46:25	0:0	8	buf
arg	46:30	46:41	7	sizeof(buf)
op	46:30	0:0	8	sizeof
water	46:36	0:0	8	(
water	46:37	0:0	8	buf
water	46:40	0:0	8	)
arg	46:43	46:46	7	"/"
water	46:43	0:0	8	"/"
arg	46:48	46:50	7	&p
op	46:48	0:0	8	&
water	46:49	0:0	8	p
water	46:51	0:0	6	;
water	47:12	0:0	6	i
op	47:14	0:0	6	=
call	47:16	47:24	6	atoi
arg	47:21	47:24	7	buf
water	47:21	0:0	8	buf
water	47:25	0:0	6	;
if	48:12	49:35	6	(i > 0)
cond	48:16	48:20	7	i > 0
water	48:16	0:0	8	i
op	48:18	0:0	8	>
water	48:20	0:0	8	0
stmts	49:16	49:35	7	
water	49:16	0:0	8	codec
op	49:21	0:0	8	->
water	49:23	0:0	8	channels
op	49:32	0:0	8	=
water	49:34	0:0	8	i
water	49:35	0:0	8	;
water	50:8	0:0	6	}
call	51:8	52:33	4	av_log
arg	51:15	51:16	5	s
water	51:15	0:0	6	s
arg	51:18	51:30	5	AV_LOG_DEBUG
water	51:18	0:0	6	AV_LOG_DEBUG
arg	51:32	51:63	5	"audio samplerate set to: %i\n"
water	51:32	0:0	6	"audio samplerate set to: %i\n"
arg	52:15	52:33	5	codec->sample_rate
water	52:15	0:0	6	codec
op	52:20	0:0	6	->
water	52:22	0:0	6	sample_rate
water	52:34	0:0	4	;
call	53:8	54:30	4	av_log
arg	53:15	53:16	5	s
water	53:15	0:0	6	s
arg	53:18	53:30	5	AV_LOG_DEBUG
water	53:18	0:0	6	AV_LOG_DEBUG
arg	53:32	53:61	5	"audio channels set to: %i\n"
water	53:32	0:0	6	"audio channels set to: %i\n"
arg	54:15	54:30	5	codec->channels
water	54:15	0:0	6	codec
op	54:20	0:0	6	->
water	54:22	0:0	6	channels
water	54:31	0:0	4	;
break	55:8	55:13	4	
label	56:4	56:27	4	case AVMEDIA_TYPE_VIDEO :
call	57:8	57:66	4	av_log
arg	57:15	57:16	5	s
water	57:15	0:0	6	s
arg	57:18	57:30	5	AV_LOG_DEBUG
water	57:18	0:0	6	AV_LOG_DEBUG
arg	57:32	57:58	5	"video codec set to: %s\n"
water	57:32	0:0	6	"video codec set to: %s\n"
arg	57:60	57:66	5	c_name
water	57:60	0:0	6	c_name
water	57:67	0:0	4	;
if	58:8	59:45	4	(i > 0)
cond	58:12	58:16	5	i > 0
water	58:12	0:0	6	i
op	58:14	0:0	6	>
water	58:16	0:0	6	0
stmts	59:12	59:45	5	
call	59:12	59:44	6	avpriv_set_pts_info
arg	59:32	59:34	7	st
water	59:32	0:0	8	st
arg	59:36	59:38	7	32
water	59:36	0:0	8	32
arg	59:40	59:41	7	1
water	59:40	0:0	8	1
arg	59:43	59:44	7	i
water	59:43	0:0	8	i
water	59:45	0:0	6	;
break	60:8	60:13	4	
label	61:4	61:11	4	default :
break	62:8	62:13	4	
water	63:4	0:0	4	}
call	64:4	64:44	2	finalize_rtp_handler_init
arg	64:30	64:31	3	s
water	64:30	0:0	4	s
arg	64:33	64:40	3	rtsp_st
water	64:33	0:0	4	rtsp_st
arg	64:42	64:44	3	st
water	64:42	0:0	4	st
water	64:45	0:0	2	;
return	65:4	65:12	2	0
water	65:11	0:0	3	0
