func	1:0	580:0	0	static int	encode_thread
params	1:24	0:0	1	
param	1:25	1:42	2	AVCodecContext *	c
param	1:44	1:53	2	void *	arg
stmnts	0:0	579:12	1	
decl	2:4	2:35	2	MpegEncContext	*s
op	2:21	0:0	2	=
op	2:23	0:0	2	*
water	2:24	0:0	2	(
water	2:25	0:0	2	void
op	2:29	0:0	2	*
op	2:30	0:0	2	*
water	2:31	0:0	2	)
water	2:32	0:0	2	arg
decl	3:4	3:28	2	int	mb_x
water	3:12	0:0	2	,
decl	3:4	3:28	2	int	mb_y
water	3:18	0:0	2	,
decl	3:4	3:28	2	int	pdif
op	3:25	0:0	2	=
water	3:27	0:0	2	0
decl	4:4	4:36	2	int	chr_h
op	4:13	0:0	2	=
water	4:15	0:0	2	16
op	4:17	0:0	2	>>
water	4:19	0:0	2	s
op	4:20	0:0	2	->
water	4:22	0:0	2	chroma_y_shift
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
decl	6:4	6:43	2	MpegEncContext	best_s
op	6:26	0:0	2	=
water	6:28	0:0	2	{
water	6:30	0:0	2	0
water	6:32	0:0	2	}
water	6:33	0:0	2	,
decl	6:4	6:43	2	MpegEncContext	backup_s
water	7:4	0:0	2	uint8_t
water	7:12	0:0	2	bit_buf
op	7:19	0:0	2	[
water	7:20	0:0	2	2
op	7:21	0:0	2	]
op	7:22	0:0	2	[
water	7:23	0:0	2	MAX_MB_BYTES
op	7:35	0:0	2	]
water	7:36	0:0	2	;
water	8:4	0:0	2	uint8_t
water	8:12	0:0	2	bit_buf2
op	8:20	0:0	2	[
water	8:21	0:0	2	2
op	8:22	0:0	2	]
op	8:23	0:0	2	[
water	8:24	0:0	2	MAX_MB_BYTES
op	8:36	0:0	2	]
water	8:37	0:0	2	;
water	9:4	0:0	2	uint8_t
water	9:12	0:0	2	bit_buf_tex
op	9:23	0:0	2	[
water	9:24	0:0	2	2
op	9:25	0:0	2	]
op	9:26	0:0	2	[
water	9:27	0:0	2	MAX_MB_BYTES
op	9:39	0:0	2	]
water	9:40	0:0	2	;
decl	10:4	10:42	2	PutBitContext	pb[2]
water	10:23	0:0	2	,
decl	10:4	10:42	2	PutBitContext	pb2[2]
water	10:31	0:0	2	,
decl	10:4	10:42	2	PutBitContext	tex_pb[2]
call	11:4	11:23	2	ff_check_alignment
water	11:24	0:0	2	;
for	12:4	16:4	2	(i = 0 ;i < 2;i ++)
forinit	12:8	12:11	3	i = 0 ;
water	12:8	0:0	4	i
op	12:9	0:0	4	=
water	12:10	0:0	4	0
water	12:11	0:0	4	;
cond	12:13	12:15	3	i < 2
water	12:13	0:0	4	i
op	12:14	0:0	4	<
water	12:15	0:0	4	2
forexpr	12:18	12:19	3	i ++
water	12:18	0:0	4	i
op	12:19	0:0	4	++
stmts	12:22	16:4	3	
water	12:22	0:0	4	{
call	13:8	13:62	4	init_put_bits
arg	13:22	13:32	5	&pb[i]
op	13:22	0:0	6	&
water	13:23	0:0	6	pb
op	13:29	0:0	6	[
water	13:30	0:0	6	i
op	13:31	0:0	6	]
arg	13:34	13:48	5	bit_buf[i]
water	13:34	0:0	6	bit_buf
op	13:45	0:0	6	[
water	13:46	0:0	6	i
op	13:47	0:0	6	]
arg	13:50	13:62	5	MAX_MB_BYTES
water	13:50	0:0	6	MAX_MB_BYTES
water	13:63	0:0	4	;
call	14:8	14:62	4	init_put_bits
arg	14:22	14:32	5	&pb2[i]
op	14:22	0:0	6	&
water	14:23	0:0	6	pb2
op	14:29	0:0	6	[
water	14:30	0:0	6	i
op	14:31	0:0	6	]
arg	14:34	14:48	5	bit_buf2[i]
water	14:34	0:0	6	bit_buf2
op	14:45	0:0	6	[
water	14:46	0:0	6	i
op	14:47	0:0	6	]
arg	14:50	14:62	5	MAX_MB_BYTES
water	14:50	0:0	6	MAX_MB_BYTES
water	14:63	0:0	4	;
call	15:8	15:62	4	init_put_bits
arg	15:22	15:32	5	&tex_pb[i]
op	15:22	0:0	6	&
water	15:23	0:0	6	tex_pb
op	15:29	0:0	6	[
water	15:30	0:0	6	i
op	15:31	0:0	6	]
arg	15:34	15:48	5	bit_buf_tex[i]
water	15:34	0:0	6	bit_buf_tex
op	15:45	0:0	6	[
water	15:46	0:0	6	i
op	15:47	0:0	6	]
arg	15:50	15:62	5	MAX_MB_BYTES
water	15:50	0:0	6	MAX_MB_BYTES
water	15:63	0:0	4	;
water	16:4	0:0	4	}
water	17:4	0:0	2	s
op	17:5	0:0	2	->
water	17:7	0:0	2	last_bits
op	17:16	0:0	2	=
call	17:18	17:39	2	put_bits_count
arg	17:33	17:39	3	&s->pb
op	17:33	0:0	4	&
water	17:34	0:0	4	s
op	17:35	0:0	4	->
water	17:37	0:0	4	pb
water	17:40	0:0	2	;
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	mv_bits
op	18:14	0:0	2	=
water	18:15	0:0	2	0
water	18:16	0:0	2	;
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	misc_bits
op	19:16	0:0	2	=
water	19:17	0:0	2	0
water	19:18	0:0	2	;
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	i_tex_bits
op	20:17	0:0	2	=
water	20:18	0:0	2	0
water	20:19	0:0	2	;
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	p_tex_bits
op	21:17	0:0	2	=
water	21:18	0:0	2	0
water	21:19	0:0	2	;
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	i_count
op	22:14	0:0	2	=
water	22:15	0:0	2	0
water	22:16	0:0	2	;
water	23:4	0:0	2	s
op	23:5	0:0	2	->
water	23:7	0:0	2	f_count
op	23:14	0:0	2	=
water	23:15	0:0	2	0
water	23:16	0:0	2	;
water	24:4	0:0	2	s
op	24:5	0:0	2	->
water	24:7	0:0	2	b_count
op	24:14	0:0	2	=
water	24:15	0:0	2	0
water	24:16	0:0	2	;
water	25:4	0:0	2	s
op	25:5	0:0	2	->
water	25:7	0:0	2	skip_count
op	25:17	0:0	2	=
water	25:18	0:0	2	0
water	25:19	0:0	2	;
for	26:4	31:4	2	(i = 0 ;i < 3;i ++)
forinit	26:8	26:11	3	i = 0 ;
water	26:8	0:0	4	i
op	26:9	0:0	4	=
water	26:10	0:0	4	0
water	26:11	0:0	4	;
cond	26:13	26:15	3	i < 3
water	26:13	0:0	4	i
op	26:14	0:0	4	<
water	26:15	0:0	4	3
forexpr	26:18	26:19	3	i ++
water	26:18	0:0	4	i
op	26:19	0:0	4	++
stmts	26:22	31:4	3	
water	26:22	0:0	4	{
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	last_dc
op	29:18	0:0	4	[
water	29:19	0:0	4	i
op	29:20	0:0	4	]
op	29:22	0:0	4	=
water	29:24	0:0	4	128
op	29:28	0:0	4	<<
water	29:31	0:0	4	s
op	29:32	0:0	4	->
water	29:34	0:0	4	intra_dc_precision
water	29:52	0:0	4	;
water	30:8	0:0	4	s
op	30:9	0:0	4	->
water	30:11	0:0	4	current_picture
op	30:26	0:0	4	.
water	30:27	0:0	4	error
op	30:32	0:0	4	[
water	30:33	0:0	4	i
op	30:34	0:0	4	]
op	30:36	0:0	4	=
water	30:38	0:0	4	0
water	30:39	0:0	4	;
water	31:4	0:0	4	}
if	32:4	36:4	2	(s -> codec_id == AV_CODEC_ID_AMV)
cond	32:7	32:20	3	s -> codec_id == AV_CODEC_ID_AMV
water	32:7	0:0	4	s
op	32:8	0:0	4	->
water	32:10	0:0	4	codec_id
op	32:18	0:0	4	==
water	32:20	0:0	4	AV_CODEC_ID_AMV
stmts	32:36	36:4	3	
water	32:36	0:0	4	{
water	33:8	0:0	4	s
op	33:9	0:0	4	->
water	33:11	0:0	4	last_dc
op	33:18	0:0	4	[
water	33:19	0:0	4	0
op	33:20	0:0	4	]
op	33:22	0:0	4	=
water	33:24	0:0	4	128
op	33:27	0:0	4	*
water	33:28	0:0	4	8
op	33:29	0:0	4	/
water	33:30	0:0	4	13
water	33:32	0:0	4	;
water	34:8	0:0	4	s
op	34:9	0:0	4	->
water	34:11	0:0	4	last_dc
op	34:18	0:0	4	[
water	34:19	0:0	4	1
op	34:20	0:0	4	]
op	34:22	0:0	4	=
water	34:24	0:0	4	128
op	34:27	0:0	4	*
water	34:28	0:0	4	8
op	34:29	0:0	4	/
water	34:30	0:0	4	14
water	34:32	0:0	4	;
water	35:8	0:0	4	s
op	35:9	0:0	4	->
water	35:11	0:0	4	last_dc
op	35:18	0:0	4	[
water	35:19	0:0	4	2
op	35:20	0:0	4	]
op	35:22	0:0	4	=
water	35:24	0:0	4	128
op	35:27	0:0	4	*
water	35:28	0:0	4	8
op	35:29	0:0	4	/
water	35:30	0:0	4	14
water	35:32	0:0	4	;
water	36:4	0:0	4	}
water	37:4	0:0	2	s
op	37:5	0:0	2	->
water	37:7	0:0	2	mb_skip_run
op	37:19	0:0	2	=
water	37:21	0:0	2	0
water	37:22	0:0	2	;
call	38:4	38:44	2	memset
arg	38:11	38:21	3	s->last_mv
water	38:11	0:0	4	s
op	38:12	0:0	4	->
water	38:14	0:0	4	last_mv
arg	38:23	38:24	3	0
water	38:23	0:0	4	0
arg	38:26	38:44	3	sizeof(s->last_mv)
op	38:26	0:0	4	sizeof
water	38:32	0:0	4	(
water	38:33	0:0	4	s
op	38:34	0:0	4	->
water	38:36	0:0	4	last_mv
water	38:43	0:0	4	)
water	38:45	0:0	2	;
water	39:4	0:0	2	s
op	39:5	0:0	2	->
water	39:7	0:0	2	last_mv_dir
op	39:19	0:0	2	=
water	39:21	0:0	2	0
water	39:22	0:0	2	;
switch	40:4	51:4	2	(s -> codec_id)
cond	40:11	40:14	3	s -> codec_id
water	40:11	0:0	4	s
op	40:12	0:0	4	->
water	40:14	0:0	4	codec_id
stmts	40:23	51:4	3	
water	40:23	0:0	4	{
label	41:4	41:25	4	case AV_CODEC_ID_H263 :
label	42:4	42:26	4	case AV_CODEC_ID_H263P :
label	43:4	43:25	4	case AV_CODEC_ID_FLV1 :
if	44:8	45:53	4	(CONFIG_H263_ENCODER)
cond	44:12	44:12	5	CONFIG_H263_ENCODER
water	44:12	0:0	6	CONFIG_H263_ENCODER
stmts	45:12	45:53	5	
water	45:12	0:0	6	s
op	45:13	0:0	6	->
water	45:15	0:0	6	gob_index
op	45:25	0:0	6	=
call	45:27	45:52	6	H263_GOB_HEIGHT
arg	45:43	45:52	7	s->height
water	45:43	0:0	8	s
op	45:44	0:0	8	->
water	45:46	0:0	8	height
water	45:53	0:0	6	;
break	46:8	46:13	4	
label	47:4	47:26	4	case AV_CODEC_ID_MPEG4 :
if	48:8	49:39	4	(CONFIG_MPEG4_ENCODER && s -> partitioned_frame)
cond	48:11	48:38	5	CONFIG_MPEG4_ENCODER && s -> partitioned_frame
water	48:11	0:0	6	CONFIG_MPEG4_ENCODER
op	48:32	0:0	6	&&
water	48:35	0:0	6	s
op	48:36	0:0	6	->
water	48:38	0:0	6	partitioned_frame
stmts	49:12	49:39	5	
call	49:12	49:38	6	ff_mpeg4_init_partitions
arg	49:37	49:38	7	s
water	49:37	0:0	8	s
water	49:39	0:0	6	;
break	50:8	50:13	4	
water	51:4	0:0	4	}
water	52:4	0:0	2	s
op	52:5	0:0	2	->
water	52:7	0:0	2	resync_mb_x
op	52:18	0:0	2	=
water	52:19	0:0	2	0
water	52:20	0:0	2	;
water	53:4	0:0	2	s
op	53:5	0:0	2	->
water	53:7	0:0	2	resync_mb_y
op	53:18	0:0	2	=
water	53:19	0:0	2	0
water	53:20	0:0	2	;
water	54:4	0:0	2	s
op	54:5	0:0	2	->
water	54:7	0:0	2	first_slice_line
op	54:24	0:0	2	=
water	54:26	0:0	2	1
water	54:27	0:0	2	;
water	55:4	0:0	2	s
op	55:5	0:0	2	->
water	55:7	0:0	2	ptr_lastgob
op	55:19	0:0	2	=
water	55:21	0:0	2	s
op	55:22	0:0	2	->
water	55:24	0:0	2	pb
op	55:26	0:0	2	.
water	55:27	0:0	2	buf
water	55:30	0:0	2	;
for	56:4	566:4	2	(mb_y = s -> start_mb_y ;mb_y < s -> end_mb_y;mb_y ++)
forinit	56:8	56:27	3	mb_y = s -> start_mb_y ;
water	56:8	0:0	4	mb_y
op	56:12	0:0	4	=
water	56:14	0:0	4	s
op	56:15	0:0	4	->
water	56:17	0:0	4	start_mb_y
water	56:27	0:0	4	;
cond	56:29	56:39	3	mb_y < s -> end_mb_y
water	56:29	0:0	4	mb_y
op	56:34	0:0	4	<
water	56:36	0:0	4	s
op	56:37	0:0	4	->
water	56:39	0:0	4	end_mb_y
forexpr	56:49	56:53	3	mb_y ++
water	56:49	0:0	4	mb_y
op	56:53	0:0	4	++
stmts	56:57	566:4	3	
water	56:57	0:0	4	{
water	57:8	0:0	4	s
op	57:9	0:0	4	->
water	57:11	0:0	4	mb_x
op	57:15	0:0	4	=
water	57:16	0:0	4	0
water	57:17	0:0	4	;
water	58:8	0:0	4	s
op	58:9	0:0	4	->
water	58:11	0:0	4	mb_y
op	58:15	0:0	4	=
water	58:17	0:0	4	mb_y
water	58:21	0:0	4	;
call	59:8	59:34	4	ff_set_qscale
arg	59:22	59:23	5	s
water	59:22	0:0	6	s
arg	59:25	59:34	5	s->qscale
water	59:25	0:0	6	s
op	59:26	0:0	6	->
water	59:28	0:0	6	qscale
water	59:35	0:0	4	;
call	60:8	60:29	4	ff_init_block_index
arg	60:28	60:29	5	s
water	60:28	0:0	6	s
water	60:30	0:0	4	;
for	61:8	565:8	4	(mb_x = 0 ;mb_x < s -> mb_width;mb_x ++)
forinit	61:12	61:18	5	mb_x = 0 ;
water	61:12	0:0	6	mb_x
op	61:16	0:0	6	=
water	61:17	0:0	6	0
water	61:18	0:0	6	;
cond	61:20	61:30	5	mb_x < s -> mb_width
water	61:20	0:0	6	mb_x
op	61:25	0:0	6	<
water	61:27	0:0	6	s
op	61:28	0:0	6	->
water	61:30	0:0	6	mb_width
forexpr	61:40	61:44	5	mb_x ++
water	61:40	0:0	6	mb_x
op	61:44	0:0	6	++
stmts	61:48	565:8	5	
water	61:48	0:0	6	{
decl	62:12	62:44	6	int	xy
op	62:18	0:0	6	=
water	62:20	0:0	6	mb_y
op	62:24	0:0	6	*
water	62:25	0:0	6	s
op	62:26	0:0	6	->
water	62:28	0:0	6	mb_stride
op	62:38	0:0	6	+
water	62:40	0:0	6	mb_x
decl	63:12	63:39	6	int	mb_type
op	63:23	0:0	6	=
water	63:25	0:0	6	s
op	63:26	0:0	6	->
water	63:28	0:0	6	mb_type
op	63:35	0:0	6	[
water	63:36	0:0	6	xy
op	63:38	0:0	6	]
decl	65:12	65:29	6	int	dmin
op	65:20	0:0	6	=
water	65:22	0:0	6	INT_MAX
decl	66:12	66:19	6	int	dir
decl	67:12	68:57	6	int	size_increase
op	67:30	0:0	6	=
water	67:33	0:0	6	s
op	67:34	0:0	6	->
water	67:36	0:0	6	avctx
op	67:41	0:0	6	->
water	67:43	0:0	6	internal
op	67:51	0:0	6	->
water	67:53	0:0	6	byte_buffer_size
op	67:69	0:0	6	/
water	67:70	0:0	6	4
op	68:31	0:0	6	+
water	68:33	0:0	6	s
op	68:34	0:0	6	->
water	68:36	0:0	6	mb_width
op	68:44	0:0	6	*
water	68:45	0:0	6	MAX_MB_BYTES
call	69:12	69:73	6	ff_mpv_reallocate_putbitbuffer
arg	69:43	69:44	7	s
water	69:43	0:0	8	s
arg	69:46	69:58	7	MAX_MB_BYTES
water	69:46	0:0	8	MAX_MB_BYTES
arg	69:60	69:73	7	size_increase
water	69:60	0:0	8	size_increase
water	69:74	0:0	6	;
if	70:12	73:12	6	(s -> pb . buf_end - s -> pb . buf - (put_bits_count (& s -> pb ) >> 3 ) < MAX_MB_BYTES)
cond	70:15	70:73	7	s -> pb . buf_end - s -> pb . buf - (put_bits_count (& s -> pb ) >> 3 ) < MAX_MB_BYTES
water	70:15	0:0	8	s
op	70:16	0:0	8	->
water	70:18	0:0	8	pb
op	70:20	0:0	8	.
water	70:21	0:0	8	buf_end
op	70:29	0:0	8	-
water	70:31	0:0	8	s
op	70:32	0:0	8	->
water	70:34	0:0	8	pb
op	70:36	0:0	8	.
water	70:37	0:0	8	buf
op	70:41	0:0	8	-
water	70:43	0:0	8	(
call	70:44	70:65	8	put_bits_count
arg	70:59	70:65	9	&s->pb
op	70:59	0:0	10	&
water	70:60	0:0	10	s
op	70:61	0:0	10	->
water	70:63	0:0	10	pb
op	70:66	0:0	8	>>
water	70:68	0:0	8	3
water	70:69	0:0	8	)
op	70:71	0:0	8	<
water	70:73	0:0	8	MAX_MB_BYTES
stmts	70:86	73:12	7	
water	70:86	0:0	8	{
call	71:16	71:74	8	av_log
arg	71:23	71:31	9	s->avctx
water	71:23	0:0	10	s
op	71:24	0:0	10	->
water	71:26	0:0	10	avctx
arg	71:33	71:45	9	AV_LOG_ERROR
water	71:33	0:0	10	AV_LOG_ERROR
arg	71:47	71:74	9	"encoded frame too large\n"
water	71:47	0:0	10	"encoded frame too large\n"
water	71:75	0:0	8	;
return	72:16	72:25	8	-1
op	72:23	0:0	9	-
water	72:24	0:0	9	1
water	73:12	0:0	8	}
if	74:12	80:12	6	(s -> data_partitioning)
cond	74:15	74:18	7	s -> data_partitioning
water	74:15	0:0	8	s
op	74:16	0:0	8	->
water	74:18	0:0	8	data_partitioning
stmts	74:36	80:12	7	
water	74:36	0:0	8	{
if	75:16	79:16	8	(s -> pb2 . buf_end - s -> pb2 . buf - (put_bits_count (& s -> pb2 ) >> 3 ) < MAX_MB_BYTES || s -> tex_pb . buf_end - s -> tex_pb . buf - (put_bits_count (& s -> tex_pb ) >> 3 ) < MAX_MB_BYTES)
cond	75:22	76:93	9	s -> pb2 . buf_end - s -> pb2 . buf - (put_bits_count (& s -> pb2 ) >> 3 ) < MAX_MB_BYTES || s -> tex_pb . buf_end - s -> tex_pb . buf - (put_bits_count (& s -> tex_pb ) >> 3 ) < MAX_MB_BYTES
water	75:22	0:0	10	s
op	75:23	0:0	10	->
water	75:25	0:0	10	pb2
op	75:31	0:0	10	.
water	75:32	0:0	10	buf_end
op	75:40	0:0	10	-
water	75:42	0:0	10	s
op	75:43	0:0	10	->
water	75:45	0:0	10	pb2
op	75:51	0:0	10	.
water	75:52	0:0	10	buf
op	75:56	0:0	10	-
water	75:58	0:0	10	(
call	75:59	75:85	10	put_bits_count
arg	75:74	75:85	11	&s->pb2
op	75:74	0:0	12	&
water	75:75	0:0	12	s
op	75:76	0:0	12	->
water	75:82	0:0	12	pb2
op	75:86	0:0	10	>>
water	75:88	0:0	10	3
water	75:89	0:0	10	)
op	75:91	0:0	10	<
water	75:93	0:0	10	MAX_MB_BYTES
op	76:19	0:0	10	||
water	76:22	0:0	10	s
op	76:23	0:0	10	->
water	76:25	0:0	10	tex_pb
op	76:31	0:0	10	.
water	76:32	0:0	10	buf_end
op	76:40	0:0	10	-
water	76:42	0:0	10	s
op	76:43	0:0	10	->
water	76:45	0:0	10	tex_pb
op	76:51	0:0	10	.
water	76:52	0:0	10	buf
op	76:56	0:0	10	-
water	76:58	0:0	10	(
call	76:59	76:85	10	put_bits_count
arg	76:74	76:85	11	&s->tex_pb
op	76:74	0:0	12	&
water	76:75	0:0	12	s
op	76:76	0:0	12	->
water	76:78	0:0	12	tex_pb
op	76:86	0:0	10	>>
water	76:88	0:0	10	3
water	76:89	0:0	10	)
op	76:91	0:0	10	<
water	76:93	0:0	10	MAX_MB_BYTES
stmts	76:106	79:16	9	
water	76:106	0:0	10	{
call	77:20	77:90	10	av_log
arg	77:27	77:35	11	s->avctx
water	77:27	0:0	12	s
op	77:28	0:0	12	->
water	77:30	0:0	12	avctx
arg	77:37	77:49	11	AV_LOG_ERROR
water	77:37	0:0	12	AV_LOG_ERROR
arg	77:51	77:90	11	"encoded partitioned frame too large\n"
water	77:51	0:0	12	"encoded partitioned frame too large\n"
water	77:91	0:0	10	;
return	78:20	78:29	10	-1
op	78:27	0:0	11	-
water	78:28	0:0	11	1
water	79:16	0:0	10	}
water	80:12	0:0	8	}
water	81:12	0:0	6	s
op	81:13	0:0	6	->
water	81:15	0:0	6	mb_x
op	81:20	0:0	6	=
water	81:22	0:0	6	mb_x
water	81:26	0:0	6	;
water	82:12	0:0	6	s
op	82:13	0:0	6	->
water	82:15	0:0	6	mb_y
op	82:20	0:0	6	=
water	82:22	0:0	6	mb_y
water	82:26	0:0	6	;
call	83:12	83:35	6	ff_update_block_index
arg	83:34	83:35	7	s
water	83:34	0:0	8	s
water	83:36	0:0	6	;
if	84:12	88:12	6	(CONFIG_H261_ENCODER && s -> codec_id == AV_CODEC_ID_H261)
cond	84:15	84:53	7	CONFIG_H261_ENCODER && s -> codec_id == AV_CODEC_ID_H261
water	84:15	0:0	8	CONFIG_H261_ENCODER
op	84:35	0:0	8	&&
water	84:38	0:0	8	s
op	84:39	0:0	8	->
water	84:41	0:0	8	codec_id
op	84:50	0:0	8	==
water	84:53	0:0	8	AV_CODEC_ID_H261
stmts	84:70	88:12	7	
water	84:70	0:0	8	{
call	85:16	85:42	8	ff_h261_reorder_mb_index
arg	85:41	85:42	9	s
water	85:41	0:0	10	s
water	85:43	0:0	8	;
water	86:16	0:0	8	xy
op	86:18	0:0	8	=
water	86:20	0:0	8	s
op	86:21	0:0	8	->
water	86:23	0:0	8	mb_y
op	86:27	0:0	8	*
water	86:28	0:0	8	s
op	86:29	0:0	8	->
water	86:31	0:0	8	mb_stride
op	86:41	0:0	8	+
water	86:43	0:0	8	s
op	86:44	0:0	8	->
water	86:46	0:0	8	mb_x
water	86:50	0:0	8	;
water	87:16	0:0	8	mb_type
op	87:23	0:0	8	=
water	87:25	0:0	8	s
op	87:26	0:0	8	->
water	87:28	0:0	8	mb_type
op	87:35	0:0	8	[
water	87:36	0:0	8	xy
op	87:38	0:0	8	]
water	87:39	0:0	8	;
water	88:12	0:0	8	}
if	90:12	163:12	6	(s -> rtp_mode)
cond	90:15	90:18	7	s -> rtp_mode
water	90:15	0:0	8	s
op	90:16	0:0	8	->
water	90:18	0:0	8	rtp_mode
stmts	90:27	163:12	7	
water	90:27	0:0	8	{
decl	91:16	91:53	8	int	current_packet_size
water	91:39	0:0	8	,
decl	91:16	91:53	8	int	is_gob_start
water	92:16	0:0	8	current_packet_size
op	92:35	0:0	8	=
water	92:37	0:0	8	(
water	92:38	0:0	8	(
call	92:39	92:60	8	put_bits_count
arg	92:54	92:60	9	&s->pb
op	92:54	0:0	10	&
water	92:55	0:0	10	s
op	92:56	0:0	10	->
water	92:58	0:0	10	pb
op	92:61	0:0	8	+
water	92:62	0:0	8	7
water	92:63	0:0	8	)
op	92:64	0:0	8	>>
water	92:66	0:0	8	3
water	92:67	0:0	8	)
op	92:69	0:0	8	-
water	92:71	0:0	8	(
water	92:72	0:0	8	s
op	92:73	0:0	8	->
water	92:75	0:0	8	ptr_lastgob
op	92:87	0:0	8	-
water	92:89	0:0	8	s
op	92:90	0:0	8	->
water	92:92	0:0	8	pb
op	92:94	0:0	8	.
water	92:95	0:0	8	buf
water	92:98	0:0	8	)
water	92:99	0:0	8	;
water	93:16	0:0	8	is_gob_start
op	93:28	0:0	8	=
water	93:30	0:0	8	s
op	93:31	0:0	8	->
water	93:33	0:0	8	avctx
op	93:38	0:0	8	->
water	93:40	0:0	8	rtp_payload_size
op	93:57	0:0	8	&&
water	93:60	0:0	8	current_packet_size
op	93:80	0:0	8	>=
water	93:83	0:0	8	s
op	93:84	0:0	8	->
water	93:86	0:0	8	avctx
op	93:91	0:0	8	->
water	93:93	0:0	8	rtp_payload_size
op	93:110	0:0	8	&&
water	93:113	0:0	8	mb_y
op	93:118	0:0	8	+
water	93:120	0:0	8	mb_x
op	93:124	0:0	8	>
water	93:125	0:0	8	0
water	93:126	0:0	8	;
if	94:16	94:79	8	(s -> start_mb_y == mb_y && mb_y > 0 && mb_x == 0)
cond	94:19	94:62	9	s -> start_mb_y == mb_y && mb_y > 0 && mb_x == 0
water	94:19	0:0	10	s
op	94:20	0:0	10	->
water	94:22	0:0	10	start_mb_y
op	94:33	0:0	10	==
water	94:36	0:0	10	mb_y
op	94:41	0:0	10	&&
water	94:44	0:0	10	mb_y
op	94:49	0:0	10	>
water	94:51	0:0	10	0
op	94:53	0:0	10	&&
water	94:56	0:0	10	mb_x
op	94:60	0:0	10	==
water	94:62	0:0	10	0
stmts	94:65	94:79	9	
water	94:65	0:0	10	is_gob_start
op	94:77	0:0	10	=
water	94:78	0:0	10	1
water	94:79	0:0	10	;
switch	95:16	109:16	8	(s -> codec_id)
cond	95:23	95:26	9	s -> codec_id
water	95:23	0:0	10	s
op	95:24	0:0	10	->
water	95:26	0:0	10	codec_id
stmts	95:35	109:16	9	
water	95:35	0:0	10	{
label	96:16	96:37	10	case AV_CODEC_ID_H263 :
label	97:16	97:38	10	case AV_CODEC_ID_H263P :
if	98:20	99:74	10	(! s -> h263_slice_structured)
cond	98:23	98:27	11	! s -> h263_slice_structured
op	98:23	0:0	12	!
water	98:24	0:0	12	s
op	98:25	0:0	12	->
water	98:27	0:0	12	h263_slice_structured
stmts	99:24	99:74	11	
if	99:24	99:74	12	(s -> mb_x || s -> mb_y % s -> gob_index)
cond	99:27	99:49	13	s -> mb_x || s -> mb_y % s -> gob_index
water	99:27	0:0	14	s
op	99:28	0:0	14	->
water	99:30	0:0	14	mb_x
op	99:35	0:0	14	||
water	99:38	0:0	14	s
op	99:39	0:0	14	->
water	99:41	0:0	14	mb_y
op	99:45	0:0	14	%
water	99:46	0:0	14	s
op	99:47	0:0	14	->
water	99:49	0:0	14	gob_index
stmts	99:60	99:74	13	
water	99:60	0:0	14	is_gob_start
op	99:72	0:0	14	=
water	99:73	0:0	14	0
water	99:74	0:0	14	;
break	100:20	100:25	10	
label	101:16	101:43	10	case AV_CODEC_ID_MPEG2VIDEO :
if	102:20	102:63	10	(s -> mb_x == 0 && s -> mb_y != 0)
cond	102:23	102:46	11	s -> mb_x == 0 && s -> mb_y != 0
water	102:23	0:0	12	s
op	102:24	0:0	12	->
water	102:26	0:0	12	mb_x
op	102:30	0:0	12	==
water	102:32	0:0	12	0
op	102:34	0:0	12	&&
water	102:37	0:0	12	s
op	102:38	0:0	12	->
water	102:40	0:0	12	mb_y
op	102:44	0:0	12	!=
water	102:46	0:0	12	0
stmts	102:49	102:63	11	
water	102:49	0:0	12	is_gob_start
op	102:61	0:0	12	=
water	102:62	0:0	12	1
water	102:63	0:0	12	;
label	103:16	103:43	10	case AV_CODEC_ID_MPEG1VIDEO :
if	104:20	104:53	10	(s -> mb_skip_run)
cond	104:23	104:26	11	s -> mb_skip_run
water	104:23	0:0	12	s
op	104:24	0:0	12	->
water	104:26	0:0	12	mb_skip_run
stmts	104:39	104:53	11	
water	104:39	0:0	12	is_gob_start
op	104:51	0:0	12	=
water	104:52	0:0	12	0
water	104:53	0:0	12	;
break	105:20	105:25	10	
label	106:16	106:38	10	case AV_CODEC_ID_MJPEG :
if	107:20	107:63	10	(s -> mb_x == 0 && s -> mb_y != 0)
cond	107:23	107:46	11	s -> mb_x == 0 && s -> mb_y != 0
water	107:23	0:0	12	s
op	107:24	0:0	12	->
water	107:26	0:0	12	mb_x
op	107:30	0:0	12	==
water	107:32	0:0	12	0
op	107:34	0:0	12	&&
water	107:37	0:0	12	s
op	107:38	0:0	12	->
water	107:40	0:0	12	mb_y
op	107:44	0:0	12	!=
water	107:46	0:0	12	0
stmts	107:49	107:63	11	
water	107:49	0:0	12	is_gob_start
op	107:61	0:0	12	=
water	107:62	0:0	12	1
water	107:63	0:0	12	;
break	108:20	108:25	10	
water	109:16	0:0	10	}
if	110:16	162:16	8	(is_gob_start)
cond	110:19	110:19	9	is_gob_start
water	110:19	0:0	10	is_gob_start
stmts	110:32	162:16	9	
water	110:32	0:0	10	{
if	111:20	116:20	10	(s -> start_mb_y != mb_y || mb_x != 0)
cond	111:23	111:54	11	s -> start_mb_y != mb_y || mb_x != 0
water	111:23	0:0	12	s
op	111:24	0:0	12	->
water	111:26	0:0	12	start_mb_y
op	111:37	0:0	12	!=
water	111:40	0:0	12	mb_y
op	111:45	0:0	12	||
water	111:48	0:0	12	mb_x
op	111:52	0:0	12	!=
water	111:54	0:0	12	0
stmts	111:56	116:20	11	
water	111:56	0:0	12	{
call	112:24	112:41	12	write_slice_end
arg	112:40	112:41	13	s
water	112:40	0:0	14	s
water	112:42	0:0	12	;
if	113:24	115:24	12	(CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4 && s -> partitioned_frame)
cond	113:27	113:88	13	CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4 && s -> partitioned_frame
water	113:27	0:0	14	CONFIG_MPEG4_ENCODER
op	113:48	0:0	14	&&
water	113:51	0:0	14	s
op	113:52	0:0	14	->
water	113:54	0:0	14	codec_id
op	113:62	0:0	14	==
water	113:64	0:0	14	AV_CODEC_ID_MPEG4
op	113:82	0:0	14	&&
water	113:85	0:0	14	s
op	113:86	0:0	14	->
water	113:88	0:0	14	partitioned_frame
stmts	113:106	115:24	13	
water	113:106	0:0	14	{
call	114:28	114:54	14	ff_mpeg4_init_partitions
arg	114:53	114:54	15	s
water	114:53	0:0	16	s
water	114:55	0:0	14	;
water	115:24	0:0	14	}
water	116:20	0:0	12	}
call	117:20	117:62	10	av_assert2
arg	117:31	117:62	11	(put_bits_count(&s->pb)&7)==0
water	117:31	0:0	12	(
call	117:32	117:53	12	put_bits_count
arg	117:47	117:53	13	&s->pb
op	117:47	0:0	14	&
water	117:48	0:0	14	s
op	117:49	0:0	14	->
water	117:51	0:0	14	pb
op	117:54	0:0	12	&
water	117:55	0:0	12	7
water	117:56	0:0	12	)
op	117:58	0:0	12	==
water	117:61	0:0	12	0
water	117:63	0:0	10	;
water	118:20	0:0	10	current_packet_size
op	118:39	0:0	10	=
call	118:41	118:60	10	put_bits_ptr
arg	118:54	118:60	11	&s->pb
op	118:54	0:0	12	&
water	118:55	0:0	12	s
op	118:56	0:0	12	->
water	118:58	0:0	12	pb
op	118:62	0:0	10	-
water	118:64	0:0	10	s
op	118:65	0:0	10	->
water	118:67	0:0	10	ptr_lastgob
water	118:78	0:0	10	;
if	119:20	127:20	10	(s -> error_rate && s -> resync_mb_x + s -> resync_mb_y > 0)
cond	119:24	119:75	11	s -> error_rate && s -> resync_mb_x + s -> resync_mb_y > 0
water	119:24	0:0	12	s
op	119:25	0:0	12	->
water	119:27	0:0	12	error_rate
op	119:38	0:0	12	&&
water	119:41	0:0	12	s
op	119:42	0:0	12	->
water	119:44	0:0	12	resync_mb_x
op	119:56	0:0	12	+
water	119:58	0:0	12	s
op	119:59	0:0	12	->
water	119:61	0:0	12	resync_mb_y
op	119:73	0:0	12	>
water	119:75	0:0	12	0
stmts	119:78	127:20	11	
water	119:78	0:0	12	{
decl	120:24	120:100	12	int	r
op	120:29	0:0	12	=
call	120:31	120:52	13	put_bits_count
arg	120:46	120:52	14	&s->pb
op	120:46	0:0	15	&
water	120:47	0:0	15	s
op	120:48	0:0	15	->
water	120:50	0:0	15	pb
op	120:53	0:0	12	/
water	120:54	0:0	12	8
op	120:56	0:0	12	+
water	120:58	0:0	12	s
op	120:59	0:0	12	->
water	120:61	0:0	12	picture_number
op	120:76	0:0	12	+
water	120:78	0:0	12	16
op	120:81	0:0	12	+
water	120:83	0:0	12	s
op	120:84	0:0	12	->
water	120:86	0:0	12	mb_x
op	120:91	0:0	12	+
water	120:93	0:0	12	s
op	120:94	0:0	12	->
water	120:96	0:0	12	mb_y
decl	121:24	121:51	12	int	d
op	121:30	0:0	12	=
water	121:32	0:0	12	100
op	121:36	0:0	12	/
water	121:38	0:0	12	s
op	121:39	0:0	12	->
water	121:41	0:0	12	error_rate
if	122:24	126:24	12	(r % d == 0)
cond	122:27	122:36	13	r % d == 0
water	122:27	0:0	14	r
op	122:29	0:0	14	%
water	122:31	0:0	14	d
op	122:33	0:0	14	==
water	122:36	0:0	14	0
stmts	122:38	126:24	13	
water	122:38	0:0	14	{
water	123:28	0:0	14	current_packet_size
op	123:47	0:0	14	=
water	123:48	0:0	14	0
water	123:49	0:0	14	;
water	124:28	0:0	14	s
op	124:29	0:0	14	->
water	124:31	0:0	14	pb
op	124:33	0:0	14	.
water	124:34	0:0	14	buf_ptr
op	124:41	0:0	14	=
water	124:43	0:0	14	s
op	124:44	0:0	14	->
water	124:46	0:0	14	ptr_lastgob
water	124:57	0:0	14	;
call	125:28	125:73	14	assert
arg	125:35	125:73	15	put_bits_ptr(&s->pb)==s->ptr_lastgob
call	125:35	125:54	16	put_bits_ptr
arg	125:48	125:54	17	&s->pb
op	125:48	0:0	18	&
water	125:49	0:0	18	s
op	125:50	0:0	18	->
water	125:52	0:0	18	pb
op	125:56	0:0	16	==
water	125:59	0:0	16	s
op	125:60	0:0	16	->
water	125:62	0:0	16	ptr_lastgob
water	125:74	0:0	14	;
water	126:24	0:0	14	}
water	127:20	0:0	12	}
if	128:20	131:20	10	(s -> avctx -> rtp_callback)
cond	128:24	128:34	11	s -> avctx -> rtp_callback
water	128:24	0:0	12	s
op	128:25	0:0	12	->
water	128:27	0:0	12	avctx
op	128:32	0:0	12	->
water	128:34	0:0	12	rtp_callback
stmts	128:47	131:20	11	
water	128:47	0:0	12	{
decl	129:24	129:99	12	int	number_mb
op	129:38	0:0	12	=
water	129:40	0:0	12	(
water	129:41	0:0	12	mb_y
op	129:46	0:0	12	-
water	129:48	0:0	12	s
op	129:49	0:0	12	->
water	129:51	0:0	12	resync_mb_y
water	129:62	0:0	12	)
op	129:63	0:0	12	*
water	129:64	0:0	12	s
op	129:65	0:0	12	->
water	129:67	0:0	12	mb_width
op	129:76	0:0	12	+
water	129:78	0:0	12	mb_x
op	129:83	0:0	12	-
water	129:85	0:0	12	s
op	129:86	0:0	12	->
water	129:88	0:0	12	resync_mb_x
call	130:24	130:103	12	s->avctx->rtp_callback
arg	130:47	130:55	13	s->avctx
water	130:47	0:0	14	s
op	130:48	0:0	14	->
water	130:50	0:0	14	avctx
arg	130:57	130:71	13	s->ptr_lastgob
water	130:57	0:0	14	s
op	130:58	0:0	14	->
water	130:60	0:0	14	ptr_lastgob
arg	130:73	130:92	13	current_packet_size
water	130:73	0:0	14	current_packet_size
arg	130:94	130:103	13	number_mb
water	130:94	0:0	14	number_mb
water	130:104	0:0	12	;
water	131:20	0:0	12	}
call	132:20	132:39	10	update_mb_info
arg	132:35	132:36	11	s
water	132:35	0:0	12	s
arg	132:38	132:39	11	1
water	132:38	0:0	12	1
water	132:40	0:0	10	;
switch	133:20	152:20	10	(s -> codec_id)
cond	133:27	133:30	11	s -> codec_id
water	133:27	0:0	12	s
op	133:28	0:0	12	->
water	133:30	0:0	12	codec_id
stmts	133:39	152:20	11	
water	133:39	0:0	12	{
label	134:20	134:42	12	case AV_CODEC_ID_MPEG4 :
if	135:24	138:24	12	(CONFIG_MPEG4_ENCODER)
cond	135:28	135:28	13	CONFIG_MPEG4_ENCODER
water	135:28	0:0	14	CONFIG_MPEG4_ENCODER
stmts	135:50	138:24	13	
water	135:50	0:0	14	{
call	136:28	136:65	14	ff_mpeg4_encode_video_packet_header
arg	136:64	136:65	15	s
water	136:64	0:0	16	s
water	136:66	0:0	14	;
call	137:28	137:52	14	ff_mpeg4_clean_buffers
arg	137:51	137:52	15	s
water	137:51	0:0	16	s
water	137:53	0:0	14	;
water	138:24	0:0	14	}
break	139:20	139:25	12	
label	140:20	140:47	12	case AV_CODEC_ID_MPEG1VIDEO :
label	141:20	141:47	12	case AV_CODEC_ID_MPEG2VIDEO :
if	142:24	145:24	12	(CONFIG_MPEG1VIDEO_ENCODER || CONFIG_MPEG2VIDEO_ENCODER)
cond	142:28	142:57	13	CONFIG_MPEG1VIDEO_ENCODER || CONFIG_MPEG2VIDEO_ENCODER
water	142:28	0:0	14	CONFIG_MPEG1VIDEO_ENCODER
op	142:54	0:0	14	||
water	142:57	0:0	14	CONFIG_MPEG2VIDEO_ENCODER
stmts	142:84	145:24	13	
water	142:84	0:0	14	{
call	143:28	143:58	14	ff_mpeg1_encode_slice_header
arg	143:57	143:58	15	s
water	143:57	0:0	16	s
water	143:59	0:0	14	;
call	144:28	144:52	14	ff_mpeg1_clean_buffers
arg	144:51	144:52	15	s
water	144:51	0:0	16	s
water	144:53	0:0	14	;
water	145:24	0:0	14	}
break	146:20	146:25	12	
label	147:20	147:41	12	case AV_CODEC_ID_H263 :
label	148:20	148:42	12	case AV_CODEC_ID_H263P :
if	149:24	150:62	12	(CONFIG_H263_ENCODER)
cond	149:28	149:28	13	CONFIG_H263_ENCODER
water	149:28	0:0	14	CONFIG_H263_ENCODER
stmts	150:28	150:62	13	
call	150:28	150:61	14	ff_h263_encode_gob_header
arg	150:54	150:55	15	s
water	150:54	0:0	16	s
arg	150:57	150:61	15	mb_y
water	150:57	0:0	16	mb_y
water	150:62	0:0	14	;
break	151:20	151:25	12	
water	152:20	0:0	12	}
if	153:20	157:20	10	(s -> avctx -> flags & AV_CODEC_FLAG_PASS1)
cond	153:24	153:42	11	s -> avctx -> flags & AV_CODEC_FLAG_PASS1
water	153:24	0:0	12	s
op	153:25	0:0	12	->
water	153:27	0:0	12	avctx
op	153:32	0:0	12	->
water	153:34	0:0	12	flags
op	153:40	0:0	12	&
water	153:42	0:0	12	AV_CODEC_FLAG_PASS1
stmts	153:63	157:20	11	
water	153:63	0:0	12	{
decl	154:24	154:56	12	int	bits
op	154:32	0:0	12	=
call	154:34	154:55	13	put_bits_count
arg	154:49	154:55	14	&s->pb
op	154:49	0:0	15	&
water	154:50	0:0	15	s
op	154:51	0:0	15	->
water	154:53	0:0	15	pb
water	155:24	0:0	12	s
op	155:25	0:0	12	->
water	155:27	0:0	12	misc_bits
op	155:36	0:0	12	+=
water	155:39	0:0	12	bits
op	155:44	0:0	12	-
water	155:46	0:0	12	s
op	155:47	0:0	12	->
water	155:49	0:0	12	last_bits
water	155:58	0:0	12	;
water	156:24	0:0	12	s
op	156:25	0:0	12	->
water	156:27	0:0	12	last_bits
op	156:36	0:0	12	=
water	156:38	0:0	12	bits
water	156:42	0:0	12	;
water	157:20	0:0	12	}
water	158:20	0:0	10	s
op	158:21	0:0	10	->
water	158:23	0:0	10	ptr_lastgob
op	158:35	0:0	10	+=
water	158:38	0:0	10	current_packet_size
water	158:57	0:0	10	;
water	159:20	0:0	10	s
op	159:21	0:0	10	->
water	159:23	0:0	10	first_slice_line
op	159:39	0:0	10	=
water	159:40	0:0	10	1
water	159:41	0:0	10	;
water	160:20	0:0	10	s
op	160:21	0:0	10	->
water	160:23	0:0	10	resync_mb_x
op	160:34	0:0	10	=
water	160:35	0:0	10	mb_x
water	160:39	0:0	10	;
water	161:20	0:0	10	s
op	161:21	0:0	10	->
water	161:23	0:0	10	resync_mb_y
op	161:34	0:0	10	=
water	161:35	0:0	10	mb_y
water	161:39	0:0	10	;
water	162:16	0:0	10	}
water	163:12	0:0	8	}
if	164:12	167:12	6	(( s -> resync_mb_x == s -> mb_x ) && s -> resync_mb_y + 1 == s -> mb_y)
cond	164:17	165:41	7	( s -> resync_mb_x == s -> mb_x ) && s -> resync_mb_y + 1 == s -> mb_y
water	164:17	0:0	8	(
water	164:18	0:0	8	s
op	164:19	0:0	8	->
water	164:21	0:0	8	resync_mb_x
op	164:35	0:0	8	==
water	164:38	0:0	8	s
op	164:39	0:0	8	->
water	164:41	0:0	8	mb_x
water	164:45	0:0	8	)
op	165:15	0:0	8	&&
water	165:18	0:0	8	s
op	165:19	0:0	8	->
water	165:21	0:0	8	resync_mb_y
op	165:32	0:0	8	+
water	165:33	0:0	8	1
op	165:35	0:0	8	==
water	165:38	0:0	8	s
op	165:39	0:0	8	->
water	165:41	0:0	8	mb_y
stmts	165:46	167:12	7	
water	165:46	0:0	8	{
water	166:16	0:0	8	s
op	166:17	0:0	8	->
water	166:19	0:0	8	first_slice_line
op	166:35	0:0	8	=
water	166:36	0:0	8	0
water	166:37	0:0	8	;
water	167:12	0:0	8	}
water	168:12	0:0	6	s
op	168:13	0:0	6	->
water	168:15	0:0	6	mb_skipped
op	168:25	0:0	6	=
water	168:26	0:0	6	0
water	168:27	0:0	6	;
water	169:12	0:0	6	s
op	169:13	0:0	6	->
water	169:15	0:0	6	dquant
op	169:21	0:0	6	=
water	169:22	0:0	6	0
water	169:23	0:0	6	;
call	170:12	170:31	6	update_mb_info
arg	170:27	170:28	7	s
water	170:27	0:0	8	s
arg	170:30	170:31	7	0
water	170:30	0:0	8	0
water	170:32	0:0	6	;
if	171:12	424:12	6	(mb_type & ( mb_type - 1 ) || ( s -> mpv_flags & FF_MPV_FLAG_QP_RD ))
cond	171:16	171:74	7	mb_type & ( mb_type - 1 ) || ( s -> mpv_flags & FF_MPV_FLAG_QP_RD )
water	171:16	0:0	8	mb_type
op	171:24	0:0	8	&
water	171:26	0:0	8	(
water	171:27	0:0	8	mb_type
op	171:34	0:0	8	-
water	171:35	0:0	8	1
water	171:36	0:0	8	)
op	171:38	0:0	8	||
water	171:41	0:0	8	(
water	171:42	0:0	8	s
op	171:43	0:0	8	->
water	171:45	0:0	8	mpv_flags
op	171:55	0:0	8	&
water	171:57	0:0	8	FF_MPV_FLAG_QP_RD
water	171:74	0:0	8	)
stmts	171:77	424:12	7	
water	171:77	0:0	8	{
decl	172:16	172:32	8	int	next_block
op	172:30	0:0	8	=
water	172:31	0:0	8	0
decl	173:16	173:68	8	int	pb_bits_count
water	173:33	0:0	8	,
decl	173:16	173:68	8	int	pb2_bits_count
water	173:49	0:0	8	,
decl	173:16	173:68	8	int	tex_pb_bits_count
call	174:16	174:59	8	copy_context_before_encode
arg	174:43	174:52	9	&backup_s
op	174:43	0:0	10	&
water	174:44	0:0	10	backup_s
arg	174:54	174:55	9	s
water	174:54	0:0	10	s
arg	174:57	174:59	9	-1
op	174:57	0:0	10	-
water	174:58	0:0	10	1
water	174:60	0:0	8	;
water	175:16	0:0	8	backup_s
op	175:24	0:0	8	.
water	175:25	0:0	8	pb
op	175:27	0:0	8	=
water	175:29	0:0	8	s
op	175:30	0:0	8	->
water	175:32	0:0	8	pb
water	175:34	0:0	8	;
water	176:16	0:0	8	best_s
op	176:22	0:0	8	.
water	176:23	0:0	8	data_partitioning
op	176:40	0:0	8	=
water	176:42	0:0	8	s
op	176:43	0:0	8	->
water	176:45	0:0	8	data_partitioning
water	176:62	0:0	8	;
water	177:16	0:0	8	best_s
op	177:22	0:0	8	.
water	177:23	0:0	8	partitioned_frame
op	177:40	0:0	8	=
water	177:42	0:0	8	s
op	177:43	0:0	8	->
water	177:45	0:0	8	partitioned_frame
water	177:62	0:0	8	;
if	178:16	181:16	8	(s -> data_partitioning)
cond	178:19	178:22	9	s -> data_partitioning
water	178:19	0:0	10	s
op	178:20	0:0	10	->
water	178:22	0:0	10	data_partitioning
stmts	178:40	181:16	9	
water	178:40	0:0	10	{
water	179:20	0:0	10	backup_s
op	179:28	0:0	10	.
water	179:29	0:0	10	pb2
op	179:32	0:0	10	=
water	179:34	0:0	10	s
op	179:35	0:0	10	->
water	179:37	0:0	10	pb2
water	179:40	0:0	10	;
water	180:20	0:0	10	backup_s
op	180:28	0:0	10	.
water	180:29	0:0	10	tex_pb
op	180:35	0:0	10	=
water	180:37	0:0	10	s
op	180:38	0:0	10	->
water	180:40	0:0	10	tex_pb
water	180:46	0:0	10	;
water	181:16	0:0	10	}
if	182:16	190:16	8	(mb_type & CANDIDATE_MB_TYPE_INTER)
cond	182:19	182:27	9	mb_type & CANDIDATE_MB_TYPE_INTER
water	182:19	0:0	10	mb_type
op	182:26	0:0	10	&
water	182:27	0:0	10	CANDIDATE_MB_TYPE_INTER
stmts	182:51	190:16	9	
water	182:51	0:0	10	{
water	183:20	0:0	10	s
op	183:21	0:0	10	->
water	183:23	0:0	10	mv_dir
op	183:30	0:0	10	=
water	183:32	0:0	10	MV_DIR_FORWARD
water	183:46	0:0	10	;
water	184:20	0:0	10	s
op	184:21	0:0	10	->
water	184:23	0:0	10	mv_type
op	184:31	0:0	10	=
water	184:33	0:0	10	MV_TYPE_16X16
water	184:46	0:0	10	;
water	185:20	0:0	10	s
op	185:21	0:0	10	->
water	185:23	0:0	10	mb_intra
op	185:31	0:0	10	=
water	185:33	0:0	10	0
water	185:34	0:0	10	;
water	186:20	0:0	10	s
op	186:21	0:0	10	->
water	186:23	0:0	10	mv
op	186:25	0:0	10	[
water	186:26	0:0	10	0
op	186:27	0:0	10	]
op	186:28	0:0	10	[
water	186:29	0:0	10	0
op	186:30	0:0	10	]
op	186:31	0:0	10	[
water	186:32	0:0	10	0
op	186:33	0:0	10	]
op	186:35	0:0	10	=
water	186:37	0:0	10	s
op	186:38	0:0	10	->
water	186:40	0:0	10	p_mv_table
op	186:50	0:0	10	[
water	186:51	0:0	10	xy
op	186:53	0:0	10	]
op	186:54	0:0	10	[
water	186:55	0:0	10	0
op	186:56	0:0	10	]
water	186:57	0:0	10	;
water	187:20	0:0	10	s
op	187:21	0:0	10	->
water	187:23	0:0	10	mv
op	187:25	0:0	10	[
water	187:26	0:0	10	0
op	187:27	0:0	10	]
op	187:28	0:0	10	[
water	187:29	0:0	10	0
op	187:30	0:0	10	]
op	187:31	0:0	10	[
water	187:32	0:0	10	1
op	187:33	0:0	10	]
op	187:35	0:0	10	=
water	187:37	0:0	10	s
op	187:38	0:0	10	->
water	187:40	0:0	10	p_mv_table
op	187:50	0:0	10	[
water	187:51	0:0	10	xy
op	187:53	0:0	10	]
op	187:54	0:0	10	[
water	187:55	0:0	10	1
op	187:56	0:0	10	]
water	187:57	0:0	10	;
call	188:20	189:83	10	encode_mb_hq
arg	188:33	188:34	11	s
water	188:33	0:0	12	s
arg	188:36	188:45	11	&backup_s
op	188:36	0:0	12	&
water	188:37	0:0	12	backup_s
arg	188:47	188:54	11	&best_s
op	188:47	0:0	12	&
water	188:48	0:0	12	best_s
arg	188:56	188:79	11	CANDIDATE_MB_TYPE_INTER
water	188:56	0:0	12	CANDIDATE_MB_TYPE_INTER
arg	188:81	188:83	11	pb
water	188:81	0:0	12	pb
arg	188:85	188:88	11	pb2
water	188:85	0:0	12	pb2
arg	188:90	188:96	11	tex_pb
water	188:90	0:0	12	tex_pb
arg	189:33	189:38	11	&dmin
op	189:33	0:0	12	&
water	189:34	0:0	12	dmin
arg	189:40	189:51	11	&next_block
op	189:40	0:0	12	&
water	189:41	0:0	12	next_block
arg	189:53	189:67	11	s->mv[0][0][0]
water	189:53	0:0	12	s
op	189:54	0:0	12	->
water	189:56	0:0	12	mv
op	189:58	0:0	12	[
water	189:59	0:0	12	0
op	189:60	0:0	12	]
op	189:61	0:0	12	[
water	189:62	0:0	12	0
op	189:63	0:0	12	]
op	189:64	0:0	12	[
water	189:65	0:0	12	0
op	189:66	0:0	12	]
arg	189:69	189:83	11	s->mv[0][0][1]
water	189:69	0:0	12	s
op	189:70	0:0	12	->
water	189:72	0:0	12	mv
op	189:74	0:0	12	[
water	189:75	0:0	12	0
op	189:76	0:0	12	]
op	189:77	0:0	12	[
water	189:78	0:0	12	0
op	189:79	0:0	12	]
op	189:80	0:0	12	[
water	189:81	0:0	12	1
op	189:82	0:0	12	]
water	189:84	0:0	10	;
water	190:16	0:0	10	}
if	191:16	202:16	8	(mb_type & CANDIDATE_MB_TYPE_INTER_I)
cond	191:19	191:27	9	mb_type & CANDIDATE_MB_TYPE_INTER_I
water	191:19	0:0	10	mb_type
op	191:26	0:0	10	&
water	191:27	0:0	10	CANDIDATE_MB_TYPE_INTER_I
stmts	191:53	202:16	9	
water	191:53	0:0	10	{
water	192:20	0:0	10	s
op	192:21	0:0	10	->
water	192:23	0:0	10	mv_dir
op	192:30	0:0	10	=
water	192:32	0:0	10	MV_DIR_FORWARD
water	192:46	0:0	10	;
water	193:20	0:0	10	s
op	193:21	0:0	10	->
water	193:23	0:0	10	mv_type
op	193:31	0:0	10	=
water	193:33	0:0	10	MV_TYPE_FIELD
water	193:46	0:0	10	;
water	194:20	0:0	10	s
op	194:21	0:0	10	->
water	194:23	0:0	10	mb_intra
op	194:31	0:0	10	=
water	194:33	0:0	10	0
water	194:34	0:0	10	;
for	195:20	199:20	10	(i = 0 ;i < 2;i ++)
forinit	195:24	195:27	11	i = 0 ;
water	195:24	0:0	12	i
op	195:25	0:0	12	=
water	195:26	0:0	12	0
water	195:27	0:0	12	;
cond	195:29	195:31	11	i < 2
water	195:29	0:0	12	i
op	195:30	0:0	12	<
water	195:31	0:0	12	2
forexpr	195:34	195:35	11	i ++
water	195:34	0:0	12	i
op	195:35	0:0	12	++
stmts	195:38	199:20	11	
water	195:38	0:0	12	{
water	196:24	0:0	12	j
op	196:25	0:0	12	=
water	196:27	0:0	12	s
op	196:28	0:0	12	->
water	196:30	0:0	12	field_select
op	196:42	0:0	12	[
water	196:43	0:0	12	0
op	196:44	0:0	12	]
op	196:45	0:0	12	[
water	196:46	0:0	12	i
op	196:47	0:0	12	]
op	196:49	0:0	12	=
water	196:51	0:0	12	s
op	196:52	0:0	12	->
water	196:54	0:0	12	p_field_select_table
op	196:74	0:0	12	[
water	196:75	0:0	12	i
op	196:76	0:0	12	]
op	196:77	0:0	12	[
water	196:78	0:0	12	xy
op	196:80	0:0	12	]
water	196:81	0:0	12	;
water	197:24	0:0	12	s
op	197:25	0:0	12	->
water	197:27	0:0	12	mv
op	197:29	0:0	12	[
water	197:30	0:0	12	0
op	197:31	0:0	12	]
op	197:32	0:0	12	[
water	197:33	0:0	12	i
op	197:34	0:0	12	]
op	197:35	0:0	12	[
water	197:36	0:0	12	0
op	197:37	0:0	12	]
op	197:39	0:0	12	=
water	197:41	0:0	12	s
op	197:42	0:0	12	->
water	197:44	0:0	12	p_field_mv_table
op	197:60	0:0	12	[
water	197:61	0:0	12	i
op	197:62	0:0	12	]
op	197:63	0:0	12	[
water	197:64	0:0	12	j
op	197:65	0:0	12	]
op	197:66	0:0	12	[
water	197:67	0:0	12	xy
op	197:69	0:0	12	]
op	197:70	0:0	12	[
water	197:71	0:0	12	0
op	197:72	0:0	12	]
water	197:73	0:0	12	;
water	198:24	0:0	12	s
op	198:25	0:0	12	->
water	198:27	0:0	12	mv
op	198:29	0:0	12	[
water	198:30	0:0	12	0
op	198:31	0:0	12	]
op	198:32	0:0	12	[
water	198:33	0:0	12	i
op	198:34	0:0	12	]
op	198:35	0:0	12	[
water	198:36	0:0	12	1
op	198:37	0:0	12	]
op	198:39	0:0	12	=
water	198:41	0:0	12	s
op	198:42	0:0	12	->
water	198:44	0:0	12	p_field_mv_table
op	198:60	0:0	12	[
water	198:61	0:0	12	i
op	198:62	0:0	12	]
op	198:63	0:0	12	[
water	198:64	0:0	12	j
op	198:65	0:0	12	]
op	198:66	0:0	12	[
water	198:67	0:0	12	xy
op	198:69	0:0	12	]
op	198:70	0:0	12	[
water	198:71	0:0	12	1
op	198:72	0:0	12	]
water	198:73	0:0	12	;
water	199:20	0:0	12	}
call	200:20	201:57	10	encode_mb_hq
arg	200:33	200:34	11	s
water	200:33	0:0	12	s
arg	200:36	200:45	11	&backup_s
op	200:36	0:0	12	&
water	200:37	0:0	12	backup_s
arg	200:47	200:54	11	&best_s
op	200:47	0:0	12	&
water	200:48	0:0	12	best_s
arg	200:56	200:81	11	CANDIDATE_MB_TYPE_INTER_I
water	200:56	0:0	12	CANDIDATE_MB_TYPE_INTER_I
arg	200:83	200:85	11	pb
water	200:83	0:0	12	pb
arg	200:87	200:90	11	pb2
water	200:87	0:0	12	pb2
arg	200:92	200:98	11	tex_pb
water	200:92	0:0	12	tex_pb
arg	201:33	201:38	11	&dmin
op	201:33	0:0	12	&
water	201:34	0:0	12	dmin
arg	201:40	201:51	11	&next_block
op	201:40	0:0	12	&
water	201:41	0:0	12	next_block
arg	201:53	201:54	11	0
water	201:53	0:0	12	0
arg	201:56	201:57	11	0
water	201:56	0:0	12	0
water	201:58	0:0	10	;
water	202:16	0:0	10	}
if	203:16	211:16	8	(mb_type & CANDIDATE_MB_TYPE_SKIPPED)
cond	203:19	203:27	9	mb_type & CANDIDATE_MB_TYPE_SKIPPED
water	203:19	0:0	10	mb_type
op	203:26	0:0	10	&
water	203:27	0:0	10	CANDIDATE_MB_TYPE_SKIPPED
stmts	203:53	211:16	9	
water	203:53	0:0	10	{
water	204:20	0:0	10	s
op	204:21	0:0	10	->
water	204:23	0:0	10	mv_dir
op	204:30	0:0	10	=
water	204:32	0:0	10	MV_DIR_FORWARD
water	204:46	0:0	10	;
water	205:20	0:0	10	s
op	205:21	0:0	10	->
water	205:23	0:0	10	mv_type
op	205:31	0:0	10	=
water	205:33	0:0	10	MV_TYPE_16X16
water	205:46	0:0	10	;
water	206:20	0:0	10	s
op	206:21	0:0	10	->
water	206:23	0:0	10	mb_intra
op	206:31	0:0	10	=
water	206:33	0:0	10	0
water	206:34	0:0	10	;
water	207:20	0:0	10	s
op	207:21	0:0	10	->
water	207:23	0:0	10	mv
op	207:25	0:0	10	[
water	207:26	0:0	10	0
op	207:27	0:0	10	]
op	207:28	0:0	10	[
water	207:29	0:0	10	0
op	207:30	0:0	10	]
op	207:31	0:0	10	[
water	207:32	0:0	10	0
op	207:33	0:0	10	]
op	207:35	0:0	10	=
water	207:37	0:0	10	0
water	207:38	0:0	10	;
water	208:20	0:0	10	s
op	208:21	0:0	10	->
water	208:23	0:0	10	mv
op	208:25	0:0	10	[
water	208:26	0:0	10	0
op	208:27	0:0	10	]
op	208:28	0:0	10	[
water	208:29	0:0	10	0
op	208:30	0:0	10	]
op	208:31	0:0	10	[
water	208:32	0:0	10	1
op	208:33	0:0	10	]
op	208:35	0:0	10	=
water	208:37	0:0	10	0
water	208:38	0:0	10	;
call	209:20	210:83	10	encode_mb_hq
arg	209:33	209:34	11	s
water	209:33	0:0	12	s
arg	209:36	209:45	11	&backup_s
op	209:36	0:0	12	&
water	209:37	0:0	12	backup_s
arg	209:47	209:54	11	&best_s
op	209:47	0:0	12	&
water	209:48	0:0	12	best_s
arg	209:56	209:81	11	CANDIDATE_MB_TYPE_SKIPPED
water	209:56	0:0	12	CANDIDATE_MB_TYPE_SKIPPED
arg	209:83	209:85	11	pb
water	209:83	0:0	12	pb
arg	209:87	209:90	11	pb2
water	209:87	0:0	12	pb2
arg	209:92	209:98	11	tex_pb
water	209:92	0:0	12	tex_pb
arg	210:33	210:38	11	&dmin
op	210:33	0:0	12	&
water	210:34	0:0	12	dmin
arg	210:40	210:51	11	&next_block
op	210:40	0:0	12	&
water	210:41	0:0	12	next_block
arg	210:53	210:67	11	s->mv[0][0][0]
water	210:53	0:0	12	s
op	210:54	0:0	12	->
water	210:56	0:0	12	mv
op	210:58	0:0	12	[
water	210:59	0:0	12	0
op	210:60	0:0	12	]
op	210:61	0:0	12	[
water	210:62	0:0	12	0
op	210:63	0:0	12	]
op	210:64	0:0	12	[
water	210:65	0:0	12	0
op	210:66	0:0	12	]
arg	210:69	210:83	11	s->mv[0][0][1]
water	210:69	0:0	12	s
op	210:70	0:0	12	->
water	210:72	0:0	12	mv
op	210:74	0:0	12	[
water	210:75	0:0	12	0
op	210:76	0:0	12	]
op	210:77	0:0	12	[
water	210:78	0:0	12	0
op	210:79	0:0	12	]
op	210:80	0:0	12	[
water	210:81	0:0	12	1
op	210:82	0:0	12	]
water	210:84	0:0	10	;
water	211:16	0:0	10	}
if	212:16	222:16	8	(mb_type & CANDIDATE_MB_TYPE_INTER4V)
cond	212:19	212:27	9	mb_type & CANDIDATE_MB_TYPE_INTER4V
water	212:19	0:0	10	mb_type
op	212:26	0:0	10	&
water	212:27	0:0	10	CANDIDATE_MB_TYPE_INTER4V
stmts	212:53	222:16	9	
water	212:53	0:0	10	{
water	213:20	0:0	10	s
op	213:21	0:0	10	->
water	213:23	0:0	10	mv_dir
op	213:30	0:0	10	=
water	213:32	0:0	10	MV_DIR_FORWARD
water	213:46	0:0	10	;
water	214:20	0:0	10	s
op	214:21	0:0	10	->
water	214:23	0:0	10	mv_type
op	214:31	0:0	10	=
water	214:33	0:0	10	MV_TYPE_8X8
water	214:44	0:0	10	;
water	215:20	0:0	10	s
op	215:21	0:0	10	->
water	215:23	0:0	10	mb_intra
op	215:31	0:0	10	=
water	215:33	0:0	10	0
water	215:34	0:0	10	;
for	216:20	219:20	10	(i = 0 ;i < 4;i ++)
forinit	216:24	216:27	11	i = 0 ;
water	216:24	0:0	12	i
op	216:25	0:0	12	=
water	216:26	0:0	12	0
water	216:27	0:0	12	;
cond	216:29	216:31	11	i < 4
water	216:29	0:0	12	i
op	216:30	0:0	12	<
water	216:31	0:0	12	4
forexpr	216:34	216:35	11	i ++
water	216:34	0:0	12	i
op	216:35	0:0	12	++
stmts	216:38	219:20	11	
water	216:38	0:0	12	{
water	217:24	0:0	12	s
op	217:25	0:0	12	->
water	217:27	0:0	12	mv
op	217:29	0:0	12	[
water	217:30	0:0	12	0
op	217:31	0:0	12	]
op	217:32	0:0	12	[
water	217:33	0:0	12	i
op	217:34	0:0	12	]
op	217:35	0:0	12	[
water	217:36	0:0	12	0
op	217:37	0:0	12	]
op	217:39	0:0	12	=
water	217:41	0:0	12	s
op	217:42	0:0	12	->
water	217:44	0:0	12	current_picture
op	217:59	0:0	12	.
water	217:60	0:0	12	motion_val
op	217:70	0:0	12	[
water	217:71	0:0	12	0
op	217:72	0:0	12	]
op	217:73	0:0	12	[
water	217:74	0:0	12	s
op	217:75	0:0	12	->
water	217:77	0:0	12	block_index
op	217:88	0:0	12	[
water	217:89	0:0	12	i
op	217:90	0:0	12	]
op	217:91	0:0	12	]
op	217:92	0:0	12	[
water	217:93	0:0	12	0
op	217:94	0:0	12	]
water	217:95	0:0	12	;
water	218:24	0:0	12	s
op	218:25	0:0	12	->
water	218:27	0:0	12	mv
op	218:29	0:0	12	[
water	218:30	0:0	12	0
op	218:31	0:0	12	]
op	218:32	0:0	12	[
water	218:33	0:0	12	i
op	218:34	0:0	12	]
op	218:35	0:0	12	[
water	218:36	0:0	12	1
op	218:37	0:0	12	]
op	218:39	0:0	12	=
water	218:41	0:0	12	s
op	218:42	0:0	12	->
water	218:44	0:0	12	current_picture
op	218:59	0:0	12	.
water	218:60	0:0	12	motion_val
op	218:70	0:0	12	[
water	218:71	0:0	12	0
op	218:72	0:0	12	]
op	218:73	0:0	12	[
water	218:74	0:0	12	s
op	218:75	0:0	12	->
water	218:77	0:0	12	block_index
op	218:88	0:0	12	[
water	218:89	0:0	12	i
op	218:90	0:0	12	]
op	218:91	0:0	12	]
op	218:92	0:0	12	[
water	218:93	0:0	12	1
op	218:94	0:0	12	]
water	218:95	0:0	12	;
water	219:20	0:0	12	}
call	220:20	221:57	10	encode_mb_hq
arg	220:33	220:34	11	s
water	220:33	0:0	12	s
arg	220:36	220:45	11	&backup_s
op	220:36	0:0	12	&
water	220:37	0:0	12	backup_s
arg	220:47	220:54	11	&best_s
op	220:47	0:0	12	&
water	220:48	0:0	12	best_s
arg	220:56	220:81	11	CANDIDATE_MB_TYPE_INTER4V
water	220:56	0:0	12	CANDIDATE_MB_TYPE_INTER4V
arg	220:83	220:85	11	pb
water	220:83	0:0	12	pb
arg	220:87	220:90	11	pb2
water	220:87	0:0	12	pb2
arg	220:92	220:98	11	tex_pb
water	220:92	0:0	12	tex_pb
arg	221:33	221:38	11	&dmin
op	221:33	0:0	12	&
water	221:34	0:0	12	dmin
arg	221:40	221:51	11	&next_block
op	221:40	0:0	12	&
water	221:41	0:0	12	next_block
arg	221:53	221:54	11	0
water	221:53	0:0	12	0
arg	221:56	221:57	11	0
water	221:56	0:0	12	0
water	221:58	0:0	10	;
water	222:16	0:0	10	}
if	223:16	231:16	8	(mb_type & CANDIDATE_MB_TYPE_FORWARD)
cond	223:19	223:27	9	mb_type & CANDIDATE_MB_TYPE_FORWARD
water	223:19	0:0	10	mb_type
op	223:26	0:0	10	&
water	223:27	0:0	10	CANDIDATE_MB_TYPE_FORWARD
stmts	223:53	231:16	9	
water	223:53	0:0	10	{
water	224:20	0:0	10	s
op	224:21	0:0	10	->
water	224:23	0:0	10	mv_dir
op	224:30	0:0	10	=
water	224:32	0:0	10	MV_DIR_FORWARD
water	224:46	0:0	10	;
water	225:20	0:0	10	s
op	225:21	0:0	10	->
water	225:23	0:0	10	mv_type
op	225:31	0:0	10	=
water	225:33	0:0	10	MV_TYPE_16X16
water	225:46	0:0	10	;
water	226:20	0:0	10	s
op	226:21	0:0	10	->
water	226:23	0:0	10	mb_intra
op	226:31	0:0	10	=
water	226:33	0:0	10	0
water	226:34	0:0	10	;
water	227:20	0:0	10	s
op	227:21	0:0	10	->
water	227:23	0:0	10	mv
op	227:25	0:0	10	[
water	227:26	0:0	10	0
op	227:27	0:0	10	]
op	227:28	0:0	10	[
water	227:29	0:0	10	0
op	227:30	0:0	10	]
op	227:31	0:0	10	[
water	227:32	0:0	10	0
op	227:33	0:0	10	]
op	227:35	0:0	10	=
water	227:37	0:0	10	s
op	227:38	0:0	10	->
water	227:40	0:0	10	b_forw_mv_table
op	227:55	0:0	10	[
water	227:56	0:0	10	xy
op	227:58	0:0	10	]
op	227:59	0:0	10	[
water	227:60	0:0	10	0
op	227:61	0:0	10	]
water	227:62	0:0	10	;
water	228:20	0:0	10	s
op	228:21	0:0	10	->
water	228:23	0:0	10	mv
op	228:25	0:0	10	[
water	228:26	0:0	10	0
op	228:27	0:0	10	]
op	228:28	0:0	10	[
water	228:29	0:0	10	0
op	228:30	0:0	10	]
op	228:31	0:0	10	[
water	228:32	0:0	10	1
op	228:33	0:0	10	]
op	228:35	0:0	10	=
water	228:37	0:0	10	s
op	228:38	0:0	10	->
water	228:40	0:0	10	b_forw_mv_table
op	228:55	0:0	10	[
water	228:56	0:0	10	xy
op	228:58	0:0	10	]
op	228:59	0:0	10	[
water	228:60	0:0	10	1
op	228:61	0:0	10	]
water	228:62	0:0	10	;
call	229:20	230:83	10	encode_mb_hq
arg	229:33	229:34	11	s
water	229:33	0:0	12	s
arg	229:36	229:45	11	&backup_s
op	229:36	0:0	12	&
water	229:37	0:0	12	backup_s
arg	229:47	229:54	11	&best_s
op	229:47	0:0	12	&
water	229:48	0:0	12	best_s
arg	229:56	229:81	11	CANDIDATE_MB_TYPE_FORWARD
water	229:56	0:0	12	CANDIDATE_MB_TYPE_FORWARD
arg	229:83	229:85	11	pb
water	229:83	0:0	12	pb
arg	229:87	229:90	11	pb2
water	229:87	0:0	12	pb2
arg	229:92	229:98	11	tex_pb
water	229:92	0:0	12	tex_pb
arg	230:33	230:38	11	&dmin
op	230:33	0:0	12	&
water	230:34	0:0	12	dmin
arg	230:40	230:51	11	&next_block
op	230:40	0:0	12	&
water	230:41	0:0	12	next_block
arg	230:53	230:67	11	s->mv[0][0][0]
water	230:53	0:0	12	s
op	230:54	0:0	12	->
water	230:56	0:0	12	mv
op	230:58	0:0	12	[
water	230:59	0:0	12	0
op	230:60	0:0	12	]
op	230:61	0:0	12	[
water	230:62	0:0	12	0
op	230:63	0:0	12	]
op	230:64	0:0	12	[
water	230:65	0:0	12	0
op	230:66	0:0	12	]
arg	230:69	230:83	11	s->mv[0][0][1]
water	230:69	0:0	12	s
op	230:70	0:0	12	->
water	230:72	0:0	12	mv
op	230:74	0:0	12	[
water	230:75	0:0	12	0
op	230:76	0:0	12	]
op	230:77	0:0	12	[
water	230:78	0:0	12	0
op	230:79	0:0	12	]
op	230:80	0:0	12	[
water	230:81	0:0	12	1
op	230:82	0:0	12	]
water	230:84	0:0	10	;
water	231:16	0:0	10	}
if	232:16	240:16	8	(mb_type & CANDIDATE_MB_TYPE_BACKWARD)
cond	232:19	232:27	9	mb_type & CANDIDATE_MB_TYPE_BACKWARD
water	232:19	0:0	10	mb_type
op	232:26	0:0	10	&
water	232:27	0:0	10	CANDIDATE_MB_TYPE_BACKWARD
stmts	232:54	240:16	9	
water	232:54	0:0	10	{
water	233:20	0:0	10	s
op	233:21	0:0	10	->
water	233:23	0:0	10	mv_dir
op	233:30	0:0	10	=
water	233:32	0:0	10	MV_DIR_BACKWARD
water	233:47	0:0	10	;
water	234:20	0:0	10	s
op	234:21	0:0	10	->
water	234:23	0:0	10	mv_type
op	234:31	0:0	10	=
water	234:33	0:0	10	MV_TYPE_16X16
water	234:46	0:0	10	;
water	235:20	0:0	10	s
op	235:21	0:0	10	->
water	235:23	0:0	10	mb_intra
op	235:31	0:0	10	=
water	235:33	0:0	10	0
water	235:34	0:0	10	;
water	236:20	0:0	10	s
op	236:21	0:0	10	->
water	236:23	0:0	10	mv
op	236:25	0:0	10	[
water	236:26	0:0	10	1
op	236:27	0:0	10	]
op	236:28	0:0	10	[
water	236:29	0:0	10	0
op	236:30	0:0	10	]
op	236:31	0:0	10	[
water	236:32	0:0	10	0
op	236:33	0:0	10	]
op	236:35	0:0	10	=
water	236:37	0:0	10	s
op	236:38	0:0	10	->
water	236:40	0:0	10	b_back_mv_table
op	236:55	0:0	10	[
water	236:56	0:0	10	xy
op	236:58	0:0	10	]
op	236:59	0:0	10	[
water	236:60	0:0	10	0
op	236:61	0:0	10	]
water	236:62	0:0	10	;
water	237:20	0:0	10	s
op	237:21	0:0	10	->
water	237:23	0:0	10	mv
op	237:25	0:0	10	[
water	237:26	0:0	10	1
op	237:27	0:0	10	]
op	237:28	0:0	10	[
water	237:29	0:0	10	0
op	237:30	0:0	10	]
op	237:31	0:0	10	[
water	237:32	0:0	10	1
op	237:33	0:0	10	]
op	237:35	0:0	10	=
water	237:37	0:0	10	s
op	237:38	0:0	10	->
water	237:40	0:0	10	b_back_mv_table
op	237:55	0:0	10	[
water	237:56	0:0	10	xy
op	237:58	0:0	10	]
op	237:59	0:0	10	[
water	237:60	0:0	10	1
op	237:61	0:0	10	]
water	237:62	0:0	10	;
call	238:20	239:83	10	encode_mb_hq
arg	238:33	238:34	11	s
water	238:33	0:0	12	s
arg	238:36	238:45	11	&backup_s
op	238:36	0:0	12	&
water	238:37	0:0	12	backup_s
arg	238:47	238:54	11	&best_s
op	238:47	0:0	12	&
water	238:48	0:0	12	best_s
arg	238:56	238:82	11	CANDIDATE_MB_TYPE_BACKWARD
water	238:56	0:0	12	CANDIDATE_MB_TYPE_BACKWARD
arg	238:84	238:86	11	pb
water	238:84	0:0	12	pb
arg	238:88	238:91	11	pb2
water	238:88	0:0	12	pb2
arg	238:93	238:99	11	tex_pb
water	238:93	0:0	12	tex_pb
arg	239:33	239:38	11	&dmin
op	239:33	0:0	12	&
water	239:34	0:0	12	dmin
arg	239:40	239:51	11	&next_block
op	239:40	0:0	12	&
water	239:41	0:0	12	next_block
arg	239:53	239:67	11	s->mv[1][0][0]
water	239:53	0:0	12	s
op	239:54	0:0	12	->
water	239:56	0:0	12	mv
op	239:58	0:0	12	[
water	239:59	0:0	12	1
op	239:60	0:0	12	]
op	239:61	0:0	12	[
water	239:62	0:0	12	0
op	239:63	0:0	12	]
op	239:64	0:0	12	[
water	239:65	0:0	12	0
op	239:66	0:0	12	]
arg	239:69	239:83	11	s->mv[1][0][1]
water	239:69	0:0	12	s
op	239:70	0:0	12	->
water	239:72	0:0	12	mv
op	239:74	0:0	12	[
water	239:75	0:0	12	1
op	239:76	0:0	12	]
op	239:77	0:0	12	[
water	239:78	0:0	12	0
op	239:79	0:0	12	]
op	239:80	0:0	12	[
water	239:81	0:0	12	1
op	239:82	0:0	12	]
water	239:84	0:0	10	;
water	240:16	0:0	10	}
if	241:16	251:16	8	(mb_type & CANDIDATE_MB_TYPE_BIDIR)
cond	241:19	241:27	9	mb_type & CANDIDATE_MB_TYPE_BIDIR
water	241:19	0:0	10	mb_type
op	241:26	0:0	10	&
water	241:27	0:0	10	CANDIDATE_MB_TYPE_BIDIR
stmts	241:51	251:16	9	
water	241:51	0:0	10	{
water	242:20	0:0	10	s
op	242:21	0:0	10	->
water	242:23	0:0	10	mv_dir
op	242:30	0:0	10	=
water	242:32	0:0	10	MV_DIR_FORWARD
op	242:47	0:0	10	|
water	242:49	0:0	10	MV_DIR_BACKWARD
water	242:64	0:0	10	;
water	243:20	0:0	10	s
op	243:21	0:0	10	->
water	243:23	0:0	10	mv_type
op	243:31	0:0	10	=
water	243:33	0:0	10	MV_TYPE_16X16
water	243:46	0:0	10	;
water	244:20	0:0	10	s
op	244:21	0:0	10	->
water	244:23	0:0	10	mb_intra
op	244:31	0:0	10	=
water	244:33	0:0	10	0
water	244:34	0:0	10	;
water	245:20	0:0	10	s
op	245:21	0:0	10	->
water	245:23	0:0	10	mv
op	245:25	0:0	10	[
water	245:26	0:0	10	0
op	245:27	0:0	10	]
op	245:28	0:0	10	[
water	245:29	0:0	10	0
op	245:30	0:0	10	]
op	245:31	0:0	10	[
water	245:32	0:0	10	0
op	245:33	0:0	10	]
op	245:35	0:0	10	=
water	245:37	0:0	10	s
op	245:38	0:0	10	->
water	245:40	0:0	10	b_bidir_forw_mv_table
op	245:61	0:0	10	[
water	245:62	0:0	10	xy
op	245:64	0:0	10	]
op	245:65	0:0	10	[
water	245:66	0:0	10	0
op	245:67	0:0	10	]
water	245:68	0:0	10	;
water	246:20	0:0	10	s
op	246:21	0:0	10	->
water	246:23	0:0	10	mv
op	246:25	0:0	10	[
water	246:26	0:0	10	0
op	246:27	0:0	10	]
op	246:28	0:0	10	[
water	246:29	0:0	10	0
op	246:30	0:0	10	]
op	246:31	0:0	10	[
water	246:32	0:0	10	1
op	246:33	0:0	10	]
op	246:35	0:0	10	=
water	246:37	0:0	10	s
op	246:38	0:0	10	->
water	246:40	0:0	10	b_bidir_forw_mv_table
op	246:61	0:0	10	[
water	246:62	0:0	10	xy
op	246:64	0:0	10	]
op	246:65	0:0	10	[
water	246:66	0:0	10	1
op	246:67	0:0	10	]
water	246:68	0:0	10	;
water	247:20	0:0	10	s
op	247:21	0:0	10	->
water	247:23	0:0	10	mv
op	247:25	0:0	10	[
water	247:26	0:0	10	1
op	247:27	0:0	10	]
op	247:28	0:0	10	[
water	247:29	0:0	10	0
op	247:30	0:0	10	]
op	247:31	0:0	10	[
water	247:32	0:0	10	0
op	247:33	0:0	10	]
op	247:35	0:0	10	=
water	247:37	0:0	10	s
op	247:38	0:0	10	->
water	247:40	0:0	10	b_bidir_back_mv_table
op	247:61	0:0	10	[
water	247:62	0:0	10	xy
op	247:64	0:0	10	]
op	247:65	0:0	10	[
water	247:66	0:0	10	0
op	247:67	0:0	10	]
water	247:68	0:0	10	;
water	248:20	0:0	10	s
op	248:21	0:0	10	->
water	248:23	0:0	10	mv
op	248:25	0:0	10	[
water	248:26	0:0	10	1
op	248:27	0:0	10	]
op	248:28	0:0	10	[
water	248:29	0:0	10	0
op	248:30	0:0	10	]
op	248:31	0:0	10	[
water	248:32	0:0	10	1
op	248:33	0:0	10	]
op	248:35	0:0	10	=
water	248:37	0:0	10	s
op	248:38	0:0	10	->
water	248:40	0:0	10	b_bidir_back_mv_table
op	248:61	0:0	10	[
water	248:62	0:0	10	xy
op	248:64	0:0	10	]
op	248:65	0:0	10	[
water	248:66	0:0	10	1
op	248:67	0:0	10	]
water	248:68	0:0	10	;
call	249:20	250:57	10	encode_mb_hq
arg	249:33	249:34	11	s
water	249:33	0:0	12	s
arg	249:36	249:45	11	&backup_s
op	249:36	0:0	12	&
water	249:37	0:0	12	backup_s
arg	249:47	249:54	11	&best_s
op	249:47	0:0	12	&
water	249:48	0:0	12	best_s
arg	249:56	249:79	11	CANDIDATE_MB_TYPE_BIDIR
water	249:56	0:0	12	CANDIDATE_MB_TYPE_BIDIR
arg	249:81	249:83	11	pb
water	249:81	0:0	12	pb
arg	249:85	249:88	11	pb2
water	249:85	0:0	12	pb2
arg	249:90	249:96	11	tex_pb
water	249:90	0:0	12	tex_pb
arg	250:33	250:38	11	&dmin
op	250:33	0:0	12	&
water	250:34	0:0	12	dmin
arg	250:40	250:51	11	&next_block
op	250:40	0:0	12	&
water	250:41	0:0	12	next_block
arg	250:53	250:54	11	0
water	250:53	0:0	12	0
arg	250:56	250:57	11	0
water	250:56	0:0	12	0
water	250:58	0:0	10	;
water	251:16	0:0	10	}
if	252:16	263:16	8	(mb_type & CANDIDATE_MB_TYPE_FORWARD_I)
cond	252:19	252:27	9	mb_type & CANDIDATE_MB_TYPE_FORWARD_I
water	252:19	0:0	10	mb_type
op	252:26	0:0	10	&
water	252:27	0:0	10	CANDIDATE_MB_TYPE_FORWARD_I
stmts	252:55	263:16	9	
water	252:55	0:0	10	{
water	253:20	0:0	10	s
op	253:21	0:0	10	->
water	253:23	0:0	10	mv_dir
op	253:30	0:0	10	=
water	253:32	0:0	10	MV_DIR_FORWARD
water	253:46	0:0	10	;
water	254:20	0:0	10	s
op	254:21	0:0	10	->
water	254:23	0:0	10	mv_type
op	254:31	0:0	10	=
water	254:33	0:0	10	MV_TYPE_FIELD
water	254:46	0:0	10	;
water	255:20	0:0	10	s
op	255:21	0:0	10	->
water	255:23	0:0	10	mb_intra
op	255:31	0:0	10	=
water	255:33	0:0	10	0
water	255:34	0:0	10	;
for	256:20	260:20	10	(i = 0 ;i < 2;i ++)
forinit	256:24	256:27	11	i = 0 ;
water	256:24	0:0	12	i
op	256:25	0:0	12	=
water	256:26	0:0	12	0
water	256:27	0:0	12	;
cond	256:29	256:31	11	i < 2
water	256:29	0:0	12	i
op	256:30	0:0	12	<
water	256:31	0:0	12	2
forexpr	256:34	256:35	11	i ++
water	256:34	0:0	12	i
op	256:35	0:0	12	++
stmts	256:38	260:20	11	
water	256:38	0:0	12	{
water	257:24	0:0	12	j
op	257:25	0:0	12	=
water	257:27	0:0	12	s
op	257:28	0:0	12	->
water	257:30	0:0	12	field_select
op	257:42	0:0	12	[
water	257:43	0:0	12	0
op	257:44	0:0	12	]
op	257:45	0:0	12	[
water	257:46	0:0	12	i
op	257:47	0:0	12	]
op	257:49	0:0	12	=
water	257:51	0:0	12	s
op	257:52	0:0	12	->
water	257:54	0:0	12	b_field_select_table
op	257:74	0:0	12	[
water	257:75	0:0	12	0
op	257:76	0:0	12	]
op	257:77	0:0	12	[
water	257:78	0:0	12	i
op	257:79	0:0	12	]
op	257:80	0:0	12	[
water	257:81	0:0	12	xy
op	257:83	0:0	12	]
water	257:84	0:0	12	;
water	258:24	0:0	12	s
op	258:25	0:0	12	->
water	258:27	0:0	12	mv
op	258:29	0:0	12	[
water	258:30	0:0	12	0
op	258:31	0:0	12	]
op	258:32	0:0	12	[
water	258:33	0:0	12	i
op	258:34	0:0	12	]
op	258:35	0:0	12	[
water	258:36	0:0	12	0
op	258:37	0:0	12	]
op	258:39	0:0	12	=
water	258:41	0:0	12	s
op	258:42	0:0	12	->
water	258:44	0:0	12	b_field_mv_table
op	258:60	0:0	12	[
water	258:61	0:0	12	0
op	258:62	0:0	12	]
op	258:63	0:0	12	[
water	258:64	0:0	12	i
op	258:65	0:0	12	]
op	258:66	0:0	12	[
water	258:67	0:0	12	j
op	258:68	0:0	12	]
op	258:69	0:0	12	[
water	258:70	0:0	12	xy
op	258:72	0:0	12	]
op	258:73	0:0	12	[
water	258:74	0:0	12	0
op	258:75	0:0	12	]
water	258:76	0:0	12	;
water	259:24	0:0	12	s
op	259:25	0:0	12	->
water	259:27	0:0	12	mv
op	259:29	0:0	12	[
water	259:30	0:0	12	0
op	259:31	0:0	12	]
op	259:32	0:0	12	[
water	259:33	0:0	12	i
op	259:34	0:0	12	]
op	259:35	0:0	12	[
water	259:36	0:0	12	1
op	259:37	0:0	12	]
op	259:39	0:0	12	=
water	259:41	0:0	12	s
op	259:42	0:0	12	->
water	259:44	0:0	12	b_field_mv_table
op	259:60	0:0	12	[
water	259:61	0:0	12	0
op	259:62	0:0	12	]
op	259:63	0:0	12	[
water	259:64	0:0	12	i
op	259:65	0:0	12	]
op	259:66	0:0	12	[
water	259:67	0:0	12	j
op	259:68	0:0	12	]
op	259:69	0:0	12	[
water	259:70	0:0	12	xy
op	259:72	0:0	12	]
op	259:73	0:0	12	[
water	259:74	0:0	12	1
op	259:75	0:0	12	]
water	259:76	0:0	12	;
water	260:20	0:0	12	}
call	261:20	262:57	10	encode_mb_hq
arg	261:33	261:34	11	s
water	261:33	0:0	12	s
arg	261:36	261:45	11	&backup_s
op	261:36	0:0	12	&
water	261:37	0:0	12	backup_s
arg	261:47	261:54	11	&best_s
op	261:47	0:0	12	&
water	261:48	0:0	12	best_s
arg	261:56	261:83	11	CANDIDATE_MB_TYPE_FORWARD_I
water	261:56	0:0	12	CANDIDATE_MB_TYPE_FORWARD_I
arg	261:85	261:87	11	pb
water	261:85	0:0	12	pb
arg	261:89	261:92	11	pb2
water	261:89	0:0	12	pb2
arg	261:94	261:100	11	tex_pb
water	261:94	0:0	12	tex_pb
arg	262:33	262:38	11	&dmin
op	262:33	0:0	12	&
water	262:34	0:0	12	dmin
arg	262:40	262:51	11	&next_block
op	262:40	0:0	12	&
water	262:41	0:0	12	next_block
arg	262:53	262:54	11	0
water	262:53	0:0	12	0
arg	262:56	262:57	11	0
water	262:56	0:0	12	0
water	262:58	0:0	10	;
water	263:16	0:0	10	}
if	264:16	275:16	8	(mb_type & CANDIDATE_MB_TYPE_BACKWARD_I)
cond	264:19	264:27	9	mb_type & CANDIDATE_MB_TYPE_BACKWARD_I
water	264:19	0:0	10	mb_type
op	264:26	0:0	10	&
water	264:27	0:0	10	CANDIDATE_MB_TYPE_BACKWARD_I
stmts	264:56	275:16	9	
water	264:56	0:0	10	{
water	265:20	0:0	10	s
op	265:21	0:0	10	->
water	265:23	0:0	10	mv_dir
op	265:30	0:0	10	=
water	265:32	0:0	10	MV_DIR_BACKWARD
water	265:47	0:0	10	;
water	266:20	0:0	10	s
op	266:21	0:0	10	->
water	266:23	0:0	10	mv_type
op	266:31	0:0	10	=
water	266:33	0:0	10	MV_TYPE_FIELD
water	266:46	0:0	10	;
water	267:20	0:0	10	s
op	267:21	0:0	10	->
water	267:23	0:0	10	mb_intra
op	267:31	0:0	10	=
water	267:33	0:0	10	0
water	267:34	0:0	10	;
for	268:20	272:20	10	(i = 0 ;i < 2;i ++)
forinit	268:24	268:27	11	i = 0 ;
water	268:24	0:0	12	i
op	268:25	0:0	12	=
water	268:26	0:0	12	0
water	268:27	0:0	12	;
cond	268:29	268:31	11	i < 2
water	268:29	0:0	12	i
op	268:30	0:0	12	<
water	268:31	0:0	12	2
forexpr	268:34	268:35	11	i ++
water	268:34	0:0	12	i
op	268:35	0:0	12	++
stmts	268:38	272:20	11	
water	268:38	0:0	12	{
water	269:24	0:0	12	j
op	269:25	0:0	12	=
water	269:27	0:0	12	s
op	269:28	0:0	12	->
water	269:30	0:0	12	field_select
op	269:42	0:0	12	[
water	269:43	0:0	12	1
op	269:44	0:0	12	]
op	269:45	0:0	12	[
water	269:46	0:0	12	i
op	269:47	0:0	12	]
op	269:49	0:0	12	=
water	269:51	0:0	12	s
op	269:52	0:0	12	->
water	269:54	0:0	12	b_field_select_table
op	269:74	0:0	12	[
water	269:75	0:0	12	1
op	269:76	0:0	12	]
op	269:77	0:0	12	[
water	269:78	0:0	12	i
op	269:79	0:0	12	]
op	269:80	0:0	12	[
water	269:81	0:0	12	xy
op	269:83	0:0	12	]
water	269:84	0:0	12	;
water	270:24	0:0	12	s
op	270:25	0:0	12	->
water	270:27	0:0	12	mv
op	270:29	0:0	12	[
water	270:30	0:0	12	1
op	270:31	0:0	12	]
op	270:32	0:0	12	[
water	270:33	0:0	12	i
op	270:34	0:0	12	]
op	270:35	0:0	12	[
water	270:36	0:0	12	0
op	270:37	0:0	12	]
op	270:39	0:0	12	=
water	270:41	0:0	12	s
op	270:42	0:0	12	->
water	270:44	0:0	12	b_field_mv_table
op	270:60	0:0	12	[
water	270:61	0:0	12	1
op	270:62	0:0	12	]
op	270:63	0:0	12	[
water	270:64	0:0	12	i
op	270:65	0:0	12	]
op	270:66	0:0	12	[
water	270:67	0:0	12	j
op	270:68	0:0	12	]
op	270:69	0:0	12	[
water	270:70	0:0	12	xy
op	270:72	0:0	12	]
op	270:73	0:0	12	[
water	270:74	0:0	12	0
op	270:75	0:0	12	]
water	270:76	0:0	12	;
water	271:24	0:0	12	s
op	271:25	0:0	12	->
water	271:27	0:0	12	mv
op	271:29	0:0	12	[
water	271:30	0:0	12	1
op	271:31	0:0	12	]
op	271:32	0:0	12	[
water	271:33	0:0	12	i
op	271:34	0:0	12	]
op	271:35	0:0	12	[
water	271:36	0:0	12	1
op	271:37	0:0	12	]
op	271:39	0:0	12	=
water	271:41	0:0	12	s
op	271:42	0:0	12	->
water	271:44	0:0	12	b_field_mv_table
op	271:60	0:0	12	[
water	271:61	0:0	12	1
op	271:62	0:0	12	]
op	271:63	0:0	12	[
water	271:64	0:0	12	i
op	271:65	0:0	12	]
op	271:66	0:0	12	[
water	271:67	0:0	12	j
op	271:68	0:0	12	]
op	271:69	0:0	12	[
water	271:70	0:0	12	xy
op	271:72	0:0	12	]
op	271:73	0:0	12	[
water	271:74	0:0	12	1
op	271:75	0:0	12	]
water	271:76	0:0	12	;
water	272:20	0:0	12	}
call	273:20	274:57	10	encode_mb_hq
arg	273:33	273:34	11	s
water	273:33	0:0	12	s
arg	273:36	273:45	11	&backup_s
op	273:36	0:0	12	&
water	273:37	0:0	12	backup_s
arg	273:47	273:54	11	&best_s
op	273:47	0:0	12	&
water	273:48	0:0	12	best_s
arg	273:56	273:84	11	CANDIDATE_MB_TYPE_BACKWARD_I
water	273:56	0:0	12	CANDIDATE_MB_TYPE_BACKWARD_I
arg	273:86	273:88	11	pb
water	273:86	0:0	12	pb
arg	273:90	273:93	11	pb2
water	273:90	0:0	12	pb2
arg	273:95	273:101	11	tex_pb
water	273:95	0:0	12	tex_pb
arg	274:33	274:38	11	&dmin
op	274:33	0:0	12	&
water	274:34	0:0	12	dmin
arg	274:40	274:51	11	&next_block
op	274:40	0:0	12	&
water	274:41	0:0	12	next_block
arg	274:53	274:54	11	0
water	274:53	0:0	12	0
arg	274:56	274:57	11	0
water	274:56	0:0	12	0
water	274:58	0:0	10	;
water	275:16	0:0	10	}
if	276:16	289:16	8	(mb_type & CANDIDATE_MB_TYPE_BIDIR_I)
cond	276:19	276:27	9	mb_type & CANDIDATE_MB_TYPE_BIDIR_I
water	276:19	0:0	10	mb_type
op	276:26	0:0	10	&
water	276:27	0:0	10	CANDIDATE_MB_TYPE_BIDIR_I
stmts	276:53	289:16	9	
water	276:53	0:0	10	{
water	277:20	0:0	10	s
op	277:21	0:0	10	->
water	277:23	0:0	10	mv_dir
op	277:30	0:0	10	=
water	277:32	0:0	10	MV_DIR_FORWARD
op	277:47	0:0	10	|
water	277:49	0:0	10	MV_DIR_BACKWARD
water	277:64	0:0	10	;
water	278:20	0:0	10	s
op	278:21	0:0	10	->
water	278:23	0:0	10	mv_type
op	278:31	0:0	10	=
water	278:33	0:0	10	MV_TYPE_FIELD
water	278:46	0:0	10	;
water	279:20	0:0	10	s
op	279:21	0:0	10	->
water	279:23	0:0	10	mb_intra
op	279:31	0:0	10	=
water	279:33	0:0	10	0
water	279:34	0:0	10	;
for	280:20	286:20	10	(dir = 0 ;dir < 2;dir ++)
forinit	280:24	280:29	11	dir = 0 ;
water	280:24	0:0	12	dir
op	280:27	0:0	12	=
water	280:28	0:0	12	0
water	280:29	0:0	12	;
cond	280:31	280:35	11	dir < 2
water	280:31	0:0	12	dir
op	280:34	0:0	12	<
water	280:35	0:0	12	2
forexpr	280:38	280:41	11	dir ++
water	280:38	0:0	12	dir
op	280:41	0:0	12	++
stmts	280:44	286:20	11	
water	280:44	0:0	12	{
for	281:24	285:24	12	(i = 0 ;i < 2;i ++)
forinit	281:28	281:31	13	i = 0 ;
water	281:28	0:0	14	i
op	281:29	0:0	14	=
water	281:30	0:0	14	0
water	281:31	0:0	14	;
cond	281:33	281:35	13	i < 2
water	281:33	0:0	14	i
op	281:34	0:0	14	<
water	281:35	0:0	14	2
forexpr	281:38	281:39	13	i ++
water	281:38	0:0	14	i
op	281:39	0:0	14	++
stmts	281:42	285:24	13	
water	281:42	0:0	14	{
water	282:28	0:0	14	j
op	282:29	0:0	14	=
water	282:31	0:0	14	s
op	282:32	0:0	14	->
water	282:34	0:0	14	field_select
op	282:46	0:0	14	[
water	282:47	0:0	14	dir
op	282:50	0:0	14	]
op	282:51	0:0	14	[
water	282:52	0:0	14	i
op	282:53	0:0	14	]
op	282:55	0:0	14	=
water	282:57	0:0	14	s
op	282:58	0:0	14	->
water	282:60	0:0	14	b_field_select_table
op	282:80	0:0	14	[
water	282:81	0:0	14	dir
op	282:84	0:0	14	]
op	282:85	0:0	14	[
water	282:86	0:0	14	i
op	282:87	0:0	14	]
op	282:88	0:0	14	[
water	282:89	0:0	14	xy
op	282:91	0:0	14	]
water	282:92	0:0	14	;
water	283:28	0:0	14	s
op	283:29	0:0	14	->
water	283:31	0:0	14	mv
op	283:33	0:0	14	[
water	283:34	0:0	14	dir
op	283:37	0:0	14	]
op	283:38	0:0	14	[
water	283:39	0:0	14	i
op	283:40	0:0	14	]
op	283:41	0:0	14	[
water	283:42	0:0	14	0
op	283:43	0:0	14	]
op	283:45	0:0	14	=
water	283:47	0:0	14	s
op	283:48	0:0	14	->
water	283:50	0:0	14	b_field_mv_table
op	283:66	0:0	14	[
water	283:67	0:0	14	dir
op	283:70	0:0	14	]
op	283:71	0:0	14	[
water	283:72	0:0	14	i
op	283:73	0:0	14	]
op	283:74	0:0	14	[
water	283:75	0:0	14	j
op	283:76	0:0	14	]
op	283:77	0:0	14	[
water	283:78	0:0	14	xy
op	283:80	0:0	14	]
op	283:81	0:0	14	[
water	283:82	0:0	14	0
op	283:83	0:0	14	]
water	283:84	0:0	14	;
water	284:28	0:0	14	s
op	284:29	0:0	14	->
water	284:31	0:0	14	mv
op	284:33	0:0	14	[
water	284:34	0:0	14	dir
op	284:37	0:0	14	]
op	284:38	0:0	14	[
water	284:39	0:0	14	i
op	284:40	0:0	14	]
op	284:41	0:0	14	[
water	284:42	0:0	14	1
op	284:43	0:0	14	]
op	284:45	0:0	14	=
water	284:47	0:0	14	s
op	284:48	0:0	14	->
water	284:50	0:0	14	b_field_mv_table
op	284:66	0:0	14	[
water	284:67	0:0	14	dir
op	284:70	0:0	14	]
op	284:71	0:0	14	[
water	284:72	0:0	14	i
op	284:73	0:0	14	]
op	284:74	0:0	14	[
water	284:75	0:0	14	j
op	284:76	0:0	14	]
op	284:77	0:0	14	[
water	284:78	0:0	14	xy
op	284:80	0:0	14	]
op	284:81	0:0	14	[
water	284:82	0:0	14	1
op	284:83	0:0	14	]
water	284:84	0:0	14	;
water	285:24	0:0	14	}
water	286:20	0:0	12	}
call	287:20	288:57	10	encode_mb_hq
arg	287:33	287:34	11	s
water	287:33	0:0	12	s
arg	287:36	287:45	11	&backup_s
op	287:36	0:0	12	&
water	287:37	0:0	12	backup_s
arg	287:47	287:54	11	&best_s
op	287:47	0:0	12	&
water	287:48	0:0	12	best_s
arg	287:56	287:81	11	CANDIDATE_MB_TYPE_BIDIR_I
water	287:56	0:0	12	CANDIDATE_MB_TYPE_BIDIR_I
arg	287:83	287:85	11	pb
water	287:83	0:0	12	pb
arg	287:87	287:90	11	pb2
water	287:87	0:0	12	pb2
arg	287:92	287:98	11	tex_pb
water	287:92	0:0	12	tex_pb
arg	288:33	288:38	11	&dmin
op	288:33	0:0	12	&
water	288:34	0:0	12	dmin
arg	288:40	288:51	11	&next_block
op	288:40	0:0	12	&
water	288:41	0:0	12	next_block
arg	288:53	288:54	11	0
water	288:53	0:0	12	0
arg	288:56	288:57	11	0
water	288:56	0:0	12	0
water	288:58	0:0	10	;
water	289:16	0:0	10	}
if	290:16	304:16	8	(mb_type & CANDIDATE_MB_TYPE_INTRA)
cond	290:19	290:27	9	mb_type & CANDIDATE_MB_TYPE_INTRA
water	290:19	0:0	10	mb_type
op	290:26	0:0	10	&
water	290:27	0:0	10	CANDIDATE_MB_TYPE_INTRA
stmts	290:51	304:16	9	
water	290:51	0:0	10	{
water	291:20	0:0	10	s
op	291:21	0:0	10	->
water	291:23	0:0	10	mv_dir
op	291:30	0:0	10	=
water	291:32	0:0	10	0
water	291:33	0:0	10	;
water	292:20	0:0	10	s
op	292:21	0:0	10	->
water	292:23	0:0	10	mv_type
op	292:31	0:0	10	=
water	292:33	0:0	10	MV_TYPE_16X16
water	292:46	0:0	10	;
water	293:20	0:0	10	s
op	293:21	0:0	10	->
water	293:23	0:0	10	mb_intra
op	293:31	0:0	10	=
water	293:33	0:0	10	1
water	293:34	0:0	10	;
water	294:20	0:0	10	s
op	294:21	0:0	10	->
water	294:23	0:0	10	mv
op	294:25	0:0	10	[
water	294:26	0:0	10	0
op	294:27	0:0	10	]
op	294:28	0:0	10	[
water	294:29	0:0	10	0
op	294:30	0:0	10	]
op	294:31	0:0	10	[
water	294:32	0:0	10	0
op	294:33	0:0	10	]
op	294:35	0:0	10	=
water	294:37	0:0	10	0
water	294:38	0:0	10	;
water	295:20	0:0	10	s
op	295:21	0:0	10	->
water	295:23	0:0	10	mv
op	295:25	0:0	10	[
water	295:26	0:0	10	0
op	295:27	0:0	10	]
op	295:28	0:0	10	[
water	295:29	0:0	10	0
op	295:30	0:0	10	]
op	295:31	0:0	10	[
water	295:32	0:0	10	1
op	295:33	0:0	10	]
op	295:35	0:0	10	=
water	295:37	0:0	10	0
water	295:38	0:0	10	;
call	296:20	297:57	10	encode_mb_hq
arg	296:33	296:34	11	s
water	296:33	0:0	12	s
arg	296:36	296:45	11	&backup_s
op	296:36	0:0	12	&
water	296:37	0:0	12	backup_s
arg	296:47	296:54	11	&best_s
op	296:47	0:0	12	&
water	296:48	0:0	12	best_s
arg	296:56	296:79	11	CANDIDATE_MB_TYPE_INTRA
water	296:56	0:0	12	CANDIDATE_MB_TYPE_INTRA
arg	296:81	296:83	11	pb
water	296:81	0:0	12	pb
arg	296:85	296:88	11	pb2
water	296:85	0:0	12	pb2
arg	296:90	296:96	11	tex_pb
water	296:90	0:0	12	tex_pb
arg	297:33	297:38	11	&dmin
op	297:33	0:0	12	&
water	297:34	0:0	12	dmin
arg	297:40	297:51	11	&next_block
op	297:40	0:0	12	&
water	297:41	0:0	12	next_block
arg	297:53	297:54	11	0
water	297:53	0:0	12	0
arg	297:56	297:57	11	0
water	297:56	0:0	12	0
water	297:58	0:0	10	;
if	298:20	303:20	10	(s -> h263_pred || s -> h263_aic)
cond	298:23	298:42	11	s -> h263_pred || s -> h263_aic
water	298:23	0:0	12	s
op	298:24	0:0	12	->
water	298:26	0:0	12	h263_pred
op	298:36	0:0	12	||
water	298:39	0:0	12	s
op	298:40	0:0	12	->
water	298:42	0:0	12	h263_aic
stmts	298:51	303:20	11	
water	298:51	0:0	12	{
if	299:24	300:72	12	(best_s . mb_intra)
cond	299:27	299:34	13	best_s . mb_intra
water	299:27	0:0	14	best_s
op	299:33	0:0	14	.
water	299:34	0:0	14	mb_intra
stmts	300:28	300:72	13	
water	300:28	0:0	14	s
op	300:29	0:0	14	->
water	300:31	0:0	14	mbintra_table
op	300:44	0:0	14	[
water	300:45	0:0	14	mb_x
op	300:50	0:0	14	+
water	300:52	0:0	14	mb_y
op	300:56	0:0	14	*
water	300:57	0:0	14	s
op	300:58	0:0	14	->
water	300:60	0:0	14	mb_stride
op	300:69	0:0	14	]
op	300:70	0:0	14	=
water	300:71	0:0	14	1
water	300:72	0:0	14	;
else	301:24	302:59	12
stmts	302:28	302:59	13	
call	302:28	302:58	14	ff_clean_intra_table_entries
arg	302:57	302:58	15	s
water	302:57	0:0	16	s
water	302:59	0:0	14	;
water	303:20	0:0	12	}
water	304:16	0:0	10	}
if	305:16	347:16	8	(( s -> mpv_flags & FF_MPV_FLAG_QP_RD ) && dmin < INT_MAX)
cond	305:20	305:65	9	( s -> mpv_flags & FF_MPV_FLAG_QP_RD ) && dmin < INT_MAX
water	305:20	0:0	10	(
water	305:21	0:0	10	s
op	305:22	0:0	10	->
water	305:24	0:0	10	mpv_flags
op	305:34	0:0	10	&
water	305:36	0:0	10	FF_MPV_FLAG_QP_RD
water	305:53	0:0	10	)
op	305:55	0:0	10	&&
water	305:58	0:0	10	dmin
op	305:63	0:0	10	<
water	305:65	0:0	10	INT_MAX
stmts	305:74	347:16	9	
water	305:74	0:0	10	{
if	306:20	346:20	10	(best_s . mv_type == MV_TYPE_16X16)
cond	306:23	306:39	11	best_s . mv_type == MV_TYPE_16X16
water	306:23	0:0	12	best_s
op	306:29	0:0	12	.
water	306:30	0:0	12	mv_type
op	306:37	0:0	12	==
water	306:39	0:0	12	MV_TYPE_16X16
stmts	306:53	346:20	11	
water	306:53	0:0	12	{
decl	307:24	307:58	12	const int	last_qp
op	307:41	0:0	12	=
water	307:43	0:0	12	backup_s
op	307:51	0:0	12	.
water	307:52	0:0	12	qscale
decl	308:24	308:42	12	int	qpi
water	308:31	0:0	12	,
decl	308:24	308:42	12	int	qp
water	308:35	0:0	12	,
decl	308:24	308:42	12	int	dc[6]
water	309:24	0:0	12	int16_t
water	309:32	0:0	12	ac
op	309:34	0:0	12	[
water	309:35	0:0	12	6
op	309:36	0:0	12	]
op	309:37	0:0	12	[
water	309:38	0:0	12	16
op	309:40	0:0	12	]
water	309:41	0:0	12	;
decl	310:24	310:80	12	const int	mvdir
op	310:39	0:0	12	=
water	310:41	0:0	12	(
water	310:42	0:0	12	best_s
op	310:48	0:0	12	.
water	310:49	0:0	12	mv_dir
op	310:55	0:0	12	&
water	310:56	0:0	12	MV_DIR_BACKWARD
water	310:71	0:0	12	)
water	310:73	0:0	12	?
water	310:75	0:0	12	1
water	310:77	0:0	12	:
water	310:79	0:0	12	0
water	311:24	0:0	12	static
water	311:31	0:0	12	const
water	311:37	0:0	12	int
water	311:41	0:0	12	dquant_tab
op	311:51	0:0	12	[
water	311:52	0:0	12	4
op	311:53	0:0	12	]
op	311:54	0:0	12	=
water	311:55	0:0	12	{
op	311:56	0:0	12	-
water	311:57	0:0	12	1
water	311:58	0:0	12	,
water	311:59	0:0	12	1
water	311:60	0:0	12	,
op	311:61	0:0	12	-
water	311:62	0:0	12	2
water	311:63	0:0	12	,
water	311:64	0:0	12	2
water	311:65	0:0	12	}
water	311:66	0:0	12	;
decl	312:24	312:68	12	int	storecoefs
op	312:39	0:0	12	=
water	312:41	0:0	12	s
op	312:42	0:0	12	->
water	312:44	0:0	12	mb_intra
op	312:53	0:0	12	&&
water	312:56	0:0	12	s
op	312:57	0:0	12	->
water	312:59	0:0	12	dc_val
op	312:65	0:0	12	[
water	312:66	0:0	12	0
op	312:67	0:0	12	]
call	313:24	313:55	12	av_assert2
arg	313:35	313:55	13	backup_s.dquant==0
water	313:35	0:0	14	backup_s
op	313:43	0:0	14	.
water	313:44	0:0	14	dquant
op	313:51	0:0	14	==
water	313:54	0:0	14	0
water	313:56	0:0	12	;
water	315:24	0:0	12	s
op	315:25	0:0	12	->
water	315:27	0:0	12	mv_dir
op	315:33	0:0	12	=
water	315:35	0:0	12	best_s
op	315:41	0:0	12	.
water	315:42	0:0	12	mv_dir
water	315:48	0:0	12	;
water	316:24	0:0	12	s
op	316:25	0:0	12	->
water	316:27	0:0	12	mv_type
op	316:35	0:0	12	=
water	316:37	0:0	12	MV_TYPE_16X16
water	316:50	0:0	12	;
water	317:24	0:0	12	s
op	317:25	0:0	12	->
water	317:27	0:0	12	mb_intra
op	317:35	0:0	12	=
water	317:37	0:0	12	best_s
op	317:43	0:0	12	.
water	317:44	0:0	12	mb_intra
water	317:52	0:0	12	;
water	318:24	0:0	12	s
op	318:25	0:0	12	->
water	318:27	0:0	12	mv
op	318:29	0:0	12	[
water	318:30	0:0	12	0
op	318:31	0:0	12	]
op	318:32	0:0	12	[
water	318:33	0:0	12	0
op	318:34	0:0	12	]
op	318:35	0:0	12	[
water	318:36	0:0	12	0
op	318:37	0:0	12	]
op	318:39	0:0	12	=
water	318:41	0:0	12	best_s
op	318:47	0:0	12	.
water	318:48	0:0	12	mv
op	318:50	0:0	12	[
water	318:51	0:0	12	0
op	318:52	0:0	12	]
op	318:53	0:0	12	[
water	318:54	0:0	12	0
op	318:55	0:0	12	]
op	318:56	0:0	12	[
water	318:57	0:0	12	0
op	318:58	0:0	12	]
water	318:59	0:0	12	;
water	319:24	0:0	12	s
op	319:25	0:0	12	->
water	319:27	0:0	12	mv
op	319:29	0:0	12	[
water	319:30	0:0	12	0
op	319:31	0:0	12	]
op	319:32	0:0	12	[
water	319:33	0:0	12	0
op	319:34	0:0	12	]
op	319:35	0:0	12	[
water	319:36	0:0	12	1
op	319:37	0:0	12	]
op	319:39	0:0	12	=
water	319:41	0:0	12	best_s
op	319:47	0:0	12	.
water	319:48	0:0	12	mv
op	319:50	0:0	12	[
water	319:51	0:0	12	0
op	319:52	0:0	12	]
op	319:53	0:0	12	[
water	319:54	0:0	12	0
op	319:55	0:0	12	]
op	319:56	0:0	12	[
water	319:57	0:0	12	1
op	319:58	0:0	12	]
water	319:59	0:0	12	;
water	320:24	0:0	12	s
op	320:25	0:0	12	->
water	320:27	0:0	12	mv
op	320:29	0:0	12	[
water	320:30	0:0	12	1
op	320:31	0:0	12	]
op	320:32	0:0	12	[
water	320:33	0:0	12	0
op	320:34	0:0	12	]
op	320:35	0:0	12	[
water	320:36	0:0	12	0
op	320:37	0:0	12	]
op	320:39	0:0	12	=
water	320:41	0:0	12	best_s
op	320:47	0:0	12	.
water	320:48	0:0	12	mv
op	320:50	0:0	12	[
water	320:51	0:0	12	1
op	320:52	0:0	12	]
op	320:53	0:0	12	[
water	320:54	0:0	12	0
op	320:55	0:0	12	]
op	320:56	0:0	12	[
water	320:57	0:0	12	0
op	320:58	0:0	12	]
water	320:59	0:0	12	;
water	321:24	0:0	12	s
op	321:25	0:0	12	->
water	321:27	0:0	12	mv
op	321:29	0:0	12	[
water	321:30	0:0	12	1
op	321:31	0:0	12	]
op	321:32	0:0	12	[
water	321:33	0:0	12	0
op	321:34	0:0	12	]
op	321:35	0:0	12	[
water	321:36	0:0	12	1
op	321:37	0:0	12	]
op	321:39	0:0	12	=
water	321:41	0:0	12	best_s
op	321:47	0:0	12	.
water	321:48	0:0	12	mv
op	321:50	0:0	12	[
water	321:51	0:0	12	1
op	321:52	0:0	12	]
op	321:53	0:0	12	[
water	321:54	0:0	12	0
op	321:55	0:0	12	]
op	321:56	0:0	12	[
water	321:57	0:0	12	1
op	321:58	0:0	12	]
water	321:59	0:0	12	;
water	322:24	0:0	12	qpi
op	322:28	0:0	12	=
water	322:30	0:0	12	s
op	322:31	0:0	12	->
water	322:33	0:0	12	pict_type
op	322:43	0:0	12	==
water	322:46	0:0	12	AV_PICTURE_TYPE_B
water	322:64	0:0	12	?
water	322:66	0:0	12	2
water	322:68	0:0	12	:
water	322:70	0:0	12	0
water	322:71	0:0	12	;
for	323:24	345:24	12	(;qpi < 4;qpi ++)
forinit	323:28	323:28	13	;
water	323:28	0:0	14	;
cond	323:30	323:34	13	qpi < 4
water	323:30	0:0	14	qpi
op	323:33	0:0	14	<
water	323:34	0:0	14	4
forexpr	323:37	323:40	13	qpi ++
water	323:37	0:0	14	qpi
op	323:40	0:0	14	++
stmts	323:43	345:24	13	
water	323:43	0:0	14	{
decl	324:28	324:55	14	int	dquant
op	324:38	0:0	14	=
water	324:40	0:0	14	dquant_tab
op	324:50	0:0	14	[
water	324:51	0:0	14	qpi
op	324:54	0:0	14	]
water	325:28	0:0	14	qp
op	325:30	0:0	14	=
water	325:32	0:0	14	last_qp
op	325:40	0:0	14	+
water	325:42	0:0	14	dquant
water	325:48	0:0	14	;
if	326:28	327:40	14	(qp < s -> avctx -> qmin || qp > s -> avctx -> qmax)
cond	326:31	326:69	15	qp < s -> avctx -> qmin || qp > s -> avctx -> qmax
water	326:31	0:0	16	qp
op	326:34	0:0	16	<
water	326:36	0:0	16	s
op	326:37	0:0	16	->
water	326:39	0:0	16	avctx
op	326:44	0:0	16	->
water	326:46	0:0	16	qmin
op	326:51	0:0	16	||
water	326:54	0:0	16	qp
op	326:57	0:0	16	>
water	326:59	0:0	16	s
op	326:60	0:0	16	->
water	326:62	0:0	16	avctx
op	326:67	0:0	16	->
water	326:69	0:0	16	qmax
stmts	327:32	327:40	15	
continue	327:32	327:40	16	
water	328:28	0:0	14	backup_s
op	328:36	0:0	14	.
water	328:37	0:0	14	dquant
op	328:43	0:0	14	=
water	328:45	0:0	14	dquant
water	328:51	0:0	14	;
if	329:28	334:28	14	(storecoefs)
cond	329:31	329:31	15	storecoefs
water	329:31	0:0	16	storecoefs
stmts	329:42	334:28	15	
water	329:42	0:0	16	{
for	330:32	333:32	16	(i = 0 ;i < 6;i ++)
forinit	330:36	330:39	17	i = 0 ;
water	330:36	0:0	18	i
op	330:37	0:0	18	=
water	330:38	0:0	18	0
water	330:39	0:0	18	;
cond	330:41	330:43	17	i < 6
water	330:41	0:0	18	i
op	330:42	0:0	18	<
water	330:43	0:0	18	6
forexpr	330:46	330:47	17	i ++
water	330:46	0:0	18	i
op	330:47	0:0	18	++
stmts	330:50	333:32	17	
water	330:50	0:0	18	{
water	331:36	0:0	18	dc
op	331:38	0:0	18	[
water	331:39	0:0	18	i
op	331:40	0:0	18	]
op	331:41	0:0	18	=
water	331:43	0:0	18	s
op	331:44	0:0	18	->
water	331:46	0:0	18	dc_val
op	331:52	0:0	18	[
water	331:53	0:0	18	0
op	331:54	0:0	18	]
op	331:55	0:0	18	[
water	331:57	0:0	18	s
op	331:58	0:0	18	->
water	331:60	0:0	18	block_index
op	331:71	0:0	18	[
water	331:72	0:0	18	i
op	331:73	0:0	18	]
op	331:75	0:0	18	]
water	331:76	0:0	18	;
call	332:36	332:101	18	memcpy
arg	332:43	332:48	19	ac[i]
water	332:43	0:0	20	ac
op	332:45	0:0	20	[
water	332:46	0:0	20	i
op	332:47	0:0	20	]
arg	332:50	332:81	19	s->ac_val[0][s->block_index[i]]
water	332:50	0:0	20	s
op	332:51	0:0	20	->
water	332:53	0:0	20	ac_val
op	332:59	0:0	20	[
water	332:60	0:0	20	0
op	332:61	0:0	20	]
op	332:62	0:0	20	[
water	332:63	0:0	20	s
op	332:64	0:0	20	->
water	332:66	0:0	20	block_index
op	332:77	0:0	20	[
water	332:78	0:0	20	i
op	332:79	0:0	20	]
op	332:80	0:0	20	]
arg	332:83	332:101	19	sizeof(int16_t)*16
op	332:83	0:0	20	sizeof
water	332:89	0:0	20	(
water	332:90	0:0	20	int16_t
water	332:97	0:0	20	)
op	332:98	0:0	20	*
water	332:99	0:0	20	16
water	332:102	0:0	18	;
water	333:32	0:0	18	}
water	334:28	0:0	16	}
call	335:28	336:99	14	encode_mb_hq
arg	335:41	335:42	15	s
water	335:41	0:0	16	s
arg	335:44	335:53	15	&backup_s
op	335:44	0:0	16	&
water	335:45	0:0	16	backup_s
arg	335:55	335:62	15	&best_s
op	335:55	0:0	16	&
water	335:56	0:0	16	best_s
arg	335:64	335:88	15	CANDIDATE_MB_TYPE_INTER
water	335:64	0:0	16	CANDIDATE_MB_TYPE_INTER
arg	335:90	335:92	15	pb
water	335:90	0:0	16	pb
arg	335:94	335:97	15	pb2
water	335:94	0:0	16	pb2
arg	335:99	335:105	15	tex_pb
water	335:99	0:0	16	tex_pb
arg	336:41	336:46	15	&dmin
op	336:41	0:0	16	&
water	336:42	0:0	16	dmin
arg	336:48	336:59	15	&next_block
op	336:48	0:0	16	&
water	336:49	0:0	16	next_block
arg	336:61	336:79	15	s->mv[mvdir][0][0]
water	336:61	0:0	16	s
op	336:62	0:0	16	->
water	336:64	0:0	16	mv
op	336:66	0:0	16	[
water	336:67	0:0	16	mvdir
op	336:72	0:0	16	]
op	336:73	0:0	16	[
water	336:74	0:0	16	0
op	336:75	0:0	16	]
op	336:76	0:0	16	[
water	336:77	0:0	16	0
op	336:78	0:0	16	]
arg	336:81	336:99	15	s->mv[mvdir][0][1]
water	336:81	0:0	16	s
op	336:82	0:0	16	->
water	336:84	0:0	16	mv
op	336:86	0:0	16	[
water	336:87	0:0	16	mvdir
op	336:92	0:0	16	]
op	336:93	0:0	16	[
water	336:94	0:0	16	0
op	336:95	0:0	16	]
op	336:96	0:0	16	[
water	336:97	0:0	16	1
op	336:98	0:0	16	]
water	336:100	0:0	14	;
if	337:28	344:28	14	(best_s . qscale != qp)
cond	337:31	337:48	15	best_s . qscale != qp
water	337:31	0:0	16	best_s
op	337:37	0:0	16	.
water	337:38	0:0	16	qscale
op	337:45	0:0	16	!=
water	337:48	0:0	16	qp
stmts	337:51	344:28	15	
water	337:51	0:0	16	{
if	338:32	343:32	16	(storecoefs)
cond	338:35	338:35	17	storecoefs
water	338:35	0:0	18	storecoefs
stmts	338:46	343:32	17	
water	338:46	0:0	18	{
for	339:36	342:36	18	(i = 0 ;i < 6;i ++)
forinit	339:40	339:43	19	i = 0 ;
water	339:40	0:0	20	i
op	339:41	0:0	20	=
water	339:42	0:0	20	0
water	339:43	0:0	20	;
cond	339:45	339:47	19	i < 6
water	339:45	0:0	20	i
op	339:46	0:0	20	<
water	339:47	0:0	20	6
forexpr	339:50	339:51	19	i ++
water	339:50	0:0	20	i
op	339:51	0:0	20	++
stmts	339:54	342:36	19	
water	339:54	0:0	20	{
water	340:40	0:0	20	s
op	340:41	0:0	20	->
water	340:43	0:0	20	dc_val
op	340:49	0:0	20	[
water	340:50	0:0	20	0
op	340:51	0:0	20	]
op	340:52	0:0	20	[
water	340:54	0:0	20	s
op	340:55	0:0	20	->
water	340:57	0:0	20	block_index
op	340:68	0:0	20	[
water	340:69	0:0	20	i
op	340:70	0:0	20	]
op	340:72	0:0	20	]
op	340:73	0:0	20	=
water	340:75	0:0	20	dc
op	340:77	0:0	20	[
water	340:78	0:0	20	i
op	340:79	0:0	20	]
water	340:80	0:0	20	;
call	341:40	341:105	20	memcpy
arg	341:47	341:78	21	s->ac_val[0][s->block_index[i]]
water	341:47	0:0	22	s
op	341:48	0:0	22	->
water	341:50	0:0	22	ac_val
op	341:56	0:0	22	[
water	341:57	0:0	22	0
op	341:58	0:0	22	]
op	341:59	0:0	22	[
water	341:60	0:0	22	s
op	341:61	0:0	22	->
water	341:63	0:0	22	block_index
op	341:74	0:0	22	[
water	341:75	0:0	22	i
op	341:76	0:0	22	]
op	341:77	0:0	22	]
arg	341:80	341:85	21	ac[i]
water	341:80	0:0	22	ac
op	341:82	0:0	22	[
water	341:83	0:0	22	i
op	341:84	0:0	22	]
arg	341:87	341:105	21	sizeof(int16_t)*16
op	341:87	0:0	22	sizeof
water	341:93	0:0	22	(
water	341:94	0:0	22	int16_t
water	341:101	0:0	22	)
op	341:102	0:0	22	*
water	341:103	0:0	22	16
water	341:106	0:0	20	;
water	342:36	0:0	20	}
water	343:32	0:0	18	}
water	344:28	0:0	16	}
water	345:24	0:0	14	}
water	346:20	0:0	12	}
water	347:16	0:0	10	}
if	348:16	357:16	8	(CONFIG_MPEG4_ENCODER && mb_type & CANDIDATE_MB_TYPE_DIRECT)
cond	348:19	348:51	9	CONFIG_MPEG4_ENCODER && mb_type & CANDIDATE_MB_TYPE_DIRECT
water	348:19	0:0	10	CONFIG_MPEG4_ENCODER
op	348:40	0:0	10	&&
water	348:43	0:0	10	mb_type
op	348:50	0:0	10	&
water	348:51	0:0	10	CANDIDATE_MB_TYPE_DIRECT
stmts	348:76	357:16	9	
water	348:76	0:0	10	{
decl	349:20	349:55	10	int	mx
op	349:26	0:0	10	=
water	349:28	0:0	10	s
op	349:29	0:0	10	->
water	349:31	0:0	10	b_direct_mv_table
op	349:48	0:0	10	[
water	349:49	0:0	10	xy
op	349:51	0:0	10	]
op	349:52	0:0	10	[
water	349:53	0:0	10	0
op	349:54	0:0	10	]
decl	350:20	350:55	10	int	my
op	350:26	0:0	10	=
water	350:28	0:0	10	s
op	350:29	0:0	10	->
water	350:31	0:0	10	b_direct_mv_table
op	350:48	0:0	10	[
water	350:49	0:0	10	xy
op	350:51	0:0	10	]
op	350:52	0:0	10	[
water	350:53	0:0	10	1
op	350:54	0:0	10	]
water	351:20	0:0	10	backup_s
op	351:28	0:0	10	.
water	351:29	0:0	10	dquant
op	351:36	0:0	10	=
water	351:38	0:0	10	0
water	351:39	0:0	10	;
water	352:20	0:0	10	s
op	352:21	0:0	10	->
water	352:23	0:0	10	mv_dir
op	352:30	0:0	10	=
water	352:32	0:0	10	MV_DIR_FORWARD
op	352:47	0:0	10	|
water	352:49	0:0	10	MV_DIR_BACKWARD
op	352:65	0:0	10	|
water	352:67	0:0	10	MV_DIRECT
water	352:76	0:0	10	;
water	353:20	0:0	10	s
op	353:21	0:0	10	->
water	353:23	0:0	10	mb_intra
op	353:31	0:0	10	=
water	353:33	0:0	10	0
water	353:34	0:0	10	;
call	354:20	354:52	10	ff_mpeg4_set_direct_mv
arg	354:43	354:44	11	s
water	354:43	0:0	12	s
arg	354:46	354:48	11	mx
water	354:46	0:0	12	mx
arg	354:50	354:52	11	my
water	354:50	0:0	12	my
water	354:53	0:0	10	;
call	355:20	356:59	10	encode_mb_hq
arg	355:33	355:34	11	s
water	355:33	0:0	12	s
arg	355:36	355:45	11	&backup_s
op	355:36	0:0	12	&
water	355:37	0:0	12	backup_s
arg	355:47	355:54	11	&best_s
op	355:47	0:0	12	&
water	355:48	0:0	12	best_s
arg	355:56	355:80	11	CANDIDATE_MB_TYPE_DIRECT
water	355:56	0:0	12	CANDIDATE_MB_TYPE_DIRECT
arg	355:82	355:84	11	pb
water	355:82	0:0	12	pb
arg	355:86	355:89	11	pb2
water	355:86	0:0	12	pb2
arg	355:91	355:97	11	tex_pb
water	355:91	0:0	12	tex_pb
arg	356:33	356:38	11	&dmin
op	356:33	0:0	12	&
water	356:34	0:0	12	dmin
arg	356:40	356:51	11	&next_block
op	356:40	0:0	12	&
water	356:41	0:0	12	next_block
arg	356:53	356:55	11	mx
water	356:53	0:0	12	mx
arg	356:57	356:59	11	my
water	356:57	0:0	12	my
water	356:60	0:0	10	;
water	357:16	0:0	10	}
if	358:16	365:16	8	(CONFIG_MPEG4_ENCODER && mb_type & CANDIDATE_MB_TYPE_DIRECT0)
cond	358:19	358:51	9	CONFIG_MPEG4_ENCODER && mb_type & CANDIDATE_MB_TYPE_DIRECT0
water	358:19	0:0	10	CONFIG_MPEG4_ENCODER
op	358:40	0:0	10	&&
water	358:43	0:0	10	mb_type
op	358:50	0:0	10	&
water	358:51	0:0	10	CANDIDATE_MB_TYPE_DIRECT0
stmts	358:77	365:16	9	
water	358:77	0:0	10	{
water	359:20	0:0	10	backup_s
op	359:28	0:0	10	.
water	359:29	0:0	10	dquant
op	359:36	0:0	10	=
water	359:38	0:0	10	0
water	359:39	0:0	10	;
water	360:20	0:0	10	s
op	360:21	0:0	10	->
water	360:23	0:0	10	mv_dir
op	360:30	0:0	10	=
water	360:32	0:0	10	MV_DIR_FORWARD
op	360:47	0:0	10	|
water	360:49	0:0	10	MV_DIR_BACKWARD
op	360:65	0:0	10	|
water	360:67	0:0	10	MV_DIRECT
water	360:76	0:0	10	;
water	361:20	0:0	10	s
op	361:21	0:0	10	->
water	361:23	0:0	10	mb_intra
op	361:31	0:0	10	=
water	361:33	0:0	10	0
water	361:34	0:0	10	;
call	362:20	362:50	10	ff_mpeg4_set_direct_mv
arg	362:43	362:44	11	s
water	362:43	0:0	12	s
arg	362:46	362:47	11	0
water	362:46	0:0	12	0
arg	362:49	362:50	11	0
water	362:49	0:0	12	0
water	362:51	0:0	10	;
call	363:20	364:57	10	encode_mb_hq
arg	363:33	363:34	11	s
water	363:33	0:0	12	s
arg	363:36	363:45	11	&backup_s
op	363:36	0:0	12	&
water	363:37	0:0	12	backup_s
arg	363:47	363:54	11	&best_s
op	363:47	0:0	12	&
water	363:48	0:0	12	best_s
arg	363:56	363:80	11	CANDIDATE_MB_TYPE_DIRECT
water	363:56	0:0	12	CANDIDATE_MB_TYPE_DIRECT
arg	363:82	363:84	11	pb
water	363:82	0:0	12	pb
arg	363:86	363:89	11	pb2
water	363:86	0:0	12	pb2
arg	363:91	363:97	11	tex_pb
water	363:91	0:0	12	tex_pb
arg	364:33	364:38	11	&dmin
op	364:33	0:0	12	&
water	364:34	0:0	12	dmin
arg	364:40	364:51	11	&next_block
op	364:40	0:0	12	&
water	364:41	0:0	12	next_block
arg	364:53	364:54	11	0
water	364:53	0:0	12	0
arg	364:56	364:57	11	0
water	364:56	0:0	12	0
water	364:58	0:0	10	;
water	365:16	0:0	10	}
if	366:16	396:16	8	(! best_s . mb_intra && s -> mpv_flags & FF_MPV_FLAG_SKIP_RD)
cond	366:20	366:55	9	! best_s . mb_intra && s -> mpv_flags & FF_MPV_FLAG_SKIP_RD
op	366:20	0:0	10	!
water	366:21	0:0	10	best_s
op	366:27	0:0	10	.
water	366:28	0:0	10	mb_intra
op	366:37	0:0	10	&&
water	366:40	0:0	10	s
op	366:41	0:0	10	->
water	366:43	0:0	10	mpv_flags
op	366:53	0:0	10	&
water	366:55	0:0	10	FF_MPV_FLAG_SKIP_RD
stmts	366:76	396:16	9	
water	366:76	0:0	10	{
decl	367:20	367:31	10	int	coded
op	367:29	0:0	10	=
water	367:30	0:0	10	0
for	368:20	369:55	10	(i = 0 ;i < 6;i ++)
forinit	368:24	368:27	11	i = 0 ;
water	368:24	0:0	12	i
op	368:25	0:0	12	=
water	368:26	0:0	12	0
water	368:27	0:0	12	;
cond	368:29	368:31	11	i < 6
water	368:29	0:0	12	i
op	368:30	0:0	12	<
water	368:31	0:0	12	6
forexpr	368:34	368:35	11	i ++
water	368:34	0:0	12	i
op	368:35	0:0	12	++
stmts	369:24	369:55	11	
water	369:24	0:0	12	coded
op	369:30	0:0	12	|=
water	369:33	0:0	12	s
op	369:34	0:0	12	->
water	369:36	0:0	12	block_last_index
op	369:52	0:0	12	[
water	369:53	0:0	12	i
op	369:54	0:0	12	]
water	369:55	0:0	12	;
if	370:20	395:20	10	(coded)
cond	370:23	370:23	11	coded
water	370:23	0:0	12	coded
stmts	370:29	395:20	11	
water	370:29	0:0	12	{
decl	371:24	371:33	12	int	mx
water	371:30	0:0	12	,
decl	371:24	371:33	12	int	my
call	372:24	372:62	12	memcpy
arg	372:31	372:36	13	s->mv
water	372:31	0:0	14	s
op	372:32	0:0	14	->
water	372:34	0:0	14	mv
arg	372:38	372:47	13	best_s.mv
water	372:38	0:0	14	best_s
op	372:44	0:0	14	.
water	372:45	0:0	14	mv
arg	372:49	372:62	13	sizeof(s->mv)
op	372:49	0:0	14	sizeof
water	372:55	0:0	14	(
water	372:56	0:0	14	s
op	372:57	0:0	14	->
water	372:59	0:0	14	mv
water	372:61	0:0	14	)
water	372:63	0:0	12	;
if	373:24	376:24	12	(CONFIG_MPEG4_ENCODER && best_s . mv_dir & MV_DIRECT)
cond	373:27	373:67	13	CONFIG_MPEG4_ENCODER && best_s . mv_dir & MV_DIRECT
water	373:27	0:0	14	CONFIG_MPEG4_ENCODER
op	373:48	0:0	14	&&
water	373:51	0:0	14	best_s
op	373:57	0:0	14	.
water	373:58	0:0	14	mv_dir
op	373:65	0:0	14	&
water	373:67	0:0	14	MV_DIRECT
stmts	373:77	376:24	13	
water	373:77	0:0	14	{
water	374:28	0:0	14	mx
op	374:30	0:0	14	=
water	374:31	0:0	14	my
op	374:33	0:0	14	=
water	374:34	0:0	14	0
water	374:35	0:0	14	;
call	375:28	375:60	14	ff_mpeg4_set_direct_mv
arg	375:51	375:52	15	s
water	375:51	0:0	16	s
arg	375:54	375:56	15	mx
water	375:54	0:0	16	mx
arg	375:58	375:60	15	my
water	375:58	0:0	16	my
water	375:61	0:0	14	;
water	376:24	0:0	14	}
else	376:25	379:24	12
stmts	376:30	379:24	13	
if	376:30	379:24	14	(best_s . mv_dir & MV_DIR_BACKWARD)
cond	376:33	376:47	15	best_s . mv_dir & MV_DIR_BACKWARD
water	376:33	0:0	16	best_s
op	376:39	0:0	16	.
water	376:40	0:0	16	mv_dir
op	376:46	0:0	16	&
water	376:47	0:0	16	MV_DIR_BACKWARD
stmts	376:63	379:24	15	
water	376:63	0:0	16	{
water	377:28	0:0	16	mx
op	377:30	0:0	16	=
water	377:32	0:0	16	s
op	377:33	0:0	16	->
water	377:35	0:0	16	mv
op	377:37	0:0	16	[
water	377:38	0:0	16	1
op	377:39	0:0	16	]
op	377:40	0:0	16	[
water	377:41	0:0	16	0
op	377:42	0:0	16	]
op	377:43	0:0	16	[
water	377:44	0:0	16	0
op	377:45	0:0	16	]
water	377:46	0:0	16	;
water	378:28	0:0	16	my
op	378:30	0:0	16	=
water	378:32	0:0	16	s
op	378:33	0:0	16	->
water	378:35	0:0	16	mv
op	378:37	0:0	16	[
water	378:38	0:0	16	1
op	378:39	0:0	16	]
op	378:40	0:0	16	[
water	378:41	0:0	16	0
op	378:42	0:0	16	]
op	378:43	0:0	16	[
water	378:44	0:0	16	1
op	378:45	0:0	16	]
water	378:46	0:0	16	;
water	379:24	0:0	16	}
else	379:25	382:24	12
stmts	379:29	382:24	13	
water	379:29	0:0	14	{
water	380:28	0:0	14	mx
op	380:30	0:0	14	=
water	380:32	0:0	14	s
op	380:33	0:0	14	->
water	380:35	0:0	14	mv
op	380:37	0:0	14	[
water	380:38	0:0	14	0
op	380:39	0:0	14	]
op	380:40	0:0	14	[
water	380:41	0:0	14	0
op	380:42	0:0	14	]
op	380:43	0:0	14	[
water	380:44	0:0	14	0
op	380:45	0:0	14	]
water	380:46	0:0	14	;
water	381:28	0:0	14	my
op	381:30	0:0	14	=
water	381:32	0:0	14	s
op	381:33	0:0	14	->
water	381:35	0:0	14	mv
op	381:37	0:0	14	[
water	381:38	0:0	14	0
op	381:39	0:0	14	]
op	381:40	0:0	14	[
water	381:41	0:0	14	0
op	381:42	0:0	14	]
op	381:43	0:0	14	[
water	381:44	0:0	14	1
op	381:45	0:0	14	]
water	381:46	0:0	14	;
water	382:24	0:0	14	}
water	383:24	0:0	12	s
op	383:25	0:0	12	->
water	383:27	0:0	12	mv_dir
op	383:33	0:0	12	=
water	383:35	0:0	12	best_s
op	383:41	0:0	12	.
water	383:42	0:0	12	mv_dir
water	383:48	0:0	12	;
water	384:24	0:0	12	s
op	384:25	0:0	12	->
water	384:27	0:0	12	mv_type
op	384:35	0:0	12	=
water	384:37	0:0	12	best_s
op	384:43	0:0	12	.
water	384:44	0:0	12	mv_type
water	384:51	0:0	12	;
water	385:24	0:0	12	s
op	385:25	0:0	12	->
water	385:27	0:0	12	mb_intra
op	385:35	0:0	12	=
water	385:37	0:0	12	0
water	385:38	0:0	12	;
water	390:24	0:0	12	backup_s
op	390:32	0:0	12	.
water	390:33	0:0	12	dquant
op	390:39	0:0	12	=
water	390:41	0:0	12	0
water	390:42	0:0	12	;
water	391:24	0:0	12	s
op	391:25	0:0	12	->
water	391:27	0:0	12	skipdct
op	391:34	0:0	12	=
water	391:35	0:0	12	1
water	391:36	0:0	12	;
call	392:24	393:66	12	encode_mb_hq
arg	392:37	392:38	13	s
water	392:37	0:0	14	s
arg	392:40	392:49	13	&backup_s
op	392:40	0:0	14	&
water	392:41	0:0	14	backup_s
arg	392:51	392:58	13	&best_s
op	392:51	0:0	14	&
water	392:52	0:0	14	best_s
arg	392:60	392:84	13	CANDIDATE_MB_TYPE_INTER
water	392:60	0:0	14	CANDIDATE_MB_TYPE_INTER
arg	392:86	392:88	13	pb
water	392:86	0:0	14	pb
arg	392:90	392:93	13	pb2
water	392:90	0:0	14	pb2
arg	392:95	392:101	13	tex_pb
water	392:95	0:0	14	tex_pb
arg	393:40	393:45	13	&dmin
op	393:40	0:0	14	&
water	393:41	0:0	14	dmin
arg	393:47	393:58	13	&next_block
op	393:47	0:0	14	&
water	393:48	0:0	14	next_block
arg	393:60	393:62	13	mx
water	393:60	0:0	14	mx
arg	393:64	393:66	13	my
water	393:64	0:0	14	my
water	393:67	0:0	12	;
water	394:24	0:0	12	s
op	394:25	0:0	12	->
water	394:27	0:0	12	skipdct
op	394:34	0:0	12	=
water	394:35	0:0	12	0
water	394:36	0:0	12	;
water	395:20	0:0	12	}
water	396:16	0:0	10	}
water	397:16	0:0	8	s
op	397:17	0:0	8	->
water	397:19	0:0	8	current_picture
op	397:34	0:0	8	.
water	397:35	0:0	8	qscale_table
op	397:47	0:0	8	[
water	397:48	0:0	8	xy
op	397:50	0:0	8	]
op	397:52	0:0	8	=
water	397:54	0:0	8	best_s
op	397:60	0:0	8	.
water	397:61	0:0	8	qscale
water	397:67	0:0	8	;
call	398:16	398:56	8	copy_context_after_encode
arg	398:42	398:43	9	s
water	398:42	0:0	10	s
arg	398:45	398:52	9	&best_s
op	398:45	0:0	10	&
water	398:46	0:0	10	best_s
arg	398:54	398:56	9	-1
op	398:54	0:0	10	-
water	398:55	0:0	10	1
water	398:57	0:0	8	;
water	399:16	0:0	8	pb_bits_count
op	399:29	0:0	8	=
call	399:31	399:52	8	put_bits_count
arg	399:46	399:52	9	&s->pb
op	399:46	0:0	10	&
water	399:47	0:0	10	s
op	399:48	0:0	10	->
water	399:50	0:0	10	pb
water	399:53	0:0	8	;
call	400:16	400:37	8	flush_put_bits
arg	400:31	400:37	9	&s->pb
op	400:31	0:0	10	&
water	400:32	0:0	10	s
op	400:33	0:0	10	->
water	400:35	0:0	10	pb
water	400:38	0:0	8	;
call	401:16	401:83	8	avpriv_copy_bits
arg	401:33	401:45	9	&backup_s.pb
op	401:33	0:0	10	&
water	401:34	0:0	10	backup_s
op	401:42	0:0	10	.
water	401:43	0:0	10	pb
arg	401:47	401:68	9	bit_buf[next_block^1]
water	401:47	0:0	10	bit_buf
op	401:54	0:0	10	[
water	401:55	0:0	10	next_block
op	401:65	0:0	10	^
water	401:66	0:0	10	1
op	401:67	0:0	10	]
arg	401:70	401:83	9	pb_bits_count
water	401:70	0:0	10	pb_bits_count
water	401:84	0:0	8	;
water	402:16	0:0	8	s
op	402:17	0:0	8	->
water	402:19	0:0	8	pb
op	402:21	0:0	8	=
water	402:23	0:0	8	backup_s
op	402:31	0:0	8	.
water	402:32	0:0	8	pb
water	402:34	0:0	8	;
if	403:16	412:16	8	(s -> data_partitioning)
cond	403:19	403:22	9	s -> data_partitioning
water	403:19	0:0	10	s
op	403:20	0:0	10	->
water	403:22	0:0	10	data_partitioning
stmts	403:40	412:16	9	
water	403:40	0:0	10	{
water	404:20	0:0	10	pb2_bits_count
op	404:34	0:0	10	=
call	404:36	404:58	10	put_bits_count
arg	404:51	404:58	11	&s->pb2
op	404:51	0:0	12	&
water	404:52	0:0	12	s
op	404:53	0:0	12	->
water	404:55	0:0	12	pb2
water	404:59	0:0	10	;
call	405:20	405:42	10	flush_put_bits
arg	405:35	405:42	11	&s->pb2
op	405:35	0:0	12	&
water	405:36	0:0	12	s
op	405:37	0:0	12	->
water	405:39	0:0	12	pb2
water	405:43	0:0	10	;
call	406:20	406:90	10	avpriv_copy_bits
arg	406:37	406:50	11	&backup_s.pb2
op	406:37	0:0	12	&
water	406:38	0:0	12	backup_s
op	406:46	0:0	12	.
water	406:47	0:0	12	pb2
arg	406:52	406:74	11	bit_buf2[next_block^1]
water	406:52	0:0	12	bit_buf2
op	406:60	0:0	12	[
water	406:61	0:0	12	next_block
op	406:71	0:0	12	^
water	406:72	0:0	12	1
op	406:73	0:0	12	]
arg	406:76	406:90	11	pb2_bits_count
water	406:76	0:0	12	pb2_bits_count
water	406:91	0:0	10	;
water	407:20	0:0	10	s
op	407:21	0:0	10	->
water	407:23	0:0	10	pb2
op	407:26	0:0	10	=
water	407:28	0:0	10	backup_s
op	407:36	0:0	10	.
water	407:37	0:0	10	pb2
water	407:40	0:0	10	;
water	408:20	0:0	10	tex_pb_bits_count
op	408:37	0:0	10	=
call	408:39	408:64	10	put_bits_count
arg	408:54	408:64	11	&s->tex_pb
op	408:54	0:0	12	&
water	408:55	0:0	12	s
op	408:56	0:0	12	->
water	408:58	0:0	12	tex_pb
water	408:65	0:0	10	;
call	409:20	409:45	10	flush_put_bits
arg	409:35	409:45	11	&s->tex_pb
op	409:35	0:0	12	&
water	409:36	0:0	12	s
op	409:37	0:0	12	->
water	409:39	0:0	12	tex_pb
water	409:46	0:0	10	;
call	410:20	410:99	10	avpriv_copy_bits
arg	410:37	410:53	11	&backup_s.tex_pb
op	410:37	0:0	12	&
water	410:38	0:0	12	backup_s
op	410:46	0:0	12	.
water	410:47	0:0	12	tex_pb
arg	410:55	410:80	11	bit_buf_tex[next_block^1]
water	410:55	0:0	12	bit_buf_tex
op	410:66	0:0	12	[
water	410:67	0:0	12	next_block
op	410:77	0:0	12	^
water	410:78	0:0	12	1
op	410:79	0:0	12	]
arg	410:82	410:99	11	tex_pb_bits_count
water	410:82	0:0	12	tex_pb_bits_count
water	410:100	0:0	10	;
water	411:20	0:0	10	s
op	411:21	0:0	10	->
water	411:23	0:0	10	tex_pb
op	411:29	0:0	10	=
water	411:31	0:0	10	backup_s
op	411:39	0:0	10	.
water	411:40	0:0	10	tex_pb
water	411:46	0:0	10	;
water	412:16	0:0	10	}
water	413:16	0:0	8	s
op	413:17	0:0	8	->
water	413:19	0:0	8	last_bits
op	413:28	0:0	8	=
call	413:30	413:51	8	put_bits_count
arg	413:45	413:51	9	&s->pb
op	413:45	0:0	10	&
water	413:46	0:0	10	s
op	413:47	0:0	10	->
water	413:49	0:0	10	pb
water	413:52	0:0	8	;
if	414:16	416:48	8	(CONFIG_H263_ENCODER && s -> out_format == FMT_H263 && s -> pict_type != AV_PICTURE_TYPE_B)
cond	414:20	415:63	9	CONFIG_H263_ENCODER && s -> out_format == FMT_H263 && s -> pict_type != AV_PICTURE_TYPE_B
water	414:20	0:0	10	CONFIG_H263_ENCODER
op	414:40	0:0	10	&&
water	415:20	0:0	10	s
op	415:21	0:0	10	->
water	415:23	0:0	10	out_format
op	415:34	0:0	10	==
water	415:37	0:0	10	FMT_H263
op	415:46	0:0	10	&&
water	415:49	0:0	10	s
op	415:50	0:0	10	->
water	415:52	0:0	10	pict_type
op	415:61	0:0	10	!=
water	415:63	0:0	10	AV_PICTURE_TYPE_B
stmts	416:20	416:48	9	
call	416:20	416:47	10	ff_h263_update_motion_val
arg	416:46	416:47	11	s
water	416:46	0:0	12	s
water	416:48	0:0	10	;
if	417:16	421:16	8	(next_block == 0)
cond	417:19	417:31	9	next_block == 0
water	417:19	0:0	10	next_block
op	417:29	0:0	10	==
water	417:31	0:0	10	0
stmts	417:33	421:16	9	
water	417:33	0:0	10	{
water	418:20	0:0	10	s
op	418:21	0:0	10	->
water	418:23	0:0	10	hdsp
op	418:27	0:0	10	.
water	418:28	0:0	10	put_pixels_tab
op	418:42	0:0	10	[
water	418:43	0:0	10	0
op	418:44	0:0	10	]
op	418:45	0:0	10	[
water	418:46	0:0	10	0
op	418:47	0:0	10	]
water	418:48	0:0	10	(
water	418:49	0:0	10	s
op	418:50	0:0	10	->
water	418:52	0:0	10	dest
op	418:56	0:0	10	[
water	418:57	0:0	10	0
op	418:58	0:0	10	]
water	418:59	0:0	10	,
water	418:61	0:0	10	s
op	418:62	0:0	10	->
water	418:64	0:0	10	sc
op	418:66	0:0	10	.
water	418:67	0:0	10	rd_scratchpad
water	418:101	0:0	10	,
water	418:103	0:0	10	s
op	418:104	0:0	10	->
water	418:106	0:0	10	linesize
water	418:116	0:0	10	,
water	418:117	0:0	10	16
water	418:119	0:0	10	)
water	418:120	0:0	10	;
water	419:20	0:0	10	s
op	419:21	0:0	10	->
water	419:23	0:0	10	hdsp
op	419:27	0:0	10	.
water	419:28	0:0	10	put_pixels_tab
op	419:42	0:0	10	[
water	419:43	0:0	10	1
op	419:44	0:0	10	]
op	419:45	0:0	10	[
water	419:46	0:0	10	0
op	419:47	0:0	10	]
water	419:48	0:0	10	(
water	419:49	0:0	10	s
op	419:50	0:0	10	->
water	419:52	0:0	10	dest
op	419:56	0:0	10	[
water	419:57	0:0	10	1
op	419:58	0:0	10	]
water	419:59	0:0	10	,
water	419:61	0:0	10	s
op	419:62	0:0	10	->
water	419:64	0:0	10	sc
op	419:66	0:0	10	.
water	419:67	0:0	10	rd_scratchpad
op	419:81	0:0	10	+
water	419:83	0:0	10	16
op	419:85	0:0	10	*
water	419:86	0:0	10	s
op	419:87	0:0	10	->
water	419:89	0:0	10	linesize
water	419:101	0:0	10	,
water	419:103	0:0	10	s
op	419:104	0:0	10	->
water	419:106	0:0	10	uvlinesize
water	419:116	0:0	10	,
water	419:118	0:0	10	8
water	419:119	0:0	10	)
water	419:120	0:0	10	;
water	420:20	0:0	10	s
op	420:21	0:0	10	->
water	420:23	0:0	10	hdsp
op	420:27	0:0	10	.
water	420:28	0:0	10	put_pixels_tab
op	420:42	0:0	10	[
water	420:43	0:0	10	1
op	420:44	0:0	10	]
op	420:45	0:0	10	[
water	420:46	0:0	10	0
op	420:47	0:0	10	]
water	420:48	0:0	10	(
water	420:49	0:0	10	s
op	420:50	0:0	10	->
water	420:52	0:0	10	dest
op	420:56	0:0	10	[
water	420:57	0:0	10	2
op	420:58	0:0	10	]
water	420:59	0:0	10	,
water	420:61	0:0	10	s
op	420:62	0:0	10	->
water	420:64	0:0	10	sc
op	420:66	0:0	10	.
water	420:67	0:0	10	rd_scratchpad
op	420:81	0:0	10	+
water	420:83	0:0	10	16
op	420:85	0:0	10	*
water	420:86	0:0	10	s
op	420:87	0:0	10	->
water	420:89	0:0	10	linesize
op	420:98	0:0	10	+
water	420:100	0:0	10	8
water	420:101	0:0	10	,
water	420:103	0:0	10	s
op	420:104	0:0	10	->
water	420:106	0:0	10	uvlinesize
water	420:116	0:0	10	,
water	420:118	0:0	10	8
water	420:119	0:0	10	)
water	420:120	0:0	10	;
water	421:16	0:0	10	}
if	422:16	423:49	8	(s -> avctx -> mb_decision == FF_MB_DECISION_BITS)
cond	422:19	422:44	9	s -> avctx -> mb_decision == FF_MB_DECISION_BITS
water	422:19	0:0	10	s
op	422:20	0:0	10	->
water	422:22	0:0	10	avctx
op	422:27	0:0	10	->
water	422:29	0:0	10	mb_decision
op	422:41	0:0	10	==
water	422:44	0:0	10	FF_MB_DECISION_BITS
stmts	423:20	423:49	9	
call	423:20	423:48	10	ff_mpv_decode_mb
arg	423:37	423:38	11	s
water	423:37	0:0	12	s
arg	423:40	423:48	11	s->block
water	423:40	0:0	12	s
op	423:41	0:0	12	->
water	423:43	0:0	12	block
water	423:49	0:0	10	;
water	424:12	0:0	8	}
else	424:14	538:12	6
stmts	424:19	538:12	7	
water	424:19	0:0	8	{
decl	425:16	425:46	8	int	motion_x
op	425:29	0:0	8	=
water	425:31	0:0	8	0
water	425:32	0:0	8	,
decl	425:16	425:46	8	int	motion_y
op	425:43	0:0	8	=
water	425:45	0:0	8	0
water	426:16	0:0	8	s
op	426:17	0:0	8	->
water	426:19	0:0	8	mv_type
op	426:26	0:0	8	=
water	426:27	0:0	8	MV_TYPE_16X16
water	426:40	0:0	8	;
switch	428:16	530:16	8	(mb_type)
cond	428:23	428:23	9	mb_type
water	428:23	0:0	10	mb_type
stmts	428:31	530:16	9	
water	428:31	0:0	10	{
label	429:16	429:44	10	case CANDIDATE_MB_TYPE_INTRA :
water	430:20	0:0	10	s
op	430:21	0:0	10	->
water	430:23	0:0	10	mv_dir
op	430:30	0:0	10	=
water	430:32	0:0	10	0
water	430:33	0:0	10	;
water	431:20	0:0	10	s
op	431:21	0:0	10	->
water	431:23	0:0	10	mb_intra
op	431:31	0:0	10	=
water	431:33	0:0	10	1
water	431:34	0:0	10	;
water	432:20	0:0	10	motion_x
op	432:28	0:0	10	=
water	432:30	0:0	10	s
op	432:31	0:0	10	->
water	432:33	0:0	10	mv
op	432:35	0:0	10	[
water	432:36	0:0	10	0
op	432:37	0:0	10	]
op	432:38	0:0	10	[
water	432:39	0:0	10	0
op	432:40	0:0	10	]
op	432:41	0:0	10	[
water	432:42	0:0	10	0
op	432:43	0:0	10	]
op	432:45	0:0	10	=
water	432:47	0:0	10	0
water	432:48	0:0	10	;
water	433:20	0:0	10	motion_y
op	433:28	0:0	10	=
water	433:30	0:0	10	s
op	433:31	0:0	10	->
water	433:33	0:0	10	mv
op	433:35	0:0	10	[
water	433:36	0:0	10	0
op	433:37	0:0	10	]
op	433:38	0:0	10	[
water	433:39	0:0	10	0
op	433:40	0:0	10	]
op	433:41	0:0	10	[
water	433:42	0:0	10	1
op	433:43	0:0	10	]
op	433:45	0:0	10	=
water	433:47	0:0	10	0
water	433:48	0:0	10	;
break	434:20	434:25	10	
label	435:16	435:44	10	case CANDIDATE_MB_TYPE_INTER :
water	436:20	0:0	10	s
op	436:21	0:0	10	->
water	436:23	0:0	10	mv_dir
op	436:30	0:0	10	=
water	436:32	0:0	10	MV_DIR_FORWARD
water	436:46	0:0	10	;
water	437:20	0:0	10	s
op	437:21	0:0	10	->
water	437:23	0:0	10	mb_intra
op	437:31	0:0	10	=
water	437:33	0:0	10	0
water	437:34	0:0	10	;
water	438:20	0:0	10	motion_x
op	438:28	0:0	10	=
water	438:30	0:0	10	s
op	438:31	0:0	10	->
water	438:33	0:0	10	mv
op	438:35	0:0	10	[
water	438:36	0:0	10	0
op	438:37	0:0	10	]
op	438:38	0:0	10	[
water	438:39	0:0	10	0
op	438:40	0:0	10	]
op	438:41	0:0	10	[
water	438:42	0:0	10	0
op	438:43	0:0	10	]
op	438:45	0:0	10	=
water	438:47	0:0	10	s
op	438:48	0:0	10	->
water	438:50	0:0	10	p_mv_table
op	438:60	0:0	10	[
water	438:61	0:0	10	xy
op	438:63	0:0	10	]
op	438:64	0:0	10	[
water	438:65	0:0	10	0
op	438:66	0:0	10	]
water	438:67	0:0	10	;
water	439:20	0:0	10	motion_y
op	439:28	0:0	10	=
water	439:30	0:0	10	s
op	439:31	0:0	10	->
water	439:33	0:0	10	mv
op	439:35	0:0	10	[
water	439:36	0:0	10	0
op	439:37	0:0	10	]
op	439:38	0:0	10	[
water	439:39	0:0	10	0
op	439:40	0:0	10	]
op	439:41	0:0	10	[
water	439:42	0:0	10	1
op	439:43	0:0	10	]
op	439:45	0:0	10	=
water	439:47	0:0	10	s
op	439:48	0:0	10	->
water	439:50	0:0	10	p_mv_table
op	439:60	0:0	10	[
water	439:61	0:0	10	xy
op	439:63	0:0	10	]
op	439:64	0:0	10	[
water	439:65	0:0	10	1
op	439:66	0:0	10	]
water	439:67	0:0	10	;
break	440:20	440:25	10	
label	441:16	441:46	10	case CANDIDATE_MB_TYPE_INTER_I :
water	442:20	0:0	10	s
op	442:21	0:0	10	->
water	442:23	0:0	10	mv_dir
op	442:30	0:0	10	=
water	442:32	0:0	10	MV_DIR_FORWARD
water	442:46	0:0	10	;
water	443:20	0:0	10	s
op	443:21	0:0	10	->
water	443:23	0:0	10	mv_type
op	443:31	0:0	10	=
water	443:33	0:0	10	MV_TYPE_FIELD
water	443:46	0:0	10	;
water	444:20	0:0	10	s
op	444:21	0:0	10	->
water	444:23	0:0	10	mb_intra
op	444:31	0:0	10	=
water	444:33	0:0	10	0
water	444:34	0:0	10	;
for	445:20	449:20	10	(i = 0 ;i < 2;i ++)
forinit	445:24	445:27	11	i = 0 ;
water	445:24	0:0	12	i
op	445:25	0:0	12	=
water	445:26	0:0	12	0
water	445:27	0:0	12	;
cond	445:29	445:31	11	i < 2
water	445:29	0:0	12	i
op	445:30	0:0	12	<
water	445:31	0:0	12	2
forexpr	445:34	445:35	11	i ++
water	445:34	0:0	12	i
op	445:35	0:0	12	++
stmts	445:38	449:20	11	
water	445:38	0:0	12	{
water	446:24	0:0	12	j
op	446:25	0:0	12	=
water	446:27	0:0	12	s
op	446:28	0:0	12	->
water	446:30	0:0	12	field_select
op	446:42	0:0	12	[
water	446:43	0:0	12	0
op	446:44	0:0	12	]
op	446:45	0:0	12	[
water	446:46	0:0	12	i
op	446:47	0:0	12	]
op	446:49	0:0	12	=
water	446:51	0:0	12	s
op	446:52	0:0	12	->
water	446:54	0:0	12	p_field_select_table
op	446:74	0:0	12	[
water	446:75	0:0	12	i
op	446:76	0:0	12	]
op	446:77	0:0	12	[
water	446:78	0:0	12	xy
op	446:80	0:0	12	]
water	446:81	0:0	12	;
water	447:24	0:0	12	s
op	447:25	0:0	12	->
water	447:27	0:0	12	mv
op	447:29	0:0	12	[
water	447:30	0:0	12	0
op	447:31	0:0	12	]
op	447:32	0:0	12	[
water	447:33	0:0	12	i
op	447:34	0:0	12	]
op	447:35	0:0	12	[
water	447:36	0:0	12	0
op	447:37	0:0	12	]
op	447:39	0:0	12	=
water	447:41	0:0	12	s
op	447:42	0:0	12	->
water	447:44	0:0	12	p_field_mv_table
op	447:60	0:0	12	[
water	447:61	0:0	12	i
op	447:62	0:0	12	]
op	447:63	0:0	12	[
water	447:64	0:0	12	j
op	447:65	0:0	12	]
op	447:66	0:0	12	[
water	447:67	0:0	12	xy
op	447:69	0:0	12	]
op	447:70	0:0	12	[
water	447:71	0:0	12	0
op	447:72	0:0	12	]
water	447:73	0:0	12	;
water	448:24	0:0	12	s
op	448:25	0:0	12	->
water	448:27	0:0	12	mv
op	448:29	0:0	12	[
water	448:30	0:0	12	0
op	448:31	0:0	12	]
op	448:32	0:0	12	[
water	448:33	0:0	12	i
op	448:34	0:0	12	]
op	448:35	0:0	12	[
water	448:36	0:0	12	1
op	448:37	0:0	12	]
op	448:39	0:0	12	=
water	448:41	0:0	12	s
op	448:42	0:0	12	->
water	448:44	0:0	12	p_field_mv_table
op	448:60	0:0	12	[
water	448:61	0:0	12	i
op	448:62	0:0	12	]
op	448:63	0:0	12	[
water	448:64	0:0	12	j
op	448:65	0:0	12	]
op	448:66	0:0	12	[
water	448:67	0:0	12	xy
op	448:69	0:0	12	]
op	448:70	0:0	12	[
water	448:71	0:0	12	1
op	448:72	0:0	12	]
water	448:73	0:0	12	;
water	449:20	0:0	12	}
break	450:20	450:25	10	
label	451:16	451:46	10	case CANDIDATE_MB_TYPE_INTER4V :
water	452:20	0:0	10	s
op	452:21	0:0	10	->
water	452:23	0:0	10	mv_dir
op	452:30	0:0	10	=
water	452:32	0:0	10	MV_DIR_FORWARD
water	452:46	0:0	10	;
water	453:20	0:0	10	s
op	453:21	0:0	10	->
water	453:23	0:0	10	mv_type
op	453:31	0:0	10	=
water	453:33	0:0	10	MV_TYPE_8X8
water	453:44	0:0	10	;
water	454:20	0:0	10	s
op	454:21	0:0	10	->
water	454:23	0:0	10	mb_intra
op	454:31	0:0	10	=
water	454:33	0:0	10	0
water	454:34	0:0	10	;
for	455:20	458:20	10	(i = 0 ;i < 4;i ++)
forinit	455:24	455:27	11	i = 0 ;
water	455:24	0:0	12	i
op	455:25	0:0	12	=
water	455:26	0:0	12	0
water	455:27	0:0	12	;
cond	455:29	455:31	11	i < 4
water	455:29	0:0	12	i
op	455:30	0:0	12	<
water	455:31	0:0	12	4
forexpr	455:34	455:35	11	i ++
water	455:34	0:0	12	i
op	455:35	0:0	12	++
stmts	455:38	458:20	11	
water	455:38	0:0	12	{
water	456:24	0:0	12	s
op	456:25	0:0	12	->
water	456:27	0:0	12	mv
op	456:29	0:0	12	[
water	456:30	0:0	12	0
op	456:31	0:0	12	]
op	456:32	0:0	12	[
water	456:33	0:0	12	i
op	456:34	0:0	12	]
op	456:35	0:0	12	[
water	456:36	0:0	12	0
op	456:37	0:0	12	]
op	456:39	0:0	12	=
water	456:41	0:0	12	s
op	456:42	0:0	12	->
water	456:44	0:0	12	current_picture
op	456:59	0:0	12	.
water	456:60	0:0	12	motion_val
op	456:70	0:0	12	[
water	456:71	0:0	12	0
op	456:72	0:0	12	]
op	456:73	0:0	12	[
water	456:74	0:0	12	s
op	456:75	0:0	12	->
water	456:77	0:0	12	block_index
op	456:88	0:0	12	[
water	456:89	0:0	12	i
op	456:90	0:0	12	]
op	456:91	0:0	12	]
op	456:92	0:0	12	[
water	456:93	0:0	12	0
op	456:94	0:0	12	]
water	456:95	0:0	12	;
water	457:24	0:0	12	s
op	457:25	0:0	12	->
water	457:27	0:0	12	mv
op	457:29	0:0	12	[
water	457:30	0:0	12	0
op	457:31	0:0	12	]
op	457:32	0:0	12	[
water	457:33	0:0	12	i
op	457:34	0:0	12	]
op	457:35	0:0	12	[
water	457:36	0:0	12	1
op	457:37	0:0	12	]
op	457:39	0:0	12	=
water	457:41	0:0	12	s
op	457:42	0:0	12	->
water	457:44	0:0	12	current_picture
op	457:59	0:0	12	.
water	457:60	0:0	12	motion_val
op	457:70	0:0	12	[
water	457:71	0:0	12	0
op	457:72	0:0	12	]
op	457:73	0:0	12	[
water	457:74	0:0	12	s
op	457:75	0:0	12	->
water	457:77	0:0	12	block_index
op	457:88	0:0	12	[
water	457:89	0:0	12	i
op	457:90	0:0	12	]
op	457:91	0:0	12	]
op	457:92	0:0	12	[
water	457:93	0:0	12	1
op	457:94	0:0	12	]
water	457:95	0:0	12	;
water	458:20	0:0	12	}
break	459:20	459:25	10	
label	460:16	460:45	10	case CANDIDATE_MB_TYPE_DIRECT :
if	461:20	467:20	10	(CONFIG_MPEG4_ENCODER)
cond	461:24	461:24	11	CONFIG_MPEG4_ENCODER
water	461:24	0:0	12	CONFIG_MPEG4_ENCODER
stmts	461:46	467:20	11	
water	461:46	0:0	12	{
water	462:24	0:0	12	s
op	462:25	0:0	12	->
water	462:27	0:0	12	mv_dir
op	462:34	0:0	12	=
water	462:36	0:0	12	MV_DIR_FORWARD
op	462:50	0:0	12	|
water	462:51	0:0	12	MV_DIR_BACKWARD
op	462:66	0:0	12	|
water	462:67	0:0	12	MV_DIRECT
water	462:76	0:0	12	;
water	463:24	0:0	12	s
op	463:25	0:0	12	->
water	463:27	0:0	12	mb_intra
op	463:35	0:0	12	=
water	463:37	0:0	12	0
water	463:38	0:0	12	;
water	464:24	0:0	12	motion_x
op	464:32	0:0	12	=
water	464:33	0:0	12	s
op	464:34	0:0	12	->
water	464:36	0:0	12	b_direct_mv_table
op	464:53	0:0	12	[
water	464:54	0:0	12	xy
op	464:56	0:0	12	]
op	464:57	0:0	12	[
water	464:58	0:0	12	0
op	464:59	0:0	12	]
water	464:60	0:0	12	;
water	465:24	0:0	12	motion_y
op	465:32	0:0	12	=
water	465:33	0:0	12	s
op	465:34	0:0	12	->
water	465:36	0:0	12	b_direct_mv_table
op	465:53	0:0	12	[
water	465:54	0:0	12	xy
op	465:56	0:0	12	]
op	465:57	0:0	12	[
water	465:58	0:0	12	1
op	465:59	0:0	12	]
water	465:60	0:0	12	;
call	466:24	466:68	12	ff_mpeg4_set_direct_mv
arg	466:47	466:48	13	s
water	466:47	0:0	14	s
arg	466:50	466:58	13	motion_x
water	466:50	0:0	14	motion_x
arg	466:60	466:68	13	motion_y
water	466:60	0:0	14	motion_y
water	466:69	0:0	12	;
water	467:20	0:0	12	}
break	468:20	468:25	10	
label	469:16	469:46	10	case CANDIDATE_MB_TYPE_DIRECT0 :
if	470:20	474:20	10	(CONFIG_MPEG4_ENCODER)
cond	470:24	470:24	11	CONFIG_MPEG4_ENCODER
water	470:24	0:0	12	CONFIG_MPEG4_ENCODER
stmts	470:46	474:20	11	
water	470:46	0:0	12	{
water	471:24	0:0	12	s
op	471:25	0:0	12	->
water	471:27	0:0	12	mv_dir
op	471:34	0:0	12	=
water	471:36	0:0	12	MV_DIR_FORWARD
op	471:50	0:0	12	|
water	471:51	0:0	12	MV_DIR_BACKWARD
op	471:66	0:0	12	|
water	471:67	0:0	12	MV_DIRECT
water	471:76	0:0	12	;
water	472:24	0:0	12	s
op	472:25	0:0	12	->
water	472:27	0:0	12	mb_intra
op	472:35	0:0	12	=
water	472:37	0:0	12	0
water	472:38	0:0	12	;
call	473:24	473:54	12	ff_mpeg4_set_direct_mv
arg	473:47	473:48	13	s
water	473:47	0:0	14	s
arg	473:50	473:51	13	0
water	473:50	0:0	14	0
arg	473:53	473:54	13	0
water	473:53	0:0	14	0
water	473:55	0:0	12	;
water	474:20	0:0	12	}
break	475:20	475:25	10	
label	476:16	476:44	10	case CANDIDATE_MB_TYPE_BIDIR :
water	477:20	0:0	10	s
op	477:21	0:0	10	->
water	477:23	0:0	10	mv_dir
op	477:30	0:0	10	=
water	477:32	0:0	10	MV_DIR_FORWARD
op	477:47	0:0	10	|
water	477:49	0:0	10	MV_DIR_BACKWARD
water	477:64	0:0	10	;
water	478:20	0:0	10	s
op	478:21	0:0	10	->
water	478:23	0:0	10	mb_intra
op	478:31	0:0	10	=
water	478:33	0:0	10	0
water	478:34	0:0	10	;
water	479:20	0:0	10	s
op	479:21	0:0	10	->
water	479:23	0:0	10	mv
op	479:25	0:0	10	[
water	479:26	0:0	10	0
op	479:27	0:0	10	]
op	479:28	0:0	10	[
water	479:29	0:0	10	0
op	479:30	0:0	10	]
op	479:31	0:0	10	[
water	479:32	0:0	10	0
op	479:33	0:0	10	]
op	479:35	0:0	10	=
water	479:37	0:0	10	s
op	479:38	0:0	10	->
water	479:40	0:0	10	b_bidir_forw_mv_table
op	479:61	0:0	10	[
water	479:62	0:0	10	xy
op	479:64	0:0	10	]
op	479:65	0:0	10	[
water	479:66	0:0	10	0
op	479:67	0:0	10	]
water	479:68	0:0	10	;
water	480:20	0:0	10	s
op	480:21	0:0	10	->
water	480:23	0:0	10	mv
op	480:25	0:0	10	[
water	480:26	0:0	10	0
op	480:27	0:0	10	]
op	480:28	0:0	10	[
water	480:29	0:0	10	0
op	480:30	0:0	10	]
op	480:31	0:0	10	[
water	480:32	0:0	10	1
op	480:33	0:0	10	]
op	480:35	0:0	10	=
water	480:37	0:0	10	s
op	480:38	0:0	10	->
water	480:40	0:0	10	b_bidir_forw_mv_table
op	480:61	0:0	10	[
water	480:62	0:0	10	xy
op	480:64	0:0	10	]
op	480:65	0:0	10	[
water	480:66	0:0	10	1
op	480:67	0:0	10	]
water	480:68	0:0	10	;
water	481:20	0:0	10	s
op	481:21	0:0	10	->
water	481:23	0:0	10	mv
op	481:25	0:0	10	[
water	481:26	0:0	10	1
op	481:27	0:0	10	]
op	481:28	0:0	10	[
water	481:29	0:0	10	0
op	481:30	0:0	10	]
op	481:31	0:0	10	[
water	481:32	0:0	10	0
op	481:33	0:0	10	]
op	481:35	0:0	10	=
water	481:37	0:0	10	s
op	481:38	0:0	10	->
water	481:40	0:0	10	b_bidir_back_mv_table
op	481:61	0:0	10	[
water	481:62	0:0	10	xy
op	481:64	0:0	10	]
op	481:65	0:0	10	[
water	481:66	0:0	10	0
op	481:67	0:0	10	]
water	481:68	0:0	10	;
water	482:20	0:0	10	s
op	482:21	0:0	10	->
water	482:23	0:0	10	mv
op	482:25	0:0	10	[
water	482:26	0:0	10	1
op	482:27	0:0	10	]
op	482:28	0:0	10	[
water	482:29	0:0	10	0
op	482:30	0:0	10	]
op	482:31	0:0	10	[
water	482:32	0:0	10	1
op	482:33	0:0	10	]
op	482:35	0:0	10	=
water	482:37	0:0	10	s
op	482:38	0:0	10	->
water	482:40	0:0	10	b_bidir_back_mv_table
op	482:61	0:0	10	[
water	482:62	0:0	10	xy
op	482:64	0:0	10	]
op	482:65	0:0	10	[
water	482:66	0:0	10	1
op	482:67	0:0	10	]
water	482:68	0:0	10	;
break	483:20	483:25	10	
label	484:16	484:47	10	case CANDIDATE_MB_TYPE_BACKWARD :
water	485:20	0:0	10	s
op	485:21	0:0	10	->
water	485:23	0:0	10	mv_dir
op	485:30	0:0	10	=
water	485:32	0:0	10	MV_DIR_BACKWARD
water	485:47	0:0	10	;
water	486:20	0:0	10	s
op	486:21	0:0	10	->
water	486:23	0:0	10	mb_intra
op	486:31	0:0	10	=
water	486:33	0:0	10	0
water	486:34	0:0	10	;
water	487:20	0:0	10	motion_x
op	487:28	0:0	10	=
water	487:30	0:0	10	s
op	487:31	0:0	10	->
water	487:33	0:0	10	mv
op	487:35	0:0	10	[
water	487:36	0:0	10	1
op	487:37	0:0	10	]
op	487:38	0:0	10	[
water	487:39	0:0	10	0
op	487:40	0:0	10	]
op	487:41	0:0	10	[
water	487:42	0:0	10	0
op	487:43	0:0	10	]
op	487:45	0:0	10	=
water	487:47	0:0	10	s
op	487:48	0:0	10	->
water	487:50	0:0	10	b_back_mv_table
op	487:65	0:0	10	[
water	487:66	0:0	10	xy
op	487:68	0:0	10	]
op	487:69	0:0	10	[
water	487:70	0:0	10	0
op	487:71	0:0	10	]
water	487:72	0:0	10	;
water	488:20	0:0	10	motion_y
op	488:28	0:0	10	=
water	488:30	0:0	10	s
op	488:31	0:0	10	->
water	488:33	0:0	10	mv
op	488:35	0:0	10	[
water	488:36	0:0	10	1
op	488:37	0:0	10	]
op	488:38	0:0	10	[
water	488:39	0:0	10	0
op	488:40	0:0	10	]
op	488:41	0:0	10	[
water	488:42	0:0	10	1
op	488:43	0:0	10	]
op	488:45	0:0	10	=
water	488:47	0:0	10	s
op	488:48	0:0	10	->
water	488:50	0:0	10	b_back_mv_table
op	488:65	0:0	10	[
water	488:66	0:0	10	xy
op	488:68	0:0	10	]
op	488:69	0:0	10	[
water	488:70	0:0	10	1
op	488:71	0:0	10	]
water	488:72	0:0	10	;
break	489:20	489:25	10	
label	490:16	490:46	10	case CANDIDATE_MB_TYPE_FORWARD :
water	491:20	0:0	10	s
op	491:21	0:0	10	->
water	491:23	0:0	10	mv_dir
op	491:30	0:0	10	=
water	491:32	0:0	10	MV_DIR_FORWARD
water	491:46	0:0	10	;
water	492:20	0:0	10	s
op	492:21	0:0	10	->
water	492:23	0:0	10	mb_intra
op	492:31	0:0	10	=
water	492:33	0:0	10	0
water	492:34	0:0	10	;
water	493:20	0:0	10	motion_x
op	493:28	0:0	10	=
water	493:30	0:0	10	s
op	493:31	0:0	10	->
water	493:33	0:0	10	mv
op	493:35	0:0	10	[
water	493:36	0:0	10	0
op	493:37	0:0	10	]
op	493:38	0:0	10	[
water	493:39	0:0	10	0
op	493:40	0:0	10	]
op	493:41	0:0	10	[
water	493:42	0:0	10	0
op	493:43	0:0	10	]
op	493:45	0:0	10	=
water	493:47	0:0	10	s
op	493:48	0:0	10	->
water	493:50	0:0	10	b_forw_mv_table
op	493:65	0:0	10	[
water	493:66	0:0	10	xy
op	493:68	0:0	10	]
op	493:69	0:0	10	[
water	493:70	0:0	10	0
op	493:71	0:0	10	]
water	493:72	0:0	10	;
water	494:20	0:0	10	motion_y
op	494:28	0:0	10	=
water	494:30	0:0	10	s
op	494:31	0:0	10	->
water	494:33	0:0	10	mv
op	494:35	0:0	10	[
water	494:36	0:0	10	0
op	494:37	0:0	10	]
op	494:38	0:0	10	[
water	494:39	0:0	10	0
op	494:40	0:0	10	]
op	494:41	0:0	10	[
water	494:42	0:0	10	1
op	494:43	0:0	10	]
op	494:45	0:0	10	=
water	494:47	0:0	10	s
op	494:48	0:0	10	->
water	494:50	0:0	10	b_forw_mv_table
op	494:65	0:0	10	[
water	494:66	0:0	10	xy
op	494:68	0:0	10	]
op	494:69	0:0	10	[
water	494:70	0:0	10	1
op	494:71	0:0	10	]
water	494:72	0:0	10	;
break	495:20	495:25	10	
label	496:16	496:48	10	case CANDIDATE_MB_TYPE_FORWARD_I :
water	497:20	0:0	10	s
op	497:21	0:0	10	->
water	497:23	0:0	10	mv_dir
op	497:30	0:0	10	=
water	497:32	0:0	10	MV_DIR_FORWARD
water	497:46	0:0	10	;
water	498:20	0:0	10	s
op	498:21	0:0	10	->
water	498:23	0:0	10	mv_type
op	498:31	0:0	10	=
water	498:33	0:0	10	MV_TYPE_FIELD
water	498:46	0:0	10	;
water	499:20	0:0	10	s
op	499:21	0:0	10	->
water	499:23	0:0	10	mb_intra
op	499:31	0:0	10	=
water	499:33	0:0	10	0
water	499:34	0:0	10	;
for	500:20	504:20	10	(i = 0 ;i < 2;i ++)
forinit	500:24	500:27	11	i = 0 ;
water	500:24	0:0	12	i
op	500:25	0:0	12	=
water	500:26	0:0	12	0
water	500:27	0:0	12	;
cond	500:29	500:31	11	i < 2
water	500:29	0:0	12	i
op	500:30	0:0	12	<
water	500:31	0:0	12	2
forexpr	500:34	500:35	11	i ++
water	500:34	0:0	12	i
op	500:35	0:0	12	++
stmts	500:38	504:20	11	
water	500:38	0:0	12	{
water	501:24	0:0	12	j
op	501:25	0:0	12	=
water	501:27	0:0	12	s
op	501:28	0:0	12	->
water	501:30	0:0	12	field_select
op	501:42	0:0	12	[
water	501:43	0:0	12	0
op	501:44	0:0	12	]
op	501:45	0:0	12	[
water	501:46	0:0	12	i
op	501:47	0:0	12	]
op	501:49	0:0	12	=
water	501:51	0:0	12	s
op	501:52	0:0	12	->
water	501:54	0:0	12	b_field_select_table
op	501:74	0:0	12	[
water	501:75	0:0	12	0
op	501:76	0:0	12	]
op	501:77	0:0	12	[
water	501:78	0:0	12	i
op	501:79	0:0	12	]
op	501:80	0:0	12	[
water	501:81	0:0	12	xy
op	501:83	0:0	12	]
water	501:84	0:0	12	;
water	502:24	0:0	12	s
op	502:25	0:0	12	->
water	502:27	0:0	12	mv
op	502:29	0:0	12	[
water	502:30	0:0	12	0
op	502:31	0:0	12	]
op	502:32	0:0	12	[
water	502:33	0:0	12	i
op	502:34	0:0	12	]
op	502:35	0:0	12	[
water	502:36	0:0	12	0
op	502:37	0:0	12	]
op	502:39	0:0	12	=
water	502:41	0:0	12	s
op	502:42	0:0	12	->
water	502:44	0:0	12	b_field_mv_table
op	502:60	0:0	12	[
water	502:61	0:0	12	0
op	502:62	0:0	12	]
op	502:63	0:0	12	[
water	502:64	0:0	12	i
op	502:65	0:0	12	]
op	502:66	0:0	12	[
water	502:67	0:0	12	j
op	502:68	0:0	12	]
op	502:69	0:0	12	[
water	502:70	0:0	12	xy
op	502:72	0:0	12	]
op	502:73	0:0	12	[
water	502:74	0:0	12	0
op	502:75	0:0	12	]
water	502:76	0:0	12	;
water	503:24	0:0	12	s
op	503:25	0:0	12	->
water	503:27	0:0	12	mv
op	503:29	0:0	12	[
water	503:30	0:0	12	0
op	503:31	0:0	12	]
op	503:32	0:0	12	[
water	503:33	0:0	12	i
op	503:34	0:0	12	]
op	503:35	0:0	12	[
water	503:36	0:0	12	1
op	503:37	0:0	12	]
op	503:39	0:0	12	=
water	503:41	0:0	12	s
op	503:42	0:0	12	->
water	503:44	0:0	12	b_field_mv_table
op	503:60	0:0	12	[
water	503:61	0:0	12	0
op	503:62	0:0	12	]
op	503:63	0:0	12	[
water	503:64	0:0	12	i
op	503:65	0:0	12	]
op	503:66	0:0	12	[
water	503:67	0:0	12	j
op	503:68	0:0	12	]
op	503:69	0:0	12	[
water	503:70	0:0	12	xy
op	503:72	0:0	12	]
op	503:73	0:0	12	[
water	503:74	0:0	12	1
op	503:75	0:0	12	]
water	503:76	0:0	12	;
water	504:20	0:0	12	}
break	505:20	505:25	10	
label	506:16	506:49	10	case CANDIDATE_MB_TYPE_BACKWARD_I :
water	507:20	0:0	10	s
op	507:21	0:0	10	->
water	507:23	0:0	10	mv_dir
op	507:30	0:0	10	=
water	507:32	0:0	10	MV_DIR_BACKWARD
water	507:47	0:0	10	;
water	508:20	0:0	10	s
op	508:21	0:0	10	->
water	508:23	0:0	10	mv_type
op	508:31	0:0	10	=
water	508:33	0:0	10	MV_TYPE_FIELD
water	508:46	0:0	10	;
water	509:20	0:0	10	s
op	509:21	0:0	10	->
water	509:23	0:0	10	mb_intra
op	509:31	0:0	10	=
water	509:33	0:0	10	0
water	509:34	0:0	10	;
for	510:20	514:20	10	(i = 0 ;i < 2;i ++)
forinit	510:24	510:27	11	i = 0 ;
water	510:24	0:0	12	i
op	510:25	0:0	12	=
water	510:26	0:0	12	0
water	510:27	0:0	12	;
cond	510:29	510:31	11	i < 2
water	510:29	0:0	12	i
op	510:30	0:0	12	<
water	510:31	0:0	12	2
forexpr	510:34	510:35	11	i ++
water	510:34	0:0	12	i
op	510:35	0:0	12	++
stmts	510:38	514:20	11	
water	510:38	0:0	12	{
water	511:24	0:0	12	j
op	511:25	0:0	12	=
water	511:27	0:0	12	s
op	511:28	0:0	12	->
water	511:30	0:0	12	field_select
op	511:42	0:0	12	[
water	511:43	0:0	12	1
op	511:44	0:0	12	]
op	511:45	0:0	12	[
water	511:46	0:0	12	i
op	511:47	0:0	12	]
op	511:49	0:0	12	=
water	511:51	0:0	12	s
op	511:52	0:0	12	->
water	511:54	0:0	12	b_field_select_table
op	511:74	0:0	12	[
water	511:75	0:0	12	1
op	511:76	0:0	12	]
op	511:77	0:0	12	[
water	511:78	0:0	12	i
op	511:79	0:0	12	]
op	511:80	0:0	12	[
water	511:81	0:0	12	xy
op	511:83	0:0	12	]
water	511:84	0:0	12	;
water	512:24	0:0	12	s
op	512:25	0:0	12	->
water	512:27	0:0	12	mv
op	512:29	0:0	12	[
water	512:30	0:0	12	1
op	512:31	0:0	12	]
op	512:32	0:0	12	[
water	512:33	0:0	12	i
op	512:34	0:0	12	]
op	512:35	0:0	12	[
water	512:36	0:0	12	0
op	512:37	0:0	12	]
op	512:39	0:0	12	=
water	512:41	0:0	12	s
op	512:42	0:0	12	->
water	512:44	0:0	12	b_field_mv_table
op	512:60	0:0	12	[
water	512:61	0:0	12	1
op	512:62	0:0	12	]
op	512:63	0:0	12	[
water	512:64	0:0	12	i
op	512:65	0:0	12	]
op	512:66	0:0	12	[
water	512:67	0:0	12	j
op	512:68	0:0	12	]
op	512:69	0:0	12	[
water	512:70	0:0	12	xy
op	512:72	0:0	12	]
op	512:73	0:0	12	[
water	512:74	0:0	12	0
op	512:75	0:0	12	]
water	512:76	0:0	12	;
water	513:24	0:0	12	s
op	513:25	0:0	12	->
water	513:27	0:0	12	mv
op	513:29	0:0	12	[
water	513:30	0:0	12	1
op	513:31	0:0	12	]
op	513:32	0:0	12	[
water	513:33	0:0	12	i
op	513:34	0:0	12	]
op	513:35	0:0	12	[
water	513:36	0:0	12	1
op	513:37	0:0	12	]
op	513:39	0:0	12	=
water	513:41	0:0	12	s
op	513:42	0:0	12	->
water	513:44	0:0	12	b_field_mv_table
op	513:60	0:0	12	[
water	513:61	0:0	12	1
op	513:62	0:0	12	]
op	513:63	0:0	12	[
water	513:64	0:0	12	i
op	513:65	0:0	12	]
op	513:66	0:0	12	[
water	513:67	0:0	12	j
op	513:68	0:0	12	]
op	513:69	0:0	12	[
water	513:70	0:0	12	xy
op	513:72	0:0	12	]
op	513:73	0:0	12	[
water	513:74	0:0	12	1
op	513:75	0:0	12	]
water	513:76	0:0	12	;
water	514:20	0:0	12	}
break	515:20	515:25	10	
label	516:16	516:46	10	case CANDIDATE_MB_TYPE_BIDIR_I :
water	517:20	0:0	10	s
op	517:21	0:0	10	->
water	517:23	0:0	10	mv_dir
op	517:30	0:0	10	=
water	517:32	0:0	10	MV_DIR_FORWARD
op	517:47	0:0	10	|
water	517:49	0:0	10	MV_DIR_BACKWARD
water	517:64	0:0	10	;
water	518:20	0:0	10	s
op	518:21	0:0	10	->
water	518:23	0:0	10	mv_type
op	518:31	0:0	10	=
water	518:33	0:0	10	MV_TYPE_FIELD
water	518:46	0:0	10	;
water	519:20	0:0	10	s
op	519:21	0:0	10	->
water	519:23	0:0	10	mb_intra
op	519:31	0:0	10	=
water	519:33	0:0	10	0
water	519:34	0:0	10	;
for	520:20	526:20	10	(dir = 0 ;dir < 2;dir ++)
forinit	520:24	520:29	11	dir = 0 ;
water	520:24	0:0	12	dir
op	520:27	0:0	12	=
water	520:28	0:0	12	0
water	520:29	0:0	12	;
cond	520:31	520:35	11	dir < 2
water	520:31	0:0	12	dir
op	520:34	0:0	12	<
water	520:35	0:0	12	2
forexpr	520:38	520:41	11	dir ++
water	520:38	0:0	12	dir
op	520:41	0:0	12	++
stmts	520:44	526:20	11	
water	520:44	0:0	12	{
for	521:24	525:24	12	(i = 0 ;i < 2;i ++)
forinit	521:28	521:31	13	i = 0 ;
water	521:28	0:0	14	i
op	521:29	0:0	14	=
water	521:30	0:0	14	0
water	521:31	0:0	14	;
cond	521:33	521:35	13	i < 2
water	521:33	0:0	14	i
op	521:34	0:0	14	<
water	521:35	0:0	14	2
forexpr	521:38	521:39	13	i ++
water	521:38	0:0	14	i
op	521:39	0:0	14	++
stmts	521:42	525:24	13	
water	521:42	0:0	14	{
water	522:28	0:0	14	j
op	522:29	0:0	14	=
water	522:31	0:0	14	s
op	522:32	0:0	14	->
water	522:34	0:0	14	field_select
op	522:46	0:0	14	[
water	522:47	0:0	14	dir
op	522:50	0:0	14	]
op	522:51	0:0	14	[
water	522:52	0:0	14	i
op	522:53	0:0	14	]
op	522:55	0:0	14	=
water	522:57	0:0	14	s
op	522:58	0:0	14	->
water	522:60	0:0	14	b_field_select_table
op	522:80	0:0	14	[
water	522:81	0:0	14	dir
op	522:84	0:0	14	]
op	522:85	0:0	14	[
water	522:86	0:0	14	i
op	522:87	0:0	14	]
op	522:88	0:0	14	[
water	522:89	0:0	14	xy
op	522:91	0:0	14	]
water	522:92	0:0	14	;
water	523:28	0:0	14	s
op	523:29	0:0	14	->
water	523:31	0:0	14	mv
op	523:33	0:0	14	[
water	523:34	0:0	14	dir
op	523:37	0:0	14	]
op	523:38	0:0	14	[
water	523:39	0:0	14	i
op	523:40	0:0	14	]
op	523:41	0:0	14	[
water	523:42	0:0	14	0
op	523:43	0:0	14	]
op	523:45	0:0	14	=
water	523:47	0:0	14	s
op	523:48	0:0	14	->
water	523:50	0:0	14	b_field_mv_table
op	523:66	0:0	14	[
water	523:67	0:0	14	dir
op	523:70	0:0	14	]
op	523:71	0:0	14	[
water	523:72	0:0	14	i
op	523:73	0:0	14	]
op	523:74	0:0	14	[
water	523:75	0:0	14	j
op	523:76	0:0	14	]
op	523:77	0:0	14	[
water	523:78	0:0	14	xy
op	523:80	0:0	14	]
op	523:81	0:0	14	[
water	523:82	0:0	14	0
op	523:83	0:0	14	]
water	523:84	0:0	14	;
water	524:28	0:0	14	s
op	524:29	0:0	14	->
water	524:31	0:0	14	mv
op	524:33	0:0	14	[
water	524:34	0:0	14	dir
op	524:37	0:0	14	]
op	524:38	0:0	14	[
water	524:39	0:0	14	i
op	524:40	0:0	14	]
op	524:41	0:0	14	[
water	524:42	0:0	14	1
op	524:43	0:0	14	]
op	524:45	0:0	14	=
water	524:47	0:0	14	s
op	524:48	0:0	14	->
water	524:50	0:0	14	b_field_mv_table
op	524:66	0:0	14	[
water	524:67	0:0	14	dir
op	524:70	0:0	14	]
op	524:71	0:0	14	[
water	524:72	0:0	14	i
op	524:73	0:0	14	]
op	524:74	0:0	14	[
water	524:75	0:0	14	j
op	524:76	0:0	14	]
op	524:77	0:0	14	[
water	524:78	0:0	14	xy
op	524:80	0:0	14	]
op	524:81	0:0	14	[
water	524:82	0:0	14	1
op	524:83	0:0	14	]
water	524:84	0:0	14	;
water	525:24	0:0	14	}
water	526:20	0:0	12	}
break	527:20	527:25	10	
label	528:16	528:23	10	default :
call	529:20	529:70	10	av_log
arg	529:27	529:35	11	s->avctx
water	529:27	0:0	12	s
op	529:28	0:0	12	->
water	529:30	0:0	12	avctx
arg	529:37	529:49	11	AV_LOG_ERROR
water	529:37	0:0	12	AV_LOG_ERROR
arg	529:51	529:70	11	"illegal MB type\n"
water	529:51	0:0	12	"illegal MB type\n"
water	529:71	0:0	10	;
water	530:16	0:0	10	}
call	531:16	531:47	8	encode_mb
arg	531:26	531:27	9	s
water	531:26	0:0	10	s
arg	531:29	531:37	9	motion_x
water	531:29	0:0	10	motion_x
arg	531:39	531:47	9	motion_y
water	531:39	0:0	10	motion_y
water	531:48	0:0	8	;
water	533:16	0:0	8	s
op	533:17	0:0	8	->
water	533:19	0:0	8	last_mv_dir
op	533:31	0:0	8	=
water	533:33	0:0	8	s
op	533:34	0:0	8	->
water	533:36	0:0	8	mv_dir
water	533:42	0:0	8	;
if	534:16	536:48	8	(CONFIG_H263_ENCODER && s -> out_format == FMT_H263 && s -> pict_type != AV_PICTURE_TYPE_B)
cond	534:20	535:63	9	CONFIG_H263_ENCODER && s -> out_format == FMT_H263 && s -> pict_type != AV_PICTURE_TYPE_B
water	534:20	0:0	10	CONFIG_H263_ENCODER
op	534:40	0:0	10	&&
water	535:20	0:0	10	s
op	535:21	0:0	10	->
water	535:23	0:0	10	out_format
op	535:34	0:0	10	==
water	535:37	0:0	10	FMT_H263
op	535:46	0:0	10	&&
water	535:49	0:0	10	s
op	535:50	0:0	10	->
water	535:52	0:0	10	pict_type
op	535:61	0:0	10	!=
water	535:63	0:0	10	AV_PICTURE_TYPE_B
stmts	536:20	536:48	9	
call	536:20	536:47	10	ff_h263_update_motion_val
arg	536:46	536:47	11	s
water	536:46	0:0	12	s
water	536:48	0:0	10	;
call	537:16	537:44	8	ff_mpv_decode_mb
arg	537:33	537:34	9	s
water	537:33	0:0	10	s
arg	537:36	537:44	9	s->block
water	537:36	0:0	10	s
op	537:37	0:0	10	->
water	537:39	0:0	10	block
water	537:45	0:0	8	;
water	538:12	0:0	8	}
if	540:12	543:12	6	(s -> mb_intra)
cond	540:15	540:18	7	s -> mb_intra
water	540:15	0:0	8	s
op	540:16	0:0	8	->
water	540:18	0:0	8	mb_intra
stmts	540:28	543:12	7	
water	540:28	0:0	8	{
water	541:16	0:0	8	s
op	541:17	0:0	8	->
water	541:19	0:0	8	p_mv_table
op	541:29	0:0	8	[
water	541:30	0:0	8	xy
op	541:32	0:0	8	]
op	541:33	0:0	8	[
water	541:34	0:0	8	0
op	541:35	0:0	8	]
op	541:36	0:0	8	=
water	541:37	0:0	8	0
water	541:38	0:0	8	;
water	542:16	0:0	8	s
op	542:17	0:0	8	->
water	542:19	0:0	8	p_mv_table
op	542:29	0:0	8	[
water	542:30	0:0	8	xy
op	542:32	0:0	8	]
op	542:33	0:0	8	[
water	542:34	0:0	8	1
op	542:35	0:0	8	]
op	542:36	0:0	8	=
water	542:37	0:0	8	0
water	542:38	0:0	8	;
water	543:12	0:0	8	}
if	544:12	558:12	6	(s -> avctx -> flags & AV_CODEC_FLAG_PSNR)
cond	544:16	544:34	7	s -> avctx -> flags & AV_CODEC_FLAG_PSNR
water	544:16	0:0	8	s
op	544:17	0:0	8	->
water	544:19	0:0	8	avctx
op	544:24	0:0	8	->
water	544:26	0:0	8	flags
op	544:32	0:0	8	&
water	544:34	0:0	8	AV_CODEC_FLAG_PSNR
stmts	544:54	558:12	7	
water	544:54	0:0	8	{
decl	545:16	545:25	8	int	w
op	545:21	0:0	8	=
water	545:23	0:0	8	16
decl	546:16	546:25	8	int	h
op	546:21	0:0	8	=
water	546:23	0:0	8	16
if	547:16	547:72	8	(s -> mb_x * 16 + 16 > s -> width)
cond	547:19	547:40	9	s -> mb_x * 16 + 16 > s -> width
water	547:19	0:0	10	s
op	547:20	0:0	10	->
water	547:22	0:0	10	mb_x
op	547:26	0:0	10	*
water	547:27	0:0	10	16
op	547:30	0:0	10	+
water	547:32	0:0	10	16
op	547:35	0:0	10	>
water	547:37	0:0	10	s
op	547:38	0:0	10	->
water	547:40	0:0	10	width
stmts	547:48	547:72	9	
water	547:48	0:0	10	w
op	547:49	0:0	10	=
water	547:51	0:0	10	s
op	547:52	0:0	10	->
water	547:54	0:0	10	width
op	547:60	0:0	10	-
water	547:62	0:0	10	s
op	547:63	0:0	10	->
water	547:65	0:0	10	mb_x
op	547:69	0:0	10	*
water	547:70	0:0	10	16
water	547:72	0:0	10	;
if	548:16	548:72	8	(s -> mb_y * 16 + 16 > s -> height)
cond	548:19	548:40	9	s -> mb_y * 16 + 16 > s -> height
water	548:19	0:0	10	s
op	548:20	0:0	10	->
water	548:22	0:0	10	mb_y
op	548:26	0:0	10	*
water	548:27	0:0	10	16
op	548:30	0:0	10	+
water	548:32	0:0	10	16
op	548:35	0:0	10	>
water	548:37	0:0	10	s
op	548:38	0:0	10	->
water	548:40	0:0	10	height
stmts	548:48	548:72	9	
water	548:48	0:0	10	h
op	548:49	0:0	10	=
water	548:51	0:0	10	s
op	548:52	0:0	10	->
water	548:54	0:0	10	height
op	548:60	0:0	10	-
water	548:62	0:0	10	s
op	548:63	0:0	10	->
water	548:65	0:0	10	mb_y
op	548:69	0:0	10	*
water	548:70	0:0	10	16
water	548:72	0:0	10	;
water	549:16	0:0	8	s
op	549:17	0:0	8	->
water	549:19	0:0	8	current_picture
op	549:34	0:0	8	.
water	549:35	0:0	8	error
op	549:40	0:0	8	[
water	549:41	0:0	8	0
op	549:42	0:0	8	]
op	549:44	0:0	8	+=
call	549:47	551:49	8	sse
arg	550:20	550:21	9	s
water	550:20	0:0	10	s
arg	550:23	550:86	9	s->new_picture.f->data[0]+s->mb_x*16+s->mb_y*s->linesize*16
water	550:23	0:0	10	s
op	550:24	0:0	10	->
water	550:26	0:0	10	new_picture
op	550:37	0:0	10	.
water	550:38	0:0	10	f
op	550:39	0:0	10	->
water	550:41	0:0	10	data
op	550:45	0:0	10	[
water	550:46	0:0	10	0
op	550:47	0:0	10	]
op	550:49	0:0	10	+
water	550:51	0:0	10	s
op	550:52	0:0	10	->
water	550:54	0:0	10	mb_x
op	550:58	0:0	10	*
water	550:59	0:0	10	16
op	550:62	0:0	10	+
water	550:64	0:0	10	s
op	550:65	0:0	10	->
water	550:67	0:0	10	mb_y
op	550:71	0:0	10	*
water	550:72	0:0	10	s
op	550:73	0:0	10	->
water	550:75	0:0	10	linesize
op	550:83	0:0	10	*
water	550:84	0:0	10	16
arg	551:20	551:30	9	s->dest[0]
water	551:20	0:0	10	s
op	551:21	0:0	10	->
water	551:23	0:0	10	dest
op	551:27	0:0	10	[
water	551:28	0:0	10	0
op	551:29	0:0	10	]
arg	551:32	551:33	9	w
water	551:32	0:0	10	w
arg	551:35	551:36	9	h
water	551:35	0:0	10	h
arg	551:38	551:49	9	s->linesize
water	551:38	0:0	10	s
op	551:39	0:0	10	->
water	551:41	0:0	10	linesize
water	551:50	0:0	8	;
water	552:16	0:0	8	s
op	552:17	0:0	8	->
water	552:19	0:0	8	current_picture
op	552:34	0:0	8	.
water	552:35	0:0	8	error
op	552:40	0:0	8	[
water	552:41	0:0	8	1
op	552:42	0:0	8	]
op	552:44	0:0	8	+=
call	552:47	554:73	8	sse
arg	553:20	553:21	9	s
water	553:20	0:0	10	s
arg	553:23	553:91	9	s->new_picture.f->data[1]+s->mb_x*8+s->mb_y*s->uvlinesize*chr_h
water	553:23	0:0	10	s
op	553:24	0:0	10	->
water	553:26	0:0	10	new_picture
op	553:37	0:0	10	.
water	553:38	0:0	10	f
op	553:39	0:0	10	->
water	553:41	0:0	10	data
op	553:45	0:0	10	[
water	553:46	0:0	10	1
op	553:47	0:0	10	]
op	553:49	0:0	10	+
water	553:51	0:0	10	s
op	553:52	0:0	10	->
water	553:54	0:0	10	mb_x
op	553:58	0:0	10	*
water	553:59	0:0	10	8
op	553:62	0:0	10	+
water	553:64	0:0	10	s
op	553:65	0:0	10	->
water	553:67	0:0	10	mb_y
op	553:71	0:0	10	*
water	553:72	0:0	10	s
op	553:73	0:0	10	->
water	553:75	0:0	10	uvlinesize
op	553:85	0:0	10	*
water	553:86	0:0	10	chr_h
arg	554:20	554:30	9	s->dest[1]
water	554:20	0:0	10	s
op	554:21	0:0	10	->
water	554:23	0:0	10	dest
op	554:27	0:0	10	[
water	554:28	0:0	10	1
op	554:29	0:0	10	]
arg	554:32	554:36	9	w>>1
water	554:32	0:0	10	w
op	554:33	0:0	10	>>
water	554:35	0:0	10	1
arg	554:38	554:58	9	h>>s->chroma_y_shift
water	554:38	0:0	10	h
op	554:39	0:0	10	>>
water	554:41	0:0	10	s
op	554:42	0:0	10	->
water	554:44	0:0	10	chroma_y_shift
arg	554:60	554:73	9	s->uvlinesize
water	554:60	0:0	10	s
op	554:61	0:0	10	->
water	554:63	0:0	10	uvlinesize
water	554:74	0:0	8	;
water	555:16	0:0	8	s
op	555:17	0:0	8	->
water	555:19	0:0	8	current_picture
op	555:34	0:0	8	.
water	555:35	0:0	8	error
op	555:40	0:0	8	[
water	555:41	0:0	8	2
op	555:42	0:0	8	]
op	555:44	0:0	8	+=
call	555:47	557:73	8	sse
arg	556:20	556:21	9	s
water	556:20	0:0	10	s
arg	556:23	556:91	9	s->new_picture.f->data[2]+s->mb_x*8+s->mb_y*s->uvlinesize*chr_h
water	556:23	0:0	10	s
op	556:24	0:0	10	->
water	556:26	0:0	10	new_picture
op	556:37	0:0	10	.
water	556:38	0:0	10	f
op	556:39	0:0	10	->
water	556:41	0:0	10	data
op	556:45	0:0	10	[
water	556:46	0:0	10	2
op	556:47	0:0	10	]
op	556:49	0:0	10	+
water	556:51	0:0	10	s
op	556:52	0:0	10	->
water	556:54	0:0	10	mb_x
op	556:58	0:0	10	*
water	556:59	0:0	10	8
op	556:62	0:0	10	+
water	556:64	0:0	10	s
op	556:65	0:0	10	->
water	556:67	0:0	10	mb_y
op	556:71	0:0	10	*
water	556:72	0:0	10	s
op	556:73	0:0	10	->
water	556:75	0:0	10	uvlinesize
op	556:85	0:0	10	*
water	556:86	0:0	10	chr_h
arg	557:20	557:30	9	s->dest[2]
water	557:20	0:0	10	s
op	557:21	0:0	10	->
water	557:23	0:0	10	dest
op	557:27	0:0	10	[
water	557:28	0:0	10	2
op	557:29	0:0	10	]
arg	557:32	557:36	9	w>>1
water	557:32	0:0	10	w
op	557:33	0:0	10	>>
water	557:35	0:0	10	1
arg	557:38	557:58	9	h>>s->chroma_y_shift
water	557:38	0:0	10	h
op	557:39	0:0	10	>>
water	557:41	0:0	10	s
op	557:42	0:0	10	->
water	557:44	0:0	10	chroma_y_shift
arg	557:60	557:73	9	s->uvlinesize
water	557:60	0:0	10	s
op	557:61	0:0	10	->
water	557:63	0:0	10	uvlinesize
water	557:74	0:0	8	;
water	558:12	0:0	8	}
if	559:12	562:12	6	(s -> loop_filter)
cond	559:15	559:18	7	s -> loop_filter
water	559:15	0:0	8	s
op	559:16	0:0	8	->
water	559:18	0:0	8	loop_filter
stmts	559:30	562:12	7	
water	559:30	0:0	8	{
if	560:16	561:42	8	(CONFIG_H263_ENCODER && s -> out_format == FMT_H263)
cond	560:19	560:59	9	CONFIG_H263_ENCODER && s -> out_format == FMT_H263
water	560:19	0:0	10	CONFIG_H263_ENCODER
op	560:39	0:0	10	&&
water	560:42	0:0	10	s
op	560:43	0:0	10	->
water	560:45	0:0	10	out_format
op	560:56	0:0	10	==
water	560:59	0:0	10	FMT_H263
stmts	561:20	561:42	9	
call	561:20	561:41	10	ff_h263_loop_filter
arg	561:40	561:41	11	s
water	561:40	0:0	12	s
water	561:42	0:0	10	;
water	562:12	0:0	8	}
call	563:12	564:76	6	ff_dlog
arg	563:20	563:28	7	s->avctx
water	563:20	0:0	8	s
op	563:21	0:0	8	->
water	563:23	0:0	8	avctx
arg	563:30	563:47	7	"MB %d %d bits\n"
water	563:30	0:0	8	"MB %d %d bits\n"
arg	564:20	564:52	7	s->mb_x+s->mb_y*s->mb_stride
water	564:20	0:0	8	s
op	564:21	0:0	8	->
water	564:23	0:0	8	mb_x
op	564:28	0:0	8	+
water	564:30	0:0	8	s
op	564:31	0:0	8	->
water	564:33	0:0	8	mb_y
op	564:38	0:0	8	*
water	564:40	0:0	8	s
op	564:41	0:0	8	->
water	564:43	0:0	8	mb_stride
arg	564:54	564:76	7	put_bits_count(&s->pb)
call	564:54	564:75	8	put_bits_count
arg	564:69	564:75	9	&s->pb
op	564:69	0:0	10	&
water	564:70	0:0	10	s
op	564:71	0:0	10	->
water	564:73	0:0	10	pb
water	564:77	0:0	6	;
water	565:8	0:0	6	}
water	566:4	0:0	4	}
if	568:4	569:39	2	(CONFIG_MSMPEG4_ENCODER && s -> msmpeg4_version && s -> msmpeg4_version < 4 && s -> pict_type == AV_PICTURE_TYPE_I)
cond	568:8	568:96	3	CONFIG_MSMPEG4_ENCODER && s -> msmpeg4_version && s -> msmpeg4_version < 4 && s -> pict_type == AV_PICTURE_TYPE_I
water	568:8	0:0	4	CONFIG_MSMPEG4_ENCODER
op	568:31	0:0	4	&&
water	568:34	0:0	4	s
op	568:35	0:0	4	->
water	568:37	0:0	4	msmpeg4_version
op	568:53	0:0	4	&&
water	568:56	0:0	4	s
op	568:57	0:0	4	->
water	568:59	0:0	4	msmpeg4_version
op	568:74	0:0	4	<
water	568:75	0:0	4	4
op	568:77	0:0	4	&&
water	568:80	0:0	4	s
op	568:81	0:0	4	->
water	568:83	0:0	4	pict_type
op	568:93	0:0	4	==
water	568:96	0:0	4	AV_PICTURE_TYPE_I
stmts	569:8	569:39	3	
call	569:8	569:38	4	ff_msmpeg4_encode_ext_header
arg	569:37	569:38	5	s
water	569:37	0:0	6	s
water	569:39	0:0	4	;
call	570:4	570:21	2	write_slice_end
arg	570:20	570:21	3	s
water	570:20	0:0	4	s
water	570:22	0:0	2	;
if	572:4	578:4	2	(s -> avctx -> rtp_callback)
cond	572:8	572:18	3	s -> avctx -> rtp_callback
water	572:8	0:0	4	s
op	572:9	0:0	4	->
water	572:11	0:0	4	avctx
op	572:16	0:0	4	->
water	572:18	0:0	4	rtp_callback
stmts	572:32	578:4	3	
water	572:32	0:0	4	{
decl	573:8	573:76	4	int	number_mb
op	573:22	0:0	4	=
water	573:24	0:0	4	(
water	573:25	0:0	4	mb_y
op	573:30	0:0	4	-
water	573:32	0:0	4	s
op	573:33	0:0	4	->
water	573:35	0:0	4	resync_mb_y
water	573:46	0:0	4	)
op	573:47	0:0	4	*
water	573:48	0:0	4	s
op	573:49	0:0	4	->
water	573:51	0:0	4	mb_width
op	573:60	0:0	4	-
water	573:62	0:0	4	s
op	573:63	0:0	4	->
water	573:65	0:0	4	resync_mb_x
water	574:8	0:0	4	pdif
op	574:13	0:0	4	=
call	574:15	574:34	4	put_bits_ptr
arg	574:28	574:34	5	&s->pb
op	574:28	0:0	6	&
water	574:29	0:0	6	s
op	574:30	0:0	6	->
water	574:32	0:0	6	pb
op	574:36	0:0	4	-
water	574:38	0:0	4	s
op	574:39	0:0	4	->
water	574:41	0:0	4	ptr_lastgob
water	574:52	0:0	4	;
call	576:8	576:15	4	emms_c
water	576:16	0:0	4	;
call	577:8	577:72	4	s->avctx->rtp_callback
arg	577:31	577:39	5	s->avctx
water	577:31	0:0	6	s
op	577:32	0:0	6	->
water	577:34	0:0	6	avctx
arg	577:41	577:55	5	s->ptr_lastgob
water	577:41	0:0	6	s
op	577:42	0:0	6	->
water	577:44	0:0	6	ptr_lastgob
arg	577:57	577:61	5	pdif
water	577:57	0:0	6	pdif
arg	577:63	577:72	5	number_mb
water	577:63	0:0	6	number_mb
water	577:73	0:0	4	;
water	578:4	0:0	4	}
return	579:4	579:12	2	0
water	579:11	0:0	3	0
