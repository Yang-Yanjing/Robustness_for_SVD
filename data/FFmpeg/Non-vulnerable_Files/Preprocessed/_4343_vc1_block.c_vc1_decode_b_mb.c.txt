func	1:0	146:0	0	static void	vc1_decode_b_mb
params	1:27	0:0	1	
param	1:28	1:41	2	VC1Context *	v
stmnts	0:0	145:4	1	
decl	3:4	3:29	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	v
op	3:26	0:0	2	->
water	3:28	0:0	2	s
decl	4:4	4:30	2	GetBitContext	*gb
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	gb
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
decl	6:4	6:49	2	int	mb_pos
op	6:15	0:0	2	=
water	6:17	0:0	2	s
op	6:18	0:0	2	->
water	6:20	0:0	2	mb_x
op	6:25	0:0	2	+
water	6:27	0:0	2	s
op	6:28	0:0	2	->
water	6:30	0:0	2	mb_y
op	6:35	0:0	2	*
water	6:37	0:0	2	s
op	6:38	0:0	2	->
water	6:40	0:0	2	mb_stride
decl	7:4	7:15	2	int	cbp
op	7:12	0:0	2	=
water	7:14	0:0	2	0
decl	8:4	8:22	2	int	mqdiff
water	8:14	0:0	2	,
decl	8:4	8:22	2	int	mquant
decl	9:4	9:23	2	int	ttmb
op	9:13	0:0	2	=
water	9:15	0:0	2	v
op	9:16	0:0	2	->
water	9:18	0:0	2	ttfrm
decl	10:4	10:25	2	int	mb_has_coeffs
op	10:22	0:0	2	=
water	10:24	0:0	2	0
decl	11:4	11:21	2	int	index
water	11:13	0:0	2	,
decl	11:4	11:21	2	int	index1
decl	12:4	12:17	2	int	val
water	12:11	0:0	2	,
decl	12:4	12:17	2	int	sign
decl	13:4	13:23	2	int	first_block
op	13:20	0:0	2	=
water	13:22	0:0	2	1
decl	14:4	14:20	2	int	dst_idx
water	14:15	0:0	2	,
decl	14:4	14:20	2	int	off
decl	15:4	15:23	2	int	skipped
water	15:15	0:0	2	,
decl	15:4	15:23	2	int	direct
decl	16:4	16:26	2	int	dmv_x[2]
water	16:16	0:0	2	,
decl	16:4	16:26	2	int	dmv_y[2]
decl	17:4	17:35	2	int	bmvtype
op	17:16	0:0	2	=
water	17:18	0:0	2	BMV_TYPE_BACKWARD
water	18:4	0:0	2	mquant
op	18:16	0:0	2	=
water	18:18	0:0	2	v
op	18:19	0:0	2	->
water	18:21	0:0	2	pq
water	18:23	0:0	2	;
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	mb_intra
op	19:16	0:0	2	=
water	19:18	0:0	2	0
water	19:19	0:0	2	;
if	20:4	21:30	2	(v -> dmb_is_raw)
cond	20:8	20:11	3	v -> dmb_is_raw
water	20:8	0:0	4	v
op	20:9	0:0	4	->
water	20:11	0:0	4	dmb_is_raw
stmts	21:8	21:30	3	
water	21:8	0:0	4	direct
op	21:15	0:0	4	=
call	21:17	21:29	4	get_bits1
arg	21:27	21:29	5	gb
water	21:27	0:0	6	gb
water	21:30	0:0	4	;
else	22:4	23:43	2
stmts	23:8	23:43	3	
water	23:8	0:0	4	direct
op	23:15	0:0	4	=
water	23:17	0:0	4	v
op	23:18	0:0	4	->
water	23:20	0:0	4	direct_mb_plane
op	23:35	0:0	4	[
water	23:36	0:0	4	mb_pos
op	23:42	0:0	4	]
water	23:43	0:0	4	;
if	24:4	25:31	2	(v -> skip_is_raw)
cond	24:8	24:11	3	v -> skip_is_raw
water	24:8	0:0	4	v
op	24:9	0:0	4	->
water	24:11	0:0	4	skip_is_raw
stmts	25:8	25:31	3	
water	25:8	0:0	4	skipped
op	25:16	0:0	4	=
call	25:18	25:30	4	get_bits1
arg	25:28	25:30	5	gb
water	25:28	0:0	6	gb
water	25:31	0:0	4	;
else	26:4	27:43	2
stmts	27:8	27:43	3	
water	27:8	0:0	4	skipped
op	27:16	0:0	4	=
water	27:18	0:0	4	v
op	27:19	0:0	4	->
water	27:21	0:0	4	s
op	27:22	0:0	4	.
water	27:23	0:0	4	mbskip_table
op	27:35	0:0	4	[
water	27:36	0:0	4	mb_pos
op	27:42	0:0	4	]
water	27:43	0:0	4	;
water	28:4	0:0	2	dmv_x
op	28:9	0:0	2	[
water	28:10	0:0	2	0
op	28:11	0:0	2	]
op	28:13	0:0	2	=
water	28:15	0:0	2	dmv_x
op	28:20	0:0	2	[
water	28:21	0:0	2	1
op	28:22	0:0	2	]
op	28:24	0:0	2	=
water	28:26	0:0	2	dmv_y
op	28:31	0:0	2	[
water	28:32	0:0	2	0
op	28:33	0:0	2	]
op	28:35	0:0	2	=
water	28:37	0:0	2	dmv_y
op	28:42	0:0	2	[
water	28:43	0:0	2	1
op	28:44	0:0	2	]
op	28:46	0:0	2	=
water	28:48	0:0	2	0
water	28:49	0:0	2	;
for	29:4	32:4	2	(i = 0 ;i < 6;i ++)
forinit	29:9	29:14	3	i = 0 ;
water	29:9	0:0	4	i
op	29:11	0:0	4	=
water	29:13	0:0	4	0
water	29:14	0:0	4	;
cond	29:16	29:20	3	i < 6
water	29:16	0:0	4	i
op	29:18	0:0	4	<
water	29:20	0:0	4	6
forexpr	29:23	29:24	3	i ++
water	29:23	0:0	4	i
op	29:24	0:0	4	++
stmts	29:28	32:4	3	
water	29:28	0:0	4	{
water	30:8	0:0	4	v
op	30:9	0:0	4	->
water	30:11	0:0	4	mb_type
op	30:18	0:0	4	[
water	30:19	0:0	4	0
op	30:20	0:0	4	]
op	30:21	0:0	4	[
water	30:22	0:0	4	s
op	30:23	0:0	4	->
water	30:25	0:0	4	block_index
op	30:36	0:0	4	[
water	30:37	0:0	4	i
op	30:38	0:0	4	]
op	30:39	0:0	4	]
op	30:41	0:0	4	=
water	30:43	0:0	4	0
water	30:44	0:0	4	;
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	dc_val
op	31:17	0:0	4	[
water	31:18	0:0	4	0
op	31:19	0:0	4	]
op	31:20	0:0	4	[
water	31:21	0:0	4	s
op	31:22	0:0	4	->
water	31:24	0:0	4	block_index
op	31:35	0:0	4	[
water	31:36	0:0	4	i
op	31:37	0:0	4	]
op	31:38	0:0	4	]
op	31:41	0:0	4	=
water	31:43	0:0	4	0
water	31:44	0:0	4	;
water	32:4	0:0	4	}
water	33:4	0:0	2	s
op	33:5	0:0	2	->
water	33:7	0:0	2	current_picture
op	33:22	0:0	2	.
water	33:23	0:0	2	qscale_table
op	33:35	0:0	2	[
water	33:36	0:0	2	mb_pos
op	33:42	0:0	2	]
op	33:44	0:0	2	=
water	33:46	0:0	2	0
water	33:47	0:0	2	;
if	34:4	54:4	2	(! direct)
cond	34:8	34:9	3	! direct
op	34:8	0:0	4	!
water	34:9	0:0	4	direct
stmts	34:17	54:4	3	
water	34:17	0:0	4	{
if	35:8	39:8	4	(! skipped)
cond	35:12	35:13	5	! skipped
op	35:12	0:0	6	!
water	35:13	0:0	6	skipped
stmts	35:22	39:8	5	
water	35:22	0:0	6	{
call	36:12	36:41	6	GET_MVDATA
arg	36:23	36:31	7	dmv_x[0]
water	36:23	0:0	8	dmv_x
op	36:28	0:0	8	[
water	36:29	0:0	8	0
op	36:30	0:0	8	]
arg	36:33	36:41	7	dmv_y[0]
water	36:33	0:0	8	dmv_y
op	36:38	0:0	8	[
water	36:39	0:0	8	0
op	36:40	0:0	8	]
water	36:42	0:0	6	;
water	37:12	0:0	6	dmv_x
op	37:17	0:0	6	[
water	37:18	0:0	6	1
op	37:19	0:0	6	]
op	37:21	0:0	6	=
water	37:23	0:0	6	dmv_x
op	37:28	0:0	6	[
water	37:29	0:0	6	0
op	37:30	0:0	6	]
water	37:31	0:0	6	;
water	38:12	0:0	6	dmv_y
op	38:17	0:0	6	[
water	38:18	0:0	6	1
op	38:19	0:0	6	]
op	38:21	0:0	6	=
water	38:23	0:0	6	dmv_y
op	38:28	0:0	6	[
water	38:29	0:0	6	0
op	38:30	0:0	6	]
water	38:31	0:0	6	;
water	39:8	0:0	6	}
if	40:8	53:8	4	(skipped || ! s -> mb_intra)
cond	40:12	40:27	5	skipped || ! s -> mb_intra
water	40:12	0:0	6	skipped
op	40:20	0:0	6	||
op	40:23	0:0	6	!
water	40:24	0:0	6	s
op	40:25	0:0	6	->
water	40:27	0:0	6	mb_intra
stmts	40:37	53:8	5	
water	40:37	0:0	6	{
water	41:12	0:0	6	bmvtype
op	41:20	0:0	6	=
call	41:22	41:34	6	decode012
arg	41:32	41:34	7	gb
water	41:32	0:0	8	gb
water	41:35	0:0	6	;
switch	42:12	52:12	6	(bmvtype)
cond	42:20	42:20	7	bmvtype
water	42:20	0:0	8	bmvtype
stmts	42:29	52:12	7	
water	42:29	0:0	8	{
label	43:12	43:18	8	case 0 :
water	44:16	0:0	8	bmvtype
op	44:24	0:0	8	=
water	44:26	0:0	8	(
water	44:27	0:0	8	v
op	44:28	0:0	8	->
water	44:30	0:0	8	bfraction
op	44:40	0:0	8	>=
water	44:43	0:0	8	(
water	44:44	0:0	8	B_FRACTION_DEN
op	44:58	0:0	8	/
water	44:59	0:0	8	2
water	44:60	0:0	8	)
water	44:61	0:0	8	)
water	44:63	0:0	8	?
water	44:65	0:0	8	BMV_TYPE_BACKWARD
water	44:83	0:0	8	:
water	44:85	0:0	8	BMV_TYPE_FORWARD
water	44:101	0:0	8	;
break	45:16	45:21	8	
label	46:12	46:18	8	case 1 :
water	47:16	0:0	8	bmvtype
op	47:24	0:0	8	=
water	47:26	0:0	8	(
water	47:27	0:0	8	v
op	47:28	0:0	8	->
water	47:30	0:0	8	bfraction
op	47:40	0:0	8	>=
water	47:43	0:0	8	(
water	47:44	0:0	8	B_FRACTION_DEN
op	47:58	0:0	8	/
water	47:59	0:0	8	2
water	47:60	0:0	8	)
water	47:61	0:0	8	)
water	47:63	0:0	8	?
water	47:65	0:0	8	BMV_TYPE_FORWARD
water	47:82	0:0	8	:
water	47:84	0:0	8	BMV_TYPE_BACKWARD
water	47:101	0:0	8	;
break	48:16	48:21	8	
label	49:12	49:18	8	case 2 :
water	50:16	0:0	8	bmvtype
op	50:25	0:0	8	=
water	50:27	0:0	8	BMV_TYPE_INTERPOLATED
water	50:48	0:0	8	;
water	51:16	0:0	8	dmv_x
op	51:21	0:0	8	[
water	51:22	0:0	8	0
op	51:23	0:0	8	]
op	51:25	0:0	8	=
water	51:27	0:0	8	dmv_y
op	51:32	0:0	8	[
water	51:33	0:0	8	0
op	51:34	0:0	8	]
op	51:36	0:0	8	=
water	51:38	0:0	8	0
water	51:39	0:0	8	;
water	52:12	0:0	8	}
water	53:8	0:0	6	}
water	54:4	0:0	4	}
for	55:4	56:54	2	(i = 0 ;i < 6;i ++)
forinit	55:9	55:14	3	i = 0 ;
water	55:9	0:0	4	i
op	55:11	0:0	4	=
water	55:13	0:0	4	0
water	55:14	0:0	4	;
cond	55:16	55:20	3	i < 6
water	55:16	0:0	4	i
op	55:18	0:0	4	<
water	55:20	0:0	4	6
forexpr	55:23	55:24	3	i ++
water	55:23	0:0	4	i
op	55:24	0:0	4	++
stmts	56:8	56:54	3	
water	56:8	0:0	4	v
op	56:9	0:0	4	->
water	56:11	0:0	4	mb_type
op	56:18	0:0	4	[
water	56:19	0:0	4	0
op	56:20	0:0	4	]
op	56:21	0:0	4	[
water	56:22	0:0	4	s
op	56:23	0:0	4	->
water	56:25	0:0	4	block_index
op	56:36	0:0	4	[
water	56:37	0:0	4	i
op	56:38	0:0	4	]
op	56:39	0:0	4	]
op	56:41	0:0	4	=
water	56:43	0:0	4	s
op	56:44	0:0	4	->
water	56:46	0:0	4	mb_intra
water	56:54	0:0	4	;
if	57:4	63:4	2	(skipped)
cond	57:8	57:8	3	skipped
water	57:8	0:0	4	skipped
stmts	57:17	63:4	3	
water	57:17	0:0	4	{
if	58:8	59:43	4	(direct)
cond	58:12	58:12	5	direct
water	58:12	0:0	6	direct
stmts	59:12	59:43	5	
water	59:12	0:0	6	bmvtype
op	59:20	0:0	6	=
water	59:22	0:0	6	BMV_TYPE_INTERPOLATED
water	59:43	0:0	6	;
call	60:8	60:57	4	ff_vc1_pred_b_mv
arg	60:25	60:26	5	v
water	60:25	0:0	6	v
arg	60:28	60:33	5	dmv_x
water	60:28	0:0	6	dmv_x
arg	60:35	60:40	5	dmv_y
water	60:35	0:0	6	dmv_y
arg	60:42	60:48	5	direct
water	60:42	0:0	6	direct
arg	60:50	60:57	5	bmvtype
water	60:50	0:0	6	bmvtype
water	60:58	0:0	4	;
call	61:8	61:49	4	vc1_b_mc
arg	61:17	61:18	5	v
water	61:17	0:0	6	v
arg	61:20	61:25	5	dmv_x
water	61:20	0:0	6	dmv_x
arg	61:27	61:32	5	dmv_y
water	61:27	0:0	6	dmv_y
arg	61:34	61:40	5	direct
water	61:34	0:0	6	direct
arg	61:42	61:49	5	bmvtype
water	61:42	0:0	6	bmvtype
water	61:50	0:0	4	;
return	62:8	62:14	4	
water	63:4	0:0	4	}
if	64:4	74:4	2	(direct)
cond	64:8	64:8	3	direct
water	64:8	0:0	4	direct
stmts	64:16	74:4	3	
water	64:16	0:0	4	{
water	65:8	0:0	4	cbp
op	65:12	0:0	4	=
call	65:14	65:77	4	get_vlc2
arg	65:23	65:31	5	&v->s.gb
op	65:23	0:0	6	&
water	65:24	0:0	6	v
op	65:25	0:0	6	->
water	65:27	0:0	6	s
op	65:28	0:0	6	.
water	65:29	0:0	6	gb
arg	65:33	65:52	5	v->cbpcy_vlc->table
water	65:33	0:0	6	v
op	65:34	0:0	6	->
water	65:36	0:0	6	cbpcy_vlc
op	65:45	0:0	6	->
water	65:47	0:0	6	table
arg	65:54	65:74	5	VC1_CBPCY_P_VLC_BITS
water	65:54	0:0	6	VC1_CBPCY_P_VLC_BITS
arg	65:76	65:77	5	2
water	65:76	0:0	6	2
water	65:78	0:0	4	;
call	66:8	66:19	4	GET_MQUANT
water	66:20	0:0	4	;
water	67:8	0:0	4	s
op	67:9	0:0	4	->
water	67:11	0:0	4	mb_intra
op	67:20	0:0	4	=
water	67:22	0:0	4	0
water	67:23	0:0	4	;
water	68:8	0:0	4	s
op	68:9	0:0	4	->
water	68:11	0:0	4	current_picture
op	68:26	0:0	4	.
water	68:27	0:0	4	qscale_table
op	68:39	0:0	4	[
water	68:40	0:0	4	mb_pos
op	68:46	0:0	4	]
op	68:48	0:0	4	=
water	68:50	0:0	4	mquant
water	68:56	0:0	4	;
if	69:8	70:89	4	(! v -> ttmbf)
cond	69:12	69:16	5	! v -> ttmbf
op	69:12	0:0	6	!
water	69:13	0:0	6	v
op	69:14	0:0	6	->
water	69:16	0:0	6	ttmbf
stmts	70:12	70:89	5	
water	70:12	0:0	6	ttmb
op	70:17	0:0	6	=
call	70:19	70:88	6	get_vlc2
arg	70:28	70:30	7	gb
water	70:28	0:0	8	gb
arg	70:32	70:66	7	ff_vc1_ttmb_vlc[v->tt_index].table
water	70:32	0:0	8	ff_vc1_ttmb_vlc
op	70:47	0:0	8	[
water	70:48	0:0	8	v
op	70:49	0:0	8	->
water	70:51	0:0	8	tt_index
op	70:59	0:0	8	]
op	70:60	0:0	8	.
water	70:61	0:0	8	table
arg	70:68	70:85	7	VC1_TTMB_VLC_BITS
water	70:68	0:0	8	VC1_TTMB_VLC_BITS
arg	70:87	70:88	7	2
water	70:87	0:0	8	2
water	70:89	0:0	6	;
water	71:8	0:0	4	dmv_x
op	71:13	0:0	4	[
water	71:14	0:0	4	0
op	71:15	0:0	4	]
op	71:17	0:0	4	=
water	71:19	0:0	4	dmv_y
op	71:24	0:0	4	[
water	71:25	0:0	4	0
op	71:26	0:0	4	]
op	71:28	0:0	4	=
water	71:30	0:0	4	dmv_x
op	71:35	0:0	4	[
water	71:36	0:0	4	1
op	71:37	0:0	4	]
op	71:39	0:0	4	=
water	71:41	0:0	4	dmv_y
op	71:46	0:0	4	[
water	71:47	0:0	4	1
op	71:48	0:0	4	]
op	71:50	0:0	4	=
water	71:52	0:0	4	0
water	71:53	0:0	4	;
call	72:8	72:57	4	ff_vc1_pred_b_mv
arg	72:25	72:26	5	v
water	72:25	0:0	6	v
arg	72:28	72:33	5	dmv_x
water	72:28	0:0	6	dmv_x
arg	72:35	72:40	5	dmv_y
water	72:35	0:0	6	dmv_y
arg	72:42	72:48	5	direct
water	72:42	0:0	6	direct
arg	72:50	72:57	5	bmvtype
water	72:50	0:0	6	bmvtype
water	72:58	0:0	4	;
call	73:8	73:49	4	vc1_b_mc
arg	73:17	73:18	5	v
water	73:17	0:0	6	v
arg	73:20	73:25	5	dmv_x
water	73:20	0:0	6	dmv_x
arg	73:27	73:32	5	dmv_y
water	73:27	0:0	6	dmv_y
arg	73:34	73:40	5	direct
water	73:34	0:0	6	direct
arg	73:42	73:49	5	bmvtype
water	73:42	0:0	6	bmvtype
water	73:50	0:0	4	;
water	74:4	0:0	4	}
else	74:6	109:4	2
stmts	74:11	109:4	3	
water	74:11	0:0	4	{
if	75:8	80:8	4	(! mb_has_coeffs && ! s -> mb_intra)
cond	75:12	75:34	5	! mb_has_coeffs && ! s -> mb_intra
op	75:12	0:0	6	!
water	75:13	0:0	6	mb_has_coeffs
op	75:27	0:0	6	&&
op	75:30	0:0	6	!
water	75:31	0:0	6	s
op	75:32	0:0	6	->
water	75:34	0:0	6	mb_intra
stmts	75:44	80:8	5	
water	75:44	0:0	6	{
call	77:12	77:61	6	ff_vc1_pred_b_mv
arg	77:29	77:30	7	v
water	77:29	0:0	8	v
arg	77:32	77:37	7	dmv_x
water	77:32	0:0	8	dmv_x
arg	77:39	77:44	7	dmv_y
water	77:39	0:0	8	dmv_y
arg	77:46	77:52	7	direct
water	77:46	0:0	8	direct
arg	77:54	77:61	7	bmvtype
water	77:54	0:0	8	bmvtype
water	77:62	0:0	6	;
call	78:12	78:53	6	vc1_b_mc
arg	78:21	78:22	7	v
water	78:21	0:0	8	v
arg	78:24	78:29	7	dmv_x
water	78:24	0:0	8	dmv_x
arg	78:31	78:36	7	dmv_y
water	78:31	0:0	8	dmv_y
arg	78:38	78:44	7	direct
water	78:38	0:0	8	direct
arg	78:46	78:53	7	bmvtype
water	78:46	0:0	8	bmvtype
water	78:54	0:0	6	;
return	79:12	79:18	6	
water	80:8	0:0	6	}
if	81:8	87:8	4	(s -> mb_intra && ! mb_has_coeffs)
cond	81:12	81:28	5	s -> mb_intra && ! mb_has_coeffs
water	81:12	0:0	6	s
op	81:13	0:0	6	->
water	81:15	0:0	6	mb_intra
op	81:24	0:0	6	&&
op	81:27	0:0	6	!
water	81:28	0:0	6	mb_has_coeffs
stmts	81:43	87:8	5	
water	81:43	0:0	6	{
call	82:12	82:23	6	GET_MQUANT
water	82:24	0:0	6	;
water	83:12	0:0	6	s
op	83:13	0:0	6	->
water	83:15	0:0	6	current_picture
op	83:30	0:0	6	.
water	83:31	0:0	6	qscale_table
op	83:43	0:0	6	[
water	83:44	0:0	6	mb_pos
op	83:50	0:0	6	]
op	83:52	0:0	6	=
water	83:54	0:0	6	mquant
water	83:60	0:0	6	;
water	84:12	0:0	6	s
op	84:13	0:0	6	->
water	84:15	0:0	6	ac_pred
op	84:23	0:0	6	=
call	84:25	84:37	6	get_bits1
arg	84:35	84:37	7	gb
water	84:35	0:0	8	gb
water	84:38	0:0	6	;
water	85:12	0:0	6	cbp
op	85:16	0:0	6	=
water	85:18	0:0	6	0
water	85:19	0:0	6	;
call	86:12	86:61	6	ff_vc1_pred_b_mv
arg	86:29	86:30	7	v
water	86:29	0:0	8	v
arg	86:32	86:37	7	dmv_x
water	86:32	0:0	8	dmv_x
arg	86:39	86:44	7	dmv_y
water	86:39	0:0	8	dmv_y
arg	86:46	86:52	7	direct
water	86:46	0:0	8	direct
arg	86:54	86:61	7	bmvtype
water	86:54	0:0	8	bmvtype
water	86:62	0:0	6	;
water	87:8	0:0	6	}
else	87:10	108:8	4
stmts	87:15	108:8	5	
water	87:15	0:0	6	{
if	88:12	96:12	6	(bmvtype == BMV_TYPE_INTERPOLATED)
cond	88:16	88:27	7	bmvtype == BMV_TYPE_INTERPOLATED
water	88:16	0:0	8	bmvtype
op	88:24	0:0	8	==
water	88:27	0:0	8	BMV_TYPE_INTERPOLATED
stmts	88:50	96:12	7	
water	88:50	0:0	8	{
call	89:16	89:45	8	GET_MVDATA
arg	89:27	89:35	9	dmv_x[0]
water	89:27	0:0	10	dmv_x
op	89:32	0:0	10	[
water	89:33	0:0	10	0
op	89:34	0:0	10	]
arg	89:37	89:45	9	dmv_y[0]
water	89:37	0:0	10	dmv_y
op	89:42	0:0	10	[
water	89:43	0:0	10	0
op	89:44	0:0	10	]
water	89:46	0:0	8	;
if	90:16	95:16	8	(! mb_has_coeffs)
cond	90:20	90:21	9	! mb_has_coeffs
op	90:20	0:0	10	!
water	90:21	0:0	10	mb_has_coeffs
stmts	90:36	95:16	9	
water	90:36	0:0	10	{
call	92:20	92:69	10	ff_vc1_pred_b_mv
arg	92:37	92:38	11	v
water	92:37	0:0	12	v
arg	92:40	92:45	11	dmv_x
water	92:40	0:0	12	dmv_x
arg	92:47	92:52	11	dmv_y
water	92:47	0:0	12	dmv_y
arg	92:54	92:60	11	direct
water	92:54	0:0	12	direct
arg	92:62	92:69	11	bmvtype
water	92:62	0:0	12	bmvtype
water	92:70	0:0	10	;
call	93:20	93:61	10	vc1_b_mc
arg	93:29	93:30	11	v
water	93:29	0:0	12	v
arg	93:32	93:37	11	dmv_x
water	93:32	0:0	12	dmv_x
arg	93:39	93:44	11	dmv_y
water	93:39	0:0	12	dmv_y
arg	93:46	93:52	11	direct
water	93:46	0:0	12	direct
arg	93:54	93:61	11	bmvtype
water	93:54	0:0	12	bmvtype
water	93:62	0:0	10	;
return	94:20	94:26	10	
water	95:16	0:0	10	}
water	96:12	0:0	8	}
call	97:12	97:61	6	ff_vc1_pred_b_mv
arg	97:29	97:30	7	v
water	97:29	0:0	8	v
arg	97:32	97:37	7	dmv_x
water	97:32	0:0	8	dmv_x
arg	97:39	97:44	7	dmv_y
water	97:39	0:0	8	dmv_y
arg	97:46	97:52	7	direct
water	97:46	0:0	8	direct
arg	97:54	97:61	7	bmvtype
water	97:54	0:0	8	bmvtype
water	97:62	0:0	6	;
if	98:12	100:12	6	(! s -> mb_intra)
cond	98:16	98:20	7	! s -> mb_intra
op	98:16	0:0	8	!
water	98:17	0:0	8	s
op	98:18	0:0	8	->
water	98:20	0:0	8	mb_intra
stmts	98:30	100:12	7	
water	98:30	0:0	8	{
call	99:16	99:57	8	vc1_b_mc
arg	99:25	99:26	9	v
water	99:25	0:0	10	v
arg	99:28	99:33	9	dmv_x
water	99:28	0:0	10	dmv_x
arg	99:35	99:40	9	dmv_y
water	99:35	0:0	10	dmv_y
arg	99:42	99:48	9	direct
water	99:42	0:0	10	direct
arg	99:50	99:57	9	bmvtype
water	99:50	0:0	10	bmvtype
water	99:58	0:0	8	;
water	100:12	0:0	8	}
if	101:12	102:42	6	(s -> mb_intra)
cond	101:16	101:19	7	s -> mb_intra
water	101:16	0:0	8	s
op	101:17	0:0	8	->
water	101:19	0:0	8	mb_intra
stmts	102:16	102:42	7	
water	102:16	0:0	8	s
op	102:17	0:0	8	->
water	102:19	0:0	8	ac_pred
op	102:27	0:0	8	=
call	102:29	102:41	8	get_bits1
arg	102:39	102:41	9	gb
water	102:39	0:0	10	gb
water	102:42	0:0	8	;
water	103:12	0:0	6	cbp
op	103:16	0:0	6	=
call	103:18	103:81	6	get_vlc2
arg	103:27	103:35	7	&v->s.gb
op	103:27	0:0	8	&
water	103:28	0:0	8	v
op	103:29	0:0	8	->
water	103:31	0:0	8	s
op	103:32	0:0	8	.
water	103:33	0:0	8	gb
arg	103:37	103:56	7	v->cbpcy_vlc->table
water	103:37	0:0	8	v
op	103:38	0:0	8	->
water	103:40	0:0	8	cbpcy_vlc
op	103:49	0:0	8	->
water	103:51	0:0	8	table
arg	103:58	103:78	7	VC1_CBPCY_P_VLC_BITS
water	103:58	0:0	8	VC1_CBPCY_P_VLC_BITS
arg	103:80	103:81	7	2
water	103:80	0:0	8	2
water	103:82	0:0	6	;
call	104:12	104:23	6	GET_MQUANT
water	104:24	0:0	6	;
water	105:12	0:0	6	s
op	105:13	0:0	6	->
water	105:15	0:0	6	current_picture
op	105:30	0:0	6	.
water	105:31	0:0	6	qscale_table
op	105:43	0:0	6	[
water	105:44	0:0	6	mb_pos
op	105:50	0:0	6	]
op	105:52	0:0	6	=
water	105:54	0:0	6	mquant
water	105:60	0:0	6	;
if	106:12	107:93	6	(! v -> ttmbf && ! s -> mb_intra && mb_has_coeffs)
cond	106:16	106:45	7	! v -> ttmbf && ! s -> mb_intra && mb_has_coeffs
op	106:16	0:0	8	!
water	106:17	0:0	8	v
op	106:18	0:0	8	->
water	106:20	0:0	8	ttmbf
op	106:26	0:0	8	&&
op	106:29	0:0	8	!
water	106:30	0:0	8	s
op	106:31	0:0	8	->
water	106:33	0:0	8	mb_intra
op	106:42	0:0	8	&&
water	106:45	0:0	8	mb_has_coeffs
stmts	107:16	107:93	7	
water	107:16	0:0	8	ttmb
op	107:21	0:0	8	=
call	107:23	107:92	8	get_vlc2
arg	107:32	107:34	9	gb
water	107:32	0:0	10	gb
arg	107:36	107:70	9	ff_vc1_ttmb_vlc[v->tt_index].table
water	107:36	0:0	10	ff_vc1_ttmb_vlc
op	107:51	0:0	10	[
water	107:52	0:0	10	v
op	107:53	0:0	10	->
water	107:55	0:0	10	tt_index
op	107:63	0:0	10	]
op	107:64	0:0	10	.
water	107:65	0:0	10	table
arg	107:72	107:89	9	VC1_TTMB_VLC_BITS
water	107:72	0:0	10	VC1_TTMB_VLC_BITS
arg	107:91	107:92	9	2
water	107:91	0:0	10	2
water	107:93	0:0	8	;
water	108:8	0:0	6	}
water	109:4	0:0	4	}
water	110:4	0:0	2	dst_idx
op	110:12	0:0	2	=
water	110:14	0:0	2	0
water	110:15	0:0	2	;
for	111:4	145:4	2	(i = 0 ;i < 6;i ++)
forinit	111:9	111:14	3	i = 0 ;
water	111:9	0:0	4	i
op	111:11	0:0	4	=
water	111:13	0:0	4	0
water	111:14	0:0	4	;
cond	111:16	111:20	3	i < 6
water	111:16	0:0	4	i
op	111:18	0:0	4	<
water	111:20	0:0	4	6
forexpr	111:23	111:24	3	i ++
water	111:23	0:0	4	i
op	111:24	0:0	4	++
stmts	111:28	145:4	3	
water	111:28	0:0	4	{
water	112:8	0:0	4	s
op	112:9	0:0	4	->
water	112:11	0:0	4	dc_val
op	112:17	0:0	4	[
water	112:18	0:0	4	0
op	112:19	0:0	4	]
op	112:20	0:0	4	[
water	112:21	0:0	4	s
op	112:22	0:0	4	->
water	112:24	0:0	4	block_index
op	112:35	0:0	4	[
water	112:36	0:0	4	i
op	112:37	0:0	4	]
op	112:38	0:0	4	]
op	112:40	0:0	4	=
water	112:42	0:0	4	0
water	112:43	0:0	4	;
water	113:8	0:0	4	dst_idx
op	113:16	0:0	4	+=
water	113:19	0:0	4	i
op	113:21	0:0	4	>>
water	113:24	0:0	4	2
water	113:25	0:0	4	;
water	114:8	0:0	4	val
op	114:12	0:0	4	=
water	114:14	0:0	4	(
water	114:15	0:0	4	(
water	114:16	0:0	4	cbp
op	114:20	0:0	4	>>
water	114:23	0:0	4	(
water	114:24	0:0	4	5
op	114:26	0:0	4	-
water	114:28	0:0	4	i
water	114:29	0:0	4	)
water	114:30	0:0	4	)
op	114:32	0:0	4	&
water	114:34	0:0	4	1
water	114:35	0:0	4	)
water	114:36	0:0	4	;
water	115:8	0:0	4	off
op	115:12	0:0	4	=
water	115:14	0:0	4	(
water	115:15	0:0	4	i
op	115:17	0:0	4	&
water	115:19	0:0	4	4
water	115:20	0:0	4	)
water	115:22	0:0	4	?
water	115:24	0:0	4	0
water	115:26	0:0	4	:
water	115:28	0:0	4	(
water	115:29	0:0	4	(
water	115:30	0:0	4	i
op	115:32	0:0	4	&
water	115:34	0:0	4	1
water	115:35	0:0	4	)
op	115:37	0:0	4	*
water	115:39	0:0	4	8
op	115:41	0:0	4	+
water	115:43	0:0	4	(
water	115:44	0:0	4	i
op	115:46	0:0	4	&
water	115:48	0:0	4	2
water	115:49	0:0	4	)
op	115:51	0:0	4	*
water	115:53	0:0	4	4
op	115:55	0:0	4	*
water	115:57	0:0	4	s
op	115:58	0:0	4	->
water	115:60	0:0	4	linesize
water	115:68	0:0	4	)
water	115:69	0:0	4	;
water	116:8	0:0	4	v
op	116:9	0:0	4	->
water	116:11	0:0	4	mb_type
op	116:18	0:0	4	[
water	116:19	0:0	4	0
op	116:20	0:0	4	]
op	116:21	0:0	4	[
water	116:22	0:0	4	s
op	116:23	0:0	4	->
water	116:25	0:0	4	block_index
op	116:36	0:0	4	[
water	116:37	0:0	4	i
op	116:38	0:0	4	]
op	116:39	0:0	4	]
op	116:41	0:0	4	=
water	116:43	0:0	4	s
op	116:44	0:0	4	->
water	116:46	0:0	4	mb_intra
water	116:54	0:0	4	;
if	117:8	136:8	4	(s -> mb_intra)
cond	117:12	117:15	5	s -> mb_intra
water	117:12	0:0	6	s
op	117:13	0:0	6	->
water	117:15	0:0	6	mb_intra
stmts	117:25	136:8	5	
water	117:25	0:0	6	{
water	119:12	0:0	6	v
op	119:13	0:0	6	->
water	119:15	0:0	6	a_avail
op	119:23	0:0	6	=
water	119:25	0:0	6	v
op	119:26	0:0	6	->
water	119:28	0:0	6	c_avail
op	119:36	0:0	6	=
water	119:38	0:0	6	0
water	119:39	0:0	6	;
if	120:12	121:80	6	(i == 2 || i == 3 || ! s -> first_slice_line)
cond	120:16	120:40	7	i == 2 || i == 3 || ! s -> first_slice_line
water	120:16	0:0	8	i
op	120:18	0:0	8	==
water	120:21	0:0	8	2
op	120:23	0:0	8	||
water	120:26	0:0	8	i
op	120:28	0:0	8	==
water	120:31	0:0	8	3
op	120:33	0:0	8	||
op	120:36	0:0	8	!
water	120:37	0:0	8	s
op	120:38	0:0	8	->
water	120:40	0:0	8	first_slice_line
stmts	121:16	121:80	7	
water	121:16	0:0	8	v
op	121:17	0:0	8	->
water	121:19	0:0	8	a_avail
op	121:27	0:0	8	=
water	121:29	0:0	8	v
op	121:30	0:0	8	->
water	121:32	0:0	8	mb_type
op	121:39	0:0	8	[
water	121:40	0:0	8	0
op	121:41	0:0	8	]
op	121:42	0:0	8	[
water	121:43	0:0	8	s
op	121:44	0:0	8	->
water	121:46	0:0	8	block_index
op	121:57	0:0	8	[
water	121:58	0:0	8	i
op	121:59	0:0	8	]
op	121:61	0:0	8	-
water	121:63	0:0	8	s
op	121:64	0:0	8	->
water	121:66	0:0	8	block_wrap
op	121:76	0:0	8	[
water	121:77	0:0	8	i
op	121:78	0:0	8	]
op	121:79	0:0	8	]
water	121:80	0:0	8	;
if	122:12	123:65	6	(i == 1 || i == 3 || s -> mb_x)
cond	122:16	122:39	7	i == 1 || i == 3 || s -> mb_x
water	122:16	0:0	8	i
op	122:18	0:0	8	==
water	122:21	0:0	8	1
op	122:23	0:0	8	||
water	122:26	0:0	8	i
op	122:28	0:0	8	==
water	122:31	0:0	8	3
op	122:33	0:0	8	||
water	122:36	0:0	8	s
op	122:37	0:0	8	->
water	122:39	0:0	8	mb_x
stmts	123:16	123:65	7	
water	123:16	0:0	8	v
op	123:17	0:0	8	->
water	123:19	0:0	8	c_avail
op	123:27	0:0	8	=
water	123:29	0:0	8	v
op	123:30	0:0	8	->
water	123:32	0:0	8	mb_type
op	123:39	0:0	8	[
water	123:40	0:0	8	0
op	123:41	0:0	8	]
op	123:42	0:0	8	[
water	123:43	0:0	8	s
op	123:44	0:0	8	->
water	123:46	0:0	8	block_index
op	123:57	0:0	8	[
water	123:58	0:0	8	i
op	123:59	0:0	8	]
op	123:61	0:0	8	-
water	123:63	0:0	8	1
op	123:64	0:0	8	]
water	123:65	0:0	8	;
call	124:12	125:73	6	vc1_decode_intra_block
arg	124:35	124:36	7	v
water	124:35	0:0	8	v
arg	124:38	124:49	7	s->block[i]
water	124:38	0:0	8	s
op	124:39	0:0	8	->
water	124:41	0:0	8	block
op	124:46	0:0	8	[
water	124:47	0:0	8	i
op	124:48	0:0	8	]
arg	124:51	124:52	7	i
water	124:51	0:0	8	i
arg	124:54	124:57	7	val
water	124:54	0:0	8	val
arg	124:59	124:65	7	mquant
water	124:59	0:0	8	mquant
arg	125:35	125:73	7	(i&4)?v->codingset2:v->codingset
water	125:35	0:0	8	(
water	125:36	0:0	8	i
op	125:38	0:0	8	&
water	125:40	0:0	8	4
water	125:41	0:0	8	)
water	125:43	0:0	8	?
water	125:45	0:0	8	v
op	125:46	0:0	8	->
water	125:48	0:0	8	codingset2
water	125:59	0:0	8	:
water	125:61	0:0	8	v
op	125:62	0:0	8	->
water	125:64	0:0	8	codingset
water	125:74	0:0	6	;
if	126:12	127:24	6	(CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	126:16	126:79	7	CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
water	126:16	0:0	8	CONFIG_GRAY
op	126:28	0:0	8	&&
water	126:31	0:0	8	(
water	126:32	0:0	8	i
op	126:34	0:0	8	>
water	126:36	0:0	8	3
water	126:37	0:0	8	)
op	126:39	0:0	8	&&
water	126:42	0:0	8	(
water	126:43	0:0	8	s
op	126:44	0:0	8	->
water	126:46	0:0	8	avctx
op	126:51	0:0	8	->
water	126:53	0:0	8	flags
op	126:59	0:0	8	&
water	126:61	0:0	8	AV_CODEC_FLAG_GRAY
water	126:79	0:0	8	)
stmts	127:16	127:24	7	
continue	127:16	127:24	8	
call	128:12	128:51	6	v->vc1dsp.vc1_inv_trans_8x8
arg	128:40	128:51	7	s->block[i]
water	128:40	0:0	8	s
op	128:41	0:0	8	->
water	128:43	0:0	8	block
op	128:48	0:0	8	[
water	128:49	0:0	8	i
op	128:50	0:0	8	]
water	128:52	0:0	6	;
if	129:12	131:40	6	(v -> rangeredfrm)
cond	129:16	129:19	7	v -> rangeredfrm
water	129:16	0:0	8	v
op	129:17	0:0	8	->
water	129:19	0:0	8	rangeredfrm
stmts	130:16	131:40	7	
for	130:16	131:40	8	(j = 0 ;j < 64;j ++)
forinit	130:21	130:26	9	j = 0 ;
water	130:21	0:0	10	j
op	130:23	0:0	10	=
water	130:25	0:0	10	0
water	130:26	0:0	10	;
cond	130:28	130:32	9	j < 64
water	130:28	0:0	10	j
op	130:30	0:0	10	<
water	130:32	0:0	10	64
forexpr	130:36	130:37	9	j ++
water	130:36	0:0	10	j
op	130:37	0:0	10	++
stmts	131:20	131:40	9	
water	131:20	0:0	10	s
op	131:21	0:0	10	->
water	131:23	0:0	10	block
op	131:28	0:0	10	[
water	131:29	0:0	10	i
op	131:30	0:0	10	]
op	131:31	0:0	10	[
water	131:32	0:0	10	j
op	131:33	0:0	10	]
op	131:35	0:0	10	<<=
water	131:39	0:0	10	1
water	131:40	0:0	10	;
call	132:12	135:65	6	s->idsp.put_signed_pixels_clamped
arg	132:46	132:57	7	s->block[i]
water	132:46	0:0	8	s
op	132:47	0:0	8	->
water	132:49	0:0	8	block
op	132:54	0:0	8	[
water	132:55	0:0	8	i
op	132:56	0:0	8	]
arg	133:46	133:68	7	s->dest[dst_idx]+off
water	133:46	0:0	8	s
op	133:47	0:0	8	->
water	133:49	0:0	8	dest
op	133:53	0:0	8	[
water	133:54	0:0	8	dst_idx
op	133:61	0:0	8	]
op	133:63	0:0	8	+
water	133:65	0:0	8	off
arg	134:46	135:65	7	i&4?s->uvlinesize:s->linesize
water	134:46	0:0	8	i
op	134:48	0:0	8	&
water	134:50	0:0	8	4
water	134:52	0:0	8	?
water	134:54	0:0	8	s
op	134:55	0:0	8	->
water	134:57	0:0	8	uvlinesize
water	135:52	0:0	8	:
water	135:54	0:0	8	s
op	135:55	0:0	8	->
water	135:57	0:0	8	linesize
water	135:66	0:0	6	;
water	136:8	0:0	6	}
else	136:10	144:8	4
stmts	136:15	144:8	5	
if	136:15	144:8	6	(val)
cond	136:19	136:19	7	val
water	136:19	0:0	8	val
stmts	136:24	144:8	7	
water	136:24	0:0	8	{
call	137:12	140:101	8	vc1_decode_p_block
arg	137:31	137:32	9	v
water	137:31	0:0	10	v
arg	137:34	137:45	9	s->block[i]
water	137:34	0:0	10	s
op	137:35	0:0	10	->
water	137:37	0:0	10	block
op	137:42	0:0	10	[
water	137:43	0:0	10	i
op	137:44	0:0	10	]
arg	137:47	137:48	9	i
water	137:47	0:0	10	i
arg	137:50	137:56	9	mquant
water	137:50	0:0	10	mquant
arg	137:58	137:62	9	ttmb
water	137:58	0:0	10	ttmb
arg	138:31	138:42	9	first_block
water	138:31	0:0	10	first_block
arg	138:44	138:66	9	s->dest[dst_idx]+off
water	138:44	0:0	10	s
op	138:45	0:0	10	->
water	138:47	0:0	10	dest
op	138:51	0:0	10	[
water	138:52	0:0	10	dst_idx
op	138:59	0:0	10	]
op	138:61	0:0	10	+
water	138:63	0:0	10	off
arg	139:31	139:68	9	(i&4)?s->uvlinesize:s->linesize
water	139:31	0:0	10	(
water	139:32	0:0	10	i
op	139:34	0:0	10	&
water	139:36	0:0	10	4
water	139:37	0:0	10	)
water	139:39	0:0	10	?
water	139:41	0:0	10	s
op	139:42	0:0	10	->
water	139:44	0:0	10	uvlinesize
water	139:55	0:0	10	:
water	139:57	0:0	10	s
op	139:58	0:0	10	->
water	139:60	0:0	10	linesize
arg	140:31	140:95	9	CONFIG_GRAY&&(i&4)&&(s->avctx->flags&AV_CODEC_FLAG_GRAY)
water	140:31	0:0	10	CONFIG_GRAY
op	140:43	0:0	10	&&
water	140:46	0:0	10	(
water	140:47	0:0	10	i
op	140:49	0:0	10	&
water	140:51	0:0	10	4
water	140:52	0:0	10	)
op	140:54	0:0	10	&&
water	140:57	0:0	10	(
water	140:58	0:0	10	s
op	140:59	0:0	10	->
water	140:61	0:0	10	avctx
op	140:66	0:0	10	->
water	140:68	0:0	10	flags
op	140:74	0:0	10	&
water	140:76	0:0	10	AV_CODEC_FLAG_GRAY
water	140:94	0:0	10	)
arg	140:97	140:101	9	NULL
water	140:97	0:0	10	NULL
water	140:102	0:0	8	;
if	141:12	142:25	8	(! v -> ttmbf && ttmb < 8)
cond	141:16	141:36	9	! v -> ttmbf && ttmb < 8
op	141:16	0:0	10	!
water	141:17	0:0	10	v
op	141:18	0:0	10	->
water	141:20	0:0	10	ttmbf
op	141:26	0:0	10	&&
water	141:29	0:0	10	ttmb
op	141:34	0:0	10	<
water	141:36	0:0	10	8
stmts	142:16	142:25	9	
water	142:16	0:0	10	ttmb
op	142:21	0:0	10	=
op	142:23	0:0	10	-
water	142:24	0:0	10	1
water	142:25	0:0	10	;
water	143:12	0:0	8	first_block
op	143:24	0:0	8	=
water	143:26	0:0	8	0
water	143:27	0:0	8	;
water	144:8	0:0	8	}
water	145:4	0:0	4	}
