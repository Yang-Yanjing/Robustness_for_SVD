func	1:0	59:0	0	static void	vc1_decode_b_blocks
params	1:31	0:0	1	
param	1:32	1:45	2	VC1Context *	v
stmnts	0:0	58:66	1	
decl	3:4	3:29	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	v
op	3:26	0:0	2	->
water	3:28	0:0	2	s
switch	5:4	15:4	2	(v -> c_ac_table_index)
cond	5:12	5:15	3	v -> c_ac_table_index
water	5:12	0:0	4	v
op	5:13	0:0	4	->
water	5:15	0:0	4	c_ac_table_index
stmts	5:33	15:4	3	
water	5:33	0:0	4	{
label	6:4	6:10	4	case 0 :
water	7:8	0:0	4	v
op	7:9	0:0	4	->
water	7:11	0:0	4	codingset
op	7:21	0:0	4	=
water	7:23	0:0	4	(
water	7:24	0:0	4	v
op	7:25	0:0	4	->
water	7:27	0:0	4	pqindex
op	7:35	0:0	4	<=
water	7:38	0:0	4	8
water	7:39	0:0	4	)
water	7:41	0:0	4	?
water	7:43	0:0	4	CS_HIGH_RATE_INTRA
water	7:62	0:0	4	:
water	7:64	0:0	4	CS_LOW_MOT_INTRA
water	7:80	0:0	4	;
break	8:8	8:13	4	
label	9:4	9:10	4	case 1 :
water	10:8	0:0	4	v
op	10:9	0:0	4	->
water	10:11	0:0	4	codingset
op	10:21	0:0	4	=
water	10:23	0:0	4	CS_HIGH_MOT_INTRA
water	10:40	0:0	4	;
break	11:8	11:13	4	
label	12:4	12:10	4	case 2 :
water	13:8	0:0	4	v
op	13:9	0:0	4	->
water	13:11	0:0	4	codingset
op	13:21	0:0	4	=
water	13:23	0:0	4	CS_MID_RATE_INTRA
water	13:40	0:0	4	;
break	14:8	14:13	4	
water	15:4	0:0	4	}
switch	16:4	26:4	2	(v -> c_ac_table_index)
cond	16:12	16:15	3	v -> c_ac_table_index
water	16:12	0:0	4	v
op	16:13	0:0	4	->
water	16:15	0:0	4	c_ac_table_index
stmts	16:33	26:4	3	
water	16:33	0:0	4	{
label	17:4	17:10	4	case 0 :
water	18:8	0:0	4	v
op	18:9	0:0	4	->
water	18:11	0:0	4	codingset2
op	18:22	0:0	4	=
water	18:24	0:0	4	(
water	18:25	0:0	4	v
op	18:26	0:0	4	->
water	18:28	0:0	4	pqindex
op	18:36	0:0	4	<=
water	18:39	0:0	4	8
water	18:40	0:0	4	)
water	18:42	0:0	4	?
water	18:44	0:0	4	CS_HIGH_RATE_INTER
water	18:63	0:0	4	:
water	18:65	0:0	4	CS_LOW_MOT_INTER
water	18:81	0:0	4	;
break	19:8	19:13	4	
label	20:4	20:10	4	case 1 :
water	21:8	0:0	4	v
op	21:9	0:0	4	->
water	21:11	0:0	4	codingset2
op	21:22	0:0	4	=
water	21:24	0:0	4	CS_HIGH_MOT_INTER
water	21:41	0:0	4	;
break	22:8	22:13	4	
label	23:4	23:10	4	case 2 :
water	24:8	0:0	4	v
op	24:9	0:0	4	->
water	24:11	0:0	4	codingset2
op	24:22	0:0	4	=
water	24:24	0:0	4	CS_MID_RATE_INTER
water	24:41	0:0	4	;
break	25:8	25:13	4	
water	26:4	0:0	4	}
water	27:4	0:0	2	s
op	27:5	0:0	2	->
water	27:7	0:0	2	first_slice_line
op	27:24	0:0	2	=
water	27:26	0:0	2	1
water	27:27	0:0	2	;
for	28:4	54:4	2	(s -> mb_y = s -> start_mb_y ;s -> mb_y < s -> end_mb_y;s -> mb_y ++)
forinit	28:9	28:32	3	s -> mb_y = s -> start_mb_y ;
water	28:9	0:0	4	s
op	28:10	0:0	4	->
water	28:12	0:0	4	mb_y
op	28:17	0:0	4	=
water	28:19	0:0	4	s
op	28:20	0:0	4	->
water	28:22	0:0	4	start_mb_y
water	28:32	0:0	4	;
cond	28:34	28:47	3	s -> mb_y < s -> end_mb_y
water	28:34	0:0	4	s
op	28:35	0:0	4	->
water	28:37	0:0	4	mb_y
op	28:42	0:0	4	<
water	28:44	0:0	4	s
op	28:45	0:0	4	->
water	28:47	0:0	4	end_mb_y
forexpr	28:57	28:64	3	s -> mb_y ++
water	28:57	0:0	4	s
op	28:58	0:0	4	->
water	28:60	0:0	4	mb_y
op	28:64	0:0	4	++
stmts	28:68	54:4	3	
water	28:68	0:0	4	{
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	mb_x
op	29:16	0:0	4	=
water	29:18	0:0	4	0
water	29:19	0:0	4	;
call	30:8	30:26	4	init_block_index
arg	30:25	30:26	5	v
water	30:25	0:0	6	v
water	30:27	0:0	4	;
for	31:8	48:8	4	(;s -> mb_x < s -> mb_width;s -> mb_x ++)
forinit	31:13	31:13	5	;
water	31:13	0:0	6	;
cond	31:15	31:28	5	s -> mb_x < s -> mb_width
water	31:15	0:0	6	s
op	31:16	0:0	6	->
water	31:18	0:0	6	mb_x
op	31:23	0:0	6	<
water	31:25	0:0	6	s
op	31:26	0:0	6	->
water	31:28	0:0	6	mb_width
forexpr	31:38	31:45	5	s -> mb_x ++
water	31:38	0:0	6	s
op	31:39	0:0	6	->
water	31:41	0:0	6	mb_x
op	31:45	0:0	6	++
stmts	31:49	48:8	5	
water	31:49	0:0	6	{
call	32:12	32:35	6	ff_update_block_index
arg	32:34	32:35	7	s
water	32:34	0:0	8	s
water	32:36	0:0	6	;
if	33:12	34:40	6	(v -> fcm == ILACE_FIELD)
cond	33:16	33:26	7	v -> fcm == ILACE_FIELD
water	33:16	0:0	8	v
op	33:17	0:0	8	->
water	33:19	0:0	8	fcm
op	33:23	0:0	8	==
water	33:26	0:0	8	ILACE_FIELD
stmts	34:16	34:40	7	
call	34:16	34:39	8	vc1_decode_b_mb_intfi
arg	34:38	34:39	9	v
water	34:38	0:0	10	v
water	34:40	0:0	8	;
else	35:12	36:40	6
stmts	35:17	36:40	7	
if	35:17	36:40	8	(v -> fcm == ILACE_FRAME)
cond	35:21	35:31	9	v -> fcm == ILACE_FRAME
water	35:21	0:0	10	v
op	35:22	0:0	10	->
water	35:24	0:0	10	fcm
op	35:28	0:0	10	==
water	35:31	0:0	10	ILACE_FRAME
stmts	36:16	36:40	9	
call	36:16	36:39	10	vc1_decode_b_mb_intfr
arg	36:38	36:39	11	v
water	36:38	0:0	12	v
water	36:40	0:0	10	;
else	37:12	38:34	6
stmts	38:16	38:34	7	
call	38:16	38:33	8	vc1_decode_b_mb
arg	38:32	38:33	9	v
water	38:32	0:0	10	v
water	38:34	0:0	8	;
if	39:12	45:12	6	(get_bits_count (& s -> gb ) > v -> bits ||get_bits_count (& s -> gb ) < 0)
cond	39:16	39:77	7	get_bits_count (& s -> gb ) > v -> bits ||get_bits_count (& s -> gb ) < 0
call	39:16	39:37	8	get_bits_count
arg	39:31	39:37	9	&s->gb
op	39:31	0:0	10	&
water	39:32	0:0	10	s
op	39:33	0:0	10	->
water	39:35	0:0	10	gb
op	39:39	0:0	8	>
water	39:41	0:0	8	v
op	39:42	0:0	8	->
water	39:44	0:0	8	bits
op	39:49	0:0	8	||
call	39:52	39:73	8	get_bits_count
arg	39:67	39:73	9	&s->gb
op	39:67	0:0	10	&
water	39:68	0:0	10	s
op	39:69	0:0	10	->
water	39:71	0:0	10	gb
op	39:75	0:0	8	<
water	39:77	0:0	8	0
stmts	39:80	45:12	7	
water	39:80	0:0	8	{
call	41:16	41:87	8	ff_er_add_slice
arg	41:32	41:38	9	&s->er
op	41:32	0:0	10	&
water	41:33	0:0	10	s
op	41:34	0:0	10	->
water	41:36	0:0	10	er
arg	41:40	41:41	9	0
water	41:40	0:0	10	0
arg	41:43	41:56	9	s->start_mb_y
water	41:43	0:0	10	s
op	41:44	0:0	10	->
water	41:46	0:0	10	start_mb_y
arg	41:58	41:65	9	s->mb_x
water	41:58	0:0	10	s
op	41:59	0:0	10	->
water	41:61	0:0	10	mb_x
arg	41:67	41:74	9	s->mb_y
water	41:67	0:0	10	s
op	41:68	0:0	10	->
water	41:70	0:0	10	mb_y
arg	41:76	41:87	9	ER_MB_ERROR
water	41:76	0:0	10	ER_MB_ERROR
water	41:88	0:0	8	;
call	42:16	43:72	8	av_log
arg	42:23	42:31	9	s->avctx
water	42:23	0:0	10	s
op	42:24	0:0	10	->
water	42:26	0:0	10	avctx
arg	42:33	42:45	9	AV_LOG_ERROR
water	42:33	0:0	10	AV_LOG_ERROR
arg	42:47	42:89	9	"Bits overconsumption: %i > %i at %ix%i\n"
water	42:47	0:0	10	"Bits overconsumption: %i > %i at %ix%i\n"
arg	43:23	43:45	9	get_bits_count(&s->gb)
call	43:23	43:44	10	get_bits_count
arg	43:38	43:44	11	&s->gb
op	43:38	0:0	12	&
water	43:39	0:0	12	s
op	43:40	0:0	12	->
water	43:42	0:0	12	gb
arg	43:47	43:54	9	v->bits
water	43:47	0:0	10	v
op	43:48	0:0	10	->
water	43:50	0:0	10	bits
arg	43:56	43:63	9	s->mb_x
water	43:56	0:0	10	s
op	43:57	0:0	10	->
water	43:59	0:0	10	mb_x
arg	43:65	43:72	9	s->mb_y
water	43:65	0:0	10	s
op	43:66	0:0	10	->
water	43:68	0:0	10	mb_y
water	43:73	0:0	8	;
return	44:16	44:22	8	
water	45:12	0:0	8	}
if	46:12	47:49	6	(v -> s . loop_filter)
cond	46:16	46:21	7	v -> s . loop_filter
water	46:16	0:0	8	v
op	46:17	0:0	8	->
water	46:19	0:0	8	s
op	46:20	0:0	8	.
water	46:21	0:0	8	loop_filter
stmts	47:16	47:49	7	
call	47:16	47:48	8	ff_vc1_loop_filter_iblk
arg	47:40	47:41	9	v
water	47:40	0:0	10	v
arg	47:43	47:48	9	v->pq
water	47:43	0:0	10	v
op	47:44	0:0	10	->
water	47:46	0:0	10	pq
water	47:49	0:0	8	;
water	48:8	0:0	6	}
if	49:8	50:56	4	(! v -> s . loop_filter)
cond	49:12	49:18	5	! v -> s . loop_filter
op	49:12	0:0	6	!
water	49:13	0:0	6	v
op	49:14	0:0	6	->
water	49:16	0:0	6	s
op	49:17	0:0	6	.
water	49:18	0:0	6	loop_filter
stmts	50:12	50:56	5	
call	50:12	50:55	6	ff_mpeg_draw_horiz_band
arg	50:36	50:37	7	s
water	50:36	0:0	8	s
arg	50:39	50:51	7	s->mb_y*16
water	50:39	0:0	8	s
op	50:40	0:0	8	->
water	50:42	0:0	8	mb_y
op	50:47	0:0	8	*
water	50:49	0:0	8	16
arg	50:53	50:55	7	16
water	50:53	0:0	8	16
water	50:56	0:0	6	;
else	51:8	52:62	4
stmts	51:13	52:62	5	
if	51:13	52:62	6	(s -> mb_y)
cond	51:17	51:20	7	s -> mb_y
water	51:17	0:0	8	s
op	51:18	0:0	8	->
water	51:20	0:0	8	mb_y
stmts	52:12	52:62	7	
call	52:12	52:61	8	ff_mpeg_draw_horiz_band
arg	52:36	52:37	9	s
water	52:36	0:0	10	s
arg	52:39	52:57	9	(s->mb_y-1)*16
water	52:39	0:0	10	(
water	52:40	0:0	10	s
op	52:41	0:0	10	->
water	52:43	0:0	10	mb_y
op	52:48	0:0	10	-
water	52:50	0:0	10	1
water	52:51	0:0	10	)
op	52:53	0:0	10	*
water	52:55	0:0	10	16
arg	52:59	52:61	9	16
water	52:59	0:0	10	16
water	52:62	0:0	8	;
water	53:8	0:0	4	s
op	53:9	0:0	4	->
water	53:11	0:0	4	first_slice_line
op	53:28	0:0	4	=
water	53:30	0:0	4	0
water	53:31	0:0	4	;
water	54:4	0:0	4	}
if	55:4	56:62	2	(v -> s . loop_filter)
cond	55:8	55:13	3	v -> s . loop_filter
water	55:8	0:0	4	v
op	55:9	0:0	4	->
water	55:11	0:0	4	s
op	55:12	0:0	4	.
water	55:13	0:0	4	loop_filter
stmts	56:8	56:62	3	
call	56:8	56:61	4	ff_mpeg_draw_horiz_band
arg	56:32	56:33	5	s
water	56:32	0:0	6	s
arg	56:35	56:57	5	(s->end_mb_y-1)*16
water	56:35	0:0	6	(
water	56:36	0:0	6	s
op	56:37	0:0	6	->
water	56:39	0:0	6	end_mb_y
op	56:48	0:0	6	-
water	56:50	0:0	6	1
water	56:51	0:0	6	)
op	56:53	0:0	6	*
water	56:55	0:0	6	16
arg	56:59	56:61	5	16
water	56:59	0:0	6	16
water	56:62	0:0	4	;
call	57:4	58:65	2	ff_er_add_slice
arg	57:20	57:26	3	&s->er
op	57:20	0:0	4	&
water	57:21	0:0	4	s
op	57:22	0:0	4	->
water	57:24	0:0	4	er
arg	57:28	57:29	3	0
water	57:28	0:0	4	0
arg	57:31	57:61	3	s->start_mb_y<<v->field_mode
water	57:31	0:0	4	s
op	57:32	0:0	4	->
water	57:34	0:0	4	start_mb_y
op	57:45	0:0	4	<<
water	57:48	0:0	4	v
op	57:49	0:0	4	->
water	57:51	0:0	4	field_mode
arg	57:63	57:78	3	s->mb_width-1
water	57:63	0:0	4	s
op	57:64	0:0	4	->
water	57:66	0:0	4	mb_width
op	57:75	0:0	4	-
water	57:77	0:0	4	1
arg	58:20	58:54	3	(s->end_mb_y<<v->field_mode)-1
water	58:20	0:0	4	(
water	58:21	0:0	4	s
op	58:22	0:0	4	->
water	58:24	0:0	4	end_mb_y
op	58:33	0:0	4	<<
water	58:36	0:0	4	v
op	58:37	0:0	4	->
water	58:39	0:0	4	field_mode
water	58:49	0:0	4	)
op	58:51	0:0	4	-
water	58:53	0:0	4	1
arg	58:56	58:65	3	ER_MB_END
water	58:56	0:0	4	ER_MB_END
water	58:66	0:0	2	;
