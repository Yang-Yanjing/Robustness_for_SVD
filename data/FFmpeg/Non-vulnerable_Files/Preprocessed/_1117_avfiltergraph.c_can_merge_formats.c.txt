func	1:0	37:0	0	static int	can_merge_formats
params	1:28	0:0	1	
param	1:29	1:51	2	AVFilterFormats *	a_arg
param	2:29	2:51	2	AVFilterFormats *	b_arg
param	3:29	3:50	2	enum AVMediaType	type
param	4:29	4:47	2	int	is_sample_rate
stmnts	0:0	36:4	1	
decl	6:4	6:32	2	AVFilterFormats	*a
water	6:22	0:0	2	,
decl	6:4	6:32	2	AVFilterFormats	*b
water	6:26	0:0	2	,
decl	6:4	6:32	2	AVFilterFormats	*ret
if	7:4	8:16	2	(a_arg == b_arg)
cond	7:8	7:17	3	a_arg == b_arg
water	7:8	0:0	4	a_arg
op	7:14	0:0	4	==
water	7:17	0:0	4	b_arg
stmts	8:8	8:16	3	
return	8:8	8:16	4	1
water	8:15	0:0	5	1
water	9:4	0:0	2	a
op	9:6	0:0	2	=
call	9:8	9:34	2	clone_filter_formats
arg	9:29	9:34	3	a_arg
water	9:29	0:0	4	a_arg
water	9:35	0:0	2	;
water	10:4	0:0	2	b
op	10:6	0:0	2	=
call	10:8	10:34	2	clone_filter_formats
arg	10:29	10:34	3	b_arg
water	10:29	0:0	4	b_arg
water	10:35	0:0	2	;
if	11:4	19:4	2	(! a || ! b)
cond	11:8	11:15	3	! a || ! b
op	11:8	0:0	4	!
water	11:9	0:0	4	a
op	11:11	0:0	4	||
op	11:14	0:0	4	!
water	11:15	0:0	4	b
stmts	11:18	19:4	3	
water	11:18	0:0	4	{
if	12:8	13:33	4	(a)
cond	12:12	12:12	5	a
water	12:12	0:0	6	a
stmts	13:12	13:33	5	
call	13:12	13:32	6	av_freep
arg	13:21	13:32	7	&a->formats
op	13:21	0:0	8	&
water	13:22	0:0	8	a
op	13:23	0:0	8	->
water	13:25	0:0	8	formats
water	13:33	0:0	6	;
if	14:8	15:33	4	(b)
cond	14:12	14:12	5	b
water	14:12	0:0	6	b
stmts	15:12	15:33	5	
call	15:12	15:32	6	av_freep
arg	15:21	15:32	7	&b->formats
op	15:21	0:0	8	&
water	15:22	0:0	8	b
op	15:23	0:0	8	->
water	15:25	0:0	8	formats
water	15:33	0:0	6	;
call	16:8	16:19	4	av_freep
arg	16:17	16:19	5	&a
op	16:17	0:0	6	&
water	16:18	0:0	6	a
water	16:20	0:0	4	;
call	17:8	17:19	4	av_freep
arg	17:17	17:19	5	&b
op	17:17	0:0	6	&
water	17:18	0:0	6	b
water	17:20	0:0	4	;
return	18:8	18:16	4	0
water	18:15	0:0	5	0
water	19:4	0:0	4	}
if	20:4	22:4	2	(is_sample_rate)
cond	20:8	20:8	3	is_sample_rate
water	20:8	0:0	4	is_sample_rate
stmts	20:24	22:4	3	
water	20:24	0:0	4	{
water	21:8	0:0	4	ret
op	21:12	0:0	4	=
call	21:14	21:39	4	ff_merge_samplerates
arg	21:35	21:36	5	a
water	21:35	0:0	6	a
arg	21:38	21:39	5	b
water	21:38	0:0	6	b
water	21:40	0:0	4	;
water	22:4	0:0	4	}
else	22:6	24:4	2
stmts	22:11	24:4	3	
water	22:11	0:0	4	{
water	23:8	0:0	4	ret
op	23:12	0:0	4	=
call	23:14	23:41	4	ff_merge_formats
arg	23:31	23:32	5	a
water	23:31	0:0	6	a
arg	23:34	23:35	5	b
water	23:34	0:0	6	b
arg	23:37	23:41	5	type
water	23:37	0:0	6	type
water	23:42	0:0	4	;
water	24:4	0:0	4	}
if	25:4	30:4	2	(ret)
cond	25:8	25:8	3	ret
water	25:8	0:0	4	ret
stmts	25:13	30:4	3	
water	25:13	0:0	4	{
call	26:8	26:30	4	av_freep
arg	26:17	26:30	5	&ret->formats
op	26:17	0:0	6	&
water	26:18	0:0	6	ret
op	26:21	0:0	6	->
water	26:23	0:0	6	formats
water	26:31	0:0	4	;
call	27:8	27:27	4	av_freep
arg	27:17	27:27	5	&ret->refs
op	27:17	0:0	6	&
water	27:18	0:0	6	ret
op	27:21	0:0	6	->
water	27:23	0:0	6	refs
water	27:28	0:0	4	;
call	28:8	28:21	4	av_freep
arg	28:17	28:21	5	&ret
op	28:17	0:0	6	&
water	28:18	0:0	6	ret
water	28:22	0:0	4	;
return	29:8	29:16	4	1
water	29:15	0:0	5	1
water	30:4	0:0	4	}
else	30:6	36:4	2
stmts	30:11	36:4	3	
water	30:11	0:0	4	{
call	31:8	31:28	4	av_freep
arg	31:17	31:28	5	&a->formats
op	31:17	0:0	6	&
water	31:18	0:0	6	a
op	31:19	0:0	6	->
water	31:21	0:0	6	formats
water	31:29	0:0	4	;
call	32:8	32:28	4	av_freep
arg	32:17	32:28	5	&b->formats
op	32:17	0:0	6	&
water	32:18	0:0	6	b
op	32:19	0:0	6	->
water	32:21	0:0	6	formats
water	32:29	0:0	4	;
call	33:8	33:19	4	av_freep
arg	33:17	33:19	5	&a
op	33:17	0:0	6	&
water	33:18	0:0	6	a
water	33:20	0:0	4	;
call	34:8	34:19	4	av_freep
arg	34:17	34:19	5	&b
op	34:17	0:0	6	&
water	34:18	0:0	6	b
water	34:20	0:0	4	;
return	35:8	35:16	4	0
water	35:15	0:0	5	0
water	36:4	0:0	4	}
