func	1:0	119:0	0	static int	read_sbr_grid
params	1:24	0:0	1	
param	1:25	1:39	2	AACContext *	ac
param	1:41	1:69	2	SpectralBandReplication *	sbr
param	2:25	2:42	2	GetBitContext *	gb
param	2:44	2:60	2	SBRData *	ch_data
stmnts	0:0	118:12	1	
decl	4:4	4:9	2	int	i
decl	5:4	5:22	2	int	bs_pointer
op	5:19	0:0	2	=
water	5:21	0:0	2	0
decl	7:4	7:27	2	int	abs_bord_trail
op	7:23	0:0	2	=
water	7:25	0:0	2	16
decl	8:4	8:35	2	int	num_rel_lead
water	8:20	0:0	2	,
decl	8:4	8:35	2	int	num_rel_trail
water	9:4	0:0	2	unsigned
water	9:13	0:0	2	bs_num_env_old
op	9:28	0:0	2	=
water	9:30	0:0	2	ch_data
op	9:37	0:0	2	->
water	9:39	0:0	2	bs_num_env
water	9:49	0:0	2	;
water	10:4	0:0	2	ch_data
op	10:11	0:0	2	->
water	10:13	0:0	2	bs_freq_res
op	10:24	0:0	2	[
water	10:25	0:0	2	0
op	10:26	0:0	2	]
op	10:28	0:0	2	=
water	10:30	0:0	2	ch_data
op	10:37	0:0	2	->
water	10:39	0:0	2	bs_freq_res
op	10:50	0:0	2	[
water	10:51	0:0	2	ch_data
op	10:58	0:0	2	->
water	10:60	0:0	2	bs_num_env
op	10:70	0:0	2	]
water	10:71	0:0	2	;
water	11:4	0:0	2	ch_data
op	11:11	0:0	2	->
water	11:13	0:0	2	bs_amp_res
op	11:24	0:0	2	=
water	11:26	0:0	2	sbr
op	11:29	0:0	2	->
water	11:31	0:0	2	bs_amp_res_header
water	11:48	0:0	2	;
water	12:4	0:0	2	ch_data
op	12:11	0:0	2	->
water	12:13	0:0	2	t_env_num_env_old
op	12:31	0:0	2	=
water	12:33	0:0	2	ch_data
op	12:40	0:0	2	->
water	12:42	0:0	2	t_env
op	12:47	0:0	2	[
water	12:48	0:0	2	bs_num_env_old
op	12:62	0:0	2	]
water	12:63	0:0	2	;
switch	13:4	79:4	2	(ch_data -> bs_frame_class =get_bits (gb ,2 ))
cond	13:12	13:52	3	ch_data -> bs_frame_class =get_bits (gb ,2 )
water	13:12	0:0	4	ch_data
op	13:19	0:0	4	->
water	13:21	0:0	4	bs_frame_class
op	13:36	0:0	4	=
call	13:38	13:52	4	get_bits
arg	13:47	13:49	5	gb
water	13:47	0:0	6	gb
arg	13:51	13:52	5	2
water	13:51	0:0	6	2
stmts	13:55	79:4	3	
water	13:55	0:0	4	{
label	14:4	14:15	4	case FIXFIX :
water	15:8	0:0	4	ch_data
op	15:15	0:0	4	->
water	15:17	0:0	4	bs_num_env
op	15:44	0:0	4	=
water	15:46	0:0	4	1
op	15:48	0:0	4	<<
call	15:51	15:65	4	get_bits
arg	15:60	15:62	5	gb
water	15:60	0:0	6	gb
arg	15:64	15:65	5	2
water	15:64	0:0	6	2
water	15:66	0:0	4	;
water	16:8	0:0	4	num_rel_lead
op	16:44	0:0	4	=
water	16:46	0:0	4	ch_data
op	16:53	0:0	4	->
water	16:55	0:0	4	bs_num_env
op	16:66	0:0	4	-
water	16:68	0:0	4	1
water	16:69	0:0	4	;
if	17:8	18:35	4	(ch_data -> bs_num_env == 1)
cond	17:12	17:35	5	ch_data -> bs_num_env == 1
water	17:12	0:0	6	ch_data
op	17:19	0:0	6	->
water	17:21	0:0	6	bs_num_env
op	17:32	0:0	6	==
water	17:35	0:0	6	1
stmts	18:12	18:35	5	
water	18:12	0:0	6	ch_data
op	18:19	0:0	6	->
water	18:21	0:0	6	bs_amp_res
op	18:32	0:0	6	=
water	18:34	0:0	6	0
water	18:35	0:0	6	;
if	19:8	24:8	4	(ch_data -> bs_num_env > 4)
cond	19:12	19:34	5	ch_data -> bs_num_env > 4
water	19:12	0:0	6	ch_data
op	19:19	0:0	6	->
water	19:21	0:0	6	bs_num_env
op	19:32	0:0	6	>
water	19:34	0:0	6	4
stmts	19:37	24:8	5	
water	19:37	0:0	6	{
call	20:12	22:38	6	av_log
arg	20:19	20:28	7	ac->avctx
water	20:19	0:0	8	ac
op	20:21	0:0	8	->
water	20:23	0:0	8	avctx
arg	20:30	20:42	7	AV_LOG_ERROR
water	20:30	0:0	8	AV_LOG_ERROR
arg	21:19	21:93	7	"Invalid bitstream, too many SBR envelopes in FIXFIX type SBR frame: %d\n"
water	21:19	0:0	8	"Invalid bitstream, too many SBR envelopes in FIXFIX type SBR frame: %d\n"
arg	22:19	22:38	7	ch_data->bs_num_env
water	22:19	0:0	8	ch_data
op	22:26	0:0	8	->
water	22:28	0:0	8	bs_num_env
water	22:39	0:0	6	;
return	23:12	23:21	6	-1
op	23:19	0:0	7	-
water	23:20	0:0	7	1
water	24:8	0:0	6	}
water	25:8	0:0	4	ch_data
op	25:15	0:0	4	->
water	25:17	0:0	4	t_env
op	25:22	0:0	4	[
water	25:23	0:0	4	0
op	25:24	0:0	4	]
op	25:44	0:0	4	=
water	25:46	0:0	4	0
water	25:47	0:0	4	;
water	26:8	0:0	4	ch_data
op	26:15	0:0	4	->
water	26:17	0:0	4	t_env
op	26:22	0:0	4	[
water	26:23	0:0	4	ch_data
op	26:30	0:0	4	->
water	26:32	0:0	4	bs_num_env
op	26:42	0:0	4	]
op	26:44	0:0	4	=
water	26:46	0:0	4	abs_bord_trail
water	26:60	0:0	4	;
water	27:8	0:0	4	abs_bord_trail
op	27:23	0:0	4	=
water	27:25	0:0	4	(
water	27:26	0:0	4	abs_bord_trail
op	27:41	0:0	4	+
water	27:43	0:0	4	(
water	27:44	0:0	4	ch_data
op	27:51	0:0	4	->
water	27:53	0:0	4	bs_num_env
op	27:64	0:0	4	>>
water	27:67	0:0	4	1
water	27:68	0:0	4	)
water	27:69	0:0	4	)
op	27:71	0:0	4	/
water	28:19	0:0	4	ch_data
op	28:26	0:0	4	->
water	28:28	0:0	4	bs_num_env
water	28:38	0:0	4	;
for	29:8	30:70	4	(i = 0 ;i < num_rel_lead;i ++)
forinit	29:13	29:18	5	i = 0 ;
water	29:13	0:0	6	i
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:24	5	i < num_rel_lead
water	29:20	0:0	6	i
op	29:22	0:0	6	<
water	29:24	0:0	6	num_rel_lead
forexpr	29:38	29:39	5	i ++
water	29:38	0:0	6	i
op	29:39	0:0	6	++
stmts	30:12	30:70	5	
water	30:12	0:0	6	ch_data
op	30:19	0:0	6	->
water	30:21	0:0	6	t_env
op	30:26	0:0	6	[
water	30:27	0:0	6	i
op	30:29	0:0	6	+
water	30:31	0:0	6	1
op	30:32	0:0	6	]
op	30:34	0:0	6	=
water	30:36	0:0	6	ch_data
op	30:43	0:0	6	->
water	30:45	0:0	6	t_env
op	30:50	0:0	6	[
water	30:51	0:0	6	i
op	30:52	0:0	6	]
op	30:54	0:0	6	+
water	30:56	0:0	6	abs_bord_trail
water	30:70	0:0	6	;
water	31:8	0:0	4	ch_data
op	31:15	0:0	4	->
water	31:17	0:0	4	bs_freq_res
op	31:28	0:0	4	[
water	31:29	0:0	4	1
op	31:30	0:0	4	]
op	31:32	0:0	4	=
call	31:34	31:46	4	get_bits1
arg	31:44	31:46	5	gb
water	31:44	0:0	6	gb
water	31:47	0:0	4	;
for	32:8	33:65	4	(i = 1 ;i < ch_data -> bs_num_env;i ++)
forinit	32:13	32:18	5	i = 1 ;
water	32:13	0:0	6	i
op	32:15	0:0	6	=
water	32:17	0:0	6	1
water	32:18	0:0	6	;
cond	32:20	32:33	5	i < ch_data -> bs_num_env
water	32:20	0:0	6	i
op	32:22	0:0	6	<
water	32:24	0:0	6	ch_data
op	32:31	0:0	6	->
water	32:33	0:0	6	bs_num_env
forexpr	32:45	32:46	5	i ++
water	32:45	0:0	6	i
op	32:46	0:0	6	++
stmts	33:12	33:65	5	
water	33:12	0:0	6	ch_data
op	33:19	0:0	6	->
water	33:21	0:0	6	bs_freq_res
op	33:32	0:0	6	[
water	33:33	0:0	6	i
op	33:35	0:0	6	+
water	33:37	0:0	6	1
op	33:38	0:0	6	]
op	33:40	0:0	6	=
water	33:42	0:0	6	ch_data
op	33:49	0:0	6	->
water	33:51	0:0	6	bs_freq_res
op	33:62	0:0	6	[
water	33:63	0:0	6	1
op	33:64	0:0	6	]
water	33:65	0:0	6	;
break	34:8	34:13	4	
label	35:4	35:15	4	case FIXVAR :
water	36:8	0:0	4	abs_bord_trail
op	36:43	0:0	4	+=
call	36:46	36:60	4	get_bits
arg	36:55	36:57	5	gb
water	36:55	0:0	6	gb
arg	36:59	36:60	5	2
water	36:59	0:0	6	2
water	36:61	0:0	4	;
water	37:8	0:0	4	num_rel_trail
op	37:44	0:0	4	=
call	37:46	37:60	4	get_bits
arg	37:55	37:57	5	gb
water	37:55	0:0	6	gb
arg	37:59	37:60	5	2
water	37:59	0:0	6	2
water	37:61	0:0	4	;
water	38:8	0:0	4	ch_data
op	38:15	0:0	4	->
water	38:17	0:0	4	bs_num_env
op	38:44	0:0	4	=
water	38:46	0:0	4	num_rel_trail
op	38:60	0:0	4	+
water	38:62	0:0	4	1
water	38:63	0:0	4	;
water	39:8	0:0	4	ch_data
op	39:15	0:0	4	->
water	39:17	0:0	4	t_env
op	39:22	0:0	4	[
water	39:23	0:0	4	0
op	39:24	0:0	4	]
op	39:44	0:0	4	=
water	39:46	0:0	4	0
water	39:47	0:0	4	;
water	40:8	0:0	4	ch_data
op	40:15	0:0	4	->
water	40:17	0:0	4	t_env
op	40:22	0:0	4	[
water	40:23	0:0	4	ch_data
op	40:30	0:0	4	->
water	40:32	0:0	4	bs_num_env
op	40:42	0:0	4	]
op	40:44	0:0	4	=
water	40:46	0:0	4	abs_bord_trail
water	40:60	0:0	4	;
for	41:8	43:81	4	(i = 0 ;i < num_rel_trail;i ++)
forinit	41:13	41:18	5	i = 0 ;
water	41:13	0:0	6	i
op	41:15	0:0	6	=
water	41:17	0:0	6	0
water	41:18	0:0	6	;
cond	41:20	41:24	5	i < num_rel_trail
water	41:20	0:0	6	i
op	41:22	0:0	6	<
water	41:24	0:0	6	num_rel_trail
forexpr	41:39	41:40	5	i ++
water	41:39	0:0	6	i
op	41:40	0:0	6	++
stmts	42:12	43:81	5	
water	42:12	0:0	6	ch_data
op	42:19	0:0	6	->
water	42:21	0:0	6	t_env
op	42:26	0:0	6	[
water	42:27	0:0	6	ch_data
op	42:34	0:0	6	->
water	42:36	0:0	6	bs_num_env
op	42:47	0:0	6	-
water	42:49	0:0	6	1
op	42:51	0:0	6	-
water	42:53	0:0	6	i
op	42:54	0:0	6	]
op	42:56	0:0	6	=
water	43:16	0:0	6	ch_data
op	43:23	0:0	6	->
water	43:25	0:0	6	t_env
op	43:30	0:0	6	[
water	43:31	0:0	6	ch_data
op	43:38	0:0	6	->
water	43:40	0:0	6	bs_num_env
op	43:51	0:0	6	-
water	43:53	0:0	6	i
op	43:54	0:0	6	]
op	43:56	0:0	6	-
water	43:58	0:0	6	2
call	43:60	43:76	6	*get_bits
arg	43:71	43:73	7	gb
water	43:71	0:0	8	gb
arg	43:75	43:76	7	2
water	43:75	0:0	8	2
op	43:78	0:0	6	-
water	43:80	0:0	6	2
water	43:81	0:0	6	;
water	44:8	0:0	4	bs_pointer
op	44:19	0:0	4	=
call	44:21	44:64	4	get_bits
arg	44:30	44:32	5	gb
water	44:30	0:0	6	gb
arg	44:34	44:64	5	ceil_log2[ch_data->bs_num_env]
water	44:34	0:0	6	ceil_log2
op	44:43	0:0	6	[
water	44:44	0:0	6	ch_data
op	44:51	0:0	6	->
water	44:53	0:0	6	bs_num_env
op	44:63	0:0	6	]
water	44:65	0:0	4	;
for	45:8	46:73	4	(i = 0 ;i < ch_data -> bs_num_env;i ++)
forinit	45:13	45:18	5	i = 0 ;
water	45:13	0:0	6	i
op	45:15	0:0	6	=
water	45:17	0:0	6	0
water	45:18	0:0	6	;
cond	45:20	45:33	5	i < ch_data -> bs_num_env
water	45:20	0:0	6	i
op	45:22	0:0	6	<
water	45:24	0:0	6	ch_data
op	45:31	0:0	6	->
water	45:33	0:0	6	bs_num_env
forexpr	45:45	45:46	5	i ++
water	45:45	0:0	6	i
op	45:46	0:0	6	++
stmts	46:12	46:73	5	
water	46:12	0:0	6	ch_data
op	46:19	0:0	6	->
water	46:21	0:0	6	bs_freq_res
op	46:32	0:0	6	[
water	46:33	0:0	6	ch_data
op	46:40	0:0	6	->
water	46:42	0:0	6	bs_num_env
op	46:53	0:0	6	-
water	46:55	0:0	6	i
op	46:56	0:0	6	]
op	46:58	0:0	6	=
call	46:60	46:72	6	get_bits1
arg	46:70	46:72	7	gb
water	46:70	0:0	8	gb
water	46:73	0:0	6	;
break	47:8	47:13	4	
label	48:4	48:15	4	case VARFIX :
water	49:8	0:0	4	ch_data
op	49:15	0:0	4	->
water	49:17	0:0	4	t_env
op	49:22	0:0	4	[
water	49:23	0:0	4	0
op	49:24	0:0	4	]
op	49:44	0:0	4	=
call	49:46	49:60	4	get_bits
arg	49:55	49:57	5	gb
water	49:55	0:0	6	gb
arg	49:59	49:60	5	2
water	49:59	0:0	6	2
water	49:61	0:0	4	;
water	50:8	0:0	4	num_rel_lead
op	50:44	0:0	4	=
call	50:46	50:60	4	get_bits
arg	50:55	50:57	5	gb
water	50:55	0:0	6	gb
arg	50:59	50:60	5	2
water	50:59	0:0	6	2
water	50:61	0:0	4	;
water	51:8	0:0	4	ch_data
op	51:15	0:0	4	->
water	51:17	0:0	4	bs_num_env
op	51:44	0:0	4	=
water	51:46	0:0	4	num_rel_lead
op	51:59	0:0	4	+
water	51:61	0:0	4	1
water	51:62	0:0	4	;
water	52:8	0:0	4	ch_data
op	52:15	0:0	4	->
water	52:17	0:0	4	t_env
op	52:22	0:0	4	[
water	52:23	0:0	4	ch_data
op	52:30	0:0	4	->
water	52:32	0:0	4	bs_num_env
op	52:42	0:0	4	]
op	52:44	0:0	4	=
water	52:46	0:0	4	abs_bord_trail
water	52:60	0:0	4	;
for	53:8	54:79	4	(i = 0 ;i < num_rel_lead;i ++)
forinit	53:13	53:18	5	i = 0 ;
water	53:13	0:0	6	i
op	53:15	0:0	6	=
water	53:17	0:0	6	0
water	53:18	0:0	6	;
cond	53:20	53:24	5	i < num_rel_lead
water	53:20	0:0	6	i
op	53:22	0:0	6	<
water	53:24	0:0	6	num_rel_lead
forexpr	53:38	53:39	5	i ++
water	53:38	0:0	6	i
op	53:39	0:0	6	++
stmts	54:12	54:79	5	
water	54:12	0:0	6	ch_data
op	54:19	0:0	6	->
water	54:21	0:0	6	t_env
op	54:26	0:0	6	[
water	54:27	0:0	6	i
op	54:29	0:0	6	+
water	54:31	0:0	6	1
op	54:32	0:0	6	]
op	54:34	0:0	6	=
water	54:36	0:0	6	ch_data
op	54:43	0:0	6	->
water	54:45	0:0	6	t_env
op	54:50	0:0	6	[
water	54:51	0:0	6	i
op	54:52	0:0	6	]
op	54:54	0:0	6	+
water	54:56	0:0	6	2
call	54:58	54:74	6	*get_bits
arg	54:69	54:71	7	gb
water	54:69	0:0	8	gb
arg	54:73	54:74	7	2
water	54:73	0:0	8	2
op	54:76	0:0	6	+
water	54:78	0:0	6	2
water	54:79	0:0	6	;
water	55:8	0:0	4	bs_pointer
op	55:19	0:0	4	=
call	55:21	55:64	4	get_bits
arg	55:30	55:32	5	gb
water	55:30	0:0	6	gb
arg	55:34	55:64	5	ceil_log2[ch_data->bs_num_env]
water	55:34	0:0	6	ceil_log2
op	55:43	0:0	6	[
water	55:44	0:0	6	ch_data
op	55:51	0:0	6	->
water	55:53	0:0	6	bs_num_env
op	55:63	0:0	6	]
water	55:65	0:0	4	;
call	56:8	56:74	4	get_bits1_vector
arg	56:25	56:27	5	gb
water	56:25	0:0	6	gb
arg	56:29	56:53	5	ch_data->bs_freq_res+1
water	56:29	0:0	6	ch_data
op	56:36	0:0	6	->
water	56:38	0:0	6	bs_freq_res
op	56:50	0:0	6	+
water	56:52	0:0	6	1
arg	56:55	56:74	5	ch_data->bs_num_env
water	56:55	0:0	6	ch_data
op	56:62	0:0	6	->
water	56:64	0:0	6	bs_num_env
water	56:75	0:0	4	;
break	57:8	57:13	4	
label	58:4	58:15	4	case VARVAR :
water	59:8	0:0	4	ch_data
op	59:15	0:0	4	->
water	59:17	0:0	4	t_env
op	59:22	0:0	4	[
water	59:23	0:0	4	0
op	59:24	0:0	4	]
op	59:44	0:0	4	=
call	59:46	59:60	4	get_bits
arg	59:55	59:57	5	gb
water	59:55	0:0	6	gb
arg	59:59	59:60	5	2
water	59:59	0:0	6	2
water	59:61	0:0	4	;
water	60:8	0:0	4	abs_bord_trail
op	60:43	0:0	4	+=
call	60:46	60:60	4	get_bits
arg	60:55	60:57	5	gb
water	60:55	0:0	6	gb
arg	60:59	60:60	5	2
water	60:59	0:0	6	2
water	60:61	0:0	4	;
water	61:8	0:0	4	num_rel_lead
op	61:44	0:0	4	=
call	61:46	61:60	4	get_bits
arg	61:55	61:57	5	gb
water	61:55	0:0	6	gb
arg	61:59	61:60	5	2
water	61:59	0:0	6	2
water	61:61	0:0	4	;
water	62:8	0:0	4	num_rel_trail
op	62:44	0:0	4	=
call	62:46	62:60	4	get_bits
arg	62:55	62:57	5	gb
water	62:55	0:0	6	gb
arg	62:59	62:60	5	2
water	62:59	0:0	6	2
water	62:61	0:0	4	;
water	63:8	0:0	4	ch_data
op	63:15	0:0	4	->
water	63:17	0:0	4	bs_num_env
op	63:44	0:0	4	=
water	63:46	0:0	4	num_rel_lead
op	63:59	0:0	4	+
water	63:61	0:0	4	num_rel_trail
op	63:75	0:0	4	+
water	63:77	0:0	4	1
water	63:78	0:0	4	;
if	64:8	69:8	4	(ch_data -> bs_num_env > 5)
cond	64:12	64:34	5	ch_data -> bs_num_env > 5
water	64:12	0:0	6	ch_data
op	64:19	0:0	6	->
water	64:21	0:0	6	bs_num_env
op	64:32	0:0	6	>
water	64:34	0:0	6	5
stmts	64:37	69:8	5	
water	64:37	0:0	6	{
call	65:12	67:38	6	av_log
arg	65:19	65:28	7	ac->avctx
water	65:19	0:0	8	ac
op	65:21	0:0	8	->
water	65:23	0:0	8	avctx
arg	65:30	65:42	7	AV_LOG_ERROR
water	65:30	0:0	8	AV_LOG_ERROR
arg	66:19	66:93	7	"Invalid bitstream, too many SBR envelopes in VARVAR type SBR frame: %d\n"
water	66:19	0:0	8	"Invalid bitstream, too many SBR envelopes in VARVAR type SBR frame: %d\n"
arg	67:19	67:38	7	ch_data->bs_num_env
water	67:19	0:0	8	ch_data
op	67:26	0:0	8	->
water	67:28	0:0	8	bs_num_env
water	67:39	0:0	6	;
return	68:12	68:21	6	-1
op	68:19	0:0	7	-
water	68:20	0:0	7	1
water	69:8	0:0	6	}
water	70:8	0:0	4	ch_data
op	70:15	0:0	4	->
water	70:17	0:0	4	t_env
op	70:22	0:0	4	[
water	70:23	0:0	4	ch_data
op	70:30	0:0	4	->
water	70:32	0:0	4	bs_num_env
op	70:42	0:0	4	]
op	70:44	0:0	4	=
water	70:46	0:0	4	abs_bord_trail
water	70:60	0:0	4	;
for	71:8	72:79	4	(i = 0 ;i < num_rel_lead;i ++)
forinit	71:13	71:18	5	i = 0 ;
water	71:13	0:0	6	i
op	71:15	0:0	6	=
water	71:17	0:0	6	0
water	71:18	0:0	6	;
cond	71:20	71:24	5	i < num_rel_lead
water	71:20	0:0	6	i
op	71:22	0:0	6	<
water	71:24	0:0	6	num_rel_lead
forexpr	71:38	71:39	5	i ++
water	71:38	0:0	6	i
op	71:39	0:0	6	++
stmts	72:12	72:79	5	
water	72:12	0:0	6	ch_data
op	72:19	0:0	6	->
water	72:21	0:0	6	t_env
op	72:26	0:0	6	[
water	72:27	0:0	6	i
op	72:29	0:0	6	+
water	72:31	0:0	6	1
op	72:32	0:0	6	]
op	72:34	0:0	6	=
water	72:36	0:0	6	ch_data
op	72:43	0:0	6	->
water	72:45	0:0	6	t_env
op	72:50	0:0	6	[
water	72:51	0:0	6	i
op	72:52	0:0	6	]
op	72:54	0:0	6	+
water	72:56	0:0	6	2
call	72:58	72:74	6	*get_bits
arg	72:69	72:71	7	gb
water	72:69	0:0	8	gb
arg	72:73	72:74	7	2
water	72:73	0:0	8	2
op	72:76	0:0	6	+
water	72:78	0:0	6	2
water	72:79	0:0	6	;
for	73:8	75:81	4	(i = 0 ;i < num_rel_trail;i ++)
forinit	73:13	73:18	5	i = 0 ;
water	73:13	0:0	6	i
op	73:15	0:0	6	=
water	73:17	0:0	6	0
water	73:18	0:0	6	;
cond	73:20	73:24	5	i < num_rel_trail
water	73:20	0:0	6	i
op	73:22	0:0	6	<
water	73:24	0:0	6	num_rel_trail
forexpr	73:39	73:40	5	i ++
water	73:39	0:0	6	i
op	73:40	0:0	6	++
stmts	74:12	75:81	5	
water	74:12	0:0	6	ch_data
op	74:19	0:0	6	->
water	74:21	0:0	6	t_env
op	74:26	0:0	6	[
water	74:27	0:0	6	ch_data
op	74:34	0:0	6	->
water	74:36	0:0	6	bs_num_env
op	74:47	0:0	6	-
water	74:49	0:0	6	1
op	74:51	0:0	6	-
water	74:53	0:0	6	i
op	74:54	0:0	6	]
op	74:56	0:0	6	=
water	75:16	0:0	6	ch_data
op	75:23	0:0	6	->
water	75:25	0:0	6	t_env
op	75:30	0:0	6	[
water	75:31	0:0	6	ch_data
op	75:38	0:0	6	->
water	75:40	0:0	6	bs_num_env
op	75:51	0:0	6	-
water	75:53	0:0	6	i
op	75:54	0:0	6	]
op	75:56	0:0	6	-
water	75:58	0:0	6	2
call	75:60	75:76	6	*get_bits
arg	75:71	75:73	7	gb
water	75:71	0:0	8	gb
arg	75:75	75:76	7	2
water	75:75	0:0	8	2
op	75:78	0:0	6	-
water	75:80	0:0	6	2
water	75:81	0:0	6	;
water	76:8	0:0	4	bs_pointer
op	76:19	0:0	4	=
call	76:21	76:64	4	get_bits
arg	76:30	76:32	5	gb
water	76:30	0:0	6	gb
arg	76:34	76:64	5	ceil_log2[ch_data->bs_num_env]
water	76:34	0:0	6	ceil_log2
op	76:43	0:0	6	[
water	76:44	0:0	6	ch_data
op	76:51	0:0	6	->
water	76:53	0:0	6	bs_num_env
op	76:63	0:0	6	]
water	76:65	0:0	4	;
call	77:8	77:74	4	get_bits1_vector
arg	77:25	77:27	5	gb
water	77:25	0:0	6	gb
arg	77:29	77:53	5	ch_data->bs_freq_res+1
water	77:29	0:0	6	ch_data
op	77:36	0:0	6	->
water	77:38	0:0	6	bs_freq_res
op	77:50	0:0	6	+
water	77:52	0:0	6	1
arg	77:55	77:74	5	ch_data->bs_num_env
water	77:55	0:0	6	ch_data
op	77:62	0:0	6	->
water	77:64	0:0	6	bs_num_env
water	77:75	0:0	4	;
break	78:8	78:13	4	
water	79:4	0:0	4	}
call	80:4	80:30	2	av_assert0
arg	80:15	80:30	3	bs_pointer>=0
water	80:15	0:0	4	bs_pointer
op	80:26	0:0	4	>=
water	80:29	0:0	4	0
water	80:31	0:0	2	;
if	81:4	86:4	2	(bs_pointer > ch_data -> bs_num_env + 1)
cond	81:8	81:43	3	bs_pointer > ch_data -> bs_num_env + 1
water	81:8	0:0	4	bs_pointer
op	81:19	0:0	4	>
water	81:21	0:0	4	ch_data
op	81:28	0:0	4	->
water	81:30	0:0	4	bs_num_env
op	81:41	0:0	4	+
water	81:43	0:0	4	1
stmts	81:46	86:4	3	
water	81:46	0:0	4	{
call	82:8	84:25	4	av_log
arg	82:15	82:24	5	ac->avctx
water	82:15	0:0	6	ac
op	82:17	0:0	6	->
water	82:19	0:0	6	avctx
arg	82:26	82:38	5	AV_LOG_ERROR
water	82:26	0:0	6	AV_LOG_ERROR
arg	83:15	83:115	5	"Invalid bitstream, bs_pointer points to a middle noise border outside the time borders table: %d\n"
water	83:15	0:0	6	"Invalid bitstream, bs_pointer points to a middle noise border outside the time borders table: %d\n"
arg	84:15	84:25	5	bs_pointer
water	84:15	0:0	6	bs_pointer
water	84:26	0:0	4	;
return	85:8	85:17	4	-1
op	85:15	0:0	5	-
water	85:16	0:0	5	1
water	86:4	0:0	4	}
for	87:4	92:4	2	(i = 1 ;i <= ch_data -> bs_num_env;i ++)
forinit	87:9	87:14	3	i = 1 ;
water	87:9	0:0	4	i
op	87:11	0:0	4	=
water	87:13	0:0	4	1
water	87:14	0:0	4	;
cond	87:16	87:30	3	i <= ch_data -> bs_num_env
water	87:16	0:0	4	i
op	87:18	0:0	4	<=
water	87:21	0:0	4	ch_data
op	87:28	0:0	4	->
water	87:30	0:0	4	bs_num_env
forexpr	87:42	87:43	3	i ++
water	87:42	0:0	4	i
op	87:43	0:0	4	++
stmts	87:47	92:4	3	
water	87:47	0:0	4	{
if	88:8	91:8	4	(ch_data -> t_env [ i - 1 ] > ch_data -> t_env [ i ])
cond	88:12	88:50	5	ch_data -> t_env [ i - 1 ] > ch_data -> t_env [ i ]
water	88:12	0:0	6	ch_data
op	88:19	0:0	6	->
water	88:21	0:0	6	t_env
op	88:26	0:0	6	[
water	88:27	0:0	6	i
op	88:28	0:0	6	-
water	88:29	0:0	6	1
op	88:30	0:0	6	]
op	88:32	0:0	6	>
water	88:34	0:0	6	ch_data
op	88:41	0:0	6	->
water	88:43	0:0	6	t_env
op	88:48	0:0	6	[
water	88:49	0:0	6	i
op	88:50	0:0	6	]
stmts	88:53	91:8	5	
water	88:53	0:0	6	{
call	89:12	89:73	6	av_log
arg	89:19	89:28	7	ac->avctx
water	89:19	0:0	8	ac
op	89:21	0:0	8	->
water	89:23	0:0	8	avctx
arg	89:30	89:42	7	AV_LOG_ERROR
water	89:30	0:0	8	AV_LOG_ERROR
arg	89:44	89:73	7	"Non monotone time borders\n"
water	89:44	0:0	8	"Non monotone time borders\n"
water	89:74	0:0	6	;
return	90:12	90:21	6	-1
op	90:19	0:0	7	-
water	90:20	0:0	7	1
water	91:8	0:0	6	}
water	92:4	0:0	4	}
water	93:4	0:0	2	ch_data
op	93:11	0:0	2	->
water	93:13	0:0	2	bs_num_noise
op	93:26	0:0	2	=
water	93:28	0:0	2	(
water	93:29	0:0	2	ch_data
op	93:36	0:0	2	->
water	93:38	0:0	2	bs_num_env
op	93:49	0:0	2	>
water	93:51	0:0	2	1
water	93:52	0:0	2	)
op	93:54	0:0	2	+
water	93:56	0:0	2	1
water	93:57	0:0	2	;
water	94:4	0:0	2	ch_data
op	94:11	0:0	2	->
water	94:13	0:0	2	t_q
op	94:16	0:0	2	[
water	94:17	0:0	2	0
op	94:18	0:0	2	]
op	94:40	0:0	2	=
water	94:42	0:0	2	ch_data
op	94:49	0:0	2	->
water	94:51	0:0	2	t_env
op	94:56	0:0	2	[
water	94:57	0:0	2	0
op	94:58	0:0	2	]
water	94:59	0:0	2	;
water	95:4	0:0	2	ch_data
op	95:11	0:0	2	->
water	95:13	0:0	2	t_q
op	95:16	0:0	2	[
water	95:17	0:0	2	ch_data
op	95:24	0:0	2	->
water	95:26	0:0	2	bs_num_noise
op	95:38	0:0	2	]
op	95:40	0:0	2	=
water	95:42	0:0	2	ch_data
op	95:49	0:0	2	->
water	95:51	0:0	2	t_env
op	95:56	0:0	2	[
water	95:57	0:0	2	ch_data
op	95:64	0:0	2	->
water	95:66	0:0	2	bs_num_env
op	95:76	0:0	2	]
water	95:77	0:0	2	;
if	96:4	111:4	2	(ch_data -> bs_num_noise > 1)
cond	96:8	96:32	3	ch_data -> bs_num_noise > 1
water	96:8	0:0	4	ch_data
op	96:15	0:0	4	->
water	96:17	0:0	4	bs_num_noise
op	96:30	0:0	4	>
water	96:32	0:0	4	1
stmts	96:35	111:4	3	
water	96:35	0:0	4	{
decl	97:8	97:15	4	int	idx
if	98:8	100:8	4	(ch_data -> bs_frame_class == FIXFIX)
cond	98:12	98:39	5	ch_data -> bs_frame_class == FIXFIX
water	98:12	0:0	6	ch_data
op	98:19	0:0	6	->
water	98:21	0:0	6	bs_frame_class
op	98:36	0:0	6	==
water	98:39	0:0	6	FIXFIX
stmts	98:47	100:8	5	
water	98:47	0:0	6	{
water	99:12	0:0	6	idx
op	99:16	0:0	6	=
water	99:18	0:0	6	ch_data
op	99:25	0:0	6	->
water	99:27	0:0	6	bs_num_env
op	99:38	0:0	6	>>
water	99:41	0:0	6	1
water	99:42	0:0	6	;
water	100:8	0:0	6	}
else	100:10	102:8	4
stmts	100:15	102:8	5	
if	100:15	102:8	6	(ch_data -> bs_frame_class & 1)
cond	100:19	100:45	7	ch_data -> bs_frame_class & 1
water	100:19	0:0	8	ch_data
op	100:26	0:0	8	->
water	100:28	0:0	8	bs_frame_class
op	100:43	0:0	8	&
water	100:45	0:0	8	1
stmts	100:48	102:8	7	
water	100:48	0:0	8	{
water	101:12	0:0	8	idx
op	101:16	0:0	8	=
water	101:18	0:0	8	ch_data
op	101:25	0:0	8	->
water	101:27	0:0	8	bs_num_env
op	101:38	0:0	8	-
call	101:40	101:63	8	FFMAX
arg	101:46	101:60	9	bs_pointer-1
water	101:46	0:0	10	bs_pointer
op	101:57	0:0	10	-
water	101:59	0:0	10	1
arg	101:62	101:63	9	1
water	101:62	0:0	10	1
water	101:64	0:0	8	;
water	102:8	0:0	8	}
else	102:10	109:8	4
stmts	102:15	109:8	5	
water	102:15	0:0	6	{
if	103:12	104:23	6	(! bs_pointer)
cond	103:16	103:17	7	! bs_pointer
op	103:16	0:0	8	!
water	103:17	0:0	8	bs_pointer
stmts	104:16	104:23	7	
water	104:16	0:0	8	idx
op	104:20	0:0	8	=
water	104:22	0:0	8	1
water	104:23	0:0	8	;
else	105:12	106:45	6
stmts	105:17	106:45	7	
if	105:17	106:45	8	(bs_pointer == 1)
cond	105:21	105:35	9	bs_pointer == 1
water	105:21	0:0	10	bs_pointer
op	105:32	0:0	10	==
water	105:35	0:0	10	1
stmts	106:16	106:45	9	
water	106:16	0:0	10	idx
op	106:20	0:0	10	=
water	106:22	0:0	10	ch_data
op	106:29	0:0	10	->
water	106:31	0:0	10	bs_num_env
op	106:42	0:0	10	-
water	106:44	0:0	10	1
water	106:45	0:0	10	;
else	107:12	108:36	6
stmts	108:16	108:36	7	
water	108:16	0:0	8	idx
op	108:20	0:0	8	=
water	108:22	0:0	8	bs_pointer
op	108:33	0:0	8	-
water	108:35	0:0	8	1
water	108:36	0:0	8	;
water	109:8	0:0	6	}
water	110:8	0:0	4	ch_data
op	110:15	0:0	4	->
water	110:17	0:0	4	t_q
op	110:20	0:0	4	[
water	110:21	0:0	4	1
op	110:22	0:0	4	]
op	110:24	0:0	4	=
water	110:26	0:0	4	ch_data
op	110:33	0:0	4	->
water	110:35	0:0	4	t_env
op	110:40	0:0	4	[
water	110:41	0:0	4	idx
op	110:44	0:0	4	]
water	110:45	0:0	4	;
water	111:4	0:0	4	}
water	112:4	0:0	2	ch_data
op	112:11	0:0	2	->
water	112:13	0:0	2	e_a
op	112:16	0:0	2	[
water	112:17	0:0	2	0
op	112:18	0:0	2	]
op	112:20	0:0	2	=
op	112:22	0:0	2	-
water	112:23	0:0	2	(
water	112:24	0:0	2	ch_data
op	112:31	0:0	2	->
water	112:33	0:0	2	e_a
op	112:36	0:0	2	[
water	112:37	0:0	2	1
op	112:38	0:0	2	]
op	112:40	0:0	2	!=
water	112:43	0:0	2	bs_num_env_old
water	112:57	0:0	2	)
water	112:58	0:0	2	;
water	113:4	0:0	2	ch_data
op	113:11	0:0	2	->
water	113:13	0:0	2	e_a
op	113:16	0:0	2	[
water	113:17	0:0	2	1
op	113:18	0:0	2	]
op	113:20	0:0	2	=
op	113:22	0:0	2	-
water	113:23	0:0	2	1
water	113:24	0:0	2	;
if	114:4	116:4	2	(( ch_data -> bs_frame_class & 1 ) && bs_pointer)
cond	114:8	114:41	3	( ch_data -> bs_frame_class & 1 ) && bs_pointer
water	114:8	0:0	4	(
water	114:9	0:0	4	ch_data
op	114:16	0:0	4	->
water	114:18	0:0	4	bs_frame_class
op	114:33	0:0	4	&
water	114:35	0:0	4	1
water	114:36	0:0	4	)
op	114:38	0:0	4	&&
water	114:41	0:0	4	bs_pointer
stmts	114:53	116:4	3	
water	114:53	0:0	4	{
water	115:8	0:0	4	ch_data
op	115:15	0:0	4	->
water	115:17	0:0	4	e_a
op	115:20	0:0	4	[
water	115:21	0:0	4	1
op	115:22	0:0	4	]
op	115:24	0:0	4	=
water	115:26	0:0	4	ch_data
op	115:33	0:0	4	->
water	115:35	0:0	4	bs_num_env
op	115:46	0:0	4	+
water	115:48	0:0	4	1
op	115:50	0:0	4	-
water	115:52	0:0	4	bs_pointer
water	115:62	0:0	4	;
water	116:4	0:0	4	}
else	116:6	117:40	2
stmts	116:11	117:40	3	
if	116:11	117:40	4	(( ch_data -> bs_frame_class == 2 ) && ( bs_pointer > 1 ))
cond	116:15	116:64	5	( ch_data -> bs_frame_class == 2 ) && ( bs_pointer > 1 )
water	116:15	0:0	6	(
water	116:16	0:0	6	ch_data
op	116:23	0:0	6	->
water	116:25	0:0	6	bs_frame_class
op	116:40	0:0	6	==
water	116:43	0:0	6	2
water	116:44	0:0	6	)
op	116:46	0:0	6	&&
water	116:49	0:0	6	(
water	116:50	0:0	6	bs_pointer
op	116:61	0:0	6	>
water	116:63	0:0	6	1
water	116:64	0:0	6	)
stmts	117:8	117:40	5	
water	117:8	0:0	6	ch_data
op	117:15	0:0	6	->
water	117:17	0:0	6	e_a
op	117:20	0:0	6	[
water	117:21	0:0	6	1
op	117:22	0:0	6	]
op	117:24	0:0	6	=
water	117:26	0:0	6	bs_pointer
op	117:37	0:0	6	-
water	117:39	0:0	6	1
water	117:40	0:0	6	;
return	118:4	118:12	2	0
water	118:11	0:0	3	0
