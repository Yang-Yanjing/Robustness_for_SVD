func	1:0	22:0	0	static void	dash_free
params	1:21	0:0	1	
param	1:22	1:40	2	AVFormatContext *	s
stmnts	0:0	21:25	1	
decl	3:4	3:33	2	DASHContext	*c
op	3:19	0:0	2	=
water	3:21	0:0	2	s
op	3:22	0:0	2	->
water	3:24	0:0	2	priv_data
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	j
if	5:4	6:14	2	(! c -> streams)
cond	5:8	5:12	3	! c -> streams
op	5:8	0:0	4	!
water	5:9	0:0	4	c
op	5:10	0:0	4	->
water	5:12	0:0	4	streams
stmts	6:8	6:14	3	
return	6:8	6:14	4	
for	7:4	20:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:23	3	i < s -> nb_streams
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	s
op	7:21	0:0	4	->
water	7:23	0:0	4	nb_streams
forexpr	7:35	7:36	3	i ++
water	7:35	0:0	4	i
op	7:36	0:0	4	++
stmts	7:40	20:4	3	
water	7:40	0:0	4	{
decl	8:8	8:41	4	OutputStream	*os
op	8:25	0:0	4	=
op	8:27	0:0	4	&
water	8:28	0:0	4	c
op	8:29	0:0	4	->
water	8:31	0:0	4	streams
op	8:38	0:0	4	[
water	8:39	0:0	4	i
op	8:40	0:0	4	]
if	9:8	10:37	4	(os -> ctx && os -> ctx_inited)
cond	9:12	9:27	5	os -> ctx && os -> ctx_inited
water	9:12	0:0	6	os
op	9:14	0:0	6	->
water	9:16	0:0	6	ctx
op	9:20	0:0	6	&&
water	9:23	0:0	6	os
op	9:25	0:0	6	->
water	9:27	0:0	6	ctx_inited
stmts	10:12	10:37	5	
call	10:12	10:36	6	av_write_trailer
arg	10:29	10:36	7	os->ctx
water	10:29	0:0	8	os
op	10:31	0:0	8	->
water	10:33	0:0	8	ctx
water	10:37	0:0	6	;
if	11:8	12:32	4	(os -> ctx && os -> ctx -> pb)
cond	11:12	11:32	5	os -> ctx && os -> ctx -> pb
water	11:12	0:0	6	os
op	11:14	0:0	6	->
water	11:16	0:0	6	ctx
op	11:20	0:0	6	&&
water	11:23	0:0	6	os
op	11:25	0:0	6	->
water	11:27	0:0	6	ctx
op	11:30	0:0	6	->
water	11:32	0:0	6	pb
stmts	12:12	12:32	5	
call	12:12	12:31	6	av_free
arg	12:20	12:31	7	os->ctx->pb
water	12:20	0:0	8	os
op	12:22	0:0	8	->
water	12:24	0:0	8	ctx
op	12:27	0:0	8	->
water	12:29	0:0	8	pb
water	12:32	0:0	6	;
call	13:8	13:27	4	ffurl_close
arg	13:20	13:27	5	os->out
water	13:20	0:0	6	os
op	13:22	0:0	6	->
water	13:24	0:0	6	out
water	13:28	0:0	4	;
water	14:8	0:0	4	os
op	14:10	0:0	4	->
water	14:12	0:0	4	out
op	14:16	0:0	4	=
water	14:19	0:0	4	NULL
water	14:23	0:0	4	;
if	15:8	16:42	4	(os -> ctx)
cond	15:12	15:16	5	os -> ctx
water	15:12	0:0	6	os
op	15:14	0:0	6	->
water	15:16	0:0	6	ctx
stmts	16:12	16:42	5	
call	16:12	16:41	6	avformat_free_context
arg	16:34	16:41	7	os->ctx
water	16:34	0:0	8	os
op	16:36	0:0	8	->
water	16:38	0:0	8	ctx
water	16:42	0:0	6	;
for	17:8	18:36	4	(j = 0 ;j < os -> nb_segments;j ++)
forinit	17:13	17:18	5	j = 0 ;
water	17:13	0:0	6	j
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:28	5	j < os -> nb_segments
water	17:20	0:0	6	j
op	17:22	0:0	6	<
water	17:24	0:0	6	os
op	17:26	0:0	6	->
water	17:28	0:0	6	nb_segments
forexpr	17:41	17:42	5	j ++
water	17:41	0:0	6	j
op	17:42	0:0	6	++
stmts	18:12	18:36	5	
call	18:12	18:35	6	av_free
arg	18:20	18:35	7	os->segments[j]
water	18:20	0:0	8	os
op	18:22	0:0	8	->
water	18:24	0:0	8	segments
op	18:32	0:0	8	[
water	18:33	0:0	8	j
op	18:34	0:0	8	]
water	18:36	0:0	6	;
call	19:8	19:28	4	av_free
arg	19:16	19:28	5	os->segments
water	19:16	0:0	6	os
op	19:18	0:0	6	->
water	19:20	0:0	6	segments
water	19:29	0:0	4	;
water	20:4	0:0	4	}
call	21:4	21:24	2	av_freep
arg	21:13	21:24	3	&c->streams
op	21:13	0:0	4	&
water	21:14	0:0	4	c
op	21:15	0:0	4	->
water	21:17	0:0	4	streams
water	21:25	0:0	2	;
