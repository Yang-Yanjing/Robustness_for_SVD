func	1:0	45:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:57	2	AVFrame *	in
stmnts	0:0	44:40	1	
decl	3:4	3:48	2	PixdescTestContext	*priv
op	3:29	0:0	2	=
water	3:31	0:0	2	inlink
op	3:37	0:0	2	->
water	3:39	0:0	2	dst
op	3:42	0:0	2	->
water	3:44	0:0	2	priv
decl	4:4	4:54	2	AVFilterLink	*outlink
op	4:29	0:0	2	=
water	4:31	0:0	2	inlink
op	4:37	0:0	2	->
water	4:39	0:0	2	dst
op	4:42	0:0	2	->
water	4:44	0:0	2	outputs
op	4:51	0:0	2	[
water	4:52	0:0	2	0
op	4:53	0:0	2	]
decl	5:4	5:16	2	AVFrame	*out
decl	6:4	6:42	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:42	2	int	c
water	6:12	0:0	2	,
decl	6:4	6:42	2	int	w
op	6:16	0:0	2	=
water	6:18	0:0	2	inlink
op	6:24	0:0	2	->
water	6:26	0:0	2	w
water	6:27	0:0	2	,
decl	6:4	6:42	2	int	h
op	6:31	0:0	2	=
water	6:33	0:0	2	inlink
op	6:39	0:0	2	->
water	6:41	0:0	2	h
decl	7:4	7:67	2	const int	cw
op	7:17	0:0	2	=
call	7:19	7:66	3	FF_CEIL_RSHIFT
arg	7:34	7:35	4	w
water	7:34	0:0	5	w
arg	7:37	7:66	4	priv->pix_desc->log2_chroma_w
water	7:37	0:0	5	priv
op	7:41	0:0	5	->
water	7:43	0:0	5	pix_desc
op	7:51	0:0	5	->
water	7:53	0:0	5	log2_chroma_w
decl	8:4	8:67	2	const int	ch
op	8:17	0:0	2	=
call	8:19	8:66	3	FF_CEIL_RSHIFT
arg	8:34	8:35	4	h
water	8:34	0:0	5	h
arg	8:37	8:66	4	priv->pix_desc->log2_chroma_h
water	8:37	0:0	5	priv
op	8:41	0:0	5	->
water	8:43	0:0	5	pix_desc
op	8:51	0:0	5	->
water	8:53	0:0	5	log2_chroma_h
water	9:4	0:0	2	out
op	9:8	0:0	2	=
call	9:10	9:61	2	ff_get_video_buffer
arg	9:30	9:37	3	outlink
water	9:30	0:0	4	outlink
arg	9:39	9:49	3	outlink->w
water	9:39	0:0	4	outlink
op	9:46	0:0	4	->
water	9:48	0:0	4	w
arg	9:51	9:61	3	outlink->h
water	9:51	0:0	4	outlink
op	9:58	0:0	4	->
water	9:60	0:0	4	h
water	9:62	0:0	2	;
if	10:4	13:4	2	(! out)
cond	10:8	10:9	3	! out
op	10:8	0:0	4	!
water	10:9	0:0	4	out
stmts	10:14	13:4	3	
water	10:14	0:0	4	{
call	11:8	11:25	4	av_frame_free
arg	11:22	11:25	5	&in
op	11:22	0:0	6	&
water	11:23	0:0	6	in
water	11:26	0:0	4	;
return	12:8	12:30	4	AVERROR(ENOMEM)
call	12:15	12:29	5	AVERROR
arg	12:23	12:29	6	ENOMEM
water	12:23	0:0	7	ENOMEM
water	13:4	0:0	4	}
call	14:4	14:31	2	av_frame_copy_props
arg	14:24	14:27	3	out
water	14:24	0:0	4	out
arg	14:29	14:31	3	in
water	14:29	0:0	4	in
water	14:32	0:0	2	;
for	15:4	22:4	2	(i = 0 ;i < 4;i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:20	3	i < 4
water	15:16	0:0	4	i
op	15:18	0:0	4	<
water	15:20	0:0	4	4
forexpr	15:23	15:24	3	i ++
water	15:23	0:0	4	i
op	15:24	0:0	4	++
stmts	15:28	22:4	3	
water	15:28	0:0	4	{
decl	16:8	16:48	4	const int	h1
op	16:21	0:0	4	=
water	16:23	0:0	4	i
op	16:25	0:0	4	==
water	16:28	0:0	4	1
op	16:30	0:0	4	||
water	16:33	0:0	4	i
op	16:35	0:0	4	==
water	16:38	0:0	4	2
water	16:40	0:0	4	?
water	16:42	0:0	4	ch
water	16:45	0:0	4	:
water	16:47	0:0	4	h
if	17:8	21:8	4	(out -> data [ i ])
cond	17:12	17:23	5	out -> data [ i ]
water	17:12	0:0	6	out
op	17:15	0:0	6	->
water	17:17	0:0	6	data
op	17:21	0:0	6	[
water	17:22	0:0	6	i
op	17:23	0:0	6	]
stmts	17:26	21:8	5	
water	17:26	0:0	6	{
decl	18:12	19:70	6	uint8_t	*data
op	18:26	0:0	6	=
water	18:28	0:0	6	out
op	18:31	0:0	6	->
water	18:33	0:0	6	data
op	18:37	0:0	6	[
water	18:38	0:0	6	i
op	18:39	0:0	6	]
op	18:41	0:0	6	+
water	19:16	0:0	6	(
water	19:17	0:0	6	out
op	19:20	0:0	6	->
water	19:22	0:0	6	linesize
op	19:30	0:0	6	[
water	19:31	0:0	6	i
op	19:32	0:0	6	]
op	19:34	0:0	6	>
water	19:36	0:0	6	0
water	19:38	0:0	6	?
water	19:40	0:0	6	0
water	19:42	0:0	6	:
water	19:44	0:0	6	out
op	19:47	0:0	6	->
water	19:49	0:0	6	linesize
op	19:57	0:0	6	[
water	19:58	0:0	6	i
op	19:59	0:0	6	]
op	19:61	0:0	6	*
water	19:63	0:0	6	(
water	19:64	0:0	6	h1
op	19:66	0:0	6	-
water	19:67	0:0	6	1
water	19:68	0:0	6	)
water	19:69	0:0	6	)
call	20:12	20:56	6	memset
arg	20:19	20:23	7	data
water	20:19	0:0	8	data
arg	20:25	20:26	7	0
water	20:25	0:0	8	0
arg	20:28	20:56	7	FFABS(out->linesize[i])*h1
call	20:28	20:50	8	FFABS
arg	20:34	20:50	9	out->linesize[i]
water	20:34	0:0	10	out
op	20:37	0:0	10	->
water	20:39	0:0	10	linesize
op	20:47	0:0	10	[
water	20:48	0:0	10	i
op	20:49	0:0	10	]
op	20:52	0:0	8	*
water	20:54	0:0	8	h1
water	20:57	0:0	6	;
water	21:8	0:0	6	}
water	22:4	0:0	4	}
if	24:4	26:57	2	(priv -> pix_desc -> flags & AV_PIX_FMT_FLAG_PAL || priv -> pix_desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL)
cond	24:8	25:32	3	priv -> pix_desc -> flags & AV_PIX_FMT_FLAG_PAL || priv -> pix_desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL
water	24:8	0:0	4	priv
op	24:12	0:0	4	->
water	24:14	0:0	4	pix_desc
op	24:22	0:0	4	->
water	24:24	0:0	4	flags
op	24:30	0:0	4	&
water	24:32	0:0	4	AV_PIX_FMT_FLAG_PAL
op	24:52	0:0	4	||
water	25:8	0:0	4	priv
op	25:12	0:0	4	->
water	25:14	0:0	4	pix_desc
op	25:22	0:0	4	->
water	25:24	0:0	4	flags
op	25:30	0:0	4	&
water	25:32	0:0	4	AV_PIX_FMT_FLAG_PSEUDOPAL
stmts	26:8	26:57	3	
call	26:8	26:56	4	memcpy
arg	26:15	26:27	5	out->data[1]
water	26:15	0:0	6	out
op	26:18	0:0	6	->
water	26:20	0:0	6	data
op	26:24	0:0	6	[
water	26:25	0:0	6	1
op	26:26	0:0	6	]
arg	26:29	26:40	5	in->data[1]
water	26:29	0:0	6	in
op	26:31	0:0	6	->
water	26:33	0:0	6	data
op	26:37	0:0	6	[
water	26:38	0:0	6	1
op	26:39	0:0	6	]
arg	26:42	26:56	5	AVPALETTE_SIZE
water	26:42	0:0	6	AVPALETTE_SIZE
water	26:57	0:0	4	;
for	27:4	42:4	2	(c = 0 ;c < priv -> pix_desc -> nb_components;c ++)
forinit	27:9	27:14	3	c = 0 ;
water	27:9	0:0	4	c
op	27:11	0:0	4	=
water	27:13	0:0	4	0
water	27:14	0:0	4	;
cond	27:16	27:36	3	c < priv -> pix_desc -> nb_components
water	27:16	0:0	4	c
op	27:18	0:0	4	<
water	27:20	0:0	4	priv
op	27:24	0:0	4	->
water	27:26	0:0	4	pix_desc
op	27:34	0:0	4	->
water	27:36	0:0	4	nb_components
forexpr	27:51	27:52	3	c ++
water	27:51	0:0	4	c
op	27:52	0:0	4	++
stmts	27:56	42:4	3	
water	27:56	0:0	4	{
decl	28:8	28:48	4	const int	w1
op	28:21	0:0	4	=
water	28:23	0:0	4	c
op	28:25	0:0	4	==
water	28:28	0:0	4	1
op	28:30	0:0	4	||
water	28:33	0:0	4	c
op	28:35	0:0	4	==
water	28:38	0:0	4	2
water	28:40	0:0	4	?
water	28:42	0:0	4	cw
water	28:45	0:0	4	:
water	28:47	0:0	4	w
decl	29:8	29:48	4	const int	h1
op	29:21	0:0	4	=
water	29:23	0:0	4	c
op	29:25	0:0	4	==
water	29:28	0:0	4	1
op	29:30	0:0	4	||
water	29:33	0:0	4	c
op	29:35	0:0	4	==
water	29:38	0:0	4	2
water	29:40	0:0	4	?
water	29:42	0:0	4	ch
water	29:45	0:0	4	:
water	29:47	0:0	4	h
for	30:8	41:8	4	(i = 0 ;i < h1;i ++)
forinit	30:13	30:18	5	i = 0 ;
water	30:13	0:0	6	i
op	30:15	0:0	6	=
water	30:17	0:0	6	0
water	30:18	0:0	6	;
cond	30:20	30:24	5	i < h1
water	30:20	0:0	6	i
op	30:22	0:0	6	<
water	30:24	0:0	6	h1
forexpr	30:28	30:29	5	i ++
water	30:28	0:0	6	i
op	30:29	0:0	6	++
stmts	30:33	41:8	5	
water	30:33	0:0	6	{
call	31:12	35:45	6	av_read_image_line
arg	31:31	31:41	7	priv->line
water	31:31	0:0	8	priv
op	31:35	0:0	8	->
water	31:37	0:0	8	line
arg	32:31	32:46	7	(void*)in->data
water	32:31	0:0	8	(
water	32:32	0:0	8	void
op	32:36	0:0	8	*
water	32:37	0:0	8	)
water	32:38	0:0	8	in
op	32:40	0:0	8	->
water	32:42	0:0	8	data
arg	33:31	33:43	7	in->linesize
water	33:31	0:0	8	in
op	33:33	0:0	8	->
water	33:35	0:0	8	linesize
arg	34:31	34:45	7	priv->pix_desc
water	34:31	0:0	8	priv
op	34:35	0:0	8	->
water	34:37	0:0	8	pix_desc
arg	35:31	35:32	7	0
water	35:31	0:0	8	0
arg	35:34	35:35	7	i
water	35:34	0:0	8	i
arg	35:37	35:38	7	c
water	35:37	0:0	8	c
arg	35:40	35:42	7	w1
water	35:40	0:0	8	w1
arg	35:44	35:45	7	0
water	35:44	0:0	8	0
water	35:46	0:0	6	;
call	36:12	40:43	6	av_write_image_line
arg	36:32	36:42	7	priv->line
water	36:32	0:0	8	priv
op	36:36	0:0	8	->
water	36:38	0:0	8	line
arg	37:32	37:41	7	out->data
water	37:32	0:0	8	out
op	37:35	0:0	8	->
water	37:37	0:0	8	data
arg	38:32	38:45	7	out->linesize
water	38:32	0:0	8	out
op	38:35	0:0	8	->
water	38:37	0:0	8	linesize
arg	39:32	39:46	7	priv->pix_desc
water	39:32	0:0	8	priv
op	39:36	0:0	8	->
water	39:38	0:0	8	pix_desc
arg	40:32	40:33	7	0
water	40:32	0:0	8	0
arg	40:35	40:36	7	i
water	40:35	0:0	8	i
arg	40:38	40:39	7	c
water	40:38	0:0	8	c
arg	40:41	40:43	7	w1
water	40:41	0:0	8	w1
water	40:44	0:0	6	;
water	41:8	0:0	6	}
water	42:4	0:0	4	}
call	43:4	43:21	2	av_frame_free
arg	43:18	43:21	3	&in
op	43:18	0:0	4	&
water	43:19	0:0	4	in
water	43:22	0:0	2	;
return	44:4	44:40	2	ff_filter_frame(outlink,out)
call	44:11	44:39	3	ff_filter_frame
arg	44:27	44:34	4	outlink
water	44:27	0:0	5	outlink
arg	44:36	44:39	4	out
water	44:36	0:0	5	out
