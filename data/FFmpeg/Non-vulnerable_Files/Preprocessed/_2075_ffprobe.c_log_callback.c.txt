decl	1:7	1:26	0	int	log_buffer_size
func	2:0	44:0	0	static void	log_callback
params	2:24	0:0	1	
param	2:25	2:34	2	void *	ptr
param	2:36	2:45	2	int	level
param	2:47	2:62	2	const char *	fmt
param	2:64	2:74	2	va_list	vl
stmnts	0:0	42:36	1	
decl	4:4	4:49	2	AVClass	*avc
op	4:17	0:0	2	=
water	4:19	0:0	2	ptr
water	4:23	0:0	2	?
op	4:25	0:0	2	*
water	4:26	0:0	2	(
water	4:27	0:0	2	AVClass
op	4:35	0:0	2	*
op	4:36	0:0	2	*
water	4:37	0:0	2	)
water	4:39	0:0	2	ptr
water	4:43	0:0	2	:
water	4:45	0:0	2	NULL
decl	5:4	5:15	2	va_list	vl2
decl	6:4	6:19	2	char	line[1024]
water	7:4	0:0	2	static
water	7:11	0:0	2	int
water	7:15	0:0	2	print_prefix
op	7:28	0:0	2	=
water	7:30	0:0	2	1
water	7:31	0:0	2	;
decl	8:4	8:24	2	void	*new_log_buffer
call	9:4	9:19	2	va_copy
arg	9:12	9:15	3	vl2
water	9:12	0:0	4	vl2
arg	9:17	9:19	3	vl
water	9:17	0:0	4	vl
water	9:20	0:0	2	;
call	10:4	10:47	2	av_log_default_callback
arg	10:28	10:31	3	ptr
water	10:28	0:0	4	ptr
arg	10:33	10:38	3	level
water	10:33	0:0	4	level
arg	10:40	10:43	3	fmt
water	10:40	0:0	4	fmt
arg	10:45	10:47	3	vl
water	10:45	0:0	4	vl
water	10:48	0:0	2	;
call	11:4	11:78	2	av_log_format_line
arg	11:23	11:26	3	ptr
water	11:23	0:0	4	ptr
arg	11:28	11:33	3	level
water	11:28	0:0	4	level
arg	11:35	11:38	3	fmt
water	11:35	0:0	4	fmt
arg	11:40	11:43	3	vl2
water	11:40	0:0	4	vl2
arg	11:45	11:49	3	line
water	11:45	0:0	4	line
arg	11:51	11:63	3	sizeof(line)
op	11:51	0:0	4	sizeof
water	11:57	0:0	4	(
water	11:58	0:0	4	line
water	11:62	0:0	4	)
arg	11:65	11:78	3	&print_prefix
op	11:65	0:0	4	&
water	11:66	0:0	4	print_prefix
water	11:79	0:0	2	;
call	12:4	12:14	2	va_end
arg	12:11	12:14	3	vl2
water	12:11	0:0	4	vl2
water	12:15	0:0	2	;
call	14:4	14:33	2	pthread_mutex_lock
arg	14:23	14:33	3	&log_mutex
op	14:23	0:0	4	&
water	14:24	0:0	4	log_mutex
water	14:34	0:0	2	;
water	15:4	0:0	2	new_log_buffer
op	15:19	0:0	2	=
call	15:21	15:90	2	av_realloc_array
arg	15:38	15:48	3	log_buffer
water	15:38	0:0	4	log_buffer
arg	15:50	15:69	3	log_buffer_size+1
water	15:50	0:0	4	log_buffer_size
op	15:66	0:0	4	+
water	15:68	0:0	4	1
arg	15:71	15:90	3	sizeof(*log_buffer)
op	15:71	0:0	4	sizeof
water	15:77	0:0	4	(
op	15:78	0:0	4	*
water	15:79	0:0	4	log_buffer
water	15:89	0:0	4	)
water	15:91	0:0	2	;
if	16:4	41:4	2	(new_log_buffer)
cond	16:8	16:8	3	new_log_buffer
water	16:8	0:0	4	new_log_buffer
stmts	16:24	41:4	3	
water	16:24	0:0	4	{
decl	17:8	17:17	4	char	*msg
decl	18:8	18:13	4	int	i
water	19:8	0:0	4	log_buffer
op	19:19	0:0	4	=
water	19:21	0:0	4	new_log_buffer
water	19:35	0:0	4	;
call	20:8	20:83	4	memset
arg	20:15	20:43	5	&log_buffer[log_buffer_size]
op	20:15	0:0	6	&
water	20:16	0:0	6	log_buffer
op	20:26	0:0	6	[
water	20:27	0:0	6	log_buffer_size
op	20:42	0:0	6	]
arg	20:45	20:46	5	0
water	20:45	0:0	6	0
arg	20:48	20:83	5	sizeof(log_buffer[log_buffer_size])
op	20:48	0:0	6	sizeof
water	20:54	0:0	6	(
water	20:55	0:0	6	log_buffer
op	20:65	0:0	6	[
water	20:66	0:0	6	log_buffer_size
op	20:81	0:0	6	]
water	20:82	0:0	6	)
water	20:84	0:0	4	;
water	21:8	0:0	4	log_buffer
op	21:18	0:0	4	[
water	21:19	0:0	4	log_buffer_size
op	21:34	0:0	4	]
op	21:35	0:0	4	.
water	21:36	0:0	4	context_name
op	21:48	0:0	4	=
water	21:50	0:0	4	avc
water	21:54	0:0	4	?
call	21:56	21:85	4	av_strdup
arg	21:66	21:85	5	avc->item_name(ptr)
call	21:66	21:84	6	avc->item_name
arg	21:81	21:84	7	ptr
water	21:81	0:0	8	ptr
water	21:87	0:0	4	:
water	21:89	0:0	4	NULL
water	21:93	0:0	4	;
if	22:8	25:8	4	(avc)
cond	22:12	22:12	5	avc
water	22:12	0:0	6	avc
stmts	22:17	25:8	5	
water	22:17	0:0	6	{
if	23:12	23:96	6	(avc -> get_category)
cond	23:16	23:21	7	avc -> get_category
water	23:16	0:0	8	avc
op	23:19	0:0	8	->
water	23:21	0:0	8	get_category
stmts	23:35	23:96	7	
water	23:35	0:0	8	log_buffer
op	23:45	0:0	8	[
water	23:46	0:0	8	log_buffer_size
op	23:61	0:0	8	]
op	23:62	0:0	8	.
water	23:63	0:0	8	category
op	23:72	0:0	8	=
call	23:74	23:95	8	avc->get_category
arg	23:92	23:95	9	ptr
water	23:92	0:0	10	ptr
water	23:96	0:0	8	;
else	24:12	24:87	6
stmts	24:35	24:87	7	
water	24:35	0:0	8	log_buffer
op	24:45	0:0	8	[
water	24:46	0:0	8	log_buffer_size
op	24:61	0:0	8	]
op	24:62	0:0	8	.
water	24:63	0:0	8	category
op	24:72	0:0	8	=
water	24:74	0:0	8	avc
op	24:77	0:0	8	->
water	24:79	0:0	8	category
water	24:87	0:0	8	;
water	25:8	0:0	6	}
water	26:8	0:0	4	log_buffer
op	26:18	0:0	4	[
water	26:19	0:0	4	log_buffer_size
op	26:34	0:0	4	]
op	26:35	0:0	4	.
water	26:36	0:0	4	log_level
op	26:48	0:0	4	=
water	26:50	0:0	4	level
water	26:55	0:0	4	;
water	27:8	0:0	4	msg
op	27:12	0:0	4	=
water	27:14	0:0	4	log_buffer
op	27:24	0:0	4	[
water	27:25	0:0	4	log_buffer_size
op	27:40	0:0	4	]
op	27:41	0:0	4	.
water	27:42	0:0	4	log_message
op	27:54	0:0	4	=
call	27:56	27:70	4	av_strdup
arg	27:66	27:70	5	line
water	27:66	0:0	6	line
water	27:71	0:0	4	;
for	28:8	30:8	4	(i =strlen (msg ) - 1 ;i >= 0 && msg [ i ] == '\n';i --)
forinit	28:13	28:30	5	i =strlen (msg ) - 1 ;
water	28:13	0:0	6	i
op	28:14	0:0	6	=
call	28:15	28:25	6	strlen
arg	28:22	28:25	7	msg
water	28:22	0:0	8	msg
op	28:27	0:0	6	-
water	28:29	0:0	6	1
water	28:30	0:0	6	;
cond	28:32	28:50	5	i >= 0 && msg [ i ] == '\n'
water	28:32	0:0	6	i
op	28:33	0:0	6	>=
water	28:35	0:0	6	0
op	28:37	0:0	6	&&
water	28:40	0:0	6	msg
op	28:43	0:0	6	[
water	28:44	0:0	6	i
op	28:45	0:0	6	]
op	28:47	0:0	6	==
water	28:50	0:0	6	'\n'
forexpr	28:56	28:57	5	i --
water	28:56	0:0	6	i
op	28:57	0:0	6	--
stmts	28:61	30:8	5	
water	28:61	0:0	6	{
water	29:12	0:0	6	msg
op	29:15	0:0	6	[
water	29:16	0:0	6	i
op	29:17	0:0	6	]
op	29:19	0:0	6	=
water	29:21	0:0	6	0
water	29:22	0:0	6	;
water	30:8	0:0	6	}
if	31:8	39:8	4	(avc && avc -> parent_log_context_offset)
cond	31:12	31:24	5	avc && avc -> parent_log_context_offset
water	31:12	0:0	6	avc
op	31:16	0:0	6	&&
water	31:19	0:0	6	avc
op	31:22	0:0	6	->
water	31:24	0:0	6	parent_log_context_offset
stmts	31:51	39:8	5	
water	31:51	0:0	6	{
decl	32:12	33:66	6	AVClass	**parent
op	32:29	0:0	6	=
op	32:31	0:0	6	*
call	32:32	33:65	7	(AVClass***)
arg	32:47	33:65	8	((uint8_t*)ptr)+avc->parent_log_context_offset
water	32:47	0:0	9	(
water	32:48	0:0	9	(
water	32:49	0:0	9	uint8_t
op	32:57	0:0	9	*
water	32:58	0:0	9	)
water	32:60	0:0	9	ptr
water	32:63	0:0	9	)
op	32:65	0:0	9	+
water	33:35	0:0	9	avc
op	33:38	0:0	9	->
water	33:40	0:0	9	parent_log_context_offset
if	34:12	38:12	6	(parent && * parent)
cond	34:16	34:27	7	parent && * parent
water	34:16	0:0	8	parent
op	34:23	0:0	8	&&
op	34:26	0:0	8	*
water	34:27	0:0	8	parent
stmts	34:35	38:12	7	
water	34:35	0:0	8	{
water	35:16	0:0	8	log_buffer
op	35:26	0:0	8	[
water	35:27	0:0	8	log_buffer_size
op	35:42	0:0	8	]
op	35:43	0:0	8	.
water	35:44	0:0	8	parent_name
op	35:56	0:0	8	=
call	35:58	35:96	8	av_strdup
arg	35:68	35:96	9	(*parent)->item_name(parent)
water	35:68	0:0	10	(
op	35:69	0:0	10	*
water	35:70	0:0	10	parent
water	35:76	0:0	10	)
op	35:77	0:0	10	->
call	35:79	35:95	10	item_name
arg	35:89	35:95	11	parent
water	35:89	0:0	12	parent
water	35:97	0:0	8	;
water	36:16	0:0	8	log_buffer
op	36:26	0:0	8	[
water	36:27	0:0	8	log_buffer_size
op	36:42	0:0	8	]
op	36:43	0:0	8	.
water	36:44	0:0	8	parent_category
op	36:60	0:0	8	=
water	37:20	0:0	8	(
op	37:21	0:0	8	*
water	37:22	0:0	8	parent
water	37:28	0:0	8	)
op	37:29	0:0	8	->
water	37:31	0:0	8	get_category
water	37:44	0:0	8	?
water	37:46	0:0	8	(
op	37:47	0:0	8	*
water	37:48	0:0	8	parent
water	37:54	0:0	8	)
op	37:55	0:0	8	->
call	37:57	37:76	8	get_category
arg	37:70	37:76	9	parent
water	37:70	0:0	10	parent
water	37:78	0:0	8	:
water	37:79	0:0	8	(
op	37:80	0:0	8	*
water	37:81	0:0	8	parent
water	37:87	0:0	8	)
op	37:88	0:0	8	->
water	37:90	0:0	8	category
water	37:98	0:0	8	;
water	38:12	0:0	8	}
water	39:8	0:0	6	}
water	40:8	0:0	4	log_buffer_size
op	40:24	0:0	4	++
water	40:26	0:0	4	;
water	41:4	0:0	4	}
call	42:4	42:35	2	pthread_mutex_unlock
arg	42:25	42:35	3	&log_mutex
op	42:25	0:0	4	&
water	42:26	0:0	4	log_mutex
water	42:36	0:0	2	;
