func	2:0	48:0	0	static int	config_input
params	2:23	0:0	1	
param	2:24	2:44	2	AVFilterLink *	inlink
stmnts	0:0	47:12	1	
decl	4:4	4:38	2	AVFilterContext	*ctx
op	4:25	0:0	2	=
water	4:27	0:0	2	inlink
op	4:33	0:0	2	->
water	4:35	0:0	2	dst
decl	5:4	5:36	2	AudioDelayContext	*s
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	priv
decl	6:4	6:34	2	char	*p
water	6:11	0:0	2	,
decl	6:4	6:34	2	char	*arg
water	6:17	0:0	2	,
decl	6:4	6:34	2	char	*saveptr
op	6:28	0:0	2	=
water	6:30	0:0	2	NULL
decl	7:4	7:9	2	int	i
water	8:4	0:0	2	s
op	8:5	0:0	2	->
water	8:7	0:0	2	chandelay
op	8:17	0:0	2	=
call	8:19	8:68	2	av_calloc
arg	8:29	8:45	3	inlink->channels
water	8:29	0:0	4	inlink
op	8:35	0:0	4	->
water	8:37	0:0	4	channels
arg	8:47	8:68	3	sizeof(*s->chandelay)
op	8:47	0:0	4	sizeof
water	8:53	0:0	4	(
op	8:54	0:0	4	*
water	8:55	0:0	4	s
op	8:56	0:0	4	->
water	8:58	0:0	4	chandelay
water	8:67	0:0	4	)
water	8:69	0:0	2	;
if	9:4	10:30	2	(! s -> chandelay)
cond	9:8	9:12	3	! s -> chandelay
op	9:8	0:0	4	!
water	9:9	0:0	4	s
op	9:10	0:0	4	->
water	9:12	0:0	4	chandelay
stmts	10:8	10:30	3	
return	10:8	10:30	4	AVERROR(ENOMEM)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	ENOMEM
water	10:23	0:0	7	ENOMEM
water	11:4	0:0	2	s
op	11:5	0:0	2	->
water	11:7	0:0	2	nb_delays
op	11:17	0:0	2	=
water	11:19	0:0	2	inlink
op	11:25	0:0	2	->
water	11:27	0:0	2	channels
water	11:35	0:0	2	;
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	block_align
op	12:19	0:0	2	=
call	12:21	12:59	2	av_get_bytes_per_sample
arg	12:45	12:59	3	inlink->format
water	12:45	0:0	4	inlink
op	12:51	0:0	4	->
water	12:53	0:0	4	format
water	12:60	0:0	2	;
water	13:4	0:0	2	p
op	13:6	0:0	2	=
water	13:8	0:0	2	s
op	13:9	0:0	2	->
water	13:11	0:0	2	delays
water	13:17	0:0	2	;
for	14:4	26:4	2	(i = 0 ;i < s -> nb_delays;i ++)
forinit	14:9	14:14	3	i = 0 ;
water	14:9	0:0	4	i
op	14:11	0:0	4	=
water	14:13	0:0	4	0
water	14:14	0:0	4	;
cond	14:16	14:23	3	i < s -> nb_delays
water	14:16	0:0	4	i
op	14:18	0:0	4	<
water	14:20	0:0	4	s
op	14:21	0:0	4	->
water	14:23	0:0	4	nb_delays
forexpr	14:34	14:35	3	i ++
water	14:34	0:0	4	i
op	14:35	0:0	4	++
stmts	14:39	26:4	3	
water	14:39	0:0	4	{
decl	15:8	15:39	4	ChanDelay	*d
op	15:21	0:0	4	=
op	15:23	0:0	4	&
water	15:24	0:0	4	s
op	15:25	0:0	4	->
water	15:27	0:0	4	chandelay
op	15:36	0:0	4	[
water	15:37	0:0	4	i
op	15:38	0:0	4	]
decl	16:8	16:19	4	float	delay
if	17:8	18:17	4	(! ( arg =av_strtok (p ,"|" ,& saveptr ) ))
cond	17:12	17:47	5	! ( arg =av_strtok (p ,"|" ,& saveptr ) )
op	17:12	0:0	6	!
water	17:13	0:0	6	(
water	17:14	0:0	6	arg
op	17:18	0:0	6	=
call	17:20	17:46	6	av_strtok
arg	17:30	17:31	7	p
water	17:30	0:0	8	p
arg	17:33	17:36	7	"|"
water	17:33	0:0	8	"|"
arg	17:38	17:46	7	&saveptr
op	17:38	0:0	8	&
water	17:39	0:0	8	saveptr
water	17:47	0:0	6	)
stmts	18:12	18:17	5	
break	18:12	18:17	6	
water	19:8	0:0	4	p
op	19:10	0:0	4	=
water	19:12	0:0	4	NULL
water	19:16	0:0	4	;
call	20:8	20:32	4	sscanf
arg	20:15	20:18	5	arg
water	20:15	0:0	6	arg
arg	20:20	20:24	5	"%f"
water	20:20	0:0	6	"%f"
arg	20:26	20:32	5	&delay
op	20:26	0:0	6	&
water	20:27	0:0	6	delay
water	20:33	0:0	4	;
water	21:8	0:0	4	d
op	21:9	0:0	4	->
water	21:11	0:0	4	delay
op	21:17	0:0	4	=
water	21:19	0:0	4	delay
op	21:25	0:0	4	*
water	21:27	0:0	4	inlink
op	21:33	0:0	4	->
water	21:35	0:0	4	sample_rate
op	21:47	0:0	4	/
water	21:49	0:0	4	1000
op	21:53	0:0	4	.
water	21:54	0:0	4	0
water	21:55	0:0	4	;
if	22:8	25:8	4	(d -> delay < 0)
cond	22:12	22:23	5	d -> delay < 0
water	22:12	0:0	6	d
op	22:13	0:0	6	->
water	22:15	0:0	6	delay
op	22:21	0:0	6	<
water	22:23	0:0	6	0
stmts	22:26	25:8	5	
water	22:26	0:0	6	{
call	23:12	23:76	6	av_log
arg	23:19	23:22	7	ctx
water	23:19	0:0	8	ctx
arg	23:24	23:36	7	AV_LOG_ERROR
water	23:24	0:0	8	AV_LOG_ERROR
arg	23:38	23:76	7	"Delay must be non negative number.\n"
water	23:38	0:0	8	"Delay must be non negative number.\n"
water	23:77	0:0	6	;
return	24:12	24:34	6	AVERROR(EINVAL)
call	24:19	24:33	7	AVERROR
arg	24:27	24:33	8	EINVAL
water	24:27	0:0	9	EINVAL
water	25:8	0:0	6	}
water	26:4	0:0	4	}
for	27:4	35:4	2	(i = 0 ;i < s -> nb_delays;i ++)
forinit	27:9	27:14	3	i = 0 ;
water	27:9	0:0	4	i
op	27:11	0:0	4	=
water	27:13	0:0	4	0
water	27:14	0:0	4	;
cond	27:16	27:23	3	i < s -> nb_delays
water	27:16	0:0	4	i
op	27:18	0:0	4	<
water	27:20	0:0	4	s
op	27:21	0:0	4	->
water	27:23	0:0	4	nb_delays
forexpr	27:34	27:35	3	i ++
water	27:34	0:0	4	i
op	27:35	0:0	4	++
stmts	27:39	35:4	3	
water	27:39	0:0	4	{
decl	28:8	28:39	4	ChanDelay	*d
op	28:21	0:0	4	=
op	28:23	0:0	4	&
water	28:24	0:0	4	s
op	28:25	0:0	4	->
water	28:27	0:0	4	chandelay
op	28:36	0:0	4	[
water	28:37	0:0	4	i
op	28:38	0:0	4	]
if	29:8	30:20	4	(! d -> delay)
cond	29:12	29:16	5	! d -> delay
op	29:12	0:0	6	!
water	29:13	0:0	6	d
op	29:14	0:0	6	->
water	29:16	0:0	6	delay
stmts	30:12	30:20	5	
continue	30:12	30:20	6	
water	31:8	0:0	4	d
op	31:9	0:0	4	->
water	31:11	0:0	4	samples
op	31:19	0:0	4	=
call	31:21	31:61	4	av_malloc_array
arg	31:37	31:45	5	d->delay
water	31:37	0:0	6	d
op	31:38	0:0	6	->
water	31:40	0:0	6	delay
arg	31:47	31:61	5	s->block_align
water	31:47	0:0	6	s
op	31:48	0:0	6	->
water	31:50	0:0	6	block_align
water	31:62	0:0	4	;
if	32:8	33:34	4	(! d -> samples)
cond	32:12	32:16	5	! d -> samples
op	32:12	0:0	6	!
water	32:13	0:0	6	d
op	32:14	0:0	6	->
water	32:16	0:0	6	samples
stmts	33:12	33:34	5	
return	33:12	33:34	6	AVERROR(ENOMEM)
call	33:19	33:33	7	AVERROR
arg	33:27	33:33	8	ENOMEM
water	33:27	0:0	9	ENOMEM
water	34:8	0:0	4	s
op	34:9	0:0	4	->
water	34:11	0:0	4	max_delay
op	34:21	0:0	4	=
call	34:23	34:51	4	FFMAX
arg	34:29	34:41	5	s->max_delay
water	34:29	0:0	6	s
op	34:30	0:0	6	->
water	34:32	0:0	6	max_delay
arg	34:43	34:51	5	d->delay
water	34:43	0:0	6	d
op	34:44	0:0	6	->
water	34:46	0:0	6	delay
water	34:52	0:0	4	;
water	35:4	0:0	4	}
if	36:4	39:4	2	(! s -> max_delay)
cond	36:8	36:12	3	! s -> max_delay
op	36:8	0:0	4	!
water	36:9	0:0	4	s
op	36:10	0:0	4	->
water	36:12	0:0	4	max_delay
stmts	36:23	39:4	3	
water	36:23	0:0	4	{
call	37:8	37:78	4	av_log
arg	37:15	37:18	5	ctx
water	37:15	0:0	6	ctx
arg	37:20	37:32	5	AV_LOG_ERROR
water	37:20	0:0	6	AV_LOG_ERROR
arg	37:34	37:78	5	"At least one delay >0 must be specified.\n"
water	37:34	0:0	6	"At least one delay >0 must be specified.\n"
water	37:79	0:0	4	;
return	38:8	38:30	4	AVERROR(EINVAL)
call	38:15	38:29	5	AVERROR
arg	38:23	38:29	6	EINVAL
water	38:23	0:0	7	EINVAL
water	39:4	0:0	4	}
switch	40:4	46:4	2	(inlink -> format)
cond	40:12	40:20	3	inlink -> format
water	40:12	0:0	4	inlink
op	40:18	0:0	4	->
water	40:20	0:0	4	format
stmts	40:28	46:4	3	
water	40:28	0:0	4	{
label	41:4	41:27	4	case AV_SAMPLE_FMT_U8P :
water	41:29	0:0	4	s
op	41:30	0:0	4	->
water	41:32	0:0	4	delay_channel
op	41:46	0:0	4	=
water	41:48	0:0	4	delay_channel_u8p
water	41:66	0:0	4	;
break	41:68	41:73	4	
label	42:4	42:27	4	case AV_SAMPLE_FMT_S16P :
water	42:29	0:0	4	s
op	42:30	0:0	4	->
water	42:32	0:0	4	delay_channel
op	42:46	0:0	4	=
water	42:48	0:0	4	delay_channel_s16p
water	42:66	0:0	4	;
break	42:68	42:73	4	
label	43:4	43:27	4	case AV_SAMPLE_FMT_S32P :
water	43:29	0:0	4	s
op	43:30	0:0	4	->
water	43:32	0:0	4	delay_channel
op	43:46	0:0	4	=
water	43:48	0:0	4	delay_channel_s32p
water	43:66	0:0	4	;
break	43:68	43:73	4	
label	44:4	44:27	4	case AV_SAMPLE_FMT_FLTP :
water	44:29	0:0	4	s
op	44:30	0:0	4	->
water	44:32	0:0	4	delay_channel
op	44:46	0:0	4	=
water	44:48	0:0	4	delay_channel_fltp
water	44:66	0:0	4	;
break	44:68	44:73	4	
label	45:4	45:27	4	case AV_SAMPLE_FMT_DBLP :
water	45:29	0:0	4	s
op	45:30	0:0	4	->
water	45:32	0:0	4	delay_channel
op	45:46	0:0	4	=
water	45:48	0:0	4	delay_channel_dblp
water	45:66	0:0	4	;
break	45:68	45:73	4	
water	46:4	0:0	4	}
return	47:4	47:12	2	0
water	47:11	0:0	3	0
