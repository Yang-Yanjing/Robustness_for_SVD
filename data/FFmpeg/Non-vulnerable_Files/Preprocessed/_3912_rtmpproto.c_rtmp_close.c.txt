func	1:0	23:0	0	static int	rtmp_close
params	1:21	0:0	1	
param	1:22	1:35	2	URLContext *	h
stmnts	0:0	22:14	1	
decl	3:4	3:34	2	RTMPContext	*rt
op	3:20	0:0	2	=
water	3:22	0:0	2	h
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:21	2	int	ret
op	4:12	0:0	2	=
water	4:14	0:0	2	0
water	4:15	0:0	2	,
decl	4:4	4:21	2	int	i
water	4:18	0:0	2	,
decl	4:4	4:21	2	int	j
if	5:4	11:4	2	(! rt -> is_input)
cond	5:8	5:13	3	! rt -> is_input
op	5:8	0:0	4	!
water	5:9	0:0	4	rt
op	5:11	0:0	4	->
water	5:13	0:0	4	is_input
stmts	5:23	11:4	3	
water	5:23	0:0	4	{
water	6:8	0:0	4	rt
op	6:10	0:0	4	->
water	6:12	0:0	4	flv_data
op	6:21	0:0	4	=
water	6:23	0:0	4	NULL
water	6:27	0:0	4	;
if	7:8	8:48	4	(rt -> out_pkt . size)
cond	7:12	7:24	5	rt -> out_pkt . size
water	7:12	0:0	6	rt
op	7:14	0:0	6	->
water	7:16	0:0	6	out_pkt
op	7:23	0:0	6	.
water	7:24	0:0	6	size
stmts	8:12	8:48	5	
call	8:12	8:47	6	ff_rtmp_packet_destroy
arg	8:35	8:47	7	&rt->out_pkt
op	8:35	0:0	8	&
water	8:36	0:0	8	rt
op	8:38	0:0	8	->
water	8:40	0:0	8	out_pkt
water	8:48	0:0	6	;
if	9:8	10:47	4	(rt -> state > STATE_FCPUBLISH)
cond	9:12	9:24	5	rt -> state > STATE_FCPUBLISH
water	9:12	0:0	6	rt
op	9:14	0:0	6	->
water	9:16	0:0	6	state
op	9:22	0:0	6	>
water	9:24	0:0	6	STATE_FCPUBLISH
stmts	10:12	10:47	5	
water	10:12	0:0	6	ret
op	10:16	0:0	6	=
call	10:18	10:46	6	gen_fcunpublish_stream
arg	10:41	10:42	7	h
water	10:41	0:0	8	h
arg	10:44	10:46	7	rt
water	10:44	0:0	8	rt
water	10:47	0:0	6	;
water	11:4	0:0	4	}
if	12:4	13:38	2	(rt -> state > STATE_HANDSHAKED)
cond	12:8	12:20	3	rt -> state > STATE_HANDSHAKED
water	12:8	0:0	4	rt
op	12:10	0:0	4	->
water	12:12	0:0	4	state
op	12:18	0:0	4	>
water	12:20	0:0	4	STATE_HANDSHAKED
stmts	13:8	13:38	3	
water	13:8	0:0	4	ret
op	13:12	0:0	4	=
call	13:14	13:37	4	gen_delete_stream
arg	13:32	13:33	5	h
water	13:32	0:0	6	h
arg	13:35	13:37	5	rt
water	13:35	0:0	6	rt
water	13:38	0:0	4	;
for	14:4	18:4	2	(i = 0 ;i < 2;i ++)
forinit	14:9	14:14	3	i = 0 ;
water	14:9	0:0	4	i
op	14:11	0:0	4	=
water	14:13	0:0	4	0
water	14:14	0:0	4	;
cond	14:16	14:20	3	i < 2
water	14:16	0:0	4	i
op	14:18	0:0	4	<
water	14:20	0:0	4	2
forexpr	14:23	14:24	3	i ++
water	14:23	0:0	4	i
op	14:24	0:0	4	++
stmts	14:28	18:4	3	
water	14:28	0:0	4	{
for	15:8	16:55	4	(j = 0 ;j < rt -> nb_prev_pkt [ i ];j ++)
forinit	15:13	15:18	5	j = 0 ;
water	15:13	0:0	6	j
op	15:15	0:0	6	=
water	15:17	0:0	6	0
water	15:18	0:0	6	;
cond	15:20	15:41	5	j < rt -> nb_prev_pkt [ i ]
water	15:20	0:0	6	j
op	15:22	0:0	6	<
water	15:24	0:0	6	rt
op	15:26	0:0	6	->
water	15:28	0:0	6	nb_prev_pkt
op	15:39	0:0	6	[
water	15:40	0:0	6	i
op	15:41	0:0	6	]
forexpr	15:44	15:45	5	j ++
water	15:44	0:0	6	j
op	15:45	0:0	6	++
stmts	16:12	16:55	5	
call	16:12	16:54	6	ff_rtmp_packet_destroy
arg	16:35	16:54	7	&rt->prev_pkt[i][j]
op	16:35	0:0	8	&
water	16:36	0:0	8	rt
op	16:38	0:0	8	->
water	16:40	0:0	8	prev_pkt
op	16:48	0:0	8	[
water	16:49	0:0	8	i
op	16:50	0:0	8	]
op	16:51	0:0	8	[
water	16:52	0:0	8	j
op	16:53	0:0	8	]
water	16:55	0:0	6	;
call	17:8	17:33	4	av_freep
arg	17:17	17:33	5	&rt->prev_pkt[i]
op	17:17	0:0	6	&
water	17:18	0:0	6	rt
op	17:20	0:0	6	->
water	17:22	0:0	6	prev_pkt
op	17:30	0:0	6	[
water	17:31	0:0	6	i
op	17:32	0:0	6	]
water	17:34	0:0	4	;
water	18:4	0:0	4	}
call	19:4	19:27	2	free_tracked_methods
arg	19:25	19:27	3	rt
water	19:25	0:0	4	rt
water	19:28	0:0	2	;
call	20:4	20:26	2	av_freep
arg	20:13	20:26	3	&rt->flv_data
op	20:13	0:0	4	&
water	20:14	0:0	4	rt
op	20:16	0:0	4	->
water	20:18	0:0	4	flv_data
water	20:27	0:0	2	;
call	21:4	21:26	2	ffurl_close
arg	21:16	21:26	3	rt->stream
water	21:16	0:0	4	rt
op	21:18	0:0	4	->
water	21:20	0:0	4	stream
water	21:27	0:0	2	;
return	22:4	22:14	2	ret
water	22:11	0:0	3	ret
