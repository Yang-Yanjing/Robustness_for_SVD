func	1:0	26:0	0	static int	get_format_from_sample_fmt
params	1:37	0:0	1	
param	1:38	1:54	2	const char * *	fmt
param	2:38	2:68	2	enum AVSampleFormat	sample_fmt
stmnts	0:0	25:26	1	
decl	4:4	4:9	2	int	i
struct	5:4	7:4	2	sample_fmt_entry
decl	6:8	6:38	3	enum AVSampleFormat	sample_fmt
decl	6:40	6:67	3	const char	*fmt_be
water	6:58	0:0	3	,
decl	6:40	6:67	3	const char	*fmt_le
decl	5:4	13:5	2	sample_fmt_entry	sample_fmt_entries[]
op	7:27	0:0	2	=
water	7:29	0:0	2	{
water	8:8	0:0	2	{
water	8:10	0:0	2	AV_SAMPLE_FMT_U8
water	8:26	0:0	2	,
water	8:29	0:0	2	"u8"
water	8:33	0:0	2	,
water	8:38	0:0	2	"u8"
water	8:46	0:0	2	}
water	8:47	0:0	2	,
water	9:8	0:0	2	{
water	9:10	0:0	2	AV_SAMPLE_FMT_S16
water	9:27	0:0	2	,
water	9:29	0:0	2	"s16be"
water	9:36	0:0	2	,
water	9:38	0:0	2	"s16le"
water	9:46	0:0	2	}
water	9:47	0:0	2	,
water	10:8	0:0	2	{
water	10:10	0:0	2	AV_SAMPLE_FMT_S32
water	10:27	0:0	2	,
water	10:29	0:0	2	"s32be"
water	10:36	0:0	2	,
water	10:38	0:0	2	"s32le"
water	10:46	0:0	2	}
water	10:47	0:0	2	,
water	11:8	0:0	2	{
water	11:10	0:0	2	AV_SAMPLE_FMT_FLT
water	11:27	0:0	2	,
water	11:29	0:0	2	"f32be"
water	11:36	0:0	2	,
water	11:38	0:0	2	"f32le"
water	11:46	0:0	2	}
water	11:47	0:0	2	,
water	12:8	0:0	2	{
water	12:10	0:0	2	AV_SAMPLE_FMT_DBL
water	12:27	0:0	2	,
water	12:29	0:0	2	"f64be"
water	12:36	0:0	2	,
water	12:38	0:0	2	"f64le"
water	12:46	0:0	2	}
water	12:47	0:0	2	,
water	13:4	0:0	2	}
op	14:4	0:0	2	*
water	14:5	0:0	2	fmt
op	14:9	0:0	2	=
water	14:11	0:0	2	NULL
water	14:15	0:0	2	;
for	15:4	21:4	2	(i = 0 ;i <FF_ARRAY_ELEMS (sample_fmt_entries );i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:53	3	i <FF_ARRAY_ELEMS (sample_fmt_entries )
water	15:16	0:0	4	i
op	15:18	0:0	4	<
call	15:20	15:53	4	FF_ARRAY_ELEMS
arg	15:35	15:53	5	sample_fmt_entries
water	15:35	0:0	6	sample_fmt_entries
forexpr	15:56	15:57	3	i ++
water	15:56	0:0	4	i
op	15:57	0:0	4	++
stmts	15:61	21:4	3	
water	15:61	0:0	4	{
decl	16:8	16:63	4	struct sample_fmt_entry	*entry
op	16:39	0:0	4	=
op	16:41	0:0	4	&
water	16:42	0:0	4	sample_fmt_entries
op	16:60	0:0	4	[
water	16:61	0:0	4	i
op	16:62	0:0	4	]
if	17:8	20:8	4	(sample_fmt == entry -> sample_fmt)
cond	17:12	17:33	5	sample_fmt == entry -> sample_fmt
water	17:12	0:0	6	sample_fmt
op	17:23	0:0	6	==
water	17:26	0:0	6	entry
op	17:31	0:0	6	->
water	17:33	0:0	6	sample_fmt
stmts	17:45	20:8	5	
water	17:45	0:0	6	{
op	18:12	0:0	6	*
water	18:13	0:0	6	fmt
op	18:17	0:0	6	=
call	18:19	18:53	6	AV_NE
arg	18:25	18:38	7	entry->fmt_be
water	18:25	0:0	8	entry
op	18:30	0:0	8	->
water	18:32	0:0	8	fmt_be
arg	18:40	18:53	7	entry->fmt_le
water	18:40	0:0	8	entry
op	18:45	0:0	8	->
water	18:47	0:0	8	fmt_le
water	18:54	0:0	6	;
return	19:12	19:20	6	0
water	19:19	0:0	7	0
water	20:8	0:0	6	}
water	21:4	0:0	4	}
call	22:4	24:46	2	fprintf
arg	22:12	22:18	3	stderr
water	22:12	0:0	4	stderr
arg	23:12	23:63	3	"Sample format %s not supported as output format\n"
water	23:12	0:0	4	"Sample format %s not supported as output format\n"
arg	24:12	24:46	3	av_get_sample_fmt_name(sample_fmt)
call	24:12	24:45	4	av_get_sample_fmt_name
arg	24:35	24:45	5	sample_fmt
water	24:35	0:0	6	sample_fmt
water	24:47	0:0	2	;
return	25:4	25:26	2	AVERROR(EINVAL)
call	25:11	25:25	3	AVERROR
arg	25:19	25:25	4	EINVAL
water	25:19	0:0	5	EINVAL
