func	1:0	33:0	0	static void	print_track_chunks
params	1:30	0:0	1	
param	1:31	1:40	2	FILE *	out
param	1:42	1:63	2	struct Tracks *	tracks
param	1:65	1:73	2	int	main
param	2:31	2:47	2	const char *	type
stmnts	0:0	32:4	1	
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	j
decl	5:4	5:19	2	int64_t	pos
op	5:16	0:0	2	=
water	5:18	0:0	2	0
decl	6:4	6:46	2	struct Track	*track
op	6:24	0:0	2	=
water	6:26	0:0	2	tracks
op	6:32	0:0	2	->
water	6:34	0:0	2	tracks
op	6:40	0:0	2	[
water	6:41	0:0	2	main
op	6:45	0:0	2	]
decl	7:4	7:38	2	int	should_print_time_mismatch
op	7:35	0:0	2	=
water	7:37	0:0	2	1
for	8:4	32:4	2	(i = 0 ;i < track -> chunks;i ++)
forinit	8:9	8:14	3	i = 0 ;
water	8:9	0:0	4	i
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:27	3	i < track -> chunks
water	8:16	0:0	4	i
op	8:18	0:0	4	<
water	8:20	0:0	4	track
op	8:25	0:0	4	->
water	8:27	0:0	4	chunks
forexpr	8:35	8:36	3	i ++
water	8:35	0:0	4	i
op	8:36	0:0	4	++
stmts	8:40	32:4	3	
water	8:40	0:0	4	{
for	9:8	23:8	4	(j = main + 1 ;j < tracks -> nb_tracks;j ++)
forinit	9:13	9:25	5	j = main + 1 ;
water	9:13	0:0	6	j
op	9:15	0:0	6	=
water	9:17	0:0	6	main
op	9:22	0:0	6	+
water	9:24	0:0	6	1
water	9:25	0:0	6	;
cond	9:27	9:39	5	j < tracks -> nb_tracks
water	9:27	0:0	6	j
op	9:29	0:0	6	<
water	9:31	0:0	6	tracks
op	9:37	0:0	6	->
water	9:39	0:0	6	nb_tracks
forexpr	9:50	9:51	5	j ++
water	9:50	0:0	6	j
op	9:51	0:0	6	++
stmts	9:55	23:8	5	
water	9:55	0:0	6	{
if	10:12	22:12	6	(tracks -> tracks [ j ] -> is_audio == track -> is_audio)
cond	10:16	10:54	7	tracks -> tracks [ j ] -> is_audio == track -> is_audio
water	10:16	0:0	8	tracks
op	10:22	0:0	8	->
water	10:24	0:0	8	tracks
op	10:30	0:0	8	[
water	10:31	0:0	8	j
op	10:32	0:0	8	]
op	10:33	0:0	8	->
water	10:35	0:0	8	is_audio
op	10:44	0:0	8	==
water	10:47	0:0	8	track
op	10:52	0:0	8	->
water	10:54	0:0	8	is_audio
stmts	10:64	22:12	7	
water	10:64	0:0	8	{
if	11:16	15:16	8	(track -> offsets [ i ] . duration != tracks -> tracks [ j ] -> offsets [ i ] . duration)
cond	11:20	11:80	9	track -> offsets [ i ] . duration != tracks -> tracks [ j ] -> offsets [ i ] . duration
water	11:20	0:0	10	track
op	11:25	0:0	10	->
water	11:27	0:0	10	offsets
op	11:34	0:0	10	[
water	11:35	0:0	10	i
op	11:36	0:0	10	]
op	11:37	0:0	10	.
water	11:38	0:0	10	duration
op	11:47	0:0	10	!=
water	11:50	0:0	10	tracks
op	11:56	0:0	10	->
water	11:58	0:0	10	tracks
op	11:64	0:0	10	[
water	11:65	0:0	10	j
op	11:66	0:0	10	]
op	11:67	0:0	10	->
water	11:69	0:0	10	offsets
op	11:76	0:0	10	[
water	11:77	0:0	10	i
op	11:78	0:0	10	]
op	11:79	0:0	10	.
water	11:80	0:0	10	duration
stmts	11:90	15:16	9	
water	11:90	0:0	10	{
call	12:20	13:82	10	fprintf
arg	12:28	12:34	11	stderr
water	12:28	0:0	12	stderr
arg	12:36	12:97	11	"Mismatched duration of %s chunk %d in %s (%d) and %s (%d)\n"
water	12:36	0:0	12	"Mismatched duration of %s chunk %d in %s (%d) and %s (%d)\n"
arg	13:28	13:32	11	type
water	13:28	0:0	12	type
arg	13:34	13:35	11	i
water	13:34	0:0	12	i
arg	13:37	13:48	11	track->name
water	13:37	0:0	12	track
op	13:42	0:0	12	->
water	13:44	0:0	12	name
arg	13:50	13:54	11	main
water	13:50	0:0	12	main
arg	13:56	13:79	11	tracks->tracks[j]->name
water	13:56	0:0	12	tracks
op	13:62	0:0	12	->
water	13:64	0:0	12	tracks
op	13:70	0:0	12	[
water	13:71	0:0	12	j
op	13:72	0:0	12	]
op	13:73	0:0	12	->
water	13:75	0:0	12	name
arg	13:81	13:82	11	j
water	13:81	0:0	12	j
water	13:83	0:0	10	;
water	14:20	0:0	10	should_print_time_mismatch
op	14:47	0:0	10	=
water	14:49	0:0	10	1
water	14:50	0:0	10	;
water	15:16	0:0	10	}
if	16:16	21:16	8	(track -> offsets [ i ] . time != tracks -> tracks [ j ] -> offsets [ i ] . time)
cond	16:20	16:76	9	track -> offsets [ i ] . time != tracks -> tracks [ j ] -> offsets [ i ] . time
water	16:20	0:0	10	track
op	16:25	0:0	10	->
water	16:27	0:0	10	offsets
op	16:34	0:0	10	[
water	16:35	0:0	10	i
op	16:36	0:0	10	]
op	16:37	0:0	10	.
water	16:38	0:0	10	time
op	16:43	0:0	10	!=
water	16:46	0:0	10	tracks
op	16:52	0:0	10	->
water	16:54	0:0	10	tracks
op	16:60	0:0	10	[
water	16:61	0:0	10	j
op	16:62	0:0	10	]
op	16:63	0:0	10	->
water	16:65	0:0	10	offsets
op	16:72	0:0	10	[
water	16:73	0:0	10	i
op	16:74	0:0	10	]
op	16:75	0:0	10	.
water	16:76	0:0	10	time
stmts	16:82	21:16	9	
water	16:82	0:0	10	{
if	17:20	19:87	10	(should_print_time_mismatch)
cond	17:24	17:24	11	should_print_time_mismatch
water	17:24	0:0	12	should_print_time_mismatch
stmts	18:24	19:87	11	
call	18:24	19:86	12	fprintf
arg	18:32	18:38	13	stderr
water	18:32	0:0	14	stderr
arg	18:40	18:105	13	"Mismatched (start) time of %s chunk %d in %s (%d) and %s (%d)\n"
water	18:40	0:0	14	"Mismatched (start) time of %s chunk %d in %s (%d) and %s (%d)\n"
arg	19:32	19:36	13	type
water	19:32	0:0	14	type
arg	19:38	19:39	13	i
water	19:38	0:0	14	i
arg	19:41	19:52	13	track->name
water	19:41	0:0	14	track
op	19:46	0:0	14	->
water	19:48	0:0	14	name
arg	19:54	19:58	13	main
water	19:54	0:0	14	main
arg	19:60	19:83	13	tracks->tracks[j]->name
water	19:60	0:0	14	tracks
op	19:66	0:0	14	->
water	19:68	0:0	14	tracks
op	19:74	0:0	14	[
water	19:75	0:0	14	j
op	19:76	0:0	14	]
op	19:77	0:0	14	->
water	19:79	0:0	14	name
arg	19:85	19:86	13	j
water	19:85	0:0	14	j
water	19:87	0:0	12	;
water	20:20	0:0	10	should_print_time_mismatch
op	20:47	0:0	10	=
water	20:49	0:0	10	0
water	20:50	0:0	10	;
water	21:16	0:0	10	}
water	22:12	0:0	8	}
water	23:8	0:0	6	}
call	24:8	25:45	4	fprintf
arg	24:16	24:19	5	out
water	24:16	0:0	6	out
arg	24:21	24:55	5	"\t\t<c n=\"%d\" d=\"%"PRId64"\" "
water	24:21	0:0	6	"\t\t<c n=\"%d\" d=\"%"
water	24:44	0:0	6	PRId64
water	24:50	0:0	6	"\" "
arg	25:16	25:17	5	i
water	25:16	0:0	6	i
arg	25:19	25:45	5	track->offsets[i].duration
water	25:19	0:0	6	track
op	25:24	0:0	6	->
water	25:26	0:0	6	offsets
op	25:33	0:0	6	[
water	25:34	0:0	6	i
op	25:35	0:0	6	]
op	25:36	0:0	6	.
water	25:37	0:0	6	duration
water	25:46	0:0	4	;
if	26:8	29:8	4	(pos != track -> offsets [ i ] . time)
cond	26:12	26:37	5	pos != track -> offsets [ i ] . time
water	26:12	0:0	6	pos
op	26:16	0:0	6	!=
water	26:19	0:0	6	track
op	26:24	0:0	6	->
water	26:26	0:0	6	offsets
op	26:33	0:0	6	[
water	26:34	0:0	6	i
op	26:35	0:0	6	]
op	26:36	0:0	6	.
water	26:37	0:0	6	time
stmts	26:43	29:8	5	
water	26:43	0:0	6	{
call	27:12	27:67	6	fprintf
arg	27:20	27:23	7	out
water	27:20	0:0	8	out
arg	27:25	27:43	7	"t=\"%"PRId64"\" "
water	27:25	0:0	8	"t=\"%"
water	27:32	0:0	8	PRId64
water	27:38	0:0	8	"\" "
arg	27:45	27:67	7	track->offsets[i].time
water	27:45	0:0	8	track
op	27:50	0:0	8	->
water	27:52	0:0	8	offsets
op	27:59	0:0	8	[
water	27:60	0:0	8	i
op	27:61	0:0	8	]
op	27:62	0:0	8	.
water	27:63	0:0	8	time
water	27:68	0:0	6	;
water	28:12	0:0	6	pos
op	28:16	0:0	6	=
water	28:18	0:0	6	track
op	28:23	0:0	6	->
water	28:25	0:0	6	offsets
op	28:32	0:0	6	[
water	28:33	0:0	6	i
op	28:34	0:0	6	]
op	28:35	0:0	6	.
water	28:36	0:0	6	time
water	28:40	0:0	6	;
water	29:8	0:0	6	}
water	30:8	0:0	4	pos
op	30:12	0:0	4	+=
water	30:15	0:0	4	track
op	30:20	0:0	4	->
water	30:22	0:0	4	offsets
op	30:29	0:0	4	[
water	30:30	0:0	4	i
op	30:31	0:0	4	]
op	30:32	0:0	4	.
water	30:33	0:0	4	duration
water	30:41	0:0	4	;
call	31:8	31:27	4	fprintf
arg	31:16	31:19	5	out
water	31:16	0:0	6	out
arg	31:21	31:27	5	"/>\n"
water	31:21	0:0	6	"/>\n"
water	31:28	0:0	4	;
water	32:4	0:0	4	}
