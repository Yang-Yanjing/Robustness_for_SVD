func	1:8	673:0	0	int	ff_mpv_encode_init
params	1:30	0:0	1	
param	1:31	1:52	2	AVCodecContext *	avctx
stmnts	0:0	672:26	1	
decl	3:4	3:40	2	MpegEncContext	*s
op	3:22	0:0	2	=
water	3:24	0:0	2	avctx
op	3:29	0:0	2	->
water	3:31	0:0	2	priv_data
decl	4:4	4:32	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:32	2	int	ret
water	4:14	0:0	2	,
decl	4:4	4:32	2	int	format_supported
call	5:4	5:25	2	mpv_encode_defaults
arg	5:24	5:25	3	s
water	5:24	0:0	4	s
water	5:26	0:0	2	;
switch	6:4	43:4	2	(avctx -> codec_id)
cond	6:12	6:19	3	avctx -> codec_id
water	6:12	0:0	4	avctx
op	6:17	0:0	4	->
water	6:19	0:0	4	codec_id
stmts	6:29	43:4	3	
water	6:29	0:0	4	{
label	7:4	7:31	4	case AV_CODEC_ID_MPEG2VIDEO :
if	8:8	13:8	4	(avctx -> pix_fmt != AV_PIX_FMT_YUV420P && avctx -> pix_fmt != AV_PIX_FMT_YUV422P)
cond	8:12	9:30	5	avctx -> pix_fmt != AV_PIX_FMT_YUV420P && avctx -> pix_fmt != AV_PIX_FMT_YUV422P
water	8:12	0:0	6	avctx
op	8:17	0:0	6	->
water	8:19	0:0	6	pix_fmt
op	8:27	0:0	6	!=
water	8:30	0:0	6	AV_PIX_FMT_YUV420P
op	8:49	0:0	6	&&
water	9:12	0:0	6	avctx
op	9:17	0:0	6	->
water	9:19	0:0	6	pix_fmt
op	9:27	0:0	6	!=
water	9:30	0:0	6	AV_PIX_FMT_YUV422P
stmts	9:50	13:8	5	
water	9:50	0:0	6	{
call	10:12	11:59	6	av_log
arg	10:19	10:24	7	avctx
water	10:19	0:0	8	avctx
arg	10:26	10:38	7	AV_LOG_ERROR
water	10:26	0:0	8	AV_LOG_ERROR
arg	11:19	11:59	7	"only YUV420 and YUV422 are supported\n"
water	11:19	0:0	8	"only YUV420 and YUV422 are supported\n"
water	11:60	0:0	6	;
return	12:12	12:21	6	-1
op	12:19	0:0	7	-
water	12:20	0:0	7	1
water	13:8	0:0	6	}
break	14:8	14:13	4	
label	15:4	15:26	4	case AV_CODEC_ID_MJPEG :
label	16:4	16:24	4	case AV_CODEC_ID_AMV :
water	17:8	0:0	4	format_supported
op	17:25	0:0	4	=
water	17:27	0:0	4	0
water	17:28	0:0	4	;
if	19:8	26:32	4	(avctx -> pix_fmt == AV_PIX_FMT_YUVJ420P || avctx -> pix_fmt == AV_PIX_FMT_YUVJ422P || avctx -> pix_fmt == AV_PIX_FMT_YUVJ444P || ( avctx -> color_range == AVCOL_RANGE_JPEG && ( avctx -> pix_fmt == AV_PIX_FMT_YUV420P || avctx -> pix_fmt == AV_PIX_FMT_YUV422P || avctx -> pix_fmt == AV_PIX_FMT_YUV444P ) ))
cond	19:12	25:51	5	avctx -> pix_fmt == AV_PIX_FMT_YUVJ420P || avctx -> pix_fmt == AV_PIX_FMT_YUVJ422P || avctx -> pix_fmt == AV_PIX_FMT_YUVJ444P || ( avctx -> color_range == AVCOL_RANGE_JPEG && ( avctx -> pix_fmt == AV_PIX_FMT_YUV420P || avctx -> pix_fmt == AV_PIX_FMT_YUV422P || avctx -> pix_fmt == AV_PIX_FMT_YUV444P ) )
water	19:12	0:0	6	avctx
op	19:17	0:0	6	->
water	19:19	0:0	6	pix_fmt
op	19:27	0:0	6	==
water	19:30	0:0	6	AV_PIX_FMT_YUVJ420P
op	19:50	0:0	6	||
water	20:12	0:0	6	avctx
op	20:17	0:0	6	->
water	20:19	0:0	6	pix_fmt
op	20:27	0:0	6	==
water	20:30	0:0	6	AV_PIX_FMT_YUVJ422P
op	20:50	0:0	6	||
water	21:12	0:0	6	avctx
op	21:17	0:0	6	->
water	21:19	0:0	6	pix_fmt
op	21:27	0:0	6	==
water	21:30	0:0	6	AV_PIX_FMT_YUVJ444P
op	21:50	0:0	6	||
water	22:12	0:0	6	(
water	22:13	0:0	6	avctx
op	22:18	0:0	6	->
water	22:20	0:0	6	color_range
op	22:32	0:0	6	==
water	22:35	0:0	6	AVCOL_RANGE_JPEG
op	22:52	0:0	6	&&
water	23:13	0:0	6	(
water	23:14	0:0	6	avctx
op	23:19	0:0	6	->
water	23:21	0:0	6	pix_fmt
op	23:29	0:0	6	==
water	23:32	0:0	6	AV_PIX_FMT_YUV420P
op	23:51	0:0	6	||
water	24:14	0:0	6	avctx
op	24:19	0:0	6	->
water	24:21	0:0	6	pix_fmt
op	24:29	0:0	6	==
water	24:32	0:0	6	AV_PIX_FMT_YUV422P
op	24:51	0:0	6	||
water	25:14	0:0	6	avctx
op	25:19	0:0	6	->
water	25:21	0:0	6	pix_fmt
op	25:29	0:0	6	==
water	25:32	0:0	6	AV_PIX_FMT_YUV444P
water	25:50	0:0	6	)
water	25:51	0:0	6	)
stmts	26:12	26:32	5	
water	26:12	0:0	6	format_supported
op	26:29	0:0	6	=
water	26:31	0:0	6	1
water	26:32	0:0	6	;
else	28:8	32:32	4
stmts	28:13	32:32	5	
if	28:13	32:32	6	(avctx -> strict_std_compliance <= FF_COMPLIANCE_UNOFFICIAL && ( avctx -> pix_fmt == AV_PIX_FMT_YUV420P || avctx -> pix_fmt == AV_PIX_FMT_YUV422P || avctx -> pix_fmt == AV_PIX_FMT_YUV444P ))
cond	28:17	31:54	7	avctx -> strict_std_compliance <= FF_COMPLIANCE_UNOFFICIAL && ( avctx -> pix_fmt == AV_PIX_FMT_YUV420P || avctx -> pix_fmt == AV_PIX_FMT_YUV422P || avctx -> pix_fmt == AV_PIX_FMT_YUV444P )
water	28:17	0:0	8	avctx
op	28:22	0:0	8	->
water	28:24	0:0	8	strict_std_compliance
op	28:46	0:0	8	<=
water	28:49	0:0	8	FF_COMPLIANCE_UNOFFICIAL
op	28:74	0:0	8	&&
water	29:17	0:0	8	(
water	29:18	0:0	8	avctx
op	29:23	0:0	8	->
water	29:25	0:0	8	pix_fmt
op	29:33	0:0	8	==
water	29:36	0:0	8	AV_PIX_FMT_YUV420P
op	29:55	0:0	8	||
water	30:18	0:0	8	avctx
op	30:23	0:0	8	->
water	30:25	0:0	8	pix_fmt
op	30:33	0:0	8	==
water	30:36	0:0	8	AV_PIX_FMT_YUV422P
op	30:55	0:0	8	||
water	31:18	0:0	8	avctx
op	31:23	0:0	8	->
water	31:25	0:0	8	pix_fmt
op	31:33	0:0	8	==
water	31:36	0:0	8	AV_PIX_FMT_YUV444P
water	31:54	0:0	8	)
stmts	32:12	32:32	7	
water	32:12	0:0	8	format_supported
op	32:29	0:0	8	=
water	32:31	0:0	8	1
water	32:32	0:0	8	;
if	33:8	36:8	4	(! format_supported)
cond	33:12	33:13	5	! format_supported
op	33:12	0:0	6	!
water	33:13	0:0	6	format_supported
stmts	33:31	36:8	5	
water	33:31	0:0	6	{
call	34:12	34:76	6	av_log
arg	34:19	34:24	7	avctx
water	34:19	0:0	8	avctx
arg	34:26	34:38	7	AV_LOG_ERROR
water	34:26	0:0	8	AV_LOG_ERROR
arg	34:40	34:76	7	"colorspace not supported in jpeg\n"
water	34:40	0:0	8	"colorspace not supported in jpeg\n"
water	34:77	0:0	6	;
return	35:12	35:21	6	-1
op	35:19	0:0	7	-
water	35:20	0:0	7	1
water	36:8	0:0	6	}
break	37:8	37:13	4	
label	38:4	38:11	4	default :
if	39:8	42:8	4	(avctx -> pix_fmt != AV_PIX_FMT_YUV420P)
cond	39:12	39:30	5	avctx -> pix_fmt != AV_PIX_FMT_YUV420P
water	39:12	0:0	6	avctx
op	39:17	0:0	6	->
water	39:19	0:0	6	pix_fmt
op	39:27	0:0	6	!=
water	39:30	0:0	6	AV_PIX_FMT_YUV420P
stmts	39:50	42:8	5	
water	39:50	0:0	6	{
call	40:12	40:68	6	av_log
arg	40:19	40:24	7	avctx
water	40:19	0:0	8	avctx
arg	40:26	40:38	7	AV_LOG_ERROR
water	40:26	0:0	8	AV_LOG_ERROR
arg	40:40	40:68	7	"only YUV420 is supported\n"
water	40:40	0:0	8	"only YUV420 is supported\n"
water	40:69	0:0	6	;
return	41:12	41:21	6	-1
op	41:19	0:0	7	-
water	41:20	0:0	7	1
water	42:8	0:0	6	}
water	43:4	0:0	4	}
switch	44:4	58:4	2	(avctx -> pix_fmt)
cond	44:12	44:19	3	avctx -> pix_fmt
water	44:12	0:0	4	avctx
op	44:17	0:0	4	->
water	44:19	0:0	4	pix_fmt
stmts	44:28	58:4	3	
water	44:28	0:0	4	{
label	45:4	45:28	4	case AV_PIX_FMT_YUVJ444P :
label	46:4	46:27	4	case AV_PIX_FMT_YUV444P :
water	47:8	0:0	4	s
op	47:9	0:0	4	->
water	47:11	0:0	4	chroma_format
op	47:25	0:0	4	=
water	47:27	0:0	4	CHROMA_444
water	47:37	0:0	4	;
break	48:8	48:13	4	
label	49:4	49:28	4	case AV_PIX_FMT_YUVJ422P :
label	50:4	50:27	4	case AV_PIX_FMT_YUV422P :
water	51:8	0:0	4	s
op	51:9	0:0	4	->
water	51:11	0:0	4	chroma_format
op	51:25	0:0	4	=
water	51:27	0:0	4	CHROMA_422
water	51:37	0:0	4	;
break	52:8	52:13	4	
label	53:4	53:28	4	case AV_PIX_FMT_YUVJ420P :
label	54:4	54:27	4	case AV_PIX_FMT_YUV420P :
label	55:4	55:11	4	default :
water	56:8	0:0	4	s
op	56:9	0:0	4	->
water	56:11	0:0	4	chroma_format
op	56:25	0:0	4	=
water	56:27	0:0	4	CHROMA_420
water	56:37	0:0	4	;
break	57:8	57:13	4	
water	58:4	0:0	4	}
water	59:4	0:0	2	s
op	59:5	0:0	2	->
water	59:7	0:0	2	bit_rate
op	59:16	0:0	2	=
water	59:18	0:0	2	avctx
op	59:23	0:0	2	->
water	59:25	0:0	2	bit_rate
water	59:33	0:0	2	;
water	60:4	0:0	2	s
op	60:5	0:0	2	->
water	60:7	0:0	2	width
op	60:16	0:0	2	=
water	60:18	0:0	2	avctx
op	60:23	0:0	2	->
water	60:25	0:0	2	width
water	60:30	0:0	2	;
water	61:4	0:0	2	s
op	61:5	0:0	2	->
water	61:7	0:0	2	height
op	61:16	0:0	2	=
water	61:18	0:0	2	avctx
op	61:23	0:0	2	->
water	61:25	0:0	2	height
water	61:31	0:0	2	;
if	62:4	68:4	2	(avctx -> gop_size > 600 && avctx -> strict_std_compliance > FF_COMPLIANCE_EXPERIMENTAL)
cond	62:8	63:39	3	avctx -> gop_size > 600 && avctx -> strict_std_compliance > FF_COMPLIANCE_EXPERIMENTAL
water	62:8	0:0	4	avctx
op	62:13	0:0	4	->
water	62:15	0:0	4	gop_size
op	62:24	0:0	4	>
water	62:26	0:0	4	600
op	62:30	0:0	4	&&
water	63:8	0:0	4	avctx
op	63:13	0:0	4	->
water	63:15	0:0	4	strict_std_compliance
op	63:37	0:0	4	>
water	63:39	0:0	4	FF_COMPLIANCE_EXPERIMENTAL
stmts	63:67	68:4	3	
water	63:67	0:0	4	{
call	64:8	66:35	4	av_log
arg	64:15	64:20	5	avctx
water	64:15	0:0	6	avctx
arg	64:22	64:36	5	AV_LOG_WARNING
water	64:22	0:0	6	AV_LOG_WARNING
arg	65:15	65:74	5	"keyframe interval too large!, reducing it from %d to %d\n"
water	65:15	0:0	6	"keyframe interval too large!, reducing it from %d to %d\n"
arg	66:15	66:30	5	avctx->gop_size
water	66:15	0:0	6	avctx
op	66:20	0:0	6	->
water	66:22	0:0	6	gop_size
arg	66:32	66:35	5	600
water	66:32	0:0	6	600
water	66:36	0:0	4	;
water	67:8	0:0	4	avctx
op	67:13	0:0	4	->
water	67:15	0:0	4	gop_size
op	67:24	0:0	4	=
water	67:26	0:0	4	600
water	67:29	0:0	4	;
water	68:4	0:0	4	}
water	69:4	0:0	2	s
op	69:5	0:0	2	->
water	69:7	0:0	2	gop_size
op	69:20	0:0	2	=
water	69:22	0:0	2	avctx
op	69:27	0:0	2	->
water	69:29	0:0	2	gop_size
water	69:37	0:0	2	;
water	70:4	0:0	2	s
op	70:5	0:0	2	->
water	70:7	0:0	2	avctx
op	70:20	0:0	2	=
water	70:22	0:0	2	avctx
water	70:27	0:0	2	;
if	71:4	75:4	2	(avctx -> max_b_frames > MAX_B_FRAMES)
cond	71:8	71:30	3	avctx -> max_b_frames > MAX_B_FRAMES
water	71:8	0:0	4	avctx
op	71:13	0:0	4	->
water	71:15	0:0	4	max_b_frames
op	71:28	0:0	4	>
water	71:30	0:0	4	MAX_B_FRAMES
stmts	71:44	75:4	3	
water	71:44	0:0	4	{
call	72:8	73:39	4	av_log
arg	72:15	72:20	5	avctx
water	72:15	0:0	6	avctx
arg	72:22	72:34	5	AV_LOG_ERROR
water	72:22	0:0	6	AV_LOG_ERROR
arg	72:36	73:25	5	"Too many B-frames requested, maximum ""is %d.\n"
water	72:36	0:0	6	"Too many B-frames requested, maximum "
water	73:15	0:0	6	"is %d.\n"
arg	73:27	73:39	5	MAX_B_FRAMES
water	73:27	0:0	6	MAX_B_FRAMES
water	73:40	0:0	4	;
water	74:8	0:0	4	avctx
op	74:13	0:0	4	->
water	74:15	0:0	4	max_b_frames
op	74:28	0:0	4	=
water	74:30	0:0	4	MAX_B_FRAMES
water	74:42	0:0	4	;
water	75:4	0:0	4	}
water	76:4	0:0	2	s
op	76:5	0:0	2	->
water	76:7	0:0	2	max_b_frames
op	76:20	0:0	2	=
water	76:22	0:0	2	avctx
op	76:27	0:0	2	->
water	76:29	0:0	2	max_b_frames
water	76:41	0:0	2	;
water	77:4	0:0	2	s
op	77:5	0:0	2	->
water	77:7	0:0	2	codec_id
op	77:20	0:0	2	=
water	77:22	0:0	2	avctx
op	77:27	0:0	2	->
water	77:29	0:0	2	codec
op	77:34	0:0	2	->
water	77:36	0:0	2	id
water	77:38	0:0	2	;
water	78:4	0:0	2	s
op	78:5	0:0	2	->
water	78:7	0:0	2	strict_std_compliance
op	78:29	0:0	2	=
water	78:31	0:0	2	avctx
op	78:36	0:0	2	->
water	78:38	0:0	2	strict_std_compliance
water	78:59	0:0	2	;
water	79:4	0:0	2	s
op	79:5	0:0	2	->
water	79:7	0:0	2	quarter_sample
op	79:26	0:0	2	=
water	79:28	0:0	2	(
water	79:29	0:0	2	avctx
op	79:34	0:0	2	->
water	79:36	0:0	2	flags
op	79:42	0:0	2	&
water	79:44	0:0	2	AV_CODEC_FLAG_QPEL
water	79:62	0:0	2	)
op	79:64	0:0	2	!=
water	79:67	0:0	2	0
water	79:68	0:0	2	;
water	80:4	0:0	2	s
op	80:5	0:0	2	->
water	80:7	0:0	2	mpeg_quant
op	80:26	0:0	2	=
water	80:28	0:0	2	avctx
op	80:33	0:0	2	->
water	80:35	0:0	2	mpeg_quant
water	80:45	0:0	2	;
water	81:4	0:0	2	s
op	81:5	0:0	2	->
water	81:7	0:0	2	rtp_mode
op	81:26	0:0	2	=
op	81:28	0:0	2	!
op	81:29	0:0	2	!
water	81:30	0:0	2	avctx
op	81:35	0:0	2	->
water	81:37	0:0	2	rtp_payload_size
water	81:53	0:0	2	;
water	82:4	0:0	2	s
op	82:5	0:0	2	->
water	82:7	0:0	2	intra_dc_precision
op	82:26	0:0	2	=
water	82:28	0:0	2	avctx
op	82:33	0:0	2	->
water	82:35	0:0	2	intra_dc_precision
water	82:53	0:0	2	;
if	84:4	86:4	2	(s -> intra_dc_precision < 0)
cond	84:8	84:32	3	s -> intra_dc_precision < 0
water	84:8	0:0	4	s
op	84:9	0:0	4	->
water	84:11	0:0	4	intra_dc_precision
op	84:30	0:0	4	<
water	84:32	0:0	4	0
stmts	84:35	86:4	3	
water	84:35	0:0	4	{
water	85:8	0:0	4	s
op	85:9	0:0	4	->
water	85:11	0:0	4	intra_dc_precision
op	85:30	0:0	4	+=
water	85:33	0:0	4	8
water	85:34	0:0	4	;
water	86:4	0:0	4	}
else	86:6	87:34	2
stmts	86:11	87:34	3	
if	86:11	87:34	4	(s -> intra_dc_precision >= 8)
cond	86:15	86:40	5	s -> intra_dc_precision >= 8
water	86:15	0:0	6	s
op	86:16	0:0	6	->
water	86:18	0:0	6	intra_dc_precision
op	86:37	0:0	6	>=
water	86:40	0:0	6	8
stmts	87:8	87:34	5	
water	87:8	0:0	6	s
op	87:9	0:0	6	->
water	87:11	0:0	6	intra_dc_precision
op	87:30	0:0	6	-=
water	87:33	0:0	6	8
water	87:34	0:0	6	;
if	88:4	93:4	2	(s -> intra_dc_precision < 0)
cond	88:8	88:32	3	s -> intra_dc_precision < 0
water	88:8	0:0	4	s
op	88:9	0:0	4	->
water	88:11	0:0	4	intra_dc_precision
op	88:30	0:0	4	<
water	88:32	0:0	4	0
stmts	88:35	93:4	3	
water	88:35	0:0	4	{
call	89:8	91:95	4	av_log
arg	89:15	89:20	5	avctx
water	89:15	0:0	6	avctx
arg	89:22	89:34	5	AV_LOG_ERROR
water	89:22	0:0	6	AV_LOG_ERROR
arg	90:16	91:95	5	"intra dc precision must be positive, note some applications use"" 0 and some 8 as base meaning 8bit, the value must not be smaller than that\n"
water	90:16	0:0	6	"intra dc precision must be positive, note some applications use"
water	91:16	0:0	6	" 0 and some 8 as base meaning 8bit, the value must not be smaller than that\n"
water	91:96	0:0	4	;
return	92:8	92:30	4	AVERROR(EINVAL)
call	92:15	92:29	5	AVERROR
arg	92:23	92:29	6	EINVAL
water	92:23	0:0	7	EINVAL
water	93:4	0:0	4	}
if	94:4	97:4	2	(s -> intra_dc_precision > ( avctx -> codec_id == AV_CODEC_ID_MPEG2VIDEO ? 3 : 0 ))
cond	94:8	94:82	3	s -> intra_dc_precision > ( avctx -> codec_id == AV_CODEC_ID_MPEG2VIDEO ? 3 : 0 )
water	94:8	0:0	4	s
op	94:9	0:0	4	->
water	94:11	0:0	4	intra_dc_precision
op	94:30	0:0	4	>
water	94:32	0:0	4	(
water	94:33	0:0	4	avctx
op	94:38	0:0	4	->
water	94:40	0:0	4	codec_id
op	94:49	0:0	4	==
water	94:52	0:0	4	AV_CODEC_ID_MPEG2VIDEO
water	94:75	0:0	4	?
water	94:77	0:0	4	3
water	94:79	0:0	4	:
water	94:81	0:0	4	0
water	94:82	0:0	4	)
stmts	94:85	97:4	3	
water	94:85	0:0	4	{
call	95:8	95:68	4	av_log
arg	95:15	95:20	5	avctx
water	95:15	0:0	6	avctx
arg	95:22	95:34	5	AV_LOG_ERROR
water	95:22	0:0	6	AV_LOG_ERROR
arg	95:36	95:68	5	"intra dc precision too large\n"
water	95:36	0:0	6	"intra dc precision too large\n"
water	95:69	0:0	4	;
return	96:8	96:30	4	AVERROR(EINVAL)
call	96:15	96:29	5	AVERROR
arg	96:23	96:29	6	EINVAL
water	96:23	0:0	7	EINVAL
water	97:4	0:0	4	}
water	98:4	0:0	2	s
op	98:5	0:0	2	->
water	98:7	0:0	2	user_specified_pts
op	98:26	0:0	2	=
water	98:28	0:0	2	AV_NOPTS_VALUE
water	98:42	0:0	2	;
if	99:4	102:4	2	(s -> gop_size <= 1)
cond	99:8	99:23	3	s -> gop_size <= 1
water	99:8	0:0	4	s
op	99:9	0:0	4	->
water	99:11	0:0	4	gop_size
op	99:20	0:0	4	<=
water	99:23	0:0	4	1
stmts	99:26	102:4	3	
water	99:26	0:0	4	{
water	100:8	0:0	4	s
op	100:9	0:0	4	->
water	100:11	0:0	4	intra_only
op	100:22	0:0	4	=
water	100:24	0:0	4	1
water	100:25	0:0	4	;
water	101:8	0:0	4	s
op	101:9	0:0	4	->
water	101:11	0:0	4	gop_size
op	101:22	0:0	4	=
water	101:24	0:0	4	12
water	101:26	0:0	4	;
water	102:4	0:0	4	}
else	102:6	104:4	2
stmts	102:11	104:4	3	
water	102:11	0:0	4	{
water	103:8	0:0	4	s
op	103:9	0:0	4	->
water	103:11	0:0	4	intra_only
op	103:22	0:0	4	=
water	103:24	0:0	4	0
water	103:25	0:0	4	;
water	104:4	0:0	4	}
water	106:0	0:0	2	FF_DISABLE_DEPRECATION_WARNINGS
water	107:4	0:0	2	s
op	107:5	0:0	2	->
water	107:7	0:0	2	me_method
op	107:17	0:0	2	=
water	107:19	0:0	2	avctx
op	107:24	0:0	2	->
water	107:26	0:0	2	me_method
water	107:35	0:0	2	;
water	108:0	0:0	2	FF_ENABLE_DEPRECATION_WARNINGS
water	111:4	0:0	2	s
op	111:5	0:0	2	->
water	111:7	0:0	2	fixed_qscale
op	111:20	0:0	2	=
op	111:22	0:0	2	!
op	111:23	0:0	2	!
water	111:24	0:0	2	(
water	111:25	0:0	2	avctx
op	111:30	0:0	2	->
water	111:32	0:0	2	flags
op	111:38	0:0	2	&
water	111:40	0:0	2	AV_CODEC_FLAG_QSCALE
water	111:60	0:0	2	)
water	111:61	0:0	2	;
water	113:4	0:0	2	FF_DISABLE_DEPRECATION_WARNINGS
water	114:4	0:0	2	if
water	114:7	0:0	2	(
water	114:8	0:0	2	avctx
op	114:13	0:0	2	->
water	114:15	0:0	2	border_masking
op	114:30	0:0	2	!=
water	114:33	0:0	2	0
op	114:34	0:0	2	.
water	114:35	0:0	2	0
water	114:36	0:0	2	)
water	115:8	0:0	2	s
op	115:9	0:0	2	->
water	115:11	0:0	2	border_masking
op	115:26	0:0	2	=
water	115:28	0:0	2	avctx
op	115:33	0:0	2	->
water	115:35	0:0	2	border_masking
water	115:49	0:0	2	;
water	116:4	0:0	2	FF_ENABLE_DEPRECATION_WARNINGS
water	118:4	0:0	2	s
op	118:5	0:0	2	->
water	118:7	0:0	2	adaptive_quant
op	118:22	0:0	2	=
water	118:24	0:0	2	(
water	118:25	0:0	2	s
op	118:26	0:0	2	->
water	118:28	0:0	2	avctx
op	118:33	0:0	2	->
water	118:35	0:0	2	lumi_masking
op	118:48	0:0	2	||
water	119:25	0:0	2	s
op	119:26	0:0	2	->
water	119:28	0:0	2	avctx
op	119:33	0:0	2	->
water	119:35	0:0	2	dark_masking
op	119:48	0:0	2	||
water	120:25	0:0	2	s
op	120:26	0:0	2	->
water	120:28	0:0	2	avctx
op	120:33	0:0	2	->
water	120:35	0:0	2	temporal_cplx_masking
op	120:57	0:0	2	||
water	121:25	0:0	2	s
op	121:26	0:0	2	->
water	121:28	0:0	2	avctx
op	121:33	0:0	2	->
water	121:35	0:0	2	spatial_cplx_masking
op	121:57	0:0	2	||
water	122:25	0:0	2	s
op	122:26	0:0	2	->
water	122:28	0:0	2	avctx
op	122:33	0:0	2	->
water	122:35	0:0	2	p_masking
op	122:50	0:0	2	||
water	123:25	0:0	2	s
op	123:26	0:0	2	->
water	123:28	0:0	2	border_masking
op	123:43	0:0	2	||
water	124:25	0:0	2	(
water	124:26	0:0	2	s
op	124:27	0:0	2	->
water	124:29	0:0	2	mpv_flags
op	124:39	0:0	2	&
water	124:41	0:0	2	FF_MPV_FLAG_QP_RD
water	124:58	0:0	2	)
water	124:59	0:0	2	)
op	124:61	0:0	2	&&
op	125:24	0:0	2	!
water	125:25	0:0	2	s
op	125:26	0:0	2	->
water	125:28	0:0	2	fixed_qscale
water	125:40	0:0	2	;
water	126:4	0:0	2	s
op	126:5	0:0	2	->
water	126:7	0:0	2	loop_filter
op	126:19	0:0	2	=
op	126:21	0:0	2	!
op	126:22	0:0	2	!
water	126:23	0:0	2	(
water	126:24	0:0	2	s
op	126:25	0:0	2	->
water	126:27	0:0	2	avctx
op	126:32	0:0	2	->
water	126:34	0:0	2	flags
op	126:40	0:0	2	&
water	126:42	0:0	2	AV_CODEC_FLAG_LOOP_FILTER
water	126:67	0:0	2	)
water	126:68	0:0	2	;
if	127:4	151:4	2	(avctx -> rc_max_rate && ! avctx -> rc_buffer_size)
cond	127:8	127:38	3	avctx -> rc_max_rate && ! avctx -> rc_buffer_size
water	127:8	0:0	4	avctx
op	127:13	0:0	4	->
water	127:15	0:0	4	rc_max_rate
op	127:27	0:0	4	&&
op	127:30	0:0	4	!
water	127:31	0:0	4	avctx
op	127:36	0:0	4	->
water	127:38	0:0	4	rc_buffer_size
stmts	127:54	151:4	3	
water	127:54	0:0	4	{
switch	128:8	147:8	4	(avctx -> codec_id)
cond	128:15	128:22	5	avctx -> codec_id
water	128:15	0:0	6	avctx
op	128:20	0:0	6	->
water	128:22	0:0	6	codec_id
stmts	128:32	147:8	5	
water	128:32	0:0	6	{
label	129:8	129:35	6	case AV_CODEC_ID_MPEG1VIDEO :
label	130:8	130:35	6	case AV_CODEC_ID_MPEG2VIDEO :
water	131:12	0:0	6	avctx
op	131:17	0:0	6	->
water	131:19	0:0	6	rc_buffer_size
op	131:34	0:0	6	=
call	131:36	131:70	6	FFMAX
arg	131:42	131:60	7	avctx->rc_max_rate
water	131:42	0:0	8	avctx
op	131:47	0:0	8	->
water	131:49	0:0	8	rc_max_rate
arg	131:62	131:70	7	15000000
water	131:62	0:0	8	15000000
op	131:72	0:0	6	*
water	131:74	0:0	6	112
water	131:77	0:0	6	LL
op	131:80	0:0	6	/
water	131:82	0:0	6	15000000
op	131:91	0:0	6	*
water	131:93	0:0	6	16384
water	131:98	0:0	6	;
break	132:12	132:17	6	
label	133:8	133:30	6	case AV_CODEC_ID_MPEG4 :
label	134:8	134:34	6	case AV_CODEC_ID_MSMPEG4V1 :
label	135:8	135:34	6	case AV_CODEC_ID_MSMPEG4V2 :
label	136:8	136:34	6	case AV_CODEC_ID_MSMPEG4V3 :
if	137:12	139:12	6	(avctx -> rc_max_rate >= 15000000)
cond	137:22	137:44	7	avctx -> rc_max_rate >= 15000000
water	137:22	0:0	8	avctx
op	137:27	0:0	8	->
water	137:29	0:0	8	rc_max_rate
op	137:41	0:0	8	>=
water	137:44	0:0	8	15000000
stmts	137:54	139:12	7	
water	137:54	0:0	8	{
water	138:16	0:0	8	avctx
op	138:21	0:0	8	->
water	138:23	0:0	8	rc_buffer_size
op	138:38	0:0	8	=
water	138:40	0:0	8	320
op	138:44	0:0	8	+
water	138:46	0:0	8	(
water	138:47	0:0	8	avctx
op	138:52	0:0	8	->
water	138:54	0:0	8	rc_max_rate
op	138:66	0:0	8	-
water	138:68	0:0	8	15000000
water	138:76	0:0	8	LL
water	138:78	0:0	8	)
op	138:80	0:0	8	*
water	138:82	0:0	8	(
water	138:83	0:0	8	760
op	138:86	0:0	8	-
water	138:87	0:0	8	320
water	138:90	0:0	8	)
op	138:92	0:0	8	/
water	138:94	0:0	8	(
water	138:95	0:0	8	38400000
op	138:104	0:0	8	-
water	138:106	0:0	8	15000000
water	138:114	0:0	8	)
water	138:115	0:0	8	;
water	139:12	0:0	8	}
else	139:14	141:12	6
stmts	139:19	141:12	7	
if	139:19	141:12	8	(avctx -> rc_max_rate >= 2000000)
cond	139:22	139:45	9	avctx -> rc_max_rate >= 2000000
water	139:22	0:0	10	avctx
op	139:27	0:0	10	->
water	139:29	0:0	10	rc_max_rate
op	139:41	0:0	10	>=
water	139:45	0:0	10	2000000
stmts	139:54	141:12	9	
water	139:54	0:0	10	{
water	140:16	0:0	10	avctx
op	140:21	0:0	10	->
water	140:23	0:0	10	rc_buffer_size
op	140:38	0:0	10	=
water	140:41	0:0	10	80
op	140:44	0:0	10	+
water	140:46	0:0	10	(
water	140:47	0:0	10	avctx
op	140:52	0:0	10	->
water	140:54	0:0	10	rc_max_rate
op	140:66	0:0	10	-
water	140:69	0:0	10	2000000
water	140:76	0:0	10	LL
water	140:78	0:0	10	)
op	140:80	0:0	10	*
water	140:82	0:0	10	(
water	140:83	0:0	10	320
op	140:86	0:0	10	-
water	140:88	0:0	10	80
water	140:90	0:0	10	)
op	140:92	0:0	10	/
water	140:94	0:0	10	(
water	140:95	0:0	10	15000000
op	140:104	0:0	10	-
water	140:107	0:0	10	2000000
water	140:114	0:0	10	)
water	140:115	0:0	10	;
water	141:12	0:0	10	}
else	141:14	143:12	6
stmts	141:19	143:12	7	
if	141:19	143:12	8	(avctx -> rc_max_rate >= 384000)
cond	141:22	141:46	9	avctx -> rc_max_rate >= 384000
water	141:22	0:0	10	avctx
op	141:27	0:0	10	->
water	141:29	0:0	10	rc_max_rate
op	141:41	0:0	10	>=
water	141:46	0:0	10	384000
stmts	141:54	143:12	9	
water	141:54	0:0	10	{
water	142:16	0:0	10	avctx
op	142:21	0:0	10	->
water	142:23	0:0	10	rc_buffer_size
op	142:38	0:0	10	=
water	142:41	0:0	10	40
op	142:44	0:0	10	+
water	142:46	0:0	10	(
water	142:47	0:0	10	avctx
op	142:52	0:0	10	->
water	142:54	0:0	10	rc_max_rate
op	142:66	0:0	10	-
water	142:70	0:0	10	384000
water	142:76	0:0	10	LL
water	142:78	0:0	10	)
op	142:80	0:0	10	*
water	142:82	0:0	10	(
water	142:84	0:0	10	80
op	142:86	0:0	10	-
water	142:88	0:0	10	40
water	142:90	0:0	10	)
op	142:92	0:0	10	/
water	142:94	0:0	10	(
water	142:96	0:0	10	2000000
op	142:104	0:0	10	-
water	142:108	0:0	10	384000
water	142:114	0:0	10	)
water	142:115	0:0	10	;
water	143:12	0:0	10	}
else	143:14	144:42	6
stmts	144:16	144:42	7	
water	144:16	0:0	8	avctx
op	144:21	0:0	8	->
water	144:23	0:0	8	rc_buffer_size
op	144:38	0:0	8	=
water	144:40	0:0	8	40
water	144:42	0:0	8	;
water	145:12	0:0	6	avctx
op	145:17	0:0	6	->
water	145:19	0:0	6	rc_buffer_size
op	145:34	0:0	6	*=
water	145:37	0:0	6	16384
water	145:42	0:0	6	;
break	146:12	146:17	6	
water	147:8	0:0	6	}
if	148:8	150:8	4	(avctx -> rc_buffer_size)
cond	148:12	148:19	5	avctx -> rc_buffer_size
water	148:12	0:0	6	avctx
op	148:17	0:0	6	->
water	148:19	0:0	6	rc_buffer_size
stmts	148:35	150:8	5	
water	148:35	0:0	6	{
call	149:12	149:121	6	av_log
arg	149:19	149:24	7	avctx
water	149:19	0:0	8	avctx
arg	149:26	149:37	7	AV_LOG_INFO
water	149:26	0:0	8	AV_LOG_INFO
arg	149:39	149:93	7	"Automatically choosing VBV buffer size of %d kbyte\n"
water	149:39	0:0	8	"Automatically choosing VBV buffer size of %d kbyte\n"
arg	149:95	149:121	7	avctx->rc_buffer_size/8192
water	149:95	0:0	8	avctx
op	149:100	0:0	8	->
water	149:102	0:0	8	rc_buffer_size
op	149:116	0:0	8	/
water	149:117	0:0	8	8192
water	149:122	0:0	6	;
water	150:8	0:0	6	}
water	151:4	0:0	4	}
if	152:4	155:4	2	(( ! avctx -> rc_max_rate ) != ( ! avctx -> rc_buffer_size ))
cond	152:8	152:56	3	( ! avctx -> rc_max_rate ) != ( ! avctx -> rc_buffer_size )
water	152:8	0:0	4	(
op	152:9	0:0	4	!
water	152:10	0:0	4	avctx
op	152:15	0:0	4	->
water	152:17	0:0	4	rc_max_rate
water	152:28	0:0	4	)
op	152:30	0:0	4	!=
water	152:33	0:0	4	(
op	152:34	0:0	4	!
water	152:35	0:0	4	avctx
op	152:40	0:0	4	->
water	152:42	0:0	4	rc_buffer_size
water	152:56	0:0	4	)
stmts	152:59	155:4	3	
water	152:59	0:0	4	{
call	153:8	153:105	4	av_log
arg	153:15	153:20	5	avctx
water	153:15	0:0	6	avctx
arg	153:22	153:34	5	AV_LOG_ERROR
water	153:22	0:0	6	AV_LOG_ERROR
arg	153:36	153:105	5	"Either both buffer size and max rate or neither must be specified\n"
water	153:36	0:0	6	"Either both buffer size and max rate or neither must be specified\n"
water	153:106	0:0	4	;
return	154:8	154:17	4	-1
op	154:15	0:0	5	-
water	154:16	0:0	5	1
water	155:4	0:0	4	}
if	156:4	159:4	2	(avctx -> rc_min_rate && avctx -> rc_max_rate != avctx -> rc_min_rate)
cond	156:8	156:59	3	avctx -> rc_min_rate && avctx -> rc_max_rate != avctx -> rc_min_rate
water	156:8	0:0	4	avctx
op	156:13	0:0	4	->
water	156:15	0:0	4	rc_min_rate
op	156:27	0:0	4	&&
water	156:30	0:0	4	avctx
op	156:35	0:0	4	->
water	156:37	0:0	4	rc_max_rate
op	156:49	0:0	4	!=
water	156:52	0:0	4	avctx
op	156:57	0:0	4	->
water	156:59	0:0	4	rc_min_rate
stmts	156:72	159:4	3	
water	156:72	0:0	4	{
call	157:8	158:83	4	av_log
arg	157:15	157:20	5	avctx
water	157:15	0:0	6	avctx
arg	157:22	157:33	5	AV_LOG_INFO
water	157:22	0:0	6	AV_LOG_INFO
arg	158:15	158:83	5	"Warning min_rate > 0 but min_rate != max_rate isn't recommended!\n"
water	158:15	0:0	6	"Warning min_rate > 0 but min_rate != max_rate isn't recommended!\n"
water	158:84	0:0	4	;
water	159:4	0:0	4	}
if	160:4	163:4	2	(avctx -> rc_min_rate && avctx -> rc_min_rate > avctx -> bit_rate)
cond	160:8	160:58	3	avctx -> rc_min_rate && avctx -> rc_min_rate > avctx -> bit_rate
water	160:8	0:0	4	avctx
op	160:13	0:0	4	->
water	160:15	0:0	4	rc_min_rate
op	160:27	0:0	4	&&
water	160:30	0:0	4	avctx
op	160:35	0:0	4	->
water	160:37	0:0	4	rc_min_rate
op	160:49	0:0	4	>
water	160:51	0:0	4	avctx
op	160:56	0:0	4	->
water	160:58	0:0	4	bit_rate
stmts	160:68	163:4	3	
water	160:68	0:0	4	{
call	161:8	161:65	4	av_log
arg	161:15	161:20	5	avctx
water	161:15	0:0	6	avctx
arg	161:22	161:34	5	AV_LOG_ERROR
water	161:22	0:0	6	AV_LOG_ERROR
arg	161:36	161:65	5	"bitrate below min bitrate\n"
water	161:36	0:0	6	"bitrate below min bitrate\n"
water	161:66	0:0	4	;
return	162:8	162:17	4	-1
op	162:15	0:0	5	-
water	162:16	0:0	5	1
water	163:4	0:0	4	}
if	164:4	167:4	2	(avctx -> rc_max_rate && avctx -> rc_max_rate < avctx -> bit_rate)
cond	164:8	164:58	3	avctx -> rc_max_rate && avctx -> rc_max_rate < avctx -> bit_rate
water	164:8	0:0	4	avctx
op	164:13	0:0	4	->
water	164:15	0:0	4	rc_max_rate
op	164:27	0:0	4	&&
water	164:30	0:0	4	avctx
op	164:35	0:0	4	->
water	164:37	0:0	4	rc_max_rate
op	164:49	0:0	4	<
water	164:51	0:0	4	avctx
op	164:56	0:0	4	->
water	164:58	0:0	4	bit_rate
stmts	164:68	167:4	3	
water	164:68	0:0	4	{
call	165:8	165:65	4	av_log
arg	165:15	165:20	5	avctx
water	165:15	0:0	6	avctx
arg	165:22	165:34	5	AV_LOG_ERROR
water	165:22	0:0	6	AV_LOG_ERROR
arg	165:36	165:65	5	"bitrate above max bitrate\n"
water	165:36	0:0	6	"bitrate above max bitrate\n"
water	165:66	0:0	4	;
return	166:8	166:17	4	-1
op	166:15	0:0	5	-
water	166:16	0:0	5	1
water	167:4	0:0	4	}
if	168:4	173:4	2	(avctx -> rc_max_rate && avctx -> rc_max_rate == avctx -> bit_rate && avctx -> rc_max_rate != avctx -> rc_min_rate)
cond	168:8	170:37	3	avctx -> rc_max_rate && avctx -> rc_max_rate == avctx -> bit_rate && avctx -> rc_max_rate != avctx -> rc_min_rate
water	168:8	0:0	4	avctx
op	168:13	0:0	4	->
water	168:15	0:0	4	rc_max_rate
op	168:27	0:0	4	&&
water	169:8	0:0	4	avctx
op	169:13	0:0	4	->
water	169:15	0:0	4	rc_max_rate
op	169:27	0:0	4	==
water	169:30	0:0	4	avctx
op	169:35	0:0	4	->
water	169:37	0:0	4	bit_rate
op	169:46	0:0	4	&&
water	170:8	0:0	4	avctx
op	170:13	0:0	4	->
water	170:15	0:0	4	rc_max_rate
op	170:27	0:0	4	!=
water	170:30	0:0	4	avctx
op	170:35	0:0	4	->
water	170:37	0:0	4	rc_min_rate
stmts	170:50	173:4	3	
water	170:50	0:0	4	{
call	171:8	172:65	4	av_log
arg	171:15	171:20	5	avctx
water	171:15	0:0	6	avctx
arg	171:22	171:33	5	AV_LOG_INFO
water	171:22	0:0	6	AV_LOG_INFO
arg	172:15	172:65	5	"impossible bitrate constraints, this will fail\n"
water	172:15	0:0	6	"impossible bitrate constraints, this will fail\n"
water	172:66	0:0	4	;
water	173:4	0:0	4	}
if	174:4	179:4	2	(avctx -> rc_buffer_size && avctx -> bit_rate * ( int64_t ) avctx -> time_base . num > avctx -> rc_buffer_size * ( int64_t ) avctx -> time_base . den)
cond	174:8	176:62	3	avctx -> rc_buffer_size && avctx -> bit_rate * ( int64_t ) avctx -> time_base . num > avctx -> rc_buffer_size * ( int64_t ) avctx -> time_base . den
water	174:8	0:0	4	avctx
op	174:13	0:0	4	->
water	174:15	0:0	4	rc_buffer_size
op	174:30	0:0	4	&&
water	175:8	0:0	4	avctx
op	175:13	0:0	4	->
water	175:15	0:0	4	bit_rate
op	175:24	0:0	4	*
water	175:26	0:0	4	(
water	175:27	0:0	4	int64_t
water	175:34	0:0	4	)
water	175:35	0:0	4	avctx
op	175:40	0:0	4	->
water	175:42	0:0	4	time_base
op	175:51	0:0	4	.
water	175:52	0:0	4	num
op	175:56	0:0	4	>
water	176:12	0:0	4	avctx
op	176:17	0:0	4	->
water	176:19	0:0	4	rc_buffer_size
op	176:34	0:0	4	*
water	176:36	0:0	4	(
water	176:37	0:0	4	int64_t
water	176:44	0:0	4	)
water	176:45	0:0	4	avctx
op	176:50	0:0	4	->
water	176:52	0:0	4	time_base
op	176:61	0:0	4	.
water	176:62	0:0	4	den
stmts	176:67	179:4	3	
water	176:67	0:0	4	{
call	177:8	177:72	4	av_log
arg	177:15	177:20	5	avctx
water	177:15	0:0	6	avctx
arg	177:22	177:34	5	AV_LOG_ERROR
water	177:22	0:0	6	AV_LOG_ERROR
arg	177:36	177:72	5	"VBV buffer too small for bitrate\n"
water	177:36	0:0	6	"VBV buffer too small for bitrate\n"
water	177:73	0:0	4	;
return	178:8	178:17	4	-1
op	178:15	0:0	5	-
water	178:16	0:0	5	1
water	179:4	0:0	4	}
if	180:4	186:4	2	(! s -> fixed_qscale && avctx -> bit_rate* av_q2d (avctx -> time_base ) > avctx -> bit_rate_tolerance)
cond	180:8	182:19	3	! s -> fixed_qscale && avctx -> bit_rate* av_q2d (avctx -> time_base ) > avctx -> bit_rate_tolerance
op	180:8	0:0	4	!
water	180:9	0:0	4	s
op	180:10	0:0	4	->
water	180:12	0:0	4	fixed_qscale
op	180:25	0:0	4	&&
water	181:8	0:0	4	avctx
op	181:13	0:0	4	->
water	181:15	0:0	4	bit_rate
call	181:24	181:49	4	*av_q2d
arg	181:33	181:49	5	avctx->time_base
water	181:33	0:0	6	avctx
op	181:38	0:0	6	->
water	181:40	0:0	6	time_base
op	181:51	0:0	4	>
water	182:12	0:0	4	avctx
op	182:17	0:0	4	->
water	182:19	0:0	4	bit_rate_tolerance
stmts	182:39	186:4	3	
water	182:39	0:0	4	{
call	183:8	184:120	4	av_log
arg	183:15	183:20	5	avctx
water	183:15	0:0	6	avctx
arg	183:22	183:36	5	AV_LOG_WARNING
water	183:22	0:0	6	AV_LOG_WARNING
arg	184:15	184:76	5	"bitrate tolerance %d too small for bitrate %d, overriding\n"
water	184:15	0:0	6	"bitrate tolerance %d too small for bitrate %d, overriding\n"
arg	184:78	184:103	5	avctx->bit_rate_tolerance
water	184:78	0:0	6	avctx
op	184:83	0:0	6	->
water	184:85	0:0	6	bit_rate_tolerance
arg	184:105	184:120	5	avctx->bit_rate
water	184:105	0:0	6	avctx
op	184:110	0:0	6	->
water	184:112	0:0	6	bit_rate
water	184:121	0:0	4	;
water	185:8	0:0	4	avctx
op	185:13	0:0	4	->
water	185:15	0:0	4	bit_rate_tolerance
op	185:34	0:0	4	=
water	185:36	0:0	4	5
op	185:38	0:0	4	*
water	185:40	0:0	4	avctx
op	185:45	0:0	4	->
water	185:47	0:0	4	bit_rate
call	185:56	185:81	4	*av_q2d
arg	185:65	185:81	5	avctx->time_base
water	185:65	0:0	6	avctx
op	185:70	0:0	6	->
water	185:72	0:0	6	time_base
water	185:82	0:0	4	;
water	186:4	0:0	4	}
if	187:4	196:4	2	(s -> avctx -> rc_max_rate && s -> avctx -> rc_min_rate == s -> avctx -> rc_max_rate && ( s -> codec_id == AV_CODEC_ID_MPEG1VIDEO || s -> codec_id == AV_CODEC_ID_MPEG2VIDEO ) && 90000 LL * ( avctx -> rc_buffer_size - 1 ) > s -> avctx -> rc_max_rate * 0 xFFFFLL)
cond	187:8	192:37	3	s -> avctx -> rc_max_rate && s -> avctx -> rc_min_rate == s -> avctx -> rc_max_rate && ( s -> codec_id == AV_CODEC_ID_MPEG1VIDEO || s -> codec_id == AV_CODEC_ID_MPEG2VIDEO ) && 90000 LL * ( avctx -> rc_buffer_size - 1 ) > s -> avctx -> rc_max_rate * 0 xFFFFLL
water	187:8	0:0	4	s
op	187:9	0:0	4	->
water	187:11	0:0	4	avctx
op	187:16	0:0	4	->
water	187:18	0:0	4	rc_max_rate
op	187:30	0:0	4	&&
water	188:8	0:0	4	s
op	188:9	0:0	4	->
water	188:11	0:0	4	avctx
op	188:16	0:0	4	->
water	188:18	0:0	4	rc_min_rate
op	188:30	0:0	4	==
water	188:33	0:0	4	s
op	188:34	0:0	4	->
water	188:36	0:0	4	avctx
op	188:41	0:0	4	->
water	188:43	0:0	4	rc_max_rate
op	188:55	0:0	4	&&
water	189:8	0:0	4	(
water	189:9	0:0	4	s
op	189:10	0:0	4	->
water	189:12	0:0	4	codec_id
op	189:21	0:0	4	==
water	189:24	0:0	4	AV_CODEC_ID_MPEG1VIDEO
op	189:47	0:0	4	||
water	190:9	0:0	4	s
op	190:10	0:0	4	->
water	190:12	0:0	4	codec_id
op	190:21	0:0	4	==
water	190:24	0:0	4	AV_CODEC_ID_MPEG2VIDEO
water	190:46	0:0	4	)
op	190:48	0:0	4	&&
water	191:8	0:0	4	90000
water	191:13	0:0	4	LL
op	191:16	0:0	4	*
water	191:18	0:0	4	(
water	191:19	0:0	4	avctx
op	191:24	0:0	4	->
water	191:26	0:0	4	rc_buffer_size
op	191:41	0:0	4	-
water	191:43	0:0	4	1
water	191:44	0:0	4	)
op	191:46	0:0	4	>
water	192:12	0:0	4	s
op	192:13	0:0	4	->
water	192:15	0:0	4	avctx
op	192:20	0:0	4	->
water	192:22	0:0	4	rc_max_rate
op	192:34	0:0	4	*
water	192:36	0:0	4	0
water	192:37	0:0	4	xFFFFLL
stmts	192:46	196:4	3	
water	192:46	0:0	4	{
call	193:8	195:75	4	av_log
arg	193:15	193:20	5	avctx
water	193:15	0:0	6	avctx
arg	193:22	193:33	5	AV_LOG_INFO
water	193:22	0:0	6	AV_LOG_INFO
arg	194:15	195:75	5	"Warning vbv_delay will be set to 0xFFFF (=VBR) as the ""specified vbv buffer is too large for the given bitrate!\n"
water	194:15	0:0	6	"Warning vbv_delay will be set to 0xFFFF (=VBR) as the "
water	195:15	0:0	6	"specified vbv buffer is too large for the given bitrate!\n"
water	195:76	0:0	4	;
water	196:4	0:0	4	}
if	197:4	202:4	2	(( s -> avctx -> flags & AV_CODEC_FLAG_4MV ) && s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_H263 && s -> codec_id != AV_CODEC_ID_H263P && s -> codec_id != AV_CODEC_ID_FLV1)
cond	197:8	199:23	3	( s -> avctx -> flags & AV_CODEC_FLAG_4MV ) && s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_H263 && s -> codec_id != AV_CODEC_ID_H263P && s -> codec_id != AV_CODEC_ID_FLV1
water	197:8	0:0	4	(
water	197:9	0:0	4	s
op	197:10	0:0	4	->
water	197:12	0:0	4	avctx
op	197:17	0:0	4	->
water	197:19	0:0	4	flags
op	197:25	0:0	4	&
water	197:27	0:0	4	AV_CODEC_FLAG_4MV
water	197:44	0:0	4	)
op	197:46	0:0	4	&&
water	197:49	0:0	4	s
op	197:50	0:0	4	->
water	197:52	0:0	4	codec_id
op	197:61	0:0	4	!=
water	197:64	0:0	4	AV_CODEC_ID_MPEG4
op	197:82	0:0	4	&&
water	198:8	0:0	4	s
op	198:9	0:0	4	->
water	198:11	0:0	4	codec_id
op	198:20	0:0	4	!=
water	198:23	0:0	4	AV_CODEC_ID_H263
op	198:40	0:0	4	&&
water	198:43	0:0	4	s
op	198:44	0:0	4	->
water	198:46	0:0	4	codec_id
op	198:55	0:0	4	!=
water	198:58	0:0	4	AV_CODEC_ID_H263P
op	198:76	0:0	4	&&
water	199:8	0:0	4	s
op	199:9	0:0	4	->
water	199:11	0:0	4	codec_id
op	199:20	0:0	4	!=
water	199:23	0:0	4	AV_CODEC_ID_FLV1
stmts	199:41	202:4	3	
water	199:41	0:0	4	{
call	200:8	200:66	4	av_log
arg	200:15	200:20	5	avctx
water	200:15	0:0	6	avctx
arg	200:22	200:34	5	AV_LOG_ERROR
water	200:22	0:0	6	AV_LOG_ERROR
arg	200:36	200:66	5	"4MV not supported by codec\n"
water	200:36	0:0	6	"4MV not supported by codec\n"
water	200:67	0:0	4	;
return	201:8	201:17	4	-1
op	201:15	0:0	5	-
water	201:16	0:0	5	1
water	202:4	0:0	4	}
if	203:4	207:4	2	(s -> obmc && s -> avctx -> mb_decision != FF_MB_DECISION_SIMPLE)
cond	203:8	203:44	3	s -> obmc && s -> avctx -> mb_decision != FF_MB_DECISION_SIMPLE
water	203:8	0:0	4	s
op	203:9	0:0	4	->
water	203:11	0:0	4	obmc
op	203:16	0:0	4	&&
water	203:19	0:0	4	s
op	203:20	0:0	4	->
water	203:22	0:0	4	avctx
op	203:27	0:0	4	->
water	203:29	0:0	4	mb_decision
op	203:41	0:0	4	!=
water	203:44	0:0	4	FF_MB_DECISION_SIMPLE
stmts	203:67	207:4	3	
water	203:67	0:0	4	{
call	204:8	205:65	4	av_log
arg	204:15	204:20	5	avctx
water	204:15	0:0	6	avctx
arg	204:22	204:34	5	AV_LOG_ERROR
water	204:22	0:0	6	AV_LOG_ERROR
arg	205:15	205:65	5	"OBMC is only supported with simple mb decision\n"
water	205:15	0:0	6	"OBMC is only supported with simple mb decision\n"
water	205:66	0:0	4	;
return	206:8	206:17	4	-1
op	206:15	0:0	5	-
water	206:16	0:0	5	1
water	207:4	0:0	4	}
if	208:4	211:4	2	(s -> quarter_sample && s -> codec_id != AV_CODEC_ID_MPEG4)
cond	208:8	208:44	3	s -> quarter_sample && s -> codec_id != AV_CODEC_ID_MPEG4
water	208:8	0:0	4	s
op	208:9	0:0	4	->
water	208:11	0:0	4	quarter_sample
op	208:26	0:0	4	&&
water	208:29	0:0	4	s
op	208:30	0:0	4	->
water	208:32	0:0	4	codec_id
op	208:41	0:0	4	!=
water	208:44	0:0	4	AV_CODEC_ID_MPEG4
stmts	208:63	211:4	3	
water	208:63	0:0	4	{
call	209:8	209:67	4	av_log
arg	209:15	209:20	5	avctx
water	209:15	0:0	6	avctx
arg	209:22	209:34	5	AV_LOG_ERROR
water	209:22	0:0	6	AV_LOG_ERROR
arg	209:36	209:67	5	"qpel not supported by codec\n"
water	209:36	0:0	6	"qpel not supported by codec\n"
water	209:68	0:0	4	;
return	210:8	210:17	4	-1
op	210:15	0:0	5	-
water	210:16	0:0	5	1
water	211:4	0:0	4	}
if	212:4	218:4	2	(s -> max_b_frames && s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_MPEG1VIDEO && s -> codec_id != AV_CODEC_ID_MPEG2VIDEO)
cond	212:8	215:23	3	s -> max_b_frames && s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_MPEG1VIDEO && s -> codec_id != AV_CODEC_ID_MPEG2VIDEO
water	212:8	0:0	4	s
op	212:9	0:0	4	->
water	212:11	0:0	4	max_b_frames
op	212:43	0:0	4	&&
water	213:8	0:0	4	s
op	213:9	0:0	4	->
water	213:11	0:0	4	codec_id
op	213:20	0:0	4	!=
water	213:23	0:0	4	AV_CODEC_ID_MPEG4
op	213:46	0:0	4	&&
water	214:8	0:0	4	s
op	214:9	0:0	4	->
water	214:11	0:0	4	codec_id
op	214:20	0:0	4	!=
water	214:23	0:0	4	AV_CODEC_ID_MPEG1VIDEO
op	214:46	0:0	4	&&
water	215:8	0:0	4	s
op	215:9	0:0	4	->
water	215:11	0:0	4	codec_id
op	215:20	0:0	4	!=
water	215:23	0:0	4	AV_CODEC_ID_MPEG2VIDEO
stmts	215:47	218:4	3	
water	215:47	0:0	4	{
call	216:8	216:71	4	av_log
arg	216:15	216:20	5	avctx
water	216:15	0:0	6	avctx
arg	216:22	216:34	5	AV_LOG_ERROR
water	216:22	0:0	6	AV_LOG_ERROR
arg	216:36	216:71	5	"b frames not supported by codec\n"
water	216:36	0:0	6	"b frames not supported by codec\n"
water	216:72	0:0	4	;
return	217:8	217:17	4	-1
op	217:15	0:0	5	-
water	217:16	0:0	5	1
water	218:4	0:0	4	}
if	219:4	223:4	2	(s -> max_b_frames < 0)
cond	219:8	219:26	3	s -> max_b_frames < 0
water	219:8	0:0	4	s
op	219:9	0:0	4	->
water	219:11	0:0	4	max_b_frames
op	219:24	0:0	4	<
water	219:26	0:0	4	0
stmts	219:29	223:4	3	
water	219:29	0:0	4	{
call	220:8	221:82	4	av_log
arg	220:15	220:20	5	avctx
water	220:15	0:0	6	avctx
arg	220:22	220:34	5	AV_LOG_ERROR
water	220:22	0:0	6	AV_LOG_ERROR
arg	221:15	221:82	5	"max b frames must be 0 or positive for mpegvideo based encoders\n"
water	221:15	0:0	6	"max b frames must be 0 or positive for mpegvideo based encoders\n"
water	221:83	0:0	4	;
return	222:8	222:17	4	-1
op	222:15	0:0	5	-
water	222:16	0:0	5	1
water	223:4	0:0	4	}
if	224:4	234:4	2	(( s -> codec_id == AV_CODEC_ID_MPEG4 || s -> codec_id == AV_CODEC_ID_H263 || s -> codec_id == AV_CODEC_ID_H263P ) && ( avctx -> sample_aspect_ratio . num > 255 || avctx -> sample_aspect_ratio . den > 255 ))
cond	224:8	228:45	3	( s -> codec_id == AV_CODEC_ID_MPEG4 || s -> codec_id == AV_CODEC_ID_H263 || s -> codec_id == AV_CODEC_ID_H263P ) && ( avctx -> sample_aspect_ratio . num > 255 || avctx -> sample_aspect_ratio . den > 255 )
water	224:8	0:0	4	(
water	224:9	0:0	4	s
op	224:10	0:0	4	->
water	224:12	0:0	4	codec_id
op	224:21	0:0	4	==
water	224:24	0:0	4	AV_CODEC_ID_MPEG4
op	224:42	0:0	4	||
water	225:9	0:0	4	s
op	225:10	0:0	4	->
water	225:12	0:0	4	codec_id
op	225:21	0:0	4	==
water	225:24	0:0	4	AV_CODEC_ID_H263
op	225:42	0:0	4	||
water	226:9	0:0	4	s
op	226:10	0:0	4	->
water	226:12	0:0	4	codec_id
op	226:21	0:0	4	==
water	226:24	0:0	4	AV_CODEC_ID_H263P
water	226:41	0:0	4	)
op	226:43	0:0	4	&&
water	227:8	0:0	4	(
water	227:9	0:0	4	avctx
op	227:14	0:0	4	->
water	227:16	0:0	4	sample_aspect_ratio
op	227:35	0:0	4	.
water	227:36	0:0	4	num
op	227:40	0:0	4	>
water	227:42	0:0	4	255
op	227:46	0:0	4	||
water	228:9	0:0	4	avctx
op	228:14	0:0	4	->
water	228:16	0:0	4	sample_aspect_ratio
op	228:35	0:0	4	.
water	228:36	0:0	4	den
op	228:40	0:0	4	>
water	228:42	0:0	4	255
water	228:45	0:0	4	)
stmts	228:48	234:4	3	
water	228:48	0:0	4	{
call	229:8	231:77	4	av_log
arg	229:15	229:20	5	avctx
water	229:15	0:0	6	avctx
arg	229:22	229:36	5	AV_LOG_WARNING
water	229:22	0:0	6	AV_LOG_WARNING
arg	230:15	230:78	5	"Invalid pixel aspect ratio %i/%i, limit is 255/255 reducing\n"
water	230:15	0:0	6	"Invalid pixel aspect ratio %i/%i, limit is 255/255 reducing\n"
arg	231:15	231:45	5	avctx->sample_aspect_ratio.num
water	231:15	0:0	6	avctx
op	231:20	0:0	6	->
water	231:22	0:0	6	sample_aspect_ratio
op	231:41	0:0	6	.
water	231:42	0:0	6	num
arg	231:47	231:77	5	avctx->sample_aspect_ratio.den
water	231:47	0:0	6	avctx
op	231:52	0:0	6	->
water	231:54	0:0	6	sample_aspect_ratio
op	231:73	0:0	6	.
water	231:74	0:0	6	den
water	231:78	0:0	4	;
call	232:8	233:87	4	av_reduce
arg	232:18	232:49	5	&avctx->sample_aspect_ratio.num
op	232:18	0:0	6	&
water	232:19	0:0	6	avctx
op	232:24	0:0	6	->
water	232:26	0:0	6	sample_aspect_ratio
op	232:45	0:0	6	.
water	232:46	0:0	6	num
arg	232:51	232:82	5	&avctx->sample_aspect_ratio.den
op	232:51	0:0	6	&
water	232:52	0:0	6	avctx
op	232:57	0:0	6	->
water	232:59	0:0	6	sample_aspect_ratio
op	232:78	0:0	6	.
water	232:79	0:0	6	den
arg	233:19	233:49	5	avctx->sample_aspect_ratio.num
water	233:19	0:0	6	avctx
op	233:24	0:0	6	->
water	233:26	0:0	6	sample_aspect_ratio
op	233:45	0:0	6	.
water	233:46	0:0	6	num
arg	233:52	233:82	5	avctx->sample_aspect_ratio.den
water	233:52	0:0	6	avctx
op	233:57	0:0	6	->
water	233:59	0:0	6	sample_aspect_ratio
op	233:78	0:0	6	.
water	233:79	0:0	6	den
arg	233:84	233:87	5	255
water	233:84	0:0	6	255
water	233:88	0:0	4	;
water	234:4	0:0	4	}
if	235:4	241:4	2	(( s -> codec_id == AV_CODEC_ID_H263 || s -> codec_id == AV_CODEC_ID_H263P ) && ( avctx -> width > 2048 || avctx -> height > 1152 ))
cond	235:8	238:30	3	( s -> codec_id == AV_CODEC_ID_H263 || s -> codec_id == AV_CODEC_ID_H263P ) && ( avctx -> width > 2048 || avctx -> height > 1152 )
water	235:8	0:0	4	(
water	235:9	0:0	4	s
op	235:10	0:0	4	->
water	235:12	0:0	4	codec_id
op	235:21	0:0	4	==
water	235:24	0:0	4	AV_CODEC_ID_H263
op	235:42	0:0	4	||
water	236:9	0:0	4	s
op	236:10	0:0	4	->
water	236:12	0:0	4	codec_id
op	236:21	0:0	4	==
water	236:24	0:0	4	AV_CODEC_ID_H263P
water	236:41	0:0	4	)
op	236:43	0:0	4	&&
water	237:8	0:0	4	(
water	237:9	0:0	4	avctx
op	237:14	0:0	4	->
water	237:16	0:0	4	width
op	237:23	0:0	4	>
water	237:25	0:0	4	2048
op	237:30	0:0	4	||
water	238:9	0:0	4	avctx
op	238:14	0:0	4	->
water	238:16	0:0	4	height
op	238:23	0:0	4	>
water	238:25	0:0	4	1152
water	238:30	0:0	4	)
stmts	238:33	241:4	3	
water	238:33	0:0	4	{
call	239:8	239:90	4	av_log
arg	239:15	239:20	5	avctx
water	239:15	0:0	6	avctx
arg	239:22	239:34	5	AV_LOG_ERROR
water	239:22	0:0	6	AV_LOG_ERROR
arg	239:36	239:90	5	"H.263 does not support resolutions above 2048x1152\n"
water	239:36	0:0	6	"H.263 does not support resolutions above 2048x1152\n"
water	239:91	0:0	4	;
return	240:8	240:17	4	-1
op	240:15	0:0	5	-
water	240:16	0:0	5	1
water	241:4	0:0	4	}
if	242:4	248:4	2	(( s -> codec_id == AV_CODEC_ID_H263 || s -> codec_id == AV_CODEC_ID_H263P ) && ( ( avctx -> width & 3 ) || ( avctx -> height & 3 ) ))
cond	242:8	245:27	3	( s -> codec_id == AV_CODEC_ID_H263 || s -> codec_id == AV_CODEC_ID_H263P ) && ( ( avctx -> width & 3 ) || ( avctx -> height & 3 ) )
water	242:8	0:0	4	(
water	242:9	0:0	4	s
op	242:10	0:0	4	->
water	242:12	0:0	4	codec_id
op	242:21	0:0	4	==
water	242:24	0:0	4	AV_CODEC_ID_H263
op	242:42	0:0	4	||
water	243:9	0:0	4	s
op	243:10	0:0	4	->
water	243:12	0:0	4	codec_id
op	243:21	0:0	4	==
water	243:24	0:0	4	AV_CODEC_ID_H263P
water	243:41	0:0	4	)
op	243:43	0:0	4	&&
water	244:8	0:0	4	(
water	244:9	0:0	4	(
water	244:10	0:0	4	avctx
op	244:15	0:0	4	->
water	244:17	0:0	4	width
op	244:23	0:0	4	&
water	244:24	0:0	4	3
water	244:25	0:0	4	)
op	244:27	0:0	4	||
water	245:9	0:0	4	(
water	245:10	0:0	4	avctx
op	245:15	0:0	4	->
water	245:17	0:0	4	height
op	245:23	0:0	4	&
water	245:24	0:0	4	3
water	245:25	0:0	4	)
water	245:27	0:0	4	)
stmts	245:30	248:4	3	
water	245:30	0:0	4	{
call	246:8	246:67	4	av_log
arg	246:15	246:20	5	avctx
water	246:15	0:0	6	avctx
arg	246:22	246:34	5	AV_LOG_ERROR
water	246:22	0:0	6	AV_LOG_ERROR
arg	246:36	246:67	5	"w/h must be a multiple of 4\n"
water	246:36	0:0	6	"w/h must be a multiple of 4\n"
water	246:68	0:0	4	;
return	247:8	247:17	4	-1
op	247:15	0:0	5	-
water	247:16	0:0	5	1
water	248:4	0:0	4	}
if	249:4	254:4	2	(s -> codec_id == AV_CODEC_ID_MPEG1VIDEO && ( avctx -> width > 4095 || avctx -> height > 4095 ))
cond	249:8	251:30	3	s -> codec_id == AV_CODEC_ID_MPEG1VIDEO && ( avctx -> width > 4095 || avctx -> height > 4095 )
water	249:8	0:0	4	s
op	249:9	0:0	4	->
water	249:11	0:0	4	codec_id
op	249:20	0:0	4	==
water	249:23	0:0	4	AV_CODEC_ID_MPEG1VIDEO
op	249:46	0:0	4	&&
water	250:8	0:0	4	(
water	250:9	0:0	4	avctx
op	250:14	0:0	4	->
water	250:16	0:0	4	width
op	250:23	0:0	4	>
water	250:25	0:0	4	4095
op	250:30	0:0	4	||
water	251:9	0:0	4	avctx
op	251:14	0:0	4	->
water	251:16	0:0	4	height
op	251:23	0:0	4	>
water	251:25	0:0	4	4095
water	251:30	0:0	4	)
stmts	251:33	254:4	3	
water	251:33	0:0	4	{
call	252:8	252:91	4	av_log
arg	252:15	252:20	5	avctx
water	252:15	0:0	6	avctx
arg	252:22	252:34	5	AV_LOG_ERROR
water	252:22	0:0	6	AV_LOG_ERROR
arg	252:36	252:91	5	"MPEG-1 does not support resolutions above 4095x4095\n"
water	252:36	0:0	6	"MPEG-1 does not support resolutions above 4095x4095\n"
water	252:92	0:0	4	;
return	253:8	253:17	4	-1
op	253:15	0:0	5	-
water	253:16	0:0	5	1
water	254:4	0:0	4	}
if	255:4	260:4	2	(s -> codec_id == AV_CODEC_ID_MPEG2VIDEO && ( avctx -> width > 16383 || avctx -> height > 16383 ))
cond	255:8	257:31	3	s -> codec_id == AV_CODEC_ID_MPEG2VIDEO && ( avctx -> width > 16383 || avctx -> height > 16383 )
water	255:8	0:0	4	s
op	255:9	0:0	4	->
water	255:11	0:0	4	codec_id
op	255:20	0:0	4	==
water	255:23	0:0	4	AV_CODEC_ID_MPEG2VIDEO
op	255:46	0:0	4	&&
water	256:8	0:0	4	(
water	256:9	0:0	4	avctx
op	256:14	0:0	4	->
water	256:16	0:0	4	width
op	256:23	0:0	4	>
water	256:25	0:0	4	16383
op	256:31	0:0	4	||
water	257:9	0:0	4	avctx
op	257:14	0:0	4	->
water	257:16	0:0	4	height
op	257:23	0:0	4	>
water	257:25	0:0	4	16383
water	257:31	0:0	4	)
stmts	257:34	260:4	3	
water	257:34	0:0	4	{
call	258:8	258:93	4	av_log
arg	258:15	258:20	5	avctx
water	258:15	0:0	6	avctx
arg	258:22	258:34	5	AV_LOG_ERROR
water	258:22	0:0	6	AV_LOG_ERROR
arg	258:36	258:93	5	"MPEG-2 does not support resolutions above 16383x16383\n"
water	258:36	0:0	6	"MPEG-2 does not support resolutions above 16383x16383\n"
water	258:94	0:0	4	;
return	259:8	259:17	4	-1
op	259:15	0:0	5	-
water	259:16	0:0	5	1
water	260:4	0:0	4	}
if	261:4	266:4	2	(s -> codec_id == AV_CODEC_ID_RV10 && ( avctx -> width & 15 || avctx -> height & 15 ))
cond	261:8	263:26	3	s -> codec_id == AV_CODEC_ID_RV10 && ( avctx -> width & 15 || avctx -> height & 15 )
water	261:8	0:0	4	s
op	261:9	0:0	4	->
water	261:11	0:0	4	codec_id
op	261:20	0:0	4	==
water	261:23	0:0	4	AV_CODEC_ID_RV10
op	261:40	0:0	4	&&
water	262:8	0:0	4	(
water	262:9	0:0	4	avctx
op	262:14	0:0	4	->
water	262:16	0:0	4	width
op	262:22	0:0	4	&
water	262:23	0:0	4	15
op	262:26	0:0	4	||
water	263:9	0:0	4	avctx
op	263:14	0:0	4	->
water	263:16	0:0	4	height
op	263:22	0:0	4	&
water	263:23	0:0	4	15
water	263:26	0:0	4	)
stmts	263:29	266:4	3	
water	263:29	0:0	4	{
call	264:8	264:81	4	av_log
arg	264:15	264:20	5	avctx
water	264:15	0:0	6	avctx
arg	264:22	264:34	5	AV_LOG_ERROR
water	264:22	0:0	6	AV_LOG_ERROR
arg	264:36	264:81	5	"width and height must be a multiple of 16\n"
water	264:36	0:0	6	"width and height must be a multiple of 16\n"
water	264:82	0:0	4	;
return	265:8	265:30	4	AVERROR(EINVAL)
call	265:15	265:29	5	AVERROR
arg	265:23	265:29	6	EINVAL
water	265:23	0:0	7	EINVAL
water	266:4	0:0	4	}
if	267:4	272:4	2	(s -> codec_id == AV_CODEC_ID_RV20 && ( avctx -> width & 3 || avctx -> height & 3 ))
cond	267:8	269:25	3	s -> codec_id == AV_CODEC_ID_RV20 && ( avctx -> width & 3 || avctx -> height & 3 )
water	267:8	0:0	4	s
op	267:9	0:0	4	->
water	267:11	0:0	4	codec_id
op	267:20	0:0	4	==
water	267:23	0:0	4	AV_CODEC_ID_RV20
op	267:40	0:0	4	&&
water	268:8	0:0	4	(
water	268:9	0:0	4	avctx
op	268:14	0:0	4	->
water	268:16	0:0	4	width
op	268:22	0:0	4	&
water	268:23	0:0	4	3
op	268:25	0:0	4	||
water	269:9	0:0	4	avctx
op	269:14	0:0	4	->
water	269:16	0:0	4	height
op	269:22	0:0	4	&
water	269:23	0:0	4	3
water	269:25	0:0	4	)
stmts	269:28	272:4	3	
water	269:28	0:0	4	{
call	270:8	270:80	4	av_log
arg	270:15	270:20	5	avctx
water	270:15	0:0	6	avctx
arg	270:22	270:34	5	AV_LOG_ERROR
water	270:22	0:0	6	AV_LOG_ERROR
arg	270:36	270:80	5	"width and height must be a multiple of 4\n"
water	270:36	0:0	6	"width and height must be a multiple of 4\n"
water	270:81	0:0	4	;
return	271:8	271:30	4	AVERROR(EINVAL)
call	271:15	271:29	5	AVERROR
arg	271:23	271:29	6	EINVAL
water	271:23	0:0	7	EINVAL
water	272:4	0:0	4	}
if	273:4	278:4	2	(( s -> codec_id == AV_CODEC_ID_WMV1 || s -> codec_id == AV_CODEC_ID_WMV2 ) && avctx -> width & 1)
cond	273:8	275:24	3	( s -> codec_id == AV_CODEC_ID_WMV1 || s -> codec_id == AV_CODEC_ID_WMV2 ) && avctx -> width & 1
water	273:8	0:0	4	(
water	273:9	0:0	4	s
op	273:10	0:0	4	->
water	273:12	0:0	4	codec_id
op	273:21	0:0	4	==
water	273:24	0:0	4	AV_CODEC_ID_WMV1
op	273:41	0:0	4	||
water	274:9	0:0	4	s
op	274:10	0:0	4	->
water	274:12	0:0	4	codec_id
op	274:21	0:0	4	==
water	274:24	0:0	4	AV_CODEC_ID_WMV2
water	274:40	0:0	4	)
op	274:42	0:0	4	&&
water	275:9	0:0	4	avctx
op	275:14	0:0	4	->
water	275:16	0:0	4	width
op	275:22	0:0	4	&
water	275:24	0:0	4	1
stmts	275:27	278:4	3	
water	275:27	0:0	4	{
call	276:9	276:68	4	av_log
arg	276:16	276:21	5	avctx
water	276:16	0:0	6	avctx
arg	276:23	276:35	5	AV_LOG_ERROR
water	276:23	0:0	6	AV_LOG_ERROR
arg	276:37	276:68	5	"width must be multiple of 2\n"
water	276:37	0:0	6	"width must be multiple of 2\n"
water	276:69	0:0	4	;
return	277:9	277:18	4	-1
op	277:16	0:0	5	-
water	277:17	0:0	5	1
water	278:4	0:0	4	}
if	279:4	283:4	2	(( s -> avctx -> flags & ( AV_CODEC_FLAG_INTERLACED_DCT | AV_CODEC_FLAG_INTERLACED_ME ) ) && s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_MPEG2VIDEO)
cond	279:8	280:59	3	( s -> avctx -> flags & ( AV_CODEC_FLAG_INTERLACED_DCT | AV_CODEC_FLAG_INTERLACED_ME ) ) && s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_MPEG2VIDEO
water	279:8	0:0	4	(
water	279:9	0:0	4	s
op	279:10	0:0	4	->
water	279:12	0:0	4	avctx
op	279:17	0:0	4	->
water	279:19	0:0	4	flags
op	279:25	0:0	4	&
water	279:27	0:0	4	(
water	279:28	0:0	4	AV_CODEC_FLAG_INTERLACED_DCT
op	279:57	0:0	4	|
water	279:59	0:0	4	AV_CODEC_FLAG_INTERLACED_ME
water	279:86	0:0	4	)
water	279:87	0:0	4	)
op	279:89	0:0	4	&&
water	280:8	0:0	4	s
op	280:9	0:0	4	->
water	280:11	0:0	4	codec_id
op	280:20	0:0	4	!=
water	280:23	0:0	4	AV_CODEC_ID_MPEG4
op	280:41	0:0	4	&&
water	280:44	0:0	4	s
op	280:45	0:0	4	->
water	280:47	0:0	4	codec_id
op	280:56	0:0	4	!=
water	280:59	0:0	4	AV_CODEC_ID_MPEG2VIDEO
stmts	280:83	283:4	3	
water	280:83	0:0	4	{
call	281:8	281:74	4	av_log
arg	281:15	281:20	5	avctx
water	281:15	0:0	6	avctx
arg	281:22	281:34	5	AV_LOG_ERROR
water	281:22	0:0	6	AV_LOG_ERROR
arg	281:36	281:74	5	"interlacing not supported by codec\n"
water	281:36	0:0	6	"interlacing not supported by codec\n"
water	281:75	0:0	4	;
return	282:8	282:17	4	-1
op	282:15	0:0	5	-
water	282:16	0:0	5	1
water	283:4	0:0	4	}
if	285:4	290:4	2	(s -> mpeg_quant && ( s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_MPEG2VIDEO ))
cond	285:8	286:66	3	s -> mpeg_quant && ( s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_MPEG2VIDEO )
water	285:8	0:0	4	s
op	285:9	0:0	4	->
water	285:11	0:0	4	mpeg_quant
op	285:22	0:0	4	&&
water	285:25	0:0	4	(
water	285:29	0:0	4	s
op	285:30	0:0	4	->
water	285:32	0:0	4	codec_id
op	285:41	0:0	4	!=
water	285:44	0:0	4	AV_CODEC_ID_MPEG4
op	286:26	0:0	4	&&
water	286:29	0:0	4	s
op	286:30	0:0	4	->
water	286:32	0:0	4	codec_id
op	286:41	0:0	4	!=
water	286:44	0:0	4	AV_CODEC_ID_MPEG2VIDEO
water	286:66	0:0	4	)
stmts	286:69	290:4	3	
water	286:69	0:0	4	{
call	287:8	288:66	4	av_log
arg	287:15	287:20	5	avctx
water	287:15	0:0	6	avctx
arg	287:22	287:34	5	AV_LOG_ERROR
water	287:22	0:0	6	AV_LOG_ERROR
arg	288:15	288:66	5	"mpeg2 style quantization not supported by codec\n"
water	288:15	0:0	6	"mpeg2 style quantization not supported by codec\n"
water	288:67	0:0	4	;
return	289:8	289:17	4	-1
op	289:15	0:0	5	-
water	289:16	0:0	5	1
water	290:4	0:0	4	}
if	291:4	294:4	2	(( s -> mpv_flags & FF_MPV_FLAG_CBP_RD ) && ! avctx -> trellis)
cond	291:8	291:55	3	( s -> mpv_flags & FF_MPV_FLAG_CBP_RD ) && ! avctx -> trellis
water	291:8	0:0	4	(
water	291:9	0:0	4	s
op	291:10	0:0	4	->
water	291:12	0:0	4	mpv_flags
op	291:22	0:0	4	&
water	291:24	0:0	4	FF_MPV_FLAG_CBP_RD
water	291:42	0:0	4	)
op	291:44	0:0	4	&&
op	291:47	0:0	4	!
water	291:48	0:0	4	avctx
op	291:53	0:0	4	->
water	291:55	0:0	4	trellis
stmts	291:64	294:4	3	
water	291:64	0:0	4	{
call	292:8	292:66	4	av_log
arg	292:15	292:20	5	avctx
water	292:15	0:0	6	avctx
arg	292:22	292:34	5	AV_LOG_ERROR
water	292:22	0:0	6	AV_LOG_ERROR
arg	292:36	292:66	5	"CBP RD needs trellis quant\n"
water	292:36	0:0	6	"CBP RD needs trellis quant\n"
water	292:67	0:0	4	;
return	293:8	293:17	4	-1
op	293:15	0:0	5	-
water	293:16	0:0	5	1
water	294:4	0:0	4	}
if	295:4	299:4	2	(( s -> mpv_flags & FF_MPV_FLAG_QP_RD ) && s -> avctx -> mb_decision != FF_MB_DECISION_RD)
cond	295:8	296:33	3	( s -> mpv_flags & FF_MPV_FLAG_QP_RD ) && s -> avctx -> mb_decision != FF_MB_DECISION_RD
water	295:8	0:0	4	(
water	295:9	0:0	4	s
op	295:10	0:0	4	->
water	295:12	0:0	4	mpv_flags
op	295:22	0:0	4	&
water	295:24	0:0	4	FF_MPV_FLAG_QP_RD
water	295:41	0:0	4	)
op	295:43	0:0	4	&&
water	296:8	0:0	4	s
op	296:9	0:0	4	->
water	296:11	0:0	4	avctx
op	296:16	0:0	4	->
water	296:18	0:0	4	mb_decision
op	296:30	0:0	4	!=
water	296:33	0:0	4	FF_MB_DECISION_RD
stmts	296:52	299:4	3	
water	296:52	0:0	4	{
call	297:8	297:57	4	av_log
arg	297:15	297:20	5	avctx
water	297:15	0:0	6	avctx
arg	297:22	297:34	5	AV_LOG_ERROR
water	297:22	0:0	6	AV_LOG_ERROR
arg	297:36	297:57	5	"QP RD needs mbd=2\n"
water	297:36	0:0	6	"QP RD needs mbd=2\n"
water	297:58	0:0	4	;
return	298:8	298:17	4	-1
op	298:15	0:0	5	-
water	298:16	0:0	5	1
water	299:4	0:0	4	}
if	300:4	306:4	2	(s -> avctx -> scenechange_threshold < 1000000000 && ( s -> avctx -> flags & AV_CODEC_FLAG_CLOSED_GOP ))
cond	300:8	301:51	3	s -> avctx -> scenechange_threshold < 1000000000 && ( s -> avctx -> flags & AV_CODEC_FLAG_CLOSED_GOP )
water	300:8	0:0	4	s
op	300:9	0:0	4	->
water	300:11	0:0	4	avctx
op	300:16	0:0	4	->
water	300:18	0:0	4	scenechange_threshold
op	300:40	0:0	4	<
water	300:42	0:0	4	1000000000
op	300:53	0:0	4	&&
water	301:8	0:0	4	(
water	301:9	0:0	4	s
op	301:10	0:0	4	->
water	301:12	0:0	4	avctx
op	301:17	0:0	4	->
water	301:19	0:0	4	flags
op	301:25	0:0	4	&
water	301:27	0:0	4	AV_CODEC_FLAG_CLOSED_GOP
water	301:51	0:0	4	)
stmts	301:54	306:4	3	
water	301:54	0:0	4	{
call	302:8	304:46	4	av_log
arg	302:15	302:20	5	avctx
water	302:15	0:0	6	avctx
arg	302:22	302:34	5	AV_LOG_ERROR
water	302:22	0:0	6	AV_LOG_ERROR
arg	303:15	304:46	5	"closed gop with scene change detection are not supported yet, ""set threshold to 1000000000\n"
water	303:15	0:0	6	"closed gop with scene change detection are not supported yet, "
water	304:15	0:0	6	"set threshold to 1000000000\n"
water	304:47	0:0	4	;
return	305:8	305:17	4	-1
op	305:15	0:0	5	-
water	305:16	0:0	5	1
water	306:4	0:0	4	}
if	307:4	318:4	2	(s -> avctx -> flags & AV_CODEC_FLAG_LOW_DELAY)
cond	307:8	307:26	3	s -> avctx -> flags & AV_CODEC_FLAG_LOW_DELAY
water	307:8	0:0	4	s
op	307:9	0:0	4	->
water	307:11	0:0	4	avctx
op	307:16	0:0	4	->
water	307:18	0:0	4	flags
op	307:24	0:0	4	&
water	307:26	0:0	4	AV_CODEC_FLAG_LOW_DELAY
stmts	307:51	318:4	3	
water	307:51	0:0	4	{
if	308:8	312:8	4	(s -> codec_id != AV_CODEC_ID_MPEG2VIDEO)
cond	308:12	308:27	5	s -> codec_id != AV_CODEC_ID_MPEG2VIDEO
water	308:12	0:0	6	s
op	308:13	0:0	6	->
water	308:15	0:0	6	codec_id
op	308:24	0:0	6	!=
water	308:27	0:0	6	AV_CODEC_ID_MPEG2VIDEO
stmts	308:51	312:8	5	
water	308:51	0:0	6	{
call	309:12	310:67	6	av_log
arg	309:19	309:24	7	avctx
water	309:19	0:0	8	avctx
arg	309:26	309:38	7	AV_LOG_ERROR
water	309:26	0:0	8	AV_LOG_ERROR
arg	310:18	310:67	7	"low delay forcing is only available for mpeg2\n"
water	310:18	0:0	8	"low delay forcing is only available for mpeg2\n"
water	310:68	0:0	6	;
return	311:12	311:21	6	-1
op	311:19	0:0	7	-
water	311:20	0:0	7	1
water	312:8	0:0	6	}
if	313:8	317:8	4	(s -> max_b_frames != 0)
cond	313:12	313:31	5	s -> max_b_frames != 0
water	313:12	0:0	6	s
op	313:13	0:0	6	->
water	313:15	0:0	6	max_b_frames
op	313:28	0:0	6	!=
water	313:31	0:0	6	0
stmts	313:34	317:8	5	
water	313:34	0:0	6	{
call	314:12	315:61	6	av_log
arg	314:19	314:24	7	avctx
water	314:19	0:0	8	avctx
arg	314:26	314:38	7	AV_LOG_ERROR
water	314:26	0:0	8	AV_LOG_ERROR
arg	315:19	315:61	7	"b frames cannot be used with low delay\n"
water	315:19	0:0	8	"b frames cannot be used with low delay\n"
water	315:62	0:0	6	;
return	316:12	316:21	6	-1
op	316:19	0:0	7	-
water	316:20	0:0	7	1
water	317:8	0:0	6	}
water	318:4	0:0	4	}
if	319:4	325:4	2	(s -> q_scale_type == 1)
cond	319:8	319:27	3	s -> q_scale_type == 1
water	319:8	0:0	4	s
op	319:9	0:0	4	->
water	319:11	0:0	4	q_scale_type
op	319:24	0:0	4	==
water	319:27	0:0	4	1
stmts	319:30	325:4	3	
water	319:30	0:0	4	{
if	320:8	324:8	4	(avctx -> qmax > 28)
cond	320:12	320:26	5	avctx -> qmax > 28
water	320:12	0:0	6	avctx
op	320:17	0:0	6	->
water	320:19	0:0	6	qmax
op	320:24	0:0	6	>
water	320:26	0:0	6	28
stmts	320:30	324:8	5	
water	320:30	0:0	6	{
call	321:12	322:74	6	av_log
arg	321:19	321:24	7	avctx
water	321:19	0:0	8	avctx
arg	321:26	321:38	7	AV_LOG_ERROR
water	321:26	0:0	8	AV_LOG_ERROR
arg	322:19	322:74	7	"non linear quant only supports qmax <= 28 currently\n"
water	322:19	0:0	8	"non linear quant only supports qmax <= 28 currently\n"
water	322:75	0:0	6	;
return	323:12	323:21	6	-1
op	323:19	0:0	7	-
water	323:20	0:0	7	1
water	324:8	0:0	6	}
water	325:4	0:0	4	}
if	326:4	335:4	2	(s -> avctx -> thread_count > 1 && s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_MPEG1VIDEO && s -> codec_id != AV_CODEC_ID_MPEG2VIDEO && s -> codec_id != AV_CODEC_ID_MJPEG && ( s -> codec_id != AV_CODEC_ID_H263P ))
cond	326:8	331:41	3	s -> avctx -> thread_count > 1 && s -> codec_id != AV_CODEC_ID_MPEG4 && s -> codec_id != AV_CODEC_ID_MPEG1VIDEO && s -> codec_id != AV_CODEC_ID_MPEG2VIDEO && s -> codec_id != AV_CODEC_ID_MJPEG && ( s -> codec_id != AV_CODEC_ID_H263P )
water	326:8	0:0	4	s
op	326:9	0:0	4	->
water	326:11	0:0	4	avctx
op	326:16	0:0	4	->
water	326:18	0:0	4	thread_count
op	326:31	0:0	4	>
water	326:33	0:0	4	1
op	326:43	0:0	4	&&
water	327:8	0:0	4	s
op	327:9	0:0	4	->
water	327:11	0:0	4	codec_id
op	327:20	0:0	4	!=
water	327:23	0:0	4	AV_CODEC_ID_MPEG4
op	327:46	0:0	4	&&
water	328:8	0:0	4	s
op	328:9	0:0	4	->
water	328:11	0:0	4	codec_id
op	328:20	0:0	4	!=
water	328:23	0:0	4	AV_CODEC_ID_MPEG1VIDEO
op	328:46	0:0	4	&&
water	329:8	0:0	4	s
op	329:9	0:0	4	->
water	329:11	0:0	4	codec_id
op	329:20	0:0	4	!=
water	329:23	0:0	4	AV_CODEC_ID_MPEG2VIDEO
op	329:46	0:0	4	&&
water	330:8	0:0	4	s
op	330:9	0:0	4	->
water	330:11	0:0	4	codec_id
op	330:20	0:0	4	!=
water	330:23	0:0	4	AV_CODEC_ID_MJPEG
op	330:46	0:0	4	&&
water	331:8	0:0	4	(
water	331:9	0:0	4	s
op	331:10	0:0	4	->
water	331:12	0:0	4	codec_id
op	331:21	0:0	4	!=
water	331:24	0:0	4	AV_CODEC_ID_H263P
water	331:41	0:0	4	)
stmts	331:44	335:4	3	
water	331:44	0:0	4	{
call	332:8	333:65	4	av_log
arg	332:15	332:20	5	avctx
water	332:15	0:0	6	avctx
arg	332:22	332:34	5	AV_LOG_ERROR
water	332:22	0:0	6	AV_LOG_ERROR
arg	333:15	333:65	5	"multi threaded encoding not supported by codec\n"
water	333:15	0:0	6	"multi threaded encoding not supported by codec\n"
water	333:66	0:0	4	;
return	334:8	334:17	4	-1
op	334:15	0:0	5	-
water	334:16	0:0	5	1
water	335:4	0:0	4	}
if	336:4	341:4	2	(s -> avctx -> thread_count < 1)
cond	336:8	336:33	3	s -> avctx -> thread_count < 1
water	336:8	0:0	4	s
op	336:9	0:0	4	->
water	336:11	0:0	4	avctx
op	336:16	0:0	4	->
water	336:18	0:0	4	thread_count
op	336:31	0:0	4	<
water	336:33	0:0	4	1
stmts	336:36	341:4	3	
water	336:36	0:0	4	{
call	337:8	339:32	4	av_log
arg	337:15	337:20	5	avctx
water	337:15	0:0	6	avctx
arg	337:22	337:34	5	AV_LOG_ERROR
water	337:22	0:0	6	AV_LOG_ERROR
arg	338:15	339:32	5	"automatic thread number detection not supported by codec, ""patch welcome\n"
water	338:15	0:0	6	"automatic thread number detection not supported by codec, "
water	339:15	0:0	6	"patch welcome\n"
water	339:33	0:0	4	;
return	340:8	340:17	4	-1
op	340:15	0:0	5	-
water	340:16	0:0	5	1
water	341:4	0:0	4	}
if	342:4	343:23	2	(s -> avctx -> slices > 1 || s -> avctx -> thread_count > 1)
cond	342:8	342:57	3	s -> avctx -> slices > 1 || s -> avctx -> thread_count > 1
water	342:8	0:0	4	s
op	342:9	0:0	4	->
water	342:11	0:0	4	avctx
op	342:16	0:0	4	->
water	342:18	0:0	4	slices
op	342:25	0:0	4	>
water	342:27	0:0	4	1
op	342:29	0:0	4	||
water	342:32	0:0	4	s
op	342:33	0:0	4	->
water	342:35	0:0	4	avctx
op	342:40	0:0	4	->
water	342:42	0:0	4	thread_count
op	342:55	0:0	4	>
water	342:57	0:0	4	1
stmts	343:8	343:23	3	
water	343:8	0:0	4	s
op	343:9	0:0	4	->
water	343:11	0:0	4	rtp_mode
op	343:20	0:0	4	=
water	343:22	0:0	4	1
water	343:23	0:0	4	;
if	344:4	345:36	2	(s -> avctx -> thread_count > 1 && s -> codec_id == AV_CODEC_ID_H263P)
cond	344:8	344:53	3	s -> avctx -> thread_count > 1 && s -> codec_id == AV_CODEC_ID_H263P
water	344:8	0:0	4	s
op	344:9	0:0	4	->
water	344:11	0:0	4	avctx
op	344:16	0:0	4	->
water	344:18	0:0	4	thread_count
op	344:31	0:0	4	>
water	344:33	0:0	4	1
op	344:35	0:0	4	&&
water	344:38	0:0	4	s
op	344:39	0:0	4	->
water	344:41	0:0	4	codec_id
op	344:50	0:0	4	==
water	344:53	0:0	4	AV_CODEC_ID_H263P
stmts	345:8	345:36	3	
water	345:8	0:0	4	s
op	345:9	0:0	4	->
water	345:11	0:0	4	h263_slice_structured
op	345:33	0:0	4	=
water	345:35	0:0	4	1
water	345:36	0:0	4	;
if	346:4	349:4	2	(! avctx -> time_base . den || ! avctx -> time_base . num)
cond	346:8	346:51	3	! avctx -> time_base . den || ! avctx -> time_base . num
op	346:8	0:0	4	!
water	346:9	0:0	4	avctx
op	346:14	0:0	4	->
water	346:16	0:0	4	time_base
op	346:25	0:0	4	.
water	346:26	0:0	4	den
op	346:30	0:0	4	||
op	346:33	0:0	4	!
water	346:34	0:0	4	avctx
op	346:39	0:0	4	->
water	346:41	0:0	4	time_base
op	346:50	0:0	4	.
water	346:51	0:0	4	num
stmts	346:56	349:4	3	
water	346:56	0:0	4	{
call	347:8	347:57	4	av_log
arg	347:15	347:20	5	avctx
water	347:15	0:0	6	avctx
arg	347:22	347:34	5	AV_LOG_ERROR
water	347:22	0:0	6	AV_LOG_ERROR
arg	347:36	347:57	5	"framerate not set\n"
water	347:36	0:0	6	"framerate not set\n"
water	347:58	0:0	4	;
return	348:8	348:17	4	-1
op	348:15	0:0	5	-
water	348:16	0:0	5	1
water	349:4	0:0	4	}
if	350:4	354:4	2	(avctx -> b_frame_strategy && ( avctx -> flags & AV_CODEC_FLAG_PASS2 ))
cond	350:8	350:70	3	avctx -> b_frame_strategy && ( avctx -> flags & AV_CODEC_FLAG_PASS2 )
water	350:8	0:0	4	avctx
op	350:13	0:0	4	->
water	350:15	0:0	4	b_frame_strategy
op	350:32	0:0	4	&&
water	350:35	0:0	4	(
water	350:36	0:0	4	avctx
op	350:41	0:0	4	->
water	350:43	0:0	4	flags
op	350:49	0:0	4	&
water	350:51	0:0	4	AV_CODEC_FLAG_PASS2
water	350:70	0:0	4	)
stmts	350:73	354:4	3	
water	350:73	0:0	4	{
call	351:8	352:71	4	av_log
arg	351:15	351:20	5	avctx
water	351:15	0:0	6	avctx
arg	351:22	351:33	5	AV_LOG_INFO
water	351:22	0:0	6	AV_LOG_INFO
arg	352:15	352:71	5	"notice: b_frame_strategy only affects the first pass\n"
water	352:15	0:0	6	"notice: b_frame_strategy only affects the first pass\n"
water	352:72	0:0	4	;
water	353:8	0:0	4	avctx
op	353:13	0:0	4	->
water	353:15	0:0	4	b_frame_strategy
op	353:32	0:0	4	=
water	353:34	0:0	4	0
water	353:35	0:0	4	;
water	354:4	0:0	4	}
water	355:4	0:0	2	i
op	355:6	0:0	2	=
call	355:8	355:57	2	av_gcd
arg	355:15	355:35	3	avctx->time_base.den
water	355:15	0:0	4	avctx
op	355:20	0:0	4	->
water	355:22	0:0	4	time_base
op	355:31	0:0	4	.
water	355:32	0:0	4	den
arg	355:37	355:57	3	avctx->time_base.num
water	355:37	0:0	4	avctx
op	355:42	0:0	4	->
water	355:44	0:0	4	time_base
op	355:53	0:0	4	.
water	355:54	0:0	4	num
water	355:58	0:0	2	;
if	356:4	361:4	2	(i > 1)
cond	356:8	356:12	3	i > 1
water	356:8	0:0	4	i
op	356:10	0:0	4	>
water	356:12	0:0	4	1
stmts	356:15	361:4	3	
water	356:15	0:0	4	{
call	357:8	357:77	4	av_log
arg	357:15	357:20	5	avctx
water	357:15	0:0	6	avctx
arg	357:22	357:33	5	AV_LOG_INFO
water	357:22	0:0	6	AV_LOG_INFO
arg	357:35	357:77	5	"removing common factors from framerate\n"
water	357:35	0:0	6	"removing common factors from framerate\n"
water	357:78	0:0	4	;
water	358:8	0:0	4	avctx
op	358:13	0:0	4	->
water	358:15	0:0	4	time_base
op	358:24	0:0	4	.
water	358:25	0:0	4	den
op	358:29	0:0	4	/=
water	358:32	0:0	4	i
water	358:33	0:0	4	;
water	359:8	0:0	4	avctx
op	359:13	0:0	4	->
water	359:15	0:0	4	time_base
op	359:24	0:0	4	.
water	359:25	0:0	4	num
op	359:29	0:0	4	/=
water	359:32	0:0	4	i
water	359:33	0:0	4	;
water	361:4	0:0	4	}
if	362:4	366:4	2	(s -> mpeg_quant || s -> codec_id == AV_CODEC_ID_MPEG1VIDEO || s -> codec_id == AV_CODEC_ID_MPEG2VIDEO || s -> codec_id == AV_CODEC_ID_MJPEG || s -> codec_id == AV_CODEC_ID_AMV)
cond	362:8	362:156	3	s -> mpeg_quant || s -> codec_id == AV_CODEC_ID_MPEG1VIDEO || s -> codec_id == AV_CODEC_ID_MPEG2VIDEO || s -> codec_id == AV_CODEC_ID_MJPEG || s -> codec_id == AV_CODEC_ID_AMV
water	362:8	0:0	4	s
op	362:9	0:0	4	->
water	362:11	0:0	4	mpeg_quant
op	362:22	0:0	4	||
water	362:25	0:0	4	s
op	362:26	0:0	4	->
water	362:28	0:0	4	codec_id
op	362:37	0:0	4	==
water	362:40	0:0	4	AV_CODEC_ID_MPEG1VIDEO
op	362:63	0:0	4	||
water	362:66	0:0	4	s
op	362:67	0:0	4	->
water	362:69	0:0	4	codec_id
op	362:78	0:0	4	==
water	362:81	0:0	4	AV_CODEC_ID_MPEG2VIDEO
op	362:104	0:0	4	||
water	362:107	0:0	4	s
op	362:108	0:0	4	->
water	362:110	0:0	4	codec_id
op	362:119	0:0	4	==
water	362:122	0:0	4	AV_CODEC_ID_MJPEG
op	362:140	0:0	4	||
water	362:143	0:0	4	s
op	362:144	0:0	4	->
water	362:146	0:0	4	codec_id
op	362:154	0:0	4	==
water	362:156	0:0	4	AV_CODEC_ID_AMV
stmts	362:173	366:4	3	
water	362:173	0:0	4	{
water	364:8	0:0	4	s
op	364:9	0:0	4	->
water	364:11	0:0	4	intra_quant_bias
op	364:28	0:0	4	=
water	364:30	0:0	4	3
op	364:32	0:0	4	<<
water	364:35	0:0	4	(
water	364:36	0:0	4	QUANT_BIAS_SHIFT
op	364:53	0:0	4	-
water	364:55	0:0	4	3
water	364:56	0:0	4	)
water	364:57	0:0	4	;
water	365:8	0:0	4	s
op	365:9	0:0	4	->
water	365:11	0:0	4	inter_quant_bias
op	365:28	0:0	4	=
water	365:30	0:0	4	0
water	365:31	0:0	4	;
water	366:4	0:0	4	}
else	366:6	370:4	2
stmts	366:11	370:4	3	
water	366:11	0:0	4	{
water	367:8	0:0	4	s
op	367:9	0:0	4	->
water	367:11	0:0	4	intra_quant_bias
op	367:28	0:0	4	=
water	367:30	0:0	4	0
water	367:31	0:0	4	;
water	369:8	0:0	4	s
op	369:9	0:0	4	->
water	369:11	0:0	4	inter_quant_bias
op	369:28	0:0	4	=
op	369:30	0:0	4	-
water	369:31	0:0	4	(
water	369:32	0:0	4	1
op	369:34	0:0	4	<<
water	369:37	0:0	4	(
water	369:38	0:0	4	QUANT_BIAS_SHIFT
op	369:55	0:0	4	-
water	369:57	0:0	4	2
water	369:58	0:0	4	)
water	369:59	0:0	4	)
water	369:60	0:0	4	;
water	370:4	0:0	4	}
if	371:4	374:4	2	(avctx -> qmin > avctx -> qmax || avctx -> qmin <= 0)
cond	371:8	371:52	3	avctx -> qmin > avctx -> qmax || avctx -> qmin <= 0
water	371:8	0:0	4	avctx
op	371:13	0:0	4	->
water	371:15	0:0	4	qmin
op	371:20	0:0	4	>
water	371:22	0:0	4	avctx
op	371:27	0:0	4	->
water	371:29	0:0	4	qmax
op	371:34	0:0	4	||
water	371:37	0:0	4	avctx
op	371:42	0:0	4	->
water	371:44	0:0	4	qmin
op	371:49	0:0	4	<=
water	371:52	0:0	4	0
stmts	371:55	374:4	3	
water	371:55	0:0	4	{
call	372:8	372:97	4	av_log
arg	372:15	372:20	5	avctx
water	372:15	0:0	6	avctx
arg	372:22	372:34	5	AV_LOG_ERROR
water	372:22	0:0	6	AV_LOG_ERROR
arg	372:36	372:97	5	"qmin and or qmax are invalid, they must be 0 < min <= max\n"
water	372:36	0:0	6	"qmin and or qmax are invalid, they must be 0 < min <= max\n"
water	372:98	0:0	4	;
return	373:8	373:30	4	AVERROR(EINVAL)
call	373:15	373:29	5	AVERROR
arg	373:23	373:29	6	EINVAL
water	373:23	0:0	7	EINVAL
water	374:4	0:0	4	}
water	376:0	0:0	2	FF_DISABLE_DEPRECATION_WARNINGS
water	377:4	0:0	2	if
water	377:7	0:0	2	(
water	377:8	0:0	2	s
op	377:9	0:0	2	->
water	377:11	0:0	2	intra_quant_bias
op	377:28	0:0	2	==
water	377:31	0:0	2	FF_DEFAULT_QUANT_BIAS
op	377:53	0:0	2	&&
water	378:8	0:0	2	avctx
op	378:13	0:0	2	->
water	378:15	0:0	2	intra_quant_bias
op	378:32	0:0	2	!=
water	378:35	0:0	2	FF_DEFAULT_QUANT_BIAS
water	378:56	0:0	2	)
water	379:8	0:0	2	s
op	379:9	0:0	2	->
water	379:11	0:0	2	intra_quant_bias
op	379:28	0:0	2	=
water	379:30	0:0	2	avctx
op	379:35	0:0	2	->
water	379:37	0:0	2	intra_quant_bias
water	379:53	0:0	2	;
if	380:4	382:53	2	(s -> inter_quant_bias == FF_DEFAULT_QUANT_BIAS && avctx -> inter_quant_bias != FF_DEFAULT_QUANT_BIAS)
cond	380:8	381:35	3	s -> inter_quant_bias == FF_DEFAULT_QUANT_BIAS && avctx -> inter_quant_bias != FF_DEFAULT_QUANT_BIAS
water	380:8	0:0	4	s
op	380:9	0:0	4	->
water	380:11	0:0	4	inter_quant_bias
op	380:28	0:0	4	==
water	380:31	0:0	4	FF_DEFAULT_QUANT_BIAS
op	380:53	0:0	4	&&
water	381:8	0:0	4	avctx
op	381:13	0:0	4	->
water	381:15	0:0	4	inter_quant_bias
op	381:32	0:0	4	!=
water	381:35	0:0	4	FF_DEFAULT_QUANT_BIAS
stmts	382:8	382:53	3	
water	382:8	0:0	4	s
op	382:9	0:0	4	->
water	382:11	0:0	4	inter_quant_bias
op	382:28	0:0	4	=
water	382:30	0:0	4	avctx
op	382:35	0:0	4	->
water	382:37	0:0	4	inter_quant_bias
water	382:53	0:0	4	;
decl	383:0	385:120	2	FF_ENABLE_DEPRECATION_WARNINGS	av_log
water	385:10	0:0	2	(
water	385:11	0:0	2	avctx
water	385:16	0:0	2	,
water	385:18	0:0	2	AV_LOG_DEBUG
water	385:30	0:0	2	,
water	385:32	0:0	2	"intra_quant_bias = %d inter_quant_bias = %d\n"
water	385:79	0:0	2	,
water	385:80	0:0	2	s
op	385:81	0:0	2	->
water	385:83	0:0	2	intra_quant_bias
water	385:99	0:0	2	,
water	385:100	0:0	2	s
op	385:101	0:0	2	->
water	385:103	0:0	2	inter_quant_bias
water	385:119	0:0	2	)
if	386:4	394:4	2	(avctx -> codec_id == AV_CODEC_ID_MPEG4 && s -> avctx -> time_base . den > ( 1 << 16 ) - 1)
cond	386:8	387:46	3	avctx -> codec_id == AV_CODEC_ID_MPEG4 && s -> avctx -> time_base . den > ( 1 << 16 ) - 1
water	386:8	0:0	4	avctx
op	386:13	0:0	4	->
water	386:15	0:0	4	codec_id
op	386:24	0:0	4	==
water	386:27	0:0	4	AV_CODEC_ID_MPEG4
op	386:45	0:0	4	&&
water	387:8	0:0	4	s
op	387:9	0:0	4	->
water	387:11	0:0	4	avctx
op	387:16	0:0	4	->
water	387:18	0:0	4	time_base
op	387:27	0:0	4	.
water	387:28	0:0	4	den
op	387:32	0:0	4	>
water	387:34	0:0	4	(
water	387:35	0:0	4	1
op	387:37	0:0	4	<<
water	387:40	0:0	4	16
water	387:42	0:0	4	)
op	387:44	0:0	4	-
water	387:46	0:0	4	1
stmts	387:49	394:4	3	
water	387:49	0:0	4	{
call	388:8	392:28	4	av_log
arg	388:15	388:20	5	avctx
water	388:15	0:0	6	avctx
arg	388:22	388:34	5	AV_LOG_ERROR
water	388:22	0:0	6	AV_LOG_ERROR
arg	389:15	391:24	5	"timebase %d/%d not supported by MPEG 4 standard, ""the maximum admitted value for the timebase denominator ""is %d\n"
water	389:15	0:0	6	"timebase %d/%d not supported by MPEG 4 standard, "
water	390:15	0:0	6	"the maximum admitted value for the timebase denominator "
water	391:15	0:0	6	"is %d\n"
arg	391:26	391:49	5	s->avctx->time_base.num
water	391:26	0:0	6	s
op	391:27	0:0	6	->
water	391:29	0:0	6	avctx
op	391:34	0:0	6	->
water	391:36	0:0	6	time_base
op	391:45	0:0	6	.
water	391:46	0:0	6	num
arg	391:51	391:74	5	s->avctx->time_base.den
water	391:51	0:0	6	s
op	391:52	0:0	6	->
water	391:54	0:0	6	avctx
op	391:59	0:0	6	->
water	391:61	0:0	6	time_base
op	391:70	0:0	6	.
water	391:71	0:0	6	den
arg	392:15	392:28	5	(1<<16)-1
water	392:15	0:0	6	(
water	392:16	0:0	6	1
op	392:18	0:0	6	<<
water	392:21	0:0	6	16
water	392:23	0:0	6	)
op	392:25	0:0	6	-
water	392:27	0:0	6	1
water	392:29	0:0	4	;
return	393:8	393:17	4	-1
op	393:15	0:0	5	-
water	393:16	0:0	5	1
water	394:4	0:0	4	}
water	395:4	0:0	2	s
op	395:5	0:0	2	->
water	395:7	0:0	2	time_increment_bits
op	395:27	0:0	2	=
call	395:29	395:64	2	av_log2
arg	395:37	395:64	3	s->avctx->time_base.den-1
water	395:37	0:0	4	s
op	395:38	0:0	4	->
water	395:40	0:0	4	avctx
op	395:45	0:0	4	->
water	395:47	0:0	4	time_base
op	395:56	0:0	4	.
water	395:57	0:0	4	den
op	395:61	0:0	4	-
water	395:63	0:0	4	1
op	395:66	0:0	2	+
water	395:68	0:0	2	1
water	395:69	0:0	2	;
switch	396:4	529:4	2	(avctx -> codec -> id)
cond	396:12	396:26	3	avctx -> codec -> id
water	396:12	0:0	4	avctx
op	396:17	0:0	4	->
water	396:19	0:0	4	codec
op	396:24	0:0	4	->
water	396:26	0:0	4	id
stmts	396:30	529:4	3	
water	396:30	0:0	4	{
label	397:4	397:31	4	case AV_CODEC_ID_MPEG1VIDEO :
water	398:8	0:0	4	s
op	398:9	0:0	4	->
water	398:11	0:0	4	out_format
op	398:22	0:0	4	=
water	398:24	0:0	4	FMT_MPEG1
water	398:33	0:0	4	;
water	399:8	0:0	4	s
op	399:9	0:0	4	->
water	399:11	0:0	4	low_delay
op	399:22	0:0	4	=
op	399:24	0:0	4	!
op	399:25	0:0	4	!
water	399:26	0:0	4	(
water	399:27	0:0	4	s
op	399:28	0:0	4	->
water	399:30	0:0	4	avctx
op	399:35	0:0	4	->
water	399:37	0:0	4	flags
op	399:43	0:0	4	&
water	399:45	0:0	4	AV_CODEC_FLAG_LOW_DELAY
water	399:68	0:0	4	)
water	399:69	0:0	4	;
water	400:8	0:0	4	avctx
op	400:13	0:0	4	->
water	400:15	0:0	4	delay
op	400:22	0:0	4	=
water	400:24	0:0	4	s
op	400:25	0:0	4	->
water	400:27	0:0	4	low_delay
water	400:37	0:0	4	?
water	400:39	0:0	4	0
water	400:41	0:0	4	:
water	400:43	0:0	4	(
water	400:44	0:0	4	s
op	400:45	0:0	4	->
water	400:47	0:0	4	max_b_frames
op	400:60	0:0	4	+
water	400:62	0:0	4	1
water	400:63	0:0	4	)
water	400:64	0:0	4	;
break	401:8	401:13	4	
label	402:4	402:31	4	case AV_CODEC_ID_MPEG2VIDEO :
water	403:8	0:0	4	s
op	403:9	0:0	4	->
water	403:11	0:0	4	out_format
op	403:22	0:0	4	=
water	403:24	0:0	4	FMT_MPEG1
water	403:33	0:0	4	;
water	404:8	0:0	4	s
op	404:9	0:0	4	->
water	404:11	0:0	4	low_delay
op	404:22	0:0	4	=
op	404:24	0:0	4	!
op	404:25	0:0	4	!
water	404:26	0:0	4	(
water	404:27	0:0	4	s
op	404:28	0:0	4	->
water	404:30	0:0	4	avctx
op	404:35	0:0	4	->
water	404:37	0:0	4	flags
op	404:43	0:0	4	&
water	404:45	0:0	4	AV_CODEC_FLAG_LOW_DELAY
water	404:68	0:0	4	)
water	404:69	0:0	4	;
water	405:8	0:0	4	avctx
op	405:13	0:0	4	->
water	405:15	0:0	4	delay
op	405:22	0:0	4	=
water	405:24	0:0	4	s
op	405:25	0:0	4	->
water	405:27	0:0	4	low_delay
water	405:37	0:0	4	?
water	405:39	0:0	4	0
water	405:41	0:0	4	:
water	405:43	0:0	4	(
water	405:44	0:0	4	s
op	405:45	0:0	4	->
water	405:47	0:0	4	max_b_frames
op	405:60	0:0	4	+
water	405:62	0:0	4	1
water	405:63	0:0	4	)
water	405:64	0:0	4	;
water	406:8	0:0	4	s
op	406:9	0:0	4	->
water	406:11	0:0	4	rtp_mode
op	406:22	0:0	4	=
water	406:24	0:0	4	1
water	406:25	0:0	4	;
break	407:8	407:13	4	
label	408:4	408:26	4	case AV_CODEC_ID_MJPEG :
label	409:4	409:24	4	case AV_CODEC_ID_AMV :
water	410:8	0:0	4	s
op	410:9	0:0	4	->
water	410:11	0:0	4	out_format
op	410:22	0:0	4	=
water	410:24	0:0	4	FMT_MJPEG
water	410:33	0:0	4	;
water	411:8	0:0	4	s
op	411:9	0:0	4	->
water	411:11	0:0	4	intra_only
op	411:22	0:0	4	=
water	411:24	0:0	4	1
water	411:25	0:0	4	;
if	412:8	414:21	4	(! CONFIG_MJPEG_ENCODER ||ff_mjpeg_encode_init (s ) < 0)
cond	412:12	413:38	5	! CONFIG_MJPEG_ENCODER ||ff_mjpeg_encode_init (s ) < 0
op	412:12	0:0	6	!
water	412:13	0:0	6	CONFIG_MJPEG_ENCODER
op	412:34	0:0	6	||
call	413:12	413:34	6	ff_mjpeg_encode_init
arg	413:33	413:34	7	s
water	413:33	0:0	8	s
op	413:36	0:0	6	<
water	413:38	0:0	6	0
stmts	414:12	414:21	5	
return	414:12	414:21	6	-1
op	414:19	0:0	7	-
water	414:20	0:0	7	1
water	415:8	0:0	4	avctx
op	415:13	0:0	4	->
water	415:15	0:0	4	delay
op	415:21	0:0	4	=
water	415:23	0:0	4	0
water	415:24	0:0	4	;
water	416:8	0:0	4	s
op	416:9	0:0	4	->
water	416:11	0:0	4	low_delay
op	416:21	0:0	4	=
water	416:23	0:0	4	1
water	416:24	0:0	4	;
break	417:8	417:13	4	
label	418:4	418:25	4	case AV_CODEC_ID_H261 :
if	419:8	420:21	4	(! CONFIG_H261_ENCODER)
cond	419:12	419:13	5	! CONFIG_H261_ENCODER
op	419:12	0:0	6	!
water	419:13	0:0	6	CONFIG_H261_ENCODER
stmts	420:12	420:21	5	
return	420:12	420:21	6	-1
op	420:19	0:0	7	-
water	420:20	0:0	7	1
if	421:8	427:8	4	(ff_h261_get_picture_format (s -> width ,s -> height ) < 0)
cond	421:12	421:62	5	ff_h261_get_picture_format (s -> width ,s -> height ) < 0
call	421:12	421:58	6	ff_h261_get_picture_format
arg	421:39	421:47	7	s->width
water	421:39	0:0	8	s
op	421:40	0:0	8	->
water	421:42	0:0	8	width
arg	421:49	421:58	7	s->height
water	421:49	0:0	8	s
op	421:50	0:0	8	->
water	421:52	0:0	8	height
op	421:60	0:0	6	<
water	421:62	0:0	6	0
stmts	421:65	427:8	5	
water	421:65	0:0	6	{
call	422:12	425:39	6	av_log
arg	422:19	422:24	7	avctx
water	422:19	0:0	8	avctx
arg	422:26	422:38	7	AV_LOG_ERROR
water	422:26	0:0	8	AV_LOG_ERROR
arg	423:19	424:69	7	"The specified picture size of %dx%d is not valid for the ""H.261 codec.\nValid sizes are 176x144, 352x288\n"
water	423:19	0:0	8	"The specified picture size of %dx%d is not valid for the "
water	424:19	0:0	8	"H.261 codec.\nValid sizes are 176x144, 352x288\n"
arg	425:20	425:28	7	s->width
water	425:20	0:0	8	s
op	425:21	0:0	8	->
water	425:23	0:0	8	width
arg	425:30	425:39	7	s->height
water	425:30	0:0	8	s
op	425:31	0:0	8	->
water	425:33	0:0	8	height
water	425:40	0:0	6	;
return	426:12	426:21	6	-1
op	426:19	0:0	7	-
water	426:20	0:0	7	1
water	427:8	0:0	6	}
water	428:8	0:0	4	s
op	428:9	0:0	4	->
water	428:11	0:0	4	out_format
op	428:22	0:0	4	=
water	428:24	0:0	4	FMT_H261
water	428:32	0:0	4	;
water	429:8	0:0	4	avctx
op	429:13	0:0	4	->
water	429:15	0:0	4	delay
op	429:22	0:0	4	=
water	429:24	0:0	4	0
water	429:25	0:0	4	;
water	430:8	0:0	4	s
op	430:9	0:0	4	->
water	430:11	0:0	4	low_delay
op	430:22	0:0	4	=
water	430:24	0:0	4	1
water	430:25	0:0	4	;
water	431:8	0:0	4	s
op	431:9	0:0	4	->
water	431:11	0:0	4	rtp_mode
op	431:22	0:0	4	=
water	431:24	0:0	4	0
water	431:25	0:0	4	;
break	432:8	432:13	4	
label	433:4	433:25	4	case AV_CODEC_ID_H263 :
if	434:8	435:21	4	(! CONFIG_H263_ENCODER)
cond	434:12	434:13	5	! CONFIG_H263_ENCODER
op	434:12	0:0	6	!
water	434:13	0:0	6	CONFIG_H263_ENCODER
stmts	435:12	435:21	5	
return	435:12	435:21	6	-1
op	435:19	0:0	7	-
water	435:20	0:0	7	1
if	436:8	444:8	4	(ff_match_2uint16 (ff_h263_format ,FF_ARRAY_ELEMS (ff_h263_format ) ,s -> width ,s -> height ) == 8)
cond	436:12	437:53	5	ff_match_2uint16 (ff_h263_format ,FF_ARRAY_ELEMS (ff_h263_format ) ,s -> width ,s -> height ) == 8
call	436:12	437:48	6	ff_match_2uint16
arg	436:29	436:43	7	ff_h263_format
water	436:29	0:0	8	ff_h263_format
arg	436:45	436:75	7	FF_ARRAY_ELEMS(ff_h263_format)
call	436:45	436:74	8	FF_ARRAY_ELEMS
arg	436:60	436:74	9	ff_h263_format
water	436:60	0:0	10	ff_h263_format
arg	437:29	437:37	7	s->width
water	437:29	0:0	8	s
op	437:30	0:0	8	->
water	437:32	0:0	8	width
arg	437:39	437:48	7	s->height
water	437:39	0:0	8	s
op	437:40	0:0	8	->
water	437:42	0:0	8	height
op	437:50	0:0	6	==
water	437:53	0:0	6	8
stmts	437:56	444:8	5	
water	437:56	0:0	6	{
call	438:12	442:55	6	av_log
arg	438:19	438:24	7	avctx
water	438:19	0:0	8	avctx
arg	438:26	438:38	7	AV_LOG_ERROR
water	438:26	0:0	8	AV_LOG_ERROR
arg	439:19	442:34	7	"The specified picture size of %dx%d is not valid for ""the H.263 codec.\nValid sizes are 128x96, 176x144, ""352x288, 704x576, and 1408x1152. ""Try H.263+.\n"
water	439:19	0:0	8	"The specified picture size of %dx%d is not valid for "
water	440:19	0:0	8	"the H.263 codec.\nValid sizes are 128x96, 176x144, "
water	441:19	0:0	8	"352x288, 704x576, and 1408x1152. "
water	442:19	0:0	8	"Try H.263+.\n"
arg	442:36	442:44	7	s->width
water	442:36	0:0	8	s
op	442:37	0:0	8	->
water	442:39	0:0	8	width
arg	442:46	442:55	7	s->height
water	442:46	0:0	8	s
op	442:47	0:0	8	->
water	442:49	0:0	8	height
water	442:56	0:0	6	;
return	443:12	443:21	6	-1
op	443:19	0:0	7	-
water	443:20	0:0	7	1
water	444:8	0:0	6	}
water	445:8	0:0	4	s
op	445:9	0:0	4	->
water	445:11	0:0	4	out_format
op	445:22	0:0	4	=
water	445:24	0:0	4	FMT_H263
water	445:32	0:0	4	;
water	446:8	0:0	4	avctx
op	446:13	0:0	4	->
water	446:15	0:0	4	delay
op	446:22	0:0	4	=
water	446:24	0:0	4	0
water	446:25	0:0	4	;
water	447:8	0:0	4	s
op	447:9	0:0	4	->
water	447:11	0:0	4	low_delay
op	447:22	0:0	4	=
water	447:24	0:0	4	1
water	447:25	0:0	4	;
break	448:8	448:13	4	
label	449:4	449:26	4	case AV_CODEC_ID_H263P :
water	450:8	0:0	4	s
op	450:9	0:0	4	->
water	450:11	0:0	4	out_format
op	450:22	0:0	4	=
water	450:24	0:0	4	FMT_H263
water	450:32	0:0	4	;
water	451:8	0:0	4	s
op	451:9	0:0	4	->
water	451:11	0:0	4	h263_plus
op	451:22	0:0	4	=
water	451:24	0:0	4	1
water	451:25	0:0	4	;
water	453:8	0:0	4	s
op	453:9	0:0	4	->
water	453:11	0:0	4	h263_aic
op	453:27	0:0	4	=
water	453:29	0:0	4	(
water	453:30	0:0	4	avctx
op	453:35	0:0	4	->
water	453:37	0:0	4	flags
op	453:43	0:0	4	&
water	453:45	0:0	4	AV_CODEC_FLAG_AC_PRED
water	453:66	0:0	4	)
water	453:68	0:0	4	?
water	453:70	0:0	4	1
water	453:72	0:0	4	:
water	453:74	0:0	4	0
water	453:75	0:0	4	;
water	454:8	0:0	4	s
op	454:9	0:0	4	->
water	454:11	0:0	4	modified_quant
op	454:27	0:0	4	=
water	454:29	0:0	4	s
op	454:30	0:0	4	->
water	454:32	0:0	4	h263_aic
water	454:40	0:0	4	;
water	455:8	0:0	4	s
op	455:9	0:0	4	->
water	455:11	0:0	4	loop_filter
op	455:27	0:0	4	=
water	455:29	0:0	4	(
water	455:30	0:0	4	avctx
op	455:35	0:0	4	->
water	455:37	0:0	4	flags
op	455:43	0:0	4	&
water	455:45	0:0	4	AV_CODEC_FLAG_LOOP_FILTER
water	455:70	0:0	4	)
water	455:72	0:0	4	?
water	455:74	0:0	4	1
water	455:76	0:0	4	:
water	455:78	0:0	4	0
water	455:79	0:0	4	;
water	456:8	0:0	4	s
op	456:9	0:0	4	->
water	456:11	0:0	4	unrestricted_mv
op	456:27	0:0	4	=
water	456:29	0:0	4	s
op	456:30	0:0	4	->
water	456:32	0:0	4	obmc
op	456:37	0:0	4	||
water	456:40	0:0	4	s
op	456:41	0:0	4	->
water	456:43	0:0	4	loop_filter
op	456:55	0:0	4	||
water	456:58	0:0	4	s
op	456:59	0:0	4	->
water	456:61	0:0	4	umvplus
water	456:68	0:0	4	;
water	459:8	0:0	4	avctx
op	459:13	0:0	4	->
water	459:15	0:0	4	delay
op	459:21	0:0	4	=
water	459:23	0:0	4	0
water	459:24	0:0	4	;
water	460:8	0:0	4	s
op	460:9	0:0	4	->
water	460:11	0:0	4	low_delay
op	460:21	0:0	4	=
water	460:23	0:0	4	1
water	460:24	0:0	4	;
break	461:8	461:13	4	
label	462:4	462:25	4	case AV_CODEC_ID_FLV1 :
water	463:8	0:0	4	s
op	463:9	0:0	4	->
water	463:11	0:0	4	out_format
op	463:27	0:0	4	=
water	463:29	0:0	4	FMT_H263
water	463:37	0:0	4	;
water	464:8	0:0	4	s
op	464:9	0:0	4	->
water	464:11	0:0	4	h263_flv
op	464:27	0:0	4	=
water	464:29	0:0	4	2
water	464:30	0:0	4	;
water	465:8	0:0	4	s
op	465:9	0:0	4	->
water	465:11	0:0	4	unrestricted_mv
op	465:27	0:0	4	=
water	465:29	0:0	4	1
water	465:30	0:0	4	;
water	466:8	0:0	4	s
op	466:9	0:0	4	->
water	466:11	0:0	4	rtp_mode
op	466:21	0:0	4	=
water	466:23	0:0	4	0
water	466:24	0:0	4	;
water	467:8	0:0	4	avctx
op	467:13	0:0	4	->
water	467:15	0:0	4	delay
op	467:21	0:0	4	=
water	467:23	0:0	4	0
water	467:24	0:0	4	;
water	468:8	0:0	4	s
op	468:9	0:0	4	->
water	468:11	0:0	4	low_delay
op	468:21	0:0	4	=
water	468:23	0:0	4	1
water	468:24	0:0	4	;
break	469:8	469:13	4	
label	470:4	470:25	4	case AV_CODEC_ID_RV10 :
water	471:8	0:0	4	s
op	471:9	0:0	4	->
water	471:11	0:0	4	out_format
op	471:22	0:0	4	=
water	471:24	0:0	4	FMT_H263
water	471:32	0:0	4	;
water	472:8	0:0	4	avctx
op	472:13	0:0	4	->
water	472:15	0:0	4	delay
op	472:22	0:0	4	=
water	472:24	0:0	4	0
water	472:25	0:0	4	;
water	473:8	0:0	4	s
op	473:9	0:0	4	->
water	473:11	0:0	4	low_delay
op	473:22	0:0	4	=
water	473:24	0:0	4	1
water	473:25	0:0	4	;
break	474:8	474:13	4	
label	475:4	475:25	4	case AV_CODEC_ID_RV20 :
water	476:8	0:0	4	s
op	476:9	0:0	4	->
water	476:11	0:0	4	out_format
op	476:27	0:0	4	=
water	476:29	0:0	4	FMT_H263
water	476:37	0:0	4	;
water	477:8	0:0	4	avctx
op	477:13	0:0	4	->
water	477:15	0:0	4	delay
op	477:27	0:0	4	=
water	477:29	0:0	4	0
water	477:30	0:0	4	;
water	478:8	0:0	4	s
op	478:9	0:0	4	->
water	478:11	0:0	4	low_delay
op	478:27	0:0	4	=
water	478:29	0:0	4	1
water	478:30	0:0	4	;
water	479:8	0:0	4	s
op	479:9	0:0	4	->
water	479:11	0:0	4	modified_quant
op	479:27	0:0	4	=
water	479:29	0:0	4	1
water	479:30	0:0	4	;
water	480:8	0:0	4	s
op	480:9	0:0	4	->
water	480:11	0:0	4	h263_aic
op	480:27	0:0	4	=
water	480:29	0:0	4	1
water	480:30	0:0	4	;
water	481:8	0:0	4	s
op	481:9	0:0	4	->
water	481:11	0:0	4	h263_plus
op	481:27	0:0	4	=
water	481:29	0:0	4	1
water	481:30	0:0	4	;
water	482:8	0:0	4	s
op	482:9	0:0	4	->
water	482:11	0:0	4	loop_filter
op	482:27	0:0	4	=
water	482:29	0:0	4	1
water	482:30	0:0	4	;
water	483:8	0:0	4	s
op	483:9	0:0	4	->
water	483:11	0:0	4	unrestricted_mv
op	483:27	0:0	4	=
water	483:29	0:0	4	0
water	483:30	0:0	4	;
break	484:8	484:13	4	
label	485:4	485:26	4	case AV_CODEC_ID_MPEG4 :
water	486:8	0:0	4	s
op	486:9	0:0	4	->
water	486:11	0:0	4	out_format
op	486:27	0:0	4	=
water	486:29	0:0	4	FMT_H263
water	486:37	0:0	4	;
water	487:8	0:0	4	s
op	487:9	0:0	4	->
water	487:11	0:0	4	h263_pred
op	487:27	0:0	4	=
water	487:29	0:0	4	1
water	487:30	0:0	4	;
water	488:8	0:0	4	s
op	488:9	0:0	4	->
water	488:11	0:0	4	unrestricted_mv
op	488:27	0:0	4	=
water	488:29	0:0	4	1
water	488:30	0:0	4	;
water	489:8	0:0	4	s
op	489:9	0:0	4	->
water	489:11	0:0	4	low_delay
op	489:27	0:0	4	=
water	489:29	0:0	4	s
op	489:30	0:0	4	->
water	489:32	0:0	4	max_b_frames
water	489:45	0:0	4	?
water	489:47	0:0	4	0
water	489:49	0:0	4	:
water	489:51	0:0	4	1
water	489:52	0:0	4	;
water	490:8	0:0	4	avctx
op	490:13	0:0	4	->
water	490:15	0:0	4	delay
op	490:27	0:0	4	=
water	490:29	0:0	4	s
op	490:30	0:0	4	->
water	490:32	0:0	4	low_delay
water	490:42	0:0	4	?
water	490:44	0:0	4	0
water	490:46	0:0	4	:
water	490:48	0:0	4	(
water	490:49	0:0	4	s
op	490:50	0:0	4	->
water	490:52	0:0	4	max_b_frames
op	490:65	0:0	4	+
water	490:67	0:0	4	1
water	490:68	0:0	4	)
water	490:69	0:0	4	;
break	491:8	491:13	4	
label	492:4	492:30	4	case AV_CODEC_ID_MSMPEG4V2 :
water	493:8	0:0	4	s
op	493:9	0:0	4	->
water	493:11	0:0	4	out_format
op	493:27	0:0	4	=
water	493:29	0:0	4	FMT_H263
water	493:37	0:0	4	;
water	494:8	0:0	4	s
op	494:9	0:0	4	->
water	494:11	0:0	4	h263_pred
op	494:27	0:0	4	=
water	494:29	0:0	4	1
water	494:30	0:0	4	;
water	495:8	0:0	4	s
op	495:9	0:0	4	->
water	495:11	0:0	4	unrestricted_mv
op	495:27	0:0	4	=
water	495:29	0:0	4	1
water	495:30	0:0	4	;
water	496:8	0:0	4	s
op	496:9	0:0	4	->
water	496:11	0:0	4	msmpeg4_version
op	496:27	0:0	4	=
water	496:29	0:0	4	2
water	496:30	0:0	4	;
water	497:8	0:0	4	avctx
op	497:13	0:0	4	->
water	497:15	0:0	4	delay
op	497:27	0:0	4	=
water	497:29	0:0	4	0
water	497:30	0:0	4	;
water	498:8	0:0	4	s
op	498:9	0:0	4	->
water	498:11	0:0	4	low_delay
op	498:27	0:0	4	=
water	498:29	0:0	4	1
water	498:30	0:0	4	;
break	499:8	499:13	4	
label	500:4	500:30	4	case AV_CODEC_ID_MSMPEG4V3 :
water	501:8	0:0	4	s
op	501:9	0:0	4	->
water	501:11	0:0	4	out_format
op	501:29	0:0	4	=
water	501:31	0:0	4	FMT_H263
water	501:39	0:0	4	;
water	502:8	0:0	4	s
op	502:9	0:0	4	->
water	502:11	0:0	4	h263_pred
op	502:29	0:0	4	=
water	502:31	0:0	4	1
water	502:32	0:0	4	;
water	503:8	0:0	4	s
op	503:9	0:0	4	->
water	503:11	0:0	4	unrestricted_mv
op	503:29	0:0	4	=
water	503:31	0:0	4	1
water	503:32	0:0	4	;
water	504:8	0:0	4	s
op	504:9	0:0	4	->
water	504:11	0:0	4	msmpeg4_version
op	504:29	0:0	4	=
water	504:31	0:0	4	3
water	504:32	0:0	4	;
water	505:8	0:0	4	s
op	505:9	0:0	4	->
water	505:11	0:0	4	flipflop_rounding
op	505:29	0:0	4	=
water	505:31	0:0	4	1
water	505:32	0:0	4	;
water	506:8	0:0	4	avctx
op	506:13	0:0	4	->
water	506:15	0:0	4	delay
op	506:29	0:0	4	=
water	506:31	0:0	4	0
water	506:32	0:0	4	;
water	507:8	0:0	4	s
op	507:9	0:0	4	->
water	507:11	0:0	4	low_delay
op	507:29	0:0	4	=
water	507:31	0:0	4	1
water	507:32	0:0	4	;
break	508:8	508:13	4	
label	509:4	509:25	4	case AV_CODEC_ID_WMV1 :
water	510:8	0:0	4	s
op	510:9	0:0	4	->
water	510:11	0:0	4	out_format
op	510:29	0:0	4	=
water	510:31	0:0	4	FMT_H263
water	510:39	0:0	4	;
water	511:8	0:0	4	s
op	511:9	0:0	4	->
water	511:11	0:0	4	h263_pred
op	511:29	0:0	4	=
water	511:31	0:0	4	1
water	511:32	0:0	4	;
water	512:8	0:0	4	s
op	512:9	0:0	4	->
water	512:11	0:0	4	unrestricted_mv
op	512:29	0:0	4	=
water	512:31	0:0	4	1
water	512:32	0:0	4	;
water	513:8	0:0	4	s
op	513:9	0:0	4	->
water	513:11	0:0	4	msmpeg4_version
op	513:29	0:0	4	=
water	513:31	0:0	4	4
water	513:32	0:0	4	;
water	514:8	0:0	4	s
op	514:9	0:0	4	->
water	514:11	0:0	4	flipflop_rounding
op	514:29	0:0	4	=
water	514:31	0:0	4	1
water	514:32	0:0	4	;
water	515:8	0:0	4	avctx
op	515:13	0:0	4	->
water	515:15	0:0	4	delay
op	515:29	0:0	4	=
water	515:31	0:0	4	0
water	515:32	0:0	4	;
water	516:8	0:0	4	s
op	516:9	0:0	4	->
water	516:11	0:0	4	low_delay
op	516:29	0:0	4	=
water	516:31	0:0	4	1
water	516:32	0:0	4	;
break	517:8	517:13	4	
label	518:4	518:25	4	case AV_CODEC_ID_WMV2 :
water	519:8	0:0	4	s
op	519:9	0:0	4	->
water	519:11	0:0	4	out_format
op	519:29	0:0	4	=
water	519:31	0:0	4	FMT_H263
water	519:39	0:0	4	;
water	520:8	0:0	4	s
op	520:9	0:0	4	->
water	520:11	0:0	4	h263_pred
op	520:29	0:0	4	=
water	520:31	0:0	4	1
water	520:32	0:0	4	;
water	521:8	0:0	4	s
op	521:9	0:0	4	->
water	521:11	0:0	4	unrestricted_mv
op	521:29	0:0	4	=
water	521:31	0:0	4	1
water	521:32	0:0	4	;
water	522:8	0:0	4	s
op	522:9	0:0	4	->
water	522:11	0:0	4	msmpeg4_version
op	522:29	0:0	4	=
water	522:31	0:0	4	5
water	522:32	0:0	4	;
water	523:8	0:0	4	s
op	523:9	0:0	4	->
water	523:11	0:0	4	flipflop_rounding
op	523:29	0:0	4	=
water	523:31	0:0	4	1
water	523:32	0:0	4	;
water	524:8	0:0	4	avctx
op	524:13	0:0	4	->
water	524:15	0:0	4	delay
op	524:29	0:0	4	=
water	524:31	0:0	4	0
water	524:32	0:0	4	;
water	525:8	0:0	4	s
op	525:9	0:0	4	->
water	525:11	0:0	4	low_delay
op	525:29	0:0	4	=
water	525:31	0:0	4	1
water	525:32	0:0	4	;
break	526:8	526:13	4	
label	527:4	527:11	4	default :
return	528:8	528:17	4	-1
op	528:15	0:0	5	-
water	528:16	0:0	5	1
water	529:4	0:0	4	}
water	530:4	0:0	2	avctx
op	530:9	0:0	2	->
water	530:11	0:0	2	has_b_frames
op	530:24	0:0	2	=
op	530:26	0:0	2	!
water	530:27	0:0	2	s
op	530:28	0:0	2	->
water	530:30	0:0	2	low_delay
water	530:39	0:0	2	;
water	531:4	0:0	2	s
op	531:5	0:0	2	->
water	531:7	0:0	2	encoding
op	531:16	0:0	2	=
water	531:18	0:0	2	1
water	531:19	0:0	2	;
water	532:4	0:0	2	s
op	532:5	0:0	2	->
water	532:7	0:0	2	progressive_frame
op	532:28	0:0	2	=
water	533:4	0:0	2	s
op	533:5	0:0	2	->
water	533:7	0:0	2	progressive_sequence
op	533:28	0:0	2	=
op	533:30	0:0	2	!
water	533:31	0:0	2	(
water	533:32	0:0	2	avctx
op	533:37	0:0	2	->
water	533:39	0:0	2	flags
op	533:45	0:0	2	&
water	533:47	0:0	2	(
water	533:48	0:0	2	AV_CODEC_FLAG_INTERLACED_DCT
op	533:77	0:0	2	|
water	534:48	0:0	2	AV_CODEC_FLAG_INTERLACED_ME
water	534:75	0:0	2	)
op	534:77	0:0	2	||
water	535:32	0:0	2	s
op	535:33	0:0	2	->
water	535:35	0:0	2	alternate_scan
water	535:49	0:0	2	)
water	535:50	0:0	2	;
call	537:4	537:22	2	ff_mpv_idct_init
arg	537:21	537:22	3	s
water	537:21	0:0	4	s
water	537:23	0:0	2	;
if	538:4	539:17	2	(ff_mpv_common_init (s ) < 0)
cond	538:8	538:32	3	ff_mpv_common_init (s ) < 0
call	538:8	538:28	4	ff_mpv_common_init
arg	538:27	538:28	5	s
water	538:27	0:0	6	s
op	538:30	0:0	4	<
water	538:32	0:0	4	0
stmts	539:8	539:17	3	
return	539:8	539:17	4	-1
op	539:15	0:0	5	-
water	539:16	0:0	5	1
call	540:4	540:35	2	ff_fdctdsp_init
arg	540:20	540:28	3	&s->fdsp
op	540:20	0:0	4	&
water	540:21	0:0	4	s
op	540:22	0:0	4	->
water	540:24	0:0	4	fdsp
arg	540:30	540:35	3	avctx
water	540:30	0:0	4	avctx
water	540:36	0:0	2	;
call	541:4	541:34	2	ff_me_cmp_init
arg	541:19	541:27	3	&s->mecc
op	541:19	0:0	4	&
water	541:20	0:0	4	s
op	541:21	0:0	4	->
water	541:23	0:0	4	mecc
arg	541:29	541:34	3	avctx
water	541:29	0:0	4	avctx
water	541:35	0:0	2	;
call	542:4	542:48	2	ff_mpegvideoencdsp_init
arg	542:28	542:41	3	&s->mpvencdsp
op	542:28	0:0	4	&
water	542:29	0:0	4	s
op	542:30	0:0	4	->
water	542:32	0:0	4	mpvencdsp
arg	542:43	542:48	3	avctx
water	542:43	0:0	4	avctx
water	542:49	0:0	2	;
call	543:4	543:39	2	ff_pixblockdsp_init
arg	543:24	543:32	3	&s->pdsp
op	543:24	0:0	4	&
water	543:25	0:0	4	s
op	543:26	0:0	4	->
water	543:28	0:0	4	pdsp
arg	543:34	543:39	3	avctx
water	543:34	0:0	4	avctx
water	543:40	0:0	2	;
call	544:4	544:28	2	ff_qpeldsp_init
arg	544:20	544:28	3	&s->qdsp
op	544:20	0:0	4	&
water	544:21	0:0	4	s
op	544:22	0:0	4	->
water	544:24	0:0	4	qdsp
water	544:29	0:0	2	;
if	545:4	549:4	2	(s -> msmpeg4_version)
cond	545:8	545:11	3	s -> msmpeg4_version
water	545:8	0:0	4	s
op	545:9	0:0	4	->
water	545:11	0:0	4	msmpeg4_version
stmts	545:28	549:4	3	
water	545:28	0:0	4	{
call	546:8	548:63	4	FF_ALLOCZ_OR_GOTO
arg	546:26	546:34	5	s->avctx
water	546:26	0:0	6	s
op	546:27	0:0	6	->
water	546:29	0:0	6	avctx
arg	546:36	546:47	5	s->ac_stats
water	546:36	0:0	6	s
op	546:37	0:0	6	->
water	546:39	0:0	6	ac_stats
arg	547:26	548:57	5	2*2*(MAX_LEVEL+1)*(MAX_RUN+1)*2*sizeof(int)
water	547:26	0:0	6	2
op	547:28	0:0	6	*
water	547:30	0:0	6	2
op	547:32	0:0	6	*
water	547:34	0:0	6	(
water	547:35	0:0	6	MAX_LEVEL
op	547:45	0:0	6	+
water	547:47	0:0	6	1
water	547:48	0:0	6	)
op	547:50	0:0	6	*
water	548:26	0:0	6	(
water	548:27	0:0	6	MAX_RUN
op	548:35	0:0	6	+
water	548:37	0:0	6	1
water	548:38	0:0	6	)
op	548:40	0:0	6	*
water	548:42	0:0	6	2
op	548:44	0:0	6	*
op	548:46	0:0	6	sizeof
water	548:52	0:0	6	(
water	548:53	0:0	6	int
water	548:56	0:0	6	)
arg	548:59	548:63	5	fail
water	548:59	0:0	6	fail
water	548:64	0:0	4	;
water	549:4	0:0	4	}
call	550:4	550:62	2	FF_ALLOCZ_OR_GOTO
arg	550:22	550:30	3	s->avctx
water	550:22	0:0	4	s
op	550:23	0:0	4	->
water	550:25	0:0	4	avctx
arg	550:32	550:51	3	s->avctx->stats_out
water	550:32	0:0	4	s
op	550:33	0:0	4	->
water	550:35	0:0	4	avctx
op	550:40	0:0	4	->
water	550:42	0:0	4	stats_out
arg	550:53	550:56	3	256
water	550:53	0:0	4	256
arg	550:58	550:62	3	fail
water	550:58	0:0	4	fail
water	550:63	0:0	2	;
call	551:4	551:80	2	FF_ALLOCZ_OR_GOTO
arg	551:22	551:30	3	s->avctx
water	551:22	0:0	4	s
op	551:23	0:0	4	->
water	551:25	0:0	4	avctx
arg	551:32	551:49	3	s->q_intra_matrix
water	551:32	0:0	4	s
op	551:33	0:0	4	->
water	551:35	0:0	4	q_intra_matrix
arg	551:53	551:74	3	64*32*sizeof(int)
water	551:53	0:0	4	64
op	551:56	0:0	4	*
water	551:58	0:0	4	32
op	551:61	0:0	4	*
op	551:63	0:0	4	sizeof
water	551:69	0:0	4	(
water	551:70	0:0	4	int
water	551:73	0:0	4	)
arg	551:76	551:80	3	fail
water	551:76	0:0	4	fail
water	551:81	0:0	2	;
call	552:4	552:85	2	FF_ALLOCZ_OR_GOTO
arg	552:22	552:30	3	s->avctx
water	552:22	0:0	4	s
op	552:23	0:0	4	->
water	552:25	0:0	4	avctx
arg	552:32	552:56	3	s->q_chroma_intra_matrix
water	552:32	0:0	4	s
op	552:33	0:0	4	->
water	552:35	0:0	4	q_chroma_intra_matrix
arg	552:58	552:79	3	64*32*sizeof(int)
water	552:58	0:0	4	64
op	552:61	0:0	4	*
water	552:63	0:0	4	32
op	552:66	0:0	4	*
op	552:68	0:0	4	sizeof
water	552:74	0:0	4	(
water	552:75	0:0	4	int
water	552:78	0:0	4	)
arg	552:81	552:85	3	fail
water	552:81	0:0	4	fail
water	552:86	0:0	2	;
call	553:4	553:80	2	FF_ALLOCZ_OR_GOTO
arg	553:22	553:30	3	s->avctx
water	553:22	0:0	4	s
op	553:23	0:0	4	->
water	553:25	0:0	4	avctx
arg	553:32	553:49	3	s->q_inter_matrix
water	553:32	0:0	4	s
op	553:33	0:0	4	->
water	553:35	0:0	4	q_inter_matrix
arg	553:53	553:74	3	64*32*sizeof(int)
water	553:53	0:0	4	64
op	553:56	0:0	4	*
water	553:58	0:0	4	32
op	553:61	0:0	4	*
op	553:63	0:0	4	sizeof
water	553:69	0:0	4	(
water	553:70	0:0	4	int
water	553:73	0:0	4	)
arg	553:76	553:80	3	fail
water	553:76	0:0	4	fail
water	553:81	0:0	2	;
call	554:4	554:89	2	FF_ALLOCZ_OR_GOTO
arg	554:22	554:30	3	s->avctx
water	554:22	0:0	4	s
op	554:23	0:0	4	->
water	554:25	0:0	4	avctx
arg	554:32	554:51	3	s->q_intra_matrix16
water	554:32	0:0	4	s
op	554:33	0:0	4	->
water	554:35	0:0	4	q_intra_matrix16
arg	554:53	554:83	3	64*32*2*sizeof(uint16_t)
water	554:53	0:0	4	64
op	554:56	0:0	4	*
water	554:58	0:0	4	32
op	554:61	0:0	4	*
water	554:63	0:0	4	2
op	554:65	0:0	4	*
op	554:67	0:0	4	sizeof
water	554:73	0:0	4	(
water	554:74	0:0	4	uint16_t
water	554:82	0:0	4	)
arg	554:85	554:89	3	fail
water	554:85	0:0	4	fail
water	554:90	0:0	2	;
call	555:4	555:96	2	FF_ALLOCZ_OR_GOTO
arg	555:22	555:30	3	s->avctx
water	555:22	0:0	4	s
op	555:23	0:0	4	->
water	555:25	0:0	4	avctx
arg	555:32	555:58	3	s->q_chroma_intra_matrix16
water	555:32	0:0	4	s
op	555:33	0:0	4	->
water	555:35	0:0	4	q_chroma_intra_matrix16
arg	555:60	555:90	3	64*32*2*sizeof(uint16_t)
water	555:60	0:0	4	64
op	555:63	0:0	4	*
water	555:65	0:0	4	32
op	555:68	0:0	4	*
water	555:70	0:0	4	2
op	555:72	0:0	4	*
op	555:74	0:0	4	sizeof
water	555:80	0:0	4	(
water	555:81	0:0	4	uint16_t
water	555:89	0:0	4	)
arg	555:92	555:96	3	fail
water	555:92	0:0	4	fail
water	555:97	0:0	2	;
call	556:4	556:89	2	FF_ALLOCZ_OR_GOTO
arg	556:22	556:30	3	s->avctx
water	556:22	0:0	4	s
op	556:23	0:0	4	->
water	556:25	0:0	4	avctx
arg	556:32	556:51	3	s->q_inter_matrix16
water	556:32	0:0	4	s
op	556:33	0:0	4	->
water	556:35	0:0	4	q_inter_matrix16
arg	556:53	556:83	3	64*32*2*sizeof(uint16_t)
water	556:53	0:0	4	64
op	556:56	0:0	4	*
water	556:58	0:0	4	32
op	556:61	0:0	4	*
water	556:63	0:0	4	2
op	556:65	0:0	4	*
op	556:67	0:0	4	sizeof
water	556:73	0:0	4	(
water	556:74	0:0	4	uint16_t
water	556:82	0:0	4	)
arg	556:85	556:89	3	fail
water	556:85	0:0	4	fail
water	556:90	0:0	2	;
call	557:4	558:65	2	FF_ALLOCZ_OR_GOTO
arg	557:22	557:30	3	s->avctx
water	557:22	0:0	4	s
op	557:23	0:0	4	->
water	557:25	0:0	4	avctx
arg	557:32	557:48	3	s->input_picture
water	557:32	0:0	4	s
op	557:33	0:0	4	->
water	557:35	0:0	4	input_picture
arg	558:22	558:59	3	MAX_PICTURE_COUNT*sizeof(Picture*)
water	558:22	0:0	4	MAX_PICTURE_COUNT
op	558:40	0:0	4	*
op	558:42	0:0	4	sizeof
water	558:48	0:0	4	(
water	558:49	0:0	4	Picture
op	558:57	0:0	4	*
water	558:58	0:0	4	)
arg	558:61	558:65	3	fail
water	558:61	0:0	4	fail
water	558:66	0:0	2	;
call	559:4	560:65	2	FF_ALLOCZ_OR_GOTO
arg	559:22	559:30	3	s->avctx
water	559:22	0:0	4	s
op	559:23	0:0	4	->
water	559:25	0:0	4	avctx
arg	559:32	559:58	3	s->reordered_input_picture
water	559:32	0:0	4	s
op	559:33	0:0	4	->
water	559:35	0:0	4	reordered_input_picture
arg	560:22	560:59	3	MAX_PICTURE_COUNT*sizeof(Picture*)
water	560:22	0:0	4	MAX_PICTURE_COUNT
op	560:40	0:0	4	*
op	560:42	0:0	4	sizeof
water	560:48	0:0	4	(
water	560:49	0:0	4	Picture
op	560:57	0:0	4	*
water	560:58	0:0	4	)
arg	560:61	560:65	3	fail
water	560:61	0:0	4	fail
water	560:66	0:0	2	;
if	561:4	564:4	2	(s -> avctx -> noise_reduction)
cond	561:8	561:18	3	s -> avctx -> noise_reduction
water	561:8	0:0	4	s
op	561:9	0:0	4	->
water	561:11	0:0	4	avctx
op	561:16	0:0	4	->
water	561:18	0:0	4	noise_reduction
stmts	561:35	564:4	3	
water	561:35	0:0	4	{
call	562:8	563:57	4	FF_ALLOCZ_OR_GOTO
arg	562:26	562:34	5	s->avctx
water	562:26	0:0	6	s
op	562:27	0:0	6	->
water	562:29	0:0	6	avctx
arg	562:36	562:49	5	s->dct_offset
water	562:36	0:0	6	s
op	562:37	0:0	6	->
water	562:39	0:0	6	dct_offset
arg	563:26	563:51	5	2*64*sizeof(uint16_t)
water	563:26	0:0	6	2
op	563:28	0:0	6	*
water	563:30	0:0	6	64
op	563:33	0:0	6	*
op	563:35	0:0	6	sizeof
water	563:41	0:0	6	(
water	563:42	0:0	6	uint16_t
water	563:50	0:0	6	)
arg	563:53	563:57	5	fail
water	563:53	0:0	6	fail
water	563:58	0:0	4	;
water	564:4	0:0	4	}
call	565:4	565:24	2	ff_dct_encode_init
arg	565:23	565:24	3	s
water	565:23	0:0	4	s
water	565:25	0:0	2	;
if	566:4	567:60	2	(( CONFIG_H263P_ENCODER || CONFIG_RV20_ENCODER ) && s -> modified_quant)
cond	566:8	566:60	3	( CONFIG_H263P_ENCODER || CONFIG_RV20_ENCODER ) && s -> modified_quant
water	566:8	0:0	4	(
water	566:9	0:0	4	CONFIG_H263P_ENCODER
op	566:30	0:0	4	||
water	566:33	0:0	4	CONFIG_RV20_ENCODER
water	566:52	0:0	4	)
op	566:54	0:0	4	&&
water	566:57	0:0	4	s
op	566:58	0:0	4	->
water	566:60	0:0	4	modified_quant
stmts	567:8	567:60	3	
water	567:8	0:0	4	s
op	567:9	0:0	4	->
water	567:11	0:0	4	chroma_qscale_table
op	567:31	0:0	4	=
water	567:33	0:0	4	ff_h263_chroma_qscale_table
water	567:60	0:0	4	;
water	568:4	0:0	2	s
op	568:5	0:0	2	->
water	568:7	0:0	2	quant_precision
op	568:23	0:0	2	=
water	568:25	0:0	2	5
water	568:26	0:0	2	;
call	569:4	569:68	2	ff_set_cmp
arg	569:15	569:23	3	&s->mecc
op	569:15	0:0	4	&
water	569:16	0:0	4	s
op	569:17	0:0	4	->
water	569:19	0:0	4	mecc
arg	569:25	569:42	3	s->mecc.ildct_cmp
water	569:25	0:0	4	s
op	569:26	0:0	4	->
water	569:28	0:0	4	mecc
op	569:32	0:0	4	.
water	569:33	0:0	4	ildct_cmp
arg	569:49	569:68	3	s->avctx->ildct_cmp
water	569:49	0:0	4	s
op	569:50	0:0	4	->
water	569:52	0:0	4	avctx
op	569:57	0:0	4	->
water	569:59	0:0	4	ildct_cmp
water	569:69	0:0	2	;
call	570:4	570:73	2	ff_set_cmp
arg	570:15	570:23	3	&s->mecc
op	570:15	0:0	4	&
water	570:16	0:0	4	s
op	570:17	0:0	4	->
water	570:19	0:0	4	mecc
arg	570:25	570:47	3	s->mecc.frame_skip_cmp
water	570:25	0:0	4	s
op	570:26	0:0	4	->
water	570:28	0:0	4	mecc
op	570:32	0:0	4	.
water	570:33	0:0	4	frame_skip_cmp
arg	570:49	570:73	3	s->avctx->frame_skip_cmp
water	570:49	0:0	4	s
op	570:50	0:0	4	->
water	570:52	0:0	4	avctx
op	570:57	0:0	4	->
water	570:59	0:0	4	frame_skip_cmp
water	570:74	0:0	2	;
if	571:4	572:30	2	(CONFIG_H261_ENCODER && s -> out_format == FMT_H261)
cond	571:8	571:48	3	CONFIG_H261_ENCODER && s -> out_format == FMT_H261
water	571:8	0:0	4	CONFIG_H261_ENCODER
op	571:28	0:0	4	&&
water	571:31	0:0	4	s
op	571:32	0:0	4	->
water	571:34	0:0	4	out_format
op	571:45	0:0	4	==
water	571:48	0:0	4	FMT_H261
stmts	572:8	572:30	3	
call	572:8	572:29	4	ff_h261_encode_init
arg	572:28	572:29	5	s
water	572:28	0:0	6	s
water	572:30	0:0	4	;
if	573:4	574:30	2	(CONFIG_H263_ENCODER && s -> out_format == FMT_H263)
cond	573:8	573:48	3	CONFIG_H263_ENCODER && s -> out_format == FMT_H263
water	573:8	0:0	4	CONFIG_H263_ENCODER
op	573:28	0:0	4	&&
water	573:31	0:0	4	s
op	573:32	0:0	4	->
water	573:34	0:0	4	out_format
op	573:45	0:0	4	==
water	573:48	0:0	4	FMT_H263
stmts	574:8	574:30	3	
call	574:8	574:29	4	ff_h263_encode_init
arg	574:28	574:29	5	s
water	574:28	0:0	6	s
water	574:30	0:0	4	;
if	575:4	577:22	2	(CONFIG_MSMPEG4_ENCODER && s -> msmpeg4_version)
cond	575:8	575:37	3	CONFIG_MSMPEG4_ENCODER && s -> msmpeg4_version
water	575:8	0:0	4	CONFIG_MSMPEG4_ENCODER
op	575:31	0:0	4	&&
water	575:34	0:0	4	s
op	575:35	0:0	4	->
water	575:37	0:0	4	msmpeg4_version
stmts	576:8	577:22	3	
if	576:8	577:22	4	(( ret =ff_msmpeg4_encode_init (s ) ) < 0)
cond	576:12	576:48	5	( ret =ff_msmpeg4_encode_init (s ) ) < 0
water	576:12	0:0	6	(
water	576:13	0:0	6	ret
op	576:17	0:0	6	=
call	576:19	576:43	6	ff_msmpeg4_encode_init
arg	576:42	576:43	7	s
water	576:42	0:0	8	s
water	576:44	0:0	6	)
op	576:46	0:0	6	<
water	576:48	0:0	6	0
stmts	577:12	577:22	5	
return	577:12	577:22	6	ret
water	577:19	0:0	7	ret
if	578:4	580:31	2	(( CONFIG_MPEG1VIDEO_ENCODER || CONFIG_MPEG2VIDEO_ENCODER ) && s -> out_format == FMT_MPEG1)
cond	578:8	579:28	3	( CONFIG_MPEG1VIDEO_ENCODER || CONFIG_MPEG2VIDEO_ENCODER ) && s -> out_format == FMT_MPEG1
water	578:8	0:0	4	(
water	578:9	0:0	4	CONFIG_MPEG1VIDEO_ENCODER
op	578:35	0:0	4	||
water	578:38	0:0	4	CONFIG_MPEG2VIDEO_ENCODER
water	578:63	0:0	4	)
op	579:8	0:0	4	&&
water	579:11	0:0	4	s
op	579:12	0:0	4	->
water	579:14	0:0	4	out_format
op	579:25	0:0	4	==
water	579:28	0:0	4	FMT_MPEG1
stmts	580:8	580:31	3	
call	580:8	580:30	4	ff_mpeg1_encode_init
arg	580:29	580:30	5	s
water	580:29	0:0	6	s
water	580:31	0:0	4	;
for	582:4	601:4	2	(i = 0 ;i < 64;i ++)
forinit	582:9	582:14	3	i = 0 ;
water	582:9	0:0	4	i
op	582:11	0:0	4	=
water	582:13	0:0	4	0
water	582:14	0:0	4	;
cond	582:16	582:20	3	i < 64
water	582:16	0:0	4	i
op	582:18	0:0	4	<
water	582:20	0:0	4	64
forexpr	582:24	582:25	3	i ++
water	582:24	0:0	4	i
op	582:25	0:0	4	++
stmts	582:29	601:4	3	
water	582:29	0:0	4	{
decl	583:8	583:43	4	int	j
op	583:14	0:0	4	=
water	583:16	0:0	4	s
op	583:17	0:0	4	->
water	583:19	0:0	4	idsp
op	583:23	0:0	4	.
water	583:24	0:0	4	idct_permutation
op	583:40	0:0	4	[
water	583:41	0:0	4	i
op	583:42	0:0	4	]
if	584:8	588:8	4	(CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4 && s -> mpeg_quant)
cond	584:12	585:15	5	CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4 && s -> mpeg_quant
water	584:12	0:0	6	CONFIG_MPEG4_ENCODER
op	584:33	0:0	6	&&
water	584:36	0:0	6	s
op	584:37	0:0	6	->
water	584:39	0:0	6	codec_id
op	584:48	0:0	6	==
water	584:51	0:0	6	AV_CODEC_ID_MPEG4
op	584:69	0:0	6	&&
water	585:12	0:0	6	s
op	585:13	0:0	6	->
water	585:15	0:0	6	mpeg_quant
stmts	585:27	588:8	5	
water	585:27	0:0	6	{
water	586:12	0:0	6	s
op	586:13	0:0	6	->
water	586:15	0:0	6	intra_matrix
op	586:27	0:0	6	[
water	586:28	0:0	6	j
op	586:29	0:0	6	]
op	586:31	0:0	6	=
water	586:33	0:0	6	ff_mpeg4_default_intra_matrix
op	586:62	0:0	6	[
water	586:63	0:0	6	i
op	586:64	0:0	6	]
water	586:65	0:0	6	;
water	587:12	0:0	6	s
op	587:13	0:0	6	->
water	587:15	0:0	6	inter_matrix
op	587:27	0:0	6	[
water	587:28	0:0	6	j
op	587:29	0:0	6	]
op	587:31	0:0	6	=
water	587:33	0:0	6	ff_mpeg4_default_non_intra_matrix
op	587:66	0:0	6	[
water	587:67	0:0	6	i
op	587:68	0:0	6	]
water	587:69	0:0	6	;
water	588:8	0:0	6	}
else	588:10	591:8	4
stmts	588:15	591:8	5	
if	588:15	591:8	6	(s -> out_format == FMT_H263 || s -> out_format == FMT_H261)
cond	588:19	588:65	7	s -> out_format == FMT_H263 || s -> out_format == FMT_H261
water	588:19	0:0	8	s
op	588:20	0:0	8	->
water	588:22	0:0	8	out_format
op	588:33	0:0	8	==
water	588:36	0:0	8	FMT_H263
op	588:45	0:0	8	||
water	588:48	0:0	8	s
op	588:49	0:0	8	->
water	588:51	0:0	8	out_format
op	588:62	0:0	8	==
water	588:65	0:0	8	FMT_H261
stmts	588:75	591:8	7	
water	588:75	0:0	8	{
water	589:12	0:0	8	s
op	589:13	0:0	8	->
water	589:15	0:0	8	intra_matrix
op	589:27	0:0	8	[
water	589:28	0:0	8	j
op	589:29	0:0	8	]
op	589:31	0:0	8	=
water	590:12	0:0	8	s
op	590:13	0:0	8	->
water	590:15	0:0	8	inter_matrix
op	590:27	0:0	8	[
water	590:28	0:0	8	j
op	590:29	0:0	8	]
op	590:31	0:0	8	=
water	590:33	0:0	8	ff_mpeg1_default_non_intra_matrix
op	590:66	0:0	8	[
water	590:67	0:0	8	i
op	590:68	0:0	8	]
water	590:69	0:0	8	;
water	591:8	0:0	8	}
else	591:10	596:8	4
stmts	591:15	596:8	5	
water	591:15	0:0	6	{
water	593:12	0:0	6	s
op	593:13	0:0	6	->
water	593:15	0:0	6	chroma_intra_matrix
op	593:34	0:0	6	[
water	593:35	0:0	6	j
op	593:36	0:0	6	]
op	593:38	0:0	6	=
water	594:12	0:0	6	s
op	594:13	0:0	6	->
water	594:15	0:0	6	intra_matrix
op	594:27	0:0	6	[
water	594:28	0:0	6	j
op	594:29	0:0	6	]
op	594:31	0:0	6	=
water	594:33	0:0	6	ff_mpeg1_default_intra_matrix
op	594:62	0:0	6	[
water	594:63	0:0	6	i
op	594:64	0:0	6	]
water	594:65	0:0	6	;
water	595:12	0:0	6	s
op	595:13	0:0	6	->
water	595:15	0:0	6	inter_matrix
op	595:27	0:0	6	[
water	595:28	0:0	6	j
op	595:29	0:0	6	]
op	595:31	0:0	6	=
water	595:33	0:0	6	ff_mpeg1_default_non_intra_matrix
op	595:66	0:0	6	[
water	595:67	0:0	6	i
op	595:68	0:0	6	]
water	595:69	0:0	6	;
water	596:8	0:0	6	}
if	597:8	598:58	4	(s -> avctx -> intra_matrix)
cond	597:12	597:22	5	s -> avctx -> intra_matrix
water	597:12	0:0	6	s
op	597:13	0:0	6	->
water	597:15	0:0	6	avctx
op	597:20	0:0	6	->
water	597:22	0:0	6	intra_matrix
stmts	598:12	598:58	5	
water	598:12	0:0	6	s
op	598:13	0:0	6	->
water	598:15	0:0	6	intra_matrix
op	598:27	0:0	6	[
water	598:28	0:0	6	j
op	598:29	0:0	6	]
op	598:31	0:0	6	=
water	598:33	0:0	6	s
op	598:34	0:0	6	->
water	598:36	0:0	6	avctx
op	598:41	0:0	6	->
water	598:43	0:0	6	intra_matrix
op	598:55	0:0	6	[
water	598:56	0:0	6	i
op	598:57	0:0	6	]
water	598:58	0:0	6	;
if	599:8	600:58	4	(s -> avctx -> inter_matrix)
cond	599:12	599:22	5	s -> avctx -> inter_matrix
water	599:12	0:0	6	s
op	599:13	0:0	6	->
water	599:15	0:0	6	avctx
op	599:20	0:0	6	->
water	599:22	0:0	6	inter_matrix
stmts	600:12	600:58	5	
water	600:12	0:0	6	s
op	600:13	0:0	6	->
water	600:15	0:0	6	inter_matrix
op	600:27	0:0	6	[
water	600:28	0:0	6	j
op	600:29	0:0	6	]
op	600:31	0:0	6	=
water	600:33	0:0	6	s
op	600:34	0:0	6	->
water	600:36	0:0	6	avctx
op	600:41	0:0	6	->
water	600:43	0:0	6	inter_matrix
op	600:55	0:0	6	[
water	600:56	0:0	6	i
op	600:57	0:0	6	]
water	600:58	0:0	6	;
water	601:4	0:0	4	}
if	604:4	611:4	2	(s -> out_format != FMT_MJPEG)
cond	604:8	604:25	3	s -> out_format != FMT_MJPEG
water	604:8	0:0	4	s
op	604:9	0:0	4	->
water	604:11	0:0	4	out_format
op	604:22	0:0	4	!=
water	604:25	0:0	4	FMT_MJPEG
stmts	604:36	611:4	3	
water	604:36	0:0	4	{
call	605:8	607:31	4	ff_convert_matrix
arg	605:26	605:27	5	s
water	605:26	0:0	6	s
arg	605:29	605:46	5	s->q_intra_matrix
water	605:29	0:0	6	s
op	605:30	0:0	6	->
water	605:32	0:0	6	q_intra_matrix
arg	605:48	605:67	5	s->q_intra_matrix16
water	605:48	0:0	6	s
op	605:49	0:0	6	->
water	605:51	0:0	6	q_intra_matrix16
arg	606:26	606:41	5	s->intra_matrix
water	606:26	0:0	6	s
op	606:27	0:0	6	->
water	606:29	0:0	6	intra_matrix
arg	606:43	606:62	5	s->intra_quant_bias
water	606:43	0:0	6	s
op	606:44	0:0	6	->
water	606:46	0:0	6	intra_quant_bias
arg	606:64	606:75	5	avctx->qmin
water	606:64	0:0	6	avctx
op	606:69	0:0	6	->
water	606:71	0:0	6	qmin
arg	607:26	607:28	5	31
water	607:26	0:0	6	31
arg	607:30	607:31	5	1
water	607:30	0:0	6	1
water	607:32	0:0	4	;
call	608:8	610:31	4	ff_convert_matrix
arg	608:26	608:27	5	s
water	608:26	0:0	6	s
arg	608:29	608:46	5	s->q_inter_matrix
water	608:29	0:0	6	s
op	608:30	0:0	6	->
water	608:32	0:0	6	q_inter_matrix
arg	608:48	608:67	5	s->q_inter_matrix16
water	608:48	0:0	6	s
op	608:49	0:0	6	->
water	608:51	0:0	6	q_inter_matrix16
arg	609:26	609:41	5	s->inter_matrix
water	609:26	0:0	6	s
op	609:27	0:0	6	->
water	609:29	0:0	6	inter_matrix
arg	609:43	609:62	5	s->inter_quant_bias
water	609:43	0:0	6	s
op	609:44	0:0	6	->
water	609:46	0:0	6	inter_quant_bias
arg	609:64	609:75	5	avctx->qmin
water	609:64	0:0	6	avctx
op	609:69	0:0	6	->
water	609:71	0:0	6	qmin
arg	610:26	610:28	5	31
water	610:26	0:0	6	31
arg	610:30	610:31	5	0
water	610:30	0:0	6	0
water	610:32	0:0	4	;
water	611:4	0:0	4	}
if	612:4	613:17	2	(ff_rate_control_init (s ) < 0)
cond	612:8	612:34	3	ff_rate_control_init (s ) < 0
call	612:8	612:30	4	ff_rate_control_init
arg	612:29	612:30	5	s
water	612:29	0:0	6	s
op	612:32	0:0	4	<
water	612:34	0:0	4	0
stmts	613:8	613:17	3	
return	613:8	613:17	4	-1
op	613:15	0:0	5	-
water	613:16	0:0	5	1
water	615:4	0:0	2	FF_DISABLE_DEPRECATION_WARNINGS
water	616:4	0:0	2	if
water	616:7	0:0	2	(
water	616:8	0:0	2	avctx
op	616:13	0:0	2	->
water	616:15	0:0	2	error_rate
water	616:25	0:0	2	)
water	617:8	0:0	2	s
op	617:9	0:0	2	->
water	617:11	0:0	2	error_rate
op	617:22	0:0	2	=
water	617:24	0:0	2	avctx
op	617:29	0:0	2	->
water	617:31	0:0	2	error_rate
water	617:41	0:0	2	;
water	618:4	0:0	2	FF_ENABLE_DEPRECATION_WARNINGS
water	618:34	0:0	2	;
water	621:4	0:0	2	FF_DISABLE_DEPRECATION_WARNINGS
water	622:4	0:0	2	if
water	622:7	0:0	2	(
water	622:8	0:0	2	avctx
op	622:13	0:0	2	->
water	622:15	0:0	2	flags
op	622:21	0:0	2	&
water	622:23	0:0	2	CODEC_FLAG_NORMALIZE_AQP
water	622:47	0:0	2	)
water	623:8	0:0	2	s
op	623:9	0:0	2	->
water	623:11	0:0	2	mpv_flags
op	623:21	0:0	2	|=
water	623:24	0:0	2	FF_MPV_FLAG_NAQ
water	623:39	0:0	2	;
water	624:4	0:0	2	FF_ENABLE_DEPRECATION_WARNINGS
water	624:34	0:0	2	;
water	627:4	0:0	2	FF_DISABLE_DEPRECATION_WARNINGS
water	628:4	0:0	2	if
water	628:7	0:0	2	(
water	628:8	0:0	2	avctx
op	628:13	0:0	2	->
water	628:15	0:0	2	flags
op	628:21	0:0	2	&
water	628:23	0:0	2	CODEC_FLAG_MV0
water	628:37	0:0	2	)
water	629:8	0:0	2	s
op	629:9	0:0	2	->
water	629:11	0:0	2	mpv_flags
op	629:21	0:0	2	|=
water	629:24	0:0	2	FF_MPV_FLAG_MV0
water	629:39	0:0	2	;
water	630:4	0:0	2	FF_ENABLE_DEPRECATION_WARNINGS
water	633:4	0:0	2	FF_DISABLE_DEPRECATION_WARNINGS
water	634:4	0:0	2	if
water	634:7	0:0	2	(
water	634:8	0:0	2	avctx
op	634:13	0:0	2	->
water	634:15	0:0	2	rc_qsquish
op	634:26	0:0	2	!=
water	634:29	0:0	2	0
op	634:30	0:0	2	.
water	634:31	0:0	2	0
water	634:32	0:0	2	)
water	635:8	0:0	2	s
op	635:9	0:0	2	->
water	635:11	0:0	2	rc_qsquish
op	635:22	0:0	2	=
water	635:24	0:0	2	avctx
op	635:29	0:0	2	->
water	635:31	0:0	2	rc_qsquish
water	635:41	0:0	2	;
if	636:4	637:43	2	(avctx -> rc_qmod_amp != 0 . 0)
cond	636:8	636:32	3	avctx -> rc_qmod_amp != 0 . 0
water	636:8	0:0	4	avctx
op	636:13	0:0	4	->
water	636:15	0:0	4	rc_qmod_amp
op	636:27	0:0	4	!=
water	636:30	0:0	4	0
op	636:31	0:0	4	.
water	636:32	0:0	4	0
stmts	637:8	637:43	3	
water	637:8	0:0	4	s
op	637:9	0:0	4	->
water	637:11	0:0	4	rc_qmod_amp
op	637:23	0:0	4	=
water	637:25	0:0	4	avctx
op	637:30	0:0	4	->
water	637:32	0:0	4	rc_qmod_amp
water	637:43	0:0	4	;
if	638:4	639:45	2	(avctx -> rc_qmod_freq)
cond	638:8	638:15	3	avctx -> rc_qmod_freq
water	638:8	0:0	4	avctx
op	638:13	0:0	4	->
water	638:15	0:0	4	rc_qmod_freq
stmts	639:8	639:45	3	
water	639:8	0:0	4	s
op	639:9	0:0	4	->
water	639:11	0:0	4	rc_qmod_freq
op	639:24	0:0	4	=
water	639:26	0:0	4	avctx
op	639:31	0:0	4	->
water	639:33	0:0	4	rc_qmod_freq
water	639:45	0:0	4	;
if	640:4	641:65	2	(avctx -> rc_buffer_aggressivity != 1 . 0)
cond	640:8	640:43	3	avctx -> rc_buffer_aggressivity != 1 . 0
water	640:8	0:0	4	avctx
op	640:13	0:0	4	->
water	640:15	0:0	4	rc_buffer_aggressivity
op	640:38	0:0	4	!=
water	640:41	0:0	4	1
op	640:42	0:0	4	.
water	640:43	0:0	4	0
stmts	641:8	641:65	3	
water	641:8	0:0	4	s
op	641:9	0:0	4	->
water	641:11	0:0	4	rc_buffer_aggressivity
op	641:34	0:0	4	=
water	641:36	0:0	4	avctx
op	641:41	0:0	4	->
water	641:43	0:0	4	rc_buffer_aggressivity
water	641:65	0:0	4	;
if	642:4	643:51	2	(avctx -> rc_initial_cplx != 0 . 0)
cond	642:8	642:36	3	avctx -> rc_initial_cplx != 0 . 0
water	642:8	0:0	4	avctx
op	642:13	0:0	4	->
water	642:15	0:0	4	rc_initial_cplx
op	642:31	0:0	4	!=
water	642:34	0:0	4	0
op	642:35	0:0	4	.
water	642:36	0:0	4	0
stmts	643:8	643:51	3	
water	643:8	0:0	4	s
op	643:9	0:0	4	->
water	643:11	0:0	4	rc_initial_cplx
op	643:27	0:0	4	=
water	643:29	0:0	4	avctx
op	643:34	0:0	4	->
water	643:36	0:0	4	rc_initial_cplx
water	643:51	0:0	4	;
if	644:4	645:29	2	(avctx -> lmin)
cond	644:8	644:15	3	avctx -> lmin
water	644:8	0:0	4	avctx
op	644:13	0:0	4	->
water	644:15	0:0	4	lmin
stmts	645:8	645:29	3	
water	645:8	0:0	4	s
op	645:9	0:0	4	->
water	645:11	0:0	4	lmin
op	645:16	0:0	4	=
water	645:18	0:0	4	avctx
op	645:23	0:0	4	->
water	645:25	0:0	4	lmin
water	645:29	0:0	4	;
if	646:4	647:29	2	(avctx -> lmax)
cond	646:8	646:15	3	avctx -> lmax
water	646:8	0:0	4	avctx
op	646:13	0:0	4	->
water	646:15	0:0	4	lmax
stmts	647:8	647:29	3	
water	647:8	0:0	4	s
op	647:9	0:0	4	->
water	647:11	0:0	4	lmax
op	647:16	0:0	4	=
water	647:18	0:0	4	avctx
op	647:23	0:0	4	->
water	647:25	0:0	4	lmax
water	647:29	0:0	4	;
if	648:4	653:4	2	(avctx -> rc_eq)
cond	648:8	648:15	3	avctx -> rc_eq
water	648:8	0:0	4	avctx
op	648:13	0:0	4	->
water	648:15	0:0	4	rc_eq
stmts	648:22	653:4	3	
water	648:22	0:0	4	{
call	649:8	649:26	4	av_freep
arg	649:17	649:26	5	&s->rc_eq
op	649:17	0:0	6	&
water	649:18	0:0	6	s
op	649:19	0:0	6	->
water	649:21	0:0	6	rc_eq
water	649:27	0:0	4	;
water	650:8	0:0	4	s
op	650:9	0:0	4	->
water	650:11	0:0	4	rc_eq
op	650:17	0:0	4	=
call	650:19	650:41	4	av_strdup
arg	650:29	650:41	5	avctx->rc_eq
water	650:29	0:0	6	avctx
op	650:34	0:0	6	->
water	650:36	0:0	6	rc_eq
water	650:42	0:0	4	;
if	651:8	652:34	4	(! s -> rc_eq)
cond	651:12	651:16	5	! s -> rc_eq
op	651:12	0:0	6	!
water	651:13	0:0	6	s
op	651:14	0:0	6	->
water	651:16	0:0	6	rc_eq
stmts	652:12	652:34	5	
return	652:12	652:34	6	AVERROR(ENOMEM)
call	652:19	652:33	7	AVERROR
arg	652:27	652:33	8	ENOMEM
water	652:27	0:0	9	ENOMEM
water	653:4	0:0	4	}
water	654:4	0:0	2	FF_ENABLE_DEPRECATION_WARNINGS
water	656:4	0:0	2	if
water	656:7	0:0	2	(
water	656:8	0:0	2	avctx
op	656:13	0:0	2	->
water	656:15	0:0	2	b_frame_strategy
op	656:32	0:0	2	==
water	656:35	0:0	2	2
water	656:36	0:0	2	)
water	656:38	0:0	2	{
water	657:8	0:0	2	for
water	657:12	0:0	2	(
water	657:13	0:0	2	i
op	657:15	0:0	2	=
water	657:17	0:0	2	0
water	657:18	0:0	2	;
water	657:20	0:0	2	i
op	657:22	0:0	2	<
water	657:24	0:0	2	s
op	657:25	0:0	2	->
water	657:27	0:0	2	max_b_frames
op	657:40	0:0	2	+
water	657:42	0:0	2	2
water	657:43	0:0	2	;
water	657:45	0:0	2	i
op	657:46	0:0	2	++
water	657:48	0:0	2	)
water	657:50	0:0	2	{
water	658:12	0:0	2	s
op	658:13	0:0	2	->
water	658:15	0:0	2	tmp_frames
op	658:25	0:0	2	[
water	658:26	0:0	2	i
op	658:27	0:0	2	]
op	658:29	0:0	2	=
call	658:31	658:46	2	av_frame_alloc
water	658:47	0:0	2	;
water	659:12	0:0	2	if
water	659:15	0:0	2	(
op	659:16	0:0	2	!
water	659:17	0:0	2	s
op	659:18	0:0	2	->
water	659:20	0:0	2	tmp_frames
op	659:30	0:0	2	[
water	659:31	0:0	2	i
op	659:32	0:0	2	]
water	659:33	0:0	2	)
water	660:16	0:0	2	return
call	660:23	660:37	2	AVERROR
arg	660:31	660:37	3	ENOMEM
water	660:31	0:0	4	ENOMEM
water	660:38	0:0	2	;
water	661:12	0:0	2	s
op	661:13	0:0	2	->
water	661:15	0:0	2	tmp_frames
op	661:25	0:0	2	[
water	661:26	0:0	2	i
op	661:27	0:0	2	]
op	661:28	0:0	2	->
water	661:30	0:0	2	format
op	661:37	0:0	2	=
water	661:39	0:0	2	AV_PIX_FMT_YUV420P
water	661:57	0:0	2	;
water	662:12	0:0	2	s
op	662:13	0:0	2	->
water	662:15	0:0	2	tmp_frames
op	662:25	0:0	2	[
water	662:26	0:0	2	i
op	662:27	0:0	2	]
op	662:28	0:0	2	->
water	662:30	0:0	2	width
op	662:37	0:0	2	=
water	662:39	0:0	2	s
op	662:40	0:0	2	->
water	662:42	0:0	2	width
op	662:49	0:0	2	>>
water	662:52	0:0	2	avctx
op	662:57	0:0	2	->
water	662:59	0:0	2	brd_scale
water	662:68	0:0	2	;
water	663:12	0:0	2	s
op	663:13	0:0	2	->
water	663:15	0:0	2	tmp_frames
op	663:25	0:0	2	[
water	663:26	0:0	2	i
op	663:27	0:0	2	]
op	663:28	0:0	2	->
water	663:30	0:0	2	height
op	663:37	0:0	2	=
water	663:39	0:0	2	s
op	663:40	0:0	2	->
water	663:42	0:0	2	height
op	663:49	0:0	2	>>
water	663:52	0:0	2	avctx
op	663:57	0:0	2	->
water	663:59	0:0	2	brd_scale
water	663:68	0:0	2	;
water	664:12	0:0	2	ret
op	664:16	0:0	2	=
call	664:18	664:58	2	av_frame_get_buffer
arg	664:38	664:54	3	s->tmp_frames[i]
water	664:38	0:0	4	s
op	664:39	0:0	4	->
water	664:41	0:0	4	tmp_frames
op	664:51	0:0	4	[
water	664:52	0:0	4	i
op	664:53	0:0	4	]
arg	664:56	664:58	3	32
water	664:56	0:0	4	32
water	664:59	0:0	2	;
water	665:12	0:0	2	if
water	665:15	0:0	2	(
water	665:16	0:0	2	ret
op	665:20	0:0	2	<
water	665:22	0:0	2	0
water	665:23	0:0	2	)
water	666:16	0:0	2	return
water	666:23	0:0	2	ret
water	666:26	0:0	2	;
water	667:8	0:0	2	}
water	668:4	0:0	2	}
water	669:4	0:0	2	return
water	669:11	0:0	2	0
water	669:12	0:0	2	;
label	670:0	670:4	2	fail :
call	671:4	671:27	2	ff_mpv_encode_end
arg	671:22	671:27	3	avctx
water	671:22	0:0	4	avctx
water	671:28	0:0	2	;
return	672:4	672:26	2	AVERROR_UNKNOWN
water	672:11	0:0	3	AVERROR_UNKNOWN
