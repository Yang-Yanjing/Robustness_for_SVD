func	1:0	124:0	0	static int	video_decode
params	1:23	0:0	1	
param	1:24	1:50	2	const char *	input_filename
stmnts	0:0	123:12	1	
decl	3:4	3:25	2	AVCodec	*codec
op	3:19	0:0	2	=
water	3:21	0:0	2	NULL
decl	4:4	4:49	2	AVCodecContext	*origin_ctx
op	4:31	0:0	2	=
water	4:33	0:0	2	NULL
water	4:37	0:0	2	,
decl	4:4	4:49	2	AVCodecContext	*ctx
op	4:43	0:0	2	=
water	4:45	0:0	2	NULL
decl	5:4	5:31	2	uint8_t	*byte_buffer
op	5:25	0:0	2	=
water	5:27	0:0	2	NULL
decl	6:4	6:22	2	AVFrame	*fr
op	6:16	0:0	2	=
water	6:18	0:0	2	NULL
decl	7:4	7:16	2	AVPacket	pkt
decl	8:4	8:35	2	AVFormatContext	*fmt_ctx
op	8:29	0:0	2	=
water	8:31	0:0	2	NULL
decl	9:4	9:31	2	int	number_of_written_bytes
decl	10:4	10:20	2	int	video_stream
decl	11:4	11:21	2	int	got_frame
op	11:18	0:0	2	=
water	11:20	0:0	2	0
decl	12:4	12:24	2	int	byte_buffer_size
decl	13:4	13:14	2	int	result
decl	14:4	14:25	2	int	end_of_stream
op	14:22	0:0	2	=
water	14:24	0:0	2	0
water	15:4	0:0	2	draw_horiz_band_called
op	15:27	0:0	2	=
water	15:29	0:0	2	0
water	15:30	0:0	2	;
water	16:4	0:0	2	result
op	16:11	0:0	2	=
call	16:13	16:69	2	avformat_open_input
arg	16:33	16:41	3	&fmt_ctx
op	16:33	0:0	4	&
water	16:34	0:0	4	fmt_ctx
arg	16:43	16:57	3	input_filename
water	16:43	0:0	4	input_filename
arg	16:59	16:63	3	NULL
water	16:59	0:0	4	NULL
arg	16:65	16:69	3	NULL
water	16:65	0:0	4	NULL
water	16:70	0:0	2	;
if	17:4	20:4	2	(result < 0)
cond	17:8	17:17	3	result < 0
water	17:8	0:0	4	result
op	17:15	0:0	4	<
water	17:17	0:0	4	0
stmts	17:20	20:4	3	
water	17:20	0:0	4	{
call	18:8	18:54	4	av_log
arg	18:15	18:19	5	NULL
water	18:15	0:0	6	NULL
arg	18:21	18:33	5	AV_LOG_ERROR
water	18:21	0:0	6	AV_LOG_ERROR
arg	18:35	18:54	5	"Can't open file\n"
water	18:35	0:0	6	"Can't open file\n"
water	18:55	0:0	4	;
return	19:8	19:21	4	result
water	19:15	0:0	5	result
water	20:4	0:0	4	}
water	21:4	0:0	2	result
op	21:11	0:0	2	=
call	21:13	21:52	2	avformat_find_stream_info
arg	21:39	21:46	3	fmt_ctx
water	21:39	0:0	4	fmt_ctx
arg	21:48	21:52	3	NULL
water	21:48	0:0	4	NULL
water	21:53	0:0	2	;
if	22:4	25:4	2	(result < 0)
cond	22:8	22:17	3	result < 0
water	22:8	0:0	4	result
op	22:15	0:0	4	<
water	22:17	0:0	4	0
stmts	22:20	25:4	3	
water	22:20	0:0	4	{
call	23:8	23:60	4	av_log
arg	23:15	23:19	5	NULL
water	23:15	0:0	6	NULL
arg	23:21	23:33	5	AV_LOG_ERROR
water	23:21	0:0	6	AV_LOG_ERROR
arg	23:35	23:60	5	"Can't get stream info\n"
water	23:35	0:0	6	"Can't get stream info\n"
water	23:61	0:0	4	;
return	24:8	24:21	4	result
water	24:15	0:0	5	result
water	25:4	0:0	4	}
water	26:4	0:0	2	video_stream
op	26:17	0:0	2	=
call	26:19	26:83	2	av_find_best_stream
arg	26:39	26:46	3	fmt_ctx
water	26:39	0:0	4	fmt_ctx
arg	26:48	26:66	3	AVMEDIA_TYPE_VIDEO
water	26:48	0:0	4	AVMEDIA_TYPE_VIDEO
arg	26:68	26:70	3	-1
op	26:68	0:0	4	-
water	26:69	0:0	4	1
arg	26:72	26:74	3	-1
op	26:72	0:0	4	-
water	26:73	0:0	4	1
arg	26:76	26:80	3	NULL
water	26:76	0:0	4	NULL
arg	26:82	26:83	3	0
water	26:82	0:0	4	0
water	26:84	0:0	2	;
if	27:4	30:4	2	(video_stream < 0)
cond	27:8	27:23	3	video_stream < 0
water	27:8	0:0	4	video_stream
op	27:21	0:0	4	<
water	27:23	0:0	4	0
stmts	27:26	30:4	3	
water	27:26	0:0	4	{
call	28:6	28:74	4	av_log
arg	28:13	28:17	5	NULL
water	28:13	0:0	6	NULL
arg	28:19	28:31	5	AV_LOG_ERROR
water	28:19	0:0	6	AV_LOG_ERROR
arg	28:33	28:74	5	"Can't find video stream in input file\n"
water	28:33	0:0	6	"Can't find video stream in input file\n"
water	28:75	0:0	4	;
return	29:6	29:15	4	-1
op	29:13	0:0	5	-
water	29:14	0:0	5	1
water	30:4	0:0	4	}
water	31:4	0:0	2	origin_ctx
op	31:15	0:0	2	=
water	31:17	0:0	2	fmt_ctx
op	31:24	0:0	2	->
water	31:26	0:0	2	streams
op	31:33	0:0	2	[
water	31:34	0:0	2	video_stream
op	31:46	0:0	2	]
op	31:47	0:0	2	->
water	31:49	0:0	2	codec
water	31:54	0:0	2	;
water	32:4	0:0	2	codec
op	32:10	0:0	2	=
call	32:12	32:53	2	avcodec_find_decoder
arg	32:33	32:53	3	origin_ctx->codec_id
water	32:33	0:0	4	origin_ctx
op	32:43	0:0	4	->
water	32:45	0:0	4	codec_id
water	32:54	0:0	2	;
if	33:4	36:4	2	(! codec)
cond	33:8	33:9	3	! codec
op	33:8	0:0	4	!
water	33:9	0:0	4	codec
stmts	33:16	36:4	3	
water	33:16	0:0	4	{
call	34:8	34:57	4	av_log
arg	34:15	34:19	5	NULL
water	34:15	0:0	6	NULL
arg	34:21	34:33	5	AV_LOG_ERROR
water	34:21	0:0	6	AV_LOG_ERROR
arg	34:35	34:57	5	"Can't find decoder\n"
water	34:35	0:0	6	"Can't find decoder\n"
water	34:58	0:0	4	;
return	35:8	35:17	4	-1
op	35:15	0:0	5	-
water	35:16	0:0	5	1
water	36:4	0:0	4	}
water	37:4	0:0	2	ctx
op	37:8	0:0	2	=
call	37:10	37:38	2	avcodec_alloc_context3
arg	37:33	37:38	3	codec
water	37:33	0:0	4	codec
water	37:39	0:0	2	;
if	38:4	41:4	2	(! ctx)
cond	38:8	38:9	3	! ctx
op	38:8	0:0	4	!
water	38:9	0:0	4	ctx
stmts	38:14	41:4	3	
water	38:14	0:0	4	{
call	39:8	39:69	4	av_log
arg	39:15	39:19	5	NULL
water	39:15	0:0	6	NULL
arg	39:21	39:33	5	AV_LOG_ERROR
water	39:21	0:0	6	AV_LOG_ERROR
arg	39:35	39:69	5	"Can't allocate decoder context\n"
water	39:35	0:0	6	"Can't allocate decoder context\n"
water	39:70	0:0	4	;
return	40:8	40:30	4	AVERROR(ENOMEM)
call	40:15	40:29	5	AVERROR
arg	40:23	40:29	6	ENOMEM
water	40:23	0:0	7	ENOMEM
water	41:4	0:0	4	}
water	42:4	0:0	2	result
op	42:11	0:0	2	=
call	42:13	42:49	2	avcodec_copy_context
arg	42:34	42:37	3	ctx
water	42:34	0:0	4	ctx
arg	42:39	42:49	3	origin_ctx
water	42:39	0:0	4	origin_ctx
water	42:50	0:0	2	;
if	43:4	46:4	2	(result)
cond	43:8	43:8	3	result
water	43:8	0:0	4	result
stmts	43:16	46:4	3	
water	43:16	0:0	4	{
call	44:8	44:65	4	av_log
arg	44:15	44:19	5	NULL
water	44:15	0:0	6	NULL
arg	44:21	44:33	5	AV_LOG_ERROR
water	44:21	0:0	6	AV_LOG_ERROR
arg	44:35	44:65	5	"Can't copy decoder context\n"
water	44:35	0:0	6	"Can't copy decoder context\n"
water	44:66	0:0	4	;
return	45:8	45:21	4	result
water	45:15	0:0	5	result
water	46:4	0:0	4	}
water	47:4	0:0	2	ctx
op	47:7	0:0	2	->
water	47:9	0:0	2	draw_horiz_band
op	47:25	0:0	2	=
water	47:27	0:0	2	draw_horiz_band
water	47:42	0:0	2	;
water	48:4	0:0	2	ctx
op	48:7	0:0	2	->
water	48:9	0:0	2	thread_count
op	48:22	0:0	2	=
water	48:24	0:0	2	1
water	48:25	0:0	2	;
water	49:4	0:0	2	result
op	49:11	0:0	2	=
call	49:13	49:43	2	avcodec_open2
arg	49:27	49:30	3	ctx
water	49:27	0:0	4	ctx
arg	49:32	49:37	3	codec
water	49:32	0:0	4	codec
arg	49:39	49:43	3	NULL
water	49:39	0:0	4	NULL
water	49:44	0:0	2	;
if	50:4	53:4	2	(result < 0)
cond	50:8	50:17	3	result < 0
water	50:8	0:0	4	result
op	50:15	0:0	4	<
water	50:17	0:0	4	0
stmts	50:20	53:4	3	
water	50:20	0:0	4	{
call	51:8	51:56	4	av_log
arg	51:15	51:18	5	ctx
water	51:15	0:0	6	ctx
arg	51:20	51:32	5	AV_LOG_ERROR
water	51:20	0:0	6	AV_LOG_ERROR
arg	51:34	51:56	5	"Can't open decoder\n"
water	51:34	0:0	6	"Can't open decoder\n"
water	51:57	0:0	4	;
return	52:8	52:21	4	result
water	52:15	0:0	5	result
water	53:4	0:0	4	}
water	54:4	0:0	2	fr
op	54:7	0:0	2	=
call	54:9	54:24	2	av_frame_alloc
water	54:25	0:0	2	;
if	55:4	58:4	2	(! fr)
cond	55:8	55:9	3	! fr
op	55:8	0:0	4	!
water	55:9	0:0	4	fr
stmts	55:13	58:4	3	
water	55:13	0:0	4	{
call	56:8	56:59	4	av_log
arg	56:15	56:19	5	NULL
water	56:15	0:0	6	NULL
arg	56:21	56:33	5	AV_LOG_ERROR
water	56:21	0:0	6	AV_LOG_ERROR
arg	56:35	56:59	5	"Can't allocate frame\n"
water	56:35	0:0	6	"Can't allocate frame\n"
water	56:60	0:0	4	;
return	57:8	57:30	4	AVERROR(ENOMEM)
call	57:15	57:29	5	AVERROR
arg	57:23	57:29	6	ENOMEM
water	57:23	0:0	7	ENOMEM
water	58:4	0:0	4	}
if	59:4	62:4	2	(strcmp (codec -> name ,"flv" ) &&strcmp (codec -> name ,"mpeg4" ) &&strcmp (codec -> name ,"huffyuv" ))
cond	59:8	59:99	3	strcmp (codec -> name ,"flv" ) &&strcmp (codec -> name ,"mpeg4" ) &&strcmp (codec -> name ,"huffyuv" )
call	59:8	59:33	4	strcmp
arg	59:15	59:26	5	codec->name
water	59:15	0:0	6	codec
op	59:20	0:0	6	->
water	59:22	0:0	6	name
arg	59:28	59:33	5	"flv"
water	59:28	0:0	6	"flv"
op	59:35	0:0	4	&&
call	59:38	59:65	4	strcmp
arg	59:45	59:56	5	codec->name
water	59:45	0:0	6	codec
op	59:50	0:0	6	->
water	59:52	0:0	6	name
arg	59:58	59:65	5	"mpeg4"
water	59:58	0:0	6	"mpeg4"
op	59:67	0:0	4	&&
call	59:70	59:99	4	strcmp
arg	59:77	59:88	5	codec->name
water	59:77	0:0	6	codec
op	59:82	0:0	6	->
water	59:84	0:0	6	name
arg	59:90	59:99	5	"huffyuv"
water	59:90	0:0	6	"huffyuv"
stmts	59:102	62:4	3	
water	59:102	0:0	4	{
call	60:8	60:50	4	av_log
arg	60:15	60:19	5	NULL
water	60:15	0:0	6	NULL
arg	60:21	60:33	5	AV_LOG_ERROR
water	60:21	0:0	6	AV_LOG_ERROR
arg	60:35	60:50	5	"Wrong codec\n"
water	60:35	0:0	6	"Wrong codec\n"
water	60:51	0:0	4	;
return	61:8	61:17	4	-1
op	61:15	0:0	5	-
water	61:16	0:0	5	1
water	62:4	0:0	4	}
water	63:4	0:0	2	byte_buffer_size
op	63:21	0:0	2	=
call	63:23	63:89	2	av_image_get_buffer_size
arg	63:48	63:60	3	ctx->pix_fmt
water	63:48	0:0	4	ctx
op	63:51	0:0	4	->
water	63:53	0:0	4	pix_fmt
arg	63:62	63:72	3	ctx->width
water	63:62	0:0	4	ctx
op	63:65	0:0	4	->
water	63:67	0:0	4	width
arg	63:74	63:85	3	ctx->height
water	63:74	0:0	4	ctx
op	63:77	0:0	4	->
water	63:79	0:0	4	height
arg	63:87	63:89	3	32
water	63:87	0:0	4	32
water	63:90	0:0	2	;
water	64:4	0:0	2	byte_buffer
op	64:16	0:0	2	=
call	64:18	64:44	2	av_malloc
arg	64:28	64:44	3	byte_buffer_size
water	64:28	0:0	4	byte_buffer_size
water	64:45	0:0	2	;
if	65:4	68:4	2	(! byte_buffer)
cond	65:8	65:9	3	! byte_buffer
op	65:8	0:0	4	!
water	65:9	0:0	4	byte_buffer
stmts	65:22	68:4	3	
water	65:22	0:0	4	{
call	66:8	66:60	4	av_log
arg	66:15	66:19	5	NULL
water	66:15	0:0	6	NULL
arg	66:21	66:33	5	AV_LOG_ERROR
water	66:21	0:0	6	AV_LOG_ERROR
arg	66:35	66:60	5	"Can't allocate buffer\n"
water	66:35	0:0	6	"Can't allocate buffer\n"
water	66:61	0:0	4	;
return	67:8	67:30	4	AVERROR(ENOMEM)
call	67:15	67:29	5	AVERROR
arg	67:23	67:29	6	ENOMEM
water	67:23	0:0	7	ENOMEM
water	68:4	0:0	4	}
water	69:4	0:0	2	slice_byte_buffer
op	69:22	0:0	2	=
call	69:24	69:50	2	av_malloc
arg	69:34	69:50	3	byte_buffer_size
water	69:34	0:0	4	byte_buffer_size
water	69:51	0:0	2	;
if	70:4	73:4	2	(! slice_byte_buffer)
cond	70:8	70:9	3	! slice_byte_buffer
op	70:8	0:0	4	!
water	70:9	0:0	4	slice_byte_buffer
stmts	70:28	73:4	3	
water	70:28	0:0	4	{
call	71:8	71:60	4	av_log
arg	71:15	71:19	5	NULL
water	71:15	0:0	6	NULL
arg	71:21	71:33	5	AV_LOG_ERROR
water	71:21	0:0	6	AV_LOG_ERROR
arg	71:35	71:60	5	"Can't allocate buffer\n"
water	71:35	0:0	6	"Can't allocate buffer\n"
water	71:61	0:0	4	;
return	72:8	72:30	4	AVERROR(ENOMEM)
call	72:15	72:29	5	AVERROR
arg	72:23	72:29	6	ENOMEM
water	72:23	0:0	7	ENOMEM
water	73:4	0:0	4	}
call	74:4	74:49	2	memset
arg	74:11	74:28	3	slice_byte_buffer
water	74:11	0:0	4	slice_byte_buffer
arg	74:30	74:31	3	0
water	74:30	0:0	4	0
arg	74:33	74:49	3	byte_buffer_size
water	74:33	0:0	4	byte_buffer_size
water	74:50	0:0	2	;
water	75:4	0:0	2	slice_byte_buffer_size
op	75:27	0:0	2	=
water	75:29	0:0	2	byte_buffer_size
water	75:45	0:0	2	;
call	76:4	76:23	2	av_init_packet
arg	76:19	76:23	3	&pkt
op	76:19	0:0	4	&
water	76:20	0:0	4	pkt
water	76:24	0:0	2	;
do	77:4	115:4	2	(! end_of_stream || got_frame)
cond	115:13	115:31	3	! end_of_stream || got_frame
op	115:13	0:0	4	!
water	115:14	0:0	4	end_of_stream
op	115:28	0:0	4	||
water	115:31	0:0	4	got_frame
stmts	77:7	115:4	3	
water	77:7	0:0	4	{
if	78:8	82:8	4	(! end_of_stream)
cond	78:12	78:13	5	! end_of_stream
op	78:12	0:0	6	!
water	78:13	0:0	6	end_of_stream
stmts	78:28	82:8	5	
water	78:28	0:0	6	{
if	79:12	81:12	6	(av_read_frame (fmt_ctx ,& pkt ) < 0)
cond	79:16	79:47	7	av_read_frame (fmt_ctx ,& pkt ) < 0
call	79:16	79:43	8	av_read_frame
arg	79:30	79:37	9	fmt_ctx
water	79:30	0:0	10	fmt_ctx
arg	79:39	79:43	9	&pkt
op	79:39	0:0	10	&
water	79:40	0:0	10	pkt
op	79:45	0:0	8	<
water	79:47	0:0	8	0
stmts	79:50	81:12	7	
water	79:50	0:0	8	{
water	80:16	0:0	8	end_of_stream
op	80:30	0:0	8	=
water	80:32	0:0	8	1
water	80:33	0:0	8	;
water	81:12	0:0	8	}
water	82:8	0:0	6	}
if	83:8	86:8	4	(end_of_stream)
cond	83:12	83:12	5	end_of_stream
water	83:12	0:0	6	end_of_stream
stmts	83:27	86:8	5	
water	83:27	0:0	6	{
water	84:12	0:0	6	pkt
op	84:15	0:0	6	.
water	84:16	0:0	6	data
op	84:21	0:0	6	=
water	84:23	0:0	6	NULL
water	84:27	0:0	6	;
water	85:12	0:0	6	pkt
op	85:15	0:0	6	.
water	85:16	0:0	6	size
op	85:21	0:0	6	=
water	85:23	0:0	6	0
water	85:24	0:0	6	;
water	86:8	0:0	6	}
if	87:8	114:8	4	(pkt . stream_index == video_stream || end_of_stream)
cond	87:12	87:48	5	pkt . stream_index == video_stream || end_of_stream
water	87:12	0:0	6	pkt
op	87:15	0:0	6	.
water	87:16	0:0	6	stream_index
op	87:29	0:0	6	==
water	87:32	0:0	6	video_stream
op	87:45	0:0	6	||
water	87:48	0:0	6	end_of_stream
stmts	87:63	114:8	5	
water	87:63	0:0	6	{
water	88:12	0:0	6	got_frame
op	88:22	0:0	6	=
water	88:24	0:0	6	0
water	88:25	0:0	6	;
water	89:12	0:0	6	result
op	89:19	0:0	6	=
call	89:21	89:68	6	avcodec_decode_video2
arg	89:43	89:46	7	ctx
water	89:43	0:0	8	ctx
arg	89:48	89:50	7	fr
water	89:48	0:0	8	fr
arg	89:52	89:62	7	&got_frame
op	89:52	0:0	8	&
water	89:53	0:0	8	got_frame
arg	89:64	89:68	7	&pkt
op	89:64	0:0	8	&
water	89:65	0:0	8	pkt
water	89:69	0:0	6	;
if	90:12	93:12	6	(result < 0)
cond	90:16	90:25	7	result < 0
water	90:16	0:0	8	result
op	90:23	0:0	8	<
water	90:25	0:0	8	0
stmts	90:28	93:12	7	
water	90:28	0:0	8	{
call	91:16	91:67	8	av_log
arg	91:23	91:27	9	NULL
water	91:23	0:0	10	NULL
arg	91:29	91:41	9	AV_LOG_ERROR
water	91:29	0:0	10	AV_LOG_ERROR
arg	91:43	91:67	9	"Error decoding frame\n"
water	91:43	0:0	10	"Error decoding frame\n"
water	91:68	0:0	8	;
return	92:16	92:29	8	result
water	92:23	0:0	9	result
water	93:12	0:0	8	}
if	94:12	111:12	6	(got_frame)
cond	94:16	94:16	7	got_frame
water	94:16	0:0	8	got_frame
stmts	94:27	111:12	7	
water	94:27	0:0	8	{
water	95:16	0:0	8	number_of_written_bytes
op	95:40	0:0	8	=
call	95:42	97:80	8	av_image_copy_to_buffer
arg	95:66	95:77	9	byte_buffer
water	95:66	0:0	10	byte_buffer
arg	95:79	95:95	9	byte_buffer_size
water	95:79	0:0	10	byte_buffer_size
arg	96:40	96:72	9	(constuint8_t*const*)fr->data
water	96:40	0:0	10	(
water	96:41	0:0	10	const
water	96:47	0:0	10	uint8_t
op	96:54	0:0	10	*
water	96:56	0:0	10	const
op	96:62	0:0	10	*
water	96:63	0:0	10	)
water	96:64	0:0	10	fr
op	96:66	0:0	10	->
water	96:68	0:0	10	data
arg	96:74	96:99	9	(constint*)fr->linesize
water	96:74	0:0	10	(
water	96:75	0:0	10	const
water	96:81	0:0	10	int
op	96:84	0:0	10	*
water	96:85	0:0	10	)
water	96:87	0:0	10	fr
op	96:89	0:0	10	->
water	96:91	0:0	10	linesize
arg	97:40	97:52	9	ctx->pix_fmt
water	97:40	0:0	10	ctx
op	97:43	0:0	10	->
water	97:45	0:0	10	pix_fmt
arg	97:54	97:64	9	ctx->width
water	97:54	0:0	10	ctx
op	97:57	0:0	10	->
water	97:59	0:0	10	width
arg	97:66	97:77	9	ctx->height
water	97:66	0:0	10	ctx
op	97:69	0:0	10	->
water	97:71	0:0	10	height
arg	97:79	97:80	9	1
water	97:79	0:0	10	1
water	97:81	0:0	8	;
if	98:16	101:16	8	(number_of_written_bytes < 0)
cond	98:20	98:46	9	number_of_written_bytes < 0
water	98:20	0:0	10	number_of_written_bytes
op	98:44	0:0	10	<
water	98:46	0:0	10	0
stmts	98:49	101:16	9	
water	98:49	0:0	10	{
call	99:20	99:77	10	av_log
arg	99:27	99:31	11	NULL
water	99:27	0:0	12	NULL
arg	99:33	99:45	11	AV_LOG_ERROR
water	99:33	0:0	12	AV_LOG_ERROR
arg	99:47	99:77	11	"Can't copy image to buffer\n"
water	99:47	0:0	12	"Can't copy image to buffer\n"
water	99:78	0:0	10	;
return	100:20	100:50	10	number_of_written_bytes
water	100:27	0:0	11	number_of_written_bytes
water	101:16	0:0	10	}
if	102:16	105:16	8	(draw_horiz_band_called == 0)
cond	102:20	102:46	9	draw_horiz_band_called == 0
water	102:20	0:0	10	draw_horiz_band_called
op	102:43	0:0	10	==
water	102:46	0:0	10	0
stmts	102:49	105:16	9	
water	102:49	0:0	10	{
call	103:20	103:87	10	av_log
arg	103:27	103:31	11	NULL
water	103:27	0:0	12	NULL
arg	103:33	103:45	11	AV_LOG_ERROR
water	103:33	0:0	12	AV_LOG_ERROR
arg	103:47	103:87	11	"draw_horiz_band haven't been called!\n"
water	103:47	0:0	12	"draw_horiz_band haven't been called!\n"
water	103:88	0:0	10	;
return	104:20	104:29	10	-1
op	104:27	0:0	11	-
water	104:28	0:0	11	1
water	105:16	0:0	10	}
if	106:16	110:16	8	(av_adler32_update (0 ,( const uint8_t * ) byte_buffer ,number_of_written_bytes ) !=av_adler32_update (0 ,( const uint8_t * ) slice_byte_buffer ,number_of_written_bytes ))
cond	106:20	107:99	9	av_adler32_update (0 ,( const uint8_t * ) byte_buffer ,number_of_written_bytes ) !=av_adler32_update (0 ,( const uint8_t * ) slice_byte_buffer ,number_of_written_bytes )
call	106:20	106:93	10	av_adler32_update
arg	106:38	106:39	11	0
water	106:38	0:0	12	0
arg	106:41	106:68	11	(constuint8_t*)byte_buffer
water	106:41	0:0	12	(
water	106:42	0:0	12	const
water	106:48	0:0	12	uint8_t
op	106:55	0:0	12	*
water	106:56	0:0	12	)
water	106:57	0:0	12	byte_buffer
arg	106:70	106:93	11	number_of_written_bytes
water	106:70	0:0	12	number_of_written_bytes
op	106:95	0:0	10	!=
call	107:20	107:99	10	av_adler32_update
arg	107:38	107:39	11	0
water	107:38	0:0	12	0
arg	107:41	107:74	11	(constuint8_t*)slice_byte_buffer
water	107:41	0:0	12	(
water	107:42	0:0	12	const
water	107:48	0:0	12	uint8_t
op	107:55	0:0	12	*
water	107:56	0:0	12	)
water	107:57	0:0	12	slice_byte_buffer
arg	107:76	107:99	11	number_of_written_bytes
water	107:76	0:0	12	number_of_written_bytes
stmts	107:102	110:16	9	
water	107:102	0:0	10	{
call	108:20	108:116	10	av_log
arg	108:27	108:31	11	NULL
water	108:27	0:0	12	NULL
arg	108:33	108:45	11	AV_LOG_ERROR
water	108:33	0:0	12	AV_LOG_ERROR
arg	108:47	108:116	11	"Decoded frames with and without draw_horiz_band are not the same!\n"
water	108:47	0:0	12	"Decoded frames with and without draw_horiz_band are not the same!\n"
water	108:117	0:0	10	;
return	109:20	109:29	10	-1
op	109:27	0:0	11	-
water	109:28	0:0	11	1
water	110:16	0:0	10	}
water	111:12	0:0	8	}
call	112:12	112:31	6	av_free_packet
arg	112:27	112:31	7	&pkt
op	112:27	0:0	8	&
water	112:28	0:0	8	pkt
water	112:32	0:0	6	;
call	113:12	113:31	6	av_init_packet
arg	113:27	113:31	7	&pkt
op	113:27	0:0	8	&
water	113:28	0:0	8	pkt
water	113:32	0:0	6	;
water	114:8	0:0	6	}
water	115:4	0:0	4	}
water	115:41	0:0	2	;
call	116:4	116:23	2	av_free_packet
arg	116:19	116:23	3	&pkt
op	116:19	0:0	4	&
water	116:20	0:0	4	pkt
water	116:24	0:0	2	;
call	117:4	117:21	2	av_frame_free
arg	117:18	117:21	3	&fr
op	117:18	0:0	4	&
water	117:19	0:0	4	fr
water	117:22	0:0	2	;
call	118:4	118:21	2	avcodec_close
arg	118:18	118:21	3	ctx
water	118:18	0:0	4	ctx
water	118:22	0:0	2	;
call	119:4	119:33	2	avformat_close_input
arg	119:25	119:33	3	&fmt_ctx
op	119:25	0:0	4	&
water	119:26	0:0	4	fmt_ctx
water	119:34	0:0	2	;
call	120:4	120:29	2	avcodec_free_context
arg	120:25	120:29	3	&ctx
op	120:25	0:0	4	&
water	120:26	0:0	4	ctx
water	120:30	0:0	2	;
call	121:4	121:25	2	av_freep
arg	121:13	121:25	3	&byte_buffer
op	121:13	0:0	4	&
water	121:14	0:0	4	byte_buffer
water	121:26	0:0	2	;
call	122:4	122:31	2	av_freep
arg	122:13	122:31	3	&slice_byte_buffer
op	122:13	0:0	4	&
water	122:14	0:0	4	slice_byte_buffer
water	122:32	0:0	2	;
return	123:4	123:12	2	0
water	123:11	0:0	3	0
