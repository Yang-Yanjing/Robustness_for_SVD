func	1:0	30:0	0	static void	search_for_pns
params	1:26	0:0	1	
param	1:27	1:43	2	AACEncContext *	s
param	1:45	1:66	2	AVCodecContext *	avctx
param	1:68	1:93	2	SingleChannelElement *	sce
stmnts	0:0	29:4	1	
decl	3:4	3:27	2	int	start
op	3:14	0:0	2	=
water	3:16	0:0	2	0
water	3:17	0:0	2	,
decl	3:4	3:27	2	int	w
water	3:20	0:0	2	,
decl	3:4	3:27	2	int	w2
water	3:24	0:0	2	,
decl	3:4	3:27	2	int	g
decl	4:4	4:34	2	const float	lambda
op	4:23	0:0	2	=
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	lambda
decl	5:4	5:82	2	const float	freq_mult
op	5:26	0:0	2	=
water	5:28	0:0	2	avctx
op	5:33	0:0	2	->
water	5:35	0:0	2	sample_rate
op	5:46	0:0	2	/
water	5:47	0:0	2	(
water	5:48	0:0	2	1024
op	5:52	0:0	2	.
water	5:53	0:0	2	0
water	5:54	0:0	2	f
op	5:55	0:0	2	/
water	5:56	0:0	2	sce
op	5:59	0:0	2	->
water	5:61	0:0	2	ics
op	5:64	0:0	2	.
water	5:65	0:0	2	num_windows
water	5:76	0:0	2	)
op	5:77	0:0	2	/
water	5:78	0:0	2	2
op	5:79	0:0	2	.
water	5:80	0:0	2	0
water	5:81	0:0	2	f
decl	6:4	6:72	2	const float	spread_threshold
op	6:33	0:0	2	=
water	6:35	0:0	2	NOISE_SPREAD_THRESHOLD
op	6:57	0:0	2	*
water	6:58	0:0	2	(
water	6:59	0:0	2	lambda
op	6:65	0:0	2	/
water	6:66	0:0	2	120
op	6:69	0:0	2	.
water	6:70	0:0	2	f
water	6:71	0:0	2	)
decl	7:4	7:56	2	const float	thr_mult
op	7:25	0:0	2	=
water	7:27	0:0	2	NOISE_LAMBDA_NUMERATOR
op	7:49	0:0	2	/
water	7:50	0:0	2	lambda
for	8:4	29:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	8:9	8:14	3	w = 0 ;
water	8:9	0:0	4	w
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:29	3	w < sce -> ics . num_windows
water	8:16	0:0	4	w
op	8:18	0:0	4	<
water	8:20	0:0	4	sce
op	8:23	0:0	4	->
water	8:25	0:0	4	ics
op	8:28	0:0	4	.
water	8:29	0:0	4	num_windows
forexpr	8:42	8:67	3	w += sce -> ics . group_len [ w ]
water	8:42	0:0	4	w
op	8:44	0:0	4	+=
water	8:47	0:0	4	sce
op	8:50	0:0	4	->
water	8:52	0:0	4	ics
op	8:55	0:0	4	.
water	8:56	0:0	4	group_len
op	8:65	0:0	4	[
water	8:66	0:0	4	w
op	8:67	0:0	4	]
stmts	8:70	29:4	3	
water	8:70	0:0	4	{
water	9:8	0:0	4	start
op	9:14	0:0	4	=
water	9:16	0:0	4	0
water	9:17	0:0	4	;
for	10:8	28:8	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	10:13	10:18	5	g = 0 ;
water	10:13	0:0	6	g
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:21	10:34	5	g < sce -> ics . num_swb
water	10:21	0:0	6	g
op	10:23	0:0	6	<
water	10:25	0:0	6	sce
op	10:28	0:0	6	->
water	10:30	0:0	6	ics
op	10:33	0:0	6	.
water	10:34	0:0	6	num_swb
forexpr	10:43	10:44	5	g ++
water	10:43	0:0	6	g
op	10:44	0:0	6	++
stmts	10:48	28:8	5	
water	10:48	0:0	6	{
if	11:12	26:12	6	(start * freq_mult > NOISE_LOW_LIMIT * ( lambda / 170 . 0 f ))
cond	11:16	11:64	7	start * freq_mult > NOISE_LOW_LIMIT * ( lambda / 170 . 0 f )
water	11:16	0:0	8	start
op	11:21	0:0	8	*
water	11:22	0:0	8	freq_mult
op	11:32	0:0	8	>
water	11:34	0:0	8	NOISE_LOW_LIMIT
op	11:49	0:0	8	*
water	11:50	0:0	8	(
water	11:51	0:0	8	lambda
op	11:57	0:0	8	/
water	11:58	0:0	8	170
op	11:61	0:0	8	.
water	11:62	0:0	8	0
water	11:63	0:0	8	f
water	11:64	0:0	8	)
stmts	11:67	26:12	7	
water	11:67	0:0	8	{
decl	12:16	12:68	8	float	energy
op	12:29	0:0	8	=
water	12:31	0:0	8	0
op	12:32	0:0	8	.
water	12:33	0:0	8	0
water	12:34	0:0	8	f
water	12:35	0:0	8	,
decl	12:16	12:68	8	float	threshold
op	12:47	0:0	8	=
water	12:49	0:0	8	0
op	12:50	0:0	8	.
water	12:51	0:0	8	0
water	12:52	0:0	8	f
water	12:53	0:0	8	,
decl	12:16	12:68	8	float	spread
op	12:62	0:0	8	=
water	12:64	0:0	8	0
op	12:65	0:0	8	.
water	12:66	0:0	8	0
water	12:67	0:0	8	f
for	13:16	18:16	8	(w2 = 0 ;w2 < sce -> ics . group_len [ w ];w2 ++)
forinit	13:21	13:27	9	w2 = 0 ;
water	13:21	0:0	10	w2
op	13:24	0:0	10	=
water	13:26	0:0	10	0
water	13:27	0:0	10	;
cond	13:29	13:54	9	w2 < sce -> ics . group_len [ w ]
water	13:29	0:0	10	w2
op	13:32	0:0	10	<
water	13:34	0:0	10	sce
op	13:37	0:0	10	->
water	13:39	0:0	10	ics
op	13:42	0:0	10	.
water	13:43	0:0	10	group_len
op	13:52	0:0	10	[
water	13:53	0:0	10	w
op	13:54	0:0	10	]
forexpr	13:57	13:59	9	w2 ++
water	13:57	0:0	10	w2
op	13:59	0:0	10	++
stmts	13:63	18:16	9	
water	13:63	0:0	10	{
decl	14:20	14:89	10	FFPsyBand	*band
op	14:36	0:0	10	=
op	14:38	0:0	10	&
water	14:39	0:0	10	s
op	14:40	0:0	10	->
water	14:42	0:0	10	psy
op	14:45	0:0	10	.
water	14:46	0:0	10	ch
op	14:48	0:0	10	[
water	14:49	0:0	10	s
op	14:50	0:0	10	->
water	14:52	0:0	10	cur_channel
op	14:63	0:0	10	+
water	14:64	0:0	10	0
op	14:65	0:0	10	]
op	14:66	0:0	10	.
water	14:67	0:0	10	psy_bands
op	14:76	0:0	10	[
water	14:77	0:0	10	(
water	14:78	0:0	10	w
op	14:79	0:0	10	+
water	14:80	0:0	10	w2
water	14:82	0:0	10	)
op	14:83	0:0	10	*
water	14:84	0:0	10	16
op	14:86	0:0	10	+
water	14:87	0:0	10	g
op	14:88	0:0	10	]
water	15:20	0:0	10	energy
op	15:27	0:0	10	+=
water	15:30	0:0	10	band
op	15:34	0:0	10	->
water	15:36	0:0	10	energy
water	15:42	0:0	10	;
water	16:20	0:0	10	threshold
op	16:30	0:0	10	+=
water	16:33	0:0	10	band
op	16:37	0:0	10	->
water	16:39	0:0	10	threshold
water	16:48	0:0	10	;
water	17:20	0:0	10	spread
op	17:27	0:0	10	+=
water	17:30	0:0	10	band
op	17:34	0:0	10	->
water	17:36	0:0	10	spread
water	17:42	0:0	10	;
water	18:16	0:0	10	}
if	19:16	25:16	8	(spread > spread_threshold * sce -> ics . group_len [ w ] && ( ( sce -> zeroes [ w * 16 + g ] && energy >= threshold ) || energy < threshold * thr_mult * sce -> ics . group_len [ w ] ))
cond	19:20	21:69	9	spread > spread_threshold * sce -> ics . group_len [ w ] && ( ( sce -> zeroes [ w * 16 + g ] && energy >= threshold ) || energy < threshold * thr_mult * sce -> ics . group_len [ w ] )
water	19:20	0:0	10	spread
op	19:27	0:0	10	>
water	19:29	0:0	10	spread_threshold
op	19:45	0:0	10	*
water	19:46	0:0	10	sce
op	19:49	0:0	10	->
water	19:51	0:0	10	ics
op	19:54	0:0	10	.
water	19:55	0:0	10	group_len
op	19:64	0:0	10	[
water	19:65	0:0	10	w
op	19:66	0:0	10	]
op	19:68	0:0	10	&&
water	20:20	0:0	10	(
water	20:21	0:0	10	(
water	20:22	0:0	10	sce
op	20:25	0:0	10	->
water	20:27	0:0	10	zeroes
op	20:33	0:0	10	[
water	20:34	0:0	10	w
op	20:35	0:0	10	*
water	20:36	0:0	10	16
op	20:38	0:0	10	+
water	20:39	0:0	10	g
op	20:40	0:0	10	]
op	20:42	0:0	10	&&
water	20:45	0:0	10	energy
op	20:52	0:0	10	>=
water	20:55	0:0	10	threshold
water	20:64	0:0	10	)
op	20:66	0:0	10	||
water	21:20	0:0	10	energy
op	21:27	0:0	10	<
water	21:29	0:0	10	threshold
op	21:38	0:0	10	*
water	21:39	0:0	10	thr_mult
op	21:47	0:0	10	*
water	21:48	0:0	10	sce
op	21:51	0:0	10	->
water	21:53	0:0	10	ics
op	21:56	0:0	10	.
water	21:57	0:0	10	group_len
op	21:66	0:0	10	[
water	21:67	0:0	10	w
op	21:68	0:0	10	]
water	21:69	0:0	10	)
stmts	21:72	25:16	9	
water	21:72	0:0	10	{
water	22:20	0:0	10	sce
op	22:23	0:0	10	->
water	22:25	0:0	10	band_type
op	22:34	0:0	10	[
water	22:35	0:0	10	w
op	22:36	0:0	10	*
water	22:37	0:0	10	16
op	22:39	0:0	10	+
water	22:40	0:0	10	g
op	22:41	0:0	10	]
op	22:43	0:0	10	=
water	22:45	0:0	10	NOISE_BT
water	22:53	0:0	10	;
water	23:20	0:0	10	sce
op	23:23	0:0	10	->
water	23:25	0:0	10	pns_ener
op	23:33	0:0	10	[
water	23:34	0:0	10	w
op	23:35	0:0	10	*
water	23:36	0:0	10	16
op	23:38	0:0	10	+
water	23:39	0:0	10	g
op	23:40	0:0	10	]
op	23:42	0:0	10	=
water	23:44	0:0	10	energy
op	23:51	0:0	10	/
water	23:53	0:0	10	sce
op	23:56	0:0	10	->
water	23:58	0:0	10	ics
op	23:61	0:0	10	.
water	23:62	0:0	10	group_len
op	23:71	0:0	10	[
water	23:72	0:0	10	w
op	23:73	0:0	10	]
water	23:74	0:0	10	;
water	24:20	0:0	10	sce
op	24:23	0:0	10	->
water	24:25	0:0	10	zeroes
op	24:31	0:0	10	[
water	24:32	0:0	10	w
op	24:33	0:0	10	*
water	24:34	0:0	10	16
op	24:36	0:0	10	+
water	24:37	0:0	10	g
op	24:38	0:0	10	]
op	24:40	0:0	10	=
water	24:42	0:0	10	0
water	24:43	0:0	10	;
water	25:16	0:0	10	}
water	26:12	0:0	8	}
water	27:12	0:0	6	start
op	27:18	0:0	6	+=
water	27:21	0:0	6	sce
op	27:24	0:0	6	->
water	27:26	0:0	6	ics
op	27:29	0:0	6	.
water	27:30	0:0	6	swb_sizes
op	27:39	0:0	6	[
water	27:40	0:0	6	g
op	27:41	0:0	6	]
water	27:42	0:0	6	;
water	28:8	0:0	6	}
water	29:4	0:0	4	}
