func	1:0	72:0	0	int	av_parse_color
params	1:18	0:0	1	
param	1:19	1:38	2	uint8_t *	rgba_color
param	1:40	1:64	2	const char *	color_string
param	1:66	1:74	2	int	slen
param	2:19	2:32	2	void *	log_ctx
stmnts	0:0	71:12	1	
decl	4:4	4:34	2	char	*tail
water	4:14	0:0	2	,
decl	4:4	4:34	2	char	color_string2[128]
decl	5:4	5:27	2	const ColorEntry	*entry
decl	6:4	6:27	2	int	len
water	6:11	0:0	2	,
decl	6:4	6:27	2	int	hex_offset
op	6:24	0:0	2	=
water	6:26	0:0	2	0
if	7:4	9:4	2	(color_string [ 0 ] == '#')
cond	7:8	7:27	3	color_string [ 0 ] == '#'
water	7:8	0:0	4	color_string
op	7:20	0:0	4	[
water	7:21	0:0	4	0
op	7:22	0:0	4	]
op	7:24	0:0	4	==
water	7:27	0:0	4	'#'
stmts	7:32	9:4	3	
water	7:32	0:0	4	{
water	8:8	0:0	4	hex_offset
op	8:19	0:0	4	=
water	8:21	0:0	4	1
water	8:22	0:0	4	;
water	9:4	0:0	4	}
else	9:6	10:22	2
stmts	9:11	10:22	3	
if	9:11	10:22	4	(!strncmp (color_string ,"0x" ,2 ))
cond	9:15	9:45	5	!strncmp (color_string ,"0x" ,2 )
op	9:15	0:0	6	!
call	9:16	9:45	6	strncmp
arg	9:24	9:36	7	color_string
water	9:24	0:0	8	color_string
arg	9:38	9:42	7	"0x"
water	9:38	0:0	8	"0x"
arg	9:44	9:45	7	2
water	9:44	0:0	8	2
stmts	10:8	10:22	5	
water	10:8	0:0	6	hex_offset
op	10:19	0:0	6	=
water	10:21	0:0	6	2
water	10:22	0:0	6	;
if	11:4	12:35	2	(slen < 0)
cond	11:8	11:15	3	slen < 0
water	11:8	0:0	4	slen
op	11:13	0:0	4	<
water	11:15	0:0	4	0
stmts	12:8	12:35	3	
water	12:8	0:0	4	slen
op	12:13	0:0	4	=
call	12:15	12:34	4	strlen
arg	12:22	12:34	5	color_string
water	12:22	0:0	6	color_string
water	12:35	0:0	4	;
call	13:4	14:62	2	av_strlcpy
arg	13:15	13:28	3	color_string2
water	13:15	0:0	4	color_string2
arg	13:30	13:55	3	color_string+hex_offset
water	13:30	0:0	4	color_string
op	13:43	0:0	4	+
water	13:45	0:0	4	hex_offset
arg	14:15	14:62	3	FFMIN(slen-hex_offset+1,sizeof(color_string2))
call	14:15	14:61	4	FFMIN
arg	14:21	14:38	5	slen-hex_offset+1
water	14:21	0:0	6	slen
op	14:25	0:0	6	-
water	14:26	0:0	6	hex_offset
op	14:36	0:0	6	+
water	14:37	0:0	6	1
arg	14:40	14:61	5	sizeof(color_string2)
op	14:40	0:0	6	sizeof
water	14:46	0:0	6	(
water	14:47	0:0	6	color_string2
water	14:60	0:0	6	)
water	14:63	0:0	2	;
if	15:4	16:19	2	(( tail =strchr (color_string2 ,ALPHA_SEP ) ))
cond	15:8	15:48	3	( tail =strchr (color_string2 ,ALPHA_SEP ) )
water	15:8	0:0	4	(
water	15:9	0:0	4	tail
op	15:14	0:0	4	=
call	15:16	15:47	4	strchr
arg	15:23	15:36	5	color_string2
water	15:23	0:0	6	color_string2
arg	15:38	15:47	5	ALPHA_SEP
water	15:38	0:0	6	ALPHA_SEP
water	15:48	0:0	4	)
stmts	16:8	16:19	3	
op	16:8	0:0	4	*
water	16:9	0:0	4	tail
op	16:13	0:0	4	++
op	16:16	0:0	4	=
water	16:18	0:0	4	0
water	16:19	0:0	4	;
water	17:4	0:0	2	len
op	17:8	0:0	2	=
call	17:10	17:30	2	strlen
arg	17:17	17:30	3	color_string2
water	17:17	0:0	4	color_string2
water	17:31	0:0	2	;
water	18:4	0:0	2	rgba_color
op	18:14	0:0	2	[
water	18:15	0:0	2	3
op	18:16	0:0	2	]
op	18:18	0:0	2	=
water	18:20	0:0	2	255
water	18:23	0:0	2	;
if	19:4	25:4	2	(!av_strcasecmp (color_string2 ,"random" ) || !av_strcasecmp (color_string2 ,"bikeshed" ))
cond	19:8	19:91	3	!av_strcasecmp (color_string2 ,"random" ) || !av_strcasecmp (color_string2 ,"bikeshed" )
op	19:8	0:0	4	!
call	19:9	19:46	4	av_strcasecmp
arg	19:23	19:36	5	color_string2
water	19:23	0:0	6	color_string2
arg	19:38	19:46	5	"random"
water	19:38	0:0	6	"random"
op	19:48	0:0	4	||
op	19:51	0:0	4	!
call	19:52	19:91	4	av_strcasecmp
arg	19:66	19:79	5	color_string2
water	19:66	0:0	6	color_string2
arg	19:81	19:91	5	"bikeshed"
water	19:81	0:0	6	"bikeshed"
stmts	19:94	25:4	3	
water	19:94	0:0	4	{
decl	20:8	20:39	4	int	rgba
op	20:17	0:0	4	=
call	20:19	20:38	5	av_get_random_seed
water	21:8	0:0	4	rgba_color
op	21:18	0:0	4	[
water	21:19	0:0	4	0
op	21:20	0:0	4	]
op	21:22	0:0	4	=
water	21:24	0:0	4	rgba
op	21:29	0:0	4	>>
water	21:32	0:0	4	24
water	21:34	0:0	4	;
water	22:8	0:0	4	rgba_color
op	22:18	0:0	4	[
water	22:19	0:0	4	1
op	22:20	0:0	4	]
op	22:22	0:0	4	=
water	22:24	0:0	4	rgba
op	22:29	0:0	4	>>
water	22:32	0:0	4	16
water	22:34	0:0	4	;
water	23:8	0:0	4	rgba_color
op	23:18	0:0	4	[
water	23:19	0:0	4	2
op	23:20	0:0	4	]
op	23:22	0:0	4	=
water	23:24	0:0	4	rgba
op	23:29	0:0	4	>>
water	23:32	0:0	4	8
water	23:33	0:0	4	;
water	24:8	0:0	4	rgba_color
op	24:18	0:0	4	[
water	24:19	0:0	4	3
op	24:20	0:0	4	]
op	24:22	0:0	4	=
water	24:24	0:0	4	rgba
water	24:28	0:0	4	;
water	25:4	0:0	4	}
else	25:6	40:4	2
stmts	25:11	40:4	3	
if	25:11	40:4	4	(hex_offset ||strspn (color_string2 ,"0123456789ABCDEFabcdef" ) == len)
cond	25:15	26:66	5	hex_offset ||strspn (color_string2 ,"0123456789ABCDEFabcdef" ) == len
water	25:15	0:0	6	hex_offset
op	25:26	0:0	6	||
call	26:15	26:61	6	strspn
arg	26:22	26:35	7	color_string2
water	26:22	0:0	8	color_string2
arg	26:37	26:61	7	"0123456789ABCDEFabcdef"
water	26:37	0:0	8	"0123456789ABCDEFabcdef"
op	26:63	0:0	6	==
water	26:66	0:0	6	len
stmts	26:71	40:4	5	
water	26:71	0:0	6	{
decl	27:8	27:18	6	char	*tail
decl	28:8	28:61	6	unsigned int	rgba
op	28:26	0:0	6	=
call	28:28	28:60	7	strtoul
arg	28:36	28:49	8	color_string2
water	28:36	0:0	9	color_string2
arg	28:51	28:56	8	&tail
op	28:51	0:0	9	&
water	28:52	0:0	9	tail
arg	28:58	28:60	8	16
water	28:58	0:0	9	16
if	29:8	32:8	6	(* tail || ( len != 6 && len != 8 ))
cond	29:12	29:42	7	* tail || ( len != 6 && len != 8 )
op	29:12	0:0	8	*
water	29:13	0:0	8	tail
op	29:18	0:0	8	||
water	29:21	0:0	8	(
water	29:22	0:0	8	len
op	29:26	0:0	8	!=
water	29:29	0:0	8	6
op	29:31	0:0	8	&&
water	29:34	0:0	8	len
op	29:38	0:0	8	!=
water	29:41	0:0	8	8
water	29:42	0:0	8	)
stmts	29:45	32:8	7	
water	29:45	0:0	8	{
call	30:12	30:100	8	av_log
arg	30:19	30:26	9	log_ctx
water	30:19	0:0	10	log_ctx
arg	30:28	30:40	9	AV_LOG_ERROR
water	30:28	0:0	10	AV_LOG_ERROR
arg	30:42	30:85	9	"Invalid 0xRRGGBB[AA] color string: '%s'\n"
water	30:42	0:0	10	"Invalid 0xRRGGBB[AA] color string: '%s'\n"
arg	30:87	30:100	9	color_string2
water	30:87	0:0	10	color_string2
water	30:101	0:0	8	;
return	31:12	31:34	8	AVERROR(EINVAL)
call	31:19	31:33	9	AVERROR
arg	31:27	31:33	10	EINVAL
water	31:27	0:0	11	EINVAL
water	32:8	0:0	8	}
if	33:8	36:8	6	(len == 8)
cond	33:12	33:19	7	len == 8
water	33:12	0:0	8	len
op	33:16	0:0	8	==
water	33:19	0:0	8	8
stmts	33:22	36:8	7	
water	33:22	0:0	8	{
water	34:12	0:0	8	rgba_color
op	34:22	0:0	8	[
water	34:23	0:0	8	3
op	34:24	0:0	8	]
op	34:26	0:0	8	=
water	34:28	0:0	8	rgba
water	34:32	0:0	8	;
water	35:12	0:0	8	rgba
op	35:17	0:0	8	>>=
water	35:21	0:0	8	8
water	35:22	0:0	8	;
water	36:8	0:0	8	}
water	37:8	0:0	6	rgba_color
op	37:18	0:0	6	[
water	37:19	0:0	6	0
op	37:20	0:0	6	]
op	37:22	0:0	6	=
water	37:24	0:0	6	rgba
op	37:29	0:0	6	>>
water	37:32	0:0	6	16
water	37:34	0:0	6	;
water	38:8	0:0	6	rgba_color
op	38:18	0:0	6	[
water	38:19	0:0	6	1
op	38:20	0:0	6	]
op	38:22	0:0	6	=
water	38:24	0:0	6	rgba
op	38:29	0:0	6	>>
water	38:32	0:0	6	8
water	38:33	0:0	6	;
water	39:8	0:0	6	rgba_color
op	39:18	0:0	6	[
water	39:19	0:0	6	2
op	39:20	0:0	6	]
op	39:22	0:0	6	=
water	39:24	0:0	6	rgba
water	39:28	0:0	6	;
water	40:4	0:0	6	}
else	40:6	51:4	2
stmts	40:11	51:4	3	
water	40:11	0:0	4	{
water	41:8	0:0	4	entry
op	41:14	0:0	4	=
call	41:16	45:43	4	bsearch
arg	41:24	41:37	5	color_string2
water	41:24	0:0	6	color_string2
arg	42:24	42:35	5	color_table
water	42:24	0:0	6	color_table
arg	43:24	43:51	5	FF_ARRAY_ELEMS(color_table)
call	43:24	43:50	6	FF_ARRAY_ELEMS
arg	43:39	43:50	7	color_table
water	43:39	0:0	8	color_table
arg	44:24	44:42	5	sizeof(ColorEntry)
op	44:24	0:0	6	sizeof
water	44:30	0:0	6	(
water	44:31	0:0	6	ColorEntry
water	44:41	0:0	6	)
arg	45:24	45:43	5	color_table_compare
water	45:24	0:0	6	color_table_compare
water	45:44	0:0	4	;
if	46:8	49:8	4	(! entry)
cond	46:12	46:13	5	! entry
op	46:12	0:0	6	!
water	46:13	0:0	6	entry
stmts	46:20	49:8	5	
water	46:20	0:0	6	{
call	47:12	47:83	6	av_log
arg	47:19	47:26	7	log_ctx
water	47:19	0:0	8	log_ctx
arg	47:28	47:40	7	AV_LOG_ERROR
water	47:28	0:0	8	AV_LOG_ERROR
arg	47:42	47:68	7	"Cannot find color '%s'\n"
water	47:42	0:0	8	"Cannot find color '%s'\n"
arg	47:70	47:83	7	color_string2
water	47:70	0:0	8	color_string2
water	47:84	0:0	6	;
return	48:12	48:34	6	AVERROR(EINVAL)
call	48:19	48:33	7	AVERROR
arg	48:27	48:33	8	EINVAL
water	48:27	0:0	9	EINVAL
water	49:8	0:0	6	}
call	50:8	50:46	4	memcpy
arg	50:15	50:25	5	rgba_color
water	50:15	0:0	6	rgba_color
arg	50:27	50:43	5	entry->rgb_color
water	50:27	0:0	6	entry
op	50:32	0:0	6	->
water	50:34	0:0	6	rgb_color
arg	50:45	50:46	5	3
water	50:45	0:0	6	3
water	50:47	0:0	4	;
water	51:4	0:0	4	}
if	52:4	70:4	2	(tail)
cond	52:8	52:8	3	tail
water	52:8	0:0	4	tail
stmts	52:14	70:4	3	
water	52:14	0:0	4	{
decl	53:8	53:20	4	double	alpha
decl	54:8	54:39	4	const char	*alpha_string
op	54:33	0:0	4	=
water	54:35	0:0	4	tail
if	55:8	57:8	4	(!strncmp (alpha_string ,"0x" ,2 ))
cond	55:12	55:42	5	!strncmp (alpha_string ,"0x" ,2 )
op	55:12	0:0	6	!
call	55:13	55:42	6	strncmp
arg	55:21	55:33	7	alpha_string
water	55:21	0:0	8	alpha_string
arg	55:35	55:39	7	"0x"
water	55:35	0:0	8	"0x"
arg	55:41	55:42	7	2
water	55:41	0:0	8	2
stmts	55:45	57:8	5	
water	55:45	0:0	6	{
water	56:12	0:0	6	alpha
op	56:18	0:0	6	=
call	56:20	56:51	6	strtoul
arg	56:28	56:40	7	alpha_string
water	56:28	0:0	8	alpha_string
arg	56:42	56:47	7	&tail
op	56:42	0:0	8	&
water	56:43	0:0	8	tail
arg	56:49	56:51	7	16
water	56:49	0:0	8	16
water	56:52	0:0	6	;
water	57:8	0:0	6	}
else	57:10	63:8	4
stmts	57:15	63:8	5	
water	57:15	0:0	6	{
decl	58:12	58:59	6	double	norm_alpha
op	58:30	0:0	6	=
call	58:32	58:58	7	strtod
arg	58:39	58:51	8	alpha_string
water	58:39	0:0	9	alpha_string
arg	58:53	58:58	8	&tail
op	58:53	0:0	9	&
water	58:54	0:0	9	tail
if	59:12	60:27	6	(norm_alpha < 0 . 0 || norm_alpha > 1 . 0)
cond	59:16	59:51	7	norm_alpha < 0 . 0 || norm_alpha > 1 . 0
water	59:16	0:0	8	norm_alpha
op	59:27	0:0	8	<
water	59:29	0:0	8	0
op	59:30	0:0	8	.
water	59:31	0:0	8	0
op	59:33	0:0	8	||
water	59:36	0:0	8	norm_alpha
op	59:47	0:0	8	>
water	59:49	0:0	8	1
op	59:50	0:0	8	.
water	59:51	0:0	8	0
stmts	60:16	60:27	7	
water	60:16	0:0	8	alpha
op	60:22	0:0	8	=
water	60:24	0:0	8	256
water	60:27	0:0	8	;
else	61:12	62:40	6
stmts	62:16	62:40	7	
water	62:16	0:0	8	alpha
op	62:22	0:0	8	=
water	62:24	0:0	8	255
op	62:28	0:0	8	*
water	62:30	0:0	8	norm_alpha
water	62:40	0:0	8	;
water	63:8	0:0	6	}
if	64:8	68:8	4	(tail == alpha_string || * tail || alpha > 255 || alpha < 0)
cond	64:12	64:68	5	tail == alpha_string || * tail || alpha > 255 || alpha < 0
water	64:12	0:0	6	tail
op	64:17	0:0	6	==
water	64:20	0:0	6	alpha_string
op	64:33	0:0	6	||
op	64:36	0:0	6	*
water	64:37	0:0	6	tail
op	64:42	0:0	6	||
water	64:45	0:0	6	alpha
op	64:51	0:0	6	>
water	64:53	0:0	6	255
op	64:57	0:0	6	||
water	64:60	0:0	6	alpha
op	64:66	0:0	6	<
water	64:68	0:0	6	0
stmts	64:71	68:8	5	
water	64:71	0:0	6	{
call	65:12	66:45	6	av_log
arg	65:19	65:26	7	log_ctx
water	65:19	0:0	8	log_ctx
arg	65:28	65:40	7	AV_LOG_ERROR
water	65:28	0:0	8	AV_LOG_ERROR
arg	65:42	65:88	7	"Invalid alpha value specifier '%s' in '%s'\n"
water	65:42	0:0	8	"Invalid alpha value specifier '%s' in '%s'\n"
arg	66:19	66:31	7	alpha_string
water	66:19	0:0	8	alpha_string
arg	66:33	66:45	7	color_string
water	66:33	0:0	8	color_string
water	66:46	0:0	6	;
return	67:12	67:34	6	AVERROR(EINVAL)
call	67:19	67:33	7	AVERROR
arg	67:27	67:33	8	EINVAL
water	67:27	0:0	9	EINVAL
water	68:8	0:0	6	}
water	69:8	0:0	4	rgba_color
op	69:18	0:0	4	[
water	69:19	0:0	4	3
op	69:20	0:0	4	]
op	69:22	0:0	4	=
water	69:24	0:0	4	alpha
water	69:29	0:0	4	;
water	70:4	0:0	4	}
return	71:4	71:12	2	0
water	71:11	0:0	3	0
