func	1:0	69:0	0	static void	mpeg_decode_user_data
params	1:33	0:0	1	
param	1:34	1:55	2	AVCodecContext *	avctx
param	2:34	2:50	2	const uint8_t *	p
param	2:52	2:64	2	int	buf_size
stmnts	0:0	68:4	1	
decl	4:4	4:38	2	Mpeg1Context	*s
op	4:20	0:0	2	=
water	4:22	0:0	2	avctx
op	4:27	0:0	2	->
water	4:29	0:0	2	priv_data
decl	5:4	5:41	2	const uint8_t	*buf_end
op	5:27	0:0	2	=
water	5:29	0:0	2	p
op	5:31	0:0	2	+
water	5:33	0:0	2	buf_size
decl	6:4	6:39	2	Mpeg1Context	*s1
op	6:21	0:0	2	=
water	6:23	0:0	2	avctx
op	6:28	0:0	2	->
water	6:30	0:0	2	priv_data
decl	8:4	8:9	2	int	i
for	9:4	11:4	2	(i = 0 ;! ( ! p [ i - 2 ] && ! p [ i - 1 ] && p [ i ] == 1 ) && i < buf_size;i ++)
forinit	9:8	9:11	3	i = 0 ;
water	9:8	0:0	4	i
op	9:9	0:0	4	=
water	9:10	0:0	4	0
water	9:11	0:0	4	;
cond	9:13	9:51	3	! ( ! p [ i - 2 ] && ! p [ i - 1 ] && p [ i ] == 1 ) && i < buf_size
op	9:13	0:0	4	!
water	9:14	0:0	4	(
op	9:15	0:0	4	!
water	9:16	0:0	4	p
op	9:17	0:0	4	[
water	9:18	0:0	4	i
op	9:19	0:0	4	-
water	9:20	0:0	4	2
op	9:21	0:0	4	]
op	9:23	0:0	4	&&
op	9:26	0:0	4	!
water	9:27	0:0	4	p
op	9:28	0:0	4	[
water	9:29	0:0	4	i
op	9:30	0:0	4	-
water	9:31	0:0	4	1
op	9:32	0:0	4	]
op	9:34	0:0	4	&&
water	9:37	0:0	4	p
op	9:38	0:0	4	[
water	9:39	0:0	4	i
op	9:40	0:0	4	]
op	9:41	0:0	4	==
water	9:43	0:0	4	1
water	9:44	0:0	4	)
op	9:46	0:0	4	&&
water	9:49	0:0	4	i
op	9:50	0:0	4	<
water	9:51	0:0	4	buf_size
forexpr	9:61	9:62	3	i ++
water	9:61	0:0	4	i
op	9:62	0:0	4	++
stmts	9:65	11:4	3	
water	9:65	0:0	4	{
call	10:8	10:46	4	av_log
arg	10:15	10:20	5	avctx
water	10:15	0:0	6	avctx
arg	10:22	10:34	5	AV_LOG_ERROR
water	10:22	0:0	6	AV_LOG_ERROR
arg	10:36	10:40	5	"%c"
water	10:36	0:0	6	"%c"
arg	10:42	10:46	5	p[i]
water	10:42	0:0	6	p
op	10:43	0:0	6	[
water	10:44	0:0	6	i
op	10:45	0:0	6	]
water	10:47	0:0	4	;
water	11:4	0:0	4	}
call	12:4	12:36	2	av_log
arg	12:11	12:16	3	avctx
water	12:11	0:0	4	avctx
arg	12:18	12:30	3	AV_LOG_ERROR
water	12:18	0:0	4	AV_LOG_ERROR
arg	12:32	12:36	3	"\n"
water	12:32	0:0	4	"\n"
water	12:37	0:0	2	;
if	14:4	20:4	2	(buf_size > 29)
cond	14:8	14:19	3	buf_size > 29
water	14:8	0:0	4	buf_size
op	14:17	0:0	4	>
water	14:19	0:0	4	29
stmts	14:22	20:4	3	
water	14:22	0:0	4	{
decl	15:8	15:13	4	int	i
for	16:8	19:12	4	(i = 0 ;i < 20;i ++)
forinit	16:12	16:15	5	i = 0 ;
water	16:12	0:0	6	i
op	16:13	0:0	6	=
water	16:14	0:0	6	0
water	16:15	0:0	6	;
cond	16:17	16:19	5	i < 20
water	16:17	0:0	6	i
op	16:18	0:0	6	<
water	16:19	0:0	6	20
forexpr	16:23	16:24	5	i ++
water	16:23	0:0	6	i
op	16:24	0:0	6	++
stmts	17:12	19:12	5	
if	17:12	19:12	6	(!memcmp (p + i ,"\0TMPGEXS\0" ,9 ))
cond	17:16	17:45	7	!memcmp (p + i ,"\0TMPGEXS\0" ,9 )
op	17:16	0:0	8	!
call	17:17	17:45	8	memcmp
arg	17:24	17:27	9	p+i
water	17:24	0:0	10	p
op	17:25	0:0	10	+
water	17:26	0:0	10	i
arg	17:29	17:42	9	"\0TMPGEXS\0"
water	17:29	0:0	10	"\0TMPGEXS\0"
arg	17:44	17:45	9	9
water	17:44	0:0	10	9
stmts	17:47	19:12	7	
water	17:47	0:0	8	{
water	18:16	0:0	8	s
op	18:17	0:0	8	->
water	18:19	0:0	8	tmpgexs
op	18:26	0:0	8	=
water	18:28	0:0	8	1
water	18:29	0:0	8	;
water	19:12	0:0	8	}
water	20:4	0:0	4	}
if	22:4	41:4	2	(buf_end - p >= 5 && p [ 0 ] == 'D' && p [ 1 ] == 'T' && p [ 2 ] == 'G' && p [ 3 ] == '1')
cond	22:8	23:61	3	buf_end - p >= 5 && p [ 0 ] == 'D' && p [ 1 ] == 'T' && p [ 2 ] == 'G' && p [ 3 ] == '1'
water	22:8	0:0	4	buf_end
op	22:16	0:0	4	-
water	22:18	0:0	4	p
op	22:20	0:0	4	>=
water	22:23	0:0	4	5
op	22:25	0:0	4	&&
water	23:8	0:0	4	p
op	23:9	0:0	4	[
water	23:10	0:0	4	0
op	23:11	0:0	4	]
op	23:13	0:0	4	==
water	23:16	0:0	4	'D'
op	23:20	0:0	4	&&
water	23:23	0:0	4	p
op	23:24	0:0	4	[
water	23:25	0:0	4	1
op	23:26	0:0	4	]
op	23:28	0:0	4	==
water	23:31	0:0	4	'T'
op	23:35	0:0	4	&&
water	23:38	0:0	4	p
op	23:39	0:0	4	[
water	23:40	0:0	4	2
op	23:41	0:0	4	]
op	23:43	0:0	4	==
water	23:46	0:0	4	'G'
op	23:50	0:0	4	&&
water	23:53	0:0	4	p
op	23:54	0:0	4	[
water	23:55	0:0	4	3
op	23:56	0:0	4	]
op	23:58	0:0	4	==
water	23:61	0:0	4	'1'
stmts	23:66	41:4	3	
water	23:66	0:0	4	{
decl	24:8	24:24	4	int	flags
op	24:18	0:0	4	=
water	24:20	0:0	4	p
op	24:21	0:0	4	[
water	24:22	0:0	4	4
op	24:23	0:0	4	]
water	25:8	0:0	4	p
op	25:10	0:0	4	+=
water	25:13	0:0	4	5
water	25:14	0:0	4	;
if	26:8	29:8	4	(flags & 0 x80)
cond	26:12	26:21	5	flags & 0 x80
water	26:12	0:0	6	flags
op	26:18	0:0	6	&
water	26:20	0:0	6	0
water	26:21	0:0	6	x80
stmts	26:26	29:8	5	
water	26:26	0:0	6	{
water	28:12	0:0	6	p
op	28:14	0:0	6	+=
water	28:17	0:0	6	2
water	28:18	0:0	6	;
water	29:8	0:0	6	}
if	30:8	40:8	4	(flags & 0 x40)
cond	30:12	30:21	5	flags & 0 x40
water	30:12	0:0	6	flags
op	30:18	0:0	6	&
water	30:20	0:0	6	0
water	30:21	0:0	6	x40
stmts	30:26	40:8	5	
water	30:26	0:0	6	{
if	31:12	32:22	6	(buf_end - p < 1)
cond	31:16	31:30	7	buf_end - p < 1
water	31:16	0:0	8	buf_end
op	31:24	0:0	8	-
water	31:26	0:0	8	p
op	31:28	0:0	8	<
water	31:30	0:0	8	1
stmts	32:16	32:22	7	
return	32:16	32:22	8	
water	34:0	0:0	6	FF_DISABLE_DEPRECATION_WARNINGS
water	35:12	0:0	6	avctx
op	35:17	0:0	6	->
water	35:19	0:0	6	dtg_active_format
op	35:37	0:0	6	=
water	35:39	0:0	6	p
op	35:40	0:0	6	[
water	35:41	0:0	6	0
op	35:42	0:0	6	]
op	35:44	0:0	6	&
water	35:46	0:0	6	0
water	35:47	0:0	6	x0f
water	35:50	0:0	6	;
water	36:0	0:0	6	FF_ENABLE_DEPRECATION_WARNINGS
water	38:12	0:0	6	s1
op	38:14	0:0	6	->
water	38:16	0:0	6	has_afd
op	38:24	0:0	6	=
water	38:26	0:0	6	1
water	38:27	0:0	6	;
water	39:12	0:0	6	s1
op	39:14	0:0	6	->
water	39:16	0:0	6	afd
op	39:24	0:0	6	=
water	39:26	0:0	6	p
op	39:27	0:0	6	[
water	39:28	0:0	6	0
op	39:29	0:0	6	]
op	39:31	0:0	6	&
water	39:33	0:0	6	0
water	39:34	0:0	6	x0f
water	39:37	0:0	6	;
water	40:8	0:0	6	}
water	41:4	0:0	4	}
else	41:6	66:4	2
stmts	41:11	66:4	3	
if	41:11	66:4	4	(buf_end - p >= 6 && p [ 0 ] == 'J' && p [ 1 ] == 'P' && p [ 2 ] == '3' && p [ 3 ] == 'D' && p [ 4 ] == 0 x03)
cond	41:15	43:24	5	buf_end - p >= 6 && p [ 0 ] == 'J' && p [ 1 ] == 'P' && p [ 2 ] == '3' && p [ 3 ] == 'D' && p [ 4 ] == 0 x03
water	41:15	0:0	6	buf_end
op	41:23	0:0	6	-
water	41:25	0:0	6	p
op	41:27	0:0	6	>=
water	41:30	0:0	6	6
op	41:32	0:0	6	&&
water	42:15	0:0	6	p
op	42:16	0:0	6	[
water	42:17	0:0	6	0
op	42:18	0:0	6	]
op	42:20	0:0	6	==
water	42:23	0:0	6	'J'
op	42:27	0:0	6	&&
water	42:30	0:0	6	p
op	42:31	0:0	6	[
water	42:32	0:0	6	1
op	42:33	0:0	6	]
op	42:35	0:0	6	==
water	42:38	0:0	6	'P'
op	42:42	0:0	6	&&
water	42:45	0:0	6	p
op	42:46	0:0	6	[
water	42:47	0:0	6	2
op	42:48	0:0	6	]
op	42:50	0:0	6	==
water	42:53	0:0	6	'3'
op	42:57	0:0	6	&&
water	42:60	0:0	6	p
op	42:61	0:0	6	[
water	42:62	0:0	6	3
op	42:63	0:0	6	]
op	42:65	0:0	6	==
water	42:68	0:0	6	'D'
op	42:72	0:0	6	&&
water	43:15	0:0	6	p
op	43:16	0:0	6	[
water	43:17	0:0	6	4
op	43:18	0:0	6	]
op	43:20	0:0	6	==
water	43:23	0:0	6	0
water	43:24	0:0	6	x03
stmts	43:29	66:4	5	
water	43:29	0:0	6	{
decl	45:8	45:57	6	const uint8_t	S3D_video_format_type
op	45:44	0:0	6	=
water	45:46	0:0	6	p
op	45:47	0:0	6	[
water	45:48	0:0	6	5
op	45:49	0:0	6	]
op	45:51	0:0	6	&
water	45:53	0:0	6	0
water	45:54	0:0	6	x7F
if	46:8	65:8	6	(S3D_video_format_type == 0 x03 || S3D_video_format_type == 0 x04 || S3D_video_format_type == 0 x08 || S3D_video_format_type == 0 x23)
cond	46:12	49:38	7	S3D_video_format_type == 0 x03 || S3D_video_format_type == 0 x04 || S3D_video_format_type == 0 x08 || S3D_video_format_type == 0 x23
water	46:12	0:0	8	S3D_video_format_type
op	46:34	0:0	8	==
water	46:37	0:0	8	0
water	46:38	0:0	8	x03
op	46:42	0:0	8	||
water	47:12	0:0	8	S3D_video_format_type
op	47:34	0:0	8	==
water	47:37	0:0	8	0
water	47:38	0:0	8	x04
op	47:42	0:0	8	||
water	48:12	0:0	8	S3D_video_format_type
op	48:34	0:0	8	==
water	48:37	0:0	8	0
water	48:38	0:0	8	x08
op	48:42	0:0	8	||
water	49:12	0:0	8	S3D_video_format_type
op	49:34	0:0	8	==
water	49:37	0:0	8	0
water	49:38	0:0	8	x23
stmts	49:43	65:8	7	
water	49:43	0:0	8	{
water	50:12	0:0	8	s1
op	50:14	0:0	8	->
water	50:16	0:0	8	has_stereo3d
op	50:29	0:0	8	=
water	50:31	0:0	8	1
water	50:32	0:0	8	;
switch	51:12	64:12	8	(S3D_video_format_type)
cond	51:20	51:20	9	S3D_video_format_type
water	51:20	0:0	10	S3D_video_format_type
stmts	51:43	64:12	9	
water	51:43	0:0	10	{
label	52:12	52:21	10	case 0 x03 :
water	53:16	0:0	10	s1
op	53:18	0:0	10	->
water	53:20	0:0	10	stereo3d
op	53:28	0:0	10	.
water	53:29	0:0	10	type
op	53:34	0:0	10	=
water	53:36	0:0	10	AV_STEREO3D_SIDEBYSIDE
water	53:58	0:0	10	;
break	54:16	54:21	10	
label	55:12	55:21	10	case 0 x04 :
water	56:16	0:0	10	s1
op	56:18	0:0	10	->
water	56:20	0:0	10	stereo3d
op	56:28	0:0	10	.
water	56:29	0:0	10	type
op	56:34	0:0	10	=
water	56:36	0:0	10	AV_STEREO3D_TOPBOTTOM
water	56:57	0:0	10	;
break	57:16	57:21	10	
label	58:12	58:21	10	case 0 x08 :
water	59:16	0:0	10	s1
op	59:18	0:0	10	->
water	59:20	0:0	10	stereo3d
op	59:28	0:0	10	.
water	59:29	0:0	10	type
op	59:34	0:0	10	=
water	59:36	0:0	10	AV_STEREO3D_2D
water	59:50	0:0	10	;
break	60:16	60:21	10	
label	61:12	61:21	10	case 0 x23 :
water	62:16	0:0	10	s1
op	62:18	0:0	10	->
water	62:20	0:0	10	stereo3d
op	62:28	0:0	10	.
water	62:29	0:0	10	type
op	62:34	0:0	10	=
water	62:36	0:0	10	AV_STEREO3D_SIDEBYSIDE_QUINCUNX
water	62:67	0:0	10	;
break	63:16	63:21	10	
water	64:12	0:0	10	}
water	65:8	0:0	8	}
water	66:4	0:0	6	}
else	66:6	68:4	2
stmts	66:11	68:4	3	
if	66:11	68:4	4	(mpeg_decode_a53_cc (avctx ,p ,buf_size ))
cond	66:15	66:52	5	mpeg_decode_a53_cc (avctx ,p ,buf_size )
call	66:15	66:52	6	mpeg_decode_a53_cc
arg	66:34	66:39	7	avctx
water	66:34	0:0	8	avctx
arg	66:41	66:42	7	p
water	66:41	0:0	8	p
arg	66:44	66:52	7	buf_size
water	66:44	0:0	8	buf_size
stmts	66:55	68:4	5	
water	66:55	0:0	6	{
return	67:8	67:14	6	
water	68:4	0:0	6	}
