func	1:0	123:0	0	static int	dash_write_header
params	1:28	0:0	1	
param	1:29	1:47	2	AVFormatContext *	s
stmnts	0:0	122:14	1	
decl	3:4	3:33	2	DASHContext	*c
op	3:19	0:0	2	=
water	3:21	0:0	2	s
op	3:22	0:0	2	->
water	3:24	0:0	2	priv_data
decl	4:4	4:18	2	int	ret
op	4:12	0:0	2	=
water	4:14	0:0	2	0
water	4:15	0:0	2	,
decl	4:4	4:18	2	int	i
decl	5:4	5:27	2	AVOutputFormat	*oformat
decl	6:4	6:13	2	char	*ptr
decl	7:4	7:23	2	char	basename[1024]
if	8:4	9:26	2	(c -> single_file_name)
cond	8:8	8:11	3	c -> single_file_name
water	8:8	0:0	4	c
op	8:9	0:0	4	->
water	8:11	0:0	4	single_file_name
stmts	9:8	9:26	3	
water	9:8	0:0	4	c
op	9:9	0:0	4	->
water	9:11	0:0	4	single_file
op	9:23	0:0	4	=
water	9:25	0:0	4	1
water	9:26	0:0	4	;
if	10:4	11:27	2	(c -> single_file)
cond	10:8	10:11	3	c -> single_file
water	10:8	0:0	4	c
op	10:9	0:0	4	->
water	10:11	0:0	4	single_file
stmts	11:8	11:27	3	
water	11:8	0:0	4	c
op	11:9	0:0	4	->
water	11:11	0:0	4	use_template
op	11:24	0:0	4	=
water	11:26	0:0	4	0
water	11:27	0:0	4	;
call	12:4	12:58	2	av_strlcpy
arg	12:15	12:25	3	c->dirname
water	12:15	0:0	4	c
op	12:16	0:0	4	->
water	12:18	0:0	4	dirname
arg	12:27	12:38	3	s->filename
water	12:27	0:0	4	s
op	12:28	0:0	4	->
water	12:30	0:0	4	filename
arg	12:40	12:58	3	sizeof(c->dirname)
op	12:40	0:0	4	sizeof
water	12:46	0:0	4	(
water	12:47	0:0	4	c
op	12:48	0:0	4	->
water	12:50	0:0	4	dirname
water	12:57	0:0	4	)
water	12:59	0:0	2	;
water	13:4	0:0	2	ptr
op	13:8	0:0	2	=
call	13:10	13:33	2	strrchr
arg	13:18	13:28	3	c->dirname
water	13:18	0:0	4	c
op	13:19	0:0	4	->
water	13:21	0:0	4	dirname
arg	13:30	13:33	3	'/'
water	13:30	0:0	4	'/'
water	13:34	0:0	2	;
if	14:4	17:4	2	(ptr)
cond	14:8	14:8	3	ptr
water	14:8	0:0	4	ptr
stmts	14:13	17:4	3	
water	14:13	0:0	4	{
call	15:8	15:54	4	av_strlcpy
arg	15:19	15:27	5	basename
water	15:19	0:0	6	basename
arg	15:29	15:36	5	&ptr[1]
op	15:29	0:0	6	&
water	15:30	0:0	6	ptr
op	15:33	0:0	6	[
water	15:34	0:0	6	1
op	15:35	0:0	6	]
arg	15:38	15:54	5	sizeof(basename)
op	15:38	0:0	6	sizeof
water	15:44	0:0	6	(
water	15:45	0:0	6	basename
water	15:53	0:0	6	)
water	15:55	0:0	4	;
water	16:8	0:0	4	ptr
op	16:11	0:0	4	[
water	16:12	0:0	4	1
op	16:13	0:0	4	]
op	16:15	0:0	4	=
water	16:17	0:0	4	'\0'
water	16:21	0:0	4	;
water	17:4	0:0	4	}
else	17:6	20:4	2
stmts	17:11	20:4	3	
water	17:11	0:0	4	{
water	18:8	0:0	4	c
op	18:9	0:0	4	->
water	18:11	0:0	4	dirname
op	18:18	0:0	4	[
water	18:19	0:0	4	0
op	18:20	0:0	4	]
op	18:22	0:0	4	=
water	18:24	0:0	4	'\0'
water	18:28	0:0	4	;
call	19:8	19:58	4	av_strlcpy
arg	19:19	19:27	5	basename
water	19:19	0:0	6	basename
arg	19:29	19:40	5	s->filename
water	19:29	0:0	6	s
op	19:30	0:0	6	->
water	19:32	0:0	6	filename
arg	19:42	19:58	5	sizeof(basename)
op	19:42	0:0	6	sizeof
water	19:48	0:0	6	(
water	19:49	0:0	6	basename
water	19:57	0:0	6	)
water	19:59	0:0	4	;
water	20:4	0:0	4	}
water	21:4	0:0	2	ptr
op	21:8	0:0	2	=
call	21:10	21:31	2	strrchr
arg	21:18	21:26	3	basename
water	21:18	0:0	4	basename
arg	21:28	21:31	3	'.'
water	21:28	0:0	4	'.'
water	21:32	0:0	2	;
if	22:4	23:19	2	(ptr)
cond	22:8	22:8	3	ptr
water	22:8	0:0	4	ptr
stmts	23:8	23:19	3	
op	23:8	0:0	4	*
water	23:9	0:0	4	ptr
op	23:13	0:0	4	=
water	23:15	0:0	4	'\0'
water	23:19	0:0	4	;
water	24:4	0:0	2	oformat
op	24:12	0:0	2	=
call	24:14	24:47	2	av_guess_format
arg	24:30	24:35	3	"mp4"
water	24:30	0:0	4	"mp4"
arg	24:37	24:41	3	NULL
water	24:37	0:0	4	NULL
arg	24:43	24:47	3	NULL
water	24:43	0:0	4	NULL
water	24:48	0:0	2	;
if	25:4	28:4	2	(! oformat)
cond	25:8	25:9	3	! oformat
op	25:8	0:0	4	!
water	25:9	0:0	4	oformat
stmts	25:18	28:4	3	
water	25:18	0:0	4	{
water	26:8	0:0	4	ret
op	26:12	0:0	4	=
water	26:14	0:0	4	AVERROR_MUXER_NOT_FOUND
water	26:37	0:0	4	;
goto	27:8	27:17	4	fail
water	27:13	0:0	5	fail
water	28:4	0:0	4	}
water	29:4	0:0	2	c
op	29:5	0:0	2	->
water	29:7	0:0	2	streams
op	29:15	0:0	2	=
call	29:17	29:63	2	av_mallocz
arg	29:28	29:63	3	sizeof(*c->streams)*s->nb_streams
op	29:28	0:0	4	sizeof
water	29:34	0:0	4	(
op	29:35	0:0	4	*
water	29:36	0:0	4	c
op	29:37	0:0	4	->
water	29:39	0:0	4	streams
water	29:46	0:0	4	)
op	29:48	0:0	4	*
water	29:50	0:0	4	s
op	29:51	0:0	4	->
water	29:53	0:0	4	nb_streams
water	29:64	0:0	2	;
if	30:4	33:4	2	(! c -> streams)
cond	30:8	30:12	3	! c -> streams
op	30:8	0:0	4	!
water	30:9	0:0	4	c
op	30:10	0:0	4	->
water	30:12	0:0	4	streams
stmts	30:21	33:4	3	
water	30:21	0:0	4	{
water	31:8	0:0	4	ret
op	31:12	0:0	4	=
call	31:14	31:28	4	AVERROR
arg	31:22	31:28	5	ENOMEM
water	31:22	0:0	6	ENOMEM
water	31:29	0:0	4	;
goto	32:8	32:17	4	fail
water	32:13	0:0	5	fail
water	33:4	0:0	4	}
for	34:4	111:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	34:9	34:14	3	i = 0 ;
water	34:9	0:0	4	i
op	34:11	0:0	4	=
water	34:13	0:0	4	0
water	34:14	0:0	4	;
cond	34:16	34:23	3	i < s -> nb_streams
water	34:16	0:0	4	i
op	34:18	0:0	4	<
water	34:20	0:0	4	s
op	34:21	0:0	4	->
water	34:23	0:0	4	nb_streams
forexpr	34:35	34:36	3	i ++
water	34:35	0:0	4	i
op	34:36	0:0	4	++
stmts	34:40	111:4	3	
water	34:40	0:0	4	{
decl	35:8	35:41	4	OutputStream	*os
op	35:25	0:0	4	=
op	35:27	0:0	4	&
water	35:28	0:0	4	c
op	35:29	0:0	4	->
water	35:31	0:0	4	streams
op	35:38	0:0	4	[
water	35:39	0:0	4	i
op	35:40	0:0	4	]
decl	36:8	36:28	4	AVFormatContext	*ctx
decl	37:8	37:20	4	AVStream	*st
decl	38:8	38:33	4	AVDictionary	*opts
op	38:27	0:0	4	=
water	38:29	0:0	4	NULL
decl	39:8	39:27	4	char	filename[1024]
water	40:8	0:0	4	os
op	40:10	0:0	4	->
water	40:12	0:0	4	bit_rate
op	40:21	0:0	4	=
water	40:23	0:0	4	s
op	40:24	0:0	4	->
water	40:26	0:0	4	streams
op	40:33	0:0	4	[
water	40:34	0:0	4	i
op	40:35	0:0	4	]
op	40:36	0:0	4	->
water	40:38	0:0	4	codec
op	40:43	0:0	4	->
water	40:45	0:0	4	bit_rate
water	40:54	0:0	4	?
water	41:23	0:0	4	s
op	41:24	0:0	4	->
water	41:26	0:0	4	streams
op	41:33	0:0	4	[
water	41:34	0:0	4	i
op	41:35	0:0	4	]
op	41:36	0:0	4	->
water	41:38	0:0	4	codec
op	41:43	0:0	4	->
water	41:45	0:0	4	bit_rate
water	41:54	0:0	4	:
water	42:23	0:0	4	s
op	42:24	0:0	4	->
water	42:26	0:0	4	streams
op	42:33	0:0	4	[
water	42:34	0:0	4	i
op	42:35	0:0	4	]
op	42:36	0:0	4	->
water	42:38	0:0	4	codec
op	42:43	0:0	4	->
water	42:45	0:0	4	rc_max_rate
water	42:56	0:0	4	;
if	43:8	46:8	4	(os -> bit_rate)
cond	43:12	43:16	5	os -> bit_rate
water	43:12	0:0	6	os
op	43:14	0:0	6	->
water	43:16	0:0	6	bit_rate
stmts	43:26	46:8	5	
water	43:26	0:0	6	{
call	44:12	45:54	6	snprintf
arg	44:21	44:38	7	os->bandwidth_str
water	44:21	0:0	8	os
op	44:23	0:0	8	->
water	44:25	0:0	8	bandwidth_str
arg	44:40	44:65	7	sizeof(os->bandwidth_str)
op	44:40	0:0	8	sizeof
water	44:46	0:0	8	(
water	44:47	0:0	8	os
op	44:49	0:0	8	->
water	44:51	0:0	8	bandwidth_str
water	44:64	0:0	8	)
arg	45:21	45:40	7	" bandwidth=\"%d\""
water	45:21	0:0	8	" bandwidth=\"%d\""
arg	45:42	45:54	7	os->bit_rate
water	45:42	0:0	8	os
op	45:44	0:0	8	->
water	45:46	0:0	8	bit_rate
water	45:55	0:0	6	;
water	46:8	0:0	6	}
else	46:10	54:8	4
stmts	46:15	54:8	5	
water	46:15	0:0	6	{
decl	47:12	48:53	6	int	level
op	47:22	0:0	6	=
water	47:24	0:0	6	s
op	47:25	0:0	6	->
water	47:27	0:0	6	strict_std_compliance
op	47:49	0:0	6	>=
water	47:52	0:0	6	FF_COMPLIANCE_STRICT
water	47:73	0:0	6	?
water	48:24	0:0	6	AV_LOG_ERROR
water	48:37	0:0	6	:
water	48:39	0:0	6	AV_LOG_WARNING
call	49:12	49:65	6	av_log
arg	49:19	49:20	7	s
water	49:19	0:0	8	s
arg	49:22	49:27	7	level
water	49:22	0:0	8	level
arg	49:29	49:62	7	"No bit rate set for stream %d\n"
water	49:29	0:0	8	"No bit rate set for stream %d\n"
arg	49:64	49:65	7	i
water	49:64	0:0	8	i
water	49:66	0:0	6	;
if	50:12	53:12	6	(s -> strict_std_compliance >= FF_COMPLIANCE_STRICT)
cond	50:16	50:44	7	s -> strict_std_compliance >= FF_COMPLIANCE_STRICT
water	50:16	0:0	8	s
op	50:17	0:0	8	->
water	50:19	0:0	8	strict_std_compliance
op	50:41	0:0	8	>=
water	50:44	0:0	8	FF_COMPLIANCE_STRICT
stmts	50:66	53:12	7	
water	50:66	0:0	8	{
water	51:16	0:0	8	ret
op	51:20	0:0	8	=
call	51:22	51:36	8	AVERROR
arg	51:30	51:36	9	EINVAL
water	51:30	0:0	10	EINVAL
water	51:37	0:0	8	;
goto	52:16	52:25	8	fail
water	52:21	0:0	9	fail
water	53:12	0:0	8	}
water	54:8	0:0	6	}
water	55:8	0:0	4	ctx
op	55:12	0:0	4	=
call	55:14	55:37	4	avformat_alloc_context
water	55:38	0:0	4	;
if	56:8	59:8	4	(! ctx)
cond	56:12	56:13	5	! ctx
op	56:12	0:0	6	!
water	56:13	0:0	6	ctx
stmts	56:18	59:8	5	
water	56:18	0:0	6	{
water	57:12	0:0	6	ret
op	57:16	0:0	6	=
call	57:18	57:32	6	AVERROR
arg	57:26	57:32	7	ENOMEM
water	57:26	0:0	8	ENOMEM
water	57:33	0:0	6	;
goto	58:12	58:21	6	fail
water	58:17	0:0	7	fail
water	59:8	0:0	6	}
water	60:8	0:0	4	os
op	60:10	0:0	4	->
water	60:12	0:0	4	ctx
op	60:16	0:0	4	=
water	60:18	0:0	4	ctx
water	60:21	0:0	4	;
water	61:8	0:0	4	ctx
op	61:11	0:0	4	->
water	61:13	0:0	4	oformat
op	61:21	0:0	4	=
water	61:23	0:0	4	oformat
water	61:30	0:0	4	;
water	62:8	0:0	4	ctx
op	62:11	0:0	4	->
water	62:13	0:0	4	interrupt_callback
op	62:32	0:0	4	=
water	62:34	0:0	4	s
op	62:35	0:0	4	->
water	62:37	0:0	4	interrupt_callback
water	62:55	0:0	4	;
if	63:8	66:8	4	(! ( st =avformat_new_stream (ctx ,NULL ) ))
cond	63:12	63:49	5	! ( st =avformat_new_stream (ctx ,NULL ) )
op	63:12	0:0	6	!
water	63:13	0:0	6	(
water	63:14	0:0	6	st
op	63:17	0:0	6	=
call	63:19	63:48	6	avformat_new_stream
arg	63:39	63:42	7	ctx
water	63:39	0:0	8	ctx
arg	63:44	63:48	7	NULL
water	63:44	0:0	8	NULL
water	63:49	0:0	6	)
stmts	63:52	66:8	5	
water	63:52	0:0	6	{
water	64:12	0:0	6	ret
op	64:16	0:0	6	=
call	64:18	64:32	6	AVERROR
arg	64:26	64:32	7	ENOMEM
water	64:26	0:0	8	ENOMEM
water	64:33	0:0	6	;
goto	65:12	65:21	6	fail
water	65:17	0:0	7	fail
water	66:8	0:0	6	}
call	67:8	67:60	4	avcodec_copy_context
arg	67:29	67:38	5	st->codec
water	67:29	0:0	6	st
op	67:31	0:0	6	->
water	67:33	0:0	6	codec
arg	67:40	67:60	5	s->streams[i]->codec
water	67:40	0:0	6	s
op	67:41	0:0	6	->
water	67:43	0:0	6	streams
op	67:50	0:0	6	[
water	67:51	0:0	6	i
op	67:52	0:0	6	]
op	67:53	0:0	6	->
water	67:55	0:0	6	codec
water	67:61	0:0	4	;
water	68:8	0:0	4	st
op	68:10	0:0	4	->
water	68:12	0:0	4	sample_aspect_ratio
op	68:32	0:0	4	=
water	68:34	0:0	4	s
op	68:35	0:0	4	->
water	68:37	0:0	4	streams
op	68:44	0:0	4	[
water	68:45	0:0	4	i
op	68:46	0:0	4	]
op	68:47	0:0	4	->
water	68:49	0:0	4	sample_aspect_ratio
water	68:68	0:0	4	;
water	69:8	0:0	4	st
op	69:10	0:0	4	->
water	69:12	0:0	4	time_base
op	69:22	0:0	4	=
water	69:24	0:0	4	s
op	69:25	0:0	4	->
water	69:27	0:0	4	streams
op	69:34	0:0	4	[
water	69:35	0:0	4	i
op	69:36	0:0	4	]
op	69:37	0:0	4	->
water	69:39	0:0	4	time_base
water	69:48	0:0	4	;
water	70:8	0:0	4	ctx
op	70:11	0:0	4	->
water	70:13	0:0	4	avoid_negative_ts
op	70:31	0:0	4	=
water	70:33	0:0	4	s
op	70:34	0:0	4	->
water	70:36	0:0	4	avoid_negative_ts
water	70:53	0:0	4	;
water	71:8	0:0	4	ctx
op	71:11	0:0	4	->
water	71:13	0:0	4	pb
op	71:16	0:0	4	=
call	71:18	71:110	4	avio_alloc_context
arg	71:37	71:46	5	os->iobuf
water	71:37	0:0	6	os
op	71:39	0:0	6	->
water	71:41	0:0	6	iobuf
arg	71:48	71:65	5	sizeof(os->iobuf)
op	71:48	0:0	6	sizeof
water	71:54	0:0	6	(
water	71:55	0:0	6	os
op	71:57	0:0	6	->
water	71:59	0:0	6	iobuf
water	71:64	0:0	6	)
arg	71:67	71:82	5	AVIO_FLAG_WRITE
water	71:67	0:0	6	AVIO_FLAG_WRITE
arg	71:84	71:86	5	os
water	71:84	0:0	6	os
arg	71:88	71:92	5	NULL
water	71:88	0:0	6	NULL
arg	71:94	71:104	5	dash_write
water	71:94	0:0	6	dash_write
arg	71:106	71:110	5	NULL
water	71:106	0:0	6	NULL
water	71:111	0:0	4	;
if	72:8	75:8	4	(! ctx -> pb)
cond	72:12	72:18	5	! ctx -> pb
op	72:12	0:0	6	!
water	72:13	0:0	6	ctx
op	72:16	0:0	6	->
water	72:18	0:0	6	pb
stmts	72:22	75:8	5	
water	72:22	0:0	6	{
water	73:12	0:0	6	ret
op	73:16	0:0	6	=
call	73:18	73:32	6	AVERROR
arg	73:26	73:32	7	ENOMEM
water	73:26	0:0	8	ENOMEM
water	73:33	0:0	6	;
goto	74:12	74:21	6	fail
water	74:17	0:0	7	fail
water	75:8	0:0	6	}
if	76:8	81:8	4	(c -> single_file)
cond	76:12	76:15	5	c -> single_file
water	76:12	0:0	6	c
op	76:13	0:0	6	->
water	76:15	0:0	6	single_file
stmts	76:28	81:8	5	
water	76:28	0:0	6	{
if	77:12	78:117	6	(c -> single_file_name)
cond	77:16	77:19	7	c -> single_file_name
water	77:16	0:0	8	c
op	77:17	0:0	8	->
water	77:19	0:0	8	single_file_name
stmts	78:16	78:117	7	
call	78:16	78:116	8	dash_fill_tmpl_params
arg	78:38	78:50	9	os->initfile
water	78:38	0:0	10	os
op	78:40	0:0	10	->
water	78:42	0:0	10	initfile
arg	78:52	78:72	9	sizeof(os->initfile)
op	78:52	0:0	10	sizeof
water	78:58	0:0	10	(
water	78:59	0:0	10	os
op	78:61	0:0	10	->
water	78:63	0:0	10	initfile
water	78:71	0:0	10	)
arg	78:74	78:93	9	c->single_file_name
water	78:74	0:0	10	c
op	78:75	0:0	10	->
water	78:77	0:0	10	single_file_name
arg	78:95	78:96	9	i
water	78:95	0:0	10	i
arg	78:98	78:99	9	0
water	78:98	0:0	10	0
arg	78:101	78:113	9	os->bit_rate
water	78:101	0:0	10	os
op	78:103	0:0	10	->
water	78:105	0:0	10	bit_rate
arg	78:115	78:116	9	0
water	78:115	0:0	10	0
water	78:117	0:0	8	;
else	79:12	80:92	6
stmts	80:16	80:92	7	
call	80:16	80:91	8	snprintf
arg	80:25	80:37	9	os->initfile
water	80:25	0:0	10	os
op	80:27	0:0	10	->
water	80:29	0:0	10	initfile
arg	80:39	80:59	9	sizeof(os->initfile)
op	80:39	0:0	10	sizeof
water	80:45	0:0	10	(
water	80:46	0:0	10	os
op	80:48	0:0	10	->
water	80:50	0:0	10	initfile
water	80:58	0:0	10	)
arg	80:61	80:78	9	"%s-stream%d.m4s"
water	80:61	0:0	10	"%s-stream%d.m4s"
arg	80:80	80:88	9	basename
water	80:80	0:0	10	basename
arg	80:90	80:91	9	i
water	80:90	0:0	10	i
water	80:92	0:0	8	;
water	81:8	0:0	6	}
else	81:10	83:8	4
stmts	81:15	83:8	5	
water	81:15	0:0	6	{
call	82:12	82:109	6	dash_fill_tmpl_params
arg	82:34	82:46	7	os->initfile
water	82:34	0:0	8	os
op	82:36	0:0	8	->
water	82:38	0:0	8	initfile
arg	82:48	82:68	7	sizeof(os->initfile)
op	82:48	0:0	8	sizeof
water	82:54	0:0	8	(
water	82:55	0:0	8	os
op	82:57	0:0	8	->
water	82:59	0:0	8	initfile
water	82:67	0:0	8	)
arg	82:70	82:86	7	c->init_seg_name
water	82:70	0:0	8	c
op	82:71	0:0	8	->
water	82:73	0:0	8	init_seg_name
arg	82:88	82:89	7	i
water	82:88	0:0	8	i
arg	82:91	82:92	7	0
water	82:91	0:0	8	0
arg	82:94	82:106	7	os->bit_rate
water	82:94	0:0	8	os
op	82:96	0:0	8	->
water	82:98	0:0	8	bit_rate
arg	82:108	82:109	7	0
water	82:108	0:0	8	0
water	82:110	0:0	6	;
water	83:8	0:0	6	}
call	84:8	84:77	4	snprintf
arg	84:17	84:25	5	filename
water	84:17	0:0	6	filename
arg	84:27	84:43	5	sizeof(filename)
op	84:27	0:0	6	sizeof
water	84:33	0:0	6	(
water	84:34	0:0	6	filename
water	84:42	0:0	6	)
arg	84:45	84:51	5	"%s%s"
water	84:45	0:0	6	"%s%s"
arg	84:53	84:63	5	c->dirname
water	84:53	0:0	6	c
op	84:54	0:0	6	->
water	84:56	0:0	6	dirname
arg	84:65	84:77	5	os->initfile
water	84:65	0:0	6	os
op	84:67	0:0	6	->
water	84:69	0:0	6	initfile
water	84:78	0:0	4	;
water	85:8	0:0	4	ret
op	85:12	0:0	4	=
call	85:14	85:90	4	ffurl_open
arg	85:25	85:33	5	&os->out
op	85:25	0:0	6	&
water	85:26	0:0	6	os
op	85:28	0:0	6	->
water	85:30	0:0	6	out
arg	85:35	85:43	5	filename
water	85:35	0:0	6	filename
arg	85:45	85:60	5	AVIO_FLAG_WRITE
water	85:45	0:0	6	AVIO_FLAG_WRITE
arg	85:62	85:84	5	&s->interrupt_callback
op	85:62	0:0	6	&
water	85:63	0:0	6	s
op	85:64	0:0	6	->
water	85:66	0:0	6	interrupt_callback
arg	85:86	85:90	5	NULL
water	85:86	0:0	6	NULL
water	85:91	0:0	4	;
if	86:8	87:21	4	(ret < 0)
cond	86:12	86:18	5	ret < 0
water	86:12	0:0	6	ret
op	86:16	0:0	6	<
water	86:18	0:0	6	0
stmts	87:12	87:21	5	
goto	87:12	87:21	6	fail
water	87:17	0:0	7	fail
water	88:8	0:0	4	os
op	88:10	0:0	4	->
water	88:12	0:0	4	init_start_pos
op	88:27	0:0	4	=
water	88:29	0:0	4	0
water	88:30	0:0	4	;
call	89:8	89:71	4	av_dict_set
arg	89:20	89:25	5	&opts
op	89:20	0:0	6	&
water	89:21	0:0	6	opts
arg	89:27	89:37	5	"movflags"
water	89:27	0:0	6	"movflags"
arg	89:39	89:68	5	"frag_custom+dash+delay_moov"
water	89:39	0:0	6	"frag_custom+dash+delay_moov"
arg	89:70	89:71	5	0
water	89:70	0:0	6	0
water	89:72	0:0	4	;
if	90:8	92:8	4	(( ret =avformat_write_header (ctx ,& opts ) ) < 0)
cond	90:12	90:56	5	( ret =avformat_write_header (ctx ,& opts ) ) < 0
water	90:12	0:0	6	(
water	90:13	0:0	6	ret
op	90:17	0:0	6	=
call	90:19	90:51	6	avformat_write_header
arg	90:41	90:44	7	ctx
water	90:41	0:0	8	ctx
arg	90:46	90:51	7	&opts
op	90:46	0:0	8	&
water	90:47	0:0	8	opts
water	90:52	0:0	6	)
op	90:54	0:0	6	<
water	90:56	0:0	6	0
stmts	90:59	92:8	5	
water	90:59	0:0	6	{
goto	91:13	91:22	6	fail
water	91:18	0:0	7	fail
water	92:8	0:0	6	}
water	93:8	0:0	4	os
op	93:10	0:0	4	->
water	93:12	0:0	4	ctx_inited
op	93:23	0:0	4	=
water	93:25	0:0	4	1
water	93:26	0:0	4	;
call	94:8	94:26	4	avio_flush
arg	94:19	94:26	5	ctx->pb
water	94:19	0:0	6	ctx
op	94:22	0:0	6	->
water	94:24	0:0	6	pb
water	94:27	0:0	4	;
call	95:8	95:26	4	av_dict_free
arg	95:21	95:26	5	&opts
op	95:21	0:0	6	&
water	95:22	0:0	6	opts
water	95:27	0:0	4	;
call	96:8	96:104	4	av_log
arg	96:15	96:16	5	s
water	96:15	0:0	6	s
arg	96:18	96:32	5	AV_LOG_VERBOSE
water	96:18	0:0	6	AV_LOG_VERBOSE
arg	96:34	96:91	5	"Representation %d init segment will be written to: %s\n"
water	96:34	0:0	6	"Representation %d init segment will be written to: %s\n"
arg	96:93	96:94	5	i
water	96:93	0:0	6	i
arg	96:96	96:104	5	filename
water	96:96	0:0	6	filename
water	96:105	0:0	4	;
water	97:8	0:0	4	s
op	97:9	0:0	4	->
water	97:11	0:0	4	streams
op	97:18	0:0	4	[
water	97:19	0:0	4	i
op	97:20	0:0	4	]
op	97:21	0:0	4	->
water	97:23	0:0	4	time_base
op	97:33	0:0	4	=
water	97:35	0:0	4	st
op	97:37	0:0	4	->
water	97:39	0:0	4	time_base
water	97:48	0:0	4	;
water	101:8	0:0	4	s
op	101:9	0:0	4	->
water	101:11	0:0	4	avoid_negative_ts
op	101:29	0:0	4	=
water	101:31	0:0	4	ctx
op	101:34	0:0	4	->
water	101:36	0:0	4	avoid_negative_ts
water	101:53	0:0	4	;
if	102:8	103:28	4	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	102:12	102:37	5	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	102:12	0:0	6	st
op	102:14	0:0	6	->
water	102:16	0:0	6	codec
op	102:21	0:0	6	->
water	102:23	0:0	6	codec_type
op	102:34	0:0	6	==
water	102:37	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	103:12	103:28	5	
water	103:12	0:0	6	c
op	103:13	0:0	6	->
water	103:15	0:0	6	has_video
op	103:25	0:0	6	=
water	103:27	0:0	6	1
water	103:28	0:0	6	;
else	104:8	105:28	4
stmts	104:13	105:28	5	
if	104:13	105:28	6	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	104:17	104:42	7	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	104:17	0:0	8	st
op	104:19	0:0	8	->
water	104:21	0:0	8	codec
op	104:26	0:0	8	->
water	104:28	0:0	8	codec_type
op	104:39	0:0	8	==
water	104:42	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	105:12	105:28	7	
water	105:12	0:0	8	c
op	105:13	0:0	8	->
water	105:15	0:0	8	has_audio
op	105:25	0:0	8	=
water	105:27	0:0	8	1
water	105:28	0:0	8	;
call	106:8	106:72	4	set_codec_str
arg	106:22	106:23	5	s
water	106:22	0:0	6	s
arg	106:25	106:34	5	st->codec
water	106:25	0:0	6	st
op	106:27	0:0	6	->
water	106:29	0:0	6	codec
arg	106:36	106:49	5	os->codec_str
water	106:36	0:0	6	os
op	106:38	0:0	6	->
water	106:40	0:0	6	codec_str
arg	106:51	106:72	5	sizeof(os->codec_str)
op	106:51	0:0	6	sizeof
water	106:57	0:0	6	(
water	106:58	0:0	6	os
op	106:60	0:0	6	->
water	106:62	0:0	6	codec_str
water	106:71	0:0	6	)
water	106:73	0:0	4	;
water	107:8	0:0	4	os
op	107:10	0:0	4	->
water	107:12	0:0	4	first_pts
op	107:22	0:0	4	=
water	107:24	0:0	4	AV_NOPTS_VALUE
water	107:38	0:0	4	;
water	108:8	0:0	4	os
op	108:10	0:0	4	->
water	108:12	0:0	4	max_pts
op	108:20	0:0	4	=
water	108:22	0:0	4	AV_NOPTS_VALUE
water	108:36	0:0	4	;
water	109:8	0:0	4	os
op	109:10	0:0	4	->
water	109:12	0:0	4	last_dts
op	109:21	0:0	4	=
water	109:23	0:0	4	AV_NOPTS_VALUE
water	109:37	0:0	4	;
water	110:8	0:0	4	os
op	110:10	0:0	4	->
water	110:12	0:0	4	segment_index
op	110:26	0:0	4	=
water	110:28	0:0	4	1
water	110:29	0:0	4	;
water	111:4	0:0	4	}
if	112:4	115:4	2	(! c -> has_video && c -> min_seg_duration <= 0)
cond	112:8	112:48	3	! c -> has_video && c -> min_seg_duration <= 0
op	112:8	0:0	4	!
water	112:9	0:0	4	c
op	112:10	0:0	4	->
water	112:12	0:0	4	has_video
op	112:22	0:0	4	&&
water	112:25	0:0	4	c
op	112:26	0:0	4	->
water	112:28	0:0	4	min_seg_duration
op	112:45	0:0	4	<=
water	112:48	0:0	4	0
stmts	112:51	115:4	3	
water	112:51	0:0	4	{
call	113:8	113:81	4	av_log
arg	113:15	113:16	5	s
water	113:15	0:0	6	s
arg	113:18	113:32	5	AV_LOG_WARNING
water	113:18	0:0	6	AV_LOG_WARNING
arg	113:34	113:81	5	"no video stream and no min seg duration set\n"
water	113:34	0:0	6	"no video stream and no min seg duration set\n"
water	113:82	0:0	4	;
water	114:8	0:0	4	ret
op	114:12	0:0	4	=
call	114:14	114:28	4	AVERROR
arg	114:22	114:28	5	EINVAL
water	114:22	0:0	6	EINVAL
water	114:29	0:0	4	;
water	115:4	0:0	4	}
water	116:4	0:0	2	ret
op	116:8	0:0	2	=
call	116:10	116:29	2	write_manifest
arg	116:25	116:26	3	s
water	116:25	0:0	4	s
arg	116:28	116:29	3	0
water	116:28	0:0	4	0
water	116:30	0:0	2	;
if	117:4	118:75	2	(! ret)
cond	117:8	117:9	3	! ret
op	117:8	0:0	4	!
water	117:9	0:0	4	ret
stmts	118:8	118:75	3	
call	118:8	118:74	4	av_log
arg	118:15	118:16	5	s
water	118:15	0:0	6	s
arg	118:18	118:32	5	AV_LOG_VERBOSE
water	118:18	0:0	6	AV_LOG_VERBOSE
arg	118:34	118:61	5	"Manifest written to: %s\n"
water	118:34	0:0	6	"Manifest written to: %s\n"
arg	118:63	118:74	5	s->filename
water	118:63	0:0	6	s
op	118:64	0:0	6	->
water	118:66	0:0	6	filename
water	118:75	0:0	4	;
label	119:0	119:4	2	fail :
if	120:4	121:20	2	(ret)
cond	120:8	120:8	3	ret
water	120:8	0:0	4	ret
stmts	121:8	121:20	3	
call	121:8	121:19	4	dash_free
arg	121:18	121:19	5	s
water	121:18	0:0	6	s
water	121:20	0:0	4	;
return	122:4	122:14	2	ret
water	122:11	0:0	3	ret
