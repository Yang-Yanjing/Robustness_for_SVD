func	1:0	47:0	0	static int	decode_i_block
params	1:25	0:0	1	
param	1:26	1:41	2	FourXContext *	f
param	1:43	1:57	2	int16_t *	block
stmnts	0:0	46:12	1	
decl	3:4	3:30	2	int	code
water	3:12	0:0	2	,
decl	3:4	3:30	2	int	i
water	3:15	0:0	2	,
decl	3:4	3:30	2	int	j
water	3:18	0:0	2	,
decl	3:4	3:30	2	int	level
water	3:25	0:0	2	,
decl	3:4	3:30	2	int	val
if	4:4	7:4	2	(get_bits_left (& f -> gb ) < 2)
cond	4:8	4:32	3	get_bits_left (& f -> gb ) < 2
call	4:8	4:28	4	get_bits_left
arg	4:22	4:28	5	&f->gb
op	4:22	0:0	6	&
water	4:23	0:0	6	f
op	4:24	0:0	6	->
water	4:26	0:0	6	gb
op	4:30	0:0	4	<
water	4:32	0:0	4	2
stmts	4:34	7:4	3	
water	4:34	0:0	4	{
call	5:8	5:102	4	av_log
arg	5:15	5:23	5	f->avctx
water	5:15	0:0	6	f
op	5:16	0:0	6	->
water	5:18	0:0	6	avctx
arg	5:25	5:37	5	AV_LOG_ERROR
water	5:25	0:0	6	AV_LOG_ERROR
arg	5:39	5:79	5	"%d bits left before decode_i_block()\n"
water	5:39	0:0	6	"%d bits left before decode_i_block()\n"
arg	5:81	5:102	5	get_bits_left(&f->gb)
call	5:81	5:101	6	get_bits_left
arg	5:95	5:101	7	&f->gb
op	5:95	0:0	8	&
water	5:96	0:0	8	f
op	5:97	0:0	8	->
water	5:99	0:0	8	gb
water	5:103	0:0	4	;
return	6:8	6:17	4	-1
op	6:15	0:0	5	-
water	6:16	0:0	5	1
water	7:4	0:0	4	}
water	9:4	0:0	2	val
op	9:8	0:0	2	=
call	9:10	9:65	2	get_vlc2
arg	9:19	9:29	3	&f->pre_gb
op	9:19	0:0	4	&
water	9:20	0:0	4	f
op	9:21	0:0	4	->
water	9:23	0:0	4	pre_gb
arg	9:31	9:47	3	f->pre_vlc.table
water	9:31	0:0	4	f
op	9:32	0:0	4	->
water	9:34	0:0	4	pre_vlc
op	9:41	0:0	4	.
water	9:42	0:0	4	table
arg	9:49	9:62	3	ACDC_VLC_BITS
water	9:49	0:0	4	ACDC_VLC_BITS
arg	9:64	9:65	3	3
water	9:64	0:0	4	3
water	9:66	0:0	2	;
if	10:4	13:4	2	(val >> 4)
cond	10:8	10:15	3	val >> 4
water	10:8	0:0	4	val
op	10:12	0:0	4	>>
water	10:15	0:0	4	4
stmts	10:18	13:4	3	
water	10:18	0:0	4	{
call	11:8	11:60	4	av_log
arg	11:15	11:23	5	f->avctx
water	11:15	0:0	6	f
op	11:16	0:0	6	->
water	11:18	0:0	6	avctx
arg	11:25	11:37	5	AV_LOG_ERROR
water	11:25	0:0	6	AV_LOG_ERROR
arg	11:39	11:60	5	"error dc run != 0\n"
water	11:39	0:0	6	"error dc run != 0\n"
water	11:61	0:0	4	;
return	12:8	12:34	4	AVERROR_INVALIDDATA
water	12:15	0:0	5	AVERROR_INVALIDDATA
water	13:4	0:0	4	}
if	14:4	15:36	2	(val)
cond	14:8	14:8	3	val
water	14:8	0:0	4	val
stmts	15:8	15:36	3	
water	15:8	0:0	4	val
op	15:12	0:0	4	=
call	15:14	15:35	4	get_xbits
arg	15:24	15:30	5	&f->gb
op	15:24	0:0	6	&
water	15:25	0:0	6	f
op	15:26	0:0	6	->
water	15:28	0:0	6	gb
arg	15:32	15:35	5	val
water	15:32	0:0	6	val
water	15:36	0:0	4	;
water	16:4	0:0	2	val
op	16:15	0:0	2	=
water	16:17	0:0	2	val
op	16:21	0:0	2	*
water	16:23	0:0	2	dequant_table
op	16:36	0:0	2	[
water	16:37	0:0	2	0
op	16:38	0:0	2	]
op	16:40	0:0	2	+
water	16:42	0:0	2	f
op	16:43	0:0	2	->
water	16:45	0:0	2	last_dc
water	16:52	0:0	2	;
water	17:4	0:0	2	f
op	17:5	0:0	2	->
water	17:7	0:0	2	last_dc
op	17:15	0:0	2	=
water	17:17	0:0	2	block
op	17:22	0:0	2	[
water	17:23	0:0	2	0
op	17:24	0:0	2	]
op	17:26	0:0	2	=
water	17:28	0:0	2	val
water	17:31	0:0	2	;
water	19:4	0:0	2	i
op	19:6	0:0	2	=
water	19:8	0:0	2	1
water	19:9	0:0	2	;
for	20:4	45:4	2	(;;)
forinit	20:9	20:9	3	;
water	20:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	20:13	45:4	3	
water	20:13	0:0	4	{
water	21:8	0:0	4	code
op	21:13	0:0	4	=
call	21:15	21:70	4	get_vlc2
arg	21:24	21:34	5	&f->pre_gb
op	21:24	0:0	6	&
water	21:25	0:0	6	f
op	21:26	0:0	6	->
water	21:28	0:0	6	pre_gb
arg	21:36	21:52	5	f->pre_vlc.table
water	21:36	0:0	6	f
op	21:37	0:0	6	->
water	21:39	0:0	6	pre_vlc
op	21:46	0:0	6	.
water	21:47	0:0	6	table
arg	21:54	21:67	5	ACDC_VLC_BITS
water	21:54	0:0	6	ACDC_VLC_BITS
arg	21:69	21:70	5	3
water	21:69	0:0	6	3
water	21:71	0:0	4	;
if	23:8	24:17	4	(code == 0)
cond	23:12	23:20	5	code == 0
water	23:12	0:0	6	code
op	23:17	0:0	6	==
water	23:20	0:0	6	0
stmts	24:12	24:17	5	
break	24:12	24:17	6	
if	25:8	27:8	4	(code == 0 xf0)
cond	25:12	25:21	5	code == 0 xf0
water	25:12	0:0	6	code
op	25:17	0:0	6	==
water	25:20	0:0	6	0
water	25:21	0:0	6	xf0
stmts	25:26	27:8	5	
water	25:26	0:0	6	{
water	26:12	0:0	6	i
op	26:14	0:0	6	+=
water	26:17	0:0	6	16
water	26:19	0:0	6	;
water	27:8	0:0	6	}
else	27:10	44:8	4
stmts	27:15	44:8	5	
water	27:15	0:0	6	{
if	28:12	30:12	6	(code & 0 xf)
cond	28:16	28:24	7	code & 0 xf
water	28:16	0:0	8	code
op	28:21	0:0	8	&
water	28:23	0:0	8	0
water	28:24	0:0	8	xf
stmts	28:28	30:12	7	
water	28:28	0:0	8	{
water	29:16	0:0	8	level
op	29:22	0:0	8	=
call	29:24	29:52	8	get_xbits
arg	29:34	29:40	9	&f->gb
op	29:34	0:0	10	&
water	29:35	0:0	10	f
op	29:36	0:0	10	->
water	29:38	0:0	10	gb
arg	29:42	29:52	9	code&0xf
water	29:42	0:0	10	code
op	29:47	0:0	10	&
water	29:49	0:0	10	0
water	29:50	0:0	10	xf
water	29:53	0:0	8	;
water	30:12	0:0	8	}
else	30:14	33:12	6
stmts	30:19	33:12	7	
water	30:19	0:0	8	{
call	31:16	31:58	8	av_log
arg	31:23	31:31	9	f->avctx
water	31:23	0:0	10	f
op	31:24	0:0	10	->
water	31:26	0:0	10	avctx
arg	31:33	31:45	9	AV_LOG_ERROR
water	31:33	0:0	10	AV_LOG_ERROR
arg	31:47	31:58	9	"0 coeff\n"
water	31:47	0:0	10	"0 coeff\n"
water	31:59	0:0	8	;
return	32:16	32:42	8	AVERROR_INVALIDDATA
water	32:23	0:0	9	AVERROR_INVALIDDATA
water	33:12	0:0	8	}
water	34:12	0:0	6	i
op	34:17	0:0	6	+=
water	34:20	0:0	6	code
op	34:25	0:0	6	>>
water	34:28	0:0	6	4
water	34:29	0:0	6	;
if	35:12	38:12	6	(i >= 64)
cond	35:16	35:21	7	i >= 64
water	35:16	0:0	8	i
op	35:18	0:0	8	>=
water	35:21	0:0	8	64
stmts	35:25	38:12	7	
water	35:25	0:0	8	{
call	36:16	36:68	8	av_log
arg	36:23	36:31	9	f->avctx
water	36:23	0:0	10	f
op	36:24	0:0	10	->
water	36:26	0:0	10	avctx
arg	36:33	36:45	9	AV_LOG_ERROR
water	36:33	0:0	10	AV_LOG_ERROR
arg	36:47	36:65	9	"run %d oveflow\n"
water	36:47	0:0	10	"run %d oveflow\n"
arg	36:67	36:68	9	i
water	36:67	0:0	10	i
water	36:69	0:0	8	;
return	37:16	37:24	8	0
water	37:23	0:0	9	0
water	38:12	0:0	8	}
water	39:12	0:0	6	j
op	39:14	0:0	6	=
water	39:16	0:0	6	ff_zigzag_direct
op	39:32	0:0	6	[
water	39:33	0:0	6	i
op	39:34	0:0	6	]
water	39:35	0:0	6	;
water	40:12	0:0	6	block
op	40:17	0:0	6	[
water	40:18	0:0	6	j
op	40:19	0:0	6	]
op	40:21	0:0	6	=
water	40:23	0:0	6	level
op	40:29	0:0	6	*
water	40:31	0:0	6	dequant_table
op	40:44	0:0	6	[
water	40:45	0:0	6	j
op	40:46	0:0	6	]
water	40:47	0:0	6	;
water	41:12	0:0	6	i
op	41:13	0:0	6	++
water	41:15	0:0	6	;
if	42:12	43:21	6	(i >= 64)
cond	42:16	42:21	7	i >= 64
water	42:16	0:0	8	i
op	42:18	0:0	8	>=
water	42:21	0:0	8	64
stmts	43:16	43:21	7	
break	43:16	43:21	8	
water	44:8	0:0	6	}
water	45:4	0:0	4	}
return	46:4	46:12	2	0
water	46:11	0:0	3	0
