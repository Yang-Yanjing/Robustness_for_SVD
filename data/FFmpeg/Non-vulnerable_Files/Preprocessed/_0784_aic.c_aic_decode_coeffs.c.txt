func	1:0	44:0	0	static int	aic_decode_coeffs
params	1:28	0:0	1	
param	1:29	1:46	2	GetBitContext *	gb
param	1:48	1:60	2	int16_t *	dst
param	2:29	2:37	2	int	band
param	2:39	2:54	2	int	slice_width
param	2:56	2:72	2	int	force_chroma
stmnts	0:0	43:12	1	
decl	4:4	4:63	2	int	has_skips
water	4:17	0:0	2	,
decl	4:4	4:63	2	int	coeff_type
water	4:29	0:0	2	,
decl	4:4	4:63	2	int	coeff_bits
water	4:41	0:0	2	,
decl	4:4	4:63	2	int	skip_type
water	4:52	0:0	2	,
decl	4:4	4:63	2	int	skip_bits
decl	5:4	5:52	2	const int	num_coeffs
op	5:25	0:0	2	=
water	5:27	0:0	2	aic_num_band_coeffs
op	5:46	0:0	2	[
water	5:47	0:0	2	band
op	5:51	0:0	2	]
decl	6:4	6:55	2	const uint8_t	*scan
op	6:24	0:0	2	=
water	6:26	0:0	2	aic_scan
op	6:34	0:0	2	[
water	6:35	0:0	2	band
op	6:40	0:0	2	|
water	6:42	0:0	2	force_chroma
op	6:54	0:0	2	]
decl	7:4	7:15	2	int	mb
water	7:10	0:0	2	,
decl	7:4	7:15	2	int	idx
water	8:4	0:0	2	unsigned
water	8:13	0:0	2	val
water	8:16	0:0	2	;
water	9:4	0:0	2	has_skips
op	9:15	0:0	2	=
call	9:17	9:29	2	get_bits1
arg	9:27	9:29	3	gb
water	9:27	0:0	4	gb
water	9:30	0:0	2	;
water	10:4	0:0	2	coeff_type
op	10:15	0:0	2	=
call	10:17	10:29	2	get_bits1
arg	10:27	10:29	3	gb
water	10:27	0:0	4	gb
water	10:30	0:0	2	;
water	11:4	0:0	2	coeff_bits
op	11:15	0:0	2	=
call	11:17	11:31	2	get_bits
arg	11:26	11:28	3	gb
water	11:26	0:0	4	gb
arg	11:30	11:31	3	3
water	11:30	0:0	4	3
water	11:32	0:0	2	;
if	12:4	32:4	2	(has_skips)
cond	12:8	12:8	3	has_skips
water	12:8	0:0	4	has_skips
stmts	12:19	32:4	3	
water	12:19	0:0	4	{
water	13:8	0:0	4	skip_type
op	13:18	0:0	4	=
call	13:20	13:32	4	get_bits1
arg	13:30	13:32	5	gb
water	13:30	0:0	6	gb
water	13:33	0:0	4	;
water	14:8	0:0	4	skip_bits
op	14:18	0:0	4	=
call	14:20	14:34	4	get_bits
arg	14:29	14:31	5	gb
water	14:29	0:0	6	gb
arg	14:33	14:34	5	3
water	14:33	0:0	6	3
water	14:35	0:0	4	;
for	15:8	31:8	4	(mb = 0 ;mb < slice_width;mb ++)
forinit	15:13	15:19	5	mb = 0 ;
water	15:13	0:0	6	mb
op	15:16	0:0	6	=
water	15:18	0:0	6	0
water	15:19	0:0	6	;
cond	15:21	15:26	5	mb < slice_width
water	15:21	0:0	6	mb
op	15:24	0:0	6	<
water	15:26	0:0	6	slice_width
forexpr	15:39	15:41	5	mb ++
water	15:39	0:0	6	mb
op	15:41	0:0	6	++
stmts	15:45	31:8	5	
water	15:45	0:0	6	{
water	16:12	0:0	6	idx
op	16:16	0:0	6	=
op	16:18	0:0	6	-
water	16:19	0:0	6	1
water	16:20	0:0	6	;
do	17:12	29:12	6	(idx < num_coeffs - 1)
cond	29:21	29:40	7	idx < num_coeffs - 1
water	29:21	0:0	8	idx
op	29:25	0:0	8	<
water	29:27	0:0	8	num_coeffs
op	29:38	0:0	8	-
water	29:40	0:0	8	1
stmts	17:15	29:12	7	
water	17:15	0:0	8	{
call	18:16	18:50	8	GET_CODE
arg	18:25	18:28	9	val
water	18:25	0:0	10	val
arg	18:30	18:39	9	skip_type
water	18:30	0:0	10	skip_type
arg	18:41	18:50	9	skip_bits
water	18:41	0:0	10	skip_bits
water	18:51	0:0	8	;
if	19:16	20:46	8	(val >= 0 x10000)
cond	19:20	19:28	9	val >= 0 x10000
water	19:20	0:0	10	val
op	19:24	0:0	10	>=
water	19:27	0:0	10	0
water	19:28	0:0	10	x10000
stmts	20:20	20:46	9	
return	20:20	20:46	10	AVERROR_INVALIDDATA
water	20:27	0:0	11	AVERROR_INVALIDDATA
water	21:16	0:0	8	idx
op	21:20	0:0	8	+=
water	21:23	0:0	8	val
op	21:27	0:0	8	+
water	21:29	0:0	8	1
water	21:30	0:0	8	;
if	22:16	23:25	8	(idx >= num_coeffs)
cond	22:20	22:27	9	idx >= num_coeffs
water	22:20	0:0	10	idx
op	22:24	0:0	10	>=
water	22:27	0:0	10	num_coeffs
stmts	23:20	23:25	9	
break	23:20	23:25	10	
call	24:16	24:52	8	GET_CODE
arg	24:25	24:28	9	val
water	24:25	0:0	10	val
arg	24:30	24:40	9	coeff_type
water	24:30	0:0	10	coeff_type
arg	24:42	24:52	9	coeff_bits
water	24:42	0:0	10	coeff_bits
water	24:53	0:0	8	;
water	25:16	0:0	8	val
op	25:19	0:0	8	++
water	25:21	0:0	8	;
if	26:16	27:46	8	(val >= 0 x10000)
cond	26:20	26:28	9	val >= 0 x10000
water	26:20	0:0	10	val
op	26:24	0:0	10	>=
water	26:27	0:0	10	0
water	26:28	0:0	10	x10000
stmts	27:20	27:46	9	
return	27:20	27:46	10	AVERROR_INVALIDDATA
water	27:27	0:0	11	AVERROR_INVALIDDATA
water	28:16	0:0	8	dst
op	28:19	0:0	8	[
water	28:20	0:0	8	scan
op	28:24	0:0	8	[
water	28:25	0:0	8	idx
op	28:28	0:0	8	]
op	28:29	0:0	8	]
op	28:31	0:0	8	=
water	28:33	0:0	8	val
water	28:36	0:0	8	;
water	29:12	0:0	8	}
water	29:42	0:0	6	;
water	30:12	0:0	6	dst
op	30:16	0:0	6	+=
water	30:19	0:0	6	num_coeffs
water	30:29	0:0	6	;
water	31:8	0:0	6	}
water	32:4	0:0	4	}
else	32:6	42:4	2
stmts	32:11	42:4	3	
water	32:11	0:0	4	{
for	33:8	41:8	4	(mb = 0 ;mb < slice_width;mb ++)
forinit	33:13	33:19	5	mb = 0 ;
water	33:13	0:0	6	mb
op	33:16	0:0	6	=
water	33:18	0:0	6	0
water	33:19	0:0	6	;
cond	33:21	33:26	5	mb < slice_width
water	33:21	0:0	6	mb
op	33:24	0:0	6	<
water	33:26	0:0	6	slice_width
forexpr	33:39	33:41	5	mb ++
water	33:39	0:0	6	mb
op	33:41	0:0	6	++
stmts	33:45	41:8	5	
water	33:45	0:0	6	{
for	34:12	39:12	6	(idx = 0 ;idx < num_coeffs;idx ++)
forinit	34:17	34:24	7	idx = 0 ;
water	34:17	0:0	8	idx
op	34:21	0:0	8	=
water	34:23	0:0	8	0
water	34:24	0:0	8	;
cond	34:26	34:32	7	idx < num_coeffs
water	34:26	0:0	8	idx
op	34:30	0:0	8	<
water	34:32	0:0	8	num_coeffs
forexpr	34:44	34:47	7	idx ++
water	34:44	0:0	8	idx
op	34:47	0:0	8	++
stmts	34:51	39:12	7	
water	34:51	0:0	8	{
call	35:16	35:52	8	GET_CODE
arg	35:25	35:28	9	val
water	35:25	0:0	10	val
arg	35:30	35:40	9	coeff_type
water	35:30	0:0	10	coeff_type
arg	35:42	35:52	9	coeff_bits
water	35:42	0:0	10	coeff_bits
water	35:53	0:0	8	;
if	36:16	37:46	8	(val >= 0 x10000)
cond	36:20	36:28	9	val >= 0 x10000
water	36:20	0:0	10	val
op	36:24	0:0	10	>=
water	36:27	0:0	10	0
water	36:28	0:0	10	x10000
stmts	37:20	37:46	9	
return	37:20	37:46	10	AVERROR_INVALIDDATA
water	37:27	0:0	11	AVERROR_INVALIDDATA
water	38:16	0:0	8	dst
op	38:19	0:0	8	[
water	38:20	0:0	8	scan
op	38:24	0:0	8	[
water	38:25	0:0	8	idx
op	38:28	0:0	8	]
op	38:29	0:0	8	]
op	38:31	0:0	8	=
water	38:33	0:0	8	val
water	38:36	0:0	8	;
water	39:12	0:0	8	}
water	40:12	0:0	6	dst
op	40:16	0:0	6	+=
water	40:19	0:0	6	num_coeffs
water	40:29	0:0	6	;
water	41:8	0:0	6	}
water	42:4	0:0	4	}
return	43:4	43:12	2	0
water	43:11	0:0	3	0
