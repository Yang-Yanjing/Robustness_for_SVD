func	1:0	50:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:64	2	AVFrame *	insamples
stmnts	0:0	49:59	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:43	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	outputs
op	4:40	0:0	2	[
water	4:41	0:0	2	0
op	4:42	0:0	2	]
decl	5:4	5:36	2	ShowVolumeContext	*s
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	priv
decl	6:4	6:18	2	int	c
water	6:9	0:0	2	,
decl	6:4	6:18	2	int	i
water	6:12	0:0	2	,
decl	6:4	6:18	2	int	j
water	6:15	0:0	2	,
decl	6:4	6:18	2	int	k
decl	7:4	7:30	2	double	values[VAR_VARS_NB]
if	8:4	18:4	2	(! s -> out || s -> out -> width != outlink -> w || s -> out -> height != outlink -> h)
cond	8:8	9:46	3	! s -> out || s -> out -> width != outlink -> w || s -> out -> height != outlink -> h
op	8:8	0:0	4	!
water	8:9	0:0	4	s
op	8:10	0:0	4	->
water	8:12	0:0	4	out
op	8:16	0:0	4	||
water	8:19	0:0	4	s
op	8:20	0:0	4	->
water	8:22	0:0	4	out
op	8:25	0:0	4	->
water	8:27	0:0	4	width
op	8:34	0:0	4	!=
water	8:37	0:0	4	outlink
op	8:44	0:0	4	->
water	8:46	0:0	4	w
op	8:48	0:0	4	||
water	9:19	0:0	4	s
op	9:20	0:0	4	->
water	9:22	0:0	4	out
op	9:25	0:0	4	->
water	9:27	0:0	4	height
op	9:34	0:0	4	!=
water	9:37	0:0	4	outlink
op	9:44	0:0	4	->
water	9:46	0:0	4	h
stmts	9:49	18:4	3	
water	9:49	0:0	4	{
call	10:8	10:29	4	av_frame_free
arg	10:22	10:29	5	&s->out
op	10:22	0:0	6	&
water	10:23	0:0	6	s
op	10:24	0:0	6	->
water	10:26	0:0	6	out
water	10:30	0:0	4	;
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	out
op	11:15	0:0	4	=
call	11:17	11:68	4	ff_get_video_buffer
arg	11:37	11:44	5	outlink
water	11:37	0:0	6	outlink
arg	11:46	11:56	5	outlink->w
water	11:46	0:0	6	outlink
op	11:53	0:0	6	->
water	11:55	0:0	6	w
arg	11:58	11:68	5	outlink->h
water	11:58	0:0	6	outlink
op	11:65	0:0	6	->
water	11:67	0:0	6	h
water	11:69	0:0	4	;
if	12:8	15:8	4	(! s -> out)
cond	12:12	12:16	5	! s -> out
op	12:12	0:0	6	!
water	12:13	0:0	6	s
op	12:14	0:0	6	->
water	12:16	0:0	6	out
stmts	12:21	15:8	5	
water	12:21	0:0	6	{
call	13:12	13:36	6	av_frame_free
arg	13:26	13:36	7	&insamples
op	13:26	0:0	8	&
water	13:27	0:0	8	insamples
water	13:37	0:0	6	;
return	14:12	14:34	6	AVERROR(ENOMEM)
call	14:19	14:33	7	AVERROR
arg	14:27	14:33	8	ENOMEM
water	14:27	0:0	9	ENOMEM
water	15:8	0:0	6	}
for	16:8	17:80	4	(i = 0 ;i < outlink -> h;i ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:33	5	i < outlink -> h
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	outlink
op	16:31	0:0	6	->
water	16:33	0:0	6	h
forexpr	16:36	16:37	5	i ++
water	16:36	0:0	6	i
op	16:37	0:0	6	++
stmts	17:12	17:80	5	
call	17:12	17:79	6	memset
arg	17:19	17:60	7	s->out->data[0]+i*s->out->linesize[0]
water	17:19	0:0	8	s
op	17:20	0:0	8	->
water	17:22	0:0	8	out
op	17:25	0:0	8	->
water	17:27	0:0	8	data
op	17:31	0:0	8	[
water	17:32	0:0	8	0
op	17:33	0:0	8	]
op	17:35	0:0	8	+
water	17:37	0:0	8	i
op	17:39	0:0	8	*
water	17:41	0:0	8	s
op	17:42	0:0	8	->
water	17:44	0:0	8	out
op	17:47	0:0	8	->
water	17:49	0:0	8	linesize
op	17:57	0:0	8	[
water	17:58	0:0	8	0
op	17:59	0:0	8	]
arg	17:62	17:63	7	0
water	17:62	0:0	8	0
arg	17:65	17:79	7	outlink->w*4
water	17:65	0:0	8	outlink
op	17:72	0:0	8	->
water	17:74	0:0	8	w
op	17:76	0:0	8	*
water	17:78	0:0	8	4
water	17:80	0:0	6	;
water	18:4	0:0	4	}
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	out
op	19:10	0:0	2	->
water	19:12	0:0	2	pts
op	19:16	0:0	2	=
water	19:18	0:0	2	insamples
op	19:27	0:0	2	->
water	19:29	0:0	2	pts
water	19:32	0:0	2	;
for	20:4	28:4	2	(j = 0 ;j < outlink -> h;j ++)
forinit	20:9	20:14	3	j = 0 ;
water	20:9	0:0	4	j
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:29	3	j < outlink -> h
water	20:16	0:0	4	j
op	20:18	0:0	4	<
water	20:20	0:0	4	outlink
op	20:27	0:0	4	->
water	20:29	0:0	4	h
forexpr	20:32	20:33	3	j ++
water	20:32	0:0	4	j
op	20:33	0:0	4	++
stmts	20:37	28:4	3	
water	20:37	0:0	4	{
decl	21:8	21:64	4	uint8_t	*dst
op	21:21	0:0	4	=
water	21:23	0:0	4	s
op	21:24	0:0	4	->
water	21:26	0:0	4	out
op	21:29	0:0	4	->
water	21:31	0:0	4	data
op	21:35	0:0	4	[
water	21:36	0:0	4	0
op	21:37	0:0	4	]
op	21:39	0:0	4	+
water	21:41	0:0	4	j
op	21:43	0:0	4	*
water	21:45	0:0	4	s
op	21:46	0:0	4	->
water	21:48	0:0	4	out
op	21:51	0:0	4	->
water	21:53	0:0	4	linesize
op	21:61	0:0	4	[
water	21:62	0:0	4	0
op	21:63	0:0	4	]
for	22:8	27:8	4	(k = 0 ;k < s -> w;k ++)
forinit	22:13	22:18	5	k = 0 ;
water	22:13	0:0	6	k
op	22:15	0:0	6	=
water	22:17	0:0	6	0
water	22:18	0:0	6	;
cond	22:20	22:27	5	k < s -> w
water	22:20	0:0	6	k
op	22:22	0:0	6	<
water	22:24	0:0	6	s
op	22:25	0:0	6	->
water	22:27	0:0	6	w
forexpr	22:30	22:31	5	k ++
water	22:30	0:0	6	k
op	22:31	0:0	6	++
stmts	22:35	27:8	5	
water	22:35	0:0	6	{
water	23:12	0:0	6	dst
op	23:15	0:0	6	[
water	23:16	0:0	6	k
op	23:18	0:0	6	*
water	23:20	0:0	6	4
op	23:22	0:0	6	+
water	23:24	0:0	6	0
op	23:25	0:0	6	]
op	23:27	0:0	6	=
call	23:29	23:59	6	FFMAX
arg	23:35	23:56	7	dst[k*4+0]-s->f
water	23:35	0:0	8	dst
op	23:38	0:0	8	[
water	23:39	0:0	8	k
op	23:41	0:0	8	*
water	23:43	0:0	8	4
op	23:45	0:0	8	+
water	23:47	0:0	8	0
op	23:48	0:0	8	]
op	23:50	0:0	8	-
water	23:52	0:0	8	s
op	23:53	0:0	8	->
water	23:55	0:0	8	f
arg	23:58	23:59	7	0
water	23:58	0:0	8	0
water	23:60	0:0	6	;
water	24:12	0:0	6	dst
op	24:15	0:0	6	[
water	24:16	0:0	6	k
op	24:18	0:0	6	*
water	24:20	0:0	6	4
op	24:22	0:0	6	+
water	24:24	0:0	6	1
op	24:25	0:0	6	]
op	24:27	0:0	6	=
call	24:29	24:59	6	FFMAX
arg	24:35	24:56	7	dst[k*4+1]-s->f
water	24:35	0:0	8	dst
op	24:38	0:0	8	[
water	24:39	0:0	8	k
op	24:41	0:0	8	*
water	24:43	0:0	8	4
op	24:45	0:0	8	+
water	24:47	0:0	8	1
op	24:48	0:0	8	]
op	24:50	0:0	8	-
water	24:52	0:0	8	s
op	24:53	0:0	8	->
water	24:55	0:0	8	f
arg	24:58	24:59	7	0
water	24:58	0:0	8	0
water	24:60	0:0	6	;
water	25:12	0:0	6	dst
op	25:15	0:0	6	[
water	25:16	0:0	6	k
op	25:18	0:0	6	*
water	25:20	0:0	6	4
op	25:22	0:0	6	+
water	25:24	0:0	6	2
op	25:25	0:0	6	]
op	25:27	0:0	6	=
call	25:29	25:59	6	FFMAX
arg	25:35	25:56	7	dst[k*4+2]-s->f
water	25:35	0:0	8	dst
op	25:38	0:0	8	[
water	25:39	0:0	8	k
op	25:41	0:0	8	*
water	25:43	0:0	8	4
op	25:45	0:0	8	+
water	25:47	0:0	8	2
op	25:48	0:0	8	]
op	25:50	0:0	8	-
water	25:52	0:0	8	s
op	25:53	0:0	8	->
water	25:55	0:0	8	f
arg	25:58	25:59	7	0
water	25:58	0:0	8	0
water	25:60	0:0	6	;
water	26:12	0:0	6	dst
op	26:15	0:0	6	[
water	26:16	0:0	6	k
op	26:18	0:0	6	*
water	26:20	0:0	6	4
op	26:22	0:0	6	+
water	26:24	0:0	6	3
op	26:25	0:0	6	]
op	26:27	0:0	6	=
call	26:29	26:59	6	FFMAX
arg	26:35	26:56	7	dst[k*4+3]-s->f
water	26:35	0:0	8	dst
op	26:38	0:0	8	[
water	26:39	0:0	8	k
op	26:41	0:0	8	*
water	26:43	0:0	8	4
op	26:45	0:0	8	+
water	26:47	0:0	8	3
op	26:48	0:0	8	]
op	26:50	0:0	8	-
water	26:52	0:0	8	s
op	26:53	0:0	8	->
water	26:55	0:0	8	f
arg	26:58	26:59	7	0
water	26:58	0:0	8	0
water	26:60	0:0	6	;
water	27:8	0:0	6	}
water	28:4	0:0	4	}
for	29:4	47:4	2	(c = 0 ;c < inlink -> channels;c ++)
forinit	29:9	29:14	3	c = 0 ;
water	29:9	0:0	4	c
op	29:11	0:0	4	=
water	29:13	0:0	4	0
water	29:14	0:0	4	;
cond	29:16	29:28	3	c < inlink -> channels
water	29:16	0:0	4	c
op	29:18	0:0	4	<
water	29:20	0:0	4	inlink
op	29:26	0:0	4	->
water	29:28	0:0	4	channels
forexpr	29:38	29:39	3	c ++
water	29:38	0:0	4	c
op	29:39	0:0	4	++
stmts	29:43	47:4	3	
water	29:43	0:0	4	{
decl	30:8	30:57	4	float	*src
op	30:19	0:0	4	=
water	30:21	0:0	4	(
water	30:22	0:0	4	float
op	30:28	0:0	4	*
water	30:29	0:0	4	)
water	30:30	0:0	4	insamples
op	30:39	0:0	4	->
water	30:41	0:0	4	extended_data
op	30:54	0:0	4	[
water	30:55	0:0	4	c
op	30:56	0:0	4	]
decl	31:8	31:21	4	float	max
op	31:18	0:0	4	=
water	31:20	0:0	4	0
decl	32:8	32:22	4	uint32_t	color
for	33:8	34:36	4	(i = 0 ;i < insamples -> nb_samples;i ++)
forinit	33:13	33:18	5	i = 0 ;
water	33:13	0:0	6	i
op	33:15	0:0	6	=
water	33:17	0:0	6	0
water	33:18	0:0	6	;
cond	33:20	33:35	5	i < insamples -> nb_samples
water	33:20	0:0	6	i
op	33:22	0:0	6	<
water	33:24	0:0	6	insamples
op	33:33	0:0	6	->
water	33:35	0:0	6	nb_samples
forexpr	33:47	33:48	5	i ++
water	33:47	0:0	6	i
op	33:48	0:0	6	++
stmts	34:12	34:36	5	
water	34:12	0:0	6	max
op	34:16	0:0	6	=
call	34:18	34:35	6	FFMAX
arg	34:24	34:27	7	max
water	34:24	0:0	8	max
arg	34:29	34:35	7	src[i]
water	34:29	0:0	8	src
op	34:32	0:0	8	[
water	34:33	0:0	8	i
op	34:34	0:0	8	]
water	34:36	0:0	6	;
water	35:8	0:0	4	max
op	35:12	0:0	4	=
call	35:14	35:32	4	av_clipf
arg	35:23	35:26	5	max
water	35:23	0:0	6	max
arg	35:28	35:29	5	0
water	35:28	0:0	6	0
arg	35:31	35:32	5	1
water	35:31	0:0	6	1
water	35:33	0:0	4	;
water	36:8	0:0	4	values
op	36:14	0:0	4	[
water	36:15	0:0	4	VAR_VOLUME
op	36:25	0:0	4	]
op	36:27	0:0	4	=
water	36:29	0:0	4	20
op	36:31	0:0	4	.
water	36:32	0:0	4	0
call	36:34	36:43	4	*log
arg	36:40	36:43	5	max
water	36:40	0:0	6	max
op	36:45	0:0	4	/
water	36:47	0:0	4	M_LN10
water	36:53	0:0	4	;
water	37:8	0:0	4	values
op	37:14	0:0	4	[
water	37:15	0:0	4	VAR_CHANNEL
op	37:26	0:0	4	]
op	37:28	0:0	4	=
water	37:30	0:0	4	c
water	37:31	0:0	4	;
water	38:8	0:0	4	color
op	38:14	0:0	4	=
call	38:16	38:52	4	av_expr_eval
arg	38:29	38:38	5	s->c_expr
water	38:29	0:0	6	s
op	38:30	0:0	6	->
water	38:32	0:0	6	c_expr
arg	38:40	38:46	5	values
water	38:40	0:0	6	values
arg	38:48	38:52	5	NULL
water	38:48	0:0	6	NULL
water	38:53	0:0	4	;
for	39:8	43:8	4	(j = 0 ;j < s -> h;j ++)
forinit	39:13	39:18	5	j = 0 ;
water	39:13	0:0	6	j
op	39:15	0:0	6	=
water	39:17	0:0	6	0
water	39:18	0:0	6	;
cond	39:20	39:27	5	j < s -> h
water	39:20	0:0	6	j
op	39:22	0:0	6	<
water	39:24	0:0	6	s
op	39:25	0:0	6	->
water	39:27	0:0	6	h
forexpr	39:30	39:31	5	j ++
water	39:30	0:0	6	j
op	39:31	0:0	6	++
stmts	39:35	43:8	5	
water	39:35	0:0	6	{
decl	40:12	40:92	6	uint8_t	*dst
op	40:25	0:0	6	=
water	40:27	0:0	6	s
op	40:28	0:0	6	->
water	40:30	0:0	6	out
op	40:33	0:0	6	->
water	40:35	0:0	6	data
op	40:39	0:0	6	[
water	40:40	0:0	6	0
op	40:41	0:0	6	]
op	40:43	0:0	6	+
water	40:45	0:0	6	(
water	40:46	0:0	6	c
op	40:48	0:0	6	*
water	40:50	0:0	6	s
op	40:51	0:0	6	->
water	40:53	0:0	6	h
op	40:55	0:0	6	+
water	40:57	0:0	6	c
op	40:59	0:0	6	*
water	40:61	0:0	6	s
op	40:62	0:0	6	->
water	40:64	0:0	6	b
op	40:66	0:0	6	+
water	40:68	0:0	6	j
water	40:69	0:0	6	)
op	40:71	0:0	6	*
water	40:73	0:0	6	s
op	40:74	0:0	6	->
water	40:76	0:0	6	out
op	40:79	0:0	6	->
water	40:81	0:0	6	linesize
op	40:89	0:0	6	[
water	40:90	0:0	6	0
op	40:91	0:0	6	]
for	41:12	42:44	6	(k = 0 ;k < s -> w * max;k ++)
forinit	41:17	41:22	7	k = 0 ;
water	41:17	0:0	8	k
op	41:19	0:0	8	=
water	41:21	0:0	8	0
water	41:22	0:0	8	;
cond	41:24	41:35	7	k < s -> w * max
water	41:24	0:0	8	k
op	41:26	0:0	8	<
water	41:28	0:0	8	s
op	41:29	0:0	8	->
water	41:31	0:0	8	w
op	41:33	0:0	8	*
water	41:35	0:0	8	max
forexpr	41:40	41:41	7	k ++
water	41:40	0:0	8	k
op	41:41	0:0	8	++
stmts	42:16	42:44	7	
call	42:16	42:43	8	AV_WN32A
arg	42:25	42:36	9	dst+k*4
water	42:25	0:0	10	dst
op	42:29	0:0	10	+
water	42:31	0:0	10	k
op	42:33	0:0	10	*
water	42:35	0:0	10	4
arg	42:38	42:43	9	color
water	42:38	0:0	10	color
water	42:44	0:0	8	;
water	43:8	0:0	6	}
if	44:8	46:106	4	(s -> h >= 8 && s -> draw_text)
cond	44:12	44:28	5	s -> h >= 8 && s -> draw_text
water	44:12	0:0	6	s
op	44:13	0:0	6	->
water	44:15	0:0	6	h
op	44:17	0:0	6	>=
water	44:20	0:0	6	8
op	44:22	0:0	6	&&
water	44:25	0:0	6	s
op	44:26	0:0	6	->
water	44:28	0:0	6	draw_text
stmts	45:12	46:106	5	
call	45:12	46:105	6	drawtext
arg	45:21	45:27	7	s->out
water	45:21	0:0	8	s
op	45:22	0:0	8	->
water	45:24	0:0	8	out
arg	45:29	45:30	7	2
water	45:29	0:0	8	2
arg	45:32	45:66	7	c*(s->h+s->b)+(s->h-8)/2
water	45:32	0:0	8	c
op	45:34	0:0	8	*
water	45:36	0:0	8	(
water	45:37	0:0	8	s
op	45:38	0:0	8	->
water	45:40	0:0	8	h
op	45:42	0:0	8	+
water	45:44	0:0	8	s
op	45:45	0:0	8	->
water	45:47	0:0	8	b
water	45:48	0:0	8	)
op	45:50	0:0	8	+
water	45:52	0:0	8	(
water	45:53	0:0	8	s
op	45:54	0:0	8	->
water	45:56	0:0	8	h
op	45:58	0:0	8	-
water	45:60	0:0	8	8
water	45:61	0:0	8	)
op	45:63	0:0	8	/
water	45:65	0:0	8	2
arg	46:21	46:105	7	av_get_channel_name(av_channel_layout_extract_channel(insamples->channel_layout,c))
call	46:21	46:104	8	av_get_channel_name
arg	46:41	46:104	9	av_channel_layout_extract_channel(insamples->channel_layout,c)
call	46:41	46:103	10	av_channel_layout_extract_channel
arg	46:75	46:100	11	insamples->channel_layout
water	46:75	0:0	12	insamples
op	46:84	0:0	12	->
water	46:86	0:0	12	channel_layout
arg	46:102	46:103	11	c
water	46:102	0:0	12	c
water	46:106	0:0	6	;
water	47:4	0:0	4	}
call	48:4	48:28	2	av_frame_free
arg	48:18	48:28	3	&insamples
op	48:18	0:0	4	&
water	48:19	0:0	4	insamples
water	48:29	0:0	2	;
return	49:4	49:59	2	ff_filter_frame(outlink,av_frame_clone(s->out))
call	49:11	49:58	3	ff_filter_frame
arg	49:27	49:34	4	outlink
water	49:27	0:0	5	outlink
arg	49:36	49:58	4	av_frame_clone(s->out)
call	49:36	49:57	5	av_frame_clone
arg	49:51	49:57	6	s->out
water	49:51	0:0	7	s
op	49:52	0:0	7	->
water	49:54	0:0	7	out
