func	1:0	37:0	0	static int	write_number
params	1:23	0:0	1	
param	1:24	1:33	2	void *	obj
param	1:35	1:52	2	const AVOption *	o
param	1:54	1:63	2	void *	dst
param	1:65	1:75	2	double	num
param	1:77	1:84	2	int	den
param	1:86	1:100	2	int64_t	intnum
stmnts	3:4	36:12	1	
if	3:4	9:4	2	(o -> type != AV_OPT_TYPE_FLAGS && ( o -> max * den < num * intnum || o -> min * den > num * intnum ))
cond	3:8	4:67	3	o -> type != AV_OPT_TYPE_FLAGS && ( o -> max * den < num * intnum || o -> min * den > num * intnum )
water	3:8	0:0	4	o
op	3:9	0:0	4	->
water	3:11	0:0	4	type
op	3:16	0:0	4	!=
water	3:19	0:0	4	AV_OPT_TYPE_FLAGS
op	3:37	0:0	4	&&
water	4:8	0:0	4	(
water	4:9	0:0	4	o
op	4:10	0:0	4	->
water	4:12	0:0	4	max
op	4:16	0:0	4	*
water	4:18	0:0	4	den
op	4:22	0:0	4	<
water	4:24	0:0	4	num
op	4:28	0:0	4	*
water	4:30	0:0	4	intnum
op	4:37	0:0	4	||
water	4:40	0:0	4	o
op	4:41	0:0	4	->
water	4:43	0:0	4	min
op	4:47	0:0	4	*
water	4:49	0:0	4	den
op	4:53	0:0	4	>
water	4:55	0:0	4	num
op	4:59	0:0	4	*
water	4:61	0:0	4	intnum
water	4:67	0:0	4	)
stmts	4:70	9:4	3	
water	4:70	0:0	4	{
water	5:8	0:0	4	num
op	5:12	0:0	4	=
water	5:14	0:0	4	den
water	5:18	0:0	4	?
water	5:20	0:0	4	num
op	5:23	0:0	4	*
water	5:24	0:0	4	intnum
op	5:30	0:0	4	/
water	5:31	0:0	4	den
water	5:35	0:0	4	:
water	5:37	0:0	4	(
water	5:38	0:0	4	num
op	5:41	0:0	4	*
water	5:42	0:0	4	intnum
water	5:49	0:0	4	?
water	5:51	0:0	4	INFINITY
water	5:60	0:0	4	:
water	5:62	0:0	4	NAN
water	5:65	0:0	4	)
water	5:66	0:0	4	;
call	6:8	7:43	4	av_log
arg	6:15	6:18	5	obj
water	6:15	0:0	6	obj
arg	6:20	6:32	5	AV_LOG_ERROR
water	6:20	0:0	6	AV_LOG_ERROR
arg	6:34	6:88	5	"Value %f for parameter '%s' out of range [%g - %g]\n"
water	6:34	0:0	6	"Value %f for parameter '%s' out of range [%g - %g]\n"
arg	7:15	7:18	5	num
water	7:15	0:0	6	num
arg	7:20	7:27	5	o->name
water	7:20	0:0	6	o
op	7:21	0:0	6	->
water	7:23	0:0	6	name
arg	7:29	7:35	5	o->min
water	7:29	0:0	6	o
op	7:30	0:0	6	->
water	7:32	0:0	6	min
arg	7:37	7:43	5	o->max
water	7:37	0:0	6	o
op	7:38	0:0	6	->
water	7:40	0:0	6	max
water	7:44	0:0	4	;
return	8:8	8:30	4	AVERROR(ERANGE)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	ERANGE
water	8:23	0:0	7	ERANGE
water	9:4	0:0	4	}
if	10:4	18:4	2	(o -> type == AV_OPT_TYPE_FLAGS)
cond	10:8	10:19	3	o -> type == AV_OPT_TYPE_FLAGS
water	10:8	0:0	4	o
op	10:9	0:0	4	->
water	10:11	0:0	4	type
op	10:16	0:0	4	==
water	10:19	0:0	4	AV_OPT_TYPE_FLAGS
stmts	10:38	18:4	3	
water	10:38	0:0	4	{
decl	11:8	11:33	4	double	d
op	11:17	0:0	4	=
water	11:19	0:0	4	num
op	11:22	0:0	4	*
water	11:23	0:0	4	intnum
op	11:29	0:0	4	/
water	11:30	0:0	4	den
if	12:8	17:8	4	(d < - 1 . 5 || d > 0 xFFFFFFFF + 0 . 5 || (llrint (d * 256 ) & 255 ))
cond	12:12	12:66	5	d < - 1 . 5 || d > 0 xFFFFFFFF + 0 . 5 || (llrint (d * 256 ) & 255 )
water	12:12	0:0	6	d
op	12:14	0:0	6	<
op	12:16	0:0	6	-
water	12:17	0:0	6	1
op	12:18	0:0	6	.
water	12:19	0:0	6	5
op	12:21	0:0	6	||
water	12:24	0:0	6	d
op	12:26	0:0	6	>
water	12:28	0:0	6	0
water	12:29	0:0	6	xFFFFFFFF
op	12:38	0:0	6	+
water	12:39	0:0	6	0
op	12:40	0:0	6	.
water	12:41	0:0	6	5
op	12:43	0:0	6	||
water	12:46	0:0	6	(
call	12:47	12:59	6	llrint
arg	12:54	12:59	7	d*256
water	12:54	0:0	8	d
op	12:55	0:0	8	*
water	12:56	0:0	8	256
op	12:61	0:0	6	&
water	12:63	0:0	6	255
water	12:66	0:0	6	)
stmts	12:69	17:8	5	
water	12:69	0:0	6	{
call	13:12	15:42	6	av_log
arg	13:19	13:22	7	obj
water	13:19	0:0	8	obj
arg	13:24	13:36	7	AV_LOG_ERROR
water	13:24	0:0	8	AV_LOG_ERROR
arg	14:19	14:92	7	"Value %f for parameter '%s' is not a valid set of 32bit integer flags\n"
water	14:19	0:0	8	"Value %f for parameter '%s' is not a valid set of 32bit integer flags\n"
arg	15:19	15:33	7	num*intnum/den
water	15:19	0:0	8	num
op	15:22	0:0	8	*
water	15:23	0:0	8	intnum
op	15:29	0:0	8	/
water	15:30	0:0	8	den
arg	15:35	15:42	7	o->name
water	15:35	0:0	8	o
op	15:36	0:0	8	->
water	15:38	0:0	8	name
water	15:43	0:0	6	;
return	16:12	16:34	6	AVERROR(ERANGE)
call	16:19	16:33	7	AVERROR
arg	16:27	16:33	8	ERANGE
water	16:27	0:0	9	ERANGE
water	17:8	0:0	6	}
water	18:4	0:0	4	}
switch	19:4	35:4	2	(o -> type)
cond	19:12	19:15	3	o -> type
water	19:12	0:0	4	o
op	19:13	0:0	4	->
water	19:15	0:0	4	type
stmts	19:21	35:4	3	
water	19:21	0:0	4	{
label	20:4	20:30	4	case AV_OPT_TYPE_PIXEL_FMT :
op	20:32	0:0	4	*
water	20:33	0:0	4	(
water	20:34	0:0	4	enum
water	20:39	0:0	4	AVPixelFormat
op	20:53	0:0	4	*
water	20:54	0:0	4	)
water	20:55	0:0	4	dst
op	20:59	0:0	4	=
call	20:61	20:75	4	llrint
arg	20:68	20:75	5	num/den
water	20:68	0:0	6	num
op	20:71	0:0	6	/
water	20:72	0:0	6	den
op	20:77	0:0	4	*
water	20:79	0:0	4	intnum
water	20:85	0:0	4	;
break	20:87	20:92	4	
label	21:4	21:31	4	case AV_OPT_TYPE_SAMPLE_FMT :
op	21:32	0:0	4	*
water	21:33	0:0	4	(
water	21:34	0:0	4	enum
water	21:39	0:0	4	AVSampleFormat
op	21:53	0:0	4	*
water	21:54	0:0	4	)
water	21:55	0:0	4	dst
op	21:59	0:0	4	=
call	21:61	21:75	4	llrint
arg	21:68	21:75	5	num/den
water	21:68	0:0	6	num
op	21:71	0:0	6	/
water	21:72	0:0	6	den
op	21:77	0:0	4	*
water	21:79	0:0	4	intnum
water	21:85	0:0	4	;
break	21:87	21:92	4	
label	22:4	22:26	4	case AV_OPT_TYPE_FLAGS :
label	23:4	23:24	4	case AV_OPT_TYPE_INT :
op	23:28	0:0	4	*
water	23:29	0:0	4	(
water	23:30	0:0	4	int
op	23:40	0:0	4	*
water	23:41	0:0	4	)
water	23:42	0:0	4	dst
op	23:45	0:0	4	=
call	23:47	23:61	4	llrint
arg	23:54	23:61	5	num/den
water	23:54	0:0	6	num
op	23:57	0:0	6	/
water	23:58	0:0	6	den
op	23:62	0:0	4	*
water	23:63	0:0	4	intnum
water	23:69	0:0	4	;
break	23:71	23:76	4	
label	24:4	24:29	4	case AV_OPT_TYPE_DURATION :
label	25:4	25:35	4	case AV_OPT_TYPE_CHANNEL_LAYOUT :
label	26:4	26:26	4	case AV_OPT_TYPE_INT64 :
op	26:28	0:0	4	*
water	26:29	0:0	4	(
water	26:30	0:0	4	int64_t
op	26:40	0:0	4	*
water	26:41	0:0	4	)
water	26:42	0:0	4	dst
op	26:45	0:0	4	=
call	26:47	26:61	4	llrint
arg	26:54	26:61	5	num/den
water	26:54	0:0	6	num
op	26:57	0:0	6	/
water	26:58	0:0	6	den
op	26:62	0:0	4	*
water	26:63	0:0	4	intnum
water	26:69	0:0	4	;
break	26:71	26:76	4	
label	27:4	27:26	4	case AV_OPT_TYPE_FLOAT :
op	27:28	0:0	4	*
water	27:29	0:0	4	(
water	27:30	0:0	4	float
op	27:40	0:0	4	*
water	27:41	0:0	4	)
water	27:42	0:0	4	dst
op	27:45	0:0	4	=
water	27:47	0:0	4	num
op	27:50	0:0	4	*
water	27:51	0:0	4	intnum
op	27:57	0:0	4	/
water	27:58	0:0	4	den
water	27:61	0:0	4	;
break	27:71	27:76	4	
label	28:4	28:27	4	case AV_OPT_TYPE_DOUBLE :
op	28:28	0:0	4	*
water	28:29	0:0	4	(
water	28:30	0:0	4	double
op	28:40	0:0	4	*
water	28:41	0:0	4	)
water	28:42	0:0	4	dst
op	28:45	0:0	4	=
water	28:47	0:0	4	num
op	28:50	0:0	4	*
water	28:51	0:0	4	intnum
op	28:57	0:0	4	/
water	28:58	0:0	4	den
water	28:61	0:0	4	;
break	28:71	28:76	4	
label	29:4	29:29	4	case AV_OPT_TYPE_RATIONAL :
if	30:8	30:77	4	(( int ) num == num)
cond	30:12	30:24	5	( int ) num == num
water	30:12	0:0	6	(
water	30:13	0:0	6	int
water	30:16	0:0	6	)
water	30:17	0:0	6	num
op	30:21	0:0	6	==
water	30:24	0:0	6	num
stmts	30:29	30:77	5	
op	30:29	0:0	6	*
water	30:30	0:0	6	(
water	30:31	0:0	6	AVRational
op	30:41	0:0	6	*
water	30:42	0:0	6	)
water	30:43	0:0	6	dst
op	30:46	0:0	6	=
water	30:48	0:0	6	(
water	30:49	0:0	6	AVRational
water	30:59	0:0	6	)
water	30:60	0:0	6	{
water	30:61	0:0	6	num
op	30:64	0:0	6	*
water	30:65	0:0	6	intnum
water	30:71	0:0	6	,
water	30:73	0:0	6	den
water	30:76	0:0	6	}
water	30:77	0:0	6	;
else	31:8	31:77	4
stmts	31:29	31:77	5	
op	31:29	0:0	6	*
water	31:30	0:0	6	(
water	31:31	0:0	6	AVRational
op	31:41	0:0	6	*
water	31:42	0:0	6	)
water	31:43	0:0	6	dst
op	31:46	0:0	6	=
call	31:48	31:76	6	av_d2q
arg	31:55	31:69	7	num*intnum/den
water	31:55	0:0	8	num
op	31:58	0:0	8	*
water	31:59	0:0	8	intnum
op	31:65	0:0	8	/
water	31:66	0:0	8	den
arg	31:71	31:76	7	1<<24
water	31:71	0:0	8	1
op	31:72	0:0	8	<<
water	31:74	0:0	8	24
water	31:77	0:0	6	;
break	32:8	32:13	4	
label	33:4	33:11	4	default :
return	34:8	34:30	4	AVERROR(EINVAL)
call	34:15	34:29	5	AVERROR
arg	34:23	34:29	6	EINVAL
water	34:23	0:0	7	EINVAL
water	35:4	0:0	4	}
return	36:4	36:12	2	0
water	36:11	0:0	3	0
