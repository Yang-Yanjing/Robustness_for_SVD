func	1:0	41:0	0	static int	config_output
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	40:12	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:38	2	ColorBalanceContext	*s
op	4:27	0:0	2	=
water	4:29	0:0	2	ctx
op	4:32	0:0	2	->
water	4:34	0:0	2	priv
decl	5:4	5:73	2	const AVPixFmtDescriptor	*desc
op	5:35	0:0	2	=
call	5:37	5:72	3	av_pix_fmt_desc_get
arg	5:57	5:72	4	outlink->format
water	5:57	0:0	5	outlink
op	5:64	0:0	5	->
water	5:66	0:0	5	format
decl	6:4	6:52	2	double	*shadows
water	6:19	0:0	2	,
decl	6:4	6:52	2	double	*midtones
water	6:30	0:0	2	,
decl	6:4	6:52	2	double	*highlights
water	6:43	0:0	2	,
decl	6:4	6:52	2	double	*buffer
decl	7:4	7:18	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:18	2	int	r
water	7:12	0:0	2	,
decl	7:4	7:18	2	int	g
water	7:15	0:0	2	,
decl	7:4	7:18	2	int	b
water	8:4	0:0	2	buffer
op	8:11	0:0	2	=
call	8:13	8:48	2	av_malloc
arg	8:23	8:48	3	256*3*sizeof(*buffer)
water	8:23	0:0	4	256
op	8:27	0:0	4	*
water	8:29	0:0	4	3
op	8:31	0:0	4	*
op	8:33	0:0	4	sizeof
water	8:39	0:0	4	(
op	8:40	0:0	4	*
water	8:41	0:0	4	buffer
water	8:47	0:0	4	)
water	8:49	0:0	2	;
if	9:4	10:30	2	(! buffer)
cond	9:8	9:9	3	! buffer
op	9:8	0:0	4	!
water	9:9	0:0	4	buffer
stmts	10:8	10:30	3	
return	10:8	10:30	4	AVERROR(ENOMEM)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	ENOMEM
water	10:23	0:0	7	ENOMEM
water	11:4	0:0	2	shadows
op	11:15	0:0	2	=
water	11:17	0:0	2	buffer
op	11:24	0:0	2	+
water	11:26	0:0	2	256
op	11:30	0:0	2	*
water	11:32	0:0	2	0
water	11:33	0:0	2	;
water	12:4	0:0	2	midtones
op	12:15	0:0	2	=
water	12:17	0:0	2	buffer
op	12:24	0:0	2	+
water	12:26	0:0	2	256
op	12:30	0:0	2	*
water	12:32	0:0	2	1
water	12:33	0:0	2	;
water	13:4	0:0	2	highlights
op	13:15	0:0	2	=
water	13:17	0:0	2	buffer
op	13:24	0:0	2	+
water	13:26	0:0	2	256
op	13:30	0:0	2	*
water	13:32	0:0	2	2
water	13:33	0:0	2	;
for	14:4	21:4	2	(i = 0 ;i < 256;i ++)
forinit	14:9	14:14	3	i = 0 ;
water	14:9	0:0	4	i
op	14:11	0:0	4	=
water	14:13	0:0	4	0
water	14:14	0:0	4	;
cond	14:16	14:20	3	i < 256
water	14:16	0:0	4	i
op	14:18	0:0	4	<
water	14:20	0:0	4	256
forexpr	14:25	14:26	3	i ++
water	14:25	0:0	4	i
op	14:26	0:0	4	++
stmts	14:30	21:4	3	
water	14:30	0:0	4	{
decl	15:8	15:69	4	double	low
op	15:19	0:0	4	=
call	15:21	15:60	5	av_clipd
arg	15:30	15:54	6	(i-85.0)/-64.0+0.5
water	15:30	0:0	7	(
water	15:31	0:0	7	i
op	15:33	0:0	7	-
water	15:35	0:0	7	85
op	15:37	0:0	7	.
water	15:38	0:0	7	0
water	15:39	0:0	7	)
op	15:41	0:0	7	/
op	15:43	0:0	7	-
water	15:44	0:0	7	64
op	15:46	0:0	7	.
water	15:47	0:0	7	0
op	15:49	0:0	7	+
water	15:51	0:0	7	0
op	15:52	0:0	7	.
water	15:53	0:0	7	5
arg	15:56	15:57	6	0
water	15:56	0:0	7	0
arg	15:59	15:60	6	1
water	15:59	0:0	7	1
op	15:62	0:0	4	*
water	15:64	0:0	4	178
op	15:67	0:0	4	.
water	15:68	0:0	4	5
decl	16:8	17:77	4	double	mid
op	16:19	0:0	4	=
call	16:21	16:60	5	av_clipd
arg	16:30	16:54	6	(i-85.0)/64.0+0.5
water	16:30	0:0	7	(
water	16:31	0:0	7	i
op	16:33	0:0	7	-
water	16:35	0:0	7	85
op	16:37	0:0	7	.
water	16:38	0:0	7	0
water	16:39	0:0	7	)
op	16:41	0:0	7	/
water	16:44	0:0	7	64
op	16:46	0:0	7	.
water	16:47	0:0	7	0
op	16:49	0:0	7	+
water	16:51	0:0	7	0
op	16:52	0:0	7	.
water	16:53	0:0	7	5
arg	16:56	16:57	6	0
water	16:56	0:0	7	0
arg	16:59	16:60	6	1
water	16:59	0:0	7	1
call	16:62	17:68	5	*av_clipd
arg	17:30	17:62	6	(i+85.0-255.0)/-64.0+0.5
water	17:30	0:0	7	(
water	17:31	0:0	7	i
op	17:33	0:0	7	+
water	17:35	0:0	7	85
op	17:37	0:0	7	.
water	17:38	0:0	7	0
op	17:40	0:0	7	-
water	17:42	0:0	7	255
op	17:45	0:0	7	.
water	17:46	0:0	7	0
water	17:47	0:0	7	)
op	17:49	0:0	7	/
op	17:51	0:0	7	-
water	17:52	0:0	7	64
op	17:54	0:0	7	.
water	17:55	0:0	7	0
op	17:57	0:0	7	+
water	17:59	0:0	7	0
op	17:60	0:0	7	.
water	17:61	0:0	7	5
arg	17:64	17:65	6	0
water	17:64	0:0	7	0
arg	17:67	17:68	6	1
water	17:67	0:0	7	1
op	17:70	0:0	4	*
water	17:72	0:0	4	178
op	17:75	0:0	4	.
water	17:76	0:0	4	5
water	18:8	0:0	4	shadows
op	18:15	0:0	4	[
water	18:16	0:0	4	i
op	18:17	0:0	4	]
op	18:19	0:0	4	=
water	18:21	0:0	4	low
water	18:24	0:0	4	;
water	19:8	0:0	4	midtones
op	19:16	0:0	4	[
water	19:17	0:0	4	i
op	19:18	0:0	4	]
op	19:20	0:0	4	=
water	19:22	0:0	4	mid
water	19:25	0:0	4	;
water	20:8	0:0	4	highlights
op	20:18	0:0	4	[
water	20:19	0:0	4	255
op	20:23	0:0	4	-
water	20:25	0:0	4	i
op	20:26	0:0	4	]
op	20:28	0:0	4	=
water	20:30	0:0	4	low
water	20:33	0:0	4	;
water	21:4	0:0	4	}
for	22:4	36:4	2	(i = 0 ;i < 256;i ++)
forinit	22:9	22:14	3	i = 0 ;
water	22:9	0:0	4	i
op	22:11	0:0	4	=
water	22:13	0:0	4	0
water	22:14	0:0	4	;
cond	22:16	22:20	3	i < 256
water	22:16	0:0	4	i
op	22:18	0:0	4	<
water	22:20	0:0	4	256
forexpr	22:25	22:26	3	i ++
water	22:25	0:0	4	i
op	22:26	0:0	4	++
stmts	22:30	36:4	3	
water	22:30	0:0	4	{
water	23:8	0:0	4	r
op	23:10	0:0	4	=
water	23:12	0:0	4	g
op	23:14	0:0	4	=
water	23:16	0:0	4	b
op	23:18	0:0	4	=
water	23:20	0:0	4	i
water	23:21	0:0	4	;
water	24:8	0:0	4	r
op	24:10	0:0	4	=
call	24:12	24:70	4	av_clip_uint8
arg	24:26	24:70	5	r+s->cyan_red.shadows*shadows[r]
water	24:26	0:0	6	r
op	24:28	0:0	6	+
water	24:30	0:0	6	s
op	24:31	0:0	6	->
water	24:33	0:0	6	cyan_red
op	24:41	0:0	6	.
water	24:42	0:0	6	shadows
op	24:58	0:0	6	*
water	24:60	0:0	6	shadows
op	24:67	0:0	6	[
water	24:68	0:0	6	r
op	24:69	0:0	6	]
water	24:71	0:0	4	;
water	25:8	0:0	4	r
op	25:10	0:0	4	=
call	25:12	25:71	4	av_clip_uint8
arg	25:26	25:71	5	r+s->cyan_red.midtones*midtones[r]
water	25:26	0:0	6	r
op	25:28	0:0	6	+
water	25:30	0:0	6	s
op	25:31	0:0	6	->
water	25:33	0:0	6	cyan_red
op	25:41	0:0	6	.
water	25:42	0:0	6	midtones
op	25:58	0:0	6	*
water	25:60	0:0	6	midtones
op	25:68	0:0	6	[
water	25:69	0:0	6	r
op	25:70	0:0	6	]
water	25:72	0:0	4	;
water	26:8	0:0	4	r
op	26:10	0:0	4	=
call	26:12	26:73	4	av_clip_uint8
arg	26:26	26:73	5	r+s->cyan_red.highlights*highlights[r]
water	26:26	0:0	6	r
op	26:28	0:0	6	+
water	26:30	0:0	6	s
op	26:31	0:0	6	->
water	26:33	0:0	6	cyan_red
op	26:41	0:0	6	.
water	26:42	0:0	6	highlights
op	26:58	0:0	6	*
water	26:60	0:0	6	highlights
op	26:70	0:0	6	[
water	26:71	0:0	6	r
op	26:72	0:0	6	]
water	26:74	0:0	4	;
water	27:8	0:0	4	g
op	27:10	0:0	4	=
call	27:12	27:70	4	av_clip_uint8
arg	27:26	27:70	5	g+s->magenta_green.shadows*shadows[g]
water	27:26	0:0	6	g
op	27:28	0:0	6	+
water	27:30	0:0	6	s
op	27:31	0:0	6	->
water	27:33	0:0	6	magenta_green
op	27:46	0:0	6	.
water	27:47	0:0	6	shadows
op	27:58	0:0	6	*
water	27:60	0:0	6	shadows
op	27:67	0:0	6	[
water	27:68	0:0	6	g
op	27:69	0:0	6	]
water	27:71	0:0	4	;
water	28:8	0:0	4	g
op	28:10	0:0	4	=
call	28:12	28:71	4	av_clip_uint8
arg	28:26	28:71	5	g+s->magenta_green.midtones*midtones[g]
water	28:26	0:0	6	g
op	28:28	0:0	6	+
water	28:30	0:0	6	s
op	28:31	0:0	6	->
water	28:33	0:0	6	magenta_green
op	28:46	0:0	6	.
water	28:47	0:0	6	midtones
op	28:58	0:0	6	*
water	28:60	0:0	6	midtones
op	28:68	0:0	6	[
water	28:69	0:0	6	g
op	28:70	0:0	6	]
water	28:72	0:0	4	;
water	29:8	0:0	4	g
op	29:10	0:0	4	=
call	29:12	29:73	4	av_clip_uint8
arg	29:26	29:73	5	g+s->magenta_green.highlights*highlights[g]
water	29:26	0:0	6	g
op	29:28	0:0	6	+
water	29:30	0:0	6	s
op	29:31	0:0	6	->
water	29:33	0:0	6	magenta_green
op	29:46	0:0	6	.
water	29:47	0:0	6	highlights
op	29:58	0:0	6	*
water	29:60	0:0	6	highlights
op	29:70	0:0	6	[
water	29:71	0:0	6	g
op	29:72	0:0	6	]
water	29:74	0:0	4	;
water	30:8	0:0	4	b
op	30:10	0:0	4	=
call	30:12	30:70	4	av_clip_uint8
arg	30:26	30:70	5	b+s->yellow_blue.shadows*shadows[b]
water	30:26	0:0	6	b
op	30:28	0:0	6	+
water	30:30	0:0	6	s
op	30:31	0:0	6	->
water	30:33	0:0	6	yellow_blue
op	30:44	0:0	6	.
water	30:45	0:0	6	shadows
op	30:58	0:0	6	*
water	30:60	0:0	6	shadows
op	30:67	0:0	6	[
water	30:68	0:0	6	b
op	30:69	0:0	6	]
water	30:71	0:0	4	;
water	31:8	0:0	4	b
op	31:10	0:0	4	=
call	31:12	31:71	4	av_clip_uint8
arg	31:26	31:71	5	b+s->yellow_blue.midtones*midtones[b]
water	31:26	0:0	6	b
op	31:28	0:0	6	+
water	31:30	0:0	6	s
op	31:31	0:0	6	->
water	31:33	0:0	6	yellow_blue
op	31:44	0:0	6	.
water	31:45	0:0	6	midtones
op	31:58	0:0	6	*
water	31:60	0:0	6	midtones
op	31:68	0:0	6	[
water	31:69	0:0	6	b
op	31:70	0:0	6	]
water	31:72	0:0	4	;
water	32:8	0:0	4	b
op	32:10	0:0	4	=
call	32:12	32:73	4	av_clip_uint8
arg	32:26	32:73	5	b+s->yellow_blue.highlights*highlights[b]
water	32:26	0:0	6	b
op	32:28	0:0	6	+
water	32:30	0:0	6	s
op	32:31	0:0	6	->
water	32:33	0:0	6	yellow_blue
op	32:44	0:0	6	.
water	32:45	0:0	6	highlights
op	32:58	0:0	6	*
water	32:60	0:0	6	highlights
op	32:70	0:0	6	[
water	32:71	0:0	6	b
op	32:72	0:0	6	]
water	32:74	0:0	4	;
water	33:8	0:0	4	s
op	33:9	0:0	4	->
water	33:11	0:0	4	lut
op	33:14	0:0	4	[
water	33:15	0:0	4	R
op	33:16	0:0	4	]
op	33:17	0:0	4	[
water	33:18	0:0	4	i
op	33:19	0:0	4	]
op	33:21	0:0	4	=
water	33:23	0:0	4	r
water	33:24	0:0	4	;
water	34:8	0:0	4	s
op	34:9	0:0	4	->
water	34:11	0:0	4	lut
op	34:14	0:0	4	[
water	34:15	0:0	4	G
op	34:16	0:0	4	]
op	34:17	0:0	4	[
water	34:18	0:0	4	i
op	34:19	0:0	4	]
op	34:21	0:0	4	=
water	34:23	0:0	4	g
water	34:24	0:0	4	;
water	35:8	0:0	4	s
op	35:9	0:0	4	->
water	35:11	0:0	4	lut
op	35:14	0:0	4	[
water	35:15	0:0	4	B
op	35:16	0:0	4	]
op	35:17	0:0	4	[
water	35:18	0:0	4	i
op	35:19	0:0	4	]
op	35:21	0:0	4	=
water	35:23	0:0	4	b
water	35:24	0:0	4	;
water	36:4	0:0	4	}
call	37:4	37:18	2	av_free
arg	37:12	37:18	3	buffer
water	37:12	0:0	4	buffer
water	37:19	0:0	2	;
call	38:4	38:49	2	ff_fill_rgba_map
arg	38:21	38:32	3	s->rgba_map
water	38:21	0:0	4	s
op	38:22	0:0	4	->
water	38:24	0:0	4	rgba_map
arg	38:34	38:49	3	outlink->format
water	38:34	0:0	4	outlink
op	38:41	0:0	4	->
water	38:43	0:0	4	format
water	38:50	0:0	2	;
water	39:4	0:0	2	s
op	39:5	0:0	2	->
water	39:7	0:0	2	step
op	39:12	0:0	2	=
call	39:14	39:47	2	av_get_padded_bits_per_pixel
arg	39:43	39:47	3	desc
water	39:43	0:0	4	desc
op	39:49	0:0	2	>>
water	39:52	0:0	2	3
water	39:53	0:0	2	;
return	40:4	40:12	2	0
water	40:11	0:0	3	0
