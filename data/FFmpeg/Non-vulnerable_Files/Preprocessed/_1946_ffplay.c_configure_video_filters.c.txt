func	1:0	56:0	0	static int	configure_video_filters
params	1:34	0:0	1	
param	1:35	1:55	2	AVFilterGraph *	graph
param	1:57	1:71	2	VideoState *	is
param	1:73	1:93	2	const char *	vfilters
param	1:95	1:109	2	AVFrame *	frame
stmnts	3:4	55:26	1	
water	3:4	0:0	2	static
water	3:11	0:0	2	const
water	3:17	0:0	2	enum
water	3:22	0:0	2	AVPixelFormat
water	3:36	0:0	2	pix_fmts
op	3:44	0:0	2	[
op	3:45	0:0	2	]
op	3:47	0:0	2	=
water	3:49	0:0	2	{
water	3:51	0:0	2	AV_PIX_FMT_YUV420P
water	3:69	0:0	2	,
water	3:71	0:0	2	AV_PIX_FMT_BGRA
water	3:86	0:0	2	,
water	3:88	0:0	2	AV_PIX_FMT_NONE
water	3:104	0:0	2	}
water	3:105	0:0	2	;
decl	4:4	4:32	2	char	sws_flags_str[512]
op	4:28	0:0	2	=
water	4:30	0:0	2	""
decl	5:4	5:28	2	char	buffersrc_args[256]
decl	6:4	6:11	2	int	ret
decl	7:4	7:75	2	AVFilterContext	*filt_src
op	7:30	0:0	2	=
water	7:32	0:0	2	NULL
water	7:36	0:0	2	,
decl	7:4	7:75	2	AVFilterContext	*filt_out
op	7:48	0:0	2	=
water	7:50	0:0	2	NULL
water	7:54	0:0	2	,
decl	7:4	7:75	2	AVFilterContext	*last_filter
op	7:69	0:0	2	=
water	7:71	0:0	2	NULL
decl	8:4	8:56	2	AVCodecParameters	*codecpar
op	8:32	0:0	2	=
water	8:34	0:0	2	is
op	8:36	0:0	2	->
water	8:38	0:0	2	video_st
op	8:46	0:0	2	->
water	8:48	0:0	2	codecpar
decl	9:4	9:67	2	AVRational	fr
op	9:18	0:0	2	=
call	9:20	9:66	3	av_guess_frame_rate
arg	9:40	9:46	4	is->ic
water	9:40	0:0	5	is
op	9:42	0:0	5	->
water	9:44	0:0	5	ic
arg	9:48	9:60	4	is->video_st
water	9:48	0:0	5	is
op	9:50	0:0	5	->
water	9:52	0:0	5	video_st
arg	9:62	9:66	4	NULL
water	9:62	0:0	5	NULL
decl	10:4	10:31	2	AVDictionaryEntry	*e
op	10:25	0:0	2	=
water	10:27	0:0	2	NULL
while	11:4	16:4	2	(( e =av_dict_get (sws_dict ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) ))
cond	11:11	11:67	3	( e =av_dict_get (sws_dict ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) )
water	11:11	0:0	4	(
water	11:12	0:0	4	e
op	11:14	0:0	4	=
call	11:16	11:66	4	av_dict_get
arg	11:28	11:36	5	sws_dict
water	11:28	0:0	6	sws_dict
arg	11:38	11:40	5	""
water	11:38	0:0	6	""
arg	11:42	11:43	5	e
water	11:42	0:0	6	e
arg	11:45	11:66	5	AV_DICT_IGNORE_SUFFIX
water	11:45	0:0	6	AV_DICT_IGNORE_SUFFIX
water	11:67	0:0	4	)
stmts	11:70	16:4	3	
water	11:70	0:0	4	{
if	12:8	14:8	4	(!strcmp (e -> key ,"sws_flags" ))
cond	12:12	12:39	5	!strcmp (e -> key ,"sws_flags" )
op	12:12	0:0	6	!
call	12:13	12:39	6	strcmp
arg	12:20	12:26	7	e->key
water	12:20	0:0	8	e
op	12:21	0:0	8	->
water	12:23	0:0	8	key
arg	12:28	12:39	7	"sws_flags"
water	12:28	0:0	8	"sws_flags"
stmts	12:42	14:8	5	
water	12:42	0:0	6	{
call	13:12	13:89	6	av_strlcatf
arg	13:24	13:37	7	sws_flags_str
water	13:24	0:0	8	sws_flags_str
arg	13:39	13:60	7	sizeof(sws_flags_str)
op	13:39	0:0	8	sizeof
water	13:45	0:0	8	(
water	13:46	0:0	8	sws_flags_str
water	13:59	0:0	8	)
arg	13:62	13:70	7	"%s=%s:"
water	13:62	0:0	8	"%s=%s:"
arg	13:72	13:79	7	"flags"
water	13:72	0:0	8	"flags"
arg	13:81	13:89	7	e->value
water	13:81	0:0	8	e
op	13:82	0:0	8	->
water	13:84	0:0	8	value
water	13:90	0:0	6	;
water	14:8	0:0	6	}
else	14:10	15:89	4
stmts	15:12	15:89	5	
call	15:12	15:88	6	av_strlcatf
arg	15:24	15:37	7	sws_flags_str
water	15:24	0:0	8	sws_flags_str
arg	15:39	15:60	7	sizeof(sws_flags_str)
op	15:39	0:0	8	sizeof
water	15:45	0:0	8	(
water	15:46	0:0	8	sws_flags_str
water	15:59	0:0	8	)
arg	15:62	15:70	7	"%s=%s:"
water	15:62	0:0	8	"%s=%s:"
arg	15:72	15:78	7	e->key
water	15:72	0:0	8	e
op	15:73	0:0	8	->
water	15:75	0:0	8	key
arg	15:80	15:88	7	e->value
water	15:80	0:0	8	e
op	15:81	0:0	8	->
water	15:83	0:0	8	value
water	15:89	0:0	6	;
water	16:4	0:0	4	}
if	17:4	18:53	2	(strlen (sws_flags_str ))
cond	17:8	17:28	3	strlen (sws_flags_str )
call	17:8	17:28	4	strlen
arg	17:15	17:28	5	sws_flags_str
water	17:15	0:0	6	sws_flags_str
stmts	18:8	18:53	3	
water	18:8	0:0	4	sws_flags_str
op	18:21	0:0	4	[
call	18:22	18:42	4	strlen
arg	18:29	18:42	5	sws_flags_str
water	18:29	0:0	6	sws_flags_str
op	18:43	0:0	4	-
water	18:44	0:0	4	1
op	18:45	0:0	4	]
op	18:47	0:0	4	=
water	18:49	0:0	4	'\0'
water	18:53	0:0	4	;
water	19:4	0:0	2	graph
op	19:9	0:0	2	->
water	19:11	0:0	2	scale_sws_opts
op	19:26	0:0	2	=
call	19:28	19:51	2	av_strdup
arg	19:38	19:51	3	sws_flags_str
water	19:38	0:0	4	sws_flags_str
water	19:52	0:0	2	;
call	20:4	24:91	2	snprintf
arg	20:13	20:27	3	buffersrc_args
water	20:13	0:0	4	buffersrc_args
arg	20:29	20:51	3	sizeof(buffersrc_args)
op	20:29	0:0	4	sizeof
water	20:35	0:0	4	(
water	20:36	0:0	4	buffersrc_args
water	20:50	0:0	4	)
arg	21:13	21:77	3	"video_size=%dx%d:pix_fmt=%d:time_base=%d/%d:pixel_aspect=%d/%d"
water	21:13	0:0	4	"video_size=%dx%d:pix_fmt=%d:time_base=%d/%d:pixel_aspect=%d/%d"
arg	22:13	22:25	3	frame->width
water	22:13	0:0	4	frame
op	22:18	0:0	4	->
water	22:20	0:0	4	width
arg	22:27	22:40	3	frame->height
water	22:27	0:0	4	frame
op	22:32	0:0	4	->
water	22:34	0:0	4	height
arg	22:42	22:55	3	frame->format
water	22:42	0:0	4	frame
op	22:47	0:0	4	->
water	22:49	0:0	4	format
arg	23:13	23:40	3	is->video_st->time_base.num
water	23:13	0:0	4	is
op	23:15	0:0	4	->
water	23:17	0:0	4	video_st
op	23:25	0:0	4	->
water	23:27	0:0	4	time_base
op	23:36	0:0	4	.
water	23:37	0:0	4	num
arg	23:42	23:69	3	is->video_st->time_base.den
water	23:42	0:0	4	is
op	23:44	0:0	4	->
water	23:46	0:0	4	video_st
op	23:54	0:0	4	->
water	23:56	0:0	4	time_base
op	23:65	0:0	4	.
water	23:66	0:0	4	den
arg	24:13	24:46	3	codecpar->sample_aspect_ratio.num
water	24:13	0:0	4	codecpar
op	24:21	0:0	4	->
water	24:23	0:0	4	sample_aspect_ratio
op	24:42	0:0	4	.
water	24:43	0:0	4	num
arg	24:48	24:91	3	FFMAX(codecpar->sample_aspect_ratio.den,1)
call	24:48	24:90	4	FFMAX
arg	24:54	24:87	5	codecpar->sample_aspect_ratio.den
water	24:54	0:0	6	codecpar
op	24:62	0:0	6	->
water	24:64	0:0	6	sample_aspect_ratio
op	24:83	0:0	6	.
water	24:84	0:0	6	den
arg	24:89	24:90	5	1
water	24:89	0:0	6	1
water	24:92	0:0	2	;
if	25:4	26:96	2	(fr . num && fr . den)
cond	25:8	25:21	3	fr . num && fr . den
water	25:8	0:0	4	fr
op	25:10	0:0	4	.
water	25:11	0:0	4	num
op	25:15	0:0	4	&&
water	25:18	0:0	4	fr
op	25:20	0:0	4	.
water	25:21	0:0	4	den
stmts	26:8	26:96	3	
call	26:8	26:95	4	av_strlcatf
arg	26:20	26:34	5	buffersrc_args
water	26:20	0:0	6	buffersrc_args
arg	26:36	26:58	5	sizeof(buffersrc_args)
op	26:36	0:0	6	sizeof
water	26:42	0:0	6	(
water	26:43	0:0	6	buffersrc_args
water	26:57	0:0	6	)
arg	26:60	26:79	5	":frame_rate=%d/%d"
water	26:60	0:0	6	":frame_rate=%d/%d"
arg	26:81	26:87	5	fr.num
water	26:81	0:0	6	fr
op	26:83	0:0	6	.
water	26:84	0:0	6	num
arg	26:89	26:95	5	fr.den
water	26:89	0:0	6	fr
op	26:91	0:0	6	.
water	26:92	0:0	6	den
water	26:96	0:0	4	;
if	27:4	31:17	2	(( ret =avfilter_graph_create_filter (& filt_src ,avfilter_get_by_name ("buffer" ) ,"ffplay_buffer" ,buffersrc_args ,NULL ,graph ) ) < 0)
cond	27:8	30:54	3	( ret =avfilter_graph_create_filter (& filt_src ,avfilter_get_by_name ("buffer" ) ,"ffplay_buffer" ,buffersrc_args ,NULL ,graph ) ) < 0
water	27:8	0:0	4	(
water	27:9	0:0	4	ret
op	27:13	0:0	4	=
call	27:15	30:49	4	avfilter_graph_create_filter
arg	27:44	27:53	5	&filt_src
op	27:44	0:0	6	&
water	27:45	0:0	6	filt_src
arg	28:44	28:74	5	avfilter_get_by_name("buffer")
call	28:44	28:73	6	avfilter_get_by_name
arg	28:65	28:73	7	"buffer"
water	28:65	0:0	8	"buffer"
arg	29:44	29:59	5	"ffplay_buffer"
water	29:44	0:0	6	"ffplay_buffer"
arg	29:61	29:75	5	buffersrc_args
water	29:61	0:0	6	buffersrc_args
arg	29:77	29:81	5	NULL
water	29:77	0:0	6	NULL
arg	30:44	30:49	5	graph
water	30:44	0:0	6	graph
water	30:50	0:0	4	)
op	30:52	0:0	4	<
water	30:54	0:0	4	0
stmts	31:8	31:17	3	
goto	31:8	31:17	4	fail
water	31:13	0:0	5	fail
water	32:4	0:0	2	ret
op	32:8	0:0	2	=
call	32:10	34:77	2	avfilter_graph_create_filter
arg	32:39	32:48	3	&filt_out
op	32:39	0:0	4	&
water	32:40	0:0	4	filt_out
arg	33:39	33:73	3	avfilter_get_by_name("buffersink")
call	33:39	33:72	4	avfilter_get_by_name
arg	33:60	33:72	5	"buffersink"
water	33:60	0:0	6	"buffersink"
arg	34:39	34:58	3	"ffplay_buffersink"
water	34:39	0:0	4	"ffplay_buffersink"
arg	34:60	34:64	3	NULL
water	34:60	0:0	4	NULL
arg	34:66	34:70	3	NULL
water	34:66	0:0	4	NULL
arg	34:72	34:77	3	graph
water	34:72	0:0	4	graph
water	34:78	0:0	2	;
if	35:4	36:17	2	(ret < 0)
cond	35:8	35:14	3	ret < 0
water	35:8	0:0	4	ret
op	35:12	0:0	4	<
water	35:14	0:0	4	0
stmts	36:8	36:17	3	
goto	36:8	36:17	4	fail
water	36:13	0:0	5	fail
if	37:4	38:17	2	(( ret =av_opt_set_int_list (filt_out ,"pix_fmts" ,pix_fmts ,AV_PIX_FMT_NONE ,AV_OPT_SEARCH_CHILDREN ) ) < 0)
cond	37:8	37:112	3	( ret =av_opt_set_int_list (filt_out ,"pix_fmts" ,pix_fmts ,AV_PIX_FMT_NONE ,AV_OPT_SEARCH_CHILDREN ) ) < 0
water	37:8	0:0	4	(
water	37:9	0:0	4	ret
op	37:13	0:0	4	=
call	37:15	37:107	4	av_opt_set_int_list
arg	37:35	37:43	5	filt_out
water	37:35	0:0	6	filt_out
arg	37:45	37:55	5	"pix_fmts"
water	37:45	0:0	6	"pix_fmts"
arg	37:57	37:65	5	pix_fmts
water	37:57	0:0	6	pix_fmts
arg	37:68	37:83	5	AV_PIX_FMT_NONE
water	37:68	0:0	6	AV_PIX_FMT_NONE
arg	37:85	37:107	5	AV_OPT_SEARCH_CHILDREN
water	37:85	0:0	6	AV_OPT_SEARCH_CHILDREN
water	37:108	0:0	4	)
op	37:110	0:0	4	<
water	37:112	0:0	4	0
stmts	38:8	38:17	3	
goto	38:8	38:17	4	fail
water	38:13	0:0	5	fail
water	39:4	0:0	2	last_filter
op	39:16	0:0	2	=
water	39:18	0:0	2	filt_out
water	39:26	0:0	2	;
decl	43:4	43:29	2	AVFilterContext	*filt_ctx
water	45:4	0:0	2	ret
op	45:8	0:0	2	=
call	45:10	47:71	2	avfilter_graph_create_filter
arg	45:39	45:48	3	&filt_ctx
op	45:39	0:0	4	&
water	45:40	0:0	4	filt_ctx
arg	46:39	46:65	3	avfilter_get_by_name(name)
call	46:39	46:64	4	avfilter_get_by_name
arg	46:60	46:64	5	name
water	46:60	0:0	6	name
arg	47:39	47:53	3	"ffplay_"name
water	47:39	0:0	4	"ffplay_"
water	47:49	0:0	4	name
arg	47:55	47:58	3	arg
water	47:55	0:0	4	arg
arg	47:60	47:64	3	NULL
water	47:60	0:0	4	NULL
arg	47:66	47:71	3	graph
water	47:66	0:0	4	graph
water	47:72	0:0	2	;
if	48:4	49:17	2	(ret < 0)
cond	48:8	48:14	3	ret < 0
water	48:8	0:0	4	ret
op	48:12	0:0	4	<
water	48:14	0:0	4	0
stmts	49:8	49:17	3	
goto	49:8	49:17	4	fail
water	49:13	0:0	5	fail
water	51:4	0:0	2	ret
op	51:8	0:0	2	=
call	51:10	51:51	2	avfilter_link
arg	51:24	51:32	3	filt_ctx
water	51:24	0:0	4	filt_ctx
arg	51:34	51:35	3	0
water	51:34	0:0	4	0
arg	51:37	51:48	3	last_filter
water	51:37	0:0	4	last_filter
arg	51:50	51:51	3	0
water	51:50	0:0	4	0
water	51:52	0:0	2	;
if	52:4	53:17	2	(ret < 0)
cond	52:8	52:14	3	ret < 0
water	52:8	0:0	4	ret
op	52:12	0:0	4	<
water	52:14	0:0	4	0
stmts	53:8	53:17	3	
goto	53:8	53:17	4	fail
water	53:13	0:0	5	fail
water	55:4	0:0	2	last_filter
op	55:16	0:0	2	=
water	55:18	0:0	2	filt_ctx
water	55:26	0:0	2	;
decl	58:8	58:50	0	double	theta
op	58:22	0:0	0	=
call	58:24	58:49	1	get_rotation
arg	58:37	58:49	2	is->video_st
water	58:37	0:0	3	is
op	58:39	0:0	3	->
water	58:41	0:0	3	video_st
decl	67:12	67:31	0	char	rotate_buf[64]
