func	2:0	172:0	0	pp_mode *	pp_get_mode_by_name_and_quality
params	2:40	0:0	1	
param	2:41	2:57	2	const char *	name
param	2:59	2:70	2	int	quality
stmnts	0:0	171:17	1	
decl	4:4	4:35	2	char	temp[GET_MODE_BUFFER_SIZE]
decl	5:4	5:17	2	char	*p
op	5:11	0:0	2	=
water	5:13	0:0	2	temp
water	6:4	0:0	2	static
water	6:11	0:0	2	const
water	6:17	0:0	2	char
water	6:22	0:0	2	filterDelimiters
op	6:38	0:0	2	[
op	6:39	0:0	2	]
op	6:41	0:0	2	=
water	6:43	0:0	2	",/"
water	6:47	0:0	2	;
water	7:4	0:0	2	static
water	7:11	0:0	2	const
water	7:17	0:0	2	char
water	7:22	0:0	2	optionDelimiters
op	7:38	0:0	2	[
op	7:39	0:0	2	]
op	7:41	0:0	2	=
water	7:43	0:0	2	":|"
water	7:47	0:0	2	;
decl	8:4	8:25	2	struct PPMode	*ppMode
decl	9:4	9:21	2	char	*filterToken
if	10:4	13:4	2	(! name)
cond	10:8	10:9	3	! name
op	10:8	0:0	4	!
water	10:9	0:0	4	name
stmts	10:16	13:4	3	
water	10:16	0:0	4	{
call	11:8	11:59	4	av_log
arg	11:15	11:19	5	NULL
water	11:15	0:0	6	NULL
arg	11:21	11:33	5	AV_LOG_ERROR
water	11:21	0:0	6	AV_LOG_ERROR
arg	11:35	11:59	5	"pp: Missing argument\n"
water	11:35	0:0	6	"pp: Missing argument\n"
water	11:60	0:0	4	;
return	12:8	12:19	4	NULL
water	12:15	0:0	5	NULL
water	13:4	0:0	4	}
if	14:4	21:4	2	(!strcmp (name ,"help" ))
cond	14:8	14:28	3	!strcmp (name ,"help" )
op	14:8	0:0	4	!
call	14:9	14:28	4	strcmp
arg	14:16	14:20	5	name
water	14:16	0:0	6	name
arg	14:22	14:28	5	"help"
water	14:22	0:0	6	"help"
stmts	14:31	21:4	3	
water	14:31	0:0	4	{
decl	15:8	15:21	4	const char	*p
for	16:8	19:8	4	(p = pp_help ;strchr (p ,'\n' );p =strchr (p ,'\n' ) + 1)
forinit	16:13	16:24	5	p = pp_help ;
water	16:13	0:0	6	p
op	16:15	0:0	6	=
water	16:17	0:0	6	pp_help
water	16:24	0:0	6	;
cond	16:26	16:40	5	strchr (p ,'\n' )
call	16:26	16:40	6	strchr
arg	16:33	16:34	7	p
water	16:33	0:0	8	p
arg	16:36	16:40	7	'\n'
water	16:36	0:0	8	'\n'
forexpr	16:43	16:65	5	p =strchr (p ,'\n' ) + 1
water	16:43	0:0	6	p
op	16:45	0:0	6	=
call	16:47	16:61	6	strchr
arg	16:54	16:55	7	p
water	16:54	0:0	8	p
arg	16:57	16:61	7	'\n'
water	16:57	0:0	8	'\n'
op	16:63	0:0	6	+
water	16:65	0:0	6	1
stmts	16:68	19:8	5	
water	16:68	0:0	6	{
call	17:12	17:76	6	av_strlcpy
arg	17:23	17:27	7	temp
water	17:23	0:0	8	temp
arg	17:29	17:30	7	p
water	17:29	0:0	8	p
arg	17:32	17:76	7	FFMIN(sizeof(temp),strchr(p,'\n')-p+2)
call	17:32	17:75	8	FFMIN
arg	17:38	17:50	9	sizeof(temp)
op	17:38	0:0	10	sizeof
water	17:44	0:0	10	(
water	17:45	0:0	10	temp
water	17:49	0:0	10	)
arg	17:52	17:75	9	strchr(p,'\n')-p+2
call	17:52	17:66	10	strchr
arg	17:59	17:60	11	p
water	17:59	0:0	12	p
arg	17:62	17:66	11	'\n'
water	17:62	0:0	12	'\n'
op	17:68	0:0	10	-
water	17:70	0:0	10	p
op	17:72	0:0	10	+
water	17:74	0:0	10	2
water	17:77	0:0	6	;
call	18:12	18:48	6	av_log
arg	18:19	18:23	7	NULL
water	18:19	0:0	8	NULL
arg	18:25	18:36	7	AV_LOG_INFO
water	18:25	0:0	8	AV_LOG_INFO
arg	18:38	18:42	7	"%s"
water	18:38	0:0	8	"%s"
arg	18:44	18:48	7	temp
water	18:44	0:0	8	temp
water	18:49	0:0	6	;
water	19:8	0:0	6	}
return	20:8	20:19	4	NULL
water	20:15	0:0	5	NULL
water	21:4	0:0	4	}
water	22:4	0:0	2	ppMode
op	22:10	0:0	2	=
call	22:12	22:36	2	av_malloc
arg	22:22	22:36	3	sizeof(PPMode)
op	22:22	0:0	4	sizeof
water	22:28	0:0	4	(
water	22:29	0:0	4	PPMode
water	22:35	0:0	4	)
water	22:37	0:0	2	;
if	23:4	24:19	2	(! ppMode)
cond	23:8	23:9	3	! ppMode
op	23:8	0:0	4	!
water	23:9	0:0	4	ppMode
stmts	24:8	24:19	3	
return	24:8	24:19	4	NULL
water	24:15	0:0	5	NULL
water	25:4	0:0	2	ppMode
op	25:10	0:0	2	->
water	25:12	0:0	2	lumMode
op	25:19	0:0	2	=
water	25:21	0:0	2	0
water	25:22	0:0	2	;
water	26:4	0:0	2	ppMode
op	26:10	0:0	2	->
water	26:12	0:0	2	chromMode
op	26:21	0:0	2	=
water	26:23	0:0	2	0
water	26:24	0:0	2	;
water	27:4	0:0	2	ppMode
op	27:10	0:0	2	->
water	27:12	0:0	2	maxTmpNoise
op	27:23	0:0	2	[
water	27:24	0:0	2	0
op	27:25	0:0	2	]
op	27:26	0:0	2	=
water	27:28	0:0	2	700
water	27:31	0:0	2	;
water	28:4	0:0	2	ppMode
op	28:10	0:0	2	->
water	28:12	0:0	2	maxTmpNoise
op	28:23	0:0	2	[
water	28:24	0:0	2	1
op	28:25	0:0	2	]
op	28:26	0:0	2	=
water	28:28	0:0	2	1500
water	28:32	0:0	2	;
water	29:4	0:0	2	ppMode
op	29:10	0:0	2	->
water	29:12	0:0	2	maxTmpNoise
op	29:23	0:0	2	[
water	29:24	0:0	2	2
op	29:25	0:0	2	]
op	29:26	0:0	2	=
water	29:28	0:0	2	3000
water	29:32	0:0	2	;
water	30:4	0:0	2	ppMode
op	30:10	0:0	2	->
water	30:12	0:0	2	maxAllowedY
op	30:23	0:0	2	=
water	30:25	0:0	2	234
water	30:28	0:0	2	;
water	31:4	0:0	2	ppMode
op	31:10	0:0	2	->
water	31:12	0:0	2	minAllowedY
op	31:23	0:0	2	=
water	31:25	0:0	2	16
water	31:27	0:0	2	;
water	32:4	0:0	2	ppMode
op	32:10	0:0	2	->
water	32:12	0:0	2	baseDcDiff
op	32:22	0:0	2	=
water	32:24	0:0	2	256
op	32:27	0:0	2	/
water	32:28	0:0	2	8
water	32:29	0:0	2	;
water	33:4	0:0	2	ppMode
op	33:10	0:0	2	->
water	33:12	0:0	2	flatnessThreshold
op	33:29	0:0	2	=
water	33:31	0:0	2	56
op	33:33	0:0	2	-
water	33:34	0:0	2	16
op	33:36	0:0	2	-
water	33:37	0:0	2	1
water	33:38	0:0	2	;
water	34:4	0:0	2	ppMode
op	34:10	0:0	2	->
water	34:12	0:0	2	maxClippedThreshold
op	34:31	0:0	2	=
water	34:33	0:0	2	(
water	34:34	0:0	2	AVRational
water	34:44	0:0	2	)
water	34:45	0:0	2	{
water	34:46	0:0	2	1
water	34:47	0:0	2	,
water	34:48	0:0	2	100
water	34:51	0:0	2	}
water	34:52	0:0	2	;
water	35:4	0:0	2	ppMode
op	35:10	0:0	2	->
water	35:12	0:0	2	error
op	35:17	0:0	2	=
water	35:18	0:0	2	0
water	35:19	0:0	2	;
call	36:4	36:40	2	memset
arg	36:11	36:15	3	temp
water	36:11	0:0	4	temp
arg	36:17	36:18	3	0
water	36:17	0:0	4	0
arg	36:20	36:40	3	GET_MODE_BUFFER_SIZE
water	36:20	0:0	4	GET_MODE_BUFFER_SIZE
water	36:41	0:0	2	;
call	37:4	37:51	2	av_strlcpy
arg	37:15	37:19	3	temp
water	37:15	0:0	4	temp
arg	37:21	37:25	3	name
water	37:21	0:0	4	name
arg	37:27	37:51	3	GET_MODE_BUFFER_SIZE-1
water	37:27	0:0	4	GET_MODE_BUFFER_SIZE
op	37:48	0:0	4	-
water	37:50	0:0	4	1
water	37:52	0:0	2	;
call	38:4	38:47	2	av_log
arg	38:11	38:15	3	NULL
water	38:11	0:0	4	NULL
arg	38:17	38:29	3	AV_LOG_DEBUG
water	38:17	0:0	4	AV_LOG_DEBUG
arg	38:31	38:41	3	"pp: %s\n"
water	38:31	0:0	4	"pp: %s\n"
arg	38:43	38:47	3	name
water	38:43	0:0	4	name
water	38:48	0:0	2	;
for	39:4	164:4	2	(;;)
forinit	39:8	39:8	3	;
water	39:8	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	39:11	164:4	3	
water	39:11	0:0	4	{
decl	40:8	40:30	4	const char	*filterName
decl	41:8	41:22	4	int	q
op	41:13	0:0	4	=
water	41:15	0:0	4	1000000
decl	42:8	42:20	4	int	chrom
op	42:17	0:0	4	=
op	42:18	0:0	4	-
water	42:19	0:0	4	1
decl	43:8	43:19	4	int	luma
op	43:16	0:0	4	=
op	43:17	0:0	4	-
water	43:18	0:0	4	1
decl	44:8	44:26	4	const char	*option
decl	45:8	45:47	4	const char	*options[OPTIONS_ARRAY_SIZE]
decl	46:8	46:13	4	int	i
decl	47:8	47:26	4	int	filterNameOk
op	47:24	0:0	4	=
water	47:25	0:0	4	0
decl	48:8	48:33	4	int	numOfUnknownOptions
op	48:31	0:0	4	=
water	48:32	0:0	4	0
decl	49:8	49:20	4	int	enable
op	49:18	0:0	4	=
water	49:19	0:0	4	1
decl	50:8	50:22	4	char	*tokstate
water	51:8	0:0	4	filterToken
op	51:19	0:0	4	=
call	51:21	51:61	4	av_strtok
arg	51:31	51:32	5	p
water	51:31	0:0	6	p
arg	51:34	51:50	5	filterDelimiters
water	51:34	0:0	6	filterDelimiters
arg	51:52	51:61	5	&tokstate
op	51:52	0:0	6	&
water	51:53	0:0	6	tokstate
water	51:62	0:0	4	;
if	52:8	52:30	4	(! filterToken)
cond	52:11	52:12	5	! filterToken
op	52:11	0:0	6	!
water	52:12	0:0	6	filterToken
stmts	52:25	52:30	5	
break	52:25	52:30	6	
water	53:8	0:0	4	p
op	53:9	0:0	4	+=
call	53:12	53:30	4	strlen
arg	53:19	53:30	5	filterToken
water	53:19	0:0	6	filterToken
op	53:32	0:0	4	+
water	53:34	0:0	4	1
water	53:35	0:0	4	;
water	54:8	0:0	4	filterName
op	54:18	0:0	4	=
call	54:20	54:70	4	av_strtok
arg	54:30	54:41	5	filterToken
water	54:30	0:0	6	filterToken
arg	54:43	54:59	5	optionDelimiters
water	54:43	0:0	6	optionDelimiters
arg	54:61	54:70	5	&tokstate
op	54:61	0:0	6	&
water	54:62	0:0	6	tokstate
water	54:71	0:0	4	;
if	55:8	58:8	4	(! filterName)
cond	55:12	55:13	5	! filterName
op	55:12	0:0	6	!
water	55:13	0:0	6	filterName
stmts	55:25	58:8	5	
water	55:25	0:0	6	{
water	56:12	0:0	6	ppMode
op	56:18	0:0	6	->
water	56:20	0:0	6	error
op	56:25	0:0	6	++
water	56:27	0:0	6	;
break	57:12	57:17	6	
water	58:8	0:0	6	}
call	59:8	59:74	4	av_log
arg	59:15	59:19	5	NULL
water	59:15	0:0	6	NULL
arg	59:21	59:33	5	AV_LOG_DEBUG
water	59:21	0:0	6	AV_LOG_DEBUG
arg	59:35	59:49	5	"pp: %s::%s\n"
water	59:35	0:0	6	"pp: %s::%s\n"
arg	59:51	59:62	5	filterToken
water	59:51	0:0	6	filterToken
arg	59:64	59:74	5	filterName
water	59:64	0:0	6	filterName
water	59:75	0:0	4	;
if	60:8	63:8	4	(* filterName == '-')
cond	60:11	60:26	5	* filterName == '-'
op	60:11	0:0	6	*
water	60:12	0:0	6	filterName
op	60:23	0:0	6	==
water	60:26	0:0	6	'-'
stmts	60:30	63:8	5	
water	60:30	0:0	6	{
water	61:12	0:0	6	enable
op	61:18	0:0	6	=
water	61:19	0:0	6	0
water	61:20	0:0	6	;
water	62:12	0:0	6	filterName
op	62:22	0:0	6	++
water	62:24	0:0	6	;
water	63:8	0:0	6	}
for	64:8	77:8	4	(;;)
forinit	64:12	64:12	5	;
water	64:12	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	64:15	77:8	5	
water	64:15	0:0	6	{
water	65:12	0:0	6	option
op	65:18	0:0	6	=
call	65:20	65:63	6	av_strtok
arg	65:30	65:34	7	NULL
water	65:30	0:0	8	NULL
arg	65:36	65:52	7	optionDelimiters
water	65:36	0:0	8	optionDelimiters
arg	65:54	65:63	7	&tokstate
op	65:54	0:0	8	&
water	65:55	0:0	8	tokstate
water	65:64	0:0	6	;
if	66:12	66:29	6	(! option)
cond	66:15	66:16	7	! option
op	66:15	0:0	8	!
water	66:16	0:0	8	option
stmts	66:24	66:29	7	
break	66:24	66:29	8	
call	67:12	67:65	6	av_log
arg	67:19	67:23	7	NULL
water	67:19	0:0	8	NULL
arg	67:25	67:37	7	AV_LOG_DEBUG
water	67:25	0:0	8	AV_LOG_DEBUG
arg	67:39	67:57	7	"pp: option: %s\n"
water	67:39	0:0	8	"pp: option: %s\n"
arg	67:59	67:65	7	option
water	67:59	0:0	8	option
water	67:66	0:0	6	;
if	68:12	68:75	6	(!strcmp ("autoq" ,option ) || !strcmp ("a" ,option ))
cond	68:15	68:62	7	!strcmp ("autoq" ,option ) || !strcmp ("a" ,option )
op	68:15	0:0	8	!
call	68:16	68:38	8	strcmp
arg	68:23	68:30	9	"autoq"
water	68:23	0:0	10	"autoq"
arg	68:32	68:38	9	option
water	68:32	0:0	10	option
op	68:40	0:0	8	||
op	68:43	0:0	8	!
call	68:44	68:62	8	strcmp
arg	68:51	68:54	9	"a"
water	68:51	0:0	10	"a"
arg	68:56	68:62	9	option
water	68:56	0:0	10	option
stmts	68:65	68:75	7	
water	68:65	0:0	8	q
op	68:66	0:0	8	=
water	68:68	0:0	8	quality
water	68:75	0:0	8	;
else	69:12	69:79	6
stmts	69:17	69:79	7	
if	69:17	69:79	8	(!strcmp ("nochrom" ,option ) || !strcmp ("y" ,option ))
cond	69:20	69:69	9	!strcmp ("nochrom" ,option ) || !strcmp ("y" ,option )
op	69:20	0:0	10	!
call	69:21	69:45	10	strcmp
arg	69:28	69:37	11	"nochrom"
water	69:28	0:0	12	"nochrom"
arg	69:39	69:45	11	option
water	69:39	0:0	12	option
op	69:47	0:0	10	||
op	69:50	0:0	10	!
call	69:51	69:69	10	strcmp
arg	69:58	69:61	11	"y"
water	69:58	0:0	12	"y"
arg	69:63	69:69	11	option
water	69:63	0:0	12	option
stmts	69:72	69:79	9	
water	69:72	0:0	10	chrom
op	69:77	0:0	10	=
water	69:78	0:0	10	0
water	69:79	0:0	10	;
else	70:12	70:77	6
stmts	70:17	70:77	7	
if	70:17	70:77	8	(!strcmp ("chrom" ,option ) || !strcmp ("c" ,option ))
cond	70:20	70:67	9	!strcmp ("chrom" ,option ) || !strcmp ("c" ,option )
op	70:20	0:0	10	!
call	70:21	70:43	10	strcmp
arg	70:28	70:35	11	"chrom"
water	70:28	0:0	12	"chrom"
arg	70:37	70:43	11	option
water	70:37	0:0	12	option
op	70:45	0:0	10	||
op	70:48	0:0	10	!
call	70:49	70:67	10	strcmp
arg	70:56	70:59	11	"c"
water	70:56	0:0	12	"c"
arg	70:61	70:67	11	option
water	70:61	0:0	12	option
stmts	70:70	70:77	9	
water	70:70	0:0	10	chrom
op	70:75	0:0	10	=
water	70:76	0:0	10	1
water	70:77	0:0	10	;
else	71:12	71:77	6
stmts	71:17	71:77	7	
if	71:17	71:77	8	(!strcmp ("noluma" ,option ) || !strcmp ("n" ,option ))
cond	71:20	71:68	9	!strcmp ("noluma" ,option ) || !strcmp ("n" ,option )
op	71:20	0:0	10	!
call	71:21	71:44	10	strcmp
arg	71:28	71:36	11	"noluma"
water	71:28	0:0	12	"noluma"
arg	71:38	71:44	11	option
water	71:38	0:0	12	option
op	71:46	0:0	10	||
op	71:49	0:0	10	!
call	71:50	71:68	10	strcmp
arg	71:57	71:60	11	"n"
water	71:57	0:0	12	"n"
arg	71:62	71:68	11	option
water	71:62	0:0	12	option
stmts	71:71	71:77	9	
water	71:71	0:0	10	luma
op	71:75	0:0	10	=
water	71:76	0:0	10	0
water	71:77	0:0	10	;
else	72:12	75:12	6
stmts	72:16	75:12	7	
water	72:16	0:0	8	{
water	73:16	0:0	8	options
op	73:23	0:0	8	[
water	73:24	0:0	8	numOfUnknownOptions
op	73:43	0:0	8	]
op	73:45	0:0	8	=
water	73:47	0:0	8	option
water	73:53	0:0	8	;
water	74:16	0:0	8	numOfUnknownOptions
op	74:35	0:0	8	++
water	74:37	0:0	8	;
water	75:12	0:0	8	}
if	76:12	76:65	6	(numOfUnknownOptions >= OPTIONS_ARRAY_SIZE - 1)
cond	76:15	76:57	7	numOfUnknownOptions >= OPTIONS_ARRAY_SIZE - 1
water	76:15	0:0	8	numOfUnknownOptions
op	76:35	0:0	8	>=
water	76:38	0:0	8	OPTIONS_ARRAY_SIZE
op	76:56	0:0	8	-
water	76:57	0:0	8	1
stmts	76:60	76:65	7	
break	76:60	76:65	8	
water	77:8	0:0	6	}
water	78:8	0:0	4	options
op	78:15	0:0	4	[
water	78:16	0:0	4	numOfUnknownOptions
op	78:35	0:0	4	]
op	78:37	0:0	4	=
water	78:39	0:0	4	NULL
water	78:43	0:0	4	;
for	80:8	96:8	4	(i = 0 ;replaceTable [ 2 * i ];i ++)
forinit	80:12	80:15	5	i = 0 ;
water	80:12	0:0	6	i
op	80:13	0:0	6	=
water	80:14	0:0	6	0
water	80:15	0:0	6	;
cond	80:17	80:33	5	replaceTable [ 2 * i ]
water	80:17	0:0	6	replaceTable
op	80:29	0:0	6	[
water	80:30	0:0	6	2
op	80:31	0:0	6	*
water	80:32	0:0	6	i
op	80:33	0:0	6	]
forexpr	80:36	80:37	5	i ++
water	80:36	0:0	6	i
op	80:37	0:0	6	++
stmts	80:40	96:8	5	
water	80:40	0:0	6	{
if	81:12	95:12	6	(!strcmp (replaceTable [ 2 * i ] ,filterName ))
cond	81:15	81:52	7	!strcmp (replaceTable [ 2 * i ] ,filterName )
op	81:15	0:0	8	!
call	81:16	81:52	8	strcmp
arg	81:23	81:40	9	replaceTable[2*i]
water	81:23	0:0	10	replaceTable
op	81:35	0:0	10	[
water	81:36	0:0	10	2
op	81:37	0:0	10	*
water	81:38	0:0	10	i
op	81:39	0:0	10	]
arg	81:42	81:52	9	filterName
water	81:42	0:0	10	filterName
stmts	81:54	95:12	7	
water	81:54	0:0	8	{
decl	82:16	82:61	8	size_t	newlen
op	82:30	0:0	8	=
call	82:32	82:60	9	strlen
arg	82:39	82:60	10	replaceTable[2*i+1]
water	82:39	0:0	11	replaceTable
op	82:51	0:0	11	[
water	82:52	0:0	11	2
op	82:53	0:0	11	*
water	82:54	0:0	11	i
op	82:56	0:0	11	+
water	82:58	0:0	11	1
op	82:59	0:0	11	]
decl	83:16	83:24	8	int	plen
decl	84:16	84:29	8	int	spaceLeft
water	85:16	0:0	8	p
op	85:17	0:0	8	--
water	85:19	0:0	8	,
op	85:21	0:0	8	*
water	85:22	0:0	8	p
op	85:23	0:0	8	=
water	85:24	0:0	8	','
water	85:27	0:0	8	;
water	86:16	0:0	8	plen
op	86:20	0:0	8	=
call	86:22	86:30	8	strlen
arg	86:29	86:30	9	p
water	86:29	0:0	10	p
water	86:31	0:0	8	;
water	87:16	0:0	8	spaceLeft
op	87:25	0:0	8	=
water	87:27	0:0	8	p
op	87:29	0:0	8	-
water	87:31	0:0	8	temp
op	87:36	0:0	8	+
water	87:38	0:0	8	plen
water	87:42	0:0	8	;
if	88:16	91:16	8	(spaceLeft + newlen >= GET_MODE_BUFFER_SIZE - 1)
cond	88:19	88:65	9	spaceLeft + newlen >= GET_MODE_BUFFER_SIZE - 1
water	88:19	0:0	10	spaceLeft
op	88:29	0:0	10	+
water	88:31	0:0	10	newlen
op	88:39	0:0	10	>=
water	88:42	0:0	10	GET_MODE_BUFFER_SIZE
op	88:63	0:0	10	-
water	88:65	0:0	10	1
stmts	88:67	91:16	9	
water	88:67	0:0	10	{
water	89:20	0:0	10	ppMode
op	89:26	0:0	10	->
water	89:28	0:0	10	error
op	89:33	0:0	10	++
water	89:35	0:0	10	;
break	90:20	90:25	10	
water	91:16	0:0	10	}
call	92:16	92:45	8	memmove
arg	92:24	92:34	9	p+newlen
water	92:24	0:0	10	p
op	92:26	0:0	10	+
water	92:28	0:0	10	newlen
arg	92:36	92:37	9	p
water	92:36	0:0	10	p
arg	92:39	92:45	9	plen+1
water	92:39	0:0	10	plen
op	92:43	0:0	10	+
water	92:44	0:0	10	1
water	92:46	0:0	8	;
call	93:16	93:55	8	memcpy
arg	93:23	93:24	9	p
water	93:23	0:0	10	p
arg	93:26	93:47	9	replaceTable[2*i+1]
water	93:26	0:0	10	replaceTable
op	93:38	0:0	10	[
water	93:39	0:0	10	2
op	93:40	0:0	10	*
water	93:41	0:0	10	i
op	93:43	0:0	10	+
water	93:45	0:0	10	1
op	93:46	0:0	10	]
arg	93:49	93:55	9	newlen
water	93:49	0:0	10	newlen
water	93:56	0:0	8	;
water	94:16	0:0	8	filterNameOk
op	94:28	0:0	8	=
water	94:29	0:0	8	1
water	94:30	0:0	8	;
water	95:12	0:0	8	}
water	96:8	0:0	6	}
for	97:8	161:8	4	(i = 0 ;filters [ i ] . shortName;i ++)
forinit	97:12	97:15	5	i = 0 ;
water	97:12	0:0	6	i
op	97:13	0:0	6	=
water	97:14	0:0	6	0
water	97:15	0:0	6	;
cond	97:17	97:28	5	filters [ i ] . shortName
water	97:17	0:0	6	filters
op	97:24	0:0	6	[
water	97:25	0:0	6	i
op	97:26	0:0	6	]
op	97:27	0:0	6	.
water	97:28	0:0	6	shortName
forexpr	97:39	97:40	5	i ++
water	97:39	0:0	6	i
op	97:40	0:0	6	++
stmts	97:43	161:8	5	
water	97:43	0:0	6	{
if	98:12	160:12	6	(!strcmp (filters [ i ] . longName ,filterName ) || !strcmp (filters [ i ] . shortName ,filterName ))
cond	98:18	99:58	7	!strcmp (filters [ i ] . longName ,filterName ) || !strcmp (filters [ i ] . shortName ,filterName )
op	98:18	0:0	8	!
call	98:19	98:57	8	strcmp
arg	98:26	98:45	9	filters[i].longName
water	98:26	0:0	10	filters
op	98:33	0:0	10	[
water	98:34	0:0	10	i
op	98:35	0:0	10	]
op	98:36	0:0	10	.
water	98:37	0:0	10	longName
arg	98:47	98:57	9	filterName
water	98:47	0:0	10	filterName
op	99:15	0:0	8	||
op	99:18	0:0	8	!
call	99:19	99:58	8	strcmp
arg	99:26	99:46	9	filters[i].shortName
water	99:26	0:0	10	filters
op	99:33	0:0	10	[
water	99:34	0:0	10	i
op	99:35	0:0	10	]
op	99:36	0:0	10	.
water	99:37	0:0	10	shortName
arg	99:48	99:58	9	filterName
water	99:48	0:0	10	filterName
stmts	99:60	160:12	7	
water	99:60	0:0	8	{
water	100:16	0:0	8	ppMode
op	100:22	0:0	8	->
water	100:24	0:0	8	lumMode
op	100:32	0:0	8	&=
water	100:35	0:0	8	~filters
op	100:43	0:0	8	[
water	100:44	0:0	8	i
op	100:45	0:0	8	]
op	100:46	0:0	8	.
water	100:47	0:0	8	mask
water	100:51	0:0	8	;
water	101:16	0:0	8	ppMode
op	101:22	0:0	8	->
water	101:24	0:0	8	chromMode
op	101:34	0:0	8	&=
water	101:37	0:0	8	~filters
op	101:45	0:0	8	[
water	101:46	0:0	8	i
op	101:47	0:0	8	]
op	101:48	0:0	8	.
water	101:49	0:0	8	mask
water	101:53	0:0	8	;
water	102:16	0:0	8	filterNameOk
op	102:28	0:0	8	=
water	102:29	0:0	8	1
water	102:30	0:0	8	;
if	103:16	103:33	8	(! enable)
cond	103:19	103:20	9	! enable
op	103:19	0:0	10	!
water	103:20	0:0	10	enable
stmts	103:28	103:33	9	
break	103:28	103:33	10	
if	104:16	105:53	8	(q >= filters [ i ] . minLumQuality && luma)
cond	104:19	104:52	9	q >= filters [ i ] . minLumQuality && luma
water	104:19	0:0	10	q
op	104:21	0:0	10	>=
water	104:24	0:0	10	filters
op	104:31	0:0	10	[
water	104:32	0:0	10	i
op	104:33	0:0	10	]
op	104:34	0:0	10	.
water	104:35	0:0	10	minLumQuality
op	104:49	0:0	10	&&
water	104:52	0:0	10	luma
stmts	105:20	105:53	9	
water	105:20	0:0	10	ppMode
op	105:26	0:0	10	->
water	105:28	0:0	10	lumMode
op	105:35	0:0	10	|=
water	105:38	0:0	10	filters
op	105:45	0:0	10	[
water	105:46	0:0	10	i
op	105:47	0:0	10	]
op	105:48	0:0	10	.
water	105:49	0:0	10	mask
water	105:53	0:0	10	;
if	106:16	108:63	8	(chrom == 1 || ( chrom == - 1 && filters [ i ] . chromDefault ))
cond	106:19	106:68	9	chrom == 1 || ( chrom == - 1 && filters [ i ] . chromDefault )
water	106:19	0:0	10	chrom
op	106:24	0:0	10	==
water	106:26	0:0	10	1
op	106:28	0:0	10	||
water	106:31	0:0	10	(
water	106:32	0:0	10	chrom
op	106:37	0:0	10	==
op	106:39	0:0	10	-
water	106:40	0:0	10	1
op	106:42	0:0	10	&&
water	106:45	0:0	10	filters
op	106:52	0:0	10	[
water	106:53	0:0	10	i
op	106:54	0:0	10	]
op	106:55	0:0	10	.
water	106:56	0:0	10	chromDefault
water	106:68	0:0	10	)
stmts	107:20	108:63	9	
if	107:20	108:63	10	(q >= filters [ i ] . minChromQuality)
cond	107:23	107:39	11	q >= filters [ i ] . minChromQuality
water	107:23	0:0	12	q
op	107:25	0:0	12	>=
water	107:28	0:0	12	filters
op	107:35	0:0	12	[
water	107:36	0:0	12	i
op	107:37	0:0	12	]
op	107:38	0:0	12	.
water	107:39	0:0	12	minChromQuality
stmts	108:28	108:63	11	
water	108:28	0:0	12	ppMode
op	108:34	0:0	12	->
water	108:36	0:0	12	chromMode
op	108:45	0:0	12	|=
water	108:48	0:0	12	filters
op	108:55	0:0	12	[
water	108:56	0:0	12	i
op	108:57	0:0	12	]
op	108:58	0:0	12	.
water	108:59	0:0	12	mask
water	108:63	0:0	12	;
if	109:16	121:16	8	(filters [ i ] . mask == LEVEL_FIX)
cond	109:19	109:38	9	filters [ i ] . mask == LEVEL_FIX
water	109:19	0:0	10	filters
op	109:26	0:0	10	[
water	109:27	0:0	10	i
op	109:28	0:0	10	]
op	109:29	0:0	10	.
water	109:30	0:0	10	mask
op	109:35	0:0	10	==
water	109:38	0:0	10	LEVEL_FIX
stmts	109:48	121:16	9	
water	109:48	0:0	10	{
decl	110:20	110:25	10	int	o
water	111:20	0:0	10	ppMode
op	111:26	0:0	10	->
water	111:28	0:0	10	minAllowedY
op	111:39	0:0	10	=
water	111:41	0:0	10	16
water	111:43	0:0	10	;
water	112:20	0:0	10	ppMode
op	112:26	0:0	10	->
water	112:28	0:0	10	maxAllowedY
op	112:39	0:0	10	=
water	112:41	0:0	10	234
water	112:44	0:0	10	;
for	113:20	120:20	10	(o = 0 ;options [ o ];o ++)
forinit	113:24	113:27	11	o = 0 ;
water	113:24	0:0	12	o
op	113:25	0:0	12	=
water	113:26	0:0	12	0
water	113:27	0:0	12	;
cond	113:29	113:38	11	options [ o ]
water	113:29	0:0	12	options
op	113:36	0:0	12	[
water	113:37	0:0	12	o
op	113:38	0:0	12	]
forexpr	113:41	113:42	11	o ++
water	113:41	0:0	12	o
op	113:42	0:0	12	++
stmts	113:45	120:20	11	
water	113:45	0:0	12	{
if	114:24	119:24	12	(!strcmp (options [ o ] ,"fullyrange" ) || !strcmp (options [ o ] ,"f" ))
cond	114:29	115:51	13	!strcmp (options [ o ] ,"fullyrange" ) || !strcmp (options [ o ] ,"f" )
op	114:29	0:0	14	!
call	114:30	114:60	14	strcmp
arg	114:37	114:47	15	options[o]
water	114:37	0:0	16	options
op	114:44	0:0	16	[
water	114:45	0:0	16	o
op	114:46	0:0	16	]
arg	114:48	114:60	15	"fullyrange"
water	114:48	0:0	16	"fullyrange"
op	115:27	0:0	14	||
op	115:29	0:0	14	!
call	115:30	115:51	14	strcmp
arg	115:37	115:47	15	options[o]
water	115:37	0:0	16	options
op	115:44	0:0	16	[
water	115:45	0:0	16	o
op	115:46	0:0	16	]
arg	115:48	115:51	15	"f"
water	115:48	0:0	16	"f"
stmts	115:53	119:24	13	
water	115:53	0:0	14	{
water	116:28	0:0	14	ppMode
op	116:34	0:0	14	->
water	116:36	0:0	14	minAllowedY
op	116:47	0:0	14	=
water	116:49	0:0	14	0
water	116:50	0:0	14	;
water	117:28	0:0	14	ppMode
op	117:34	0:0	14	->
water	117:36	0:0	14	maxAllowedY
op	117:47	0:0	14	=
water	117:49	0:0	14	255
water	117:52	0:0	14	;
water	118:28	0:0	14	numOfUnknownOptions
op	118:47	0:0	14	--
water	118:49	0:0	14	;
water	119:24	0:0	14	}
water	120:20	0:0	12	}
water	121:16	0:0	10	}
else	122:16	136:16	8
stmts	122:21	136:16	9	
if	122:21	136:16	10	(filters [ i ] . mask == TEMP_NOISE_FILTER)
cond	122:24	122:43	11	filters [ i ] . mask == TEMP_NOISE_FILTER
water	122:24	0:0	12	filters
op	122:31	0:0	12	[
water	122:32	0:0	12	i
op	122:33	0:0	12	]
op	122:34	0:0	12	.
water	122:35	0:0	12	mask
op	122:40	0:0	12	==
water	122:43	0:0	12	TEMP_NOISE_FILTER
stmts	123:16	136:16	11	
water	123:16	0:0	12	{
decl	124:20	124:25	12	int	o
decl	125:20	125:37	12	int	numOfNoises
op	125:35	0:0	12	=
water	125:36	0:0	12	0
for	126:20	135:20	12	(o = 0 ;options [ o ];o ++)
forinit	126:24	126:27	13	o = 0 ;
water	126:24	0:0	14	o
op	126:25	0:0	14	=
water	126:26	0:0	14	0
water	126:27	0:0	14	;
cond	126:29	126:38	13	options [ o ]
water	126:29	0:0	14	options
op	126:36	0:0	14	[
water	126:37	0:0	14	o
op	126:38	0:0	14	]
forexpr	126:41	126:42	13	o ++
water	126:41	0:0	14	o
op	126:42	0:0	14	++
stmts	126:45	135:20	13	
water	126:45	0:0	14	{
decl	127:24	127:34	14	char	*tail
water	128:24	0:0	14	ppMode
op	128:30	0:0	14	->
water	128:32	0:0	14	maxTmpNoise
op	128:43	0:0	14	[
water	128:44	0:0	14	numOfNoises
op	128:55	0:0	14	]
op	128:56	0:0	14	=
call	129:28	129:55	14	strtol
arg	129:35	129:45	15	options[o]
water	129:35	0:0	16	options
op	129:42	0:0	16	[
water	129:43	0:0	16	o
op	129:44	0:0	16	]
arg	129:47	129:52	15	&tail
op	129:47	0:0	16	&
water	129:48	0:0	16	tail
arg	129:54	129:55	15	0
water	129:54	0:0	16	0
water	129:56	0:0	14	;
if	130:24	134:24	14	(tail != options [ o ])
cond	130:27	130:42	15	tail != options [ o ]
water	130:27	0:0	16	tail
op	130:31	0:0	16	!=
water	130:33	0:0	16	options
op	130:40	0:0	16	[
water	130:41	0:0	16	o
op	130:42	0:0	16	]
stmts	130:44	134:24	15	
water	130:44	0:0	16	{
water	131:28	0:0	16	numOfNoises
op	131:39	0:0	16	++
water	131:41	0:0	16	;
water	132:28	0:0	16	numOfUnknownOptions
op	132:47	0:0	16	--
water	132:49	0:0	16	;
if	133:28	133:54	16	(numOfNoises >= 3)
cond	133:31	133:46	17	numOfNoises >= 3
water	133:31	0:0	18	numOfNoises
op	133:43	0:0	18	>=
water	133:46	0:0	18	3
stmts	133:49	133:54	17	
break	133:49	133:54	18	
water	134:24	0:0	16	}
water	135:20	0:0	14	}
water	136:16	0:0	12	}
else	137:16	148:16	8
stmts	137:21	148:16	9	
if	137:21	148:16	10	(filters [ i ] . mask == V_DEBLOCK || filters [ i ] . mask == H_DEBLOCK || filters [ i ] . mask == V_A_DEBLOCK || filters [ i ] . mask == H_A_DEBLOCK)
cond	137:24	138:77	11	filters [ i ] . mask == V_DEBLOCK || filters [ i ] . mask == H_DEBLOCK || filters [ i ] . mask == V_A_DEBLOCK || filters [ i ] . mask == H_A_DEBLOCK
water	137:24	0:0	12	filters
op	137:31	0:0	12	[
water	137:32	0:0	12	i
op	137:33	0:0	12	]
op	137:34	0:0	12	.
water	137:35	0:0	12	mask
op	137:40	0:0	12	==
water	137:43	0:0	12	V_DEBLOCK
op	137:55	0:0	12	||
water	137:58	0:0	12	filters
op	137:65	0:0	12	[
water	137:66	0:0	12	i
op	137:67	0:0	12	]
op	137:68	0:0	12	.
water	137:69	0:0	12	mask
op	137:74	0:0	12	==
water	137:77	0:0	12	H_DEBLOCK
op	138:21	0:0	12	||
water	138:24	0:0	12	filters
op	138:31	0:0	12	[
water	138:32	0:0	12	i
op	138:33	0:0	12	]
op	138:34	0:0	12	.
water	138:35	0:0	12	mask
op	138:40	0:0	12	==
water	138:43	0:0	12	V_A_DEBLOCK
op	138:55	0:0	12	||
water	138:58	0:0	12	filters
op	138:65	0:0	12	[
water	138:66	0:0	12	i
op	138:67	0:0	12	]
op	138:68	0:0	12	.
water	138:69	0:0	12	mask
op	138:74	0:0	12	==
water	138:77	0:0	12	H_A_DEBLOCK
stmts	138:89	148:16	11	
water	138:89	0:0	12	{
decl	139:20	139:25	12	int	o
for	140:20	147:20	12	(o = 0 ;options [ o ] && o < 2;o ++)
forinit	140:24	140:27	13	o = 0 ;
water	140:24	0:0	14	o
op	140:25	0:0	14	=
water	140:26	0:0	14	0
water	140:27	0:0	14	;
cond	140:29	140:45	13	options [ o ] && o < 2
water	140:29	0:0	14	options
op	140:36	0:0	14	[
water	140:37	0:0	14	o
op	140:38	0:0	14	]
op	140:40	0:0	14	&&
water	140:43	0:0	14	o
op	140:44	0:0	14	<
water	140:45	0:0	14	2
forexpr	140:48	140:49	13	o ++
water	140:48	0:0	14	o
op	140:49	0:0	14	++
stmts	140:52	147:20	13	
water	140:52	0:0	14	{
decl	141:24	141:34	14	char	*tail
decl	142:24	142:61	14	int	val
op	142:31	0:0	14	=
call	142:33	142:60	15	strtol
arg	142:40	142:50	16	options[o]
water	142:40	0:0	17	options
op	142:47	0:0	17	[
water	142:48	0:0	17	o
op	142:49	0:0	17	]
arg	142:52	142:57	16	&tail
op	142:52	0:0	17	&
water	142:53	0:0	17	tail
arg	142:59	142:60	16	0
water	142:59	0:0	17	0
if	143:24	143:50	14	(tail == options [ o ])
cond	143:27	143:42	15	tail == options [ o ]
water	143:27	0:0	16	tail
op	143:31	0:0	16	==
water	143:33	0:0	16	options
op	143:40	0:0	16	[
water	143:41	0:0	16	o
op	143:42	0:0	16	]
stmts	143:45	143:50	15	
break	143:45	143:50	16	
water	144:24	0:0	14	numOfUnknownOptions
op	144:43	0:0	14	--
water	144:45	0:0	14	;
if	145:24	145:56	14	(o == 0)
cond	145:27	145:30	15	o == 0
water	145:27	0:0	16	o
op	145:28	0:0	16	==
water	145:30	0:0	16	0
stmts	145:33	145:56	15	
water	145:33	0:0	16	ppMode
op	145:39	0:0	16	->
water	145:41	0:0	16	baseDcDiff
op	145:51	0:0	16	=
water	145:53	0:0	16	val
water	145:56	0:0	16	;
else	146:24	146:59	14
stmts	146:29	146:59	15	
water	146:29	0:0	16	ppMode
op	146:35	0:0	16	->
water	146:37	0:0	16	flatnessThreshold
op	146:54	0:0	16	=
water	146:56	0:0	16	val
water	146:59	0:0	16	;
water	147:20	0:0	14	}
water	148:16	0:0	12	}
else	149:16	159:16	8
stmts	149:21	159:16	9	
if	149:21	159:16	10	(filters [ i ] . mask == FORCE_QUANT)
cond	149:24	149:43	11	filters [ i ] . mask == FORCE_QUANT
water	149:24	0:0	12	filters
op	149:31	0:0	12	[
water	149:32	0:0	12	i
op	149:33	0:0	12	]
op	149:34	0:0	12	.
water	149:35	0:0	12	mask
op	149:40	0:0	12	==
water	149:43	0:0	12	FORCE_QUANT
stmts	149:55	159:16	11	
water	149:55	0:0	12	{
decl	150:20	150:25	12	int	o
water	151:20	0:0	12	ppMode
op	151:26	0:0	12	->
water	151:28	0:0	12	forcedQuant
op	151:39	0:0	12	=
water	151:41	0:0	12	15
water	151:43	0:0	12	;
for	152:20	158:20	12	(o = 0 ;options [ o ] && o < 1;o ++)
forinit	152:24	152:27	13	o = 0 ;
water	152:24	0:0	14	o
op	152:25	0:0	14	=
water	152:26	0:0	14	0
water	152:27	0:0	14	;
cond	152:29	152:45	13	options [ o ] && o < 1
water	152:29	0:0	14	options
op	152:36	0:0	14	[
water	152:37	0:0	14	o
op	152:38	0:0	14	]
op	152:40	0:0	14	&&
water	152:43	0:0	14	o
op	152:44	0:0	14	<
water	152:45	0:0	14	1
forexpr	152:48	152:49	13	o ++
water	152:48	0:0	14	o
op	152:49	0:0	14	++
stmts	152:52	158:20	13	
water	152:52	0:0	14	{
decl	153:24	153:34	14	char	*tail
decl	154:24	154:61	14	int	val
op	154:31	0:0	14	=
call	154:33	154:60	15	strtol
arg	154:40	154:50	16	options[o]
water	154:40	0:0	17	options
op	154:47	0:0	17	[
water	154:48	0:0	17	o
op	154:49	0:0	17	]
arg	154:52	154:57	16	&tail
op	154:52	0:0	17	&
water	154:53	0:0	17	tail
arg	154:59	154:60	16	0
water	154:59	0:0	17	0
if	155:24	155:50	14	(tail == options [ o ])
cond	155:27	155:42	15	tail == options [ o ]
water	155:27	0:0	16	tail
op	155:31	0:0	16	==
water	155:33	0:0	16	options
op	155:40	0:0	16	[
water	155:41	0:0	16	o
op	155:42	0:0	16	]
stmts	155:45	155:50	15	
break	155:45	155:50	16	
water	156:24	0:0	14	numOfUnknownOptions
op	156:43	0:0	14	--
water	156:45	0:0	14	;
water	157:24	0:0	14	ppMode
op	157:30	0:0	14	->
water	157:32	0:0	14	forcedQuant
op	157:43	0:0	14	=
water	157:45	0:0	14	val
water	157:48	0:0	14	;
water	158:20	0:0	14	}
water	159:16	0:0	12	}
water	160:12	0:0	8	}
water	161:8	0:0	6	}
if	162:8	162:41	4	(! filterNameOk)
cond	162:11	162:12	5	! filterNameOk
op	162:11	0:0	6	!
water	162:12	0:0	6	filterNameOk
stmts	162:26	162:41	5	
water	162:26	0:0	6	ppMode
op	162:32	0:0	6	->
water	162:34	0:0	6	error
op	162:39	0:0	6	++
water	162:41	0:0	6	;
water	163:8	0:0	4	ppMode
op	163:14	0:0	4	->
water	163:16	0:0	4	error
op	163:22	0:0	4	+=
water	163:25	0:0	4	numOfUnknownOptions
water	163:44	0:0	4	;
water	164:4	0:0	4	}
call	165:4	165:99	2	av_log
arg	165:11	165:15	3	NULL
water	165:11	0:0	4	NULL
arg	165:17	165:29	3	AV_LOG_DEBUG
water	165:17	0:0	4	AV_LOG_DEBUG
arg	165:31	165:63	3	"pp: lumMode=%X, chromMode=%X\n"
water	165:31	0:0	4	"pp: lumMode=%X, chromMode=%X\n"
arg	165:65	165:80	3	ppMode->lumMode
water	165:65	0:0	4	ppMode
op	165:71	0:0	4	->
water	165:73	0:0	4	lumMode
arg	165:82	165:99	3	ppMode->chromMode
water	165:82	0:0	4	ppMode
op	165:88	0:0	4	->
water	165:90	0:0	4	chromMode
water	165:100	0:0	2	;
if	166:4	170:4	2	(ppMode -> error)
cond	166:7	166:15	3	ppMode -> error
water	166:7	0:0	4	ppMode
op	166:13	0:0	4	->
water	166:15	0:0	4	error
stmts	166:21	170:4	3	
water	166:21	0:0	4	{
call	167:8	167:98	4	av_log
arg	167:15	167:19	5	NULL
water	167:15	0:0	6	NULL
arg	167:21	167:33	5	AV_LOG_ERROR
water	167:21	0:0	6	AV_LOG_ERROR
arg	167:35	167:77	5	"%d errors in postprocess string \"%s\"\n"
water	167:35	0:0	6	"%d errors in postprocess string \"%s\"\n"
arg	167:79	167:92	5	ppMode->error
water	167:79	0:0	6	ppMode
op	167:85	0:0	6	->
water	167:87	0:0	6	error
arg	167:94	167:98	5	name
water	167:94	0:0	6	name
water	167:99	0:0	4	;
call	168:8	168:22	4	av_free
arg	168:16	168:22	5	ppMode
water	168:16	0:0	6	ppMode
water	168:23	0:0	4	;
return	169:8	169:19	4	NULL
water	169:15	0:0	5	NULL
water	170:4	0:0	4	}
return	171:4	171:17	2	ppMode
water	171:11	0:0	3	ppMode
