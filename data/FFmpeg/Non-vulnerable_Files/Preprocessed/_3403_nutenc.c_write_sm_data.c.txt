func	1:0	116:0	0	static int	write_sm_data
params	1:24	0:0	1	
param	1:25	1:43	2	AVFormatContext *	s
param	1:45	1:60	2	AVIOContext *	bc
param	1:62	1:75	2	AVPacket *	pkt
param	1:77	1:88	2	int	is_meta
stmnts	0:0	115:14	1	
decl	3:4	3:24	2	int	ret
water	3:11	0:0	2	,
decl	3:4	3:24	2	int	i
water	3:14	0:0	2	,
decl	3:4	3:24	2	int	dyn_size
water	4:4	0:0	2	unsigned
water	4:13	0:0	2	flags
water	4:18	0:0	2	;
decl	5:4	5:23	2	AVIOContext	*dyn_bc
decl	6:4	6:25	2	int	sm_data_count
op	6:22	0:0	2	=
water	6:24	0:0	2	0
decl	7:4	7:20	2	uint8_t	tmp[256]
decl	8:4	8:20	2	uint8_t	*dyn_buf
water	9:4	0:0	2	ret
op	9:8	0:0	2	=
call	9:10	9:35	2	avio_open_dyn_buf
arg	9:28	9:35	3	&dyn_bc
op	9:28	0:0	4	&
water	9:29	0:0	4	dyn_bc
water	9:36	0:0	2	;
if	10:4	11:18	2	(ret < 0)
cond	10:8	10:14	3	ret < 0
water	10:8	0:0	4	ret
op	10:12	0:0	4	<
water	10:14	0:0	4	0
stmts	11:8	11:18	3	
return	11:8	11:18	4	ret
water	11:15	0:0	5	ret
for	12:4	109:4	2	(i = 0 ;i < pkt -> side_data_elems;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:23	3	i < pkt -> side_data_elems
water	12:16	0:0	4	i
op	12:17	0:0	4	<
water	12:18	0:0	4	pkt
op	12:21	0:0	4	->
water	12:23	0:0	4	side_data_elems
forexpr	12:40	12:41	3	i ++
water	12:40	0:0	4	i
op	12:41	0:0	4	++
stmts	12:45	109:4	3	
water	12:45	0:0	4	{
decl	13:8	13:52	4	const uint8_t	*data
op	13:28	0:0	4	=
water	13:30	0:0	4	pkt
op	13:33	0:0	4	->
water	13:35	0:0	4	side_data
op	13:44	0:0	4	[
water	13:45	0:0	4	i
op	13:46	0:0	4	]
op	13:47	0:0	4	.
water	13:48	0:0	4	data
decl	14:8	14:41	4	int	size
op	14:17	0:0	4	=
water	14:19	0:0	4	pkt
op	14:22	0:0	4	->
water	14:24	0:0	4	side_data
op	14:33	0:0	4	[
water	14:34	0:0	4	i
op	14:35	0:0	4	]
op	14:36	0:0	4	.
water	14:37	0:0	4	size
decl	15:8	15:45	4	const uint8_t	*data_end
op	15:32	0:0	4	=
water	15:34	0:0	4	data
op	15:39	0:0	4	+
water	15:41	0:0	4	size
if	16:8	37:8	4	(is_meta)
cond	16:12	16:12	5	is_meta
water	16:12	0:0	6	is_meta
stmts	16:21	37:8	5	
water	16:21	0:0	6	{
if	17:12	36:12	6	(pkt -> side_data [ i ] . type == AV_PKT_DATA_METADATA_UPDATE || pkt -> side_data [ i ] . type == AV_PKT_DATA_STRINGS_METADATA)
cond	17:19	18:45	7	pkt -> side_data [ i ] . type == AV_PKT_DATA_METADATA_UPDATE || pkt -> side_data [ i ] . type == AV_PKT_DATA_STRINGS_METADATA
water	17:19	0:0	8	pkt
op	17:22	0:0	8	->
water	17:24	0:0	8	side_data
op	17:33	0:0	8	[
water	17:34	0:0	8	i
op	17:35	0:0	8	]
op	17:36	0:0	8	.
water	17:37	0:0	8	type
op	17:42	0:0	8	==
water	17:45	0:0	8	AV_PKT_DATA_METADATA_UPDATE
op	18:16	0:0	8	||
water	18:19	0:0	8	pkt
op	18:22	0:0	8	->
water	18:24	0:0	8	side_data
op	18:33	0:0	8	[
water	18:34	0:0	8	i
op	18:35	0:0	8	]
op	18:36	0:0	8	.
water	18:37	0:0	8	type
op	18:42	0:0	8	==
water	18:45	0:0	8	AV_PKT_DATA_STRINGS_METADATA
stmts	18:75	36:12	7	
water	18:75	0:0	8	{
if	19:16	22:16	8	(! size || data [ size - 1 ])
cond	19:20	19:40	9	! size || data [ size - 1 ]
op	19:20	0:0	10	!
water	19:21	0:0	10	size
op	19:26	0:0	10	||
water	19:29	0:0	10	data
op	19:33	0:0	10	[
water	19:34	0:0	10	size
op	19:38	0:0	10	-
water	19:39	0:0	10	1
op	19:40	0:0	10	]
stmts	19:43	22:16	9	
water	19:43	0:0	10	{
water	20:20	0:0	10	ret
op	20:24	0:0	10	=
call	20:26	20:40	10	AVERROR
arg	20:34	20:40	11	EINVAL
water	20:34	0:0	12	EINVAL
water	20:41	0:0	10	;
goto	21:20	21:29	10	fail
water	21:25	0:0	11	fail
water	22:16	0:0	10	}
while	23:16	35:16	8	(data < data_end)
cond	23:23	23:30	9	data < data_end
water	23:23	0:0	10	data
op	23:28	0:0	10	<
water	23:30	0:0	10	data_end
stmts	23:40	35:16	9	
water	23:40	0:0	10	{
decl	24:20	24:45	10	const uint8_t	*key
op	24:39	0:0	10	=
water	24:41	0:0	10	data
decl	25:20	25:63	10	const uint8_t	*val
op	25:39	0:0	10	=
water	25:41	0:0	10	data
op	25:46	0:0	10	+
call	25:48	25:58	11	strlen
arg	25:55	25:58	12	key
water	25:55	0:0	13	key
op	25:60	0:0	10	+
water	25:62	0:0	10	1
if	26:20	29:20	10	(val >= data_end)
cond	26:23	26:30	11	val >= data_end
water	26:23	0:0	12	val
op	26:27	0:0	12	>=
water	26:30	0:0	12	data_end
stmts	26:40	29:20	11	
water	26:40	0:0	12	{
water	27:24	0:0	12	ret
op	27:28	0:0	12	=
call	27:30	27:44	12	AVERROR
arg	27:38	27:44	13	EINVAL
water	27:38	0:0	14	EINVAL
water	27:45	0:0	12	;
goto	28:24	28:33	12	fail
water	28:29	0:0	13	fail
water	29:20	0:0	12	}
call	30:20	30:39	10	put_str
arg	30:28	30:34	11	dyn_bc
water	30:28	0:0	12	dyn_bc
arg	30:36	30:39	11	key
water	30:36	0:0	12	key
water	30:40	0:0	10	;
call	31:20	31:36	10	put_s
arg	31:26	31:32	11	dyn_bc
water	31:26	0:0	12	dyn_bc
arg	31:34	31:36	11	-1
op	31:34	0:0	12	-
water	31:35	0:0	12	1
water	31:37	0:0	10	;
call	32:20	32:39	10	put_str
arg	32:28	32:34	11	dyn_bc
water	32:28	0:0	12	dyn_bc
arg	32:36	32:39	11	val
water	32:36	0:0	12	val
water	32:40	0:0	10	;
water	33:20	0:0	10	data
op	33:25	0:0	10	=
water	33:27	0:0	10	val
op	33:31	0:0	10	+
call	33:33	33:43	10	strlen
arg	33:40	33:43	11	val
water	33:40	0:0	12	val
op	33:45	0:0	10	+
water	33:47	0:0	10	1
water	33:48	0:0	10	;
water	34:20	0:0	10	sm_data_count
op	34:33	0:0	10	++
water	34:35	0:0	10	;
water	35:16	0:0	10	}
water	36:12	0:0	8	}
water	37:8	0:0	6	}
else	37:10	108:8	4
stmts	37:15	108:8	5	
water	37:15	0:0	6	{
switch	38:12	107:12	6	(pkt -> side_data [ i ] . type)
cond	38:20	38:38	7	pkt -> side_data [ i ] . type
water	38:20	0:0	8	pkt
op	38:23	0:0	8	->
water	38:25	0:0	8	side_data
op	38:34	0:0	8	[
water	38:35	0:0	8	i
op	38:36	0:0	8	]
op	38:37	0:0	8	.
water	38:38	0:0	8	type
stmts	38:44	107:12	7	
water	38:44	0:0	8	{
label	39:12	39:36	8	case AV_PKT_DATA_PALETTE :
label	40:12	40:42	8	case AV_PKT_DATA_NEW_EXTRADATA :
label	41:12	41:53	8	case AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL :
label	42:12	42:19	8	default :
if	43:16	45:16	8	(pkt -> side_data [ i ] . type == AV_PKT_DATA_PALETTE)
cond	43:20	43:46	9	pkt -> side_data [ i ] . type == AV_PKT_DATA_PALETTE
water	43:20	0:0	10	pkt
op	43:23	0:0	10	->
water	43:25	0:0	10	side_data
op	43:34	0:0	10	[
water	43:35	0:0	10	i
op	43:36	0:0	10	]
op	43:37	0:0	10	.
water	43:38	0:0	10	type
op	43:43	0:0	10	==
water	43:46	0:0	10	AV_PKT_DATA_PALETTE
stmts	43:67	45:16	9	
water	43:67	0:0	10	{
call	44:20	44:45	10	put_str
arg	44:28	44:34	11	dyn_bc
water	44:28	0:0	12	dyn_bc
arg	44:36	44:45	11	"Palette"
water	44:36	0:0	12	"Palette"
water	44:46	0:0	10	;
water	45:16	0:0	10	}
else	45:18	47:16	8
stmts	45:23	47:16	9	
if	45:23	47:16	10	(pkt -> side_data [ i ] . type == AV_PKT_DATA_NEW_EXTRADATA)
cond	45:26	45:52	11	pkt -> side_data [ i ] . type == AV_PKT_DATA_NEW_EXTRADATA
water	45:26	0:0	12	pkt
op	45:29	0:0	12	->
water	45:31	0:0	12	side_data
op	45:40	0:0	12	[
water	45:41	0:0	12	i
op	45:42	0:0	12	]
op	45:43	0:0	12	.
water	45:44	0:0	12	type
op	45:49	0:0	12	==
water	45:52	0:0	12	AV_PKT_DATA_NEW_EXTRADATA
stmts	45:79	47:16	11	
water	45:79	0:0	12	{
call	46:20	46:47	12	put_str
arg	46:28	46:34	13	dyn_bc
water	46:28	0:0	14	dyn_bc
arg	46:36	46:47	13	"Extradata"
water	46:36	0:0	14	"Extradata"
water	46:48	0:0	12	;
water	47:16	0:0	12	}
else	47:18	50:16	8
stmts	47:23	50:16	9	
if	47:23	50:16	10	(pkt -> side_data [ i ] . type == AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL)
cond	47:26	47:52	11	pkt -> side_data [ i ] . type == AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL
water	47:26	0:0	12	pkt
op	47:29	0:0	12	->
water	47:31	0:0	12	side_data
op	47:40	0:0	12	[
water	47:41	0:0	12	i
op	47:42	0:0	12	]
op	47:43	0:0	12	.
water	47:44	0:0	12	type
op	47:49	0:0	12	==
water	47:52	0:0	12	AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL
stmts	47:90	50:16	11	
water	47:90	0:0	12	{
call	48:20	48:90	12	snprintf
arg	48:29	48:32	13	tmp
water	48:29	0:0	14	tmp
arg	48:34	48:45	13	sizeof(tmp)
op	48:34	0:0	14	sizeof
water	48:40	0:0	14	(
water	48:41	0:0	14	tmp
water	48:44	0:0	14	)
arg	48:47	48:75	13	"CodecSpecificSide%"PRId64""
water	48:47	0:0	14	"CodecSpecificSide%"
water	48:67	0:0	14	PRId64
water	48:73	0:0	14	""
arg	48:77	48:90	13	AV_RB64(data)
call	48:77	48:89	14	AV_RB64
arg	48:85	48:89	15	data
water	48:85	0:0	16	data
water	48:91	0:0	12	;
call	49:20	49:39	12	put_str
arg	49:28	49:34	13	dyn_bc
water	49:28	0:0	14	dyn_bc
arg	49:36	49:39	13	tmp
water	49:36	0:0	14	tmp
water	49:40	0:0	12	;
water	50:16	0:0	12	}
else	50:18	55:16	8
stmts	50:23	55:16	9	
water	50:23	0:0	10	{
call	51:20	53:50	10	snprintf
arg	51:29	51:32	11	tmp
water	51:29	0:0	12	tmp
arg	51:34	51:45	11	sizeof(tmp)
op	51:34	0:0	12	sizeof
water	51:40	0:0	12	(
water	51:41	0:0	12	tmp
water	51:44	0:0	12	)
arg	51:47	51:65	11	"UserData%s-SD-%d"
water	51:47	0:0	12	"UserData%s-SD-%d"
arg	52:28	52:89	11	(s->flags&AVFMT_FLAG_BITEXACT)?"Lavf":LIBAVFORMAT_IDENT
water	52:28	0:0	12	(
water	52:29	0:0	12	s
op	52:30	0:0	12	->
water	52:32	0:0	12	flags
op	52:38	0:0	12	&
water	52:40	0:0	12	AVFMT_FLAG_BITEXACT
water	52:59	0:0	12	)
water	52:61	0:0	12	?
water	52:63	0:0	12	"Lavf"
water	52:70	0:0	12	:
water	52:72	0:0	12	LIBAVFORMAT_IDENT
arg	53:28	53:50	11	pkt->side_data[i].type
water	53:28	0:0	12	pkt
op	53:31	0:0	12	->
water	53:33	0:0	12	side_data
op	53:42	0:0	12	[
water	53:43	0:0	12	i
op	53:44	0:0	12	]
op	53:45	0:0	12	.
water	53:46	0:0	12	type
water	53:51	0:0	10	;
call	54:20	54:39	10	put_str
arg	54:28	54:34	11	dyn_bc
water	54:28	0:0	12	dyn_bc
arg	54:36	54:39	11	tmp
water	54:36	0:0	12	tmp
water	54:40	0:0	10	;
water	55:16	0:0	10	}
call	56:16	56:32	8	put_s
arg	56:22	56:28	9	dyn_bc
water	56:22	0:0	10	dyn_bc
arg	56:30	56:32	9	-2
op	56:30	0:0	10	-
water	56:31	0:0	10	2
water	56:33	0:0	8	;
call	57:16	57:37	8	put_str
arg	57:24	57:30	9	dyn_bc
water	57:24	0:0	10	dyn_bc
arg	57:32	57:37	9	"bin"
water	57:32	0:0	10	"bin"
water	57:38	0:0	8	;
call	58:16	58:55	8	ff_put_v
arg	58:25	58:31	9	dyn_bc
water	58:25	0:0	10	dyn_bc
arg	58:33	58:55	9	pkt->side_data[i].size
water	58:33	0:0	10	pkt
op	58:36	0:0	10	->
water	58:38	0:0	10	side_data
op	58:47	0:0	10	[
water	58:48	0:0	10	i
op	58:49	0:0	10	]
op	58:50	0:0	10	.
water	58:51	0:0	10	size
water	58:56	0:0	8	;
call	59:16	59:63	8	avio_write
arg	59:27	59:33	9	dyn_bc
water	59:27	0:0	10	dyn_bc
arg	59:35	59:39	9	data
water	59:35	0:0	10	data
arg	59:41	59:63	9	pkt->side_data[i].size
water	59:41	0:0	10	pkt
op	59:44	0:0	10	->
water	59:46	0:0	10	side_data
op	59:55	0:0	10	[
water	59:56	0:0	10	i
op	59:57	0:0	10	]
op	59:58	0:0	10	.
water	59:59	0:0	10	size
water	59:64	0:0	8	;
water	60:16	0:0	8	sm_data_count
op	60:29	0:0	8	++
water	60:31	0:0	8	;
break	61:16	61:21	8	
label	62:12	62:41	8	case AV_PKT_DATA_PARAM_CHANGE :
water	63:16	0:0	8	flags
op	63:22	0:0	8	=
call	63:24	63:49	8	bytestream_get_le32
arg	63:44	63:49	9	&data
op	63:44	0:0	10	&
water	63:45	0:0	10	data
water	63:50	0:0	8	;
if	64:16	68:16	8	(flags & AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT)
cond	64:20	64:28	9	flags & AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT
water	64:20	0:0	10	flags
op	64:26	0:0	10	&
water	64:28	0:0	10	AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT
stmts	64:69	68:16	9	
water	64:69	0:0	10	{
call	65:20	65:46	10	put_str
arg	65:28	65:34	11	dyn_bc
water	65:28	0:0	12	dyn_bc
arg	65:36	65:46	11	"Channels"
water	65:36	0:0	12	"Channels"
water	65:47	0:0	10	;
call	66:20	66:60	10	put_s
arg	66:26	66:32	11	dyn_bc
water	66:26	0:0	12	dyn_bc
arg	66:34	66:60	11	bytestream_get_le32(&data)
call	66:34	66:59	12	bytestream_get_le32
arg	66:54	66:59	13	&data
op	66:54	0:0	14	&
water	66:55	0:0	14	data
water	66:61	0:0	10	;
water	67:20	0:0	10	sm_data_count
op	67:33	0:0	10	++
water	67:35	0:0	10	;
water	68:16	0:0	10	}
if	69:16	76:16	8	(flags & AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT)
cond	69:20	69:28	9	flags & AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT
water	69:20	0:0	10	flags
op	69:26	0:0	10	&
water	69:28	0:0	10	AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT
stmts	69:70	76:16	9	
water	69:70	0:0	10	{
call	70:20	70:51	10	put_str
arg	70:28	70:34	11	dyn_bc
water	70:28	0:0	12	dyn_bc
arg	70:36	70:51	11	"ChannelLayout"
water	70:36	0:0	12	"ChannelLayout"
water	70:52	0:0	10	;
call	71:20	71:36	10	put_s
arg	71:26	71:32	11	dyn_bc
water	71:26	0:0	12	dyn_bc
arg	71:34	71:36	11	-2
op	71:34	0:0	12	-
water	71:35	0:0	12	2
water	71:37	0:0	10	;
call	72:20	72:41	10	put_str
arg	72:28	72:34	11	dyn_bc
water	72:28	0:0	12	dyn_bc
arg	72:36	72:41	11	"u64"
water	72:36	0:0	12	"u64"
water	72:42	0:0	10	;
call	73:20	73:34	10	ff_put_v
arg	73:29	73:31	11	bc
water	73:29	0:0	12	bc
arg	73:33	73:34	11	8
water	73:33	0:0	12	8
water	73:35	0:0	10	;
call	74:20	74:46	10	avio_write
arg	74:31	74:37	11	dyn_bc
water	74:31	0:0	12	dyn_bc
arg	74:39	74:43	11	data
water	74:39	0:0	12	data
arg	74:45	74:46	11	8
water	74:45	0:0	12	8
water	74:47	0:0	10	;
water	74:49	0:0	10	data
op	74:53	0:0	10	+=
water	74:55	0:0	10	8
water	74:56	0:0	10	;
water	75:20	0:0	10	sm_data_count
op	75:33	0:0	10	++
water	75:35	0:0	10	;
water	76:16	0:0	10	}
if	77:16	81:16	8	(flags & AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE)
cond	77:20	77:28	9	flags & AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE
water	77:20	0:0	10	flags
op	77:26	0:0	10	&
water	77:28	0:0	10	AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE
stmts	77:67	81:16	9	
water	77:67	0:0	10	{
call	78:20	78:48	10	put_str
arg	78:28	78:34	11	dyn_bc
water	78:28	0:0	12	dyn_bc
arg	78:36	78:48	11	"SampleRate"
water	78:36	0:0	12	"SampleRate"
water	78:49	0:0	10	;
call	79:20	79:60	10	put_s
arg	79:26	79:32	11	dyn_bc
water	79:26	0:0	12	dyn_bc
arg	79:34	79:60	11	bytestream_get_le32(&data)
call	79:34	79:59	12	bytestream_get_le32
arg	79:54	79:59	13	&data
op	79:54	0:0	14	&
water	79:55	0:0	14	data
water	79:61	0:0	10	;
water	80:20	0:0	10	sm_data_count
op	80:33	0:0	10	++
water	80:35	0:0	10	;
water	81:16	0:0	10	}
if	82:16	88:16	8	(flags & AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS)
cond	82:20	82:28	9	flags & AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS
water	82:20	0:0	10	flags
op	82:26	0:0	10	&
water	82:28	0:0	10	AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS
stmts	82:66	88:16	9	
water	82:66	0:0	10	{
call	83:20	83:43	10	put_str
arg	83:28	83:34	11	dyn_bc
water	83:28	0:0	12	dyn_bc
arg	83:36	83:43	11	"Width"
water	83:36	0:0	12	"Width"
water	83:44	0:0	10	;
call	84:20	84:60	10	put_s
arg	84:26	84:32	11	dyn_bc
water	84:26	0:0	12	dyn_bc
arg	84:34	84:60	11	bytestream_get_le32(&data)
call	84:34	84:59	12	bytestream_get_le32
arg	84:54	84:59	13	&data
op	84:54	0:0	14	&
water	84:55	0:0	14	data
water	84:61	0:0	10	;
call	85:20	85:44	10	put_str
arg	85:28	85:34	11	dyn_bc
water	85:28	0:0	12	dyn_bc
arg	85:36	85:44	11	"Height"
water	85:36	0:0	12	"Height"
water	85:45	0:0	10	;
call	86:20	86:60	10	put_s
arg	86:26	86:32	11	dyn_bc
water	86:26	0:0	12	dyn_bc
arg	86:34	86:60	11	bytestream_get_le32(&data)
call	86:34	86:59	12	bytestream_get_le32
arg	86:54	86:59	13	&data
op	86:54	0:0	14	&
water	86:55	0:0	14	data
water	86:61	0:0	10	;
water	87:20	0:0	10	sm_data_count
op	87:33	0:0	10	+=
water	87:35	0:0	10	2
water	87:36	0:0	10	;
water	88:16	0:0	10	}
break	89:16	89:21	8	
label	90:12	90:41	8	case AV_PKT_DATA_SKIP_SAMPLES :
if	91:16	95:16	8	(AV_RL32 (data ))
cond	91:20	91:32	9	AV_RL32 (data )
call	91:20	91:32	10	AV_RL32
arg	91:28	91:32	11	data
water	91:28	0:0	12	data
stmts	91:35	95:16	9	
water	91:35	0:0	10	{
call	92:20	92:47	10	put_str
arg	92:28	92:34	11	dyn_bc
water	92:28	0:0	12	dyn_bc
arg	92:36	92:47	11	"SkipStart"
water	92:36	0:0	12	"SkipStart"
water	92:48	0:0	10	;
call	93:20	93:57	10	put_s
arg	93:26	93:32	11	dyn_bc
water	93:26	0:0	12	dyn_bc
arg	93:34	93:57	11	(unsigned)AV_RL32(data)
water	93:34	0:0	12	(
water	93:35	0:0	12	unsigned
water	93:43	0:0	12	)
call	93:44	93:56	12	AV_RL32
arg	93:52	93:56	13	data
water	93:52	0:0	14	data
water	93:58	0:0	10	;
water	94:20	0:0	10	sm_data_count
op	94:33	0:0	10	++
water	94:35	0:0	10	;
water	95:16	0:0	10	}
if	96:16	100:16	8	(AV_RL32 (data + 4 ))
cond	96:20	96:34	9	AV_RL32 (data + 4 )
call	96:20	96:34	10	AV_RL32
arg	96:28	96:34	11	data+4
water	96:28	0:0	12	data
op	96:32	0:0	12	+
water	96:33	0:0	12	4
stmts	96:37	100:16	9	
water	96:37	0:0	10	{
call	97:20	97:45	10	put_str
arg	97:28	97:34	11	dyn_bc
water	97:28	0:0	12	dyn_bc
arg	97:36	97:45	11	"SkipEnd"
water	97:36	0:0	12	"SkipEnd"
water	97:46	0:0	10	;
call	98:20	98:59	10	put_s
arg	98:26	98:32	11	dyn_bc
water	98:26	0:0	12	dyn_bc
arg	98:34	98:59	11	(unsigned)AV_RL32(data+4)
water	98:34	0:0	12	(
water	98:35	0:0	12	unsigned
water	98:43	0:0	12	)
call	98:44	98:58	12	AV_RL32
arg	98:52	98:58	13	data+4
water	98:52	0:0	14	data
op	98:56	0:0	14	+
water	98:57	0:0	14	4
water	98:60	0:0	10	;
water	99:20	0:0	10	sm_data_count
op	99:33	0:0	10	++
water	99:35	0:0	10	;
water	100:16	0:0	10	}
break	101:16	101:21	8	
label	102:12	102:44	8	case AV_PKT_DATA_METADATA_UPDATE :
label	103:12	103:45	8	case AV_PKT_DATA_STRINGS_METADATA :
label	104:12	104:42	8	case AV_PKT_DATA_QUALITY_STATS :
break	106:16	106:21	8	
water	107:12	0:0	8	}
water	108:8	0:0	6	}
water	109:4	0:0	4	}
label	110:0	110:4	2	fail :
call	111:4	111:30	2	ff_put_v
arg	111:13	111:15	3	bc
water	111:13	0:0	4	bc
arg	111:17	111:30	3	sm_data_count
water	111:17	0:0	4	sm_data_count
water	111:31	0:0	2	;
water	112:4	0:0	2	dyn_size
op	112:13	0:0	2	=
call	112:15	112:50	2	avio_close_dyn_buf
arg	112:34	112:40	3	dyn_bc
water	112:34	0:0	4	dyn_bc
arg	112:42	112:50	3	&dyn_buf
op	112:42	0:0	4	&
water	112:43	0:0	4	dyn_buf
water	112:51	0:0	2	;
call	113:4	113:36	2	avio_write
arg	113:15	113:17	3	bc
water	113:15	0:0	4	bc
arg	113:19	113:26	3	dyn_buf
water	113:19	0:0	4	dyn_buf
arg	113:28	113:36	3	dyn_size
water	113:28	0:0	4	dyn_size
water	113:37	0:0	2	;
call	114:4	114:21	2	av_freep
arg	114:13	114:21	3	&dyn_buf
op	114:13	0:0	4	&
water	114:14	0:0	4	dyn_buf
water	114:22	0:0	2	;
return	115:4	115:14	2	ret
water	115:11	0:0	3	ret
