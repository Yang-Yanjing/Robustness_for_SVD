func	1:0	34:0	0	static int	flush_segment
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
stmnts	0:0	33:12	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:34	2	ConcatContext	*cat
op	4:23	0:0	2	=
water	4:25	0:0	2	ctx
op	4:28	0:0	2	->
water	4:30	0:0	2	priv
water	5:4	0:0	2	unsigned
water	5:13	0:0	2	str
water	5:16	0:0	2	,
water	5:18	0:0	2	str_max
water	5:25	0:0	2	;
decl	6:4	6:21	2	int64_t	seg_delta
call	7:4	7:38	2	find_next_delta_ts
arg	7:23	7:26	3	ctx
water	7:23	0:0	4	ctx
arg	7:28	7:38	3	&seg_delta
op	7:28	0:0	4	&
water	7:29	0:0	4	seg_delta
water	7:39	0:0	2	;
water	8:4	0:0	2	cat
op	8:7	0:0	2	->
water	8:9	0:0	2	cur_idx
op	8:17	0:0	2	+=
water	8:20	0:0	2	ctx
op	8:23	0:0	2	->
water	8:25	0:0	2	nb_outputs
water	8:35	0:0	2	;
water	9:4	0:0	2	cat
op	9:7	0:0	2	->
water	9:9	0:0	2	nb_in_active
op	9:22	0:0	2	=
water	9:24	0:0	2	ctx
op	9:27	0:0	2	->
water	9:29	0:0	2	nb_outputs
water	9:39	0:0	2	;
call	10:4	11:24	2	av_log
arg	10:11	10:14	3	ctx
water	10:11	0:0	4	ctx
arg	10:16	10:30	3	AV_LOG_VERBOSE
water	10:16	0:0	4	AV_LOG_VERBOSE
arg	10:32	10:69	3	"Segment finished at pts=%"PRId64"\n"
water	10:32	0:0	4	"Segment finished at pts=%"
water	10:59	0:0	4	PRId64
water	10:65	0:0	4	"\n"
arg	11:11	11:24	3	cat->delta_ts
water	11:11	0:0	4	cat
op	11:14	0:0	4	->
water	11:16	0:0	4	delta_ts
water	11:25	0:0	2	;
if	12:4	32:4	2	(cat -> cur_idx < ctx -> nb_inputs)
cond	12:8	12:28	3	cat -> cur_idx < ctx -> nb_inputs
water	12:8	0:0	4	cat
op	12:11	0:0	4	->
water	12:13	0:0	4	cur_idx
op	12:21	0:0	4	<
water	12:23	0:0	4	ctx
op	12:26	0:0	4	->
water	12:28	0:0	4	nb_inputs
stmts	12:39	32:4	3	
water	12:39	0:0	4	{
water	14:8	0:0	4	str
op	14:12	0:0	4	=
water	14:14	0:0	4	cat
op	14:17	0:0	4	->
water	14:19	0:0	4	nb_streams
op	14:29	0:0	4	[
water	14:30	0:0	4	AVMEDIA_TYPE_VIDEO
op	14:48	0:0	4	]
water	14:49	0:0	4	;
water	15:8	0:0	4	str_max
op	15:16	0:0	4	=
water	15:18	0:0	4	str
op	15:22	0:0	4	+
water	15:24	0:0	4	cat
op	15:27	0:0	4	->
water	15:29	0:0	4	nb_streams
op	15:39	0:0	4	[
water	15:40	0:0	4	AVMEDIA_TYPE_AUDIO
op	15:58	0:0	4	]
water	15:59	0:0	4	;
for	16:8	21:8	4	(;str < str_max;str ++)
forinit	16:13	16:13	5	;
water	16:13	0:0	6	;
cond	16:15	16:21	5	str < str_max
water	16:15	0:0	6	str
op	16:19	0:0	6	<
water	16:21	0:0	6	str_max
forexpr	16:30	16:33	5	str ++
water	16:30	0:0	6	str
op	16:33	0:0	6	++
stmts	16:37	21:8	5	
water	16:37	0:0	6	{
water	17:12	0:0	6	ret
op	17:16	0:0	6	=
call	17:18	18:40	6	send_silence
arg	17:31	17:34	7	ctx
water	17:31	0:0	8	ctx
arg	17:36	17:72	7	cat->cur_idx-ctx->nb_outputs+str
water	17:36	0:0	8	cat
op	17:39	0:0	8	->
water	17:41	0:0	8	cur_idx
op	17:49	0:0	8	-
water	17:51	0:0	8	ctx
op	17:54	0:0	8	->
water	17:56	0:0	8	nb_outputs
op	17:67	0:0	8	+
water	17:69	0:0	8	str
arg	17:74	17:77	7	str
water	17:74	0:0	8	str
arg	18:31	18:40	7	seg_delta
water	18:31	0:0	8	seg_delta
water	18:41	0:0	6	;
if	19:12	20:26	6	(ret < 0)
cond	19:16	19:22	7	ret < 0
water	19:16	0:0	8	ret
op	19:20	0:0	8	<
water	19:22	0:0	8	0
stmts	20:16	20:26	7	
return	20:16	20:26	8	ret
water	20:23	0:0	9	ret
water	21:8	0:0	6	}
water	24:8	0:0	4	str_max
op	24:16	0:0	4	=
water	24:18	0:0	4	cat
op	24:21	0:0	4	->
water	24:23	0:0	4	cur_idx
op	24:31	0:0	4	+
water	24:33	0:0	4	ctx
op	24:36	0:0	4	->
water	24:38	0:0	4	nb_outputs
water	24:48	0:0	4	;
for	25:8	31:8	4	(str = cat -> cur_idx ;str < str_max;str ++)
forinit	25:13	25:31	5	str = cat -> cur_idx ;
water	25:13	0:0	6	str
op	25:17	0:0	6	=
water	25:19	0:0	6	cat
op	25:22	0:0	6	->
water	25:24	0:0	6	cur_idx
water	25:31	0:0	6	;
cond	25:33	25:39	5	str < str_max
water	25:33	0:0	6	str
op	25:37	0:0	6	<
water	25:39	0:0	6	str_max
forexpr	25:48	25:51	5	str ++
water	25:48	0:0	6	str
op	25:51	0:0	6	++
stmts	25:55	31:8	5	
water	25:55	0:0	6	{
while	26:12	30:12	6	(cat -> in [ str ] . queue . available)
cond	26:19	26:38	7	cat -> in [ str ] . queue . available
water	26:19	0:0	8	cat
op	26:22	0:0	8	->
water	26:24	0:0	8	in
op	26:26	0:0	8	[
water	26:27	0:0	8	str
op	26:30	0:0	8	]
op	26:31	0:0	8	.
water	26:32	0:0	8	queue
op	26:37	0:0	8	.
water	26:38	0:0	8	available
stmts	26:49	30:12	7	
water	26:49	0:0	8	{
water	27:16	0:0	8	ret
op	27:20	0:0	8	=
call	27:22	27:79	8	push_frame
arg	27:33	27:36	9	ctx
water	27:33	0:0	10	ctx
arg	27:38	27:41	9	str
water	27:38	0:0	10	str
arg	27:43	27:79	9	ff_bufqueue_get(&cat->in[str].queue)
call	27:43	27:78	10	ff_bufqueue_get
arg	27:59	27:78	11	&cat->in[str].queue
op	27:59	0:0	12	&
water	27:60	0:0	12	cat
op	27:63	0:0	12	->
water	27:65	0:0	12	in
op	27:67	0:0	12	[
water	27:68	0:0	12	str
op	27:71	0:0	12	]
op	27:72	0:0	12	.
water	27:73	0:0	12	queue
water	27:80	0:0	8	;
if	28:16	29:30	8	(ret < 0)
cond	28:20	28:26	9	ret < 0
water	28:20	0:0	10	ret
op	28:24	0:0	10	<
water	28:26	0:0	10	0
stmts	29:20	29:30	9	
return	29:20	29:30	10	ret
water	29:27	0:0	11	ret
water	30:12	0:0	8	}
water	31:8	0:0	6	}
water	32:4	0:0	4	}
return	33:4	33:12	2	0
water	33:11	0:0	3	0
