func	1:0	37:0	0	static int	decode_cpe
params	1:21	0:0	1	
param	1:22	1:36	2	AACContext *	ac
param	1:38	1:55	2	GetBitContext *	gb
param	1:57	1:76	2	ChannelElement *	cpe
stmnts	0:0	36:12	1	
decl	3:4	3:45	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:45	2	int	ret
water	3:14	0:0	2	,
decl	3:4	3:45	2	int	common_window
water	3:29	0:0	2	,
decl	3:4	3:45	2	int	ms_present
op	3:42	0:0	2	=
water	3:44	0:0	2	0
decl	4:4	4:65	2	int	eld_syntax
op	4:19	0:0	2	=
water	4:21	0:0	2	ac
op	4:23	0:0	2	->
water	4:25	0:0	2	oc
op	4:27	0:0	2	[
water	4:28	0:0	2	1
op	4:29	0:0	2	]
op	4:30	0:0	2	.
water	4:31	0:0	2	m4ac
op	4:35	0:0	2	.
water	4:36	0:0	2	object_type
op	4:48	0:0	2	==
water	4:51	0:0	2	AOT_ER_AAC_ELD
water	5:4	0:0	2	common_window
op	5:18	0:0	2	=
water	5:20	0:0	2	eld_syntax
op	5:31	0:0	2	||
call	5:34	5:46	2	get_bits1
arg	5:44	5:46	3	gb
water	5:44	0:0	4	gb
water	5:47	0:0	2	;
if	6:4	22:4	2	(common_window)
cond	6:8	6:8	3	common_window
water	6:8	0:0	4	common_window
stmts	6:23	22:4	3	
water	6:23	0:0	4	{
if	7:8	8:38	4	(decode_ics_info (ac ,& cpe -> ch [ 0 ] . ics ,gb ))
cond	7:12	7:51	5	decode_ics_info (ac ,& cpe -> ch [ 0 ] . ics ,gb )
call	7:12	7:51	6	decode_ics_info
arg	7:28	7:30	7	ac
water	7:28	0:0	8	ac
arg	7:32	7:47	7	&cpe->ch[0].ics
op	7:32	0:0	8	&
water	7:33	0:0	8	cpe
op	7:36	0:0	8	->
water	7:38	0:0	8	ch
op	7:40	0:0	8	[
water	7:41	0:0	8	0
op	7:42	0:0	8	]
op	7:43	0:0	8	.
water	7:44	0:0	8	ics
arg	7:49	7:51	7	gb
water	7:49	0:0	8	gb
stmts	8:12	8:38	5	
return	8:12	8:38	6	AVERROR_INVALIDDATA
water	8:19	0:0	7	AVERROR_INVALIDDATA
water	9:8	0:0	4	i
op	9:10	0:0	4	=
water	9:12	0:0	4	cpe
op	9:15	0:0	4	->
water	9:17	0:0	4	ch
op	9:19	0:0	4	[
water	9:20	0:0	4	1
op	9:21	0:0	4	]
op	9:22	0:0	4	.
water	9:23	0:0	4	ics
op	9:26	0:0	4	.
water	9:27	0:0	4	use_kb_window
op	9:40	0:0	4	[
water	9:41	0:0	4	0
op	9:42	0:0	4	]
water	9:43	0:0	4	;
water	10:8	0:0	4	cpe
op	10:11	0:0	4	->
water	10:13	0:0	4	ch
op	10:15	0:0	4	[
water	10:16	0:0	4	1
op	10:17	0:0	4	]
op	10:18	0:0	4	.
water	10:19	0:0	4	ics
op	10:23	0:0	4	=
water	10:25	0:0	4	cpe
op	10:28	0:0	4	->
water	10:30	0:0	4	ch
op	10:32	0:0	4	[
water	10:33	0:0	4	0
op	10:34	0:0	4	]
op	10:35	0:0	4	.
water	10:36	0:0	4	ics
water	10:39	0:0	4	;
water	11:8	0:0	4	cpe
op	11:11	0:0	4	->
water	11:13	0:0	4	ch
op	11:15	0:0	4	[
water	11:16	0:0	4	1
op	11:17	0:0	4	]
op	11:18	0:0	4	.
water	11:19	0:0	4	ics
op	11:22	0:0	4	.
water	11:23	0:0	4	use_kb_window
op	11:36	0:0	4	[
water	11:37	0:0	4	1
op	11:38	0:0	4	]
op	11:40	0:0	4	=
water	11:42	0:0	4	i
water	11:43	0:0	4	;
if	12:8	15:75	4	(cpe -> ch [ 1 ] . ics . predictor_present && ( ac -> oc [ 1 ] . m4ac . object_type != AOT_AAC_MAIN ))
cond	12:12	13:55	5	cpe -> ch [ 1 ] . ics . predictor_present && ( ac -> oc [ 1 ] . m4ac . object_type != AOT_AAC_MAIN )
water	12:12	0:0	6	cpe
op	12:15	0:0	6	->
water	12:17	0:0	6	ch
op	12:19	0:0	6	[
water	12:20	0:0	6	1
op	12:21	0:0	6	]
op	12:22	0:0	6	.
water	12:23	0:0	6	ics
op	12:26	0:0	6	.
water	12:27	0:0	6	predictor_present
op	12:45	0:0	6	&&
water	13:12	0:0	6	(
water	13:13	0:0	6	ac
op	13:15	0:0	6	->
water	13:17	0:0	6	oc
op	13:19	0:0	6	[
water	13:20	0:0	6	1
op	13:21	0:0	6	]
op	13:22	0:0	6	.
water	13:23	0:0	6	m4ac
op	13:27	0:0	6	.
water	13:28	0:0	6	object_type
op	13:40	0:0	6	!=
water	13:43	0:0	6	AOT_AAC_MAIN
water	13:55	0:0	6	)
stmts	14:12	15:75	5	
if	14:12	15:75	6	(( cpe -> ch [ 1 ] . ics . ltp . present =get_bits (gb ,1 ) ))
cond	14:16	14:61	7	( cpe -> ch [ 1 ] . ics . ltp . present =get_bits (gb ,1 ) )
water	14:16	0:0	8	(
water	14:17	0:0	8	cpe
op	14:20	0:0	8	->
water	14:22	0:0	8	ch
op	14:24	0:0	8	[
water	14:25	0:0	8	1
op	14:26	0:0	8	]
op	14:27	0:0	8	.
water	14:28	0:0	8	ics
op	14:31	0:0	8	.
water	14:32	0:0	8	ltp
op	14:35	0:0	8	.
water	14:36	0:0	8	present
op	14:44	0:0	8	=
call	14:46	14:60	8	get_bits
arg	14:55	14:57	9	gb
water	14:55	0:0	10	gb
arg	14:59	14:60	9	1
water	14:59	0:0	10	1
water	14:61	0:0	8	)
stmts	15:16	15:75	7	
call	15:16	15:74	8	decode_ltp
arg	15:27	15:46	9	&cpe->ch[1].ics.ltp
op	15:27	0:0	10	&
water	15:28	0:0	10	cpe
op	15:31	0:0	10	->
water	15:33	0:0	10	ch
op	15:35	0:0	10	[
water	15:36	0:0	10	1
op	15:37	0:0	10	]
op	15:38	0:0	10	.
water	15:39	0:0	10	ics
op	15:42	0:0	10	.
water	15:43	0:0	10	ltp
arg	15:48	15:50	9	gb
water	15:48	0:0	10	gb
arg	15:52	15:74	9	cpe->ch[1].ics.max_sfb
water	15:52	0:0	10	cpe
op	15:55	0:0	10	->
water	15:57	0:0	10	ch
op	15:59	0:0	10	[
water	15:60	0:0	10	1
op	15:61	0:0	10	]
op	15:62	0:0	10	.
water	15:63	0:0	10	ics
op	15:66	0:0	10	.
water	15:67	0:0	10	max_sfb
water	15:75	0:0	8	;
water	16:8	0:0	4	ms_present
op	16:19	0:0	4	=
call	16:21	16:35	4	get_bits
arg	16:30	16:32	5	gb
water	16:30	0:0	6	gb
arg	16:34	16:35	5	2
water	16:34	0:0	6	2
water	16:36	0:0	4	;
if	17:8	20:8	4	(ms_present == 3)
cond	17:12	17:26	5	ms_present == 3
water	17:12	0:0	6	ms_present
op	17:23	0:0	6	==
water	17:26	0:0	6	3
stmts	17:29	20:8	5	
water	17:29	0:0	6	{
call	18:12	18:75	6	av_log
arg	18:19	18:28	7	ac->avctx
water	18:19	0:0	8	ac
op	18:21	0:0	8	->
water	18:23	0:0	8	avctx
arg	18:30	18:42	7	AV_LOG_ERROR
water	18:30	0:0	8	AV_LOG_ERROR
arg	18:44	18:75	7	"ms_present = 3 is reserved.\n"
water	18:44	0:0	8	"ms_present = 3 is reserved.\n"
water	18:76	0:0	6	;
return	19:12	19:38	6	AVERROR_INVALIDDATA
water	19:19	0:0	7	AVERROR_INVALIDDATA
water	20:8	0:0	6	}
else	20:10	21:55	4
stmts	20:15	21:55	5	
if	20:15	21:55	6	(ms_present)
cond	20:19	20:19	7	ms_present
water	20:19	0:0	8	ms_present
stmts	21:12	21:55	7	
call	21:12	21:54	8	decode_mid_side_stereo
arg	21:35	21:38	9	cpe
water	21:35	0:0	10	cpe
arg	21:40	21:42	9	gb
water	21:40	0:0	10	gb
arg	21:44	21:54	9	ms_present
water	21:44	0:0	10	ms_present
water	21:55	0:0	8	;
water	22:4	0:0	4	}
if	23:4	24:18	2	(( ret =decode_ics (ac ,& cpe -> ch [ 0 ] ,gb ,common_window ,0 ) ))
cond	23:8	23:64	3	( ret =decode_ics (ac ,& cpe -> ch [ 0 ] ,gb ,common_window ,0 ) )
water	23:8	0:0	4	(
water	23:9	0:0	4	ret
op	23:13	0:0	4	=
call	23:15	23:63	4	decode_ics
arg	23:26	23:28	5	ac
water	23:26	0:0	6	ac
arg	23:30	23:41	5	&cpe->ch[0]
op	23:30	0:0	6	&
water	23:31	0:0	6	cpe
op	23:34	0:0	6	->
water	23:36	0:0	6	ch
op	23:38	0:0	6	[
water	23:39	0:0	6	0
op	23:40	0:0	6	]
arg	23:43	23:45	5	gb
water	23:43	0:0	6	gb
arg	23:47	23:60	5	common_window
water	23:47	0:0	6	common_window
arg	23:62	23:63	5	0
water	23:62	0:0	6	0
water	23:64	0:0	4	)
stmts	24:8	24:18	3	
return	24:8	24:18	4	ret
water	24:15	0:0	5	ret
if	25:4	26:18	2	(( ret =decode_ics (ac ,& cpe -> ch [ 1 ] ,gb ,common_window ,0 ) ))
cond	25:8	25:64	3	( ret =decode_ics (ac ,& cpe -> ch [ 1 ] ,gb ,common_window ,0 ) )
water	25:8	0:0	4	(
water	25:9	0:0	4	ret
op	25:13	0:0	4	=
call	25:15	25:63	4	decode_ics
arg	25:26	25:28	5	ac
water	25:26	0:0	6	ac
arg	25:30	25:41	5	&cpe->ch[1]
op	25:30	0:0	6	&
water	25:31	0:0	6	cpe
op	25:34	0:0	6	->
water	25:36	0:0	6	ch
op	25:38	0:0	6	[
water	25:39	0:0	6	1
op	25:40	0:0	6	]
arg	25:43	25:45	5	gb
water	25:43	0:0	6	gb
arg	25:47	25:60	5	common_window
water	25:47	0:0	6	common_window
arg	25:62	25:63	5	0
water	25:62	0:0	6	0
water	25:64	0:0	4	)
stmts	26:8	26:18	3	
return	26:8	26:18	4	ret
water	26:15	0:0	5	ret
if	27:4	34:4	2	(common_window)
cond	27:8	27:8	3	common_window
water	27:8	0:0	4	common_window
stmts	27:23	34:4	3	
water	27:23	0:0	4	{
if	28:8	29:42	4	(ms_present)
cond	28:12	28:12	5	ms_present
water	28:12	0:0	6	ms_present
stmts	29:12	29:42	5	
call	29:12	29:41	6	apply_mid_side_stereo
arg	29:34	29:36	7	ac
water	29:34	0:0	8	ac
arg	29:38	29:41	7	cpe
water	29:38	0:0	8	cpe
water	29:42	0:0	6	;
if	30:8	33:8	4	(ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_MAIN)
cond	30:12	30:42	5	ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_MAIN
water	30:12	0:0	6	ac
op	30:14	0:0	6	->
water	30:16	0:0	6	oc
op	30:18	0:0	6	[
water	30:19	0:0	6	1
op	30:20	0:0	6	]
op	30:21	0:0	6	.
water	30:22	0:0	6	m4ac
op	30:26	0:0	6	.
water	30:27	0:0	6	object_type
op	30:39	0:0	6	==
water	30:42	0:0	6	AOT_AAC_MAIN
stmts	30:56	33:8	5	
water	30:56	0:0	6	{
call	31:12	31:44	6	apply_prediction
arg	31:29	31:31	7	ac
water	31:29	0:0	8	ac
arg	31:33	31:44	7	&cpe->ch[0]
op	31:33	0:0	8	&
water	31:34	0:0	8	cpe
op	31:37	0:0	8	->
water	31:39	0:0	8	ch
op	31:41	0:0	8	[
water	31:42	0:0	8	0
op	31:43	0:0	8	]
water	31:45	0:0	6	;
call	32:12	32:44	6	apply_prediction
arg	32:29	32:31	7	ac
water	32:29	0:0	8	ac
arg	32:33	32:44	7	&cpe->ch[1]
op	32:33	0:0	8	&
water	32:34	0:0	8	cpe
op	32:37	0:0	8	->
water	32:39	0:0	8	ch
op	32:41	0:0	8	[
water	32:42	0:0	8	1
op	32:43	0:0	8	]
water	32:45	0:0	6	;
water	33:8	0:0	6	}
water	34:4	0:0	4	}
call	35:4	35:46	2	apply_intensity_stereo
arg	35:27	35:29	3	ac
water	35:27	0:0	4	ac
arg	35:31	35:34	3	cpe
water	35:31	0:0	4	cpe
arg	35:36	35:46	3	ms_present
water	35:36	0:0	4	ms_present
water	35:47	0:0	2	;
return	36:4	36:12	2	0
water	36:11	0:0	3	0
