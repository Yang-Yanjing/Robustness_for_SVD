func	1:0	26:0	0	static int	adx_decode
params	1:21	0:0	1	
param	1:22	1:35	2	ADXContext *	c
param	1:37	1:49	2	int16_t *	out
param	1:51	1:61	2	int	offset
param	2:22	2:39	2	const uint8_t *	in
param	2:41	2:47	2	int	ch
stmnts	0:0	25:12	1	
decl	4:4	4:40	2	ADXChannelState	*prev
op	4:26	0:0	2	=
op	4:28	0:0	2	&
water	4:29	0:0	2	c
op	4:30	0:0	2	->
water	4:32	0:0	2	prev
op	4:36	0:0	2	[
water	4:37	0:0	2	ch
op	4:39	0:0	2	]
decl	5:4	5:20	2	GetBitContext	gb
decl	6:4	6:27	2	int	scale
op	6:14	0:0	2	=
call	6:16	6:26	3	AV_RB16
arg	6:24	6:26	4	in
water	6:24	0:0	5	in
decl	7:4	7:9	2	int	i
decl	8:4	8:21	2	int	s0
water	8:10	0:0	2	,
decl	8:4	8:21	2	int	s1
water	8:14	0:0	2	,
decl	8:4	8:21	2	int	s2
water	8:18	0:0	2	,
decl	8:4	8:21	2	int	d
if	10:4	11:17	2	(scale & 0 x8000)
cond	10:8	10:17	3	scale & 0 x8000
water	10:8	0:0	4	scale
op	10:14	0:0	4	&
water	10:16	0:0	4	0
water	10:17	0:0	4	x8000
stmts	11:8	11:17	3	
return	11:8	11:17	4	-1
op	11:15	0:0	5	-
water	11:16	0:0	5	1
call	12:4	12:51	2	init_get_bits
arg	12:18	12:21	3	&gb
op	12:18	0:0	4	&
water	12:19	0:0	4	gb
arg	12:23	12:29	3	in+2
water	12:23	0:0	4	in
op	12:26	0:0	4	+
water	12:28	0:0	4	2
arg	12:31	12:51	3	(BLOCK_SIZE-2)*8
water	12:31	0:0	4	(
water	12:32	0:0	4	BLOCK_SIZE
op	12:43	0:0	4	-
water	12:45	0:0	4	2
water	12:46	0:0	4	)
op	12:48	0:0	4	*
water	12:50	0:0	4	8
water	12:52	0:0	2	;
water	13:4	0:0	2	out
op	13:8	0:0	2	+=
water	13:11	0:0	2	offset
water	13:17	0:0	2	;
water	14:4	0:0	2	s1
op	14:7	0:0	2	=
water	14:9	0:0	2	prev
op	14:13	0:0	2	->
water	14:15	0:0	2	s1
water	14:17	0:0	2	;
water	15:4	0:0	2	s2
op	15:7	0:0	2	=
water	15:9	0:0	2	prev
op	15:13	0:0	2	->
water	15:15	0:0	2	s2
water	15:17	0:0	2	;
for	16:4	22:4	2	(i = 0 ;i < BLOCK_SAMPLES;i ++)
forinit	16:9	16:14	3	i = 0 ;
water	16:9	0:0	4	i
op	16:11	0:0	4	=
water	16:13	0:0	4	0
water	16:14	0:0	4	;
cond	16:16	16:20	3	i < BLOCK_SAMPLES
water	16:16	0:0	4	i
op	16:18	0:0	4	<
water	16:20	0:0	4	BLOCK_SAMPLES
forexpr	16:35	16:36	3	i ++
water	16:35	0:0	4	i
op	16:36	0:0	4	++
stmts	16:40	22:4	3	
water	16:40	0:0	4	{
water	17:8	0:0	4	d
op	17:11	0:0	4	=
call	17:13	17:29	4	get_sbits
arg	17:23	17:26	5	&gb
op	17:23	0:0	6	&
water	17:24	0:0	6	gb
arg	17:28	17:29	5	4
water	17:28	0:0	6	4
water	17:30	0:0	4	;
water	18:8	0:0	4	s0
op	18:11	0:0	4	=
water	18:13	0:0	4	(
water	18:14	0:0	4	(
water	18:15	0:0	4	d
op	18:17	0:0	4	<<
water	18:20	0:0	4	COEFF_BITS
water	18:30	0:0	4	)
op	18:32	0:0	4	*
water	18:34	0:0	4	scale
op	18:40	0:0	4	+
water	18:42	0:0	4	c
op	18:43	0:0	4	->
water	18:45	0:0	4	coeff
op	18:50	0:0	4	[
water	18:51	0:0	4	0
op	18:52	0:0	4	]
op	18:54	0:0	4	*
water	18:56	0:0	4	s1
op	18:59	0:0	4	+
water	18:61	0:0	4	c
op	18:62	0:0	4	->
water	18:64	0:0	4	coeff
op	18:69	0:0	4	[
water	18:70	0:0	4	1
op	18:71	0:0	4	]
op	18:73	0:0	4	*
water	18:75	0:0	4	s2
water	18:77	0:0	4	)
op	18:79	0:0	4	>>
water	18:82	0:0	4	COEFF_BITS
water	18:92	0:0	4	;
water	19:8	0:0	4	s2
op	19:11	0:0	4	=
water	19:13	0:0	4	s1
water	19:15	0:0	4	;
water	20:8	0:0	4	s1
op	20:11	0:0	4	=
call	20:13	20:29	4	av_clip_int16
arg	20:27	20:29	5	s0
water	20:27	0:0	6	s0
water	20:30	0:0	4	;
op	21:8	0:0	4	*
water	21:9	0:0	4	out
op	21:12	0:0	4	++
op	21:15	0:0	4	=
water	21:17	0:0	4	s1
water	21:19	0:0	4	;
water	22:4	0:0	4	}
water	23:4	0:0	2	prev
op	23:8	0:0	2	->
water	23:10	0:0	2	s1
op	23:13	0:0	2	=
water	23:15	0:0	2	s1
water	23:17	0:0	2	;
water	24:4	0:0	2	prev
op	24:8	0:0	2	->
water	24:10	0:0	2	s2
op	24:13	0:0	2	=
water	24:15	0:0	2	s2
water	24:17	0:0	2	;
return	25:4	25:12	2	0
water	25:11	0:0	3	0
