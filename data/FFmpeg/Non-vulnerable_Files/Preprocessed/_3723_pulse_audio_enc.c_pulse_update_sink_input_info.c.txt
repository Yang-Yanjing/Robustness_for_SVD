func	1:0	28:0	0	static int	pulse_update_sink_input_info
params	1:39	0:0	1	
param	1:40	1:58	2	AVFormatContext *	h
stmnts	0:0	27:14	1	
decl	3:4	3:31	2	PulseData	*s
op	3:17	0:0	2	=
water	3:19	0:0	2	h
op	3:20	0:0	2	->
water	3:22	0:0	2	priv_data
decl	4:4	4:20	2	pa_operation	*op
decl	5:4	5:36	2	enum pa_operation_state	op_state
decl	6:4	6:26	2	pa_mainloop	*ml
op	6:20	0:0	2	=
water	6:22	0:0	2	NULL
decl	7:4	7:26	2	pa_context	*ctx
op	7:20	0:0	2	=
water	7:22	0:0	2	NULL
decl	8:4	8:15	2	int	ret
op	8:12	0:0	2	=
water	8:14	0:0	2	0
if	9:4	10:18	2	(( ret =ff_pulse_audio_connect_context (& ml ,& ctx ,s -> server ,"Update sink input information" ) ) < 0)
cond	9:8	9:104	3	( ret =ff_pulse_audio_connect_context (& ml ,& ctx ,s -> server ,"Update sink input information" ) ) < 0
water	9:8	0:0	4	(
water	9:9	0:0	4	ret
op	9:13	0:0	4	=
call	9:15	9:99	4	ff_pulse_audio_connect_context
arg	9:46	9:49	5	&ml
op	9:46	0:0	6	&
water	9:47	0:0	6	ml
arg	9:51	9:55	5	&ctx
op	9:51	0:0	6	&
water	9:52	0:0	6	ctx
arg	9:57	9:66	5	s->server
water	9:57	0:0	6	s
op	9:58	0:0	6	->
water	9:60	0:0	6	server
arg	9:68	9:99	5	"Update sink input information"
water	9:68	0:0	6	"Update sink input information"
water	9:100	0:0	4	)
op	9:102	0:0	4	<
water	9:104	0:0	4	0
stmts	10:8	10:18	3	
return	10:8	10:18	4	ret
water	10:15	0:0	5	ret
if	11:4	15:4	2	(! ( op =pa_context_get_sink_input_info (ctx ,pa_stream_get_index (s -> stream ) ,pulse_audio_sink_input_cb ,h ) ))
cond	11:8	12:75	3	! ( op =pa_context_get_sink_input_info (ctx ,pa_stream_get_index (s -> stream ) ,pulse_audio_sink_input_cb ,h ) )
op	11:8	0:0	4	!
water	11:9	0:0	4	(
water	11:10	0:0	4	op
op	11:13	0:0	4	=
call	11:15	12:74	4	pa_context_get_sink_input_info
arg	11:46	11:49	5	ctx
water	11:46	0:0	6	ctx
arg	11:51	11:81	5	pa_stream_get_index(s->stream)
call	11:51	11:80	6	pa_stream_get_index
arg	11:71	11:80	7	s->stream
water	11:71	0:0	8	s
op	11:72	0:0	8	->
water	11:74	0:0	8	stream
arg	12:46	12:71	5	pulse_audio_sink_input_cb
water	12:46	0:0	6	pulse_audio_sink_input_cb
arg	12:73	12:74	5	h
water	12:73	0:0	6	h
water	12:75	0:0	4	)
stmts	12:78	15:4	3	
water	12:78	0:0	4	{
water	13:8	0:0	4	ret
op	13:12	0:0	4	=
water	13:14	0:0	4	AVERROR_EXTERNAL
water	13:30	0:0	4	;
goto	14:8	14:17	4	fail
water	14:13	0:0	5	fail
water	15:4	0:0	4	}
while	16:4	17:40	2	(( op_state =pa_operation_get_state (op ) ) == PA_OPERATION_RUNNING)
cond	16:11	16:54	3	( op_state =pa_operation_get_state (op ) ) == PA_OPERATION_RUNNING
water	16:11	0:0	4	(
water	16:12	0:0	4	op_state
op	16:21	0:0	4	=
call	16:23	16:48	4	pa_operation_get_state
arg	16:46	16:48	5	op
water	16:46	0:0	6	op
water	16:49	0:0	4	)
op	16:51	0:0	4	==
water	16:54	0:0	4	PA_OPERATION_RUNNING
stmts	17:8	17:40	3	
call	17:8	17:39	4	pa_mainloop_iterate
arg	17:28	17:30	5	ml
water	17:28	0:0	6	ml
arg	17:32	17:33	5	1
water	17:32	0:0	6	1
arg	17:35	17:39	5	NULL
water	17:35	0:0	6	NULL
water	17:40	0:0	4	;
call	18:4	18:25	2	pa_operation_unref
arg	18:23	18:25	3	op
water	18:23	0:0	4	op
water	18:26	0:0	2	;
if	19:4	22:4	2	(op_state != PA_OPERATION_DONE)
cond	19:8	19:20	3	op_state != PA_OPERATION_DONE
water	19:8	0:0	4	op_state
op	19:17	0:0	4	!=
water	19:20	0:0	4	PA_OPERATION_DONE
stmts	19:39	22:4	3	
water	19:39	0:0	4	{
water	20:8	0:0	4	ret
op	20:12	0:0	4	=
water	20:14	0:0	4	AVERROR_EXTERNAL
water	20:30	0:0	4	;
goto	21:8	21:17	4	fail
water	21:13	0:0	5	fail
water	22:4	0:0	4	}
label	23:2	23:6	2	fail :
call	24:4	24:47	2	ff_pulse_audio_disconnect_context
arg	24:38	24:41	3	&ml
op	24:38	0:0	4	&
water	24:39	0:0	4	ml
arg	24:43	24:47	3	&ctx
op	24:43	0:0	4	&
water	24:44	0:0	4	ctx
water	24:48	0:0	2	;
if	25:4	26:75	2	(ret)
cond	25:8	25:8	3	ret
water	25:8	0:0	4	ret
stmts	26:8	26:75	3	
call	26:8	26:74	4	av_log
arg	26:15	26:16	5	s
water	26:15	0:0	6	s
arg	26:18	26:30	5	AV_LOG_ERROR
water	26:18	0:0	6	AV_LOG_ERROR
arg	26:32	26:74	5	"pa_context_get_sink_input_info failed.\n"
water	26:32	0:0	6	"pa_context_get_sink_input_info failed.\n"
water	26:75	0:0	4	;
return	27:4	27:14	2	ret
water	27:11	0:0	3	ret
