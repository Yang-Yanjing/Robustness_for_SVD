decl	1:7	1:34	0	int	api_mode
op	1:20	0:0	0	=
water	1:22	0:0	0	API_MODE_OLD
func	2:0	75:0	0	static int	decode_packet
params	2:24	0:0	1	
param	2:25	2:39	2	int *	got_frame
param	2:41	2:51	2	int	cached
stmnts	0:0	74:18	1	
decl	4:4	4:15	2	int	ret
op	4:12	0:0	2	=
water	4:14	0:0	2	0
decl	5:4	5:26	2	int	decoded
op	5:16	0:0	2	=
water	5:18	0:0	2	pkt
op	5:21	0:0	2	.
water	5:22	0:0	2	size
op	6:4	0:0	2	*
water	6:5	0:0	2	got_frame
op	6:15	0:0	2	=
water	6:17	0:0	2	0
water	6:18	0:0	2	;
if	7:4	41:4	2	(pkt . stream_index == video_stream_idx)
cond	7:8	7:28	3	pkt . stream_index == video_stream_idx
water	7:8	0:0	4	pkt
op	7:11	0:0	4	.
water	7:12	0:0	4	stream_index
op	7:25	0:0	4	==
water	7:28	0:0	4	video_stream_idx
stmts	7:46	41:4	3	
water	7:46	0:0	4	{
water	9:8	0:0	4	ret
op	9:12	0:0	4	=
call	9:14	9:73	4	avcodec_decode_video2
arg	9:36	9:49	5	video_dec_ctx
water	9:36	0:0	6	video_dec_ctx
arg	9:51	9:56	5	frame
water	9:51	0:0	6	frame
arg	9:58	9:67	5	got_frame
water	9:58	0:0	6	got_frame
arg	9:69	9:73	5	&pkt
op	9:69	0:0	6	&
water	9:70	0:0	6	pkt
water	9:74	0:0	4	;
if	10:8	13:8	4	(ret < 0)
cond	10:12	10:18	5	ret < 0
water	10:12	0:0	6	ret
op	10:16	0:0	6	<
water	10:18	0:0	6	0
stmts	10:21	13:8	5	
water	10:21	0:0	6	{
call	11:12	11:80	6	fprintf
arg	11:20	11:26	7	stderr
water	11:20	0:0	8	stderr
arg	11:28	11:63	7	"Error decoding video frame (%s)\n"
water	11:28	0:0	8	"Error decoding video frame (%s)\n"
arg	11:65	11:80	7	av_err2str(ret)
call	11:65	11:79	8	av_err2str
arg	11:76	11:79	9	ret
water	11:76	0:0	10	ret
water	11:81	0:0	6	;
return	12:12	12:22	6	ret
water	12:19	0:0	7	ret
water	13:8	0:0	6	}
if	14:8	40:8	4	(* got_frame)
cond	14:12	14:13	5	* got_frame
op	14:12	0:0	6	*
water	14:13	0:0	6	got_frame
stmts	14:24	40:8	5	
water	14:24	0:0	6	{
if	15:12	28:12	6	(frame -> width != width || frame -> height != height || frame -> format != pix_fmt)
cond	15:16	16:33	7	frame -> width != width || frame -> height != height || frame -> format != pix_fmt
water	15:16	0:0	8	frame
op	15:21	0:0	8	->
water	15:23	0:0	8	width
op	15:29	0:0	8	!=
water	15:32	0:0	8	width
op	15:38	0:0	8	||
water	15:41	0:0	8	frame
op	15:46	0:0	8	->
water	15:48	0:0	8	height
op	15:55	0:0	8	!=
water	15:58	0:0	8	height
op	15:65	0:0	8	||
water	16:16	0:0	8	frame
op	16:21	0:0	8	->
water	16:23	0:0	8	format
op	16:30	0:0	8	!=
water	16:33	0:0	8	pix_fmt
stmts	16:42	28:12	7	
water	16:42	0:0	8	{
call	19:16	26:58	8	fprintf
arg	19:24	19:30	9	stderr
water	19:24	0:0	10	stderr
arg	19:32	23:69	9	"Error: Width, height and pixel format have to be ""constant in a rawvideo file, but the width, height or ""pixel format of the input video changed:\n""old: width = %d, height = %d, format = %s\n""new: width = %d, height = %d, format = %s\n"
water	19:32	0:0	10	"Error: Width, height and pixel format have to be "
water	20:24	0:0	10	"constant in a rawvideo file, but the width, height or "
water	21:24	0:0	10	"pixel format of the input video changed:\n"
water	22:24	0:0	10	"old: width = %d, height = %d, format = %s\n"
water	23:24	0:0	10	"new: width = %d, height = %d, format = %s\n"
arg	24:24	24:29	9	width
water	24:24	0:0	10	width
arg	24:31	24:37	9	height
water	24:31	0:0	10	height
arg	24:39	24:67	9	av_get_pix_fmt_name(pix_fmt)
call	24:39	24:66	10	av_get_pix_fmt_name
arg	24:59	24:66	11	pix_fmt
water	24:59	0:0	12	pix_fmt
arg	25:24	25:36	9	frame->width
water	25:24	0:0	10	frame
op	25:29	0:0	10	->
water	25:31	0:0	10	width
arg	25:38	25:51	9	frame->height
water	25:38	0:0	10	frame
op	25:43	0:0	10	->
water	25:45	0:0	10	height
arg	26:24	26:58	9	av_get_pix_fmt_name(frame->format)
call	26:24	26:57	10	av_get_pix_fmt_name
arg	26:44	26:57	11	frame->format
water	26:44	0:0	12	frame
op	26:49	0:0	12	->
water	26:51	0:0	12	format
water	26:59	0:0	8	;
return	27:16	27:25	8	-1
op	27:23	0:0	9	-
water	27:24	0:0	9	1
water	28:12	0:0	8	}
call	29:12	32:71	6	printf
arg	29:19	29:59	7	"video_frame%s n:%d coded_n:%d pts:%s\n"
water	29:19	0:0	8	"video_frame%s n:%d coded_n:%d pts:%s\n"
arg	30:19	30:43	7	cached?"(cached)":""
water	30:19	0:0	8	cached
water	30:26	0:0	8	?
water	30:28	0:0	8	"(cached)"
water	30:39	0:0	8	:
water	30:41	0:0	8	""
arg	31:19	31:38	7	video_frame_count++
water	31:19	0:0	8	video_frame_count
op	31:36	0:0	8	++
arg	31:40	31:67	7	frame->coded_picture_number
water	31:40	0:0	8	frame
op	31:45	0:0	8	->
water	31:47	0:0	8	coded_picture_number
arg	32:19	32:71	7	av_ts2timestr(frame->pts,&video_dec_ctx->time_base)
call	32:19	32:70	8	av_ts2timestr
arg	32:33	32:43	9	frame->pts
water	32:33	0:0	10	frame
op	32:38	0:0	10	->
water	32:40	0:0	10	pts
arg	32:45	32:70	9	&video_dec_ctx->time_base
op	32:45	0:0	10	&
water	32:46	0:0	10	video_dec_ctx
op	32:59	0:0	10	->
water	32:61	0:0	10	time_base
water	32:72	0:0	6	;
call	35:12	37:48	6	av_image_copy
arg	35:26	35:40	7	video_dst_data
water	35:26	0:0	8	video_dst_data
arg	35:42	35:60	7	video_dst_linesize
water	35:42	0:0	8	video_dst_linesize
arg	36:26	36:57	7	(constuint8_t**)(frame->data)
call	36:26	36:56	8	(constuint8_t**)
arg	36:45	36:56	9	frame->data
water	36:45	0:0	10	frame
op	36:50	0:0	10	->
water	36:52	0:0	10	data
arg	36:59	36:74	7	frame->linesize
water	36:59	0:0	8	frame
op	36:64	0:0	8	->
water	36:66	0:0	8	linesize
arg	37:26	37:33	7	pix_fmt
water	37:26	0:0	8	pix_fmt
arg	37:35	37:40	7	width
water	37:35	0:0	8	width
arg	37:42	37:48	7	height
water	37:42	0:0	8	height
water	37:49	0:0	6	;
call	39:12	39:74	6	fwrite
arg	39:19	39:36	7	video_dst_data[0]
water	39:19	0:0	8	video_dst_data
op	39:33	0:0	8	[
water	39:34	0:0	8	0
op	39:35	0:0	8	]
arg	39:38	39:39	7	1
water	39:38	0:0	8	1
arg	39:41	39:58	7	video_dst_bufsize
water	39:41	0:0	8	video_dst_bufsize
arg	39:60	39:74	7	video_dst_file
water	39:60	0:0	8	video_dst_file
water	39:75	0:0	6	;
water	40:8	0:0	6	}
water	41:4	0:0	4	}
else	41:6	69:4	2
stmts	41:11	69:4	3	
if	41:11	69:4	4	(pkt . stream_index == audio_stream_idx)
cond	41:15	41:35	5	pkt . stream_index == audio_stream_idx
water	41:15	0:0	6	pkt
op	41:18	0:0	6	.
water	41:19	0:0	6	stream_index
op	41:32	0:0	6	==
water	41:35	0:0	6	audio_stream_idx
stmts	41:53	69:4	5	
water	41:53	0:0	6	{
water	43:8	0:0	6	ret
op	43:12	0:0	6	=
call	43:14	43:73	6	avcodec_decode_audio4
arg	43:36	43:49	7	audio_dec_ctx
water	43:36	0:0	8	audio_dec_ctx
arg	43:51	43:56	7	frame
water	43:51	0:0	8	frame
arg	43:58	43:67	7	got_frame
water	43:58	0:0	8	got_frame
arg	43:69	43:73	7	&pkt
op	43:69	0:0	8	&
water	43:70	0:0	8	pkt
water	43:74	0:0	6	;
if	44:8	47:8	6	(ret < 0)
cond	44:12	44:18	7	ret < 0
water	44:12	0:0	8	ret
op	44:16	0:0	8	<
water	44:18	0:0	8	0
stmts	44:21	47:8	7	
water	44:21	0:0	8	{
call	45:12	45:80	8	fprintf
arg	45:20	45:26	9	stderr
water	45:20	0:0	10	stderr
arg	45:28	45:63	9	"Error decoding audio frame (%s)\n"
water	45:28	0:0	10	"Error decoding audio frame (%s)\n"
arg	45:65	45:80	9	av_err2str(ret)
call	45:65	45:79	10	av_err2str
arg	45:76	45:79	11	ret
water	45:76	0:0	12	ret
water	45:81	0:0	8	;
return	46:12	46:22	8	ret
water	46:19	0:0	9	ret
water	47:8	0:0	8	}
water	52:8	0:0	6	decoded
op	52:16	0:0	6	=
call	52:18	52:37	6	FFMIN
arg	52:24	52:27	7	ret
water	52:24	0:0	8	ret
arg	52:29	52:37	7	pkt.size
water	52:29	0:0	8	pkt
op	52:32	0:0	8	.
water	52:33	0:0	8	size
water	52:38	0:0	6	;
if	53:8	68:8	6	(* got_frame)
cond	53:12	53:13	7	* got_frame
op	53:12	0:0	8	*
water	53:13	0:0	8	got_frame
stmts	53:24	68:8	7	
water	53:24	0:0	8	{
decl	54:12	54:97	8	size_t	unpadded_linesize
op	54:37	0:0	8	=
water	54:39	0:0	8	frame
op	54:44	0:0	8	->
water	54:46	0:0	8	nb_samples
call	54:57	54:96	9	*av_get_bytes_per_sample
arg	54:83	54:96	10	frame->format
water	54:83	0:0	11	frame
op	54:88	0:0	11	->
water	54:90	0:0	11	format
call	55:12	58:71	8	printf
arg	55:19	55:62	9	"audio_frame%s n:%d nb_samples:%d pts:%s\n"
water	55:19	0:0	10	"audio_frame%s n:%d nb_samples:%d pts:%s\n"
arg	56:19	56:43	9	cached?"(cached)":""
water	56:19	0:0	10	cached
water	56:26	0:0	10	?
water	56:28	0:0	10	"(cached)"
water	56:39	0:0	10	:
water	56:41	0:0	10	""
arg	57:19	57:38	9	audio_frame_count++
water	57:19	0:0	10	audio_frame_count
op	57:36	0:0	10	++
arg	57:40	57:57	9	frame->nb_samples
water	57:40	0:0	10	frame
op	57:45	0:0	10	->
water	57:47	0:0	10	nb_samples
arg	58:19	58:71	9	av_ts2timestr(frame->pts,&audio_dec_ctx->time_base)
call	58:19	58:70	10	av_ts2timestr
arg	58:33	58:43	11	frame->pts
water	58:33	0:0	12	frame
op	58:38	0:0	12	->
water	58:40	0:0	12	pts
arg	58:45	58:70	11	&audio_dec_ctx->time_base
op	58:45	0:0	12	&
water	58:46	0:0	12	audio_dec_ctx
op	58:59	0:0	12	->
water	58:61	0:0	12	time_base
water	58:72	0:0	8	;
call	67:12	67:80	8	fwrite
arg	67:19	67:42	9	frame->extended_data[0]
water	67:19	0:0	10	frame
op	67:24	0:0	10	->
water	67:26	0:0	10	extended_data
op	67:39	0:0	10	[
water	67:40	0:0	10	0
op	67:41	0:0	10	]
arg	67:44	67:45	9	1
water	67:44	0:0	10	1
arg	67:47	67:64	9	unpadded_linesize
water	67:47	0:0	10	unpadded_linesize
arg	67:66	67:80	9	audio_dst_file
water	67:66	0:0	10	audio_dst_file
water	67:81	0:0	8	;
water	68:8	0:0	8	}
water	69:4	0:0	6	}
if	72:4	73:29	2	(* got_frame && api_mode == API_MODE_NEW_API_REF_COUNT)
cond	72:8	72:34	3	* got_frame && api_mode == API_MODE_NEW_API_REF_COUNT
op	72:8	0:0	4	*
water	72:9	0:0	4	got_frame
op	72:19	0:0	4	&&
water	72:22	0:0	4	api_mode
op	72:31	0:0	4	==
water	72:34	0:0	4	API_MODE_NEW_API_REF_COUNT
stmts	73:8	73:29	3	
call	73:8	73:28	4	av_frame_unref
arg	73:23	73:28	5	frame
water	73:23	0:0	6	frame
water	73:29	0:0	4	;
return	74:4	74:18	2	decoded
water	74:11	0:0	3	decoded
