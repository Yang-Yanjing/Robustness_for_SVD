func	1:0	94:0	0	static int	mov_write_trailer
params	1:28	0:0	1	
param	1:29	1:47	2	AVFormatContext *	s
stmnts	0:0	93:14	1	
decl	3:4	3:37	2	MOVMuxContext	*mov
op	3:23	0:0	2	=
water	3:25	0:0	2	s
op	3:26	0:0	2	->
water	3:28	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:15	2	int	res
op	5:12	0:0	2	=
water	5:14	0:0	2	0
decl	6:4	6:9	2	int	i
decl	7:4	7:20	2	int64_t	moov_pos
for	12:4	19:4	2	(i = 0 ;i < mov -> nb_streams;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:25	3	i < mov -> nb_streams
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	mov
op	12:23	0:0	4	->
water	12:25	0:0	4	nb_streams
forexpr	12:37	12:38	3	i ++
water	12:37	0:0	4	i
op	12:38	0:0	4	++
stmts	12:42	19:4	3	
water	12:42	0:0	4	{
decl	13:8	13:39	4	MOVTrack	*trk
op	13:22	0:0	4	=
op	13:24	0:0	4	&
water	13:25	0:0	4	mov
op	13:28	0:0	4	->
water	13:30	0:0	4	tracks
op	13:36	0:0	4	[
water	13:37	0:0	4	i
op	13:38	0:0	4	]
if	14:8	18:8	4	(trk -> enc -> codec_id == AV_CODEC_ID_MOV_TEXT && ! trk -> last_sample_is_subtitle_end)
cond	14:12	15:18	5	trk -> enc -> codec_id == AV_CODEC_ID_MOV_TEXT && ! trk -> last_sample_is_subtitle_end
water	14:12	0:0	6	trk
op	14:15	0:0	6	->
water	14:17	0:0	6	enc
op	14:20	0:0	6	->
water	14:22	0:0	6	codec_id
op	14:31	0:0	6	==
water	14:34	0:0	6	AV_CODEC_ID_MOV_TEXT
op	14:55	0:0	6	&&
op	15:12	0:0	6	!
water	15:13	0:0	6	trk
op	15:16	0:0	6	->
water	15:18	0:0	6	last_sample_is_subtitle_end
stmts	15:47	18:8	5	
water	15:47	0:0	6	{
call	16:12	16:67	6	mov_write_subtitle_end_packet
arg	16:42	16:43	7	s
water	16:42	0:0	8	s
arg	16:45	16:46	7	i
water	16:45	0:0	8	i
arg	16:48	16:67	7	trk->track_duration
water	16:48	0:0	8	trk
op	16:51	0:0	8	->
water	16:53	0:0	8	track_duration
water	16:68	0:0	6	;
water	17:12	0:0	6	trk
op	17:15	0:0	6	->
water	17:17	0:0	6	last_sample_is_subtitle_end
op	17:45	0:0	6	=
water	17:47	0:0	6	1
water	17:48	0:0	6	;
water	18:8	0:0	6	}
water	19:4	0:0	4	}
if	23:4	29:4	2	(! mov -> chapter_track && ! ( mov -> flags & FF_MOV_FLAG_FRAGMENT ))
cond	23:8	23:66	3	! mov -> chapter_track && ! ( mov -> flags & FF_MOV_FLAG_FRAGMENT )
op	23:8	0:0	4	!
water	23:9	0:0	4	mov
op	23:12	0:0	4	->
water	23:14	0:0	4	chapter_track
op	23:28	0:0	4	&&
op	23:31	0:0	4	!
water	23:32	0:0	4	(
water	23:33	0:0	4	mov
op	23:36	0:0	4	->
water	23:38	0:0	4	flags
op	23:44	0:0	4	&
water	23:46	0:0	4	FF_MOV_FLAG_FRAGMENT
water	23:66	0:0	4	)
stmts	23:69	29:4	3	
water	23:69	0:0	4	{
if	24:8	28:8	4	(mov -> mode & ( MODE_MP4 | MODE_MOV | MODE_IPOD ) && s -> nb_chapters)
cond	24:12	24:60	5	mov -> mode & ( MODE_MP4 | MODE_MOV | MODE_IPOD ) && s -> nb_chapters
water	24:12	0:0	6	mov
op	24:15	0:0	6	->
water	24:17	0:0	6	mode
op	24:22	0:0	6	&
water	24:24	0:0	6	(
water	24:25	0:0	6	MODE_MP4
op	24:33	0:0	6	|
water	24:34	0:0	6	MODE_MOV
op	24:42	0:0	6	|
water	24:43	0:0	6	MODE_IPOD
water	24:52	0:0	6	)
op	24:54	0:0	6	&&
water	24:57	0:0	6	s
op	24:58	0:0	6	->
water	24:60	0:0	6	nb_chapters
stmts	24:73	28:8	5	
water	24:73	0:0	6	{
water	25:12	0:0	6	mov
op	25:15	0:0	6	->
water	25:17	0:0	6	chapter_track
op	25:31	0:0	6	=
water	25:33	0:0	6	mov
op	25:36	0:0	6	->
water	25:38	0:0	6	nb_streams
op	25:48	0:0	6	++
water	25:50	0:0	6	;
if	26:12	27:26	6	(( res =mov_create_chapter_track (s ,mov -> chapter_track ) ) < 0)
cond	26:16	26:74	7	( res =mov_create_chapter_track (s ,mov -> chapter_track ) ) < 0
water	26:16	0:0	8	(
water	26:17	0:0	8	res
op	26:21	0:0	8	=
call	26:23	26:69	8	mov_create_chapter_track
arg	26:48	26:49	9	s
water	26:48	0:0	10	s
arg	26:51	26:69	9	mov->chapter_track
water	26:51	0:0	10	mov
op	26:54	0:0	10	->
water	26:56	0:0	10	chapter_track
water	26:70	0:0	8	)
op	26:72	0:0	8	<
water	26:74	0:0	8	0
stmts	27:16	27:26	7	
goto	27:16	27:26	8	error
water	27:21	0:0	9	error
water	28:8	0:0	6	}
water	29:4	0:0	4	}
if	30:4	73:4	2	(! ( mov -> flags & FF_MOV_FLAG_FRAGMENT ))
cond	30:8	30:43	3	! ( mov -> flags & FF_MOV_FLAG_FRAGMENT )
op	30:8	0:0	4	!
water	30:9	0:0	4	(
water	30:10	0:0	4	mov
op	30:13	0:0	4	->
water	30:15	0:0	4	flags
op	30:21	0:0	4	&
water	30:23	0:0	4	FF_MOV_FLAG_FRAGMENT
water	30:43	0:0	4	)
stmts	30:46	73:4	3	
water	30:46	0:0	4	{
water	31:8	0:0	4	moov_pos
op	31:17	0:0	4	=
call	31:19	31:31	4	avio_tell
arg	31:29	31:31	5	pb
water	31:29	0:0	6	pb
water	31:32	0:0	4	;
if	33:8	36:8	4	(mov -> mdat_size + 8 <= UINT32_MAX)
cond	33:12	33:34	5	mov -> mdat_size + 8 <= UINT32_MAX
water	33:12	0:0	6	mov
op	33:15	0:0	6	->
water	33:17	0:0	6	mdat_size
op	33:27	0:0	6	+
water	33:29	0:0	6	8
op	33:31	0:0	6	<=
water	33:34	0:0	6	UINT32_MAX
stmts	33:46	36:8	5	
water	33:46	0:0	6	{
call	34:12	34:49	6	avio_seek
arg	34:22	34:24	7	pb
water	34:22	0:0	8	pb
arg	34:26	34:39	7	mov->mdat_pos
water	34:26	0:0	8	mov
op	34:29	0:0	8	->
water	34:31	0:0	8	mdat_pos
arg	34:41	34:49	7	SEEK_SET
water	34:41	0:0	8	SEEK_SET
water	34:50	0:0	6	;
call	35:12	35:44	6	avio_wb32
arg	35:22	35:24	7	pb
water	35:22	0:0	8	pb
arg	35:26	35:44	7	mov->mdat_size+8
water	35:26	0:0	8	mov
op	35:29	0:0	8	->
water	35:31	0:0	8	mdat_size
op	35:41	0:0	8	+
water	35:43	0:0	8	8
water	35:45	0:0	6	;
water	36:8	0:0	6	}
else	36:10	44:8	4
stmts	36:15	44:8	5	
water	36:15	0:0	6	{
call	38:12	38:53	6	avio_seek
arg	38:22	38:24	7	pb
water	38:22	0:0	8	pb
arg	38:26	38:43	7	mov->mdat_pos-8
water	38:26	0:0	8	mov
op	38:29	0:0	8	->
water	38:31	0:0	8	mdat_pos
op	38:40	0:0	8	-
water	38:42	0:0	8	8
arg	38:45	38:53	7	SEEK_SET
water	38:45	0:0	8	SEEK_SET
water	38:54	0:0	6	;
call	41:12	41:27	6	avio_wb32
arg	41:22	41:24	7	pb
water	41:22	0:0	8	pb
arg	41:26	41:27	7	1
water	41:26	0:0	8	1
water	41:28	0:0	6	;
call	42:12	42:35	6	ffio_wfourcc
arg	42:25	42:27	7	pb
water	42:25	0:0	8	pb
arg	42:29	42:35	7	"mdat"
water	42:29	0:0	8	"mdat"
water	42:36	0:0	6	;
call	43:12	43:45	6	avio_wb64
arg	43:22	43:24	7	pb
water	43:22	0:0	8	pb
arg	43:26	43:45	7	mov->mdat_size+16
water	43:26	0:0	8	mov
op	43:29	0:0	8	->
water	43:31	0:0	8	mdat_size
op	43:41	0:0	8	+
water	43:43	0:0	8	16
water	43:46	0:0	6	;
water	44:8	0:0	6	}
call	45:8	45:97	4	avio_seek
arg	45:18	45:20	5	pb
water	45:18	0:0	6	pb
arg	45:22	45:87	5	mov->reserved_moov_size>0?mov->reserved_header_pos:moov_pos
water	45:22	0:0	6	mov
op	45:25	0:0	6	->
water	45:27	0:0	6	reserved_moov_size
op	45:46	0:0	6	>
water	45:48	0:0	6	0
water	45:50	0:0	6	?
water	45:52	0:0	6	mov
op	45:55	0:0	6	->
water	45:57	0:0	6	reserved_header_pos
water	45:77	0:0	6	:
water	45:79	0:0	6	moov_pos
arg	45:89	45:97	5	SEEK_SET
water	45:89	0:0	6	SEEK_SET
water	45:98	0:0	4	;
if	46:8	54:8	4	(mov -> flags & FF_MOV_FLAG_FASTSTART)
cond	46:12	46:25	5	mov -> flags & FF_MOV_FLAG_FASTSTART
water	46:12	0:0	6	mov
op	46:15	0:0	6	->
water	46:17	0:0	6	flags
op	46:23	0:0	6	&
water	46:25	0:0	6	FF_MOV_FLAG_FASTSTART
stmts	46:48	54:8	5	
water	46:48	0:0	6	{
call	47:12	47:110	6	av_log
arg	47:19	47:20	7	s
water	47:19	0:0	8	s
arg	47:22	47:33	7	AV_LOG_INFO
water	47:22	0:0	8	AV_LOG_INFO
arg	47:35	47:110	7	"Starting second pass: moving the moov atom to the beginning of the file\n"
water	47:35	0:0	8	"Starting second pass: moving the moov atom to the beginning of the file\n"
water	47:111	0:0	6	;
water	48:12	0:0	6	res
op	48:16	0:0	6	=
call	48:18	48:30	6	shift_data
arg	48:29	48:30	7	s
water	48:29	0:0	8	s
water	48:31	0:0	6	;
if	49:12	53:12	6	(res == 0)
cond	49:16	49:23	7	res == 0
water	49:16	0:0	8	res
op	49:20	0:0	8	==
water	49:23	0:0	8	0
stmts	49:26	53:12	7	
water	49:26	0:0	8	{
call	50:16	50:64	8	avio_seek
arg	50:26	50:28	9	pb
water	50:26	0:0	10	pb
arg	50:30	50:54	9	mov->reserved_header_pos
water	50:30	0:0	10	mov
op	50:33	0:0	10	->
water	50:35	0:0	10	reserved_header_pos
arg	50:56	50:64	9	SEEK_SET
water	50:56	0:0	10	SEEK_SET
water	50:65	0:0	8	;
if	51:16	52:30	8	(( res =mov_write_moov_tag (pb ,mov ,s ) ) < 0)
cond	51:20	51:61	9	( res =mov_write_moov_tag (pb ,mov ,s ) ) < 0
water	51:20	0:0	10	(
water	51:21	0:0	10	res
op	51:25	0:0	10	=
call	51:27	51:56	10	mov_write_moov_tag
arg	51:46	51:48	11	pb
water	51:46	0:0	12	pb
arg	51:50	51:53	11	mov
water	51:50	0:0	12	mov
arg	51:55	51:56	11	s
water	51:55	0:0	12	s
water	51:57	0:0	10	)
op	51:59	0:0	10	<
water	51:61	0:0	10	0
stmts	52:20	52:30	9	
goto	52:20	52:30	10	error
water	52:25	0:0	11	error
water	53:12	0:0	8	}
water	54:8	0:0	6	}
else	54:10	68:8	4
stmts	54:15	68:8	5	
if	54:15	68:8	6	(mov -> reserved_moov_size > 0)
cond	54:19	54:45	7	mov -> reserved_moov_size > 0
water	54:19	0:0	8	mov
op	54:22	0:0	8	->
water	54:24	0:0	8	reserved_moov_size
op	54:43	0:0	8	>
water	54:45	0:0	8	0
stmts	54:48	68:8	7	
water	54:48	0:0	8	{
decl	55:12	55:24	8	int64_t	size
if	56:12	57:26	8	(( res =mov_write_moov_tag (pb ,mov ,s ) ) < 0)
cond	56:16	56:57	9	( res =mov_write_moov_tag (pb ,mov ,s ) ) < 0
water	56:16	0:0	10	(
water	56:17	0:0	10	res
op	56:21	0:0	10	=
call	56:23	56:52	10	mov_write_moov_tag
arg	56:42	56:44	11	pb
water	56:42	0:0	12	pb
arg	56:46	56:49	11	mov
water	56:46	0:0	12	mov
arg	56:51	56:52	11	s
water	56:51	0:0	12	s
water	56:53	0:0	10	)
op	56:55	0:0	10	<
water	56:57	0:0	10	0
stmts	57:16	57:26	9	
goto	57:16	57:26	10	error
water	57:21	0:0	11	error
water	58:12	0:0	8	size
op	58:17	0:0	8	=
water	58:19	0:0	8	mov
op	58:22	0:0	8	->
water	58:24	0:0	8	reserved_moov_size
op	58:43	0:0	8	-
water	58:45	0:0	8	(
call	58:46	58:58	8	avio_tell
arg	58:56	58:58	9	pb
water	58:56	0:0	10	pb
op	58:60	0:0	8	-
water	58:62	0:0	8	mov
op	58:65	0:0	8	->
water	58:67	0:0	8	reserved_header_pos
water	58:86	0:0	8	)
water	58:87	0:0	8	;
if	59:12	63:12	8	(size < 8)
cond	59:16	59:23	9	size < 8
water	59:16	0:0	10	size
op	59:21	0:0	10	<
water	59:23	0:0	10	8
stmts	59:25	63:12	9	
water	59:25	0:0	10	{
call	60:16	60:112	10	av_log
arg	60:23	60:24	11	s
water	60:23	0:0	12	s
arg	60:26	60:38	11	AV_LOG_ERROR
water	60:26	0:0	12	AV_LOG_ERROR
arg	60:40	60:104	11	"reserved_moov_size is too small, needed %"PRId64" additional\n"
water	60:40	0:0	12	"reserved_moov_size is too small, needed %"
water	60:83	0:0	12	PRId64
water	60:89	0:0	12	" additional\n"
arg	60:106	60:112	11	8-size
water	60:106	0:0	12	8
op	60:107	0:0	12	-
water	60:108	0:0	12	size
water	60:113	0:0	10	;
water	61:16	0:0	10	res
op	61:20	0:0	10	=
call	61:22	61:36	10	AVERROR
arg	61:30	61:36	11	EINVAL
water	61:30	0:0	12	EINVAL
water	61:37	0:0	10	;
goto	62:16	62:26	10	error
water	62:21	0:0	11	error
water	63:12	0:0	10	}
call	64:12	64:30	8	avio_wb32
arg	64:22	64:24	9	pb
water	64:22	0:0	10	pb
arg	64:26	64:30	9	size
water	64:26	0:0	10	size
water	64:31	0:0	8	;
call	65:12	65:35	8	ffio_wfourcc
arg	65:25	65:27	9	pb
water	65:25	0:0	10	pb
arg	65:29	65:35	9	"free"
water	65:29	0:0	10	"free"
water	65:36	0:0	8	;
call	66:12	66:37	8	ffio_fill
arg	66:22	66:24	9	pb
water	66:22	0:0	10	pb
arg	66:26	66:27	9	0
water	66:26	0:0	10	0
arg	66:29	66:37	9	size-8
water	66:29	0:0	10	size
op	66:34	0:0	10	-
water	66:36	0:0	10	8
water	66:38	0:0	8	;
call	67:12	67:44	8	avio_seek
arg	67:22	67:24	9	pb
water	67:22	0:0	10	pb
arg	67:26	67:34	9	moov_pos
water	67:26	0:0	10	moov_pos
arg	67:36	67:44	9	SEEK_SET
water	67:36	0:0	10	SEEK_SET
water	67:45	0:0	8	;
water	68:8	0:0	8	}
else	68:10	71:8	4
stmts	68:15	71:8	5	
water	68:15	0:0	6	{
if	69:12	70:26	6	(( res =mov_write_moov_tag (pb ,mov ,s ) ) < 0)
cond	69:16	69:57	7	( res =mov_write_moov_tag (pb ,mov ,s ) ) < 0
water	69:16	0:0	8	(
water	69:17	0:0	8	res
op	69:21	0:0	8	=
call	69:23	69:52	8	mov_write_moov_tag
arg	69:42	69:44	9	pb
water	69:42	0:0	10	pb
arg	69:46	69:49	9	mov
water	69:46	0:0	10	mov
arg	69:51	69:52	9	s
water	69:51	0:0	10	s
water	69:53	0:0	8	)
op	69:55	0:0	8	<
water	69:57	0:0	8	0
stmts	70:16	70:26	7	
goto	70:16	70:26	8	error
water	70:21	0:0	9	error
water	71:8	0:0	6	}
water	72:8	0:0	4	res
op	72:12	0:0	4	=
water	72:14	0:0	4	0
water	72:15	0:0	4	;
water	73:4	0:0	4	}
else	73:6	90:4	2
stmts	73:11	90:4	3	
water	73:11	0:0	4	{
call	74:8	74:33	4	mov_auto_flush_fragment
arg	74:32	74:33	5	s
water	74:32	0:0	6	s
water	74:34	0:0	4	;
for	75:8	76:41	4	(i = 0 ;i < mov -> nb_streams;i ++)
forinit	75:13	75:18	5	i = 0 ;
water	75:13	0:0	6	i
op	75:15	0:0	6	=
water	75:17	0:0	6	0
water	75:18	0:0	6	;
cond	75:20	75:29	5	i < mov -> nb_streams
water	75:20	0:0	6	i
op	75:22	0:0	6	<
water	75:24	0:0	6	mov
op	75:27	0:0	6	->
water	75:29	0:0	6	nb_streams
forexpr	75:41	75:42	5	i ++
water	75:41	0:0	6	i
op	75:42	0:0	6	++
stmts	76:11	76:41	5	
water	76:11	0:0	6	mov
op	76:14	0:0	6	->
water	76:16	0:0	6	tracks
op	76:22	0:0	6	[
water	76:23	0:0	6	i
op	76:24	0:0	6	]
op	76:25	0:0	6	.
water	76:26	0:0	6	data_offset
op	76:38	0:0	6	=
water	76:40	0:0	6	0
water	76:41	0:0	6	;
if	77:8	87:8	4	(mov -> flags & FF_MOV_FLAG_GLOBAL_SIDX)
cond	77:12	77:25	5	mov -> flags & FF_MOV_FLAG_GLOBAL_SIDX
water	77:12	0:0	6	mov
op	77:15	0:0	6	->
water	77:17	0:0	6	flags
op	77:23	0:0	6	&
water	77:25	0:0	6	FF_MOV_FLAG_GLOBAL_SIDX
stmts	77:50	87:8	5	
water	77:50	0:0	6	{
call	78:12	78:81	6	av_log
arg	78:19	78:20	7	s
water	78:19	0:0	8	s
arg	78:22	78:33	7	AV_LOG_INFO
water	78:22	0:0	8	AV_LOG_INFO
arg	78:35	78:81	7	"Starting second pass: inserting sidx atoms\n"
water	78:35	0:0	8	"Starting second pass: inserting sidx atoms\n"
water	78:82	0:0	6	;
water	79:12	0:0	6	res
op	79:16	0:0	6	=
call	79:18	79:30	6	shift_data
arg	79:29	79:30	7	s
water	79:29	0:0	8	s
water	79:31	0:0	6	;
if	80:12	86:12	6	(res == 0)
cond	80:16	80:23	7	res == 0
water	80:16	0:0	8	res
op	80:20	0:0	8	==
water	80:23	0:0	8	0
stmts	80:26	86:12	7	
water	80:26	0:0	8	{
decl	81:16	81:43	8	int64_t	end
op	81:28	0:0	8	=
call	81:30	81:42	9	avio_tell
arg	81:40	81:42	10	pb
water	81:40	0:0	11	pb
call	82:16	82:64	8	avio_seek
arg	82:26	82:28	9	pb
water	82:26	0:0	10	pb
arg	82:30	82:54	9	mov->reserved_header_pos
water	82:30	0:0	10	mov
op	82:33	0:0	10	->
water	82:35	0:0	10	reserved_header_pos
arg	82:56	82:64	9	SEEK_SET
water	82:56	0:0	10	SEEK_SET
water	82:65	0:0	8	;
call	83:16	83:50	8	mov_write_sidx_tags
arg	83:36	83:38	9	pb
water	83:36	0:0	10	pb
arg	83:40	83:43	9	mov
water	83:40	0:0	10	mov
arg	83:45	83:47	9	-1
op	83:45	0:0	10	-
water	83:46	0:0	10	1
arg	83:49	83:50	9	0
water	83:49	0:0	10	0
water	83:51	0:0	8	;
call	84:16	84:43	8	avio_seek
arg	84:26	84:28	9	pb
water	84:26	0:0	10	pb
arg	84:30	84:33	9	end
water	84:30	0:0	10	end
arg	84:35	84:43	9	SEEK_SET
water	84:35	0:0	10	SEEK_SET
water	84:44	0:0	8	;
call	85:16	85:42	8	mov_write_mfra_tag
arg	85:35	85:37	9	pb
water	85:35	0:0	10	pb
arg	85:39	85:42	9	mov
water	85:39	0:0	10	mov
water	85:43	0:0	8	;
water	86:12	0:0	8	}
water	87:8	0:0	6	}
else	87:10	89:8	4
stmts	87:15	89:8	5	
water	87:15	0:0	6	{
call	88:12	88:38	6	mov_write_mfra_tag
arg	88:31	88:33	7	pb
water	88:31	0:0	8	pb
arg	88:35	88:38	7	mov
water	88:35	0:0	8	mov
water	88:39	0:0	6	;
water	89:8	0:0	6	}
water	90:4	0:0	4	}
label	91:0	91:5	2	error :
call	92:4	92:14	2	mov_free
arg	92:13	92:14	3	s
water	92:13	0:0	4	s
water	92:15	0:0	2	;
return	93:4	93:14	2	res
water	93:11	0:0	3	res
