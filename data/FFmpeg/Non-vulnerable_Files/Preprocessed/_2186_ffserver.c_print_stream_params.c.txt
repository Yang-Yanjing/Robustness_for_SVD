func	1:0	38:0	0	static inline void	print_stream_params
params	1:38	0:0	1	
param	1:39	1:54	2	AVIOContext *	pb
param	1:56	1:78	2	FFServerStream *	stream
stmnts	0:0	37:34	1	
decl	3:4	3:20	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:20	2	int	stream_no
decl	4:4	4:32	2	const char	*type
op	4:21	0:0	2	=
water	4:23	0:0	2	"unknown"
decl	5:4	5:23	2	char	parameters[64]
decl	6:4	6:23	2	LayeredAVStream	*st
decl	7:4	7:18	2	AVCodec	*codec
water	8:4	0:0	2	stream_no
op	8:14	0:0	2	=
water	8:16	0:0	2	stream
op	8:22	0:0	2	->
water	8:24	0:0	2	nb_streams
water	8:34	0:0	2	;
call	9:4	11:34	2	avio_printf
arg	9:16	9:18	3	pb
water	9:16	0:0	4	pb
arg	9:20	11:34	3	"<table><tr><th>Stream<th>""type<th>kbit/s<th>codec<th>""Parameters\n"
water	9:20	0:0	4	"<table><tr><th>Stream<th>"
water	10:20	0:0	4	"type<th>kbit/s<th>codec<th>"
water	11:20	0:0	4	"Parameters\n"
water	11:35	0:0	2	;
for	12:4	36:5	2	(i = 0 ;i < stream_no;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:20	3	i < stream_no
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	stream_no
forexpr	12:31	12:32	3	i ++
water	12:31	0:0	4	i
op	12:32	0:0	4	++
stmts	12:36	36:5	3	
water	12:36	0:0	4	{
water	13:8	0:0	4	st
op	13:11	0:0	4	=
water	13:13	0:0	4	stream
op	13:19	0:0	4	->
water	13:21	0:0	4	streams
op	13:28	0:0	4	[
water	13:29	0:0	4	i
op	13:30	0:0	4	]
water	13:31	0:0	4	;
water	14:8	0:0	4	codec
op	14:14	0:0	4	=
call	14:16	14:59	4	avcodec_find_encoder
arg	14:37	14:59	5	st->codecpar->codec_id
water	14:37	0:0	6	st
op	14:39	0:0	6	->
water	14:41	0:0	6	codecpar
op	14:49	0:0	6	->
water	14:51	0:0	6	codec_id
water	14:60	0:0	4	;
water	15:8	0:0	4	parameters
op	15:18	0:0	4	[
water	15:19	0:0	4	0
op	15:20	0:0	4	]
op	15:22	0:0	4	=
water	15:24	0:0	4	0
water	15:25	0:0	4	;
switch	16:8	31:8	4	(st -> codecpar -> codec_type)
cond	16:15	16:29	5	st -> codecpar -> codec_type
water	16:15	0:0	6	st
op	16:17	0:0	6	->
water	16:19	0:0	6	codecpar
op	16:27	0:0	6	->
water	16:29	0:0	6	codec_type
stmts	16:41	31:8	5	
water	16:41	0:0	6	{
label	17:8	17:31	6	case AVMEDIA_TYPE_AUDIO :
water	18:12	0:0	6	type
op	18:17	0:0	6	=
water	18:19	0:0	6	"audio"
water	18:26	0:0	6	;
call	19:12	20:70	6	snprintf
arg	19:21	19:31	7	parameters
water	19:21	0:0	8	parameters
arg	19:33	19:51	7	sizeof(parameters)
op	19:33	0:0	8	sizeof
water	19:39	0:0	8	(
water	19:40	0:0	8	parameters
water	19:50	0:0	8	)
arg	19:53	19:75	7	"%d channel(s), %d Hz"
water	19:53	0:0	8	"%d channel(s), %d Hz"
arg	20:21	20:43	7	st->codecpar->channels
water	20:21	0:0	8	st
op	20:23	0:0	8	->
water	20:25	0:0	8	codecpar
op	20:33	0:0	8	->
water	20:35	0:0	8	channels
arg	20:45	20:70	7	st->codecpar->sample_rate
water	20:45	0:0	8	st
op	20:47	0:0	8	->
water	20:49	0:0	8	codecpar
op	20:57	0:0	8	->
water	20:59	0:0	8	sample_rate
water	20:71	0:0	6	;
break	21:12	21:17	6	
label	22:8	22:31	6	case AVMEDIA_TYPE_VIDEO :
water	23:12	0:0	6	type
op	23:17	0:0	6	=
water	23:19	0:0	6	"video"
water	23:26	0:0	6	;
call	24:12	27:58	6	snprintf
arg	24:21	24:31	7	parameters
water	24:21	0:0	8	parameters
arg	24:33	24:51	7	sizeof(parameters)
op	24:33	0:0	8	sizeof
water	24:39	0:0	8	(
water	24:40	0:0	8	parameters
water	24:50	0:0	8	)
arg	25:21	25:45	7	"%dx%d, q=%d-%d, fps=%d"
water	25:21	0:0	8	"%dx%d, q=%d-%d, fps=%d"
arg	25:47	25:66	7	st->codecpar->width
water	25:47	0:0	8	st
op	25:49	0:0	8	->
water	25:51	0:0	8	codecpar
op	25:59	0:0	8	->
water	25:61	0:0	8	width
arg	26:21	26:41	7	st->codecpar->height
water	26:21	0:0	8	st
op	26:23	0:0	8	->
water	26:25	0:0	8	codecpar
op	26:33	0:0	8	->
water	26:35	0:0	8	height
arg	26:43	26:58	7	st->codec->qmin
water	26:43	0:0	8	st
op	26:45	0:0	8	->
water	26:47	0:0	8	codec
op	26:52	0:0	8	->
water	26:54	0:0	8	qmin
arg	26:60	26:75	7	st->codec->qmax
water	26:60	0:0	8	st
op	26:62	0:0	8	->
water	26:64	0:0	8	codec
op	26:69	0:0	8	->
water	26:71	0:0	8	qmax
arg	27:21	27:58	7	st->time_base.den/st->time_base.num
water	27:21	0:0	8	st
op	27:23	0:0	8	->
water	27:25	0:0	8	time_base
op	27:34	0:0	8	.
water	27:35	0:0	8	den
op	27:39	0:0	8	/
water	27:41	0:0	8	st
op	27:43	0:0	8	->
water	27:45	0:0	8	time_base
op	27:54	0:0	8	.
water	27:55	0:0	8	num
water	27:59	0:0	6	;
break	28:12	28:17	6	
label	29:8	29:15	6	default :
call	30:12	30:18	6	abort
water	30:19	0:0	6	;
water	31:8	0:0	6	}
call	32:8	35:56	4	avio_printf
arg	32:20	32:22	5	pb
water	32:20	0:0	6	pb
arg	32:24	33:40	5	"<tr><td>%d<td>%s<td>%"PRId64"<td>%s<td>%s\n"
water	32:24	0:0	6	"<tr><td>%d<td>%s<td>%"
water	32:47	0:0	6	PRId64
water	33:24	0:0	6	"<td>%s<td>%s\n"
arg	34:20	34:21	5	i
water	34:20	0:0	6	i
arg	34:23	34:27	5	type
water	34:23	0:0	6	type
arg	34:29	34:65	5	(int64_t)st->codecpar->bit_rate/1000
water	34:29	0:0	6	(
water	34:30	0:0	6	int64_t
water	34:37	0:0	6	)
water	34:38	0:0	6	st
op	34:40	0:0	6	->
water	34:42	0:0	6	codecpar
op	34:50	0:0	6	->
water	34:52	0:0	6	bit_rate
op	34:60	0:0	6	/
water	34:61	0:0	6	1000
arg	35:20	35:44	5	codec?codec->name:""
water	35:20	0:0	6	codec
water	35:26	0:0	6	?
water	35:28	0:0	6	codec
op	35:33	0:0	6	->
water	35:35	0:0	6	name
water	35:40	0:0	6	:
water	35:42	0:0	6	""
arg	35:46	35:56	5	parameters
water	35:46	0:0	6	parameters
water	35:57	0:0	4	;
water	36:5	0:0	4	}
call	37:5	37:33	2	avio_printf
arg	37:17	37:19	3	pb
water	37:17	0:0	4	pb
arg	37:21	37:33	3	"</table>\n"
water	37:21	0:0	4	"</table>\n"
water	37:34	0:0	2	;
