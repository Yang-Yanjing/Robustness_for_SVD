func	1:0	84:0	0	int	ff_rm_parse_packet
params	2:19	0:0	1	
param	2:20	2:38	2	AVFormatContext *	s
param	2:40	2:55	2	AVIOContext *	pb
param	3:20	3:32	2	AVStream *	st
param	3:34	3:47	2	RMStream *	ast
param	3:49	3:56	2	int	len
param	3:58	3:71	2	AVPacket *	pkt
param	4:20	4:28	2	int *	seq
param	4:30	4:39	2	int	flags
param	4:41	4:58	2	int64_t	timestamp
stmnts	0:0	83:78	1	
decl	6:4	6:37	2	RMDemuxContext	*rm
op	6:23	0:0	2	=
water	6:25	0:0	2	s
op	6:26	0:0	2	->
water	6:28	0:0	2	priv_data
decl	7:4	7:11	2	int	ret
if	8:4	13:4	2	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	8:8	8:33	3	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	8:8	0:0	4	st
op	8:10	0:0	4	->
water	8:12	0:0	4	codec
op	8:17	0:0	4	->
water	8:19	0:0	4	codec_type
op	8:30	0:0	4	==
water	8:33	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	8:53	13:4	3	
water	8:53	0:0	4	{
water	9:8	0:0	4	rm
op	9:10	0:0	4	->
water	9:12	0:0	4	current_stream
op	9:26	0:0	4	=
water	9:28	0:0	4	st
op	9:30	0:0	4	->
water	9:32	0:0	4	id
water	9:34	0:0	4	;
water	10:8	0:0	4	ret
op	10:12	0:0	4	=
call	10:14	10:79	4	rm_assemble_video_frame
arg	10:38	10:39	5	s
water	10:38	0:0	6	s
arg	10:41	10:43	5	pb
water	10:41	0:0	6	pb
arg	10:45	10:47	5	rm
water	10:45	0:0	6	rm
arg	10:49	10:52	5	ast
water	10:49	0:0	6	ast
arg	10:54	10:57	5	pkt
water	10:54	0:0	6	pkt
arg	10:59	10:62	5	len
water	10:59	0:0	6	len
arg	10:64	10:67	5	seq
water	10:64	0:0	6	seq
arg	10:69	10:79	5	&timestamp
op	10:69	0:0	6	&
water	10:70	0:0	6	timestamp
water	10:80	0:0	4	;
if	11:8	12:37	4	(ret)
cond	11:11	11:11	5	ret
water	11:11	0:0	6	ret
stmts	12:12	12:37	5	
return	12:12	12:37	6	ret<0?ret:-1
water	12:19	0:0	7	ret
op	12:23	0:0	7	<
water	12:25	0:0	7	0
water	12:27	0:0	7	?
water	12:29	0:0	7	ret
water	12:33	0:0	7	:
op	12:35	0:0	7	-
water	12:36	0:0	7	1
water	13:4	0:0	4	}
else	13:6	64:4	2
stmts	13:11	64:4	3	
if	13:11	64:4	4	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	13:15	13:40	5	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	13:15	0:0	6	st
op	13:17	0:0	6	->
water	13:19	0:0	6	codec
op	13:24	0:0	6	->
water	13:26	0:0	6	codec_type
op	13:37	0:0	6	==
water	13:40	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	13:60	64:4	5	
water	13:60	0:0	6	{
if	14:8	47:8	6	(( ast -> deint_id == DEINT_ID_GENR ) || ( ast -> deint_id == DEINT_ID_INT4 ) || ( ast -> deint_id == DEINT_ID_SIPR ))
cond	14:12	16:43	7	( ast -> deint_id == DEINT_ID_GENR ) || ( ast -> deint_id == DEINT_ID_INT4 ) || ( ast -> deint_id == DEINT_ID_SIPR )
water	14:12	0:0	8	(
water	14:13	0:0	8	ast
op	14:16	0:0	8	->
water	14:18	0:0	8	deint_id
op	14:27	0:0	8	==
water	14:30	0:0	8	DEINT_ID_GENR
water	14:43	0:0	8	)
op	14:45	0:0	8	||
water	15:12	0:0	8	(
water	15:13	0:0	8	ast
op	15:16	0:0	8	->
water	15:18	0:0	8	deint_id
op	15:27	0:0	8	==
water	15:30	0:0	8	DEINT_ID_INT4
water	15:43	0:0	8	)
op	15:45	0:0	8	||
water	16:12	0:0	8	(
water	16:13	0:0	8	ast
op	16:16	0:0	8	->
water	16:18	0:0	8	deint_id
op	16:27	0:0	8	==
water	16:30	0:0	8	DEINT_ID_SIPR
water	16:43	0:0	8	)
stmts	16:46	47:8	7	
water	16:46	0:0	8	{
decl	17:12	17:17	8	int	x
decl	18:12	18:42	8	int	sps
op	18:20	0:0	8	=
water	18:22	0:0	8	ast
op	18:25	0:0	8	->
water	18:27	0:0	8	sub_packet_size
decl	19:12	19:42	8	int	cfs
op	19:20	0:0	8	=
water	19:22	0:0	8	ast
op	19:25	0:0	8	->
water	19:27	0:0	8	coded_framesize
decl	20:12	20:37	8	int	h
op	20:18	0:0	8	=
water	20:20	0:0	8	ast
op	20:23	0:0	8	->
water	20:25	0:0	8	sub_packet_h
decl	21:12	21:39	8	int	y
op	21:18	0:0	8	=
water	21:20	0:0	8	ast
op	21:23	0:0	8	->
water	21:25	0:0	8	sub_packet_cnt
decl	22:12	22:40	8	int	w
op	22:18	0:0	8	=
water	22:20	0:0	8	ast
op	22:23	0:0	8	->
water	22:25	0:0	8	audio_framesize
if	23:12	24:43	8	(flags & 2)
cond	23:16	23:24	9	flags & 2
water	23:16	0:0	10	flags
op	23:22	0:0	10	&
water	23:24	0:0	10	2
stmts	24:16	24:43	9	
water	24:16	0:0	10	y
op	24:18	0:0	10	=
water	24:20	0:0	10	ast
op	24:23	0:0	10	->
water	24:25	0:0	10	sub_packet_cnt
op	24:40	0:0	10	=
water	24:42	0:0	10	0
water	24:43	0:0	10	;
if	25:12	26:47	8	(! y)
cond	25:16	25:17	9	! y
op	25:16	0:0	10	!
water	25:17	0:0	10	y
stmts	26:16	26:47	9	
water	26:16	0:0	10	ast
op	26:19	0:0	10	->
water	26:21	0:0	10	audiotimestamp
op	26:36	0:0	10	=
water	26:38	0:0	10	timestamp
water	26:47	0:0	10	;
switch	27:12	39:12	8	(ast -> deint_id)
cond	27:20	27:25	9	ast -> deint_id
water	27:20	0:0	10	ast
op	27:23	0:0	10	->
water	27:25	0:0	10	deint_id
stmts	27:35	39:12	9	
water	27:35	0:0	10	{
label	28:16	28:34	10	case DEINT_ID_INT4 :
for	29:20	30:71	10	(x = 0 ;x < h / 2;x ++)
forinit	29:25	29:30	11	x = 0 ;
water	29:25	0:0	12	x
op	29:27	0:0	12	=
water	29:29	0:0	12	0
water	29:30	0:0	12	;
cond	29:32	29:38	11	x < h / 2
water	29:32	0:0	12	x
op	29:34	0:0	12	<
water	29:36	0:0	12	h
op	29:37	0:0	12	/
water	29:38	0:0	12	2
forexpr	29:41	29:42	11	x ++
water	29:41	0:0	12	x
op	29:42	0:0	12	++
stmts	30:24	30:71	11	
call	30:24	30:70	12	readfull
arg	30:33	30:34	13	s
water	30:33	0:0	14	s
arg	30:36	30:38	13	pb
water	30:36	0:0	14	pb
arg	30:40	30:65	13	ast->pkt.data+x*2*w+y*cfs
water	30:40	0:0	14	ast
op	30:43	0:0	14	->
water	30:45	0:0	14	pkt
op	30:48	0:0	14	.
water	30:49	0:0	14	data
op	30:53	0:0	14	+
water	30:54	0:0	14	x
op	30:55	0:0	14	*
water	30:56	0:0	14	2
op	30:57	0:0	14	*
water	30:58	0:0	14	w
op	30:59	0:0	14	+
water	30:60	0:0	14	y
op	30:61	0:0	14	*
water	30:62	0:0	14	cfs
arg	30:67	30:70	13	cfs
water	30:67	0:0	14	cfs
water	30:71	0:0	12	;
break	31:20	31:25	10	
label	32:16	32:34	10	case DEINT_ID_GENR :
for	33:20	34:92	10	(x = 0 ;x < w / sps;x ++)
forinit	33:25	33:30	11	x = 0 ;
water	33:25	0:0	12	x
op	33:27	0:0	12	=
water	33:29	0:0	12	0
water	33:30	0:0	12	;
cond	33:32	33:38	11	x < w / sps
water	33:32	0:0	12	x
op	33:34	0:0	12	<
water	33:36	0:0	12	w
op	33:37	0:0	12	/
water	33:38	0:0	12	sps
forexpr	33:43	33:44	11	x ++
water	33:43	0:0	12	x
op	33:44	0:0	12	++
stmts	34:24	34:92	11	
call	34:24	34:91	12	readfull
arg	34:33	34:34	13	s
water	34:33	0:0	14	s
arg	34:36	34:38	13	pb
water	34:36	0:0	14	pb
arg	34:40	34:86	13	ast->pkt.data+sps*(h*x+((h+1)/2)*(y&1)+(y>>1))
water	34:40	0:0	14	ast
op	34:43	0:0	14	->
water	34:45	0:0	14	pkt
op	34:48	0:0	14	.
water	34:49	0:0	14	data
op	34:53	0:0	14	+
water	34:54	0:0	14	sps
op	34:57	0:0	14	*
water	34:58	0:0	14	(
water	34:59	0:0	14	h
op	34:60	0:0	14	*
water	34:61	0:0	14	x
op	34:62	0:0	14	+
water	34:63	0:0	14	(
water	34:64	0:0	14	(
water	34:65	0:0	14	h
op	34:66	0:0	14	+
water	34:67	0:0	14	1
water	34:68	0:0	14	)
op	34:69	0:0	14	/
water	34:70	0:0	14	2
water	34:71	0:0	14	)
op	34:72	0:0	14	*
water	34:73	0:0	14	(
water	34:74	0:0	14	y
op	34:75	0:0	14	&
water	34:76	0:0	14	1
water	34:77	0:0	14	)
op	34:78	0:0	14	+
water	34:79	0:0	14	(
water	34:80	0:0	14	y
op	34:81	0:0	14	>>
water	34:83	0:0	14	1
water	34:84	0:0	14	)
water	34:85	0:0	14	)
arg	34:88	34:91	13	sps
water	34:88	0:0	14	sps
water	34:92	0:0	12	;
break	35:20	35:25	10	
label	36:16	36:34	10	case DEINT_ID_SIPR :
call	37:20	37:60	10	readfull
arg	37:29	37:30	11	s
water	37:29	0:0	12	s
arg	37:32	37:34	11	pb
water	37:32	0:0	12	pb
arg	37:36	37:57	11	ast->pkt.data+y*w
water	37:36	0:0	12	ast
op	37:39	0:0	12	->
water	37:41	0:0	12	pkt
op	37:44	0:0	12	.
water	37:45	0:0	12	data
op	37:50	0:0	12	+
water	37:52	0:0	12	y
op	37:54	0:0	12	*
water	37:56	0:0	12	w
arg	37:59	37:60	11	w
water	37:59	0:0	12	w
water	37:61	0:0	10	;
break	38:20	38:25	10	
water	39:12	0:0	10	}
if	40:12	41:25	8	(++ ( ast -> sub_packet_cnt ) < h)
cond	40:16	40:42	9	++ ( ast -> sub_packet_cnt ) < h
op	40:16	0:0	10	++
water	40:18	0:0	10	(
water	40:19	0:0	10	ast
op	40:22	0:0	10	->
water	40:24	0:0	10	sub_packet_cnt
water	40:38	0:0	10	)
op	40:40	0:0	10	<
water	40:42	0:0	10	h
stmts	41:16	41:25	9	
return	41:16	41:25	10	-1
op	41:23	0:0	11	-
water	41:24	0:0	11	1
if	42:12	43:60	8	(ast -> deint_id == DEINT_ID_SIPR)
cond	42:16	42:33	9	ast -> deint_id == DEINT_ID_SIPR
water	42:16	0:0	10	ast
op	42:19	0:0	10	->
water	42:21	0:0	10	deint_id
op	42:30	0:0	10	==
water	42:33	0:0	10	DEINT_ID_SIPR
stmts	43:16	43:60	9	
call	43:16	43:59	10	ff_rm_reorder_sipr_data
arg	43:40	43:53	11	ast->pkt.data
water	43:40	0:0	12	ast
op	43:43	0:0	12	->
water	43:45	0:0	12	pkt
op	43:48	0:0	12	.
water	43:49	0:0	12	data
arg	43:55	43:56	11	h
water	43:55	0:0	12	h
arg	43:58	43:59	11	w
water	43:58	0:0	12	w
water	43:60	0:0	10	;
water	44:13	0:0	8	ast
op	44:16	0:0	8	->
water	44:18	0:0	8	sub_packet_cnt
op	44:33	0:0	8	=
water	44:35	0:0	8	0
water	44:36	0:0	8	;
water	45:13	0:0	8	rm
op	45:15	0:0	8	->
water	45:17	0:0	8	audio_stream_num
op	45:34	0:0	8	=
water	45:36	0:0	8	st
op	45:38	0:0	8	->
water	45:40	0:0	8	index
water	45:45	0:0	8	;
water	46:13	0:0	8	rm
op	46:15	0:0	8	->
water	46:17	0:0	8	audio_pkt_cnt
op	46:31	0:0	8	=
water	46:33	0:0	8	h
op	46:35	0:0	8	*
water	46:37	0:0	8	w
op	46:39	0:0	8	/
water	46:41	0:0	8	st
op	46:43	0:0	8	->
water	46:45	0:0	8	codec
op	46:50	0:0	8	->
water	46:52	0:0	8	block_align
water	46:63	0:0	8	;
water	47:8	0:0	8	}
else	47:10	59:8	6
stmts	47:15	59:8	7	
if	47:15	59:8	8	(( ast -> deint_id == DEINT_ID_VBRF ) || ( ast -> deint_id == DEINT_ID_VBRS ))
cond	47:19	48:50	9	( ast -> deint_id == DEINT_ID_VBRF ) || ( ast -> deint_id == DEINT_ID_VBRS )
water	47:19	0:0	10	(
water	47:20	0:0	10	ast
op	47:23	0:0	10	->
water	47:25	0:0	10	deint_id
op	47:34	0:0	10	==
water	47:37	0:0	10	DEINT_ID_VBRF
water	47:50	0:0	10	)
op	47:52	0:0	10	||
water	48:19	0:0	10	(
water	48:20	0:0	10	ast
op	48:23	0:0	10	->
water	48:25	0:0	10	deint_id
op	48:34	0:0	10	==
water	48:37	0:0	10	DEINT_ID_VBRS
water	48:50	0:0	10	)
stmts	48:53	59:8	9	
water	48:53	0:0	10	{
decl	49:12	49:17	10	int	x
water	50:12	0:0	10	rm
op	50:14	0:0	10	->
water	50:16	0:0	10	audio_stream_num
op	50:33	0:0	10	=
water	50:35	0:0	10	st
op	50:37	0:0	10	->
water	50:39	0:0	10	index
water	50:44	0:0	10	;
water	51:12	0:0	10	ast
op	51:15	0:0	10	->
water	51:17	0:0	10	sub_packet_cnt
op	51:32	0:0	10	=
water	51:34	0:0	10	(
call	51:35	51:47	10	avio_rb16
arg	51:45	51:47	11	pb
water	51:45	0:0	12	pb
op	51:49	0:0	10	&
water	51:51	0:0	10	0
water	51:52	0:0	10	xf0
water	51:55	0:0	10	)
op	51:57	0:0	10	>>
water	51:60	0:0	10	4
water	51:61	0:0	10	;
if	52:12	57:12	10	(ast -> sub_packet_cnt)
cond	52:16	52:21	11	ast -> sub_packet_cnt
water	52:16	0:0	12	ast
op	52:19	0:0	12	->
water	52:21	0:0	12	sub_packet_cnt
stmts	52:37	57:12	11	
water	52:37	0:0	12	{
for	53:16	54:62	12	(x = 0 ;x < ast -> sub_packet_cnt;x ++)
forinit	53:21	53:26	13	x = 0 ;
water	53:21	0:0	14	x
op	53:23	0:0	14	=
water	53:25	0:0	14	0
water	53:26	0:0	14	;
cond	53:28	53:37	13	x < ast -> sub_packet_cnt
water	53:28	0:0	14	x
op	53:30	0:0	14	<
water	53:32	0:0	14	ast
op	53:35	0:0	14	->
water	53:37	0:0	14	sub_packet_cnt
forexpr	53:53	53:54	13	x ++
water	53:53	0:0	14	x
op	53:54	0:0	14	++
stmts	54:20	54:62	13	
water	54:20	0:0	14	ast
op	54:23	0:0	14	->
water	54:25	0:0	14	sub_packet_lengths
op	54:43	0:0	14	[
water	54:44	0:0	14	x
op	54:45	0:0	14	]
op	54:47	0:0	14	=
call	54:49	54:61	14	avio_rb16
arg	54:59	54:61	15	pb
water	54:59	0:0	16	pb
water	54:62	0:0	14	;
water	55:16	0:0	12	rm
op	55:18	0:0	12	->
water	55:20	0:0	12	audio_pkt_cnt
op	55:34	0:0	12	=
water	55:36	0:0	12	ast
op	55:39	0:0	12	->
water	55:41	0:0	12	sub_packet_cnt
water	55:55	0:0	12	;
water	56:16	0:0	12	ast
op	56:19	0:0	12	->
water	56:21	0:0	12	audiotimestamp
op	56:36	0:0	12	=
water	56:38	0:0	12	timestamp
water	56:47	0:0	12	;
water	57:12	0:0	12	}
else	57:14	58:25	10
stmts	58:16	58:25	11	
return	58:16	58:25	12	-1
op	58:23	0:0	13	-
water	58:24	0:0	13	1
water	59:8	0:0	10	}
else	59:10	63:8	6
stmts	59:15	63:8	7	
water	59:15	0:0	8	{
if	60:12	61:26	8	(( ret =av_get_packet (pb ,pkt ,len ) ) < 0)
cond	60:16	60:54	9	( ret =av_get_packet (pb ,pkt ,len ) ) < 0
water	60:16	0:0	10	(
water	60:17	0:0	10	ret
op	60:21	0:0	10	=
call	60:23	60:49	10	av_get_packet
arg	60:37	60:39	11	pb
water	60:37	0:0	12	pb
arg	60:41	60:44	11	pkt
water	60:41	0:0	12	pkt
arg	60:46	60:49	11	len
water	60:46	0:0	12	len
water	60:50	0:0	10	)
op	60:52	0:0	10	<
water	60:54	0:0	10	0
stmts	61:16	61:26	9	
return	61:16	61:26	10	ret
water	61:23	0:0	11	ret
call	62:12	62:37	8	rm_ac3_swap_bytes
arg	62:30	62:32	9	st
water	62:30	0:0	10	st
arg	62:34	62:37	9	pkt
water	62:34	0:0	10	pkt
water	62:38	0:0	8	;
water	63:8	0:0	8	}
water	64:4	0:0	6	}
else	64:6	67:4	2
stmts	64:11	67:4	3	
water	64:11	0:0	4	{
if	65:8	66:22	4	(( ret =av_get_packet (pb ,pkt ,len ) ) < 0)
cond	65:12	65:50	5	( ret =av_get_packet (pb ,pkt ,len ) ) < 0
water	65:12	0:0	6	(
water	65:13	0:0	6	ret
op	65:17	0:0	6	=
call	65:19	65:45	6	av_get_packet
arg	65:33	65:35	7	pb
water	65:33	0:0	8	pb
arg	65:37	65:40	7	pkt
water	65:37	0:0	8	pkt
arg	65:42	65:45	7	len
water	65:42	0:0	8	len
water	65:46	0:0	6	)
op	65:48	0:0	6	<
water	65:50	0:0	6	0
stmts	66:12	66:22	5	
return	66:12	66:22	6	ret
water	66:19	0:0	7	ret
water	67:4	0:0	4	}
water	68:4	0:0	2	pkt
op	68:7	0:0	2	->
water	68:9	0:0	2	stream_index
op	68:22	0:0	2	=
water	68:24	0:0	2	st
op	68:26	0:0	2	->
water	68:28	0:0	2	index
water	68:33	0:0	2	;
if	70:4	78:4	2	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	70:8	70:33	3	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	70:8	0:0	4	st
op	70:10	0:0	4	->
water	70:12	0:0	4	codec
op	70:17	0:0	4	->
water	70:19	0:0	4	codec_type
op	70:30	0:0	4	==
water	70:33	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	70:53	78:4	3	
water	70:53	0:0	4	{
if	71:8	77:8	4	(st -> codec -> codec_id == AV_CODEC_ID_RV20)
cond	71:11	71:34	5	st -> codec -> codec_id == AV_CODEC_ID_RV20
water	71:11	0:0	6	st
op	71:13	0:0	6	->
water	71:15	0:0	6	codec
op	71:20	0:0	6	->
water	71:22	0:0	6	codec_id
op	71:31	0:0	6	==
water	71:34	0:0	6	AV_CODEC_ID_RV20
stmts	71:51	77:8	5	
water	71:51	0:0	6	{
decl	72:12	72:64	6	int	seq
op	72:19	0:0	6	=
water	72:21	0:0	6	128
op	72:24	0:0	6	*
water	72:25	0:0	6	(
water	72:26	0:0	6	pkt
op	72:29	0:0	6	->
water	72:31	0:0	6	data
op	72:35	0:0	6	[
water	72:36	0:0	6	2
op	72:37	0:0	6	]
op	72:38	0:0	6	&
water	72:39	0:0	6	0
water	72:40	0:0	6	x7F
water	72:43	0:0	6	)
op	72:45	0:0	6	+
water	72:47	0:0	6	(
water	72:48	0:0	6	pkt
op	72:51	0:0	6	->
water	72:53	0:0	6	data
op	72:57	0:0	6	[
water	72:58	0:0	6	3
op	72:59	0:0	6	]
op	72:60	0:0	6	>>
water	72:62	0:0	6	1
water	72:63	0:0	6	)
call	73:12	73:93	6	av_log
arg	73:19	73:20	7	s
water	73:19	0:0	8	s
arg	73:22	73:34	7	AV_LOG_DEBUG
water	73:22	0:0	8	AV_LOG_DEBUG
arg	73:36	73:55	7	"%d %"PRId64" %d\n"
water	73:36	0:0	8	"%d %"
water	73:42	0:0	8	PRId64
water	73:48	0:0	8	" %d\n"
arg	73:57	73:67	7	*timestamp
op	73:57	0:0	8	*
water	73:58	0:0	8	timestamp
arg	73:69	73:88	7	*timestamp*512LL/25
op	73:69	0:0	8	*
water	73:70	0:0	8	timestamp
op	73:79	0:0	8	*
water	73:80	0:0	8	512
water	73:83	0:0	8	LL
op	73:85	0:0	8	/
water	73:86	0:0	8	25
arg	73:90	73:93	7	seq
water	73:90	0:0	8	seq
water	73:94	0:0	6	;
water	74:12	0:0	6	seq
op	74:16	0:0	6	|=
water	74:19	0:0	6	(
water	74:20	0:0	6	timestamp
op	74:29	0:0	6	&
water	74:30	0:0	6	~0x3FFF
water	74:37	0:0	6	)
water	74:38	0:0	6	;
if	75:12	75:55	6	(seq - timestamp > 0 x2000)
cond	75:15	75:35	7	seq - timestamp > 0 x2000
water	75:15	0:0	8	seq
op	75:19	0:0	8	-
water	75:21	0:0	8	timestamp
op	75:31	0:0	8	>
water	75:34	0:0	8	0
water	75:35	0:0	8	x2000
stmts	75:42	75:55	7	
water	75:42	0:0	8	seq
op	75:46	0:0	8	-=
water	75:49	0:0	8	0
water	75:50	0:0	8	x4000
water	75:55	0:0	8	;
if	76:12	76:55	6	(seq - timestamp < - 0 x2000)
cond	76:15	76:35	7	seq - timestamp < - 0 x2000
water	76:15	0:0	8	seq
op	76:19	0:0	8	-
water	76:21	0:0	8	timestamp
op	76:31	0:0	8	<
op	76:33	0:0	8	-
water	76:34	0:0	8	0
water	76:35	0:0	8	x2000
stmts	76:42	76:55	7	
water	76:42	0:0	8	seq
op	76:46	0:0	8	+=
water	76:49	0:0	8	0
water	76:50	0:0	8	x4000
water	76:55	0:0	8	;
water	77:8	0:0	6	}
water	78:4	0:0	4	}
water	80:4	0:0	2	pkt
op	80:7	0:0	2	->
water	80:9	0:0	2	pts
op	80:13	0:0	2	=
water	80:15	0:0	2	timestamp
water	80:24	0:0	2	;
if	81:4	82:37	2	(flags & 2)
cond	81:8	81:16	3	flags & 2
water	81:8	0:0	4	flags
op	81:14	0:0	4	&
water	81:16	0:0	4	2
stmts	82:8	82:37	3	
water	82:8	0:0	4	pkt
op	82:11	0:0	4	->
water	82:13	0:0	4	flags
op	82:19	0:0	4	|=
water	82:22	0:0	4	AV_PKT_FLAG_KEY
water	82:37	0:0	4	;
return	83:4	83:78	2	st->codec->codec_type==AVMEDIA_TYPE_AUDIO?rm->audio_pkt_cnt:0
water	83:11	0:0	3	st
op	83:13	0:0	3	->
water	83:15	0:0	3	codec
op	83:20	0:0	3	->
water	83:22	0:0	3	codec_type
op	83:33	0:0	3	==
water	83:36	0:0	3	AVMEDIA_TYPE_AUDIO
water	83:55	0:0	3	?
water	83:57	0:0	3	rm
op	83:59	0:0	3	->
water	83:61	0:0	3	audio_pkt_cnt
water	83:75	0:0	3	:
water	83:77	0:0	3	0
