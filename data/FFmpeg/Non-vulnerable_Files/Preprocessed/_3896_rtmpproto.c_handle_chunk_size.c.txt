func	1:0	28:0	0	static int	handle_chunk_size
params	1:28	0:0	1	
param	1:29	1:42	2	URLContext *	s
param	1:44	1:59	2	RTMPPacket *	pkt
stmnts	0:0	27:12	1	
decl	3:4	3:34	2	RTMPContext	*rt
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:11	2	int	ret
if	5:4	10:4	2	(pkt -> size < 4)
cond	5:8	5:20	3	pkt -> size < 4
water	5:8	0:0	4	pkt
op	5:11	0:0	4	->
water	5:13	0:0	4	size
op	5:18	0:0	4	<
water	5:20	0:0	4	4
stmts	5:23	10:4	3	
water	5:23	0:0	4	{
call	6:8	8:24	4	av_log
arg	6:15	6:16	5	s
water	6:15	0:0	6	s
arg	6:18	6:30	5	AV_LOG_ERROR
water	6:18	0:0	6	AV_LOG_ERROR
arg	7:15	7:58	5	"Too short chunk size change packet (%d)\n"
water	7:15	0:0	6	"Too short chunk size change packet (%d)\n"
arg	8:15	8:24	5	pkt->size
water	8:15	0:0	6	pkt
op	8:18	0:0	6	->
water	8:20	0:0	6	size
water	8:25	0:0	4	;
return	9:8	9:34	4	AVERROR_INVALIDDATA
water	9:15	0:0	5	AVERROR_INVALIDDATA
water	10:4	0:0	4	}
if	11:4	18:4	2	(! rt -> is_input)
cond	11:8	11:13	3	! rt -> is_input
op	11:8	0:0	4	!
water	11:9	0:0	4	rt
op	11:11	0:0	4	->
water	11:13	0:0	4	is_input
stmts	11:23	18:4	3	
water	11:23	0:0	4	{
if	14:8	16:22	4	(( ret =ff_rtmp_packet_write (rt -> stream ,pkt ,rt -> out_chunk_size ,& rt -> prev_pkt [ 1 ] ,& rt -> nb_prev_pkt [ 1 ] ) ) < 0)
cond	14:12	15:82	5	( ret =ff_rtmp_packet_write (rt -> stream ,pkt ,rt -> out_chunk_size ,& rt -> prev_pkt [ 1 ] ,& rt -> nb_prev_pkt [ 1 ] ) ) < 0
water	14:12	0:0	6	(
water	14:13	0:0	6	ret
op	14:17	0:0	6	=
call	14:19	15:77	6	ff_rtmp_packet_write
arg	14:40	14:50	7	rt->stream
water	14:40	0:0	8	rt
op	14:42	0:0	8	->
water	14:44	0:0	8	stream
arg	14:52	14:55	7	pkt
water	14:52	0:0	8	pkt
arg	14:57	14:75	7	rt->out_chunk_size
water	14:57	0:0	8	rt
op	14:59	0:0	8	->
water	14:61	0:0	8	out_chunk_size
arg	15:40	15:56	7	&rt->prev_pkt[1]
op	15:40	0:0	8	&
water	15:41	0:0	8	rt
op	15:43	0:0	8	->
water	15:45	0:0	8	prev_pkt
op	15:53	0:0	8	[
water	15:54	0:0	8	1
op	15:55	0:0	8	]
arg	15:58	15:77	7	&rt->nb_prev_pkt[1]
op	15:58	0:0	8	&
water	15:59	0:0	8	rt
op	15:61	0:0	8	->
water	15:63	0:0	8	nb_prev_pkt
op	15:74	0:0	8	[
water	15:75	0:0	8	1
op	15:76	0:0	8	]
water	15:78	0:0	6	)
op	15:80	0:0	6	<
water	15:82	0:0	6	0
stmts	16:12	16:22	5	
return	16:12	16:22	6	ret
water	16:19	0:0	7	ret
water	17:8	0:0	4	rt
op	17:10	0:0	4	->
water	17:12	0:0	4	out_chunk_size
op	17:27	0:0	4	=
call	17:29	17:46	4	AV_RB32
arg	17:37	17:46	5	pkt->data
water	17:37	0:0	6	pkt
op	17:40	0:0	6	->
water	17:42	0:0	6	data
water	17:47	0:0	4	;
water	18:4	0:0	4	}
water	19:4	0:0	2	rt
op	19:6	0:0	2	->
water	19:8	0:0	2	in_chunk_size
op	19:22	0:0	2	=
call	19:24	19:41	2	AV_RB32
arg	19:32	19:41	3	pkt->data
water	19:32	0:0	4	pkt
op	19:35	0:0	4	->
water	19:37	0:0	4	data
water	19:42	0:0	2	;
if	20:4	24:4	2	(rt -> in_chunk_size <= 0)
cond	20:8	20:29	3	rt -> in_chunk_size <= 0
water	20:8	0:0	4	rt
op	20:10	0:0	4	->
water	20:12	0:0	4	in_chunk_size
op	20:26	0:0	4	<=
water	20:29	0:0	4	0
stmts	20:32	24:4	3	
water	20:32	0:0	4	{
call	21:8	22:32	4	av_log
arg	21:15	21:16	5	s
water	21:15	0:0	6	s
arg	21:18	21:30	5	AV_LOG_ERROR
water	21:18	0:0	6	AV_LOG_ERROR
arg	21:32	21:59	5	"Incorrect chunk size %d\n"
water	21:32	0:0	6	"Incorrect chunk size %d\n"
arg	22:15	22:32	5	rt->in_chunk_size
water	22:15	0:0	6	rt
op	22:17	0:0	6	->
water	22:19	0:0	6	in_chunk_size
water	22:33	0:0	4	;
return	23:8	23:34	4	AVERROR_INVALIDDATA
water	23:15	0:0	5	AVERROR_INVALIDDATA
water	24:4	0:0	4	}
call	25:4	26:28	2	av_log
arg	25:11	25:12	3	s
water	25:11	0:0	4	s
arg	25:14	25:26	3	AV_LOG_DEBUG
water	25:14	0:0	4	AV_LOG_DEBUG
arg	25:28	25:60	3	"New incoming chunk size = %d\n"
water	25:28	0:0	4	"New incoming chunk size = %d\n"
arg	26:11	26:28	3	rt->in_chunk_size
water	26:11	0:0	4	rt
op	26:13	0:0	4	->
water	26:15	0:0	4	in_chunk_size
water	26:29	0:0	2	;
return	27:4	27:12	2	0
water	27:11	0:0	3	0
