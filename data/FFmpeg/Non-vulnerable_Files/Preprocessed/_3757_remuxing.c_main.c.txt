func	1:0	97:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	96:12	1	
decl	3:4	3:31	2	AVOutputFormat	*ofmt
op	3:25	0:0	2	=
water	3:27	0:0	2	NULL
decl	4:4	4:54	2	AVFormatContext	*ifmt_ctx
op	4:30	0:0	2	=
water	4:32	0:0	2	NULL
water	4:36	0:0	2	,
decl	4:4	4:54	2	AVFormatContext	*ofmt_ctx
op	4:48	0:0	2	=
water	4:50	0:0	2	NULL
decl	5:4	5:16	2	AVPacket	pkt
decl	6:4	6:42	2	const char	*in_filename
water	6:27	0:0	2	,
decl	6:4	6:42	2	const char	*out_filename
decl	7:4	7:14	2	int	ret
water	7:11	0:0	2	,
decl	7:4	7:14	2	int	i
if	8:4	14:4	2	(argc < 3)
cond	8:8	8:15	3	argc < 3
water	8:8	0:0	4	argc
op	8:13	0:0	4	<
water	8:15	0:0	4	3
stmts	8:18	14:4	3	
water	8:18	0:0	4	{
call	9:8	12:28	4	printf
arg	9:15	12:19	5	"usage: %s input output\n""API example program to remux a media file with libavformat and libavcodec.\n""The output format is guessed according to the file extension.\n""\n"
water	9:15	0:0	6	"usage: %s input output\n"
water	10:15	0:0	6	"API example program to remux a media file with libavformat and libavcodec.\n"
water	11:15	0:0	6	"The output format is guessed according to the file extension.\n"
water	12:15	0:0	6	"\n"
arg	12:21	12:28	5	argv[0]
water	12:21	0:0	6	argv
op	12:25	0:0	6	[
water	12:26	0:0	6	0
op	12:27	0:0	6	]
water	12:29	0:0	4	;
return	13:8	13:16	4	1
water	13:15	0:0	5	1
water	14:4	0:0	4	}
water	15:4	0:0	2	in_filename
op	15:17	0:0	2	=
water	15:19	0:0	2	argv
op	15:23	0:0	2	[
water	15:24	0:0	2	1
op	15:25	0:0	2	]
water	15:26	0:0	2	;
water	16:4	0:0	2	out_filename
op	16:17	0:0	2	=
water	16:19	0:0	2	argv
op	16:23	0:0	2	[
water	16:24	0:0	2	2
op	16:25	0:0	2	]
water	16:26	0:0	2	;
call	17:4	17:20	2	av_register_all
water	17:21	0:0	2	;
if	18:4	21:4	2	(( ret =avformat_open_input (& ifmt_ctx ,in_filename ,0 ,0 ) ) < 0)
cond	18:8	18:68	3	( ret =avformat_open_input (& ifmt_ctx ,in_filename ,0 ,0 ) ) < 0
water	18:8	0:0	4	(
water	18:9	0:0	4	ret
op	18:13	0:0	4	=
call	18:15	18:63	4	avformat_open_input
arg	18:35	18:44	5	&ifmt_ctx
op	18:35	0:0	6	&
water	18:36	0:0	6	ifmt_ctx
arg	18:46	18:57	5	in_filename
water	18:46	0:0	6	in_filename
arg	18:59	18:60	5	0
water	18:59	0:0	6	0
arg	18:62	18:63	5	0
water	18:62	0:0	6	0
water	18:64	0:0	4	)
op	18:66	0:0	4	<
water	18:68	0:0	4	0
stmts	18:71	21:4	3	
water	18:71	0:0	4	{
call	19:8	19:69	4	fprintf
arg	19:16	19:22	5	stderr
water	19:16	0:0	6	stderr
arg	19:24	19:56	5	"Could not open input file '%s'"
water	19:24	0:0	6	"Could not open input file '%s'"
arg	19:58	19:69	5	in_filename
water	19:58	0:0	6	in_filename
water	19:70	0:0	4	;
goto	20:8	20:16	4	end
water	20:13	0:0	5	end
water	21:4	0:0	4	}
if	22:4	25:4	2	(( ret =avformat_find_stream_info (ifmt_ctx ,0 ) ) < 0)
cond	22:8	22:57	3	( ret =avformat_find_stream_info (ifmt_ctx ,0 ) ) < 0
water	22:8	0:0	4	(
water	22:9	0:0	4	ret
op	22:13	0:0	4	=
call	22:15	22:52	4	avformat_find_stream_info
arg	22:41	22:49	5	ifmt_ctx
water	22:41	0:0	6	ifmt_ctx
arg	22:51	22:52	5	0
water	22:51	0:0	6	0
water	22:53	0:0	4	)
op	22:55	0:0	4	<
water	22:57	0:0	4	0
stmts	22:60	25:4	3	
water	22:60	0:0	4	{
call	23:8	23:69	4	fprintf
arg	23:16	23:22	5	stderr
water	23:16	0:0	6	stderr
arg	23:24	23:69	5	"Failed to retrieve input stream information"
water	23:24	0:0	6	"Failed to retrieve input stream information"
water	23:70	0:0	4	;
goto	24:8	24:16	4	end
water	24:13	0:0	5	end
water	25:4	0:0	4	}
call	26:4	26:46	2	av_dump_format
arg	26:19	26:27	3	ifmt_ctx
water	26:19	0:0	4	ifmt_ctx
arg	26:29	26:30	3	0
water	26:29	0:0	4	0
arg	26:32	26:43	3	in_filename
water	26:32	0:0	4	in_filename
arg	26:45	26:46	3	0
water	26:45	0:0	4	0
water	26:47	0:0	2	;
call	27:4	27:70	2	avformat_alloc_output_context2
arg	27:35	27:44	3	&ofmt_ctx
op	27:35	0:0	4	&
water	27:36	0:0	4	ofmt_ctx
arg	27:46	27:50	3	NULL
water	27:46	0:0	4	NULL
arg	27:52	27:56	3	NULL
water	27:52	0:0	4	NULL
arg	27:58	27:70	3	out_filename
water	27:58	0:0	4	out_filename
water	27:71	0:0	2	;
if	28:4	32:4	2	(! ofmt_ctx)
cond	28:8	28:9	3	! ofmt_ctx
op	28:8	0:0	4	!
water	28:9	0:0	4	ofmt_ctx
stmts	28:19	32:4	3	
water	28:19	0:0	4	{
call	29:8	29:59	4	fprintf
arg	29:16	29:22	5	stderr
water	29:16	0:0	6	stderr
arg	29:24	29:59	5	"Could not create output context\n"
water	29:24	0:0	6	"Could not create output context\n"
water	29:60	0:0	4	;
water	30:8	0:0	4	ret
op	30:12	0:0	4	=
water	30:14	0:0	4	AVERROR_UNKNOWN
water	30:29	0:0	4	;
goto	31:8	31:16	4	end
water	31:13	0:0	5	end
water	32:4	0:0	4	}
water	33:4	0:0	2	ofmt
op	33:9	0:0	2	=
water	33:11	0:0	2	ofmt_ctx
op	33:19	0:0	2	->
water	33:21	0:0	2	oformat
water	33:28	0:0	2	;
for	34:4	50:4	2	(i = 0 ;i < ifmt_ctx -> nb_streams;i ++)
forinit	34:9	34:14	3	i = 0 ;
water	34:9	0:0	4	i
op	34:11	0:0	4	=
water	34:13	0:0	4	0
water	34:14	0:0	4	;
cond	34:16	34:30	3	i < ifmt_ctx -> nb_streams
water	34:16	0:0	4	i
op	34:18	0:0	4	<
water	34:20	0:0	4	ifmt_ctx
op	34:28	0:0	4	->
water	34:30	0:0	4	nb_streams
forexpr	34:42	34:43	3	i ++
water	34:42	0:0	4	i
op	34:43	0:0	4	++
stmts	34:47	50:4	3	
water	34:47	0:0	4	{
decl	35:8	35:50	4	AVStream	*in_stream
op	35:28	0:0	4	=
water	35:30	0:0	4	ifmt_ctx
op	35:38	0:0	4	->
water	35:40	0:0	4	streams
op	35:47	0:0	4	[
water	35:48	0:0	4	i
op	35:49	0:0	4	]
decl	36:8	36:85	4	AVStream	*out_stream
op	36:29	0:0	4	=
call	36:31	36:84	5	avformat_new_stream
arg	36:51	36:59	6	ofmt_ctx
water	36:51	0:0	7	ofmt_ctx
arg	36:61	36:84	6	in_stream->codec->codec
water	36:61	0:0	7	in_stream
op	36:70	0:0	7	->
water	36:72	0:0	7	codec
op	36:77	0:0	7	->
water	36:79	0:0	7	codec
if	37:8	41:8	4	(! out_stream)
cond	37:12	37:13	5	! out_stream
op	37:12	0:0	6	!
water	37:13	0:0	6	out_stream
stmts	37:25	41:8	5	
water	37:25	0:0	6	{
call	38:12	38:63	6	fprintf
arg	38:20	38:26	7	stderr
water	38:20	0:0	8	stderr
arg	38:28	38:63	7	"Failed allocating output stream\n"
water	38:28	0:0	8	"Failed allocating output stream\n"
water	38:64	0:0	6	;
water	39:12	0:0	6	ret
op	39:16	0:0	6	=
water	39:18	0:0	6	AVERROR_UNKNOWN
water	39:33	0:0	6	;
goto	40:12	40:20	6	end
water	40:17	0:0	7	end
water	41:8	0:0	6	}
water	42:8	0:0	4	ret
op	42:12	0:0	4	=
call	42:14	42:70	4	avcodec_copy_context
arg	42:35	42:52	5	out_stream->codec
water	42:35	0:0	6	out_stream
op	42:45	0:0	6	->
water	42:47	0:0	6	codec
arg	42:54	42:70	5	in_stream->codec
water	42:54	0:0	6	in_stream
op	42:63	0:0	6	->
water	42:65	0:0	6	codec
water	42:71	0:0	4	;
if	43:8	46:8	4	(ret < 0)
cond	43:12	43:18	5	ret < 0
water	43:12	0:0	6	ret
op	43:16	0:0	6	<
water	43:18	0:0	6	0
stmts	43:21	46:8	5	
water	43:21	0:0	6	{
call	44:12	44:96	6	fprintf
arg	44:20	44:26	7	stderr
water	44:20	0:0	8	stderr
arg	44:28	44:96	7	"Failed to copy context from input to output stream codec context\n"
water	44:28	0:0	8	"Failed to copy context from input to output stream codec context\n"
water	44:97	0:0	6	;
goto	45:12	45:20	6	end
water	45:17	0:0	7	end
water	46:8	0:0	6	}
water	47:8	0:0	4	out_stream
op	47:18	0:0	4	->
water	47:20	0:0	4	codec
op	47:25	0:0	4	->
water	47:27	0:0	4	codec_tag
op	47:37	0:0	4	=
water	47:39	0:0	4	0
water	47:40	0:0	4	;
if	48:8	49:67	4	(ofmt_ctx -> oformat -> flags & AVFMT_GLOBALHEADER)
cond	48:12	48:39	5	ofmt_ctx -> oformat -> flags & AVFMT_GLOBALHEADER
water	48:12	0:0	6	ofmt_ctx
op	48:20	0:0	6	->
water	48:22	0:0	6	oformat
op	48:29	0:0	6	->
water	48:31	0:0	6	flags
op	48:37	0:0	6	&
water	48:39	0:0	6	AVFMT_GLOBALHEADER
stmts	49:12	49:67	5	
water	49:12	0:0	6	out_stream
op	49:22	0:0	6	->
water	49:24	0:0	6	codec
op	49:29	0:0	6	->
water	49:31	0:0	6	flags
op	49:37	0:0	6	|=
water	49:40	0:0	6	AV_CODEC_FLAG_GLOBAL_HEADER
water	49:67	0:0	6	;
water	50:4	0:0	4	}
call	51:4	51:47	2	av_dump_format
arg	51:19	51:27	3	ofmt_ctx
water	51:19	0:0	4	ofmt_ctx
arg	51:29	51:30	3	0
water	51:29	0:0	4	0
arg	51:32	51:44	3	out_filename
water	51:32	0:0	4	out_filename
arg	51:46	51:47	3	1
water	51:46	0:0	4	1
water	51:48	0:0	2	;
if	52:4	58:4	2	(! ( ofmt -> flags & AVFMT_NOFILE ))
cond	52:8	52:36	3	! ( ofmt -> flags & AVFMT_NOFILE )
op	52:8	0:0	4	!
water	52:9	0:0	4	(
water	52:10	0:0	4	ofmt
op	52:14	0:0	4	->
water	52:16	0:0	4	flags
op	52:22	0:0	4	&
water	52:24	0:0	4	AVFMT_NOFILE
water	52:36	0:0	4	)
stmts	52:39	58:4	3	
water	52:39	0:0	4	{
water	53:8	0:0	4	ret
op	53:12	0:0	4	=
call	53:14	53:68	4	avio_open
arg	53:24	53:37	5	&ofmt_ctx->pb
op	53:24	0:0	6	&
water	53:25	0:0	6	ofmt_ctx
op	53:33	0:0	6	->
water	53:35	0:0	6	pb
arg	53:39	53:51	5	out_filename
water	53:39	0:0	6	out_filename
arg	53:53	53:68	5	AVIO_FLAG_WRITE
water	53:53	0:0	6	AVIO_FLAG_WRITE
water	53:69	0:0	4	;
if	54:8	57:8	4	(ret < 0)
cond	54:12	54:18	5	ret < 0
water	54:12	0:0	6	ret
op	54:16	0:0	6	<
water	54:18	0:0	6	0
stmts	54:21	57:8	5	
water	54:21	0:0	6	{
call	55:12	55:75	6	fprintf
arg	55:20	55:26	7	stderr
water	55:20	0:0	8	stderr
arg	55:28	55:61	7	"Could not open output file '%s'"
water	55:28	0:0	8	"Could not open output file '%s'"
arg	55:63	55:75	7	out_filename
water	55:63	0:0	8	out_filename
water	55:76	0:0	6	;
goto	56:12	56:20	6	end
water	56:17	0:0	7	end
water	57:8	0:0	6	}
water	58:4	0:0	4	}
water	59:4	0:0	2	ret
op	59:8	0:0	2	=
call	59:10	59:46	2	avformat_write_header
arg	59:32	59:40	3	ofmt_ctx
water	59:32	0:0	4	ofmt_ctx
arg	59:42	59:46	3	NULL
water	59:42	0:0	4	NULL
water	59:47	0:0	2	;
if	60:4	63:4	2	(ret < 0)
cond	60:8	60:14	3	ret < 0
water	60:8	0:0	4	ret
op	60:12	0:0	4	<
water	60:14	0:0	4	0
stmts	60:17	63:4	3	
water	60:17	0:0	4	{
call	61:8	61:67	4	fprintf
arg	61:16	61:22	5	stderr
water	61:16	0:0	6	stderr
arg	61:24	61:67	5	"Error occurred when opening output file\n"
water	61:24	0:0	6	"Error occurred when opening output file\n"
water	61:68	0:0	4	;
goto	62:8	62:16	4	end
water	62:13	0:0	5	end
water	63:4	0:0	4	}
while	64:4	84:4	2	(1)
cond	64:11	64:11	3	1
water	64:11	0:0	4	1
stmts	64:14	84:4	3	
water	64:14	0:0	4	{
decl	65:8	65:40	4	AVStream	*in_stream
water	65:27	0:0	4	,
decl	65:8	65:40	4	AVStream	*out_stream
water	66:8	0:0	4	ret
op	66:12	0:0	4	=
call	66:14	66:42	4	av_read_frame
arg	66:28	66:36	5	ifmt_ctx
water	66:28	0:0	6	ifmt_ctx
arg	66:38	66:42	5	&pkt
op	66:38	0:0	6	&
water	66:39	0:0	6	pkt
water	66:43	0:0	4	;
if	67:8	68:17	4	(ret < 0)
cond	67:12	67:18	5	ret < 0
water	67:12	0:0	6	ret
op	67:16	0:0	6	<
water	67:18	0:0	6	0
stmts	68:12	68:17	5	
break	68:12	68:17	6	
water	69:8	0:0	4	in_stream
op	69:19	0:0	4	=
water	69:21	0:0	4	ifmt_ctx
op	69:29	0:0	4	->
water	69:31	0:0	4	streams
op	69:38	0:0	4	[
water	69:39	0:0	4	pkt
op	69:42	0:0	4	.
water	69:43	0:0	4	stream_index
op	69:55	0:0	4	]
water	69:56	0:0	4	;
water	70:8	0:0	4	out_stream
op	70:19	0:0	4	=
water	70:21	0:0	4	ofmt_ctx
op	70:29	0:0	4	->
water	70:31	0:0	4	streams
op	70:38	0:0	4	[
water	70:39	0:0	4	pkt
op	70:42	0:0	4	.
water	70:43	0:0	4	stream_index
op	70:55	0:0	4	]
water	70:56	0:0	4	;
call	71:8	71:39	4	log_packet
arg	71:19	71:27	5	ifmt_ctx
water	71:19	0:0	6	ifmt_ctx
arg	71:29	71:33	5	&pkt
op	71:29	0:0	6	&
water	71:30	0:0	6	pkt
arg	71:35	71:39	5	"in"
water	71:35	0:0	6	"in"
water	71:40	0:0	4	;
water	73:8	0:0	4	pkt
op	73:11	0:0	4	.
water	73:12	0:0	4	pts
op	73:16	0:0	4	=
call	73:18	73:127	4	av_rescale_q_rnd
arg	73:35	73:42	5	pkt.pts
water	73:35	0:0	6	pkt
op	73:38	0:0	6	.
water	73:39	0:0	6	pts
arg	73:44	73:64	5	in_stream->time_base
water	73:44	0:0	6	in_stream
op	73:53	0:0	6	->
water	73:55	0:0	6	time_base
arg	73:66	73:87	5	out_stream->time_base
water	73:66	0:0	6	out_stream
op	73:76	0:0	6	->
water	73:78	0:0	6	time_base
arg	73:89	73:127	5	AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX
water	73:89	0:0	6	AV_ROUND_NEAR_INF
op	73:106	0:0	6	|
water	73:107	0:0	6	AV_ROUND_PASS_MINMAX
water	73:128	0:0	4	;
water	74:8	0:0	4	pkt
op	74:11	0:0	4	.
water	74:12	0:0	4	dts
op	74:16	0:0	4	=
call	74:18	74:127	4	av_rescale_q_rnd
arg	74:35	74:42	5	pkt.dts
water	74:35	0:0	6	pkt
op	74:38	0:0	6	.
water	74:39	0:0	6	dts
arg	74:44	74:64	5	in_stream->time_base
water	74:44	0:0	6	in_stream
op	74:53	0:0	6	->
water	74:55	0:0	6	time_base
arg	74:66	74:87	5	out_stream->time_base
water	74:66	0:0	6	out_stream
op	74:76	0:0	6	->
water	74:78	0:0	6	time_base
arg	74:89	74:127	5	AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX
water	74:89	0:0	6	AV_ROUND_NEAR_INF
op	74:106	0:0	6	|
water	74:107	0:0	6	AV_ROUND_PASS_MINMAX
water	74:128	0:0	4	;
water	75:8	0:0	4	pkt
op	75:11	0:0	4	.
water	75:12	0:0	4	duration
op	75:21	0:0	4	=
call	75:23	75:93	4	av_rescale_q
arg	75:36	75:48	5	pkt.duration
water	75:36	0:0	6	pkt
op	75:39	0:0	6	.
water	75:40	0:0	6	duration
arg	75:50	75:70	5	in_stream->time_base
water	75:50	0:0	6	in_stream
op	75:59	0:0	6	->
water	75:61	0:0	6	time_base
arg	75:72	75:93	5	out_stream->time_base
water	75:72	0:0	6	out_stream
op	75:82	0:0	6	->
water	75:84	0:0	6	time_base
water	75:94	0:0	4	;
water	76:8	0:0	4	pkt
op	76:11	0:0	4	.
water	76:12	0:0	4	pos
op	76:16	0:0	4	=
op	76:18	0:0	4	-
water	76:19	0:0	4	1
water	76:20	0:0	4	;
call	77:8	77:40	4	log_packet
arg	77:19	77:27	5	ofmt_ctx
water	77:19	0:0	6	ofmt_ctx
arg	77:29	77:33	5	&pkt
op	77:29	0:0	6	&
water	77:30	0:0	6	pkt
arg	77:35	77:40	5	"out"
water	77:35	0:0	6	"out"
water	77:41	0:0	4	;
water	78:8	0:0	4	ret
op	78:12	0:0	4	=
call	78:14	78:55	4	av_interleaved_write_frame
arg	78:41	78:49	5	ofmt_ctx
water	78:41	0:0	6	ofmt_ctx
arg	78:51	78:55	5	&pkt
op	78:51	0:0	6	&
water	78:52	0:0	6	pkt
water	78:56	0:0	4	;
if	79:8	82:8	4	(ret < 0)
cond	79:12	79:18	5	ret < 0
water	79:12	0:0	6	ret
op	79:16	0:0	6	<
water	79:18	0:0	6	0
stmts	79:21	82:8	5	
water	79:21	0:0	6	{
call	80:12	80:51	6	fprintf
arg	80:20	80:26	7	stderr
water	80:20	0:0	8	stderr
arg	80:28	80:51	7	"Error muxing packet\n"
water	80:28	0:0	8	"Error muxing packet\n"
water	80:52	0:0	6	;
break	81:12	81:17	6	
water	82:8	0:0	6	}
call	83:8	83:27	4	av_free_packet
arg	83:23	83:27	5	&pkt
op	83:23	0:0	6	&
water	83:24	0:0	6	pkt
water	83:28	0:0	4	;
water	84:4	0:0	4	}
call	85:4	85:29	2	av_write_trailer
arg	85:21	85:29	3	ofmt_ctx
water	85:21	0:0	4	ofmt_ctx
water	85:30	0:0	2	;
label	86:0	86:3	2	end :
call	87:4	87:34	2	avformat_close_input
arg	87:25	87:34	3	&ifmt_ctx
op	87:25	0:0	4	&
water	87:26	0:0	4	ifmt_ctx
water	87:35	0:0	2	;
if	89:4	90:34	2	(ofmt_ctx && ! ( ofmt -> flags & AVFMT_NOFILE ))
cond	89:8	89:48	3	ofmt_ctx && ! ( ofmt -> flags & AVFMT_NOFILE )
water	89:8	0:0	4	ofmt_ctx
op	89:17	0:0	4	&&
op	89:20	0:0	4	!
water	89:21	0:0	4	(
water	89:22	0:0	4	ofmt
op	89:26	0:0	4	->
water	89:28	0:0	4	flags
op	89:34	0:0	4	&
water	89:36	0:0	4	AVFMT_NOFILE
water	89:48	0:0	4	)
stmts	90:8	90:34	3	
call	90:8	90:33	4	avio_closep
arg	90:20	90:33	5	&ofmt_ctx->pb
op	90:20	0:0	6	&
water	90:21	0:0	6	ofmt_ctx
op	90:29	0:0	6	->
water	90:31	0:0	6	pb
water	90:34	0:0	4	;
call	91:4	91:34	2	avformat_free_context
arg	91:26	91:34	3	ofmt_ctx
water	91:26	0:0	4	ofmt_ctx
water	91:35	0:0	2	;
if	92:4	95:4	2	(ret < 0 && ret != AVERROR_EOF)
cond	92:8	92:26	3	ret < 0 && ret != AVERROR_EOF
water	92:8	0:0	4	ret
op	92:12	0:0	4	<
water	92:14	0:0	4	0
op	92:16	0:0	4	&&
water	92:19	0:0	4	ret
op	92:23	0:0	4	!=
water	92:26	0:0	4	AVERROR_EOF
stmts	92:39	95:4	3	
water	92:39	0:0	4	{
call	93:8	93:63	4	fprintf
arg	93:16	93:22	5	stderr
water	93:16	0:0	6	stderr
arg	93:24	93:46	5	"Error occurred: %s\n"
water	93:24	0:0	6	"Error occurred: %s\n"
arg	93:48	93:63	5	av_err2str(ret)
call	93:48	93:62	6	av_err2str
arg	93:59	93:62	7	ret
water	93:59	0:0	8	ret
water	93:64	0:0	4	;
return	94:8	94:16	4	1
water	94:15	0:0	5	1
water	95:4	0:0	4	}
return	96:4	96:12	2	0
water	96:11	0:0	3	0
