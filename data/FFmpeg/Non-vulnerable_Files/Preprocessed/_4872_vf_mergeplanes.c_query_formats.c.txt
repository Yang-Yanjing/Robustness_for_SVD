func	1:0	19:0	0	static int	query_formats
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
stmnts	0:0	18:12	1	
decl	3:4	3:37	2	MergePlanesContext	*s
op	3:26	0:0	2	=
water	3:28	0:0	2	ctx
op	3:31	0:0	2	->
water	3:33	0:0	2	priv
decl	4:4	4:35	2	AVFilterFormats	*formats
op	4:29	0:0	2	=
water	4:31	0:0	2	NULL
decl	5:4	5:9	2	int	i
water	6:4	0:0	2	s
op	6:5	0:0	2	->
water	6:7	0:0	2	outdesc
op	6:15	0:0	2	=
call	6:17	6:47	2	av_pix_fmt_desc_get
arg	6:37	6:47	3	s->out_fmt
water	6:37	0:0	4	s
op	6:38	0:0	4	->
water	6:40	0:0	4	out_fmt
water	6:48	0:0	2	;
for	7:4	12:4	2	(i = 0 ;av_pix_fmt_desc_get (i );i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:37	3	av_pix_fmt_desc_get (i )
call	7:16	7:37	4	av_pix_fmt_desc_get
arg	7:36	7:37	5	i
water	7:36	0:0	6	i
forexpr	7:40	7:41	3	i ++
water	7:40	0:0	4	i
op	7:41	0:0	4	++
stmts	7:45	12:4	3	
water	7:45	0:0	4	{
decl	8:8	8:63	4	const AVPixFmtDescriptor	*desc
op	8:39	0:0	4	=
call	8:41	8:62	5	av_pix_fmt_desc_get
arg	8:61	8:62	6	i
water	8:61	0:0	7	i
if	9:8	11:38	4	(desc -> comp [ 0 ] . depth_minus1 == s -> outdesc -> comp [ 0 ] . depth_minus1 &&av_pix_fmt_count_planes (i ) == desc -> nb_components)
cond	9:12	10:48	5	desc -> comp [ 0 ] . depth_minus1 == s -> outdesc -> comp [ 0 ] . depth_minus1 &&av_pix_fmt_count_planes (i ) == desc -> nb_components
water	9:12	0:0	6	desc
op	9:16	0:0	6	->
water	9:18	0:0	6	comp
op	9:22	0:0	6	[
water	9:23	0:0	6	0
op	9:24	0:0	6	]
op	9:25	0:0	6	.
water	9:26	0:0	6	depth_minus1
op	9:39	0:0	6	==
water	9:42	0:0	6	s
op	9:43	0:0	6	->
water	9:45	0:0	6	outdesc
op	9:52	0:0	6	->
water	9:54	0:0	6	comp
op	9:58	0:0	6	[
water	9:59	0:0	6	0
op	9:60	0:0	6	]
op	9:61	0:0	6	.
water	9:62	0:0	6	depth_minus1
op	9:75	0:0	6	&&
call	10:12	10:37	6	av_pix_fmt_count_planes
arg	10:36	10:37	7	i
water	10:36	0:0	8	i
op	10:39	0:0	6	==
water	10:42	0:0	6	desc
op	10:46	0:0	6	->
water	10:48	0:0	6	nb_components
stmts	11:12	11:38	5	
call	11:12	11:37	6	ff_add_format
arg	11:26	11:34	7	&formats
op	11:26	0:0	8	&
water	11:27	0:0	8	formats
arg	11:36	11:37	7	i
water	11:36	0:0	8	i
water	11:38	0:0	6	;
water	12:4	0:0	4	}
for	13:4	14:61	2	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	13:9	13:14	3	i = 0 ;
water	13:9	0:0	4	i
op	13:11	0:0	4	=
water	13:13	0:0	4	0
water	13:14	0:0	4	;
cond	13:16	13:23	3	i < s -> nb_inputs
water	13:16	0:0	4	i
op	13:18	0:0	4	<
water	13:20	0:0	4	s
op	13:21	0:0	4	->
water	13:23	0:0	4	nb_inputs
forexpr	13:34	13:35	3	i ++
water	13:34	0:0	4	i
op	13:35	0:0	4	++
stmts	14:8	14:61	3	
call	14:8	14:60	4	ff_formats_ref
arg	14:23	14:30	5	formats
water	14:23	0:0	6	formats
arg	14:32	14:60	5	&ctx->inputs[i]->out_formats
op	14:32	0:0	6	&
water	14:33	0:0	6	ctx
op	14:36	0:0	6	->
water	14:38	0:0	6	inputs
op	14:44	0:0	6	[
water	14:45	0:0	6	i
op	14:46	0:0	6	]
op	14:47	0:0	6	->
water	14:49	0:0	6	out_formats
water	14:61	0:0	4	;
water	15:4	0:0	2	formats
op	15:12	0:0	2	=
water	15:14	0:0	2	NULL
water	15:18	0:0	2	;
call	16:4	16:38	2	ff_add_format
arg	16:18	16:26	3	&formats
op	16:18	0:0	4	&
water	16:19	0:0	4	formats
arg	16:28	16:38	3	s->out_fmt
water	16:28	0:0	4	s
op	16:29	0:0	4	->
water	16:31	0:0	4	out_fmt
water	16:39	0:0	2	;
call	17:4	17:56	2	ff_formats_ref
arg	17:19	17:26	3	formats
water	17:19	0:0	4	formats
arg	17:28	17:56	3	&ctx->outputs[0]->in_formats
op	17:28	0:0	4	&
water	17:29	0:0	4	ctx
op	17:32	0:0	4	->
water	17:34	0:0	4	outputs
op	17:41	0:0	4	[
water	17:42	0:0	4	0
op	17:43	0:0	4	]
op	17:44	0:0	4	->
water	17:46	0:0	4	in_formats
water	17:57	0:0	2	;
return	18:4	18:12	2	0
water	18:11	0:0	3	0
