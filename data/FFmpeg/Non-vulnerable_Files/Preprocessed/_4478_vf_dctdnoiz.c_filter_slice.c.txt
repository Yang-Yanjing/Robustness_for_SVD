func	1:0	43:0	0	static int	filter_slice
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
param	2:24	2:33	2	void *	arg
param	2:35	2:44	2	int	jobnr
param	2:46	2:57	2	int	nb_jobs
stmnts	0:0	42:12	1	
decl	4:4	4:12	2	int	x
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	y
decl	5:4	5:34	2	DCTdnoizContext	*s
op	5:23	0:0	2	=
water	5:25	0:0	2	ctx
op	5:28	0:0	2	->
water	5:30	0:0	2	priv
decl	6:4	6:30	2	const ThreadData	*td
op	6:25	0:0	2	=
water	6:27	0:0	2	arg
decl	7:4	7:29	2	const int	w
op	7:16	0:0	2	=
water	7:18	0:0	2	s
op	7:19	0:0	2	->
water	7:21	0:0	2	pr_width
decl	8:4	8:30	2	const int	h
op	8:16	0:0	2	=
water	8:18	0:0	2	s
op	8:19	0:0	2	->
water	8:21	0:0	2	pr_height
decl	9:4	9:53	2	const int	slice_start
op	9:26	0:0	2	=
water	9:28	0:0	2	(
water	9:29	0:0	2	h
op	9:31	0:0	2	*
water	9:34	0:0	2	jobnr
water	9:42	0:0	2	)
op	9:44	0:0	2	/
water	9:46	0:0	2	nb_jobs
decl	10:4	10:53	2	const int	slice_end
op	10:26	0:0	2	=
water	10:28	0:0	2	(
water	10:29	0:0	2	h
op	10:31	0:0	2	*
water	10:33	0:0	2	(
water	10:34	0:0	2	jobnr
op	10:39	0:0	2	+
water	10:40	0:0	2	1
water	10:41	0:0	2	)
water	10:42	0:0	2	)
op	10:44	0:0	2	/
water	10:46	0:0	2	nb_jobs
decl	11:4	11:68	2	const int	slice_start_ctx
op	11:30	0:0	2	=
call	11:32	11:67	3	FFMAX
arg	11:38	11:64	4	slice_start-s->bsize+1
water	11:38	0:0	5	slice_start
op	11:50	0:0	5	-
water	11:52	0:0	5	s
op	11:53	0:0	5	->
water	11:55	0:0	5	bsize
op	11:61	0:0	5	+
water	11:63	0:0	5	1
arg	11:66	11:67	4	0
water	11:66	0:0	5	0
decl	12:4	12:66	2	const int	slice_end_ctx
op	12:30	0:0	2	=
call	12:32	12:65	3	FFMIN
arg	12:38	12:47	4	slice_end
water	12:38	0:0	5	slice_end
arg	12:49	12:65	4	h-s->bsize+1
water	12:49	0:0	5	h
op	12:51	0:0	5	-
water	12:53	0:0	5	s
op	12:54	0:0	5	->
water	12:56	0:0	5	bsize
op	12:62	0:0	5	+
water	12:64	0:0	5	1
decl	13:4	13:55	2	const int	slice_h
op	13:22	0:0	2	=
water	13:24	0:0	2	slice_end_ctx
op	13:38	0:0	2	-
water	13:40	0:0	2	slice_start_ctx
decl	14:4	14:44	2	const int	src_linesize
op	14:29	0:0	2	=
water	14:31	0:0	2	s
op	14:32	0:0	2	->
water	14:34	0:0	2	p_linesize
decl	15:4	15:44	2	const int	dst_linesize
op	15:29	0:0	2	=
water	15:31	0:0	2	s
op	15:32	0:0	2	->
water	15:34	0:0	2	p_linesize
decl	16:4	16:44	2	const int	slice_linesize
op	16:29	0:0	2	=
water	16:31	0:0	2	s
op	16:32	0:0	2	->
water	16:34	0:0	2	p_linesize
decl	17:4	17:14	2	float	*dst
decl	18:4	18:63	2	const float	*src
op	18:21	0:0	2	=
water	18:23	0:0	2	td
op	18:25	0:0	2	->
water	18:27	0:0	2	src
op	18:31	0:0	2	+
water	18:33	0:0	2	slice_start_ctx
op	18:49	0:0	2	*
water	18:51	0:0	2	src_linesize
decl	19:4	19:66	2	const float	*weights
op	19:25	0:0	2	=
water	19:27	0:0	2	s
op	19:28	0:0	2	->
water	19:30	0:0	2	weights
op	19:38	0:0	2	+
water	19:40	0:0	2	slice_start
op	19:52	0:0	2	*
water	19:54	0:0	2	dst_linesize
decl	20:4	20:35	2	float	*slice
op	20:17	0:0	2	=
water	20:19	0:0	2	s
op	20:20	0:0	2	->
water	20:22	0:0	2	slices
op	20:28	0:0	2	[
water	20:29	0:0	2	jobnr
op	20:34	0:0	2	]
call	22:4	22:77	2	memset
arg	22:11	22:16	3	slice
water	22:11	0:0	4	slice
arg	22:18	22:19	3	0
water	22:18	0:0	4	0
arg	22:21	22:77	3	(slice_h+s->bsize-1)*dst_linesize*sizeof(*slice)
water	22:21	0:0	4	(
water	22:22	0:0	4	slice_h
op	22:30	0:0	4	+
water	22:32	0:0	4	s
op	22:33	0:0	4	->
water	22:35	0:0	4	bsize
op	22:41	0:0	4	-
water	22:43	0:0	4	1
water	22:44	0:0	4	)
op	22:46	0:0	4	*
water	22:48	0:0	4	dst_linesize
op	22:61	0:0	4	*
op	22:63	0:0	4	sizeof
water	22:69	0:0	4	(
op	22:70	0:0	4	*
water	22:71	0:0	4	slice
water	22:76	0:0	4	)
water	22:78	0:0	2	;
for	24:4	31:4	2	(y = 0 ;y < slice_h;y += s -> step)
forinit	24:9	24:14	3	y = 0 ;
water	24:9	0:0	4	y
op	24:11	0:0	4	=
water	24:13	0:0	4	0
water	24:14	0:0	4	;
cond	24:16	24:20	3	y < slice_h
water	24:16	0:0	4	y
op	24:18	0:0	4	<
water	24:20	0:0	4	slice_h
forexpr	24:29	24:37	3	y += s -> step
water	24:29	0:0	4	y
op	24:31	0:0	4	+=
water	24:34	0:0	4	s
op	24:35	0:0	4	->
water	24:37	0:0	4	step
stmts	24:43	31:4	3	
water	24:43	0:0	4	{
for	25:8	28:38	4	(x = 0 ;x < w - s -> bsize + 1;x += s -> step)
forinit	25:13	25:18	5	x = 0 ;
water	25:13	0:0	6	x
op	25:15	0:0	6	=
water	25:17	0:0	6	0
water	25:18	0:0	6	;
cond	25:20	25:39	5	x < w - s -> bsize + 1
water	25:20	0:0	6	x
op	25:22	0:0	6	<
water	25:24	0:0	6	w
op	25:26	0:0	6	-
water	25:28	0:0	6	s
op	25:29	0:0	6	->
water	25:31	0:0	6	bsize
op	25:37	0:0	6	+
water	25:39	0:0	6	1
forexpr	25:42	25:50	5	x += s -> step
water	25:42	0:0	6	x
op	25:44	0:0	6	+=
water	25:47	0:0	6	s
op	25:48	0:0	6	->
water	25:50	0:0	6	step
stmts	26:12	28:38	5	
call	26:12	28:37	6	s->filter_freq_func
arg	26:32	26:33	7	s
water	26:32	0:0	8	s
arg	26:35	26:42	7	src+x
water	26:35	0:0	8	src
op	26:39	0:0	8	+
water	26:41	0:0	8	x
arg	26:44	26:56	7	src_linesize
water	26:44	0:0	8	src_linesize
arg	27:32	27:41	7	slice+x
water	27:32	0:0	8	slice
op	27:38	0:0	8	+
water	27:40	0:0	8	x
arg	27:43	27:57	7	slice_linesize
water	27:43	0:0	8	slice_linesize
arg	28:32	28:37	7	jobnr
water	28:32	0:0	8	jobnr
water	28:38	0:0	6	;
water	29:8	0:0	4	src
op	29:12	0:0	4	+=
water	29:15	0:0	4	s
op	29:16	0:0	4	->
water	29:18	0:0	4	step
op	29:23	0:0	4	*
water	29:25	0:0	4	src_linesize
water	29:37	0:0	4	;
water	30:8	0:0	4	slice
op	30:14	0:0	4	+=
water	30:17	0:0	4	s
op	30:18	0:0	4	->
water	30:20	0:0	4	step
op	30:25	0:0	4	*
water	30:27	0:0	4	slice_linesize
water	30:41	0:0	4	;
water	31:4	0:0	4	}
water	33:4	0:0	2	slice
op	33:10	0:0	2	=
water	33:12	0:0	2	s
op	33:13	0:0	2	->
water	33:15	0:0	2	slices
op	33:21	0:0	2	[
water	33:22	0:0	2	jobnr
op	33:27	0:0	2	]
op	33:29	0:0	2	+
water	33:31	0:0	2	(
water	33:32	0:0	2	slice_start
op	33:44	0:0	2	-
water	33:46	0:0	2	slice_start_ctx
water	33:61	0:0	2	)
op	33:63	0:0	2	*
water	33:65	0:0	2	slice_linesize
water	33:79	0:0	2	;
water	34:4	0:0	2	dst
op	34:8	0:0	2	=
water	34:10	0:0	2	td
op	34:12	0:0	2	->
water	34:14	0:0	2	dst
op	34:18	0:0	2	+
water	34:20	0:0	2	slice_start
op	34:32	0:0	2	*
water	34:34	0:0	2	dst_linesize
water	34:46	0:0	2	;
for	35:4	41:4	2	(y = slice_start ;y < slice_end;y ++)
forinit	35:9	35:24	3	y = slice_start ;
water	35:9	0:0	4	y
op	35:11	0:0	4	=
water	35:13	0:0	4	slice_start
water	35:24	0:0	4	;
cond	35:26	35:30	3	y < slice_end
water	35:26	0:0	4	y
op	35:28	0:0	4	<
water	35:30	0:0	4	slice_end
forexpr	35:41	35:42	3	y ++
water	35:41	0:0	4	y
op	35:42	0:0	4	++
stmts	35:46	41:4	3	
water	35:46	0:0	4	{
for	36:8	37:42	4	(x = 0 ;x < w;x ++)
forinit	36:13	36:18	5	x = 0 ;
water	36:13	0:0	6	x
op	36:15	0:0	6	=
water	36:17	0:0	6	0
water	36:18	0:0	6	;
cond	36:20	36:24	5	x < w
water	36:20	0:0	6	x
op	36:22	0:0	6	<
water	36:24	0:0	6	w
forexpr	36:27	36:28	5	x ++
water	36:27	0:0	6	x
op	36:28	0:0	6	++
stmts	37:12	37:42	5	
water	37:12	0:0	6	dst
op	37:15	0:0	6	[
water	37:16	0:0	6	x
op	37:17	0:0	6	]
op	37:19	0:0	6	=
water	37:21	0:0	6	slice
op	37:26	0:0	6	[
water	37:27	0:0	6	x
op	37:28	0:0	6	]
op	37:30	0:0	6	*
water	37:32	0:0	6	weights
op	37:39	0:0	6	[
water	37:40	0:0	6	x
op	37:41	0:0	6	]
water	37:42	0:0	6	;
water	38:8	0:0	4	slice
op	38:14	0:0	4	+=
water	38:17	0:0	4	slice_linesize
water	38:31	0:0	4	;
water	39:8	0:0	4	dst
op	39:12	0:0	4	+=
water	39:15	0:0	4	dst_linesize
water	39:27	0:0	4	;
water	40:8	0:0	4	weights
op	40:16	0:0	4	+=
water	40:19	0:0	4	dst_linesize
water	40:31	0:0	4	;
water	41:4	0:0	4	}
return	42:4	42:12	2	0
water	42:11	0:0	3	0
