func	1:0	72:0	0	static void	vc1_decode_p_blocks
params	1:31	0:0	1	
param	1:32	1:45	2	VC1Context *	v
stmnts	0:0	71:66	1	
decl	3:4	3:29	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	v
op	3:26	0:0	2	->
water	3:28	0:0	2	s
decl	4:4	4:25	2	int	apply_loop_filter
switch	6:4	16:4	2	(v -> c_ac_table_index)
cond	6:12	6:15	3	v -> c_ac_table_index
water	6:12	0:0	4	v
op	6:13	0:0	4	->
water	6:15	0:0	4	c_ac_table_index
stmts	6:33	16:4	3	
water	6:33	0:0	4	{
label	7:4	7:10	4	case 0 :
water	8:8	0:0	4	v
op	8:9	0:0	4	->
water	8:11	0:0	4	codingset
op	8:21	0:0	4	=
water	8:23	0:0	4	(
water	8:24	0:0	4	v
op	8:25	0:0	4	->
water	8:27	0:0	4	pqindex
op	8:35	0:0	4	<=
water	8:38	0:0	4	8
water	8:39	0:0	4	)
water	8:41	0:0	4	?
water	8:43	0:0	4	CS_HIGH_RATE_INTRA
water	8:62	0:0	4	:
water	8:64	0:0	4	CS_LOW_MOT_INTRA
water	8:80	0:0	4	;
break	9:8	9:13	4	
label	10:4	10:10	4	case 1 :
water	11:8	0:0	4	v
op	11:9	0:0	4	->
water	11:11	0:0	4	codingset
op	11:21	0:0	4	=
water	11:23	0:0	4	CS_HIGH_MOT_INTRA
water	11:40	0:0	4	;
break	12:8	12:13	4	
label	13:4	13:10	4	case 2 :
water	14:8	0:0	4	v
op	14:9	0:0	4	->
water	14:11	0:0	4	codingset
op	14:21	0:0	4	=
water	14:23	0:0	4	CS_MID_RATE_INTRA
water	14:40	0:0	4	;
break	15:8	15:13	4	
water	16:4	0:0	4	}
switch	17:4	27:4	2	(v -> c_ac_table_index)
cond	17:12	17:15	3	v -> c_ac_table_index
water	17:12	0:0	4	v
op	17:13	0:0	4	->
water	17:15	0:0	4	c_ac_table_index
stmts	17:33	27:4	3	
water	17:33	0:0	4	{
label	18:4	18:10	4	case 0 :
water	19:8	0:0	4	v
op	19:9	0:0	4	->
water	19:11	0:0	4	codingset2
op	19:22	0:0	4	=
water	19:24	0:0	4	(
water	19:25	0:0	4	v
op	19:26	0:0	4	->
water	19:28	0:0	4	pqindex
op	19:36	0:0	4	<=
water	19:39	0:0	4	8
water	19:40	0:0	4	)
water	19:42	0:0	4	?
water	19:44	0:0	4	CS_HIGH_RATE_INTER
water	19:63	0:0	4	:
water	19:65	0:0	4	CS_LOW_MOT_INTER
water	19:81	0:0	4	;
break	20:8	20:13	4	
label	21:4	21:10	4	case 1 :
water	22:8	0:0	4	v
op	22:9	0:0	4	->
water	22:11	0:0	4	codingset2
op	22:22	0:0	4	=
water	22:24	0:0	4	CS_HIGH_MOT_INTER
water	22:41	0:0	4	;
break	23:8	23:13	4	
label	24:4	24:10	4	case 2 :
water	25:8	0:0	4	v
op	25:9	0:0	4	->
water	25:11	0:0	4	codingset2
op	25:22	0:0	4	=
water	25:24	0:0	4	CS_MID_RATE_INTER
water	25:41	0:0	4	;
break	26:8	26:13	4	
water	27:4	0:0	4	}
water	28:4	0:0	2	apply_loop_filter
op	28:24	0:0	2	=
water	28:26	0:0	2	s
op	28:27	0:0	2	->
water	28:29	0:0	2	loop_filter
op	28:41	0:0	2	&&
op	28:44	0:0	2	!
water	28:45	0:0	2	(
water	28:46	0:0	2	s
op	28:47	0:0	2	->
water	28:49	0:0	2	avctx
op	28:54	0:0	2	->
water	28:56	0:0	2	skip_loop_filter
op	28:73	0:0	2	>=
water	28:76	0:0	2	AVDISCARD_NONKEY
water	28:92	0:0	2	)
op	28:94	0:0	2	&&
water	29:26	0:0	2	v
op	29:27	0:0	2	->
water	29:29	0:0	2	fcm
op	29:33	0:0	2	==
water	29:36	0:0	2	PROGRESSIVE
water	29:47	0:0	2	;
water	30:4	0:0	2	s
op	30:5	0:0	2	->
water	30:7	0:0	2	first_slice_line
op	30:24	0:0	2	=
water	30:26	0:0	2	1
water	30:27	0:0	2	;
call	31:4	31:64	2	memset
arg	31:11	31:22	3	v->cbp_base
water	31:11	0:0	4	v
op	31:12	0:0	4	->
water	31:14	0:0	4	cbp_base
arg	31:24	31:25	3	0
water	31:24	0:0	4	0
arg	31:27	31:64	3	sizeof(v->cbp_base[0])*2*s->mb_stride
op	31:27	0:0	4	sizeof
water	31:33	0:0	4	(
water	31:34	0:0	4	v
op	31:35	0:0	4	->
water	31:37	0:0	4	cbp_base
op	31:45	0:0	4	[
water	31:46	0:0	4	0
op	31:47	0:0	4	]
water	31:48	0:0	4	)
op	31:49	0:0	4	*
water	31:50	0:0	4	2
op	31:51	0:0	4	*
water	31:52	0:0	4	s
op	31:53	0:0	4	->
water	31:55	0:0	4	mb_stride
water	31:65	0:0	2	;
for	32:4	59:4	2	(s -> mb_y = s -> start_mb_y ;s -> mb_y < s -> end_mb_y;s -> mb_y ++)
forinit	32:9	32:32	3	s -> mb_y = s -> start_mb_y ;
water	32:9	0:0	4	s
op	32:10	0:0	4	->
water	32:12	0:0	4	mb_y
op	32:17	0:0	4	=
water	32:19	0:0	4	s
op	32:20	0:0	4	->
water	32:22	0:0	4	start_mb_y
water	32:32	0:0	4	;
cond	32:34	32:47	3	s -> mb_y < s -> end_mb_y
water	32:34	0:0	4	s
op	32:35	0:0	4	->
water	32:37	0:0	4	mb_y
op	32:42	0:0	4	<
water	32:44	0:0	4	s
op	32:45	0:0	4	->
water	32:47	0:0	4	end_mb_y
forexpr	32:57	32:64	3	s -> mb_y ++
water	32:57	0:0	4	s
op	32:58	0:0	4	->
water	32:60	0:0	4	mb_y
op	32:64	0:0	4	++
stmts	32:68	59:4	3	
water	32:68	0:0	4	{
water	33:8	0:0	4	s
op	33:9	0:0	4	->
water	33:11	0:0	4	mb_x
op	33:16	0:0	4	=
water	33:18	0:0	4	0
water	33:19	0:0	4	;
call	34:8	34:26	4	init_block_index
arg	34:25	34:26	5	v
water	34:25	0:0	6	v
water	34:27	0:0	4	;
for	35:8	51:8	4	(;s -> mb_x < s -> mb_width;s -> mb_x ++)
forinit	35:13	35:13	5	;
water	35:13	0:0	6	;
cond	35:15	35:28	5	s -> mb_x < s -> mb_width
water	35:15	0:0	6	s
op	35:16	0:0	6	->
water	35:18	0:0	6	mb_x
op	35:23	0:0	6	<
water	35:25	0:0	6	s
op	35:26	0:0	6	->
water	35:28	0:0	6	mb_width
forexpr	35:38	35:45	5	s -> mb_x ++
water	35:38	0:0	6	s
op	35:39	0:0	6	->
water	35:41	0:0	6	mb_x
op	35:45	0:0	6	++
stmts	35:49	51:8	5	
water	35:49	0:0	6	{
call	36:12	36:35	6	ff_update_block_index
arg	36:34	36:35	7	s
water	36:34	0:0	8	s
water	36:36	0:0	6	;
if	37:12	38:40	6	(v -> fcm == ILACE_FIELD)
cond	37:16	37:26	7	v -> fcm == ILACE_FIELD
water	37:16	0:0	8	v
op	37:17	0:0	8	->
water	37:19	0:0	8	fcm
op	37:23	0:0	8	==
water	37:26	0:0	8	ILACE_FIELD
stmts	38:16	38:40	7	
call	38:16	38:39	8	vc1_decode_p_mb_intfi
arg	38:38	38:39	9	v
water	38:38	0:0	10	v
water	38:40	0:0	8	;
else	39:12	40:40	6
stmts	39:17	40:40	7	
if	39:17	40:40	8	(v -> fcm == ILACE_FRAME)
cond	39:21	39:31	9	v -> fcm == ILACE_FRAME
water	39:21	0:0	10	v
op	39:22	0:0	10	->
water	39:24	0:0	10	fcm
op	39:28	0:0	10	==
water	39:31	0:0	10	ILACE_FRAME
stmts	40:16	40:40	9	
call	40:16	40:39	10	vc1_decode_p_mb_intfr
arg	40:38	40:39	11	v
water	40:38	0:0	12	v
water	40:40	0:0	10	;
else	41:12	41:35	6
stmts	41:17	41:35	7	
call	41:17	41:34	8	vc1_decode_p_mb
arg	41:33	41:34	9	v
water	41:33	0:0	10	v
water	41:35	0:0	8	;
if	42:12	43:45	6	(s -> mb_y != s -> start_mb_y && apply_loop_filter)
cond	42:16	42:44	7	s -> mb_y != s -> start_mb_y && apply_loop_filter
water	42:16	0:0	8	s
op	42:17	0:0	8	->
water	42:19	0:0	8	mb_y
op	42:24	0:0	8	!=
water	42:27	0:0	8	s
op	42:28	0:0	8	->
water	42:30	0:0	8	start_mb_y
op	42:41	0:0	8	&&
water	42:44	0:0	8	apply_loop_filter
stmts	43:16	43:45	7	
call	43:16	43:44	8	ff_vc1_apply_p_loop_filter
arg	43:43	43:44	9	v
water	43:43	0:0	10	v
water	43:45	0:0	8	;
if	44:12	50:12	6	(get_bits_count (& s -> gb ) > v -> bits ||get_bits_count (& s -> gb ) < 0)
cond	44:16	44:77	7	get_bits_count (& s -> gb ) > v -> bits ||get_bits_count (& s -> gb ) < 0
call	44:16	44:37	8	get_bits_count
arg	44:31	44:37	9	&s->gb
op	44:31	0:0	10	&
water	44:32	0:0	10	s
op	44:33	0:0	10	->
water	44:35	0:0	10	gb
op	44:39	0:0	8	>
water	44:41	0:0	8	v
op	44:42	0:0	8	->
water	44:44	0:0	8	bits
op	44:49	0:0	8	||
call	44:52	44:73	8	get_bits_count
arg	44:67	44:73	9	&s->gb
op	44:67	0:0	10	&
water	44:68	0:0	10	s
op	44:69	0:0	10	->
water	44:71	0:0	10	gb
op	44:75	0:0	8	<
water	44:77	0:0	8	0
stmts	44:80	50:12	7	
water	44:80	0:0	8	{
call	46:16	46:87	8	ff_er_add_slice
arg	46:32	46:38	9	&s->er
op	46:32	0:0	10	&
water	46:33	0:0	10	s
op	46:34	0:0	10	->
water	46:36	0:0	10	er
arg	46:40	46:41	9	0
water	46:40	0:0	10	0
arg	46:43	46:56	9	s->start_mb_y
water	46:43	0:0	10	s
op	46:44	0:0	10	->
water	46:46	0:0	10	start_mb_y
arg	46:58	46:65	9	s->mb_x
water	46:58	0:0	10	s
op	46:59	0:0	10	->
water	46:61	0:0	10	mb_x
arg	46:67	46:74	9	s->mb_y
water	46:67	0:0	10	s
op	46:68	0:0	10	->
water	46:70	0:0	10	mb_y
arg	46:76	46:87	9	ER_MB_ERROR
water	46:76	0:0	10	ER_MB_ERROR
water	46:88	0:0	8	;
call	47:16	48:72	8	av_log
arg	47:23	47:31	9	s->avctx
water	47:23	0:0	10	s
op	47:24	0:0	10	->
water	47:26	0:0	10	avctx
arg	47:33	47:45	9	AV_LOG_ERROR
water	47:33	0:0	10	AV_LOG_ERROR
arg	47:47	47:89	9	"Bits overconsumption: %i > %i at %ix%i\n"
water	47:47	0:0	10	"Bits overconsumption: %i > %i at %ix%i\n"
arg	48:23	48:45	9	get_bits_count(&s->gb)
call	48:23	48:44	10	get_bits_count
arg	48:38	48:44	11	&s->gb
op	48:38	0:0	12	&
water	48:39	0:0	12	s
op	48:40	0:0	12	->
water	48:42	0:0	12	gb
arg	48:47	48:54	9	v->bits
water	48:47	0:0	10	v
op	48:48	0:0	10	->
water	48:50	0:0	10	bits
arg	48:56	48:63	9	s->mb_x
water	48:56	0:0	10	s
op	48:57	0:0	10	->
water	48:59	0:0	10	mb_x
arg	48:65	48:72	9	s->mb_y
water	48:65	0:0	10	s
op	48:66	0:0	10	->
water	48:68	0:0	10	mb_y
water	48:73	0:0	8	;
return	49:16	49:22	8	
water	50:12	0:0	8	}
water	51:8	0:0	6	}
call	52:8	52:89	4	memmove
arg	52:16	52:27	5	v->cbp_base
water	52:16	0:0	6	v
op	52:17	0:0	6	->
water	52:19	0:0	6	cbp_base
arg	52:34	52:40	5	v->cbp
water	52:34	0:0	6	v
op	52:35	0:0	6	->
water	52:37	0:0	6	cbp
arg	52:47	52:89	5	sizeof(v->cbp_base[0])*s->mb_stride
op	52:47	0:0	6	sizeof
water	52:53	0:0	6	(
water	52:54	0:0	6	v
op	52:55	0:0	6	->
water	52:57	0:0	6	cbp_base
op	52:65	0:0	6	[
water	52:66	0:0	6	0
op	52:67	0:0	6	]
water	52:68	0:0	6	)
op	52:75	0:0	6	*
water	52:77	0:0	6	s
op	52:78	0:0	6	->
water	52:80	0:0	6	mb_stride
water	52:90	0:0	4	;
call	53:8	53:89	4	memmove
arg	53:16	53:29	5	v->ttblk_base
water	53:16	0:0	6	v
op	53:17	0:0	6	->
water	53:19	0:0	6	ttblk_base
arg	53:34	53:42	5	v->ttblk
water	53:34	0:0	6	v
op	53:35	0:0	6	->
water	53:37	0:0	6	ttblk
arg	53:47	53:89	5	sizeof(v->ttblk_base[0])*s->mb_stride
op	53:47	0:0	6	sizeof
water	53:53	0:0	6	(
water	53:54	0:0	6	v
op	53:55	0:0	6	->
water	53:57	0:0	6	ttblk_base
op	53:67	0:0	6	[
water	53:68	0:0	6	0
op	53:69	0:0	6	]
water	53:70	0:0	6	)
op	53:75	0:0	6	*
water	53:77	0:0	6	s
op	53:78	0:0	6	->
water	53:80	0:0	6	mb_stride
water	53:90	0:0	4	;
call	54:8	54:89	4	memmove
arg	54:16	54:32	5	v->is_intra_base
water	54:16	0:0	6	v
op	54:17	0:0	6	->
water	54:19	0:0	6	is_intra_base
arg	54:34	54:45	5	v->is_intra
water	54:34	0:0	6	v
op	54:35	0:0	6	->
water	54:37	0:0	6	is_intra
arg	54:47	54:89	5	sizeof(v->is_intra_base[0])*s->mb_stride
op	54:47	0:0	6	sizeof
water	54:53	0:0	6	(
water	54:54	0:0	6	v
op	54:55	0:0	6	->
water	54:57	0:0	6	is_intra_base
op	54:70	0:0	6	[
water	54:71	0:0	6	0
op	54:72	0:0	6	]
water	54:73	0:0	6	)
op	54:75	0:0	6	*
water	54:77	0:0	6	s
op	54:78	0:0	6	->
water	54:80	0:0	6	mb_stride
water	54:90	0:0	4	;
call	55:8	55:89	4	memmove
arg	55:16	55:31	5	v->luma_mv_base
water	55:16	0:0	6	v
op	55:17	0:0	6	->
water	55:19	0:0	6	luma_mv_base
arg	55:34	55:44	5	v->luma_mv
water	55:34	0:0	6	v
op	55:35	0:0	6	->
water	55:37	0:0	6	luma_mv
arg	55:47	55:89	5	sizeof(v->luma_mv_base[0])*s->mb_stride
op	55:47	0:0	6	sizeof
water	55:53	0:0	6	(
water	55:54	0:0	6	v
op	55:55	0:0	6	->
water	55:57	0:0	6	luma_mv_base
op	55:69	0:0	6	[
water	55:70	0:0	6	0
op	55:71	0:0	6	]
water	55:72	0:0	6	)
op	55:75	0:0	6	*
water	55:77	0:0	6	s
op	55:78	0:0	6	->
water	55:80	0:0	6	mb_stride
water	55:90	0:0	4	;
if	56:8	57:62	4	(s -> mb_y != s -> start_mb_y)
cond	56:12	56:26	5	s -> mb_y != s -> start_mb_y
water	56:12	0:0	6	s
op	56:13	0:0	6	->
water	56:15	0:0	6	mb_y
op	56:20	0:0	6	!=
water	56:23	0:0	6	s
op	56:24	0:0	6	->
water	56:26	0:0	6	start_mb_y
stmts	57:12	57:62	5	
call	57:12	57:61	6	ff_mpeg_draw_horiz_band
arg	57:36	57:37	7	s
water	57:36	0:0	8	s
arg	57:39	57:57	7	(s->mb_y-1)*16
water	57:39	0:0	8	(
water	57:40	0:0	8	s
op	57:41	0:0	8	->
water	57:43	0:0	8	mb_y
op	57:48	0:0	8	-
water	57:50	0:0	8	1
water	57:51	0:0	8	)
op	57:53	0:0	8	*
water	57:55	0:0	8	16
arg	57:59	57:61	7	16
water	57:59	0:0	8	16
water	57:62	0:0	6	;
water	58:8	0:0	4	s
op	58:9	0:0	4	->
water	58:11	0:0	4	first_slice_line
op	58:28	0:0	4	=
water	58:30	0:0	4	0
water	58:31	0:0	4	;
water	59:4	0:0	4	}
if	60:4	67:4	2	(apply_loop_filter)
cond	60:8	60:8	3	apply_loop_filter
water	60:8	0:0	4	apply_loop_filter
stmts	60:27	67:4	3	
water	60:27	0:0	4	{
water	61:8	0:0	4	s
op	61:9	0:0	4	->
water	61:11	0:0	4	mb_x
op	61:16	0:0	4	=
water	61:18	0:0	4	0
water	61:19	0:0	4	;
call	62:8	62:26	4	init_block_index
arg	62:25	62:26	5	v
water	62:25	0:0	6	v
water	62:27	0:0	4	;
for	63:8	66:8	4	(;s -> mb_x < s -> mb_width;s -> mb_x ++)
forinit	63:13	63:13	5	;
water	63:13	0:0	6	;
cond	63:15	63:28	5	s -> mb_x < s -> mb_width
water	63:15	0:0	6	s
op	63:16	0:0	6	->
water	63:18	0:0	6	mb_x
op	63:23	0:0	6	<
water	63:25	0:0	6	s
op	63:26	0:0	6	->
water	63:28	0:0	6	mb_width
forexpr	63:38	63:45	5	s -> mb_x ++
water	63:38	0:0	6	s
op	63:39	0:0	6	->
water	63:41	0:0	6	mb_x
op	63:45	0:0	6	++
stmts	63:49	66:8	5	
water	63:49	0:0	6	{
call	64:12	64:35	6	ff_update_block_index
arg	64:34	64:35	7	s
water	64:34	0:0	8	s
water	64:36	0:0	6	;
call	65:12	65:40	6	ff_vc1_apply_p_loop_filter
arg	65:39	65:40	7	v
water	65:39	0:0	8	v
water	65:41	0:0	6	;
water	66:8	0:0	6	}
water	67:4	0:0	4	}
if	68:4	69:62	2	(s -> end_mb_y >= s -> start_mb_y)
cond	68:8	68:26	3	s -> end_mb_y >= s -> start_mb_y
water	68:8	0:0	4	s
op	68:9	0:0	4	->
water	68:11	0:0	4	end_mb_y
op	68:20	0:0	4	>=
water	68:23	0:0	4	s
op	68:24	0:0	4	->
water	68:26	0:0	4	start_mb_y
stmts	69:8	69:62	3	
call	69:8	69:61	4	ff_mpeg_draw_horiz_band
arg	69:32	69:33	5	s
water	69:32	0:0	6	s
arg	69:35	69:57	5	(s->end_mb_y-1)*16
water	69:35	0:0	6	(
water	69:36	0:0	6	s
op	69:37	0:0	6	->
water	69:39	0:0	6	end_mb_y
op	69:48	0:0	6	-
water	69:50	0:0	6	1
water	69:51	0:0	6	)
op	69:53	0:0	6	*
water	69:55	0:0	6	16
arg	69:59	69:61	5	16
water	69:59	0:0	6	16
water	69:62	0:0	4	;
call	70:4	71:65	2	ff_er_add_slice
arg	70:20	70:26	3	&s->er
op	70:20	0:0	4	&
water	70:21	0:0	4	s
op	70:22	0:0	4	->
water	70:24	0:0	4	er
arg	70:28	70:29	3	0
water	70:28	0:0	4	0
arg	70:31	70:61	3	s->start_mb_y<<v->field_mode
water	70:31	0:0	4	s
op	70:32	0:0	4	->
water	70:34	0:0	4	start_mb_y
op	70:45	0:0	4	<<
water	70:48	0:0	4	v
op	70:49	0:0	4	->
water	70:51	0:0	4	field_mode
arg	70:63	70:78	3	s->mb_width-1
water	70:63	0:0	4	s
op	70:64	0:0	4	->
water	70:66	0:0	4	mb_width
op	70:75	0:0	4	-
water	70:77	0:0	4	1
arg	71:20	71:54	3	(s->end_mb_y<<v->field_mode)-1
water	71:20	0:0	4	(
water	71:21	0:0	4	s
op	71:22	0:0	4	->
water	71:24	0:0	4	end_mb_y
op	71:33	0:0	4	<<
water	71:36	0:0	4	v
op	71:37	0:0	4	->
water	71:39	0:0	4	field_mode
water	71:49	0:0	4	)
op	71:51	0:0	4	-
water	71:53	0:0	4	1
arg	71:56	71:65	3	ER_MB_END
water	71:56	0:0	4	ER_MB_END
water	71:66	0:0	2	;
