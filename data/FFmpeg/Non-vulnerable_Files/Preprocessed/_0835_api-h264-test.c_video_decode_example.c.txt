func	1:0	107:0	0	static int	video_decode_example
params	1:31	0:0	1	
param	1:32	1:58	2	const char *	input_filename
stmnts	0:0	106:12	1	
decl	3:4	3:25	2	AVCodec	*codec
op	3:19	0:0	2	=
water	3:21	0:0	2	NULL
decl	4:4	4:49	2	AVCodecContext	*origin_ctx
op	4:31	0:0	2	=
water	4:33	0:0	2	NULL
water	4:37	0:0	2	,
decl	4:4	4:49	2	AVCodecContext	*ctx
op	4:43	0:0	2	=
water	4:45	0:0	2	NULL
decl	5:4	5:22	2	AVFrame	*fr
op	5:16	0:0	2	=
water	5:18	0:0	2	NULL
decl	6:4	6:31	2	uint8_t	*byte_buffer
op	6:25	0:0	2	=
water	6:27	0:0	2	NULL
decl	7:4	7:16	2	AVPacket	pkt
decl	8:4	8:35	2	AVFormatContext	*fmt_ctx
op	8:29	0:0	2	=
water	8:31	0:0	2	NULL
decl	9:4	9:31	2	int	number_of_written_bytes
decl	10:4	10:20	2	int	video_stream
decl	11:4	11:21	2	int	got_frame
op	11:18	0:0	2	=
water	11:20	0:0	2	0
decl	12:4	12:24	2	int	byte_buffer_size
decl	13:4	13:13	2	int	i
op	13:10	0:0	2	=
water	13:12	0:0	2	0
decl	14:4	14:14	2	int	result
decl	15:4	15:25	2	int	end_of_stream
op	15:22	0:0	2	=
water	15:24	0:0	2	0
water	16:4	0:0	2	result
op	16:11	0:0	2	=
call	16:13	16:69	2	avformat_open_input
arg	16:33	16:41	3	&fmt_ctx
op	16:33	0:0	4	&
water	16:34	0:0	4	fmt_ctx
arg	16:43	16:57	3	input_filename
water	16:43	0:0	4	input_filename
arg	16:59	16:63	3	NULL
water	16:59	0:0	4	NULL
arg	16:65	16:69	3	NULL
water	16:65	0:0	4	NULL
water	16:70	0:0	2	;
if	17:4	20:4	2	(result < 0)
cond	17:8	17:17	3	result < 0
water	17:8	0:0	4	result
op	17:15	0:0	4	<
water	17:17	0:0	4	0
stmts	17:20	20:4	3	
water	17:20	0:0	4	{
call	18:8	18:54	4	av_log
arg	18:15	18:19	5	NULL
water	18:15	0:0	6	NULL
arg	18:21	18:33	5	AV_LOG_ERROR
water	18:21	0:0	6	AV_LOG_ERROR
arg	18:35	18:54	5	"Can't open file\n"
water	18:35	0:0	6	"Can't open file\n"
water	18:55	0:0	4	;
return	19:8	19:21	4	result
water	19:15	0:0	5	result
water	20:4	0:0	4	}
water	21:4	0:0	2	result
op	21:11	0:0	2	=
call	21:13	21:52	2	avformat_find_stream_info
arg	21:39	21:46	3	fmt_ctx
water	21:39	0:0	4	fmt_ctx
arg	21:48	21:52	3	NULL
water	21:48	0:0	4	NULL
water	21:53	0:0	2	;
if	22:4	25:4	2	(result < 0)
cond	22:8	22:17	3	result < 0
water	22:8	0:0	4	result
op	22:15	0:0	4	<
water	22:17	0:0	4	0
stmts	22:20	25:4	3	
water	22:20	0:0	4	{
call	23:8	23:60	4	av_log
arg	23:15	23:19	5	NULL
water	23:15	0:0	6	NULL
arg	23:21	23:33	5	AV_LOG_ERROR
water	23:21	0:0	6	AV_LOG_ERROR
arg	23:35	23:60	5	"Can't get stream info\n"
water	23:35	0:0	6	"Can't get stream info\n"
water	23:61	0:0	4	;
return	24:8	24:21	4	result
water	24:15	0:0	5	result
water	25:4	0:0	4	}
water	26:4	0:0	2	video_stream
op	26:17	0:0	2	=
call	26:19	26:83	2	av_find_best_stream
arg	26:39	26:46	3	fmt_ctx
water	26:39	0:0	4	fmt_ctx
arg	26:48	26:66	3	AVMEDIA_TYPE_VIDEO
water	26:48	0:0	4	AVMEDIA_TYPE_VIDEO
arg	26:68	26:70	3	-1
op	26:68	0:0	4	-
water	26:69	0:0	4	1
arg	26:72	26:74	3	-1
op	26:72	0:0	4	-
water	26:73	0:0	4	1
arg	26:76	26:80	3	NULL
water	26:76	0:0	4	NULL
arg	26:82	26:83	3	0
water	26:82	0:0	4	0
water	26:84	0:0	2	;
if	27:4	30:4	2	(video_stream < 0)
cond	27:8	27:23	3	video_stream < 0
water	27:8	0:0	4	video_stream
op	27:21	0:0	4	<
water	27:23	0:0	4	0
stmts	27:26	30:4	3	
water	27:26	0:0	4	{
call	28:6	28:74	4	av_log
arg	28:13	28:17	5	NULL
water	28:13	0:0	6	NULL
arg	28:19	28:31	5	AV_LOG_ERROR
water	28:19	0:0	6	AV_LOG_ERROR
arg	28:33	28:74	5	"Can't find video stream in input file\n"
water	28:33	0:0	6	"Can't find video stream in input file\n"
water	28:75	0:0	4	;
return	29:6	29:15	4	-1
op	29:13	0:0	5	-
water	29:14	0:0	5	1
water	30:4	0:0	4	}
water	31:4	0:0	2	origin_ctx
op	31:15	0:0	2	=
water	31:17	0:0	2	fmt_ctx
op	31:24	0:0	2	->
water	31:26	0:0	2	streams
op	31:33	0:0	2	[
water	31:34	0:0	2	video_stream
op	31:46	0:0	2	]
op	31:47	0:0	2	->
water	31:49	0:0	2	codec
water	31:54	0:0	2	;
water	32:4	0:0	2	codec
op	32:10	0:0	2	=
call	32:12	32:53	2	avcodec_find_decoder
arg	32:33	32:53	3	origin_ctx->codec_id
water	32:33	0:0	4	origin_ctx
op	32:43	0:0	4	->
water	32:45	0:0	4	codec_id
water	32:54	0:0	2	;
if	33:4	36:4	2	(! codec)
cond	33:8	33:9	3	! codec
op	33:8	0:0	4	!
water	33:9	0:0	4	codec
stmts	33:16	36:4	3	
water	33:16	0:0	4	{
call	34:8	34:57	4	av_log
arg	34:15	34:19	5	NULL
water	34:15	0:0	6	NULL
arg	34:21	34:33	5	AV_LOG_ERROR
water	34:21	0:0	6	AV_LOG_ERROR
arg	34:35	34:57	5	"Can't find decoder\n"
water	34:35	0:0	6	"Can't find decoder\n"
water	34:58	0:0	4	;
return	35:8	35:17	4	-1
op	35:15	0:0	5	-
water	35:16	0:0	5	1
water	36:4	0:0	4	}
water	37:4	0:0	2	ctx
op	37:8	0:0	2	=
call	37:10	37:38	2	avcodec_alloc_context3
arg	37:33	37:38	3	codec
water	37:33	0:0	4	codec
water	37:39	0:0	2	;
if	38:4	41:4	2	(! ctx)
cond	38:8	38:9	3	! ctx
op	38:8	0:0	4	!
water	38:9	0:0	4	ctx
stmts	38:14	41:4	3	
water	38:14	0:0	4	{
call	39:8	39:69	4	av_log
arg	39:15	39:19	5	NULL
water	39:15	0:0	6	NULL
arg	39:21	39:33	5	AV_LOG_ERROR
water	39:21	0:0	6	AV_LOG_ERROR
arg	39:35	39:69	5	"Can't allocate decoder context\n"
water	39:35	0:0	6	"Can't allocate decoder context\n"
water	39:70	0:0	4	;
return	40:8	40:30	4	AVERROR(ENOMEM)
call	40:15	40:29	5	AVERROR
arg	40:23	40:29	6	ENOMEM
water	40:23	0:0	7	ENOMEM
water	41:4	0:0	4	}
water	42:4	0:0	2	result
op	42:11	0:0	2	=
call	42:13	42:49	2	avcodec_copy_context
arg	42:34	42:37	3	ctx
water	42:34	0:0	4	ctx
arg	42:39	42:49	3	origin_ctx
water	42:39	0:0	4	origin_ctx
water	42:50	0:0	2	;
if	43:4	46:4	2	(result)
cond	43:8	43:8	3	result
water	43:8	0:0	4	result
stmts	43:16	46:4	3	
water	43:16	0:0	4	{
call	44:8	44:65	4	av_log
arg	44:15	44:19	5	NULL
water	44:15	0:0	6	NULL
arg	44:21	44:33	5	AV_LOG_ERROR
water	44:21	0:0	6	AV_LOG_ERROR
arg	44:35	44:65	5	"Can't copy decoder context\n"
water	44:35	0:0	6	"Can't copy decoder context\n"
water	44:66	0:0	4	;
return	45:8	45:21	4	result
water	45:15	0:0	5	result
water	46:4	0:0	4	}
water	47:4	0:0	2	result
op	47:11	0:0	2	=
call	47:13	47:43	2	avcodec_open2
arg	47:27	47:30	3	ctx
water	47:27	0:0	4	ctx
arg	47:32	47:37	3	codec
water	47:32	0:0	4	codec
arg	47:39	47:43	3	NULL
water	47:39	0:0	4	NULL
water	47:44	0:0	2	;
if	48:4	51:4	2	(result < 0)
cond	48:8	48:17	3	result < 0
water	48:8	0:0	4	result
op	48:15	0:0	4	<
water	48:17	0:0	4	0
stmts	48:20	51:4	3	
water	48:20	0:0	4	{
call	49:8	49:56	4	av_log
arg	49:15	49:18	5	ctx
water	49:15	0:0	6	ctx
arg	49:20	49:32	5	AV_LOG_ERROR
water	49:20	0:0	6	AV_LOG_ERROR
arg	49:34	49:56	5	"Can't open decoder\n"
water	49:34	0:0	6	"Can't open decoder\n"
water	49:57	0:0	4	;
return	50:8	50:21	4	result
water	50:15	0:0	5	result
water	51:4	0:0	4	}
water	52:4	0:0	2	fr
op	52:7	0:0	2	=
call	52:9	52:24	2	av_frame_alloc
water	52:25	0:0	2	;
if	53:4	56:4	2	(! fr)
cond	53:8	53:9	3	! fr
op	53:8	0:0	4	!
water	53:9	0:0	4	fr
stmts	53:13	56:4	3	
water	53:13	0:0	4	{
call	54:8	54:59	4	av_log
arg	54:15	54:19	5	NULL
water	54:15	0:0	6	NULL
arg	54:21	54:33	5	AV_LOG_ERROR
water	54:21	0:0	6	AV_LOG_ERROR
arg	54:35	54:59	5	"Can't allocate frame\n"
water	54:35	0:0	6	"Can't allocate frame\n"
water	54:60	0:0	4	;
return	55:8	55:30	4	AVERROR(ENOMEM)
call	55:15	55:29	5	AVERROR
arg	55:23	55:29	6	ENOMEM
water	55:23	0:0	7	ENOMEM
water	56:4	0:0	4	}
water	57:4	0:0	2	byte_buffer_size
op	57:21	0:0	2	=
call	57:23	57:89	2	av_image_get_buffer_size
arg	57:48	57:60	3	ctx->pix_fmt
water	57:48	0:0	4	ctx
op	57:51	0:0	4	->
water	57:53	0:0	4	pix_fmt
arg	57:62	57:72	3	ctx->width
water	57:62	0:0	4	ctx
op	57:65	0:0	4	->
water	57:67	0:0	4	width
arg	57:74	57:85	3	ctx->height
water	57:74	0:0	4	ctx
op	57:77	0:0	4	->
water	57:79	0:0	4	height
arg	57:87	57:89	3	16
water	57:87	0:0	4	16
water	57:90	0:0	2	;
water	58:4	0:0	2	byte_buffer
op	58:16	0:0	2	=
call	58:18	58:44	2	av_malloc
arg	58:28	58:44	3	byte_buffer_size
water	58:28	0:0	4	byte_buffer_size
water	58:45	0:0	2	;
if	59:4	62:4	2	(! byte_buffer)
cond	59:8	59:9	3	! byte_buffer
op	59:8	0:0	4	!
water	59:9	0:0	4	byte_buffer
stmts	59:22	62:4	3	
water	59:22	0:0	4	{
call	60:8	60:60	4	av_log
arg	60:15	60:19	5	NULL
water	60:15	0:0	6	NULL
arg	60:21	60:33	5	AV_LOG_ERROR
water	60:21	0:0	6	AV_LOG_ERROR
arg	60:35	60:60	5	"Can't allocate buffer\n"
water	60:35	0:0	6	"Can't allocate buffer\n"
water	60:61	0:0	4	;
return	61:8	61:30	4	AVERROR(ENOMEM)
call	61:15	61:29	5	AVERROR
arg	61:23	61:29	6	ENOMEM
water	61:23	0:0	7	ENOMEM
water	62:4	0:0	4	}
call	63:4	63:136	2	printf
arg	63:11	63:28	3	"#tb %d: %d/%d\n"
water	63:11	0:0	4	"#tb %d: %d/%d\n"
arg	63:30	63:42	3	video_stream
water	63:30	0:0	4	video_stream
arg	63:44	63:89	3	fmt_ctx->streams[video_stream]->time_base.num
water	63:44	0:0	4	fmt_ctx
op	63:51	0:0	4	->
water	63:53	0:0	4	streams
op	63:60	0:0	4	[
water	63:61	0:0	4	video_stream
op	63:73	0:0	4	]
op	63:74	0:0	4	->
water	63:76	0:0	4	time_base
op	63:85	0:0	4	.
water	63:86	0:0	4	num
arg	63:91	63:136	3	fmt_ctx->streams[video_stream]->time_base.den
water	63:91	0:0	4	fmt_ctx
op	63:98	0:0	4	->
water	63:100	0:0	4	streams
op	63:107	0:0	4	[
water	63:108	0:0	4	video_stream
op	63:120	0:0	4	]
op	63:121	0:0	4	->
water	63:123	0:0	4	time_base
op	63:132	0:0	4	.
water	63:133	0:0	4	den
water	63:137	0:0	2	;
water	64:4	0:0	2	i
op	64:6	0:0	2	=
water	64:8	0:0	2	0
water	64:9	0:0	2	;
call	65:4	65:23	2	av_init_packet
arg	65:19	65:23	3	&pkt
op	65:19	0:0	4	&
water	65:20	0:0	4	pkt
water	65:24	0:0	2	;
do	66:4	99:4	2	(! end_of_stream || got_frame)
cond	99:13	99:31	3	! end_of_stream || got_frame
op	99:13	0:0	4	!
water	99:14	0:0	4	end_of_stream
op	99:28	0:0	4	||
water	99:31	0:0	4	got_frame
stmts	66:7	99:4	3	
water	66:7	0:0	4	{
if	67:8	69:33	4	(! end_of_stream)
cond	67:12	67:13	5	! end_of_stream
op	67:12	0:0	6	!
water	67:13	0:0	6	end_of_stream
stmts	68:12	69:33	5	
if	68:12	69:33	6	(av_read_frame (fmt_ctx ,& pkt ) < 0)
cond	68:16	68:47	7	av_read_frame (fmt_ctx ,& pkt ) < 0
call	68:16	68:43	8	av_read_frame
arg	68:30	68:37	9	fmt_ctx
water	68:30	0:0	10	fmt_ctx
arg	68:39	68:43	9	&pkt
op	68:39	0:0	10	&
water	68:40	0:0	10	pkt
op	68:45	0:0	8	<
water	68:47	0:0	8	0
stmts	69:16	69:33	7	
water	69:16	0:0	8	end_of_stream
op	69:30	0:0	8	=
water	69:32	0:0	8	1
water	69:33	0:0	8	;
if	70:8	73:8	4	(end_of_stream)
cond	70:12	70:12	5	end_of_stream
water	70:12	0:0	6	end_of_stream
stmts	70:27	73:8	5	
water	70:27	0:0	6	{
water	71:12	0:0	6	pkt
op	71:15	0:0	6	.
water	71:16	0:0	6	data
op	71:21	0:0	6	=
water	71:23	0:0	6	NULL
water	71:27	0:0	6	;
water	72:12	0:0	6	pkt
op	72:15	0:0	6	.
water	72:16	0:0	6	size
op	72:21	0:0	6	=
water	72:23	0:0	6	0
water	72:24	0:0	6	;
water	73:8	0:0	6	}
if	74:8	97:8	4	(pkt . stream_index == video_stream || end_of_stream)
cond	74:12	74:48	5	pkt . stream_index == video_stream || end_of_stream
water	74:12	0:0	6	pkt
op	74:15	0:0	6	.
water	74:16	0:0	6	stream_index
op	74:29	0:0	6	==
water	74:32	0:0	6	video_stream
op	74:45	0:0	6	||
water	74:48	0:0	6	end_of_stream
stmts	74:63	97:8	5	
water	74:63	0:0	6	{
water	75:12	0:0	6	got_frame
op	75:22	0:0	6	=
water	75:24	0:0	6	0
water	75:25	0:0	6	;
if	76:12	77:37	6	(pkt . pts == AV_NOPTS_VALUE)
cond	76:16	76:27	7	pkt . pts == AV_NOPTS_VALUE
water	76:16	0:0	8	pkt
op	76:19	0:0	8	.
water	76:20	0:0	8	pts
op	76:24	0:0	8	==
water	76:27	0:0	8	AV_NOPTS_VALUE
stmts	77:16	77:37	7	
water	77:16	0:0	8	pkt
op	77:19	0:0	8	.
water	77:20	0:0	8	pts
op	77:24	0:0	8	=
water	77:26	0:0	8	pkt
op	77:29	0:0	8	.
water	77:30	0:0	8	dts
op	77:34	0:0	8	=
water	77:36	0:0	8	i
water	77:37	0:0	8	;
water	78:12	0:0	6	result
op	78:19	0:0	6	=
call	78:21	78:68	6	avcodec_decode_video2
arg	78:43	78:46	7	ctx
water	78:43	0:0	8	ctx
arg	78:48	78:50	7	fr
water	78:48	0:0	8	fr
arg	78:52	78:62	7	&got_frame
op	78:52	0:0	8	&
water	78:53	0:0	8	got_frame
arg	78:64	78:68	7	&pkt
op	78:64	0:0	8	&
water	78:65	0:0	8	pkt
water	78:69	0:0	6	;
if	79:12	82:12	6	(result < 0)
cond	79:16	79:25	7	result < 0
water	79:16	0:0	8	result
op	79:23	0:0	8	<
water	79:25	0:0	8	0
stmts	79:28	82:12	7	
water	79:28	0:0	8	{
call	80:16	80:67	8	av_log
arg	80:23	80:27	9	NULL
water	80:23	0:0	10	NULL
arg	80:29	80:41	9	AV_LOG_ERROR
water	80:29	0:0	10	AV_LOG_ERROR
arg	80:43	80:67	9	"Error decoding frame\n"
water	80:43	0:0	10	"Error decoding frame\n"
water	80:68	0:0	8	;
return	81:16	81:29	8	result
water	81:23	0:0	9	result
water	82:12	0:0	8	}
if	83:12	94:12	6	(got_frame)
cond	83:16	83:16	7	got_frame
water	83:16	0:0	8	got_frame
stmts	83:27	94:12	7	
water	83:27	0:0	8	{
water	84:16	0:0	8	number_of_written_bytes
op	84:40	0:0	8	=
call	84:42	86:80	8	av_image_copy_to_buffer
arg	84:66	84:77	9	byte_buffer
water	84:66	0:0	10	byte_buffer
arg	84:79	84:95	9	byte_buffer_size
water	84:79	0:0	10	byte_buffer_size
arg	85:40	85:72	9	(constuint8_t*const*)fr->data
water	85:40	0:0	10	(
water	85:41	0:0	10	const
water	85:47	0:0	10	uint8_t
op	85:54	0:0	10	*
water	85:56	0:0	10	const
op	85:62	0:0	10	*
water	85:63	0:0	10	)
water	85:64	0:0	10	fr
op	85:66	0:0	10	->
water	85:68	0:0	10	data
arg	85:74	85:99	9	(constint*)fr->linesize
water	85:74	0:0	10	(
water	85:75	0:0	10	const
water	85:81	0:0	10	int
op	85:84	0:0	10	*
water	85:85	0:0	10	)
water	85:87	0:0	10	fr
op	85:89	0:0	10	->
water	85:91	0:0	10	linesize
arg	86:40	86:52	9	ctx->pix_fmt
water	86:40	0:0	10	ctx
op	86:43	0:0	10	->
water	86:45	0:0	10	pix_fmt
arg	86:54	86:64	9	ctx->width
water	86:54	0:0	10	ctx
op	86:57	0:0	10	->
water	86:59	0:0	10	width
arg	86:66	86:77	9	ctx->height
water	86:66	0:0	10	ctx
op	86:69	0:0	10	->
water	86:71	0:0	10	height
arg	86:79	86:80	9	1
water	86:79	0:0	10	1
water	86:81	0:0	8	;
if	87:16	90:16	8	(number_of_written_bytes < 0)
cond	87:20	87:46	9	number_of_written_bytes < 0
water	87:20	0:0	10	number_of_written_bytes
op	87:44	0:0	10	<
water	87:46	0:0	10	0
stmts	87:49	90:16	9	
water	87:49	0:0	10	{
call	88:20	88:77	10	av_log
arg	88:27	88:31	11	NULL
water	88:27	0:0	12	NULL
arg	88:33	88:45	11	AV_LOG_ERROR
water	88:33	0:0	12	AV_LOG_ERROR
arg	88:47	88:77	11	"Can't copy image to buffer\n"
water	88:47	0:0	12	"Can't copy image to buffer\n"
water	88:78	0:0	10	;
return	89:20	89:50	10	number_of_written_bytes
water	89:27	0:0	11	number_of_written_bytes
water	90:16	0:0	10	}
call	91:16	93:123	8	printf
arg	91:23	91:81	9	"%d, %10"PRId64", %10"PRId64", %8"PRId64", %8d, 0x%08lx\n"
water	91:23	0:0	10	"%d, %10"
water	91:32	0:0	10	PRId64
water	91:38	0:0	10	", %10"
water	91:45	0:0	10	PRId64
water	91:51	0:0	10	", %8"
water	91:57	0:0	10	PRId64
water	91:63	0:0	10	", %8d, 0x%08lx\n"
arg	91:83	91:95	9	video_stream
water	91:83	0:0	10	video_stream
arg	92:24	92:35	9	fr->pkt_pts
water	92:24	0:0	10	fr
op	92:26	0:0	10	->
water	92:28	0:0	10	pkt_pts
arg	92:37	92:48	9	fr->pkt_dts
water	92:37	0:0	10	fr
op	92:39	0:0	10	->
water	92:41	0:0	10	pkt_dts
arg	92:50	92:79	9	av_frame_get_pkt_duration(fr)
call	92:50	92:78	10	av_frame_get_pkt_duration
arg	92:76	92:78	11	fr
water	92:76	0:0	12	fr
arg	93:24	93:47	9	number_of_written_bytes
water	93:24	0:0	10	number_of_written_bytes
arg	93:49	93:123	9	av_adler32_update(0,(constuint8_t*)byte_buffer,number_of_written_bytes)
call	93:49	93:122	10	av_adler32_update
arg	93:67	93:68	11	0
water	93:67	0:0	12	0
arg	93:70	93:97	11	(constuint8_t*)byte_buffer
water	93:70	0:0	12	(
water	93:71	0:0	12	const
water	93:77	0:0	12	uint8_t
op	93:84	0:0	12	*
water	93:85	0:0	12	)
water	93:86	0:0	12	byte_buffer
arg	93:99	93:122	11	number_of_written_bytes
water	93:99	0:0	12	number_of_written_bytes
water	93:124	0:0	8	;
water	94:12	0:0	8	}
call	95:12	95:31	6	av_free_packet
arg	95:27	95:31	7	&pkt
op	95:27	0:0	8	&
water	95:28	0:0	8	pkt
water	95:32	0:0	6	;
call	96:12	96:31	6	av_init_packet
arg	96:27	96:31	7	&pkt
op	96:27	0:0	8	&
water	96:28	0:0	8	pkt
water	96:32	0:0	6	;
water	97:8	0:0	6	}
water	98:8	0:0	4	i
op	98:9	0:0	4	++
water	98:11	0:0	4	;
water	99:4	0:0	4	}
water	99:41	0:0	2	;
call	100:4	100:23	2	av_free_packet
arg	100:19	100:23	3	&pkt
op	100:19	0:0	4	&
water	100:20	0:0	4	pkt
water	100:24	0:0	2	;
call	101:4	101:21	2	av_frame_free
arg	101:18	101:21	3	&fr
op	101:18	0:0	4	&
water	101:19	0:0	4	fr
water	101:22	0:0	2	;
call	102:4	102:21	2	avcodec_close
arg	102:18	102:21	3	ctx
water	102:18	0:0	4	ctx
water	102:22	0:0	2	;
call	103:4	103:33	2	avformat_close_input
arg	103:25	103:33	3	&fmt_ctx
op	103:25	0:0	4	&
water	103:26	0:0	4	fmt_ctx
water	103:34	0:0	2	;
call	104:4	104:29	2	avcodec_free_context
arg	104:25	104:29	3	&ctx
op	104:25	0:0	4	&
water	104:26	0:0	4	ctx
water	104:30	0:0	2	;
call	105:4	105:25	2	av_freep
arg	105:13	105:25	3	&byte_buffer
op	105:13	0:0	4	&
water	105:14	0:0	4	byte_buffer
water	105:26	0:0	2	;
return	106:4	106:12	2	0
water	106:11	0:0	3	0
