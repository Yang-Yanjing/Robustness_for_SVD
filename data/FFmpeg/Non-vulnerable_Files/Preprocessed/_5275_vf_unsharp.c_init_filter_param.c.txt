func	1:0	18:0	0	static int	init_filter_param
params	1:28	0:0	1	
param	1:29	1:49	2	AVFilterContext *	ctx
param	1:51	1:73	2	UnsharpFilterParam *	fp
param	1:75	1:98	2	const char *	effect_type
param	1:100	1:109	2	int	width
stmnts	0:0	17:12	1	
decl	3:4	3:9	2	int	z
decl	4:4	4:87	2	const char	*effect
op	4:23	0:0	2	=
water	4:25	0:0	2	fp
op	4:27	0:0	2	->
water	4:29	0:0	2	amount
op	4:36	0:0	2	==
water	4:39	0:0	2	0
water	4:41	0:0	2	?
water	4:43	0:0	2	"none"
water	4:50	0:0	2	:
water	4:52	0:0	2	fp
op	4:54	0:0	2	->
water	4:56	0:0	2	amount
op	4:63	0:0	2	<
water	4:65	0:0	2	0
water	4:67	0:0	2	?
water	4:69	0:0	2	"blur"
water	4:76	0:0	2	:
water	4:78	0:0	2	"sharpen"
if	5:4	10:4	2	(! ( fp -> msize_x & fp -> msize_y & 1 ))
cond	5:9	5:40	3	! ( fp -> msize_x & fp -> msize_y & 1 )
op	5:9	0:0	4	!
water	5:10	0:0	4	(
water	5:11	0:0	4	fp
op	5:13	0:0	4	->
water	5:15	0:0	4	msize_x
op	5:23	0:0	4	&
water	5:25	0:0	4	fp
op	5:27	0:0	4	->
water	5:29	0:0	4	msize_y
op	5:37	0:0	4	&
water	5:39	0:0	4	1
water	5:40	0:0	4	)
stmts	5:43	10:4	3	
water	5:43	0:0	4	{
call	6:8	8:52	4	av_log
arg	6:15	6:18	5	ctx
water	6:15	0:0	6	ctx
arg	6:20	6:32	5	AV_LOG_ERROR
water	6:20	0:0	6	AV_LOG_ERROR
arg	7:15	7:61	5	"Invalid even size for %s matrix size %dx%d\n"
water	7:15	0:0	6	"Invalid even size for %s matrix size %dx%d\n"
arg	8:15	8:26	5	effect_type
water	8:15	0:0	6	effect_type
arg	8:28	8:39	5	fp->msize_x
water	8:28	0:0	6	fp
op	8:30	0:0	6	->
water	8:32	0:0	6	msize_x
arg	8:41	8:52	5	fp->msize_y
water	8:41	0:0	6	fp
op	8:43	0:0	6	->
water	8:45	0:0	6	msize_y
water	8:53	0:0	4	;
return	9:8	9:30	4	AVERROR(EINVAL)
call	9:15	9:29	5	AVERROR
arg	9:23	9:29	6	EINVAL
water	9:23	0:0	7	EINVAL
water	10:4	0:0	4	}
call	11:4	12:78	2	av_log
arg	11:11	11:14	3	ctx
water	11:11	0:0	4	ctx
arg	11:16	11:30	3	AV_LOG_VERBOSE
water	11:16	0:0	4	AV_LOG_VERBOSE
arg	11:32	11:88	3	"effect:%s type:%s msize_x:%d msize_y:%d amount:%0.2f\n"
water	11:32	0:0	4	"effect:%s type:%s msize_x:%d msize_y:%d amount:%0.2f\n"
arg	12:11	12:17	3	effect
water	12:11	0:0	4	effect
arg	12:19	12:30	3	effect_type
water	12:19	0:0	4	effect_type
arg	12:32	12:43	3	fp->msize_x
water	12:32	0:0	4	fp
op	12:34	0:0	4	->
water	12:36	0:0	4	msize_x
arg	12:45	12:56	3	fp->msize_y
water	12:45	0:0	4	fp
op	12:47	0:0	4	->
water	12:49	0:0	4	msize_y
arg	12:58	12:78	3	fp->amount/65535.0
water	12:58	0:0	4	fp
op	12:60	0:0	4	->
water	12:62	0:0	4	amount
op	12:69	0:0	4	/
water	12:71	0:0	4	65535
op	12:76	0:0	4	.
water	12:77	0:0	4	0
water	12:79	0:0	2	;
for	13:4	16:34	2	(z = 0 ;z < 2 * fp -> steps_y;z ++)
forinit	13:9	13:14	3	z = 0 ;
water	13:9	0:0	4	z
op	13:11	0:0	4	=
water	13:13	0:0	4	0
water	13:14	0:0	4	;
cond	13:16	13:28	3	z < 2 * fp -> steps_y
water	13:16	0:0	4	z
op	13:18	0:0	4	<
water	13:20	0:0	4	2
op	13:22	0:0	4	*
water	13:24	0:0	4	fp
op	13:26	0:0	4	->
water	13:28	0:0	4	steps_y
forexpr	13:37	13:38	3	z ++
water	13:37	0:0	4	z
op	13:38	0:0	4	++
stmts	14:8	16:34	3	
if	14:8	16:34	4	(! ( fp -> sc [ z ] =av_malloc_array (width + 2 * fp -> steps_x ,sizeof ( * ( fp -> sc [ z ] ) ) ) ))
cond	14:12	15:63	5	! ( fp -> sc [ z ] =av_malloc_array (width + 2 * fp -> steps_x ,sizeof ( * ( fp -> sc [ z ] ) ) ) )
op	14:12	0:0	6	!
water	14:13	0:0	6	(
water	14:14	0:0	6	fp
op	14:16	0:0	6	->
water	14:18	0:0	6	sc
op	14:20	0:0	6	[
water	14:21	0:0	6	z
op	14:22	0:0	6	]
op	14:24	0:0	6	=
call	14:26	15:62	6	av_malloc_array
arg	14:42	14:65	7	width+2*fp->steps_x
water	14:42	0:0	8	width
op	14:48	0:0	8	+
water	14:50	0:0	8	2
op	14:52	0:0	8	*
water	14:54	0:0	8	fp
op	14:56	0:0	8	->
water	14:58	0:0	8	steps_x
arg	15:42	15:62	7	sizeof(*(fp->sc[z]))
op	15:42	0:0	8	sizeof
water	15:48	0:0	8	(
op	15:49	0:0	8	*
water	15:50	0:0	8	(
water	15:51	0:0	8	fp
op	15:53	0:0	8	->
water	15:55	0:0	8	sc
op	15:57	0:0	8	[
water	15:58	0:0	8	z
op	15:59	0:0	8	]
water	15:60	0:0	8	)
water	15:61	0:0	8	)
water	15:63	0:0	6	)
stmts	16:12	16:34	5	
return	16:12	16:34	6	AVERROR(ENOMEM)
call	16:19	16:33	7	AVERROR
arg	16:27	16:33	8	ENOMEM
water	16:27	0:0	9	ENOMEM
return	17:4	17:12	2	0
water	17:11	0:0	3	0
