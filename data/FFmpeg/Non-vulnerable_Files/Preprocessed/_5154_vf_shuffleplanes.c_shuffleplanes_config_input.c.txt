func	1:15	37:0	0	int	shuffleplanes_config_input
params	1:45	0:0	1	
param	1:46	1:66	2	AVFilterLink *	inlink
stmnts	0:0	36:12	1	
decl	3:4	3:41	2	AVFilterContext	*ctx
op	3:28	0:0	2	=
water	3:30	0:0	2	inlink
op	3:36	0:0	2	->
water	3:38	0:0	2	dst
decl	4:4	4:39	2	ShufflePlanesContext	*s
op	4:28	0:0	2	=
water	4:30	0:0	2	ctx
op	4:33	0:0	2	->
water	4:35	0:0	2	priv
decl	5:4	5:34	2	const AVPixFmtDescriptor	*desc
decl	6:4	6:23	2	int	used[4]
op	6:16	0:0	2	=
water	6:18	0:0	2	{
water	6:20	0:0	2	0
water	6:22	0:0	2	}
decl	7:4	7:9	2	int	i
water	8:4	0:0	2	s
op	8:5	0:0	2	->
water	8:7	0:0	2	copy
op	8:14	0:0	2	=
water	8:16	0:0	2	0
water	8:17	0:0	2	;
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	planes
op	9:14	0:0	2	=
call	9:16	9:54	2	av_pix_fmt_count_planes
arg	9:40	9:54	3	inlink->format
water	9:40	0:0	4	inlink
op	9:46	0:0	4	->
water	9:48	0:0	4	format
water	9:55	0:0	2	;
water	10:4	0:0	2	desc
op	10:14	0:0	2	=
call	10:16	10:50	2	av_pix_fmt_desc_get
arg	10:36	10:50	3	inlink->format
water	10:36	0:0	4	inlink
op	10:42	0:0	4	->
water	10:44	0:0	4	format
water	10:51	0:0	2	;
for	11:4	35:4	2	(i = 0 ;i < s -> planes;i ++)
forinit	11:9	11:14	3	i = 0 ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:23	3	i < s -> planes
water	11:16	0:0	4	i
op	11:18	0:0	4	<
water	11:20	0:0	4	s
op	11:21	0:0	4	->
water	11:23	0:0	4	planes
forexpr	11:31	11:32	3	i ++
water	11:31	0:0	4	i
op	11:32	0:0	4	++
stmts	11:36	35:4	3	
water	11:36	0:0	4	{
if	12:8	17:8	4	(s -> map [ i ] >= s -> planes)
cond	12:12	12:28	5	s -> map [ i ] >= s -> planes
water	12:12	0:0	6	s
op	12:13	0:0	6	->
water	12:15	0:0	6	map
op	12:18	0:0	6	[
water	12:19	0:0	6	i
op	12:20	0:0	6	]
op	12:22	0:0	6	>=
water	12:25	0:0	6	s
op	12:26	0:0	6	->
water	12:28	0:0	6	planes
stmts	12:36	17:8	5	
water	12:36	0:0	6	{
call	13:12	15:31	6	av_log
arg	13:19	13:22	7	ctx
water	13:19	0:0	8	ctx
arg	13:24	13:36	7	AV_LOG_ERROR
water	13:24	0:0	8	AV_LOG_ERROR
arg	14:19	14:79	7	"Non-existing input plane #%d mapped to output plane #%d.\n"
water	14:19	0:0	8	"Non-existing input plane #%d mapped to output plane #%d.\n"
arg	15:19	15:28	7	s->map[i]
water	15:19	0:0	8	s
op	15:20	0:0	8	->
water	15:22	0:0	8	map
op	15:25	0:0	8	[
water	15:26	0:0	8	i
op	15:27	0:0	8	]
arg	15:30	15:31	7	i
water	15:30	0:0	8	i
water	15:32	0:0	6	;
return	16:12	16:34	6	AVERROR(EINVAL)
call	16:19	16:33	7	AVERROR
arg	16:27	16:33	8	EINVAL
water	16:27	0:0	9	EINVAL
water	17:8	0:0	6	}
if	18:8	24:8	4	(( desc -> log2_chroma_h || desc -> log2_chroma_w ) && ( i == 1 || i == 2 ) != ( s -> map [ i ] == 1 || s -> map [ i ] == 2 ))
cond	18:12	19:67	5	( desc -> log2_chroma_h || desc -> log2_chroma_w ) && ( i == 1 || i == 2 ) != ( s -> map [ i ] == 1 || s -> map [ i ] == 2 )
water	18:12	0:0	6	(
water	18:13	0:0	6	desc
op	18:17	0:0	6	->
water	18:19	0:0	6	log2_chroma_h
op	18:33	0:0	6	||
water	18:36	0:0	6	desc
op	18:40	0:0	6	->
water	18:42	0:0	6	log2_chroma_w
water	18:55	0:0	6	)
op	18:57	0:0	6	&&
water	19:12	0:0	6	(
water	19:13	0:0	6	i
op	19:15	0:0	6	==
water	19:18	0:0	6	1
op	19:20	0:0	6	||
water	19:23	0:0	6	i
op	19:25	0:0	6	==
water	19:28	0:0	6	2
water	19:29	0:0	6	)
op	19:31	0:0	6	!=
water	19:34	0:0	6	(
water	19:35	0:0	6	s
op	19:36	0:0	6	->
water	19:38	0:0	6	map
op	19:41	0:0	6	[
water	19:42	0:0	6	i
op	19:43	0:0	6	]
op	19:45	0:0	6	==
water	19:48	0:0	6	1
op	19:50	0:0	6	||
water	19:53	0:0	6	s
op	19:54	0:0	6	->
water	19:56	0:0	6	map
op	19:59	0:0	6	[
water	19:60	0:0	6	i
op	19:61	0:0	6	]
op	19:63	0:0	6	==
water	19:66	0:0	6	2
water	19:67	0:0	6	)
stmts	19:70	24:8	5	
water	19:70	0:0	6	{
call	20:12	22:38	6	av_log
arg	20:19	20:22	7	ctx
water	20:19	0:0	8	ctx
arg	20:24	20:36	7	AV_LOG_ERROR
water	20:24	0:0	8	AV_LOG_ERROR
arg	21:19	22:38	7	"Cannot map between a subsampled chroma plane and a luma ""or alpha plane.\n"
water	21:19	0:0	8	"Cannot map between a subsampled chroma plane and a luma "
water	22:19	0:0	8	"or alpha plane.\n"
water	22:39	0:0	6	;
return	23:12	23:34	6	AVERROR(EINVAL)
call	23:19	23:33	7	AVERROR
arg	23:27	23:33	8	EINVAL
water	23:27	0:0	9	EINVAL
water	24:8	0:0	6	}
if	25:8	31:8	4	(( desc -> flags & AV_PIX_FMT_FLAG_PAL || desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL ) && ( i == 1 ) != ( s -> map [ i ] == 1 ))
cond	25:12	27:39	5	( desc -> flags & AV_PIX_FMT_FLAG_PAL || desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL ) && ( i == 1 ) != ( s -> map [ i ] == 1 )
water	25:12	0:0	6	(
water	25:13	0:0	6	desc
op	25:17	0:0	6	->
water	25:19	0:0	6	flags
op	25:25	0:0	6	&
water	25:27	0:0	6	AV_PIX_FMT_FLAG_PAL
op	25:47	0:0	6	||
water	26:13	0:0	6	desc
op	26:17	0:0	6	->
water	26:19	0:0	6	flags
op	26:25	0:0	6	&
water	26:27	0:0	6	AV_PIX_FMT_FLAG_PSEUDOPAL
water	26:52	0:0	6	)
op	26:54	0:0	6	&&
water	27:12	0:0	6	(
water	27:13	0:0	6	i
op	27:15	0:0	6	==
water	27:18	0:0	6	1
water	27:19	0:0	6	)
op	27:21	0:0	6	!=
water	27:24	0:0	6	(
water	27:25	0:0	6	s
op	27:26	0:0	6	->
water	27:28	0:0	6	map
op	27:31	0:0	6	[
water	27:32	0:0	6	i
op	27:33	0:0	6	]
op	27:35	0:0	6	==
water	27:38	0:0	6	1
water	27:39	0:0	6	)
stmts	27:42	31:8	5	
water	27:42	0:0	6	{
call	28:12	29:75	6	av_log
arg	28:19	28:22	7	ctx
water	28:19	0:0	8	ctx
arg	28:24	28:36	7	AV_LOG_ERROR
water	28:24	0:0	8	AV_LOG_ERROR
arg	29:19	29:75	7	"Cannot map between a palette plane and a data plane.\n"
water	29:19	0:0	8	"Cannot map between a palette plane and a data plane.\n"
water	29:76	0:0	6	;
return	30:12	30:34	6	AVERROR(EINVAL)
call	30:19	30:33	7	AVERROR
arg	30:27	30:33	8	EINVAL
water	30:27	0:0	9	EINVAL
water	31:8	0:0	6	}
if	32:8	33:23	4	(used [ s -> map [ i ] ])
cond	32:12	32:26	5	used [ s -> map [ i ] ]
water	32:12	0:0	6	used
op	32:16	0:0	6	[
water	32:17	0:0	6	s
op	32:18	0:0	6	->
water	32:20	0:0	6	map
op	32:23	0:0	6	[
water	32:24	0:0	6	i
op	32:25	0:0	6	]
op	32:26	0:0	6	]
stmts	33:12	33:23	5	
water	33:12	0:0	6	s
op	33:13	0:0	6	->
water	33:15	0:0	6	copy
op	33:20	0:0	6	=
water	33:22	0:0	6	1
water	33:23	0:0	6	;
water	34:8	0:0	4	used
op	34:12	0:0	4	[
water	34:13	0:0	4	s
op	34:14	0:0	4	->
water	34:16	0:0	4	map
op	34:19	0:0	4	[
water	34:20	0:0	4	i
op	34:21	0:0	4	]
op	34:22	0:0	4	]
op	34:23	0:0	4	++
water	34:25	0:0	4	;
water	35:4	0:0	4	}
return	36:4	36:12	2	0
water	36:11	0:0	3	0
