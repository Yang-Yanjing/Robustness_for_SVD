func	1:0	164:0	0	static int	vc1_decode_i_block_adv
params	1:33	0:0	1	
param	1:34	1:47	2	VC1Context *	v
param	1:49	1:66	2	int16_t	block[64]
param	1:68	1:73	2	int	n
param	2:34	2:43	2	int	coded
param	2:45	2:58	2	int	codingset
param	2:60	2:70	2	int	mquant
stmnts	0:0	163:12	1	
decl	4:4	4:32	2	GetBitContext	*gb
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	v
op	4:26	0:0	2	->
water	4:28	0:0	2	s
op	4:29	0:0	2	.
water	4:30	0:0	2	gb
decl	5:4	5:29	2	MpegEncContext	*s
op	5:22	0:0	2	=
op	5:24	0:0	2	&
water	5:25	0:0	2	v
op	5:26	0:0	2	->
water	5:28	0:0	2	s
decl	6:4	6:23	2	int	dc_pred_dir
op	6:20	0:0	2	=
water	6:22	0:0	2	0
decl	7:4	7:9	2	int	i
decl	8:4	8:26	2	int16_t	*dc_val
op	8:20	0:0	2	=
water	8:22	0:0	2	NULL
decl	9:4	9:29	2	int16_t	*ac_val
water	9:19	0:0	2	,
decl	9:4	9:29	2	int16_t	*ac_val2
decl	10:4	10:14	2	int	dcdiff
decl	11:4	11:50	2	int	a_avail
op	11:16	0:0	2	=
water	11:18	0:0	2	v
op	11:19	0:0	2	->
water	11:21	0:0	2	a_avail
water	11:28	0:0	2	,
decl	11:4	11:50	2	int	c_avail
op	11:38	0:0	2	=
water	11:40	0:0	2	v
op	11:41	0:0	2	->
water	11:43	0:0	2	c_avail
decl	12:4	12:29	2	int	use_pred
op	12:17	0:0	2	=
water	12:19	0:0	2	s
op	12:20	0:0	2	->
water	12:22	0:0	2	ac_pred
decl	13:4	13:13	2	int	scale
decl	14:4	14:18	2	int	q1
water	14:10	0:0	2	,
decl	14:4	14:18	2	int	q2
op	14:15	0:0	2	=
water	14:17	0:0	2	0
decl	15:4	15:49	2	int	mb_pos
op	15:15	0:0	2	=
water	15:17	0:0	2	s
op	15:18	0:0	2	->
water	15:20	0:0	2	mb_x
op	15:25	0:0	2	+
water	15:27	0:0	2	s
op	15:28	0:0	2	->
water	15:30	0:0	2	mb_y
op	15:35	0:0	2	*
water	15:37	0:0	2	s
op	15:38	0:0	2	->
water	15:40	0:0	2	mb_stride
if	17:4	19:4	2	(n < 4)
cond	17:8	17:12	3	n < 4
water	17:8	0:0	4	n
op	17:10	0:0	4	<
water	17:12	0:0	4	4
stmts	17:15	19:4	3	
water	17:15	0:0	4	{
water	18:8	0:0	4	dcdiff
op	18:15	0:0	4	=
call	18:17	18:95	4	get_vlc2
arg	18:26	18:32	5	&s->gb
op	18:26	0:0	6	&
water	18:27	0:0	6	s
op	18:28	0:0	6	->
water	18:30	0:0	6	gb
arg	18:34	18:79	5	ff_msmp4_dc_luma_vlc[s->dc_table_index].table
water	18:34	0:0	6	ff_msmp4_dc_luma_vlc
op	18:54	0:0	6	[
water	18:55	0:0	6	s
op	18:56	0:0	6	->
water	18:58	0:0	6	dc_table_index
op	18:72	0:0	6	]
op	18:73	0:0	6	.
water	18:74	0:0	6	table
arg	18:81	18:92	5	DC_VLC_BITS
water	18:81	0:0	6	DC_VLC_BITS
arg	18:94	18:95	5	3
water	18:94	0:0	6	3
water	18:96	0:0	4	;
water	19:4	0:0	4	}
else	19:6	21:4	2
stmts	19:11	21:4	3	
water	19:11	0:0	4	{
water	20:8	0:0	4	dcdiff
op	20:15	0:0	4	=
call	20:17	20:97	4	get_vlc2
arg	20:26	20:32	5	&s->gb
op	20:26	0:0	6	&
water	20:27	0:0	6	s
op	20:28	0:0	6	->
water	20:30	0:0	6	gb
arg	20:34	20:81	5	ff_msmp4_dc_chroma_vlc[s->dc_table_index].table
water	20:34	0:0	6	ff_msmp4_dc_chroma_vlc
op	20:56	0:0	6	[
water	20:57	0:0	6	s
op	20:58	0:0	6	->
water	20:60	0:0	6	dc_table_index
op	20:74	0:0	6	]
op	20:75	0:0	6	.
water	20:76	0:0	6	table
arg	20:83	20:94	5	DC_VLC_BITS
water	20:83	0:0	6	DC_VLC_BITS
arg	20:96	20:97	5	3
water	20:96	0:0	6	3
water	20:98	0:0	4	;
water	21:4	0:0	4	}
if	22:4	25:4	2	(dcdiff < 0)
cond	22:8	22:17	3	dcdiff < 0
water	22:8	0:0	4	dcdiff
op	22:15	0:0	4	<
water	22:17	0:0	4	0
stmts	22:20	25:4	3	
water	22:20	0:0	4	{
call	23:8	23:57	4	av_log
arg	23:15	23:23	5	s->avctx
water	23:15	0:0	6	s
op	23:16	0:0	6	->
water	23:18	0:0	6	avctx
arg	23:25	23:37	5	AV_LOG_ERROR
water	23:25	0:0	6	AV_LOG_ERROR
arg	23:39	23:57	5	"Illegal DC VLC\n"
water	23:39	0:0	6	"Illegal DC VLC\n"
water	23:58	0:0	4	;
return	24:8	24:17	4	-1
op	24:15	0:0	5	-
water	24:16	0:0	5	1
water	25:4	0:0	4	}
if	26:4	36:4	2	(dcdiff)
cond	26:8	26:8	3	dcdiff
water	26:8	0:0	4	dcdiff
stmts	26:16	36:4	3	
water	26:16	0:0	4	{
decl	27:8	27:67	4	const int	m
op	27:20	0:0	4	=
water	27:22	0:0	4	(
water	27:23	0:0	4	mquant
op	27:30	0:0	4	==
water	27:33	0:0	4	1
op	27:35	0:0	4	||
water	27:38	0:0	4	mquant
op	27:45	0:0	4	==
water	27:48	0:0	4	2
water	27:49	0:0	4	)
water	27:51	0:0	4	?
water	27:53	0:0	4	3
op	27:55	0:0	4	-
water	27:57	0:0	4	mquant
water	27:64	0:0	4	:
water	27:66	0:0	4	0
if	28:8	30:8	4	(dcdiff == 119)
cond	28:12	28:22	5	dcdiff == 119
water	28:12	0:0	6	dcdiff
op	28:19	0:0	6	==
water	28:22	0:0	6	119
stmts	28:28	30:8	5	
water	28:28	0:0	6	{
water	29:12	0:0	6	dcdiff
op	29:19	0:0	6	=
call	29:21	29:39	6	get_bits
arg	29:30	29:32	7	gb
water	29:30	0:0	8	gb
arg	29:34	29:39	7	8+m
water	29:34	0:0	8	8
op	29:36	0:0	8	+
water	29:38	0:0	8	m
water	29:40	0:0	6	;
water	30:8	0:0	6	}
else	30:10	33:8	4
stmts	30:15	33:8	5	
water	30:15	0:0	6	{
if	31:12	32:73	6	(m)
cond	31:16	31:16	7	m
water	31:16	0:0	8	m
stmts	32:16	32:73	7	
water	32:16	0:0	8	dcdiff
op	32:23	0:0	8	=
water	32:25	0:0	8	(
water	32:26	0:0	8	dcdiff
op	32:33	0:0	8	<<
water	32:36	0:0	8	m
water	32:37	0:0	8	)
op	32:39	0:0	8	+
call	32:41	32:55	8	get_bits
arg	32:50	32:52	9	gb
water	32:50	0:0	10	gb
arg	32:54	32:55	9	m
water	32:54	0:0	10	m
op	32:57	0:0	8	-
water	32:59	0:0	8	(
water	32:60	0:0	8	(
water	32:61	0:0	8	1
op	32:63	0:0	8	<<
water	32:66	0:0	8	m
water	32:67	0:0	8	)
op	32:69	0:0	8	-
water	32:71	0:0	8	1
water	32:72	0:0	8	)
water	32:73	0:0	8	;
water	33:8	0:0	6	}
if	34:8	35:28	4	(get_bits1 (gb ))
cond	34:12	34:24	5	get_bits1 (gb )
call	34:12	34:24	6	get_bits1
arg	34:22	34:24	7	gb
water	34:22	0:0	8	gb
stmts	35:12	35:28	5	
water	35:12	0:0	6	dcdiff
op	35:19	0:0	6	=
op	35:21	0:0	6	-
water	35:22	0:0	6	dcdiff
water	35:28	0:0	6	;
water	36:4	0:0	4	}
water	38:4	0:0	2	dcdiff
op	38:11	0:0	2	+=
call	38:14	38:104	2	ff_vc1_pred_dc
arg	38:29	38:34	3	&v->s
op	38:29	0:0	4	&
water	38:30	0:0	4	v
op	38:31	0:0	4	->
water	38:33	0:0	4	s
arg	38:36	38:46	3	v->overlap
water	38:36	0:0	4	v
op	38:37	0:0	4	->
water	38:39	0:0	4	overlap
arg	38:48	38:54	3	mquant
water	38:48	0:0	4	mquant
arg	38:56	38:57	3	n
water	38:56	0:0	4	n
arg	38:59	38:69	3	v->a_avail
water	38:59	0:0	4	v
op	38:60	0:0	4	->
water	38:62	0:0	4	a_avail
arg	38:71	38:81	3	v->c_avail
water	38:71	0:0	4	v
op	38:72	0:0	4	->
water	38:74	0:0	4	c_avail
arg	38:83	38:90	3	&dc_val
op	38:83	0:0	4	&
water	38:84	0:0	4	dc_val
arg	38:92	38:104	3	&dc_pred_dir
op	38:92	0:0	4	&
water	38:93	0:0	4	dc_pred_dir
water	38:105	0:0	2	;
op	39:4	0:0	2	*
water	39:5	0:0	2	dc_val
op	39:12	0:0	2	=
water	39:14	0:0	2	dcdiff
water	39:20	0:0	2	;
if	41:4	42:29	2	(n < 4)
cond	41:8	41:12	3	n < 4
water	41:8	0:0	4	n
op	41:10	0:0	4	<
water	41:12	0:0	4	4
stmts	42:8	42:29	3	
water	42:8	0:0	4	scale
op	42:14	0:0	4	=
water	42:16	0:0	4	s
op	42:17	0:0	4	->
water	42:19	0:0	4	y_dc_scale
water	42:29	0:0	4	;
else	43:4	44:29	2
stmts	44:8	44:29	3	
water	44:8	0:0	4	scale
op	44:14	0:0	4	=
water	44:16	0:0	4	s
op	44:17	0:0	4	->
water	44:19	0:0	4	c_dc_scale
water	44:29	0:0	4	;
water	45:4	0:0	2	block
op	45:9	0:0	2	[
water	45:10	0:0	2	0
op	45:11	0:0	2	]
op	45:13	0:0	2	=
water	45:15	0:0	2	dcdiff
op	45:22	0:0	2	*
water	45:24	0:0	2	scale
water	45:29	0:0	2	;
if	47:4	48:20	2	(! a_avail && ! c_avail)
cond	47:8	47:21	3	! a_avail && ! c_avail
op	47:8	0:0	4	!
water	47:9	0:0	4	a_avail
op	47:17	0:0	4	&&
op	47:20	0:0	4	!
water	47:21	0:0	4	c_avail
stmts	48:8	48:20	3	
water	48:8	0:0	4	use_pred
op	48:17	0:0	4	=
water	48:19	0:0	4	0
water	48:20	0:0	4	;
water	49:4	0:0	2	scale
op	49:10	0:0	2	=
water	49:12	0:0	2	mquant
op	49:19	0:0	2	*
water	49:21	0:0	2	2
op	49:23	0:0	2	+
water	49:25	0:0	2	(
water	49:26	0:0	2	(
water	49:27	0:0	2	mquant
op	49:34	0:0	2	==
water	49:37	0:0	2	v
op	49:38	0:0	2	->
water	49:40	0:0	2	pq
water	49:42	0:0	2	)
water	49:44	0:0	2	?
water	49:46	0:0	2	v
op	49:47	0:0	2	->
water	49:49	0:0	2	halfpq
water	49:56	0:0	2	:
water	49:58	0:0	2	0
water	49:59	0:0	2	)
water	49:60	0:0	2	;
water	50:4	0:0	2	ac_val
op	50:12	0:0	2	=
water	50:14	0:0	2	s
op	50:15	0:0	2	->
water	50:17	0:0	2	ac_val
op	50:23	0:0	2	[
water	50:24	0:0	2	0
op	50:25	0:0	2	]
op	50:26	0:0	2	[
water	50:27	0:0	2	0
op	50:28	0:0	2	]
op	50:30	0:0	2	+
water	50:32	0:0	2	s
op	50:33	0:0	2	->
water	50:35	0:0	2	block_index
op	50:46	0:0	2	[
water	50:47	0:0	2	n
op	50:48	0:0	2	]
op	50:50	0:0	2	*
water	50:52	0:0	2	16
water	50:54	0:0	2	;
water	51:4	0:0	2	ac_val2
op	51:12	0:0	2	=
water	51:14	0:0	2	ac_val
water	51:20	0:0	2	;
if	52:4	53:20	2	(dc_pred_dir)
cond	52:8	52:8	3	dc_pred_dir
water	52:8	0:0	4	dc_pred_dir
stmts	53:8	53:20	3	
water	53:8	0:0	4	ac_val
op	53:15	0:0	4	-=
water	53:18	0:0	4	16
water	53:20	0:0	4	;
else	54:4	55:39	2
stmts	55:8	55:39	3	
water	55:8	0:0	4	ac_val
op	55:15	0:0	4	-=
water	55:18	0:0	4	16
op	55:21	0:0	4	*
water	55:23	0:0	4	s
op	55:24	0:0	4	->
water	55:26	0:0	4	block_wrap
op	55:36	0:0	4	[
water	55:37	0:0	4	n
op	55:38	0:0	4	]
water	55:39	0:0	4	;
water	56:4	0:0	2	q1
op	56:7	0:0	2	=
water	56:9	0:0	2	s
op	56:10	0:0	2	->
water	56:12	0:0	2	current_picture
op	56:27	0:0	2	.
water	56:28	0:0	2	qscale_table
op	56:40	0:0	2	[
water	56:41	0:0	2	mb_pos
op	56:47	0:0	2	]
water	56:48	0:0	2	;
if	57:4	58:15	2	(n == 3)
cond	57:8	57:13	3	n == 3
water	57:8	0:0	4	n
op	57:10	0:0	4	==
water	57:13	0:0	4	3
stmts	58:8	58:15	3	
water	58:8	0:0	4	q2
op	58:11	0:0	4	=
water	58:13	0:0	4	q1
water	58:15	0:0	4	;
else	59:4	64:4	2
stmts	59:9	64:4	3	
if	59:9	64:4	4	(dc_pred_dir)
cond	59:13	59:13	5	dc_pred_dir
water	59:13	0:0	6	dc_pred_dir
stmts	59:26	64:4	5	
water	59:26	0:0	6	{
if	60:8	61:19	6	(n == 1)
cond	60:12	60:17	7	n == 1
water	60:12	0:0	8	n
op	60:14	0:0	8	==
water	60:17	0:0	8	1
stmts	61:12	61:19	7	
water	61:12	0:0	8	q2
op	61:15	0:0	8	=
water	61:17	0:0	8	q1
water	61:19	0:0	8	;
else	62:8	63:60	6
stmts	62:13	63:60	7	
if	62:13	63:60	8	(c_avail && mb_pos)
cond	62:17	62:28	9	c_avail && mb_pos
water	62:17	0:0	10	c_avail
op	62:25	0:0	10	&&
water	62:28	0:0	10	mb_pos
stmts	63:12	63:60	9	
water	63:12	0:0	10	q2
op	63:15	0:0	10	=
water	63:17	0:0	10	s
op	63:18	0:0	10	->
water	63:20	0:0	10	current_picture
op	63:35	0:0	10	.
water	63:36	0:0	10	qscale_table
op	63:48	0:0	10	[
water	63:49	0:0	10	mb_pos
op	63:56	0:0	10	-
water	63:58	0:0	10	1
op	63:59	0:0	10	]
water	63:60	0:0	10	;
water	64:4	0:0	6	}
else	64:6	69:4	2
stmts	64:11	69:4	3	
water	64:11	0:0	4	{
if	65:8	66:19	4	(n == 2)
cond	65:12	65:17	5	n == 2
water	65:12	0:0	6	n
op	65:14	0:0	6	==
water	65:17	0:0	6	2
stmts	66:12	66:19	5	
water	66:12	0:0	6	q2
op	66:15	0:0	6	=
water	66:17	0:0	6	q1
water	66:19	0:0	6	;
else	67:8	68:71	4
stmts	67:13	68:71	5	
if	67:13	68:71	6	(a_avail && mb_pos >= s -> mb_stride)
cond	67:17	67:41	7	a_avail && mb_pos >= s -> mb_stride
water	67:17	0:0	8	a_avail
op	67:25	0:0	8	&&
water	67:28	0:0	8	mb_pos
op	67:35	0:0	8	>=
water	67:38	0:0	8	s
op	67:39	0:0	8	->
water	67:41	0:0	8	mb_stride
stmts	68:12	68:71	7	
water	68:12	0:0	8	q2
op	68:15	0:0	8	=
water	68:17	0:0	8	s
op	68:18	0:0	8	->
water	68:20	0:0	8	current_picture
op	68:35	0:0	8	.
water	68:36	0:0	8	qscale_table
op	68:48	0:0	8	[
water	68:49	0:0	8	mb_pos
op	68:56	0:0	8	-
water	68:58	0:0	8	s
op	68:59	0:0	8	->
water	68:61	0:0	8	mb_stride
op	68:70	0:0	8	]
water	68:71	0:0	8	;
water	69:4	0:0	4	}
water	71:4	0:0	2	i
op	71:6	0:0	2	=
water	71:8	0:0	2	1
water	71:9	0:0	2	;
if	72:4	132:4	2	(coded)
cond	72:8	72:8	3	coded
water	72:8	0:0	4	coded
stmts	72:15	132:4	3	
water	72:15	0:0	4	{
decl	73:8	73:33	4	int	last
op	73:17	0:0	4	=
water	73:19	0:0	4	0
water	73:20	0:0	4	,
decl	73:8	73:33	4	int	skip
water	73:26	0:0	4	,
decl	73:8	73:33	4	int	value
decl	74:8	74:31	4	const uint8_t	*zz_table
decl	75:8	75:13	4	int	k
if	76:8	85:8	4	(v -> s . ac_pred)
cond	76:12	76:17	5	v -> s . ac_pred
water	76:12	0:0	6	v
op	76:13	0:0	6	->
water	76:15	0:0	6	s
op	76:16	0:0	6	.
water	76:17	0:0	6	ac_pred
stmts	76:26	85:8	5	
water	76:26	0:0	6	{
if	77:12	79:12	6	(! use_pred && v -> fcm == ILACE_FRAME)
cond	77:16	77:39	7	! use_pred && v -> fcm == ILACE_FRAME
op	77:16	0:0	8	!
water	77:17	0:0	8	use_pred
op	77:26	0:0	8	&&
water	77:29	0:0	8	v
op	77:30	0:0	8	->
water	77:32	0:0	8	fcm
op	77:36	0:0	8	==
water	77:39	0:0	8	ILACE_FRAME
stmts	77:52	79:12	7	
water	77:52	0:0	8	{
water	78:16	0:0	8	zz_table
op	78:25	0:0	8	=
water	78:27	0:0	8	v
op	78:28	0:0	8	->
water	78:30	0:0	8	zzi_8x8
water	78:37	0:0	8	;
water	79:12	0:0	8	}
else	79:14	84:12	6
stmts	79:19	84:12	7	
water	79:19	0:0	8	{
if	80:16	81:43	8	(! dc_pred_dir)
cond	80:20	80:21	9	! dc_pred_dir
op	80:20	0:0	10	!
water	80:21	0:0	10	dc_pred_dir
stmts	81:20	81:43	9	
water	81:20	0:0	10	zz_table
op	81:29	0:0	10	=
water	81:31	0:0	10	v
op	81:32	0:0	10	->
water	81:34	0:0	10	zz_8x8
op	81:40	0:0	10	[
water	81:41	0:0	10	2
op	81:42	0:0	10	]
water	81:43	0:0	10	;
else	82:16	83:43	8
stmts	83:20	83:43	9	
water	83:20	0:0	10	zz_table
op	83:29	0:0	10	=
water	83:31	0:0	10	v
op	83:32	0:0	10	->
water	83:34	0:0	10	zz_8x8
op	83:40	0:0	10	[
water	83:41	0:0	10	3
op	83:42	0:0	10	]
water	83:43	0:0	10	;
water	84:12	0:0	8	}
water	85:8	0:0	6	}
else	85:10	90:8	4
stmts	85:15	90:8	5	
water	85:15	0:0	6	{
if	86:12	87:39	6	(v -> fcm != ILACE_FRAME)
cond	86:16	86:26	7	v -> fcm != ILACE_FRAME
water	86:16	0:0	8	v
op	86:17	0:0	8	->
water	86:19	0:0	8	fcm
op	86:23	0:0	8	!=
water	86:26	0:0	8	ILACE_FRAME
stmts	87:16	87:39	7	
water	87:16	0:0	8	zz_table
op	87:25	0:0	8	=
water	87:27	0:0	8	v
op	87:28	0:0	8	->
water	87:30	0:0	8	zz_8x8
op	87:36	0:0	8	[
water	87:37	0:0	8	1
op	87:38	0:0	8	]
water	87:39	0:0	8	;
else	88:12	89:37	6
stmts	89:16	89:37	7	
water	89:16	0:0	8	zz_table
op	89:25	0:0	8	=
water	89:27	0:0	8	v
op	89:28	0:0	8	->
water	89:30	0:0	8	zzi_8x8
water	89:37	0:0	8	;
water	90:8	0:0	6	}
while	91:8	97:8	4	(! last)
cond	91:15	91:16	5	! last
op	91:15	0:0	6	!
water	91:16	0:0	6	last
stmts	91:22	97:8	5	
water	91:22	0:0	6	{
call	92:12	92:66	6	vc1_decode_ac_coeff
arg	92:32	92:33	7	v
water	92:32	0:0	8	v
arg	92:35	92:40	7	&last
op	92:35	0:0	8	&
water	92:36	0:0	8	last
arg	92:42	92:47	7	&skip
op	92:42	0:0	8	&
water	92:43	0:0	8	skip
arg	92:49	92:55	7	&value
op	92:49	0:0	8	&
water	92:50	0:0	8	value
arg	92:57	92:66	7	codingset
water	92:57	0:0	8	codingset
water	92:67	0:0	6	;
water	93:12	0:0	6	i
op	93:14	0:0	6	+=
water	93:17	0:0	6	skip
water	93:21	0:0	6	;
if	94:12	95:21	6	(i > 63)
cond	94:16	94:20	7	i > 63
water	94:16	0:0	8	i
op	94:18	0:0	8	>
water	94:20	0:0	8	63
stmts	95:16	95:21	7	
break	95:16	95:21	8	
water	96:12	0:0	6	block
op	96:17	0:0	6	[
water	96:18	0:0	6	zz_table
op	96:26	0:0	6	[
water	96:27	0:0	6	i
op	96:28	0:0	6	++
op	96:30	0:0	6	]
op	96:31	0:0	6	]
op	96:33	0:0	6	=
water	96:35	0:0	6	value
water	96:40	0:0	6	;
water	97:8	0:0	6	}
if	99:8	119:8	4	(use_pred)
cond	99:12	99:12	5	use_pred
water	99:12	0:0	6	use_pred
stmts	99:22	119:8	5	
water	99:22	0:0	6	{
decl	100:12	100:18	6	int	sh
if	101:12	103:12	6	(dc_pred_dir)
cond	101:16	101:16	7	dc_pred_dir
water	101:16	0:0	8	dc_pred_dir
stmts	101:29	103:12	7	
water	101:29	0:0	8	{
water	102:16	0:0	8	sh
op	102:19	0:0	8	=
water	102:21	0:0	8	v
op	102:22	0:0	8	->
water	102:24	0:0	8	left_blk_sh
water	102:35	0:0	8	;
water	103:12	0:0	8	}
else	103:14	106:12	6
stmts	103:19	106:12	7	
water	103:19	0:0	8	{
water	104:16	0:0	8	sh
op	104:19	0:0	8	=
water	104:21	0:0	8	v
op	104:22	0:0	8	->
water	104:24	0:0	8	top_blk_sh
water	104:34	0:0	8	;
water	105:16	0:0	8	ac_val
op	105:23	0:0	8	+=
water	105:26	0:0	8	8
water	105:27	0:0	8	;
water	106:12	0:0	8	}
if	108:12	115:12	6	(q2 && q1 != q2)
cond	108:16	108:28	7	q2 && q1 != q2
water	108:16	0:0	8	q2
op	108:19	0:0	8	&&
water	108:22	0:0	8	q1
op	108:25	0:0	8	!=
water	108:28	0:0	8	q2
stmts	108:32	115:12	7	
water	108:32	0:0	8	{
water	109:16	0:0	8	q1
op	109:19	0:0	8	=
water	109:21	0:0	8	q1
op	109:24	0:0	8	*
water	109:26	0:0	8	2
op	109:28	0:0	8	+
water	109:30	0:0	8	(
water	109:31	0:0	8	(
water	109:32	0:0	8	q1
op	109:35	0:0	8	==
water	109:38	0:0	8	v
op	109:39	0:0	8	->
water	109:41	0:0	8	pq
water	109:43	0:0	8	)
water	109:45	0:0	8	?
water	109:47	0:0	8	v
op	109:48	0:0	8	->
water	109:50	0:0	8	halfpq
water	109:57	0:0	8	:
water	109:59	0:0	8	0
water	109:60	0:0	8	)
op	109:62	0:0	8	-
water	109:64	0:0	8	1
water	109:65	0:0	8	;
if	110:16	111:46	8	(q1 < 1)
cond	110:20	110:25	9	q1 < 1
water	110:20	0:0	10	q1
op	110:23	0:0	10	<
water	110:25	0:0	10	1
stmts	111:20	111:46	9	
return	111:20	111:46	10	AVERROR_INVALIDDATA
water	111:27	0:0	11	AVERROR_INVALIDDATA
water	112:16	0:0	8	q2
op	112:19	0:0	8	=
water	112:21	0:0	8	q2
op	112:24	0:0	8	*
water	112:26	0:0	8	2
op	112:28	0:0	8	+
water	112:30	0:0	8	(
water	112:31	0:0	8	(
water	112:32	0:0	8	q2
op	112:35	0:0	8	==
water	112:38	0:0	8	v
op	112:39	0:0	8	->
water	112:41	0:0	8	pq
water	112:43	0:0	8	)
water	112:45	0:0	8	?
water	112:47	0:0	8	v
op	112:48	0:0	8	->
water	112:50	0:0	8	halfpq
water	112:57	0:0	8	:
water	112:59	0:0	8	0
water	112:60	0:0	8	)
op	112:62	0:0	8	-
water	112:64	0:0	8	1
water	112:65	0:0	8	;
for	113:16	114:95	8	(k = 1 ;k < 8;k ++)
forinit	113:21	113:26	9	k = 1 ;
water	113:21	0:0	10	k
op	113:23	0:0	10	=
water	113:25	0:0	10	1
water	113:26	0:0	10	;
cond	113:28	113:32	9	k < 8
water	113:28	0:0	10	k
op	113:30	0:0	10	<
water	113:32	0:0	10	8
forexpr	113:35	113:36	9	k ++
water	113:35	0:0	10	k
op	113:36	0:0	10	++
stmts	114:20	114:95	9	
water	114:20	0:0	10	block
op	114:25	0:0	10	[
water	114:26	0:0	10	k
op	114:28	0:0	10	<<
water	114:31	0:0	10	sh
op	114:33	0:0	10	]
op	114:35	0:0	10	+=
water	114:38	0:0	10	(
water	114:39	0:0	10	ac_val
op	114:45	0:0	10	[
water	114:46	0:0	10	k
op	114:47	0:0	10	]
op	114:49	0:0	10	*
water	114:51	0:0	10	q2
op	114:54	0:0	10	*
water	114:56	0:0	10	ff_vc1_dqscale
op	114:70	0:0	10	[
water	114:71	0:0	10	q1
op	114:74	0:0	10	-
water	114:76	0:0	10	1
op	114:77	0:0	10	]
op	114:79	0:0	10	+
water	114:81	0:0	10	0
water	114:82	0:0	10	x20000
water	114:88	0:0	10	)
op	114:90	0:0	10	>>
water	114:93	0:0	10	18
water	114:95	0:0	10	;
water	115:12	0:0	8	}
else	115:14	118:12	6
stmts	115:19	118:12	7	
water	115:19	0:0	8	{
for	116:16	117:47	8	(k = 1 ;k < 8;k ++)
forinit	116:21	116:26	9	k = 1 ;
water	116:21	0:0	10	k
op	116:23	0:0	10	=
water	116:25	0:0	10	1
water	116:26	0:0	10	;
cond	116:28	116:32	9	k < 8
water	116:28	0:0	10	k
op	116:30	0:0	10	<
water	116:32	0:0	10	8
forexpr	116:35	116:36	9	k ++
water	116:35	0:0	10	k
op	116:36	0:0	10	++
stmts	117:20	117:47	9	
water	117:20	0:0	10	block
op	117:25	0:0	10	[
water	117:26	0:0	10	k
op	117:28	0:0	10	<<
water	117:31	0:0	10	sh
op	117:33	0:0	10	]
op	117:35	0:0	10	+=
water	117:38	0:0	10	ac_val
op	117:44	0:0	10	[
water	117:45	0:0	10	k
op	117:46	0:0	10	]
water	117:47	0:0	10	;
water	118:12	0:0	8	}
water	119:8	0:0	6	}
for	121:8	124:8	4	(k = 1 ;k < 8;k ++)
forinit	121:13	121:18	5	k = 1 ;
water	121:13	0:0	6	k
op	121:15	0:0	6	=
water	121:17	0:0	6	1
water	121:18	0:0	6	;
cond	121:20	121:24	5	k < 8
water	121:20	0:0	6	k
op	121:22	0:0	6	<
water	121:24	0:0	6	8
forexpr	121:27	121:28	5	k ++
water	121:27	0:0	6	k
op	121:28	0:0	6	++
stmts	121:32	124:8	5	
water	121:32	0:0	6	{
water	122:12	0:0	6	ac_val2
op	122:19	0:0	6	[
water	122:20	0:0	6	k
op	122:25	0:0	6	]
op	122:27	0:0	6	=
water	122:29	0:0	6	block
op	122:34	0:0	6	[
water	122:35	0:0	6	k
op	122:37	0:0	6	<<
water	122:40	0:0	6	v
op	122:41	0:0	6	->
water	122:43	0:0	6	left_blk_sh
op	122:54	0:0	6	]
water	122:55	0:0	6	;
water	123:12	0:0	6	ac_val2
op	123:19	0:0	6	[
water	123:20	0:0	6	k
op	123:22	0:0	6	+
water	123:24	0:0	6	8
op	123:25	0:0	6	]
op	123:27	0:0	6	=
water	123:29	0:0	6	block
op	123:34	0:0	6	[
water	123:35	0:0	6	k
op	123:37	0:0	6	<<
water	123:40	0:0	6	v
op	123:41	0:0	6	->
water	123:43	0:0	6	top_blk_sh
op	123:53	0:0	6	]
water	123:54	0:0	6	;
water	124:8	0:0	6	}
for	126:8	131:12	4	(k = 1 ;k < 64;k ++)
forinit	126:13	126:18	5	k = 1 ;
water	126:13	0:0	6	k
op	126:15	0:0	6	=
water	126:17	0:0	6	1
water	126:18	0:0	6	;
cond	126:20	126:24	5	k < 64
water	126:20	0:0	6	k
op	126:22	0:0	6	<
water	126:24	0:0	6	64
forexpr	126:28	126:29	5	k ++
water	126:28	0:0	6	k
op	126:29	0:0	6	++
stmts	127:12	131:12	5	
if	127:12	131:12	6	(block [ k ])
cond	127:16	127:23	7	block [ k ]
water	127:16	0:0	8	block
op	127:21	0:0	8	[
water	127:22	0:0	8	k
op	127:23	0:0	8	]
stmts	127:26	131:12	7	
water	127:26	0:0	8	{
water	128:16	0:0	8	block
op	128:21	0:0	8	[
water	128:22	0:0	8	k
op	128:23	0:0	8	]
op	128:25	0:0	8	*=
water	128:28	0:0	8	scale
water	128:33	0:0	8	;
if	129:16	130:65	8	(! v -> pquantizer)
cond	129:20	129:24	9	! v -> pquantizer
op	129:20	0:0	10	!
water	129:21	0:0	10	v
op	129:22	0:0	10	->
water	129:24	0:0	10	pquantizer
stmts	130:20	130:65	9	
water	130:20	0:0	10	block
op	130:25	0:0	10	[
water	130:26	0:0	10	k
op	130:27	0:0	10	]
op	130:29	0:0	10	+=
water	130:32	0:0	10	(
water	130:33	0:0	10	block
op	130:38	0:0	10	[
water	130:39	0:0	10	k
op	130:40	0:0	10	]
op	130:42	0:0	10	<
water	130:44	0:0	10	0
water	130:45	0:0	10	)
water	130:47	0:0	10	?
op	130:49	0:0	10	-
water	130:50	0:0	10	mquant
water	130:57	0:0	10	:
water	130:59	0:0	10	mquant
water	130:65	0:0	10	;
water	131:12	0:0	8	}
water	132:4	0:0	4	}
else	132:6	160:4	2
stmts	132:11	160:4	3	
water	132:11	0:0	4	{
decl	133:8	133:13	4	int	k
call	134:8	134:33	4	memset
arg	134:15	134:22	5	ac_val2
water	134:15	0:0	6	ac_val2
arg	134:24	134:25	5	0
water	134:24	0:0	6	0
arg	134:27	134:33	5	16*2
water	134:27	0:0	6	16
op	134:30	0:0	6	*
water	134:32	0:0	6	2
water	134:34	0:0	4	;
if	136:8	159:8	4	(use_pred)
cond	136:12	136:12	5	use_pred
water	136:12	0:0	6	use_pred
stmts	136:22	159:8	5	
water	136:22	0:0	6	{
decl	137:12	137:18	6	int	sh
if	138:12	140:12	6	(dc_pred_dir)
cond	138:16	138:16	7	dc_pred_dir
water	138:16	0:0	8	dc_pred_dir
stmts	138:29	140:12	7	
water	138:29	0:0	8	{
water	139:16	0:0	8	sh
op	139:19	0:0	8	=
water	139:21	0:0	8	v
op	139:22	0:0	8	->
water	139:24	0:0	8	left_blk_sh
water	139:35	0:0	8	;
water	140:12	0:0	8	}
else	140:14	144:12	6
stmts	140:19	144:12	7	
water	140:19	0:0	8	{
water	141:16	0:0	8	sh
op	141:19	0:0	8	=
water	141:21	0:0	8	v
op	141:22	0:0	8	->
water	141:24	0:0	8	top_blk_sh
water	141:34	0:0	8	;
water	142:16	0:0	8	ac_val
op	142:24	0:0	8	+=
water	142:27	0:0	8	8
water	142:28	0:0	8	;
water	143:16	0:0	8	ac_val2
op	143:24	0:0	8	+=
water	143:27	0:0	8	8
water	143:28	0:0	8	;
water	144:12	0:0	8	}
call	145:12	145:41	6	memcpy
arg	145:19	145:26	7	ac_val2
water	145:19	0:0	8	ac_val2
arg	145:28	145:34	7	ac_val
water	145:28	0:0	8	ac_val
arg	145:36	145:41	7	8*2
water	145:36	0:0	8	8
op	145:38	0:0	8	*
water	145:40	0:0	8	2
water	145:42	0:0	6	;
if	146:12	153:12	6	(q2 && q1 != q2)
cond	146:16	146:28	7	q2 && q1 != q2
water	146:16	0:0	8	q2
op	146:19	0:0	8	&&
water	146:22	0:0	8	q1
op	146:25	0:0	8	!=
water	146:28	0:0	8	q2
stmts	146:32	153:12	7	
water	146:32	0:0	8	{
water	147:16	0:0	8	q1
op	147:19	0:0	8	=
water	147:21	0:0	8	q1
op	147:24	0:0	8	*
water	147:26	0:0	8	2
op	147:28	0:0	8	+
water	147:30	0:0	8	(
water	147:31	0:0	8	(
water	147:32	0:0	8	q1
op	147:35	0:0	8	==
water	147:38	0:0	8	v
op	147:39	0:0	8	->
water	147:41	0:0	8	pq
water	147:43	0:0	8	)
water	147:45	0:0	8	?
water	147:47	0:0	8	v
op	147:48	0:0	8	->
water	147:50	0:0	8	halfpq
water	147:57	0:0	8	:
water	147:59	0:0	8	0
water	147:60	0:0	8	)
op	147:62	0:0	8	-
water	147:64	0:0	8	1
water	147:65	0:0	8	;
water	148:16	0:0	8	q2
op	148:19	0:0	8	=
water	148:21	0:0	8	q2
op	148:24	0:0	8	*
water	148:26	0:0	8	2
op	148:28	0:0	8	+
water	148:30	0:0	8	(
water	148:31	0:0	8	(
water	148:32	0:0	8	q2
op	148:35	0:0	8	==
water	148:38	0:0	8	v
op	148:39	0:0	8	->
water	148:41	0:0	8	pq
water	148:43	0:0	8	)
water	148:45	0:0	8	?
water	148:47	0:0	8	v
op	148:48	0:0	8	->
water	148:50	0:0	8	halfpq
water	148:57	0:0	8	:
water	148:59	0:0	8	0
water	148:60	0:0	8	)
op	148:62	0:0	8	-
water	148:64	0:0	8	1
water	148:65	0:0	8	;
if	149:16	150:46	8	(q1 < 1)
cond	149:20	149:25	9	q1 < 1
water	149:20	0:0	10	q1
op	149:23	0:0	10	<
water	149:25	0:0	10	1
stmts	150:20	150:46	9	
return	150:20	150:46	10	AVERROR_INVALIDDATA
water	150:27	0:0	11	AVERROR_INVALIDDATA
for	151:16	152:91	8	(k = 1 ;k < 8;k ++)
forinit	151:21	151:26	9	k = 1 ;
water	151:21	0:0	10	k
op	151:23	0:0	10	=
water	151:25	0:0	10	1
water	151:26	0:0	10	;
cond	151:28	151:32	9	k < 8
water	151:28	0:0	10	k
op	151:30	0:0	10	<
water	151:32	0:0	10	8
forexpr	151:35	151:36	9	k ++
water	151:35	0:0	10	k
op	151:36	0:0	10	++
stmts	152:20	152:91	9	
water	152:20	0:0	10	ac_val2
op	152:27	0:0	10	[
water	152:28	0:0	10	k
op	152:29	0:0	10	]
op	152:31	0:0	10	=
water	152:33	0:0	10	(
water	152:34	0:0	10	ac_val2
op	152:41	0:0	10	[
water	152:42	0:0	10	k
op	152:43	0:0	10	]
op	152:45	0:0	10	*
water	152:47	0:0	10	q2
op	152:50	0:0	10	*
water	152:52	0:0	10	ff_vc1_dqscale
op	152:66	0:0	10	[
water	152:67	0:0	10	q1
op	152:70	0:0	10	-
water	152:72	0:0	10	1
op	152:73	0:0	10	]
op	152:75	0:0	10	+
water	152:77	0:0	10	0
water	152:78	0:0	10	x20000
water	152:84	0:0	10	)
op	152:86	0:0	10	>>
water	152:89	0:0	10	18
water	152:91	0:0	10	;
water	153:12	0:0	8	}
for	154:12	158:12	6	(k = 1 ;k < 8;k ++)
forinit	154:17	154:22	7	k = 1 ;
water	154:17	0:0	8	k
op	154:19	0:0	8	=
water	154:21	0:0	8	1
water	154:22	0:0	8	;
cond	154:24	154:28	7	k < 8
water	154:24	0:0	8	k
op	154:26	0:0	8	<
water	154:28	0:0	8	8
forexpr	154:31	154:32	7	k ++
water	154:31	0:0	8	k
op	154:32	0:0	8	++
stmts	154:36	158:12	7	
water	154:36	0:0	8	{
water	155:16	0:0	8	block
op	155:21	0:0	8	[
water	155:22	0:0	8	k
op	155:24	0:0	8	<<
water	155:27	0:0	8	sh
op	155:29	0:0	8	]
op	155:31	0:0	8	=
water	155:33	0:0	8	ac_val2
op	155:40	0:0	8	[
water	155:41	0:0	8	k
op	155:42	0:0	8	]
op	155:44	0:0	8	*
water	155:46	0:0	8	scale
water	155:51	0:0	8	;
if	156:16	157:77	8	(! v -> pquantizer && block [ k << sh ])
cond	156:20	156:51	9	! v -> pquantizer && block [ k << sh ]
op	156:20	0:0	10	!
water	156:21	0:0	10	v
op	156:22	0:0	10	->
water	156:24	0:0	10	pquantizer
op	156:35	0:0	10	&&
water	156:38	0:0	10	block
op	156:43	0:0	10	[
water	156:44	0:0	10	k
op	156:46	0:0	10	<<
water	156:49	0:0	10	sh
op	156:51	0:0	10	]
stmts	157:20	157:77	9	
water	157:20	0:0	10	block
op	157:25	0:0	10	[
water	157:26	0:0	10	k
op	157:28	0:0	10	<<
water	157:31	0:0	10	sh
op	157:33	0:0	10	]
op	157:35	0:0	10	+=
water	157:38	0:0	10	(
water	157:39	0:0	10	block
op	157:44	0:0	10	[
water	157:45	0:0	10	k
op	157:47	0:0	10	<<
water	157:50	0:0	10	sh
op	157:52	0:0	10	]
op	157:54	0:0	10	<
water	157:56	0:0	10	0
water	157:57	0:0	10	)
water	157:59	0:0	10	?
op	157:61	0:0	10	-
water	157:62	0:0	10	mquant
water	157:69	0:0	10	:
water	157:71	0:0	10	mquant
water	157:77	0:0	10	;
water	158:12	0:0	8	}
water	159:8	0:0	6	}
water	160:4	0:0	4	}
if	161:4	161:24	2	(use_pred)
cond	161:8	161:8	3	use_pred
water	161:8	0:0	4	use_pred
stmts	161:18	161:24	3	
water	161:18	0:0	4	i
op	161:20	0:0	4	=
water	161:22	0:0	4	63
water	161:24	0:0	4	;
water	162:4	0:0	2	s
op	162:5	0:0	2	->
water	162:7	0:0	2	block_last_index
op	162:23	0:0	2	[
water	162:24	0:0	2	n
op	162:25	0:0	2	]
op	162:27	0:0	2	=
water	162:29	0:0	2	i
water	162:30	0:0	2	;
return	163:4	163:12	2	0
water	163:11	0:0	3	0
