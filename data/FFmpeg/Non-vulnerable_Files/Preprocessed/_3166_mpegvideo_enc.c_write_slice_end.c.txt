func	1:0	14:0	0	static void	write_slice_end
params	1:27	0:0	1	
param	1:28	1:45	2	MpegEncContext *	s
stmnts	2:4	13:39	1	
if	2:4	7:4	2	(CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4)
cond	2:7	2:44	3	CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4
water	2:7	0:0	4	CONFIG_MPEG4_ENCODER
op	2:28	0:0	4	&&
water	2:31	0:0	4	s
op	2:32	0:0	4	->
water	2:34	0:0	4	codec_id
op	2:42	0:0	4	==
water	2:44	0:0	4	AV_CODEC_ID_MPEG4
stmts	2:62	7:4	3	
water	2:62	0:0	4	{
if	3:8	5:8	4	(s -> partitioned_frame)
cond	3:11	3:14	5	s -> partitioned_frame
water	3:11	0:0	6	s
op	3:12	0:0	6	->
water	3:14	0:0	6	partitioned_frame
stmts	3:32	5:8	5	
water	3:32	0:0	6	{
call	4:12	4:39	6	ff_mpeg4_merge_partitions
arg	4:38	4:39	7	s
water	4:38	0:0	8	s
water	4:40	0:0	6	;
water	5:8	0:0	6	}
call	6:8	6:32	4	ff_mpeg4_stuffing
arg	6:26	6:32	5	&s->pb
op	6:26	0:0	6	&
water	6:27	0:0	6	s
op	6:28	0:0	6	->
water	6:30	0:0	6	pb
water	6:33	0:0	4	;
water	7:4	0:0	4	}
else	7:5	9:4	2
stmts	7:10	9:4	3	
if	7:10	9:4	4	(CONFIG_MJPEG_ENCODER && s -> out_format == FMT_MJPEG)
cond	7:13	7:54	5	CONFIG_MJPEG_ENCODER && s -> out_format == FMT_MJPEG
water	7:13	0:0	6	CONFIG_MJPEG_ENCODER
op	7:34	0:0	6	&&
water	7:37	0:0	6	s
op	7:38	0:0	6	->
water	7:40	0:0	6	out_format
op	7:51	0:0	6	==
water	7:54	0:0	6	FMT_MJPEG
stmts	7:64	9:4	5	
water	7:64	0:0	6	{
call	8:8	8:34	6	ff_mjpeg_encode_stuffing
arg	8:33	8:34	7	s
water	8:33	0:0	8	s
water	8:35	0:0	6	;
water	9:4	0:0	6	}
call	10:4	10:32	2	avpriv_align_put_bits
arg	10:26	10:32	3	&s->pb
op	10:26	0:0	4	&
water	10:27	0:0	4	s
op	10:28	0:0	4	->
water	10:30	0:0	4	pb
water	10:33	0:0	2	;
call	11:4	11:25	2	flush_put_bits
arg	11:19	11:25	3	&s->pb
op	11:19	0:0	4	&
water	11:20	0:0	4	s
op	11:21	0:0	4	->
water	11:23	0:0	4	pb
water	11:26	0:0	2	;
if	12:4	13:39	2	(( s -> avctx -> flags & AV_CODEC_FLAG_PASS1 ) && ! s -> partitioned_frame)
cond	12:8	12:55	3	( s -> avctx -> flags & AV_CODEC_FLAG_PASS1 ) && ! s -> partitioned_frame
water	12:8	0:0	4	(
water	12:9	0:0	4	s
op	12:10	0:0	4	->
water	12:12	0:0	4	avctx
op	12:17	0:0	4	->
water	12:19	0:0	4	flags
op	12:25	0:0	4	&
water	12:27	0:0	4	AV_CODEC_FLAG_PASS1
water	12:46	0:0	4	)
op	12:48	0:0	4	&&
op	12:51	0:0	4	!
water	12:52	0:0	4	s
op	12:53	0:0	4	->
water	12:55	0:0	4	partitioned_frame
stmts	13:8	13:39	3	
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	misc_bits
op	13:20	0:0	4	+=
call	13:23	13:38	4	get_bits_diff
arg	13:37	13:38	5	s
water	13:37	0:0	6	s
water	13:39	0:0	4	;
func	16:0	29:0	0	static void	write_slice_end
params	16:27	0:0	1	
param	16:28	16:45	2	MpegEncContext *	s
stmnts	17:4	28:39	1	
if	17:4	22:4	2	(CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4)
cond	17:7	17:44	3	CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4
water	17:7	0:0	4	CONFIG_MPEG4_ENCODER
op	17:28	0:0	4	&&
water	17:31	0:0	4	s
op	17:32	0:0	4	->
water	17:34	0:0	4	codec_id
op	17:42	0:0	4	==
water	17:44	0:0	4	AV_CODEC_ID_MPEG4
stmts	17:62	22:4	3	
water	17:62	0:0	4	{
if	18:8	20:8	4	(s -> partitioned_frame)
cond	18:11	18:14	5	s -> partitioned_frame
water	18:11	0:0	6	s
op	18:12	0:0	6	->
water	18:14	0:0	6	partitioned_frame
stmts	18:32	20:8	5	
water	18:32	0:0	6	{
call	19:12	19:39	6	ff_mpeg4_merge_partitions
arg	19:38	19:39	7	s
water	19:38	0:0	8	s
water	19:40	0:0	6	;
water	20:8	0:0	6	}
call	21:8	21:32	4	ff_mpeg4_stuffing
arg	21:26	21:32	5	&s->pb
op	21:26	0:0	6	&
water	21:27	0:0	6	s
op	21:28	0:0	6	->
water	21:30	0:0	6	pb
water	21:33	0:0	4	;
water	22:4	0:0	4	}
else	22:5	24:4	2
stmts	22:10	24:4	3	
if	22:10	24:4	4	(CONFIG_MJPEG_ENCODER && s -> out_format == FMT_MJPEG)
cond	22:13	22:54	5	CONFIG_MJPEG_ENCODER && s -> out_format == FMT_MJPEG
water	22:13	0:0	6	CONFIG_MJPEG_ENCODER
op	22:34	0:0	6	&&
water	22:37	0:0	6	s
op	22:38	0:0	6	->
water	22:40	0:0	6	out_format
op	22:51	0:0	6	==
water	22:54	0:0	6	FMT_MJPEG
stmts	22:64	24:4	5	
water	22:64	0:0	6	{
call	23:8	23:34	6	ff_mjpeg_encode_stuffing
arg	23:33	23:34	7	s
water	23:33	0:0	8	s
water	23:35	0:0	6	;
water	24:4	0:0	6	}
call	25:4	25:32	2	avpriv_align_put_bits
arg	25:26	25:32	3	&s->pb
op	25:26	0:0	4	&
water	25:27	0:0	4	s
op	25:28	0:0	4	->
water	25:30	0:0	4	pb
water	25:33	0:0	2	;
call	26:4	26:25	2	flush_put_bits
arg	26:19	26:25	3	&s->pb
op	26:19	0:0	4	&
water	26:20	0:0	4	s
op	26:21	0:0	4	->
water	26:23	0:0	4	pb
water	26:26	0:0	2	;
if	27:4	28:39	2	(( s -> avctx -> flags & AV_CODEC_FLAG_PASS1 ) && ! s -> partitioned_frame)
cond	27:8	27:55	3	( s -> avctx -> flags & AV_CODEC_FLAG_PASS1 ) && ! s -> partitioned_frame
water	27:8	0:0	4	(
water	27:9	0:0	4	s
op	27:10	0:0	4	->
water	27:12	0:0	4	avctx
op	27:17	0:0	4	->
water	27:19	0:0	4	flags
op	27:25	0:0	4	&
water	27:27	0:0	4	AV_CODEC_FLAG_PASS1
water	27:46	0:0	4	)
op	27:48	0:0	4	&&
op	27:51	0:0	4	!
water	27:52	0:0	4	s
op	27:53	0:0	4	->
water	27:55	0:0	4	partitioned_frame
stmts	28:8	28:39	3	
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	misc_bits
op	28:20	0:0	4	+=
call	28:23	28:38	4	get_bits_diff
arg	28:37	28:38	5	s
water	28:37	0:0	6	s
water	28:39	0:0	4	;
