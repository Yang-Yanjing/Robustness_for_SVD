func	1:0	81:0	0	static int	hls_read_packet
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
param	1:47	1:60	2	AVPacket *	pkt
stmnts	0:0	80:22	1	
decl	3:4	3:32	2	HLSContext	*c
op	3:18	0:0	2	=
water	3:20	0:0	2	s
op	3:21	0:0	2	->
water	3:23	0:0	2	priv_data
decl	4:4	4:32	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:32	2	int	i
water	4:14	0:0	2	,
decl	4:4	4:32	2	int	minplaylist
op	4:28	0:0	2	=
op	4:30	0:0	2	-
water	4:31	0:0	2	1
call	5:4	5:44	2	recheck_discard_flags
arg	5:26	5:27	3	s
water	5:26	0:0	4	s
arg	5:29	5:44	3	c->first_packet
water	5:29	0:0	4	c
op	5:30	0:0	4	->
water	5:32	0:0	4	first_packet
water	5:45	0:0	2	;
for	6:4	67:4	2	(i = 0 ;i < c -> n_playlists;i ++)
forinit	6:9	6:14	3	i = 0 ;
water	6:9	0:0	4	i
op	6:11	0:0	4	=
water	6:13	0:0	4	0
water	6:14	0:0	4	;
cond	6:16	6:23	3	i < c -> n_playlists
water	6:16	0:0	4	i
op	6:18	0:0	4	<
water	6:20	0:0	4	c
op	6:21	0:0	4	->
water	6:23	0:0	4	n_playlists
forexpr	6:36	6:37	3	i ++
water	6:36	0:0	4	i
op	6:37	0:0	4	++
stmts	6:41	67:4	3	
water	6:41	0:0	4	{
decl	7:8	7:46	4	struct playlist	*pls
op	7:29	0:0	4	=
water	7:31	0:0	4	c
op	7:32	0:0	4	->
water	7:34	0:0	4	playlists
op	7:43	0:0	4	[
water	7:44	0:0	4	i
op	7:45	0:0	4	]
if	10:8	52:8	4	(pls -> needed && ! pls -> pkt . data)
cond	10:12	10:37	5	pls -> needed && ! pls -> pkt . data
water	10:12	0:0	6	pls
op	10:15	0:0	6	->
water	10:17	0:0	6	needed
op	10:24	0:0	6	&&
op	10:27	0:0	6	!
water	10:28	0:0	6	pls
op	10:31	0:0	6	->
water	10:33	0:0	6	pkt
op	10:36	0:0	6	.
water	10:37	0:0	6	data
stmts	10:43	52:8	5	
water	10:43	0:0	6	{
while	11:12	51:12	6	(1)
cond	11:19	11:19	7	1
water	11:19	0:0	8	1
stmts	11:22	51:12	7	
water	11:22	0:0	8	{
decl	12:16	12:31	8	int64_t	ts_diff
decl	13:16	13:29	8	AVRational	tb
water	14:16	0:0	8	ret
op	14:20	0:0	8	=
call	14:22	14:55	8	av_read_frame
arg	14:36	14:44	9	pls->ctx
water	14:36	0:0	10	pls
op	14:39	0:0	10	->
water	14:41	0:0	10	ctx
arg	14:46	14:55	9	&pls->pkt
op	14:46	0:0	10	&
water	14:47	0:0	10	pls
op	14:50	0:0	10	->
water	14:52	0:0	10	pkt
water	14:56	0:0	8	;
if	15:16	20:16	8	(ret < 0)
cond	15:20	15:26	9	ret < 0
water	15:20	0:0	10	ret
op	15:24	0:0	10	<
water	15:26	0:0	10	0
stmts	15:29	20:16	9	
water	15:29	0:0	10	{
if	16:20	17:34	10	(!avio_feof (& pls -> pb ) && ret != AVERROR_EOF)
cond	16:24	16:55	11	!avio_feof (& pls -> pb ) && ret != AVERROR_EOF
op	16:24	0:0	12	!
call	16:25	16:43	12	avio_feof
arg	16:35	16:43	13	&pls->pb
op	16:35	0:0	14	&
water	16:36	0:0	14	pls
op	16:39	0:0	14	->
water	16:41	0:0	14	pb
op	16:45	0:0	12	&&
water	16:48	0:0	12	ret
op	16:52	0:0	12	!=
water	16:55	0:0	12	AVERROR_EOF
stmts	17:24	17:34	11	
return	17:24	17:34	12	ret
water	17:31	0:0	13	ret
call	18:20	18:42	10	reset_packet
arg	18:33	18:42	11	&pls->pkt
op	18:33	0:0	12	&
water	18:34	0:0	12	pls
op	18:37	0:0	12	->
water	18:39	0:0	12	pkt
water	18:43	0:0	10	;
break	19:20	19:25	10	
water	20:16	0:0	10	}
else	20:18	30:16	8
stmts	20:23	30:16	9	
water	20:23	0:0	10	{
if	22:20	25:20	10	(pls -> is_id3_timestamped && pls -> pkt . stream_index == 0)
cond	22:24	22:76	11	pls -> is_id3_timestamped && pls -> pkt . stream_index == 0
water	22:24	0:0	12	pls
op	22:27	0:0	12	->
water	22:29	0:0	12	is_id3_timestamped
op	22:48	0:0	12	&&
water	22:51	0:0	12	pls
op	22:54	0:0	12	->
water	22:56	0:0	12	pkt
op	22:59	0:0	12	.
water	22:60	0:0	12	stream_index
op	22:73	0:0	12	==
water	22:76	0:0	12	0
stmts	22:79	25:20	11	
water	22:79	0:0	12	{
call	24:24	24:66	12	fill_timing_for_id3_timestamped_stream
arg	24:63	24:66	13	pls
water	24:63	0:0	14	pls
water	24:67	0:0	12	;
water	25:20	0:0	12	}
if	26:20	29:62	10	(c -> first_timestamp == AV_NOPTS_VALUE && pls -> pkt . dts != AV_NOPTS_VALUE)
cond	26:24	27:46	11	c -> first_timestamp == AV_NOPTS_VALUE && pls -> pkt . dts != AV_NOPTS_VALUE
water	26:24	0:0	12	c
op	26:25	0:0	12	->
water	26:27	0:0	12	first_timestamp
op	26:43	0:0	12	==
water	26:46	0:0	12	AV_NOPTS_VALUE
op	26:61	0:0	12	&&
water	27:24	0:0	12	pls
op	27:27	0:0	12	->
water	27:29	0:0	12	pkt
op	27:32	0:0	12	.
water	27:33	0:0	12	dts
op	27:43	0:0	12	!=
water	27:46	0:0	12	AV_NOPTS_VALUE
stmts	28:24	29:62	11	
water	28:24	0:0	12	c
op	28:25	0:0	12	->
water	28:27	0:0	12	first_timestamp
op	28:43	0:0	12	=
call	28:45	29:61	12	av_rescale_q
arg	28:58	28:70	13	pls->pkt.dts
water	28:58	0:0	14	pls
op	28:61	0:0	14	->
water	28:63	0:0	14	pkt
op	28:66	0:0	14	.
water	28:67	0:0	14	dts
arg	29:28	29:45	13	get_timebase(pls)
call	29:28	29:44	14	get_timebase
arg	29:41	29:44	15	pls
water	29:41	0:0	16	pls
arg	29:47	29:61	13	AV_TIME_BASE_Q
water	29:47	0:0	14	AV_TIME_BASE_Q
water	29:62	0:0	12	;
water	30:16	0:0	10	}
if	31:16	32:25	8	(pls -> seek_timestamp == AV_NOPTS_VALUE)
cond	31:20	31:43	9	pls -> seek_timestamp == AV_NOPTS_VALUE
water	31:20	0:0	10	pls
op	31:23	0:0	10	->
water	31:25	0:0	10	seek_timestamp
op	31:40	0:0	10	==
water	31:43	0:0	10	AV_NOPTS_VALUE
stmts	32:20	32:25	9	
break	32:20	32:25	10	
if	33:16	48:16	8	(pls -> seek_stream_index < 0 || pls -> seek_stream_index == pls -> pkt . stream_index)
cond	33:20	34:55	9	pls -> seek_stream_index < 0 || pls -> seek_stream_index == pls -> pkt . stream_index
water	33:20	0:0	10	pls
op	33:23	0:0	10	->
water	33:25	0:0	10	seek_stream_index
op	33:43	0:0	10	<
water	33:45	0:0	10	0
op	33:47	0:0	10	||
water	34:20	0:0	10	pls
op	34:23	0:0	10	->
water	34:25	0:0	10	seek_stream_index
op	34:43	0:0	10	==
water	34:46	0:0	10	pls
op	34:49	0:0	10	->
water	34:51	0:0	10	pkt
op	34:54	0:0	10	.
water	34:55	0:0	10	stream_index
stmts	34:69	48:16	9	
water	34:69	0:0	10	{
if	35:20	38:20	10	(pls -> pkt . dts == AV_NOPTS_VALUE)
cond	35:24	35:40	11	pls -> pkt . dts == AV_NOPTS_VALUE
water	35:24	0:0	12	pls
op	35:27	0:0	12	->
water	35:29	0:0	12	pkt
op	35:32	0:0	12	.
water	35:33	0:0	12	dts
op	35:37	0:0	12	==
water	35:40	0:0	12	AV_NOPTS_VALUE
stmts	35:56	38:20	11	
water	35:56	0:0	12	{
water	36:24	0:0	12	pls
op	36:27	0:0	12	->
water	36:29	0:0	12	seek_timestamp
op	36:44	0:0	12	=
water	36:46	0:0	12	AV_NOPTS_VALUE
water	36:60	0:0	12	;
break	37:24	37:29	12	
water	38:20	0:0	12	}
water	39:20	0:0	10	tb
op	39:23	0:0	10	=
call	39:25	39:41	10	get_timebase
arg	39:38	39:41	11	pls
water	39:38	0:0	12	pls
water	39:42	0:0	10	;
water	40:20	0:0	10	ts_diff
op	40:28	0:0	10	=
call	40:30	41:65	10	av_rescale_rnd
arg	40:45	40:57	11	pls->pkt.dts
water	40:45	0:0	12	pls
op	40:48	0:0	12	->
water	40:50	0:0	12	pkt
op	40:53	0:0	12	.
water	40:54	0:0	12	dts
arg	40:59	40:71	11	AV_TIME_BASE
water	40:59	0:0	12	AV_TIME_BASE
arg	41:44	41:50	11	tb.den
water	41:44	0:0	12	tb
op	41:46	0:0	12	.
water	41:47	0:0	12	den
arg	41:52	41:65	11	AV_ROUND_DOWN
water	41:52	0:0	12	AV_ROUND_DOWN
op	41:67	0:0	10	-
water	42:28	0:0	10	pls
op	42:31	0:0	10	->
water	42:33	0:0	10	seek_timestamp
water	42:47	0:0	10	;
if	43:20	47:20	10	(ts_diff >= 0 && ( pls -> seek_flags & AVSEEK_FLAG_ANY || pls -> pkt . flags & AV_PKT_FLAG_KEY ))
cond	43:24	44:72	11	ts_diff >= 0 && ( pls -> seek_flags & AVSEEK_FLAG_ANY || pls -> pkt . flags & AV_PKT_FLAG_KEY )
water	43:24	0:0	12	ts_diff
op	43:32	0:0	12	>=
water	43:35	0:0	12	0
op	43:37	0:0	12	&&
water	43:40	0:0	12	(
water	43:41	0:0	12	pls
op	43:44	0:0	12	->
water	43:46	0:0	12	seek_flags
op	43:58	0:0	12	&
water	43:60	0:0	12	AVSEEK_FLAG_ANY
op	43:76	0:0	12	||
water	44:40	0:0	12	pls
op	44:43	0:0	12	->
water	44:45	0:0	12	pkt
op	44:48	0:0	12	.
water	44:49	0:0	12	flags
op	44:55	0:0	12	&
water	44:57	0:0	12	AV_PKT_FLAG_KEY
water	44:72	0:0	12	)
stmts	44:75	47:20	11	
water	44:75	0:0	12	{
water	45:24	0:0	12	pls
op	45:27	0:0	12	->
water	45:29	0:0	12	seek_timestamp
op	45:44	0:0	12	=
water	45:46	0:0	12	AV_NOPTS_VALUE
water	45:60	0:0	12	;
break	46:24	46:29	12	
water	47:20	0:0	12	}
water	48:16	0:0	10	}
call	49:16	49:40	8	av_free_packet
arg	49:31	49:40	9	&pls->pkt
op	49:31	0:0	10	&
water	49:32	0:0	10	pls
op	49:35	0:0	10	->
water	49:37	0:0	10	pkt
water	49:41	0:0	8	;
call	50:16	50:38	8	reset_packet
arg	50:29	50:38	9	&pls->pkt
op	50:29	0:0	10	&
water	50:30	0:0	10	pls
op	50:33	0:0	10	->
water	50:35	0:0	10	pkt
water	50:39	0:0	8	;
water	51:12	0:0	8	}
water	52:8	0:0	6	}
if	54:8	66:8	4	(pls -> pkt . data)
cond	54:12	54:21	5	pls -> pkt . data
water	54:12	0:0	6	pls
op	54:15	0:0	6	->
water	54:17	0:0	6	pkt
op	54:20	0:0	6	.
water	54:21	0:0	6	data
stmts	54:27	66:8	5	
water	54:27	0:0	6	{
decl	55:12	56:69	6	struct playlist	*minpls
op	55:36	0:0	6	=
water	55:38	0:0	6	minplaylist
op	55:50	0:0	6	<
water	55:52	0:0	6	0
water	55:54	0:0	6	?
water	56:37	0:0	6	NULL
water	56:42	0:0	6	:
water	56:44	0:0	6	c
op	56:45	0:0	6	->
water	56:47	0:0	6	playlists
op	56:56	0:0	6	[
water	56:57	0:0	6	minplaylist
op	56:68	0:0	6	]
if	57:12	59:12	6	(minplaylist < 0)
cond	57:16	57:30	7	minplaylist < 0
water	57:16	0:0	8	minplaylist
op	57:28	0:0	8	<
water	57:30	0:0	8	0
stmts	57:33	59:12	7	
water	57:33	0:0	8	{
water	58:16	0:0	8	minplaylist
op	58:28	0:0	8	=
water	58:30	0:0	8	i
water	58:31	0:0	8	;
water	59:12	0:0	8	}
else	59:14	65:12	6
stmts	59:19	65:12	7	
water	59:19	0:0	8	{
decl	60:16	60:49	8	int64_t	dts
op	60:32	0:0	8	=
water	60:37	0:0	8	pls
op	60:40	0:0	8	->
water	60:42	0:0	8	pkt
op	60:45	0:0	8	.
water	60:46	0:0	8	dts
decl	61:16	61:49	8	int64_t	mindts
op	61:32	0:0	8	=
water	61:34	0:0	8	minpls
op	61:40	0:0	8	->
water	61:42	0:0	8	pkt
op	61:45	0:0	8	.
water	61:46	0:0	8	dts
if	62:16	64:35	8	(dts == AV_NOPTS_VALUE || ( mindts != AV_NOPTS_VALUE &&compare_ts_with_wrapdetect (dts ,pls ,mindts ,minpls ) < 0 ))
cond	62:20	63:105	9	dts == AV_NOPTS_VALUE || ( mindts != AV_NOPTS_VALUE &&compare_ts_with_wrapdetect (dts ,pls ,mindts ,minpls ) < 0 )
water	62:20	0:0	10	dts
op	62:24	0:0	10	==
water	62:27	0:0	10	AV_NOPTS_VALUE
op	62:42	0:0	10	||
water	63:20	0:0	10	(
water	63:21	0:0	10	mindts
op	63:28	0:0	10	!=
water	63:31	0:0	10	AV_NOPTS_VALUE
op	63:46	0:0	10	&&
call	63:49	63:100	10	compare_ts_with_wrapdetect
arg	63:76	63:79	11	dts
water	63:76	0:0	12	dts
arg	63:81	63:84	11	pls
water	63:81	0:0	12	pls
arg	63:86	63:92	11	mindts
water	63:86	0:0	12	mindts
arg	63:94	63:100	11	minpls
water	63:94	0:0	12	minpls
op	63:102	0:0	10	<
water	63:104	0:0	10	0
water	63:105	0:0	10	)
stmts	64:20	64:35	9	
water	64:20	0:0	10	minplaylist
op	64:32	0:0	10	=
water	64:34	0:0	10	i
water	64:35	0:0	10	;
water	65:12	0:0	8	}
water	66:8	0:0	6	}
water	67:4	0:0	4	}
if	69:4	79:4	2	(minplaylist >= 0)
cond	69:8	69:23	3	minplaylist >= 0
water	69:8	0:0	4	minplaylist
op	69:20	0:0	4	>=
water	69:23	0:0	4	0
stmts	69:26	79:4	3	
water	69:26	0:0	4	{
decl	70:8	70:56	4	struct playlist	*pls
op	70:29	0:0	4	=
water	70:31	0:0	4	c
op	70:32	0:0	4	->
water	70:34	0:0	4	playlists
op	70:43	0:0	4	[
water	70:44	0:0	4	minplaylist
op	70:55	0:0	4	]
op	71:8	0:0	4	*
water	71:9	0:0	4	pkt
op	71:13	0:0	4	=
water	71:15	0:0	4	pls
op	71:18	0:0	4	->
water	71:20	0:0	4	pkt
water	71:23	0:0	4	;
water	72:8	0:0	4	pkt
op	72:11	0:0	4	->
water	72:13	0:0	4	stream_index
op	72:26	0:0	4	+=
water	72:29	0:0	4	pls
op	72:32	0:0	4	->
water	72:34	0:0	4	stream_offset
water	72:47	0:0	4	;
call	73:8	73:52	4	reset_packet
arg	73:21	73:52	5	&c->playlists[minplaylist]->pkt
op	73:21	0:0	6	&
water	73:22	0:0	6	c
op	73:23	0:0	6	->
water	73:25	0:0	6	playlists
op	73:34	0:0	6	[
water	73:35	0:0	6	minplaylist
op	73:46	0:0	6	]
op	73:47	0:0	6	->
water	73:49	0:0	6	pkt
water	73:53	0:0	4	;
if	74:8	77:59	4	(pkt -> dts != AV_NOPTS_VALUE)
cond	74:12	74:24	5	pkt -> dts != AV_NOPTS_VALUE
water	74:12	0:0	6	pkt
op	74:15	0:0	6	->
water	74:17	0:0	6	dts
op	74:21	0:0	6	!=
water	74:24	0:0	6	AV_NOPTS_VALUE
stmts	75:12	77:59	5	
water	75:12	0:0	6	c
op	75:13	0:0	6	->
water	75:15	0:0	6	cur_timestamp
op	75:29	0:0	6	=
call	75:31	77:58	6	av_rescale_q
arg	75:44	75:52	7	pkt->dts
water	75:44	0:0	8	pkt
op	75:47	0:0	8	->
water	75:49	0:0	8	dts
arg	76:44	76:95	7	pls->ctx->streams[pls->pkt.stream_index]->time_base
water	76:44	0:0	8	pls
op	76:47	0:0	8	->
water	76:49	0:0	8	ctx
op	76:52	0:0	8	->
water	76:54	0:0	8	streams
op	76:61	0:0	8	[
water	76:62	0:0	8	pls
op	76:65	0:0	8	->
water	76:67	0:0	8	pkt
op	76:70	0:0	8	.
water	76:71	0:0	8	stream_index
op	76:83	0:0	8	]
op	76:84	0:0	8	->
water	76:86	0:0	8	time_base
arg	77:44	77:58	7	AV_TIME_BASE_Q
water	77:44	0:0	8	AV_TIME_BASE_Q
water	77:59	0:0	6	;
return	78:8	78:16	4	0
water	78:15	0:0	5	0
water	79:4	0:0	4	}
return	80:4	80:22	2	AVERROR_EOF
water	80:11	0:0	3	AVERROR_EOF
