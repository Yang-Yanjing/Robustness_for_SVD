func	1:0	71:0	0	static void	print_codec
params	1:23	0:0	1	
param	1:24	1:40	2	const AVCodec *	c
stmnts	0:0	70:4	1	
decl	3:4	3:40	2	int	encoder
op	3:16	0:0	2	=
call	3:18	3:39	3	av_codec_is_encoder
arg	3:38	3:39	4	c
water	3:38	0:0	5	c
call	4:4	5:43	2	printf
arg	4:11	4:26	3	"%s %s [%s]:\n"
water	4:11	0:0	4	"%s %s [%s]:\n"
arg	4:28	4:59	3	encoder?"Encoder":"Decoder"
water	4:28	0:0	4	encoder
water	4:36	0:0	4	?
water	4:38	0:0	4	"Encoder"
water	4:48	0:0	4	:
water	4:50	0:0	4	"Decoder"
arg	4:61	4:68	3	c->name
water	4:61	0:0	4	c
op	4:62	0:0	4	->
water	4:64	0:0	4	name
arg	5:11	5:43	3	c->long_name?c->long_name:""
water	5:11	0:0	4	c
op	5:12	0:0	4	->
water	5:14	0:0	4	long_name
water	5:24	0:0	4	?
water	5:26	0:0	4	c
op	5:27	0:0	4	->
water	5:29	0:0	4	long_name
water	5:39	0:0	4	:
water	5:41	0:0	4	""
water	5:44	0:0	2	;
call	6:4	6:39	2	printf
arg	6:11	6:39	3	"    General capabilities: "
water	6:11	0:0	4	"    General capabilities: "
water	6:40	0:0	2	;
if	7:4	8:28	2	(c -> capabilities & AV_CODEC_CAP_DRAW_HORIZ_BAND)
cond	7:8	7:26	3	c -> capabilities & AV_CODEC_CAP_DRAW_HORIZ_BAND
water	7:8	0:0	4	c
op	7:9	0:0	4	->
water	7:11	0:0	4	capabilities
op	7:24	0:0	4	&
water	7:26	0:0	4	AV_CODEC_CAP_DRAW_HORIZ_BAND
stmts	8:8	8:28	3	
call	8:8	8:27	4	printf
arg	8:15	8:27	5	"horizband "
water	8:15	0:0	6	"horizband "
water	8:28	0:0	4	;
if	9:4	10:22	2	(c -> capabilities & AV_CODEC_CAP_DR1)
cond	9:8	9:26	3	c -> capabilities & AV_CODEC_CAP_DR1
water	9:8	0:0	4	c
op	9:9	0:0	4	->
water	9:11	0:0	4	capabilities
op	9:24	0:0	4	&
water	9:26	0:0	4	AV_CODEC_CAP_DR1
stmts	10:8	10:22	3	
call	10:8	10:21	4	printf
arg	10:15	10:21	5	"dr1 "
water	10:15	0:0	6	"dr1 "
water	10:22	0:0	4	;
if	11:4	12:24	2	(c -> capabilities & AV_CODEC_CAP_TRUNCATED)
cond	11:8	11:26	3	c -> capabilities & AV_CODEC_CAP_TRUNCATED
water	11:8	0:0	4	c
op	11:9	0:0	4	->
water	11:11	0:0	4	capabilities
op	11:24	0:0	4	&
water	11:26	0:0	4	AV_CODEC_CAP_TRUNCATED
stmts	12:8	12:24	3	
call	12:8	12:23	4	printf
arg	12:15	12:23	5	"trunc "
water	12:15	0:0	6	"trunc "
water	12:24	0:0	4	;
if	13:4	14:24	2	(c -> capabilities & AV_CODEC_CAP_DELAY)
cond	13:8	13:26	3	c -> capabilities & AV_CODEC_CAP_DELAY
water	13:8	0:0	4	c
op	13:9	0:0	4	->
water	13:11	0:0	4	capabilities
op	13:24	0:0	4	&
water	13:26	0:0	4	AV_CODEC_CAP_DELAY
stmts	14:8	14:24	3	
call	14:8	14:23	4	printf
arg	14:15	14:23	5	"delay "
water	14:15	0:0	6	"delay "
water	14:24	0:0	4	;
if	15:4	16:24	2	(c -> capabilities & AV_CODEC_CAP_SMALL_LAST_FRAME)
cond	15:8	15:26	3	c -> capabilities & AV_CODEC_CAP_SMALL_LAST_FRAME
water	15:8	0:0	4	c
op	15:9	0:0	4	->
water	15:11	0:0	4	capabilities
op	15:24	0:0	4	&
water	15:26	0:0	4	AV_CODEC_CAP_SMALL_LAST_FRAME
stmts	16:8	16:24	3	
call	16:8	16:23	4	printf
arg	16:15	16:23	5	"small "
water	16:15	0:0	6	"small "
water	16:24	0:0	4	;
if	17:4	18:28	2	(c -> capabilities & AV_CODEC_CAP_SUBFRAMES)
cond	17:8	17:26	3	c -> capabilities & AV_CODEC_CAP_SUBFRAMES
water	17:8	0:0	4	c
op	17:9	0:0	4	->
water	17:11	0:0	4	capabilities
op	17:24	0:0	4	&
water	17:26	0:0	4	AV_CODEC_CAP_SUBFRAMES
stmts	18:8	18:28	3	
call	18:8	18:27	4	printf
arg	18:15	18:27	5	"subframes "
water	18:15	0:0	6	"subframes "
water	18:28	0:0	4	;
if	19:4	20:22	2	(c -> capabilities & AV_CODEC_CAP_EXPERIMENTAL)
cond	19:8	19:26	3	c -> capabilities & AV_CODEC_CAP_EXPERIMENTAL
water	19:8	0:0	4	c
op	19:9	0:0	4	->
water	19:11	0:0	4	capabilities
op	19:24	0:0	4	&
water	19:26	0:0	4	AV_CODEC_CAP_EXPERIMENTAL
stmts	20:8	20:22	3	
call	20:8	20:21	4	printf
arg	20:15	20:21	5	"exp "
water	20:15	0:0	6	"exp "
water	20:22	0:0	4	;
if	21:4	22:25	2	(c -> capabilities & AV_CODEC_CAP_CHANNEL_CONF)
cond	21:8	21:26	3	c -> capabilities & AV_CODEC_CAP_CHANNEL_CONF
water	21:8	0:0	4	c
op	21:9	0:0	4	->
water	21:11	0:0	4	capabilities
op	21:24	0:0	4	&
water	21:26	0:0	4	AV_CODEC_CAP_CHANNEL_CONF
stmts	22:8	22:25	3	
call	22:8	22:24	4	printf
arg	22:15	22:24	5	"chconf "
water	22:15	0:0	6	"chconf "
water	22:25	0:0	4	;
if	23:4	24:30	2	(c -> capabilities & AV_CODEC_CAP_PARAM_CHANGE)
cond	23:8	23:26	3	c -> capabilities & AV_CODEC_CAP_PARAM_CHANGE
water	23:8	0:0	4	c
op	23:9	0:0	4	->
water	23:11	0:0	4	capabilities
op	23:24	0:0	4	&
water	23:26	0:0	4	AV_CODEC_CAP_PARAM_CHANGE
stmts	24:8	24:30	3	
call	24:8	24:29	4	printf
arg	24:15	24:29	5	"paramchange "
water	24:15	0:0	6	"paramchange "
water	24:30	0:0	4	;
if	25:4	26:27	2	(c -> capabilities & AV_CODEC_CAP_VARIABLE_FRAME_SIZE)
cond	25:8	25:26	3	c -> capabilities & AV_CODEC_CAP_VARIABLE_FRAME_SIZE
water	25:8	0:0	4	c
op	25:9	0:0	4	->
water	25:11	0:0	4	capabilities
op	25:24	0:0	4	&
water	25:26	0:0	4	AV_CODEC_CAP_VARIABLE_FRAME_SIZE
stmts	26:8	26:27	3	
call	26:8	26:26	4	printf
arg	26:15	26:26	5	"variable "
water	26:15	0:0	6	"variable "
water	26:27	0:0	4	;
if	27:4	30:26	2	(c -> capabilities & ( AV_CODEC_CAP_FRAME_THREADS | AV_CODEC_CAP_SLICE_THREADS | AV_CODEC_CAP_AUTO_THREADS ))
cond	27:8	29:52	3	c -> capabilities & ( AV_CODEC_CAP_FRAME_THREADS | AV_CODEC_CAP_SLICE_THREADS | AV_CODEC_CAP_AUTO_THREADS )
water	27:8	0:0	4	c
op	27:9	0:0	4	->
water	27:11	0:0	4	capabilities
op	27:24	0:0	4	&
water	27:26	0:0	4	(
water	27:27	0:0	4	AV_CODEC_CAP_FRAME_THREADS
op	27:54	0:0	4	|
water	28:27	0:0	4	AV_CODEC_CAP_SLICE_THREADS
op	28:54	0:0	4	|
water	29:27	0:0	4	AV_CODEC_CAP_AUTO_THREADS
water	29:52	0:0	4	)
stmts	30:8	30:26	3	
call	30:8	30:25	4	printf
arg	30:15	30:25	5	"threads "
water	30:15	0:0	6	"threads "
water	30:26	0:0	4	;
if	31:4	32:22	2	(! c -> capabilities)
cond	31:8	31:12	3	! c -> capabilities
op	31:8	0:0	4	!
water	31:9	0:0	4	c
op	31:10	0:0	4	->
water	31:12	0:0	4	capabilities
stmts	32:8	32:22	3	
call	32:8	32:21	4	printf
arg	32:15	32:21	5	"none"
water	32:15	0:0	6	"none"
water	32:22	0:0	4	;
call	33:4	33:15	2	printf
arg	33:11	33:15	3	"\n"
water	33:11	0:0	4	"\n"
water	33:16	0:0	2	;
if	34:4	48:4	2	(c -> type == AVMEDIA_TYPE_VIDEO || c -> type == AVMEDIA_TYPE_AUDIO)
cond	34:8	35:19	3	c -> type == AVMEDIA_TYPE_VIDEO || c -> type == AVMEDIA_TYPE_AUDIO
water	34:8	0:0	4	c
op	34:9	0:0	4	->
water	34:11	0:0	4	type
op	34:16	0:0	4	==
water	34:19	0:0	4	AVMEDIA_TYPE_VIDEO
op	34:38	0:0	4	||
water	35:8	0:0	4	c
op	35:9	0:0	4	->
water	35:11	0:0	4	type
op	35:16	0:0	4	==
water	35:19	0:0	4	AVMEDIA_TYPE_AUDIO
stmts	35:39	48:4	3	
water	35:39	0:0	4	{
call	36:8	36:45	4	printf
arg	36:15	36:45	5	"    Threading capabilities: "
water	36:15	0:0	6	"    Threading capabilities: "
water	36:46	0:0	4	;
switch	37:8	46:8	4	(c -> capabilities & ( AV_CODEC_CAP_FRAME_THREADS | AV_CODEC_CAP_SLICE_THREADS | AV_CODEC_CAP_AUTO_THREADS ))
cond	37:16	39:60	5	c -> capabilities & ( AV_CODEC_CAP_FRAME_THREADS | AV_CODEC_CAP_SLICE_THREADS | AV_CODEC_CAP_AUTO_THREADS )
water	37:16	0:0	6	c
op	37:17	0:0	6	->
water	37:19	0:0	6	capabilities
op	37:32	0:0	6	&
water	37:34	0:0	6	(
water	37:35	0:0	6	AV_CODEC_CAP_FRAME_THREADS
op	37:62	0:0	6	|
water	38:35	0:0	6	AV_CODEC_CAP_SLICE_THREADS
op	38:62	0:0	6	|
water	39:35	0:0	6	AV_CODEC_CAP_AUTO_THREADS
water	39:60	0:0	6	)
stmts	39:63	46:8	5	
water	39:63	0:0	6	{
water	40:8	0:0	6	case
water	40:13	0:0	6	AV_CODEC_CAP_FRAME_THREADS
op	40:40	0:0	6	|
water	41:13	0:0	6	AV_CODEC_CAP_SLICE_THREADS
water	41:39	0:0	6	:
call	41:41	41:65	6	printf
arg	41:48	41:65	7	"frame and slice"
water	41:48	0:0	8	"frame and slice"
water	41:66	0:0	6	;
break	41:68	41:73	6	
label	42:8	42:39	6	case AV_CODEC_CAP_FRAME_THREADS :
call	42:41	42:55	6	printf
arg	42:48	42:55	7	"frame"
water	42:48	0:0	8	"frame"
water	42:56	0:0	6	;
break	42:68	42:73	6	
label	43:8	43:39	6	case AV_CODEC_CAP_SLICE_THREADS :
call	43:41	43:55	6	printf
arg	43:48	43:55	7	"slice"
water	43:48	0:0	8	"slice"
water	43:56	0:0	6	;
break	43:68	43:73	6	
label	44:8	44:39	6	case AV_CODEC_CAP_AUTO_THREADS :
call	44:41	44:54	6	printf
arg	44:48	44:54	7	"auto"
water	44:48	0:0	8	"auto"
water	44:55	0:0	6	;
break	44:68	44:73	6	
label	45:8	45:15	6	default :
call	45:41	45:54	6	printf
arg	45:48	45:54	7	"none"
water	45:48	0:0	8	"none"
water	45:55	0:0	6	;
break	45:68	45:73	6	
water	46:8	0:0	6	}
call	47:8	47:19	4	printf
arg	47:15	47:19	5	"\n"
water	47:15	0:0	6	"\n"
water	47:20	0:0	4	;
water	48:4	0:0	4	}
if	49:4	57:4	2	(c -> supported_framerates)
cond	49:8	49:11	3	c -> supported_framerates
water	49:8	0:0	4	c
op	49:9	0:0	4	->
water	49:11	0:0	4	supported_framerates
stmts	49:33	57:4	3	
water	49:33	0:0	4	{
decl	50:8	50:55	4	const AVRational	*fps
op	50:30	0:0	4	=
water	50:32	0:0	4	c
op	50:33	0:0	4	->
water	50:35	0:0	4	supported_framerates
call	51:8	51:42	4	printf
arg	51:15	51:42	5	"    Supported framerates:"
water	51:15	0:0	6	"    Supported framerates:"
water	51:43	0:0	4	;
while	52:8	55:8	4	(fps -> num)
cond	52:15	52:20	5	fps -> num
water	52:15	0:0	6	fps
op	52:18	0:0	6	->
water	52:20	0:0	6	num
stmts	52:25	55:8	5	
water	52:25	0:0	6	{
call	53:12	53:47	6	printf
arg	53:19	53:27	7	" %d/%d"
water	53:19	0:0	8	" %d/%d"
arg	53:29	53:37	7	fps->num
water	53:29	0:0	8	fps
op	53:32	0:0	8	->
water	53:34	0:0	8	num
arg	53:39	53:47	7	fps->den
water	53:39	0:0	8	fps
op	53:42	0:0	8	->
water	53:44	0:0	8	den
water	53:48	0:0	6	;
water	54:12	0:0	6	fps
op	54:15	0:0	6	++
water	54:17	0:0	6	;
water	55:8	0:0	6	}
call	56:8	56:19	4	printf
arg	56:15	56:19	5	"\n"
water	56:15	0:0	6	"\n"
water	56:20	0:0	4	;
water	57:4	0:0	4	}
call	58:4	59:59	2	PRINT_CODEC_SUPPORTED
arg	58:26	58:27	3	c
water	58:26	0:0	4	c
arg	58:29	58:37	3	pix_fmts
water	58:29	0:0	4	pix_fmts
arg	58:39	58:57	3	enumAVPixelFormat
water	58:39	0:0	4	enum
water	58:44	0:0	4	AVPixelFormat
arg	58:59	58:74	3	"pixel formats"
water	58:59	0:0	4	"pixel formats"
arg	59:26	59:41	3	AV_PIX_FMT_NONE
water	59:26	0:0	4	AV_PIX_FMT_NONE
arg	59:43	59:59	3	GET_PIX_FMT_NAME
water	59:43	0:0	4	GET_PIX_FMT_NAME
water	59:60	0:0	2	;
call	60:4	61:46	2	PRINT_CODEC_SUPPORTED
arg	60:26	60:27	3	c
water	60:26	0:0	4	c
arg	60:29	60:50	3	supported_samplerates
water	60:29	0:0	4	supported_samplerates
arg	60:52	60:55	3	int
water	60:52	0:0	4	int
arg	60:57	60:71	3	"sample rates"
water	60:57	0:0	4	"sample rates"
arg	60:73	60:74	3	0
water	60:73	0:0	4	0
arg	61:26	61:46	3	GET_SAMPLE_RATE_NAME
water	61:26	0:0	4	GET_SAMPLE_RATE_NAME
water	61:47	0:0	2	;
call	62:4	63:65	2	PRINT_CODEC_SUPPORTED
arg	62:26	62:27	3	c
water	62:26	0:0	4	c
arg	62:29	62:40	3	sample_fmts
water	62:29	0:0	4	sample_fmts
arg	62:42	62:61	3	enumAVSampleFormat
water	62:42	0:0	4	enum
water	62:47	0:0	4	AVSampleFormat
arg	62:63	62:79	3	"sample formats"
water	62:63	0:0	4	"sample formats"
arg	63:26	63:44	3	AV_SAMPLE_FMT_NONE
water	63:26	0:0	4	AV_SAMPLE_FMT_NONE
arg	63:46	63:65	3	GET_SAMPLE_FMT_NAME
water	63:46	0:0	4	GET_SAMPLE_FMT_NAME
water	63:66	0:0	2	;
call	64:4	65:47	2	PRINT_CODEC_SUPPORTED
arg	64:26	64:27	3	c
water	64:26	0:0	4	c
arg	64:29	64:44	3	channel_layouts
water	64:29	0:0	4	channel_layouts
arg	64:46	64:54	3	uint64_t
water	64:46	0:0	4	uint64_t
arg	64:56	64:73	3	"channel layouts"
water	64:56	0:0	4	"channel layouts"
arg	65:26	65:27	3	0
water	65:26	0:0	4	0
arg	65:29	65:47	3	GET_CH_LAYOUT_DESC
water	65:29	0:0	4	GET_CH_LAYOUT_DESC
water	65:48	0:0	2	;
if	66:4	70:4	2	(c -> priv_class)
cond	66:8	66:11	3	c -> priv_class
water	66:8	0:0	4	c
op	66:9	0:0	4	->
water	66:11	0:0	4	priv_class
stmts	66:23	70:4	3	
water	66:23	0:0	4	{
call	67:8	69:53	4	show_help_children
arg	67:27	67:40	5	c->priv_class
water	67:27	0:0	6	c
op	67:28	0:0	6	->
water	67:30	0:0	6	priv_class
arg	68:27	69:53	5	AV_OPT_FLAG_ENCODING_PARAM|AV_OPT_FLAG_DECODING_PARAM
water	68:27	0:0	6	AV_OPT_FLAG_ENCODING_PARAM
op	68:54	0:0	6	|
water	69:27	0:0	6	AV_OPT_FLAG_DECODING_PARAM
water	69:54	0:0	4	;
water	70:4	0:0	4	}
