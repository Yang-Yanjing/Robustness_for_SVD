func	1:0	121:0	0	static void	video_encode_example
params	1:32	0:0	1	
param	1:33	1:53	2	const char *	filename
param	1:55	1:67	2	int	codec_id
stmnts	0:0	120:16	1	
decl	3:4	3:18	2	AVCodec	*codec
decl	4:4	4:27	2	AVCodecContext	*c
op	4:21	0:0	2	=
water	4:23	0:0	2	NULL
decl	5:4	5:32	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:32	2	int	ret
water	5:14	0:0	2	,
decl	5:4	5:32	2	int	x
water	5:17	0:0	2	,
decl	5:4	5:32	2	int	y
water	5:20	0:0	2	,
decl	5:4	5:32	2	int	got_output
decl	6:4	6:11	2	FILE	*f
decl	7:4	7:18	2	AVFrame	*frame
decl	8:4	8:16	2	AVPacket	pkt
decl	9:4	9:41	2	uint8_t	endcode[]
op	9:22	0:0	2	=
water	9:24	0:0	2	{
water	9:26	0:0	2	0
water	9:27	0:0	2	,
water	9:29	0:0	2	0
water	9:30	0:0	2	,
water	9:32	0:0	2	1
water	9:33	0:0	2	,
water	9:35	0:0	2	0
water	9:36	0:0	2	xb7
water	9:40	0:0	2	}
call	10:4	10:45	2	printf
arg	10:11	10:35	3	"Encode video file %s\n"
water	10:11	0:0	4	"Encode video file %s\n"
arg	10:37	10:45	3	filename
water	10:37	0:0	4	filename
water	10:46	0:0	2	;
water	12:4	0:0	2	codec
op	12:10	0:0	2	=
call	12:12	12:41	2	avcodec_find_encoder
arg	12:33	12:41	3	codec_id
water	12:33	0:0	4	codec_id
water	12:42	0:0	2	;
if	13:4	16:4	2	(! codec)
cond	13:8	13:9	3	! codec
op	13:8	0:0	4	!
water	13:9	0:0	4	codec
stmts	13:16	16:4	3	
water	13:16	0:0	4	{
call	14:8	14:43	4	fprintf
arg	14:16	14:22	5	stderr
water	14:16	0:0	6	stderr
arg	14:24	14:43	5	"Codec not found\n"
water	14:24	0:0	6	"Codec not found\n"
water	14:44	0:0	4	;
call	15:8	15:14	4	exit
arg	15:13	15:14	5	1
water	15:13	0:0	6	1
water	15:15	0:0	4	;
water	16:4	0:0	4	}
water	17:4	0:0	2	c
op	17:6	0:0	2	=
call	17:8	17:36	2	avcodec_alloc_context3
arg	17:31	17:36	3	codec
water	17:31	0:0	4	codec
water	17:37	0:0	2	;
if	18:4	21:4	2	(! c)
cond	18:8	18:9	3	! c
op	18:8	0:0	4	!
water	18:9	0:0	4	c
stmts	18:12	21:4	3	
water	18:12	0:0	4	{
call	19:8	19:66	4	fprintf
arg	19:16	19:22	5	stderr
water	19:16	0:0	6	stderr
arg	19:24	19:66	5	"Could not allocate video codec context\n"
water	19:24	0:0	6	"Could not allocate video codec context\n"
water	19:67	0:0	4	;
call	20:8	20:14	4	exit
arg	20:13	20:14	5	1
water	20:13	0:0	6	1
water	20:15	0:0	4	;
water	21:4	0:0	4	}
water	23:4	0:0	2	c
op	23:5	0:0	2	->
water	23:7	0:0	2	bit_rate
op	23:16	0:0	2	=
water	23:18	0:0	2	400000
water	23:24	0:0	2	;
water	25:4	0:0	2	c
op	25:5	0:0	2	->
water	25:7	0:0	2	width
op	25:13	0:0	2	=
water	25:15	0:0	2	352
water	25:18	0:0	2	;
water	26:4	0:0	2	c
op	26:5	0:0	2	->
water	26:7	0:0	2	height
op	26:14	0:0	2	=
water	26:16	0:0	2	288
water	26:19	0:0	2	;
water	28:4	0:0	2	c
op	28:5	0:0	2	->
water	28:7	0:0	2	time_base
op	28:17	0:0	2	=
water	28:19	0:0	2	(
water	28:20	0:0	2	AVRational
water	28:30	0:0	2	)
water	28:31	0:0	2	{
water	28:32	0:0	2	1
water	28:33	0:0	2	,
water	28:34	0:0	2	25
water	28:36	0:0	2	}
water	28:37	0:0	2	;
water	35:4	0:0	2	c
op	35:5	0:0	2	->
water	35:7	0:0	2	gop_size
op	35:16	0:0	2	=
water	35:18	0:0	2	10
water	35:20	0:0	2	;
water	36:4	0:0	2	c
op	36:5	0:0	2	->
water	36:7	0:0	2	max_b_frames
op	36:20	0:0	2	=
water	36:22	0:0	2	1
water	36:23	0:0	2	;
water	37:4	0:0	2	c
op	37:5	0:0	2	->
water	37:7	0:0	2	pix_fmt
op	37:15	0:0	2	=
water	37:17	0:0	2	AV_PIX_FMT_YUV420P
water	37:35	0:0	2	;
if	38:4	39:53	2	(codec_id == AV_CODEC_ID_H264)
cond	38:8	38:20	3	codec_id == AV_CODEC_ID_H264
water	38:8	0:0	4	codec_id
op	38:17	0:0	4	==
water	38:20	0:0	4	AV_CODEC_ID_H264
stmts	39:8	39:53	3	
call	39:8	39:52	4	av_opt_set
arg	39:19	39:31	5	c->priv_data
water	39:19	0:0	6	c
op	39:20	0:0	6	->
water	39:22	0:0	6	priv_data
arg	39:33	39:41	5	"preset"
water	39:33	0:0	6	"preset"
arg	39:43	39:49	5	"slow"
water	39:43	0:0	6	"slow"
arg	39:51	39:52	5	0
water	39:51	0:0	6	0
water	39:53	0:0	4	;
if	41:4	44:4	2	(avcodec_open2 (c ,codec ,NULL ) < 0)
cond	41:8	41:40	3	avcodec_open2 (c ,codec ,NULL ) < 0
call	41:8	41:36	4	avcodec_open2
arg	41:22	41:23	5	c
water	41:22	0:0	6	c
arg	41:25	41:30	5	codec
water	41:25	0:0	6	codec
arg	41:32	41:36	5	NULL
water	41:32	0:0	6	NULL
op	41:38	0:0	4	<
water	41:40	0:0	4	0
stmts	41:43	44:4	3	
water	41:43	0:0	4	{
call	42:8	42:48	4	fprintf
arg	42:16	42:22	5	stderr
water	42:16	0:0	6	stderr
arg	42:24	42:48	5	"Could not open codec\n"
water	42:24	0:0	6	"Could not open codec\n"
water	42:49	0:0	4	;
call	43:8	43:14	4	exit
arg	43:13	43:14	5	1
water	43:13	0:0	6	1
water	43:15	0:0	4	;
water	44:4	0:0	4	}
water	45:4	0:0	2	f
op	45:6	0:0	2	=
call	45:8	45:28	2	fopen
arg	45:14	45:22	3	filename
water	45:14	0:0	4	filename
arg	45:24	45:28	3	"wb"
water	45:24	0:0	4	"wb"
water	45:29	0:0	2	;
if	46:4	49:4	2	(! f)
cond	46:8	46:9	3	! f
op	46:8	0:0	4	!
water	46:9	0:0	4	f
stmts	46:12	49:4	3	
water	46:12	0:0	4	{
call	47:8	47:55	4	fprintf
arg	47:16	47:22	5	stderr
water	47:16	0:0	6	stderr
arg	47:24	47:45	5	"Could not open %s\n"
water	47:24	0:0	6	"Could not open %s\n"
arg	47:47	47:55	5	filename
water	47:47	0:0	6	filename
water	47:56	0:0	4	;
call	48:8	48:14	4	exit
arg	48:13	48:14	5	1
water	48:13	0:0	6	1
water	48:15	0:0	4	;
water	49:4	0:0	4	}
water	50:4	0:0	2	frame
op	50:10	0:0	2	=
call	50:12	50:27	2	av_frame_alloc
water	50:28	0:0	2	;
if	51:4	54:4	2	(! frame)
cond	51:8	51:9	3	! frame
op	51:8	0:0	4	!
water	51:9	0:0	4	frame
stmts	51:16	54:4	3	
water	51:16	0:0	4	{
call	52:8	52:58	4	fprintf
arg	52:16	52:22	5	stderr
water	52:16	0:0	6	stderr
arg	52:24	52:58	5	"Could not allocate video frame\n"
water	52:24	0:0	6	"Could not allocate video frame\n"
water	52:59	0:0	4	;
call	53:8	53:14	4	exit
arg	53:13	53:14	5	1
water	53:13	0:0	6	1
water	53:15	0:0	4	;
water	54:4	0:0	4	}
water	55:4	0:0	2	frame
op	55:9	0:0	2	->
water	55:11	0:0	2	format
op	55:18	0:0	2	=
water	55:20	0:0	2	c
op	55:21	0:0	2	->
water	55:23	0:0	2	pix_fmt
water	55:30	0:0	2	;
water	56:4	0:0	2	frame
op	56:9	0:0	2	->
water	56:11	0:0	2	width
op	56:18	0:0	2	=
water	56:20	0:0	2	c
op	56:21	0:0	2	->
water	56:23	0:0	2	width
water	56:28	0:0	2	;
water	57:4	0:0	2	frame
op	57:9	0:0	2	->
water	57:11	0:0	2	height
op	57:18	0:0	2	=
water	57:20	0:0	2	c
op	57:21	0:0	2	->
water	57:23	0:0	2	height
water	57:29	0:0	2	;
water	60:4	0:0	2	ret
op	60:8	0:0	2	=
call	60:10	61:39	2	av_image_alloc
arg	60:25	60:36	3	frame->data
water	60:25	0:0	4	frame
op	60:30	0:0	4	->
water	60:32	0:0	4	data
arg	60:38	60:53	3	frame->linesize
water	60:38	0:0	4	frame
op	60:43	0:0	4	->
water	60:45	0:0	4	linesize
arg	60:55	60:63	3	c->width
water	60:55	0:0	4	c
op	60:56	0:0	4	->
water	60:58	0:0	4	width
arg	60:65	60:74	3	c->height
water	60:65	0:0	4	c
op	60:66	0:0	4	->
water	60:68	0:0	4	height
arg	61:25	61:35	3	c->pix_fmt
water	61:25	0:0	4	c
op	61:26	0:0	4	->
water	61:28	0:0	4	pix_fmt
arg	61:37	61:39	3	32
water	61:37	0:0	4	32
water	61:40	0:0	2	;
if	62:4	65:4	2	(ret < 0)
cond	62:8	62:14	3	ret < 0
water	62:8	0:0	4	ret
op	62:12	0:0	4	<
water	62:14	0:0	4	0
stmts	62:17	65:4	3	
water	62:17	0:0	4	{
call	63:8	63:65	4	fprintf
arg	63:16	63:22	5	stderr
water	63:16	0:0	6	stderr
arg	63:24	63:65	5	"Could not allocate raw picture buffer\n"
water	63:24	0:0	6	"Could not allocate raw picture buffer\n"
water	63:66	0:0	4	;
call	64:8	64:14	4	exit
arg	64:13	64:14	5	1
water	64:13	0:0	6	1
water	64:15	0:0	4	;
water	65:4	0:0	4	}
for	67:4	98:4	2	(i = 0 ;i < 25;i ++)
forinit	67:9	67:14	3	i = 0 ;
water	67:9	0:0	4	i
op	67:11	0:0	4	=
water	67:13	0:0	4	0
water	67:14	0:0	4	;
cond	67:16	67:20	3	i < 25
water	67:16	0:0	4	i
op	67:18	0:0	4	<
water	67:20	0:0	4	25
forexpr	67:24	67:25	3	i ++
water	67:24	0:0	4	i
op	67:25	0:0	4	++
stmts	67:29	98:4	3	
water	67:29	0:0	4	{
call	68:8	68:27	4	av_init_packet
arg	68:23	68:27	5	&pkt
op	68:23	0:0	6	&
water	68:24	0:0	6	pkt
water	68:28	0:0	4	;
water	69:8	0:0	4	pkt
op	69:11	0:0	4	.
water	69:12	0:0	4	data
op	69:17	0:0	4	=
water	69:19	0:0	4	NULL
water	69:23	0:0	4	;
water	70:8	0:0	4	pkt
op	70:11	0:0	4	.
water	70:12	0:0	4	size
op	70:17	0:0	4	=
water	70:19	0:0	4	0
water	70:20	0:0	4	;
call	71:8	71:21	4	fflush
arg	71:15	71:21	5	stdout
water	71:15	0:0	6	stdout
water	71:22	0:0	4	;
for	74:8	78:8	4	(y = 0 ;y < c -> height;y ++)
forinit	74:13	74:18	5	y = 0 ;
water	74:13	0:0	6	y
op	74:15	0:0	6	=
water	74:17	0:0	6	0
water	74:18	0:0	6	;
cond	74:20	74:27	5	y < c -> height
water	74:20	0:0	6	y
op	74:22	0:0	6	<
water	74:24	0:0	6	c
op	74:25	0:0	6	->
water	74:27	0:0	6	height
forexpr	74:35	74:36	5	y ++
water	74:35	0:0	6	y
op	74:36	0:0	6	++
stmts	74:40	78:8	5	
water	74:40	0:0	6	{
for	75:12	77:12	6	(x = 0 ;x < c -> width;x ++)
forinit	75:17	75:22	7	x = 0 ;
water	75:17	0:0	8	x
op	75:19	0:0	8	=
water	75:21	0:0	8	0
water	75:22	0:0	8	;
cond	75:24	75:31	7	x < c -> width
water	75:24	0:0	8	x
op	75:26	0:0	8	<
water	75:28	0:0	8	c
op	75:29	0:0	8	->
water	75:31	0:0	8	width
forexpr	75:38	75:39	7	x ++
water	75:38	0:0	8	x
op	75:39	0:0	8	++
stmts	75:43	77:12	7	
water	75:43	0:0	8	{
water	76:16	0:0	8	frame
op	76:21	0:0	8	->
water	76:23	0:0	8	data
op	76:27	0:0	8	[
water	76:28	0:0	8	0
op	76:29	0:0	8	]
op	76:30	0:0	8	[
water	76:31	0:0	8	y
op	76:33	0:0	8	*
water	76:35	0:0	8	frame
op	76:40	0:0	8	->
water	76:42	0:0	8	linesize
op	76:50	0:0	8	[
water	76:51	0:0	8	0
op	76:52	0:0	8	]
op	76:54	0:0	8	+
water	76:56	0:0	8	x
op	76:57	0:0	8	]
op	76:59	0:0	8	=
water	76:61	0:0	8	x
op	76:63	0:0	8	+
water	76:65	0:0	8	y
op	76:67	0:0	8	+
water	76:69	0:0	8	i
op	76:71	0:0	8	*
water	76:73	0:0	8	3
water	76:74	0:0	8	;
water	77:12	0:0	8	}
water	78:8	0:0	6	}
for	80:8	85:8	4	(y = 0 ;y < c -> height / 2;y ++)
forinit	80:13	80:18	5	y = 0 ;
water	80:13	0:0	6	y
op	80:15	0:0	6	=
water	80:17	0:0	6	0
water	80:18	0:0	6	;
cond	80:20	80:34	5	y < c -> height / 2
water	80:20	0:0	6	y
op	80:22	0:0	6	<
water	80:24	0:0	6	c
op	80:25	0:0	6	->
water	80:27	0:0	6	height
op	80:33	0:0	6	/
water	80:34	0:0	6	2
forexpr	80:37	80:38	5	y ++
water	80:37	0:0	6	y
op	80:38	0:0	6	++
stmts	80:42	85:8	5	
water	80:42	0:0	6	{
for	81:12	84:12	6	(x = 0 ;x < c -> width / 2;x ++)
forinit	81:17	81:22	7	x = 0 ;
water	81:17	0:0	8	x
op	81:19	0:0	8	=
water	81:21	0:0	8	0
water	81:22	0:0	8	;
cond	81:24	81:37	7	x < c -> width / 2
water	81:24	0:0	8	x
op	81:26	0:0	8	<
water	81:28	0:0	8	c
op	81:29	0:0	8	->
water	81:31	0:0	8	width
op	81:36	0:0	8	/
water	81:37	0:0	8	2
forexpr	81:40	81:41	7	x ++
water	81:40	0:0	8	x
op	81:41	0:0	8	++
stmts	81:45	84:12	7	
water	81:45	0:0	8	{
water	82:16	0:0	8	frame
op	82:21	0:0	8	->
water	82:23	0:0	8	data
op	82:27	0:0	8	[
water	82:28	0:0	8	1
op	82:29	0:0	8	]
op	82:30	0:0	8	[
water	82:31	0:0	8	y
op	82:33	0:0	8	*
water	82:35	0:0	8	frame
op	82:40	0:0	8	->
water	82:42	0:0	8	linesize
op	82:50	0:0	8	[
water	82:51	0:0	8	1
op	82:52	0:0	8	]
op	82:54	0:0	8	+
water	82:56	0:0	8	x
op	82:57	0:0	8	]
op	82:59	0:0	8	=
water	82:61	0:0	8	128
op	82:65	0:0	8	+
water	82:67	0:0	8	y
op	82:69	0:0	8	+
water	82:71	0:0	8	i
op	82:73	0:0	8	*
water	82:75	0:0	8	2
water	82:76	0:0	8	;
water	83:16	0:0	8	frame
op	83:21	0:0	8	->
water	83:23	0:0	8	data
op	83:27	0:0	8	[
water	83:28	0:0	8	2
op	83:29	0:0	8	]
op	83:30	0:0	8	[
water	83:31	0:0	8	y
op	83:33	0:0	8	*
water	83:35	0:0	8	frame
op	83:40	0:0	8	->
water	83:42	0:0	8	linesize
op	83:50	0:0	8	[
water	83:51	0:0	8	2
op	83:52	0:0	8	]
op	83:54	0:0	8	+
water	83:56	0:0	8	x
op	83:57	0:0	8	]
op	83:59	0:0	8	=
water	83:61	0:0	8	64
op	83:64	0:0	8	+
water	83:66	0:0	8	x
op	83:68	0:0	8	+
water	83:70	0:0	8	i
op	83:72	0:0	8	*
water	83:74	0:0	8	5
water	83:75	0:0	8	;
water	84:12	0:0	8	}
water	85:8	0:0	6	}
water	86:8	0:0	4	frame
op	86:13	0:0	4	->
water	86:15	0:0	4	pts
op	86:19	0:0	4	=
water	86:21	0:0	4	i
water	86:22	0:0	4	;
water	88:8	0:0	4	ret
op	88:12	0:0	4	=
call	88:14	88:63	4	avcodec_encode_video2
arg	88:36	88:37	5	c
water	88:36	0:0	6	c
arg	88:39	88:43	5	&pkt
op	88:39	0:0	6	&
water	88:40	0:0	6	pkt
arg	88:45	88:50	5	frame
water	88:45	0:0	6	frame
arg	88:52	88:63	5	&got_output
op	88:52	0:0	6	&
water	88:53	0:0	6	got_output
water	88:64	0:0	4	;
if	89:8	92:8	4	(ret < 0)
cond	89:12	89:18	5	ret < 0
water	89:12	0:0	6	ret
op	89:16	0:0	6	<
water	89:18	0:0	6	0
stmts	89:21	92:8	5	
water	89:21	0:0	6	{
call	90:12	90:52	6	fprintf
arg	90:20	90:26	7	stderr
water	90:20	0:0	8	stderr
arg	90:28	90:52	7	"Error encoding frame\n"
water	90:28	0:0	8	"Error encoding frame\n"
water	90:53	0:0	6	;
call	91:12	91:18	6	exit
arg	91:17	91:18	7	1
water	91:17	0:0	8	1
water	91:19	0:0	6	;
water	92:8	0:0	6	}
if	93:8	97:8	4	(got_output)
cond	93:12	93:12	5	got_output
water	93:12	0:0	6	got_output
stmts	93:24	97:8	5	
water	93:24	0:0	6	{
call	94:12	94:62	6	printf
arg	94:19	94:49	7	"Write frame %3d (size=%5d)\n"
water	94:19	0:0	8	"Write frame %3d (size=%5d)\n"
arg	94:51	94:52	7	i
water	94:51	0:0	8	i
arg	94:54	94:62	7	pkt.size
water	94:54	0:0	8	pkt
op	94:57	0:0	8	.
water	94:58	0:0	8	size
water	94:63	0:0	6	;
call	95:12	95:43	6	fwrite
arg	95:19	95:27	7	pkt.data
water	95:19	0:0	8	pkt
op	95:22	0:0	8	.
water	95:23	0:0	8	data
arg	95:29	95:30	7	1
water	95:29	0:0	8	1
arg	95:32	95:40	7	pkt.size
water	95:32	0:0	8	pkt
op	95:35	0:0	8	.
water	95:36	0:0	8	size
arg	95:42	95:43	7	f
water	95:42	0:0	8	f
water	95:44	0:0	6	;
call	96:12	96:31	6	av_free_packet
arg	96:27	96:31	7	&pkt
op	96:27	0:0	8	&
water	96:28	0:0	8	pkt
water	96:32	0:0	6	;
water	97:8	0:0	6	}
water	98:4	0:0	4	}
for	100:4	112:4	2	(got_output = 1 ;got_output;i ++)
forinit	100:9	100:23	3	got_output = 1 ;
water	100:9	0:0	4	got_output
op	100:20	0:0	4	=
water	100:22	0:0	4	1
water	100:23	0:0	4	;
cond	100:25	100:25	3	got_output
water	100:25	0:0	4	got_output
forexpr	100:37	100:38	3	i ++
water	100:37	0:0	4	i
op	100:38	0:0	4	++
stmts	100:42	112:4	3	
water	100:42	0:0	4	{
call	101:8	101:21	4	fflush
arg	101:15	101:21	5	stdout
water	101:15	0:0	6	stdout
water	101:22	0:0	4	;
water	102:8	0:0	4	ret
op	102:12	0:0	4	=
call	102:14	102:62	4	avcodec_encode_video2
arg	102:36	102:37	5	c
water	102:36	0:0	6	c
arg	102:39	102:43	5	&pkt
op	102:39	0:0	6	&
water	102:40	0:0	6	pkt
arg	102:45	102:49	5	NULL
water	102:45	0:0	6	NULL
arg	102:51	102:62	5	&got_output
op	102:51	0:0	6	&
water	102:52	0:0	6	got_output
water	102:63	0:0	4	;
if	103:8	106:8	4	(ret < 0)
cond	103:12	103:18	5	ret < 0
water	103:12	0:0	6	ret
op	103:16	0:0	6	<
water	103:18	0:0	6	0
stmts	103:21	106:8	5	
water	103:21	0:0	6	{
call	104:12	104:52	6	fprintf
arg	104:20	104:26	7	stderr
water	104:20	0:0	8	stderr
arg	104:28	104:52	7	"Error encoding frame\n"
water	104:28	0:0	8	"Error encoding frame\n"
water	104:53	0:0	6	;
call	105:12	105:18	6	exit
arg	105:17	105:18	7	1
water	105:17	0:0	8	1
water	105:19	0:0	6	;
water	106:8	0:0	6	}
if	107:8	111:8	4	(got_output)
cond	107:12	107:12	5	got_output
water	107:12	0:0	6	got_output
stmts	107:24	111:8	5	
water	107:24	0:0	6	{
call	108:12	108:62	6	printf
arg	108:19	108:49	7	"Write frame %3d (size=%5d)\n"
water	108:19	0:0	8	"Write frame %3d (size=%5d)\n"
arg	108:51	108:52	7	i
water	108:51	0:0	8	i
arg	108:54	108:62	7	pkt.size
water	108:54	0:0	8	pkt
op	108:57	0:0	8	.
water	108:58	0:0	8	size
water	108:63	0:0	6	;
call	109:12	109:43	6	fwrite
arg	109:19	109:27	7	pkt.data
water	109:19	0:0	8	pkt
op	109:22	0:0	8	.
water	109:23	0:0	8	data
arg	109:29	109:30	7	1
water	109:29	0:0	8	1
arg	109:32	109:40	7	pkt.size
water	109:32	0:0	8	pkt
op	109:35	0:0	8	.
water	109:36	0:0	8	size
arg	109:42	109:43	7	f
water	109:42	0:0	8	f
water	109:44	0:0	6	;
call	110:12	110:31	6	av_free_packet
arg	110:27	110:31	7	&pkt
op	110:27	0:0	8	&
water	110:28	0:0	8	pkt
water	110:32	0:0	6	;
water	111:8	0:0	6	}
water	112:4	0:0	4	}
call	114:4	114:41	2	fwrite
arg	114:11	114:18	3	endcode
water	114:11	0:0	4	endcode
arg	114:20	114:21	3	1
water	114:20	0:0	4	1
arg	114:23	114:38	3	sizeof(endcode)
op	114:23	0:0	4	sizeof
water	114:29	0:0	4	(
water	114:30	0:0	4	endcode
water	114:37	0:0	4	)
arg	114:40	114:41	3	f
water	114:40	0:0	4	f
water	114:42	0:0	2	;
call	115:4	115:12	2	fclose
arg	115:11	115:12	3	f
water	115:11	0:0	4	f
water	115:13	0:0	2	;
call	116:4	116:19	2	avcodec_close
arg	116:18	116:19	3	c
water	116:18	0:0	4	c
water	116:20	0:0	2	;
call	117:4	117:13	2	av_free
arg	117:12	117:13	3	c
water	117:12	0:0	4	c
water	117:14	0:0	2	;
call	118:4	118:28	2	av_freep
arg	118:13	118:28	3	&frame->data[0]
op	118:13	0:0	4	&
water	118:14	0:0	4	frame
op	118:19	0:0	4	->
water	118:21	0:0	4	data
op	118:25	0:0	4	[
water	118:26	0:0	4	0
op	118:27	0:0	4	]
water	118:29	0:0	2	;
call	119:4	119:24	2	av_frame_free
arg	119:18	119:24	3	&frame
op	119:18	0:0	4	&
water	119:19	0:0	4	frame
water	119:25	0:0	2	;
call	120:4	120:15	2	printf
arg	120:11	120:15	3	"\n"
water	120:11	0:0	4	"\n"
water	120:16	0:0	2	;
