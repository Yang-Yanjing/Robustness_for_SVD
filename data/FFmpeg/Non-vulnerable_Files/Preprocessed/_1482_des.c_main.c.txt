func	1:0	58:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	0:0	57:12	1	
decl	2:4	2:11	2	AVDES	d
decl	3:4	3:9	2	int	i
decl	5:4	5:9	2	int	j
decl	7:4	7:19	2	uint64_t	key[3]
decl	8:4	8:17	2	uint64_t	data
decl	9:4	9:15	2	uint64_t	ct
decl	10:4	10:26	2	uint64_t	roundkeys[16]
call	11:4	11:22	2	srand
arg	11:10	11:22	3	av_gettime()
call	11:10	11:21	4	av_gettime
water	11:23	0:0	2	;
water	12:4	0:0	2	key
op	12:7	0:0	2	[
water	12:8	0:0	2	0
op	12:9	0:0	2	]
op	12:11	0:0	2	=
call	12:13	12:29	2	AV_RB64
arg	12:21	12:29	3	test_key
water	12:21	0:0	4	test_key
water	12:30	0:0	2	;
water	13:4	0:0	2	data
op	13:9	0:0	2	=
call	13:11	13:24	2	AV_RB64
arg	13:19	13:24	3	plain
water	13:19	0:0	4	plain
water	13:25	0:0	2	;
call	14:4	14:35	2	gen_roundkeys
arg	14:18	14:27	3	roundkeys
water	14:18	0:0	4	roundkeys
arg	14:29	14:35	3	key[0]
water	14:29	0:0	4	key
op	14:32	0:0	4	[
water	14:33	0:0	4	0
op	14:34	0:0	4	]
water	14:36	0:0	2	;
if	15:4	18:4	2	(des_encdec (data ,roundkeys ,0 ) !=AV_RB64 (crypt ))
cond	15:8	15:55	3	des_encdec (data ,roundkeys ,0 ) !=AV_RB64 (crypt )
call	15:8	15:37	4	des_encdec
arg	15:19	15:23	5	data
water	15:19	0:0	6	data
arg	15:25	15:34	5	roundkeys
water	15:25	0:0	6	roundkeys
arg	15:36	15:37	5	0
water	15:36	0:0	6	0
op	15:39	0:0	4	!=
call	15:42	15:55	4	AV_RB64
arg	15:50	15:55	5	crypt
water	15:50	0:0	6	crypt
stmts	15:58	18:4	3	
water	15:58	0:0	4	{
call	16:8	16:32	4	printf
arg	16:15	16:32	5	"Test 1 failed\n"
water	16:15	0:0	6	"Test 1 failed\n"
water	16:33	0:0	4	;
return	17:8	17:16	4	1
water	17:15	0:0	5	1
water	18:4	0:0	4	}
call	19:4	19:35	2	av_des_init
arg	19:16	19:18	3	&d
op	19:16	0:0	4	&
water	19:17	0:0	4	d
arg	19:20	19:28	3	test_key
water	19:20	0:0	4	test_key
arg	19:30	19:32	3	64
water	19:30	0:0	4	64
arg	19:34	19:35	3	0
water	19:34	0:0	4	0
water	19:36	0:0	2	;
call	20:4	20:43	2	av_des_crypt
arg	20:17	20:19	3	&d
op	20:17	0:0	4	&
water	20:18	0:0	4	d
arg	20:21	20:24	3	tmp
water	20:21	0:0	4	tmp
arg	20:26	20:31	3	plain
water	20:26	0:0	4	plain
arg	20:33	20:34	3	1
water	20:33	0:0	4	1
arg	20:36	20:40	3	NULL
water	20:36	0:0	4	NULL
arg	20:42	20:43	3	0
water	20:42	0:0	4	0
water	20:44	0:0	2	;
if	21:4	24:4	2	(memcmp (tmp ,crypt ,sizeof ( crypt ) ))
cond	21:8	21:40	3	memcmp (tmp ,crypt ,sizeof ( crypt ) )
call	21:8	21:40	4	memcmp
arg	21:15	21:18	5	tmp
water	21:15	0:0	6	tmp
arg	21:20	21:25	5	crypt
water	21:20	0:0	6	crypt
arg	21:27	21:40	5	sizeof(crypt)
op	21:27	0:0	6	sizeof
water	21:33	0:0	6	(
water	21:34	0:0	6	crypt
water	21:39	0:0	6	)
stmts	21:43	24:4	3	
water	21:43	0:0	4	{
call	22:8	22:47	4	printf
arg	22:15	22:47	5	"Public API decryption failed\n"
water	22:15	0:0	6	"Public API decryption failed\n"
water	22:48	0:0	4	;
return	23:8	23:16	4	1
water	23:15	0:0	5	1
water	24:4	0:0	4	}
if	25:4	28:4	2	(!run_test (0 ,0 ) || !run_test (0 ,1 ) || !run_test (1 ,0 ) || !run_test (1 ,1 ))
cond	25:8	25:79	3	!run_test (0 ,0 ) || !run_test (0 ,1 ) || !run_test (1 ,0 ) || !run_test (1 ,1 )
op	25:8	0:0	4	!
call	25:9	25:22	4	run_test
arg	25:18	25:19	5	0
water	25:18	0:0	6	0
arg	25:21	25:22	5	0
water	25:21	0:0	6	0
op	25:24	0:0	4	||
op	25:27	0:0	4	!
call	25:28	25:41	4	run_test
arg	25:37	25:38	5	0
water	25:37	0:0	6	0
arg	25:40	25:41	5	1
water	25:40	0:0	6	1
op	25:43	0:0	4	||
op	25:46	0:0	4	!
call	25:47	25:60	4	run_test
arg	25:56	25:57	5	1
water	25:56	0:0	6	1
arg	25:59	25:60	5	0
water	25:59	0:0	6	0
op	25:62	0:0	4	||
op	25:65	0:0	4	!
call	25:66	25:79	4	run_test
arg	25:75	25:76	5	1
water	25:75	0:0	6	1
arg	25:78	25:79	5	1
water	25:78	0:0	6	1
stmts	25:82	28:4	3	
water	25:82	0:0	4	{
call	26:8	26:50	4	printf
arg	26:15	26:50	5	"Partial Monte-Carlo test failed\n"
water	26:15	0:0	6	"Partial Monte-Carlo test failed\n"
water	26:51	0:0	4	;
return	27:8	27:16	4	1
water	27:15	0:0	5	1
water	28:4	0:0	4	}
for	29:4	40:4	2	(i = 0 ;i < 1000;i ++)
forinit	29:9	29:14	3	i = 0 ;
water	29:9	0:0	4	i
op	29:11	0:0	4	=
water	29:13	0:0	4	0
water	29:14	0:0	4	;
cond	29:16	29:20	3	i < 1000
water	29:16	0:0	4	i
op	29:18	0:0	4	<
water	29:20	0:0	4	1000
forexpr	29:26	29:27	3	i ++
water	29:26	0:0	4	i
op	29:27	0:0	4	++
stmts	29:31	40:4	3	
water	29:31	0:0	4	{
water	30:8	0:0	4	key
op	30:11	0:0	4	[
water	30:12	0:0	4	0
op	30:13	0:0	4	]
op	30:15	0:0	4	=
call	30:17	30:24	4	rand64
water	30:25	0:0	4	;
water	30:27	0:0	4	key
op	30:30	0:0	4	[
water	30:31	0:0	4	1
op	30:32	0:0	4	]
op	30:34	0:0	4	=
call	30:36	30:43	4	rand64
water	30:44	0:0	4	;
water	30:46	0:0	4	key
op	30:49	0:0	4	[
water	30:50	0:0	4	2
op	30:51	0:0	4	]
op	30:53	0:0	4	=
call	30:55	30:62	4	rand64
water	30:63	0:0	4	;
water	31:8	0:0	4	data
op	31:13	0:0	4	=
call	31:15	31:22	4	rand64
water	31:23	0:0	4	;
call	32:8	32:45	4	av_des_init
arg	32:20	32:22	5	&d
op	32:20	0:0	6	&
water	32:21	0:0	6	d
arg	32:24	32:37	5	(uint8_t*)key
water	32:24	0:0	6	(
water	32:25	0:0	6	uint8_t
op	32:32	0:0	6	*
water	32:33	0:0	6	)
water	32:34	0:0	6	key
arg	32:39	32:42	5	192
water	32:39	0:0	6	192
arg	32:44	32:45	5	0
water	32:44	0:0	6	0
water	32:46	0:0	4	;
call	33:8	33:67	4	av_des_crypt
arg	33:21	33:23	5	&d
op	33:21	0:0	6	&
water	33:22	0:0	6	d
arg	33:25	33:38	5	(uint8_t*)&ct
water	33:25	0:0	6	(
water	33:26	0:0	6	uint8_t
op	33:33	0:0	6	*
water	33:34	0:0	6	)
op	33:35	0:0	6	&
water	33:36	0:0	6	ct
arg	33:40	33:55	5	(uint8_t*)&data
water	33:40	0:0	6	(
water	33:41	0:0	6	uint8_t
op	33:48	0:0	6	*
water	33:49	0:0	6	)
op	33:50	0:0	6	&
water	33:51	0:0	6	data
arg	33:57	33:58	5	1
water	33:57	0:0	6	1
arg	33:60	33:64	5	NULL
water	33:60	0:0	6	NULL
arg	33:66	33:67	5	0
water	33:66	0:0	6	0
water	33:68	0:0	4	;
call	34:8	34:45	4	av_des_init
arg	34:20	34:22	5	&d
op	34:20	0:0	6	&
water	34:21	0:0	6	d
arg	34:24	34:37	5	(uint8_t*)key
water	34:24	0:0	6	(
water	34:25	0:0	6	uint8_t
op	34:32	0:0	6	*
water	34:33	0:0	6	)
water	34:34	0:0	6	key
arg	34:39	34:42	5	192
water	34:39	0:0	6	192
arg	34:44	34:45	5	1
water	34:44	0:0	6	1
water	34:46	0:0	4	;
call	35:8	35:65	4	av_des_crypt
arg	35:21	35:23	5	&d
op	35:21	0:0	6	&
water	35:22	0:0	6	d
arg	35:25	35:38	5	(uint8_t*)&ct
water	35:25	0:0	6	(
water	35:26	0:0	6	uint8_t
op	35:33	0:0	6	*
water	35:34	0:0	6	)
op	35:35	0:0	6	&
water	35:36	0:0	6	ct
arg	35:40	35:53	5	(uint8_t*)&ct
water	35:40	0:0	6	(
water	35:41	0:0	6	uint8_t
op	35:48	0:0	6	*
water	35:49	0:0	6	)
op	35:50	0:0	6	&
water	35:51	0:0	6	ct
arg	35:55	35:56	5	1
water	35:55	0:0	6	1
arg	35:58	35:62	5	NULL
water	35:58	0:0	6	NULL
arg	35:64	35:65	5	1
water	35:64	0:0	6	1
water	35:66	0:0	4	;
if	36:8	39:8	4	(ct != data)
cond	36:12	36:18	5	ct != data
water	36:12	0:0	6	ct
op	36:15	0:0	6	!=
water	36:18	0:0	6	data
stmts	36:24	39:8	5	
water	36:24	0:0	6	{
call	37:12	37:36	6	printf
arg	37:19	37:36	7	"Test 2 failed\n"
water	37:19	0:0	8	"Test 2 failed\n"
water	37:37	0:0	6	;
return	38:12	38:20	6	1
water	38:19	0:0	7	1
water	39:8	0:0	6	}
water	40:4	0:0	4	}
call	42:4	42:65	2	printf
arg	42:11	42:65	3	"static const uint32_t S_boxes_P_shuffle[8][64] = {\n"
water	42:11	0:0	4	"static const uint32_t S_boxes_P_shuffle[8][64] = {\n"
water	42:66	0:0	2	;
for	43:4	54:4	2	(i = 0 ;i < 8;i ++)
forinit	43:9	43:14	3	i = 0 ;
water	43:9	0:0	4	i
op	43:11	0:0	4	=
water	43:13	0:0	4	0
water	43:14	0:0	4	;
cond	43:16	43:20	3	i < 8
water	43:16	0:0	4	i
op	43:18	0:0	4	<
water	43:20	0:0	4	8
forexpr	43:23	43:24	3	i ++
water	43:23	0:0	4	i
op	43:24	0:0	4	++
stmts	43:28	54:4	3	
water	43:28	0:0	4	{
call	44:8	44:22	4	printf
arg	44:15	44:22	5	"    {"
water	44:15	0:0	6	"    {"
water	44:23	0:0	4	;
for	45:8	52:8	4	(j = 0 ;j < 64;j ++)
forinit	45:13	45:18	5	j = 0 ;
water	45:13	0:0	6	j
op	45:15	0:0	6	=
water	45:17	0:0	6	0
water	45:18	0:0	6	;
cond	45:20	45:24	5	j < 64
water	45:20	0:0	6	j
op	45:22	0:0	6	<
water	45:24	0:0	6	64
forexpr	45:28	45:29	5	j ++
water	45:28	0:0	6	j
op	45:29	0:0	6	++
stmts	45:33	52:8	5	
water	45:33	0:0	6	{
decl	46:12	46:43	6	uint32_t	v
op	46:23	0:0	6	=
water	46:25	0:0	6	S_boxes
op	46:32	0:0	6	[
water	46:33	0:0	6	i
op	46:34	0:0	6	]
op	46:35	0:0	6	[
water	46:36	0:0	6	j
op	46:38	0:0	6	>>
water	46:41	0:0	6	1
op	46:42	0:0	6	]
water	47:12	0:0	6	v
op	47:14	0:0	6	=
water	47:16	0:0	6	j
op	47:18	0:0	6	&
water	47:20	0:0	6	1
water	47:22	0:0	6	?
water	47:24	0:0	6	v
op	47:26	0:0	6	>>
water	47:29	0:0	6	4
water	47:31	0:0	6	:
water	47:33	0:0	6	v
op	47:35	0:0	6	&
water	47:37	0:0	6	0
water	47:38	0:0	6	xf
water	47:40	0:0	6	;
water	48:12	0:0	6	v
op	48:14	0:0	6	<<=
water	48:18	0:0	6	28
op	48:21	0:0	6	-
water	48:23	0:0	6	4
op	48:25	0:0	6	*
water	48:27	0:0	6	i
water	48:28	0:0	6	;
water	49:12	0:0	6	v
op	49:14	0:0	6	=
call	49:16	49:55	6	shuffle
arg	49:24	49:25	7	v
water	49:24	0:0	8	v
arg	49:27	49:36	7	P_shuffle
water	49:27	0:0	8	P_shuffle
arg	49:38	49:55	7	sizeof(P_shuffle)
op	49:38	0:0	8	sizeof
water	49:44	0:0	8	(
water	49:45	0:0	8	P_shuffle
water	49:54	0:0	8	)
water	49:56	0:0	6	;
call	50:12	50:48	6	printf
arg	50:19	50:48	7	(j&7)==0?"\n    ":" "
water	50:19	0:0	8	(
water	50:20	0:0	8	j
op	50:22	0:0	8	&
water	50:24	0:0	8	7
water	50:25	0:0	8	)
op	50:27	0:0	8	==
water	50:30	0:0	8	0
water	50:32	0:0	8	?
water	50:34	0:0	8	"\n    "
water	50:43	0:0	8	:
water	50:45	0:0	8	" "
water	50:49	0:0	6	;
call	51:12	51:31	6	printf
arg	51:19	51:28	7	"0x%08X,"
water	51:19	0:0	8	"0x%08X,"
arg	51:30	51:31	7	v
water	51:30	0:0	8	v
water	51:32	0:0	6	;
water	52:8	0:0	6	}
call	53:8	53:27	4	printf
arg	53:15	53:27	5	"\n    },\n"
water	53:15	0:0	6	"\n    },\n"
water	53:28	0:0	4	;
water	54:4	0:0	4	}
call	55:4	55:17	2	printf
arg	55:11	55:17	3	"};\n"
water	55:11	0:0	4	"};\n"
water	55:18	0:0	2	;
return	57:4	57:12	2	0
water	57:11	0:0	3	0
