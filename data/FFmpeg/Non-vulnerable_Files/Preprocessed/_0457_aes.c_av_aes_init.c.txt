func	2:0	64:0	0	int	av_aes_init
params	2:15	0:0	1	
param	2:16	2:24	2	AVAES *	a
param	2:26	2:44	2	const uint8_t *	key
param	2:46	2:58	2	int	key_bits
param	2:60	2:71	2	int	decrypt
stmnts	0:0	63:12	1	
decl	4:4	4:32	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:32	2	int	j
water	4:12	0:0	2	,
decl	4:4	4:32	2	int	t
water	4:15	0:0	2	,
decl	4:4	4:32	2	int	rconpointer
op	4:29	0:0	2	=
water	4:31	0:0	2	0
water	5:4	0:0	2	uint8_t
water	5:12	0:0	2	tk
op	5:14	0:0	2	[
water	5:15	0:0	2	8
op	5:16	0:0	2	]
op	5:17	0:0	2	[
water	5:18	0:0	2	4
op	5:19	0:0	2	]
water	5:20	0:0	2	;
decl	6:4	6:26	2	int	KC
op	6:11	0:0	2	=
water	6:13	0:0	2	key_bits
op	6:22	0:0	2	>>
water	6:25	0:0	2	5
decl	7:4	7:23	2	int	rounds
op	7:15	0:0	2	=
water	7:17	0:0	2	KC
op	7:20	0:0	2	+
water	7:22	0:0	2	6
decl	8:4	8:21	2	uint8_t	log8[256]
decl	9:4	9:22	2	uint8_t	alog8[512]
if	10:4	30:4	2	(! enc_multbl [FF_ARRAY_ELEMS (enc_multbl ) - 1 ] [FF_ARRAY_ELEMS (enc_multbl [ 0 ] ) - 1 ])
cond	10:8	10:81	3	! enc_multbl [FF_ARRAY_ELEMS (enc_multbl ) - 1 ] [FF_ARRAY_ELEMS (enc_multbl [ 0 ] ) - 1 ]
op	10:8	0:0	4	!
water	10:9	0:0	4	enc_multbl
op	10:19	0:0	4	[
call	10:20	10:45	4	FF_ARRAY_ELEMS
arg	10:35	10:45	5	enc_multbl
water	10:35	0:0	6	enc_multbl
op	10:46	0:0	4	-
water	10:47	0:0	4	1
op	10:48	0:0	4	]
op	10:49	0:0	4	[
call	10:50	10:78	4	FF_ARRAY_ELEMS
arg	10:65	10:78	5	enc_multbl[0]
water	10:65	0:0	6	enc_multbl
op	10:75	0:0	6	[
water	10:76	0:0	6	0
op	10:77	0:0	6	]
op	10:79	0:0	4	-
water	10:80	0:0	4	1
op	10:81	0:0	4	]
stmts	10:84	30:4	3	
water	10:84	0:0	4	{
water	11:8	0:0	4	j
op	11:10	0:0	4	=
water	11:12	0:0	4	1
water	11:13	0:0	4	;
for	12:8	18:8	4	(i = 0 ;i < 255;i ++)
forinit	12:13	12:18	5	i = 0 ;
water	12:13	0:0	6	i
op	12:15	0:0	6	=
water	12:17	0:0	6	0
water	12:18	0:0	6	;
cond	12:20	12:24	5	i < 255
water	12:20	0:0	6	i
op	12:22	0:0	6	<
water	12:24	0:0	6	255
forexpr	12:29	12:30	5	i ++
water	12:29	0:0	6	i
op	12:30	0:0	6	++
stmts	12:34	18:8	5	
water	12:34	0:0	6	{
water	13:12	0:0	6	alog8
op	13:17	0:0	6	[
water	13:18	0:0	6	i
op	13:19	0:0	6	]
op	13:21	0:0	6	=
water	13:23	0:0	6	alog8
op	13:28	0:0	6	[
water	13:29	0:0	6	i
op	13:31	0:0	6	+
water	13:33	0:0	6	255
op	13:36	0:0	6	]
op	13:38	0:0	6	=
water	13:40	0:0	6	j
water	13:41	0:0	6	;
water	14:12	0:0	6	log8
op	14:16	0:0	6	[
water	14:17	0:0	6	j
op	14:18	0:0	6	]
op	14:20	0:0	6	=
water	14:22	0:0	6	i
water	14:23	0:0	6	;
water	15:12	0:0	6	j
op	15:14	0:0	6	^=
water	15:17	0:0	6	j
op	15:19	0:0	6	+
water	15:21	0:0	6	j
water	15:22	0:0	6	;
if	16:12	17:26	6	(j > 255)
cond	16:16	16:20	7	j > 255
water	16:16	0:0	8	j
op	16:18	0:0	8	>
water	16:20	0:0	8	255
stmts	17:16	17:26	7	
water	17:16	0:0	8	j
op	17:18	0:0	8	^=
water	17:21	0:0	8	0
water	17:22	0:0	8	x11B
water	17:26	0:0	8	;
water	18:8	0:0	6	}
for	19:8	25:8	4	(i = 0 ;i < 256;i ++)
forinit	19:13	19:18	5	i = 0 ;
water	19:13	0:0	6	i
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:24	5	i < 256
water	19:20	0:0	6	i
op	19:22	0:0	6	<
water	19:24	0:0	6	256
forexpr	19:29	19:30	5	i ++
water	19:29	0:0	6	i
op	19:30	0:0	6	++
stmts	19:34	25:8	5	
water	19:34	0:0	6	{
water	20:12	0:0	6	j
op	20:14	0:0	6	=
water	20:16	0:0	6	i
water	20:18	0:0	6	?
water	20:20	0:0	6	alog8
op	20:25	0:0	6	[
water	20:26	0:0	6	255
op	20:30	0:0	6	-
water	20:32	0:0	6	log8
op	20:36	0:0	6	[
water	20:37	0:0	6	i
op	20:38	0:0	6	]
op	20:39	0:0	6	]
water	20:41	0:0	6	:
water	20:43	0:0	6	0
water	20:44	0:0	6	;
water	21:12	0:0	6	j
op	21:14	0:0	6	^=
water	21:17	0:0	6	(
water	21:18	0:0	6	j
op	21:20	0:0	6	<<
water	21:23	0:0	6	1
water	21:24	0:0	6	)
op	21:26	0:0	6	^
water	21:28	0:0	6	(
water	21:29	0:0	6	j
op	21:31	0:0	6	<<
water	21:34	0:0	6	2
water	21:35	0:0	6	)
op	21:37	0:0	6	^
water	21:39	0:0	6	(
water	21:40	0:0	6	j
op	21:42	0:0	6	<<
water	21:45	0:0	6	3
water	21:46	0:0	6	)
op	21:48	0:0	6	^
water	21:50	0:0	6	(
water	21:51	0:0	6	j
op	21:53	0:0	6	<<
water	21:56	0:0	6	4
water	21:57	0:0	6	)
water	21:58	0:0	6	;
water	22:12	0:0	6	j
op	22:14	0:0	6	=
water	22:16	0:0	6	(
water	22:17	0:0	6	j
op	22:19	0:0	6	^
water	22:21	0:0	6	(
water	22:22	0:0	6	j
op	22:24	0:0	6	>>
water	22:27	0:0	6	8
water	22:28	0:0	6	)
op	22:30	0:0	6	^
water	22:32	0:0	6	99
water	22:34	0:0	6	)
op	22:36	0:0	6	&
water	22:38	0:0	6	255
water	22:41	0:0	6	;
water	23:12	0:0	6	inv_sbox
op	23:20	0:0	6	[
water	23:21	0:0	6	j
op	23:22	0:0	6	]
op	23:24	0:0	6	=
water	23:26	0:0	6	i
water	23:27	0:0	6	;
water	24:12	0:0	6	sbox
op	24:16	0:0	6	[
water	24:17	0:0	6	i
op	24:18	0:0	6	]
op	24:20	0:0	6	=
water	24:22	0:0	6	j
water	24:23	0:0	6	;
water	25:8	0:0	6	}
call	26:8	27:42	4	init_multbl2
arg	26:21	26:31	5	dec_multbl
water	26:21	0:0	6	dec_multbl
arg	26:33	26:70	5	(constint[4]){0xe,0x9,0xd,0xb}
water	26:33	0:0	6	(
water	26:34	0:0	6	const
water	26:40	0:0	6	int
op	26:43	0:0	6	[
water	26:44	0:0	6	4
op	26:45	0:0	6	]
water	26:46	0:0	6	)
water	26:48	0:0	6	{
water	26:50	0:0	6	0
water	26:51	0:0	6	xe
water	26:53	0:0	6	,
water	26:55	0:0	6	0
water	26:56	0:0	6	x9
water	26:58	0:0	6	,
water	26:60	0:0	6	0
water	26:61	0:0	6	xd
water	26:63	0:0	6	,
water	26:65	0:0	6	0
water	26:66	0:0	6	xb
water	26:69	0:0	6	}
arg	27:21	27:25	5	log8
water	27:21	0:0	6	log8
arg	27:27	27:32	5	alog8
water	27:27	0:0	6	alog8
arg	27:34	27:42	5	inv_sbox
water	27:34	0:0	6	inv_sbox
water	27:43	0:0	4	;
call	28:8	29:38	4	init_multbl2
arg	28:21	28:31	5	enc_multbl
water	28:21	0:0	6	enc_multbl
arg	28:33	28:70	5	(constint[4]){0x2,0x1,0x1,0x3}
water	28:33	0:0	6	(
water	28:34	0:0	6	const
water	28:40	0:0	6	int
op	28:43	0:0	6	[
water	28:44	0:0	6	4
op	28:45	0:0	6	]
water	28:46	0:0	6	)
water	28:48	0:0	6	{
water	28:50	0:0	6	0
water	28:51	0:0	6	x2
water	28:53	0:0	6	,
water	28:55	0:0	6	0
water	28:56	0:0	6	x1
water	28:58	0:0	6	,
water	28:60	0:0	6	0
water	28:61	0:0	6	x1
water	28:63	0:0	6	,
water	28:65	0:0	6	0
water	28:66	0:0	6	x3
water	28:69	0:0	6	}
arg	29:21	29:25	5	log8
water	29:21	0:0	6	log8
arg	29:27	29:32	5	alog8
water	29:27	0:0	6	alog8
arg	29:34	29:38	5	sbox
water	29:34	0:0	6	sbox
water	29:39	0:0	4	;
water	30:4	0:0	4	}
if	31:4	32:17	2	(key_bits != 128 && key_bits != 192 && key_bits != 256)
cond	31:8	31:58	3	key_bits != 128 && key_bits != 192 && key_bits != 256
water	31:8	0:0	4	key_bits
op	31:17	0:0	4	!=
water	31:20	0:0	4	128
op	31:24	0:0	4	&&
water	31:27	0:0	4	key_bits
op	31:36	0:0	4	!=
water	31:39	0:0	4	192
op	31:43	0:0	4	&&
water	31:46	0:0	4	key_bits
op	31:55	0:0	4	!=
water	31:58	0:0	4	256
stmts	32:8	32:17	3	
return	32:8	32:17	4	-1
op	32:15	0:0	5	-
water	32:16	0:0	5	1
water	33:4	0:0	2	a
op	33:5	0:0	2	->
water	33:7	0:0	2	rounds
op	33:14	0:0	2	=
water	33:16	0:0	2	rounds
water	33:22	0:0	2	;
call	34:4	34:26	2	memcpy
arg	34:11	34:13	3	tk
water	34:11	0:0	4	tk
arg	34:15	34:18	3	key
water	34:15	0:0	4	key
arg	34:20	34:26	3	KC*4
water	34:20	0:0	4	KC
op	34:23	0:0	4	*
water	34:25	0:0	4	4
water	34:27	0:0	2	;
call	35:4	35:42	2	memcpy
arg	35:11	35:29	3	a->round_key[0].u8
water	35:11	0:0	4	a
op	35:12	0:0	4	->
water	35:14	0:0	4	round_key
op	35:23	0:0	4	[
water	35:24	0:0	4	0
op	35:25	0:0	4	]
op	35:26	0:0	4	.
water	35:27	0:0	4	u8
arg	35:31	35:34	3	key
water	35:31	0:0	4	key
arg	35:36	35:42	3	KC*4
water	35:36	0:0	4	KC
op	35:39	0:0	4	*
water	35:41	0:0	4	4
water	35:43	0:0	2	;
for	36:4	49:4	2	(t = KC * 4 ;t < ( rounds + 1 ) * 16;t += KC * 4)
forinit	36:9	36:19	3	t = KC * 4 ;
water	36:9	0:0	4	t
op	36:11	0:0	4	=
water	36:13	0:0	4	KC
op	36:16	0:0	4	*
water	36:18	0:0	4	4
water	36:19	0:0	4	;
cond	36:21	36:40	3	t < ( rounds + 1 ) * 16
water	36:21	0:0	4	t
op	36:23	0:0	4	<
water	36:25	0:0	4	(
water	36:26	0:0	4	rounds
op	36:33	0:0	4	+
water	36:35	0:0	4	1
water	36:36	0:0	4	)
op	36:38	0:0	4	*
water	36:40	0:0	4	16
forexpr	36:44	36:54	3	t += KC * 4
water	36:44	0:0	4	t
op	36:46	0:0	4	+=
water	36:49	0:0	4	KC
op	36:52	0:0	4	*
water	36:54	0:0	4	4
stmts	36:57	49:4	3	
water	36:57	0:0	4	{
for	37:8	38:53	4	(i = 0 ;i < 4;i ++)
forinit	37:13	37:18	5	i = 0 ;
water	37:13	0:0	6	i
op	37:15	0:0	6	=
water	37:17	0:0	6	0
water	37:18	0:0	6	;
cond	37:20	37:24	5	i < 4
water	37:20	0:0	6	i
op	37:22	0:0	6	<
water	37:24	0:0	6	4
forexpr	37:27	37:28	5	i ++
water	37:27	0:0	6	i
op	37:28	0:0	6	++
stmts	38:12	38:53	5	
water	38:12	0:0	6	tk
op	38:14	0:0	6	[
water	38:15	0:0	6	0
op	38:16	0:0	6	]
op	38:17	0:0	6	[
water	38:18	0:0	6	i
op	38:19	0:0	6	]
op	38:21	0:0	6	^=
water	38:24	0:0	6	sbox
op	38:28	0:0	6	[
water	38:29	0:0	6	tk
op	38:31	0:0	6	[
water	38:32	0:0	6	KC
op	38:35	0:0	6	-
water	38:37	0:0	6	1
op	38:38	0:0	6	]
op	38:39	0:0	6	[
water	38:40	0:0	6	(
water	38:41	0:0	6	i
op	38:43	0:0	6	+
water	38:45	0:0	6	1
water	38:46	0:0	6	)
op	38:48	0:0	6	&
water	38:50	0:0	6	3
op	38:51	0:0	6	]
op	38:52	0:0	6	]
water	38:53	0:0	6	;
water	39:8	0:0	4	tk
op	39:10	0:0	4	[
water	39:11	0:0	4	0
op	39:12	0:0	4	]
op	39:13	0:0	4	[
water	39:14	0:0	4	0
op	39:15	0:0	4	]
op	39:17	0:0	4	^=
water	39:20	0:0	4	rcon
op	39:24	0:0	4	[
water	39:25	0:0	4	rconpointer
op	39:36	0:0	4	++
op	39:38	0:0	4	]
water	39:39	0:0	4	;
for	40:8	47:8	4	(j = 1 ;j < KC;j ++)
forinit	40:13	40:18	5	j = 1 ;
water	40:13	0:0	6	j
op	40:15	0:0	6	=
water	40:17	0:0	6	1
water	40:18	0:0	6	;
cond	40:20	40:24	5	j < KC
water	40:20	0:0	6	j
op	40:22	0:0	6	<
water	40:24	0:0	6	KC
forexpr	40:28	40:29	5	j ++
water	40:28	0:0	6	j
op	40:29	0:0	6	++
stmts	40:33	47:8	5	
water	40:33	0:0	6	{
if	41:12	43:44	6	(KC != 8 || j != KC >> 1)
cond	41:16	41:38	7	KC != 8 || j != KC >> 1
water	41:16	0:0	8	KC
op	41:19	0:0	8	!=
water	41:22	0:0	8	8
op	41:24	0:0	8	||
water	41:27	0:0	8	j
op	41:29	0:0	8	!=
water	41:32	0:0	8	KC
op	41:35	0:0	8	>>
water	41:38	0:0	8	1
stmts	42:16	43:44	7	
for	42:16	43:44	8	(i = 0 ;i < 4;i ++)
forinit	42:21	42:26	9	i = 0 ;
water	42:21	0:0	10	i
op	42:23	0:0	10	=
water	42:25	0:0	10	0
water	42:26	0:0	10	;
cond	42:28	42:32	9	i < 4
water	42:28	0:0	10	i
op	42:30	0:0	10	<
water	42:32	0:0	10	4
forexpr	42:35	42:36	9	i ++
water	42:35	0:0	10	i
op	42:36	0:0	10	++
stmts	43:20	43:44	9	
water	43:20	0:0	10	tk
op	43:22	0:0	10	[
water	43:23	0:0	10	j
op	43:24	0:0	10	]
op	43:25	0:0	10	[
water	43:26	0:0	10	i
op	43:27	0:0	10	]
op	43:29	0:0	10	^=
water	43:32	0:0	10	tk
op	43:34	0:0	10	[
water	43:35	0:0	10	j
op	43:37	0:0	10	-
water	43:39	0:0	10	1
op	43:40	0:0	10	]
op	43:41	0:0	10	[
water	43:42	0:0	10	i
op	43:43	0:0	10	]
water	43:44	0:0	10	;
else	44:12	46:50	6
stmts	45:16	46:50	7	
for	45:16	46:50	8	(i = 0 ;i < 4;i ++)
forinit	45:21	45:26	9	i = 0 ;
water	45:21	0:0	10	i
op	45:23	0:0	10	=
water	45:25	0:0	10	0
water	45:26	0:0	10	;
cond	45:28	45:32	9	i < 4
water	45:28	0:0	10	i
op	45:30	0:0	10	<
water	45:32	0:0	10	4
forexpr	45:35	45:36	9	i ++
water	45:35	0:0	10	i
op	45:36	0:0	10	++
stmts	46:20	46:50	9	
water	46:20	0:0	10	tk
op	46:22	0:0	10	[
water	46:23	0:0	10	j
op	46:24	0:0	10	]
op	46:25	0:0	10	[
water	46:26	0:0	10	i
op	46:27	0:0	10	]
op	46:29	0:0	10	^=
water	46:32	0:0	10	sbox
op	46:36	0:0	10	[
water	46:37	0:0	10	tk
op	46:39	0:0	10	[
water	46:40	0:0	10	j
op	46:42	0:0	10	-
water	46:44	0:0	10	1
op	46:45	0:0	10	]
op	46:46	0:0	10	[
water	46:47	0:0	10	i
op	46:48	0:0	10	]
op	46:49	0:0	10	]
water	46:50	0:0	10	;
water	47:8	0:0	6	}
call	48:8	48:49	4	memcpy
arg	48:15	48:37	5	a->round_key[0].u8+t
water	48:15	0:0	6	a
op	48:16	0:0	6	->
water	48:18	0:0	6	round_key
op	48:27	0:0	6	[
water	48:28	0:0	6	0
op	48:29	0:0	6	]
op	48:30	0:0	6	.
water	48:31	0:0	6	u8
op	48:34	0:0	6	+
water	48:36	0:0	6	t
arg	48:39	48:41	5	tk
water	48:39	0:0	6	tk
arg	48:43	48:49	5	KC*4
water	48:43	0:0	6	KC
op	48:46	0:0	6	*
water	48:48	0:0	6	4
water	48:50	0:0	4	;
water	49:4	0:0	4	}
if	50:4	58:4	2	(decrypt)
cond	50:8	50:8	3	decrypt
water	50:8	0:0	4	decrypt
stmts	50:17	58:4	3	
water	50:17	0:0	4	{
for	51:8	57:8	4	(i = 1 ;i < rounds;i ++)
forinit	51:13	51:18	5	i = 1 ;
water	51:13	0:0	6	i
op	51:15	0:0	6	=
water	51:17	0:0	6	1
water	51:18	0:0	6	;
cond	51:20	51:24	5	i < rounds
water	51:20	0:0	6	i
op	51:22	0:0	6	<
water	51:24	0:0	6	rounds
forexpr	51:32	51:33	5	i ++
water	51:32	0:0	6	i
op	51:33	0:0	6	++
stmts	51:37	57:8	5	
water	51:37	0:0	6	{
decl	52:12	52:31	6	av_aes_block	tmp[3]
water	53:12	0:0	6	tmp
op	53:15	0:0	6	[
water	53:16	0:0	6	2
op	53:17	0:0	6	]
op	53:19	0:0	6	=
water	53:21	0:0	6	a
op	53:22	0:0	6	->
water	53:24	0:0	6	round_key
op	53:33	0:0	6	[
water	53:34	0:0	6	i
op	53:35	0:0	6	]
water	53:36	0:0	6	;
call	54:12	54:37	6	subshift
arg	54:21	54:28	7	&tmp[1]
op	54:21	0:0	8	&
water	54:22	0:0	8	tmp
op	54:25	0:0	8	[
water	54:26	0:0	8	1
op	54:27	0:0	8	]
arg	54:30	54:31	7	0
water	54:30	0:0	8	0
arg	54:33	54:37	7	sbox
water	54:33	0:0	8	sbox
water	54:38	0:0	6	;
call	55:12	55:37	6	mix
arg	55:16	55:19	7	tmp
water	55:16	0:0	8	tmp
arg	55:21	55:31	7	dec_multbl
water	55:21	0:0	8	dec_multbl
arg	55:33	55:34	7	1
water	55:33	0:0	8	1
arg	55:36	55:37	7	3
water	55:36	0:0	8	3
water	55:38	0:0	6	;
water	56:12	0:0	6	a
op	56:13	0:0	6	->
water	56:15	0:0	6	round_key
op	56:24	0:0	6	[
water	56:25	0:0	6	i
op	56:26	0:0	6	]
op	56:28	0:0	6	=
water	56:30	0:0	6	tmp
op	56:33	0:0	6	[
water	56:34	0:0	6	0
op	56:35	0:0	6	]
water	56:36	0:0	6	;
water	57:8	0:0	6	}
water	58:4	0:0	4	}
else	58:6	62:4	2
stmts	58:11	62:4	3	
water	58:11	0:0	4	{
for	59:8	61:8	4	(i = 0 ;i < ( rounds + 1 ) >> 1;i ++)
forinit	59:13	59:18	5	i = 0 ;
water	59:13	0:0	6	i
op	59:15	0:0	6	=
water	59:17	0:0	6	0
water	59:18	0:0	6	;
cond	59:20	59:40	5	i < ( rounds + 1 ) >> 1
water	59:20	0:0	6	i
op	59:22	0:0	6	<
water	59:24	0:0	6	(
water	59:25	0:0	6	rounds
op	59:32	0:0	6	+
water	59:34	0:0	6	1
water	59:35	0:0	6	)
op	59:37	0:0	6	>>
water	59:40	0:0	6	1
forexpr	59:43	59:44	5	i ++
water	59:43	0:0	6	i
op	59:44	0:0	6	++
stmts	59:48	61:8	5	
water	59:48	0:0	6	{
call	60:12	60:72	6	FFSWAP
arg	60:19	60:31	7	av_aes_block
water	60:19	0:0	8	av_aes_block
arg	60:33	60:48	7	a->round_key[i]
water	60:33	0:0	8	a
op	60:34	0:0	8	->
water	60:36	0:0	8	round_key
op	60:45	0:0	8	[
water	60:46	0:0	8	i
op	60:47	0:0	8	]
arg	60:50	60:72	7	a->round_key[rounds-i]
water	60:50	0:0	8	a
op	60:51	0:0	8	->
water	60:53	0:0	8	round_key
op	60:62	0:0	8	[
water	60:63	0:0	8	rounds
op	60:69	0:0	8	-
water	60:70	0:0	8	i
op	60:71	0:0	8	]
water	60:73	0:0	6	;
water	61:8	0:0	6	}
water	62:4	0:0	4	}
return	63:4	63:12	2	0
water	63:11	0:0	3	0
