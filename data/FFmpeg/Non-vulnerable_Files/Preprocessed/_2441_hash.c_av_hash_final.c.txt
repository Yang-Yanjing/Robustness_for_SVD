func	1:0	20:0	0	void	av_hash_final
params	1:18	0:0	1	
param	1:19	1:37	2	AVHashContext *	ctx
param	1:39	1:51	2	uint8_t *	dst
stmnts	3:4	19:4	1	
switch	3:4	19:4	2	(ctx -> type)
cond	3:12	3:17	3	ctx -> type
water	3:12	0:0	4	ctx
op	3:15	0:0	4	->
water	3:17	0:0	4	type
stmts	3:23	19:4	3	
water	3:23	0:0	4	{
label	4:4	4:12	4	case MD5 :
call	4:18	4:44	4	av_md5_final
arg	4:31	4:39	5	ctx->ctx
water	4:31	0:0	6	ctx
op	4:34	0:0	6	->
water	4:36	0:0	6	ctx
arg	4:41	4:44	5	dst
water	4:41	0:0	6	dst
water	4:45	0:0	4	;
break	4:47	4:52	4	
label	5:4	5:16	4	case MURMUR3 :
call	5:18	5:48	4	av_murmur3_final
arg	5:35	5:43	5	ctx->ctx
water	5:35	0:0	6	ctx
op	5:38	0:0	6	->
water	5:40	0:0	6	ctx
arg	5:45	5:48	5	dst
water	5:45	0:0	6	dst
water	5:49	0:0	4	;
break	5:51	5:56	4	
label	6:4	6:18	4	case RIPEMD128 :
label	7:4	7:18	4	case RIPEMD160 :
label	8:4	8:18	4	case RIPEMD256 :
label	9:4	9:18	4	case RIPEMD320 :
call	9:20	9:49	4	av_ripemd_final
arg	9:36	9:44	5	ctx->ctx
water	9:36	0:0	6	ctx
op	9:39	0:0	6	->
water	9:41	0:0	6	ctx
arg	9:46	9:49	5	dst
water	9:46	0:0	6	dst
water	9:50	0:0	4	;
break	9:52	9:57	4	
label	10:4	10:15	4	case SHA160 :
label	11:4	11:15	4	case SHA224 :
label	12:4	12:15	4	case SHA256 :
call	12:18	12:44	4	av_sha_final
arg	12:31	12:39	5	ctx->ctx
water	12:31	0:0	6	ctx
op	12:34	0:0	6	->
water	12:36	0:0	6	ctx
arg	12:41	12:44	5	dst
water	12:41	0:0	6	dst
water	12:45	0:0	4	;
break	12:47	12:52	4	
label	13:4	13:19	4	case SHA512_224 :
label	14:4	14:19	4	case SHA512_256 :
label	15:4	15:15	4	case SHA384 :
label	16:4	16:15	4	case SHA512 :
call	16:18	16:47	4	av_sha512_final
arg	16:34	16:42	5	ctx->ctx
water	16:34	0:0	6	ctx
op	16:37	0:0	6	->
water	16:39	0:0	6	ctx
arg	16:44	16:47	5	dst
water	16:44	0:0	6	dst
water	16:48	0:0	4	;
break	16:50	16:55	4	
label	17:4	17:14	4	case CRC32 :
call	17:18	17:52	4	AV_WB32
arg	17:26	17:29	5	dst
water	17:26	0:0	6	dst
arg	17:31	17:52	5	ctx->crc^UINT32_MAX
water	17:31	0:0	6	ctx
op	17:34	0:0	6	->
water	17:36	0:0	6	crc
op	17:40	0:0	6	^
water	17:42	0:0	6	UINT32_MAX
water	17:53	0:0	4	;
break	17:55	17:60	4	
label	18:4	18:16	4	case ADLER32 :
call	18:18	18:39	4	AV_WB32
arg	18:26	18:29	5	dst
water	18:26	0:0	6	dst
arg	18:31	18:39	5	ctx->crc
water	18:31	0:0	6	ctx
op	18:34	0:0	6	->
water	18:36	0:0	6	crc
water	18:40	0:0	4	;
break	18:42	18:47	4	
water	19:4	0:0	4	}
