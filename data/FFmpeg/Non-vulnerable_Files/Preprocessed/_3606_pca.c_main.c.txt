func	1:0	63:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	0:0	62:12	1	
decl	2:4	2:12	2	PCA	*pca
decl	3:4	3:15	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:15	2	int	j
water	3:12	0:0	2	,
decl	3:4	3:15	2	int	k
decl	5:4	5:31	2	double	eigenvector[LEN*LEN]
decl	6:4	6:26	2	double	eigenvalue[LEN]
decl	7:4	7:14	2	AVLFG	prng
call	8:4	8:24	2	av_lfg_init
arg	8:16	8:21	3	&prng
op	8:16	0:0	4	&
water	8:17	0:0	4	prng
arg	8:23	8:24	3	1
water	8:23	0:0	4	1
water	8:25	0:0	2	;
water	9:4	0:0	2	pca
op	9:7	0:0	2	=
call	9:9	9:24	2	ff_pca_init
arg	9:21	9:24	3	LEN
water	9:21	0:0	4	LEN
water	9:25	0:0	2	;
for	10:4	30:4	2	(i = 0 ;i < 9000000;i ++)
forinit	10:8	10:11	3	i = 0 ;
water	10:8	0:0	4	i
op	10:9	0:0	4	=
water	10:10	0:0	4	0
water	10:11	0:0	4	;
cond	10:13	10:15	3	i < 9000000
water	10:13	0:0	4	i
op	10:14	0:0	4	<
water	10:15	0:0	4	9000000
forexpr	10:24	10:25	3	i ++
water	10:24	0:0	4	i
op	10:25	0:0	4	++
stmts	10:28	30:4	3	
water	10:28	0:0	4	{
decl	11:8	11:27	4	double	v[2*LEN+100]
decl	12:8	12:20	4	double	sum
op	12:18	0:0	4	=
water	12:19	0:0	4	0
decl	13:8	13:41	4	int	pos
op	13:16	0:0	4	=
call	13:18	13:34	5	av_lfg_get
arg	13:29	13:34	6	&prng
op	13:29	0:0	7	&
water	13:30	0:0	7	prng
op	13:36	0:0	4	%
water	13:38	0:0	4	LEN
decl	14:8	14:46	4	int	v2
op	14:16	0:0	4	=
call	14:18	14:34	5	av_lfg_get
arg	14:29	14:34	6	&prng
op	14:29	0:0	7	&
water	14:30	0:0	7	prng
op	14:36	0:0	4	%
water	14:38	0:0	4	101
op	14:42	0:0	4	-
water	14:44	0:0	4	50
water	15:8	0:0	4	v
op	15:9	0:0	4	[
water	15:10	0:0	4	0
op	15:11	0:0	4	]
op	15:16	0:0	4	=
call	15:18	15:34	4	av_lfg_get
arg	15:29	15:34	5	&prng
op	15:29	0:0	6	&
water	15:30	0:0	6	prng
op	15:36	0:0	4	%
water	15:38	0:0	4	101
op	15:42	0:0	4	-
water	15:44	0:0	4	50
water	15:46	0:0	4	;
for	16:8	20:8	4	(j = 1 ;j < 8;j ++)
forinit	16:12	16:15	5	j = 1 ;
water	16:12	0:0	6	j
op	16:13	0:0	6	=
water	16:14	0:0	6	1
water	16:15	0:0	6	;
cond	16:17	16:19	5	j < 8
water	16:17	0:0	6	j
op	16:18	0:0	6	<
water	16:19	0:0	6	8
forexpr	16:22	16:23	5	j ++
water	16:22	0:0	6	j
op	16:23	0:0	6	++
stmts	16:26	20:8	5	
water	16:26	0:0	6	{
if	17:12	17:33	6	(j <= pos)
cond	17:15	17:18	7	j <= pos
water	17:15	0:0	8	j
op	17:16	0:0	8	<=
water	17:18	0:0	8	pos
stmts	17:23	17:33	7	
water	17:23	0:0	8	v
op	17:24	0:0	8	[
water	17:25	0:0	8	j
op	17:26	0:0	8	]
op	17:27	0:0	8	=
water	17:29	0:0	8	v
op	17:30	0:0	8	[
water	17:31	0:0	8	0
op	17:32	0:0	8	]
water	17:33	0:0	8	;
else	18:12	18:31	6
stmts	18:23	18:31	7	
water	18:23	0:0	8	v
op	18:24	0:0	8	[
water	18:25	0:0	8	j
op	18:26	0:0	8	]
op	18:27	0:0	8	=
water	18:29	0:0	8	v2
water	18:31	0:0	8	;
water	19:12	0:0	6	sum
op	19:16	0:0	6	+=
water	19:19	0:0	6	v
op	19:20	0:0	6	[
water	19:21	0:0	6	j
op	19:22	0:0	6	]
water	19:23	0:0	6	;
water	20:8	0:0	6	}
call	29:8	29:25	4	ff_pca_add
arg	29:19	29:22	5	pca
water	29:19	0:0	6	pca
arg	29:24	29:25	5	v
water	29:24	0:0	6	v
water	29:26	0:0	4	;
water	30:4	0:0	4	}
call	31:4	31:39	2	ff_pca
arg	31:11	31:14	3	pca
water	31:11	0:0	4	pca
arg	31:16	31:27	3	eigenvector
water	31:16	0:0	4	eigenvector
arg	31:29	31:39	3	eigenvalue
water	31:29	0:0	4	eigenvalue
water	31:40	0:0	2	;
for	32:4	41:4	2	(i = 0 ;i < LEN;i ++)
forinit	32:8	32:11	3	i = 0 ;
water	32:8	0:0	4	i
op	32:9	0:0	4	=
water	32:10	0:0	4	0
water	32:11	0:0	4	;
cond	32:13	32:15	3	i < LEN
water	32:13	0:0	4	i
op	32:14	0:0	4	<
water	32:15	0:0	4	LEN
forexpr	32:20	32:21	3	i ++
water	32:20	0:0	4	i
op	32:21	0:0	4	++
stmts	32:24	41:4	3	
water	32:24	0:0	4	{
water	33:8	0:0	4	pca
op	33:11	0:0	4	->
water	33:13	0:0	4	count
op	33:18	0:0	4	=
water	33:20	0:0	4	1
water	33:21	0:0	4	;
water	34:8	0:0	4	pca
op	34:11	0:0	4	->
water	34:13	0:0	4	mean
op	34:17	0:0	4	[
water	34:18	0:0	4	i
op	34:19	0:0	4	]
op	34:20	0:0	4	=
water	34:22	0:0	4	0
water	34:23	0:0	4	;
for	37:8	39:8	4	(j = i ;j < LEN;j ++)
forinit	37:12	37:15	5	j = i ;
water	37:12	0:0	6	j
op	37:13	0:0	6	=
water	37:14	0:0	6	i
water	37:15	0:0	6	;
cond	37:17	37:19	5	j < LEN
water	37:17	0:0	6	j
op	37:18	0:0	6	<
water	37:19	0:0	6	LEN
forexpr	37:24	37:25	5	j ++
water	37:24	0:0	6	j
op	37:25	0:0	6	++
stmts	37:28	39:8	5	
water	37:28	0:0	6	{
call	38:12	38:52	6	printf
arg	38:19	38:24	7	"%f "
water	38:19	0:0	8	"%f "
arg	38:26	38:52	7	pca->covariance[i+j*LEN]
water	38:26	0:0	8	pca
op	38:29	0:0	8	->
water	38:31	0:0	8	covariance
op	38:41	0:0	8	[
water	38:42	0:0	8	i
op	38:44	0:0	8	+
water	38:46	0:0	8	j
op	38:47	0:0	8	*
water	38:48	0:0	8	LEN
op	38:51	0:0	8	]
water	38:53	0:0	6	;
water	39:8	0:0	6	}
call	40:8	40:19	4	printf
arg	40:15	40:19	5	"\n"
water	40:15	0:0	6	"\n"
water	40:20	0:0	4	;
water	41:4	0:0	4	}
for	42:4	54:4	2	(i = 0 ;i < LEN;i ++)
forinit	42:8	42:11	3	i = 0 ;
water	42:8	0:0	4	i
op	42:9	0:0	4	=
water	42:10	0:0	4	0
water	42:11	0:0	4	;
cond	42:13	42:15	3	i < LEN
water	42:13	0:0	4	i
op	42:14	0:0	4	<
water	42:15	0:0	4	LEN
forexpr	42:20	42:21	3	i ++
water	42:20	0:0	4	i
op	42:21	0:0	4	++
stmts	42:24	54:4	3	
water	42:24	0:0	4	{
decl	43:8	43:21	4	double	v[LEN]
decl	44:8	44:22	4	double	error
op	44:20	0:0	4	=
water	44:21	0:0	4	0
call	45:8	45:30	4	memset
arg	45:15	45:16	5	v
water	45:15	0:0	6	v
arg	45:18	45:19	5	0
water	45:18	0:0	6	0
arg	45:21	45:30	5	sizeof(v)
op	45:21	0:0	6	sizeof
water	45:27	0:0	6	(
water	45:28	0:0	6	v
water	45:29	0:0	6	)
water	45:31	0:0	4	;
for	46:8	52:8	4	(j = 0 ;j < LEN;j ++)
forinit	46:12	46:15	5	j = 0 ;
water	46:12	0:0	6	j
op	46:13	0:0	6	=
water	46:14	0:0	6	0
water	46:15	0:0	6	;
cond	46:17	46:19	5	j < LEN
water	46:17	0:0	6	j
op	46:18	0:0	6	<
water	46:19	0:0	6	LEN
forexpr	46:24	46:25	5	j ++
water	46:24	0:0	6	j
op	46:25	0:0	6	++
stmts	46:28	52:8	5	
water	46:28	0:0	6	{
for	47:12	49:12	6	(k = 0 ;k < LEN;k ++)
forinit	47:16	47:19	7	k = 0 ;
water	47:16	0:0	8	k
op	47:17	0:0	8	=
water	47:18	0:0	8	0
water	47:19	0:0	8	;
cond	47:21	47:23	7	k < LEN
water	47:21	0:0	8	k
op	47:22	0:0	8	<
water	47:23	0:0	8	LEN
forexpr	47:28	47:29	7	k ++
water	47:28	0:0	8	k
op	47:29	0:0	8	++
stmts	47:32	49:12	7	
water	47:32	0:0	8	{
water	48:16	0:0	8	v
op	48:17	0:0	8	[
water	48:18	0:0	8	j
op	48:19	0:0	8	]
op	48:21	0:0	8	+=
water	48:24	0:0	8	pca
op	48:27	0:0	8	->
water	48:29	0:0	8	covariance
op	48:39	0:0	8	[
call	48:40	48:49	8	FFMIN
arg	48:46	48:47	9	k
water	48:46	0:0	10	k
arg	48:48	48:49	9	j
water	48:48	0:0	10	j
op	48:51	0:0	8	+
call	48:53	48:62	8	FFMAX
arg	48:59	48:60	9	k
water	48:59	0:0	10	k
arg	48:61	48:62	9	j
water	48:61	0:0	10	j
op	48:63	0:0	8	*
water	48:64	0:0	8	LEN
op	48:67	0:0	8	]
op	48:69	0:0	8	*
water	48:71	0:0	8	eigenvector
op	48:82	0:0	8	[
water	48:83	0:0	8	i
op	48:85	0:0	8	+
water	48:87	0:0	8	k
op	48:88	0:0	8	*
water	48:89	0:0	8	LEN
op	48:92	0:0	8	]
water	48:93	0:0	8	;
water	49:12	0:0	8	}
water	50:12	0:0	6	v
op	50:13	0:0	6	[
water	50:14	0:0	6	j
op	50:15	0:0	6	]
op	50:17	0:0	6	/=
water	50:20	0:0	6	eigenvalue
op	50:30	0:0	6	[
water	50:31	0:0	6	i
op	50:32	0:0	6	]
water	50:33	0:0	6	;
water	51:12	0:0	6	error
op	51:18	0:0	6	+=
call	51:21	51:55	6	fabs
arg	51:26	51:55	7	v[j]-eigenvector[i+j*LEN]
water	51:26	0:0	8	v
op	51:27	0:0	8	[
water	51:28	0:0	8	j
op	51:29	0:0	8	]
op	51:31	0:0	8	-
water	51:33	0:0	8	eigenvector
op	51:44	0:0	8	[
water	51:45	0:0	8	i
op	51:47	0:0	8	+
water	51:49	0:0	8	j
op	51:50	0:0	8	*
water	51:51	0:0	8	LEN
op	51:54	0:0	8	]
water	51:56	0:0	6	;
water	52:8	0:0	6	}
call	53:8	53:27	4	printf
arg	53:15	53:20	5	"%f "
water	53:15	0:0	6	"%f "
arg	53:22	53:27	5	error
water	53:22	0:0	6	error
water	53:28	0:0	4	;
water	54:4	0:0	4	}
call	55:4	55:15	2	printf
arg	55:11	55:15	3	"\n"
water	55:11	0:0	4	"\n"
water	55:16	0:0	2	;
for	56:4	61:4	2	(i = 0 ;i < LEN;i ++)
forinit	56:8	56:11	3	i = 0 ;
water	56:8	0:0	4	i
op	56:9	0:0	4	=
water	56:10	0:0	4	0
water	56:11	0:0	4	;
cond	56:13	56:15	3	i < LEN
water	56:13	0:0	4	i
op	56:14	0:0	4	<
water	56:15	0:0	4	LEN
forexpr	56:20	56:21	3	i ++
water	56:20	0:0	4	i
op	56:21	0:0	4	++
stmts	56:24	61:4	3	
water	56:24	0:0	4	{
for	57:8	59:8	4	(j = 0 ;j < LEN;j ++)
forinit	57:12	57:15	5	j = 0 ;
water	57:12	0:0	6	j
op	57:13	0:0	6	=
water	57:14	0:0	6	0
water	57:15	0:0	6	;
cond	57:17	57:19	5	j < LEN
water	57:17	0:0	6	j
op	57:18	0:0	6	<
water	57:19	0:0	6	LEN
forexpr	57:24	57:25	5	j ++
water	57:24	0:0	6	j
op	57:25	0:0	6	++
stmts	57:28	59:8	5	
water	57:28	0:0	6	{
call	58:12	58:51	6	printf
arg	58:19	58:27	7	"%9.6f "
water	58:19	0:0	8	"%9.6f "
arg	58:29	58:51	7	eigenvector[i+j*LEN]
water	58:29	0:0	8	eigenvector
op	58:40	0:0	8	[
water	58:41	0:0	8	i
op	58:43	0:0	8	+
water	58:45	0:0	8	j
op	58:46	0:0	8	*
water	58:47	0:0	8	LEN
op	58:50	0:0	8	]
water	58:52	0:0	6	;
water	59:8	0:0	6	}
call	60:8	60:73	4	printf
arg	60:15	60:29	5	"  %9.1f %f\n"
water	60:15	0:0	6	"  %9.1f %f\n"
arg	60:31	60:44	5	eigenvalue[i]
water	60:31	0:0	6	eigenvalue
op	60:41	0:0	6	[
water	60:42	0:0	6	i
op	60:43	0:0	6	]
arg	60:46	60:73	5	eigenvalue[i]/eigenvalue[0]
water	60:46	0:0	6	eigenvalue
op	60:56	0:0	6	[
water	60:57	0:0	6	i
op	60:58	0:0	6	]
op	60:59	0:0	6	/
water	60:60	0:0	6	eigenvalue
op	60:70	0:0	6	[
water	60:71	0:0	6	0
op	60:72	0:0	6	]
water	60:74	0:0	4	;
water	61:4	0:0	4	}
return	62:4	62:12	2	0
water	62:11	0:0	3	0
