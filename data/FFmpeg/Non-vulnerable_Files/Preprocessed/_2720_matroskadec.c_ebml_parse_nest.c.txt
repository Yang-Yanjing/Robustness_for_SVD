func	1:0	27:0	0	static int	ebml_parse_nest
params	1:26	0:0	1	
param	1:27	1:57	2	MatroskaDemuxContext *	matroska
param	1:59	1:77	2	EbmlSyntax *	syntax
param	2:27	2:37	2	void *	data
stmnts	0:0	26:14	1	
decl	4:4	4:18	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:18	2	int	res
op	4:15	0:0	2	=
water	4:17	0:0	2	0
for	5:4	23:8	2	(i = 0 ;syntax [ i ] . id;i ++)
forinit	5:9	5:14	3	i = 0 ;
water	5:9	0:0	4	i
op	5:11	0:0	4	=
water	5:13	0:0	4	0
water	5:14	0:0	4	;
cond	5:16	5:26	3	syntax [ i ] . id
water	5:16	0:0	4	syntax
op	5:22	0:0	4	[
water	5:23	0:0	4	i
op	5:24	0:0	4	]
op	5:25	0:0	4	.
water	5:26	0:0	4	id
forexpr	5:30	5:31	3	i ++
water	5:30	0:0	4	i
op	5:31	0:0	4	++
stmts	6:8	23:8	3	
switch	6:8	23:8	4	(syntax [ i ] . type)
cond	6:16	6:26	5	syntax [ i ] . type
water	6:16	0:0	6	syntax
op	6:22	0:0	6	[
water	6:23	0:0	6	i
op	6:24	0:0	6	]
op	6:25	0:0	6	.
water	6:26	0:0	6	type
stmts	6:32	23:8	5	
water	6:32	0:0	6	{
label	7:8	7:22	6	case EBML_UINT :
op	8:12	0:0	6	*
call	8:13	8:64	6	(uint64_t*)
arg	8:27	8:64	7	(char*)data+syntax[i].data_offset
water	8:27	0:0	8	(
water	8:28	0:0	8	char
op	8:33	0:0	8	*
water	8:34	0:0	8	)
water	8:36	0:0	8	data
op	8:41	0:0	8	+
water	8:43	0:0	8	syntax
op	8:49	0:0	8	[
water	8:50	0:0	8	i
op	8:51	0:0	8	]
op	8:52	0:0	8	.
water	8:53	0:0	8	data_offset
op	8:66	0:0	6	=
water	8:68	0:0	6	syntax
op	8:74	0:0	6	[
water	8:75	0:0	6	i
op	8:76	0:0	6	]
op	8:77	0:0	6	.
water	8:78	0:0	6	def
op	8:81	0:0	6	.
water	8:82	0:0	6	u
water	8:83	0:0	6	;
break	9:12	9:17	6	
label	10:8	10:23	6	case EBML_FLOAT :
op	11:12	0:0	6	*
call	11:13	11:62	6	(double*)
arg	11:25	11:62	7	(char*)data+syntax[i].data_offset
water	11:25	0:0	8	(
water	11:26	0:0	8	char
op	11:31	0:0	8	*
water	11:32	0:0	8	)
water	11:34	0:0	8	data
op	11:39	0:0	8	+
water	11:41	0:0	8	syntax
op	11:47	0:0	8	[
water	11:48	0:0	8	i
op	11:49	0:0	8	]
op	11:50	0:0	8	.
water	11:51	0:0	8	data_offset
op	11:64	0:0	6	=
water	11:66	0:0	6	syntax
op	11:72	0:0	6	[
water	11:73	0:0	6	i
op	11:74	0:0	6	]
op	11:75	0:0	6	.
water	11:76	0:0	6	def
op	11:79	0:0	6	.
water	11:80	0:0	6	f
water	11:81	0:0	6	;
break	12:12	12:17	6	
label	13:8	13:21	6	case EBML_STR :
label	14:8	14:22	6	case EBML_UTF8 :
if	16:12	21:12	6	(syntax [ i ] . def . s)
cond	16:16	16:30	7	syntax [ i ] . def . s
water	16:16	0:0	8	syntax
op	16:22	0:0	8	[
water	16:23	0:0	8	i
op	16:24	0:0	8	]
op	16:25	0:0	8	.
water	16:26	0:0	8	def
op	16:29	0:0	8	.
water	16:30	0:0	8	s
stmts	16:33	21:12	7	
water	16:33	0:0	8	{
decl	17:16	17:87	8	uint8_t	**dst
op	17:30	0:0	8	=
call	17:32	17:86	9	(uint8_t**)
arg	17:46	17:86	10	(uint8_t*)data+syntax[i].data_offset
water	17:46	0:0	11	(
water	17:47	0:0	11	uint8_t
op	17:55	0:0	11	*
water	17:56	0:0	11	)
water	17:58	0:0	11	data
op	17:63	0:0	11	+
water	17:65	0:0	11	syntax
op	17:71	0:0	11	[
water	17:72	0:0	11	i
op	17:73	0:0	11	]
op	17:74	0:0	11	.
water	17:75	0:0	11	data_offset
op	18:16	0:0	8	*
water	18:17	0:0	8	dst
op	18:21	0:0	8	=
call	18:23	18:48	8	av_strdup
arg	18:33	18:48	9	syntax[i].def.s
water	18:33	0:0	10	syntax
op	18:39	0:0	10	[
water	18:40	0:0	10	i
op	18:41	0:0	10	]
op	18:42	0:0	10	.
water	18:43	0:0	10	def
op	18:46	0:0	10	.
water	18:47	0:0	10	s
water	18:49	0:0	8	;
if	19:16	20:42	8	(! * dst)
cond	19:20	19:22	9	! * dst
op	19:20	0:0	10	!
op	19:21	0:0	10	*
water	19:22	0:0	10	dst
stmts	20:20	20:42	9	
return	20:20	20:42	10	AVERROR(ENOMEM)
call	20:27	20:41	11	AVERROR
arg	20:35	20:41	12	ENOMEM
water	20:35	0:0	13	ENOMEM
water	21:12	0:0	8	}
break	22:12	22:17	6	
water	23:8	0:0	6	}
while	24:4	25:48	2	(! res && !ebml_level_end (matroska ))
cond	24:11	24:43	3	! res && !ebml_level_end (matroska )
op	24:11	0:0	4	!
water	24:12	0:0	4	res
op	24:16	0:0	4	&&
op	24:19	0:0	4	!
call	24:20	24:43	4	ebml_level_end
arg	24:35	24:43	5	matroska
water	24:35	0:0	6	matroska
stmts	25:8	25:48	3	
water	25:8	0:0	4	res
op	25:12	0:0	4	=
call	25:14	25:47	4	ebml_parse
arg	25:25	25:33	5	matroska
water	25:25	0:0	6	matroska
arg	25:35	25:41	5	syntax
water	25:35	0:0	6	syntax
arg	25:43	25:47	5	data
water	25:43	0:0	6	data
water	25:48	0:0	4	;
return	26:4	26:14	2	res
water	26:11	0:0	3	res
