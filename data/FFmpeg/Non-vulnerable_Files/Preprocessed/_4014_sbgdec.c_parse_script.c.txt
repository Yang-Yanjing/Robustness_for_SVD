func	1:0	60:0	0	static int	parse_script
params	1:23	0:0	1	
param	1:24	1:33	2	void *	log
param	1:35	1:47	2	char *	script
param	1:49	1:63	2	int	script_len
param	2:28	2:54	2	struct sbg_script *	rscript
stmnts	0:0	59:12	1	
decl	4:4	17:5	2	struct sbg_parser	sp
op	4:25	0:0	2	=
water	4:27	0:0	2	{
op	5:8	0:0	2	.
water	5:9	0:0	2	log
op	5:17	0:0	2	=
water	5:19	0:0	2	log
water	5:22	0:0	2	,
op	6:8	0:0	2	.
water	6:9	0:0	2	script
op	6:17	0:0	2	=
water	6:19	0:0	2	script
water	6:25	0:0	2	,
op	7:8	0:0	2	.
water	7:9	0:0	2	end
op	7:17	0:0	2	=
water	7:19	0:0	2	script
op	7:26	0:0	2	+
water	7:28	0:0	2	script_len
water	7:38	0:0	2	,
op	8:8	0:0	2	.
water	8:9	0:0	2	cursor
op	8:17	0:0	2	=
water	8:19	0:0	2	script
water	8:25	0:0	2	,
op	9:8	0:0	2	.
water	9:9	0:0	2	line_no
op	9:17	0:0	2	=
water	9:19	0:0	2	1
water	9:20	0:0	2	,
op	10:8	0:0	2	.
water	10:9	0:0	2	err_msg
op	10:17	0:0	2	=
water	10:19	0:0	2	""
water	10:21	0:0	2	,
op	11:8	0:0	2	.
water	11:9	0:0	2	scs
op	11:13	0:0	2	=
water	11:15	0:0	2	{
op	13:12	0:0	2	.
water	13:13	0:0	2	start_ts
op	13:27	0:0	2	=
water	13:29	0:0	2	AV_NOPTS_VALUE
water	13:43	0:0	2	,
op	14:12	0:0	2	.
water	14:13	0:0	2	sample_rate
op	14:27	0:0	2	=
water	14:29	0:0	2	44100
water	14:34	0:0	2	,
op	15:12	0:0	2	.
water	15:13	0:0	2	opt_fade_time
op	15:27	0:0	2	=
water	15:29	0:0	2	60
op	15:32	0:0	2	*
water	15:34	0:0	2	AV_TIME_BASE
water	15:46	0:0	2	,
water	16:8	0:0	2	}
water	16:9	0:0	2	,
water	17:4	0:0	2	}
decl	18:4	18:9	2	int	r
call	19:4	19:17	2	lex_space
arg	19:14	19:17	3	&sp
op	19:14	0:0	4	&
water	19:15	0:0	4	sp
water	19:18	0:0	2	;
while	20:4	26:4	2	(sp . cursor < sp . end)
cond	20:11	20:26	3	sp . cursor < sp . end
water	20:11	0:0	4	sp
op	20:13	0:0	4	.
water	20:14	0:0	4	cursor
op	20:21	0:0	4	<
water	20:23	0:0	4	sp
op	20:25	0:0	4	.
water	20:26	0:0	4	end
stmts	20:31	26:4	3	
water	20:31	0:0	4	{
water	21:8	0:0	4	r
op	21:10	0:0	4	=
call	21:12	21:29	4	parse_options
arg	21:26	21:29	5	&sp
op	21:26	0:0	6	&
water	21:27	0:0	6	sp
water	21:30	0:0	4	;
if	22:8	23:21	4	(r < 0)
cond	22:12	22:16	5	r < 0
water	22:12	0:0	6	r
op	22:14	0:0	6	<
water	22:16	0:0	6	0
stmts	23:12	23:21	5	
goto	23:12	23:21	6	fail
water	23:17	0:0	7	fail
if	24:8	25:17	4	(! r && !lex_line_end (& sp ))
cond	24:12	24:35	5	! r && !lex_line_end (& sp )
op	24:12	0:0	6	!
water	24:13	0:0	6	r
op	24:15	0:0	6	&&
op	24:18	0:0	6	!
call	24:19	24:35	6	lex_line_end
arg	24:32	24:35	7	&sp
op	24:32	0:0	8	&
water	24:33	0:0	8	sp
stmts	25:12	25:17	5	
break	25:12	25:17	6	
water	26:4	0:0	4	}
while	27:4	35:4	2	(sp . cursor < sp . end)
cond	27:11	27:26	3	sp . cursor < sp . end
water	27:11	0:0	4	sp
op	27:13	0:0	4	.
water	27:14	0:0	4	cursor
op	27:21	0:0	4	<
water	27:23	0:0	4	sp
op	27:25	0:0	4	.
water	27:26	0:0	4	end
stmts	27:31	35:4	3	
water	27:31	0:0	4	{
water	28:8	0:0	4	r
op	28:10	0:0	4	=
call	28:12	28:31	4	parse_named_def
arg	28:28	28:31	5	&sp
op	28:28	0:0	6	&
water	28:29	0:0	6	sp
water	28:32	0:0	4	;
if	29:8	30:43	4	(! r)
cond	29:12	29:13	5	! r
op	29:12	0:0	6	!
water	29:13	0:0	6	r
stmts	30:12	30:43	5	
water	30:12	0:0	6	r
op	30:14	0:0	6	=
call	30:16	30:42	6	parse_time_sequence
arg	30:36	30:39	7	&sp
op	30:36	0:0	8	&
water	30:37	0:0	8	sp
arg	30:41	30:42	7	0
water	30:41	0:0	8	0
water	30:43	0:0	6	;
if	31:8	32:59	4	(! r)
cond	31:12	31:13	5	! r
op	31:12	0:0	6	!
water	31:13	0:0	6	r
stmts	32:12	32:59	5	
water	32:12	0:0	6	r
op	32:14	0:0	6	=
call	32:16	32:32	6	lex_line_end
arg	32:29	32:32	7	&sp
op	32:29	0:0	8	&
water	32:30	0:0	8	sp
water	32:34	0:0	6	?
water	32:36	0:0	6	1
water	32:38	0:0	6	:
water	32:40	0:0	6	AVERROR_INVALIDDATA
water	32:59	0:0	6	;
if	33:8	34:21	4	(r < 0)
cond	33:12	33:16	5	r < 0
water	33:12	0:0	6	r
op	33:14	0:0	6	<
water	33:16	0:0	6	0
stmts	34:12	34:21	5	
goto	34:12	34:21	6	fail
water	34:17	0:0	7	fail
water	35:4	0:0	4	}
op	36:4	0:0	2	*
water	36:5	0:0	2	rscript
op	36:13	0:0	2	=
water	36:15	0:0	2	sp
op	36:17	0:0	2	.
water	36:18	0:0	2	scs
water	36:21	0:0	2	;
return	37:4	37:12	2	1
water	37:11	0:0	3	1
label	38:0	38:4	2	fail :
call	39:4	39:23	2	free_script
arg	39:16	39:23	3	&sp.scs
op	39:16	0:0	4	&
water	39:17	0:0	4	sp
op	39:19	0:0	4	.
water	39:20	0:0	4	scs
water	39:24	0:0	2	;
if	40:4	42:68	2	(! * sp . err_msg)
cond	40:8	40:13	3	! * sp . err_msg
op	40:8	0:0	4	!
op	40:9	0:0	4	*
water	40:10	0:0	4	sp
op	40:12	0:0	4	.
water	40:13	0:0	4	err_msg
stmts	41:8	42:68	3	
if	41:8	42:68	4	(r == AVERROR_INVALIDDATA)
cond	41:12	41:17	5	r == AVERROR_INVALIDDATA
water	41:12	0:0	6	r
op	41:14	0:0	6	==
water	41:17	0:0	6	AVERROR_INVALIDDATA
stmts	42:12	42:68	5	
call	42:12	42:67	6	snprintf
arg	42:21	42:31	7	sp.err_msg
water	42:21	0:0	8	sp
op	42:23	0:0	8	.
water	42:24	0:0	8	err_msg
arg	42:33	42:51	7	sizeof(sp.err_msg)
op	42:33	0:0	8	sizeof
water	42:39	0:0	8	(
water	42:40	0:0	8	sp
op	42:42	0:0	8	.
water	42:43	0:0	8	err_msg
water	42:50	0:0	8	)
arg	42:53	42:67	7	"syntax error"
water	42:53	0:0	8	"syntax error"
water	42:68	0:0	6	;
if	43:4	58:4	2	(log && * sp . err_msg)
cond	43:8	43:19	3	log && * sp . err_msg
water	43:8	0:0	4	log
op	43:12	0:0	4	&&
op	43:15	0:0	4	*
water	43:16	0:0	4	sp
op	43:18	0:0	4	.
water	43:19	0:0	4	err_msg
stmts	43:28	58:4	3	
water	43:28	0:0	4	{
decl	44:8	44:35	4	const char	*ctx
op	44:24	0:0	4	=
water	44:26	0:0	4	sp
op	44:28	0:0	4	.
water	44:29	0:0	4	cursor
decl	45:8	46:47	4	const char	*ectx
op	45:25	0:0	4	=
call	45:27	46:46	5	av_x_if_null
arg	45:40	45:77	6	memchr(ctx,'\n',sp.end-sp.cursor)
call	45:40	45:76	7	memchr
arg	45:47	45:50	8	ctx
water	45:47	0:0	9	ctx
arg	45:52	45:56	8	'\n'
water	45:52	0:0	9	'\n'
arg	45:58	45:76	8	sp.end-sp.cursor
water	45:58	0:0	9	sp
op	45:60	0:0	9	.
water	45:61	0:0	9	end
op	45:65	0:0	9	-
water	45:67	0:0	9	sp
op	45:69	0:0	9	.
water	45:70	0:0	9	cursor
arg	46:40	46:46	6	sp.end
water	46:40	0:0	7	sp
op	46:42	0:0	7	.
water	46:43	0:0	7	end
decl	47:8	47:29	4	int	lctx
op	47:17	0:0	4	=
water	47:19	0:0	4	ectx
op	47:24	0:0	4	-
water	47:26	0:0	4	ctx
decl	48:8	48:32	4	const char	*quote
op	48:26	0:0	4	=
water	48:28	0:0	4	"\""
if	49:8	50:18	4	(lctx > 0 && ctx [ lctx - 1 ] == '\r')
cond	49:12	49:41	5	lctx > 0 && ctx [ lctx - 1 ] == '\r'
water	49:12	0:0	6	lctx
op	49:17	0:0	6	>
water	49:19	0:0	6	0
op	49:21	0:0	6	&&
water	49:24	0:0	6	ctx
op	49:27	0:0	6	[
water	49:28	0:0	6	lctx
op	49:33	0:0	6	-
water	49:35	0:0	6	1
op	49:36	0:0	6	]
op	49:38	0:0	6	==
water	49:41	0:0	6	'\r'
stmts	50:12	50:18	5	
water	50:12	0:0	6	lctx
op	50:16	0:0	6	--
water	50:18	0:0	6	;
if	51:8	55:8	4	(lctx == 0)
cond	51:12	51:20	5	lctx == 0
water	51:12	0:0	6	lctx
op	51:17	0:0	6	==
water	51:20	0:0	6	0
stmts	51:23	55:8	5	
water	51:23	0:0	6	{
water	52:12	0:0	6	ctx
op	52:16	0:0	6	=
water	52:18	0:0	6	"the end of line"
water	52:35	0:0	6	;
water	53:12	0:0	6	lctx
op	53:17	0:0	6	=
call	53:19	53:29	6	strlen
arg	53:26	53:29	7	ctx
water	53:26	0:0	8	ctx
water	53:30	0:0	6	;
water	54:12	0:0	6	quote
op	54:18	0:0	6	=
water	54:20	0:0	6	""
water	54:22	0:0	6	;
water	55:8	0:0	6	}
call	56:8	57:62	4	av_log
arg	56:15	56:18	5	log
water	56:15	0:0	6	log
arg	56:20	56:32	5	AV_LOG_ERROR
water	56:20	0:0	6	AV_LOG_ERROR
arg	56:34	56:70	5	"Error line %d: %s near %s%.*s%s.\n"
water	56:34	0:0	6	"Error line %d: %s near %s%.*s%s.\n"
arg	57:15	57:25	5	sp.line_no
water	57:15	0:0	6	sp
op	57:17	0:0	6	.
water	57:18	0:0	6	line_no
arg	57:27	57:37	5	sp.err_msg
water	57:27	0:0	6	sp
op	57:29	0:0	6	.
water	57:30	0:0	6	err_msg
arg	57:39	57:44	5	quote
water	57:39	0:0	6	quote
arg	57:46	57:50	5	lctx
water	57:46	0:0	6	lctx
arg	57:52	57:55	5	ctx
water	57:52	0:0	6	ctx
arg	57:57	57:62	5	quote
water	57:57	0:0	6	quote
water	57:63	0:0	4	;
water	58:4	0:0	4	}
return	59:4	59:12	2	r
water	59:11	0:0	3	r
