func	1:0	141:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:57	2	AVFrame *	in
stmnts	0:0	140:40	1	
decl	3:4	3:45	2	HistogramContext	*h
op	3:26	0:0	2	=
water	3:28	0:0	2	inlink
op	3:34	0:0	2	->
water	3:36	0:0	2	dst
op	3:39	0:0	2	->
water	3:41	0:0	2	priv
decl	4:4	4:39	2	AVFilterContext	*ctx
op	4:26	0:0	2	=
water	4:28	0:0	2	inlink
op	4:34	0:0	2	->
water	4:36	0:0	2	dst
decl	5:4	5:43	2	AVFilterLink	*outlink
op	5:26	0:0	2	=
water	5:28	0:0	2	ctx
op	5:31	0:0	2	->
water	5:33	0:0	2	outputs
op	5:40	0:0	2	[
water	5:41	0:0	2	0
op	5:42	0:0	2	]
decl	6:4	6:16	2	AVFrame	*out
decl	7:4	7:16	2	uint8_t	*dst
decl	8:4	8:21	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:21	2	int	j
water	8:12	0:0	2	,
decl	8:4	8:21	2	int	k
water	8:15	0:0	2	,
decl	8:4	8:21	2	int	l
water	8:18	0:0	2	,
decl	8:4	8:21	2	int	m
water	9:4	0:0	2	out
op	9:8	0:0	2	=
call	9:10	9:61	2	ff_get_video_buffer
arg	9:30	9:37	3	outlink
water	9:30	0:0	4	outlink
arg	9:39	9:49	3	outlink->w
water	9:39	0:0	4	outlink
op	9:46	0:0	4	->
water	9:48	0:0	4	w
arg	9:51	9:61	3	outlink->h
water	9:51	0:0	4	outlink
op	9:58	0:0	4	->
water	9:60	0:0	4	h
water	9:62	0:0	2	;
if	10:4	13:4	2	(! out)
cond	10:8	10:9	3	! out
op	10:8	0:0	4	!
water	10:9	0:0	4	out
stmts	10:14	13:4	3	
water	10:14	0:0	4	{
call	11:8	11:25	4	av_frame_free
arg	11:22	11:25	5	&in
op	11:22	0:0	6	&
water	11:23	0:0	6	in
water	11:26	0:0	4	;
return	12:8	12:30	4	AVERROR(ENOMEM)
call	12:15	12:29	5	AVERROR
arg	12:23	12:29	6	ENOMEM
water	12:23	0:0	7	ENOMEM
water	13:4	0:0	4	}
water	14:4	0:0	2	out
op	14:7	0:0	2	->
water	14:9	0:0	2	pts
op	14:13	0:0	2	=
water	14:15	0:0	2	in
op	14:17	0:0	2	->
water	14:19	0:0	2	pts
water	14:22	0:0	2	;
for	15:4	32:4	2	(k = 0 ;k < 4 && out -> data [ k ];k ++)
forinit	15:9	15:14	3	k = 0 ;
water	15:9	0:0	4	k
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:36	3	k < 4 && out -> data [ k ]
water	15:16	0:0	4	k
op	15:18	0:0	4	<
water	15:20	0:0	4	4
op	15:22	0:0	4	&&
water	15:25	0:0	4	out
op	15:28	0:0	4	->
water	15:30	0:0	4	data
op	15:34	0:0	4	[
water	15:35	0:0	4	k
op	15:36	0:0	4	]
forexpr	15:39	15:40	3	k ++
water	15:39	0:0	4	k
op	15:40	0:0	4	++
stmts	15:44	32:4	3	
water	15:44	0:0	4	{
decl	16:8	16:48	4	const int	is_chroma
op	16:28	0:0	4	=
water	16:30	0:0	4	(
water	16:31	0:0	4	k
op	16:33	0:0	4	==
water	16:36	0:0	4	1
op	16:38	0:0	4	||
water	16:41	0:0	4	k
op	16:43	0:0	4	==
water	16:46	0:0	4	2
water	16:47	0:0	4	)
decl	17:8	17:95	4	const int	dst_h
op	17:24	0:0	4	=
call	17:26	17:94	5	FF_CEIL_RSHIFT
arg	17:41	17:51	6	outlink->h
water	17:41	0:0	7	outlink
op	17:48	0:0	7	->
water	17:50	0:0	7	h
arg	17:53	17:94	6	(is_chroma?h->odesc->log2_chroma_h:0)
water	17:53	0:0	7	(
water	17:54	0:0	7	is_chroma
water	17:64	0:0	7	?
water	17:66	0:0	7	h
op	17:67	0:0	7	->
water	17:69	0:0	7	odesc
op	17:74	0:0	7	->
water	17:76	0:0	7	log2_chroma_h
water	17:90	0:0	7	:
water	17:92	0:0	7	0
water	17:93	0:0	7	)
decl	18:8	18:95	4	const int	dst_w
op	18:24	0:0	4	=
call	18:26	18:94	5	FF_CEIL_RSHIFT
arg	18:41	18:51	6	outlink->w
water	18:41	0:0	7	outlink
op	18:48	0:0	7	->
water	18:50	0:0	7	w
arg	18:53	18:94	6	(is_chroma?h->odesc->log2_chroma_w:0)
water	18:53	0:0	7	(
water	18:54	0:0	7	is_chroma
water	18:64	0:0	7	?
water	18:66	0:0	7	h
op	18:67	0:0	7	->
water	18:69	0:0	7	odesc
op	18:74	0:0	7	->
water	18:76	0:0	7	log2_chroma_w
water	18:90	0:0	7	:
water	18:92	0:0	7	0
water	18:93	0:0	7	)
if	19:8	24:8	4	(h -> histogram_size <= 256)
cond	19:12	19:33	5	h -> histogram_size <= 256
water	19:12	0:0	6	h
op	19:13	0:0	6	->
water	19:15	0:0	6	histogram_size
op	19:30	0:0	6	<=
water	19:33	0:0	6	256
stmts	19:38	24:8	5	
water	19:38	0:0	6	{
for	20:12	23:45	6	(i = 0 ;i < dst_h;i ++)
forinit	20:17	20:22	7	i = 0 ;
water	20:17	0:0	8	i
op	20:19	0:0	8	=
water	20:21	0:0	8	0
water	20:22	0:0	8	;
cond	20:24	20:28	7	i < dst_h
water	20:24	0:0	8	i
op	20:26	0:0	8	<
water	20:28	0:0	8	dst_h
forexpr	20:36	20:37	7	i ++
water	20:36	0:0	8	i
op	20:37	0:0	8	++
stmts	21:16	23:45	7	
call	21:16	23:44	8	memset
arg	21:23	22:65	9	out->data[h->odesc->comp[k].plane]+i*out->linesize[h->odesc->comp[k].plane]
water	21:23	0:0	10	out
op	21:26	0:0	10	->
water	21:28	0:0	10	data
op	21:32	0:0	10	[
water	21:33	0:0	10	h
op	21:34	0:0	10	->
water	21:36	0:0	10	odesc
op	21:41	0:0	10	->
water	21:43	0:0	10	comp
op	21:47	0:0	10	[
water	21:48	0:0	10	k
op	21:49	0:0	10	]
op	21:50	0:0	10	.
water	21:51	0:0	10	plane
op	21:56	0:0	10	]
op	21:58	0:0	10	+
water	22:23	0:0	10	i
op	22:25	0:0	10	*
water	22:27	0:0	10	out
op	22:30	0:0	10	->
water	22:32	0:0	10	linesize
op	22:40	0:0	10	[
water	22:41	0:0	10	h
op	22:42	0:0	10	->
water	22:44	0:0	10	odesc
op	22:49	0:0	10	->
water	22:51	0:0	10	comp
op	22:55	0:0	10	[
water	22:56	0:0	10	k
op	22:57	0:0	10	]
op	22:58	0:0	10	.
water	22:59	0:0	10	plane
op	22:64	0:0	10	]
arg	23:23	23:37	9	h->bg_color[k]
water	23:23	0:0	10	h
op	23:24	0:0	10	->
water	23:26	0:0	10	bg_color
op	23:34	0:0	10	[
water	23:35	0:0	10	k
op	23:36	0:0	10	]
arg	23:39	23:44	9	dst_w
water	23:39	0:0	10	dst_w
water	23:45	0:0	8	;
water	24:8	0:0	6	}
else	24:10	31:8	4
stmts	24:15	31:8	5	
water	24:15	0:0	6	{
decl	25:12	25:36	6	const int	mult
op	25:27	0:0	6	=
water	25:29	0:0	6	h
op	25:30	0:0	6	->
water	25:32	0:0	6	mult
for	26:12	30:46	6	(i = 0 ;i < dst_h;i ++)
forinit	26:17	26:22	7	i = 0 ;
water	26:17	0:0	8	i
op	26:19	0:0	8	=
water	26:21	0:0	8	0
water	26:22	0:0	8	;
cond	26:24	26:28	7	i < dst_h
water	26:24	0:0	8	i
op	26:26	0:0	8	<
water	26:28	0:0	8	dst_h
forexpr	26:36	26:37	7	i ++
water	26:36	0:0	8	i
op	26:37	0:0	8	++
stmts	27:16	30:46	7	
for	27:16	30:46	8	(j = 0 ;j < dst_w;j ++)
forinit	27:21	27:26	9	j = 0 ;
water	27:21	0:0	10	j
op	27:23	0:0	10	=
water	27:25	0:0	10	0
water	27:26	0:0	10	;
cond	27:28	27:32	9	j < dst_w
water	27:28	0:0	10	j
op	27:30	0:0	10	<
water	27:32	0:0	10	dst_w
forexpr	27:39	27:40	9	j ++
water	27:39	0:0	10	j
op	27:40	0:0	10	++
stmts	28:20	30:46	9	
call	28:20	30:45	10	AV_WN16
arg	28:28	29:74	11	out->data[h->odesc->comp[k].plane]+i*out->linesize[h->odesc->comp[k].plane]+j*2
water	28:28	0:0	12	out
op	28:31	0:0	12	->
water	28:33	0:0	12	data
op	28:37	0:0	12	[
water	28:38	0:0	12	h
op	28:39	0:0	12	->
water	28:41	0:0	12	odesc
op	28:46	0:0	12	->
water	28:48	0:0	12	comp
op	28:52	0:0	12	[
water	28:53	0:0	12	k
op	28:54	0:0	12	]
op	28:55	0:0	12	.
water	28:56	0:0	12	plane
op	28:61	0:0	12	]
op	28:63	0:0	12	+
water	29:24	0:0	12	i
op	29:26	0:0	12	*
water	29:28	0:0	12	out
op	29:31	0:0	12	->
water	29:33	0:0	12	linesize
op	29:41	0:0	12	[
water	29:42	0:0	12	h
op	29:43	0:0	12	->
water	29:45	0:0	12	odesc
op	29:50	0:0	12	->
water	29:52	0:0	12	comp
op	29:56	0:0	12	[
water	29:57	0:0	12	k
op	29:58	0:0	12	]
op	29:59	0:0	12	.
water	29:60	0:0	12	plane
op	29:65	0:0	12	]
op	29:67	0:0	12	+
water	29:69	0:0	12	j
op	29:71	0:0	12	*
water	29:73	0:0	12	2
arg	30:24	30:45	11	h->bg_color[k]*mult
water	30:24	0:0	12	h
op	30:25	0:0	12	->
water	30:27	0:0	12	bg_color
op	30:35	0:0	12	[
water	30:36	0:0	12	k
op	30:37	0:0	12	]
op	30:39	0:0	12	*
water	30:41	0:0	12	mult
water	30:46	0:0	10	;
water	31:8	0:0	6	}
water	32:4	0:0	4	}
switch	33:4	138:4	2	(h -> mode)
cond	33:12	33:15	3	h -> mode
water	33:12	0:0	4	h
op	33:13	0:0	4	->
water	33:15	0:0	4	mode
stmts	33:21	138:4	3	
water	33:21	0:0	4	{
label	34:4	34:20	4	case MODE_LEVELS :
for	35:8	93:8	4	(m = 0 , k = 0 ;k < h -> ncomp;k ++)
forinit	35:13	35:25	5	m = 0 , k = 0 ;
water	35:13	0:0	6	m
op	35:15	0:0	6	=
water	35:17	0:0	6	0
water	35:18	0:0	6	,
water	35:20	0:0	6	k
op	35:22	0:0	6	=
water	35:24	0:0	6	0
water	35:25	0:0	6	;
cond	35:27	35:34	5	k < h -> ncomp
water	35:27	0:0	6	k
op	35:29	0:0	6	<
water	35:31	0:0	6	h
op	35:32	0:0	6	->
water	35:34	0:0	6	ncomp
forexpr	35:41	35:42	5	k ++
water	35:41	0:0	6	k
op	35:42	0:0	6	++
stmts	35:46	93:8	5	
water	35:46	0:0	6	{
decl	36:12	36:48	6	const int	p
op	36:24	0:0	6	=
water	36:26	0:0	6	h
op	36:27	0:0	6	->
water	36:29	0:0	6	desc
op	36:33	0:0	6	->
water	36:35	0:0	6	comp
op	36:39	0:0	6	[
water	36:40	0:0	6	k
op	36:41	0:0	6	]
op	36:42	0:0	6	.
water	36:43	0:0	6	plane
decl	37:12	37:48	6	const int	height
op	37:29	0:0	6	=
water	37:31	0:0	6	h
op	37:32	0:0	6	->
water	37:34	0:0	6	planeheight
op	37:45	0:0	6	[
water	37:46	0:0	6	p
op	37:47	0:0	6	]
decl	38:12	38:46	6	const int	width
op	38:28	0:0	6	=
water	38:30	0:0	6	h
op	38:31	0:0	6	->
water	38:33	0:0	6	planewidth
op	38:43	0:0	6	[
water	38:44	0:0	6	p
op	38:45	0:0	6	]
decl	39:12	39:31	6	double	max_hval_log
water	40:12	0:0	6	unsigned
water	40:21	0:0	6	max_hval
op	40:30	0:0	6	=
water	40:32	0:0	6	0
water	40:33	0:0	6	;
decl	41:12	41:21	6	int	start
if	42:12	43:24	6	(! ( ( 1 << k ) & h -> components ))
cond	42:16	42:42	7	! ( ( 1 << k ) & h -> components )
op	42:16	0:0	8	!
water	42:17	0:0	8	(
water	42:18	0:0	8	(
water	42:19	0:0	8	1
op	42:21	0:0	8	<<
water	42:24	0:0	8	k
water	42:25	0:0	8	)
op	42:27	0:0	8	&
water	42:29	0:0	8	h
op	42:30	0:0	8	->
water	42:32	0:0	8	components
water	42:42	0:0	8	)
stmts	43:16	43:24	7	
continue	43:16	43:24	8	
water	44:12	0:0	6	start
op	44:18	0:0	6	=
water	44:20	0:0	6	m
op	44:21	0:0	6	++
op	44:24	0:0	6	*
water	44:26	0:0	6	(
water	44:27	0:0	6	h
op	44:28	0:0	6	->
water	44:30	0:0	6	level_height
op	44:43	0:0	6	+
water	44:45	0:0	6	h
op	44:46	0:0	6	->
water	44:48	0:0	6	scale_height
water	44:60	0:0	6	)
op	44:62	0:0	6	*
water	44:64	0:0	6	h
op	44:65	0:0	6	->
water	44:67	0:0	6	display_mode
water	44:79	0:0	6	;
if	45:12	51:12	6	(h -> histogram_size <= 256)
cond	45:16	45:37	7	h -> histogram_size <= 256
water	45:16	0:0	8	h
op	45:17	0:0	8	->
water	45:19	0:0	8	histogram_size
op	45:34	0:0	8	<=
water	45:37	0:0	8	256
stmts	45:42	51:12	7	
water	45:42	0:0	8	{
for	46:16	50:16	8	(i = 0 ;i < height;i ++)
forinit	46:21	46:26	9	i = 0 ;
water	46:21	0:0	10	i
op	46:23	0:0	10	=
water	46:25	0:0	10	0
water	46:26	0:0	10	;
cond	46:28	46:32	9	i < height
water	46:28	0:0	10	i
op	46:30	0:0	10	<
water	46:32	0:0	10	height
forexpr	46:40	46:41	9	i ++
water	46:40	0:0	10	i
op	46:41	0:0	10	++
stmts	46:45	50:16	9	
water	46:45	0:0	10	{
decl	47:20	47:74	10	const uint8_t	*src
op	47:39	0:0	10	=
water	47:41	0:0	10	in
op	47:43	0:0	10	->
water	47:45	0:0	10	data
op	47:49	0:0	10	[
water	47:50	0:0	10	p
op	47:51	0:0	10	]
op	47:53	0:0	10	+
water	47:55	0:0	10	i
op	47:57	0:0	10	*
water	47:59	0:0	10	in
op	47:61	0:0	10	->
water	47:63	0:0	10	linesize
op	47:71	0:0	10	[
water	47:72	0:0	10	p
op	47:73	0:0	10	]
for	48:20	49:46	10	(j = 0 ;j < width;j ++)
forinit	48:25	48:30	11	j = 0 ;
water	48:25	0:0	12	j
op	48:27	0:0	12	=
water	48:29	0:0	12	0
water	48:30	0:0	12	;
cond	48:32	48:36	11	j < width
water	48:32	0:0	12	j
op	48:34	0:0	12	<
water	48:36	0:0	12	width
forexpr	48:43	48:44	11	j ++
water	48:43	0:0	12	j
op	48:44	0:0	12	++
stmts	49:24	49:46	11	
water	49:24	0:0	12	h
op	49:25	0:0	12	->
water	49:27	0:0	12	histogram
op	49:36	0:0	12	[
water	49:37	0:0	12	src
op	49:40	0:0	12	[
water	49:41	0:0	12	j
op	49:42	0:0	12	]
op	49:43	0:0	12	]
op	49:44	0:0	12	++
water	49:46	0:0	12	;
water	50:16	0:0	10	}
water	51:12	0:0	8	}
else	51:14	57:12	6
stmts	51:19	57:12	7	
water	51:19	0:0	8	{
for	52:16	56:16	8	(i = 0 ;i < height;i ++)
forinit	52:21	52:26	9	i = 0 ;
water	52:21	0:0	10	i
op	52:23	0:0	10	=
water	52:25	0:0	10	0
water	52:26	0:0	10	;
cond	52:28	52:32	9	i < height
water	52:28	0:0	10	i
op	52:30	0:0	10	<
water	52:32	0:0	10	height
forexpr	52:40	52:41	9	i ++
water	52:40	0:0	10	i
op	52:41	0:0	10	++
stmts	52:45	56:16	9	
water	52:45	0:0	10	{
decl	53:20	53:95	10	const uint16_t	*src
op	53:40	0:0	10	=
call	53:42	53:94	11	(constuint16_t*)
arg	53:61	53:94	12	in->data[p]+i*in->linesize[p]
water	53:61	0:0	13	in
op	53:63	0:0	13	->
water	53:65	0:0	13	data
op	53:69	0:0	13	[
water	53:70	0:0	13	p
op	53:71	0:0	13	]
op	53:73	0:0	13	+
water	53:75	0:0	13	i
op	53:77	0:0	13	*
water	53:79	0:0	13	in
op	53:81	0:0	13	->
water	53:83	0:0	13	linesize
op	53:91	0:0	13	[
water	53:92	0:0	13	p
op	53:93	0:0	13	]
for	54:20	55:46	10	(j = 0 ;j < width;j ++)
forinit	54:25	54:30	11	j = 0 ;
water	54:25	0:0	12	j
op	54:27	0:0	12	=
water	54:29	0:0	12	0
water	54:30	0:0	12	;
cond	54:32	54:36	11	j < width
water	54:32	0:0	12	j
op	54:34	0:0	12	<
water	54:36	0:0	12	width
forexpr	54:43	54:44	11	j ++
water	54:43	0:0	12	j
op	54:44	0:0	12	++
stmts	55:24	55:46	11	
water	55:24	0:0	12	h
op	55:25	0:0	12	->
water	55:27	0:0	12	histogram
op	55:36	0:0	12	[
water	55:37	0:0	12	src
op	55:40	0:0	12	[
water	55:41	0:0	12	j
op	55:42	0:0	12	]
op	55:43	0:0	12	]
op	55:44	0:0	12	++
water	55:46	0:0	12	;
water	56:16	0:0	10	}
water	57:12	0:0	8	}
for	58:12	59:59	6	(i = 0 ;i < h -> histogram_size;i ++)
forinit	58:17	58:22	7	i = 0 ;
water	58:17	0:0	8	i
op	58:19	0:0	8	=
water	58:21	0:0	8	0
water	58:22	0:0	8	;
cond	58:24	58:31	7	i < h -> histogram_size
water	58:24	0:0	8	i
op	58:26	0:0	8	<
water	58:28	0:0	8	h
op	58:29	0:0	8	->
water	58:31	0:0	8	histogram_size
forexpr	58:47	58:48	7	i ++
water	58:47	0:0	8	i
op	58:48	0:0	8	++
stmts	59:16	59:59	7	
water	59:16	0:0	8	max_hval
op	59:25	0:0	8	=
call	59:27	59:58	8	FFMAX
arg	59:33	59:41	9	max_hval
water	59:33	0:0	10	max_hval
arg	59:43	59:58	9	h->histogram[i]
water	59:43	0:0	10	h
op	59:44	0:0	10	->
water	59:46	0:0	10	histogram
op	59:55	0:0	10	[
water	59:56	0:0	10	i
op	59:57	0:0	10	]
water	59:59	0:0	8	;
water	60:12	0:0	6	max_hval_log
op	60:25	0:0	6	=
call	60:27	60:44	6	log2
arg	60:32	60:44	7	max_hval+1
water	60:32	0:0	8	max_hval
op	60:41	0:0	8	+
water	60:43	0:0	8	1
water	60:45	0:0	6	;
for	61:12	91:12	6	(i = 0 ;i < outlink -> w;i ++)
forinit	61:17	61:22	7	i = 0 ;
water	61:17	0:0	8	i
op	61:19	0:0	8	=
water	61:21	0:0	8	0
water	61:22	0:0	8	;
cond	61:24	61:37	7	i < outlink -> w
water	61:24	0:0	8	i
op	61:26	0:0	8	<
water	61:28	0:0	8	outlink
op	61:35	0:0	8	->
water	61:37	0:0	8	w
forexpr	61:40	61:41	7	i ++
water	61:40	0:0	8	i
op	61:41	0:0	8	++
stmts	61:45	91:12	7	
water	61:45	0:0	8	{
decl	62:16	62:30	8	int	col_height
if	63:16	64:107	8	(h -> levels_mode)
cond	63:20	63:23	9	h -> levels_mode
water	63:20	0:0	10	h
op	63:21	0:0	10	->
water	63:23	0:0	10	levels_mode
stmts	64:20	64:107	9	
water	64:20	0:0	10	col_height
op	64:31	0:0	10	=
call	64:33	64:106	10	round
arg	64:39	64:106	11	h->level_height*(1.-(log2(h->histogram[i]+1)/max_hval_log))
water	64:39	0:0	12	h
op	64:40	0:0	12	->
water	64:42	0:0	12	level_height
op	64:55	0:0	12	*
water	64:57	0:0	12	(
water	64:58	0:0	12	1
op	64:59	0:0	12	.
op	64:61	0:0	12	-
water	64:63	0:0	12	(
call	64:64	64:88	12	log2
arg	64:69	64:88	13	h->histogram[i]+1
water	64:69	0:0	14	h
op	64:70	0:0	14	->
water	64:72	0:0	14	histogram
op	64:81	0:0	14	[
water	64:82	0:0	14	i
op	64:83	0:0	14	]
op	64:85	0:0	14	+
water	64:87	0:0	14	1
op	64:90	0:0	12	/
water	64:92	0:0	12	max_hval_log
water	64:104	0:0	12	)
water	64:105	0:0	12	)
water	64:107	0:0	10	;
else	65:16	66:121	8
stmts	66:20	66:121	9	
water	66:20	0:0	10	col_height
op	66:31	0:0	10	=
water	66:33	0:0	10	h
op	66:34	0:0	10	->
water	66:36	0:0	10	level_height
op	66:49	0:0	10	-
water	66:51	0:0	10	(
water	66:52	0:0	10	h
op	66:53	0:0	10	->
water	66:55	0:0	10	histogram
op	66:64	0:0	10	[
water	66:65	0:0	10	i
op	66:66	0:0	10	]
op	66:68	0:0	10	*
water	66:70	0:0	10	(
water	66:71	0:0	10	int64_t
water	66:78	0:0	10	)
water	66:79	0:0	10	h
op	66:80	0:0	10	->
water	66:82	0:0	10	level_height
op	66:95	0:0	10	+
water	66:97	0:0	10	max_hval
op	66:106	0:0	10	-
water	66:108	0:0	10	1
water	66:109	0:0	10	)
op	66:111	0:0	10	/
water	66:113	0:0	10	max_hval
water	66:121	0:0	10	;
if	67:16	78:16	8	(h -> histogram_size <= 256)
cond	67:20	67:41	9	h -> histogram_size <= 256
water	67:20	0:0	10	h
op	67:21	0:0	10	->
water	67:23	0:0	10	histogram_size
op	67:38	0:0	10	<=
water	67:41	0:0	10	256
stmts	67:46	78:16	9	
water	67:46	0:0	10	{
for	68:20	75:20	10	(j = h -> level_height - 1 ;j >= col_height;j --)
forinit	68:25	68:48	11	j = h -> level_height - 1 ;
water	68:25	0:0	12	j
op	68:27	0:0	12	=
water	68:29	0:0	12	h
op	68:30	0:0	12	->
water	68:32	0:0	12	level_height
op	68:45	0:0	12	-
water	68:47	0:0	12	1
water	68:48	0:0	12	;
cond	68:50	68:55	11	j >= col_height
water	68:50	0:0	12	j
op	68:52	0:0	12	>=
water	68:55	0:0	12	col_height
forexpr	68:67	68:68	11	j --
water	68:67	0:0	12	j
op	68:68	0:0	12	--
stmts	68:72	75:20	11	
water	68:72	0:0	12	{
if	69:24	72:24	12	(h -> display_mode)
cond	69:28	69:31	13	h -> display_mode
water	69:28	0:0	14	h
op	69:29	0:0	14	->
water	69:31	0:0	14	display_mode
stmts	69:45	72:24	13	
water	69:45	0:0	14	{
for	70:28	71:97	14	(l = 0 ;l < h -> ncomp;l ++)
forinit	70:33	70:38	15	l = 0 ;
water	70:33	0:0	16	l
op	70:35	0:0	16	=
water	70:37	0:0	16	0
water	70:38	0:0	16	;
cond	70:40	70:47	15	l < h -> ncomp
water	70:40	0:0	16	l
op	70:42	0:0	16	<
water	70:44	0:0	16	h
op	70:45	0:0	16	->
water	70:47	0:0	16	ncomp
forexpr	70:54	70:55	15	l ++
water	70:54	0:0	16	l
op	70:55	0:0	16	++
stmts	71:32	71:97	15	
water	71:32	0:0	16	out
op	71:35	0:0	16	->
water	71:37	0:0	16	data
op	71:41	0:0	16	[
water	71:42	0:0	16	l
op	71:43	0:0	16	]
op	71:44	0:0	16	[
water	71:45	0:0	16	(
water	71:46	0:0	16	j
op	71:48	0:0	16	+
water	71:50	0:0	16	start
water	71:55	0:0	16	)
op	71:57	0:0	16	*
water	71:59	0:0	16	out
op	71:62	0:0	16	->
water	71:64	0:0	16	linesize
op	71:72	0:0	16	[
water	71:73	0:0	16	l
op	71:74	0:0	16	]
op	71:76	0:0	16	+
water	71:78	0:0	16	i
op	71:79	0:0	16	]
op	71:81	0:0	16	=
water	71:83	0:0	16	h
op	71:84	0:0	16	->
water	71:86	0:0	16	fg_color
op	71:94	0:0	16	[
water	71:95	0:0	16	l
op	71:96	0:0	16	]
water	71:97	0:0	16	;
water	72:24	0:0	14	}
else	72:26	74:24	12
stmts	72:31	74:24	13	
water	72:31	0:0	14	{
water	73:28	0:0	14	out
op	73:31	0:0	14	->
water	73:33	0:0	14	data
op	73:37	0:0	14	[
water	73:38	0:0	14	p
op	73:39	0:0	14	]
op	73:40	0:0	14	[
water	73:41	0:0	14	(
water	73:42	0:0	14	j
op	73:44	0:0	14	+
water	73:46	0:0	14	start
water	73:51	0:0	14	)
op	73:53	0:0	14	*
water	73:55	0:0	14	out
op	73:58	0:0	14	->
water	73:60	0:0	14	linesize
op	73:68	0:0	14	[
water	73:69	0:0	14	p
op	73:70	0:0	14	]
op	73:72	0:0	14	+
water	73:74	0:0	14	i
op	73:75	0:0	14	]
op	73:77	0:0	14	=
water	73:79	0:0	14	255
water	73:82	0:0	14	;
water	74:24	0:0	14	}
water	75:20	0:0	12	}
for	76:20	77:76	10	(j = h -> level_height + h -> scale_height - 1 ;j >= h -> level_height;j --)
forinit	76:25	76:66	11	j = h -> level_height + h -> scale_height - 1 ;
water	76:25	0:0	12	j
op	76:27	0:0	12	=
water	76:29	0:0	12	h
op	76:30	0:0	12	->
water	76:32	0:0	12	level_height
op	76:45	0:0	12	+
water	76:47	0:0	12	h
op	76:48	0:0	12	->
water	76:50	0:0	12	scale_height
op	76:63	0:0	12	-
water	76:65	0:0	12	1
water	76:66	0:0	12	;
cond	76:68	76:76	11	j >= h -> level_height
water	76:68	0:0	12	j
op	76:70	0:0	12	>=
water	76:73	0:0	12	h
op	76:74	0:0	12	->
water	76:76	0:0	12	level_height
forexpr	76:90	76:91	11	j --
water	76:90	0:0	12	j
op	76:91	0:0	12	--
stmts	77:24	77:76	11	
water	77:24	0:0	12	out
op	77:27	0:0	12	->
water	77:29	0:0	12	data
op	77:33	0:0	12	[
water	77:34	0:0	12	p
op	77:35	0:0	12	]
op	77:36	0:0	12	[
water	77:37	0:0	12	(
water	77:38	0:0	12	j
op	77:40	0:0	12	+
water	77:42	0:0	12	start
water	77:47	0:0	12	)
op	77:49	0:0	12	*
water	77:51	0:0	12	out
op	77:54	0:0	12	->
water	77:56	0:0	12	linesize
op	77:64	0:0	12	[
water	77:65	0:0	12	p
op	77:66	0:0	12	]
op	77:68	0:0	12	+
water	77:70	0:0	12	i
op	77:71	0:0	12	]
op	77:73	0:0	12	=
water	77:75	0:0	12	i
water	77:76	0:0	12	;
water	78:16	0:0	10	}
else	78:18	90:16	8
stmts	78:23	90:16	9	
water	78:23	0:0	10	{
decl	79:20	79:44	10	const int	mult
op	79:35	0:0	10	=
water	79:37	0:0	10	h
op	79:38	0:0	10	->
water	79:40	0:0	10	mult
for	80:20	87:20	10	(j = h -> level_height - 1 ;j >= col_height;j --)
forinit	80:25	80:48	11	j = h -> level_height - 1 ;
water	80:25	0:0	12	j
op	80:27	0:0	12	=
water	80:29	0:0	12	h
op	80:30	0:0	12	->
water	80:32	0:0	12	level_height
op	80:45	0:0	12	-
water	80:47	0:0	12	1
water	80:48	0:0	12	;
cond	80:50	80:55	11	j >= col_height
water	80:50	0:0	12	j
op	80:52	0:0	12	>=
water	80:55	0:0	12	col_height
forexpr	80:67	80:68	11	j --
water	80:67	0:0	12	j
op	80:68	0:0	12	--
stmts	80:72	87:20	11	
water	80:72	0:0	12	{
if	81:24	84:24	12	(h -> display_mode)
cond	81:28	81:31	13	h -> display_mode
water	81:28	0:0	14	h
op	81:29	0:0	14	->
water	81:31	0:0	14	display_mode
stmts	81:45	84:24	13	
water	81:45	0:0	14	{
for	82:28	83:117	14	(l = 0 ;l < h -> ncomp;l ++)
forinit	82:33	82:38	15	l = 0 ;
water	82:33	0:0	16	l
op	82:35	0:0	16	=
water	82:37	0:0	16	0
water	82:38	0:0	16	;
cond	82:40	82:47	15	l < h -> ncomp
water	82:40	0:0	16	l
op	82:42	0:0	16	<
water	82:44	0:0	16	h
op	82:45	0:0	16	->
water	82:47	0:0	16	ncomp
forexpr	82:54	82:55	15	l ++
water	82:54	0:0	16	l
op	82:55	0:0	16	++
stmts	83:32	83:117	15	
call	83:32	83:116	16	AV_WN16
arg	83:40	83:93	17	out->data[l]+(j+start)*out->linesize[l]+i*2
water	83:40	0:0	18	out
op	83:43	0:0	18	->
water	83:45	0:0	18	data
op	83:49	0:0	18	[
water	83:50	0:0	18	l
op	83:51	0:0	18	]
op	83:53	0:0	18	+
water	83:55	0:0	18	(
water	83:56	0:0	18	j
op	83:58	0:0	18	+
water	83:60	0:0	18	start
water	83:65	0:0	18	)
op	83:67	0:0	18	*
water	83:69	0:0	18	out
op	83:72	0:0	18	->
water	83:74	0:0	18	linesize
op	83:82	0:0	18	[
water	83:83	0:0	18	l
op	83:84	0:0	18	]
op	83:86	0:0	18	+
water	83:88	0:0	18	i
op	83:90	0:0	18	*
water	83:92	0:0	18	2
arg	83:95	83:116	17	h->fg_color[l]*mult
water	83:95	0:0	18	h
op	83:96	0:0	18	->
water	83:98	0:0	18	fg_color
op	83:106	0:0	18	[
water	83:107	0:0	18	l
op	83:108	0:0	18	]
op	83:110	0:0	18	*
water	83:112	0:0	18	mult
water	83:117	0:0	16	;
water	84:24	0:0	14	}
else	84:26	86:24	12
stmts	84:31	86:24	13	
water	84:31	0:0	14	{
call	85:28	85:101	14	AV_WN16
arg	85:36	85:89	15	out->data[p]+(j+start)*out->linesize[p]+i*2
water	85:36	0:0	16	out
op	85:39	0:0	16	->
water	85:41	0:0	16	data
op	85:45	0:0	16	[
water	85:46	0:0	16	p
op	85:47	0:0	16	]
op	85:49	0:0	16	+
water	85:51	0:0	16	(
water	85:52	0:0	16	j
op	85:54	0:0	16	+
water	85:56	0:0	16	start
water	85:61	0:0	16	)
op	85:63	0:0	16	*
water	85:65	0:0	16	out
op	85:68	0:0	16	->
water	85:70	0:0	16	linesize
op	85:78	0:0	16	[
water	85:79	0:0	16	p
op	85:80	0:0	16	]
op	85:82	0:0	16	+
water	85:84	0:0	16	i
op	85:86	0:0	16	*
water	85:88	0:0	16	2
arg	85:91	85:101	15	255*mult
water	85:91	0:0	16	255
op	85:95	0:0	16	*
water	85:97	0:0	16	mult
water	85:102	0:0	14	;
water	86:24	0:0	14	}
water	87:20	0:0	12	}
for	88:20	89:89	10	(j = h -> level_height + h -> scale_height - 1 ;j >= h -> level_height;j --)
forinit	88:25	88:66	11	j = h -> level_height + h -> scale_height - 1 ;
water	88:25	0:0	12	j
op	88:27	0:0	12	=
water	88:29	0:0	12	h
op	88:30	0:0	12	->
water	88:32	0:0	12	level_height
op	88:45	0:0	12	+
water	88:47	0:0	12	h
op	88:48	0:0	12	->
water	88:50	0:0	12	scale_height
op	88:63	0:0	12	-
water	88:65	0:0	12	1
water	88:66	0:0	12	;
cond	88:68	88:76	11	j >= h -> level_height
water	88:68	0:0	12	j
op	88:70	0:0	12	>=
water	88:73	0:0	12	h
op	88:74	0:0	12	->
water	88:76	0:0	12	level_height
forexpr	88:90	88:91	11	j --
water	88:90	0:0	12	j
op	88:91	0:0	12	--
stmts	89:24	89:89	11	
call	89:24	89:88	12	AV_WN16
arg	89:32	89:85	13	out->data[p]+(j+start)*out->linesize[p]+i*2
water	89:32	0:0	14	out
op	89:35	0:0	14	->
water	89:37	0:0	14	data
op	89:41	0:0	14	[
water	89:42	0:0	14	p
op	89:43	0:0	14	]
op	89:45	0:0	14	+
water	89:47	0:0	14	(
water	89:48	0:0	14	j
op	89:50	0:0	14	+
water	89:52	0:0	14	start
water	89:57	0:0	14	)
op	89:59	0:0	14	*
water	89:61	0:0	14	out
op	89:64	0:0	14	->
water	89:66	0:0	14	linesize
op	89:74	0:0	14	[
water	89:75	0:0	14	p
op	89:76	0:0	14	]
op	89:78	0:0	14	+
water	89:80	0:0	14	i
op	89:82	0:0	14	*
water	89:84	0:0	14	2
arg	89:87	89:88	13	i
water	89:87	0:0	14	i
water	89:89	0:0	12	;
water	90:16	0:0	10	}
water	91:12	0:0	8	}
call	92:12	92:72	6	memset
arg	92:19	92:31	7	h->histogram
water	92:19	0:0	8	h
op	92:20	0:0	8	->
water	92:22	0:0	8	histogram
arg	92:33	92:34	7	0
water	92:33	0:0	8	0
arg	92:36	92:72	7	h->histogram_size*sizeof(unsigned)
water	92:36	0:0	8	h
op	92:37	0:0	8	->
water	92:39	0:0	8	histogram_size
op	92:54	0:0	8	*
op	92:56	0:0	8	sizeof
water	92:62	0:0	8	(
water	92:63	0:0	8	unsigned
water	92:71	0:0	8	)
water	92:73	0:0	6	;
water	93:8	0:0	6	}
break	94:8	94:13	4	
label	95:4	95:22	4	case MODE_WAVEFORM :
for	96:8	99:8	4	(k = 0 ;k < h -> ncomp;k ++)
forinit	96:13	96:18	5	k = 0 ;
water	96:13	0:0	6	k
op	96:15	0:0	6	=
water	96:17	0:0	6	0
water	96:18	0:0	6	;
cond	96:20	96:27	5	k < h -> ncomp
water	96:20	0:0	6	k
op	96:22	0:0	6	<
water	96:24	0:0	6	h
op	96:25	0:0	6	->
water	96:27	0:0	6	ncomp
forexpr	96:34	96:35	5	k ++
water	96:34	0:0	6	k
op	96:35	0:0	6	++
stmts	96:39	99:8	5	
water	96:39	0:0	6	{
decl	97:12	97:56	6	const int	offset
op	97:29	0:0	6	=
water	97:31	0:0	6	k
op	97:33	0:0	6	*
water	97:35	0:0	6	256
op	97:39	0:0	6	*
water	97:41	0:0	6	h
op	97:42	0:0	6	->
water	97:44	0:0	6	display_mode
call	98:12	98:73	6	gen_waveform
arg	98:25	98:26	7	h
water	98:25	0:0	8	h
arg	98:28	98:30	7	in
water	98:28	0:0	8	in
arg	98:32	98:35	7	out
water	98:32	0:0	8	out
arg	98:37	98:38	7	k
water	98:37	0:0	8	k
arg	98:40	98:47	7	h->step
water	98:40	0:0	8	h
op	98:41	0:0	8	->
water	98:43	0:0	8	step
arg	98:49	98:55	7	offset
water	98:49	0:0	8	offset
arg	98:57	98:73	7	h->waveform_mode
water	98:57	0:0	8	h
op	98:58	0:0	8	->
water	98:60	0:0	8	waveform_mode
water	98:74	0:0	6	;
water	99:8	0:0	6	}
break	100:8	100:13	4	
label	101:4	101:19	4	case MODE_COLOR :
for	102:8	110:8	4	(i = 0 ;i < inlink -> h;i ++)
forinit	102:13	102:18	5	i = 0 ;
water	102:13	0:0	6	i
op	102:15	0:0	6	=
water	102:17	0:0	6	0
water	102:18	0:0	6	;
cond	102:20	102:32	5	i < inlink -> h
water	102:20	0:0	6	i
op	102:22	0:0	6	<
water	102:24	0:0	6	inlink
op	102:30	0:0	6	->
water	102:32	0:0	6	h
forexpr	102:35	102:36	5	i ++
water	102:35	0:0	6	i
op	102:36	0:0	6	++
stmts	102:40	110:8	5	
water	102:40	0:0	6	{
decl	103:12	103:47	6	const int	iw1
op	103:26	0:0	6	=
water	103:28	0:0	6	i
op	103:30	0:0	6	*
water	103:32	0:0	6	in
op	103:34	0:0	6	->
water	103:36	0:0	6	linesize
op	103:44	0:0	6	[
water	103:45	0:0	6	1
op	103:46	0:0	6	]
decl	104:12	104:47	6	const int	iw2
op	104:26	0:0	6	=
water	104:28	0:0	6	i
op	104:30	0:0	6	*
water	104:32	0:0	6	in
op	104:34	0:0	6	->
water	104:36	0:0	6	linesize
op	104:44	0:0	6	[
water	104:45	0:0	6	2
op	104:46	0:0	6	]
for	105:12	109:12	6	(j = 0 ;j < inlink -> w;j ++)
forinit	105:17	105:22	7	j = 0 ;
water	105:17	0:0	8	j
op	105:19	0:0	8	=
water	105:21	0:0	8	0
water	105:22	0:0	8	;
cond	105:24	105:36	7	j < inlink -> w
water	105:24	0:0	8	j
op	105:26	0:0	8	<
water	105:28	0:0	8	inlink
op	105:34	0:0	8	->
water	105:36	0:0	8	w
forexpr	105:39	105:40	7	j ++
water	105:39	0:0	8	j
op	105:40	0:0	8	++
stmts	105:44	109:12	7	
water	105:44	0:0	8	{
decl	106:16	106:94	8	const int	pos
op	106:30	0:0	8	=
water	106:32	0:0	8	in
op	106:34	0:0	8	->
water	106:36	0:0	8	data
op	106:40	0:0	8	[
water	106:41	0:0	8	1
op	106:42	0:0	8	]
op	106:43	0:0	8	[
water	106:44	0:0	8	iw1
op	106:48	0:0	8	+
water	106:50	0:0	8	j
op	106:51	0:0	8	]
op	106:53	0:0	8	*
water	106:55	0:0	8	out
op	106:58	0:0	8	->
water	106:60	0:0	8	linesize
op	106:68	0:0	8	[
water	106:69	0:0	8	0
op	106:70	0:0	8	]
op	106:72	0:0	8	+
water	106:74	0:0	8	in
op	106:76	0:0	8	->
water	106:78	0:0	8	data
op	106:82	0:0	8	[
water	106:83	0:0	8	2
op	106:84	0:0	8	]
op	106:85	0:0	8	[
water	106:86	0:0	8	iw2
op	106:90	0:0	8	+
water	106:92	0:0	8	j
op	106:93	0:0	8	]
if	107:16	108:39	8	(out -> data [ 0 ] [ pos ] < 255)
cond	107:20	107:40	9	out -> data [ 0 ] [ pos ] < 255
water	107:20	0:0	10	out
op	107:23	0:0	10	->
water	107:25	0:0	10	data
op	107:29	0:0	10	[
water	107:30	0:0	10	0
op	107:31	0:0	10	]
op	107:32	0:0	10	[
water	107:33	0:0	10	pos
op	107:36	0:0	10	]
op	107:38	0:0	10	<
water	107:40	0:0	10	255
stmts	108:20	108:39	9	
water	108:20	0:0	10	out
op	108:23	0:0	10	->
water	108:25	0:0	10	data
op	108:29	0:0	10	[
water	108:30	0:0	10	0
op	108:31	0:0	10	]
op	108:32	0:0	10	[
water	108:33	0:0	10	pos
op	108:36	0:0	10	]
op	108:37	0:0	10	++
water	108:39	0:0	10	;
water	109:12	0:0	8	}
water	110:8	0:0	6	}
for	111:8	119:8	4	(i = 0 ;i < 256;i ++)
forinit	111:13	111:18	5	i = 0 ;
water	111:13	0:0	6	i
op	111:15	0:0	6	=
water	111:17	0:0	6	0
water	111:18	0:0	6	;
cond	111:20	111:24	5	i < 256
water	111:20	0:0	6	i
op	111:22	0:0	6	<
water	111:24	0:0	6	256
forexpr	111:29	111:30	5	i ++
water	111:29	0:0	6	i
op	111:30	0:0	6	++
stmts	111:34	119:8	5	
water	111:34	0:0	6	{
water	112:12	0:0	6	dst
op	112:16	0:0	6	=
water	112:18	0:0	6	out
op	112:21	0:0	6	->
water	112:23	0:0	6	data
op	112:27	0:0	6	[
water	112:28	0:0	6	0
op	112:29	0:0	6	]
op	112:31	0:0	6	+
water	112:33	0:0	6	i
op	112:35	0:0	6	*
water	112:37	0:0	6	out
op	112:40	0:0	6	->
water	112:42	0:0	6	linesize
op	112:50	0:0	6	[
water	112:51	0:0	6	0
op	112:52	0:0	6	]
water	112:53	0:0	6	;
for	113:12	118:12	6	(j = 0 ;j < 256;j ++)
forinit	113:17	113:22	7	j = 0 ;
water	113:17	0:0	8	j
op	113:19	0:0	8	=
water	113:21	0:0	8	0
water	113:22	0:0	8	;
cond	113:24	113:28	7	j < 256
water	113:24	0:0	8	j
op	113:26	0:0	8	<
water	113:28	0:0	8	256
forexpr	113:33	113:34	7	j ++
water	113:33	0:0	8	j
op	113:34	0:0	8	++
stmts	113:38	118:12	7	
water	113:38	0:0	8	{
if	114:16	117:16	8	(! dst [ j ])
cond	114:20	114:26	9	! dst [ j ]
op	114:20	0:0	10	!
water	114:21	0:0	10	dst
op	114:24	0:0	10	[
water	114:25	0:0	10	j
op	114:26	0:0	10	]
stmts	114:29	117:16	9	
water	114:29	0:0	10	{
water	115:20	0:0	10	out
op	115:23	0:0	10	->
water	115:25	0:0	10	data
op	115:29	0:0	10	[
water	115:30	0:0	10	1
op	115:31	0:0	10	]
op	115:32	0:0	10	[
water	115:33	0:0	10	i
op	115:35	0:0	10	*
water	115:37	0:0	10	out
op	115:40	0:0	10	->
water	115:42	0:0	10	linesize
op	115:50	0:0	10	[
water	115:51	0:0	10	0
op	115:52	0:0	10	]
op	115:54	0:0	10	+
water	115:56	0:0	10	j
op	115:57	0:0	10	]
op	115:59	0:0	10	=
water	115:61	0:0	10	i
water	115:62	0:0	10	;
water	116:20	0:0	10	out
op	116:23	0:0	10	->
water	116:25	0:0	10	data
op	116:29	0:0	10	[
water	116:30	0:0	10	2
op	116:31	0:0	10	]
op	116:32	0:0	10	[
water	116:33	0:0	10	i
op	116:35	0:0	10	*
water	116:37	0:0	10	out
op	116:40	0:0	10	->
water	116:42	0:0	10	linesize
op	116:50	0:0	10	[
water	116:51	0:0	10	0
op	116:52	0:0	10	]
op	116:54	0:0	10	+
water	116:56	0:0	10	j
op	116:57	0:0	10	]
op	116:59	0:0	10	=
water	116:61	0:0	10	j
water	116:62	0:0	10	;
water	117:16	0:0	10	}
water	118:12	0:0	8	}
water	119:8	0:0	6	}
break	120:8	120:13	4	
label	121:4	121:20	4	case MODE_COLOR2 :
for	122:8	134:8	4	(i = 0 ;i < inlink -> h;i ++)
forinit	122:13	122:18	5	i = 0 ;
water	122:13	0:0	6	i
op	122:15	0:0	6	=
water	122:17	0:0	6	0
water	122:18	0:0	6	;
cond	122:20	122:32	5	i < inlink -> h
water	122:20	0:0	6	i
op	122:22	0:0	6	<
water	122:24	0:0	6	inlink
op	122:30	0:0	6	->
water	122:32	0:0	6	h
forexpr	122:35	122:36	5	i ++
water	122:35	0:0	6	i
op	122:36	0:0	6	++
stmts	122:40	134:8	5	
water	122:40	0:0	6	{
decl	123:12	123:47	6	const int	iw1
op	123:26	0:0	6	=
water	123:28	0:0	6	i
op	123:30	0:0	6	*
water	123:32	0:0	6	in
op	123:34	0:0	6	->
water	123:36	0:0	6	linesize
op	123:44	0:0	6	[
water	123:45	0:0	6	1
op	123:46	0:0	6	]
decl	124:12	124:47	6	const int	iw2
op	124:26	0:0	6	=
water	124:28	0:0	6	i
op	124:30	0:0	6	*
water	124:32	0:0	6	in
op	124:34	0:0	6	->
water	124:36	0:0	6	linesize
op	124:44	0:0	6	[
water	124:45	0:0	6	2
op	124:46	0:0	6	]
for	125:12	133:12	6	(j = 0 ;j < inlink -> w;j ++)
forinit	125:17	125:22	7	j = 0 ;
water	125:17	0:0	8	j
op	125:19	0:0	8	=
water	125:21	0:0	8	0
water	125:22	0:0	8	;
cond	125:24	125:36	7	j < inlink -> w
water	125:24	0:0	8	j
op	125:26	0:0	8	<
water	125:28	0:0	8	inlink
op	125:34	0:0	8	->
water	125:36	0:0	8	w
forexpr	125:39	125:40	7	j ++
water	125:39	0:0	8	j
op	125:40	0:0	8	++
stmts	125:44	133:12	7	
water	125:44	0:0	8	{
decl	126:16	126:50	8	const int	u
op	126:28	0:0	8	=
water	126:30	0:0	8	in
op	126:32	0:0	8	->
water	126:34	0:0	8	data
op	126:38	0:0	8	[
water	126:39	0:0	8	1
op	126:40	0:0	8	]
op	126:41	0:0	8	[
water	126:42	0:0	8	iw1
op	126:46	0:0	8	+
water	126:48	0:0	8	j
op	126:49	0:0	8	]
decl	127:16	127:50	8	const int	v
op	127:28	0:0	8	=
water	127:30	0:0	8	in
op	127:32	0:0	8	->
water	127:34	0:0	8	data
op	127:38	0:0	8	[
water	127:39	0:0	8	2
op	127:40	0:0	8	]
op	127:41	0:0	8	[
water	127:42	0:0	8	iw2
op	127:46	0:0	8	+
water	127:48	0:0	8	j
op	127:49	0:0	8	]
decl	128:16	128:56	8	const int	pos
op	128:30	0:0	8	=
water	128:32	0:0	8	u
op	128:34	0:0	8	*
water	128:36	0:0	8	out
op	128:39	0:0	8	->
water	128:41	0:0	8	linesize
op	128:49	0:0	8	[
water	128:50	0:0	8	0
op	128:51	0:0	8	]
op	128:53	0:0	8	+
water	128:55	0:0	8	v
if	129:16	130:71	8	(! out -> data [ 0 ] [ pos ])
cond	129:20	129:37	9	! out -> data [ 0 ] [ pos ]
op	129:20	0:0	10	!
water	129:21	0:0	10	out
op	129:24	0:0	10	->
water	129:26	0:0	10	data
op	129:30	0:0	10	[
water	129:31	0:0	10	0
op	129:32	0:0	10	]
op	129:33	0:0	10	[
water	129:34	0:0	10	pos
op	129:37	0:0	10	]
stmts	130:20	130:71	9	
water	130:20	0:0	10	out
op	130:23	0:0	10	->
water	130:25	0:0	10	data
op	130:29	0:0	10	[
water	130:30	0:0	10	0
op	130:31	0:0	10	]
op	130:32	0:0	10	[
water	130:33	0:0	10	pos
op	130:36	0:0	10	]
op	130:38	0:0	10	=
call	130:40	130:53	10	FFABS
arg	130:46	130:53	11	128-u
water	130:46	0:0	12	128
op	130:50	0:0	12	-
water	130:52	0:0	12	u
op	130:55	0:0	10	+
call	130:57	130:70	10	FFABS
arg	130:63	130:70	11	128-v
water	130:63	0:0	12	128
op	130:67	0:0	12	-
water	130:69	0:0	12	v
water	130:71	0:0	10	;
water	131:16	0:0	8	out
op	131:19	0:0	8	->
water	131:21	0:0	8	data
op	131:25	0:0	8	[
water	131:26	0:0	8	1
op	131:27	0:0	8	]
op	131:28	0:0	8	[
water	131:29	0:0	8	pos
op	131:32	0:0	8	]
op	131:34	0:0	8	=
water	131:36	0:0	8	u
water	131:37	0:0	8	;
water	132:16	0:0	8	out
op	132:19	0:0	8	->
water	132:21	0:0	8	data
op	132:25	0:0	8	[
water	132:26	0:0	8	2
op	132:27	0:0	8	]
op	132:28	0:0	8	[
water	132:29	0:0	8	pos
op	132:32	0:0	8	]
op	132:34	0:0	8	=
water	132:36	0:0	8	v
water	132:37	0:0	8	;
water	133:12	0:0	8	}
water	134:8	0:0	6	}
break	135:8	135:13	4	
label	136:4	136:11	4	default :
call	137:8	137:20	4	av_assert0
arg	137:19	137:20	5	0
water	137:19	0:0	6	0
water	137:21	0:0	4	;
water	138:4	0:0	4	}
call	139:4	139:21	2	av_frame_free
arg	139:18	139:21	3	&in
op	139:18	0:0	4	&
water	139:19	0:0	4	in
water	139:22	0:0	2	;
return	140:4	140:40	2	ff_filter_frame(outlink,out)
call	140:11	140:39	3	ff_filter_frame
arg	140:27	140:34	4	outlink
water	140:27	0:0	5	outlink
arg	140:36	140:39	4	out
water	140:36	0:0	5	out
