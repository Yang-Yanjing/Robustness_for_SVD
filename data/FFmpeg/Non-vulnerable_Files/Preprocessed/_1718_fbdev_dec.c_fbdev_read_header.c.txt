func	1:15	74:0	0	int	fbdev_read_header
params	1:36	0:0	1	
param	1:37	1:59	2	AVFormatContext *	avctx
stmnts	0:0	73:14	1	
decl	3:4	3:42	2	FBDevContext	*fbdev
op	3:24	0:0	2	=
water	3:26	0:0	2	avctx
op	3:31	0:0	2	->
water	3:33	0:0	2	priv_data
decl	4:4	4:23	2	AVStream	*st
op	4:17	0:0	2	=
water	4:19	0:0	2	NULL
decl	5:4	5:30	2	enum AVPixelFormat	pix_fmt
decl	6:4	6:29	2	int	ret
water	6:11	0:0	2	,
decl	6:4	6:29	2	int	flags
op	6:19	0:0	2	=
water	6:21	0:0	2	O_RDONLY
decl	7:4	7:22	2	const char	*device
if	8:4	9:30	2	(! ( st =avformat_new_stream (avctx ,NULL ) ))
cond	8:8	8:47	3	! ( st =avformat_new_stream (avctx ,NULL ) )
op	8:8	0:0	4	!
water	8:9	0:0	4	(
water	8:10	0:0	4	st
op	8:13	0:0	4	=
call	8:15	8:46	4	avformat_new_stream
arg	8:35	8:40	5	avctx
water	8:35	0:0	6	avctx
arg	8:42	8:46	5	NULL
water	8:42	0:0	6	NULL
water	8:47	0:0	4	)
stmts	9:8	9:30	3	
return	9:8	9:30	4	AVERROR(ENOMEM)
call	9:15	9:29	5	AVERROR
arg	9:23	9:29	6	ENOMEM
water	9:23	0:0	7	ENOMEM
call	10:4	10:42	2	avpriv_set_pts_info
arg	10:24	10:26	3	st
water	10:24	0:0	4	st
arg	10:28	10:30	3	64
water	10:28	0:0	4	64
arg	10:32	10:33	3	1
water	10:32	0:0	4	1
arg	10:35	10:42	3	1000000
water	10:35	0:0	4	1000000
water	10:43	0:0	2	;
if	12:4	13:27	2	(avctx -> flags & AVFMT_FLAG_NONBLOCK)
cond	12:8	12:23	3	avctx -> flags & AVFMT_FLAG_NONBLOCK
water	12:8	0:0	4	avctx
op	12:13	0:0	4	->
water	12:15	0:0	4	flags
op	12:21	0:0	4	&
water	12:23	0:0	4	AVFMT_FLAG_NONBLOCK
stmts	13:8	13:27	3	
water	13:8	0:0	4	flags
op	13:14	0:0	4	|=
water	13:17	0:0	4	O_NONBLOCK
water	13:27	0:0	4	;
if	14:4	15:32	2	(avctx -> filename [ 0 ])
cond	14:8	14:25	3	avctx -> filename [ 0 ]
water	14:8	0:0	4	avctx
op	14:13	0:0	4	->
water	14:15	0:0	4	filename
op	14:23	0:0	4	[
water	14:24	0:0	4	0
op	14:25	0:0	4	]
stmts	15:8	15:32	3	
water	15:8	0:0	4	device
op	15:15	0:0	4	=
water	15:17	0:0	4	avctx
op	15:22	0:0	4	->
water	15:24	0:0	4	filename
water	15:32	0:0	4	;
else	16:4	17:42	2
stmts	17:8	17:42	3	
water	17:8	0:0	4	device
op	17:15	0:0	4	=
call	17:17	17:41	4	ff_fbdev_default_device
water	17:42	0:0	4	;
if	18:4	24:4	2	(( fbdev -> fd =avpriv_open (device ,flags ) ) == - 1)
cond	18:8	18:53	3	( fbdev -> fd =avpriv_open (device ,flags ) ) == - 1
water	18:8	0:0	4	(
water	18:9	0:0	4	fbdev
op	18:14	0:0	4	->
water	18:16	0:0	4	fd
op	18:19	0:0	4	=
call	18:21	18:46	4	avpriv_open
arg	18:33	18:39	5	device
water	18:33	0:0	6	device
arg	18:41	18:46	5	flags
water	18:41	0:0	6	flags
water	18:47	0:0	4	)
op	18:49	0:0	4	==
op	18:52	0:0	4	-
water	18:53	0:0	4	1
stmts	18:56	24:4	3	
water	18:56	0:0	4	{
water	19:8	0:0	4	ret
op	19:12	0:0	4	=
call	19:14	19:27	4	AVERROR
arg	19:22	19:27	5	errno
water	19:22	0:0	6	errno
water	19:28	0:0	4	;
call	20:8	22:38	4	av_log
arg	20:15	20:20	5	avctx
water	20:15	0:0	6	avctx
arg	20:22	20:34	5	AV_LOG_ERROR
water	20:22	0:0	6	AV_LOG_ERROR
arg	21:15	21:61	5	"Could not open framebuffer device '%s': %s\n"
water	21:15	0:0	6	"Could not open framebuffer device '%s': %s\n"
arg	22:15	22:21	5	device
water	22:15	0:0	6	device
arg	22:23	22:38	5	av_err2str(ret)
call	22:23	22:37	6	av_err2str
arg	22:34	22:37	7	ret
water	22:34	0:0	8	ret
water	22:39	0:0	4	;
return	23:8	23:18	4	ret
water	23:15	0:0	5	ret
water	24:4	0:0	4	}
if	25:4	30:4	2	(ioctl (fbdev -> fd ,FBIOGET_VSCREENINFO ,& fbdev -> varinfo ) < 0)
cond	25:8	25:65	3	ioctl (fbdev -> fd ,FBIOGET_VSCREENINFO ,& fbdev -> varinfo ) < 0
call	25:8	25:61	4	ioctl
arg	25:14	25:23	5	fbdev->fd
water	25:14	0:0	6	fbdev
op	25:19	0:0	6	->
water	25:21	0:0	6	fd
arg	25:25	25:44	5	FBIOGET_VSCREENINFO
water	25:25	0:0	6	FBIOGET_VSCREENINFO
arg	25:46	25:61	5	&fbdev->varinfo
op	25:46	0:0	6	&
water	25:47	0:0	6	fbdev
op	25:52	0:0	6	->
water	25:54	0:0	6	varinfo
op	25:63	0:0	4	<
water	25:65	0:0	4	0
stmts	25:68	30:4	3	
water	25:68	0:0	4	{
water	26:8	0:0	4	ret
op	26:12	0:0	4	=
call	26:14	26:27	4	AVERROR
arg	26:22	26:27	5	errno
water	26:22	0:0	6	errno
water	26:28	0:0	4	;
call	27:8	28:59	4	av_log
arg	27:15	27:20	5	avctx
water	27:15	0:0	6	avctx
arg	27:22	27:34	5	AV_LOG_ERROR
water	27:22	0:0	6	AV_LOG_ERROR
arg	28:15	28:42	5	"FBIOGET_VSCREENINFO: %s\n"
water	28:15	0:0	6	"FBIOGET_VSCREENINFO: %s\n"
arg	28:44	28:59	5	av_err2str(ret)
call	28:44	28:58	6	av_err2str
arg	28:55	28:58	7	ret
water	28:55	0:0	8	ret
water	28:60	0:0	4	;
goto	29:8	29:17	4	fail
water	29:13	0:0	5	fail
water	30:4	0:0	4	}
if	31:4	36:4	2	(ioctl (fbdev -> fd ,FBIOGET_FSCREENINFO ,& fbdev -> fixinfo ) < 0)
cond	31:8	31:65	3	ioctl (fbdev -> fd ,FBIOGET_FSCREENINFO ,& fbdev -> fixinfo ) < 0
call	31:8	31:61	4	ioctl
arg	31:14	31:23	5	fbdev->fd
water	31:14	0:0	6	fbdev
op	31:19	0:0	6	->
water	31:21	0:0	6	fd
arg	31:25	31:44	5	FBIOGET_FSCREENINFO
water	31:25	0:0	6	FBIOGET_FSCREENINFO
arg	31:46	31:61	5	&fbdev->fixinfo
op	31:46	0:0	6	&
water	31:47	0:0	6	fbdev
op	31:52	0:0	6	->
water	31:54	0:0	6	fixinfo
op	31:63	0:0	4	<
water	31:65	0:0	4	0
stmts	31:68	36:4	3	
water	31:68	0:0	4	{
water	32:8	0:0	4	ret
op	32:12	0:0	4	=
call	32:14	32:27	4	AVERROR
arg	32:22	32:27	5	errno
water	32:22	0:0	6	errno
water	32:28	0:0	4	;
call	33:8	34:59	4	av_log
arg	33:15	33:20	5	avctx
water	33:15	0:0	6	avctx
arg	33:22	33:34	5	AV_LOG_ERROR
water	33:22	0:0	6	AV_LOG_ERROR
arg	34:15	34:42	5	"FBIOGET_FSCREENINFO: %s\n"
water	34:15	0:0	6	"FBIOGET_FSCREENINFO: %s\n"
arg	34:44	34:59	5	av_err2str(ret)
call	34:44	34:58	6	av_err2str
arg	34:55	34:58	7	ret
water	34:55	0:0	8	ret
water	34:60	0:0	4	;
goto	35:8	35:17	4	fail
water	35:13	0:0	5	fail
water	36:4	0:0	4	}
water	37:4	0:0	2	pix_fmt
op	37:12	0:0	2	=
call	37:14	37:59	2	ff_get_pixfmt_from_fb_varinfo
arg	37:44	37:59	3	&fbdev->varinfo
op	37:44	0:0	4	&
water	37:45	0:0	4	fbdev
op	37:50	0:0	4	->
water	37:52	0:0	4	varinfo
water	37:60	0:0	2	;
if	38:4	43:4	2	(pix_fmt == AV_PIX_FMT_NONE)
cond	38:8	38:19	3	pix_fmt == AV_PIX_FMT_NONE
water	38:8	0:0	4	pix_fmt
op	38:16	0:0	4	==
water	38:19	0:0	4	AV_PIX_FMT_NONE
stmts	38:36	43:4	3	
water	38:36	0:0	4	{
water	39:8	0:0	4	ret
op	39:12	0:0	4	=
call	39:14	39:28	4	AVERROR
arg	39:22	39:28	5	EINVAL
water	39:22	0:0	6	EINVAL
water	39:29	0:0	4	;
call	40:8	41:58	4	av_log
arg	40:15	40:20	5	avctx
water	40:15	0:0	6	avctx
arg	40:22	40:34	5	AV_LOG_ERROR
water	40:22	0:0	6	AV_LOG_ERROR
arg	41:15	41:58	5	"Framebuffer pixel format not supported.\n"
water	41:15	0:0	6	"Framebuffer pixel format not supported.\n"
water	41:59	0:0	4	;
goto	42:8	42:17	4	fail
water	42:13	0:0	5	fail
water	43:4	0:0	4	}
water	44:4	0:0	2	fbdev
op	44:9	0:0	2	->
water	44:11	0:0	2	width
op	44:27	0:0	2	=
water	44:29	0:0	2	fbdev
op	44:34	0:0	2	->
water	44:36	0:0	2	varinfo
op	44:43	0:0	2	.
water	44:44	0:0	2	xres
water	44:48	0:0	2	;
water	45:4	0:0	2	fbdev
op	45:9	0:0	2	->
water	45:11	0:0	2	height
op	45:27	0:0	2	=
water	45:29	0:0	2	fbdev
op	45:34	0:0	2	->
water	45:36	0:0	2	varinfo
op	45:43	0:0	2	.
water	45:44	0:0	2	yres
water	45:48	0:0	2	;
water	46:4	0:0	2	fbdev
op	46:9	0:0	2	->
water	46:11	0:0	2	bytes_per_pixel
op	46:27	0:0	2	=
water	46:29	0:0	2	(
water	46:30	0:0	2	fbdev
op	46:35	0:0	2	->
water	46:37	0:0	2	varinfo
op	46:44	0:0	2	.
water	46:45	0:0	2	bits_per_pixel
op	46:60	0:0	2	+
water	46:62	0:0	2	7
water	46:63	0:0	2	)
op	46:65	0:0	2	>>
water	46:68	0:0	2	3
water	46:69	0:0	2	;
water	47:4	0:0	2	fbdev
op	47:9	0:0	2	->
water	47:11	0:0	2	frame_linesize
op	47:27	0:0	2	=
water	47:29	0:0	2	fbdev
op	47:34	0:0	2	->
water	47:36	0:0	2	width
op	47:42	0:0	2	*
water	47:44	0:0	2	fbdev
op	47:49	0:0	2	->
water	47:51	0:0	2	bytes_per_pixel
water	47:66	0:0	2	;
water	48:4	0:0	2	fbdev
op	48:9	0:0	2	->
water	48:11	0:0	2	frame_size
op	48:27	0:0	2	=
water	48:29	0:0	2	fbdev
op	48:34	0:0	2	->
water	48:36	0:0	2	frame_linesize
op	48:51	0:0	2	*
water	48:53	0:0	2	fbdev
op	48:58	0:0	2	->
water	48:60	0:0	2	height
water	48:66	0:0	2	;
water	49:4	0:0	2	fbdev
op	49:9	0:0	2	->
water	49:11	0:0	2	time_frame
op	49:27	0:0	2	=
water	49:29	0:0	2	AV_NOPTS_VALUE
water	49:43	0:0	2	;
water	50:4	0:0	2	fbdev
op	50:9	0:0	2	->
water	50:11	0:0	2	data
op	50:16	0:0	2	=
call	50:18	50:89	2	mmap
arg	50:23	50:27	3	NULL
water	50:23	0:0	4	NULL
arg	50:29	50:52	3	fbdev->fixinfo.smem_len
water	50:29	0:0	4	fbdev
op	50:34	0:0	4	->
water	50:36	0:0	4	fixinfo
op	50:43	0:0	4	.
water	50:44	0:0	4	smem_len
arg	50:54	50:63	3	PROT_READ
water	50:54	0:0	4	PROT_READ
arg	50:65	50:75	3	MAP_SHARED
water	50:65	0:0	4	MAP_SHARED
arg	50:77	50:86	3	fbdev->fd
water	50:77	0:0	4	fbdev
op	50:82	0:0	4	->
water	50:84	0:0	4	fd
arg	50:88	50:89	3	0
water	50:88	0:0	4	0
water	50:90	0:0	2	;
if	51:4	55:4	2	(fbdev -> data == MAP_FAILED)
cond	51:8	51:23	3	fbdev -> data == MAP_FAILED
water	51:8	0:0	4	fbdev
op	51:13	0:0	4	->
water	51:15	0:0	4	data
op	51:20	0:0	4	==
water	51:23	0:0	4	MAP_FAILED
stmts	51:35	55:4	3	
water	51:35	0:0	4	{
water	52:8	0:0	4	ret
op	52:12	0:0	4	=
call	52:14	52:27	4	AVERROR
arg	52:22	52:27	5	errno
water	52:22	0:0	6	errno
water	52:28	0:0	4	;
call	53:8	53:76	4	av_log
arg	53:15	53:20	5	avctx
water	53:15	0:0	6	avctx
arg	53:22	53:34	5	AV_LOG_ERROR
water	53:22	0:0	6	AV_LOG_ERROR
arg	53:36	53:59	5	"Error in mmap(): %s\n"
water	53:36	0:0	6	"Error in mmap(): %s\n"
arg	53:61	53:76	5	av_err2str(ret)
call	53:61	53:75	6	av_err2str
arg	53:72	53:75	7	ret
water	53:72	0:0	8	ret
water	53:77	0:0	4	;
goto	54:8	54:17	4	fail
water	54:13	0:0	5	fail
water	55:4	0:0	4	}
water	56:4	0:0	2	st
op	56:6	0:0	2	->
water	56:8	0:0	2	codec
op	56:13	0:0	2	->
water	56:15	0:0	2	codec_type
op	56:26	0:0	2	=
water	56:28	0:0	2	AVMEDIA_TYPE_VIDEO
water	56:46	0:0	2	;
water	57:4	0:0	2	st
op	57:6	0:0	2	->
water	57:8	0:0	2	codec
op	57:13	0:0	2	->
water	57:15	0:0	2	codec_id
op	57:26	0:0	2	=
water	57:28	0:0	2	AV_CODEC_ID_RAWVIDEO
water	57:48	0:0	2	;
water	58:4	0:0	2	st
op	58:6	0:0	2	->
water	58:8	0:0	2	codec
op	58:13	0:0	2	->
water	58:15	0:0	2	width
op	58:26	0:0	2	=
water	58:28	0:0	2	fbdev
op	58:33	0:0	2	->
water	58:35	0:0	2	width
water	58:40	0:0	2	;
water	59:4	0:0	2	st
op	59:6	0:0	2	->
water	59:8	0:0	2	codec
op	59:13	0:0	2	->
water	59:15	0:0	2	height
op	59:26	0:0	2	=
water	59:28	0:0	2	fbdev
op	59:33	0:0	2	->
water	59:35	0:0	2	height
water	59:41	0:0	2	;
water	60:4	0:0	2	st
op	60:6	0:0	2	->
water	60:8	0:0	2	codec
op	60:13	0:0	2	->
water	60:15	0:0	2	pix_fmt
op	60:26	0:0	2	=
water	60:28	0:0	2	pix_fmt
water	60:35	0:0	2	;
water	61:4	0:0	2	st
op	61:6	0:0	2	->
water	61:8	0:0	2	codec
op	61:13	0:0	2	->
water	61:15	0:0	2	time_base
op	61:26	0:0	2	=
call	61:28	61:55	2	av_inv_q
arg	61:37	61:55	3	fbdev->framerate_q
water	61:37	0:0	4	fbdev
op	61:42	0:0	4	->
water	61:44	0:0	4	framerate_q
water	61:56	0:0	2	;
water	62:4	0:0	2	st
op	62:6	0:0	2	->
water	62:8	0:0	2	codec
op	62:13	0:0	2	->
water	62:15	0:0	2	bit_rate
op	62:26	0:0	2	=
water	63:8	0:0	2	fbdev
op	63:13	0:0	2	->
water	63:15	0:0	2	width
op	63:21	0:0	2	*
water	63:23	0:0	2	fbdev
op	63:28	0:0	2	->
water	63:30	0:0	2	height
op	63:37	0:0	2	*
water	63:39	0:0	2	fbdev
op	63:44	0:0	2	->
water	63:46	0:0	2	bytes_per_pixel
call	63:62	63:89	2	*av_q2d
arg	63:71	63:89	3	fbdev->framerate_q
water	63:71	0:0	4	fbdev
op	63:76	0:0	4	->
water	63:78	0:0	4	framerate_q
op	63:91	0:0	2	*
water	63:93	0:0	2	8
water	63:94	0:0	2	;
call	64:4	69:30	2	av_log
arg	64:11	64:16	3	avctx
water	64:11	0:0	4	avctx
arg	64:18	64:29	3	AV_LOG_INFO
water	64:18	0:0	4	AV_LOG_INFO
arg	65:11	65:63	3	"w:%d h:%d bpp:%d pixfmt:%s fps:%d/%d bit_rate:%d\n"
water	65:11	0:0	4	"w:%d h:%d bpp:%d pixfmt:%s fps:%d/%d bit_rate:%d\n"
arg	66:11	66:23	3	fbdev->width
water	66:11	0:0	4	fbdev
op	66:16	0:0	4	->
water	66:18	0:0	4	width
arg	66:25	66:38	3	fbdev->height
water	66:25	0:0	4	fbdev
op	66:30	0:0	4	->
water	66:32	0:0	4	height
arg	66:40	66:69	3	fbdev->varinfo.bits_per_pixel
water	66:40	0:0	4	fbdev
op	66:45	0:0	4	->
water	66:47	0:0	4	varinfo
op	66:54	0:0	4	.
water	66:55	0:0	4	bits_per_pixel
arg	67:11	67:39	3	av_get_pix_fmt_name(pix_fmt)
call	67:11	67:38	4	av_get_pix_fmt_name
arg	67:31	67:38	5	pix_fmt
water	67:31	0:0	6	pix_fmt
arg	68:11	68:33	3	fbdev->framerate_q.num
water	68:11	0:0	4	fbdev
op	68:16	0:0	4	->
water	68:18	0:0	4	framerate_q
op	68:29	0:0	4	.
water	68:30	0:0	4	num
arg	68:35	68:57	3	fbdev->framerate_q.den
water	68:35	0:0	4	fbdev
op	68:40	0:0	4	->
water	68:42	0:0	4	framerate_q
op	68:53	0:0	4	.
water	68:54	0:0	4	den
arg	69:11	69:30	3	st->codec->bit_rate
water	69:11	0:0	4	st
op	69:13	0:0	4	->
water	69:15	0:0	4	codec
op	69:20	0:0	4	->
water	69:22	0:0	4	bit_rate
water	69:31	0:0	2	;
return	70:4	70:12	2	0
water	70:11	0:0	3	0
label	71:0	71:4	2	fail :
call	72:4	72:19	2	close
arg	72:10	72:19	3	fbdev->fd
water	72:10	0:0	4	fbdev
op	72:15	0:0	4	->
water	72:17	0:0	4	fd
water	72:20	0:0	2	;
return	73:4	73:14	2	ret
water	73:11	0:0	3	ret
