func	2:15	37:0	0	int	init
params	2:23	0:0	1	
param	2:24	2:44	2	AVFilterContext *	ctx
stmnts	0:0	36:12	1	
decl	4:4	4:36	2	DetelecineContext	*s
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	priv
decl	5:4	5:17	2	const char	*p
decl	6:4	6:15	2	int	max
op	6:12	0:0	2	=
water	6:14	0:0	2	0
if	7:4	10:4	2	(!strlen (s -> pattern ))
cond	7:8	7:26	3	!strlen (s -> pattern )
op	7:8	0:0	4	!
call	7:9	7:26	4	strlen
arg	7:16	7:26	5	s->pattern
water	7:16	0:0	6	s
op	7:17	0:0	6	->
water	7:19	0:0	6	pattern
stmts	7:29	10:4	3	
water	7:29	0:0	4	{
call	8:8	8:58	4	av_log
arg	8:15	8:18	5	ctx
water	8:15	0:0	6	ctx
arg	8:20	8:32	5	AV_LOG_ERROR
water	8:20	0:0	6	AV_LOG_ERROR
arg	8:34	8:58	5	"No pattern provided.\n"
water	8:34	0:0	6	"No pattern provided.\n"
water	8:59	0:0	4	;
return	9:8	9:34	4	AVERROR_INVALIDDATA
water	9:15	0:0	5	AVERROR_INVALIDDATA
water	10:4	0:0	4	}
for	11:4	19:4	2	(p = s -> pattern ;* p;p ++)
forinit	11:9	11:23	3	p = s -> pattern ;
water	11:9	0:0	4	p
op	11:11	0:0	4	=
water	11:13	0:0	4	s
op	11:14	0:0	4	->
water	11:16	0:0	4	pattern
water	11:23	0:0	4	;
cond	11:25	11:26	3	* p
op	11:25	0:0	4	*
water	11:26	0:0	4	p
forexpr	11:29	11:30	3	p ++
water	11:29	0:0	4	p
op	11:30	0:0	4	++
stmts	11:34	19:4	3	
water	11:34	0:0	4	{
if	12:8	15:8	4	(!av_isdigit (* p ))
cond	12:12	12:26	5	!av_isdigit (* p )
op	12:12	0:0	6	!
call	12:13	12:26	6	av_isdigit
arg	12:24	12:26	7	*p
op	12:24	0:0	8	*
water	12:25	0:0	8	p
stmts	12:29	15:8	5	
water	12:29	0:0	6	{
call	13:12	13:91	6	av_log
arg	13:19	13:22	7	ctx
water	13:19	0:0	8	ctx
arg	13:24	13:36	7	AV_LOG_ERROR
water	13:24	0:0	8	AV_LOG_ERROR
arg	13:38	13:91	7	"Provided pattern includes non-numeric characters.\n"
water	13:38	0:0	8	"Provided pattern includes non-numeric characters.\n"
water	13:92	0:0	6	;
return	14:12	14:38	6	AVERROR_INVALIDDATA
water	14:19	0:0	7	AVERROR_INVALIDDATA
water	15:8	0:0	6	}
water	16:8	0:0	4	max
op	16:12	0:0	4	=
call	16:14	16:33	4	FFMAX
arg	16:20	16:28	5	*p-'0'
op	16:20	0:0	6	*
water	16:21	0:0	6	p
op	16:23	0:0	6	-
water	16:25	0:0	6	'0'
arg	16:30	16:33	5	max
water	16:30	0:0	6	max
water	16:34	0:0	4	;
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	pts
op	17:14	0:0	4	.
water	17:15	0:0	4	num
op	17:19	0:0	4	+=
op	17:22	0:0	4	*
water	17:23	0:0	4	p
op	17:25	0:0	4	-
water	17:27	0:0	4	'0'
water	17:30	0:0	4	;
water	18:8	0:0	4	s
op	18:9	0:0	4	->
water	18:11	0:0	4	pts
op	18:14	0:0	4	.
water	18:15	0:0	4	den
op	18:19	0:0	4	+=
water	18:22	0:0	4	2
water	18:23	0:0	4	;
water	19:4	0:0	4	}
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	nskip_fields
op	20:20	0:0	2	=
water	20:22	0:0	2	0
water	20:23	0:0	2	;
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	pattern_pos
op	21:19	0:0	2	=
water	21:21	0:0	2	0
water	21:22	0:0	2	;
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	start_time
op	22:18	0:0	2	=
water	22:20	0:0	2	AV_NOPTS_VALUE
water	22:34	0:0	2	;
if	23:4	33:4	2	(s -> start_frame != 0)
cond	23:8	23:26	3	s -> start_frame != 0
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	start_frame
op	23:23	0:0	4	!=
water	23:26	0:0	4	0
stmts	23:29	33:4	3	
water	23:29	0:0	4	{
decl	24:8	24:23	4	int	nfields
op	24:20	0:0	4	=
water	24:22	0:0	4	0
for	25:8	32:8	4	(p = s -> pattern ;* p;p ++)
forinit	25:13	25:27	5	p = s -> pattern ;
water	25:13	0:0	6	p
op	25:15	0:0	6	=
water	25:17	0:0	6	s
op	25:18	0:0	6	->
water	25:20	0:0	6	pattern
water	25:27	0:0	6	;
cond	25:29	25:30	5	* p
op	25:29	0:0	6	*
water	25:30	0:0	6	p
forexpr	25:33	25:34	5	p ++
water	25:33	0:0	6	p
op	25:34	0:0	6	++
stmts	25:38	32:8	5	
water	25:38	0:0	6	{
water	26:12	0:0	6	nfields
op	26:20	0:0	6	+=
op	26:23	0:0	6	*
water	26:24	0:0	6	p
op	26:26	0:0	6	-
water	26:28	0:0	6	'0'
water	26:31	0:0	6	;
water	27:12	0:0	6	s
op	27:13	0:0	6	->
water	27:15	0:0	6	pattern_pos
op	27:26	0:0	6	++
water	27:28	0:0	6	;
if	28:12	31:12	6	(nfields >= 2 * s -> start_frame)
cond	28:16	28:32	7	nfields >= 2 * s -> start_frame
water	28:16	0:0	8	nfields
op	28:24	0:0	8	>=
water	28:27	0:0	8	2
op	28:28	0:0	8	*
water	28:29	0:0	8	s
op	28:30	0:0	8	->
water	28:32	0:0	8	start_frame
stmts	28:45	31:12	7	
water	28:45	0:0	8	{
water	29:16	0:0	8	s
op	29:17	0:0	8	->
water	29:19	0:0	8	nskip_fields
op	29:32	0:0	8	=
water	29:34	0:0	8	nfields
op	29:42	0:0	8	-
water	29:44	0:0	8	2
op	29:45	0:0	8	*
water	29:46	0:0	8	s
op	29:47	0:0	8	->
water	29:49	0:0	8	start_frame
water	29:60	0:0	8	;
break	30:16	30:21	8	
water	31:12	0:0	8	}
water	32:8	0:0	6	}
water	33:4	0:0	4	}
call	34:4	35:60	2	av_log
arg	34:11	34:14	3	ctx
water	34:11	0:0	4	ctx
arg	34:16	34:27	3	AV_LOG_INFO
water	34:16	0:0	4	AV_LOG_INFO
arg	34:29	34:115	3	"Detelecine pattern %s removes up to %d frames per frame, pts advance factor: %d/%d\n"
water	34:29	0:0	4	"Detelecine pattern %s removes up to %d frames per frame, pts advance factor: %d/%d\n"
arg	35:11	35:21	3	s->pattern
water	35:11	0:0	4	s
op	35:12	0:0	4	->
water	35:14	0:0	4	pattern
arg	35:23	35:36	3	(max+1)/2
water	35:23	0:0	4	(
water	35:24	0:0	4	max
op	35:28	0:0	4	+
water	35:30	0:0	4	1
water	35:31	0:0	4	)
op	35:33	0:0	4	/
water	35:35	0:0	4	2
arg	35:38	35:48	3	s->pts.num
water	35:38	0:0	4	s
op	35:39	0:0	4	->
water	35:41	0:0	4	pts
op	35:44	0:0	4	.
water	35:45	0:0	4	num
arg	35:50	35:60	3	s->pts.den
water	35:50	0:0	4	s
op	35:51	0:0	4	->
water	35:53	0:0	4	pts
op	35:56	0:0	4	.
water	35:57	0:0	4	den
water	35:61	0:0	2	;
return	36:4	36:12	2	0
water	36:11	0:0	3	0
