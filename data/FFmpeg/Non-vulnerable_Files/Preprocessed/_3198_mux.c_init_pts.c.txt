func	1:0	30:0	0	static int	init_pts
params	1:19	0:0	1	
param	1:20	1:38	2	AVFormatContext *	s
stmnts	0:0	29:12	1	
decl	3:4	3:9	2	int	i
decl	4:4	4:16	2	AVStream	*st
for	6:4	28:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	6:9	6:14	3	i = 0 ;
water	6:9	0:0	4	i
op	6:11	0:0	4	=
water	6:13	0:0	4	0
water	6:14	0:0	4	;
cond	6:16	6:23	3	i < s -> nb_streams
water	6:16	0:0	4	i
op	6:18	0:0	4	<
water	6:20	0:0	4	s
op	6:21	0:0	4	->
water	6:23	0:0	4	nb_streams
forexpr	6:35	6:36	3	i ++
water	6:35	0:0	4	i
op	6:36	0:0	4	++
stmts	6:40	28:4	3	
water	6:40	0:0	4	{
decl	7:8	7:36	4	int64_t	den
op	7:20	0:0	4	=
water	7:22	0:0	4	AV_NOPTS_VALUE
water	8:8	0:0	4	st
op	8:11	0:0	4	=
water	8:13	0:0	4	s
op	8:14	0:0	4	->
water	8:16	0:0	4	streams
op	8:23	0:0	4	[
water	8:24	0:0	4	i
op	8:25	0:0	4	]
water	8:26	0:0	4	;
switch	9:8	18:8	4	(st -> codec -> codec_type)
cond	9:16	9:27	5	st -> codec -> codec_type
water	9:16	0:0	6	st
op	9:18	0:0	6	->
water	9:20	0:0	6	codec
op	9:25	0:0	6	->
water	9:27	0:0	6	codec_type
stmts	9:39	18:8	5	
water	9:39	0:0	6	{
label	10:8	10:31	6	case AVMEDIA_TYPE_AUDIO :
water	11:12	0:0	6	den
op	11:16	0:0	6	=
water	11:18	0:0	6	(
water	11:19	0:0	6	int64_t
water	11:26	0:0	6	)
water	11:27	0:0	6	st
op	11:29	0:0	6	->
water	11:31	0:0	6	time_base
op	11:40	0:0	6	.
water	11:41	0:0	6	num
op	11:45	0:0	6	*
water	11:47	0:0	6	st
op	11:49	0:0	6	->
water	11:51	0:0	6	codec
op	11:56	0:0	6	->
water	11:58	0:0	6	sample_rate
water	11:69	0:0	6	;
break	12:12	12:17	6	
label	13:8	13:31	6	case AVMEDIA_TYPE_VIDEO :
water	14:12	0:0	6	den
op	14:16	0:0	6	=
water	14:18	0:0	6	(
water	14:19	0:0	6	int64_t
water	14:26	0:0	6	)
water	14:27	0:0	6	st
op	14:29	0:0	6	->
water	14:31	0:0	6	time_base
op	14:40	0:0	6	.
water	14:41	0:0	6	num
op	14:45	0:0	6	*
water	14:47	0:0	6	st
op	14:49	0:0	6	->
water	14:51	0:0	6	codec
op	14:56	0:0	6	->
water	14:58	0:0	6	time_base
op	14:67	0:0	6	.
water	14:68	0:0	6	den
water	14:71	0:0	6	;
break	15:12	15:17	6	
label	16:8	16:15	6	default :
break	17:12	17:17	6	
water	18:8	0:0	6	}
if	19:8	20:60	4	(! st -> priv_pts)
cond	19:12	19:17	5	! st -> priv_pts
op	19:12	0:0	6	!
water	19:13	0:0	6	st
op	19:15	0:0	6	->
water	19:17	0:0	6	priv_pts
stmts	20:12	20:60	5	
water	20:12	0:0	6	st
op	20:14	0:0	6	->
water	20:16	0:0	6	priv_pts
op	20:25	0:0	6	=
call	20:27	20:59	6	av_mallocz
arg	20:38	20:59	7	sizeof(*st->priv_pts)
op	20:38	0:0	8	sizeof
water	20:44	0:0	8	(
op	20:45	0:0	8	*
water	20:46	0:0	8	st
op	20:48	0:0	8	->
water	20:50	0:0	8	priv_pts
water	20:58	0:0	8	)
water	20:60	0:0	6	;
if	21:8	22:34	4	(! st -> priv_pts)
cond	21:12	21:17	5	! st -> priv_pts
op	21:12	0:0	6	!
water	21:13	0:0	6	st
op	21:15	0:0	6	->
water	21:17	0:0	6	priv_pts
stmts	22:12	22:34	5	
return	22:12	22:34	6	AVERROR(ENOMEM)
call	22:19	22:33	7	AVERROR
arg	22:27	22:33	8	ENOMEM
water	22:27	0:0	9	ENOMEM
if	23:8	27:8	4	(den != AV_NOPTS_VALUE)
cond	23:12	23:19	5	den != AV_NOPTS_VALUE
water	23:12	0:0	6	den
op	23:16	0:0	6	!=
water	23:19	0:0	6	AV_NOPTS_VALUE
stmts	23:35	27:8	5	
water	23:35	0:0	6	{
if	24:12	25:42	6	(den <= 0)
cond	24:16	24:23	7	den <= 0
water	24:16	0:0	8	den
op	24:20	0:0	8	<=
water	24:23	0:0	8	0
stmts	25:16	25:42	7	
return	25:16	25:42	8	AVERROR_INVALIDDATA
water	25:23	0:0	9	AVERROR_INVALIDDATA
call	26:12	26:45	6	frac_init
arg	26:22	26:34	7	st->priv_pts
water	26:22	0:0	8	st
op	26:24	0:0	8	->
water	26:26	0:0	8	priv_pts
arg	26:36	26:37	7	0
water	26:36	0:0	8	0
arg	26:39	26:40	7	0
water	26:39	0:0	8	0
arg	26:42	26:45	7	den
water	26:42	0:0	8	den
water	26:46	0:0	6	;
water	27:8	0:0	6	}
water	28:4	0:0	4	}
return	29:4	29:12	2	0
water	29:11	0:0	3	0
