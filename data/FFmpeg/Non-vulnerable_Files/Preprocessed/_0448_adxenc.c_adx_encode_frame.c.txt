func	1:0	27:0	0	static int	adx_encode_frame
params	1:27	0:0	1	
param	1:28	1:49	2	AVCodecContext *	avctx
param	1:51	1:66	2	AVPacket *	avpkt
param	2:28	2:48	2	const AVFrame *	frame
param	2:50	2:69	2	int *	got_packet_ptr
stmnts	0:0	26:12	1	
decl	4:4	4:45	2	ADXContext	*c
op	4:27	0:0	2	=
water	4:29	0:0	2	avctx
op	4:34	0:0	2	->
water	4:36	0:0	2	priv_data
decl	5:4	5:60	2	const int16_t	*samples
op	5:27	0:0	2	=
water	5:29	0:0	2	(
water	5:30	0:0	2	const
water	5:36	0:0	2	int16_t
op	5:44	0:0	2	*
water	5:45	0:0	2	)
water	5:46	0:0	2	frame
op	5:51	0:0	2	->
water	5:53	0:0	2	data
op	5:57	0:0	2	[
water	5:58	0:0	2	0
op	5:59	0:0	2	]
decl	6:4	6:16	2	uint8_t	*dst
decl	7:4	7:25	2	int	ch
water	7:10	0:0	2	,
decl	7:4	7:25	2	int	out_size
water	7:20	0:0	2	,
decl	7:4	7:25	2	int	ret
water	8:4	0:0	2	out_size
op	8:13	0:0	2	=
water	8:15	0:0	2	BLOCK_SIZE
op	8:26	0:0	2	*
water	8:28	0:0	2	avctx
op	8:33	0:0	2	->
water	8:35	0:0	2	channels
op	8:44	0:0	2	+
op	8:46	0:0	2	!
water	8:47	0:0	2	c
op	8:48	0:0	2	->
water	8:50	0:0	2	header_parsed
op	8:64	0:0	2	*
water	8:66	0:0	2	HEADER_SIZE
water	8:77	0:0	2	;
if	9:4	10:18	2	(( ret =ff_alloc_packet2 (avctx ,avpkt ,out_size ,0 ) ) < 0)
cond	9:8	9:62	3	( ret =ff_alloc_packet2 (avctx ,avpkt ,out_size ,0 ) ) < 0
water	9:8	0:0	4	(
water	9:9	0:0	4	ret
op	9:13	0:0	4	=
call	9:15	9:57	4	ff_alloc_packet2
arg	9:32	9:37	5	avctx
water	9:32	0:0	6	avctx
arg	9:39	9:44	5	avpkt
water	9:39	0:0	6	avpkt
arg	9:46	9:54	5	out_size
water	9:46	0:0	6	out_size
arg	9:56	9:57	5	0
water	9:56	0:0	6	0
water	9:58	0:0	4	)
op	9:60	0:0	4	<
water	9:62	0:0	4	0
stmts	10:8	10:18	3	
return	10:8	10:18	4	ret
water	10:15	0:0	5	ret
water	11:4	0:0	2	dst
op	11:8	0:0	2	=
water	11:10	0:0	2	avpkt
op	11:15	0:0	2	->
water	11:17	0:0	2	data
water	11:21	0:0	2	;
if	12:4	20:4	2	(! c -> header_parsed)
cond	12:8	12:12	3	! c -> header_parsed
op	12:8	0:0	4	!
water	12:9	0:0	4	c
op	12:10	0:0	4	->
water	12:12	0:0	4	header_parsed
stmts	12:27	20:4	3	
water	12:27	0:0	4	{
decl	13:8	13:19	4	int	hdrsize
if	14:8	17:8	4	(( hdrsize =adx_encode_header (avctx ,dst ,avpkt -> size ) ) < 0)
cond	14:12	14:69	5	( hdrsize =adx_encode_header (avctx ,dst ,avpkt -> size ) ) < 0
water	14:12	0:0	6	(
water	14:13	0:0	6	hdrsize
op	14:21	0:0	6	=
call	14:23	14:64	6	adx_encode_header
arg	14:41	14:46	7	avctx
water	14:41	0:0	8	avctx
arg	14:48	14:51	7	dst
water	14:48	0:0	8	dst
arg	14:53	14:64	7	avpkt->size
water	14:53	0:0	8	avpkt
op	14:58	0:0	8	->
water	14:60	0:0	8	size
water	14:65	0:0	6	)
op	14:67	0:0	6	<
water	14:69	0:0	6	0
stmts	14:72	17:8	5	
water	14:72	0:0	6	{
call	15:12	15:70	6	av_log
arg	15:19	15:24	7	avctx
water	15:19	0:0	8	avctx
arg	15:26	15:38	7	AV_LOG_ERROR
water	15:26	0:0	8	AV_LOG_ERROR
arg	15:40	15:70	7	"output buffer is too small\n"
water	15:40	0:0	8	"output buffer is too small\n"
water	15:71	0:0	6	;
return	16:12	16:34	6	AVERROR(EINVAL)
call	16:19	16:33	7	AVERROR
arg	16:27	16:33	8	EINVAL
water	16:27	0:0	9	EINVAL
water	17:8	0:0	6	}
water	18:8	0:0	4	dst
op	18:17	0:0	4	+=
water	18:20	0:0	4	hdrsize
water	18:27	0:0	4	;
water	19:8	0:0	4	c
op	19:9	0:0	4	->
water	19:11	0:0	4	header_parsed
op	19:25	0:0	4	=
water	19:27	0:0	4	1
water	19:28	0:0	4	;
water	20:4	0:0	4	}
for	21:4	24:4	2	(ch = 0 ;ch < avctx -> channels;ch ++)
forinit	21:9	21:15	3	ch = 0 ;
water	21:9	0:0	4	ch
op	21:12	0:0	4	=
water	21:14	0:0	4	0
water	21:15	0:0	4	;
cond	21:17	21:29	3	ch < avctx -> channels
water	21:17	0:0	4	ch
op	21:20	0:0	4	<
water	21:22	0:0	4	avctx
op	21:27	0:0	4	->
water	21:29	0:0	4	channels
forexpr	21:39	21:41	3	ch ++
water	21:39	0:0	4	ch
op	21:41	0:0	4	++
stmts	21:45	24:4	3	
water	21:45	0:0	4	{
call	22:8	22:70	4	adx_encode
arg	22:19	22:20	5	c
water	22:19	0:0	6	c
arg	22:22	22:25	5	dst
water	22:22	0:0	6	dst
arg	22:27	22:39	5	samples+ch
water	22:27	0:0	6	samples
op	22:35	0:0	6	+
water	22:37	0:0	6	ch
arg	22:41	22:53	5	&c->prev[ch]
op	22:41	0:0	6	&
water	22:42	0:0	6	c
op	22:43	0:0	6	->
water	22:45	0:0	6	prev
op	22:49	0:0	6	[
water	22:50	0:0	6	ch
op	22:52	0:0	6	]
arg	22:55	22:70	5	avctx->channels
water	22:55	0:0	6	avctx
op	22:60	0:0	6	->
water	22:62	0:0	6	channels
water	22:71	0:0	4	;
water	23:8	0:0	4	dst
op	23:12	0:0	4	+=
water	23:15	0:0	4	BLOCK_SIZE
water	23:25	0:0	4	;
water	24:4	0:0	4	}
op	25:4	0:0	2	*
water	25:5	0:0	2	got_packet_ptr
op	25:20	0:0	2	=
water	25:22	0:0	2	1
water	25:23	0:0	2	;
return	26:4	26:12	2	0
water	26:11	0:0	3	0
