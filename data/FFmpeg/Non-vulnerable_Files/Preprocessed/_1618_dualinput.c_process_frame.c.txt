func	1:0	19:0	0	static int	process_frame
params	1:24	0:0	1	
param	1:25	1:40	2	FFFrameSync *	fs
stmnts	0:0	18:14	1	
decl	3:4	3:37	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	fs
op	3:29	0:0	2	->
water	3:31	0:0	2	parent
decl	4:4	4:38	2	FFDualInputContext	*s
op	4:26	0:0	2	=
water	4:28	0:0	2	fs
op	4:30	0:0	2	->
water	4:32	0:0	2	opaque
decl	5:4	5:46	2	AVFrame	*mainpic
op	5:21	0:0	2	=
water	5:23	0:0	2	NULL
water	5:27	0:0	2	,
decl	5:4	5:46	2	AVFrame	*secondpic
op	5:40	0:0	2	=
water	5:42	0:0	2	NULL
decl	6:4	6:15	2	int	ret
op	6:12	0:0	2	=
water	6:14	0:0	2	0
if	7:4	11:4	2	(( ret =ff_framesync_get_frame (& s -> fs ,0 ,& mainpic ,1 ) ) < 0 || ( ret =ff_framesync_get_frame (& s -> fs ,1 ,& secondpic ,0 ) ) < 0)
cond	7:8	8:67	3	( ret =ff_framesync_get_frame (& s -> fs ,0 ,& mainpic ,1 ) ) < 0 || ( ret =ff_framesync_get_frame (& s -> fs ,1 ,& secondpic ,0 ) ) < 0
water	7:8	0:0	4	(
water	7:9	0:0	4	ret
op	7:13	0:0	4	=
call	7:15	7:62	4	ff_framesync_get_frame
arg	7:38	7:44	5	&s->fs
op	7:38	0:0	6	&
water	7:39	0:0	6	s
op	7:40	0:0	6	->
water	7:42	0:0	6	fs
arg	7:46	7:47	5	0
water	7:46	0:0	6	0
arg	7:49	7:57	5	&mainpic
op	7:49	0:0	6	&
water	7:50	0:0	6	mainpic
arg	7:61	7:62	5	1
water	7:61	0:0	6	1
water	7:63	0:0	4	)
op	7:65	0:0	4	<
water	7:67	0:0	4	0
op	7:69	0:0	4	||
water	8:8	0:0	4	(
water	8:9	0:0	4	ret
op	8:13	0:0	4	=
call	8:15	8:62	4	ff_framesync_get_frame
arg	8:38	8:44	5	&s->fs
op	8:38	0:0	6	&
water	8:39	0:0	6	s
op	8:40	0:0	6	->
water	8:42	0:0	6	fs
arg	8:46	8:47	5	1
water	8:46	0:0	6	1
arg	8:49	8:59	5	&secondpic
op	8:49	0:0	6	&
water	8:50	0:0	6	secondpic
arg	8:61	8:62	5	0
water	8:61	0:0	6	0
water	8:63	0:0	4	)
op	8:65	0:0	4	<
water	8:67	0:0	4	0
stmts	8:70	11:4	3	
water	8:70	0:0	4	{
call	9:8	9:30	4	av_frame_free
arg	9:22	9:30	5	&mainpic
op	9:22	0:0	6	&
water	9:23	0:0	6	mainpic
water	9:31	0:0	4	;
return	10:8	10:18	4	ret
water	10:15	0:0	5	ret
water	11:4	0:0	4	}
call	12:4	12:22	2	av_assert0
arg	12:15	12:22	3	mainpic
water	12:15	0:0	4	mainpic
water	12:23	0:0	2	;
water	13:4	0:0	2	mainpic
op	13:11	0:0	2	->
water	13:13	0:0	2	pts
op	13:17	0:0	2	=
call	13:19	13:89	2	av_rescale_q
arg	13:32	13:44	3	mainpic->pts
water	13:32	0:0	4	mainpic
op	13:39	0:0	4	->
water	13:41	0:0	4	pts
arg	13:46	13:61	3	s->fs.time_base
water	13:46	0:0	4	s
op	13:47	0:0	4	->
water	13:49	0:0	4	fs
op	13:51	0:0	4	.
water	13:52	0:0	4	time_base
arg	13:63	13:89	3	ctx->outputs[0]->time_base
water	13:63	0:0	4	ctx
op	13:66	0:0	4	->
water	13:68	0:0	4	outputs
op	13:75	0:0	4	[
water	13:76	0:0	4	0
op	13:77	0:0	4	]
op	13:78	0:0	4	->
water	13:80	0:0	4	time_base
water	13:90	0:0	2	;
if	14:4	15:53	2	(secondpic && ! ctx -> is_disabled)
cond	14:8	14:27	3	secondpic && ! ctx -> is_disabled
water	14:8	0:0	4	secondpic
op	14:18	0:0	4	&&
op	14:21	0:0	4	!
water	14:22	0:0	4	ctx
op	14:25	0:0	4	->
water	14:27	0:0	4	is_disabled
stmts	15:8	15:53	3	
water	15:8	0:0	4	mainpic
op	15:16	0:0	4	=
call	15:18	15:52	4	s->process
arg	15:29	15:32	5	ctx
water	15:29	0:0	6	ctx
arg	15:34	15:41	5	mainpic
water	15:34	0:0	6	mainpic
arg	15:43	15:52	5	secondpic
water	15:43	0:0	6	secondpic
water	15:53	0:0	4	;
water	16:4	0:0	2	ret
op	16:8	0:0	2	=
call	16:10	16:50	2	ff_filter_frame
arg	16:26	16:41	3	ctx->outputs[0]
water	16:26	0:0	4	ctx
op	16:29	0:0	4	->
water	16:31	0:0	4	outputs
op	16:38	0:0	4	[
water	16:39	0:0	4	0
op	16:40	0:0	4	]
arg	16:43	16:50	3	mainpic
water	16:43	0:0	4	mainpic
water	16:51	0:0	2	;
call	17:4	17:37	2	av_assert1
arg	17:15	17:37	3	ret!=AVERROR(EAGAIN)
water	17:15	0:0	4	ret
op	17:19	0:0	4	!=
call	17:22	17:36	4	AVERROR
arg	17:30	17:36	5	EAGAIN
water	17:30	0:0	6	EAGAIN
water	17:38	0:0	2	;
return	18:4	18:14	2	ret
water	18:11	0:0	3	ret
