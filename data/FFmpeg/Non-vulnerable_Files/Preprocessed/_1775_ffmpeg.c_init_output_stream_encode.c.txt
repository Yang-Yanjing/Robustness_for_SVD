func	1:0	146:0	0	static int	init_output_stream_encode
params	1:36	0:0	1	
param	1:37	1:54	2	OutputStream *	ost
stmnts	0:0	145:12	1	
decl	3:4	3:44	2	InputStream	*ist
op	3:21	0:0	2	=
call	3:23	3:43	3	get_input_stream
arg	3:40	3:43	4	ost
water	3:40	0:0	5	ost
decl	4:4	4:42	2	AVCodecContext	*enc_ctx
op	4:28	0:0	2	=
water	4:30	0:0	2	ost
op	4:33	0:0	2	->
water	4:35	0:0	2	enc_ctx
decl	5:4	5:34	2	AVCodecContext	*dec_ctx
op	5:28	0:0	2	=
water	5:30	0:0	2	NULL
decl	6:4	6:60	2	AVFormatContext	*oc
op	6:24	0:0	2	=
water	6:26	0:0	2	output_files
op	6:38	0:0	2	[
water	6:39	0:0	2	ost
op	6:42	0:0	2	->
water	6:44	0:0	2	file_index
op	6:54	0:0	2	]
op	6:55	0:0	2	->
water	6:57	0:0	2	ctx
decl	7:4	7:14	2	int	j
water	7:9	0:0	2	,
decl	7:4	7:14	2	int	ret
call	8:4	8:53	2	set_encoder_id
arg	8:19	8:48	3	output_files[ost->file_index]
water	8:19	0:0	4	output_files
op	8:31	0:0	4	[
water	8:32	0:0	4	ost
op	8:35	0:0	4	->
water	8:37	0:0	4	file_index
op	8:47	0:0	4	]
arg	8:50	8:53	3	ost
water	8:50	0:0	4	ost
water	8:54	0:0	2	;
call	12:4	12:53	2	av_dict_set
arg	12:16	12:34	3	&ost->st->metadata
op	12:16	0:0	4	&
water	12:17	0:0	4	ost
op	12:20	0:0	4	->
water	12:22	0:0	4	st
op	12:24	0:0	4	->
water	12:26	0:0	4	metadata
arg	12:36	12:44	3	"rotate"
water	12:36	0:0	4	"rotate"
arg	12:46	12:50	3	NULL
water	12:46	0:0	4	NULL
arg	12:52	12:53	3	0
water	12:52	0:0	4	0
water	12:54	0:0	2	;
if	13:4	17:4	2	(ist)
cond	13:8	13:8	3	ist
water	13:8	0:0	4	ist
stmts	13:13	17:4	3	
water	13:13	0:0	4	{
water	14:8	0:0	4	ost
op	14:11	0:0	4	->
water	14:13	0:0	4	st
op	14:15	0:0	4	->
water	14:17	0:0	4	disposition
op	14:38	0:0	4	=
water	14:40	0:0	4	ist
op	14:43	0:0	4	->
water	14:45	0:0	4	st
op	14:47	0:0	4	->
water	14:49	0:0	4	disposition
water	14:60	0:0	4	;
water	15:8	0:0	4	dec_ctx
op	15:16	0:0	4	=
water	15:18	0:0	4	ist
op	15:21	0:0	4	->
water	15:23	0:0	4	dec_ctx
water	15:30	0:0	4	;
water	16:8	0:0	4	enc_ctx
op	16:15	0:0	4	->
water	16:17	0:0	4	chroma_sample_location
op	16:40	0:0	4	=
water	16:42	0:0	4	dec_ctx
op	16:49	0:0	4	->
water	16:51	0:0	4	chroma_sample_location
water	16:73	0:0	4	;
water	17:4	0:0	4	}
else	17:6	27:4	2
stmts	17:11	27:4	3	
water	17:11	0:0	4	{
for	18:8	22:8	4	(j = 0 ;j < oc -> nb_streams;j ++)
forinit	18:13	18:18	5	j = 0 ;
water	18:13	0:0	6	j
op	18:15	0:0	6	=
water	18:17	0:0	6	0
water	18:18	0:0	6	;
cond	18:20	18:28	5	j < oc -> nb_streams
water	18:20	0:0	6	j
op	18:22	0:0	6	<
water	18:24	0:0	6	oc
op	18:26	0:0	6	->
water	18:28	0:0	6	nb_streams
forexpr	18:40	18:41	5	j ++
water	18:40	0:0	6	j
op	18:41	0:0	6	++
stmts	18:45	22:8	5	
water	18:45	0:0	6	{
decl	19:12	19:41	6	AVStream	*st
op	19:25	0:0	6	=
water	19:27	0:0	6	oc
op	19:29	0:0	6	->
water	19:31	0:0	6	streams
op	19:38	0:0	6	[
water	19:39	0:0	6	j
op	19:40	0:0	6	]
if	20:12	21:21	6	(st != ost -> st && st -> codecpar -> codec_type == ost -> st -> codecpar -> codec_type)
cond	20:16	20:80	7	st != ost -> st && st -> codecpar -> codec_type == ost -> st -> codecpar -> codec_type
water	20:16	0:0	8	st
op	20:19	0:0	8	!=
water	20:22	0:0	8	ost
op	20:25	0:0	8	->
water	20:27	0:0	8	st
op	20:30	0:0	8	&&
water	20:33	0:0	8	st
op	20:35	0:0	8	->
water	20:37	0:0	8	codecpar
op	20:45	0:0	8	->
water	20:47	0:0	8	codec_type
op	20:58	0:0	8	==
water	20:61	0:0	8	ost
op	20:64	0:0	8	->
water	20:66	0:0	8	st
op	20:68	0:0	8	->
water	20:70	0:0	8	codecpar
op	20:78	0:0	8	->
water	20:80	0:0	8	codec_type
stmts	21:16	21:21	7	
break	21:16	21:21	8	
water	22:8	0:0	6	}
if	23:8	26:61	4	(j == oc -> nb_streams)
cond	23:12	23:21	5	j == oc -> nb_streams
water	23:12	0:0	6	j
op	23:14	0:0	6	==
water	23:17	0:0	6	oc
op	23:19	0:0	6	->
water	23:21	0:0	6	nb_streams
stmts	24:12	26:61	5	
if	24:12	26:61	6	(ost -> st -> codecpar -> codec_type == AVMEDIA_TYPE_AUDIO || ost -> st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	24:16	25:49	7	ost -> st -> codecpar -> codec_type == AVMEDIA_TYPE_AUDIO || ost -> st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO
water	24:16	0:0	8	ost
op	24:19	0:0	8	->
water	24:21	0:0	8	st
op	24:23	0:0	8	->
water	24:25	0:0	8	codecpar
op	24:33	0:0	8	->
water	24:35	0:0	8	codec_type
op	24:46	0:0	8	==
water	24:49	0:0	8	AVMEDIA_TYPE_AUDIO
op	24:68	0:0	8	||
water	25:16	0:0	8	ost
op	25:19	0:0	8	->
water	25:21	0:0	8	st
op	25:23	0:0	8	->
water	25:25	0:0	8	codecpar
op	25:33	0:0	8	->
water	25:35	0:0	8	codec_type
op	25:46	0:0	8	==
water	25:49	0:0	8	AVMEDIA_TYPE_VIDEO
stmts	26:16	26:61	7	
water	26:16	0:0	8	ost
op	26:19	0:0	8	->
water	26:21	0:0	8	st
op	26:23	0:0	8	->
water	26:25	0:0	8	disposition
op	26:37	0:0	8	=
water	26:39	0:0	8	AV_DISPOSITION_DEFAULT
water	26:61	0:0	8	;
water	27:4	0:0	4	}
if	28:4	54:4	2	(enc_ctx -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	28:8	28:31	3	enc_ctx -> codec_type == AVMEDIA_TYPE_VIDEO
water	28:8	0:0	4	enc_ctx
op	28:15	0:0	4	->
water	28:17	0:0	4	codec_type
op	28:28	0:0	4	==
water	28:31	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	28:51	54:4	3	
water	28:51	0:0	4	{
if	29:8	30:79	4	(! ost -> frame_rate . num)
cond	29:12	29:29	5	! ost -> frame_rate . num
op	29:12	0:0	6	!
water	29:13	0:0	6	ost
op	29:16	0:0	6	->
water	29:18	0:0	6	frame_rate
op	29:28	0:0	6	.
water	29:29	0:0	6	num
stmts	30:12	30:79	5	
water	30:12	0:0	6	ost
op	30:15	0:0	6	->
water	30:17	0:0	6	frame_rate
op	30:28	0:0	6	=
call	30:30	30:78	6	av_buffersink_get_frame_rate
arg	30:59	30:78	7	ost->filter->filter
water	30:59	0:0	8	ost
op	30:62	0:0	8	->
water	30:64	0:0	8	filter
op	30:70	0:0	8	->
water	30:72	0:0	8	filter
water	30:79	0:0	6	;
if	31:8	32:44	4	(ist && ! ost -> frame_rate . num)
cond	31:12	31:36	5	ist && ! ost -> frame_rate . num
water	31:12	0:0	6	ist
op	31:16	0:0	6	&&
op	31:19	0:0	6	!
water	31:20	0:0	6	ost
op	31:23	0:0	6	->
water	31:25	0:0	6	frame_rate
op	31:35	0:0	6	.
water	31:36	0:0	6	num
stmts	32:12	32:44	5	
water	32:12	0:0	6	ost
op	32:15	0:0	6	->
water	32:17	0:0	6	frame_rate
op	32:28	0:0	6	=
water	32:30	0:0	6	ist
op	32:33	0:0	6	->
water	32:35	0:0	6	framerate
water	32:44	0:0	6	;
if	33:8	34:51	4	(ist && ! ost -> frame_rate . num)
cond	33:12	33:36	5	ist && ! ost -> frame_rate . num
water	33:12	0:0	6	ist
op	33:16	0:0	6	&&
op	33:19	0:0	6	!
water	33:20	0:0	6	ost
op	33:23	0:0	6	->
water	33:25	0:0	6	frame_rate
op	33:35	0:0	6	.
water	33:36	0:0	6	num
stmts	34:12	34:51	5	
water	34:12	0:0	6	ost
op	34:15	0:0	6	->
water	34:17	0:0	6	frame_rate
op	34:28	0:0	6	=
water	34:30	0:0	6	ist
op	34:33	0:0	6	->
water	34:35	0:0	6	st
op	34:37	0:0	6	->
water	34:39	0:0	6	r_frame_rate
water	34:51	0:0	6	;
if	35:8	43:8	4	(ist && ! ost -> frame_rate . num)
cond	35:12	35:36	5	ist && ! ost -> frame_rate . num
water	35:12	0:0	6	ist
op	35:16	0:0	6	&&
op	35:19	0:0	6	!
water	35:20	0:0	6	ost
op	35:23	0:0	6	->
water	35:25	0:0	6	frame_rate
op	35:35	0:0	6	.
water	35:36	0:0	6	num
stmts	35:41	43:8	5	
water	35:41	0:0	6	{
water	36:12	0:0	6	ost
op	36:15	0:0	6	->
water	36:17	0:0	6	frame_rate
op	36:28	0:0	6	=
water	36:30	0:0	6	(
water	36:31	0:0	6	AVRational
water	36:41	0:0	6	)
water	36:42	0:0	6	{
water	36:43	0:0	6	25
water	36:45	0:0	6	,
water	36:47	0:0	6	1
water	36:48	0:0	6	}
water	36:49	0:0	6	;
call	37:12	42:46	6	av_log
arg	37:19	37:23	7	NULL
water	37:19	0:0	8	NULL
arg	37:25	37:39	7	AV_LOG_WARNING
water	37:25	0:0	8	AV_LOG_WARNING
arg	38:19	41:57	7	"No information ""about the input framerate is available. Falling ""back to a default value of 25fps for output stream #%d:%d. Use the -r option ""if you want a different framerate.\n"
water	38:19	0:0	8	"No information "
water	39:19	0:0	8	"about the input framerate is available. Falling "
water	40:19	0:0	8	"back to a default value of 25fps for output stream #%d:%d. Use the -r option "
water	41:19	0:0	8	"if you want a different framerate.\n"
arg	42:19	42:34	7	ost->file_index
water	42:19	0:0	8	ost
op	42:22	0:0	8	->
water	42:24	0:0	8	file_index
arg	42:36	42:46	7	ost->index
water	42:36	0:0	8	ost
op	42:39	0:0	8	->
water	42:41	0:0	8	index
water	42:47	0:0	6	;
water	43:8	0:0	6	}
if	45:8	48:8	4	(ost -> enc -> supported_framerates && ! ost -> force_fps)
cond	45:12	45:52	5	ost -> enc -> supported_framerates && ! ost -> force_fps
water	45:12	0:0	6	ost
op	45:15	0:0	6	->
water	45:17	0:0	6	enc
op	45:20	0:0	6	->
water	45:22	0:0	6	supported_framerates
op	45:43	0:0	6	&&
op	45:46	0:0	6	!
water	45:47	0:0	6	ost
op	45:50	0:0	6	->
water	45:52	0:0	6	force_fps
stmts	45:63	48:8	5	
water	45:63	0:0	6	{
decl	46:12	46:92	6	int	idx
op	46:20	0:0	6	=
call	46:22	46:91	7	av_find_nearest_q_idx
arg	46:44	46:59	8	ost->frame_rate
water	46:44	0:0	9	ost
op	46:47	0:0	9	->
water	46:49	0:0	9	frame_rate
arg	46:61	46:91	8	ost->enc->supported_framerates
water	46:61	0:0	9	ost
op	46:64	0:0	9	->
water	46:66	0:0	9	enc
op	46:69	0:0	9	->
water	46:71	0:0	9	supported_framerates
water	47:12	0:0	6	ost
op	47:15	0:0	6	->
water	47:17	0:0	6	frame_rate
op	47:28	0:0	6	=
water	47:30	0:0	6	ost
op	47:33	0:0	6	->
water	47:35	0:0	6	enc
op	47:38	0:0	6	->
water	47:40	0:0	6	supported_framerates
op	47:60	0:0	6	[
water	47:61	0:0	6	idx
op	47:64	0:0	6	]
water	47:65	0:0	6	;
water	48:8	0:0	6	}
if	50:8	53:8	4	(enc_ctx -> codec_id == AV_CODEC_ID_MPEG4)
cond	50:12	50:33	5	enc_ctx -> codec_id == AV_CODEC_ID_MPEG4
water	50:12	0:0	6	enc_ctx
op	50:19	0:0	6	->
water	50:21	0:0	6	codec_id
op	50:30	0:0	6	==
water	50:33	0:0	6	AV_CODEC_ID_MPEG4
stmts	50:52	53:8	5	
water	50:52	0:0	6	{
call	51:12	52:69	6	av_reduce
arg	51:22	51:42	7	&ost->frame_rate.num
op	51:22	0:0	8	&
water	51:23	0:0	8	ost
op	51:26	0:0	8	->
water	51:28	0:0	8	frame_rate
op	51:38	0:0	8	.
water	51:39	0:0	8	num
arg	51:44	51:64	7	&ost->frame_rate.den
op	51:44	0:0	8	&
water	51:45	0:0	8	ost
op	51:48	0:0	8	->
water	51:50	0:0	8	frame_rate
op	51:60	0:0	8	.
water	51:61	0:0	8	den
arg	52:22	52:41	7	ost->frame_rate.num
water	52:22	0:0	8	ost
op	52:25	0:0	8	->
water	52:27	0:0	8	frame_rate
op	52:37	0:0	8	.
water	52:38	0:0	8	num
arg	52:43	52:62	7	ost->frame_rate.den
water	52:43	0:0	8	ost
op	52:46	0:0	8	->
water	52:48	0:0	8	frame_rate
op	52:58	0:0	8	.
water	52:59	0:0	8	den
arg	52:64	52:69	7	65535
water	52:64	0:0	8	65535
water	52:70	0:0	6	;
water	53:8	0:0	6	}
water	54:4	0:0	4	}
switch	55:4	143:4	2	(enc_ctx -> codec_type)
cond	55:12	55:21	3	enc_ctx -> codec_type
water	55:12	0:0	4	enc_ctx
op	55:19	0:0	4	->
water	55:21	0:0	4	codec_type
stmts	55:33	143:4	3	
water	55:33	0:0	4	{
label	56:4	56:27	4	case AVMEDIA_TYPE_AUDIO :
water	57:8	0:0	4	enc_ctx
op	57:15	0:0	4	->
water	57:17	0:0	4	sample_fmt
op	57:32	0:0	4	=
call	57:34	57:78	4	av_buffersink_get_format
arg	57:59	57:78	5	ost->filter->filter
water	57:59	0:0	6	ost
op	57:62	0:0	6	->
water	57:64	0:0	6	filter
op	57:70	0:0	6	->
water	57:72	0:0	6	filter
water	57:79	0:0	4	;
if	58:8	60:99	4	(dec_ctx)
cond	58:12	58:12	5	dec_ctx
water	58:12	0:0	6	dec_ctx
stmts	59:12	60:99	5	
water	59:12	0:0	6	enc_ctx
op	59:19	0:0	6	->
water	59:21	0:0	6	bits_per_raw_sample
op	59:41	0:0	6	=
call	59:43	60:98	6	FFMIN
arg	59:49	59:77	7	dec_ctx->bits_per_raw_sample
water	59:49	0:0	8	dec_ctx
op	59:56	0:0	8	->
water	59:58	0:0	8	bits_per_raw_sample
arg	60:49	60:98	7	av_get_bytes_per_sample(enc_ctx->sample_fmt)<<3
call	60:49	60:92	8	av_get_bytes_per_sample
arg	60:73	60:92	9	enc_ctx->sample_fmt
water	60:73	0:0	10	enc_ctx
op	60:80	0:0	10	->
water	60:82	0:0	10	sample_fmt
op	60:94	0:0	8	<<
water	60:97	0:0	8	3
water	60:99	0:0	6	;
water	61:8	0:0	4	enc_ctx
op	61:15	0:0	4	->
water	61:17	0:0	4	sample_rate
op	61:32	0:0	4	=
call	61:34	61:83	4	av_buffersink_get_sample_rate
arg	61:64	61:83	5	ost->filter->filter
water	61:64	0:0	6	ost
op	61:67	0:0	6	->
water	61:69	0:0	6	filter
op	61:75	0:0	6	->
water	61:77	0:0	6	filter
water	61:84	0:0	4	;
water	62:8	0:0	4	enc_ctx
op	62:15	0:0	4	->
water	62:17	0:0	4	channel_layout
op	62:32	0:0	4	=
call	62:34	62:86	4	av_buffersink_get_channel_layout
arg	62:67	62:86	5	ost->filter->filter
water	62:67	0:0	6	ost
op	62:70	0:0	6	->
water	62:72	0:0	6	filter
op	62:78	0:0	6	->
water	62:80	0:0	6	filter
water	62:87	0:0	4	;
water	63:8	0:0	4	enc_ctx
op	63:15	0:0	4	->
water	63:17	0:0	4	channels
op	63:32	0:0	4	=
call	63:34	63:80	4	av_buffersink_get_channels
arg	63:61	63:80	5	ost->filter->filter
water	63:61	0:0	6	ost
op	63:64	0:0	6	->
water	63:66	0:0	6	filter
op	63:72	0:0	6	->
water	63:74	0:0	6	filter
water	63:81	0:0	4	;
water	64:8	0:0	4	enc_ctx
op	64:15	0:0	4	->
water	64:17	0:0	4	time_base
op	64:32	0:0	4	=
water	64:34	0:0	4	(
water	64:35	0:0	4	AVRational
water	64:45	0:0	4	)
water	64:46	0:0	4	{
water	64:48	0:0	4	1
water	64:49	0:0	4	,
water	64:51	0:0	4	enc_ctx
op	64:58	0:0	4	->
water	64:60	0:0	4	sample_rate
water	64:72	0:0	4	}
water	64:73	0:0	4	;
break	65:8	65:13	4	
label	66:4	66:27	4	case AVMEDIA_TYPE_VIDEO :
water	67:8	0:0	4	enc_ctx
op	67:15	0:0	4	->
water	67:17	0:0	4	time_base
op	67:27	0:0	4	=
call	67:29	67:53	4	av_inv_q
arg	67:38	67:53	5	ost->frame_rate
water	67:38	0:0	6	ost
op	67:41	0:0	6	->
water	67:43	0:0	6	frame_rate
water	67:54	0:0	4	;
if	68:8	69:81	4	(! ( enc_ctx -> time_base . num && enc_ctx -> time_base . den ))
cond	68:12	68:62	5	! ( enc_ctx -> time_base . num && enc_ctx -> time_base . den )
op	68:12	0:0	6	!
water	68:13	0:0	6	(
water	68:14	0:0	6	enc_ctx
op	68:21	0:0	6	->
water	68:23	0:0	6	time_base
op	68:32	0:0	6	.
water	68:33	0:0	6	num
op	68:37	0:0	6	&&
water	68:40	0:0	6	enc_ctx
op	68:47	0:0	6	->
water	68:49	0:0	6	time_base
op	68:58	0:0	6	.
water	68:59	0:0	6	den
water	68:62	0:0	6	)
stmts	69:12	69:81	5	
water	69:12	0:0	6	enc_ctx
op	69:19	0:0	6	->
water	69:21	0:0	6	time_base
op	69:31	0:0	6	=
call	69:33	69:80	6	av_buffersink_get_time_base
arg	69:61	69:80	7	ost->filter->filter
water	69:61	0:0	8	ost
op	69:64	0:0	8	->
water	69:66	0:0	8	filter
op	69:72	0:0	8	->
water	69:74	0:0	8	filter
water	69:81	0:0	6	;
if	70:8	74:8	4	(av_q2d (enc_ctx -> time_base ) < 0 . 001 && video_sync_method != VSYNC_PASSTHROUGH && ( video_sync_method == VSYNC_CFR || video_sync_method == VSYNC_VSCFR || ( video_sync_method == VSYNC_AUTO && ! ( oc -> oformat -> flags & AVFMT_VARIABLE_FPS ) ) ))
cond	70:15	71:164	5	av_q2d (enc_ctx -> time_base ) < 0 . 001 && video_sync_method != VSYNC_PASSTHROUGH && ( video_sync_method == VSYNC_CFR || video_sync_method == VSYNC_VSCFR || ( video_sync_method == VSYNC_AUTO && ! ( oc -> oformat -> flags & AVFMT_VARIABLE_FPS ) ) )
call	70:15	70:40	6	av_q2d
arg	70:22	70:40	7	enc_ctx->time_base
water	70:22	0:0	8	enc_ctx
op	70:29	0:0	8	->
water	70:31	0:0	8	time_base
op	70:42	0:0	6	<
water	70:44	0:0	6	0
op	70:45	0:0	6	.
water	70:46	0:0	6	001
op	70:50	0:0	6	&&
water	70:53	0:0	6	video_sync_method
op	70:71	0:0	6	!=
water	70:74	0:0	6	VSYNC_PASSTHROUGH
op	71:11	0:0	6	&&
water	71:14	0:0	6	(
water	71:15	0:0	6	video_sync_method
op	71:33	0:0	6	==
water	71:36	0:0	6	VSYNC_CFR
op	71:46	0:0	6	||
water	71:49	0:0	6	video_sync_method
op	71:67	0:0	6	==
water	71:70	0:0	6	VSYNC_VSCFR
op	71:82	0:0	6	||
water	71:85	0:0	6	(
water	71:86	0:0	6	video_sync_method
op	71:104	0:0	6	==
water	71:107	0:0	6	VSYNC_AUTO
op	71:118	0:0	6	&&
op	71:121	0:0	6	!
water	71:122	0:0	6	(
water	71:123	0:0	6	oc
op	71:125	0:0	6	->
water	71:127	0:0	6	oformat
op	71:134	0:0	6	->
water	71:136	0:0	6	flags
op	71:142	0:0	6	&
water	71:144	0:0	6	AVFMT_VARIABLE_FPS
water	71:162	0:0	6	)
water	71:163	0:0	6	)
water	71:164	0:0	6	)
stmts	71:166	74:8	5	
water	71:166	0:0	6	{
call	72:12	73:118	6	av_log
arg	72:19	72:21	7	oc
water	72:19	0:0	8	oc
arg	72:23	72:37	7	AV_LOG_WARNING
water	72:23	0:0	8	AV_LOG_WARNING
arg	72:39	73:118	7	"Frame rate very high for a muxer not efficiently supporting it.\n""Please consider specifying a lower framerate, a different muxer or -vsync 2\n"
water	72:39	0:0	8	"Frame rate very high for a muxer not efficiently supporting it.\n"
water	73:39	0:0	8	"Please consider specifying a lower framerate, a different muxer or -vsync 2\n"
water	73:119	0:0	6	;
water	74:8	0:0	6	}
for	75:8	78:68	4	(j = 0 ;j < ost -> forced_kf_count;j ++)
forinit	75:13	75:18	5	j = 0 ;
water	75:13	0:0	6	j
op	75:15	0:0	6	=
water	75:17	0:0	6	0
water	75:18	0:0	6	;
cond	75:20	75:29	5	j < ost -> forced_kf_count
water	75:20	0:0	6	j
op	75:22	0:0	6	<
water	75:24	0:0	6	ost
op	75:27	0:0	6	->
water	75:29	0:0	6	forced_kf_count
forexpr	75:46	75:47	5	j ++
water	75:46	0:0	6	j
op	75:47	0:0	6	++
stmts	76:12	78:68	5	
water	76:12	0:0	6	ost
op	76:15	0:0	6	->
water	76:17	0:0	6	forced_kf_pts
op	76:30	0:0	6	[
water	76:31	0:0	6	j
op	76:32	0:0	6	]
op	76:34	0:0	6	=
call	76:36	78:67	6	av_rescale_q
arg	76:49	76:70	7	ost->forced_kf_pts[j]
water	76:49	0:0	8	ost
op	76:52	0:0	8	->
water	76:54	0:0	8	forced_kf_pts
op	76:67	0:0	8	[
water	76:68	0:0	8	j
op	76:69	0:0	8	]
arg	77:49	77:63	7	AV_TIME_BASE_Q
water	77:49	0:0	8	AV_TIME_BASE_Q
arg	78:49	78:67	7	enc_ctx->time_base
water	78:49	0:0	8	enc_ctx
op	78:56	0:0	8	->
water	78:58	0:0	8	time_base
water	78:68	0:0	6	;
water	79:8	0:0	4	enc_ctx
op	79:15	0:0	4	->
water	79:17	0:0	4	width
op	79:24	0:0	4	=
call	79:26	79:65	4	av_buffersink_get_w
arg	79:46	79:65	5	ost->filter->filter
water	79:46	0:0	6	ost
op	79:49	0:0	6	->
water	79:51	0:0	6	filter
op	79:57	0:0	6	->
water	79:59	0:0	6	filter
water	79:66	0:0	4	;
water	80:8	0:0	4	enc_ctx
op	80:15	0:0	4	->
water	80:17	0:0	4	height
op	80:24	0:0	4	=
call	80:26	80:65	4	av_buffersink_get_h
arg	80:46	80:65	5	ost->filter->filter
water	80:46	0:0	6	ost
op	80:49	0:0	6	->
water	80:51	0:0	6	filter
op	80:57	0:0	6	->
water	80:59	0:0	6	filter
water	80:66	0:0	4	;
water	81:8	0:0	4	enc_ctx
op	81:15	0:0	4	->
water	81:17	0:0	4	sample_aspect_ratio
op	81:37	0:0	4	=
water	81:39	0:0	4	ost
op	81:42	0:0	4	->
water	81:44	0:0	4	st
op	81:46	0:0	4	->
water	81:48	0:0	4	sample_aspect_ratio
op	81:68	0:0	4	=
water	82:12	0:0	4	ost
op	82:15	0:0	4	->
water	82:17	0:0	4	frame_aspect_ratio
op	82:35	0:0	4	.
water	82:36	0:0	4	num
water	82:40	0:0	4	?
call	83:12	83:93	4	av_mul_q
arg	83:21	83:44	5	ost->frame_aspect_ratio
water	83:21	0:0	6	ost
op	83:24	0:0	6	->
water	83:26	0:0	6	frame_aspect_ratio
arg	83:46	83:93	5	(AVRational){enc_ctx->height,enc_ctx->width}
water	83:46	0:0	6	(
water	83:47	0:0	6	AVRational
water	83:57	0:0	6	)
water	83:58	0:0	6	{
water	83:60	0:0	6	enc_ctx
op	83:67	0:0	6	->
water	83:69	0:0	6	height
water	83:75	0:0	6	,
water	83:77	0:0	6	enc_ctx
op	83:84	0:0	6	->
water	83:86	0:0	6	width
water	83:92	0:0	6	}
water	83:95	0:0	4	:
call	84:12	84:69	4	av_buffersink_get_sample_aspect_ratio
arg	84:50	84:69	5	ost->filter->filter
water	84:50	0:0	6	ost
op	84:53	0:0	6	->
water	84:55	0:0	6	filter
op	84:61	0:0	6	->
water	84:63	0:0	6	filter
water	84:70	0:0	4	;
if	85:8	91:86	4	(!strncmp (ost -> enc -> name ,"libx264" ,7 ) && enc_ctx -> pix_fmt == AV_PIX_FMT_NONE &&av_buffersink_get_format (ost -> filter -> filter ) != AV_PIX_FMT_YUV420P)
cond	85:12	87:61	5	!strncmp (ost -> enc -> name ,"libx264" ,7 ) && enc_ctx -> pix_fmt == AV_PIX_FMT_NONE &&av_buffersink_get_format (ost -> filter -> filter ) != AV_PIX_FMT_YUV420P
op	85:12	0:0	6	!
call	85:13	85:49	6	strncmp
arg	85:21	85:35	7	ost->enc->name
water	85:21	0:0	8	ost
op	85:24	0:0	8	->
water	85:26	0:0	8	enc
op	85:29	0:0	8	->
water	85:31	0:0	8	name
arg	85:37	85:46	7	"libx264"
water	85:37	0:0	8	"libx264"
arg	85:48	85:49	7	7
water	85:48	0:0	8	7
op	85:51	0:0	6	&&
water	86:12	0:0	6	enc_ctx
op	86:19	0:0	6	->
water	86:21	0:0	6	pix_fmt
op	86:29	0:0	6	==
water	86:32	0:0	6	AV_PIX_FMT_NONE
op	86:48	0:0	6	&&
call	87:12	87:56	6	av_buffersink_get_format
arg	87:37	87:56	7	ost->filter->filter
water	87:37	0:0	8	ost
op	87:40	0:0	8	->
water	87:42	0:0	8	filter
op	87:48	0:0	8	->
water	87:50	0:0	8	filter
op	87:58	0:0	6	!=
water	87:61	0:0	6	AV_PIX_FMT_YUV420P
stmts	88:12	91:86	5	
call	88:12	91:85	6	av_log
arg	88:19	88:23	7	NULL
water	88:19	0:0	8	NULL
arg	88:25	88:39	7	AV_LOG_WARNING
water	88:25	0:0	8	AV_LOG_WARNING
arg	89:19	90:90	7	"No pixel format specified, %s for H.264 encoding chosen.\n""Use -pix_fmt yuv420p for compatibility with outdated media players.\n"
water	89:19	0:0	8	"No pixel format specified, %s for H.264 encoding chosen.\n"
water	90:19	0:0	8	"Use -pix_fmt yuv420p for compatibility with outdated media players.\n"
arg	91:19	91:85	7	av_get_pix_fmt_name(av_buffersink_get_format(ost->filter->filter))
call	91:19	91:84	8	av_get_pix_fmt_name
arg	91:39	91:84	9	av_buffersink_get_format(ost->filter->filter)
call	91:39	91:83	10	av_buffersink_get_format
arg	91:64	91:83	11	ost->filter->filter
water	91:64	0:0	12	ost
op	91:67	0:0	12	->
water	91:69	0:0	12	filter
op	91:75	0:0	12	->
water	91:77	0:0	12	filter
water	91:86	0:0	6	;
if	92:8	98:86	4	(!strncmp (ost -> enc -> name ,"mpeg2video" ,10 ) && enc_ctx -> pix_fmt == AV_PIX_FMT_NONE &&av_buffersink_get_format (ost -> filter -> filter ) != AV_PIX_FMT_YUV420P)
cond	92:12	94:61	5	!strncmp (ost -> enc -> name ,"mpeg2video" ,10 ) && enc_ctx -> pix_fmt == AV_PIX_FMT_NONE &&av_buffersink_get_format (ost -> filter -> filter ) != AV_PIX_FMT_YUV420P
op	92:12	0:0	6	!
call	92:13	92:53	6	strncmp
arg	92:21	92:35	7	ost->enc->name
water	92:21	0:0	8	ost
op	92:24	0:0	8	->
water	92:26	0:0	8	enc
op	92:29	0:0	8	->
water	92:31	0:0	8	name
arg	92:37	92:49	7	"mpeg2video"
water	92:37	0:0	8	"mpeg2video"
arg	92:51	92:53	7	10
water	92:51	0:0	8	10
op	92:55	0:0	6	&&
water	93:12	0:0	6	enc_ctx
op	93:19	0:0	6	->
water	93:21	0:0	6	pix_fmt
op	93:29	0:0	6	==
water	93:32	0:0	6	AV_PIX_FMT_NONE
op	93:48	0:0	6	&&
call	94:12	94:56	6	av_buffersink_get_format
arg	94:37	94:56	7	ost->filter->filter
water	94:37	0:0	8	ost
op	94:40	0:0	8	->
water	94:42	0:0	8	filter
op	94:48	0:0	8	->
water	94:50	0:0	8	filter
op	94:58	0:0	6	!=
water	94:61	0:0	6	AV_PIX_FMT_YUV420P
stmts	95:12	98:86	5	
call	95:12	98:85	6	av_log
arg	95:19	95:23	7	NULL
water	95:19	0:0	8	NULL
arg	95:25	95:39	7	AV_LOG_WARNING
water	95:25	0:0	8	AV_LOG_WARNING
arg	96:19	97:90	7	"No pixel format specified, %s for MPEG-2 encoding chosen.\n""Use -pix_fmt yuv420p for compatibility with outdated media players.\n"
water	96:19	0:0	8	"No pixel format specified, %s for MPEG-2 encoding chosen.\n"
water	97:19	0:0	8	"Use -pix_fmt yuv420p for compatibility with outdated media players.\n"
arg	98:19	98:85	7	av_get_pix_fmt_name(av_buffersink_get_format(ost->filter->filter))
call	98:19	98:84	8	av_get_pix_fmt_name
arg	98:39	98:84	9	av_buffersink_get_format(ost->filter->filter)
call	98:39	98:83	10	av_buffersink_get_format
arg	98:64	98:83	11	ost->filter->filter
water	98:64	0:0	12	ost
op	98:67	0:0	12	->
water	98:69	0:0	12	filter
op	98:75	0:0	12	->
water	98:77	0:0	12	filter
water	98:86	0:0	6	;
water	99:8	0:0	4	enc_ctx
op	99:15	0:0	4	->
water	99:17	0:0	4	pix_fmt
op	99:25	0:0	4	=
call	99:27	99:71	4	av_buffersink_get_format
arg	99:52	99:71	5	ost->filter->filter
water	99:52	0:0	6	ost
op	99:55	0:0	6	->
water	99:57	0:0	6	filter
op	99:63	0:0	6	->
water	99:65	0:0	6	filter
water	99:72	0:0	4	;
if	100:8	102:102	4	(dec_ctx)
cond	100:12	100:12	5	dec_ctx
water	100:12	0:0	6	dec_ctx
stmts	101:12	102:102	5	
water	101:12	0:0	6	enc_ctx
op	101:19	0:0	6	->
water	101:21	0:0	6	bits_per_raw_sample
op	101:41	0:0	6	=
call	101:43	102:101	6	FFMIN
arg	101:49	101:77	7	dec_ctx->bits_per_raw_sample
water	101:49	0:0	8	dec_ctx
op	101:56	0:0	8	->
water	101:58	0:0	8	bits_per_raw_sample
arg	102:49	102:101	7	av_pix_fmt_desc_get(enc_ctx->pix_fmt)->comp[0].depth
call	102:49	102:85	8	av_pix_fmt_desc_get
arg	102:69	102:85	9	enc_ctx->pix_fmt
water	102:69	0:0	10	enc_ctx
op	102:76	0:0	10	->
water	102:78	0:0	10	pix_fmt
op	102:86	0:0	8	->
water	102:88	0:0	8	comp
op	102:92	0:0	8	[
water	102:93	0:0	8	0
op	102:94	0:0	8	]
op	102:95	0:0	8	.
water	102:96	0:0	8	depth
water	102:102	0:0	6	;
water	103:8	0:0	4	enc_ctx
op	103:15	0:0	4	->
water	103:17	0:0	4	framerate
op	103:27	0:0	4	=
water	103:29	0:0	4	ost
op	103:32	0:0	4	->
water	103:34	0:0	4	frame_rate
water	103:44	0:0	4	;
water	104:8	0:0	4	ost
op	104:11	0:0	4	->
water	104:13	0:0	4	st
op	104:15	0:0	4	->
water	104:17	0:0	4	avg_frame_rate
op	104:32	0:0	4	=
water	104:34	0:0	4	ost
op	104:37	0:0	4	->
water	104:39	0:0	4	frame_rate
water	104:49	0:0	4	;
if	105:8	110:8	4	(! dec_ctx || enc_ctx -> width != dec_ctx -> width || enc_ctx -> height != dec_ctx -> height || enc_ctx -> pix_fmt != dec_ctx -> pix_fmt)
cond	105:12	108:41	5	! dec_ctx || enc_ctx -> width != dec_ctx -> width || enc_ctx -> height != dec_ctx -> height || enc_ctx -> pix_fmt != dec_ctx -> pix_fmt
op	105:12	0:0	6	!
water	105:13	0:0	6	dec_ctx
op	105:21	0:0	6	||
water	106:12	0:0	6	enc_ctx
op	106:19	0:0	6	->
water	106:21	0:0	6	width
op	106:29	0:0	6	!=
water	106:32	0:0	6	dec_ctx
op	106:39	0:0	6	->
water	106:41	0:0	6	width
op	106:48	0:0	6	||
water	107:12	0:0	6	enc_ctx
op	107:19	0:0	6	->
water	107:21	0:0	6	height
op	107:29	0:0	6	!=
water	107:32	0:0	6	dec_ctx
op	107:39	0:0	6	->
water	107:41	0:0	6	height
op	107:48	0:0	6	||
water	108:12	0:0	6	enc_ctx
op	108:19	0:0	6	->
water	108:21	0:0	6	pix_fmt
op	108:29	0:0	6	!=
water	108:32	0:0	6	dec_ctx
op	108:39	0:0	6	->
water	108:41	0:0	6	pix_fmt
stmts	108:50	110:8	5	
water	108:50	0:0	6	{
water	109:12	0:0	6	enc_ctx
op	109:19	0:0	6	->
water	109:21	0:0	6	bits_per_raw_sample
op	109:41	0:0	6	=
water	109:43	0:0	6	frame_bits_per_raw_sample
water	109:68	0:0	6	;
water	110:8	0:0	6	}
if	111:8	129:8	4	(ost -> forced_keyframes)
cond	111:12	111:17	5	ost -> forced_keyframes
water	111:12	0:0	6	ost
op	111:15	0:0	6	->
water	111:17	0:0	6	forced_keyframes
stmts	111:35	129:8	5	
water	111:35	0:0	6	{
if	112:12	126:12	6	(!strncmp (ost -> forced_keyframes ,"expr:" ,5 ))
cond	112:16	112:58	7	!strncmp (ost -> forced_keyframes ,"expr:" ,5 )
op	112:16	0:0	8	!
call	112:17	112:58	8	strncmp
arg	112:25	112:46	9	ost->forced_keyframes
water	112:25	0:0	10	ost
op	112:28	0:0	10	->
water	112:30	0:0	10	forced_keyframes
arg	112:48	112:55	9	"expr:"
water	112:48	0:0	10	"expr:"
arg	112:57	112:58	9	5
water	112:57	0:0	10	5
stmts	112:61	126:12	7	
water	112:61	0:0	8	{
water	113:16	0:0	8	ret
op	113:20	0:0	8	=
call	113:22	114:97	8	av_expr_parse
arg	113:36	113:64	9	&ost->forced_keyframes_pexpr
op	113:36	0:0	10	&
water	113:37	0:0	10	ost
op	113:40	0:0	10	->
water	113:42	0:0	10	forced_keyframes_pexpr
arg	113:66	113:89	9	ost->forced_keyframes+5
water	113:66	0:0	10	ost
op	113:69	0:0	10	->
water	113:71	0:0	10	forced_keyframes
op	113:87	0:0	10	+
water	113:88	0:0	10	5
arg	114:36	114:64	9	forced_keyframes_const_names
water	114:36	0:0	10	forced_keyframes_const_names
arg	114:66	114:70	9	NULL
water	114:66	0:0	10	NULL
arg	114:72	114:76	9	NULL
water	114:72	0:0	10	NULL
arg	114:78	114:82	9	NULL
water	114:78	0:0	10	NULL
arg	114:84	114:88	9	NULL
water	114:84	0:0	10	NULL
arg	114:90	114:91	9	0
water	114:90	0:0	10	0
arg	114:93	114:97	9	NULL
water	114:93	0:0	10	NULL
water	114:98	0:0	8	;
if	115:16	119:16	8	(ret < 0)
cond	115:20	115:26	9	ret < 0
water	115:20	0:0	10	ret
op	115:24	0:0	10	<
water	115:26	0:0	10	0
stmts	115:29	119:16	9	
water	115:29	0:0	10	{
call	116:20	117:96	10	av_log
arg	116:27	116:31	11	NULL
water	116:27	0:0	12	NULL
arg	116:33	116:45	11	AV_LOG_ERROR
water	116:33	0:0	12	AV_LOG_ERROR
arg	117:27	117:71	11	"Invalid force_key_frames expression '%s'\n"
water	117:27	0:0	12	"Invalid force_key_frames expression '%s'\n"
arg	117:73	117:96	11	ost->forced_keyframes+5
water	117:73	0:0	12	ost
op	117:76	0:0	12	->
water	117:78	0:0	12	forced_keyframes
op	117:94	0:0	12	+
water	117:95	0:0	12	5
water	117:97	0:0	10	;
return	118:20	118:30	10	ret
water	118:27	0:0	11	ret
water	119:16	0:0	10	}
water	120:16	0:0	8	ost
op	120:19	0:0	8	->
water	120:21	0:0	8	forced_keyframes_expr_const_values
op	120:55	0:0	8	[
water	120:56	0:0	8	FKF_N
op	120:61	0:0	8	]
op	120:63	0:0	8	=
water	120:65	0:0	8	0
water	120:66	0:0	8	;
water	121:16	0:0	8	ost
op	121:19	0:0	8	->
water	121:21	0:0	8	forced_keyframes_expr_const_values
op	121:55	0:0	8	[
water	121:56	0:0	8	FKF_N_FORCED
op	121:68	0:0	8	]
op	121:70	0:0	8	=
water	121:72	0:0	8	0
water	121:73	0:0	8	;
water	122:16	0:0	8	ost
op	122:19	0:0	8	->
water	122:21	0:0	8	forced_keyframes_expr_const_values
op	122:55	0:0	8	[
water	122:56	0:0	8	FKF_PREV_FORCED_N
op	122:73	0:0	8	]
op	122:75	0:0	8	=
water	122:77	0:0	8	NAN
water	122:80	0:0	8	;
water	123:16	0:0	8	ost
op	123:19	0:0	8	->
water	123:21	0:0	8	forced_keyframes_expr_const_values
op	123:55	0:0	8	[
water	123:56	0:0	8	FKF_PREV_FORCED_T
op	123:73	0:0	8	]
op	123:75	0:0	8	=
water	123:77	0:0	8	NAN
water	123:80	0:0	8	;
water	126:12	0:0	8	}
else	126:14	128:12	6
stmts	126:19	128:12	7	
if	126:19	128:12	8	(strncmp (ost -> forced_keyframes ,"source" ,6 ))
cond	126:22	126:64	9	strncmp (ost -> forced_keyframes ,"source" ,6 )
call	126:22	126:64	10	strncmp
arg	126:30	126:51	11	ost->forced_keyframes
water	126:30	0:0	12	ost
op	126:33	0:0	12	->
water	126:35	0:0	12	forced_keyframes
arg	126:53	126:61	11	"source"
water	126:53	0:0	12	"source"
arg	126:63	126:64	11	6
water	126:63	0:0	12	6
stmts	126:67	128:12	9	
water	126:67	0:0	10	{
call	127:16	127:80	10	parse_forced_key_frames
arg	127:40	127:61	11	ost->forced_keyframes
water	127:40	0:0	12	ost
op	127:43	0:0	12	->
water	127:45	0:0	12	forced_keyframes
arg	127:63	127:66	11	ost
water	127:63	0:0	12	ost
arg	127:68	127:80	11	ost->enc_ctx
water	127:68	0:0	12	ost
op	127:71	0:0	12	->
water	127:73	0:0	12	enc_ctx
water	127:81	0:0	10	;
water	128:12	0:0	10	}
water	129:8	0:0	6	}
break	130:8	130:13	4	
label	131:4	131:30	4	case AVMEDIA_TYPE_SUBTITLE :
water	132:8	0:0	4	enc_ctx
op	132:15	0:0	4	->
water	132:17	0:0	4	time_base
op	132:27	0:0	4	=
water	132:29	0:0	4	AV_TIME_BASE_Q
water	132:43	0:0	4	;
if	133:8	136:8	4	(! enc_ctx -> width)
cond	133:12	133:22	5	! enc_ctx -> width
op	133:12	0:0	6	!
water	133:13	0:0	6	enc_ctx
op	133:20	0:0	6	->
water	133:22	0:0	6	width
stmts	133:29	136:8	5	
water	133:29	0:0	6	{
water	134:12	0:0	6	enc_ctx
op	134:19	0:0	6	->
water	134:21	0:0	6	width
op	134:31	0:0	6	=
water	134:33	0:0	6	input_streams
op	134:46	0:0	6	[
water	134:47	0:0	6	ost
op	134:50	0:0	6	->
water	134:52	0:0	6	source_index
op	134:64	0:0	6	]
op	134:65	0:0	6	->
water	134:67	0:0	6	st
op	134:69	0:0	6	->
water	134:71	0:0	6	codecpar
op	134:79	0:0	6	->
water	134:81	0:0	6	width
water	134:86	0:0	6	;
water	135:12	0:0	6	enc_ctx
op	135:19	0:0	6	->
water	135:21	0:0	6	height
op	135:31	0:0	6	=
water	135:33	0:0	6	input_streams
op	135:46	0:0	6	[
water	135:47	0:0	6	ost
op	135:50	0:0	6	->
water	135:52	0:0	6	source_index
op	135:64	0:0	6	]
op	135:65	0:0	6	->
water	135:67	0:0	6	st
op	135:69	0:0	6	->
water	135:71	0:0	6	codecpar
op	135:79	0:0	6	->
water	135:81	0:0	6	height
water	135:87	0:0	6	;
water	136:8	0:0	6	}
break	137:8	137:13	4	
label	138:4	138:26	4	case AVMEDIA_TYPE_DATA :
break	139:8	139:13	4	
label	140:4	140:11	4	default :
call	141:8	141:14	4	abort
water	141:15	0:0	4	;
break	142:8	142:13	4	
water	143:4	0:0	4	}
water	144:4	0:0	2	ost
op	144:7	0:0	2	->
water	144:9	0:0	2	mux_timebase
op	144:22	0:0	2	=
water	144:24	0:0	2	enc_ctx
op	144:31	0:0	2	->
water	144:33	0:0	2	time_base
water	144:42	0:0	2	;
return	145:4	145:12	2	0
water	145:11	0:0	3	0
