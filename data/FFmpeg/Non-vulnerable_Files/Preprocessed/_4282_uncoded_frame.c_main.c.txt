func	1:0	225:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	224:18	1	
decl	3:4	3:39	2	char	*in_graph_desc
water	3:23	0:0	2	,
decl	3:4	3:39	2	char	**out_dev_name
decl	4:4	4:38	2	int	nb_out_dev
op	4:19	0:0	2	=
water	4:21	0:0	2	0
water	4:22	0:0	2	,
decl	4:4	4:38	2	int	nb_streams
op	4:35	0:0	2	=
water	4:37	0:0	2	0
decl	5:4	5:34	2	AVFilterGraph	*in_graph
op	5:28	0:0	2	=
water	5:30	0:0	2	NULL
decl	6:4	6:31	2	Stream	*streams
op	6:20	0:0	2	=
water	6:22	0:0	2	NULL
water	6:26	0:0	2	,
decl	6:4	6:31	2	Stream	*st
decl	7:4	7:25	2	AVFrame	*frame
op	7:19	0:0	2	=
water	7:21	0:0	2	NULL
decl	8:4	8:26	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:26	2	int	j
water	8:12	0:0	2	,
decl	8:4	8:26	2	int	run
op	8:18	0:0	2	=
water	8:20	0:0	2	1
water	8:21	0:0	2	,
decl	8:4	8:26	2	int	ret
if	10:4	18:4	2	(argc < 3)
cond	10:8	10:15	3	argc < 3
water	10:8	0:0	4	argc
op	10:13	0:0	4	<
water	10:15	0:0	4	3
stmts	10:18	18:4	3	
water	10:18	0:0	4	{
call	11:8	16:40	4	av_log
arg	11:15	11:19	5	NULL
water	11:15	0:0	6	NULL
arg	11:21	11:33	5	AV_LOG_ERROR
water	11:21	0:0	6	AV_LOG_ERROR
arg	12:15	15:65	5	"Usage: %s filter_graph dev:out [dev2:out2...]\n\n""Examples:\n""%s movie=file.nut:s=v+a xv:- alsa:default\n""%s movie=file.nut:s=v+a uncodedframecrc:pipe:0\n"
water	12:15	0:0	6	"Usage: %s filter_graph dev:out [dev2:out2...]\n\n"
water	13:15	0:0	6	"Examples:\n"
water	14:15	0:0	6	"%s movie=file.nut:s=v+a xv:- alsa:default\n"
water	15:15	0:0	6	"%s movie=file.nut:s=v+a uncodedframecrc:pipe:0\n"
arg	16:15	16:22	5	argv[0]
water	16:15	0:0	6	argv
op	16:19	0:0	6	[
water	16:20	0:0	6	0
op	16:21	0:0	6	]
arg	16:24	16:31	5	argv[0]
water	16:24	0:0	6	argv
op	16:28	0:0	6	[
water	16:29	0:0	6	0
op	16:30	0:0	6	]
arg	16:33	16:40	5	argv[0]
water	16:33	0:0	6	argv
op	16:37	0:0	6	[
water	16:38	0:0	6	0
op	16:39	0:0	6	]
water	16:41	0:0	4	;
call	17:8	17:14	4	exit
arg	17:13	17:14	5	1
water	17:13	0:0	6	1
water	17:15	0:0	4	;
water	18:4	0:0	4	}
water	19:4	0:0	2	in_graph_desc
op	19:18	0:0	2	=
water	19:20	0:0	2	argv
op	19:24	0:0	2	[
water	19:25	0:0	2	1
op	19:26	0:0	2	]
water	19:27	0:0	2	;
water	20:4	0:0	2	out_dev_name
op	20:17	0:0	2	=
water	20:19	0:0	2	argv
op	20:24	0:0	2	+
water	20:26	0:0	2	2
water	20:27	0:0	2	;
water	21:4	0:0	2	nb_out_dev
op	21:15	0:0	2	=
water	21:17	0:0	2	argc
op	21:22	0:0	2	-
water	21:24	0:0	2	2
water	21:25	0:0	2	;
call	22:4	22:20	2	av_register_all
water	22:21	0:0	2	;
call	23:4	23:26	2	avdevice_register_all
water	23:27	0:0	2	;
call	24:4	24:26	2	avfilter_register_all
water	24:27	0:0	2	;
if	26:4	31:4	2	(! ( in_graph =avfilter_graph_alloc ( ) ))
cond	26:8	26:43	3	! ( in_graph =avfilter_graph_alloc ( ) )
op	26:8	0:0	4	!
water	26:9	0:0	4	(
water	26:10	0:0	4	in_graph
op	26:19	0:0	4	=
call	26:21	26:42	4	avfilter_graph_alloc
water	26:43	0:0	4	)
stmts	26:46	31:4	3	
water	26:46	0:0	4	{
water	27:8	0:0	4	ret
op	27:12	0:0	4	=
call	27:14	27:28	4	AVERROR
arg	27:22	27:28	5	ENOMEM
water	27:22	0:0	6	ENOMEM
water	27:29	0:0	4	;
call	28:8	29:30	4	av_log
arg	28:15	28:19	5	NULL
water	28:15	0:0	6	NULL
arg	28:21	28:33	5	AV_LOG_ERROR
water	28:21	0:0	6	AV_LOG_ERROR
arg	28:35	28:70	5	"Unable to alloc graph graph: %s\n"
water	28:35	0:0	6	"Unable to alloc graph graph: %s\n"
arg	29:15	29:30	5	av_err2str(ret)
call	29:15	29:29	6	av_err2str
arg	29:26	29:29	7	ret
water	29:26	0:0	8	ret
water	29:31	0:0	4	;
goto	30:8	30:17	4	fail
water	30:13	0:0	5	fail
water	31:4	0:0	4	}
water	32:4	0:0	2	ret
op	32:8	0:0	2	=
call	32:10	32:76	2	avfilter_graph_parse_ptr
arg	32:35	32:43	3	in_graph
water	32:35	0:0	4	in_graph
arg	32:45	32:58	3	in_graph_desc
water	32:45	0:0	4	in_graph_desc
arg	32:60	32:64	3	NULL
water	32:60	0:0	4	NULL
arg	32:66	32:70	3	NULL
water	32:66	0:0	4	NULL
arg	32:72	32:76	3	NULL
water	32:72	0:0	4	NULL
water	32:77	0:0	2	;
if	33:4	37:4	2	(ret < 0)
cond	33:8	33:14	3	ret < 0
water	33:8	0:0	4	ret
op	33:12	0:0	4	<
water	33:14	0:0	4	0
stmts	33:17	37:4	3	
water	33:17	0:0	4	{
call	34:8	35:30	4	av_log
arg	34:15	34:19	5	NULL
water	34:15	0:0	6	NULL
arg	34:21	34:33	5	AV_LOG_ERROR
water	34:21	0:0	6	AV_LOG_ERROR
arg	34:35	34:64	5	"Unable to parse graph: %s\n"
water	34:35	0:0	6	"Unable to parse graph: %s\n"
arg	35:15	35:30	5	av_err2str(ret)
call	35:15	35:29	6	av_err2str
arg	35:26	35:29	7	ret
water	35:26	0:0	8	ret
water	35:31	0:0	4	;
goto	36:8	36:17	4	fail
water	36:13	0:0	5	fail
water	37:4	0:0	4	}
water	38:4	0:0	2	nb_streams
op	38:15	0:0	2	=
water	38:17	0:0	2	0
water	38:18	0:0	2	;
for	39:4	51:4	2	(i = 0 ;i < in_graph -> nb_filters;i ++)
forinit	39:9	39:14	3	i = 0 ;
water	39:9	0:0	4	i
op	39:11	0:0	4	=
water	39:13	0:0	4	0
water	39:14	0:0	4	;
cond	39:16	39:30	3	i < in_graph -> nb_filters
water	39:16	0:0	4	i
op	39:18	0:0	4	<
water	39:20	0:0	4	in_graph
op	39:28	0:0	4	->
water	39:30	0:0	4	nb_filters
forexpr	39:42	39:43	3	i ++
water	39:42	0:0	4	i
op	39:43	0:0	4	++
stmts	39:47	51:4	3	
water	39:47	0:0	4	{
decl	40:8	40:49	4	AVFilterContext	*f
op	40:27	0:0	4	=
water	40:29	0:0	4	in_graph
op	40:37	0:0	4	->
water	40:39	0:0	4	filters
op	40:46	0:0	4	[
water	40:47	0:0	4	i
op	40:48	0:0	4	]
for	41:8	47:8	4	(j = 0 ;j < f -> nb_inputs;j ++)
forinit	41:13	41:18	5	j = 0 ;
water	41:13	0:0	6	j
op	41:15	0:0	6	=
water	41:17	0:0	6	0
water	41:18	0:0	6	;
cond	41:20	41:27	5	j < f -> nb_inputs
water	41:20	0:0	6	j
op	41:22	0:0	6	<
water	41:24	0:0	6	f
op	41:25	0:0	6	->
water	41:27	0:0	6	nb_inputs
forexpr	41:38	41:39	5	j ++
water	41:38	0:0	6	j
op	41:39	0:0	6	++
stmts	41:43	47:8	5	
water	41:43	0:0	6	{
if	42:12	46:12	6	(! f -> inputs [ j ])
cond	42:16	42:28	7	! f -> inputs [ j ]
op	42:16	0:0	8	!
water	42:17	0:0	8	f
op	42:18	0:0	8	->
water	42:20	0:0	8	inputs
op	42:26	0:0	8	[
water	42:27	0:0	8	j
op	42:28	0:0	8	]
stmts	42:31	46:12	7	
water	42:31	0:0	8	{
call	43:16	43:75	8	av_log
arg	43:23	43:27	9	NULL
water	43:23	0:0	10	NULL
arg	43:29	43:41	9	AV_LOG_ERROR
water	43:29	0:0	10	AV_LOG_ERROR
arg	43:43	43:75	9	"Graph has unconnected inputs\n"
water	43:43	0:0	10	"Graph has unconnected inputs\n"
water	43:76	0:0	8	;
water	44:16	0:0	8	ret
op	44:20	0:0	8	=
call	44:22	44:36	8	AVERROR
arg	44:30	44:36	9	EINVAL
water	44:30	0:0	10	EINVAL
water	44:37	0:0	8	;
goto	45:16	45:25	8	fail
water	45:21	0:0	9	fail
water	46:12	0:0	8	}
water	47:8	0:0	6	}
for	48:8	50:28	4	(j = 0 ;j < f -> nb_outputs;j ++)
forinit	48:13	48:18	5	j = 0 ;
water	48:13	0:0	6	j
op	48:15	0:0	6	=
water	48:17	0:0	6	0
water	48:18	0:0	6	;
cond	48:20	48:27	5	j < f -> nb_outputs
water	48:20	0:0	6	j
op	48:22	0:0	6	<
water	48:24	0:0	6	f
op	48:25	0:0	6	->
water	48:27	0:0	6	nb_outputs
forexpr	48:39	48:40	5	j ++
water	48:39	0:0	6	j
op	48:40	0:0	6	++
stmts	49:12	50:28	5	
if	49:12	50:28	6	(! f -> outputs [ j ])
cond	49:16	49:29	7	! f -> outputs [ j ]
op	49:16	0:0	8	!
water	49:17	0:0	8	f
op	49:18	0:0	8	->
water	49:20	0:0	8	outputs
op	49:27	0:0	8	[
water	49:28	0:0	8	j
op	49:29	0:0	8	]
stmts	50:16	50:28	7	
water	50:16	0:0	8	nb_streams
op	50:26	0:0	8	++
water	50:28	0:0	8	;
water	51:4	0:0	4	}
if	52:4	56:4	2	(! nb_streams)
cond	52:8	52:9	3	! nb_streams
op	52:8	0:0	4	!
water	52:9	0:0	4	nb_streams
stmts	52:21	56:4	3	
water	52:21	0:0	4	{
call	53:8	53:65	4	av_log
arg	53:15	53:19	5	NULL
water	53:15	0:0	6	NULL
arg	53:21	53:33	5	AV_LOG_ERROR
water	53:21	0:0	6	AV_LOG_ERROR
arg	53:35	53:65	5	"Graph has no output stream\n"
water	53:35	0:0	6	"Graph has no output stream\n"
water	53:66	0:0	4	;
water	54:8	0:0	4	ret
op	54:12	0:0	4	=
call	54:14	54:28	4	AVERROR
arg	54:22	54:28	5	EINVAL
water	54:22	0:0	6	EINVAL
water	54:29	0:0	4	;
goto	55:8	55:17	4	fail
water	55:13	0:0	5	fail
water	56:4	0:0	4	}
if	57:4	63:4	2	(nb_out_dev != 1 && nb_out_dev != nb_streams)
cond	57:8	57:41	3	nb_out_dev != 1 && nb_out_dev != nb_streams
water	57:8	0:0	4	nb_out_dev
op	57:19	0:0	4	!=
water	57:22	0:0	4	1
op	57:24	0:0	4	&&
water	57:27	0:0	4	nb_out_dev
op	57:38	0:0	4	!=
water	57:41	0:0	4	nb_streams
stmts	57:53	63:4	3	
water	57:53	0:0	4	{
call	58:8	60:37	4	av_log
arg	58:15	58:19	5	NULL
water	58:15	0:0	6	NULL
arg	58:21	58:33	5	AV_LOG_ERROR
water	58:21	0:0	6	AV_LOG_ERROR
arg	59:15	59:64	5	"Graph has %d output streams, %d devices given\n"
water	59:15	0:0	6	"Graph has %d output streams, %d devices given\n"
arg	60:15	60:25	5	nb_streams
water	60:15	0:0	6	nb_streams
arg	60:27	60:37	5	nb_out_dev
water	60:27	0:0	6	nb_out_dev
water	60:38	0:0	4	;
water	61:8	0:0	4	ret
op	61:12	0:0	4	=
call	61:14	61:28	4	AVERROR
arg	61:22	61:28	5	EINVAL
water	61:22	0:0	6	EINVAL
water	61:29	0:0	4	;
goto	62:8	62:17	4	fail
water	62:13	0:0	5	fail
water	63:4	0:0	4	}
if	64:4	67:4	2	(! ( streams =av_calloc (nb_streams ,sizeof ( * streams ) ) ))
cond	64:8	64:59	3	! ( streams =av_calloc (nb_streams ,sizeof ( * streams ) ) )
op	64:8	0:0	4	!
water	64:9	0:0	4	(
water	64:10	0:0	4	streams
op	64:18	0:0	4	=
call	64:20	64:58	4	av_calloc
arg	64:30	64:40	5	nb_streams
water	64:30	0:0	6	nb_streams
arg	64:42	64:58	5	sizeof(*streams)
op	64:42	0:0	6	sizeof
water	64:48	0:0	6	(
op	64:49	0:0	6	*
water	64:50	0:0	6	streams
water	64:57	0:0	6	)
water	64:59	0:0	4	)
stmts	64:62	67:4	3	
water	64:62	0:0	4	{
water	65:8	0:0	4	ret
op	65:12	0:0	4	=
call	65:14	65:28	4	AVERROR
arg	65:22	65:28	5	ENOMEM
water	65:22	0:0	6	ENOMEM
water	65:29	0:0	4	;
call	66:8	66:65	4	av_log
arg	66:15	66:19	5	NULL
water	66:15	0:0	6	NULL
arg	66:21	66:33	5	AV_LOG_ERROR
water	66:21	0:0	6	AV_LOG_ERROR
arg	66:35	66:65	5	"Could not allocate streams\n"
water	66:35	0:0	6	"Could not allocate streams\n"
water	66:66	0:0	4	;
water	67:4	0:0	4	}
water	68:4	0:0	2	st
op	68:7	0:0	2	=
water	68:9	0:0	2	streams
water	68:16	0:0	2	;
for	69:4	77:4	2	(i = 0 ;i < in_graph -> nb_filters;i ++)
forinit	69:9	69:14	3	i = 0 ;
water	69:9	0:0	4	i
op	69:11	0:0	4	=
water	69:13	0:0	4	0
water	69:14	0:0	4	;
cond	69:16	69:30	3	i < in_graph -> nb_filters
water	69:16	0:0	4	i
op	69:18	0:0	4	<
water	69:20	0:0	4	in_graph
op	69:28	0:0	4	->
water	69:30	0:0	4	nb_filters
forexpr	69:42	69:43	3	i ++
water	69:42	0:0	4	i
op	69:43	0:0	4	++
stmts	69:47	77:4	3	
water	69:47	0:0	4	{
decl	70:8	70:49	4	AVFilterContext	*f
op	70:27	0:0	4	=
water	70:29	0:0	4	in_graph
op	70:37	0:0	4	->
water	70:39	0:0	4	filters
op	70:46	0:0	4	[
water	70:47	0:0	4	i
op	70:48	0:0	4	]
for	71:8	76:8	4	(j = 0 ;j < f -> nb_outputs;j ++)
forinit	71:13	71:18	5	j = 0 ;
water	71:13	0:0	6	j
op	71:15	0:0	6	=
water	71:17	0:0	6	0
water	71:18	0:0	6	;
cond	71:20	71:27	5	j < f -> nb_outputs
water	71:20	0:0	6	j
op	71:22	0:0	6	<
water	71:24	0:0	6	f
op	71:25	0:0	6	->
water	71:27	0:0	6	nb_outputs
forexpr	71:39	71:40	5	j ++
water	71:39	0:0	6	j
op	71:40	0:0	6	++
stmts	71:44	76:8	5	
water	71:44	0:0	6	{
if	72:12	75:12	6	(! f -> outputs [ j ])
cond	72:16	72:29	7	! f -> outputs [ j ]
op	72:16	0:0	8	!
water	72:17	0:0	8	f
op	72:18	0:0	8	->
water	72:20	0:0	8	outputs
op	72:27	0:0	8	[
water	72:28	0:0	8	j
op	72:29	0:0	8	]
stmts	72:32	75:12	7	
water	72:32	0:0	8	{
if	73:16	74:29	8	(( ret =create_sink (st ++ ,in_graph ,f ,j ) ) < 0)
cond	73:20	73:64	9	( ret =create_sink (st ++ ,in_graph ,f ,j ) ) < 0
water	73:20	0:0	10	(
water	73:21	0:0	10	ret
op	73:25	0:0	10	=
call	73:27	73:59	10	create_sink
arg	73:39	73:43	11	st++
water	73:39	0:0	12	st
op	73:41	0:0	12	++
arg	73:45	73:53	11	in_graph
water	73:45	0:0	12	in_graph
arg	73:55	73:56	11	f
water	73:55	0:0	12	f
arg	73:58	73:59	11	j
water	73:58	0:0	12	j
water	73:60	0:0	10	)
op	73:62	0:0	10	<
water	73:64	0:0	10	0
stmts	74:20	74:29	9	
goto	74:20	74:29	10	fail
water	74:25	0:0	11	fail
water	75:12	0:0	8	}
water	76:8	0:0	6	}
water	77:4	0:0	4	}
call	78:4	78:41	2	av_assert0
arg	78:15	78:41	3	st-streams==nb_streams
water	78:15	0:0	4	st
op	78:18	0:0	4	-
water	78:20	0:0	4	streams
op	78:28	0:0	4	==
water	78:31	0:0	4	nb_streams
water	78:42	0:0	2	;
if	79:4	82:4	2	(( ret =avfilter_graph_config (in_graph ,NULL ) ) < 0)
cond	79:8	79:56	3	( ret =avfilter_graph_config (in_graph ,NULL ) ) < 0
water	79:8	0:0	4	(
water	79:9	0:0	4	ret
op	79:13	0:0	4	=
call	79:15	79:51	4	avfilter_graph_config
arg	79:37	79:45	5	in_graph
water	79:37	0:0	6	in_graph
arg	79:47	79:51	5	NULL
water	79:47	0:0	6	NULL
water	79:52	0:0	4	)
op	79:54	0:0	4	<
water	79:56	0:0	4	0
stmts	79:59	82:4	3	
water	79:59	0:0	4	{
call	80:8	80:64	4	av_log
arg	80:15	80:19	5	NULL
water	80:15	0:0	6	NULL
arg	80:21	80:33	5	AV_LOG_ERROR
water	80:21	0:0	6	AV_LOG_ERROR
arg	80:35	80:64	5	"Failed to configure graph\n"
water	80:35	0:0	6	"Failed to configure graph\n"
water	80:65	0:0	4	;
goto	81:8	81:17	4	fail
water	81:13	0:0	5	fail
water	82:4	0:0	4	}
for	84:4	106:4	2	(i = 0 ;i < nb_out_dev;i ++)
forinit	84:9	84:14	3	i = 0 ;
water	84:9	0:0	4	i
op	84:11	0:0	4	=
water	84:13	0:0	4	0
water	84:14	0:0	4	;
cond	84:16	84:20	3	i < nb_out_dev
water	84:16	0:0	4	i
op	84:18	0:0	4	<
water	84:20	0:0	4	nb_out_dev
forexpr	84:32	84:33	3	i ++
water	84:32	0:0	4	i
op	84:33	0:0	4	++
stmts	84:37	106:4	3	
water	84:37	0:0	4	{
decl	85:8	85:48	4	char	*fmt
op	85:18	0:0	4	=
water	85:20	0:0	4	NULL
water	85:24	0:0	4	,
decl	85:8	85:48	4	char	*dev
op	85:31	0:0	4	=
water	85:33	0:0	4	out_dev_name
op	85:45	0:0	4	[
water	85:46	0:0	4	i
op	85:47	0:0	4	]
water	86:8	0:0	4	st
op	86:11	0:0	4	=
op	86:13	0:0	4	&
water	86:14	0:0	4	streams
op	86:21	0:0	4	[
water	86:22	0:0	4	i
op	86:23	0:0	4	]
water	86:24	0:0	4	;
if	87:8	90:8	4	(( dev =strchr (dev ,':' ) ))
cond	87:12	87:35	5	( dev =strchr (dev ,':' ) )
water	87:12	0:0	6	(
water	87:13	0:0	6	dev
op	87:17	0:0	6	=
call	87:19	87:34	6	strchr
arg	87:26	87:29	7	dev
water	87:26	0:0	8	dev
arg	87:31	87:34	7	':'
water	87:31	0:0	8	':'
water	87:35	0:0	6	)
stmts	87:38	90:8	5	
water	87:38	0:0	6	{
op	88:12	0:0	6	*
water	88:13	0:0	6	(
water	88:14	0:0	6	dev
op	88:17	0:0	6	++
water	88:19	0:0	6	)
op	88:21	0:0	6	=
water	88:23	0:0	6	0
water	88:24	0:0	6	;
water	89:12	0:0	6	fmt
op	89:16	0:0	6	=
water	89:18	0:0	6	out_dev_name
op	89:30	0:0	6	[
water	89:31	0:0	6	i
op	89:32	0:0	6	]
water	89:33	0:0	6	;
water	90:8	0:0	6	}
water	91:8	0:0	4	ret
op	91:12	0:0	4	=
call	91:14	91:69	4	avformat_alloc_output_context2
arg	91:45	91:53	5	&st->mux
op	91:45	0:0	6	&
water	91:46	0:0	6	st
op	91:48	0:0	6	->
water	91:50	0:0	6	mux
arg	91:55	91:59	5	NULL
water	91:55	0:0	6	NULL
arg	91:61	91:64	5	fmt
water	91:61	0:0	6	fmt
arg	91:66	91:69	5	dev
water	91:66	0:0	6	dev
water	91:70	0:0	4	;
if	92:8	96:8	4	(ret < 0)
cond	92:12	92:18	5	ret < 0
water	92:12	0:0	6	ret
op	92:16	0:0	6	<
water	92:18	0:0	6	0
stmts	92:21	96:8	5	
water	92:21	0:0	6	{
call	93:12	94:34	6	av_log
arg	93:19	93:23	7	NULL
water	93:19	0:0	8	NULL
arg	93:25	93:37	7	AV_LOG_ERROR
water	93:25	0:0	8	AV_LOG_ERROR
arg	93:39	93:72	7	"Failed to allocate output: %s\n"
water	93:39	0:0	8	"Failed to allocate output: %s\n"
arg	94:19	94:34	7	av_err2str(ret)
call	94:19	94:33	8	av_err2str
arg	94:30	94:33	9	ret
water	94:30	0:0	10	ret
water	94:35	0:0	6	;
goto	95:12	95:21	6	fail
water	95:17	0:0	7	fail
water	96:8	0:0	6	}
if	97:8	105:8	4	(! ( st -> mux -> oformat -> flags & AVFMT_NOFILE ))
cond	97:12	97:52	5	! ( st -> mux -> oformat -> flags & AVFMT_NOFILE )
op	97:12	0:0	6	!
water	97:13	0:0	6	(
water	97:14	0:0	6	st
op	97:16	0:0	6	->
water	97:18	0:0	6	mux
op	97:21	0:0	6	->
water	97:23	0:0	6	oformat
op	97:30	0:0	6	->
water	97:32	0:0	6	flags
op	97:38	0:0	6	&
water	97:40	0:0	6	AVFMT_NOFILE
water	97:52	0:0	6	)
stmts	97:55	105:8	5	
water	97:55	0:0	6	{
water	98:12	0:0	6	ret
op	98:16	0:0	6	=
call	98:18	99:39	6	avio_open2
arg	98:29	98:41	7	&st->mux->pb
op	98:29	0:0	8	&
water	98:30	0:0	8	st
op	98:32	0:0	8	->
water	98:34	0:0	8	mux
op	98:37	0:0	8	->
water	98:39	0:0	8	pb
arg	98:43	98:60	7	st->mux->filename
water	98:43	0:0	8	st
op	98:45	0:0	8	->
water	98:47	0:0	8	mux
op	98:50	0:0	8	->
water	98:52	0:0	8	filename
arg	98:62	98:77	7	AVIO_FLAG_WRITE
water	98:62	0:0	8	AVIO_FLAG_WRITE
arg	99:29	99:33	7	NULL
water	99:29	0:0	8	NULL
arg	99:35	99:39	7	NULL
water	99:35	0:0	8	NULL
water	99:40	0:0	6	;
if	100:12	104:12	6	(ret < 0)
cond	100:16	100:22	7	ret < 0
water	100:16	0:0	8	ret
op	100:20	0:0	8	<
water	100:22	0:0	8	0
stmts	100:25	104:12	7	
water	100:25	0:0	8	{
call	101:16	102:38	8	av_log
arg	101:23	101:30	9	st->mux
water	101:23	0:0	10	st
op	101:25	0:0	10	->
water	101:27	0:0	10	mux
arg	101:32	101:44	9	AV_LOG_ERROR
water	101:32	0:0	10	AV_LOG_ERROR
arg	101:46	101:75	9	"Failed to init output: %s\n"
water	101:46	0:0	10	"Failed to init output: %s\n"
arg	102:23	102:38	9	av_err2str(ret)
call	102:23	102:37	10	av_err2str
arg	102:34	102:37	11	ret
water	102:34	0:0	12	ret
water	102:39	0:0	8	;
goto	103:16	103:25	8	fail
water	103:21	0:0	9	fail
water	104:12	0:0	8	}
water	105:8	0:0	6	}
water	106:4	0:0	4	}
for	107:4	108:39	2	(;i < nb_streams;i ++)
forinit	107:9	107:9	3	;
water	107:9	0:0	4	;
cond	107:11	107:15	3	i < nb_streams
water	107:11	0:0	4	i
op	107:13	0:0	4	<
water	107:15	0:0	4	nb_streams
forexpr	107:27	107:28	3	i ++
water	107:27	0:0	4	i
op	107:28	0:0	4	++
stmts	108:8	108:39	3	
water	108:8	0:0	4	streams
op	108:15	0:0	4	[
water	108:16	0:0	4	i
op	108:17	0:0	4	]
op	108:18	0:0	4	.
water	108:19	0:0	4	mux
op	108:23	0:0	4	=
water	108:25	0:0	4	streams
op	108:32	0:0	4	[
water	108:33	0:0	4	0
op	108:34	0:0	4	]
op	108:35	0:0	4	.
water	108:36	0:0	4	mux
water	108:39	0:0	4	;
for	110:4	141:4	2	(i = 0 ;i < nb_streams;i ++)
forinit	110:9	110:14	3	i = 0 ;
water	110:9	0:0	4	i
op	110:11	0:0	4	=
water	110:13	0:0	4	0
water	110:14	0:0	4	;
cond	110:16	110:20	3	i < nb_streams
water	110:16	0:0	4	i
op	110:18	0:0	4	<
water	110:20	0:0	4	nb_streams
forexpr	110:32	110:33	3	i ++
water	110:32	0:0	4	i
op	110:33	0:0	4	++
stmts	110:37	141:4	3	
water	110:37	0:0	4	{
water	111:8	0:0	4	st
op	111:11	0:0	4	=
op	111:13	0:0	4	&
water	111:14	0:0	4	streams
op	111:21	0:0	4	[
water	111:22	0:0	4	i
op	111:23	0:0	4	]
water	111:24	0:0	4	;
if	112:8	116:8	4	(! ( st -> stream =avformat_new_stream (st -> mux ,NULL ) ))
cond	112:12	112:61	5	! ( st -> stream =avformat_new_stream (st -> mux ,NULL ) )
op	112:12	0:0	6	!
water	112:13	0:0	6	(
water	112:14	0:0	6	st
op	112:16	0:0	6	->
water	112:18	0:0	6	stream
op	112:25	0:0	6	=
call	112:27	112:60	6	avformat_new_stream
arg	112:47	112:54	7	st->mux
water	112:47	0:0	8	st
op	112:49	0:0	8	->
water	112:51	0:0	8	mux
arg	112:56	112:60	7	NULL
water	112:56	0:0	8	NULL
water	112:61	0:0	6	)
stmts	112:64	116:8	5	
water	112:64	0:0	6	{
water	113:12	0:0	6	ret
op	113:16	0:0	6	=
call	113:18	113:32	6	AVERROR
arg	113:26	113:32	7	ENOMEM
water	113:26	0:0	8	ENOMEM
water	113:33	0:0	6	;
call	114:12	114:73	6	av_log
arg	114:19	114:23	7	NULL
water	114:19	0:0	8	NULL
arg	114:25	114:37	7	AV_LOG_ERROR
water	114:25	0:0	8	AV_LOG_ERROR
arg	114:39	114:73	7	"Failed to create output stream\n"
water	114:39	0:0	8	"Failed to create output stream\n"
water	114:74	0:0	6	;
goto	115:12	115:21	6	fail
water	115:17	0:0	7	fail
water	116:8	0:0	6	}
water	117:8	0:0	4	st
op	117:10	0:0	4	->
water	117:12	0:0	4	stream
op	117:18	0:0	4	->
water	117:20	0:0	4	codec
op	117:25	0:0	4	->
water	117:27	0:0	4	codec_type
op	117:38	0:0	4	=
water	117:40	0:0	4	st
op	117:42	0:0	4	->
water	117:44	0:0	4	link
op	117:48	0:0	4	->
water	117:50	0:0	4	type
water	117:54	0:0	4	;
water	118:8	0:0	4	st
op	118:10	0:0	4	->
water	118:12	0:0	4	stream
op	118:18	0:0	4	->
water	118:20	0:0	4	time_base
op	118:30	0:0	4	=
water	118:32	0:0	4	st
op	118:34	0:0	4	->
water	118:36	0:0	4	stream
op	118:42	0:0	4	->
water	118:44	0:0	4	codec
op	118:49	0:0	4	->
water	118:51	0:0	4	time_base
op	118:61	0:0	4	=
water	119:12	0:0	4	st
op	119:14	0:0	4	->
water	119:16	0:0	4	link
op	119:20	0:0	4	->
water	119:22	0:0	4	time_base
water	119:31	0:0	4	;
switch	120:8	140:8	4	(st -> link -> type)
cond	120:16	120:26	5	st -> link -> type
water	120:16	0:0	6	st
op	120:18	0:0	6	->
water	120:20	0:0	6	link
op	120:24	0:0	6	->
water	120:26	0:0	6	type
stmts	120:32	140:8	5	
water	120:32	0:0	6	{
label	121:8	121:31	6	case AVMEDIA_TYPE_VIDEO :
water	122:12	0:0	6	st
op	122:14	0:0	6	->
water	122:16	0:0	6	stream
op	122:22	0:0	6	->
water	122:24	0:0	6	codec
op	122:29	0:0	6	->
water	122:31	0:0	6	codec_id
op	122:40	0:0	6	=
water	122:42	0:0	6	AV_CODEC_ID_RAWVIDEO
water	122:62	0:0	6	;
water	123:12	0:0	6	st
op	123:14	0:0	6	->
water	123:16	0:0	6	stream
op	123:22	0:0	6	->
water	123:24	0:0	6	avg_frame_rate
op	123:39	0:0	6	=
water	124:12	0:0	6	st
op	124:14	0:0	6	->
water	124:16	0:0	6	stream
op	124:22	0:0	6	->
water	124:26	0:0	6	r_frame_rate
op	124:39	0:0	6	=
call	124:41	124:78	6	av_buffersink_get_frame_rate
arg	124:70	124:78	7	st->sink
water	124:70	0:0	8	st
op	124:72	0:0	8	->
water	124:74	0:0	8	sink
water	124:79	0:0	6	;
water	125:12	0:0	6	st
op	125:14	0:0	6	->
water	125:16	0:0	6	stream
op	125:22	0:0	6	->
water	125:24	0:0	6	codec
op	125:29	0:0	6	->
water	125:31	0:0	6	width
op	125:51	0:0	6	=
water	125:53	0:0	6	st
op	125:55	0:0	6	->
water	125:57	0:0	6	link
op	125:61	0:0	6	->
water	125:63	0:0	6	w
water	125:64	0:0	6	;
water	126:12	0:0	6	st
op	126:14	0:0	6	->
water	126:16	0:0	6	stream
op	126:22	0:0	6	->
water	126:24	0:0	6	codec
op	126:29	0:0	6	->
water	126:31	0:0	6	height
op	126:51	0:0	6	=
water	126:53	0:0	6	st
op	126:55	0:0	6	->
water	126:57	0:0	6	link
op	126:61	0:0	6	->
water	126:63	0:0	6	h
water	126:64	0:0	6	;
water	127:12	0:0	6	st
op	127:14	0:0	6	->
water	127:16	0:0	6	stream
op	127:22	0:0	6	->
water	127:24	0:0	6	codec
op	127:29	0:0	6	->
water	127:31	0:0	6	sample_aspect_ratio
op	127:51	0:0	6	=
water	127:53	0:0	6	st
op	127:55	0:0	6	->
water	127:57	0:0	6	link
op	127:61	0:0	6	->
water	127:63	0:0	6	sample_aspect_ratio
water	127:82	0:0	6	;
water	128:12	0:0	6	st
op	128:14	0:0	6	->
water	128:16	0:0	6	stream
op	128:22	0:0	6	->
water	128:24	0:0	6	codec
op	128:29	0:0	6	->
water	128:31	0:0	6	pix_fmt
op	128:51	0:0	6	=
water	128:53	0:0	6	st
op	128:55	0:0	6	->
water	128:57	0:0	6	link
op	128:61	0:0	6	->
water	128:63	0:0	6	format
water	128:69	0:0	6	;
break	129:12	129:17	6	
label	130:8	130:31	6	case AVMEDIA_TYPE_AUDIO :
water	131:12	0:0	6	st
op	131:14	0:0	6	->
water	131:16	0:0	6	stream
op	131:22	0:0	6	->
water	131:24	0:0	6	codec
op	131:29	0:0	6	->
water	131:31	0:0	6	channel_layout
op	131:46	0:0	6	=
water	131:48	0:0	6	st
op	131:50	0:0	6	->
water	131:52	0:0	6	link
op	131:56	0:0	6	->
water	131:58	0:0	6	channel_layout
water	131:72	0:0	6	;
water	132:12	0:0	6	st
op	132:14	0:0	6	->
water	132:16	0:0	6	stream
op	132:22	0:0	6	->
water	132:24	0:0	6	codec
op	132:29	0:0	6	->
water	132:31	0:0	6	channels
op	132:40	0:0	6	=
call	132:42	132:77	6	avfilter_link_get_channels
arg	132:69	132:77	7	st->link
water	132:69	0:0	8	st
op	132:71	0:0	8	->
water	132:73	0:0	8	link
water	132:78	0:0	6	;
water	133:12	0:0	6	st
op	133:14	0:0	6	->
water	133:16	0:0	6	stream
op	133:22	0:0	6	->
water	133:24	0:0	6	codec
op	133:29	0:0	6	->
water	133:31	0:0	6	sample_rate
op	133:43	0:0	6	=
water	133:45	0:0	6	st
op	133:47	0:0	6	->
water	133:49	0:0	6	link
op	133:53	0:0	6	->
water	133:55	0:0	6	sample_rate
water	133:66	0:0	6	;
water	134:12	0:0	6	st
op	134:14	0:0	6	->
water	134:16	0:0	6	stream
op	134:22	0:0	6	->
water	134:24	0:0	6	codec
op	134:29	0:0	6	->
water	134:31	0:0	6	sample_fmt
op	134:42	0:0	6	=
water	134:44	0:0	6	st
op	134:46	0:0	6	->
water	134:48	0:0	6	link
op	134:52	0:0	6	->
water	134:54	0:0	6	format
water	134:60	0:0	6	;
water	135:12	0:0	6	st
op	135:14	0:0	6	->
water	135:16	0:0	6	stream
op	135:22	0:0	6	->
water	135:24	0:0	6	codec
op	135:29	0:0	6	->
water	135:31	0:0	6	codec_id
op	135:40	0:0	6	=
call	136:16	136:66	6	av_get_pcm_codec
arg	136:33	136:62	7	st->stream->codec->sample_fmt
water	136:33	0:0	8	st
op	136:35	0:0	8	->
water	136:37	0:0	8	stream
op	136:43	0:0	8	->
water	136:45	0:0	8	codec
op	136:50	0:0	8	->
water	136:52	0:0	8	sample_fmt
arg	136:64	136:66	7	-1
op	136:64	0:0	8	-
water	136:65	0:0	8	1
water	136:67	0:0	6	;
break	137:12	137:17	6	
label	138:8	138:15	6	default :
call	139:12	139:33	6	av_assert0
arg	139:23	139:33	7	!"reached"
op	139:23	0:0	8	!
water	139:24	0:0	8	"reached"
water	139:34	0:0	6	;
water	140:8	0:0	6	}
water	141:4	0:0	4	}
for	143:4	150:4	2	(i = 0 ;i < nb_out_dev;i ++)
forinit	143:9	143:14	3	i = 0 ;
water	143:9	0:0	4	i
op	143:11	0:0	4	=
water	143:13	0:0	4	0
water	143:14	0:0	4	;
cond	143:16	143:20	3	i < nb_out_dev
water	143:16	0:0	4	i
op	143:18	0:0	4	<
water	143:20	0:0	4	nb_out_dev
forexpr	143:32	143:33	3	i ++
water	143:32	0:0	4	i
op	143:33	0:0	4	++
stmts	143:37	150:4	3	
water	143:37	0:0	4	{
water	144:8	0:0	4	st
op	144:11	0:0	4	=
op	144:13	0:0	4	&
water	144:14	0:0	4	streams
op	144:21	0:0	4	[
water	144:22	0:0	4	i
op	144:23	0:0	4	]
water	144:24	0:0	4	;
if	145:8	149:8	4	(( ret =avformat_write_header (st -> mux ,NULL ) ) < 0)
cond	145:12	145:59	5	( ret =avformat_write_header (st -> mux ,NULL ) ) < 0
water	145:12	0:0	6	(
water	145:13	0:0	6	ret
op	145:17	0:0	6	=
call	145:19	145:54	6	avformat_write_header
arg	145:41	145:48	7	st->mux
water	145:41	0:0	8	st
op	145:43	0:0	8	->
water	145:45	0:0	8	mux
arg	145:50	145:54	7	NULL
water	145:50	0:0	8	NULL
water	145:55	0:0	6	)
op	145:57	0:0	6	<
water	145:59	0:0	6	0
stmts	145:62	149:8	5	
water	145:62	0:0	6	{
call	146:12	147:34	6	av_log
arg	146:19	146:26	7	st->mux
water	146:19	0:0	8	st
op	146:21	0:0	8	->
water	146:23	0:0	8	mux
arg	146:28	146:40	7	AV_LOG_ERROR
water	146:28	0:0	8	AV_LOG_ERROR
arg	146:42	146:71	7	"Failed to init output: %s\n"
water	146:42	0:0	8	"Failed to init output: %s\n"
arg	147:19	147:34	7	av_err2str(ret)
call	147:19	147:33	8	av_err2str
arg	147:30	147:33	9	ret
water	147:30	0:0	10	ret
water	147:35	0:0	6	;
goto	148:12	148:21	6	fail
water	148:17	0:0	7	fail
water	149:8	0:0	6	}
water	150:4	0:0	4	}
for	152:4	161:4	2	(i = 0 ;i < nb_streams;i ++)
forinit	152:9	152:14	3	i = 0 ;
water	152:9	0:0	4	i
op	152:11	0:0	4	=
water	152:13	0:0	4	0
water	152:14	0:0	4	;
cond	152:16	152:20	3	i < nb_streams
water	152:16	0:0	4	i
op	152:18	0:0	4	<
water	152:20	0:0	4	nb_streams
forexpr	152:32	152:33	3	i ++
water	152:32	0:0	4	i
op	152:33	0:0	4	++
stmts	152:37	161:4	3	
water	152:37	0:0	4	{
water	153:8	0:0	4	st
op	153:11	0:0	4	=
op	153:13	0:0	4	&
water	153:14	0:0	4	streams
op	153:21	0:0	4	[
water	153:22	0:0	4	i
op	153:23	0:0	4	]
water	153:24	0:0	4	;
water	154:8	0:0	4	ret
op	154:12	0:0	4	=
call	154:14	154:69	4	av_write_uncoded_frame_query
arg	154:43	154:50	5	st->mux
water	154:43	0:0	6	st
op	154:45	0:0	6	->
water	154:47	0:0	6	mux
arg	154:52	154:69	5	st->stream->index
water	154:52	0:0	6	st
op	154:54	0:0	6	->
water	154:56	0:0	6	stream
op	154:62	0:0	6	->
water	154:64	0:0	6	index
water	154:70	0:0	4	;
if	155:8	160:8	4	(ret < 0)
cond	155:12	155:18	5	ret < 0
water	155:12	0:0	6	ret
op	155:16	0:0	6	<
water	155:18	0:0	6	0
stmts	155:21	160:8	5	
water	155:21	0:0	6	{
call	156:12	158:37	6	av_log
arg	156:19	156:26	7	st->mux
water	156:19	0:0	8	st
op	156:21	0:0	8	->
water	156:23	0:0	8	mux
arg	156:28	156:40	7	AV_LOG_ERROR
water	156:28	0:0	8	AV_LOG_ERROR
arg	157:19	157:69	7	"Uncoded frames not supported on stream #%d: %s\n"
water	157:19	0:0	8	"Uncoded frames not supported on stream #%d: %s\n"
arg	158:19	158:20	7	i
water	158:19	0:0	8	i
arg	158:22	158:37	7	av_err2str(ret)
call	158:22	158:36	8	av_err2str
arg	158:33	158:36	9	ret
water	158:33	0:0	10	ret
water	158:38	0:0	6	;
goto	159:12	159:21	6	fail
water	159:17	0:0	7	fail
water	160:8	0:0	6	}
water	161:4	0:0	4	}
while	162:4	204:4	2	(run)
cond	162:11	162:11	3	run
water	162:11	0:0	4	run
stmts	162:16	204:4	3	
water	162:16	0:0	4	{
water	163:8	0:0	4	ret
op	163:12	0:0	4	=
call	163:14	163:52	4	avfilter_graph_request_oldest
arg	163:44	163:52	5	in_graph
water	163:44	0:0	6	in_graph
water	163:53	0:0	4	;
if	164:8	172:8	4	(ret < 0)
cond	164:12	164:18	5	ret < 0
water	164:12	0:0	6	ret
op	164:16	0:0	6	<
water	164:18	0:0	6	0
stmts	164:21	172:8	5	
water	164:21	0:0	6	{
if	165:12	167:12	6	(ret == AVERROR_EOF)
cond	165:16	165:23	7	ret == AVERROR_EOF
water	165:16	0:0	8	ret
op	165:20	0:0	8	==
water	165:23	0:0	8	AVERROR_EOF
stmts	165:36	167:12	7	
water	165:36	0:0	8	{
water	166:16	0:0	8	run
op	166:20	0:0	8	=
water	166:22	0:0	8	0
water	166:23	0:0	8	;
water	167:12	0:0	8	}
else	167:14	171:12	6
stmts	167:19	171:12	7	
water	167:19	0:0	8	{
call	168:16	169:38	8	av_log
arg	168:23	168:27	9	NULL
water	168:23	0:0	10	NULL
arg	168:29	168:41	9	AV_LOG_ERROR
water	168:29	0:0	10	AV_LOG_ERROR
arg	168:43	168:66	9	"Error filtering: %s\n"
water	168:43	0:0	10	"Error filtering: %s\n"
arg	169:23	169:38	9	av_err2str(ret)
call	169:23	169:37	10	av_err2str
arg	169:34	169:37	11	ret
water	169:34	0:0	12	ret
water	169:39	0:0	8	;
break	170:16	170:21	8	
water	171:12	0:0	8	}
water	172:8	0:0	6	}
for	173:8	203:8	4	(i = 0 ;i < nb_streams;i ++)
forinit	173:13	173:18	5	i = 0 ;
water	173:13	0:0	6	i
op	173:15	0:0	6	=
water	173:17	0:0	6	0
water	173:18	0:0	6	;
cond	173:20	173:24	5	i < nb_streams
water	173:20	0:0	6	i
op	173:22	0:0	6	<
water	173:24	0:0	6	nb_streams
forexpr	173:36	173:37	5	i ++
water	173:36	0:0	6	i
op	173:37	0:0	6	++
stmts	173:41	203:8	5	
water	173:41	0:0	6	{
water	174:12	0:0	6	st
op	174:15	0:0	6	=
op	174:17	0:0	6	&
water	174:18	0:0	6	streams
op	174:25	0:0	6	[
water	174:26	0:0	6	i
op	174:27	0:0	6	]
water	174:28	0:0	6	;
while	175:12	202:12	6	(1)
cond	175:19	175:19	7	1
water	175:19	0:0	8	1
stmts	175:22	202:12	7	
water	175:22	0:0	8	{
if	176:16	180:16	8	(! frame && ! ( frame =av_frame_alloc ( ) ))
cond	176:20	176:56	9	! frame && ! ( frame =av_frame_alloc ( ) )
op	176:20	0:0	10	!
water	176:21	0:0	10	frame
op	176:27	0:0	10	&&
op	176:30	0:0	10	!
water	176:31	0:0	10	(
water	176:32	0:0	10	frame
op	176:38	0:0	10	=
call	176:40	176:55	10	av_frame_alloc
water	176:56	0:0	10	)
stmts	176:59	180:16	9	
water	176:59	0:0	10	{
water	177:20	0:0	10	ret
op	177:24	0:0	10	=
call	177:26	177:40	10	AVERROR
arg	177:34	177:40	11	ENOMEM
water	177:34	0:0	12	ENOMEM
water	177:41	0:0	10	;
call	178:20	178:75	10	av_log
arg	178:27	178:31	11	NULL
water	178:27	0:0	12	NULL
arg	178:33	178:45	11	AV_LOG_ERROR
water	178:33	0:0	12	AV_LOG_ERROR
arg	178:47	178:75	11	"Could not allocate frame\n"
water	178:47	0:0	12	"Could not allocate frame\n"
water	178:76	0:0	10	;
goto	179:20	179:29	10	fail
water	179:25	0:0	11	fail
water	180:16	0:0	10	}
water	181:16	0:0	8	ret
op	181:20	0:0	8	=
call	181:22	182:81	8	av_buffersink_get_frame_flags
arg	181:52	181:60	9	st->sink
water	181:52	0:0	10	st
op	181:54	0:0	10	->
water	181:56	0:0	10	sink
arg	181:62	181:67	9	frame
water	181:62	0:0	10	frame
arg	182:52	182:81	9	AV_BUFFERSINK_FLAG_NO_REQUEST
water	182:52	0:0	10	AV_BUFFERSINK_FLAG_NO_REQUEST
water	182:82	0:0	8	;
if	183:16	188:16	8	(ret < 0)
cond	183:20	183:26	9	ret < 0
water	183:20	0:0	10	ret
op	183:24	0:0	10	<
water	183:26	0:0	10	0
stmts	183:29	188:16	9	
water	183:29	0:0	10	{
if	184:20	186:47	10	(ret !=AVERROR (EAGAIN ) && ret != AVERROR_EOF)
cond	184:24	184:57	11	ret !=AVERROR (EAGAIN ) && ret != AVERROR_EOF
water	184:24	0:0	12	ret
op	184:28	0:0	12	!=
call	184:31	184:45	12	AVERROR
arg	184:39	184:45	13	EAGAIN
water	184:39	0:0	14	EAGAIN
op	184:47	0:0	12	&&
water	184:50	0:0	12	ret
op	184:54	0:0	12	!=
water	184:57	0:0	12	AVERROR_EOF
stmts	185:24	186:47	11	
call	185:24	186:46	12	av_log
arg	185:31	185:35	13	NULL
water	185:31	0:0	14	NULL
arg	185:37	185:51	13	AV_LOG_WARNING
water	185:37	0:0	14	AV_LOG_WARNING
arg	185:53	185:74	13	"Error in sink: %s\n"
water	185:53	0:0	14	"Error in sink: %s\n"
arg	186:31	186:46	13	av_err2str(ret)
call	186:31	186:45	14	av_err2str
arg	186:42	186:45	15	ret
water	186:42	0:0	16	ret
water	186:47	0:0	12	;
break	187:20	187:25	10	
water	188:16	0:0	10	}
if	189:16	192:68	8	(frame -> pts != AV_NOPTS_VALUE)
cond	189:20	189:34	9	frame -> pts != AV_NOPTS_VALUE
water	189:20	0:0	10	frame
op	189:25	0:0	10	->
water	189:27	0:0	10	pts
op	189:31	0:0	10	!=
water	189:34	0:0	10	AV_NOPTS_VALUE
stmts	190:20	192:68	9	
water	190:20	0:0	10	frame
op	190:25	0:0	10	->
water	190:27	0:0	10	pts
op	190:31	0:0	10	=
call	190:33	192:67	10	av_rescale_q
arg	190:46	190:56	11	frame->pts
water	190:46	0:0	12	frame
op	190:51	0:0	12	->
water	190:53	0:0	12	pts
arg	191:46	191:67	11	st->link->time_base
water	191:46	0:0	12	st
op	191:48	0:0	12	->
water	191:50	0:0	12	link
op	191:56	0:0	12	->
water	191:58	0:0	12	time_base
arg	192:46	192:67	11	st->stream->time_base
water	192:46	0:0	12	st
op	192:48	0:0	12	->
water	192:50	0:0	12	stream
op	192:56	0:0	12	->
water	192:58	0:0	12	time_base
water	192:68	0:0	10	;
water	193:16	0:0	8	ret
op	193:20	0:0	8	=
call	193:22	195:62	8	av_interleaved_write_uncoded_frame
arg	193:57	193:64	9	st->mux
water	193:57	0:0	10	st
op	193:59	0:0	10	->
water	193:61	0:0	10	mux
arg	194:57	194:74	9	st->stream->index
water	194:57	0:0	10	st
op	194:59	0:0	10	->
water	194:61	0:0	10	stream
op	194:67	0:0	10	->
water	194:69	0:0	10	index
arg	195:57	195:62	9	frame
water	195:57	0:0	10	frame
water	195:63	0:0	8	;
water	196:16	0:0	8	frame
op	196:22	0:0	8	=
water	196:24	0:0	8	NULL
water	196:28	0:0	8	;
if	197:16	201:16	8	(ret < 0)
cond	197:20	197:26	9	ret < 0
water	197:20	0:0	10	ret
op	197:24	0:0	10	<
water	197:26	0:0	10	0
stmts	197:29	201:16	9	
water	197:29	0:0	10	{
call	198:20	199:71	10	av_log
arg	198:27	198:44	11	st->stream->codec
water	198:27	0:0	12	st
op	198:29	0:0	12	->
water	198:31	0:0	12	stream
op	198:37	0:0	12	->
water	198:39	0:0	12	codec
arg	198:46	198:58	11	AV_LOG_ERROR
water	198:46	0:0	12	AV_LOG_ERROR
arg	199:27	199:54	11	"Error writing frame: %s\n"
water	199:27	0:0	12	"Error writing frame: %s\n"
arg	199:56	199:71	11	av_err2str(ret)
call	199:56	199:70	12	av_err2str
arg	199:67	199:70	13	ret
water	199:67	0:0	14	ret
water	199:72	0:0	10	;
goto	200:20	200:29	10	fail
water	200:25	0:0	11	fail
water	201:16	0:0	10	}
water	202:12	0:0	8	}
water	203:8	0:0	6	}
water	204:4	0:0	4	}
water	205:4	0:0	2	ret
op	205:8	0:0	2	=
water	205:10	0:0	2	0
water	205:11	0:0	2	;
for	206:4	209:4	2	(i = 0 ;i < nb_out_dev;i ++)
forinit	206:9	206:14	3	i = 0 ;
water	206:9	0:0	4	i
op	206:11	0:0	4	=
water	206:13	0:0	4	0
water	206:14	0:0	4	;
cond	206:16	206:20	3	i < nb_out_dev
water	206:16	0:0	4	i
op	206:18	0:0	4	<
water	206:20	0:0	4	nb_out_dev
forexpr	206:32	206:33	3	i ++
water	206:32	0:0	4	i
op	206:33	0:0	4	++
stmts	206:37	209:4	3	
water	206:37	0:0	4	{
water	207:8	0:0	4	st
op	207:11	0:0	4	=
op	207:13	0:0	4	&
water	207:14	0:0	4	streams
op	207:21	0:0	4	[
water	207:22	0:0	4	i
op	207:23	0:0	4	]
water	207:24	0:0	4	;
call	208:8	208:32	4	av_write_trailer
arg	208:25	208:32	5	st->mux
water	208:25	0:0	6	st
op	208:27	0:0	6	->
water	208:29	0:0	6	mux
water	208:33	0:0	4	;
water	209:4	0:0	4	}
label	210:0	210:4	2	fail :
call	211:4	211:24	2	av_frame_free
arg	211:18	211:24	3	&frame
op	211:18	0:0	4	&
water	211:19	0:0	4	frame
water	211:25	0:0	2	;
call	212:4	212:33	2	avfilter_graph_free
arg	212:24	212:33	3	&in_graph
op	212:24	0:0	4	&
water	212:25	0:0	4	in_graph
water	212:34	0:0	2	;
if	213:4	222:4	2	(streams)
cond	213:8	213:8	3	streams
water	213:8	0:0	4	streams
stmts	213:17	222:4	3	
water	213:17	0:0	4	{
for	214:8	221:8	4	(i = 0 ;i < nb_out_dev;i ++)
forinit	214:13	214:18	5	i = 0 ;
water	214:13	0:0	6	i
op	214:15	0:0	6	=
water	214:17	0:0	6	0
water	214:18	0:0	6	;
cond	214:20	214:24	5	i < nb_out_dev
water	214:20	0:0	6	i
op	214:22	0:0	6	<
water	214:24	0:0	6	nb_out_dev
forexpr	214:36	214:37	5	i ++
water	214:36	0:0	6	i
op	214:37	0:0	6	++
stmts	214:41	221:8	5	
water	214:41	0:0	6	{
water	215:12	0:0	6	st
op	215:15	0:0	6	=
op	215:17	0:0	6	&
water	215:18	0:0	6	streams
op	215:25	0:0	6	[
water	215:26	0:0	6	i
op	215:27	0:0	6	]
water	215:28	0:0	6	;
if	216:12	220:12	6	(st -> mux)
cond	216:16	216:20	7	st -> mux
water	216:16	0:0	8	st
op	216:18	0:0	8	->
water	216:20	0:0	8	mux
stmts	216:25	220:12	7	
water	216:25	0:0	8	{
if	217:16	218:45	8	(st -> mux -> pb)
cond	217:20	217:29	9	st -> mux -> pb
water	217:20	0:0	10	st
op	217:22	0:0	10	->
water	217:24	0:0	10	mux
op	217:27	0:0	10	->
water	217:29	0:0	10	pb
stmts	218:20	218:45	9	
call	218:20	218:44	10	avio_closep
arg	218:32	218:44	11	&st->mux->pb
op	218:32	0:0	12	&
water	218:33	0:0	12	st
op	218:35	0:0	12	->
water	218:37	0:0	12	mux
op	218:40	0:0	12	->
water	218:42	0:0	12	pb
water	218:45	0:0	10	;
call	219:16	219:45	8	avformat_free_context
arg	219:38	219:45	9	st->mux
water	219:38	0:0	10	st
op	219:40	0:0	10	->
water	219:42	0:0	10	mux
water	219:46	0:0	8	;
water	220:12	0:0	8	}
water	221:8	0:0	6	}
water	222:4	0:0	4	}
call	223:4	223:21	2	av_freep
arg	223:13	223:21	3	&streams
op	223:13	0:0	4	&
water	223:14	0:0	4	streams
water	223:22	0:0	2	;
return	224:4	224:18	2	ret<0
water	224:11	0:0	3	ret
op	224:15	0:0	3	<
water	224:17	0:0	3	0
