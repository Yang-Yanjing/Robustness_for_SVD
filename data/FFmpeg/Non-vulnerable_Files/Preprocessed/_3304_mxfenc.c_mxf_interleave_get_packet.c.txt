func	1:0	50:0	0	static int	mxf_interleave_get_packet
params	1:36	0:0	1	
param	1:37	1:55	2	AVFormatContext *	s
param	1:57	1:70	2	AVPacket *	out
param	1:72	1:85	2	AVPacket *	pkt
param	1:87	1:96	2	int	flush
stmnts	0:0	49:4	1	
decl	3:4	3:27	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:27	2	int	stream_count
op	3:24	0:0	2	=
water	3:26	0:0	2	0
for	4:4	5:62	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	4:9	4:14	3	i = 0 ;
water	4:9	0:0	4	i
op	4:11	0:0	4	=
water	4:13	0:0	4	0
water	4:14	0:0	4	;
cond	4:16	4:23	3	i < s -> nb_streams
water	4:16	0:0	4	i
op	4:18	0:0	4	<
water	4:20	0:0	4	s
op	4:21	0:0	4	->
water	4:23	0:0	4	nb_streams
forexpr	4:35	4:36	3	i ++
water	4:35	0:0	4	i
op	4:36	0:0	4	++
stmts	5:8	5:62	3	
water	5:8	0:0	4	stream_count
op	5:21	0:0	4	+=
op	5:24	0:0	4	!
op	5:25	0:0	4	!
water	5:26	0:0	4	s
op	5:27	0:0	4	->
water	5:29	0:0	4	streams
op	5:36	0:0	4	[
water	5:37	0:0	4	i
op	5:38	0:0	4	]
op	5:39	0:0	4	->
water	5:41	0:0	4	last_in_packet_buffer
water	5:62	0:0	4	;
if	6:4	45:4	2	(stream_count && ( s -> nb_streams == stream_count || flush ))
cond	6:8	6:63	3	stream_count && ( s -> nb_streams == stream_count || flush )
water	6:8	0:0	4	stream_count
op	6:21	0:0	4	&&
water	6:24	0:0	4	(
water	6:25	0:0	4	s
op	6:26	0:0	4	->
water	6:28	0:0	4	nb_streams
op	6:39	0:0	4	==
water	6:42	0:0	4	stream_count
op	6:55	0:0	4	||
water	6:58	0:0	4	flush
water	6:63	0:0	4	)
stmts	6:66	45:4	3	
water	6:66	0:0	4	{
decl	7:8	7:55	4	AVPacketList	*pktl
op	7:27	0:0	4	=
water	7:29	0:0	4	s
op	7:30	0:0	4	->
water	7:32	0:0	4	internal
op	7:40	0:0	4	->
water	7:42	0:0	4	packet_buffer
if	8:8	35:8	4	(s -> nb_streams != stream_count)
cond	8:12	8:29	5	s -> nb_streams != stream_count
water	8:12	0:0	6	s
op	8:13	0:0	6	->
water	8:15	0:0	6	nb_streams
op	8:26	0:0	6	!=
water	8:29	0:0	6	stream_count
stmts	8:43	35:8	5	
water	8:43	0:0	6	{
decl	9:12	9:37	6	AVPacketList	*last
op	9:31	0:0	6	=
water	9:33	0:0	6	NULL
while	11:12	17:12	6	(pktl)
cond	11:19	11:19	7	pktl
water	11:19	0:0	8	pktl
stmts	11:25	17:12	7	
water	11:25	0:0	8	{
if	12:16	13:25	8	(! stream_count || pktl -> pkt . stream_index == 0)
cond	12:20	12:63	9	! stream_count || pktl -> pkt . stream_index == 0
op	12:20	0:0	10	!
water	12:21	0:0	10	stream_count
op	12:34	0:0	10	||
water	12:37	0:0	10	pktl
op	12:41	0:0	10	->
water	12:43	0:0	10	pkt
op	12:46	0:0	10	.
water	12:47	0:0	10	stream_index
op	12:60	0:0	10	==
water	12:63	0:0	10	0
stmts	13:20	13:25	9	
break	13:20	13:25	10	
water	14:16	0:0	8	last
op	14:21	0:0	8	=
water	14:23	0:0	8	pktl
water	14:27	0:0	8	;
water	15:16	0:0	8	pktl
op	15:21	0:0	8	=
water	15:23	0:0	8	pktl
op	15:27	0:0	8	->
water	15:29	0:0	8	next
water	15:33	0:0	8	;
water	16:16	0:0	8	stream_count
op	16:28	0:0	8	--
water	16:30	0:0	8	;
water	17:12	0:0	8	}
while	19:12	26:12	6	(pktl)
cond	19:19	19:19	7	pktl
water	19:19	0:0	8	pktl
stmts	19:25	26:12	7	
water	19:25	0:0	8	{
decl	20:16	20:47	8	AVPacketList	*next
op	20:35	0:0	8	=
water	20:37	0:0	8	pktl
op	20:41	0:0	8	->
water	20:43	0:0	8	next
if	21:16	22:83	8	(s -> streams [ pktl -> pkt . stream_index ] -> last_in_packet_buffer == pktl)
cond	21:19	21:80	9	s -> streams [ pktl -> pkt . stream_index ] -> last_in_packet_buffer == pktl
water	21:19	0:0	10	s
op	21:20	0:0	10	->
water	21:22	0:0	10	streams
op	21:29	0:0	10	[
water	21:30	0:0	10	pktl
op	21:34	0:0	10	->
water	21:36	0:0	10	pkt
op	21:39	0:0	10	.
water	21:40	0:0	10	stream_index
op	21:52	0:0	10	]
op	21:53	0:0	10	->
water	21:55	0:0	10	last_in_packet_buffer
op	21:77	0:0	10	==
water	21:80	0:0	10	pktl
stmts	22:20	22:83	9	
water	22:20	0:0	10	s
op	22:21	0:0	10	->
water	22:23	0:0	10	streams
op	22:30	0:0	10	[
water	22:31	0:0	10	pktl
op	22:35	0:0	10	->
water	22:37	0:0	10	pkt
op	22:40	0:0	10	.
water	22:41	0:0	10	stream_index
op	22:53	0:0	10	]
op	22:54	0:0	10	->
water	22:56	0:0	10	last_in_packet_buffer
op	22:77	0:0	10	=
water	22:79	0:0	10	NULL
water	22:83	0:0	10	;
call	23:16	23:41	8	av_free_packet
arg	23:31	23:41	9	&pktl->pkt
op	23:31	0:0	10	&
water	23:32	0:0	10	pktl
op	23:36	0:0	10	->
water	23:38	0:0	10	pkt
water	23:42	0:0	8	;
call	24:16	24:30	8	av_freep
arg	24:25	24:30	9	&pktl
op	24:25	0:0	10	&
water	24:26	0:0	10	pktl
water	24:31	0:0	8	;
water	25:16	0:0	8	pktl
op	25:21	0:0	8	=
water	25:23	0:0	8	next
water	25:27	0:0	8	;
water	26:12	0:0	8	}
if	27:12	28:33	6	(last)
cond	27:16	27:16	7	last
water	27:16	0:0	8	last
stmts	28:16	28:33	7	
water	28:16	0:0	8	last
op	28:20	0:0	8	->
water	28:22	0:0	8	next
op	28:27	0:0	8	=
water	28:29	0:0	8	NULL
water	28:33	0:0	8	;
else	29:12	33:12	6
stmts	29:17	33:12	7	
water	29:17	0:0	8	{
water	30:16	0:0	8	s
op	30:17	0:0	8	->
water	30:19	0:0	8	internal
op	30:27	0:0	8	->
water	30:29	0:0	8	packet_buffer
op	30:43	0:0	8	=
water	30:45	0:0	8	NULL
water	30:49	0:0	8	;
water	31:16	0:0	8	s
op	31:17	0:0	8	->
water	31:19	0:0	8	internal
op	31:27	0:0	8	->
water	31:29	0:0	8	packet_buffer_end
op	31:46	0:0	8	=
water	31:48	0:0	8	NULL
water	31:52	0:0	8	;
goto	32:16	32:24	8	out
water	32:21	0:0	9	out
water	33:12	0:0	8	}
water	34:12	0:0	6	pktl
op	34:17	0:0	6	=
water	34:19	0:0	6	s
op	34:20	0:0	6	->
water	34:22	0:0	6	internal
op	34:30	0:0	6	->
water	34:32	0:0	6	packet_buffer
water	34:45	0:0	6	;
water	35:8	0:0	6	}
op	36:8	0:0	4	*
water	36:9	0:0	4	out
op	36:13	0:0	4	=
water	36:15	0:0	4	pktl
op	36:19	0:0	4	->
water	36:21	0:0	4	pkt
water	36:24	0:0	4	;
call	37:8	37:92	4	av_log
arg	37:15	37:16	5	s
water	37:15	0:0	6	s
arg	37:18	37:30	5	AV_LOG_TRACE
water	37:18	0:0	6	AV_LOG_TRACE
arg	37:32	37:59	5	"out st:%d dts:%"PRId64"\n"
water	37:32	0:0	6	"out st:%d dts:%"
water	37:49	0:0	6	PRId64
water	37:55	0:0	6	"\n"
arg	37:61	37:80	5	(*out).stream_index
water	37:61	0:0	6	(
op	37:62	0:0	6	*
water	37:63	0:0	6	out
water	37:66	0:0	6	)
op	37:67	0:0	6	.
water	37:68	0:0	6	stream_index
arg	37:82	37:92	5	(*out).dts
water	37:82	0:0	6	(
op	37:83	0:0	6	*
water	37:84	0:0	6	out
water	37:87	0:0	6	)
op	37:88	0:0	6	.
water	37:89	0:0	6	dts
water	37:93	0:0	4	;
water	38:8	0:0	4	s
op	38:9	0:0	4	->
water	38:11	0:0	4	internal
op	38:19	0:0	4	->
water	38:21	0:0	4	packet_buffer
op	38:35	0:0	4	=
water	38:37	0:0	4	pktl
op	38:41	0:0	4	->
water	38:43	0:0	4	next
water	38:47	0:0	4	;
if	39:8	40:75	4	(s -> streams [ pktl -> pkt . stream_index ] -> last_in_packet_buffer == pktl)
cond	39:11	39:72	5	s -> streams [ pktl -> pkt . stream_index ] -> last_in_packet_buffer == pktl
water	39:11	0:0	6	s
op	39:12	0:0	6	->
water	39:14	0:0	6	streams
op	39:21	0:0	6	[
water	39:22	0:0	6	pktl
op	39:26	0:0	6	->
water	39:28	0:0	6	pkt
op	39:31	0:0	6	.
water	39:32	0:0	6	stream_index
op	39:44	0:0	6	]
op	39:45	0:0	6	->
water	39:47	0:0	6	last_in_packet_buffer
op	39:69	0:0	6	==
water	39:72	0:0	6	pktl
stmts	40:12	40:75	5	
water	40:12	0:0	6	s
op	40:13	0:0	6	->
water	40:15	0:0	6	streams
op	40:22	0:0	6	[
water	40:23	0:0	6	pktl
op	40:27	0:0	6	->
water	40:29	0:0	6	pkt
op	40:32	0:0	6	.
water	40:33	0:0	6	stream_index
op	40:45	0:0	6	]
op	40:46	0:0	6	->
water	40:48	0:0	6	last_in_packet_buffer
op	40:69	0:0	6	=
water	40:71	0:0	6	NULL
water	40:75	0:0	6	;
if	41:8	42:48	4	(! s -> internal -> packet_buffer)
cond	41:11	41:25	5	! s -> internal -> packet_buffer
op	41:11	0:0	6	!
water	41:12	0:0	6	s
op	41:13	0:0	6	->
water	41:15	0:0	6	internal
op	41:23	0:0	6	->
water	41:25	0:0	6	packet_buffer
stmts	42:12	42:48	5	
water	42:12	0:0	6	s
op	42:13	0:0	6	->
water	42:15	0:0	6	internal
op	42:23	0:0	6	->
water	42:25	0:0	6	packet_buffer_end
op	42:42	0:0	6	=
water	42:44	0:0	6	NULL
water	42:48	0:0	6	;
call	43:8	43:22	4	av_freep
arg	43:17	43:22	5	&pktl
op	43:17	0:0	6	&
water	43:18	0:0	6	pktl
water	43:23	0:0	4	;
return	44:8	44:16	4	1
water	44:15	0:0	5	1
water	45:4	0:0	4	}
else	45:6	49:4	2
stmts	45:11	49:4	3	
water	45:11	0:0	4	{
label	46:4	46:7	4	out :
call	47:8	47:26	4	av_init_packet
arg	47:23	47:26	5	out
water	47:23	0:0	6	out
water	47:27	0:0	4	;
return	48:8	48:16	4	0
water	48:15	0:0	5	0
water	49:4	0:0	4	}
