func	2:0	42:4	0	static void	calc_diffs
params	2:22	0:0	1	
param	2:23	2:48	2	const DecimateContext *	dm
param	2:50	2:65	2	struct qitem *	q
param	3:23	3:40	2	const AVFrame *	f1
param	3:42	3:59	2	const AVFrame *	f2
stmnts	0:0	41:8	1	
decl	5:4	5:24	2	int64_t	maxdiff
op	5:20	0:0	2	=
op	5:22	0:0	2	-
water	5:23	0:0	2	1
decl	6:4	6:32	2	int64_t	*bdiffs
op	6:20	0:0	2	=
water	6:22	0:0	2	dm
op	6:24	0:0	2	->
water	6:26	0:0	2	bdiffs
decl	7:4	7:19	2	int	plane
water	7:13	0:0	2	,
decl	7:4	7:19	2	int	i
water	7:16	0:0	2	,
decl	7:4	7:19	2	int	j
call	8:4	8:53	2	memset
arg	8:11	8:17	3	bdiffs
water	8:11	0:0	4	bdiffs
arg	8:19	8:20	3	0
water	8:19	0:0	4	0
arg	8:22	8:53	3	dm->bdiffsize*sizeof(*bdiffs)
water	8:22	0:0	4	dm
op	8:24	0:0	4	->
water	8:26	0:0	4	bdiffsize
op	8:36	0:0	4	*
op	8:38	0:0	4	sizeof
water	8:44	0:0	4	(
op	8:45	0:0	4	*
water	8:46	0:0	4	bdiffs
water	8:52	0:0	4	)
water	8:54	0:0	2	;
for	9:4	41:8	2	(plane = 0 ;plane < ( dm -> chroma && f1 -> data [ 2 ] ? 3 : 1 );plane ++)
forinit	9:9	9:18	3	plane = 0 ;
water	9:9	0:0	4	plane
op	9:15	0:0	4	=
water	9:17	0:0	4	0
water	9:18	0:0	4	;
cond	9:20	9:62	3	plane < ( dm -> chroma && f1 -> data [ 2 ] ? 3 : 1 )
water	9:20	0:0	4	plane
op	9:26	0:0	4	<
water	9:28	0:0	4	(
water	9:29	0:0	4	dm
op	9:31	0:0	4	->
water	9:33	0:0	4	chroma
op	9:40	0:0	4	&&
water	9:43	0:0	4	f1
op	9:45	0:0	4	->
water	9:47	0:0	4	data
op	9:51	0:0	4	[
water	9:52	0:0	4	2
op	9:53	0:0	4	]
water	9:55	0:0	4	?
water	9:57	0:0	4	3
water	9:59	0:0	4	:
water	9:61	0:0	4	1
water	9:62	0:0	4	)
forexpr	9:65	9:70	3	plane ++
water	9:65	0:0	4	plane
op	9:70	0:0	4	++
stmts	9:74	41:8	3	
water	9:74	0:0	4	{
decl	10:8	10:20	4	int	x
water	10:13	0:0	4	,
decl	10:8	10:20	4	int	y
water	10:16	0:0	4	,
decl	10:8	10:20	4	int	xl
decl	11:8	11:49	4	const int	linesize1
op	11:28	0:0	4	=
water	11:30	0:0	4	f1
op	11:32	0:0	4	->
water	11:34	0:0	4	linesize
op	11:42	0:0	4	[
water	11:43	0:0	4	plane
op	11:48	0:0	4	]
decl	12:8	12:49	4	const int	linesize2
op	12:28	0:0	4	=
water	12:30	0:0	4	f2
op	12:32	0:0	4	->
water	12:34	0:0	4	linesize
op	12:42	0:0	4	[
water	12:43	0:0	4	plane
op	12:48	0:0	4	]
decl	13:8	13:44	4	const uint8_t	*f1p
op	13:27	0:0	4	=
water	13:29	0:0	4	f1
op	13:31	0:0	4	->
water	13:33	0:0	4	data
op	13:37	0:0	4	[
water	13:38	0:0	4	plane
op	13:43	0:0	4	]
decl	14:8	14:44	4	const uint8_t	*f2p
op	14:27	0:0	4	=
water	14:29	0:0	4	f2
op	14:31	0:0	4	->
water	14:33	0:0	4	data
op	14:37	0:0	4	[
water	14:38	0:0	4	plane
op	14:43	0:0	4	]
decl	15:8	15:79	4	int	width
op	15:21	0:0	4	=
water	15:23	0:0	4	plane
water	15:29	0:0	4	?
call	15:31	15:66	5	FF_CEIL_RSHIFT
arg	15:46	15:55	6	f1->width
water	15:46	0:0	7	f1
op	15:48	0:0	7	->
water	15:50	0:0	7	width
arg	15:58	15:66	6	dm->hsub
water	15:58	0:0	7	dm
op	15:60	0:0	7	->
water	15:62	0:0	7	hsub
water	15:68	0:0	4	:
water	15:70	0:0	4	f1
op	15:72	0:0	4	->
water	15:74	0:0	4	width
decl	16:8	16:80	4	int	height
op	16:21	0:0	4	=
water	16:23	0:0	4	plane
water	16:29	0:0	4	?
call	16:31	16:66	5	FF_CEIL_RSHIFT
arg	16:46	16:56	6	f1->height
water	16:46	0:0	7	f1
op	16:48	0:0	7	->
water	16:50	0:0	7	height
arg	16:58	16:66	6	dm->vsub
water	16:58	0:0	7	dm
op	16:60	0:0	7	->
water	16:62	0:0	7	vsub
water	16:68	0:0	4	:
water	16:70	0:0	4	f1
op	16:72	0:0	4	->
water	16:74	0:0	4	height
decl	17:8	17:37	4	int	hblockx
op	17:21	0:0	4	=
water	17:23	0:0	4	dm
op	17:25	0:0	4	->
water	17:27	0:0	4	blockx
op	17:34	0:0	4	/
water	17:36	0:0	4	2
decl	18:8	18:37	4	int	hblocky
op	18:21	0:0	4	=
water	18:23	0:0	4	dm
op	18:25	0:0	4	->
water	18:27	0:0	4	blocky
op	18:34	0:0	4	/
water	18:36	0:0	4	2
if	19:8	22:8	4	(plane)
cond	19:12	19:12	5	plane
water	19:12	0:0	6	plane
stmts	19:19	22:8	5	
water	19:19	0:0	6	{
water	20:12	0:0	6	hblockx
op	20:20	0:0	6	>>=
water	20:24	0:0	6	dm
op	20:26	0:0	6	->
water	20:28	0:0	6	hsub
water	20:32	0:0	6	;
water	21:12	0:0	6	hblocky
op	21:20	0:0	6	>>=
water	21:24	0:0	6	dm
op	21:26	0:0	6	->
water	21:28	0:0	6	vsub
water	21:32	0:0	6	;
water	22:8	0:0	6	}
for	23:8	36:0	4	(y = 0 ;y < height;y ++)
forinit	23:13	23:18	5	y = 0 ;
water	23:13	0:0	6	y
op	23:15	0:0	6	=
water	23:17	0:0	6	0
water	23:18	0:0	6	;
cond	23:20	23:24	5	y < height
water	23:20	0:0	6	y
op	23:22	0:0	6	<
water	23:24	0:0	6	height
forexpr	23:32	23:33	5	y ++
water	23:32	0:0	6	y
op	23:33	0:0	6	++
stmts	23:37	36:0	5	
water	23:37	0:0	6	{
decl	24:12	24:35	6	int	ydest
op	24:22	0:0	6	=
water	24:24	0:0	6	y
op	24:26	0:0	6	/
water	24:28	0:0	6	hblocky
decl	25:12	25:25	6	int	xdest
op	25:22	0:0	6	=
water	25:24	0:0	6	0
for	27:4	35:4	6	(x = 0 ;x < width;x += hblockx)
forinit	27:9	27:14	7	x = 0 ;
water	27:9	0:0	8	x
op	27:11	0:0	8	=
water	27:13	0:0	8	0
water	27:14	0:0	8	;
cond	27:16	27:20	7	x < width
water	27:16	0:0	8	x
op	27:18	0:0	8	<
water	27:20	0:0	8	width
forexpr	27:27	27:32	7	x += hblockx
water	27:27	0:0	8	x
op	27:29	0:0	8	+=
water	27:32	0:0	8	hblockx
stmts	27:41	35:4	7	
water	27:41	0:0	8	{
decl	28:8	28:23	8	int64_t	acc
op	28:20	0:0	8	=
water	28:22	0:0	8	0
decl	29:8	29:41	8	int	m
op	29:14	0:0	8	=
call	29:16	29:40	9	FFMIN
arg	29:22	29:27	10	width
water	29:22	0:0	11	width
arg	29:29	29:40	10	x+hblockx
water	29:29	0:0	11	x
op	29:31	0:0	11	+
water	29:33	0:0	11	hblockx
for	30:8	33:51	8	(xl = x ;xl < m;xl ++)
forinit	30:13	30:19	9	xl = x ;
water	30:13	0:0	10	xl
op	30:16	0:0	10	=
water	30:18	0:0	10	x
water	30:19	0:0	10	;
cond	30:21	30:26	9	xl < m
water	30:21	0:0	10	xl
op	30:24	0:0	10	<
water	30:26	0:0	10	m
forexpr	30:29	30:31	9	xl ++
water	30:29	0:0	10	xl
op	30:31	0:0	10	++
stmts	31:12	33:51	9	
water	31:12	0:0	10	acc
op	31:16	0:0	10	+=
water	31:19	0:0	10	abs
water	31:22	0:0	10	(
water	31:23	0:0	10	(
water	31:24	0:0	10	(
water	31:25	0:0	10	const
water	31:31	0:0	10	uint
water	32:23	0:0	10	(
water	32:24	0:0	10	(
water	32:25	0:0	10	const
water	32:31	0:0	10	uint
water	33:8	0:0	10	bdiffs
op	33:14	0:0	10	[
water	33:15	0:0	10	ydest
op	33:21	0:0	10	*
water	33:23	0:0	10	dm
op	33:25	0:0	10	->
water	33:27	0:0	10	nxblocks
op	33:36	0:0	10	+
water	33:38	0:0	10	xdest
op	33:43	0:0	10	]
op	33:45	0:0	10	+=
water	33:48	0:0	10	acc
water	33:51	0:0	10	;
water	34:8	0:0	8	xdest
op	34:13	0:0	8	++
water	34:15	0:0	8	;
water	35:4	0:0	8	}
water	36:0	0:0	6	}
while	36:2	37:44	4	(0)
cond	36:9	36:9	5	0
water	36:9	0:0	6	0
stmts	37:12	37:44	5	
if	37:12	37:44	6	(dm -> depth == 8)
cond	37:16	37:29	7	dm -> depth == 8
water	37:16	0:0	8	dm
op	37:18	0:0	8	->
water	37:20	0:0	8	depth
op	37:26	0:0	8	==
water	37:29	0:0	8	8
stmts	37:32	37:44	7	
call	37:32	37:43	8	CALC_DIFF
arg	37:42	37:43	9	8
water	37:42	0:0	10	8
water	37:44	0:0	8	;
else	38:12	38:45	4
stmts	38:32	38:45	5	
call	38:32	38:44	6	CALC_DIFF
arg	38:42	38:44	7	16
water	38:42	0:0	8	16
water	38:45	0:0	6	;
water	39:12	0:0	4	f1p
op	39:16	0:0	4	+=
water	39:19	0:0	4	linesize1
water	39:28	0:0	4	;
water	40:12	0:0	4	f2p
op	40:16	0:0	4	+=
water	40:19	0:0	4	linesize2
water	40:28	0:0	4	;
water	41:8	0:0	4	}
decl	45:12	48:64	0	int64_t	tmp
op	45:24	0:0	0	=
water	45:26	0:0	0	bdiffs
op	45:32	0:0	0	[
water	45:39	0:0	0	i
op	45:41	0:0	0	*
water	45:43	0:0	0	dm
op	45:45	0:0	0	->
water	45:47	0:0	0	nxblocks
op	45:56	0:0	0	+
water	45:58	0:0	0	j
op	45:63	0:0	0	]
op	46:24	0:0	0	+
water	46:26	0:0	0	bdiffs
op	46:32	0:0	0	[
water	46:39	0:0	0	i
op	46:41	0:0	0	*
water	46:43	0:0	0	dm
op	46:45	0:0	0	->
water	46:47	0:0	0	nxblocks
op	46:56	0:0	0	+
water	46:58	0:0	0	j
op	46:60	0:0	0	+
water	46:62	0:0	0	1
op	46:63	0:0	0	]
op	47:24	0:0	0	+
water	47:26	0:0	0	bdiffs
op	47:32	0:0	0	[
water	47:33	0:0	0	(
water	47:34	0:0	0	i
op	47:36	0:0	0	+
water	47:38	0:0	0	1
water	47:39	0:0	0	)
op	47:41	0:0	0	*
water	47:43	0:0	0	dm
op	47:45	0:0	0	->
water	47:47	0:0	0	nxblocks
op	47:56	0:0	0	+
water	47:58	0:0	0	j
op	47:63	0:0	0	]
op	48:24	0:0	0	+
water	48:26	0:0	0	bdiffs
op	48:32	0:0	0	[
water	48:33	0:0	0	(
water	48:34	0:0	0	i
op	48:36	0:0	0	+
water	48:38	0:0	0	1
water	48:39	0:0	0	)
op	48:41	0:0	0	*
water	48:43	0:0	0	dm
op	48:45	0:0	0	->
water	48:47	0:0	0	nxblocks
op	48:56	0:0	0	+
water	48:58	0:0	0	j
op	48:60	0:0	0	+
water	48:62	0:0	0	1
op	48:63	0:0	0	]
