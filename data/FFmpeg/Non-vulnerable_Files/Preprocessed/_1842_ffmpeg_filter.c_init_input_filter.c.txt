func	1:0	71:0	0	static void	init_input_filter
params	1:29	0:0	1	
param	1:30	1:45	2	FilterGraph *	fg
param	1:47	1:64	2	AVFilterInOut *	in
stmnts	0:0	70:69	1	
decl	3:4	3:27	2	InputStream	*ist
op	3:21	0:0	2	=
water	3:23	0:0	2	NULL
decl	4:4	4:90	2	enum AVMediaType	type
op	4:26	0:0	2	=
call	4:28	4:89	3	avfilter_pad_get_type
arg	4:50	4:76	4	in->filter_ctx->input_pads
water	4:50	0:0	5	in
op	4:52	0:0	5	->
water	4:54	0:0	5	filter_ctx
op	4:64	0:0	5	->
water	4:66	0:0	5	input_pads
arg	4:78	4:89	4	in->pad_idx
water	4:78	0:0	5	in
op	4:80	0:0	5	->
water	4:82	0:0	5	pad_idx
decl	5:4	5:9	2	int	i
if	7:4	11:4	2	(type != AVMEDIA_TYPE_VIDEO && type != AVMEDIA_TYPE_AUDIO)
cond	7:8	7:46	3	type != AVMEDIA_TYPE_VIDEO && type != AVMEDIA_TYPE_AUDIO
water	7:8	0:0	4	type
op	7:13	0:0	4	!=
water	7:16	0:0	4	AVMEDIA_TYPE_VIDEO
op	7:35	0:0	4	&&
water	7:38	0:0	4	type
op	7:43	0:0	4	!=
water	7:46	0:0	4	AVMEDIA_TYPE_AUDIO
stmts	7:66	11:4	3	
water	7:66	0:0	4	{
call	8:8	9:29	4	av_log
arg	8:15	8:19	5	NULL
water	8:15	0:0	6	NULL
arg	8:21	8:33	5	AV_LOG_FATAL
water	8:21	0:0	6	AV_LOG_FATAL
arg	8:35	9:29	5	"Only video and audio filters supported ""currently.\n"
water	8:35	0:0	6	"Only video and audio filters supported "
water	9:15	0:0	6	"currently.\n"
water	9:30	0:0	4	;
call	10:8	10:22	4	exit_program
arg	10:21	10:22	5	1
water	10:21	0:0	6	1
water	10:23	0:0	4	;
water	11:4	0:0	4	}
if	12:4	40:4	2	(in -> name)
cond	12:8	12:12	3	in -> name
water	12:8	0:0	4	in
op	12:10	0:0	4	->
water	12:12	0:0	4	name
stmts	12:18	40:4	3	
water	12:18	0:0	4	{
decl	13:8	13:26	4	AVFormatContext	*s
decl	14:8	14:33	4	AVStream	*st
op	14:27	0:0	4	=
water	14:29	0:0	4	NULL
decl	15:8	15:15	4	char	*p
decl	16:8	16:46	4	int	file_idx
op	16:21	0:0	4	=
call	16:23	16:45	5	strtol
arg	16:30	16:38	6	in->name
water	16:30	0:0	7	in
op	16:32	0:0	7	->
water	16:34	0:0	7	name
arg	16:40	16:42	6	&p
op	16:40	0:0	7	&
water	16:41	0:0	7	p
arg	16:44	16:45	6	0
water	16:44	0:0	7	0
if	17:8	21:8	4	(file_idx < 0 || file_idx >= nb_input_files)
cond	17:12	17:40	5	file_idx < 0 || file_idx >= nb_input_files
water	17:12	0:0	6	file_idx
op	17:21	0:0	6	<
water	17:23	0:0	6	0
op	17:25	0:0	6	||
water	17:28	0:0	6	file_idx
op	17:37	0:0	6	>=
water	17:40	0:0	6	nb_input_files
stmts	17:56	21:8	5	
water	17:56	0:0	6	{
call	18:12	19:43	6	av_log
arg	18:19	18:23	7	NULL
water	18:19	0:0	8	NULL
arg	18:25	18:37	7	AV_LOG_FATAL
water	18:25	0:0	8	AV_LOG_FATAL
arg	18:39	18:95	7	"Invalid file index %d in filtergraph description %s.\n"
water	18:39	0:0	8	"Invalid file index %d in filtergraph description %s.\n"
arg	19:19	19:27	7	file_idx
water	19:19	0:0	8	file_idx
arg	19:29	19:43	7	fg->graph_desc
water	19:29	0:0	8	fg
op	19:31	0:0	8	->
water	19:33	0:0	8	graph_desc
water	19:44	0:0	6	;
call	20:12	20:26	6	exit_program
arg	20:25	20:26	7	1
water	20:25	0:0	8	1
water	20:27	0:0	6	;
water	21:8	0:0	6	}
water	22:8	0:0	4	s
op	22:10	0:0	4	=
water	22:12	0:0	4	input_files
op	22:23	0:0	4	[
water	22:24	0:0	4	file_idx
op	22:32	0:0	4	]
op	22:33	0:0	4	->
water	22:35	0:0	4	ctx
water	22:38	0:0	4	;
for	23:8	33:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	23:13	23:18	5	i = 0 ;
water	23:13	0:0	6	i
op	23:15	0:0	6	=
water	23:17	0:0	6	0
water	23:18	0:0	6	;
cond	23:20	23:27	5	i < s -> nb_streams
water	23:20	0:0	6	i
op	23:22	0:0	6	<
water	23:24	0:0	6	s
op	23:25	0:0	6	->
water	23:27	0:0	6	nb_streams
forexpr	23:39	23:40	5	i ++
water	23:39	0:0	6	i
op	23:40	0:0	6	++
stmts	23:44	33:8	5	
water	23:44	0:0	6	{
decl	24:12	24:78	6	enum AVMediaType	stream_type
op	24:41	0:0	6	=
water	24:43	0:0	6	s
op	24:44	0:0	6	->
water	24:46	0:0	6	streams
op	24:53	0:0	6	[
water	24:54	0:0	6	i
op	24:55	0:0	6	]
op	24:56	0:0	6	->
water	24:58	0:0	6	codecpar
op	24:66	0:0	6	->
water	24:68	0:0	6	codec_type
if	25:12	28:24	6	(stream_type != type && ! ( stream_type == AVMEDIA_TYPE_SUBTITLE && type == AVMEDIA_TYPE_VIDEO ))
cond	25:16	27:45	7	stream_type != type && ! ( stream_type == AVMEDIA_TYPE_SUBTITLE && type == AVMEDIA_TYPE_VIDEO )
water	25:16	0:0	8	stream_type
op	25:28	0:0	8	!=
water	25:31	0:0	8	type
op	25:36	0:0	8	&&
op	26:16	0:0	8	!
water	26:17	0:0	8	(
water	26:18	0:0	8	stream_type
op	26:30	0:0	8	==
water	26:33	0:0	8	AVMEDIA_TYPE_SUBTITLE
op	26:55	0:0	8	&&
water	27:18	0:0	8	type
op	27:23	0:0	8	==
water	27:26	0:0	8	AVMEDIA_TYPE_VIDEO
water	27:45	0:0	8	)
stmts	28:16	28:24	7	
continue	28:16	28:24	8	
if	29:12	32:12	6	(check_stream_specifier (s ,s -> streams [ i ] ,* p == ':' ? p + 1 : p ) == 1)
cond	29:16	29:83	7	check_stream_specifier (s ,s -> streams [ i ] ,* p == ':' ? p + 1 : p ) == 1
call	29:16	29:78	8	check_stream_specifier
arg	29:39	29:40	9	s
water	29:39	0:0	10	s
arg	29:42	29:55	9	s->streams[i]
water	29:42	0:0	10	s
op	29:43	0:0	10	->
water	29:45	0:0	10	streams
op	29:52	0:0	10	[
water	29:53	0:0	10	i
op	29:54	0:0	10	]
arg	29:57	29:78	9	*p==':'?p+1:p
op	29:57	0:0	10	*
water	29:58	0:0	10	p
op	29:60	0:0	10	==
water	29:63	0:0	10	':'
water	29:67	0:0	10	?
water	29:69	0:0	10	p
op	29:71	0:0	10	+
water	29:73	0:0	10	1
water	29:75	0:0	10	:
water	29:77	0:0	10	p
op	29:80	0:0	8	==
water	29:83	0:0	8	1
stmts	29:86	32:12	7	
water	29:86	0:0	8	{
water	30:16	0:0	8	st
op	30:19	0:0	8	=
water	30:21	0:0	8	s
op	30:22	0:0	8	->
water	30:24	0:0	8	streams
op	30:31	0:0	8	[
water	30:32	0:0	8	i
op	30:33	0:0	8	]
water	30:34	0:0	8	;
break	31:16	31:21	8	
water	32:12	0:0	8	}
water	33:8	0:0	6	}
if	34:8	38:8	4	(! st)
cond	34:12	34:13	5	! st
op	34:12	0:0	6	!
water	34:13	0:0	6	st
stmts	34:17	38:8	5	
water	34:17	0:0	6	{
call	35:12	36:61	6	av_log
arg	35:19	35:23	7	NULL
water	35:19	0:0	8	NULL
arg	35:25	35:37	7	AV_LOG_FATAL
water	35:25	0:0	8	AV_LOG_FATAL
arg	35:39	36:42	7	"Stream specifier '%s' in filtergraph description %s ""matches no streams.\n"
water	35:39	0:0	8	"Stream specifier '%s' in filtergraph description %s "
water	36:19	0:0	8	"matches no streams.\n"
arg	36:44	36:45	7	p
water	36:44	0:0	8	p
arg	36:47	36:61	7	fg->graph_desc
water	36:47	0:0	8	fg
op	36:49	0:0	8	->
water	36:51	0:0	8	graph_desc
water	36:62	0:0	6	;
call	37:12	37:26	6	exit_program
arg	37:25	37:26	7	1
water	37:25	0:0	8	1
water	37:27	0:0	6	;
water	38:8	0:0	6	}
water	39:8	0:0	4	ist
op	39:12	0:0	4	=
water	39:14	0:0	4	input_streams
op	39:27	0:0	4	[
water	39:28	0:0	4	input_files
op	39:39	0:0	4	[
water	39:40	0:0	4	file_idx
op	39:48	0:0	4	]
op	39:49	0:0	4	->
water	39:51	0:0	4	ist_index
op	39:61	0:0	4	+
water	39:63	0:0	4	st
op	39:65	0:0	4	->
water	39:67	0:0	4	index
op	39:72	0:0	4	]
water	39:73	0:0	4	;
water	40:4	0:0	4	}
else	40:6	53:4	2
stmts	40:11	53:4	3	
water	40:11	0:0	4	{
for	42:8	46:8	4	(i = 0 ;i < nb_input_streams;i ++)
forinit	42:13	42:18	5	i = 0 ;
water	42:13	0:0	6	i
op	42:15	0:0	6	=
water	42:17	0:0	6	0
water	42:18	0:0	6	;
cond	42:20	42:24	5	i < nb_input_streams
water	42:20	0:0	6	i
op	42:22	0:0	6	<
water	42:24	0:0	6	nb_input_streams
forexpr	42:42	42:43	5	i ++
water	42:42	0:0	6	i
op	42:43	0:0	6	++
stmts	42:47	46:8	5	
water	42:47	0:0	6	{
water	43:12	0:0	6	ist
op	43:16	0:0	6	=
water	43:18	0:0	6	input_streams
op	43:31	0:0	6	[
water	43:32	0:0	6	i
op	43:33	0:0	6	]
water	43:34	0:0	6	;
if	44:12	45:21	6	(ist -> dec_ctx -> codec_type == type && ist -> discard)
cond	44:16	44:57	7	ist -> dec_ctx -> codec_type == type && ist -> discard
water	44:16	0:0	8	ist
op	44:19	0:0	8	->
water	44:21	0:0	8	dec_ctx
op	44:28	0:0	8	->
water	44:30	0:0	8	codec_type
op	44:41	0:0	8	==
water	44:44	0:0	8	type
op	44:49	0:0	8	&&
water	44:52	0:0	8	ist
op	44:55	0:0	8	->
water	44:57	0:0	8	discard
stmts	45:16	45:21	7	
break	45:16	45:21	8	
water	46:8	0:0	6	}
if	47:8	52:8	4	(i == nb_input_streams)
cond	47:12	47:17	5	i == nb_input_streams
water	47:12	0:0	6	i
op	47:14	0:0	6	==
water	47:17	0:0	6	nb_input_streams
stmts	47:35	52:8	5	
water	47:35	0:0	6	{
call	48:12	50:39	6	av_log
arg	48:19	48:23	7	NULL
water	48:19	0:0	8	NULL
arg	48:25	48:37	7	AV_LOG_FATAL
water	48:25	0:0	8	AV_LOG_FATAL
arg	48:39	49:58	7	"Cannot find a matching stream for ""unlabeled input pad %d on filter %s\n"
water	48:39	0:0	8	"Cannot find a matching stream for "
water	49:19	0:0	8	"unlabeled input pad %d on filter %s\n"
arg	49:60	49:71	7	in->pad_idx
water	49:60	0:0	8	in
op	49:62	0:0	8	->
water	49:64	0:0	8	pad_idx
arg	50:19	50:39	7	in->filter_ctx->name
water	50:19	0:0	8	in
op	50:21	0:0	8	->
water	50:23	0:0	8	filter_ctx
op	50:33	0:0	8	->
water	50:35	0:0	8	name
water	50:40	0:0	6	;
call	51:12	51:26	6	exit_program
arg	51:25	51:26	7	1
water	51:25	0:0	8	1
water	51:27	0:0	6	;
water	52:8	0:0	6	}
water	53:4	0:0	4	}
call	54:4	54:18	2	av_assert0
arg	54:15	54:18	3	ist
water	54:15	0:0	4	ist
water	54:19	0:0	2	;
water	55:4	0:0	2	ist
op	55:7	0:0	2	->
water	55:9	0:0	2	discard
op	55:25	0:0	2	=
water	55:27	0:0	2	0
water	55:28	0:0	2	;
water	56:4	0:0	2	ist
op	56:7	0:0	2	->
water	56:9	0:0	2	decoding_needed
op	56:25	0:0	2	|=
water	56:28	0:0	2	DECODING_FOR_FILTER
water	56:47	0:0	2	;
water	57:4	0:0	2	ist
op	57:7	0:0	2	->
water	57:9	0:0	2	st
op	57:11	0:0	2	->
water	57:13	0:0	2	discard
op	57:21	0:0	2	=
water	57:23	0:0	2	AVDISCARD_NONE
water	57:37	0:0	2	;
call	58:4	58:40	2	GROW_ARRAY
arg	58:15	58:25	3	fg->inputs
water	58:15	0:0	4	fg
op	58:17	0:0	4	->
water	58:19	0:0	4	inputs
arg	58:27	58:40	3	fg->nb_inputs
water	58:27	0:0	4	fg
op	58:29	0:0	4	->
water	58:31	0:0	4	nb_inputs
water	58:41	0:0	2	;
if	59:4	60:23	2	(! ( fg -> inputs [ fg -> nb_inputs - 1 ] =av_mallocz (sizeof ( * fg -> inputs [ 0 ] ) ) ))
cond	59:8	59:76	3	! ( fg -> inputs [ fg -> nb_inputs - 1 ] =av_mallocz (sizeof ( * fg -> inputs [ 0 ] ) ) )
op	59:8	0:0	4	!
water	59:9	0:0	4	(
water	59:10	0:0	4	fg
op	59:12	0:0	4	->
water	59:14	0:0	4	inputs
op	59:20	0:0	4	[
water	59:21	0:0	4	fg
op	59:23	0:0	4	->
water	59:25	0:0	4	nb_inputs
op	59:35	0:0	4	-
water	59:37	0:0	4	1
op	59:38	0:0	4	]
op	59:40	0:0	4	=
call	59:42	59:75	4	av_mallocz
arg	59:53	59:75	5	sizeof(*fg->inputs[0])
op	59:53	0:0	6	sizeof
water	59:59	0:0	6	(
op	59:60	0:0	6	*
water	59:61	0:0	6	fg
op	59:63	0:0	6	->
water	59:65	0:0	6	inputs
op	59:71	0:0	6	[
water	59:72	0:0	6	0
op	59:73	0:0	6	]
water	59:74	0:0	6	)
water	59:76	0:0	4	)
stmts	60:8	60:23	3	
call	60:8	60:22	4	exit_program
arg	60:21	60:22	5	1
water	60:21	0:0	6	1
water	60:23	0:0	4	;
water	61:4	0:0	2	fg
op	61:6	0:0	2	->
water	61:8	0:0	2	inputs
op	61:14	0:0	2	[
water	61:15	0:0	2	fg
op	61:17	0:0	2	->
water	61:19	0:0	2	nb_inputs
op	61:29	0:0	2	-
water	61:31	0:0	2	1
op	61:32	0:0	2	]
op	61:33	0:0	2	->
water	61:35	0:0	2	ist
op	61:41	0:0	2	=
water	61:43	0:0	2	ist
water	61:46	0:0	2	;
water	62:4	0:0	2	fg
op	62:6	0:0	2	->
water	62:8	0:0	2	inputs
op	62:14	0:0	2	[
water	62:15	0:0	2	fg
op	62:17	0:0	2	->
water	62:19	0:0	2	nb_inputs
op	62:29	0:0	2	-
water	62:31	0:0	2	1
op	62:32	0:0	2	]
op	62:33	0:0	2	->
water	62:35	0:0	2	graph
op	62:41	0:0	2	=
water	62:43	0:0	2	fg
water	62:45	0:0	2	;
water	63:4	0:0	2	fg
op	63:6	0:0	2	->
water	63:8	0:0	2	inputs
op	63:14	0:0	2	[
water	63:15	0:0	2	fg
op	63:17	0:0	2	->
water	63:19	0:0	2	nb_inputs
op	63:29	0:0	2	-
water	63:31	0:0	2	1
op	63:32	0:0	2	]
op	63:33	0:0	2	->
water	63:35	0:0	2	format
op	63:42	0:0	2	=
op	63:44	0:0	2	-
water	63:45	0:0	2	1
water	63:46	0:0	2	;
water	64:4	0:0	2	fg
op	64:6	0:0	2	->
water	64:8	0:0	2	inputs
op	64:14	0:0	2	[
water	64:15	0:0	2	fg
op	64:17	0:0	2	->
water	64:19	0:0	2	nb_inputs
op	64:29	0:0	2	-
water	64:31	0:0	2	1
op	64:32	0:0	2	]
op	64:33	0:0	2	->
water	64:35	0:0	2	type
op	64:40	0:0	2	=
water	64:42	0:0	2	ist
op	64:45	0:0	2	->
water	64:47	0:0	2	st
op	64:49	0:0	2	->
water	64:51	0:0	2	codecpar
op	64:59	0:0	2	->
water	64:61	0:0	2	codec_type
water	64:71	0:0	2	;
water	65:4	0:0	2	fg
op	65:6	0:0	2	->
water	65:8	0:0	2	inputs
op	65:14	0:0	2	[
water	65:15	0:0	2	fg
op	65:17	0:0	2	->
water	65:19	0:0	2	nb_inputs
op	65:29	0:0	2	-
water	65:31	0:0	2	1
op	65:32	0:0	2	]
op	65:33	0:0	2	->
water	65:35	0:0	2	name
op	65:40	0:0	2	=
call	65:42	65:72	2	describe_filter_link
arg	65:63	65:65	3	fg
water	65:63	0:0	4	fg
arg	65:67	65:69	3	in
water	65:67	0:0	4	in
arg	65:71	65:72	3	1
water	65:71	0:0	4	1
water	65:73	0:0	2	;
water	66:4	0:0	2	fg
op	66:6	0:0	2	->
water	66:8	0:0	2	inputs
op	66:14	0:0	2	[
water	66:15	0:0	2	fg
op	66:17	0:0	2	->
water	66:19	0:0	2	nb_inputs
op	66:29	0:0	2	-
water	66:31	0:0	2	1
op	66:32	0:0	2	]
op	66:33	0:0	2	->
water	66:35	0:0	2	frame_queue
op	66:47	0:0	2	=
call	66:49	66:83	2	av_fifo_alloc
arg	66:63	66:83	3	8*sizeof(AVFrame*)
water	66:63	0:0	4	8
op	66:65	0:0	4	*
op	66:67	0:0	4	sizeof
water	66:73	0:0	4	(
water	66:74	0:0	4	AVFrame
op	66:81	0:0	4	*
water	66:82	0:0	4	)
water	66:84	0:0	2	;
if	67:4	68:23	2	(! fg -> inputs [ fg -> nb_inputs - 1 ] -> frame_queue)
cond	67:8	67:40	3	! fg -> inputs [ fg -> nb_inputs - 1 ] -> frame_queue
op	67:8	0:0	4	!
water	67:9	0:0	4	fg
op	67:11	0:0	4	->
water	67:13	0:0	4	inputs
op	67:19	0:0	4	[
water	67:20	0:0	4	fg
op	67:22	0:0	4	->
water	67:24	0:0	4	nb_inputs
op	67:34	0:0	4	-
water	67:36	0:0	4	1
op	67:37	0:0	4	]
op	67:38	0:0	4	->
water	67:40	0:0	4	frame_queue
stmts	68:8	68:23	3	
call	68:8	68:22	4	exit_program
arg	68:21	68:22	5	1
water	68:21	0:0	6	1
water	68:23	0:0	4	;
call	69:4	69:44	2	GROW_ARRAY
arg	69:15	69:27	3	ist->filters
water	69:15	0:0	4	ist
op	69:18	0:0	4	->
water	69:20	0:0	4	filters
arg	69:29	69:44	3	ist->nb_filters
water	69:29	0:0	4	ist
op	69:32	0:0	4	->
water	69:34	0:0	4	nb_filters
water	69:45	0:0	2	;
water	70:4	0:0	2	ist
op	70:7	0:0	2	->
water	70:9	0:0	2	filters
op	70:16	0:0	2	[
water	70:17	0:0	2	ist
op	70:20	0:0	2	->
water	70:22	0:0	2	nb_filters
op	70:33	0:0	2	-
water	70:35	0:0	2	1
op	70:36	0:0	2	]
op	70:38	0:0	2	=
water	70:40	0:0	2	fg
op	70:42	0:0	2	->
water	70:44	0:0	2	inputs
op	70:50	0:0	2	[
water	70:51	0:0	2	fg
op	70:53	0:0	2	->
water	70:55	0:0	2	nb_inputs
op	70:65	0:0	2	-
water	70:67	0:0	2	1
op	70:68	0:0	2	]
water	70:69	0:0	2	;
