func	1:0	29:0	0	int	av_crc_init
params	1:15	0:0	1	
param	1:16	1:26	2	AVCRC *	ctx
param	1:28	1:34	2	int	le
param	1:36	1:44	2	int	bits
param	1:46	1:59	2	uint32_t	poly
param	1:61	1:73	2	int	ctx_size
stmnts	3:4	28:12	1	
water	3:4	0:0	2	unsigned
water	3:13	0:0	2	i
water	3:14	0:0	2	,
water	3:16	0:0	2	j
water	3:17	0:0	2	;
decl	4:4	4:14	2	uint32_t	c
if	5:4	6:17	2	(bits < 8 || bits > 32 || poly >= ( 1 LL << bits ))
cond	5:8	5:53	3	bits < 8 || bits > 32 || poly >= ( 1 LL << bits )
water	5:8	0:0	4	bits
op	5:13	0:0	4	<
water	5:15	0:0	4	8
op	5:17	0:0	4	||
water	5:20	0:0	4	bits
op	5:25	0:0	4	>
water	5:27	0:0	4	32
op	5:30	0:0	4	||
water	5:33	0:0	4	poly
op	5:38	0:0	4	>=
water	5:41	0:0	4	(
water	5:42	0:0	4	1
water	5:43	0:0	4	LL
op	5:46	0:0	4	<<
water	5:49	0:0	4	bits
water	5:53	0:0	4	)
stmts	6:8	6:17	3	
return	6:8	6:17	4	-1
op	6:15	0:0	5	-
water	6:16	0:0	5	1
if	7:4	8:17	2	(ctx_size != sizeof ( AVCRC ) * 257 && ctx_size != sizeof ( AVCRC ) * 1024)
cond	7:8	7:71	3	ctx_size != sizeof ( AVCRC ) * 257 && ctx_size != sizeof ( AVCRC ) * 1024
water	7:8	0:0	4	ctx_size
op	7:17	0:0	4	!=
op	7:20	0:0	4	sizeof
water	7:26	0:0	4	(
water	7:27	0:0	4	AVCRC
water	7:32	0:0	4	)
op	7:34	0:0	4	*
water	7:36	0:0	4	257
op	7:40	0:0	4	&&
water	7:43	0:0	4	ctx_size
op	7:52	0:0	4	!=
op	7:55	0:0	4	sizeof
water	7:61	0:0	4	(
water	7:62	0:0	4	AVCRC
water	7:67	0:0	4	)
op	7:69	0:0	4	*
water	7:71	0:0	4	1024
stmts	8:8	8:17	3	
return	8:8	8:17	4	-1
op	8:15	0:0	5	-
water	8:16	0:0	5	1
for	9:4	19:4	2	(i = 0 ;i < 256;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:20	3	i < 256
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	256
forexpr	9:25	9:26	3	i ++
water	9:25	0:0	4	i
op	9:26	0:0	4	++
stmts	9:30	19:4	3	
water	9:30	0:0	4	{
if	10:8	14:8	4	(le)
cond	10:12	10:12	5	le
water	10:12	0:0	6	le
stmts	10:16	14:8	5	
water	10:16	0:0	6	{
for	11:12	12:50	6	(c = i , j = 0 ;j < 8;j ++)
forinit	11:17	11:29	7	c = i , j = 0 ;
water	11:17	0:0	8	c
op	11:19	0:0	8	=
water	11:21	0:0	8	i
water	11:22	0:0	8	,
water	11:24	0:0	8	j
op	11:26	0:0	8	=
water	11:28	0:0	8	0
water	11:29	0:0	8	;
cond	11:31	11:35	7	j < 8
water	11:31	0:0	8	j
op	11:33	0:0	8	<
water	11:35	0:0	8	8
forexpr	11:38	11:39	7	j ++
water	11:38	0:0	8	j
op	11:39	0:0	8	++
stmts	12:16	12:50	7	
water	12:16	0:0	8	c
op	12:18	0:0	8	=
water	12:20	0:0	8	(
water	12:21	0:0	8	c
op	12:23	0:0	8	>>
water	12:26	0:0	8	1
water	12:27	0:0	8	)
op	12:29	0:0	8	^
water	12:31	0:0	8	(
water	12:32	0:0	8	poly
op	12:37	0:0	8	&
water	12:39	0:0	8	(
op	12:40	0:0	8	-
water	12:41	0:0	8	(
water	12:42	0:0	8	c
op	12:44	0:0	8	&
water	12:46	0:0	8	1
water	12:47	0:0	8	)
water	12:48	0:0	8	)
water	12:49	0:0	8	)
water	12:50	0:0	8	;
water	13:12	0:0	6	ctx
op	13:15	0:0	6	[
water	13:16	0:0	6	i
op	13:17	0:0	6	]
op	13:19	0:0	6	=
water	13:21	0:0	6	c
water	13:22	0:0	6	;
water	14:8	0:0	6	}
else	14:10	18:8	4
stmts	14:15	18:8	5	
water	14:15	0:0	6	{
for	15:12	16:78	6	(c = i << 24 , j = 0 ;j < 8;j ++)
forinit	15:17	15:35	7	c = i << 24 , j = 0 ;
water	15:17	0:0	8	c
op	15:19	0:0	8	=
water	15:21	0:0	8	i
op	15:23	0:0	8	<<
water	15:26	0:0	8	24
water	15:28	0:0	8	,
water	15:30	0:0	8	j
op	15:32	0:0	8	=
water	15:34	0:0	8	0
water	15:35	0:0	8	;
cond	15:37	15:41	7	j < 8
water	15:37	0:0	8	j
op	15:39	0:0	8	<
water	15:41	0:0	8	8
forexpr	15:44	15:45	7	j ++
water	15:44	0:0	8	j
op	15:45	0:0	8	++
stmts	16:16	16:78	7	
water	16:16	0:0	8	c
op	16:18	0:0	8	=
water	16:20	0:0	8	(
water	16:21	0:0	8	c
op	16:23	0:0	8	<<
water	16:26	0:0	8	1
water	16:27	0:0	8	)
op	16:29	0:0	8	^
water	16:31	0:0	8	(
water	16:32	0:0	8	(
water	16:33	0:0	8	poly
op	16:38	0:0	8	<<
water	16:41	0:0	8	(
water	16:42	0:0	8	32
op	16:45	0:0	8	-
water	16:47	0:0	8	bits
water	16:51	0:0	8	)
water	16:52	0:0	8	)
op	16:54	0:0	8	&
water	16:56	0:0	8	(
water	16:57	0:0	8	(
water	16:58	0:0	8	(
water	16:59	0:0	8	int32_t
water	16:66	0:0	8	)
water	16:68	0:0	8	c
water	16:69	0:0	8	)
op	16:71	0:0	8	>>
water	16:74	0:0	8	31
water	16:76	0:0	8	)
water	16:77	0:0	8	)
water	16:78	0:0	8	;
water	17:12	0:0	6	ctx
op	17:15	0:0	6	[
water	17:16	0:0	6	i
op	17:17	0:0	6	]
op	17:19	0:0	6	=
call	17:21	17:33	6	av_bswap32
arg	17:32	17:33	7	c
water	17:32	0:0	8	c
water	17:34	0:0	6	;
water	18:8	0:0	6	}
water	19:4	0:0	4	}
water	20:4	0:0	2	ctx
op	20:7	0:0	2	[
water	20:8	0:0	2	256
op	20:11	0:0	2	]
op	20:13	0:0	2	=
water	20:15	0:0	2	1
water	20:16	0:0	2	;
if	22:4	26:74	2	(ctx_size >= sizeof ( AVCRC ) * 1024)
cond	22:8	22:36	3	ctx_size >= sizeof ( AVCRC ) * 1024
water	22:8	0:0	4	ctx_size
op	22:17	0:0	4	>=
op	22:20	0:0	4	sizeof
water	22:26	0:0	4	(
water	22:27	0:0	4	AVCRC
water	22:32	0:0	4	)
op	22:34	0:0	4	*
water	22:36	0:0	4	1024
stmts	23:8	26:74	3	
for	23:8	26:74	4	(i = 0 ;i < 256;i ++)
forinit	23:13	23:18	5	i = 0 ;
water	23:13	0:0	6	i
op	23:15	0:0	6	=
water	23:17	0:0	6	0
water	23:18	0:0	6	;
cond	23:20	23:24	5	i < 256
water	23:20	0:0	6	i
op	23:22	0:0	6	<
water	23:24	0:0	6	256
forexpr	23:29	23:30	5	i ++
water	23:29	0:0	6	i
op	23:30	0:0	6	++
stmts	24:12	26:74	5	
for	24:12	26:74	6	(j = 0 ;j < 3;j ++)
forinit	24:17	24:22	7	j = 0 ;
water	24:17	0:0	8	j
op	24:19	0:0	8	=
water	24:21	0:0	8	0
water	24:22	0:0	8	;
cond	24:24	24:28	7	j < 3
water	24:24	0:0	8	j
op	24:26	0:0	8	<
water	24:28	0:0	8	3
forexpr	24:31	24:32	7	j ++
water	24:31	0:0	8	j
op	24:32	0:0	8	++
stmts	25:16	26:74	7	
water	25:16	0:0	8	ctx
op	25:19	0:0	8	[
water	25:20	0:0	8	256
op	25:24	0:0	8	*
water	25:25	0:0	8	(
water	25:26	0:0	8	j
op	25:28	0:0	8	+
water	25:30	0:0	8	1
water	25:31	0:0	8	)
op	25:33	0:0	8	+
water	25:35	0:0	8	i
op	25:36	0:0	8	]
op	25:38	0:0	8	=
water	26:20	0:0	8	(
water	26:21	0:0	8	ctx
op	26:24	0:0	8	[
water	26:25	0:0	8	256
op	26:29	0:0	8	*
water	26:31	0:0	8	j
op	26:33	0:0	8	+
water	26:35	0:0	8	i
op	26:36	0:0	8	]
op	26:38	0:0	8	>>
water	26:41	0:0	8	8
water	26:42	0:0	8	)
op	26:44	0:0	8	^
water	26:46	0:0	8	ctx
op	26:49	0:0	8	[
water	26:50	0:0	8	ctx
op	26:53	0:0	8	[
water	26:54	0:0	8	256
op	26:58	0:0	8	*
water	26:60	0:0	8	j
op	26:62	0:0	8	+
water	26:64	0:0	8	i
op	26:65	0:0	8	]
op	26:67	0:0	8	&
water	26:69	0:0	8	0
water	26:70	0:0	8	xFF
op	26:73	0:0	8	]
water	26:74	0:0	8	;
return	28:4	28:12	2	0
water	28:11	0:0	3	0
