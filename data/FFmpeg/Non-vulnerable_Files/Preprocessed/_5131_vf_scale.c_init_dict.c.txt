decl	1:0	1:24	0	AVFilter	ff_vf_scale2ref
func	2:15	43:0	0	int	init_dict
params	2:28	0:0	1	
param	2:29	2:49	2	AVFilterContext *	ctx
param	2:51	2:70	2	AVDictionary * *	opts
stmnts	0:0	42:12	1	
decl	4:4	4:35	2	ScaleContext	*scale
op	4:24	0:0	2	=
water	4:26	0:0	2	ctx
op	4:29	0:0	2	->
water	4:31	0:0	2	priv
decl	5:4	5:11	2	int	ret
if	6:4	10:4	2	(scale -> size_str && ( scale -> w_expr || scale -> h_expr ))
cond	6:8	6:58	3	scale -> size_str && ( scale -> w_expr || scale -> h_expr )
water	6:8	0:0	4	scale
op	6:13	0:0	4	->
water	6:15	0:0	4	size_str
op	6:24	0:0	4	&&
water	6:27	0:0	4	(
water	6:28	0:0	4	scale
op	6:33	0:0	4	->
water	6:35	0:0	4	w_expr
op	6:42	0:0	4	||
water	6:45	0:0	4	scale
op	6:50	0:0	4	->
water	6:52	0:0	4	h_expr
water	6:58	0:0	4	)
stmts	6:61	10:4	3	
water	6:61	0:0	4	{
call	7:8	8:84	4	av_log
arg	7:15	7:18	5	ctx
water	7:15	0:0	6	ctx
arg	7:20	7:32	5	AV_LOG_ERROR
water	7:20	0:0	6	AV_LOG_ERROR
arg	8:15	8:84	5	"Size and width/height expressions cannot be set at the same time.\n"
water	8:15	0:0	6	"Size and width/height expressions cannot be set at the same time.\n"
water	8:85	0:0	4	;
return	9:12	9:34	4	AVERROR(EINVAL)
call	9:19	9:33	5	AVERROR
arg	9:27	9:33	6	EINVAL
water	9:27	0:0	7	EINVAL
water	10:4	0:0	4	}
if	11:4	12:54	2	(scale -> w_expr && ! scale -> h_expr)
cond	11:8	11:33	3	scale -> w_expr && ! scale -> h_expr
water	11:8	0:0	4	scale
op	11:13	0:0	4	->
water	11:15	0:0	4	w_expr
op	11:22	0:0	4	&&
op	11:25	0:0	4	!
water	11:26	0:0	4	scale
op	11:31	0:0	4	->
water	11:33	0:0	4	h_expr
stmts	12:8	12:54	3	
call	12:8	12:53	4	FFSWAP
arg	12:15	12:21	5	char*
water	12:15	0:0	6	char
op	12:20	0:0	6	*
arg	12:23	12:36	5	scale->w_expr
water	12:23	0:0	6	scale
op	12:28	0:0	6	->
water	12:30	0:0	6	w_expr
arg	12:38	12:53	5	scale->size_str
water	12:38	0:0	6	scale
op	12:43	0:0	6	->
water	12:45	0:0	6	size_str
water	12:54	0:0	4	;
if	13:4	24:4	2	(scale -> size_str)
cond	13:8	13:15	3	scale -> size_str
water	13:8	0:0	4	scale
op	13:13	0:0	4	->
water	13:15	0:0	4	size_str
stmts	13:25	24:4	3	
water	13:25	0:0	4	{
decl	14:8	14:20	4	char	buf[32]
if	15:8	19:8	4	(( ret =av_parse_video_size (& scale -> w ,& scale -> h ,scale -> size_str ) ) < 0)
cond	15:12	15:81	5	( ret =av_parse_video_size (& scale -> w ,& scale -> h ,scale -> size_str ) ) < 0
water	15:12	0:0	6	(
water	15:13	0:0	6	ret
op	15:17	0:0	6	=
call	15:19	15:76	6	av_parse_video_size
arg	15:39	15:48	7	&scale->w
op	15:39	0:0	8	&
water	15:40	0:0	8	scale
op	15:45	0:0	8	->
water	15:47	0:0	8	w
arg	15:50	15:59	7	&scale->h
op	15:50	0:0	8	&
water	15:51	0:0	8	scale
op	15:56	0:0	8	->
water	15:58	0:0	8	h
arg	15:61	15:76	7	scale->size_str
water	15:61	0:0	8	scale
op	15:66	0:0	8	->
water	15:68	0:0	8	size_str
water	15:77	0:0	6	)
op	15:79	0:0	6	<
water	15:81	0:0	6	0
stmts	15:84	19:8	5	
water	15:84	0:0	6	{
call	16:12	17:57	6	av_log
arg	16:19	16:22	7	ctx
water	16:19	0:0	8	ctx
arg	16:24	16:36	7	AV_LOG_ERROR
water	16:24	0:0	8	AV_LOG_ERROR
arg	17:19	17:40	7	"Invalid size '%s'\n"
water	17:19	0:0	8	"Invalid size '%s'\n"
arg	17:42	17:57	7	scale->size_str
water	17:42	0:0	8	scale
op	17:47	0:0	8	->
water	17:49	0:0	8	size_str
water	17:58	0:0	6	;
return	18:12	18:22	6	ret
water	18:19	0:0	7	ret
water	19:8	0:0	6	}
call	20:8	20:51	4	snprintf
arg	20:17	20:20	5	buf
water	20:17	0:0	6	buf
arg	20:22	20:35	5	sizeof(buf)-1
op	20:22	0:0	6	sizeof
water	20:28	0:0	6	(
water	20:29	0:0	6	buf
water	20:32	0:0	6	)
op	20:33	0:0	6	-
water	20:34	0:0	6	1
arg	20:37	20:41	5	"%d"
water	20:37	0:0	6	"%d"
arg	20:43	20:51	5	scale->w
water	20:43	0:0	6	scale
op	20:48	0:0	6	->
water	20:50	0:0	6	w
water	20:52	0:0	4	;
call	21:8	21:37	4	av_opt_set
arg	21:19	21:24	5	scale
water	21:19	0:0	6	scale
arg	21:26	21:29	5	"w"
water	21:26	0:0	6	"w"
arg	21:31	21:34	5	buf
water	21:31	0:0	6	buf
arg	21:36	21:37	5	0
water	21:36	0:0	6	0
water	21:38	0:0	4	;
call	22:8	22:51	4	snprintf
arg	22:17	22:20	5	buf
water	22:17	0:0	6	buf
arg	22:22	22:35	5	sizeof(buf)-1
op	22:22	0:0	6	sizeof
water	22:28	0:0	6	(
water	22:29	0:0	6	buf
water	22:32	0:0	6	)
op	22:33	0:0	6	-
water	22:34	0:0	6	1
arg	22:37	22:41	5	"%d"
water	22:37	0:0	6	"%d"
arg	22:43	22:51	5	scale->h
water	22:43	0:0	6	scale
op	22:48	0:0	6	->
water	22:50	0:0	6	h
water	22:52	0:0	4	;
call	23:8	23:37	4	av_opt_set
arg	23:19	23:24	5	scale
water	23:19	0:0	6	scale
arg	23:26	23:29	5	"h"
water	23:26	0:0	6	"h"
arg	23:31	23:34	5	buf
water	23:31	0:0	6	buf
arg	23:36	23:37	5	0
water	23:36	0:0	6	0
water	23:38	0:0	4	;
water	24:4	0:0	4	}
if	25:4	26:39	2	(! scale -> w_expr)
cond	25:8	25:16	3	! scale -> w_expr
op	25:8	0:0	4	!
water	25:9	0:0	4	scale
op	25:14	0:0	4	->
water	25:16	0:0	4	w_expr
stmts	26:8	26:39	3	
call	26:8	26:38	4	av_opt_set
arg	26:19	26:24	5	scale
water	26:19	0:0	6	scale
arg	26:26	26:29	5	"w"
water	26:26	0:0	6	"w"
arg	26:31	26:35	5	"iw"
water	26:31	0:0	6	"iw"
arg	26:37	26:38	5	0
water	26:37	0:0	6	0
water	26:39	0:0	4	;
if	27:4	28:39	2	(! scale -> h_expr)
cond	27:8	27:16	3	! scale -> h_expr
op	27:8	0:0	4	!
water	27:9	0:0	4	scale
op	27:14	0:0	4	->
water	27:16	0:0	4	h_expr
stmts	28:8	28:39	3	
call	28:8	28:38	4	av_opt_set
arg	28:19	28:24	5	scale
water	28:19	0:0	6	scale
arg	28:26	28:29	5	"h"
water	28:26	0:0	6	"h"
arg	28:31	28:35	5	"ih"
water	28:31	0:0	6	"ih"
arg	28:37	28:38	5	0
water	28:37	0:0	6	0
water	28:39	0:0	4	;
call	29:4	30:102	2	av_log
arg	29:11	29:14	3	ctx
water	29:11	0:0	4	ctx
arg	29:16	29:30	3	AV_LOG_VERBOSE
water	29:16	0:0	4	AV_LOG_VERBOSE
arg	29:32	29:66	3	"w:%s h:%s flags:'%s' interl:%d\n"
water	29:32	0:0	4	"w:%s h:%s flags:'%s' interl:%d\n"
arg	30:11	30:24	3	scale->w_expr
water	30:11	0:0	4	scale
op	30:16	0:0	4	->
water	30:18	0:0	4	w_expr
arg	30:26	30:39	3	scale->h_expr
water	30:26	0:0	4	scale
op	30:31	0:0	4	->
water	30:33	0:0	4	h_expr
arg	30:41	30:83	3	(char*)av_x_if_null(scale->flags_str,"")
water	30:41	0:0	4	(
water	30:42	0:0	4	char
op	30:47	0:0	4	*
water	30:48	0:0	4	)
call	30:49	30:82	4	av_x_if_null
arg	30:62	30:78	5	scale->flags_str
water	30:62	0:0	6	scale
op	30:67	0:0	6	->
water	30:69	0:0	6	flags_str
arg	30:80	30:82	5	""
water	30:80	0:0	6	""
arg	30:85	30:102	3	scale->interlaced
water	30:85	0:0	4	scale
op	30:90	0:0	4	->
water	30:92	0:0	4	interlaced
water	30:103	0:0	2	;
water	31:4	0:0	2	scale
op	31:9	0:0	2	->
water	31:11	0:0	2	flags
op	31:17	0:0	2	=
water	31:19	0:0	2	0
water	31:20	0:0	2	;
if	32:4	39:4	2	(scale -> flags_str)
cond	32:8	32:15	3	scale -> flags_str
water	32:8	0:0	4	scale
op	32:13	0:0	4	->
water	32:15	0:0	4	flags_str
stmts	32:26	39:4	3	
water	32:26	0:0	4	{
water	33:8	0:0	4	const
water	33:14	0:0	4	AVClass
op	33:22	0:0	4	*
water	33:23	0:0	4	class
op	33:29	0:0	4	=
call	33:31	33:45	4	sws_get_class
water	33:46	0:0	4	;
decl	34:8	35:66	4	const AVOption	*o
op	34:29	0:0	4	=
call	34:31	35:65	5	av_opt_find
arg	34:43	34:49	6	&class
op	34:43	0:0	7	&
water	34:44	0:0	7	class
arg	34:51	34:62	6	"sws_flags"
water	34:51	0:0	7	"sws_flags"
arg	34:64	34:68	6	NULL
water	34:64	0:0	7	NULL
arg	34:70	34:71	6	0
water	34:70	0:0	7	0
arg	35:43	35:65	6	AV_OPT_SEARCH_FAKE_OBJ
water	35:43	0:0	7	AV_OPT_SEARCH_FAKE_OBJ
decl	36:8	36:79	4	int	ret
op	36:16	0:0	4	=
call	36:18	36:78	5	av_opt_eval_flags
arg	36:36	36:42	6	&class
op	36:36	0:0	7	&
water	36:37	0:0	7	class
arg	36:44	36:45	6	o
water	36:44	0:0	7	o
arg	36:47	36:63	6	scale->flags_str
water	36:47	0:0	7	scale
op	36:52	0:0	7	->
water	36:54	0:0	7	flags_str
arg	36:65	36:78	6	&scale->flags
op	36:65	0:0	7	&
water	36:66	0:0	7	scale
op	36:71	0:0	7	->
water	36:73	0:0	7	flags
if	37:8	38:22	4	(ret < 0)
cond	37:12	37:18	5	ret < 0
water	37:12	0:0	6	ret
op	37:16	0:0	6	<
water	37:18	0:0	6	0
stmts	38:12	38:22	5	
return	38:12	38:22	6	ret
water	38:19	0:0	7	ret
water	39:4	0:0	4	}
water	40:4	0:0	2	scale
op	40:9	0:0	2	->
water	40:11	0:0	2	opts
op	40:16	0:0	2	=
op	40:18	0:0	2	*
water	40:19	0:0	2	opts
water	40:23	0:0	2	;
op	41:4	0:0	2	*
water	41:5	0:0	2	opts
op	41:10	0:0	2	=
water	41:12	0:0	2	NULL
water	41:16	0:0	2	;
return	42:4	42:12	2	0
water	42:11	0:0	3	0
