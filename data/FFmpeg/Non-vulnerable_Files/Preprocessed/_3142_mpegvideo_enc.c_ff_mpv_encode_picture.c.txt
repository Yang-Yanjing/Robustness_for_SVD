func	1:0	201:0	0	int	ff_mpv_encode_picture
params	1:25	0:0	1	
param	1:26	1:47	2	AVCodecContext *	avctx
param	1:49	1:62	2	AVPacket *	pkt
param	2:26	2:48	2	const AVFrame *	pic_arg
param	2:50	2:65	2	int *	got_packet
stmnts	0:0	200:12	1	
decl	4:4	4:40	2	MpegEncContext	*s
op	4:22	0:0	2	=
water	4:24	0:0	2	avctx
op	4:29	0:0	2	->
water	4:31	0:0	2	priv_data
decl	5:4	5:30	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:30	2	int	stuffing_count
water	5:25	0:0	2	,
decl	5:4	5:30	2	int	ret
decl	6:4	6:46	2	int	context_count
op	6:22	0:0	2	=
water	6:24	0:0	2	s
op	6:25	0:0	2	->
water	6:27	0:0	2	slice_context_count
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	vbv_ignore_qmax
op	7:23	0:0	2	=
water	7:25	0:0	2	0
water	7:26	0:0	2	;
water	8:4	0:0	2	s
op	8:5	0:0	2	->
water	8:7	0:0	2	picture_in_gop_number
op	8:28	0:0	2	++
water	8:30	0:0	2	;
if	9:4	10:17	2	(load_input_picture (s ,pic_arg ) < 0)
cond	9:8	9:41	3	load_input_picture (s ,pic_arg ) < 0
call	9:8	9:37	4	load_input_picture
arg	9:27	9:28	5	s
water	9:27	0:0	6	s
arg	9:30	9:37	5	pic_arg
water	9:30	0:0	6	pic_arg
op	9:39	0:0	4	<
water	9:41	0:0	4	0
stmts	10:8	10:17	3	
return	10:8	10:17	4	-1
op	10:15	0:0	5	-
water	10:16	0:0	5	1
if	11:4	13:4	2	(select_input_picture (s ) < 0)
cond	11:8	11:34	3	select_input_picture (s ) < 0
call	11:8	11:30	4	select_input_picture
arg	11:29	11:30	5	s
water	11:29	0:0	6	s
op	11:32	0:0	4	<
water	11:34	0:0	4	0
stmts	11:37	13:4	3	
water	11:37	0:0	4	{
return	12:8	12:17	4	-1
op	12:15	0:0	5	-
water	12:16	0:0	5	1
water	13:4	0:0	4	}
if	15:4	189:4	2	(s -> new_picture . f -> data [ 0 ])
cond	15:8	15:32	3	s -> new_picture . f -> data [ 0 ]
water	15:8	0:0	4	s
op	15:9	0:0	4	->
water	15:11	0:0	4	new_picture
op	15:22	0:0	4	.
water	15:23	0:0	4	f
op	15:24	0:0	4	->
water	15:26	0:0	4	data
op	15:30	0:0	4	[
water	15:31	0:0	4	0
op	15:32	0:0	4	]
stmts	15:35	189:4	3	
water	15:35	0:0	4	{
decl	16:8	16:86	4	int	growing_buffer
op	16:27	0:0	4	=
water	16:29	0:0	4	context_count
op	16:43	0:0	4	==
water	16:46	0:0	4	1
op	16:48	0:0	4	&&
op	16:51	0:0	4	!
water	16:52	0:0	4	pkt
op	16:55	0:0	4	->
water	16:57	0:0	4	data
op	16:62	0:0	4	&&
op	16:65	0:0	4	!
water	16:66	0:0	4	s
op	16:67	0:0	4	->
water	16:69	0:0	4	data_partitioning
decl	17:8	19:95	4	int	pkt_size
op	17:21	0:0	4	=
water	17:23	0:0	4	growing_buffer
water	17:38	0:0	4	?
call	17:40	17:114	5	FFMAX
arg	17:46	17:79	6	s->mb_width*s->mb_height*64+10000
water	17:46	0:0	7	s
op	17:47	0:0	7	->
water	17:49	0:0	7	mb_width
op	17:57	0:0	7	*
water	17:58	0:0	7	s
op	17:59	0:0	7	->
water	17:61	0:0	7	mb_height
op	17:70	0:0	7	*
water	17:71	0:0	7	64
op	17:73	0:0	7	+
water	17:74	0:0	7	10000
arg	17:81	17:114	6	avctx->internal->byte_buffer_size
water	17:81	0:0	7	avctx
op	17:86	0:0	7	->
water	17:88	0:0	7	internal
op	17:96	0:0	7	->
water	17:98	0:0	7	byte_buffer_size
op	17:116	0:0	4	-
water	17:118	0:0	4	AV_INPUT_BUFFER_PADDING_SIZE
water	18:46	0:0	4	:
water	19:46	0:0	4	s
op	19:47	0:0	4	->
water	19:49	0:0	4	mb_width
op	19:57	0:0	4	*
water	19:58	0:0	4	s
op	19:59	0:0	4	->
water	19:61	0:0	4	mb_height
op	19:70	0:0	4	*
water	19:71	0:0	4	(
water	19:72	0:0	4	MAX_MB_BYTES
op	19:84	0:0	4	+
water	19:85	0:0	4	100
water	19:88	0:0	4	)
op	19:89	0:0	4	+
water	19:90	0:0	4	10000
if	20:8	21:22	4	(( ret =ff_alloc_packet2 (avctx ,pkt ,pkt_size ,0 ) ) < 0)
cond	20:12	20:64	5	( ret =ff_alloc_packet2 (avctx ,pkt ,pkt_size ,0 ) ) < 0
water	20:12	0:0	6	(
water	20:13	0:0	6	ret
op	20:17	0:0	6	=
call	20:19	20:59	6	ff_alloc_packet2
arg	20:36	20:41	7	avctx
water	20:36	0:0	8	avctx
arg	20:43	20:46	7	pkt
water	20:43	0:0	8	pkt
arg	20:48	20:56	7	pkt_size
water	20:48	0:0	8	pkt_size
arg	20:58	20:59	7	0
water	20:58	0:0	8	0
water	20:60	0:0	6	)
op	20:62	0:0	6	<
water	20:64	0:0	6	0
stmts	21:12	21:22	5	
return	21:12	21:22	6	ret
water	21:19	0:0	7	ret
if	22:8	27:8	4	(s -> mb_info)
cond	22:12	22:15	5	s -> mb_info
water	22:12	0:0	6	s
op	22:13	0:0	6	->
water	22:15	0:0	6	mb_info
stmts	22:24	27:8	5	
water	22:24	0:0	6	{
water	23:12	0:0	6	s
op	23:13	0:0	6	->
water	23:15	0:0	6	mb_info_ptr
op	23:27	0:0	6	=
call	23:29	25:60	6	av_packet_new_side_data
arg	23:53	23:56	7	pkt
water	23:53	0:0	8	pkt
arg	24:33	24:57	7	AV_PKT_DATA_H263_MB_INFO
water	24:33	0:0	8	AV_PKT_DATA_H263_MB_INFO
arg	25:33	25:60	7	s->mb_width*s->mb_height*12
water	25:33	0:0	8	s
op	25:34	0:0	8	->
water	25:36	0:0	8	mb_width
op	25:44	0:0	8	*
water	25:45	0:0	8	s
op	25:46	0:0	8	->
water	25:48	0:0	8	mb_height
op	25:57	0:0	8	*
water	25:58	0:0	8	12
water	25:61	0:0	6	;
water	26:12	0:0	6	s
op	26:13	0:0	6	->
water	26:15	0:0	6	prev_mb_info
op	26:28	0:0	6	=
water	26:30	0:0	6	s
op	26:31	0:0	6	->
water	26:33	0:0	6	last_mb_info
op	26:46	0:0	6	=
water	26:48	0:0	6	s
op	26:49	0:0	6	->
water	26:51	0:0	6	mb_info_size
op	26:64	0:0	6	=
water	26:66	0:0	6	0
water	26:67	0:0	6	;
water	27:8	0:0	6	}
for	28:8	35:8	4	(i = 0 ;i < context_count;i ++)
forinit	28:13	28:18	5	i = 0 ;
water	28:13	0:0	6	i
op	28:15	0:0	6	=
water	28:17	0:0	6	0
water	28:18	0:0	6	;
cond	28:20	28:24	5	i < context_count
water	28:20	0:0	6	i
op	28:22	0:0	6	<
water	28:24	0:0	6	context_count
forexpr	28:39	28:40	5	i ++
water	28:39	0:0	6	i
op	28:40	0:0	6	++
stmts	28:44	35:8	5	
water	28:44	0:0	6	{
decl	29:12	29:58	6	int	start_y
op	29:24	0:0	6	=
water	29:26	0:0	6	s
op	29:27	0:0	6	->
water	29:29	0:0	6	thread_context
op	29:43	0:0	6	[
water	29:44	0:0	6	i
op	29:45	0:0	6	]
op	29:46	0:0	6	->
water	29:48	0:0	6	start_mb_y
decl	30:12	30:58	6	int	end_y
op	30:24	0:0	6	=
water	30:26	0:0	6	s
op	30:27	0:0	6	->
water	30:29	0:0	6	thread_context
op	30:43	0:0	6	[
water	30:44	0:0	6	i
op	30:45	0:0	6	]
op	30:46	0:0	6	->
water	30:50	0:0	6	end_mb_y
decl	31:12	31:38	6	int	h
op	31:24	0:0	6	=
water	31:26	0:0	6	s
op	31:27	0:0	6	->
water	31:29	0:0	6	mb_height
decl	32:12	32:86	6	uint8_t	*start
op	32:27	0:0	6	=
water	32:29	0:0	6	pkt
op	32:32	0:0	6	->
water	32:34	0:0	6	data
op	32:39	0:0	6	+
call	32:41	32:85	7	(size_t)
arg	32:50	32:85	8	((int64_t)pkt->size)*start_y/h
water	32:50	0:0	9	(
water	32:51	0:0	9	(
water	32:52	0:0	9	int64_t
water	32:59	0:0	9	)
water	32:61	0:0	9	pkt
op	32:64	0:0	9	->
water	32:66	0:0	9	size
water	32:70	0:0	9	)
op	32:72	0:0	9	*
water	32:74	0:0	9	start_y
op	32:82	0:0	9	/
water	32:84	0:0	9	h
decl	33:12	33:86	6	uint8_t	*end
op	33:27	0:0	6	=
water	33:29	0:0	6	pkt
op	33:32	0:0	6	->
water	33:34	0:0	6	data
op	33:39	0:0	6	+
call	33:41	33:85	7	(size_t)
arg	33:50	33:85	8	((int64_t)pkt->size)*end_y/h
water	33:50	0:0	9	(
water	33:51	0:0	9	(
water	33:52	0:0	9	int64_t
water	33:59	0:0	9	)
water	33:61	0:0	9	pkt
op	33:64	0:0	9	->
water	33:66	0:0	9	size
water	33:70	0:0	9	)
op	33:72	0:0	9	*
water	33:76	0:0	9	end_y
op	33:82	0:0	9	/
water	33:84	0:0	9	h
call	34:12	34:71	6	init_put_bits
arg	34:26	34:51	7	&s->thread_context[i]->pb
op	34:26	0:0	8	&
water	34:27	0:0	8	s
op	34:28	0:0	8	->
water	34:30	0:0	8	thread_context
op	34:44	0:0	8	[
water	34:45	0:0	8	i
op	34:46	0:0	8	]
op	34:47	0:0	8	->
water	34:49	0:0	8	pb
arg	34:53	34:58	7	start
water	34:53	0:0	8	start
arg	34:60	34:71	7	end-start
water	34:60	0:0	8	end
op	34:64	0:0	8	-
water	34:66	0:0	8	start
water	34:72	0:0	6	;
water	35:8	0:0	6	}
water	36:8	0:0	4	s
op	36:9	0:0	4	->
water	36:11	0:0	4	pict_type
op	36:21	0:0	4	=
water	36:23	0:0	4	s
op	36:24	0:0	4	->
water	36:26	0:0	4	new_picture
op	36:37	0:0	4	.
water	36:38	0:0	4	f
op	36:39	0:0	4	->
water	36:41	0:0	4	pict_type
water	36:50	0:0	4	;
water	38:8	0:0	4	ret
op	38:12	0:0	4	=
call	38:14	38:27	4	frame_start
arg	38:26	38:27	5	s
water	38:26	0:0	6	s
water	38:28	0:0	4	;
if	39:8	40:22	4	(ret < 0)
cond	39:12	39:18	5	ret < 0
water	39:12	0:0	6	ret
op	39:16	0:0	6	<
water	39:18	0:0	6	0
stmts	40:12	40:22	5	
return	40:12	40:22	6	ret
water	40:19	0:0	7	ret
label	41:0	41:9	4	vbv_retry :
water	42:8	0:0	4	ret
op	42:12	0:0	4	=
call	42:14	42:49	4	encode_picture
arg	42:29	42:30	5	s
water	42:29	0:0	6	s
arg	42:32	42:49	5	s->picture_number
water	42:32	0:0	6	s
op	42:33	0:0	6	->
water	42:35	0:0	6	picture_number
water	42:50	0:0	4	;
if	43:8	47:8	4	(growing_buffer)
cond	43:12	43:12	5	growing_buffer
water	43:12	0:0	6	growing_buffer
stmts	43:28	47:8	5	
water	43:28	0:0	6	{
call	44:12	44:64	6	av_assert0
arg	44:23	44:64	7	s->pb.buf==avctx->internal->byte_buffer
water	44:23	0:0	8	s
op	44:24	0:0	8	->
water	44:26	0:0	8	pb
op	44:28	0:0	8	.
water	44:29	0:0	8	buf
op	44:33	0:0	8	==
water	44:36	0:0	8	avctx
op	44:41	0:0	8	->
water	44:43	0:0	8	internal
op	44:51	0:0	8	->
water	44:53	0:0	8	byte_buffer
water	44:65	0:0	6	;
water	45:12	0:0	6	pkt
op	45:15	0:0	6	->
water	45:17	0:0	6	data
op	45:22	0:0	6	=
water	45:24	0:0	6	s
op	45:25	0:0	6	->
water	45:27	0:0	6	pb
op	45:29	0:0	6	.
water	45:30	0:0	6	buf
water	45:33	0:0	6	;
water	46:12	0:0	6	pkt
op	46:15	0:0	6	->
water	46:17	0:0	6	size
op	46:22	0:0	6	=
water	46:24	0:0	6	avctx
op	46:29	0:0	6	->
water	46:31	0:0	6	internal
op	46:39	0:0	6	->
water	46:41	0:0	6	byte_buffer_size
water	46:57	0:0	6	;
water	47:8	0:0	6	}
if	48:8	49:21	4	(ret < 0)
cond	48:12	48:18	5	ret < 0
water	48:12	0:0	6	ret
op	48:16	0:0	6	<
water	48:18	0:0	6	0
stmts	49:12	49:21	5	
return	49:12	49:21	6	-1
op	49:19	0:0	7	-
water	49:20	0:0	7	1
water	50:8	0:0	4	avctx
op	50:13	0:0	4	->
water	50:15	0:0	4	header_bits
op	50:27	0:0	4	=
water	50:29	0:0	4	s
op	50:30	0:0	4	->
water	50:32	0:0	4	header_bits
water	50:43	0:0	4	;
water	51:8	0:0	4	avctx
op	51:13	0:0	4	->
water	51:15	0:0	4	mv_bits
op	51:27	0:0	4	=
water	51:29	0:0	4	s
op	51:30	0:0	4	->
water	51:32	0:0	4	mv_bits
water	51:39	0:0	4	;
water	52:8	0:0	4	avctx
op	52:13	0:0	4	->
water	52:15	0:0	4	misc_bits
op	52:27	0:0	4	=
water	52:29	0:0	4	s
op	52:30	0:0	4	->
water	52:32	0:0	4	misc_bits
water	52:41	0:0	4	;
water	53:8	0:0	4	avctx
op	53:13	0:0	4	->
water	53:15	0:0	4	i_tex_bits
op	53:27	0:0	4	=
water	53:29	0:0	4	s
op	53:30	0:0	4	->
water	53:32	0:0	4	i_tex_bits
water	53:42	0:0	4	;
water	54:8	0:0	4	avctx
op	54:13	0:0	4	->
water	54:15	0:0	4	p_tex_bits
op	54:27	0:0	4	=
water	54:29	0:0	4	s
op	54:30	0:0	4	->
water	54:32	0:0	4	p_tex_bits
water	54:42	0:0	4	;
water	55:8	0:0	4	avctx
op	55:13	0:0	4	->
water	55:15	0:0	4	i_count
op	55:27	0:0	4	=
water	55:29	0:0	4	s
op	55:30	0:0	4	->
water	55:32	0:0	4	i_count
water	55:39	0:0	4	;
water	57:8	0:0	4	avctx
op	57:13	0:0	4	->
water	57:15	0:0	4	p_count
op	57:27	0:0	4	=
water	57:29	0:0	4	s
op	57:30	0:0	4	->
water	57:32	0:0	4	mb_num
op	57:39	0:0	4	-
water	57:41	0:0	4	s
op	57:42	0:0	4	->
water	57:44	0:0	4	i_count
op	57:52	0:0	4	-
water	57:54	0:0	4	s
op	57:55	0:0	4	->
water	57:57	0:0	4	skip_count
water	57:67	0:0	4	;
water	58:8	0:0	4	avctx
op	58:13	0:0	4	->
water	58:15	0:0	4	skip_count
op	58:27	0:0	4	=
water	58:29	0:0	4	s
op	58:30	0:0	4	->
water	58:32	0:0	4	skip_count
water	58:42	0:0	4	;
call	59:8	59:19	4	frame_end
arg	59:18	59:19	5	s
water	59:18	0:0	6	s
water	59:20	0:0	4	;
if	60:8	61:67	4	(CONFIG_MJPEG_ENCODER && s -> out_format == FMT_MJPEG)
cond	60:12	60:53	5	CONFIG_MJPEG_ENCODER && s -> out_format == FMT_MJPEG
water	60:12	0:0	6	CONFIG_MJPEG_ENCODER
op	60:33	0:0	6	&&
water	60:36	0:0	6	s
op	60:37	0:0	6	->
water	60:39	0:0	6	out_format
op	60:50	0:0	6	==
water	60:53	0:0	6	FMT_MJPEG
stmts	61:12	61:67	5	
call	61:12	61:66	6	ff_mjpeg_encode_picture_trailer
arg	61:44	61:50	7	&s->pb
op	61:44	0:0	8	&
water	61:45	0:0	8	s
op	61:46	0:0	8	->
water	61:48	0:0	8	pb
arg	61:52	61:66	7	s->header_bits
water	61:52	0:0	8	s
op	61:53	0:0	8	->
water	61:55	0:0	8	header_bits
water	61:67	0:0	6	;
if	62:8	98:8	4	(avctx -> rc_buffer_size)
cond	62:12	62:19	5	avctx -> rc_buffer_size
water	62:12	0:0	6	avctx
op	62:17	0:0	6	->
water	62:19	0:0	6	rc_buffer_size
stmts	62:35	98:8	5	
water	62:35	0:0	6	{
decl	63:12	63:52	6	RateControlContext	*rcc
op	63:36	0:0	6	=
op	63:38	0:0	6	&
water	63:39	0:0	6	s
op	63:40	0:0	6	->
water	63:42	0:0	6	rc_context
decl	64:12	64:110	6	int	max_size
op	64:25	0:0	6	=
call	64:27	64:109	7	FFMAX
arg	64:33	64:84	8	rcc->buffer_index*avctx->rc_max_available_vbv_use
water	64:33	0:0	9	rcc
op	64:36	0:0	9	->
water	64:38	0:0	9	buffer_index
op	64:51	0:0	9	*
water	64:53	0:0	9	avctx
op	64:58	0:0	9	->
water	64:60	0:0	9	rc_max_available_vbv_use
arg	64:86	64:109	8	rcc->buffer_index-500
water	64:86	0:0	9	rcc
op	64:89	0:0	9	->
water	64:91	0:0	9	buffer_index
op	64:104	0:0	9	-
water	64:106	0:0	9	500
if	65:12	96:12	6	(put_bits_count (& s -> pb ) > max_size && s -> lambda < s -> lmax)
cond	65:16	66:31	7	put_bits_count (& s -> pb ) > max_size && s -> lambda < s -> lmax
call	65:16	65:37	8	put_bits_count
arg	65:31	65:37	9	&s->pb
op	65:31	0:0	10	&
water	65:32	0:0	10	s
op	65:33	0:0	10	->
water	65:35	0:0	10	pb
op	65:39	0:0	8	>
water	65:41	0:0	8	max_size
op	65:50	0:0	8	&&
water	66:16	0:0	8	s
op	66:17	0:0	8	->
water	66:19	0:0	8	lambda
op	66:26	0:0	8	<
water	66:28	0:0	8	s
op	66:29	0:0	8	->
water	66:31	0:0	8	lmax
stmts	66:37	96:12	7	
water	66:37	0:0	8	{
water	67:16	0:0	8	s
op	67:17	0:0	8	->
water	67:19	0:0	8	next_lambda
op	67:31	0:0	8	=
call	67:33	68:66	8	FFMAX
arg	67:39	67:52	9	s->lambda+1
water	67:39	0:0	10	s
op	67:40	0:0	10	->
water	67:42	0:0	10	lambda
op	67:49	0:0	10	+
water	67:51	0:0	10	1
arg	67:54	68:66	9	s->lambda*(s->qscale+1)/s->qscale
water	67:54	0:0	10	s
op	67:55	0:0	10	->
water	67:57	0:0	10	lambda
op	67:64	0:0	10	*
water	68:39	0:0	10	(
water	68:40	0:0	10	s
op	68:41	0:0	10	->
water	68:43	0:0	10	qscale
op	68:50	0:0	10	+
water	68:52	0:0	10	1
water	68:53	0:0	10	)
op	68:55	0:0	10	/
water	68:57	0:0	10	s
op	68:58	0:0	10	->
water	68:60	0:0	10	qscale
water	68:67	0:0	8	;
if	69:16	76:16	8	(s -> adaptive_quant)
cond	69:20	69:23	9	s -> adaptive_quant
water	69:20	0:0	10	s
op	69:21	0:0	10	->
water	69:23	0:0	10	adaptive_quant
stmts	69:39	76:16	9	
water	69:39	0:0	10	{
decl	70:20	70:25	10	int	i
for	71:20	75:44	10	(i = 0 ;i < s -> mb_height * s -> mb_stride;i ++)
forinit	71:25	71:30	11	i = 0 ;
water	71:25	0:0	12	i
op	71:27	0:0	12	=
water	71:29	0:0	12	0
water	71:30	0:0	12	;
cond	71:32	71:54	11	i < s -> mb_height * s -> mb_stride
water	71:32	0:0	12	i
op	71:34	0:0	12	<
water	71:36	0:0	12	s
op	71:37	0:0	12	->
water	71:39	0:0	12	mb_height
op	71:49	0:0	12	*
water	71:51	0:0	12	s
op	71:52	0:0	12	->
water	71:54	0:0	12	mb_stride
forexpr	71:65	71:66	11	i ++
water	71:65	0:0	12	i
op	71:66	0:0	12	++
stmts	72:24	75:44	11	
water	72:24	0:0	12	s
op	72:25	0:0	12	->
water	72:27	0:0	12	lambda_table
op	72:39	0:0	12	[
water	72:40	0:0	12	i
op	72:41	0:0	12	]
op	72:43	0:0	12	=
call	73:28	75:43	12	FFMAX
arg	73:34	73:56	13	s->lambda_table[i]+1
water	73:34	0:0	14	s
op	73:35	0:0	14	->
water	73:37	0:0	14	lambda_table
op	73:49	0:0	14	[
water	73:50	0:0	14	i
op	73:51	0:0	14	]
op	73:53	0:0	14	+
water	73:55	0:0	14	1
arg	74:34	75:43	13	s->lambda_table[i]*(s->qscale+1)/s->qscale
water	74:34	0:0	14	s
op	74:35	0:0	14	->
water	74:37	0:0	14	lambda_table
op	74:49	0:0	14	[
water	74:50	0:0	14	i
op	74:51	0:0	14	]
op	74:53	0:0	14	*
water	74:55	0:0	14	(
water	74:56	0:0	14	s
op	74:57	0:0	14	->
water	74:59	0:0	14	qscale
op	74:66	0:0	14	+
water	74:68	0:0	14	1
water	74:69	0:0	14	)
op	74:71	0:0	14	/
water	75:34	0:0	14	s
op	75:35	0:0	14	->
water	75:37	0:0	14	qscale
water	75:44	0:0	12	;
water	76:16	0:0	10	}
water	77:16	0:0	8	s
op	77:17	0:0	8	->
water	77:19	0:0	8	mb_skipped
op	77:30	0:0	8	=
water	77:32	0:0	8	0
water	77:33	0:0	8	;
if	79:16	84:16	8	(s -> pict_type == AV_PICTURE_TYPE_P)
cond	79:20	79:36	9	s -> pict_type == AV_PICTURE_TYPE_P
water	79:20	0:0	10	s
op	79:21	0:0	10	->
water	79:23	0:0	10	pict_type
op	79:33	0:0	10	==
water	79:36	0:0	10	AV_PICTURE_TYPE_P
stmts	79:55	84:16	9	
water	79:55	0:0	10	{
if	80:20	83:43	10	(s -> flipflop_rounding || s -> codec_id == AV_CODEC_ID_H263P || s -> codec_id == AV_CODEC_ID_MPEG4)
cond	80:24	82:39	11	s -> flipflop_rounding || s -> codec_id == AV_CODEC_ID_H263P || s -> codec_id == AV_CODEC_ID_MPEG4
water	80:24	0:0	12	s
op	80:25	0:0	12	->
water	80:27	0:0	12	flipflop_rounding
op	80:54	0:0	12	||
water	81:24	0:0	12	s
op	81:25	0:0	12	->
water	81:27	0:0	12	codec_id
op	81:36	0:0	12	==
water	81:39	0:0	12	AV_CODEC_ID_H263P
op	81:57	0:0	12	||
water	82:24	0:0	12	s
op	82:25	0:0	12	->
water	82:27	0:0	12	codec_id
op	82:36	0:0	12	==
water	82:39	0:0	12	AV_CODEC_ID_MPEG4
stmts	83:24	83:43	11	
water	83:24	0:0	12	s
op	83:25	0:0	12	->
water	83:27	0:0	12	no_rounding
op	83:39	0:0	12	^=
water	83:42	0:0	12	1
water	83:43	0:0	12	;
water	84:16	0:0	10	}
if	85:16	88:16	8	(s -> pict_type != AV_PICTURE_TYPE_B)
cond	85:20	85:36	9	s -> pict_type != AV_PICTURE_TYPE_B
water	85:20	0:0	10	s
op	85:21	0:0	10	->
water	85:23	0:0	10	pict_type
op	85:33	0:0	10	!=
water	85:36	0:0	10	AV_PICTURE_TYPE_B
stmts	85:55	88:16	9	
water	85:55	0:0	10	{
water	86:20	0:0	10	s
op	86:21	0:0	10	->
water	86:23	0:0	10	time_base
op	86:39	0:0	10	=
water	86:41	0:0	10	s
op	86:42	0:0	10	->
water	86:44	0:0	10	last_time_base
water	86:58	0:0	10	;
water	87:20	0:0	10	s
op	87:21	0:0	10	->
water	87:23	0:0	10	last_non_b_time
op	87:39	0:0	10	=
water	87:41	0:0	10	s
op	87:42	0:0	10	->
water	87:44	0:0	10	time
op	87:49	0:0	10	-
water	87:51	0:0	10	s
op	87:52	0:0	10	->
water	87:54	0:0	10	pp_time
water	87:61	0:0	10	;
water	88:16	0:0	10	}
for	89:16	92:16	8	(i = 0 ;i < context_count;i ++)
forinit	89:21	89:26	9	i = 0 ;
water	89:21	0:0	10	i
op	89:23	0:0	10	=
water	89:25	0:0	10	0
water	89:26	0:0	10	;
cond	89:28	89:32	9	i < context_count
water	89:28	0:0	10	i
op	89:30	0:0	10	<
water	89:32	0:0	10	context_count
forexpr	89:47	89:48	9	i ++
water	89:47	0:0	10	i
op	89:48	0:0	10	++
stmts	89:52	92:16	9	
water	89:52	0:0	10	{
decl	90:20	90:65	10	PutBitContext	*pb
op	90:38	0:0	10	=
op	90:40	0:0	10	&
water	90:41	0:0	10	s
op	90:42	0:0	10	->
water	90:44	0:0	10	thread_context
op	90:58	0:0	10	[
water	90:59	0:0	10	i
op	90:60	0:0	10	]
op	90:61	0:0	10	->
water	90:63	0:0	10	pb
call	91:20	91:68	10	init_put_bits
arg	91:34	91:36	11	pb
water	91:34	0:0	12	pb
arg	91:38	91:45	11	pb->buf
water	91:38	0:0	12	pb
op	91:40	0:0	12	->
water	91:42	0:0	12	buf
arg	91:47	91:68	11	pb->buf_end-pb->buf
water	91:47	0:0	12	pb
op	91:49	0:0	12	->
water	91:51	0:0	12	buf_end
op	91:59	0:0	12	-
water	91:61	0:0	12	pb
op	91:63	0:0	12	->
water	91:65	0:0	12	buf
water	91:69	0:0	10	;
water	92:16	0:0	10	}
water	93:16	0:0	8	s
op	93:17	0:0	8	->
water	93:19	0:0	8	vbv_ignore_qmax
op	93:35	0:0	8	=
water	93:37	0:0	8	1
water	93:38	0:0	8	;
call	94:16	94:80	8	av_log
arg	94:23	94:31	9	s->avctx
water	94:23	0:0	10	s
op	94:24	0:0	10	->
water	94:26	0:0	10	avctx
arg	94:33	94:47	9	AV_LOG_VERBOSE
water	94:33	0:0	10	AV_LOG_VERBOSE
arg	94:49	94:80	9	"reencoding frame due to VBV\n"
water	94:49	0:0	10	"reencoding frame due to VBV\n"
water	94:81	0:0	8	;
goto	95:16	95:30	8	vbv_retry
water	95:21	0:0	9	vbv_retry
water	96:12	0:0	8	}
call	97:12	97:44	6	av_assert0
arg	97:23	97:44	7	s->avctx->rc_max_rate
water	97:23	0:0	8	s
op	97:24	0:0	8	->
water	97:26	0:0	8	avctx
op	97:31	0:0	8	->
water	97:33	0:0	8	rc_max_rate
water	97:45	0:0	6	;
water	98:8	0:0	6	}
if	99:8	100:35	4	(s -> avctx -> flags & AV_CODEC_FLAG_PASS1)
cond	99:12	99:30	5	s -> avctx -> flags & AV_CODEC_FLAG_PASS1
water	99:12	0:0	6	s
op	99:13	0:0	6	->
water	99:15	0:0	6	avctx
op	99:20	0:0	6	->
water	99:22	0:0	6	flags
op	99:28	0:0	6	&
water	99:30	0:0	6	AV_CODEC_FLAG_PASS1
stmts	100:12	100:35	5	
call	100:12	100:34	6	ff_write_pass1_stats
arg	100:33	100:34	7	s
water	100:33	0:0	8	s
water	100:35	0:0	6	;
for	101:8	106:8	4	(i = 0 ;i < 4;i ++)
forinit	101:13	101:18	5	i = 0 ;
water	101:13	0:0	6	i
op	101:15	0:0	6	=
water	101:17	0:0	6	0
water	101:18	0:0	6	;
cond	101:20	101:24	5	i < 4
water	101:20	0:0	6	i
op	101:22	0:0	6	<
water	101:24	0:0	6	4
forexpr	101:27	101:28	5	i ++
water	101:27	0:0	6	i
op	101:28	0:0	6	++
stmts	101:32	106:8	5	
water	101:32	0:0	6	{
water	102:12	0:0	6	s
op	102:13	0:0	6	->
water	102:15	0:0	6	current_picture_ptr
op	102:34	0:0	6	->
water	102:36	0:0	6	f
op	102:37	0:0	6	->
water	102:39	0:0	6	error
op	102:44	0:0	6	[
water	102:45	0:0	6	i
op	102:46	0:0	6	]
op	102:48	0:0	6	=
water	103:12	0:0	6	s
op	103:13	0:0	6	->
water	103:15	0:0	6	current_picture
op	103:30	0:0	6	.
water	103:31	0:0	6	f
op	103:32	0:0	6	->
water	103:34	0:0	6	error
op	103:39	0:0	6	[
water	103:40	0:0	6	i
op	103:41	0:0	6	]
op	103:43	0:0	6	=
water	104:16	0:0	6	s
op	104:17	0:0	6	->
water	104:19	0:0	6	current_picture
op	104:34	0:0	6	.
water	104:35	0:0	6	error
op	104:40	0:0	6	[
water	104:41	0:0	6	i
op	104:42	0:0	6	]
water	104:43	0:0	6	;
water	105:12	0:0	6	avctx
op	105:17	0:0	6	->
water	105:19	0:0	6	error
op	105:24	0:0	6	[
water	105:25	0:0	6	i
op	105:26	0:0	6	]
op	105:28	0:0	6	+=
water	105:31	0:0	6	s
op	105:32	0:0	6	->
water	105:34	0:0	6	current_picture_ptr
op	105:53	0:0	6	->
water	105:55	0:0	6	f
op	105:56	0:0	6	->
water	105:58	0:0	6	error
op	105:63	0:0	6	[
water	105:64	0:0	6	i
op	105:65	0:0	6	]
water	105:66	0:0	6	;
water	106:8	0:0	6	}
call	107:8	110:51	4	ff_side_data_set_encoder_stats
arg	107:39	107:42	5	pkt
water	107:39	0:0	6	pkt
arg	107:44	107:73	5	s->current_picture.f->quality
water	107:44	0:0	6	s
op	107:45	0:0	6	->
water	107:47	0:0	6	current_picture
op	107:62	0:0	6	.
water	107:63	0:0	6	f
op	107:64	0:0	6	->
water	107:66	0:0	6	quality
arg	108:39	108:71	5	s->current_picture_ptr->f->error
water	108:39	0:0	6	s
op	108:40	0:0	6	->
water	108:42	0:0	6	current_picture_ptr
op	108:61	0:0	6	->
water	108:63	0:0	6	f
op	108:64	0:0	6	->
water	108:66	0:0	6	error
arg	109:39	109:83	5	(s->avctx->flags&AV_CODEC_FLAG_PSNR)?4:0
water	109:39	0:0	6	(
water	109:40	0:0	6	s
op	109:41	0:0	6	->
water	109:43	0:0	6	avctx
op	109:48	0:0	6	->
water	109:50	0:0	6	flags
op	109:55	0:0	6	&
water	109:56	0:0	6	AV_CODEC_FLAG_PSNR
water	109:74	0:0	6	)
water	109:76	0:0	6	?
water	109:78	0:0	6	4
water	109:80	0:0	6	:
water	109:82	0:0	6	0
arg	110:39	110:51	5	s->pict_type
water	110:39	0:0	6	s
op	110:40	0:0	6	->
water	110:42	0:0	6	pict_type
water	110:52	0:0	4	;
if	111:8	114:46	4	(s -> avctx -> flags & AV_CODEC_FLAG_PASS1)
cond	111:12	111:30	5	s -> avctx -> flags & AV_CODEC_FLAG_PASS1
water	111:12	0:0	6	s
op	111:13	0:0	6	->
water	111:15	0:0	6	avctx
op	111:20	0:0	6	->
water	111:22	0:0	6	flags
op	111:28	0:0	6	&
water	111:30	0:0	6	AV_CODEC_FLAG_PASS1
stmts	112:12	114:46	5	
call	112:12	114:45	6	assert
arg	112:19	114:45	7	avctx->header_bits+avctx->mv_bits+avctx->misc_bits+avctx->i_tex_bits+avctx->p_tex_bits==put_bits_count(&s->pb)
water	112:19	0:0	8	avctx
op	112:24	0:0	8	->
water	112:26	0:0	8	header_bits
op	112:38	0:0	8	+
water	112:40	0:0	8	avctx
op	112:45	0:0	8	->
water	112:47	0:0	8	mv_bits
op	112:55	0:0	8	+
water	112:57	0:0	8	avctx
op	112:62	0:0	8	->
water	112:64	0:0	8	misc_bits
op	112:74	0:0	8	+
water	113:19	0:0	8	avctx
op	113:24	0:0	8	->
water	113:26	0:0	8	i_tex_bits
op	113:37	0:0	8	+
water	113:39	0:0	8	avctx
op	113:44	0:0	8	->
water	113:46	0:0	8	p_tex_bits
op	113:57	0:0	8	==
call	114:23	114:44	8	put_bits_count
arg	114:38	114:44	9	&s->pb
op	114:38	0:0	10	&
water	114:39	0:0	10	s
op	114:40	0:0	10	->
water	114:42	0:0	10	pb
water	114:46	0:0	6	;
call	115:8	115:29	4	flush_put_bits
arg	115:23	115:29	5	&s->pb
op	115:23	0:0	6	&
water	115:24	0:0	6	s
op	115:25	0:0	6	->
water	115:27	0:0	6	pb
water	115:30	0:0	4	;
water	116:8	0:0	4	s
op	116:9	0:0	4	->
water	116:11	0:0	4	frame_bits
op	116:23	0:0	4	=
call	116:25	116:46	4	put_bits_count
arg	116:40	116:46	5	&s->pb
op	116:40	0:0	6	&
water	116:41	0:0	6	s
op	116:42	0:0	6	->
water	116:44	0:0	6	pb
water	116:47	0:0	4	;
water	117:8	0:0	4	stuffing_count
op	117:23	0:0	4	=
call	117:25	117:55	4	ff_vbv_update
arg	117:39	117:40	5	s
water	117:39	0:0	6	s
arg	117:42	117:55	5	s->frame_bits
water	117:42	0:0	6	s
op	117:43	0:0	6	->
water	117:45	0:0	6	frame_bits
water	117:56	0:0	4	;
water	118:8	0:0	4	s
op	118:9	0:0	4	->
water	118:11	0:0	4	stuffing_bits
op	118:25	0:0	4	=
water	118:27	0:0	4	8
op	118:28	0:0	4	*
water	118:29	0:0	4	stuffing_count
water	118:43	0:0	4	;
if	119:8	145:8	4	(stuffing_count)
cond	119:12	119:12	5	stuffing_count
water	119:12	0:0	6	stuffing_count
stmts	119:28	145:8	5	
water	119:28	0:0	6	{
if	120:12	124:12	6	(s -> pb . buf_end - s -> pb . buf - (put_bits_count (& s -> pb ) >> 3 ) < stuffing_count + 50)
cond	120:16	121:37	7	s -> pb . buf_end - s -> pb . buf - (put_bits_count (& s -> pb ) >> 3 ) < stuffing_count + 50
water	120:16	0:0	8	s
op	120:17	0:0	8	->
water	120:19	0:0	8	pb
op	120:21	0:0	8	.
water	120:22	0:0	8	buf_end
op	120:30	0:0	8	-
water	120:32	0:0	8	s
op	120:33	0:0	8	->
water	120:35	0:0	8	pb
op	120:37	0:0	8	.
water	120:38	0:0	8	buf
op	120:42	0:0	8	-
water	120:44	0:0	8	(
call	120:45	120:66	8	put_bits_count
arg	120:60	120:66	9	&s->pb
op	120:60	0:0	10	&
water	120:61	0:0	10	s
op	120:62	0:0	10	->
water	120:64	0:0	10	pb
op	120:68	0:0	8	>>
water	120:71	0:0	8	3
water	120:72	0:0	8	)
op	120:74	0:0	8	<
water	121:20	0:0	8	stuffing_count
op	121:35	0:0	8	+
water	121:37	0:0	8	50
stmts	121:41	124:12	7	
water	121:41	0:0	8	{
call	122:16	122:69	8	av_log
arg	122:23	122:31	9	s->avctx
water	122:23	0:0	10	s
op	122:24	0:0	10	->
water	122:26	0:0	10	avctx
arg	122:33	122:45	9	AV_LOG_ERROR
water	122:33	0:0	10	AV_LOG_ERROR
arg	122:47	122:69	9	"stuffing too large\n"
water	122:47	0:0	10	"stuffing too large\n"
water	122:70	0:0	8	;
return	123:16	123:25	8	-1
op	123:23	0:0	9	-
water	123:24	0:0	9	1
water	124:12	0:0	8	}
switch	125:12	142:12	6	(s -> codec_id)
cond	125:20	125:23	7	s -> codec_id
water	125:20	0:0	8	s
op	125:21	0:0	8	->
water	125:23	0:0	8	codec_id
stmts	125:33	142:12	7	
water	125:33	0:0	8	{
label	126:12	126:39	8	case AV_CODEC_ID_MPEG1VIDEO :
label	127:12	127:39	8	case AV_CODEC_ID_MPEG2VIDEO :
while	128:16	130:16	8	(stuffing_count --)
cond	128:23	128:37	9	stuffing_count --
water	128:23	0:0	10	stuffing_count
op	128:37	0:0	10	--
stmts	128:41	130:16	9	
water	128:41	0:0	10	{
call	129:20	129:41	10	put_bits
arg	129:29	129:35	11	&s->pb
op	129:29	0:0	12	&
water	129:30	0:0	12	s
op	129:31	0:0	12	->
water	129:33	0:0	12	pb
arg	129:37	129:38	11	8
water	129:37	0:0	12	8
arg	129:40	129:41	11	0
water	129:40	0:0	12	0
water	129:42	0:0	10	;
water	130:16	0:0	10	}
break	131:12	131:17	8	
label	132:12	132:34	8	case AV_CODEC_ID_MPEG4 :
call	133:16	133:38	8	put_bits
arg	133:25	133:31	9	&s->pb
op	133:25	0:0	10	&
water	133:26	0:0	10	s
op	133:27	0:0	10	->
water	133:29	0:0	10	pb
arg	133:33	133:35	9	16
water	133:33	0:0	10	16
arg	133:37	133:38	9	0
water	133:37	0:0	10	0
water	133:39	0:0	8	;
call	134:16	134:42	8	put_bits
arg	134:25	134:31	9	&s->pb
op	134:25	0:0	10	&
water	134:26	0:0	10	s
op	134:27	0:0	10	->
water	134:29	0:0	10	pb
arg	134:33	134:35	9	16
water	134:33	0:0	10	16
arg	134:37	134:42	9	0x1C3
water	134:37	0:0	10	0
water	134:38	0:0	10	x1C3
water	134:43	0:0	8	;
water	135:16	0:0	8	stuffing_count
op	135:31	0:0	8	-=
water	135:34	0:0	8	4
water	135:35	0:0	8	;
while	136:16	138:16	8	(stuffing_count --)
cond	136:23	136:37	9	stuffing_count --
water	136:23	0:0	10	stuffing_count
op	136:37	0:0	10	--
stmts	136:41	138:16	9	
water	136:41	0:0	10	{
call	137:20	137:44	10	put_bits
arg	137:29	137:35	11	&s->pb
op	137:29	0:0	12	&
water	137:30	0:0	12	s
op	137:31	0:0	12	->
water	137:33	0:0	12	pb
arg	137:37	137:38	11	8
water	137:37	0:0	12	8
arg	137:40	137:44	11	0xFF
water	137:40	0:0	12	0
water	137:41	0:0	12	xFF
water	137:45	0:0	10	;
water	138:16	0:0	10	}
break	139:12	139:17	8	
label	140:12	140:19	8	default :
call	141:16	141:70	8	av_log
arg	141:23	141:31	9	s->avctx
water	141:23	0:0	10	s
op	141:24	0:0	10	->
water	141:26	0:0	10	avctx
arg	141:33	141:45	9	AV_LOG_ERROR
water	141:33	0:0	10	AV_LOG_ERROR
arg	141:47	141:70	9	"vbv buffer overflow\n"
water	141:47	0:0	10	"vbv buffer overflow\n"
water	141:71	0:0	8	;
water	142:12	0:0	8	}
call	143:12	143:33	6	flush_put_bits
arg	143:27	143:33	7	&s->pb
op	143:27	0:0	8	&
water	143:28	0:0	8	s
op	143:29	0:0	8	->
water	143:31	0:0	8	pb
water	143:34	0:0	6	;
water	144:12	0:0	6	s
op	144:13	0:0	6	->
water	144:15	0:0	6	frame_bits
op	144:27	0:0	6	=
call	144:29	144:50	6	put_bits_count
arg	144:44	144:50	7	&s->pb
op	144:44	0:0	8	&
water	144:45	0:0	8	s
op	144:46	0:0	8	->
water	144:48	0:0	8	pb
water	144:51	0:0	6	;
water	145:8	0:0	6	}
if	147:8	173:8	4	(s -> avctx -> rc_max_rate && s -> avctx -> rc_min_rate == s -> avctx -> rc_max_rate && s -> out_format == FMT_MPEG1 && 90000 LL * ( avctx -> rc_buffer_size - 1 ) <= s -> avctx -> rc_max_rate * 0 xFFFFLL)
cond	147:12	151:41	5	s -> avctx -> rc_max_rate && s -> avctx -> rc_min_rate == s -> avctx -> rc_max_rate && s -> out_format == FMT_MPEG1 && 90000 LL * ( avctx -> rc_buffer_size - 1 ) <= s -> avctx -> rc_max_rate * 0 xFFFFLL
water	147:12	0:0	6	s
op	147:13	0:0	6	->
water	147:15	0:0	6	avctx
op	147:20	0:0	6	->
water	147:22	0:0	6	rc_max_rate
op	147:59	0:0	6	&&
water	148:12	0:0	6	s
op	148:13	0:0	6	->
water	148:15	0:0	6	avctx
op	148:20	0:0	6	->
water	148:22	0:0	6	rc_min_rate
op	148:34	0:0	6	==
water	148:37	0:0	6	s
op	148:38	0:0	6	->
water	148:40	0:0	6	avctx
op	148:45	0:0	6	->
water	148:47	0:0	6	rc_max_rate
op	148:59	0:0	6	&&
water	149:12	0:0	6	s
op	149:13	0:0	6	->
water	149:15	0:0	6	out_format
op	149:26	0:0	6	==
water	149:29	0:0	6	FMT_MPEG1
op	149:59	0:0	6	&&
water	150:12	0:0	6	90000
water	150:17	0:0	6	LL
op	150:20	0:0	6	*
water	150:22	0:0	6	(
water	150:23	0:0	6	avctx
op	150:28	0:0	6	->
water	150:30	0:0	6	rc_buffer_size
op	150:45	0:0	6	-
water	150:47	0:0	6	1
water	150:48	0:0	6	)
op	150:50	0:0	6	<=
water	151:16	0:0	6	s
op	151:17	0:0	6	->
water	151:19	0:0	6	avctx
op	151:24	0:0	6	->
water	151:26	0:0	6	rc_max_rate
op	151:38	0:0	6	*
water	151:40	0:0	6	0
water	151:41	0:0	6	xFFFFLL
stmts	151:50	173:8	5	
water	151:50	0:0	6	{
decl	152:12	152:36	6	int	vbv_delay
water	152:25	0:0	6	,
decl	152:12	152:36	6	int	min_delay
decl	153:12	154:56	6	double	inbits
op	153:27	0:0	6	=
water	153:29	0:0	6	s
op	153:30	0:0	6	->
water	153:32	0:0	6	avctx
op	153:37	0:0	6	->
water	153:39	0:0	6	rc_max_rate
call	153:51	154:55	7	*av_q2d
arg	154:36	154:55	8	s->avctx->time_base
water	154:36	0:0	9	s
op	154:37	0:0	9	->
water	154:39	0:0	9	avctx
op	154:44	0:0	9	->
water	154:46	0:0	9	time_base
decl	155:12	156:63	6	int	minbits
op	155:27	0:0	6	=
water	155:29	0:0	6	s
op	155:30	0:0	6	->
water	155:32	0:0	6	frame_bits
op	155:43	0:0	6	-
water	155:45	0:0	6	8
op	155:47	0:0	6	*
water	156:29	0:0	6	(
water	156:30	0:0	6	s
op	156:31	0:0	6	->
water	156:33	0:0	6	vbv_delay_ptr
op	156:47	0:0	6	-
water	156:49	0:0	6	s
op	156:50	0:0	6	->
water	156:52	0:0	6	pb
op	156:54	0:0	6	.
water	156:55	0:0	6	buf
op	156:59	0:0	6	-
water	156:61	0:0	6	1
water	156:62	0:0	6	)
decl	157:12	157:74	6	double	bits
op	157:27	0:0	6	=
water	157:29	0:0	6	s
op	157:30	0:0	6	->
water	157:32	0:0	6	rc_context
op	157:42	0:0	6	.
water	157:43	0:0	6	buffer_index
op	157:56	0:0	6	+
water	157:58	0:0	6	minbits
op	157:66	0:0	6	-
water	157:68	0:0	6	inbits
if	158:12	160:57	6	(bits < 0)
cond	158:16	158:23	7	bits < 0
water	158:16	0:0	8	bits
op	158:21	0:0	8	<
water	158:23	0:0	8	0
stmts	159:16	160:57	7	
call	159:16	160:56	8	av_log
arg	159:23	159:31	9	s->avctx
water	159:23	0:0	10	s
op	159:24	0:0	10	->
water	159:26	0:0	10	avctx
arg	159:33	159:45	9	AV_LOG_ERROR
water	159:33	0:0	10	AV_LOG_ERROR
arg	160:23	160:56	9	"Internal error, negative bits\n"
water	160:23	0:0	10	"Internal error, negative bits\n"
water	160:57	0:0	8	;
call	161:12	161:45	6	assert
arg	161:19	161:45	7	s->repeat_first_field==0
water	161:19	0:0	8	s
op	161:20	0:0	8	->
water	161:22	0:0	8	repeat_first_field
op	161:41	0:0	8	==
water	161:44	0:0	8	0
water	161:46	0:0	6	;
water	162:12	0:0	6	vbv_delay
op	162:22	0:0	6	=
water	162:24	0:0	6	bits
op	162:29	0:0	6	*
water	162:31	0:0	6	90000
op	162:37	0:0	6	/
water	162:39	0:0	6	s
op	162:40	0:0	6	->
water	162:42	0:0	6	avctx
op	162:47	0:0	6	->
water	162:49	0:0	6	rc_max_rate
water	162:60	0:0	6	;
water	163:12	0:0	6	min_delay
op	163:22	0:0	6	=
water	163:24	0:0	6	(
water	163:25	0:0	6	minbits
op	163:33	0:0	6	*
water	163:35	0:0	6	90000
water	163:40	0:0	6	LL
op	163:43	0:0	6	+
water	163:45	0:0	6	s
op	163:46	0:0	6	->
water	163:48	0:0	6	avctx
op	163:53	0:0	6	->
water	163:55	0:0	6	rc_max_rate
op	163:67	0:0	6	-
water	163:69	0:0	6	1
water	163:70	0:0	6	)
op	163:72	0:0	6	/
water	164:24	0:0	6	s
op	164:25	0:0	6	->
water	164:27	0:0	6	avctx
op	164:32	0:0	6	->
water	164:34	0:0	6	rc_max_rate
water	164:45	0:0	6	;
water	165:12	0:0	6	vbv_delay
op	165:22	0:0	6	=
call	165:24	165:50	6	FFMAX
arg	165:30	165:39	7	vbv_delay
water	165:30	0:0	8	vbv_delay
arg	165:41	165:50	7	min_delay
water	165:41	0:0	8	min_delay
water	165:51	0:0	6	;
call	166:12	166:41	6	av_assert0
arg	166:23	166:41	7	vbv_delay<0xFFFF
water	166:23	0:0	8	vbv_delay
op	166:33	0:0	8	<
water	166:35	0:0	8	0
water	166:36	0:0	8	xFFFF
water	166:42	0:0	6	;
water	167:12	0:0	6	s
op	167:13	0:0	6	->
water	167:15	0:0	6	vbv_delay_ptr
op	167:28	0:0	6	[
water	167:29	0:0	6	0
op	167:30	0:0	6	]
op	167:32	0:0	6	&=
water	167:35	0:0	6	0
water	167:36	0:0	6	xF8
water	167:39	0:0	6	;
water	168:12	0:0	6	s
op	168:13	0:0	6	->
water	168:15	0:0	6	vbv_delay_ptr
op	168:28	0:0	6	[
water	168:29	0:0	6	0
op	168:30	0:0	6	]
op	168:32	0:0	6	|=
water	168:35	0:0	6	vbv_delay
op	168:45	0:0	6	>>
water	168:48	0:0	6	13
water	168:50	0:0	6	;
water	169:12	0:0	6	s
op	169:13	0:0	6	->
water	169:15	0:0	6	vbv_delay_ptr
op	169:28	0:0	6	[
water	169:29	0:0	6	1
op	169:30	0:0	6	]
op	169:33	0:0	6	=
water	169:35	0:0	6	vbv_delay
op	169:45	0:0	6	>>
water	169:48	0:0	6	5
water	169:49	0:0	6	;
water	170:12	0:0	6	s
op	170:13	0:0	6	->
water	170:15	0:0	6	vbv_delay_ptr
op	170:28	0:0	6	[
water	170:29	0:0	6	2
op	170:30	0:0	6	]
op	170:32	0:0	6	&=
water	170:35	0:0	6	0
water	170:36	0:0	6	x07
water	170:39	0:0	6	;
water	171:12	0:0	6	s
op	171:13	0:0	6	->
water	171:15	0:0	6	vbv_delay_ptr
op	171:28	0:0	6	[
water	171:29	0:0	6	2
op	171:30	0:0	6	]
op	171:32	0:0	6	|=
water	171:35	0:0	6	vbv_delay
op	171:45	0:0	6	<<
water	171:48	0:0	6	3
water	171:49	0:0	6	;
water	172:12	0:0	6	avctx
op	172:17	0:0	6	->
water	172:19	0:0	6	vbv_delay
op	172:33	0:0	6	=
water	172:35	0:0	6	vbv_delay
op	172:45	0:0	6	*
water	172:47	0:0	6	300
water	172:50	0:0	6	;
water	173:8	0:0	6	}
water	174:8	0:0	4	s
op	174:9	0:0	4	->
water	174:11	0:0	4	total_bits
op	174:26	0:0	4	+=
water	174:29	0:0	4	s
op	174:30	0:0	4	->
water	174:32	0:0	4	frame_bits
water	174:42	0:0	4	;
water	175:8	0:0	4	avctx
op	175:13	0:0	4	->
water	175:15	0:0	4	frame_bits
op	175:27	0:0	4	=
water	175:29	0:0	4	s
op	175:30	0:0	4	->
water	175:32	0:0	4	frame_bits
water	175:42	0:0	4	;
water	176:8	0:0	4	pkt
op	176:11	0:0	4	->
water	176:13	0:0	4	pts
op	176:17	0:0	4	=
water	176:19	0:0	4	s
op	176:20	0:0	4	->
water	176:22	0:0	4	current_picture
op	176:37	0:0	4	.
water	176:38	0:0	4	f
op	176:39	0:0	4	->
water	176:41	0:0	4	pts
water	176:44	0:0	4	;
if	177:8	183:8	4	(! s -> low_delay && s -> pict_type != AV_PICTURE_TYPE_B)
cond	177:12	177:45	5	! s -> low_delay && s -> pict_type != AV_PICTURE_TYPE_B
op	177:12	0:0	6	!
water	177:13	0:0	6	s
op	177:14	0:0	6	->
water	177:16	0:0	6	low_delay
op	177:26	0:0	6	&&
water	177:29	0:0	6	s
op	177:30	0:0	6	->
water	177:32	0:0	6	pict_type
op	177:42	0:0	6	!=
water	177:45	0:0	6	AV_PICTURE_TYPE_B
stmts	177:64	183:8	5	
water	177:64	0:0	6	{
if	178:12	179:50	6	(! s -> current_picture . f -> coded_picture_number)
cond	178:16	178:39	7	! s -> current_picture . f -> coded_picture_number
op	178:16	0:0	8	!
water	178:17	0:0	8	s
op	178:18	0:0	8	->
water	178:20	0:0	8	current_picture
op	178:35	0:0	8	.
water	178:36	0:0	8	f
op	178:37	0:0	8	->
water	178:39	0:0	8	coded_picture_number
stmts	179:16	179:50	7	
water	179:16	0:0	8	pkt
op	179:19	0:0	8	->
water	179:21	0:0	8	dts
op	179:25	0:0	8	=
water	179:27	0:0	8	pkt
op	179:30	0:0	8	->
water	179:32	0:0	8	pts
op	179:36	0:0	8	-
water	179:38	0:0	8	s
op	179:39	0:0	8	->
water	179:41	0:0	8	dts_delta
water	179:50	0:0	8	;
else	180:12	181:43	6
stmts	181:16	181:43	7	
water	181:16	0:0	8	pkt
op	181:19	0:0	8	->
water	181:21	0:0	8	dts
op	181:25	0:0	8	=
water	181:27	0:0	8	s
op	181:28	0:0	8	->
water	181:30	0:0	8	reordered_pts
water	181:43	0:0	8	;
water	182:12	0:0	6	s
op	182:13	0:0	6	->
water	182:15	0:0	6	reordered_pts
op	182:29	0:0	6	=
water	182:31	0:0	6	pkt
op	182:34	0:0	6	->
water	182:36	0:0	6	pts
water	182:39	0:0	6	;
water	183:8	0:0	6	}
else	183:10	184:31	4
stmts	184:12	184:31	5	
water	184:12	0:0	6	pkt
op	184:15	0:0	6	->
water	184:17	0:0	6	dts
op	184:21	0:0	6	=
water	184:23	0:0	6	pkt
op	184:26	0:0	6	->
water	184:28	0:0	6	pts
water	184:31	0:0	6	;
if	185:8	186:41	4	(s -> current_picture . f -> key_frame)
cond	185:12	185:34	5	s -> current_picture . f -> key_frame
water	185:12	0:0	6	s
op	185:13	0:0	6	->
water	185:15	0:0	6	current_picture
op	185:30	0:0	6	.
water	185:31	0:0	6	f
op	185:32	0:0	6	->
water	185:34	0:0	6	key_frame
stmts	186:12	186:41	5	
water	186:12	0:0	6	pkt
op	186:15	0:0	6	->
water	186:17	0:0	6	flags
op	186:23	0:0	6	|=
water	186:26	0:0	6	AV_PKT_FLAG_KEY
water	186:41	0:0	6	;
if	187:8	188:86	4	(s -> mb_info)
cond	187:12	187:15	5	s -> mb_info
water	187:12	0:0	6	s
op	187:13	0:0	6	->
water	187:15	0:0	6	mb_info
stmts	188:12	188:86	5	
call	188:12	188:85	6	av_packet_shrink_side_data
arg	188:39	188:42	7	pkt
water	188:39	0:0	8	pkt
arg	188:44	188:68	7	AV_PKT_DATA_H263_MB_INFO
water	188:44	0:0	8	AV_PKT_DATA_H263_MB_INFO
arg	188:70	188:85	7	s->mb_info_size
water	188:70	0:0	8	s
op	188:71	0:0	8	->
water	188:73	0:0	8	mb_info_size
water	188:86	0:0	6	;
water	189:4	0:0	4	}
else	189:6	191:4	2
stmts	189:11	191:4	3	
water	189:11	0:0	4	{
water	190:8	0:0	4	s
op	190:9	0:0	4	->
water	190:11	0:0	4	frame_bits
op	190:22	0:0	4	=
water	190:24	0:0	4	0
water	190:25	0:0	4	;
water	191:4	0:0	4	}
for	193:4	196:4	2	(i = 0 ;i < MAX_PICTURE_COUNT;i ++)
forinit	193:9	193:14	3	i = 0 ;
water	193:9	0:0	4	i
op	193:11	0:0	4	=
water	193:13	0:0	4	0
water	193:14	0:0	4	;
cond	193:16	193:20	3	i < MAX_PICTURE_COUNT
water	193:16	0:0	4	i
op	193:18	0:0	4	<
water	193:20	0:0	4	MAX_PICTURE_COUNT
forexpr	193:39	193:40	3	i ++
water	193:39	0:0	4	i
op	193:40	0:0	4	++
stmts	193:44	196:4	3	
water	193:44	0:0	4	{
if	194:8	195:59	4	(! s -> picture [ i ] . reference)
cond	194:12	194:27	5	! s -> picture [ i ] . reference
op	194:12	0:0	6	!
water	194:13	0:0	6	s
op	194:14	0:0	6	->
water	194:16	0:0	6	picture
op	194:23	0:0	6	[
water	194:24	0:0	6	i
op	194:25	0:0	6	]
op	194:26	0:0	6	.
water	194:27	0:0	6	reference
stmts	195:12	195:59	5	
call	195:12	195:58	6	ff_mpeg_unref_picture
arg	195:34	195:42	7	s->avctx
water	195:34	0:0	8	s
op	195:35	0:0	8	->
water	195:37	0:0	8	avctx
arg	195:44	195:58	7	&s->picture[i]
op	195:44	0:0	8	&
water	195:45	0:0	8	s
op	195:46	0:0	8	->
water	195:48	0:0	8	picture
op	195:55	0:0	8	[
water	195:56	0:0	8	i
op	195:57	0:0	8	]
water	195:59	0:0	6	;
water	196:4	0:0	4	}
call	197:4	197:39	2	av_assert1
arg	197:15	197:39	3	(s->frame_bits&7)==0
water	197:15	0:0	4	(
water	197:16	0:0	4	s
op	197:17	0:0	4	->
water	197:19	0:0	4	frame_bits
op	197:30	0:0	4	&
water	197:32	0:0	4	7
water	197:33	0:0	4	)
op	197:35	0:0	4	==
water	197:38	0:0	4	0
water	197:40	0:0	2	;
water	198:4	0:0	2	pkt
op	198:7	0:0	2	->
water	198:9	0:0	2	size
op	198:14	0:0	2	=
water	198:16	0:0	2	s
op	198:17	0:0	2	->
water	198:19	0:0	2	frame_bits
op	198:30	0:0	2	/
water	198:32	0:0	2	8
water	198:33	0:0	2	;
op	199:4	0:0	2	*
water	199:5	0:0	2	got_packet
op	199:16	0:0	2	=
op	199:18	0:0	2	!
op	199:19	0:0	2	!
water	199:20	0:0	2	pkt
op	199:23	0:0	2	->
water	199:25	0:0	2	size
water	199:29	0:0	2	;
return	200:4	200:12	2	0
water	200:11	0:0	3	0
