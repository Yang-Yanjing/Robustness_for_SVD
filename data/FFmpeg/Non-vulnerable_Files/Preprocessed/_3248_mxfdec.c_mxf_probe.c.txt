func	1:0	20:0	0	static int	mxf_probe
params	1:20	0:0	1	
param	1:21	1:35	2	AVProbeData *	p
stmnts	0:0	19:12	1	
decl	2:4	2:32	2	const uint8_t	*bufp
op	2:24	0:0	2	=
water	2:26	0:0	2	p
op	2:27	0:0	2	->
water	2:29	0:0	2	buf
decl	3:4	3:45	2	const uint8_t	*end
op	3:23	0:0	2	=
water	3:25	0:0	2	p
op	3:26	0:0	2	->
water	3:28	0:0	2	buf
op	3:32	0:0	2	+
water	3:34	0:0	2	p
op	3:35	0:0	2	->
water	3:37	0:0	2	buf_size
if	4:4	5:16	2	(p -> buf_size < sizeof ( mxf_header_partition_pack_key ))
cond	4:8	4:58	3	p -> buf_size < sizeof ( mxf_header_partition_pack_key )
water	4:8	0:0	4	p
op	4:9	0:0	4	->
water	4:11	0:0	4	buf_size
op	4:20	0:0	4	<
op	4:22	0:0	4	sizeof
water	4:28	0:0	4	(
water	4:29	0:0	4	mxf_header_partition_pack_key
water	4:58	0:0	4	)
stmts	5:8	5:16	3	
return	5:8	5:16	4	0
water	5:15	0:0	5	0
water	7:4	0:0	2	end
op	7:8	0:0	2	-=
op	7:11	0:0	2	sizeof
water	7:17	0:0	2	(
water	7:18	0:0	2	mxf_header_partition_pack_key
water	7:47	0:0	2	)
water	7:48	0:0	2	;
for	8:4	18:4	2	(;bufp < end;)
forinit	8:9	8:9	3	;
water	8:9	0:0	4	;
cond	8:11	8:18	3	bufp < end
water	8:11	0:0	4	bufp
op	8:16	0:0	4	<
water	8:18	0:0	4	end
forexpr	0:0	0:0	3	
stmts	8:24	18:4	3	
water	8:24	0:0	4	{
if	9:8	16:8	4	(! ( ( bufp [ 13 ] - 1 ) & 0 xF2 ))
cond	9:12	9:35	5	! ( ( bufp [ 13 ] - 1 ) & 0 xF2 )
op	9:12	0:0	6	!
water	9:13	0:0	6	(
water	9:14	0:0	6	(
water	9:15	0:0	6	bufp
op	9:19	0:0	6	[
water	9:20	0:0	6	13
op	9:22	0:0	6	]
op	9:24	0:0	6	-
water	9:26	0:0	6	1
water	9:27	0:0	6	)
op	9:29	0:0	6	&
water	9:31	0:0	6	0
water	9:32	0:0	6	xF2
water	9:35	0:0	6	)
stmts	9:37	16:8	5	
water	9:37	0:0	6	{
if	10:12	14:40	6	(AV_RN32 (bufp ) ==AV_RN32 (mxf_header_partition_pack_key ) &&AV_RN32 (bufp + 4 ) ==AV_RN32 (mxf_header_partition_pack_key + 4 ) &&AV_RN32 (bufp + 8 ) ==AV_RN32 (mxf_header_partition_pack_key + 8 ) &&AV_RN16 (bufp + 12 ) ==AV_RN16 (mxf_header_partition_pack_key + 12 ))
cond	10:16	13:76	7	AV_RN32 (bufp ) ==AV_RN32 (mxf_header_partition_pack_key ) &&AV_RN32 (bufp + 4 ) ==AV_RN32 (mxf_header_partition_pack_key + 4 ) &&AV_RN32 (bufp + 8 ) ==AV_RN32 (mxf_header_partition_pack_key + 8 ) &&AV_RN16 (bufp + 12 ) ==AV_RN16 (mxf_header_partition_pack_key + 12 )
call	10:16	10:31	8	AV_RN32
arg	10:24	10:31	9	bufp
water	10:24	0:0	10	bufp
op	10:33	0:0	8	==
call	10:36	10:76	8	AV_RN32
arg	10:44	10:76	9	mxf_header_partition_pack_key
water	10:44	0:0	10	mxf_header_partition_pack_key
op	10:78	0:0	8	&&
call	11:16	11:31	8	AV_RN32
arg	11:24	11:31	9	bufp+4
water	11:24	0:0	10	bufp
op	11:28	0:0	10	+
water	11:30	0:0	10	4
op	11:33	0:0	8	==
call	11:36	11:76	8	AV_RN32
arg	11:44	11:76	9	mxf_header_partition_pack_key+4
water	11:44	0:0	10	mxf_header_partition_pack_key
op	11:73	0:0	10	+
water	11:75	0:0	10	4
op	11:78	0:0	8	&&
call	12:16	12:31	8	AV_RN32
arg	12:24	12:31	9	bufp+8
water	12:24	0:0	10	bufp
op	12:28	0:0	10	+
water	12:30	0:0	10	8
op	12:33	0:0	8	==
call	12:36	12:76	8	AV_RN32
arg	12:44	12:76	9	mxf_header_partition_pack_key+8
water	12:44	0:0	10	mxf_header_partition_pack_key
op	12:73	0:0	10	+
water	12:75	0:0	10	8
op	12:78	0:0	8	&&
call	13:16	13:31	8	AV_RN16
arg	13:24	13:31	9	bufp+12
water	13:24	0:0	10	bufp
op	13:28	0:0	10	+
water	13:29	0:0	10	12
op	13:33	0:0	8	==
call	13:36	13:76	8	AV_RN16
arg	13:44	13:76	9	mxf_header_partition_pack_key+12
water	13:44	0:0	10	mxf_header_partition_pack_key
op	13:73	0:0	10	+
water	13:74	0:0	10	12
stmts	14:16	14:40	7	
return	14:16	14:40	8	AVPROBE_SCORE_MAX
water	14:23	0:0	9	AVPROBE_SCORE_MAX
water	15:12	0:0	6	bufp
op	15:17	0:0	6	++
water	15:19	0:0	6	;
water	16:8	0:0	6	}
else	16:10	17:22	4
stmts	17:12	17:22	5	
water	17:12	0:0	6	bufp
op	17:17	0:0	6	+=
water	17:20	0:0	6	10
water	17:22	0:0	6	;
water	18:4	0:0	4	}
return	19:4	19:12	2	0
water	19:11	0:0	3	0
