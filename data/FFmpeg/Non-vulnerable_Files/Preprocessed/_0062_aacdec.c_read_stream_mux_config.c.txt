func	1:0	68:0	0	static int	read_stream_mux_config
params	1:33	0:0	1	
param	1:34	1:61	2	struct LATMContext *	latmctx
param	2:34	2:51	2	GetBitContext *	gb
stmnts	0:0	67:12	1	
decl	4:4	4:48	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:48	2	int	audio_mux_version
op	4:31	0:0	2	=
call	4:33	4:47	3	get_bits
arg	4:42	4:44	4	gb
water	4:42	0:0	5	gb
arg	4:46	4:47	4	1
water	4:46	0:0	5	1
water	5:4	0:0	2	latmctx
op	5:11	0:0	2	->
water	5:13	0:0	2	audio_mux_version_A
op	5:33	0:0	2	=
water	5:35	0:0	2	0
water	5:36	0:0	2	;
if	6:4	7:54	2	(audio_mux_version)
cond	6:8	6:8	3	audio_mux_version
water	6:8	0:0	4	audio_mux_version
stmts	7:8	7:54	3	
water	7:8	0:0	4	latmctx
op	7:15	0:0	4	->
water	7:17	0:0	4	audio_mux_version_A
op	7:37	0:0	4	=
call	7:39	7:53	4	get_bits
arg	7:48	7:50	5	gb
water	7:48	0:0	6	gb
arg	7:52	7:53	5	1
water	7:52	0:0	6	1
water	7:54	0:0	4	;
if	8:4	66:4	2	(! latmctx -> audio_mux_version_A)
cond	8:8	8:18	3	! latmctx -> audio_mux_version_A
op	8:8	0:0	4	!
water	8:9	0:0	4	latmctx
op	8:16	0:0	4	->
water	8:18	0:0	4	audio_mux_version_A
stmts	8:39	66:4	3	
water	8:39	0:0	4	{
if	9:8	10:30	4	(audio_mux_version)
cond	9:12	9:12	5	audio_mux_version
water	9:12	0:0	6	audio_mux_version
stmts	10:12	10:30	5	
call	10:12	10:29	6	latm_get_value
arg	10:27	10:29	7	gb
water	10:27	0:0	8	gb
water	10:30	0:0	6	;
call	11:8	11:23	4	skip_bits
arg	11:18	11:20	5	gb
water	11:18	0:0	6	gb
arg	11:22	11:23	5	1
water	11:22	0:0	6	1
water	11:24	0:0	4	;
call	12:8	12:23	4	skip_bits
arg	12:18	12:20	5	gb
water	12:18	0:0	6	gb
arg	12:22	12:23	5	6
water	12:22	0:0	6	6
water	12:24	0:0	4	;
if	14:8	17:8	4	(get_bits (gb ,4 ))
cond	14:12	14:26	5	get_bits (gb ,4 )
call	14:12	14:26	6	get_bits
arg	14:21	14:23	7	gb
water	14:21	0:0	8	gb
arg	14:25	14:26	7	4
water	14:25	0:0	8	4
stmts	14:29	17:8	5	
water	14:29	0:0	6	{
call	15:12	15:77	6	avpriv_request_sample
arg	15:34	15:56	7	latmctx->aac_ctx.avctx
water	15:34	0:0	8	latmctx
op	15:41	0:0	8	->
water	15:43	0:0	8	aac_ctx
op	15:50	0:0	8	.
water	15:51	0:0	8	avctx
arg	15:58	15:77	7	"Multiple programs"
water	15:58	0:0	8	"Multiple programs"
water	15:78	0:0	6	;
return	16:12	16:39	6	AVERROR_PATCHWELCOME
water	16:19	0:0	7	AVERROR_PATCHWELCOME
water	17:8	0:0	6	}
if	20:8	23:8	4	(get_bits (gb ,3 ))
cond	20:12	20:26	5	get_bits (gb ,3 )
call	20:12	20:26	6	get_bits
arg	20:21	20:23	7	gb
water	20:21	0:0	8	gb
arg	20:25	20:26	7	3
water	20:25	0:0	8	3
stmts	20:29	23:8	5	
water	20:29	0:0	6	{
call	21:12	21:75	6	avpriv_request_sample
arg	21:34	21:56	7	latmctx->aac_ctx.avctx
water	21:34	0:0	8	latmctx
op	21:41	0:0	8	->
water	21:43	0:0	8	aac_ctx
op	21:50	0:0	8	.
water	21:51	0:0	8	avctx
arg	21:58	21:75	7	"Multiple layers"
water	21:58	0:0	8	"Multiple layers"
water	21:76	0:0	6	;
return	22:12	22:39	6	AVERROR_PATCHWELCOME
water	22:19	0:0	7	AVERROR_PATCHWELCOME
water	23:8	0:0	6	}
if	25:8	28:8	4	(! audio_mux_version)
cond	25:12	25:13	5	! audio_mux_version
op	25:12	0:0	6	!
water	25:13	0:0	6	audio_mux_version
stmts	25:32	28:8	5	
water	25:32	0:0	6	{
if	26:12	27:26	6	(( ret =latm_decode_audio_specific_config (latmctx ,gb ,0 ) ) < 0)
cond	26:16	26:76	7	( ret =latm_decode_audio_specific_config (latmctx ,gb ,0 ) ) < 0
water	26:16	0:0	8	(
water	26:17	0:0	8	ret
op	26:21	0:0	8	=
call	26:23	26:71	8	latm_decode_audio_specific_config
arg	26:57	26:64	9	latmctx
water	26:57	0:0	10	latmctx
arg	26:66	26:68	9	gb
water	26:66	0:0	10	gb
arg	26:70	26:71	9	0
water	26:70	0:0	10	0
water	26:72	0:0	8	)
op	26:74	0:0	8	<
water	26:76	0:0	8	0
stmts	27:16	27:26	7	
return	27:16	27:26	8	ret
water	27:23	0:0	9	ret
water	28:8	0:0	6	}
else	28:10	34:8	4
stmts	28:15	34:8	5	
water	28:15	0:0	6	{
decl	29:12	29:43	6	int	ascLen
op	29:23	0:0	6	=
call	29:25	29:42	7	latm_get_value
arg	29:40	29:42	8	gb
water	29:40	0:0	9	gb
if	30:12	31:26	6	(( ret =latm_decode_audio_specific_config (latmctx ,gb ,ascLen ) ) < 0)
cond	30:16	30:81	7	( ret =latm_decode_audio_specific_config (latmctx ,gb ,ascLen ) ) < 0
water	30:16	0:0	8	(
water	30:17	0:0	8	ret
op	30:21	0:0	8	=
call	30:23	30:76	8	latm_decode_audio_specific_config
arg	30:57	30:64	9	latmctx
water	30:57	0:0	10	latmctx
arg	30:66	30:68	9	gb
water	30:66	0:0	10	gb
arg	30:70	30:76	9	ascLen
water	30:70	0:0	10	ascLen
water	30:77	0:0	8	)
op	30:79	0:0	8	<
water	30:81	0:0	8	0
stmts	31:16	31:26	7	
return	31:16	31:26	8	ret
water	31:23	0:0	9	ret
water	32:12	0:0	6	ascLen
op	32:19	0:0	6	-=
water	32:22	0:0	6	ret
water	32:25	0:0	6	;
call	33:12	33:37	6	skip_bits_long
arg	33:27	33:29	7	gb
water	33:27	0:0	8	gb
arg	33:31	33:37	7	ascLen
water	33:31	0:0	8	ascLen
water	33:38	0:0	6	;
water	34:8	0:0	6	}
water	35:8	0:0	4	latmctx
op	35:15	0:0	4	->
water	35:17	0:0	4	frame_length_type
op	35:35	0:0	4	=
call	35:37	35:51	4	get_bits
arg	35:46	35:48	5	gb
water	35:46	0:0	6	gb
arg	35:50	35:51	5	3
water	35:50	0:0	6	3
water	35:52	0:0	4	;
switch	36:8	52:8	4	(latmctx -> frame_length_type)
cond	36:16	36:25	5	latmctx -> frame_length_type
water	36:16	0:0	6	latmctx
op	36:23	0:0	6	->
water	36:25	0:0	6	frame_length_type
stmts	36:44	52:8	5	
water	36:44	0:0	6	{
label	37:8	37:14	6	case 0 :
call	38:12	38:27	6	skip_bits
arg	38:22	38:24	7	gb
water	38:22	0:0	8	gb
arg	38:26	38:27	7	8
water	38:26	0:0	8	8
water	38:28	0:0	6	;
break	39:12	39:17	6	
label	40:8	40:14	6	case 1 :
water	41:12	0:0	6	latmctx
op	41:19	0:0	6	->
water	41:21	0:0	6	frame_length
op	41:34	0:0	6	=
call	41:36	41:50	6	get_bits
arg	41:45	41:47	7	gb
water	41:45	0:0	8	gb
arg	41:49	41:50	7	9
water	41:49	0:0	8	9
water	41:51	0:0	6	;
break	42:12	42:17	6	
label	43:8	43:14	6	case 3 :
label	44:8	44:14	6	case 4 :
label	45:8	45:14	6	case 5 :
call	46:12	46:27	6	skip_bits
arg	46:22	46:24	7	gb
water	46:22	0:0	8	gb
arg	46:26	46:27	7	6
water	46:26	0:0	8	6
water	46:28	0:0	6	;
break	47:12	47:17	6	
label	48:8	48:14	6	case 6 :
label	49:8	49:14	6	case 7 :
call	50:12	50:27	6	skip_bits
arg	50:22	50:24	7	gb
water	50:22	0:0	8	gb
arg	50:26	50:27	7	1
water	50:26	0:0	8	1
water	50:28	0:0	6	;
break	51:12	51:17	6	
water	52:8	0:0	6	}
if	53:8	63:8	4	(get_bits (gb ,1 ))
cond	53:12	53:26	5	get_bits (gb ,1 )
call	53:12	53:26	6	get_bits
arg	53:21	53:23	7	gb
water	53:21	0:0	8	gb
arg	53:25	53:26	7	1
water	53:25	0:0	8	1
stmts	53:29	63:8	5	
water	53:29	0:0	6	{
if	54:12	56:12	6	(audio_mux_version)
cond	54:16	54:16	7	audio_mux_version
water	54:16	0:0	8	audio_mux_version
stmts	54:35	56:12	7	
water	54:35	0:0	8	{
call	55:16	55:33	8	latm_get_value
arg	55:31	55:33	9	gb
water	55:31	0:0	10	gb
water	55:34	0:0	8	;
water	56:12	0:0	8	}
else	56:14	62:12	6
stmts	56:19	62:12	7	
water	56:19	0:0	8	{
decl	57:16	57:23	8	int	esc
do	58:16	61:16	8	(esc)
cond	61:25	61:25	9	esc
water	61:25	0:0	10	esc
stmts	58:19	61:16	9	
water	58:19	0:0	10	{
water	59:20	0:0	10	esc
op	59:24	0:0	10	=
call	59:26	59:40	10	get_bits
arg	59:35	59:37	11	gb
water	59:35	0:0	12	gb
arg	59:39	59:40	11	1
water	59:39	0:0	12	1
water	59:41	0:0	10	;
call	60:20	60:35	10	skip_bits
arg	60:30	60:32	11	gb
water	60:30	0:0	12	gb
arg	60:34	60:35	11	8
water	60:34	0:0	12	8
water	60:36	0:0	10	;
water	61:16	0:0	10	}
water	61:29	0:0	8	;
water	62:12	0:0	8	}
water	63:8	0:0	6	}
if	64:8	65:28	4	(get_bits (gb ,1 ))
cond	64:12	64:26	5	get_bits (gb ,1 )
call	64:12	64:26	6	get_bits
arg	64:21	64:23	7	gb
water	64:21	0:0	8	gb
arg	64:25	64:26	7	1
water	64:25	0:0	8	1
stmts	65:12	65:28	5	
call	65:12	65:27	6	skip_bits
arg	65:22	65:24	7	gb
water	65:22	0:0	8	gb
arg	65:26	65:27	7	8
water	65:26	0:0	8	8
water	65:28	0:0	6	;
water	66:4	0:0	4	}
return	67:4	67:12	2	0
water	67:11	0:0	3	0
