func	1:0	90:0	0	int	split_commandline
params	1:21	0:0	1	
param	1:22	1:46	2	OptionParseContext *	octx
param	1:48	1:56	2	int	argc
param	1:58	1:70	2	char *	argv[]
param	2:22	2:46	2	const OptionDef *	options
param	3:22	3:50	2	const OptionGroupDef *	groups
param	3:52	3:65	2	int	nb_groups
stmnts	0:0	89:12	1	
decl	5:4	5:20	2	int	optindex
op	5:17	0:0	2	=
water	5:19	0:0	2	1
decl	6:4	6:21	2	int	dashdash
op	6:17	0:0	2	=
op	6:19	0:0	2	-
water	6:20	0:0	2	2
call	8:4	8:38	2	prepare_app_arguments
arg	8:26	8:31	3	&argc
op	8:26	0:0	4	&
water	8:27	0:0	4	argc
arg	8:33	8:38	3	&argv
op	8:33	0:0	4	&
water	8:34	0:0	4	argv
water	8:39	0:0	2	;
call	9:4	9:46	2	init_parse_context
arg	9:23	9:27	3	octx
water	9:23	0:0	4	octx
arg	9:29	9:35	3	groups
water	9:29	0:0	4	groups
arg	9:37	9:46	3	nb_groups
water	9:37	0:0	4	nb_groups
water	9:47	0:0	2	;
call	10:4	10:61	2	av_log
arg	10:11	10:15	3	NULL
water	10:11	0:0	4	NULL
arg	10:17	10:29	3	AV_LOG_DEBUG
water	10:17	0:0	4	AV_LOG_DEBUG
arg	10:31	10:61	3	"Splitting the commandline.\n"
water	10:31	0:0	4	"Splitting the commandline.\n"
water	10:62	0:0	2	;
while	11:4	84:4	2	(optindex < argc)
cond	11:11	11:22	3	optindex < argc
water	11:11	0:0	4	optindex
op	11:20	0:0	4	<
water	11:22	0:0	4	argc
stmts	11:28	84:4	3	
water	11:28	0:0	4	{
decl	12:8	12:48	4	const char	*opt
op	12:24	0:0	4	=
water	12:26	0:0	4	argv
op	12:30	0:0	4	[
water	12:31	0:0	4	optindex
op	12:39	0:0	4	++
op	12:41	0:0	4	]
water	12:42	0:0	4	,
decl	12:8	12:48	4	const char	*arg
decl	13:8	13:27	4	const OptionDef	*po
decl	14:8	14:15	4	int	ret
call	15:8	15:65	4	av_log
arg	15:15	15:19	5	NULL
water	15:15	0:0	6	NULL
arg	15:21	15:33	5	AV_LOG_DEBUG
water	15:21	0:0	6	AV_LOG_DEBUG
arg	15:35	15:60	5	"Reading option '%s' ..."
water	15:35	0:0	6	"Reading option '%s' ..."
arg	15:62	15:65	5	opt
water	15:62	0:0	6	opt
water	15:66	0:0	4	;
if	16:8	19:8	4	(opt [ 0 ] == '-' && opt [ 1 ] == '-' && ! opt [ 2 ])
cond	16:12	16:52	5	opt [ 0 ] == '-' && opt [ 1 ] == '-' && ! opt [ 2 ]
water	16:12	0:0	6	opt
op	16:15	0:0	6	[
water	16:16	0:0	6	0
op	16:17	0:0	6	]
op	16:19	0:0	6	==
water	16:22	0:0	6	'-'
op	16:26	0:0	6	&&
water	16:29	0:0	6	opt
op	16:32	0:0	6	[
water	16:33	0:0	6	1
op	16:34	0:0	6	]
op	16:36	0:0	6	==
water	16:39	0:0	6	'-'
op	16:43	0:0	6	&&
op	16:46	0:0	6	!
water	16:47	0:0	6	opt
op	16:50	0:0	6	[
water	16:51	0:0	6	2
op	16:52	0:0	6	]
stmts	16:55	19:8	5	
water	16:55	0:0	6	{
water	17:12	0:0	6	dashdash
op	17:21	0:0	6	=
water	17:23	0:0	6	optindex
water	17:31	0:0	6	;
continue	18:12	18:20	6	
water	19:8	0:0	6	}
if	21:8	25:8	4	(opt [ 0 ] != '-' || ! opt [ 1 ] || dashdash + 1 == optindex)
cond	21:12	21:54	5	opt [ 0 ] != '-' || ! opt [ 1 ] || dashdash + 1 == optindex
water	21:12	0:0	6	opt
op	21:15	0:0	6	[
water	21:16	0:0	6	0
op	21:17	0:0	6	]
op	21:19	0:0	6	!=
water	21:22	0:0	6	'-'
op	21:26	0:0	6	||
op	21:29	0:0	6	!
water	21:30	0:0	6	opt
op	21:33	0:0	6	[
water	21:34	0:0	6	1
op	21:35	0:0	6	]
op	21:37	0:0	6	||
water	21:40	0:0	6	dashdash
op	21:48	0:0	6	+
water	21:49	0:0	6	1
op	21:51	0:0	6	==
water	21:54	0:0	6	optindex
stmts	21:64	25:8	5	
water	21:64	0:0	6	{
call	22:12	22:37	6	finish_group
arg	22:25	22:29	7	octx
water	22:25	0:0	8	octx
arg	22:31	22:32	7	0
water	22:31	0:0	8	0
arg	22:34	22:37	7	opt
water	22:34	0:0	8	opt
water	22:38	0:0	6	;
call	23:12	23:74	6	av_log
arg	23:19	23:23	7	NULL
water	23:19	0:0	8	NULL
arg	23:25	23:37	7	AV_LOG_DEBUG
water	23:25	0:0	8	AV_LOG_DEBUG
arg	23:39	23:58	7	" matched as %s.\n"
water	23:39	0:0	8	" matched as %s.\n"
arg	23:60	23:74	7	groups[0].name
water	23:60	0:0	8	groups
op	23:66	0:0	8	[
water	23:67	0:0	8	0
op	23:68	0:0	8	]
op	23:69	0:0	8	.
water	23:70	0:0	8	name
water	23:75	0:0	6	;
continue	24:12	24:20	6	
water	25:8	0:0	6	}
water	26:8	0:0	4	opt
op	26:11	0:0	4	++
water	26:13	0:0	4	;
do	28:0	34:0	4	(0)
cond	34:9	34:9	5	0
water	34:9	0:0	6	0
stmts	28:3	34:0	5	
water	28:3	0:0	6	{
water	29:4	0:0	6	arg
op	29:8	0:0	6	=
water	29:10	0:0	6	argv
op	29:14	0:0	6	[
water	29:15	0:0	6	optindex
op	29:23	0:0	6	++
op	29:25	0:0	6	]
water	29:26	0:0	6	;
if	30:4	33:4	6	(! arg)
cond	30:8	30:9	7	! arg
op	30:8	0:0	8	!
water	30:9	0:0	8	arg
stmts	30:14	33:4	7	
water	30:14	0:0	8	{
call	31:8	31:77	8	av_log
arg	31:15	31:19	9	NULL
water	31:15	0:0	10	NULL
arg	31:21	31:33	9	AV_LOG_ERROR
water	31:21	0:0	10	AV_LOG_ERROR
arg	31:35	31:72	9	"Missing argument for option '%s'.\n"
water	31:35	0:0	10	"Missing argument for option '%s'.\n"
arg	31:74	31:77	9	opt
water	31:74	0:0	10	opt
water	31:78	0:0	8	;
return	32:8	32:30	8	AVERROR(EINVAL)
call	32:15	32:29	9	AVERROR
arg	32:23	32:29	10	EINVAL
water	32:23	0:0	11	EINVAL
water	33:4	0:0	8	}
water	34:0	0:0	6	}
if	36:8	42:8	4	(( ret =match_group_separator (groups ,nb_groups ,opt ) ) >= 0)
cond	36:12	36:69	5	( ret =match_group_separator (groups ,nb_groups ,opt ) ) >= 0
water	36:12	0:0	6	(
water	36:13	0:0	6	ret
op	36:17	0:0	6	=
call	36:19	36:63	6	match_group_separator
arg	36:41	36:47	7	groups
water	36:41	0:0	8	groups
arg	36:49	36:58	7	nb_groups
water	36:49	0:0	8	nb_groups
arg	36:60	36:63	7	opt
water	36:60	0:0	8	opt
water	36:64	0:0	6	)
op	36:66	0:0	6	>=
water	36:69	0:0	6	0
stmts	36:72	42:8	5	
water	36:72	0:0	6	{
call	37:12	37:23	6	GET_ARG
arg	37:20	37:23	7	arg
water	37:20	0:0	8	arg
water	37:24	0:0	6	;
call	38:12	38:39	6	finish_group
arg	38:25	38:29	7	octx
water	38:25	0:0	8	octx
arg	38:31	38:34	7	ret
water	38:31	0:0	8	ret
arg	38:36	38:39	7	arg
water	38:36	0:0	8	arg
water	38:40	0:0	6	;
call	39:12	40:40	6	av_log
arg	39:19	39:23	7	NULL
water	39:19	0:0	8	NULL
arg	39:25	39:37	7	AV_LOG_DEBUG
water	39:25	0:0	8	AV_LOG_DEBUG
arg	39:39	39:77	7	" matched as %s with argument '%s'.\n"
water	39:39	0:0	8	" matched as %s with argument '%s'.\n"
arg	40:19	40:35	7	groups[ret].name
water	40:19	0:0	8	groups
op	40:25	0:0	8	[
water	40:26	0:0	8	ret
op	40:29	0:0	8	]
op	40:30	0:0	8	.
water	40:31	0:0	8	name
arg	40:37	40:40	7	arg
water	40:37	0:0	8	arg
water	40:41	0:0	6	;
continue	41:12	41:20	6	
water	42:8	0:0	6	}
water	44:8	0:0	4	po
op	44:11	0:0	4	=
call	44:13	44:37	4	find_option
arg	44:25	44:32	5	options
water	44:25	0:0	6	options
arg	44:34	44:37	5	opt
water	44:34	0:0	6	opt
water	44:38	0:0	4	;
if	45:8	58:8	4	(po -> name)
cond	45:12	45:16	5	po -> name
water	45:12	0:0	6	po
op	45:14	0:0	6	->
water	45:16	0:0	6	name
stmts	45:22	58:8	5	
water	45:22	0:0	6	{
if	46:12	49:12	6	(po -> flags & OPT_EXIT)
cond	46:16	46:28	7	po -> flags & OPT_EXIT
water	46:16	0:0	8	po
op	46:18	0:0	8	->
water	46:20	0:0	8	flags
op	46:26	0:0	8	&
water	46:28	0:0	8	OPT_EXIT
stmts	46:38	49:12	7	
water	46:38	0:0	8	{
water	48:16	0:0	8	arg
op	48:20	0:0	8	=
water	48:22	0:0	8	argv
op	48:26	0:0	8	[
water	48:27	0:0	8	optindex
op	48:35	0:0	8	++
op	48:37	0:0	8	]
water	48:38	0:0	8	;
water	49:12	0:0	8	}
else	49:14	51:12	6
stmts	49:19	51:12	7	
if	49:19	51:12	8	(po -> flags & HAS_ARG)
cond	49:23	49:35	9	po -> flags & HAS_ARG
water	49:23	0:0	10	po
op	49:25	0:0	10	->
water	49:27	0:0	10	flags
op	49:33	0:0	10	&
water	49:35	0:0	10	HAS_ARG
stmts	49:44	51:12	9	
water	49:44	0:0	10	{
call	50:16	50:27	10	GET_ARG
arg	50:24	50:27	11	arg
water	50:24	0:0	12	arg
water	50:28	0:0	10	;
water	51:12	0:0	10	}
else	51:14	53:12	6
stmts	51:19	53:12	7	
water	51:19	0:0	8	{
water	52:16	0:0	8	arg
op	52:20	0:0	8	=
water	52:22	0:0	8	"1"
water	52:25	0:0	8	;
water	53:12	0:0	8	}
call	54:12	54:38	6	add_opt
arg	54:20	54:24	7	octx
water	54:20	0:0	8	octx
arg	54:26	54:28	7	po
water	54:26	0:0	8	po
arg	54:30	54:33	7	opt
water	54:30	0:0	8	opt
arg	54:35	54:38	7	arg
water	54:35	0:0	8	arg
water	54:39	0:0	6	;
call	55:12	56:62	6	av_log
arg	55:19	55:23	7	NULL
water	55:19	0:0	8	NULL
arg	55:25	55:37	7	AV_LOG_DEBUG
water	55:25	0:0	8	AV_LOG_DEBUG
arg	55:39	56:37	7	" matched as option '%s' (%s) with ""argument '%s'.\n"
water	55:39	0:0	8	" matched as option '%s' (%s) with "
water	56:19	0:0	8	"argument '%s'.\n"
arg	56:39	56:47	7	po->name
water	56:39	0:0	8	po
op	56:41	0:0	8	->
water	56:43	0:0	8	name
arg	56:49	56:57	7	po->help
water	56:49	0:0	8	po
op	56:51	0:0	8	->
water	56:53	0:0	8	help
arg	56:59	56:62	7	arg
water	56:59	0:0	8	arg
water	56:63	0:0	6	;
continue	57:12	57:20	6	
water	58:8	0:0	6	}
if	60:8	72:8	4	(argv [ optindex ])
cond	60:12	60:25	5	argv [ optindex ]
water	60:12	0:0	6	argv
op	60:16	0:0	6	[
water	60:17	0:0	6	optindex
op	60:25	0:0	6	]
stmts	60:28	72:8	5	
water	60:28	0:0	6	{
water	61:12	0:0	6	ret
op	61:16	0:0	6	=
call	61:18	61:55	6	opt_default
arg	61:30	61:34	7	NULL
water	61:30	0:0	8	NULL
arg	61:36	61:39	7	opt
water	61:36	0:0	8	opt
arg	61:41	61:55	7	argv[optindex]
water	61:41	0:0	8	argv
op	61:45	0:0	8	[
water	61:46	0:0	8	optindex
op	61:54	0:0	8	]
water	61:56	0:0	6	;
if	62:12	67:12	6	(ret >= 0)
cond	62:16	62:23	7	ret >= 0
water	62:16	0:0	8	ret
op	62:20	0:0	8	>=
water	62:23	0:0	8	0
stmts	62:26	67:12	7	
water	62:26	0:0	8	{
call	63:16	64:62	8	av_log
arg	63:23	63:27	9	NULL
water	63:23	0:0	10	NULL
arg	63:29	63:41	9	AV_LOG_DEBUG
water	63:29	0:0	10	AV_LOG_DEBUG
arg	63:43	64:41	9	" matched as AVOption '%s' with ""argument '%s'.\n"
water	63:43	0:0	10	" matched as AVOption '%s' with "
water	64:23	0:0	10	"argument '%s'.\n"
arg	64:43	64:46	9	opt
water	64:43	0:0	10	opt
arg	64:48	64:62	9	argv[optindex]
water	64:48	0:0	10	argv
op	64:52	0:0	10	[
water	64:53	0:0	10	optindex
op	64:61	0:0	10	]
water	64:63	0:0	8	;
water	65:16	0:0	8	optindex
op	65:24	0:0	8	++
water	65:26	0:0	8	;
continue	66:16	66:24	8	
water	67:12	0:0	8	}
else	67:14	71:12	6
stmts	67:19	71:12	7	
if	67:19	71:12	8	(ret != AVERROR_OPTION_NOT_FOUND)
cond	67:23	67:30	9	ret != AVERROR_OPTION_NOT_FOUND
water	67:23	0:0	10	ret
op	67:27	0:0	10	!=
water	67:30	0:0	10	AVERROR_OPTION_NOT_FOUND
stmts	67:56	71:12	9	
water	67:56	0:0	10	{
call	68:16	69:67	10	av_log
arg	68:23	68:27	11	NULL
water	68:23	0:0	12	NULL
arg	68:29	68:41	11	AV_LOG_ERROR
water	68:29	0:0	12	AV_LOG_ERROR
arg	68:43	69:46	11	"Error parsing option '%s' ""with argument '%s'.\n"
water	68:43	0:0	12	"Error parsing option '%s' "
water	69:23	0:0	12	"with argument '%s'.\n"
arg	69:48	69:51	11	opt
water	69:48	0:0	12	opt
arg	69:53	69:67	11	argv[optindex]
water	69:53	0:0	12	argv
op	69:57	0:0	12	[
water	69:58	0:0	12	optindex
op	69:66	0:0	12	]
water	69:68	0:0	10	;
return	70:16	70:26	10	ret
water	70:23	0:0	11	ret
water	71:12	0:0	10	}
water	72:8	0:0	6	}
if	74:8	81:8	4	(opt [ 0 ] == 'n' && opt [ 1 ] == 'o' && ( po =find_option (options ,opt + 2 ) ) && po -> name && po -> flags & OPT_BOOL)
cond	74:12	76:36	5	opt [ 0 ] == 'n' && opt [ 1 ] == 'o' && ( po =find_option (options ,opt + 2 ) ) && po -> name && po -> flags & OPT_BOOL
water	74:12	0:0	6	opt
op	74:15	0:0	6	[
water	74:16	0:0	6	0
op	74:17	0:0	6	]
op	74:19	0:0	6	==
water	74:22	0:0	6	'n'
op	74:26	0:0	6	&&
water	74:29	0:0	6	opt
op	74:32	0:0	6	[
water	74:33	0:0	6	1
op	74:34	0:0	6	]
op	74:36	0:0	6	==
water	74:39	0:0	6	'o'
op	74:43	0:0	6	&&
water	75:12	0:0	6	(
water	75:13	0:0	6	po
op	75:16	0:0	6	=
call	75:18	75:46	6	find_option
arg	75:30	75:37	7	options
water	75:30	0:0	8	options
arg	75:39	75:46	7	opt+2
water	75:39	0:0	8	opt
op	75:43	0:0	8	+
water	75:45	0:0	8	2
water	75:47	0:0	6	)
op	75:49	0:0	6	&&
water	76:12	0:0	6	po
op	76:14	0:0	6	->
water	76:16	0:0	6	name
op	76:21	0:0	6	&&
water	76:24	0:0	6	po
op	76:26	0:0	6	->
water	76:28	0:0	6	flags
op	76:34	0:0	6	&
water	76:36	0:0	6	OPT_BOOL
stmts	76:46	81:8	5	
water	76:46	0:0	6	{
call	77:12	77:38	6	add_opt
arg	77:20	77:24	7	octx
water	77:20	0:0	8	octx
arg	77:26	77:28	7	po
water	77:26	0:0	8	po
arg	77:30	77:33	7	opt
water	77:30	0:0	8	opt
arg	77:35	77:38	7	"0"
water	77:35	0:0	8	"0"
water	77:39	0:0	6	;
call	78:12	79:54	6	av_log
arg	78:19	78:23	7	NULL
water	78:19	0:0	8	NULL
arg	78:25	78:37	7	AV_LOG_DEBUG
water	78:25	0:0	8	AV_LOG_DEBUG
arg	78:39	79:34	7	" matched as option '%s' (%s) with ""argument 0.\n"
water	78:39	0:0	8	" matched as option '%s' (%s) with "
water	79:19	0:0	8	"argument 0.\n"
arg	79:36	79:44	7	po->name
water	79:36	0:0	8	po
op	79:38	0:0	8	->
water	79:40	0:0	8	name
arg	79:46	79:54	7	po->help
water	79:46	0:0	8	po
op	79:48	0:0	8	->
water	79:50	0:0	8	help
water	79:55	0:0	6	;
continue	80:12	80:20	6	
water	81:8	0:0	6	}
call	82:8	82:69	4	av_log
arg	82:15	82:19	5	NULL
water	82:15	0:0	6	NULL
arg	82:21	82:33	5	AV_LOG_ERROR
water	82:21	0:0	6	AV_LOG_ERROR
arg	82:35	82:64	5	"Unrecognized option '%s'.\n"
water	82:35	0:0	6	"Unrecognized option '%s'.\n"
arg	82:66	82:69	5	opt
water	82:66	0:0	6	opt
water	82:70	0:0	4	;
return	83:8	83:39	4	AVERROR_OPTION_NOT_FOUND
water	83:15	0:0	5	AVERROR_OPTION_NOT_FOUND
water	84:4	0:0	4	}
if	85:4	87:32	2	(octx -> cur_group . nb_opts || codec_opts || format_opts || resample_opts)
cond	85:8	85:64	3	octx -> cur_group . nb_opts || codec_opts || format_opts || resample_opts
water	85:8	0:0	4	octx
op	85:12	0:0	4	->
water	85:14	0:0	4	cur_group
op	85:23	0:0	4	.
water	85:24	0:0	4	nb_opts
op	85:32	0:0	4	||
water	85:35	0:0	4	codec_opts
op	85:46	0:0	4	||
water	85:49	0:0	4	format_opts
op	85:61	0:0	4	||
water	85:64	0:0	4	resample_opts
stmts	86:8	87:32	3	
call	86:8	87:31	4	av_log
arg	86:15	86:19	5	NULL
water	86:15	0:0	6	NULL
arg	86:21	86:35	5	AV_LOG_WARNING
water	86:21	0:0	6	AV_LOG_WARNING
arg	86:37	87:31	5	"Trailing options were found on the ""commandline.\n"
water	86:37	0:0	6	"Trailing options were found on the "
water	87:15	0:0	6	"commandline.\n"
water	87:32	0:0	4	;
call	88:4	88:70	2	av_log
arg	88:11	88:15	3	NULL
water	88:11	0:0	4	NULL
arg	88:17	88:29	3	AV_LOG_DEBUG
water	88:17	0:0	4	AV_LOG_DEBUG
arg	88:31	88:70	3	"Finished splitting the commandline.\n"
water	88:31	0:0	4	"Finished splitting the commandline.\n"
water	88:71	0:0	2	;
return	89:4	89:12	2	0
water	89:11	0:0	3	0
