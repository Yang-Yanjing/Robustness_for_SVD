func	1:0	42:0	0	static int	pulse_write_packet
params	1:29	0:0	1	
param	1:30	1:48	2	AVFormatContext *	h
param	1:50	1:63	2	AVPacket *	pkt
stmnts	0:0	41:27	1	
decl	3:4	3:31	2	PulseData	*s
op	3:17	0:0	2	=
water	3:19	0:0	2	h
op	3:20	0:0	2	->
water	3:22	0:0	2	priv_data
decl	4:4	4:11	2	int	ret
decl	5:4	5:25	2	int64_t	writable_size
if	6:4	7:36	2	(! pkt)
cond	6:8	6:9	3	! pkt
op	6:8	0:0	4	!
water	6:9	0:0	4	pkt
stmts	7:8	7:36	3	
return	7:8	7:36	4	pulse_flash_stream(s)
call	7:15	7:35	5	pulse_flash_stream
arg	7:34	7:35	6	s
water	7:34	0:0	7	s
if	8:4	9:31	2	(pkt -> dts != AV_NOPTS_VALUE)
cond	8:8	8:20	3	pkt -> dts != AV_NOPTS_VALUE
water	8:8	0:0	4	pkt
op	8:11	0:0	4	->
water	8:13	0:0	4	dts
op	8:17	0:0	4	!=
water	8:20	0:0	4	AV_NOPTS_VALUE
stmts	9:8	9:31	3	
water	9:8	0:0	4	s
op	9:9	0:0	4	->
water	9:11	0:0	4	timestamp
op	9:21	0:0	4	=
water	9:23	0:0	4	pkt
op	9:26	0:0	4	->
water	9:28	0:0	4	dts
water	9:31	0:0	4	;
if	10:4	12:4	2	(pkt -> duration)
cond	10:8	10:13	3	pkt -> duration
water	10:8	0:0	4	pkt
op	10:11	0:0	4	->
water	10:13	0:0	4	duration
stmts	10:23	12:4	3	
water	10:23	0:0	4	{
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	timestamp
op	11:21	0:0	4	+=
water	11:24	0:0	4	pkt
op	11:27	0:0	4	->
water	11:29	0:0	4	duration
water	11:37	0:0	4	;
water	12:4	0:0	4	}
else	12:6	18:4	2
stmts	12:11	18:4	3	
water	12:11	0:0	4	{
decl	13:8	13:36	4	AVStream	*st
op	13:21	0:0	4	=
water	13:23	0:0	4	h
op	13:24	0:0	4	->
water	13:26	0:0	4	streams
op	13:33	0:0	4	[
water	13:34	0:0	4	0
op	13:35	0:0	4	]
decl	14:8	14:45	4	AVCodecContext	*codec_ctx
op	14:34	0:0	4	=
water	14:36	0:0	4	st
op	14:38	0:0	4	->
water	14:40	0:0	4	codec
decl	15:8	15:52	4	AVRational	r
op	15:21	0:0	4	=
water	15:23	0:0	4	{
water	15:25	0:0	4	1
water	15:26	0:0	4	,
water	15:28	0:0	4	codec_ctx
op	15:37	0:0	4	->
water	15:39	0:0	4	sample_rate
water	15:51	0:0	4	}
decl	16:8	16:108	4	int64_t	samples
op	16:24	0:0	4	=
water	16:26	0:0	4	pkt
op	16:29	0:0	4	->
water	16:31	0:0	4	size
op	16:36	0:0	4	/
water	16:38	0:0	4	(
call	16:39	16:84	5	av_get_bytes_per_sample
arg	16:63	16:84	6	codec_ctx->sample_fmt
water	16:63	0:0	7	codec_ctx
op	16:72	0:0	7	->
water	16:74	0:0	7	sample_fmt
op	16:86	0:0	4	*
water	16:88	0:0	4	codec_ctx
op	16:97	0:0	4	->
water	16:99	0:0	4	channels
water	16:107	0:0	4	)
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	timestamp
op	17:21	0:0	4	+=
call	17:24	17:62	4	av_rescale_q
arg	17:37	17:44	5	samples
water	17:37	0:0	6	samples
arg	17:46	17:47	5	r
water	17:46	0:0	6	r
arg	17:49	17:62	5	st->time_base
water	17:49	0:0	6	st
op	17:51	0:0	6	->
water	17:53	0:0	6	time_base
water	17:63	0:0	4	;
water	18:4	0:0	4	}
call	19:4	19:41	2	pa_threaded_mainloop_lock
arg	19:30	19:41	3	s->mainloop
water	19:30	0:0	4	s
op	19:31	0:0	4	->
water	19:33	0:0	4	mainloop
water	19:42	0:0	2	;
if	20:4	23:4	2	(!PA_STREAM_IS_GOOD (pa_stream_get_state (s -> stream ) ))
cond	20:8	20:57	3	!PA_STREAM_IS_GOOD (pa_stream_get_state (s -> stream ) )
op	20:8	0:0	4	!
call	20:9	20:57	4	PA_STREAM_IS_GOOD
arg	20:27	20:57	5	pa_stream_get_state(s->stream)
call	20:27	20:56	6	pa_stream_get_state
arg	20:47	20:56	7	s->stream
water	20:47	0:0	8	s
op	20:48	0:0	8	->
water	20:50	0:0	8	stream
stmts	20:60	23:4	3	
water	20:60	0:0	4	{
call	21:8	21:74	4	av_log
arg	21:15	21:16	5	s
water	21:15	0:0	6	s
arg	21:18	21:30	5	AV_LOG_ERROR
water	21:18	0:0	6	AV_LOG_ERROR
arg	21:32	21:74	5	"PulseAudio stream is in invalid state.\n"
water	21:32	0:0	6	"PulseAudio stream is in invalid state.\n"
water	21:75	0:0	4	;
goto	22:8	22:17	4	fail
water	22:13	0:0	5	fail
water	23:4	0:0	4	}
while	24:4	30:4	2	(pa_stream_writable_size (s -> stream ) < s -> minreq)
cond	24:11	24:51	3	pa_stream_writable_size (s -> stream ) < s -> minreq
call	24:11	24:44	4	pa_stream_writable_size
arg	24:35	24:44	5	s->stream
water	24:35	0:0	6	s
op	24:36	0:0	6	->
water	24:38	0:0	6	stream
op	24:46	0:0	4	<
water	24:48	0:0	4	s
op	24:49	0:0	4	->
water	24:51	0:0	4	minreq
stmts	24:59	30:4	3	
water	24:59	0:0	4	{
if	25:8	28:8	4	(s -> nonblocking)
cond	25:12	25:15	5	s -> nonblocking
water	25:12	0:0	6	s
op	25:13	0:0	6	->
water	25:15	0:0	6	nonblocking
stmts	25:28	28:8	5	
water	25:28	0:0	6	{
call	26:12	26:51	6	pa_threaded_mainloop_unlock
arg	26:40	26:51	7	s->mainloop
water	26:40	0:0	8	s
op	26:41	0:0	8	->
water	26:43	0:0	8	mainloop
water	26:52	0:0	6	;
return	27:12	27:34	6	AVERROR(EAGAIN)
call	27:19	27:33	7	AVERROR
arg	27:27	27:33	8	EAGAIN
water	27:27	0:0	9	EAGAIN
water	28:8	0:0	6	}
else	28:10	29:50	4
stmts	29:12	29:50	5	
call	29:12	29:49	6	pa_threaded_mainloop_wait
arg	29:38	29:49	7	s->mainloop
water	29:38	0:0	8	s
op	29:39	0:0	8	->
water	29:41	0:0	8	mainloop
water	29:50	0:0	6	;
water	30:4	0:0	4	}
if	31:4	34:4	2	(( ret =pa_stream_write (s -> stream ,pkt -> data ,pkt -> size ,NULL ,0 ,PA_SEEK_RELATIVE ) ) < 0)
cond	31:8	31:94	3	( ret =pa_stream_write (s -> stream ,pkt -> data ,pkt -> size ,NULL ,0 ,PA_SEEK_RELATIVE ) ) < 0
water	31:8	0:0	4	(
water	31:9	0:0	4	ret
op	31:13	0:0	4	=
call	31:15	31:89	4	pa_stream_write
arg	31:31	31:40	5	s->stream
water	31:31	0:0	6	s
op	31:32	0:0	6	->
water	31:34	0:0	6	stream
arg	31:42	31:51	5	pkt->data
water	31:42	0:0	6	pkt
op	31:45	0:0	6	->
water	31:47	0:0	6	data
arg	31:53	31:62	5	pkt->size
water	31:53	0:0	6	pkt
op	31:56	0:0	6	->
water	31:58	0:0	6	size
arg	31:64	31:68	5	NULL
water	31:64	0:0	6	NULL
arg	31:70	31:71	5	0
water	31:70	0:0	6	0
arg	31:73	31:89	5	PA_SEEK_RELATIVE
water	31:73	0:0	6	PA_SEEK_RELATIVE
water	31:90	0:0	4	)
op	31:92	0:0	4	<
water	31:94	0:0	4	0
stmts	31:97	34:4	3	
water	31:97	0:0	4	{
call	32:8	32:80	4	av_log
arg	32:15	32:16	5	s
water	32:15	0:0	6	s
arg	32:18	32:30	5	AV_LOG_ERROR
water	32:18	0:0	6	AV_LOG_ERROR
arg	32:32	32:62	5	"pa_stream_write failed: %s\n"
water	32:32	0:0	6	"pa_stream_write failed: %s\n"
arg	32:64	32:80	5	pa_strerror(ret)
call	32:64	32:79	6	pa_strerror
arg	32:76	32:79	7	ret
water	32:76	0:0	8	ret
water	32:81	0:0	4	;
goto	33:8	33:17	4	fail
water	33:13	0:0	5	fail
water	34:4	0:0	4	}
if	35:4	36:116	2	(( writable_size =pa_stream_writable_size (s -> stream ) ) >= s -> minreq)
cond	35:8	35:67	3	( writable_size =pa_stream_writable_size (s -> stream ) ) >= s -> minreq
water	35:8	0:0	4	(
water	35:9	0:0	4	writable_size
op	35:23	0:0	4	=
call	35:25	35:58	4	pa_stream_writable_size
arg	35:49	35:58	5	s->stream
water	35:49	0:0	6	s
op	35:50	0:0	6	->
water	35:52	0:0	6	stream
water	35:59	0:0	4	)
op	35:61	0:0	4	>=
water	35:64	0:0	4	s
op	35:65	0:0	4	->
water	35:67	0:0	4	minreq
stmts	36:8	36:116	3	
call	36:8	36:115	4	avdevice_dev_to_app_control_message
arg	36:44	36:45	5	h
water	36:44	0:0	6	h
arg	36:47	36:76	5	AV_DEV_TO_APP_BUFFER_WRITABLE
water	36:47	0:0	6	AV_DEV_TO_APP_BUFFER_WRITABLE
arg	36:78	36:92	5	&writable_size
op	36:78	0:0	6	&
water	36:79	0:0	6	writable_size
arg	36:94	36:115	5	sizeof(writable_size)
op	36:94	0:0	6	sizeof
water	36:100	0:0	6	(
water	36:101	0:0	6	writable_size
water	36:114	0:0	6	)
water	36:116	0:0	4	;
call	37:4	37:43	2	pa_threaded_mainloop_unlock
arg	37:32	37:43	3	s->mainloop
water	37:32	0:0	4	s
op	37:33	0:0	4	->
water	37:35	0:0	4	mainloop
water	37:44	0:0	2	;
return	38:4	38:12	2	0
water	38:11	0:0	3	0
label	39:2	39:6	2	fail :
call	40:4	40:43	2	pa_threaded_mainloop_unlock
arg	40:32	40:43	3	s->mainloop
water	40:32	0:0	4	s
op	40:33	0:0	4	->
water	40:35	0:0	4	mainloop
water	40:44	0:0	2	;
return	41:4	41:27	2	AVERROR_EXTERNAL
water	41:11	0:0	3	AVERROR_EXTERNAL
