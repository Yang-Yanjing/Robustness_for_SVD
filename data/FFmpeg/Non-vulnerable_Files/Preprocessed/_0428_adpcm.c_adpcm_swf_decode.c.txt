func	1:0	46:0	0	static void	adpcm_swf_decode
params	1:28	0:0	1	
param	1:29	1:50	2	AVCodecContext *	avctx
param	1:52	1:70	2	const uint8_t *	buf
param	1:72	1:84	2	int	buf_size
param	1:86	1:102	2	int16_t *	samples
stmnts	0:0	45:4	1	
decl	3:4	3:44	2	ADPCMDecodeContext	*c
op	3:26	0:0	2	=
water	3:28	0:0	2	avctx
op	3:33	0:0	2	->
water	3:35	0:0	2	priv_data
decl	4:4	4:20	2	GetBitContext	gb
decl	5:4	5:20	2	const int	*table
decl	6:4	6:36	2	int	k0
water	6:10	0:0	2	,
decl	6:4	6:36	2	int	signmask
water	6:20	0:0	2	,
decl	6:4	6:36	2	int	nb_bits
water	6:29	0:0	2	,
decl	6:4	6:36	2	int	count
decl	7:4	7:25	2	int	size
op	7:13	0:0	2	=
water	7:15	0:0	2	buf_size
op	7:23	0:0	2	*
water	7:24	0:0	2	8
decl	8:4	8:9	2	int	i
call	9:4	9:32	2	init_get_bits
arg	9:18	9:21	3	&gb
op	9:18	0:0	4	&
water	9:19	0:0	4	gb
arg	9:23	9:26	3	buf
water	9:23	0:0	4	buf
arg	9:28	9:32	3	size
water	9:28	0:0	4	size
water	9:33	0:0	2	;
water	11:4	0:0	2	nb_bits
op	11:12	0:0	2	=
call	11:14	11:29	2	get_bits
arg	11:23	11:26	3	&gb
op	11:23	0:0	4	&
water	11:24	0:0	4	gb
arg	11:28	11:29	3	2
water	11:28	0:0	4	2
op	11:30	0:0	2	+
water	11:31	0:0	2	2
water	11:32	0:0	2	;
water	12:4	0:0	2	table
op	12:10	0:0	2	=
water	12:12	0:0	2	swf_index_tables
op	12:28	0:0	2	[
water	12:29	0:0	2	nb_bits
op	12:36	0:0	2	-
water	12:37	0:0	2	2
op	12:38	0:0	2	]
water	12:39	0:0	2	;
water	13:4	0:0	2	k0
op	13:7	0:0	2	=
water	13:9	0:0	2	1
op	13:11	0:0	2	<<
water	13:14	0:0	2	(
water	13:15	0:0	2	nb_bits
op	13:22	0:0	2	-
water	13:23	0:0	2	2
water	13:24	0:0	2	)
water	13:25	0:0	2	;
water	14:4	0:0	2	signmask
op	14:13	0:0	2	=
water	14:15	0:0	2	1
op	14:17	0:0	2	<<
water	14:20	0:0	2	(
water	14:21	0:0	2	nb_bits
op	14:28	0:0	2	-
water	14:29	0:0	2	1
water	14:30	0:0	2	)
water	14:31	0:0	2	;
while	15:4	45:4	2	(get_bits_count (& gb ) <= size - 22 * avctx -> channels)
cond	15:11	15:51	3	get_bits_count (& gb ) <= size - 22 * avctx -> channels
call	15:11	15:29	4	get_bits_count
arg	15:26	15:29	5	&gb
op	15:26	0:0	6	&
water	15:27	0:0	6	gb
op	15:31	0:0	4	<=
water	15:34	0:0	4	size
op	15:39	0:0	4	-
water	15:41	0:0	4	22
op	15:43	0:0	4	*
water	15:44	0:0	4	avctx
op	15:49	0:0	4	->
water	15:51	0:0	4	channels
stmts	15:61	45:4	3	
water	15:61	0:0	4	{
for	16:8	19:8	4	(i = 0 ;i < avctx -> channels;i ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:31	5	i < avctx -> channels
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	avctx
op	16:29	0:0	6	->
water	16:31	0:0	6	channels
forexpr	16:41	16:42	5	i ++
water	16:41	0:0	6	i
op	16:42	0:0	6	++
stmts	16:46	19:8	5	
water	16:46	0:0	6	{
op	17:12	0:0	6	*
water	17:13	0:0	6	samples
op	17:20	0:0	6	++
op	17:23	0:0	6	=
water	17:25	0:0	6	c
op	17:26	0:0	6	->
water	17:28	0:0	6	status
op	17:34	0:0	6	[
water	17:35	0:0	6	i
op	17:36	0:0	6	]
op	17:37	0:0	6	.
water	17:38	0:0	6	predictor
op	17:48	0:0	6	=
call	17:50	17:67	6	get_sbits
arg	17:60	17:63	7	&gb
op	17:60	0:0	8	&
water	17:61	0:0	8	gb
arg	17:65	17:67	7	16
water	17:65	0:0	8	16
water	17:68	0:0	6	;
water	18:12	0:0	6	c
op	18:13	0:0	6	->
water	18:15	0:0	6	status
op	18:21	0:0	6	[
water	18:22	0:0	6	i
op	18:23	0:0	6	]
op	18:24	0:0	6	.
water	18:25	0:0	6	step_index
op	18:36	0:0	6	=
call	18:38	18:53	6	get_bits
arg	18:47	18:50	7	&gb
op	18:47	0:0	8	&
water	18:48	0:0	8	gb
arg	18:52	18:53	7	6
water	18:52	0:0	8	6
water	18:54	0:0	6	;
water	19:8	0:0	6	}
for	20:8	44:8	4	(count = 0 ;get_bits_count (& gb ) <= size - nb_bits * avctx -> channels && count < 4095;count ++)
forinit	20:13	20:22	5	count = 0 ;
water	20:13	0:0	6	count
op	20:19	0:0	6	=
water	20:21	0:0	6	0
water	20:22	0:0	6	;
cond	20:24	20:89	5	get_bits_count (& gb ) <= size - nb_bits * avctx -> channels && count < 4095
call	20:24	20:42	6	get_bits_count
arg	20:39	20:42	7	&gb
op	20:39	0:0	8	&
water	20:40	0:0	8	gb
op	20:44	0:0	6	<=
water	20:47	0:0	6	size
op	20:52	0:0	6	-
water	20:54	0:0	6	nb_bits
op	20:61	0:0	6	*
water	20:62	0:0	6	avctx
op	20:67	0:0	6	->
water	20:69	0:0	6	channels
op	20:78	0:0	6	&&
water	20:81	0:0	6	count
op	20:87	0:0	6	<
water	20:89	0:0	6	4095
forexpr	20:95	20:100	5	count ++
water	20:95	0:0	6	count
op	20:100	0:0	6	++
stmts	20:104	44:8	5	
water	20:104	0:0	6	{
decl	21:12	21:17	6	int	i
for	22:12	43:12	6	(i = 0 ;i < avctx -> channels;i ++)
forinit	22:17	22:22	7	i = 0 ;
water	22:17	0:0	8	i
op	22:19	0:0	8	=
water	22:21	0:0	8	0
water	22:22	0:0	8	;
cond	22:24	22:35	7	i < avctx -> channels
water	22:24	0:0	8	i
op	22:26	0:0	8	<
water	22:28	0:0	8	avctx
op	22:33	0:0	8	->
water	22:35	0:0	8	channels
forexpr	22:45	22:46	7	i ++
water	22:45	0:0	8	i
op	22:46	0:0	8	++
stmts	22:50	43:12	7	
water	22:50	0:0	8	{
decl	24:16	24:50	8	int	delta
op	24:26	0:0	8	=
call	24:28	24:49	9	get_bits
arg	24:37	24:40	10	&gb
op	24:37	0:0	11	&
water	24:38	0:0	11	gb
arg	24:42	24:49	10	nb_bits
water	24:42	0:0	11	nb_bits
decl	25:16	25:71	8	int	step
op	25:25	0:0	8	=
water	25:27	0:0	8	ff_adpcm_step_table
op	25:46	0:0	8	[
water	25:47	0:0	8	c
op	25:48	0:0	8	->
water	25:50	0:0	8	status
op	25:56	0:0	8	[
water	25:57	0:0	8	i
op	25:58	0:0	8	]
op	25:59	0:0	8	.
water	25:60	0:0	8	step_index
op	25:70	0:0	8	]
decl	26:16	26:31	8	long	vpdiff
op	26:28	0:0	8	=
water	26:30	0:0	8	0
decl	27:16	27:26	8	int	k
op	27:22	0:0	8	=
water	27:24	0:0	8	k0
do	28:16	33:16	8	(k)
cond	33:24	33:24	9	k
water	33:24	0:0	10	k
stmts	28:19	33:16	9	
water	28:19	0:0	10	{
if	29:20	30:38	10	(delta & k)
cond	29:24	29:32	11	delta & k
water	29:24	0:0	12	delta
op	29:30	0:0	12	&
water	29:32	0:0	12	k
stmts	30:24	30:38	11	
water	30:24	0:0	12	vpdiff
op	30:31	0:0	12	+=
water	30:34	0:0	12	step
water	30:38	0:0	12	;
water	31:20	0:0	10	step
op	31:25	0:0	10	>>=
water	31:29	0:0	10	1
water	31:30	0:0	10	;
water	32:20	0:0	10	k
op	32:22	0:0	10	>>=
water	32:26	0:0	10	1
water	32:27	0:0	10	;
water	33:16	0:0	10	}
water	33:26	0:0	8	;
water	34:16	0:0	8	vpdiff
op	34:23	0:0	8	+=
water	34:26	0:0	8	step
water	34:30	0:0	8	;
if	35:16	36:52	8	(delta & signmask)
cond	35:20	35:28	9	delta & signmask
water	35:20	0:0	10	delta
op	35:26	0:0	10	&
water	35:28	0:0	10	signmask
stmts	36:20	36:52	9	
water	36:20	0:0	10	c
op	36:21	0:0	10	->
water	36:23	0:0	10	status
op	36:29	0:0	10	[
water	36:30	0:0	10	i
op	36:31	0:0	10	]
op	36:32	0:0	10	.
water	36:33	0:0	10	predictor
op	36:43	0:0	10	-=
water	36:46	0:0	10	vpdiff
water	36:52	0:0	10	;
else	37:16	38:52	8
stmts	38:20	38:52	9	
water	38:20	0:0	10	c
op	38:21	0:0	10	->
water	38:23	0:0	10	status
op	38:29	0:0	10	[
water	38:30	0:0	10	i
op	38:31	0:0	10	]
op	38:32	0:0	10	.
water	38:33	0:0	10	predictor
op	38:43	0:0	10	+=
water	38:46	0:0	10	vpdiff
water	38:52	0:0	10	;
water	39:16	0:0	8	c
op	39:17	0:0	8	->
water	39:19	0:0	8	status
op	39:25	0:0	8	[
water	39:26	0:0	8	i
op	39:27	0:0	8	]
op	39:28	0:0	8	.
water	39:29	0:0	8	step_index
op	39:40	0:0	8	+=
water	39:43	0:0	8	table
op	39:48	0:0	8	[
water	39:49	0:0	8	delta
op	39:55	0:0	8	&
water	39:57	0:0	8	(
water	39:58	0:0	8	~signmask
water	39:67	0:0	8	)
op	39:68	0:0	8	]
water	39:69	0:0	8	;
water	40:16	0:0	8	c
op	40:17	0:0	8	->
water	40:19	0:0	8	status
op	40:25	0:0	8	[
water	40:26	0:0	8	i
op	40:27	0:0	8	]
op	40:28	0:0	8	.
water	40:29	0:0	8	step_index
op	40:40	0:0	8	=
call	40:42	40:80	8	av_clip
arg	40:50	40:73	9	c->status[i].step_index
water	40:50	0:0	10	c
op	40:51	0:0	10	->
water	40:53	0:0	10	status
op	40:59	0:0	10	[
water	40:60	0:0	10	i
op	40:61	0:0	10	]
op	40:62	0:0	10	.
water	40:63	0:0	10	step_index
arg	40:75	40:76	9	0
water	40:75	0:0	10	0
arg	40:78	40:80	9	88
water	40:78	0:0	10	88
water	40:81	0:0	8	;
water	41:16	0:0	8	c
op	41:17	0:0	8	->
water	41:19	0:0	8	status
op	41:25	0:0	8	[
water	41:26	0:0	8	i
op	41:27	0:0	8	]
op	41:28	0:0	8	.
water	41:29	0:0	8	predictor
op	41:39	0:0	8	=
call	41:41	41:77	8	av_clip_int16
arg	41:55	41:77	9	c->status[i].predictor
water	41:55	0:0	10	c
op	41:56	0:0	10	->
water	41:58	0:0	10	status
op	41:64	0:0	10	[
water	41:65	0:0	10	i
op	41:66	0:0	10	]
op	41:67	0:0	10	.
water	41:68	0:0	10	predictor
water	41:78	0:0	8	;
op	42:16	0:0	8	*
water	42:17	0:0	8	samples
op	42:24	0:0	8	++
op	42:27	0:0	8	=
water	42:29	0:0	8	c
op	42:30	0:0	8	->
water	42:32	0:0	8	status
op	42:38	0:0	8	[
water	42:39	0:0	8	i
op	42:40	0:0	8	]
op	42:41	0:0	8	.
water	42:42	0:0	8	predictor
water	42:51	0:0	8	;
water	43:12	0:0	8	}
water	44:8	0:0	6	}
water	45:4	0:0	4	}
