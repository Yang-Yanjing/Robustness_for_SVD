func	1:15	35:0	0	int	aic_decode_init
params	1:34	0:0	1	
param	1:35	1:56	2	AVCodecContext *	avctx
stmnts	0:0	34:12	1	
decl	3:4	3:38	2	AICContext	*ctx
op	3:20	0:0	2	=
water	3:22	0:0	2	avctx
op	3:27	0:0	2	->
water	3:29	0:0	2	priv_data
decl	4:4	4:9	2	int	i
decl	5:4	5:20	2	uint8_t	scan[64]
water	6:4	0:0	2	ctx
op	6:7	0:0	2	->
water	6:9	0:0	2	avctx
op	6:15	0:0	2	=
water	6:17	0:0	2	avctx
water	6:22	0:0	2	;
water	7:4	0:0	2	avctx
op	7:9	0:0	2	->
water	7:11	0:0	2	pix_fmt
op	7:19	0:0	2	=
water	7:21	0:0	2	AV_PIX_FMT_YUV420P
water	7:39	0:0	2	;
call	8:4	8:37	2	ff_idctdsp_init
arg	8:20	8:30	3	&ctx->idsp
op	8:20	0:0	4	&
water	8:21	0:0	4	ctx
op	8:24	0:0	4	->
water	8:26	0:0	4	idsp
arg	8:32	8:37	3	avctx
water	8:32	0:0	4	avctx
water	8:38	0:0	2	;
for	9:4	10:19	2	(i = 0 ;i < 64;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:20	3	i < 64
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	64
forexpr	9:24	9:25	3	i ++
water	9:24	0:0	4	i
op	9:25	0:0	4	++
stmts	10:8	10:19	3	
water	10:8	0:0	4	scan
op	10:12	0:0	4	[
water	10:13	0:0	4	i
op	10:14	0:0	4	]
op	10:16	0:0	4	=
water	10:18	0:0	4	i
water	10:19	0:0	4	;
call	11:4	11:71	2	ff_init_scantable
arg	11:22	11:48	3	ctx->idsp.idct_permutation
water	11:22	0:0	4	ctx
op	11:25	0:0	4	->
water	11:27	0:0	4	idsp
op	11:31	0:0	4	.
water	11:32	0:0	4	idct_permutation
arg	11:50	11:65	3	&ctx->scantable
op	11:50	0:0	4	&
water	11:51	0:0	4	ctx
op	11:54	0:0	4	->
water	11:56	0:0	4	scantable
arg	11:67	11:71	3	scan
water	11:67	0:0	4	scan
water	11:72	0:0	2	;
for	12:4	13:78	2	(i = 0 ;i < 64;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:20	3	i < 64
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	64
forexpr	12:24	12:25	3	i ++
water	12:24	0:0	4	i
op	12:25	0:0	4	++
stmts	13:8	13:78	3	
water	13:8	0:0	4	ctx
op	13:11	0:0	4	->
water	13:13	0:0	4	quant_matrix
op	13:25	0:0	4	[
water	13:26	0:0	4	ctx
op	13:29	0:0	4	->
water	13:31	0:0	4	idsp
op	13:35	0:0	4	.
water	13:36	0:0	4	idct_permutation
op	13:52	0:0	4	[
water	13:53	0:0	4	i
op	13:54	0:0	4	]
op	13:55	0:0	4	]
op	13:57	0:0	4	=
water	13:59	0:0	4	aic_quant_matrix
op	13:75	0:0	4	[
water	13:76	0:0	4	i
op	13:77	0:0	4	]
water	13:78	0:0	4	;
water	14:4	0:0	2	ctx
op	14:7	0:0	2	->
water	14:9	0:0	2	mb_width
op	14:19	0:0	2	=
call	14:21	14:46	2	FFALIGN
arg	14:29	14:41	3	avctx->width
water	14:29	0:0	4	avctx
op	14:34	0:0	4	->
water	14:36	0:0	4	width
arg	14:44	14:46	3	16
water	14:44	0:0	4	16
op	14:48	0:0	2	>>
water	14:51	0:0	2	4
water	14:52	0:0	2	;
water	15:4	0:0	2	ctx
op	15:7	0:0	2	->
water	15:9	0:0	2	mb_height
op	15:19	0:0	2	=
call	15:21	15:46	2	FFALIGN
arg	15:29	15:42	3	avctx->height
water	15:29	0:0	4	avctx
op	15:34	0:0	4	->
water	15:36	0:0	4	height
arg	15:44	15:46	3	16
water	15:44	0:0	4	16
op	15:48	0:0	2	>>
water	15:51	0:0	2	4
water	15:52	0:0	2	;
water	16:4	0:0	2	ctx
op	16:7	0:0	2	->
water	16:9	0:0	2	num_x_slices
op	16:22	0:0	2	=
water	16:24	0:0	2	(
water	16:25	0:0	2	ctx
op	16:28	0:0	2	->
water	16:30	0:0	2	mb_width
op	16:39	0:0	2	+
water	16:41	0:0	2	15
water	16:43	0:0	2	)
op	16:45	0:0	2	>>
water	16:48	0:0	2	4
water	16:49	0:0	2	;
water	17:4	0:0	2	ctx
op	17:7	0:0	2	->
water	17:9	0:0	2	slice_width
op	17:22	0:0	2	=
water	17:24	0:0	2	16
water	17:26	0:0	2	;
for	18:4	24:4	2	(i = 1 ;i < 32;i ++)
forinit	18:9	18:14	3	i = 1 ;
water	18:9	0:0	4	i
op	18:11	0:0	4	=
water	18:13	0:0	4	1
water	18:14	0:0	4	;
cond	18:16	18:20	3	i < 32
water	18:16	0:0	4	i
op	18:18	0:0	4	<
water	18:20	0:0	4	32
forexpr	18:24	18:25	3	i ++
water	18:24	0:0	4	i
op	18:25	0:0	4	++
stmts	18:29	24:4	3	
water	18:29	0:0	4	{
if	19:8	23:8	4	(! ( ctx -> mb_width % i ) && ( ctx -> mb_width / i <= 32 ))
cond	19:12	19:60	5	! ( ctx -> mb_width % i ) && ( ctx -> mb_width / i <= 32 )
op	19:12	0:0	6	!
water	19:13	0:0	6	(
water	19:14	0:0	6	ctx
op	19:17	0:0	6	->
water	19:19	0:0	6	mb_width
op	19:28	0:0	6	%
water	19:30	0:0	6	i
water	19:31	0:0	6	)
op	19:33	0:0	6	&&
water	19:36	0:0	6	(
water	19:37	0:0	6	ctx
op	19:40	0:0	6	->
water	19:42	0:0	6	mb_width
op	19:51	0:0	6	/
water	19:53	0:0	6	i
op	19:55	0:0	6	<=
water	19:58	0:0	6	32
water	19:60	0:0	6	)
stmts	19:63	23:8	5	
water	19:63	0:0	6	{
water	20:12	0:0	6	ctx
op	20:15	0:0	6	->
water	20:17	0:0	6	slice_width
op	20:30	0:0	6	=
water	20:32	0:0	6	ctx
op	20:35	0:0	6	->
water	20:37	0:0	6	mb_width
op	20:46	0:0	6	/
water	20:48	0:0	6	i
water	20:49	0:0	6	;
water	21:12	0:0	6	ctx
op	21:15	0:0	6	->
water	21:17	0:0	6	num_x_slices
op	21:30	0:0	6	=
water	21:32	0:0	6	i
water	21:33	0:0	6	;
break	22:12	22:17	6	
water	23:8	0:0	6	}
water	24:4	0:0	4	}
water	25:4	0:0	2	ctx
op	25:7	0:0	2	->
water	25:9	0:0	2	slice_data
op	25:20	0:0	2	=
call	25:22	26:58	2	av_malloc_array
arg	25:38	25:54	3	ctx->slice_width
water	25:38	0:0	4	ctx
op	25:41	0:0	4	->
water	25:43	0:0	4	slice_width
arg	25:56	26:58	3	AIC_BAND_COEFFS*sizeof(*ctx->slice_data)
water	25:56	0:0	4	AIC_BAND_COEFFS
op	26:32	0:0	4	*
op	26:34	0:0	4	sizeof
water	26:40	0:0	4	(
op	26:41	0:0	4	*
water	26:42	0:0	4	ctx
op	26:45	0:0	4	->
water	26:47	0:0	4	slice_data
water	26:57	0:0	4	)
water	26:59	0:0	2	;
if	27:4	30:4	2	(! ctx -> slice_data)
cond	27:8	27:14	3	! ctx -> slice_data
op	27:8	0:0	4	!
water	27:9	0:0	4	ctx
op	27:12	0:0	4	->
water	27:14	0:0	4	slice_data
stmts	27:26	30:4	3	
water	27:26	0:0	4	{
call	28:8	28:69	4	av_log
arg	28:15	28:20	5	avctx
water	28:15	0:0	6	avctx
arg	28:22	28:34	5	AV_LOG_ERROR
water	28:22	0:0	6	AV_LOG_ERROR
arg	28:36	28:69	5	"Error allocating slice buffer\n"
water	28:36	0:0	6	"Error allocating slice buffer\n"
water	28:70	0:0	4	;
return	29:8	29:30	4	AVERROR(ENOMEM)
call	29:15	29:29	5	AVERROR
arg	29:23	29:29	6	ENOMEM
water	29:23	0:0	7	ENOMEM
water	30:4	0:0	4	}
for	31:4	33:62	2	(i = 0 ;i < NUM_BANDS;i ++)
forinit	31:9	31:14	3	i = 0 ;
water	31:9	0:0	4	i
op	31:11	0:0	4	=
water	31:13	0:0	4	0
water	31:14	0:0	4	;
cond	31:16	31:20	3	i < NUM_BANDS
water	31:16	0:0	4	i
op	31:18	0:0	4	<
water	31:20	0:0	4	NUM_BANDS
forexpr	31:31	31:32	3	i ++
water	31:31	0:0	4	i
op	31:32	0:0	4	++
stmts	32:8	33:62	3	
water	32:8	0:0	4	ctx
op	32:11	0:0	4	->
water	32:13	0:0	4	data_ptr
op	32:21	0:0	4	[
water	32:22	0:0	4	i
op	32:23	0:0	4	]
op	32:25	0:0	4	=
water	32:27	0:0	4	ctx
op	32:30	0:0	4	->
water	32:32	0:0	4	slice_data
op	32:43	0:0	4	+
water	32:45	0:0	4	ctx
op	32:48	0:0	4	->
water	32:50	0:0	4	slice_width
op	33:45	0:0	4	*
water	33:47	0:0	4	aic_band_off
op	33:59	0:0	4	[
water	33:60	0:0	4	i
op	33:61	0:0	4	]
water	33:62	0:0	4	;
return	34:4	34:12	2	0
water	34:11	0:0	3	0
