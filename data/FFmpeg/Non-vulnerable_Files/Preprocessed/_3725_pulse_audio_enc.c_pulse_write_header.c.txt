func	1:15	159:0	0	int	pulse_write_header
params	1:37	0:0	1	
param	1:38	1:56	2	AVFormatContext *	h
stmnts	0:0	158:14	1	
decl	3:4	3:31	2	PulseData	*s
op	3:17	0:0	2	=
water	3:19	0:0	2	h
op	3:20	0:0	2	->
water	3:22	0:0	2	priv_data
decl	4:4	4:23	2	AVStream	*st
op	4:17	0:0	2	=
water	4:19	0:0	2	NULL
decl	5:4	5:11	2	int	ret
decl	6:4	6:30	2	pa_sample_spec	sample_spec
decl	7:4	7:61	2	pa_buffer_attr	buffer_attributes
op	7:37	0:0	2	=
water	7:39	0:0	2	{
op	7:41	0:0	2	-
water	7:42	0:0	2	1
water	7:43	0:0	2	,
op	7:45	0:0	2	-
water	7:46	0:0	2	1
water	7:47	0:0	2	,
op	7:49	0:0	2	-
water	7:50	0:0	2	1
water	7:51	0:0	2	,
op	7:53	0:0	2	-
water	7:54	0:0	2	1
water	7:55	0:0	2	,
op	7:57	0:0	2	-
water	7:58	0:0	2	1
water	7:60	0:0	2	}
decl	8:4	8:30	2	pa_channel_map	channel_map
decl	9:4	9:33	2	pa_mainloop_api	*mainloop_api
decl	10:4	10:44	2	const char	*stream_name
op	10:28	0:0	2	=
water	10:30	0:0	2	s
op	10:31	0:0	2	->
water	10:33	0:0	2	stream_name
water	11:4	0:0	2	static
water	11:11	0:0	2	const
water	11:17	0:0	2	pa_stream_flags_t
water	11:35	0:0	2	stream_flags
op	11:48	0:0	2	=
water	11:50	0:0	2	PA_STREAM_INTERPOLATE_TIMING
op	11:79	0:0	2	|
water	12:50	0:0	2	PA_STREAM_AUTO_TIMING_UPDATE
op	12:79	0:0	2	|
water	13:50	0:0	2	PA_STREAM_NOT_MONOTONIC
water	13:73	0:0	2	;
if	14:4	17:4	2	(h -> nb_streams != 1 || h -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_AUDIO)
cond	14:8	14:66	3	h -> nb_streams != 1 || h -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_AUDIO
water	14:8	0:0	4	h
op	14:9	0:0	4	->
water	14:11	0:0	4	nb_streams
op	14:22	0:0	4	!=
water	14:25	0:0	4	1
op	14:27	0:0	4	||
water	14:30	0:0	4	h
op	14:31	0:0	4	->
water	14:33	0:0	4	streams
op	14:40	0:0	4	[
water	14:41	0:0	4	0
op	14:42	0:0	4	]
op	14:43	0:0	4	->
water	14:45	0:0	4	codec
op	14:50	0:0	4	->
water	14:52	0:0	4	codec_type
op	14:63	0:0	4	!=
water	14:66	0:0	4	AVMEDIA_TYPE_AUDIO
stmts	14:86	17:4	3	
water	14:86	0:0	4	{
call	15:8	15:76	4	av_log
arg	15:15	15:16	5	s
water	15:15	0:0	6	s
arg	15:18	15:30	5	AV_LOG_ERROR
water	15:18	0:0	6	AV_LOG_ERROR
arg	15:32	15:76	5	"Only a single audio stream is supported.\n"
water	15:32	0:0	6	"Only a single audio stream is supported.\n"
water	15:77	0:0	4	;
return	16:8	16:30	4	AVERROR(EINVAL)
call	16:15	16:29	5	AVERROR
arg	16:23	16:29	6	EINVAL
water	16:23	0:0	7	EINVAL
water	17:4	0:0	4	}
water	18:4	0:0	2	st
op	18:7	0:0	2	=
water	18:9	0:0	2	h
op	18:10	0:0	2	->
water	18:12	0:0	2	streams
op	18:19	0:0	2	[
water	18:20	0:0	2	0
op	18:21	0:0	2	]
water	18:22	0:0	2	;
if	19:4	24:4	2	(! stream_name)
cond	19:8	19:9	3	! stream_name
op	19:8	0:0	4	!
water	19:9	0:0	4	stream_name
stmts	19:22	24:4	3	
water	19:22	0:0	4	{
if	20:8	21:37	4	(h -> filename [ 0 ])
cond	20:12	20:25	5	h -> filename [ 0 ]
water	20:12	0:0	6	h
op	20:13	0:0	6	->
water	20:15	0:0	6	filename
op	20:23	0:0	6	[
water	20:24	0:0	6	0
op	20:25	0:0	6	]
stmts	21:12	21:37	5	
water	21:12	0:0	6	stream_name
op	21:24	0:0	6	=
water	21:26	0:0	6	h
op	21:27	0:0	6	->
water	21:29	0:0	6	filename
water	21:37	0:0	6	;
else	22:8	23:36	4
stmts	23:12	23:36	5	
water	23:12	0:0	6	stream_name
op	23:24	0:0	6	=
water	23:26	0:0	6	"Playback"
water	23:36	0:0	6	;
water	24:4	0:0	4	}
water	25:4	0:0	2	s
op	25:5	0:0	2	->
water	25:7	0:0	2	nonblocking
op	25:19	0:0	2	=
water	25:21	0:0	2	(
water	25:22	0:0	2	h
op	25:23	0:0	2	->
water	25:25	0:0	2	flags
op	25:31	0:0	2	&
water	25:33	0:0	2	AVFMT_FLAG_NONBLOCK
water	25:52	0:0	2	)
water	25:53	0:0	2	;
if	26:4	36:4	2	(s -> buffer_duration)
cond	26:8	26:11	3	s -> buffer_duration
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	buffer_duration
stmts	26:28	36:4	3	
water	26:28	0:0	4	{
decl	27:8	27:42	4	int64_t	bytes
op	27:22	0:0	4	=
water	27:24	0:0	4	s
op	27:25	0:0	4	->
water	27:27	0:0	4	buffer_duration
water	28:8	0:0	4	bytes
op	28:14	0:0	4	*=
water	28:17	0:0	4	st
op	28:19	0:0	4	->
water	28:21	0:0	4	codec
op	28:26	0:0	4	->
water	28:28	0:0	4	channels
op	28:37	0:0	4	*
water	28:39	0:0	4	st
op	28:41	0:0	4	->
water	28:43	0:0	4	codec
op	28:48	0:0	4	->
water	28:50	0:0	4	sample_rate
call	28:62	29:62	4	*av_get_bytes_per_sample
arg	29:41	29:62	5	st->codec->sample_fmt
water	29:41	0:0	6	st
op	29:43	0:0	6	->
water	29:45	0:0	6	codec
op	29:50	0:0	6	->
water	29:52	0:0	6	sample_fmt
water	29:63	0:0	4	;
water	30:8	0:0	4	bytes
op	30:14	0:0	4	/=
water	30:17	0:0	4	1000
water	30:21	0:0	4	;
water	31:8	0:0	4	buffer_attributes
op	31:25	0:0	4	.
water	31:26	0:0	4	tlength
op	31:34	0:0	4	=
call	31:36	31:93	4	FFMAX
arg	31:42	31:56	5	s->buffer_size
water	31:42	0:0	6	s
op	31:43	0:0	6	->
water	31:45	0:0	6	buffer_size
arg	31:58	31:93	5	av_clip64(bytes,0,UINT32_MAX-1)
call	31:58	31:92	6	av_clip64
arg	31:68	31:73	7	bytes
water	31:68	0:0	8	bytes
arg	31:75	31:76	7	0
water	31:75	0:0	8	0
arg	31:78	31:92	7	UINT32_MAX-1
water	31:78	0:0	8	UINT32_MAX
op	31:89	0:0	8	-
water	31:91	0:0	8	1
water	31:94	0:0	4	;
call	32:8	34:40	4	av_log
arg	32:15	32:16	5	s
water	32:15	0:0	6	s
arg	32:18	32:30	5	AV_LOG_DEBUG
water	32:18	0:0	6	AV_LOG_DEBUG
arg	33:15	33:82	5	"Buffer duration: %ums recalculated into %"PRId64" bytes buffer.\n"
water	33:15	0:0	6	"Buffer duration: %ums recalculated into %"
water	33:58	0:0	6	PRId64
water	33:64	0:0	6	" bytes buffer.\n"
arg	34:15	34:33	5	s->buffer_duration
water	34:15	0:0	6	s
op	34:16	0:0	6	->
water	34:18	0:0	6	buffer_duration
arg	34:35	34:40	5	bytes
water	34:35	0:0	6	bytes
water	34:41	0:0	4	;
call	35:8	35:93	4	av_log
arg	35:15	35:16	5	s
water	35:15	0:0	6	s
arg	35:18	35:30	5	AV_LOG_DEBUG
water	35:18	0:0	6	AV_LOG_DEBUG
arg	35:32	35:66	5	"Real buffer length is %u bytes\n"
water	35:32	0:0	6	"Real buffer length is %u bytes\n"
arg	35:68	35:93	5	buffer_attributes.tlength
water	35:68	0:0	6	buffer_attributes
op	35:85	0:0	6	.
water	35:86	0:0	6	tlength
water	35:94	0:0	4	;
water	36:4	0:0	4	}
else	36:6	37:50	2
stmts	36:11	37:50	3	
if	36:11	37:50	4	(s -> buffer_size)
cond	36:15	36:18	5	s -> buffer_size
water	36:15	0:0	6	s
op	36:16	0:0	6	->
water	36:18	0:0	6	buffer_size
stmts	37:8	37:50	5	
water	37:8	0:0	6	buffer_attributes
op	37:25	0:0	6	.
water	37:26	0:0	6	tlength
op	37:34	0:0	6	=
water	37:36	0:0	6	s
op	37:37	0:0	6	->
water	37:39	0:0	6	buffer_size
water	37:50	0:0	6	;
if	38:4	39:44	2	(s -> prebuf)
cond	38:8	38:11	3	s -> prebuf
water	38:8	0:0	4	s
op	38:9	0:0	4	->
water	38:11	0:0	4	prebuf
stmts	39:8	39:44	3	
water	39:8	0:0	4	buffer_attributes
op	39:25	0:0	4	.
water	39:26	0:0	4	prebuf
op	39:33	0:0	4	=
water	39:35	0:0	4	s
op	39:36	0:0	4	->
water	39:38	0:0	4	prebuf
water	39:44	0:0	4	;
if	40:4	41:44	2	(s -> minreq)
cond	40:8	40:11	3	s -> minreq
water	40:8	0:0	4	s
op	40:9	0:0	4	->
water	40:11	0:0	4	minreq
stmts	41:8	41:44	3	
water	41:8	0:0	4	buffer_attributes
op	41:25	0:0	4	.
water	41:26	0:0	4	minreq
op	41:33	0:0	4	=
water	41:35	0:0	4	s
op	41:36	0:0	4	->
water	41:38	0:0	4	minreq
water	41:44	0:0	4	;
water	42:4	0:0	2	sample_spec
op	42:15	0:0	2	.
water	42:16	0:0	2	format
op	42:23	0:0	2	=
call	42:25	42:72	2	ff_codec_id_to_pulse_format
arg	42:53	42:72	3	st->codec->codec_id
water	42:53	0:0	4	st
op	42:55	0:0	4	->
water	42:57	0:0	4	codec
op	42:62	0:0	4	->
water	42:64	0:0	4	codec_id
water	42:73	0:0	2	;
water	43:4	0:0	2	sample_spec
op	43:15	0:0	2	.
water	43:16	0:0	2	rate
op	43:21	0:0	2	=
water	43:23	0:0	2	st
op	43:25	0:0	2	->
water	43:27	0:0	2	codec
op	43:32	0:0	2	->
water	43:34	0:0	2	sample_rate
water	43:45	0:0	2	;
water	44:4	0:0	2	sample_spec
op	44:15	0:0	2	.
water	44:16	0:0	2	channels
op	44:25	0:0	2	=
water	44:27	0:0	2	st
op	44:29	0:0	2	->
water	44:31	0:0	2	codec
op	44:36	0:0	2	->
water	44:38	0:0	2	channels
water	44:46	0:0	2	;
if	45:4	48:4	2	(!pa_sample_spec_valid (& sample_spec ))
cond	45:8	45:42	3	!pa_sample_spec_valid (& sample_spec )
op	45:8	0:0	4	!
call	45:9	45:42	4	pa_sample_spec_valid
arg	45:30	45:42	5	&sample_spec
op	45:30	0:0	6	&
water	45:31	0:0	6	sample_spec
stmts	45:45	48:4	3	
water	45:45	0:0	4	{
call	46:8	46:56	4	av_log
arg	46:15	46:16	5	s
water	46:15	0:0	6	s
arg	46:18	46:30	5	AV_LOG_ERROR
water	46:18	0:0	6	AV_LOG_ERROR
arg	46:32	46:56	5	"Invalid sample spec.\n"
water	46:32	0:0	6	"Invalid sample spec.\n"
water	46:57	0:0	4	;
return	47:8	47:30	4	AVERROR(EINVAL)
call	47:15	47:29	5	AVERROR
arg	47:23	47:29	6	EINVAL
water	47:23	0:0	7	EINVAL
water	48:4	0:0	4	}
if	49:4	52:4	2	(sample_spec . channels == 1)
cond	49:8	49:32	3	sample_spec . channels == 1
water	49:8	0:0	4	sample_spec
op	49:19	0:0	4	.
water	49:20	0:0	4	channels
op	49:29	0:0	4	==
water	49:32	0:0	4	1
stmts	49:35	52:4	3	
water	49:35	0:0	4	{
water	50:8	0:0	4	channel_map
op	50:19	0:0	4	.
water	50:20	0:0	4	channels
op	50:29	0:0	4	=
water	50:31	0:0	4	1
water	50:32	0:0	4	;
water	51:8	0:0	4	channel_map
op	51:19	0:0	4	.
water	51:20	0:0	4	map
op	51:23	0:0	4	[
water	51:24	0:0	4	0
op	51:25	0:0	4	]
op	51:27	0:0	4	=
water	51:29	0:0	4	PA_CHANNEL_POSITION_MONO
water	51:53	0:0	4	;
water	52:4	0:0	4	}
else	52:6	61:4	2
stmts	52:11	61:4	3	
if	52:11	61:4	4	(st -> codec -> channel_layout)
cond	52:15	52:26	5	st -> codec -> channel_layout
water	52:15	0:0	6	st
op	52:17	0:0	6	->
water	52:19	0:0	6	codec
op	52:24	0:0	6	->
water	52:26	0:0	6	channel_layout
stmts	52:42	61:4	5	
water	52:42	0:0	6	{
if	53:8	54:34	6	(av_get_channel_layout_nb_channels (st -> codec -> channel_layout ) != st -> codec -> channels)
cond	53:12	53:87	7	av_get_channel_layout_nb_channels (st -> codec -> channel_layout ) != st -> codec -> channels
call	53:12	53:71	8	av_get_channel_layout_nb_channels
arg	53:46	53:71	9	st->codec->channel_layout
water	53:46	0:0	10	st
op	53:48	0:0	10	->
water	53:50	0:0	10	codec
op	53:55	0:0	10	->
water	53:57	0:0	10	channel_layout
op	53:73	0:0	8	!=
water	53:76	0:0	8	st
op	53:78	0:0	8	->
water	53:80	0:0	8	codec
op	53:85	0:0	8	->
water	53:87	0:0	8	channels
stmts	54:12	54:34	7	
return	54:12	54:34	8	AVERROR(EINVAL)
call	54:19	54:33	9	AVERROR
arg	54:27	54:33	10	EINVAL
water	54:27	0:0	11	EINVAL
call	55:8	55:75	6	pulse_map_channels_to_pulse
arg	55:36	55:61	7	st->codec->channel_layout
water	55:36	0:0	8	st
op	55:38	0:0	8	->
water	55:40	0:0	8	codec
op	55:45	0:0	8	->
water	55:47	0:0	8	channel_layout
arg	55:63	55:75	7	&channel_map
op	55:63	0:0	8	&
water	55:64	0:0	8	channel_map
water	55:76	0:0	6	;
if	57:8	60:8	6	(channel_map . channels != sample_spec . channels)
cond	57:12	57:48	7	channel_map . channels != sample_spec . channels
water	57:12	0:0	8	channel_map
op	57:23	0:0	8	.
water	57:24	0:0	8	channels
op	57:33	0:0	8	!=
water	57:36	0:0	8	sample_spec
op	57:47	0:0	8	.
water	57:48	0:0	8	channels
stmts	57:58	60:8	7	
water	57:58	0:0	8	{
call	58:12	58:84	8	av_log
arg	58:19	58:20	9	s
water	58:19	0:0	10	s
arg	58:22	58:36	9	AV_LOG_WARNING
water	58:22	0:0	10	AV_LOG_WARNING
arg	58:38	58:84	9	"Unknown channel. Using defaul channel map.\n"
water	58:38	0:0	10	"Unknown channel. Using defaul channel map.\n"
water	58:85	0:0	8	;
water	59:12	0:0	8	channel_map
op	59:23	0:0	8	.
water	59:24	0:0	8	channels
op	59:33	0:0	8	=
water	59:35	0:0	8	0
water	59:36	0:0	8	;
water	60:8	0:0	8	}
water	61:4	0:0	6	}
else	61:6	62:32	2
stmts	62:8	62:32	3	
water	62:8	0:0	4	channel_map
op	62:19	0:0	4	.
water	62:20	0:0	4	channels
op	62:29	0:0	4	=
water	62:31	0:0	4	0
water	62:32	0:0	4	;
if	63:4	64:78	2	(! channel_map . channels)
cond	63:8	63:21	3	! channel_map . channels
op	63:8	0:0	4	!
water	63:9	0:0	4	channel_map
op	63:20	0:0	4	.
water	63:21	0:0	4	channels
stmts	64:8	64:78	3	
call	64:8	64:77	4	av_log
arg	64:15	64:16	5	s
water	64:15	0:0	6	s
arg	64:18	64:32	5	AV_LOG_WARNING
water	64:18	0:0	6	AV_LOG_WARNING
arg	64:34	64:77	5	"Using PulseAudio's default channel map.\n"
water	64:34	0:0	6	"Using PulseAudio's default channel map.\n"
water	64:78	0:0	4	;
else	65:4	68:4	2
stmts	65:9	68:4	3	
if	65:9	68:4	4	(!pa_channel_map_valid (& channel_map ))
cond	65:13	65:47	5	!pa_channel_map_valid (& channel_map )
op	65:13	0:0	6	!
call	65:14	65:47	6	pa_channel_map_valid
arg	65:35	65:47	7	&channel_map
op	65:35	0:0	8	&
water	65:36	0:0	8	channel_map
stmts	65:50	68:4	5	
water	65:50	0:0	6	{
call	66:8	66:56	6	av_log
arg	66:15	66:16	7	s
water	66:15	0:0	8	s
arg	66:18	66:30	7	AV_LOG_ERROR
water	66:18	0:0	8	AV_LOG_ERROR
arg	66:32	66:56	7	"Invalid channel map.\n"
water	66:32	0:0	8	"Invalid channel map.\n"
water	66:57	0:0	6	;
return	67:8	67:30	6	AVERROR(EINVAL)
call	67:15	67:29	7	AVERROR
arg	67:23	67:29	8	EINVAL
water	67:23	0:0	9	EINVAL
water	68:4	0:0	6	}
water	70:4	0:0	2	s
op	70:5	0:0	2	->
water	70:7	0:0	2	mainloop
op	70:16	0:0	2	=
call	70:18	70:43	2	pa_threaded_mainloop_new
water	70:44	0:0	2	;
if	71:4	74:4	2	(! s -> mainloop)
cond	71:8	71:12	3	! s -> mainloop
op	71:8	0:0	4	!
water	71:9	0:0	4	s
op	71:10	0:0	4	->
water	71:12	0:0	4	mainloop
stmts	71:22	74:4	3	
water	71:22	0:0	4	{
call	72:8	72:68	4	av_log
arg	72:15	72:16	5	s
water	72:15	0:0	6	s
arg	72:18	72:30	5	AV_LOG_ERROR
water	72:18	0:0	6	AV_LOG_ERROR
arg	72:32	72:68	5	"Cannot create threaded mainloop.\n"
water	72:32	0:0	6	"Cannot create threaded mainloop.\n"
water	72:69	0:0	4	;
return	73:8	73:30	4	AVERROR(ENOMEM)
call	73:15	73:29	5	AVERROR
arg	73:23	73:29	6	ENOMEM
water	73:23	0:0	7	ENOMEM
water	74:4	0:0	4	}
if	75:4	80:4	2	(( ret =pa_threaded_mainloop_start (s -> mainloop ) ) < 0)
cond	75:8	75:58	3	( ret =pa_threaded_mainloop_start (s -> mainloop ) ) < 0
water	75:8	0:0	4	(
water	75:9	0:0	4	ret
op	75:13	0:0	4	=
call	75:15	75:53	4	pa_threaded_mainloop_start
arg	75:42	75:53	5	s->mainloop
water	75:42	0:0	6	s
op	75:43	0:0	6	->
water	75:45	0:0	6	mainloop
water	75:54	0:0	4	)
op	75:56	0:0	4	<
water	75:58	0:0	4	0
stmts	75:61	80:4	3	
water	75:61	0:0	4	{
call	76:8	76:89	4	av_log
arg	76:15	76:16	5	s
water	76:15	0:0	6	s
arg	76:18	76:30	5	AV_LOG_ERROR
water	76:18	0:0	6	AV_LOG_ERROR
arg	76:32	76:71	5	"Cannot start threaded mainloop: %s.\n"
water	76:32	0:0	6	"Cannot start threaded mainloop: %s.\n"
arg	76:73	76:89	5	pa_strerror(ret)
call	76:73	76:88	6	pa_strerror
arg	76:85	76:88	7	ret
water	76:85	0:0	8	ret
water	76:90	0:0	4	;
call	77:8	77:45	4	pa_threaded_mainloop_free
arg	77:34	77:45	5	s->mainloop
water	77:34	0:0	6	s
op	77:35	0:0	6	->
water	77:37	0:0	6	mainloop
water	77:46	0:0	4	;
water	78:8	0:0	4	s
op	78:9	0:0	4	->
water	78:11	0:0	4	mainloop
op	78:20	0:0	4	=
water	78:22	0:0	4	NULL
water	78:26	0:0	4	;
return	79:8	79:31	4	AVERROR_EXTERNAL
water	79:15	0:0	5	AVERROR_EXTERNAL
water	80:4	0:0	4	}
call	81:4	81:41	2	pa_threaded_mainloop_lock
arg	81:30	81:41	3	s->mainloop
water	81:30	0:0	4	s
op	81:31	0:0	4	->
water	81:33	0:0	4	mainloop
water	81:42	0:0	2	;
water	82:4	0:0	2	mainloop_api
op	82:17	0:0	2	=
call	82:19	82:59	2	pa_threaded_mainloop_get_api
arg	82:48	82:59	3	s->mainloop
water	82:48	0:0	4	s
op	82:49	0:0	4	->
water	82:51	0:0	4	mainloop
water	82:60	0:0	2	;
if	83:4	87:4	2	(! mainloop_api)
cond	83:8	83:9	3	! mainloop_api
op	83:8	0:0	4	!
water	83:9	0:0	4	mainloop_api
stmts	83:23	87:4	3	
water	83:23	0:0	4	{
call	84:8	84:60	4	av_log
arg	84:15	84:16	5	s
water	84:15	0:0	6	s
arg	84:18	84:30	5	AV_LOG_ERROR
water	84:18	0:0	6	AV_LOG_ERROR
arg	84:32	84:60	5	"Cannot get mainloop API.\n"
water	84:32	0:0	6	"Cannot get mainloop API.\n"
water	84:61	0:0	4	;
water	85:8	0:0	4	ret
op	85:12	0:0	4	=
water	85:14	0:0	4	AVERROR_EXTERNAL
water	85:30	0:0	4	;
goto	86:8	86:17	4	fail
water	86:13	0:0	5	fail
water	87:4	0:0	4	}
water	88:4	0:0	2	s
op	88:5	0:0	2	->
water	88:7	0:0	2	ctx
op	88:11	0:0	2	=
call	88:13	88:49	2	pa_context_new
arg	88:28	88:40	3	mainloop_api
water	88:28	0:0	4	mainloop_api
arg	88:42	88:49	3	s->name
water	88:42	0:0	4	s
op	88:43	0:0	4	->
water	88:45	0:0	4	name
water	88:50	0:0	2	;
if	89:4	93:4	2	(! s -> ctx)
cond	89:8	89:12	3	! s -> ctx
op	89:8	0:0	4	!
water	89:9	0:0	4	s
op	89:10	0:0	4	->
water	89:12	0:0	4	ctx
stmts	89:17	93:4	3	
water	89:17	0:0	4	{
call	90:8	90:58	4	av_log
arg	90:15	90:16	5	s
water	90:15	0:0	6	s
arg	90:18	90:30	5	AV_LOG_ERROR
water	90:18	0:0	6	AV_LOG_ERROR
arg	90:32	90:58	5	"Cannot create context.\n"
water	90:32	0:0	6	"Cannot create context.\n"
water	90:59	0:0	4	;
water	91:8	0:0	4	ret
op	91:12	0:0	4	=
call	91:14	91:28	4	AVERROR
arg	91:22	91:28	5	ENOMEM
water	91:22	0:0	6	ENOMEM
water	91:29	0:0	4	;
goto	92:8	92:17	4	fail
water	92:13	0:0	5	fail
water	93:4	0:0	4	}
call	94:4	94:64	2	pa_context_set_state_callback
arg	94:34	94:40	3	s->ctx
water	94:34	0:0	4	s
op	94:35	0:0	4	->
water	94:37	0:0	4	ctx
arg	94:42	94:61	3	pulse_context_state
water	94:42	0:0	4	pulse_context_state
arg	94:63	94:64	3	s
water	94:63	0:0	4	s
water	94:65	0:0	2	;
call	95:4	95:60	2	pa_context_set_subscribe_callback
arg	95:38	95:44	3	s->ctx
water	95:38	0:0	4	s
op	95:39	0:0	4	->
water	95:41	0:0	4	ctx
arg	95:46	95:57	3	pulse_event
water	95:46	0:0	4	pulse_event
arg	95:59	95:60	3	h
water	95:59	0:0	4	h
water	95:61	0:0	2	;
if	96:4	100:4	2	(( ret =pa_context_connect (s -> ctx ,s -> server ,0 ,NULL ) ) < 0)
cond	96:8	96:65	3	( ret =pa_context_connect (s -> ctx ,s -> server ,0 ,NULL ) ) < 0
water	96:8	0:0	4	(
water	96:9	0:0	4	ret
op	96:13	0:0	4	=
call	96:15	96:60	4	pa_context_connect
arg	96:34	96:40	5	s->ctx
water	96:34	0:0	6	s
op	96:35	0:0	6	->
water	96:37	0:0	6	ctx
arg	96:42	96:51	5	s->server
water	96:42	0:0	6	s
op	96:43	0:0	6	->
water	96:45	0:0	6	server
arg	96:53	96:54	5	0
water	96:53	0:0	6	0
arg	96:56	96:60	5	NULL
water	96:56	0:0	6	NULL
water	96:61	0:0	4	)
op	96:63	0:0	4	<
water	96:65	0:0	4	0
stmts	96:68	100:4	3	
water	96:68	0:0	4	{
call	97:8	97:81	4	av_log
arg	97:15	97:16	5	s
water	97:15	0:0	6	s
arg	97:18	97:30	5	AV_LOG_ERROR
water	97:18	0:0	6	AV_LOG_ERROR
arg	97:32	97:63	5	"Cannot connect context: %s.\n"
water	97:32	0:0	6	"Cannot connect context: %s.\n"
arg	97:65	97:81	5	pa_strerror(ret)
call	97:65	97:80	6	pa_strerror
arg	97:77	97:80	7	ret
water	97:77	0:0	8	ret
water	97:82	0:0	4	;
water	98:8	0:0	4	ret
op	98:12	0:0	4	=
water	98:14	0:0	4	AVERROR_EXTERNAL
water	98:30	0:0	4	;
goto	99:8	99:17	4	fail
water	99:13	0:0	5	fail
water	100:4	0:0	4	}
if	101:4	104:4	2	(( ret =pulse_context_wait (s ) ) < 0)
cond	101:8	101:40	3	( ret =pulse_context_wait (s ) ) < 0
water	101:8	0:0	4	(
water	101:9	0:0	4	ret
op	101:13	0:0	4	=
call	101:15	101:35	4	pulse_context_wait
arg	101:34	101:35	5	s
water	101:34	0:0	6	s
water	101:36	0:0	4	)
op	101:38	0:0	4	<
water	101:40	0:0	4	0
stmts	101:43	104:4	3	
water	101:43	0:0	4	{
call	102:8	102:51	4	av_log
arg	102:15	102:16	5	s
water	102:15	0:0	6	s
arg	102:18	102:30	5	AV_LOG_ERROR
water	102:18	0:0	6	AV_LOG_ERROR
arg	102:32	102:51	5	"Context failed.\n"
water	102:32	0:0	6	"Context failed.\n"
water	102:52	0:0	4	;
goto	103:8	103:17	4	fail
water	103:13	0:0	5	fail
water	104:4	0:0	4	}
water	105:4	0:0	2	s
op	105:5	0:0	2	->
water	105:7	0:0	2	stream
op	105:14	0:0	2	=
call	105:16	106:72	2	pa_stream_new
arg	105:30	105:36	3	s->ctx
water	105:30	0:0	4	s
op	105:31	0:0	4	->
water	105:33	0:0	4	ctx
arg	105:38	105:49	3	stream_name
water	105:38	0:0	4	stream_name
arg	105:51	105:63	3	&sample_spec
op	105:51	0:0	4	&
water	105:52	0:0	4	sample_spec
arg	106:30	106:72	3	channel_map.channels?&channel_map:NULL
water	106:30	0:0	4	channel_map
op	106:41	0:0	4	.
water	106:42	0:0	4	channels
water	106:51	0:0	4	?
op	106:53	0:0	4	&
water	106:54	0:0	4	channel_map
water	106:66	0:0	4	:
water	106:68	0:0	4	NULL
water	106:73	0:0	2	;
if	107:4	110:4	2	(( ret =pulse_update_sink_info (h ) ) < 0)
cond	107:8	107:44	3	( ret =pulse_update_sink_info (h ) ) < 0
water	107:8	0:0	4	(
water	107:9	0:0	4	ret
op	107:13	0:0	4	=
call	107:15	107:39	4	pulse_update_sink_info
arg	107:38	107:39	5	h
water	107:38	0:0	6	h
water	107:40	0:0	4	)
op	107:42	0:0	4	<
water	107:44	0:0	4	0
stmts	107:47	110:4	3	
water	107:47	0:0	4	{
call	108:8	108:62	4	av_log
arg	108:15	108:16	5	s
water	108:15	0:0	6	s
arg	108:18	108:30	5	AV_LOG_ERROR
water	108:18	0:0	6	AV_LOG_ERROR
arg	108:32	108:62	5	"Updating sink info failed.\n"
water	108:32	0:0	6	"Updating sink info failed.\n"
water	108:63	0:0	4	;
goto	109:8	109:17	4	fail
water	109:13	0:0	5	fail
water	110:4	0:0	4	}
if	111:4	115:4	2	(! s -> stream)
cond	111:8	111:12	3	! s -> stream
op	111:8	0:0	4	!
water	111:9	0:0	4	s
op	111:10	0:0	4	->
water	111:12	0:0	4	stream
stmts	111:20	115:4	3	
water	111:20	0:0	4	{
call	112:8	112:57	4	av_log
arg	112:15	112:16	5	s
water	112:15	0:0	6	s
arg	112:18	112:30	5	AV_LOG_ERROR
water	112:18	0:0	6	AV_LOG_ERROR
arg	112:32	112:57	5	"Cannot create stream.\n"
water	112:32	0:0	6	"Cannot create stream.\n"
water	112:58	0:0	4	;
water	113:8	0:0	4	ret
op	113:12	0:0	4	=
call	113:14	113:28	4	AVERROR
arg	113:22	113:28	5	ENOMEM
water	113:22	0:0	6	ENOMEM
water	113:29	0:0	4	;
goto	114:8	114:17	4	fail
water	114:13	0:0	5	fail
water	115:4	0:0	4	}
call	116:4	116:65	2	pa_stream_set_state_callback
arg	116:33	116:42	3	s->stream
water	116:33	0:0	4	s
op	116:34	0:0	4	->
water	116:36	0:0	4	stream
arg	116:44	116:62	3	pulse_stream_state
water	116:44	0:0	4	pulse_stream_state
arg	116:64	116:65	3	s
water	116:64	0:0	4	s
water	116:66	0:0	2	;
call	117:4	117:68	2	pa_stream_set_write_callback
arg	117:33	117:42	3	s->stream
water	117:33	0:0	4	s
op	117:34	0:0	4	->
water	117:36	0:0	4	stream
arg	117:44	117:65	3	pulse_stream_writable
water	117:44	0:0	4	pulse_stream_writable
arg	117:67	117:68	3	h
water	117:67	0:0	4	h
water	117:69	0:0	2	;
call	118:4	118:64	2	pa_stream_set_overflow_callback
arg	118:36	118:45	3	s->stream
water	118:36	0:0	4	s
op	118:37	0:0	4	->
water	118:39	0:0	4	stream
arg	118:47	118:61	3	pulse_overflow
water	118:47	0:0	4	pulse_overflow
arg	118:63	118:64	3	h
water	118:63	0:0	4	h
water	118:65	0:0	2	;
call	119:4	119:66	2	pa_stream_set_underflow_callback
arg	119:37	119:46	3	s->stream
water	119:37	0:0	4	s
op	119:38	0:0	4	->
water	119:40	0:0	4	stream
arg	119:48	119:63	3	pulse_underflow
water	119:48	0:0	4	pulse_underflow
arg	119:65	119:66	3	h
water	119:65	0:0	4	h
water	119:67	0:0	2	;
if	120:4	125:4	2	(( ret =pa_stream_connect_playback (s -> stream ,s -> device ,& buffer_attributes ,stream_flags ,NULL ,NULL ) ) < 0)
cond	120:8	121:71	3	( ret =pa_stream_connect_playback (s -> stream ,s -> device ,& buffer_attributes ,stream_flags ,NULL ,NULL ) ) < 0
water	120:8	0:0	4	(
water	120:9	0:0	4	ret
op	120:13	0:0	4	=
call	120:15	121:66	4	pa_stream_connect_playback
arg	120:42	120:51	5	s->stream
water	120:42	0:0	6	s
op	120:43	0:0	6	->
water	120:45	0:0	6	stream
arg	120:53	120:62	5	s->device
water	120:53	0:0	6	s
op	120:54	0:0	6	->
water	120:56	0:0	6	device
arg	120:64	120:82	5	&buffer_attributes
op	120:64	0:0	6	&
water	120:65	0:0	6	buffer_attributes
arg	121:42	121:54	5	stream_flags
water	121:42	0:0	6	stream_flags
arg	121:56	121:60	5	NULL
water	121:56	0:0	6	NULL
arg	121:62	121:66	5	NULL
water	121:62	0:0	6	NULL
water	121:67	0:0	4	)
op	121:69	0:0	4	<
water	121:71	0:0	4	0
stmts	121:74	125:4	3	
water	121:74	0:0	4	{
call	122:8	122:92	4	av_log
arg	122:15	122:16	5	s
water	122:15	0:0	6	s
arg	122:18	122:30	5	AV_LOG_ERROR
water	122:18	0:0	6	AV_LOG_ERROR
arg	122:32	122:74	5	"pa_stream_connect_playback failed: %s.\n"
water	122:32	0:0	6	"pa_stream_connect_playback failed: %s.\n"
arg	122:76	122:92	5	pa_strerror(ret)
call	122:76	122:91	6	pa_strerror
arg	122:88	122:91	7	ret
water	122:88	0:0	8	ret
water	122:93	0:0	4	;
water	123:8	0:0	4	ret
op	123:12	0:0	4	=
water	123:14	0:0	4	AVERROR_EXTERNAL
water	123:30	0:0	4	;
goto	124:8	124:17	4	fail
water	124:13	0:0	5	fail
water	125:4	0:0	4	}
if	126:4	129:4	2	(( ret =pulse_stream_wait (s ) ) < 0)
cond	126:8	126:39	3	( ret =pulse_stream_wait (s ) ) < 0
water	126:8	0:0	4	(
water	126:9	0:0	4	ret
op	126:13	0:0	4	=
call	126:15	126:34	4	pulse_stream_wait
arg	126:33	126:34	5	s
water	126:33	0:0	6	s
water	126:35	0:0	4	)
op	126:37	0:0	4	<
water	126:39	0:0	4	0
stmts	126:42	129:4	3	
water	126:42	0:0	4	{
call	127:8	127:50	4	av_log
arg	127:15	127:16	5	s
water	127:15	0:0	6	s
arg	127:18	127:30	5	AV_LOG_ERROR
water	127:18	0:0	6	AV_LOG_ERROR
arg	127:32	127:50	5	"Stream failed.\n"
water	127:32	0:0	6	"Stream failed.\n"
water	127:51	0:0	4	;
goto	128:8	128:17	4	fail
water	128:13	0:0	5	fail
water	129:4	0:0	4	}
water	131:4	0:0	2	buffer_attributes
op	131:22	0:0	2	=
call	131:24	131:60	2	*pa_stream_get_buffer_attr
arg	131:51	131:60	3	s->stream
water	131:51	0:0	4	s
op	131:52	0:0	4	->
water	131:54	0:0	4	stream
water	131:61	0:0	2	;
water	132:4	0:0	2	s
op	132:5	0:0	2	->
water	132:7	0:0	2	buffer_size
op	132:19	0:0	2	=
water	132:21	0:0	2	buffer_attributes
op	132:38	0:0	2	.
water	132:39	0:0	2	tlength
water	132:46	0:0	2	;
water	133:4	0:0	2	s
op	133:5	0:0	2	->
water	133:7	0:0	2	prebuf
op	133:14	0:0	2	=
water	133:16	0:0	2	buffer_attributes
op	133:33	0:0	2	.
water	133:34	0:0	2	prebuf
water	133:40	0:0	2	;
water	134:4	0:0	2	s
op	134:5	0:0	2	->
water	134:7	0:0	2	minreq
op	134:14	0:0	2	=
water	134:16	0:0	2	buffer_attributes
op	134:33	0:0	2	.
water	134:34	0:0	2	minreq
water	134:40	0:0	2	;
call	135:4	136:47	2	av_log
arg	135:11	135:12	3	s
water	135:11	0:0	4	s
arg	135:14	135:26	3	AV_LOG_DEBUG
water	135:14	0:0	4	AV_LOG_DEBUG
arg	135:28	135:88	3	"Real buffer attributes: size: %d, prebuf: %d, minreq: %d\n"
water	135:28	0:0	4	"Real buffer attributes: size: %d, prebuf: %d, minreq: %d\n"
arg	136:11	136:25	3	s->buffer_size
water	136:11	0:0	4	s
op	136:12	0:0	4	->
water	136:14	0:0	4	buffer_size
arg	136:27	136:36	3	s->prebuf
water	136:27	0:0	4	s
op	136:28	0:0	4	->
water	136:30	0:0	4	prebuf
arg	136:38	136:47	3	s->minreq
water	136:38	0:0	4	s
op	136:39	0:0	4	->
water	136:41	0:0	4	minreq
water	136:48	0:0	2	;
call	137:4	137:43	2	pa_threaded_mainloop_unlock
arg	137:32	137:43	3	s->mainloop
water	137:32	0:0	4	s
op	137:33	0:0	4	->
water	137:35	0:0	4	mainloop
water	137:44	0:0	2	;
if	138:4	143:4	2	(( ret =pulse_subscribe_events (s ) ) < 0)
cond	138:8	138:44	3	( ret =pulse_subscribe_events (s ) ) < 0
water	138:8	0:0	4	(
water	138:9	0:0	4	ret
op	138:13	0:0	4	=
call	138:15	138:39	4	pulse_subscribe_events
arg	138:38	138:39	5	s
water	138:38	0:0	6	s
water	138:40	0:0	4	)
op	138:42	0:0	4	<
water	138:44	0:0	4	0
stmts	138:47	143:4	3	
water	138:47	0:0	4	{
call	139:8	139:62	4	av_log
arg	139:15	139:16	5	s
water	139:15	0:0	6	s
arg	139:18	139:30	5	AV_LOG_ERROR
water	139:18	0:0	6	AV_LOG_ERROR
arg	139:32	139:62	5	"Event subscription failed.\n"
water	139:32	0:0	6	"Event subscription failed.\n"
water	139:63	0:0	4	;
call	141:8	141:45	4	pa_threaded_mainloop_lock
arg	141:34	141:45	5	s->mainloop
water	141:34	0:0	6	s
op	141:35	0:0	6	->
water	141:37	0:0	6	mainloop
water	141:46	0:0	4	;
goto	142:8	142:17	4	fail
water	142:13	0:0	5	fail
water	143:4	0:0	4	}
water	145:4	0:0	2	s
op	145:5	0:0	2	->
water	145:7	0:0	2	mute
op	145:12	0:0	2	=
op	145:14	0:0	2	-
water	145:15	0:0	2	1
water	145:16	0:0	2	;
water	146:4	0:0	2	s
op	146:5	0:0	2	->
water	146:7	0:0	2	last_volume
op	146:19	0:0	2	=
water	146:21	0:0	2	PA_VOLUME_INVALID
water	146:38	0:0	2	;
call	147:4	147:41	2	pa_threaded_mainloop_lock
arg	147:30	147:41	3	s->mainloop
water	147:30	0:0	4	s
op	147:31	0:0	4	->
water	147:33	0:0	4	mainloop
water	147:42	0:0	2	;
if	148:4	151:4	2	(( ret =pulse_update_sink_input_info (h ) ) < 0)
cond	148:8	148:50	3	( ret =pulse_update_sink_input_info (h ) ) < 0
water	148:8	0:0	4	(
water	148:9	0:0	4	ret
op	148:13	0:0	4	=
call	148:15	148:45	4	pulse_update_sink_input_info
arg	148:44	148:45	5	h
water	148:44	0:0	6	h
water	148:46	0:0	4	)
op	148:48	0:0	4	<
water	148:50	0:0	4	0
stmts	148:53	151:4	3	
water	148:53	0:0	4	{
call	149:8	149:68	4	av_log
arg	149:15	149:16	5	s
water	149:15	0:0	6	s
arg	149:18	149:30	5	AV_LOG_ERROR
water	149:18	0:0	6	AV_LOG_ERROR
arg	149:32	149:68	5	"Updating sink input info failed.\n"
water	149:32	0:0	6	"Updating sink input info failed.\n"
water	149:69	0:0	4	;
goto	150:8	150:17	4	fail
water	150:13	0:0	5	fail
water	151:4	0:0	4	}
call	152:4	152:43	2	pa_threaded_mainloop_unlock
arg	152:32	152:43	3	s->mainloop
water	152:32	0:0	4	s
op	152:33	0:0	4	->
water	152:35	0:0	4	mainloop
water	152:44	0:0	2	;
call	153:4	153:42	2	avpriv_set_pts_info
arg	153:24	153:26	3	st
water	153:24	0:0	4	st
arg	153:28	153:30	3	64
water	153:28	0:0	4	64
arg	153:32	153:33	3	1
water	153:32	0:0	4	1
arg	153:35	153:42	3	1000000
water	153:35	0:0	4	1000000
water	153:43	0:0	2	;
return	154:4	154:12	2	0
water	154:11	0:0	3	0
label	155:2	155:6	2	fail :
call	156:4	156:43	2	pa_threaded_mainloop_unlock
arg	156:32	156:43	3	s->mainloop
water	156:32	0:0	4	s
op	156:33	0:0	4	->
water	156:35	0:0	4	mainloop
water	156:44	0:0	2	;
call	157:4	157:25	2	pulse_write_trailer
arg	157:24	157:25	3	h
water	157:24	0:0	4	h
water	157:26	0:0	2	;
return	158:4	158:14	2	ret
water	158:11	0:0	3	ret
