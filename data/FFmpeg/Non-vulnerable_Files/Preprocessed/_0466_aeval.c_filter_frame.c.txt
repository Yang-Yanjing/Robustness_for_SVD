func	1:0	29:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:57	2	AVFrame *	in
stmnts	0:0	28:40	1	
decl	3:4	3:45	2	EvalContext	*eval
op	3:26	0:0	2	=
water	3:28	0:0	2	inlink
op	3:34	0:0	2	->
water	3:36	0:0	2	dst
op	3:39	0:0	2	->
water	3:41	0:0	2	priv
decl	4:4	4:51	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	inlink
op	4:34	0:0	2	->
water	4:36	0:0	2	dst
op	4:39	0:0	2	->
water	4:41	0:0	2	outputs
op	4:48	0:0	2	[
water	4:49	0:0	2	0
op	4:50	0:0	2	]
decl	5:4	5:42	2	int	nb_samples
op	5:26	0:0	2	=
water	5:28	0:0	2	in
op	5:30	0:0	2	->
water	5:32	0:0	2	nb_samples
decl	6:4	6:16	2	AVFrame	*out
decl	7:4	7:13	2	double	t0
decl	8:4	8:12	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:12	2	int	j
water	10:4	0:0	2	out
op	10:8	0:0	2	=
call	10:10	10:49	2	ff_get_audio_buffer
arg	10:30	10:37	3	outlink
water	10:30	0:0	4	outlink
arg	10:39	10:49	3	nb_samples
water	10:39	0:0	4	nb_samples
water	10:50	0:0	2	;
if	11:4	12:30	2	(! out)
cond	11:8	11:9	3	! out
op	11:8	0:0	4	!
water	11:9	0:0	4	out
stmts	12:8	12:30	3	
return	12:8	12:30	4	AVERROR(ENOMEM)
call	12:15	12:29	5	AVERROR
arg	12:23	12:29	6	ENOMEM
water	12:23	0:0	7	ENOMEM
call	13:4	13:31	2	av_frame_copy_props
arg	13:24	13:27	3	out
water	13:24	0:0	4	out
arg	13:29	13:31	3	in
water	13:29	0:0	4	in
water	13:32	0:0	2	;
water	14:4	0:0	2	t0
op	14:7	0:0	2	=
call	14:9	14:40	2	TS2T
arg	14:14	14:21	3	in->pts
water	14:14	0:0	4	in
op	14:16	0:0	4	->
water	14:18	0:0	4	pts
arg	14:23	14:40	3	inlink->time_base
water	14:23	0:0	4	inlink
op	14:29	0:0	4	->
water	14:31	0:0	4	time_base
water	14:41	0:0	2	;
for	16:4	26:4	2	(i = 0 ;i < nb_samples;i ++ , eval -> n ++)
forinit	16:9	16:14	3	i = 0 ;
water	16:9	0:0	4	i
op	16:11	0:0	4	=
water	16:13	0:0	4	0
water	16:14	0:0	4	;
cond	16:16	16:20	3	i < nb_samples
water	16:16	0:0	4	i
op	16:18	0:0	4	<
water	16:20	0:0	4	nb_samples
forexpr	16:32	16:44	3	i ++ , eval -> n ++
water	16:32	0:0	4	i
op	16:33	0:0	4	++
water	16:35	0:0	4	,
water	16:37	0:0	4	eval
op	16:41	0:0	4	->
water	16:43	0:0	4	n
op	16:44	0:0	4	++
stmts	16:48	26:4	3	
water	16:48	0:0	4	{
water	17:8	0:0	4	eval
op	17:12	0:0	4	->
water	17:14	0:0	4	var_values
op	17:24	0:0	4	[
water	17:25	0:0	4	VAR_N
op	17:30	0:0	4	]
op	17:32	0:0	4	=
water	17:34	0:0	4	eval
op	17:38	0:0	4	->
water	17:40	0:0	4	n
water	17:41	0:0	4	;
water	18:8	0:0	4	eval
op	18:12	0:0	4	->
water	18:14	0:0	4	var_values
op	18:24	0:0	4	[
water	18:25	0:0	4	VAR_T
op	18:30	0:0	4	]
op	18:32	0:0	4	=
water	18:34	0:0	4	t0
op	18:37	0:0	4	+
water	18:39	0:0	4	i
op	18:41	0:0	4	*
water	18:43	0:0	4	(
water	18:44	0:0	4	double
water	18:50	0:0	4	)
water	18:51	0:0	4	1
op	18:52	0:0	4	/
water	18:53	0:0	4	inlink
op	18:59	0:0	4	->
water	18:61	0:0	4	sample_rate
water	18:72	0:0	4	;
for	19:8	20:76	4	(j = 0 ;j < inlink -> channels;j ++)
forinit	19:13	19:18	5	j = 0 ;
water	19:13	0:0	6	j
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:32	5	j < inlink -> channels
water	19:20	0:0	6	j
op	19:22	0:0	6	<
water	19:24	0:0	6	inlink
op	19:30	0:0	6	->
water	19:32	0:0	6	channels
forexpr	19:42	19:43	5	j ++
water	19:42	0:0	6	j
op	19:43	0:0	6	++
stmts	20:12	20:76	5	
water	20:12	0:0	6	eval
op	20:16	0:0	6	->
water	20:18	0:0	6	channel_values
op	20:32	0:0	6	[
water	20:33	0:0	6	j
op	20:34	0:0	6	]
op	20:36	0:0	6	=
op	20:38	0:0	6	*
water	20:39	0:0	6	(
water	20:40	0:0	6	(
water	20:41	0:0	6	double
op	20:48	0:0	6	*
water	20:49	0:0	6	)
water	20:51	0:0	6	in
op	20:53	0:0	6	->
water	20:55	0:0	6	extended_data
op	20:68	0:0	6	[
water	20:69	0:0	6	j
op	20:70	0:0	6	]
op	20:72	0:0	6	+
water	20:74	0:0	6	i
water	20:75	0:0	6	)
water	20:76	0:0	6	;
for	21:8	25:8	4	(j = 0 ;j < outlink -> channels;j ++)
forinit	21:13	21:18	5	j = 0 ;
water	21:13	0:0	6	j
op	21:15	0:0	6	=
water	21:17	0:0	6	0
water	21:18	0:0	6	;
cond	21:20	21:33	5	j < outlink -> channels
water	21:20	0:0	6	j
op	21:22	0:0	6	<
water	21:24	0:0	6	outlink
op	21:31	0:0	6	->
water	21:33	0:0	6	channels
forexpr	21:43	21:44	5	j ++
water	21:43	0:0	6	j
op	21:44	0:0	6	++
stmts	21:48	25:8	5	
water	21:48	0:0	6	{
water	22:12	0:0	6	eval
op	22:16	0:0	6	->
water	22:18	0:0	6	var_values
op	22:28	0:0	6	[
water	22:29	0:0	6	VAR_CH
op	22:35	0:0	6	]
op	22:37	0:0	6	=
water	22:39	0:0	6	j
water	22:40	0:0	6	;
op	23:12	0:0	6	*
water	23:13	0:0	6	(
water	23:14	0:0	6	(
water	23:15	0:0	6	double
op	23:22	0:0	6	*
water	23:23	0:0	6	)
water	23:25	0:0	6	out
op	23:28	0:0	6	->
water	23:30	0:0	6	extended_data
op	23:43	0:0	6	[
water	23:44	0:0	6	j
op	23:45	0:0	6	]
op	23:47	0:0	6	+
water	23:49	0:0	6	i
water	23:50	0:0	6	)
op	23:52	0:0	6	=
call	24:16	24:66	6	av_expr_eval
arg	24:29	24:42	7	eval->expr[j]
water	24:29	0:0	8	eval
op	24:33	0:0	8	->
water	24:35	0:0	8	expr
op	24:39	0:0	8	[
water	24:40	0:0	8	j
op	24:41	0:0	8	]
arg	24:44	24:60	7	eval->var_values
water	24:44	0:0	8	eval
op	24:48	0:0	8	->
water	24:50	0:0	8	var_values
arg	24:62	24:66	7	eval
water	24:62	0:0	8	eval
water	24:67	0:0	6	;
water	25:8	0:0	6	}
water	26:4	0:0	4	}
call	27:4	27:21	2	av_frame_free
arg	27:18	27:21	3	&in
op	27:18	0:0	4	&
water	27:19	0:0	4	in
water	27:22	0:0	2	;
return	28:4	28:40	2	ff_filter_frame(outlink,out)
call	28:11	28:39	3	ff_filter_frame
arg	28:27	28:34	4	outlink
water	28:27	0:0	5	outlink
arg	28:36	28:39	4	out
water	28:36	0:0	5	out
