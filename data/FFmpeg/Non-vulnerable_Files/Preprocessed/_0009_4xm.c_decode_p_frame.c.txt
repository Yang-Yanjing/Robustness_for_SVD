func	1:0	55:0	0	static int	decode_p_frame
params	1:25	0:0	1	
param	1:26	1:41	2	FourXContext *	f
param	1:43	1:61	2	const uint8_t *	buf
param	1:63	1:73	2	int	length
stmnts	0:0	54:12	1	
decl	3:4	3:12	2	int	x
water	3:9	0:0	2	,
decl	3:4	3:12	2	int	y
decl	4:4	4:38	2	const int	width
op	4:21	0:0	2	=
water	4:23	0:0	2	f
op	4:24	0:0	2	->
water	4:26	0:0	2	avctx
op	4:31	0:0	2	->
water	4:33	0:0	2	width
decl	5:4	5:39	2	const int	height
op	5:21	0:0	2	=
water	5:23	0:0	2	f
op	5:24	0:0	2	->
water	5:26	0:0	2	avctx
op	5:31	0:0	2	->
water	5:33	0:0	2	height
decl	6:4	6:38	2	uint16_t	*dst
op	6:21	0:0	2	=
water	6:23	0:0	2	f
op	6:24	0:0	2	->
water	6:26	0:0	2	frame_buffer
decl	7:4	7:17	2	uint16_t	*src
decl	8:4	9:53	2	unsigned int	bitstream_size
water	8:31	0:0	2	,
decl	8:4	9:53	2	unsigned int	bytestream_size
water	8:48	0:0	2	,
decl	8:4	9:53	2	unsigned int	wordstream_size
water	8:65	0:0	2	,
decl	8:4	9:53	2	unsigned int	extra
water	8:72	0:0	2	,
decl	8:4	9:53	2	unsigned int	bytestream_offset
water	9:34	0:0	2	,
decl	8:4	9:53	2	unsigned int	wordstream_offset
decl	10:4	10:11	2	int	ret
water	11:4	0:0	2	src
op	11:8	0:0	2	=
water	11:10	0:0	2	f
op	11:11	0:0	2	->
water	11:13	0:0	2	last_frame_buffer
water	11:30	0:0	2	;
if	12:4	19:4	2	(f -> version > 1)
cond	12:8	12:21	3	f -> version > 1
water	12:8	0:0	4	f
op	12:9	0:0	4	->
water	12:11	0:0	4	version
op	12:19	0:0	4	>
water	12:21	0:0	4	1
stmts	12:24	19:4	3	
water	12:24	0:0	4	{
water	13:8	0:0	4	extra
op	13:24	0:0	4	=
water	13:26	0:0	4	20
water	13:28	0:0	4	;
if	14:8	15:38	4	(length < extra)
cond	14:12	14:21	5	length < extra
water	14:12	0:0	6	length
op	14:19	0:0	6	<
water	14:21	0:0	6	extra
stmts	15:12	15:38	5	
return	15:12	15:38	6	AVERROR_INVALIDDATA
water	15:19	0:0	7	AVERROR_INVALIDDATA
water	16:8	0:0	4	bitstream_size
op	16:24	0:0	4	=
call	16:26	16:41	4	AV_RL32
arg	16:34	16:41	5	buf+8
water	16:34	0:0	6	buf
op	16:38	0:0	6	+
water	16:40	0:0	6	8
water	16:42	0:0	4	;
water	17:8	0:0	4	wordstream_size
op	17:24	0:0	4	=
call	17:26	17:42	4	AV_RL32
arg	17:34	17:42	5	buf+12
water	17:34	0:0	6	buf
op	17:38	0:0	6	+
water	17:40	0:0	6	12
water	17:43	0:0	4	;
water	18:8	0:0	4	bytestream_size
op	18:24	0:0	4	=
call	18:26	18:42	4	AV_RL32
arg	18:34	18:42	5	buf+16
water	18:34	0:0	6	buf
op	18:38	0:0	6	+
water	18:40	0:0	6	16
water	18:43	0:0	4	;
water	19:4	0:0	4	}
else	19:6	24:4	2
stmts	19:11	24:4	3	
water	19:11	0:0	4	{
water	20:8	0:0	4	extra
op	20:24	0:0	4	=
water	20:26	0:0	4	0
water	20:27	0:0	4	;
water	21:8	0:0	4	bitstream_size
op	21:24	0:0	4	=
call	21:26	21:41	4	AV_RL16
arg	21:34	21:41	5	buf-4
water	21:34	0:0	6	buf
op	21:38	0:0	6	-
water	21:40	0:0	6	4
water	21:42	0:0	4	;
water	22:8	0:0	4	wordstream_size
op	22:24	0:0	4	=
call	22:26	22:41	4	AV_RL16
arg	22:34	22:41	5	buf-2
water	22:34	0:0	6	buf
op	22:38	0:0	6	-
water	22:40	0:0	6	2
water	22:42	0:0	4	;
water	23:8	0:0	4	bytestream_size
op	23:24	0:0	4	=
call	23:26	23:76	4	FFMAX
arg	23:32	23:73	5	length-bitstream_size-wordstream_size
water	23:32	0:0	6	length
op	23:39	0:0	6	-
water	23:41	0:0	6	bitstream_size
op	23:56	0:0	6	-
water	23:58	0:0	6	wordstream_size
arg	23:75	23:76	5	0
water	23:75	0:0	6	0
water	23:77	0:0	4	;
water	24:4	0:0	4	}
if	25:4	32:4	2	(bitstream_size > length || bitstream_size >= INT_MAX / 8 || bytestream_size > length - bitstream_size || wordstream_size > length - bytestream_size - bitstream_size || extra > length - bytestream_size - bitstream_size - wordstream_size)
cond	25:8	28:60	3	bitstream_size > length || bitstream_size >= INT_MAX / 8 || bytestream_size > length - bitstream_size || wordstream_size > length - bytestream_size - bitstream_size || extra > length - bytestream_size - bitstream_size - wordstream_size
water	25:8	0:0	4	bitstream_size
op	25:23	0:0	4	>
water	25:25	0:0	4	length
op	25:32	0:0	4	||
water	25:35	0:0	4	bitstream_size
op	25:50	0:0	4	>=
water	25:53	0:0	4	INT_MAX
op	25:60	0:0	4	/
water	25:61	0:0	4	8
op	25:63	0:0	4	||
water	26:8	0:0	4	bytestream_size
op	26:24	0:0	4	>
water	26:26	0:0	4	length
op	26:33	0:0	4	-
water	26:35	0:0	4	bitstream_size
op	26:50	0:0	4	||
water	27:8	0:0	4	wordstream_size
op	27:24	0:0	4	>
water	27:26	0:0	4	length
op	27:33	0:0	4	-
water	27:35	0:0	4	bytestream_size
op	27:51	0:0	4	-
water	27:53	0:0	4	bitstream_size
op	27:68	0:0	4	||
water	28:8	0:0	4	extra
op	28:14	0:0	4	>
water	28:16	0:0	4	length
op	28:23	0:0	4	-
water	28:25	0:0	4	bytestream_size
op	28:41	0:0	4	-
water	28:43	0:0	4	bitstream_size
op	28:58	0:0	4	-
water	28:60	0:0	4	wordstream_size
stmts	28:77	32:4	3	
water	28:77	0:0	4	{
call	29:8	30:65	4	av_log
arg	29:15	29:23	5	f->avctx
water	29:15	0:0	6	f
op	29:16	0:0	6	->
water	29:18	0:0	6	avctx
arg	29:25	29:37	5	AV_LOG_ERROR
water	29:25	0:0	6	AV_LOG_ERROR
arg	29:39	29:62	5	"lengths %d %d %d %d\n"
water	29:39	0:0	6	"lengths %d %d %d %d\n"
arg	29:64	29:78	5	bitstream_size
water	29:64	0:0	6	bitstream_size
arg	29:80	29:95	5	bytestream_size
water	29:80	0:0	6	bytestream_size
arg	29:97	29:112	5	wordstream_size
water	29:97	0:0	6	wordstream_size
arg	30:8	30:65	5	bitstream_size+bytestream_size+wordstream_size-length
water	30:8	0:0	6	bitstream_size
op	30:22	0:0	6	+
water	30:24	0:0	6	bytestream_size
op	30:39	0:0	6	+
water	30:41	0:0	6	wordstream_size
op	30:57	0:0	6	-
water	30:59	0:0	6	length
water	30:66	0:0	4	;
return	31:8	31:34	4	AVERROR_INVALIDDATA
water	31:15	0:0	5	AVERROR_INVALIDDATA
water	32:4	0:0	4	}
call	33:4	34:40	2	av_fast_padded_malloc
arg	33:26	33:46	3	&f->bitstream_buffer
op	33:26	0:0	4	&
water	33:27	0:0	4	f
op	33:28	0:0	4	->
water	33:30	0:0	4	bitstream_buffer
arg	33:48	33:73	3	&f->bitstream_buffer_size
op	33:48	0:0	4	&
water	33:49	0:0	4	f
op	33:50	0:0	4	->
water	33:52	0:0	4	bitstream_buffer_size
arg	34:26	34:40	3	bitstream_size
water	34:26	0:0	4	bitstream_size
water	34:41	0:0	2	;
if	35:4	36:30	2	(! f -> bitstream_buffer)
cond	35:8	35:12	3	! f -> bitstream_buffer
op	35:8	0:0	4	!
water	35:9	0:0	4	f
op	35:10	0:0	4	->
water	35:12	0:0	4	bitstream_buffer
stmts	36:8	36:30	3	
return	36:8	36:30	4	AVERROR(ENOMEM)
call	36:15	36:29	5	AVERROR
arg	36:23	36:29	6	ENOMEM
water	36:23	0:0	7	ENOMEM
call	37:4	38:41	2	f->bbdsp.bswap_buf
arg	37:23	37:42	3	f->bitstream_buffer
water	37:23	0:0	4	f
op	37:24	0:0	4	->
water	37:26	0:0	4	bitstream_buffer
arg	37:44	37:76	3	(constuint32_t*)(buf+extra)
call	37:44	37:75	4	(constuint32_t*)
arg	37:64	37:75	5	buf+extra
water	37:64	0:0	6	buf
op	37:68	0:0	6	+
water	37:70	0:0	6	extra
arg	38:23	38:41	3	bitstream_size/4
water	38:23	0:0	4	bitstream_size
op	38:38	0:0	4	/
water	38:40	0:0	4	4
water	38:42	0:0	2	;
call	39:4	39:65	2	init_get_bits
arg	39:18	39:24	3	&f->gb
op	39:18	0:0	4	&
water	39:19	0:0	4	f
op	39:20	0:0	4	->
water	39:22	0:0	4	gb
arg	39:26	39:45	3	f->bitstream_buffer
water	39:26	0:0	4	f
op	39:27	0:0	4	->
water	39:29	0:0	4	bitstream_buffer
arg	39:47	39:65	3	8*bitstream_size
water	39:47	0:0	4	8
op	39:49	0:0	4	*
water	39:51	0:0	4	bitstream_size
water	39:66	0:0	2	;
water	40:4	0:0	2	wordstream_offset
op	40:22	0:0	2	=
water	40:24	0:0	2	extra
op	40:30	0:0	2	+
water	40:32	0:0	2	bitstream_size
water	40:46	0:0	2	;
water	41:4	0:0	2	bytestream_offset
op	41:22	0:0	2	=
water	41:24	0:0	2	extra
op	41:30	0:0	2	+
water	41:32	0:0	2	bitstream_size
op	41:47	0:0	2	+
water	41:49	0:0	2	wordstream_size
water	41:64	0:0	2	;
call	42:4	43:47	2	bytestream2_init
arg	42:21	42:27	3	&f->g2
op	42:21	0:0	4	&
water	42:22	0:0	4	f
op	42:23	0:0	4	->
water	42:25	0:0	4	g2
arg	42:29	42:52	3	buf+wordstream_offset
water	42:29	0:0	4	buf
op	42:33	0:0	4	+
water	42:35	0:0	4	wordstream_offset
arg	43:21	43:47	3	length-wordstream_offset
water	43:21	0:0	4	length
op	43:28	0:0	4	-
water	43:30	0:0	4	wordstream_offset
water	43:48	0:0	2	;
call	44:4	45:47	2	bytestream2_init
arg	44:21	44:26	3	&f->g
op	44:21	0:0	4	&
water	44:22	0:0	4	f
op	44:23	0:0	4	->
water	44:25	0:0	4	g
arg	44:28	44:51	3	buf+bytestream_offset
water	44:28	0:0	4	buf
op	44:32	0:0	4	+
water	44:34	0:0	4	bytestream_offset
arg	45:21	45:47	3	length-bytestream_offset
water	45:21	0:0	4	length
op	45:28	0:0	4	-
water	45:30	0:0	4	bytestream_offset
water	45:48	0:0	2	;
call	46:4	46:24	2	init_mv
arg	46:12	46:13	3	f
water	46:12	0:0	4	f
arg	46:15	46:24	3	width*2
water	46:15	0:0	4	width
op	46:21	0:0	4	*
water	46:23	0:0	4	2
water	46:25	0:0	2	;
for	47:4	53:4	2	(y = 0 ;y < height;y += 8)
forinit	47:9	47:14	3	y = 0 ;
water	47:9	0:0	4	y
op	47:11	0:0	4	=
water	47:13	0:0	4	0
water	47:14	0:0	4	;
cond	47:16	47:20	3	y < height
water	47:16	0:0	4	y
op	47:18	0:0	4	<
water	47:20	0:0	4	height
forexpr	47:28	47:33	3	y += 8
water	47:28	0:0	4	y
op	47:30	0:0	4	+=
water	47:33	0:0	4	8
stmts	47:36	53:4	3	
water	47:36	0:0	4	{
for	48:8	50:26	4	(x = 0 ;x < width;x += 8)
forinit	48:13	48:18	5	x = 0 ;
water	48:13	0:0	6	x
op	48:15	0:0	6	=
water	48:17	0:0	6	0
water	48:18	0:0	6	;
cond	48:20	48:24	5	x < width
water	48:20	0:0	6	x
op	48:22	0:0	6	<
water	48:24	0:0	6	width
forexpr	48:31	48:36	5	x += 8
water	48:31	0:0	6	x
op	48:33	0:0	6	+=
water	48:36	0:0	6	8
stmts	49:12	50:26	5	
if	49:12	50:26	6	(( ret =decode_p_block (f ,dst + x ,src + x ,3 ,3 ,width ) ) < 0)
cond	49:16	49:75	7	( ret =decode_p_block (f ,dst + x ,src + x ,3 ,3 ,width ) ) < 0
water	49:16	0:0	8	(
water	49:17	0:0	8	ret
op	49:21	0:0	8	=
call	49:23	49:70	8	decode_p_block
arg	49:38	49:39	9	f
water	49:38	0:0	10	f
arg	49:41	49:48	9	dst+x
water	49:41	0:0	10	dst
op	49:45	0:0	10	+
water	49:47	0:0	10	x
arg	49:50	49:57	9	src+x
water	49:50	0:0	10	src
op	49:54	0:0	10	+
water	49:56	0:0	10	x
arg	49:59	49:60	9	3
water	49:59	0:0	10	3
arg	49:62	49:63	9	3
water	49:62	0:0	10	3
arg	49:65	49:70	9	width
water	49:65	0:0	10	width
water	49:71	0:0	8	)
op	49:73	0:0	8	<
water	49:75	0:0	8	0
stmts	50:16	50:26	7	
return	50:16	50:26	8	ret
water	50:23	0:0	9	ret
water	51:8	0:0	4	src
op	51:12	0:0	4	+=
water	51:15	0:0	4	8
op	51:17	0:0	4	*
water	51:19	0:0	4	width
water	51:24	0:0	4	;
water	52:8	0:0	4	dst
op	52:12	0:0	4	+=
water	52:15	0:0	4	8
op	52:17	0:0	4	*
water	52:19	0:0	4	width
water	52:24	0:0	4	;
water	53:4	0:0	4	}
return	54:4	54:12	2	0
water	54:11	0:0	3	0
