func	1:0	20:0	0	static void	recombine_block_il
params	1:30	0:0	1	
param	1:31	1:43	2	int16_t *	dst
param	1:45	1:64	2	const uint8_t *	scan
param	2:31	2:45	2	int16_t * *	base
param	2:47	2:60	2	int16_t * *	ext
param	3:31	3:43	2	int	block_no
stmnts	0:0	19:4	1	
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
if	6:4	15:4	2	(block_no < 2)
cond	6:8	6:19	3	block_no < 2
water	6:8	0:0	4	block_no
op	6:17	0:0	4	<
water	6:19	0:0	4	2
stmts	6:22	15:4	3	
water	6:22	0:0	4	{
for	7:8	14:8	4	(i = 0 ;i < 8;i ++)
forinit	7:13	7:18	5	i = 0 ;
water	7:13	0:0	6	i
op	7:15	0:0	6	=
water	7:17	0:0	6	0
water	7:18	0:0	6	;
cond	7:20	7:24	5	i < 8
water	7:20	0:0	6	i
op	7:22	0:0	6	<
water	7:24	0:0	6	8
forexpr	7:27	7:28	5	i ++
water	7:27	0:0	6	i
op	7:28	0:0	6	++
stmts	7:32	14:8	5	
water	7:32	0:0	6	{
for	8:12	9:53	6	(j = 0 ;j < 4;j ++)
forinit	8:17	8:22	7	j = 0 ;
water	8:17	0:0	8	j
op	8:19	0:0	8	=
water	8:21	0:0	8	0
water	8:22	0:0	8	;
cond	8:24	8:28	7	j < 4
water	8:24	0:0	8	j
op	8:26	0:0	8	<
water	8:28	0:0	8	4
forexpr	8:31	8:32	7	j ++
water	8:31	0:0	8	j
op	8:32	0:0	8	++
stmts	9:16	9:53	7	
water	9:16	0:0	8	dst
op	9:19	0:0	8	[
water	9:20	0:0	8	scan
op	9:24	0:0	8	[
water	9:25	0:0	8	i
op	9:27	0:0	8	*
water	9:29	0:0	8	8
op	9:31	0:0	8	+
water	9:33	0:0	8	j
op	9:34	0:0	8	]
op	9:35	0:0	8	]
op	9:41	0:0	8	=
water	9:43	0:0	8	(
op	9:44	0:0	8	*
water	9:45	0:0	8	base
water	9:49	0:0	8	)
op	9:50	0:0	8	[
water	9:51	0:0	8	j
op	9:52	0:0	8	]
water	9:53	0:0	8	;
for	10:12	11:52	6	(j = 0 ;j < 4;j ++)
forinit	10:17	10:22	7	j = 0 ;
water	10:17	0:0	8	j
op	10:19	0:0	8	=
water	10:21	0:0	8	0
water	10:22	0:0	8	;
cond	10:24	10:28	7	j < 4
water	10:24	0:0	8	j
op	10:26	0:0	8	<
water	10:28	0:0	8	4
forexpr	10:31	10:32	7	j ++
water	10:31	0:0	8	j
op	10:32	0:0	8	++
stmts	11:16	11:52	7	
water	11:16	0:0	8	dst
op	11:19	0:0	8	[
water	11:20	0:0	8	scan
op	11:24	0:0	8	[
water	11:25	0:0	8	i
op	11:27	0:0	8	*
water	11:29	0:0	8	8
op	11:31	0:0	8	+
water	11:33	0:0	8	j
op	11:35	0:0	8	+
water	11:37	0:0	8	4
op	11:38	0:0	8	]
op	11:39	0:0	8	]
op	11:41	0:0	8	=
water	11:43	0:0	8	(
op	11:44	0:0	8	*
water	11:45	0:0	8	ext
water	11:48	0:0	8	)
op	11:49	0:0	8	[
water	11:50	0:0	8	j
op	11:51	0:0	8	]
water	11:52	0:0	8	;
op	12:12	0:0	6	*
water	12:13	0:0	6	base
op	12:18	0:0	6	+=
water	12:21	0:0	6	4
water	12:22	0:0	6	;
op	13:12	0:0	6	*
water	13:13	0:0	6	ext
op	13:18	0:0	6	+=
water	13:21	0:0	6	4
water	13:22	0:0	6	;
water	14:8	0:0	6	}
water	15:4	0:0	4	}
else	15:6	19:4	2
stmts	15:11	19:4	3	
water	15:11	0:0	4	{
for	16:8	17:36	4	(i = 0 ;i < 64;i ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:24	5	i < 64
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	64
forexpr	16:28	16:29	5	i ++
water	16:28	0:0	6	i
op	16:29	0:0	6	++
stmts	17:12	17:36	5	
water	17:12	0:0	6	dst
op	17:15	0:0	6	[
water	17:16	0:0	6	scan
op	17:20	0:0	6	[
water	17:21	0:0	6	i
op	17:22	0:0	6	]
op	17:23	0:0	6	]
op	17:25	0:0	6	=
water	17:27	0:0	6	(
op	17:28	0:0	6	*
water	17:29	0:0	6	ext
water	17:32	0:0	6	)
op	17:33	0:0	6	[
water	17:34	0:0	6	i
op	17:35	0:0	6	]
water	17:36	0:0	6	;
op	18:8	0:0	4	*
water	18:9	0:0	4	ext
op	18:13	0:0	4	+=
water	18:16	0:0	4	64
water	18:18	0:0	4	;
water	19:4	0:0	4	}
