func	1:0	147:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	146:14	1	
decl	3:4	3:37	2	AVFormatContext	*input_ctx
op	3:31	0:0	2	=
water	3:33	0:0	2	NULL
decl	4:4	4:29	2	AVStream	*video_st
op	4:23	0:0	2	=
water	4:25	0:0	2	NULL
decl	5:4	5:38	2	AVCodecContext	*decoder_ctx
op	5:32	0:0	2	=
water	5:34	0:0	2	NULL
decl	6:4	6:26	2	const AVCodec	*decoder
decl	7:4	7:24	2	AVPacket	pkt
op	7:17	0:0	2	=
water	7:19	0:0	2	{
water	7:21	0:0	2	0
water	7:23	0:0	2	}
decl	8:4	8:25	2	AVFrame	*frame
op	8:19	0:0	2	=
water	8:21	0:0	2	NULL
decl	9:4	9:35	2	DecodeContext	decode
op	9:25	0:0	2	=
water	9:27	0:0	2	{
water	9:29	0:0	2	NULL
water	9:34	0:0	2	}
decl	10:4	10:23	2	Display	*dpy
op	10:17	0:0	2	=
water	10:19	0:0	2	NULL
decl	11:4	11:34	2	int	va_ver_major
water	11:20	0:0	2	,
decl	11:4	11:34	2	int	va_ver_minor
decl	12:4	12:40	2	mfxIMPL	mfx_impl
op	12:21	0:0	2	=
water	12:23	0:0	2	MFX_IMPL_AUTO_ANY
decl	13:4	13:37	2	mfxVersion	mfx_ver
op	13:23	0:0	2	=
water	13:25	0:0	2	{
water	13:27	0:0	2	{
water	13:29	0:0	2	1
water	13:30	0:0	2	,
water	13:32	0:0	2	1
water	13:34	0:0	2	}
water	13:36	0:0	2	}
decl	14:4	21:5	2	mfxFrameAllocator	frame_allocator
op	14:38	0:0	2	=
water	14:40	0:0	2	{
op	15:8	0:0	2	.
water	15:9	0:0	2	pthis
op	15:15	0:0	2	=
op	15:17	0:0	2	&
water	15:18	0:0	2	decode
water	15:24	0:0	2	,
op	16:8	0:0	2	.
water	16:9	0:0	2	Alloc
op	16:15	0:0	2	=
water	16:17	0:0	2	frame_alloc
water	16:28	0:0	2	,
op	17:8	0:0	2	.
water	17:9	0:0	2	Lock
op	17:15	0:0	2	=
water	17:17	0:0	2	frame_lock
water	17:27	0:0	2	,
op	18:8	0:0	2	.
water	18:9	0:0	2	Unlock
op	18:16	0:0	2	=
water	18:18	0:0	2	frame_unlock
water	18:30	0:0	2	,
op	19:8	0:0	2	.
water	19:9	0:0	2	GetHDL
op	19:16	0:0	2	=
water	19:18	0:0	2	frame_get_hdl
water	19:31	0:0	2	,
op	20:8	0:0	2	.
water	20:9	0:0	2	Free
op	20:16	0:0	2	=
water	20:18	0:0	2	frame_free
water	20:28	0:0	2	,
water	21:4	0:0	2	}
decl	22:4	22:34	2	AVIOContext	*output_ctx
op	22:28	0:0	2	=
water	22:30	0:0	2	NULL
decl	23:4	23:19	2	int	ret
water	23:11	0:0	2	,
decl	23:4	23:19	2	int	i
water	23:14	0:0	2	,
decl	23:4	23:19	2	int	err
call	24:4	24:20	2	av_register_all
water	24:21	0:0	2	;
if	25:4	28:4	2	(argc < 3)
cond	25:8	25:15	3	argc < 3
water	25:8	0:0	4	argc
op	25:13	0:0	4	<
water	25:15	0:0	4	3
stmts	25:18	28:4	3	
water	25:18	0:0	4	{
call	26:8	26:73	4	fprintf
arg	26:16	26:22	5	stderr
water	26:16	0:0	6	stderr
arg	26:24	26:64	5	"Usage: %s <input file> <output file>\n"
water	26:24	0:0	6	"Usage: %s <input file> <output file>\n"
arg	26:66	26:73	5	argv[0]
water	26:66	0:0	6	argv
op	26:70	0:0	6	[
water	26:71	0:0	6	0
op	26:72	0:0	6	]
water	26:74	0:0	4	;
return	27:8	27:16	4	1
water	27:15	0:0	5	1
water	28:4	0:0	4	}
water	30:4	0:0	2	ret
op	30:8	0:0	2	=
call	30:10	30:61	2	avformat_open_input
arg	30:30	30:40	3	&input_ctx
op	30:30	0:0	4	&
water	30:31	0:0	4	input_ctx
arg	30:42	30:49	3	argv[1]
water	30:42	0:0	4	argv
op	30:46	0:0	4	[
water	30:47	0:0	4	1
op	30:48	0:0	4	]
arg	30:51	30:55	3	NULL
water	30:51	0:0	4	NULL
arg	30:57	30:61	3	NULL
water	30:57	0:0	4	NULL
water	30:62	0:0	2	;
if	31:4	34:4	2	(ret < 0)
cond	31:8	31:14	3	ret < 0
water	31:8	0:0	4	ret
op	31:12	0:0	4	<
water	31:14	0:0	4	0
stmts	31:17	34:4	3	
water	31:17	0:0	4	{
call	32:8	32:64	4	fprintf
arg	32:16	32:22	5	stderr
water	32:16	0:0	6	stderr
arg	32:24	32:55	5	"Cannot open input file '%s': "
water	32:24	0:0	6	"Cannot open input file '%s': "
arg	32:57	32:64	5	argv[1]
water	32:57	0:0	6	argv
op	32:61	0:0	6	[
water	32:62	0:0	6	1
op	32:63	0:0	6	]
water	32:65	0:0	4	;
goto	33:8	33:19	4	finish
water	33:13	0:0	5	finish
water	34:4	0:0	4	}
for	36:4	42:4	2	(i = 0 ;i < input_ctx -> nb_streams;i ++)
forinit	36:9	36:14	3	i = 0 ;
water	36:9	0:0	4	i
op	36:11	0:0	4	=
water	36:13	0:0	4	0
water	36:14	0:0	4	;
cond	36:16	36:31	3	i < input_ctx -> nb_streams
water	36:16	0:0	4	i
op	36:18	0:0	4	<
water	36:20	0:0	4	input_ctx
op	36:29	0:0	4	->
water	36:31	0:0	4	nb_streams
forexpr	36:43	36:44	3	i ++
water	36:43	0:0	4	i
op	36:44	0:0	4	++
stmts	36:48	42:4	3	
water	36:48	0:0	4	{
decl	37:8	37:44	4	AVStream	*st
op	37:21	0:0	4	=
water	37:23	0:0	4	input_ctx
op	37:32	0:0	4	->
water	37:34	0:0	4	streams
op	37:41	0:0	4	[
water	37:42	0:0	4	i
op	37:43	0:0	4	]
if	38:8	39:25	4	(st -> codec -> codec_id == AV_CODEC_ID_H264 && ! video_st)
cond	38:12	38:56	5	st -> codec -> codec_id == AV_CODEC_ID_H264 && ! video_st
water	38:12	0:0	6	st
op	38:14	0:0	6	->
water	38:16	0:0	6	codec
op	38:21	0:0	6	->
water	38:23	0:0	6	codec_id
op	38:32	0:0	6	==
water	38:35	0:0	6	AV_CODEC_ID_H264
op	38:52	0:0	6	&&
op	38:55	0:0	6	!
water	38:56	0:0	6	video_st
stmts	39:12	39:25	5	
water	39:12	0:0	6	video_st
op	39:21	0:0	6	=
water	39:23	0:0	6	st
water	39:25	0:0	6	;
else	40:8	41:39	4
stmts	41:12	41:39	5	
water	41:12	0:0	6	st
op	41:14	0:0	6	->
water	41:16	0:0	6	discard
op	41:24	0:0	6	=
water	41:26	0:0	6	AVDISCARD_ALL
water	41:39	0:0	6	;
water	42:4	0:0	4	}
if	43:4	46:4	2	(! video_st)
cond	43:8	43:9	3	! video_st
op	43:8	0:0	4	!
water	43:9	0:0	4	video_st
stmts	43:19	46:4	3	
water	43:19	0:0	4	{
call	44:8	44:67	4	fprintf
arg	44:16	44:22	5	stderr
water	44:16	0:0	6	stderr
arg	44:24	44:67	5	"No H.264 video stream in the input file\n"
water	44:24	0:0	6	"No H.264 video stream in the input file\n"
water	44:68	0:0	4	;
goto	45:8	45:19	4	finish
water	45:13	0:0	5	finish
water	46:4	0:0	4	}
water	48:4	0:0	2	dpy
op	48:8	0:0	2	=
call	48:10	48:27	2	XOpenDisplay
arg	48:23	48:27	3	NULL
water	48:23	0:0	4	NULL
water	48:28	0:0	2	;
if	49:4	52:4	2	(! dpy)
cond	49:8	49:9	3	! dpy
op	49:8	0:0	4	!
water	49:9	0:0	4	dpy
stmts	49:14	52:4	3	
water	49:14	0:0	4	{
call	50:8	50:53	4	fprintf
arg	50:16	50:22	5	stderr
water	50:16	0:0	6	stderr
arg	50:24	50:53	5	"Cannot open the X display\n"
water	50:24	0:0	6	"Cannot open the X display\n"
water	50:54	0:0	4	;
goto	51:8	51:19	4	finish
water	51:13	0:0	5	finish
water	52:4	0:0	4	}
water	53:4	0:0	2	decode
op	53:10	0:0	2	.
water	53:11	0:0	2	va_dpy
op	53:18	0:0	2	=
call	53:20	53:36	2	vaGetDisplay
arg	53:33	53:36	3	dpy
water	53:33	0:0	4	dpy
water	53:37	0:0	2	;
if	54:4	57:4	2	(! decode . va_dpy)
cond	54:8	54:16	3	! decode . va_dpy
op	54:8	0:0	4	!
water	54:9	0:0	4	decode
op	54:15	0:0	4	.
water	54:16	0:0	4	va_dpy
stmts	54:24	57:4	3	
water	54:24	0:0	4	{
call	55:8	55:54	4	fprintf
arg	55:16	55:22	5	stderr
water	55:16	0:0	6	stderr
arg	55:24	55:54	5	"Cannot open the VA display\n"
water	55:24	0:0	6	"Cannot open the VA display\n"
water	55:55	0:0	4	;
goto	56:8	56:19	4	finish
water	56:13	0:0	5	finish
water	57:4	0:0	4	}
water	58:4	0:0	2	err
op	58:8	0:0	2	=
call	58:10	58:66	2	vaInitialize
arg	58:23	58:36	3	decode.va_dpy
water	58:23	0:0	4	decode
op	58:29	0:0	4	.
water	58:30	0:0	4	va_dpy
arg	58:38	58:51	3	&va_ver_major
op	58:38	0:0	4	&
water	58:39	0:0	4	va_ver_major
arg	58:53	58:66	3	&va_ver_minor
op	58:53	0:0	4	&
water	58:54	0:0	4	va_ver_minor
water	58:67	0:0	2	;
if	59:4	62:4	2	(err != VA_STATUS_SUCCESS)
cond	59:8	59:15	3	err != VA_STATUS_SUCCESS
water	59:8	0:0	4	err
op	59:12	0:0	4	!=
water	59:15	0:0	4	VA_STATUS_SUCCESS
stmts	59:34	62:4	3	
water	59:34	0:0	4	{
call	60:8	60:69	4	fprintf
arg	60:16	60:22	5	stderr
water	60:16	0:0	6	stderr
arg	60:24	60:52	5	"Cannot initialize VA: %s\n"
water	60:24	0:0	6	"Cannot initialize VA: %s\n"
arg	60:54	60:69	5	vaErrorStr(err)
call	60:54	60:68	6	vaErrorStr
arg	60:65	60:68	7	err
water	60:65	0:0	8	err
water	60:70	0:0	4	;
goto	61:8	61:19	4	finish
water	61:13	0:0	5	finish
water	62:4	0:0	4	}
call	63:4	63:73	2	fprintf
arg	63:12	63:18	3	stderr
water	63:12	0:0	4	stderr
arg	63:20	63:45	3	"Initialized VA v%d.%d\n"
water	63:20	0:0	4	"Initialized VA v%d.%d\n"
arg	63:47	63:59	3	va_ver_major
water	63:47	0:0	4	va_ver_major
arg	63:61	63:73	3	va_ver_minor
water	63:61	0:0	4	va_ver_minor
water	63:74	0:0	2	;
water	65:4	0:0	2	err
op	65:8	0:0	2	=
call	65:10	65:57	2	MFXInit
arg	65:18	65:26	3	mfx_impl
water	65:18	0:0	4	mfx_impl
arg	65:28	65:36	3	&mfx_ver
op	65:28	0:0	4	&
water	65:29	0:0	4	mfx_ver
arg	65:38	65:57	3	&decode.mfx_session
op	65:38	0:0	4	&
water	65:39	0:0	4	decode
op	65:45	0:0	4	.
water	65:46	0:0	4	mfx_session
water	65:58	0:0	2	;
if	66:4	69:4	2	(err != MFX_ERR_NONE)
cond	66:8	66:15	3	err != MFX_ERR_NONE
water	66:8	0:0	4	err
op	66:12	0:0	4	!=
water	66:15	0:0	4	MFX_ERR_NONE
stmts	66:29	69:4	3	
water	66:29	0:0	4	{
call	67:8	67:61	4	fprintf
arg	67:16	67:22	5	stderr
water	67:16	0:0	6	stderr
arg	67:24	67:61	5	"Error initializing an MFX session\n"
water	67:24	0:0	6	"Error initializing an MFX session\n"
water	67:62	0:0	4	;
goto	68:8	68:19	4	finish
water	68:13	0:0	5	finish
water	69:4	0:0	4	}
call	70:4	70:83	2	MFXVideoCORE_SetHandle
arg	70:27	70:45	3	decode.mfx_session
water	70:27	0:0	4	decode
op	70:33	0:0	4	.
water	70:34	0:0	4	mfx_session
arg	70:47	70:68	3	MFX_HANDLE_VA_DISPLAY
water	70:47	0:0	4	MFX_HANDLE_VA_DISPLAY
arg	70:70	70:83	3	decode.va_dpy
water	70:70	0:0	4	decode
op	70:76	0:0	4	.
water	70:77	0:0	4	va_dpy
water	70:84	0:0	2	;
call	71:4	71:71	2	MFXVideoCORE_SetFrameAllocator
arg	71:35	71:53	3	decode.mfx_session
water	71:35	0:0	4	decode
op	71:41	0:0	4	.
water	71:42	0:0	4	mfx_session
arg	71:55	71:71	3	&frame_allocator
op	71:55	0:0	4	&
water	71:56	0:0	4	frame_allocator
water	71:72	0:0	2	;
water	73:4	0:0	2	decoder
op	73:12	0:0	2	=
call	73:14	73:53	2	avcodec_find_decoder_by_name
arg	73:43	73:53	3	"h264_qsv"
water	73:43	0:0	4	"h264_qsv"
water	73:54	0:0	2	;
if	74:4	77:4	2	(! decoder)
cond	74:8	74:9	3	! decoder
op	74:8	0:0	4	!
water	74:9	0:0	4	decoder
stmts	74:18	77:4	3	
water	74:18	0:0	4	{
call	75:8	75:72	4	fprintf
arg	75:16	75:22	5	stderr
water	75:16	0:0	6	stderr
arg	75:24	75:72	5	"The QSV decoder is not present in libavcodec\n"
water	75:24	0:0	6	"The QSV decoder is not present in libavcodec\n"
water	75:73	0:0	4	;
goto	76:8	76:19	4	finish
water	76:13	0:0	5	finish
water	77:4	0:0	4	}
water	78:4	0:0	2	decoder_ctx
op	78:16	0:0	2	=
call	78:18	78:48	2	avcodec_alloc_context3
arg	78:41	78:48	3	decoder
water	78:41	0:0	4	decoder
water	78:49	0:0	2	;
if	79:4	82:4	2	(! decoder_ctx)
cond	79:8	79:9	3	! decoder_ctx
op	79:8	0:0	4	!
water	79:9	0:0	4	decoder_ctx
stmts	79:22	82:4	3	
water	79:22	0:0	4	{
water	80:8	0:0	4	ret
op	80:12	0:0	4	=
call	80:14	80:28	4	AVERROR
arg	80:22	80:28	5	ENOMEM
water	80:22	0:0	6	ENOMEM
water	80:29	0:0	4	;
goto	81:8	81:19	4	finish
water	81:13	0:0	5	finish
water	82:4	0:0	4	}
water	83:4	0:0	2	decoder_ctx
op	83:15	0:0	2	->
water	83:17	0:0	2	codec_id
op	83:26	0:0	2	=
water	83:28	0:0	2	AV_CODEC_ID_H264
water	83:44	0:0	2	;
if	84:4	94:4	2	(video_st -> codec -> extradata_size)
cond	84:8	84:25	3	video_st -> codec -> extradata_size
water	84:8	0:0	4	video_st
op	84:16	0:0	4	->
water	84:18	0:0	4	codec
op	84:23	0:0	4	->
water	84:25	0:0	4	extradata_size
stmts	84:41	94:4	3	
water	84:41	0:0	4	{
water	85:8	0:0	4	decoder_ctx
op	85:19	0:0	4	->
water	85:21	0:0	4	extradata
op	85:31	0:0	4	=
call	85:33	86:72	4	av_mallocz
arg	85:44	86:72	5	video_st->codec->extradata_size+AV_INPUT_BUFFER_PADDING_SIZE
water	85:44	0:0	6	video_st
op	85:52	0:0	6	->
water	85:54	0:0	6	codec
op	85:59	0:0	6	->
water	85:61	0:0	6	extradata_size
op	85:76	0:0	6	+
water	86:44	0:0	6	AV_INPUT_BUFFER_PADDING_SIZE
water	86:73	0:0	4	;
if	87:8	90:8	4	(! decoder_ctx -> extradata)
cond	87:12	87:26	5	! decoder_ctx -> extradata
op	87:12	0:0	6	!
water	87:13	0:0	6	decoder_ctx
op	87:24	0:0	6	->
water	87:26	0:0	6	extradata
stmts	87:37	90:8	5	
water	87:37	0:0	6	{
water	88:12	0:0	6	ret
op	88:16	0:0	6	=
call	88:18	88:32	6	AVERROR
arg	88:26	88:32	7	ENOMEM
water	88:26	0:0	8	ENOMEM
water	88:33	0:0	6	;
goto	89:12	89:23	6	finish
water	89:17	0:0	7	finish
water	90:8	0:0	6	}
call	91:8	92:46	4	memcpy
arg	91:15	91:37	5	decoder_ctx->extradata
water	91:15	0:0	6	decoder_ctx
op	91:26	0:0	6	->
water	91:28	0:0	6	extradata
arg	91:39	91:65	5	video_st->codec->extradata
water	91:39	0:0	6	video_st
op	91:47	0:0	6	->
water	91:49	0:0	6	codec
op	91:54	0:0	6	->
water	91:56	0:0	6	extradata
arg	92:15	92:46	5	video_st->codec->extradata_size
water	92:15	0:0	6	video_st
op	92:23	0:0	6	->
water	92:25	0:0	6	codec
op	92:30	0:0	6	->
water	92:32	0:0	6	extradata_size
water	92:47	0:0	4	;
water	93:8	0:0	4	decoder_ctx
op	93:19	0:0	4	->
water	93:21	0:0	4	extradata_size
op	93:36	0:0	4	=
water	93:38	0:0	4	video_st
op	93:46	0:0	4	->
water	93:48	0:0	4	codec
op	93:53	0:0	4	->
water	93:55	0:0	4	extradata_size
water	93:69	0:0	4	;
water	94:4	0:0	4	}
water	95:4	0:0	2	decoder_ctx
op	95:15	0:0	2	->
water	95:17	0:0	2	refcounted_frames
op	95:35	0:0	2	=
water	95:37	0:0	2	1
water	95:38	0:0	2	;
water	96:4	0:0	2	decoder_ctx
op	96:15	0:0	2	->
water	96:17	0:0	2	opaque
op	96:29	0:0	2	=
op	96:31	0:0	2	&
water	96:32	0:0	2	decode
water	96:38	0:0	2	;
water	97:4	0:0	2	decoder_ctx
op	97:15	0:0	2	->
water	97:17	0:0	2	get_buffer2
op	97:29	0:0	2	=
water	97:31	0:0	2	get_buffer
water	97:41	0:0	2	;
water	98:4	0:0	2	decoder_ctx
op	98:15	0:0	2	->
water	98:17	0:0	2	get_format
op	98:29	0:0	2	=
water	98:31	0:0	2	get_format
water	98:41	0:0	2	;
water	99:4	0:0	2	ret
op	99:8	0:0	2	=
call	99:10	99:47	2	avcodec_open2
arg	99:24	99:35	3	decoder_ctx
water	99:24	0:0	4	decoder_ctx
arg	99:37	99:41	3	NULL
water	99:37	0:0	4	NULL
arg	99:43	99:47	3	NULL
water	99:43	0:0	4	NULL
water	99:48	0:0	2	;
if	100:4	103:4	2	(ret < 0)
cond	100:8	100:14	3	ret < 0
water	100:8	0:0	4	ret
op	100:12	0:0	4	<
water	100:14	0:0	4	0
stmts	100:17	103:4	3	
water	100:17	0:0	4	{
call	101:8	101:53	4	fprintf
arg	101:16	101:22	5	stderr
water	101:16	0:0	6	stderr
arg	101:24	101:53	5	"Error opening the decoder: "
water	101:24	0:0	6	"Error opening the decoder: "
water	101:54	0:0	4	;
goto	102:8	102:19	4	finish
water	102:13	0:0	5	finish
water	103:4	0:0	4	}
water	105:4	0:0	2	ret
op	105:8	0:0	2	=
call	105:10	105:57	2	avio_open
arg	105:20	105:31	3	&output_ctx
op	105:20	0:0	4	&
water	105:21	0:0	4	output_ctx
arg	105:33	105:40	3	argv[2]
water	105:33	0:0	4	argv
op	105:37	0:0	4	[
water	105:38	0:0	4	2
op	105:39	0:0	4	]
arg	105:42	105:57	3	AVIO_FLAG_WRITE
water	105:42	0:0	4	AVIO_FLAG_WRITE
water	105:58	0:0	2	;
if	106:4	109:4	2	(ret < 0)
cond	106:8	106:14	3	ret < 0
water	106:8	0:0	4	ret
op	106:12	0:0	4	<
water	106:14	0:0	4	0
stmts	106:17	109:4	3	
water	106:17	0:0	4	{
call	107:8	107:60	4	fprintf
arg	107:16	107:22	5	stderr
water	107:16	0:0	6	stderr
arg	107:24	107:60	5	"Error opening the output context: "
water	107:24	0:0	6	"Error opening the output context: "
water	107:61	0:0	4	;
goto	108:8	108:19	4	finish
water	108:13	0:0	5	finish
water	109:4	0:0	4	}
water	110:4	0:0	2	frame
op	110:10	0:0	2	=
call	110:12	110:27	2	av_frame_alloc
water	110:28	0:0	2	;
if	111:4	114:4	2	(! frame)
cond	111:8	111:9	3	! frame
op	111:8	0:0	4	!
water	111:9	0:0	4	frame
stmts	111:16	114:4	3	
water	111:16	0:0	4	{
water	112:8	0:0	4	ret
op	112:12	0:0	4	=
call	112:14	112:28	4	AVERROR
arg	112:22	112:28	5	ENOMEM
water	112:22	0:0	6	ENOMEM
water	112:29	0:0	4	;
goto	113:8	113:19	4	finish
water	113:13	0:0	5	finish
water	114:4	0:0	4	}
while	116:4	123:4	2	(ret >= 0)
cond	116:11	116:18	3	ret >= 0
water	116:11	0:0	4	ret
op	116:15	0:0	4	>=
water	116:18	0:0	4	0
stmts	116:21	123:4	3	
water	116:21	0:0	4	{
water	117:8	0:0	4	ret
op	117:12	0:0	4	=
call	117:14	117:43	4	av_read_frame
arg	117:28	117:37	5	input_ctx
water	117:28	0:0	6	input_ctx
arg	117:39	117:43	5	&pkt
op	117:39	0:0	6	&
water	117:40	0:0	6	pkt
water	117:44	0:0	4	;
if	118:8	119:17	4	(ret < 0)
cond	118:12	118:18	5	ret < 0
water	118:12	0:0	6	ret
op	118:16	0:0	6	<
water	118:18	0:0	6	0
stmts	119:12	119:17	5	
break	119:12	119:17	6	
if	120:8	121:78	4	(pkt . stream_index == video_st -> index)
cond	120:12	120:42	5	pkt . stream_index == video_st -> index
water	120:12	0:0	6	pkt
op	120:15	0:0	6	.
water	120:16	0:0	6	stream_index
op	120:29	0:0	6	==
water	120:32	0:0	6	video_st
op	120:40	0:0	6	->
water	120:42	0:0	6	index
stmts	121:12	121:78	5	
water	121:12	0:0	6	ret
op	121:16	0:0	6	=
call	121:18	121:77	6	decode_packet
arg	121:32	121:39	7	&decode
op	121:32	0:0	8	&
water	121:33	0:0	8	decode
arg	121:41	121:52	7	decoder_ctx
water	121:41	0:0	8	decoder_ctx
arg	121:54	121:59	7	frame
water	121:54	0:0	8	frame
arg	121:61	121:65	7	&pkt
op	121:61	0:0	8	&
water	121:62	0:0	8	pkt
arg	121:67	121:77	7	output_ctx
water	121:67	0:0	8	output_ctx
water	121:78	0:0	6	;
call	122:8	122:28	4	av_packet_unref
arg	122:24	122:28	5	&pkt
op	122:24	0:0	6	&
water	122:25	0:0	6	pkt
water	122:29	0:0	4	;
water	123:4	0:0	4	}
water	125:4	0:0	2	pkt
op	125:7	0:0	2	.
water	125:8	0:0	2	data
op	125:13	0:0	2	=
water	125:15	0:0	2	NULL
water	125:19	0:0	2	;
water	126:4	0:0	2	pkt
op	126:7	0:0	2	.
water	126:8	0:0	2	size
op	126:13	0:0	2	=
water	126:15	0:0	2	0
water	126:16	0:0	2	;
water	127:4	0:0	2	ret
op	127:8	0:0	2	=
call	127:10	127:69	2	decode_packet
arg	127:24	127:31	3	&decode
op	127:24	0:0	4	&
water	127:25	0:0	4	decode
arg	127:33	127:44	3	decoder_ctx
water	127:33	0:0	4	decoder_ctx
arg	127:46	127:51	3	frame
water	127:46	0:0	4	frame
arg	127:53	127:57	3	&pkt
op	127:53	0:0	4	&
water	127:54	0:0	4	pkt
arg	127:59	127:69	3	output_ctx
water	127:59	0:0	4	output_ctx
water	127:70	0:0	2	;
label	128:0	128:6	2	finish :
if	129:4	133:4	2	(ret < 0)
cond	129:8	129:14	3	ret < 0
water	129:8	0:0	4	ret
op	129:12	0:0	4	<
water	129:14	0:0	4	0
stmts	129:17	133:4	3	
water	129:17	0:0	4	{
decl	130:8	130:22	4	char	buf[1024]
call	131:8	131:41	4	av_strerror
arg	131:20	131:23	5	ret
water	131:20	0:0	6	ret
arg	131:25	131:28	5	buf
water	131:25	0:0	6	buf
arg	131:30	131:41	5	sizeof(buf)
op	131:30	0:0	6	sizeof
water	131:36	0:0	6	(
water	131:37	0:0	6	buf
water	131:40	0:0	6	)
water	131:42	0:0	4	;
call	132:8	132:35	4	fprintf
arg	132:16	132:22	5	stderr
water	132:16	0:0	6	stderr
arg	132:24	132:30	5	"%s\n"
water	132:24	0:0	6	"%s\n"
arg	132:32	132:35	5	buf
water	132:32	0:0	6	buf
water	132:36	0:0	4	;
water	133:4	0:0	4	}
call	134:4	134:35	2	avformat_close_input
arg	134:25	134:35	3	&input_ctx
op	134:25	0:0	4	&
water	134:26	0:0	4	input_ctx
water	134:36	0:0	2	;
call	135:4	135:24	2	av_frame_free
arg	135:18	135:24	3	&frame
op	135:18	0:0	4	&
water	135:19	0:0	4	frame
water	135:25	0:0	2	;
if	136:4	137:36	2	(decode . mfx_session)
cond	136:8	136:15	3	decode . mfx_session
water	136:8	0:0	4	decode
op	136:14	0:0	4	.
water	136:15	0:0	4	mfx_session
stmts	137:8	137:36	3	
call	137:8	137:35	4	MFXClose
arg	137:17	137:35	5	decode.mfx_session
water	137:17	0:0	6	decode
op	137:23	0:0	6	.
water	137:24	0:0	6	mfx_session
water	137:36	0:0	4	;
if	138:4	139:34	2	(decode . va_dpy)
cond	138:8	138:15	3	decode . va_dpy
water	138:8	0:0	4	decode
op	138:14	0:0	4	.
water	138:15	0:0	4	va_dpy
stmts	139:8	139:34	3	
call	139:8	139:33	4	vaTerminate
arg	139:20	139:33	5	decode.va_dpy
water	139:20	0:0	6	decode
op	139:26	0:0	6	.
water	139:27	0:0	6	va_dpy
water	139:34	0:0	4	;
if	140:4	141:26	2	(dpy)
cond	140:8	140:8	3	dpy
water	140:8	0:0	4	dpy
stmts	141:8	141:26	3	
call	141:8	141:25	4	XCloseDisplay
arg	141:22	141:25	5	dpy
water	141:22	0:0	6	dpy
water	141:26	0:0	4	;
if	142:4	143:47	2	(decoder_ctx)
cond	142:8	142:8	3	decoder_ctx
water	142:8	0:0	4	decoder_ctx
stmts	143:8	143:47	3	
call	143:8	143:46	4	av_freep
arg	143:17	143:46	5	&decoder_ctx->hwaccel_context
op	143:17	0:0	6	&
water	143:18	0:0	6	decoder_ctx
op	143:29	0:0	6	->
water	143:31	0:0	6	hwaccel_context
water	143:47	0:0	4	;
call	144:4	144:37	2	avcodec_free_context
arg	144:25	144:37	3	&decoder_ctx
op	144:25	0:0	4	&
water	144:26	0:0	4	decoder_ctx
water	144:38	0:0	2	;
call	145:4	145:25	2	avio_close
arg	145:15	145:25	3	output_ctx
water	145:15	0:0	4	output_ctx
water	145:26	0:0	2	;
return	146:4	146:14	2	ret
water	146:11	0:0	3	ret
