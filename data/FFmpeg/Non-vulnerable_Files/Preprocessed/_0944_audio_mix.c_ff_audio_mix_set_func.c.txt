func	1:0	37:0	0	void	ff_audio_mix_set_func
params	1:26	0:0	1	
param	1:27	1:39	2	AudioMix *	am
param	1:41	1:64	2	enum AVSampleFormat	fmt
param	2:27	2:57	2	enum AVMixCoeffType	coeff_type
param	2:59	2:74	2	int	in_channels
param	3:27	3:43	2	int	out_channels
param	3:45	3:58	2	int	ptr_align
param	3:60	3:77	2	int	samples_align
param	4:27	4:44	2	const char *	descr
param	4:46	4:60	2	void *	mix_func
stmnts	6:4	36:4	1	
if	6:4	36:4	2	(fmt == am -> fmt && coeff_type == am -> coeff_type && ( in_channels == am -> in_matrix_channels || in_channels == 0 ) && ( out_channels == am -> out_matrix_channels || out_channels == 0 ))
cond	6:8	8:69	3	fmt == am -> fmt && coeff_type == am -> coeff_type && ( in_channels == am -> in_matrix_channels || in_channels == 0 ) && ( out_channels == am -> out_matrix_channels || out_channels == 0 )
water	6:8	0:0	4	fmt
op	6:12	0:0	4	==
water	6:15	0:0	4	am
op	6:17	0:0	4	->
water	6:19	0:0	4	fmt
op	6:23	0:0	4	&&
water	6:26	0:0	4	coeff_type
op	6:37	0:0	4	==
water	6:40	0:0	4	am
op	6:42	0:0	4	->
water	6:44	0:0	4	coeff_type
op	6:55	0:0	4	&&
water	7:8	0:0	4	(
water	7:10	0:0	4	in_channels
op	7:22	0:0	4	==
water	7:26	0:0	4	am
op	7:28	0:0	4	->
water	7:30	0:0	4	in_matrix_channels
op	7:49	0:0	4	||
water	7:53	0:0	4	in_channels
op	7:65	0:0	4	==
water	7:68	0:0	4	0
water	7:69	0:0	4	)
op	7:71	0:0	4	&&
water	8:8	0:0	4	(
water	8:9	0:0	4	out_channels
op	8:22	0:0	4	==
water	8:25	0:0	4	am
op	8:27	0:0	4	->
water	8:29	0:0	4	out_matrix_channels
op	8:49	0:0	4	||
water	8:52	0:0	4	out_channels
op	8:65	0:0	4	==
water	8:68	0:0	4	0
water	8:69	0:0	4	)
stmts	8:72	36:4	3	
water	8:72	0:0	4	{
decl	9:8	9:25	4	char	chan_str[16]
water	10:8	0:0	4	am
op	10:10	0:0	4	->
water	10:12	0:0	4	mix
op	10:26	0:0	4	=
water	10:28	0:0	4	mix_func
water	10:36	0:0	4	;
water	11:8	0:0	4	am
op	11:10	0:0	4	->
water	11:12	0:0	4	func_descr
op	11:26	0:0	4	=
water	11:28	0:0	4	descr
water	11:33	0:0	4	;
water	12:8	0:0	4	am
op	12:10	0:0	4	->
water	12:12	0:0	4	ptr_align
op	12:26	0:0	4	=
water	12:28	0:0	4	ptr_align
water	12:37	0:0	4	;
water	13:8	0:0	4	am
op	13:10	0:0	4	->
water	13:12	0:0	4	samples_align
op	13:26	0:0	4	=
water	13:28	0:0	4	samples_align
water	13:41	0:0	4	;
if	14:8	17:8	4	(ptr_align == 1 && samples_align == 1)
cond	14:12	14:47	5	ptr_align == 1 && samples_align == 1
water	14:12	0:0	6	ptr_align
op	14:22	0:0	6	==
water	14:25	0:0	6	1
op	14:27	0:0	6	&&
water	14:30	0:0	6	samples_align
op	14:44	0:0	6	==
water	14:47	0:0	6	1
stmts	14:50	17:8	5	
water	14:50	0:0	6	{
water	15:12	0:0	6	am
op	15:14	0:0	6	->
water	15:16	0:0	6	mix_generic
op	15:35	0:0	6	=
water	15:37	0:0	6	mix_func
water	15:45	0:0	6	;
water	16:12	0:0	6	am
op	16:14	0:0	6	->
water	16:16	0:0	6	func_descr_generic
op	16:35	0:0	6	=
water	16:37	0:0	6	descr
water	16:42	0:0	6	;
water	17:8	0:0	6	}
else	17:10	19:8	4
stmts	17:15	19:8	5	
water	17:15	0:0	6	{
water	18:12	0:0	6	am
op	18:14	0:0	6	->
water	18:16	0:0	6	has_optimized_func
op	18:35	0:0	6	=
water	18:37	0:0	6	1
water	18:38	0:0	6	;
water	19:8	0:0	6	}
if	20:8	27:8	4	(in_channels)
cond	20:12	20:12	5	in_channels
water	20:12	0:0	6	in_channels
stmts	20:25	27:8	5	
water	20:25	0:0	6	{
if	21:12	23:51	6	(out_channels)
cond	21:16	21:16	7	out_channels
water	21:16	0:0	8	out_channels
stmts	22:16	23:51	7	
call	22:16	23:50	8	snprintf
arg	22:25	22:33	9	chan_str
water	22:25	0:0	10	chan_str
arg	22:35	22:51	9	sizeof(chan_str)
op	22:35	0:0	10	sizeof
water	22:41	0:0	10	(
water	22:42	0:0	10	chan_str
water	22:50	0:0	10	)
arg	22:53	22:66	9	"[%d to %d] "
water	22:53	0:0	10	"[%d to %d] "
arg	23:25	23:36	9	in_channels
water	23:25	0:0	10	in_channels
arg	23:38	23:50	9	out_channels
water	23:38	0:0	10	out_channels
water	23:51	0:0	8	;
else	24:12	26:37	6
stmts	25:16	26:37	7	
call	25:16	26:36	8	snprintf
arg	25:25	25:33	9	chan_str
water	25:25	0:0	10	chan_str
arg	25:35	25:51	9	sizeof(chan_str)
op	25:35	0:0	10	sizeof
water	25:41	0:0	10	(
water	25:42	0:0	10	chan_str
water	25:50	0:0	10	)
arg	25:53	25:67	9	"[%d to any] "
water	25:53	0:0	10	"[%d to any] "
arg	26:25	26:36	9	in_channels
water	26:25	0:0	10	in_channels
water	26:37	0:0	8	;
water	27:8	0:0	6	}
else	27:10	30:8	4
stmts	27:15	30:8	5	
if	27:15	30:8	6	(out_channels)
cond	27:19	27:19	7	out_channels
water	27:19	0:0	8	out_channels
stmts	27:33	30:8	7	
water	27:33	0:0	8	{
call	28:16	29:37	8	snprintf
arg	28:25	28:33	9	chan_str
water	28:25	0:0	10	chan_str
arg	28:35	28:51	9	sizeof(chan_str)
op	28:35	0:0	10	sizeof
water	28:41	0:0	10	(
water	28:42	0:0	10	chan_str
water	28:50	0:0	10	)
arg	28:53	28:67	9	"[any to %d] "
water	28:53	0:0	10	"[any to %d] "
arg	29:25	29:37	9	out_channels
water	29:25	0:0	10	out_channels
water	29:38	0:0	8	;
water	30:8	0:0	8	}
else	30:10	32:8	4
stmts	30:15	32:8	5	
water	30:15	0:0	6	{
call	31:12	31:64	6	snprintf
arg	31:21	31:29	7	chan_str
water	31:21	0:0	8	chan_str
arg	31:31	31:47	7	sizeof(chan_str)
op	31:31	0:0	8	sizeof
water	31:37	0:0	8	(
water	31:38	0:0	8	chan_str
water	31:46	0:0	8	)
arg	31:49	31:64	7	"[any to any] "
water	31:49	0:0	8	"[any to any] "
water	31:65	0:0	6	;
water	32:8	0:0	6	}
call	33:8	35:60	4	av_log
arg	33:15	33:22	5	am->avr
water	33:15	0:0	6	am
op	33:17	0:0	6	->
water	33:19	0:0	6	avr
arg	33:24	33:36	5	AV_LOG_DEBUG
water	33:24	0:0	6	AV_LOG_DEBUG
arg	33:38	34:32	5	"audio_mix: found function: [fmt=%s] ""[c=%s] %s(%s)\n"
water	33:38	0:0	6	"audio_mix: found function: [fmt=%s] "
water	34:15	0:0	6	"[c=%s] %s(%s)\n"
arg	34:34	34:61	5	av_get_sample_fmt_name(fmt)
call	34:34	34:60	6	av_get_sample_fmt_name
arg	34:57	34:60	7	fmt
water	34:57	0:0	8	fmt
arg	35:15	35:43	5	coeff_type_names[coeff_type]
water	35:15	0:0	6	coeff_type_names
op	35:31	0:0	6	[
water	35:32	0:0	6	coeff_type
op	35:42	0:0	6	]
arg	35:45	35:53	5	chan_str
water	35:45	0:0	6	chan_str
arg	35:55	35:60	5	descr
water	35:55	0:0	6	descr
water	35:61	0:0	4	;
water	36:4	0:0	4	}
decl	47:8	47:25	0	char	chan_str[16]
