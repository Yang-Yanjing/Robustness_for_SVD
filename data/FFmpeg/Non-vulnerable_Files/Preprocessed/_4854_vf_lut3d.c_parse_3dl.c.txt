func	1:0	25:0	0	static int	parse_3dl
params	1:20	0:0	1	
param	1:21	1:41	2	AVFilterContext *	ctx
param	1:43	1:50	2	FILE *	f
stmnts	0:0	24:12	1	
decl	3:4	3:28	2	char	line[MAX_LINE_SIZE]
decl	4:4	4:35	2	LUT3DContext	*lut3d
op	4:24	0:0	2	=
water	4:26	0:0	2	ctx
op	4:29	0:0	2	->
water	4:31	0:0	2	priv
decl	5:4	5:15	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:15	2	int	j
water	5:12	0:0	2	,
decl	5:4	5:15	2	int	k
decl	6:4	6:23	2	const int	size
op	6:19	0:0	2	=
water	6:21	0:0	2	17
decl	7:4	7:32	2	const float	scale
op	7:22	0:0	2	=
water	7:24	0:0	2	16
op	7:26	0:0	2	*
water	7:27	0:0	2	16
op	7:29	0:0	2	*
water	7:30	0:0	2	16
water	8:4	0:0	2	lut3d
op	8:9	0:0	2	->
water	8:11	0:0	2	lutsize
op	8:19	0:0	2	=
water	8:21	0:0	2	size
water	8:25	0:0	2	;
call	9:4	9:29	2	NEXT_LINE
arg	9:14	9:29	3	skip_line(line)
call	9:14	9:28	4	skip_line
arg	9:24	9:28	5	line
water	9:24	0:0	6	line
water	9:30	0:0	2	;
for	10:4	23:4	2	(k = 0 ;k < size;k ++)
forinit	10:9	10:14	3	k = 0 ;
water	10:9	0:0	4	k
op	10:11	0:0	4	=
water	10:13	0:0	4	0
water	10:14	0:0	4	;
cond	10:16	10:20	3	k < size
water	10:16	0:0	4	k
op	10:18	0:0	4	<
water	10:20	0:0	4	size
forexpr	10:26	10:27	3	k ++
water	10:26	0:0	4	k
op	10:27	0:0	4	++
stmts	10:31	23:4	3	
water	10:31	0:0	4	{
for	11:8	22:8	4	(j = 0 ;j < size;j ++)
forinit	11:13	11:18	5	j = 0 ;
water	11:13	0:0	6	j
op	11:15	0:0	6	=
water	11:17	0:0	6	0
water	11:18	0:0	6	;
cond	11:20	11:24	5	j < size
water	11:20	0:0	6	j
op	11:22	0:0	6	<
water	11:24	0:0	6	size
forexpr	11:30	11:31	5	j ++
water	11:30	0:0	6	j
op	11:31	0:0	6	++
stmts	11:35	22:8	5	
water	11:35	0:0	6	{
for	12:12	21:12	6	(i = 0 ;i < size;i ++)
forinit	12:17	12:22	7	i = 0 ;
water	12:17	0:0	8	i
op	12:19	0:0	8	=
water	12:21	0:0	8	0
water	12:22	0:0	8	;
cond	12:24	12:28	7	i < size
water	12:24	0:0	8	i
op	12:26	0:0	8	<
water	12:28	0:0	8	size
forexpr	12:34	12:35	7	i ++
water	12:34	0:0	8	i
op	12:35	0:0	8	++
stmts	12:39	21:12	7	
water	12:39	0:0	8	{
decl	13:16	13:27	8	int	r
water	13:21	0:0	8	,
decl	13:16	13:27	8	int	g
water	13:24	0:0	8	,
decl	13:16	13:27	8	int	b
decl	14:16	14:57	8	struct rgbvec	*vec
op	14:35	0:0	8	=
op	14:37	0:0	8	&
water	14:38	0:0	8	lut3d
op	14:43	0:0	8	->
water	14:45	0:0	8	lut
op	14:48	0:0	8	[
water	14:49	0:0	8	k
op	14:50	0:0	8	]
op	14:51	0:0	8	[
water	14:52	0:0	8	j
op	14:53	0:0	8	]
op	14:54	0:0	8	[
water	14:55	0:0	8	i
op	14:56	0:0	8	]
call	15:16	15:41	8	NEXT_LINE
arg	15:26	15:41	9	skip_line(line)
call	15:26	15:40	10	skip_line
arg	15:36	15:40	11	line
water	15:36	0:0	12	line
water	15:42	0:0	8	;
if	16:16	17:46	8	(sscanf (line ,"%d %d %d" ,& r ,& g ,& b ) != 3)
cond	16:20	16:60	9	sscanf (line ,"%d %d %d" ,& r ,& g ,& b ) != 3
call	16:20	16:55	10	sscanf
arg	16:27	16:31	11	line
water	16:27	0:0	12	line
arg	16:33	16:43	11	"%d %d %d"
water	16:33	0:0	12	"%d %d %d"
arg	16:45	16:47	11	&r
op	16:45	0:0	12	&
water	16:46	0:0	12	r
arg	16:49	16:51	11	&g
op	16:49	0:0	12	&
water	16:50	0:0	12	g
arg	16:53	16:55	11	&b
op	16:53	0:0	12	&
water	16:54	0:0	12	b
op	16:57	0:0	10	!=
water	16:60	0:0	10	3
stmts	17:20	17:46	9	
return	17:20	17:46	10	AVERROR_INVALIDDATA
water	17:27	0:0	11	AVERROR_INVALIDDATA
water	18:16	0:0	8	vec
op	18:19	0:0	8	->
water	18:21	0:0	8	r
op	18:23	0:0	8	=
water	18:25	0:0	8	r
op	18:27	0:0	8	/
water	18:29	0:0	8	scale
water	18:34	0:0	8	;
water	19:16	0:0	8	vec
op	19:19	0:0	8	->
water	19:21	0:0	8	g
op	19:23	0:0	8	=
water	19:25	0:0	8	g
op	19:27	0:0	8	/
water	19:29	0:0	8	scale
water	19:34	0:0	8	;
water	20:16	0:0	8	vec
op	20:19	0:0	8	->
water	20:21	0:0	8	b
op	20:23	0:0	8	=
water	20:25	0:0	8	b
op	20:27	0:0	8	/
water	20:29	0:0	8	scale
water	20:34	0:0	8	;
water	21:12	0:0	8	}
water	22:8	0:0	6	}
water	23:4	0:0	4	}
return	24:4	24:12	2	0
water	24:11	0:0	3	0
