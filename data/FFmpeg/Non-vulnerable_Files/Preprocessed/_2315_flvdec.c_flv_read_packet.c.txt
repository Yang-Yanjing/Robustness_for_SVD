func	1:0	265:0	0	static int	flv_read_packet
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
param	1:47	1:60	2	AVPacket *	pkt
stmnts	0:0	264:14	1	
decl	3:4	3:34	2	FLVContext	*flv
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:27	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:27	2	int	i
water	4:14	0:0	2	,
decl	4:4	4:27	2	int	size
water	4:20	0:0	2	,
decl	4:4	4:27	2	int	flags
decl	5:4	5:24	2	enum FlvTagType	type
decl	6:4	6:22	2	int	stream_type
op	6:19	0:0	2	=
op	6:20	0:0	2	-
water	6:21	0:0	2	1
decl	7:4	7:31	2	int64_t	next
water	7:16	0:0	2	,
decl	7:4	7:31	2	int64_t	pos
water	7:21	0:0	2	,
decl	7:4	7:31	2	int64_t	meta_pos
decl	8:4	8:37	2	int64_t	dts
water	8:15	0:0	2	,
decl	8:4	8:37	2	int64_t	pts
op	8:21	0:0	2	=
water	8:23	0:0	2	AV_NOPTS_VALUE
decl	9:4	9:27	2	int	av_uninit
water	9:17	0:0	2	(
water	9:18	0:0	2	channels
water	9:26	0:0	2	)
decl	10:4	10:30	2	int	av_uninit
water	10:17	0:0	2	(
water	10:18	0:0	2	sample_rate
water	10:29	0:0	2	)
decl	11:4	11:26	2	AVStream	*st
op	11:20	0:0	2	=
water	11:22	0:0	2	NULL
for	13:4	115:4	2	(;;avio_skip (s -> pb ,4 ))
forinit	13:9	13:9	3	;
water	13:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	13:12	13:30	3	avio_skip (s -> pb ,4 )
call	13:12	13:30	4	avio_skip
arg	13:22	13:27	5	s->pb
water	13:22	0:0	6	s
op	13:23	0:0	6	->
water	13:25	0:0	6	pb
arg	13:29	13:30	5	4
water	13:29	0:0	6	4
stmts	13:33	115:4	3	
water	13:33	0:0	4	{
water	14:8	0:0	4	pos
op	14:13	0:0	4	=
call	14:15	14:30	4	avio_tell
arg	14:25	14:30	5	s->pb
water	14:25	0:0	6	s
op	14:26	0:0	6	->
water	14:28	0:0	6	pb
water	14:31	0:0	4	;
water	15:8	0:0	4	type
op	15:13	0:0	4	=
water	15:15	0:0	4	(
call	15:16	15:29	4	avio_r8
arg	15:24	15:29	5	s->pb
water	15:24	0:0	6	s
op	15:25	0:0	6	->
water	15:27	0:0	6	pb
op	15:31	0:0	4	&
water	15:33	0:0	4	0
water	15:34	0:0	4	x1F
water	15:37	0:0	4	)
water	15:38	0:0	4	;
water	16:8	0:0	4	size
op	16:13	0:0	4	=
call	16:15	16:30	4	avio_rb24
arg	16:25	16:30	5	s->pb
water	16:25	0:0	6	s
op	16:26	0:0	6	->
water	16:28	0:0	6	pb
water	16:31	0:0	4	;
water	17:8	0:0	4	dts
op	17:13	0:0	4	=
call	17:15	17:30	4	avio_rb24
arg	17:25	17:30	5	s->pb
water	17:25	0:0	6	s
op	17:26	0:0	6	->
water	17:28	0:0	6	pb
water	17:31	0:0	4	;
water	18:8	0:0	4	dts
op	18:12	0:0	4	|=
call	18:15	18:28	4	avio_r8
arg	18:23	18:28	5	s->pb
water	18:23	0:0	6	s
op	18:24	0:0	6	->
water	18:26	0:0	6	pb
op	18:30	0:0	4	<<
water	18:33	0:0	4	24
water	18:35	0:0	4	;
call	19:8	19:116	4	av_log
arg	19:15	19:16	5	s
water	19:15	0:0	6	s
arg	19:18	19:30	5	AV_LOG_TRACE
water	19:18	0:0	6	AV_LOG_TRACE
arg	19:32	19:81	5	"type:%d, size:%d, dts:%"PRId64" pos:%"PRId64"\n"
water	19:32	0:0	6	"type:%d, size:%d, dts:%"
water	19:57	0:0	6	PRId64
water	19:63	0:0	6	" pos:%"
water	19:71	0:0	6	PRId64
water	19:77	0:0	6	"\n"
arg	19:83	19:87	5	type
water	19:83	0:0	6	type
arg	19:89	19:93	5	size
water	19:89	0:0	6	size
arg	19:95	19:98	5	dts
water	19:95	0:0	6	dts
arg	19:100	19:116	5	avio_tell(s->pb)
call	19:100	19:115	6	avio_tell
arg	19:110	19:115	7	s->pb
water	19:110	0:0	8	s
op	19:111	0:0	8	->
water	19:113	0:0	8	pb
water	19:117	0:0	4	;
if	20:8	21:30	4	(avio_feof (s -> pb ))
cond	20:12	20:27	5	avio_feof (s -> pb )
call	20:12	20:27	6	avio_feof
arg	20:22	20:27	7	s->pb
water	20:22	0:0	8	s
op	20:23	0:0	8	->
water	20:25	0:0	8	pb
stmts	21:12	21:30	5	
return	21:12	21:30	6	AVERROR_EOF
water	21:19	0:0	7	AVERROR_EOF
call	22:8	22:26	4	avio_skip
arg	22:18	22:23	5	s->pb
water	22:18	0:0	6	s
op	22:19	0:0	6	->
water	22:21	0:0	6	pb
arg	22:25	22:26	5	3
water	22:25	0:0	6	3
water	22:27	0:0	4	;
water	23:8	0:0	4	flags
op	23:14	0:0	4	=
water	23:16	0:0	4	0
water	23:17	0:0	4	;
if	24:8	38:8	4	(flv -> validate_next < flv -> validate_count)
cond	24:12	24:38	5	flv -> validate_next < flv -> validate_count
water	24:12	0:0	6	flv
op	24:15	0:0	6	->
water	24:17	0:0	6	validate_next
op	24:31	0:0	6	<
water	24:33	0:0	6	flv
op	24:36	0:0	6	->
water	24:38	0:0	6	validate_count
stmts	24:54	38:8	5	
water	24:54	0:0	6	{
decl	25:12	25:78	6	int64_t	validate_pos
op	25:33	0:0	6	=
water	25:35	0:0	6	flv
op	25:38	0:0	6	->
water	25:40	0:0	6	validate_index
op	25:54	0:0	6	[
water	25:55	0:0	6	flv
op	25:58	0:0	6	->
water	25:60	0:0	6	validate_next
op	25:73	0:0	6	]
op	25:74	0:0	6	.
water	25:75	0:0	6	pos
if	26:12	34:12	6	(pos == validate_pos)
cond	26:16	26:23	7	pos == validate_pos
water	26:16	0:0	8	pos
op	26:20	0:0	8	==
water	26:23	0:0	8	validate_pos
stmts	26:37	34:12	7	
water	26:37	0:0	8	{
if	27:16	30:16	8	(FFABS (dts - flv -> validate_index [ flv -> validate_next ] . dts ) <= VALIDATE_INDEX_TS_THRESH)
cond	27:20	28:20	9	FFABS (dts - flv -> validate_index [ flv -> validate_next ] . dts ) <= VALIDATE_INDEX_TS_THRESH
call	27:20	27:75	10	FFABS
arg	27:26	27:75	11	dts-flv->validate_index[flv->validate_next].dts
water	27:26	0:0	12	dts
op	27:30	0:0	12	-
water	27:32	0:0	12	flv
op	27:35	0:0	12	->
water	27:37	0:0	12	validate_index
op	27:51	0:0	12	[
water	27:52	0:0	12	flv
op	27:55	0:0	12	->
water	27:57	0:0	12	validate_next
op	27:70	0:0	12	]
op	27:71	0:0	12	.
water	27:72	0:0	12	dts
op	27:77	0:0	10	<=
water	28:20	0:0	10	VALIDATE_INDEX_TS_THRESH
stmts	28:46	30:16	9	
water	28:46	0:0	10	{
water	29:20	0:0	10	flv
op	29:23	0:0	10	->
water	29:25	0:0	10	validate_next
op	29:38	0:0	10	++
water	29:40	0:0	10	;
water	30:16	0:0	10	}
else	30:18	33:16	8
stmts	30:23	33:16	9	
water	30:23	0:0	10	{
call	31:20	31:55	10	clear_index_entries
arg	31:40	31:41	11	s
water	31:40	0:0	12	s
arg	31:43	31:55	11	validate_pos
water	31:43	0:0	12	validate_pos
water	31:56	0:0	10	;
water	32:20	0:0	10	flv
op	32:23	0:0	10	->
water	32:25	0:0	10	validate_count
op	32:40	0:0	10	=
water	32:42	0:0	10	0
water	32:43	0:0	10	;
water	33:16	0:0	10	}
water	34:12	0:0	8	}
else	34:14	37:12	6
stmts	34:19	37:12	7	
if	34:19	37:12	8	(pos > validate_pos)
cond	34:23	34:29	9	pos > validate_pos
water	34:23	0:0	10	pos
op	34:27	0:0	10	>
water	34:29	0:0	10	validate_pos
stmts	34:43	37:12	9	
water	34:43	0:0	10	{
call	35:16	35:51	10	clear_index_entries
arg	35:36	35:37	11	s
water	35:36	0:0	12	s
arg	35:39	35:51	11	validate_pos
water	35:39	0:0	12	validate_pos
water	35:52	0:0	10	;
water	36:16	0:0	10	flv
op	36:19	0:0	10	->
water	36:21	0:0	10	validate_count
op	36:36	0:0	10	=
water	36:38	0:0	10	0
water	36:39	0:0	10	;
water	37:12	0:0	10	}
water	38:8	0:0	6	}
if	39:8	40:20	4	(size == 0)
cond	39:12	39:20	5	size == 0
water	39:12	0:0	6	size
op	39:17	0:0	6	==
water	39:20	0:0	6	0
stmts	40:12	40:20	5	
continue	40:12	40:20	6	
water	41:8	0:0	4	next
op	41:13	0:0	4	=
water	41:15	0:0	4	size
op	41:20	0:0	4	+
call	41:22	41:37	4	avio_tell
arg	41:32	41:37	5	s->pb
water	41:32	0:0	6	s
op	41:33	0:0	6	->
water	41:35	0:0	6	pb
water	41:38	0:0	4	;
if	42:8	46:8	4	(type == FLV_TAG_TYPE_AUDIO)
cond	42:12	42:20	5	type == FLV_TAG_TYPE_AUDIO
water	42:12	0:0	6	type
op	42:17	0:0	6	==
water	42:20	0:0	6	FLV_TAG_TYPE_AUDIO
stmts	42:40	46:8	5	
water	42:40	0:0	6	{
water	43:12	0:0	6	stream_type
op	43:24	0:0	6	=
water	43:26	0:0	6	FLV_STREAM_TYPE_AUDIO
water	43:47	0:0	6	;
water	44:12	0:0	6	flags
op	44:21	0:0	6	=
call	44:23	44:36	6	avio_r8
arg	44:31	44:36	7	s->pb
water	44:31	0:0	8	s
op	44:32	0:0	8	->
water	44:34	0:0	8	pb
water	44:37	0:0	6	;
water	45:12	0:0	6	size
op	45:16	0:0	6	--
water	45:18	0:0	6	;
water	46:8	0:0	6	}
else	46:10	52:8	4
stmts	46:15	52:8	5	
if	46:15	52:8	6	(type == FLV_TAG_TYPE_VIDEO)
cond	46:19	46:27	7	type == FLV_TAG_TYPE_VIDEO
water	46:19	0:0	8	type
op	46:24	0:0	8	==
water	46:27	0:0	8	FLV_TAG_TYPE_VIDEO
stmts	46:47	52:8	7	
water	46:47	0:0	8	{
water	47:12	0:0	8	stream_type
op	47:24	0:0	8	=
water	47:26	0:0	8	FLV_STREAM_TYPE_VIDEO
water	47:47	0:0	8	;
water	48:12	0:0	8	flags
op	48:21	0:0	8	=
call	48:23	48:36	8	avio_r8
arg	48:31	48:36	9	s->pb
water	48:31	0:0	10	s
op	48:32	0:0	10	->
water	48:34	0:0	10	pb
water	48:37	0:0	8	;
water	49:12	0:0	8	size
op	49:16	0:0	8	--
water	49:18	0:0	8	;
if	50:12	51:25	8	(( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_VIDEO_INFO_CMD)
cond	50:16	50:54	9	( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_VIDEO_INFO_CMD
water	50:16	0:0	10	(
water	50:17	0:0	10	flags
op	50:23	0:0	10	&
water	50:25	0:0	10	FLV_VIDEO_FRAMETYPE_MASK
water	50:49	0:0	10	)
op	50:51	0:0	10	==
water	50:54	0:0	10	FLV_FRAME_VIDEO_INFO_CMD
stmts	51:16	51:25	9	
goto	51:16	51:25	10	skip
water	51:21	0:0	11	skip
water	52:8	0:0	8	}
else	52:10	68:8	4
stmts	52:15	68:8	5	
if	52:15	68:8	6	(type == FLV_TAG_TYPE_META)
cond	52:19	52:27	7	type == FLV_TAG_TYPE_META
water	52:19	0:0	8	type
op	52:24	0:0	8	==
water	52:27	0:0	8	FLV_TAG_TYPE_META
stmts	52:46	68:8	7	
water	52:46	0:0	8	{
water	53:12	0:0	8	stream_type
op	53:23	0:0	8	=
water	53:24	0:0	8	FLV_STREAM_TYPE_DATA
water	53:44	0:0	8	;
if	54:12	67:12	8	(size > 13 + 1 + 4)
cond	54:16	54:32	9	size > 13 + 1 + 4
water	54:16	0:0	10	size
op	54:21	0:0	10	>
water	54:23	0:0	10	13
op	54:26	0:0	10	+
water	54:28	0:0	10	1
op	54:30	0:0	10	+
water	54:32	0:0	10	4
stmts	54:35	67:12	9	
water	54:35	0:0	10	{
decl	55:16	55:24	10	int	type
water	56:16	0:0	10	meta_pos
op	56:25	0:0	10	=
call	56:27	56:42	10	avio_tell
arg	56:37	56:42	11	s->pb
water	56:37	0:0	12	s
op	56:38	0:0	12	->
water	56:40	0:0	12	pb
water	56:43	0:0	10	;
water	57:16	0:0	10	type
op	57:21	0:0	10	=
call	57:23	57:48	10	flv_read_metabody
arg	57:41	57:42	11	s
water	57:41	0:0	12	s
arg	57:44	57:48	11	next
water	57:44	0:0	12	next
water	57:49	0:0	10	;
if	58:16	60:16	10	(type == 0 && dts == 0 || type < 0 || type == TYPE_UNKNOWN)
cond	58:20	58:65	11	type == 0 && dts == 0 || type < 0 || type == TYPE_UNKNOWN
water	58:20	0:0	12	type
op	58:25	0:0	12	==
water	58:28	0:0	12	0
op	58:30	0:0	12	&&
water	58:33	0:0	12	dts
op	58:37	0:0	12	==
water	58:40	0:0	12	0
op	58:42	0:0	12	||
water	58:45	0:0	12	type
op	58:50	0:0	12	<
water	58:52	0:0	12	0
op	58:54	0:0	12	||
water	58:57	0:0	12	type
op	58:62	0:0	12	==
water	58:65	0:0	12	TYPE_UNKNOWN
stmts	58:79	60:16	11	
water	58:79	0:0	12	{
goto	59:20	59:29	12	skip
water	59:25	0:0	13	skip
water	60:16	0:0	12	}
else	60:18	63:16	10
stmts	60:23	63:16	11	
if	60:23	63:16	12	(type == TYPE_ONTEXTDATA)
cond	60:27	60:35	13	type == TYPE_ONTEXTDATA
water	60:27	0:0	14	type
op	60:32	0:0	14	==
water	60:35	0:0	14	TYPE_ONTEXTDATA
stmts	60:52	63:16	13	
water	60:52	0:0	14	{
call	61:20	61:64	14	avpriv_request_sample
arg	61:42	61:43	15	s
water	61:42	0:0	16	s
arg	61:45	61:64	15	"OnTextData packet"
water	61:45	0:0	16	"OnTextData packet"
water	61:65	0:0	14	;
return	62:20	62:61	14	flv_data_packet(s,pkt,dts,next)
call	62:27	62:60	15	flv_data_packet
arg	62:43	62:44	16	s
water	62:43	0:0	17	s
arg	62:46	62:49	16	pkt
water	62:46	0:0	17	pkt
arg	62:51	62:54	16	dts
water	62:51	0:0	17	dts
arg	62:56	62:60	16	next
water	62:56	0:0	17	next
water	63:16	0:0	14	}
else	63:18	65:16	10
stmts	63:23	65:16	11	
if	63:23	65:16	12	(type == TYPE_ONCAPTION)
cond	63:27	63:35	13	type == TYPE_ONCAPTION
water	63:27	0:0	14	type
op	63:32	0:0	14	==
water	63:35	0:0	14	TYPE_ONCAPTION
stmts	63:51	65:16	13	
water	63:51	0:0	14	{
return	64:20	64:61	14	flv_data_packet(s,pkt,dts,next)
call	64:27	64:60	15	flv_data_packet
arg	64:43	64:44	16	s
water	64:43	0:0	17	s
arg	64:46	64:49	16	pkt
water	64:46	0:0	17	pkt
arg	64:51	64:54	16	dts
water	64:51	0:0	17	dts
arg	64:56	64:60	16	next
water	64:56	0:0	17	next
water	65:16	0:0	14	}
call	66:16	66:51	10	avio_seek
arg	66:26	66:31	11	s->pb
water	66:26	0:0	12	s
op	66:27	0:0	12	->
water	66:29	0:0	12	pb
arg	66:33	66:41	11	meta_pos
water	66:33	0:0	12	meta_pos
arg	66:43	66:51	11	SEEK_SET
water	66:43	0:0	12	SEEK_SET
water	66:52	0:0	10	;
water	67:12	0:0	10	}
water	68:8	0:0	8	}
else	68:10	75:8	4
stmts	68:15	75:8	5	
water	68:15	0:0	6	{
call	69:12	71:36	6	av_log
arg	69:19	69:20	7	s
water	69:19	0:0	8	s
arg	69:22	69:34	7	AV_LOG_DEBUG
water	69:22	0:0	8	AV_LOG_DEBUG
arg	70:19	70:71	7	"Skipping flv packet: type %d, size %d, flags %d.\n"
water	70:19	0:0	8	"Skipping flv packet: type %d, size %d, flags %d.\n"
arg	71:19	71:23	7	type
water	71:19	0:0	8	type
arg	71:25	71:29	7	size
water	71:25	0:0	8	size
arg	71:31	71:36	7	flags
water	71:31	0:0	8	flags
water	71:37	0:0	6	;
label	72:0	72:4	6	skip :
call	73:12	73:43	6	avio_seek
arg	73:22	73:27	7	s->pb
water	73:22	0:0	8	s
op	73:23	0:0	8	->
water	73:25	0:0	8	pb
arg	73:29	73:33	7	next
water	73:29	0:0	8	next
arg	73:35	73:43	7	SEEK_SET
water	73:35	0:0	8	SEEK_SET
water	73:44	0:0	6	;
continue	74:12	74:20	6	
water	75:8	0:0	6	}
if	77:8	78:20	4	(! size)
cond	77:12	77:13	5	! size
op	77:12	0:0	6	!
water	77:13	0:0	6	size
stmts	78:12	78:20	5	
continue	78:12	78:20	6	
for	80:8	94:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	80:13	80:18	5	i = 0 ;
water	80:13	0:0	6	i
op	80:15	0:0	6	=
water	80:17	0:0	6	0
water	80:18	0:0	6	;
cond	80:20	80:27	5	i < s -> nb_streams
water	80:20	0:0	6	i
op	80:22	0:0	6	<
water	80:24	0:0	6	s
op	80:25	0:0	6	->
water	80:27	0:0	6	nb_streams
forexpr	80:39	80:40	5	i ++
water	80:39	0:0	6	i
op	80:40	0:0	6	++
stmts	80:44	94:8	5	
water	80:44	0:0	6	{
water	81:12	0:0	6	st
op	81:15	0:0	6	=
water	81:17	0:0	6	s
op	81:18	0:0	6	->
water	81:20	0:0	6	streams
op	81:27	0:0	6	[
water	81:28	0:0	6	i
op	81:29	0:0	6	]
water	81:30	0:0	6	;
if	82:12	86:12	6	(stream_type == FLV_STREAM_TYPE_AUDIO)
cond	82:16	82:31	7	stream_type == FLV_STREAM_TYPE_AUDIO
water	82:16	0:0	8	stream_type
op	82:28	0:0	8	==
water	82:31	0:0	8	FLV_STREAM_TYPE_AUDIO
stmts	82:54	86:12	7	
water	82:54	0:0	8	{
if	83:16	85:25	8	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO && ( s -> audio_codec_id ||flv_same_audio_codec (st -> codec ,flags ) ))
cond	83:20	84:80	9	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO && ( s -> audio_codec_id ||flv_same_audio_codec (st -> codec ,flags ) )
water	83:20	0:0	10	st
op	83:22	0:0	10	->
water	83:24	0:0	10	codec
op	83:29	0:0	10	->
water	83:31	0:0	10	codec_type
op	83:42	0:0	10	==
water	83:45	0:0	10	AVMEDIA_TYPE_AUDIO
op	83:64	0:0	10	&&
water	84:20	0:0	10	(
water	84:21	0:0	10	s
op	84:22	0:0	10	->
water	84:24	0:0	10	audio_codec_id
op	84:39	0:0	10	||
call	84:42	84:79	10	flv_same_audio_codec
arg	84:63	84:72	11	st->codec
water	84:63	0:0	12	st
op	84:65	0:0	12	->
water	84:67	0:0	12	codec
arg	84:74	84:79	11	flags
water	84:74	0:0	12	flags
water	84:80	0:0	10	)
stmts	85:20	85:25	9	
break	85:20	85:25	10	
water	86:12	0:0	8	}
else	86:14	90:12	6
stmts	86:19	90:12	7	
if	86:19	90:12	8	(stream_type == FLV_STREAM_TYPE_VIDEO)
cond	86:23	86:38	9	stream_type == FLV_STREAM_TYPE_VIDEO
water	86:23	0:0	10	stream_type
op	86:35	0:0	10	==
water	86:38	0:0	10	FLV_STREAM_TYPE_VIDEO
stmts	86:61	90:12	9	
water	86:61	0:0	10	{
if	87:16	89:25	10	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO && ( s -> video_codec_id ||flv_same_video_codec (st -> codec ,flags ) ))
cond	87:20	88:80	11	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO && ( s -> video_codec_id ||flv_same_video_codec (st -> codec ,flags ) )
water	87:20	0:0	12	st
op	87:22	0:0	12	->
water	87:24	0:0	12	codec
op	87:29	0:0	12	->
water	87:31	0:0	12	codec_type
op	87:42	0:0	12	==
water	87:45	0:0	12	AVMEDIA_TYPE_VIDEO
op	87:64	0:0	12	&&
water	88:20	0:0	12	(
water	88:21	0:0	12	s
op	88:22	0:0	12	->
water	88:24	0:0	12	video_codec_id
op	88:39	0:0	12	||
call	88:42	88:79	12	flv_same_video_codec
arg	88:63	88:72	13	st->codec
water	88:63	0:0	14	st
op	88:65	0:0	14	->
water	88:67	0:0	14	codec
arg	88:74	88:79	13	flags
water	88:74	0:0	14	flags
water	88:80	0:0	12	)
stmts	89:20	89:25	11	
break	89:20	89:25	12	
water	90:12	0:0	10	}
else	90:14	93:12	6
stmts	90:19	93:12	7	
if	90:19	93:12	8	(stream_type == FLV_STREAM_TYPE_DATA)
cond	90:23	90:38	9	stream_type == FLV_STREAM_TYPE_DATA
water	90:23	0:0	10	stream_type
op	90:35	0:0	10	==
water	90:38	0:0	10	FLV_STREAM_TYPE_DATA
stmts	90:60	93:12	9	
water	90:60	0:0	10	{
if	91:16	92:25	10	(st -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE)
cond	91:20	91:45	11	st -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE
water	91:20	0:0	12	st
op	91:22	0:0	12	->
water	91:24	0:0	12	codec
op	91:29	0:0	12	->
water	91:31	0:0	12	codec_type
op	91:42	0:0	12	==
water	91:45	0:0	12	AVMEDIA_TYPE_SUBTITLE
stmts	92:20	92:25	11	
break	92:20	92:25	12	
water	93:12	0:0	10	}
water	94:8	0:0	6	}
if	95:8	101:8	4	(i == s -> nb_streams)
cond	95:12	95:20	5	i == s -> nb_streams
water	95:12	0:0	6	i
op	95:14	0:0	6	==
water	95:17	0:0	6	s
op	95:18	0:0	6	->
water	95:20	0:0	6	nb_streams
stmts	95:32	101:8	5	
water	95:32	0:0	6	{
water	96:12	0:0	6	static
water	96:19	0:0	6	const
water	96:25	0:0	6	enum
water	96:30	0:0	6	AVMediaType
water	96:42	0:0	6	stream_types
op	96:54	0:0	6	[
op	96:55	0:0	6	]
op	96:57	0:0	6	=
water	96:59	0:0	6	{
water	96:60	0:0	6	AVMEDIA_TYPE_VIDEO
water	96:78	0:0	6	,
water	96:80	0:0	6	AVMEDIA_TYPE_AUDIO
water	96:98	0:0	6	,
water	96:100	0:0	6	AVMEDIA_TYPE_SUBTITLE
water	96:121	0:0	6	}
water	96:122	0:0	6	;
call	97:12	97:85	6	av_log
arg	97:19	97:20	7	s
water	97:19	0:0	8	s
arg	97:22	97:36	7	AV_LOG_WARNING
water	97:22	0:0	8	AV_LOG_WARNING
arg	97:38	97:85	7	"Stream discovered after head already parsed\n"
water	97:38	0:0	8	"Stream discovered after head already parsed\n"
water	97:86	0:0	6	;
water	98:12	0:0	6	st
op	98:15	0:0	6	=
call	98:17	98:59	6	create_stream
arg	98:31	98:32	7	s
water	98:31	0:0	8	s
arg	98:34	98:59	7	stream_types[stream_type]
water	98:34	0:0	8	stream_types
op	98:46	0:0	8	[
water	98:47	0:0	8	stream_type
op	98:58	0:0	8	]
water	98:60	0:0	6	;
if	99:12	100:38	6	(! st)
cond	99:16	99:17	7	! st
op	99:16	0:0	8	!
water	99:17	0:0	8	st
stmts	100:16	100:38	7	
return	100:16	100:38	8	AVERROR(ENOMEM)
call	100:23	100:37	9	AVERROR
arg	100:31	100:37	10	ENOMEM
water	100:31	0:0	11	ENOMEM
water	101:8	0:0	6	}
call	102:8	102:78	4	av_log
arg	102:15	102:16	5	s
water	102:15	0:0	6	s
arg	102:18	102:30	5	AV_LOG_TRACE
water	102:18	0:0	6	AV_LOG_TRACE
arg	102:32	102:45	5	"%d %X %d \n"
water	102:32	0:0	6	"%d %X %d \n"
arg	102:47	102:58	5	stream_type
water	102:47	0:0	6	stream_type
arg	102:60	102:65	5	flags
water	102:60	0:0	6	flags
arg	102:67	102:78	5	st->discard
water	102:67	0:0	6	st
op	102:69	0:0	6	->
water	102:71	0:0	6	discard
water	102:79	0:0	4	;
if	103:8	106:71	4	(s -> pb -> seekable && ( ( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_KEY || stream_type == FLV_STREAM_TYPE_AUDIO ))
cond	103:12	105:50	5	s -> pb -> seekable && ( ( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_KEY || stream_type == FLV_STREAM_TYPE_AUDIO )
water	103:12	0:0	6	s
op	103:13	0:0	6	->
water	103:15	0:0	6	pb
op	103:17	0:0	6	->
water	103:19	0:0	6	seekable
op	103:28	0:0	6	&&
water	104:12	0:0	6	(
water	104:13	0:0	6	(
water	104:14	0:0	6	flags
op	104:20	0:0	6	&
water	104:22	0:0	6	FLV_VIDEO_FRAMETYPE_MASK
water	104:46	0:0	6	)
op	104:48	0:0	6	==
water	104:51	0:0	6	FLV_FRAME_KEY
op	104:65	0:0	6	||
water	105:14	0:0	6	stream_type
op	105:26	0:0	6	==
water	105:29	0:0	6	FLV_STREAM_TYPE_AUDIO
water	105:50	0:0	6	)
stmts	106:12	106:71	5	
call	106:12	106:70	6	av_add_index_entry
arg	106:31	106:33	7	st
water	106:31	0:0	8	st
arg	106:35	106:38	7	pos
water	106:35	0:0	8	pos
arg	106:40	106:43	7	dts
water	106:40	0:0	8	dts
arg	106:45	106:49	7	size
water	106:45	0:0	8	size
arg	106:51	106:52	7	0
water	106:51	0:0	8	0
arg	106:54	106:70	7	AVINDEX_KEYFRAME
water	106:54	0:0	8	AVINDEX_KEYFRAME
water	106:71	0:0	6	;
if	107:8	113:8	4	(( st -> discard >= AVDISCARD_NONKEY && ! ( ( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_KEY || ( stream_type == FLV_STREAM_TYPE_AUDIO ) ) ) || ( st -> discard >= AVDISCARD_BIDIR && ( ( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_DISP_INTER && ( stream_type == FLV_STREAM_TYPE_VIDEO ) ) ) || st -> discard >= AVDISCARD_ALL)
cond	107:14	109:30	5	( st -> discard >= AVDISCARD_NONKEY && ! ( ( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_KEY || ( stream_type == FLV_STREAM_TYPE_AUDIO ) ) ) || ( st -> discard >= AVDISCARD_BIDIR && ( ( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_DISP_INTER && ( stream_type == FLV_STREAM_TYPE_VIDEO ) ) ) || st -> discard >= AVDISCARD_ALL
water	107:14	0:0	6	(
water	107:15	0:0	6	st
op	107:17	0:0	6	->
water	107:19	0:0	6	discard
op	107:27	0:0	6	>=
water	107:30	0:0	6	AVDISCARD_NONKEY
op	107:47	0:0	6	&&
op	107:50	0:0	6	!
water	107:51	0:0	6	(
water	107:52	0:0	6	(
water	107:53	0:0	6	flags
op	107:59	0:0	6	&
water	107:61	0:0	6	FLV_VIDEO_FRAMETYPE_MASK
water	107:85	0:0	6	)
op	107:87	0:0	6	==
water	107:90	0:0	6	FLV_FRAME_KEY
op	107:104	0:0	6	||
water	107:107	0:0	6	(
water	107:108	0:0	6	stream_type
op	107:120	0:0	6	==
water	107:123	0:0	6	FLV_STREAM_TYPE_AUDIO
water	107:144	0:0	6	)
water	107:145	0:0	6	)
water	107:146	0:0	6	)
op	108:12	0:0	6	||
water	108:14	0:0	6	(
water	108:15	0:0	6	st
op	108:17	0:0	6	->
water	108:19	0:0	6	discard
op	108:27	0:0	6	>=
water	108:30	0:0	6	AVDISCARD_BIDIR
op	108:47	0:0	6	&&
water	108:51	0:0	6	(
water	108:52	0:0	6	(
water	108:53	0:0	6	flags
op	108:59	0:0	6	&
water	108:61	0:0	6	FLV_VIDEO_FRAMETYPE_MASK
water	108:85	0:0	6	)
op	108:87	0:0	6	==
water	108:90	0:0	6	FLV_FRAME_DISP_INTER
op	108:111	0:0	6	&&
water	108:114	0:0	6	(
water	108:115	0:0	6	stream_type
op	108:127	0:0	6	==
water	108:130	0:0	6	FLV_STREAM_TYPE_VIDEO
water	108:151	0:0	6	)
water	108:152	0:0	6	)
water	108:153	0:0	6	)
op	109:12	0:0	6	||
water	109:15	0:0	6	st
op	109:17	0:0	6	->
water	109:19	0:0	6	discard
op	109:27	0:0	6	>=
water	109:30	0:0	6	AVDISCARD_ALL
stmts	110:10	113:8	5	
water	110:10	0:0	6	{
call	111:12	111:43	6	avio_seek
arg	111:22	111:27	7	s->pb
water	111:22	0:0	8	s
op	111:23	0:0	8	->
water	111:25	0:0	8	pb
arg	111:29	111:33	7	next
water	111:29	0:0	8	next
arg	111:35	111:43	7	SEEK_SET
water	111:35	0:0	8	SEEK_SET
water	111:44	0:0	6	;
continue	112:12	112:20	6	
water	113:8	0:0	6	}
break	114:8	114:13	4	
water	115:4	0:0	4	}
if	118:4	142:4	2	(s -> pb -> seekable && ( ! s -> duration || s -> duration == AV_NOPTS_VALUE ) && ! flv -> searched_for_end)
cond	118:8	118:84	3	s -> pb -> seekable && ( ! s -> duration || s -> duration == AV_NOPTS_VALUE ) && ! flv -> searched_for_end
water	118:8	0:0	4	s
op	118:9	0:0	4	->
water	118:11	0:0	4	pb
op	118:13	0:0	4	->
water	118:15	0:0	4	seekable
op	118:24	0:0	4	&&
water	118:27	0:0	4	(
op	118:28	0:0	4	!
water	118:29	0:0	4	s
op	118:30	0:0	4	->
water	118:32	0:0	4	duration
op	118:41	0:0	4	||
water	118:44	0:0	4	s
op	118:45	0:0	4	->
water	118:47	0:0	4	duration
op	118:56	0:0	4	==
water	118:59	0:0	4	AV_NOPTS_VALUE
water	118:73	0:0	4	)
op	118:75	0:0	4	&&
op	118:78	0:0	4	!
water	118:79	0:0	4	flv
op	118:82	0:0	4	->
water	118:84	0:0	4	searched_for_end
stmts	118:102	142:4	3	
water	118:102	0:0	4	{
decl	119:8	119:16	4	int	size
decl	120:8	120:46	4	const int64_t	pos
op	120:28	0:0	4	=
call	120:30	120:45	5	avio_tell
arg	120:40	120:45	6	s->pb
water	120:40	0:0	7	s
op	120:41	0:0	7	->
water	120:43	0:0	7	pb
decl	123:8	123:46	4	int64_t	fsize
op	123:28	0:0	4	=
call	123:30	123:45	5	avio_size
arg	123:40	123:45	6	s->pb
water	123:40	0:0	7	s
op	123:41	0:0	7	->
water	123:43	0:0	7	pb
label	124:0	124:14	4	retry_duration :
call	125:8	125:44	4	avio_seek
arg	125:18	125:23	5	s->pb
water	125:18	0:0	6	s
op	125:19	0:0	6	->
water	125:21	0:0	6	pb
arg	125:25	125:34	5	fsize-4
water	125:25	0:0	6	fsize
op	125:31	0:0	6	-
water	125:33	0:0	6	4
arg	125:36	125:44	5	SEEK_SET
water	125:36	0:0	6	SEEK_SET
water	125:45	0:0	4	;
water	126:8	0:0	4	size
op	126:13	0:0	4	=
call	126:15	126:30	4	avio_rb32
arg	126:25	126:30	5	s->pb
water	126:25	0:0	6	s
op	126:26	0:0	6	->
water	126:28	0:0	6	pb
water	126:31	0:0	4	;
call	129:8	129:51	4	avio_seek
arg	129:18	129:23	5	s->pb
water	129:18	0:0	6	s
op	129:19	0:0	6	->
water	129:21	0:0	6	pb
arg	129:25	129:41	5	fsize-3-size
water	129:25	0:0	6	fsize
op	129:31	0:0	6	-
water	129:33	0:0	6	3
op	129:35	0:0	6	-
water	129:37	0:0	6	size
arg	129:43	129:51	5	SEEK_SET
water	129:43	0:0	6	SEEK_SET
water	129:52	0:0	4	;
if	130:8	139:8	4	(size ==avio_rb24 (s -> pb ) + 11)
cond	130:12	130:39	5	size ==avio_rb24 (s -> pb ) + 11
water	130:12	0:0	6	size
op	130:17	0:0	6	==
call	130:20	130:35	6	avio_rb24
arg	130:30	130:35	7	s->pb
water	130:30	0:0	8	s
op	130:31	0:0	8	->
water	130:33	0:0	8	pb
op	130:37	0:0	6	+
water	130:39	0:0	6	11
stmts	130:43	139:8	5	
water	130:43	0:0	6	{
decl	131:12	131:42	6	uint32_t	ts
op	131:24	0:0	6	=
call	131:26	131:41	7	avio_rb24
arg	131:36	131:41	8	s->pb
water	131:36	0:0	9	s
op	131:37	0:0	9	->
water	131:39	0:0	9	pb
water	132:12	0:0	6	ts
op	132:23	0:0	6	|=
call	132:26	132:39	6	avio_r8
arg	132:34	132:39	7	s->pb
water	132:34	0:0	8	s
op	132:35	0:0	8	->
water	132:37	0:0	8	pb
op	132:41	0:0	6	<<
water	132:44	0:0	6	24
water	132:46	0:0	6	;
if	133:12	134:63	6	(ts)
cond	133:16	133:16	7	ts
water	133:16	0:0	8	ts
stmts	134:16	134:63	7	
water	134:16	0:0	8	s
op	134:17	0:0	8	->
water	134:19	0:0	8	duration
op	134:28	0:0	8	=
water	134:30	0:0	8	ts
op	134:33	0:0	8	*
water	134:35	0:0	8	(
water	134:36	0:0	8	int64_t
water	134:43	0:0	8	)
water	134:44	0:0	8	AV_TIME_BASE
op	134:57	0:0	8	/
water	134:59	0:0	8	1000
water	134:63	0:0	8	;
else	135:12	138:12	6
stmts	135:17	138:12	7	
if	135:17	138:12	8	(fsize >= 8 && fsize - 8 >= size)
cond	135:21	135:48	9	fsize >= 8 && fsize - 8 >= size
water	135:21	0:0	10	fsize
op	135:27	0:0	10	>=
water	135:30	0:0	10	8
op	135:32	0:0	10	&&
water	135:35	0:0	10	fsize
op	135:41	0:0	10	-
water	135:43	0:0	10	8
op	135:45	0:0	10	>=
water	135:48	0:0	10	size
stmts	135:54	138:12	9	
water	135:54	0:0	10	{
water	136:16	0:0	10	fsize
op	136:22	0:0	10	-=
water	136:25	0:0	10	size
op	136:29	0:0	10	+
water	136:30	0:0	10	4
water	136:31	0:0	10	;
goto	137:16	137:35	10	retry_duration
water	137:21	0:0	11	retry_duration
water	138:12	0:0	10	}
water	139:8	0:0	6	}
call	140:8	140:38	4	avio_seek
arg	140:18	140:23	5	s->pb
water	140:18	0:0	6	s
op	140:19	0:0	6	->
water	140:21	0:0	6	pb
arg	140:25	140:28	5	pos
water	140:25	0:0	6	pos
arg	140:30	140:38	5	SEEK_SET
water	140:30	0:0	6	SEEK_SET
water	140:39	0:0	4	;
water	141:8	0:0	4	flv
op	141:11	0:0	4	->
water	141:13	0:0	4	searched_for_end
op	141:30	0:0	4	=
water	141:32	0:0	4	1
water	141:33	0:0	4	;
water	142:4	0:0	4	}
if	143:4	172:4	2	(stream_type == FLV_STREAM_TYPE_AUDIO)
cond	143:8	143:23	3	stream_type == FLV_STREAM_TYPE_AUDIO
water	143:8	0:0	4	stream_type
op	143:20	0:0	4	==
water	143:23	0:0	4	FLV_STREAM_TYPE_AUDIO
stmts	143:46	172:4	3	
water	143:46	0:0	4	{
decl	144:8	144:33	4	int	bits_per_coded_sample
water	145:8	0:0	4	channels
op	145:17	0:0	4	=
water	145:19	0:0	4	(
water	145:20	0:0	4	flags
op	145:26	0:0	4	&
water	145:28	0:0	4	FLV_AUDIO_CHANNEL_MASK
water	145:50	0:0	4	)
op	145:52	0:0	4	==
water	145:55	0:0	4	FLV_STEREO
water	145:66	0:0	4	?
water	145:68	0:0	4	2
water	145:70	0:0	4	:
water	145:72	0:0	4	1
water	145:73	0:0	4	;
water	146:8	0:0	4	sample_rate
op	146:20	0:0	4	=
water	146:22	0:0	4	44100
op	146:28	0:0	4	<<
water	146:31	0:0	4	(
water	146:32	0:0	4	(
water	146:33	0:0	4	flags
op	146:39	0:0	4	&
water	146:41	0:0	4	FLV_AUDIO_SAMPLERATE_MASK
water	146:66	0:0	4	)
op	146:68	0:0	4	>>
water	147:32	0:0	4	FLV_AUDIO_SAMPLERATE_OFFSET
water	147:59	0:0	4	)
op	147:61	0:0	4	>>
water	147:64	0:0	4	3
water	147:65	0:0	4	;
water	148:8	0:0	4	bits_per_coded_sample
op	148:30	0:0	4	=
water	148:32	0:0	4	(
water	148:33	0:0	4	flags
op	148:39	0:0	4	&
water	148:41	0:0	4	FLV_AUDIO_SAMPLESIZE_MASK
water	148:66	0:0	4	)
water	148:68	0:0	4	?
water	148:70	0:0	4	16
water	148:73	0:0	4	:
water	148:75	0:0	4	8
water	148:76	0:0	4	;
if	149:8	157:8	4	(! st -> codec -> channels || ! st -> codec -> sample_rate || ! st -> codec -> bits_per_coded_sample)
cond	149:12	150:24	5	! st -> codec -> channels || ! st -> codec -> sample_rate || ! st -> codec -> bits_per_coded_sample
op	149:12	0:0	6	!
water	149:13	0:0	6	st
op	149:15	0:0	6	->
water	149:17	0:0	6	codec
op	149:22	0:0	6	->
water	149:24	0:0	6	channels
op	149:33	0:0	6	||
op	149:36	0:0	6	!
water	149:37	0:0	6	st
op	149:39	0:0	6	->
water	149:41	0:0	6	codec
op	149:46	0:0	6	->
water	149:48	0:0	6	sample_rate
op	149:60	0:0	6	||
op	150:12	0:0	6	!
water	150:13	0:0	6	st
op	150:15	0:0	6	->
water	150:17	0:0	6	codec
op	150:22	0:0	6	->
water	150:24	0:0	6	bits_per_coded_sample
stmts	150:47	157:8	5	
water	150:47	0:0	6	{
water	151:12	0:0	6	st
op	151:14	0:0	6	->
water	151:16	0:0	6	codec
op	151:21	0:0	6	->
water	151:23	0:0	6	channels
op	151:45	0:0	6	=
water	151:47	0:0	6	channels
water	151:55	0:0	6	;
water	152:12	0:0	6	st
op	152:14	0:0	6	->
water	152:16	0:0	6	codec
op	152:21	0:0	6	->
water	152:23	0:0	6	channel_layout
op	152:45	0:0	6	=
water	152:47	0:0	6	channels
op	152:56	0:0	6	==
water	152:59	0:0	6	1
water	153:47	0:0	6	?
water	153:49	0:0	6	AV_CH_LAYOUT_MONO
water	154:47	0:0	6	:
water	154:49	0:0	6	AV_CH_LAYOUT_STEREO
water	154:68	0:0	6	;
water	155:12	0:0	6	st
op	155:14	0:0	6	->
water	155:16	0:0	6	codec
op	155:21	0:0	6	->
water	155:23	0:0	6	sample_rate
op	155:45	0:0	6	=
water	155:47	0:0	6	sample_rate
water	155:58	0:0	6	;
water	156:12	0:0	6	st
op	156:14	0:0	6	->
water	156:16	0:0	6	codec
op	156:21	0:0	6	->
water	156:23	0:0	6	bits_per_coded_sample
op	156:45	0:0	6	=
water	156:47	0:0	6	bits_per_coded_sample
water	156:68	0:0	6	;
water	157:8	0:0	6	}
if	158:8	165:8	4	(! st -> codec -> codec_id)
cond	158:12	158:24	5	! st -> codec -> codec_id
op	158:12	0:0	6	!
water	158:13	0:0	6	st
op	158:15	0:0	6	->
water	158:17	0:0	6	codec
op	158:22	0:0	6	->
water	158:24	0:0	6	codec_id
stmts	158:34	165:8	5	
water	158:34	0:0	6	{
call	159:12	160:62	6	flv_set_audio_codec
arg	159:32	159:33	7	s
water	159:32	0:0	8	s
arg	159:35	159:37	7	st
water	159:35	0:0	8	st
arg	159:39	159:48	7	st->codec
water	159:39	0:0	8	st
op	159:41	0:0	8	->
water	159:43	0:0	8	codec
arg	160:32	160:62	7	flags&FLV_AUDIO_CODECID_MASK
water	160:32	0:0	8	flags
op	160:38	0:0	8	&
water	160:40	0:0	8	FLV_AUDIO_CODECID_MASK
water	160:63	0:0	6	;
water	161:12	0:0	6	flv
op	161:15	0:0	6	->
water	161:17	0:0	6	last_sample_rate
op	161:34	0:0	6	=
water	162:12	0:0	6	sample_rate
op	162:34	0:0	6	=
water	162:36	0:0	6	st
op	162:38	0:0	6	->
water	162:40	0:0	6	codec
op	162:45	0:0	6	->
water	162:47	0:0	6	sample_rate
water	162:58	0:0	6	;
water	163:12	0:0	6	flv
op	163:15	0:0	6	->
water	163:17	0:0	6	last_channels
op	163:34	0:0	6	=
water	164:12	0:0	6	channels
op	164:34	0:0	6	=
water	164:36	0:0	6	st
op	164:38	0:0	6	->
water	164:40	0:0	6	codec
op	164:45	0:0	6	->
water	164:47	0:0	6	channels
water	164:55	0:0	6	;
water	165:8	0:0	6	}
else	165:10	171:8	4
stmts	165:15	171:8	5	
water	165:15	0:0	6	{
decl	166:12	166:36	6	AVCodecContext	ctx
op	166:31	0:0	6	=
water	166:33	0:0	6	{
water	166:34	0:0	6	0
water	166:35	0:0	6	}
water	167:12	0:0	6	ctx
op	167:15	0:0	6	.
water	167:16	0:0	6	sample_rate
op	167:28	0:0	6	=
water	167:30	0:0	6	sample_rate
water	167:41	0:0	6	;
water	168:12	0:0	6	ctx
op	168:15	0:0	6	.
water	168:16	0:0	6	bits_per_coded_sample
op	168:38	0:0	6	=
water	168:40	0:0	6	bits_per_coded_sample
water	168:61	0:0	6	;
call	169:12	169:75	6	flv_set_audio_codec
arg	169:32	169:33	7	s
water	169:32	0:0	8	s
arg	169:35	169:37	7	st
water	169:35	0:0	8	st
arg	169:39	169:43	7	&ctx
op	169:39	0:0	8	&
water	169:40	0:0	8	ctx
arg	169:45	169:75	7	flags&FLV_AUDIO_CODECID_MASK
water	169:45	0:0	8	flags
op	169:51	0:0	8	&
water	169:53	0:0	8	FLV_AUDIO_CODECID_MASK
water	169:76	0:0	6	;
water	170:12	0:0	6	sample_rate
op	170:24	0:0	6	=
water	170:26	0:0	6	ctx
op	170:29	0:0	6	.
water	170:30	0:0	6	sample_rate
water	170:41	0:0	6	;
water	171:8	0:0	6	}
water	172:4	0:0	4	}
else	172:6	174:4	2
stmts	172:11	174:4	3	
if	172:11	174:4	4	(stream_type == FLV_STREAM_TYPE_VIDEO)
cond	172:15	172:30	5	stream_type == FLV_STREAM_TYPE_VIDEO
water	172:15	0:0	6	stream_type
op	172:27	0:0	6	==
water	172:30	0:0	6	FLV_STREAM_TYPE_VIDEO
stmts	172:53	174:4	5	
water	172:53	0:0	6	{
water	173:8	0:0	6	size
op	173:13	0:0	6	-=
call	173:16	173:76	6	flv_set_video_codec
arg	173:36	173:37	7	s
water	173:36	0:0	8	s
arg	173:39	173:41	7	st
water	173:39	0:0	8	st
arg	173:43	173:73	7	flags&FLV_VIDEO_CODECID_MASK
water	173:43	0:0	8	flags
op	173:49	0:0	8	&
water	173:51	0:0	8	FLV_VIDEO_CODECID_MASK
arg	173:75	173:76	7	1
water	173:75	0:0	8	1
water	173:77	0:0	6	;
water	174:4	0:0	6	}
else	174:6	176:4	2
stmts	174:11	176:4	3	
if	174:11	176:4	4	(stream_type == FLV_STREAM_TYPE_DATA)
cond	174:15	174:30	5	stream_type == FLV_STREAM_TYPE_DATA
water	174:15	0:0	6	stream_type
op	174:27	0:0	6	==
water	174:30	0:0	6	FLV_STREAM_TYPE_DATA
stmts	174:52	176:4	5	
water	174:52	0:0	6	{
water	175:8	0:0	6	st
op	175:10	0:0	6	->
water	175:12	0:0	6	codec
op	175:17	0:0	6	->
water	175:19	0:0	6	codec_id
op	175:28	0:0	6	=
water	175:30	0:0	6	AV_CODEC_ID_TEXT
water	175:46	0:0	6	;
water	176:4	0:0	6	}
if	177:4	229:4	2	(st -> codec -> codec_id == AV_CODEC_ID_AAC || st -> codec -> codec_id == AV_CODEC_ID_H264 || st -> codec -> codec_id == AV_CODEC_ID_MPEG4)
cond	177:8	179:31	3	st -> codec -> codec_id == AV_CODEC_ID_AAC || st -> codec -> codec_id == AV_CODEC_ID_H264 || st -> codec -> codec_id == AV_CODEC_ID_MPEG4
water	177:8	0:0	4	st
op	177:10	0:0	4	->
water	177:12	0:0	4	codec
op	177:17	0:0	4	->
water	177:19	0:0	4	codec_id
op	177:28	0:0	4	==
water	177:31	0:0	4	AV_CODEC_ID_AAC
op	177:47	0:0	4	||
water	178:8	0:0	4	st
op	178:10	0:0	4	->
water	178:12	0:0	4	codec
op	178:17	0:0	4	->
water	178:19	0:0	4	codec_id
op	178:28	0:0	4	==
water	178:31	0:0	4	AV_CODEC_ID_H264
op	178:48	0:0	4	||
water	179:8	0:0	4	st
op	179:10	0:0	4	->
water	179:12	0:0	4	codec
op	179:17	0:0	4	->
water	179:19	0:0	4	codec_id
op	179:28	0:0	4	==
water	179:31	0:0	4	AV_CODEC_ID_MPEG4
stmts	179:50	229:4	3	
water	179:50	0:0	4	{
decl	180:8	180:33	4	int	type
op	180:17	0:0	4	=
call	180:19	180:32	5	avio_r8
arg	180:27	180:32	6	s->pb
water	180:27	0:0	7	s
op	180:28	0:0	7	->
water	180:30	0:0	7	pb
water	181:8	0:0	4	size
op	181:12	0:0	4	--
water	181:14	0:0	4	;
if	182:8	196:8	4	(st -> codec -> codec_id == AV_CODEC_ID_H264 || st -> codec -> codec_id == AV_CODEC_ID_MPEG4)
cond	182:12	182:78	5	st -> codec -> codec_id == AV_CODEC_ID_H264 || st -> codec -> codec_id == AV_CODEC_ID_MPEG4
water	182:12	0:0	6	st
op	182:14	0:0	6	->
water	182:16	0:0	6	codec
op	182:21	0:0	6	->
water	182:23	0:0	6	codec_id
op	182:32	0:0	6	==
water	182:35	0:0	6	AV_CODEC_ID_H264
op	182:52	0:0	6	||
water	182:55	0:0	6	st
op	182:57	0:0	6	->
water	182:59	0:0	6	codec
op	182:64	0:0	6	->
water	182:66	0:0	6	codec_id
op	182:75	0:0	6	==
water	182:78	0:0	6	AV_CODEC_ID_MPEG4
stmts	182:97	196:8	5	
water	182:97	0:0	6	{
decl	184:12	184:70	6	int32_t	cts
op	184:24	0:0	6	=
water	184:26	0:0	6	(
call	184:27	184:42	7	avio_rb24
arg	184:37	184:42	8	s->pb
water	184:37	0:0	9	s
op	184:38	0:0	9	->
water	184:40	0:0	9	pb
op	184:44	0:0	6	+
water	184:46	0:0	6	0
water	184:47	0:0	6	xff800000
water	184:56	0:0	6	)
op	184:58	0:0	6	^
water	184:60	0:0	6	0
water	184:61	0:0	6	xff800000
water	185:12	0:0	6	pts
op	185:16	0:0	6	=
water	185:18	0:0	6	dts
op	185:22	0:0	6	+
water	185:24	0:0	6	cts
water	185:27	0:0	6	;
if	186:12	191:12	6	(cts < 0)
cond	186:16	186:22	7	cts < 0
water	186:16	0:0	8	cts
op	186:20	0:0	8	<
water	186:22	0:0	8	0
stmts	186:25	191:12	7	
water	186:25	0:0	8	{
if	187:16	189:78	8	(! flv -> wrong_dts)
cond	187:20	187:26	9	! flv -> wrong_dts
op	187:20	0:0	10	!
water	187:21	0:0	10	flv
op	187:24	0:0	10	->
water	187:26	0:0	10	wrong_dts
stmts	188:20	189:78	9	
call	188:20	189:77	10	av_log
arg	188:27	188:28	11	s
water	188:27	0:0	12	s
arg	188:30	188:44	11	AV_LOG_WARNING
water	188:30	0:0	12	AV_LOG_WARNING
arg	189:24	189:77	11	"Negative cts, previous timestamps might be wrong.\n"
water	189:24	0:0	12	"Negative cts, previous timestamps might be wrong.\n"
water	189:78	0:0	10	;
water	190:16	0:0	8	flv
op	190:19	0:0	8	->
water	190:21	0:0	8	wrong_dts
op	190:31	0:0	8	=
water	190:33	0:0	8	1
water	190:34	0:0	8	;
water	191:12	0:0	8	}
else	191:14	195:12	6
stmts	191:19	195:12	7	
if	191:19	195:12	8	(FFABS (dts - pts ) > 1000 * 60 * 15)
cond	191:23	191:50	9	FFABS (dts - pts ) > 1000 * 60 * 15
call	191:23	191:38	10	FFABS
arg	191:29	191:38	11	dts-pts
water	191:29	0:0	12	dts
op	191:33	0:0	12	-
water	191:35	0:0	12	pts
op	191:40	0:0	10	>
water	191:42	0:0	10	1000
op	191:46	0:0	10	*
water	191:47	0:0	10	60
op	191:49	0:0	10	*
water	191:50	0:0	10	15
stmts	191:54	195:12	9	
water	191:54	0:0	10	{
call	192:16	193:75	10	av_log
arg	192:23	192:24	11	s
water	192:23	0:0	12	s
arg	192:26	192:40	11	AV_LOG_WARNING
water	192:26	0:0	12	AV_LOG_WARNING
arg	193:23	193:65	11	"invalid timestamps %"PRId64" %"PRId64"\n"
water	193:23	0:0	12	"invalid timestamps %"
water	193:45	0:0	12	PRId64
water	193:51	0:0	12	" %"
water	193:55	0:0	12	PRId64
water	193:61	0:0	12	"\n"
arg	193:67	193:70	11	dts
water	193:67	0:0	12	dts
arg	193:72	193:75	11	pts
water	193:72	0:0	12	pts
water	193:76	0:0	10	;
water	194:16	0:0	10	dts
op	194:20	0:0	10	=
water	194:22	0:0	10	pts
op	194:26	0:0	10	=
water	194:28	0:0	10	AV_NOPTS_VALUE
water	194:42	0:0	10	;
water	195:12	0:0	10	}
water	196:8	0:0	6	}
if	197:8	228:8	4	(type == 0 && ( ! st -> codec -> extradata || st -> codec -> codec_id == AV_CODEC_ID_AAC || st -> codec -> codec_id == AV_CODEC_ID_H264 ))
cond	197:12	198:51	5	type == 0 && ( ! st -> codec -> extradata || st -> codec -> codec_id == AV_CODEC_ID_AAC || st -> codec -> codec_id == AV_CODEC_ID_H264 )
water	197:12	0:0	6	type
op	197:17	0:0	6	==
water	197:20	0:0	6	0
op	197:22	0:0	6	&&
water	197:25	0:0	6	(
op	197:26	0:0	6	!
water	197:27	0:0	6	st
op	197:29	0:0	6	->
water	197:31	0:0	6	codec
op	197:36	0:0	6	->
water	197:38	0:0	6	extradata
op	197:48	0:0	6	||
water	197:51	0:0	6	st
op	197:53	0:0	6	->
water	197:55	0:0	6	codec
op	197:60	0:0	6	->
water	197:62	0:0	6	codec_id
op	197:71	0:0	6	==
water	197:74	0:0	6	AV_CODEC_ID_AAC
op	197:90	0:0	6	||
water	198:12	0:0	6	st
op	198:14	0:0	6	->
water	198:16	0:0	6	codec
op	198:21	0:0	6	->
water	198:23	0:0	6	codec_id
op	198:32	0:0	6	==
water	198:35	0:0	6	AV_CODEC_ID_H264
water	198:51	0:0	6	)
stmts	198:54	228:8	5	
water	198:54	0:0	6	{
decl	199:12	199:32	6	AVDictionaryEntry	*t
if	200:12	205:12	6	(st -> codec -> extradata)
cond	200:16	200:27	7	st -> codec -> extradata
water	200:16	0:0	8	st
op	200:18	0:0	8	->
water	200:20	0:0	8	codec
op	200:25	0:0	8	->
water	200:27	0:0	8	extradata
stmts	200:38	205:12	7	
water	200:38	0:0	8	{
if	201:16	202:30	8	(( ret =flv_queue_extradata (flv ,s -> pb ,stream_type ,size ) ) < 0)
cond	201:20	201:81	9	( ret =flv_queue_extradata (flv ,s -> pb ,stream_type ,size ) ) < 0
water	201:20	0:0	10	(
water	201:21	0:0	10	ret
op	201:25	0:0	10	=
call	201:27	201:76	10	flv_queue_extradata
arg	201:47	201:50	11	flv
water	201:47	0:0	12	flv
arg	201:52	201:57	11	s->pb
water	201:52	0:0	12	s
op	201:53	0:0	12	->
water	201:55	0:0	12	pb
arg	201:59	201:70	11	stream_type
water	201:59	0:0	12	stream_type
arg	201:72	201:76	11	size
water	201:72	0:0	12	size
water	201:77	0:0	10	)
op	201:79	0:0	10	<
water	201:81	0:0	10	0
stmts	202:20	202:30	9	
return	202:20	202:30	10	ret
water	202:27	0:0	11	ret
water	203:16	0:0	8	ret
op	203:20	0:0	8	=
call	203:22	203:36	8	AVERROR
arg	203:30	203:36	9	EAGAIN
water	203:30	0:0	10	EAGAIN
water	203:37	0:0	8	;
goto	204:16	204:26	8	leave
water	204:21	0:0	9	leave
water	205:12	0:0	8	}
if	206:12	207:26	6	(( ret =flv_get_extradata (s ,st ,size ) ) < 0)
cond	206:16	206:57	7	( ret =flv_get_extradata (s ,st ,size ) ) < 0
water	206:16	0:0	8	(
water	206:17	0:0	8	ret
op	206:21	0:0	8	=
call	206:23	206:52	8	flv_get_extradata
arg	206:41	206:42	9	s
water	206:41	0:0	10	s
arg	206:44	206:46	9	st
water	206:44	0:0	10	st
arg	206:48	206:52	9	size
water	206:48	0:0	10	size
water	206:53	0:0	8	)
op	206:55	0:0	8	<
water	206:57	0:0	8	0
stmts	207:16	207:26	7	
return	207:16	207:26	8	ret
water	207:23	0:0	9	ret
water	209:12	0:0	6	t
op	209:14	0:0	6	=
call	209:16	209:59	6	av_dict_get
arg	209:28	209:39	7	s->metadata
water	209:28	0:0	8	s
op	209:29	0:0	8	->
water	209:31	0:0	8	metadata
arg	209:41	209:50	7	"Encoder"
water	209:41	0:0	8	"Encoder"
arg	209:52	209:56	7	NULL
water	209:52	0:0	8	NULL
arg	209:58	209:59	7	0
water	209:58	0:0	8	0
water	209:60	0:0	6	;
if	210:12	211:45	6	(st -> codec -> codec_id == AV_CODEC_ID_AAC && t && !strcmp (t -> value ,"Omnia A/XE" ))
cond	210:16	210:93	7	st -> codec -> codec_id == AV_CODEC_ID_AAC && t && !strcmp (t -> value ,"Omnia A/XE" )
water	210:16	0:0	8	st
op	210:18	0:0	8	->
water	210:20	0:0	8	codec
op	210:25	0:0	8	->
water	210:27	0:0	8	codec_id
op	210:36	0:0	8	==
water	210:39	0:0	8	AV_CODEC_ID_AAC
op	210:55	0:0	8	&&
water	210:58	0:0	8	t
op	210:60	0:0	8	&&
op	210:63	0:0	8	!
call	210:64	210:93	8	strcmp
arg	210:71	210:79	9	t->value
water	210:71	0:0	10	t
op	210:72	0:0	10	->
water	210:74	0:0	10	value
arg	210:81	210:93	9	"Omnia A/XE"
water	210:81	0:0	10	"Omnia A/XE"
stmts	211:16	211:45	7	
water	211:16	0:0	8	st
op	211:18	0:0	8	->
water	211:20	0:0	8	codec
op	211:25	0:0	8	->
water	211:27	0:0	8	extradata_size
op	211:42	0:0	8	=
water	211:44	0:0	8	2
water	211:45	0:0	8	;
if	212:12	225:12	6	(st -> codec -> codec_id == AV_CODEC_ID_AAC && 0)
cond	212:16	212:58	7	st -> codec -> codec_id == AV_CODEC_ID_AAC && 0
water	212:16	0:0	8	st
op	212:18	0:0	8	->
water	212:20	0:0	8	codec
op	212:25	0:0	8	->
water	212:27	0:0	8	codec_id
op	212:36	0:0	8	==
water	212:39	0:0	8	AV_CODEC_ID_AAC
op	212:55	0:0	8	&&
water	212:58	0:0	8	0
stmts	212:61	225:12	7	
water	212:61	0:0	8	{
decl	213:16	213:36	8	MPEG4AudioConfig	cfg
if	214:16	224:16	8	(avpriv_mpeg4audio_get_config (& cfg ,st -> codec -> extradata ,st -> codec -> extradata_size * 8 ,1 ) >= 0)
cond	214:20	215:82	9	avpriv_mpeg4audio_get_config (& cfg ,st -> codec -> extradata ,st -> codec -> extradata_size * 8 ,1 ) >= 0
call	214:20	215:77	10	avpriv_mpeg4audio_get_config
arg	214:49	214:53	11	&cfg
op	214:49	0:0	12	&
water	214:50	0:0	12	cfg
arg	214:55	214:75	11	st->codec->extradata
water	214:55	0:0	12	st
op	214:57	0:0	12	->
water	214:59	0:0	12	codec
op	214:64	0:0	12	->
water	214:66	0:0	12	extradata
arg	215:45	215:74	11	st->codec->extradata_size*8
water	215:45	0:0	12	st
op	215:47	0:0	12	->
water	215:49	0:0	12	codec
op	215:54	0:0	12	->
water	215:56	0:0	12	extradata_size
op	215:71	0:0	12	*
water	215:73	0:0	12	8
arg	215:76	215:77	11	1
water	215:76	0:0	12	1
op	215:79	0:0	10	>=
water	215:82	0:0	10	0
stmts	215:85	224:16	9	
water	215:85	0:0	10	{
water	216:16	0:0	10	st
op	216:18	0:0	10	->
water	216:20	0:0	10	codec
op	216:25	0:0	10	->
water	216:27	0:0	10	channels
op	216:42	0:0	10	=
water	216:44	0:0	10	cfg
op	216:47	0:0	10	.
water	216:48	0:0	10	channels
water	216:56	0:0	10	;
water	217:16	0:0	10	st
op	217:18	0:0	10	->
water	217:20	0:0	10	codec
op	217:25	0:0	10	->
water	217:27	0:0	10	channel_layout
op	217:42	0:0	10	=
water	217:44	0:0	10	0
water	217:45	0:0	10	;
if	218:16	219:64	10	(cfg . ext_sample_rate)
cond	218:20	218:24	11	cfg . ext_sample_rate
water	218:20	0:0	12	cfg
op	218:23	0:0	12	.
water	218:24	0:0	12	ext_sample_rate
stmts	219:20	219:64	11	
water	219:20	0:0	12	st
op	219:22	0:0	12	->
water	219:24	0:0	12	codec
op	219:29	0:0	12	->
water	219:31	0:0	12	sample_rate
op	219:43	0:0	12	=
water	219:45	0:0	12	cfg
op	219:48	0:0	12	.
water	219:49	0:0	12	ext_sample_rate
water	219:64	0:0	12	;
else	220:16	221:60	10
stmts	221:20	221:60	11	
water	221:20	0:0	12	st
op	221:22	0:0	12	->
water	221:24	0:0	12	codec
op	221:29	0:0	12	->
water	221:31	0:0	12	sample_rate
op	221:43	0:0	12	=
water	221:45	0:0	12	cfg
op	221:48	0:0	12	.
water	221:49	0:0	12	sample_rate
water	221:60	0:0	12	;
call	222:16	223:67	10	av_log
arg	222:23	222:24	11	s
water	222:23	0:0	12	s
arg	222:26	222:38	11	AV_LOG_TRACE
water	222:26	0:0	12	AV_LOG_TRACE
arg	222:40	222:82	11	"mp4a config channels %d sample rate %d\n"
water	222:40	0:0	12	"mp4a config channels %d sample rate %d\n"
arg	223:24	223:43	11	st->codec->channels
water	223:24	0:0	12	st
op	223:26	0:0	12	->
water	223:28	0:0	12	codec
op	223:33	0:0	12	->
water	223:35	0:0	12	channels
arg	223:45	223:67	11	st->codec->sample_rate
water	223:45	0:0	12	st
op	223:47	0:0	12	->
water	223:49	0:0	12	codec
op	223:54	0:0	12	->
water	223:56	0:0	12	sample_rate
water	223:68	0:0	10	;
water	224:16	0:0	10	}
water	225:12	0:0	8	}
water	226:12	0:0	6	ret
op	226:16	0:0	6	=
call	226:18	226:32	6	AVERROR
arg	226:26	226:32	7	EAGAIN
water	226:26	0:0	8	EAGAIN
water	226:33	0:0	6	;
goto	227:12	227:22	6	leave
water	227:17	0:0	7	leave
water	228:8	0:0	6	}
water	229:4	0:0	4	}
if	231:4	234:4	2	(! size)
cond	231:8	231:9	3	! size
op	231:8	0:0	4	!
water	231:9	0:0	4	size
stmts	231:15	234:4	3	
water	231:15	0:0	4	{
water	232:8	0:0	4	ret
op	232:12	0:0	4	=
call	232:14	232:28	4	AVERROR
arg	232:22	232:28	5	EAGAIN
water	232:22	0:0	6	EAGAIN
water	232:29	0:0	4	;
goto	233:8	233:18	4	leave
water	233:13	0:0	5	leave
water	234:4	0:0	4	}
water	235:4	0:0	2	ret
op	235:8	0:0	2	=
call	235:10	235:40	2	av_get_packet
arg	235:24	235:29	3	s->pb
water	235:24	0:0	4	s
op	235:25	0:0	4	->
water	235:27	0:0	4	pb
arg	235:31	235:34	3	pkt
water	235:31	0:0	4	pkt
arg	235:36	235:40	3	size
water	235:36	0:0	4	size
water	235:41	0:0	2	;
if	236:4	237:18	2	(ret < 0)
cond	236:8	236:14	3	ret < 0
water	236:8	0:0	4	ret
op	236:12	0:0	4	<
water	236:14	0:0	4	0
stmts	237:8	237:18	3	
return	237:8	237:18	4	ret
water	237:15	0:0	5	ret
water	238:4	0:0	2	pkt
op	238:7	0:0	2	->
water	238:9	0:0	2	dts
op	238:22	0:0	2	=
water	238:24	0:0	2	dts
water	238:27	0:0	2	;
water	239:4	0:0	2	pkt
op	239:7	0:0	2	->
water	239:9	0:0	2	pts
op	239:22	0:0	2	=
water	239:24	0:0	2	pts
op	239:28	0:0	2	==
water	239:31	0:0	2	AV_NOPTS_VALUE
water	239:46	0:0	2	?
water	239:48	0:0	2	dts
water	239:52	0:0	2	:
water	239:54	0:0	2	pts
water	239:57	0:0	2	;
water	240:4	0:0	2	pkt
op	240:7	0:0	2	->
water	240:9	0:0	2	stream_index
op	240:22	0:0	2	=
water	240:24	0:0	2	st
op	240:26	0:0	2	->
water	240:28	0:0	2	index
water	240:33	0:0	2	;
if	241:4	250:4	2	(flv -> new_extradata [ stream_type ])
cond	241:8	241:38	3	flv -> new_extradata [ stream_type ]
water	241:8	0:0	4	flv
op	241:11	0:0	4	->
water	241:13	0:0	4	new_extradata
op	241:26	0:0	4	[
water	241:27	0:0	4	stream_type
op	241:38	0:0	4	]
stmts	241:41	250:4	3	
water	241:41	0:0	4	{
decl	242:8	243:85	4	uint8_t	*side
op	242:22	0:0	4	=
call	242:24	243:84	5	av_packet_new_side_data
arg	242:48	242:51	6	pkt
water	242:48	0:0	7	pkt
arg	242:53	242:78	6	AV_PKT_DATA_NEW_EXTRADATA
water	242:53	0:0	7	AV_PKT_DATA_NEW_EXTRADATA
arg	243:48	243:84	6	flv->new_extradata_size[stream_type]
water	243:48	0:0	7	flv
op	243:51	0:0	7	->
water	243:53	0:0	7	new_extradata_size
op	243:71	0:0	7	[
water	243:72	0:0	7	stream_type
op	243:83	0:0	7	]
if	244:8	249:8	4	(side)
cond	244:12	244:12	5	side
water	244:12	0:0	6	side
stmts	244:18	249:8	5	
water	244:18	0:0	6	{
call	245:12	246:55	6	memcpy
arg	245:19	245:23	7	side
water	245:19	0:0	8	side
arg	245:25	245:56	7	flv->new_extradata[stream_type]
water	245:25	0:0	8	flv
op	245:28	0:0	8	->
water	245:30	0:0	8	new_extradata
op	245:43	0:0	8	[
water	245:44	0:0	8	stream_type
op	245:55	0:0	8	]
arg	246:19	246:55	7	flv->new_extradata_size[stream_type]
water	246:19	0:0	8	flv
op	246:22	0:0	8	->
water	246:24	0:0	8	new_extradata_size
op	246:42	0:0	8	[
water	246:43	0:0	8	stream_type
op	246:54	0:0	8	]
water	246:56	0:0	6	;
call	247:12	247:53	6	av_freep
arg	247:21	247:53	7	&flv->new_extradata[stream_type]
op	247:21	0:0	8	&
water	247:22	0:0	8	flv
op	247:25	0:0	8	->
water	247:27	0:0	8	new_extradata
op	247:40	0:0	8	[
water	247:41	0:0	8	stream_type
op	247:52	0:0	8	]
water	247:54	0:0	6	;
water	248:12	0:0	6	flv
op	248:15	0:0	6	->
water	248:17	0:0	6	new_extradata_size
op	248:35	0:0	6	[
water	248:36	0:0	6	stream_type
op	248:47	0:0	6	]
op	248:49	0:0	6	=
water	248:51	0:0	6	0
water	248:52	0:0	6	;
water	249:8	0:0	6	}
water	250:4	0:0	4	}
if	251:4	257:4	2	(stream_type == FLV_STREAM_TYPE_AUDIO && ( sample_rate != flv -> last_sample_rate || channels != flv -> last_channels ))
cond	251:8	253:54	3	stream_type == FLV_STREAM_TYPE_AUDIO && ( sample_rate != flv -> last_sample_rate || channels != flv -> last_channels )
water	251:8	0:0	4	stream_type
op	251:20	0:0	4	==
water	251:23	0:0	4	FLV_STREAM_TYPE_AUDIO
op	251:45	0:0	4	&&
water	252:20	0:0	4	(
water	252:21	0:0	4	sample_rate
op	252:33	0:0	4	!=
water	252:36	0:0	4	flv
op	252:39	0:0	4	->
water	252:41	0:0	4	last_sample_rate
op	252:58	0:0	4	||
water	253:21	0:0	4	channels
op	253:33	0:0	4	!=
water	253:36	0:0	4	flv
op	253:39	0:0	4	->
water	253:41	0:0	4	last_channels
water	253:54	0:0	4	)
stmts	253:57	257:4	3	
water	253:57	0:0	4	{
water	254:8	0:0	4	flv
op	254:11	0:0	4	->
water	254:13	0:0	4	last_sample_rate
op	254:30	0:0	4	=
water	254:32	0:0	4	sample_rate
water	254:43	0:0	4	;
water	255:8	0:0	4	flv
op	255:11	0:0	4	->
water	255:13	0:0	4	last_channels
op	255:30	0:0	4	=
water	255:32	0:0	4	channels
water	255:40	0:0	4	;
call	256:8	256:63	4	ff_add_param_change
arg	256:28	256:31	5	pkt
water	256:28	0:0	6	pkt
arg	256:33	256:41	5	channels
water	256:33	0:0	6	channels
arg	256:43	256:44	5	0
water	256:43	0:0	6	0
arg	256:46	256:57	5	sample_rate
water	256:46	0:0	6	sample_rate
arg	256:59	256:60	5	0
water	256:59	0:0	6	0
arg	256:62	256:63	5	0
water	256:62	0:0	6	0
water	256:64	0:0	4	;
water	257:4	0:0	4	}
if	258:4	261:37	2	(stream_type == FLV_STREAM_TYPE_AUDIO || ( ( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_KEY ) || stream_type == FLV_STREAM_TYPE_DATA)
cond	258:12	260:27	3	stream_type == FLV_STREAM_TYPE_AUDIO || ( ( flags & FLV_VIDEO_FRAMETYPE_MASK ) == FLV_FRAME_KEY ) || stream_type == FLV_STREAM_TYPE_DATA
water	258:12	0:0	4	stream_type
op	258:24	0:0	4	==
water	258:27	0:0	4	FLV_STREAM_TYPE_AUDIO
op	258:49	0:0	4	||
water	259:12	0:0	4	(
water	259:13	0:0	4	(
water	259:14	0:0	4	flags
op	259:20	0:0	4	&
water	259:22	0:0	4	FLV_VIDEO_FRAMETYPE_MASK
water	259:46	0:0	4	)
op	259:48	0:0	4	==
water	259:51	0:0	4	FLV_FRAME_KEY
water	259:64	0:0	4	)
op	259:66	0:0	4	||
water	260:12	0:0	4	stream_type
op	260:24	0:0	4	==
water	260:27	0:0	4	FLV_STREAM_TYPE_DATA
stmts	261:8	261:37	3	
water	261:8	0:0	4	pkt
op	261:11	0:0	4	->
water	261:13	0:0	4	flags
op	261:19	0:0	4	|=
water	261:22	0:0	4	AV_PKT_FLAG_KEY
water	261:37	0:0	4	;
label	262:0	262:5	2	leave :
call	263:4	263:22	2	avio_skip
arg	263:14	263:19	3	s->pb
water	263:14	0:0	4	s
op	263:15	0:0	4	->
water	263:17	0:0	4	pb
arg	263:21	263:22	3	4
water	263:21	0:0	4	4
water	263:23	0:0	2	;
return	264:4	264:14	2	ret
water	264:11	0:0	3	ret
