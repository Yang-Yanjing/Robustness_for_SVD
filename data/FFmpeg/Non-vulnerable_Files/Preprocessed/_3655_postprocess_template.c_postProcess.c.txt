func	1:12	375:0	0	RENAME	(postProcess)
params	1:31	0:0	1	
param	1:32	1:51	2	const uint8_t	src[]
param	1:53	1:66	2	int	srcStride
param	1:68	1:81	2	uint8_t	dst[]
param	1:83	1:96	2	int	dstStride
param	1:98	1:107	2	int	width
param	1:109	1:119	2	int	height
param	2:32	2:54	2	const QP_STORE_T	QPs[]
param	2:56	2:68	2	int	QPStride
param	2:70	2:81	2	int	isColor
param	2:83	2:96	2	PPContext *	c2
stmnts	4:4	374:10	1	
call	4:4	4:35	2	DECLARE_ALIGNED
arg	4:20	4:21	3	8
water	4:20	0:0	4	8
arg	4:23	4:32	3	PPContext
water	4:23	0:0	4	PPContext
arg	4:34	4:35	3	c
water	4:34	0:0	4	c
op	4:36	0:0	2	=
op	4:38	0:0	2	*
water	4:39	0:0	2	c2
water	4:41	0:0	2	;
decl	5:4	5:11	2	int	x
water	5:9	0:0	2	,
decl	5:4	5:11	2	int	y
decl	7:4	7:41	2	const int	mode
op	7:18	0:0	2	=
water	7:20	0:0	2	TEMPLATE_PP_TIME_MODE
decl	9:4	9:67	2	const int	mode
op	9:18	0:0	2	=
water	9:20	0:0	2	isColor
water	9:28	0:0	2	?
water	9:30	0:0	2	c
op	9:31	0:0	2	.
water	9:32	0:0	2	ppMode
op	9:38	0:0	2	.
water	9:39	0:0	2	chromMode
water	9:49	0:0	2	:
water	9:51	0:0	2	c
op	9:52	0:0	2	.
water	9:53	0:0	2	ppMode
op	9:59	0:0	2	.
water	9:60	0:0	2	lumMode
decl	11:4	11:26	2	int	black
op	11:13	0:0	2	=
water	11:14	0:0	2	0
water	11:15	0:0	2	,
decl	11:4	11:26	2	int	white
op	11:22	0:0	2	=
water	11:23	0:0	2	255
decl	12:4	12:29	2	int	QPCorrecture
op	12:20	0:0	2	=
water	12:22	0:0	2	256
op	12:25	0:0	2	*
water	12:26	0:0	2	256
decl	13:4	13:17	2	int	copyAhead
decl	15:4	15:9	2	int	i
decl	17:4	17:58	2	const int	qpHShift
op	17:22	0:0	2	=
water	17:24	0:0	2	isColor
water	17:32	0:0	2	?
water	17:34	0:0	2	4
op	17:35	0:0	2	-
water	17:36	0:0	2	c
op	17:37	0:0	2	.
water	17:38	0:0	2	hChromaSubSample
water	17:55	0:0	2	:
water	17:57	0:0	2	4
decl	18:4	18:58	2	const int	qpVShift
op	18:22	0:0	2	=
water	18:24	0:0	2	isColor
water	18:32	0:0	2	?
water	18:34	0:0	2	4
op	18:35	0:0	2	-
water	18:36	0:0	2	c
op	18:37	0:0	2	.
water	18:38	0:0	2	vChromaSubSample
water	18:55	0:0	2	:
water	18:57	0:0	2	4
water	20:4	0:0	2	uint64_t
op	20:13	0:0	2	*
water	20:15	0:0	2	const
water	20:21	0:0	2	yHistogram
op	20:31	0:0	2	=
water	20:33	0:0	2	c
op	20:34	0:0	2	.
water	20:35	0:0	2	yHistogram
water	20:45	0:0	2	;
water	21:4	0:0	2	uint8_t
op	21:12	0:0	2	*
water	21:14	0:0	2	const
water	21:20	0:0	2	tempSrc
op	21:27	0:0	2	=
water	21:29	0:0	2	srcStride
op	21:39	0:0	2	>
water	21:41	0:0	2	0
water	21:43	0:0	2	?
water	21:45	0:0	2	c
op	21:46	0:0	2	.
water	21:47	0:0	2	tempSrc
water	21:55	0:0	2	:
water	21:57	0:0	2	c
op	21:58	0:0	2	.
water	21:59	0:0	2	tempSrc
op	21:67	0:0	2	-
water	21:69	0:0	2	23
op	21:71	0:0	2	*
water	21:72	0:0	2	srcStride
water	21:81	0:0	2	;
water	22:4	0:0	2	uint8_t
op	22:12	0:0	2	*
water	22:14	0:0	2	const
water	22:20	0:0	2	tempDst
op	22:27	0:0	2	=
water	22:29	0:0	2	(
water	22:30	0:0	2	dstStride
op	22:40	0:0	2	>
water	22:42	0:0	2	0
water	22:44	0:0	2	?
water	22:46	0:0	2	c
op	22:47	0:0	2	.
water	22:48	0:0	2	tempDst
water	22:56	0:0	2	:
water	22:58	0:0	2	c
op	22:59	0:0	2	.
water	22:60	0:0	2	tempDst
op	22:68	0:0	2	-
water	22:70	0:0	2	23
op	22:72	0:0	2	*
water	22:73	0:0	2	dstStride
water	22:82	0:0	2	)
op	22:84	0:0	2	+
water	22:86	0:0	2	32
water	22:88	0:0	2	;
if	24:4	28:4	2	(mode & VISUALIZE)
cond	24:8	24:15	3	mode & VISUALIZE
water	24:8	0:0	4	mode
op	24:13	0:0	4	&
water	24:15	0:0	4	VISUALIZE
stmts	24:25	28:4	3	
water	24:25	0:0	4	{
if	25:8	27:8	4	(! ( mode & ( V_A_DEBLOCK | H_A_DEBLOCK ) ) || TEMPLATE_PP_MMX)
cond	25:11	25:52	5	! ( mode & ( V_A_DEBLOCK | H_A_DEBLOCK ) ) || TEMPLATE_PP_MMX
op	25:11	0:0	6	!
water	25:12	0:0	6	(
water	25:13	0:0	6	mode
op	25:18	0:0	6	&
water	25:20	0:0	6	(
water	25:21	0:0	6	V_A_DEBLOCK
op	25:33	0:0	6	|
water	25:35	0:0	6	H_A_DEBLOCK
water	25:46	0:0	6	)
water	25:47	0:0	6	)
op	25:49	0:0	6	||
water	25:52	0:0	6	TEMPLATE_PP_MMX
stmts	25:69	27:8	5	
water	25:69	0:0	6	{
call	26:12	26:130	6	av_log
arg	26:19	26:21	7	c2
water	26:19	0:0	8	c2
arg	26:23	26:37	7	AV_LOG_WARNING
water	26:23	0:0	8	AV_LOG_WARNING
arg	26:39	26:130	7	"Visualization is currently only supported with the accurate deblock filter without SIMD\n"
water	26:39	0:0	8	"Visualization is currently only supported with the accurate deblock filter without SIMD\n"
water	26:131	0:0	6	;
water	27:8	0:0	6	}
water	28:4	0:0	4	}
for	30:4	37:4	2	(i = 0 ;i < 57;i ++)
forinit	30:8	30:11	3	i = 0 ;
water	30:8	0:0	4	i
op	30:9	0:0	4	=
water	30:10	0:0	4	0
water	30:11	0:0	4	;
cond	30:13	30:15	3	i < 57
water	30:13	0:0	4	i
op	30:14	0:0	4	<
water	30:15	0:0	4	57
forexpr	30:19	30:20	3	i ++
water	30:19	0:0	4	i
op	30:20	0:0	4	++
stmts	30:23	37:4	3	
water	30:23	0:0	4	{
decl	31:8	31:52	4	int	offset
op	31:18	0:0	4	=
water	31:20	0:0	4	(
water	31:21	0:0	4	(
water	31:22	0:0	4	i
op	31:23	0:0	4	*
water	31:24	0:0	4	c
op	31:25	0:0	4	.
water	31:26	0:0	4	ppMode
op	31:32	0:0	4	.
water	31:33	0:0	4	baseDcDiff
water	31:43	0:0	4	)
op	31:44	0:0	4	>>
water	31:46	0:0	4	8
water	31:47	0:0	4	)
op	31:49	0:0	4	+
water	31:51	0:0	4	1
decl	32:8	32:35	4	int	threshold
op	32:21	0:0	4	=
water	32:23	0:0	4	offset
op	32:29	0:0	4	*
water	32:30	0:0	4	2
op	32:32	0:0	4	+
water	32:34	0:0	4	1
water	33:8	0:0	4	c
op	33:9	0:0	4	.
water	33:10	0:0	4	mmxDcOffset
op	33:21	0:0	4	[
water	33:22	0:0	4	i
op	33:23	0:0	4	]
op	33:24	0:0	4	=
water	33:26	0:0	4	0
water	33:27	0:0	4	x7F
op	33:31	0:0	4	-
water	33:33	0:0	4	offset
water	33:39	0:0	4	;
water	34:8	0:0	4	c
op	34:9	0:0	4	.
water	34:10	0:0	4	mmxDcThreshold
op	34:24	0:0	4	[
water	34:25	0:0	4	i
op	34:26	0:0	4	]
op	34:27	0:0	4	=
water	34:29	0:0	4	0
water	34:30	0:0	4	x7F
op	34:34	0:0	4	-
water	34:36	0:0	4	threshold
water	34:45	0:0	4	;
water	35:8	0:0	4	c
op	35:9	0:0	4	.
water	35:10	0:0	4	mmxDcOffset
op	35:21	0:0	4	[
water	35:22	0:0	4	i
op	35:23	0:0	4	]
op	35:24	0:0	4	*=
water	35:27	0:0	4	0
water	35:28	0:0	4	x0101010101010101LL
water	35:47	0:0	4	;
water	36:8	0:0	4	c
op	36:9	0:0	4	.
water	36:10	0:0	4	mmxDcThreshold
op	36:24	0:0	4	[
water	36:25	0:0	4	i
op	36:26	0:0	4	]
op	36:27	0:0	4	*=
water	36:30	0:0	4	0
water	36:31	0:0	4	x0101010101010101LL
water	36:50	0:0	4	;
water	37:4	0:0	4	}
if	39:4	39:51	2	(mode & CUBIC_IPOL_DEINT_FILTER)
cond	39:7	39:14	3	mode & CUBIC_IPOL_DEINT_FILTER
water	39:7	0:0	4	mode
op	39:12	0:0	4	&
water	39:14	0:0	4	CUBIC_IPOL_DEINT_FILTER
stmts	39:39	39:51	3	
water	39:39	0:0	4	copyAhead
op	39:48	0:0	4	=
water	39:49	0:0	4	16
water	39:51	0:0	4	;
else	40:4	42:59	2
stmts	40:9	42:59	3	
if	40:9	42:59	4	(( mode & LINEAR_BLEND_DEINT_FILTER ) || ( mode & FFMPEG_DEINT_FILTER ) || ( mode & LOWPASS5_DEINT_FILTER ))
cond	40:15	42:44	5	( mode & LINEAR_BLEND_DEINT_FILTER ) || ( mode & FFMPEG_DEINT_FILTER ) || ( mode & LOWPASS5_DEINT_FILTER )
water	40:15	0:0	6	(
water	40:16	0:0	6	mode
op	40:21	0:0	6	&
water	40:23	0:0	6	LINEAR_BLEND_DEINT_FILTER
water	40:48	0:0	6	)
op	41:12	0:0	6	||
water	41:15	0:0	6	(
water	41:16	0:0	6	mode
op	41:21	0:0	6	&
water	41:23	0:0	6	FFMPEG_DEINT_FILTER
water	41:42	0:0	6	)
op	42:12	0:0	6	||
water	42:15	0:0	6	(
water	42:16	0:0	6	mode
op	42:21	0:0	6	&
water	42:23	0:0	6	LOWPASS5_DEINT_FILTER
water	42:44	0:0	6	)
stmts	42:47	42:59	5	
water	42:47	0:0	6	copyAhead
op	42:56	0:0	6	=
water	42:57	0:0	6	14
water	42:59	0:0	6	;
else	43:4	46:49	2
stmts	43:9	46:49	3	
if	43:9	46:49	4	(( mode & V_DEBLOCK ) || ( mode & LINEAR_IPOL_DEINT_FILTER ) || ( mode & MEDIAN_DEINT_FILTER ) || ( mode & V_A_DEBLOCK ))
cond	43:15	46:34	5	( mode & V_DEBLOCK ) || ( mode & LINEAR_IPOL_DEINT_FILTER ) || ( mode & MEDIAN_DEINT_FILTER ) || ( mode & V_A_DEBLOCK )
water	43:15	0:0	6	(
water	43:16	0:0	6	mode
op	43:21	0:0	6	&
water	43:23	0:0	6	V_DEBLOCK
water	43:32	0:0	6	)
op	44:12	0:0	6	||
water	44:15	0:0	6	(
water	44:16	0:0	6	mode
op	44:21	0:0	6	&
water	44:23	0:0	6	LINEAR_IPOL_DEINT_FILTER
water	44:47	0:0	6	)
op	45:12	0:0	6	||
water	45:15	0:0	6	(
water	45:16	0:0	6	mode
op	45:21	0:0	6	&
water	45:23	0:0	6	MEDIAN_DEINT_FILTER
water	45:42	0:0	6	)
op	46:12	0:0	6	||
water	46:15	0:0	6	(
water	46:16	0:0	6	mode
op	46:21	0:0	6	&
water	46:23	0:0	6	V_A_DEBLOCK
water	46:34	0:0	6	)
stmts	46:37	46:49	5	
water	46:37	0:0	6	copyAhead
op	46:46	0:0	6	=
water	46:47	0:0	6	13
water	46:49	0:0	6	;
else	47:4	47:44	2
stmts	47:9	47:44	3	
if	47:9	47:44	4	(mode & V_X1_FILTER)
cond	47:12	47:19	5	mode & V_X1_FILTER
water	47:12	0:0	6	mode
op	47:17	0:0	6	&
water	47:19	0:0	6	V_X1_FILTER
stmts	47:32	47:44	5	
water	47:32	0:0	6	copyAhead
op	47:41	0:0	6	=
water	47:42	0:0	6	11
water	47:44	0:0	6	;
else	49:4	49:38	2
stmts	49:9	49:38	3	
if	49:9	49:38	4	(mode & DERING)
cond	49:12	49:19	5	mode & DERING
water	49:12	0:0	6	mode
op	49:17	0:0	6	&
water	49:19	0:0	6	DERING
stmts	49:27	49:38	5	
water	49:27	0:0	6	copyAhead
op	49:36	0:0	6	=
water	49:37	0:0	6	9
water	49:38	0:0	6	;
else	50:4	50:20	2
stmts	50:9	50:20	3	
water	50:9	0:0	4	copyAhead
op	50:18	0:0	4	=
water	50:19	0:0	4	8
water	50:20	0:0	4	;
water	51:4	0:0	2	copyAhead
op	51:13	0:0	2	-=
water	51:16	0:0	2	8
water	51:17	0:0	2	;
if	52:4	90:4	2	(! isColor)
cond	52:7	52:8	3	! isColor
op	52:7	0:0	4	!
water	52:8	0:0	4	isColor
stmts	52:16	90:4	3	
water	52:16	0:0	4	{
decl	53:8	53:23	4	uint64_t	sum
op	53:20	0:0	4	=
water	53:22	0:0	4	0
decl	54:8	54:13	4	int	i
decl	55:8	55:27	4	uint64_t	maxClipped
decl	56:8	56:24	4	uint64_t	clipped
decl	57:8	57:24	4	AVRational	scale
water	58:8	0:0	4	c
op	58:9	0:0	4	.
water	58:10	0:0	4	frameNum
op	58:18	0:0	4	++
water	58:20	0:0	4	;
if	60:8	60:75	4	(c . frameNum == 1)
cond	60:11	60:25	5	c . frameNum == 1
water	60:11	0:0	6	c
op	60:12	0:0	6	.
water	60:13	0:0	6	frameNum
op	60:22	0:0	6	==
water	60:25	0:0	6	1
stmts	60:28	60:75	5	
water	60:28	0:0	6	yHistogram
op	60:38	0:0	6	[
water	60:39	0:0	6	0
op	60:40	0:0	6	]
op	60:41	0:0	6	=
water	60:43	0:0	6	width
op	60:48	0:0	6	*
water	60:49	0:0	6	(
water	60:50	0:0	6	uint64_t
water	60:58	0:0	6	)
water	60:59	0:0	6	height
op	60:65	0:0	6	/
water	60:66	0:0	6	64
op	60:68	0:0	6	*
water	60:69	0:0	6	15
op	60:71	0:0	6	/
water	60:72	0:0	6	256
water	60:75	0:0	6	;
for	61:8	63:8	4	(i = 0 ;i < 256;i ++)
forinit	61:12	61:15	5	i = 0 ;
water	61:12	0:0	6	i
op	61:13	0:0	6	=
water	61:14	0:0	6	0
water	61:15	0:0	6	;
cond	61:17	61:19	5	i < 256
water	61:17	0:0	6	i
op	61:18	0:0	6	<
water	61:19	0:0	6	256
forexpr	61:24	61:25	5	i ++
water	61:24	0:0	6	i
op	61:25	0:0	6	++
stmts	61:28	63:8	5	
water	61:28	0:0	6	{
water	62:12	0:0	6	sum
op	62:15	0:0	6	+=
water	62:18	0:0	6	yHistogram
op	62:28	0:0	6	[
water	62:29	0:0	6	i
op	62:30	0:0	6	]
water	62:31	0:0	6	;
water	63:8	0:0	6	}
water	65:8	0:0	4	maxClipped
op	65:18	0:0	4	=
call	65:20	65:102	4	av_rescale
arg	65:31	65:34	5	sum
water	65:31	0:0	6	sum
arg	65:36	65:68	5	c.ppMode.maxClippedThreshold.num
water	65:36	0:0	6	c
op	65:37	0:0	6	.
water	65:38	0:0	6	ppMode
op	65:44	0:0	6	.
water	65:45	0:0	6	maxClippedThreshold
op	65:64	0:0	6	.
water	65:65	0:0	6	num
arg	65:70	65:102	5	c.ppMode.maxClippedThreshold.den
water	65:70	0:0	6	c
op	65:71	0:0	6	.
water	65:72	0:0	6	ppMode
op	65:78	0:0	6	.
water	65:79	0:0	6	maxClippedThreshold
op	65:98	0:0	6	.
water	65:99	0:0	6	den
water	65:103	0:0	4	;
water	66:8	0:0	4	clipped
op	66:15	0:0	4	=
water	66:17	0:0	4	sum
water	66:20	0:0	4	;
for	67:8	70:8	4	(black = 255 ;black > 0;black --)
forinit	67:12	67:21	5	black = 255 ;
water	67:12	0:0	6	black
op	67:17	0:0	6	=
water	67:18	0:0	6	255
water	67:21	0:0	6	;
cond	67:23	67:29	5	black > 0
water	67:23	0:0	6	black
op	67:28	0:0	6	>
water	67:29	0:0	6	0
forexpr	67:32	67:37	5	black --
water	67:32	0:0	6	black
op	67:37	0:0	6	--
stmts	67:40	70:8	5	
water	67:40	0:0	6	{
if	68:12	68:42	6	(clipped < maxClipped)
cond	68:15	68:25	7	clipped < maxClipped
water	68:15	0:0	8	clipped
op	68:23	0:0	8	<
water	68:25	0:0	8	maxClipped
stmts	68:37	68:42	7	
break	68:37	68:42	8	
water	69:12	0:0	6	clipped
op	69:19	0:0	6	-=
water	69:22	0:0	6	yHistogram
op	69:32	0:0	6	[
water	69:33	0:0	6	black
op	69:38	0:0	6	]
water	69:39	0:0	6	;
water	70:8	0:0	6	}
water	71:8	0:0	4	clipped
op	71:15	0:0	4	=
water	71:17	0:0	4	sum
water	71:20	0:0	4	;
for	72:8	75:8	4	(white = 0 ;white < 256;white ++)
forinit	72:12	72:19	5	white = 0 ;
water	72:12	0:0	6	white
op	72:17	0:0	6	=
water	72:18	0:0	6	0
water	72:19	0:0	6	;
cond	72:21	72:27	5	white < 256
water	72:21	0:0	6	white
op	72:26	0:0	6	<
water	72:27	0:0	6	256
forexpr	72:32	72:37	5	white ++
water	72:32	0:0	6	white
op	72:37	0:0	6	++
stmts	72:40	75:8	5	
water	72:40	0:0	6	{
if	73:12	73:42	6	(clipped < maxClipped)
cond	73:15	73:25	7	clipped < maxClipped
water	73:15	0:0	8	clipped
op	73:23	0:0	8	<
water	73:25	0:0	8	maxClipped
stmts	73:37	73:42	7	
break	73:37	73:42	8	
water	74:12	0:0	6	clipped
op	74:19	0:0	6	-=
water	74:22	0:0	6	yHistogram
op	74:32	0:0	6	[
water	74:33	0:0	6	white
op	74:38	0:0	6	]
water	74:39	0:0	6	;
water	75:8	0:0	6	}
water	76:8	0:0	4	scale
op	76:14	0:0	4	=
water	76:16	0:0	4	(
water	76:17	0:0	4	AVRational
water	76:27	0:0	4	)
water	76:28	0:0	4	{
water	76:29	0:0	4	c
op	76:30	0:0	4	.
water	76:31	0:0	4	ppMode
op	76:37	0:0	4	.
water	76:38	0:0	4	maxAllowedY
op	76:50	0:0	4	-
water	76:52	0:0	4	c
op	76:53	0:0	4	.
water	76:54	0:0	4	ppMode
op	76:60	0:0	4	.
water	76:61	0:0	4	minAllowedY
water	76:72	0:0	4	,
water	76:74	0:0	4	white
op	76:80	0:0	4	-
water	76:82	0:0	4	black
water	76:87	0:0	4	}
water	76:88	0:0	4	;
water	78:8	0:0	4	c
op	78:9	0:0	4	.
water	78:10	0:0	4	packedYScale
op	78:23	0:0	4	=
water	78:25	0:0	4	(
water	78:26	0:0	4	uint16_t
water	78:34	0:0	4	)
call	78:35	78:71	4	av_rescale
arg	78:46	78:55	5	scale.num
water	78:46	0:0	6	scale
op	78:51	0:0	6	.
water	78:52	0:0	6	num
arg	78:57	78:60	5	256
water	78:57	0:0	6	256
arg	78:62	78:71	5	scale.den
water	78:62	0:0	6	scale
op	78:67	0:0	6	.
water	78:68	0:0	6	den
water	78:72	0:0	4	;
water	79:8	0:0	4	c
op	79:9	0:0	4	.
water	79:10	0:0	4	packedYOffset
op	79:23	0:0	4	=
water	79:25	0:0	4	(
water	79:26	0:0	4	(
water	79:27	0:0	4	(
water	79:28	0:0	4	black
op	79:33	0:0	4	*
water	79:34	0:0	4	c
op	79:35	0:0	4	.
water	79:36	0:0	4	packedYScale
water	79:48	0:0	4	)
op	79:49	0:0	4	>>
water	79:51	0:0	4	8
water	79:52	0:0	4	)
op	79:54	0:0	4	-
water	79:56	0:0	4	c
op	79:57	0:0	4	.
water	79:58	0:0	4	ppMode
op	79:64	0:0	4	.
water	79:65	0:0	4	minAllowedY
water	79:76	0:0	4	)
op	79:78	0:0	4	&
water	79:80	0:0	4	0
water	79:81	0:0	4	xFFFF
water	79:86	0:0	4	;
water	81:8	0:0	4	c
op	81:9	0:0	4	.
water	81:10	0:0	4	packedYScale
op	81:23	0:0	4	=
water	81:25	0:0	4	(
water	81:26	0:0	4	uint16_t
water	81:34	0:0	4	)
call	81:35	81:72	4	av_rescale
arg	81:46	81:55	5	scale.num
water	81:46	0:0	6	scale
op	81:51	0:0	6	.
water	81:52	0:0	6	num
arg	81:57	81:61	5	1024
water	81:57	0:0	6	1024
arg	81:63	81:72	5	scale.den
water	81:63	0:0	6	scale
op	81:68	0:0	6	.
water	81:69	0:0	6	den
water	81:73	0:0	4	;
water	82:8	0:0	4	c
op	82:9	0:0	4	.
water	82:10	0:0	4	packedYOffset
op	82:23	0:0	4	=
water	82:25	0:0	4	(
water	82:26	0:0	4	black
op	82:32	0:0	4	-
water	82:34	0:0	4	c
op	82:35	0:0	4	.
water	82:36	0:0	4	ppMode
op	82:42	0:0	4	.
water	82:43	0:0	4	minAllowedY
water	82:54	0:0	4	)
op	82:56	0:0	4	&
water	82:58	0:0	4	0
water	82:59	0:0	4	xFFFF
water	82:64	0:0	4	;
water	84:8	0:0	4	c
op	84:9	0:0	4	.
water	84:10	0:0	4	packedYOffset
op	84:23	0:0	4	|=
water	84:26	0:0	4	c
op	84:27	0:0	4	.
water	84:28	0:0	4	packedYOffset
op	84:41	0:0	4	<<
water	84:43	0:0	4	32
water	84:45	0:0	4	;
water	85:8	0:0	4	c
op	85:9	0:0	4	.
water	85:10	0:0	4	packedYOffset
op	85:23	0:0	4	|=
water	85:26	0:0	4	c
op	85:27	0:0	4	.
water	85:28	0:0	4	packedYOffset
op	85:41	0:0	4	<<
water	85:43	0:0	4	16
water	85:45	0:0	4	;
water	86:8	0:0	4	c
op	86:9	0:0	4	.
water	86:10	0:0	4	packedYScale
op	86:22	0:0	4	|=
water	86:25	0:0	4	c
op	86:26	0:0	4	.
water	86:27	0:0	4	packedYScale
op	86:39	0:0	4	<<
water	86:41	0:0	4	32
water	86:43	0:0	4	;
water	87:8	0:0	4	c
op	87:9	0:0	4	.
water	87:10	0:0	4	packedYScale
op	87:22	0:0	4	|=
water	87:25	0:0	4	c
op	87:26	0:0	4	.
water	87:27	0:0	4	packedYScale
op	87:39	0:0	4	<<
water	87:41	0:0	4	16
water	87:43	0:0	4	;
if	88:8	88:96	4	(mode & LEVEL_FIX)
cond	88:11	88:18	5	mode & LEVEL_FIX
water	88:11	0:0	6	mode
op	88:16	0:0	6	&
water	88:18	0:0	6	LEVEL_FIX
stmts	88:36	88:96	5	
water	88:36	0:0	6	QPCorrecture
op	88:48	0:0	6	=
water	88:50	0:0	6	(
water	88:51	0:0	6	int
water	88:54	0:0	6	)
call	88:55	88:95	6	av_rescale
arg	88:66	88:75	7	scale.num
water	88:66	0:0	8	scale
op	88:71	0:0	8	.
water	88:72	0:0	8	num
arg	88:77	88:84	7	256*256
water	88:77	0:0	8	256
op	88:80	0:0	8	*
water	88:81	0:0	8	256
arg	88:86	88:95	7	scale.den
water	88:86	0:0	8	scale
op	88:91	0:0	8	.
water	88:92	0:0	8	den
water	88:96	0:0	6	;
else	89:8	89:57	4
stmts	89:36	89:57	5	
water	89:36	0:0	6	QPCorrecture
op	89:48	0:0	6	=
water	89:50	0:0	6	256
op	89:53	0:0	6	*
water	89:54	0:0	6	256
water	89:57	0:0	6	;
water	90:4	0:0	4	}
else	90:5	94:4	2
stmts	90:9	94:4	3	
water	90:9	0:0	4	{
water	91:8	0:0	4	c
op	91:9	0:0	4	.
water	91:10	0:0	4	packedYScale
op	91:22	0:0	4	=
water	91:24	0:0	4	0
water	91:25	0:0	4	x0100010001000100LL
water	91:44	0:0	4	;
water	92:8	0:0	4	c
op	92:9	0:0	4	.
water	92:10	0:0	4	packedYOffset
op	92:23	0:0	4	=
water	92:25	0:0	4	0
water	92:26	0:0	4	;
water	93:8	0:0	4	QPCorrecture
op	93:20	0:0	4	=
water	93:22	0:0	4	256
op	93:25	0:0	4	*
water	93:26	0:0	4	256
water	93:29	0:0	4	;
water	94:4	0:0	4	}
water	96:4	0:0	2	y
op	96:5	0:0	2	=
op	96:6	0:0	2	-
water	96:7	0:0	2	BLOCK_SIZE
water	96:17	0:0	2	;
water	97:4	0:0	2	{
decl	98:8	98:52	2	const uint8_t	*srcBlock
op	98:31	0:0	2	=
op	98:33	0:0	2	&
water	98:34	0:0	2	(
water	98:35	0:0	2	src
op	98:38	0:0	2	[
water	98:39	0:0	2	y
op	98:40	0:0	2	*
water	98:41	0:0	2	srcStride
op	98:50	0:0	2	]
water	98:51	0:0	2	)
decl	99:8	99:46	2	uint8_t	*dstBlock
op	99:25	0:0	2	=
water	99:27	0:0	2	tempDst
op	99:35	0:0	2	+
water	99:37	0:0	2	dstStride
for	103:8	128:8	2	(x = 0 ;x < width;x += BLOCK_SIZE)
forinit	103:12	103:15	3	x = 0 ;
water	103:12	0:0	4	x
op	103:13	0:0	4	=
water	103:14	0:0	4	0
water	103:15	0:0	4	;
cond	103:17	103:19	3	x < width
water	103:17	0:0	4	x
op	103:18	0:0	4	<
water	103:19	0:0	4	width
forexpr	103:26	103:29	3	x += BLOCK_SIZE
water	103:26	0:0	4	x
op	103:27	0:0	4	+=
water	103:29	0:0	4	BLOCK_SIZE
stmts	103:40	128:8	3	
water	103:40	0:0	4	{
call	104:12	104:30	4	RENAME
arg	104:19	104:30	5	prefetchnta
water	104:19	0:0	6	prefetchnta
water	104:31	0:0	4	(
water	104:32	0:0	4	srcBlock
op	104:41	0:0	4	+
water	104:43	0:0	4	(
water	104:44	0:0	4	(
water	104:45	0:0	4	(
water	104:46	0:0	4	x
op	104:47	0:0	4	>>
water	104:49	0:0	4	2
water	104:50	0:0	4	)
op	104:51	0:0	4	&
water	104:52	0:0	4	6
water	104:53	0:0	4	)
op	104:55	0:0	4	+
water	104:57	0:0	4	copyAhead
water	104:66	0:0	4	)
op	104:67	0:0	4	*
water	104:68	0:0	4	srcStride
op	104:78	0:0	4	+
water	104:80	0:0	4	32
water	104:82	0:0	4	)
water	104:83	0:0	4	;
call	105:12	105:30	4	RENAME
arg	105:19	105:30	5	prefetchnta
water	105:19	0:0	6	prefetchnta
water	105:31	0:0	4	(
water	105:32	0:0	4	srcBlock
op	105:41	0:0	4	+
water	105:43	0:0	4	(
water	105:44	0:0	4	(
water	105:45	0:0	4	(
water	105:46	0:0	4	x
op	105:47	0:0	4	>>
water	105:49	0:0	4	2
water	105:50	0:0	4	)
op	105:51	0:0	4	&
water	105:52	0:0	4	6
water	105:53	0:0	4	)
op	105:55	0:0	4	+
water	105:57	0:0	4	copyAhead
op	105:66	0:0	4	+
water	105:67	0:0	4	1
water	105:68	0:0	4	)
op	105:69	0:0	4	*
water	105:70	0:0	4	srcStride
op	105:80	0:0	4	+
water	105:82	0:0	4	32
water	105:84	0:0	4	)
water	105:85	0:0	4	;
call	106:12	106:29	4	RENAME
arg	106:19	106:29	5	prefetcht0
water	106:19	0:0	6	prefetcht0
water	106:30	0:0	4	(
water	106:31	0:0	4	dstBlock
op	106:40	0:0	4	+
water	106:42	0:0	4	(
water	106:43	0:0	4	(
water	106:44	0:0	4	(
water	106:45	0:0	4	x
op	106:46	0:0	4	>>
water	106:48	0:0	4	2
water	106:49	0:0	4	)
op	106:50	0:0	4	&
water	106:51	0:0	4	6
water	106:52	0:0	4	)
op	106:54	0:0	4	+
water	106:56	0:0	4	copyAhead
water	106:65	0:0	4	)
op	106:66	0:0	4	*
water	106:67	0:0	4	dstStride
op	106:77	0:0	4	+
water	106:79	0:0	4	32
water	106:81	0:0	4	)
water	106:82	0:0	4	;
call	107:12	107:29	4	RENAME
arg	107:19	107:29	5	prefetcht0
water	107:19	0:0	6	prefetcht0
water	107:30	0:0	4	(
water	107:31	0:0	4	dstBlock
op	107:40	0:0	4	+
water	107:42	0:0	4	(
water	107:43	0:0	4	(
water	107:44	0:0	4	(
water	107:45	0:0	4	x
op	107:46	0:0	4	>>
water	107:48	0:0	4	2
water	107:49	0:0	4	)
op	107:50	0:0	4	&
water	107:51	0:0	4	6
water	107:52	0:0	4	)
op	107:54	0:0	4	+
water	107:56	0:0	4	copyAhead
op	107:65	0:0	4	+
water	107:66	0:0	4	1
water	107:67	0:0	4	)
op	107:68	0:0	4	*
water	107:69	0:0	4	dstStride
op	107:79	0:0	4	+
water	107:81	0:0	4	32
water	107:83	0:0	4	)
water	107:84	0:0	4	;
call	108:12	108:28	4	RENAME
arg	108:19	108:28	5	blockCopy
water	108:19	0:0	6	blockCopy
water	108:29	0:0	4	(
water	108:30	0:0	4	dstBlock
op	108:39	0:0	4	+
water	108:41	0:0	4	dstStride
op	108:50	0:0	4	*
water	108:51	0:0	4	8
water	108:52	0:0	4	,
water	108:54	0:0	4	dstStride
water	108:63	0:0	4	,
water	109:30	0:0	4	srcBlock
op	109:39	0:0	4	+
water	109:41	0:0	4	srcStride
op	109:50	0:0	4	*
water	109:51	0:0	4	8
water	109:52	0:0	4	,
water	109:54	0:0	4	srcStride
water	109:63	0:0	4	,
water	109:65	0:0	4	mode
op	109:70	0:0	4	&
water	109:72	0:0	4	LEVEL_FIX
water	109:81	0:0	4	,
op	109:83	0:0	4	&
water	109:84	0:0	4	c
op	109:85	0:0	4	.
water	109:86	0:0	4	packedYOffset
water	109:99	0:0	4	)
water	109:100	0:0	4	;
call	110:12	110:28	4	RENAME
arg	110:19	110:28	5	duplicate
water	110:19	0:0	6	duplicate
water	110:29	0:0	4	(
water	110:30	0:0	4	dstBlock
op	110:39	0:0	4	+
water	110:41	0:0	4	dstStride
op	110:50	0:0	4	*
water	110:51	0:0	4	8
water	110:52	0:0	4	,
water	110:54	0:0	4	dstStride
water	110:63	0:0	4	)
water	110:64	0:0	4	;
if	111:12	112:73	4	(mode & LINEAR_IPOL_DEINT_FILTER)
cond	111:15	111:22	5	mode & LINEAR_IPOL_DEINT_FILTER
water	111:15	0:0	6	mode
op	111:20	0:0	6	&
water	111:22	0:0	6	LINEAR_IPOL_DEINT_FILTER
stmts	112:16	112:73	5	
call	112:16	112:51	6	RENAME
arg	112:23	112:51	7	deInterlaceInterpolateLinear
water	112:23	0:0	8	deInterlaceInterpolateLinear
water	112:52	0:0	6	(
water	112:53	0:0	6	dstBlock
water	112:61	0:0	6	,
water	112:63	0:0	6	dstStride
water	112:72	0:0	6	)
water	112:73	0:0	6	;
else	113:12	114:84	4
stmts	113:17	114:84	5	
if	113:17	114:84	6	(mode & LINEAR_BLEND_DEINT_FILTER)
cond	113:20	113:27	7	mode & LINEAR_BLEND_DEINT_FILTER
water	113:20	0:0	8	mode
op	113:25	0:0	8	&
water	113:27	0:0	8	LINEAR_BLEND_DEINT_FILTER
stmts	114:16	114:84	7	
call	114:16	114:45	8	RENAME
arg	114:23	114:45	9	deInterlaceBlendLinear
water	114:23	0:0	10	deInterlaceBlendLinear
water	114:46	0:0	8	(
water	114:47	0:0	8	dstBlock
water	114:55	0:0	8	,
water	114:57	0:0	8	dstStride
water	114:66	0:0	8	,
water	114:68	0:0	8	c
op	114:69	0:0	8	.
water	114:70	0:0	8	deintTemp
op	114:80	0:0	8	+
water	114:82	0:0	8	x
water	114:83	0:0	8	)
water	114:84	0:0	8	;
else	115:12	116:62	4
stmts	115:17	116:62	5	
if	115:17	116:62	6	(mode & MEDIAN_DEINT_FILTER)
cond	115:20	115:27	7	mode & MEDIAN_DEINT_FILTER
water	115:20	0:0	8	mode
op	115:25	0:0	8	&
water	115:27	0:0	8	MEDIAN_DEINT_FILTER
stmts	116:16	116:62	7	
call	116:16	116:40	8	RENAME
arg	116:23	116:40	9	deInterlaceMedian
water	116:23	0:0	10	deInterlaceMedian
water	116:41	0:0	8	(
water	116:42	0:0	8	dstBlock
water	116:50	0:0	8	,
water	116:52	0:0	8	dstStride
water	116:61	0:0	8	)
water	116:62	0:0	8	;
else	117:12	118:72	4
stmts	117:17	118:72	5	
if	117:17	118:72	6	(mode & CUBIC_IPOL_DEINT_FILTER)
cond	117:20	117:27	7	mode & CUBIC_IPOL_DEINT_FILTER
water	117:20	0:0	8	mode
op	117:25	0:0	8	&
water	117:27	0:0	8	CUBIC_IPOL_DEINT_FILTER
stmts	118:16	118:72	7	
call	118:16	118:50	8	RENAME
arg	118:23	118:50	9	deInterlaceInterpolateCubic
water	118:23	0:0	10	deInterlaceInterpolateCubic
water	118:51	0:0	8	(
water	118:52	0:0	8	dstBlock
water	118:60	0:0	8	,
water	118:62	0:0	8	dstStride
water	118:71	0:0	8	)
water	118:72	0:0	8	;
else	119:12	120:75	4
stmts	119:17	120:75	5	
if	119:17	120:75	6	(mode & FFMPEG_DEINT_FILTER)
cond	119:20	119:27	7	mode & FFMPEG_DEINT_FILTER
water	119:20	0:0	8	mode
op	119:25	0:0	8	&
water	119:27	0:0	8	FFMPEG_DEINT_FILTER
stmts	120:16	120:75	7	
call	120:16	120:36	8	RENAME
arg	120:23	120:36	9	deInterlaceFF
water	120:23	0:0	10	deInterlaceFF
water	120:37	0:0	8	(
water	120:38	0:0	8	dstBlock
water	120:46	0:0	8	,
water	120:48	0:0	8	dstStride
water	120:57	0:0	8	,
water	120:59	0:0	8	c
op	120:60	0:0	8	.
water	120:61	0:0	8	deintTemp
op	120:71	0:0	8	+
water	120:73	0:0	8	x
water	120:74	0:0	8	)
water	120:75	0:0	8	;
else	121:12	122:100	4
stmts	121:17	122:100	5	
if	121:17	122:100	6	(mode & LOWPASS5_DEINT_FILTER)
cond	121:20	121:27	7	mode & LOWPASS5_DEINT_FILTER
water	121:20	0:0	8	mode
op	121:25	0:0	8	&
water	121:27	0:0	8	LOWPASS5_DEINT_FILTER
stmts	122:16	122:100	7	
call	122:16	122:36	8	RENAME
arg	122:23	122:36	9	deInterlaceL5
water	122:23	0:0	10	deInterlaceL5
water	122:37	0:0	8	(
water	122:38	0:0	8	dstBlock
water	122:46	0:0	8	,
water	122:48	0:0	8	dstStride
water	122:57	0:0	8	,
water	122:59	0:0	8	c
op	122:60	0:0	8	.
water	122:61	0:0	8	deintTemp
op	122:71	0:0	8	+
water	122:73	0:0	8	x
water	122:74	0:0	8	,
water	122:76	0:0	8	c
op	122:77	0:0	8	.
water	122:78	0:0	8	deintTemp
op	122:88	0:0	8	+
water	122:90	0:0	8	width
op	122:96	0:0	8	+
water	122:98	0:0	8	x
water	122:99	0:0	8	)
water	122:100	0:0	8	;
water	126:12	0:0	4	dstBlock
op	126:20	0:0	4	+=
water	126:22	0:0	4	8
water	126:23	0:0	4	;
water	127:12	0:0	4	srcBlock
op	127:20	0:0	4	+=
water	127:22	0:0	4	8
water	127:23	0:0	4	;
water	128:8	0:0	4	}
if	129:8	130:69	2	(width ==FFABS (dstStride ))
cond	129:11	129:33	3	width ==FFABS (dstStride )
water	129:11	0:0	4	width
op	129:16	0:0	4	==
call	129:18	129:33	4	FFABS
arg	129:24	129:33	5	dstStride
water	129:24	0:0	6	dstStride
stmts	130:12	130:69	3	
call	130:12	130:68	4	linecpy
arg	130:20	130:23	5	dst
water	130:20	0:0	6	dst
arg	130:25	130:46	5	tempDst+9*dstStride
water	130:25	0:0	6	tempDst
op	130:33	0:0	6	+
water	130:35	0:0	6	9
op	130:36	0:0	6	*
water	130:37	0:0	6	dstStride
arg	130:48	130:57	5	copyAhead
water	130:48	0:0	6	copyAhead
arg	130:59	130:68	5	dstStride
water	130:59	0:0	6	dstStride
water	130:69	0:0	4	;
else	131:8	136:8	2
stmts	131:12	136:8	3	
water	131:12	0:0	4	{
decl	132:12	132:17	4	int	i
for	133:12	135:12	4	(i = 0 ;i < copyAhead;i ++)
forinit	133:16	133:19	5	i = 0 ;
water	133:16	0:0	6	i
op	133:17	0:0	6	=
water	133:18	0:0	6	0
water	133:19	0:0	6	;
cond	133:21	133:23	5	i < copyAhead
water	133:21	0:0	6	i
op	133:22	0:0	6	<
water	133:23	0:0	6	copyAhead
forexpr	133:34	133:35	5	i ++
water	133:34	0:0	6	i
op	133:35	0:0	6	++
stmts	133:38	135:12	5	
water	133:38	0:0	6	{
call	134:16	134:74	6	memcpy
arg	134:23	134:40	7	dst+i*dstStride
water	134:23	0:0	8	dst
op	134:27	0:0	8	+
water	134:29	0:0	8	i
op	134:30	0:0	8	*
water	134:31	0:0	8	dstStride
arg	134:42	134:67	7	tempDst+(9+i)*dstStride
water	134:42	0:0	8	tempDst
op	134:50	0:0	8	+
water	134:52	0:0	8	(
water	134:53	0:0	8	9
op	134:54	0:0	8	+
water	134:55	0:0	8	i
water	134:56	0:0	8	)
op	134:57	0:0	8	*
water	134:58	0:0	8	dstStride
arg	134:69	134:74	7	width
water	134:69	0:0	8	width
water	134:75	0:0	6	;
water	135:12	0:0	6	}
water	136:8	0:0	4	}
water	137:4	0:0	2	}
for	138:4	348:4	2	(y = 0 ;y < height;y += BLOCK_SIZE)
forinit	138:8	138:11	3	y = 0 ;
water	138:8	0:0	4	y
op	138:9	0:0	4	=
water	138:10	0:0	4	0
water	138:11	0:0	4	;
cond	138:13	138:15	3	y < height
water	138:13	0:0	4	y
op	138:14	0:0	4	<
water	138:15	0:0	4	height
forexpr	138:23	138:26	3	y += BLOCK_SIZE
water	138:23	0:0	4	y
op	138:24	0:0	4	+=
water	138:26	0:0	4	BLOCK_SIZE
stmts	138:37	348:4	3	
water	138:37	0:0	4	{
decl	140:8	140:52	4	const uint8_t	*srcBlock
op	140:31	0:0	4	=
op	140:33	0:0	4	&
water	140:34	0:0	4	(
water	140:35	0:0	4	src
op	140:38	0:0	4	[
water	140:39	0:0	4	y
op	140:40	0:0	4	*
water	140:41	0:0	4	srcStride
op	140:50	0:0	4	]
water	140:51	0:0	4	)
decl	141:8	141:46	4	uint8_t	*dstBlock
op	141:25	0:0	4	=
op	141:27	0:0	4	&
water	141:28	0:0	4	(
water	141:29	0:0	4	dst
op	141:32	0:0	4	[
water	141:33	0:0	4	y
op	141:34	0:0	4	*
water	141:35	0:0	4	dstStride
op	141:44	0:0	4	]
water	141:45	0:0	4	)
decl	143:8	143:41	4	uint8_t	*tempBlock1
op	143:27	0:0	4	=
water	143:29	0:0	4	c
op	143:30	0:0	4	.
water	143:31	0:0	4	tempBlocks
decl	144:8	144:45	4	uint8_t	*tempBlock2
op	144:27	0:0	4	=
water	144:29	0:0	4	c
op	144:30	0:0	4	.
water	144:31	0:0	4	tempBlocks
op	144:42	0:0	4	+
water	144:44	0:0	4	8
decl	146:8	146:57	4	const int8_t	*QPptr
op	146:27	0:0	4	=
op	146:29	0:0	4	&
water	146:30	0:0	4	QPs
op	146:33	0:0	4	[
water	146:34	0:0	4	(
water	146:35	0:0	4	y
op	146:36	0:0	4	>>
water	146:38	0:0	4	qpVShift
water	146:46	0:0	4	)
op	146:47	0:0	4	*
water	146:48	0:0	4	QPStride
op	146:56	0:0	4	]
decl	147:8	147:72	4	int8_t	*nonBQPptr
op	147:25	0:0	4	=
op	147:27	0:0	4	&
water	147:28	0:0	4	c
op	147:29	0:0	4	.
water	147:30	0:0	4	nonBQPTable
op	147:41	0:0	4	[
water	147:42	0:0	4	(
water	147:43	0:0	4	y
op	147:44	0:0	4	>>
water	147:46	0:0	4	qpVShift
water	147:54	0:0	4	)
call	147:55	147:70	5	*FFABS
arg	147:62	147:70	6	QPStride
water	147:62	0:0	7	QPStride
op	147:71	0:0	4	]
decl	148:8	148:26	4	int	QP
op	148:14	0:0	4	=
water	148:15	0:0	4	0
water	148:16	0:0	4	,
decl	148:8	148:26	4	int	nonBQP
op	148:24	0:0	4	=
water	148:25	0:0	4	0
if	151:8	167:8	4	(y + 15 >= height)
cond	151:11	151:19	5	y + 15 >= height
water	151:11	0:0	6	y
op	151:12	0:0	6	+
water	151:13	0:0	6	15
op	151:16	0:0	6	>=
water	151:19	0:0	6	height
stmts	151:26	167:8	5	
water	151:26	0:0	6	{
decl	152:12	152:17	6	int	i
call	155:12	156:59	6	linecpy
arg	155:20	155:49	7	tempSrc+srcStride*copyAhead
water	155:20	0:0	8	tempSrc
op	155:28	0:0	8	+
water	155:30	0:0	8	srcStride
op	155:39	0:0	8	*
water	155:40	0:0	8	copyAhead
arg	155:51	155:81	7	srcBlock+srcStride*copyAhead
water	155:51	0:0	8	srcBlock
op	155:60	0:0	8	+
water	155:62	0:0	8	srcStride
op	155:71	0:0	8	*
water	155:72	0:0	8	copyAhead
arg	156:20	156:48	7	FFMAX(height-y-copyAhead,0)
call	156:20	156:47	8	FFMAX
arg	156:26	156:44	9	height-y-copyAhead
water	156:26	0:0	10	height
op	156:32	0:0	10	-
water	156:33	0:0	10	y
op	156:34	0:0	10	-
water	156:35	0:0	10	copyAhead
arg	156:46	156:47	9	0
water	156:46	0:0	10	0
arg	156:50	156:59	7	srcStride
water	156:50	0:0	8	srcStride
water	156:60	0:0	6	;
for	158:12	159:95	6	(i =FFMAX (height - y ,8 ) ;i < copyAhead + 8;i ++)
forinit	158:16	158:36	7	i =FFMAX (height - y ,8 ) ;
water	158:16	0:0	8	i
op	158:17	0:0	8	=
call	158:18	158:35	8	FFMAX
arg	158:24	158:32	9	height-y
water	158:24	0:0	10	height
op	158:30	0:0	10	-
water	158:31	0:0	10	y
arg	158:34	158:35	9	8
water	158:34	0:0	10	8
water	158:36	0:0	8	;
cond	158:38	158:50	7	i < copyAhead + 8
water	158:38	0:0	8	i
op	158:39	0:0	8	<
water	158:40	0:0	8	copyAhead
op	158:49	0:0	8	+
water	158:50	0:0	8	8
forexpr	158:53	158:54	7	i ++
water	158:53	0:0	8	i
op	158:54	0:0	8	++
stmts	159:20	159:95	7	
call	159:20	159:94	8	memcpy
arg	159:27	159:48	9	tempSrc+srcStride*i
water	159:27	0:0	10	tempSrc
op	159:35	0:0	10	+
water	159:37	0:0	10	srcStride
op	159:46	0:0	10	*
water	159:47	0:0	10	i
arg	159:50	159:76	9	src+srcStride*(height-1)
water	159:50	0:0	10	src
op	159:54	0:0	10	+
water	159:56	0:0	10	srcStride
op	159:65	0:0	10	*
water	159:66	0:0	10	(
water	159:67	0:0	10	height
op	159:73	0:0	10	-
water	159:74	0:0	10	1
water	159:75	0:0	10	)
arg	159:78	159:94	9	FFABS(srcStride)
call	159:78	159:93	10	FFABS
arg	159:84	159:93	11	srcStride
water	159:84	0:0	12	srcStride
water	159:95	0:0	8	;
call	161:12	161:92	6	linecpy
arg	161:20	161:27	7	tempDst
water	161:20	0:0	8	tempDst
arg	161:29	161:49	7	dstBlock-dstStride
water	161:29	0:0	8	dstBlock
op	161:38	0:0	8	-
water	161:40	0:0	8	dstStride
arg	161:51	161:81	7	FFMIN(height-y+1,copyAhead+1)
call	161:51	161:80	8	FFMIN
arg	161:57	161:67	9	height-y+1
water	161:57	0:0	10	height
op	161:63	0:0	10	-
water	161:64	0:0	10	y
op	161:65	0:0	10	+
water	161:66	0:0	10	1
arg	161:69	161:80	9	copyAhead+1
water	161:69	0:0	10	copyAhead
op	161:78	0:0	10	+
water	161:79	0:0	10	1
arg	161:83	161:92	7	dstStride
water	161:83	0:0	8	dstStride
water	161:93	0:0	6	;
for	163:12	164:95	6	(i = height - y + 1 ;i <= copyAhead;i ++)
forinit	163:16	163:28	7	i = height - y + 1 ;
water	163:16	0:0	8	i
op	163:17	0:0	8	=
water	163:18	0:0	8	height
op	163:24	0:0	8	-
water	163:25	0:0	8	y
op	163:26	0:0	8	+
water	163:27	0:0	8	1
water	163:28	0:0	8	;
cond	163:30	163:33	7	i <= copyAhead
water	163:30	0:0	8	i
op	163:31	0:0	8	<=
water	163:33	0:0	8	copyAhead
forexpr	163:44	163:45	7	i ++
water	163:44	0:0	8	i
op	163:45	0:0	8	++
stmts	164:20	164:95	7	
call	164:20	164:94	8	memcpy
arg	164:27	164:48	9	tempDst+dstStride*i
water	164:27	0:0	10	tempDst
op	164:35	0:0	10	+
water	164:37	0:0	10	dstStride
op	164:46	0:0	10	*
water	164:47	0:0	10	i
arg	164:50	164:76	9	dst+dstStride*(height-1)
water	164:50	0:0	10	dst
op	164:54	0:0	10	+
water	164:56	0:0	10	dstStride
op	164:65	0:0	10	*
water	164:66	0:0	10	(
water	164:67	0:0	10	height
op	164:73	0:0	10	-
water	164:74	0:0	10	1
water	164:75	0:0	10	)
arg	164:78	164:94	9	FFABS(dstStride)
call	164:78	164:93	10	FFABS
arg	164:84	164:93	11	dstStride
water	164:84	0:0	12	dstStride
water	164:95	0:0	8	;
water	165:12	0:0	6	dstBlock
op	165:20	0:0	6	=
water	165:22	0:0	6	tempDst
op	165:30	0:0	6	+
water	165:32	0:0	6	dstStride
water	165:41	0:0	6	;
water	166:12	0:0	6	srcBlock
op	166:20	0:0	6	=
water	166:22	0:0	6	tempSrc
water	166:29	0:0	6	;
water	167:8	0:0	6	}
for	171:8	326:8	4	(x = 0 ;x < width;)
forinit	171:12	171:15	5	x = 0 ;
water	171:12	0:0	6	x
op	171:13	0:0	6	=
water	171:14	0:0	6	0
water	171:15	0:0	6	;
cond	171:17	171:19	5	x < width
water	171:17	0:0	6	x
op	171:18	0:0	6	<
water	171:19	0:0	6	width
forexpr	0:0	0:0	5	
stmts	171:27	326:8	5	
water	171:27	0:0	6	{
decl	172:12	172:26	6	int	startx
op	172:23	0:0	6	=
water	172:25	0:0	6	x
decl	173:12	173:41	6	int	endx
op	173:21	0:0	6	=
call	173:23	173:40	7	FFMIN
arg	173:29	173:34	8	width
water	173:29	0:0	9	width
arg	173:36	173:40	8	x+32
water	173:36	0:0	9	x
op	173:37	0:0	9	+
water	173:38	0:0	9	32
decl	174:12	174:45	6	uint8_t	*dstBlockStart
op	174:35	0:0	6	=
water	174:37	0:0	6	dstBlock
decl	175:12	175:51	6	const uint8_t	*srcBlockStart
op	175:41	0:0	6	=
water	175:43	0:0	6	srcBlock
decl	176:12	176:28	6	int	qp_index
op	176:25	0:0	6	=
water	176:27	0:0	6	0
for	177:12	198:12	6	(qp_index = 0 ;qp_index < ( endx - startx ) / BLOCK_SIZE;qp_index ++)
forinit	177:16	177:26	7	qp_index = 0 ;
water	177:16	0:0	8	qp_index
op	177:24	0:0	8	=
water	177:25	0:0	8	0
water	177:26	0:0	8	;
cond	177:28	177:53	7	qp_index < ( endx - startx ) / BLOCK_SIZE
water	177:28	0:0	8	qp_index
op	177:37	0:0	8	<
water	177:39	0:0	8	(
water	177:40	0:0	8	endx
op	177:44	0:0	8	-
water	177:45	0:0	8	startx
water	177:51	0:0	8	)
op	177:52	0:0	8	/
water	177:53	0:0	8	BLOCK_SIZE
forexpr	177:65	177:73	7	qp_index ++
water	177:65	0:0	8	qp_index
op	177:73	0:0	8	++
stmts	177:76	198:12	7	
water	177:76	0:0	8	{
water	178:16	0:0	8	QP
op	178:19	0:0	8	=
water	178:21	0:0	8	QPptr
op	178:26	0:0	8	[
water	178:27	0:0	8	(
water	178:28	0:0	8	x
op	178:29	0:0	8	+
water	178:30	0:0	8	qp_index
op	178:38	0:0	8	*
water	178:39	0:0	8	BLOCK_SIZE
water	178:49	0:0	8	)
op	178:50	0:0	8	>>
water	178:52	0:0	8	qpHShift
op	178:60	0:0	8	]
water	178:61	0:0	8	;
water	179:16	0:0	8	nonBQP
op	179:23	0:0	8	=
water	179:25	0:0	8	nonBQPptr
op	179:34	0:0	8	[
water	179:35	0:0	8	(
water	179:36	0:0	8	x
op	179:37	0:0	8	+
water	179:38	0:0	8	qp_index
op	179:46	0:0	8	*
water	179:47	0:0	8	BLOCK_SIZE
water	179:57	0:0	8	)
op	179:58	0:0	8	>>
water	179:60	0:0	8	qpHShift
op	179:68	0:0	8	]
water	179:69	0:0	8	;
if	180:12	184:12	8	(! isColor)
cond	180:15	180:16	9	! isColor
op	180:15	0:0	10	!
water	180:16	0:0	10	isColor
stmts	180:24	184:12	9	
water	180:24	0:0	10	{
water	181:16	0:0	10	QP
op	181:18	0:0	10	=
water	181:20	0:0	10	(
water	181:21	0:0	10	QP
op	181:23	0:0	10	*
water	181:25	0:0	10	QPCorrecture
op	181:38	0:0	10	+
water	181:40	0:0	10	256
op	181:43	0:0	10	*
water	181:44	0:0	10	128
water	181:47	0:0	10	)
op	181:48	0:0	10	>>
water	181:50	0:0	10	16
water	181:52	0:0	10	;
water	182:16	0:0	10	nonBQP
op	182:22	0:0	10	=
water	182:24	0:0	10	(
water	182:25	0:0	10	nonBQP
op	182:31	0:0	10	*
water	182:33	0:0	10	QPCorrecture
op	182:46	0:0	10	+
water	182:48	0:0	10	256
op	182:51	0:0	10	*
water	182:52	0:0	10	128
water	182:55	0:0	10	)
op	182:56	0:0	10	>>
water	182:58	0:0	10	16
water	182:60	0:0	10	;
water	183:16	0:0	10	yHistogram
op	183:26	0:0	10	[
water	183:27	0:0	10	(
water	183:28	0:0	10	srcBlock
op	183:36	0:0	10	+
water	183:37	0:0	10	qp_index
op	183:45	0:0	10	*
water	183:46	0:0	10	8
water	183:47	0:0	10	)
op	183:48	0:0	10	[
water	183:49	0:0	10	srcStride
op	183:58	0:0	10	*
water	183:59	0:0	10	12
op	183:62	0:0	10	+
water	183:64	0:0	10	4
op	183:65	0:0	10	]
op	183:66	0:0	10	]
op	183:67	0:0	10	++
water	183:69	0:0	10	;
water	184:12	0:0	10	}
water	185:12	0:0	8	c
op	185:13	0:0	8	.
water	185:14	0:0	8	QP_block
op	185:22	0:0	8	[
water	185:23	0:0	8	qp_index
op	185:31	0:0	8	]
op	185:33	0:0	8	=
water	185:35	0:0	8	QP
water	185:37	0:0	8	;
water	186:12	0:0	8	c
op	186:13	0:0	8	.
water	186:14	0:0	8	nonBQP_block
op	186:26	0:0	8	[
water	186:27	0:0	8	qp_index
op	186:35	0:0	8	]
op	186:37	0:0	8	=
water	186:39	0:0	8	nonBQP
water	186:45	0:0	8	;
water	188:12	0:0	8	__asm__
water	188:20	0:0	8	volatile
water	188:28	0:0	8	(
water	189:16	0:0	8	"movd %1, %%mm7         \n\t"
water	190:16	0:0	8	"packuswb %%mm7, %%mm7  \n\t"
water	191:16	0:0	8	"packuswb %%mm7, %%mm7  \n\t"
water	192:16	0:0	8	"packuswb %%mm7, %%mm7  \n\t"
water	193:16	0:0	8	"movq %%mm7, %0         \n\t"
water	194:16	0:0	8	:
water	194:18	0:0	8	"=m"
water	194:23	0:0	8	(
water	194:24	0:0	8	c
op	194:25	0:0	8	.
water	194:26	0:0	8	pQPb_block
op	194:36	0:0	8	[
water	194:37	0:0	8	qp_index
op	194:45	0:0	8	]
water	194:46	0:0	8	)
water	195:16	0:0	8	:
water	195:18	0:0	8	"r"
water	195:22	0:0	8	(
water	195:23	0:0	8	QP
water	195:25	0:0	8	)
water	196:12	0:0	8	)
water	196:13	0:0	8	;
water	198:12	0:0	8	}
for	199:10	223:10	6	(;x < endx;x += BLOCK_SIZE)
forinit	199:14	199:14	7	;
water	199:14	0:0	8	;
cond	199:16	199:20	7	x < endx
water	199:16	0:0	8	x
op	199:18	0:0	8	<
water	199:20	0:0	8	endx
forexpr	199:26	199:29	7	x += BLOCK_SIZE
water	199:26	0:0	8	x
op	199:27	0:0	8	+=
water	199:29	0:0	8	BLOCK_SIZE
stmts	199:40	223:10	7	
water	199:40	0:0	8	{
call	200:12	200:30	8	RENAME
arg	200:19	200:30	9	prefetchnta
water	200:19	0:0	10	prefetchnta
water	200:31	0:0	8	(
water	200:32	0:0	8	srcBlock
op	200:41	0:0	8	+
water	200:43	0:0	8	(
water	200:44	0:0	8	(
water	200:45	0:0	8	(
water	200:46	0:0	8	x
op	200:47	0:0	8	>>
water	200:49	0:0	8	2
water	200:50	0:0	8	)
op	200:51	0:0	8	&
water	200:52	0:0	8	6
water	200:53	0:0	8	)
op	200:55	0:0	8	+
water	200:57	0:0	8	copyAhead
water	200:66	0:0	8	)
op	200:67	0:0	8	*
water	200:68	0:0	8	srcStride
op	200:78	0:0	8	+
water	200:80	0:0	8	32
water	200:82	0:0	8	)
water	200:83	0:0	8	;
call	201:12	201:30	8	RENAME
arg	201:19	201:30	9	prefetchnta
water	201:19	0:0	10	prefetchnta
water	201:31	0:0	8	(
water	201:32	0:0	8	srcBlock
op	201:41	0:0	8	+
water	201:43	0:0	8	(
water	201:44	0:0	8	(
water	201:45	0:0	8	(
water	201:46	0:0	8	x
op	201:47	0:0	8	>>
water	201:49	0:0	8	2
water	201:50	0:0	8	)
op	201:51	0:0	8	&
water	201:52	0:0	8	6
water	201:53	0:0	8	)
op	201:55	0:0	8	+
water	201:57	0:0	8	copyAhead
op	201:66	0:0	8	+
water	201:67	0:0	8	1
water	201:68	0:0	8	)
op	201:69	0:0	8	*
water	201:70	0:0	8	srcStride
op	201:80	0:0	8	+
water	201:82	0:0	8	32
water	201:84	0:0	8	)
water	201:85	0:0	8	;
call	202:12	202:29	8	RENAME
arg	202:19	202:29	9	prefetcht0
water	202:19	0:0	10	prefetcht0
water	202:30	0:0	8	(
water	202:31	0:0	8	dstBlock
op	202:40	0:0	8	+
water	202:42	0:0	8	(
water	202:43	0:0	8	(
water	202:44	0:0	8	(
water	202:45	0:0	8	x
op	202:46	0:0	8	>>
water	202:48	0:0	8	2
water	202:49	0:0	8	)
op	202:50	0:0	8	&
water	202:51	0:0	8	6
water	202:52	0:0	8	)
op	202:54	0:0	8	+
water	202:56	0:0	8	copyAhead
water	202:65	0:0	8	)
op	202:66	0:0	8	*
water	202:67	0:0	8	dstStride
op	202:77	0:0	8	+
water	202:79	0:0	8	32
water	202:81	0:0	8	)
water	202:82	0:0	8	;
call	203:12	203:29	8	RENAME
arg	203:19	203:29	9	prefetcht0
water	203:19	0:0	10	prefetcht0
water	203:30	0:0	8	(
water	203:31	0:0	8	dstBlock
op	203:40	0:0	8	+
water	203:42	0:0	8	(
water	203:43	0:0	8	(
water	203:44	0:0	8	(
water	203:45	0:0	8	x
op	203:46	0:0	8	>>
water	203:48	0:0	8	2
water	203:49	0:0	8	)
op	203:50	0:0	8	&
water	203:51	0:0	8	6
water	203:52	0:0	8	)
op	203:54	0:0	8	+
water	203:56	0:0	8	copyAhead
op	203:65	0:0	8	+
water	203:66	0:0	8	1
water	203:67	0:0	8	)
op	203:68	0:0	8	*
water	203:69	0:0	8	dstStride
op	203:79	0:0	8	+
water	203:81	0:0	8	32
water	203:83	0:0	8	)
water	203:84	0:0	8	;
call	204:12	204:28	8	RENAME
arg	204:19	204:28	9	blockCopy
water	204:19	0:0	10	blockCopy
water	204:29	0:0	8	(
water	204:30	0:0	8	dstBlock
op	204:39	0:0	8	+
water	204:41	0:0	8	dstStride
op	204:50	0:0	8	*
water	204:51	0:0	8	copyAhead
water	204:60	0:0	8	,
water	204:62	0:0	8	dstStride
water	204:71	0:0	8	,
water	205:30	0:0	8	srcBlock
op	205:39	0:0	8	+
water	205:41	0:0	8	srcStride
op	205:50	0:0	8	*
water	205:51	0:0	8	copyAhead
water	205:60	0:0	8	,
water	205:62	0:0	8	srcStride
water	205:71	0:0	8	,
water	205:73	0:0	8	mode
op	205:78	0:0	8	&
water	205:80	0:0	8	LEVEL_FIX
water	205:89	0:0	8	,
op	205:91	0:0	8	&
water	205:92	0:0	8	c
op	205:93	0:0	8	.
water	205:94	0:0	8	packedYOffset
water	205:107	0:0	8	)
water	205:108	0:0	8	;
if	206:12	207:73	8	(mode & LINEAR_IPOL_DEINT_FILTER)
cond	206:15	206:22	9	mode & LINEAR_IPOL_DEINT_FILTER
water	206:15	0:0	10	mode
op	206:20	0:0	10	&
water	206:22	0:0	10	LINEAR_IPOL_DEINT_FILTER
stmts	207:16	207:73	9	
call	207:16	207:51	10	RENAME
arg	207:23	207:51	11	deInterlaceInterpolateLinear
water	207:23	0:0	12	deInterlaceInterpolateLinear
water	207:52	0:0	10	(
water	207:53	0:0	10	dstBlock
water	207:61	0:0	10	,
water	207:63	0:0	10	dstStride
water	207:72	0:0	10	)
water	207:73	0:0	10	;
else	208:12	209:84	8
stmts	208:17	209:84	9	
if	208:17	209:84	10	(mode & LINEAR_BLEND_DEINT_FILTER)
cond	208:20	208:27	11	mode & LINEAR_BLEND_DEINT_FILTER
water	208:20	0:0	12	mode
op	208:25	0:0	12	&
water	208:27	0:0	12	LINEAR_BLEND_DEINT_FILTER
stmts	209:16	209:84	11	
call	209:16	209:45	12	RENAME
arg	209:23	209:45	13	deInterlaceBlendLinear
water	209:23	0:0	14	deInterlaceBlendLinear
water	209:46	0:0	12	(
water	209:47	0:0	12	dstBlock
water	209:55	0:0	12	,
water	209:57	0:0	12	dstStride
water	209:66	0:0	12	,
water	209:68	0:0	12	c
op	209:69	0:0	12	.
water	209:70	0:0	12	deintTemp
op	209:80	0:0	12	+
water	209:82	0:0	12	x
water	209:83	0:0	12	)
water	209:84	0:0	12	;
else	210:12	211:62	8
stmts	210:17	211:62	9	
if	210:17	211:62	10	(mode & MEDIAN_DEINT_FILTER)
cond	210:20	210:27	11	mode & MEDIAN_DEINT_FILTER
water	210:20	0:0	12	mode
op	210:25	0:0	12	&
water	210:27	0:0	12	MEDIAN_DEINT_FILTER
stmts	211:16	211:62	11	
call	211:16	211:40	12	RENAME
arg	211:23	211:40	13	deInterlaceMedian
water	211:23	0:0	14	deInterlaceMedian
water	211:41	0:0	12	(
water	211:42	0:0	12	dstBlock
water	211:50	0:0	12	,
water	211:52	0:0	12	dstStride
water	211:61	0:0	12	)
water	211:62	0:0	12	;
else	212:12	213:72	8
stmts	212:17	213:72	9	
if	212:17	213:72	10	(mode & CUBIC_IPOL_DEINT_FILTER)
cond	212:20	212:27	11	mode & CUBIC_IPOL_DEINT_FILTER
water	212:20	0:0	12	mode
op	212:25	0:0	12	&
water	212:27	0:0	12	CUBIC_IPOL_DEINT_FILTER
stmts	213:16	213:72	11	
call	213:16	213:50	12	RENAME
arg	213:23	213:50	13	deInterlaceInterpolateCubic
water	213:23	0:0	14	deInterlaceInterpolateCubic
water	213:51	0:0	12	(
water	213:52	0:0	12	dstBlock
water	213:60	0:0	12	,
water	213:62	0:0	12	dstStride
water	213:71	0:0	12	)
water	213:72	0:0	12	;
else	214:12	215:75	8
stmts	214:17	215:75	9	
if	214:17	215:75	10	(mode & FFMPEG_DEINT_FILTER)
cond	214:20	214:27	11	mode & FFMPEG_DEINT_FILTER
water	214:20	0:0	12	mode
op	214:25	0:0	12	&
water	214:27	0:0	12	FFMPEG_DEINT_FILTER
stmts	215:16	215:75	11	
call	215:16	215:36	12	RENAME
arg	215:23	215:36	13	deInterlaceFF
water	215:23	0:0	14	deInterlaceFF
water	215:37	0:0	12	(
water	215:38	0:0	12	dstBlock
water	215:46	0:0	12	,
water	215:48	0:0	12	dstStride
water	215:57	0:0	12	,
water	215:59	0:0	12	c
op	215:60	0:0	12	.
water	215:61	0:0	12	deintTemp
op	215:71	0:0	12	+
water	215:73	0:0	12	x
water	215:74	0:0	12	)
water	215:75	0:0	12	;
else	216:12	217:100	8
stmts	216:17	217:100	9	
if	216:17	217:100	10	(mode & LOWPASS5_DEINT_FILTER)
cond	216:20	216:27	11	mode & LOWPASS5_DEINT_FILTER
water	216:20	0:0	12	mode
op	216:25	0:0	12	&
water	216:27	0:0	12	LOWPASS5_DEINT_FILTER
stmts	217:16	217:100	11	
call	217:16	217:36	12	RENAME
arg	217:23	217:36	13	deInterlaceL5
water	217:23	0:0	14	deInterlaceL5
water	217:37	0:0	12	(
water	217:38	0:0	12	dstBlock
water	217:46	0:0	12	,
water	217:48	0:0	12	dstStride
water	217:57	0:0	12	,
water	217:59	0:0	12	c
op	217:60	0:0	12	.
water	217:61	0:0	12	deintTemp
op	217:71	0:0	12	+
water	217:73	0:0	12	x
water	217:74	0:0	12	,
water	217:76	0:0	12	c
op	217:77	0:0	12	.
water	217:78	0:0	12	deintTemp
op	217:88	0:0	12	+
water	217:90	0:0	12	width
op	217:96	0:0	12	+
water	217:98	0:0	12	x
water	217:99	0:0	12	)
water	217:100	0:0	12	;
water	221:12	0:0	8	dstBlock
op	221:20	0:0	8	+=
water	221:22	0:0	8	8
water	221:23	0:0	8	;
water	222:12	0:0	8	srcBlock
op	222:20	0:0	8	+=
water	222:22	0:0	8	8
water	222:23	0:0	8	;
water	223:10	0:0	8	}
water	224:10	0:0	6	dstBlock
op	224:19	0:0	6	=
water	224:21	0:0	6	dstBlockStart
water	224:34	0:0	6	;
water	225:10	0:0	6	srcBlock
op	225:19	0:0	6	=
water	225:21	0:0	6	srcBlockStart
water	225:34	0:0	6	;
for	226:10	250:10	6	(x = startx , qp_index = 0 ;x < endx;x += BLOCK_SIZE , qp_index ++)
forinit	226:14	226:38	7	x = startx , qp_index = 0 ;
water	226:14	0:0	8	x
op	226:16	0:0	8	=
water	226:18	0:0	8	startx
water	226:24	0:0	8	,
water	226:26	0:0	8	qp_index
op	226:35	0:0	8	=
water	226:37	0:0	8	0
water	226:38	0:0	8	;
cond	226:40	226:44	7	x < endx
water	226:40	0:0	8	x
op	226:42	0:0	8	<
water	226:44	0:0	8	endx
forexpr	226:50	226:73	7	x += BLOCK_SIZE , qp_index ++
water	226:50	0:0	8	x
op	226:51	0:0	8	+=
water	226:53	0:0	8	BLOCK_SIZE
water	226:63	0:0	8	,
water	226:65	0:0	8	qp_index
op	226:73	0:0	8	++
stmts	226:76	250:10	7	
water	226:76	0:0	8	{
decl	227:12	227:39	8	const int	stride
op	227:28	0:0	8	=
water	227:30	0:0	8	dstStride
water	230:12	0:0	8	c
op	230:13	0:0	8	.
water	230:14	0:0	8	QP
op	230:17	0:0	8	=
water	230:19	0:0	8	c
op	230:20	0:0	8	.
water	230:21	0:0	8	QP_block
op	230:29	0:0	8	[
water	230:30	0:0	8	qp_index
op	230:38	0:0	8	]
water	230:39	0:0	8	;
water	231:12	0:0	8	c
op	231:13	0:0	8	.
water	231:14	0:0	8	nonBQP
op	231:21	0:0	8	=
water	231:23	0:0	8	c
op	231:24	0:0	8	.
water	231:25	0:0	8	nonBQP_block
op	231:37	0:0	8	[
water	231:38	0:0	8	qp_index
op	231:46	0:0	8	]
water	231:47	0:0	8	;
water	232:12	0:0	8	c
op	232:13	0:0	8	.
water	232:14	0:0	8	pQPb
op	232:19	0:0	8	=
water	232:21	0:0	8	c
op	232:22	0:0	8	.
water	232:23	0:0	8	pQPb_block
op	232:33	0:0	8	[
water	232:34	0:0	8	qp_index
op	232:42	0:0	8	]
water	232:43	0:0	8	;
water	233:12	0:0	8	c
op	233:13	0:0	8	.
water	233:14	0:0	8	pQPb2
op	233:20	0:0	8	=
water	233:22	0:0	8	c
op	233:23	0:0	8	.
water	233:24	0:0	8	pQPb2_block
op	233:35	0:0	8	[
water	233:36	0:0	8	qp_index
op	233:44	0:0	8	]
water	233:45	0:0	8	;
if	235:12	247:12	8	(y + 8 < height)
cond	235:15	235:23	9	y + 8 < height
water	235:15	0:0	10	y
op	235:17	0:0	10	+
water	235:19	0:0	10	8
op	235:21	0:0	10	<
water	235:23	0:0	10	height
stmts	235:30	247:12	9	
water	235:30	0:0	10	{
if	236:16	237:62	10	(mode & V_X1_FILTER)
cond	236:19	236:26	11	mode & V_X1_FILTER
water	236:19	0:0	12	mode
op	236:24	0:0	12	&
water	236:26	0:0	12	V_X1_FILTER
stmts	237:20	237:62	11	
call	237:20	237:39	12	RENAME
arg	237:27	237:39	13	vertX1Filter
water	237:27	0:0	14	vertX1Filter
water	237:40	0:0	12	(
water	237:41	0:0	12	dstBlock
water	237:49	0:0	12	,
water	237:51	0:0	12	stride
water	237:57	0:0	12	,
op	237:59	0:0	12	&
water	237:60	0:0	12	c
water	237:61	0:0	12	)
water	237:62	0:0	12	;
else	238:16	244:16	10
stmts	238:21	244:16	11	
if	238:21	244:16	12	(mode & V_DEBLOCK)
cond	238:24	238:31	13	mode & V_DEBLOCK
water	238:24	0:0	14	mode
op	238:29	0:0	14	&
water	238:31	0:0	14	V_DEBLOCK
stmts	238:41	244:16	13	
water	238:41	0:0	14	{
decl	239:20	239:75	14	const int	t
op	239:31	0:0	14	=
call	239:33	239:52	15	RENAME
arg	239:40	239:52	16	vertClassify
water	239:40	0:0	17	vertClassify
water	239:53	0:0	14	(
water	239:54	0:0	14	dstBlock
water	239:62	0:0	14	,
water	239:64	0:0	14	stride
water	239:70	0:0	14	,
op	239:72	0:0	14	&
water	239:73	0:0	14	c
water	239:74	0:0	14	)
if	240:20	241:67	14	(t == 1)
cond	240:23	240:26	15	t == 1
water	240:23	0:0	16	t
op	240:24	0:0	16	==
water	240:26	0:0	16	1
stmts	241:24	241:67	15	
call	241:24	241:44	16	RENAME
arg	241:31	241:44	17	doVertLowPass
water	241:31	0:0	18	doVertLowPass
water	241:45	0:0	16	(
water	241:46	0:0	16	dstBlock
water	241:54	0:0	16	,
water	241:56	0:0	16	stride
water	241:62	0:0	16	,
op	241:64	0:0	16	&
water	241:65	0:0	16	c
water	241:66	0:0	16	)
water	241:67	0:0	16	;
else	242:20	243:69	14
stmts	242:25	243:69	15	
if	242:25	243:69	16	(t == 2)
cond	242:28	242:31	17	t == 2
water	242:28	0:0	18	t
op	242:29	0:0	18	==
water	242:31	0:0	18	2
stmts	243:24	243:69	17	
call	243:24	243:46	18	RENAME
arg	243:31	243:46	19	doVertDefFilter
water	243:31	0:0	20	doVertDefFilter
water	243:47	0:0	18	(
water	243:48	0:0	18	dstBlock
water	243:56	0:0	18	,
water	243:58	0:0	18	stride
water	243:64	0:0	18	,
op	243:66	0:0	18	&
water	243:67	0:0	18	c
water	243:68	0:0	18	)
water	243:69	0:0	18	;
water	244:16	0:0	14	}
else	244:17	246:16	10
stmts	244:22	246:16	11	
if	244:22	246:16	12	(mode & V_A_DEBLOCK)
cond	244:25	244:32	13	mode & V_A_DEBLOCK
water	244:25	0:0	14	mode
op	244:30	0:0	14	&
water	244:32	0:0	14	V_A_DEBLOCK
stmts	244:44	246:16	13	
water	244:44	0:0	14	{
call	245:20	245:39	14	RENAME
arg	245:27	245:39	15	do_a_deblock
water	245:27	0:0	16	do_a_deblock
water	245:40	0:0	14	(
water	245:41	0:0	14	dstBlock
water	245:49	0:0	14	,
water	245:51	0:0	14	stride
water	245:57	0:0	14	,
water	245:59	0:0	14	1
water	245:60	0:0	14	,
op	245:62	0:0	14	&
water	245:63	0:0	14	c
water	245:64	0:0	14	,
water	245:66	0:0	14	mode
water	245:70	0:0	14	)
water	245:71	0:0	14	;
water	246:16	0:0	14	}
water	247:12	0:0	10	}
water	248:12	0:0	8	dstBlock
op	248:20	0:0	8	+=
water	248:22	0:0	8	8
water	248:23	0:0	8	;
water	249:12	0:0	8	srcBlock
op	249:20	0:0	8	+=
water	249:22	0:0	8	8
water	249:23	0:0	8	;
water	250:10	0:0	8	}
water	251:10	0:0	6	dstBlock
op	251:19	0:0	6	=
water	251:21	0:0	6	dstBlockStart
water	251:34	0:0	6	;
water	252:10	0:0	6	srcBlock
op	252:19	0:0	6	=
water	252:21	0:0	6	srcBlockStart
water	252:34	0:0	6	;
for	253:10	325:10	6	(x = startx , qp_index = 0 ;x < endx;x += BLOCK_SIZE , qp_index ++)
forinit	253:14	253:36	7	x = startx , qp_index = 0 ;
water	253:14	0:0	8	x
op	253:16	0:0	8	=
water	253:18	0:0	8	startx
water	253:24	0:0	8	,
water	253:26	0:0	8	qp_index
op	253:34	0:0	8	=
water	253:35	0:0	8	0
water	253:36	0:0	8	;
cond	253:38	253:42	7	x < endx
water	253:38	0:0	8	x
op	253:40	0:0	8	<
water	253:42	0:0	8	endx
forexpr	253:48	253:71	7	x += BLOCK_SIZE , qp_index ++
water	253:48	0:0	8	x
op	253:49	0:0	8	+=
water	253:51	0:0	8	BLOCK_SIZE
water	253:61	0:0	8	,
water	253:63	0:0	8	qp_index
op	253:71	0:0	8	++
stmts	253:74	325:10	7	
water	253:74	0:0	8	{
decl	254:12	254:39	8	const int	stride
op	254:28	0:0	8	=
water	254:30	0:0	8	dstStride
water	255:12	0:0	8	av_unused
water	255:22	0:0	8	uint8_t
op	255:30	0:0	8	*
water	255:31	0:0	8	tmpXchg
water	255:38	0:0	8	;
water	256:12	0:0	8	c
op	256:13	0:0	8	.
water	256:14	0:0	8	QP
op	256:17	0:0	8	=
water	256:19	0:0	8	c
op	256:20	0:0	8	.
water	256:21	0:0	8	QP_block
op	256:29	0:0	8	[
water	256:30	0:0	8	qp_index
op	256:38	0:0	8	]
water	256:39	0:0	8	;
water	257:12	0:0	8	c
op	257:13	0:0	8	.
water	257:14	0:0	8	nonBQP
op	257:21	0:0	8	=
water	257:23	0:0	8	c
op	257:24	0:0	8	.
water	257:25	0:0	8	nonBQP_block
op	257:37	0:0	8	[
water	257:38	0:0	8	qp_index
op	257:46	0:0	8	]
water	257:47	0:0	8	;
water	258:12	0:0	8	c
op	258:13	0:0	8	.
water	258:14	0:0	8	pQPb
op	258:19	0:0	8	=
water	258:21	0:0	8	c
op	258:22	0:0	8	.
water	258:23	0:0	8	pQPb_block
op	258:33	0:0	8	[
water	258:34	0:0	8	qp_index
op	258:42	0:0	8	]
water	258:43	0:0	8	;
water	259:12	0:0	8	c
op	259:13	0:0	8	.
water	259:14	0:0	8	pQPb2
op	259:20	0:0	8	=
water	259:22	0:0	8	c
op	259:23	0:0	8	.
water	259:24	0:0	8	pQPb2_block
op	259:35	0:0	8	[
water	259:36	0:0	8	qp_index
op	259:44	0:0	8	]
water	259:45	0:0	8	;
call	261:12	261:29	8	RENAME
arg	261:19	261:29	9	transpose1
water	261:19	0:0	10	transpose1
water	261:30	0:0	8	(
water	261:31	0:0	8	tempBlock1
water	261:41	0:0	8	,
water	261:43	0:0	8	tempBlock2
water	261:53	0:0	8	,
water	261:55	0:0	8	dstBlock
water	261:63	0:0	8	,
water	261:65	0:0	8	dstStride
water	261:74	0:0	8	)
water	261:75	0:0	8	;
if	264:12	317:12	8	(x - 8 >= 0)
cond	264:15	264:24	9	x - 8 >= 0
water	264:15	0:0	10	x
op	264:17	0:0	10	-
water	264:19	0:0	10	8
op	264:21	0:0	10	>=
water	264:24	0:0	10	0
stmts	264:26	317:12	9	
water	264:26	0:0	10	{
if	266:16	267:64	10	(mode & H_X1_FILTER)
cond	266:19	266:26	11	mode & H_X1_FILTER
water	266:19	0:0	12	mode
op	266:24	0:0	12	&
water	266:26	0:0	12	H_X1_FILTER
stmts	267:24	267:64	11	
call	267:24	267:43	12	RENAME
arg	267:31	267:43	13	vertX1Filter
water	267:31	0:0	14	vertX1Filter
water	267:44	0:0	12	(
water	267:45	0:0	12	tempBlock1
water	267:55	0:0	12	,
water	267:57	0:0	12	16
water	267:59	0:0	12	,
op	267:61	0:0	12	&
water	267:62	0:0	12	c
water	267:63	0:0	12	)
water	267:64	0:0	12	;
else	268:16	274:16	10
stmts	268:21	274:16	11	
if	268:21	274:16	12	(mode & H_DEBLOCK)
cond	268:24	268:31	13	mode & H_DEBLOCK
water	268:24	0:0	14	mode
op	268:29	0:0	14	&
water	268:31	0:0	14	H_DEBLOCK
stmts	268:41	274:16	13	
water	268:41	0:0	14	{
decl	269:20	269:73	14	const int	t
op	269:31	0:0	14	=
call	269:33	269:52	15	RENAME
arg	269:40	269:52	16	vertClassify
water	269:40	0:0	17	vertClassify
water	269:53	0:0	14	(
water	269:54	0:0	14	tempBlock1
water	269:64	0:0	14	,
water	269:66	0:0	14	16
water	269:68	0:0	14	,
op	269:70	0:0	14	&
water	269:71	0:0	14	c
water	269:72	0:0	14	)
if	270:20	271:65	14	(t == 1)
cond	270:23	270:26	15	t == 1
water	270:23	0:0	16	t
op	270:24	0:0	16	==
water	270:26	0:0	16	1
stmts	271:24	271:65	15	
call	271:24	271:44	16	RENAME
arg	271:31	271:44	17	doVertLowPass
water	271:31	0:0	18	doVertLowPass
water	271:45	0:0	16	(
water	271:46	0:0	16	tempBlock1
water	271:56	0:0	16	,
water	271:58	0:0	16	16
water	271:60	0:0	16	,
op	271:62	0:0	16	&
water	271:63	0:0	16	c
water	271:64	0:0	16	)
water	271:65	0:0	16	;
else	272:20	273:67	14
stmts	272:25	273:67	15	
if	272:25	273:67	16	(t == 2)
cond	272:28	272:31	17	t == 2
water	272:28	0:0	18	t
op	272:29	0:0	18	==
water	272:31	0:0	18	2
stmts	273:24	273:67	17	
call	273:24	273:46	18	RENAME
arg	273:31	273:46	19	doVertDefFilter
water	273:31	0:0	20	doVertDefFilter
water	273:47	0:0	18	(
water	273:48	0:0	18	tempBlock1
water	273:58	0:0	18	,
water	273:60	0:0	18	16
water	273:62	0:0	18	,
op	273:64	0:0	18	&
water	273:65	0:0	18	c
water	273:66	0:0	18	)
water	273:67	0:0	18	;
water	274:16	0:0	14	}
else	274:17	276:16	10
stmts	274:22	276:16	11	
if	274:22	276:16	12	(mode & H_A_DEBLOCK)
cond	274:25	274:32	13	mode & H_A_DEBLOCK
water	274:25	0:0	14	mode
op	274:30	0:0	14	&
water	274:32	0:0	14	H_A_DEBLOCK
stmts	274:44	276:16	13	
water	274:44	0:0	14	{
call	275:24	275:43	14	RENAME
arg	275:31	275:43	15	do_a_deblock
water	275:31	0:0	16	do_a_deblock
water	275:44	0:0	14	(
water	275:45	0:0	14	tempBlock1
water	275:55	0:0	14	,
water	275:57	0:0	14	16
water	275:59	0:0	14	,
water	275:61	0:0	14	1
water	275:62	0:0	14	,
op	275:64	0:0	14	&
water	275:65	0:0	14	c
water	275:66	0:0	14	,
water	275:68	0:0	14	mode
water	275:72	0:0	14	)
water	275:73	0:0	14	;
water	276:16	0:0	14	}
call	277:16	277:33	10	RENAME
arg	277:23	277:33	11	transpose2
water	277:23	0:0	12	transpose2
water	277:34	0:0	10	(
water	277:35	0:0	10	dstBlock
op	277:43	0:0	10	-
water	277:44	0:0	10	4
water	277:45	0:0	10	,
water	277:47	0:0	10	dstStride
water	277:56	0:0	10	,
water	277:58	0:0	10	tempBlock1
op	277:69	0:0	10	+
water	277:71	0:0	10	4
op	277:72	0:0	10	*
water	277:73	0:0	10	16
water	277:75	0:0	10	)
water	277:76	0:0	10	;
if	279:16	280:59	10	(mode & H_X1_FILTER)
cond	279:19	279:26	11	mode & H_X1_FILTER
water	279:19	0:0	12	mode
op	279:24	0:0	12	&
water	279:26	0:0	12	H_X1_FILTER
stmts	280:20	280:59	11	
call	280:20	280:58	12	horizX1Filter
arg	280:34	280:44	13	dstBlock-4
water	280:34	0:0	14	dstBlock
op	280:42	0:0	14	-
water	280:43	0:0	14	4
arg	280:46	280:52	13	stride
water	280:46	0:0	14	stride
arg	280:54	280:58	13	c.QP
water	280:54	0:0	14	c
op	280:55	0:0	14	.
water	280:56	0:0	14	QP
water	280:59	0:0	12	;
else	281:16	302:16	10
stmts	281:21	302:16	11	
if	281:21	302:16	12	(mode & H_DEBLOCK)
cond	281:24	281:31	13	mode & H_DEBLOCK
water	281:24	0:0	14	mode
op	281:29	0:0	14	&
water	281:31	0:0	14	H_DEBLOCK
stmts	281:41	302:16	13	
water	281:41	0:0	14	{
call	283:20	283:64	14	DECLARE_ALIGNED
arg	283:36	283:38	15	16
water	283:36	0:0	16	16
arg	283:40	283:53	15	unsignedchar
water	283:40	0:0	16	unsigned
water	283:49	0:0	16	char
arg	283:55	283:64	15	tempBlock
water	283:55	0:0	16	tempBlock
op	283:65	0:0	14	[
water	283:66	0:0	14	272
op	283:69	0:0	14	]
water	283:70	0:0	14	;
decl	284:20	284:25	14	int	t
call	285:20	285:99	14	transpose_16x8_char_toPackedAlign_altivec
arg	285:62	285:71	15	tempBlock
water	285:62	0:0	16	tempBlock
arg	285:73	285:91	15	dstBlock-(4+1)
water	285:73	0:0	16	dstBlock
op	285:82	0:0	16	-
water	285:84	0:0	16	(
water	285:85	0:0	16	4
op	285:87	0:0	16	+
water	285:89	0:0	16	1
water	285:90	0:0	16	)
arg	285:93	285:99	15	stride
water	285:93	0:0	16	stride
water	285:100	0:0	14	;
water	286:20	0:0	14	t
op	286:22	0:0	14	=
call	286:24	286:65	14	vertClassify_altivec
arg	286:45	286:57	15	tempBlock-48
water	286:45	0:0	16	tempBlock
op	286:54	0:0	16	-
water	286:55	0:0	16	48
arg	286:59	286:61	15	16
water	286:59	0:0	16	16
arg	286:63	286:65	15	&c
op	286:63	0:0	16	&
water	286:64	0:0	16	c
water	286:66	0:0	14	;
if	287:20	290:20	14	(t == 1)
cond	287:23	287:26	15	t == 1
water	287:23	0:0	16	t
op	287:24	0:0	16	==
water	287:26	0:0	16	1
stmts	287:29	290:20	15	
water	287:29	0:0	16	{
call	288:24	288:66	16	doVertLowPass_altivec
arg	288:46	288:58	17	tempBlock-48
water	288:46	0:0	18	tempBlock
op	288:55	0:0	18	-
water	288:56	0:0	18	48
arg	288:60	288:62	17	16
water	288:60	0:0	18	16
arg	288:64	288:66	17	&c
op	288:64	0:0	18	&
water	288:65	0:0	18	c
water	288:67	0:0	16	;
call	289:24	289:105	16	transpose_8x16_char_fromPackedAlign_altivec
arg	289:68	289:86	17	dstBlock-(4+1)
water	289:68	0:0	18	dstBlock
op	289:77	0:0	18	-
water	289:79	0:0	18	(
water	289:80	0:0	18	4
op	289:82	0:0	18	+
water	289:84	0:0	18	1
water	289:85	0:0	18	)
arg	289:88	289:97	17	tempBlock
water	289:88	0:0	18	tempBlock
arg	289:99	289:105	17	stride
water	289:99	0:0	18	stride
water	289:106	0:0	16	;
water	290:20	0:0	16	}
else	291:20	294:20	14
stmts	291:25	294:20	15	
if	291:25	294:20	16	(t == 2)
cond	291:28	291:31	17	t == 2
water	291:28	0:0	18	t
op	291:29	0:0	18	==
water	291:31	0:0	18	2
stmts	291:34	294:20	17	
water	291:34	0:0	18	{
call	292:24	292:68	18	doVertDefFilter_altivec
arg	292:48	292:60	19	tempBlock-48
water	292:48	0:0	20	tempBlock
op	292:57	0:0	20	-
water	292:58	0:0	20	48
arg	292:62	292:64	19	16
water	292:62	0:0	20	16
arg	292:66	292:68	19	&c
op	292:66	0:0	20	&
water	292:67	0:0	20	c
water	292:69	0:0	18	;
call	293:24	293:105	18	transpose_8x16_char_fromPackedAlign_altivec
arg	293:68	293:86	19	dstBlock-(4+1)
water	293:68	0:0	20	dstBlock
op	293:77	0:0	20	-
water	293:79	0:0	20	(
water	293:80	0:0	20	4
op	293:82	0:0	20	+
water	293:84	0:0	20	1
water	293:85	0:0	20	)
arg	293:88	293:97	19	tempBlock
water	293:88	0:0	20	tempBlock
arg	293:99	293:105	19	stride
water	293:99	0:0	20	stride
water	293:106	0:0	18	;
water	294:20	0:0	18	}
decl	296:20	296:78	14	const int	t
op	296:31	0:0	14	=
call	296:33	296:53	15	RENAME
arg	296:40	296:53	16	horizClassify
water	296:40	0:0	17	horizClassify
water	296:54	0:0	14	(
water	296:55	0:0	14	dstBlock
op	296:63	0:0	14	-
water	296:64	0:0	14	4
water	296:65	0:0	14	,
water	296:67	0:0	14	stride
water	296:73	0:0	14	,
op	296:75	0:0	14	&
water	296:76	0:0	14	c
water	296:77	0:0	14	)
if	297:20	298:70	14	(t == 1)
cond	297:23	297:26	15	t == 1
water	297:23	0:0	16	t
op	297:24	0:0	16	==
water	297:26	0:0	16	1
stmts	298:24	298:70	15	
call	298:24	298:45	16	RENAME
arg	298:31	298:45	17	doHorizLowPass
water	298:31	0:0	18	doHorizLowPass
water	298:46	0:0	16	(
water	298:47	0:0	16	dstBlock
op	298:55	0:0	16	-
water	298:56	0:0	16	4
water	298:57	0:0	16	,
water	298:59	0:0	16	stride
water	298:65	0:0	16	,
op	298:67	0:0	16	&
water	298:68	0:0	16	c
water	298:69	0:0	16	)
water	298:70	0:0	16	;
else	299:20	300:72	14
stmts	299:25	300:72	15	
if	299:25	300:72	16	(t == 2)
cond	299:28	299:31	17	t == 2
water	299:28	0:0	18	t
op	299:29	0:0	18	==
water	299:31	0:0	18	2
stmts	300:24	300:72	17	
call	300:24	300:47	18	RENAME
arg	300:31	300:47	19	doHorizDefFilter
water	300:31	0:0	20	doHorizDefFilter
water	300:48	0:0	18	(
water	300:49	0:0	18	dstBlock
op	300:57	0:0	18	-
water	300:58	0:0	18	4
water	300:59	0:0	18	,
water	300:61	0:0	18	stride
water	300:67	0:0	18	,
op	300:69	0:0	18	&
water	300:70	0:0	18	c
water	300:71	0:0	18	)
water	300:72	0:0	18	;
water	302:16	0:0	14	}
else	302:17	304:16	10
stmts	302:22	304:16	11	
if	302:22	304:16	12	(mode & H_A_DEBLOCK)
cond	302:25	302:32	13	mode & H_A_DEBLOCK
water	302:25	0:0	14	mode
op	302:30	0:0	14	&
water	302:32	0:0	14	H_A_DEBLOCK
stmts	302:44	304:16	13	
water	302:44	0:0	14	{
call	303:20	303:39	14	RENAME
arg	303:27	303:39	15	do_a_deblock
water	303:27	0:0	16	do_a_deblock
water	303:40	0:0	14	(
water	303:41	0:0	14	dstBlock
op	303:49	0:0	14	-
water	303:50	0:0	14	8
water	303:51	0:0	14	,
water	303:53	0:0	14	1
water	303:54	0:0	14	,
water	303:56	0:0	14	stride
water	303:62	0:0	14	,
op	303:64	0:0	14	&
water	303:65	0:0	14	c
water	303:66	0:0	14	,
water	303:68	0:0	14	mode
water	303:72	0:0	14	)
water	303:73	0:0	14	;
water	304:16	0:0	14	}
if	306:16	309:16	10	(mode & DERING)
cond	306:19	306:26	11	mode & DERING
water	306:19	0:0	12	mode
op	306:24	0:0	12	&
water	306:26	0:0	12	DERING
stmts	306:33	309:16	11	
water	306:33	0:0	12	{
if	308:20	308:77	12	(y > 0)
cond	308:23	308:25	13	y > 0
water	308:23	0:0	14	y
op	308:24	0:0	14	>
water	308:25	0:0	14	0
stmts	308:28	308:77	13	
call	308:28	308:41	14	RENAME
arg	308:35	308:41	15	dering
water	308:35	0:0	16	dering
water	308:42	0:0	14	(
water	308:43	0:0	14	dstBlock
op	308:52	0:0	14	-
water	308:54	0:0	14	stride
op	308:61	0:0	14	-
water	308:63	0:0	14	8
water	308:64	0:0	14	,
water	308:66	0:0	14	stride
water	308:72	0:0	14	,
op	308:74	0:0	14	&
water	308:75	0:0	14	c
water	308:76	0:0	14	)
water	308:77	0:0	14	;
water	309:16	0:0	12	}
if	310:16	316:16	10	(mode & TEMP_NOISE_FILTER)
cond	310:19	310:26	11	mode & TEMP_NOISE_FILTER
water	310:19	0:0	12	mode
op	310:24	0:0	12	&
water	310:26	0:0	12	TEMP_NOISE_FILTER
stmts	311:16	316:16	11	
water	311:16	0:0	12	{
call	312:20	312:43	12	RENAME
arg	312:27	312:43	13	tempNoiseReducer
water	312:27	0:0	14	tempNoiseReducer
water	312:44	0:0	12	(
water	312:45	0:0	12	dstBlock
op	312:53	0:0	12	-
water	312:54	0:0	12	8
water	312:55	0:0	12	,
water	312:57	0:0	12	stride
water	312:63	0:0	12	,
water	313:28	0:0	12	c
op	313:29	0:0	12	.
water	313:30	0:0	12	tempBlurred
op	313:41	0:0	12	[
water	313:42	0:0	12	isColor
op	313:49	0:0	12	]
op	313:51	0:0	12	+
water	313:53	0:0	12	y
op	313:54	0:0	12	*
water	313:55	0:0	12	dstStride
op	313:65	0:0	12	+
water	313:67	0:0	12	x
water	313:68	0:0	12	,
water	314:28	0:0	12	c
op	314:29	0:0	12	.
water	314:30	0:0	12	tempBlurredPast
op	314:45	0:0	12	[
water	314:46	0:0	12	isColor
op	314:53	0:0	12	]
op	314:55	0:0	12	+
water	314:57	0:0	12	(
water	314:58	0:0	12	y
op	314:59	0:0	12	>>
water	314:61	0:0	12	3
water	314:62	0:0	12	)
op	314:63	0:0	12	*
water	314:64	0:0	12	256
op	314:68	0:0	12	+
water	314:70	0:0	12	(
water	314:71	0:0	12	x
op	314:72	0:0	12	>>
water	314:74	0:0	12	3
water	314:75	0:0	12	)
op	314:77	0:0	12	+
water	314:79	0:0	12	256
water	314:82	0:0	12	,
water	315:28	0:0	12	c
op	315:29	0:0	12	.
water	315:30	0:0	12	ppMode
op	315:36	0:0	12	.
water	315:37	0:0	12	maxTmpNoise
water	315:48	0:0	12	)
water	315:49	0:0	12	;
water	316:16	0:0	12	}
water	317:12	0:0	10	}
water	318:12	0:0	8	dstBlock
op	318:20	0:0	8	+=
water	318:22	0:0	8	8
water	318:23	0:0	8	;
water	319:12	0:0	8	srcBlock
op	319:20	0:0	8	+=
water	319:22	0:0	8	8
water	319:23	0:0	8	;
water	321:12	0:0	8	tmpXchg
op	321:19	0:0	8	=
water	321:21	0:0	8	tempBlock1
water	321:31	0:0	8	;
water	322:12	0:0	8	tempBlock1
op	322:22	0:0	8	=
water	322:24	0:0	8	tempBlock2
water	322:34	0:0	8	;
water	323:12	0:0	8	tempBlock2
op	323:23	0:0	8	=
water	323:25	0:0	8	tmpXchg
water	323:32	0:0	8	;
water	325:10	0:0	8	}
water	326:8	0:0	6	}
if	327:8	329:8	4	(mode & DERING)
cond	327:11	327:18	5	mode & DERING
water	327:11	0:0	6	mode
op	327:16	0:0	6	&
water	327:18	0:0	6	DERING
stmts	327:25	329:8	5	
water	327:25	0:0	6	{
if	328:12	328:77	6	(y > 0)
cond	328:15	328:19	7	y > 0
water	328:15	0:0	8	y
op	328:17	0:0	8	>
water	328:19	0:0	8	0
stmts	328:22	328:77	7	
call	328:22	328:35	8	RENAME
arg	328:29	328:35	9	dering
water	328:29	0:0	10	dering
water	328:36	0:0	8	(
water	328:37	0:0	8	dstBlock
op	328:46	0:0	8	-
water	328:48	0:0	8	dstStride
op	328:58	0:0	8	-
water	328:60	0:0	8	8
water	328:61	0:0	8	,
water	328:63	0:0	8	dstStride
water	328:72	0:0	8	,
op	328:74	0:0	8	&
water	328:75	0:0	8	c
water	328:76	0:0	8	)
water	328:77	0:0	8	;
water	329:8	0:0	6	}
if	330:8	335:8	4	(( mode & TEMP_NOISE_FILTER ))
cond	330:11	330:36	5	( mode & TEMP_NOISE_FILTER )
water	330:11	0:0	6	(
water	330:12	0:0	6	mode
op	330:17	0:0	6	&
water	330:19	0:0	6	TEMP_NOISE_FILTER
water	330:36	0:0	6	)
stmts	330:38	335:8	5	
water	330:38	0:0	6	{
call	331:12	331:35	6	RENAME
arg	331:19	331:35	7	tempNoiseReducer
water	331:19	0:0	8	tempNoiseReducer
water	331:36	0:0	6	(
water	331:37	0:0	6	dstBlock
op	331:45	0:0	6	-
water	331:46	0:0	6	8
water	331:47	0:0	6	,
water	331:49	0:0	6	dstStride
water	331:58	0:0	6	,
water	332:20	0:0	6	c
op	332:21	0:0	6	.
water	332:22	0:0	6	tempBlurred
op	332:33	0:0	6	[
water	332:34	0:0	6	isColor
op	332:41	0:0	6	]
op	332:43	0:0	6	+
water	332:45	0:0	6	y
op	332:46	0:0	6	*
water	332:47	0:0	6	dstStride
op	332:57	0:0	6	+
water	332:59	0:0	6	x
water	332:60	0:0	6	,
water	333:20	0:0	6	c
op	333:21	0:0	6	.
water	333:22	0:0	6	tempBlurredPast
op	333:37	0:0	6	[
water	333:38	0:0	6	isColor
op	333:45	0:0	6	]
op	333:47	0:0	6	+
water	333:49	0:0	6	(
water	333:50	0:0	6	y
op	333:51	0:0	6	>>
water	333:53	0:0	6	3
water	333:54	0:0	6	)
op	333:55	0:0	6	*
water	333:56	0:0	6	256
op	333:60	0:0	6	+
water	333:62	0:0	6	(
water	333:63	0:0	6	x
op	333:64	0:0	6	>>
water	333:66	0:0	6	3
water	333:67	0:0	6	)
op	333:69	0:0	6	+
water	333:71	0:0	6	256
water	333:74	0:0	6	,
water	334:20	0:0	6	c
op	334:21	0:0	6	.
water	334:22	0:0	6	ppMode
op	334:28	0:0	6	.
water	334:29	0:0	6	maxTmpNoise
water	334:40	0:0	6	)
water	334:41	0:0	6	;
water	335:8	0:0	6	}
if	337:8	347:8	4	(y + 15 >= height)
cond	337:11	337:19	5	y + 15 >= height
water	337:11	0:0	6	y
op	337:12	0:0	6	+
water	337:13	0:0	6	15
op	337:16	0:0	6	>=
water	337:19	0:0	6	height
stmts	337:26	347:8	5	
water	337:26	0:0	6	{
decl	338:12	338:50	6	uint8_t	*dstBlock
op	338:29	0:0	6	=
op	338:31	0:0	6	&
water	338:32	0:0	6	(
water	338:33	0:0	6	dst
op	338:36	0:0	6	[
water	338:37	0:0	6	y
op	338:38	0:0	6	*
water	338:39	0:0	6	dstStride
op	338:48	0:0	6	]
water	338:49	0:0	6	)
if	339:12	340:75	6	(width ==FFABS (dstStride ))
cond	339:15	339:37	7	width ==FFABS (dstStride )
water	339:15	0:0	8	width
op	339:20	0:0	8	==
call	339:22	339:37	8	FFABS
arg	339:28	339:37	9	dstStride
water	339:28	0:0	10	dstStride
stmts	340:16	340:75	7	
call	340:16	340:74	8	linecpy
arg	340:24	340:32	9	dstBlock
water	340:24	0:0	10	dstBlock
arg	340:34	340:53	9	tempDst+dstStride
water	340:34	0:0	10	tempDst
op	340:42	0:0	10	+
water	340:44	0:0	10	dstStride
arg	340:55	340:63	9	height-y
water	340:55	0:0	10	height
op	340:61	0:0	10	-
water	340:62	0:0	10	y
arg	340:65	340:74	9	dstStride
water	340:65	0:0	10	dstStride
water	340:75	0:0	8	;
else	341:12	346:12	6
stmts	341:16	346:12	7	
water	341:16	0:0	8	{
decl	342:16	342:21	8	int	i
for	343:16	345:16	8	(i = 0 ;i < height - y;i ++)
forinit	343:20	343:23	9	i = 0 ;
water	343:20	0:0	10	i
op	343:21	0:0	10	=
water	343:22	0:0	10	0
water	343:23	0:0	10	;
cond	343:25	343:34	9	i < height - y
water	343:25	0:0	10	i
op	343:26	0:0	10	<
water	343:27	0:0	10	height
op	343:33	0:0	10	-
water	343:34	0:0	10	y
forexpr	343:37	343:38	9	i ++
water	343:37	0:0	10	i
op	343:38	0:0	10	++
stmts	343:41	345:16	9	
water	343:41	0:0	10	{
call	344:20	344:83	10	memcpy
arg	344:27	344:49	11	dstBlock+i*dstStride
water	344:27	0:0	12	dstBlock
op	344:36	0:0	12	+
water	344:38	0:0	12	i
op	344:39	0:0	12	*
water	344:40	0:0	12	dstStride
arg	344:51	344:76	11	tempDst+(i+1)*dstStride
water	344:51	0:0	12	tempDst
op	344:59	0:0	12	+
water	344:61	0:0	12	(
water	344:62	0:0	12	i
op	344:63	0:0	12	+
water	344:64	0:0	12	1
water	344:65	0:0	12	)
op	344:66	0:0	12	*
water	344:67	0:0	12	dstStride
arg	344:78	344:83	11	width
water	344:78	0:0	12	width
water	344:84	0:0	10	;
water	345:16	0:0	10	}
water	346:12	0:0	8	}
water	347:8	0:0	6	}
water	348:4	0:0	4	}
water	350:4	0:0	2	__asm__
water	350:12	0:0	2	volatile
water	350:20	0:0	2	(
water	350:21	0:0	2	"femms"
water	350:28	0:0	2	)
water	350:29	0:0	2	;
water	352:4	0:0	2	__asm__
water	352:12	0:0	2	volatile
water	352:20	0:0	2	(
water	352:21	0:0	2	"emms"
water	352:27	0:0	2	)
water	352:28	0:0	2	;
if	355:4	372:4	2	(! isColor)
cond	355:7	355:8	3	! isColor
op	355:7	0:0	4	!
water	355:8	0:0	4	isColor
stmts	355:16	372:4	3	
water	355:16	0:0	4	{
decl	356:8	356:17	4	int	max
op	356:15	0:0	4	=
water	356:16	0:0	4	1
decl	357:8	357:13	4	int	i
for	358:8	359:53	4	(i = 0 ;i < 256;i ++)
forinit	358:12	358:15	5	i = 0 ;
water	358:12	0:0	6	i
op	358:13	0:0	6	=
water	358:14	0:0	6	0
water	358:15	0:0	6	;
cond	358:17	358:19	5	i < 256
water	358:17	0:0	6	i
op	358:18	0:0	6	<
water	358:19	0:0	6	256
forexpr	358:24	358:25	5	i ++
water	358:24	0:0	6	i
op	358:25	0:0	6	++
stmts	359:12	359:53	5	
if	359:12	359:53	6	(yHistogram [ i ] > max)
cond	359:15	359:31	7	yHistogram [ i ] > max
water	359:15	0:0	8	yHistogram
op	359:25	0:0	8	[
water	359:26	0:0	8	i
op	359:27	0:0	8	]
op	359:29	0:0	8	>
water	359:31	0:0	8	max
stmts	359:36	359:53	7	
water	359:36	0:0	8	max
op	359:39	0:0	8	=
water	359:40	0:0	8	yHistogram
op	359:50	0:0	8	[
water	359:51	0:0	8	i
op	359:52	0:0	8	]
water	359:53	0:0	8	;
for	360:8	367:8	4	(i = 1 ;i < 256;i ++)
forinit	360:12	360:15	5	i = 1 ;
water	360:12	0:0	6	i
op	360:13	0:0	6	=
water	360:14	0:0	6	1
water	360:15	0:0	6	;
cond	360:17	360:19	5	i < 256
water	360:17	0:0	6	i
op	360:18	0:0	6	<
water	360:19	0:0	6	256
forexpr	360:24	360:25	5	i ++
water	360:24	0:0	6	i
op	360:25	0:0	6	++
stmts	360:28	367:8	5	
water	360:28	0:0	6	{
decl	361:12	361:17	6	int	x
decl	362:12	362:49	6	int	start
op	362:21	0:0	6	=
water	362:22	0:0	6	yHistogram
op	362:32	0:0	6	[
water	362:33	0:0	6	i
op	362:34	0:0	6	-
water	362:35	0:0	6	1
op	362:36	0:0	6	]
op	362:37	0:0	6	/
water	362:38	0:0	6	(
water	362:39	0:0	6	max
op	362:42	0:0	6	/
water	362:43	0:0	6	256
op	362:46	0:0	6	+
water	362:47	0:0	6	1
water	362:48	0:0	6	)
decl	363:12	363:45	6	int	end
op	363:19	0:0	6	=
water	363:20	0:0	6	yHistogram
op	363:30	0:0	6	[
water	363:31	0:0	6	i
op	363:32	0:0	6	]
op	363:33	0:0	6	/
water	363:34	0:0	6	(
water	363:35	0:0	6	max
op	363:38	0:0	6	/
water	363:39	0:0	6	256
op	363:42	0:0	6	+
water	363:43	0:0	6	1
water	363:44	0:0	6	)
decl	364:12	364:41	6	int	inc
op	364:19	0:0	6	=
water	364:21	0:0	6	end
op	364:25	0:0	6	>
water	364:27	0:0	6	start
water	364:33	0:0	6	?
water	364:35	0:0	6	1
water	364:37	0:0	6	:
op	364:39	0:0	6	-
water	364:40	0:0	6	1
for	365:12	366:42	6	(x = start ;x != end + inc;x += inc)
forinit	365:16	365:23	7	x = start ;
water	365:16	0:0	8	x
op	365:17	0:0	8	=
water	365:18	0:0	8	start
water	365:23	0:0	8	;
cond	365:25	365:32	7	x != end + inc
water	365:25	0:0	8	x
op	365:26	0:0	8	!=
water	365:28	0:0	8	end
op	365:31	0:0	8	+
water	365:32	0:0	8	inc
forexpr	365:37	365:40	7	x += inc
water	365:37	0:0	8	x
op	365:38	0:0	8	+=
water	365:40	0:0	8	inc
stmts	366:16	366:42	7	
water	366:16	0:0	8	dst
op	366:19	0:0	8	[
water	366:21	0:0	8	i
op	366:22	0:0	8	*
water	366:23	0:0	8	dstStride
op	366:33	0:0	8	+
water	366:35	0:0	8	x
op	366:36	0:0	8	]
op	366:37	0:0	8	+=
water	366:39	0:0	8	128
water	366:42	0:0	8	;
water	367:8	0:0	6	}
for	368:8	371:8	4	(i = 0 ;i < 100;i += 2)
forinit	368:12	368:15	5	i = 0 ;
water	368:12	0:0	6	i
op	368:13	0:0	6	=
water	368:14	0:0	6	0
water	368:15	0:0	6	;
cond	368:17	368:19	5	i < 100
water	368:17	0:0	6	i
op	368:18	0:0	6	<
water	368:19	0:0	6	100
forexpr	368:24	368:27	5	i += 2
water	368:24	0:0	6	i
op	368:25	0:0	6	+=
water	368:27	0:0	6	2
stmts	368:29	371:8	5	
water	368:29	0:0	6	{
water	369:12	0:0	6	dst
op	369:15	0:0	6	[
water	369:17	0:0	6	(
water	369:18	0:0	6	white
water	369:23	0:0	6	)
op	369:24	0:0	6	*
water	369:25	0:0	6	dstStride
op	369:35	0:0	6	+
water	369:37	0:0	6	i
op	369:38	0:0	6	]
op	369:39	0:0	6	+=
water	369:41	0:0	6	128
water	369:44	0:0	6	;
water	370:12	0:0	6	dst
op	370:15	0:0	6	[
water	370:17	0:0	6	(
water	370:18	0:0	6	black
water	370:23	0:0	6	)
op	370:24	0:0	6	*
water	370:25	0:0	6	dstStride
op	370:35	0:0	6	+
water	370:37	0:0	6	i
op	370:38	0:0	6	]
op	370:39	0:0	6	+=
water	370:41	0:0	6	128
water	370:44	0:0	6	;
water	371:8	0:0	6	}
water	372:4	0:0	4	}
op	374:4	0:0	2	*
water	374:5	0:0	2	c2
op	374:7	0:0	2	=
water	374:9	0:0	2	c
water	374:10	0:0	2	;
