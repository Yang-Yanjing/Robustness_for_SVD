func	1:15	66:0	0	int	psy_3gpp_init
params	1:32	0:0	1	
param	1:33	1:50	2	FFPsyContext *	ctx
stmnts	0:0	65:12	1	
decl	2:4	2:23	2	AacPsyContext	*pctx
decl	3:4	3:14	2	float	bark
decl	4:4	4:22	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:22	2	int	j
water	4:12	0:0	2	,
decl	4:4	4:22	2	int	g
water	4:15	0:0	2	,
decl	4:4	4:22	2	int	start
decl	5:4	5:48	2	float	prev
water	5:14	0:0	2	,
decl	5:4	5:48	2	float	minscale
water	5:24	0:0	2	,
decl	5:4	5:48	2	float	minath
water	5:32	0:0	2	,
decl	5:4	5:48	2	float	minsnr
water	5:40	0:0	2	,
decl	5:4	5:48	2	float	pe_min
decl	6:4	6:72	2	const int	chan_bitrate
op	6:27	0:0	2	=
water	6:29	0:0	2	ctx
op	6:32	0:0	2	->
water	6:34	0:0	2	avctx
op	6:39	0:0	2	->
water	6:41	0:0	2	bit_rate
op	6:50	0:0	2	/
water	6:52	0:0	2	ctx
op	6:55	0:0	2	->
water	6:57	0:0	2	avctx
op	6:62	0:0	2	->
water	6:64	0:0	2	channels
decl	7:4	7:93	2	const int	bandwidth
op	7:27	0:0	2	=
water	7:29	0:0	2	ctx
op	7:32	0:0	2	->
water	7:34	0:0	2	avctx
op	7:39	0:0	2	->
water	7:41	0:0	2	cutoff
water	7:48	0:0	2	?
water	7:50	0:0	2	ctx
op	7:53	0:0	2	->
water	7:55	0:0	2	avctx
op	7:60	0:0	2	->
water	7:62	0:0	2	cutoff
water	7:69	0:0	2	:
call	7:71	7:92	3	AAC_CUTOFF
arg	7:82	7:92	4	ctx->avctx
water	7:82	0:0	5	ctx
op	7:85	0:0	5	->
water	7:87	0:0	5	avctx
decl	8:4	8:56	2	const float	num_bark
op	8:27	0:0	2	=
call	8:29	8:55	3	calc_bark
arg	8:39	8:55	4	(float)bandwidth
water	8:39	0:0	5	(
water	8:40	0:0	5	float
water	8:45	0:0	5	)
water	8:46	0:0	5	bandwidth
water	9:4	0:0	2	ctx
op	9:7	0:0	2	->
water	9:9	0:0	2	model_priv_data
op	9:25	0:0	2	=
call	9:27	9:59	2	av_mallocz
arg	9:38	9:59	3	sizeof(AacPsyContext)
op	9:38	0:0	4	sizeof
water	9:44	0:0	4	(
water	9:45	0:0	4	AacPsyContext
water	9:58	0:0	4	)
water	9:60	0:0	2	;
if	10:4	11:30	2	(! ctx -> model_priv_data)
cond	10:8	10:14	3	! ctx -> model_priv_data
op	10:8	0:0	4	!
water	10:9	0:0	4	ctx
op	10:12	0:0	4	->
water	10:14	0:0	4	model_priv_data
stmts	11:8	11:30	3	
return	11:8	11:30	4	AVERROR(ENOMEM)
call	11:15	11:29	5	AVERROR
arg	11:23	11:29	6	ENOMEM
water	11:23	0:0	7	ENOMEM
water	12:4	0:0	2	pctx
op	12:9	0:0	2	=
water	12:11	0:0	2	(
water	12:12	0:0	2	AacPsyContext
op	12:25	0:0	2	*
water	12:26	0:0	2	)
water	12:28	0:0	2	ctx
op	12:31	0:0	2	->
water	12:33	0:0	2	model_priv_data
water	12:48	0:0	2	;
water	13:4	0:0	2	pctx
op	13:8	0:0	2	->
water	13:10	0:0	2	chan_bitrate
op	13:23	0:0	2	=
water	13:25	0:0	2	chan_bitrate
water	13:37	0:0	2	;
water	14:4	0:0	2	pctx
op	14:8	0:0	2	->
water	14:10	0:0	2	frame_bits
op	14:23	0:0	2	=
water	14:25	0:0	2	chan_bitrate
op	14:38	0:0	2	*
water	14:40	0:0	2	AAC_BLOCK_SIZE_LONG
op	14:60	0:0	2	/
water	14:62	0:0	2	ctx
op	14:65	0:0	2	->
water	14:67	0:0	2	avctx
op	14:72	0:0	2	->
water	14:74	0:0	2	sample_rate
water	14:85	0:0	2	;
water	15:4	0:0	2	pctx
op	15:8	0:0	2	->
water	15:10	0:0	2	pe
op	15:12	0:0	2	.
water	15:13	0:0	2	min
op	15:23	0:0	2	=
water	15:26	0:0	2	8
op	15:27	0:0	2	.
water	15:28	0:0	2	0
water	15:29	0:0	2	f
op	15:31	0:0	2	*
water	15:33	0:0	2	AAC_BLOCK_SIZE_LONG
op	15:53	0:0	2	*
water	15:55	0:0	2	bandwidth
op	15:65	0:0	2	/
water	15:67	0:0	2	(
water	15:68	0:0	2	ctx
op	15:71	0:0	2	->
water	15:73	0:0	2	avctx
op	15:78	0:0	2	->
water	15:80	0:0	2	sample_rate
op	15:92	0:0	2	*
water	15:94	0:0	2	2
op	15:95	0:0	2	.
water	15:96	0:0	2	0
water	15:97	0:0	2	f
water	15:98	0:0	2	)
water	15:99	0:0	2	;
water	16:4	0:0	2	pctx
op	16:8	0:0	2	->
water	16:10	0:0	2	pe
op	16:12	0:0	2	.
water	16:13	0:0	2	max
op	16:23	0:0	2	=
water	16:25	0:0	2	12
op	16:27	0:0	2	.
water	16:28	0:0	2	0
water	16:29	0:0	2	f
op	16:31	0:0	2	*
water	16:33	0:0	2	AAC_BLOCK_SIZE_LONG
op	16:53	0:0	2	*
water	16:55	0:0	2	bandwidth
op	16:65	0:0	2	/
water	16:67	0:0	2	(
water	16:68	0:0	2	ctx
op	16:71	0:0	2	->
water	16:73	0:0	2	avctx
op	16:78	0:0	2	->
water	16:80	0:0	2	sample_rate
op	16:92	0:0	2	*
water	16:94	0:0	2	2
op	16:95	0:0	2	.
water	16:96	0:0	2	0
water	16:97	0:0	2	f
water	16:98	0:0	2	)
water	16:99	0:0	2	;
water	17:4	0:0	2	ctx
op	17:7	0:0	2	->
water	17:9	0:0	2	bitres
op	17:15	0:0	2	.
water	17:16	0:0	2	size
op	17:23	0:0	2	=
water	17:25	0:0	2	6144
op	17:30	0:0	2	-
water	17:32	0:0	2	pctx
op	17:36	0:0	2	->
water	17:38	0:0	2	frame_bits
water	17:48	0:0	2	;
water	18:4	0:0	2	ctx
op	18:7	0:0	2	->
water	18:9	0:0	2	bitres
op	18:15	0:0	2	.
water	18:16	0:0	2	size
op	18:22	0:0	2	-=
water	18:25	0:0	2	ctx
op	18:28	0:0	2	->
water	18:30	0:0	2	bitres
op	18:36	0:0	2	.
water	18:37	0:0	2	size
op	18:42	0:0	2	%
water	18:44	0:0	2	8
water	18:45	0:0	2	;
water	19:4	0:0	2	pctx
op	19:8	0:0	2	->
water	19:10	0:0	2	fill_level
op	19:23	0:0	2	=
water	19:25	0:0	2	ctx
op	19:28	0:0	2	->
water	19:30	0:0	2	bitres
op	19:36	0:0	2	.
water	19:37	0:0	2	size
water	19:41	0:0	2	;
water	20:4	0:0	2	minath
op	20:11	0:0	2	=
call	20:13	20:48	2	ath
arg	20:17	20:39	3	3410-0.733*ATH_ADD
water	20:17	0:0	4	3410
op	20:22	0:0	4	-
water	20:24	0:0	4	0
op	20:25	0:0	4	.
water	20:26	0:0	4	733
op	20:30	0:0	4	*
water	20:32	0:0	4	ATH_ADD
arg	20:41	20:48	3	ATH_ADD
water	20:41	0:0	4	ATH_ADD
water	20:49	0:0	2	;
for	21:4	58:4	2	(j = 0 ;j < 2;j ++)
forinit	21:9	21:14	3	j = 0 ;
water	21:9	0:0	4	j
op	21:11	0:0	4	=
water	21:13	0:0	4	0
water	21:14	0:0	4	;
cond	21:16	21:20	3	j < 2
water	21:16	0:0	4	j
op	21:18	0:0	4	<
water	21:20	0:0	4	2
forexpr	21:23	21:24	3	j ++
water	21:23	0:0	4	j
op	21:24	0:0	4	++
stmts	21:28	58:4	3	
water	21:28	0:0	4	{
decl	22:8	22:48	4	AacPsyCoeffs	*coeffs
op	22:29	0:0	4	=
water	22:31	0:0	4	pctx
op	22:35	0:0	4	->
water	22:37	0:0	4	psy_coef
op	22:45	0:0	4	[
water	22:46	0:0	4	j
op	22:47	0:0	4	]
decl	23:8	23:49	4	const uint8_t	*band_sizes
op	23:34	0:0	4	=
water	23:36	0:0	4	ctx
op	23:39	0:0	4	->
water	23:41	0:0	4	bands
op	23:46	0:0	4	[
water	23:47	0:0	4	j
op	23:48	0:0	4	]
decl	24:8	24:81	4	float	line_to_frequency
op	24:32	0:0	4	=
water	24:34	0:0	4	ctx
op	24:37	0:0	4	->
water	24:39	0:0	4	avctx
op	24:44	0:0	4	->
water	24:46	0:0	4	sample_rate
op	24:58	0:0	4	/
water	24:60	0:0	4	(
water	24:61	0:0	4	j
water	24:63	0:0	4	?
water	24:65	0:0	4	256
op	24:68	0:0	4	.
water	24:69	0:0	4	f
water	24:71	0:0	4	:
water	24:73	0:0	4	2048
op	24:77	0:0	4	.
water	24:78	0:0	4	0
water	24:79	0:0	4	f
water	24:80	0:0	4	)
decl	25:8	25:93	4	float	avg_chan_bits
op	25:28	0:0	4	=
water	25:30	0:0	4	chan_bitrate
op	25:43	0:0	4	*
water	25:45	0:0	4	(
water	25:46	0:0	4	j
water	25:48	0:0	4	?
water	25:50	0:0	4	128
op	25:53	0:0	4	.
water	25:54	0:0	4	0
water	25:55	0:0	4	f
water	25:57	0:0	4	:
water	25:59	0:0	4	1024
op	25:63	0:0	4	.
water	25:64	0:0	4	0
water	25:65	0:0	4	f
water	25:66	0:0	4	)
op	25:68	0:0	4	/
water	25:70	0:0	4	ctx
op	25:73	0:0	4	->
water	25:75	0:0	4	avctx
op	25:80	0:0	4	->
water	25:82	0:0	4	sample_rate
decl	27:8	27:78	4	float	bark_pe
op	27:22	0:0	4	=
water	27:24	0:0	4	0
op	27:25	0:0	4	.
water	27:26	0:0	4	024
water	27:29	0:0	4	f
call	27:31	27:66	5	*PSY_3GPP_BITS_TO_PE
arg	27:53	27:66	6	avg_chan_bits
water	27:53	0:0	7	avg_chan_bits
op	27:68	0:0	4	/
water	27:70	0:0	4	num_bark
decl	28:8	28:85	4	float	en_spread_low
op	28:28	0:0	4	=
water	28:30	0:0	4	j
water	28:32	0:0	4	?
water	28:34	0:0	4	PSY_3GPP_EN_SPREAD_LOW_S
water	28:59	0:0	4	:
water	28:61	0:0	4	PSY_3GPP_EN_SPREAD_LOW_L
decl	30:8	30:113	4	float	en_spread_hi
op	30:28	0:0	4	=
water	30:30	0:0	4	(
water	30:31	0:0	4	j
op	30:33	0:0	4	||
water	30:36	0:0	4	(
water	30:37	0:0	4	chan_bitrate
op	30:50	0:0	4	<=
water	30:53	0:0	4	22
op	30:55	0:0	4	.
water	30:56	0:0	4	0
water	30:57	0:0	4	f
water	30:58	0:0	4	)
water	30:59	0:0	4	)
water	30:61	0:0	4	?
water	30:63	0:0	4	PSY_3GPP_EN_SPREAD_HI_S
water	30:87	0:0	4	:
water	30:89	0:0	4	PSY_3GPP_EN_SPREAD_HI_L1
water	31:8	0:0	4	i
op	31:10	0:0	4	=
water	31:12	0:0	4	0
water	31:13	0:0	4	;
water	32:8	0:0	4	prev
op	32:13	0:0	4	=
water	32:15	0:0	4	0
op	32:16	0:0	4	.
water	32:17	0:0	4	0
water	32:18	0:0	4	;
for	33:8	38:8	4	(g = 0 ;g < ctx -> num_bands [ j ];g ++)
forinit	33:13	33:18	5	g = 0 ;
water	33:13	0:0	6	g
op	33:15	0:0	6	=
water	33:17	0:0	6	0
water	33:18	0:0	6	;
cond	33:20	33:40	5	g < ctx -> num_bands [ j ]
water	33:20	0:0	6	g
op	33:22	0:0	6	<
water	33:24	0:0	6	ctx
op	33:27	0:0	6	->
water	33:29	0:0	6	num_bands
op	33:38	0:0	6	[
water	33:39	0:0	6	j
op	33:40	0:0	6	]
forexpr	33:43	33:44	5	g ++
water	33:43	0:0	6	g
op	33:44	0:0	6	++
stmts	33:48	38:8	5	
water	33:48	0:0	6	{
water	34:12	0:0	6	i
op	34:14	0:0	6	+=
water	34:17	0:0	6	band_sizes
op	34:27	0:0	6	[
water	34:28	0:0	6	g
op	34:29	0:0	6	]
water	34:30	0:0	6	;
water	35:12	0:0	6	bark
op	35:17	0:0	6	=
call	35:19	35:54	6	calc_bark
arg	35:29	35:54	7	(i-1)*line_to_frequency
water	35:29	0:0	8	(
water	35:30	0:0	8	i
op	35:31	0:0	8	-
water	35:32	0:0	8	1
water	35:33	0:0	8	)
op	35:35	0:0	8	*
water	35:37	0:0	8	line_to_frequency
water	35:55	0:0	6	;
water	36:12	0:0	6	coeffs
op	36:18	0:0	6	[
water	36:19	0:0	6	g
op	36:20	0:0	6	]
op	36:21	0:0	6	.
water	36:22	0:0	6	barks
op	36:28	0:0	6	=
water	36:30	0:0	6	(
water	36:31	0:0	6	bark
op	36:36	0:0	6	+
water	36:38	0:0	6	prev
water	36:42	0:0	6	)
op	36:44	0:0	6	/
water	36:46	0:0	6	2
op	36:47	0:0	6	.
water	36:48	0:0	6	0
water	36:49	0:0	6	;
water	37:12	0:0	6	prev
op	37:17	0:0	6	=
water	37:19	0:0	6	bark
water	37:23	0:0	6	;
water	38:8	0:0	6	}
for	39:8	49:8	4	(g = 0 ;g < ctx -> num_bands [ j ] - 1;g ++)
forinit	39:13	39:18	5	g = 0 ;
water	39:13	0:0	6	g
op	39:15	0:0	6	=
water	39:17	0:0	6	0
water	39:18	0:0	6	;
cond	39:20	39:44	5	g < ctx -> num_bands [ j ] - 1
water	39:20	0:0	6	g
op	39:22	0:0	6	<
water	39:24	0:0	6	ctx
op	39:27	0:0	6	->
water	39:29	0:0	6	num_bands
op	39:38	0:0	6	[
water	39:39	0:0	6	j
op	39:40	0:0	6	]
op	39:42	0:0	6	-
water	39:44	0:0	6	1
forexpr	39:47	39:48	5	g ++
water	39:47	0:0	6	g
op	39:48	0:0	6	++
stmts	39:52	49:8	5	
water	39:52	0:0	6	{
decl	40:12	40:44	6	AacPsyCoeffs	*coeff
op	40:32	0:0	6	=
op	40:34	0:0	6	&
water	40:35	0:0	6	coeffs
op	40:41	0:0	6	[
water	40:42	0:0	6	g
op	40:43	0:0	6	]
decl	41:12	41:64	6	float	bark_width
op	41:29	0:0	6	=
water	41:31	0:0	6	coeffs
op	41:37	0:0	6	[
water	41:38	0:0	6	g
op	41:39	0:0	6	+
water	41:40	0:0	6	1
op	41:41	0:0	6	]
op	41:42	0:0	6	.
water	41:43	0:0	6	barks
op	41:49	0:0	6	-
water	41:51	0:0	6	coeffs
op	41:57	0:0	6	->
water	41:59	0:0	6	barks
water	42:12	0:0	6	coeff
op	42:17	0:0	6	->
water	42:19	0:0	6	spread_low
op	42:29	0:0	6	[
water	42:30	0:0	6	0
op	42:31	0:0	6	]
op	42:33	0:0	6	=
call	42:35	42:82	6	pow
arg	42:39	42:43	7	10.0
water	42:39	0:0	8	10
op	42:41	0:0	8	.
water	42:42	0:0	8	0
arg	42:45	42:82	7	-bark_width*PSY_3GPP_THR_SPREAD_LOW
op	42:45	0:0	8	-
water	42:46	0:0	8	bark_width
op	42:57	0:0	8	*
water	42:59	0:0	8	PSY_3GPP_THR_SPREAD_LOW
water	42:83	0:0	6	;
water	43:12	0:0	6	coeff
op	43:17	0:0	6	->
water	43:19	0:0	6	spread_hi
op	43:29	0:0	6	[
water	43:30	0:0	6	0
op	43:31	0:0	6	]
op	43:33	0:0	6	=
call	43:35	43:81	6	pow
arg	43:39	43:43	7	10.0
water	43:39	0:0	8	10
op	43:41	0:0	8	.
water	43:42	0:0	8	0
arg	43:45	43:81	7	-bark_width*PSY_3GPP_THR_SPREAD_HI
op	43:45	0:0	8	-
water	43:46	0:0	8	bark_width
op	43:57	0:0	8	*
water	43:59	0:0	8	PSY_3GPP_THR_SPREAD_HI
water	43:82	0:0	6	;
water	44:12	0:0	6	coeff
op	44:17	0:0	6	->
water	44:19	0:0	6	spread_low
op	44:29	0:0	6	[
water	44:30	0:0	6	1
op	44:31	0:0	6	]
op	44:33	0:0	6	=
call	44:35	44:72	6	pow
arg	44:39	44:43	7	10.0
water	44:39	0:0	8	10
op	44:41	0:0	8	.
water	44:42	0:0	8	0
arg	44:45	44:72	7	-bark_width*en_spread_low
op	44:45	0:0	8	-
water	44:46	0:0	8	bark_width
op	44:57	0:0	8	*
water	44:59	0:0	8	en_spread_low
water	44:73	0:0	6	;
water	45:12	0:0	6	coeff
op	45:17	0:0	6	->
water	45:19	0:0	6	spread_hi
op	45:29	0:0	6	[
water	45:30	0:0	6	1
op	45:31	0:0	6	]
op	45:33	0:0	6	=
call	45:35	45:71	6	pow
arg	45:39	45:43	7	10.0
water	45:39	0:0	8	10
op	45:41	0:0	8	.
water	45:42	0:0	8	0
arg	45:45	45:71	7	-bark_width*en_spread_hi
op	45:45	0:0	8	-
water	45:46	0:0	8	bark_width
op	45:57	0:0	8	*
water	45:59	0:0	8	en_spread_hi
water	45:72	0:0	6	;
water	46:12	0:0	6	pe_min
op	46:19	0:0	6	=
water	46:21	0:0	6	bark_pe
op	46:29	0:0	6	*
water	46:31	0:0	6	bark_width
water	46:41	0:0	6	;
water	47:12	0:0	6	minsnr
op	47:19	0:0	6	=
call	47:21	47:48	6	exp2
arg	47:26	47:48	7	pe_min/band_sizes[g]
water	47:26	0:0	8	pe_min
op	47:33	0:0	8	/
water	47:35	0:0	8	band_sizes
op	47:45	0:0	8	[
water	47:46	0:0	8	g
op	47:47	0:0	8	]
op	47:50	0:0	6	-
water	47:52	0:0	6	1
op	47:53	0:0	6	.
water	47:54	0:0	6	5
water	47:55	0:0	6	f
water	47:56	0:0	6	;
water	48:12	0:0	6	coeff
op	48:17	0:0	6	->
water	48:19	0:0	6	min_snr
op	48:27	0:0	6	=
call	48:29	48:78	6	av_clipf
arg	48:38	48:51	7	1.0f/minsnr
water	48:38	0:0	8	1
op	48:39	0:0	8	.
water	48:40	0:0	8	0
water	48:41	0:0	8	f
op	48:43	0:0	8	/
water	48:45	0:0	8	minsnr
arg	48:53	48:65	7	PSY_SNR_25DB
water	48:53	0:0	8	PSY_SNR_25DB
arg	48:67	48:78	7	PSY_SNR_1DB
water	48:67	0:0	8	PSY_SNR_1DB
water	48:79	0:0	6	;
water	49:8	0:0	6	}
water	50:8	0:0	4	start
op	50:14	0:0	4	=
water	50:16	0:0	4	0
water	50:17	0:0	4	;
for	51:8	57:8	4	(g = 0 ;g < ctx -> num_bands [ j ];g ++)
forinit	51:13	51:18	5	g = 0 ;
water	51:13	0:0	6	g
op	51:15	0:0	6	=
water	51:17	0:0	6	0
water	51:18	0:0	6	;
cond	51:20	51:40	5	g < ctx -> num_bands [ j ]
water	51:20	0:0	6	g
op	51:22	0:0	6	<
water	51:24	0:0	6	ctx
op	51:27	0:0	6	->
water	51:29	0:0	6	num_bands
op	51:38	0:0	6	[
water	51:39	0:0	6	j
op	51:40	0:0	6	]
forexpr	51:43	51:44	5	g ++
water	51:43	0:0	6	g
op	51:44	0:0	6	++
stmts	51:48	57:8	5	
water	51:48	0:0	6	{
water	52:12	0:0	6	minscale
op	52:21	0:0	6	=
call	52:23	52:61	6	ath
arg	52:27	52:52	7	start*line_to_frequency
water	52:27	0:0	8	start
op	52:33	0:0	8	*
water	52:35	0:0	8	line_to_frequency
arg	52:54	52:61	7	ATH_ADD
water	52:54	0:0	8	ATH_ADD
water	52:62	0:0	6	;
for	53:12	54:89	6	(i = 1 ;i < band_sizes [ g ];i ++)
forinit	53:17	53:22	7	i = 1 ;
water	53:17	0:0	8	i
op	53:19	0:0	8	=
water	53:21	0:0	8	1
water	53:22	0:0	8	;
cond	53:24	53:40	7	i < band_sizes [ g ]
water	53:24	0:0	8	i
op	53:26	0:0	8	<
water	53:28	0:0	8	band_sizes
op	53:38	0:0	8	[
water	53:39	0:0	8	g
op	53:40	0:0	8	]
forexpr	53:43	53:44	7	i ++
water	53:43	0:0	8	i
op	53:44	0:0	8	++
stmts	54:16	54:89	7	
water	54:16	0:0	8	minscale
op	54:25	0:0	8	=
call	54:27	54:88	8	FFMIN
arg	54:33	54:41	9	minscale
water	54:33	0:0	10	minscale
arg	54:43	54:88	9	ath((start+i)*line_to_frequency,ATH_ADD)
call	54:43	54:87	10	ath
arg	54:47	54:78	11	(start+i)*line_to_frequency
water	54:47	0:0	12	(
water	54:48	0:0	12	start
op	54:54	0:0	12	+
water	54:56	0:0	12	i
water	54:57	0:0	12	)
op	54:59	0:0	12	*
water	54:61	0:0	12	line_to_frequency
arg	54:80	54:87	11	ATH_ADD
water	54:80	0:0	12	ATH_ADD
water	54:89	0:0	8	;
water	55:12	0:0	6	coeffs
op	55:18	0:0	6	[
water	55:19	0:0	6	g
op	55:20	0:0	6	]
op	55:21	0:0	6	.
water	55:22	0:0	6	ath
op	55:26	0:0	6	=
water	55:28	0:0	6	minscale
op	55:37	0:0	6	-
water	55:39	0:0	6	minath
water	55:45	0:0	6	;
water	56:12	0:0	6	start
op	56:18	0:0	6	+=
water	56:21	0:0	6	band_sizes
op	56:31	0:0	6	[
water	56:32	0:0	6	g
op	56:33	0:0	6	]
water	56:34	0:0	6	;
water	57:8	0:0	6	}
water	58:4	0:0	4	}
water	59:4	0:0	2	pctx
op	59:8	0:0	2	->
water	59:10	0:0	2	ch
op	59:13	0:0	2	=
call	59:15	59:75	2	av_mallocz_array
arg	59:32	59:52	3	ctx->avctx->channels
water	59:32	0:0	4	ctx
op	59:35	0:0	4	->
water	59:37	0:0	4	avctx
op	59:42	0:0	4	->
water	59:44	0:0	4	channels
arg	59:54	59:75	3	sizeof(AacPsyChannel)
op	59:54	0:0	4	sizeof
water	59:60	0:0	4	(
water	59:61	0:0	4	AacPsyChannel
water	59:74	0:0	4	)
water	59:76	0:0	2	;
if	60:4	63:4	2	(! pctx -> ch)
cond	60:8	60:15	3	! pctx -> ch
op	60:8	0:0	4	!
water	60:9	0:0	4	pctx
op	60:13	0:0	4	->
water	60:15	0:0	4	ch
stmts	60:19	63:4	3	
water	60:19	0:0	4	{
call	61:8	61:38	4	av_freep
arg	61:17	61:38	5	&ctx->model_priv_data
op	61:17	0:0	6	&
water	61:18	0:0	6	ctx
op	61:21	0:0	6	->
water	61:23	0:0	6	model_priv_data
water	61:39	0:0	4	;
return	62:8	62:30	4	AVERROR(ENOMEM)
call	62:15	62:29	5	AVERROR
arg	62:23	62:29	6	ENOMEM
water	62:23	0:0	7	ENOMEM
water	63:4	0:0	4	}
call	64:4	64:37	2	lame_window_init
arg	64:21	64:25	3	pctx
water	64:21	0:0	4	pctx
arg	64:27	64:37	3	ctx->avctx
water	64:27	0:0	4	ctx
op	64:30	0:0	4	->
water	64:32	0:0	4	avctx
water	64:38	0:0	2	;
return	65:4	65:12	2	0
water	65:11	0:0	3	0
