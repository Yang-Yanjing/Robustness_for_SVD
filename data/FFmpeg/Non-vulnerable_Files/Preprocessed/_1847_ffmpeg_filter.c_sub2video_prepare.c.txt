func	1:0	35:0	0	static int	sub2video_prepare
params	1:28	0:0	1	
param	1:29	1:45	2	InputStream *	ist
param	1:47	1:67	2	InputFilter *	ifilter
stmnts	0:0	34:12	1	
decl	3:4	3:60	2	AVFormatContext	*avf
op	3:25	0:0	2	=
water	3:27	0:0	2	input_files
op	3:38	0:0	2	[
water	3:39	0:0	2	ist
op	3:42	0:0	2	->
water	3:44	0:0	2	file_index
op	3:54	0:0	2	]
op	3:55	0:0	2	->
water	3:57	0:0	2	ctx
decl	4:4	4:15	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:15	2	int	w
water	4:12	0:0	2	,
decl	4:4	4:15	2	int	h
water	8:4	0:0	2	w
op	8:6	0:0	2	=
water	8:8	0:0	2	ifilter
op	8:15	0:0	2	->
water	8:17	0:0	2	width
water	8:22	0:0	2	;
water	9:4	0:0	2	h
op	9:6	0:0	2	=
water	9:8	0:0	2	ifilter
op	9:15	0:0	2	->
water	9:17	0:0	2	height
water	9:23	0:0	2	;
if	10:4	22:4	2	(! ( w && h ))
cond	10:8	10:16	3	! ( w && h )
op	10:8	0:0	4	!
water	10:9	0:0	4	(
water	10:10	0:0	4	w
op	10:12	0:0	4	&&
water	10:15	0:0	4	h
water	10:16	0:0	4	)
stmts	10:19	22:4	3	
water	10:19	0:0	4	{
for	11:8	16:8	4	(i = 0 ;i < avf -> nb_streams;i ++)
forinit	11:13	11:18	5	i = 0 ;
water	11:13	0:0	6	i
op	11:15	0:0	6	=
water	11:17	0:0	6	0
water	11:18	0:0	6	;
cond	11:20	11:29	5	i < avf -> nb_streams
water	11:20	0:0	6	i
op	11:22	0:0	6	<
water	11:24	0:0	6	avf
op	11:27	0:0	6	->
water	11:29	0:0	6	nb_streams
forexpr	11:41	11:42	5	i ++
water	11:41	0:0	6	i
op	11:42	0:0	6	++
stmts	11:46	16:8	5	
water	11:46	0:0	6	{
if	12:12	15:12	6	(avf -> streams [ i ] -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	12:16	12:57	7	avf -> streams [ i ] -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO
water	12:16	0:0	8	avf
op	12:19	0:0	8	->
water	12:21	0:0	8	streams
op	12:28	0:0	8	[
water	12:29	0:0	8	i
op	12:30	0:0	8	]
op	12:31	0:0	8	->
water	12:33	0:0	8	codecpar
op	12:41	0:0	8	->
water	12:43	0:0	8	codec_type
op	12:54	0:0	8	==
water	12:57	0:0	8	AVMEDIA_TYPE_VIDEO
stmts	12:77	15:12	7	
water	12:77	0:0	8	{
water	13:16	0:0	8	w
op	13:18	0:0	8	=
call	13:20	13:61	8	FFMAX
arg	13:26	13:27	9	w
water	13:26	0:0	10	w
arg	13:29	13:61	9	avf->streams[i]->codecpar->width
water	13:29	0:0	10	avf
op	13:32	0:0	10	->
water	13:34	0:0	10	streams
op	13:41	0:0	10	[
water	13:42	0:0	10	i
op	13:43	0:0	10	]
op	13:44	0:0	10	->
water	13:46	0:0	10	codecpar
op	13:54	0:0	10	->
water	13:56	0:0	10	width
water	13:62	0:0	8	;
water	14:16	0:0	8	h
op	14:18	0:0	8	=
call	14:20	14:62	8	FFMAX
arg	14:26	14:27	9	h
water	14:26	0:0	10	h
arg	14:29	14:62	9	avf->streams[i]->codecpar->height
water	14:29	0:0	10	avf
op	14:32	0:0	10	->
water	14:34	0:0	10	streams
op	14:41	0:0	10	[
water	14:42	0:0	10	i
op	14:43	0:0	10	]
op	14:44	0:0	10	->
water	14:46	0:0	10	codecpar
op	14:54	0:0	10	->
water	14:56	0:0	10	height
water	14:63	0:0	8	;
water	15:12	0:0	8	}
water	16:8	0:0	6	}
if	17:8	20:8	4	(! ( w && h ))
cond	17:12	17:20	5	! ( w && h )
op	17:12	0:0	6	!
water	17:13	0:0	6	(
water	17:14	0:0	6	w
op	17:16	0:0	6	&&
water	17:19	0:0	6	h
water	17:20	0:0	6	)
stmts	17:23	20:8	5	
water	17:23	0:0	6	{
water	18:12	0:0	6	w
op	18:14	0:0	6	=
call	18:16	18:28	6	FFMAX
arg	18:22	18:23	7	w
water	18:22	0:0	8	w
arg	18:25	18:28	7	720
water	18:25	0:0	8	720
water	18:29	0:0	6	;
water	19:12	0:0	6	h
op	19:14	0:0	6	=
call	19:16	19:28	6	FFMAX
arg	19:22	19:23	7	h
water	19:22	0:0	8	h
arg	19:25	19:28	7	576
water	19:25	0:0	8	576
water	19:29	0:0	6	;
water	20:8	0:0	6	}
call	21:8	21:72	4	av_log
arg	21:15	21:18	5	avf
water	21:15	0:0	6	avf
arg	21:20	21:31	5	AV_LOG_INFO
water	21:20	0:0	6	AV_LOG_INFO
arg	21:33	21:66	5	"sub2video: using %dx%d canvas\n"
water	21:33	0:0	6	"sub2video: using %dx%d canvas\n"
arg	21:68	21:69	5	w
water	21:68	0:0	6	w
arg	21:71	21:72	5	h
water	21:71	0:0	6	h
water	21:73	0:0	4	;
water	22:4	0:0	4	}
water	23:4	0:0	2	ist
op	23:7	0:0	2	->
water	23:9	0:0	2	sub2video
op	23:18	0:0	2	.
water	23:19	0:0	2	w
op	23:21	0:0	2	=
water	23:23	0:0	2	ifilter
op	23:30	0:0	2	->
water	23:32	0:0	2	width
op	23:39	0:0	2	=
water	23:41	0:0	2	w
water	23:42	0:0	2	;
water	24:4	0:0	2	ist
op	24:7	0:0	2	->
water	24:9	0:0	2	sub2video
op	24:18	0:0	2	.
water	24:19	0:0	2	h
op	24:21	0:0	2	=
water	24:23	0:0	2	ifilter
op	24:30	0:0	2	->
water	24:32	0:0	2	height
op	24:39	0:0	2	=
water	24:41	0:0	2	h
water	24:42	0:0	2	;
water	25:4	0:0	2	ifilter
op	25:11	0:0	2	->
water	25:13	0:0	2	width
op	25:20	0:0	2	=
water	25:22	0:0	2	ist
op	25:25	0:0	2	->
water	25:27	0:0	2	dec_ctx
op	25:34	0:0	2	->
water	25:36	0:0	2	width
water	25:43	0:0	2	?
water	25:45	0:0	2	ist
op	25:48	0:0	2	->
water	25:50	0:0	2	dec_ctx
op	25:57	0:0	2	->
water	25:59	0:0	2	width
water	25:66	0:0	2	:
water	25:68	0:0	2	ist
op	25:71	0:0	2	->
water	25:73	0:0	2	sub2video
op	25:82	0:0	2	.
water	25:83	0:0	2	w
water	25:84	0:0	2	;
water	26:4	0:0	2	ifilter
op	26:11	0:0	2	->
water	26:13	0:0	2	height
op	26:20	0:0	2	=
water	26:22	0:0	2	ist
op	26:25	0:0	2	->
water	26:27	0:0	2	dec_ctx
op	26:34	0:0	2	->
water	26:36	0:0	2	height
water	26:43	0:0	2	?
water	26:45	0:0	2	ist
op	26:48	0:0	2	->
water	26:50	0:0	2	dec_ctx
op	26:57	0:0	2	->
water	26:59	0:0	2	height
water	26:66	0:0	2	:
water	26:68	0:0	2	ist
op	26:71	0:0	2	->
water	26:73	0:0	2	sub2video
op	26:82	0:0	2	.
water	26:83	0:0	2	h
water	26:84	0:0	2	;
water	29:4	0:0	2	ifilter
op	29:11	0:0	2	->
water	29:13	0:0	2	format
op	29:20	0:0	2	=
water	29:22	0:0	2	AV_PIX_FMT_RGB32
water	29:38	0:0	2	;
water	30:4	0:0	2	ist
op	30:7	0:0	2	->
water	30:9	0:0	2	sub2video
op	30:18	0:0	2	.
water	30:19	0:0	2	frame
op	30:25	0:0	2	=
call	30:27	30:42	2	av_frame_alloc
water	30:43	0:0	2	;
if	31:4	32:30	2	(! ist -> sub2video . frame)
cond	31:8	31:24	3	! ist -> sub2video . frame
op	31:8	0:0	4	!
water	31:9	0:0	4	ist
op	31:12	0:0	4	->
water	31:14	0:0	4	sub2video
op	31:23	0:0	4	.
water	31:24	0:0	4	frame
stmts	32:8	32:30	3	
return	32:8	32:30	4	AVERROR(ENOMEM)
call	32:15	32:29	5	AVERROR
arg	32:23	32:29	6	ENOMEM
water	32:23	0:0	7	ENOMEM
water	33:4	0:0	2	ist
op	33:7	0:0	2	->
water	33:9	0:0	2	sub2video
op	33:18	0:0	2	.
water	33:19	0:0	2	last_pts
op	33:28	0:0	2	=
water	33:30	0:0	2	INT64_MIN
water	33:39	0:0	2	;
return	34:4	34:12	2	0
water	34:11	0:0	3	0
