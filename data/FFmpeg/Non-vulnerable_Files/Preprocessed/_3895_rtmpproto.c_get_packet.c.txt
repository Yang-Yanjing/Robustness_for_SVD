func	1:0	75:0	0	static int	get_packet
params	1:21	0:0	1	
param	1:22	1:35	2	URLContext *	s
param	1:37	1:51	2	int	for_header
stmnts	0:0	74:4	1	
decl	3:4	3:34	2	RTMPContext	*rt
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:11	2	int	ret
if	5:4	6:26	2	(rt -> state == STATE_STOPPED)
cond	5:8	5:21	3	rt -> state == STATE_STOPPED
water	5:8	0:0	4	rt
op	5:10	0:0	4	->
water	5:12	0:0	4	state
op	5:18	0:0	4	==
water	5:21	0:0	4	STATE_STOPPED
stmts	6:8	6:26	3	
return	6:8	6:26	4	AVERROR_EOF
water	6:15	0:0	5	AVERROR_EOF
for	7:4	74:4	2	(;;)
forinit	7:9	7:9	3	;
water	7:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	7:13	74:4	3	
water	7:13	0:0	4	{
decl	8:8	8:31	4	RTMPPacket	rpkt
op	8:24	0:0	4	=
water	8:26	0:0	4	{
water	8:28	0:0	4	0
water	8:30	0:0	4	}
if	9:8	17:8	4	(( ret =ff_rtmp_packet_read (rt -> stream ,& rpkt ,rt -> in_chunk_size ,& rt -> prev_pkt [ 0 ] ,& rt -> nb_prev_pkt [ 0 ] ) ) <= 0)
cond	9:12	11:64	5	( ret =ff_rtmp_packet_read (rt -> stream ,& rpkt ,rt -> in_chunk_size ,& rt -> prev_pkt [ 0 ] ,& rt -> nb_prev_pkt [ 0 ] ) ) <= 0
water	9:12	0:0	6	(
water	9:13	0:0	6	ret
op	9:17	0:0	6	=
call	9:19	11:58	6	ff_rtmp_packet_read
arg	9:39	9:49	7	rt->stream
water	9:39	0:0	8	rt
op	9:41	0:0	8	->
water	9:43	0:0	8	stream
arg	9:51	9:56	7	&rpkt
op	9:51	0:0	8	&
water	9:52	0:0	8	rpkt
arg	10:39	10:56	7	rt->in_chunk_size
water	10:39	0:0	8	rt
op	10:41	0:0	8	->
water	10:43	0:0	8	in_chunk_size
arg	10:58	10:74	7	&rt->prev_pkt[0]
op	10:58	0:0	8	&
water	10:59	0:0	8	rt
op	10:61	0:0	8	->
water	10:63	0:0	8	prev_pkt
op	10:71	0:0	8	[
water	10:72	0:0	8	0
op	10:73	0:0	8	]
arg	11:39	11:58	7	&rt->nb_prev_pkt[0]
op	11:39	0:0	8	&
water	11:40	0:0	8	rt
op	11:42	0:0	8	->
water	11:44	0:0	8	nb_prev_pkt
op	11:55	0:0	8	[
water	11:56	0:0	8	0
op	11:57	0:0	8	]
water	11:59	0:0	6	)
op	11:61	0:0	6	<=
water	11:64	0:0	6	0
stmts	11:67	17:8	5	
water	11:67	0:0	6	{
if	12:12	14:12	6	(ret == 0)
cond	12:16	12:23	7	ret == 0
water	12:16	0:0	8	ret
op	12:20	0:0	8	==
water	12:23	0:0	8	0
stmts	12:26	14:12	7	
water	12:26	0:0	8	{
return	13:16	13:38	8	AVERROR(EAGAIN)
call	13:23	13:37	9	AVERROR
arg	13:31	13:37	10	EAGAIN
water	13:31	0:0	11	EAGAIN
water	14:12	0:0	8	}
else	14:14	16:12	6
stmts	14:19	16:12	7	
water	14:19	0:0	8	{
return	15:16	15:35	8	AVERROR(EIO)
call	15:23	15:34	9	AVERROR
arg	15:31	15:34	10	EIO
water	15:31	0:0	11	EIO
water	16:12	0:0	8	}
water	17:8	0:0	6	}
water	19:8	0:0	4	rt
op	19:10	0:0	4	->
water	19:12	0:0	4	last_timestamp
op	19:27	0:0	4	=
water	19:29	0:0	4	rpkt
op	19:33	0:0	4	.
water	19:34	0:0	4	timestamp
water	19:43	0:0	4	;
water	20:8	0:0	4	rt
op	20:10	0:0	4	->
water	20:12	0:0	4	bytes_read
op	20:23	0:0	4	+=
water	20:26	0:0	4	ret
water	20:29	0:0	4	;
if	21:8	26:8	4	(rt -> bytes_read - rt -> last_bytes_read > rt -> client_report_size)
cond	21:12	21:55	5	rt -> bytes_read - rt -> last_bytes_read > rt -> client_report_size
water	21:12	0:0	6	rt
op	21:14	0:0	6	->
water	21:16	0:0	6	bytes_read
op	21:27	0:0	6	-
water	21:29	0:0	6	rt
op	21:31	0:0	6	->
water	21:33	0:0	6	last_bytes_read
op	21:49	0:0	6	>
water	21:51	0:0	6	rt
op	21:53	0:0	6	->
water	21:55	0:0	6	client_report_size
stmts	21:75	26:8	5	
water	21:75	0:0	6	{
call	22:12	22:65	6	av_log
arg	22:19	22:20	7	s
water	22:19	0:0	8	s
arg	22:22	22:34	7	AV_LOG_DEBUG
water	22:22	0:0	8	AV_LOG_DEBUG
arg	22:36	22:65	7	"Sending bytes read report\n"
water	22:36	0:0	8	"Sending bytes read report\n"
water	22:66	0:0	6	;
if	23:12	24:26	6	(( ret =gen_bytes_read (s ,rt ,rpkt . timestamp + 1 ) ) < 0)
cond	23:16	23:68	7	( ret =gen_bytes_read (s ,rt ,rpkt . timestamp + 1 ) ) < 0
water	23:16	0:0	8	(
water	23:17	0:0	8	ret
op	23:21	0:0	8	=
call	23:23	23:63	8	gen_bytes_read
arg	23:38	23:39	9	s
water	23:38	0:0	10	s
arg	23:41	23:43	9	rt
water	23:41	0:0	10	rt
arg	23:45	23:63	9	rpkt.timestamp+1
water	23:45	0:0	10	rpkt
op	23:49	0:0	10	.
water	23:50	0:0	10	timestamp
op	23:60	0:0	10	+
water	23:62	0:0	10	1
water	23:64	0:0	8	)
op	23:66	0:0	8	<
water	23:68	0:0	8	0
stmts	24:16	24:26	7	
return	24:16	24:26	8	ret
water	24:23	0:0	9	ret
water	25:12	0:0	6	rt
op	25:14	0:0	6	->
water	25:16	0:0	6	last_bytes_read
op	25:32	0:0	6	=
water	25:34	0:0	6	rt
op	25:36	0:0	6	->
water	25:38	0:0	6	bytes_read
water	25:48	0:0	6	;
water	26:8	0:0	6	}
water	27:8	0:0	4	ret
op	27:12	0:0	4	=
call	27:14	27:44	4	rtmp_parse_result
arg	27:32	27:33	5	s
water	27:32	0:0	6	s
arg	27:35	27:37	5	rt
water	27:35	0:0	6	rt
arg	27:39	27:44	5	&rpkt
op	27:39	0:0	6	&
water	27:40	0:0	6	rpkt
water	27:45	0:0	4	;
if	31:8	36:8	4	(rt -> state == STATE_SEEKING)
cond	31:12	31:25	5	rt -> state == STATE_SEEKING
water	31:12	0:0	6	rt
op	31:14	0:0	6	->
water	31:16	0:0	6	state
op	31:22	0:0	6	==
water	31:25	0:0	6	STATE_SEEKING
stmts	31:40	36:8	5	
water	31:40	0:0	6	{
call	32:12	32:40	6	ff_rtmp_packet_destroy
arg	32:35	32:40	7	&rpkt
op	32:35	0:0	8	&
water	32:36	0:0	8	rpkt
water	32:41	0:0	6	;
continue	35:12	35:20	6	
water	36:8	0:0	6	}
if	37:8	40:8	4	(ret < 0)
cond	37:12	37:18	5	ret < 0
water	37:12	0:0	6	ret
op	37:16	0:0	6	<
water	37:18	0:0	6	0
stmts	37:21	40:8	5	
water	37:21	0:0	6	{
call	38:12	38:40	6	ff_rtmp_packet_destroy
arg	38:35	38:40	7	&rpkt
op	38:35	0:0	8	&
water	38:36	0:0	8	rpkt
water	38:41	0:0	6	;
return	39:12	39:22	6	ret
water	39:19	0:0	7	ret
water	40:8	0:0	6	}
if	41:8	44:8	4	(rt -> do_reconnect && for_header)
cond	41:12	41:32	5	rt -> do_reconnect && for_header
water	41:12	0:0	6	rt
op	41:14	0:0	6	->
water	41:16	0:0	6	do_reconnect
op	41:29	0:0	6	&&
water	41:32	0:0	6	for_header
stmts	41:44	44:8	5	
water	41:44	0:0	6	{
call	42:12	42:40	6	ff_rtmp_packet_destroy
arg	42:35	42:40	7	&rpkt
op	42:35	0:0	8	&
water	42:36	0:0	8	rpkt
water	42:41	0:0	6	;
return	43:12	43:20	6	0
water	43:19	0:0	7	0
water	44:8	0:0	6	}
if	45:8	48:8	4	(rt -> state == STATE_STOPPED)
cond	45:12	45:25	5	rt -> state == STATE_STOPPED
water	45:12	0:0	6	rt
op	45:14	0:0	6	->
water	45:16	0:0	6	state
op	45:22	0:0	6	==
water	45:25	0:0	6	STATE_STOPPED
stmts	45:40	48:8	5	
water	45:40	0:0	6	{
call	46:12	46:40	6	ff_rtmp_packet_destroy
arg	46:35	46:40	7	&rpkt
op	46:35	0:0	8	&
water	46:36	0:0	8	rpkt
water	46:41	0:0	6	;
return	47:12	47:30	6	AVERROR_EOF
water	47:19	0:0	7	AVERROR_EOF
water	48:8	0:0	6	}
if	49:8	55:8	4	(for_header && ( rt -> state == STATE_PLAYING || rt -> state == STATE_PUBLISHING || rt -> state == STATE_SENDING || rt -> state == STATE_RECEIVING ))
cond	49:12	52:55	5	for_header && ( rt -> state == STATE_PLAYING || rt -> state == STATE_PUBLISHING || rt -> state == STATE_SENDING || rt -> state == STATE_RECEIVING )
water	49:12	0:0	6	for_header
op	49:23	0:0	6	&&
water	49:26	0:0	6	(
water	49:27	0:0	6	rt
op	49:29	0:0	6	->
water	49:31	0:0	6	state
op	49:37	0:0	6	==
water	49:40	0:0	6	STATE_PLAYING
op	49:57	0:0	6	||
water	50:27	0:0	6	rt
op	50:29	0:0	6	->
water	50:31	0:0	6	state
op	50:37	0:0	6	==
water	50:40	0:0	6	STATE_PUBLISHING
op	50:57	0:0	6	||
water	51:27	0:0	6	rt
op	51:29	0:0	6	->
water	51:31	0:0	6	state
op	51:37	0:0	6	==
water	51:40	0:0	6	STATE_SENDING
op	51:57	0:0	6	||
water	52:27	0:0	6	rt
op	52:29	0:0	6	->
water	52:31	0:0	6	state
op	52:37	0:0	6	==
water	52:40	0:0	6	STATE_RECEIVING
water	52:55	0:0	6	)
stmts	52:58	55:8	5	
water	52:58	0:0	6	{
call	53:12	53:40	6	ff_rtmp_packet_destroy
arg	53:35	53:40	7	&rpkt
op	53:35	0:0	8	&
water	53:36	0:0	8	rpkt
water	53:41	0:0	6	;
return	54:12	54:20	6	0
water	54:19	0:0	7	0
water	55:8	0:0	6	}
if	56:8	59:8	4	(! rpkt . size || ! rt -> is_input)
cond	56:12	56:31	5	! rpkt . size || ! rt -> is_input
op	56:12	0:0	6	!
water	56:13	0:0	6	rpkt
op	56:17	0:0	6	.
water	56:18	0:0	6	size
op	56:23	0:0	6	||
op	56:26	0:0	6	!
water	56:27	0:0	6	rt
op	56:29	0:0	6	->
water	56:31	0:0	6	is_input
stmts	56:41	59:8	5	
water	56:41	0:0	6	{
call	57:12	57:40	6	ff_rtmp_packet_destroy
arg	57:35	57:40	7	&rpkt
op	57:35	0:0	8	&
water	57:36	0:0	8	rpkt
water	57:41	0:0	6	;
continue	58:12	58:20	6	
water	59:8	0:0	6	}
if	60:8	64:8	4	(rpkt . type == RTMP_PT_VIDEO || rpkt . type == RTMP_PT_AUDIO)
cond	60:12	60:55	5	rpkt . type == RTMP_PT_VIDEO || rpkt . type == RTMP_PT_AUDIO
water	60:12	0:0	6	rpkt
op	60:16	0:0	6	.
water	60:17	0:0	6	type
op	60:22	0:0	6	==
water	60:25	0:0	6	RTMP_PT_VIDEO
op	60:39	0:0	6	||
water	60:42	0:0	6	rpkt
op	60:46	0:0	6	.
water	60:47	0:0	6	type
op	60:52	0:0	6	==
water	60:55	0:0	6	RTMP_PT_AUDIO
stmts	60:70	64:8	5	
water	60:70	0:0	6	{
water	61:12	0:0	6	ret
op	61:16	0:0	6	=
call	61:18	61:46	6	append_flv_data
arg	61:34	61:36	7	rt
water	61:34	0:0	8	rt
arg	61:38	61:43	7	&rpkt
op	61:38	0:0	8	&
water	61:39	0:0	8	rpkt
arg	61:45	61:46	7	0
water	61:45	0:0	8	0
water	61:47	0:0	6	;
call	62:12	62:40	6	ff_rtmp_packet_destroy
arg	62:35	62:40	7	&rpkt
op	62:35	0:0	8	&
water	62:36	0:0	8	rpkt
water	62:41	0:0	6	;
return	63:12	63:22	6	ret
water	63:19	0:0	7	ret
water	64:8	0:0	6	}
else	64:10	68:8	4
stmts	64:15	68:8	5	
if	64:15	68:8	6	(rpkt . type == RTMP_PT_NOTIFY)
cond	64:19	64:32	7	rpkt . type == RTMP_PT_NOTIFY
water	64:19	0:0	8	rpkt
op	64:23	0:0	8	.
water	64:24	0:0	8	type
op	64:29	0:0	8	==
water	64:32	0:0	8	RTMP_PT_NOTIFY
stmts	64:48	68:8	7	
water	64:48	0:0	8	{
water	65:12	0:0	8	ret
op	65:16	0:0	8	=
call	65:18	65:40	8	handle_notify
arg	65:32	65:33	9	s
water	65:32	0:0	10	s
arg	65:35	65:40	9	&rpkt
op	65:35	0:0	10	&
water	65:36	0:0	10	rpkt
water	65:41	0:0	8	;
call	66:12	66:40	8	ff_rtmp_packet_destroy
arg	66:35	66:40	9	&rpkt
op	66:35	0:0	10	&
water	66:36	0:0	10	rpkt
water	66:41	0:0	8	;
return	67:12	67:22	8	ret
water	67:19	0:0	9	ret
water	68:8	0:0	8	}
else	68:10	72:8	4
stmts	68:15	72:8	5	
if	68:15	72:8	6	(rpkt . type == RTMP_PT_METADATA)
cond	68:19	68:32	7	rpkt . type == RTMP_PT_METADATA
water	68:19	0:0	8	rpkt
op	68:23	0:0	8	.
water	68:24	0:0	8	type
op	68:29	0:0	8	==
water	68:32	0:0	8	RTMP_PT_METADATA
stmts	68:50	72:8	7	
water	68:50	0:0	8	{
water	69:12	0:0	8	ret
op	69:16	0:0	8	=
call	69:18	69:43	8	handle_metadata
arg	69:34	69:36	9	rt
water	69:34	0:0	10	rt
arg	69:38	69:43	9	&rpkt
op	69:38	0:0	10	&
water	69:39	0:0	10	rpkt
water	69:44	0:0	8	;
call	70:12	70:40	8	ff_rtmp_packet_destroy
arg	70:35	70:40	9	&rpkt
op	70:35	0:0	10	&
water	70:36	0:0	10	rpkt
water	70:41	0:0	8	;
return	71:12	71:20	8	0
water	71:19	0:0	9	0
water	72:8	0:0	8	}
call	73:8	73:36	4	ff_rtmp_packet_destroy
arg	73:31	73:36	5	&rpkt
op	73:31	0:0	6	&
water	73:32	0:0	6	rpkt
water	73:37	0:0	4	;
water	74:4	0:0	4	}
