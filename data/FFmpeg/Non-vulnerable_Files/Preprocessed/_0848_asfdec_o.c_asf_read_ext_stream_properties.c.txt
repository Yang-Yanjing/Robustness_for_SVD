func	1:0	60:0	0	static int	asf_read_ext_stream_properties
params	1:41	0:0	1	
param	1:42	1:60	2	AVFormatContext *	s
param	1:62	1:85	2	const GUIDParseTable *	g
stmnts	0:0	59:12	1	
decl	3:4	3:34	2	ASFContext	*asf
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:26	2	AVStream	*st
op	5:20	0:0	2	=
water	5:22	0:0	2	NULL
decl	6:4	6:20	2	ff_asf_guid	guid
decl	7:4	7:54	2	uint16_t	nb_st_name
water	7:23	0:0	2	,
decl	7:4	7:54	2	uint16_t	nb_pay_exts
water	7:36	0:0	2	,
decl	7:4	7:54	2	uint16_t	st_num
water	7:44	0:0	2	,
decl	7:4	7:54	2	uint16_t	lang_idx
decl	8:4	8:14	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:14	2	int	ret
decl	9:4	9:20	2	uint32_t	bitrate
decl	10:4	10:49	2	uint64_t	start_time
water	10:23	0:0	2	,
decl	10:4	10:49	2	uint64_t	end_time
water	10:33	0:0	2	,
decl	10:4	10:49	2	uint64_t	time_per_frame
decl	11:4	11:33	2	uint64_t	size
op	11:18	0:0	2	=
call	11:20	11:32	3	avio_rl64
arg	11:30	11:32	4	pb
water	11:30	0:0	5	pb
water	12:4	0:0	2	start_time
op	12:15	0:0	2	=
call	12:17	12:29	2	avio_rl64
arg	12:27	12:29	3	pb
water	12:27	0:0	4	pb
water	12:30	0:0	2	;
water	13:4	0:0	2	end_time
op	13:15	0:0	2	=
call	13:17	13:29	2	avio_rl64
arg	13:27	13:29	3	pb
water	13:27	0:0	4	pb
water	13:30	0:0	2	;
water	14:4	0:0	2	bitrate
op	14:15	0:0	2	=
call	14:17	14:29	2	avio_rl32
arg	14:27	14:29	3	pb
water	14:27	0:0	4	pb
water	14:30	0:0	2	;
call	15:4	15:20	2	avio_skip
arg	15:14	15:16	3	pb
water	15:14	0:0	4	pb
arg	15:18	15:20	3	28
water	15:18	0:0	4	28
water	15:21	0:0	2	;
water	16:4	0:0	2	st_num
op	16:15	0:0	2	=
call	16:17	16:29	2	avio_rl16
arg	16:27	16:29	3	pb
water	16:27	0:0	4	pb
water	16:30	0:0	2	;
water	17:4	0:0	2	st_num
op	17:14	0:0	2	&=
water	17:17	0:0	2	ASF_STREAM_NUM
water	17:31	0:0	2	;
water	18:4	0:0	2	lang_idx
op	18:15	0:0	2	=
call	18:17	18:29	2	avio_rl16
arg	18:27	18:29	3	pb
water	18:27	0:0	4	pb
water	18:30	0:0	2	;
for	19:4	25:4	2	(i = 0 ;i < asf -> nb_streams;i ++)
forinit	19:9	19:14	3	i = 0 ;
water	19:9	0:0	4	i
op	19:11	0:0	4	=
water	19:13	0:0	4	0
water	19:14	0:0	4	;
cond	19:16	19:25	3	i < asf -> nb_streams
water	19:16	0:0	4	i
op	19:18	0:0	4	<
water	19:20	0:0	4	asf
op	19:23	0:0	4	->
water	19:25	0:0	4	nb_streams
forexpr	19:37	19:38	3	i ++
water	19:37	0:0	4	i
op	19:38	0:0	4	++
stmts	19:42	25:4	3	
water	19:42	0:0	4	{
if	20:8	24:8	4	(st_num == asf -> asf_st [ i ] -> stream_index)
cond	20:12	20:38	5	st_num == asf -> asf_st [ i ] -> stream_index
water	20:12	0:0	6	st_num
op	20:19	0:0	6	==
water	20:22	0:0	6	asf
op	20:25	0:0	6	->
water	20:27	0:0	6	asf_st
op	20:33	0:0	6	[
water	20:34	0:0	6	i
op	20:35	0:0	6	]
op	20:36	0:0	6	->
water	20:38	0:0	6	stream_index
stmts	20:52	24:8	5	
water	20:52	0:0	6	{
water	21:12	0:0	6	st
op	21:37	0:0	6	=
water	21:39	0:0	6	s
op	21:40	0:0	6	->
water	21:42	0:0	6	streams
op	21:49	0:0	6	[
water	21:50	0:0	6	asf
op	21:53	0:0	6	->
water	21:55	0:0	6	asf_st
op	21:61	0:0	6	[
water	21:62	0:0	6	i
op	21:63	0:0	6	]
op	21:64	0:0	6	->
water	21:66	0:0	6	index
op	21:71	0:0	6	]
water	21:72	0:0	6	;
water	22:12	0:0	6	asf
op	22:15	0:0	6	->
water	22:17	0:0	6	asf_st
op	22:23	0:0	6	[
water	22:24	0:0	6	i
op	22:25	0:0	6	]
op	22:26	0:0	6	->
water	22:28	0:0	6	lang_idx
op	22:37	0:0	6	=
water	22:39	0:0	6	lang_idx
water	22:47	0:0	6	;
break	23:12	23:17	6	
water	24:8	0:0	6	}
water	25:4	0:0	4	}
water	26:4	0:0	2	time_per_frame
op	26:19	0:0	2	=
call	26:21	26:33	2	avio_rl64
arg	26:31	26:33	3	pb
water	26:31	0:0	4	pb
water	26:34	0:0	2	;
if	27:4	33:4	2	(st)
cond	27:8	27:8	3	st
water	27:8	0:0	4	st
stmts	27:12	33:4	3	
water	27:12	0:0	4	{
water	28:8	0:0	4	st
op	28:10	0:0	4	->
water	28:12	0:0	4	start_time
op	28:33	0:0	4	=
water	28:35	0:0	4	start_time
water	28:45	0:0	4	;
water	29:8	0:0	4	st
op	29:10	0:0	4	->
water	29:12	0:0	4	duration
op	29:33	0:0	4	=
water	29:35	0:0	4	end_time
op	29:44	0:0	4	-
water	29:46	0:0	4	start_time
water	29:56	0:0	4	;
water	30:8	0:0	4	st
op	30:10	0:0	4	->
water	30:12	0:0	4	codec
op	30:17	0:0	4	->
water	30:19	0:0	4	bit_rate
op	30:33	0:0	4	=
water	30:35	0:0	4	bitrate
water	30:42	0:0	4	;
water	31:8	0:0	4	st
op	31:10	0:0	4	->
water	31:12	0:0	4	avg_frame_rate
op	31:26	0:0	4	.
water	31:27	0:0	4	num
op	31:33	0:0	4	=
water	31:35	0:0	4	10000000
water	31:43	0:0	4	;
water	32:8	0:0	4	st
op	32:10	0:0	4	->
water	32:12	0:0	4	avg_frame_rate
op	32:26	0:0	4	.
water	32:27	0:0	4	den
op	32:33	0:0	4	=
water	32:35	0:0	4	time_per_frame
water	32:49	0:0	4	;
water	33:4	0:0	4	}
water	34:4	0:0	2	nb_st_name
op	34:15	0:0	2	=
call	34:17	34:29	2	avio_rl16
arg	34:27	34:29	3	pb
water	34:27	0:0	4	pb
water	34:30	0:0	2	;
water	35:4	0:0	2	nb_pay_exts
op	35:18	0:0	2	=
call	35:20	35:32	2	avio_rl16
arg	35:30	35:32	3	pb
water	35:30	0:0	4	pb
water	35:33	0:0	2	;
for	36:4	41:4	2	(i = 0 ;i < nb_st_name;i ++)
forinit	36:9	36:14	3	i = 0 ;
water	36:9	0:0	4	i
op	36:11	0:0	4	=
water	36:13	0:0	4	0
water	36:14	0:0	4	;
cond	36:16	36:20	3	i < nb_st_name
water	36:16	0:0	4	i
op	36:18	0:0	4	<
water	36:20	0:0	4	nb_st_name
forexpr	36:32	36:33	3	i ++
water	36:32	0:0	4	i
op	36:33	0:0	4	++
stmts	36:37	41:4	3	
water	36:37	0:0	4	{
decl	37:8	37:20	4	uint16_t	len
call	38:8	38:20	4	avio_rl16
arg	38:18	38:20	5	pb
water	38:18	0:0	6	pb
water	38:21	0:0	4	;
water	39:8	0:0	4	len
op	39:12	0:0	4	=
call	39:14	39:26	4	avio_rl16
arg	39:24	39:26	5	pb
water	39:24	0:0	6	pb
water	39:27	0:0	4	;
call	40:8	40:25	4	avio_skip
arg	40:18	40:20	5	pb
water	40:18	0:0	6	pb
arg	40:22	40:25	5	len
water	40:22	0:0	6	len
water	40:26	0:0	4	;
water	41:4	0:0	4	}
for	42:4	48:4	2	(i = 0 ;i < nb_pay_exts;i ++)
forinit	42:9	42:14	3	i = 0 ;
water	42:9	0:0	4	i
op	42:11	0:0	4	=
water	42:13	0:0	4	0
water	42:14	0:0	4	;
cond	42:16	42:20	3	i < nb_pay_exts
water	42:16	0:0	4	i
op	42:18	0:0	4	<
water	42:20	0:0	4	nb_pay_exts
forexpr	42:33	42:34	3	i ++
water	42:33	0:0	4	i
op	42:34	0:0	4	++
stmts	42:38	48:4	3	
water	42:38	0:0	4	{
decl	43:8	43:20	4	uint32_t	len
call	44:8	44:24	4	avio_skip
arg	44:18	44:20	5	pb
water	44:18	0:0	6	pb
arg	44:22	44:24	5	16
water	44:22	0:0	6	16
water	44:25	0:0	4	;
call	45:8	45:23	4	avio_skip
arg	45:18	45:20	5	pb
water	45:18	0:0	6	pb
arg	45:22	45:23	5	2
water	45:22	0:0	6	2
water	45:24	0:0	4	;
water	46:8	0:0	4	len
op	46:12	0:0	4	=
call	46:14	46:26	4	avio_rl32
arg	46:24	46:26	5	pb
water	46:24	0:0	6	pb
water	46:27	0:0	4	;
call	47:8	47:25	4	avio_skip
arg	47:18	47:20	5	pb
water	47:18	0:0	6	pb
arg	47:22	47:25	5	len
water	47:22	0:0	6	len
water	47:26	0:0	4	;
water	48:4	0:0	4	}
if	49:4	52:4	2	(( ret =ff_get_guid (pb ,& guid ) ) < 0)
cond	49:8	49:41	3	( ret =ff_get_guid (pb ,& guid ) ) < 0
water	49:8	0:0	4	(
water	49:9	0:0	4	ret
op	49:13	0:0	4	=
call	49:15	49:36	4	ff_get_guid
arg	49:27	49:29	5	pb
water	49:27	0:0	6	pb
arg	49:31	49:36	5	&guid
op	49:31	0:0	6	&
water	49:32	0:0	6	guid
water	49:37	0:0	4	)
op	49:39	0:0	4	<
water	49:41	0:0	4	0
stmts	49:44	52:4	3	
water	49:44	0:0	4	{
call	50:8	50:44	4	align_position
arg	50:23	50:25	5	pb
water	50:23	0:0	6	pb
arg	50:27	50:38	5	asf->offset
water	50:27	0:0	6	asf
op	50:30	0:0	6	->
water	50:32	0:0	6	offset
arg	50:40	50:44	5	size
water	50:40	0:0	6	size
water	50:45	0:0	4	;
return	51:8	51:16	4	0
water	51:15	0:0	5	0
water	52:4	0:0	4	}
water	53:4	0:0	2	g
op	53:6	0:0	2	=
call	53:8	53:22	2	find_guid
arg	53:18	53:22	3	guid
water	53:18	0:0	4	guid
water	53:23	0:0	2	;
if	54:4	57:4	2	(g && ! (strcmp (g -> name ,"Stream Properties" ) ))
cond	54:8	54:51	3	g && ! (strcmp (g -> name ,"Stream Properties" ) )
water	54:8	0:0	4	g
op	54:10	0:0	4	&&
op	54:13	0:0	4	!
water	54:14	0:0	4	(
call	54:15	54:50	4	strcmp
arg	54:22	54:29	5	g->name
water	54:22	0:0	6	g
op	54:23	0:0	6	->
water	54:25	0:0	6	name
arg	54:31	54:50	5	"Stream Properties"
water	54:31	0:0	6	"Stream Properties"
water	54:51	0:0	4	)
stmts	54:54	57:4	3	
water	54:54	0:0	4	{
if	55:8	56:22	4	(( ret =g -> read_object (s ,g ) ) < 0)
cond	55:12	55:43	5	( ret =g -> read_object (s ,g ) ) < 0
water	55:12	0:0	6	(
water	55:13	0:0	6	ret
op	55:17	0:0	6	=
call	55:19	55:38	6	g->read_object
arg	55:34	55:35	7	s
water	55:34	0:0	8	s
arg	55:37	55:38	7	g
water	55:37	0:0	8	g
water	55:39	0:0	6	)
op	55:41	0:0	6	<
water	55:43	0:0	6	0
stmts	56:12	56:22	5	
return	56:12	56:22	6	ret
water	56:19	0:0	7	ret
water	57:4	0:0	4	}
call	58:4	58:40	2	align_position
arg	58:19	58:21	3	pb
water	58:19	0:0	4	pb
arg	58:23	58:34	3	asf->offset
water	58:23	0:0	4	asf
op	58:26	0:0	4	->
water	58:28	0:0	4	offset
arg	58:36	58:40	3	size
water	58:36	0:0	4	size
water	58:41	0:0	2	;
return	59:4	59:12	2	0
water	59:11	0:0	3	0
