func	1:0	102:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	101:19	1	
decl	3:4	3:40	2	unsigned int	p
water	3:18	0:0	2	,
decl	3:4	3:40	2	unsigned int	i
water	3:21	0:0	2	,
decl	3:4	3:40	2	unsigned int	type
water	3:27	0:0	2	,
decl	3:4	3:40	2	unsigned int	size
water	3:33	0:0	2	,
decl	3:4	3:40	2	unsigned int	retry
decl	4:4	4:26	2	AVProbeData	pd
op	4:19	0:0	2	=
water	4:21	0:0	2	{
water	4:23	0:0	2	0
water	4:25	0:0	2	}
decl	5:4	5:15	2	AVLFG	state
decl	6:4	6:20	2	PutBitContext	pb
decl	7:4	7:25	2	int	retry_count
op	7:19	0:0	2	=
water	7:21	0:0	2	4097
decl	8:4	8:24	2	int	max_size
op	8:17	0:0	2	=
water	8:19	0:0	2	65537
decl	9:4	9:9	2	int	j
for	10:4	23:4	2	(j = i = 1 ;i < argc;i ++)
forinit	10:9	10:18	3	j = i = 1 ;
water	10:9	0:0	4	j
op	10:11	0:0	4	=
water	10:13	0:0	4	i
op	10:15	0:0	4	=
water	10:17	0:0	4	1
water	10:18	0:0	4	;
cond	10:20	10:22	3	i < argc
water	10:20	0:0	4	i
op	10:21	0:0	4	<
water	10:22	0:0	4	argc
forexpr	10:28	10:29	3	i ++
water	10:28	0:0	4	i
op	10:29	0:0	4	++
stmts	10:33	23:4	3	
water	10:33	0:0	4	{
if	11:8	13:8	4	(!strcmp (argv [ i ] ,"-f" ) && i + 1 < argc && ! single_format)
cond	11:12	11:51	5	!strcmp (argv [ i ] ,"-f" ) && i + 1 < argc && ! single_format
op	11:12	0:0	6	!
call	11:13	11:33	6	strcmp
arg	11:20	11:27	7	argv[i]
water	11:20	0:0	8	argv
op	11:24	0:0	8	[
water	11:25	0:0	8	i
op	11:26	0:0	8	]
arg	11:29	11:33	7	"-f"
water	11:29	0:0	8	"-f"
op	11:35	0:0	6	&&
water	11:38	0:0	6	i
op	11:39	0:0	6	+
water	11:40	0:0	6	1
op	11:41	0:0	6	<
water	11:42	0:0	6	argc
op	11:47	0:0	6	&&
op	11:50	0:0	6	!
water	11:51	0:0	6	single_format
stmts	11:66	13:8	5	
water	11:66	0:0	6	{
water	12:12	0:0	6	single_format
op	12:26	0:0	6	=
water	12:28	0:0	6	argv
op	12:32	0:0	6	[
op	12:33	0:0	6	++
water	12:35	0:0	6	i
op	12:36	0:0	6	]
water	12:37	0:0	6	;
water	13:8	0:0	6	}
else	13:10	16:8	4
stmts	13:15	16:8	5	
if	13:15	16:8	6	(read_int (argv [ i ] ) > 0 && j == 1)
cond	13:19	13:47	7	read_int (argv [ i ] ) > 0 && j == 1
call	13:19	13:35	8	read_int
arg	13:28	13:35	9	argv[i]
water	13:28	0:0	10	argv
op	13:32	0:0	10	[
water	13:33	0:0	10	i
op	13:34	0:0	10	]
op	13:36	0:0	8	>
water	13:37	0:0	8	0
op	13:39	0:0	8	&&
water	13:42	0:0	8	j
op	13:44	0:0	8	==
water	13:47	0:0	8	1
stmts	13:50	16:8	7	
water	13:50	0:0	8	{
water	14:12	0:0	8	retry_count
op	14:24	0:0	8	=
call	14:26	14:42	8	read_int
arg	14:35	14:42	9	argv[i]
water	14:35	0:0	10	argv
op	14:39	0:0	10	[
water	14:40	0:0	10	i
op	14:41	0:0	10	]
water	14:43	0:0	8	;
water	15:12	0:0	8	j
op	15:13	0:0	8	++
water	15:15	0:0	8	;
water	16:8	0:0	8	}
else	16:10	19:8	4
stmts	16:15	19:8	5	
if	16:15	19:8	6	(read_int (argv [ i ] ) > 0 && j == 2)
cond	16:19	16:47	7	read_int (argv [ i ] ) > 0 && j == 2
call	16:19	16:35	8	read_int
arg	16:28	16:35	9	argv[i]
water	16:28	0:0	10	argv
op	16:32	0:0	10	[
water	16:33	0:0	10	i
op	16:34	0:0	10	]
op	16:36	0:0	8	>
water	16:37	0:0	8	0
op	16:39	0:0	8	&&
water	16:42	0:0	8	j
op	16:44	0:0	8	==
water	16:47	0:0	8	2
stmts	16:50	19:8	7	
water	16:50	0:0	8	{
water	17:12	0:0	8	max_size
op	17:21	0:0	8	=
call	17:23	17:39	8	read_int
arg	17:32	17:39	9	argv[i]
water	17:32	0:0	10	argv
op	17:36	0:0	10	[
water	17:37	0:0	10	i
op	17:38	0:0	10	]
water	17:40	0:0	8	;
water	18:12	0:0	8	j
op	18:13	0:0	8	++
water	18:15	0:0	8	;
water	19:8	0:0	8	}
else	19:10	22:8	4
stmts	19:15	22:8	5	
water	19:15	0:0	6	{
call	20:12	20:90	6	fprintf
arg	20:20	20:26	7	stderr
water	20:20	0:0	8	stderr
arg	20:28	20:90	7	"probetest [-f <input format>] [<retry_count> [<max_size>]]\n"
water	20:28	0:0	8	"probetest [-f <input format>] [<retry_count> [<max_size>]]\n"
water	20:91	0:0	6	;
return	21:12	21:20	6	1
water	21:19	0:0	7	1
water	22:8	0:0	6	}
water	23:4	0:0	4	}
if	24:4	27:4	2	(max_size > 1000000000 U / 8)
cond	24:8	24:31	3	max_size > 1000000000 U / 8
water	24:8	0:0	4	max_size
op	24:17	0:0	4	>
water	24:19	0:0	4	1000000000
water	24:29	0:0	4	U
op	24:30	0:0	4	/
water	24:31	0:0	4	8
stmts	24:34	27:4	3	
water	24:34	0:0	4	{
call	25:8	25:50	4	fprintf
arg	25:16	25:22	5	stderr
water	25:16	0:0	6	stderr
arg	25:24	25:50	5	"max_size out of bounds\n"
water	25:24	0:0	6	"max_size out of bounds\n"
water	25:51	0:0	4	;
return	26:8	26:16	4	1
water	26:15	0:0	5	1
water	27:4	0:0	4	}
if	28:4	31:4	2	(retry_count > 1000000000 U)
cond	28:8	28:32	3	retry_count > 1000000000 U
water	28:8	0:0	4	retry_count
op	28:20	0:0	4	>
water	28:22	0:0	4	1000000000
water	28:32	0:0	4	U
stmts	28:35	31:4	3	
water	28:35	0:0	4	{
call	29:8	29:53	4	fprintf
arg	29:16	29:22	5	stderr
water	29:16	0:0	6	stderr
arg	29:24	29:53	5	"retry_count out of bounds\n"
water	29:24	0:0	6	"retry_count out of bounds\n"
water	29:54	0:0	4	;
return	30:8	30:16	4	1
water	30:15	0:0	5	1
water	31:4	0:0	4	}
call	32:4	32:25	2	avcodec_register_all
water	32:26	0:0	2	;
call	33:4	33:20	2	av_register_all
water	33:21	0:0	2	;
call	34:4	34:34	2	av_lfg_init
arg	34:16	34:22	3	&state
op	34:16	0:0	4	&
water	34:17	0:0	4	state
arg	34:24	34:34	3	0xdeadbeef
water	34:24	0:0	4	0
water	34:25	0:0	4	xdeadbeef
water	34:35	0:0	2	;
water	35:4	0:0	2	pd
op	35:6	0:0	2	.
water	35:7	0:0	2	buf
op	35:11	0:0	2	=
water	35:13	0:0	2	NULL
water	35:17	0:0	2	;
for	36:4	98:4	2	(size = 1 ;size < max_size;size *= 2)
forinit	36:9	36:17	3	size = 1 ;
water	36:9	0:0	4	size
op	36:14	0:0	4	=
water	36:16	0:0	4	1
water	36:17	0:0	4	;
cond	36:19	36:26	3	size < max_size
water	36:19	0:0	4	size
op	36:24	0:0	4	<
water	36:26	0:0	4	max_size
forexpr	36:36	36:44	3	size *= 2
water	36:36	0:0	4	size
op	36:41	0:0	4	*=
water	36:44	0:0	4	2
stmts	36:47	98:4	3	
water	36:47	0:0	4	{
water	37:8	0:0	4	pd
op	37:10	0:0	4	.
water	37:11	0:0	4	buf_size
op	37:20	0:0	4	=
water	37:22	0:0	4	size
water	37:26	0:0	4	;
water	38:8	0:0	4	pd
op	38:10	0:0	4	.
water	38:11	0:0	4	buf
op	38:20	0:0	4	=
call	38:22	38:68	4	av_realloc
arg	38:33	38:39	5	pd.buf
water	38:33	0:0	6	pd
op	38:35	0:0	6	.
water	38:36	0:0	6	buf
arg	38:41	38:68	5	size+AVPROBE_PADDING_SIZE
water	38:41	0:0	6	size
op	38:46	0:0	6	+
water	38:48	0:0	6	AVPROBE_PADDING_SIZE
water	38:69	0:0	4	;
water	39:8	0:0	4	pd
op	39:10	0:0	4	.
water	39:11	0:0	4	filename
op	39:20	0:0	4	=
water	39:22	0:0	4	""
water	39:24	0:0	4	;
if	40:8	43:8	4	(! pd . buf)
cond	40:12	40:16	5	! pd . buf
op	40:12	0:0	6	!
water	40:13	0:0	6	pd
op	40:15	0:0	6	.
water	40:16	0:0	6	buf
stmts	40:21	43:8	5	
water	40:21	0:0	6	{
call	41:12	41:45	6	fprintf
arg	41:20	41:26	7	stderr
water	41:20	0:0	8	stderr
arg	41:28	41:45	7	"out of memory\n"
water	41:28	0:0	8	"out of memory\n"
water	41:46	0:0	6	;
return	42:12	42:20	6	1
water	42:19	0:0	7	1
water	43:8	0:0	6	}
call	44:8	44:53	4	memset
arg	44:15	44:21	5	pd.buf
water	44:15	0:0	6	pd
op	44:17	0:0	6	.
water	44:18	0:0	6	buf
arg	44:23	44:24	5	0
water	44:23	0:0	6	0
arg	44:26	44:53	5	size+AVPROBE_PADDING_SIZE
water	44:26	0:0	6	size
op	44:31	0:0	6	+
water	44:33	0:0	6	AVPROBE_PADDING_SIZE
water	44:54	0:0	4	;
call	45:8	45:49	4	fprintf
arg	45:16	45:22	5	stderr
water	45:16	0:0	6	stderr
arg	45:24	45:43	5	"testing size=%d\n"
water	45:24	0:0	6	"testing size=%d\n"
arg	45:45	45:49	5	size
water	45:45	0:0	6	size
water	45:50	0:0	4	;
for	46:8	97:8	4	(retry = 0 ;retry < retry_count;retry +=FFMAX (size ,32 ))
forinit	46:13	46:22	5	retry = 0 ;
water	46:13	0:0	6	retry
op	46:19	0:0	6	=
water	46:21	0:0	6	0
water	46:22	0:0	6	;
cond	46:24	46:32	5	retry < retry_count
water	46:24	0:0	6	retry
op	46:30	0:0	6	<
water	46:32	0:0	6	retry_count
forexpr	46:45	46:68	5	retry +=FFMAX (size ,32 )
water	46:45	0:0	6	retry
op	46:51	0:0	6	+=
call	46:54	46:68	6	FFMAX
arg	46:60	46:64	7	size
water	46:60	0:0	8	size
arg	46:66	46:68	7	32
water	46:66	0:0	8	32
stmts	46:71	97:8	5	
water	46:71	0:0	6	{
for	47:12	96:12	6	(type = 0 ;type < 4;type ++)
forinit	47:17	47:25	7	type = 0 ;
water	47:17	0:0	8	type
op	47:22	0:0	8	=
water	47:24	0:0	8	0
water	47:25	0:0	8	;
cond	47:27	47:34	7	type < 4
water	47:27	0:0	8	type
op	47:32	0:0	8	<
water	47:34	0:0	8	4
forexpr	47:37	47:41	7	type ++
water	47:37	0:0	8	type
op	47:41	0:0	8	++
stmts	47:45	96:12	7	
water	47:45	0:0	8	{
for	48:16	95:16	8	(p = 0 ;p < 4096;p ++)
forinit	48:21	48:26	9	p = 0 ;
water	48:21	0:0	10	p
op	48:23	0:0	10	=
water	48:25	0:0	10	0
water	48:26	0:0	10	;
cond	48:28	48:32	9	p < 4096
water	48:28	0:0	10	p
op	48:30	0:0	10	<
water	48:32	0:0	10	4096
forexpr	48:38	48:39	9	p ++
water	48:38	0:0	10	p
op	48:39	0:0	10	++
stmts	48:43	95:16	9	
water	48:43	0:0	10	{
water	49:20	0:0	10	unsigned
water	49:29	0:0	10	hist
op	49:34	0:0	10	=
water	49:36	0:0	10	0
water	49:37	0:0	10	;
call	50:20	50:51	10	init_put_bits
arg	50:34	50:37	11	&pb
op	50:34	0:0	12	&
water	50:35	0:0	12	pb
arg	50:39	50:45	11	pd.buf
water	50:39	0:0	12	pd
op	50:41	0:0	12	.
water	50:42	0:0	12	buf
arg	50:47	50:51	11	size
water	50:47	0:0	12	size
water	50:52	0:0	10	;
switch	51:20	92:20	10	(type)
cond	51:28	51:28	11	type
water	51:28	0:0	12	type
stmts	51:34	92:20	11	
water	51:34	0:0	12	{
label	52:20	52:26	12	case 0 :
for	53:24	54:89	12	(i = 0 ;i < size * 8;i ++)
forinit	53:29	53:34	13	i = 0 ;
water	53:29	0:0	14	i
op	53:31	0:0	14	=
water	53:33	0:0	14	0
water	53:34	0:0	14	;
cond	53:36	53:47	13	i < size * 8
water	53:36	0:0	14	i
op	53:38	0:0	14	<
water	53:40	0:0	14	size
op	53:45	0:0	14	*
water	53:47	0:0	14	8
forexpr	53:50	53:51	13	i ++
water	53:50	0:0	14	i
op	53:51	0:0	14	++
stmts	54:28	54:89	13	
call	54:28	54:88	14	put_bits
arg	54:37	54:40	15	&pb
op	54:37	0:0	16	&
water	54:38	0:0	16	pb
arg	54:42	54:43	15	1
water	54:42	0:0	16	1
arg	54:45	54:88	15	(av_lfg_get(&state)&0xFFFFFFFF)>p<<20
water	54:45	0:0	16	(
call	54:46	54:63	16	av_lfg_get
arg	54:57	54:63	17	&state
op	54:57	0:0	18	&
water	54:58	0:0	18	state
op	54:65	0:0	16	&
water	54:67	0:0	16	0
water	54:68	0:0	16	xFFFFFFFF
water	54:77	0:0	16	)
op	54:79	0:0	16	>
water	54:81	0:0	16	p
op	54:83	0:0	16	<<
water	54:86	0:0	16	20
water	54:89	0:0	14	;
break	55:24	55:29	12	
label	56:20	56:26	12	case 1 :
for	57:24	62:24	12	(i = 0 ;i < size * 8;i ++)
forinit	57:29	57:34	13	i = 0 ;
water	57:29	0:0	14	i
op	57:31	0:0	14	=
water	57:33	0:0	14	0
water	57:34	0:0	14	;
cond	57:36	57:47	13	i < size * 8
water	57:36	0:0	14	i
op	57:38	0:0	14	<
water	57:40	0:0	14	size
op	57:45	0:0	14	*
water	57:47	0:0	14	8
forexpr	57:50	57:51	13	i ++
water	57:50	0:0	14	i
op	57:51	0:0	14	++
stmts	57:55	62:24	13	
water	57:55	0:0	14	{
decl	58:28	58:72	14	unsigned int	p2
op	58:44	0:0	14	=
water	58:46	0:0	14	hist
water	58:51	0:0	14	?
water	58:53	0:0	14	p
op	58:55	0:0	14	&
water	58:57	0:0	14	0
water	58:58	0:0	14	x3F
water	58:62	0:0	14	:
water	58:64	0:0	14	(
water	58:65	0:0	14	p
op	58:67	0:0	14	>>
water	58:70	0:0	14	6
water	58:71	0:0	14	)
decl	59:28	59:90	14	unsigned int	v
op	59:44	0:0	14	=
water	59:46	0:0	14	(
call	59:47	59:64	15	av_lfg_get
arg	59:58	59:64	16	&state
op	59:58	0:0	17	&
water	59:59	0:0	17	state
op	59:66	0:0	14	&
water	59:68	0:0	14	0
water	59:69	0:0	14	xFFFFFFFF
water	59:78	0:0	14	)
op	59:80	0:0	14	>
water	59:82	0:0	14	p2
op	59:85	0:0	14	<<
water	59:88	0:0	14	26
call	60:28	60:46	14	put_bits
arg	60:37	60:40	15	&pb
op	60:37	0:0	16	&
water	60:38	0:0	16	pb
arg	60:42	60:43	15	1
water	60:42	0:0	16	1
arg	60:45	60:46	15	v
water	60:45	0:0	16	v
water	60:47	0:0	14	;
water	61:28	0:0	14	hist
op	61:33	0:0	14	=
water	61:35	0:0	14	v
water	61:36	0:0	14	;
water	62:24	0:0	14	}
break	63:24	63:29	12	
label	64:20	64:26	12	case 2 :
for	65:24	70:24	12	(i = 0 ;i < size * 8;i ++)
forinit	65:29	65:34	13	i = 0 ;
water	65:29	0:0	14	i
op	65:31	0:0	14	=
water	65:33	0:0	14	0
water	65:34	0:0	14	;
cond	65:36	65:47	13	i < size * 8
water	65:36	0:0	14	i
op	65:38	0:0	14	<
water	65:40	0:0	14	size
op	65:45	0:0	14	*
water	65:47	0:0	14	8
forexpr	65:50	65:51	13	i ++
water	65:50	0:0	14	i
op	65:51	0:0	14	++
stmts	65:55	70:24	13	
water	65:55	0:0	14	{
decl	66:28	66:67	14	unsigned int	p2
op	66:44	0:0	14	=
water	66:46	0:0	14	(
water	66:47	0:0	14	p
op	66:49	0:0	14	>>
water	66:52	0:0	14	(
water	66:53	0:0	14	hist
op	66:58	0:0	14	*
water	66:60	0:0	14	3
water	66:61	0:0	14	)
water	66:62	0:0	14	)
op	66:64	0:0	14	&
water	66:66	0:0	14	7
decl	67:28	67:90	14	unsigned int	v
op	67:44	0:0	14	=
water	67:46	0:0	14	(
call	67:47	67:64	15	av_lfg_get
arg	67:58	67:64	16	&state
op	67:58	0:0	17	&
water	67:59	0:0	17	state
op	67:66	0:0	14	&
water	67:68	0:0	14	0
water	67:69	0:0	14	xFFFFFFFF
water	67:78	0:0	14	)
op	67:80	0:0	14	>
water	67:82	0:0	14	p2
op	67:85	0:0	14	<<
water	67:88	0:0	14	29
call	68:28	68:46	14	put_bits
arg	68:37	68:40	15	&pb
op	68:37	0:0	16	&
water	68:38	0:0	16	pb
arg	68:42	68:43	15	1
water	68:42	0:0	16	1
arg	68:45	68:46	15	v
water	68:45	0:0	16	v
water	68:47	0:0	14	;
water	69:28	0:0	14	hist
op	69:33	0:0	14	=
water	69:35	0:0	14	(
water	69:36	0:0	14	2
op	69:38	0:0	14	*
water	69:40	0:0	14	hist
op	69:45	0:0	14	+
water	69:47	0:0	14	v
water	69:48	0:0	14	)
op	69:50	0:0	14	&
water	69:52	0:0	14	3
water	69:53	0:0	14	;
water	70:24	0:0	14	}
break	71:24	71:29	12	
label	72:20	72:26	12	case 3 :
for	73:24	91:24	12	(i = 0 ;i < size;i ++)
forinit	73:29	73:34	13	i = 0 ;
water	73:29	0:0	14	i
op	73:31	0:0	14	=
water	73:33	0:0	14	0
water	73:34	0:0	14	;
cond	73:36	73:40	13	i < size
water	73:36	0:0	14	i
op	73:38	0:0	14	<
water	73:40	0:0	14	size
forexpr	73:46	73:47	13	i ++
water	73:46	0:0	14	i
op	73:47	0:0	14	++
stmts	73:51	91:24	13	
water	73:51	0:0	14	{
decl	74:28	74:37	14	int	c
op	74:34	0:0	14	=
water	74:36	0:0	14	0
while	75:28	89:28	14	(p & 63)
cond	75:35	75:39	15	p & 63
water	75:35	0:0	16	p
op	75:37	0:0	16	&
water	75:39	0:0	16	63
stmts	75:43	89:28	15	
water	75:43	0:0	16	{
water	76:32	0:0	16	c
op	76:34	0:0	16	=
water	76:36	0:0	16	(
call	76:37	76:54	16	av_lfg_get
arg	76:48	76:54	17	&state
op	76:48	0:0	18	&
water	76:49	0:0	18	state
op	76:56	0:0	16	&
water	76:58	0:0	16	0
water	76:59	0:0	16	xFFFFFFFF
water	76:68	0:0	16	)
op	76:70	0:0	16	>>
water	76:73	0:0	16	24
water	76:75	0:0	16	;
if	77:32	78:41	16	(c >= 'a' && c <= 'z' && ( p & 1 ))
cond	77:36	77:66	17	c >= 'a' && c <= 'z' && ( p & 1 )
water	77:36	0:0	18	c
op	77:38	0:0	18	>=
water	77:41	0:0	18	'a'
op	77:45	0:0	18	&&
water	77:48	0:0	18	c
op	77:50	0:0	18	<=
water	77:53	0:0	18	'z'
op	77:57	0:0	18	&&
water	77:60	0:0	18	(
water	77:61	0:0	18	p
op	77:63	0:0	18	&
water	77:65	0:0	18	1
water	77:66	0:0	18	)
stmts	78:36	78:41	17	
break	78:36	78:41	18	
else	79:32	80:41	16
stmts	79:37	80:41	17	
if	79:37	80:41	18	(c >= 'A' && c <= 'Z' && ( p & 2 ))
cond	79:41	79:71	19	c >= 'A' && c <= 'Z' && ( p & 2 )
water	79:41	0:0	20	c
op	79:43	0:0	20	>=
water	79:46	0:0	20	'A'
op	79:50	0:0	20	&&
water	79:53	0:0	20	c
op	79:55	0:0	20	<=
water	79:58	0:0	20	'Z'
op	79:62	0:0	20	&&
water	79:65	0:0	20	(
water	79:66	0:0	20	p
op	79:68	0:0	20	&
water	79:70	0:0	20	2
water	79:71	0:0	20	)
stmts	80:36	80:41	19	
break	80:36	80:41	20	
else	81:32	82:41	16
stmts	81:37	82:41	17	
if	81:37	82:41	18	(c >= '0' && c <= '9' && ( p & 4 ))
cond	81:41	81:71	19	c >= '0' && c <= '9' && ( p & 4 )
water	81:41	0:0	20	c
op	81:43	0:0	20	>=
water	81:46	0:0	20	'0'
op	81:50	0:0	20	&&
water	81:53	0:0	20	c
op	81:55	0:0	20	<=
water	81:58	0:0	20	'9'
op	81:62	0:0	20	&&
water	81:65	0:0	20	(
water	81:66	0:0	20	p
op	81:68	0:0	20	&
water	81:70	0:0	20	4
water	81:71	0:0	20	)
stmts	82:36	82:41	19	
break	82:36	82:41	20	
else	83:32	84:41	16
stmts	83:37	84:41	17	
if	83:37	84:41	18	(c == ' ' && ( p & 8 ))
cond	83:41	83:59	19	c == ' ' && ( p & 8 )
water	83:41	0:0	20	c
op	83:43	0:0	20	==
water	83:46	0:0	20	' '
op	83:50	0:0	20	&&
water	83:53	0:0	20	(
water	83:54	0:0	20	p
op	83:56	0:0	20	&
water	83:58	0:0	20	8
water	83:59	0:0	20	)
stmts	84:36	84:41	19	
break	84:36	84:41	20	
else	85:32	86:41	16
stmts	85:37	86:41	17	
if	85:37	86:41	18	(c == 0 && ( p & 16 ))
cond	85:41	85:58	19	c == 0 && ( p & 16 )
water	85:41	0:0	20	c
op	85:43	0:0	20	==
water	85:46	0:0	20	0
op	85:48	0:0	20	&&
water	85:51	0:0	20	(
water	85:52	0:0	20	p
op	85:54	0:0	20	&
water	85:56	0:0	20	16
water	85:58	0:0	20	)
stmts	86:36	86:41	19	
break	86:36	86:41	20	
else	87:32	88:41	16
stmts	87:37	88:41	17	
if	87:37	88:41	18	(c == 1 && ( p & 32 ))
cond	87:41	87:58	19	c == 1 && ( p & 32 )
water	87:41	0:0	20	c
op	87:43	0:0	20	==
water	87:46	0:0	20	1
op	87:48	0:0	20	&&
water	87:51	0:0	20	(
water	87:52	0:0	20	p
op	87:54	0:0	20	&
water	87:56	0:0	20	32
water	87:58	0:0	20	)
stmts	88:36	88:41	19	
break	88:36	88:41	20	
water	89:28	0:0	16	}
water	90:28	0:0	14	pd
op	90:30	0:0	14	.
water	90:31	0:0	14	buf
op	90:34	0:0	14	[
water	90:35	0:0	14	i
op	90:36	0:0	14	]
op	90:38	0:0	14	=
water	90:40	0:0	14	c
water	90:41	0:0	14	;
water	91:24	0:0	14	}
water	92:20	0:0	12	}
call	93:20	93:38	10	flush_put_bits
arg	93:35	93:38	11	&pb
op	93:35	0:0	12	&
water	93:36	0:0	12	pb
water	93:39	0:0	10	;
call	94:20	94:44	10	probe
arg	94:26	94:29	11	&pd
op	94:26	0:0	12	&
water	94:27	0:0	12	pd
arg	94:31	94:35	11	type
water	94:31	0:0	12	type
arg	94:37	94:38	11	p
water	94:37	0:0	12	p
arg	94:40	94:44	11	size
water	94:40	0:0	12	size
water	94:45	0:0	10	;
water	95:16	0:0	10	}
water	96:12	0:0	8	}
water	97:8	0:0	6	}
water	98:4	0:0	4	}
if	99:4	100:21	2	(AV_READ_TIME ( ))
cond	99:7	99:20	3	AV_READ_TIME ( )
call	99:7	99:20	4	AV_READ_TIME
stmts	100:8	100:21	3	
call	100:8	100:20	4	print_times
water	100:21	0:0	4	;
return	101:4	101:19	2	failures
water	101:11	0:0	3	failures
