func	1:0	59:0	0	static int	query_formats
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
stmnts	0:0	58:48	1	
decl	3:4	3:35	2	HistogramContext	*h
op	3:24	0:0	2	=
water	3:26	0:0	2	ctx
op	3:29	0:0	2	->
water	3:31	0:0	2	priv
decl	4:4	4:38	2	const enum AVPixelFormat	*pix_fmts
decl	5:4	5:30	2	AVFilterFormats	*fmts_list
switch	6:4	54:4	2	(h -> mode)
cond	6:12	6:15	3	h -> mode
water	6:12	0:0	4	h
op	6:13	0:0	4	->
water	6:15	0:0	4	mode
stmts	6:21	54:4	3	
water	6:21	0:0	4	{
label	7:4	7:22	4	case MODE_WAVEFORM :
water	8:8	0:0	4	pix_fmts
op	8:17	0:0	4	=
water	8:19	0:0	4	waveform_pix_fmts
water	8:36	0:0	4	;
break	9:8	9:13	4	
label	10:4	10:20	4	case MODE_LEVELS :
water	11:4	0:0	4	{
decl	12:8	12:29	4	AVFilterFormats	*avff
decl	13:8	13:38	4	const AVPixFmtDescriptor	*desc
decl	14:8	14:46	4	const enum AVPixelFormat	*out_pix_fmts
decl	15:8	15:24	4	int	rgb
water	15:15	0:0	4	,
decl	15:8	15:24	4	int	i
water	15:18	0:0	4	,
decl	15:8	15:24	4	int	bits
if	16:8	19:8	4	(! ctx -> inputs [ 0 ] -> in_formats || ! ctx -> inputs [ 0 ] -> in_formats -> nb_formats)
cond	16:12	17:41	5	! ctx -> inputs [ 0 ] -> in_formats || ! ctx -> inputs [ 0 ] -> in_formats -> nb_formats
op	16:12	0:0	6	!
water	16:13	0:0	6	ctx
op	16:16	0:0	6	->
water	16:18	0:0	6	inputs
op	16:24	0:0	6	[
water	16:25	0:0	6	0
op	16:26	0:0	6	]
op	16:27	0:0	6	->
water	16:29	0:0	6	in_formats
op	16:40	0:0	6	||
op	17:12	0:0	6	!
water	17:13	0:0	6	ctx
op	17:16	0:0	6	->
water	17:18	0:0	6	inputs
op	17:24	0:0	6	[
water	17:25	0:0	6	0
op	17:26	0:0	6	]
op	17:27	0:0	6	->
water	17:29	0:0	6	in_formats
op	17:39	0:0	6	->
water	17:41	0:0	6	nb_formats
stmts	17:53	19:8	5	
water	17:53	0:0	6	{
return	18:12	18:34	6	AVERROR(EAGAIN)
call	18:19	18:33	7	AVERROR
arg	18:27	18:33	8	EAGAIN
water	18:27	0:0	9	EAGAIN
water	19:8	0:0	6	}
if	20:8	21:97	4	(! ctx -> inputs [ 0 ] -> out_formats)
cond	20:12	20:29	5	! ctx -> inputs [ 0 ] -> out_formats
op	20:12	0:0	6	!
water	20:13	0:0	6	ctx
op	20:16	0:0	6	->
water	20:18	0:0	6	inputs
op	20:24	0:0	6	[
water	20:25	0:0	6	0
op	20:26	0:0	6	]
op	20:27	0:0	6	->
water	20:29	0:0	6	out_formats
stmts	21:12	21:97	5	
call	21:12	21:96	6	ff_formats_ref
arg	21:27	21:66	7	ff_make_format_list(levels_in_pix_fmts)
call	21:27	21:65	8	ff_make_format_list
arg	21:47	21:65	9	levels_in_pix_fmts
water	21:47	0:0	10	levels_in_pix_fmts
arg	21:68	21:96	7	&ctx->inputs[0]->out_formats
op	21:68	0:0	8	&
water	21:69	0:0	8	ctx
op	21:72	0:0	8	->
water	21:74	0:0	8	inputs
op	21:80	0:0	8	[
water	21:81	0:0	8	0
op	21:82	0:0	8	]
op	21:83	0:0	8	->
water	21:85	0:0	8	out_formats
water	21:97	0:0	6	;
water	22:8	0:0	4	avff
op	22:13	0:0	4	=
water	22:15	0:0	4	ctx
op	22:18	0:0	4	->
water	22:20	0:0	4	inputs
op	22:26	0:0	4	[
water	22:27	0:0	4	0
op	22:28	0:0	4	]
op	22:29	0:0	4	->
water	22:31	0:0	4	in_formats
water	22:41	0:0	4	;
water	23:8	0:0	4	desc
op	23:13	0:0	4	=
call	23:15	23:51	4	av_pix_fmt_desc_get
arg	23:35	23:51	5	avff->formats[0]
water	23:35	0:0	6	avff
op	23:39	0:0	6	->
water	23:41	0:0	6	formats
op	23:48	0:0	6	[
water	23:49	0:0	6	0
op	23:50	0:0	6	]
water	23:52	0:0	4	;
water	24:8	0:0	4	rgb
op	24:12	0:0	4	=
water	24:14	0:0	4	desc
op	24:18	0:0	4	->
water	24:20	0:0	4	flags
op	24:26	0:0	4	&
water	24:28	0:0	4	AV_PIX_FMT_FLAG_RGB
water	24:47	0:0	4	;
water	25:8	0:0	4	bits
op	25:13	0:0	4	=
water	25:15	0:0	4	desc
op	25:19	0:0	4	->
water	25:21	0:0	4	comp
op	25:25	0:0	4	[
water	25:26	0:0	4	0
op	25:27	0:0	4	]
op	25:28	0:0	4	.
water	25:29	0:0	4	depth_minus1
water	25:41	0:0	4	;
for	26:8	31:8	4	(i = 1 ;i < avff -> nb_formats;i ++)
forinit	26:13	26:18	5	i = 1 ;
water	26:13	0:0	6	i
op	26:15	0:0	6	=
water	26:17	0:0	6	1
water	26:18	0:0	6	;
cond	26:20	26:30	5	i < avff -> nb_formats
water	26:20	0:0	6	i
op	26:22	0:0	6	<
water	26:24	0:0	6	avff
op	26:28	0:0	6	->
water	26:30	0:0	6	nb_formats
forexpr	26:42	26:43	5	i ++
water	26:42	0:0	6	i
op	26:43	0:0	6	++
stmts	26:47	31:8	5	
water	26:47	0:0	6	{
water	27:12	0:0	6	desc
op	27:17	0:0	6	=
call	27:19	27:55	6	av_pix_fmt_desc_get
arg	27:39	27:55	7	avff->formats[i]
water	27:39	0:0	8	avff
op	27:43	0:0	8	->
water	27:45	0:0	8	formats
op	27:52	0:0	8	[
water	27:53	0:0	8	i
op	27:54	0:0	8	]
water	27:56	0:0	6	;
if	28:12	30:38	6	(( rgb != ( desc -> flags & AV_PIX_FMT_FLAG_RGB ) ) || ( bits != desc -> comp [ 0 ] . depth_minus1 ))
cond	28:16	29:51	7	( rgb != ( desc -> flags & AV_PIX_FMT_FLAG_RGB ) ) || ( bits != desc -> comp [ 0 ] . depth_minus1 )
water	28:16	0:0	8	(
water	28:17	0:0	8	rgb
op	28:21	0:0	8	!=
water	28:24	0:0	8	(
water	28:25	0:0	8	desc
op	28:29	0:0	8	->
water	28:31	0:0	8	flags
op	28:37	0:0	8	&
water	28:39	0:0	8	AV_PIX_FMT_FLAG_RGB
water	28:58	0:0	8	)
water	28:59	0:0	8	)
op	28:61	0:0	8	||
water	29:16	0:0	8	(
water	29:17	0:0	8	bits
op	29:22	0:0	8	!=
water	29:25	0:0	8	desc
op	29:29	0:0	8	->
water	29:31	0:0	8	comp
op	29:35	0:0	8	[
water	29:36	0:0	8	0
op	29:37	0:0	8	]
op	29:38	0:0	8	.
water	29:39	0:0	8	depth_minus1
water	29:51	0:0	8	)
stmts	30:16	30:38	7	
return	30:16	30:38	8	AVERROR(EAGAIN)
call	30:23	30:37	9	AVERROR
arg	30:31	30:37	10	EAGAIN
water	30:31	0:0	11	EAGAIN
water	31:8	0:0	6	}
if	32:8	33:51	4	(rgb && bits == 7)
cond	32:12	32:27	5	rgb && bits == 7
water	32:12	0:0	6	rgb
op	32:16	0:0	6	&&
water	32:19	0:0	6	bits
op	32:24	0:0	6	==
water	32:27	0:0	6	7
stmts	33:12	33:51	5	
water	33:12	0:0	6	out_pix_fmts
op	33:25	0:0	6	=
water	33:27	0:0	6	levels_out_rgb8_pix_fmts
water	33:51	0:0	6	;
else	34:8	35:51	4
stmts	34:13	35:51	5	
if	34:13	35:51	6	(rgb && bits == 8)
cond	34:17	34:32	7	rgb && bits == 8
water	34:17	0:0	8	rgb
op	34:21	0:0	8	&&
water	34:24	0:0	8	bits
op	34:29	0:0	8	==
water	34:32	0:0	8	8
stmts	35:12	35:51	7	
water	35:12	0:0	8	out_pix_fmts
op	35:25	0:0	8	=
water	35:27	0:0	8	levels_out_rgb9_pix_fmts
water	35:51	0:0	8	;
else	36:8	37:52	4
stmts	36:13	37:52	5	
if	36:13	37:52	6	(rgb && bits == 9)
cond	36:17	36:32	7	rgb && bits == 9
water	36:17	0:0	8	rgb
op	36:21	0:0	8	&&
water	36:24	0:0	8	bits
op	36:29	0:0	8	==
water	36:32	0:0	8	9
stmts	37:12	37:52	7	
water	37:12	0:0	8	out_pix_fmts
op	37:25	0:0	8	=
water	37:27	0:0	8	levels_out_rgb10_pix_fmts
water	37:52	0:0	8	;
else	38:8	39:51	4
stmts	38:13	39:51	5	
if	38:13	39:51	6	(bits == 7)
cond	38:17	38:25	7	bits == 7
water	38:17	0:0	8	bits
op	38:22	0:0	8	==
water	38:25	0:0	8	7
stmts	39:12	39:51	7	
water	39:12	0:0	8	out_pix_fmts
op	39:25	0:0	8	=
water	39:27	0:0	8	levels_out_yuv8_pix_fmts
water	39:51	0:0	8	;
else	40:8	41:51	4
stmts	40:13	41:51	5	
if	40:13	41:51	6	(bits == 8)
cond	40:17	40:25	7	bits == 8
water	40:17	0:0	8	bits
op	40:22	0:0	8	==
water	40:25	0:0	8	8
stmts	41:12	41:51	7	
water	41:12	0:0	8	out_pix_fmts
op	41:25	0:0	8	=
water	41:27	0:0	8	levels_out_yuv9_pix_fmts
water	41:51	0:0	8	;
else	42:8	43:52	4
stmts	43:12	43:52	5	
water	43:12	0:0	6	out_pix_fmts
op	43:25	0:0	6	=
water	43:27	0:0	6	levels_out_yuv10_pix_fmts
water	43:52	0:0	6	;
call	44:8	44:86	4	ff_formats_ref
arg	44:23	44:56	5	ff_make_format_list(out_pix_fmts)
call	44:23	44:55	6	ff_make_format_list
arg	44:43	44:55	7	out_pix_fmts
water	44:43	0:0	8	out_pix_fmts
arg	44:58	44:86	5	&ctx->outputs[0]->in_formats
op	44:58	0:0	6	&
water	44:59	0:0	6	ctx
op	44:62	0:0	6	->
water	44:64	0:0	6	outputs
op	44:71	0:0	6	[
water	44:72	0:0	6	0
op	44:73	0:0	6	]
op	44:74	0:0	6	->
water	44:76	0:0	6	in_formats
water	44:87	0:0	4	;
return	45:8	45:16	4	0
water	45:15	0:0	5	0
water	46:4	0:0	4	}
break	47:8	47:13	4	
label	48:4	48:19	4	case MODE_COLOR :
label	49:4	49:20	4	case MODE_COLOR2 :
water	50:8	0:0	4	pix_fmts
op	50:17	0:0	4	=
water	50:19	0:0	4	color_pix_fmts
water	50:33	0:0	4	;
break	51:8	51:13	4	
label	52:4	52:11	4	default :
call	53:8	53:20	4	av_assert0
arg	53:19	53:20	5	0
water	53:19	0:0	6	0
water	53:21	0:0	4	;
water	54:4	0:0	4	}
water	55:4	0:0	2	fmts_list
op	55:14	0:0	2	=
call	55:16	55:44	2	ff_make_format_list
arg	55:36	55:44	3	pix_fmts
water	55:36	0:0	4	pix_fmts
water	55:45	0:0	2	;
if	56:4	57:30	2	(! fmts_list)
cond	56:8	56:9	3	! fmts_list
op	56:8	0:0	4	!
water	56:9	0:0	4	fmts_list
stmts	57:8	57:30	3	
return	57:8	57:30	4	AVERROR(ENOMEM)
call	57:15	57:29	5	AVERROR
arg	57:23	57:29	6	ENOMEM
water	57:23	0:0	7	ENOMEM
return	58:4	58:48	2	ff_set_common_formats(ctx,fmts_list)
call	58:11	58:47	3	ff_set_common_formats
arg	58:33	58:36	4	ctx
water	58:33	0:0	5	ctx
arg	58:38	58:47	4	fmts_list
water	58:38	0:0	5	fmts_list
