func	1:0	49:0	0	static int	decode_i_frame
params	1:25	0:0	1	
param	1:26	1:41	2	FourXContext *	f
param	1:43	1:61	2	const uint8_t *	buf
param	1:63	1:73	2	int	length
stmnts	0:0	48:12	1	
decl	3:4	3:17	2	int	x
water	3:9	0:0	2	,
decl	3:4	3:17	2	int	y
water	3:12	0:0	2	,
decl	3:4	3:17	2	int	ret
decl	4:4	4:38	2	const int	width
op	4:21	0:0	2	=
water	4:23	0:0	2	f
op	4:24	0:0	2	->
water	4:26	0:0	2	avctx
op	4:31	0:0	2	->
water	4:33	0:0	2	width
decl	5:4	5:39	2	const int	height
op	5:21	0:0	2	=
water	5:23	0:0	2	f
op	5:24	0:0	2	->
water	5:26	0:0	2	avctx
op	5:31	0:0	2	->
water	5:33	0:0	2	height
decl	6:4	6:52	2	const unsigned int	bitstream_size
op	6:38	0:0	2	=
call	6:40	6:51	3	AV_RL32
arg	6:48	6:51	4	buf
water	6:48	0:0	5	buf
decl	7:4	7:31	2	unsigned int	prestream_size
decl	8:4	8:28	2	const uint8_t	*prestream
if	9:4	10:34	2	(bitstream_size > ( 1 << 26 ))
cond	9:8	9:33	3	bitstream_size > ( 1 << 26 )
water	9:8	0:0	4	bitstream_size
op	9:23	0:0	4	>
water	9:25	0:0	4	(
water	9:26	0:0	4	1
op	9:28	0:0	4	<<
water	9:31	0:0	4	26
water	9:33	0:0	4	)
stmts	10:8	10:34	3	
return	10:8	10:34	4	AVERROR_INVALIDDATA
water	10:15	0:0	5	AVERROR_INVALIDDATA
if	11:4	14:4	2	(length < bitstream_size + 12)
cond	11:8	11:34	3	length < bitstream_size + 12
water	11:8	0:0	4	length
op	11:15	0:0	4	<
water	11:17	0:0	4	bitstream_size
op	11:32	0:0	4	+
water	11:34	0:0	4	12
stmts	11:38	14:4	3	
water	11:38	0:0	4	{
call	12:8	12:64	4	av_log
arg	12:15	12:23	5	f->avctx
water	12:15	0:0	6	f
op	12:16	0:0	6	->
water	12:18	0:0	6	avctx
arg	12:25	12:37	5	AV_LOG_ERROR
water	12:25	0:0	6	AV_LOG_ERROR
arg	12:39	12:64	5	"packet size too small\n"
water	12:39	0:0	6	"packet size too small\n"
water	12:65	0:0	4	;
return	13:8	13:34	4	AVERROR_INVALIDDATA
water	13:15	0:0	5	AVERROR_INVALIDDATA
water	14:4	0:0	4	}
water	15:4	0:0	2	prestream_size
op	15:19	0:0	2	=
water	15:21	0:0	2	4
call	15:23	15:57	2	*AV_RL32
arg	15:33	15:57	3	buf+bitstream_size+4
water	15:33	0:0	4	buf
op	15:37	0:0	4	+
water	15:39	0:0	4	bitstream_size
op	15:54	0:0	4	+
water	15:56	0:0	4	4
water	15:58	0:0	2	;
water	16:4	0:0	2	prestream
op	16:19	0:0	2	=
water	16:33	0:0	2	buf
op	16:37	0:0	2	+
water	16:39	0:0	2	bitstream_size
op	16:54	0:0	2	+
water	16:56	0:0	2	12
water	16:58	0:0	2	;
if	17:4	22:4	2	(prestream_size + bitstream_size + 12 != length || prestream_size > ( 1 << 26 ))
cond	17:8	18:36	3	prestream_size + bitstream_size + 12 != length || prestream_size > ( 1 << 26 )
water	17:8	0:0	4	prestream_size
op	17:23	0:0	4	+
water	17:25	0:0	4	bitstream_size
op	17:40	0:0	4	+
water	17:42	0:0	4	12
op	17:45	0:0	4	!=
water	17:48	0:0	4	length
op	18:8	0:0	4	||
water	18:11	0:0	4	prestream_size
op	18:26	0:0	4	>
water	18:28	0:0	4	(
water	18:29	0:0	4	1
op	18:31	0:0	4	<<
water	18:34	0:0	4	26
water	18:36	0:0	4	)
stmts	18:39	22:4	3	
water	18:39	0:0	4	{
call	19:8	20:53	4	av_log
arg	19:15	19:23	5	f->avctx
water	19:15	0:0	6	f
op	19:16	0:0	6	->
water	19:18	0:0	6	avctx
arg	19:25	19:37	5	AV_LOG_ERROR
water	19:25	0:0	6	AV_LOG_ERROR
arg	19:39	19:65	5	"size mismatch %d %d %d\n"
water	19:39	0:0	6	"size mismatch %d %d %d\n"
arg	20:15	20:29	5	prestream_size
water	20:15	0:0	6	prestream_size
arg	20:31	20:45	5	bitstream_size
water	20:31	0:0	6	bitstream_size
arg	20:47	20:53	5	length
water	20:47	0:0	6	length
water	20:54	0:0	4	;
return	21:8	21:34	4	AVERROR_INVALIDDATA
water	21:15	0:0	5	AVERROR_INVALIDDATA
water	22:4	0:0	4	}
water	23:4	0:0	2	prestream
op	23:14	0:0	2	=
call	23:16	23:64	2	read_huffman_tables
arg	23:36	23:37	3	f
water	23:36	0:0	4	f
arg	23:39	23:48	3	prestream
water	23:39	0:0	4	prestream
arg	23:50	23:64	3	prestream_size
water	23:50	0:0	4	prestream_size
water	23:65	0:0	2	;
if	24:4	27:4	2	(! prestream)
cond	24:8	24:9	3	! prestream
op	24:8	0:0	4	!
water	24:9	0:0	4	prestream
stmts	24:20	27:4	3	
water	24:20	0:0	4	{
call	25:8	25:72	4	av_log
arg	25:15	25:23	5	f->avctx
water	25:15	0:0	6	f
op	25:16	0:0	6	->
water	25:18	0:0	6	avctx
arg	25:25	25:37	5	AV_LOG_ERROR
water	25:25	0:0	6	AV_LOG_ERROR
arg	25:39	25:72	5	"Error reading Huffman tables.\n"
water	25:39	0:0	6	"Error reading Huffman tables.\n"
water	25:73	0:0	4	;
return	26:8	26:34	4	AVERROR_INVALIDDATA
water	26:15	0:0	5	AVERROR_INVALIDDATA
water	27:4	0:0	4	}
call	28:4	28:40	2	av_assert0
arg	28:15	28:40	3	prestream<=buf+length
water	28:15	0:0	4	prestream
op	28:25	0:0	4	<=
water	28:28	0:0	4	buf
op	28:32	0:0	4	+
water	28:34	0:0	4	length
water	28:41	0:0	2	;
call	29:4	29:53	2	init_get_bits
arg	29:18	29:24	3	&f->gb
op	29:18	0:0	4	&
water	29:19	0:0	4	f
op	29:20	0:0	4	->
water	29:22	0:0	4	gb
arg	29:26	29:33	3	buf+4
water	29:26	0:0	4	buf
op	29:30	0:0	4	+
water	29:32	0:0	4	4
arg	29:35	29:53	3	8*bitstream_size
water	29:35	0:0	4	8
op	29:37	0:0	4	*
water	29:39	0:0	4	bitstream_size
water	29:54	0:0	2	;
water	30:4	0:0	2	prestream_size
op	30:19	0:0	2	=
water	30:21	0:0	2	length
op	30:28	0:0	2	+
water	30:30	0:0	2	buf
op	30:34	0:0	2	-
water	30:36	0:0	2	prestream
water	30:45	0:0	2	;
call	31:4	32:40	2	av_fast_padded_malloc
arg	31:26	31:46	3	&f->bitstream_buffer
op	31:26	0:0	4	&
water	31:27	0:0	4	f
op	31:28	0:0	4	->
water	31:30	0:0	4	bitstream_buffer
arg	31:48	31:73	3	&f->bitstream_buffer_size
op	31:48	0:0	4	&
water	31:49	0:0	4	f
op	31:50	0:0	4	->
water	31:52	0:0	4	bitstream_buffer_size
arg	32:26	32:40	3	prestream_size
water	32:26	0:0	4	prestream_size
water	32:41	0:0	2	;
if	33:4	34:30	2	(! f -> bitstream_buffer)
cond	33:8	33:12	3	! f -> bitstream_buffer
op	33:8	0:0	4	!
water	33:9	0:0	4	f
op	33:10	0:0	4	->
water	33:12	0:0	4	bitstream_buffer
stmts	34:8	34:30	3	
return	34:8	34:30	4	AVERROR(ENOMEM)
call	34:15	34:29	5	AVERROR
arg	34:23	34:29	6	ENOMEM
water	34:23	0:0	7	ENOMEM
call	35:4	36:41	2	f->bbdsp.bswap_buf
arg	35:23	35:42	3	f->bitstream_buffer
water	35:23	0:0	4	f
op	35:24	0:0	4	->
water	35:26	0:0	4	bitstream_buffer
arg	35:44	35:72	3	(constuint32_t*)prestream
water	35:44	0:0	4	(
water	35:45	0:0	4	const
water	35:51	0:0	4	uint32_t
op	35:60	0:0	4	*
water	35:61	0:0	4	)
water	35:63	0:0	4	prestream
arg	36:23	36:41	3	prestream_size/4
water	36:23	0:0	4	prestream_size
op	36:38	0:0	4	/
water	36:40	0:0	4	4
water	36:42	0:0	2	;
call	37:4	37:69	2	init_get_bits
arg	37:18	37:28	3	&f->pre_gb
op	37:18	0:0	4	&
water	37:19	0:0	4	f
op	37:20	0:0	4	->
water	37:22	0:0	4	pre_gb
arg	37:30	37:49	3	f->bitstream_buffer
water	37:30	0:0	4	f
op	37:31	0:0	4	->
water	37:33	0:0	4	bitstream_buffer
arg	37:51	37:69	3	8*prestream_size
water	37:51	0:0	4	8
op	37:53	0:0	4	*
water	37:55	0:0	4	prestream_size
water	37:70	0:0	2	;
water	38:4	0:0	2	f
op	38:5	0:0	2	->
water	38:7	0:0	2	last_dc
op	38:15	0:0	2	=
water	38:17	0:0	2	0
op	38:19	0:0	2	*
water	38:21	0:0	2	128
op	38:25	0:0	2	*
water	38:27	0:0	2	8
op	38:29	0:0	2	*
water	38:31	0:0	2	8
water	38:32	0:0	2	;
for	39:4	45:4	2	(y = 0 ;y < height;y += 16)
forinit	39:9	39:14	3	y = 0 ;
water	39:9	0:0	4	y
op	39:11	0:0	4	=
water	39:13	0:0	4	0
water	39:14	0:0	4	;
cond	39:16	39:20	3	y < height
water	39:16	0:0	4	y
op	39:18	0:0	4	<
water	39:20	0:0	4	height
forexpr	39:28	39:33	3	y += 16
water	39:28	0:0	4	y
op	39:30	0:0	4	+=
water	39:33	0:0	4	16
stmts	39:37	45:4	3	
water	39:37	0:0	4	{
for	40:8	44:8	4	(x = 0 ;x < width;x += 16)
forinit	40:13	40:18	5	x = 0 ;
water	40:13	0:0	6	x
op	40:15	0:0	6	=
water	40:17	0:0	6	0
water	40:18	0:0	6	;
cond	40:20	40:24	5	x < width
water	40:20	0:0	6	x
op	40:22	0:0	6	<
water	40:24	0:0	6	width
forexpr	40:31	40:36	5	x += 16
water	40:31	0:0	6	x
op	40:33	0:0	6	+=
water	40:36	0:0	6	16
stmts	40:40	44:8	5	
water	40:40	0:0	6	{
if	41:12	42:26	6	(( ret =decode_i_mb (f ) ) < 0)
cond	41:16	41:41	7	( ret =decode_i_mb (f ) ) < 0
water	41:16	0:0	8	(
water	41:17	0:0	8	ret
op	41:21	0:0	8	=
call	41:23	41:36	8	decode_i_mb
arg	41:35	41:36	9	f
water	41:35	0:0	10	f
water	41:37	0:0	8	)
op	41:39	0:0	8	<
water	41:41	0:0	8	0
stmts	42:16	42:26	7	
return	42:16	42:26	8	ret
water	42:23	0:0	9	ret
call	43:12	43:28	6	idct_put
arg	43:21	43:22	7	f
water	43:21	0:0	8	f
arg	43:24	43:25	7	x
water	43:24	0:0	8	x
arg	43:27	43:28	7	y
water	43:27	0:0	8	y
water	43:29	0:0	6	;
water	44:8	0:0	6	}
water	45:4	0:0	4	}
if	46:4	47:56	2	(get_vlc2 (& f -> pre_gb ,f -> pre_vlc . table ,ACDC_VLC_BITS ,3 ) != 256)
cond	46:8	46:68	3	get_vlc2 (& f -> pre_gb ,f -> pre_vlc . table ,ACDC_VLC_BITS ,3 ) != 256
call	46:8	46:63	4	get_vlc2
arg	46:17	46:27	5	&f->pre_gb
op	46:17	0:0	6	&
water	46:18	0:0	6	f
op	46:19	0:0	6	->
water	46:21	0:0	6	pre_gb
arg	46:29	46:45	5	f->pre_vlc.table
water	46:29	0:0	6	f
op	46:30	0:0	6	->
water	46:32	0:0	6	pre_vlc
op	46:39	0:0	6	.
water	46:40	0:0	6	table
arg	46:47	46:60	5	ACDC_VLC_BITS
water	46:47	0:0	6	ACDC_VLC_BITS
arg	46:62	46:63	5	3
water	46:62	0:0	6	3
op	46:65	0:0	4	!=
water	46:68	0:0	4	256
stmts	47:8	47:56	3	
call	47:8	47:55	4	av_log
arg	47:15	47:23	5	f->avctx
water	47:15	0:0	6	f
op	47:16	0:0	6	->
water	47:18	0:0	6	avctx
arg	47:25	47:37	5	AV_LOG_ERROR
water	47:25	0:0	6	AV_LOG_ERROR
arg	47:39	47:55	5	"end mismatch\n"
water	47:39	0:0	6	"end mismatch\n"
water	47:56	0:0	4	;
return	48:4	48:12	2	0
water	48:11	0:0	3	0
