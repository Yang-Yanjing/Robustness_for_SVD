func	1:0	75:0	0	static int	mxf_parse_dnxhd_frame
params	1:32	0:0	1	
param	1:33	1:51	2	AVFormatContext *	s
param	1:53	1:65	2	AVStream *	st
param	2:0	2:13	2	AVPacket *	pkt
stmnts	0:0	74:12	1	
decl	4:4	4:34	2	MXFContext	*mxf
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	priv_data
decl	5:4	5:40	2	MXFStreamContext	*sc
op	5:25	0:0	2	=
water	5:27	0:0	2	st
op	5:29	0:0	2	->
water	5:31	0:0	2	priv_data
decl	6:4	6:14	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:14	2	int	cid
decl	7:4	7:23	2	uint8_t	*header_cid
decl	8:4	8:22	2	int	frame_size
op	8:19	0:0	2	=
water	8:21	0:0	2	0
if	9:4	10:16	2	(mxf -> header_written)
cond	9:8	9:13	3	mxf -> header_written
water	9:8	0:0	4	mxf
op	9:11	0:0	4	->
water	9:13	0:0	4	header_written
stmts	10:8	10:16	3	
return	10:8	10:16	4	1
water	10:15	0:0	5	1
if	11:4	12:17	2	(pkt -> size < 43)
cond	11:8	11:20	3	pkt -> size < 43
water	11:8	0:0	4	pkt
op	11:11	0:0	4	->
water	11:13	0:0	4	size
op	11:18	0:0	4	<
water	11:20	0:0	4	43
stmts	12:8	12:17	3	
return	12:8	12:17	4	-1
op	12:15	0:0	5	-
water	12:16	0:0	5	1
water	13:4	0:0	2	header_cid
op	13:15	0:0	2	=
water	13:17	0:0	2	pkt
op	13:20	0:0	2	->
water	13:22	0:0	2	data
op	13:27	0:0	2	+
water	13:29	0:0	2	0
water	13:30	0:0	2	x28
water	13:33	0:0	2	;
water	14:4	0:0	2	cid
op	14:8	0:0	2	=
water	14:10	0:0	2	header_cid
op	14:20	0:0	2	[
water	14:21	0:0	2	0
op	14:22	0:0	2	]
op	14:24	0:0	2	<<
water	14:27	0:0	2	24
op	14:30	0:0	2	|
water	14:32	0:0	2	header_cid
op	14:42	0:0	2	[
water	14:43	0:0	2	1
op	14:44	0:0	2	]
op	14:46	0:0	2	<<
water	14:49	0:0	2	16
op	14:52	0:0	2	|
water	14:54	0:0	2	header_cid
op	14:64	0:0	2	[
water	14:65	0:0	2	2
op	14:66	0:0	2	]
op	14:68	0:0	2	<<
water	14:71	0:0	2	8
op	14:73	0:0	2	|
water	14:75	0:0	2	header_cid
op	14:85	0:0	2	[
water	14:86	0:0	2	3
op	14:87	0:0	2	]
water	14:88	0:0	2	;
if	15:4	16:17	2	(( frame_size =avpriv_dnxhd_get_frame_size (cid ) ) < 0)
cond	15:8	15:58	3	( frame_size =avpriv_dnxhd_get_frame_size (cid ) ) < 0
water	15:8	0:0	4	(
water	15:9	0:0	4	frame_size
op	15:20	0:0	4	=
call	15:22	15:53	4	avpriv_dnxhd_get_frame_size
arg	15:50	15:53	5	cid
water	15:50	0:0	6	cid
water	15:54	0:0	4	)
op	15:56	0:0	4	<
water	15:58	0:0	4	0
stmts	16:8	16:17	3	
return	16:8	16:17	4	-1
op	16:15	0:0	5	-
water	16:16	0:0	5	1
if	17:4	18:34	2	(( sc -> interlaced =avpriv_dnxhd_get_interlaced (cid ) ) < 0)
cond	17:8	17:62	3	( sc -> interlaced =avpriv_dnxhd_get_interlaced (cid ) ) < 0
water	17:8	0:0	4	(
water	17:9	0:0	4	sc
op	17:11	0:0	4	->
water	17:13	0:0	4	interlaced
op	17:24	0:0	4	=
call	17:26	17:57	4	avpriv_dnxhd_get_interlaced
arg	17:54	17:57	5	cid
water	17:54	0:0	6	cid
water	17:58	0:0	4	)
op	17:60	0:0	4	<
water	17:62	0:0	4	0
stmts	18:8	18:34	3	
return	18:8	18:34	4	AVERROR_INVALIDDATA
water	18:15	0:0	5	AVERROR_INVALIDDATA
switch	19:4	55:4	2	(cid)
cond	19:12	19:12	3	cid
water	19:12	0:0	4	cid
stmts	19:17	55:4	3	
water	19:17	0:0	4	{
label	20:4	20:13	4	case 1235 :
water	21:8	0:0	4	sc
op	21:10	0:0	4	->
water	21:12	0:0	4	index
op	21:18	0:0	4	=
water	21:20	0:0	4	24
water	21:22	0:0	4	;
water	22:8	0:0	4	sc
op	22:10	0:0	4	->
water	22:12	0:0	4	component_depth
op	22:28	0:0	4	=
water	22:30	0:0	4	10
water	22:32	0:0	4	;
break	23:8	23:13	4	
label	24:4	24:13	4	case 1237 :
water	25:8	0:0	4	sc
op	25:10	0:0	4	->
water	25:12	0:0	4	index
op	25:18	0:0	4	=
water	25:20	0:0	4	25
water	25:22	0:0	4	;
break	26:8	26:13	4	
label	27:4	27:13	4	case 1238 :
water	28:8	0:0	4	sc
op	28:10	0:0	4	->
water	28:12	0:0	4	index
op	28:18	0:0	4	=
water	28:20	0:0	4	26
water	28:22	0:0	4	;
break	29:8	29:13	4	
label	30:4	30:13	4	case 1241 :
water	31:8	0:0	4	sc
op	31:10	0:0	4	->
water	31:12	0:0	4	index
op	31:18	0:0	4	=
water	31:20	0:0	4	27
water	31:22	0:0	4	;
water	32:8	0:0	4	sc
op	32:10	0:0	4	->
water	32:12	0:0	4	component_depth
op	32:28	0:0	4	=
water	32:30	0:0	4	10
water	32:32	0:0	4	;
break	33:8	33:13	4	
label	34:4	34:13	4	case 1242 :
water	35:8	0:0	4	sc
op	35:10	0:0	4	->
water	35:12	0:0	4	index
op	35:18	0:0	4	=
water	35:20	0:0	4	28
water	35:22	0:0	4	;
break	36:8	36:13	4	
label	37:4	37:13	4	case 1243 :
water	38:8	0:0	4	sc
op	38:10	0:0	4	->
water	38:12	0:0	4	index
op	38:18	0:0	4	=
water	38:20	0:0	4	29
water	38:22	0:0	4	;
break	39:8	39:13	4	
label	40:4	40:13	4	case 1250 :
water	41:8	0:0	4	sc
op	41:10	0:0	4	->
water	41:12	0:0	4	index
op	41:18	0:0	4	=
water	41:20	0:0	4	30
water	41:22	0:0	4	;
water	42:8	0:0	4	sc
op	42:10	0:0	4	->
water	42:12	0:0	4	component_depth
op	42:28	0:0	4	=
water	42:30	0:0	4	10
water	42:32	0:0	4	;
break	43:8	43:13	4	
label	44:4	44:13	4	case 1251 :
water	45:8	0:0	4	sc
op	45:10	0:0	4	->
water	45:12	0:0	4	index
op	45:18	0:0	4	=
water	45:20	0:0	4	31
water	45:22	0:0	4	;
break	46:8	46:13	4	
label	47:4	47:13	4	case 1252 :
water	48:8	0:0	4	sc
op	48:10	0:0	4	->
water	48:12	0:0	4	index
op	48:18	0:0	4	=
water	48:20	0:0	4	32
water	48:22	0:0	4	;
break	49:8	49:13	4	
label	50:4	50:13	4	case 1253 :
water	51:8	0:0	4	sc
op	51:10	0:0	4	->
water	51:12	0:0	4	index
op	51:18	0:0	4	=
water	51:20	0:0	4	33
water	51:22	0:0	4	;
break	52:8	52:13	4	
label	53:4	53:11	4	default :
return	54:8	54:17	4	-1
op	54:15	0:0	5	-
water	54:16	0:0	5	1
water	55:4	0:0	4	}
water	56:4	0:0	2	sc
op	56:6	0:0	2	->
water	56:8	0:0	2	codec_ul
op	56:17	0:0	2	=
op	56:19	0:0	2	&
water	56:20	0:0	2	mxf_essence_container_uls
op	56:45	0:0	2	[
water	56:46	0:0	2	sc
op	56:48	0:0	2	->
water	56:50	0:0	2	index
op	56:55	0:0	2	]
op	56:56	0:0	2	.
water	56:57	0:0	2	codec_ul
water	56:65	0:0	2	;
water	57:4	0:0	2	sc
op	57:6	0:0	2	->
water	57:8	0:0	2	aspect_ratio
op	57:21	0:0	2	=
water	57:23	0:0	2	(
water	57:24	0:0	2	AVRational
water	57:34	0:0	2	)
water	57:35	0:0	2	{
water	57:37	0:0	2	16
water	57:39	0:0	2	,
water	57:41	0:0	2	9
water	57:43	0:0	2	}
water	57:44	0:0	2	;
if	58:4	61:4	2	(s -> oformat == & ff_mxf_opatom_muxer)
cond	58:7	58:22	3	s -> oformat == & ff_mxf_opatom_muxer
water	58:7	0:0	4	s
op	58:8	0:0	4	->
water	58:10	0:0	4	oformat
op	58:18	0:0	4	==
op	58:21	0:0	4	&
water	58:22	0:0	4	ff_mxf_opatom_muxer
stmts	58:42	61:4	3	
water	58:42	0:0	4	{
water	59:8	0:0	4	mxf
op	59:11	0:0	4	->
water	59:13	0:0	4	edit_unit_byte_count
op	59:34	0:0	4	=
water	59:36	0:0	4	frame_size
water	59:46	0:0	4	;
return	60:8	60:16	4	1
water	60:15	0:0	5	1
water	61:4	0:0	4	}
water	62:4	0:0	2	mxf
op	62:7	0:0	2	->
water	62:9	0:0	2	edit_unit_byte_count
op	62:30	0:0	2	=
water	62:32	0:0	2	KAG_SIZE
water	62:40	0:0	2	;
for	63:4	73:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	63:9	63:14	3	i = 0 ;
water	63:9	0:0	4	i
op	63:11	0:0	4	=
water	63:13	0:0	4	0
water	63:14	0:0	4	;
cond	63:16	63:23	3	i < s -> nb_streams
water	63:16	0:0	4	i
op	63:18	0:0	4	<
water	63:20	0:0	4	s
op	63:21	0:0	4	->
water	63:23	0:0	4	nb_streams
forexpr	63:35	63:36	3	i ++
water	63:35	0:0	4	i
op	63:36	0:0	4	++
stmts	63:40	73:4	3	
water	63:40	0:0	4	{
decl	64:8	64:36	4	AVStream	*st
op	64:21	0:0	4	=
water	64:23	0:0	4	s
op	64:24	0:0	4	->
water	64:26	0:0	4	streams
op	64:33	0:0	4	[
water	64:34	0:0	4	i
op	64:35	0:0	4	]
decl	65:8	65:44	4	MXFStreamContext	*sc
op	65:29	0:0	4	=
water	65:31	0:0	4	st
op	65:33	0:0	4	->
water	65:35	0:0	4	priv_data
if	66:8	69:8	4	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	66:12	66:37	5	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	66:12	0:0	6	st
op	66:14	0:0	6	->
water	66:16	0:0	6	codec
op	66:21	0:0	6	->
water	66:23	0:0	6	codec_type
op	66:34	0:0	6	==
water	66:37	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	66:57	69:8	5	
water	66:57	0:0	6	{
water	67:12	0:0	6	mxf
op	67:15	0:0	6	->
water	67:17	0:0	6	edit_unit_byte_count
op	67:38	0:0	6	+=
water	67:41	0:0	6	16
op	67:44	0:0	6	+
water	67:46	0:0	6	4
op	67:48	0:0	6	+
water	67:50	0:0	6	sc
op	67:52	0:0	6	->
water	67:54	0:0	6	aic
op	67:57	0:0	6	.
water	67:58	0:0	6	samples
op	67:65	0:0	6	[
water	67:66	0:0	6	0
op	67:67	0:0	6	]
op	67:68	0:0	6	*
water	67:69	0:0	6	sc
op	67:71	0:0	6	->
water	67:73	0:0	6	aic
op	67:76	0:0	6	.
water	67:77	0:0	6	sample_size
water	67:88	0:0	6	;
water	68:12	0:0	6	mxf
op	68:15	0:0	6	->
water	68:17	0:0	6	edit_unit_byte_count
op	68:38	0:0	6	+=
call	68:41	68:80	6	klv_fill_size
arg	68:55	68:80	7	mxf->edit_unit_byte_count
water	68:55	0:0	8	mxf
op	68:58	0:0	8	->
water	68:60	0:0	8	edit_unit_byte_count
water	68:81	0:0	6	;
water	69:8	0:0	6	}
else	69:10	72:8	4
stmts	69:15	72:8	5	
if	69:15	72:8	6	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	69:19	69:44	7	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	69:19	0:0	8	st
op	69:21	0:0	8	->
water	69:23	0:0	8	codec
op	69:28	0:0	8	->
water	69:30	0:0	8	codec_type
op	69:41	0:0	8	==
water	69:44	0:0	8	AVMEDIA_TYPE_VIDEO
stmts	69:64	72:8	7	
water	69:64	0:0	8	{
water	70:12	0:0	8	mxf
op	70:15	0:0	8	->
water	70:17	0:0	8	edit_unit_byte_count
op	70:38	0:0	8	+=
water	70:41	0:0	8	16
op	70:44	0:0	8	+
water	70:46	0:0	8	4
op	70:48	0:0	8	+
water	70:50	0:0	8	frame_size
water	70:60	0:0	8	;
water	71:12	0:0	8	mxf
op	71:15	0:0	8	->
water	71:17	0:0	8	edit_unit_byte_count
op	71:38	0:0	8	+=
call	71:41	71:80	8	klv_fill_size
arg	71:55	71:80	9	mxf->edit_unit_byte_count
water	71:55	0:0	10	mxf
op	71:58	0:0	10	->
water	71:60	0:0	10	edit_unit_byte_count
water	71:81	0:0	8	;
water	72:8	0:0	8	}
water	73:4	0:0	4	}
return	74:4	74:12	2	1
water	74:11	0:0	3	1
