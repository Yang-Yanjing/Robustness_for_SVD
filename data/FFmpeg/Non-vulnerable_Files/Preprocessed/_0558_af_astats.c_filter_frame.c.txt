func	1:0	35:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:58	2	AVFrame *	buf
stmnts	0:0	34:56	1	
decl	3:4	3:44	2	AudioStatsContext	*s
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
op	3:38	0:0	2	->
water	3:40	0:0	2	priv
decl	4:4	4:61	2	AVDictionary	**metadata
op	4:28	0:0	2	=
call	4:30	4:60	3	avpriv_frame_get_metadatap
arg	4:57	4:60	4	buf
water	4:57	0:0	5	buf
decl	5:4	5:39	2	const int	channels
op	5:23	0:0	2	=
water	5:25	0:0	2	s
op	5:26	0:0	2	->
water	5:28	0:0	2	nb_channels
decl	6:4	6:21	2	const double	*src
decl	7:4	7:12	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:12	2	int	c
switch	8:4	24:4	2	(inlink -> format)
cond	8:12	8:20	3	inlink -> format
water	8:12	0:0	4	inlink
op	8:18	0:0	4	->
water	8:20	0:0	4	format
stmts	8:28	24:4	3	
water	8:28	0:0	4	{
label	9:4	9:27	4	case AV_SAMPLE_FMT_DBLP :
for	10:8	15:8	4	(c = 0 ;c < channels;c ++)
forinit	10:13	10:18	5	c = 0 ;
water	10:13	0:0	6	c
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:20	10:24	5	c < channels
water	10:20	0:0	6	c
op	10:22	0:0	6	<
water	10:24	0:0	6	channels
forexpr	10:34	10:35	5	c ++
water	10:34	0:0	6	c
op	10:35	0:0	6	++
stmts	10:39	15:8	5	
water	10:39	0:0	6	{
decl	11:12	11:44	6	ChannelStats	*p
op	11:28	0:0	6	=
op	11:30	0:0	6	&
water	11:31	0:0	6	s
op	11:32	0:0	6	->
water	11:34	0:0	6	chstats
op	11:41	0:0	6	[
water	11:42	0:0	6	c
op	11:43	0:0	6	]
water	12:12	0:0	6	src
op	12:16	0:0	6	=
water	12:18	0:0	6	(
water	12:19	0:0	6	const
water	12:25	0:0	6	double
op	12:32	0:0	6	*
water	12:33	0:0	6	)
water	12:34	0:0	6	buf
op	12:37	0:0	6	->
water	12:39	0:0	6	extended_data
op	12:52	0:0	6	[
water	12:53	0:0	6	c
op	12:54	0:0	6	]
water	12:55	0:0	6	;
for	13:12	14:39	6	(i = 0 ;i < buf -> nb_samples;i ++ , src ++)
forinit	13:17	13:22	7	i = 0 ;
water	13:17	0:0	8	i
op	13:19	0:0	8	=
water	13:21	0:0	8	0
water	13:22	0:0	8	;
cond	13:24	13:33	7	i < buf -> nb_samples
water	13:24	0:0	8	i
op	13:26	0:0	8	<
water	13:28	0:0	8	buf
op	13:31	0:0	8	->
water	13:33	0:0	8	nb_samples
forexpr	13:45	13:53	7	i ++ , src ++
water	13:45	0:0	8	i
op	13:46	0:0	8	++
water	13:48	0:0	8	,
water	13:50	0:0	8	src
op	13:53	0:0	8	++
stmts	14:16	14:39	7	
call	14:16	14:38	8	update_stat
arg	14:28	14:29	9	s
water	14:28	0:0	10	s
arg	14:31	14:32	9	p
water	14:31	0:0	10	p
arg	14:34	14:38	9	*src
op	14:34	0:0	10	*
water	14:35	0:0	10	src
water	14:39	0:0	8	;
water	15:8	0:0	6	}
break	16:8	16:13	4	
label	17:4	17:26	4	case AV_SAMPLE_FMT_DBL :
water	18:8	0:0	4	src
op	18:12	0:0	4	=
water	18:14	0:0	4	(
water	18:15	0:0	4	const
water	18:21	0:0	4	double
op	18:28	0:0	4	*
water	18:29	0:0	4	)
water	18:30	0:0	4	buf
op	18:33	0:0	4	->
water	18:35	0:0	4	extended_data
op	18:48	0:0	4	[
water	18:49	0:0	4	0
op	18:50	0:0	4	]
water	18:51	0:0	4	;
for	19:8	22:8	4	(i = 0 ;i < buf -> nb_samples;i ++)
forinit	19:13	19:18	5	i = 0 ;
water	19:13	0:0	6	i
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:29	5	i < buf -> nb_samples
water	19:20	0:0	6	i
op	19:22	0:0	6	<
water	19:24	0:0	6	buf
op	19:27	0:0	6	->
water	19:29	0:0	6	nb_samples
forexpr	19:41	19:42	5	i ++
water	19:41	0:0	6	i
op	19:42	0:0	6	++
stmts	19:46	22:8	5	
water	19:46	0:0	6	{
for	20:12	21:52	6	(c = 0 ;c < channels;c ++ , src ++)
forinit	20:17	20:22	7	c = 0 ;
water	20:17	0:0	8	c
op	20:19	0:0	8	=
water	20:21	0:0	8	0
water	20:22	0:0	8	;
cond	20:24	20:28	7	c < channels
water	20:24	0:0	8	c
op	20:26	0:0	8	<
water	20:28	0:0	8	channels
forexpr	20:38	20:46	7	c ++ , src ++
water	20:38	0:0	8	c
op	20:39	0:0	8	++
water	20:41	0:0	8	,
water	20:43	0:0	8	src
op	20:46	0:0	8	++
stmts	21:16	21:52	7	
call	21:16	21:51	8	update_stat
arg	21:28	21:29	9	s
water	21:28	0:0	10	s
arg	21:31	21:45	9	&s->chstats[c]
op	21:31	0:0	10	&
water	21:32	0:0	10	s
op	21:33	0:0	10	->
water	21:35	0:0	10	chstats
op	21:42	0:0	10	[
water	21:43	0:0	10	c
op	21:44	0:0	10	]
arg	21:47	21:51	9	*src
op	21:47	0:0	10	*
water	21:48	0:0	10	src
water	21:52	0:0	8	;
water	22:8	0:0	6	}
break	23:8	23:13	4	
water	24:4	0:0	4	}
if	25:4	26:33	2	(s -> metadata)
cond	25:8	25:11	3	s -> metadata
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	metadata
stmts	26:8	26:33	3	
call	26:8	26:32	4	set_metadata
arg	26:21	26:22	5	s
water	26:21	0:0	6	s
arg	26:24	26:32	5	metadata
water	26:24	0:0	6	metadata
water	26:33	0:0	4	;
if	27:4	33:4	2	(s -> reset_count > 0)
cond	27:8	27:25	3	s -> reset_count > 0
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	reset_count
op	27:23	0:0	4	>
water	27:25	0:0	4	0
stmts	27:28	33:4	3	
water	27:28	0:0	4	{
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	nb_frames
op	28:20	0:0	4	++
water	28:22	0:0	4	;
if	29:8	32:8	4	(s -> nb_frames >= s -> reset_count)
cond	29:12	29:31	5	s -> nb_frames >= s -> reset_count
water	29:12	0:0	6	s
op	29:13	0:0	6	->
water	29:15	0:0	6	nb_frames
op	29:25	0:0	6	>=
water	29:28	0:0	6	s
op	29:29	0:0	6	->
water	29:31	0:0	6	reset_count
stmts	29:44	32:8	5	
water	29:44	0:0	6	{
call	30:12	30:25	6	reset_stats
arg	30:24	30:25	7	s
water	30:24	0:0	8	s
water	30:26	0:0	6	;
water	31:12	0:0	6	s
op	31:13	0:0	6	->
water	31:15	0:0	6	nb_frames
op	31:25	0:0	6	=
water	31:27	0:0	6	0
water	31:28	0:0	6	;
water	32:8	0:0	6	}
water	33:4	0:0	4	}
return	34:4	34:56	2	ff_filter_frame(inlink->dst->outputs[0],buf)
call	34:11	34:55	3	ff_filter_frame
arg	34:27	34:50	4	inlink->dst->outputs[0]
water	34:27	0:0	5	inlink
op	34:33	0:0	5	->
water	34:35	0:0	5	dst
op	34:38	0:0	5	->
water	34:40	0:0	5	outputs
op	34:47	0:0	5	[
water	34:48	0:0	5	0
op	34:49	0:0	5	]
arg	34:52	34:55	4	buf
water	34:52	0:0	5	buf
