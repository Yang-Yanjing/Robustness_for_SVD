func	1:0	130:0	0	static void	count_frame_bits
params	1:28	0:0	1	
param	1:29	1:48	2	AC3EncodeContext *	s
stmnts	0:0	129:52	1	
decl	3:4	3:36	2	AC3EncOptions	*opt
op	3:23	0:0	2	=
op	3:25	0:0	2	&
water	3:26	0:0	2	s
op	3:27	0:0	2	->
water	3:29	0:0	2	options
decl	4:4	4:15	2	int	blk
water	4:11	0:0	2	,
decl	4:4	4:15	2	int	ch
decl	5:4	5:22	2	int	frame_bits
op	5:19	0:0	2	=
water	5:21	0:0	2	0
if	7:4	51:4	2	(s -> eac3)
cond	7:8	7:11	3	s -> eac3
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	eac3
stmts	7:17	51:4	3	
water	7:17	0:0	4	{
if	8:8	20:8	4	(opt -> eac3_mixing_metadata)
cond	8:12	8:17	5	opt -> eac3_mixing_metadata
water	8:12	0:0	6	opt
op	8:15	0:0	6	->
water	8:17	0:0	6	eac3_mixing_metadata
stmts	8:39	20:8	5	
water	8:39	0:0	6	{
if	9:12	10:31	6	(s -> channel_mode > AC3_CHMODE_STEREO)
cond	9:16	9:34	7	s -> channel_mode > AC3_CHMODE_STEREO
water	9:16	0:0	8	s
op	9:17	0:0	8	->
water	9:19	0:0	8	channel_mode
op	9:32	0:0	8	>
water	9:34	0:0	8	AC3_CHMODE_STEREO
stmts	10:16	10:31	7	
water	10:16	0:0	8	frame_bits
op	10:27	0:0	8	+=
water	10:30	0:0	8	2
water	10:31	0:0	8	;
if	11:12	12:31	6	(s -> has_center)
cond	11:16	11:19	7	s -> has_center
water	11:16	0:0	8	s
op	11:17	0:0	8	->
water	11:19	0:0	8	has_center
stmts	12:16	12:31	7	
water	12:16	0:0	8	frame_bits
op	12:27	0:0	8	+=
water	12:30	0:0	8	6
water	12:31	0:0	8	;
if	13:12	14:31	6	(s -> has_surround)
cond	13:16	13:19	7	s -> has_surround
water	13:16	0:0	8	s
op	13:17	0:0	8	->
water	13:19	0:0	8	has_surround
stmts	14:16	14:31	7	
water	14:16	0:0	8	frame_bits
op	14:27	0:0	8	+=
water	14:30	0:0	8	6
water	14:31	0:0	8	;
water	15:12	0:0	6	frame_bits
op	15:23	0:0	6	+=
water	15:26	0:0	6	s
op	15:27	0:0	6	->
water	15:29	0:0	6	lfe_on
water	15:35	0:0	6	;
water	16:12	0:0	6	frame_bits
op	16:23	0:0	6	+=
water	16:26	0:0	6	1
op	16:28	0:0	6	+
water	16:30	0:0	6	1
op	16:32	0:0	6	+
water	16:34	0:0	6	2
water	16:35	0:0	6	;
if	17:12	18:28	6	(s -> channel_mode < AC3_CHMODE_STEREO)
cond	17:16	17:34	7	s -> channel_mode < AC3_CHMODE_STEREO
water	17:16	0:0	8	s
op	17:17	0:0	8	->
water	17:19	0:0	8	channel_mode
op	17:32	0:0	8	<
water	17:34	0:0	8	AC3_CHMODE_STEREO
stmts	18:16	18:28	7	
water	18:16	0:0	8	frame_bits
op	18:26	0:0	8	++
water	18:28	0:0	8	;
water	19:12	0:0	6	frame_bits
op	19:22	0:0	6	++
water	19:24	0:0	6	;
water	20:8	0:0	6	}
if	21:8	31:8	4	(opt -> eac3_info_metadata)
cond	21:12	21:17	5	opt -> eac3_info_metadata
water	21:12	0:0	6	opt
op	21:15	0:0	6	->
water	21:17	0:0	6	eac3_info_metadata
stmts	21:37	31:8	5	
water	21:37	0:0	6	{
water	22:12	0:0	6	frame_bits
op	22:23	0:0	6	+=
water	22:26	0:0	6	3
op	22:28	0:0	6	+
water	22:30	0:0	6	1
op	22:32	0:0	6	+
water	22:34	0:0	6	1
water	22:35	0:0	6	;
if	23:12	24:35	6	(s -> channel_mode == AC3_CHMODE_STEREO)
cond	23:16	23:35	7	s -> channel_mode == AC3_CHMODE_STEREO
water	23:16	0:0	8	s
op	23:17	0:0	8	->
water	23:19	0:0	8	channel_mode
op	23:32	0:0	8	==
water	23:35	0:0	8	AC3_CHMODE_STEREO
stmts	24:16	24:35	7	
water	24:16	0:0	8	frame_bits
op	24:27	0:0	8	+=
water	24:30	0:0	8	2
op	24:32	0:0	8	+
water	24:34	0:0	8	2
water	24:35	0:0	8	;
if	25:12	26:31	6	(s -> channel_mode >= AC3_CHMODE_2F2R)
cond	25:16	25:35	7	s -> channel_mode >= AC3_CHMODE_2F2R
water	25:16	0:0	8	s
op	25:17	0:0	8	->
water	25:19	0:0	8	channel_mode
op	25:32	0:0	8	>=
water	25:35	0:0	8	AC3_CHMODE_2F2R
stmts	26:16	26:31	7	
water	26:16	0:0	8	frame_bits
op	26:27	0:0	8	+=
water	26:30	0:0	8	2
water	26:31	0:0	8	;
water	27:12	0:0	6	frame_bits
op	27:22	0:0	6	++
water	27:24	0:0	6	;
if	28:12	29:39	6	(opt -> audio_production_info)
cond	28:16	28:21	7	opt -> audio_production_info
water	28:16	0:0	8	opt
op	28:19	0:0	8	->
water	28:21	0:0	8	audio_production_info
stmts	29:16	29:39	7	
water	29:16	0:0	8	frame_bits
op	29:27	0:0	8	+=
water	29:30	0:0	8	5
op	29:32	0:0	8	+
water	29:34	0:0	8	2
op	29:36	0:0	8	+
water	29:38	0:0	8	1
water	29:39	0:0	8	;
water	30:12	0:0	6	frame_bits
op	30:22	0:0	6	++
water	30:24	0:0	6	;
water	31:8	0:0	6	}
if	33:8	41:8	4	(s -> channel_mode > AC3_CHMODE_MONO)
cond	33:12	33:30	5	s -> channel_mode > AC3_CHMODE_MONO
water	33:12	0:0	6	s
op	33:13	0:0	6	->
water	33:15	0:0	6	channel_mode
op	33:28	0:0	6	>
water	33:30	0:0	6	AC3_CHMODE_MONO
stmts	33:47	41:8	5	
water	33:47	0:0	6	{
water	34:12	0:0	6	frame_bits
op	34:22	0:0	6	++
water	34:24	0:0	6	;
for	35:12	40:12	6	(blk = 1 ;blk < s -> num_blocks;blk ++)
forinit	35:17	35:24	7	blk = 1 ;
water	35:17	0:0	8	blk
op	35:21	0:0	8	=
water	35:23	0:0	8	1
water	35:24	0:0	8	;
cond	35:26	35:35	7	blk < s -> num_blocks
water	35:26	0:0	8	blk
op	35:30	0:0	8	<
water	35:32	0:0	8	s
op	35:33	0:0	8	->
water	35:35	0:0	8	num_blocks
forexpr	35:47	35:50	7	blk ++
water	35:47	0:0	8	blk
op	35:50	0:0	8	++
stmts	35:54	40:12	7	
water	35:54	0:0	8	{
decl	36:16	36:49	8	AC3Block	*block
op	36:32	0:0	8	=
op	36:34	0:0	8	&
water	36:35	0:0	8	s
op	36:36	0:0	8	->
water	36:38	0:0	8	blocks
op	36:44	0:0	8	[
water	36:45	0:0	8	blk
op	36:48	0:0	8	]
water	37:16	0:0	8	frame_bits
op	37:26	0:0	8	++
water	37:28	0:0	8	;
if	38:16	39:32	8	(block -> new_cpl_strategy)
cond	38:20	38:27	9	block -> new_cpl_strategy
water	38:20	0:0	10	block
op	38:25	0:0	10	->
water	38:27	0:0	10	new_cpl_strategy
stmts	39:20	39:32	9	
water	39:20	0:0	10	frame_bits
op	39:30	0:0	10	++
water	39:32	0:0	10	;
water	40:12	0:0	8	}
water	41:8	0:0	6	}
if	43:8	50:8	4	(s -> cpl_on)
cond	43:12	43:15	5	s -> cpl_on
water	43:12	0:0	6	s
op	43:13	0:0	6	->
water	43:15	0:0	6	cpl_on
stmts	43:23	50:8	5	
water	43:23	0:0	6	{
if	44:12	46:12	6	(s -> use_frame_exp_strategy)
cond	44:16	44:19	7	s -> use_frame_exp_strategy
water	44:16	0:0	8	s
op	44:17	0:0	8	->
water	44:19	0:0	8	use_frame_exp_strategy
stmts	44:43	46:12	7	
water	44:43	0:0	8	{
water	45:16	0:0	8	frame_bits
op	45:27	0:0	8	+=
water	45:30	0:0	8	5
op	45:32	0:0	8	*
water	45:34	0:0	8	s
op	45:35	0:0	8	->
water	45:37	0:0	8	cpl_on
water	45:43	0:0	8	;
water	46:12	0:0	8	}
else	46:14	49:12	6
stmts	46:19	49:12	7	
water	46:19	0:0	8	{
for	47:16	48:63	8	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	47:21	47:28	9	blk = 0 ;
water	47:21	0:0	10	blk
op	47:25	0:0	10	=
water	47:27	0:0	10	0
water	47:28	0:0	10	;
cond	47:30	47:39	9	blk < s -> num_blocks
water	47:30	0:0	10	blk
op	47:34	0:0	10	<
water	47:36	0:0	10	s
op	47:37	0:0	10	->
water	47:39	0:0	10	num_blocks
forexpr	47:51	47:54	9	blk ++
water	47:51	0:0	10	blk
op	47:54	0:0	10	++
stmts	48:20	48:63	9	
water	48:20	0:0	10	frame_bits
op	48:31	0:0	10	+=
water	48:34	0:0	10	2
op	48:36	0:0	10	*
water	48:38	0:0	10	s
op	48:39	0:0	10	->
water	48:41	0:0	10	blocks
op	48:47	0:0	10	[
water	48:48	0:0	10	blk
op	48:51	0:0	10	]
op	48:52	0:0	10	.
water	48:53	0:0	10	cpl_in_use
water	48:63	0:0	10	;
water	49:12	0:0	8	}
water	50:8	0:0	6	}
water	51:4	0:0	4	}
else	51:6	60:4	2
stmts	51:11	60:4	3	
water	51:11	0:0	4	{
if	52:8	53:27	4	(opt -> audio_production_info)
cond	52:12	52:17	5	opt -> audio_production_info
water	52:12	0:0	6	opt
op	52:15	0:0	6	->
water	52:17	0:0	6	audio_production_info
stmts	53:12	53:27	5	
water	53:12	0:0	6	frame_bits
op	53:23	0:0	6	+=
water	53:26	0:0	6	7
water	53:27	0:0	6	;
if	54:8	59:8	4	(s -> bitstream_id == 6)
cond	54:12	54:31	5	s -> bitstream_id == 6
water	54:12	0:0	6	s
op	54:13	0:0	6	->
water	54:15	0:0	6	bitstream_id
op	54:28	0:0	6	==
water	54:31	0:0	6	6
stmts	54:34	59:8	5	
water	54:34	0:0	6	{
if	55:12	56:32	6	(opt -> extended_bsi_1)
cond	55:16	55:21	7	opt -> extended_bsi_1
water	55:16	0:0	8	opt
op	55:19	0:0	8	->
water	55:21	0:0	8	extended_bsi_1
stmts	56:16	56:32	7	
water	56:16	0:0	8	frame_bits
op	56:27	0:0	8	+=
water	56:30	0:0	8	14
water	56:32	0:0	8	;
if	57:12	58:32	6	(opt -> extended_bsi_2)
cond	57:16	57:21	7	opt -> extended_bsi_2
water	57:16	0:0	8	opt
op	57:19	0:0	8	->
water	57:21	0:0	8	extended_bsi_2
stmts	58:16	58:32	7	
water	58:16	0:0	8	frame_bits
op	58:27	0:0	8	+=
water	58:30	0:0	8	14
water	58:32	0:0	8	;
water	59:8	0:0	6	}
water	60:4	0:0	4	}
for	62:4	128:4	2	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	62:9	62:16	3	blk = 0 ;
water	62:9	0:0	4	blk
op	62:13	0:0	4	=
water	62:15	0:0	4	0
water	62:16	0:0	4	;
cond	62:18	62:27	3	blk < s -> num_blocks
water	62:18	0:0	4	blk
op	62:22	0:0	4	<
water	62:24	0:0	4	s
op	62:25	0:0	4	->
water	62:27	0:0	4	num_blocks
forexpr	62:39	62:42	3	blk ++
water	62:39	0:0	4	blk
op	62:42	0:0	4	++
stmts	62:46	128:4	3	
water	62:46	0:0	4	{
decl	63:8	63:41	4	AC3Block	*block
op	63:24	0:0	4	=
op	63:26	0:0	4	&
water	63:27	0:0	4	s
op	63:28	0:0	4	->
water	63:30	0:0	4	blocks
op	63:36	0:0	4	[
water	63:37	0:0	4	blk
op	63:40	0:0	4	]
if	65:8	66:24	4	(! s -> eac3)
cond	65:12	65:16	5	! s -> eac3
op	65:12	0:0	6	!
water	65:13	0:0	6	s
op	65:14	0:0	6	->
water	65:16	0:0	6	eac3
stmts	66:12	66:24	5	
water	66:12	0:0	6	frame_bits
op	66:22	0:0	6	++
water	66:24	0:0	6	;
if	67:8	83:8	4	(block -> new_cpl_strategy)
cond	67:12	67:19	5	block -> new_cpl_strategy
water	67:12	0:0	6	block
op	67:17	0:0	6	->
water	67:19	0:0	6	new_cpl_strategy
stmts	67:37	83:8	5	
water	67:37	0:0	6	{
if	68:12	69:28	6	(! s -> eac3)
cond	68:16	68:20	7	! s -> eac3
op	68:16	0:0	8	!
water	68:17	0:0	8	s
op	68:18	0:0	8	->
water	68:20	0:0	8	eac3
stmts	69:16	69:28	7	
water	69:16	0:0	8	frame_bits
op	69:26	0:0	8	++
water	69:28	0:0	8	;
if	70:12	82:12	6	(block -> cpl_in_use)
cond	70:16	70:23	7	block -> cpl_in_use
water	70:16	0:0	8	block
op	70:21	0:0	8	->
water	70:23	0:0	8	cpl_in_use
stmts	70:35	82:12	7	
water	70:35	0:0	8	{
if	71:16	72:32	8	(s -> eac3)
cond	71:20	71:23	9	s -> eac3
water	71:20	0:0	10	s
op	71:21	0:0	10	->
water	71:23	0:0	10	eac3
stmts	72:20	72:32	9	
water	72:20	0:0	10	frame_bits
op	72:30	0:0	10	++
water	72:32	0:0	10	;
if	73:16	74:49	8	(! s -> eac3 || s -> channel_mode != AC3_CHMODE_STEREO)
cond	73:20	73:51	9	! s -> eac3 || s -> channel_mode != AC3_CHMODE_STEREO
op	73:20	0:0	10	!
water	73:21	0:0	10	s
op	73:22	0:0	10	->
water	73:24	0:0	10	eac3
op	73:29	0:0	10	||
water	73:32	0:0	10	s
op	73:33	0:0	10	->
water	73:35	0:0	10	channel_mode
op	73:48	0:0	10	!=
water	73:51	0:0	10	AC3_CHMODE_STEREO
stmts	74:20	74:49	9	
water	74:20	0:0	10	frame_bits
op	74:31	0:0	10	+=
water	74:34	0:0	10	s
op	74:35	0:0	10	->
water	74:37	0:0	10	fbw_channels
water	74:49	0:0	10	;
if	75:16	76:32	8	(s -> channel_mode == AC3_CHMODE_STEREO)
cond	75:20	75:39	9	s -> channel_mode == AC3_CHMODE_STEREO
water	75:20	0:0	10	s
op	75:21	0:0	10	->
water	75:23	0:0	10	channel_mode
op	75:36	0:0	10	==
water	75:39	0:0	10	AC3_CHMODE_STEREO
stmts	76:20	76:32	9	
water	76:20	0:0	10	frame_bits
op	76:30	0:0	10	++
water	76:32	0:0	10	;
water	77:16	0:0	8	frame_bits
op	77:27	0:0	8	+=
water	77:30	0:0	8	4
op	77:32	0:0	8	+
water	77:34	0:0	8	4
water	77:35	0:0	8	;
if	78:16	79:32	8	(s -> eac3)
cond	78:20	78:23	9	s -> eac3
water	78:20	0:0	10	s
op	78:21	0:0	10	->
water	78:23	0:0	10	eac3
stmts	79:20	79:32	9	
water	79:20	0:0	10	frame_bits
op	79:30	0:0	10	++
water	79:32	0:0	10	;
else	80:16	81:57	8
stmts	81:20	81:57	9	
water	81:20	0:0	10	frame_bits
op	81:31	0:0	10	+=
water	81:34	0:0	10	s
op	81:35	0:0	10	->
water	81:37	0:0	10	num_cpl_subbands
op	81:54	0:0	10	-
water	81:56	0:0	10	1
water	81:57	0:0	10	;
water	82:12	0:0	8	}
water	83:8	0:0	6	}
if	85:8	96:8	4	(block -> cpl_in_use)
cond	85:12	85:19	5	block -> cpl_in_use
water	85:12	0:0	6	block
op	85:17	0:0	6	->
water	85:19	0:0	6	cpl_in_use
stmts	85:31	96:8	5	
water	85:31	0:0	6	{
for	86:12	95:12	6	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	86:17	86:23	7	ch = 1 ;
water	86:17	0:0	8	ch
op	86:20	0:0	8	=
water	86:22	0:0	8	1
water	86:23	0:0	8	;
cond	86:25	86:34	7	ch <= s -> fbw_channels
water	86:25	0:0	8	ch
op	86:28	0:0	8	<=
water	86:31	0:0	8	s
op	86:32	0:0	8	->
water	86:34	0:0	8	fbw_channels
forexpr	86:48	86:50	7	ch ++
water	86:48	0:0	8	ch
op	86:50	0:0	8	++
stmts	86:54	95:12	7	
water	86:54	0:0	8	{
if	87:16	94:16	8	(block -> channel_in_cpl [ ch ])
cond	87:20	87:44	9	block -> channel_in_cpl [ ch ]
water	87:20	0:0	10	block
op	87:25	0:0	10	->
water	87:27	0:0	10	channel_in_cpl
op	87:41	0:0	10	[
water	87:42	0:0	10	ch
op	87:44	0:0	10	]
stmts	87:47	94:16	9	
water	87:47	0:0	10	{
if	88:20	89:36	10	(! s -> eac3 || block -> new_cpl_coords [ ch ] != 2)
cond	88:24	88:65	11	! s -> eac3 || block -> new_cpl_coords [ ch ] != 2
op	88:24	0:0	12	!
water	88:25	0:0	12	s
op	88:26	0:0	12	->
water	88:28	0:0	12	eac3
op	88:33	0:0	12	||
water	88:36	0:0	12	block
op	88:41	0:0	12	->
water	88:43	0:0	12	new_cpl_coords
op	88:57	0:0	12	[
water	88:58	0:0	12	ch
op	88:60	0:0	12	]
op	88:62	0:0	12	!=
water	88:65	0:0	12	2
stmts	89:24	89:36	11	
water	89:24	0:0	12	frame_bits
op	89:34	0:0	12	++
water	89:36	0:0	12	;
if	90:20	93:20	10	(block -> new_cpl_coords [ ch ])
cond	90:24	90:48	11	block -> new_cpl_coords [ ch ]
water	90:24	0:0	12	block
op	90:29	0:0	12	->
water	90:31	0:0	12	new_cpl_coords
op	90:45	0:0	12	[
water	90:46	0:0	12	ch
op	90:48	0:0	12	]
stmts	90:51	93:20	11	
water	90:51	0:0	12	{
water	91:24	0:0	12	frame_bits
op	91:35	0:0	12	+=
water	91:38	0:0	12	2
water	91:39	0:0	12	;
water	92:24	0:0	12	frame_bits
op	92:35	0:0	12	+=
water	92:38	0:0	12	(
water	92:39	0:0	12	4
op	92:41	0:0	12	+
water	92:43	0:0	12	4
water	92:44	0:0	12	)
op	92:46	0:0	12	*
water	92:48	0:0	12	s
op	92:49	0:0	12	->
water	92:51	0:0	12	num_cpl_bands
water	92:64	0:0	12	;
water	93:20	0:0	12	}
water	94:16	0:0	10	}
water	95:12	0:0	8	}
water	96:8	0:0	6	}
if	98:8	103:8	4	(s -> channel_mode == AC3_CHMODE_STEREO)
cond	98:12	98:31	5	s -> channel_mode == AC3_CHMODE_STEREO
water	98:12	0:0	6	s
op	98:13	0:0	6	->
water	98:15	0:0	6	channel_mode
op	98:28	0:0	6	==
water	98:31	0:0	6	AC3_CHMODE_STEREO
stmts	98:50	103:8	5	
water	98:50	0:0	6	{
if	99:12	100:28	6	(! s -> eac3 || blk > 0)
cond	99:16	99:34	7	! s -> eac3 || blk > 0
op	99:16	0:0	8	!
water	99:17	0:0	8	s
op	99:18	0:0	8	->
water	99:20	0:0	8	eac3
op	99:25	0:0	8	||
water	99:28	0:0	8	blk
op	99:32	0:0	8	>
water	99:34	0:0	8	0
stmts	100:16	100:28	7	
water	100:16	0:0	8	frame_bits
op	100:26	0:0	8	++
water	100:28	0:0	8	;
if	101:12	102:58	6	(s -> blocks [ blk ] . new_rematrixing_strategy)
cond	101:16	101:31	7	s -> blocks [ blk ] . new_rematrixing_strategy
water	101:16	0:0	8	s
op	101:17	0:0	8	->
water	101:19	0:0	8	blocks
op	101:25	0:0	8	[
water	101:26	0:0	8	blk
op	101:29	0:0	8	]
op	101:30	0:0	8	.
water	101:31	0:0	8	new_rematrixing_strategy
stmts	102:16	102:58	7	
water	102:16	0:0	8	frame_bits
op	102:27	0:0	8	+=
water	102:30	0:0	8	block
op	102:35	0:0	8	->
water	102:37	0:0	8	num_rematrixing_bands
water	102:58	0:0	8	;
water	103:8	0:0	6	}
for	105:8	111:8	4	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	105:13	105:19	5	ch = 1 ;
water	105:13	0:0	6	ch
op	105:16	0:0	6	=
water	105:18	0:0	6	1
water	105:19	0:0	6	;
cond	105:21	105:30	5	ch <= s -> fbw_channels
water	105:21	0:0	6	ch
op	105:24	0:0	6	<=
water	105:27	0:0	6	s
op	105:28	0:0	6	->
water	105:30	0:0	6	fbw_channels
forexpr	105:44	105:46	5	ch ++
water	105:44	0:0	6	ch
op	105:46	0:0	6	++
stmts	105:50	111:8	5	
water	105:50	0:0	6	{
if	106:12	110:12	6	(s -> exp_strategy [ ch ] [ blk ] != EXP_REUSE)
cond	106:16	106:44	7	s -> exp_strategy [ ch ] [ blk ] != EXP_REUSE
water	106:16	0:0	8	s
op	106:17	0:0	8	->
water	106:19	0:0	8	exp_strategy
op	106:31	0:0	8	[
water	106:32	0:0	8	ch
op	106:34	0:0	8	]
op	106:35	0:0	8	[
water	106:36	0:0	8	blk
op	106:39	0:0	8	]
op	106:41	0:0	8	!=
water	106:44	0:0	8	EXP_REUSE
stmts	106:55	110:12	7	
water	106:55	0:0	8	{
if	107:16	108:35	8	(! block -> channel_in_cpl [ ch ])
cond	107:20	107:45	9	! block -> channel_in_cpl [ ch ]
op	107:20	0:0	10	!
water	107:21	0:0	10	block
op	107:26	0:0	10	->
water	107:28	0:0	10	channel_in_cpl
op	107:42	0:0	10	[
water	107:43	0:0	10	ch
op	107:45	0:0	10	]
stmts	108:20	108:35	9	
water	108:20	0:0	10	frame_bits
op	108:31	0:0	10	+=
water	108:34	0:0	10	6
water	108:35	0:0	10	;
water	109:16	0:0	8	frame_bits
op	109:27	0:0	8	+=
water	109:30	0:0	8	2
water	109:31	0:0	8	;
water	110:12	0:0	8	}
water	111:8	0:0	6	}
if	113:8	114:27	4	(! s -> eac3 && block -> cpl_in_use)
cond	113:12	113:31	5	! s -> eac3 && block -> cpl_in_use
op	113:12	0:0	6	!
water	113:13	0:0	6	s
op	113:14	0:0	6	->
water	113:16	0:0	6	eac3
op	113:21	0:0	6	&&
water	113:24	0:0	6	block
op	113:29	0:0	6	->
water	113:31	0:0	6	cpl_in_use
stmts	114:12	114:27	5	
water	114:12	0:0	6	frame_bits
op	114:23	0:0	6	+=
water	114:26	0:0	6	2
water	114:27	0:0	6	;
if	116:8	120:8	4	(! s -> eac3)
cond	116:12	116:16	5	! s -> eac3
op	116:12	0:0	6	!
water	116:13	0:0	6	s
op	116:14	0:0	6	->
water	116:16	0:0	6	eac3
stmts	116:22	120:8	5	
water	116:22	0:0	6	{
water	117:12	0:0	6	frame_bits
op	117:22	0:0	6	++
water	117:24	0:0	6	;
if	118:12	119:77	6	(block -> new_snr_offsets)
cond	118:16	118:23	7	block -> new_snr_offsets
water	118:16	0:0	8	block
op	118:21	0:0	8	->
water	118:23	0:0	8	new_snr_offsets
stmts	119:16	119:77	7	
water	119:16	0:0	8	frame_bits
op	119:27	0:0	8	+=
water	119:30	0:0	8	6
op	119:32	0:0	8	+
water	119:34	0:0	8	(
water	119:35	0:0	8	s
op	119:36	0:0	8	->
water	119:38	0:0	8	channels
op	119:47	0:0	8	+
water	119:49	0:0	8	block
op	119:54	0:0	8	->
water	119:56	0:0	8	cpl_in_use
water	119:66	0:0	8	)
op	119:68	0:0	8	*
water	119:70	0:0	8	(
water	119:71	0:0	8	4
op	119:73	0:0	8	+
water	119:75	0:0	8	3
water	119:76	0:0	8	)
water	119:77	0:0	8	;
water	120:8	0:0	6	}
if	122:8	127:8	4	(block -> cpl_in_use)
cond	122:12	122:19	5	block -> cpl_in_use
water	122:12	0:0	6	block
op	122:17	0:0	6	->
water	122:19	0:0	6	cpl_in_use
stmts	122:31	127:8	5	
water	122:31	0:0	6	{
if	123:12	124:28	6	(! s -> eac3 || block -> new_cpl_leak != 2)
cond	123:16	123:51	7	! s -> eac3 || block -> new_cpl_leak != 2
op	123:16	0:0	8	!
water	123:17	0:0	8	s
op	123:18	0:0	8	->
water	123:20	0:0	8	eac3
op	123:25	0:0	8	||
water	123:28	0:0	8	block
op	123:33	0:0	8	->
water	123:35	0:0	8	new_cpl_leak
op	123:48	0:0	8	!=
water	123:51	0:0	8	2
stmts	124:16	124:28	7	
water	124:16	0:0	8	frame_bits
op	124:26	0:0	8	++
water	124:28	0:0	8	;
if	125:12	126:35	6	(block -> new_cpl_leak)
cond	125:16	125:23	7	block -> new_cpl_leak
water	125:16	0:0	8	block
op	125:21	0:0	8	->
water	125:23	0:0	8	new_cpl_leak
stmts	126:16	126:35	7	
water	126:16	0:0	8	frame_bits
op	126:27	0:0	8	+=
water	126:30	0:0	8	3
op	126:32	0:0	8	+
water	126:34	0:0	8	3
water	126:35	0:0	8	;
water	127:8	0:0	6	}
water	128:4	0:0	4	}
water	129:4	0:0	2	s
op	129:5	0:0	2	->
water	129:7	0:0	2	frame_bits
op	129:18	0:0	2	=
water	129:20	0:0	2	s
op	129:21	0:0	2	->
water	129:23	0:0	2	frame_bits_fixed
op	129:40	0:0	2	+
water	129:42	0:0	2	frame_bits
water	129:52	0:0	2	;
