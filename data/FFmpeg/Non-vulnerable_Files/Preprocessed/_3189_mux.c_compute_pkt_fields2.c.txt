func	2:0	83:0	0	static int	compute_pkt_fields2
params	2:30	0:0	1	
param	2:31	2:49	2	AVFormatContext *	s
param	2:51	2:63	2	AVStream *	st
param	2:65	2:78	2	AVPacket *	pkt
stmnts	0:0	82:12	1	
decl	4:4	4:75	2	int	delay
op	4:14	0:0	2	=
call	4:16	4:74	3	FFMAX
arg	4:22	4:45	4	st->codec->has_b_frames
water	4:22	0:0	5	st
op	4:24	0:0	5	->
water	4:26	0:0	5	codec
op	4:31	0:0	5	->
water	4:33	0:0	5	has_b_frames
arg	4:47	4:74	4	st->codec->max_b_frames>0
water	4:47	0:0	5	st
op	4:49	0:0	5	->
water	4:51	0:0	5	codec
op	4:56	0:0	5	->
water	4:58	0:0	5	max_b_frames
op	4:71	0:0	5	>
water	4:73	0:0	5	0
decl	5:4	5:19	2	int	num
water	5:11	0:0	2	,
decl	5:4	5:19	2	int	den
water	5:16	0:0	2	,
decl	5:4	5:19	2	int	i
decl	6:4	6:18	2	int	frame_size
if	7:4	9:114	2	(s -> debug & FF_FDEBUG_TS)
cond	7:8	7:19	3	s -> debug & FF_FDEBUG_TS
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	debug
op	7:17	0:0	4	&
water	7:19	0:0	4	FF_FDEBUG_TS
stmts	8:8	9:114	3	
call	8:8	9:113	4	av_log
arg	8:15	8:16	5	s
water	8:15	0:0	6	s
arg	8:18	8:30	5	AV_LOG_TRACE
water	8:18	0:0	6	AV_LOG_TRACE
arg	8:32	8:100	5	"compute_pkt_fields2: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\n"
water	8:32	0:0	6	"compute_pkt_fields2: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\n"
arg	9:12	9:31	5	av_ts2str(pkt->pts)
call	9:12	9:30	6	av_ts2str
arg	9:22	9:30	7	pkt->pts
water	9:22	0:0	8	pkt
op	9:25	0:0	8	->
water	9:27	0:0	8	pts
arg	9:33	9:52	5	av_ts2str(pkt->dts)
call	9:33	9:51	6	av_ts2str
arg	9:43	9:51	7	pkt->dts
water	9:43	0:0	8	pkt
op	9:46	0:0	8	->
water	9:48	0:0	8	dts
arg	9:54	9:76	5	av_ts2str(st->cur_dts)
call	9:54	9:75	6	av_ts2str
arg	9:64	9:75	7	st->cur_dts
water	9:64	0:0	8	st
op	9:66	0:0	8	->
water	9:68	0:0	8	cur_dts
arg	9:78	9:83	5	delay
water	9:78	0:0	6	delay
arg	9:85	9:94	5	pkt->size
water	9:85	0:0	6	pkt
op	9:88	0:0	6	->
water	9:90	0:0	6	size
arg	9:96	9:113	5	pkt->stream_index
water	9:96	0:0	6	pkt
op	9:99	0:0	6	->
water	9:101	0:0	6	stream_index
water	9:114	0:0	4	;
if	10:4	14:4	2	(pkt -> duration < 0 && st -> codec -> codec_type != AVMEDIA_TYPE_SUBTITLE)
cond	10:8	10:54	3	pkt -> duration < 0 && st -> codec -> codec_type != AVMEDIA_TYPE_SUBTITLE
water	10:8	0:0	4	pkt
op	10:11	0:0	4	->
water	10:13	0:0	4	duration
op	10:22	0:0	4	<
water	10:24	0:0	4	0
op	10:26	0:0	4	&&
water	10:29	0:0	4	st
op	10:31	0:0	4	->
water	10:33	0:0	4	codec
op	10:38	0:0	4	->
water	10:40	0:0	4	codec_type
op	10:51	0:0	4	!=
water	10:54	0:0	4	AVMEDIA_TYPE_SUBTITLE
stmts	10:77	14:4	3	
water	10:77	0:0	4	{
call	11:8	12:47	4	av_log
arg	11:15	11:16	5	s
water	11:15	0:0	6	s
arg	11:18	11:32	5	AV_LOG_WARNING
water	11:18	0:0	6	AV_LOG_WARNING
arg	11:34	11:82	5	"Packet with invalid duration %d in stream %d\n"
water	11:34	0:0	6	"Packet with invalid duration %d in stream %d\n"
arg	12:15	12:28	5	pkt->duration
water	12:15	0:0	6	pkt
op	12:18	0:0	6	->
water	12:20	0:0	6	duration
arg	12:30	12:47	5	pkt->stream_index
water	12:30	0:0	6	pkt
op	12:33	0:0	6	->
water	12:35	0:0	6	stream_index
water	12:48	0:0	4	;
water	13:8	0:0	4	pkt
op	13:11	0:0	4	->
water	13:13	0:0	4	duration
op	13:22	0:0	4	=
water	13:24	0:0	4	0
water	13:25	0:0	4	;
water	14:4	0:0	4	}
if	16:4	21:4	2	(pkt -> duration == 0)
cond	16:8	16:25	3	pkt -> duration == 0
water	16:8	0:0	4	pkt
op	16:11	0:0	4	->
water	16:13	0:0	4	duration
op	16:22	0:0	4	==
water	16:25	0:0	4	0
stmts	16:28	21:4	3	
water	16:28	0:0	4	{
call	17:8	17:62	4	ff_compute_frame_duration
arg	17:34	17:35	5	s
water	17:34	0:0	6	s
arg	17:37	17:41	5	&num
op	17:37	0:0	6	&
water	17:38	0:0	6	num
arg	17:43	17:47	5	&den
op	17:43	0:0	6	&
water	17:44	0:0	6	den
arg	17:49	17:51	5	st
water	17:49	0:0	6	st
arg	17:53	17:57	5	NULL
water	17:53	0:0	6	NULL
arg	17:59	17:62	5	pkt
water	17:59	0:0	6	pkt
water	17:63	0:0	4	;
if	18:8	20:8	4	(den && num)
cond	18:12	18:19	5	den && num
water	18:12	0:0	6	den
op	18:16	0:0	6	&&
water	18:19	0:0	6	num
stmts	18:24	20:8	5	
water	18:24	0:0	6	{
water	19:12	0:0	6	pkt
op	19:15	0:0	6	->
water	19:17	0:0	6	duration
op	19:26	0:0	6	=
call	19:28	19:137	6	av_rescale
arg	19:39	19:40	7	1
water	19:39	0:0	8	1
arg	19:42	19:103	7	num*(int64_t)st->time_base.den*st->codec->ticks_per_frame
water	19:42	0:0	8	num
op	19:46	0:0	8	*
water	19:48	0:0	8	(
water	19:49	0:0	8	int64_t
water	19:56	0:0	8	)
water	19:57	0:0	8	st
op	19:59	0:0	8	->
water	19:61	0:0	8	time_base
op	19:70	0:0	8	.
water	19:71	0:0	8	den
op	19:75	0:0	8	*
water	19:77	0:0	8	st
op	19:79	0:0	8	->
water	19:81	0:0	8	codec
op	19:86	0:0	8	->
water	19:88	0:0	8	ticks_per_frame
arg	19:105	19:137	7	den*(int64_t)st->time_base.num
water	19:105	0:0	8	den
op	19:109	0:0	8	*
water	19:111	0:0	8	(
water	19:112	0:0	8	int64_t
water	19:119	0:0	8	)
water	19:120	0:0	8	st
op	19:122	0:0	8	->
water	19:124	0:0	8	time_base
op	19:133	0:0	8	.
water	19:134	0:0	8	num
water	19:138	0:0	6	;
water	20:8	0:0	6	}
water	21:4	0:0	4	}
if	22:4	23:27	2	(pkt -> pts == AV_NOPTS_VALUE && pkt -> dts != AV_NOPTS_VALUE && delay == 0)
cond	22:8	22:77	3	pkt -> pts == AV_NOPTS_VALUE && pkt -> dts != AV_NOPTS_VALUE && delay == 0
water	22:8	0:0	4	pkt
op	22:11	0:0	4	->
water	22:13	0:0	4	pts
op	22:17	0:0	4	==
water	22:20	0:0	4	AV_NOPTS_VALUE
op	22:35	0:0	4	&&
water	22:38	0:0	4	pkt
op	22:41	0:0	4	->
water	22:43	0:0	4	dts
op	22:47	0:0	4	!=
water	22:50	0:0	4	AV_NOPTS_VALUE
op	22:65	0:0	4	&&
water	22:68	0:0	4	delay
op	22:74	0:0	4	==
water	22:77	0:0	4	0
stmts	23:8	23:27	3	
water	23:8	0:0	4	pkt
op	23:11	0:0	4	->
water	23:13	0:0	4	pts
op	23:17	0:0	4	=
water	23:19	0:0	4	pkt
op	23:22	0:0	4	->
water	23:24	0:0	4	dts
water	23:27	0:0	4	;
if	25:4	34:4	2	(( pkt -> pts == 0 || pkt -> pts == AV_NOPTS_VALUE ) && pkt -> dts == AV_NOPTS_VALUE && ! delay)
cond	25:8	25:88	3	( pkt -> pts == 0 || pkt -> pts == AV_NOPTS_VALUE ) && pkt -> dts == AV_NOPTS_VALUE && ! delay
water	25:8	0:0	4	(
water	25:9	0:0	4	pkt
op	25:12	0:0	4	->
water	25:14	0:0	4	pts
op	25:18	0:0	4	==
water	25:21	0:0	4	0
op	25:23	0:0	4	||
water	25:26	0:0	4	pkt
op	25:29	0:0	4	->
water	25:31	0:0	4	pts
op	25:35	0:0	4	==
water	25:38	0:0	4	AV_NOPTS_VALUE
water	25:52	0:0	4	)
op	25:54	0:0	4	&&
water	25:57	0:0	4	pkt
op	25:60	0:0	4	->
water	25:62	0:0	4	dts
op	25:66	0:0	4	==
water	25:69	0:0	4	AV_NOPTS_VALUE
op	25:84	0:0	4	&&
op	25:87	0:0	4	!
water	25:88	0:0	4	delay
stmts	25:95	34:4	3	
water	25:95	0:0	4	{
water	26:8	0:0	4	static
water	26:15	0:0	4	int
water	26:19	0:0	4	warned
water	26:25	0:0	4	;
if	27:8	30:8	4	(! warned)
cond	27:12	27:13	5	! warned
op	27:12	0:0	6	!
water	27:13	0:0	6	warned
stmts	27:21	30:8	5	
water	27:21	0:0	6	{
call	28:12	28:93	6	av_log
arg	28:19	28:20	7	s
water	28:19	0:0	8	s
arg	28:22	28:36	7	AV_LOG_WARNING
water	28:22	0:0	8	AV_LOG_WARNING
arg	28:38	28:93	7	"Encoder did not produce proper pts, making some up.\n"
water	28:38	0:0	8	"Encoder did not produce proper pts, making some up.\n"
water	28:94	0:0	6	;
water	29:12	0:0	6	warned
op	29:19	0:0	6	=
water	29:21	0:0	6	1
water	29:22	0:0	6	;
water	30:8	0:0	6	}
water	31:8	0:0	4	pkt
op	31:11	0:0	4	->
water	31:13	0:0	4	dts
op	31:17	0:0	4	=
water	33:12	0:0	4	pkt
op	33:15	0:0	4	->
water	33:17	0:0	4	pts
op	33:21	0:0	4	=
water	33:23	0:0	4	st
op	33:25	0:0	4	->
water	33:27	0:0	4	priv_pts
op	33:35	0:0	4	->
water	33:37	0:0	4	val
water	33:40	0:0	4	;
water	34:4	0:0	4	}
if	36:4	43:4	2	(pkt -> pts != AV_NOPTS_VALUE && pkt -> dts == AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY)
cond	36:8	36:77	3	pkt -> pts != AV_NOPTS_VALUE && pkt -> dts == AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY
water	36:8	0:0	4	pkt
op	36:11	0:0	4	->
water	36:13	0:0	4	pts
op	36:17	0:0	4	!=
water	36:20	0:0	4	AV_NOPTS_VALUE
op	36:35	0:0	4	&&
water	36:38	0:0	4	pkt
op	36:41	0:0	4	->
water	36:43	0:0	4	dts
op	36:47	0:0	4	==
water	36:50	0:0	4	AV_NOPTS_VALUE
op	36:65	0:0	4	&&
water	36:68	0:0	4	delay
op	36:74	0:0	4	<=
water	36:77	0:0	4	MAX_REORDER_DELAY
stmts	36:96	43:4	3	
water	36:96	0:0	4	{
water	37:8	0:0	4	st
op	37:10	0:0	4	->
water	37:12	0:0	4	pts_buffer
op	37:22	0:0	4	[
water	37:23	0:0	4	0
op	37:24	0:0	4	]
op	37:26	0:0	4	=
water	37:28	0:0	4	pkt
op	37:31	0:0	4	->
water	37:33	0:0	4	pts
water	37:36	0:0	4	;
for	38:8	39:74	4	(i = 1 ;i < delay + 1 && st -> pts_buffer [ i ] == AV_NOPTS_VALUE;i ++)
forinit	38:13	38:18	5	i = 1 ;
water	38:13	0:0	6	i
op	38:15	0:0	6	=
water	38:17	0:0	6	1
water	38:18	0:0	6	;
cond	38:20	38:58	5	i < delay + 1 && st -> pts_buffer [ i ] == AV_NOPTS_VALUE
water	38:20	0:0	6	i
op	38:22	0:0	6	<
water	38:24	0:0	6	delay
op	38:30	0:0	6	+
water	38:32	0:0	6	1
op	38:34	0:0	6	&&
water	38:37	0:0	6	st
op	38:39	0:0	6	->
water	38:41	0:0	6	pts_buffer
op	38:51	0:0	6	[
water	38:52	0:0	6	i
op	38:53	0:0	6	]
op	38:55	0:0	6	==
water	38:58	0:0	6	AV_NOPTS_VALUE
forexpr	38:74	38:75	5	i ++
water	38:74	0:0	6	i
op	38:75	0:0	6	++
stmts	39:12	39:74	5	
water	39:12	0:0	6	st
op	39:14	0:0	6	->
water	39:16	0:0	6	pts_buffer
op	39:26	0:0	6	[
water	39:27	0:0	6	i
op	39:28	0:0	6	]
op	39:30	0:0	6	=
water	39:32	0:0	6	pkt
op	39:35	0:0	6	->
water	39:37	0:0	6	pts
op	39:41	0:0	6	+
water	39:43	0:0	6	(
water	39:44	0:0	6	i
op	39:46	0:0	6	-
water	39:48	0:0	6	delay
op	39:54	0:0	6	-
water	39:56	0:0	6	1
water	39:57	0:0	6	)
op	39:59	0:0	6	*
water	39:61	0:0	6	pkt
op	39:64	0:0	6	->
water	39:66	0:0	6	duration
water	39:74	0:0	6	;
for	40:8	41:69	4	(i = 0 ;i < delay && st -> pts_buffer [ i ] > st -> pts_buffer [ i + 1 ];i ++)
forinit	40:13	40:18	5	i = 0 ;
water	40:13	0:0	6	i
op	40:15	0:0	6	=
water	40:17	0:0	6	0
water	40:18	0:0	6	;
cond	40:20	40:71	5	i < delay && st -> pts_buffer [ i ] > st -> pts_buffer [ i + 1 ]
water	40:20	0:0	6	i
op	40:21	0:0	6	<
water	40:22	0:0	6	delay
op	40:28	0:0	6	&&
water	40:31	0:0	6	st
op	40:33	0:0	6	->
water	40:35	0:0	6	pts_buffer
op	40:45	0:0	6	[
water	40:46	0:0	6	i
op	40:47	0:0	6	]
op	40:49	0:0	6	>
water	40:51	0:0	6	st
op	40:53	0:0	6	->
water	40:55	0:0	6	pts_buffer
op	40:65	0:0	6	[
water	40:66	0:0	6	i
op	40:68	0:0	6	+
water	40:70	0:0	6	1
op	40:71	0:0	6	]
forexpr	40:74	40:75	5	i ++
water	40:74	0:0	6	i
op	40:75	0:0	6	++
stmts	41:12	41:69	5	
call	41:12	41:68	6	FFSWAP
arg	41:19	41:26	7	int64_t
water	41:19	0:0	8	int64_t
arg	41:28	41:45	7	st->pts_buffer[i]
water	41:28	0:0	8	st
op	41:30	0:0	8	->
water	41:32	0:0	8	pts_buffer
op	41:42	0:0	8	[
water	41:43	0:0	8	i
op	41:44	0:0	8	]
arg	41:47	41:68	7	st->pts_buffer[i+1]
water	41:47	0:0	8	st
op	41:49	0:0	8	->
water	41:51	0:0	8	pts_buffer
op	41:61	0:0	8	[
water	41:62	0:0	8	i
op	41:64	0:0	8	+
water	41:66	0:0	8	1
op	41:67	0:0	8	]
water	41:69	0:0	6	;
water	42:8	0:0	4	pkt
op	42:11	0:0	4	->
water	42:13	0:0	4	dts
op	42:17	0:0	4	=
water	42:19	0:0	4	st
op	42:21	0:0	4	->
water	42:23	0:0	4	pts_buffer
op	42:33	0:0	4	[
water	42:34	0:0	4	0
op	42:35	0:0	4	]
water	42:36	0:0	4	;
water	43:4	0:0	4	}
if	44:4	52:4	2	(st -> cur_dts && st -> cur_dts != AV_NOPTS_VALUE && ( ( ! ( s -> oformat -> flags & AVFMT_TS_NONSTRICT ) && st -> codec -> codec_type != AVMEDIA_TYPE_SUBTITLE && st -> cur_dts >= pkt -> dts ) || st -> cur_dts > pkt -> dts ))
cond	44:8	47:60	3	st -> cur_dts && st -> cur_dts != AV_NOPTS_VALUE && ( ( ! ( s -> oformat -> flags & AVFMT_TS_NONSTRICT ) && st -> codec -> codec_type != AVMEDIA_TYPE_SUBTITLE && st -> cur_dts >= pkt -> dts ) || st -> cur_dts > pkt -> dts )
water	44:8	0:0	4	st
op	44:10	0:0	4	->
water	44:12	0:0	4	cur_dts
op	44:20	0:0	4	&&
water	44:23	0:0	4	st
op	44:25	0:0	4	->
water	44:27	0:0	4	cur_dts
op	44:35	0:0	4	!=
water	44:38	0:0	4	AV_NOPTS_VALUE
op	44:53	0:0	4	&&
water	45:8	0:0	4	(
water	45:9	0:0	4	(
op	45:10	0:0	4	!
water	45:11	0:0	4	(
water	45:12	0:0	4	s
op	45:13	0:0	4	->
water	45:15	0:0	4	oformat
op	45:22	0:0	4	->
water	45:24	0:0	4	flags
op	45:30	0:0	4	&
water	45:32	0:0	4	AVFMT_TS_NONSTRICT
water	45:50	0:0	4	)
op	45:52	0:0	4	&&
water	46:10	0:0	4	st
op	46:12	0:0	4	->
water	46:14	0:0	4	codec
op	46:19	0:0	4	->
water	46:21	0:0	4	codec_type
op	46:32	0:0	4	!=
water	46:35	0:0	4	AVMEDIA_TYPE_SUBTITLE
op	46:57	0:0	4	&&
water	47:10	0:0	4	st
op	47:12	0:0	4	->
water	47:14	0:0	4	cur_dts
op	47:22	0:0	4	>=
water	47:25	0:0	4	pkt
op	47:28	0:0	4	->
water	47:30	0:0	4	dts
water	47:33	0:0	4	)
op	47:35	0:0	4	||
water	47:38	0:0	4	st
op	47:40	0:0	4	->
water	47:42	0:0	4	cur_dts
op	47:50	0:0	4	>
water	47:52	0:0	4	pkt
op	47:55	0:0	4	->
water	47:57	0:0	4	dts
water	47:60	0:0	4	)
stmts	47:63	52:4	3	
water	47:63	0:0	4	{
call	48:8	50:69	4	av_log
arg	48:15	48:16	5	s
water	48:15	0:0	6	s
arg	48:18	48:30	5	AV_LOG_ERROR
water	48:18	0:0	6	AV_LOG_ERROR
arg	49:15	49:113	5	"Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\n"
water	49:15	0:0	6	"Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\n"
arg	50:15	50:24	5	st->index
water	50:15	0:0	6	st
op	50:17	0:0	6	->
water	50:19	0:0	6	index
arg	50:26	50:48	5	av_ts2str(st->cur_dts)
call	50:26	50:47	6	av_ts2str
arg	50:36	50:47	7	st->cur_dts
water	50:36	0:0	8	st
op	50:38	0:0	8	->
water	50:40	0:0	8	cur_dts
arg	50:50	50:69	5	av_ts2str(pkt->dts)
call	50:50	50:68	6	av_ts2str
arg	50:60	50:68	7	pkt->dts
water	50:60	0:0	8	pkt
op	50:63	0:0	8	->
water	50:65	0:0	8	dts
water	50:70	0:0	4	;
return	51:8	51:30	4	AVERROR(EINVAL)
call	51:15	51:29	5	AVERROR
arg	51:23	51:29	6	EINVAL
water	51:23	0:0	7	EINVAL
water	52:4	0:0	4	}
if	53:4	59:4	2	(pkt -> dts != AV_NOPTS_VALUE && pkt -> pts != AV_NOPTS_VALUE && pkt -> pts < pkt -> dts)
cond	53:8	53:84	3	pkt -> dts != AV_NOPTS_VALUE && pkt -> pts != AV_NOPTS_VALUE && pkt -> pts < pkt -> dts
water	53:8	0:0	4	pkt
op	53:11	0:0	4	->
water	53:13	0:0	4	dts
op	53:17	0:0	4	!=
water	53:20	0:0	4	AV_NOPTS_VALUE
op	53:35	0:0	4	&&
water	53:38	0:0	4	pkt
op	53:41	0:0	4	->
water	53:43	0:0	4	pts
op	53:47	0:0	4	!=
water	53:50	0:0	4	AV_NOPTS_VALUE
op	53:65	0:0	4	&&
water	53:68	0:0	4	pkt
op	53:71	0:0	4	->
water	53:73	0:0	4	pts
op	53:77	0:0	4	<
water	53:79	0:0	4	pkt
op	53:82	0:0	4	->
water	53:84	0:0	4	dts
stmts	53:89	59:4	3	
water	53:89	0:0	4	{
call	54:8	57:24	4	av_log
arg	54:15	54:16	5	s
water	54:15	0:0	6	s
arg	54:18	54:30	5	AV_LOG_ERROR
water	54:18	0:0	6	AV_LOG_ERROR
arg	55:15	55:51	5	"pts (%s) < dts (%s) in stream %d\n"
water	55:15	0:0	6	"pts (%s) < dts (%s) in stream %d\n"
arg	56:15	56:34	5	av_ts2str(pkt->pts)
call	56:15	56:33	6	av_ts2str
arg	56:25	56:33	7	pkt->pts
water	56:25	0:0	8	pkt
op	56:28	0:0	8	->
water	56:30	0:0	8	pts
arg	56:36	56:55	5	av_ts2str(pkt->dts)
call	56:36	56:54	6	av_ts2str
arg	56:46	56:54	7	pkt->dts
water	56:46	0:0	8	pkt
op	56:49	0:0	8	->
water	56:51	0:0	8	dts
arg	57:15	57:24	5	st->index
water	57:15	0:0	6	st
op	57:17	0:0	6	->
water	57:19	0:0	6	index
water	57:25	0:0	4	;
return	58:8	58:30	4	AVERROR(EINVAL)
call	58:15	58:29	5	AVERROR
arg	58:23	58:29	6	EINVAL
water	58:23	0:0	7	EINVAL
water	59:4	0:0	4	}
if	60:4	62:53	2	(s -> debug & FF_FDEBUG_TS)
cond	60:8	60:19	3	s -> debug & FF_FDEBUG_TS
water	60:8	0:0	4	s
op	60:9	0:0	4	->
water	60:11	0:0	4	debug
op	60:17	0:0	4	&
water	60:19	0:0	4	FF_FDEBUG_TS
stmts	61:8	62:53	3	
call	61:8	62:52	4	av_log
arg	61:15	61:16	5	s
water	61:15	0:0	6	s
arg	61:18	61:30	5	AV_LOG_TRACE
water	61:18	0:0	6	AV_LOG_TRACE
arg	61:32	61:67	5	"av_write_frame: pts2:%s dts2:%s\n"
water	61:32	0:0	6	"av_write_frame: pts2:%s dts2:%s\n"
arg	62:12	62:31	5	av_ts2str(pkt->pts)
call	62:12	62:30	6	av_ts2str
arg	62:22	62:30	7	pkt->pts
water	62:22	0:0	8	pkt
op	62:25	0:0	8	->
water	62:27	0:0	8	pts
arg	62:33	62:52	5	av_ts2str(pkt->dts)
call	62:33	62:51	6	av_ts2str
arg	62:43	62:51	7	pkt->dts
water	62:43	0:0	8	pkt
op	62:46	0:0	8	->
water	62:48	0:0	8	dts
water	62:53	0:0	4	;
water	63:4	0:0	2	st
op	63:6	0:0	2	->
water	63:8	0:0	2	cur_dts
op	63:16	0:0	2	=
water	63:18	0:0	2	pkt
op	63:21	0:0	2	->
water	63:23	0:0	2	dts
water	63:26	0:0	2	;
water	64:4	0:0	2	st
op	64:6	0:0	2	->
water	64:8	0:0	2	priv_pts
op	64:16	0:0	2	->
water	64:18	0:0	2	val
op	64:22	0:0	2	=
water	64:24	0:0	2	pkt
op	64:27	0:0	2	->
water	64:29	0:0	2	dts
water	64:32	0:0	2	;
switch	66:4	81:4	2	(st -> codec -> codec_type)
cond	66:12	66:23	3	st -> codec -> codec_type
water	66:12	0:0	4	st
op	66:14	0:0	4	->
water	66:16	0:0	4	codec
op	66:21	0:0	4	->
water	66:23	0:0	4	codec_type
stmts	66:35	81:4	3	
water	66:35	0:0	4	{
label	67:4	67:27	4	case AVMEDIA_TYPE_AUDIO :
water	68:8	0:0	4	frame_size
op	68:19	0:0	4	=
water	68:21	0:0	4	(
water	68:22	0:0	4	pkt
op	68:25	0:0	4	->
water	68:27	0:0	4	flags
op	68:33	0:0	4	&
water	68:35	0:0	4	AV_PKT_FLAG_UNCODED_FRAME
water	68:60	0:0	4	)
water	68:62	0:0	4	?
water	69:21	0:0	4	(
water	69:22	0:0	4	(
water	69:23	0:0	4	AVFrame
op	69:31	0:0	4	*
water	69:32	0:0	4	)
water	69:33	0:0	4	pkt
op	69:36	0:0	4	->
water	69:38	0:0	4	data
water	69:42	0:0	4	)
op	69:43	0:0	4	->
water	69:45	0:0	4	nb_samples
water	69:56	0:0	4	:
call	70:21	70:69	4	av_get_audio_frame_duration
arg	70:49	70:58	5	st->codec
water	70:49	0:0	6	st
op	70:51	0:0	6	->
water	70:53	0:0	6	codec
arg	70:60	70:69	5	pkt->size
water	70:60	0:0	6	pkt
op	70:63	0:0	6	->
water	70:65	0:0	6	size
water	70:70	0:0	4	;
if	74:8	76:8	4	(frame_size >= 0 && ( pkt -> size || st -> priv_pts -> num != st -> priv_pts -> den >> 1 || st -> priv_pts -> val ))
cond	74:12	74:109	5	frame_size >= 0 && ( pkt -> size || st -> priv_pts -> num != st -> priv_pts -> den >> 1 || st -> priv_pts -> val )
water	74:12	0:0	6	frame_size
op	74:23	0:0	6	>=
water	74:26	0:0	6	0
op	74:28	0:0	6	&&
water	74:31	0:0	6	(
water	74:32	0:0	6	pkt
op	74:35	0:0	6	->
water	74:37	0:0	6	size
op	74:42	0:0	6	||
water	74:45	0:0	6	st
op	74:47	0:0	6	->
water	74:49	0:0	6	priv_pts
op	74:57	0:0	6	->
water	74:59	0:0	6	num
op	74:63	0:0	6	!=
water	74:66	0:0	6	st
op	74:68	0:0	6	->
water	74:70	0:0	6	priv_pts
op	74:78	0:0	6	->
water	74:80	0:0	6	den
op	74:84	0:0	6	>>
water	74:87	0:0	6	1
op	74:89	0:0	6	||
water	74:92	0:0	6	st
op	74:94	0:0	6	->
water	74:96	0:0	6	priv_pts
op	74:104	0:0	6	->
water	74:106	0:0	6	val
water	74:109	0:0	6	)
stmts	74:112	76:8	5	
water	74:112	0:0	6	{
call	75:12	75:74	6	frac_add
arg	75:21	75:33	7	st->priv_pts
water	75:21	0:0	8	st
op	75:23	0:0	8	->
water	75:25	0:0	8	priv_pts
arg	75:35	75:74	7	(int64_t)st->time_base.den*frame_size
water	75:35	0:0	8	(
water	75:36	0:0	8	int64_t
water	75:43	0:0	8	)
water	75:44	0:0	8	st
op	75:46	0:0	8	->
water	75:48	0:0	8	time_base
op	75:57	0:0	8	.
water	75:58	0:0	8	den
op	75:62	0:0	8	*
water	75:64	0:0	8	frame_size
water	75:75	0:0	6	;
water	76:8	0:0	6	}
break	77:8	77:13	4	
label	78:4	78:27	4	case AVMEDIA_TYPE_VIDEO :
call	79:8	79:84	4	frac_add
arg	79:17	79:29	5	st->priv_pts
water	79:17	0:0	6	st
op	79:19	0:0	6	->
water	79:21	0:0	6	priv_pts
arg	79:31	79:84	5	(int64_t)st->time_base.den*st->codec->time_base.num
water	79:31	0:0	6	(
water	79:32	0:0	6	int64_t
water	79:39	0:0	6	)
water	79:40	0:0	6	st
op	79:42	0:0	6	->
water	79:44	0:0	6	time_base
op	79:53	0:0	6	.
water	79:54	0:0	6	den
op	79:58	0:0	6	*
water	79:60	0:0	6	st
op	79:62	0:0	6	->
water	79:64	0:0	6	codec
op	79:69	0:0	6	->
water	79:71	0:0	6	time_base
op	79:80	0:0	6	.
water	79:81	0:0	6	num
water	79:85	0:0	4	;
break	80:8	80:13	4	
water	81:4	0:0	4	}
return	82:4	82:12	2	0
water	82:11	0:0	3	0
