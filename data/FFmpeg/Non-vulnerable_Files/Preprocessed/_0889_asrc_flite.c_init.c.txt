func	1:15	49:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	48:12	1	
decl	3:4	3:35	2	FliteContext	*flite
op	3:24	0:0	2	=
water	3:26	0:0	2	ctx
op	3:29	0:0	2	->
water	3:31	0:0	2	priv
decl	4:4	4:15	2	int	ret
op	4:12	0:0	2	=
water	4:14	0:0	2	0
if	5:4	8:4	2	(flite -> list_voices)
cond	5:8	5:15	3	flite -> list_voices
water	5:8	0:0	4	flite
op	5:13	0:0	4	->
water	5:15	0:0	4	list_voices
stmts	5:28	8:4	3	
water	5:28	0:0	4	{
call	6:8	6:29	4	list_voices
arg	6:20	6:23	5	ctx
water	6:20	0:0	6	ctx
arg	6:25	6:29	5	"\n"
water	6:25	0:0	6	"\n"
water	6:30	0:0	4	;
return	7:8	7:27	4	AVERROR_EXIT
water	7:15	0:0	5	AVERROR_EXIT
water	8:4	0:0	4	}
if	9:4	15:4	2	(! flite_inited)
cond	9:8	9:9	3	! flite_inited
op	9:8	0:0	4	!
water	9:9	0:0	4	flite_inited
stmts	9:23	15:4	3	
water	9:23	0:0	4	{
if	10:8	13:8	4	(flite_init ( ) < 0)
cond	10:12	10:27	5	flite_init ( ) < 0
call	10:12	10:23	6	flite_init
op	10:25	0:0	6	<
water	10:27	0:0	6	0
stmts	10:30	13:8	5	
water	10:30	0:0	6	{
call	11:12	11:69	6	av_log
arg	11:19	11:22	7	ctx
water	11:19	0:0	8	ctx
arg	11:24	11:36	7	AV_LOG_ERROR
water	11:24	0:0	8	AV_LOG_ERROR
arg	11:38	11:69	7	"flite initialization failed\n"
water	11:38	0:0	8	"flite initialization failed\n"
water	11:70	0:0	6	;
return	12:12	12:34	6	AVERROR_UNKNOWN
water	12:19	0:0	7	AVERROR_UNKNOWN
water	13:8	0:0	6	}
water	14:8	0:0	4	flite_inited
op	14:20	0:0	4	++
water	14:22	0:0	4	;
water	15:4	0:0	4	}
if	16:4	17:18	2	(( ret =select_voice (& flite -> voice_entry ,flite -> voice_str ,ctx ) ) < 0)
cond	16:8	16:75	3	( ret =select_voice (& flite -> voice_entry ,flite -> voice_str ,ctx ) ) < 0
water	16:8	0:0	4	(
water	16:9	0:0	4	ret
op	16:13	0:0	4	=
call	16:15	16:70	4	select_voice
arg	16:28	16:47	5	&flite->voice_entry
op	16:28	0:0	6	&
water	16:29	0:0	6	flite
op	16:34	0:0	6	->
water	16:36	0:0	6	voice_entry
arg	16:49	16:65	5	flite->voice_str
water	16:49	0:0	6	flite
op	16:54	0:0	6	->
water	16:56	0:0	6	voice_str
arg	16:67	16:70	5	ctx
water	16:67	0:0	6	ctx
water	16:71	0:0	4	)
op	16:73	0:0	4	<
water	16:75	0:0	4	0
stmts	17:8	17:18	3	
return	17:8	17:18	4	ret
water	17:15	0:0	5	ret
water	18:4	0:0	2	flite
op	18:9	0:0	2	->
water	18:11	0:0	2	voice
op	18:17	0:0	2	=
water	18:19	0:0	2	flite
op	18:24	0:0	2	->
water	18:26	0:0	2	voice_entry
op	18:37	0:0	2	->
water	18:39	0:0	2	voice
water	18:44	0:0	2	;
if	19:4	23:4	2	(flite -> textfile && flite -> text)
cond	19:8	19:34	3	flite -> textfile && flite -> text
water	19:8	0:0	4	flite
op	19:13	0:0	4	->
water	19:15	0:0	4	textfile
op	19:24	0:0	4	&&
water	19:27	0:0	4	flite
op	19:32	0:0	4	->
water	19:34	0:0	4	text
stmts	19:40	23:4	3	
water	19:40	0:0	4	{
call	20:8	21:81	4	av_log
arg	20:15	20:18	5	ctx
water	20:15	0:0	6	ctx
arg	20:20	20:32	5	AV_LOG_ERROR
water	20:20	0:0	6	AV_LOG_ERROR
arg	21:15	21:81	5	"Both text and textfile options set: only one must be specified\n"
water	21:15	0:0	6	"Both text and textfile options set: only one must be specified\n"
water	21:82	0:0	4	;
return	22:8	22:30	4	AVERROR(EINVAL)
call	22:15	22:29	5	AVERROR
arg	22:23	22:29	6	EINVAL
water	22:23	0:0	7	EINVAL
water	23:4	0:0	4	}
if	24:4	38:4	2	(flite -> textfile)
cond	24:8	24:15	3	flite -> textfile
water	24:8	0:0	4	flite
op	24:13	0:0	4	->
water	24:15	0:0	4	textfile
stmts	24:25	38:4	3	
water	24:25	0:0	4	{
decl	25:8	25:24	4	uint8_t	*textbuf
decl	26:8	26:27	4	size_t	textbuf_size
if	27:8	32:8	4	(( ret =av_file_map (flite -> textfile ,& textbuf ,& textbuf_size ,0 ,ctx ) ) < 0)
cond	27:12	27:84	5	( ret =av_file_map (flite -> textfile ,& textbuf ,& textbuf_size ,0 ,ctx ) ) < 0
water	27:12	0:0	6	(
water	27:13	0:0	6	ret
op	27:17	0:0	6	=
call	27:19	27:79	6	av_file_map
arg	27:31	27:46	7	flite->textfile
water	27:31	0:0	8	flite
op	27:36	0:0	8	->
water	27:38	0:0	8	textfile
arg	27:48	27:56	7	&textbuf
op	27:48	0:0	8	&
water	27:49	0:0	8	textbuf
arg	27:58	27:71	7	&textbuf_size
op	27:58	0:0	8	&
water	27:59	0:0	8	textbuf_size
arg	27:73	27:74	7	0
water	27:73	0:0	8	0
arg	27:76	27:79	7	ctx
water	27:76	0:0	8	ctx
water	27:80	0:0	6	)
op	27:82	0:0	6	<
water	27:84	0:0	6	0
stmts	27:87	32:8	5	
water	27:87	0:0	6	{
call	28:12	30:51	6	av_log
arg	28:19	28:22	7	ctx
water	28:19	0:0	8	ctx
arg	28:24	28:36	7	AV_LOG_ERROR
water	28:24	0:0	8	AV_LOG_ERROR
arg	29:19	29:63	7	"The text file '%s' could not be read: %s\n"
water	29:19	0:0	8	"The text file '%s' could not be read: %s\n"
arg	30:19	30:34	7	flite->textfile
water	30:19	0:0	8	flite
op	30:24	0:0	8	->
water	30:26	0:0	8	textfile
arg	30:36	30:51	7	av_err2str(ret)
call	30:36	30:50	8	av_err2str
arg	30:47	30:50	9	ret
water	30:47	0:0	10	ret
water	30:52	0:0	6	;
return	31:12	31:22	6	ret
water	31:19	0:0	7	ret
water	32:8	0:0	6	}
if	33:8	34:34	4	(! ( flite -> text =av_malloc (textbuf_size + 1 ) ))
cond	33:12	33:53	5	! ( flite -> text =av_malloc (textbuf_size + 1 ) )
op	33:12	0:0	6	!
water	33:13	0:0	6	(
water	33:14	0:0	6	flite
op	33:19	0:0	6	->
water	33:21	0:0	6	text
op	33:26	0:0	6	=
call	33:28	33:52	6	av_malloc
arg	33:38	33:52	7	textbuf_size+1
water	33:38	0:0	8	textbuf_size
op	33:50	0:0	8	+
water	33:51	0:0	8	1
water	33:53	0:0	6	)
stmts	34:12	34:34	5	
return	34:12	34:34	6	AVERROR(ENOMEM)
call	34:19	34:33	7	AVERROR
arg	34:27	34:33	8	ENOMEM
water	34:27	0:0	9	ENOMEM
call	35:8	35:49	4	memcpy
arg	35:15	35:26	5	flite->text
water	35:15	0:0	6	flite
op	35:20	0:0	6	->
water	35:22	0:0	6	text
arg	35:28	35:35	5	textbuf
water	35:28	0:0	6	textbuf
arg	35:37	35:49	5	textbuf_size
water	35:37	0:0	6	textbuf_size
water	35:50	0:0	4	;
water	36:8	0:0	4	flite
op	36:13	0:0	4	->
water	36:15	0:0	4	text
op	36:19	0:0	4	[
water	36:20	0:0	4	textbuf_size
op	36:32	0:0	4	]
op	36:34	0:0	4	=
water	36:36	0:0	4	0
water	36:37	0:0	4	;
call	37:8	37:43	4	av_file_unmap
arg	37:22	37:29	5	textbuf
water	37:22	0:0	6	textbuf
arg	37:31	37:43	5	textbuf_size
water	37:31	0:0	6	textbuf_size
water	37:44	0:0	4	;
water	38:4	0:0	4	}
if	39:4	43:4	2	(! flite -> text)
cond	39:8	39:16	3	! flite -> text
op	39:8	0:0	4	!
water	39:9	0:0	4	flite
op	39:14	0:0	4	->
water	39:16	0:0	4	text
stmts	39:22	43:4	3	
water	39:22	0:0	4	{
call	40:8	41:84	4	av_log
arg	40:15	40:18	5	ctx
water	40:15	0:0	6	ctx
arg	40:20	40:32	5	AV_LOG_ERROR
water	40:20	0:0	6	AV_LOG_ERROR
arg	41:15	41:84	5	"No speech text specified, specify the 'text' or 'textfile' option\n"
water	41:15	0:0	6	"No speech text specified, specify the 'text' or 'textfile' option\n"
water	41:85	0:0	4	;
return	42:8	42:30	4	AVERROR(EINVAL)
call	42:15	42:29	5	AVERROR
arg	42:23	42:29	6	EINVAL
water	42:23	0:0	7	EINVAL
water	43:4	0:0	4	}
water	45:4	0:0	2	flite
op	45:9	0:0	2	->
water	45:11	0:0	2	wave
op	45:16	0:0	2	=
call	45:18	45:62	2	flite_text_to_wave
arg	45:37	45:48	3	flite->text
water	45:37	0:0	4	flite
op	45:42	0:0	4	->
water	45:44	0:0	4	text
arg	45:50	45:62	3	flite->voice
water	45:50	0:0	4	flite
op	45:55	0:0	4	->
water	45:57	0:0	4	voice
water	45:63	0:0	2	;
water	46:4	0:0	2	flite
op	46:9	0:0	2	->
water	46:11	0:0	2	wave_samples
op	46:27	0:0	2	=
water	46:29	0:0	2	flite
op	46:34	0:0	2	->
water	46:36	0:0	2	wave
op	46:40	0:0	2	->
water	46:42	0:0	2	samples
water	46:49	0:0	2	;
water	47:4	0:0	2	flite
op	47:9	0:0	2	->
water	47:11	0:0	2	wave_nb_samples
op	47:27	0:0	2	=
water	47:29	0:0	2	flite
op	47:34	0:0	2	->
water	47:36	0:0	2	wave
op	47:40	0:0	2	->
water	47:42	0:0	2	num_samples
water	47:53	0:0	2	;
return	48:4	48:12	2	0
water	48:11	0:0	3	0
