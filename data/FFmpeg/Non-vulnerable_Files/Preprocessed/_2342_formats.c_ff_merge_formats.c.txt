func	1:0	41:0	0	AVFilterFormats *	ff_merge_formats
params	1:33	0:0	1	
param	1:34	1:52	2	AVFilterFormats *	a
param	1:54	1:72	2	AVFilterFormats *	b
param	2:34	2:55	2	enum AVMediaType	type
stmnts	0:0	40:15	1	
decl	4:4	4:31	2	AVFilterFormats	*ret
op	4:25	0:0	2	=
water	4:27	0:0	2	NULL
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
decl	6:4	6:26	2	int	alpha1
op	6:14	0:0	2	=
water	6:15	0:0	2	0
water	6:16	0:0	2	,
decl	6:4	6:26	2	int	alpha2
op	6:24	0:0	2	=
water	6:25	0:0	2	0
decl	7:4	7:28	2	int	chroma1
op	7:15	0:0	2	=
water	7:16	0:0	2	0
water	7:17	0:0	2	,
decl	7:4	7:28	2	int	chroma2
op	7:26	0:0	2	=
water	7:27	0:0	2	0
if	8:4	9:16	2	(a == b)
cond	8:8	8:13	3	a == b
water	8:8	0:0	4	a
op	8:10	0:0	4	==
water	8:13	0:0	4	b
stmts	9:8	9:16	3	
return	9:8	9:16	4	a
water	9:15	0:0	5	a
if	17:4	28:12	2	(type == AVMEDIA_TYPE_VIDEO)
cond	17:8	17:16	3	type == AVMEDIA_TYPE_VIDEO
water	17:8	0:0	4	type
op	17:13	0:0	4	==
water	17:16	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	18:8	28:12	3	
for	18:8	28:12	4	(i = 0 ;i < a -> nb_formats;i ++)
forinit	18:13	18:18	5	i = 0 ;
water	18:13	0:0	6	i
op	18:15	0:0	6	=
water	18:17	0:0	6	0
water	18:18	0:0	6	;
cond	18:20	18:27	5	i < a -> nb_formats
water	18:20	0:0	6	i
op	18:22	0:0	6	<
water	18:24	0:0	6	a
op	18:25	0:0	6	->
water	18:27	0:0	6	nb_formats
forexpr	18:39	18:40	5	i ++
water	18:39	0:0	6	i
op	18:40	0:0	6	++
stmts	19:12	28:12	5	
for	19:12	28:12	6	(j = 0 ;j < b -> nb_formats;j ++)
forinit	19:17	19:22	7	j = 0 ;
water	19:17	0:0	8	j
op	19:19	0:0	8	=
water	19:21	0:0	8	0
water	19:22	0:0	8	;
cond	19:24	19:31	7	j < b -> nb_formats
water	19:24	0:0	8	j
op	19:26	0:0	8	<
water	19:28	0:0	8	b
op	19:29	0:0	8	->
water	19:31	0:0	8	nb_formats
forexpr	19:43	19:44	7	j ++
water	19:43	0:0	8	j
op	19:44	0:0	8	++
stmts	19:48	28:12	7	
water	19:48	0:0	8	{
decl	20:16	20:84	8	const AVPixFmtDescriptor	*adesc
op	20:48	0:0	8	=
call	20:50	20:83	9	av_pix_fmt_desc_get
arg	20:70	20:83	10	a->formats[i]
water	20:70	0:0	11	a
op	20:71	0:0	11	->
water	20:73	0:0	11	formats
op	20:80	0:0	11	[
water	20:81	0:0	11	i
op	20:82	0:0	11	]
decl	21:16	21:84	8	const AVPixFmtDescriptor	*bdesc
op	21:48	0:0	8	=
call	21:50	21:83	9	av_pix_fmt_desc_get
arg	21:70	21:83	10	b->formats[j]
water	21:70	0:0	11	b
op	21:71	0:0	11	->
water	21:73	0:0	11	formats
op	21:80	0:0	11	[
water	21:81	0:0	11	j
op	21:82	0:0	11	]
water	22:16	0:0	8	alpha2
op	22:23	0:0	8	|=
water	22:26	0:0	8	adesc
op	22:31	0:0	8	->
water	22:33	0:0	8	flags
op	22:39	0:0	8	&
water	22:41	0:0	8	bdesc
op	22:46	0:0	8	->
water	22:48	0:0	8	flags
op	22:54	0:0	8	&
water	22:56	0:0	8	AV_PIX_FMT_FLAG_ALPHA
water	22:77	0:0	8	;
water	23:16	0:0	8	chroma2
op	23:23	0:0	8	|=
water	23:26	0:0	8	adesc
op	23:31	0:0	8	->
water	23:33	0:0	8	nb_components
op	23:47	0:0	8	>
water	23:49	0:0	8	1
op	23:51	0:0	8	&&
water	23:54	0:0	8	bdesc
op	23:59	0:0	8	->
water	23:61	0:0	8	nb_components
op	23:75	0:0	8	>
water	23:77	0:0	8	1
water	23:78	0:0	8	;
if	24:16	27:16	8	(a -> formats [ i ] == b -> formats [ j ])
cond	24:20	24:49	9	a -> formats [ i ] == b -> formats [ j ]
water	24:20	0:0	10	a
op	24:21	0:0	10	->
water	24:23	0:0	10	formats
op	24:30	0:0	10	[
water	24:31	0:0	10	i
op	24:32	0:0	10	]
op	24:34	0:0	10	==
water	24:37	0:0	10	b
op	24:38	0:0	10	->
water	24:40	0:0	10	formats
op	24:47	0:0	10	[
water	24:48	0:0	10	j
op	24:49	0:0	10	]
stmts	24:52	27:16	9	
water	24:52	0:0	10	{
water	25:20	0:0	10	alpha1
op	25:27	0:0	10	|=
water	25:30	0:0	10	adesc
op	25:35	0:0	10	->
water	25:37	0:0	10	flags
op	25:43	0:0	10	&
water	25:45	0:0	10	AV_PIX_FMT_FLAG_ALPHA
water	25:66	0:0	10	;
water	26:20	0:0	10	chroma1
op	26:27	0:0	10	|=
water	26:30	0:0	10	adesc
op	26:35	0:0	10	->
water	26:37	0:0	10	nb_components
op	26:51	0:0	10	>
water	26:53	0:0	10	1
water	26:54	0:0	10	;
water	27:16	0:0	10	}
water	28:12	0:0	8	}
if	30:4	31:19	2	(alpha2 > alpha1 || chroma2 > chroma1)
cond	30:8	30:37	3	alpha2 > alpha1 || chroma2 > chroma1
water	30:8	0:0	4	alpha2
op	30:15	0:0	4	>
water	30:17	0:0	4	alpha1
op	30:24	0:0	4	||
water	30:27	0:0	4	chroma2
op	30:35	0:0	4	>
water	30:37	0:0	4	chroma1
stmts	31:8	31:19	3	
return	31:8	31:19	4	NULL
water	31:15	0:0	5	NULL
call	32:4	32:71	2	MERGE_FORMATS
arg	32:18	32:21	3	ret
water	32:18	0:0	4	ret
arg	32:23	32:24	3	a
water	32:23	0:0	4	a
arg	32:26	32:27	3	b
water	32:26	0:0	4	b
arg	32:29	32:36	3	formats
water	32:29	0:0	4	formats
arg	32:38	32:48	3	nb_formats
water	32:38	0:0	4	nb_formats
arg	32:50	32:65	3	AVFilterFormats
water	32:50	0:0	4	AVFilterFormats
arg	32:67	32:71	3	fail
water	32:67	0:0	4	fail
water	32:72	0:0	2	;
return	33:4	33:14	2	ret
water	33:11	0:0	3	ret
label	34:0	34:4	2	fail :
if	35:4	38:4	2	(ret)
cond	35:8	35:8	3	ret
water	35:8	0:0	4	ret
stmts	35:13	38:4	3	
water	35:13	0:0	4	{
call	36:8	36:27	4	av_freep
arg	36:17	36:27	5	&ret->refs
op	36:17	0:0	6	&
water	36:18	0:0	6	ret
op	36:21	0:0	6	->
water	36:23	0:0	6	refs
water	36:28	0:0	4	;
call	37:8	37:30	4	av_freep
arg	37:17	37:30	5	&ret->formats
op	37:17	0:0	6	&
water	37:18	0:0	6	ret
op	37:21	0:0	6	->
water	37:23	0:0	6	formats
water	37:31	0:0	4	;
water	38:4	0:0	4	}
call	39:4	39:17	2	av_freep
arg	39:13	39:17	3	&ret
op	39:13	0:0	4	&
water	39:14	0:0	4	ret
water	39:18	0:0	2	;
return	40:4	40:15	2	NULL
water	40:11	0:0	3	NULL
