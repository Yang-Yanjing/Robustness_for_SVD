func	1:0	11:0	0	static int	count_mantissa_bits
params	1:30	0:0	1	
param	1:31	1:50	2	AC3EncodeContext *	s
stmnts	0:0	10:52	1	
decl	3:4	3:24	2	int	ch
water	3:10	0:0	2	,
decl	3:4	3:24	2	int	max_end_freq
call	4:4	4:63	2	LOCAL_ALIGNED_16
arg	4:21	4:29	3	uint16_t
water	4:21	0:0	4	uint16_t
arg	4:31	4:39	3	mant_cnt
water	4:31	0:0	4	mant_cnt
arg	4:41	4:57	3	[AC3_MAX_BLOCKS]
op	4:41	0:0	4	[
water	4:42	0:0	4	AC3_MAX_BLOCKS
op	4:56	0:0	4	]
arg	4:59	4:63	3	[16]
op	4:59	0:0	4	[
water	4:60	0:0	4	16
op	4:62	0:0	4	]
water	4:64	0:0	2	;
call	5:4	5:37	2	count_mantissa_bits_init
arg	5:29	5:37	3	mant_cnt
water	5:29	0:0	4	mant_cnt
water	5:38	0:0	2	;
water	6:4	0:0	2	max_end_freq
op	6:17	0:0	2	=
water	6:19	0:0	2	s
op	6:20	0:0	2	->
water	6:22	0:0	2	bandwidth_code
op	6:37	0:0	2	*
water	6:39	0:0	2	3
op	6:41	0:0	2	+
water	6:43	0:0	2	73
water	6:45	0:0	2	;
for	7:4	9:51	2	(ch = ! s -> cpl_enabled ;ch <= s -> channels;ch ++)
forinit	7:9	7:29	3	ch = ! s -> cpl_enabled ;
water	7:9	0:0	4	ch
op	7:12	0:0	4	=
op	7:14	0:0	4	!
water	7:15	0:0	4	s
op	7:16	0:0	4	->
water	7:18	0:0	4	cpl_enabled
water	7:29	0:0	4	;
cond	7:31	7:40	3	ch <= s -> channels
water	7:31	0:0	4	ch
op	7:34	0:0	4	<=
water	7:37	0:0	4	s
op	7:38	0:0	4	->
water	7:40	0:0	4	channels
forexpr	7:50	7:52	3	ch ++
water	7:50	0:0	4	ch
op	7:52	0:0	4	++
stmts	8:8	9:51	3	
call	8:8	9:50	4	count_mantissa_bits_update_ch
arg	8:38	8:39	5	s
water	8:38	0:0	6	s
arg	8:41	8:43	5	ch
water	8:41	0:0	6	ch
arg	8:45	8:53	5	mant_cnt
water	8:45	0:0	6	mant_cnt
arg	8:55	8:72	5	s->start_freq[ch]
water	8:55	0:0	6	s
op	8:56	0:0	6	->
water	8:58	0:0	6	start_freq
op	8:68	0:0	6	[
water	8:69	0:0	6	ch
op	8:71	0:0	6	]
arg	9:38	9:50	5	max_end_freq
water	9:38	0:0	6	max_end_freq
water	9:51	0:0	4	;
return	10:4	10:52	2	s->ac3dsp.compute_mantissa_size(mant_cnt)
call	10:11	10:51	3	s->ac3dsp.compute_mantissa_size
arg	10:43	10:51	4	mant_cnt
water	10:43	0:0	5	mant_cnt
