func	1:15	37:0	0	int	smooth_init
params	1:30	0:0	1	
param	1:31	1:51	2	AVFilterContext *	ctx
param	1:53	1:69	2	const char *	args
stmnts	0:0	36:12	1	
decl	3:4	3:29	2	OCVContext	*s
op	3:18	0:0	2	=
water	3:20	0:0	2	ctx
op	3:23	0:0	2	->
water	3:25	0:0	2	priv
decl	4:4	4:35	2	SmoothContext	*smooth
op	4:26	0:0	2	=
water	4:28	0:0	2	s
op	4:29	0:0	2	->
water	4:31	0:0	2	priv
decl	5:4	5:35	2	char	type_str[128]
op	5:23	0:0	2	=
water	5:25	0:0	2	"gaussian"
water	6:4	0:0	2	smooth
op	6:10	0:0	2	->
water	6:12	0:0	2	param1
op	6:19	0:0	2	=
water	6:21	0:0	2	3
water	6:22	0:0	2	;
water	7:4	0:0	2	smooth
op	7:10	0:0	2	->
water	7:12	0:0	2	param2
op	7:19	0:0	2	=
water	7:21	0:0	2	0
water	7:22	0:0	2	;
water	8:4	0:0	2	smooth
op	8:10	0:0	2	->
water	8:12	0:0	2	param3
op	8:19	0:0	2	=
water	8:21	0:0	2	0
op	8:22	0:0	2	.
water	8:23	0:0	2	0
water	8:24	0:0	2	;
water	9:4	0:0	2	smooth
op	9:10	0:0	2	->
water	9:12	0:0	2	param4
op	9:19	0:0	2	=
water	9:21	0:0	2	0
op	9:22	0:0	2	.
water	9:23	0:0	2	0
water	9:24	0:0	2	;
if	10:4	11:124	2	(args)
cond	10:8	10:8	3	args
water	10:8	0:0	4	args
stmts	11:8	11:124	3	
call	11:8	11:123	4	sscanf
arg	11:15	11:19	5	args
water	11:15	0:0	6	args
arg	11:21	11:45	5	"%127[^|]|%d|%d|%lf|%lf"
water	11:21	0:0	6	"%127[^|]|%d|%d|%lf|%lf"
arg	11:47	11:55	5	type_str
water	11:47	0:0	6	type_str
arg	11:57	11:72	5	&smooth->param1
op	11:57	0:0	6	&
water	11:58	0:0	6	smooth
op	11:64	0:0	6	->
water	11:66	0:0	6	param1
arg	11:74	11:89	5	&smooth->param2
op	11:74	0:0	6	&
water	11:75	0:0	6	smooth
op	11:81	0:0	6	->
water	11:83	0:0	6	param2
arg	11:91	11:106	5	&smooth->param3
op	11:91	0:0	6	&
water	11:92	0:0	6	smooth
op	11:98	0:0	6	->
water	11:100	0:0	6	param3
arg	11:108	11:123	5	&smooth->param4
op	11:108	0:0	6	&
water	11:109	0:0	6	smooth
op	11:115	0:0	6	->
water	11:117	0:0	6	param4
water	11:124	0:0	4	;
if	12:4	12:71	2	(!strcmp (type_str ,"blur" ))
cond	12:13	12:46	3	!strcmp (type_str ,"blur" )
op	12:13	0:0	4	!
call	12:14	12:46	4	strcmp
arg	12:21	12:29	5	type_str
water	12:21	0:0	6	type_str
arg	12:31	12:46	5	"blur"
water	12:31	0:0	6	"blur"
stmts	12:49	12:71	3	
water	12:49	0:0	4	smooth
op	12:55	0:0	4	->
water	12:57	0:0	4	type
op	12:62	0:0	4	=
water	12:64	0:0	4	CV_BLUR
water	12:71	0:0	4	;
else	13:4	13:80	2
stmts	13:9	13:80	3	
if	13:9	13:80	4	(!strcmp (type_str ,"blur_no_scale" ))
cond	13:13	13:46	5	!strcmp (type_str ,"blur_no_scale" )
op	13:13	0:0	6	!
call	13:14	13:46	6	strcmp
arg	13:21	13:29	7	type_str
water	13:21	0:0	8	type_str
arg	13:31	13:46	7	"blur_no_scale"
water	13:31	0:0	8	"blur_no_scale"
stmts	13:49	13:80	5	
water	13:49	0:0	6	smooth
op	13:55	0:0	6	->
water	13:57	0:0	6	type
op	13:62	0:0	6	=
water	13:64	0:0	6	CV_BLUR_NO_SCALE
water	13:80	0:0	6	;
else	14:4	14:73	2
stmts	14:9	14:73	3	
if	14:9	14:73	4	(!strcmp (type_str ,"median" ))
cond	14:13	14:46	5	!strcmp (type_str ,"median" )
op	14:13	0:0	6	!
call	14:14	14:46	6	strcmp
arg	14:21	14:29	7	type_str
water	14:21	0:0	8	type_str
arg	14:31	14:46	7	"median"
water	14:31	0:0	8	"median"
stmts	14:49	14:73	5	
water	14:49	0:0	6	smooth
op	14:55	0:0	6	->
water	14:57	0:0	6	type
op	14:62	0:0	6	=
water	14:64	0:0	6	CV_MEDIAN
water	14:73	0:0	6	;
else	15:4	15:75	2
stmts	15:9	15:75	3	
if	15:9	15:75	4	(!strcmp (type_str ,"gaussian" ))
cond	15:13	15:46	5	!strcmp (type_str ,"gaussian" )
op	15:13	0:0	6	!
call	15:14	15:46	6	strcmp
arg	15:21	15:29	7	type_str
water	15:21	0:0	8	type_str
arg	15:31	15:46	7	"gaussian"
water	15:31	0:0	8	"gaussian"
stmts	15:49	15:75	5	
water	15:49	0:0	6	smooth
op	15:55	0:0	6	->
water	15:57	0:0	6	type
op	15:62	0:0	6	=
water	15:64	0:0	6	CV_GAUSSIAN
water	15:75	0:0	6	;
else	16:4	16:76	2
stmts	16:9	16:76	3	
if	16:9	16:76	4	(!strcmp (type_str ,"bilateral" ))
cond	16:13	16:46	5	!strcmp (type_str ,"bilateral" )
op	16:13	0:0	6	!
call	16:14	16:46	6	strcmp
arg	16:21	16:29	7	type_str
water	16:21	0:0	8	type_str
arg	16:31	16:46	7	"bilateral"
water	16:31	0:0	8	"bilateral"
stmts	16:49	16:76	5	
water	16:49	0:0	6	smooth
op	16:55	0:0	6	->
water	16:57	0:0	6	type
op	16:62	0:0	6	=
water	16:64	0:0	6	CV_BILATERAL
water	16:76	0:0	6	;
else	17:4	20:4	2
stmts	17:9	20:4	3	
water	17:9	0:0	4	{
call	18:8	18:76	4	av_log
arg	18:15	18:18	5	ctx
water	18:15	0:0	6	ctx
arg	18:20	18:32	5	AV_LOG_ERROR
water	18:20	0:0	6	AV_LOG_ERROR
arg	18:34	18:66	5	"Smoothing type '%s' unknown.\n"
water	18:34	0:0	6	"Smoothing type '%s' unknown.\n"
arg	18:68	18:76	5	type_str
water	18:68	0:0	6	type_str
water	18:77	0:0	4	;
return	19:8	19:30	4	AVERROR(EINVAL)
call	19:15	19:29	5	AVERROR
arg	19:23	19:29	6	EINVAL
water	19:23	0:0	7	EINVAL
water	20:4	0:0	4	}
if	21:4	26:4	2	(smooth -> param1 < 0 || ! ( smooth -> param1 % 2 ))
cond	21:8	21:48	3	smooth -> param1 < 0 || ! ( smooth -> param1 % 2 )
water	21:8	0:0	4	smooth
op	21:14	0:0	4	->
water	21:16	0:0	4	param1
op	21:23	0:0	4	<
water	21:25	0:0	4	0
op	21:27	0:0	4	||
op	21:30	0:0	4	!
water	21:31	0:0	4	(
water	21:32	0:0	4	smooth
op	21:38	0:0	4	->
water	21:40	0:0	4	param1
op	21:46	0:0	4	%
water	21:47	0:0	4	2
water	21:48	0:0	4	)
stmts	21:51	26:4	3	
water	21:51	0:0	4	{
call	22:8	24:29	4	av_log
arg	22:15	22:18	5	ctx
water	22:15	0:0	6	ctx
arg	22:20	22:32	5	AV_LOG_ERROR
water	22:20	0:0	6	AV_LOG_ERROR
arg	23:15	23:84	5	"Invalid value '%d' for param1, it has to be a positive odd number\n"
water	23:15	0:0	6	"Invalid value '%d' for param1, it has to be a positive odd number\n"
arg	24:15	24:29	5	smooth->param1
water	24:15	0:0	6	smooth
op	24:21	0:0	6	->
water	24:23	0:0	6	param1
water	24:30	0:0	4	;
return	25:8	25:30	4	AVERROR(EINVAL)
call	25:15	25:29	5	AVERROR
arg	25:23	25:29	6	EINVAL
water	25:23	0:0	7	EINVAL
water	26:4	0:0	4	}
if	27:4	33:4	2	(( smooth -> type == CV_BLUR || smooth -> type == CV_BLUR_NO_SCALE || smooth -> type == CV_GAUSSIAN ) && ( smooth -> param2 < 0 || ( smooth -> param2 && ! ( smooth -> param2 % 2 ) ) ))
cond	27:8	28:70	3	( smooth -> type == CV_BLUR || smooth -> type == CV_BLUR_NO_SCALE || smooth -> type == CV_GAUSSIAN ) && ( smooth -> param2 < 0 || ( smooth -> param2 && ! ( smooth -> param2 % 2 ) ) )
water	27:8	0:0	4	(
water	27:9	0:0	4	smooth
op	27:15	0:0	4	->
water	27:17	0:0	4	type
op	27:22	0:0	4	==
water	27:25	0:0	4	CV_BLUR
op	27:33	0:0	4	||
water	27:36	0:0	4	smooth
op	27:42	0:0	4	->
water	27:44	0:0	4	type
op	27:49	0:0	4	==
water	27:52	0:0	4	CV_BLUR_NO_SCALE
op	27:69	0:0	4	||
water	27:72	0:0	4	smooth
op	27:78	0:0	4	->
water	27:80	0:0	4	type
op	27:85	0:0	4	==
water	27:88	0:0	4	CV_GAUSSIAN
water	27:99	0:0	4	)
op	27:101	0:0	4	&&
water	28:8	0:0	4	(
water	28:9	0:0	4	smooth
op	28:15	0:0	4	->
water	28:17	0:0	4	param2
op	28:24	0:0	4	<
water	28:26	0:0	4	0
op	28:28	0:0	4	||
water	28:31	0:0	4	(
water	28:32	0:0	4	smooth
op	28:38	0:0	4	->
water	28:40	0:0	4	param2
op	28:47	0:0	4	&&
op	28:50	0:0	4	!
water	28:51	0:0	4	(
water	28:52	0:0	4	smooth
op	28:58	0:0	4	->
water	28:60	0:0	4	param2
op	28:66	0:0	4	%
water	28:67	0:0	4	2
water	28:68	0:0	4	)
water	28:69	0:0	4	)
water	28:70	0:0	4	)
stmts	28:73	33:4	3	
water	28:73	0:0	4	{
call	29:8	31:29	4	av_log
arg	29:15	29:18	5	ctx
water	29:15	0:0	6	ctx
arg	29:20	29:32	5	AV_LOG_ERROR
water	29:20	0:0	6	AV_LOG_ERROR
arg	30:15	30:92	5	"Invalid value '%d' for param2, it has to be zero or a positive odd number\n"
water	30:15	0:0	6	"Invalid value '%d' for param2, it has to be zero or a positive odd number\n"
arg	31:15	31:29	5	smooth->param2
water	31:15	0:0	6	smooth
op	31:21	0:0	6	->
water	31:23	0:0	6	param2
water	31:30	0:0	4	;
return	32:8	32:30	4	AVERROR(EINVAL)
call	32:15	32:29	5	AVERROR
arg	32:23	32:29	6	EINVAL
water	32:23	0:0	7	EINVAL
water	33:4	0:0	4	}
call	34:4	35:83	2	av_log
arg	34:11	34:14	3	ctx
water	34:11	0:0	4	ctx
arg	34:16	34:30	3	AV_LOG_VERBOSE
water	34:16	0:0	4	AV_LOG_VERBOSE
arg	34:32	34:83	3	"type:%s param1:%d param2:%d param3:%f param4:%f\n"
water	34:32	0:0	4	"type:%s param1:%d param2:%d param3:%f param4:%f\n"
arg	35:11	35:19	3	type_str
water	35:11	0:0	4	type_str
arg	35:21	35:35	3	smooth->param1
water	35:21	0:0	4	smooth
op	35:27	0:0	4	->
water	35:29	0:0	4	param1
arg	35:37	35:51	3	smooth->param2
water	35:37	0:0	4	smooth
op	35:43	0:0	4	->
water	35:45	0:0	4	param2
arg	35:53	35:67	3	smooth->param3
water	35:53	0:0	4	smooth
op	35:59	0:0	4	->
water	35:61	0:0	4	param3
arg	35:69	35:83	3	smooth->param4
water	35:69	0:0	4	smooth
op	35:75	0:0	4	->
water	35:77	0:0	4	param4
water	35:84	0:0	2	;
return	36:4	36:12	2	0
water	36:11	0:0	3	0
