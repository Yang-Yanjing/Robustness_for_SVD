func	1:0	70:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	69:22	1	
decl	3:4	3:37	2	int	bps
op	3:12	0:0	2	=
water	3:14	0:0	2	0
water	3:15	0:0	2	,
decl	3:4	3:37	2	int	duration
op	3:26	0:0	2	=
water	3:28	0:0	2	0
water	3:29	0:0	2	,
decl	3:4	3:37	2	int	ret
water	3:34	0:0	2	,
decl	3:4	3:37	2	int	i
decl	4:4	4:52	2	const char	*input_url
op	4:26	0:0	2	=
water	4:28	0:0	2	NULL
water	4:32	0:0	2	,
decl	4:4	4:52	2	const char	*output_url
op	4:46	0:0	2	=
water	4:48	0:0	2	NULL
decl	5:4	5:26	2	int64_t	stream_pos
op	5:23	0:0	2	=
water	5:25	0:0	2	0
decl	6:4	6:22	2	int64_t	start_time
decl	7:4	7:19	2	char	errbuf[50]
decl	8:4	8:31	2	AVIOContext	*input
water	8:22	0:0	2	,
decl	8:4	8:31	2	AVIOContext	*output
call	9:4	9:20	2	av_register_all
water	9:21	0:0	2	;
call	10:4	10:26	2	avformat_network_init
water	10:27	0:0	2	;
for	11:4	25:4	2	(i = 1 ;i < argc;i ++)
forinit	11:9	11:14	3	i = 1 ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	1
water	11:14	0:0	4	;
cond	11:16	11:20	3	i < argc
water	11:16	0:0	4	i
op	11:18	0:0	4	<
water	11:20	0:0	4	argc
forexpr	11:26	11:27	3	i ++
water	11:26	0:0	4	i
op	11:27	0:0	4	++
stmts	11:31	25:4	3	
water	11:31	0:0	4	{
if	12:8	15:8	4	(!strcmp (argv [ i ] ,"-b" ) && i + 1 < argc)
cond	12:12	12:46	5	!strcmp (argv [ i ] ,"-b" ) && i + 1 < argc
op	12:12	0:0	6	!
call	12:13	12:33	6	strcmp
arg	12:20	12:27	7	argv[i]
water	12:20	0:0	8	argv
op	12:24	0:0	8	[
water	12:25	0:0	8	i
op	12:26	0:0	8	]
arg	12:29	12:33	7	"-b"
water	12:29	0:0	8	"-b"
op	12:35	0:0	6	&&
water	12:38	0:0	6	i
op	12:40	0:0	6	+
water	12:42	0:0	6	1
op	12:44	0:0	6	<
water	12:46	0:0	6	argc
stmts	12:52	15:8	5	
water	12:52	0:0	6	{
water	13:12	0:0	6	bps
op	13:16	0:0	6	=
call	13:18	13:34	6	atoi
arg	13:23	13:34	7	argv[i+1]
water	13:23	0:0	8	argv
op	13:27	0:0	8	[
water	13:28	0:0	8	i
op	13:30	0:0	8	+
water	13:32	0:0	8	1
op	13:33	0:0	8	]
water	13:35	0:0	6	;
water	14:12	0:0	6	i
op	14:13	0:0	6	++
water	14:15	0:0	6	;
water	15:8	0:0	6	}
else	15:10	18:8	4
stmts	15:15	18:8	5	
if	15:15	18:8	6	(!strcmp (argv [ i ] ,"-d" ) && i + 1 < argc)
cond	15:19	15:53	7	!strcmp (argv [ i ] ,"-d" ) && i + 1 < argc
op	15:19	0:0	8	!
call	15:20	15:40	8	strcmp
arg	15:27	15:34	9	argv[i]
water	15:27	0:0	10	argv
op	15:31	0:0	10	[
water	15:32	0:0	10	i
op	15:33	0:0	10	]
arg	15:36	15:40	9	"-d"
water	15:36	0:0	10	"-d"
op	15:42	0:0	8	&&
water	15:45	0:0	8	i
op	15:47	0:0	8	+
water	15:49	0:0	8	1
op	15:51	0:0	8	<
water	15:53	0:0	8	argc
stmts	15:59	18:8	7	
water	15:59	0:0	8	{
water	16:12	0:0	8	duration
op	16:21	0:0	8	=
call	16:23	16:39	8	atoi
arg	16:28	16:39	9	argv[i+1]
water	16:28	0:0	10	argv
op	16:32	0:0	10	[
water	16:33	0:0	10	i
op	16:35	0:0	10	+
water	16:37	0:0	10	1
op	16:38	0:0	10	]
water	16:40	0:0	8	;
water	17:12	0:0	8	i
op	17:13	0:0	8	++
water	17:15	0:0	8	;
water	18:8	0:0	8	}
else	18:10	20:8	4
stmts	18:15	20:8	5	
if	18:15	20:8	6	(! input_url)
cond	18:19	18:20	7	! input_url
op	18:19	0:0	8	!
water	18:20	0:0	8	input_url
stmts	18:31	20:8	7	
water	18:31	0:0	8	{
water	19:12	0:0	8	input_url
op	19:22	0:0	8	=
water	19:24	0:0	8	argv
op	19:28	0:0	8	[
water	19:29	0:0	8	i
op	19:30	0:0	8	]
water	19:31	0:0	8	;
water	20:8	0:0	8	}
else	20:10	22:8	4
stmts	20:15	22:8	5	
if	20:15	22:8	6	(! output_url)
cond	20:19	20:20	7	! output_url
op	20:19	0:0	8	!
water	20:20	0:0	8	output_url
stmts	20:32	22:8	7	
water	20:32	0:0	8	{
water	21:12	0:0	8	output_url
op	21:23	0:0	8	=
water	21:25	0:0	8	argv
op	21:29	0:0	8	[
water	21:30	0:0	8	i
op	21:31	0:0	8	]
water	21:32	0:0	8	;
water	22:8	0:0	8	}
else	22:10	24:8	4
stmts	22:15	24:8	5	
water	22:15	0:0	6	{
return	23:12	23:36	6	usage(argv[0],1)
call	23:19	23:35	7	usage
arg	23:25	23:32	8	argv[0]
water	23:25	0:0	9	argv
op	23:29	0:0	9	[
water	23:30	0:0	9	0
op	23:31	0:0	9	]
arg	23:34	23:35	8	1
water	23:34	0:0	9	1
water	24:8	0:0	6	}
water	25:4	0:0	4	}
if	26:4	27:32	2	(! output_url)
cond	26:8	26:9	3	! output_url
op	26:8	0:0	4	!
water	26:9	0:0	4	output_url
stmts	27:8	27:32	3	
return	27:8	27:32	4	usage(argv[0],1)
call	27:15	27:31	5	usage
arg	27:21	27:28	6	argv[0]
water	27:21	0:0	7	argv
op	27:25	0:0	7	[
water	27:26	0:0	7	0
op	27:27	0:0	7	]
arg	27:30	27:31	6	1
water	27:30	0:0	7	1
water	28:4	0:0	2	ret
op	28:8	0:0	2	=
call	28:10	28:66	2	avio_open2
arg	28:21	28:27	3	&input
op	28:21	0:0	4	&
water	28:22	0:0	4	input
arg	28:29	28:38	3	input_url
water	28:29	0:0	4	input_url
arg	28:40	28:54	3	AVIO_FLAG_READ
water	28:40	0:0	4	AVIO_FLAG_READ
arg	28:56	28:60	3	NULL
water	28:56	0:0	4	NULL
arg	28:62	28:66	3	NULL
water	28:62	0:0	4	NULL
water	28:67	0:0	2	;
if	29:4	33:4	2	(ret)
cond	29:8	29:8	3	ret
water	29:8	0:0	4	ret
stmts	29:13	33:4	3	
water	29:13	0:0	4	{
call	30:8	30:47	4	av_strerror
arg	30:20	30:23	5	ret
water	30:20	0:0	6	ret
arg	30:25	30:31	5	errbuf
water	30:25	0:0	6	errbuf
arg	30:33	30:47	5	sizeof(errbuf)
op	30:33	0:0	6	sizeof
water	30:39	0:0	6	(
water	30:40	0:0	6	errbuf
water	30:46	0:0	6	)
water	30:48	0:0	4	;
call	31:8	31:68	4	fprintf
arg	31:16	31:22	5	stderr
water	31:16	0:0	6	stderr
arg	31:24	31:49	5	"Unable to open %s: %s\n"
water	31:24	0:0	6	"Unable to open %s: %s\n"
arg	31:51	31:60	5	input_url
water	31:51	0:0	6	input_url
arg	31:62	31:68	5	errbuf
water	31:62	0:0	6	errbuf
water	31:69	0:0	4	;
return	32:8	32:16	4	1
water	32:15	0:0	5	1
water	33:4	0:0	4	}
if	34:4	42:4	2	(duration && ! bps)
cond	34:8	34:21	3	duration && ! bps
water	34:8	0:0	4	duration
op	34:17	0:0	4	&&
op	34:20	0:0	4	!
water	34:21	0:0	4	bps
stmts	34:26	42:4	3	
water	34:26	0:0	4	{
decl	35:8	35:39	4	int64_t	size
op	35:21	0:0	4	=
call	35:23	35:38	5	avio_size
arg	35:33	35:38	6	input
water	35:33	0:0	7	input
if	36:8	40:8	4	(size < 0)
cond	36:12	36:19	5	size < 0
water	36:12	0:0	6	size
op	36:17	0:0	6	<
water	36:19	0:0	6	0
stmts	36:22	40:8	5	
water	36:22	0:0	6	{
call	37:12	37:51	6	av_strerror
arg	37:24	37:27	7	ret
water	37:24	0:0	8	ret
arg	37:29	37:35	7	errbuf
water	37:29	0:0	8	errbuf
arg	37:37	37:51	7	sizeof(errbuf)
op	37:37	0:0	8	sizeof
water	37:43	0:0	8	(
water	37:44	0:0	8	errbuf
water	37:50	0:0	8	)
water	37:52	0:0	6	;
call	38:12	38:79	6	fprintf
arg	38:20	38:26	7	stderr
water	38:20	0:0	8	stderr
arg	38:28	38:60	7	"Unable to get size of %s: %s\n"
water	38:28	0:0	8	"Unable to get size of %s: %s\n"
arg	38:62	38:71	7	input_url
water	38:62	0:0	8	input_url
arg	38:73	38:79	7	errbuf
water	38:73	0:0	8	errbuf
water	38:80	0:0	6	;
goto	39:12	39:21	6	fail
water	39:17	0:0	7	fail
water	40:8	0:0	6	}
water	41:8	0:0	4	bps
op	41:12	0:0	4	=
water	41:14	0:0	4	size
op	41:19	0:0	4	/
water	41:21	0:0	4	duration
water	41:29	0:0	4	;
water	42:4	0:0	4	}
water	43:4	0:0	2	ret
op	43:8	0:0	2	=
call	43:10	43:69	2	avio_open2
arg	43:21	43:28	3	&output
op	43:21	0:0	4	&
water	43:22	0:0	4	output
arg	43:30	43:40	3	output_url
water	43:30	0:0	4	output_url
arg	43:42	43:57	3	AVIO_FLAG_WRITE
water	43:42	0:0	4	AVIO_FLAG_WRITE
arg	43:59	43:63	3	NULL
water	43:59	0:0	4	NULL
arg	43:65	43:69	3	NULL
water	43:65	0:0	4	NULL
water	43:70	0:0	2	;
if	44:4	48:4	2	(ret)
cond	44:8	44:8	3	ret
water	44:8	0:0	4	ret
stmts	44:13	48:4	3	
water	44:13	0:0	4	{
call	45:8	45:47	4	av_strerror
arg	45:20	45:23	5	ret
water	45:20	0:0	6	ret
arg	45:25	45:31	5	errbuf
water	45:25	0:0	6	errbuf
arg	45:33	45:47	5	sizeof(errbuf)
op	45:33	0:0	6	sizeof
water	45:39	0:0	6	(
water	45:40	0:0	6	errbuf
water	45:46	0:0	6	)
water	45:48	0:0	4	;
call	46:8	46:69	4	fprintf
arg	46:16	46:22	5	stderr
water	46:16	0:0	6	stderr
arg	46:24	46:49	5	"Unable to open %s: %s\n"
water	46:24	0:0	6	"Unable to open %s: %s\n"
arg	46:51	46:61	5	output_url
water	46:51	0:0	6	output_url
arg	46:63	46:69	5	errbuf
water	46:63	0:0	6	errbuf
water	46:70	0:0	4	;
goto	47:8	47:17	4	fail
water	47:13	0:0	5	fail
water	48:4	0:0	4	}
water	49:4	0:0	2	start_time
op	49:15	0:0	2	=
call	49:17	49:37	2	av_gettime_relative
water	49:38	0:0	2	;
while	50:4	63:4	2	(1)
cond	50:11	50:11	3	1
water	50:11	0:0	4	1
stmts	50:14	63:4	3	
water	50:14	0:0	4	{
decl	51:8	51:25	4	uint8_t	buf[1024]
decl	52:8	52:13	4	int	n
water	53:8	0:0	4	n
op	53:10	0:0	4	=
call	53:12	53:45	4	avio_read
arg	53:22	53:27	5	input
water	53:22	0:0	6	input
arg	53:29	53:32	5	buf
water	53:29	0:0	6	buf
arg	53:34	53:45	5	sizeof(buf)
op	53:34	0:0	6	sizeof
water	53:40	0:0	6	(
water	53:41	0:0	6	buf
water	53:44	0:0	6	)
water	53:46	0:0	4	;
if	54:8	55:17	4	(n <= 0)
cond	54:12	54:17	5	n <= 0
water	54:12	0:0	6	n
op	54:14	0:0	6	<=
water	54:17	0:0	6	0
stmts	55:12	55:17	5	
break	55:12	55:17	6	
call	56:8	56:33	4	avio_write
arg	56:19	56:25	5	output
water	56:19	0:0	6	output
arg	56:27	56:30	5	buf
water	56:27	0:0	6	buf
arg	56:32	56:33	5	n
water	56:32	0:0	6	n
water	56:34	0:0	4	;
water	57:8	0:0	4	stream_pos
op	57:19	0:0	4	+=
water	57:22	0:0	4	n
water	57:23	0:0	4	;
if	58:8	62:8	4	(bps)
cond	58:12	58:12	5	bps
water	58:12	0:0	6	bps
stmts	58:17	62:8	5	
water	58:17	0:0	6	{
call	59:12	59:29	6	avio_flush
arg	59:23	59:29	7	output
water	59:23	0:0	8	output
water	59:30	0:0	6	;
while	60:12	61:36	6	((av_gettime_relative ( ) - start_time ) * bps / AV_TIME_BASE < stream_pos)
cond	60:19	60:79	7	(av_gettime_relative ( ) - start_time ) * bps / AV_TIME_BASE < stream_pos
water	60:19	0:0	8	(
call	60:20	60:40	8	av_gettime_relative
op	60:42	0:0	8	-
water	60:44	0:0	8	start_time
water	60:54	0:0	8	)
op	60:56	0:0	8	*
water	60:58	0:0	8	bps
op	60:62	0:0	8	/
water	60:64	0:0	8	AV_TIME_BASE
op	60:77	0:0	8	<
water	60:79	0:0	8	stream_pos
stmts	61:16	61:36	7	
call	61:16	61:35	8	av_usleep
arg	61:26	61:35	9	50*1000
water	61:26	0:0	10	50
op	61:29	0:0	10	*
water	61:31	0:0	10	1000
water	61:36	0:0	8	;
water	62:8	0:0	6	}
water	63:4	0:0	4	}
call	64:4	64:21	2	avio_flush
arg	64:15	64:21	3	output
water	64:15	0:0	4	output
water	64:22	0:0	2	;
call	65:4	65:21	2	avio_close
arg	65:15	65:21	3	output
water	65:15	0:0	4	output
water	65:22	0:0	2	;
label	66:0	66:4	2	fail :
call	67:4	67:20	2	avio_close
arg	67:15	67:20	3	input
water	67:15	0:0	4	input
water	67:21	0:0	2	;
call	68:4	68:28	2	avformat_network_deinit
water	68:29	0:0	2	;
return	69:4	69:22	2	ret?1:0
water	69:11	0:0	3	ret
water	69:15	0:0	3	?
water	69:17	0:0	3	1
water	69:19	0:0	3	:
water	69:21	0:0	3	0
