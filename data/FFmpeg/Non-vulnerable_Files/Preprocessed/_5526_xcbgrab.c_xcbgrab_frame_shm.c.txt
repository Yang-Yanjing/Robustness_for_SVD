func	1:0	49:0	0	static int	xcbgrab_frame_shm
params	1:28	0:0	1	
param	1:29	1:47	2	AVFormatContext *	s
param	1:49	1:62	2	AVPacket *	pkt
stmnts	0:0	48:12	1	
decl	3:4	3:36	2	XCBGrabContext	*c
op	3:22	0:0	2	=
water	3:24	0:0	2	s
op	3:25	0:0	2	->
water	3:27	0:0	2	priv_data
decl	4:4	4:33	2	xcb_shm_get_image_cookie_t	iq
decl	5:4	5:34	2	xcb_shm_get_image_reply_t	*img
decl	6:4	6:45	2	xcb_drawable_t	drawable
op	6:28	0:0	2	=
water	6:30	0:0	2	c
op	6:31	0:0	2	->
water	6:33	0:0	2	screen
op	6:39	0:0	2	->
water	6:41	0:0	2	root
decl	7:4	7:17	2	uint8_t	*data
decl	8:4	8:59	2	int	size
op	8:13	0:0	2	=
water	8:15	0:0	2	c
op	8:16	0:0	2	->
water	8:18	0:0	2	frame_size
op	8:29	0:0	2	+
water	8:31	0:0	2	AV_INPUT_BUFFER_PADDING_SIZE
decl	9:4	9:58	2	int	id
op	9:13	0:0	2	=
call	9:15	9:57	3	shmget
arg	9:22	9:33	4	IPC_PRIVATE
water	9:22	0:0	5	IPC_PRIVATE
arg	9:35	9:39	4	size
water	9:35	0:0	5	size
arg	9:41	9:57	4	IPC_CREAT|0777
water	9:41	0:0	5	IPC_CREAT
op	9:51	0:0	5	|
water	9:53	0:0	5	0777
decl	10:4	10:33	2	xcb_generic_error_t	*e
op	10:27	0:0	2	=
water	10:29	0:0	2	NULL
if	11:4	18:4	2	(id == - 1)
cond	11:8	11:15	3	id == - 1
water	11:8	0:0	4	id
op	11:11	0:0	4	==
op	11:14	0:0	4	-
water	11:15	0:0	4	1
stmts	11:18	18:4	3	
water	11:18	0:0	4	{
decl	12:8	12:25	4	char	errbuf[1024]
decl	13:8	13:32	4	int	err
op	13:16	0:0	4	=
call	13:18	13:31	5	AVERROR
arg	13:26	13:31	6	errno
water	13:26	0:0	7	errno
call	14:8	14:47	4	av_strerror
arg	14:20	14:23	5	err
water	14:20	0:0	6	err
arg	14:25	14:31	5	errbuf
water	14:25	0:0	6	errbuf
arg	14:33	14:47	5	sizeof(errbuf)
op	14:33	0:0	6	sizeof
water	14:39	0:0	6	(
water	14:40	0:0	6	errbuf
water	14:46	0:0	6	)
water	14:48	0:0	4	;
call	15:8	16:27	4	av_log
arg	15:15	15:16	5	s
water	15:15	0:0	6	s
arg	15:18	15:30	5	AV_LOG_ERROR
water	15:18	0:0	6	AV_LOG_ERROR
arg	15:32	15:77	5	"Cannot get %d bytes of shared memory: %s.\n"
water	15:32	0:0	6	"Cannot get %d bytes of shared memory: %s.\n"
arg	16:15	16:19	5	size
water	16:15	0:0	6	size
arg	16:21	16:27	5	errbuf
water	16:21	0:0	6	errbuf
water	16:28	0:0	4	;
return	17:8	17:18	4	err
water	17:15	0:0	5	err
water	18:4	0:0	4	}
call	19:4	19:45	2	xcb_shm_attach
arg	19:19	19:26	3	c->conn
water	19:19	0:0	4	c
op	19:20	0:0	4	->
water	19:22	0:0	4	conn
arg	19:28	19:38	3	c->segment
water	19:28	0:0	4	c
op	19:29	0:0	4	->
water	19:31	0:0	4	segment
arg	19:40	19:42	3	id
water	19:40	0:0	4	id
arg	19:44	19:45	3	0
water	19:44	0:0	4	0
water	19:46	0:0	2	;
water	20:4	0:0	2	iq
op	20:7	0:0	2	=
call	20:9	22:67	2	xcb_shm_get_image
arg	20:27	20:34	3	c->conn
water	20:27	0:0	4	c
op	20:28	0:0	4	->
water	20:30	0:0	4	conn
arg	20:36	20:44	3	drawable
water	20:36	0:0	4	drawable
arg	21:27	21:31	3	c->x
water	21:27	0:0	4	c
op	21:28	0:0	4	->
water	21:30	0:0	4	x
arg	21:33	21:37	3	c->y
water	21:33	0:0	4	c
op	21:34	0:0	4	->
water	21:36	0:0	4	y
arg	21:39	21:47	3	c->width
water	21:39	0:0	4	c
op	21:40	0:0	4	->
water	21:42	0:0	4	width
arg	21:49	21:58	3	c->height
water	21:49	0:0	4	c
op	21:50	0:0	4	->
water	21:52	0:0	4	height
arg	21:60	21:62	3	~0
water	21:60	0:0	4	~0
arg	22:27	22:52	3	XCB_IMAGE_FORMAT_Z_PIXMAP
water	22:27	0:0	4	XCB_IMAGE_FORMAT_Z_PIXMAP
arg	22:54	22:64	3	c->segment
water	22:54	0:0	4	c
op	22:55	0:0	4	->
water	22:57	0:0	4	segment
arg	22:66	22:67	3	0
water	22:66	0:0	4	0
water	22:68	0:0	2	;
call	23:4	23:38	2	xcb_shm_detach
arg	23:19	23:26	3	c->conn
water	23:19	0:0	4	c
op	23:20	0:0	4	->
water	23:22	0:0	4	conn
arg	23:28	23:38	3	c->segment
water	23:28	0:0	4	c
op	23:29	0:0	4	->
water	23:31	0:0	4	segment
water	23:39	0:0	2	;
water	24:4	0:0	2	img
op	24:8	0:0	2	=
call	24:10	24:49	2	xcb_shm_get_image_reply
arg	24:34	24:41	3	c->conn
water	24:34	0:0	4	c
op	24:35	0:0	4	->
water	24:37	0:0	4	conn
arg	24:43	24:45	3	iq
water	24:43	0:0	4	iq
arg	24:47	24:49	3	&e
op	24:47	0:0	4	&
water	24:48	0:0	4	e
water	24:50	0:0	2	;
call	25:4	25:21	2	xcb_flush
arg	25:14	25:21	3	c->conn
water	25:14	0:0	4	c
op	25:15	0:0	4	->
water	25:17	0:0	4	conn
water	25:22	0:0	2	;
if	26:4	35:4	2	(e)
cond	26:8	26:8	3	e
water	26:8	0:0	4	e
stmts	26:11	35:4	3	
water	26:11	0:0	4	{
call	27:8	32:72	4	av_log
arg	27:15	27:16	5	s
water	27:15	0:0	6	s
arg	27:18	27:30	5	AV_LOG_ERROR
water	27:18	0:0	6	AV_LOG_ERROR
arg	28:15	30:74	5	"Cannot get the image data ""event_error: response_type:%u error_code:%u ""sequence:%u resource_id:%u minor_code:%u major_code:%u.\n"
water	28:15	0:0	6	"Cannot get the image data "
water	29:15	0:0	6	"event_error: response_type:%u error_code:%u "
water	30:15	0:0	6	"sequence:%u resource_id:%u minor_code:%u major_code:%u.\n"
arg	31:15	31:31	5	e->response_type
water	31:15	0:0	6	e
op	31:16	0:0	6	->
water	31:18	0:0	6	response_type
arg	31:33	31:46	5	e->error_code
water	31:33	0:0	6	e
op	31:34	0:0	6	->
water	31:36	0:0	6	error_code
arg	32:15	32:26	5	e->sequence
water	32:15	0:0	6	e
op	32:16	0:0	6	->
water	32:18	0:0	6	sequence
arg	32:28	32:42	5	e->resource_id
water	32:28	0:0	6	e
op	32:29	0:0	6	->
water	32:31	0:0	6	resource_id
arg	32:44	32:57	5	e->minor_code
water	32:44	0:0	6	e
op	32:45	0:0	6	->
water	32:47	0:0	6	minor_code
arg	32:59	32:72	5	e->major_code
water	32:59	0:0	6	e
op	32:60	0:0	6	->
water	32:62	0:0	6	major_code
water	32:73	0:0	4	;
call	33:8	33:30	4	shmctl
arg	33:15	33:17	5	id
water	33:15	0:0	6	id
arg	33:19	33:27	5	IPC_RMID
water	33:19	0:0	6	IPC_RMID
arg	33:29	33:30	5	0
water	33:29	0:0	6	0
water	33:31	0:0	4	;
return	34:8	34:30	4	AVERROR(EACCES)
call	34:15	34:29	5	AVERROR
arg	34:23	34:29	6	EACCES
water	34:23	0:0	7	EACCES
water	35:4	0:0	4	}
call	36:4	36:12	2	free
arg	36:9	36:12	3	img
water	36:9	0:0	4	img
water	36:13	0:0	2	;
water	37:4	0:0	2	data
op	37:9	0:0	2	=
call	37:11	37:28	2	shmat
arg	37:17	37:19	3	id
water	37:17	0:0	4	id
arg	37:21	37:25	3	NULL
water	37:21	0:0	4	NULL
arg	37:27	37:28	3	0
water	37:27	0:0	4	0
water	37:29	0:0	2	;
call	38:4	38:26	2	shmctl
arg	38:11	38:13	3	id
water	38:11	0:0	4	id
arg	38:15	38:23	3	IPC_RMID
water	38:15	0:0	4	IPC_RMID
arg	38:25	38:26	3	0
water	38:25	0:0	4	0
water	38:27	0:0	2	;
if	39:4	40:29	2	(( intptr_t ) data == - 1)
cond	39:8	39:27	3	( intptr_t ) data == - 1
water	39:8	0:0	4	(
water	39:9	0:0	4	intptr_t
water	39:17	0:0	4	)
water	39:18	0:0	4	data
op	39:23	0:0	4	==
op	39:26	0:0	4	-
water	39:27	0:0	4	1
stmts	40:8	40:29	3	
return	40:8	40:29	4	AVERROR(errno)
call	40:15	40:28	5	AVERROR
arg	40:23	40:28	6	errno
water	40:23	0:0	7	errno
water	41:4	0:0	2	pkt
op	41:7	0:0	2	->
water	41:9	0:0	2	buf
op	41:13	0:0	2	=
call	41:15	41:64	2	av_buffer_create
arg	41:32	41:36	3	data
water	41:32	0:0	4	data
arg	41:38	41:42	3	size
water	41:38	0:0	4	size
arg	41:44	41:55	3	dealloc_shm
water	41:44	0:0	4	dealloc_shm
arg	41:57	41:61	3	NULL
water	41:57	0:0	4	NULL
arg	41:63	41:64	3	0
water	41:63	0:0	4	0
water	41:65	0:0	2	;
if	42:4	45:4	2	(! pkt -> buf)
cond	42:8	42:14	3	! pkt -> buf
op	42:8	0:0	4	!
water	42:9	0:0	4	pkt
op	42:12	0:0	4	->
water	42:14	0:0	4	buf
stmts	42:19	45:4	3	
water	42:19	0:0	4	{
call	43:8	43:18	4	shmdt
arg	43:14	43:18	5	data
water	43:14	0:0	6	data
water	43:19	0:0	4	;
return	44:8	44:30	4	AVERROR(ENOMEM)
call	44:15	44:29	5	AVERROR
arg	44:23	44:29	6	ENOMEM
water	44:23	0:0	7	ENOMEM
water	45:4	0:0	4	}
water	46:4	0:0	2	pkt
op	46:7	0:0	2	->
water	46:9	0:0	2	data
op	46:14	0:0	2	=
water	46:16	0:0	2	pkt
op	46:19	0:0	2	->
water	46:21	0:0	2	buf
op	46:24	0:0	2	->
water	46:26	0:0	2	data
water	46:30	0:0	2	;
water	47:4	0:0	2	pkt
op	47:7	0:0	2	->
water	47:9	0:0	2	size
op	47:14	0:0	2	=
water	47:16	0:0	2	c
op	47:17	0:0	2	->
water	47:19	0:0	2	frame_size
water	47:29	0:0	2	;
return	48:4	48:12	2	0
water	48:11	0:0	3	0
