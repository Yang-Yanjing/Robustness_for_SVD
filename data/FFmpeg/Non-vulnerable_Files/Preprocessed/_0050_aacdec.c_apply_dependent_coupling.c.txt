func	1:0	30:0	0	static void	apply_dependent_coupling
params	1:36	0:0	1	
param	1:37	1:51	2	AACContext *	ac
param	2:37	2:65	2	SingleChannelElement *	target
param	3:37	3:56	2	ChannelElement *	cce
param	3:58	3:67	2	int	index
stmnts	0:0	29:4	1	
decl	5:4	5:50	2	IndividualChannelStream	*ics
op	5:33	0:0	2	=
op	5:35	0:0	2	&
water	5:36	0:0	2	cce
op	5:39	0:0	2	->
water	5:41	0:0	2	ch
op	5:43	0:0	2	[
water	5:44	0:0	2	0
op	5:45	0:0	2	]
op	5:46	0:0	2	.
water	5:47	0:0	2	ics
decl	6:4	6:45	2	const uint16_t	*offsets
op	6:28	0:0	2	=
water	6:30	0:0	2	ics
op	6:33	0:0	2	->
water	6:35	0:0	2	swb_offset
decl	7:4	7:32	2	float	*dest
op	7:16	0:0	2	=
water	7:18	0:0	2	target
op	7:24	0:0	2	->
water	7:26	0:0	2	coeffs
decl	8:4	8:40	2	const float	*src
op	8:21	0:0	2	=
water	8:23	0:0	2	cce
op	8:26	0:0	2	->
water	8:28	0:0	2	ch
op	8:30	0:0	2	[
water	8:31	0:0	2	0
op	8:32	0:0	2	]
op	8:33	0:0	2	.
water	8:34	0:0	2	coeffs
decl	9:4	9:31	2	int	g
water	9:9	0:0	2	,
decl	9:4	9:31	2	int	i
water	9:12	0:0	2	,
decl	9:4	9:31	2	int	group
water	9:19	0:0	2	,
decl	9:4	9:31	2	int	k
water	9:22	0:0	2	,
decl	9:4	9:31	2	int	idx
op	9:28	0:0	2	=
water	9:30	0:0	2	0
if	10:4	14:4	2	(ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP)
cond	10:8	10:38	3	ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP
water	10:8	0:0	4	ac
op	10:10	0:0	4	->
water	10:12	0:0	4	oc
op	10:14	0:0	4	[
water	10:15	0:0	4	1
op	10:16	0:0	4	]
op	10:17	0:0	4	.
water	10:18	0:0	4	m4ac
op	10:22	0:0	4	.
water	10:23	0:0	4	object_type
op	10:35	0:0	4	==
water	10:38	0:0	4	AOT_AAC_LTP
stmts	10:51	14:4	3	
water	10:51	0:0	4	{
call	11:8	12:72	4	av_log
arg	11:15	11:24	5	ac->avctx
water	11:15	0:0	6	ac
op	11:17	0:0	6	->
water	11:19	0:0	6	avctx
arg	11:26	11:38	5	AV_LOG_ERROR
water	11:26	0:0	6	AV_LOG_ERROR
arg	12:15	12:72	5	"Dependent coupling is not supported together with LTP\n"
water	12:15	0:0	6	"Dependent coupling is not supported together with LTP\n"
water	12:73	0:0	4	;
return	13:8	13:14	4	
water	14:4	0:0	4	}
for	15:4	29:4	2	(g = 0 ;g < ics -> num_window_groups;g ++)
forinit	15:9	15:14	3	g = 0 ;
water	15:9	0:0	4	g
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:25	3	g < ics -> num_window_groups
water	15:16	0:0	4	g
op	15:18	0:0	4	<
water	15:20	0:0	4	ics
op	15:23	0:0	4	->
water	15:25	0:0	4	num_window_groups
forexpr	15:44	15:45	3	g ++
water	15:44	0:0	4	g
op	15:45	0:0	4	++
stmts	15:49	29:4	3	
water	15:49	0:0	4	{
for	16:8	26:8	4	(i = 0 ;i < ics -> max_sfb;i ++ , idx ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:29	5	i < ics -> max_sfb
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	ics
op	16:27	0:0	6	->
water	16:29	0:0	6	max_sfb
forexpr	16:38	16:46	5	i ++ , idx ++
water	16:38	0:0	6	i
op	16:39	0:0	6	++
water	16:41	0:0	6	,
water	16:43	0:0	6	idx
op	16:46	0:0	6	++
stmts	16:50	26:8	5	
water	16:50	0:0	6	{
if	17:12	25:12	6	(cce -> ch [ 0 ] . band_type [ idx ] != ZERO_BT)
cond	17:16	17:45	7	cce -> ch [ 0 ] . band_type [ idx ] != ZERO_BT
water	17:16	0:0	8	cce
op	17:19	0:0	8	->
water	17:21	0:0	8	ch
op	17:23	0:0	8	[
water	17:24	0:0	8	0
op	17:25	0:0	8	]
op	17:26	0:0	8	.
water	17:27	0:0	8	band_type
op	17:36	0:0	8	[
water	17:37	0:0	8	idx
op	17:40	0:0	8	]
op	17:42	0:0	8	!=
water	17:45	0:0	8	ZERO_BT
stmts	17:54	25:12	7	
water	17:54	0:0	8	{
decl	18:16	18:61	8	const float	gain
op	18:33	0:0	8	=
water	18:35	0:0	8	cce
op	18:38	0:0	8	->
water	18:40	0:0	8	coup
op	18:44	0:0	8	.
water	18:45	0:0	8	gain
op	18:49	0:0	8	[
water	18:50	0:0	8	index
op	18:55	0:0	8	]
op	18:56	0:0	8	[
water	18:57	0:0	8	idx
op	18:60	0:0	8	]
for	19:16	24:16	8	(group = 0 ;group < ics -> group_len [ g ];group ++)
forinit	19:21	19:30	9	group = 0 ;
water	19:21	0:0	10	group
op	19:27	0:0	10	=
water	19:29	0:0	10	0
water	19:30	0:0	10	;
cond	19:32	19:56	9	group < ics -> group_len [ g ]
water	19:32	0:0	10	group
op	19:38	0:0	10	<
water	19:40	0:0	10	ics
op	19:43	0:0	10	->
water	19:45	0:0	10	group_len
op	19:54	0:0	10	[
water	19:55	0:0	10	g
op	19:56	0:0	10	]
forexpr	19:59	19:64	9	group ++
water	19:59	0:0	10	group
op	19:64	0:0	10	++
stmts	19:68	24:16	9	
water	19:68	0:0	10	{
for	20:20	23:20	10	(k = offsets [ i ] ;k < offsets [ i + 1 ];k ++)
forinit	20:25	20:39	11	k = offsets [ i ] ;
water	20:25	0:0	12	k
op	20:27	0:0	12	=
water	20:29	0:0	12	offsets
op	20:36	0:0	12	[
water	20:37	0:0	12	i
op	20:38	0:0	12	]
water	20:39	0:0	12	;
cond	20:41	20:58	11	k < offsets [ i + 1 ]
water	20:41	0:0	12	k
op	20:43	0:0	12	<
water	20:45	0:0	12	offsets
op	20:52	0:0	12	[
water	20:53	0:0	12	i
op	20:55	0:0	12	+
water	20:57	0:0	12	1
op	20:58	0:0	12	]
forexpr	20:61	20:62	11	k ++
water	20:61	0:0	12	k
op	20:62	0:0	12	++
stmts	20:66	23:20	11	
water	20:66	0:0	12	{
water	22:24	0:0	12	dest
op	22:28	0:0	12	[
water	22:29	0:0	12	group
op	22:35	0:0	12	*
water	22:37	0:0	12	128
op	22:41	0:0	12	+
water	22:43	0:0	12	k
op	22:44	0:0	12	]
op	22:46	0:0	12	+=
water	22:49	0:0	12	gain
op	22:54	0:0	12	*
water	22:56	0:0	12	src
op	22:59	0:0	12	[
water	22:60	0:0	12	group
op	22:66	0:0	12	*
water	22:68	0:0	12	128
op	22:72	0:0	12	+
water	22:74	0:0	12	k
op	22:75	0:0	12	]
water	22:76	0:0	12	;
water	23:20	0:0	12	}
water	24:16	0:0	10	}
water	25:12	0:0	8	}
water	26:8	0:0	6	}
water	27:8	0:0	4	dest
op	27:13	0:0	4	+=
water	27:16	0:0	4	ics
op	27:19	0:0	4	->
water	27:21	0:0	4	group_len
op	27:30	0:0	4	[
water	27:31	0:0	4	g
op	27:32	0:0	4	]
op	27:34	0:0	4	*
water	27:36	0:0	4	128
water	27:39	0:0	4	;
water	28:8	0:0	4	src
op	28:13	0:0	4	+=
water	28:16	0:0	4	ics
op	28:19	0:0	4	->
water	28:21	0:0	4	group_len
op	28:30	0:0	4	[
water	28:31	0:0	4	g
op	28:32	0:0	4	]
op	28:34	0:0	4	*
water	28:36	0:0	4	128
water	28:39	0:0	4	;
water	29:4	0:0	4	}
