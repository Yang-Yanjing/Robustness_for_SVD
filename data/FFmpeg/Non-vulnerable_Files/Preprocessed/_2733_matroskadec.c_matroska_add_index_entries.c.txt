func	1:0	29:0	0	static void	matroska_add_index_entries
params	1:38	0:0	1	
param	1:39	1:69	2	MatroskaDemuxContext *	matroska
stmnts	0:0	28:4	1	
decl	3:4	3:24	2	EbmlList	*index_list
decl	4:4	4:24	2	MatroskaIndex	*index
decl	5:4	5:28	2	uint64_t	index_scale
op	5:25	0:0	2	=
water	5:27	0:0	2	1
decl	6:4	6:12	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	j
if	7:4	8:14	2	(matroska -> ctx -> flags & AVFMT_FLAG_IGNIDX)
cond	7:8	7:31	3	matroska -> ctx -> flags & AVFMT_FLAG_IGNIDX
water	7:8	0:0	4	matroska
op	7:16	0:0	4	->
water	7:18	0:0	4	ctx
op	7:21	0:0	4	->
water	7:23	0:0	4	flags
op	7:29	0:0	4	&
water	7:31	0:0	4	AVFMT_FLAG_IGNIDX
stmts	8:8	8:14	3	
return	8:8	8:14	4	
water	9:4	0:0	2	index_list
op	9:15	0:0	2	=
op	9:17	0:0	2	&
water	9:18	0:0	2	matroska
op	9:26	0:0	2	->
water	9:28	0:0	2	index
water	9:33	0:0	2	;
water	10:4	0:0	2	index
op	10:15	0:0	2	=
water	10:17	0:0	2	index_list
op	10:27	0:0	2	->
water	10:29	0:0	2	elem
water	10:33	0:0	2	;
if	11:4	15:4	2	(index_list -> nb_elem && index [ 0 ] . time > 1 E14 / matroska -> time_scale)
cond	11:8	12:41	3	index_list -> nb_elem && index [ 0 ] . time > 1 E14 / matroska -> time_scale
water	11:8	0:0	4	index_list
op	11:18	0:0	4	->
water	11:20	0:0	4	nb_elem
op	11:28	0:0	4	&&
water	12:8	0:0	4	index
op	12:13	0:0	4	[
water	12:14	0:0	4	0
op	12:15	0:0	4	]
op	12:16	0:0	4	.
water	12:17	0:0	4	time
op	12:22	0:0	4	>
water	12:24	0:0	4	1
water	12:25	0:0	4	E14
op	12:29	0:0	4	/
water	12:31	0:0	4	matroska
op	12:39	0:0	4	->
water	12:41	0:0	4	time_scale
stmts	12:53	15:4	3	
water	12:53	0:0	4	{
call	13:8	13:78	4	av_log
arg	13:15	13:28	5	matroska->ctx
water	13:15	0:0	6	matroska
op	13:23	0:0	6	->
water	13:25	0:0	6	ctx
arg	13:30	13:44	5	AV_LOG_WARNING
water	13:30	0:0	6	AV_LOG_WARNING
arg	13:46	13:78	5	"Working around broken index.\n"
water	13:46	0:0	6	"Working around broken index.\n"
water	13:79	0:0	4	;
water	14:8	0:0	4	index_scale
op	14:20	0:0	4	=
water	14:22	0:0	4	matroska
op	14:30	0:0	4	->
water	14:32	0:0	4	time_scale
water	14:42	0:0	4	;
water	15:4	0:0	4	}
for	16:4	28:4	2	(i = 0 ;i < index_list -> nb_elem;i ++)
forinit	16:9	16:14	3	i = 0 ;
water	16:9	0:0	4	i
op	16:11	0:0	4	=
water	16:13	0:0	4	0
water	16:14	0:0	4	;
cond	16:16	16:32	3	i < index_list -> nb_elem
water	16:16	0:0	4	i
op	16:18	0:0	4	<
water	16:20	0:0	4	index_list
op	16:30	0:0	4	->
water	16:32	0:0	4	nb_elem
forexpr	16:41	16:42	3	i ++
water	16:41	0:0	4	i
op	16:42	0:0	4	++
stmts	16:46	28:4	3	
water	16:46	0:0	4	{
decl	17:8	17:45	4	EbmlList	*pos_list
op	17:30	0:0	4	=
op	17:32	0:0	4	&
water	17:33	0:0	4	index
op	17:38	0:0	4	[
water	17:39	0:0	4	i
op	17:40	0:0	4	]
op	17:41	0:0	4	.
water	17:42	0:0	4	pos
decl	18:8	18:46	4	MatroskaIndexPos	*pos
op	18:30	0:0	4	=
water	18:32	0:0	4	pos_list
op	18:40	0:0	4	->
water	18:42	0:0	4	elem
for	19:8	27:8	4	(j = 0 ;j < pos_list -> nb_elem;j ++)
forinit	19:13	19:18	5	j = 0 ;
water	19:13	0:0	6	j
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:34	5	j < pos_list -> nb_elem
water	19:20	0:0	6	j
op	19:22	0:0	6	<
water	19:24	0:0	6	pos_list
op	19:32	0:0	6	->
water	19:34	0:0	6	nb_elem
forexpr	19:43	19:44	5	j ++
water	19:43	0:0	6	j
op	19:44	0:0	6	++
stmts	19:48	27:8	5	
water	19:48	0:0	6	{
decl	20:12	21:75	6	MatroskaTrack	*track
op	20:33	0:0	6	=
call	20:35	21:74	7	matroska_find_track_by_num
arg	20:62	20:70	8	matroska
water	20:62	0:0	9	matroska
arg	21:62	21:74	8	pos[j].track
water	21:62	0:0	9	pos
op	21:65	0:0	9	[
water	21:66	0:0	9	j
op	21:67	0:0	9	]
op	21:68	0:0	9	.
water	21:69	0:0	9	track
if	22:12	26:52	6	(track && track -> stream)
cond	22:16	22:32	7	track && track -> stream
water	22:16	0:0	8	track
op	22:22	0:0	8	&&
water	22:25	0:0	8	track
op	22:30	0:0	8	->
water	22:32	0:0	8	stream
stmts	23:16	26:52	7	
call	23:16	26:51	8	av_add_index_entry
arg	23:35	23:48	9	track->stream
water	23:35	0:0	10	track
op	23:40	0:0	10	->
water	23:42	0:0	10	stream
arg	24:35	24:71	9	pos[j].pos+matroska->segment_start
water	24:35	0:0	10	pos
op	24:38	0:0	10	[
water	24:39	0:0	10	j
op	24:40	0:0	10	]
op	24:41	0:0	10	.
water	24:42	0:0	10	pos
op	24:46	0:0	10	+
water	24:48	0:0	10	matroska
op	24:56	0:0	10	->
water	24:58	0:0	10	segment_start
arg	25:35	25:62	9	index[i].time/index_scale
water	25:35	0:0	10	index
op	25:40	0:0	10	[
water	25:41	0:0	10	i
op	25:42	0:0	10	]
op	25:43	0:0	10	.
water	25:44	0:0	10	time
op	25:49	0:0	10	/
water	25:51	0:0	10	index_scale
arg	25:64	25:65	9	0
water	25:64	0:0	10	0
arg	25:67	25:68	9	0
water	25:67	0:0	10	0
arg	26:35	26:51	9	AVINDEX_KEYFRAME
water	26:35	0:0	10	AVINDEX_KEYFRAME
water	26:52	0:0	8	;
water	27:8	0:0	6	}
water	28:4	0:0	4	}
