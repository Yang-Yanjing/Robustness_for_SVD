func	1:0	28:0	0	static void	show_help_muxer
params	1:27	0:0	1	
param	1:28	1:44	2	const char *	name
stmnts	0:0	27:71	1	
decl	3:4	3:33	2	const AVCodecDescriptor	*desc
decl	4:4	4:65	2	const AVOutputFormat	*fmt
op	4:30	0:0	2	=
call	4:32	4:64	3	av_guess_format
arg	4:48	4:52	4	name
water	4:48	0:0	5	name
arg	4:54	4:58	4	NULL
water	4:54	0:0	5	NULL
arg	4:60	4:64	4	NULL
water	4:60	0:0	5	NULL
if	5:4	8:4	2	(! fmt)
cond	5:8	5:9	3	! fmt
op	5:8	0:0	4	!
water	5:9	0:0	4	fmt
stmts	5:14	8:4	3	
water	5:14	0:0	4	{
call	6:8	6:65	4	av_log
arg	6:15	6:19	5	NULL
water	6:15	0:0	6	NULL
arg	6:21	6:33	5	AV_LOG_ERROR
water	6:21	0:0	6	AV_LOG_ERROR
arg	6:35	6:59	5	"Unknown format '%s'.\n"
water	6:35	0:0	6	"Unknown format '%s'.\n"
arg	6:61	6:65	5	name
water	6:61	0:0	6	name
water	6:66	0:0	4	;
return	7:8	7:14	4	
water	8:4	0:0	4	}
call	9:4	9:56	2	printf
arg	9:11	9:29	3	"Muxer %s [%s]:\n"
water	9:11	0:0	4	"Muxer %s [%s]:\n"
arg	9:31	9:40	3	fmt->name
water	9:31	0:0	4	fmt
op	9:34	0:0	4	->
water	9:36	0:0	4	name
arg	9:42	9:56	3	fmt->long_name
water	9:42	0:0	4	fmt
op	9:45	0:0	4	->
water	9:47	0:0	4	long_name
water	9:57	0:0	2	;
if	10:4	11:63	2	(fmt -> extensions)
cond	10:8	10:13	3	fmt -> extensions
water	10:8	0:0	4	fmt
op	10:11	0:0	4	->
water	10:13	0:0	4	extensions
stmts	11:8	11:63	3	
call	11:8	11:62	4	printf
arg	11:15	11:45	5	"    Common extensions: %s.\n"
water	11:15	0:0	6	"    Common extensions: %s.\n"
arg	11:47	11:62	5	fmt->extensions
water	11:47	0:0	6	fmt
op	11:50	0:0	6	->
water	11:52	0:0	6	extensions
water	11:63	0:0	4	;
if	12:4	13:54	2	(fmt -> mime_type)
cond	12:8	12:13	3	fmt -> mime_type
water	12:8	0:0	4	fmt
op	12:11	0:0	4	->
water	12:13	0:0	4	mime_type
stmts	13:8	13:54	3	
call	13:8	13:53	4	printf
arg	13:15	13:37	5	"    Mime type: %s.\n"
water	13:15	0:0	6	"    Mime type: %s.\n"
arg	13:39	13:53	5	fmt->mime_type
water	13:39	0:0	6	fmt
op	13:42	0:0	6	->
water	13:44	0:0	6	mime_type
water	13:54	0:0	4	;
if	14:4	17:4	2	(fmt -> video_codec != AV_CODEC_ID_NONE && ( desc =avcodec_descriptor_get (fmt -> video_codec ) ))
cond	14:8	15:56	3	fmt -> video_codec != AV_CODEC_ID_NONE && ( desc =avcodec_descriptor_get (fmt -> video_codec ) )
water	14:8	0:0	4	fmt
op	14:11	0:0	4	->
water	14:13	0:0	4	video_codec
op	14:25	0:0	4	!=
water	14:28	0:0	4	AV_CODEC_ID_NONE
op	14:45	0:0	4	&&
water	15:8	0:0	4	(
water	15:9	0:0	4	desc
op	15:14	0:0	4	=
call	15:16	15:55	4	avcodec_descriptor_get
arg	15:39	15:55	5	fmt->video_codec
water	15:39	0:0	6	fmt
op	15:42	0:0	6	->
water	15:44	0:0	6	video_codec
water	15:56	0:0	4	)
stmts	15:59	17:4	3	
water	15:59	0:0	4	{
call	16:8	16:59	4	printf
arg	16:15	16:47	5	"    Default video codec: %s.\n"
water	16:15	0:0	6	"    Default video codec: %s.\n"
arg	16:49	16:59	5	desc->name
water	16:49	0:0	6	desc
op	16:53	0:0	6	->
water	16:55	0:0	6	name
water	16:60	0:0	4	;
water	17:4	0:0	4	}
if	18:4	21:4	2	(fmt -> audio_codec != AV_CODEC_ID_NONE && ( desc =avcodec_descriptor_get (fmt -> audio_codec ) ))
cond	18:8	19:56	3	fmt -> audio_codec != AV_CODEC_ID_NONE && ( desc =avcodec_descriptor_get (fmt -> audio_codec ) )
water	18:8	0:0	4	fmt
op	18:11	0:0	4	->
water	18:13	0:0	4	audio_codec
op	18:25	0:0	4	!=
water	18:28	0:0	4	AV_CODEC_ID_NONE
op	18:45	0:0	4	&&
water	19:8	0:0	4	(
water	19:9	0:0	4	desc
op	19:14	0:0	4	=
call	19:16	19:55	4	avcodec_descriptor_get
arg	19:39	19:55	5	fmt->audio_codec
water	19:39	0:0	6	fmt
op	19:42	0:0	6	->
water	19:44	0:0	6	audio_codec
water	19:56	0:0	4	)
stmts	19:59	21:4	3	
water	19:59	0:0	4	{
call	20:8	20:59	4	printf
arg	20:15	20:47	5	"    Default audio codec: %s.\n"
water	20:15	0:0	6	"    Default audio codec: %s.\n"
arg	20:49	20:59	5	desc->name
water	20:49	0:0	6	desc
op	20:53	0:0	6	->
water	20:55	0:0	6	name
water	20:60	0:0	4	;
water	21:4	0:0	4	}
if	22:4	25:4	2	(fmt -> subtitle_codec != AV_CODEC_ID_NONE && ( desc =avcodec_descriptor_get (fmt -> subtitle_codec ) ))
cond	22:8	23:59	3	fmt -> subtitle_codec != AV_CODEC_ID_NONE && ( desc =avcodec_descriptor_get (fmt -> subtitle_codec ) )
water	22:8	0:0	4	fmt
op	22:11	0:0	4	->
water	22:13	0:0	4	subtitle_codec
op	22:28	0:0	4	!=
water	22:31	0:0	4	AV_CODEC_ID_NONE
op	22:48	0:0	4	&&
water	23:8	0:0	4	(
water	23:9	0:0	4	desc
op	23:14	0:0	4	=
call	23:16	23:58	4	avcodec_descriptor_get
arg	23:39	23:58	5	fmt->subtitle_codec
water	23:39	0:0	6	fmt
op	23:42	0:0	6	->
water	23:44	0:0	6	subtitle_codec
water	23:59	0:0	4	)
stmts	23:62	25:4	3	
water	23:62	0:0	4	{
call	24:8	24:62	4	printf
arg	24:15	24:50	5	"    Default subtitle codec: %s.\n"
water	24:15	0:0	6	"    Default subtitle codec: %s.\n"
arg	24:52	24:62	5	desc->name
water	24:52	0:0	6	desc
op	24:56	0:0	6	->
water	24:58	0:0	6	name
water	24:63	0:0	4	;
water	25:4	0:0	4	}
if	26:4	27:71	2	(fmt -> priv_class)
cond	26:8	26:13	3	fmt -> priv_class
water	26:8	0:0	4	fmt
op	26:11	0:0	4	->
water	26:13	0:0	4	priv_class
stmts	27:8	27:71	3	
call	27:8	27:70	4	show_help_children
arg	27:27	27:42	5	fmt->priv_class
water	27:27	0:0	6	fmt
op	27:30	0:0	6	->
water	27:32	0:0	6	priv_class
arg	27:44	27:70	5	AV_OPT_FLAG_ENCODING_PARAM
water	27:44	0:0	6	AV_OPT_FLAG_ENCODING_PARAM
water	27:71	0:0	4	;
