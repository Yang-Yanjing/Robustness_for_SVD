func	1:0	51:0	0	static int	init_pattern_from_file
params	1:33	0:0	1	
param	1:34	1:54	2	AVFilterContext *	ctx
stmnts	0:0	50:12	1	
decl	3:4	3:33	2	LifeContext	*life
op	3:22	0:0	2	=
water	3:24	0:0	2	ctx
op	3:27	0:0	2	->
water	3:29	0:0	2	priv
decl	4:4	4:11	2	char	*p
decl	5:4	5:42	2	int	ret
water	5:11	0:0	2	,
decl	5:4	5:42	2	int	i
water	5:14	0:0	2	,
decl	5:4	5:42	2	int	i0
water	5:18	0:0	2	,
decl	5:4	5:42	2	int	j
water	5:21	0:0	2	,
decl	5:4	5:42	2	int	h
op	5:25	0:0	2	=
water	5:27	0:0	2	0
water	5:28	0:0	2	,
decl	5:4	5:42	2	int	w
water	5:31	0:0	2	,
decl	5:4	5:42	2	int	max_w
op	5:39	0:0	2	=
water	5:41	0:0	2	0
if	6:4	8:18	2	(( ret =av_file_map (life -> filename ,& life -> file_buf ,& life -> file_bufsize ,0 ,ctx ) ) < 0)
cond	6:8	7:38	3	( ret =av_file_map (life -> filename ,& life -> file_buf ,& life -> file_bufsize ,0 ,ctx ) ) < 0
water	6:8	0:0	4	(
water	6:9	0:0	4	ret
op	6:13	0:0	4	=
call	6:15	7:33	4	av_file_map
arg	6:27	6:41	5	life->filename
water	6:27	0:0	6	life
op	6:31	0:0	6	->
water	6:33	0:0	6	filename
arg	6:43	6:58	5	&life->file_buf
op	6:43	0:0	6	&
water	6:44	0:0	6	life
op	6:48	0:0	6	->
water	6:50	0:0	6	file_buf
arg	6:60	6:79	5	&life->file_bufsize
op	6:60	0:0	6	&
water	6:61	0:0	6	life
op	6:65	0:0	6	->
water	6:67	0:0	6	file_bufsize
arg	7:27	7:28	5	0
water	7:27	0:0	6	0
arg	7:30	7:33	5	ctx
water	7:30	0:0	6	ctx
water	7:34	0:0	4	)
op	7:36	0:0	4	<
water	7:38	0:0	4	0
stmts	8:8	8:18	3	
return	8:8	8:18	4	ret
water	8:15	0:0	5	ret
call	9:4	9:28	2	av_freep
arg	9:13	9:28	3	&life->filename
op	9:13	0:0	4	&
water	9:14	0:0	4	life
op	9:18	0:0	4	->
water	9:20	0:0	4	filename
water	9:29	0:0	2	;
water	11:4	0:0	2	w
op	11:6	0:0	2	=
water	11:8	0:0	2	0
water	11:9	0:0	2	;
for	12:4	18:4	2	(i = 0 ;i < life -> file_bufsize;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:26	3	i < life -> file_bufsize
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	life
op	12:24	0:0	4	->
water	12:26	0:0	4	file_bufsize
forexpr	12:40	12:41	3	i ++
water	12:40	0:0	4	i
op	12:41	0:0	4	++
stmts	12:45	18:4	3	
water	12:45	0:0	4	{
if	13:8	15:8	4	(life -> file_buf [ i ] == '\n')
cond	13:12	13:33	5	life -> file_buf [ i ] == '\n'
water	13:12	0:0	6	life
op	13:16	0:0	6	->
water	13:18	0:0	6	file_buf
op	13:26	0:0	6	[
water	13:27	0:0	6	i
op	13:28	0:0	6	]
op	13:30	0:0	6	==
water	13:33	0:0	6	'\n'
stmts	13:39	15:8	5	
water	13:39	0:0	6	{
water	14:12	0:0	6	h
op	14:13	0:0	6	++
water	14:15	0:0	6	;
water	14:17	0:0	6	max_w
op	14:23	0:0	6	=
call	14:25	14:39	6	FFMAX
arg	14:31	14:32	7	w
water	14:31	0:0	8	w
arg	14:34	14:39	7	max_w
water	14:34	0:0	8	max_w
water	14:40	0:0	6	;
water	14:42	0:0	6	w
op	14:44	0:0	6	=
water	14:46	0:0	6	0
water	14:47	0:0	6	;
water	15:8	0:0	6	}
else	15:10	17:8	4
stmts	15:15	17:8	5	
water	15:15	0:0	6	{
water	16:12	0:0	6	w
op	16:13	0:0	6	++
water	16:15	0:0	6	;
water	17:8	0:0	6	}
water	18:4	0:0	4	}
call	19:4	19:57	2	av_log
arg	19:11	19:14	3	ctx
water	19:11	0:0	4	ctx
arg	19:16	19:28	3	AV_LOG_DEBUG
water	19:16	0:0	4	AV_LOG_DEBUG
arg	19:30	19:47	3	"h:%d max_w:%d\n"
water	19:30	0:0	4	"h:%d max_w:%d\n"
arg	19:49	19:50	3	h
water	19:49	0:0	4	h
arg	19:52	19:57	3	max_w
water	19:52	0:0	4	max_w
water	19:58	0:0	2	;
if	20:4	27:4	2	(life -> w)
cond	20:8	20:14	3	life -> w
water	20:8	0:0	4	life
op	20:12	0:0	4	->
water	20:14	0:0	4	w
stmts	20:17	27:4	3	
water	20:17	0:0	4	{
if	21:8	26:8	4	(max_w > life -> w || h > life -> h)
cond	21:12	21:41	5	max_w > life -> w || h > life -> h
water	21:12	0:0	6	max_w
op	21:18	0:0	6	>
water	21:20	0:0	6	life
op	21:24	0:0	6	->
water	21:26	0:0	6	w
op	21:28	0:0	6	||
water	21:31	0:0	6	h
op	21:33	0:0	6	>
water	21:35	0:0	6	life
op	21:39	0:0	6	->
water	21:41	0:0	6	h
stmts	21:44	26:8	5	
water	21:44	0:0	6	{
call	22:12	24:45	6	av_log
arg	22:19	22:22	7	ctx
water	22:19	0:0	8	ctx
arg	22:24	22:36	7	AV_LOG_ERROR
water	22:24	0:0	8	AV_LOG_ERROR
arg	23:19	23:103	7	"The specified size is %dx%d which cannot contain the provided file size of %dx%d\n"
water	23:19	0:0	8	"The specified size is %dx%d which cannot contain the provided file size of %dx%d\n"
arg	24:19	24:26	7	life->w
water	24:19	0:0	8	life
op	24:23	0:0	8	->
water	24:25	0:0	8	w
arg	24:28	24:35	7	life->h
water	24:28	0:0	8	life
op	24:32	0:0	8	->
water	24:34	0:0	8	h
arg	24:37	24:42	7	max_w
water	24:37	0:0	8	max_w
arg	24:44	24:45	7	h
water	24:44	0:0	8	h
water	24:46	0:0	6	;
return	25:12	25:34	6	AVERROR(EINVAL)
call	25:19	25:33	7	AVERROR
arg	25:27	25:33	8	EINVAL
water	25:27	0:0	9	EINVAL
water	26:8	0:0	6	}
water	27:4	0:0	4	}
else	27:6	31:4	2
stmts	27:11	31:4	3	
water	27:11	0:0	4	{
water	29:8	0:0	4	life
op	29:12	0:0	4	->
water	29:14	0:0	4	w
op	29:16	0:0	4	=
water	29:18	0:0	4	max_w
water	29:23	0:0	4	;
water	30:8	0:0	4	life
op	30:12	0:0	4	->
water	30:14	0:0	4	h
op	30:16	0:0	4	=
water	30:18	0:0	4	h
water	30:19	0:0	4	;
water	31:4	0:0	4	}
if	32:4	37:4	2	(! ( life -> buf [ 0 ] =av_calloc (life -> h * life -> w ,sizeof ( * life -> buf [ 0 ] ) ) ) || ! ( life -> buf [ 1 ] =av_calloc (life -> h * life -> w ,sizeof ( * life -> buf [ 1 ] ) ) ))
cond	32:8	33:76	3	! ( life -> buf [ 0 ] =av_calloc (life -> h * life -> w ,sizeof ( * life -> buf [ 0 ] ) ) ) || ! ( life -> buf [ 1 ] =av_calloc (life -> h * life -> w ,sizeof ( * life -> buf [ 1 ] ) ) )
op	32:8	0:0	4	!
water	32:9	0:0	4	(
water	32:10	0:0	4	life
op	32:14	0:0	4	->
water	32:16	0:0	4	buf
op	32:19	0:0	4	[
water	32:20	0:0	4	0
op	32:21	0:0	4	]
op	32:23	0:0	4	=
call	32:25	32:75	4	av_calloc
arg	32:35	32:52	5	life->h*life->w
water	32:35	0:0	6	life
op	32:39	0:0	6	->
water	32:41	0:0	6	h
op	32:43	0:0	6	*
water	32:45	0:0	6	life
op	32:49	0:0	6	->
water	32:51	0:0	6	w
arg	32:54	32:75	5	sizeof(*life->buf[0])
op	32:54	0:0	6	sizeof
water	32:60	0:0	6	(
op	32:61	0:0	6	*
water	32:62	0:0	6	life
op	32:66	0:0	6	->
water	32:68	0:0	6	buf
op	32:71	0:0	6	[
water	32:72	0:0	6	0
op	32:73	0:0	6	]
water	32:74	0:0	6	)
water	32:76	0:0	4	)
op	32:78	0:0	4	||
op	33:8	0:0	4	!
water	33:9	0:0	4	(
water	33:10	0:0	4	life
op	33:14	0:0	4	->
water	33:16	0:0	4	buf
op	33:19	0:0	4	[
water	33:20	0:0	4	1
op	33:21	0:0	4	]
op	33:23	0:0	4	=
call	33:25	33:75	4	av_calloc
arg	33:35	33:52	5	life->h*life->w
water	33:35	0:0	6	life
op	33:39	0:0	6	->
water	33:41	0:0	6	h
op	33:43	0:0	6	*
water	33:45	0:0	6	life
op	33:49	0:0	6	->
water	33:51	0:0	6	w
arg	33:54	33:75	5	sizeof(*life->buf[1])
op	33:54	0:0	6	sizeof
water	33:60	0:0	6	(
op	33:61	0:0	6	*
water	33:62	0:0	6	life
op	33:66	0:0	6	->
water	33:68	0:0	6	buf
op	33:71	0:0	6	[
water	33:72	0:0	6	1
op	33:73	0:0	6	]
water	33:74	0:0	6	)
water	33:76	0:0	4	)
stmts	33:79	37:4	3	
water	33:79	0:0	4	{
call	34:8	34:30	4	av_freep
arg	34:17	34:30	5	&life->buf[0]
op	34:17	0:0	6	&
water	34:18	0:0	6	life
op	34:22	0:0	6	->
water	34:24	0:0	6	buf
op	34:27	0:0	6	[
water	34:28	0:0	6	0
op	34:29	0:0	6	]
water	34:31	0:0	4	;
call	35:8	35:30	4	av_freep
arg	35:17	35:30	5	&life->buf[1]
op	35:17	0:0	6	&
water	35:18	0:0	6	life
op	35:22	0:0	6	->
water	35:24	0:0	6	buf
op	35:27	0:0	6	[
water	35:28	0:0	6	1
op	35:29	0:0	6	]
water	35:31	0:0	4	;
return	36:8	36:30	4	AVERROR(ENOMEM)
call	36:15	36:29	5	AVERROR
arg	36:23	36:29	6	ENOMEM
water	36:23	0:0	7	ENOMEM
water	37:4	0:0	4	}
water	39:4	0:0	2	p
op	39:6	0:0	2	=
water	39:8	0:0	2	life
op	39:12	0:0	2	->
water	39:14	0:0	2	file_buf
water	39:22	0:0	2	;
for	40:4	48:4	2	(i0 = 0 , i = ( life -> h - h ) / 2 ;i0 < h;i0 ++ , i ++)
forinit	40:9	40:36	3	i0 = 0 , i = ( life -> h - h ) / 2 ;
water	40:9	0:0	4	i0
op	40:12	0:0	4	=
water	40:14	0:0	4	0
water	40:15	0:0	4	,
water	40:17	0:0	4	i
op	40:19	0:0	4	=
water	40:21	0:0	4	(
water	40:22	0:0	4	life
op	40:26	0:0	4	->
water	40:28	0:0	4	h
op	40:30	0:0	4	-
water	40:32	0:0	4	h
water	40:33	0:0	4	)
op	40:34	0:0	4	/
water	40:35	0:0	4	2
water	40:36	0:0	4	;
cond	40:38	40:43	3	i0 < h
water	40:38	0:0	4	i0
op	40:41	0:0	4	<
water	40:43	0:0	4	h
forexpr	40:46	40:53	3	i0 ++ , i ++
water	40:46	0:0	4	i0
op	40:48	0:0	4	++
water	40:50	0:0	4	,
water	40:52	0:0	4	i
op	40:53	0:0	4	++
stmts	40:57	48:4	3	
water	40:57	0:0	4	{
for	41:8	47:8	4	(j = ( life -> w - max_w ) / 2 ;;j ++)
forinit	41:13	41:36	5	j = ( life -> w - max_w ) / 2 ;
water	41:13	0:0	6	j
op	41:15	0:0	6	=
water	41:17	0:0	6	(
water	41:18	0:0	6	life
op	41:22	0:0	6	->
water	41:24	0:0	6	w
op	41:26	0:0	6	-
water	41:28	0:0	6	max_w
water	41:33	0:0	6	)
op	41:34	0:0	6	/
water	41:35	0:0	6	2
water	41:36	0:0	6	;
cond	0:0	0:0	5	
forexpr	41:39	41:40	5	j ++
water	41:39	0:0	6	j
op	41:40	0:0	6	++
stmts	41:44	47:8	5	
water	41:44	0:0	6	{
call	42:12	42:79	6	av_log
arg	42:19	42:22	7	ctx
water	42:19	0:0	8	ctx
arg	42:24	42:36	7	AV_LOG_DEBUG
water	42:24	0:0	8	AV_LOG_DEBUG
arg	42:38	42:50	7	"%d:%d %c\n"
water	42:38	0:0	8	"%d:%d %c\n"
arg	42:52	42:53	7	i
water	42:52	0:0	8	i
arg	42:55	42:56	7	j
water	42:55	0:0	8	j
arg	42:58	42:79	7	*p=='\n'?'N':*p
op	42:58	0:0	8	*
water	42:59	0:0	8	p
op	42:61	0:0	8	==
water	42:64	0:0	8	'\n'
water	42:69	0:0	8	?
water	42:71	0:0	8	'N'
water	42:75	0:0	8	:
op	42:77	0:0	8	*
water	42:78	0:0	8	p
water	42:80	0:0	6	;
if	43:12	45:12	6	(* p == '\n')
cond	43:16	43:22	7	* p == '\n'
op	43:16	0:0	8	*
water	43:17	0:0	8	p
op	43:19	0:0	8	==
water	43:22	0:0	8	'\n'
stmts	43:28	45:12	7	
water	43:28	0:0	8	{
water	44:16	0:0	8	p
op	44:17	0:0	8	++
water	44:19	0:0	8	;
break	44:21	44:26	8	
water	45:12	0:0	8	}
else	45:14	46:81	6
stmts	46:16	46:81	7	
water	46:16	0:0	8	life
op	46:20	0:0	8	->
water	46:22	0:0	8	buf
op	46:25	0:0	8	[
water	46:26	0:0	8	0
op	46:27	0:0	8	]
op	46:28	0:0	8	[
water	46:29	0:0	8	i
op	46:30	0:0	8	*
water	46:31	0:0	8	life
op	46:35	0:0	8	->
water	46:37	0:0	8	w
op	46:39	0:0	8	+
water	46:41	0:0	8	j
op	46:42	0:0	8	]
op	46:44	0:0	8	=
call	46:46	46:63	8	av_isgraph
arg	46:57	46:63	9	*(p++)
op	46:57	0:0	10	*
water	46:58	0:0	10	(
water	46:59	0:0	10	p
op	46:60	0:0	10	++
water	46:62	0:0	10	)
water	46:65	0:0	8	?
water	46:67	0:0	8	ALIVE_CELL
water	46:78	0:0	8	:
water	46:80	0:0	8	0
water	46:81	0:0	8	;
water	47:8	0:0	6	}
water	48:4	0:0	4	}
water	49:4	0:0	2	life
op	49:8	0:0	2	->
water	49:10	0:0	2	buf_idx
op	49:18	0:0	2	=
water	49:20	0:0	2	0
water	49:21	0:0	2	;
return	50:4	50:12	2	0
water	50:11	0:0	3	0
