func	1:0	37:0	0	static int	asf_deinterleave
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
param	1:48	1:66	2	ASFPacket *	asf_pkt
param	1:68	1:78	2	int	st_num
stmnts	0:0	36:12	1	
decl	3:4	3:37	2	ASFContext	*asf
op	3:23	0:0	2	=
water	3:25	0:0	2	s
op	3:26	0:0	2	->
water	3:28	0:0	2	priv_data
decl	4:4	4:44	2	ASFStream	*asf_st
op	4:23	0:0	2	=
water	4:25	0:0	2	asf
op	4:28	0:0	2	->
water	4:30	0:0	2	asf_st
op	4:36	0:0	2	[
water	4:37	0:0	2	st_num
op	4:43	0:0	2	]
decl	5:4	5:44	2	unsigned char	*p
op	5:23	0:0	2	=
water	5:25	0:0	2	asf_pkt
op	5:32	0:0	2	->
water	5:34	0:0	2	avpkt
op	5:39	0:0	2	.
water	5:40	0:0	2	data
decl	6:4	6:61	2	uint16_t	pkt_len
op	6:23	0:0	2	=
water	6:25	0:0	2	asf
op	6:28	0:0	2	->
water	6:30	0:0	2	asf_st
op	6:36	0:0	2	[
water	6:37	0:0	2	st_num
op	6:43	0:0	2	]
op	6:44	0:0	2	->
water	6:46	0:0	2	virtual_pkt_len
decl	7:4	7:63	2	uint16_t	chunk_len
op	7:23	0:0	2	=
water	7:25	0:0	2	asf
op	7:28	0:0	2	->
water	7:30	0:0	2	asf_st
op	7:36	0:0	2	[
water	7:37	0:0	2	st_num
op	7:43	0:0	2	]
op	7:44	0:0	2	->
water	7:46	0:0	2	virtual_chunk_len
decl	8:4	8:44	2	int	nchunks
op	8:23	0:0	2	=
water	8:25	0:0	2	pkt_len
op	8:33	0:0	2	/
water	8:35	0:0	2	chunk_len
decl	9:4	9:16	2	AVPacket	pkt
decl	10:4	10:26	2	int	pos
op	10:12	0:0	2	=
water	10:14	0:0	2	0
water	10:15	0:0	2	,
decl	10:4	10:26	2	int	j
water	10:18	0:0	2	,
decl	10:4	10:26	2	int	l
water	10:21	0:0	2	,
decl	10:4	10:26	2	int	ret
if	11:4	12:18	2	(( ret =av_new_packet (& pkt ,asf_pkt -> data_size ) ) < 0)
cond	11:8	11:58	3	( ret =av_new_packet (& pkt ,asf_pkt -> data_size ) ) < 0
water	11:8	0:0	4	(
water	11:9	0:0	4	ret
op	11:13	0:0	4	=
call	11:15	11:53	4	av_new_packet
arg	11:29	11:33	5	&pkt
op	11:29	0:0	6	&
water	11:30	0:0	6	pkt
arg	11:35	11:53	5	asf_pkt->data_size
water	11:35	0:0	6	asf_pkt
op	11:42	0:0	6	->
water	11:44	0:0	6	data_size
water	11:54	0:0	4	)
op	11:56	0:0	4	<
water	11:58	0:0	4	0
stmts	12:8	12:18	3	
return	12:8	12:18	4	ret
water	12:15	0:0	5	ret
while	13:4	33:4	2	(asf_pkt -> data_size >= asf_st -> span * pkt_len + pos)
cond	13:11	13:58	3	asf_pkt -> data_size >= asf_st -> span * pkt_len + pos
water	13:11	0:0	4	asf_pkt
op	13:18	0:0	4	->
water	13:20	0:0	4	data_size
op	13:30	0:0	4	>=
water	13:33	0:0	4	asf_st
op	13:39	0:0	4	->
water	13:41	0:0	4	span
op	13:46	0:0	4	*
water	13:48	0:0	4	pkt_len
op	13:56	0:0	4	+
water	13:58	0:0	4	pos
stmts	13:63	33:4	3	
water	13:63	0:0	4	{
if	14:8	16:8	4	(pos >= asf_pkt -> data_size)
cond	14:12	14:28	5	pos >= asf_pkt -> data_size
water	14:12	0:0	6	pos
op	14:16	0:0	6	>=
water	14:19	0:0	6	asf_pkt
op	14:26	0:0	6	->
water	14:28	0:0	6	data_size
stmts	14:39	16:8	5	
water	14:39	0:0	6	{
break	15:12	15:17	6	
water	16:8	0:0	6	}
for	17:8	29:8	4	(l = 0 ;l < pkt_len;l ++)
forinit	17:13	17:18	5	l = 0 ;
water	17:13	0:0	6	l
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:24	5	l < pkt_len
water	17:20	0:0	6	l
op	17:22	0:0	6	<
water	17:24	0:0	6	pkt_len
forexpr	17:33	17:34	5	l ++
water	17:33	0:0	6	l
op	17:34	0:0	6	++
stmts	17:38	29:8	5	
water	17:38	0:0	6	{
if	18:12	20:12	6	(pos >= asf_pkt -> data_size)
cond	18:16	18:32	7	pos >= asf_pkt -> data_size
water	18:16	0:0	8	pos
op	18:20	0:0	8	>=
water	18:23	0:0	8	asf_pkt
op	18:30	0:0	8	->
water	18:32	0:0	8	data_size
stmts	18:43	20:12	7	
water	18:43	0:0	8	{
break	19:16	19:21	8	
water	20:12	0:0	8	}
for	21:12	28:12	6	(j = 0 ;j < asf_st -> span;j ++)
forinit	21:17	21:22	7	j = 0 ;
water	21:17	0:0	8	j
op	21:19	0:0	8	=
water	21:21	0:0	8	0
water	21:22	0:0	8	;
cond	21:24	21:36	7	j < asf_st -> span
water	21:24	0:0	8	j
op	21:26	0:0	8	<
water	21:28	0:0	8	asf_st
op	21:34	0:0	8	->
water	21:36	0:0	8	span
forexpr	21:42	21:43	7	j ++
water	21:42	0:0	8	j
op	21:43	0:0	8	++
stmts	21:47	28:12	7	
water	21:47	0:0	8	{
if	22:16	23:25	8	(( pos + chunk_len ) >= asf_pkt -> data_size)
cond	22:20	22:50	9	( pos + chunk_len ) >= asf_pkt -> data_size
water	22:20	0:0	10	(
water	22:21	0:0	10	pos
op	22:25	0:0	10	+
water	22:27	0:0	10	chunk_len
water	22:36	0:0	10	)
op	22:38	0:0	10	>=
water	22:41	0:0	10	asf_pkt
op	22:48	0:0	10	->
water	22:50	0:0	10	data_size
stmts	23:20	23:25	9	
break	23:20	23:25	10	
call	24:16	26:32	8	memcpy
arg	24:23	24:37	9	pkt.data+pos
water	24:23	0:0	10	pkt
op	24:26	0:0	10	.
water	24:27	0:0	10	data
op	24:32	0:0	10	+
water	24:34	0:0	10	pos
arg	25:23	25:56	9	p+(j*nchunks+l)*chunk_len
water	25:23	0:0	10	p
op	25:25	0:0	10	+
water	25:27	0:0	10	(
water	25:28	0:0	10	j
op	25:30	0:0	10	*
water	25:32	0:0	10	nchunks
op	25:40	0:0	10	+
water	25:42	0:0	10	l
water	25:43	0:0	10	)
op	25:45	0:0	10	*
water	25:47	0:0	10	chunk_len
arg	26:23	26:32	9	chunk_len
water	26:23	0:0	10	chunk_len
water	26:33	0:0	8	;
water	27:16	0:0	8	pos
op	27:20	0:0	8	+=
water	27:23	0:0	8	chunk_len
water	27:32	0:0	8	;
water	28:12	0:0	8	}
water	29:8	0:0	6	}
water	30:8	0:0	4	p
op	30:10	0:0	4	+=
water	30:13	0:0	4	asf_st
op	30:19	0:0	4	->
water	30:21	0:0	4	span
op	30:26	0:0	4	*
water	30:28	0:0	4	pkt_len
water	30:35	0:0	4	;
if	31:8	32:17	4	(p > asf_pkt -> avpkt . data + asf_pkt -> data_size)
cond	31:12	31:47	5	p > asf_pkt -> avpkt . data + asf_pkt -> data_size
water	31:12	0:0	6	p
op	31:14	0:0	6	>
water	31:16	0:0	6	asf_pkt
op	31:23	0:0	6	->
water	31:25	0:0	6	avpkt
op	31:30	0:0	6	.
water	31:31	0:0	6	data
op	31:36	0:0	6	+
water	31:38	0:0	6	asf_pkt
op	31:45	0:0	6	->
water	31:47	0:0	6	data_size
stmts	32:12	32:17	5	
break	32:12	32:17	6	
water	33:4	0:0	4	}
call	34:4	34:34	2	av_free_packet
arg	34:19	34:34	3	&asf_pkt->avpkt
op	34:19	0:0	4	&
water	34:20	0:0	4	asf_pkt
op	34:27	0:0	4	->
water	34:29	0:0	4	avpkt
water	34:35	0:0	2	;
water	35:4	0:0	2	asf_pkt
op	35:11	0:0	2	->
water	35:13	0:0	2	avpkt
op	35:19	0:0	2	=
water	35:21	0:0	2	pkt
water	35:24	0:0	2	;
return	36:4	36:12	2	0
water	36:11	0:0	3	0
