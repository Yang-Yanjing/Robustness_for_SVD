func	1:0	55:0	0	static int	ac3_parse_header
params	1:27	0:0	1	
param	1:28	1:47	2	AC3DecodeContext *	s
stmnts	0:0	54:12	1	
decl	3:4	3:32	2	GetBitContext	*gbc
op	3:23	0:0	2	=
op	3:25	0:0	2	&
water	3:26	0:0	2	s
op	3:27	0:0	2	->
water	3:29	0:0	2	gbc
decl	4:4	4:9	2	int	i
water	6:4	0:0	2	i
op	6:6	0:0	2	=
op	6:8	0:0	2	!
water	6:9	0:0	2	s
op	6:10	0:0	2	->
water	6:12	0:0	2	channel_mode
water	6:24	0:0	2	;
do	7:4	25:4	2	(i --)
cond	25:13	25:14	3	i --
water	25:13	0:0	4	i
op	25:14	0:0	4	--
stmts	7:7	25:4	3	
water	7:7	0:0	4	{
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	dialog_normalization
op	8:31	0:0	4	[
water	8:32	0:0	4	(
op	8:33	0:0	4	!
water	8:34	0:0	4	s
op	8:35	0:0	4	->
water	8:37	0:0	4	channel_mode
water	8:49	0:0	4	)
op	8:50	0:0	4	-
water	8:51	0:0	4	i
op	8:52	0:0	4	]
op	8:54	0:0	4	=
op	8:56	0:0	4	-
call	8:57	8:72	4	get_bits
arg	8:66	8:69	5	gbc
water	8:66	0:0	6	gbc
arg	8:71	8:72	5	5
water	8:71	0:0	6	5
water	8:73	0:0	4	;
if	9:8	11:8	4	(s -> dialog_normalization [ ( ! s -> channel_mode ) - i ] == 0)
cond	9:12	9:61	5	s -> dialog_normalization [ ( ! s -> channel_mode ) - i ] == 0
water	9:12	0:0	6	s
op	9:13	0:0	6	->
water	9:15	0:0	6	dialog_normalization
op	9:35	0:0	6	[
water	9:36	0:0	6	(
op	9:37	0:0	6	!
water	9:38	0:0	6	s
op	9:39	0:0	6	->
water	9:41	0:0	6	channel_mode
water	9:53	0:0	6	)
op	9:54	0:0	6	-
water	9:55	0:0	6	i
op	9:56	0:0	6	]
op	9:58	0:0	6	==
water	9:61	0:0	6	0
stmts	9:64	11:8	5	
water	9:64	0:0	6	{
water	10:12	0:0	6	s
op	10:13	0:0	6	->
water	10:15	0:0	6	dialog_normalization
op	10:35	0:0	6	[
water	10:36	0:0	6	(
op	10:37	0:0	6	!
water	10:38	0:0	6	s
op	10:39	0:0	6	->
water	10:41	0:0	6	channel_mode
water	10:53	0:0	6	)
op	10:54	0:0	6	-
water	10:55	0:0	6	i
op	10:56	0:0	6	]
op	10:58	0:0	6	=
op	10:60	0:0	6	-
water	10:61	0:0	6	31
water	10:63	0:0	6	;
water	11:8	0:0	6	}
if	12:8	16:8	4	(s -> target_level != 0)
cond	12:12	12:31	5	s -> target_level != 0
water	12:12	0:0	6	s
op	12:13	0:0	6	->
water	12:15	0:0	6	target_level
op	12:28	0:0	6	!=
water	12:31	0:0	6	0
stmts	12:34	16:8	5	
water	12:34	0:0	6	{
water	13:12	0:0	6	s
op	13:13	0:0	6	->
water	13:15	0:0	6	level_gain
op	13:25	0:0	6	[
water	13:26	0:0	6	(
op	13:27	0:0	6	!
water	13:28	0:0	6	s
op	13:29	0:0	6	->
water	13:31	0:0	6	channel_mode
water	13:43	0:0	6	)
op	13:44	0:0	6	-
water	13:45	0:0	6	i
op	13:46	0:0	6	]
op	13:48	0:0	6	=
call	13:50	15:67	6	powf
arg	13:55	13:59	7	2.0f
water	13:55	0:0	8	2
op	13:56	0:0	8	.
water	13:57	0:0	8	0
water	13:58	0:0	8	f
arg	14:16	15:67	7	(float)(s->target_level-s->dialog_normalization[(!s->channel_mode)-i])/6.0f
call	14:16	15:61	8	(float)
arg	14:24	15:61	9	s->target_level-s->dialog_normalization[(!s->channel_mode)-i]
water	14:24	0:0	10	s
op	14:25	0:0	10	->
water	14:27	0:0	10	target_level
op	14:40	0:0	10	-
water	15:16	0:0	10	s
op	15:17	0:0	10	->
water	15:19	0:0	10	dialog_normalization
op	15:39	0:0	10	[
water	15:40	0:0	10	(
op	15:41	0:0	10	!
water	15:42	0:0	10	s
op	15:43	0:0	10	->
water	15:45	0:0	10	channel_mode
water	15:57	0:0	10	)
op	15:58	0:0	10	-
water	15:59	0:0	10	i
op	15:60	0:0	10	]
op	15:62	0:0	8	/
water	15:63	0:0	8	6
op	15:64	0:0	8	.
water	15:65	0:0	8	0
water	15:66	0:0	8	f
water	15:68	0:0	6	;
water	16:8	0:0	6	}
if	17:8	20:8	4	(s -> compression_exists [ ( ! s -> channel_mode ) - i ] =get_bits1 (gbc ))
cond	17:12	17:71	5	s -> compression_exists [ ( ! s -> channel_mode ) - i ] =get_bits1 (gbc )
water	17:12	0:0	6	s
op	17:13	0:0	6	->
water	17:15	0:0	6	compression_exists
op	17:33	0:0	6	[
water	17:34	0:0	6	(
op	17:35	0:0	6	!
water	17:36	0:0	6	s
op	17:37	0:0	6	->
water	17:39	0:0	6	channel_mode
water	17:51	0:0	6	)
op	17:52	0:0	6	-
water	17:53	0:0	6	i
op	17:54	0:0	6	]
op	17:56	0:0	6	=
call	17:58	17:71	6	get_bits1
arg	17:68	17:71	7	gbc
water	17:68	0:0	8	gbc
stmts	17:74	20:8	5	
water	17:74	0:0	6	{
water	18:12	0:0	6	s
op	18:13	0:0	6	->
water	18:15	0:0	6	heavy_dynamic_range
op	18:34	0:0	6	[
water	18:35	0:0	6	(
op	18:36	0:0	6	!
water	18:37	0:0	6	s
op	18:38	0:0	6	->
water	18:40	0:0	6	channel_mode
water	18:52	0:0	6	)
op	18:53	0:0	6	-
water	18:54	0:0	6	i
op	18:55	0:0	6	]
op	18:57	0:0	6	=
call	19:16	19:48	6	AC3_HEAVY_RANGE
arg	19:32	19:48	7	get_bits(gbc,8)
call	19:32	19:47	8	get_bits
arg	19:41	19:44	9	gbc
water	19:41	0:0	10	gbc
arg	19:46	19:47	9	8
water	19:46	0:0	10	8
water	19:49	0:0	6	;
water	20:8	0:0	6	}
if	21:8	22:29	4	(get_bits1 (gbc ))
cond	21:12	21:25	5	get_bits1 (gbc )
call	21:12	21:25	6	get_bits1
arg	21:22	21:25	7	gbc
water	21:22	0:0	8	gbc
stmts	22:12	22:29	5	
call	22:12	22:28	6	skip_bits
arg	22:22	22:25	7	gbc
water	22:22	0:0	8	gbc
arg	22:27	22:28	7	8
water	22:27	0:0	8	8
water	22:29	0:0	6	;
if	23:8	24:29	4	(get_bits1 (gbc ))
cond	23:12	23:25	5	get_bits1 (gbc )
call	23:12	23:25	6	get_bits1
arg	23:22	23:25	7	gbc
water	23:22	0:0	8	gbc
stmts	24:12	24:29	5	
call	24:12	24:28	6	skip_bits
arg	24:22	24:25	7	gbc
water	24:22	0:0	8	gbc
arg	24:27	24:28	7	7
water	24:27	0:0	8	7
water	24:29	0:0	6	;
water	25:4	0:0	4	}
water	25:17	0:0	2	;
call	26:4	26:20	2	skip_bits
arg	26:14	26:17	3	gbc
water	26:14	0:0	4	gbc
arg	26:19	26:20	3	2
water	26:19	0:0	4	2
water	26:21	0:0	2	;
if	28:4	33:4	2	(s -> bitstream_id != 6)
cond	28:8	28:27	3	s -> bitstream_id != 6
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	bitstream_id
op	28:24	0:0	4	!=
water	28:27	0:0	4	6
stmts	28:30	33:4	3	
water	28:30	0:0	4	{
if	29:8	30:30	4	(get_bits1 (gbc ))
cond	29:12	29:25	5	get_bits1 (gbc )
call	29:12	29:25	6	get_bits1
arg	29:22	29:25	7	gbc
water	29:22	0:0	8	gbc
stmts	30:12	30:30	5	
call	30:12	30:29	6	skip_bits
arg	30:22	30:25	7	gbc
water	30:22	0:0	8	gbc
arg	30:27	30:29	7	14
water	30:27	0:0	8	14
water	30:30	0:0	6	;
if	31:8	32:30	4	(get_bits1 (gbc ))
cond	31:12	31:25	5	get_bits1 (gbc )
call	31:12	31:25	6	get_bits1
arg	31:22	31:25	7	gbc
water	31:22	0:0	8	gbc
stmts	32:12	32:30	5	
call	32:12	32:29	6	skip_bits
arg	32:22	32:25	7	gbc
water	32:22	0:0	8	gbc
arg	32:27	32:29	7	14
water	32:27	0:0	8	14
water	32:30	0:0	6	;
water	33:4	0:0	4	}
else	33:6	46:4	2
stmts	33:11	46:4	3	
water	33:11	0:0	4	{
if	34:8	40:8	4	(get_bits1 (gbc ))
cond	34:12	34:25	5	get_bits1 (gbc )
call	34:12	34:25	6	get_bits1
arg	34:22	34:25	7	gbc
water	34:22	0:0	8	gbc
stmts	34:28	40:8	5	
water	34:28	0:0	6	{
water	35:12	0:0	6	s
op	35:13	0:0	6	->
water	35:15	0:0	6	preferred_downmix
op	35:39	0:0	6	=
call	35:41	35:56	6	get_bits
arg	35:50	35:53	7	gbc
water	35:50	0:0	8	gbc
arg	35:55	35:56	7	2
water	35:55	0:0	8	2
water	35:57	0:0	6	;
water	36:12	0:0	6	s
op	36:13	0:0	6	->
water	36:15	0:0	6	center_mix_level_ltrt
op	36:39	0:0	6	=
call	36:41	36:56	6	get_bits
arg	36:50	36:53	7	gbc
water	36:50	0:0	8	gbc
arg	36:55	36:56	7	3
water	36:55	0:0	8	3
water	36:57	0:0	6	;
water	37:12	0:0	6	s
op	37:13	0:0	6	->
water	37:15	0:0	6	surround_mix_level_ltrt
op	37:39	0:0	6	=
call	37:41	37:71	6	av_clip
arg	37:49	37:65	7	get_bits(gbc,3)
call	37:49	37:64	8	get_bits
arg	37:58	37:61	9	gbc
water	37:58	0:0	10	gbc
arg	37:63	37:64	9	3
water	37:63	0:0	10	3
arg	37:67	37:68	7	3
water	37:67	0:0	8	3
arg	37:70	37:71	7	7
water	37:70	0:0	8	7
water	37:72	0:0	6	;
water	38:12	0:0	6	s
op	38:13	0:0	6	->
water	38:15	0:0	6	center_mix_level
op	38:39	0:0	6	=
call	38:41	38:56	6	get_bits
arg	38:50	38:53	7	gbc
water	38:50	0:0	8	gbc
arg	38:55	38:56	7	3
water	38:55	0:0	8	3
water	38:57	0:0	6	;
water	39:12	0:0	6	s
op	39:13	0:0	6	->
water	39:15	0:0	6	surround_mix_level
op	39:39	0:0	6	=
call	39:41	39:71	6	av_clip
arg	39:49	39:65	7	get_bits(gbc,3)
call	39:49	39:64	8	get_bits
arg	39:58	39:61	9	gbc
water	39:58	0:0	10	gbc
arg	39:63	39:64	9	3
water	39:63	0:0	10	3
arg	39:67	39:68	7	3
water	39:67	0:0	8	3
arg	39:70	39:71	7	7
water	39:70	0:0	8	7
water	39:72	0:0	6	;
water	40:8	0:0	6	}
if	41:8	45:8	4	(get_bits1 (gbc ))
cond	41:12	41:25	5	get_bits1 (gbc )
call	41:12	41:25	6	get_bits1
arg	41:22	41:25	7	gbc
water	41:22	0:0	8	gbc
stmts	41:28	45:8	5	
water	41:28	0:0	6	{
water	42:12	0:0	6	s
op	42:13	0:0	6	->
water	42:15	0:0	6	dolby_surround_ex_mode
op	42:38	0:0	6	=
call	42:40	42:55	6	get_bits
arg	42:49	42:52	7	gbc
water	42:49	0:0	8	gbc
arg	42:54	42:55	7	2
water	42:54	0:0	8	2
water	42:56	0:0	6	;
water	43:12	0:0	6	s
op	43:13	0:0	6	->
water	43:15	0:0	6	dolby_headphone_mode
op	43:38	0:0	6	=
call	43:40	43:55	6	get_bits
arg	43:49	43:52	7	gbc
water	43:49	0:0	8	gbc
arg	43:54	43:55	7	2
water	43:54	0:0	8	2
water	43:56	0:0	6	;
call	44:12	44:29	6	skip_bits
arg	44:22	44:25	7	gbc
water	44:22	0:0	8	gbc
arg	44:27	44:29	7	10
water	44:27	0:0	8	10
water	44:30	0:0	6	;
water	45:8	0:0	6	}
water	46:4	0:0	4	}
if	48:4	53:4	2	(get_bits1 (gbc ))
cond	48:8	48:21	3	get_bits1 (gbc )
call	48:8	48:21	4	get_bits1
arg	48:18	48:21	5	gbc
water	48:18	0:0	6	gbc
stmts	48:24	53:4	3	
water	48:24	0:0	4	{
water	49:8	0:0	4	i
op	49:10	0:0	4	=
call	49:12	49:27	4	get_bits
arg	49:21	49:24	5	gbc
water	49:21	0:0	6	gbc
arg	49:26	49:27	5	6
water	49:26	0:0	6	6
water	49:28	0:0	4	;
do	50:8	52:8	4	(i --)
cond	52:17	52:18	5	i --
water	52:17	0:0	6	i
op	52:18	0:0	6	--
stmts	50:11	52:8	5	
water	50:11	0:0	6	{
call	51:12	51:28	6	skip_bits
arg	51:22	51:25	7	gbc
water	51:22	0:0	8	gbc
arg	51:27	51:28	7	8
water	51:27	0:0	8	8
water	51:29	0:0	6	;
water	52:8	0:0	6	}
water	52:21	0:0	4	;
water	53:4	0:0	4	}
return	54:4	54:12	2	0
water	54:11	0:0	3	0
