func	1:0	23:0	0	static int	put_xiph_codecpriv
params	1:29	0:0	1	
param	1:30	1:48	2	AVFormatContext *	s
param	1:50	1:65	2	AVIOContext *	pb
param	1:67	1:88	2	AVCodecContext *	codec
stmnts	0:0	22:12	1	
decl	3:4	3:34	2	const uint8_t	*header_start[3]
decl	4:4	4:21	2	int	header_len[3]
decl	5:4	5:25	2	int	first_header_size
decl	6:4	6:9	2	int	j
if	7:4	8:30	2	(codec -> codec_id == AV_CODEC_ID_VORBIS)
cond	7:8	7:27	3	codec -> codec_id == AV_CODEC_ID_VORBIS
water	7:8	0:0	4	codec
op	7:13	0:0	4	->
water	7:15	0:0	4	codec_id
op	7:24	0:0	4	==
water	7:27	0:0	4	AV_CODEC_ID_VORBIS
stmts	8:8	8:30	3	
water	8:8	0:0	4	first_header_size
op	8:26	0:0	4	=
water	8:28	0:0	4	30
water	8:30	0:0	4	;
else	9:4	10:30	2
stmts	10:8	10:30	3	
water	10:8	0:0	4	first_header_size
op	10:26	0:0	4	=
water	10:28	0:0	4	42
water	10:30	0:0	4	;
if	11:4	15:4	2	(avpriv_split_xiph_headers (codec -> extradata ,codec -> extradata_size ,first_header_size ,header_start ,header_len ) < 0)
cond	11:8	12:77	3	avpriv_split_xiph_headers (codec -> extradata ,codec -> extradata_size ,first_header_size ,header_start ,header_len ) < 0
call	11:8	12:73	4	avpriv_split_xiph_headers
arg	11:34	11:50	5	codec->extradata
water	11:34	0:0	6	codec
op	11:39	0:0	6	->
water	11:41	0:0	6	extradata
arg	11:52	11:73	5	codec->extradata_size
water	11:52	0:0	6	codec
op	11:57	0:0	6	->
water	11:59	0:0	6	extradata_size
arg	12:30	12:47	5	first_header_size
water	12:30	0:0	6	first_header_size
arg	12:49	12:61	5	header_start
water	12:49	0:0	6	header_start
arg	12:63	12:73	5	header_len
water	12:63	0:0	6	header_len
op	12:75	0:0	4	<
water	12:77	0:0	4	0
stmts	12:80	15:4	3	
water	12:80	0:0	4	{
call	13:8	13:54	4	av_log
arg	13:15	13:16	5	s
water	13:15	0:0	6	s
arg	13:18	13:30	5	AV_LOG_ERROR
water	13:18	0:0	6	AV_LOG_ERROR
arg	13:32	13:54	5	"Extradata corrupt.\n"
water	13:32	0:0	6	"Extradata corrupt.\n"
water	13:55	0:0	4	;
return	14:8	14:17	4	-1
op	14:15	0:0	5	-
water	14:16	0:0	5	1
water	15:4	0:0	4	}
call	16:4	16:17	2	avio_w8
arg	16:12	16:14	3	pb
water	16:12	0:0	4	pb
arg	16:16	16:17	3	2
water	16:16	0:0	4	2
water	16:18	0:0	2	;
for	17:4	19:4	2	(j = 0 ;j < 2;j ++)
forinit	17:9	17:14	3	j = 0 ;
water	17:9	0:0	4	j
op	17:11	0:0	4	=
water	17:13	0:0	4	0
water	17:14	0:0	4	;
cond	17:16	17:20	3	j < 2
water	17:16	0:0	4	j
op	17:18	0:0	4	<
water	17:20	0:0	4	2
forexpr	17:23	17:24	3	j ++
water	17:23	0:0	4	j
op	17:24	0:0	4	++
stmts	17:28	19:4	3	
water	17:28	0:0	4	{
call	18:8	18:39	4	put_xiph_size
arg	18:22	18:24	5	pb
water	18:22	0:0	6	pb
arg	18:26	18:39	5	header_len[j]
water	18:26	0:0	6	header_len
op	18:36	0:0	6	[
water	18:37	0:0	6	j
op	18:38	0:0	6	]
water	18:40	0:0	4	;
water	19:4	0:0	4	}
for	20:4	21:54	2	(j = 0 ;j < 3;j ++)
forinit	20:9	20:14	3	j = 0 ;
water	20:9	0:0	4	j
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:20	3	j < 3
water	20:16	0:0	4	j
op	20:18	0:0	4	<
water	20:20	0:0	4	3
forexpr	20:23	20:24	3	j ++
water	20:23	0:0	4	j
op	20:24	0:0	4	++
stmts	21:8	21:54	3	
call	21:8	21:53	4	avio_write
arg	21:19	21:21	5	pb
water	21:19	0:0	6	pb
arg	21:23	21:38	5	header_start[j]
water	21:23	0:0	6	header_start
op	21:35	0:0	6	[
water	21:36	0:0	6	j
op	21:37	0:0	6	]
arg	21:40	21:53	5	header_len[j]
water	21:40	0:0	6	header_len
op	21:50	0:0	6	[
water	21:51	0:0	6	j
op	21:52	0:0	6	]
water	21:54	0:0	4	;
return	22:4	22:12	2	0
water	22:11	0:0	3	0
