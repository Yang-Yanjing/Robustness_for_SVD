func	1:0	46:0	0	static int	query_formats
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
stmnts	0:0	45:12	1	
decl	3:4	3:32	2	LADSPAContext	*s
op	3:21	0:0	2	=
water	3:23	0:0	2	ctx
op	3:26	0:0	2	->
water	3:28	0:0	2	priv
decl	4:4	4:28	2	AVFilterFormats	*formats
decl	5:4	5:35	2	AVFilterChannelLayouts	*layouts
water	6:4	0:0	2	static
water	6:11	0:0	2	const
water	6:17	0:0	2	enum
water	6:22	0:0	2	AVSampleFormat
water	6:37	0:0	2	sample_fmts
op	6:48	0:0	2	[
op	6:49	0:0	2	]
op	6:51	0:0	2	=
water	6:53	0:0	2	{
water	7:8	0:0	2	AV_SAMPLE_FMT_FLTP
water	7:26	0:0	2	,
water	7:28	0:0	2	AV_SAMPLE_FMT_NONE
water	7:47	0:0	2	}
water	7:48	0:0	2	;
water	8:4	0:0	2	formats
op	8:12	0:0	2	=
call	8:14	8:45	2	ff_make_format_list
arg	8:34	8:45	3	sample_fmts
water	8:34	0:0	4	sample_fmts
water	8:46	0:0	2	;
if	9:4	10:30	2	(! formats)
cond	9:8	9:9	3	! formats
op	9:8	0:0	4	!
water	9:9	0:0	4	formats
stmts	10:8	10:30	3	
return	10:8	10:30	4	AVERROR(ENOMEM)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	ENOMEM
water	10:23	0:0	7	ENOMEM
call	11:4	11:38	2	ff_set_common_formats
arg	11:26	11:29	3	ctx
water	11:26	0:0	4	ctx
arg	11:31	11:38	3	formats
water	11:31	0:0	4	formats
water	11:39	0:0	2	;
if	12:4	17:4	2	(s -> nb_inputs)
cond	12:8	12:11	3	s -> nb_inputs
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	nb_inputs
stmts	12:22	17:4	3	
water	12:22	0:0	4	{
water	13:8	0:0	4	formats
op	13:16	0:0	4	=
call	13:18	13:37	4	ff_all_samplerates
water	13:38	0:0	4	;
if	14:8	15:34	4	(! formats)
cond	14:12	14:13	5	! formats
op	14:12	0:0	6	!
water	14:13	0:0	6	formats
stmts	15:12	15:34	5	
return	15:12	15:34	6	AVERROR(ENOMEM)
call	15:19	15:33	7	AVERROR
arg	15:27	15:33	8	ENOMEM
water	15:27	0:0	9	ENOMEM
call	16:8	16:46	4	ff_set_common_samplerates
arg	16:34	16:37	5	ctx
water	16:34	0:0	6	ctx
arg	16:39	16:46	5	formats
water	16:39	0:0	6	formats
water	16:47	0:0	4	;
water	17:4	0:0	4	}
else	17:6	20:4	2
stmts	17:11	20:4	3	
water	17:11	0:0	4	{
decl	18:8	18:51	4	int	sample_rates[]
op	18:27	0:0	4	=
water	18:29	0:0	4	{
water	18:31	0:0	4	s
op	18:32	0:0	4	->
water	18:34	0:0	4	sample_rate
water	18:45	0:0	4	,
op	18:47	0:0	4	-
water	18:48	0:0	4	1
water	18:50	0:0	4	}
call	19:8	19:72	4	ff_set_common_samplerates
arg	19:34	19:37	5	ctx
water	19:34	0:0	6	ctx
arg	19:39	19:72	5	ff_make_format_list(sample_rates)
call	19:39	19:71	6	ff_make_format_list
arg	19:59	19:71	7	sample_rates
water	19:59	0:0	8	sample_rates
water	19:73	0:0	4	;
water	20:4	0:0	4	}
if	21:4	27:4	2	(s -> nb_inputs == 1 && s -> nb_outputs == 1)
cond	21:8	21:46	3	s -> nb_inputs == 1 && s -> nb_outputs == 1
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	nb_inputs
op	21:21	0:0	4	==
water	21:24	0:0	4	1
op	21:26	0:0	4	&&
water	21:29	0:0	4	s
op	21:30	0:0	4	->
water	21:32	0:0	4	nb_outputs
op	21:43	0:0	4	==
water	21:46	0:0	4	1
stmts	21:49	27:4	3	
water	21:49	0:0	4	{
water	23:8	0:0	4	layouts
op	23:16	0:0	4	=
call	23:18	23:41	4	ff_all_channel_layouts
water	23:42	0:0	4	;
if	24:8	25:34	4	(! layouts)
cond	24:12	24:13	5	! layouts
op	24:12	0:0	6	!
water	24:13	0:0	6	layouts
stmts	25:12	25:34	5	
return	25:12	25:34	6	AVERROR(ENOMEM)
call	25:19	25:33	7	AVERROR
arg	25:27	25:33	8	ENOMEM
water	25:27	0:0	9	ENOMEM
call	26:8	26:50	4	ff_set_common_channel_layouts
arg	26:38	26:41	5	ctx
water	26:38	0:0	6	ctx
arg	26:43	26:50	5	layouts
water	26:43	0:0	6	layouts
water	26:51	0:0	4	;
water	27:4	0:0	4	}
else	27:6	44:4	2
stmts	27:11	44:4	3	
water	27:11	0:0	4	{
decl	28:8	28:47	4	AVFilterLink	*outlink
op	28:30	0:0	4	=
water	28:32	0:0	4	ctx
op	28:35	0:0	4	->
water	28:37	0:0	4	outputs
op	28:44	0:0	4	[
water	28:45	0:0	4	0
op	28:46	0:0	4	]
if	29:8	37:8	4	(s -> nb_inputs >= 1)
cond	29:12	29:28	5	s -> nb_inputs >= 1
water	29:12	0:0	6	s
op	29:13	0:0	6	->
water	29:15	0:0	6	nb_inputs
op	29:25	0:0	6	>=
water	29:28	0:0	6	1
stmts	29:31	37:8	5	
water	29:31	0:0	6	{
decl	30:12	30:49	6	AVFilterLink	*inlink
op	30:33	0:0	6	=
water	30:35	0:0	6	ctx
op	30:38	0:0	6	->
water	30:40	0:0	6	inputs
op	30:46	0:0	6	[
water	30:47	0:0	6	0
op	30:48	0:0	6	]
decl	31:12	31:60	6	int64_t	inlayout
op	31:29	0:0	6	=
call	31:31	31:59	7	FF_COUNT2LAYOUT
arg	31:47	31:59	8	s->nb_inputs
water	31:47	0:0	9	s
op	31:48	0:0	9	->
water	31:50	0:0	9	nb_inputs
water	32:12	0:0	6	layouts
op	32:20	0:0	6	=
water	32:22	0:0	6	NULL
water	32:26	0:0	6	;
call	33:12	33:52	6	ff_add_channel_layout
arg	33:34	33:42	7	&layouts
op	33:34	0:0	8	&
water	33:35	0:0	8	layouts
arg	33:44	33:52	7	inlayout
water	33:44	0:0	8	inlayout
water	33:53	0:0	6	;
call	34:12	34:72	6	ff_channel_layouts_ref
arg	34:35	34:42	7	layouts
water	34:35	0:0	8	layouts
arg	34:44	34:72	7	&inlink->out_channel_layouts
op	34:44	0:0	8	&
water	34:45	0:0	8	inlink
op	34:51	0:0	8	->
water	34:53	0:0	8	out_channel_layouts
water	34:73	0:0	6	;
if	35:12	36:77	6	(! s -> nb_outputs)
cond	35:16	35:20	7	! s -> nb_outputs
op	35:16	0:0	8	!
water	35:17	0:0	8	s
op	35:18	0:0	8	->
water	35:20	0:0	8	nb_outputs
stmts	36:16	36:77	7	
call	36:16	36:76	8	ff_channel_layouts_ref
arg	36:39	36:46	9	layouts
water	36:39	0:0	10	layouts
arg	36:48	36:76	9	&outlink->in_channel_layouts
op	36:48	0:0	10	&
water	36:49	0:0	10	outlink
op	36:56	0:0	10	->
water	36:58	0:0	10	in_channel_layouts
water	36:77	0:0	8	;
water	37:8	0:0	6	}
if	38:8	43:8	4	(s -> nb_outputs >= 1)
cond	38:12	38:29	5	s -> nb_outputs >= 1
water	38:12	0:0	6	s
op	38:13	0:0	6	->
water	38:15	0:0	6	nb_outputs
op	38:26	0:0	6	>=
water	38:29	0:0	6	1
stmts	38:32	43:8	5	
water	38:32	0:0	6	{
decl	39:12	39:62	6	int64_t	outlayout
op	39:30	0:0	6	=
call	39:32	39:61	7	FF_COUNT2LAYOUT
arg	39:48	39:61	8	s->nb_outputs
water	39:48	0:0	9	s
op	39:49	0:0	9	->
water	39:51	0:0	9	nb_outputs
water	40:12	0:0	6	layouts
op	40:20	0:0	6	=
water	40:22	0:0	6	NULL
water	40:26	0:0	6	;
call	41:12	41:53	6	ff_add_channel_layout
arg	41:34	41:42	7	&layouts
op	41:34	0:0	8	&
water	41:35	0:0	8	layouts
arg	41:44	41:53	7	outlayout
water	41:44	0:0	8	outlayout
water	41:54	0:0	6	;
call	42:12	42:72	6	ff_channel_layouts_ref
arg	42:35	42:42	7	layouts
water	42:35	0:0	8	layouts
arg	42:44	42:72	7	&outlink->in_channel_layouts
op	42:44	0:0	8	&
water	42:45	0:0	8	outlink
op	42:52	0:0	8	->
water	42:54	0:0	8	in_channel_layouts
water	42:73	0:0	6	;
water	43:8	0:0	6	}
water	44:4	0:0	4	}
return	45:4	45:12	2	0
water	45:11	0:0	3	0
