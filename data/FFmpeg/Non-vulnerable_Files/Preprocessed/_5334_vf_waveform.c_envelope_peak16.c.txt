func	1:0	67:0	0	static void	envelope_peak16
params	1:27	0:0	1	
param	1:28	1:46	2	WaveformContext *	s
param	1:48	1:60	2	AVFrame *	out
param	1:62	1:71	2	int	plane
param	1:73	1:86	2	int	component
stmnts	0:0	66:4	1	
decl	3:4	3:57	2	const int	dst_linesize
op	3:27	0:0	2	=
water	3:29	0:0	2	out
op	3:32	0:0	2	->
water	3:34	0:0	2	linesize
op	3:42	0:0	2	[
water	3:43	0:0	2	component
op	3:52	0:0	2	]
op	3:54	0:0	2	/
water	3:56	0:0	2	2
decl	4:4	4:58	2	const int	bg
op	4:17	0:0	2	=
water	4:19	0:0	2	s
op	4:20	0:0	2	->
water	4:22	0:0	2	bg_color
op	4:30	0:0	2	[
water	4:31	0:0	2	component
op	4:40	0:0	2	]
op	4:42	0:0	2	*
water	4:44	0:0	2	(
water	4:45	0:0	2	s
op	4:46	0:0	2	->
water	4:48	0:0	2	max
op	4:52	0:0	2	/
water	4:54	0:0	2	256
water	4:57	0:0	2	)
decl	5:4	5:32	2	const int	limit
op	5:20	0:0	2	=
water	5:22	0:0	2	s
op	5:23	0:0	2	->
water	5:25	0:0	2	max
op	5:29	0:0	2	-
water	5:31	0:0	2	1
decl	6:4	6:60	2	const int	is_chroma
op	6:24	0:0	2	=
water	6:26	0:0	2	(
water	6:27	0:0	2	component
op	6:37	0:0	2	==
water	6:40	0:0	2	1
op	6:42	0:0	2	||
water	6:45	0:0	2	component
op	6:55	0:0	2	==
water	6:58	0:0	2	2
water	6:59	0:0	2	)
decl	7:4	7:64	2	const int	shift_w
op	7:22	0:0	2	=
water	7:24	0:0	2	(
water	7:25	0:0	2	is_chroma
water	7:35	0:0	2	?
water	7:37	0:0	2	s
op	7:38	0:0	2	->
water	7:40	0:0	2	desc
op	7:44	0:0	2	->
water	7:46	0:0	2	log2_chroma_w
water	7:60	0:0	2	:
water	7:62	0:0	2	0
water	7:63	0:0	2	)
decl	8:4	8:64	2	const int	shift_h
op	8:22	0:0	2	=
water	8:24	0:0	2	(
water	8:25	0:0	2	is_chroma
water	8:35	0:0	2	?
water	8:37	0:0	2	s
op	8:38	0:0	2	->
water	8:40	0:0	2	desc
op	8:44	0:0	2	->
water	8:46	0:0	2	log2_chroma_h
water	8:60	0:0	2	:
water	8:62	0:0	2	0
water	8:63	0:0	2	)
decl	9:4	9:58	2	const int	dst_h
op	9:20	0:0	2	=
call	9:22	9:57	3	FF_CEIL_RSHIFT
arg	9:37	9:48	4	out->height
water	9:37	0:0	5	out
op	9:40	0:0	5	->
water	9:42	0:0	5	height
arg	9:50	9:57	4	shift_h
water	9:50	0:0	5	shift_h
decl	10:4	10:57	2	const int	dst_w
op	10:20	0:0	2	=
call	10:22	10:56	3	FF_CEIL_RSHIFT
arg	10:37	10:47	4	out->width
water	10:37	0:0	5	out
op	10:40	0:0	5	->
water	10:42	0:0	5	width
arg	10:49	10:56	4	shift_w
water	10:49	0:0	5	shift_w
decl	11:4	11:38	2	const int	start
op	11:20	0:0	2	=
water	11:22	0:0	2	s
op	11:23	0:0	2	->
water	11:25	0:0	2	estart
op	11:31	0:0	2	[
water	11:32	0:0	2	plane
op	11:37	0:0	2	]
decl	12:4	12:34	2	const int	end
op	12:18	0:0	2	=
water	12:20	0:0	2	s
op	12:21	0:0	2	->
water	12:23	0:0	2	eend
op	12:27	0:0	2	[
water	12:28	0:0	2	plane
op	12:33	0:0	2	]
decl	13:4	13:41	2	int	*emax
op	13:14	0:0	2	=
water	13:16	0:0	2	s
op	13:17	0:0	2	->
water	13:19	0:0	2	emax
op	13:23	0:0	2	[
water	13:24	0:0	2	plane
op	13:29	0:0	2	]
op	13:30	0:0	2	[
water	13:31	0:0	2	component
op	13:40	0:0	2	]
decl	14:4	14:41	2	int	*emin
op	14:14	0:0	2	=
water	14:16	0:0	2	s
op	14:17	0:0	2	->
water	14:19	0:0	2	emin
op	14:23	0:0	2	[
water	14:24	0:0	2	plane
op	14:29	0:0	2	]
op	14:30	0:0	2	[
water	14:31	0:0	2	component
op	14:40	0:0	2	]
decl	15:4	15:17	2	uint16_t	*dst
decl	16:4	16:12	2	int	x
water	16:9	0:0	2	,
decl	16:4	16:12	2	int	y
if	17:4	42:4	2	(s -> mode)
cond	17:8	17:11	3	s -> mode
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	mode
stmts	17:17	42:4	3	
water	17:17	0:0	4	{
for	18:8	33:8	4	(x = 0 ;x < dst_w;x ++)
forinit	18:13	18:18	5	x = 0 ;
water	18:13	0:0	6	x
op	18:15	0:0	6	=
water	18:17	0:0	6	0
water	18:18	0:0	6	;
cond	18:20	18:24	5	x < dst_w
water	18:20	0:0	6	x
op	18:22	0:0	6	<
water	18:24	0:0	6	dst_w
forexpr	18:31	18:32	5	x ++
water	18:31	0:0	6	x
op	18:32	0:0	6	++
stmts	18:36	33:8	5	
water	18:36	0:0	6	{
for	19:12	25:12	6	(y = start ;y < end && y < emin [ x ];y ++)
forinit	19:17	19:26	7	y = start ;
water	19:17	0:0	8	y
op	19:19	0:0	8	=
water	19:21	0:0	8	start
water	19:26	0:0	8	;
cond	19:28	19:49	7	y < end && y < emin [ x ]
water	19:28	0:0	8	y
op	19:30	0:0	8	<
water	19:32	0:0	8	end
op	19:36	0:0	8	&&
water	19:39	0:0	8	y
op	19:41	0:0	8	<
water	19:43	0:0	8	emin
op	19:47	0:0	8	[
water	19:48	0:0	8	x
op	19:49	0:0	8	]
forexpr	19:52	19:53	7	y ++
water	19:52	0:0	8	y
op	19:53	0:0	8	++
stmts	19:57	25:12	7	
water	19:57	0:0	8	{
water	20:16	0:0	8	dst
op	20:20	0:0	8	=
water	20:22	0:0	8	(
water	20:23	0:0	8	uint16_t
op	20:32	0:0	8	*
water	20:33	0:0	8	)
water	20:34	0:0	8	out
op	20:37	0:0	8	->
water	20:39	0:0	8	data
op	20:43	0:0	8	[
water	20:44	0:0	8	component
op	20:53	0:0	8	]
op	20:55	0:0	8	+
water	20:57	0:0	8	y
op	20:59	0:0	8	*
water	20:61	0:0	8	dst_linesize
op	20:74	0:0	8	+
water	20:76	0:0	8	x
water	20:77	0:0	8	;
if	21:16	24:16	8	(dst [ 0 ] != bg)
cond	21:20	21:30	9	dst [ 0 ] != bg
water	21:20	0:0	10	dst
op	21:23	0:0	10	[
water	21:24	0:0	10	0
op	21:25	0:0	10	]
op	21:27	0:0	10	!=
water	21:30	0:0	10	bg
stmts	21:34	24:16	9	
water	21:34	0:0	10	{
water	22:20	0:0	10	emin
op	22:24	0:0	10	[
water	22:25	0:0	10	x
op	22:26	0:0	10	]
op	22:28	0:0	10	=
water	22:30	0:0	10	y
water	22:31	0:0	10	;
break	23:20	23:25	10	
water	24:16	0:0	10	}
water	25:12	0:0	8	}
for	26:12	32:12	6	(y = end - 1 ;y >= start && y >= emax [ x ];y --)
forinit	26:17	26:28	7	y = end - 1 ;
water	26:17	0:0	8	y
op	26:19	0:0	8	=
water	26:21	0:0	8	end
op	26:25	0:0	8	-
water	26:27	0:0	8	1
water	26:28	0:0	8	;
cond	26:30	26:55	7	y >= start && y >= emax [ x ]
water	26:30	0:0	8	y
op	26:32	0:0	8	>=
water	26:35	0:0	8	start
op	26:41	0:0	8	&&
water	26:44	0:0	8	y
op	26:46	0:0	8	>=
water	26:49	0:0	8	emax
op	26:53	0:0	8	[
water	26:54	0:0	8	x
op	26:55	0:0	8	]
forexpr	26:58	26:59	7	y --
water	26:58	0:0	8	y
op	26:59	0:0	8	--
stmts	26:63	32:12	7	
water	26:63	0:0	8	{
water	27:16	0:0	8	dst
op	27:20	0:0	8	=
water	27:22	0:0	8	(
water	27:23	0:0	8	uint16_t
op	27:32	0:0	8	*
water	27:33	0:0	8	)
water	27:34	0:0	8	out
op	27:37	0:0	8	->
water	27:39	0:0	8	data
op	27:43	0:0	8	[
water	27:44	0:0	8	component
op	27:53	0:0	8	]
op	27:55	0:0	8	+
water	27:57	0:0	8	y
op	27:59	0:0	8	*
water	27:61	0:0	8	dst_linesize
op	27:74	0:0	8	+
water	27:76	0:0	8	x
water	27:77	0:0	8	;
if	28:16	31:16	8	(dst [ 0 ] != bg)
cond	28:20	28:30	9	dst [ 0 ] != bg
water	28:20	0:0	10	dst
op	28:23	0:0	10	[
water	28:24	0:0	10	0
op	28:25	0:0	10	]
op	28:27	0:0	10	!=
water	28:30	0:0	10	bg
stmts	28:34	31:16	9	
water	28:34	0:0	10	{
water	29:20	0:0	10	emax
op	29:24	0:0	10	[
water	29:25	0:0	10	x
op	29:26	0:0	10	]
op	29:28	0:0	10	=
water	29:30	0:0	10	y
water	29:31	0:0	10	;
break	30:20	30:25	10	
water	31:16	0:0	10	}
water	32:12	0:0	8	}
water	33:8	0:0	6	}
if	34:8	35:56	4	(s -> envelope == 3)
cond	34:12	34:27	5	s -> envelope == 3
water	34:12	0:0	6	s
op	34:13	0:0	6	->
water	34:15	0:0	6	envelope
op	34:24	0:0	6	==
water	34:27	0:0	6	3
stmts	35:12	35:56	5	
call	35:12	35:55	6	envelope_instant16
arg	35:31	35:32	7	s
water	35:31	0:0	8	s
arg	35:34	35:37	7	out
water	35:34	0:0	8	out
arg	35:39	35:44	7	plane
water	35:39	0:0	8	plane
arg	35:46	35:55	7	component
water	35:46	0:0	8	component
water	35:56	0:0	6	;
for	36:8	41:8	4	(x = 0 ;x < dst_w;x ++)
forinit	36:13	36:18	5	x = 0 ;
water	36:13	0:0	6	x
op	36:15	0:0	6	=
water	36:17	0:0	6	0
water	36:18	0:0	6	;
cond	36:20	36:24	5	x < dst_w
water	36:20	0:0	6	x
op	36:22	0:0	6	<
water	36:24	0:0	6	dst_w
forexpr	36:31	36:32	5	x ++
water	36:31	0:0	6	x
op	36:32	0:0	6	++
stmts	36:36	41:8	5	
water	36:36	0:0	6	{
water	37:12	0:0	6	dst
op	37:16	0:0	6	=
water	37:18	0:0	6	(
water	37:19	0:0	6	uint16_t
op	37:28	0:0	6	*
water	37:29	0:0	6	)
water	37:30	0:0	6	out
op	37:33	0:0	6	->
water	37:35	0:0	6	data
op	37:39	0:0	6	[
water	37:40	0:0	6	component
op	37:49	0:0	6	]
op	37:51	0:0	6	+
water	37:53	0:0	6	emin
op	37:57	0:0	6	[
water	37:58	0:0	6	x
op	37:59	0:0	6	]
op	37:61	0:0	6	*
water	37:63	0:0	6	dst_linesize
op	37:76	0:0	6	+
water	37:78	0:0	6	x
water	37:79	0:0	6	;
water	38:12	0:0	6	dst
op	38:15	0:0	6	[
water	38:16	0:0	6	0
op	38:17	0:0	6	]
op	38:19	0:0	6	=
water	38:21	0:0	6	limit
water	38:26	0:0	6	;
water	39:12	0:0	6	dst
op	39:16	0:0	6	=
water	39:18	0:0	6	(
water	39:19	0:0	6	uint16_t
op	39:28	0:0	6	*
water	39:29	0:0	6	)
water	39:30	0:0	6	out
op	39:33	0:0	6	->
water	39:35	0:0	6	data
op	39:39	0:0	6	[
water	39:40	0:0	6	component
op	39:49	0:0	6	]
op	39:51	0:0	6	+
water	39:53	0:0	6	emax
op	39:57	0:0	6	[
water	39:58	0:0	6	x
op	39:59	0:0	6	]
op	39:61	0:0	6	*
water	39:63	0:0	6	dst_linesize
op	39:76	0:0	6	+
water	39:78	0:0	6	x
water	39:79	0:0	6	;
water	40:12	0:0	6	dst
op	40:15	0:0	6	[
water	40:16	0:0	6	0
op	40:17	0:0	6	]
op	40:19	0:0	6	=
water	40:21	0:0	6	limit
water	40:26	0:0	6	;
water	41:8	0:0	6	}
water	42:4	0:0	4	}
else	42:6	66:4	2
stmts	42:11	66:4	3	
water	42:11	0:0	4	{
for	43:8	57:8	4	(y = 0 ;y < dst_h;y ++)
forinit	43:13	43:18	5	y = 0 ;
water	43:13	0:0	6	y
op	43:15	0:0	6	=
water	43:17	0:0	6	0
water	43:18	0:0	6	;
cond	43:20	43:24	5	y < dst_h
water	43:20	0:0	6	y
op	43:22	0:0	6	<
water	43:24	0:0	6	dst_h
forexpr	43:31	43:32	5	y ++
water	43:31	0:0	6	y
op	43:32	0:0	6	++
stmts	43:36	57:8	5	
water	43:36	0:0	6	{
water	44:12	0:0	6	dst
op	44:16	0:0	6	=
water	44:18	0:0	6	(
water	44:19	0:0	6	uint16_t
op	44:28	0:0	6	*
water	44:29	0:0	6	)
water	44:30	0:0	6	out
op	44:33	0:0	6	->
water	44:35	0:0	6	data
op	44:39	0:0	6	[
water	44:40	0:0	6	component
op	44:49	0:0	6	]
op	44:51	0:0	6	+
water	44:53	0:0	6	y
op	44:55	0:0	6	*
water	44:57	0:0	6	dst_linesize
water	44:69	0:0	6	;
for	45:12	50:12	6	(x = start ;x < end && x < emin [ y ];x ++)
forinit	45:17	45:26	7	x = start ;
water	45:17	0:0	8	x
op	45:19	0:0	8	=
water	45:21	0:0	8	start
water	45:26	0:0	8	;
cond	45:28	45:49	7	x < end && x < emin [ y ]
water	45:28	0:0	8	x
op	45:30	0:0	8	<
water	45:32	0:0	8	end
op	45:36	0:0	8	&&
water	45:39	0:0	8	x
op	45:41	0:0	8	<
water	45:43	0:0	8	emin
op	45:47	0:0	8	[
water	45:48	0:0	8	y
op	45:49	0:0	8	]
forexpr	45:52	45:53	7	x ++
water	45:52	0:0	8	x
op	45:53	0:0	8	++
stmts	45:57	50:12	7	
water	45:57	0:0	8	{
if	46:16	49:16	8	(dst [ x ] != bg)
cond	46:20	46:30	9	dst [ x ] != bg
water	46:20	0:0	10	dst
op	46:23	0:0	10	[
water	46:24	0:0	10	x
op	46:25	0:0	10	]
op	46:27	0:0	10	!=
water	46:30	0:0	10	bg
stmts	46:34	49:16	9	
water	46:34	0:0	10	{
water	47:20	0:0	10	emin
op	47:24	0:0	10	[
water	47:25	0:0	10	y
op	47:26	0:0	10	]
op	47:28	0:0	10	=
water	47:30	0:0	10	x
water	47:31	0:0	10	;
break	48:20	48:25	10	
water	49:16	0:0	10	}
water	50:12	0:0	8	}
for	51:12	56:12	6	(x = end - 1 ;x >= start && x >= emax [ y ];x --)
forinit	51:17	51:28	7	x = end - 1 ;
water	51:17	0:0	8	x
op	51:19	0:0	8	=
water	51:21	0:0	8	end
op	51:25	0:0	8	-
water	51:27	0:0	8	1
water	51:28	0:0	8	;
cond	51:30	51:55	7	x >= start && x >= emax [ y ]
water	51:30	0:0	8	x
op	51:32	0:0	8	>=
water	51:35	0:0	8	start
op	51:41	0:0	8	&&
water	51:44	0:0	8	x
op	51:46	0:0	8	>=
water	51:49	0:0	8	emax
op	51:53	0:0	8	[
water	51:54	0:0	8	y
op	51:55	0:0	8	]
forexpr	51:58	51:59	7	x --
water	51:58	0:0	8	x
op	51:59	0:0	8	--
stmts	51:63	56:12	7	
water	51:63	0:0	8	{
if	52:16	55:16	8	(dst [ x ] != bg)
cond	52:20	52:30	9	dst [ x ] != bg
water	52:20	0:0	10	dst
op	52:23	0:0	10	[
water	52:24	0:0	10	x
op	52:25	0:0	10	]
op	52:27	0:0	10	!=
water	52:30	0:0	10	bg
stmts	52:34	55:16	9	
water	52:34	0:0	10	{
water	53:20	0:0	10	emax
op	53:24	0:0	10	[
water	53:25	0:0	10	y
op	53:26	0:0	10	]
op	53:28	0:0	10	=
water	53:30	0:0	10	x
water	53:31	0:0	10	;
break	54:20	54:25	10	
water	55:16	0:0	10	}
water	56:12	0:0	8	}
water	57:8	0:0	6	}
if	58:8	59:56	4	(s -> envelope == 3)
cond	58:12	58:27	5	s -> envelope == 3
water	58:12	0:0	6	s
op	58:13	0:0	6	->
water	58:15	0:0	6	envelope
op	58:24	0:0	6	==
water	58:27	0:0	6	3
stmts	59:12	59:56	5	
call	59:12	59:55	6	envelope_instant16
arg	59:31	59:32	7	s
water	59:31	0:0	8	s
arg	59:34	59:37	7	out
water	59:34	0:0	8	out
arg	59:39	59:44	7	plane
water	59:39	0:0	8	plane
arg	59:46	59:55	7	component
water	59:46	0:0	8	component
water	59:56	0:0	6	;
for	60:8	65:8	4	(y = 0 ;y < dst_h;y ++)
forinit	60:13	60:18	5	y = 0 ;
water	60:13	0:0	6	y
op	60:15	0:0	6	=
water	60:17	0:0	6	0
water	60:18	0:0	6	;
cond	60:20	60:24	5	y < dst_h
water	60:20	0:0	6	y
op	60:22	0:0	6	<
water	60:24	0:0	6	dst_h
forexpr	60:31	60:32	5	y ++
water	60:31	0:0	6	y
op	60:32	0:0	6	++
stmts	60:36	65:8	5	
water	60:36	0:0	6	{
water	61:12	0:0	6	dst
op	61:16	0:0	6	=
water	61:18	0:0	6	(
water	61:19	0:0	6	uint16_t
op	61:28	0:0	6	*
water	61:29	0:0	6	)
water	61:30	0:0	6	out
op	61:33	0:0	6	->
water	61:35	0:0	6	data
op	61:39	0:0	6	[
water	61:40	0:0	6	component
op	61:49	0:0	6	]
op	61:51	0:0	6	+
water	61:53	0:0	6	y
op	61:55	0:0	6	*
water	61:57	0:0	6	dst_linesize
op	61:70	0:0	6	+
water	61:72	0:0	6	emin
op	61:76	0:0	6	[
water	61:77	0:0	6	y
op	61:78	0:0	6	]
water	61:79	0:0	6	;
water	62:12	0:0	6	dst
op	62:15	0:0	6	[
water	62:16	0:0	6	0
op	62:17	0:0	6	]
op	62:19	0:0	6	=
water	62:21	0:0	6	limit
water	62:26	0:0	6	;
water	63:12	0:0	6	dst
op	63:16	0:0	6	=
water	63:18	0:0	6	(
water	63:19	0:0	6	uint16_t
op	63:28	0:0	6	*
water	63:29	0:0	6	)
water	63:30	0:0	6	out
op	63:33	0:0	6	->
water	63:35	0:0	6	data
op	63:39	0:0	6	[
water	63:40	0:0	6	component
op	63:49	0:0	6	]
op	63:51	0:0	6	+
water	63:53	0:0	6	y
op	63:55	0:0	6	*
water	63:57	0:0	6	dst_linesize
op	63:70	0:0	6	+
water	63:72	0:0	6	emax
op	63:76	0:0	6	[
water	63:77	0:0	6	y
op	63:78	0:0	6	]
water	63:79	0:0	6	;
water	64:12	0:0	6	dst
op	64:15	0:0	6	[
water	64:16	0:0	6	0
op	64:17	0:0	6	]
op	64:19	0:0	6	=
water	64:21	0:0	6	limit
water	64:26	0:0	6	;
water	65:8	0:0	6	}
water	66:4	0:0	4	}
