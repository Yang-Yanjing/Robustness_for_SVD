func	1:0	39:0	0	static int	config_output
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	38:65	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:32	2	ChorusContext	*s
op	4:21	0:0	2	=
water	4:23	0:0	2	ctx
op	4:26	0:0	2	->
water	4:28	0:0	2	priv
decl	5:4	5:29	2	float	sum_in_volume
op	5:24	0:0	2	=
water	5:26	0:0	2	1
op	5:27	0:0	2	.
water	5:28	0:0	2	0
decl	6:4	6:9	2	int	n
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	channels
op	7:16	0:0	2	=
water	7:18	0:0	2	outlink
op	7:25	0:0	2	->
water	7:27	0:0	2	channels
water	7:35	0:0	2	;
for	8:4	18:4	2	(n = 0 ;n < s -> num_chorus;n ++)
forinit	8:9	8:14	3	n = 0 ;
water	8:9	0:0	4	n
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:23	3	n < s -> num_chorus
water	8:16	0:0	4	n
op	8:18	0:0	4	<
water	8:20	0:0	4	s
op	8:21	0:0	4	->
water	8:23	0:0	4	num_chorus
forexpr	8:35	8:36	3	n ++
water	8:35	0:0	4	n
op	8:36	0:0	4	++
stmts	8:40	18:4	3	
water	8:40	0:0	4	{
decl	9:8	9:91	4	int	samples
op	9:20	0:0	4	=
call	9:22	9:90	5	(int)
arg	9:29	9:90	6	(s->delays[n]+s->depths[n])*outlink->sample_rate/1000.0
water	9:29	0:0	7	(
water	9:30	0:0	7	s
op	9:31	0:0	7	->
water	9:33	0:0	7	delays
op	9:39	0:0	7	[
water	9:40	0:0	7	n
op	9:41	0:0	7	]
op	9:43	0:0	7	+
water	9:45	0:0	7	s
op	9:46	0:0	7	->
water	9:48	0:0	7	depths
op	9:54	0:0	7	[
water	9:55	0:0	7	n
op	9:56	0:0	7	]
water	9:57	0:0	7	)
op	9:59	0:0	7	*
water	9:61	0:0	7	outlink
op	9:68	0:0	7	->
water	9:70	0:0	7	sample_rate
op	9:82	0:0	7	/
water	9:84	0:0	7	1000
op	9:88	0:0	7	.
water	9:89	0:0	7	0
decl	10:8	10:80	4	int	depth_samples
op	10:26	0:0	4	=
call	10:28	10:79	5	(int)
arg	10:35	10:79	6	s->depths[n]*outlink->sample_rate/1000.0
water	10:35	0:0	7	s
op	10:36	0:0	7	->
water	10:38	0:0	7	depths
op	10:44	0:0	7	[
water	10:45	0:0	7	n
op	10:46	0:0	7	]
op	10:48	0:0	7	*
water	10:50	0:0	7	outlink
op	10:57	0:0	7	->
water	10:59	0:0	7	sample_rate
op	10:71	0:0	7	/
water	10:73	0:0	7	1000
op	10:77	0:0	7	.
water	10:78	0:0	7	0
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	length
op	11:17	0:0	4	[
water	11:18	0:0	4	n
op	11:19	0:0	4	]
op	11:21	0:0	4	=
water	11:23	0:0	4	outlink
op	11:30	0:0	4	->
water	11:32	0:0	4	sample_rate
op	11:44	0:0	4	/
water	11:46	0:0	4	s
op	11:47	0:0	4	->
water	11:49	0:0	4	speeds
op	11:55	0:0	4	[
water	11:56	0:0	4	n
op	11:57	0:0	4	]
water	11:58	0:0	4	;
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	lookup_table
op	12:23	0:0	4	[
water	12:24	0:0	4	n
op	12:25	0:0	4	]
op	12:27	0:0	4	=
call	12:29	12:69	4	av_malloc
arg	12:39	12:69	5	sizeof(int32_t)*s->length[n]
op	12:39	0:0	6	sizeof
water	12:45	0:0	6	(
water	12:46	0:0	6	int32_t
water	12:53	0:0	6	)
op	12:55	0:0	6	*
water	12:57	0:0	6	s
op	12:58	0:0	6	->
water	12:60	0:0	6	length
op	12:66	0:0	6	[
water	12:67	0:0	6	n
op	12:68	0:0	6	]
water	12:70	0:0	4	;
if	13:8	14:34	4	(! s -> lookup_table [ n ])
cond	13:12	13:30	5	! s -> lookup_table [ n ]
op	13:12	0:0	6	!
water	13:13	0:0	6	s
op	13:14	0:0	6	->
water	13:16	0:0	6	lookup_table
op	13:28	0:0	6	[
water	13:29	0:0	6	n
op	13:30	0:0	6	]
stmts	14:12	14:34	5	
return	14:12	14:34	6	AVERROR(ENOMEM)
call	14:19	14:33	7	AVERROR
arg	14:27	14:33	8	ENOMEM
water	14:27	0:0	9	ENOMEM
call	15:8	16:65	4	ff_generate_wave_table
arg	15:31	15:39	5	WAVE_SIN
water	15:31	0:0	6	WAVE_SIN
arg	15:41	15:58	5	AV_SAMPLE_FMT_S32
water	15:41	0:0	6	AV_SAMPLE_FMT_S32
arg	15:60	15:78	5	s->lookup_table[n]
water	15:60	0:0	6	s
op	15:61	0:0	6	->
water	15:63	0:0	6	lookup_table
op	15:75	0:0	6	[
water	15:76	0:0	6	n
op	15:77	0:0	6	]
arg	16:31	16:43	5	s->length[n]
water	16:31	0:0	6	s
op	16:32	0:0	6	->
water	16:34	0:0	6	length
op	16:40	0:0	6	[
water	16:41	0:0	6	n
op	16:42	0:0	6	]
arg	16:45	16:47	5	0.
water	16:45	0:0	6	0
op	16:46	0:0	6	.
arg	16:49	16:62	5	depth_samples
water	16:49	0:0	6	depth_samples
arg	16:64	16:65	5	0
water	16:64	0:0	6	0
water	16:66	0:0	4	;
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	max_samples
op	17:23	0:0	4	=
call	17:25	17:54	4	FFMAX
arg	17:31	17:45	5	s->max_samples
water	17:31	0:0	6	s
op	17:32	0:0	6	->
water	17:34	0:0	6	max_samples
arg	17:47	17:54	5	samples
water	17:47	0:0	6	samples
water	17:55	0:0	4	;
water	18:4	0:0	4	}
for	19:4	20:37	2	(n = 0 ;n < s -> num_chorus;n ++)
forinit	19:9	19:14	3	n = 0 ;
water	19:9	0:0	4	n
op	19:11	0:0	4	=
water	19:13	0:0	4	0
water	19:14	0:0	4	;
cond	19:16	19:23	3	n < s -> num_chorus
water	19:16	0:0	4	n
op	19:18	0:0	4	<
water	19:20	0:0	4	s
op	19:21	0:0	4	->
water	19:23	0:0	4	num_chorus
forexpr	19:35	19:36	3	n ++
water	19:35	0:0	4	n
op	19:36	0:0	4	++
stmts	20:8	20:37	3	
water	20:8	0:0	4	sum_in_volume
op	20:22	0:0	4	+=
water	20:25	0:0	4	s
op	20:26	0:0	4	->
water	20:28	0:0	4	decays
op	20:34	0:0	4	[
water	20:35	0:0	4	n
op	20:36	0:0	4	]
water	20:37	0:0	4	;
if	21:4	22:95	2	(s -> in_gain * ( sum_in_volume ) > 1 . 0 / s -> out_gain)
cond	21:8	21:48	3	s -> in_gain * ( sum_in_volume ) > 1 . 0 / s -> out_gain
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	in_gain
op	21:19	0:0	4	*
water	21:21	0:0	4	(
water	21:22	0:0	4	sum_in_volume
water	21:35	0:0	4	)
op	21:37	0:0	4	>
water	21:39	0:0	4	1
op	21:40	0:0	4	.
water	21:41	0:0	4	0
op	21:43	0:0	4	/
water	21:45	0:0	4	s
op	21:46	0:0	4	->
water	21:48	0:0	4	out_gain
stmts	22:8	22:95	3	
call	22:8	22:94	4	av_log
arg	22:15	22:18	5	ctx
water	22:15	0:0	6	ctx
arg	22:20	22:34	5	AV_LOG_WARNING
water	22:20	0:0	6	AV_LOG_WARNING
arg	22:36	22:94	5	"output gain can cause saturation or clipping of output\n"
water	22:36	0:0	6	"output gain can cause saturation or clipping of output\n"
water	22:95	0:0	4	;
water	23:4	0:0	2	s
op	23:5	0:0	2	->
water	23:7	0:0	2	counter
op	23:15	0:0	2	=
call	23:17	23:65	2	av_calloc
arg	23:27	23:44	3	outlink->channels
water	23:27	0:0	4	outlink
op	23:34	0:0	4	->
water	23:36	0:0	4	channels
arg	23:46	23:65	3	sizeof(*s->counter)
op	23:46	0:0	4	sizeof
water	23:52	0:0	4	(
op	23:53	0:0	4	*
water	23:54	0:0	4	s
op	23:55	0:0	4	->
water	23:57	0:0	4	counter
water	23:64	0:0	4	)
water	23:66	0:0	2	;
if	24:4	25:30	2	(! s -> counter)
cond	24:8	24:12	3	! s -> counter
op	24:8	0:0	4	!
water	24:9	0:0	4	s
op	24:10	0:0	4	->
water	24:12	0:0	4	counter
stmts	25:8	25:30	3	
return	25:8	25:30	4	AVERROR(ENOMEM)
call	25:15	25:29	5	AVERROR
arg	25:23	25:29	6	ENOMEM
water	25:23	0:0	7	ENOMEM
water	26:4	0:0	2	s
op	26:5	0:0	2	->
water	26:7	0:0	2	phase
op	26:13	0:0	2	=
call	26:15	26:61	2	av_calloc
arg	26:25	26:42	3	outlink->channels
water	26:25	0:0	4	outlink
op	26:32	0:0	4	->
water	26:34	0:0	4	channels
arg	26:44	26:61	3	sizeof(*s->phase)
op	26:44	0:0	4	sizeof
water	26:50	0:0	4	(
op	26:51	0:0	4	*
water	26:52	0:0	4	s
op	26:53	0:0	4	->
water	26:55	0:0	4	phase
water	26:60	0:0	4	)
water	26:62	0:0	2	;
if	27:4	28:30	2	(! s -> phase)
cond	27:8	27:12	3	! s -> phase
op	27:8	0:0	4	!
water	27:9	0:0	4	s
op	27:10	0:0	4	->
water	27:12	0:0	4	phase
stmts	28:8	28:30	3	
return	28:8	28:30	4	AVERROR(ENOMEM)
call	28:15	28:29	5	AVERROR
arg	28:23	28:29	6	ENOMEM
water	28:23	0:0	7	ENOMEM
for	29:4	33:4	2	(n = 0 ;n < outlink -> channels;n ++)
forinit	29:9	29:14	3	n = 0 ;
water	29:9	0:0	4	n
op	29:11	0:0	4	=
water	29:13	0:0	4	0
water	29:14	0:0	4	;
cond	29:16	29:29	3	n < outlink -> channels
water	29:16	0:0	4	n
op	29:18	0:0	4	<
water	29:20	0:0	4	outlink
op	29:27	0:0	4	->
water	29:29	0:0	4	channels
forexpr	29:39	29:40	3	n ++
water	29:39	0:0	4	n
op	29:40	0:0	4	++
stmts	29:44	33:4	3	
water	29:44	0:0	4	{
water	30:8	0:0	4	s
op	30:9	0:0	4	->
water	30:11	0:0	4	phase
op	30:16	0:0	4	[
water	30:17	0:0	4	n
op	30:18	0:0	4	]
op	30:20	0:0	4	=
call	30:22	30:58	4	av_calloc
arg	30:32	30:45	5	s->num_chorus
water	30:32	0:0	6	s
op	30:33	0:0	6	->
water	30:35	0:0	6	num_chorus
arg	30:47	30:58	5	sizeof(int)
op	30:47	0:0	6	sizeof
water	30:53	0:0	6	(
water	30:54	0:0	6	int
water	30:57	0:0	6	)
water	30:59	0:0	4	;
if	31:8	32:34	4	(! s -> phase [ n ])
cond	31:12	31:23	5	! s -> phase [ n ]
op	31:12	0:0	6	!
water	31:13	0:0	6	s
op	31:14	0:0	6	->
water	31:16	0:0	6	phase
op	31:21	0:0	6	[
water	31:22	0:0	6	n
op	31:23	0:0	6	]
stmts	32:12	32:34	5	
return	32:12	32:34	6	AVERROR(ENOMEM)
call	32:19	32:33	7	AVERROR
arg	32:27	32:33	8	ENOMEM
water	32:27	0:0	9	ENOMEM
water	33:4	0:0	4	}
water	34:4	0:0	2	s
op	34:5	0:0	2	->
water	34:7	0:0	2	fade_out
op	34:16	0:0	2	=
water	34:18	0:0	2	s
op	34:19	0:0	2	->
water	34:21	0:0	2	max_samples
water	34:32	0:0	2	;
return	35:4	38:65	2	av_samples_alloc_array_and_samples(&s->chorusbuf,NULL,outlink->channels,s->max_samples,outlink->format,0)
call	35:11	38:64	3	av_samples_alloc_array_and_samples
arg	35:46	35:59	4	&s->chorusbuf
op	35:46	0:0	5	&
water	35:47	0:0	5	s
op	35:48	0:0	5	->
water	35:50	0:0	5	chorusbuf
arg	35:61	35:65	4	NULL
water	35:61	0:0	5	NULL
arg	36:46	36:63	4	outlink->channels
water	36:46	0:0	5	outlink
op	36:53	0:0	5	->
water	36:55	0:0	5	channels
arg	37:46	37:60	4	s->max_samples
water	37:46	0:0	5	s
op	37:47	0:0	5	->
water	37:49	0:0	5	max_samples
arg	38:46	38:61	4	outlink->format
water	38:46	0:0	5	outlink
op	38:53	0:0	5	->
water	38:55	0:0	5	format
arg	38:63	38:64	4	0
water	38:63	0:0	5	0
