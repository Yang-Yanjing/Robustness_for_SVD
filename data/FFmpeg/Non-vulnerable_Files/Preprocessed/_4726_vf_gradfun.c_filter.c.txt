func	1:0	40:0	0	static void	filter
params	1:18	0:0	1	
param	1:19	1:38	2	GradFunContext *	ctx
param	1:40	1:52	2	uint8_t *	dst
param	1:54	1:72	2	const uint8_t *	src
param	1:74	1:83	2	int	width
param	1:85	1:95	2	int	height
param	1:97	1:113	2	int	dst_linesize
param	1:115	1:131	2	int	src_linesize
param	1:133	1:138	2	int	r
stmnts	0:0	39:12	1	
decl	3:4	3:40	2	int	bstride
op	3:16	0:0	2	=
call	3:18	3:35	3	FFALIGN
arg	3:26	3:31	4	width
water	3:26	0:0	5	width
arg	3:33	3:35	4	16
water	3:33	0:0	5	16
op	3:37	0:0	2	/
water	3:39	0:0	2	2
decl	4:4	4:9	2	int	y
decl	5:4	5:44	2	uint32_t	dc_factor
op	5:23	0:0	2	=
water	5:25	0:0	2	(
water	5:26	0:0	2	1
op	5:28	0:0	2	<<
water	5:31	0:0	2	21
water	5:33	0:0	2	)
op	5:35	0:0	2	/
water	5:37	0:0	2	(
water	5:38	0:0	2	r
op	5:40	0:0	2	*
water	5:42	0:0	2	r
water	5:43	0:0	2	)
decl	6:4	6:32	2	uint16_t	*dc
op	6:17	0:0	2	=
water	6:19	0:0	2	ctx
op	6:22	0:0	2	->
water	6:24	0:0	2	buf
op	6:28	0:0	2	+
water	6:30	0:0	2	16
decl	7:4	7:43	2	uint16_t	*buf
op	7:18	0:0	2	=
water	7:20	0:0	2	ctx
op	7:23	0:0	2	->
water	7:25	0:0	2	buf
op	7:29	0:0	2	+
water	7:31	0:0	2	bstride
op	7:39	0:0	2	+
water	7:41	0:0	2	32
decl	8:4	8:28	2	int	thresh
op	8:15	0:0	2	=
water	8:17	0:0	2	ctx
op	8:20	0:0	2	->
water	8:22	0:0	2	thresh
call	9:4	9:47	2	memset
arg	9:11	9:13	3	dc
water	9:11	0:0	4	dc
arg	9:15	9:16	3	0
water	9:15	0:0	4	0
arg	9:18	9:47	3	(bstride+16)*sizeof(*buf)
water	9:18	0:0	4	(
water	9:19	0:0	4	bstride
op	9:27	0:0	4	+
water	9:29	0:0	4	16
water	9:31	0:0	4	)
op	9:33	0:0	4	*
op	9:35	0:0	4	sizeof
water	9:41	0:0	4	(
op	9:42	0:0	4	*
water	9:43	0:0	4	buf
water	9:46	0:0	4	)
water	9:48	0:0	2	;
for	10:4	11:123	2	(y = 0 ;y < r;y ++)
forinit	10:9	10:14	3	y = 0 ;
water	10:9	0:0	4	y
op	10:11	0:0	4	=
water	10:13	0:0	4	0
water	10:14	0:0	4	;
cond	10:16	10:20	3	y < r
water	10:16	0:0	4	y
op	10:18	0:0	4	<
water	10:20	0:0	4	r
forexpr	10:23	10:24	3	y ++
water	10:23	0:0	4	y
op	10:24	0:0	4	++
stmts	11:8	11:123	3	
call	11:8	11:122	4	ctx->blur_line
arg	11:23	11:25	5	dc
water	11:23	0:0	6	dc
arg	11:27	11:44	5	buf+y*bstride
water	11:27	0:0	6	buf
op	11:31	0:0	6	+
water	11:33	0:0	6	y
op	11:35	0:0	6	*
water	11:37	0:0	6	bstride
arg	11:46	11:69	5	buf+(y-1)*bstride
water	11:46	0:0	6	buf
op	11:50	0:0	6	+
water	11:52	0:0	6	(
water	11:53	0:0	6	y
op	11:55	0:0	6	-
water	11:57	0:0	6	1
water	11:58	0:0	6	)
op	11:60	0:0	6	*
water	11:62	0:0	6	bstride
arg	11:71	11:97	5	src+2*y*src_linesize
water	11:71	0:0	6	src
op	11:75	0:0	6	+
water	11:77	0:0	6	2
op	11:79	0:0	6	*
water	11:81	0:0	6	y
op	11:83	0:0	6	*
water	11:85	0:0	6	src_linesize
arg	11:99	11:111	5	src_linesize
water	11:99	0:0	6	src_linesize
arg	11:113	11:122	5	width/2
water	11:113	0:0	6	width
op	11:119	0:0	6	/
water	11:121	0:0	6	2
water	11:123	0:0	4	;
for	12:4	38:4	2	(;;)
forinit	12:9	12:9	3	;
water	12:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	12:13	38:4	3	
water	12:13	0:0	4	{
if	13:8	29:8	4	(y < height - r)
cond	13:12	13:25	5	y < height - r
water	13:12	0:0	6	y
op	13:14	0:0	6	<
water	13:16	0:0	6	height
op	13:23	0:0	6	-
water	13:25	0:0	6	r
stmts	13:28	29:8	5	
water	13:28	0:0	6	{
decl	14:12	14:39	6	int	mod
op	14:20	0:0	6	=
water	14:22	0:0	6	(
water	14:23	0:0	6	(
water	14:24	0:0	6	y
op	14:26	0:0	6	+
water	14:28	0:0	6	r
water	14:29	0:0	6	)
op	14:31	0:0	6	/
water	14:33	0:0	6	2
water	14:34	0:0	6	)
op	14:36	0:0	6	%
water	14:38	0:0	6	r
decl	15:12	15:48	6	uint16_t	*buf0
op	15:27	0:0	6	=
water	15:29	0:0	6	buf
op	15:33	0:0	6	+
water	15:35	0:0	6	mod
op	15:39	0:0	6	*
water	15:41	0:0	6	bstride
decl	16:12	16:68	6	uint16_t	*buf1
op	16:27	0:0	6	=
water	16:29	0:0	6	buf
op	16:33	0:0	6	+
water	16:35	0:0	6	(
water	16:36	0:0	6	mod
water	16:40	0:0	6	?
water	16:42	0:0	6	mod
op	16:46	0:0	6	-
water	16:48	0:0	6	1
water	16:50	0:0	6	:
water	16:52	0:0	6	r
op	16:54	0:0	6	-
water	16:56	0:0	6	1
water	16:57	0:0	6	)
op	16:59	0:0	6	*
water	16:61	0:0	6	bstride
decl	17:12	17:20	6	int	x
water	17:17	0:0	6	,
decl	17:12	17:20	6	int	v
call	18:12	18:96	6	ctx->blur_line
arg	18:27	18:29	7	dc
water	18:27	0:0	8	dc
arg	18:31	18:35	7	buf0
water	18:31	0:0	8	buf0
arg	18:37	18:41	7	buf1
water	18:37	0:0	8	buf1
arg	18:43	18:71	7	src+(y+r)*src_linesize
water	18:43	0:0	8	src
op	18:47	0:0	8	+
water	18:49	0:0	8	(
water	18:50	0:0	8	y
op	18:52	0:0	8	+
water	18:54	0:0	8	r
water	18:55	0:0	8	)
op	18:57	0:0	8	*
water	18:59	0:0	8	src_linesize
arg	18:73	18:85	7	src_linesize
water	18:73	0:0	8	src_linesize
arg	18:87	18:96	7	width/2
water	18:87	0:0	8	width
op	18:93	0:0	8	/
water	18:95	0:0	8	2
water	18:97	0:0	6	;
for	19:12	20:26	6	(x = v = 0 ;x < r;x ++)
forinit	19:17	19:26	7	x = v = 0 ;
water	19:17	0:0	8	x
op	19:19	0:0	8	=
water	19:21	0:0	8	v
op	19:23	0:0	8	=
water	19:25	0:0	8	0
water	19:26	0:0	8	;
cond	19:28	19:32	7	x < r
water	19:28	0:0	8	x
op	19:30	0:0	8	<
water	19:32	0:0	8	r
forexpr	19:35	19:36	7	x ++
water	19:35	0:0	8	x
op	19:36	0:0	8	++
stmts	20:16	20:26	7	
water	20:16	0:0	8	v
op	20:18	0:0	8	+=
water	20:21	0:0	8	dc
op	20:23	0:0	8	[
water	20:24	0:0	8	x
op	20:25	0:0	8	]
water	20:26	0:0	8	;
for	21:12	24:12	6	(;x < width / 2;x ++)
forinit	21:17	21:17	7	;
water	21:17	0:0	8	;
cond	21:19	21:31	7	x < width / 2
water	21:19	0:0	8	x
op	21:21	0:0	8	<
water	21:23	0:0	8	width
op	21:29	0:0	8	/
water	21:31	0:0	8	2
forexpr	21:34	21:35	7	x ++
water	21:34	0:0	8	x
op	21:35	0:0	8	++
stmts	21:39	24:12	7	
water	21:39	0:0	8	{
water	22:16	0:0	8	v
op	22:18	0:0	8	+=
water	22:21	0:0	8	dc
op	22:23	0:0	8	[
water	22:24	0:0	8	x
op	22:25	0:0	8	]
op	22:27	0:0	8	-
water	22:29	0:0	8	dc
op	22:31	0:0	8	[
water	22:32	0:0	8	x
op	22:33	0:0	8	-
water	22:34	0:0	8	r
op	22:35	0:0	8	]
water	22:36	0:0	8	;
water	23:16	0:0	8	dc
op	23:18	0:0	8	[
water	23:19	0:0	8	x
op	23:20	0:0	8	-
water	23:21	0:0	8	r
op	23:22	0:0	8	]
op	23:24	0:0	8	=
water	23:26	0:0	8	v
op	23:28	0:0	8	*
water	23:30	0:0	8	dc_factor
op	23:40	0:0	8	>>
water	23:43	0:0	8	16
water	23:45	0:0	8	;
water	24:12	0:0	8	}
for	25:12	26:45	6	(;x < ( width + r + 1 ) / 2;x ++)
forinit	25:17	25:17	7	;
water	25:17	0:0	8	;
cond	25:19	25:41	7	x < ( width + r + 1 ) / 2
water	25:19	0:0	8	x
op	25:21	0:0	8	<
water	25:23	0:0	8	(
water	25:24	0:0	8	width
op	25:30	0:0	8	+
water	25:32	0:0	8	r
op	25:34	0:0	8	+
water	25:36	0:0	8	1
water	25:37	0:0	8	)
op	25:39	0:0	8	/
water	25:41	0:0	8	2
forexpr	25:44	25:45	7	x ++
water	25:44	0:0	8	x
op	25:45	0:0	8	++
stmts	26:16	26:45	7	
water	26:16	0:0	8	dc
op	26:18	0:0	8	[
water	26:19	0:0	8	x
op	26:20	0:0	8	-
water	26:21	0:0	8	r
op	26:22	0:0	8	]
op	26:24	0:0	8	=
water	26:26	0:0	8	v
op	26:28	0:0	8	*
water	26:30	0:0	8	dc_factor
op	26:40	0:0	8	>>
water	26:43	0:0	8	16
water	26:45	0:0	8	;
for	27:12	28:29	6	(x = - r / 2 ;x < 0;x ++)
forinit	27:17	27:27	7	x = - r / 2 ;
water	27:17	0:0	8	x
op	27:19	0:0	8	=
op	27:21	0:0	8	-
water	27:22	0:0	8	r
op	27:24	0:0	8	/
water	27:26	0:0	8	2
water	27:27	0:0	8	;
cond	27:29	27:33	7	x < 0
water	27:29	0:0	8	x
op	27:31	0:0	8	<
water	27:33	0:0	8	0
forexpr	27:36	27:37	7	x ++
water	27:36	0:0	8	x
op	27:37	0:0	8	++
stmts	28:16	28:29	7	
water	28:16	0:0	8	dc
op	28:18	0:0	8	[
water	28:19	0:0	8	x
op	28:20	0:0	8	]
op	28:22	0:0	8	=
water	28:24	0:0	8	dc
op	28:26	0:0	8	[
water	28:27	0:0	8	0
op	28:28	0:0	8	]
water	28:29	0:0	8	;
water	29:8	0:0	6	}
if	30:8	33:8	4	(y == r)
cond	30:12	30:17	5	y == r
water	30:12	0:0	6	y
op	30:14	0:0	6	==
water	30:17	0:0	6	r
stmts	30:20	33:8	5	
water	30:20	0:0	6	{
for	31:12	32:122	6	(y = 0 ;y < r;y ++)
forinit	31:17	31:22	7	y = 0 ;
water	31:17	0:0	8	y
op	31:19	0:0	8	=
water	31:21	0:0	8	0
water	31:22	0:0	8	;
cond	31:24	31:28	7	y < r
water	31:24	0:0	8	y
op	31:26	0:0	8	<
water	31:28	0:0	8	r
forexpr	31:31	31:32	7	y ++
water	31:31	0:0	8	y
op	31:32	0:0	8	++
stmts	32:16	32:122	7	
call	32:16	32:121	8	ctx->filter_line
arg	32:33	32:55	9	dst+y*dst_linesize
water	32:33	0:0	10	dst
op	32:37	0:0	10	+
water	32:39	0:0	10	y
op	32:41	0:0	10	*
water	32:43	0:0	10	dst_linesize
arg	32:57	32:79	9	src+y*src_linesize
water	32:57	0:0	10	src
op	32:61	0:0	10	+
water	32:63	0:0	10	y
op	32:65	0:0	10	*
water	32:67	0:0	10	src_linesize
arg	32:81	32:91	9	dc-r/2
water	32:81	0:0	10	dc
op	32:84	0:0	10	-
water	32:86	0:0	10	r
op	32:88	0:0	10	/
water	32:90	0:0	10	2
arg	32:93	32:98	9	width
water	32:93	0:0	10	width
arg	32:100	32:106	9	thresh
water	32:100	0:0	10	thresh
arg	32:108	32:121	9	dither[y&7]
water	32:108	0:0	10	dither
op	32:114	0:0	10	[
water	32:115	0:0	10	y
op	32:117	0:0	10	&
water	32:119	0:0	10	7
op	32:120	0:0	10	]
water	32:122	0:0	8	;
water	33:8	0:0	6	}
call	34:8	34:113	4	ctx->filter_line
arg	34:25	34:47	5	dst+y*dst_linesize
water	34:25	0:0	6	dst
op	34:29	0:0	6	+
water	34:31	0:0	6	y
op	34:33	0:0	6	*
water	34:35	0:0	6	dst_linesize
arg	34:49	34:71	5	src+y*src_linesize
water	34:49	0:0	6	src
op	34:53	0:0	6	+
water	34:55	0:0	6	y
op	34:57	0:0	6	*
water	34:59	0:0	6	src_linesize
arg	34:73	34:83	5	dc-r/2
water	34:73	0:0	6	dc
op	34:76	0:0	6	-
water	34:78	0:0	6	r
op	34:80	0:0	6	/
water	34:82	0:0	6	2
arg	34:85	34:90	5	width
water	34:85	0:0	6	width
arg	34:92	34:98	5	thresh
water	34:92	0:0	6	thresh
arg	34:100	34:113	5	dither[y&7]
water	34:100	0:0	6	dither
op	34:106	0:0	6	[
water	34:107	0:0	6	y
op	34:109	0:0	6	&
water	34:111	0:0	6	7
op	34:112	0:0	6	]
water	34:114	0:0	4	;
if	35:8	35:32	4	(++ y >= height)
cond	35:12	35:19	5	++ y >= height
op	35:12	0:0	6	++
water	35:14	0:0	6	y
op	35:16	0:0	6	>=
water	35:19	0:0	6	height
stmts	35:27	35:32	5	
break	35:27	35:32	6	
call	36:8	36:113	4	ctx->filter_line
arg	36:25	36:47	5	dst+y*dst_linesize
water	36:25	0:0	6	dst
op	36:29	0:0	6	+
water	36:31	0:0	6	y
op	36:33	0:0	6	*
water	36:35	0:0	6	dst_linesize
arg	36:49	36:71	5	src+y*src_linesize
water	36:49	0:0	6	src
op	36:53	0:0	6	+
water	36:55	0:0	6	y
op	36:57	0:0	6	*
water	36:59	0:0	6	src_linesize
arg	36:73	36:83	5	dc-r/2
water	36:73	0:0	6	dc
op	36:76	0:0	6	-
water	36:78	0:0	6	r
op	36:80	0:0	6	/
water	36:82	0:0	6	2
arg	36:85	36:90	5	width
water	36:85	0:0	6	width
arg	36:92	36:98	5	thresh
water	36:92	0:0	6	thresh
arg	36:100	36:113	5	dither[y&7]
water	36:100	0:0	6	dither
op	36:106	0:0	6	[
water	36:107	0:0	6	y
op	36:109	0:0	6	&
water	36:111	0:0	6	7
op	36:112	0:0	6	]
water	36:114	0:0	4	;
if	37:8	37:32	4	(++ y >= height)
cond	37:12	37:19	5	++ y >= height
op	37:12	0:0	6	++
water	37:14	0:0	6	y
op	37:16	0:0	6	>=
water	37:19	0:0	6	height
stmts	37:27	37:32	5	
break	37:27	37:32	6	
water	38:4	0:0	4	}
call	39:4	39:11	2	emms_c
water	39:12	0:0	2	;
