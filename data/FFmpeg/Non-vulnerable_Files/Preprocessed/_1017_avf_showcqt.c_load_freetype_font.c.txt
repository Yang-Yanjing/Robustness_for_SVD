func	1:0	71:0	0	static void	load_freetype_font
params	1:30	0:0	1	
param	1:31	1:51	2	AVFilterContext *	ctx
stmnts	3:4	70:10	1	
water	3:4	0:0	2	static
water	3:11	0:0	2	const
water	3:17	0:0	2	char
water	3:22	0:0	2	str
op	3:25	0:0	2	[
op	3:26	0:0	2	]
op	3:28	0:0	2	=
water	3:30	0:0	2	"EF G A BC D "
water	3:44	0:0	2	;
decl	4:4	4:33	2	ShowCQTContext	*s
op	4:22	0:0	2	=
water	4:24	0:0	2	ctx
op	4:27	0:0	2	->
water	4:29	0:0	2	priv
decl	5:4	5:25	2	FT_Library	lib
op	5:19	0:0	2	=
water	5:21	0:0	2	NULL
decl	6:4	6:23	2	FT_Face	face
op	6:17	0:0	2	=
water	6:19	0:0	2	NULL
decl	7:4	7:39	2	int	video_scale
op	7:20	0:0	2	=
water	7:22	0:0	2	s
op	7:23	0:0	2	->
water	7:25	0:0	2	fullhd
water	7:32	0:0	2	?
water	7:34	0:0	2	2
water	7:36	0:0	2	:
water	7:38	0:0	2	1
decl	8:4	8:51	2	int	video_width
op	8:20	0:0	2	=
water	8:22	0:0	2	(
water	8:23	0:0	2	VIDEO_WIDTH
op	8:34	0:0	2	/
water	8:35	0:0	2	2
water	8:36	0:0	2	)
op	8:38	0:0	2	*
water	8:40	0:0	2	video_scale
decl	9:4	9:51	2	int	font_height
op	9:20	0:0	2	=
water	9:22	0:0	2	(
water	9:23	0:0	2	FONT_HEIGHT
op	9:34	0:0	2	/
water	9:35	0:0	2	2
water	9:36	0:0	2	)
op	9:38	0:0	2	*
water	9:40	0:0	2	video_scale
decl	10:4	10:36	2	int	font_width
op	10:19	0:0	2	=
water	10:21	0:0	2	8
op	10:23	0:0	2	*
water	10:25	0:0	2	video_scale
decl	11:4	11:37	2	int	font_repeat
op	11:20	0:0	2	=
water	11:22	0:0	2	font_width
op	11:33	0:0	2	*
water	11:35	0:0	2	12
decl	12:4	12:48	2	int	linear_hori_advance
op	12:28	0:0	2	=
water	12:30	0:0	2	font_width
op	12:41	0:0	2	*
water	12:43	0:0	2	65536
decl	13:4	13:33	2	int	non_monospace_warning
op	13:30	0:0	2	=
water	13:32	0:0	2	0
decl	14:4	14:9	2	int	x
water	15:4	0:0	2	s
op	15:5	0:0	2	->
water	15:7	0:0	2	font_alpha
op	15:18	0:0	2	=
water	15:20	0:0	2	NULL
water	15:24	0:0	2	;
if	16:4	17:14	2	(! s -> fontfile)
cond	16:8	16:12	3	! s -> fontfile
op	16:8	0:0	4	!
water	16:9	0:0	4	s
op	16:10	0:0	4	->
water	16:12	0:0	4	fontfile
stmts	17:8	17:14	3	
return	17:8	17:14	4	
if	18:4	19:17	2	(FT_Init_FreeType (& lib ))
cond	18:8	18:29	3	FT_Init_FreeType (& lib )
call	18:8	18:29	4	FT_Init_FreeType
arg	18:25	18:29	5	&lib
op	18:25	0:0	6	&
water	18:26	0:0	6	lib
stmts	19:8	19:17	3	
goto	19:8	19:17	4	fail
water	19:13	0:0	5	fail
if	20:4	21:17	2	(FT_New_Face (lib ,s -> fontfile ,0 ,& face ))
cond	20:8	20:46	3	FT_New_Face (lib ,s -> fontfile ,0 ,& face )
call	20:8	20:46	4	FT_New_Face
arg	20:20	20:23	5	lib
water	20:20	0:0	6	lib
arg	20:25	20:36	5	s->fontfile
water	20:25	0:0	6	s
op	20:26	0:0	6	->
water	20:28	0:0	6	fontfile
arg	20:38	20:39	5	0
water	20:38	0:0	6	0
arg	20:41	20:46	5	&face
op	20:41	0:0	6	&
water	20:42	0:0	6	face
stmts	21:8	21:17	3	
goto	21:8	21:17	4	fail
water	21:13	0:0	5	fail
if	22:4	23:17	2	(FT_Set_Char_Size (face ,16 * 64 ,0 ,0 ,0 ))
cond	22:8	22:45	3	FT_Set_Char_Size (face ,16 * 64 ,0 ,0 ,0 )
call	22:8	22:45	4	FT_Set_Char_Size
arg	22:25	22:29	5	face
water	22:25	0:0	6	face
arg	22:31	22:36	5	16*64
water	22:31	0:0	6	16
op	22:33	0:0	6	*
water	22:34	0:0	6	64
arg	22:38	22:39	5	0
water	22:38	0:0	6	0
arg	22:41	22:42	5	0
water	22:41	0:0	6	0
arg	22:44	22:45	5	0
water	22:44	0:0	6	0
stmts	23:8	23:17	3	
goto	23:8	23:17	4	fail
water	23:13	0:0	5	fail
if	24:4	25:17	2	(FT_Load_Char (face ,'A' ,FT_LOAD_RENDER ))
cond	24:8	24:46	3	FT_Load_Char (face ,'A' ,FT_LOAD_RENDER )
call	24:8	24:46	4	FT_Load_Char
arg	24:21	24:25	5	face
water	24:21	0:0	6	face
arg	24:27	24:30	5	'A'
water	24:27	0:0	6	'A'
arg	24:32	24:46	5	FT_LOAD_RENDER
water	24:32	0:0	6	FT_LOAD_RENDER
stmts	25:8	25:17	3	
goto	25:8	25:17	4	fail
water	25:13	0:0	5	fail
if	26:4	27:17	2	(FT_Set_Char_Size (face ,16 * 64 * linear_hori_advance / face -> glyph -> linearHoriAdvance ,0 ,0 ,0 ))
cond	26:8	26:100	3	FT_Set_Char_Size (face ,16 * 64 * linear_hori_advance / face -> glyph -> linearHoriAdvance ,0 ,0 ,0 )
call	26:8	26:100	4	FT_Set_Char_Size
arg	26:25	26:29	5	face
water	26:25	0:0	6	face
arg	26:31	26:91	5	16*64*linear_hori_advance/face->glyph->linearHoriAdvance
water	26:31	0:0	6	16
op	26:33	0:0	6	*
water	26:34	0:0	6	64
op	26:37	0:0	6	*
water	26:39	0:0	6	linear_hori_advance
op	26:59	0:0	6	/
water	26:61	0:0	6	face
op	26:65	0:0	6	->
water	26:67	0:0	6	glyph
op	26:72	0:0	6	->
water	26:74	0:0	6	linearHoriAdvance
arg	26:93	26:94	5	0
water	26:93	0:0	6	0
arg	26:96	26:97	5	0
water	26:96	0:0	6	0
arg	26:99	26:100	5	0
water	26:99	0:0	6	0
stmts	27:8	27:17	3	
goto	27:8	27:17	4	fail
water	27:13	0:0	5	fail
water	28:4	0:0	2	s
op	28:5	0:0	2	->
water	28:7	0:0	2	font_alpha
op	28:18	0:0	2	=
call	28:20	28:60	2	av_malloc_array
arg	28:36	28:47	3	font_height
water	28:36	0:0	4	font_height
arg	28:49	28:60	3	video_width
water	28:49	0:0	4	video_width
water	28:61	0:0	2	;
if	29:4	30:17	2	(! s -> font_alpha)
cond	29:8	29:12	3	! s -> font_alpha
op	29:8	0:0	4	!
water	29:9	0:0	4	s
op	29:10	0:0	4	->
water	29:12	0:0	4	font_alpha
stmts	30:8	30:17	3	
goto	30:8	30:17	4	fail
water	30:13	0:0	5	fail
call	31:4	31:54	2	memset
arg	31:11	31:24	3	s->font_alpha
water	31:11	0:0	4	s
op	31:12	0:0	4	->
water	31:14	0:0	4	font_alpha
arg	31:26	31:27	3	0
water	31:26	0:0	4	0
arg	31:29	31:54	3	font_height*video_width
water	31:29	0:0	4	font_height
op	31:41	0:0	4	*
water	31:43	0:0	4	video_width
water	31:55	0:0	2	;
for	32:4	61:4	2	(x = 0 ;x < 12;x ++)
forinit	32:9	32:14	3	x = 0 ;
water	32:9	0:0	4	x
op	32:11	0:0	4	=
water	32:13	0:0	4	0
water	32:14	0:0	4	;
cond	32:16	32:20	3	x < 12
water	32:16	0:0	4	x
op	32:18	0:0	4	<
water	32:20	0:0	4	12
forexpr	32:24	32:25	3	x ++
water	32:24	0:0	4	x
op	32:25	0:0	4	++
stmts	32:29	61:4	3	
water	32:29	0:0	4	{
decl	33:8	33:38	4	int	sx
water	33:14	0:0	4	,
decl	33:8	33:38	4	int	sy
water	33:18	0:0	4	,
decl	33:8	33:38	4	int	rx
water	33:22	0:0	4	,
decl	33:8	33:38	4	int	bx
water	33:26	0:0	4	,
decl	33:8	33:38	4	int	by
water	33:30	0:0	4	,
decl	33:8	33:38	4	int	dx
water	33:34	0:0	4	,
decl	33:8	33:38	4	int	dy
if	34:8	35:20	4	(str [ x ] == ' ')
cond	34:12	34:22	5	str [ x ] == ' '
water	34:12	0:0	6	str
op	34:15	0:0	6	[
water	34:16	0:0	6	x
op	34:17	0:0	6	]
op	34:19	0:0	6	==
water	34:22	0:0	6	' '
stmts	35:12	35:20	5	
continue	35:12	35:20	6	
if	36:8	37:21	4	(FT_Load_Char (face ,str [ x ] ,FT_LOAD_RENDER ))
cond	36:12	36:53	5	FT_Load_Char (face ,str [ x ] ,FT_LOAD_RENDER )
call	36:12	36:53	6	FT_Load_Char
arg	36:25	36:29	7	face
water	36:25	0:0	8	face
arg	36:31	36:37	7	str[x]
water	36:31	0:0	8	str
op	36:34	0:0	8	[
water	36:35	0:0	8	x
op	36:36	0:0	8	]
arg	36:39	36:53	7	FT_LOAD_RENDER
water	36:39	0:0	8	FT_LOAD_RENDER
stmts	37:12	37:21	5	
goto	37:12	37:21	6	fail
water	37:17	0:0	7	fail
if	38:8	41:8	4	(face -> glyph -> advance . x != font_width * 64 && ! non_monospace_warning)
cond	38:12	38:56	5	face -> glyph -> advance . x != font_width * 64 && ! non_monospace_warning
water	38:12	0:0	6	face
op	38:16	0:0	6	->
water	38:18	0:0	6	glyph
op	38:23	0:0	6	->
water	38:25	0:0	6	advance
op	38:32	0:0	6	.
water	38:33	0:0	6	x
op	38:35	0:0	6	!=
water	38:38	0:0	6	font_width
op	38:48	0:0	6	*
water	38:49	0:0	6	64
op	38:52	0:0	6	&&
op	38:55	0:0	6	!
water	38:56	0:0	6	non_monospace_warning
stmts	38:79	41:8	5	
water	38:79	0:0	6	{
call	39:12	39:65	6	av_log
arg	39:19	39:22	7	ctx
water	39:19	0:0	8	ctx
arg	39:24	39:38	7	AV_LOG_WARNING
water	39:24	0:0	8	AV_LOG_WARNING
arg	39:40	39:65	7	"Font is not monospace\n"
water	39:40	0:0	8	"Font is not monospace\n"
water	39:66	0:0	6	;
water	40:12	0:0	6	non_monospace_warning
op	40:34	0:0	6	=
water	40:36	0:0	6	1
water	40:37	0:0	6	;
water	41:8	0:0	6	}
water	42:8	0:0	4	sy
op	42:11	0:0	4	=
water	42:13	0:0	4	font_height
op	42:25	0:0	4	-
water	42:27	0:0	4	4
op	42:28	0:0	4	*
water	42:29	0:0	4	video_scale
op	42:41	0:0	4	-
water	42:43	0:0	4	face
op	42:47	0:0	4	->
water	42:49	0:0	4	glyph
op	42:54	0:0	4	->
water	42:56	0:0	4	bitmap_top
water	42:66	0:0	4	;
for	43:8	60:8	4	(rx = 0 ;rx < 10;rx ++)
forinit	43:13	43:19	5	rx = 0 ;
water	43:13	0:0	6	rx
op	43:16	0:0	6	=
water	43:18	0:0	6	0
water	43:19	0:0	6	;
cond	43:21	43:26	5	rx < 10
water	43:21	0:0	6	rx
op	43:24	0:0	6	<
water	43:26	0:0	6	10
forexpr	43:30	43:32	5	rx ++
water	43:30	0:0	6	rx
op	43:32	0:0	6	++
stmts	43:36	60:8	5	
water	43:36	0:0	6	{
water	44:12	0:0	6	sx
op	44:15	0:0	6	=
water	44:17	0:0	6	rx
op	44:20	0:0	6	*
water	44:22	0:0	6	font_repeat
op	44:34	0:0	6	+
water	44:36	0:0	6	x
op	44:38	0:0	6	*
water	44:40	0:0	6	font_width
op	44:51	0:0	6	+
water	44:53	0:0	6	face
op	44:57	0:0	6	->
water	44:59	0:0	6	glyph
op	44:64	0:0	6	->
water	44:66	0:0	6	bitmap_left
water	44:77	0:0	6	;
for	45:12	59:12	6	(by = 0 ;by < face -> glyph -> bitmap . rows;by ++)
forinit	45:17	45:23	7	by = 0 ;
water	45:17	0:0	8	by
op	45:20	0:0	8	=
water	45:22	0:0	8	0
water	45:23	0:0	8	;
cond	45:25	45:50	7	by < face -> glyph -> bitmap . rows
water	45:25	0:0	8	by
op	45:28	0:0	8	<
water	45:30	0:0	8	face
op	45:34	0:0	8	->
water	45:36	0:0	8	glyph
op	45:41	0:0	8	->
water	45:43	0:0	8	bitmap
op	45:49	0:0	8	.
water	45:50	0:0	8	rows
forexpr	45:56	45:58	7	by ++
water	45:56	0:0	8	by
op	45:58	0:0	8	++
stmts	45:62	59:12	7	
water	45:62	0:0	8	{
water	46:16	0:0	8	dy
op	46:19	0:0	8	=
water	46:21	0:0	8	by
op	46:24	0:0	8	+
water	46:26	0:0	8	sy
water	46:28	0:0	8	;
if	47:16	48:28	8	(dy < 0)
cond	47:20	47:25	9	dy < 0
water	47:20	0:0	10	dy
op	47:23	0:0	10	<
water	47:25	0:0	10	0
stmts	48:20	48:28	9	
continue	48:20	48:28	10	
if	49:16	50:25	8	(dy >= font_height)
cond	49:20	49:26	9	dy >= font_height
water	49:20	0:0	10	dy
op	49:23	0:0	10	>=
water	49:26	0:0	10	font_height
stmts	50:20	50:25	9	
break	50:20	50:25	10	
for	51:16	58:16	8	(bx = 0 ;bx < face -> glyph -> bitmap . width;bx ++)
forinit	51:21	51:27	9	bx = 0 ;
water	51:21	0:0	10	bx
op	51:24	0:0	10	=
water	51:26	0:0	10	0
water	51:27	0:0	10	;
cond	51:29	51:54	9	bx < face -> glyph -> bitmap . width
water	51:29	0:0	10	bx
op	51:32	0:0	10	<
water	51:34	0:0	10	face
op	51:38	0:0	10	->
water	51:40	0:0	10	glyph
op	51:45	0:0	10	->
water	51:47	0:0	10	bitmap
op	51:53	0:0	10	.
water	51:54	0:0	10	width
forexpr	51:61	51:63	9	bx ++
water	51:61	0:0	10	bx
op	51:63	0:0	10	++
stmts	51:67	58:16	9	
water	51:67	0:0	10	{
water	52:20	0:0	10	dx
op	52:23	0:0	10	=
water	52:25	0:0	10	bx
op	52:28	0:0	10	+
water	52:30	0:0	10	sx
water	52:32	0:0	10	;
if	53:20	54:32	10	(dx < 0)
cond	53:24	53:29	11	dx < 0
water	53:24	0:0	12	dx
op	53:27	0:0	12	<
water	53:29	0:0	12	0
stmts	54:24	54:32	11	
continue	54:24	54:32	12	
if	55:20	56:29	10	(dx >= video_width)
cond	55:24	55:30	11	dx >= video_width
water	55:24	0:0	12	dx
op	55:27	0:0	12	>=
water	55:30	0:0	12	video_width
stmts	56:24	56:29	11	
break	56:24	56:29	12	
water	57:20	0:0	10	s
op	57:21	0:0	10	->
water	57:23	0:0	10	font_alpha
op	57:33	0:0	10	[
water	57:34	0:0	10	dy
op	57:36	0:0	10	*
water	57:37	0:0	10	video_width
op	57:48	0:0	10	+
water	57:49	0:0	10	dx
op	57:51	0:0	10	]
op	57:53	0:0	10	=
water	57:55	0:0	10	face
op	57:59	0:0	10	->
water	57:61	0:0	10	glyph
op	57:66	0:0	10	->
water	57:68	0:0	10	bitmap
op	57:74	0:0	10	.
water	57:75	0:0	10	buffer
op	57:81	0:0	10	[
water	57:82	0:0	10	by
op	57:84	0:0	10	*
water	57:85	0:0	10	face
op	57:89	0:0	10	->
water	57:91	0:0	10	glyph
op	57:96	0:0	10	->
water	57:98	0:0	10	bitmap
op	57:104	0:0	10	.
water	57:105	0:0	10	width
op	57:110	0:0	10	+
water	57:111	0:0	10	bx
op	57:113	0:0	10	]
water	57:114	0:0	10	;
water	58:16	0:0	10	}
water	59:12	0:0	8	}
water	60:8	0:0	6	}
water	61:4	0:0	4	}
call	62:4	62:21	2	FT_Done_Face
arg	62:17	62:21	3	face
water	62:17	0:0	4	face
water	62:22	0:0	2	;
call	63:4	63:24	2	FT_Done_FreeType
arg	63:21	63:24	3	lib
water	63:21	0:0	4	lib
water	63:25	0:0	2	;
return	64:4	64:10	2	
label	65:4	65:8	2	fail :
call	66:4	66:97	2	av_log
arg	66:11	66:14	3	ctx
water	66:11	0:0	4	ctx
arg	66:16	66:30	3	AV_LOG_WARNING
water	66:16	0:0	4	AV_LOG_WARNING
arg	66:32	66:97	3	"Error while loading freetype font, using default font instead\n"
water	66:32	0:0	4	"Error while loading freetype font, using default font instead\n"
water	66:98	0:0	2	;
call	67:4	67:21	2	FT_Done_Face
arg	67:17	67:21	3	face
water	67:17	0:0	4	face
water	67:22	0:0	2	;
call	68:4	68:24	2	FT_Done_FreeType
arg	68:21	68:24	3	lib
water	68:21	0:0	4	lib
water	68:25	0:0	2	;
call	69:4	69:27	2	av_freep
arg	69:13	69:27	3	&s->font_alpha
op	69:13	0:0	4	&
water	69:14	0:0	4	s
op	69:15	0:0	4	->
water	69:17	0:0	4	font_alpha
water	69:28	0:0	2	;
return	70:4	70:10	2	
