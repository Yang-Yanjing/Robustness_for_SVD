func	2:0	80:0	0	static int	set_string_number
params	2:28	0:0	1	
param	2:29	2:38	2	void *	obj
param	2:40	2:56	2	void *	target_obj
param	2:58	2:75	2	const AVOption *	o
param	2:77	2:92	2	const char *	val
param	2:94	2:103	2	void *	dst
stmnts	0:0	79:12	1	
decl	4:4	4:15	2	int	ret
op	4:12	0:0	2	=
water	4:14	0:0	2	0
decl	5:4	5:16	2	int	num
water	5:11	0:0	2	,
decl	5:4	5:16	2	int	den
decl	6:4	6:10	2	char	c
if	7:4	11:4	2	(sscanf (val ,"%d%*1[:/]%d%c" ,& num ,& den ,& c ) == 2)
cond	7:8	7:56	3	sscanf (val ,"%d%*1[:/]%d%c" ,& num ,& den ,& c ) == 2
call	7:8	7:51	4	sscanf
arg	7:15	7:18	5	val
water	7:15	0:0	6	val
arg	7:20	7:35	5	"%d%*1[:/]%d%c"
water	7:20	0:0	6	"%d%*1[:/]%d%c"
arg	7:37	7:41	5	&num
op	7:37	0:0	6	&
water	7:38	0:0	6	num
arg	7:43	7:47	5	&den
op	7:43	0:0	6	&
water	7:44	0:0	6	den
arg	7:49	7:51	5	&c
op	7:49	0:0	6	&
water	7:50	0:0	6	c
op	7:53	0:0	4	==
water	7:56	0:0	4	2
stmts	7:59	11:4	3	
water	7:59	0:0	4	{
if	8:8	9:22	4	(( ret =write_number (obj ,o ,dst ,1 ,den ,num ) ) >= 0)
cond	8:12	8:62	5	( ret =write_number (obj ,o ,dst ,1 ,den ,num ) ) >= 0
water	8:12	0:0	6	(
water	8:13	0:0	6	ret
op	8:17	0:0	6	=
call	8:19	8:56	6	write_number
arg	8:32	8:35	7	obj
water	8:32	0:0	8	obj
arg	8:37	8:38	7	o
water	8:37	0:0	8	o
arg	8:40	8:43	7	dst
water	8:40	0:0	8	dst
arg	8:45	8:46	7	1
water	8:45	0:0	8	1
arg	8:48	8:51	7	den
water	8:48	0:0	8	den
arg	8:53	8:56	7	num
water	8:53	0:0	8	num
water	8:57	0:0	6	)
op	8:59	0:0	6	>=
water	8:62	0:0	6	0
stmts	9:12	9:22	5	
return	9:12	9:22	6	ret
water	9:19	0:0	7	ret
water	10:8	0:0	4	ret
op	10:12	0:0	4	=
water	10:14	0:0	4	0
water	10:15	0:0	4	;
water	11:4	0:0	4	}
for	12:4	78:4	2	(;;)
forinit	12:9	12:9	3	;
water	12:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	12:13	78:4	3	
water	12:13	0:0	4	{
decl	13:8	13:17	4	int	i
op	13:14	0:0	4	=
water	13:16	0:0	4	0
decl	14:8	14:21	4	char	buf[256]
decl	15:8	15:19	4	int	cmd
op	15:16	0:0	4	=
water	15:18	0:0	4	0
decl	16:8	16:16	4	double	d
decl	17:8	17:26	4	int64_t	intnum
op	17:23	0:0	4	=
water	17:25	0:0	4	1
if	18:8	24:8	4	(o -> type == AV_OPT_TYPE_FLAGS)
cond	18:12	18:23	5	o -> type == AV_OPT_TYPE_FLAGS
water	18:12	0:0	6	o
op	18:13	0:0	6	->
water	18:15	0:0	6	type
op	18:20	0:0	6	==
water	18:23	0:0	6	AV_OPT_TYPE_FLAGS
stmts	18:42	24:8	5	
water	18:42	0:0	6	{
if	19:12	20:30	6	(* val == '+' || * val == '-')
cond	19:16	19:39	7	* val == '+' || * val == '-'
op	19:16	0:0	8	*
water	19:17	0:0	8	val
op	19:21	0:0	8	==
water	19:24	0:0	8	'+'
op	19:28	0:0	8	||
op	19:31	0:0	8	*
water	19:32	0:0	8	val
op	19:36	0:0	8	==
water	19:39	0:0	8	'-'
stmts	20:16	20:30	7	
water	20:16	0:0	8	cmd
op	20:20	0:0	8	=
op	20:22	0:0	8	*
water	20:23	0:0	8	(
water	20:24	0:0	8	val
op	20:27	0:0	8	++
water	20:29	0:0	8	)
water	20:30	0:0	8	;
for	21:12	22:31	6	(;i < sizeof ( buf ) - 1 && val [ i ] && val [ i ] != '+' && val [ i ] != '-';i ++)
forinit	21:17	21:17	7	;
water	21:17	0:0	8	;
cond	21:19	21:79	7	i < sizeof ( buf ) - 1 && val [ i ] && val [ i ] != '+' && val [ i ] != '-'
water	21:19	0:0	8	i
op	21:21	0:0	8	<
op	21:23	0:0	8	sizeof
water	21:29	0:0	8	(
water	21:30	0:0	8	buf
water	21:33	0:0	8	)
op	21:35	0:0	8	-
water	21:37	0:0	8	1
op	21:39	0:0	8	&&
water	21:42	0:0	8	val
op	21:45	0:0	8	[
water	21:46	0:0	8	i
op	21:47	0:0	8	]
op	21:49	0:0	8	&&
water	21:52	0:0	8	val
op	21:55	0:0	8	[
water	21:56	0:0	8	i
op	21:57	0:0	8	]
op	21:59	0:0	8	!=
water	21:62	0:0	8	'+'
op	21:66	0:0	8	&&
water	21:69	0:0	8	val
op	21:72	0:0	8	[
water	21:73	0:0	8	i
op	21:74	0:0	8	]
op	21:76	0:0	8	!=
water	21:79	0:0	8	'-'
forexpr	21:84	21:85	7	i ++
water	21:84	0:0	8	i
op	21:85	0:0	8	++
stmts	22:16	22:31	7	
water	22:16	0:0	8	buf
op	22:19	0:0	8	[
water	22:20	0:0	8	i
op	22:21	0:0	8	]
op	22:23	0:0	8	=
water	22:25	0:0	8	val
op	22:28	0:0	8	[
water	22:29	0:0	8	i
op	22:30	0:0	8	]
water	22:31	0:0	8	;
water	23:12	0:0	6	buf
op	23:15	0:0	6	[
water	23:16	0:0	6	i
op	23:17	0:0	6	]
op	23:19	0:0	6	=
water	23:21	0:0	6	0
water	23:22	0:0	6	;
water	24:8	0:0	6	}
water	25:8	0:0	4	{
decl	26:12	26:91	4	const AVOption	*o_named
op	26:36	0:0	4	=
call	26:38	26:90	5	av_opt_find
arg	26:50	26:60	6	target_obj
water	26:50	0:0	7	target_obj
arg	26:62	26:75	6	i?buf:val
water	26:62	0:0	7	i
water	26:64	0:0	7	?
water	26:66	0:0	7	buf
water	26:70	0:0	7	:
water	26:72	0:0	7	val
arg	26:77	26:84	6	o->unit
water	26:77	0:0	7	o
op	26:78	0:0	7	->
water	26:80	0:0	7	unit
arg	26:86	26:87	6	0
water	26:86	0:0	7	0
arg	26:89	26:90	6	0
water	26:89	0:0	7	0
decl	27:12	27:19	4	int	res
decl	28:12	28:22	4	int	ci
op	28:19	0:0	4	=
water	28:21	0:0	4	0
decl	29:12	29:35	4	double	const_values[64]
decl	30:12	30:40	4	const char	*const_names[64]
if	31:12	32:43	4	(o_named && o_named -> type == AV_OPT_TYPE_CONST)
cond	31:16	31:44	5	o_named && o_named -> type == AV_OPT_TYPE_CONST
water	31:16	0:0	6	o_named
op	31:24	0:0	6	&&
water	31:27	0:0	6	o_named
op	31:34	0:0	6	->
water	31:36	0:0	6	type
op	31:41	0:0	6	==
water	31:44	0:0	6	AV_OPT_TYPE_CONST
stmts	32:16	32:43	5	
water	32:16	0:0	6	d
op	32:18	0:0	6	=
call	32:20	32:42	6	DEFAULT_NUMVAL
arg	32:35	32:42	7	o_named
water	32:35	0:0	8	o_named
water	32:43	0:0	6	;
else	33:12	66:12	4
stmts	33:17	66:12	5	
water	33:17	0:0	6	{
if	34:16	47:16	6	(o -> unit)
cond	34:20	34:23	7	o -> unit
water	34:20	0:0	8	o
op	34:21	0:0	8	->
water	34:23	0:0	8	unit
stmts	34:29	47:16	7	
water	34:29	0:0	8	{
for	35:20	46:20	8	(o_named = NULL ;o_named =av_opt_next (target_obj ,o_named );)
forinit	35:25	35:39	9	o_named = NULL ;
water	35:25	0:0	10	o_named
op	35:33	0:0	10	=
water	35:35	0:0	10	NULL
water	35:39	0:0	10	;
cond	35:41	35:82	9	o_named =av_opt_next (target_obj ,o_named )
water	35:41	0:0	10	o_named
op	35:49	0:0	10	=
call	35:51	35:82	10	av_opt_next
arg	35:63	35:73	11	target_obj
water	35:63	0:0	12	target_obj
arg	35:75	35:82	11	o_named
water	35:75	0:0	12	o_named
forexpr	0:0	0:0	9	
stmts	35:87	46:20	9	
water	35:87	0:0	10	{
if	36:24	45:24	10	(o_named -> type == AV_OPT_TYPE_CONST && o_named -> unit && !strcmp (o_named -> unit ,o -> unit ))
cond	36:28	38:58	11	o_named -> type == AV_OPT_TYPE_CONST && o_named -> unit && !strcmp (o_named -> unit ,o -> unit )
water	36:28	0:0	12	o_named
op	36:35	0:0	12	->
water	36:37	0:0	12	type
op	36:42	0:0	12	==
water	36:45	0:0	12	AV_OPT_TYPE_CONST
op	36:63	0:0	12	&&
water	37:28	0:0	12	o_named
op	37:35	0:0	12	->
water	37:37	0:0	12	unit
op	37:42	0:0	12	&&
op	38:28	0:0	12	!
call	38:29	38:58	12	strcmp
arg	38:36	38:49	13	o_named->unit
water	38:36	0:0	14	o_named
op	38:43	0:0	14	->
water	38:45	0:0	14	unit
arg	38:51	38:58	13	o->unit
water	38:51	0:0	14	o
op	38:52	0:0	14	->
water	38:54	0:0	14	unit
stmts	38:61	45:24	11	
water	38:61	0:0	12	{
if	39:28	42:28	12	(ci + 6 >=FF_ARRAY_ELEMS (const_values ))
cond	39:32	39:69	13	ci + 6 >=FF_ARRAY_ELEMS (const_values )
water	39:32	0:0	14	ci
op	39:35	0:0	14	+
water	39:37	0:0	14	6
op	39:39	0:0	14	>=
call	39:42	39:69	14	FF_ARRAY_ELEMS
arg	39:57	39:69	15	const_values
water	39:57	0:0	16	const_values
stmts	39:72	42:28	13	
water	39:72	0:0	14	{
call	40:32	40:106	14	av_log
arg	40:39	40:42	15	obj
water	40:39	0:0	16	obj
arg	40:44	40:56	15	AV_LOG_ERROR
water	40:44	0:0	16	AV_LOG_ERROR
arg	40:58	40:97	15	"const_values array too small for %s\n"
water	40:58	0:0	16	"const_values array too small for %s\n"
arg	40:99	40:106	15	o->unit
water	40:99	0:0	16	o
op	40:100	0:0	16	->
water	40:102	0:0	16	unit
water	40:107	0:0	14	;
return	41:32	41:59	14	AVERROR_PATCHWELCOME
water	41:39	0:0	15	AVERROR_PATCHWELCOME
water	42:28	0:0	14	}
water	43:28	0:0	12	const_names
op	43:40	0:0	12	[
water	43:41	0:0	12	ci
op	43:45	0:0	12	]
op	43:47	0:0	12	=
water	43:49	0:0	12	o_named
op	43:56	0:0	12	->
water	43:58	0:0	12	name
water	43:62	0:0	12	;
water	44:28	0:0	12	const_values
op	44:40	0:0	12	[
water	44:41	0:0	12	ci
op	44:43	0:0	12	++
op	44:45	0:0	12	]
op	44:47	0:0	12	=
call	44:49	44:71	12	DEFAULT_NUMVAL
arg	44:64	44:71	13	o_named
water	44:64	0:0	14	o_named
water	44:72	0:0	12	;
water	45:24	0:0	12	}
water	46:20	0:0	10	}
water	47:16	0:0	8	}
water	48:16	0:0	6	const_names
op	48:28	0:0	6	[
water	48:29	0:0	6	ci
op	48:33	0:0	6	]
op	48:35	0:0	6	=
water	48:37	0:0	6	"default"
water	48:46	0:0	6	;
water	49:16	0:0	6	const_values
op	49:28	0:0	6	[
water	49:29	0:0	6	ci
op	49:31	0:0	6	++
op	49:33	0:0	6	]
op	49:35	0:0	6	=
call	49:37	49:53	6	DEFAULT_NUMVAL
arg	49:52	49:53	7	o
water	49:52	0:0	8	o
water	49:54	0:0	6	;
water	50:16	0:0	6	const_names
op	50:28	0:0	6	[
water	50:29	0:0	6	ci
op	50:33	0:0	6	]
op	50:35	0:0	6	=
water	50:37	0:0	6	"max"
water	50:42	0:0	6	;
water	51:16	0:0	6	const_values
op	51:28	0:0	6	[
water	51:29	0:0	6	ci
op	51:31	0:0	6	++
op	51:33	0:0	6	]
op	51:35	0:0	6	=
water	51:37	0:0	6	o
op	51:38	0:0	6	->
water	51:40	0:0	6	max
water	51:43	0:0	6	;
water	52:16	0:0	6	const_names
op	52:28	0:0	6	[
water	52:29	0:0	6	ci
op	52:33	0:0	6	]
op	52:35	0:0	6	=
water	52:37	0:0	6	"min"
water	52:42	0:0	6	;
water	53:16	0:0	6	const_values
op	53:28	0:0	6	[
water	53:29	0:0	6	ci
op	53:31	0:0	6	++
op	53:33	0:0	6	]
op	53:35	0:0	6	=
water	53:37	0:0	6	o
op	53:38	0:0	6	->
water	53:40	0:0	6	min
water	53:43	0:0	6	;
water	54:16	0:0	6	const_names
op	54:28	0:0	6	[
water	54:29	0:0	6	ci
op	54:33	0:0	6	]
op	54:35	0:0	6	=
water	54:37	0:0	6	"none"
water	54:43	0:0	6	;
water	55:16	0:0	6	const_values
op	55:28	0:0	6	[
water	55:29	0:0	6	ci
op	55:31	0:0	6	++
op	55:33	0:0	6	]
op	55:35	0:0	6	=
water	55:37	0:0	6	0
water	55:38	0:0	6	;
water	56:16	0:0	6	const_names
op	56:28	0:0	6	[
water	56:29	0:0	6	ci
op	56:33	0:0	6	]
op	56:35	0:0	6	=
water	56:37	0:0	6	"all"
water	56:42	0:0	6	;
water	57:16	0:0	6	const_values
op	57:28	0:0	6	[
water	57:29	0:0	6	ci
op	57:31	0:0	6	++
op	57:33	0:0	6	]
op	57:35	0:0	6	=
water	57:37	0:0	6	~0
water	57:39	0:0	6	;
water	58:16	0:0	6	const_names
op	58:28	0:0	6	[
water	58:29	0:0	6	ci
op	58:31	0:0	6	]
op	58:33	0:0	6	=
water	58:35	0:0	6	NULL
water	58:39	0:0	6	;
water	59:16	0:0	6	const_values
op	59:28	0:0	6	[
water	59:29	0:0	6	ci
op	59:31	0:0	6	]
op	59:33	0:0	6	=
water	59:35	0:0	6	0
water	59:36	0:0	6	;
water	60:16	0:0	6	res
op	60:20	0:0	6	=
call	60:22	61:94	6	av_expr_parse_and_eval
arg	60:45	60:47	7	&d
op	60:45	0:0	8	&
water	60:46	0:0	8	d
arg	60:49	60:62	7	i?buf:val
water	60:49	0:0	8	i
water	60:51	0:0	8	?
water	60:53	0:0	8	buf
water	60:57	0:0	8	:
water	60:59	0:0	8	val
arg	60:64	60:75	7	const_names
water	60:64	0:0	8	const_names
arg	61:44	61:56	7	const_values
water	61:44	0:0	8	const_values
arg	61:58	61:62	7	NULL
water	61:58	0:0	8	NULL
arg	61:64	61:68	7	NULL
water	61:64	0:0	8	NULL
arg	61:70	61:74	7	NULL
water	61:70	0:0	8	NULL
arg	61:76	61:80	7	NULL
water	61:76	0:0	8	NULL
arg	61:82	61:86	7	NULL
water	61:82	0:0	8	NULL
arg	61:88	61:89	7	0
water	61:88	0:0	8	0
arg	61:91	61:94	7	obj
water	61:91	0:0	8	obj
water	61:95	0:0	6	;
if	62:16	65:16	6	(res < 0)
cond	62:20	62:26	7	res < 0
water	62:20	0:0	8	res
op	62:24	0:0	8	<
water	62:26	0:0	8	0
stmts	62:29	65:16	7	
water	62:29	0:0	8	{
call	63:20	63:90	8	av_log
arg	63:27	63:30	9	obj
water	63:27	0:0	10	obj
arg	63:32	63:44	9	AV_LOG_ERROR
water	63:32	0:0	10	AV_LOG_ERROR
arg	63:46	63:85	9	"Unable to parse option value \"%s\"\n"
water	63:46	0:0	10	"Unable to parse option value \"%s\"\n"
arg	63:87	63:90	9	val
water	63:87	0:0	10	val
water	63:91	0:0	8	;
return	64:20	64:30	8	res
water	64:27	0:0	9	res
water	65:16	0:0	8	}
water	66:12	0:0	6	}
water	67:8	0:0	4	}
if	68:8	72:8	4	(o -> type == AV_OPT_TYPE_FLAGS)
cond	68:12	68:23	5	o -> type == AV_OPT_TYPE_FLAGS
water	68:12	0:0	6	o
op	68:13	0:0	6	->
water	68:15	0:0	6	type
op	68:20	0:0	6	==
water	68:23	0:0	6	AV_OPT_TYPE_FLAGS
stmts	68:42	72:8	5	
water	68:42	0:0	6	{
call	69:12	69:51	6	read_number
arg	69:24	69:25	7	o
water	69:24	0:0	8	o
arg	69:27	69:30	7	dst
water	69:27	0:0	8	dst
arg	69:32	69:36	7	NULL
water	69:32	0:0	8	NULL
arg	69:38	69:42	7	NULL
water	69:38	0:0	8	NULL
arg	69:44	69:51	7	&intnum
op	69:44	0:0	8	&
water	69:45	0:0	8	intnum
water	69:52	0:0	6	;
if	70:12	70:56	6	(cmd == '+')
cond	70:21	70:28	7	cmd == '+'
water	70:21	0:0	8	cmd
op	70:25	0:0	8	==
water	70:28	0:0	8	'+'
stmts	70:33	70:56	7	
water	70:33	0:0	8	d
op	70:35	0:0	8	=
water	70:37	0:0	8	intnum
op	70:44	0:0	8	|
water	70:46	0:0	8	(
water	70:47	0:0	8	int64_t
water	70:54	0:0	8	)
water	70:55	0:0	8	d
water	70:56	0:0	8	;
else	71:12	71:56	6
stmts	71:17	71:56	7	
if	71:17	71:56	8	(cmd == '-')
cond	71:21	71:28	9	cmd == '-'
water	71:21	0:0	10	cmd
op	71:25	0:0	10	==
water	71:28	0:0	10	'-'
stmts	71:33	71:56	9	
water	71:33	0:0	10	d
op	71:35	0:0	10	=
water	71:37	0:0	10	intnum
op	71:44	0:0	10	&
op	71:45	0:0	10	~
water	71:46	0:0	10	(
water	71:47	0:0	10	int64_t
water	71:54	0:0	10	)
water	71:55	0:0	10	d
water	71:56	0:0	10	;
water	72:8	0:0	6	}
if	73:8	74:22	4	(( ret =write_number (obj ,o ,dst ,d ,1 ,1 ) ) < 0)
cond	73:12	73:57	5	( ret =write_number (obj ,o ,dst ,d ,1 ,1 ) ) < 0
water	73:12	0:0	6	(
water	73:13	0:0	6	ret
op	73:17	0:0	6	=
call	73:19	73:52	6	write_number
arg	73:32	73:35	7	obj
water	73:32	0:0	8	obj
arg	73:37	73:38	7	o
water	73:37	0:0	8	o
arg	73:40	73:43	7	dst
water	73:40	0:0	8	dst
arg	73:45	73:46	7	d
water	73:45	0:0	8	d
arg	73:48	73:49	7	1
water	73:48	0:0	8	1
arg	73:51	73:52	7	1
water	73:51	0:0	8	1
water	73:53	0:0	6	)
op	73:55	0:0	6	<
water	73:57	0:0	6	0
stmts	74:12	74:22	5	
return	74:12	74:22	6	ret
water	74:19	0:0	7	ret
water	75:8	0:0	4	val
op	75:12	0:0	4	+=
water	75:15	0:0	4	i
water	75:16	0:0	4	;
if	76:8	77:20	4	(! i || ! * val)
cond	76:12	76:20	5	! i || ! * val
op	76:12	0:0	6	!
water	76:13	0:0	6	i
op	76:15	0:0	6	||
op	76:18	0:0	6	!
op	76:19	0:0	6	*
water	76:20	0:0	6	val
stmts	77:12	77:20	5	
return	77:12	77:20	6	0
water	77:19	0:0	7	0
water	78:4	0:0	4	}
return	79:4	79:12	2	0
water	79:11	0:0	3	0
