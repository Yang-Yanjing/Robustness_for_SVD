func	1:0	55:0	0	static int	nut_read_packet
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
param	1:47	1:60	2	AVPacket *	pkt
stmnts	0:0	54:4	1	
decl	3:4	3:34	2	NUTContext	*nut
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*bc
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:36	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:36	2	int	frame_code
op	5:22	0:0	2	=
water	5:24	0:0	2	0
water	5:25	0:0	2	,
decl	5:4	5:36	2	int	ret
water	5:30	0:0	2	,
decl	5:4	5:36	2	int	skip
decl	6:4	6:24	2	int64_t	ts
water	6:14	0:0	2	,
decl	6:4	6:24	2	int64_t	back_ptr
for	7:4	54:4	2	(;;)
forinit	7:9	7:9	3	;
water	7:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	7:13	54:4	3	
water	7:13	0:0	4	{
decl	8:8	8:36	4	int64_t	pos
op	8:21	0:0	4	=
call	8:23	8:35	5	avio_tell
arg	8:33	8:35	6	bc
water	8:33	0:0	7	bc
decl	9:8	9:42	4	uint64_t	tmp
op	9:21	0:0	4	=
water	9:23	0:0	4	nut
op	9:26	0:0	4	->
water	9:28	0:0	4	next_startcode
water	10:8	0:0	4	nut
op	10:11	0:0	4	->
water	10:13	0:0	4	next_startcode
op	10:28	0:0	4	=
water	10:30	0:0	4	0
water	10:31	0:0	4	;
if	11:8	13:8	4	(tmp)
cond	11:12	11:12	5	tmp
water	11:12	0:0	6	tmp
stmts	11:17	13:8	5	
water	11:17	0:0	6	{
water	12:12	0:0	6	pos
op	12:16	0:0	6	-=
water	12:19	0:0	6	8
water	12:20	0:0	6	;
water	13:8	0:0	6	}
else	13:10	22:8	4
stmts	13:15	22:8	5	
water	13:15	0:0	6	{
water	14:12	0:0	6	frame_code
op	14:23	0:0	6	=
call	14:25	14:35	6	avio_r8
arg	14:33	14:35	7	bc
water	14:33	0:0	8	bc
water	14:36	0:0	6	;
if	15:12	16:34	6	(avio_feof (bc ))
cond	15:16	15:28	7	avio_feof (bc )
call	15:16	15:28	8	avio_feof
arg	15:26	15:28	9	bc
water	15:26	0:0	10	bc
stmts	16:16	16:34	7	
return	16:16	16:34	8	AVERROR_EOF
water	16:23	0:0	9	AVERROR_EOF
if	17:12	21:12	6	(frame_code == 'N')
cond	17:16	17:30	7	frame_code == 'N'
water	17:16	0:0	8	frame_code
op	17:27	0:0	8	==
water	17:30	0:0	8	'N'
stmts	17:35	21:12	7	
water	17:35	0:0	8	{
water	18:16	0:0	8	tmp
op	18:20	0:0	8	=
water	18:22	0:0	8	frame_code
water	18:32	0:0	8	;
for	19:16	20:50	8	(i = 1 ;i < 8;i ++)
forinit	19:21	19:26	9	i = 1 ;
water	19:21	0:0	10	i
op	19:23	0:0	10	=
water	19:25	0:0	10	1
water	19:26	0:0	10	;
cond	19:28	19:32	9	i < 8
water	19:28	0:0	10	i
op	19:30	0:0	10	<
water	19:32	0:0	10	8
forexpr	19:35	19:36	9	i ++
water	19:35	0:0	10	i
op	19:36	0:0	10	++
stmts	20:20	20:50	9	
water	20:20	0:0	10	tmp
op	20:24	0:0	10	=
water	20:26	0:0	10	(
water	20:27	0:0	10	tmp
op	20:31	0:0	10	<<
water	20:34	0:0	10	8
water	20:35	0:0	10	)
op	20:37	0:0	10	+
call	20:39	20:49	10	avio_r8
arg	20:47	20:49	11	bc
water	20:47	0:0	12	bc
water	20:50	0:0	10	;
water	21:12	0:0	8	}
water	22:8	0:0	6	}
switch	23:8	53:8	4	(tmp)
cond	23:16	23:16	5	tmp
water	23:16	0:0	6	tmp
stmts	23:21	53:8	5	
water	23:21	0:0	6	{
label	24:8	24:27	6	case MAIN_STARTCODE :
label	25:8	25:29	6	case STREAM_STARTCODE :
label	26:8	26:28	6	case INDEX_STARTCODE :
water	27:12	0:0	6	skip
op	27:17	0:0	6	=
call	27:19	27:51	6	get_packetheader
arg	27:36	27:39	7	nut
water	27:36	0:0	8	nut
arg	27:41	27:43	7	bc
water	27:41	0:0	8	bc
arg	27:45	27:46	7	0
water	27:45	0:0	8	0
arg	27:48	27:51	7	tmp
water	27:48	0:0	8	tmp
water	27:52	0:0	6	;
call	28:12	28:30	6	avio_skip
arg	28:22	28:24	7	bc
water	28:22	0:0	8	bc
arg	28:26	28:30	7	skip
water	28:26	0:0	8	skip
water	28:31	0:0	6	;
break	29:12	29:17	6	
label	30:8	30:27	6	case INFO_STARTCODE :
if	31:12	32:27	6	(decode_info_header (nut ) < 0)
cond	31:16	31:42	7	decode_info_header (nut ) < 0
call	31:16	31:38	8	decode_info_header
arg	31:35	31:38	9	nut
water	31:35	0:0	10	nut
op	31:40	0:0	8	<
water	31:42	0:0	8	0
stmts	32:16	32:27	7	
goto	32:16	32:27	8	resync
water	32:21	0:0	9	resync
break	33:12	33:17	6	
label	34:8	34:32	6	case SYNCPOINT_STARTCODE :
if	35:12	36:27	6	(decode_syncpoint (nut ,& ts ,& back_ptr ) < 0)
cond	35:16	35:56	7	decode_syncpoint (nut ,& ts ,& back_ptr ) < 0
call	35:16	35:52	8	decode_syncpoint
arg	35:33	35:36	9	nut
water	35:33	0:0	10	nut
arg	35:38	35:41	9	&ts
op	35:38	0:0	10	&
water	35:39	0:0	10	ts
arg	35:43	35:52	9	&back_ptr
op	35:43	0:0	10	&
water	35:44	0:0	10	back_ptr
op	35:54	0:0	8	<
water	35:56	0:0	8	0
stmts	36:16	36:27	7	
goto	36:16	36:27	8	resync
water	36:21	0:0	9	resync
water	37:12	0:0	6	frame_code
op	37:23	0:0	6	=
call	37:25	37:35	6	avio_r8
arg	37:33	37:35	7	bc
water	37:33	0:0	8	bc
water	37:36	0:0	6	;
label	38:8	38:14	6	case 0 :
water	39:12	0:0	6	ret
op	39:16	0:0	6	=
call	39:18	39:51	6	decode_frame
arg	39:31	39:34	7	nut
water	39:31	0:0	8	nut
arg	39:36	39:39	7	pkt
water	39:36	0:0	8	pkt
arg	39:41	39:51	7	frame_code
water	39:41	0:0	8	frame_code
water	39:52	0:0	6	;
if	40:12	41:24	6	(ret == 0)
cond	40:16	40:23	7	ret == 0
water	40:16	0:0	8	ret
op	40:20	0:0	8	==
water	40:23	0:0	8	0
stmts	41:16	41:24	7	
return	41:16	41:24	8	0
water	41:23	0:0	9	0
else	42:12	43:21	6
stmts	42:17	43:21	7	
if	42:17	43:21	8	(ret == 1)
cond	42:21	42:28	9	ret == 1
water	42:21	0:0	10	ret
op	42:25	0:0	10	==
water	42:28	0:0	10	1
stmts	43:16	43:21	9	
break	43:16	43:21	10	
label	44:8	44:15	6	default :
label	45:0	45:6	6	resync :
call	46:12	46:67	6	av_log
arg	46:19	46:20	7	s
water	46:19	0:0	8	s
arg	46:22	46:34	7	AV_LOG_DEBUG
water	46:22	0:0	8	AV_LOG_DEBUG
arg	46:36	46:62	7	"syncing from %"PRId64"\n"
water	46:36	0:0	8	"syncing from %"
water	46:52	0:0	8	PRId64
water	46:58	0:0	8	"\n"
arg	46:64	46:67	7	pos
water	46:64	0:0	8	pos
water	46:68	0:0	6	;
water	47:12	0:0	6	tmp
op	47:16	0:0	6	=
call	47:18	47:97	6	find_any_startcode
arg	47:37	47:39	7	bc
water	47:37	0:0	8	bc
arg	47:41	47:97	7	FFMAX(nut->last_syncpoint_pos,nut->last_resync_pos)+1
call	47:41	47:92	8	FFMAX
arg	47:47	47:70	9	nut->last_syncpoint_pos
water	47:47	0:0	10	nut
op	47:50	0:0	10	->
water	47:52	0:0	10	last_syncpoint_pos
arg	47:72	47:92	9	nut->last_resync_pos
water	47:72	0:0	10	nut
op	47:75	0:0	10	->
water	47:77	0:0	10	last_resync_pos
op	47:94	0:0	8	+
water	47:96	0:0	8	1
water	47:98	0:0	6	;
water	48:12	0:0	6	nut
op	48:15	0:0	6	->
water	48:17	0:0	6	last_resync_pos
op	48:33	0:0	6	=
call	48:35	48:47	6	avio_tell
arg	48:45	48:47	7	bc
water	48:45	0:0	8	bc
water	48:48	0:0	6	;
if	49:12	50:42	6	(tmp == 0)
cond	49:16	49:23	7	tmp == 0
water	49:16	0:0	8	tmp
op	49:20	0:0	8	==
water	49:23	0:0	8	0
stmts	50:16	50:42	7	
return	50:16	50:42	8	AVERROR_INVALIDDATA
water	50:23	0:0	9	AVERROR_INVALIDDATA
call	51:12	51:44	6	av_log
arg	51:19	51:20	7	s
water	51:19	0:0	8	s
arg	51:22	51:34	7	AV_LOG_DEBUG
water	51:22	0:0	8	AV_LOG_DEBUG
arg	51:36	51:44	7	"sync\n"
water	51:36	0:0	8	"sync\n"
water	51:45	0:0	6	;
water	52:12	0:0	6	nut
op	52:15	0:0	6	->
water	52:17	0:0	6	next_startcode
op	52:32	0:0	6	=
water	52:34	0:0	6	tmp
water	52:37	0:0	6	;
water	53:8	0:0	6	}
water	54:4	0:0	4	}
