func	1:0	52:0	0	static void	stream_component_close
params	1:34	0:0	1	
param	1:35	1:49	2	VideoState *	is
param	1:51	1:67	2	int	stream_index
stmnts	0:0	51:4	1	
decl	3:4	3:32	2	AVFormatContext	*ic
op	3:24	0:0	2	=
water	3:26	0:0	2	is
op	3:28	0:0	2	->
water	3:30	0:0	2	ic
decl	4:4	4:31	2	AVCodecParameters	*codecpar
if	5:4	6:14	2	(stream_index < 0 || stream_index >= ic -> nb_streams)
cond	5:8	5:48	3	stream_index < 0 || stream_index >= ic -> nb_streams
water	5:8	0:0	4	stream_index
op	5:21	0:0	4	<
water	5:23	0:0	4	0
op	5:25	0:0	4	||
water	5:28	0:0	4	stream_index
op	5:41	0:0	4	>=
water	5:44	0:0	4	ic
op	5:46	0:0	4	->
water	5:48	0:0	4	nb_streams
stmts	6:8	6:14	3	
return	6:8	6:14	4	
water	7:4	0:0	2	codecpar
op	7:13	0:0	2	=
water	7:15	0:0	2	ic
op	7:17	0:0	2	->
water	7:19	0:0	2	streams
op	7:26	0:0	2	[
water	7:27	0:0	2	stream_index
op	7:39	0:0	2	]
op	7:40	0:0	2	->
water	7:42	0:0	2	codecpar
water	7:50	0:0	2	;
switch	8:4	34:4	2	(codecpar -> codec_type)
cond	8:12	8:22	3	codecpar -> codec_type
water	8:12	0:0	4	codecpar
op	8:20	0:0	4	->
water	8:22	0:0	4	codec_type
stmts	8:34	34:4	3	
water	8:34	0:0	4	{
label	9:4	9:27	4	case AVMEDIA_TYPE_AUDIO :
call	10:8	10:45	4	decoder_abort
arg	10:22	10:33	5	&is->auddec
op	10:22	0:0	6	&
water	10:23	0:0	6	is
op	10:25	0:0	6	->
water	10:27	0:0	6	auddec
arg	10:35	10:45	5	&is->sampq
op	10:35	0:0	6	&
water	10:36	0:0	6	is
op	10:38	0:0	6	->
water	10:40	0:0	6	sampq
water	10:46	0:0	4	;
call	11:8	11:23	4	SDL_CloseAudio
water	11:24	0:0	4	;
call	12:8	12:35	4	decoder_destroy
arg	12:24	12:35	5	&is->auddec
op	12:24	0:0	6	&
water	12:25	0:0	6	is
op	12:27	0:0	6	->
water	12:29	0:0	6	auddec
water	12:36	0:0	4	;
call	13:8	13:29	4	swr_free
arg	13:17	13:29	5	&is->swr_ctx
op	13:17	0:0	6	&
water	13:18	0:0	6	is
op	13:20	0:0	6	->
water	13:22	0:0	6	swr_ctx
water	13:30	0:0	4	;
call	14:8	14:32	4	av_freep
arg	14:17	14:32	5	&is->audio_buf1
op	14:17	0:0	6	&
water	14:18	0:0	6	is
op	14:20	0:0	6	->
water	14:22	0:0	6	audio_buf1
water	14:33	0:0	4	;
water	15:8	0:0	4	is
op	15:10	0:0	4	->
water	15:12	0:0	4	audio_buf1_size
op	15:28	0:0	4	=
water	15:30	0:0	4	0
water	15:31	0:0	4	;
water	16:8	0:0	4	is
op	16:10	0:0	4	->
water	16:12	0:0	4	audio_buf
op	16:22	0:0	4	=
water	16:24	0:0	4	NULL
water	16:28	0:0	4	;
if	17:8	22:8	4	(is -> rdft)
cond	17:12	17:16	5	is -> rdft
water	17:12	0:0	6	is
op	17:14	0:0	6	->
water	17:16	0:0	6	rdft
stmts	17:22	22:8	5	
water	17:22	0:0	6	{
call	18:12	18:32	6	av_rdft_end
arg	18:24	18:32	7	is->rdft
water	18:24	0:0	8	is
op	18:26	0:0	8	->
water	18:28	0:0	8	rdft
water	18:33	0:0	6	;
call	19:12	19:35	6	av_freep
arg	19:21	19:35	7	&is->rdft_data
op	19:21	0:0	8	&
water	19:22	0:0	8	is
op	19:24	0:0	8	->
water	19:26	0:0	8	rdft_data
water	19:36	0:0	6	;
water	20:12	0:0	6	is
op	20:14	0:0	6	->
water	20:16	0:0	6	rdft
op	20:21	0:0	6	=
water	20:23	0:0	6	NULL
water	20:27	0:0	6	;
water	21:12	0:0	6	is
op	21:14	0:0	6	->
water	21:16	0:0	6	rdft_bits
op	21:26	0:0	6	=
water	21:28	0:0	6	0
water	21:29	0:0	6	;
water	22:8	0:0	6	}
break	23:8	23:13	4	
label	24:4	24:27	4	case AVMEDIA_TYPE_VIDEO :
call	25:8	25:45	4	decoder_abort
arg	25:22	25:33	5	&is->viddec
op	25:22	0:0	6	&
water	25:23	0:0	6	is
op	25:25	0:0	6	->
water	25:27	0:0	6	viddec
arg	25:35	25:45	5	&is->pictq
op	25:35	0:0	6	&
water	25:36	0:0	6	is
op	25:38	0:0	6	->
water	25:40	0:0	6	pictq
water	25:46	0:0	4	;
call	26:8	26:35	4	decoder_destroy
arg	26:24	26:35	5	&is->viddec
op	26:24	0:0	6	&
water	26:25	0:0	6	is
op	26:27	0:0	6	->
water	26:29	0:0	6	viddec
water	26:36	0:0	4	;
break	27:8	27:13	4	
label	28:4	28:30	4	case AVMEDIA_TYPE_SUBTITLE :
call	29:8	29:45	4	decoder_abort
arg	29:22	29:33	5	&is->subdec
op	29:22	0:0	6	&
water	29:23	0:0	6	is
op	29:25	0:0	6	->
water	29:27	0:0	6	subdec
arg	29:35	29:45	5	&is->subpq
op	29:35	0:0	6	&
water	29:36	0:0	6	is
op	29:38	0:0	6	->
water	29:40	0:0	6	subpq
water	29:46	0:0	4	;
call	30:8	30:35	4	decoder_destroy
arg	30:24	30:35	5	&is->subdec
op	30:24	0:0	6	&
water	30:25	0:0	6	is
op	30:27	0:0	6	->
water	30:29	0:0	6	subdec
water	30:36	0:0	4	;
break	31:8	31:13	4	
label	32:4	32:11	4	default :
break	33:8	33:13	4	
water	34:4	0:0	4	}
water	35:4	0:0	2	ic
op	35:6	0:0	2	->
water	35:8	0:0	2	streams
op	35:15	0:0	2	[
water	35:16	0:0	2	stream_index
op	35:28	0:0	2	]
op	35:29	0:0	2	->
water	35:31	0:0	2	discard
op	35:39	0:0	2	=
water	35:41	0:0	2	AVDISCARD_ALL
water	35:54	0:0	2	;
switch	36:4	51:4	2	(codecpar -> codec_type)
cond	36:12	36:22	3	codecpar -> codec_type
water	36:12	0:0	4	codecpar
op	36:20	0:0	4	->
water	36:22	0:0	4	codec_type
stmts	36:34	51:4	3	
water	36:34	0:0	4	{
label	37:4	37:27	4	case AVMEDIA_TYPE_AUDIO :
water	38:8	0:0	4	is
op	38:10	0:0	4	->
water	38:12	0:0	4	audio_st
op	38:21	0:0	4	=
water	38:23	0:0	4	NULL
water	38:27	0:0	4	;
water	39:8	0:0	4	is
op	39:10	0:0	4	->
water	39:12	0:0	4	audio_stream
op	39:25	0:0	4	=
op	39:27	0:0	4	-
water	39:28	0:0	4	1
water	39:29	0:0	4	;
break	40:8	40:13	4	
label	41:4	41:27	4	case AVMEDIA_TYPE_VIDEO :
water	42:8	0:0	4	is
op	42:10	0:0	4	->
water	42:12	0:0	4	video_st
op	42:21	0:0	4	=
water	42:23	0:0	4	NULL
water	42:27	0:0	4	;
water	43:8	0:0	4	is
op	43:10	0:0	4	->
water	43:12	0:0	4	video_stream
op	43:25	0:0	4	=
op	43:27	0:0	4	-
water	43:28	0:0	4	1
water	43:29	0:0	4	;
break	44:8	44:13	4	
label	45:4	45:30	4	case AVMEDIA_TYPE_SUBTITLE :
water	46:8	0:0	4	is
op	46:10	0:0	4	->
water	46:12	0:0	4	subtitle_st
op	46:24	0:0	4	=
water	46:26	0:0	4	NULL
water	46:30	0:0	4	;
water	47:8	0:0	4	is
op	47:10	0:0	4	->
water	47:12	0:0	4	subtitle_stream
op	47:28	0:0	4	=
op	47:30	0:0	4	-
water	47:31	0:0	4	1
water	47:32	0:0	4	;
break	48:8	48:13	4	
label	49:4	49:11	4	default :
break	50:8	50:13	4	
water	51:4	0:0	4	}
