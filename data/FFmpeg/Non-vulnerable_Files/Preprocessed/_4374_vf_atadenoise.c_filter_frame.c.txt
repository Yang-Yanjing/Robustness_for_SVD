func	1:0	57:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:58	2	AVFrame *	buf
stmnts	0:0	56:40	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:43	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	outputs
op	4:40	0:0	2	[
water	4:41	0:0	2	0
op	4:42	0:0	2	]
decl	5:4	5:36	2	ATADenoiseContext	*s
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	priv
decl	6:4	6:21	2	AVFrame	*out
water	6:16	0:0	2	,
decl	6:4	6:21	2	AVFrame	*in
decl	7:4	7:9	2	int	i
if	8:4	22:4	2	(s -> q . available != s -> size)
cond	8:8	8:29	3	s -> q . available != s -> size
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	q
op	8:12	0:0	4	.
water	8:13	0:0	4	available
op	8:23	0:0	4	!=
water	8:26	0:0	4	s
op	8:27	0:0	4	->
water	8:29	0:0	4	size
stmts	8:35	22:4	3	
water	8:35	0:0	4	{
if	9:8	16:8	4	(s -> q . available < s -> mid)
cond	9:12	9:32	5	s -> q . available < s -> mid
water	9:12	0:0	6	s
op	9:13	0:0	6	->
water	9:15	0:0	6	q
op	9:16	0:0	6	.
water	9:17	0:0	6	available
op	9:27	0:0	6	<
water	9:29	0:0	6	s
op	9:30	0:0	6	->
water	9:32	0:0	6	mid
stmts	9:37	16:8	5	
water	9:37	0:0	6	{
water	10:12	0:0	6	out
op	10:16	0:0	6	=
call	10:18	10:69	6	ff_get_video_buffer
arg	10:38	10:45	7	outlink
water	10:38	0:0	8	outlink
arg	10:47	10:57	7	outlink->w
water	10:47	0:0	8	outlink
op	10:54	0:0	8	->
water	10:56	0:0	8	w
arg	10:59	10:69	7	outlink->h
water	10:59	0:0	8	outlink
op	10:66	0:0	8	->
water	10:68	0:0	8	h
water	10:70	0:0	6	;
if	11:12	12:38	6	(! out)
cond	11:16	11:17	7	! out
op	11:16	0:0	8	!
water	11:17	0:0	8	out
stmts	12:16	12:38	7	
return	12:16	12:38	8	AVERROR(ENOMEM)
call	12:23	12:37	9	AVERROR
arg	12:31	12:37	10	ENOMEM
water	12:31	0:0	11	ENOMEM
for	13:12	14:64	6	(i = 0 ;i < s -> mid;i ++)
forinit	13:17	13:22	7	i = 0 ;
water	13:17	0:0	8	i
op	13:19	0:0	8	=
water	13:21	0:0	8	0
water	13:22	0:0	8	;
cond	13:24	13:31	7	i < s -> mid
water	13:24	0:0	8	i
op	13:26	0:0	8	<
water	13:28	0:0	8	s
op	13:29	0:0	8	->
water	13:31	0:0	8	mid
forexpr	13:36	13:37	7	i ++
water	13:36	0:0	8	i
op	13:37	0:0	8	++
stmts	14:16	14:64	7	
call	14:16	14:63	8	ff_bufqueue_add
arg	14:32	14:35	9	ctx
water	14:32	0:0	10	ctx
arg	14:37	14:42	9	&s->q
op	14:37	0:0	10	&
water	14:38	0:0	10	s
op	14:39	0:0	10	->
water	14:41	0:0	10	q
arg	14:44	14:63	9	av_frame_clone(out)
call	14:44	14:62	10	av_frame_clone
arg	14:59	14:62	11	out
water	14:59	0:0	12	out
water	14:64	0:0	8	;
call	15:12	15:30	6	av_frame_free
arg	15:26	15:30	7	&out
op	15:26	0:0	8	&
water	15:27	0:0	8	out
water	15:31	0:0	6	;
water	16:8	0:0	6	}
if	17:8	20:8	4	(s -> q . available < s -> size)
cond	17:12	17:32	5	s -> q . available < s -> size
water	17:12	0:0	6	s
op	17:13	0:0	6	->
water	17:15	0:0	6	q
op	17:16	0:0	6	.
water	17:17	0:0	6	available
op	17:27	0:0	6	<
water	17:29	0:0	6	s
op	17:30	0:0	6	->
water	17:32	0:0	6	size
stmts	17:38	20:8	5	
water	17:38	0:0	6	{
call	18:12	18:43	6	ff_bufqueue_add
arg	18:28	18:31	7	ctx
water	18:28	0:0	8	ctx
arg	18:33	18:38	7	&s->q
op	18:33	0:0	8	&
water	18:34	0:0	8	s
op	18:35	0:0	8	->
water	18:37	0:0	8	q
arg	18:40	18:43	7	buf
water	18:40	0:0	8	buf
water	18:44	0:0	6	;
water	19:12	0:0	6	s
op	19:13	0:0	6	->
water	19:15	0:0	6	available
op	19:24	0:0	6	++
water	19:26	0:0	6	;
water	20:8	0:0	6	}
return	21:8	21:16	4	0
water	21:15	0:0	5	0
water	22:4	0:0	4	}
water	23:4	0:0	2	in
op	23:7	0:0	2	=
call	23:9	23:39	2	ff_bufqueue_peek
arg	23:26	23:31	3	&s->q
op	23:26	0:0	4	&
water	23:27	0:0	4	s
op	23:28	0:0	4	->
water	23:30	0:0	4	q
arg	23:33	23:39	3	s->mid
water	23:33	0:0	4	s
op	23:34	0:0	4	->
water	23:36	0:0	4	mid
water	23:40	0:0	2	;
if	24:4	46:4	2	(! ctx -> is_disabled)
cond	24:8	24:14	3	! ctx -> is_disabled
op	24:8	0:0	4	!
water	24:9	0:0	4	ctx
op	24:12	0:0	4	->
water	24:14	0:0	4	is_disabled
stmts	24:27	46:4	3	
water	24:27	0:0	4	{
decl	25:8	25:21	4	ThreadData	td
water	26:8	0:0	4	out
op	26:12	0:0	4	=
call	26:14	26:65	4	ff_get_video_buffer
arg	26:34	26:41	5	outlink
water	26:34	0:0	6	outlink
arg	26:43	26:53	5	outlink->w
water	26:43	0:0	6	outlink
op	26:50	0:0	6	->
water	26:52	0:0	6	w
arg	26:55	26:65	5	outlink->h
water	26:55	0:0	6	outlink
op	26:62	0:0	6	->
water	26:64	0:0	6	h
water	26:66	0:0	4	;
if	27:8	30:8	4	(! out)
cond	27:12	27:13	5	! out
op	27:12	0:0	6	!
water	27:13	0:0	6	out
stmts	27:18	30:8	5	
water	27:18	0:0	6	{
call	28:12	28:30	6	av_frame_free
arg	28:26	28:30	7	&buf
op	28:26	0:0	8	&
water	28:27	0:0	8	buf
water	28:31	0:0	6	;
return	29:12	29:34	6	AVERROR(ENOMEM)
call	29:19	29:33	7	AVERROR
arg	29:27	29:33	8	ENOMEM
water	29:27	0:0	9	ENOMEM
water	30:8	0:0	6	}
for	31:8	39:8	4	(i = 0 ;i < s -> size;i ++)
forinit	31:13	31:18	5	i = 0 ;
water	31:13	0:0	6	i
op	31:15	0:0	6	=
water	31:17	0:0	6	0
water	31:18	0:0	6	;
cond	31:20	31:27	5	i < s -> size
water	31:20	0:0	6	i
op	31:22	0:0	6	<
water	31:24	0:0	6	s
op	31:25	0:0	6	->
water	31:27	0:0	6	size
forexpr	31:33	31:34	5	i ++
water	31:33	0:0	6	i
op	31:34	0:0	6	++
stmts	31:38	39:8	5	
water	31:38	0:0	6	{
decl	32:12	32:55	6	AVFrame	*frame
op	32:27	0:0	6	=
call	32:29	32:54	7	ff_bufqueue_peek
arg	32:46	32:51	8	&s->q
op	32:46	0:0	9	&
water	32:47	0:0	9	s
op	32:48	0:0	9	->
water	32:50	0:0	9	q
arg	32:53	32:54	8	i
water	32:53	0:0	9	i
water	33:12	0:0	6	s
op	33:13	0:0	6	->
water	33:15	0:0	6	data
op	33:19	0:0	6	[
water	33:20	0:0	6	0
op	33:21	0:0	6	]
op	33:22	0:0	6	[
water	33:23	0:0	6	i
op	33:24	0:0	6	]
op	33:26	0:0	6	=
water	33:28	0:0	6	frame
op	33:33	0:0	6	->
water	33:35	0:0	6	data
op	33:39	0:0	6	[
water	33:40	0:0	6	0
op	33:41	0:0	6	]
water	33:42	0:0	6	;
water	34:12	0:0	6	s
op	34:13	0:0	6	->
water	34:15	0:0	6	data
op	34:19	0:0	6	[
water	34:20	0:0	6	1
op	34:21	0:0	6	]
op	34:22	0:0	6	[
water	34:23	0:0	6	i
op	34:24	0:0	6	]
op	34:26	0:0	6	=
water	34:28	0:0	6	frame
op	34:33	0:0	6	->
water	34:35	0:0	6	data
op	34:39	0:0	6	[
water	34:40	0:0	6	1
op	34:41	0:0	6	]
water	34:42	0:0	6	;
water	35:12	0:0	6	s
op	35:13	0:0	6	->
water	35:15	0:0	6	data
op	35:19	0:0	6	[
water	35:20	0:0	6	2
op	35:21	0:0	6	]
op	35:22	0:0	6	[
water	35:23	0:0	6	i
op	35:24	0:0	6	]
op	35:26	0:0	6	=
water	35:28	0:0	6	frame
op	35:33	0:0	6	->
water	35:35	0:0	6	data
op	35:39	0:0	6	[
water	35:40	0:0	6	2
op	35:41	0:0	6	]
water	35:42	0:0	6	;
water	36:12	0:0	6	s
op	36:13	0:0	6	->
water	36:15	0:0	6	linesize
op	36:23	0:0	6	[
water	36:24	0:0	6	0
op	36:25	0:0	6	]
op	36:26	0:0	6	[
water	36:27	0:0	6	i
op	36:28	0:0	6	]
op	36:30	0:0	6	=
water	36:32	0:0	6	frame
op	36:37	0:0	6	->
water	36:39	0:0	6	linesize
op	36:47	0:0	6	[
water	36:48	0:0	6	0
op	36:49	0:0	6	]
water	36:50	0:0	6	;
water	37:12	0:0	6	s
op	37:13	0:0	6	->
water	37:15	0:0	6	linesize
op	37:23	0:0	6	[
water	37:24	0:0	6	1
op	37:25	0:0	6	]
op	37:26	0:0	6	[
water	37:27	0:0	6	i
op	37:28	0:0	6	]
op	37:30	0:0	6	=
water	37:32	0:0	6	frame
op	37:37	0:0	6	->
water	37:39	0:0	6	linesize
op	37:47	0:0	6	[
water	37:48	0:0	6	1
op	37:49	0:0	6	]
water	37:50	0:0	6	;
water	38:12	0:0	6	s
op	38:13	0:0	6	->
water	38:15	0:0	6	linesize
op	38:23	0:0	6	[
water	38:24	0:0	6	2
op	38:25	0:0	6	]
op	38:26	0:0	6	[
water	38:27	0:0	6	i
op	38:28	0:0	6	]
op	38:30	0:0	6	=
water	38:32	0:0	6	frame
op	38:37	0:0	6	->
water	38:39	0:0	6	linesize
op	38:47	0:0	6	[
water	38:48	0:0	6	2
op	38:49	0:0	6	]
water	38:50	0:0	6	;
water	39:8	0:0	6	}
water	40:8	0:0	4	td
op	40:10	0:0	4	.
water	40:11	0:0	4	in
op	40:14	0:0	4	=
water	40:16	0:0	4	in
water	40:18	0:0	4	;
water	40:20	0:0	4	td
op	40:22	0:0	4	.
water	40:23	0:0	4	out
op	40:27	0:0	4	=
water	40:29	0:0	4	out
water	40:32	0:0	4	;
call	41:8	44:61	4	ctx->internal->execute
arg	41:31	41:34	5	ctx
water	41:31	0:0	6	ctx
arg	41:36	41:51	5	s->filter_slice
water	41:36	0:0	6	s
op	41:37	0:0	6	->
water	41:39	0:0	6	filter_slice
arg	41:53	41:56	5	&td
op	41:53	0:0	6	&
water	41:54	0:0	6	td
arg	41:58	41:62	5	NULL
water	41:58	0:0	6	NULL
arg	42:31	44:61	5	FFMIN3(s->planeheight[1],s->planeheight[2],ctx->graph->nb_threads)
call	42:31	44:60	6	FFMIN3
arg	42:38	42:55	7	s->planeheight[1]
water	42:38	0:0	8	s
op	42:39	0:0	8	->
water	42:41	0:0	8	planeheight
op	42:52	0:0	8	[
water	42:53	0:0	8	1
op	42:54	0:0	8	]
arg	43:38	43:55	7	s->planeheight[2]
water	43:38	0:0	8	s
op	43:39	0:0	8	->
water	43:41	0:0	8	planeheight
op	43:52	0:0	8	[
water	43:53	0:0	8	2
op	43:54	0:0	8	]
arg	44:38	44:60	7	ctx->graph->nb_threads
water	44:38	0:0	8	ctx
op	44:41	0:0	8	->
water	44:43	0:0	8	graph
op	44:48	0:0	8	->
water	44:50	0:0	8	nb_threads
water	44:62	0:0	4	;
call	45:8	45:35	4	av_frame_copy_props
arg	45:28	45:31	5	out
water	45:28	0:0	6	out
arg	45:33	45:35	5	in
water	45:33	0:0	6	in
water	45:36	0:0	4	;
water	46:4	0:0	4	}
else	46:6	52:4	2
stmts	46:11	52:4	3	
water	46:11	0:0	4	{
water	47:8	0:0	4	out
op	47:12	0:0	4	=
call	47:14	47:31	4	av_frame_clone
arg	47:29	47:31	5	in
water	47:29	0:0	6	in
water	47:32	0:0	4	;
if	48:8	51:8	4	(! out)
cond	48:12	48:13	5	! out
op	48:12	0:0	6	!
water	48:13	0:0	6	out
stmts	48:18	51:8	5	
water	48:18	0:0	6	{
call	49:12	49:30	6	av_frame_free
arg	49:26	49:30	7	&buf
op	49:26	0:0	8	&
water	49:27	0:0	8	buf
water	49:31	0:0	6	;
return	50:12	50:34	6	AVERROR(ENOMEM)
call	50:19	50:33	7	AVERROR
arg	50:27	50:33	8	ENOMEM
water	50:27	0:0	9	ENOMEM
water	51:8	0:0	6	}
water	52:4	0:0	4	}
water	53:4	0:0	2	in
op	53:7	0:0	2	=
call	53:9	53:30	2	ff_bufqueue_get
arg	53:25	53:30	3	&s->q
op	53:25	0:0	4	&
water	53:26	0:0	4	s
op	53:27	0:0	4	->
water	53:29	0:0	4	q
water	53:31	0:0	2	;
call	54:4	54:21	2	av_frame_free
arg	54:18	54:21	3	&in
op	54:18	0:0	4	&
water	54:19	0:0	4	in
water	54:22	0:0	2	;
call	55:4	55:35	2	ff_bufqueue_add
arg	55:20	55:23	3	ctx
water	55:20	0:0	4	ctx
arg	55:25	55:30	3	&s->q
op	55:25	0:0	4	&
water	55:26	0:0	4	s
op	55:27	0:0	4	->
water	55:29	0:0	4	q
arg	55:32	55:35	3	buf
water	55:32	0:0	4	buf
water	55:36	0:0	2	;
return	56:4	56:40	2	ff_filter_frame(outlink,out)
call	56:11	56:39	3	ff_filter_frame
arg	56:27	56:34	4	outlink
water	56:27	0:0	5	outlink
arg	56:36	56:39	4	out
water	56:36	0:0	5	out
