func	1:0	72:0	0	int	av_lzo1x_decode
params	1:19	0:0	1	
param	1:20	1:29	2	void *	out
param	1:31	1:42	2	int *	outlen
param	1:44	1:58	2	const void *	in
param	1:60	1:70	2	int *	inlen
stmnts	0:0	71:18	1	
decl	3:4	3:17	2	int	state
op	3:14	0:0	2	=
water	3:16	0:0	2	0
decl	4:4	4:9	2	int	x
decl	5:4	5:16	2	LZOContext	c
if	6:4	13:4	2	(* outlen <= 0 || * inlen <= 0)
cond	6:8	6:34	3	* outlen <= 0 || * inlen <= 0
op	6:8	0:0	4	*
water	6:9	0:0	4	outlen
op	6:16	0:0	4	<=
water	6:19	0:0	4	0
op	6:21	0:0	4	||
op	6:24	0:0	4	*
water	6:25	0:0	4	inlen
op	6:31	0:0	4	<=
water	6:34	0:0	4	0
stmts	6:37	13:4	3	
water	6:37	0:0	4	{
decl	7:8	7:19	4	int	res
op	7:16	0:0	4	=
water	7:18	0:0	4	0
if	8:8	9:37	4	(* outlen <= 0)
cond	8:12	8:23	5	* outlen <= 0
op	8:12	0:0	6	*
water	8:13	0:0	6	outlen
op	8:20	0:0	6	<=
water	8:23	0:0	6	0
stmts	9:12	9:37	5	
water	9:12	0:0	6	res
op	9:16	0:0	6	|=
water	9:19	0:0	6	AV_LZO_OUTPUT_FULL
water	9:37	0:0	6	;
if	10:8	11:40	4	(* inlen <= 0)
cond	10:12	10:22	5	* inlen <= 0
op	10:12	0:0	6	*
water	10:13	0:0	6	inlen
op	10:19	0:0	6	<=
water	10:22	0:0	6	0
stmts	11:12	11:40	5	
water	11:12	0:0	6	res
op	11:16	0:0	6	|=
water	11:19	0:0	6	AV_LZO_INPUT_DEPLETED
water	11:40	0:0	6	;
return	12:8	12:18	4	res
water	12:15	0:0	5	res
water	13:4	0:0	4	}
water	14:4	0:0	2	c
op	14:5	0:0	2	.
water	14:6	0:0	2	in
op	14:14	0:0	2	=
water	14:16	0:0	2	in
water	14:18	0:0	2	;
water	15:4	0:0	2	c
op	15:5	0:0	2	.
water	15:6	0:0	2	in_end
op	15:14	0:0	2	=
water	15:16	0:0	2	(
water	15:17	0:0	2	const
water	15:23	0:0	2	uint8_t
op	15:31	0:0	2	*
water	15:32	0:0	2	)
water	15:33	0:0	2	in
op	15:36	0:0	2	+
op	15:38	0:0	2	*
water	15:39	0:0	2	inlen
water	15:44	0:0	2	;
water	16:4	0:0	2	c
op	16:5	0:0	2	.
water	16:6	0:0	2	out
op	16:14	0:0	2	=
water	16:16	0:0	2	c
op	16:17	0:0	2	.
water	16:18	0:0	2	out_start
op	16:28	0:0	2	=
water	16:30	0:0	2	out
water	16:33	0:0	2	;
water	17:4	0:0	2	c
op	17:5	0:0	2	.
water	17:6	0:0	2	out_end
op	17:14	0:0	2	=
water	17:16	0:0	2	(
water	17:17	0:0	2	uint8_t
op	17:25	0:0	2	*
water	17:26	0:0	2	)
water	17:27	0:0	2	out
op	17:31	0:0	2	+
op	17:33	0:0	2	*
water	17:34	0:0	2	outlen
water	17:40	0:0	2	;
water	18:4	0:0	2	c
op	18:5	0:0	2	.
water	18:6	0:0	2	error
op	18:14	0:0	2	=
water	18:16	0:0	2	0
water	18:17	0:0	2	;
water	19:4	0:0	2	x
op	19:14	0:0	2	=
call	19:16	19:22	2	GETB
arg	19:21	19:22	3	c
water	19:21	0:0	4	c
water	19:23	0:0	2	;
if	20:4	25:4	2	(x > 17)
cond	20:8	20:12	3	x > 17
water	20:8	0:0	4	x
op	20:10	0:0	4	>
water	20:12	0:0	4	17
stmts	20:16	25:4	3	
water	20:16	0:0	4	{
call	21:8	21:23	4	copy
arg	21:13	21:15	5	&c
op	21:13	0:0	6	&
water	21:14	0:0	6	c
arg	21:17	21:23	5	x-17
water	21:17	0:0	6	x
op	21:19	0:0	6	-
water	21:21	0:0	6	17
water	21:24	0:0	4	;
water	22:8	0:0	4	x
op	22:10	0:0	4	=
call	22:12	22:18	4	GETB
arg	22:17	22:18	5	c
water	22:17	0:0	6	c
water	22:19	0:0	4	;
if	23:8	24:35	4	(x < 16)
cond	23:12	23:16	5	x < 16
water	23:12	0:0	6	x
op	23:14	0:0	6	<
water	23:16	0:0	6	16
stmts	24:12	24:35	5	
water	24:12	0:0	6	c
op	24:13	0:0	6	.
water	24:14	0:0	6	error
op	24:20	0:0	6	|=
water	24:23	0:0	6	AV_LZO_ERROR
water	24:35	0:0	6	;
water	25:4	0:0	4	}
if	26:4	27:40	2	(c . in > c . in_end)
cond	26:8	26:17	3	c . in > c . in_end
water	26:8	0:0	4	c
op	26:9	0:0	4	.
water	26:10	0:0	4	in
op	26:13	0:0	4	>
water	26:15	0:0	4	c
op	26:16	0:0	4	.
water	26:17	0:0	4	in_end
stmts	27:8	27:40	3	
water	27:8	0:0	4	c
op	27:9	0:0	4	.
water	27:10	0:0	4	error
op	27:16	0:0	4	|=
water	27:19	0:0	4	AV_LZO_INPUT_DEPLETED
water	27:40	0:0	4	;
while	28:4	66:4	2	(! c . error)
cond	28:11	28:14	3	! c . error
op	28:11	0:0	4	!
water	28:12	0:0	4	c
op	28:13	0:0	4	.
water	28:14	0:0	4	error
stmts	28:21	66:4	3	
water	28:21	0:0	4	{
decl	29:8	29:21	4	int	cnt
water	29:15	0:0	4	,
decl	29:8	29:21	4	int	back
if	30:8	49:8	4	(x > 15)
cond	30:12	30:16	5	x > 15
water	30:12	0:0	6	x
op	30:14	0:0	6	>
water	30:16	0:0	6	15
stmts	30:20	49:8	5	
water	30:20	0:0	6	{
if	31:12	34:12	6	(x > 63)
cond	31:16	31:20	7	x > 63
water	31:16	0:0	8	x
op	31:18	0:0	8	>
water	31:20	0:0	8	63
stmts	31:24	34:12	7	
water	31:24	0:0	8	{
water	32:16	0:0	8	cnt
op	32:21	0:0	8	=
water	32:23	0:0	8	(
water	32:24	0:0	8	x
op	32:26	0:0	8	>>
water	32:29	0:0	8	5
water	32:30	0:0	8	)
op	32:32	0:0	8	-
water	32:34	0:0	8	1
water	32:35	0:0	8	;
water	33:16	0:0	8	back
op	33:21	0:0	8	=
water	33:23	0:0	8	(
call	33:24	33:30	8	GETB
arg	33:29	33:30	9	c
water	33:29	0:0	10	c
op	33:32	0:0	8	<<
water	33:35	0:0	8	3
water	33:36	0:0	8	)
op	33:38	0:0	8	+
water	33:40	0:0	8	(
water	33:41	0:0	8	(
water	33:42	0:0	8	x
op	33:44	0:0	8	>>
water	33:47	0:0	8	2
water	33:48	0:0	8	)
op	33:50	0:0	8	&
water	33:52	0:0	8	7
water	33:53	0:0	8	)
op	33:55	0:0	8	+
water	33:57	0:0	8	1
water	33:58	0:0	8	;
water	34:12	0:0	8	}
else	34:14	38:12	6
stmts	34:19	38:12	7	
if	34:19	38:12	8	(x > 31)
cond	34:23	34:27	9	x > 31
water	34:23	0:0	10	x
op	34:25	0:0	10	>
water	34:27	0:0	10	31
stmts	34:31	38:12	9	
water	34:31	0:0	10	{
water	35:16	0:0	10	cnt
op	35:21	0:0	10	=
call	35:23	35:40	10	get_len
arg	35:31	35:33	11	&c
op	35:31	0:0	12	&
water	35:32	0:0	12	c
arg	35:35	35:36	11	x
water	35:35	0:0	12	x
arg	35:38	35:40	11	31
water	35:38	0:0	12	31
water	35:41	0:0	10	;
water	36:16	0:0	10	x
op	36:21	0:0	10	=
call	36:23	36:29	10	GETB
arg	36:28	36:29	11	c
water	36:28	0:0	12	c
water	36:30	0:0	10	;
water	37:16	0:0	10	back
op	37:21	0:0	10	=
water	37:23	0:0	10	(
call	37:24	37:30	10	GETB
arg	37:29	37:30	11	c
water	37:29	0:0	12	c
op	37:32	0:0	10	<<
water	37:35	0:0	10	6
water	37:36	0:0	10	)
op	37:38	0:0	10	+
water	37:40	0:0	10	(
water	37:41	0:0	10	x
op	37:43	0:0	10	>>
water	37:46	0:0	10	2
water	37:47	0:0	10	)
op	37:49	0:0	10	+
water	37:51	0:0	10	1
water	37:52	0:0	10	;
water	38:12	0:0	10	}
else	38:14	48:12	6
stmts	38:19	48:12	7	
water	38:19	0:0	8	{
water	39:16	0:0	8	cnt
op	39:22	0:0	8	=
call	39:24	39:40	8	get_len
arg	39:32	39:34	9	&c
op	39:32	0:0	10	&
water	39:33	0:0	10	c
arg	39:36	39:37	9	x
water	39:36	0:0	10	x
arg	39:39	39:40	9	7
water	39:39	0:0	10	7
water	39:41	0:0	8	;
water	40:16	0:0	8	back
op	40:22	0:0	8	=
water	40:24	0:0	8	(
water	40:25	0:0	8	1
op	40:27	0:0	8	<<
water	40:30	0:0	8	14
water	40:32	0:0	8	)
op	40:34	0:0	8	+
water	40:36	0:0	8	(
water	40:37	0:0	8	(
water	40:38	0:0	8	x
op	40:40	0:0	8	&
water	40:42	0:0	8	8
water	40:43	0:0	8	)
op	40:45	0:0	8	<<
water	40:48	0:0	8	11
water	40:50	0:0	8	)
water	40:51	0:0	8	;
water	41:16	0:0	8	x
op	41:22	0:0	8	=
call	41:24	41:30	8	GETB
arg	41:29	41:30	9	c
water	41:29	0:0	10	c
water	41:31	0:0	8	;
water	42:16	0:0	8	back
op	42:21	0:0	8	+=
water	42:24	0:0	8	(
call	42:25	42:31	8	GETB
arg	42:30	42:31	9	c
water	42:30	0:0	10	c
op	42:33	0:0	8	<<
water	42:36	0:0	8	6
water	42:37	0:0	8	)
op	42:39	0:0	8	+
water	42:41	0:0	8	(
water	42:42	0:0	8	x
op	42:44	0:0	8	>>
water	42:47	0:0	8	2
water	42:48	0:0	8	)
water	42:49	0:0	8	;
if	43:16	47:16	8	(back == ( 1 << 14 ))
cond	43:20	43:36	9	back == ( 1 << 14 )
water	43:20	0:0	10	back
op	43:25	0:0	10	==
water	43:28	0:0	10	(
water	43:29	0:0	10	1
op	43:31	0:0	10	<<
water	43:34	0:0	10	14
water	43:36	0:0	10	)
stmts	43:39	47:16	9	
water	43:39	0:0	10	{
if	44:20	45:47	10	(cnt != 1)
cond	44:24	44:31	11	cnt != 1
water	44:24	0:0	12	cnt
op	44:28	0:0	12	!=
water	44:31	0:0	12	1
stmts	45:24	45:47	11	
water	45:24	0:0	12	c
op	45:25	0:0	12	.
water	45:26	0:0	12	error
op	45:32	0:0	12	|=
water	45:35	0:0	12	AV_LZO_ERROR
water	45:47	0:0	12	;
break	46:20	46:25	10	
water	47:16	0:0	10	}
water	48:12	0:0	8	}
water	49:8	0:0	6	}
else	49:10	57:8	4
stmts	49:15	57:8	5	
if	49:15	57:8	6	(! state)
cond	49:19	49:20	7	! state
op	49:19	0:0	8	!
water	49:20	0:0	8	state
stmts	49:27	57:8	7	
water	49:27	0:0	8	{
water	50:12	0:0	8	cnt
op	50:16	0:0	8	=
call	50:18	50:35	8	get_len
arg	50:26	50:28	9	&c
op	50:26	0:0	10	&
water	50:27	0:0	10	c
arg	50:30	50:31	9	x
water	50:30	0:0	10	x
arg	50:33	50:35	9	15
water	50:33	0:0	10	15
water	50:36	0:0	8	;
call	51:12	51:28	8	copy
arg	51:17	51:19	9	&c
op	51:17	0:0	10	&
water	51:18	0:0	10	c
arg	51:21	51:28	9	cnt+3
water	51:21	0:0	10	cnt
op	51:25	0:0	10	+
water	51:27	0:0	10	3
water	51:29	0:0	8	;
water	52:12	0:0	8	x
op	52:14	0:0	8	=
call	52:16	52:22	8	GETB
arg	52:21	52:22	9	c
water	52:21	0:0	10	c
water	52:23	0:0	8	;
if	53:12	54:24	8	(x > 15)
cond	53:16	53:20	9	x > 15
water	53:16	0:0	10	x
op	53:18	0:0	10	>
water	53:20	0:0	10	15
stmts	54:16	54:24	9	
continue	54:16	54:24	10	
water	55:12	0:0	8	cnt
op	55:17	0:0	8	=
water	55:19	0:0	8	1
water	55:20	0:0	8	;
water	56:12	0:0	8	back
op	56:17	0:0	8	=
water	56:19	0:0	8	(
water	56:20	0:0	8	1
op	56:22	0:0	8	<<
water	56:25	0:0	8	11
water	56:27	0:0	8	)
op	56:29	0:0	8	+
water	56:31	0:0	8	(
call	56:32	56:38	8	GETB
arg	56:37	56:38	9	c
water	56:37	0:0	10	c
op	56:40	0:0	8	<<
water	56:43	0:0	8	2
water	56:44	0:0	8	)
op	56:46	0:0	8	+
water	56:48	0:0	8	(
water	56:49	0:0	8	x
op	56:51	0:0	8	>>
water	56:54	0:0	8	2
water	56:55	0:0	8	)
op	56:57	0:0	8	+
water	56:59	0:0	8	1
water	56:60	0:0	8	;
water	57:8	0:0	8	}
else	57:10	60:8	4
stmts	57:15	60:8	5	
water	57:15	0:0	6	{
water	58:12	0:0	6	cnt
op	58:17	0:0	6	=
water	58:19	0:0	6	0
water	58:20	0:0	6	;
water	59:12	0:0	6	back
op	59:17	0:0	6	=
water	59:19	0:0	6	(
call	59:20	59:26	6	GETB
arg	59:25	59:26	7	c
water	59:25	0:0	8	c
op	59:28	0:0	6	<<
water	59:31	0:0	6	2
water	59:32	0:0	6	)
op	59:34	0:0	6	+
water	59:36	0:0	6	(
water	59:37	0:0	6	x
op	59:39	0:0	6	>>
water	59:42	0:0	6	2
water	59:43	0:0	6	)
op	59:45	0:0	6	+
water	59:47	0:0	6	1
water	59:48	0:0	6	;
water	60:8	0:0	6	}
call	61:8	61:38	4	copy_backptr
arg	61:21	61:23	5	&c
op	61:21	0:0	6	&
water	61:22	0:0	6	c
arg	61:25	61:29	5	back
water	61:25	0:0	6	back
arg	61:31	61:38	5	cnt+2
water	61:31	0:0	6	cnt
op	61:35	0:0	6	+
water	61:37	0:0	6	2
water	61:39	0:0	4	;
water	62:8	0:0	4	state
op	62:14	0:0	4	=
water	63:8	0:0	4	cnt
op	63:14	0:0	4	=
water	63:16	0:0	4	x
op	63:18	0:0	4	&
water	63:20	0:0	4	3
water	63:21	0:0	4	;
call	64:8	64:20	4	copy
arg	64:13	64:15	5	&c
op	64:13	0:0	6	&
water	64:14	0:0	6	c
arg	64:17	64:20	5	cnt
water	64:17	0:0	6	cnt
water	64:21	0:0	4	;
water	65:8	0:0	4	x
op	65:10	0:0	4	=
call	65:12	65:18	4	GETB
arg	65:17	65:18	5	c
water	65:17	0:0	6	c
water	65:19	0:0	4	;
water	66:4	0:0	4	}
op	67:4	0:0	2	*
water	67:5	0:0	2	inlen
op	67:11	0:0	2	=
water	67:13	0:0	2	c
op	67:14	0:0	2	.
water	67:15	0:0	2	in_end
op	67:22	0:0	2	-
water	67:24	0:0	2	c
op	67:25	0:0	2	.
water	67:26	0:0	2	in
water	67:28	0:0	2	;
if	68:4	69:18	2	(c . in > c . in_end)
cond	68:8	68:17	3	c . in > c . in_end
water	68:8	0:0	4	c
op	68:9	0:0	4	.
water	68:10	0:0	4	in
op	68:13	0:0	4	>
water	68:15	0:0	4	c
op	68:16	0:0	4	.
water	68:17	0:0	4	in_end
stmts	69:8	69:18	3	
op	69:8	0:0	4	*
water	69:9	0:0	4	inlen
op	69:15	0:0	4	=
water	69:17	0:0	4	0
water	69:18	0:0	4	;
op	70:4	0:0	2	*
water	70:5	0:0	2	outlen
op	70:12	0:0	2	=
water	70:14	0:0	2	c
op	70:15	0:0	2	.
water	70:16	0:0	2	out_end
op	70:24	0:0	2	-
water	70:26	0:0	2	c
op	70:27	0:0	2	.
water	70:28	0:0	2	out
water	70:31	0:0	2	;
return	71:4	71:18	2	c.error
water	71:11	0:0	3	c
op	71:12	0:0	3	.
water	71:13	0:0	3	error
