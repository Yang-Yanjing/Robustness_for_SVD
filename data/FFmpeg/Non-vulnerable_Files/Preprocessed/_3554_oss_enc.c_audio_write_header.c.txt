func	1:0	15:0	0	static int	audio_write_header
params	1:29	0:0	1	
param	1:30	1:49	2	AVFormatContext *	s1
stmnts	0:0	14:4	1	
decl	3:4	3:35	2	OSSAudioData	*s
op	3:20	0:0	2	=
water	3:22	0:0	2	s1
op	3:24	0:0	2	->
water	3:26	0:0	2	priv_data
decl	4:4	4:16	2	AVStream	*st
decl	5:4	5:11	2	int	ret
water	6:4	0:0	2	st
op	6:7	0:0	2	=
water	6:9	0:0	2	s1
op	6:11	0:0	2	->
water	6:13	0:0	2	streams
op	6:20	0:0	2	[
water	6:21	0:0	2	0
op	6:22	0:0	2	]
water	6:23	0:0	2	;
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	sample_rate
op	7:19	0:0	2	=
water	7:21	0:0	2	st
op	7:23	0:0	2	->
water	7:25	0:0	2	codec
op	7:30	0:0	2	->
water	7:32	0:0	2	sample_rate
water	7:43	0:0	2	;
water	8:4	0:0	2	s
op	8:5	0:0	2	->
water	8:7	0:0	2	channels
op	8:16	0:0	2	=
water	8:18	0:0	2	st
op	8:20	0:0	2	->
water	8:22	0:0	2	codec
op	8:27	0:0	2	->
water	8:29	0:0	2	channels
water	8:37	0:0	2	;
water	9:4	0:0	2	ret
op	9:8	0:0	2	=
call	9:10	9:47	2	ff_oss_audio_open
arg	9:28	9:30	3	s1
water	9:28	0:0	4	s1
arg	9:32	9:33	3	1
water	9:32	0:0	4	1
arg	9:35	9:47	3	s1->filename
water	9:35	0:0	4	s1
op	9:37	0:0	4	->
water	9:39	0:0	4	filename
water	9:48	0:0	2	;
if	10:4	12:4	2	(ret < 0)
cond	10:8	10:14	3	ret < 0
water	10:8	0:0	4	ret
op	10:12	0:0	4	<
water	10:14	0:0	4	0
stmts	10:17	12:4	3	
water	10:17	0:0	4	{
return	11:8	11:27	4	AVERROR(EIO)
call	11:15	11:26	5	AVERROR
arg	11:23	11:26	6	EIO
water	11:23	0:0	7	EIO
water	12:4	0:0	4	}
else	12:6	14:4	2
stmts	12:11	14:4	3	
water	12:11	0:0	4	{
return	13:8	13:16	4	0
water	13:15	0:0	5	0
water	14:4	0:0	4	}
