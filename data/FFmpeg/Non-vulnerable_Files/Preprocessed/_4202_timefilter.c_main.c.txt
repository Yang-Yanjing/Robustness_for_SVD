func	1:0	69:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	0:0	68:12	1	
decl	3:4	3:14	2	AVLFG	prng
decl	4:4	4:17	2	double	n0
water	4:13	0:0	2	,
decl	4:4	4:17	2	double	n1
decl	6:4	6:25	2	double	ideal[SAMPLES]
decl	7:4	7:27	2	double	samples[SAMPLES]
decl	8:4	8:27	2	double	samplet[SAMPLES]
for	9:4	67:4	2	(n0 = 0 ;n0 < 40;n0 = 2 * n0 + 1)
forinit	9:9	9:15	3	n0 = 0 ;
water	9:9	0:0	4	n0
op	9:12	0:0	4	=
water	9:14	0:0	4	0
water	9:15	0:0	4	;
cond	9:17	9:22	3	n0 < 40
water	9:17	0:0	4	n0
op	9:20	0:0	4	<
water	9:22	0:0	4	40
forexpr	9:26	9:40	3	n0 = 2 * n0 + 1
water	9:26	0:0	4	n0
op	9:29	0:0	4	=
water	9:31	0:0	4	2
op	9:33	0:0	4	*
water	9:35	0:0	4	n0
op	9:38	0:0	4	+
water	9:40	0:0	4	1
stmts	9:43	67:4	3	
water	9:43	0:0	4	{
for	10:8	65:8	4	(n1 = 0 ;n1 < 10;n1 = 2 * n1 + 1)
forinit	10:13	10:19	5	n1 = 0 ;
water	10:13	0:0	6	n1
op	10:16	0:0	6	=
water	10:18	0:0	6	0
water	10:19	0:0	6	;
cond	10:21	10:26	5	n1 < 10
water	10:21	0:0	6	n1
op	10:24	0:0	6	<
water	10:26	0:0	6	10
forexpr	10:30	10:44	5	n1 = 2 * n1 + 1
water	10:30	0:0	6	n1
op	10:33	0:0	6	=
water	10:35	0:0	6	2
op	10:37	0:0	6	*
water	10:39	0:0	6	n1
op	10:42	0:0	6	+
water	10:44	0:0	6	1
stmts	10:47	65:8	5	
water	10:47	0:0	6	{
decl	11:12	11:42	6	double	best_error
op	11:30	0:0	6	=
water	11:32	0:0	6	1000000000
decl	12:12	12:47	6	double	bestpar0
op	12:30	0:0	6	=
water	12:32	0:0	6	n0
water	12:35	0:0	6	?
water	12:37	0:0	6	1
water	12:39	0:0	6	:
water	12:41	0:0	6	100000
decl	13:12	13:33	6	double	bestpar1
op	13:30	0:0	6	=
water	13:32	0:0	6	1
decl	14:12	14:25	6	int	better
water	14:22	0:0	6	,
decl	14:12	14:25	6	int	i
call	15:12	15:34	6	av_lfg_init
arg	15:24	15:29	7	&prng
op	15:24	0:0	8	&
water	15:25	0:0	8	prng
arg	15:31	15:34	7	123
water	15:31	0:0	8	123
water	15:35	0:0	6	;
for	16:12	22:12	6	(i = 0 ;i < SAMPLES;i ++)
forinit	16:17	16:22	7	i = 0 ;
water	16:17	0:0	8	i
op	16:19	0:0	8	=
water	16:21	0:0	8	0
water	16:22	0:0	8	;
cond	16:24	16:28	7	i < SAMPLES
water	16:24	0:0	8	i
op	16:26	0:0	8	<
water	16:28	0:0	8	SAMPLES
forexpr	16:37	16:38	7	i ++
water	16:37	0:0	8	i
op	16:38	0:0	8	++
stmts	16:42	22:12	7	
water	16:42	0:0	8	{
water	17:16	0:0	8	samplet
op	17:23	0:0	8	[
water	17:24	0:0	8	i
op	17:25	0:0	8	]
op	17:27	0:0	8	=
water	17:29	0:0	8	10
op	17:32	0:0	8	+
water	17:34	0:0	8	i
op	17:36	0:0	8	+
water	17:38	0:0	8	(
call	17:39	17:55	8	av_lfg_get
arg	17:50	17:55	9	&prng
op	17:50	0:0	10	&
water	17:51	0:0	10	prng
op	17:57	0:0	8	<
water	17:59	0:0	8	LFG_MAX
op	17:66	0:0	8	/
water	17:67	0:0	8	2
water	17:69	0:0	8	?
water	17:71	0:0	8	0
water	17:73	0:0	8	:
water	17:75	0:0	8	0
op	17:76	0:0	8	.
water	17:77	0:0	8	999
water	17:80	0:0	8	)
water	17:81	0:0	8	;
water	18:16	0:0	8	ideal
op	18:21	0:0	8	[
water	18:22	0:0	8	i
op	18:23	0:0	8	]
op	18:27	0:0	8	=
water	18:29	0:0	8	samplet
op	18:36	0:0	8	[
water	18:37	0:0	8	i
op	18:38	0:0	8	]
op	18:40	0:0	8	+
water	18:42	0:0	8	n1
op	18:45	0:0	8	*
water	18:47	0:0	8	i
op	18:49	0:0	8	/
water	18:51	0:0	8	(
water	18:52	0:0	8	1000
water	18:56	0:0	8	)
water	18:57	0:0	8	;
water	19:16	0:0	8	samples
op	19:23	0:0	8	[
water	19:24	0:0	8	i
op	19:25	0:0	8	]
op	19:27	0:0	8	=
water	19:29	0:0	8	ideal
op	19:34	0:0	8	[
water	19:35	0:0	8	i
op	19:36	0:0	8	]
op	19:38	0:0	8	+
water	19:40	0:0	8	n0
op	19:43	0:0	8	*
water	19:45	0:0	8	(
call	19:46	19:62	8	av_lfg_get
arg	19:57	19:62	9	&prng
op	19:57	0:0	10	&
water	19:58	0:0	10	prng
op	19:64	0:0	8	-
water	19:66	0:0	8	LFG_MAX
op	19:74	0:0	8	/
water	19:76	0:0	8	2
water	19:77	0:0	8	)
op	19:79	0:0	8	/
water	19:81	0:0	8	(
water	19:82	0:0	8	LFG_MAX
op	19:90	0:0	8	*
water	19:92	0:0	8	10
water	19:94	0:0	8	LL
water	19:96	0:0	8	)
water	19:97	0:0	8	;
if	20:16	21:49	8	(i && samples [ i ] < samples [ i - 1 ])
cond	20:19	20:46	9	i && samples [ i ] < samples [ i - 1 ]
water	20:19	0:0	10	i
op	20:21	0:0	10	&&
water	20:24	0:0	10	samples
op	20:31	0:0	10	[
water	20:32	0:0	10	i
op	20:33	0:0	10	]
op	20:34	0:0	10	<
water	20:35	0:0	10	samples
op	20:42	0:0	10	[
water	20:43	0:0	10	i
op	20:44	0:0	10	-
water	20:45	0:0	10	1
op	20:46	0:0	10	]
stmts	21:20	21:49	9	
water	21:20	0:0	10	samples
op	21:27	0:0	10	[
water	21:28	0:0	10	i
op	21:29	0:0	10	]
op	21:30	0:0	10	=
water	21:31	0:0	10	samples
op	21:38	0:0	10	[
water	21:39	0:0	10	i
op	21:40	0:0	10	-
water	21:41	0:0	10	1
op	21:42	0:0	10	]
op	21:43	0:0	10	+
water	21:44	0:0	10	0
op	21:45	0:0	10	.
water	21:46	0:0	10	001
water	21:49	0:0	10	;
water	22:12	0:0	8	}
do	23:12	50:12	6	(better)
cond	50:21	50:21	7	better
water	50:21	0:0	8	better
stmts	23:15	50:12	7	
water	23:15	0:0	8	{
decl	24:16	24:33	8	double	par0
water	24:27	0:0	8	,
decl	24:16	24:33	8	double	par1
water	25:16	0:0	8	better
op	25:23	0:0	8	=
water	25:25	0:0	8	0
water	25:26	0:0	8	;
for	26:16	49:16	8	(par0 = bestpar0 * 0 . 8 ;par0 <= bestpar0 * 1 . 21;par0 += bestpar0 * 0 . 05)
forinit	26:21	26:42	9	par0 = bestpar0 * 0 . 8 ;
water	26:21	0:0	10	par0
op	26:26	0:0	10	=
water	26:28	0:0	10	bestpar0
op	26:37	0:0	10	*
water	26:39	0:0	10	0
op	26:40	0:0	10	.
water	26:41	0:0	10	8
water	26:42	0:0	10	;
cond	26:44	26:65	9	par0 <= bestpar0 * 1 . 21
water	26:44	0:0	10	par0
op	26:49	0:0	10	<=
water	26:52	0:0	10	bestpar0
op	26:61	0:0	10	*
water	26:63	0:0	10	1
op	26:64	0:0	10	.
water	26:65	0:0	10	21
forexpr	26:69	26:90	9	par0 += bestpar0 * 0 . 05
water	26:69	0:0	10	par0
op	26:74	0:0	10	+=
water	26:77	0:0	10	bestpar0
op	26:86	0:0	10	*
water	26:88	0:0	10	0
op	26:89	0:0	10	.
water	26:90	0:0	10	05
stmts	26:94	49:16	9	
water	26:94	0:0	10	{
for	27:20	48:20	10	(par1 = bestpar1 * 0 . 8 ;par1 <= bestpar1 * 1 . 21;par1 += bestpar1 * 0 . 05)
forinit	27:25	27:46	11	par1 = bestpar1 * 0 . 8 ;
water	27:25	0:0	12	par1
op	27:30	0:0	12	=
water	27:32	0:0	12	bestpar1
op	27:41	0:0	12	*
water	27:43	0:0	12	0
op	27:44	0:0	12	.
water	27:45	0:0	12	8
water	27:46	0:0	12	;
cond	27:48	27:69	11	par1 <= bestpar1 * 1 . 21
water	27:48	0:0	12	par1
op	27:53	0:0	12	<=
water	27:56	0:0	12	bestpar1
op	27:65	0:0	12	*
water	27:67	0:0	12	1
op	27:68	0:0	12	.
water	27:69	0:0	12	21
forexpr	27:73	27:94	11	par1 += bestpar1 * 0 . 05
water	27:73	0:0	12	par1
op	27:78	0:0	12	+=
water	27:81	0:0	12	bestpar1
op	27:90	0:0	12	*
water	27:92	0:0	12	0
op	27:93	0:0	12	.
water	27:94	0:0	12	05
stmts	27:98	48:20	11	
water	27:98	0:0	12	{
decl	28:24	28:42	12	double	error
op	28:39	0:0	12	=
water	28:41	0:0	12	0
decl	29:24	29:73	12	TimeFilter	*tf
op	29:39	0:0	12	=
call	29:41	29:72	13	ff_timefilter_new
arg	29:59	29:60	14	1
water	29:59	0:0	15	1
arg	29:62	29:66	14	par0
water	29:62	0:0	15	par0
arg	29:68	29:72	14	par1
water	29:68	0:0	15	par1
if	30:24	33:24	12	(! tf)
cond	30:28	30:29	13	! tf
op	30:28	0:0	14	!
water	30:29	0:0	14	tf
stmts	30:33	33:24	13	
water	30:33	0:0	14	{
call	31:28	31:80	14	printf
arg	31:35	31:80	15	"Could not allocate memory for timefilter.\n"
water	31:35	0:0	16	"Could not allocate memory for timefilter.\n"
water	31:81	0:0	14	;
call	32:28	32:34	14	exit
arg	32:33	32:34	15	1
water	32:33	0:0	16	1
water	32:35	0:0	14	;
water	33:24	0:0	14	}
for	34:24	40:24	12	(i = 0 ;i < SAMPLES;i ++)
forinit	34:29	34:34	13	i = 0 ;
water	34:29	0:0	14	i
op	34:31	0:0	14	=
water	34:33	0:0	14	0
water	34:34	0:0	14	;
cond	34:36	34:40	13	i < SAMPLES
water	34:36	0:0	14	i
op	34:38	0:0	14	<
water	34:40	0:0	14	SAMPLES
forexpr	34:49	34:50	13	i ++
water	34:49	0:0	14	i
op	34:50	0:0	14	++
stmts	34:54	40:24	13	
water	34:54	0:0	14	{
decl	35:28	35:43	14	double	filtered
water	36:28	0:0	14	filtered
op	36:37	0:0	14	=
call	36:39	36:111	14	ff_timefilter_update
arg	36:60	36:62	15	tf
water	36:60	0:0	16	tf
arg	36:64	36:74	15	samples[i]
water	36:64	0:0	16	samples
op	36:71	0:0	16	[
water	36:72	0:0	16	i
op	36:73	0:0	16	]
arg	36:76	36:111	15	i?(samplet[i]-samplet[i-1]):1
water	36:76	0:0	16	i
water	36:78	0:0	16	?
water	36:80	0:0	16	(
water	36:81	0:0	16	samplet
op	36:88	0:0	16	[
water	36:89	0:0	16	i
op	36:90	0:0	16	]
op	36:92	0:0	16	-
water	36:94	0:0	16	samplet
op	36:101	0:0	16	[
water	36:102	0:0	16	i
op	36:103	0:0	16	-
water	36:104	0:0	16	1
op	36:105	0:0	16	]
water	36:106	0:0	16	)
water	36:108	0:0	16	:
water	36:110	0:0	16	1
water	36:112	0:0	14	;
if	37:28	38:62	14	(filtered < 0 || filtered > 1000000000)
cond	37:31	37:58	15	filtered < 0 || filtered > 1000000000
water	37:31	0:0	16	filtered
op	37:40	0:0	16	<
water	37:42	0:0	16	0
op	37:44	0:0	16	||
water	37:47	0:0	16	filtered
op	37:56	0:0	16	>
water	37:58	0:0	16	1000000000
stmts	38:32	38:62	15	
call	38:32	38:61	16	printf
arg	38:39	38:61	17	"filter is unstable\n"
water	38:39	0:0	18	"filter is unstable\n"
water	38:62	0:0	16	;
water	39:28	0:0	14	error
op	39:36	0:0	14	+=
water	39:39	0:0	14	(
water	39:40	0:0	14	filtered
op	39:49	0:0	14	-
water	39:51	0:0	14	ideal
op	39:56	0:0	14	[
water	39:57	0:0	14	i
op	39:58	0:0	14	]
water	39:59	0:0	14	)
op	39:61	0:0	14	*
water	39:63	0:0	14	(
water	39:64	0:0	14	filtered
op	39:73	0:0	14	-
water	39:75	0:0	14	ideal
op	39:80	0:0	14	[
water	39:81	0:0	14	i
op	39:82	0:0	14	]
water	39:83	0:0	14	)
water	39:84	0:0	14	;
water	40:24	0:0	14	}
call	41:24	41:48	12	ff_timefilter_destroy
arg	41:46	41:48	13	tf
water	41:46	0:0	14	tf
water	41:49	0:0	12	;
if	42:24	47:24	12	(error < best_error)
cond	42:28	42:36	13	error < best_error
water	42:28	0:0	14	error
op	42:34	0:0	14	<
water	42:36	0:0	14	best_error
stmts	42:48	47:24	13	
water	42:48	0:0	14	{
water	43:28	0:0	14	best_error
op	43:39	0:0	14	=
water	43:41	0:0	14	error
water	43:46	0:0	14	;
water	44:28	0:0	14	bestpar0
op	44:39	0:0	14	=
water	44:41	0:0	14	par0
water	44:45	0:0	14	;
water	45:28	0:0	14	bestpar1
op	45:39	0:0	14	=
water	45:41	0:0	14	par1
water	45:45	0:0	14	;
water	46:28	0:0	14	better
op	46:39	0:0	14	=
water	46:41	0:0	14	1
water	46:42	0:0	14	;
water	47:24	0:0	14	}
water	48:20	0:0	12	}
water	49:16	0:0	10	}
water	50:12	0:0	8	}
water	50:28	0:0	6	;
decl	52:12	52:30	6	double	lastfil
op	52:27	0:0	6	=
water	52:29	0:0	6	9
decl	53:12	53:69	6	TimeFilter	*tf
op	53:27	0:0	6	=
call	53:29	53:68	7	ff_timefilter_new
arg	53:47	53:48	8	1
water	53:47	0:0	9	1
arg	53:50	53:58	8	bestpar0
water	53:50	0:0	9	bestpar0
arg	53:60	53:68	8	bestpar1
water	53:60	0:0	9	bestpar1
for	54:12	60:12	6	(i = 0 ;i < SAMPLES;i ++)
forinit	54:17	54:22	7	i = 0 ;
water	54:17	0:0	8	i
op	54:19	0:0	8	=
water	54:21	0:0	8	0
water	54:22	0:0	8	;
cond	54:24	54:28	7	i < SAMPLES
water	54:24	0:0	8	i
op	54:26	0:0	8	<
water	54:28	0:0	8	SAMPLES
forexpr	54:37	54:38	7	i ++
water	54:37	0:0	8	i
op	54:38	0:0	8	++
stmts	54:42	60:12	7	
water	54:42	0:0	8	{
decl	55:16	55:31	8	double	filtered
water	56:16	0:0	8	filtered
op	56:25	0:0	8	=
call	56:27	56:65	8	ff_timefilter_update
arg	56:48	56:50	9	tf
water	56:48	0:0	10	tf
arg	56:52	56:62	9	samples[i]
water	56:52	0:0	10	samples
op	56:59	0:0	10	[
water	56:60	0:0	10	i
op	56:61	0:0	10	]
arg	56:64	56:65	9	1
water	56:64	0:0	10	1
water	56:66	0:0	8	;
call	57:16	58:90	8	printf
arg	57:23	57:38	9	"%f %f %f %f\n"
water	57:23	0:0	10	"%f %f %f %f\n"
arg	57:40	57:59	9	i-samples[i]+10
water	57:40	0:0	10	i
op	57:42	0:0	10	-
water	57:44	0:0	10	samples
op	57:51	0:0	10	[
water	57:52	0:0	10	i
op	57:53	0:0	10	]
op	57:55	0:0	10	+
water	57:57	0:0	10	10
arg	57:61	57:82	9	filtered-samples[i]
water	57:61	0:0	10	filtered
op	57:70	0:0	10	-
water	57:72	0:0	10	samples
op	57:79	0:0	10	[
water	57:80	0:0	10	i
op	57:81	0:0	10	]
arg	58:23	58:70	9	samples[FFMAX(i,1)]-samples[FFMAX(i-1,0)]
water	58:23	0:0	10	samples
op	58:30	0:0	10	[
call	58:31	58:41	10	FFMAX
arg	58:37	58:38	11	i
water	58:37	0:0	12	i
arg	58:40	58:41	11	1
water	58:40	0:0	12	1
op	58:42	0:0	10	]
op	58:44	0:0	10	-
water	58:46	0:0	10	samples
op	58:53	0:0	10	[
call	58:54	58:68	10	FFMAX
arg	58:60	58:65	11	i-1
water	58:60	0:0	12	i
op	58:62	0:0	12	-
water	58:64	0:0	12	1
arg	58:67	58:68	11	0
water	58:67	0:0	12	0
op	58:69	0:0	10	]
arg	58:72	58:90	9	filtered-lastfil
water	58:72	0:0	10	filtered
op	58:81	0:0	10	-
water	58:83	0:0	10	lastfil
water	58:91	0:0	8	;
water	59:16	0:0	8	lastfil
op	59:24	0:0	8	=
water	59:26	0:0	8	filtered
water	59:34	0:0	8	;
water	60:12	0:0	8	}
call	61:12	61:36	6	ff_timefilter_destroy
arg	61:34	61:36	7	tf
water	61:34	0:0	8	tf
water	61:37	0:0	6	;
call	63:12	63:69	6	printf
arg	63:19	63:37	7	" [%12f %11f %9f]"
water	63:19	0:0	8	" [%12f %11f %9f]"
arg	63:39	63:47	7	bestpar0
water	63:39	0:0	8	bestpar0
arg	63:49	63:57	7	bestpar1
water	63:49	0:0	8	bestpar1
arg	63:59	63:69	7	best_error
water	63:59	0:0	8	best_error
water	63:70	0:0	6	;
water	65:8	0:0	6	}
call	66:8	66:19	4	printf
arg	66:15	66:19	5	"\n"
water	66:15	0:0	6	"\n"
water	66:20	0:0	4	;
water	67:4	0:0	4	}
return	68:4	68:12	2	0
water	68:11	0:0	3	0
