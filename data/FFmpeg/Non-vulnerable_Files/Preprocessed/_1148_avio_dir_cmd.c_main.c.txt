func	1:0	41:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:31	2	char *	argv[]
stmnts	0:0	40:26	1	
decl	3:4	3:25	2	const char	*op
op	3:19	0:0	2	=
water	3:21	0:0	2	NULL
decl	4:4	4:11	2	int	ret
call	5:4	5:33	2	av_log_set_level
arg	5:21	5:33	3	AV_LOG_DEBUG
water	5:21	0:0	4	AV_LOG_DEBUG
water	5:34	0:0	2	;
if	6:4	9:4	2	(argc < 2)
cond	6:8	6:15	3	argc < 2
water	6:8	0:0	4	argc
op	6:13	0:0	4	<
water	6:15	0:0	4	2
stmts	6:18	9:4	3	
water	6:18	0:0	4	{
call	7:8	7:21	4	usage
arg	7:14	7:21	5	argv[0]
water	7:14	0:0	6	argv
op	7:18	0:0	6	[
water	7:19	0:0	6	0
op	7:20	0:0	6	]
water	7:22	0:0	4	;
return	8:8	8:16	4	1
water	8:15	0:0	5	1
water	9:4	0:0	4	}
call	11:4	11:20	2	av_register_all
water	11:21	0:0	2	;
call	12:4	12:26	2	avformat_network_init
water	12:27	0:0	2	;
water	13:4	0:0	2	op
op	13:7	0:0	2	=
water	13:9	0:0	2	argv
op	13:13	0:0	2	[
water	13:14	0:0	2	1
op	13:15	0:0	2	]
water	13:16	0:0	2	;
if	14:4	21:4	2	(strcmp (op ,"list" ) == 0)
cond	14:8	14:30	3	strcmp (op ,"list" ) == 0
call	14:8	14:25	4	strcmp
arg	14:15	14:17	5	op
water	14:15	0:0	6	op
arg	14:19	14:25	5	"list"
water	14:19	0:0	6	"list"
op	14:27	0:0	4	==
water	14:30	0:0	4	0
stmts	14:33	21:4	3	
water	14:33	0:0	4	{
if	15:8	18:8	4	(argc < 3)
cond	15:12	15:19	5	argc < 3
water	15:12	0:0	6	argc
op	15:17	0:0	6	<
water	15:19	0:0	6	3
stmts	15:22	18:8	5	
water	15:22	0:0	6	{
call	16:12	16:78	6	av_log
arg	16:19	16:23	7	NULL
water	16:19	0:0	8	NULL
arg	16:25	16:36	7	AV_LOG_INFO
water	16:25	0:0	8	AV_LOG_INFO
arg	16:38	16:78	7	"Missing argument for list operation.\n"
water	16:38	0:0	8	"Missing argument for list operation.\n"
water	16:79	0:0	6	;
water	17:12	0:0	6	ret
op	17:16	0:0	6	=
call	17:18	17:32	6	AVERROR
arg	17:26	17:32	7	EINVAL
water	17:26	0:0	8	EINVAL
water	17:33	0:0	6	;
water	18:8	0:0	6	}
else	18:10	20:8	4
stmts	18:15	20:8	5	
water	18:15	0:0	6	{
water	19:12	0:0	6	ret
op	19:16	0:0	6	=
call	19:18	19:33	6	list_op
arg	19:26	19:33	7	argv[2]
water	19:26	0:0	8	argv
op	19:30	0:0	8	[
water	19:31	0:0	8	2
op	19:32	0:0	8	]
water	19:34	0:0	6	;
water	20:8	0:0	6	}
water	21:4	0:0	4	}
else	21:6	28:4	2
stmts	21:11	28:4	3	
if	21:11	28:4	4	(strcmp (op ,"del" ) == 0)
cond	21:15	21:36	5	strcmp (op ,"del" ) == 0
call	21:15	21:31	6	strcmp
arg	21:22	21:24	7	op
water	21:22	0:0	8	op
arg	21:26	21:31	7	"del"
water	21:26	0:0	8	"del"
op	21:33	0:0	6	==
water	21:36	0:0	6	0
stmts	21:39	28:4	5	
water	21:39	0:0	6	{
if	22:8	25:8	6	(argc < 3)
cond	22:12	22:19	7	argc < 3
water	22:12	0:0	8	argc
op	22:17	0:0	8	<
water	22:19	0:0	8	3
stmts	22:22	25:8	7	
water	22:22	0:0	8	{
call	23:12	23:77	8	av_log
arg	23:19	23:23	9	NULL
water	23:19	0:0	10	NULL
arg	23:25	23:36	9	AV_LOG_INFO
water	23:25	0:0	10	AV_LOG_INFO
arg	23:38	23:77	9	"Missing argument for del operation.\n"
water	23:38	0:0	10	"Missing argument for del operation.\n"
water	23:78	0:0	8	;
water	24:12	0:0	8	ret
op	24:16	0:0	8	=
call	24:18	24:32	8	AVERROR
arg	24:26	24:32	9	EINVAL
water	24:26	0:0	10	EINVAL
water	24:33	0:0	8	;
water	25:8	0:0	8	}
else	25:10	27:8	6
stmts	25:15	27:8	7	
water	25:15	0:0	8	{
water	26:12	0:0	8	ret
op	26:16	0:0	8	=
call	26:18	26:32	8	del_op
arg	26:25	26:32	9	argv[2]
water	26:25	0:0	10	argv
op	26:29	0:0	10	[
water	26:30	0:0	10	2
op	26:31	0:0	10	]
water	26:33	0:0	8	;
water	27:8	0:0	8	}
water	28:4	0:0	6	}
else	28:6	35:4	2
stmts	28:11	35:4	3	
if	28:11	35:4	4	(strcmp (op ,"move" ) == 0)
cond	28:15	28:37	5	strcmp (op ,"move" ) == 0
call	28:15	28:32	6	strcmp
arg	28:22	28:24	7	op
water	28:22	0:0	8	op
arg	28:26	28:32	7	"move"
water	28:26	0:0	8	"move"
op	28:34	0:0	6	==
water	28:37	0:0	6	0
stmts	28:40	35:4	5	
water	28:40	0:0	6	{
if	29:8	32:8	6	(argc < 4)
cond	29:12	29:19	7	argc < 4
water	29:12	0:0	8	argc
op	29:17	0:0	8	<
water	29:19	0:0	8	4
stmts	29:22	32:8	7	
water	29:22	0:0	8	{
call	30:12	30:78	8	av_log
arg	30:19	30:23	9	NULL
water	30:19	0:0	10	NULL
arg	30:25	30:36	9	AV_LOG_INFO
water	30:25	0:0	10	AV_LOG_INFO
arg	30:38	30:78	9	"Missing argument for move operation.\n"
water	30:38	0:0	10	"Missing argument for move operation.\n"
water	30:79	0:0	8	;
water	31:12	0:0	8	ret
op	31:16	0:0	8	=
call	31:18	31:32	8	AVERROR
arg	31:26	31:32	9	EINVAL
water	31:26	0:0	10	EINVAL
water	31:33	0:0	8	;
water	32:8	0:0	8	}
else	32:10	34:8	6
stmts	32:15	34:8	7	
water	32:15	0:0	8	{
water	33:12	0:0	8	ret
op	33:16	0:0	8	=
call	33:18	33:42	8	move_op
arg	33:26	33:33	9	argv[2]
water	33:26	0:0	10	argv
op	33:30	0:0	10	[
water	33:31	0:0	10	2
op	33:32	0:0	10	]
arg	33:35	33:42	9	argv[3]
water	33:35	0:0	10	argv
op	33:39	0:0	10	[
water	33:40	0:0	10	3
op	33:41	0:0	10	]
water	33:43	0:0	8	;
water	34:8	0:0	8	}
water	35:4	0:0	6	}
else	35:6	38:4	2
stmts	35:11	38:4	3	
water	35:11	0:0	4	{
call	36:8	36:62	4	av_log
arg	36:15	36:19	5	NULL
water	36:15	0:0	6	NULL
arg	36:21	36:32	5	AV_LOG_INFO
water	36:21	0:0	6	AV_LOG_INFO
arg	36:34	36:58	5	"Invalid operation %s\n"
water	36:34	0:0	6	"Invalid operation %s\n"
arg	36:60	36:62	5	op
water	36:60	0:0	6	op
water	36:63	0:0	4	;
water	37:8	0:0	4	ret
op	37:12	0:0	4	=
call	37:14	37:28	4	AVERROR
arg	37:22	37:28	5	EINVAL
water	37:22	0:0	6	EINVAL
water	37:29	0:0	4	;
water	38:4	0:0	4	}
call	39:4	39:28	2	avformat_network_deinit
water	39:29	0:0	2	;
return	40:4	40:26	2	ret<0?1:0
water	40:11	0:0	3	ret
op	40:15	0:0	3	<
water	40:17	0:0	3	0
water	40:19	0:0	3	?
water	40:21	0:0	3	1
water	40:23	0:0	3	:
water	40:25	0:0	3	0
