func	1:0	28:0	0	static void	decode_transform_coeffs
params	1:35	0:0	1	
param	1:36	1:55	2	AC3DecodeContext *	s
param	1:57	1:64	2	int	blk
stmnts	0:0	27:23	1	
decl	3:4	3:15	2	int	ch
water	3:10	0:0	2	,
decl	3:4	3:15	2	int	end
decl	4:4	4:23	2	int	got_cplchan
op	4:20	0:0	2	=
water	4:22	0:0	2	0
decl	5:4	5:17	2	mant_groups	m
water	6:4	0:0	2	m
op	6:5	0:0	2	.
water	6:6	0:0	2	b1
op	6:9	0:0	2	=
water	6:11	0:0	2	m
op	6:12	0:0	2	.
water	6:13	0:0	2	b2
op	6:16	0:0	2	=
water	6:18	0:0	2	m
op	6:19	0:0	2	.
water	6:20	0:0	2	b4
op	6:23	0:0	2	=
water	6:25	0:0	2	0
water	6:26	0:0	2	;
for	7:4	25:4	2	(ch = 1 ;ch <= s -> channels;ch ++)
forinit	7:9	7:15	3	ch = 1 ;
water	7:9	0:0	4	ch
op	7:12	0:0	4	=
water	7:14	0:0	4	1
water	7:15	0:0	4	;
cond	7:17	7:26	3	ch <= s -> channels
water	7:17	0:0	4	ch
op	7:20	0:0	4	<=
water	7:23	0:0	4	s
op	7:24	0:0	4	->
water	7:26	0:0	4	channels
forexpr	7:36	7:38	3	ch ++
water	7:36	0:0	4	ch
op	7:38	0:0	4	++
stmts	7:42	25:4	3	
water	7:42	0:0	4	{
call	9:8	9:49	4	decode_transform_coeffs_ch
arg	9:35	9:36	5	s
water	9:35	0:0	6	s
arg	9:38	9:41	5	blk
water	9:38	0:0	6	blk
arg	9:43	9:45	5	ch
water	9:43	0:0	6	ch
arg	9:47	9:49	5	&m
op	9:47	0:0	6	&
water	9:48	0:0	6	m
water	9:50	0:0	4	;
if	12:8	19:8	4	(s -> channel_in_cpl [ ch ])
cond	12:12	12:32	5	s -> channel_in_cpl [ ch ]
water	12:12	0:0	6	s
op	12:13	0:0	6	->
water	12:15	0:0	6	channel_in_cpl
op	12:29	0:0	6	[
water	12:30	0:0	6	ch
op	12:32	0:0	6	]
stmts	12:36	19:8	5	
water	12:36	0:0	6	{
if	13:12	17:12	6	(! got_cplchan)
cond	13:16	13:17	7	! got_cplchan
op	13:16	0:0	8	!
water	13:17	0:0	8	got_cplchan
stmts	13:30	17:12	7	
water	13:30	0:0	8	{
call	14:16	14:61	8	decode_transform_coeffs_ch
arg	14:43	14:44	9	s
water	14:43	0:0	10	s
arg	14:46	14:49	9	blk
water	14:46	0:0	10	blk
arg	14:51	14:57	9	CPL_CH
water	14:51	0:0	10	CPL_CH
arg	14:59	14:61	9	&m
op	14:59	0:0	10	&
water	14:60	0:0	10	m
water	14:62	0:0	8	;
call	15:16	15:43	8	calc_transform_coeffs_cpl
arg	15:42	15:43	9	s
water	15:42	0:0	10	s
water	15:44	0:0	8	;
water	16:16	0:0	8	got_cplchan
op	16:28	0:0	8	=
water	16:30	0:0	8	1
water	16:31	0:0	8	;
water	17:12	0:0	8	}
water	18:12	0:0	6	end
op	18:16	0:0	6	=
water	18:18	0:0	6	s
op	18:19	0:0	6	->
water	18:21	0:0	6	end_freq
op	18:29	0:0	6	[
water	18:30	0:0	6	CPL_CH
op	18:36	0:0	6	]
water	18:37	0:0	6	;
water	19:8	0:0	6	}
else	19:10	21:8	4
stmts	19:15	21:8	5	
water	19:15	0:0	6	{
water	20:12	0:0	6	end
op	20:16	0:0	6	=
water	20:18	0:0	6	s
op	20:19	0:0	6	->
water	20:21	0:0	6	end_freq
op	20:29	0:0	6	[
water	20:30	0:0	6	ch
op	20:32	0:0	6	]
water	20:33	0:0	6	;
water	21:8	0:0	6	}
do	22:8	23:40	4	(++ end < 256)
cond	24:15	24:23	5	++ end < 256
op	24:15	0:0	6	++
water	24:17	0:0	6	end
op	24:21	0:0	6	<
water	24:23	0:0	6	256
stmts	23:12	23:40	5	
water	23:12	0:0	6	s
op	23:13	0:0	6	->
water	23:15	0:0	6	fixed_coeffs
op	23:27	0:0	6	[
water	23:28	0:0	6	ch
op	23:30	0:0	6	]
op	23:31	0:0	6	[
water	23:32	0:0	6	end
op	23:35	0:0	6	]
op	23:37	0:0	6	=
water	23:39	0:0	6	0
water	23:40	0:0	6	;
water	24:27	0:0	4	;
water	25:4	0:0	4	}
call	27:4	27:22	2	remove_dithering
arg	27:21	27:22	3	s
water	27:21	0:0	4	s
water	27:23	0:0	2	;
