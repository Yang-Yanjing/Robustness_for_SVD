func	2:15	153:0	0	int	init_subtitles
params	2:33	0:0	1	
param	2:34	2:54	2	AVFilterContext *	ctx
stmnts	0:0	152:14	1	
decl	4:4	4:19	2	int	j
water	4:9	0:0	2	,
decl	4:4	4:19	2	int	ret
water	4:14	0:0	2	,
decl	4:4	4:19	2	int	sid
decl	5:4	5:13	2	int	k
op	5:10	0:0	2	=
water	5:12	0:0	2	0
decl	6:4	6:35	2	AVDictionary	*codec_opts
op	6:29	0:0	2	=
water	6:31	0:0	2	NULL
decl	7:4	7:31	2	AVFormatContext	*fmt
op	7:25	0:0	2	=
water	7:27	0:0	2	NULL
decl	8:4	8:34	2	AVCodecContext	*dec_ctx
op	8:28	0:0	2	=
water	8:30	0:0	2	NULL
decl	9:4	9:23	2	AVCodec	*dec
op	9:17	0:0	2	=
water	9:19	0:0	2	NULL
decl	10:4	10:37	2	const AVCodecDescriptor	*dec_desc
decl	11:4	11:16	2	AVStream	*st
decl	12:4	12:16	2	AVPacket	pkt
decl	13:4	13:31	2	AssContext	*ass
op	13:20	0:0	2	=
water	13:22	0:0	2	ctx
op	13:25	0:0	2	->
water	13:27	0:0	2	priv
water	15:4	0:0	2	ret
op	15:8	0:0	2	=
call	15:10	15:18	2	init
arg	15:15	15:18	3	ctx
water	15:15	0:0	4	ctx
water	15:19	0:0	2	;
if	16:4	17:18	2	(ret < 0)
cond	16:8	16:14	3	ret < 0
water	16:8	0:0	4	ret
op	16:12	0:0	4	<
water	16:14	0:0	4	0
stmts	17:8	17:18	3	
return	17:8	17:18	4	ret
water	17:15	0:0	5	ret
water	18:4	0:0	2	ass
op	18:7	0:0	2	->
water	18:9	0:0	2	track
op	18:15	0:0	2	=
call	18:17	18:43	2	ass_new_track
arg	18:31	18:43	3	ass->library
water	18:31	0:0	4	ass
op	18:34	0:0	4	->
water	18:36	0:0	4	library
water	18:44	0:0	2	;
if	19:4	22:4	2	(! ass -> track)
cond	19:8	19:14	3	! ass -> track
op	19:8	0:0	4	!
water	19:9	0:0	4	ass
op	19:12	0:0	4	->
water	19:14	0:0	4	track
stmts	19:21	22:4	3	
water	19:21	0:0	4	{
call	20:8	20:69	4	av_log
arg	20:15	20:18	5	ctx
water	20:15	0:0	6	ctx
arg	20:20	20:32	5	AV_LOG_ERROR
water	20:20	0:0	6	AV_LOG_ERROR
arg	20:34	20:69	5	"Could not create a libass track\n"
water	20:34	0:0	6	"Could not create a libass track\n"
water	20:70	0:0	4	;
return	21:8	21:30	4	AVERROR(EINVAL)
call	21:15	21:29	5	AVERROR
arg	21:23	21:29	6	EINVAL
water	21:23	0:0	7	EINVAL
water	22:4	0:0	4	}
water	24:4	0:0	2	ret
op	24:8	0:0	2	=
call	24:10	24:61	2	avformat_open_input
arg	24:30	24:34	3	&fmt
op	24:30	0:0	4	&
water	24:31	0:0	4	fmt
arg	24:36	24:49	3	ass->filename
water	24:36	0:0	4	ass
op	24:39	0:0	4	->
water	24:41	0:0	4	filename
arg	24:51	24:55	3	NULL
water	24:51	0:0	4	NULL
arg	24:57	24:61	3	NULL
water	24:57	0:0	4	NULL
water	24:62	0:0	2	;
if	25:4	28:4	2	(ret < 0)
cond	25:8	25:14	3	ret < 0
water	25:8	0:0	4	ret
op	25:12	0:0	4	<
water	25:14	0:0	4	0
stmts	25:17	28:4	3	
water	25:17	0:0	4	{
call	26:8	26:70	4	av_log
arg	26:15	26:18	5	ctx
water	26:15	0:0	6	ctx
arg	26:20	26:32	5	AV_LOG_ERROR
water	26:20	0:0	6	AV_LOG_ERROR
arg	26:34	26:55	5	"Unable to open %s\n"
water	26:34	0:0	6	"Unable to open %s\n"
arg	26:57	26:70	5	ass->filename
water	26:57	0:0	6	ass
op	26:60	0:0	6	->
water	26:62	0:0	6	filename
water	26:71	0:0	4	;
goto	27:8	27:16	4	end
water	27:13	0:0	5	end
water	28:4	0:0	4	}
water	29:4	0:0	2	ret
op	29:8	0:0	2	=
call	29:10	29:45	2	avformat_find_stream_info
arg	29:36	29:39	3	fmt
water	29:36	0:0	4	fmt
arg	29:41	29:45	3	NULL
water	29:41	0:0	4	NULL
water	29:46	0:0	2	;
if	30:4	31:16	2	(ret < 0)
cond	30:8	30:14	3	ret < 0
water	30:8	0:0	4	ret
op	30:12	0:0	4	<
water	30:14	0:0	4	0
stmts	31:8	31:16	3	
goto	31:8	31:16	4	end
water	31:13	0:0	5	end
if	33:4	34:78	2	(ass -> stream_index < 0)
cond	33:8	33:28	3	ass -> stream_index < 0
water	33:8	0:0	4	ass
op	33:11	0:0	4	->
water	33:13	0:0	4	stream_index
op	33:26	0:0	4	<
water	33:28	0:0	4	0
stmts	34:8	34:78	3	
water	34:8	0:0	4	ret
op	34:12	0:0	4	=
call	34:14	34:77	4	av_find_best_stream
arg	34:34	34:37	5	fmt
water	34:34	0:0	6	fmt
arg	34:39	34:60	5	AVMEDIA_TYPE_SUBTITLE
water	34:39	0:0	6	AVMEDIA_TYPE_SUBTITLE
arg	34:62	34:64	5	-1
op	34:62	0:0	6	-
water	34:63	0:0	6	1
arg	34:66	34:68	5	-1
op	34:66	0:0	6	-
water	34:67	0:0	6	1
arg	34:70	34:74	5	NULL
water	34:70	0:0	6	NULL
arg	34:76	34:77	5	0
water	34:76	0:0	6	0
water	34:78	0:0	4	;
else	35:4	48:4	2
stmts	35:9	48:4	3	
water	35:9	0:0	4	{
water	36:8	0:0	4	ret
op	36:12	0:0	4	=
op	36:14	0:0	4	-
water	36:15	0:0	4	1
water	36:16	0:0	4	;
if	37:8	47:8	4	(ass -> stream_index < fmt -> nb_streams)
cond	37:12	37:37	5	ass -> stream_index < fmt -> nb_streams
water	37:12	0:0	6	ass
op	37:15	0:0	6	->
water	37:17	0:0	6	stream_index
op	37:30	0:0	6	<
water	37:32	0:0	6	fmt
op	37:35	0:0	6	->
water	37:37	0:0	6	nb_streams
stmts	37:49	47:8	5	
water	37:49	0:0	6	{
for	38:12	46:12	6	(j = 0 ;j < fmt -> nb_streams;j ++)
forinit	38:17	38:22	7	j = 0 ;
water	38:17	0:0	8	j
op	38:19	0:0	8	=
water	38:21	0:0	8	0
water	38:22	0:0	8	;
cond	38:24	38:33	7	j < fmt -> nb_streams
water	38:24	0:0	8	j
op	38:26	0:0	8	<
water	38:28	0:0	8	fmt
op	38:31	0:0	8	->
water	38:33	0:0	8	nb_streams
forexpr	38:45	38:46	7	j ++
water	38:45	0:0	8	j
op	38:46	0:0	8	++
stmts	38:50	46:12	7	
water	38:50	0:0	8	{
if	39:16	45:16	8	(fmt -> streams [ j ] -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE)
cond	39:20	39:58	9	fmt -> streams [ j ] -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE
water	39:20	0:0	10	fmt
op	39:23	0:0	10	->
water	39:25	0:0	10	streams
op	39:32	0:0	10	[
water	39:33	0:0	10	j
op	39:34	0:0	10	]
op	39:35	0:0	10	->
water	39:37	0:0	10	codec
op	39:42	0:0	10	->
water	39:44	0:0	10	codec_type
op	39:55	0:0	10	==
water	39:58	0:0	10	AVMEDIA_TYPE_SUBTITLE
stmts	39:81	45:16	9	
water	39:81	0:0	10	{
if	40:20	43:20	10	(ass -> stream_index == k)
cond	40:24	40:45	11	ass -> stream_index == k
water	40:24	0:0	12	ass
op	40:27	0:0	12	->
water	40:29	0:0	12	stream_index
op	40:42	0:0	12	==
water	40:45	0:0	12	k
stmts	40:48	43:20	11	
water	40:48	0:0	12	{
water	41:24	0:0	12	ret
op	41:28	0:0	12	=
water	41:30	0:0	12	j
water	41:31	0:0	12	;
break	42:24	42:29	12	
water	43:20	0:0	12	}
water	44:20	0:0	10	k
op	44:21	0:0	10	++
water	44:23	0:0	10	;
water	45:16	0:0	10	}
water	46:12	0:0	8	}
water	47:8	0:0	6	}
water	48:4	0:0	4	}
if	49:4	53:4	2	(ret < 0)
cond	49:8	49:14	3	ret < 0
water	49:8	0:0	4	ret
op	49:12	0:0	4	<
water	49:14	0:0	4	0
stmts	49:17	53:4	3	
water	49:17	0:0	4	{
call	50:8	51:28	4	av_log
arg	50:15	50:18	5	ctx
water	50:15	0:0	6	ctx
arg	50:20	50:32	5	AV_LOG_ERROR
water	50:20	0:0	6	AV_LOG_ERROR
arg	50:34	50:76	5	"Unable to locate subtitle stream in %s\n"
water	50:34	0:0	6	"Unable to locate subtitle stream in %s\n"
arg	51:15	51:28	5	ass->filename
water	51:15	0:0	6	ass
op	51:18	0:0	6	->
water	51:20	0:0	6	filename
water	51:29	0:0	4	;
goto	52:8	52:16	4	end
water	52:13	0:0	5	end
water	53:4	0:0	4	}
water	54:4	0:0	2	sid
op	54:8	0:0	2	=
water	54:10	0:0	2	ret
water	54:13	0:0	2	;
water	55:4	0:0	2	st
op	55:7	0:0	2	=
water	55:9	0:0	2	fmt
op	55:12	0:0	2	->
water	55:14	0:0	2	streams
op	55:21	0:0	2	[
water	55:22	0:0	2	sid
op	55:25	0:0	2	]
water	55:26	0:0	2	;
for	57:4	75:4	2	(j = 0 ;j < fmt -> nb_streams;j ++)
forinit	57:9	57:14	3	j = 0 ;
water	57:9	0:0	4	j
op	57:11	0:0	4	=
water	57:13	0:0	4	0
water	57:14	0:0	4	;
cond	57:16	57:25	3	j < fmt -> nb_streams
water	57:16	0:0	4	j
op	57:18	0:0	4	<
water	57:20	0:0	4	fmt
op	57:23	0:0	4	->
water	57:25	0:0	4	nb_streams
forexpr	57:37	57:38	3	j ++
water	57:37	0:0	4	j
op	57:38	0:0	4	++
stmts	57:42	75:4	3	
water	57:42	0:0	4	{
decl	58:8	58:38	4	AVStream	*st
op	58:21	0:0	4	=
water	58:23	0:0	4	fmt
op	58:26	0:0	4	->
water	58:28	0:0	4	streams
op	58:35	0:0	4	[
water	58:36	0:0	4	j
op	58:37	0:0	4	]
if	59:8	74:8	4	(st -> codec -> codec_type == AVMEDIA_TYPE_ATTACHMENT &&attachment_is_font (st ))
cond	59:12	60:33	5	st -> codec -> codec_type == AVMEDIA_TYPE_ATTACHMENT &&attachment_is_font (st )
water	59:12	0:0	6	st
op	59:14	0:0	6	->
water	59:16	0:0	6	codec
op	59:21	0:0	6	->
water	59:23	0:0	6	codec_type
op	59:34	0:0	6	==
water	59:37	0:0	6	AVMEDIA_TYPE_ATTACHMENT
op	59:61	0:0	6	&&
call	60:12	60:33	6	attachment_is_font
arg	60:31	60:33	7	st
water	60:31	0:0	8	st
stmts	60:36	74:8	5	
water	60:36	0:0	6	{
decl	61:12	61:47	6	const AVDictionaryEntry	*tag
op	61:41	0:0	6	=
water	61:43	0:0	6	NULL
water	62:12	0:0	6	tag
op	62:16	0:0	6	=
call	62:18	63:48	6	av_dict_get
arg	62:30	62:42	7	st->metadata
water	62:30	0:0	8	st
op	62:32	0:0	8	->
water	62:34	0:0	8	metadata
arg	62:44	62:54	7	"filename"
water	62:44	0:0	8	"filename"
arg	62:56	62:60	7	NULL
water	62:56	0:0	8	NULL
arg	63:30	63:48	7	AV_DICT_MATCH_CASE
water	63:30	0:0	8	AV_DICT_MATCH_CASE
water	63:49	0:0	6	;
if	64:12	70:12	6	(tag)
cond	64:16	64:16	7	tag
water	64:16	0:0	8	tag
stmts	64:21	70:12	7	
water	64:21	0:0	8	{
call	65:16	66:33	8	av_log
arg	65:23	65:26	9	ctx
water	65:23	0:0	10	ctx
arg	65:28	65:40	9	AV_LOG_DEBUG
water	65:28	0:0	10	AV_LOG_DEBUG
arg	65:42	65:71	9	"Loading attached font: %s\n"
water	65:42	0:0	10	"Loading attached font: %s\n"
arg	66:23	66:33	9	tag->value
water	66:23	0:0	10	tag
op	66:26	0:0	10	->
water	66:28	0:0	10	value
water	66:34	0:0	8	;
call	67:16	69:54	8	ass_add_font
arg	67:29	67:41	9	ass->library
water	67:29	0:0	10	ass
op	67:32	0:0	10	->
water	67:34	0:0	10	library
arg	67:43	67:53	9	tag->value
water	67:43	0:0	10	tag
op	67:46	0:0	10	->
water	67:48	0:0	10	value
arg	68:29	68:49	9	st->codec->extradata
water	68:29	0:0	10	st
op	68:31	0:0	10	->
water	68:33	0:0	10	codec
op	68:38	0:0	10	->
water	68:40	0:0	10	extradata
arg	69:29	69:54	9	st->codec->extradata_size
water	69:29	0:0	10	st
op	69:31	0:0	10	->
water	69:33	0:0	10	codec
op	69:38	0:0	10	->
water	69:40	0:0	10	extradata_size
water	69:55	0:0	8	;
water	70:12	0:0	8	}
else	70:14	73:12	6
stmts	70:19	73:12	7	
water	70:19	0:0	8	{
call	71:16	72:68	8	av_log
arg	71:23	71:26	9	ctx
water	71:23	0:0	10	ctx
arg	71:28	71:42	9	AV_LOG_WARNING
water	71:28	0:0	10	AV_LOG_WARNING
arg	72:23	72:68	9	"Font attachment has no filename, ignored.\n"
water	72:23	0:0	10	"Font attachment has no filename, ignored.\n"
water	72:69	0:0	8	;
water	73:12	0:0	8	}
water	74:8	0:0	6	}
water	75:4	0:0	4	}
call	77:4	77:55	2	ass_set_fonts
arg	77:18	77:31	3	ass->renderer
water	77:18	0:0	4	ass
op	77:21	0:0	4	->
water	77:23	0:0	4	renderer
arg	77:33	77:37	3	NULL
water	77:33	0:0	4	NULL
arg	77:39	77:43	3	NULL
water	77:39	0:0	4	NULL
arg	77:45	77:46	3	1
water	77:45	0:0	4	1
arg	77:48	77:52	3	NULL
water	77:48	0:0	4	NULL
arg	77:54	77:55	3	1
water	77:54	0:0	4	1
water	77:56	0:0	2	;
water	79:4	0:0	2	dec_ctx
op	79:12	0:0	2	=
water	79:14	0:0	2	st
op	79:16	0:0	2	->
water	79:18	0:0	2	codec
water	79:23	0:0	2	;
water	80:4	0:0	2	dec
op	80:8	0:0	2	=
call	80:10	80:48	2	avcodec_find_decoder
arg	80:31	80:48	3	dec_ctx->codec_id
water	80:31	0:0	4	dec_ctx
op	80:38	0:0	4	->
water	80:40	0:0	4	codec_id
water	80:49	0:0	2	;
if	81:4	85:4	2	(! dec)
cond	81:8	81:9	3	! dec
op	81:8	0:0	4	!
water	81:9	0:0	4	dec
stmts	81:14	85:4	3	
water	81:14	0:0	4	{
call	82:8	83:50	4	av_log
arg	82:15	82:18	5	ctx
water	82:15	0:0	6	ctx
arg	82:20	82:32	5	AV_LOG_ERROR
water	82:20	0:0	6	AV_LOG_ERROR
arg	82:34	82:70	5	"Failed to find subtitle codec %s\n"
water	82:34	0:0	6	"Failed to find subtitle codec %s\n"
arg	83:15	83:50	5	avcodec_get_name(dec_ctx->codec_id)
call	83:15	83:49	6	avcodec_get_name
arg	83:32	83:49	7	dec_ctx->codec_id
water	83:32	0:0	8	dec_ctx
op	83:39	0:0	8	->
water	83:41	0:0	8	codec_id
water	83:51	0:0	4	;
return	84:8	84:30	4	AVERROR(EINVAL)
call	84:15	84:29	5	AVERROR
arg	84:23	84:29	6	EINVAL
water	84:23	0:0	7	EINVAL
water	85:4	0:0	4	}
water	86:4	0:0	2	dec_desc
op	86:13	0:0	2	=
call	86:15	86:55	2	avcodec_descriptor_get
arg	86:38	86:55	3	dec_ctx->codec_id
water	86:38	0:0	4	dec_ctx
op	86:45	0:0	4	->
water	86:47	0:0	4	codec_id
water	86:56	0:0	2	;
if	87:4	91:4	2	(dec_desc && ! ( dec_desc -> props & AV_CODEC_PROP_TEXT_SUB ))
cond	87:8	87:62	3	dec_desc && ! ( dec_desc -> props & AV_CODEC_PROP_TEXT_SUB )
water	87:8	0:0	4	dec_desc
op	87:17	0:0	4	&&
op	87:20	0:0	4	!
water	87:21	0:0	4	(
water	87:22	0:0	4	dec_desc
op	87:30	0:0	4	->
water	87:32	0:0	4	props
op	87:38	0:0	4	&
water	87:40	0:0	4	AV_CODEC_PROP_TEXT_SUB
water	87:62	0:0	4	)
stmts	87:65	91:4	3	
water	87:65	0:0	4	{
call	88:8	89:68	4	av_log
arg	88:15	88:18	5	ctx
water	88:15	0:0	6	ctx
arg	88:20	88:32	5	AV_LOG_ERROR
water	88:20	0:0	6	AV_LOG_ERROR
arg	89:15	89:68	5	"Only text based subtitles are currently supported\n"
water	89:15	0:0	6	"Only text based subtitles are currently supported\n"
water	89:69	0:0	4	;
return	90:8	90:35	4	AVERROR_PATCHWELCOME
water	90:15	0:0	5	AVERROR_PATCHWELCOME
water	91:4	0:0	4	}
if	92:4	93:64	2	(ass -> charenc)
cond	92:8	92:13	3	ass -> charenc
water	92:8	0:0	4	ass
op	92:11	0:0	4	->
water	92:13	0:0	4	charenc
stmts	93:8	93:64	3	
call	93:8	93:63	4	av_dict_set
arg	93:20	93:31	5	&codec_opts
op	93:20	0:0	6	&
water	93:21	0:0	6	codec_opts
arg	93:33	93:46	5	"sub_charenc"
water	93:33	0:0	6	"sub_charenc"
arg	93:48	93:60	5	ass->charenc
water	93:48	0:0	6	ass
op	93:51	0:0	6	->
water	93:53	0:0	6	charenc
arg	93:62	93:63	5	0
water	93:62	0:0	6	0
water	93:64	0:0	4	;
water	94:4	0:0	2	ret
op	94:8	0:0	2	=
call	94:10	94:49	2	avcodec_open2
arg	94:24	94:31	3	dec_ctx
water	94:24	0:0	4	dec_ctx
arg	94:33	94:36	3	dec
water	94:33	0:0	4	dec
arg	94:38	94:49	3	&codec_opts
op	94:38	0:0	4	&
water	94:39	0:0	4	codec_opts
water	94:50	0:0	2	;
if	95:4	96:16	2	(ret < 0)
cond	95:8	95:14	3	ret < 0
water	95:8	0:0	4	ret
op	95:12	0:0	4	<
water	95:14	0:0	4	0
stmts	96:8	96:16	3	
goto	96:8	96:16	4	end
water	96:13	0:0	5	end
if	97:4	117:4	2	(ass -> force_style)
cond	97:8	97:13	3	ass -> force_style
water	97:8	0:0	4	ass
op	97:11	0:0	4	->
water	97:13	0:0	4	force_style
stmts	97:26	117:4	3	
water	97:26	0:0	4	{
decl	98:8	98:26	4	char	**list
op	98:20	0:0	4	=
water	98:22	0:0	4	NULL
decl	99:8	99:25	4	char	*temp
op	99:19	0:0	4	=
water	99:21	0:0	4	NULL
decl	100:8	100:59	4	char	*ptr
op	100:18	0:0	4	=
call	100:20	100:58	5	av_strtok
arg	100:30	100:46	6	ass->force_style
water	100:30	0:0	7	ass
op	100:33	0:0	7	->
water	100:35	0:0	7	force_style
arg	100:48	100:51	6	","
water	100:48	0:0	7	","
arg	100:53	100:58	6	&temp
op	100:53	0:0	7	&
water	100:54	0:0	7	temp
decl	101:8	101:17	4	int	i
op	101:14	0:0	4	=
water	101:16	0:0	4	0
while	102:8	109:8	4	(ptr)
cond	102:15	102:15	5	ptr
water	102:15	0:0	6	ptr
stmts	102:20	109:8	5	
water	102:20	0:0	6	{
call	103:12	103:42	6	av_dynarray_add
arg	103:28	103:33	7	&list
op	103:28	0:0	8	&
water	103:29	0:0	8	list
arg	103:35	103:37	7	&i
op	103:35	0:0	8	&
water	103:36	0:0	8	i
arg	103:39	103:42	7	ptr
water	103:39	0:0	8	ptr
water	103:43	0:0	6	;
if	104:12	107:12	6	(! list)
cond	104:16	104:17	7	! list
op	104:16	0:0	8	!
water	104:17	0:0	8	list
stmts	104:23	107:12	7	
water	104:23	0:0	8	{
water	105:16	0:0	8	ret
op	105:20	0:0	8	=
call	105:22	105:36	8	AVERROR
arg	105:30	105:36	9	ENOMEM
water	105:30	0:0	10	ENOMEM
water	105:37	0:0	8	;
goto	106:16	106:24	8	end
water	106:21	0:0	9	end
water	107:12	0:0	8	}
water	108:12	0:0	6	ptr
op	108:16	0:0	6	=
call	108:18	108:44	6	av_strtok
arg	108:28	108:32	7	NULL
water	108:28	0:0	8	NULL
arg	108:34	108:37	7	","
water	108:34	0:0	8	","
arg	108:39	108:44	7	&temp
op	108:39	0:0	8	&
water	108:40	0:0	8	temp
water	108:45	0:0	6	;
water	109:8	0:0	6	}
call	110:8	110:39	4	av_dynarray_add
arg	110:24	110:29	5	&list
op	110:24	0:0	6	&
water	110:25	0:0	6	list
arg	110:31	110:33	5	&i
op	110:31	0:0	6	&
water	110:32	0:0	6	i
arg	110:35	110:39	5	NULL
water	110:35	0:0	6	NULL
water	110:40	0:0	4	;
if	111:8	114:8	4	(! list)
cond	111:12	111:13	5	! list
op	111:12	0:0	6	!
water	111:13	0:0	6	list
stmts	111:19	114:8	5	
water	111:19	0:0	6	{
water	112:12	0:0	6	ret
op	112:16	0:0	6	=
call	112:18	112:32	6	AVERROR
arg	112:26	112:32	7	ENOMEM
water	112:26	0:0	8	ENOMEM
water	112:33	0:0	6	;
goto	113:12	113:20	6	end
water	113:17	0:0	7	end
water	114:8	0:0	6	}
call	115:8	115:50	4	ass_set_style_overrides
arg	115:32	115:44	5	ass->library
water	115:32	0:0	6	ass
op	115:35	0:0	6	->
water	115:37	0:0	6	library
arg	115:46	115:50	5	list
water	115:46	0:0	6	list
water	115:51	0:0	4	;
call	116:8	116:20	4	av_free
arg	116:16	116:20	5	list
water	116:16	0:0	6	list
water	116:21	0:0	4	;
water	117:4	0:0	4	}
if	119:4	122:64	2	(dec_ctx -> subtitle_header)
cond	119:8	119:17	3	dec_ctx -> subtitle_header
water	119:8	0:0	4	dec_ctx
op	119:15	0:0	4	->
water	119:17	0:0	4	subtitle_header
stmts	120:8	122:64	3	
call	120:8	122:63	4	ass_process_codec_private
arg	120:34	120:44	5	ass->track
water	120:34	0:0	6	ass
op	120:37	0:0	6	->
water	120:39	0:0	6	track
arg	121:34	121:58	5	dec_ctx->subtitle_header
water	121:34	0:0	6	dec_ctx
op	121:41	0:0	6	->
water	121:43	0:0	6	subtitle_header
arg	122:34	122:63	5	dec_ctx->subtitle_header_size
water	122:34	0:0	6	dec_ctx
op	122:41	0:0	6	->
water	122:43	0:0	6	subtitle_header_size
water	122:64	0:0	4	;
call	123:4	123:23	2	av_init_packet
arg	123:19	123:23	3	&pkt
op	123:19	0:0	4	&
water	123:20	0:0	4	pkt
water	123:24	0:0	2	;
water	124:4	0:0	2	pkt
op	124:7	0:0	2	.
water	124:8	0:0	2	data
op	124:13	0:0	2	=
water	124:15	0:0	2	NULL
water	124:19	0:0	2	;
water	125:4	0:0	2	pkt
op	125:7	0:0	2	.
water	125:8	0:0	2	size
op	125:13	0:0	2	=
water	125:15	0:0	2	0
water	125:16	0:0	2	;
while	126:4	145:4	2	(av_read_frame (fmt ,& pkt ) >= 0)
cond	126:11	126:39	3	av_read_frame (fmt ,& pkt ) >= 0
call	126:11	126:34	4	av_read_frame
arg	126:25	126:28	5	fmt
water	126:25	0:0	6	fmt
arg	126:30	126:34	5	&pkt
op	126:30	0:0	6	&
water	126:31	0:0	6	pkt
op	126:36	0:0	4	>=
water	126:39	0:0	4	0
stmts	126:42	145:4	3	
water	126:42	0:0	4	{
decl	127:8	127:27	4	int	i
water	127:13	0:0	4	,
decl	127:8	127:27	4	int	got_subtitle
decl	128:8	128:28	4	AVSubtitle	sub
op	128:23	0:0	4	=
water	128:25	0:0	4	{
water	128:26	0:0	4	0
water	128:27	0:0	4	}
if	129:8	142:8	4	(pkt . stream_index == sid)
cond	129:12	129:32	5	pkt . stream_index == sid
water	129:12	0:0	6	pkt
op	129:15	0:0	6	.
water	129:16	0:0	6	stream_index
op	129:29	0:0	6	==
water	129:32	0:0	6	sid
stmts	129:37	142:8	5	
water	129:37	0:0	6	{
water	130:12	0:0	6	ret
op	130:16	0:0	6	=
call	130:18	130:77	6	avcodec_decode_subtitle2
arg	130:43	130:50	7	dec_ctx
water	130:43	0:0	8	dec_ctx
arg	130:52	130:56	7	&sub
op	130:52	0:0	8	&
water	130:53	0:0	8	sub
arg	130:58	130:71	7	&got_subtitle
op	130:58	0:0	8	&
water	130:59	0:0	8	got_subtitle
arg	130:73	130:77	7	&pkt
op	130:73	0:0	8	&
water	130:74	0:0	8	pkt
water	130:78	0:0	6	;
if	131:12	134:12	6	(ret < 0)
cond	131:16	131:22	7	ret < 0
water	131:16	0:0	8	ret
op	131:20	0:0	8	<
water	131:22	0:0	8	0
stmts	131:25	134:12	7	
water	131:25	0:0	8	{
call	132:16	133:38	8	av_log
arg	132:23	132:26	9	ctx
water	132:23	0:0	10	ctx
arg	132:28	132:42	9	AV_LOG_WARNING
water	132:28	0:0	10	AV_LOG_WARNING
arg	132:44	132:76	9	"Error decoding: %s (ignored)\n"
water	132:44	0:0	10	"Error decoding: %s (ignored)\n"
arg	133:23	133:38	9	av_err2str(ret)
call	133:23	133:37	10	av_err2str
arg	133:34	133:37	11	ret
water	133:34	0:0	12	ret
water	133:39	0:0	8	;
water	134:12	0:0	8	}
else	134:14	141:12	6
stmts	134:19	141:12	7	
if	134:19	141:12	8	(got_subtitle)
cond	134:23	134:23	9	got_subtitle
water	134:23	0:0	10	got_subtitle
stmts	134:37	141:12	9	
water	134:37	0:0	10	{
for	135:16	140:16	10	(i = 0 ;i < sub . num_rects;i ++)
forinit	135:21	135:26	11	i = 0 ;
water	135:21	0:0	12	i
op	135:23	0:0	12	=
water	135:25	0:0	12	0
water	135:26	0:0	12	;
cond	135:28	135:36	11	i < sub . num_rects
water	135:28	0:0	12	i
op	135:30	0:0	12	<
water	135:32	0:0	12	sub
op	135:35	0:0	12	.
water	135:36	0:0	12	num_rects
forexpr	135:47	135:48	11	i ++
water	135:47	0:0	12	i
op	135:48	0:0	12	++
stmts	135:52	140:16	11	
water	135:52	0:0	12	{
decl	136:20	136:54	12	char	*ass_line
op	136:35	0:0	12	=
water	136:37	0:0	12	sub
op	136:40	0:0	12	.
water	136:41	0:0	12	rects
op	136:46	0:0	12	[
water	136:47	0:0	12	i
op	136:48	0:0	12	]
op	136:49	0:0	12	->
water	136:51	0:0	12	ass
if	137:20	138:29	12	(! ass_line)
cond	137:24	137:25	13	! ass_line
op	137:24	0:0	14	!
water	137:25	0:0	14	ass_line
stmts	138:24	138:29	13	
break	138:24	138:29	14	
call	139:20	139:75	12	ass_process_data
arg	139:37	139:47	13	ass->track
water	139:37	0:0	14	ass
op	139:40	0:0	14	->
water	139:42	0:0	14	track
arg	139:49	139:57	13	ass_line
water	139:49	0:0	14	ass_line
arg	139:59	139:75	13	strlen(ass_line)
call	139:59	139:74	14	strlen
arg	139:66	139:74	15	ass_line
water	139:66	0:0	16	ass_line
water	139:76	0:0	12	;
water	140:16	0:0	12	}
water	141:12	0:0	10	}
water	142:8	0:0	6	}
call	143:8	143:27	4	av_free_packet
arg	143:23	143:27	5	&pkt
op	143:23	0:0	6	&
water	143:24	0:0	6	pkt
water	143:28	0:0	4	;
call	144:8	144:28	4	avsubtitle_free
arg	144:24	144:28	5	&sub
op	144:24	0:0	6	&
water	144:25	0:0	6	sub
water	144:29	0:0	4	;
water	145:4	0:0	4	}
label	146:0	146:3	2	end :
call	147:4	147:28	2	av_dict_free
arg	147:17	147:28	3	&codec_opts
op	147:17	0:0	4	&
water	147:18	0:0	4	codec_opts
water	147:29	0:0	2	;
if	148:4	149:30	2	(dec_ctx)
cond	148:8	148:8	3	dec_ctx
water	148:8	0:0	4	dec_ctx
stmts	149:8	149:30	3	
call	149:8	149:29	4	avcodec_close
arg	149:22	149:29	5	dec_ctx
water	149:22	0:0	6	dec_ctx
water	149:30	0:0	4	;
if	150:4	151:34	2	(fmt)
cond	150:8	150:8	3	fmt
water	150:8	0:0	4	fmt
stmts	151:8	151:34	3	
call	151:8	151:33	4	avformat_close_input
arg	151:29	151:33	5	&fmt
op	151:29	0:0	6	&
water	151:30	0:0	6	fmt
water	151:34	0:0	4	;
return	152:4	152:14	2	ret
water	152:11	0:0	3	ret
