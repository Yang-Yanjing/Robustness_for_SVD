func	1:0	64:0	0	static int	dshow_read_close
params	2:16	0:0	1	
param	2:17	2:35	2	AVFormatContext *	s
stmnts	0:0	63:12	1	
decl	4:4	4:40	2	struct dshow_ctx	*ctx
op	4:26	0:0	2	=
water	4:28	0:0	2	s
op	4:29	0:0	2	->
water	4:31	0:0	2	priv_data
decl	5:4	5:22	2	AVPacketList	*pktl
if	6:4	9:4	2	(ctx -> control)
cond	6:8	6:13	3	ctx -> control
water	6:8	0:0	4	ctx
op	6:11	0:0	4	->
water	6:13	0:0	4	control
stmts	6:22	9:4	3	
water	6:22	0:0	4	{
call	7:8	7:39	4	IMediaControl_Stop
arg	7:27	7:39	5	ctx->control
water	7:27	0:0	6	ctx
op	7:30	0:0	6	->
water	7:32	0:0	6	control
water	7:40	0:0	4	;
call	8:8	8:42	4	IMediaControl_Release
arg	8:30	8:42	5	ctx->control
water	8:30	0:0	6	ctx
op	8:33	0:0	6	->
water	8:35	0:0	6	control
water	8:43	0:0	4	;
water	9:4	0:0	4	}
if	10:4	11:45	2	(ctx -> media_event)
cond	10:8	10:13	3	ctx -> media_event
water	10:8	0:0	4	ctx
op	10:11	0:0	4	->
water	10:13	0:0	4	media_event
stmts	11:8	11:45	3	
call	11:8	11:44	4	IMediaEvent_Release
arg	11:28	11:44	5	ctx->media_event
water	11:28	0:0	6	ctx
op	11:31	0:0	6	->
water	11:33	0:0	6	media_event
water	11:45	0:0	4	;
if	12:4	28:4	2	(ctx -> graph)
cond	12:8	12:13	3	ctx -> graph
water	12:8	0:0	4	ctx
op	12:11	0:0	4	->
water	12:13	0:0	4	graph
stmts	12:20	28:4	3	
water	12:20	0:0	4	{
decl	13:8	13:27	4	IEnumFilters	*fenum
decl	14:8	14:13	4	int	r
water	15:8	0:0	4	r
op	15:10	0:0	4	=
call	15:12	15:56	4	IGraphBuilder_EnumFilters
arg	15:38	15:48	5	ctx->graph
water	15:38	0:0	6	ctx
op	15:41	0:0	6	->
water	15:43	0:0	6	graph
arg	15:50	15:56	5	&fenum
op	15:50	0:0	6	&
water	15:51	0:0	6	fenum
water	15:57	0:0	4	;
if	16:8	26:8	4	(r == S_OK)
cond	16:12	16:17	5	r == S_OK
water	16:12	0:0	6	r
op	16:14	0:0	6	==
water	16:17	0:0	6	S_OK
stmts	16:23	26:8	5	
water	16:23	0:0	6	{
decl	17:12	17:26	6	IBaseFilter	*f
call	18:12	18:36	6	IEnumFilters_Reset
arg	18:31	18:36	7	fenum
water	18:31	0:0	8	fenum
water	18:37	0:0	6	;
while	19:12	24:12	6	(IEnumFilters_Next (fenum ,1 ,& f ,NULL ) == S_OK)
cond	19:19	19:60	7	IEnumFilters_Next (fenum ,1 ,& f ,NULL ) == S_OK
call	19:19	19:55	8	IEnumFilters_Next
arg	19:37	19:42	9	fenum
water	19:37	0:0	10	fenum
arg	19:44	19:45	9	1
water	19:44	0:0	10	1
arg	19:47	19:49	9	&f
op	19:47	0:0	10	&
water	19:48	0:0	10	f
arg	19:51	19:55	9	NULL
water	19:51	0:0	10	NULL
op	19:57	0:0	8	==
water	19:60	0:0	8	S_OK
stmts	19:66	24:12	7	
water	19:66	0:0	8	{
if	20:16	21:45	8	(IGraphBuilder_RemoveFilter (ctx -> graph ,f ) == S_OK)
cond	20:20	20:65	9	IGraphBuilder_RemoveFilter (ctx -> graph ,f ) == S_OK
call	20:20	20:60	10	IGraphBuilder_RemoveFilter
arg	20:47	20:57	11	ctx->graph
water	20:47	0:0	12	ctx
op	20:50	0:0	12	->
water	20:52	0:0	12	graph
arg	20:59	20:60	11	f
water	20:59	0:0	12	f
op	20:62	0:0	10	==
water	20:65	0:0	10	S_OK
stmts	21:20	21:45	9	
call	21:20	21:44	10	IEnumFilters_Reset
arg	21:39	21:44	11	fenum
water	21:39	0:0	12	fenum
water	21:45	0:0	10	;
call	23:16	23:37	8	IBaseFilter_Release
arg	23:36	23:37	9	f
water	23:36	0:0	10	f
water	23:38	0:0	8	;
water	24:12	0:0	8	}
call	25:12	25:38	6	IEnumFilters_Release
arg	25:33	25:38	7	fenum
water	25:33	0:0	8	fenum
water	25:39	0:0	6	;
water	26:8	0:0	6	}
call	27:8	27:40	4	IGraphBuilder_Release
arg	27:30	27:40	5	ctx->graph
water	27:30	0:0	6	ctx
op	27:33	0:0	6	->
water	27:35	0:0	6	graph
water	27:41	0:0	4	;
water	28:4	0:0	4	}
if	29:4	30:55	2	(ctx -> capture_pin [ VideoDevice ])
cond	29:8	29:36	3	ctx -> capture_pin [ VideoDevice ]
water	29:8	0:0	4	ctx
op	29:11	0:0	4	->
water	29:13	0:0	4	capture_pin
op	29:24	0:0	4	[
water	29:25	0:0	4	VideoDevice
op	29:36	0:0	4	]
stmts	30:8	30:55	3	
call	30:8	30:54	4	libAVPin_Release
arg	30:25	30:54	5	ctx->capture_pin[VideoDevice]
water	30:25	0:0	6	ctx
op	30:28	0:0	6	->
water	30:30	0:0	6	capture_pin
op	30:41	0:0	6	[
water	30:42	0:0	6	VideoDevice
op	30:53	0:0	6	]
water	30:55	0:0	4	;
if	31:4	32:55	2	(ctx -> capture_pin [ AudioDevice ])
cond	31:8	31:36	3	ctx -> capture_pin [ AudioDevice ]
water	31:8	0:0	4	ctx
op	31:11	0:0	4	->
water	31:13	0:0	4	capture_pin
op	31:24	0:0	4	[
water	31:25	0:0	4	AudioDevice
op	31:36	0:0	4	]
stmts	32:8	32:55	3	
call	32:8	32:54	4	libAVPin_Release
arg	32:25	32:54	5	ctx->capture_pin[AudioDevice]
water	32:25	0:0	6	ctx
op	32:28	0:0	6	->
water	32:30	0:0	6	capture_pin
op	32:41	0:0	6	[
water	32:42	0:0	6	AudioDevice
op	32:53	0:0	6	]
water	32:55	0:0	4	;
if	33:4	34:61	2	(ctx -> capture_filter [ VideoDevice ])
cond	33:8	33:39	3	ctx -> capture_filter [ VideoDevice ]
water	33:8	0:0	4	ctx
op	33:11	0:0	4	->
water	33:13	0:0	4	capture_filter
op	33:27	0:0	4	[
water	33:28	0:0	4	VideoDevice
op	33:39	0:0	4	]
stmts	34:8	34:61	3	
call	34:8	34:60	4	libAVFilter_Release
arg	34:28	34:60	5	ctx->capture_filter[VideoDevice]
water	34:28	0:0	6	ctx
op	34:31	0:0	6	->
water	34:33	0:0	6	capture_filter
op	34:47	0:0	6	[
water	34:48	0:0	6	VideoDevice
op	34:59	0:0	6	]
water	34:61	0:0	4	;
if	35:4	36:61	2	(ctx -> capture_filter [ AudioDevice ])
cond	35:8	35:39	3	ctx -> capture_filter [ AudioDevice ]
water	35:8	0:0	4	ctx
op	35:11	0:0	4	->
water	35:13	0:0	4	capture_filter
op	35:27	0:0	4	[
water	35:28	0:0	4	AudioDevice
op	35:39	0:0	4	]
stmts	36:8	36:61	3	
call	36:8	36:60	4	libAVFilter_Release
arg	36:28	36:60	5	ctx->capture_filter[AudioDevice]
water	36:28	0:0	6	ctx
op	36:31	0:0	6	->
water	36:33	0:0	6	capture_filter
op	36:47	0:0	6	[
water	36:48	0:0	6	AudioDevice
op	36:59	0:0	6	]
water	36:61	0:0	4	;
if	37:4	38:50	2	(ctx -> device_pin [ VideoDevice ])
cond	37:8	37:35	3	ctx -> device_pin [ VideoDevice ]
water	37:8	0:0	4	ctx
op	37:11	0:0	4	->
water	37:13	0:0	4	device_pin
op	37:23	0:0	4	[
water	37:24	0:0	4	VideoDevice
op	37:35	0:0	4	]
stmts	38:8	38:50	3	
call	38:8	38:49	4	IPin_Release
arg	38:21	38:49	5	ctx->device_pin[VideoDevice]
water	38:21	0:0	6	ctx
op	38:24	0:0	6	->
water	38:26	0:0	6	device_pin
op	38:36	0:0	6	[
water	38:37	0:0	6	VideoDevice
op	38:48	0:0	6	]
water	38:50	0:0	4	;
if	39:4	40:50	2	(ctx -> device_pin [ AudioDevice ])
cond	39:8	39:35	3	ctx -> device_pin [ AudioDevice ]
water	39:8	0:0	4	ctx
op	39:11	0:0	4	->
water	39:13	0:0	4	device_pin
op	39:23	0:0	4	[
water	39:24	0:0	4	AudioDevice
op	39:35	0:0	4	]
stmts	40:8	40:50	3	
call	40:8	40:49	4	IPin_Release
arg	40:21	40:49	5	ctx->device_pin[AudioDevice]
water	40:21	0:0	6	ctx
op	40:24	0:0	6	->
water	40:26	0:0	6	device_pin
op	40:36	0:0	6	[
water	40:37	0:0	6	AudioDevice
op	40:48	0:0	6	]
water	40:50	0:0	4	;
if	41:4	42:60	2	(ctx -> device_filter [ VideoDevice ])
cond	41:8	41:38	3	ctx -> device_filter [ VideoDevice ]
water	41:8	0:0	4	ctx
op	41:11	0:0	4	->
water	41:13	0:0	4	device_filter
op	41:26	0:0	4	[
water	41:27	0:0	4	VideoDevice
op	41:38	0:0	4	]
stmts	42:8	42:60	3	
call	42:8	42:59	4	IBaseFilter_Release
arg	42:28	42:59	5	ctx->device_filter[VideoDevice]
water	42:28	0:0	6	ctx
op	42:31	0:0	6	->
water	42:33	0:0	6	device_filter
op	42:46	0:0	6	[
water	42:47	0:0	6	VideoDevice
op	42:58	0:0	6	]
water	42:60	0:0	4	;
if	43:4	44:60	2	(ctx -> device_filter [ AudioDevice ])
cond	43:8	43:38	3	ctx -> device_filter [ AudioDevice ]
water	43:8	0:0	4	ctx
op	43:11	0:0	4	->
water	43:13	0:0	4	device_filter
op	43:26	0:0	4	[
water	43:27	0:0	4	AudioDevice
op	43:38	0:0	4	]
stmts	44:8	44:60	3	
call	44:8	44:59	4	IBaseFilter_Release
arg	44:28	44:59	5	ctx->device_filter[AudioDevice]
water	44:28	0:0	6	ctx
op	44:31	0:0	6	->
water	44:33	0:0	6	device_filter
op	44:46	0:0	6	[
water	44:47	0:0	6	AudioDevice
op	44:58	0:0	6	]
water	44:60	0:0	4	;
if	45:4	46:38	2	(ctx -> device_name [ 0 ])
cond	45:8	45:26	3	ctx -> device_name [ 0 ]
water	45:8	0:0	4	ctx
op	45:11	0:0	4	->
water	45:13	0:0	4	device_name
op	45:24	0:0	4	[
water	45:25	0:0	4	0
op	45:26	0:0	4	]
stmts	46:8	46:38	3	
call	46:8	46:37	4	av_freep
arg	46:17	46:37	5	&ctx->device_name[0]
op	46:17	0:0	6	&
water	46:18	0:0	6	ctx
op	46:21	0:0	6	->
water	46:23	0:0	6	device_name
op	46:34	0:0	6	[
water	46:35	0:0	6	0
op	46:36	0:0	6	]
water	46:38	0:0	4	;
if	47:4	48:38	2	(ctx -> device_name [ 1 ])
cond	47:8	47:26	3	ctx -> device_name [ 1 ]
water	47:8	0:0	4	ctx
op	47:11	0:0	4	->
water	47:13	0:0	4	device_name
op	47:24	0:0	4	[
water	47:25	0:0	4	1
op	47:26	0:0	4	]
stmts	48:8	48:38	3	
call	48:8	48:37	4	av_freep
arg	48:17	48:37	5	&ctx->device_name[1]
op	48:17	0:0	6	&
water	48:18	0:0	6	ctx
op	48:21	0:0	6	->
water	48:23	0:0	6	device_name
op	48:34	0:0	6	[
water	48:35	0:0	6	1
op	48:36	0:0	6	]
water	48:38	0:0	4	;
if	49:4	50:31	2	(ctx -> mutex)
cond	49:7	49:12	3	ctx -> mutex
water	49:7	0:0	4	ctx
op	49:10	0:0	4	->
water	49:12	0:0	4	mutex
stmts	50:8	50:31	3	
call	50:8	50:30	4	CloseHandle
arg	50:20	50:30	5	ctx->mutex
water	50:20	0:0	6	ctx
op	50:23	0:0	6	->
water	50:25	0:0	6	mutex
water	50:31	0:0	4	;
if	51:4	52:34	2	(ctx -> event [ 0 ])
cond	51:7	51:19	3	ctx -> event [ 0 ]
water	51:7	0:0	4	ctx
op	51:10	0:0	4	->
water	51:12	0:0	4	event
op	51:17	0:0	4	[
water	51:18	0:0	4	0
op	51:19	0:0	4	]
stmts	52:8	52:34	3	
call	52:8	52:33	4	CloseHandle
arg	52:20	52:33	5	ctx->event[0]
water	52:20	0:0	6	ctx
op	52:23	0:0	6	->
water	52:25	0:0	6	event
op	52:30	0:0	6	[
water	52:31	0:0	6	0
op	52:32	0:0	6	]
water	52:34	0:0	4	;
if	53:4	54:34	2	(ctx -> event [ 1 ])
cond	53:7	53:19	3	ctx -> event [ 1 ]
water	53:7	0:0	4	ctx
op	53:10	0:0	4	->
water	53:12	0:0	4	event
op	53:17	0:0	4	[
water	53:18	0:0	4	1
op	53:19	0:0	4	]
stmts	54:8	54:34	3	
call	54:8	54:33	4	CloseHandle
arg	54:20	54:33	5	ctx->event[1]
water	54:20	0:0	6	ctx
op	54:23	0:0	6	->
water	54:25	0:0	6	event
op	54:30	0:0	6	[
water	54:31	0:0	6	1
op	54:32	0:0	6	]
water	54:34	0:0	4	;
water	55:4	0:0	2	pktl
op	55:9	0:0	2	=
water	55:11	0:0	2	ctx
op	55:14	0:0	2	->
water	55:16	0:0	2	pktl
water	55:20	0:0	2	;
while	56:4	61:4	2	(pktl)
cond	56:11	56:11	3	pktl
water	56:11	0:0	4	pktl
stmts	56:17	61:4	3	
water	56:17	0:0	4	{
decl	57:8	57:39	4	AVPacketList	*next
op	57:27	0:0	4	=
water	57:29	0:0	4	pktl
op	57:33	0:0	4	->
water	57:35	0:0	4	next
call	58:8	58:33	4	av_free_packet
arg	58:23	58:33	5	&pktl->pkt
op	58:23	0:0	6	&
water	58:24	0:0	6	pktl
op	58:28	0:0	6	->
water	58:30	0:0	6	pkt
water	58:34	0:0	4	;
call	59:8	59:20	4	av_free
arg	59:16	59:20	5	pktl
water	59:16	0:0	6	pktl
water	59:21	0:0	4	;
water	60:8	0:0	4	pktl
op	60:13	0:0	4	=
water	60:15	0:0	4	next
water	60:19	0:0	4	;
water	61:4	0:0	4	}
call	62:4	62:19	2	CoUninitialize
water	62:20	0:0	2	;
return	63:4	63:12	2	0
water	63:11	0:0	3	0
