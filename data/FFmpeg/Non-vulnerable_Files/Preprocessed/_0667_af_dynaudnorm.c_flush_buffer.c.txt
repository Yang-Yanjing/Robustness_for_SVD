func	1:0	20:0	0	static int	flush_buffer
params	1:23	0:0	1	
param	1:24	1:56	2	DynamicAudioNormalizerContext *	s
param	1:58	1:78	2	AVFilterLink *	inlink
param	2:24	2:45	2	AVFilterLink *	outlink
stmnts	0:0	19:36	1	
decl	4:4	4:61	2	AVFrame	*out
op	4:17	0:0	2	=
call	4:19	4:60	3	ff_get_audio_buffer
arg	4:39	4:46	4	outlink
water	4:39	0:0	5	outlink
arg	4:48	4:60	4	s->frame_len
water	4:48	0:0	5	s
op	4:49	0:0	5	->
water	4:51	0:0	5	frame_len
decl	5:4	5:12	2	int	c
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	i
if	6:4	7:30	2	(! out)
cond	6:8	6:9	3	! out
op	6:8	0:0	4	!
water	6:9	0:0	4	out
stmts	7:8	7:30	3	
return	7:8	7:30	4	AVERROR(ENOMEM)
call	7:15	7:29	5	AVERROR
arg	7:23	7:29	6	ENOMEM
water	7:23	0:0	7	ENOMEM
for	8:4	17:4	2	(c = 0 ;c < s -> channels;c ++)
forinit	8:9	8:14	3	c = 0 ;
water	8:9	0:0	4	c
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:23	3	c < s -> channels
water	8:16	0:0	4	c
op	8:18	0:0	4	<
water	8:20	0:0	4	s
op	8:21	0:0	4	->
water	8:23	0:0	4	channels
forexpr	8:33	8:34	3	c ++
water	8:33	0:0	4	c
op	8:34	0:0	4	++
stmts	8:38	17:4	3	
water	8:38	0:0	4	{
decl	9:8	9:57	4	double	*dst_ptr
op	9:24	0:0	4	=
water	9:26	0:0	4	(
water	9:27	0:0	4	double
op	9:34	0:0	4	*
water	9:35	0:0	4	)
water	9:36	0:0	4	out
op	9:39	0:0	4	->
water	9:41	0:0	4	extended_data
op	9:54	0:0	4	[
water	9:55	0:0	4	c
op	9:56	0:0	4	]
for	10:8	16:8	4	(i = 0 ;i < out -> nb_samples;i ++)
forinit	10:13	10:18	5	i = 0 ;
water	10:13	0:0	6	i
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:20	10:29	5	i < out -> nb_samples
water	10:20	0:0	6	i
op	10:22	0:0	6	<
water	10:24	0:0	6	out
op	10:27	0:0	6	->
water	10:29	0:0	6	nb_samples
forexpr	10:41	10:42	5	i ++
water	10:41	0:0	6	i
op	10:42	0:0	6	++
stmts	10:46	16:8	5	
water	10:46	0:0	6	{
water	11:12	0:0	6	dst_ptr
op	11:19	0:0	6	[
water	11:20	0:0	6	i
op	11:21	0:0	6	]
op	11:23	0:0	6	=
water	11:25	0:0	6	s
op	11:26	0:0	6	->
water	11:28	0:0	6	alt_boundary_mode
water	11:46	0:0	6	?
water	11:48	0:0	6	DBL_EPSILON
water	11:60	0:0	6	:
water	11:62	0:0	6	(
water	11:63	0:0	6	(
water	11:64	0:0	6	s
op	11:65	0:0	6	->
water	11:67	0:0	6	target_rms
op	11:78	0:0	6	>
water	11:80	0:0	6	DBL_EPSILON
water	11:91	0:0	6	)
water	11:93	0:0	6	?
call	11:95	11:129	6	FFMIN
arg	11:101	11:114	7	s->peak_value
water	11:101	0:0	8	s
op	11:102	0:0	8	->
water	11:104	0:0	8	peak_value
arg	11:116	11:129	7	s->target_rms
water	11:116	0:0	8	s
op	11:117	0:0	8	->
water	11:119	0:0	8	target_rms
water	11:131	0:0	6	:
water	11:133	0:0	6	s
op	11:134	0:0	6	->
water	11:136	0:0	6	peak_value
water	11:146	0:0	6	)
water	11:147	0:0	6	;
if	12:12	15:12	6	(s -> dc_correction)
cond	12:16	12:19	7	s -> dc_correction
water	12:16	0:0	8	s
op	12:17	0:0	8	->
water	12:19	0:0	8	dc_correction
stmts	12:34	15:12	7	
water	12:34	0:0	8	{
water	13:16	0:0	8	dst_ptr
op	13:23	0:0	8	[
water	13:24	0:0	8	i
op	13:25	0:0	8	]
op	13:27	0:0	8	*=
water	13:30	0:0	8	(
water	13:31	0:0	8	(
water	13:32	0:0	8	i
op	13:34	0:0	8	%
water	13:36	0:0	8	2
water	13:37	0:0	8	)
op	13:39	0:0	8	==
water	13:42	0:0	8	1
water	13:43	0:0	8	)
water	13:45	0:0	8	?
op	13:47	0:0	8	-
water	13:48	0:0	8	1
water	13:50	0:0	8	:
water	13:52	0:0	8	1
water	13:53	0:0	8	;
water	14:16	0:0	8	dst_ptr
op	14:23	0:0	8	[
water	14:24	0:0	8	i
op	14:25	0:0	8	]
op	14:27	0:0	8	+=
water	14:30	0:0	8	s
op	14:31	0:0	8	->
water	14:33	0:0	8	dc_correction_value
op	14:52	0:0	8	[
water	14:53	0:0	8	c
op	14:54	0:0	8	]
water	14:55	0:0	8	;
water	15:12	0:0	8	}
water	16:8	0:0	6	}
water	17:4	0:0	4	}
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	delay
op	18:12	0:0	2	--
water	18:14	0:0	2	;
return	19:4	19:36	2	filter_frame(inlink,out)
call	19:11	19:35	3	filter_frame
arg	19:24	19:30	4	inlink
water	19:24	0:0	5	inlink
arg	19:32	19:35	4	out
water	19:32	0:0	5	out
