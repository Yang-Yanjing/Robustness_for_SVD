func	1:0	79:0	0	int	ff_aac_ac3_parse
params	1:20	0:0	1	
param	1:21	1:45	2	AVCodecParserContext *	s1
param	2:21	2:42	2	AVCodecContext *	avctx
param	3:21	3:44	2	const uint8_t * *	poutbuf
param	3:46	3:63	2	int *	poutbuf_size
param	4:21	4:39	2	const uint8_t *	buf
param	4:41	4:53	2	int	buf_size
stmnts	0:0	78:12	1	
decl	6:4	6:41	2	AACAC3ParseContext	*s
op	6:26	0:0	2	=
water	6:28	0:0	2	s1
op	6:30	0:0	2	->
water	6:32	0:0	2	priv_data
decl	7:4	7:29	2	ParseContext	*pc
op	7:21	0:0	2	=
op	7:23	0:0	2	&
water	7:24	0:0	2	s
op	7:25	0:0	2	->
water	7:27	0:0	2	pc
decl	8:4	8:14	2	int	len
water	8:11	0:0	2	,
decl	8:4	8:14	2	int	i
decl	9:4	9:23	2	int	new_frame_start
label	10:0	10:8	2	get_next :
water	11:4	0:0	2	i
op	11:5	0:0	2	=
water	11:6	0:0	2	END_NOT_FOUND
water	11:19	0:0	2	;
if	12:4	35:4	2	(s -> remaining_size <= buf_size)
cond	12:7	12:28	3	s -> remaining_size <= buf_size
water	12:7	0:0	4	s
op	12:8	0:0	4	->
water	12:10	0:0	4	remaining_size
op	12:25	0:0	4	<=
water	12:28	0:0	4	buf_size
stmts	12:37	35:4	3	
water	12:37	0:0	4	{
if	13:8	16:8	4	(s -> remaining_size && ! s -> need_next_header)
cond	13:11	13:36	5	s -> remaining_size && ! s -> need_next_header
water	13:11	0:0	6	s
op	13:12	0:0	6	->
water	13:14	0:0	6	remaining_size
op	13:29	0:0	6	&&
op	13:32	0:0	6	!
water	13:33	0:0	6	s
op	13:34	0:0	6	->
water	13:36	0:0	6	need_next_header
stmts	13:53	16:8	5	
water	13:53	0:0	6	{
water	14:12	0:0	6	i
op	14:13	0:0	6	=
water	14:15	0:0	6	s
op	14:16	0:0	6	->
water	14:18	0:0	6	remaining_size
water	14:32	0:0	6	;
water	15:12	0:0	6	s
op	15:13	0:0	6	->
water	15:15	0:0	6	remaining_size
op	15:30	0:0	6	=
water	15:32	0:0	6	0
water	15:33	0:0	6	;
water	16:8	0:0	6	}
else	16:9	34:8	4
stmts	16:13	34:8	5	
water	16:13	0:0	6	{
water	17:12	0:0	6	len
op	17:15	0:0	6	=
water	17:16	0:0	6	0
water	17:17	0:0	6	;
for	18:12	22:12	6	(i = s -> remaining_size ;i < buf_size;i ++)
forinit	18:16	18:35	7	i = s -> remaining_size ;
water	18:16	0:0	8	i
op	18:17	0:0	8	=
water	18:18	0:0	8	s
op	18:19	0:0	8	->
water	18:21	0:0	8	remaining_size
water	18:35	0:0	8	;
cond	18:37	18:39	7	i < buf_size
water	18:37	0:0	8	i
op	18:38	0:0	8	<
water	18:39	0:0	8	buf_size
forexpr	18:49	18:50	7	i ++
water	18:49	0:0	8	i
op	18:50	0:0	8	++
stmts	18:53	22:12	7	
water	18:53	0:0	8	{
water	19:16	0:0	8	s
op	19:17	0:0	8	->
water	19:19	0:0	8	state
op	19:25	0:0	8	=
water	19:27	0:0	8	(
water	19:28	0:0	8	s
op	19:29	0:0	8	->
water	19:31	0:0	8	state
op	19:36	0:0	8	<<
water	19:38	0:0	8	8
water	19:39	0:0	8	)
op	19:41	0:0	8	+
water	19:43	0:0	8	buf
op	19:46	0:0	8	[
water	19:47	0:0	8	i
op	19:48	0:0	8	]
water	19:49	0:0	8	;
if	20:16	21:25	8	(( len =s -> sync (s -> state ,s ,& s -> need_next_header ,& new_frame_start ) ))
cond	20:19	20:84	9	( len =s -> sync (s -> state ,s ,& s -> need_next_header ,& new_frame_start ) )
water	20:19	0:0	10	(
water	20:20	0:0	10	len
op	20:23	0:0	10	=
call	20:24	20:83	10	s->sync
arg	20:32	20:40	11	s->state
water	20:32	0:0	12	s
op	20:33	0:0	12	->
water	20:35	0:0	12	state
arg	20:42	20:43	11	s
water	20:42	0:0	12	s
arg	20:45	20:65	11	&s->need_next_header
op	20:45	0:0	12	&
water	20:46	0:0	12	s
op	20:47	0:0	12	->
water	20:49	0:0	12	need_next_header
arg	20:67	20:83	11	&new_frame_start
op	20:67	0:0	12	&
water	20:68	0:0	12	new_frame_start
water	20:84	0:0	10	)
stmts	21:20	21:25	9	
break	21:20	21:25	10	
water	22:12	0:0	8	}
if	23:12	25:12	6	(len <= 0)
cond	23:15	23:20	7	len <= 0
water	23:15	0:0	8	len
op	23:18	0:0	8	<=
water	23:20	0:0	8	0
stmts	23:22	25:12	7	
water	23:22	0:0	8	{
water	24:16	0:0	8	i
op	24:17	0:0	8	=
water	24:18	0:0	8	END_NOT_FOUND
water	24:31	0:0	8	;
water	25:12	0:0	8	}
else	25:13	33:12	6
stmts	25:17	33:12	7	
water	25:17	0:0	8	{
water	26:16	0:0	8	s
op	26:17	0:0	8	->
water	26:19	0:0	8	state
op	26:24	0:0	8	=
water	26:25	0:0	8	0
water	26:26	0:0	8	;
water	27:16	0:0	8	i
op	27:17	0:0	8	-=
water	27:20	0:0	8	s
op	27:21	0:0	8	->
water	27:23	0:0	8	header_size
op	27:35	0:0	8	-
water	27:36	0:0	8	1
water	27:37	0:0	8	;
water	28:16	0:0	8	s
op	28:17	0:0	8	->
water	28:19	0:0	8	remaining_size
op	28:34	0:0	8	=
water	28:36	0:0	8	len
water	28:39	0:0	8	;
if	29:16	32:16	8	(! new_frame_start || pc -> index + i <= 0)
cond	29:19	29:52	9	! new_frame_start || pc -> index + i <= 0
op	29:19	0:0	10	!
water	29:20	0:0	10	new_frame_start
op	29:36	0:0	10	||
water	29:39	0:0	10	pc
op	29:41	0:0	10	->
water	29:43	0:0	10	index
op	29:48	0:0	10	+
water	29:49	0:0	10	i
op	29:50	0:0	10	<=
water	29:52	0:0	10	0
stmts	29:54	32:16	9	
water	29:54	0:0	10	{
water	30:20	0:0	10	s
op	30:21	0:0	10	->
water	30:23	0:0	10	remaining_size
op	30:38	0:0	10	+=
water	30:41	0:0	10	i
water	30:42	0:0	10	;
goto	31:20	31:33	10	get_next
water	31:25	0:0	11	get_next
water	32:16	0:0	10	}
water	33:12	0:0	8	}
water	34:8	0:0	6	}
water	35:4	0:0	4	}
if	36:4	41:4	2	(ff_combine_frame (pc ,i ,& buf ,& buf_size ) < 0)
cond	36:7	36:48	3	ff_combine_frame (pc ,i ,& buf ,& buf_size ) < 0
call	36:7	36:46	4	ff_combine_frame
arg	36:24	36:26	5	pc
water	36:24	0:0	6	pc
arg	36:28	36:29	5	i
water	36:28	0:0	6	i
arg	36:31	36:35	5	&buf
op	36:31	0:0	6	&
water	36:32	0:0	6	buf
arg	36:37	36:46	5	&buf_size
op	36:37	0:0	6	&
water	36:38	0:0	6	buf_size
op	36:47	0:0	4	<
water	36:48	0:0	4	0
stmts	36:50	41:4	3	
water	36:50	0:0	4	{
water	37:8	0:0	4	s
op	37:9	0:0	4	->
water	37:11	0:0	4	remaining_size
op	37:26	0:0	4	-=
call	37:29	37:62	4	FFMIN
arg	37:35	37:52	5	s->remaining_size
water	37:35	0:0	6	s
op	37:36	0:0	6	->
water	37:38	0:0	6	remaining_size
arg	37:54	37:62	5	buf_size
water	37:54	0:0	6	buf_size
water	37:63	0:0	4	;
op	38:8	0:0	4	*
water	38:9	0:0	4	poutbuf
op	38:17	0:0	4	=
water	38:19	0:0	4	NULL
water	38:23	0:0	4	;
op	39:8	0:0	4	*
water	39:9	0:0	4	poutbuf_size
op	39:22	0:0	4	=
water	39:24	0:0	4	0
water	39:25	0:0	4	;
return	40:8	40:23	4	buf_size
water	40:15	0:0	5	buf_size
water	41:4	0:0	4	}
op	42:4	0:0	2	*
water	42:5	0:0	2	poutbuf
op	42:13	0:0	2	=
water	42:15	0:0	2	buf
water	42:18	0:0	2	;
op	43:4	0:0	2	*
water	43:5	0:0	2	poutbuf_size
op	43:18	0:0	2	=
water	43:20	0:0	2	buf_size
water	43:28	0:0	2	;
if	45:4	46:37	2	(s -> codec_id)
cond	45:7	45:10	3	s -> codec_id
water	45:7	0:0	4	s
op	45:8	0:0	4	->
water	45:10	0:0	4	codec_id
stmts	46:8	46:37	3	
water	46:8	0:0	4	avctx
op	46:13	0:0	4	->
water	46:15	0:0	4	codec_id
op	46:24	0:0	4	=
water	46:26	0:0	4	s
op	46:27	0:0	4	->
water	46:29	0:0	4	codec_id
water	46:37	0:0	4	;
if	51:4	76:4	2	(avctx -> codec_id != AV_CODEC_ID_AAC)
cond	51:8	51:27	3	avctx -> codec_id != AV_CODEC_ID_AAC
water	51:8	0:0	4	avctx
op	51:13	0:0	4	->
water	51:15	0:0	4	codec_id
op	51:24	0:0	4	!=
water	51:27	0:0	4	AV_CODEC_ID_AAC
stmts	51:44	76:4	3	
water	51:44	0:0	4	{
water	52:8	0:0	4	avctx
op	52:13	0:0	4	->
water	52:15	0:0	4	sample_rate
op	52:27	0:0	4	=
water	52:29	0:0	4	s
op	52:30	0:0	4	->
water	52:32	0:0	4	sample_rate
water	52:43	0:0	4	;
water	55:0	0:0	4	FF_DISABLE_DEPRECATION_WARNINGS
water	56:8	0:0	4	if
water	56:11	0:0	4	(
water	56:12	0:0	4	avctx
op	56:17	0:0	4	->
water	56:19	0:0	4	request_channels
op	56:36	0:0	4	==
water	56:39	0:0	4	1
water	56:40	0:0	4	)
water	57:12	0:0	4	avctx
op	57:17	0:0	4	->
water	57:19	0:0	4	request_channel_layout
op	57:42	0:0	4	=
water	57:44	0:0	4	AV_CH_LAYOUT_MONO
water	57:61	0:0	4	;
else	58:8	59:63	4
stmts	58:13	59:63	5	
if	58:13	59:63	6	(avctx -> request_channels == 2)
cond	58:17	58:44	7	avctx -> request_channels == 2
water	58:17	0:0	8	avctx
op	58:22	0:0	8	->
water	58:24	0:0	8	request_channels
op	58:41	0:0	8	==
water	58:44	0:0	8	2
stmts	59:12	59:63	7	
water	59:12	0:0	8	avctx
op	59:17	0:0	8	->
water	59:19	0:0	8	request_channel_layout
op	59:42	0:0	8	=
water	59:44	0:0	8	AV_CH_LAYOUT_STEREO
water	59:63	0:0	8	;
water	60:0	0:0	4	FF_ENABLE_DEPRECATION_WARNINGS
water	62:8	0:0	4	if
water	62:11	0:0	4	(
water	62:12	0:0	4	s
op	62:13	0:0	4	->
water	62:15	0:0	4	channels
op	62:24	0:0	4	>
water	62:26	0:0	4	1
op	62:28	0:0	4	&&
water	63:12	0:0	4	avctx
op	63:17	0:0	4	->
water	63:19	0:0	4	request_channel_layout
op	63:42	0:0	4	==
water	63:45	0:0	4	AV_CH_LAYOUT_MONO
water	63:62	0:0	4	)
water	63:64	0:0	4	{
water	64:12	0:0	4	avctx
op	64:17	0:0	4	->
water	64:19	0:0	4	channels
op	64:34	0:0	4	=
water	64:36	0:0	4	1
water	64:37	0:0	4	;
water	65:12	0:0	4	avctx
op	65:17	0:0	4	->
water	65:19	0:0	4	channel_layout
op	65:34	0:0	4	=
water	65:36	0:0	4	AV_CH_LAYOUT_MONO
water	65:53	0:0	4	;
water	66:8	0:0	4	}
water	66:10	0:0	4	else
water	66:15	0:0	4	if
water	66:18	0:0	4	(
water	66:19	0:0	4	s
op	66:20	0:0	4	->
water	66:22	0:0	4	channels
op	66:31	0:0	4	>
water	66:33	0:0	4	2
op	66:35	0:0	4	&&
water	67:19	0:0	4	avctx
op	67:24	0:0	4	->
water	67:26	0:0	4	request_channel_layout
op	67:49	0:0	4	==
water	67:52	0:0	4	AV_CH_LAYOUT_STEREO
water	67:71	0:0	4	)
water	67:73	0:0	4	{
water	68:12	0:0	4	avctx
op	68:17	0:0	4	->
water	68:19	0:0	4	channels
op	68:34	0:0	4	=
water	68:36	0:0	4	2
water	68:37	0:0	4	;
water	69:12	0:0	4	avctx
op	69:17	0:0	4	->
water	69:19	0:0	4	channel_layout
op	69:34	0:0	4	=
water	69:36	0:0	4	AV_CH_LAYOUT_STEREO
water	69:55	0:0	4	;
water	70:8	0:0	4	}
water	70:10	0:0	4	else
water	70:15	0:0	4	{
water	71:12	0:0	4	avctx
op	71:17	0:0	4	->
water	71:19	0:0	4	channels
op	71:28	0:0	4	=
water	71:30	0:0	4	s
op	71:31	0:0	4	->
water	71:33	0:0	4	channels
water	71:41	0:0	4	;
water	72:12	0:0	4	avctx
op	72:17	0:0	4	->
water	72:19	0:0	4	channel_layout
op	72:34	0:0	4	=
water	72:36	0:0	4	s
op	72:37	0:0	4	->
water	72:39	0:0	4	channel_layout
water	72:53	0:0	4	;
water	73:8	0:0	4	}
water	74:8	0:0	4	s1
op	74:10	0:0	4	->
water	74:12	0:0	4	duration
op	74:21	0:0	4	=
water	74:23	0:0	4	s
op	74:24	0:0	4	->
water	74:26	0:0	4	samples
water	74:33	0:0	4	;
water	75:8	0:0	4	avctx
op	75:13	0:0	4	->
water	75:15	0:0	4	audio_service_type
op	75:34	0:0	4	=
water	75:36	0:0	4	s
op	75:37	0:0	4	->
water	75:39	0:0	4	service_type
water	75:51	0:0	4	;
water	76:4	0:0	4	}
water	77:4	0:0	2	avctx
op	77:9	0:0	2	->
water	77:11	0:0	2	bit_rate
op	77:20	0:0	2	=
water	77:22	0:0	2	s
op	77:23	0:0	2	->
water	77:25	0:0	2	bit_rate
water	77:33	0:0	2	;
return	78:4	78:12	2	i
water	78:11	0:0	3	i
