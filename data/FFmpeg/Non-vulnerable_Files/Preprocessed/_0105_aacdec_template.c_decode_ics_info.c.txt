func	1:0	100:0	0	static int	decode_ics_info
params	1:26	0:0	1	
param	1:27	1:41	2	AACContext *	ac
param	1:43	1:71	2	IndividualChannelStream *	ics
param	2:27	2:44	2	GetBitContext *	gb
stmnts	4:4	99:30	1	
water	4:4	0:0	2	const
water	4:10	0:0	2	MPEG4AudioConfig
op	4:27	0:0	2	*
water	4:28	0:0	2	const
water	4:34	0:0	2	m4ac
op	4:39	0:0	2	=
op	4:41	0:0	2	&
water	4:42	0:0	2	ac
op	4:44	0:0	2	->
water	4:46	0:0	2	oc
op	4:48	0:0	2	[
water	4:49	0:0	2	1
op	4:50	0:0	2	]
op	4:51	0:0	2	.
water	4:52	0:0	2	m4ac
water	4:56	0:0	2	;
decl	5:4	5:37	2	const int	aot
op	5:18	0:0	2	=
water	5:20	0:0	2	m4ac
op	5:24	0:0	2	->
water	5:26	0:0	2	object_type
decl	6:4	6:51	2	const int	sampling_index
op	6:29	0:0	2	=
water	6:31	0:0	2	m4ac
op	6:35	0:0	2	->
water	6:37	0:0	2	sampling_index
if	7:4	25:4	2	(aot != AOT_ER_AAC_ELD)
cond	7:8	7:15	3	aot != AOT_ER_AAC_ELD
water	7:8	0:0	4	aot
op	7:12	0:0	4	!=
water	7:15	0:0	4	AOT_ER_AAC_ELD
stmts	7:31	25:4	3	
water	7:31	0:0	4	{
if	8:8	12:8	4	(get_bits1 (gb ))
cond	8:12	8:24	5	get_bits1 (gb )
call	8:12	8:24	6	get_bits1
arg	8:22	8:24	7	gb
water	8:22	0:0	8	gb
stmts	8:27	12:8	5	
water	8:27	0:0	6	{
call	9:12	9:65	6	av_log
arg	9:19	9:28	7	ac->avctx
water	9:19	0:0	8	ac
op	9:21	0:0	8	->
water	9:23	0:0	8	avctx
arg	9:30	9:42	7	AV_LOG_ERROR
water	9:30	0:0	8	AV_LOG_ERROR
arg	9:44	9:65	7	"Reserved bit set.\n"
water	9:44	0:0	8	"Reserved bit set.\n"
water	9:66	0:0	6	;
if	10:12	11:42	6	(ac -> avctx -> err_recognition & AV_EF_BITSTREAM)
cond	10:16	10:45	7	ac -> avctx -> err_recognition & AV_EF_BITSTREAM
water	10:16	0:0	8	ac
op	10:18	0:0	8	->
water	10:20	0:0	8	avctx
op	10:25	0:0	8	->
water	10:27	0:0	8	err_recognition
op	10:43	0:0	8	&
water	10:45	0:0	8	AV_EF_BITSTREAM
stmts	11:16	11:42	7	
return	11:16	11:42	8	AVERROR_INVALIDDATA
water	11:23	0:0	9	AVERROR_INVALIDDATA
water	12:8	0:0	6	}
water	13:8	0:0	4	ics
op	13:11	0:0	4	->
water	13:13	0:0	4	window_sequence
op	13:28	0:0	4	[
water	13:29	0:0	4	1
op	13:30	0:0	4	]
op	13:32	0:0	4	=
water	13:34	0:0	4	ics
op	13:37	0:0	4	->
water	13:39	0:0	4	window_sequence
op	13:54	0:0	4	[
water	13:55	0:0	4	0
op	13:56	0:0	4	]
water	13:57	0:0	4	;
water	14:8	0:0	4	ics
op	14:11	0:0	4	->
water	14:13	0:0	4	window_sequence
op	14:28	0:0	4	[
water	14:29	0:0	4	0
op	14:30	0:0	4	]
op	14:32	0:0	4	=
call	14:34	14:48	4	get_bits
arg	14:43	14:45	5	gb
water	14:43	0:0	6	gb
arg	14:47	14:48	5	2
water	14:47	0:0	6	2
water	14:49	0:0	4	;
if	15:8	22:8	4	(aot == AOT_ER_AAC_LD && ics -> window_sequence [ 0 ] != ONLY_LONG_SEQUENCE)
cond	15:12	16:39	5	aot == AOT_ER_AAC_LD && ics -> window_sequence [ 0 ] != ONLY_LONG_SEQUENCE
water	15:12	0:0	6	aot
op	15:16	0:0	6	==
water	15:19	0:0	6	AOT_ER_AAC_LD
op	15:33	0:0	6	&&
water	16:12	0:0	6	ics
op	16:15	0:0	6	->
water	16:17	0:0	6	window_sequence
op	16:32	0:0	6	[
water	16:33	0:0	6	0
op	16:34	0:0	6	]
op	16:36	0:0	6	!=
water	16:39	0:0	6	ONLY_LONG_SEQUENCE
stmts	16:59	22:8	5	
water	16:59	0:0	6	{
call	17:12	19:73	6	av_log
arg	17:19	17:28	7	ac->avctx
water	17:19	0:0	8	ac
op	17:21	0:0	8	->
water	17:23	0:0	8	avctx
arg	17:30	17:42	7	AV_LOG_ERROR
water	17:30	0:0	8	AV_LOG_ERROR
arg	18:19	19:48	7	"AAC LD is only defined for ONLY_LONG_SEQUENCE but ""window sequence %d found.\n"
water	18:19	0:0	8	"AAC LD is only defined for ONLY_LONG_SEQUENCE but "
water	19:19	0:0	8	"window sequence %d found.\n"
arg	19:50	19:73	7	ics->window_sequence[0]
water	19:50	0:0	8	ics
op	19:53	0:0	8	->
water	19:55	0:0	8	window_sequence
op	19:70	0:0	8	[
water	19:71	0:0	8	0
op	19:72	0:0	8	]
water	19:74	0:0	6	;
water	20:12	0:0	6	ics
op	20:15	0:0	6	->
water	20:17	0:0	6	window_sequence
op	20:32	0:0	6	[
water	20:33	0:0	6	0
op	20:34	0:0	6	]
op	20:36	0:0	6	=
water	20:38	0:0	6	ONLY_LONG_SEQUENCE
water	20:56	0:0	6	;
return	21:12	21:38	6	AVERROR_INVALIDDATA
water	21:19	0:0	7	AVERROR_INVALIDDATA
water	22:8	0:0	6	}
water	23:8	0:0	4	ics
op	23:11	0:0	4	->
water	23:13	0:0	4	use_kb_window
op	23:26	0:0	4	[
water	23:27	0:0	4	1
op	23:28	0:0	4	]
op	23:32	0:0	4	=
water	23:34	0:0	4	ics
op	23:37	0:0	4	->
water	23:39	0:0	4	use_kb_window
op	23:52	0:0	4	[
water	23:53	0:0	4	0
op	23:54	0:0	4	]
water	23:55	0:0	4	;
water	24:8	0:0	4	ics
op	24:11	0:0	4	->
water	24:13	0:0	4	use_kb_window
op	24:26	0:0	4	[
water	24:27	0:0	4	0
op	24:28	0:0	4	]
op	24:32	0:0	4	=
call	24:34	24:46	4	get_bits1
arg	24:44	24:46	5	gb
water	24:44	0:0	6	gb
water	24:47	0:0	4	;
water	25:4	0:0	4	}
water	26:4	0:0	2	ics
op	26:7	0:0	2	->
water	26:9	0:0	2	num_window_groups
op	26:28	0:0	2	=
water	26:30	0:0	2	1
water	26:31	0:0	2	;
water	27:4	0:0	2	ics
op	27:7	0:0	2	->
water	27:9	0:0	2	group_len
op	27:18	0:0	2	[
water	27:19	0:0	2	0
op	27:20	0:0	2	]
op	27:28	0:0	2	=
water	27:30	0:0	2	1
water	27:31	0:0	2	;
if	28:4	44:4	2	(ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE)
cond	28:8	28:35	3	ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE
water	28:8	0:0	4	ics
op	28:11	0:0	4	->
water	28:13	0:0	4	window_sequence
op	28:28	0:0	4	[
water	28:29	0:0	4	0
op	28:30	0:0	4	]
op	28:32	0:0	4	==
water	28:35	0:0	4	EIGHT_SHORT_SEQUENCE
stmts	28:57	44:4	3	
water	28:57	0:0	4	{
decl	29:8	29:13	4	int	i
water	30:8	0:0	4	ics
op	30:11	0:0	4	->
water	30:13	0:0	4	max_sfb
op	30:21	0:0	4	=
call	30:23	30:37	4	get_bits
arg	30:32	30:34	5	gb
water	30:32	0:0	6	gb
arg	30:36	30:37	5	4
water	30:36	0:0	6	4
water	30:38	0:0	4	;
for	31:8	38:8	4	(i = 0 ;i < 7;i ++)
forinit	31:13	31:18	5	i = 0 ;
water	31:13	0:0	6	i
op	31:15	0:0	6	=
water	31:17	0:0	6	0
water	31:18	0:0	6	;
cond	31:20	31:24	5	i < 7
water	31:20	0:0	6	i
op	31:22	0:0	6	<
water	31:24	0:0	6	7
forexpr	31:27	31:28	5	i ++
water	31:27	0:0	6	i
op	31:28	0:0	6	++
stmts	31:32	38:8	5	
water	31:32	0:0	6	{
if	32:12	34:12	6	(get_bits1 (gb ))
cond	32:16	32:28	7	get_bits1 (gb )
call	32:16	32:28	8	get_bits1
arg	32:26	32:28	9	gb
water	32:26	0:0	10	gb
stmts	32:31	34:12	7	
water	32:31	0:0	8	{
water	33:16	0:0	8	ics
op	33:19	0:0	8	->
water	33:21	0:0	8	group_len
op	33:30	0:0	8	[
water	33:31	0:0	8	ics
op	33:34	0:0	8	->
water	33:36	0:0	8	num_window_groups
op	33:54	0:0	8	-
water	33:56	0:0	8	1
op	33:57	0:0	8	]
op	33:58	0:0	8	++
water	33:60	0:0	8	;
water	34:12	0:0	8	}
else	34:14	37:12	6
stmts	34:19	37:12	7	
water	34:19	0:0	8	{
water	35:16	0:0	8	ics
op	35:19	0:0	8	->
water	35:21	0:0	8	num_window_groups
op	35:38	0:0	8	++
water	35:40	0:0	8	;
water	36:16	0:0	8	ics
op	36:19	0:0	8	->
water	36:21	0:0	8	group_len
op	36:30	0:0	8	[
water	36:31	0:0	8	ics
op	36:34	0:0	8	->
water	36:36	0:0	8	num_window_groups
op	36:54	0:0	8	-
water	36:56	0:0	8	1
op	36:57	0:0	8	]
op	36:59	0:0	8	=
water	36:61	0:0	8	1
water	36:62	0:0	8	;
water	37:12	0:0	8	}
water	38:8	0:0	6	}
water	39:8	0:0	4	ics
op	39:11	0:0	4	->
water	39:13	0:0	4	num_windows
op	39:31	0:0	4	=
water	39:33	0:0	4	8
water	39:34	0:0	4	;
water	40:8	0:0	4	ics
op	40:11	0:0	4	->
water	40:13	0:0	4	swb_offset
op	40:31	0:0	4	=
water	40:36	0:0	4	ff_swb_offset_128
op	40:53	0:0	4	[
water	40:54	0:0	4	sampling_index
op	40:68	0:0	4	]
water	40:69	0:0	4	;
water	41:8	0:0	4	ics
op	41:11	0:0	4	->
water	41:13	0:0	4	num_swb
op	41:31	0:0	4	=
water	41:35	0:0	4	ff_aac_num_swb_128
op	41:53	0:0	4	[
water	41:54	0:0	4	sampling_index
op	41:68	0:0	4	]
water	41:69	0:0	4	;
water	42:8	0:0	4	ics
op	42:11	0:0	4	->
water	42:13	0:0	4	tns_max_bands
op	42:31	0:0	4	=
water	42:33	0:0	4	ff_tns_max_bands_128
op	42:53	0:0	4	[
water	42:54	0:0	4	sampling_index
op	42:68	0:0	4	]
water	42:69	0:0	4	;
water	43:8	0:0	4	ics
op	43:11	0:0	4	->
water	43:13	0:0	4	predictor_present
op	43:31	0:0	4	=
water	43:33	0:0	4	0
water	43:34	0:0	4	;
water	44:4	0:0	4	}
else	44:6	88:4	2
stmts	44:11	88:4	3	
water	44:11	0:0	4	{
water	45:8	0:0	4	ics
op	45:11	0:0	4	->
water	45:13	0:0	4	max_sfb
op	45:31	0:0	4	=
call	45:33	45:47	4	get_bits
arg	45:42	45:44	5	gb
water	45:42	0:0	6	gb
arg	45:46	45:47	5	6
water	45:46	0:0	6	6
water	45:48	0:0	4	;
water	46:8	0:0	4	ics
op	46:11	0:0	4	->
water	46:13	0:0	4	num_windows
op	46:31	0:0	4	=
water	46:33	0:0	4	1
water	46:34	0:0	4	;
if	47:8	59:8	4	(aot == AOT_ER_AAC_LD || aot == AOT_ER_AAC_ELD)
cond	47:12	47:43	5	aot == AOT_ER_AAC_LD || aot == AOT_ER_AAC_ELD
water	47:12	0:0	6	aot
op	47:16	0:0	6	==
water	47:19	0:0	6	AOT_ER_AAC_LD
op	47:33	0:0	6	||
water	47:36	0:0	6	aot
op	47:40	0:0	6	==
water	47:43	0:0	6	AOT_ER_AAC_ELD
stmts	47:59	59:8	5	
water	47:59	0:0	6	{
if	48:12	52:12	6	(m4ac -> frame_length_short)
cond	48:16	48:22	7	m4ac -> frame_length_short
water	48:16	0:0	8	m4ac
op	48:20	0:0	8	->
water	48:22	0:0	8	frame_length_short
stmts	48:42	52:12	7	
water	48:42	0:0	8	{
water	49:16	0:0	8	ics
op	49:19	0:0	8	->
water	49:21	0:0	8	swb_offset
op	49:35	0:0	8	=
water	49:41	0:0	8	ff_swb_offset_480
op	49:58	0:0	8	[
water	49:59	0:0	8	sampling_index
op	49:73	0:0	8	]
water	49:74	0:0	8	;
water	50:16	0:0	8	ics
op	50:19	0:0	8	->
water	50:21	0:0	8	num_swb
op	50:35	0:0	8	=
water	50:40	0:0	8	ff_aac_num_swb_480
op	50:58	0:0	8	[
water	50:59	0:0	8	sampling_index
op	50:73	0:0	8	]
water	50:74	0:0	8	;
water	51:16	0:0	8	ics
op	51:19	0:0	8	->
water	51:21	0:0	8	tns_max_bands
op	51:35	0:0	8	=
water	51:38	0:0	8	ff_tns_max_bands_480
op	51:58	0:0	8	[
water	51:59	0:0	8	sampling_index
op	51:73	0:0	8	]
water	51:74	0:0	8	;
water	52:12	0:0	8	}
else	52:14	56:12	6
stmts	52:19	56:12	7	
water	52:19	0:0	8	{
water	53:16	0:0	8	ics
op	53:19	0:0	8	->
water	53:21	0:0	8	swb_offset
op	53:35	0:0	8	=
water	53:41	0:0	8	ff_swb_offset_512
op	53:58	0:0	8	[
water	53:59	0:0	8	sampling_index
op	53:73	0:0	8	]
water	53:74	0:0	8	;
water	54:16	0:0	8	ics
op	54:19	0:0	8	->
water	54:21	0:0	8	num_swb
op	54:35	0:0	8	=
water	54:40	0:0	8	ff_aac_num_swb_512
op	54:58	0:0	8	[
water	54:59	0:0	8	sampling_index
op	54:73	0:0	8	]
water	54:74	0:0	8	;
water	55:16	0:0	8	ics
op	55:19	0:0	8	->
water	55:21	0:0	8	tns_max_bands
op	55:35	0:0	8	=
water	55:38	0:0	8	ff_tns_max_bands_512
op	55:58	0:0	8	[
water	55:59	0:0	8	sampling_index
op	55:73	0:0	8	]
water	55:74	0:0	8	;
water	56:12	0:0	8	}
if	57:12	58:34	6	(! ics -> num_swb || ! ics -> swb_offset)
cond	57:16	57:39	7	! ics -> num_swb || ! ics -> swb_offset
op	57:16	0:0	8	!
water	57:17	0:0	8	ics
op	57:20	0:0	8	->
water	57:22	0:0	8	num_swb
op	57:30	0:0	8	||
op	57:33	0:0	8	!
water	57:34	0:0	8	ics
op	57:37	0:0	8	->
water	57:39	0:0	8	swb_offset
stmts	58:16	58:34	7	
return	58:16	58:34	8	AVERROR_BUG
water	58:23	0:0	9	AVERROR_BUG
water	59:8	0:0	6	}
else	59:10	63:8	4
stmts	59:15	63:8	5	
water	59:15	0:0	6	{
water	60:12	0:0	6	ics
op	60:15	0:0	6	->
water	60:17	0:0	6	swb_offset
op	60:31	0:0	6	=
water	60:36	0:0	6	ff_swb_offset_1024
op	60:54	0:0	6	[
water	60:55	0:0	6	sampling_index
op	60:69	0:0	6	]
water	60:70	0:0	6	;
water	61:12	0:0	6	ics
op	61:15	0:0	6	->
water	61:17	0:0	6	num_swb
op	61:31	0:0	6	=
water	61:35	0:0	6	ff_aac_num_swb_1024
op	61:54	0:0	6	[
water	61:55	0:0	6	sampling_index
op	61:69	0:0	6	]
water	61:70	0:0	6	;
water	62:12	0:0	6	ics
op	62:15	0:0	6	->
water	62:17	0:0	6	tns_max_bands
op	62:31	0:0	6	=
water	62:33	0:0	6	ff_tns_max_bands_1024
op	62:54	0:0	6	[
water	62:55	0:0	6	sampling_index
op	62:69	0:0	6	]
water	62:70	0:0	6	;
water	63:8	0:0	6	}
if	64:8	67:8	4	(aot != AOT_ER_AAC_ELD)
cond	64:12	64:19	5	aot != AOT_ER_AAC_ELD
water	64:12	0:0	6	aot
op	64:16	0:0	6	!=
water	64:19	0:0	6	AOT_ER_AAC_ELD
stmts	64:35	67:8	5	
water	64:35	0:0	6	{
water	65:12	0:0	6	ics
op	65:15	0:0	6	->
water	65:17	0:0	6	predictor_present
op	65:39	0:0	6	=
call	65:41	65:53	6	get_bits1
arg	65:51	65:53	7	gb
water	65:51	0:0	8	gb
water	65:54	0:0	6	;
water	66:12	0:0	6	ics
op	66:15	0:0	6	->
water	66:17	0:0	6	predictor_reset_group
op	66:39	0:0	6	=
water	66:41	0:0	6	0
water	66:42	0:0	6	;
water	67:8	0:0	6	}
if	68:8	87:8	4	(ics -> predictor_present)
cond	68:12	68:17	5	ics -> predictor_present
water	68:12	0:0	6	ics
op	68:15	0:0	6	->
water	68:17	0:0	6	predictor_present
stmts	68:36	87:8	5	
water	68:36	0:0	6	{
if	69:12	73:12	6	(aot == AOT_AAC_MAIN)
cond	69:16	69:23	7	aot == AOT_AAC_MAIN
water	69:16	0:0	8	aot
op	69:20	0:0	8	==
water	69:23	0:0	8	AOT_AAC_MAIN
stmts	69:37	73:12	7	
water	69:37	0:0	8	{
if	70:16	72:16	8	(decode_prediction (ac ,ics ,gb ))
cond	70:20	70:49	9	decode_prediction (ac ,ics ,gb )
call	70:20	70:49	10	decode_prediction
arg	70:38	70:40	11	ac
water	70:38	0:0	12	ac
arg	70:42	70:45	11	ics
water	70:42	0:0	12	ics
arg	70:47	70:49	11	gb
water	70:47	0:0	12	gb
stmts	70:52	72:16	9	
water	70:52	0:0	10	{
goto	71:20	71:29	10	fail
water	71:25	0:0	11	fail
water	72:16	0:0	10	}
water	73:12	0:0	8	}
else	73:14	78:12	6
stmts	73:19	78:12	7	
if	73:19	78:12	8	(aot == AOT_AAC_LC || aot == AOT_ER_AAC_LC)
cond	73:23	74:30	9	aot == AOT_AAC_LC || aot == AOT_ER_AAC_LC
water	73:23	0:0	10	aot
op	73:27	0:0	10	==
water	73:30	0:0	10	AOT_AAC_LC
op	73:41	0:0	10	||
water	74:23	0:0	10	aot
op	74:27	0:0	10	==
water	74:30	0:0	10	AOT_ER_AAC_LC
stmts	74:45	78:12	9	
water	74:45	0:0	10	{
call	75:16	76:63	10	av_log
arg	75:23	75:32	11	ac->avctx
water	75:23	0:0	12	ac
op	75:25	0:0	12	->
water	75:27	0:0	12	avctx
arg	75:34	75:46	11	AV_LOG_ERROR
water	75:34	0:0	12	AV_LOG_ERROR
arg	76:23	76:63	11	"Prediction is not allowed in AAC-LC.\n"
water	76:23	0:0	12	"Prediction is not allowed in AAC-LC.\n"
water	76:64	0:0	10	;
goto	77:16	77:25	10	fail
water	77:21	0:0	11	fail
water	78:12	0:0	10	}
else	78:14	86:12	6
stmts	78:19	86:12	7	
water	78:19	0:0	8	{
if	79:16	83:16	8	(aot == AOT_ER_AAC_LD)
cond	79:20	79:27	9	aot == AOT_ER_AAC_LD
water	79:20	0:0	10	aot
op	79:24	0:0	10	==
water	79:27	0:0	10	AOT_ER_AAC_LD
stmts	79:42	83:16	9	
water	79:42	0:0	10	{
call	80:20	81:68	10	av_log
arg	80:27	80:36	11	ac->avctx
water	80:27	0:0	12	ac
op	80:29	0:0	12	->
water	80:31	0:0	12	avctx
arg	80:38	80:50	11	AV_LOG_ERROR
water	80:38	0:0	12	AV_LOG_ERROR
arg	81:27	81:68	11	"LTP in ER AAC LD not yet implemented.\n"
water	81:27	0:0	12	"LTP in ER AAC LD not yet implemented.\n"
water	81:69	0:0	10	;
return	82:20	82:47	10	AVERROR_PATCHWELCOME
water	82:27	0:0	11	AVERROR_PATCHWELCOME
water	83:16	0:0	10	}
if	84:16	85:59	8	(( ics -> ltp . present =get_bits (gb ,1 ) ))
cond	84:20	84:55	9	( ics -> ltp . present =get_bits (gb ,1 ) )
water	84:20	0:0	10	(
water	84:21	0:0	10	ics
op	84:24	0:0	10	->
water	84:26	0:0	10	ltp
op	84:29	0:0	10	.
water	84:30	0:0	10	present
op	84:38	0:0	10	=
call	84:40	84:54	10	get_bits
arg	84:49	84:51	11	gb
water	84:49	0:0	12	gb
arg	84:53	84:54	11	1
water	84:53	0:0	12	1
water	84:55	0:0	10	)
stmts	85:20	85:59	9	
call	85:20	85:58	10	decode_ltp
arg	85:31	85:40	11	&ics->ltp
op	85:31	0:0	12	&
water	85:32	0:0	12	ics
op	85:35	0:0	12	->
water	85:37	0:0	12	ltp
arg	85:42	85:44	11	gb
water	85:42	0:0	12	gb
arg	85:46	85:58	11	ics->max_sfb
water	85:46	0:0	12	ics
op	85:49	0:0	12	->
water	85:51	0:0	12	max_sfb
water	85:59	0:0	10	;
water	86:12	0:0	8	}
water	87:8	0:0	6	}
water	88:4	0:0	4	}
if	89:4	95:4	2	(ics -> max_sfb > ics -> num_swb)
cond	89:8	89:28	3	ics -> max_sfb > ics -> num_swb
water	89:8	0:0	4	ics
op	89:11	0:0	4	->
water	89:13	0:0	4	max_sfb
op	89:21	0:0	4	>
water	89:23	0:0	4	ics
op	89:26	0:0	4	->
water	89:28	0:0	4	num_swb
stmts	89:37	95:4	3	
water	89:37	0:0	4	{
call	90:8	93:41	4	av_log
arg	90:15	90:24	5	ac->avctx
water	90:15	0:0	6	ac
op	90:17	0:0	6	->
water	90:19	0:0	6	avctx
arg	90:26	90:38	5	AV_LOG_ERROR
water	90:26	0:0	6	AV_LOG_ERROR
arg	91:15	92:38	5	"Number of scalefactor bands in group (%d) ""exceeds limit (%d).\n"
water	91:15	0:0	6	"Number of scalefactor bands in group (%d) "
water	92:15	0:0	6	"exceeds limit (%d).\n"
arg	93:15	93:27	5	ics->max_sfb
water	93:15	0:0	6	ics
op	93:18	0:0	6	->
water	93:20	0:0	6	max_sfb
arg	93:29	93:41	5	ics->num_swb
water	93:29	0:0	6	ics
op	93:32	0:0	6	->
water	93:34	0:0	6	num_swb
water	93:42	0:0	4	;
goto	94:8	94:17	4	fail
water	94:13	0:0	5	fail
water	95:4	0:0	4	}
return	96:4	96:12	2	0
water	96:11	0:0	3	0
label	97:0	97:4	2	fail :
water	98:4	0:0	2	ics
op	98:7	0:0	2	->
water	98:9	0:0	2	max_sfb
op	98:17	0:0	2	=
water	98:19	0:0	2	0
water	98:20	0:0	2	;
return	99:4	99:30	2	AVERROR_INVALIDDATA
water	99:11	0:0	3	AVERROR_INVALIDDATA
