func	1:0	20:0	0	void	av_hash_init
params	1:17	0:0	1	
param	1:18	1:36	2	AVHashContext *	ctx
stmnts	3:4	19:4	1	
switch	3:4	19:4	2	(ctx -> type)
cond	3:12	3:17	3	ctx -> type
water	3:12	0:0	4	ctx
op	3:15	0:0	4	->
water	3:17	0:0	4	type
stmts	3:23	19:4	3	
water	3:23	0:0	4	{
label	4:4	4:12	4	case MD5 :
call	4:18	4:38	4	av_md5_init
arg	4:30	4:38	5	ctx->ctx
water	4:30	0:0	6	ctx
op	4:33	0:0	6	->
water	4:35	0:0	6	ctx
water	4:39	0:0	4	;
break	4:41	4:46	4	
label	5:4	5:16	4	case MURMUR3 :
call	5:18	5:42	4	av_murmur3_init
arg	5:34	5:42	5	ctx->ctx
water	5:34	0:0	6	ctx
op	5:37	0:0	6	->
water	5:39	0:0	6	ctx
water	5:43	0:0	4	;
break	5:45	5:50	4	
label	6:4	6:18	4	case RIPEMD128 :
call	6:20	6:48	4	av_ripemd_init
arg	6:35	6:43	5	ctx->ctx
water	6:35	0:0	6	ctx
op	6:38	0:0	6	->
water	6:40	0:0	6	ctx
arg	6:45	6:48	5	128
water	6:45	0:0	6	128
water	6:49	0:0	4	;
break	6:51	6:56	4	
label	7:4	7:18	4	case RIPEMD160 :
call	7:20	7:48	4	av_ripemd_init
arg	7:35	7:43	5	ctx->ctx
water	7:35	0:0	6	ctx
op	7:38	0:0	6	->
water	7:40	0:0	6	ctx
arg	7:45	7:48	5	160
water	7:45	0:0	6	160
water	7:49	0:0	4	;
break	7:51	7:56	4	
label	8:4	8:18	4	case RIPEMD256 :
call	8:20	8:48	4	av_ripemd_init
arg	8:35	8:43	5	ctx->ctx
water	8:35	0:0	6	ctx
op	8:38	0:0	6	->
water	8:40	0:0	6	ctx
arg	8:45	8:48	5	256
water	8:45	0:0	6	256
water	8:49	0:0	4	;
break	8:51	8:56	4	
label	9:4	9:18	4	case RIPEMD320 :
call	9:20	9:48	4	av_ripemd_init
arg	9:35	9:43	5	ctx->ctx
water	9:35	0:0	6	ctx
op	9:38	0:0	6	->
water	9:40	0:0	6	ctx
arg	9:45	9:48	5	320
water	9:45	0:0	6	320
water	9:49	0:0	4	;
break	9:51	9:56	4	
label	10:4	10:15	4	case SHA160 :
call	10:18	10:43	4	av_sha_init
arg	10:30	10:38	5	ctx->ctx
water	10:30	0:0	6	ctx
op	10:33	0:0	6	->
water	10:35	0:0	6	ctx
arg	10:40	10:43	5	160
water	10:40	0:0	6	160
water	10:44	0:0	4	;
break	10:46	10:51	4	
label	11:4	11:15	4	case SHA224 :
call	11:18	11:43	4	av_sha_init
arg	11:30	11:38	5	ctx->ctx
water	11:30	0:0	6	ctx
op	11:33	0:0	6	->
water	11:35	0:0	6	ctx
arg	11:40	11:43	5	224
water	11:40	0:0	6	224
water	11:44	0:0	4	;
break	11:46	11:51	4	
label	12:4	12:15	4	case SHA256 :
call	12:18	12:43	4	av_sha_init
arg	12:30	12:38	5	ctx->ctx
water	12:30	0:0	6	ctx
op	12:33	0:0	6	->
water	12:35	0:0	6	ctx
arg	12:40	12:43	5	256
water	12:40	0:0	6	256
water	12:44	0:0	4	;
break	12:46	12:51	4	
label	13:4	13:19	4	case SHA512_224 :
call	13:22	13:50	4	av_sha512_init
arg	13:37	13:45	5	ctx->ctx
water	13:37	0:0	6	ctx
op	13:40	0:0	6	->
water	13:42	0:0	6	ctx
arg	13:47	13:50	5	224
water	13:47	0:0	6	224
water	13:51	0:0	4	;
break	13:53	13:58	4	
label	14:4	14:19	4	case SHA512_256 :
call	14:22	14:50	4	av_sha512_init
arg	14:37	14:45	5	ctx->ctx
water	14:37	0:0	6	ctx
op	14:40	0:0	6	->
water	14:42	0:0	6	ctx
arg	14:47	14:50	5	256
water	14:47	0:0	6	256
water	14:51	0:0	4	;
break	14:53	14:58	4	
label	15:4	15:15	4	case SHA384 :
call	15:18	15:46	4	av_sha512_init
arg	15:33	15:41	5	ctx->ctx
water	15:33	0:0	6	ctx
op	15:36	0:0	6	->
water	15:38	0:0	6	ctx
arg	15:43	15:46	5	384
water	15:43	0:0	6	384
water	15:47	0:0	4	;
break	15:49	15:54	4	
label	16:4	16:15	4	case SHA512 :
call	16:18	16:46	4	av_sha512_init
arg	16:33	16:41	5	ctx->ctx
water	16:33	0:0	6	ctx
op	16:36	0:0	6	->
water	16:38	0:0	6	ctx
arg	16:43	16:46	5	512
water	16:43	0:0	6	512
water	16:47	0:0	4	;
break	16:49	16:54	4	
label	17:4	17:14	4	case CRC32 :
water	17:18	0:0	4	ctx
op	17:21	0:0	4	->
water	17:23	0:0	4	crc
op	17:27	0:0	4	=
water	17:29	0:0	4	UINT32_MAX
water	17:39	0:0	4	;
break	17:41	17:46	4	
label	18:4	18:16	4	case ADLER32 :
water	18:18	0:0	4	ctx
op	18:21	0:0	4	->
water	18:23	0:0	4	crc
op	18:27	0:0	4	=
water	18:29	0:0	4	1
water	18:30	0:0	4	;
break	18:32	18:37	4	
water	19:4	0:0	4	}
