func	1:15	110:0	0	int	movie_common_init
params	1:36	0:0	1	
param	1:37	1:57	2	AVFilterContext *	ctx
stmnts	0:0	109:12	1	
decl	3:4	3:35	2	MovieContext	*movie
op	3:24	0:0	2	=
water	3:26	0:0	2	ctx
op	3:29	0:0	2	->
water	3:31	0:0	2	priv
decl	4:4	4:33	2	AVInputFormat	*iformat
op	4:27	0:0	2	=
water	4:29	0:0	2	NULL
decl	5:4	5:21	2	int64_t	timestamp
decl	6:4	6:30	2	int	nb_streams
op	6:19	0:0	2	=
water	6:21	0:0	2	1
water	6:22	0:0	2	,
decl	6:4	6:30	2	int	ret
water	6:27	0:0	2	,
decl	6:4	6:30	2	int	i
decl	7:4	7:59	2	char	default_streams[16]
water	7:28	0:0	2	,
decl	7:4	7:59	2	char	*stream_specs
water	7:43	0:0	2	,
decl	7:4	7:59	2	char	*spec
water	7:50	0:0	2	,
decl	7:4	7:59	2	char	*cursor
decl	8:4	8:17	2	char	name[16]
decl	9:4	9:16	2	AVStream	*st
if	10:4	13:4	2	(! movie -> file_name)
cond	10:8	10:16	3	! movie -> file_name
op	10:8	0:0	4	!
water	10:9	0:0	4	movie
op	10:14	0:0	4	->
water	10:16	0:0	4	file_name
stmts	10:27	13:4	3	
water	10:27	0:0	4	{
call	11:8	11:59	4	av_log
arg	11:15	11:18	5	ctx
water	11:15	0:0	6	ctx
arg	11:20	11:32	5	AV_LOG_ERROR
water	11:20	0:0	6	AV_LOG_ERROR
arg	11:34	11:59	5	"No filename provided!\n"
water	11:34	0:0	6	"No filename provided!\n"
water	11:60	0:0	4	;
return	12:8	12:30	4	AVERROR(EINVAL)
call	12:15	12:29	5	AVERROR
arg	12:23	12:29	6	EINVAL
water	12:23	0:0	7	EINVAL
water	13:4	0:0	4	}
water	14:4	0:0	2	movie
op	14:9	0:0	2	->
water	14:11	0:0	2	seek_point
op	14:22	0:0	2	=
water	14:24	0:0	2	movie
op	14:29	0:0	2	->
water	14:31	0:0	2	seek_point_d
op	14:44	0:0	2	*
water	14:46	0:0	2	1000000
op	14:54	0:0	2	+
water	14:56	0:0	2	0
op	14:57	0:0	2	.
water	14:58	0:0	2	5
water	14:59	0:0	2	;
water	15:4	0:0	2	stream_specs
op	15:17	0:0	2	=
water	15:19	0:0	2	movie
op	15:24	0:0	2	->
water	15:26	0:0	2	stream_specs
water	15:38	0:0	2	;
if	16:4	21:4	2	(! stream_specs)
cond	16:8	16:9	3	! stream_specs
op	16:8	0:0	4	!
water	16:9	0:0	4	stream_specs
stmts	16:23	21:4	3	
water	16:23	0:0	4	{
call	17:8	19:36	4	snprintf
arg	17:17	17:32	5	default_streams
water	17:17	0:0	6	default_streams
arg	17:34	17:57	5	sizeof(default_streams)
op	17:34	0:0	6	sizeof
water	17:40	0:0	6	(
water	17:41	0:0	6	default_streams
water	17:56	0:0	6	)
arg	17:59	17:66	5	"d%c%d"
water	17:59	0:0	6	"d%c%d"
arg	18:17	18:65	5	!strcmp(ctx->filter->name,"amovie")?'a':'v'
op	18:17	0:0	6	!
call	18:18	18:52	6	strcmp
arg	18:25	18:42	7	ctx->filter->name
water	18:25	0:0	8	ctx
op	18:28	0:0	8	->
water	18:30	0:0	8	filter
op	18:36	0:0	8	->
water	18:38	0:0	8	name
arg	18:44	18:52	7	"amovie"
water	18:44	0:0	8	"amovie"
water	18:54	0:0	6	?
water	18:56	0:0	6	'a'
water	18:60	0:0	6	:
water	18:62	0:0	6	'v'
arg	19:17	19:36	5	movie->stream_index
water	19:17	0:0	6	movie
op	19:22	0:0	6	->
water	19:24	0:0	6	stream_index
water	19:37	0:0	4	;
water	20:8	0:0	4	stream_specs
op	20:21	0:0	4	=
water	20:23	0:0	4	default_streams
water	20:38	0:0	4	;
water	21:4	0:0	4	}
for	22:4	24:24	2	(cursor = stream_specs ;* cursor;cursor ++)
forinit	22:9	22:30	3	cursor = stream_specs ;
water	22:9	0:0	4	cursor
op	22:16	0:0	4	=
water	22:18	0:0	4	stream_specs
water	22:30	0:0	4	;
cond	22:32	22:33	3	* cursor
op	22:32	0:0	4	*
water	22:33	0:0	4	cursor
forexpr	22:41	22:47	3	cursor ++
water	22:41	0:0	4	cursor
op	22:47	0:0	4	++
stmts	23:8	24:24	3	
if	23:8	24:24	4	(* cursor == '+')
cond	23:12	23:23	5	* cursor == '+'
op	23:12	0:0	6	*
water	23:13	0:0	6	cursor
op	23:20	0:0	6	==
water	23:23	0:0	6	'+'
stmts	24:12	24:24	5	
water	24:12	0:0	6	nb_streams
op	24:22	0:0	6	++
water	24:24	0:0	6	;
if	25:4	29:4	2	(movie -> loop_count != 1 && nb_streams != 1)
cond	25:8	25:48	3	movie -> loop_count != 1 && nb_streams != 1
water	25:8	0:0	4	movie
op	25:13	0:0	4	->
water	25:15	0:0	4	loop_count
op	25:26	0:0	4	!=
water	25:29	0:0	4	1
op	25:31	0:0	4	&&
water	25:34	0:0	4	nb_streams
op	25:45	0:0	4	!=
water	25:48	0:0	4	1
stmts	25:51	29:4	3	
water	25:51	0:0	4	{
call	26:8	27:69	4	av_log
arg	26:15	26:18	5	ctx
water	26:15	0:0	6	ctx
arg	26:20	26:32	5	AV_LOG_ERROR
water	26:20	0:0	6	AV_LOG_ERROR
arg	27:15	27:69	5	"Loop with several streams is currently unsupported\n"
water	27:15	0:0	6	"Loop with several streams is currently unsupported\n"
water	27:70	0:0	4	;
return	28:8	28:35	4	AVERROR_PATCHWELCOME
water	28:15	0:0	5	AVERROR_PATCHWELCOME
water	29:4	0:0	4	}
call	30:4	30:20	2	av_register_all
water	30:21	0:0	2	;
water	32:4	0:0	2	iformat
op	32:12	0:0	2	=
water	32:14	0:0	2	movie
op	32:19	0:0	2	->
water	32:21	0:0	2	format_name
water	32:33	0:0	2	?
call	32:35	32:74	2	av_find_input_format
arg	32:56	32:74	3	movie->format_name
water	32:56	0:0	4	movie
op	32:61	0:0	4	->
water	32:63	0:0	4	format_name
water	32:76	0:0	2	:
water	32:78	0:0	2	NULL
water	32:82	0:0	2	;
water	33:4	0:0	2	movie
op	33:9	0:0	2	->
water	33:11	0:0	2	format_ctx
op	33:22	0:0	2	=
water	33:24	0:0	2	NULL
water	33:28	0:0	2	;
if	34:4	38:4	2	(( ret =avformat_open_input (& movie -> format_ctx ,movie -> file_name ,iformat ,NULL ) ) < 0)
cond	34:8	34:91	3	( ret =avformat_open_input (& movie -> format_ctx ,movie -> file_name ,iformat ,NULL ) ) < 0
water	34:8	0:0	4	(
water	34:9	0:0	4	ret
op	34:13	0:0	4	=
call	34:15	34:86	4	avformat_open_input
arg	34:35	34:53	5	&movie->format_ctx
op	34:35	0:0	6	&
water	34:36	0:0	6	movie
op	34:41	0:0	6	->
water	34:43	0:0	6	format_ctx
arg	34:55	34:71	5	movie->file_name
water	34:55	0:0	6	movie
op	34:60	0:0	6	->
water	34:62	0:0	6	file_name
arg	34:73	34:80	5	iformat
water	34:73	0:0	6	iformat
arg	34:82	34:86	5	NULL
water	34:82	0:0	6	NULL
water	34:87	0:0	4	)
op	34:89	0:0	4	<
water	34:91	0:0	4	0
stmts	34:94	38:4	3	
water	34:94	0:0	4	{
call	35:8	36:71	4	av_log
arg	35:15	35:18	5	ctx
water	35:15	0:0	6	ctx
arg	35:20	35:32	5	AV_LOG_ERROR
water	35:20	0:0	6	AV_LOG_ERROR
arg	36:15	36:53	5	"Failed to avformat_open_input '%s'\n"
water	36:15	0:0	6	"Failed to avformat_open_input '%s'\n"
arg	36:55	36:71	5	movie->file_name
water	36:55	0:0	6	movie
op	36:60	0:0	6	->
water	36:62	0:0	6	file_name
water	36:72	0:0	4	;
return	37:8	37:18	4	ret
water	37:15	0:0	5	ret
water	38:4	0:0	4	}
if	39:4	40:67	2	(( ret =avformat_find_stream_info (movie -> format_ctx ,NULL ) ) < 0)
cond	39:8	39:69	3	( ret =avformat_find_stream_info (movie -> format_ctx ,NULL ) ) < 0
water	39:8	0:0	4	(
water	39:9	0:0	4	ret
op	39:13	0:0	4	=
call	39:15	39:64	4	avformat_find_stream_info
arg	39:41	39:58	5	movie->format_ctx
water	39:41	0:0	6	movie
op	39:46	0:0	6	->
water	39:48	0:0	6	format_ctx
arg	39:60	39:64	5	NULL
water	39:60	0:0	6	NULL
water	39:65	0:0	4	)
op	39:67	0:0	4	<
water	39:69	0:0	4	0
stmts	40:8	40:67	3	
call	40:8	40:66	4	av_log
arg	40:15	40:18	5	ctx
water	40:15	0:0	6	ctx
arg	40:20	40:34	5	AV_LOG_WARNING
water	40:20	0:0	6	AV_LOG_WARNING
arg	40:36	40:66	5	"Failed to find stream info\n"
water	40:36	0:0	6	"Failed to find stream info\n"
water	40:67	0:0	4	;
if	42:4	59:4	2	(movie -> seek_point > 0)
cond	42:8	42:28	3	movie -> seek_point > 0
water	42:8	0:0	4	movie
op	42:13	0:0	4	->
water	42:15	0:0	4	seek_point
op	42:26	0:0	4	>
water	42:28	0:0	4	0
stmts	42:31	59:4	3	
water	42:31	0:0	4	{
water	43:8	0:0	4	timestamp
op	43:18	0:0	4	=
water	43:20	0:0	4	movie
op	43:25	0:0	4	->
water	43:27	0:0	4	seek_point
water	43:37	0:0	4	;
if	45:8	53:8	4	(movie -> format_ctx -> start_time != AV_NOPTS_VALUE)
cond	45:12	45:45	5	movie -> format_ctx -> start_time != AV_NOPTS_VALUE
water	45:12	0:0	6	movie
op	45:17	0:0	6	->
water	45:19	0:0	6	format_ctx
op	45:29	0:0	6	->
water	45:31	0:0	6	start_time
op	45:42	0:0	6	!=
water	45:45	0:0	6	AV_NOPTS_VALUE
stmts	45:61	53:8	5	
water	45:61	0:0	6	{
if	46:12	51:12	6	(timestamp > INT64_MAX - movie -> format_ctx -> start_time)
cond	46:16	46:59	7	timestamp > INT64_MAX - movie -> format_ctx -> start_time
water	46:16	0:0	8	timestamp
op	46:26	0:0	8	>
water	46:28	0:0	8	INT64_MAX
op	46:38	0:0	8	-
water	46:40	0:0	8	movie
op	46:45	0:0	8	->
water	46:47	0:0	8	format_ctx
op	46:57	0:0	8	->
water	46:59	0:0	8	start_time
stmts	46:71	51:12	7	
water	46:71	0:0	8	{
call	47:16	49:89	8	av_log
arg	47:23	47:26	9	ctx
water	47:23	0:0	10	ctx
arg	47:28	47:40	9	AV_LOG_ERROR
water	47:28	0:0	10	AV_LOG_ERROR
arg	48:23	48:97	9	"%s: seek value overflow with start_time:%"PRId64" seek_point:%"PRId64"\n"
water	48:23	0:0	10	"%s: seek value overflow with start_time:%"
water	48:66	0:0	10	PRId64
water	48:72	0:0	10	" seek_point:%"
water	48:87	0:0	10	PRId64
water	48:93	0:0	10	"\n"
arg	49:23	49:39	9	movie->file_name
water	49:23	0:0	10	movie
op	49:28	0:0	10	->
water	49:30	0:0	10	file_name
arg	49:41	49:70	9	movie->format_ctx->start_time
water	49:41	0:0	10	movie
op	49:46	0:0	10	->
water	49:48	0:0	10	format_ctx
op	49:58	0:0	10	->
water	49:60	0:0	10	start_time
arg	49:72	49:89	9	movie->seek_point
water	49:72	0:0	10	movie
op	49:77	0:0	10	->
water	49:79	0:0	10	seek_point
water	49:90	0:0	8	;
return	50:16	50:38	8	AVERROR(EINVAL)
call	50:23	50:37	9	AVERROR
arg	50:31	50:37	10	EINVAL
water	50:31	0:0	11	EINVAL
water	51:12	0:0	8	}
water	52:12	0:0	6	timestamp
op	52:22	0:0	6	+=
water	52:25	0:0	6	movie
op	52:30	0:0	6	->
water	52:32	0:0	6	format_ctx
op	52:42	0:0	6	->
water	52:44	0:0	6	start_time
water	52:54	0:0	6	;
water	53:8	0:0	6	}
if	54:8	58:8	4	(( ret =av_seek_frame (movie -> format_ctx ,- 1 ,timestamp ,AVSEEK_FLAG_BACKWARD ) ) < 0)
cond	54:12	54:92	5	( ret =av_seek_frame (movie -> format_ctx ,- 1 ,timestamp ,AVSEEK_FLAG_BACKWARD ) ) < 0
water	54:12	0:0	6	(
water	54:13	0:0	6	ret
op	54:17	0:0	6	=
call	54:19	54:87	6	av_seek_frame
arg	54:33	54:50	7	movie->format_ctx
water	54:33	0:0	8	movie
op	54:38	0:0	8	->
water	54:40	0:0	8	format_ctx
arg	54:52	54:54	7	-1
op	54:52	0:0	8	-
water	54:53	0:0	8	1
arg	54:56	54:65	7	timestamp
water	54:56	0:0	8	timestamp
arg	54:67	54:87	7	AVSEEK_FLAG_BACKWARD
water	54:67	0:0	8	AVSEEK_FLAG_BACKWARD
water	54:88	0:0	6	)
op	54:90	0:0	6	<
water	54:92	0:0	6	0
stmts	54:95	58:8	5	
water	54:95	0:0	6	{
call	55:12	56:46	6	av_log
arg	55:19	55:22	7	ctx
water	55:19	0:0	8	ctx
arg	55:24	55:36	7	AV_LOG_ERROR
water	55:24	0:0	8	AV_LOG_ERROR
arg	55:38	55:82	7	"%s: could not seek to position %"PRId64"\n"
water	55:38	0:0	8	"%s: could not seek to position %"
water	55:72	0:0	8	PRId64
water	55:78	0:0	8	"\n"
arg	56:19	56:35	7	movie->file_name
water	56:19	0:0	8	movie
op	56:24	0:0	8	->
water	56:26	0:0	8	file_name
arg	56:37	56:46	7	timestamp
water	56:37	0:0	8	timestamp
water	56:47	0:0	6	;
return	57:12	57:22	6	ret
water	57:19	0:0	7	ret
water	58:8	0:0	6	}
water	59:4	0:0	4	}
for	60:4	61:62	2	(i = 0 ;i < movie -> format_ctx -> nb_streams;i ++)
forinit	60:9	60:14	3	i = 0 ;
water	60:9	0:0	4	i
op	60:11	0:0	4	=
water	60:13	0:0	4	0
water	60:14	0:0	4	;
cond	60:16	60:39	3	i < movie -> format_ctx -> nb_streams
water	60:16	0:0	4	i
op	60:18	0:0	4	<
water	60:20	0:0	4	movie
op	60:25	0:0	4	->
water	60:27	0:0	4	format_ctx
op	60:37	0:0	4	->
water	60:39	0:0	4	nb_streams
forexpr	60:51	60:52	3	i ++
water	60:51	0:0	4	i
op	60:52	0:0	4	++
stmts	61:8	61:62	3	
water	61:8	0:0	4	movie
op	61:13	0:0	4	->
water	61:15	0:0	4	format_ctx
op	61:25	0:0	4	->
water	61:27	0:0	4	streams
op	61:34	0:0	4	[
water	61:35	0:0	4	i
op	61:36	0:0	4	]
op	61:37	0:0	4	->
water	61:39	0:0	4	discard
op	61:47	0:0	4	=
water	61:49	0:0	4	AVDISCARD_ALL
water	61:62	0:0	4	;
water	62:4	0:0	2	movie
op	62:9	0:0	2	->
water	62:11	0:0	2	st
op	62:14	0:0	2	=
call	62:16	62:56	2	av_calloc
arg	62:26	62:36	3	nb_streams
water	62:26	0:0	4	nb_streams
arg	62:38	62:56	3	sizeof(*movie->st)
op	62:38	0:0	4	sizeof
water	62:44	0:0	4	(
op	62:45	0:0	4	*
water	62:46	0:0	4	movie
op	62:51	0:0	4	->
water	62:53	0:0	4	st
water	62:55	0:0	4	)
water	62:57	0:0	2	;
if	63:4	64:30	2	(! movie -> st)
cond	63:8	63:16	3	! movie -> st
op	63:8	0:0	4	!
water	63:9	0:0	4	movie
op	63:14	0:0	4	->
water	63:16	0:0	4	st
stmts	64:8	64:30	3	
return	64:8	64:30	4	AVERROR(ENOMEM)
call	64:15	64:29	5	AVERROR
arg	64:23	64:29	6	ENOMEM
water	64:23	0:0	7	ENOMEM
for	65:4	76:4	2	(i = 0 ;i < nb_streams;i ++)
forinit	65:9	65:14	3	i = 0 ;
water	65:9	0:0	4	i
op	65:11	0:0	4	=
water	65:13	0:0	4	0
water	65:14	0:0	4	;
cond	65:16	65:20	3	i < nb_streams
water	65:16	0:0	4	i
op	65:18	0:0	4	<
water	65:20	0:0	4	nb_streams
forexpr	65:32	65:33	3	i ++
water	65:32	0:0	4	i
op	65:33	0:0	4	++
stmts	65:37	76:4	3	
water	65:37	0:0	4	{
water	66:8	0:0	4	spec
op	66:13	0:0	4	=
call	66:15	66:51	4	av_strtok
arg	66:25	66:37	5	stream_specs
water	66:25	0:0	6	stream_specs
arg	66:39	66:42	5	"+"
water	66:39	0:0	6	"+"
arg	66:44	66:51	5	&cursor
op	66:44	0:0	6	&
water	66:45	0:0	6	cursor
water	66:52	0:0	4	;
if	67:8	68:30	4	(! spec)
cond	67:12	67:13	5	! spec
op	67:12	0:0	6	!
water	67:13	0:0	6	spec
stmts	68:12	68:30	5	
return	68:12	68:30	6	AVERROR_BUG
water	68:19	0:0	7	AVERROR_BUG
water	69:8	0:0	4	stream_specs
op	69:21	0:0	4	=
water	69:23	0:0	4	NULL
water	69:27	0:0	4	;
water	70:8	0:0	4	st
op	70:11	0:0	4	=
call	70:13	70:53	4	find_stream
arg	70:25	70:28	5	ctx
water	70:25	0:0	6	ctx
arg	70:30	70:47	5	movie->format_ctx
water	70:30	0:0	6	movie
op	70:35	0:0	6	->
water	70:37	0:0	6	format_ctx
arg	70:49	70:53	5	spec
water	70:49	0:0	6	spec
water	70:54	0:0	4	;
if	71:8	72:34	4	(! st)
cond	71:12	71:13	5	! st
op	71:12	0:0	6	!
water	71:13	0:0	6	st
stmts	72:12	72:34	5	
return	72:12	72:34	6	AVERROR(EINVAL)
call	72:19	72:33	7	AVERROR
arg	72:27	72:33	8	EINVAL
water	72:27	0:0	9	EINVAL
water	73:8	0:0	4	st
op	73:10	0:0	4	->
water	73:12	0:0	4	discard
op	73:20	0:0	4	=
water	73:22	0:0	4	AVDISCARD_DEFAULT
water	73:39	0:0	4	;
water	74:8	0:0	4	movie
op	74:13	0:0	4	->
water	74:15	0:0	4	st
op	74:17	0:0	4	[
water	74:18	0:0	4	i
op	74:19	0:0	4	]
op	74:20	0:0	4	.
water	74:21	0:0	4	st
op	74:24	0:0	4	=
water	74:26	0:0	4	st
water	74:28	0:0	4	;
water	75:8	0:0	4	movie
op	75:13	0:0	4	->
water	75:15	0:0	4	max_stream_index
op	75:32	0:0	4	=
call	75:34	75:74	4	FFMAX
arg	75:40	75:63	5	movie->max_stream_index
water	75:40	0:0	6	movie
op	75:45	0:0	6	->
water	75:47	0:0	6	max_stream_index
arg	75:65	75:74	5	st->index
water	75:65	0:0	6	st
op	75:67	0:0	6	->
water	75:69	0:0	6	index
water	75:75	0:0	4	;
water	76:4	0:0	4	}
if	77:4	78:26	2	(av_strtok (NULL ,"+" ,& cursor ))
cond	77:8	77:36	3	av_strtok (NULL ,"+" ,& cursor )
call	77:8	77:36	4	av_strtok
arg	77:18	77:22	5	NULL
water	77:18	0:0	6	NULL
arg	77:24	77:27	5	"+"
water	77:24	0:0	6	"+"
arg	77:29	77:36	5	&cursor
op	77:29	0:0	6	&
water	77:30	0:0	6	cursor
stmts	78:8	78:26	3	
return	78:8	78:26	4	AVERROR_BUG
water	78:15	0:0	5	AVERROR_BUG
water	79:4	0:0	2	movie
op	79:9	0:0	2	->
water	79:11	0:0	2	out_index
op	79:21	0:0	2	=
call	79:23	80:58	2	av_calloc
arg	79:33	79:60	3	movie->max_stream_index+1
water	79:33	0:0	4	movie
op	79:38	0:0	4	->
water	79:40	0:0	4	max_stream_index
op	79:57	0:0	4	+
water	79:59	0:0	4	1
arg	80:33	80:58	3	sizeof(*movie->out_index)
op	80:33	0:0	4	sizeof
water	80:39	0:0	4	(
op	80:40	0:0	4	*
water	80:41	0:0	4	movie
op	80:46	0:0	4	->
water	80:48	0:0	4	out_index
water	80:57	0:0	4	)
water	80:59	0:0	2	;
if	81:4	82:30	2	(! movie -> out_index)
cond	81:8	81:16	3	! movie -> out_index
op	81:8	0:0	4	!
water	81:9	0:0	4	movie
op	81:14	0:0	4	->
water	81:16	0:0	4	out_index
stmts	82:8	82:30	3	
return	82:8	82:30	4	AVERROR(ENOMEM)
call	82:15	82:29	5	AVERROR
arg	82:23	82:29	6	ENOMEM
water	82:23	0:0	7	ENOMEM
for	83:4	84:32	2	(i = 0 ;i <= movie -> max_stream_index;i ++)
forinit	83:9	83:14	3	i = 0 ;
water	83:9	0:0	4	i
op	83:11	0:0	4	=
water	83:13	0:0	4	0
water	83:14	0:0	4	;
cond	83:16	83:28	3	i <= movie -> max_stream_index
water	83:16	0:0	4	i
op	83:18	0:0	4	<=
water	83:21	0:0	4	movie
op	83:26	0:0	4	->
water	83:28	0:0	4	max_stream_index
forexpr	83:46	83:47	3	i ++
water	83:46	0:0	4	i
op	83:47	0:0	4	++
stmts	84:8	84:32	3	
water	84:8	0:0	4	movie
op	84:13	0:0	4	->
water	84:15	0:0	4	out_index
op	84:24	0:0	4	[
water	84:25	0:0	4	i
op	84:26	0:0	4	]
op	84:28	0:0	4	=
op	84:30	0:0	4	-
water	84:31	0:0	4	1
water	84:32	0:0	4	;
for	85:4	105:4	2	(i = 0 ;i < nb_streams;i ++)
forinit	85:9	85:14	3	i = 0 ;
water	85:9	0:0	4	i
op	85:11	0:0	4	=
water	85:13	0:0	4	0
water	85:14	0:0	4	;
cond	85:16	85:20	3	i < nb_streams
water	85:16	0:0	4	i
op	85:18	0:0	4	<
water	85:20	0:0	4	nb_streams
forexpr	85:32	85:33	3	i ++
water	85:32	0:0	4	i
op	85:33	0:0	4	++
stmts	85:37	105:4	3	
water	85:37	0:0	4	{
decl	86:8	86:31	4	AVFilterPad	pad
op	86:24	0:0	4	=
water	86:26	0:0	4	{
water	86:28	0:0	4	0
water	86:30	0:0	4	}
water	87:8	0:0	4	movie
op	87:13	0:0	4	->
water	87:15	0:0	4	out_index
op	87:24	0:0	4	[
water	87:25	0:0	4	movie
op	87:30	0:0	4	->
water	87:32	0:0	4	st
op	87:34	0:0	4	[
water	87:35	0:0	4	i
op	87:36	0:0	4	]
op	87:37	0:0	4	.
water	87:38	0:0	4	st
op	87:40	0:0	4	->
water	87:42	0:0	4	index
op	87:47	0:0	4	]
op	87:49	0:0	4	=
water	87:51	0:0	4	i
water	87:52	0:0	4	;
call	88:8	88:47	4	snprintf
arg	88:17	88:21	5	name
water	88:17	0:0	6	name
arg	88:23	88:35	5	sizeof(name)
op	88:23	0:0	6	sizeof
water	88:29	0:0	6	(
water	88:30	0:0	6	name
water	88:34	0:0	6	)
arg	88:37	88:44	5	"out%d"
water	88:37	0:0	6	"out%d"
arg	88:46	88:47	5	i
water	88:46	0:0	6	i
water	88:48	0:0	4	;
water	89:8	0:0	4	pad
op	89:11	0:0	4	.
water	89:12	0:0	4	type
op	89:26	0:0	4	=
water	89:28	0:0	4	movie
op	89:33	0:0	4	->
water	89:35	0:0	4	st
op	89:37	0:0	4	[
water	89:38	0:0	4	i
op	89:39	0:0	4	]
op	89:40	0:0	4	.
water	89:41	0:0	4	st
op	89:43	0:0	4	->
water	89:45	0:0	4	codec
op	89:50	0:0	4	->
water	89:52	0:0	4	codec_type
water	89:62	0:0	4	;
water	90:8	0:0	4	pad
op	90:11	0:0	4	.
water	90:12	0:0	4	name
op	90:26	0:0	4	=
call	90:28	90:42	4	av_strdup
arg	90:38	90:42	5	name
water	90:38	0:0	6	name
water	90:43	0:0	4	;
if	91:8	92:34	4	(! pad . name)
cond	91:12	91:17	5	! pad . name
op	91:12	0:0	6	!
water	91:13	0:0	6	pad
op	91:16	0:0	6	.
water	91:17	0:0	6	name
stmts	92:12	92:34	5	
return	92:12	92:34	6	AVERROR(ENOMEM)
call	92:19	92:33	7	AVERROR
arg	92:27	92:33	8	ENOMEM
water	92:27	0:0	9	ENOMEM
water	93:8	0:0	4	pad
op	93:11	0:0	4	.
water	93:12	0:0	4	config_props
op	93:26	0:0	4	=
water	93:28	0:0	4	movie_config_output_props
water	93:53	0:0	4	;
water	94:8	0:0	4	pad
op	94:11	0:0	4	.
water	94:12	0:0	4	request_frame
op	94:26	0:0	4	=
water	94:28	0:0	4	movie_request_frame
water	94:47	0:0	4	;
call	95:8	95:37	4	ff_insert_outpad
arg	95:25	95:28	5	ctx
water	95:25	0:0	6	ctx
arg	95:30	95:31	5	i
water	95:30	0:0	6	i
arg	95:33	95:37	5	&pad
op	95:33	0:0	6	&
water	95:34	0:0	6	pad
water	95:38	0:0	4	;
water	96:8	0:0	4	ret
op	96:12	0:0	4	=
call	96:14	96:44	4	open_stream
arg	96:26	96:29	5	ctx
water	96:26	0:0	6	ctx
arg	96:31	96:44	5	&movie->st[i]
op	96:31	0:0	6	&
water	96:32	0:0	6	movie
op	96:37	0:0	6	->
water	96:39	0:0	6	st
op	96:41	0:0	6	[
water	96:42	0:0	6	i
op	96:43	0:0	6	]
water	96:45	0:0	4	;
if	97:8	98:22	4	(ret < 0)
cond	97:12	97:18	5	ret < 0
water	97:12	0:0	6	ret
op	97:16	0:0	6	<
water	97:18	0:0	6	0
stmts	98:12	98:22	5	
return	98:12	98:22	6	ret
water	98:19	0:0	7	ret
if	99:8	104:8	4	(movie -> st [ i ] . st -> codec -> codec -> type == AVMEDIA_TYPE_AUDIO && ! movie -> st [ i ] . st -> codec -> channel_layout)
cond	99:13	100:37	5	movie -> st [ i ] . st -> codec -> codec -> type == AVMEDIA_TYPE_AUDIO && ! movie -> st [ i ] . st -> codec -> channel_layout
water	99:13	0:0	6	movie
op	99:18	0:0	6	->
water	99:20	0:0	6	st
op	99:22	0:0	6	[
water	99:23	0:0	6	i
op	99:24	0:0	6	]
op	99:25	0:0	6	.
water	99:26	0:0	6	st
op	99:28	0:0	6	->
water	99:30	0:0	6	codec
op	99:35	0:0	6	->
water	99:37	0:0	6	codec
op	99:42	0:0	6	->
water	99:44	0:0	6	type
op	99:49	0:0	6	==
water	99:52	0:0	6	AVMEDIA_TYPE_AUDIO
op	99:71	0:0	6	&&
op	100:12	0:0	6	!
water	100:13	0:0	6	movie
op	100:18	0:0	6	->
water	100:20	0:0	6	st
op	100:22	0:0	6	[
water	100:23	0:0	6	i
op	100:24	0:0	6	]
op	100:25	0:0	6	.
water	100:26	0:0	6	st
op	100:28	0:0	6	->
water	100:30	0:0	6	codec
op	100:35	0:0	6	->
water	100:37	0:0	6	channel_layout
stmts	100:53	104:8	5	
water	100:53	0:0	6	{
water	101:12	0:0	6	ret
op	101:16	0:0	6	=
call	101:18	101:60	6	guess_channel_layout
arg	101:39	101:52	7	&movie->st[i]
op	101:39	0:0	8	&
water	101:40	0:0	8	movie
op	101:45	0:0	8	->
water	101:47	0:0	8	st
op	101:49	0:0	8	[
water	101:50	0:0	8	i
op	101:51	0:0	8	]
arg	101:54	101:55	7	i
water	101:54	0:0	8	i
arg	101:57	101:60	7	ctx
water	101:57	0:0	8	ctx
water	101:61	0:0	6	;
if	102:12	103:26	6	(ret < 0)
cond	102:16	102:22	7	ret < 0
water	102:16	0:0	8	ret
op	102:20	0:0	8	<
water	102:22	0:0	8	0
stmts	103:16	103:26	7	
return	103:16	103:26	8	ret
water	103:23	0:0	9	ret
water	104:8	0:0	6	}
water	105:4	0:0	4	}
call	106:4	108:30	2	av_log
arg	106:11	106:14	3	ctx
water	106:11	0:0	4	ctx
arg	106:16	106:30	3	AV_LOG_VERBOSE
water	106:16	0:0	4	AV_LOG_VERBOSE
arg	106:32	106:100	3	"seek_point:%"PRIi64" format_name:%s file_name:%s stream_index:%d\n"
water	106:32	0:0	4	"seek_point:%"
water	106:46	0:0	4	PRIi64
water	106:52	0:0	4	" format_name:%s file_name:%s stream_index:%d\n"
arg	107:11	107:28	3	movie->seek_point
water	107:11	0:0	4	movie
op	107:16	0:0	4	->
water	107:18	0:0	4	seek_point
arg	107:30	107:48	3	movie->format_name
water	107:30	0:0	4	movie
op	107:35	0:0	4	->
water	107:37	0:0	4	format_name
arg	107:50	107:66	3	movie->file_name
water	107:50	0:0	4	movie
op	107:55	0:0	4	->
water	107:57	0:0	4	file_name
arg	108:11	108:30	3	movie->stream_index
water	108:11	0:0	4	movie
op	108:16	0:0	4	->
water	108:18	0:0	4	stream_index
water	108:31	0:0	2	;
return	109:4	109:12	2	0
water	109:11	0:0	3	0
