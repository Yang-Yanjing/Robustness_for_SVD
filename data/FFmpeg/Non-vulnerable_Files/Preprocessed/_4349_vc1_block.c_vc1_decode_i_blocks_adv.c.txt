func	1:0	118:0	0	static void	vc1_decode_i_blocks_adv
params	1:35	0:0	1	
param	1:36	1:49	2	VC1Context *	v
stmnts	0:0	117:66	1	
decl	3:4	3:9	2	int	k
decl	4:4	4:29	2	MpegEncContext	*s
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	v
op	4:26	0:0	2	->
water	4:28	0:0	2	s
decl	5:4	5:16	2	int	cbp
water	5:11	0:0	2	,
decl	5:4	5:16	2	int	val
decl	6:4	6:22	2	uint8_t	*coded_val
decl	7:4	7:14	2	int	mb_pos
decl	8:4	8:22	2	int	mquant
op	8:15	0:0	2	=
water	8:17	0:0	2	v
op	8:18	0:0	2	->
water	8:20	0:0	2	pq
decl	9:4	9:14	2	int	mqdiff
decl	10:4	10:30	2	GetBitContext	*gb
op	10:22	0:0	2	=
op	10:24	0:0	2	&
water	10:25	0:0	2	s
op	10:26	0:0	2	->
water	10:28	0:0	2	gb
switch	12:4	22:4	2	(v -> y_ac_table_index)
cond	12:12	12:15	3	v -> y_ac_table_index
water	12:12	0:0	4	v
op	12:13	0:0	4	->
water	12:15	0:0	4	y_ac_table_index
stmts	12:33	22:4	3	
water	12:33	0:0	4	{
label	13:4	13:10	4	case 0 :
water	14:8	0:0	4	v
op	14:9	0:0	4	->
water	14:11	0:0	4	codingset
op	14:21	0:0	4	=
water	14:23	0:0	4	(
water	14:24	0:0	4	v
op	14:25	0:0	4	->
water	14:27	0:0	4	pqindex
op	14:35	0:0	4	<=
water	14:38	0:0	4	8
water	14:39	0:0	4	)
water	14:41	0:0	4	?
water	14:43	0:0	4	CS_HIGH_RATE_INTRA
water	14:62	0:0	4	:
water	14:64	0:0	4	CS_LOW_MOT_INTRA
water	14:80	0:0	4	;
break	15:8	15:13	4	
label	16:4	16:10	4	case 1 :
water	17:8	0:0	4	v
op	17:9	0:0	4	->
water	17:11	0:0	4	codingset
op	17:21	0:0	4	=
water	17:23	0:0	4	CS_HIGH_MOT_INTRA
water	17:40	0:0	4	;
break	18:8	18:13	4	
label	19:4	19:10	4	case 2 :
water	20:8	0:0	4	v
op	20:9	0:0	4	->
water	20:11	0:0	4	codingset
op	20:21	0:0	4	=
water	20:23	0:0	4	CS_MID_RATE_INTRA
water	20:40	0:0	4	;
break	21:8	21:13	4	
water	22:4	0:0	4	}
switch	23:4	33:4	2	(v -> c_ac_table_index)
cond	23:12	23:15	3	v -> c_ac_table_index
water	23:12	0:0	4	v
op	23:13	0:0	4	->
water	23:15	0:0	4	c_ac_table_index
stmts	23:33	33:4	3	
water	23:33	0:0	4	{
label	24:4	24:10	4	case 0 :
water	25:8	0:0	4	v
op	25:9	0:0	4	->
water	25:11	0:0	4	codingset2
op	25:22	0:0	4	=
water	25:24	0:0	4	(
water	25:25	0:0	4	v
op	25:26	0:0	4	->
water	25:28	0:0	4	pqindex
op	25:36	0:0	4	<=
water	25:39	0:0	4	8
water	25:40	0:0	4	)
water	25:42	0:0	4	?
water	25:44	0:0	4	CS_HIGH_RATE_INTER
water	25:63	0:0	4	:
water	25:65	0:0	4	CS_LOW_MOT_INTER
water	25:81	0:0	4	;
break	26:8	26:13	4	
label	27:4	27:10	4	case 1 :
water	28:8	0:0	4	v
op	28:9	0:0	4	->
water	28:11	0:0	4	codingset2
op	28:22	0:0	4	=
water	28:24	0:0	4	CS_HIGH_MOT_INTER
water	28:41	0:0	4	;
break	29:8	29:13	4	
label	30:4	30:10	4	case 2 :
water	31:8	0:0	4	v
op	31:9	0:0	4	->
water	31:11	0:0	4	codingset2
op	31:22	0:0	4	=
water	31:24	0:0	4	CS_MID_RATE_INTER
water	31:41	0:0	4	;
break	32:8	32:13	4	
water	33:4	0:0	4	}
water	35:4	0:0	2	s
op	35:5	0:0	2	->
water	35:7	0:0	2	mb_x
op	35:24	0:0	2	=
water	35:26	0:0	2	s
op	35:27	0:0	2	->
water	35:29	0:0	2	mb_y
op	35:34	0:0	2	=
water	35:36	0:0	2	0
water	35:37	0:0	2	;
water	36:4	0:0	2	s
op	36:5	0:0	2	->
water	36:7	0:0	2	mb_intra
op	36:24	0:0	2	=
water	36:26	0:0	2	1
water	36:27	0:0	2	;
water	37:4	0:0	2	s
op	37:5	0:0	2	->
water	37:7	0:0	2	first_slice_line
op	37:24	0:0	2	=
water	37:26	0:0	2	1
water	37:27	0:0	2	;
water	38:4	0:0	2	s
op	38:5	0:0	2	->
water	38:7	0:0	2	mb_y
op	38:24	0:0	2	=
water	38:26	0:0	2	s
op	38:27	0:0	2	->
water	38:29	0:0	2	start_mb_y
water	38:39	0:0	2	;
if	39:4	44:4	2	(s -> start_mb_y)
cond	39:8	39:11	3	s -> start_mb_y
water	39:8	0:0	4	s
op	39:9	0:0	4	->
water	39:11	0:0	4	start_mb_y
stmts	39:23	44:4	3	
water	39:23	0:0	4	{
water	40:8	0:0	4	s
op	40:9	0:0	4	->
water	40:11	0:0	4	mb_x
op	40:16	0:0	4	=
water	40:18	0:0	4	0
water	40:19	0:0	4	;
call	41:8	41:26	4	init_block_index
arg	41:25	41:26	5	v
water	41:25	0:0	6	v
water	41:27	0:0	4	;
call	42:8	43:59	4	memset
arg	42:15	42:64	5	&s->coded_block[s->block_index[0]-s->b8_stride]
op	42:15	0:0	6	&
water	42:16	0:0	6	s
op	42:17	0:0	6	->
water	42:19	0:0	6	coded_block
op	42:30	0:0	6	[
water	42:31	0:0	6	s
op	42:32	0:0	6	->
water	42:34	0:0	6	block_index
op	42:45	0:0	6	[
water	42:46	0:0	6	0
op	42:47	0:0	6	]
op	42:49	0:0	6	-
water	42:51	0:0	6	s
op	42:52	0:0	6	->
water	42:54	0:0	6	b8_stride
op	42:63	0:0	6	]
arg	42:66	42:67	5	0
water	42:66	0:0	6	0
arg	43:15	43:59	5	(1+s->b8_stride)*sizeof(*s->coded_block)
water	43:15	0:0	6	(
water	43:16	0:0	6	1
op	43:18	0:0	6	+
water	43:20	0:0	6	s
op	43:21	0:0	6	->
water	43:23	0:0	6	b8_stride
water	43:32	0:0	6	)
op	43:34	0:0	6	*
op	43:36	0:0	6	sizeof
water	43:42	0:0	6	(
op	43:43	0:0	6	*
water	43:44	0:0	6	s
op	43:45	0:0	6	->
water	43:47	0:0	6	coded_block
water	43:58	0:0	6	)
water	43:60	0:0	4	;
water	44:4	0:0	4	}
for	45:4	104:4	2	(;s -> mb_y < s -> end_mb_y;s -> mb_y ++)
forinit	45:9	45:9	3	;
water	45:9	0:0	4	;
cond	45:11	45:24	3	s -> mb_y < s -> end_mb_y
water	45:11	0:0	4	s
op	45:12	0:0	4	->
water	45:14	0:0	4	mb_y
op	45:19	0:0	4	<
water	45:21	0:0	4	s
op	45:22	0:0	4	->
water	45:24	0:0	4	end_mb_y
forexpr	45:34	45:41	3	s -> mb_y ++
water	45:34	0:0	4	s
op	45:35	0:0	4	->
water	45:37	0:0	4	mb_y
op	45:41	0:0	4	++
stmts	45:45	104:4	3	
water	45:45	0:0	4	{
water	46:8	0:0	4	s
op	46:9	0:0	4	->
water	46:11	0:0	4	mb_x
op	46:16	0:0	4	=
water	46:18	0:0	4	0
water	46:19	0:0	4	;
call	47:8	47:26	4	init_block_index
arg	47:25	47:26	5	v
water	47:25	0:0	6	v
water	47:27	0:0	4	;
for	48:8	98:8	4	(;s -> mb_x < s -> mb_width;s -> mb_x ++)
forinit	48:13	48:13	5	;
water	48:13	0:0	6	;
cond	48:14	48:27	5	s -> mb_x < s -> mb_width
water	48:14	0:0	6	s
op	48:15	0:0	6	->
water	48:17	0:0	6	mb_x
op	48:22	0:0	6	<
water	48:24	0:0	6	s
op	48:25	0:0	6	->
water	48:27	0:0	6	mb_width
forexpr	48:37	48:44	5	s -> mb_x ++
water	48:37	0:0	6	s
op	48:38	0:0	6	->
water	48:40	0:0	6	mb_x
op	48:44	0:0	6	++
stmts	48:48	98:8	5	
water	48:48	0:0	6	{
call	49:12	49:27	6	int16_t
arg	49:21	49:27	7	*block
op	49:21	0:0	8	*
water	49:22	0:0	8	block
op	49:28	0:0	6	[
water	49:29	0:0	6	64
op	49:31	0:0	6	]
op	49:33	0:0	6	=
water	49:35	0:0	6	v
op	49:36	0:0	6	->
water	49:38	0:0	6	block
op	49:43	0:0	6	[
water	49:44	0:0	6	v
op	49:45	0:0	6	->
water	49:47	0:0	6	cur_blk_idx
op	49:58	0:0	6	]
water	49:59	0:0	6	;
call	50:12	50:35	6	ff_update_block_index
arg	50:34	50:35	7	s
water	50:34	0:0	8	s
water	50:36	0:0	6	;
call	51:12	51:41	6	s->bdsp.clear_blocks
arg	51:33	51:41	7	block[0]
water	51:33	0:0	8	block
op	51:38	0:0	8	[
water	51:39	0:0	8	0
op	51:40	0:0	8	]
water	51:42	0:0	6	;
water	52:12	0:0	6	mb_pos
op	52:19	0:0	6	=
water	52:21	0:0	6	s
op	52:22	0:0	6	->
water	52:24	0:0	6	mb_x
op	52:29	0:0	6	+
water	52:31	0:0	6	s
op	52:32	0:0	6	->
water	52:34	0:0	6	mb_y
op	52:39	0:0	6	*
water	52:41	0:0	6	s
op	52:42	0:0	6	->
water	52:44	0:0	6	mb_stride
water	52:53	0:0	6	;
water	53:12	0:0	6	s
op	53:13	0:0	6	->
water	53:15	0:0	6	current_picture
op	53:30	0:0	6	.
water	53:31	0:0	6	mb_type
op	53:38	0:0	6	[
water	53:39	0:0	6	mb_pos
op	53:46	0:0	6	+
water	53:48	0:0	6	v
op	53:49	0:0	6	->
water	53:51	0:0	6	mb_off
op	53:57	0:0	6	]
op	53:83	0:0	6	=
water	53:85	0:0	6	MB_TYPE_INTRA
water	53:98	0:0	6	;
water	54:12	0:0	6	s
op	54:13	0:0	6	->
water	54:15	0:0	6	current_picture
op	54:30	0:0	6	.
water	54:31	0:0	6	motion_val
op	54:41	0:0	6	[
water	54:42	0:0	6	1
op	54:43	0:0	6	]
op	54:44	0:0	6	[
water	54:45	0:0	6	s
op	54:46	0:0	6	->
water	54:48	0:0	6	block_index
op	54:59	0:0	6	[
water	54:60	0:0	6	0
op	54:61	0:0	6	]
op	54:63	0:0	6	+
water	54:65	0:0	6	v
op	54:66	0:0	6	->
water	54:68	0:0	6	blocks_off
op	54:78	0:0	6	]
op	54:79	0:0	6	[
water	54:80	0:0	6	0
op	54:81	0:0	6	]
op	54:83	0:0	6	=
water	54:85	0:0	6	0
water	54:86	0:0	6	;
water	55:12	0:0	6	s
op	55:13	0:0	6	->
water	55:15	0:0	6	current_picture
op	55:30	0:0	6	.
water	55:31	0:0	6	motion_val
op	55:41	0:0	6	[
water	55:42	0:0	6	1
op	55:43	0:0	6	]
op	55:44	0:0	6	[
water	55:45	0:0	6	s
op	55:46	0:0	6	->
water	55:48	0:0	6	block_index
op	55:59	0:0	6	[
water	55:60	0:0	6	0
op	55:61	0:0	6	]
op	55:63	0:0	6	+
water	55:65	0:0	6	v
op	55:66	0:0	6	->
water	55:68	0:0	6	blocks_off
op	55:78	0:0	6	]
op	55:79	0:0	6	[
water	55:80	0:0	6	1
op	55:81	0:0	6	]
op	55:83	0:0	6	=
water	55:85	0:0	6	0
water	55:86	0:0	6	;
if	57:12	58:62	6	(v -> fieldtx_is_raw)
cond	57:16	57:19	7	v -> fieldtx_is_raw
water	57:16	0:0	8	v
op	57:17	0:0	8	->
water	57:19	0:0	8	fieldtx_is_raw
stmts	58:16	58:62	7	
water	58:16	0:0	8	v
op	58:17	0:0	8	->
water	58:19	0:0	8	fieldtx_plane
op	58:32	0:0	8	[
water	58:33	0:0	8	mb_pos
op	58:39	0:0	8	]
op	58:41	0:0	8	=
call	58:43	58:61	8	get_bits1
arg	58:53	58:61	9	&v->s.gb
op	58:53	0:0	10	&
water	58:54	0:0	10	v
op	58:55	0:0	10	->
water	58:57	0:0	10	s
op	58:58	0:0	10	.
water	58:59	0:0	10	gb
water	58:62	0:0	8	;
water	59:12	0:0	6	cbp
op	59:16	0:0	6	=
call	59:18	59:82	6	get_vlc2
arg	59:27	59:35	7	&v->s.gb
op	59:27	0:0	8	&
water	59:28	0:0	8	v
op	59:29	0:0	8	->
water	59:31	0:0	8	s
op	59:32	0:0	8	.
water	59:33	0:0	8	gb
arg	59:37	59:60	7	ff_msmp4_mb_i_vlc.table
water	59:37	0:0	8	ff_msmp4_mb_i_vlc
op	59:54	0:0	8	.
water	59:55	0:0	8	table
arg	59:62	59:79	7	MB_INTRA_VLC_BITS
water	59:62	0:0	8	MB_INTRA_VLC_BITS
arg	59:81	59:82	7	2
water	59:81	0:0	8	2
water	59:83	0:0	6	;
if	60:12	61:50	6	(v -> acpred_is_raw)
cond	60:16	60:19	7	v -> acpred_is_raw
water	60:16	0:0	8	v
op	60:17	0:0	8	->
water	60:19	0:0	8	acpred_is_raw
stmts	61:16	61:50	7	
water	61:16	0:0	8	v
op	61:17	0:0	8	->
water	61:19	0:0	8	s
op	61:20	0:0	8	.
water	61:21	0:0	8	ac_pred
op	61:29	0:0	8	=
call	61:31	61:49	8	get_bits1
arg	61:41	61:49	9	&v->s.gb
op	61:41	0:0	10	&
water	61:42	0:0	10	v
op	61:43	0:0	10	->
water	61:45	0:0	10	s
op	61:46	0:0	10	.
water	61:47	0:0	10	gb
water	61:50	0:0	8	;
else	62:12	63:54	6
stmts	63:16	63:54	7	
water	63:16	0:0	8	v
op	63:17	0:0	8	->
water	63:19	0:0	8	s
op	63:20	0:0	8	.
water	63:21	0:0	8	ac_pred
op	63:29	0:0	8	=
water	63:31	0:0	8	v
op	63:32	0:0	8	->
water	63:34	0:0	8	acpred_plane
op	63:46	0:0	8	[
water	63:47	0:0	8	mb_pos
op	63:53	0:0	8	]
water	63:54	0:0	8	;
if	64:12	65:65	6	(v -> condover == CONDOVER_SELECT && v -> overflg_is_raw)
cond	64:16	64:53	7	v -> condover == CONDOVER_SELECT && v -> overflg_is_raw
water	64:16	0:0	8	v
op	64:17	0:0	8	->
water	64:19	0:0	8	condover
op	64:28	0:0	8	==
water	64:31	0:0	8	CONDOVER_SELECT
op	64:47	0:0	8	&&
water	64:50	0:0	8	v
op	64:51	0:0	8	->
water	64:53	0:0	8	overflg_is_raw
stmts	65:16	65:65	7	
water	65:16	0:0	8	v
op	65:17	0:0	8	->
water	65:19	0:0	8	over_flags_plane
op	65:35	0:0	8	[
water	65:36	0:0	8	mb_pos
op	65:42	0:0	8	]
op	65:44	0:0	8	=
call	65:46	65:64	8	get_bits1
arg	65:56	65:64	9	&v->s.gb
op	65:56	0:0	10	&
water	65:57	0:0	10	v
op	65:58	0:0	10	->
water	65:60	0:0	10	s
op	65:61	0:0	10	.
water	65:62	0:0	10	gb
water	65:65	0:0	8	;
call	66:12	66:23	6	GET_MQUANT
water	66:24	0:0	6	;
water	67:12	0:0	6	s
op	67:13	0:0	6	->
water	67:15	0:0	6	current_picture
op	67:30	0:0	6	.
water	67:31	0:0	6	qscale_table
op	67:43	0:0	6	[
water	67:44	0:0	6	mb_pos
op	67:50	0:0	6	]
op	67:52	0:0	6	=
water	67:54	0:0	6	mquant
water	67:60	0:0	6	;
water	69:12	0:0	6	s
op	69:13	0:0	6	->
water	69:15	0:0	6	y_dc_scale
op	69:26	0:0	6	=
water	69:28	0:0	6	s
op	69:29	0:0	6	->
water	69:31	0:0	6	y_dc_scale_table
op	69:47	0:0	6	[
water	69:48	0:0	6	mquant
op	69:54	0:0	6	]
water	69:55	0:0	6	;
water	70:12	0:0	6	s
op	70:13	0:0	6	->
water	70:15	0:0	6	c_dc_scale
op	70:26	0:0	6	=
water	70:28	0:0	6	s
op	70:29	0:0	6	->
water	70:31	0:0	6	c_dc_scale_table
op	70:47	0:0	6	[
water	70:48	0:0	6	mquant
op	70:54	0:0	6	]
water	70:55	0:0	6	;
for	71:12	86:12	6	(k = 0 ;k < 6;k ++)
forinit	71:17	71:22	7	k = 0 ;
water	71:17	0:0	8	k
op	71:19	0:0	8	=
water	71:21	0:0	8	0
water	71:22	0:0	8	;
cond	71:24	71:28	7	k < 6
water	71:24	0:0	8	k
op	71:26	0:0	8	<
water	71:28	0:0	8	6
forexpr	71:31	71:32	7	k ++
water	71:31	0:0	8	k
op	71:32	0:0	8	++
stmts	71:36	86:12	7	
water	71:36	0:0	8	{
water	72:16	0:0	8	val
op	72:20	0:0	8	=
water	72:22	0:0	8	(
water	72:23	0:0	8	(
water	72:24	0:0	8	cbp
op	72:28	0:0	8	>>
water	72:31	0:0	8	(
water	72:32	0:0	8	5
op	72:34	0:0	8	-
water	72:36	0:0	8	k
water	72:37	0:0	8	)
water	72:38	0:0	8	)
op	72:40	0:0	8	&
water	72:42	0:0	8	1
water	72:43	0:0	8	)
water	72:44	0:0	8	;
if	73:16	77:16	8	(k < 4)
cond	73:20	73:24	9	k < 4
water	73:20	0:0	10	k
op	73:22	0:0	10	<
water	73:24	0:0	10	4
stmts	73:27	77:16	9	
water	73:27	0:0	10	{
decl	74:20	74:75	10	int	pred
op	74:31	0:0	10	=
call	74:33	74:74	11	vc1_coded_block_pred
arg	74:54	74:59	12	&v->s
op	74:54	0:0	13	&
water	74:55	0:0	13	v
op	74:56	0:0	13	->
water	74:58	0:0	13	s
arg	74:61	74:62	12	k
water	74:61	0:0	13	k
arg	74:64	74:74	12	&coded_val
op	74:64	0:0	13	&
water	74:65	0:0	13	coded_val
water	75:20	0:0	10	val
op	75:31	0:0	10	=
water	75:33	0:0	10	val
op	75:37	0:0	10	^
water	75:39	0:0	10	pred
water	75:43	0:0	10	;
op	76:20	0:0	10	*
water	76:21	0:0	10	coded_val
op	76:31	0:0	10	=
water	76:33	0:0	10	val
water	76:36	0:0	10	;
water	77:16	0:0	10	}
water	78:16	0:0	8	cbp
op	78:20	0:0	8	|=
water	78:23	0:0	8	val
op	78:27	0:0	8	<<
water	78:30	0:0	8	(
water	78:31	0:0	8	5
op	78:33	0:0	8	-
water	78:35	0:0	8	k
water	78:36	0:0	8	)
water	78:37	0:0	8	;
water	79:16	0:0	8	v
op	79:17	0:0	8	->
water	79:19	0:0	8	a_avail
op	79:27	0:0	8	=
op	79:29	0:0	8	!
water	79:30	0:0	8	s
op	79:31	0:0	8	->
water	79:33	0:0	8	first_slice_line
op	79:50	0:0	8	||
water	79:53	0:0	8	(
water	79:54	0:0	8	k
op	79:56	0:0	8	==
water	79:59	0:0	8	2
op	79:61	0:0	8	||
water	79:64	0:0	8	k
op	79:66	0:0	8	==
water	79:69	0:0	8	3
water	79:70	0:0	8	)
water	79:71	0:0	8	;
water	80:16	0:0	8	v
op	80:17	0:0	8	->
water	80:19	0:0	8	c_avail
op	80:27	0:0	8	=
op	80:29	0:0	8	!
op	80:30	0:0	8	!
water	80:31	0:0	8	s
op	80:32	0:0	8	->
water	80:34	0:0	8	mb_x
op	80:39	0:0	8	||
water	80:42	0:0	8	(
water	80:43	0:0	8	k
op	80:45	0:0	8	==
water	80:48	0:0	8	1
op	80:50	0:0	8	||
water	80:53	0:0	8	k
op	80:55	0:0	8	==
water	80:58	0:0	8	3
water	80:59	0:0	8	)
water	80:60	0:0	8	;
call	81:16	82:85	8	vc1_decode_i_block_adv
arg	81:39	81:40	9	v
water	81:39	0:0	10	v
arg	81:42	81:50	9	block[k]
water	81:42	0:0	10	block
op	81:47	0:0	10	[
water	81:48	0:0	10	k
op	81:49	0:0	10	]
arg	81:52	81:53	9	k
water	81:52	0:0	10	k
arg	81:55	81:58	9	val
water	81:55	0:0	10	val
arg	82:39	82:77	9	(k<4)?v->codingset:v->codingset2
water	82:39	0:0	10	(
water	82:40	0:0	10	k
op	82:42	0:0	10	<
water	82:44	0:0	10	4
water	82:45	0:0	10	)
water	82:47	0:0	10	?
water	82:49	0:0	10	v
op	82:50	0:0	10	->
water	82:52	0:0	10	codingset
water	82:62	0:0	10	:
water	82:64	0:0	10	v
op	82:65	0:0	10	->
water	82:67	0:0	10	codingset2
arg	82:79	82:85	9	mquant
water	82:79	0:0	10	mquant
water	82:86	0:0	8	;
if	83:16	84:28	8	(CONFIG_GRAY && k > 3 && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	83:20	83:81	9	CONFIG_GRAY && k > 3 && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
water	83:20	0:0	10	CONFIG_GRAY
op	83:32	0:0	10	&&
water	83:35	0:0	10	k
op	83:37	0:0	10	>
water	83:39	0:0	10	3
op	83:41	0:0	10	&&
water	83:44	0:0	10	(
water	83:45	0:0	10	s
op	83:46	0:0	10	->
water	83:48	0:0	10	avctx
op	83:53	0:0	10	->
water	83:55	0:0	10	flags
op	83:61	0:0	10	&
water	83:63	0:0	10	AV_CODEC_FLAG_GRAY
water	83:81	0:0	10	)
stmts	84:20	84:28	9	
continue	84:20	84:28	10	
call	85:16	85:52	8	v->vc1dsp.vc1_inv_trans_8x8
arg	85:44	85:52	9	block[k]
water	85:44	0:0	10	block
op	85:49	0:0	10	[
water	85:50	0:0	10	k
op	85:51	0:0	10	]
water	85:53	0:0	8	;
water	86:12	0:0	8	}
call	87:12	87:47	6	ff_vc1_smooth_overlap_filter_iblk
arg	87:46	87:47	7	v
water	87:46	0:0	8	v
water	87:48	0:0	6	;
call	88:12	88:43	6	vc1_put_signed_blocks_clamped
arg	88:42	88:43	7	v
water	88:42	0:0	8	v
water	88:44	0:0	6	;
if	89:12	90:57	6	(v -> s . loop_filter)
cond	89:16	89:21	7	v -> s . loop_filter
water	89:16	0:0	8	v
op	89:17	0:0	8	->
water	89:19	0:0	8	s
op	89:20	0:0	8	.
water	89:21	0:0	8	loop_filter
stmts	90:16	90:57	7	
call	90:16	90:56	8	ff_vc1_loop_filter_iblk_delayed
arg	90:48	90:49	9	v
water	90:48	0:0	10	v
arg	90:51	90:56	9	v->pq
water	90:51	0:0	10	v
op	90:52	0:0	10	->
water	90:54	0:0	10	pq
water	90:57	0:0	8	;
if	91:12	97:12	6	(get_bits_count (& s -> gb ) > v -> bits)
cond	91:16	91:44	7	get_bits_count (& s -> gb ) > v -> bits
call	91:16	91:37	8	get_bits_count
arg	91:31	91:37	9	&s->gb
op	91:31	0:0	10	&
water	91:32	0:0	10	s
op	91:33	0:0	10	->
water	91:35	0:0	10	gb
op	91:39	0:0	8	>
water	91:41	0:0	8	v
op	91:42	0:0	8	->
water	91:44	0:0	8	bits
stmts	91:50	97:12	7	
water	91:50	0:0	8	{
call	93:16	93:87	8	ff_er_add_slice
arg	93:32	93:38	9	&s->er
op	93:32	0:0	10	&
water	93:33	0:0	10	s
op	93:34	0:0	10	->
water	93:36	0:0	10	er
arg	93:40	93:41	9	0
water	93:40	0:0	10	0
arg	93:43	93:56	9	s->start_mb_y
water	93:43	0:0	10	s
op	93:44	0:0	10	->
water	93:46	0:0	10	start_mb_y
arg	93:58	93:65	9	s->mb_x
water	93:58	0:0	10	s
op	93:59	0:0	10	->
water	93:61	0:0	10	mb_x
arg	93:67	93:74	9	s->mb_y
water	93:67	0:0	10	s
op	93:68	0:0	10	->
water	93:70	0:0	10	mb_y
arg	93:76	93:87	9	ER_MB_ERROR
water	93:76	0:0	10	ER_MB_ERROR
water	93:88	0:0	8	;
call	94:16	95:54	8	av_log
arg	94:23	94:31	9	s->avctx
water	94:23	0:0	10	s
op	94:24	0:0	10	->
water	94:26	0:0	10	avctx
arg	94:33	94:45	9	AV_LOG_ERROR
water	94:33	0:0	10	AV_LOG_ERROR
arg	94:47	94:80	9	"Bits overconsumption: %i > %i\n"
water	94:47	0:0	10	"Bits overconsumption: %i > %i\n"
arg	95:23	95:45	9	get_bits_count(&s->gb)
call	95:23	95:44	10	get_bits_count
arg	95:38	95:44	11	&s->gb
op	95:38	0:0	12	&
water	95:39	0:0	12	s
op	95:40	0:0	12	->
water	95:42	0:0	12	gb
arg	95:47	95:54	9	v->bits
water	95:47	0:0	10	v
op	95:48	0:0	10	->
water	95:50	0:0	10	bits
water	95:55	0:0	8	;
return	96:16	96:22	8	
water	97:12	0:0	8	}
water	98:8	0:0	6	}
if	99:8	100:56	4	(! v -> s . loop_filter)
cond	99:12	99:18	5	! v -> s . loop_filter
op	99:12	0:0	6	!
water	99:13	0:0	6	v
op	99:14	0:0	6	->
water	99:16	0:0	6	s
op	99:17	0:0	6	.
water	99:18	0:0	6	loop_filter
stmts	100:12	100:56	5	
call	100:12	100:55	6	ff_mpeg_draw_horiz_band
arg	100:36	100:37	7	s
water	100:36	0:0	8	s
arg	100:39	100:51	7	s->mb_y*16
water	100:39	0:0	8	s
op	100:40	0:0	8	->
water	100:42	0:0	8	mb_y
op	100:47	0:0	8	*
water	100:49	0:0	8	16
arg	100:53	100:55	7	16
water	100:53	0:0	8	16
water	100:56	0:0	6	;
else	101:8	102:60	4
stmts	101:13	102:60	5	
if	101:13	102:60	6	(s -> mb_y)
cond	101:17	101:20	7	s -> mb_y
water	101:17	0:0	8	s
op	101:18	0:0	8	->
water	101:20	0:0	8	mb_y
stmts	102:12	102:60	7	
call	102:12	102:59	8	ff_mpeg_draw_horiz_band
arg	102:36	102:37	9	s
water	102:36	0:0	10	s
arg	102:39	102:55	9	(s->mb_y-1)*16
water	102:39	0:0	10	(
water	102:40	0:0	10	s
op	102:41	0:0	10	->
water	102:43	0:0	10	mb_y
op	102:47	0:0	10	-
water	102:48	0:0	10	1
water	102:49	0:0	10	)
op	102:51	0:0	10	*
water	102:53	0:0	10	16
arg	102:57	102:59	9	16
water	102:57	0:0	10	16
water	102:60	0:0	8	;
water	103:8	0:0	4	s
op	103:9	0:0	4	->
water	103:11	0:0	4	first_slice_line
op	103:28	0:0	4	=
water	103:30	0:0	4	0
water	103:31	0:0	4	;
water	104:4	0:0	4	}
water	106:4	0:0	2	s
op	106:5	0:0	2	->
water	106:7	0:0	2	mb_x
op	106:12	0:0	2	=
water	106:14	0:0	2	0
water	106:15	0:0	2	;
call	107:4	107:22	2	init_block_index
arg	107:21	107:22	3	v
water	107:21	0:0	4	v
water	107:23	0:0	2	;
for	108:4	113:4	2	(;s -> mb_x < s -> mb_width;s -> mb_x ++)
forinit	108:9	108:9	3	;
water	108:9	0:0	4	;
cond	108:11	108:24	3	s -> mb_x < s -> mb_width
water	108:11	0:0	4	s
op	108:12	0:0	4	->
water	108:14	0:0	4	mb_x
op	108:19	0:0	4	<
water	108:21	0:0	4	s
op	108:22	0:0	4	->
water	108:24	0:0	4	mb_width
forexpr	108:34	108:41	3	s -> mb_x ++
water	108:34	0:0	4	s
op	108:35	0:0	4	->
water	108:37	0:0	4	mb_x
op	108:41	0:0	4	++
stmts	108:45	113:4	3	
water	108:45	0:0	4	{
call	109:8	109:31	4	ff_update_block_index
arg	109:30	109:31	5	s
water	109:30	0:0	6	s
water	109:32	0:0	4	;
call	110:8	110:39	4	vc1_put_signed_blocks_clamped
arg	110:38	110:39	5	v
water	110:38	0:0	6	v
water	110:40	0:0	4	;
if	111:8	112:53	4	(v -> s . loop_filter)
cond	111:12	111:17	5	v -> s . loop_filter
water	111:12	0:0	6	v
op	111:13	0:0	6	->
water	111:15	0:0	6	s
op	111:16	0:0	6	.
water	111:17	0:0	6	loop_filter
stmts	112:12	112:53	5	
call	112:12	112:52	6	ff_vc1_loop_filter_iblk_delayed
arg	112:44	112:45	7	v
water	112:44	0:0	8	v
arg	112:47	112:52	7	v->pq
water	112:47	0:0	8	v
op	112:48	0:0	8	->
water	112:50	0:0	8	pq
water	112:53	0:0	6	;
water	113:4	0:0	4	}
if	114:4	115:62	2	(v -> s . loop_filter)
cond	114:8	114:13	3	v -> s . loop_filter
water	114:8	0:0	4	v
op	114:9	0:0	4	->
water	114:11	0:0	4	s
op	114:12	0:0	4	.
water	114:13	0:0	4	loop_filter
stmts	115:8	115:62	3	
call	115:8	115:61	4	ff_mpeg_draw_horiz_band
arg	115:32	115:33	5	s
water	115:32	0:0	6	s
arg	115:35	115:57	5	(s->end_mb_y-1)*16
water	115:35	0:0	6	(
water	115:36	0:0	6	s
op	115:37	0:0	6	->
water	115:39	0:0	6	end_mb_y
op	115:48	0:0	6	-
water	115:50	0:0	6	1
water	115:51	0:0	6	)
op	115:53	0:0	6	*
water	115:55	0:0	6	16
arg	115:59	115:61	5	16
water	115:59	0:0	6	16
water	115:62	0:0	4	;
call	116:4	117:65	2	ff_er_add_slice
arg	116:20	116:26	3	&s->er
op	116:20	0:0	4	&
water	116:21	0:0	4	s
op	116:22	0:0	4	->
water	116:24	0:0	4	er
arg	116:28	116:29	3	0
water	116:28	0:0	4	0
arg	116:31	116:61	3	s->start_mb_y<<v->field_mode
water	116:31	0:0	4	s
op	116:32	0:0	4	->
water	116:34	0:0	4	start_mb_y
op	116:45	0:0	4	<<
water	116:48	0:0	4	v
op	116:49	0:0	4	->
water	116:51	0:0	4	field_mode
arg	116:63	116:78	3	s->mb_width-1
water	116:63	0:0	4	s
op	116:64	0:0	4	->
water	116:66	0:0	4	mb_width
op	116:75	0:0	4	-
water	116:77	0:0	4	1
arg	117:20	117:54	3	(s->end_mb_y<<v->field_mode)-1
water	117:20	0:0	4	(
water	117:21	0:0	4	s
op	117:22	0:0	4	->
water	117:24	0:0	4	end_mb_y
op	117:33	0:0	4	<<
water	117:36	0:0	4	v
op	117:37	0:0	4	->
water	117:39	0:0	4	field_mode
water	117:49	0:0	4	)
op	117:51	0:0	4	-
water	117:53	0:0	4	1
arg	117:56	117:65	3	ER_MB_END
water	117:56	0:0	4	ER_MB_END
water	117:66	0:0	2	;
