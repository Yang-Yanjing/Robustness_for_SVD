func	1:0	168:0	0	static int	plot_spectrum_column
params	1:31	0:0	1	
param	1:32	1:52	2	AVFilterLink *	inlink
param	1:54	1:72	2	AVFrame *	insamples
stmnts	0:0	167:19	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:38	2	AVFilterContext	*ctx
op	4:25	0:0	2	=
water	4:27	0:0	2	inlink
op	4:33	0:0	2	->
water	4:35	0:0	2	dst
decl	5:4	5:43	2	AVFilterLink	*outlink
op	5:26	0:0	2	=
water	5:28	0:0	2	ctx
op	5:31	0:0	2	->
water	5:33	0:0	2	outputs
op	5:40	0:0	2	[
water	5:41	0:0	2	0
op	5:42	0:0	2	]
decl	6:4	6:38	2	ShowSpectrumContext	*s
op	6:27	0:0	2	=
water	6:29	0:0	2	ctx
op	6:32	0:0	2	->
water	6:34	0:0	2	priv
decl	7:4	7:37	2	AVFrame	*outpicref
op	7:23	0:0	2	=
water	7:25	0:0	2	s
op	7:26	0:0	2	->
water	7:28	0:0	2	outpicref
decl	10:4	10:47	2	const int	nb_freq
op	10:22	0:0	2	=
water	10:24	0:0	2	1
op	10:26	0:0	2	<<
water	10:29	0:0	2	(
water	10:30	0:0	2	s
op	10:31	0:0	2	->
water	10:33	0:0	2	rdft_bits
op	10:43	0:0	2	-
water	10:45	0:0	2	1
water	10:46	0:0	2	)
decl	11:4	11:37	2	const int	win_size
op	11:23	0:0	2	=
water	11:25	0:0	2	nb_freq
op	11:33	0:0	2	<<
water	11:36	0:0	2	1
decl	12:4	12:50	2	const double	w
op	12:19	0:0	2	=
water	12:21	0:0	2	1
op	12:22	0:0	2	.
op	12:24	0:0	2	/
water	12:26	0:0	2	(
call	12:27	12:39	3	sqrt
arg	12:32	12:39	4	nb_freq
water	12:32	0:0	5	nb_freq
op	12:41	0:0	2	*
water	12:43	0:0	2	32768
op	12:48	0:0	2	.
water	12:49	0:0	2	)
decl	13:4	13:29	2	int	h
op	13:10	0:0	2	=
water	13:12	0:0	2	s
op	13:13	0:0	2	->
water	13:15	0:0	2	channel_height
decl	14:4	14:23	2	int	ch
water	14:10	0:0	2	,
decl	14:4	14:23	2	int	plane
water	14:17	0:0	2	,
decl	14:4	14:23	2	int	n
water	14:20	0:0	2	,
decl	14:4	14:23	2	int	y
call	15:4	15:48	2	av_assert0
arg	15:15	15:48	3	insamples->nb_samples==win_size
water	15:15	0:0	4	insamples
op	15:24	0:0	4	->
water	15:26	0:0	4	nb_samples
op	15:37	0:0	4	==
water	15:40	0:0	4	win_size
water	15:49	0:0	2	;
for	17:4	21:4	2	(ch = 0 ;ch < s -> nb_display_channels;ch ++)
forinit	17:9	17:15	3	ch = 0 ;
water	17:9	0:0	4	ch
op	17:12	0:0	4	=
water	17:14	0:0	4	0
water	17:15	0:0	4	;
cond	17:17	17:25	3	ch < s -> nb_display_channels
water	17:17	0:0	4	ch
op	17:20	0:0	4	<
water	17:22	0:0	4	s
op	17:23	0:0	4	->
water	17:25	0:0	4	nb_display_channels
forexpr	17:46	17:48	3	ch ++
water	17:46	0:0	4	ch
op	17:48	0:0	4	++
stmts	17:52	21:4	3	
water	17:52	0:0	4	{
decl	18:8	18:66	4	const int16_t	*p
op	18:25	0:0	4	=
water	18:27	0:0	4	(
water	18:28	0:0	4	int16_t
op	18:36	0:0	4	*
water	18:37	0:0	4	)
water	18:38	0:0	4	insamples
op	18:47	0:0	4	->
water	18:49	0:0	4	extended_data
op	18:62	0:0	4	[
water	18:63	0:0	4	ch
op	18:65	0:0	4	]
for	19:8	20:62	4	(n = 0 ;n < win_size;n ++)
forinit	19:13	19:18	5	n = 0 ;
water	19:13	0:0	6	n
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:24	5	n < win_size
water	19:20	0:0	6	n
op	19:22	0:0	6	<
water	19:24	0:0	6	win_size
forexpr	19:34	19:35	5	n ++
water	19:34	0:0	6	n
op	19:35	0:0	6	++
stmts	20:12	20:62	5	
water	20:12	0:0	6	s
op	20:13	0:0	6	->
water	20:15	0:0	6	rdft_data
op	20:24	0:0	6	[
water	20:25	0:0	6	ch
op	20:27	0:0	6	]
op	20:28	0:0	6	[
water	20:29	0:0	6	n
op	20:30	0:0	6	]
op	20:32	0:0	6	=
water	20:34	0:0	6	p
op	20:35	0:0	6	[
water	20:36	0:0	6	n
op	20:37	0:0	6	]
op	20:39	0:0	6	*
water	20:41	0:0	6	s
op	20:42	0:0	6	->
water	20:44	0:0	6	window_func_lut
op	20:59	0:0	6	[
water	20:60	0:0	6	n
op	20:61	0:0	6	]
water	20:62	0:0	6	;
water	21:4	0:0	4	}
for	23:4	24:47	2	(ch = 0 ;ch < s -> nb_display_channels;ch ++)
forinit	23:9	23:15	3	ch = 0 ;
water	23:9	0:0	4	ch
op	23:12	0:0	4	=
water	23:14	0:0	4	0
water	23:15	0:0	4	;
cond	23:17	23:25	3	ch < s -> nb_display_channels
water	23:17	0:0	4	ch
op	23:20	0:0	4	<
water	23:22	0:0	4	s
op	23:23	0:0	4	->
water	23:25	0:0	4	nb_display_channels
forexpr	23:46	23:48	3	ch ++
water	23:46	0:0	4	ch
op	23:48	0:0	4	++
stmts	24:8	24:47	3	
call	24:8	24:46	4	av_rdft_calc
arg	24:21	24:28	5	s->rdft
water	24:21	0:0	6	s
op	24:22	0:0	6	->
water	24:24	0:0	6	rdft
arg	24:30	24:46	5	s->rdft_data[ch]
water	24:30	0:0	6	s
op	24:31	0:0	6	->
water	24:33	0:0	6	rdft_data
op	24:42	0:0	6	[
water	24:43	0:0	6	ch
op	24:45	0:0	6	]
water	24:47	0:0	4	;
for	30:4	34:4	2	(y = 0 ;y < outlink -> h;y ++)
forinit	30:9	30:14	3	y = 0 ;
water	30:9	0:0	4	y
op	30:11	0:0	4	=
water	30:13	0:0	4	0
water	30:14	0:0	4	;
cond	30:16	30:29	3	y < outlink -> h
water	30:16	0:0	4	y
op	30:18	0:0	4	<
water	30:20	0:0	4	outlink
op	30:27	0:0	4	->
water	30:29	0:0	4	h
forexpr	30:32	30:33	3	y ++
water	30:32	0:0	4	y
op	30:33	0:0	4	++
stmts	30:37	34:4	3	
water	30:37	0:0	4	{
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	combine_buffer
op	31:25	0:0	4	[
water	31:26	0:0	4	3
op	31:28	0:0	4	*
water	31:30	0:0	4	y
op	31:35	0:0	4	]
op	31:37	0:0	4	=
water	31:39	0:0	4	0
water	31:40	0:0	4	;
water	32:8	0:0	4	s
op	32:9	0:0	4	->
water	32:11	0:0	4	combine_buffer
op	32:25	0:0	4	[
water	32:26	0:0	4	3
op	32:28	0:0	4	*
water	32:30	0:0	4	y
op	32:32	0:0	4	+
water	32:34	0:0	4	1
op	32:35	0:0	4	]
op	32:37	0:0	4	=
water	32:39	0:0	4	127
op	32:42	0:0	4	.
water	32:43	0:0	4	5
water	32:44	0:0	4	;
water	33:8	0:0	4	s
op	33:9	0:0	4	->
water	33:11	0:0	4	combine_buffer
op	33:25	0:0	4	[
water	33:26	0:0	4	3
op	33:28	0:0	4	*
water	33:30	0:0	4	y
op	33:32	0:0	4	+
water	33:34	0:0	4	2
op	33:35	0:0	4	]
op	33:37	0:0	4	=
water	33:39	0:0	4	127
op	33:42	0:0	4	.
water	33:43	0:0	4	5
water	33:44	0:0	4	;
water	34:4	0:0	4	}
for	35:4	135:4	2	(ch = 0 ;ch < s -> nb_display_channels;ch ++)
forinit	35:9	35:15	3	ch = 0 ;
water	35:9	0:0	4	ch
op	35:12	0:0	4	=
water	35:14	0:0	4	0
water	35:15	0:0	4	;
cond	35:17	35:25	3	ch < s -> nb_display_channels
water	35:17	0:0	4	ch
op	35:20	0:0	4	<
water	35:22	0:0	4	s
op	35:23	0:0	4	->
water	35:25	0:0	4	nb_display_channels
forexpr	35:46	35:48	3	ch ++
water	35:46	0:0	4	ch
op	35:48	0:0	4	++
stmts	35:52	135:4	3	
water	35:52	0:0	4	{
decl	36:8	36:24	4	float	yf
water	36:16	0:0	4	,
decl	36:8	36:24	4	float	uf
water	36:20	0:0	4	,
decl	36:8	36:24	4	float	vf
switch	38:8	65:8	4	(s -> mode)
cond	38:16	38:19	5	s -> mode
water	38:16	0:0	6	s
op	38:17	0:0	6	->
water	38:19	0:0	6	mode
stmts	38:25	65:8	5	
water	38:25	0:0	6	{
label	39:8	39:21	6	case COMBINED :
water	41:12	0:0	6	yf
op	41:15	0:0	6	=
water	41:17	0:0	6	256
op	41:20	0:0	6	.
water	41:21	0:0	6	0
water	41:22	0:0	6	f
op	41:24	0:0	6	/
water	41:26	0:0	6	s
op	41:27	0:0	6	->
water	41:29	0:0	6	nb_display_channels
water	41:48	0:0	6	;
switch	42:12	55:12	6	(s -> color_mode)
cond	42:20	42:23	7	s -> color_mode
water	42:20	0:0	8	s
op	42:21	0:0	8	->
water	42:23	0:0	8	color_mode
stmts	42:35	55:12	7	
water	42:35	0:0	8	{
label	43:12	43:26	8	case INTENSITY :
water	44:16	0:0	8	uf
op	44:19	0:0	8	=
water	44:21	0:0	8	yf
water	44:23	0:0	8	;
water	45:16	0:0	8	vf
op	45:19	0:0	8	=
water	45:21	0:0	8	yf
water	45:23	0:0	8	;
break	46:16	46:21	8	
label	47:12	47:24	8	case CHANNEL :
water	50:16	0:0	8	uf
op	50:19	0:0	8	=
water	50:21	0:0	8	yf
op	50:24	0:0	8	*
water	50:26	0:0	8	M_PI
water	50:30	0:0	8	;
water	51:16	0:0	8	vf
op	51:19	0:0	8	=
water	51:21	0:0	8	yf
op	51:24	0:0	8	*
water	51:26	0:0	8	M_PI
water	51:30	0:0	8	;
break	52:16	52:21	8	
label	53:12	53:19	8	default :
call	54:16	54:28	8	av_assert0
arg	54:27	54:28	9	0
water	54:27	0:0	10	0
water	54:29	0:0	8	;
water	55:12	0:0	8	}
break	56:12	56:17	6	
label	57:8	57:21	6	case SEPARATE :
water	59:12	0:0	6	yf
op	59:15	0:0	6	=
water	59:17	0:0	6	256
op	59:20	0:0	6	.
water	59:21	0:0	6	0
water	59:22	0:0	6	f
water	59:23	0:0	6	;
water	60:12	0:0	6	uf
op	60:15	0:0	6	=
water	60:17	0:0	6	256
op	60:20	0:0	6	.
water	60:21	0:0	6	0
water	60:22	0:0	6	f
water	60:23	0:0	6	;
water	61:12	0:0	6	vf
op	61:15	0:0	6	=
water	61:17	0:0	6	256
op	61:20	0:0	6	.
water	61:21	0:0	6	0
water	61:22	0:0	6	f
water	61:23	0:0	6	;
break	62:12	62:17	6	
label	63:8	63:15	6	default :
call	64:12	64:24	6	av_assert0
arg	64:23	64:24	7	0
water	64:23	0:0	8	0
water	64:25	0:0	6	;
water	65:8	0:0	6	}
if	66:8	74:8	4	(s -> color_mode == CHANNEL)
cond	66:12	66:29	5	s -> color_mode == CHANNEL
water	66:12	0:0	6	s
op	66:13	0:0	6	->
water	66:15	0:0	6	color_mode
op	66:26	0:0	6	==
water	66:29	0:0	6	CHANNEL
stmts	66:38	74:8	5	
water	66:38	0:0	6	{
if	67:12	70:12	6	(s -> nb_display_channels > 1)
cond	67:16	67:41	7	s -> nb_display_channels > 1
water	67:16	0:0	8	s
op	67:17	0:0	8	->
water	67:19	0:0	8	nb_display_channels
op	67:39	0:0	8	>
water	67:41	0:0	8	1
stmts	67:44	70:12	7	
water	67:44	0:0	8	{
water	68:16	0:0	8	uf
op	68:19	0:0	8	*=
water	68:22	0:0	8	0
op	68:23	0:0	8	.
water	68:24	0:0	8	5
call	68:26	68:72	8	*sin
arg	68:32	68:72	9	(2*M_PI*ch)/s->nb_display_channels
water	68:32	0:0	10	(
water	68:33	0:0	10	2
op	68:35	0:0	10	*
water	68:37	0:0	10	M_PI
op	68:42	0:0	10	*
water	68:44	0:0	10	ch
water	68:46	0:0	10	)
op	68:48	0:0	10	/
water	68:50	0:0	10	s
op	68:51	0:0	10	->
water	68:53	0:0	10	nb_display_channels
water	68:73	0:0	8	;
water	69:16	0:0	8	vf
op	69:19	0:0	8	*=
water	69:22	0:0	8	0
op	69:23	0:0	8	.
water	69:24	0:0	8	5
call	69:26	69:72	8	*cos
arg	69:32	69:72	9	(2*M_PI*ch)/s->nb_display_channels
water	69:32	0:0	10	(
water	69:33	0:0	10	2
op	69:35	0:0	10	*
water	69:37	0:0	10	M_PI
op	69:42	0:0	10	*
water	69:44	0:0	10	ch
water	69:46	0:0	10	)
op	69:48	0:0	10	/
water	69:50	0:0	10	s
op	69:51	0:0	10	->
water	69:53	0:0	10	nb_display_channels
water	69:73	0:0	8	;
water	70:12	0:0	8	}
else	70:14	73:12	6
stmts	70:19	73:12	7	
water	70:19	0:0	8	{
water	71:16	0:0	8	uf
op	71:19	0:0	8	=
water	71:21	0:0	8	0
op	71:22	0:0	8	.
water	71:23	0:0	8	0
water	71:24	0:0	8	f
water	71:25	0:0	8	;
water	72:16	0:0	8	vf
op	72:19	0:0	8	=
water	72:21	0:0	8	0
op	72:22	0:0	8	.
water	72:23	0:0	8	0
water	72:24	0:0	8	f
water	72:25	0:0	8	;
water	73:12	0:0	8	}
water	74:8	0:0	6	}
water	75:8	0:0	4	uf
op	75:11	0:0	4	*=
water	75:14	0:0	4	s
op	75:15	0:0	4	->
water	75:17	0:0	4	saturation
water	75:27	0:0	4	;
water	76:8	0:0	4	vf
op	76:11	0:0	4	*=
water	76:14	0:0	4	s
op	76:15	0:0	4	->
water	76:17	0:0	4	saturation
water	76:27	0:0	4	;
for	78:8	134:8	4	(y = 0 ;y < h;y ++)
forinit	78:13	78:18	5	y = 0 ;
water	78:13	0:0	6	y
op	78:15	0:0	6	=
water	78:17	0:0	6	0
water	78:18	0:0	6	;
cond	78:20	78:24	5	y < h
water	78:20	0:0	6	y
op	78:22	0:0	6	<
water	78:24	0:0	6	h
forexpr	78:27	78:28	5	y ++
water	78:27	0:0	6	y
op	78:28	0:0	6	++
stmts	78:32	134:8	5	
water	78:32	0:0	6	{
decl	79:12	79:60	6	int	row
op	79:20	0:0	6	=
water	79:22	0:0	6	(
water	79:23	0:0	6	s
op	79:24	0:0	6	->
water	79:26	0:0	6	mode
op	79:31	0:0	6	==
water	79:34	0:0	6	COMBINED
water	79:42	0:0	6	)
water	79:44	0:0	6	?
water	79:46	0:0	6	y
water	79:48	0:0	6	:
water	79:50	0:0	6	ch
op	79:53	0:0	6	*
water	79:55	0:0	6	h
op	79:57	0:0	6	+
water	79:59	0:0	6	y
decl	80:12	80:52	6	float	*out
op	80:23	0:0	6	=
op	80:25	0:0	6	&
water	80:26	0:0	6	s
op	80:27	0:0	6	->
water	80:29	0:0	6	combine_buffer
op	80:43	0:0	6	[
water	80:44	0:0	6	3
op	80:46	0:0	6	*
water	80:48	0:0	6	row
op	80:51	0:0	6	]
decl	82:12	82:42	6	float	a
op	82:20	0:0	6	=
water	82:22	0:0	6	w
call	82:24	82:41	7	*MAGNITUDE
arg	82:36	82:37	8	y
water	82:36	0:0	9	y
arg	82:39	82:41	8	ch
water	82:39	0:0	9	ch
switch	84:12	98:12	6	(s -> scale)
cond	84:20	84:23	7	s -> scale
water	84:20	0:0	8	s
op	84:21	0:0	8	->
water	84:23	0:0	8	scale
stmts	84:30	98:12	7	
water	84:30	0:0	8	{
label	85:12	85:23	8	case LINEAR :
break	86:16	86:21	8	
label	87:12	87:21	8	case SQRT :
water	88:16	0:0	8	a
op	88:18	0:0	8	=
call	88:20	88:26	8	sqrt
arg	88:25	88:26	9	a
water	88:25	0:0	10	a
water	88:27	0:0	8	;
break	89:16	89:21	8	
label	90:12	90:21	8	case CBRT :
water	91:16	0:0	8	a
op	91:18	0:0	8	=
call	91:20	91:26	8	cbrt
arg	91:25	91:26	9	a
water	91:25	0:0	10	a
water	91:27	0:0	8	;
break	92:16	92:21	8	
label	93:12	93:20	8	case LOG :
water	94:16	0:0	8	a
op	94:18	0:0	8	=
water	94:20	0:0	8	1
op	94:22	0:0	8	-
call	94:24	94:52	8	log
arg	94:28	94:52	9	FFMAX(FFMIN(1,a),1e-6)
call	94:28	94:51	10	FFMAX
arg	94:34	94:45	11	FFMIN(1,a)
call	94:34	94:44	12	FFMIN
arg	94:40	94:41	13	1
water	94:40	0:0	14	1
arg	94:43	94:44	13	a
water	94:43	0:0	14	a
arg	94:47	94:51	11	1e-6
water	94:47	0:0	12	1
water	94:48	0:0	12	e
op	94:49	0:0	12	-
water	94:50	0:0	12	6
op	94:54	0:0	8	/
call	94:56	94:64	8	log
arg	94:60	94:64	9	1e-6
water	94:60	0:0	10	1
water	94:61	0:0	10	e
op	94:62	0:0	10	-
water	94:63	0:0	10	6
water	94:65	0:0	8	;
break	95:16	95:21	8	
label	96:12	96:19	8	default :
call	97:16	97:28	8	av_assert0
arg	97:27	97:28	9	0
water	97:27	0:0	10	0
water	97:29	0:0	8	;
water	98:12	0:0	8	}
if	99:12	129:12	6	(s -> color_mode == INTENSITY)
cond	99:16	99:33	7	s -> color_mode == INTENSITY
water	99:16	0:0	8	s
op	99:17	0:0	8	->
water	99:19	0:0	8	color_mode
op	99:30	0:0	8	==
water	99:33	0:0	8	INTENSITY
stmts	99:44	129:12	7	
water	99:44	0:0	8	{
decl	100:16	100:29	8	float	y
water	100:23	0:0	8	,
decl	100:16	100:29	8	float	u
water	100:26	0:0	8	,
decl	100:16	100:29	8	float	v
decl	101:16	101:21	8	int	i
for	102:16	104:29	8	(i = 1 ;i < sizeof ( intensity_color_table ) / sizeof ( * intensity_color_table ) - 1;i ++)
forinit	102:21	102:26	9	i = 1 ;
water	102:21	0:0	10	i
op	102:23	0:0	10	=
water	102:25	0:0	10	1
water	102:26	0:0	10	;
cond	102:28	102:97	9	i < sizeof ( intensity_color_table ) / sizeof ( * intensity_color_table ) - 1
water	102:28	0:0	10	i
op	102:30	0:0	10	<
op	102:32	0:0	10	sizeof
water	102:38	0:0	10	(
water	102:39	0:0	10	intensity_color_table
water	102:60	0:0	10	)
op	102:62	0:0	10	/
op	102:64	0:0	10	sizeof
water	102:70	0:0	10	(
op	102:71	0:0	10	*
water	102:72	0:0	10	intensity_color_table
water	102:93	0:0	10	)
op	102:95	0:0	10	-
water	102:97	0:0	10	1
forexpr	102:100	102:101	9	i ++
water	102:100	0:0	10	i
op	102:101	0:0	10	++
stmts	103:20	104:29	9	
if	103:20	104:29	10	(intensity_color_table [ i ] . a >= a)
cond	103:24	103:54	11	intensity_color_table [ i ] . a >= a
water	103:24	0:0	12	intensity_color_table
op	103:45	0:0	12	[
water	103:46	0:0	12	i
op	103:47	0:0	12	]
op	103:48	0:0	12	.
water	103:49	0:0	12	a
op	103:51	0:0	12	>=
water	103:54	0:0	12	a
stmts	104:24	104:29	11	
break	104:24	104:29	12	
if	107:16	111:16	8	(a <= intensity_color_table [ i - 1 ] . a)
cond	107:20	107:54	9	a <= intensity_color_table [ i - 1 ] . a
water	107:20	0:0	10	a
op	107:22	0:0	10	<=
water	107:25	0:0	10	intensity_color_table
op	107:46	0:0	10	[
water	107:47	0:0	10	i
op	107:49	0:0	10	-
water	107:51	0:0	10	1
op	107:52	0:0	10	]
op	107:53	0:0	10	.
water	107:54	0:0	10	a
stmts	107:57	111:16	9	
water	107:57	0:0	10	{
water	108:20	0:0	10	y
op	108:22	0:0	10	=
water	108:24	0:0	10	intensity_color_table
op	108:45	0:0	10	[
water	108:46	0:0	10	i
op	108:48	0:0	10	-
water	108:50	0:0	10	1
op	108:51	0:0	10	]
op	108:52	0:0	10	.
water	108:53	0:0	10	y
water	108:54	0:0	10	;
water	109:20	0:0	10	u
op	109:22	0:0	10	=
water	109:24	0:0	10	intensity_color_table
op	109:45	0:0	10	[
water	109:46	0:0	10	i
op	109:48	0:0	10	-
water	109:50	0:0	10	1
op	109:51	0:0	10	]
op	109:52	0:0	10	.
water	109:53	0:0	10	u
water	109:54	0:0	10	;
water	110:20	0:0	10	v
op	110:22	0:0	10	=
water	110:24	0:0	10	intensity_color_table
op	110:45	0:0	10	[
water	110:46	0:0	10	i
op	110:48	0:0	10	-
water	110:50	0:0	10	1
op	110:51	0:0	10	]
op	110:52	0:0	10	.
water	110:53	0:0	10	v
water	110:54	0:0	10	;
water	111:16	0:0	10	}
else	111:18	115:16	8
stmts	111:23	115:16	9	
if	111:23	115:16	10	(a >= intensity_color_table [ i ] . a)
cond	111:27	111:57	11	a >= intensity_color_table [ i ] . a
water	111:27	0:0	12	a
op	111:29	0:0	12	>=
water	111:32	0:0	12	intensity_color_table
op	111:53	0:0	12	[
water	111:54	0:0	12	i
op	111:55	0:0	12	]
op	111:56	0:0	12	.
water	111:57	0:0	12	a
stmts	111:60	115:16	11	
water	111:60	0:0	12	{
water	112:20	0:0	12	y
op	112:22	0:0	12	=
water	112:24	0:0	12	intensity_color_table
op	112:45	0:0	12	[
water	112:46	0:0	12	i
op	112:47	0:0	12	]
op	112:48	0:0	12	.
water	112:49	0:0	12	y
water	112:50	0:0	12	;
water	113:20	0:0	12	u
op	113:22	0:0	12	=
water	113:24	0:0	12	intensity_color_table
op	113:45	0:0	12	[
water	113:46	0:0	12	i
op	113:47	0:0	12	]
op	113:48	0:0	12	.
water	113:49	0:0	12	u
water	113:50	0:0	12	;
water	114:20	0:0	12	v
op	114:22	0:0	12	=
water	114:24	0:0	12	intensity_color_table
op	114:45	0:0	12	[
water	114:46	0:0	12	i
op	114:47	0:0	12	]
op	114:48	0:0	12	.
water	114:49	0:0	12	v
water	114:50	0:0	12	;
water	115:16	0:0	12	}
else	115:18	125:16	8
stmts	115:23	125:16	9	
water	115:23	0:0	10	{
decl	116:20	116:64	10	float	start
op	116:32	0:0	10	=
water	116:34	0:0	10	intensity_color_table
op	116:55	0:0	10	[
water	116:56	0:0	10	i
op	116:58	0:0	10	-
water	116:60	0:0	10	1
op	116:61	0:0	10	]
op	116:62	0:0	10	.
water	116:63	0:0	10	a
decl	117:20	117:58	10	float	end
op	117:30	0:0	10	=
water	117:32	0:0	10	intensity_color_table
op	117:53	0:0	10	[
water	117:54	0:0	10	i
op	117:55	0:0	10	]
op	117:56	0:0	10	.
water	117:57	0:0	10	a
decl	118:20	118:64	10	float	lerpfrac
op	118:35	0:0	10	=
water	118:37	0:0	10	(
water	118:38	0:0	10	a
op	118:40	0:0	10	-
water	118:42	0:0	10	start
water	118:47	0:0	10	)
op	118:49	0:0	10	/
water	118:51	0:0	10	(
water	118:52	0:0	10	end
op	118:56	0:0	10	-
water	118:58	0:0	10	start
water	118:63	0:0	10	)
water	119:20	0:0	10	y
op	119:22	0:0	10	=
water	119:24	0:0	10	intensity_color_table
op	119:45	0:0	10	[
water	119:46	0:0	10	i
op	119:48	0:0	10	-
water	119:50	0:0	10	1
op	119:51	0:0	10	]
op	119:52	0:0	10	.
water	119:53	0:0	10	y
op	119:55	0:0	10	*
water	119:57	0:0	10	(
water	119:58	0:0	10	1
op	119:59	0:0	10	.
water	119:60	0:0	10	0
water	119:61	0:0	10	f
op	119:63	0:0	10	-
water	119:65	0:0	10	lerpfrac
water	119:73	0:0	10	)
op	120:22	0:0	10	+
water	120:24	0:0	10	intensity_color_table
op	120:45	0:0	10	[
water	120:46	0:0	10	i
op	120:47	0:0	10	]
op	120:48	0:0	10	.
water	120:49	0:0	10	y
op	120:51	0:0	10	*
water	120:53	0:0	10	lerpfrac
water	120:61	0:0	10	;
water	121:20	0:0	10	u
op	121:22	0:0	10	=
water	121:24	0:0	10	intensity_color_table
op	121:45	0:0	10	[
water	121:46	0:0	10	i
op	121:48	0:0	10	-
water	121:50	0:0	10	1
op	121:51	0:0	10	]
op	121:52	0:0	10	.
water	121:53	0:0	10	u
op	121:55	0:0	10	*
water	121:57	0:0	10	(
water	121:58	0:0	10	1
op	121:59	0:0	10	.
water	121:60	0:0	10	0
water	121:61	0:0	10	f
op	121:63	0:0	10	-
water	121:65	0:0	10	lerpfrac
water	121:73	0:0	10	)
op	122:22	0:0	10	+
water	122:24	0:0	10	intensity_color_table
op	122:45	0:0	10	[
water	122:46	0:0	10	i
op	122:47	0:0	10	]
op	122:48	0:0	10	.
water	122:49	0:0	10	u
op	122:51	0:0	10	*
water	122:53	0:0	10	lerpfrac
water	122:61	0:0	10	;
water	123:20	0:0	10	v
op	123:22	0:0	10	=
water	123:24	0:0	10	intensity_color_table
op	123:45	0:0	10	[
water	123:46	0:0	10	i
op	123:48	0:0	10	-
water	123:50	0:0	10	1
op	123:51	0:0	10	]
op	123:52	0:0	10	.
water	123:53	0:0	10	v
op	123:55	0:0	10	*
water	123:57	0:0	10	(
water	123:58	0:0	10	1
op	123:59	0:0	10	.
water	123:60	0:0	10	0
water	123:61	0:0	10	f
op	123:63	0:0	10	-
water	123:65	0:0	10	lerpfrac
water	123:73	0:0	10	)
op	124:22	0:0	10	+
water	124:24	0:0	10	intensity_color_table
op	124:45	0:0	10	[
water	124:46	0:0	10	i
op	124:47	0:0	10	]
op	124:48	0:0	10	.
water	124:49	0:0	10	v
op	124:51	0:0	10	*
water	124:53	0:0	10	lerpfrac
water	124:61	0:0	10	;
water	125:16	0:0	10	}
water	126:16	0:0	8	out
op	126:19	0:0	8	[
water	126:20	0:0	8	0
op	126:21	0:0	8	]
op	126:23	0:0	8	+=
water	126:26	0:0	8	y
op	126:28	0:0	8	*
water	126:30	0:0	8	yf
water	126:32	0:0	8	;
water	127:16	0:0	8	out
op	127:19	0:0	8	[
water	127:20	0:0	8	1
op	127:21	0:0	8	]
op	127:23	0:0	8	+=
water	127:26	0:0	8	u
op	127:28	0:0	8	*
water	127:30	0:0	8	uf
water	127:32	0:0	8	;
water	128:16	0:0	8	out
op	128:19	0:0	8	[
water	128:20	0:0	8	2
op	128:21	0:0	8	]
op	128:23	0:0	8	+=
water	128:26	0:0	8	v
op	128:28	0:0	8	*
water	128:30	0:0	8	vf
water	128:32	0:0	8	;
water	129:12	0:0	8	}
else	129:14	133:12	6
stmts	129:19	133:12	7	
water	129:19	0:0	8	{
water	130:16	0:0	8	out
op	130:19	0:0	8	[
water	130:20	0:0	8	0
op	130:21	0:0	8	]
op	130:23	0:0	8	+=
water	130:26	0:0	8	a
op	130:28	0:0	8	*
water	130:30	0:0	8	yf
water	130:32	0:0	8	;
water	131:16	0:0	8	out
op	131:19	0:0	8	[
water	131:20	0:0	8	1
op	131:21	0:0	8	]
op	131:23	0:0	8	+=
water	131:26	0:0	8	a
op	131:28	0:0	8	*
water	131:30	0:0	8	uf
water	131:32	0:0	8	;
water	132:16	0:0	8	out
op	132:19	0:0	8	[
water	132:20	0:0	8	2
op	132:21	0:0	8	]
op	132:23	0:0	8	+=
water	132:26	0:0	8	a
op	132:28	0:0	8	*
water	132:30	0:0	8	vf
water	132:32	0:0	8	;
water	133:12	0:0	8	}
water	134:8	0:0	6	}
water	135:4	0:0	4	}
if	137:4	146:4	2	(s -> sliding == SCROLL)
cond	137:8	137:22	3	s -> sliding == SCROLL
water	137:8	0:0	4	s
op	137:9	0:0	4	->
water	137:11	0:0	4	sliding
op	137:19	0:0	4	==
water	137:22	0:0	4	SCROLL
stmts	137:30	146:4	3	
water	137:30	0:0	4	{
for	138:8	144:8	4	(plane = 0 ;plane < 3;plane ++)
forinit	138:13	138:22	5	plane = 0 ;
water	138:13	0:0	6	plane
op	138:19	0:0	6	=
water	138:21	0:0	6	0
water	138:22	0:0	6	;
cond	138:24	138:32	5	plane < 3
water	138:24	0:0	6	plane
op	138:30	0:0	6	<
water	138:32	0:0	6	3
forexpr	138:35	138:40	5	plane ++
water	138:35	0:0	6	plane
op	138:40	0:0	6	++
stmts	138:44	144:8	5	
water	138:44	0:0	6	{
for	139:12	143:12	6	(y = 0 ;y < outlink -> h;y ++)
forinit	139:17	139:22	7	y = 0 ;
water	139:17	0:0	8	y
op	139:19	0:0	8	=
water	139:21	0:0	8	0
water	139:22	0:0	8	;
cond	139:24	139:37	7	y < outlink -> h
water	139:24	0:0	8	y
op	139:26	0:0	8	<
water	139:28	0:0	8	outlink
op	139:35	0:0	8	->
water	139:37	0:0	8	h
forexpr	139:40	139:41	7	y ++
water	139:40	0:0	8	y
op	139:41	0:0	8	++
stmts	139:45	143:12	7	
water	139:45	0:0	8	{
decl	140:16	141:59	8	uint8_t	*p
op	140:27	0:0	8	=
water	140:29	0:0	8	outpicref
op	140:38	0:0	8	->
water	140:40	0:0	8	data
op	140:44	0:0	8	[
water	140:45	0:0	8	plane
op	140:50	0:0	8	]
op	140:52	0:0	8	+
water	141:29	0:0	8	y
op	141:31	0:0	8	*
water	141:33	0:0	8	outpicref
op	141:42	0:0	8	->
water	141:44	0:0	8	linesize
op	141:52	0:0	8	[
water	141:53	0:0	8	plane
op	141:58	0:0	8	]
call	142:16	142:48	8	memmove
arg	142:24	142:25	9	p
water	142:24	0:0	10	p
arg	142:27	142:32	9	p+1
water	142:27	0:0	10	p
op	142:29	0:0	10	+
water	142:31	0:0	10	1
arg	142:34	142:48	9	outlink->w-1
water	142:34	0:0	10	outlink
op	142:41	0:0	10	->
water	142:43	0:0	10	w
op	142:45	0:0	10	-
water	142:47	0:0	10	1
water	142:49	0:0	8	;
water	143:12	0:0	8	}
water	144:8	0:0	6	}
water	145:8	0:0	4	s
op	145:9	0:0	4	->
water	145:11	0:0	4	xpos
op	145:16	0:0	4	=
water	145:18	0:0	4	outlink
op	145:25	0:0	4	->
water	145:27	0:0	4	w
op	145:29	0:0	4	-
water	145:31	0:0	4	1
water	145:32	0:0	4	;
water	146:4	0:0	4	}
for	147:4	155:4	2	(plane = 0 ;plane < 3;plane ++)
forinit	147:9	147:18	3	plane = 0 ;
water	147:9	0:0	4	plane
op	147:15	0:0	4	=
water	147:17	0:0	4	0
water	147:18	0:0	4	;
cond	147:20	147:28	3	plane < 3
water	147:20	0:0	4	plane
op	147:26	0:0	4	<
water	147:28	0:0	4	3
forexpr	147:31	147:36	3	plane ++
water	147:31	0:0	4	plane
op	147:36	0:0	4	++
stmts	147:40	155:4	3	
water	147:40	0:0	4	{
decl	148:8	150:28	4	uint8_t	*p
op	148:19	0:0	4	=
water	148:21	0:0	4	outpicref
op	148:30	0:0	4	->
water	148:32	0:0	4	data
op	148:36	0:0	4	[
water	148:37	0:0	4	plane
op	148:42	0:0	4	]
op	148:44	0:0	4	+
water	149:21	0:0	4	(
water	149:22	0:0	4	outlink
op	149:29	0:0	4	->
water	149:31	0:0	4	h
op	149:33	0:0	4	-
water	149:35	0:0	4	1
water	149:36	0:0	4	)
op	149:38	0:0	4	*
water	149:40	0:0	4	outpicref
op	149:49	0:0	4	->
water	149:51	0:0	4	linesize
op	149:59	0:0	4	[
water	149:60	0:0	4	plane
op	149:65	0:0	4	]
op	149:67	0:0	4	+
water	150:21	0:0	4	s
op	150:22	0:0	4	->
water	150:24	0:0	4	xpos
for	151:8	154:8	4	(y = 0 ;y < outlink -> h;y ++)
forinit	151:13	151:18	5	y = 0 ;
water	151:13	0:0	6	y
op	151:15	0:0	6	=
water	151:17	0:0	6	0
water	151:18	0:0	6	;
cond	151:20	151:33	5	y < outlink -> h
water	151:20	0:0	6	y
op	151:22	0:0	6	<
water	151:24	0:0	6	outlink
op	151:31	0:0	6	->
water	151:33	0:0	6	h
forexpr	151:36	151:37	5	y ++
water	151:36	0:0	6	y
op	151:37	0:0	6	++
stmts	151:41	154:8	5	
water	151:41	0:0	6	{
op	152:12	0:0	6	*
water	152:13	0:0	6	p
op	152:15	0:0	6	=
call	152:17	152:76	6	rint
arg	152:22	152:76	7	FFMAX(0,FFMIN(s->combine_buffer[3*y+plane],255))
call	152:22	152:75	8	FFMAX
arg	152:28	152:29	9	0
water	152:28	0:0	10	0
arg	152:31	152:75	9	FFMIN(s->combine_buffer[3*y+plane],255)
call	152:31	152:74	10	FFMIN
arg	152:37	152:69	11	s->combine_buffer[3*y+plane]
water	152:37	0:0	12	s
op	152:38	0:0	12	->
water	152:40	0:0	12	combine_buffer
op	152:54	0:0	12	[
water	152:55	0:0	12	3
op	152:57	0:0	12	*
water	152:59	0:0	12	y
op	152:61	0:0	12	+
water	152:63	0:0	12	plane
op	152:68	0:0	12	]
arg	152:71	152:74	11	255
water	152:71	0:0	12	255
water	152:77	0:0	6	;
water	153:12	0:0	6	p
op	153:14	0:0	6	-=
water	153:17	0:0	6	outpicref
op	153:26	0:0	6	->
water	153:28	0:0	6	linesize
op	153:36	0:0	6	[
water	153:37	0:0	6	plane
op	153:42	0:0	6	]
water	153:43	0:0	6	;
water	154:8	0:0	6	}
water	155:4	0:0	4	}
if	156:4	157:39	2	(s -> sliding != FULLFRAME || s -> xpos == 0)
cond	156:8	156:46	3	s -> sliding != FULLFRAME || s -> xpos == 0
water	156:8	0:0	4	s
op	156:9	0:0	4	->
water	156:11	0:0	4	sliding
op	156:19	0:0	4	!=
water	156:22	0:0	4	FULLFRAME
op	156:32	0:0	4	||
water	156:35	0:0	4	s
op	156:36	0:0	4	->
water	156:38	0:0	4	xpos
op	156:43	0:0	4	==
water	156:46	0:0	4	0
stmts	157:8	157:39	3	
water	157:8	0:0	4	outpicref
op	157:17	0:0	4	->
water	157:19	0:0	4	pts
op	157:23	0:0	4	=
water	157:25	0:0	4	insamples
op	157:34	0:0	4	->
water	157:36	0:0	4	pts
water	157:39	0:0	4	;
water	158:4	0:0	2	s
op	158:5	0:0	2	->
water	158:7	0:0	2	xpos
op	158:11	0:0	2	++
water	158:13	0:0	2	;
if	159:4	160:19	2	(s -> xpos >= outlink -> w)
cond	159:8	159:28	3	s -> xpos >= outlink -> w
water	159:8	0:0	4	s
op	159:9	0:0	4	->
water	159:11	0:0	4	xpos
op	159:16	0:0	4	>=
water	159:19	0:0	4	outlink
op	159:26	0:0	4	->
water	159:28	0:0	4	w
stmts	160:8	160:19	3	
water	160:8	0:0	4	s
op	160:9	0:0	4	->
water	160:11	0:0	4	xpos
op	160:16	0:0	4	=
water	160:18	0:0	4	0
water	160:19	0:0	4	;
if	161:4	166:4	2	(s -> sliding != FULLFRAME || s -> xpos == 0)
cond	161:8	161:46	3	s -> sliding != FULLFRAME || s -> xpos == 0
water	161:8	0:0	4	s
op	161:9	0:0	4	->
water	161:11	0:0	4	sliding
op	161:19	0:0	4	!=
water	161:22	0:0	4	FULLFRAME
op	161:32	0:0	4	||
water	161:35	0:0	4	s
op	161:36	0:0	4	->
water	161:38	0:0	4	xpos
op	161:43	0:0	4	==
water	161:46	0:0	4	0
stmts	161:49	166:4	3	
water	161:49	0:0	4	{
water	162:8	0:0	4	s
op	162:9	0:0	4	->
water	162:11	0:0	4	req_fullfilled
op	162:26	0:0	4	=
water	162:28	0:0	4	1
water	162:29	0:0	4	;
water	163:8	0:0	4	ret
op	163:12	0:0	4	=
call	163:14	163:67	4	ff_filter_frame
arg	163:30	163:37	5	outlink
water	163:30	0:0	6	outlink
arg	163:39	163:67	5	av_frame_clone(s->outpicref)
call	163:39	163:66	6	av_frame_clone
arg	163:54	163:66	7	s->outpicref
water	163:54	0:0	8	s
op	163:55	0:0	8	->
water	163:57	0:0	8	outpicref
water	163:68	0:0	4	;
if	164:8	165:22	4	(ret < 0)
cond	164:12	164:18	5	ret < 0
water	164:12	0:0	6	ret
op	164:16	0:0	6	<
water	164:18	0:0	6	0
stmts	165:12	165:22	5	
return	165:12	165:22	6	ret
water	165:19	0:0	7	ret
water	166:4	0:0	4	}
return	167:4	167:19	2	win_size
water	167:11	0:0	3	win_size
