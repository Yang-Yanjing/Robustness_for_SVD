func	1:0	28:0	0	static int	movie_query_formats
params	1:30	0:0	1	
param	1:31	1:51	2	AVFilterContext *	ctx
stmnts	0:0	27:12	1	
decl	3:4	3:35	2	MovieContext	*movie
op	3:24	0:0	2	=
water	3:26	0:0	2	ctx
op	3:29	0:0	2	->
water	3:31	0:0	2	priv
decl	4:4	4:26	2	int	list[]
op	4:15	0:0	2	=
water	4:17	0:0	2	{
water	4:19	0:0	2	0
water	4:20	0:0	2	,
op	4:22	0:0	2	-
water	4:23	0:0	2	1
water	4:25	0:0	2	}
decl	5:4	5:32	2	int64_t	list64[]
op	5:21	0:0	2	=
water	5:23	0:0	2	{
water	5:25	0:0	2	0
water	5:26	0:0	2	,
op	5:28	0:0	2	-
water	5:29	0:0	2	1
water	5:31	0:0	2	}
decl	6:4	6:9	2	int	i
for	7:4	26:4	2	(i = 0 ;i < ctx -> nb_outputs;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:25	3	i < ctx -> nb_outputs
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	ctx
op	7:23	0:0	4	->
water	7:25	0:0	4	nb_outputs
forexpr	7:37	7:38	3	i ++
water	7:37	0:0	4	i
op	7:38	0:0	4	++
stmts	7:42	26:4	3	
water	7:42	0:0	4	{
decl	8:8	8:39	4	MovieStream	*st
op	8:24	0:0	4	=
op	8:26	0:0	4	&
water	8:27	0:0	4	movie
op	8:32	0:0	4	->
water	8:34	0:0	4	st
op	8:36	0:0	4	[
water	8:37	0:0	4	i
op	8:38	0:0	4	]
decl	9:8	9:41	4	AVCodecContext	*c
op	9:26	0:0	4	=
water	9:28	0:0	4	st
op	9:30	0:0	4	->
water	9:32	0:0	4	st
op	9:34	0:0	4	->
water	9:36	0:0	4	codec
decl	10:8	10:47	4	AVFilterLink	*outlink
op	10:30	0:0	4	=
water	10:32	0:0	4	ctx
op	10:35	0:0	4	->
water	10:37	0:0	4	outputs
op	10:44	0:0	4	[
water	10:45	0:0	4	i
op	10:46	0:0	4	]
switch	11:8	25:8	4	(c -> codec_type)
cond	11:16	11:19	5	c -> codec_type
water	11:16	0:0	6	c
op	11:17	0:0	6	->
water	11:19	0:0	6	codec_type
stmts	11:31	25:8	5	
water	11:31	0:0	6	{
label	12:8	12:31	6	case AVMEDIA_TYPE_VIDEO :
water	13:12	0:0	6	list
op	13:16	0:0	6	[
water	13:17	0:0	6	0
op	13:18	0:0	6	]
op	13:20	0:0	6	=
water	13:22	0:0	6	c
op	13:23	0:0	6	->
water	13:25	0:0	6	pix_fmt
water	13:32	0:0	6	;
call	14:12	14:74	6	ff_formats_ref
arg	14:27	14:52	7	ff_make_format_list(list)
call	14:27	14:51	8	ff_make_format_list
arg	14:47	14:51	9	list
water	14:47	0:0	10	list
arg	14:54	14:74	7	&outlink->in_formats
op	14:54	0:0	8	&
water	14:55	0:0	8	outlink
op	14:62	0:0	8	->
water	14:64	0:0	8	in_formats
water	14:75	0:0	6	;
break	15:12	15:17	6	
label	16:8	16:31	6	case AVMEDIA_TYPE_AUDIO :
water	17:12	0:0	6	list
op	17:16	0:0	6	[
water	17:17	0:0	6	0
op	17:18	0:0	6	]
op	17:20	0:0	6	=
water	17:22	0:0	6	c
op	17:23	0:0	6	->
water	17:25	0:0	6	sample_fmt
water	17:35	0:0	6	;
call	18:12	18:74	6	ff_formats_ref
arg	18:27	18:52	7	ff_make_format_list(list)
call	18:27	18:51	8	ff_make_format_list
arg	18:47	18:51	9	list
water	18:47	0:0	10	list
arg	18:54	18:74	7	&outlink->in_formats
op	18:54	0:0	8	&
water	18:55	0:0	8	outlink
op	18:62	0:0	8	->
water	18:64	0:0	8	in_formats
water	18:75	0:0	6	;
water	19:12	0:0	6	list
op	19:16	0:0	6	[
water	19:17	0:0	6	0
op	19:18	0:0	6	]
op	19:20	0:0	6	=
water	19:22	0:0	6	c
op	19:23	0:0	6	->
water	19:25	0:0	6	sample_rate
water	19:36	0:0	6	;
call	20:12	20:78	6	ff_formats_ref
arg	20:27	20:52	7	ff_make_format_list(list)
call	20:27	20:51	8	ff_make_format_list
arg	20:47	20:51	9	list
water	20:47	0:0	10	list
arg	20:54	20:78	7	&outlink->in_samplerates
op	20:54	0:0	8	&
water	20:55	0:0	8	outlink
op	20:62	0:0	8	->
water	20:64	0:0	8	in_samplerates
water	20:79	0:0	6	;
water	21:12	0:0	6	list64
op	21:18	0:0	6	[
water	21:19	0:0	6	0
op	21:20	0:0	6	]
op	21:22	0:0	6	=
water	21:24	0:0	6	c
op	21:25	0:0	6	->
water	21:27	0:0	6	channel_layout
water	21:41	0:0	6	;
call	22:12	23:63	6	ff_channel_layouts_ref
arg	22:35	22:70	7	avfilter_make_format64_list(list64)
call	22:35	22:69	8	avfilter_make_format64_list
arg	22:63	22:69	9	list64
water	22:63	0:0	10	list64
arg	23:35	23:63	7	&outlink->in_channel_layouts
op	23:35	0:0	8	&
water	23:36	0:0	8	outlink
op	23:43	0:0	8	->
water	23:45	0:0	8	in_channel_layouts
water	23:64	0:0	6	;
break	24:12	24:17	6	
water	25:8	0:0	6	}
water	26:4	0:0	4	}
return	27:4	27:12	2	0
water	27:11	0:0	3	0
