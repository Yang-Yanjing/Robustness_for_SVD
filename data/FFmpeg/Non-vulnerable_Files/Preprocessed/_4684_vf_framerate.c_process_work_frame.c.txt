func	1:0	140:0	0	static int	process_work_frame
params	1:29	0:0	1	
param	1:30	1:50	2	AVFilterContext *	ctx
param	1:52	1:60	2	int	stop
stmnts	0:0	139:49	1	
decl	3:4	3:35	2	FrameRateContext	*s
op	3:24	0:0	2	=
water	3:26	0:0	2	ctx
op	3:29	0:0	2	->
water	3:31	0:0	2	priv
decl	4:4	4:43	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	outputs
op	4:40	0:0	2	[
water	4:41	0:0	2	0
op	4:42	0:0	2	]
decl	5:4	5:25	2	int64_t	work_next_pts
decl	6:4	6:41	2	AVFrame	*copy_src1
water	6:22	0:0	2	,
decl	6:4	6:41	2	AVFrame	*copy_src2
water	6:34	0:0	2	,
decl	6:4	6:41	2	AVFrame	*work
decl	7:4	7:19	2	int	interpolate
call	8:4	8:41	2	ff_dlog
arg	8:12	8:15	3	ctx
water	8:12	0:0	4	ctx
arg	8:17	8:41	3	"process_work_frame()\n"
water	8:17	0:0	4	"process_work_frame()\n"
water	8:42	0:0	2	;
call	9:4	9:89	2	ff_dlog
arg	9:12	9:15	3	ctx
water	9:12	0:0	4	ctx
arg	9:17	9:65	3	"process_work_frame() pending_input_frames %d\n"
water	9:17	0:0	4	"process_work_frame() pending_input_frames %d\n"
arg	9:67	9:89	3	s->pending_srce_frames
water	9:67	0:0	4	s
op	9:68	0:0	4	->
water	9:70	0:0	4	pending_srce_frames
water	9:90	0:0	2	;
if	10:4	10:111	2	(s -> srce [ s -> prev ])
cond	10:8	10:23	3	s -> srce [ s -> prev ]
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	srce
op	10:15	0:0	4	[
water	10:16	0:0	4	s
op	10:17	0:0	4	->
water	10:19	0:0	4	prev
op	10:23	0:0	4	]
stmts	10:26	10:111	3	
call	10:26	10:110	4	ff_dlog
arg	10:34	10:37	5	ctx
water	10:34	0:0	6	ctx
arg	10:39	10:87	5	"process_work_frame() srce prev pts:%"PRId64"\n"
water	10:39	0:0	6	"process_work_frame() srce prev pts:%"
water	10:77	0:0	6	PRId64
water	10:83	0:0	6	"\n"
arg	10:89	10:110	5	s->srce[s->prev]->pts
water	10:89	0:0	6	s
op	10:90	0:0	6	->
water	10:92	0:0	6	srce
op	10:96	0:0	6	[
water	10:97	0:0	6	s
op	10:98	0:0	6	->
water	10:100	0:0	6	prev
op	10:104	0:0	6	]
op	10:105	0:0	6	->
water	10:107	0:0	6	pts
water	10:111	0:0	4	;
if	11:4	11:111	2	(s -> srce [ s -> crnt ])
cond	11:8	11:23	3	s -> srce [ s -> crnt ]
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	srce
op	11:15	0:0	4	[
water	11:16	0:0	4	s
op	11:17	0:0	4	->
water	11:19	0:0	4	crnt
op	11:23	0:0	4	]
stmts	11:26	11:111	3	
call	11:26	11:110	4	ff_dlog
arg	11:34	11:37	5	ctx
water	11:34	0:0	6	ctx
arg	11:39	11:87	5	"process_work_frame() srce crnt pts:%"PRId64"\n"
water	11:39	0:0	6	"process_work_frame() srce crnt pts:%"
water	11:77	0:0	6	PRId64
water	11:83	0:0	6	"\n"
arg	11:89	11:110	5	s->srce[s->crnt]->pts
water	11:89	0:0	6	s
op	11:90	0:0	6	->
water	11:92	0:0	6	srce
op	11:96	0:0	6	[
water	11:97	0:0	6	s
op	11:98	0:0	6	->
water	11:100	0:0	6	crnt
op	11:104	0:0	6	]
op	11:105	0:0	6	->
water	11:107	0:0	6	pts
water	11:111	0:0	4	;
if	12:4	12:111	2	(s -> srce [ s -> next ])
cond	12:8	12:23	3	s -> srce [ s -> next ]
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	srce
op	12:15	0:0	4	[
water	12:16	0:0	4	s
op	12:17	0:0	4	->
water	12:19	0:0	4	next
op	12:23	0:0	4	]
stmts	12:26	12:111	3	
call	12:26	12:110	4	ff_dlog
arg	12:34	12:37	5	ctx
water	12:34	0:0	6	ctx
arg	12:39	12:87	5	"process_work_frame() srce next pts:%"PRId64"\n"
water	12:39	0:0	6	"process_work_frame() srce next pts:%"
water	12:77	0:0	6	PRId64
water	12:83	0:0	6	"\n"
arg	12:89	12:110	5	s->srce[s->next]->pts
water	12:89	0:0	6	s
op	12:90	0:0	6	->
water	12:92	0:0	6	srce
op	12:96	0:0	6	[
water	12:97	0:0	6	s
op	12:98	0:0	6	->
water	12:100	0:0	6	next
op	12:104	0:0	6	]
op	12:105	0:0	6	->
water	12:107	0:0	6	pts
water	12:111	0:0	4	;
if	13:4	18:4	2	(! s -> srce [ s -> crnt ])
cond	13:8	13:24	3	! s -> srce [ s -> crnt ]
op	13:8	0:0	4	!
water	13:9	0:0	4	s
op	13:10	0:0	4	->
water	13:12	0:0	4	srce
op	13:16	0:0	4	[
water	13:17	0:0	4	s
op	13:18	0:0	4	->
water	13:20	0:0	4	crnt
op	13:24	0:0	4	]
stmts	13:27	18:4	3	
water	13:27	0:0	4	{
call	15:8	15:115	4	ff_dlog
arg	15:16	15:19	5	ctx
water	15:16	0:0	6	ctx
arg	15:21	15:115	5	"process_work_frame() no current frame cached: move on to next frame, do not output a frame\n"
water	15:21	0:0	6	"process_work_frame() no current frame cached: move on to next frame, do not output a frame\n"
water	15:116	0:0	4	;
call	16:8	16:23	4	next_source
arg	16:20	16:23	5	ctx
water	16:20	0:0	6	ctx
water	16:24	0:0	4	;
return	17:8	17:16	4	0
water	17:15	0:0	5	0
water	18:4	0:0	4	}
water	19:4	0:0	2	work_next_pts
op	19:18	0:0	2	=
water	19:20	0:0	2	s
op	19:21	0:0	2	->
water	19:23	0:0	2	pts
op	19:27	0:0	2	+
water	19:29	0:0	2	s
op	19:30	0:0	2	->
water	19:32	0:0	2	average_dest_pts_delta
water	19:54	0:0	2	;
call	20:4	20:73	2	ff_dlog
arg	20:12	20:15	3	ctx
water	20:12	0:0	4	ctx
arg	20:17	20:65	3	"process_work_frame() work crnt pts:%"PRId64"\n"
water	20:17	0:0	4	"process_work_frame() work crnt pts:%"
water	20:55	0:0	4	PRId64
water	20:61	0:0	4	"\n"
arg	20:67	20:73	3	s->pts
water	20:67	0:0	4	s
op	20:68	0:0	4	->
water	20:70	0:0	4	pts
water	20:74	0:0	2	;
call	21:4	21:80	2	ff_dlog
arg	21:12	21:15	3	ctx
water	21:12	0:0	4	ctx
arg	21:17	21:65	3	"process_work_frame() work next pts:%"PRId64"\n"
water	21:17	0:0	4	"process_work_frame() work next pts:%"
water	21:55	0:0	4	PRId64
water	21:61	0:0	4	"\n"
arg	21:67	21:80	3	work_next_pts
water	21:67	0:0	4	work_next_pts
water	21:81	0:0	2	;
if	22:4	24:84	2	(s -> srce [ s -> prev ])
cond	22:8	22:23	3	s -> srce [ s -> prev ]
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	srce
op	22:15	0:0	4	[
water	22:16	0:0	4	s
op	22:17	0:0	4	->
water	22:19	0:0	4	prev
op	22:23	0:0	4	]
stmts	23:8	24:84	3	
call	23:8	24:83	4	ff_dlog
arg	23:16	23:19	5	ctx
water	23:16	0:0	6	ctx
arg	23:21	23:93	5	"process_work_frame() srce prev pts:%"PRId64" at dest time base:%u/%u\n"
water	23:21	0:0	6	"process_work_frame() srce prev pts:%"
water	23:59	0:0	6	PRId64
water	23:65	0:0	6	" at dest time base:%u/%u\n"
arg	24:12	24:37	5	s->srce_pts_dest[s->prev]
water	24:12	0:0	6	s
op	24:13	0:0	6	->
water	24:15	0:0	6	srce_pts_dest
op	24:28	0:0	6	[
water	24:29	0:0	6	s
op	24:30	0:0	6	->
water	24:32	0:0	6	prev
op	24:36	0:0	6	]
arg	24:39	24:60	5	s->dest_time_base.num
water	24:39	0:0	6	s
op	24:40	0:0	6	->
water	24:42	0:0	6	dest_time_base
op	24:56	0:0	6	.
water	24:57	0:0	6	num
arg	24:62	24:83	5	s->dest_time_base.den
water	24:62	0:0	6	s
op	24:63	0:0	6	->
water	24:65	0:0	6	dest_time_base
op	24:79	0:0	6	.
water	24:80	0:0	6	den
water	24:84	0:0	4	;
if	25:4	27:84	2	(s -> srce [ s -> crnt ])
cond	25:8	25:23	3	s -> srce [ s -> crnt ]
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	srce
op	25:15	0:0	4	[
water	25:16	0:0	4	s
op	25:17	0:0	4	->
water	25:19	0:0	4	crnt
op	25:23	0:0	4	]
stmts	26:8	27:84	3	
call	26:8	27:83	4	ff_dlog
arg	26:16	26:19	5	ctx
water	26:16	0:0	6	ctx
arg	26:21	26:93	5	"process_work_frame() srce crnt pts:%"PRId64" at dest time base:%u/%u\n"
water	26:21	0:0	6	"process_work_frame() srce crnt pts:%"
water	26:59	0:0	6	PRId64
water	26:65	0:0	6	" at dest time base:%u/%u\n"
arg	27:12	27:37	5	s->srce_pts_dest[s->crnt]
water	27:12	0:0	6	s
op	27:13	0:0	6	->
water	27:15	0:0	6	srce_pts_dest
op	27:28	0:0	6	[
water	27:29	0:0	6	s
op	27:30	0:0	6	->
water	27:32	0:0	6	crnt
op	27:36	0:0	6	]
arg	27:39	27:60	5	s->dest_time_base.num
water	27:39	0:0	6	s
op	27:40	0:0	6	->
water	27:42	0:0	6	dest_time_base
op	27:56	0:0	6	.
water	27:57	0:0	6	num
arg	27:62	27:83	5	s->dest_time_base.den
water	27:62	0:0	6	s
op	27:63	0:0	6	->
water	27:65	0:0	6	dest_time_base
op	27:79	0:0	6	.
water	27:80	0:0	6	den
water	27:84	0:0	4	;
if	28:4	30:84	2	(s -> srce [ s -> next ])
cond	28:8	28:23	3	s -> srce [ s -> next ]
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	srce
op	28:15	0:0	4	[
water	28:16	0:0	4	s
op	28:17	0:0	4	->
water	28:19	0:0	4	next
op	28:23	0:0	4	]
stmts	29:8	30:84	3	
call	29:8	30:83	4	ff_dlog
arg	29:16	29:19	5	ctx
water	29:16	0:0	6	ctx
arg	29:21	29:93	5	"process_work_frame() srce next pts:%"PRId64" at dest time base:%u/%u\n"
water	29:21	0:0	6	"process_work_frame() srce next pts:%"
water	29:59	0:0	6	PRId64
water	29:65	0:0	6	" at dest time base:%u/%u\n"
arg	30:12	30:37	5	s->srce_pts_dest[s->next]
water	30:12	0:0	6	s
op	30:13	0:0	6	->
water	30:15	0:0	6	srce_pts_dest
op	30:28	0:0	6	[
water	30:29	0:0	6	s
op	30:30	0:0	6	->
water	30:32	0:0	6	next
op	30:36	0:0	6	]
arg	30:39	30:60	5	s->dest_time_base.num
water	30:39	0:0	6	s
op	30:40	0:0	6	->
water	30:42	0:0	6	dest_time_base
op	30:56	0:0	6	.
water	30:57	0:0	6	num
arg	30:62	30:83	5	s->dest_time_base.den
water	30:62	0:0	6	s
op	30:63	0:0	6	->
water	30:65	0:0	6	dest_time_base
op	30:79	0:0	6	.
water	30:80	0:0	6	den
water	30:84	0:0	4	;
call	31:4	31:31	2	av_assert0
arg	31:15	31:31	3	s->srce[s->next]
water	31:15	0:0	4	s
op	31:16	0:0	4	->
water	31:18	0:0	4	srce
op	31:22	0:0	4	[
water	31:23	0:0	4	s
op	31:24	0:0	4	->
water	31:26	0:0	4	next
op	31:30	0:0	4	]
water	31:32	0:0	2	;
if	33:4	38:4	2	(! s -> flush && s -> pts >= s -> srce_pts_dest [ s -> next ])
cond	33:8	33:55	3	! s -> flush && s -> pts >= s -> srce_pts_dest [ s -> next ]
op	33:8	0:0	4	!
water	33:9	0:0	4	s
op	33:10	0:0	4	->
water	33:12	0:0	4	flush
op	33:18	0:0	4	&&
water	33:21	0:0	4	s
op	33:22	0:0	4	->
water	33:24	0:0	4	pts
op	33:28	0:0	4	>=
water	33:31	0:0	4	s
op	33:32	0:0	4	->
water	33:34	0:0	4	srce_pts_dest
op	33:47	0:0	4	[
water	33:48	0:0	4	s
op	33:49	0:0	4	->
water	33:51	0:0	4	next
op	33:55	0:0	4	]
stmts	33:58	38:4	3	
water	33:58	0:0	4	{
call	34:8	34:134	4	ff_dlog
arg	34:16	34:19	5	ctx
water	34:16	0:0	6	ctx
arg	34:21	34:134	5	"process_work_frame() work crnt pts >= srce next pts: SKIP FRAME, move on to next frame, do not output a frame\n"
water	34:21	0:0	6	"process_work_frame() work crnt pts >= srce next pts: SKIP FRAME, move on to next frame, do not output a frame\n"
water	34:135	0:0	4	;
call	35:8	35:23	4	next_source
arg	35:20	35:23	5	ctx
water	35:20	0:0	6	ctx
water	35:24	0:0	4	;
water	36:8	0:0	4	s
op	36:9	0:0	4	->
water	36:11	0:0	4	pending_srce_frames
op	36:30	0:0	4	--
water	36:32	0:0	4	;
return	37:8	37:16	4	0
water	37:15	0:0	5	0
water	38:4	0:0	4	}
water	40:4	0:0	2	interpolate
op	40:16	0:0	2	=
call	40:18	40:102	2	(int)
arg	40:25	40:102	3	(s->pts-s->srce_pts_dest[s->crnt])*256.0/s->average_srce_pts_dest_delta
water	40:25	0:0	4	(
water	40:26	0:0	4	s
op	40:27	0:0	4	->
water	40:29	0:0	4	pts
op	40:33	0:0	4	-
water	40:35	0:0	4	s
op	40:36	0:0	4	->
water	40:38	0:0	4	srce_pts_dest
op	40:51	0:0	4	[
water	40:52	0:0	4	s
op	40:53	0:0	4	->
water	40:55	0:0	4	crnt
op	40:59	0:0	4	]
water	40:60	0:0	4	)
op	40:62	0:0	4	*
water	40:64	0:0	4	256
op	40:67	0:0	4	.
water	40:68	0:0	4	0
op	40:70	0:0	4	/
water	40:72	0:0	4	s
op	40:73	0:0	4	->
water	40:75	0:0	4	average_srce_pts_dest_delta
water	40:103	0:0	2	;
call	41:4	41:73	2	ff_dlog
arg	41:12	41:15	3	ctx
water	41:12	0:0	4	ctx
arg	41:17	41:60	3	"process_work_frame() interpolate:%d/256\n"
water	41:17	0:0	4	"process_work_frame() interpolate:%d/256\n"
arg	41:62	41:73	3	interpolate
water	41:62	0:0	4	interpolate
water	41:74	0:0	2	;
water	42:4	0:0	2	copy_src1
op	42:14	0:0	2	=
water	42:16	0:0	2	s
op	42:17	0:0	2	->
water	42:19	0:0	2	srce
op	42:23	0:0	2	[
water	42:24	0:0	2	s
op	42:25	0:0	2	->
water	42:27	0:0	2	crnt
op	42:31	0:0	2	]
water	42:32	0:0	2	;
if	43:4	46:4	2	(interpolate > s -> interp_end)
cond	43:8	43:25	3	interpolate > s -> interp_end
water	43:8	0:0	4	interpolate
op	43:20	0:0	4	>
water	43:22	0:0	4	s
op	43:23	0:0	4	->
water	43:25	0:0	4	interp_end
stmts	43:37	46:4	3	
water	43:37	0:0	4	{
call	44:8	44:60	4	ff_dlog
arg	44:16	44:19	5	ctx
water	44:16	0:0	6	ctx
arg	44:21	44:60	5	"process_work_frame() source is:NEXT\n"
water	44:21	0:0	6	"process_work_frame() source is:NEXT\n"
water	44:61	0:0	4	;
water	45:8	0:0	4	copy_src1
op	45:18	0:0	4	=
water	45:20	0:0	4	s
op	45:21	0:0	4	->
water	45:23	0:0	4	srce
op	45:27	0:0	4	[
water	45:28	0:0	4	s
op	45:29	0:0	4	->
water	45:31	0:0	4	next
op	45:35	0:0	4	]
water	45:36	0:0	4	;
water	46:4	0:0	4	}
if	47:4	50:4	2	(s -> srce [ s -> prev ] && interpolate < - s -> interp_end)
cond	47:8	47:46	3	s -> srce [ s -> prev ] && interpolate < - s -> interp_end
water	47:8	0:0	4	s
op	47:9	0:0	4	->
water	47:11	0:0	4	srce
op	47:15	0:0	4	[
water	47:16	0:0	4	s
op	47:17	0:0	4	->
water	47:19	0:0	4	prev
op	47:23	0:0	4	]
op	47:25	0:0	4	&&
water	47:28	0:0	4	interpolate
op	47:40	0:0	4	<
op	47:42	0:0	4	-
water	47:43	0:0	4	s
op	47:44	0:0	4	->
water	47:46	0:0	4	interp_end
stmts	47:58	50:4	3	
water	47:58	0:0	4	{
call	48:8	48:60	4	ff_dlog
arg	48:16	48:19	5	ctx
water	48:16	0:0	6	ctx
arg	48:21	48:60	5	"process_work_frame() source is:PREV\n"
water	48:21	0:0	6	"process_work_frame() source is:PREV\n"
water	48:61	0:0	4	;
water	49:8	0:0	4	copy_src1
op	49:18	0:0	4	=
water	49:20	0:0	4	s
op	49:21	0:0	4	->
water	49:23	0:0	4	srce
op	49:27	0:0	4	[
water	49:28	0:0	4	s
op	49:29	0:0	4	->
water	49:31	0:0	4	prev
op	49:35	0:0	4	]
water	49:36	0:0	4	;
water	50:4	0:0	4	}
if	52:4	118:4	2	(( interpolate >= s -> interp_start && interpolate <= s -> interp_end ) || ( interpolate <= - s -> interp_start && interpolate >= - s -> interp_end ))
cond	52:8	52:141	3	( interpolate >= s -> interp_start && interpolate <= s -> interp_end ) || ( interpolate <= - s -> interp_start && interpolate >= - s -> interp_end )
water	52:8	0:0	4	(
water	52:9	0:0	4	interpolate
op	52:21	0:0	4	>=
water	52:24	0:0	4	s
op	52:25	0:0	4	->
water	52:27	0:0	4	interp_start
op	52:40	0:0	4	&&
water	52:43	0:0	4	interpolate
op	52:55	0:0	4	<=
water	52:58	0:0	4	s
op	52:59	0:0	4	->
water	52:61	0:0	4	interp_end
water	52:71	0:0	4	)
op	52:73	0:0	4	||
water	52:76	0:0	4	(
water	52:77	0:0	4	interpolate
op	52:89	0:0	4	<=
op	52:92	0:0	4	-
water	52:93	0:0	4	s
op	52:94	0:0	4	->
water	52:96	0:0	4	interp_start
op	52:109	0:0	4	&&
water	52:112	0:0	4	interpolate
op	52:124	0:0	4	>=
op	52:127	0:0	4	-
water	52:128	0:0	4	s
op	52:129	0:0	4	->
water	52:131	0:0	4	interp_end
water	52:141	0:0	4	)
stmts	52:144	118:4	3	
water	52:144	0:0	4	{
decl	53:8	53:42	4	double	interpolate_scene_score
op	53:39	0:0	4	=
water	53:41	0:0	4	0
if	54:8	57:8	4	(interpolate > 0)
cond	54:12	54:26	5	interpolate > 0
water	54:12	0:0	6	interpolate
op	54:24	0:0	6	>
water	54:26	0:0	6	0
stmts	54:29	57:8	5	
water	54:29	0:0	6	{
call	55:12	55:76	6	ff_dlog
arg	55:20	55:23	7	ctx
water	55:20	0:0	8	ctx
arg	55:25	55:76	7	"process_work_frame() interpolate source is:NEXT\n"
water	55:25	0:0	8	"process_work_frame() interpolate source is:NEXT\n"
water	55:77	0:0	6	;
water	56:12	0:0	6	copy_src2
op	56:22	0:0	6	=
water	56:24	0:0	6	s
op	56:25	0:0	6	->
water	56:27	0:0	6	srce
op	56:31	0:0	6	[
water	56:32	0:0	6	s
op	56:33	0:0	6	->
water	56:35	0:0	6	next
op	56:39	0:0	6	]
water	56:40	0:0	6	;
water	57:8	0:0	6	}
else	57:10	60:8	4
stmts	57:15	60:8	5	
water	57:15	0:0	6	{
call	58:12	58:76	6	ff_dlog
arg	58:20	58:23	7	ctx
water	58:20	0:0	8	ctx
arg	58:25	58:76	7	"process_work_frame() interpolate source is:PREV\n"
water	58:25	0:0	8	"process_work_frame() interpolate source is:PREV\n"
water	58:77	0:0	6	;
water	59:12	0:0	6	copy_src2
op	59:22	0:0	6	=
water	59:24	0:0	6	s
op	59:25	0:0	6	->
water	59:27	0:0	6	srce
op	59:31	0:0	6	[
water	59:32	0:0	6	s
op	59:33	0:0	6	->
water	59:35	0:0	6	prev
op	59:39	0:0	6	]
water	59:40	0:0	6	;
water	60:8	0:0	6	}
if	61:8	64:8	4	(( s -> flags & FRAMERATE_FLAG_SCD ) && copy_src2)
cond	61:12	61:47	5	( s -> flags & FRAMERATE_FLAG_SCD ) && copy_src2
water	61:12	0:0	6	(
water	61:13	0:0	6	s
op	61:14	0:0	6	->
water	61:16	0:0	6	flags
op	61:22	0:0	6	&
water	61:24	0:0	6	FRAMERATE_FLAG_SCD
water	61:42	0:0	6	)
op	61:44	0:0	6	&&
water	61:47	0:0	6	copy_src2
stmts	61:58	64:8	5	
water	61:58	0:0	6	{
water	62:12	0:0	6	interpolate_scene_score
op	62:36	0:0	6	=
call	62:38	62:79	6	get_scene_score
arg	62:54	62:57	7	ctx
water	62:54	0:0	8	ctx
arg	62:59	62:68	7	copy_src1
water	62:59	0:0	8	copy_src1
arg	62:70	62:79	7	copy_src2
water	62:70	0:0	8	copy_src2
water	62:80	0:0	6	;
call	63:12	63:101	6	ff_dlog
arg	63:20	63:23	7	ctx
water	63:20	0:0	8	ctx
arg	63:25	63:76	7	"process_work_frame() interpolate scene score:%f\n"
water	63:25	0:0	8	"process_work_frame() interpolate scene score:%f\n"
arg	63:78	63:101	7	interpolate_scene_score
water	63:78	0:0	8	interpolate_scene_score
water	63:102	0:0	6	;
water	64:8	0:0	6	}
if	66:8	114:8	4	(interpolate_scene_score < s -> scene_score && copy_src2)
cond	66:12	66:56	5	interpolate_scene_score < s -> scene_score && copy_src2
water	66:12	0:0	6	interpolate_scene_score
op	66:36	0:0	6	<
water	66:38	0:0	6	s
op	66:39	0:0	6	->
water	66:41	0:0	6	scene_score
op	66:53	0:0	6	&&
water	66:56	0:0	6	copy_src2
stmts	66:67	114:8	5	
water	66:67	0:0	6	{
decl	67:12	67:51	6	uint16_t	src2_factor
op	67:33	0:0	6	=
call	67:35	67:50	7	abs
arg	67:39	67:50	8	interpolate
water	67:39	0:0	9	interpolate
decl	68:12	68:52	6	uint16_t	src1_factor
op	68:33	0:0	6	=
water	68:35	0:0	6	256
op	68:39	0:0	6	-
water	68:41	0:0	6	src2_factor
decl	69:12	69:34	6	int	plane
water	69:21	0:0	6	,
decl	69:12	69:34	6	int	line
water	69:27	0:0	6	,
decl	69:12	69:34	6	int	pixel
water	71:12	0:0	6	work
op	71:17	0:0	6	=
call	71:19	71:70	6	ff_get_video_buffer
arg	71:39	71:46	7	outlink
water	71:39	0:0	8	outlink
arg	71:48	71:58	7	outlink->w
water	71:48	0:0	8	outlink
op	71:55	0:0	8	->
water	71:57	0:0	8	w
arg	71:60	71:70	7	outlink->h
water	71:60	0:0	8	outlink
op	71:67	0:0	8	->
water	71:69	0:0	8	h
water	71:71	0:0	6	;
if	72:12	73:38	6	(! work)
cond	72:16	72:17	7	! work
op	72:16	0:0	8	!
water	72:17	0:0	8	work
stmts	73:16	73:38	7	
return	73:16	73:38	8	AVERROR(ENOMEM)
call	73:23	73:37	9	AVERROR
arg	73:31	73:37	10	ENOMEM
water	73:31	0:0	11	ENOMEM
call	74:12	74:54	6	av_frame_copy_props
arg	74:32	74:36	7	work
water	74:32	0:0	8	work
arg	74:38	74:54	7	s->srce[s->crnt]
water	74:38	0:0	8	s
op	74:39	0:0	8	->
water	74:41	0:0	8	srce
op	74:45	0:0	8	[
water	74:46	0:0	8	s
op	74:47	0:0	8	->
water	74:49	0:0	8	crnt
op	74:53	0:0	8	]
water	74:55	0:0	6	;
call	75:12	75:82	6	ff_dlog
arg	75:20	75:23	7	ctx
water	75:20	0:0	8	ctx
arg	75:25	75:82	7	"process_work_frame() INTERPOLATE to create work frame\n"
water	75:25	0:0	8	"process_work_frame() INTERPOLATE to create work frame\n"
water	75:83	0:0	6	;
for	76:12	112:12	6	(plane = 0 ;plane < 4 && copy_src1 -> data [ plane ] && copy_src2 -> data [ plane ];plane ++)
forinit	76:17	76:26	7	plane = 0 ;
water	76:17	0:0	8	plane
op	76:23	0:0	8	=
water	76:25	0:0	8	0
water	76:26	0:0	8	;
cond	76:28	76:88	7	plane < 4 && copy_src1 -> data [ plane ] && copy_src2 -> data [ plane ]
water	76:28	0:0	8	plane
op	76:34	0:0	8	<
water	76:36	0:0	8	4
op	76:38	0:0	8	&&
water	76:41	0:0	8	copy_src1
op	76:50	0:0	8	->
water	76:52	0:0	8	data
op	76:56	0:0	8	[
water	76:57	0:0	8	plane
op	76:62	0:0	8	]
op	76:64	0:0	8	&&
water	76:67	0:0	8	copy_src2
op	76:76	0:0	8	->
water	76:78	0:0	8	data
op	76:82	0:0	8	[
water	76:83	0:0	8	plane
op	76:88	0:0	8	]
forexpr	76:91	76:96	7	plane ++
water	76:91	0:0	8	plane
op	76:96	0:0	8	++
stmts	76:100	112:12	7	
water	76:100	0:0	8	{
decl	77:16	77:56	8	int	cpy_line_width
op	77:35	0:0	8	=
water	77:37	0:0	8	s
op	77:38	0:0	8	->
water	77:40	0:0	8	line_size
op	77:49	0:0	8	[
water	77:50	0:0	8	plane
op	77:55	0:0	8	]
decl	78:16	78:63	8	uint8_t	*cpy_src1_data
op	78:39	0:0	8	=
water	78:41	0:0	8	copy_src1
op	78:50	0:0	8	->
water	78:52	0:0	8	data
op	78:56	0:0	8	[
water	78:57	0:0	8	plane
op	78:62	0:0	8	]
decl	79:16	79:67	8	int	cpy_src1_line_size
op	79:39	0:0	8	=
water	79:41	0:0	8	copy_src1
op	79:50	0:0	8	->
water	79:52	0:0	8	linesize
op	79:60	0:0	8	[
water	79:61	0:0	8	plane
op	79:66	0:0	8	]
decl	80:16	80:63	8	uint8_t	*cpy_src2_data
op	80:39	0:0	8	=
water	80:41	0:0	8	copy_src2
op	80:50	0:0	8	->
water	80:52	0:0	8	data
op	80:56	0:0	8	[
water	80:57	0:0	8	plane
op	80:62	0:0	8	]
decl	81:16	81:67	8	int	cpy_src2_line_size
op	81:39	0:0	8	=
water	81:41	0:0	8	copy_src2
op	81:50	0:0	8	->
water	81:52	0:0	8	linesize
op	81:60	0:0	8	[
water	81:61	0:0	8	plane
op	81:66	0:0	8	]
decl	82:16	82:111	8	int	cpy_src_h
op	82:30	0:0	8	=
water	82:32	0:0	8	(
water	82:33	0:0	8	plane
op	82:39	0:0	8	>
water	82:41	0:0	8	0
op	82:43	0:0	8	&&
water	82:46	0:0	8	plane
op	82:52	0:0	8	<
water	82:54	0:0	8	3
water	82:55	0:0	8	)
water	82:57	0:0	8	?
water	82:59	0:0	8	(
water	82:60	0:0	8	copy_src1
op	82:69	0:0	8	->
water	82:71	0:0	8	height
op	82:78	0:0	8	>>
water	82:81	0:0	8	s
op	82:82	0:0	8	->
water	82:84	0:0	8	vsub
water	82:88	0:0	8	)
water	82:90	0:0	8	:
water	82:92	0:0	8	(
water	82:93	0:0	8	copy_src1
op	82:102	0:0	8	->
water	82:104	0:0	8	height
water	82:110	0:0	8	)
decl	83:16	83:57	8	uint8_t	*cpy_dst_data
op	83:38	0:0	8	=
water	83:40	0:0	8	work
op	83:44	0:0	8	->
water	83:46	0:0	8	data
op	83:50	0:0	8	[
water	83:51	0:0	8	plane
op	83:56	0:0	8	]
decl	84:16	84:61	8	int	cpy_dst_line_size
op	84:38	0:0	8	=
water	84:40	0:0	8	work
op	84:44	0:0	8	->
water	84:46	0:0	8	linesize
op	84:54	0:0	8	[
water	84:55	0:0	8	plane
op	84:60	0:0	8	]
if	85:16	98:16	8	(plane < 1 || plane > 2)
cond	85:20	85:39	9	plane < 1 || plane > 2
water	85:20	0:0	10	plane
op	85:26	0:0	10	<
water	85:27	0:0	10	1
op	85:29	0:0	10	||
water	85:32	0:0	10	plane
op	85:38	0:0	10	>
water	85:39	0:0	10	2
stmts	85:42	98:16	9	
water	85:42	0:0	10	{
for	87:20	97:20	10	(line = 0 ;line < cpy_src_h;line ++)
forinit	87:25	87:33	11	line = 0 ;
water	87:25	0:0	12	line
op	87:30	0:0	12	=
water	87:32	0:0	12	0
water	87:33	0:0	12	;
cond	87:35	87:42	11	line < cpy_src_h
water	87:35	0:0	12	line
op	87:40	0:0	12	<
water	87:42	0:0	12	cpy_src_h
forexpr	87:53	87:57	11	line ++
water	87:53	0:0	12	line
op	87:57	0:0	12	++
stmts	87:61	97:20	11	
water	87:61	0:0	12	{
for	88:24	93:24	12	(pixel = 0 ;pixel < cpy_line_width;pixel ++)
forinit	88:29	88:38	13	pixel = 0 ;
water	88:29	0:0	14	pixel
op	88:35	0:0	14	=
water	88:37	0:0	14	0
water	88:38	0:0	14	;
cond	88:40	88:48	13	pixel < cpy_line_width
water	88:40	0:0	14	pixel
op	88:46	0:0	14	<
water	88:48	0:0	14	cpy_line_width
forexpr	88:64	88:69	13	pixel ++
water	88:64	0:0	14	pixel
op	88:69	0:0	14	++
stmts	88:73	93:24	13	
water	88:73	0:0	14	{
water	92:28	0:0	14	cpy_dst_data
op	92:40	0:0	14	[
water	92:41	0:0	14	pixel
op	92:46	0:0	14	]
op	92:48	0:0	14	=
water	92:50	0:0	14	(
water	92:51	0:0	14	(
water	92:52	0:0	14	cpy_src1_data
op	92:65	0:0	14	[
water	92:66	0:0	14	pixel
op	92:71	0:0	14	]
op	92:73	0:0	14	*
water	92:75	0:0	14	src1_factor
water	92:86	0:0	14	)
op	92:88	0:0	14	+
water	92:90	0:0	14	(
water	92:91	0:0	14	cpy_src2_data
op	92:104	0:0	14	[
water	92:105	0:0	14	pixel
op	92:110	0:0	14	]
op	92:112	0:0	14	*
water	92:114	0:0	14	src2_factor
water	92:125	0:0	14	)
op	92:127	0:0	14	+
water	92:129	0:0	14	128
water	92:132	0:0	14	)
op	92:134	0:0	14	>>
water	92:137	0:0	14	8
water	92:138	0:0	14	;
water	93:24	0:0	14	}
water	94:24	0:0	12	cpy_src1_data
op	94:38	0:0	12	+=
water	94:41	0:0	12	cpy_src1_line_size
water	94:59	0:0	12	;
water	95:24	0:0	12	cpy_src2_data
op	95:38	0:0	12	+=
water	95:41	0:0	12	cpy_src2_line_size
water	95:59	0:0	12	;
water	96:24	0:0	12	cpy_dst_data
op	96:37	0:0	12	+=
water	96:40	0:0	12	cpy_dst_line_size
water	96:57	0:0	12	;
water	97:20	0:0	12	}
water	98:16	0:0	10	}
else	98:18	111:16	8
stmts	98:23	111:16	9	
water	98:23	0:0	10	{
for	100:20	110:20	10	(line = 0 ;line < cpy_src_h;line ++)
forinit	100:25	100:33	11	line = 0 ;
water	100:25	0:0	12	line
op	100:30	0:0	12	=
water	100:32	0:0	12	0
water	100:33	0:0	12	;
cond	100:35	100:42	11	line < cpy_src_h
water	100:35	0:0	12	line
op	100:40	0:0	12	<
water	100:42	0:0	12	cpy_src_h
forexpr	100:53	100:57	11	line ++
water	100:53	0:0	12	line
op	100:57	0:0	12	++
stmts	100:61	110:20	11	
water	100:61	0:0	12	{
for	101:24	106:24	12	(pixel = 0 ;pixel < cpy_line_width;pixel ++)
forinit	101:29	101:38	13	pixel = 0 ;
water	101:29	0:0	14	pixel
op	101:35	0:0	14	=
water	101:37	0:0	14	0
water	101:38	0:0	14	;
cond	101:40	101:48	13	pixel < cpy_line_width
water	101:40	0:0	14	pixel
op	101:46	0:0	14	<
water	101:48	0:0	14	cpy_line_width
forexpr	101:64	101:69	13	pixel ++
water	101:64	0:0	14	pixel
op	101:69	0:0	14	++
stmts	101:73	106:24	13	
water	101:73	0:0	14	{
water	105:28	0:0	14	cpy_dst_data
op	105:40	0:0	14	[
water	105:41	0:0	14	pixel
op	105:46	0:0	14	]
op	105:48	0:0	14	=
water	105:50	0:0	14	(
water	105:51	0:0	14	(
water	105:52	0:0	14	(
water	105:53	0:0	14	cpy_src1_data
op	105:66	0:0	14	[
water	105:67	0:0	14	pixel
op	105:72	0:0	14	]
op	105:74	0:0	14	-
water	105:76	0:0	14	128
water	105:79	0:0	14	)
op	105:81	0:0	14	*
water	105:83	0:0	14	src1_factor
water	105:94	0:0	14	)
op	105:96	0:0	14	+
water	105:98	0:0	14	(
water	105:99	0:0	14	(
water	105:100	0:0	14	cpy_src2_data
op	105:113	0:0	14	[
water	105:114	0:0	14	pixel
op	105:119	0:0	14	]
op	105:121	0:0	14	-
water	105:123	0:0	14	128
water	105:126	0:0	14	)
op	105:128	0:0	14	*
water	105:130	0:0	14	src2_factor
water	105:141	0:0	14	)
op	105:143	0:0	14	+
water	105:145	0:0	14	32896
water	105:150	0:0	14	)
op	105:152	0:0	14	>>
water	105:155	0:0	14	8
water	105:156	0:0	14	;
water	106:24	0:0	14	}
water	107:24	0:0	12	cpy_src1_data
op	107:38	0:0	12	+=
water	107:41	0:0	12	cpy_src1_line_size
water	107:59	0:0	12	;
water	108:24	0:0	12	cpy_src2_data
op	108:38	0:0	12	+=
water	108:41	0:0	12	cpy_src2_line_size
water	108:59	0:0	12	;
water	109:24	0:0	12	cpy_dst_data
op	109:37	0:0	12	+=
water	109:40	0:0	12	cpy_dst_line_size
water	109:57	0:0	12	;
water	110:20	0:0	12	}
water	111:16	0:0	10	}
water	112:12	0:0	8	}
goto	113:12	113:26	6	copy_done
water	113:17	0:0	7	copy_done
water	114:8	0:0	6	}
else	115:8	117:8	4
stmts	115:13	117:8	5	
water	115:13	0:0	6	{
call	116:12	116:73	6	ff_dlog
arg	116:20	116:23	7	ctx
water	116:20	0:0	8	ctx
arg	116:25	116:73	7	"process_work_frame() CUT - DON'T INTERPOLATE\n"
water	116:25	0:0	8	"process_work_frame() CUT - DON'T INTERPOLATE\n"
water	116:74	0:0	6	;
water	117:8	0:0	6	}
water	118:4	0:0	4	}
call	119:4	119:64	2	ff_dlog
arg	119:12	119:15	3	ctx
water	119:12	0:0	4	ctx
arg	119:17	119:64	3	"process_work_frame() COPY to the work frame\n"
water	119:17	0:0	4	"process_work_frame() COPY to the work frame\n"
water	119:65	0:0	2	;
water	121:4	0:0	2	work
op	121:9	0:0	2	=
call	121:11	121:35	2	av_frame_clone
arg	121:26	121:35	3	copy_src1
water	121:26	0:0	4	copy_src1
water	121:36	0:0	2	;
if	122:4	123:30	2	(! work)
cond	122:8	122:9	3	! work
op	122:8	0:0	4	!
water	122:9	0:0	4	work
stmts	123:8	123:30	3	
return	123:8	123:30	4	AVERROR(ENOMEM)
call	123:15	123:29	5	AVERROR
arg	123:23	123:29	6	ENOMEM
water	123:23	0:0	7	ENOMEM
label	124:0	124:9	2	copy_done :
water	125:4	0:0	2	work
op	125:8	0:0	2	->
water	125:10	0:0	2	pts
op	125:14	0:0	2	=
water	125:16	0:0	2	s
op	125:17	0:0	2	->
water	125:19	0:0	2	pts
water	125:22	0:0	2	;
if	127:4	129:4	2	(! s -> flush && ( work_next_pts + s -> average_dest_pts_delta ) < ( s -> srce_pts_dest [ s -> crnt ] + s -> average_srce_pts_dest_delta ))
cond	127:8	127:126	3	! s -> flush && ( work_next_pts + s -> average_dest_pts_delta ) < ( s -> srce_pts_dest [ s -> crnt ] + s -> average_srce_pts_dest_delta )
op	127:8	0:0	4	!
water	127:9	0:0	4	s
op	127:10	0:0	4	->
water	127:12	0:0	4	flush
op	127:18	0:0	4	&&
water	127:21	0:0	4	(
water	127:22	0:0	4	work_next_pts
op	127:36	0:0	4	+
water	127:38	0:0	4	s
op	127:39	0:0	4	->
water	127:41	0:0	4	average_dest_pts_delta
water	127:63	0:0	4	)
op	127:65	0:0	4	<
water	127:67	0:0	4	(
water	127:68	0:0	4	s
op	127:69	0:0	4	->
water	127:71	0:0	4	srce_pts_dest
op	127:84	0:0	4	[
water	127:85	0:0	4	s
op	127:86	0:0	4	->
water	127:88	0:0	4	crnt
op	127:92	0:0	4	]
op	127:94	0:0	4	+
water	127:96	0:0	4	s
op	127:97	0:0	4	->
water	127:99	0:0	4	average_srce_pts_dest_delta
water	127:126	0:0	4	)
stmts	127:129	129:4	3	
water	127:129	0:0	4	{
call	128:8	128:58	4	ff_dlog
arg	128:16	128:19	5	ctx
water	128:16	0:0	6	ctx
arg	128:21	128:58	5	"process_work_frame() REPEAT FRAME\n"
water	128:21	0:0	6	"process_work_frame() REPEAT FRAME\n"
water	128:59	0:0	4	;
water	129:4	0:0	4	}
else	129:6	133:4	2
stmts	129:11	133:4	3	
water	129:11	0:0	4	{
call	130:8	130:79	4	ff_dlog
arg	130:16	130:19	5	ctx
water	130:16	0:0	6	ctx
arg	130:21	130:79	5	"process_work_frame() CONSUME FRAME, move to next frame\n"
water	130:21	0:0	6	"process_work_frame() CONSUME FRAME, move to next frame\n"
water	130:80	0:0	4	;
water	131:8	0:0	4	s
op	131:9	0:0	4	->
water	131:11	0:0	4	pending_srce_frames
op	131:30	0:0	4	--
water	131:32	0:0	4	;
call	132:8	132:23	4	next_source
arg	132:20	132:23	5	ctx
water	132:20	0:0	6	ctx
water	132:24	0:0	4	;
water	133:4	0:0	4	}
call	134:4	134:56	2	ff_dlog
arg	134:12	134:15	3	ctx
water	134:12	0:0	4	ctx
arg	134:17	134:56	3	"process_work_frame() output a frame\n"
water	134:17	0:0	4	"process_work_frame() output a frame\n"
water	134:57	0:0	2	;
water	135:4	0:0	2	s
op	135:5	0:0	2	->
water	135:7	0:0	2	dest_frame_num
op	135:21	0:0	2	++
water	135:23	0:0	2	;
if	136:4	137:32	2	(stop)
cond	136:8	136:8	3	stop
water	136:8	0:0	4	stop
stmts	137:8	137:32	3	
water	137:8	0:0	4	s
op	137:9	0:0	4	->
water	137:11	0:0	4	pending_end_frame
op	137:29	0:0	4	=
water	137:31	0:0	4	0
water	137:32	0:0	4	;
water	138:4	0:0	2	s
op	138:5	0:0	2	->
water	138:7	0:0	2	last_dest_frame_pts
op	138:27	0:0	2	=
water	138:29	0:0	2	work
op	138:33	0:0	2	->
water	138:35	0:0	2	pts
water	138:38	0:0	2	;
return	139:4	139:49	2	ff_filter_frame(ctx->outputs[0],work)
call	139:11	139:48	3	ff_filter_frame
arg	139:27	139:42	4	ctx->outputs[0]
water	139:27	0:0	5	ctx
op	139:30	0:0	5	->
water	139:32	0:0	5	outputs
op	139:39	0:0	5	[
water	139:40	0:0	5	0
op	139:41	0:0	5	]
arg	139:44	139:48	4	work
water	139:44	0:0	5	work
