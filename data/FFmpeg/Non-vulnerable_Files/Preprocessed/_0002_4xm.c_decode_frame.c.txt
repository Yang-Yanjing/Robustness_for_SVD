func	1:0	110:0	0	static int	decode_frame
params	1:23	0:0	1	
param	1:24	1:45	2	AVCodecContext *	avctx
param	1:47	1:57	2	void *	data
param	2:24	2:38	2	int *	got_frame
param	2:40	2:55	2	AVPacket *	avpkt
stmnts	0:0	109:19	1	
decl	4:4	4:39	2	const uint8_t	*buf
op	4:26	0:0	2	=
water	4:28	0:0	2	avpkt
op	4:33	0:0	2	->
water	4:35	0:0	2	data
decl	5:4	5:39	2	int	buf_size
op	5:26	0:0	2	=
water	5:28	0:0	2	avpkt
op	5:33	0:0	2	->
water	5:35	0:0	2	size
water	6:4	0:0	2	FourXContext
op	6:17	0:0	2	*
water	6:18	0:0	2	const
water	6:24	0:0	2	f
op	6:26	0:0	2	=
water	6:28	0:0	2	avctx
op	6:33	0:0	2	->
water	6:35	0:0	2	priv_data
water	6:44	0:0	2	;
decl	7:4	7:32	2	AVFrame	*picture
op	7:26	0:0	2	=
water	7:28	0:0	2	data
decl	8:4	8:37	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:37	2	int	frame_4cc
water	8:20	0:0	2	,
decl	8:4	8:37	2	int	frame_size
water	8:32	0:0	2	,
decl	8:4	8:37	2	int	ret
if	9:4	10:34	2	(buf_size < 20)
cond	9:8	9:19	3	buf_size < 20
water	9:8	0:0	4	buf_size
op	9:17	0:0	4	<
water	9:19	0:0	4	20
stmts	10:8	10:34	3	
return	10:8	10:34	4	AVERROR_INVALIDDATA
water	10:15	0:0	5	AVERROR_INVALIDDATA
call	11:4	11:64	2	av_assert0
arg	11:15	11:64	3	avctx->width%16==0&&avctx->height%16==0
water	11:15	0:0	4	avctx
op	11:20	0:0	4	->
water	11:22	0:0	4	width
op	11:28	0:0	4	%
water	11:30	0:0	4	16
op	11:33	0:0	4	==
water	11:36	0:0	4	0
op	11:38	0:0	4	&&
water	11:41	0:0	4	avctx
op	11:46	0:0	4	->
water	11:48	0:0	4	height
op	11:55	0:0	4	%
water	11:57	0:0	4	16
op	11:60	0:0	4	==
water	11:63	0:0	4	0
water	11:65	0:0	2	;
if	12:4	16:4	2	(buf_size <AV_RL32 (buf + 4 ) + 8)
cond	12:8	12:38	3	buf_size <AV_RL32 (buf + 4 ) + 8
water	12:8	0:0	4	buf_size
op	12:17	0:0	4	<
call	12:19	12:34	4	AV_RL32
arg	12:27	12:34	5	buf+4
water	12:27	0:0	6	buf
op	12:31	0:0	6	+
water	12:33	0:0	6	4
op	12:36	0:0	4	+
water	12:38	0:0	4	8
stmts	12:41	16:4	3	
water	12:41	0:0	4	{
call	13:8	14:41	4	av_log
arg	13:15	13:23	5	f->avctx
water	13:15	0:0	6	f
op	13:16	0:0	6	->
water	13:18	0:0	6	avctx
arg	13:25	13:37	5	AV_LOG_ERROR
water	13:25	0:0	6	AV_LOG_ERROR
arg	13:39	13:69	5	"size mismatch %d %"PRIu32"\n"
water	13:39	0:0	6	"size mismatch %d %"
water	13:59	0:0	6	PRIu32
water	13:65	0:0	6	"\n"
arg	14:15	14:23	5	buf_size
water	14:15	0:0	6	buf_size
arg	14:25	14:41	5	AV_RL32(buf+4)
call	14:25	14:40	6	AV_RL32
arg	14:33	14:40	7	buf+4
water	14:33	0:0	8	buf
op	14:37	0:0	8	+
water	14:39	0:0	8	4
water	14:42	0:0	4	;
return	15:8	15:34	4	AVERROR_INVALIDDATA
water	15:15	0:0	5	AVERROR_INVALIDDATA
water	16:4	0:0	4	}
water	17:4	0:0	2	frame_4cc
op	17:14	0:0	2	=
call	17:16	17:27	2	AV_RL32
arg	17:24	17:27	3	buf
water	17:24	0:0	4	buf
water	17:28	0:0	2	;
if	18:4	71:4	2	(frame_4cc ==AV_RL32 ("cfrm" ))
cond	18:8	18:35	3	frame_4cc ==AV_RL32 ("cfrm" )
water	18:8	0:0	4	frame_4cc
op	18:18	0:0	4	==
call	18:21	18:35	4	AV_RL32
arg	18:29	18:35	5	"cfrm"
water	18:29	0:0	6	"cfrm"
stmts	18:38	71:4	3	
water	18:38	0:0	4	{
decl	19:8	19:33	4	int	free_index
op	19:29	0:0	4	=
op	19:31	0:0	4	-
water	19:32	0:0	4	1
decl	20:8	20:26	4	int	id
water	20:14	0:0	4	,
decl	20:8	20:26	4	int	whole_size
decl	21:8	21:44	4	const int	data_size
op	21:29	0:0	4	=
water	21:31	0:0	4	buf_size
op	21:40	0:0	4	-
water	21:42	0:0	4	20
decl	22:8	22:26	4	CFrameBuffer	*cfrm
if	23:8	26:8	4	(f -> version <= 1)
cond	23:12	23:26	5	f -> version <= 1
water	23:12	0:0	6	f
op	23:13	0:0	6	->
water	23:15	0:0	6	version
op	23:23	0:0	6	<=
water	23:26	0:0	6	1
stmts	23:29	26:8	5	
water	23:29	0:0	6	{
call	24:12	24:77	6	av_log
arg	24:19	24:27	7	f->avctx
water	24:19	0:0	8	f
op	24:20	0:0	8	->
water	24:22	0:0	8	avctx
arg	24:29	24:41	7	AV_LOG_ERROR
water	24:29	0:0	8	AV_LOG_ERROR
arg	24:43	24:65	7	"cfrm in version %d\n"
water	24:43	0:0	8	"cfrm in version %d\n"
arg	24:67	24:77	7	f->version
water	24:67	0:0	8	f
op	24:68	0:0	8	->
water	24:70	0:0	8	version
water	24:78	0:0	6	;
return	25:12	25:38	6	AVERROR_INVALIDDATA
water	25:19	0:0	7	AVERROR_INVALIDDATA
water	26:8	0:0	6	}
water	27:8	0:0	4	id
op	27:19	0:0	4	=
call	27:21	27:37	4	AV_RL32
arg	27:29	27:37	5	buf+12
water	27:29	0:0	6	buf
op	27:33	0:0	6	+
water	27:35	0:0	6	12
water	27:38	0:0	4	;
water	28:8	0:0	4	whole_size
op	28:19	0:0	4	=
call	28:21	28:37	4	AV_RL32
arg	28:29	28:37	5	buf+16
water	28:29	0:0	6	buf
op	28:33	0:0	6	+
water	28:35	0:0	6	16
water	28:38	0:0	4	;
if	29:8	32:8	4	(data_size < 0 || whole_size < 0)
cond	29:12	29:42	5	data_size < 0 || whole_size < 0
water	29:12	0:0	6	data_size
op	29:22	0:0	6	<
water	29:24	0:0	6	0
op	29:26	0:0	6	||
water	29:29	0:0	6	whole_size
op	29:40	0:0	6	<
water	29:42	0:0	6	0
stmts	29:45	32:8	5	
water	29:45	0:0	6	{
call	30:12	30:60	6	av_log
arg	30:19	30:27	7	f->avctx
water	30:19	0:0	8	f
op	30:20	0:0	8	->
water	30:22	0:0	8	avctx
arg	30:29	30:41	7	AV_LOG_ERROR
water	30:29	0:0	8	AV_LOG_ERROR
arg	30:43	30:60	7	"sizes invalid\n"
water	30:43	0:0	8	"sizes invalid\n"
water	30:61	0:0	6	;
return	31:12	31:38	6	AVERROR_INVALIDDATA
water	31:19	0:0	7	AVERROR_INVALIDDATA
water	32:8	0:0	6	}
for	33:8	36:37	4	(i = 0 ;i < CFRAME_BUFFER_COUNT;i ++)
forinit	33:13	33:18	5	i = 0 ;
water	33:13	0:0	6	i
op	33:15	0:0	6	=
water	33:17	0:0	6	0
water	33:18	0:0	6	;
cond	33:20	33:24	5	i < CFRAME_BUFFER_COUNT
water	33:20	0:0	6	i
op	33:22	0:0	6	<
water	33:24	0:0	6	CFRAME_BUFFER_COUNT
forexpr	33:45	33:46	5	i ++
water	33:45	0:0	6	i
op	33:46	0:0	6	++
stmts	34:12	36:37	5	
if	34:12	36:37	6	(f -> cfrm [ i ] . id && f -> cfrm [ i ] . id < avctx -> frame_number)
cond	34:16	34:56	7	f -> cfrm [ i ] . id && f -> cfrm [ i ] . id < avctx -> frame_number
water	34:16	0:0	8	f
op	34:17	0:0	8	->
water	34:19	0:0	8	cfrm
op	34:23	0:0	8	[
water	34:24	0:0	8	i
op	34:25	0:0	8	]
op	34:26	0:0	8	.
water	34:27	0:0	8	id
op	34:30	0:0	8	&&
water	34:33	0:0	8	f
op	34:34	0:0	8	->
water	34:36	0:0	8	cfrm
op	34:40	0:0	8	[
water	34:41	0:0	8	i
op	34:42	0:0	8	]
op	34:43	0:0	8	.
water	34:44	0:0	8	id
op	34:47	0:0	8	<
water	34:49	0:0	8	avctx
op	34:54	0:0	8	->
water	34:56	0:0	8	frame_number
stmts	35:16	36:37	7	
call	35:16	36:36	8	av_log
arg	35:23	35:31	9	f->avctx
water	35:23	0:0	10	f
op	35:24	0:0	10	->
water	35:26	0:0	10	avctx
arg	35:33	35:45	9	AV_LOG_ERROR
water	35:33	0:0	10	AV_LOG_ERROR
arg	35:47	35:66	9	"lost c frame %d\n"
water	35:47	0:0	10	"lost c frame %d\n"
arg	36:23	36:36	9	f->cfrm[i].id
water	36:23	0:0	10	f
op	36:24	0:0	10	->
water	36:26	0:0	10	cfrm
op	36:30	0:0	10	[
water	36:31	0:0	10	i
op	36:32	0:0	10	]
op	36:33	0:0	10	.
water	36:34	0:0	10	id
water	36:37	0:0	8	;
for	37:8	42:8	4	(i = 0 ;i < CFRAME_BUFFER_COUNT;i ++)
forinit	37:13	37:18	5	i = 0 ;
water	37:13	0:0	6	i
op	37:15	0:0	6	=
water	37:17	0:0	6	0
water	37:18	0:0	6	;
cond	37:20	37:24	5	i < CFRAME_BUFFER_COUNT
water	37:20	0:0	6	i
op	37:22	0:0	6	<
water	37:24	0:0	6	CFRAME_BUFFER_COUNT
forexpr	37:45	37:46	5	i ++
water	37:45	0:0	6	i
op	37:46	0:0	6	++
stmts	37:50	42:8	5	
water	37:50	0:0	6	{
if	38:12	39:21	6	(f -> cfrm [ i ] . id == id)
cond	38:16	38:33	7	f -> cfrm [ i ] . id == id
water	38:16	0:0	8	f
op	38:17	0:0	8	->
water	38:19	0:0	8	cfrm
op	38:23	0:0	8	[
water	38:24	0:0	8	i
op	38:25	0:0	8	]
op	38:26	0:0	8	.
water	38:27	0:0	8	id
op	38:30	0:0	8	==
water	38:33	0:0	8	id
stmts	39:16	39:21	7	
break	39:16	39:21	8	
if	40:12	41:30	6	(f -> cfrm [ i ] . size == 0)
cond	40:16	40:35	7	f -> cfrm [ i ] . size == 0
water	40:16	0:0	8	f
op	40:17	0:0	8	->
water	40:19	0:0	8	cfrm
op	40:23	0:0	8	[
water	40:24	0:0	8	i
op	40:25	0:0	8	]
op	40:26	0:0	8	.
water	40:27	0:0	8	size
op	40:32	0:0	8	==
water	40:35	0:0	8	0
stmts	41:16	41:30	7	
water	41:16	0:0	8	free_index
op	41:27	0:0	8	=
water	41:29	0:0	8	i
water	41:30	0:0	8	;
water	42:8	0:0	6	}
if	43:8	46:8	4	(i >= CFRAME_BUFFER_COUNT)
cond	43:12	43:17	5	i >= CFRAME_BUFFER_COUNT
water	43:12	0:0	6	i
op	43:14	0:0	6	>=
water	43:17	0:0	6	CFRAME_BUFFER_COUNT
stmts	43:38	46:8	5	
water	43:38	0:0	6	{
water	44:12	0:0	6	i
op	44:26	0:0	6	=
water	44:28	0:0	6	free_index
water	44:38	0:0	6	;
water	45:12	0:0	6	f
op	45:13	0:0	6	->
water	45:15	0:0	6	cfrm
op	45:19	0:0	6	[
water	45:20	0:0	6	i
op	45:21	0:0	6	]
op	45:22	0:0	6	.
water	45:23	0:0	6	id
op	45:26	0:0	6	=
water	45:28	0:0	6	id
water	45:30	0:0	6	;
water	46:8	0:0	6	}
water	47:8	0:0	4	cfrm
op	47:13	0:0	4	=
op	47:15	0:0	4	&
water	47:16	0:0	4	f
op	47:17	0:0	4	->
water	47:19	0:0	4	cfrm
op	47:23	0:0	4	[
water	47:24	0:0	4	i
op	47:25	0:0	4	]
water	47:26	0:0	4	;
if	48:8	49:38	4	(data_size > UINT_MAX - cfrm -> size - AV_INPUT_BUFFER_PADDING_SIZE)
cond	48:12	48:49	5	data_size > UINT_MAX - cfrm -> size - AV_INPUT_BUFFER_PADDING_SIZE
water	48:12	0:0	6	data_size
op	48:22	0:0	6	>
water	48:24	0:0	6	UINT_MAX
op	48:33	0:0	6	-
water	48:36	0:0	6	cfrm
op	48:40	0:0	6	->
water	48:42	0:0	6	size
op	48:47	0:0	6	-
water	48:49	0:0	6	AV_INPUT_BUFFER_PADDING_SIZE
stmts	49:12	49:38	5	
return	49:12	49:38	6	AVERROR_INVALIDDATA
water	49:19	0:0	7	AVERROR_INVALIDDATA
water	50:8	0:0	4	cfrm
op	50:12	0:0	4	->
water	50:14	0:0	4	data
op	50:19	0:0	4	=
call	50:21	51:90	4	av_fast_realloc
arg	50:37	50:47	5	cfrm->data
water	50:37	0:0	6	cfrm
op	50:41	0:0	6	->
water	50:43	0:0	6	data
arg	50:49	50:70	5	&cfrm->allocated_size
op	50:49	0:0	6	&
water	50:50	0:0	6	cfrm
op	50:54	0:0	6	->
water	50:56	0:0	6	allocated_size
arg	51:37	51:90	5	cfrm->size+data_size+AV_INPUT_BUFFER_PADDING_SIZE
water	51:37	0:0	6	cfrm
op	51:41	0:0	6	->
water	51:43	0:0	6	size
op	51:48	0:0	6	+
water	51:50	0:0	6	data_size
op	51:60	0:0	6	+
water	51:62	0:0	6	AV_INPUT_BUFFER_PADDING_SIZE
water	51:91	0:0	4	;
if	53:8	56:8	4	(! cfrm -> data)
cond	53:12	53:19	5	! cfrm -> data
op	53:12	0:0	6	!
water	53:13	0:0	6	cfrm
op	53:17	0:0	6	->
water	53:19	0:0	6	data
stmts	53:25	56:8	5	
water	53:25	0:0	6	{
call	54:12	54:62	6	av_log
arg	54:19	54:27	7	f->avctx
water	54:19	0:0	8	f
op	54:20	0:0	8	->
water	54:22	0:0	8	avctx
arg	54:29	54:41	7	AV_LOG_ERROR
water	54:29	0:0	8	AV_LOG_ERROR
arg	54:43	54:62	7	"realloc failure\n"
water	54:43	0:0	8	"realloc failure\n"
water	54:63	0:0	6	;
return	55:12	55:34	6	AVERROR(ENOMEM)
call	55:19	55:33	7	AVERROR
arg	55:27	55:33	8	ENOMEM
water	55:27	0:0	9	ENOMEM
water	56:8	0:0	6	}
call	57:8	57:59	4	memcpy
arg	57:15	57:38	5	cfrm->data+cfrm->size
water	57:15	0:0	6	cfrm
op	57:19	0:0	6	->
water	57:21	0:0	6	data
op	57:26	0:0	6	+
water	57:28	0:0	6	cfrm
op	57:32	0:0	6	->
water	57:34	0:0	6	size
arg	57:40	57:48	5	buf+20
water	57:40	0:0	6	buf
op	57:44	0:0	6	+
water	57:46	0:0	6	20
arg	57:50	57:59	5	data_size
water	57:50	0:0	6	data_size
water	57:60	0:0	4	;
water	58:8	0:0	4	cfrm
op	58:12	0:0	4	->
water	58:14	0:0	4	size
op	58:19	0:0	4	+=
water	58:22	0:0	4	data_size
water	58:31	0:0	4	;
if	59:8	69:8	4	(cfrm -> size >= whole_size)
cond	59:12	59:26	5	cfrm -> size >= whole_size
water	59:12	0:0	6	cfrm
op	59:16	0:0	6	->
water	59:18	0:0	6	size
op	59:23	0:0	6	>=
water	59:26	0:0	6	whole_size
stmts	59:38	69:8	5	
water	59:38	0:0	6	{
water	60:12	0:0	6	buf
op	60:23	0:0	6	=
water	60:25	0:0	6	cfrm
op	60:29	0:0	6	->
water	60:31	0:0	6	data
water	60:35	0:0	6	;
water	61:12	0:0	6	frame_size
op	61:23	0:0	6	=
water	61:25	0:0	6	cfrm
op	61:29	0:0	6	->
water	61:31	0:0	6	size
water	61:35	0:0	6	;
if	62:12	64:47	6	(id != avctx -> frame_number)
cond	62:16	62:29	7	id != avctx -> frame_number
water	62:16	0:0	8	id
op	62:19	0:0	8	!=
water	62:22	0:0	8	avctx
op	62:27	0:0	8	->
water	62:29	0:0	8	frame_number
stmts	63:16	64:47	7	
call	63:16	64:46	8	av_log
arg	63:23	63:31	9	f->avctx
water	63:23	0:0	10	f
op	63:24	0:0	10	->
water	63:26	0:0	10	avctx
arg	63:33	63:45	9	AV_LOG_ERROR
water	63:33	0:0	10	AV_LOG_ERROR
arg	63:47	63:75	9	"cframe id mismatch %d %d\n"
water	63:47	0:0	10	"cframe id mismatch %d %d\n"
arg	64:23	64:25	9	id
water	64:23	0:0	10	id
arg	64:27	64:46	9	avctx->frame_number
water	64:27	0:0	10	avctx
op	64:32	0:0	10	->
water	64:34	0:0	10	frame_number
water	64:47	0:0	8	;
if	65:12	66:42	6	(f -> version <= 1)
cond	65:16	65:30	7	f -> version <= 1
water	65:16	0:0	8	f
op	65:17	0:0	8	->
water	65:19	0:0	8	version
op	65:27	0:0	8	<=
water	65:30	0:0	8	1
stmts	66:16	66:42	7	
return	66:16	66:42	8	AVERROR_INVALIDDATA
water	66:23	0:0	9	AVERROR_INVALIDDATA
water	67:12	0:0	6	cfrm
op	67:16	0:0	6	->
water	67:18	0:0	6	size
op	67:23	0:0	6	=
water	67:25	0:0	6	cfrm
op	67:29	0:0	6	->
water	67:31	0:0	6	id
op	67:34	0:0	6	=
water	67:36	0:0	6	0
water	67:37	0:0	6	;
water	68:12	0:0	6	frame_4cc
op	68:23	0:0	6	=
call	68:25	68:39	6	AV_RL32
arg	68:33	68:39	7	"pfrm"
water	68:33	0:0	8	"pfrm"
water	68:40	0:0	6	;
water	69:8	0:0	6	}
else	69:10	70:27	4
stmts	70:12	70:27	5	
return	70:12	70:27	6	buf_size
water	70:19	0:0	7	buf_size
water	71:4	0:0	4	}
else	71:6	74:4	2
stmts	71:11	74:4	3	
water	71:11	0:0	4	{
water	72:8	0:0	4	buf
op	72:19	0:0	4	=
water	72:21	0:0	4	buf
op	72:30	0:0	4	+
water	72:32	0:0	4	12
water	72:34	0:0	4	;
water	73:8	0:0	4	frame_size
op	73:19	0:0	4	=
water	73:21	0:0	4	buf_size
op	73:30	0:0	4	-
water	73:32	0:0	4	12
water	73:34	0:0	4	;
water	74:4	0:0	4	}
if	75:4	76:18	2	(( ret =ff_get_buffer (avctx ,picture ,0 ) ) < 0)
cond	75:8	75:51	3	( ret =ff_get_buffer (avctx ,picture ,0 ) ) < 0
water	75:8	0:0	4	(
water	75:9	0:0	4	ret
op	75:13	0:0	4	=
call	75:15	75:46	4	ff_get_buffer
arg	75:29	75:34	5	avctx
water	75:29	0:0	6	avctx
arg	75:36	75:43	5	picture
water	75:36	0:0	6	picture
arg	75:45	75:46	5	0
water	75:45	0:0	6	0
water	75:47	0:0	4	)
op	75:49	0:0	4	<
water	75:51	0:0	4	0
stmts	76:8	76:18	3	
return	76:8	76:18	4	ret
water	76:15	0:0	5	ret
if	77:4	83:4	2	(frame_4cc ==AV_RL32 ("ifr2" ))
cond	77:8	77:35	3	frame_4cc ==AV_RL32 ("ifr2" )
water	77:8	0:0	4	frame_4cc
op	77:18	0:0	4	==
call	77:21	77:35	4	AV_RL32
arg	77:29	77:35	5	"ifr2"
water	77:29	0:0	6	"ifr2"
stmts	77:38	83:4	3	
water	77:38	0:0	4	{
water	78:8	0:0	4	picture
op	78:15	0:0	4	->
water	78:17	0:0	4	pict_type
op	78:27	0:0	4	=
water	78:29	0:0	4	AV_PICTURE_TYPE_I
water	78:46	0:0	4	;
if	79:8	82:8	4	(( ret =decode_i2_frame (f ,buf - 4 ,frame_size + 4 ) ) < 0)
cond	79:12	79:66	5	( ret =decode_i2_frame (f ,buf - 4 ,frame_size + 4 ) ) < 0
water	79:12	0:0	6	(
water	79:13	0:0	6	ret
op	79:17	0:0	6	=
call	79:19	79:61	6	decode_i2_frame
arg	79:35	79:36	7	f
water	79:35	0:0	8	f
arg	79:38	79:45	7	buf-4
water	79:38	0:0	8	buf
op	79:42	0:0	8	-
water	79:44	0:0	8	4
arg	79:47	79:61	7	frame_size+4
water	79:47	0:0	8	frame_size
op	79:58	0:0	8	+
water	79:60	0:0	8	4
water	79:62	0:0	6	)
op	79:64	0:0	6	<
water	79:66	0:0	6	0
stmts	79:69	82:8	5	
water	79:69	0:0	6	{
call	80:12	80:69	6	av_log
arg	80:19	80:27	7	f->avctx
water	80:19	0:0	8	f
op	80:20	0:0	8	->
water	80:22	0:0	8	avctx
arg	80:29	80:41	7	AV_LOG_ERROR
water	80:29	0:0	8	AV_LOG_ERROR
arg	80:43	80:69	7	"decode i2 frame failed\n"
water	80:43	0:0	8	"decode i2 frame failed\n"
water	80:70	0:0	6	;
return	81:12	81:22	6	ret
water	81:19	0:0	7	ret
water	82:8	0:0	6	}
water	83:4	0:0	4	}
else	83:6	89:4	2
stmts	83:11	89:4	3	
if	83:11	89:4	4	(frame_4cc ==AV_RL32 ("ifrm" ))
cond	83:15	83:42	5	frame_4cc ==AV_RL32 ("ifrm" )
water	83:15	0:0	6	frame_4cc
op	83:25	0:0	6	==
call	83:28	83:42	6	AV_RL32
arg	83:36	83:42	7	"ifrm"
water	83:36	0:0	8	"ifrm"
stmts	83:45	89:4	5	
water	83:45	0:0	6	{
water	84:8	0:0	6	picture
op	84:15	0:0	6	->
water	84:17	0:0	6	pict_type
op	84:27	0:0	6	=
water	84:29	0:0	6	AV_PICTURE_TYPE_I
water	84:46	0:0	6	;
if	85:8	88:8	6	(( ret =decode_i_frame (f ,buf ,frame_size ) ) < 0)
cond	85:12	85:57	7	( ret =decode_i_frame (f ,buf ,frame_size ) ) < 0
water	85:12	0:0	8	(
water	85:13	0:0	8	ret
op	85:17	0:0	8	=
call	85:19	85:52	8	decode_i_frame
arg	85:34	85:35	9	f
water	85:34	0:0	10	f
arg	85:37	85:40	9	buf
water	85:37	0:0	10	buf
arg	85:42	85:52	9	frame_size
water	85:42	0:0	10	frame_size
water	85:53	0:0	8	)
op	85:55	0:0	8	<
water	85:57	0:0	8	0
stmts	85:60	88:8	7	
water	85:60	0:0	8	{
call	86:12	86:68	8	av_log
arg	86:19	86:27	9	f->avctx
water	86:19	0:0	10	f
op	86:20	0:0	10	->
water	86:22	0:0	10	avctx
arg	86:29	86:41	9	AV_LOG_ERROR
water	86:29	0:0	10	AV_LOG_ERROR
arg	86:43	86:68	9	"decode i frame failed\n"
water	86:43	0:0	10	"decode i frame failed\n"
water	86:69	0:0	8	;
return	87:12	87:22	8	ret
water	87:19	0:0	9	ret
water	88:8	0:0	8	}
water	89:4	0:0	6	}
else	89:6	95:4	2
stmts	89:11	95:4	3	
if	89:11	95:4	4	(frame_4cc ==AV_RL32 ("pfrm" ) || frame_4cc ==AV_RL32 ("pfr2" ))
cond	89:15	89:74	5	frame_4cc ==AV_RL32 ("pfrm" ) || frame_4cc ==AV_RL32 ("pfr2" )
water	89:15	0:0	6	frame_4cc
op	89:25	0:0	6	==
call	89:28	89:42	6	AV_RL32
arg	89:36	89:42	7	"pfrm"
water	89:36	0:0	8	"pfrm"
op	89:44	0:0	6	||
water	89:47	0:0	6	frame_4cc
op	89:57	0:0	6	==
call	89:60	89:74	6	AV_RL32
arg	89:68	89:74	7	"pfr2"
water	89:68	0:0	8	"pfr2"
stmts	89:77	95:4	5	
water	89:77	0:0	6	{
water	90:8	0:0	6	picture
op	90:15	0:0	6	->
water	90:17	0:0	6	pict_type
op	90:27	0:0	6	=
water	90:29	0:0	6	AV_PICTURE_TYPE_P
water	90:46	0:0	6	;
if	91:8	94:8	6	(( ret =decode_p_frame (f ,buf ,frame_size ) ) < 0)
cond	91:12	91:57	7	( ret =decode_p_frame (f ,buf ,frame_size ) ) < 0
water	91:12	0:0	8	(
water	91:13	0:0	8	ret
op	91:17	0:0	8	=
call	91:19	91:52	8	decode_p_frame
arg	91:34	91:35	9	f
water	91:34	0:0	10	f
arg	91:37	91:40	9	buf
water	91:37	0:0	10	buf
arg	91:42	91:52	9	frame_size
water	91:42	0:0	10	frame_size
water	91:53	0:0	8	)
op	91:55	0:0	8	<
water	91:57	0:0	8	0
stmts	91:60	94:8	7	
water	91:60	0:0	8	{
call	92:12	92:68	8	av_log
arg	92:19	92:27	9	f->avctx
water	92:19	0:0	10	f
op	92:20	0:0	10	->
water	92:22	0:0	10	avctx
arg	92:29	92:41	9	AV_LOG_ERROR
water	92:29	0:0	10	AV_LOG_ERROR
arg	92:43	92:68	9	"decode p frame failed\n"
water	92:43	0:0	10	"decode p frame failed\n"
water	92:69	0:0	8	;
return	93:12	93:22	8	ret
water	93:19	0:0	9	ret
water	94:8	0:0	8	}
water	95:4	0:0	6	}
else	95:6	98:4	2
stmts	95:11	98:4	3	
if	95:11	98:4	4	(frame_4cc ==AV_RL32 ("snd_" ))
cond	95:15	95:42	5	frame_4cc ==AV_RL32 ("snd_" )
water	95:15	0:0	6	frame_4cc
op	95:25	0:0	6	==
call	95:28	95:42	6	AV_RL32
arg	95:36	95:42	7	"snd_"
water	95:36	0:0	8	"snd_"
stmts	95:45	98:4	5	
water	95:45	0:0	6	{
call	96:8	97:23	6	av_log
arg	96:15	96:20	7	avctx
water	96:15	0:0	8	avctx
arg	96:22	96:34	7	AV_LOG_ERROR
water	96:22	0:0	8	AV_LOG_ERROR
arg	96:36	96:69	7	"ignoring snd_ chunk length:%d\n"
water	96:36	0:0	8	"ignoring snd_ chunk length:%d\n"
arg	97:15	97:23	7	buf_size
water	97:15	0:0	8	buf_size
water	97:24	0:0	6	;
water	98:4	0:0	6	}
else	98:6	101:4	2
stmts	98:11	101:4	3	
water	98:11	0:0	4	{
call	99:8	100:23	4	av_log
arg	99:15	99:20	5	avctx
water	99:15	0:0	6	avctx
arg	99:22	99:34	5	AV_LOG_ERROR
water	99:22	0:0	6	AV_LOG_ERROR
arg	99:36	99:72	5	"ignoring unknown chunk length:%d\n"
water	99:36	0:0	6	"ignoring unknown chunk length:%d\n"
arg	100:15	100:23	5	buf_size
water	100:15	0:0	6	buf_size
water	100:24	0:0	4	;
water	101:4	0:0	4	}
water	102:4	0:0	2	picture
op	102:11	0:0	2	->
water	102:13	0:0	2	key_frame
op	102:23	0:0	2	=
water	102:25	0:0	2	picture
op	102:32	0:0	2	->
water	102:34	0:0	2	pict_type
op	102:44	0:0	2	==
water	102:47	0:0	2	AV_PICTURE_TYPE_I
water	102:64	0:0	2	;
call	103:4	105:55	2	av_image_copy_plane
arg	103:24	103:40	3	picture->data[0]
water	103:24	0:0	4	picture
op	103:31	0:0	4	->
water	103:33	0:0	4	data
op	103:37	0:0	4	[
water	103:38	0:0	4	0
op	103:39	0:0	4	]
arg	103:42	103:62	3	picture->linesize[0]
water	103:42	0:0	4	picture
op	103:49	0:0	4	->
water	103:51	0:0	4	linesize
op	103:59	0:0	4	[
water	103:60	0:0	4	0
op	103:61	0:0	4	]
arg	104:24	104:55	3	(constuint8_t*)f->frame_buffer
water	104:24	0:0	4	(
water	104:25	0:0	4	const
water	104:31	0:0	4	uint8_t
op	104:38	0:0	4	*
water	104:39	0:0	4	)
water	104:40	0:0	4	f
op	104:41	0:0	4	->
water	104:43	0:0	4	frame_buffer
arg	104:58	104:74	3	avctx->width*2
water	104:58	0:0	4	avctx
op	104:63	0:0	4	->
water	104:65	0:0	4	width
op	104:71	0:0	4	*
water	104:73	0:0	4	2
arg	105:24	105:40	3	avctx->width*2
water	105:24	0:0	4	avctx
op	105:29	0:0	4	->
water	105:31	0:0	4	width
op	105:37	0:0	4	*
water	105:39	0:0	4	2
arg	105:42	105:55	3	avctx->height
water	105:42	0:0	4	avctx
op	105:47	0:0	4	->
water	105:49	0:0	4	height
water	105:56	0:0	2	;
call	106:4	106:60	2	FFSWAP
arg	106:11	106:21	3	uint16_t*
water	106:11	0:0	4	uint16_t
op	106:20	0:0	4	*
arg	106:23	106:38	3	f->frame_buffer
water	106:23	0:0	4	f
op	106:24	0:0	4	->
water	106:26	0:0	4	frame_buffer
arg	106:40	106:60	3	f->last_frame_buffer
water	106:40	0:0	4	f
op	106:41	0:0	4	->
water	106:43	0:0	4	last_frame_buffer
water	106:61	0:0	2	;
op	107:4	0:0	2	*
water	107:5	0:0	2	got_frame
op	107:15	0:0	2	=
water	107:17	0:0	2	1
water	107:18	0:0	2	;
call	108:4	108:11	2	emms_c
water	108:12	0:0	2	;
return	109:4	109:19	2	buf_size
water	109:11	0:0	3	buf_size
