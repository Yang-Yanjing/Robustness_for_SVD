func	1:0	175:0	0	static OutputStream *	new_video_stream
params	1:37	0:0	1	
param	1:38	1:55	2	OptionsContext *	o
param	1:57	1:76	2	AVFormatContext *	oc
param	1:78	1:94	2	int	source_index
stmnts	0:0	174:14	1	
decl	3:4	3:16	2	AVStream	*st
decl	4:4	4:21	2	OutputStream	*ost
decl	5:4	5:29	2	AVCodecContext	*video_enc
decl	6:4	6:55	2	char	*frame_rate
op	6:21	0:0	2	=
water	6:23	0:0	2	NULL
water	6:27	0:0	2	,
decl	6:4	6:55	2	char	*frame_aspect_ratio
op	6:49	0:0	2	=
water	6:51	0:0	2	NULL
water	7:4	0:0	2	ost
op	7:8	0:0	2	=
call	7:10	7:67	2	new_output_stream
arg	7:28	7:29	3	o
water	7:28	0:0	4	o
arg	7:31	7:33	3	oc
water	7:31	0:0	4	oc
arg	7:35	7:53	3	AVMEDIA_TYPE_VIDEO
water	7:35	0:0	4	AVMEDIA_TYPE_VIDEO
arg	7:55	7:67	3	source_index
water	7:55	0:0	4	source_index
water	7:68	0:0	2	;
water	8:4	0:0	2	st
op	8:8	0:0	2	=
water	8:10	0:0	2	ost
op	8:13	0:0	2	->
water	8:15	0:0	2	st
water	8:17	0:0	2	;
water	9:4	0:0	2	video_enc
op	9:14	0:0	2	=
water	9:16	0:0	2	ost
op	9:19	0:0	2	->
water	9:21	0:0	2	enc_ctx
water	9:28	0:0	2	;
call	10:4	10:61	2	MATCH_PER_STREAM_OPT
arg	10:25	10:36	3	frame_rates
water	10:25	0:0	4	frame_rates
arg	10:38	10:41	3	str
water	10:38	0:0	4	str
arg	10:43	10:53	3	frame_rate
water	10:43	0:0	4	frame_rate
arg	10:55	10:57	3	oc
water	10:55	0:0	4	oc
arg	10:59	10:61	3	st
water	10:59	0:0	4	st
water	10:62	0:0	2	;
if	11:4	14:4	2	(frame_rate &&av_parse_video_rate (& ost -> frame_rate ,frame_rate ) < 0)
cond	11:8	11:74	3	frame_rate &&av_parse_video_rate (& ost -> frame_rate ,frame_rate ) < 0
water	11:8	0:0	4	frame_rate
op	11:19	0:0	4	&&
call	11:22	11:70	4	av_parse_video_rate
arg	11:42	11:58	5	&ost->frame_rate
op	11:42	0:0	6	&
water	11:43	0:0	6	ost
op	11:46	0:0	6	->
water	11:48	0:0	6	frame_rate
arg	11:60	11:70	5	frame_rate
water	11:60	0:0	6	frame_rate
op	11:72	0:0	4	<
water	11:74	0:0	4	0
stmts	11:77	14:4	3	
water	11:77	0:0	4	{
call	12:8	12:78	4	av_log
arg	12:15	12:19	5	NULL
water	12:15	0:0	6	NULL
arg	12:21	12:33	5	AV_LOG_FATAL
water	12:21	0:0	6	AV_LOG_FATAL
arg	12:35	12:66	5	"Invalid framerate value: %s\n"
water	12:35	0:0	6	"Invalid framerate value: %s\n"
arg	12:68	12:78	5	frame_rate
water	12:68	0:0	6	frame_rate
water	12:79	0:0	4	;
call	13:8	13:22	4	exit_program
arg	13:21	13:22	5	1
water	13:21	0:0	6	1
water	13:23	0:0	4	;
water	14:4	0:0	4	}
if	15:4	16:94	2	(frame_rate && video_sync_method == VSYNC_PASSTHROUGH)
cond	15:8	15:43	3	frame_rate && video_sync_method == VSYNC_PASSTHROUGH
water	15:8	0:0	4	frame_rate
op	15:19	0:0	4	&&
water	15:22	0:0	4	video_sync_method
op	15:40	0:0	4	==
water	15:43	0:0	4	VSYNC_PASSTHROUGH
stmts	16:8	16:94	3	
call	16:8	16:93	4	av_log
arg	16:15	16:19	5	NULL
water	16:15	0:0	6	NULL
arg	16:21	16:33	5	AV_LOG_ERROR
water	16:21	0:0	6	AV_LOG_ERROR
arg	16:35	16:93	5	"Using -vsync 0 and -r can produce invalid output files\n"
water	16:35	0:0	6	"Using -vsync 0 and -r can produce invalid output files\n"
water	16:94	0:0	4	;
call	17:4	17:77	2	MATCH_PER_STREAM_OPT
arg	17:25	17:44	3	frame_aspect_ratios
water	17:25	0:0	4	frame_aspect_ratios
arg	17:46	17:49	3	str
water	17:46	0:0	4	str
arg	17:51	17:69	3	frame_aspect_ratio
water	17:51	0:0	4	frame_aspect_ratio
arg	17:71	17:73	3	oc
water	17:71	0:0	4	oc
arg	17:75	17:77	3	st
water	17:75	0:0	4	st
water	17:78	0:0	2	;
if	18:4	26:4	2	(frame_aspect_ratio)
cond	18:8	18:8	3	frame_aspect_ratio
water	18:8	0:0	4	frame_aspect_ratio
stmts	18:28	26:4	3	
water	18:28	0:0	4	{
decl	19:8	19:20	4	AVRational	q
if	20:8	24:8	4	(av_parse_ratio (& q ,frame_aspect_ratio ,255 ,0 ,NULL ) < 0 || q . num <= 0 || q . den <= 0)
cond	20:12	21:35	5	av_parse_ratio (& q ,frame_aspect_ratio ,255 ,0 ,NULL ) < 0 || q . num <= 0 || q . den <= 0
call	20:12	20:63	6	av_parse_ratio
arg	20:27	20:29	7	&q
op	20:27	0:0	8	&
water	20:28	0:0	8	q
arg	20:31	20:49	7	frame_aspect_ratio
water	20:31	0:0	8	frame_aspect_ratio
arg	20:51	20:54	7	255
water	20:51	0:0	8	255
arg	20:56	20:57	7	0
water	20:56	0:0	8	0
arg	20:59	20:63	7	NULL
water	20:59	0:0	8	NULL
op	20:65	0:0	6	<
water	20:67	0:0	6	0
op	20:69	0:0	6	||
water	21:12	0:0	6	q
op	21:13	0:0	6	.
water	21:14	0:0	6	num
op	21:18	0:0	6	<=
water	21:21	0:0	6	0
op	21:23	0:0	6	||
water	21:26	0:0	6	q
op	21:27	0:0	6	.
water	21:28	0:0	6	den
op	21:32	0:0	6	<=
water	21:35	0:0	6	0
stmts	21:38	24:8	5	
water	21:38	0:0	6	{
call	22:12	22:87	6	av_log
arg	22:19	22:23	7	NULL
water	22:19	0:0	8	NULL
arg	22:25	22:37	7	AV_LOG_FATAL
water	22:25	0:0	8	AV_LOG_FATAL
arg	22:39	22:67	7	"Invalid aspect ratio: %s\n"
water	22:39	0:0	8	"Invalid aspect ratio: %s\n"
arg	22:69	22:87	7	frame_aspect_ratio
water	22:69	0:0	8	frame_aspect_ratio
water	22:88	0:0	6	;
call	23:12	23:26	6	exit_program
arg	23:25	23:26	7	1
water	23:25	0:0	8	1
water	23:27	0:0	6	;
water	24:8	0:0	6	}
water	25:8	0:0	4	ost
op	25:11	0:0	4	->
water	25:13	0:0	4	frame_aspect_ratio
op	25:32	0:0	4	=
water	25:34	0:0	4	q
water	25:35	0:0	4	;
water	26:4	0:0	4	}
call	27:4	27:73	2	MATCH_PER_STREAM_OPT
arg	27:25	27:39	3	filter_scripts
water	27:25	0:0	4	filter_scripts
arg	27:41	27:44	3	str
water	27:41	0:0	4	str
arg	27:46	27:65	3	ost->filters_script
water	27:46	0:0	4	ost
op	27:49	0:0	4	->
water	27:51	0:0	4	filters_script
arg	27:67	27:69	3	oc
water	27:67	0:0	4	oc
arg	27:71	27:73	3	st
water	27:71	0:0	4	st
water	27:74	0:0	2	;
call	28:4	28:73	2	MATCH_PER_STREAM_OPT
arg	28:25	28:32	3	filters
water	28:25	0:0	4	filters
arg	28:41	28:44	3	str
water	28:41	0:0	4	str
arg	28:46	28:58	3	ost->filters
water	28:46	0:0	4	ost
op	28:49	0:0	4	->
water	28:51	0:0	4	filters
arg	28:67	28:69	3	oc
water	28:67	0:0	4	oc
arg	28:71	28:73	3	st
water	28:71	0:0	4	st
water	28:74	0:0	2	;
if	29:4	169:4	2	(! ost -> stream_copy)
cond	29:8	29:14	3	! ost -> stream_copy
op	29:8	0:0	4	!
water	29:9	0:0	4	ost
op	29:12	0:0	4	->
water	29:14	0:0	4	stream_copy
stmts	29:27	169:4	3	
water	29:27	0:0	4	{
decl	30:8	30:28	4	const char	*p
op	30:22	0:0	4	=
water	30:24	0:0	4	NULL
decl	31:8	31:31	4	char	*frame_size
op	31:25	0:0	4	=
water	31:27	0:0	4	NULL
decl	32:8	32:34	4	char	*frame_pix_fmt
op	32:28	0:0	4	=
water	32:30	0:0	4	NULL
decl	33:8	33:55	4	char	*intra_matrix
op	33:27	0:0	4	=
water	33:29	0:0	4	NULL
water	33:33	0:0	4	,
decl	33:8	33:55	4	char	*inter_matrix
op	33:49	0:0	4	=
water	33:51	0:0	4	NULL
decl	34:8	34:40	4	char	*chroma_intra_matrix
op	34:34	0:0	4	=
water	34:36	0:0	4	NULL
decl	35:8	35:23	4	int	do_pass
op	35:20	0:0	4	=
water	35:22	0:0	4	0
decl	36:8	36:13	4	int	i
call	37:8	37:65	4	MATCH_PER_STREAM_OPT
arg	37:29	37:40	5	frame_sizes
water	37:29	0:0	6	frame_sizes
arg	37:42	37:45	5	str
water	37:42	0:0	6	str
arg	37:47	37:57	5	frame_size
water	37:47	0:0	6	frame_size
arg	37:59	37:61	5	oc
water	37:59	0:0	6	oc
arg	37:63	37:65	5	st
water	37:63	0:0	6	st
water	37:66	0:0	4	;
if	38:8	41:8	4	(frame_size &&av_parse_video_size (& video_enc -> width ,& video_enc -> height ,frame_size ) < 0)
cond	38:12	38:99	5	frame_size &&av_parse_video_size (& video_enc -> width ,& video_enc -> height ,frame_size ) < 0
water	38:12	0:0	6	frame_size
op	38:23	0:0	6	&&
call	38:26	38:95	6	av_parse_video_size
arg	38:46	38:63	7	&video_enc->width
op	38:46	0:0	8	&
water	38:47	0:0	8	video_enc
op	38:56	0:0	8	->
water	38:58	0:0	8	width
arg	38:65	38:83	7	&video_enc->height
op	38:65	0:0	8	&
water	38:66	0:0	8	video_enc
op	38:75	0:0	8	->
water	38:77	0:0	8	height
arg	38:85	38:95	7	frame_size
water	38:85	0:0	8	frame_size
op	38:97	0:0	6	<
water	38:99	0:0	6	0
stmts	38:102	41:8	5	
water	38:102	0:0	6	{
call	39:12	39:78	6	av_log
arg	39:19	39:23	7	NULL
water	39:19	0:0	8	NULL
arg	39:25	39:37	7	AV_LOG_FATAL
water	39:25	0:0	8	AV_LOG_FATAL
arg	39:39	39:66	7	"Invalid frame size: %s.\n"
water	39:39	0:0	8	"Invalid frame size: %s.\n"
arg	39:68	39:78	7	frame_size
water	39:68	0:0	8	frame_size
water	39:79	0:0	6	;
call	40:12	40:26	6	exit_program
arg	40:25	40:26	7	1
water	40:25	0:0	8	1
water	40:27	0:0	6	;
water	41:8	0:0	6	}
water	42:8	0:0	4	video_enc
op	42:17	0:0	4	->
water	42:19	0:0	4	bits_per_raw_sample
op	42:39	0:0	4	=
water	42:41	0:0	4	frame_bits_per_raw_sample
water	42:66	0:0	4	;
call	43:8	43:71	4	MATCH_PER_STREAM_OPT
arg	43:29	43:43	5	frame_pix_fmts
water	43:29	0:0	6	frame_pix_fmts
arg	43:45	43:48	5	str
water	43:45	0:0	6	str
arg	43:50	43:63	5	frame_pix_fmt
water	43:50	0:0	6	frame_pix_fmt
arg	43:65	43:67	5	oc
water	43:65	0:0	6	oc
arg	43:69	43:71	5	st
water	43:69	0:0	6	st
water	43:72	0:0	4	;
if	44:8	48:8	4	(frame_pix_fmt && * frame_pix_fmt == '+')
cond	44:12	44:47	5	frame_pix_fmt && * frame_pix_fmt == '+'
water	44:12	0:0	6	frame_pix_fmt
op	44:26	0:0	6	&&
op	44:29	0:0	6	*
water	44:30	0:0	6	frame_pix_fmt
op	44:44	0:0	6	==
water	44:47	0:0	6	'+'
stmts	44:52	48:8	5	
water	44:52	0:0	6	{
water	45:12	0:0	6	ost
op	45:15	0:0	6	->
water	45:17	0:0	6	keep_pix_fmt
op	45:30	0:0	6	=
water	45:32	0:0	6	1
water	45:33	0:0	6	;
if	46:12	47:36	6	(! * ++ frame_pix_fmt)
cond	46:16	46:20	7	! * ++ frame_pix_fmt
op	46:16	0:0	8	!
op	46:17	0:0	8	*
op	46:18	0:0	8	++
water	46:20	0:0	8	frame_pix_fmt
stmts	47:16	47:36	7	
water	47:16	0:0	8	frame_pix_fmt
op	47:30	0:0	8	=
water	47:32	0:0	8	NULL
water	47:36	0:0	8	;
water	48:8	0:0	6	}
if	49:8	52:8	4	(frame_pix_fmt && ( video_enc -> pix_fmt =av_get_pix_fmt (frame_pix_fmt ) ) == AV_PIX_FMT_NONE)
cond	49:12	49:85	5	frame_pix_fmt && ( video_enc -> pix_fmt =av_get_pix_fmt (frame_pix_fmt ) ) == AV_PIX_FMT_NONE
water	49:12	0:0	6	frame_pix_fmt
op	49:26	0:0	6	&&
water	49:29	0:0	6	(
water	49:30	0:0	6	video_enc
op	49:39	0:0	6	->
water	49:41	0:0	6	pix_fmt
op	49:49	0:0	6	=
call	49:51	49:79	6	av_get_pix_fmt
arg	49:66	49:79	7	frame_pix_fmt
water	49:66	0:0	8	frame_pix_fmt
water	49:80	0:0	6	)
op	49:82	0:0	6	==
water	49:85	0:0	6	AV_PIX_FMT_NONE
stmts	49:102	52:8	5	
water	49:102	0:0	6	{
call	50:12	50:93	6	av_log
arg	50:19	50:23	7	NULL
water	50:19	0:0	8	NULL
arg	50:25	50:37	7	AV_LOG_FATAL
water	50:25	0:0	8	AV_LOG_FATAL
arg	50:39	50:78	7	"Unknown pixel format requested: %s.\n"
water	50:39	0:0	8	"Unknown pixel format requested: %s.\n"
arg	50:80	50:93	7	frame_pix_fmt
water	50:80	0:0	8	frame_pix_fmt
water	50:94	0:0	6	;
call	51:12	51:26	6	exit_program
arg	51:25	51:26	7	1
water	51:25	0:0	8	1
water	51:27	0:0	6	;
water	52:8	0:0	6	}
water	53:8	0:0	4	st
op	53:10	0:0	4	->
water	53:12	0:0	4	sample_aspect_ratio
op	53:32	0:0	4	=
water	53:34	0:0	4	video_enc
op	53:43	0:0	4	->
water	53:45	0:0	4	sample_aspect_ratio
water	53:64	0:0	4	;
if	54:8	55:35	4	(intra_only)
cond	54:12	54:12	5	intra_only
water	54:12	0:0	6	intra_only
stmts	55:12	55:35	5	
water	55:12	0:0	6	video_enc
op	55:21	0:0	6	->
water	55:23	0:0	6	gop_size
op	55:32	0:0	6	=
water	55:34	0:0	6	0
water	55:35	0:0	6	;
call	56:8	56:70	4	MATCH_PER_STREAM_OPT
arg	56:29	56:43	5	intra_matrices
water	56:29	0:0	6	intra_matrices
arg	56:45	56:48	5	str
water	56:45	0:0	6	str
arg	56:50	56:62	5	intra_matrix
water	56:50	0:0	6	intra_matrix
arg	56:64	56:66	5	oc
water	56:64	0:0	6	oc
arg	56:68	56:70	5	st
water	56:68	0:0	6	st
water	56:71	0:0	4	;
if	57:8	63:8	4	(intra_matrix)
cond	57:12	57:12	5	intra_matrix
water	57:12	0:0	6	intra_matrix
stmts	57:26	63:8	5	
water	57:26	0:0	6	{
if	58:12	61:12	6	(! ( video_enc -> intra_matrix =av_mallocz (sizeof ( * video_enc -> intra_matrix ) * 64 ) ))
cond	58:16	58:93	7	! ( video_enc -> intra_matrix =av_mallocz (sizeof ( * video_enc -> intra_matrix ) * 64 ) )
op	58:16	0:0	8	!
water	58:17	0:0	8	(
water	58:18	0:0	8	video_enc
op	58:27	0:0	8	->
water	58:29	0:0	8	intra_matrix
op	58:42	0:0	8	=
call	58:44	58:92	8	av_mallocz
arg	58:55	58:92	9	sizeof(*video_enc->intra_matrix)*64
op	58:55	0:0	10	sizeof
water	58:61	0:0	10	(
op	58:62	0:0	10	*
water	58:63	0:0	10	video_enc
op	58:72	0:0	10	->
water	58:74	0:0	10	intra_matrix
water	58:86	0:0	10	)
op	58:88	0:0	10	*
water	58:90	0:0	10	64
water	58:93	0:0	8	)
stmts	58:96	61:12	7	
water	58:96	0:0	8	{
call	59:16	59:90	8	av_log
arg	59:23	59:27	9	NULL
water	59:23	0:0	10	NULL
arg	59:29	59:41	9	AV_LOG_FATAL
water	59:29	0:0	10	AV_LOG_FATAL
arg	59:43	59:90	9	"Could not allocate memory for intra matrix.\n"
water	59:43	0:0	10	"Could not allocate memory for intra matrix.\n"
water	59:91	0:0	8	;
call	60:16	60:30	8	exit_program
arg	60:29	60:30	9	1
water	60:29	0:0	10	1
water	60:31	0:0	8	;
water	61:12	0:0	8	}
call	62:12	62:69	6	parse_matrix_coeffs
arg	62:32	62:55	7	video_enc->intra_matrix
water	62:32	0:0	8	video_enc
op	62:41	0:0	8	->
water	62:43	0:0	8	intra_matrix
arg	62:57	62:69	7	intra_matrix
water	62:57	0:0	8	intra_matrix
water	62:70	0:0	6	;
water	63:8	0:0	6	}
call	64:8	64:84	4	MATCH_PER_STREAM_OPT
arg	64:29	64:50	5	chroma_intra_matrices
water	64:29	0:0	6	chroma_intra_matrices
arg	64:52	64:55	5	str
water	64:52	0:0	6	str
arg	64:57	64:76	5	chroma_intra_matrix
water	64:57	0:0	6	chroma_intra_matrix
arg	64:78	64:80	5	oc
water	64:78	0:0	6	oc
arg	64:82	64:84	5	st
water	64:82	0:0	6	st
water	64:85	0:0	4	;
if	65:8	73:8	4	(chroma_intra_matrix)
cond	65:12	65:12	5	chroma_intra_matrix
water	65:12	0:0	6	chroma_intra_matrix
stmts	65:33	73:8	5	
water	65:33	0:0	6	{
decl	66:12	66:82	6	uint16_t	*p
op	66:24	0:0	6	=
call	66:26	66:81	7	av_mallocz
arg	66:37	66:81	8	sizeof(*video_enc->chroma_intra_matrix)*64
op	66:37	0:0	9	sizeof
water	66:43	0:0	9	(
op	66:44	0:0	9	*
water	66:45	0:0	9	video_enc
op	66:54	0:0	9	->
water	66:56	0:0	9	chroma_intra_matrix
water	66:75	0:0	9	)
op	66:77	0:0	9	*
water	66:79	0:0	9	64
if	67:12	70:12	6	(! p)
cond	67:16	67:17	7	! p
op	67:16	0:0	8	!
water	67:17	0:0	8	p
stmts	67:20	70:12	7	
water	67:20	0:0	8	{
call	68:16	68:90	8	av_log
arg	68:23	68:27	9	NULL
water	68:23	0:0	10	NULL
arg	68:29	68:41	9	AV_LOG_FATAL
water	68:29	0:0	10	AV_LOG_FATAL
arg	68:43	68:90	9	"Could not allocate memory for intra matrix.\n"
water	68:43	0:0	10	"Could not allocate memory for intra matrix.\n"
water	68:91	0:0	8	;
call	69:16	69:30	8	exit_program
arg	69:29	69:30	9	1
water	69:29	0:0	10	1
water	69:31	0:0	8	;
water	70:12	0:0	8	}
call	71:12	71:57	6	av_codec_set_chroma_intra_matrix
arg	71:45	71:54	7	video_enc
water	71:45	0:0	8	video_enc
arg	71:56	71:57	7	p
water	71:56	0:0	8	p
water	71:58	0:0	6	;
call	72:12	72:54	6	parse_matrix_coeffs
arg	72:32	72:33	7	p
water	72:32	0:0	8	p
arg	72:35	72:54	7	chroma_intra_matrix
water	72:35	0:0	8	chroma_intra_matrix
water	72:55	0:0	6	;
water	73:8	0:0	6	}
call	74:8	74:70	4	MATCH_PER_STREAM_OPT
arg	74:29	74:43	5	inter_matrices
water	74:29	0:0	6	inter_matrices
arg	74:45	74:48	5	str
water	74:45	0:0	6	str
arg	74:50	74:62	5	inter_matrix
water	74:50	0:0	6	inter_matrix
arg	74:64	74:66	5	oc
water	74:64	0:0	6	oc
arg	74:68	74:70	5	st
water	74:68	0:0	6	st
water	74:71	0:0	4	;
if	75:8	81:8	4	(inter_matrix)
cond	75:12	75:12	5	inter_matrix
water	75:12	0:0	6	inter_matrix
stmts	75:26	81:8	5	
water	75:26	0:0	6	{
if	76:12	79:12	6	(! ( video_enc -> inter_matrix =av_mallocz (sizeof ( * video_enc -> inter_matrix ) * 64 ) ))
cond	76:16	76:93	7	! ( video_enc -> inter_matrix =av_mallocz (sizeof ( * video_enc -> inter_matrix ) * 64 ) )
op	76:16	0:0	8	!
water	76:17	0:0	8	(
water	76:18	0:0	8	video_enc
op	76:27	0:0	8	->
water	76:29	0:0	8	inter_matrix
op	76:42	0:0	8	=
call	76:44	76:92	8	av_mallocz
arg	76:55	76:92	9	sizeof(*video_enc->inter_matrix)*64
op	76:55	0:0	10	sizeof
water	76:61	0:0	10	(
op	76:62	0:0	10	*
water	76:63	0:0	10	video_enc
op	76:72	0:0	10	->
water	76:74	0:0	10	inter_matrix
water	76:86	0:0	10	)
op	76:88	0:0	10	*
water	76:90	0:0	10	64
water	76:93	0:0	8	)
stmts	76:96	79:12	7	
water	76:96	0:0	8	{
call	77:16	77:90	8	av_log
arg	77:23	77:27	9	NULL
water	77:23	0:0	10	NULL
arg	77:29	77:41	9	AV_LOG_FATAL
water	77:29	0:0	10	AV_LOG_FATAL
arg	77:43	77:90	9	"Could not allocate memory for inter matrix.\n"
water	77:43	0:0	10	"Could not allocate memory for inter matrix.\n"
water	77:91	0:0	8	;
call	78:16	78:30	8	exit_program
arg	78:29	78:30	9	1
water	78:29	0:0	10	1
water	78:31	0:0	8	;
water	79:12	0:0	8	}
call	80:12	80:69	6	parse_matrix_coeffs
arg	80:32	80:55	7	video_enc->inter_matrix
water	80:32	0:0	8	video_enc
op	80:41	0:0	8	->
water	80:43	0:0	8	inter_matrix
arg	80:57	80:69	7	inter_matrix
water	80:57	0:0	8	inter_matrix
water	80:70	0:0	6	;
water	81:8	0:0	6	}
call	82:8	82:57	4	MATCH_PER_STREAM_OPT
arg	82:29	82:41	5	rc_overrides
water	82:29	0:0	6	rc_overrides
arg	82:43	82:46	5	str
water	82:43	0:0	6	str
arg	82:48	82:49	5	p
water	82:48	0:0	6	p
arg	82:51	82:53	5	oc
water	82:51	0:0	6	oc
arg	82:55	82:57	5	st
water	82:55	0:0	6	st
water	82:58	0:0	4	;
for	83:8	109:8	4	(i = 0 ;p;i ++)
forinit	83:13	83:18	5	i = 0 ;
water	83:13	0:0	6	i
op	83:15	0:0	6	=
water	83:17	0:0	6	0
water	83:18	0:0	6	;
cond	83:20	83:20	5	p
water	83:20	0:0	6	p
forexpr	83:23	83:24	5	i ++
water	83:23	0:0	6	i
op	83:24	0:0	6	++
stmts	83:28	109:8	5	
water	83:28	0:0	6	{
decl	84:12	84:29	6	int	start
water	84:21	0:0	6	,
decl	84:12	84:29	6	int	end
water	84:26	0:0	6	,
decl	84:12	84:29	6	int	q
decl	85:12	85:59	6	int	e
op	85:18	0:0	6	=
call	85:20	85:58	7	sscanf
arg	85:27	85:28	8	p
water	85:27	0:0	9	p
arg	85:30	85:40	8	"%d,%d,%d"
water	85:30	0:0	9	"%d,%d,%d"
arg	85:42	85:48	8	&start
op	85:42	0:0	9	&
water	85:43	0:0	9	start
arg	85:50	85:54	8	&end
op	85:50	0:0	9	&
water	85:51	0:0	9	end
arg	85:56	85:58	8	&q
op	85:56	0:0	9	&
water	85:57	0:0	9	q
if	86:12	89:12	6	(e != 3)
cond	86:16	86:21	7	e != 3
water	86:16	0:0	8	e
op	86:18	0:0	8	!=
water	86:21	0:0	8	3
stmts	86:24	89:12	7	
water	86:24	0:0	8	{
call	87:16	87:72	8	av_log
arg	87:23	87:27	9	NULL
water	87:23	0:0	10	NULL
arg	87:29	87:41	9	AV_LOG_FATAL
water	87:29	0:0	10	AV_LOG_FATAL
arg	87:43	87:72	9	"error parsing rc_override\n"
water	87:43	0:0	10	"error parsing rc_override\n"
water	87:73	0:0	8	;
call	88:16	88:30	8	exit_program
arg	88:29	88:30	9	1
water	88:29	0:0	10	1
water	88:31	0:0	8	;
water	89:12	0:0	8	}
water	90:12	0:0	6	video_enc
op	90:21	0:0	6	->
water	90:23	0:0	6	rc_override
op	90:35	0:0	6	=
call	91:16	92:58	6	av_realloc_array
arg	91:33	91:55	7	video_enc->rc_override
water	91:33	0:0	8	video_enc
op	91:42	0:0	8	->
water	91:44	0:0	8	rc_override
arg	92:33	92:38	7	i+1
water	92:33	0:0	8	i
op	92:35	0:0	8	+
water	92:37	0:0	8	1
arg	92:40	92:58	7	sizeof(RcOverride)
op	92:40	0:0	8	sizeof
water	92:46	0:0	8	(
water	92:47	0:0	8	RcOverride
water	92:57	0:0	8	)
water	92:59	0:0	6	;
if	93:12	96:12	6	(! video_enc -> rc_override)
cond	93:16	93:28	7	! video_enc -> rc_override
op	93:16	0:0	8	!
water	93:17	0:0	8	video_enc
op	93:26	0:0	8	->
water	93:28	0:0	8	rc_override
stmts	93:41	96:12	7	
water	93:41	0:0	8	{
call	94:16	94:93	8	av_log
arg	94:23	94:27	9	NULL
water	94:23	0:0	10	NULL
arg	94:29	94:41	9	AV_LOG_FATAL
water	94:29	0:0	10	AV_LOG_FATAL
arg	94:43	94:93	9	"Could not (re)allocate memory for rc_override.\n"
water	94:43	0:0	10	"Could not (re)allocate memory for rc_override.\n"
water	94:94	0:0	8	;
call	95:16	95:30	8	exit_program
arg	95:29	95:30	9	1
water	95:29	0:0	10	1
water	95:31	0:0	8	;
water	96:12	0:0	8	}
water	97:12	0:0	6	video_enc
op	97:21	0:0	6	->
water	97:23	0:0	6	rc_override
op	97:34	0:0	6	[
water	97:35	0:0	6	i
op	97:36	0:0	6	]
op	97:37	0:0	6	.
water	97:38	0:0	6	start_frame
op	97:50	0:0	6	=
water	97:52	0:0	6	start
water	97:57	0:0	6	;
water	98:12	0:0	6	video_enc
op	98:21	0:0	6	->
water	98:23	0:0	6	rc_override
op	98:34	0:0	6	[
water	98:35	0:0	6	i
op	98:36	0:0	6	]
op	98:37	0:0	6	.
water	98:38	0:0	6	end_frame
op	98:50	0:0	6	=
water	98:52	0:0	6	end
water	98:55	0:0	6	;
if	99:12	102:12	6	(q > 0)
cond	99:16	99:20	7	q > 0
water	99:16	0:0	8	q
op	99:18	0:0	8	>
water	99:20	0:0	8	0
stmts	99:23	102:12	7	
water	99:23	0:0	8	{
water	100:16	0:0	8	video_enc
op	100:25	0:0	8	->
water	100:27	0:0	8	rc_override
op	100:38	0:0	8	[
water	100:39	0:0	8	i
op	100:40	0:0	8	]
op	100:41	0:0	8	.
water	100:42	0:0	8	qscale
op	100:57	0:0	8	=
water	100:59	0:0	8	q
water	100:60	0:0	8	;
water	101:16	0:0	8	video_enc
op	101:25	0:0	8	->
water	101:27	0:0	8	rc_override
op	101:38	0:0	8	[
water	101:39	0:0	8	i
op	101:40	0:0	8	]
op	101:41	0:0	8	.
water	101:42	0:0	8	quality_factor
op	101:57	0:0	8	=
water	101:59	0:0	8	1
op	101:60	0:0	8	.
water	101:61	0:0	8	0
water	101:62	0:0	8	;
water	102:12	0:0	8	}
else	103:12	106:12	6
stmts	103:17	106:12	7	
water	103:17	0:0	8	{
water	104:16	0:0	8	video_enc
op	104:25	0:0	8	->
water	104:27	0:0	8	rc_override
op	104:38	0:0	8	[
water	104:39	0:0	8	i
op	104:40	0:0	8	]
op	104:41	0:0	8	.
water	104:42	0:0	8	qscale
op	104:57	0:0	8	=
water	104:59	0:0	8	0
water	104:60	0:0	8	;
water	105:16	0:0	8	video_enc
op	105:25	0:0	8	->
water	105:27	0:0	8	rc_override
op	105:38	0:0	8	[
water	105:39	0:0	8	i
op	105:40	0:0	8	]
op	105:41	0:0	8	.
water	105:42	0:0	8	quality_factor
op	105:57	0:0	8	=
op	105:59	0:0	8	-
water	105:60	0:0	8	q
op	105:61	0:0	8	/
water	105:62	0:0	8	100
op	105:65	0:0	8	.
water	105:66	0:0	8	0
water	105:67	0:0	8	;
water	106:12	0:0	8	}
water	107:12	0:0	6	p
op	107:14	0:0	6	=
call	107:16	107:29	6	strchr
arg	107:23	107:24	7	p
water	107:23	0:0	8	p
arg	107:26	107:29	7	'/'
water	107:26	0:0	8	'/'
water	107:30	0:0	6	;
if	108:12	108:22	6	(p)
cond	108:16	108:16	7	p
water	108:16	0:0	8	p
stmts	108:19	108:22	7	
water	108:19	0:0	8	p
op	108:20	0:0	8	++
water	108:22	0:0	8	;
water	109:8	0:0	6	}
water	110:8	0:0	4	video_enc
op	110:17	0:0	4	->
water	110:19	0:0	4	rc_override_count
op	110:37	0:0	4	=
water	110:39	0:0	4	i
water	110:40	0:0	4	;
if	111:8	112:49	4	(do_psnr)
cond	111:12	111:12	5	do_psnr
water	111:12	0:0	6	do_psnr
stmts	112:12	112:49	5	
water	112:12	0:0	6	video_enc
op	112:21	0:0	6	->
water	112:23	0:0	6	flags
op	112:28	0:0	6	|=
water	112:31	0:0	6	AV_CODEC_FLAG_PSNR
water	112:49	0:0	6	;
call	114:8	114:53	4	MATCH_PER_STREAM_OPT
arg	114:29	114:33	5	pass
water	114:29	0:0	6	pass
arg	114:35	114:36	5	i
water	114:35	0:0	6	i
arg	114:38	114:45	5	do_pass
water	114:38	0:0	6	do_pass
arg	114:47	114:49	5	oc
water	114:47	0:0	6	oc
arg	114:51	114:53	5	st
water	114:51	0:0	6	st
water	114:54	0:0	4	;
if	115:8	124:8	4	(do_pass)
cond	115:12	115:12	5	do_pass
water	115:12	0:0	6	do_pass
stmts	115:21	124:8	5	
water	115:21	0:0	6	{
if	116:12	119:12	6	(do_pass & 1)
cond	116:16	116:26	7	do_pass & 1
water	116:16	0:0	8	do_pass
op	116:24	0:0	8	&
water	116:26	0:0	8	1
stmts	116:29	119:12	7	
water	116:29	0:0	8	{
water	117:16	0:0	8	video_enc
op	117:25	0:0	8	->
water	117:27	0:0	8	flags
op	117:33	0:0	8	|=
water	117:36	0:0	8	AV_CODEC_FLAG_PASS1
water	117:55	0:0	8	;
call	118:16	118:81	8	av_dict_set
arg	118:28	118:46	9	&ost->encoder_opts
op	118:28	0:0	10	&
water	118:29	0:0	10	ost
op	118:32	0:0	10	->
water	118:34	0:0	10	encoder_opts
arg	118:48	118:55	9	"flags"
water	118:48	0:0	10	"flags"
arg	118:57	118:65	9	"+pass1"
water	118:57	0:0	10	"+pass1"
arg	118:67	118:81	9	AV_DICT_APPEND
water	118:67	0:0	10	AV_DICT_APPEND
water	118:82	0:0	8	;
water	119:12	0:0	8	}
if	120:12	123:12	6	(do_pass & 2)
cond	120:16	120:26	7	do_pass & 2
water	120:16	0:0	8	do_pass
op	120:24	0:0	8	&
water	120:26	0:0	8	2
stmts	120:29	123:12	7	
water	120:29	0:0	8	{
water	121:16	0:0	8	video_enc
op	121:25	0:0	8	->
water	121:27	0:0	8	flags
op	121:33	0:0	8	|=
water	121:36	0:0	8	AV_CODEC_FLAG_PASS2
water	121:55	0:0	8	;
call	122:16	122:81	8	av_dict_set
arg	122:28	122:46	9	&ost->encoder_opts
op	122:28	0:0	10	&
water	122:29	0:0	10	ost
op	122:32	0:0	10	->
water	122:34	0:0	10	encoder_opts
arg	122:48	122:55	9	"flags"
water	122:48	0:0	10	"flags"
arg	122:57	122:65	9	"+pass2"
water	122:57	0:0	10	"+pass2"
arg	122:67	122:81	9	AV_DICT_APPEND
water	122:67	0:0	10	AV_DICT_APPEND
water	122:82	0:0	8	;
water	123:12	0:0	8	}
water	124:8	0:0	6	}
call	125:8	125:75	4	MATCH_PER_STREAM_OPT
arg	125:29	125:41	5	passlogfiles
water	125:29	0:0	6	passlogfiles
arg	125:43	125:46	5	str
water	125:43	0:0	6	str
arg	125:48	125:67	5	ost->logfile_prefix
water	125:48	0:0	6	ost
op	125:51	0:0	6	->
water	125:53	0:0	6	logfile_prefix
arg	125:69	125:71	5	oc
water	125:69	0:0	6	oc
arg	125:73	125:75	5	st
water	125:73	0:0	6	st
water	125:76	0:0	4	;
if	126:8	128:27	4	(ost -> logfile_prefix && ! ( ost -> logfile_prefix =av_strdup (ost -> logfile_prefix ) ))
cond	126:12	127:66	5	ost -> logfile_prefix && ! ( ost -> logfile_prefix =av_strdup (ost -> logfile_prefix ) )
water	126:12	0:0	6	ost
op	126:15	0:0	6	->
water	126:17	0:0	6	logfile_prefix
op	126:32	0:0	6	&&
op	127:12	0:0	6	!
water	127:13	0:0	6	(
water	127:14	0:0	6	ost
op	127:17	0:0	6	->
water	127:19	0:0	6	logfile_prefix
op	127:34	0:0	6	=
call	127:36	127:65	6	av_strdup
arg	127:46	127:65	7	ost->logfile_prefix
water	127:46	0:0	8	ost
op	127:49	0:0	8	->
water	127:51	0:0	8	logfile_prefix
water	127:66	0:0	6	)
stmts	128:12	128:27	5	
call	128:12	128:26	6	exit_program
arg	128:25	128:26	7	1
water	128:25	0:0	8	1
water	128:27	0:0	6	;
if	129:8	159:8	4	(do_pass)
cond	129:12	129:12	5	do_pass
water	129:12	0:0	6	do_pass
stmts	129:21	159:8	5	
water	129:21	0:0	6	{
decl	130:12	130:34	6	char	logfilename[1024]
decl	131:12	131:19	6	FILE	*f
call	132:12	135:22	6	snprintf
arg	132:21	132:32	7	logfilename
water	132:21	0:0	8	logfilename
arg	132:34	132:53	7	sizeof(logfilename)
op	132:34	0:0	8	sizeof
water	132:40	0:0	8	(
water	132:41	0:0	8	logfilename
water	132:52	0:0	8	)
arg	132:55	132:66	7	"%s-%d.log"
water	132:55	0:0	8	"%s-%d.log"
arg	133:21	134:74	7	ost->logfile_prefix?ost->logfile_prefix:DEFAULT_PASS_LOGFILENAME_PREFIX
water	133:21	0:0	8	ost
op	133:24	0:0	8	->
water	133:26	0:0	8	logfile_prefix
water	133:41	0:0	8	?
water	133:43	0:0	8	ost
op	133:46	0:0	8	->
water	133:48	0:0	8	logfile_prefix
water	133:63	0:0	8	:
water	134:43	0:0	8	DEFAULT_PASS_LOGFILENAME_PREFIX
arg	135:21	135:22	7	i
water	135:21	0:0	8	i
water	135:23	0:0	6	;
if	136:12	138:12	6	(!strcmp (ost -> enc -> name ,"libx264" ))
cond	136:16	136:49	7	!strcmp (ost -> enc -> name ,"libx264" )
op	136:16	0:0	8	!
call	136:17	136:49	8	strcmp
arg	136:24	136:38	9	ost->enc->name
water	136:24	0:0	10	ost
op	136:27	0:0	10	->
water	136:29	0:0	10	enc
op	136:32	0:0	10	->
water	136:34	0:0	10	name
arg	136:40	136:49	9	"libx264"
water	136:40	0:0	10	"libx264"
stmts	136:52	138:12	7	
water	136:52	0:0	8	{
call	137:16	137:92	8	av_dict_set
arg	137:28	137:46	9	&ost->encoder_opts
op	137:28	0:0	10	&
water	137:29	0:0	10	ost
op	137:32	0:0	10	->
water	137:34	0:0	10	encoder_opts
arg	137:48	137:55	9	"stats"
water	137:48	0:0	10	"stats"
arg	137:57	137:68	9	logfilename
water	137:57	0:0	10	logfilename
arg	137:70	137:92	9	AV_DICT_DONT_OVERWRITE
water	137:70	0:0	10	AV_DICT_DONT_OVERWRITE
water	137:93	0:0	8	;
water	138:12	0:0	8	}
else	138:14	158:12	6
stmts	138:19	158:12	7	
water	138:19	0:0	8	{
if	139:16	147:16	8	(video_enc -> flags & AV_CODEC_FLAG_PASS2)
cond	139:20	139:39	9	video_enc -> flags & AV_CODEC_FLAG_PASS2
water	139:20	0:0	10	video_enc
op	139:29	0:0	10	->
water	139:31	0:0	10	flags
op	139:37	0:0	10	&
water	139:39	0:0	10	AV_CODEC_FLAG_PASS2
stmts	139:60	147:16	9	
water	139:60	0:0	10	{
decl	140:20	140:61	10	char	*logbuffer
op	140:37	0:0	10	=
call	140:39	140:60	11	read_file
arg	140:49	140:60	12	logfilename
water	140:49	0:0	13	logfilename
if	141:20	145:20	10	(! logbuffer)
cond	141:24	141:25	11	! logbuffer
op	141:24	0:0	12	!
water	141:25	0:0	12	logbuffer
stmts	141:36	145:20	11	
water	141:36	0:0	12	{
call	142:24	143:42	12	av_log
arg	142:31	142:35	13	NULL
water	142:31	0:0	14	NULL
arg	142:37	142:49	13	AV_LOG_FATAL
water	142:37	0:0	14	AV_LOG_FATAL
arg	142:51	142:102	13	"Error reading log file '%s' for pass-2 encoding\n"
water	142:51	0:0	14	"Error reading log file '%s' for pass-2 encoding\n"
arg	143:31	143:42	13	logfilename
water	143:31	0:0	14	logfilename
water	143:43	0:0	12	;
call	144:24	144:38	12	exit_program
arg	144:37	144:38	13	1
water	144:37	0:0	14	1
water	144:39	0:0	12	;
water	145:20	0:0	12	}
water	146:20	0:0	10	video_enc
op	146:29	0:0	10	->
water	146:31	0:0	10	stats_in
op	146:40	0:0	10	=
water	146:42	0:0	10	logbuffer
water	146:51	0:0	10	;
water	147:16	0:0	10	}
if	148:16	157:16	8	(video_enc -> flags & AV_CODEC_FLAG_PASS1)
cond	148:20	148:39	9	video_enc -> flags & AV_CODEC_FLAG_PASS1
water	148:20	0:0	10	video_enc
op	148:29	0:0	10	->
water	148:31	0:0	10	flags
op	148:37	0:0	10	&
water	148:39	0:0	10	AV_CODEC_FLAG_PASS1
stmts	148:60	157:16	9	
water	148:60	0:0	10	{
water	149:20	0:0	10	f
op	149:22	0:0	10	=
call	149:24	149:55	10	av_fopen_utf8
arg	149:38	149:49	11	logfilename
water	149:38	0:0	12	logfilename
arg	149:51	149:55	11	"wb"
water	149:51	0:0	12	"wb"
water	149:56	0:0	10	;
if	150:20	155:20	10	(! f)
cond	150:24	150:25	11	! f
op	150:24	0:0	12	!
water	150:25	0:0	12	f
stmts	150:28	155:20	11	
water	150:28	0:0	12	{
call	151:24	153:59	12	av_log
arg	151:31	151:35	13	NULL
water	151:31	0:0	14	NULL
arg	151:37	151:49	13	AV_LOG_FATAL
water	151:37	0:0	14	AV_LOG_FATAL
arg	152:31	152:85	13	"Cannot write log file '%s' for pass-1 encoding: %s\n"
water	152:31	0:0	14	"Cannot write log file '%s' for pass-1 encoding: %s\n"
arg	153:31	153:42	13	logfilename
water	153:31	0:0	14	logfilename
arg	153:44	153:59	13	strerror(errno)
call	153:44	153:58	14	strerror
arg	153:53	153:58	15	errno
water	153:53	0:0	16	errno
water	153:60	0:0	12	;
call	154:24	154:38	12	exit_program
arg	154:37	154:38	13	1
water	154:37	0:0	14	1
water	154:39	0:0	12	;
water	155:20	0:0	12	}
water	156:20	0:0	10	ost
op	156:23	0:0	10	->
water	156:25	0:0	10	logfile
op	156:33	0:0	10	=
water	156:35	0:0	10	f
water	156:36	0:0	10	;
water	157:16	0:0	10	}
water	158:12	0:0	8	}
water	159:8	0:0	6	}
call	160:8	160:82	4	MATCH_PER_STREAM_OPT
arg	160:29	160:46	5	forced_key_frames
water	160:29	0:0	6	forced_key_frames
arg	160:48	160:51	5	str
water	160:48	0:0	6	str
arg	160:53	160:74	5	ost->forced_keyframes
water	160:53	0:0	6	ost
op	160:56	0:0	6	->
water	160:58	0:0	6	forced_keyframes
arg	160:76	160:78	5	oc
water	160:76	0:0	6	oc
arg	160:80	160:82	5	st
water	160:80	0:0	6	st
water	160:83	0:0	4	;
if	161:8	162:68	4	(ost -> forced_keyframes)
cond	161:12	161:17	5	ost -> forced_keyframes
water	161:12	0:0	6	ost
op	161:15	0:0	6	->
water	161:17	0:0	6	forced_keyframes
stmts	162:12	162:68	5	
water	162:12	0:0	6	ost
op	162:15	0:0	6	->
water	162:17	0:0	6	forced_keyframes
op	162:34	0:0	6	=
call	162:36	162:67	6	av_strdup
arg	162:46	162:67	7	ost->forced_keyframes
water	162:46	0:0	8	ost
op	162:49	0:0	8	->
water	162:51	0:0	8	forced_keyframes
water	162:68	0:0	6	;
call	163:8	163:65	4	MATCH_PER_STREAM_OPT
arg	163:29	163:38	5	force_fps
water	163:29	0:0	6	force_fps
arg	163:40	163:41	5	i
water	163:40	0:0	6	i
arg	163:43	163:57	5	ost->force_fps
water	163:43	0:0	6	ost
op	163:46	0:0	6	->
water	163:48	0:0	6	force_fps
arg	163:59	163:61	5	oc
water	163:59	0:0	6	oc
arg	163:63	163:65	5	st
water	163:63	0:0	6	st
water	163:66	0:0	4	;
water	164:8	0:0	4	ost
op	164:11	0:0	4	->
water	164:13	0:0	4	top_field_first
op	164:29	0:0	4	=
op	164:31	0:0	4	-
water	164:32	0:0	4	1
water	164:33	0:0	4	;
call	165:8	165:77	4	MATCH_PER_STREAM_OPT
arg	165:29	165:44	5	top_field_first
water	165:29	0:0	6	top_field_first
arg	165:46	165:47	5	i
water	165:46	0:0	6	i
arg	165:49	165:69	5	ost->top_field_first
water	165:49	0:0	6	ost
op	165:52	0:0	6	->
water	165:54	0:0	6	top_field_first
arg	165:71	165:73	5	oc
water	165:71	0:0	6	oc
arg	165:75	165:77	5	st
water	165:75	0:0	6	st
water	165:78	0:0	4	;
water	166:8	0:0	4	ost
op	166:11	0:0	4	->
water	166:13	0:0	4	avfilter
op	166:22	0:0	4	=
call	166:24	166:50	4	get_ost_filters
arg	166:40	166:41	5	o
water	166:40	0:0	6	o
arg	166:43	166:45	5	oc
water	166:43	0:0	6	oc
arg	166:47	166:50	5	ost
water	166:47	0:0	6	ost
water	166:51	0:0	4	;
if	167:8	168:27	4	(! ost -> avfilter)
cond	167:12	167:18	5	! ost -> avfilter
op	167:12	0:0	6	!
water	167:13	0:0	6	ost
op	167:16	0:0	6	->
water	167:18	0:0	6	avfilter
stmts	168:12	168:27	5	
call	168:12	168:26	6	exit_program
arg	168:25	168:26	7	1
water	168:25	0:0	8	1
water	168:27	0:0	6	;
water	169:4	0:0	4	}
else	169:6	171:4	2
stmts	169:11	171:4	3	
water	169:11	0:0	4	{
call	170:8	170:97	4	MATCH_PER_STREAM_OPT
arg	170:29	170:54	5	copy_initial_nonkeyframes
water	170:29	0:0	6	copy_initial_nonkeyframes
arg	170:56	170:57	5	i
water	170:56	0:0	6	i
arg	170:59	170:89	5	ost->copy_initial_nonkeyframes
water	170:59	0:0	6	ost
op	170:62	0:0	6	->
water	170:64	0:0	6	copy_initial_nonkeyframes
arg	170:91	170:94	5	oc
water	170:91	0:0	6	oc
arg	170:95	170:97	5	st
water	170:95	0:0	6	st
water	170:98	0:0	4	;
water	171:4	0:0	4	}
if	172:4	173:64	2	(ost -> stream_copy)
cond	172:8	172:13	3	ost -> stream_copy
water	172:8	0:0	4	ost
op	172:11	0:0	4	->
water	172:13	0:0	4	stream_copy
stmts	173:8	173:64	3	
call	173:8	173:63	4	check_streamcopy_filters
arg	173:33	173:34	5	o
water	173:33	0:0	6	o
arg	173:36	173:38	5	oc
water	173:36	0:0	6	oc
arg	173:40	173:43	5	ost
water	173:40	0:0	6	ost
arg	173:45	173:63	5	AVMEDIA_TYPE_VIDEO
water	173:45	0:0	6	AVMEDIA_TYPE_VIDEO
water	173:64	0:0	4	;
return	174:4	174:14	2	ost
water	174:11	0:0	3	ost
