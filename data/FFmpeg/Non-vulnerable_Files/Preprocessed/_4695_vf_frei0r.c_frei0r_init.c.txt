func	1:15	100:0	0	int	frei0r_init
params	1:30	0:0	1	
param	1:31	1:51	2	AVFilterContext *	ctx
param	2:31	2:50	2	const char *	dl_name
param	2:52	2:60	2	int	type
stmnts	0:0	99:12	1	
decl	4:4	4:32	2	Frei0rContext	*s
op	4:21	0:0	2	=
water	4:23	0:0	2	ctx
op	4:26	0:0	2	->
water	4:28	0:0	2	priv
decl	5:4	5:34	2	f0r_init_f	f0r_init
decl	6:4	6:45	2	f0r_get_plugin_info_f	f0r_get_plugin_info
decl	7:4	7:25	2	f0r_plugin_info_t	*pi
decl	8:4	8:14	2	char	*path
decl	9:4	9:15	2	int	ret
op	9:12	0:0	2	=
water	9:14	0:0	2	0
decl	10:4	10:9	2	int	i
water	11:4	0:0	2	static
water	11:11	0:0	2	const
water	11:17	0:0	2	char
op	11:21	0:0	2	*
water	11:23	0:0	2	const
water	11:29	0:0	2	frei0r_pathlist
op	11:44	0:0	2	[
op	11:45	0:0	2	]
op	11:47	0:0	2	=
water	11:49	0:0	2	{
water	12:8	0:0	2	"/usr/local/lib/frei0r-1/"
water	12:34	0:0	2	,
water	13:8	0:0	2	"/usr/lib/frei0r-1/"
water	13:28	0:0	2	,
water	14:8	0:0	2	"/usr/local/lib64/frei0r-1/"
water	14:36	0:0	2	,
water	15:8	0:0	2	"/usr/lib64/frei0r-1/"
water	16:4	0:0	2	}
water	16:5	0:0	2	;
if	17:4	20:4	2	(! dl_name)
cond	17:8	17:9	3	! dl_name
op	17:8	0:0	4	!
water	17:9	0:0	4	dl_name
stmts	17:18	20:4	3	
water	17:18	0:0	4	{
call	18:8	18:62	4	av_log
arg	18:15	18:18	5	ctx
water	18:15	0:0	6	ctx
arg	18:20	18:32	5	AV_LOG_ERROR
water	18:20	0:0	6	AV_LOG_ERROR
arg	18:34	18:62	5	"No filter name provided.\n"
water	18:34	0:0	6	"No filter name provided.\n"
water	18:63	0:0	4	;
return	19:8	19:30	4	AVERROR(EINVAL)
call	19:15	19:29	5	AVERROR
arg	19:23	19:29	6	EINVAL
water	19:23	0:0	7	EINVAL
water	20:4	0:0	4	}
if	22:4	47:4	2	(( path =av_strdup (getenv ("FREI0R_PATH" ) ) ))
cond	22:8	22:48	3	( path =av_strdup (getenv ("FREI0R_PATH" ) ) )
water	22:8	0:0	4	(
water	22:9	0:0	4	path
op	22:14	0:0	4	=
call	22:16	22:47	4	av_strdup
arg	22:26	22:47	5	getenv("FREI0R_PATH")
call	22:26	22:46	6	getenv
arg	22:33	22:46	7	"FREI0R_PATH"
water	22:33	0:0	8	"FREI0R_PATH"
water	22:48	0:0	4	)
stmts	22:51	47:4	3	
water	22:51	0:0	4	{
decl	24:8	24:35	4	const char	*separator
op	24:30	0:0	4	=
water	24:32	0:0	4	";"
decl	26:8	26:35	4	const char	*separator
op	26:30	0:0	4	=
water	26:32	0:0	4	":"
decl	28:8	28:28	4	char	*p
water	28:15	0:0	4	,
decl	28:8	28:28	4	char	*ptr
op	28:22	0:0	4	=
water	28:24	0:0	4	NULL
for	29:8	42:8	4	(p = path ;p =av_strtok (p ,separator ,& ptr );p = NULL)
forinit	29:13	29:21	5	p = path ;
water	29:13	0:0	6	p
op	29:15	0:0	6	=
water	29:17	0:0	6	path
water	29:21	0:0	6	;
cond	29:23	29:55	5	p =av_strtok (p ,separator ,& ptr )
water	29:23	0:0	6	p
op	29:25	0:0	6	=
call	29:27	29:55	6	av_strtok
arg	29:37	29:38	7	p
water	29:37	0:0	8	p
arg	29:40	29:49	7	separator
water	29:40	0:0	8	separator
arg	29:51	29:55	7	&ptr
op	29:51	0:0	8	&
water	29:52	0:0	8	ptr
forexpr	29:58	29:62	5	p = NULL
water	29:58	0:0	6	p
op	29:60	0:0	6	=
water	29:62	0:0	6	NULL
stmts	29:68	42:8	5	
water	29:68	0:0	6	{
decl	31:12	31:44	6	char	*p1
op	31:21	0:0	6	=
call	31:23	31:43	7	av_asprintf
arg	31:35	31:40	8	"%s/"
water	31:35	0:0	9	"%s/"
arg	31:42	31:43	8	p
water	31:42	0:0	9	p
if	32:12	35:12	6	(! p1)
cond	32:16	32:17	7	! p1
op	32:16	0:0	8	!
water	32:17	0:0	8	p1
stmts	32:21	35:12	7	
water	32:21	0:0	8	{
water	33:16	0:0	8	ret
op	33:20	0:0	8	=
call	33:22	33:36	8	AVERROR
arg	33:30	33:36	9	ENOMEM
water	33:30	0:0	10	ENOMEM
water	33:37	0:0	8	;
goto	34:16	34:35	8	check_path_end
water	34:21	0:0	9	check_path_end
water	35:12	0:0	8	}
water	36:12	0:0	6	ret
op	36:16	0:0	6	=
call	36:18	36:59	6	load_path
arg	36:28	36:31	7	ctx
water	36:28	0:0	8	ctx
arg	36:33	36:46	7	&s->dl_handle
op	36:33	0:0	8	&
water	36:34	0:0	8	s
op	36:35	0:0	8	->
water	36:37	0:0	8	dl_handle
arg	36:48	36:50	7	p1
water	36:48	0:0	8	p1
arg	36:52	36:59	7	dl_name
water	36:52	0:0	8	dl_name
water	36:60	0:0	6	;
call	37:12	37:22	6	av_free
arg	37:20	37:22	7	p1
water	37:20	0:0	8	p1
water	37:23	0:0	6	;
if	38:12	39:35	6	(ret < 0)
cond	38:16	38:22	7	ret < 0
water	38:16	0:0	8	ret
op	38:20	0:0	8	<
water	38:22	0:0	8	0
stmts	39:16	39:35	7	
goto	39:16	39:35	8	check_path_end
water	39:21	0:0	9	check_path_end
if	40:12	41:21	6	(s -> dl_handle)
cond	40:16	40:19	7	s -> dl_handle
water	40:16	0:0	8	s
op	40:17	0:0	8	->
water	40:19	0:0	8	dl_handle
stmts	41:16	41:21	7	
break	41:16	41:21	8	
water	42:8	0:0	6	}
label	43:4	43:18	4	check_path_end :
call	44:8	44:20	4	av_free
arg	44:16	44:20	5	path
water	44:16	0:0	6	path
water	44:21	0:0	4	;
if	45:8	46:22	4	(ret < 0)
cond	45:12	45:18	5	ret < 0
water	45:12	0:0	6	ret
op	45:16	0:0	6	<
water	45:18	0:0	6	0
stmts	46:12	46:22	5	
return	46:12	46:22	6	ret
water	46:19	0:0	7	ret
water	47:4	0:0	4	}
if	48:4	56:4	2	(! s -> dl_handle && ( path =getenv ("HOME" ) ))
cond	48:8	48:47	3	! s -> dl_handle && ( path =getenv ("HOME" ) )
op	48:8	0:0	4	!
water	48:9	0:0	4	s
op	48:10	0:0	4	->
water	48:12	0:0	4	dl_handle
op	48:22	0:0	4	&&
water	48:25	0:0	4	(
water	48:26	0:0	4	path
op	48:31	0:0	4	=
call	48:33	48:46	4	getenv
arg	48:40	48:46	5	"HOME"
water	48:40	0:0	6	"HOME"
water	48:47	0:0	4	)
stmts	48:50	56:4	3	
water	48:50	0:0	4	{
decl	49:8	49:61	4	char	*prefix
op	49:21	0:0	4	=
call	49:23	49:60	5	av_asprintf
arg	49:35	49:54	6	"%s/.frei0r-1/lib/"
water	49:35	0:0	7	"%s/.frei0r-1/lib/"
arg	49:56	49:60	6	path
water	49:56	0:0	7	path
if	50:8	51:34	4	(! prefix)
cond	50:12	50:13	5	! prefix
op	50:12	0:0	6	!
water	50:13	0:0	6	prefix
stmts	51:12	51:34	5	
return	51:12	51:34	6	AVERROR(ENOMEM)
call	51:19	51:33	7	AVERROR
arg	51:27	51:33	8	ENOMEM
water	51:27	0:0	9	ENOMEM
water	52:8	0:0	4	ret
op	52:12	0:0	4	=
call	52:14	52:59	4	load_path
arg	52:24	52:27	5	ctx
water	52:24	0:0	6	ctx
arg	52:29	52:42	5	&s->dl_handle
op	52:29	0:0	6	&
water	52:30	0:0	6	s
op	52:31	0:0	6	->
water	52:33	0:0	6	dl_handle
arg	52:44	52:50	5	prefix
water	52:44	0:0	6	prefix
arg	52:52	52:59	5	dl_name
water	52:52	0:0	6	dl_name
water	52:60	0:0	4	;
call	53:8	53:22	4	av_free
arg	53:16	53:22	5	prefix
water	53:16	0:0	6	prefix
water	53:23	0:0	4	;
if	54:8	55:22	4	(ret < 0)
cond	54:12	54:18	5	ret < 0
water	54:12	0:0	6	ret
op	54:16	0:0	6	<
water	54:18	0:0	6	0
stmts	55:12	55:22	5	
return	55:12	55:22	6	ret
water	55:19	0:0	7	ret
water	56:4	0:0	4	}
for	57:4	61:4	2	(i = 0 ;! s -> dl_handle && i <FF_ARRAY_ELEMS (frei0r_pathlist );i ++)
forinit	57:9	57:14	3	i = 0 ;
water	57:9	0:0	4	i
op	57:11	0:0	4	=
water	57:13	0:0	4	0
water	57:14	0:0	4	;
cond	57:16	57:67	3	! s -> dl_handle && i <FF_ARRAY_ELEMS (frei0r_pathlist )
op	57:16	0:0	4	!
water	57:17	0:0	4	s
op	57:18	0:0	4	->
water	57:20	0:0	4	dl_handle
op	57:30	0:0	4	&&
water	57:33	0:0	4	i
op	57:35	0:0	4	<
call	57:37	57:67	4	FF_ARRAY_ELEMS
arg	57:52	57:67	5	frei0r_pathlist
water	57:52	0:0	6	frei0r_pathlist
forexpr	57:70	57:71	3	i ++
water	57:70	0:0	4	i
op	57:71	0:0	4	++
stmts	57:75	61:4	3	
water	57:75	0:0	4	{
water	58:8	0:0	4	ret
op	58:12	0:0	4	=
call	58:14	58:71	4	load_path
arg	58:24	58:27	5	ctx
water	58:24	0:0	6	ctx
arg	58:29	58:42	5	&s->dl_handle
op	58:29	0:0	6	&
water	58:30	0:0	6	s
op	58:31	0:0	6	->
water	58:33	0:0	6	dl_handle
arg	58:44	58:62	5	frei0r_pathlist[i]
water	58:44	0:0	6	frei0r_pathlist
op	58:59	0:0	6	[
water	58:60	0:0	6	i
op	58:61	0:0	6	]
arg	58:64	58:71	5	dl_name
water	58:64	0:0	6	dl_name
water	58:72	0:0	4	;
if	59:8	60:22	4	(ret < 0)
cond	59:12	59:18	5	ret < 0
water	59:12	0:0	6	ret
op	59:16	0:0	6	<
water	59:18	0:0	6	0
stmts	60:12	60:22	5	
return	60:12	60:22	6	ret
water	60:19	0:0	7	ret
water	61:4	0:0	4	}
if	62:4	65:4	2	(! s -> dl_handle)
cond	62:8	62:12	3	! s -> dl_handle
op	62:8	0:0	4	!
water	62:9	0:0	4	s
op	62:10	0:0	4	->
water	62:12	0:0	4	dl_handle
stmts	62:23	65:4	3	
water	62:23	0:0	4	{
call	63:8	63:74	4	av_log
arg	63:15	63:18	5	ctx
water	63:15	0:0	6	ctx
arg	63:20	63:32	5	AV_LOG_ERROR
water	63:20	0:0	6	AV_LOG_ERROR
arg	63:34	63:65	5	"Could not find module '%s'.\n"
water	63:34	0:0	6	"Could not find module '%s'.\n"
arg	63:67	63:74	5	dl_name
water	63:67	0:0	6	dl_name
water	63:75	0:0	4	;
return	64:8	64:30	4	AVERROR(EINVAL)
call	64:15	64:29	5	AVERROR
arg	64:23	64:29	6	EINVAL
water	64:23	0:0	7	EINVAL
water	65:4	0:0	4	}
if	66:4	75:30	2	(! ( f0r_init =load_sym (ctx ,"f0r_init" ) ) || ! ( f0r_get_plugin_info =load_sym (ctx ,"f0r_get_plugin_info" ) ) || ! ( s -> get_param_info =load_sym (ctx ,"f0r_get_param_info" ) ) || ! ( s -> get_param_value =load_sym (ctx ,"f0r_get_param_value" ) ) || ! ( s -> set_param_value =load_sym (ctx ,"f0r_set_param_value" ) ) || ! ( s -> update =load_sym (ctx ,"f0r_update" ) ) || ! ( s -> construct =load_sym (ctx ,"f0r_construct" ) ) || ! ( s -> destruct =load_sym (ctx ,"f0r_destruct" ) ) || ! ( s -> deinit =load_sym (ctx ,"f0r_deinit" ) ))
cond	66:8	74:67	3	! ( f0r_init =load_sym (ctx ,"f0r_init" ) ) || ! ( f0r_get_plugin_info =load_sym (ctx ,"f0r_get_plugin_info" ) ) || ! ( s -> get_param_info =load_sym (ctx ,"f0r_get_param_info" ) ) || ! ( s -> get_param_value =load_sym (ctx ,"f0r_get_param_value" ) ) || ! ( s -> set_param_value =load_sym (ctx ,"f0r_set_param_value" ) ) || ! ( s -> update =load_sym (ctx ,"f0r_update" ) ) || ! ( s -> construct =load_sym (ctx ,"f0r_construct" ) ) || ! ( s -> destruct =load_sym (ctx ,"f0r_destruct" ) ) || ! ( s -> deinit =load_sym (ctx ,"f0r_deinit" ) )
op	66:8	0:0	4	!
water	66:9	0:0	4	(
water	66:10	0:0	4	f0r_init
op	66:34	0:0	4	=
call	66:36	66:71	4	load_sym
arg	66:45	66:48	5	ctx
water	66:45	0:0	6	ctx
arg	66:50	66:71	5	"f0r_init"
water	66:50	0:0	6	"f0r_init"
water	66:72	0:0	4	)
op	66:74	0:0	4	||
op	67:8	0:0	4	!
water	67:9	0:0	4	(
water	67:10	0:0	4	f0r_get_plugin_info
op	67:34	0:0	4	=
call	67:36	67:71	4	load_sym
arg	67:45	67:48	5	ctx
water	67:45	0:0	6	ctx
arg	67:50	67:71	5	"f0r_get_plugin_info"
water	67:50	0:0	6	"f0r_get_plugin_info"
water	67:72	0:0	4	)
op	67:74	0:0	4	||
op	68:8	0:0	4	!
water	68:9	0:0	4	(
water	68:10	0:0	4	s
op	68:11	0:0	4	->
water	68:13	0:0	4	get_param_info
op	68:29	0:0	4	=
call	68:31	68:66	4	load_sym
arg	68:40	68:43	5	ctx
water	68:40	0:0	6	ctx
arg	68:45	68:66	5	"f0r_get_param_info"
water	68:45	0:0	6	"f0r_get_param_info"
water	68:67	0:0	4	)
op	68:69	0:0	4	||
op	69:8	0:0	4	!
water	69:9	0:0	4	(
water	69:10	0:0	4	s
op	69:11	0:0	4	->
water	69:13	0:0	4	get_param_value
op	69:29	0:0	4	=
call	69:31	69:66	4	load_sym
arg	69:40	69:43	5	ctx
water	69:40	0:0	6	ctx
arg	69:45	69:66	5	"f0r_get_param_value"
water	69:45	0:0	6	"f0r_get_param_value"
water	69:67	0:0	4	)
op	69:69	0:0	4	||
op	70:8	0:0	4	!
water	70:9	0:0	4	(
water	70:10	0:0	4	s
op	70:11	0:0	4	->
water	70:13	0:0	4	set_param_value
op	70:29	0:0	4	=
call	70:31	70:66	4	load_sym
arg	70:40	70:43	5	ctx
water	70:40	0:0	6	ctx
arg	70:45	70:66	5	"f0r_set_param_value"
water	70:45	0:0	6	"f0r_set_param_value"
water	70:67	0:0	4	)
op	70:69	0:0	4	||
op	71:8	0:0	4	!
water	71:9	0:0	4	(
water	71:10	0:0	4	s
op	71:11	0:0	4	->
water	71:13	0:0	4	update
op	71:29	0:0	4	=
call	71:31	71:66	4	load_sym
arg	71:40	71:43	5	ctx
water	71:40	0:0	6	ctx
arg	71:45	71:66	5	"f0r_update"
water	71:45	0:0	6	"f0r_update"
water	71:67	0:0	4	)
op	71:69	0:0	4	||
op	72:8	0:0	4	!
water	72:9	0:0	4	(
water	72:10	0:0	4	s
op	72:11	0:0	4	->
water	72:13	0:0	4	construct
op	72:29	0:0	4	=
call	72:31	72:66	4	load_sym
arg	72:40	72:43	5	ctx
water	72:40	0:0	6	ctx
arg	72:45	72:66	5	"f0r_construct"
water	72:45	0:0	6	"f0r_construct"
water	72:67	0:0	4	)
op	72:69	0:0	4	||
op	73:8	0:0	4	!
water	73:9	0:0	4	(
water	73:10	0:0	4	s
op	73:11	0:0	4	->
water	73:13	0:0	4	destruct
op	73:29	0:0	4	=
call	73:31	73:66	4	load_sym
arg	73:40	73:43	5	ctx
water	73:40	0:0	6	ctx
arg	73:45	73:66	5	"f0r_destruct"
water	73:45	0:0	6	"f0r_destruct"
water	73:67	0:0	4	)
op	73:69	0:0	4	||
op	74:8	0:0	4	!
water	74:9	0:0	4	(
water	74:10	0:0	4	s
op	74:11	0:0	4	->
water	74:13	0:0	4	deinit
op	74:29	0:0	4	=
call	74:31	74:66	4	load_sym
arg	74:40	74:43	5	ctx
water	74:40	0:0	6	ctx
arg	74:45	74:66	5	"f0r_deinit"
water	74:45	0:0	6	"f0r_deinit"
water	74:67	0:0	4	)
stmts	75:8	75:30	3	
return	75:8	75:30	4	AVERROR(EINVAL)
call	75:15	75:29	5	AVERROR
arg	75:23	75:29	6	EINVAL
water	75:23	0:0	7	EINVAL
if	76:4	79:4	2	(f0r_init ( ) < 0)
cond	76:8	76:21	3	f0r_init ( ) < 0
call	76:8	76:17	4	f0r_init
op	76:19	0:0	4	<
water	76:21	0:0	4	0
stmts	76:24	79:4	3	
water	76:24	0:0	4	{
call	77:8	77:71	4	av_log
arg	77:15	77:18	5	ctx
water	77:15	0:0	6	ctx
arg	77:20	77:32	5	AV_LOG_ERROR
water	77:20	0:0	6	AV_LOG_ERROR
arg	77:34	77:71	5	"Could not init the frei0r module.\n"
water	77:34	0:0	6	"Could not init the frei0r module.\n"
water	77:72	0:0	4	;
return	78:8	78:30	4	AVERROR(EINVAL)
call	78:15	78:29	5	AVERROR
arg	78:23	78:29	6	EINVAL
water	78:23	0:0	7	EINVAL
water	79:4	0:0	4	}
call	80:4	80:39	2	f0r_get_plugin_info
arg	80:24	80:39	3	&s->plugin_info
op	80:24	0:0	4	&
water	80:25	0:0	4	s
op	80:26	0:0	4	->
water	80:28	0:0	4	plugin_info
water	80:40	0:0	2	;
water	81:4	0:0	2	pi
op	81:7	0:0	2	=
op	81:9	0:0	2	&
water	81:10	0:0	2	s
op	81:11	0:0	2	->
water	81:13	0:0	2	plugin_info
water	81:24	0:0	2	;
if	82:4	90:4	2	(pi -> plugin_type != type)
cond	82:8	82:27	3	pi -> plugin_type != type
water	82:8	0:0	4	pi
op	82:10	0:0	4	->
water	82:12	0:0	4	plugin_type
op	82:24	0:0	4	!=
water	82:27	0:0	4	type
stmts	82:33	90:4	3	
water	82:33	0:0	4	{
call	83:8	88:79	4	av_log
arg	83:15	83:18	5	ctx
water	83:15	0:0	6	ctx
arg	83:20	83:32	5	AV_LOG_ERROR
water	83:20	0:0	6	AV_LOG_ERROR
arg	84:15	84:52	5	"Invalid type '%s' for this plugin\n"
water	84:15	0:0	6	"Invalid type '%s' for this plugin\n"
arg	85:15	88:79	5	pi->plugin_type==F0R_PLUGIN_TYPE_FILTER?"filter":pi->plugin_type==F0R_PLUGIN_TYPE_SOURCE?"source":pi->plugin_type==F0R_PLUGIN_TYPE_MIXER2?"mixer2":pi->plugin_type==F0R_PLUGIN_TYPE_MIXER3?"mixer3":"unknown"
water	85:15	0:0	6	pi
op	85:17	0:0	6	->
water	85:19	0:0	6	plugin_type
op	85:31	0:0	6	==
water	85:34	0:0	6	F0R_PLUGIN_TYPE_FILTER
water	85:57	0:0	6	?
water	85:59	0:0	6	"filter"
water	85:68	0:0	6	:
water	86:15	0:0	6	pi
op	86:17	0:0	6	->
water	86:19	0:0	6	plugin_type
op	86:31	0:0	6	==
water	86:34	0:0	6	F0R_PLUGIN_TYPE_SOURCE
water	86:57	0:0	6	?
water	86:59	0:0	6	"source"
water	86:68	0:0	6	:
water	87:15	0:0	6	pi
op	87:17	0:0	6	->
water	87:19	0:0	6	plugin_type
op	87:31	0:0	6	==
water	87:34	0:0	6	F0R_PLUGIN_TYPE_MIXER2
water	87:57	0:0	6	?
water	87:59	0:0	6	"mixer2"
water	87:68	0:0	6	:
water	88:15	0:0	6	pi
op	88:17	0:0	6	->
water	88:19	0:0	6	plugin_type
op	88:31	0:0	6	==
water	88:34	0:0	6	F0R_PLUGIN_TYPE_MIXER3
water	88:57	0:0	6	?
water	88:59	0:0	6	"mixer3"
water	88:68	0:0	6	:
water	88:70	0:0	6	"unknown"
water	88:80	0:0	4	;
return	89:8	89:30	4	AVERROR(EINVAL)
call	89:15	89:29	5	AVERROR
arg	89:23	89:29	6	EINVAL
water	89:23	0:0	7	EINVAL
water	90:4	0:0	4	}
call	91:4	98:83	2	av_log
arg	91:11	91:14	3	ctx
water	91:11	0:0	4	ctx
arg	91:16	91:30	3	AV_LOG_VERBOSE
water	91:16	0:0	4	AV_LOG_VERBOSE
arg	92:11	93:60	3	"name:%s author:'%s' explanation:'%s' color_model:%s ""frei0r_version:%d version:%d.%d num_params:%d\n"
water	92:11	0:0	4	"name:%s author:'%s' explanation:'%s' color_model:%s "
water	93:11	0:0	4	"frei0r_version:%d version:%d.%d num_params:%d\n"
arg	94:11	94:19	3	pi->name
water	94:11	0:0	4	pi
op	94:13	0:0	4	->
water	94:15	0:0	4	name
arg	94:21	94:31	3	pi->author
water	94:21	0:0	4	pi
op	94:23	0:0	4	->
water	94:25	0:0	4	author
arg	94:33	94:48	3	pi->explanation
water	94:33	0:0	4	pi
op	94:35	0:0	4	->
water	94:37	0:0	4	explanation
arg	95:11	97:79	3	pi->color_model==F0R_COLOR_MODEL_BGRA8888?"bgra8888":pi->color_model==F0R_COLOR_MODEL_RGBA8888?"rgba8888":pi->color_model==F0R_COLOR_MODEL_PACKED32?"packed32":"unknown"
water	95:11	0:0	4	pi
op	95:13	0:0	4	->
water	95:15	0:0	4	color_model
op	95:27	0:0	4	==
water	95:30	0:0	4	F0R_COLOR_MODEL_BGRA8888
water	95:55	0:0	4	?
water	95:57	0:0	4	"bgra8888"
water	95:68	0:0	4	:
water	96:11	0:0	4	pi
op	96:13	0:0	4	->
water	96:15	0:0	4	color_model
op	96:27	0:0	4	==
water	96:30	0:0	4	F0R_COLOR_MODEL_RGBA8888
water	96:55	0:0	4	?
water	96:57	0:0	4	"rgba8888"
water	96:68	0:0	4	:
water	97:11	0:0	4	pi
op	97:13	0:0	4	->
water	97:15	0:0	4	color_model
op	97:27	0:0	4	==
water	97:30	0:0	4	F0R_COLOR_MODEL_PACKED32
water	97:55	0:0	4	?
water	97:57	0:0	4	"packed32"
water	97:68	0:0	4	:
water	97:70	0:0	4	"unknown"
arg	98:11	98:29	3	pi->frei0r_version
water	98:11	0:0	4	pi
op	98:13	0:0	4	->
water	98:15	0:0	4	frei0r_version
arg	98:31	98:48	3	pi->major_version
water	98:31	0:0	4	pi
op	98:33	0:0	4	->
water	98:35	0:0	4	major_version
arg	98:50	98:67	3	pi->minor_version
water	98:50	0:0	4	pi
op	98:52	0:0	4	->
water	98:54	0:0	4	minor_version
arg	98:69	98:83	3	pi->num_params
water	98:69	0:0	4	pi
op	98:71	0:0	4	->
water	98:73	0:0	4	num_params
water	98:84	0:0	2	;
return	99:4	99:12	2	0
water	99:11	0:0	3	0
