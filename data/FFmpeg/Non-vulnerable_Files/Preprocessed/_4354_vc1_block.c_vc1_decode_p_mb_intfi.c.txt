func	1:0	114:0	0	static int	vc1_decode_p_mb_intfi
params	1:32	0:0	1	
param	1:33	1:46	2	VC1Context *	v
stmnts	0:0	113:12	1	
decl	3:4	3:29	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	v
op	3:26	0:0	2	->
water	3:28	0:0	2	s
decl	4:4	4:30	2	GetBitContext	*gb
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	gb
decl	5:4	5:9	2	int	i
decl	6:4	6:49	2	int	mb_pos
op	6:15	0:0	2	=
water	6:17	0:0	2	s
op	6:18	0:0	2	->
water	6:20	0:0	2	mb_x
op	6:25	0:0	2	+
water	6:27	0:0	2	s
op	6:28	0:0	2	->
water	6:30	0:0	2	mb_y
op	6:35	0:0	2	*
water	6:37	0:0	2	s
op	6:38	0:0	2	->
water	6:40	0:0	2	mb_stride
decl	7:4	7:15	2	int	cbp
op	7:12	0:0	2	=
water	7:14	0:0	2	0
decl	8:4	8:22	2	int	mqdiff
water	8:14	0:0	2	,
decl	8:4	8:22	2	int	mquant
decl	9:4	9:23	2	int	ttmb
op	9:13	0:0	2	=
water	9:15	0:0	2	v
op	9:16	0:0	2	->
water	9:18	0:0	2	ttfrm
decl	10:4	10:25	2	int	mb_has_coeffs
op	10:22	0:0	2	=
water	10:24	0:0	2	1
decl	11:4	11:20	2	int	dmv_x
water	11:13	0:0	2	,
decl	11:4	11:20	2	int	dmv_y
decl	12:4	12:11	2	int	val
decl	13:4	13:23	2	int	first_block
op	13:20	0:0	2	=
water	13:22	0:0	2	1
decl	14:4	14:20	2	int	dst_idx
water	14:15	0:0	2	,
decl	14:4	14:20	2	int	off
decl	15:4	15:21	2	int	pred_flag
op	15:18	0:0	2	=
water	15:20	0:0	2	0
decl	16:4	16:40	2	int	block_cbp
op	16:18	0:0	2	=
water	16:20	0:0	2	0
water	16:21	0:0	2	,
decl	16:4	16:40	2	int	pat
water	16:26	0:0	2	,
decl	16:4	16:40	2	int	block_tt
op	16:37	0:0	2	=
water	16:39	0:0	2	0
decl	17:4	17:22	2	int	idx_mbmode
op	17:19	0:0	2	=
water	17:21	0:0	2	0
water	18:4	0:0	2	mquant
op	18:11	0:0	2	=
water	18:13	0:0	2	v
op	18:14	0:0	2	->
water	18:16	0:0	2	pq
water	18:18	0:0	2	;
water	19:4	0:0	2	idx_mbmode
op	19:15	0:0	2	=
call	19:17	19:77	2	get_vlc2
arg	19:26	19:28	3	gb
water	19:26	0:0	4	gb
arg	19:30	19:50	3	v->mbmode_vlc->table
water	19:30	0:0	4	v
op	19:31	0:0	4	->
water	19:33	0:0	4	mbmode_vlc
op	19:43	0:0	4	->
water	19:45	0:0	4	table
arg	19:52	19:74	3	VC1_IF_MBMODE_VLC_BITS
water	19:52	0:0	4	VC1_IF_MBMODE_VLC_BITS
arg	19:76	19:77	3	2
water	19:76	0:0	4	2
water	19:78	0:0	2	;
if	20:4	58:4	2	(idx_mbmode <= 1)
cond	20:8	20:22	3	idx_mbmode <= 1
water	20:8	0:0	4	idx_mbmode
op	20:19	0:0	4	<=
water	20:22	0:0	4	1
stmts	20:25	58:4	3	
water	20:25	0:0	4	{
water	21:8	0:0	4	v
op	21:9	0:0	4	->
water	21:11	0:0	4	is_intra
op	21:19	0:0	4	[
water	21:20	0:0	4	s
op	21:21	0:0	4	->
water	21:23	0:0	4	mb_x
op	21:27	0:0	4	]
op	21:29	0:0	4	=
water	21:31	0:0	4	0
water	21:32	0:0	4	x3f
water	21:35	0:0	4	;
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	mb_intra
op	22:29	0:0	4	=
water	22:31	0:0	4	1
water	22:32	0:0	4	;
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	current_picture
op	23:26	0:0	4	.
water	23:27	0:0	4	motion_val
op	23:37	0:0	4	[
water	23:38	0:0	4	1
op	23:39	0:0	4	]
op	23:40	0:0	4	[
water	23:41	0:0	4	s
op	23:42	0:0	4	->
water	23:44	0:0	4	block_index
op	23:55	0:0	4	[
water	23:56	0:0	4	0
op	23:57	0:0	4	]
op	23:59	0:0	4	+
water	23:61	0:0	4	v
op	23:62	0:0	4	->
water	23:64	0:0	4	blocks_off
op	23:74	0:0	4	]
op	23:75	0:0	4	[
water	23:76	0:0	4	0
op	23:77	0:0	4	]
op	23:79	0:0	4	=
water	23:81	0:0	4	0
water	23:82	0:0	4	;
water	24:8	0:0	4	s
op	24:9	0:0	4	->
water	24:11	0:0	4	current_picture
op	24:26	0:0	4	.
water	24:27	0:0	4	motion_val
op	24:37	0:0	4	[
water	24:38	0:0	4	1
op	24:39	0:0	4	]
op	24:40	0:0	4	[
water	24:41	0:0	4	s
op	24:42	0:0	4	->
water	24:44	0:0	4	block_index
op	24:55	0:0	4	[
water	24:56	0:0	4	0
op	24:57	0:0	4	]
op	24:59	0:0	4	+
water	24:61	0:0	4	v
op	24:62	0:0	4	->
water	24:64	0:0	4	blocks_off
op	24:74	0:0	4	]
op	24:75	0:0	4	[
water	24:76	0:0	4	1
op	24:77	0:0	4	]
op	24:79	0:0	4	=
water	24:81	0:0	4	0
water	24:82	0:0	4	;
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	current_picture
op	25:26	0:0	4	.
water	25:27	0:0	4	mb_type
op	25:34	0:0	4	[
water	25:35	0:0	4	mb_pos
op	25:42	0:0	4	+
water	25:44	0:0	4	v
op	25:45	0:0	4	->
water	25:47	0:0	4	mb_off
op	25:53	0:0	4	]
op	25:55	0:0	4	=
water	25:57	0:0	4	MB_TYPE_INTRA
water	25:70	0:0	4	;
call	26:8	26:19	4	GET_MQUANT
water	26:20	0:0	4	;
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	current_picture
op	27:26	0:0	4	.
water	27:27	0:0	4	qscale_table
op	27:39	0:0	4	[
water	27:40	0:0	4	mb_pos
op	27:46	0:0	4	]
op	27:48	0:0	4	=
water	27:50	0:0	4	mquant
water	27:56	0:0	4	;
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	y_dc_scale
op	29:22	0:0	4	=
water	29:24	0:0	4	s
op	29:25	0:0	4	->
water	29:27	0:0	4	y_dc_scale_table
op	29:43	0:0	4	[
water	29:44	0:0	4	mquant
op	29:50	0:0	4	]
water	29:51	0:0	4	;
water	30:8	0:0	4	s
op	30:9	0:0	4	->
water	30:11	0:0	4	c_dc_scale
op	30:22	0:0	4	=
water	30:24	0:0	4	s
op	30:25	0:0	4	->
water	30:27	0:0	4	c_dc_scale_table
op	30:43	0:0	4	[
water	30:44	0:0	4	mquant
op	30:50	0:0	4	]
water	30:51	0:0	4	;
water	31:8	0:0	4	v
op	31:9	0:0	4	->
water	31:11	0:0	4	s
op	31:12	0:0	4	.
water	31:13	0:0	4	ac_pred
op	31:22	0:0	4	=
water	31:24	0:0	4	v
op	31:25	0:0	4	->
water	31:27	0:0	4	acpred_plane
op	31:39	0:0	4	[
water	31:40	0:0	4	mb_pos
op	31:46	0:0	4	]
op	31:48	0:0	4	=
call	31:50	31:62	4	get_bits1
arg	31:60	31:62	5	gb
water	31:60	0:0	6	gb
water	31:63	0:0	4	;
water	32:8	0:0	4	mb_has_coeffs
op	32:22	0:0	4	=
water	32:24	0:0	4	idx_mbmode
op	32:35	0:0	4	&
water	32:37	0:0	4	1
water	32:38	0:0	4	;
if	33:8	34:85	4	(mb_has_coeffs)
cond	33:12	33:12	5	mb_has_coeffs
water	33:12	0:0	6	mb_has_coeffs
stmts	34:12	34:85	5	
water	34:12	0:0	6	cbp
op	34:16	0:0	6	=
water	34:18	0:0	6	1
op	34:20	0:0	6	+
call	34:22	34:84	6	get_vlc2
arg	34:31	34:39	7	&v->s.gb
op	34:31	0:0	8	&
water	34:32	0:0	8	v
op	34:33	0:0	8	->
water	34:35	0:0	8	s
op	34:36	0:0	8	.
water	34:37	0:0	8	gb
arg	34:41	34:60	7	v->cbpcy_vlc->table
water	34:41	0:0	8	v
op	34:42	0:0	8	->
water	34:44	0:0	8	cbpcy_vlc
op	34:53	0:0	8	->
water	34:55	0:0	8	table
arg	34:62	34:81	7	VC1_ICBPCY_VLC_BITS
water	34:62	0:0	8	VC1_ICBPCY_VLC_BITS
arg	34:83	34:84	7	2
water	34:83	0:0	8	2
water	34:85	0:0	6	;
water	35:8	0:0	4	dst_idx
op	35:16	0:0	4	=
water	35:18	0:0	4	0
water	35:19	0:0	4	;
for	36:8	57:8	4	(i = 0 ;i < 6;i ++)
forinit	36:13	36:18	5	i = 0 ;
water	36:13	0:0	6	i
op	36:15	0:0	6	=
water	36:17	0:0	6	0
water	36:18	0:0	6	;
cond	36:20	36:24	5	i < 6
water	36:20	0:0	6	i
op	36:22	0:0	6	<
water	36:24	0:0	6	6
forexpr	36:27	36:28	5	i ++
water	36:27	0:0	6	i
op	36:28	0:0	6	++
stmts	36:32	57:8	5	
water	36:32	0:0	6	{
water	37:12	0:0	6	v
op	37:13	0:0	6	->
water	37:15	0:0	6	a_avail
op	37:23	0:0	6	=
water	37:25	0:0	6	v
op	37:26	0:0	6	->
water	37:28	0:0	6	c_avail
op	37:45	0:0	6	=
water	37:47	0:0	6	0
water	37:48	0:0	6	;
water	38:12	0:0	6	v
op	38:13	0:0	6	->
water	38:15	0:0	6	mb_type
op	38:22	0:0	6	[
water	38:23	0:0	6	0
op	38:24	0:0	6	]
op	38:25	0:0	6	[
water	38:26	0:0	6	s
op	38:27	0:0	6	->
water	38:29	0:0	6	block_index
op	38:40	0:0	6	[
water	38:41	0:0	6	i
op	38:42	0:0	6	]
op	38:43	0:0	6	]
op	38:45	0:0	6	=
water	38:47	0:0	6	1
water	38:48	0:0	6	;
water	39:12	0:0	6	s
op	39:13	0:0	6	->
water	39:15	0:0	6	dc_val
op	39:21	0:0	6	[
water	39:22	0:0	6	0
op	39:23	0:0	6	]
op	39:24	0:0	6	[
water	39:25	0:0	6	s
op	39:26	0:0	6	->
water	39:28	0:0	6	block_index
op	39:39	0:0	6	[
water	39:40	0:0	6	i
op	39:41	0:0	6	]
op	39:42	0:0	6	]
op	39:45	0:0	6	=
water	39:47	0:0	6	0
water	39:48	0:0	6	;
water	40:12	0:0	6	dst_idx
op	40:20	0:0	6	+=
water	40:23	0:0	6	i
op	40:25	0:0	6	>>
water	40:28	0:0	6	2
water	40:29	0:0	6	;
water	41:12	0:0	6	val
op	41:16	0:0	6	=
water	41:18	0:0	6	(
water	41:19	0:0	6	(
water	41:20	0:0	6	cbp
op	41:24	0:0	6	>>
water	41:27	0:0	6	(
water	41:28	0:0	6	5
op	41:30	0:0	6	-
water	41:32	0:0	6	i
water	41:33	0:0	6	)
water	41:34	0:0	6	)
op	41:36	0:0	6	&
water	41:38	0:0	6	1
water	41:39	0:0	6	)
water	41:40	0:0	6	;
if	42:12	43:80	6	(i == 2 || i == 3 || ! s -> first_slice_line)
cond	42:16	42:40	7	i == 2 || i == 3 || ! s -> first_slice_line
water	42:16	0:0	8	i
op	42:18	0:0	8	==
water	42:21	0:0	8	2
op	42:23	0:0	8	||
water	42:26	0:0	8	i
op	42:28	0:0	8	==
water	42:31	0:0	8	3
op	42:33	0:0	8	||
op	42:36	0:0	8	!
water	42:37	0:0	8	s
op	42:38	0:0	8	->
water	42:40	0:0	8	first_slice_line
stmts	43:16	43:80	7	
water	43:16	0:0	8	v
op	43:17	0:0	8	->
water	43:19	0:0	8	a_avail
op	43:27	0:0	8	=
water	43:29	0:0	8	v
op	43:30	0:0	8	->
water	43:32	0:0	8	mb_type
op	43:39	0:0	8	[
water	43:40	0:0	8	0
op	43:41	0:0	8	]
op	43:42	0:0	8	[
water	43:43	0:0	8	s
op	43:44	0:0	8	->
water	43:46	0:0	8	block_index
op	43:57	0:0	8	[
water	43:58	0:0	8	i
op	43:59	0:0	8	]
op	43:61	0:0	8	-
water	43:63	0:0	8	s
op	43:64	0:0	8	->
water	43:66	0:0	8	block_wrap
op	43:76	0:0	8	[
water	43:77	0:0	8	i
op	43:78	0:0	8	]
op	43:79	0:0	8	]
water	43:80	0:0	8	;
if	44:12	45:65	6	(i == 1 || i == 3 || s -> mb_x)
cond	44:16	44:39	7	i == 1 || i == 3 || s -> mb_x
water	44:16	0:0	8	i
op	44:18	0:0	8	==
water	44:21	0:0	8	1
op	44:23	0:0	8	||
water	44:26	0:0	8	i
op	44:28	0:0	8	==
water	44:31	0:0	8	3
op	44:33	0:0	8	||
water	44:36	0:0	8	s
op	44:37	0:0	8	->
water	44:39	0:0	8	mb_x
stmts	45:16	45:65	7	
water	45:16	0:0	8	v
op	45:17	0:0	8	->
water	45:19	0:0	8	c_avail
op	45:27	0:0	8	=
water	45:29	0:0	8	v
op	45:30	0:0	8	->
water	45:32	0:0	8	mb_type
op	45:39	0:0	8	[
water	45:40	0:0	8	0
op	45:41	0:0	8	]
op	45:42	0:0	8	[
water	45:43	0:0	8	s
op	45:44	0:0	8	->
water	45:46	0:0	8	block_index
op	45:57	0:0	8	[
water	45:58	0:0	8	i
op	45:59	0:0	8	]
op	45:61	0:0	8	-
water	45:63	0:0	8	1
op	45:64	0:0	8	]
water	45:65	0:0	8	;
call	46:12	47:73	6	vc1_decode_intra_block
arg	46:35	46:36	7	v
water	46:35	0:0	8	v
arg	46:38	46:49	7	s->block[i]
water	46:38	0:0	8	s
op	46:39	0:0	8	->
water	46:41	0:0	8	block
op	46:46	0:0	8	[
water	46:47	0:0	8	i
op	46:48	0:0	8	]
arg	46:51	46:52	7	i
water	46:51	0:0	8	i
arg	46:54	46:57	7	val
water	46:54	0:0	8	val
arg	46:59	46:65	7	mquant
water	46:59	0:0	8	mquant
arg	47:35	47:73	7	(i&4)?v->codingset2:v->codingset
water	47:35	0:0	8	(
water	47:36	0:0	8	i
op	47:38	0:0	8	&
water	47:40	0:0	8	4
water	47:41	0:0	8	)
water	47:43	0:0	8	?
water	47:45	0:0	8	v
op	47:46	0:0	8	->
water	47:48	0:0	8	codingset2
water	47:59	0:0	8	:
water	47:61	0:0	8	v
op	47:62	0:0	8	->
water	47:64	0:0	8	codingset
water	47:74	0:0	6	;
if	48:12	49:24	6	(CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	48:16	48:79	7	CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
water	48:16	0:0	8	CONFIG_GRAY
op	48:28	0:0	8	&&
water	48:31	0:0	8	(
water	48:32	0:0	8	i
op	48:34	0:0	8	>
water	48:36	0:0	8	3
water	48:37	0:0	8	)
op	48:39	0:0	8	&&
water	48:42	0:0	8	(
water	48:43	0:0	8	s
op	48:44	0:0	8	->
water	48:46	0:0	8	avctx
op	48:51	0:0	8	->
water	48:53	0:0	8	flags
op	48:59	0:0	8	&
water	48:61	0:0	8	AV_CODEC_FLAG_GRAY
water	48:79	0:0	8	)
stmts	49:16	49:24	7	
continue	49:16	49:24	8	
call	50:12	50:51	6	v->vc1dsp.vc1_inv_trans_8x8
arg	50:40	50:51	7	s->block[i]
water	50:40	0:0	8	s
op	50:41	0:0	8	->
water	50:43	0:0	8	block
op	50:48	0:0	8	[
water	50:49	0:0	8	i
op	50:50	0:0	8	]
water	50:52	0:0	6	;
water	51:12	0:0	6	off
op	51:17	0:0	6	=
water	51:19	0:0	6	(
water	51:20	0:0	6	i
op	51:22	0:0	6	&
water	51:24	0:0	6	4
water	51:25	0:0	6	)
water	51:27	0:0	6	?
water	51:29	0:0	6	0
water	51:31	0:0	6	:
water	51:33	0:0	6	(
water	51:34	0:0	6	(
water	51:35	0:0	6	i
op	51:37	0:0	6	&
water	51:39	0:0	6	1
water	51:40	0:0	6	)
op	51:42	0:0	6	*
water	51:44	0:0	6	8
op	51:46	0:0	6	+
water	51:48	0:0	6	(
water	51:49	0:0	6	i
op	51:51	0:0	6	&
water	51:53	0:0	6	2
water	51:54	0:0	6	)
op	51:56	0:0	6	*
water	51:58	0:0	6	4
op	51:60	0:0	6	*
water	51:62	0:0	6	s
op	51:63	0:0	6	->
water	51:65	0:0	6	linesize
water	51:73	0:0	6	)
water	51:74	0:0	6	;
call	52:12	55:67	6	s->idsp.put_signed_pixels_clamped
arg	52:46	52:57	7	s->block[i]
water	52:46	0:0	8	s
op	52:47	0:0	8	->
water	52:49	0:0	8	block
op	52:54	0:0	8	[
water	52:55	0:0	8	i
op	52:56	0:0	8	]
arg	53:46	53:68	7	s->dest[dst_idx]+off
water	53:46	0:0	8	s
op	53:47	0:0	8	->
water	53:49	0:0	8	dest
op	53:53	0:0	8	[
water	53:54	0:0	8	dst_idx
op	53:61	0:0	8	]
op	53:63	0:0	8	+
water	53:65	0:0	8	off
arg	54:46	55:67	7	(i&4)?s->uvlinesize:s->linesize
water	54:46	0:0	8	(
water	54:47	0:0	8	i
op	54:49	0:0	8	&
water	54:51	0:0	8	4
water	54:52	0:0	8	)
water	54:54	0:0	8	?
water	54:56	0:0	8	s
op	54:57	0:0	8	->
water	54:59	0:0	8	uvlinesize
water	55:54	0:0	8	:
water	55:56	0:0	8	s
op	55:57	0:0	8	->
water	55:59	0:0	8	linesize
water	55:68	0:0	6	;
water	57:8	0:0	6	}
water	58:4	0:0	4	}
else	58:6	110:4	2
stmts	58:11	110:4	3	
water	58:11	0:0	4	{
water	59:8	0:0	4	s
op	59:9	0:0	4	->
water	59:11	0:0	4	mb_intra
op	59:20	0:0	4	=
water	59:22	0:0	4	v
op	59:23	0:0	4	->
water	59:25	0:0	4	is_intra
op	59:33	0:0	4	[
water	59:34	0:0	4	s
op	59:35	0:0	4	->
water	59:37	0:0	4	mb_x
op	59:41	0:0	4	]
op	59:43	0:0	4	=
water	59:45	0:0	4	0
water	59:46	0:0	4	;
water	60:8	0:0	4	s
op	60:9	0:0	4	->
water	60:11	0:0	4	current_picture
op	60:26	0:0	4	.
water	60:27	0:0	4	mb_type
op	60:34	0:0	4	[
water	60:35	0:0	4	mb_pos
op	60:42	0:0	4	+
water	60:44	0:0	4	v
op	60:45	0:0	4	->
water	60:47	0:0	4	mb_off
op	60:53	0:0	4	]
op	60:55	0:0	4	=
water	60:57	0:0	4	MB_TYPE_16x16
water	60:70	0:0	4	;
for	61:8	62:48	4	(i = 0 ;i < 6;i ++)
forinit	61:13	61:18	5	i = 0 ;
water	61:13	0:0	6	i
op	61:15	0:0	6	=
water	61:17	0:0	6	0
water	61:18	0:0	6	;
cond	61:20	61:24	5	i < 6
water	61:20	0:0	6	i
op	61:22	0:0	6	<
water	61:24	0:0	6	6
forexpr	61:27	61:28	5	i ++
water	61:27	0:0	6	i
op	61:28	0:0	6	++
stmts	62:12	62:48	5	
water	62:12	0:0	6	v
op	62:13	0:0	6	->
water	62:15	0:0	6	mb_type
op	62:22	0:0	6	[
water	62:23	0:0	6	0
op	62:24	0:0	6	]
op	62:25	0:0	6	[
water	62:26	0:0	6	s
op	62:27	0:0	6	->
water	62:29	0:0	6	block_index
op	62:40	0:0	6	[
water	62:41	0:0	6	i
op	62:42	0:0	6	]
op	62:43	0:0	6	]
op	62:45	0:0	6	=
water	62:47	0:0	6	0
water	62:48	0:0	6	;
if	63:8	71:8	4	(idx_mbmode <= 5)
cond	63:12	63:26	5	idx_mbmode <= 5
water	63:12	0:0	6	idx_mbmode
op	63:23	0:0	6	<=
water	63:26	0:0	6	5
stmts	63:29	71:8	5	
water	63:29	0:0	6	{
water	64:12	0:0	6	dmv_x
op	64:18	0:0	6	=
water	64:20	0:0	6	dmv_y
op	64:26	0:0	6	=
water	64:28	0:0	6	pred_flag
op	64:38	0:0	6	=
water	64:40	0:0	6	0
water	64:41	0:0	6	;
if	65:12	67:12	6	(idx_mbmode & 1)
cond	65:16	65:29	7	idx_mbmode & 1
water	65:16	0:0	8	idx_mbmode
op	65:27	0:0	8	&
water	65:29	0:0	8	1
stmts	65:32	67:12	7	
water	65:32	0:0	8	{
call	66:16	66:67	8	get_mvdata_interlaced
arg	66:38	66:39	9	v
water	66:38	0:0	10	v
arg	66:41	66:47	9	&dmv_x
op	66:41	0:0	10	&
water	66:42	0:0	10	dmv_x
arg	66:49	66:55	9	&dmv_y
op	66:49	0:0	10	&
water	66:50	0:0	10	dmv_y
arg	66:57	66:67	9	&pred_flag
op	66:57	0:0	10	&
water	66:58	0:0	10	pred_flag
water	66:68	0:0	8	;
water	67:12	0:0	8	}
call	68:12	68:101	6	ff_vc1_pred_mv
arg	68:27	68:28	7	v
water	68:27	0:0	8	v
arg	68:30	68:31	7	0
water	68:30	0:0	8	0
arg	68:33	68:38	7	dmv_x
water	68:33	0:0	8	dmv_x
arg	68:40	68:45	7	dmv_y
water	68:40	0:0	8	dmv_y
arg	68:47	68:48	7	1
water	68:47	0:0	8	1
arg	68:50	68:60	7	v->range_x
water	68:50	0:0	8	v
op	68:51	0:0	8	->
water	68:53	0:0	8	range_x
arg	68:62	68:72	7	v->range_y
water	68:62	0:0	8	v
op	68:63	0:0	8	->
water	68:65	0:0	8	range_y
arg	68:74	68:87	7	v->mb_type[0]
water	68:74	0:0	8	v
op	68:75	0:0	8	->
water	68:77	0:0	8	mb_type
op	68:84	0:0	8	[
water	68:85	0:0	8	0
op	68:86	0:0	8	]
arg	68:89	68:98	7	pred_flag
water	68:89	0:0	8	pred_flag
arg	68:100	68:101	7	0
water	68:100	0:0	8	0
water	68:102	0:0	6	;
call	69:12	69:30	6	ff_vc1_mc_1mv
arg	69:26	69:27	7	v
water	69:26	0:0	8	v
arg	69:29	69:30	7	0
water	69:29	0:0	8	0
water	69:31	0:0	6	;
water	70:12	0:0	6	mb_has_coeffs
op	70:26	0:0	6	=
op	70:28	0:0	6	!
water	70:29	0:0	6	(
water	70:30	0:0	6	idx_mbmode
op	70:41	0:0	6	&
water	70:43	0:0	6	2
water	70:44	0:0	6	)
water	70:45	0:0	6	;
water	71:8	0:0	6	}
else	71:10	82:8	4
stmts	71:15	82:8	5	
water	71:15	0:0	6	{
water	72:12	0:0	6	v
op	72:13	0:0	6	->
water	72:15	0:0	6	fourmvbp
op	72:24	0:0	6	=
call	72:26	72:96	6	get_vlc2
arg	72:35	72:37	7	gb
water	72:35	0:0	8	gb
arg	72:39	72:61	7	v->fourmvbp_vlc->table
water	72:39	0:0	8	v
op	72:40	0:0	8	->
water	72:42	0:0	8	fourmvbp_vlc
op	72:54	0:0	8	->
water	72:56	0:0	8	table
arg	72:63	72:93	7	VC1_4MV_BLOCK_PATTERN_VLC_BITS
water	72:63	0:0	8	VC1_4MV_BLOCK_PATTERN_VLC_BITS
arg	72:95	72:96	7	1
water	72:95	0:0	8	1
water	72:97	0:0	6	;
for	73:12	79:12	6	(i = 0 ;i < 4;i ++)
forinit	73:17	73:22	7	i = 0 ;
water	73:17	0:0	8	i
op	73:19	0:0	8	=
water	73:21	0:0	8	0
water	73:22	0:0	8	;
cond	73:24	73:28	7	i < 4
water	73:24	0:0	8	i
op	73:26	0:0	8	<
water	73:28	0:0	8	4
forexpr	73:31	73:32	7	i ++
water	73:31	0:0	8	i
op	73:32	0:0	8	++
stmts	73:36	79:12	7	
water	73:36	0:0	8	{
water	74:16	0:0	8	dmv_x
op	74:22	0:0	8	=
water	74:24	0:0	8	dmv_y
op	74:30	0:0	8	=
water	74:32	0:0	8	pred_flag
op	74:42	0:0	8	=
water	74:44	0:0	8	0
water	74:45	0:0	8	;
if	75:16	76:72	8	(v -> fourmvbp & ( 8 >> i ))
cond	75:20	75:41	9	v -> fourmvbp & ( 8 >> i )
water	75:20	0:0	10	v
op	75:21	0:0	10	->
water	75:23	0:0	10	fourmvbp
op	75:32	0:0	10	&
water	75:34	0:0	10	(
water	75:35	0:0	10	8
op	75:37	0:0	10	>>
water	75:40	0:0	10	i
water	75:41	0:0	10	)
stmts	76:20	76:72	9	
call	76:20	76:71	10	get_mvdata_interlaced
arg	76:42	76:43	11	v
water	76:42	0:0	12	v
arg	76:45	76:51	11	&dmv_x
op	76:45	0:0	12	&
water	76:46	0:0	12	dmv_x
arg	76:53	76:59	11	&dmv_y
op	76:53	0:0	12	&
water	76:54	0:0	12	dmv_y
arg	76:61	76:71	11	&pred_flag
op	76:61	0:0	12	&
water	76:62	0:0	12	pred_flag
water	76:72	0:0	10	;
call	77:16	77:105	8	ff_vc1_pred_mv
arg	77:31	77:32	9	v
water	77:31	0:0	10	v
arg	77:34	77:35	9	i
water	77:34	0:0	10	i
arg	77:37	77:42	9	dmv_x
water	77:37	0:0	10	dmv_x
arg	77:44	77:49	9	dmv_y
water	77:44	0:0	10	dmv_y
arg	77:51	77:52	9	0
water	77:51	0:0	10	0
arg	77:54	77:64	9	v->range_x
water	77:54	0:0	10	v
op	77:55	0:0	10	->
water	77:57	0:0	10	range_x
arg	77:66	77:76	9	v->range_y
water	77:66	0:0	10	v
op	77:67	0:0	10	->
water	77:69	0:0	10	range_y
arg	77:78	77:91	9	v->mb_type[0]
water	77:78	0:0	10	v
op	77:79	0:0	10	->
water	77:81	0:0	10	mb_type
op	77:88	0:0	10	[
water	77:89	0:0	10	0
op	77:90	0:0	10	]
arg	77:93	77:102	9	pred_flag
water	77:93	0:0	10	pred_flag
arg	77:104	77:105	9	0
water	77:104	0:0	10	0
water	77:106	0:0	8	;
call	78:16	78:45	8	ff_vc1_mc_4mv_luma
arg	78:35	78:36	9	v
water	78:35	0:0	10	v
arg	78:38	78:39	9	i
water	78:38	0:0	10	i
arg	78:41	78:42	9	0
water	78:41	0:0	10	0
arg	78:44	78:45	9	0
water	78:44	0:0	10	0
water	78:46	0:0	8	;
water	79:12	0:0	8	}
call	80:12	80:37	6	ff_vc1_mc_4mv_chroma
arg	80:33	80:34	7	v
water	80:33	0:0	8	v
arg	80:36	80:37	7	0
water	80:36	0:0	8	0
water	80:38	0:0	6	;
water	81:12	0:0	6	mb_has_coeffs
op	81:26	0:0	6	=
water	81:28	0:0	6	idx_mbmode
op	81:39	0:0	6	&
water	81:41	0:0	6	1
water	81:42	0:0	6	;
water	82:8	0:0	6	}
if	83:8	84:86	4	(mb_has_coeffs)
cond	83:12	83:12	5	mb_has_coeffs
water	83:12	0:0	6	mb_has_coeffs
stmts	84:12	84:86	5	
water	84:12	0:0	6	cbp
op	84:16	0:0	6	=
water	84:18	0:0	6	1
op	84:20	0:0	6	+
call	84:22	84:85	6	get_vlc2
arg	84:31	84:39	7	&v->s.gb
op	84:31	0:0	8	&
water	84:32	0:0	8	v
op	84:33	0:0	8	->
water	84:35	0:0	8	s
op	84:36	0:0	8	.
water	84:37	0:0	8	gb
arg	84:41	84:60	7	v->cbpcy_vlc->table
water	84:41	0:0	8	v
op	84:42	0:0	8	->
water	84:44	0:0	8	cbpcy_vlc
op	84:53	0:0	8	->
water	84:55	0:0	8	table
arg	84:62	84:82	7	VC1_CBPCY_P_VLC_BITS
water	84:62	0:0	8	VC1_CBPCY_P_VLC_BITS
arg	84:84	84:85	7	2
water	84:84	0:0	8	2
water	84:86	0:0	6	;
if	85:8	87:8	4	(cbp)
cond	85:12	85:12	5	cbp
water	85:12	0:0	6	cbp
stmts	85:17	87:8	5	
water	85:17	0:0	6	{
call	86:12	86:23	6	GET_MQUANT
water	86:24	0:0	6	;
water	87:8	0:0	6	}
water	88:8	0:0	4	s
op	88:9	0:0	4	->
water	88:11	0:0	4	current_picture
op	88:26	0:0	4	.
water	88:27	0:0	4	qscale_table
op	88:39	0:0	4	[
water	88:40	0:0	4	mb_pos
op	88:46	0:0	4	]
op	88:48	0:0	4	=
water	88:50	0:0	4	mquant
water	88:56	0:0	4	;
if	89:8	91:8	4	(! v -> ttmbf && cbp)
cond	89:12	89:25	5	! v -> ttmbf && cbp
op	89:12	0:0	6	!
water	89:13	0:0	6	v
op	89:14	0:0	6	->
water	89:16	0:0	6	ttmbf
op	89:22	0:0	6	&&
water	89:25	0:0	6	cbp
stmts	89:30	91:8	5	
water	89:30	0:0	6	{
water	90:12	0:0	6	ttmb
op	90:17	0:0	6	=
call	90:19	90:88	6	get_vlc2
arg	90:28	90:30	7	gb
water	90:28	0:0	8	gb
arg	90:32	90:66	7	ff_vc1_ttmb_vlc[v->tt_index].table
water	90:32	0:0	8	ff_vc1_ttmb_vlc
op	90:47	0:0	8	[
water	90:48	0:0	8	v
op	90:49	0:0	8	->
water	90:51	0:0	8	tt_index
op	90:59	0:0	8	]
op	90:60	0:0	8	.
water	90:61	0:0	8	table
arg	90:68	90:85	7	VC1_TTMB_VLC_BITS
water	90:68	0:0	8	VC1_TTMB_VLC_BITS
arg	90:87	90:88	7	2
water	90:87	0:0	8	2
water	90:89	0:0	6	;
water	91:8	0:0	6	}
water	92:8	0:0	4	dst_idx
op	92:16	0:0	4	=
water	92:18	0:0	4	0
water	92:19	0:0	4	;
for	93:8	109:8	4	(i = 0 ;i < 6;i ++)
forinit	93:13	93:18	5	i = 0 ;
water	93:13	0:0	6	i
op	93:15	0:0	6	=
water	93:17	0:0	6	0
water	93:18	0:0	6	;
cond	93:20	93:24	5	i < 6
water	93:20	0:0	6	i
op	93:22	0:0	6	<
water	93:24	0:0	6	6
forexpr	93:27	93:28	5	i ++
water	93:27	0:0	6	i
op	93:28	0:0	6	++
stmts	93:32	109:8	5	
water	93:32	0:0	6	{
water	94:12	0:0	6	s
op	94:13	0:0	6	->
water	94:15	0:0	6	dc_val
op	94:21	0:0	6	[
water	94:22	0:0	6	0
op	94:23	0:0	6	]
op	94:24	0:0	6	[
water	94:25	0:0	6	s
op	94:26	0:0	6	->
water	94:28	0:0	6	block_index
op	94:39	0:0	6	[
water	94:40	0:0	6	i
op	94:41	0:0	6	]
op	94:42	0:0	6	]
op	94:44	0:0	6	=
water	94:46	0:0	6	0
water	94:47	0:0	6	;
water	95:12	0:0	6	dst_idx
op	95:20	0:0	6	+=
water	95:23	0:0	6	i
op	95:25	0:0	6	>>
water	95:28	0:0	6	2
water	95:29	0:0	6	;
water	96:12	0:0	6	val
op	96:16	0:0	6	=
water	96:18	0:0	6	(
water	96:19	0:0	6	(
water	96:20	0:0	6	cbp
op	96:24	0:0	6	>>
water	96:27	0:0	6	(
water	96:28	0:0	6	5
op	96:30	0:0	6	-
water	96:32	0:0	6	i
water	96:33	0:0	6	)
water	96:34	0:0	6	)
op	96:36	0:0	6	&
water	96:38	0:0	6	1
water	96:39	0:0	6	)
water	96:40	0:0	6	;
water	97:12	0:0	6	off
op	97:16	0:0	6	=
water	97:18	0:0	6	(
water	97:19	0:0	6	i
op	97:21	0:0	6	&
water	97:23	0:0	6	4
water	97:24	0:0	6	)
water	97:26	0:0	6	?
water	97:28	0:0	6	0
water	97:30	0:0	6	:
water	97:32	0:0	6	(
water	97:33	0:0	6	i
op	97:35	0:0	6	&
water	97:37	0:0	6	1
water	97:38	0:0	6	)
op	97:40	0:0	6	*
water	97:42	0:0	6	8
op	97:44	0:0	6	+
water	97:46	0:0	6	(
water	97:47	0:0	6	i
op	97:49	0:0	6	&
water	97:51	0:0	6	2
water	97:52	0:0	6	)
op	97:54	0:0	6	*
water	97:56	0:0	6	4
op	97:58	0:0	6	*
water	97:60	0:0	6	s
op	97:61	0:0	6	->
water	97:63	0:0	6	linesize
water	97:71	0:0	6	;
if	98:12	108:12	6	(val)
cond	98:16	98:16	7	val
water	98:16	0:0	8	val
stmts	98:21	108:12	7	
water	98:21	0:0	8	{
water	99:16	0:0	8	pat
op	99:20	0:0	8	=
call	99:22	103:50	8	vc1_decode_p_block
arg	99:41	99:42	9	v
water	99:41	0:0	10	v
arg	99:44	99:55	9	s->block[i]
water	99:44	0:0	10	s
op	99:45	0:0	10	->
water	99:47	0:0	10	block
op	99:52	0:0	10	[
water	99:53	0:0	10	i
op	99:54	0:0	10	]
arg	99:57	99:58	9	i
water	99:57	0:0	10	i
arg	99:60	99:66	9	mquant
water	99:60	0:0	10	mquant
arg	99:68	99:72	9	ttmb
water	99:68	0:0	10	ttmb
arg	100:41	100:52	9	first_block
water	100:41	0:0	10	first_block
arg	100:54	100:76	9	s->dest[dst_idx]+off
water	100:54	0:0	10	s
op	100:55	0:0	10	->
water	100:57	0:0	10	dest
op	100:61	0:0	10	[
water	100:62	0:0	10	dst_idx
op	100:69	0:0	10	]
op	100:71	0:0	10	+
water	100:73	0:0	10	off
arg	101:41	101:78	9	(i&4)?s->uvlinesize:s->linesize
water	101:41	0:0	10	(
water	101:42	0:0	10	i
op	101:44	0:0	10	&
water	101:46	0:0	10	4
water	101:47	0:0	10	)
water	101:49	0:0	10	?
water	101:51	0:0	10	s
op	101:52	0:0	10	->
water	101:54	0:0	10	uvlinesize
water	101:65	0:0	10	:
water	101:67	0:0	10	s
op	101:68	0:0	10	->
water	101:70	0:0	10	linesize
arg	102:41	102:105	9	CONFIG_GRAY&&(i&4)&&(s->avctx->flags&AV_CODEC_FLAG_GRAY)
water	102:41	0:0	10	CONFIG_GRAY
op	102:53	0:0	10	&&
water	102:56	0:0	10	(
water	102:57	0:0	10	i
op	102:59	0:0	10	&
water	102:61	0:0	10	4
water	102:62	0:0	10	)
op	102:64	0:0	10	&&
water	102:67	0:0	10	(
water	102:68	0:0	10	s
op	102:69	0:0	10	->
water	102:71	0:0	10	avctx
op	102:76	0:0	10	->
water	102:78	0:0	10	flags
op	102:84	0:0	10	&
water	102:86	0:0	10	AV_CODEC_FLAG_GRAY
water	102:104	0:0	10	)
arg	103:41	103:50	9	&block_tt
op	103:41	0:0	10	&
water	103:42	0:0	10	block_tt
water	103:51	0:0	8	;
water	104:16	0:0	8	block_cbp
op	104:26	0:0	8	|=
water	104:29	0:0	8	pat
op	104:33	0:0	8	<<
water	104:36	0:0	8	(
water	104:37	0:0	8	i
op	104:39	0:0	8	<<
water	104:42	0:0	8	2
water	104:43	0:0	8	)
water	104:44	0:0	8	;
if	105:16	106:29	8	(! v -> ttmbf && ttmb < 8)
cond	105:20	105:40	9	! v -> ttmbf && ttmb < 8
op	105:20	0:0	10	!
water	105:21	0:0	10	v
op	105:22	0:0	10	->
water	105:24	0:0	10	ttmbf
op	105:30	0:0	10	&&
water	105:33	0:0	10	ttmb
op	105:38	0:0	10	<
water	105:40	0:0	10	8
stmts	106:20	106:29	9	
water	106:20	0:0	10	ttmb
op	106:25	0:0	10	=
op	106:27	0:0	10	-
water	106:28	0:0	10	1
water	106:29	0:0	10	;
water	107:16	0:0	8	first_block
op	107:28	0:0	8	=
water	107:30	0:0	8	0
water	107:31	0:0	8	;
water	108:12	0:0	8	}
water	109:8	0:0	6	}
water	110:4	0:0	4	}
if	111:4	112:90	2	(s -> mb_x == s -> mb_width - 1)
cond	111:8	111:33	3	s -> mb_x == s -> mb_width - 1
water	111:8	0:0	4	s
op	111:9	0:0	4	->
water	111:11	0:0	4	mb_x
op	111:16	0:0	4	==
water	111:19	0:0	4	s
op	111:20	0:0	4	->
water	111:22	0:0	4	mb_width
op	111:31	0:0	4	-
water	111:33	0:0	4	1
stmts	112:8	112:90	3	
call	112:8	112:89	4	memmove
arg	112:16	112:32	5	v->is_intra_base
water	112:16	0:0	6	v
op	112:17	0:0	6	->
water	112:19	0:0	6	is_intra_base
arg	112:34	112:45	5	v->is_intra
water	112:34	0:0	6	v
op	112:35	0:0	6	->
water	112:37	0:0	6	is_intra
arg	112:47	112:89	5	sizeof(v->is_intra_base[0])*s->mb_stride
op	112:47	0:0	6	sizeof
water	112:53	0:0	6	(
water	112:54	0:0	6	v
op	112:55	0:0	6	->
water	112:57	0:0	6	is_intra_base
op	112:70	0:0	6	[
water	112:71	0:0	6	0
op	112:72	0:0	6	]
water	112:73	0:0	6	)
op	112:75	0:0	6	*
water	112:77	0:0	6	s
op	112:78	0:0	6	->
water	112:80	0:0	6	mb_stride
water	112:90	0:0	4	;
return	113:4	113:12	2	0
water	113:11	0:0	3	0
