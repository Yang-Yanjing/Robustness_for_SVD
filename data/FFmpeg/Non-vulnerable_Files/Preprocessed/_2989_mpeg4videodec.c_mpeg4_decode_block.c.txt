func	1:0	241:0	0	static inline int	mpeg4_decode_block
params	1:36	0:0	1	
param	1:37	1:57	2	Mpeg4DecContext *	ctx
param	1:59	1:73	2	int16_t *	block
param	2:37	2:42	2	int	n
param	2:44	2:53	2	int	coded
param	2:55	2:64	2	int	intra
param	2:66	2:74	2	int	rvlc
stmnts	0:0	240:12	1	
decl	4:4	4:31	2	MpegEncContext	*s
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	ctx
op	4:28	0:0	2	->
water	4:30	0:0	2	m
decl	5:4	5:39	2	int	level
water	5:13	0:0	2	,
decl	5:4	5:39	2	int	i
water	5:16	0:0	2	,
decl	5:4	5:39	2	int	last
water	5:22	0:0	2	,
decl	5:4	5:39	2	int	run
water	5:27	0:0	2	,
decl	5:4	5:39	2	int	qmul
water	5:33	0:0	2	,
decl	5:4	5:39	2	int	qadd
decl	6:4	6:30	2	int	av_uninit
water	6:17	0:0	2	(
water	6:18	0:0	2	dc_pred_dir
water	6:29	0:0	2	)
decl	7:4	7:15	2	RLTable	*rl
decl	8:4	8:23	2	RL_VLC_ELEM	*rl_vlc
decl	9:4	9:29	2	const uint8_t	*scan_table
if	11:4	51:4	2	(intra)
cond	11:8	11:8	3	intra
water	11:8	0:0	4	intra
stmts	11:15	51:4	3	
water	11:15	0:0	4	{
if	12:8	28:8	4	(ctx -> use_intra_dc_vlc)
cond	12:12	12:17	5	ctx -> use_intra_dc_vlc
water	12:12	0:0	6	ctx
op	12:15	0:0	6	->
water	12:17	0:0	6	use_intra_dc_vlc
stmts	12:35	28:8	5	
water	12:35	0:0	6	{
if	14:12	21:12	6	(s -> partitioned_frame)
cond	14:16	14:19	7	s -> partitioned_frame
water	14:16	0:0	8	s
op	14:17	0:0	8	->
water	14:19	0:0	8	partitioned_frame
stmts	14:38	21:12	7	
water	14:38	0:0	8	{
water	15:16	0:0	8	level
op	15:22	0:0	8	=
water	15:24	0:0	8	s
op	15:25	0:0	8	->
water	15:27	0:0	8	dc_val
op	15:33	0:0	8	[
water	15:34	0:0	8	0
op	15:35	0:0	8	]
op	15:36	0:0	8	[
water	15:37	0:0	8	s
op	15:38	0:0	8	->
water	15:40	0:0	8	block_index
op	15:51	0:0	8	[
water	15:52	0:0	8	n
op	15:53	0:0	8	]
op	15:54	0:0	8	]
water	15:55	0:0	8	;
if	16:16	17:82	8	(n < 4)
cond	16:20	16:24	9	n < 4
water	16:20	0:0	10	n
op	16:22	0:0	10	<
water	16:24	0:0	10	4
stmts	17:20	17:82	9	
water	17:20	0:0	10	level
op	17:26	0:0	10	=
call	17:28	17:81	10	FASTDIV
arg	17:36	17:66	11	(level+(s->y_dc_scale>>1))
water	17:36	0:0	12	(
water	17:37	0:0	12	level
op	17:43	0:0	12	+
water	17:45	0:0	12	(
water	17:46	0:0	12	s
op	17:47	0:0	12	->
water	17:49	0:0	12	y_dc_scale
op	17:60	0:0	12	>>
water	17:63	0:0	12	1
water	17:64	0:0	12	)
water	17:65	0:0	12	)
arg	17:68	17:81	11	s->y_dc_scale
water	17:68	0:0	12	s
op	17:69	0:0	12	->
water	17:71	0:0	12	y_dc_scale
water	17:82	0:0	10	;
else	18:16	19:82	8
stmts	19:20	19:82	9	
water	19:20	0:0	10	level
op	19:26	0:0	10	=
call	19:28	19:81	10	FASTDIV
arg	19:36	19:66	11	(level+(s->c_dc_scale>>1))
water	19:36	0:0	12	(
water	19:37	0:0	12	level
op	19:43	0:0	12	+
water	19:45	0:0	12	(
water	19:46	0:0	12	s
op	19:47	0:0	12	->
water	19:49	0:0	12	c_dc_scale
op	19:60	0:0	12	>>
water	19:63	0:0	12	1
water	19:64	0:0	12	)
water	19:65	0:0	12	)
arg	19:68	19:81	11	s->c_dc_scale
water	19:68	0:0	12	s
op	19:69	0:0	12	->
water	19:71	0:0	12	c_dc_scale
water	19:82	0:0	10	;
water	20:16	0:0	8	dc_pred_dir
op	20:28	0:0	8	=
water	20:30	0:0	8	(
water	20:31	0:0	8	s
op	20:32	0:0	8	->
water	20:34	0:0	8	pred_dir_table
op	20:48	0:0	8	[
water	20:49	0:0	8	s
op	20:50	0:0	8	->
water	20:52	0:0	8	mb_x
op	20:57	0:0	8	+
water	20:59	0:0	8	s
op	20:60	0:0	8	->
water	20:62	0:0	8	mb_y
op	20:67	0:0	8	*
water	20:69	0:0	8	s
op	20:70	0:0	8	->
water	20:72	0:0	8	mb_stride
op	20:81	0:0	8	]
op	20:83	0:0	8	<<
water	20:86	0:0	8	n
water	20:87	0:0	8	)
op	20:89	0:0	8	&
water	20:91	0:0	8	32
water	20:93	0:0	8	;
water	21:12	0:0	8	}
else	21:14	25:12	6
stmts	21:19	25:12	7	
water	21:19	0:0	8	{
water	22:16	0:0	8	level
op	22:22	0:0	8	=
call	22:24	22:58	8	mpeg4_decode_dc
arg	22:40	22:41	9	s
water	22:40	0:0	10	s
arg	22:43	22:44	9	n
water	22:43	0:0	10	n
arg	22:46	22:58	9	&dc_pred_dir
op	22:46	0:0	10	&
water	22:47	0:0	10	dc_pred_dir
water	22:59	0:0	8	;
if	23:16	24:29	8	(level < 0)
cond	23:20	23:28	9	level < 0
water	23:20	0:0	10	level
op	23:26	0:0	10	<
water	23:28	0:0	10	0
stmts	24:20	24:29	9	
return	24:20	24:29	10	-1
op	24:27	0:0	11	-
water	24:28	0:0	11	1
water	25:12	0:0	8	}
water	26:12	0:0	6	block
op	26:17	0:0	6	[
water	26:18	0:0	6	0
op	26:19	0:0	6	]
op	26:21	0:0	6	=
water	26:23	0:0	6	level
water	26:28	0:0	6	;
water	27:12	0:0	6	i
op	27:21	0:0	6	=
water	27:23	0:0	6	0
water	27:24	0:0	6	;
water	28:8	0:0	6	}
else	28:10	31:8	4
stmts	28:15	31:8	5	
water	28:15	0:0	6	{
water	29:12	0:0	6	i
op	29:14	0:0	6	=
op	29:16	0:0	6	-
water	29:17	0:0	6	1
water	29:18	0:0	6	;
call	30:12	30:53	6	ff_mpeg4_pred_dc
arg	30:29	30:30	7	s
water	30:29	0:0	8	s
arg	30:32	30:33	7	n
water	30:32	0:0	8	n
arg	30:35	30:36	7	0
water	30:35	0:0	8	0
arg	30:38	30:50	7	&dc_pred_dir
op	30:38	0:0	8	&
water	30:39	0:0	8	dc_pred_dir
arg	30:52	30:53	7	0
water	30:52	0:0	8	0
water	30:54	0:0	6	;
water	31:8	0:0	6	}
if	32:8	33:26	4	(! coded)
cond	32:12	32:13	5	! coded
op	32:12	0:0	6	!
water	32:13	0:0	6	coded
stmts	33:12	33:26	5	
goto	33:12	33:26	6	not_coded
water	33:17	0:0	7	not_coded
if	34:8	37:8	4	(rvlc)
cond	34:12	34:12	5	rvlc
water	34:12	0:0	6	rvlc
stmts	34:18	37:8	5	
water	34:18	0:0	6	{
water	35:12	0:0	6	rl
op	35:19	0:0	6	=
op	35:21	0:0	6	&
water	35:22	0:0	6	ff_rvlc_rl_intra
water	35:38	0:0	6	;
water	36:12	0:0	6	rl_vlc
op	36:19	0:0	6	=
water	36:21	0:0	6	ff_rvlc_rl_intra
op	36:37	0:0	6	.
water	36:38	0:0	6	rl_vlc
op	36:44	0:0	6	[
water	36:45	0:0	6	0
op	36:46	0:0	6	]
water	36:47	0:0	6	;
water	37:8	0:0	6	}
else	37:10	40:8	4
stmts	37:15	40:8	5	
water	37:15	0:0	6	{
water	38:12	0:0	6	rl
op	38:19	0:0	6	=
op	38:21	0:0	6	&
water	38:22	0:0	6	ff_mpeg4_rl_intra
water	38:39	0:0	6	;
water	39:12	0:0	6	rl_vlc
op	39:19	0:0	6	=
water	39:21	0:0	6	ff_mpeg4_rl_intra
op	39:38	0:0	6	.
water	39:39	0:0	6	rl_vlc
op	39:45	0:0	6	[
water	39:46	0:0	6	0
op	39:47	0:0	6	]
water	39:48	0:0	6	;
water	40:8	0:0	6	}
if	41:8	46:8	4	(s -> ac_pred)
cond	41:12	41:15	5	s -> ac_pred
water	41:12	0:0	6	s
op	41:13	0:0	6	->
water	41:15	0:0	6	ac_pred
stmts	41:24	46:8	5	
water	41:24	0:0	6	{
if	42:12	43:60	6	(dc_pred_dir == 0)
cond	42:16	42:31	7	dc_pred_dir == 0
water	42:16	0:0	8	dc_pred_dir
op	42:28	0:0	8	==
water	42:31	0:0	8	0
stmts	43:16	43:60	7	
water	43:16	0:0	8	scan_table
op	43:27	0:0	8	=
water	43:29	0:0	8	s
op	43:30	0:0	8	->
water	43:32	0:0	8	intra_v_scantable
op	43:49	0:0	8	.
water	43:50	0:0	8	permutated
water	43:60	0:0	8	;
else	44:12	45:60	6
stmts	45:16	45:60	7	
water	45:16	0:0	8	scan_table
op	45:27	0:0	8	=
water	45:29	0:0	8	s
op	45:30	0:0	8	->
water	45:32	0:0	8	intra_h_scantable
op	45:49	0:0	8	.
water	45:50	0:0	8	permutated
water	45:60	0:0	8	;
water	46:8	0:0	6	}
else	46:10	48:8	4
stmts	46:15	48:8	5	
water	46:15	0:0	6	{
water	47:12	0:0	6	scan_table
op	47:23	0:0	6	=
water	47:25	0:0	6	s
op	47:26	0:0	6	->
water	47:28	0:0	6	intra_scantable
op	47:43	0:0	6	.
water	47:44	0:0	6	permutated
water	47:54	0:0	6	;
water	48:8	0:0	6	}
water	49:8	0:0	4	qmul
op	49:13	0:0	4	=
water	49:15	0:0	4	1
water	49:16	0:0	4	;
water	50:8	0:0	4	qadd
op	50:13	0:0	4	=
water	50:15	0:0	4	0
water	50:16	0:0	4	;
water	51:4	0:0	4	}
else	51:6	77:4	2
stmts	51:11	77:4	3	
water	51:11	0:0	4	{
water	52:8	0:0	4	i
op	52:10	0:0	4	=
op	52:12	0:0	4	-
water	52:13	0:0	4	1
water	52:14	0:0	4	;
if	53:8	56:8	4	(! coded)
cond	53:12	53:13	5	! coded
op	53:12	0:0	6	!
water	53:13	0:0	6	coded
stmts	53:20	56:8	5	
water	53:20	0:0	6	{
water	54:12	0:0	6	s
op	54:13	0:0	6	->
water	54:15	0:0	6	block_last_index
op	54:31	0:0	6	[
water	54:32	0:0	6	n
op	54:33	0:0	6	]
op	54:35	0:0	6	=
water	54:37	0:0	6	i
water	54:38	0:0	6	;
return	55:12	55:20	6	0
water	55:19	0:0	7	0
water	56:8	0:0	6	}
if	57:8	58:34	4	(rvlc)
cond	57:12	57:12	5	rvlc
water	57:12	0:0	6	rvlc
stmts	58:12	58:34	5	
water	58:12	0:0	6	rl
op	58:15	0:0	6	=
op	58:17	0:0	6	&
water	58:18	0:0	6	ff_rvlc_rl_inter
water	58:34	0:0	6	;
else	59:8	60:34	4
stmts	60:12	60:34	5	
water	60:12	0:0	6	rl
op	60:15	0:0	6	=
op	60:17	0:0	6	&
water	60:18	0:0	6	ff_h263_rl_inter
water	60:34	0:0	6	;
water	61:8	0:0	4	scan_table
op	61:19	0:0	4	=
water	61:21	0:0	4	s
op	61:22	0:0	4	->
water	61:24	0:0	4	intra_scantable
op	61:39	0:0	4	.
water	61:40	0:0	4	permutated
water	61:50	0:0	4	;
if	62:8	69:8	4	(s -> mpeg_quant)
cond	62:12	62:15	5	s -> mpeg_quant
water	62:12	0:0	6	s
op	62:13	0:0	6	->
water	62:15	0:0	6	mpeg_quant
stmts	62:27	69:8	5	
water	62:27	0:0	6	{
water	63:12	0:0	6	qmul
op	63:17	0:0	6	=
water	63:19	0:0	6	1
water	63:20	0:0	6	;
water	64:12	0:0	6	qadd
op	64:17	0:0	6	=
water	64:19	0:0	6	0
water	64:20	0:0	6	;
if	65:12	66:51	6	(rvlc)
cond	65:16	65:16	7	rvlc
water	65:16	0:0	8	rvlc
stmts	66:16	66:51	7	
water	66:16	0:0	8	rl_vlc
op	66:23	0:0	8	=
water	66:25	0:0	8	ff_rvlc_rl_inter
op	66:41	0:0	8	.
water	66:42	0:0	8	rl_vlc
op	66:48	0:0	8	[
water	66:49	0:0	8	0
op	66:50	0:0	8	]
water	66:51	0:0	8	;
else	67:12	68:51	6
stmts	68:16	68:51	7	
water	68:16	0:0	8	rl_vlc
op	68:23	0:0	8	=
water	68:25	0:0	8	ff_h263_rl_inter
op	68:41	0:0	8	.
water	68:42	0:0	8	rl_vlc
op	68:48	0:0	8	[
water	68:49	0:0	8	0
op	68:50	0:0	8	]
water	68:51	0:0	8	;
water	69:8	0:0	6	}
else	69:10	76:8	4
stmts	69:15	76:8	5	
water	69:15	0:0	6	{
water	70:12	0:0	6	qmul
op	70:17	0:0	6	=
water	70:19	0:0	6	s
op	70:20	0:0	6	->
water	70:22	0:0	6	qscale
op	70:29	0:0	6	<<
water	70:32	0:0	6	1
water	70:33	0:0	6	;
water	71:12	0:0	6	qadd
op	71:17	0:0	6	=
water	71:19	0:0	6	(
water	71:20	0:0	6	s
op	71:21	0:0	6	->
water	71:23	0:0	6	qscale
op	71:30	0:0	6	-
water	71:32	0:0	6	1
water	71:33	0:0	6	)
op	71:35	0:0	6	|
water	71:37	0:0	6	1
water	71:38	0:0	6	;
if	72:12	73:59	6	(rvlc)
cond	72:16	72:16	7	rvlc
water	72:16	0:0	8	rvlc
stmts	73:16	73:59	7	
water	73:16	0:0	8	rl_vlc
op	73:23	0:0	8	=
water	73:25	0:0	8	ff_rvlc_rl_inter
op	73:41	0:0	8	.
water	73:42	0:0	8	rl_vlc
op	73:48	0:0	8	[
water	73:49	0:0	8	s
op	73:50	0:0	8	->
water	73:52	0:0	8	qscale
op	73:58	0:0	8	]
water	73:59	0:0	8	;
else	74:12	75:59	6
stmts	75:16	75:59	7	
water	75:16	0:0	8	rl_vlc
op	75:23	0:0	8	=
water	75:25	0:0	8	ff_h263_rl_inter
op	75:41	0:0	8	.
water	75:42	0:0	8	rl_vlc
op	75:48	0:0	8	[
water	75:49	0:0	8	s
op	75:50	0:0	8	->
water	75:52	0:0	8	qscale
op	75:58	0:0	8	]
water	75:59	0:0	8	;
water	76:8	0:0	6	}
water	77:4	0:0	4	}
water	78:4	0:0	2	{
call	79:8	79:30	2	OPEN_READER
arg	79:20	79:22	3	re
water	79:20	0:0	4	re
arg	79:24	79:30	3	&s->gb
op	79:24	0:0	4	&
water	79:25	0:0	4	s
op	79:26	0:0	4	->
water	79:28	0:0	4	gb
water	79:31	0:0	2	;
for	80:8	226:8	2	(;;)
forinit	80:13	80:13	3	;
water	80:13	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	80:17	226:8	3	
water	80:17	0:0	4	{
call	81:12	81:35	4	UPDATE_CACHE
arg	81:25	81:27	5	re
water	81:25	0:0	6	re
arg	81:29	81:35	5	&s->gb
op	81:29	0:0	6	&
water	81:30	0:0	6	s
op	81:31	0:0	6	->
water	81:33	0:0	6	gb
water	81:36	0:0	4	;
call	82:12	82:73	4	GET_RL_VLC
arg	82:23	82:28	5	level
water	82:23	0:0	6	level
arg	82:30	82:33	5	run
water	82:30	0:0	6	run
arg	82:35	82:37	5	re
water	82:35	0:0	6	re
arg	82:39	82:45	5	&s->gb
op	82:39	0:0	6	&
water	82:40	0:0	6	s
op	82:41	0:0	6	->
water	82:43	0:0	6	gb
arg	82:47	82:53	5	rl_vlc
water	82:47	0:0	6	rl_vlc
arg	82:55	82:67	5	TEX_VLC_BITS
water	82:55	0:0	6	TEX_VLC_BITS
arg	82:69	82:70	5	2
water	82:69	0:0	6	2
arg	82:72	82:73	5	0
water	82:72	0:0	6	0
water	82:74	0:0	4	;
if	83:12	209:12	4	(level == 0)
cond	83:16	83:25	5	level == 0
water	83:16	0:0	6	level
op	83:22	0:0	6	==
water	83:25	0:0	6	0
stmts	83:28	209:12	5	
water	83:28	0:0	6	{
if	85:16	116:16	6	(rvlc)
cond	85:20	85:20	7	rvlc
water	85:20	0:0	8	rvlc
stmts	85:26	116:16	7	
water	85:26	0:0	8	{
if	86:20	90:20	8	(SHOW_UBITS (re ,& s -> gb ,1 ) == 0)
cond	86:24	86:53	9	SHOW_UBITS (re ,& s -> gb ,1 ) == 0
call	86:24	86:48	10	SHOW_UBITS
arg	86:35	86:37	11	re
water	86:35	0:0	12	re
arg	86:39	86:45	11	&s->gb
op	86:39	0:0	12	&
water	86:40	0:0	12	s
op	86:41	0:0	12	->
water	86:43	0:0	12	gb
arg	86:47	86:48	11	1
water	86:47	0:0	12	1
op	86:50	0:0	10	==
water	86:53	0:0	10	0
stmts	86:56	90:20	9	
water	86:56	0:0	10	{
call	87:24	88:68	10	av_log
arg	87:31	87:39	11	s->avctx
water	87:31	0:0	12	s
op	87:32	0:0	12	->
water	87:34	0:0	12	avctx
arg	87:41	87:53	11	AV_LOG_ERROR
water	87:41	0:0	12	AV_LOG_ERROR
arg	88:31	88:68	11	"1. marker bit missing in rvlc esc\n"
water	88:31	0:0	12	"1. marker bit missing in rvlc esc\n"
water	88:69	0:0	10	;
return	89:24	89:33	10	-1
op	89:31	0:0	11	-
water	89:32	0:0	11	1
water	90:20	0:0	10	}
call	91:20	91:44	8	SKIP_CACHE
arg	91:31	91:33	9	re
water	91:31	0:0	10	re
arg	91:35	91:41	9	&s->gb
op	91:35	0:0	10	&
water	91:36	0:0	10	s
op	91:37	0:0	10	->
water	91:39	0:0	10	gb
arg	91:43	91:44	9	1
water	91:43	0:0	10	1
water	91:45	0:0	8	;
water	92:20	0:0	8	last
op	92:25	0:0	8	=
call	92:27	92:51	8	SHOW_UBITS
arg	92:38	92:40	9	re
water	92:38	0:0	10	re
arg	92:42	92:48	9	&s->gb
op	92:42	0:0	10	&
water	92:43	0:0	10	s
op	92:44	0:0	10	->
water	92:46	0:0	10	gb
arg	92:50	92:51	9	1
water	92:50	0:0	10	1
water	92:52	0:0	8	;
call	93:20	93:44	8	SKIP_CACHE
arg	93:31	93:33	9	re
water	93:31	0:0	10	re
arg	93:35	93:41	9	&s->gb
op	93:35	0:0	10	&
water	93:36	0:0	10	s
op	93:37	0:0	10	->
water	93:39	0:0	10	gb
arg	93:43	93:44	9	1
water	93:43	0:0	10	1
water	93:45	0:0	8	;
water	94:20	0:0	8	run
op	94:24	0:0	8	=
call	94:26	94:50	8	SHOW_UBITS
arg	94:37	94:39	9	re
water	94:37	0:0	10	re
arg	94:41	94:47	9	&s->gb
op	94:41	0:0	10	&
water	94:42	0:0	10	s
op	94:43	0:0	10	->
water	94:45	0:0	10	gb
arg	94:49	94:50	9	6
water	94:49	0:0	10	6
water	94:51	0:0	8	;
call	95:20	95:54	8	SKIP_COUNTER
arg	95:33	95:35	9	re
water	95:33	0:0	10	re
arg	95:37	95:43	9	&s->gb
op	95:37	0:0	10	&
water	95:38	0:0	10	s
op	95:39	0:0	10	->
water	95:41	0:0	10	gb
arg	95:45	95:54	9	1+1+6
water	95:45	0:0	10	1
op	95:47	0:0	10	+
water	95:49	0:0	10	1
op	95:51	0:0	10	+
water	95:53	0:0	10	6
water	95:55	0:0	8	;
call	96:20	96:43	8	UPDATE_CACHE
arg	96:33	96:35	9	re
water	96:33	0:0	10	re
arg	96:37	96:43	9	&s->gb
op	96:37	0:0	10	&
water	96:38	0:0	10	s
op	96:39	0:0	10	->
water	96:41	0:0	10	gb
water	96:44	0:0	8	;
if	97:20	101:20	8	(SHOW_UBITS (re ,& s -> gb ,1 ) == 0)
cond	97:24	97:53	9	SHOW_UBITS (re ,& s -> gb ,1 ) == 0
call	97:24	97:48	10	SHOW_UBITS
arg	97:35	97:37	11	re
water	97:35	0:0	12	re
arg	97:39	97:45	11	&s->gb
op	97:39	0:0	12	&
water	97:40	0:0	12	s
op	97:41	0:0	12	->
water	97:43	0:0	12	gb
arg	97:47	97:48	11	1
water	97:47	0:0	12	1
op	97:50	0:0	10	==
water	97:53	0:0	10	0
stmts	97:56	101:20	9	
water	97:56	0:0	10	{
call	98:24	99:68	10	av_log
arg	98:31	98:39	11	s->avctx
water	98:31	0:0	12	s
op	98:32	0:0	12	->
water	98:34	0:0	12	avctx
arg	98:41	98:53	11	AV_LOG_ERROR
water	98:41	0:0	12	AV_LOG_ERROR
arg	99:31	99:68	11	"2. marker bit missing in rvlc esc\n"
water	99:31	0:0	12	"2. marker bit missing in rvlc esc\n"
water	99:69	0:0	10	;
return	100:24	100:33	10	-1
op	100:31	0:0	11	-
water	100:32	0:0	11	1
water	101:20	0:0	10	}
call	102:20	102:44	8	SKIP_CACHE
arg	102:31	102:33	9	re
water	102:31	0:0	10	re
arg	102:35	102:41	9	&s->gb
op	102:35	0:0	10	&
water	102:36	0:0	10	s
op	102:37	0:0	10	->
water	102:39	0:0	10	gb
arg	102:43	102:44	9	1
water	102:43	0:0	10	1
water	102:45	0:0	8	;
water	103:20	0:0	8	level
op	103:26	0:0	8	=
call	103:28	103:53	8	SHOW_UBITS
arg	103:39	103:41	9	re
water	103:39	0:0	10	re
arg	103:43	103:49	9	&s->gb
op	103:43	0:0	10	&
water	103:44	0:0	10	s
op	103:45	0:0	10	->
water	103:47	0:0	10	gb
arg	103:51	103:53	9	11
water	103:51	0:0	10	11
water	103:54	0:0	8	;
call	104:20	104:45	8	SKIP_CACHE
arg	104:31	104:33	9	re
water	104:31	0:0	10	re
arg	104:35	104:41	9	&s->gb
op	104:35	0:0	10	&
water	104:36	0:0	10	s
op	104:37	0:0	10	->
water	104:39	0:0	10	gb
arg	104:43	104:45	9	11
water	104:43	0:0	10	11
water	104:46	0:0	8	;
if	105:20	108:20	8	(SHOW_UBITS (re ,& s -> gb ,5 ) != 0 x10)
cond	105:24	105:54	9	SHOW_UBITS (re ,& s -> gb ,5 ) != 0 x10
call	105:24	105:48	10	SHOW_UBITS
arg	105:35	105:37	11	re
water	105:35	0:0	12	re
arg	105:39	105:45	11	&s->gb
op	105:39	0:0	12	&
water	105:40	0:0	12	s
op	105:41	0:0	12	->
water	105:43	0:0	12	gb
arg	105:47	105:48	11	5
water	105:47	0:0	12	5
op	105:50	0:0	10	!=
water	105:53	0:0	10	0
water	105:54	0:0	10	x10
stmts	105:59	108:20	9	
water	105:59	0:0	10	{
call	106:24	106:78	10	av_log
arg	106:31	106:39	11	s->avctx
water	106:31	0:0	12	s
op	106:32	0:0	12	->
water	106:34	0:0	12	avctx
arg	106:41	106:53	11	AV_LOG_ERROR
water	106:41	0:0	12	AV_LOG_ERROR
arg	106:55	106:78	11	"reverse esc missing\n"
water	106:55	0:0	12	"reverse esc missing\n"
water	106:79	0:0	10	;
return	107:24	107:33	10	-1
op	107:31	0:0	11	-
water	107:32	0:0	11	1
water	108:20	0:0	10	}
call	109:20	109:44	8	SKIP_CACHE
arg	109:31	109:33	9	re
water	109:31	0:0	10	re
arg	109:35	109:41	9	&s->gb
op	109:35	0:0	10	&
water	109:36	0:0	10	s
op	109:37	0:0	10	->
water	109:39	0:0	10	gb
arg	109:43	109:44	9	5
water	109:43	0:0	10	5
water	109:45	0:0	8	;
water	110:20	0:0	8	level
op	110:26	0:0	8	=
water	110:28	0:0	8	level
op	110:34	0:0	8	*
water	110:36	0:0	8	qmul
op	110:41	0:0	8	+
water	110:43	0:0	8	qadd
water	110:47	0:0	8	;
water	111:20	0:0	8	level
op	111:26	0:0	8	=
water	111:28	0:0	8	(
water	111:29	0:0	8	level
op	111:35	0:0	8	^
call	111:37	111:61	8	SHOW_SBITS
arg	111:48	111:50	9	re
water	111:48	0:0	10	re
arg	111:52	111:58	9	&s->gb
op	111:52	0:0	10	&
water	111:53	0:0	10	s
op	111:54	0:0	10	->
water	111:56	0:0	10	gb
arg	111:60	111:61	9	1
water	111:60	0:0	10	1
water	111:62	0:0	8	)
op	111:64	0:0	8	-
call	111:66	111:90	8	SHOW_SBITS
arg	111:77	111:79	9	re
water	111:77	0:0	10	re
arg	111:81	111:87	9	&s->gb
op	111:81	0:0	10	&
water	111:82	0:0	10	s
op	111:83	0:0	10	->
water	111:85	0:0	10	gb
arg	111:89	111:90	9	1
water	111:89	0:0	10	1
water	111:91	0:0	8	;
call	112:20	112:59	8	SKIP_COUNTER
arg	112:33	112:35	9	re
water	112:33	0:0	10	re
arg	112:37	112:43	9	&s->gb
op	112:37	0:0	10	&
water	112:38	0:0	10	s
op	112:39	0:0	10	->
water	112:41	0:0	10	gb
arg	112:45	112:59	9	1+11+5+1
water	112:45	0:0	10	1
op	112:47	0:0	10	+
water	112:49	0:0	10	11
op	112:52	0:0	10	+
water	112:54	0:0	10	5
op	112:56	0:0	10	+
water	112:58	0:0	10	1
water	112:60	0:0	8	;
water	113:20	0:0	8	i
op	113:22	0:0	8	+=
water	113:25	0:0	8	run
op	113:29	0:0	8	+
water	113:31	0:0	8	1
water	113:32	0:0	8	;
if	114:20	115:32	8	(last)
cond	114:24	114:24	9	last
water	114:24	0:0	10	last
stmts	115:24	115:32	9	
water	115:24	0:0	10	i
op	115:26	0:0	10	+=
water	115:29	0:0	10	192
water	115:32	0:0	10	;
water	116:16	0:0	8	}
else	116:18	208:16	6
stmts	116:23	208:16	7	
water	116:23	0:0	8	{
decl	117:20	117:29	8	int	cache
water	118:20	0:0	8	cache
op	118:26	0:0	8	=
call	118:28	118:48	8	GET_CACHE
arg	118:38	118:40	9	re
water	118:38	0:0	10	re
arg	118:42	118:48	9	&s->gb
op	118:42	0:0	10	&
water	118:43	0:0	10	s
op	118:44	0:0	10	->
water	118:46	0:0	10	gb
water	118:49	0:0	8	;
if	119:20	120:43	8	(IS_3IV1)
cond	119:24	119:24	9	IS_3IV1
water	119:24	0:0	10	IS_3IV1
stmts	120:24	120:43	9	
water	120:24	0:0	10	cache
op	120:30	0:0	10	^=
water	120:33	0:0	10	0
water	120:34	0:0	10	xC0000000
water	120:43	0:0	10	;
if	121:20	199:20	8	(cache & 0 x80000000)
cond	121:24	121:33	9	cache & 0 x80000000
water	121:24	0:0	10	cache
op	121:30	0:0	10	&
water	121:32	0:0	10	0
water	121:33	0:0	10	x80000000
stmts	121:44	199:20	9	
water	121:44	0:0	10	{
if	122:24	191:24	10	(cache & 0 x40000000)
cond	122:28	122:37	11	cache & 0 x40000000
water	122:28	0:0	12	cache
op	122:34	0:0	12	&
water	122:36	0:0	12	0
water	122:37	0:0	12	x40000000
stmts	122:48	191:24	11	
water	122:48	0:0	12	{
call	124:28	124:52	12	SKIP_CACHE
arg	124:39	124:41	13	re
water	124:39	0:0	14	re
arg	124:43	124:49	13	&s->gb
op	124:43	0:0	14	&
water	124:44	0:0	14	s
op	124:45	0:0	14	->
water	124:47	0:0	14	gb
arg	124:51	124:52	13	2
water	124:51	0:0	14	2
water	124:53	0:0	12	;
water	125:28	0:0	12	last
op	125:33	0:0	12	=
call	125:35	125:59	12	SHOW_UBITS
arg	125:46	125:48	13	re
water	125:46	0:0	14	re
arg	125:50	125:56	13	&s->gb
op	125:50	0:0	14	&
water	125:51	0:0	14	s
op	125:52	0:0	14	->
water	125:54	0:0	14	gb
arg	125:58	125:59	13	1
water	125:58	0:0	14	1
water	125:60	0:0	12	;
call	126:28	126:52	12	SKIP_CACHE
arg	126:39	126:41	13	re
water	126:39	0:0	14	re
arg	126:43	126:49	13	&s->gb
op	126:43	0:0	14	&
water	126:44	0:0	14	s
op	126:45	0:0	14	->
water	126:47	0:0	14	gb
arg	126:51	126:52	13	1
water	126:51	0:0	14	1
water	126:53	0:0	12	;
water	127:28	0:0	12	run
op	127:32	0:0	12	=
call	127:34	127:58	12	SHOW_UBITS
arg	127:45	127:47	13	re
water	127:45	0:0	14	re
arg	127:49	127:55	13	&s->gb
op	127:49	0:0	14	&
water	127:50	0:0	14	s
op	127:51	0:0	14	->
water	127:53	0:0	14	gb
arg	127:57	127:58	13	6
water	127:57	0:0	14	6
water	127:59	0:0	12	;
call	128:28	128:62	12	SKIP_COUNTER
arg	128:41	128:43	13	re
water	128:41	0:0	14	re
arg	128:45	128:51	13	&s->gb
op	128:45	0:0	14	&
water	128:46	0:0	14	s
op	128:47	0:0	14	->
water	128:49	0:0	14	gb
arg	128:53	128:62	13	2+1+6
water	128:53	0:0	14	2
op	128:55	0:0	14	+
water	128:57	0:0	14	1
op	128:59	0:0	14	+
water	128:61	0:0	14	6
water	128:63	0:0	12	;
call	129:28	129:51	12	UPDATE_CACHE
arg	129:41	129:43	13	re
water	129:41	0:0	14	re
arg	129:45	129:51	13	&s->gb
op	129:45	0:0	14	&
water	129:46	0:0	14	s
op	129:47	0:0	14	->
water	129:49	0:0	14	gb
water	129:52	0:0	12	;
if	130:28	133:28	12	(IS_3IV1)
cond	130:32	130:32	13	IS_3IV1
water	130:32	0:0	14	IS_3IV1
stmts	130:41	133:28	13	
water	130:41	0:0	14	{
water	131:32	0:0	14	level
op	131:38	0:0	14	=
call	131:40	131:65	14	SHOW_SBITS
arg	131:51	131:53	15	re
water	131:51	0:0	16	re
arg	131:55	131:61	15	&s->gb
op	131:55	0:0	16	&
water	131:56	0:0	16	s
op	131:57	0:0	16	->
water	131:59	0:0	16	gb
arg	131:63	131:65	15	12
water	131:63	0:0	16	12
water	131:66	0:0	14	;
call	132:32	132:61	14	LAST_SKIP_BITS
arg	132:47	132:49	15	re
water	132:47	0:0	16	re
arg	132:51	132:57	15	&s->gb
op	132:51	0:0	16	&
water	132:52	0:0	16	s
op	132:53	0:0	16	->
water	132:55	0:0	16	gb
arg	132:59	132:61	15	12
water	132:59	0:0	16	12
water	132:62	0:0	14	;
water	133:28	0:0	14	}
else	133:30	150:28	12
stmts	133:35	150:28	13	
water	133:35	0:0	14	{
if	134:32	139:32	14	(SHOW_UBITS (re ,& s -> gb ,1 ) == 0)
cond	134:36	134:65	15	SHOW_UBITS (re ,& s -> gb ,1 ) == 0
call	134:36	134:60	16	SHOW_UBITS
arg	134:47	134:49	17	re
water	134:47	0:0	18	re
arg	134:51	134:57	17	&s->gb
op	134:51	0:0	18	&
water	134:52	0:0	18	s
op	134:53	0:0	18	->
water	134:55	0:0	18	gb
arg	134:59	134:60	17	1
water	134:59	0:0	18	1
op	134:62	0:0	16	==
water	134:65	0:0	16	0
stmts	134:68	139:32	15	
water	134:68	0:0	16	{
call	135:36	136:78	16	av_log
arg	135:43	135:51	17	s->avctx
water	135:43	0:0	18	s
op	135:44	0:0	18	->
water	135:46	0:0	18	avctx
arg	135:53	135:65	17	AV_LOG_ERROR
water	135:53	0:0	18	AV_LOG_ERROR
arg	136:43	136:78	17	"1. marker bit missing in 3. esc\n"
water	136:43	0:0	18	"1. marker bit missing in 3. esc\n"
water	136:79	0:0	16	;
if	137:36	138:49	16	(! ( s -> avctx -> err_recognition & AV_EF_IGNORE_ERR ))
cond	137:40	137:86	17	! ( s -> avctx -> err_recognition & AV_EF_IGNORE_ERR )
op	137:40	0:0	18	!
water	137:41	0:0	18	(
water	137:42	0:0	18	s
op	137:43	0:0	18	->
water	137:45	0:0	18	avctx
op	137:50	0:0	18	->
water	137:52	0:0	18	err_recognition
op	137:68	0:0	18	&
water	137:70	0:0	18	AV_EF_IGNORE_ERR
water	137:86	0:0	18	)
stmts	138:40	138:49	17	
return	138:40	138:49	18	-1
op	138:47	0:0	19	-
water	138:48	0:0	19	1
water	139:32	0:0	16	}
call	140:32	140:56	14	SKIP_CACHE
arg	140:43	140:45	15	re
water	140:43	0:0	16	re
arg	140:47	140:53	15	&s->gb
op	140:47	0:0	16	&
water	140:48	0:0	16	s
op	140:49	0:0	16	->
water	140:51	0:0	16	gb
arg	140:55	140:56	15	1
water	140:55	0:0	16	1
water	140:57	0:0	14	;
water	141:32	0:0	14	level
op	141:38	0:0	14	=
call	141:40	141:65	14	SHOW_SBITS
arg	141:51	141:53	15	re
water	141:51	0:0	16	re
arg	141:55	141:61	15	&s->gb
op	141:55	0:0	16	&
water	141:56	0:0	16	s
op	141:57	0:0	16	->
water	141:59	0:0	16	gb
arg	141:63	141:65	15	12
water	141:63	0:0	16	12
water	141:66	0:0	14	;
call	142:32	142:57	14	SKIP_CACHE
arg	142:43	142:45	15	re
water	142:43	0:0	16	re
arg	142:47	142:53	15	&s->gb
op	142:47	0:0	16	&
water	142:48	0:0	16	s
op	142:49	0:0	16	->
water	142:51	0:0	16	gb
arg	142:55	142:57	15	12
water	142:55	0:0	16	12
water	142:58	0:0	14	;
if	143:32	148:32	14	(SHOW_UBITS (re ,& s -> gb ,1 ) == 0)
cond	143:36	143:65	15	SHOW_UBITS (re ,& s -> gb ,1 ) == 0
call	143:36	143:60	16	SHOW_UBITS
arg	143:47	143:49	17	re
water	143:47	0:0	18	re
arg	143:51	143:57	17	&s->gb
op	143:51	0:0	18	&
water	143:52	0:0	18	s
op	143:53	0:0	18	->
water	143:55	0:0	18	gb
arg	143:59	143:60	17	1
water	143:59	0:0	18	1
op	143:62	0:0	16	==
water	143:65	0:0	16	0
stmts	143:68	148:32	15	
water	143:68	0:0	16	{
call	144:36	145:78	16	av_log
arg	144:43	144:51	17	s->avctx
water	144:43	0:0	18	s
op	144:44	0:0	18	->
water	144:46	0:0	18	avctx
arg	144:53	144:65	17	AV_LOG_ERROR
water	144:53	0:0	18	AV_LOG_ERROR
arg	145:43	145:78	17	"2. marker bit missing in 3. esc\n"
water	145:43	0:0	18	"2. marker bit missing in 3. esc\n"
water	145:79	0:0	16	;
if	146:36	147:49	16	(! ( s -> avctx -> err_recognition & AV_EF_IGNORE_ERR ))
cond	146:40	146:86	17	! ( s -> avctx -> err_recognition & AV_EF_IGNORE_ERR )
op	146:40	0:0	18	!
water	146:41	0:0	18	(
water	146:42	0:0	18	s
op	146:43	0:0	18	->
water	146:45	0:0	18	avctx
op	146:50	0:0	18	->
water	146:52	0:0	18	err_recognition
op	146:68	0:0	18	&
water	146:70	0:0	18	AV_EF_IGNORE_ERR
water	146:86	0:0	18	)
stmts	147:40	147:49	17	
return	147:40	147:49	18	-1
op	147:47	0:0	19	-
water	147:48	0:0	19	1
water	148:32	0:0	16	}
call	149:32	149:67	14	SKIP_COUNTER
arg	149:45	149:47	15	re
water	149:45	0:0	16	re
arg	149:49	149:55	15	&s->gb
op	149:49	0:0	16	&
water	149:50	0:0	16	s
op	149:51	0:0	16	->
water	149:53	0:0	16	gb
arg	149:57	149:67	15	1+12+1
water	149:57	0:0	16	1
op	149:59	0:0	16	+
water	149:61	0:0	16	12
op	149:64	0:0	16	+
water	149:66	0:0	16	1
water	149:68	0:0	14	;
water	150:28	0:0	14	}
if	152:28	171:28	12	(s -> error_recognition >= FF_ER_COMPLIANT)
cond	152:32	152:56	13	s -> error_recognition >= FF_ER_COMPLIANT
water	152:32	0:0	14	s
op	152:33	0:0	14	->
water	152:35	0:0	14	error_recognition
op	152:53	0:0	14	>=
water	152:56	0:0	14	FF_ER_COMPLIANT
stmts	152:73	171:28	13	
water	152:73	0:0	14	{
decl	153:32	153:65	14	const int	abs_level
op	153:51	0:0	14	=
call	153:53	153:64	15	FFABS
arg	153:59	153:64	16	level
water	153:59	0:0	17	level
if	154:32	170:32	14	(abs_level <= MAX_LEVEL && run <= MAX_RUN)
cond	154:36	154:65	15	abs_level <= MAX_LEVEL && run <= MAX_RUN
water	154:36	0:0	16	abs_level
op	154:45	0:0	16	<=
water	154:47	0:0	16	MAX_LEVEL
op	154:57	0:0	16	&&
water	154:60	0:0	16	run
op	154:63	0:0	16	<=
water	154:65	0:0	16	MAX_RUN
stmts	154:74	170:32	15	
water	154:74	0:0	16	{
decl	155:36	155:90	16	const int	run1
op	155:50	0:0	16	=
water	155:52	0:0	16	run
op	155:56	0:0	16	-
water	155:58	0:0	16	rl
op	155:60	0:0	16	->
water	155:62	0:0	16	max_run
op	155:69	0:0	16	[
water	155:70	0:0	16	last
op	155:74	0:0	16	]
op	155:75	0:0	16	[
water	155:76	0:0	16	abs_level
op	155:85	0:0	16	]
op	155:87	0:0	16	-
water	155:89	0:0	16	1
if	156:36	159:36	16	(abs_level <= rl -> max_level [ last ] [ run ])
cond	156:40	156:76	17	abs_level <= rl -> max_level [ last ] [ run ]
water	156:40	0:0	18	abs_level
op	156:50	0:0	18	<=
water	156:53	0:0	18	rl
op	156:55	0:0	18	->
water	156:57	0:0	18	max_level
op	156:66	0:0	18	[
water	156:67	0:0	18	last
op	156:71	0:0	18	]
op	156:72	0:0	18	[
water	156:73	0:0	18	run
op	156:76	0:0	18	]
stmts	156:79	159:36	17	
water	156:79	0:0	18	{
call	157:40	157:112	18	av_log
arg	157:47	157:55	19	s->avctx
water	157:47	0:0	20	s
op	157:48	0:0	20	->
water	157:50	0:0	20	avctx
arg	157:57	157:69	19	AV_LOG_ERROR
water	157:57	0:0	20	AV_LOG_ERROR
arg	157:71	157:112	19	"illegal 3. esc, vlc encoding possible\n"
water	157:71	0:0	20	"illegal 3. esc, vlc encoding possible\n"
water	157:113	0:0	18	;
return	158:40	158:49	18	-1
op	158:47	0:0	19	-
water	158:48	0:0	19	1
water	159:36	0:0	18	}
if	160:36	169:36	16	(s -> error_recognition > FF_ER_COMPLIANT)
cond	160:40	160:63	17	s -> error_recognition > FF_ER_COMPLIANT
water	160:40	0:0	18	s
op	160:41	0:0	18	->
water	160:43	0:0	18	error_recognition
op	160:61	0:0	18	>
water	160:63	0:0	18	FF_ER_COMPLIANT
stmts	160:80	169:36	17	
water	160:80	0:0	18	{
if	161:40	164:40	18	(abs_level <= rl -> max_level [ last ] [ run ] * 2)
cond	161:44	161:82	19	abs_level <= rl -> max_level [ last ] [ run ] * 2
water	161:44	0:0	20	abs_level
op	161:54	0:0	20	<=
water	161:57	0:0	20	rl
op	161:59	0:0	20	->
water	161:61	0:0	20	max_level
op	161:70	0:0	20	[
water	161:71	0:0	20	last
op	161:75	0:0	20	]
op	161:76	0:0	20	[
water	161:77	0:0	20	run
op	161:80	0:0	20	]
op	161:81	0:0	20	*
water	161:82	0:0	20	2
stmts	161:85	164:40	19	
water	161:85	0:0	20	{
call	162:44	162:118	20	av_log
arg	162:51	162:59	21	s->avctx
water	162:51	0:0	22	s
op	162:52	0:0	22	->
water	162:54	0:0	22	avctx
arg	162:61	162:73	21	AV_LOG_ERROR
water	162:61	0:0	22	AV_LOG_ERROR
arg	162:75	162:118	21	"illegal 3. esc, esc 1 encoding possible\n"
water	162:75	0:0	22	"illegal 3. esc, esc 1 encoding possible\n"
water	162:119	0:0	20	;
return	163:44	163:53	20	-1
op	163:51	0:0	21	-
water	163:52	0:0	21	1
water	164:40	0:0	20	}
if	165:40	168:40	18	(run1 >= 0 && abs_level <= rl -> max_level [ last ] [ run1 ])
cond	165:44	165:94	19	run1 >= 0 && abs_level <= rl -> max_level [ last ] [ run1 ]
water	165:44	0:0	20	run1
op	165:49	0:0	20	>=
water	165:52	0:0	20	0
op	165:54	0:0	20	&&
water	165:57	0:0	20	abs_level
op	165:67	0:0	20	<=
water	165:70	0:0	20	rl
op	165:72	0:0	20	->
water	165:74	0:0	20	max_level
op	165:83	0:0	20	[
water	165:84	0:0	20	last
op	165:88	0:0	20	]
op	165:89	0:0	20	[
water	165:90	0:0	20	run1
op	165:94	0:0	20	]
stmts	165:97	168:40	19	
water	165:97	0:0	20	{
call	166:44	166:118	20	av_log
arg	166:51	166:59	21	s->avctx
water	166:51	0:0	22	s
op	166:52	0:0	22	->
water	166:54	0:0	22	avctx
arg	166:61	166:73	21	AV_LOG_ERROR
water	166:61	0:0	22	AV_LOG_ERROR
arg	166:75	166:118	21	"illegal 3. esc, esc 2 encoding possible\n"
water	166:75	0:0	22	"illegal 3. esc, esc 2 encoding possible\n"
water	166:119	0:0	20	;
return	167:44	167:53	20	-1
op	167:51	0:0	21	-
water	167:52	0:0	21	1
water	168:40	0:0	20	}
water	169:36	0:0	18	}
water	170:32	0:0	16	}
water	171:28	0:0	14	}
if	173:28	174:59	12	(level > 0)
cond	173:32	173:40	13	level > 0
water	173:32	0:0	14	level
op	173:38	0:0	14	>
water	173:40	0:0	14	0
stmts	174:32	174:59	13	
water	174:32	0:0	14	level
op	174:38	0:0	14	=
water	174:40	0:0	14	level
op	174:46	0:0	14	*
water	174:48	0:0	14	qmul
op	174:53	0:0	14	+
water	174:55	0:0	14	qadd
water	174:59	0:0	14	;
else	175:28	176:59	12
stmts	176:32	176:59	13	
water	176:32	0:0	14	level
op	176:38	0:0	14	=
water	176:40	0:0	14	level
op	176:46	0:0	14	*
water	176:48	0:0	14	qmul
op	176:53	0:0	14	-
water	176:55	0:0	14	qadd
water	176:59	0:0	14	;
if	177:28	187:28	12	(( unsigned ) (level + 2048 ) > 4095)
cond	177:32	177:59	13	( unsigned ) (level + 2048 ) > 4095
call	177:32	177:55	14	(unsigned)
arg	177:43	177:55	15	level+2048
water	177:43	0:0	16	level
op	177:49	0:0	16	+
water	177:51	0:0	16	2048
op	177:57	0:0	14	>
water	177:59	0:0	14	4095
stmts	177:65	187:28	13	
water	177:65	0:0	14	{
if	178:32	185:32	14	(s -> avctx -> err_recognition & ( AV_EF_BITSTREAM | AV_EF_AGGRESSIVE ))
cond	178:36	178:97	15	s -> avctx -> err_recognition & ( AV_EF_BITSTREAM | AV_EF_AGGRESSIVE )
water	178:36	0:0	16	s
op	178:37	0:0	16	->
water	178:39	0:0	16	avctx
op	178:44	0:0	16	->
water	178:46	0:0	16	err_recognition
op	178:62	0:0	16	&
water	178:64	0:0	16	(
water	178:65	0:0	16	AV_EF_BITSTREAM
op	178:80	0:0	16	|
water	178:81	0:0	16	AV_EF_AGGRESSIVE
water	178:97	0:0	16	)
stmts	178:100	185:32	15	
water	178:100	0:0	16	{
if	179:36	184:36	16	(level > 2560 || level < - 2560)
cond	179:40	179:65	17	level > 2560 || level < - 2560
water	179:40	0:0	18	level
op	179:46	0:0	18	>
water	179:48	0:0	18	2560
op	179:53	0:0	18	||
water	179:56	0:0	18	level
op	179:62	0:0	18	<
op	179:64	0:0	18	-
water	179:65	0:0	18	2560
stmts	179:71	184:36	17	
water	179:71	0:0	18	{
call	180:40	182:56	18	av_log
arg	180:47	180:55	19	s->avctx
water	180:47	0:0	20	s
op	180:48	0:0	20	->
water	180:50	0:0	20	avctx
arg	180:57	180:69	19	AV_LOG_ERROR
water	180:57	0:0	20	AV_LOG_ERROR
arg	181:47	181:84	19	"|level| overflow in 3. esc, qp=%d\n"
water	181:47	0:0	20	"|level| overflow in 3. esc, qp=%d\n"
arg	182:47	182:56	19	s->qscale
water	182:47	0:0	20	s
op	182:48	0:0	20	->
water	182:50	0:0	20	qscale
water	182:57	0:0	18	;
return	183:40	183:49	18	-1
op	183:47	0:0	19	-
water	183:48	0:0	19	1
water	184:36	0:0	18	}
water	185:32	0:0	16	}
water	186:32	0:0	14	level
op	186:38	0:0	14	=
water	186:40	0:0	14	level
op	186:46	0:0	14	<
water	186:48	0:0	14	0
water	186:50	0:0	14	?
op	186:52	0:0	14	-
water	186:53	0:0	14	2048
water	186:58	0:0	14	:
water	186:60	0:0	14	2047
water	186:64	0:0	14	;
water	187:28	0:0	14	}
water	188:28	0:0	12	i
op	188:30	0:0	12	+=
water	188:33	0:0	12	run
op	188:37	0:0	12	+
water	188:39	0:0	12	1
water	188:40	0:0	12	;
if	189:28	190:40	12	(last)
cond	189:32	189:32	13	last
water	189:32	0:0	14	last
stmts	190:32	190:40	13	
water	190:32	0:0	14	i
op	190:34	0:0	14	+=
water	190:37	0:0	14	192
water	190:40	0:0	14	;
water	191:24	0:0	12	}
else	191:26	198:24	10
stmts	191:31	198:24	11	
water	191:31	0:0	12	{
call	193:28	193:51	12	SKIP_BITS
arg	193:38	193:40	13	re
water	193:38	0:0	14	re
arg	193:42	193:48	13	&s->gb
op	193:42	0:0	14	&
water	193:43	0:0	14	s
op	193:44	0:0	14	->
water	193:46	0:0	14	gb
arg	193:50	193:51	13	2
water	193:50	0:0	14	2
water	193:52	0:0	12	;
call	194:28	194:89	12	GET_RL_VLC
arg	194:39	194:44	13	level
water	194:39	0:0	14	level
arg	194:46	194:49	13	run
water	194:46	0:0	14	run
arg	194:51	194:53	13	re
water	194:51	0:0	14	re
arg	194:55	194:61	13	&s->gb
op	194:55	0:0	14	&
water	194:56	0:0	14	s
op	194:57	0:0	14	->
water	194:59	0:0	14	gb
arg	194:63	194:69	13	rl_vlc
water	194:63	0:0	14	rl_vlc
arg	194:71	194:83	13	TEX_VLC_BITS
water	194:71	0:0	14	TEX_VLC_BITS
arg	194:85	194:86	13	2
water	194:85	0:0	14	2
arg	194:88	194:89	13	1
water	194:88	0:0	14	1
water	194:90	0:0	12	;
water	195:28	0:0	12	i
op	195:33	0:0	12	+=
water	195:36	0:0	12	run
op	195:40	0:0	12	+
water	195:42	0:0	12	rl
op	195:44	0:0	12	->
water	195:46	0:0	12	max_run
op	195:53	0:0	12	[
water	195:54	0:0	12	run
op	195:58	0:0	12	>>
water	195:61	0:0	12	7
op	195:62	0:0	12	]
op	195:63	0:0	12	[
water	195:64	0:0	12	level
op	195:70	0:0	12	/
water	195:72	0:0	12	qmul
op	195:76	0:0	12	]
op	195:78	0:0	12	+
water	195:80	0:0	12	1
water	195:81	0:0	12	;
water	196:28	0:0	12	level
op	196:34	0:0	12	=
water	196:36	0:0	12	(
water	196:37	0:0	12	level
op	196:43	0:0	12	^
call	196:45	196:69	12	SHOW_SBITS
arg	196:56	196:58	13	re
water	196:56	0:0	14	re
arg	196:60	196:66	13	&s->gb
op	196:60	0:0	14	&
water	196:61	0:0	14	s
op	196:62	0:0	14	->
water	196:64	0:0	14	gb
arg	196:68	196:69	13	1
water	196:68	0:0	14	1
water	196:70	0:0	12	)
op	196:72	0:0	12	-
call	196:74	196:98	12	SHOW_SBITS
arg	196:85	196:87	13	re
water	196:85	0:0	14	re
arg	196:89	196:95	13	&s->gb
op	196:89	0:0	14	&
water	196:90	0:0	14	s
op	196:91	0:0	14	->
water	196:93	0:0	14	gb
arg	196:97	196:98	13	1
water	196:97	0:0	14	1
water	196:99	0:0	12	;
call	197:28	197:56	12	LAST_SKIP_BITS
arg	197:43	197:45	13	re
water	197:43	0:0	14	re
arg	197:47	197:53	13	&s->gb
op	197:47	0:0	14	&
water	197:48	0:0	14	s
op	197:49	0:0	14	->
water	197:51	0:0	14	gb
arg	197:55	197:56	13	1
water	197:55	0:0	14	1
water	197:57	0:0	12	;
water	198:24	0:0	12	}
water	199:20	0:0	10	}
else	199:22	207:20	8
stmts	199:27	207:20	9	
water	199:27	0:0	10	{
call	201:24	201:47	10	SKIP_BITS
arg	201:34	201:36	11	re
water	201:34	0:0	12	re
arg	201:38	201:44	11	&s->gb
op	201:38	0:0	12	&
water	201:39	0:0	12	s
op	201:40	0:0	12	->
water	201:42	0:0	12	gb
arg	201:46	201:47	11	1
water	201:46	0:0	12	1
water	201:48	0:0	10	;
call	202:24	202:85	10	GET_RL_VLC
arg	202:35	202:40	11	level
water	202:35	0:0	12	level
arg	202:42	202:45	11	run
water	202:42	0:0	12	run
arg	202:47	202:49	11	re
water	202:47	0:0	12	re
arg	202:51	202:57	11	&s->gb
op	202:51	0:0	12	&
water	202:52	0:0	12	s
op	202:53	0:0	12	->
water	202:55	0:0	12	gb
arg	202:59	202:65	11	rl_vlc
water	202:59	0:0	12	rl_vlc
arg	202:67	202:79	11	TEX_VLC_BITS
water	202:67	0:0	12	TEX_VLC_BITS
arg	202:81	202:82	11	2
water	202:81	0:0	12	2
arg	202:84	202:85	11	1
water	202:84	0:0	12	1
water	202:86	0:0	10	;
water	203:24	0:0	10	i
op	203:29	0:0	10	+=
water	203:32	0:0	10	run
water	203:35	0:0	10	;
water	204:24	0:0	10	level
op	204:30	0:0	10	=
water	204:32	0:0	10	level
op	204:38	0:0	10	+
water	204:40	0:0	10	rl
op	204:42	0:0	10	->
water	204:44	0:0	10	max_level
op	204:53	0:0	10	[
water	204:54	0:0	10	run
op	204:58	0:0	10	>>
water	204:61	0:0	10	7
op	204:62	0:0	10	]
op	204:63	0:0	10	[
water	204:64	0:0	10	(
water	204:65	0:0	10	run
op	204:69	0:0	10	-
water	204:71	0:0	10	1
water	204:72	0:0	10	)
op	204:74	0:0	10	&
water	204:76	0:0	10	63
op	204:78	0:0	10	]
op	204:80	0:0	10	*
water	204:82	0:0	10	qmul
water	204:86	0:0	10	;
water	205:24	0:0	10	level
op	205:30	0:0	10	=
water	205:32	0:0	10	(
water	205:33	0:0	10	level
op	205:39	0:0	10	^
call	205:41	205:65	10	SHOW_SBITS
arg	205:52	205:54	11	re
water	205:52	0:0	12	re
arg	205:56	205:62	11	&s->gb
op	205:56	0:0	12	&
water	205:57	0:0	12	s
op	205:58	0:0	12	->
water	205:60	0:0	12	gb
arg	205:64	205:65	11	1
water	205:64	0:0	12	1
water	205:66	0:0	10	)
op	205:68	0:0	10	-
call	205:70	205:94	10	SHOW_SBITS
arg	205:81	205:83	11	re
water	205:81	0:0	12	re
arg	205:85	205:91	11	&s->gb
op	205:85	0:0	12	&
water	205:86	0:0	12	s
op	205:87	0:0	12	->
water	205:89	0:0	12	gb
arg	205:93	205:94	11	1
water	205:93	0:0	12	1
water	205:95	0:0	10	;
call	206:24	206:52	10	LAST_SKIP_BITS
arg	206:39	206:41	11	re
water	206:39	0:0	12	re
arg	206:43	206:49	11	&s->gb
op	206:43	0:0	12	&
water	206:44	0:0	12	s
op	206:45	0:0	12	->
water	206:47	0:0	12	gb
arg	206:51	206:52	11	1
water	206:51	0:0	12	1
water	206:53	0:0	10	;
water	207:20	0:0	10	}
water	208:16	0:0	8	}
water	209:12	0:0	6	}
else	209:14	213:12	4
stmts	209:19	213:12	5	
water	209:19	0:0	6	{
water	210:16	0:0	6	i
op	210:21	0:0	6	+=
water	210:24	0:0	6	run
water	210:27	0:0	6	;
water	211:16	0:0	6	level
op	211:22	0:0	6	=
water	211:24	0:0	6	(
water	211:25	0:0	6	level
op	211:31	0:0	6	^
call	211:33	211:57	6	SHOW_SBITS
arg	211:44	211:46	7	re
water	211:44	0:0	8	re
arg	211:48	211:54	7	&s->gb
op	211:48	0:0	8	&
water	211:49	0:0	8	s
op	211:50	0:0	8	->
water	211:52	0:0	8	gb
arg	211:56	211:57	7	1
water	211:56	0:0	8	1
water	211:58	0:0	6	)
op	211:60	0:0	6	-
call	211:62	211:86	6	SHOW_SBITS
arg	211:73	211:75	7	re
water	211:73	0:0	8	re
arg	211:77	211:83	7	&s->gb
op	211:77	0:0	8	&
water	211:78	0:0	8	s
op	211:79	0:0	8	->
water	211:81	0:0	8	gb
arg	211:85	211:86	7	1
water	211:85	0:0	8	1
water	211:87	0:0	6	;
call	212:16	212:44	6	LAST_SKIP_BITS
arg	212:31	212:33	7	re
water	212:31	0:0	8	re
arg	212:35	212:41	7	&s->gb
op	212:35	0:0	8	&
water	212:36	0:0	8	s
op	212:37	0:0	8	->
water	212:39	0:0	8	gb
arg	212:43	212:44	7	1
water	212:43	0:0	8	1
water	212:45	0:0	6	;
water	213:12	0:0	6	}
call	214:12	214:117	4	ff_tlog
arg	214:20	214:28	5	s->avctx
water	214:20	0:0	6	s
op	214:21	0:0	6	->
water	214:23	0:0	6	avctx
arg	214:30	214:61	5	"dct[%d][%d] = %- 4d end?:%d\n"
water	214:30	0:0	6	"dct[%d][%d] = %- 4d end?:%d\n"
arg	214:63	214:81	5	scan_table[i&63]&7
water	214:63	0:0	6	scan_table
op	214:73	0:0	6	[
water	214:74	0:0	6	i
op	214:75	0:0	6	&
water	214:76	0:0	6	63
op	214:78	0:0	6	]
op	214:79	0:0	6	&
water	214:80	0:0	6	7
arg	214:83	214:104	5	scan_table[i&63]>>3
water	214:83	0:0	6	scan_table
op	214:93	0:0	6	[
water	214:94	0:0	6	i
op	214:95	0:0	6	&
water	214:96	0:0	6	63
op	214:98	0:0	6	]
op	214:100	0:0	6	>>
water	214:103	0:0	6	3
arg	214:106	214:111	5	level
water	214:106	0:0	6	level
arg	214:113	214:117	5	i>62
water	214:113	0:0	6	i
op	214:114	0:0	6	>
water	214:115	0:0	6	62
water	214:118	0:0	4	;
if	215:12	224:12	4	(i > 62)
cond	215:16	215:20	5	i > 62
water	215:16	0:0	6	i
op	215:18	0:0	6	>
water	215:20	0:0	6	62
stmts	215:24	224:12	5	
water	215:24	0:0	6	{
water	216:16	0:0	6	i
op	216:18	0:0	6	-=
water	216:21	0:0	6	192
water	216:24	0:0	6	;
if	217:16	221:16	6	(i & ( ~63 ))
cond	217:20	217:28	7	i & ( ~63 )
water	217:20	0:0	8	i
op	217:22	0:0	8	&
water	217:24	0:0	8	(
water	217:25	0:0	8	~63
water	217:28	0:0	8	)
stmts	217:31	221:16	7	
water	217:31	0:0	8	{
call	218:20	219:72	8	av_log
arg	218:27	218:35	9	s->avctx
water	218:27	0:0	10	s
op	218:28	0:0	10	->
water	218:30	0:0	10	avctx
arg	218:37	218:49	9	AV_LOG_ERROR
water	218:37	0:0	10	AV_LOG_ERROR
arg	219:27	219:54	9	"ac-tex damaged at %d %d\n"
water	219:27	0:0	10	"ac-tex damaged at %d %d\n"
arg	219:56	219:63	9	s->mb_x
water	219:56	0:0	10	s
op	219:57	0:0	10	->
water	219:59	0:0	10	mb_x
arg	219:65	219:72	9	s->mb_y
water	219:65	0:0	10	s
op	219:66	0:0	10	->
water	219:68	0:0	10	mb_y
water	219:73	0:0	8	;
return	220:20	220:29	8	-1
op	220:27	0:0	9	-
water	220:28	0:0	9	1
water	221:16	0:0	8	}
water	222:16	0:0	6	block
op	222:21	0:0	6	[
water	222:22	0:0	6	scan_table
op	222:32	0:0	6	[
water	222:33	0:0	6	i
op	222:34	0:0	6	]
op	222:35	0:0	6	]
op	222:37	0:0	6	=
water	222:39	0:0	6	level
water	222:44	0:0	6	;
break	223:16	223:21	6	
water	224:12	0:0	6	}
water	225:12	0:0	4	block
op	225:17	0:0	4	[
water	225:18	0:0	4	scan_table
op	225:28	0:0	4	[
water	225:29	0:0	4	i
op	225:30	0:0	4	]
op	225:31	0:0	4	]
op	225:33	0:0	4	=
water	225:35	0:0	4	level
water	225:40	0:0	4	;
water	226:8	0:0	4	}
call	227:8	227:31	2	CLOSE_READER
arg	227:21	227:23	3	re
water	227:21	0:0	4	re
arg	227:25	227:31	3	&s->gb
op	227:25	0:0	4	&
water	227:26	0:0	4	s
op	227:27	0:0	4	->
water	227:29	0:0	4	gb
water	227:32	0:0	2	;
water	228:4	0:0	2	}
label	229:0	229:9	2	not_coded :
if	230:4	238:4	2	(intra)
cond	230:8	230:8	3	intra
water	230:8	0:0	4	intra
stmts	230:15	238:4	3	
water	230:15	0:0	4	{
if	231:8	234:8	4	(! ctx -> use_intra_dc_vlc)
cond	231:12	231:18	5	! ctx -> use_intra_dc_vlc
op	231:12	0:0	6	!
water	231:13	0:0	6	ctx
op	231:16	0:0	6	->
water	231:18	0:0	6	use_intra_dc_vlc
stmts	231:36	234:8	5	
water	231:36	0:0	6	{
water	232:12	0:0	6	block
op	232:17	0:0	6	[
water	232:18	0:0	6	0
op	232:19	0:0	6	]
op	232:21	0:0	6	=
call	232:23	232:71	6	ff_mpeg4_pred_dc
arg	232:40	232:41	7	s
water	232:40	0:0	8	s
arg	232:43	232:44	7	n
water	232:43	0:0	8	n
arg	232:46	232:54	7	block[0]
water	232:46	0:0	8	block
op	232:51	0:0	8	[
water	232:52	0:0	8	0
op	232:53	0:0	8	]
arg	232:56	232:68	7	&dc_pred_dir
op	232:56	0:0	8	&
water	232:57	0:0	8	dc_pred_dir
arg	232:70	232:71	7	0
water	232:70	0:0	8	0
water	232:72	0:0	6	;
water	233:12	0:0	6	i
op	233:14	0:0	6	-=
water	233:17	0:0	6	i
op	233:19	0:0	6	>>
water	233:22	0:0	6	31
water	233:24	0:0	6	;
water	234:8	0:0	6	}
call	235:8	235:49	4	ff_mpeg4_pred_ac
arg	235:25	235:26	5	s
water	235:25	0:0	6	s
arg	235:28	235:33	5	block
water	235:28	0:0	6	block
arg	235:35	235:36	5	n
water	235:35	0:0	6	n
arg	235:38	235:49	5	dc_pred_dir
water	235:38	0:0	6	dc_pred_dir
water	235:50	0:0	4	;
if	236:8	237:18	4	(s -> ac_pred)
cond	236:12	236:15	5	s -> ac_pred
water	236:12	0:0	6	s
op	236:13	0:0	6	->
water	236:15	0:0	6	ac_pred
stmts	237:12	237:18	5	
water	237:12	0:0	6	i
op	237:14	0:0	6	=
water	237:16	0:0	6	63
water	237:18	0:0	6	;
water	238:4	0:0	4	}
water	239:4	0:0	2	s
op	239:5	0:0	2	->
water	239:7	0:0	2	block_last_index
op	239:23	0:0	2	[
water	239:24	0:0	2	n
op	239:25	0:0	2	]
op	239:27	0:0	2	=
water	239:29	0:0	2	i
water	239:30	0:0	2	;
return	240:4	240:12	2	0
water	240:11	0:0	3	0
