func	1:0	45:0	0	AudioConvert *	ff_audio_convert_alloc
params	1:36	0:0	1	
param	1:37	1:64	2	AVAudioResampleContext *	avr
param	2:37	2:64	2	enum AVSampleFormat	out_fmt
param	3:37	3:63	2	enum AVSampleFormat	in_fmt
param	4:37	4:49	2	int	channels
param	4:51	4:66	2	int	sample_rate
param	5:37	5:50	2	int	apply_map
stmnts	0:0	44:13	1	
decl	7:4	7:20	2	AudioConvert	*ac
decl	8:4	8:29	2	int	in_planar
water	8:17	0:0	2	,
decl	8:4	8:29	2	int	out_planar
water	9:4	0:0	2	ac
op	9:7	0:0	2	=
call	9:9	9:31	2	av_mallocz
arg	9:20	9:31	3	sizeof(*ac)
op	9:20	0:0	4	sizeof
water	9:26	0:0	4	(
op	9:27	0:0	4	*
water	9:28	0:0	4	ac
water	9:30	0:0	4	)
water	9:32	0:0	2	;
if	10:4	11:19	2	(! ac)
cond	10:8	10:9	3	! ac
op	10:8	0:0	4	!
water	10:9	0:0	4	ac
stmts	11:8	11:19	3	
return	11:8	11:19	4	NULL
water	11:15	0:0	5	NULL
water	12:4	0:0	2	ac
op	12:6	0:0	2	->
water	12:8	0:0	2	avr
op	12:17	0:0	2	=
water	12:19	0:0	2	avr
water	12:22	0:0	2	;
water	13:4	0:0	2	ac
op	13:6	0:0	2	->
water	13:8	0:0	2	out_fmt
op	13:17	0:0	2	=
water	13:19	0:0	2	out_fmt
water	13:26	0:0	2	;
water	14:4	0:0	2	ac
op	14:6	0:0	2	->
water	14:8	0:0	2	in_fmt
op	14:17	0:0	2	=
water	14:19	0:0	2	in_fmt
water	14:25	0:0	2	;
water	15:4	0:0	2	ac
op	15:6	0:0	2	->
water	15:8	0:0	2	channels
op	15:17	0:0	2	=
water	15:19	0:0	2	channels
water	15:27	0:0	2	;
water	16:4	0:0	2	ac
op	16:6	0:0	2	->
water	16:8	0:0	2	apply_map
op	16:18	0:0	2	=
water	16:20	0:0	2	apply_map
water	16:29	0:0	2	;
if	17:4	27:4	2	(avr -> dither_method != AV_RESAMPLE_DITHER_NONE &&av_get_packed_sample_fmt (out_fmt ) == AV_SAMPLE_FMT_S16 &&av_get_bytes_per_sample (in_fmt ) > 2)
cond	17:8	19:42	3	avr -> dither_method != AV_RESAMPLE_DITHER_NONE &&av_get_packed_sample_fmt (out_fmt ) == AV_SAMPLE_FMT_S16 &&av_get_bytes_per_sample (in_fmt ) > 2
water	17:8	0:0	4	avr
op	17:11	0:0	4	->
water	17:13	0:0	4	dither_method
op	17:27	0:0	4	!=
water	17:30	0:0	4	AV_RESAMPLE_DITHER_NONE
op	17:63	0:0	4	&&
call	18:8	18:40	4	av_get_packed_sample_fmt
arg	18:33	18:40	5	out_fmt
water	18:33	0:0	6	out_fmt
op	18:42	0:0	4	==
water	18:45	0:0	4	AV_SAMPLE_FMT_S16
op	18:63	0:0	4	&&
call	19:8	19:38	4	av_get_bytes_per_sample
arg	19:32	19:38	5	in_fmt
water	19:32	0:0	6	in_fmt
op	19:40	0:0	4	>
water	19:42	0:0	4	2
stmts	19:45	27:4	3	
water	19:45	0:0	4	{
water	20:8	0:0	4	ac
op	20:10	0:0	4	->
water	20:12	0:0	4	dc
op	20:15	0:0	4	=
call	20:17	21:42	4	ff_dither_alloc
arg	20:33	20:36	5	avr
water	20:33	0:0	6	avr
arg	20:38	20:45	5	out_fmt
water	20:38	0:0	6	out_fmt
arg	20:47	20:53	5	in_fmt
water	20:47	0:0	6	in_fmt
arg	20:55	20:63	5	channels
water	20:55	0:0	6	channels
arg	20:65	20:76	5	sample_rate
water	20:65	0:0	6	sample_rate
arg	21:33	21:42	5	apply_map
water	21:33	0:0	6	apply_map
water	21:43	0:0	4	;
if	22:8	25:8	4	(! ac -> dc)
cond	22:12	22:17	5	! ac -> dc
op	22:12	0:0	6	!
water	22:13	0:0	6	ac
op	22:15	0:0	6	->
water	22:17	0:0	6	dc
stmts	22:21	25:8	5	
water	22:21	0:0	6	{
call	23:12	23:22	6	av_free
arg	23:20	23:22	7	ac
water	23:20	0:0	8	ac
water	23:23	0:0	6	;
return	24:12	24:23	6	NULL
water	24:19	0:0	7	NULL
water	25:8	0:0	6	}
return	26:8	26:17	4	ac
water	26:15	0:0	5	ac
water	27:4	0:0	4	}
water	28:4	0:0	2	in_planar
op	28:15	0:0	2	=
call	28:17	28:57	2	ff_sample_fmt_is_planar
arg	28:41	28:47	3	in_fmt
water	28:41	0:0	4	in_fmt
arg	28:49	28:57	3	channels
water	28:49	0:0	4	channels
water	28:58	0:0	2	;
water	29:4	0:0	2	out_planar
op	29:15	0:0	2	=
call	29:17	29:58	2	ff_sample_fmt_is_planar
arg	29:41	29:48	3	out_fmt
water	29:41	0:0	4	out_fmt
arg	29:50	29:58	3	channels
water	29:50	0:0	4	channels
water	29:59	0:0	2	;
if	30:4	33:4	2	(in_planar == out_planar)
cond	30:8	30:21	3	in_planar == out_planar
water	30:8	0:0	4	in_planar
op	30:18	0:0	4	==
water	30:21	0:0	4	out_planar
stmts	30:33	33:4	3	
water	30:33	0:0	4	{
water	31:8	0:0	4	ac
op	31:10	0:0	4	->
water	31:12	0:0	4	func_type
op	31:22	0:0	4	=
water	31:24	0:0	4	CONV_FUNC_TYPE_FLAT
water	31:43	0:0	4	;
water	32:8	0:0	4	ac
op	32:10	0:0	4	->
water	32:12	0:0	4	planes
op	32:22	0:0	4	=
water	32:24	0:0	4	in_planar
water	32:34	0:0	4	?
water	32:36	0:0	4	ac
op	32:38	0:0	4	->
water	32:40	0:0	4	channels
water	32:49	0:0	4	:
water	32:51	0:0	4	1
water	32:52	0:0	4	;
water	33:4	0:0	4	}
else	33:6	34:49	2
stmts	33:11	34:49	3	
if	33:11	34:49	4	(in_planar)
cond	33:15	33:15	5	in_planar
water	33:15	0:0	6	in_planar
stmts	34:8	34:49	5	
water	34:8	0:0	6	ac
op	34:10	0:0	6	->
water	34:12	0:0	6	func_type
op	34:22	0:0	6	=
water	34:24	0:0	6	CONV_FUNC_TYPE_INTERLEAVE
water	34:49	0:0	6	;
else	35:4	36:51	2
stmts	36:8	36:51	3	
water	36:8	0:0	4	ac
op	36:10	0:0	4	->
water	36:12	0:0	4	func_type
op	36:22	0:0	4	=
water	36:24	0:0	4	CONV_FUNC_TYPE_DEINTERLEAVE
water	36:51	0:0	4	;
call	37:4	37:27	2	set_generic_function
arg	37:25	37:27	3	ac
water	37:25	0:0	4	ac
water	37:28	0:0	2	;
if	38:4	39:41	2	(ARCH_AARCH64)
cond	38:8	38:8	3	ARCH_AARCH64
water	38:8	0:0	4	ARCH_AARCH64
stmts	39:8	39:41	3	
call	39:8	39:40	4	ff_audio_convert_init_aarch64
arg	39:38	39:40	5	ac
water	39:38	0:0	6	ac
water	39:41	0:0	4	;
if	40:4	41:37	2	(ARCH_ARM)
cond	40:8	40:8	3	ARCH_ARM
water	40:8	0:0	4	ARCH_ARM
stmts	41:8	41:37	3	
call	41:8	41:36	4	ff_audio_convert_init_arm
arg	41:34	41:36	5	ac
water	41:34	0:0	6	ac
water	41:37	0:0	4	;
if	42:4	43:37	2	(ARCH_X86)
cond	42:8	42:8	3	ARCH_X86
water	42:8	0:0	4	ARCH_X86
stmts	43:8	43:37	3	
call	43:8	43:36	4	ff_audio_convert_init_x86
arg	43:34	43:36	5	ac
water	43:34	0:0	6	ac
water	43:37	0:0	4	;
return	44:4	44:13	2	ac
water	44:11	0:0	3	ac
