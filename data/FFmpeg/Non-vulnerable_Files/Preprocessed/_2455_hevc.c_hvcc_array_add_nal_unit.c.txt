func	1:0	42:0	0	static int	hvcc_array_add_nal_unit
params	1:34	0:0	1	
param	1:35	1:51	2	uint8_t *	nal_buf
param	1:53	1:70	2	uint32_t	nal_size
param	2:35	2:51	2	uint8_t	nal_type
param	2:53	2:78	2	int	ps_array_completeness
param	3:35	3:71	2	HEVCDecoderConfigurationRecord *	hvcc
stmnts	0:0	41:12	1	
decl	5:4	5:11	2	int	ret
decl	6:4	6:17	2	uint8_t	index
decl	7:4	7:21	2	uint16_t	numNalus
decl	8:4	8:27	2	HVCCNALUnitArray	*array
for	9:4	11:17	2	(index = 0 ;index < hvcc -> numOfArrays;index ++)
forinit	9:9	9:18	3	index = 0 ;
water	9:9	0:0	4	index
op	9:15	0:0	4	=
water	9:17	0:0	4	0
water	9:18	0:0	4	;
cond	9:20	9:34	3	index < hvcc -> numOfArrays
water	9:20	0:0	4	index
op	9:26	0:0	4	<
water	9:28	0:0	4	hvcc
op	9:32	0:0	4	->
water	9:34	0:0	4	numOfArrays
forexpr	9:47	9:52	3	index ++
water	9:47	0:0	4	index
op	9:52	0:0	4	++
stmts	10:8	11:17	3	
if	10:8	11:17	4	(hvcc -> array [ index ] . NAL_unit_type == nal_type)
cond	10:12	10:48	5	hvcc -> array [ index ] . NAL_unit_type == nal_type
water	10:12	0:0	6	hvcc
op	10:16	0:0	6	->
water	10:18	0:0	6	array
op	10:23	0:0	6	[
water	10:24	0:0	6	index
op	10:29	0:0	6	]
op	10:30	0:0	6	.
water	10:31	0:0	6	NAL_unit_type
op	10:45	0:0	6	==
water	10:48	0:0	6	nal_type
stmts	11:12	11:17	5	
break	11:12	11:17	6	
if	12:4	20:4	2	(index >= hvcc -> numOfArrays)
cond	12:8	12:23	3	index >= hvcc -> numOfArrays
water	12:8	0:0	4	index
op	12:14	0:0	4	>=
water	12:17	0:0	4	hvcc
op	12:21	0:0	4	->
water	12:23	0:0	4	numOfArrays
stmts	12:36	20:4	3	
water	12:36	0:0	4	{
decl	13:8	13:17	4	uint8_t	i
water	14:8	0:0	4	ret
op	14:12	0:0	4	=
call	14:14	14:81	4	av_reallocp_array
arg	14:32	14:44	5	&hvcc->array
op	14:32	0:0	6	&
water	14:33	0:0	6	hvcc
op	14:37	0:0	6	->
water	14:39	0:0	6	array
arg	14:46	14:55	5	index+1
water	14:46	0:0	6	index
op	14:52	0:0	6	+
water	14:54	0:0	6	1
arg	14:57	14:81	5	sizeof(HVCCNALUnitArray)
op	14:57	0:0	6	sizeof
water	14:63	0:0	6	(
water	14:64	0:0	6	HVCCNALUnitArray
water	14:80	0:0	6	)
water	14:82	0:0	4	;
if	15:8	16:22	4	(ret < 0)
cond	15:12	15:18	5	ret < 0
water	15:12	0:0	6	ret
op	15:16	0:0	6	<
water	15:18	0:0	6	0
stmts	16:12	16:22	5	
return	16:12	16:22	6	ret
water	16:19	0:0	7	ret
for	17:8	18:64	4	(i = hvcc -> numOfArrays ;i <= index;i ++)
forinit	17:13	17:34	5	i = hvcc -> numOfArrays ;
water	17:13	0:0	6	i
op	17:15	0:0	6	=
water	17:17	0:0	6	hvcc
op	17:21	0:0	6	->
water	17:23	0:0	6	numOfArrays
water	17:34	0:0	6	;
cond	17:36	17:41	5	i <= index
water	17:36	0:0	6	i
op	17:38	0:0	6	<=
water	17:41	0:0	6	index
forexpr	17:48	17:49	5	i ++
water	17:48	0:0	6	i
op	17:49	0:0	6	++
stmts	18:12	18:64	5	
call	18:12	18:63	6	memset
arg	18:19	18:34	7	&hvcc->array[i]
op	18:19	0:0	8	&
water	18:20	0:0	8	hvcc
op	18:24	0:0	8	->
water	18:26	0:0	8	array
op	18:31	0:0	8	[
water	18:32	0:0	8	i
op	18:33	0:0	8	]
arg	18:36	18:37	7	0
water	18:36	0:0	8	0
arg	18:39	18:63	7	sizeof(HVCCNALUnitArray)
op	18:39	0:0	8	sizeof
water	18:45	0:0	8	(
water	18:46	0:0	8	HVCCNALUnitArray
water	18:62	0:0	8	)
water	18:64	0:0	6	;
water	19:8	0:0	4	hvcc
op	19:12	0:0	4	->
water	19:14	0:0	4	numOfArrays
op	19:26	0:0	4	=
water	19:28	0:0	4	index
op	19:34	0:0	4	+
water	19:36	0:0	4	1
water	19:37	0:0	4	;
water	20:4	0:0	4	}
water	21:4	0:0	2	array
op	21:13	0:0	2	=
op	21:15	0:0	2	&
water	21:16	0:0	2	hvcc
op	21:20	0:0	2	->
water	21:22	0:0	2	array
op	21:27	0:0	2	[
water	21:28	0:0	2	index
op	21:33	0:0	2	]
water	21:34	0:0	2	;
water	22:4	0:0	2	numNalus
op	22:13	0:0	2	=
water	22:15	0:0	2	array
op	22:20	0:0	2	->
water	22:22	0:0	2	numNalus
water	22:30	0:0	2	;
water	23:4	0:0	2	ret
op	23:8	0:0	2	=
call	23:10	23:75	2	av_reallocp_array
arg	23:28	23:43	3	&array->nalUnit
op	23:28	0:0	4	&
water	23:29	0:0	4	array
op	23:34	0:0	4	->
water	23:36	0:0	4	nalUnit
arg	23:45	23:57	3	numNalus+1
water	23:45	0:0	4	numNalus
op	23:54	0:0	4	+
water	23:56	0:0	4	1
arg	23:59	23:75	3	sizeof(uint8_t*)
op	23:59	0:0	4	sizeof
water	23:65	0:0	4	(
water	23:66	0:0	4	uint8_t
op	23:73	0:0	4	*
water	23:74	0:0	4	)
water	23:76	0:0	2	;
if	24:4	25:18	2	(ret < 0)
cond	24:8	24:14	3	ret < 0
water	24:8	0:0	4	ret
op	24:12	0:0	4	<
water	24:14	0:0	4	0
stmts	25:8	25:18	3	
return	25:8	25:18	4	ret
water	25:15	0:0	5	ret
water	26:4	0:0	2	ret
op	26:8	0:0	2	=
call	26:10	26:81	2	av_reallocp_array
arg	26:28	26:49	3	&array->nalUnitLength
op	26:28	0:0	4	&
water	26:29	0:0	4	array
op	26:34	0:0	4	->
water	26:36	0:0	4	nalUnitLength
arg	26:51	26:63	3	numNalus+1
water	26:51	0:0	4	numNalus
op	26:60	0:0	4	+
water	26:62	0:0	4	1
arg	26:65	26:81	3	sizeof(uint16_t)
op	26:65	0:0	4	sizeof
water	26:71	0:0	4	(
water	26:72	0:0	4	uint16_t
water	26:80	0:0	4	)
water	26:82	0:0	2	;
if	27:4	28:18	2	(ret < 0)
cond	27:8	27:14	3	ret < 0
water	27:8	0:0	4	ret
op	27:12	0:0	4	<
water	27:14	0:0	4	0
stmts	28:8	28:18	3	
return	28:8	28:18	4	ret
water	28:15	0:0	5	ret
water	29:4	0:0	2	array
op	29:9	0:0	2	->
water	29:11	0:0	2	nalUnit
op	29:24	0:0	2	[
water	29:25	0:0	2	numNalus
op	29:33	0:0	2	]
op	29:35	0:0	2	=
water	29:37	0:0	2	nal_buf
water	29:44	0:0	2	;
water	30:4	0:0	2	array
op	30:9	0:0	2	->
water	30:11	0:0	2	nalUnitLength
op	30:24	0:0	2	[
water	30:25	0:0	2	numNalus
op	30:33	0:0	2	]
op	30:35	0:0	2	=
water	30:37	0:0	2	nal_size
water	30:45	0:0	2	;
water	31:4	0:0	2	array
op	31:9	0:0	2	->
water	31:11	0:0	2	NAL_unit_type
op	31:35	0:0	2	=
water	31:37	0:0	2	nal_type
water	31:45	0:0	2	;
water	32:4	0:0	2	array
op	32:9	0:0	2	->
water	32:11	0:0	2	numNalus
op	32:19	0:0	2	++
water	32:21	0:0	2	;
if	39:4	40:57	2	(nal_type == NAL_VPS || nal_type == NAL_SPS || nal_type == NAL_PPS)
cond	39:8	39:66	3	nal_type == NAL_VPS || nal_type == NAL_SPS || nal_type == NAL_PPS
water	39:8	0:0	4	nal_type
op	39:17	0:0	4	==
water	39:20	0:0	4	NAL_VPS
op	39:28	0:0	4	||
water	39:31	0:0	4	nal_type
op	39:40	0:0	4	==
water	39:43	0:0	4	NAL_SPS
op	39:51	0:0	4	||
water	39:54	0:0	4	nal_type
op	39:63	0:0	4	==
water	39:66	0:0	4	NAL_PPS
stmts	40:8	40:57	3	
water	40:8	0:0	4	array
op	40:13	0:0	4	->
water	40:15	0:0	4	array_completeness
op	40:34	0:0	4	=
water	40:36	0:0	4	ps_array_completeness
water	40:57	0:0	4	;
return	41:4	41:12	2	0
water	41:11	0:0	3	0
