func	1:15	25:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	24:12	1	
decl	3:4	3:30	2	FadeContext	*s
op	3:19	0:0	2	=
water	3:21	0:0	2	ctx
op	3:24	0:0	2	->
water	3:26	0:0	2	priv
water	4:4	0:0	2	s
op	4:5	0:0	2	->
water	4:7	0:0	2	fade_per_frame
op	4:22	0:0	2	=
water	4:24	0:0	2	(
water	4:25	0:0	2	1
op	4:27	0:0	2	<<
water	4:30	0:0	2	16
water	4:32	0:0	2	)
op	4:34	0:0	2	/
water	4:36	0:0	2	s
op	4:37	0:0	2	->
water	4:39	0:0	2	nb_frames
water	4:48	0:0	2	;
water	5:4	0:0	2	s
op	5:5	0:0	2	->
water	5:7	0:0	2	fade_state
op	5:18	0:0	2	=
water	5:20	0:0	2	VF_FADE_WAITING
water	5:35	0:0	2	;
if	6:4	9:4	2	(s -> duration != 0)
cond	6:8	6:23	3	s -> duration != 0
water	6:8	0:0	4	s
op	6:9	0:0	4	->
water	6:11	0:0	4	duration
op	6:20	0:0	4	!=
water	6:23	0:0	4	0
stmts	6:26	9:4	3	
water	6:26	0:0	4	{
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	nb_frames
op	8:21	0:0	4	=
water	8:23	0:0	4	0
water	8:24	0:0	4	;
water	9:4	0:0	4	}
if	11:4	16:4	2	(s -> start_frame || s -> nb_frames)
cond	11:8	11:29	3	s -> start_frame || s -> nb_frames
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	start_frame
op	11:23	0:0	4	||
water	11:26	0:0	4	s
op	11:27	0:0	4	->
water	11:29	0:0	4	nb_frames
stmts	11:40	16:4	3	
water	11:40	0:0	4	{
call	12:8	15:36	4	av_log
arg	12:15	12:18	5	ctx
water	12:15	0:0	6	ctx
arg	12:20	12:34	5	AV_LOG_VERBOSE
water	12:20	0:0	6	AV_LOG_VERBOSE
arg	13:15	13:63	5	"type:%s start_frame:%d nb_frames:%d alpha:%d\n"
water	13:15	0:0	6	"type:%s start_frame:%d nb_frames:%d alpha:%d\n"
arg	14:15	14:48	5	s->type==FADE_IN?"in":"out"
water	14:15	0:0	6	s
op	14:16	0:0	6	->
water	14:18	0:0	6	type
op	14:23	0:0	6	==
water	14:26	0:0	6	FADE_IN
water	14:34	0:0	6	?
water	14:36	0:0	6	"in"
water	14:41	0:0	6	:
water	14:43	0:0	6	"out"
arg	14:50	14:64	5	s->start_frame
water	14:50	0:0	6	s
op	14:51	0:0	6	->
water	14:53	0:0	6	start_frame
arg	15:15	15:27	5	s->nb_frames
water	15:15	0:0	6	s
op	15:16	0:0	6	->
water	15:18	0:0	6	nb_frames
arg	15:28	15:36	5	s->alpha
water	15:28	0:0	6	s
op	15:29	0:0	6	->
water	15:31	0:0	6	alpha
water	15:37	0:0	4	;
water	16:4	0:0	4	}
if	17:4	22:4	2	(s -> start_time || s -> duration)
cond	17:8	17:28	3	s -> start_time || s -> duration
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	start_time
op	17:22	0:0	4	||
water	17:25	0:0	4	s
op	17:26	0:0	4	->
water	17:28	0:0	4	duration
stmts	17:38	22:4	3	
water	17:38	0:0	4	{
call	18:8	21:60	4	av_log
arg	18:15	18:18	5	ctx
water	18:15	0:0	6	ctx
arg	18:20	18:34	5	AV_LOG_VERBOSE
water	18:20	0:0	6	AV_LOG_VERBOSE
arg	19:15	19:61	5	"type:%s start_time:%f duration:%f alpha:%d\n"
water	19:15	0:0	6	"type:%s start_time:%f duration:%f alpha:%d\n"
arg	20:15	20:48	5	s->type==FADE_IN?"in":"out"
water	20:15	0:0	6	s
op	20:16	0:0	6	->
water	20:18	0:0	6	type
op	20:23	0:0	6	==
water	20:26	0:0	6	FADE_IN
water	20:34	0:0	6	?
water	20:36	0:0	6	"in"
water	20:41	0:0	6	:
water	20:43	0:0	6	"out"
arg	20:50	20:88	5	(s->start_time/(double)AV_TIME_BASE)
water	20:50	0:0	6	(
water	20:51	0:0	6	s
op	20:52	0:0	6	->
water	20:54	0:0	6	start_time
op	20:65	0:0	6	/
water	20:67	0:0	6	(
water	20:68	0:0	6	double
water	20:74	0:0	6	)
water	20:75	0:0	6	AV_TIME_BASE
water	20:87	0:0	6	)
arg	21:15	21:51	5	(s->duration/(double)AV_TIME_BASE)
water	21:15	0:0	6	(
water	21:16	0:0	6	s
op	21:17	0:0	6	->
water	21:19	0:0	6	duration
op	21:28	0:0	6	/
water	21:30	0:0	6	(
water	21:31	0:0	6	double
water	21:37	0:0	6	)
water	21:38	0:0	6	AV_TIME_BASE
water	21:50	0:0	6	)
arg	21:52	21:60	5	s->alpha
water	21:52	0:0	6	s
op	21:53	0:0	6	->
water	21:55	0:0	6	alpha
water	21:61	0:0	4	;
water	22:4	0:0	4	}
water	23:4	0:0	2	s
op	23:5	0:0	2	->
water	23:7	0:0	2	black_fade
op	23:18	0:0	2	=
op	23:20	0:0	2	!
call	23:21	23:64	2	memcmp
arg	23:28	23:41	3	s->color_rgba
water	23:28	0:0	4	s
op	23:29	0:0	4	->
water	23:31	0:0	4	color_rgba
arg	23:43	23:61	3	"\x00\x00\x00\xff"
water	23:43	0:0	4	"\x00\x00\x00\xff"
arg	23:63	23:64	3	4
water	23:63	0:0	4	4
water	23:65	0:0	2	;
return	24:4	24:12	2	0
water	24:11	0:0	3	0
