func	1:0	81:0	0	static AVFrame *	get_palette_frame
params	1:33	0:0	1	
param	1:34	1:54	2	AVFilterContext *	ctx
stmnts	0:0	80:14	1	
decl	3:4	3:16	2	AVFrame	*out
decl	4:4	4:36	2	PaletteGenContext	*s
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	priv
decl	5:4	5:43	2	AVFilterLink	*outlink
op	5:26	0:0	2	=
water	5:28	0:0	2	ctx
op	5:31	0:0	2	->
water	5:33	0:0	2	outputs
op	5:40	0:0	2	[
water	5:41	0:0	2	0
op	5:42	0:0	2	]
decl	6:4	6:16	2	double	ratio
decl	7:4	7:18	2	int	box_id
op	7:15	0:0	2	=
water	7:17	0:0	2	0
decl	8:4	8:25	2	struct range_box	*box
water	10:4	0:0	2	s
op	10:5	0:0	2	->
water	10:7	0:0	2	refs
op	10:12	0:0	2	=
call	10:14	10:54	2	load_color_refs
arg	10:30	10:42	3	s->histogram
water	10:30	0:0	4	s
op	10:31	0:0	4	->
water	10:33	0:0	4	histogram
arg	10:44	10:54	3	s->nb_refs
water	10:44	0:0	4	s
op	10:45	0:0	4	->
water	10:47	0:0	4	nb_refs
water	10:55	0:0	2	;
if	11:4	14:4	2	(! s -> refs)
cond	11:8	11:12	3	! s -> refs
op	11:8	0:0	4	!
water	11:9	0:0	4	s
op	11:10	0:0	4	->
water	11:12	0:0	4	refs
stmts	11:18	14:4	3	
water	11:18	0:0	4	{
call	12:8	12:103	4	av_log
arg	12:15	12:18	5	ctx
water	12:15	0:0	6	ctx
arg	12:20	12:32	5	AV_LOG_ERROR
water	12:20	0:0	6	AV_LOG_ERROR
arg	12:34	12:91	5	"Unable to allocate references for %d different colors\n"
water	12:34	0:0	6	"Unable to allocate references for %d different colors\n"
arg	12:93	12:103	5	s->nb_refs
water	12:93	0:0	6	s
op	12:94	0:0	6	->
water	12:96	0:0	6	nb_refs
water	12:104	0:0	4	;
return	13:8	13:19	4	NULL
water	13:15	0:0	5	NULL
water	14:4	0:0	4	}
water	16:4	0:0	2	out
op	16:8	0:0	2	=
call	16:10	16:61	2	ff_get_video_buffer
arg	16:30	16:37	3	outlink
water	16:30	0:0	4	outlink
arg	16:39	16:49	3	outlink->w
water	16:39	0:0	4	outlink
op	16:46	0:0	4	->
water	16:48	0:0	4	w
arg	16:51	16:61	3	outlink->h
water	16:51	0:0	4	outlink
op	16:58	0:0	4	->
water	16:60	0:0	4	h
water	16:62	0:0	2	;
if	17:4	18:19	2	(! out)
cond	17:8	17:9	3	! out
op	17:8	0:0	4	!
water	17:9	0:0	4	out
stmts	18:8	18:19	3	
return	18:8	18:19	4	NULL
water	18:15	0:0	5	NULL
water	19:4	0:0	2	out
op	19:7	0:0	2	->
water	19:9	0:0	2	pts
op	19:13	0:0	2	=
water	19:15	0:0	2	0
water	19:16	0:0	2	;
water	21:4	0:0	2	box
op	21:8	0:0	2	=
op	21:10	0:0	2	&
water	21:11	0:0	2	s
op	21:12	0:0	2	->
water	21:14	0:0	2	boxes
op	21:19	0:0	2	[
water	21:20	0:0	2	box_id
op	21:26	0:0	2	]
water	21:27	0:0	2	;
water	22:4	0:0	2	box
op	22:7	0:0	2	->
water	22:9	0:0	2	len
op	22:13	0:0	2	=
water	22:15	0:0	2	s
op	22:16	0:0	2	->
water	22:18	0:0	2	nb_refs
water	22:25	0:0	2	;
water	23:4	0:0	2	box
op	23:7	0:0	2	->
water	23:9	0:0	2	sorted_by
op	23:19	0:0	2	=
op	23:21	0:0	2	-
water	23:22	0:0	2	1
water	23:23	0:0	2	;
water	24:4	0:0	2	box
op	24:7	0:0	2	->
water	24:9	0:0	2	color
op	24:15	0:0	2	=
call	24:17	24:43	2	get_avg_color
arg	24:31	24:38	3	s->refs
water	24:31	0:0	4	s
op	24:32	0:0	4	->
water	24:34	0:0	4	refs
arg	24:40	24:43	3	box
water	24:40	0:0	4	box
water	24:44	0:0	2	;
water	25:4	0:0	2	box
op	25:7	0:0	2	->
water	25:9	0:0	2	variance
op	25:18	0:0	2	=
op	25:20	0:0	2	-
water	25:21	0:0	2	1
water	25:22	0:0	2	;
water	26:4	0:0	2	s
op	26:5	0:0	2	->
water	26:7	0:0	2	nb_boxes
op	26:16	0:0	2	=
water	26:18	0:0	2	1
water	26:19	0:0	2	;
while	27:4	74:4	2	(box && box -> len > 1)
cond	27:11	27:29	3	box && box -> len > 1
water	27:11	0:0	4	box
op	27:15	0:0	4	&&
water	27:18	0:0	4	box
op	27:21	0:0	4	->
water	27:23	0:0	4	len
op	27:27	0:0	4	>
water	27:29	0:0	4	1
stmts	27:32	74:4	3	
water	27:32	0:0	4	{
decl	28:8	28:34	4	int	i
water	28:13	0:0	4	,
decl	28:8	28:34	4	int	rr
water	28:17	0:0	4	,
decl	28:8	28:34	4	int	gr
water	28:21	0:0	4	,
decl	28:8	28:34	4	int	br
water	28:25	0:0	4	,
decl	28:8	28:34	4	int	longest
decl	29:8	29:39	4	uint64_t	median
water	29:23	0:0	4	,
decl	29:8	29:39	4	uint64_t	box_weight
op	29:36	0:0	4	=
water	29:38	0:0	4	0
decl	32:8	32:43	4	uint8_t	min[3]
op	32:23	0:0	4	=
water	32:25	0:0	4	{
water	32:26	0:0	4	0
water	32:27	0:0	4	xff
water	32:30	0:0	4	,
water	32:32	0:0	4	0
water	32:33	0:0	4	xff
water	32:36	0:0	4	,
water	32:38	0:0	4	0
water	32:39	0:0	4	xff
water	32:42	0:0	4	}
decl	33:8	33:43	4	uint8_t	max[3]
op	33:23	0:0	4	=
water	33:25	0:0	4	{
water	33:26	0:0	4	0
water	33:27	0:0	4	x00
water	33:30	0:0	4	,
water	33:32	0:0	4	0
water	33:33	0:0	4	x00
water	33:36	0:0	4	,
water	33:38	0:0	4	0
water	33:39	0:0	4	x00
water	33:42	0:0	4	}
for	34:8	42:8	4	(i = box -> start ;i < box -> start + box -> len;i ++)
forinit	34:13	34:27	5	i = box -> start ;
water	34:13	0:0	6	i
op	34:15	0:0	6	=
water	34:17	0:0	6	box
op	34:20	0:0	6	->
water	34:22	0:0	6	start
water	34:27	0:0	6	;
cond	34:29	34:51	5	i < box -> start + box -> len
water	34:29	0:0	6	i
op	34:31	0:0	6	<
water	34:33	0:0	6	box
op	34:36	0:0	6	->
water	34:38	0:0	6	start
op	34:44	0:0	6	+
water	34:46	0:0	6	box
op	34:49	0:0	6	->
water	34:51	0:0	6	len
forexpr	34:56	34:57	5	i ++
water	34:56	0:0	6	i
op	34:57	0:0	6	++
stmts	34:61	42:8	5	
water	34:61	0:0	6	{
decl	35:12	35:52	6	const struct color_ref	*ref
op	35:40	0:0	6	=
water	35:42	0:0	6	s
op	35:43	0:0	6	->
water	35:45	0:0	6	refs
op	35:49	0:0	6	[
water	35:50	0:0	6	i
op	35:51	0:0	6	]
decl	36:12	36:43	6	const uint32_t	rgb
op	36:31	0:0	6	=
water	36:33	0:0	6	ref
op	36:36	0:0	6	->
water	36:38	0:0	6	color
decl	37:12	37:83	6	const uint8_t	r
op	37:28	0:0	6	=
water	37:30	0:0	6	rgb
op	37:34	0:0	6	>>
water	37:37	0:0	6	16
op	37:40	0:0	6	&
water	37:42	0:0	6	0
water	37:43	0:0	6	xff
water	37:46	0:0	6	,
decl	37:12	37:83	6	const uint8_t	g
op	37:50	0:0	6	=
water	37:52	0:0	6	rgb
op	37:56	0:0	6	>>
water	37:59	0:0	6	8
op	37:61	0:0	6	&
water	37:63	0:0	6	0
water	37:64	0:0	6	xff
water	37:67	0:0	6	,
decl	37:12	37:83	6	const uint8_t	b
op	37:71	0:0	6	=
water	37:73	0:0	6	rgb
op	37:77	0:0	6	&
water	37:79	0:0	6	0
water	37:80	0:0	6	xff
water	38:12	0:0	6	min
op	38:15	0:0	6	[
water	38:16	0:0	6	0
op	38:17	0:0	6	]
op	38:19	0:0	6	=
call	38:21	38:36	6	FFMIN
arg	38:27	38:28	7	r
water	38:27	0:0	8	r
arg	38:30	38:36	7	min[0]
water	38:30	0:0	8	min
op	38:33	0:0	8	[
water	38:34	0:0	8	0
op	38:35	0:0	8	]
water	38:37	0:0	6	,
water	38:39	0:0	6	max
op	38:42	0:0	6	[
water	38:43	0:0	6	0
op	38:44	0:0	6	]
op	38:46	0:0	6	=
call	38:48	38:63	6	FFMAX
arg	38:54	38:55	7	r
water	38:54	0:0	8	r
arg	38:57	38:63	7	max[0]
water	38:57	0:0	8	max
op	38:60	0:0	8	[
water	38:61	0:0	8	0
op	38:62	0:0	8	]
water	38:64	0:0	6	;
water	39:12	0:0	6	min
op	39:15	0:0	6	[
water	39:16	0:0	6	1
op	39:17	0:0	6	]
op	39:19	0:0	6	=
call	39:21	39:36	6	FFMIN
arg	39:27	39:28	7	g
water	39:27	0:0	8	g
arg	39:30	39:36	7	min[1]
water	39:30	0:0	8	min
op	39:33	0:0	8	[
water	39:34	0:0	8	1
op	39:35	0:0	8	]
water	39:37	0:0	6	,
water	39:39	0:0	6	max
op	39:42	0:0	6	[
water	39:43	0:0	6	1
op	39:44	0:0	6	]
op	39:46	0:0	6	=
call	39:48	39:63	6	FFMAX
arg	39:54	39:55	7	g
water	39:54	0:0	8	g
arg	39:57	39:63	7	max[1]
water	39:57	0:0	8	max
op	39:60	0:0	8	[
water	39:61	0:0	8	1
op	39:62	0:0	8	]
water	39:64	0:0	6	;
water	40:12	0:0	6	min
op	40:15	0:0	6	[
water	40:16	0:0	6	2
op	40:17	0:0	6	]
op	40:19	0:0	6	=
call	40:21	40:36	6	FFMIN
arg	40:27	40:28	7	b
water	40:27	0:0	8	b
arg	40:30	40:36	7	min[2]
water	40:30	0:0	8	min
op	40:33	0:0	8	[
water	40:34	0:0	8	2
op	40:35	0:0	8	]
water	40:37	0:0	6	,
water	40:39	0:0	6	max
op	40:42	0:0	6	[
water	40:43	0:0	6	2
op	40:44	0:0	6	]
op	40:46	0:0	6	=
call	40:48	40:63	6	FFMAX
arg	40:54	40:55	7	b
water	40:54	0:0	8	b
arg	40:57	40:63	7	max[2]
water	40:57	0:0	8	max
op	40:60	0:0	8	[
water	40:61	0:0	8	2
op	40:62	0:0	8	]
water	40:64	0:0	6	;
water	41:12	0:0	6	box_weight
op	41:23	0:0	6	+=
water	41:26	0:0	6	ref
op	41:29	0:0	6	->
water	41:31	0:0	6	count
water	41:36	0:0	6	;
water	42:8	0:0	6	}
water	44:8	0:0	4	rr
op	44:11	0:0	4	=
water	44:13	0:0	4	max
op	44:16	0:0	4	[
water	44:17	0:0	4	0
op	44:18	0:0	4	]
op	44:20	0:0	4	-
water	44:22	0:0	4	min
op	44:25	0:0	4	[
water	44:26	0:0	4	0
op	44:27	0:0	4	]
water	44:28	0:0	4	;
water	45:8	0:0	4	gr
op	45:11	0:0	4	=
water	45:13	0:0	4	max
op	45:16	0:0	4	[
water	45:17	0:0	4	1
op	45:18	0:0	4	]
op	45:20	0:0	4	-
water	45:22	0:0	4	min
op	45:25	0:0	4	[
water	45:26	0:0	4	1
op	45:27	0:0	4	]
water	45:28	0:0	4	;
water	46:8	0:0	4	br
op	46:11	0:0	4	=
water	46:13	0:0	4	max
op	46:16	0:0	4	[
water	46:17	0:0	4	2
op	46:18	0:0	4	]
op	46:20	0:0	4	-
water	46:22	0:0	4	min
op	46:25	0:0	4	[
water	46:26	0:0	4	2
op	46:27	0:0	4	]
water	46:28	0:0	4	;
water	47:8	0:0	4	longest
op	47:16	0:0	4	=
water	47:18	0:0	4	1
water	47:19	0:0	4	;
if	48:8	48:45	4	(br >= rr && br >= gr)
cond	48:12	48:30	5	br >= rr && br >= gr
water	48:12	0:0	6	br
op	48:15	0:0	6	>=
water	48:18	0:0	6	rr
op	48:21	0:0	6	&&
water	48:24	0:0	6	br
op	48:27	0:0	6	>=
water	48:30	0:0	6	gr
stmts	48:34	48:45	5	
water	48:34	0:0	6	longest
op	48:42	0:0	6	=
water	48:44	0:0	6	2
water	48:45	0:0	6	;
if	49:8	49:45	4	(rr >= gr && rr >= br)
cond	49:12	49:30	5	rr >= gr && rr >= br
water	49:12	0:0	6	rr
op	49:15	0:0	6	>=
water	49:18	0:0	6	gr
op	49:21	0:0	6	&&
water	49:24	0:0	6	rr
op	49:27	0:0	6	>=
water	49:30	0:0	6	br
stmts	49:34	49:45	5	
water	49:34	0:0	6	longest
op	49:42	0:0	6	=
water	49:44	0:0	6	0
water	49:45	0:0	6	;
if	50:8	50:45	4	(gr >= rr && gr >= br)
cond	50:12	50:30	5	gr >= rr && gr >= br
water	50:12	0:0	6	gr
op	50:15	0:0	6	>=
water	50:18	0:0	6	rr
op	50:21	0:0	6	&&
water	50:24	0:0	6	gr
op	50:27	0:0	6	>=
water	50:30	0:0	6	br
stmts	50:34	50:45	5	
water	50:34	0:0	6	longest
op	50:42	0:0	6	=
water	50:44	0:0	6	1
water	50:45	0:0	6	;
call	51:8	53:79	4	ff_dlog
arg	51:16	51:19	5	ctx
water	51:16	0:0	6	ctx
arg	51:21	51:117	5	"box #%02X [%6d..%-6d] (%6d) w:%-6"PRIu64" ranges:[%2x %2x %2x] sort by %c (already sorted:%c) "
water	51:21	0:0	6	"box #%02X [%6d..%-6d] (%6d) w:%-6"
water	51:56	0:0	6	PRIu64
water	51:62	0:0	6	" ranges:[%2x %2x %2x] sort by %c (already sorted:%c) "
arg	52:16	52:22	5	box_id
water	52:16	0:0	6	box_id
arg	52:24	52:34	5	box->start
water	52:24	0:0	6	box
op	52:27	0:0	6	->
water	52:29	0:0	6	start
arg	52:36	52:61	5	box->start+box->len-1
water	52:36	0:0	6	box
op	52:39	0:0	6	->
water	52:41	0:0	6	start
op	52:47	0:0	6	+
water	52:49	0:0	6	box
op	52:52	0:0	6	->
water	52:54	0:0	6	len
op	52:58	0:0	6	-
water	52:60	0:0	6	1
arg	52:63	52:71	5	box->len
water	52:63	0:0	6	box
op	52:66	0:0	6	->
water	52:68	0:0	6	len
arg	52:73	52:83	5	box_weight
water	52:73	0:0	6	box_weight
arg	53:16	53:18	5	rr
water	53:16	0:0	6	rr
arg	53:20	53:22	5	gr
water	53:20	0:0	6	gr
arg	53:24	53:26	5	br
water	53:24	0:0	6	br
arg	53:28	53:42	5	"rgb"[longest]
water	53:28	0:0	6	"rgb"
op	53:33	0:0	6	[
water	53:34	0:0	6	longest
op	53:41	0:0	6	]
arg	53:44	53:79	5	box->sorted_by==longest?'y':'n'
water	53:44	0:0	6	box
op	53:47	0:0	6	->
water	53:49	0:0	6	sorted_by
op	53:59	0:0	6	==
water	53:62	0:0	6	longest
water	53:70	0:0	6	?
water	53:72	0:0	6	'y'
water	53:75	0:0	6	:
water	53:76	0:0	6	'n'
water	53:80	0:0	4	;
if	55:8	59:8	4	(box -> sorted_by != longest)
cond	55:12	55:30	5	box -> sorted_by != longest
water	55:12	0:0	6	box
op	55:15	0:0	6	->
water	55:17	0:0	6	sorted_by
op	55:27	0:0	6	!=
water	55:30	0:0	6	longest
stmts	55:39	59:8	5	
water	55:39	0:0	6	{
decl	56:12	56:46	6	cmp_func	cmpf
op	56:26	0:0	6	=
water	56:28	0:0	6	cmp_funcs
op	56:37	0:0	6	[
water	56:38	0:0	6	longest
op	56:45	0:0	6	]
call	57:12	57:83	6	AV_QSORT
arg	57:21	57:41	7	&s->refs[box->start]
op	57:21	0:0	8	&
water	57:22	0:0	8	s
op	57:23	0:0	8	->
water	57:25	0:0	8	refs
op	57:29	0:0	8	[
water	57:30	0:0	8	box
op	57:33	0:0	8	->
water	57:35	0:0	8	start
op	57:40	0:0	8	]
arg	57:43	57:51	7	box->len
water	57:43	0:0	8	box
op	57:46	0:0	8	->
water	57:48	0:0	8	len
arg	57:53	57:77	7	conststructcolor_ref*
water	57:53	0:0	8	const
water	57:59	0:0	8	struct
water	57:66	0:0	8	color_ref
op	57:76	0:0	8	*
arg	57:79	57:83	7	cmpf
water	57:79	0:0	8	cmpf
water	57:84	0:0	6	;
water	58:12	0:0	6	box
op	58:15	0:0	6	->
water	58:17	0:0	6	sorted_by
op	58:27	0:0	6	=
water	58:29	0:0	6	longest
water	58:36	0:0	6	;
water	59:8	0:0	6	}
water	61:8	0:0	4	median
op	61:15	0:0	4	=
water	61:17	0:0	4	(
water	61:18	0:0	4	box_weight
op	61:29	0:0	4	+
water	61:31	0:0	4	1
water	61:32	0:0	4	)
op	61:34	0:0	4	>>
water	61:37	0:0	4	1
water	61:38	0:0	4	;
water	62:8	0:0	4	box_weight
op	62:19	0:0	4	=
water	62:21	0:0	4	0
water	62:22	0:0	4	;
for	65:8	69:8	4	(i = box -> start ;i < box -> start + box -> len - 2;i ++)
forinit	65:13	65:27	5	i = box -> start ;
water	65:13	0:0	6	i
op	65:15	0:0	6	=
water	65:17	0:0	6	box
op	65:20	0:0	6	->
water	65:22	0:0	6	start
water	65:27	0:0	6	;
cond	65:29	65:57	5	i < box -> start + box -> len - 2
water	65:29	0:0	6	i
op	65:31	0:0	6	<
water	65:33	0:0	6	box
op	65:36	0:0	6	->
water	65:38	0:0	6	start
op	65:44	0:0	6	+
water	65:46	0:0	6	box
op	65:49	0:0	6	->
water	65:51	0:0	6	len
op	65:55	0:0	6	-
water	65:57	0:0	6	2
forexpr	65:60	65:61	5	i ++
water	65:60	0:0	6	i
op	65:61	0:0	6	++
stmts	65:65	69:8	5	
water	65:65	0:0	6	{
water	66:12	0:0	6	box_weight
op	66:23	0:0	6	+=
water	66:26	0:0	6	s
op	66:27	0:0	6	->
water	66:29	0:0	6	refs
op	66:33	0:0	6	[
water	66:34	0:0	6	i
op	66:35	0:0	6	]
op	66:36	0:0	6	->
water	66:38	0:0	6	count
water	66:43	0:0	6	;
if	67:12	68:21	6	(box_weight > median)
cond	67:16	67:29	7	box_weight > median
water	67:16	0:0	8	box_weight
op	67:27	0:0	8	>
water	67:29	0:0	8	median
stmts	68:16	68:21	7	
break	68:16	68:21	8	
water	69:8	0:0	6	}
call	70:8	70:101	4	ff_dlog
arg	70:16	70:19	5	ctx
water	70:16	0:0	6	ctx
arg	70:21	70:78	5	"split @ i=%-6d with w=%-6"PRIu64" (target=%6"PRIu64")\n"
water	70:21	0:0	6	"split @ i=%-6d with w=%-6"
water	70:48	0:0	6	PRIu64
water	70:54	0:0	6	" (target=%6"
water	70:67	0:0	6	PRIu64
water	70:73	0:0	6	")\n"
arg	70:80	70:81	5	i
water	70:80	0:0	6	i
arg	70:83	70:93	5	box_weight
water	70:83	0:0	6	box_weight
arg	70:95	70:101	5	median
water	70:95	0:0	6	median
water	70:102	0:0	4	;
call	71:8	71:27	4	split_box
arg	71:18	71:19	5	s
water	71:18	0:0	6	s
arg	71:21	71:24	5	box
water	71:21	0:0	6	box
arg	71:26	71:27	5	i
water	71:26	0:0	6	i
water	71:28	0:0	4	;
water	72:8	0:0	4	box_id
op	72:15	0:0	4	=
call	72:17	72:43	4	get_next_box_id_to_split
arg	72:42	72:43	5	s
water	72:42	0:0	6	s
water	72:44	0:0	4	;
water	73:8	0:0	4	box
op	73:12	0:0	4	=
water	73:14	0:0	4	box_id
op	73:21	0:0	4	>=
water	73:24	0:0	4	0
water	73:26	0:0	4	?
op	73:28	0:0	4	&
water	73:29	0:0	4	s
op	73:30	0:0	4	->
water	73:32	0:0	4	boxes
op	73:37	0:0	4	[
water	73:38	0:0	4	box_id
op	73:44	0:0	4	]
water	73:46	0:0	4	:
water	73:48	0:0	4	NULL
water	73:52	0:0	4	;
water	74:4	0:0	4	}
water	75:4	0:0	2	ratio
op	75:10	0:0	2	=
call	75:12	75:66	2	set_colorquant_ratio_meta
arg	75:38	75:41	3	out
water	75:38	0:0	4	out
arg	75:43	75:54	3	s->nb_boxes
water	75:43	0:0	4	s
op	75:44	0:0	4	->
water	75:46	0:0	4	nb_boxes
arg	75:56	75:66	3	s->nb_refs
water	75:56	0:0	4	s
op	75:57	0:0	4	->
water	75:59	0:0	4	nb_refs
water	75:67	0:0	2	;
call	76:4	77:79	2	av_log
arg	76:11	76:14	3	ctx
water	76:11	0:0	4	ctx
arg	76:16	76:27	3	AV_LOG_INFO
water	76:16	0:0	4	AV_LOG_INFO
arg	76:29	76:81	3	"%d%s colors generated out of %d colors; ratio=%f\n"
water	76:29	0:0	4	"%d%s colors generated out of %d colors; ratio=%f\n"
arg	77:11	77:22	3	s->nb_boxes
water	77:11	0:0	4	s
op	77:12	0:0	4	->
water	77:14	0:0	4	nb_boxes
arg	77:24	77:60	3	s->reserve_transparent?"(+1)":""
water	77:24	0:0	4	s
op	77:25	0:0	4	->
water	77:27	0:0	4	reserve_transparent
water	77:47	0:0	4	?
water	77:49	0:0	4	"(+1)"
water	77:56	0:0	4	:
water	77:58	0:0	4	""
arg	77:62	77:72	3	s->nb_refs
water	77:62	0:0	4	s
op	77:63	0:0	4	->
water	77:65	0:0	4	nb_refs
arg	77:74	77:79	3	ratio
water	77:74	0:0	4	ratio
water	77:80	0:0	2	;
call	78:4	78:61	2	qsort
arg	78:10	78:18	3	s->boxes
water	78:10	0:0	4	s
op	78:11	0:0	4	->
water	78:13	0:0	4	boxes
arg	78:20	78:31	3	s->nb_boxes
water	78:20	0:0	4	s
op	78:21	0:0	4	->
water	78:23	0:0	4	nb_boxes
arg	78:33	78:50	3	sizeof(*s->boxes)
op	78:33	0:0	4	sizeof
water	78:39	0:0	4	(
op	78:40	0:0	4	*
water	78:41	0:0	4	s
op	78:42	0:0	4	->
water	78:44	0:0	4	boxes
water	78:49	0:0	4	)
arg	78:52	78:61	3	cmp_color
water	78:52	0:0	4	cmp_color
water	78:62	0:0	2	;
call	79:4	79:26	2	write_palette
arg	79:18	79:21	3	ctx
water	79:18	0:0	4	ctx
arg	79:23	79:26	3	out
water	79:23	0:0	4	out
water	79:27	0:0	2	;
return	80:4	80:14	2	out
water	80:11	0:0	3	out
