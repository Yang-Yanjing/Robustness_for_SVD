func	1:0	143:0	0	static int	mxf_read_partition_pack
params	1:34	0:0	1	
param	1:35	1:44	2	void *	arg
param	1:46	1:61	2	AVIOContext *	pb
param	1:63	1:70	2	int	tag
param	1:72	1:80	2	int	size
param	1:82	1:89	2	UID	uid
param	1:91	1:109	2	int64_t	klv_offset
stmnts	0:0	142:12	1	
decl	3:4	3:25	2	MXFContext	*mxf
op	3:20	0:0	2	=
water	3:22	0:0	2	arg
decl	4:4	4:38	2	MXFPartition	*partition
water	4:27	0:0	2	,
decl	4:4	4:38	2	MXFPartition	*tmp_part
decl	5:4	5:10	2	UID	op
decl	6:4	6:29	2	uint64_t	footer_partition
decl	7:4	7:34	2	uint32_t	nb_essence_containers
water	8:4	0:0	2	tmp_part
op	8:13	0:0	2	=
call	8:15	8:100	2	av_realloc_array
arg	8:32	8:47	3	mxf->partitions
water	8:32	0:0	4	mxf
op	8:35	0:0	4	->
water	8:37	0:0	4	partitions
arg	8:49	8:74	3	mxf->partitions_count+1
water	8:49	0:0	4	mxf
op	8:52	0:0	4	->
water	8:54	0:0	4	partitions_count
op	8:71	0:0	4	+
water	8:73	0:0	4	1
arg	8:76	8:100	3	sizeof(*mxf->partitions)
op	8:76	0:0	4	sizeof
water	8:82	0:0	4	(
op	8:83	0:0	4	*
water	8:84	0:0	4	mxf
op	8:87	0:0	4	->
water	8:89	0:0	4	partitions
water	8:99	0:0	4	)
water	8:101	0:0	2	;
if	9:4	10:30	2	(! tmp_part)
cond	9:8	9:9	3	! tmp_part
op	9:8	0:0	4	!
water	9:9	0:0	4	tmp_part
stmts	10:8	10:30	3	
return	10:8	10:30	4	AVERROR(ENOMEM)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	ENOMEM
water	10:23	0:0	7	ENOMEM
water	11:4	0:0	2	mxf
op	11:7	0:0	2	->
water	11:9	0:0	2	partitions
op	11:20	0:0	2	=
water	11:22	0:0	2	tmp_part
water	11:30	0:0	2	;
if	12:4	19:4	2	(mxf -> parsing_backward)
cond	12:8	12:13	3	mxf -> parsing_backward
water	12:8	0:0	4	mxf
op	12:11	0:0	4	->
water	12:13	0:0	4	parsing_backward
stmts	12:31	19:4	3	
water	12:31	0:0	4	{
call	15:8	17:94	4	memmove
arg	15:16	15:63	5	&mxf->partitions[mxf->last_forward_partition+1]
op	15:16	0:0	6	&
water	15:17	0:0	6	mxf
op	15:20	0:0	6	->
water	15:22	0:0	6	partitions
op	15:32	0:0	6	[
water	15:33	0:0	6	mxf
op	15:36	0:0	6	->
water	15:38	0:0	6	last_forward_partition
op	15:60	0:0	6	+
water	15:61	0:0	6	1
op	15:62	0:0	6	]
arg	16:16	16:61	5	&mxf->partitions[mxf->last_forward_partition]
op	16:16	0:0	6	&
water	16:17	0:0	6	mxf
op	16:20	0:0	6	->
water	16:22	0:0	6	partitions
op	16:32	0:0	6	[
water	16:33	0:0	6	mxf
op	16:36	0:0	6	->
water	16:38	0:0	6	last_forward_partition
op	16:60	0:0	6	]
arg	17:16	17:94	5	(mxf->partitions_count-mxf->last_forward_partition)*sizeof(*mxf->partitions)
water	17:16	0:0	6	(
water	17:17	0:0	6	mxf
op	17:20	0:0	6	->
water	17:22	0:0	6	partitions_count
op	17:39	0:0	6	-
water	17:41	0:0	6	mxf
op	17:44	0:0	6	->
water	17:46	0:0	6	last_forward_partition
water	17:68	0:0	6	)
op	17:69	0:0	6	*
op	17:70	0:0	6	sizeof
water	17:76	0:0	6	(
op	17:77	0:0	6	*
water	17:78	0:0	6	mxf
op	17:81	0:0	6	->
water	17:83	0:0	6	partitions
water	17:93	0:0	6	)
water	17:95	0:0	4	;
water	18:8	0:0	4	partition
op	18:18	0:0	4	=
water	18:20	0:0	4	mxf
op	18:23	0:0	4	->
water	18:25	0:0	4	current_partition
op	18:43	0:0	4	=
op	18:45	0:0	4	&
water	18:46	0:0	4	mxf
op	18:49	0:0	4	->
water	18:51	0:0	4	partitions
op	18:61	0:0	4	[
water	18:62	0:0	4	mxf
op	18:65	0:0	4	->
water	18:67	0:0	4	last_forward_partition
op	18:89	0:0	4	]
water	18:90	0:0	4	;
water	19:4	0:0	4	}
else	19:6	22:4	2
stmts	19:11	22:4	3	
water	19:11	0:0	4	{
water	20:8	0:0	4	mxf
op	20:11	0:0	4	->
water	20:13	0:0	4	last_forward_partition
op	20:35	0:0	4	++
water	20:37	0:0	4	;
water	21:8	0:0	4	partition
op	21:18	0:0	4	=
water	21:20	0:0	4	mxf
op	21:23	0:0	4	->
water	21:25	0:0	4	current_partition
op	21:43	0:0	4	=
op	21:45	0:0	4	&
water	21:46	0:0	4	mxf
op	21:49	0:0	4	->
water	21:51	0:0	4	partitions
op	21:61	0:0	4	[
water	21:62	0:0	4	mxf
op	21:65	0:0	4	->
water	21:67	0:0	4	partitions_count
op	21:83	0:0	4	]
water	21:84	0:0	4	;
water	22:4	0:0	4	}
call	23:4	23:43	2	memset
arg	23:11	23:20	3	partition
water	23:11	0:0	4	partition
arg	23:22	23:23	3	0
water	23:22	0:0	4	0
arg	23:25	23:43	3	sizeof(*partition)
op	23:25	0:0	4	sizeof
water	23:31	0:0	4	(
op	23:32	0:0	4	*
water	23:33	0:0	4	partition
water	23:42	0:0	4	)
water	23:44	0:0	2	;
water	24:4	0:0	2	mxf
op	24:7	0:0	2	->
water	24:9	0:0	2	partitions_count
op	24:25	0:0	2	++
water	24:27	0:0	2	;
water	25:4	0:0	2	partition
op	25:13	0:0	2	->
water	25:15	0:0	2	pack_length
op	25:27	0:0	2	=
call	25:29	25:41	2	avio_tell
arg	25:39	25:41	3	pb
water	25:39	0:0	4	pb
op	25:43	0:0	2	-
water	25:45	0:0	2	klv_offset
op	25:56	0:0	2	+
water	25:58	0:0	2	size
water	25:62	0:0	2	;
water	26:4	0:0	2	partition
op	26:13	0:0	2	->
water	26:15	0:0	2	pack_ofs
op	26:27	0:0	2	=
water	26:29	0:0	2	klv_offset
water	26:39	0:0	2	;
switch	27:4	40:4	2	(uid [ 13 ])
cond	27:11	27:17	3	uid [ 13 ]
water	27:11	0:0	4	uid
op	27:14	0:0	4	[
water	27:15	0:0	4	13
op	27:17	0:0	4	]
stmts	27:20	40:4	3	
water	27:20	0:0	4	{
label	28:4	28:10	4	case 2 :
water	29:8	0:0	4	partition
op	29:17	0:0	4	->
water	29:19	0:0	4	type
op	29:24	0:0	4	=
water	29:26	0:0	4	Header
water	29:32	0:0	4	;
break	30:8	30:13	4	
label	31:4	31:10	4	case 3 :
water	32:8	0:0	4	partition
op	32:17	0:0	4	->
water	32:19	0:0	4	type
op	32:24	0:0	4	=
water	32:26	0:0	4	BodyPartition
water	32:39	0:0	4	;
break	33:8	33:13	4	
label	34:4	34:10	4	case 4 :
water	35:8	0:0	4	partition
op	35:17	0:0	4	->
water	35:19	0:0	4	type
op	35:24	0:0	4	=
water	35:26	0:0	4	Footer
water	35:32	0:0	4	;
break	36:8	36:13	4	
label	37:4	37:11	4	default :
call	38:8	38:76	4	av_log
arg	38:15	38:22	5	mxf->fc
water	38:15	0:0	6	mxf
op	38:18	0:0	6	->
water	38:20	0:0	6	fc
arg	38:24	38:36	5	AV_LOG_ERROR
water	38:24	0:0	6	AV_LOG_ERROR
arg	38:38	38:67	5	"unknown partition type %i\n"
water	38:38	0:0	6	"unknown partition type %i\n"
arg	38:69	38:76	5	uid[13]
water	38:69	0:0	6	uid
op	38:72	0:0	6	[
water	38:73	0:0	6	13
op	38:75	0:0	6	]
water	38:77	0:0	4	;
return	39:8	39:34	4	AVERROR_INVALIDDATA
water	39:15	0:0	5	AVERROR_INVALIDDATA
water	40:4	0:0	4	}
water	42:4	0:0	2	partition
op	42:13	0:0	2	->
water	42:15	0:0	2	closed
op	42:22	0:0	2	=
water	42:24	0:0	2	partition
op	42:33	0:0	2	->
water	42:35	0:0	2	type
op	42:40	0:0	2	==
water	42:43	0:0	2	Footer
op	42:50	0:0	2	||
op	42:53	0:0	2	!
water	42:54	0:0	2	(
water	42:55	0:0	2	uid
op	42:58	0:0	2	[
water	42:59	0:0	2	14
op	42:61	0:0	2	]
op	42:63	0:0	2	&
water	42:65	0:0	2	1
water	42:66	0:0	2	)
water	42:67	0:0	2	;
water	43:4	0:0	2	partition
op	43:13	0:0	2	->
water	43:15	0:0	2	complete
op	43:24	0:0	2	=
water	43:26	0:0	2	uid
op	43:29	0:0	2	[
water	43:30	0:0	2	14
op	43:32	0:0	2	]
op	43:34	0:0	2	>
water	43:36	0:0	2	2
water	43:37	0:0	2	;
call	44:4	44:19	2	avio_skip
arg	44:14	44:16	3	pb
water	44:14	0:0	4	pb
arg	44:18	44:19	3	4
water	44:18	0:0	4	4
water	44:20	0:0	2	;
water	45:4	0:0	2	partition
op	45:13	0:0	2	->
water	45:15	0:0	2	kag_size
op	45:24	0:0	2	=
call	45:26	45:38	2	avio_rb32
arg	45:36	45:38	3	pb
water	45:36	0:0	4	pb
water	45:39	0:0	2	;
water	46:4	0:0	2	partition
op	46:13	0:0	2	->
water	46:15	0:0	2	this_partition
op	46:30	0:0	2	=
call	46:32	46:44	2	avio_rb64
arg	46:42	46:44	3	pb
water	46:42	0:0	4	pb
water	46:45	0:0	2	;
water	47:4	0:0	2	partition
op	47:13	0:0	2	->
water	47:15	0:0	2	previous_partition
op	47:34	0:0	2	=
call	47:36	47:48	2	avio_rb64
arg	47:46	47:48	3	pb
water	47:46	0:0	4	pb
water	47:49	0:0	2	;
water	48:4	0:0	2	footer_partition
op	48:21	0:0	2	=
call	48:23	48:35	2	avio_rb64
arg	48:33	48:35	3	pb
water	48:33	0:0	4	pb
water	48:36	0:0	2	;
water	49:4	0:0	2	partition
op	49:13	0:0	2	->
water	49:15	0:0	2	header_byte_count
op	49:33	0:0	2	=
call	49:35	49:47	2	avio_rb64
arg	49:45	49:47	3	pb
water	49:45	0:0	4	pb
water	49:48	0:0	2	;
water	50:4	0:0	2	partition
op	50:13	0:0	2	->
water	50:15	0:0	2	index_byte_count
op	50:32	0:0	2	=
call	50:34	50:46	2	avio_rb64
arg	50:44	50:46	3	pb
water	50:44	0:0	4	pb
water	50:47	0:0	2	;
water	51:4	0:0	2	partition
op	51:13	0:0	2	->
water	51:15	0:0	2	index_sid
op	51:25	0:0	2	=
call	51:27	51:39	2	avio_rb32
arg	51:37	51:39	3	pb
water	51:37	0:0	4	pb
water	51:40	0:0	2	;
call	52:4	52:19	2	avio_skip
arg	52:14	52:16	3	pb
water	52:14	0:0	4	pb
arg	52:18	52:19	3	8
water	52:18	0:0	4	8
water	52:20	0:0	2	;
water	53:4	0:0	2	partition
op	53:13	0:0	2	->
water	53:15	0:0	2	body_sid
op	53:24	0:0	2	=
call	53:26	53:38	2	avio_rb32
arg	53:36	53:38	3	pb
water	53:36	0:0	4	pb
water	53:39	0:0	2	;
if	54:4	57:4	2	(avio_read (pb ,op ,sizeof ( UID ) ) != sizeof ( UID ))
cond	54:8	54:52	3	avio_read (pb ,op ,sizeof ( UID ) ) != sizeof ( UID )
call	54:8	54:37	4	avio_read
arg	54:18	54:20	5	pb
water	54:18	0:0	6	pb
arg	54:22	54:24	5	op
water	54:22	0:0	6	op
arg	54:26	54:37	5	sizeof(UID)
op	54:26	0:0	6	sizeof
water	54:32	0:0	6	(
water	54:33	0:0	6	UID
water	54:36	0:0	6	)
op	54:39	0:0	4	!=
op	54:42	0:0	4	sizeof
water	54:48	0:0	4	(
water	54:49	0:0	4	UID
water	54:52	0:0	4	)
stmts	54:55	57:4	3	
water	54:55	0:0	4	{
call	55:8	55:60	4	av_log
arg	55:15	55:22	5	mxf->fc
water	55:15	0:0	6	mxf
op	55:18	0:0	6	->
water	55:20	0:0	6	fc
arg	55:24	55:36	5	AV_LOG_ERROR
water	55:24	0:0	6	AV_LOG_ERROR
arg	55:38	55:60	5	"Failed reading UID\n"
water	55:38	0:0	6	"Failed reading UID\n"
water	55:61	0:0	4	;
return	56:8	56:34	4	AVERROR_INVALIDDATA
water	56:15	0:0	5	AVERROR_INVALIDDATA
water	57:4	0:0	4	}
water	58:4	0:0	2	nb_essence_containers
op	58:26	0:0	2	=
call	58:28	58:40	2	avio_rb32
arg	58:38	58:40	3	pb
water	58:38	0:0	4	pb
water	58:41	0:0	2	;
if	59:4	77:4	2	(partition -> this_partition && partition -> previous_partition == partition -> this_partition)
cond	59:8	60:52	3	partition -> this_partition && partition -> previous_partition == partition -> this_partition
water	59:8	0:0	4	partition
op	59:17	0:0	4	->
water	59:19	0:0	4	this_partition
op	59:34	0:0	4	&&
water	60:8	0:0	4	partition
op	60:17	0:0	4	->
water	60:19	0:0	4	previous_partition
op	60:38	0:0	4	==
water	60:41	0:0	4	partition
op	60:50	0:0	4	->
water	60:52	0:0	4	this_partition
stmts	60:68	77:4	3	
water	60:68	0:0	4	{
call	61:8	63:44	4	av_log
arg	61:15	61:22	5	mxf->fc
water	61:15	0:0	6	mxf
op	61:18	0:0	6	->
water	61:20	0:0	6	fc
arg	61:24	61:36	5	AV_LOG_ERROR
water	61:24	0:0	6	AV_LOG_ERROR
arg	62:15	62:69	5	"PreviousPartition equal to ThisPartition %"PRIx64"\n"
water	62:15	0:0	6	"PreviousPartition equal to ThisPartition %"
water	62:59	0:0	6	PRIx64
water	62:65	0:0	6	"\n"
arg	63:15	63:44	5	partition->previous_partition
water	63:15	0:0	6	partition
op	63:24	0:0	6	->
water	63:26	0:0	6	previous_partition
water	63:45	0:0	4	;
if	65:8	69:8	4	(! mxf -> parsing_backward && mxf -> last_forward_partition > 1)
cond	65:12	65:68	5	! mxf -> parsing_backward && mxf -> last_forward_partition > 1
op	65:12	0:0	6	!
water	65:13	0:0	6	mxf
op	65:16	0:0	6	->
water	65:18	0:0	6	parsing_backward
op	65:35	0:0	6	&&
water	65:38	0:0	6	mxf
op	65:41	0:0	6	->
water	65:43	0:0	6	last_forward_partition
op	65:66	0:0	6	>
water	65:68	0:0	6	1
stmts	65:71	69:8	5	
water	65:71	0:0	6	{
decl	66:12	67:65	6	MXFPartition	*prev
op	66:31	0:0	6	=
water	67:16	0:0	6	mxf
op	67:19	0:0	6	->
water	67:21	0:0	6	partitions
op	67:32	0:0	6	+
water	67:34	0:0	6	mxf
op	67:37	0:0	6	->
water	67:39	0:0	6	last_forward_partition
op	67:62	0:0	6	-
water	67:64	0:0	6	2
water	68:12	0:0	6	partition
op	68:21	0:0	6	->
water	68:23	0:0	6	previous_partition
op	68:42	0:0	6	=
water	68:44	0:0	6	prev
op	68:48	0:0	6	->
water	68:50	0:0	6	this_partition
water	68:64	0:0	6	;
water	69:8	0:0	6	}
if	72:8	73:45	4	(partition -> previous_partition == partition -> this_partition)
cond	72:12	72:56	5	partition -> previous_partition == partition -> this_partition
water	72:12	0:0	6	partition
op	72:21	0:0	6	->
water	72:23	0:0	6	previous_partition
op	72:42	0:0	6	==
water	72:45	0:0	6	partition
op	72:54	0:0	6	->
water	72:56	0:0	6	this_partition
stmts	73:12	73:45	5	
water	73:12	0:0	6	partition
op	73:21	0:0	6	->
water	73:23	0:0	6	previous_partition
op	73:42	0:0	6	=
water	73:44	0:0	6	0
water	73:45	0:0	6	;
call	74:8	76:44	4	av_log
arg	74:15	74:22	5	mxf->fc
water	74:15	0:0	6	mxf
op	74:18	0:0	6	->
water	74:20	0:0	6	fc
arg	74:24	74:36	5	AV_LOG_ERROR
water	74:24	0:0	6	AV_LOG_ERROR
arg	75:15	75:62	5	"Overriding PreviousPartition with %"PRIx64"\n"
water	75:15	0:0	6	"Overriding PreviousPartition with %"
water	75:52	0:0	6	PRIx64
water	75:58	0:0	6	"\n"
arg	76:15	76:44	5	partition->previous_partition
water	76:15	0:0	6	partition
op	76:24	0:0	6	->
water	76:26	0:0	6	previous_partition
water	76:45	0:0	4	;
water	77:4	0:0	4	}
if	79:4	87:4	2	(footer_partition)
cond	79:8	79:8	3	footer_partition
water	79:8	0:0	4	footer_partition
stmts	79:26	87:4	3	
water	79:26	0:0	4	{
if	80:8	84:8	4	(mxf -> footer_partition && mxf -> footer_partition != footer_partition)
cond	80:12	80:62	5	mxf -> footer_partition && mxf -> footer_partition != footer_partition
water	80:12	0:0	6	mxf
op	80:15	0:0	6	->
water	80:17	0:0	6	footer_partition
op	80:34	0:0	6	&&
water	80:37	0:0	6	mxf
op	80:40	0:0	6	->
water	80:42	0:0	6	footer_partition
op	80:59	0:0	6	!=
water	80:62	0:0	6	footer_partition
stmts	80:80	84:8	5	
water	80:80	0:0	6	{
call	81:12	83:58	6	av_log
arg	81:19	81:26	7	mxf->fc
water	81:19	0:0	8	mxf
op	81:22	0:0	8	->
water	81:24	0:0	8	fc
arg	81:28	81:40	7	AV_LOG_ERROR
water	81:28	0:0	8	AV_LOG_ERROR
arg	82:19	82:81	7	"inconsistent FooterPartition value: %"PRIu64" != %"PRIu64"\n"
water	82:19	0:0	8	"inconsistent FooterPartition value: %"
water	82:58	0:0	8	PRIu64
water	82:64	0:0	8	" != %"
water	82:71	0:0	8	PRIu64
water	82:77	0:0	8	"\n"
arg	83:19	83:40	7	mxf->footer_partition
water	83:19	0:0	8	mxf
op	83:22	0:0	8	->
water	83:24	0:0	8	footer_partition
arg	83:42	83:58	7	footer_partition
water	83:42	0:0	8	footer_partition
water	83:59	0:0	6	;
water	84:8	0:0	6	}
else	84:10	86:8	4
stmts	84:15	86:8	5	
water	84:15	0:0	6	{
water	85:12	0:0	6	mxf
op	85:15	0:0	6	->
water	85:17	0:0	6	footer_partition
op	85:34	0:0	6	=
water	85:36	0:0	6	footer_partition
water	85:52	0:0	6	;
water	86:8	0:0	6	}
water	87:4	0:0	4	}
call	88:4	94:53	2	av_log
arg	88:11	88:18	3	mxf->fc
water	88:11	0:0	4	mxf
op	88:14	0:0	4	->
water	88:16	0:0	4	fc
arg	88:20	88:32	3	AV_LOG_TRACE
water	88:20	0:0	4	AV_LOG_TRACE
arg	89:12	91:74	3	"PartitionPack: ThisPartition = 0x%"PRIX64", PreviousPartition = 0x%"PRIX64", ""FooterPartition = 0x%"PRIX64", IndexSID = %i, BodySID = %i\n"
water	89:12	0:0	4	"PartitionPack: ThisPartition = 0x%"
water	89:48	0:0	4	PRIX64
water	90:12	0:0	4	", PreviousPartition = 0x%"
water	90:39	0:0	4	PRIX64
water	90:45	0:0	4	", "
water	91:12	0:0	4	"FooterPartition = 0x%"
water	91:35	0:0	4	PRIX64
water	91:41	0:0	4	", IndexSID = %i, BodySID = %i\n"
arg	92:12	92:37	3	partition->this_partition
water	92:12	0:0	4	partition
op	92:21	0:0	4	->
water	92:23	0:0	4	this_partition
arg	93:12	93:41	3	partition->previous_partition
water	93:12	0:0	4	partition
op	93:21	0:0	4	->
water	93:23	0:0	4	previous_partition
arg	93:43	93:59	3	footer_partition
water	93:43	0:0	4	footer_partition
arg	94:12	94:32	3	partition->index_sid
water	94:12	0:0	4	partition
op	94:21	0:0	4	->
water	94:23	0:0	4	index_sid
arg	94:34	94:53	3	partition->body_sid
water	94:34	0:0	4	partition
op	94:43	0:0	4	->
water	94:45	0:0	4	body_sid
water	94:54	0:0	2	;
if	97:4	102:4	2	(partition -> previous_partition && mxf -> run_in + partition -> previous_partition >= klv_offset)
cond	97:8	98:55	3	partition -> previous_partition && mxf -> run_in + partition -> previous_partition >= klv_offset
water	97:8	0:0	4	partition
op	97:17	0:0	4	->
water	97:19	0:0	4	previous_partition
op	97:38	0:0	4	&&
water	98:8	0:0	4	mxf
op	98:11	0:0	4	->
water	98:13	0:0	4	run_in
op	98:20	0:0	4	+
water	98:22	0:0	4	partition
op	98:31	0:0	4	->
water	98:33	0:0	4	previous_partition
op	98:52	0:0	4	>=
water	98:55	0:0	4	klv_offset
stmts	98:67	102:4	3	
water	98:67	0:0	4	{
call	99:8	100:72	4	av_log
arg	99:15	99:22	5	mxf->fc
water	99:15	0:0	6	mxf
op	99:18	0:0	6	->
water	99:20	0:0	6	fc
arg	99:24	99:36	5	AV_LOG_ERROR
water	99:24	0:0	6	AV_LOG_ERROR
arg	100:15	100:72	5	"PreviousPartition points to this partition or forward\n"
water	100:15	0:0	6	"PreviousPartition points to this partition or forward\n"
water	100:73	0:0	4	;
return	101:8	101:34	4	AVERROR_INVALIDDATA
water	101:15	0:0	5	AVERROR_INVALIDDATA
water	102:4	0:0	4	}
if	103:4	103:55	2	(op [ 12 ] == 1 && op [ 13 ] == 1)
cond	103:13	103:38	3	op [ 12 ] == 1 && op [ 13 ] == 1
water	103:13	0:0	4	op
op	103:15	0:0	4	[
water	103:16	0:0	4	12
op	103:18	0:0	4	]
op	103:20	0:0	4	==
water	103:23	0:0	4	1
op	103:25	0:0	4	&&
water	103:28	0:0	4	op
op	103:30	0:0	4	[
water	103:31	0:0	4	13
op	103:33	0:0	4	]
op	103:35	0:0	4	==
water	103:38	0:0	4	1
stmts	103:41	103:55	3	
water	103:41	0:0	4	mxf
op	103:44	0:0	4	->
water	103:46	0:0	4	op
op	103:49	0:0	4	=
water	103:51	0:0	4	OP1a
water	103:55	0:0	4	;
else	104:4	104:55	2
stmts	104:9	104:55	3	
if	104:9	104:55	4	(op [ 12 ] == 1 && op [ 13 ] == 2)
cond	104:13	104:38	5	op [ 12 ] == 1 && op [ 13 ] == 2
water	104:13	0:0	6	op
op	104:15	0:0	6	[
water	104:16	0:0	6	12
op	104:18	0:0	6	]
op	104:20	0:0	6	==
water	104:23	0:0	6	1
op	104:25	0:0	6	&&
water	104:28	0:0	6	op
op	104:30	0:0	6	[
water	104:31	0:0	6	13
op	104:33	0:0	6	]
op	104:35	0:0	6	==
water	104:38	0:0	6	2
stmts	104:41	104:55	5	
water	104:41	0:0	6	mxf
op	104:44	0:0	6	->
water	104:46	0:0	6	op
op	104:49	0:0	6	=
water	104:51	0:0	6	OP1b
water	104:55	0:0	6	;
else	105:4	105:55	2
stmts	105:9	105:55	3	
if	105:9	105:55	4	(op [ 12 ] == 1 && op [ 13 ] == 3)
cond	105:13	105:38	5	op [ 12 ] == 1 && op [ 13 ] == 3
water	105:13	0:0	6	op
op	105:15	0:0	6	[
water	105:16	0:0	6	12
op	105:18	0:0	6	]
op	105:20	0:0	6	==
water	105:23	0:0	6	1
op	105:25	0:0	6	&&
water	105:28	0:0	6	op
op	105:30	0:0	6	[
water	105:31	0:0	6	13
op	105:33	0:0	6	]
op	105:35	0:0	6	==
water	105:38	0:0	6	3
stmts	105:41	105:55	5	
water	105:41	0:0	6	mxf
op	105:44	0:0	6	->
water	105:46	0:0	6	op
op	105:49	0:0	6	=
water	105:51	0:0	6	OP1c
water	105:55	0:0	6	;
else	106:4	106:55	2
stmts	106:9	106:55	3	
if	106:9	106:55	4	(op [ 12 ] == 2 && op [ 13 ] == 1)
cond	106:13	106:38	5	op [ 12 ] == 2 && op [ 13 ] == 1
water	106:13	0:0	6	op
op	106:15	0:0	6	[
water	106:16	0:0	6	12
op	106:18	0:0	6	]
op	106:20	0:0	6	==
water	106:23	0:0	6	2
op	106:25	0:0	6	&&
water	106:28	0:0	6	op
op	106:30	0:0	6	[
water	106:31	0:0	6	13
op	106:33	0:0	6	]
op	106:35	0:0	6	==
water	106:38	0:0	6	1
stmts	106:41	106:55	5	
water	106:41	0:0	6	mxf
op	106:44	0:0	6	->
water	106:46	0:0	6	op
op	106:49	0:0	6	=
water	106:51	0:0	6	OP2a
water	106:55	0:0	6	;
else	107:4	107:55	2
stmts	107:9	107:55	3	
if	107:9	107:55	4	(op [ 12 ] == 2 && op [ 13 ] == 2)
cond	107:13	107:38	5	op [ 12 ] == 2 && op [ 13 ] == 2
water	107:13	0:0	6	op
op	107:15	0:0	6	[
water	107:16	0:0	6	12
op	107:18	0:0	6	]
op	107:20	0:0	6	==
water	107:23	0:0	6	2
op	107:25	0:0	6	&&
water	107:28	0:0	6	op
op	107:30	0:0	6	[
water	107:31	0:0	6	13
op	107:33	0:0	6	]
op	107:35	0:0	6	==
water	107:38	0:0	6	2
stmts	107:41	107:55	5	
water	107:41	0:0	6	mxf
op	107:44	0:0	6	->
water	107:46	0:0	6	op
op	107:49	0:0	6	=
water	107:51	0:0	6	OP2b
water	107:55	0:0	6	;
else	108:4	108:55	2
stmts	108:9	108:55	3	
if	108:9	108:55	4	(op [ 12 ] == 2 && op [ 13 ] == 3)
cond	108:13	108:38	5	op [ 12 ] == 2 && op [ 13 ] == 3
water	108:13	0:0	6	op
op	108:15	0:0	6	[
water	108:16	0:0	6	12
op	108:18	0:0	6	]
op	108:20	0:0	6	==
water	108:23	0:0	6	2
op	108:25	0:0	6	&&
water	108:28	0:0	6	op
op	108:30	0:0	6	[
water	108:31	0:0	6	13
op	108:33	0:0	6	]
op	108:35	0:0	6	==
water	108:38	0:0	6	3
stmts	108:41	108:55	5	
water	108:41	0:0	6	mxf
op	108:44	0:0	6	->
water	108:46	0:0	6	op
op	108:49	0:0	6	=
water	108:51	0:0	6	OP2c
water	108:55	0:0	6	;
else	109:4	109:55	2
stmts	109:9	109:55	3	
if	109:9	109:55	4	(op [ 12 ] == 3 && op [ 13 ] == 1)
cond	109:13	109:38	5	op [ 12 ] == 3 && op [ 13 ] == 1
water	109:13	0:0	6	op
op	109:15	0:0	6	[
water	109:16	0:0	6	12
op	109:18	0:0	6	]
op	109:20	0:0	6	==
water	109:23	0:0	6	3
op	109:25	0:0	6	&&
water	109:28	0:0	6	op
op	109:30	0:0	6	[
water	109:31	0:0	6	13
op	109:33	0:0	6	]
op	109:35	0:0	6	==
water	109:38	0:0	6	1
stmts	109:41	109:55	5	
water	109:41	0:0	6	mxf
op	109:44	0:0	6	->
water	109:46	0:0	6	op
op	109:49	0:0	6	=
water	109:51	0:0	6	OP3a
water	109:55	0:0	6	;
else	110:4	110:55	2
stmts	110:9	110:55	3	
if	110:9	110:55	4	(op [ 12 ] == 3 && op [ 13 ] == 2)
cond	110:13	110:38	5	op [ 12 ] == 3 && op [ 13 ] == 2
water	110:13	0:0	6	op
op	110:15	0:0	6	[
water	110:16	0:0	6	12
op	110:18	0:0	6	]
op	110:20	0:0	6	==
water	110:23	0:0	6	3
op	110:25	0:0	6	&&
water	110:28	0:0	6	op
op	110:30	0:0	6	[
water	110:31	0:0	6	13
op	110:33	0:0	6	]
op	110:35	0:0	6	==
water	110:38	0:0	6	2
stmts	110:41	110:55	5	
water	110:41	0:0	6	mxf
op	110:44	0:0	6	->
water	110:46	0:0	6	op
op	110:49	0:0	6	=
water	110:51	0:0	6	OP3b
water	110:55	0:0	6	;
else	111:4	111:55	2
stmts	111:9	111:55	3	
if	111:9	111:55	4	(op [ 12 ] == 3 && op [ 13 ] == 3)
cond	111:13	111:38	5	op [ 12 ] == 3 && op [ 13 ] == 3
water	111:13	0:0	6	op
op	111:15	0:0	6	[
water	111:16	0:0	6	12
op	111:18	0:0	6	]
op	111:20	0:0	6	==
water	111:23	0:0	6	3
op	111:25	0:0	6	&&
water	111:28	0:0	6	op
op	111:30	0:0	6	[
water	111:31	0:0	6	13
op	111:33	0:0	6	]
op	111:35	0:0	6	==
water	111:38	0:0	6	3
stmts	111:41	111:55	5	
water	111:41	0:0	6	mxf
op	111:44	0:0	6	->
water	111:46	0:0	6	op
op	111:49	0:0	6	=
water	111:51	0:0	6	OP3c
water	111:55	0:0	6	;
else	112:4	112:60	2
stmts	112:9	112:60	3	
if	112:9	112:60	4	(op [ 12 ] == 64 && op [ 13 ] == 1)
cond	112:13	112:38	5	op [ 12 ] == 64 && op [ 13 ] == 1
water	112:13	0:0	6	op
op	112:15	0:0	6	[
water	112:16	0:0	6	12
op	112:18	0:0	6	]
op	112:20	0:0	6	==
water	112:23	0:0	6	64
op	112:25	0:0	6	&&
water	112:28	0:0	6	op
op	112:30	0:0	6	[
water	112:31	0:0	6	13
op	112:33	0:0	6	]
op	112:35	0:0	6	==
water	112:38	0:0	6	1
stmts	112:41	112:60	5	
water	112:41	0:0	6	mxf
op	112:44	0:0	6	->
water	112:46	0:0	6	op
op	112:49	0:0	6	=
water	112:51	0:0	6	OPSONYOpt
water	112:60	0:0	6	;
else	113:4	129:4	2
stmts	113:9	129:4	3	
if	113:9	129:4	4	(op [ 12 ] == 0 x10)
cond	113:13	113:24	5	op [ 12 ] == 0 x10
water	113:13	0:0	6	op
op	113:15	0:0	6	[
water	113:16	0:0	6	12
op	113:18	0:0	6	]
op	113:20	0:0	6	==
water	113:23	0:0	6	0
water	113:24	0:0	6	x10
stmts	113:29	129:4	5	
water	113:29	0:0	6	{
if	118:8	127:8	6	(nb_essence_containers != 1)
cond	118:12	118:37	7	nb_essence_containers != 1
water	118:12	0:0	8	nb_essence_containers
op	118:34	0:0	8	!=
water	118:37	0:0	8	1
stmts	118:40	127:8	7	
water	118:40	0:0	8	{
decl	119:12	119:60	8	MXFOP	op
op	119:21	0:0	8	=
water	119:23	0:0	8	nb_essence_containers
water	119:45	0:0	8	?
water	119:47	0:0	8	OP1a
water	119:52	0:0	8	:
water	119:54	0:0	8	OPAtom
if	121:12	125:54	8	(! mxf -> op)
cond	121:16	121:22	9	! mxf -> op
op	121:16	0:0	10	!
water	121:17	0:0	10	mxf
op	121:20	0:0	10	->
water	121:22	0:0	10	op
stmts	122:16	125:54	9	
call	122:16	125:53	10	av_log
arg	122:23	122:30	11	mxf->fc
water	122:23	0:0	12	mxf
op	122:26	0:0	12	->
water	122:28	0:0	12	fc
arg	122:32	122:46	11	AV_LOG_WARNING
water	122:32	0:0	12	AV_LOG_WARNING
arg	123:23	123:70	11	"\"OPAtom\" with %"PRIu32" ECs - assuming %s\n"
water	123:23	0:0	12	"\"OPAtom\" with %"
water	123:42	0:0	12	PRIu32
water	123:48	0:0	12	" ECs - assuming %s\n"
arg	124:23	124:44	11	nb_essence_containers
water	124:23	0:0	12	nb_essence_containers
arg	125:23	125:53	11	op==OP1a?"OP1a":"OPAtom"
water	125:23	0:0	12	op
op	125:26	0:0	12	==
water	125:29	0:0	12	OP1a
water	125:34	0:0	12	?
water	125:36	0:0	12	"OP1a"
water	125:43	0:0	12	:
water	125:45	0:0	12	"OPAtom"
water	125:54	0:0	10	;
water	126:12	0:0	8	mxf
op	126:15	0:0	8	->
water	126:17	0:0	8	op
op	126:20	0:0	8	=
water	126:22	0:0	8	op
water	126:24	0:0	8	;
water	127:8	0:0	8	}
else	127:10	128:28	6
stmts	128:12	128:28	7	
water	128:12	0:0	8	mxf
op	128:15	0:0	8	->
water	128:17	0:0	8	op
op	128:20	0:0	8	=
water	128:22	0:0	8	OPAtom
water	128:28	0:0	8	;
water	129:4	0:0	6	}
else	129:6	132:4	2
stmts	129:11	132:4	3	
water	129:11	0:0	4	{
call	130:8	130:114	4	av_log
arg	130:15	130:22	5	mxf->fc
water	130:15	0:0	6	mxf
op	130:18	0:0	6	->
water	130:20	0:0	6	fc
arg	130:24	130:36	5	AV_LOG_ERROR
water	130:24	0:0	6	AV_LOG_ERROR
arg	130:38	130:98	5	"unknown operational pattern: %02xh %02xh - guessing OP1a\n"
water	130:38	0:0	6	"unknown operational pattern: %02xh %02xh - guessing OP1a\n"
arg	130:100	130:106	5	op[12]
water	130:100	0:0	6	op
op	130:102	0:0	6	[
water	130:103	0:0	6	12
op	130:105	0:0	6	]
arg	130:108	130:114	5	op[13]
water	130:108	0:0	6	op
op	130:110	0:0	6	[
water	130:111	0:0	6	13
op	130:113	0:0	6	]
water	130:115	0:0	4	;
water	131:8	0:0	4	mxf
op	131:11	0:0	4	->
water	131:13	0:0	4	op
op	131:16	0:0	4	=
water	131:18	0:0	4	OP1a
water	131:22	0:0	4	;
water	132:4	0:0	4	}
if	133:4	141:4	2	(partition -> kag_size <= 0 || partition -> kag_size > ( 1 << 20 ))
cond	133:8	133:66	3	partition -> kag_size <= 0 || partition -> kag_size > ( 1 << 20 )
water	133:8	0:0	4	partition
op	133:17	0:0	4	->
water	133:19	0:0	4	kag_size
op	133:28	0:0	4	<=
water	133:31	0:0	4	0
op	133:33	0:0	4	||
water	133:36	0:0	4	partition
op	133:45	0:0	4	->
water	133:47	0:0	4	kag_size
op	133:56	0:0	4	>
water	133:58	0:0	4	(
water	133:59	0:0	4	1
op	133:61	0:0	4	<<
water	133:64	0:0	4	20
water	133:66	0:0	4	)
stmts	133:69	141:4	3	
water	133:69	0:0	4	{
call	134:8	135:34	4	av_log
arg	134:15	134:22	5	mxf->fc
water	134:15	0:0	6	mxf
op	134:18	0:0	6	->
water	134:20	0:0	6	fc
arg	134:24	134:38	5	AV_LOG_WARNING
water	134:24	0:0	6	AV_LOG_WARNING
arg	134:40	134:79	5	"invalid KAGSize %"PRId32" - guessing "
water	134:40	0:0	6	"invalid KAGSize %"
water	134:59	0:0	6	PRId32
water	134:65	0:0	6	" - guessing "
arg	135:15	135:34	5	partition->kag_size
water	135:15	0:0	6	partition
op	135:24	0:0	6	->
water	135:26	0:0	6	kag_size
water	135:35	0:0	4	;
if	136:8	137:37	4	(mxf -> op == OPSONYOpt)
cond	136:12	136:23	5	mxf -> op == OPSONYOpt
water	136:12	0:0	6	mxf
op	136:15	0:0	6	->
water	136:17	0:0	6	op
op	136:20	0:0	6	==
water	136:23	0:0	6	OPSONYOpt
stmts	137:12	137:37	5	
water	137:12	0:0	6	partition
op	137:21	0:0	6	->
water	137:23	0:0	6	kag_size
op	137:32	0:0	6	=
water	137:34	0:0	6	512
water	137:37	0:0	6	;
else	138:8	139:35	4
stmts	139:12	139:35	5	
water	139:12	0:0	6	partition
op	139:21	0:0	6	->
water	139:23	0:0	6	kag_size
op	139:32	0:0	6	=
water	139:34	0:0	6	1
water	139:35	0:0	6	;
call	140:8	140:74	4	av_log
arg	140:15	140:22	5	mxf->fc
water	140:15	0:0	6	mxf
op	140:18	0:0	6	->
water	140:20	0:0	6	fc
arg	140:24	140:38	5	AV_LOG_WARNING
water	140:24	0:0	6	AV_LOG_WARNING
arg	140:40	140:53	5	"%"PRId32"\n"
water	140:40	0:0	6	"%"
water	140:43	0:0	6	PRId32
water	140:49	0:0	6	"\n"
arg	140:55	140:74	5	partition->kag_size
water	140:55	0:0	6	partition
op	140:64	0:0	6	->
water	140:66	0:0	6	kag_size
water	140:75	0:0	4	;
water	141:4	0:0	4	}
return	142:4	142:12	2	0
water	142:11	0:0	3	0
