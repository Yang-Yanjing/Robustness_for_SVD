func	1:0	106:0	0	int	ff_mpeg4_decode_picture_header
params	1:34	0:0	1	
param	1:35	1:55	2	Mpeg4DecContext *	ctx
param	1:57	1:74	2	GetBitContext *	gb
stmnts	0:0	105:37	1	
decl	3:4	3:31	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	m
water	4:4	0:0	2	unsigned
water	4:13	0:0	2	startcode
water	4:22	0:0	2	,
water	4:24	0:0	2	v
water	4:25	0:0	2	;
decl	5:4	5:11	2	int	ret
call	7:4	7:21	2	align_get_bits
arg	7:19	7:21	3	gb
water	7:19	0:0	4	gb
water	7:22	0:0	2	;
if	8:4	12:4	2	(s -> codec_tag ==AV_RL32 ("WV1F" ) &&show_bits (gb ,24 ) == 0 x575630)
cond	8:8	8:65	3	s -> codec_tag ==AV_RL32 ("WV1F" ) &&show_bits (gb ,24 ) == 0 x575630
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	codec_tag
op	8:21	0:0	4	==
call	8:24	8:38	4	AV_RL32
arg	8:32	8:38	5	"WV1F"
water	8:32	0:0	6	"WV1F"
op	8:40	0:0	4	&&
call	8:43	8:59	4	show_bits
arg	8:53	8:55	5	gb
water	8:53	0:0	6	gb
arg	8:57	8:59	5	24
water	8:57	0:0	6	24
op	8:61	0:0	4	==
water	8:64	0:0	4	0
water	8:65	0:0	4	x575630
stmts	8:74	12:4	3	
water	8:74	0:0	4	{
call	9:8	9:24	4	skip_bits
arg	9:18	9:20	5	gb
water	9:18	0:0	6	gb
arg	9:22	9:24	5	24
water	9:22	0:0	6	24
water	9:25	0:0	4	;
if	10:8	11:20	4	(get_bits (gb ,8 ) == 0 xF0)
cond	10:12	10:32	5	get_bits (gb ,8 ) == 0 xF0
call	10:12	10:26	6	get_bits
arg	10:21	10:23	7	gb
water	10:21	0:0	8	gb
arg	10:25	10:26	7	8
water	10:25	0:0	8	8
op	10:28	0:0	6	==
water	10:31	0:0	6	0
water	10:32	0:0	6	xF0
stmts	11:12	11:20	5	
goto	11:12	11:20	6	end
water	11:17	0:0	7	end
water	12:4	0:0	4	}
water	13:4	0:0	2	startcode
op	13:14	0:0	2	=
water	13:16	0:0	2	0
water	13:17	0:0	2	xff
water	13:20	0:0	2	;
for	14:4	100:4	2	(;;)
forinit	14:9	14:9	3	;
water	14:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	14:13	100:4	3	
water	14:13	0:0	4	{
if	15:8	22:8	4	(get_bits_count (gb ) >= gb -> size_in_bits)
cond	15:12	15:38	5	get_bits_count (gb ) >= gb -> size_in_bits
call	15:12	15:29	6	get_bits_count
arg	15:27	15:29	7	gb
water	15:27	0:0	8	gb
op	15:31	0:0	6	>=
water	15:34	0:0	6	gb
op	15:36	0:0	6	->
water	15:38	0:0	6	size_in_bits
stmts	15:52	22:8	5	
water	15:52	0:0	6	{
if	16:12	20:12	6	(gb -> size_in_bits == 8 && ( ctx -> divx_version >= 0 || ctx -> xvid_build >= 0 ) || s -> codec_tag ==AV_RL32 ("QMP4" ))
cond	16:16	17:98	7	gb -> size_in_bits == 8 && ( ctx -> divx_version >= 0 || ctx -> xvid_build >= 0 ) || s -> codec_tag ==AV_RL32 ("QMP4" )
water	16:16	0:0	8	gb
op	16:18	0:0	8	->
water	16:20	0:0	8	size_in_bits
op	16:33	0:0	8	==
water	16:36	0:0	8	8
op	16:38	0:0	8	&&
water	17:16	0:0	8	(
water	17:17	0:0	8	ctx
op	17:20	0:0	8	->
water	17:22	0:0	8	divx_version
op	17:35	0:0	8	>=
water	17:38	0:0	8	0
op	17:40	0:0	8	||
water	17:43	0:0	8	ctx
op	17:46	0:0	8	->
water	17:48	0:0	8	xvid_build
op	17:59	0:0	8	>=
water	17:62	0:0	8	0
water	17:63	0:0	8	)
op	17:65	0:0	8	||
water	17:68	0:0	8	s
op	17:69	0:0	8	->
water	17:71	0:0	8	codec_tag
op	17:81	0:0	8	==
call	17:84	17:98	8	AV_RL32
arg	17:92	17:98	9	"QMP4"
water	17:92	0:0	10	"QMP4"
stmts	17:101	20:12	7	
water	17:101	0:0	8	{
call	18:16	18:84	8	av_log
arg	18:23	18:31	9	s->avctx
water	18:23	0:0	10	s
op	18:24	0:0	10	->
water	18:26	0:0	10	avctx
arg	18:33	18:47	9	AV_LOG_VERBOSE
water	18:33	0:0	10	AV_LOG_VERBOSE
arg	18:49	18:66	9	"frame skip %d\n"
water	18:49	0:0	10	"frame skip %d\n"
arg	18:68	18:84	9	gb->size_in_bits
water	18:68	0:0	10	gb
op	18:70	0:0	10	->
water	18:72	0:0	10	size_in_bits
water	18:85	0:0	8	;
return	19:16	19:36	8	FRAME_SKIPPED
water	19:23	0:0	9	FRAME_SKIPPED
water	20:12	0:0	8	}
else	20:14	21:25	6
stmts	21:16	21:25	7	
return	21:16	21:25	8	-1
op	21:23	0:0	9	-
water	21:24	0:0	9	1
water	22:8	0:0	6	}
water	24:8	0:0	4	v
op	24:10	0:0	4	=
call	24:12	24:26	4	get_bits
arg	24:21	24:23	5	gb
water	24:21	0:0	6	gb
arg	24:25	24:26	5	8
water	24:25	0:0	6	8
water	24:27	0:0	4	;
water	25:8	0:0	4	startcode
op	25:18	0:0	4	=
water	25:20	0:0	4	(
water	25:21	0:0	4	(
water	25:22	0:0	4	startcode
op	25:32	0:0	4	<<
water	25:35	0:0	4	8
water	25:36	0:0	4	)
op	25:38	0:0	4	|
water	25:40	0:0	4	v
water	25:41	0:0	4	)
op	25:43	0:0	4	&
water	25:45	0:0	4	0
water	25:46	0:0	4	xffffffff
water	25:55	0:0	4	;
if	26:8	27:20	4	(( startcode & 0 xFFFFFF00 ) != 0 x100)
cond	26:12	26:41	5	( startcode & 0 xFFFFFF00 ) != 0 x100
water	26:12	0:0	6	(
water	26:13	0:0	6	startcode
op	26:23	0:0	6	&
water	26:25	0:0	6	0
water	26:26	0:0	6	xFFFFFF00
water	26:35	0:0	6	)
op	26:37	0:0	6	!=
water	26:40	0:0	6	0
water	26:41	0:0	6	x100
stmts	27:12	27:20	5	
continue	27:12	27:20	6	
if	28:8	85:8	4	(s -> avctx -> debug & FF_DEBUG_STARTCODE)
cond	28:12	28:30	5	s -> avctx -> debug & FF_DEBUG_STARTCODE
water	28:12	0:0	6	s
op	28:13	0:0	6	->
water	28:15	0:0	6	avctx
op	28:20	0:0	6	->
water	28:22	0:0	6	debug
op	28:28	0:0	6	&
water	28:30	0:0	6	FF_DEBUG_STARTCODE
stmts	28:50	85:8	5	
water	28:50	0:0	6	{
call	29:12	29:71	6	av_log
arg	29:19	29:27	7	s->avctx
water	29:19	0:0	8	s
op	29:20	0:0	8	->
water	29:22	0:0	8	avctx
arg	29:29	29:41	7	AV_LOG_DEBUG
water	29:29	0:0	8	AV_LOG_DEBUG
arg	29:43	29:60	7	"startcode: %3X "
water	29:43	0:0	8	"startcode: %3X "
arg	29:62	29:71	7	startcode
water	29:62	0:0	8	startcode
water	29:72	0:0	6	;
if	30:12	31:68	6	(startcode <= 0 x11F)
cond	30:16	30:30	7	startcode <= 0 x11F
water	30:16	0:0	8	startcode
op	30:26	0:0	8	<=
water	30:29	0:0	8	0
water	30:30	0:0	8	x11F
stmts	31:16	31:68	7	
call	31:16	31:67	8	av_log
arg	31:23	31:31	9	s->avctx
water	31:23	0:0	10	s
op	31:24	0:0	10	->
water	31:26	0:0	10	avctx
arg	31:33	31:45	9	AV_LOG_DEBUG
water	31:33	0:0	10	AV_LOG_DEBUG
arg	31:47	31:67	9	"Video Object Start"
water	31:47	0:0	10	"Video Object Start"
water	31:68	0:0	8	;
else	32:12	33:74	6
stmts	32:17	33:74	7	
if	32:17	33:74	8	(startcode <= 0 x12F)
cond	32:21	32:35	9	startcode <= 0 x12F
water	32:21	0:0	10	startcode
op	32:31	0:0	10	<=
water	32:34	0:0	10	0
water	32:35	0:0	10	x12F
stmts	33:16	33:74	9	
call	33:16	33:73	10	av_log
arg	33:23	33:31	11	s->avctx
water	33:23	0:0	12	s
op	33:24	0:0	12	->
water	33:26	0:0	12	avctx
arg	33:33	33:45	11	AV_LOG_DEBUG
water	33:33	0:0	12	AV_LOG_DEBUG
arg	33:47	33:73	11	"Video Object Layer Start"
water	33:47	0:0	12	"Video Object Layer Start"
water	33:74	0:0	10	;
else	34:12	35:58	6
stmts	34:17	35:58	7	
if	34:17	35:58	8	(startcode <= 0 x13F)
cond	34:21	34:35	9	startcode <= 0 x13F
water	34:21	0:0	10	startcode
op	34:31	0:0	10	<=
water	34:34	0:0	10	0
water	34:35	0:0	10	x13F
stmts	35:16	35:58	9	
call	35:16	35:57	10	av_log
arg	35:23	35:31	11	s->avctx
water	35:23	0:0	12	s
op	35:24	0:0	12	->
water	35:26	0:0	12	avctx
arg	35:33	35:45	11	AV_LOG_DEBUG
water	35:33	0:0	12	AV_LOG_DEBUG
arg	35:47	35:57	11	"Reserved"
water	35:47	0:0	12	"Reserved"
water	35:58	0:0	10	;
else	36:12	37:62	6
stmts	36:17	37:62	7	
if	36:17	37:62	8	(startcode <= 0 x15F)
cond	36:21	36:35	9	startcode <= 0 x15F
water	36:21	0:0	10	startcode
op	36:31	0:0	10	<=
water	36:34	0:0	10	0
water	36:35	0:0	10	x15F
stmts	37:16	37:62	9	
call	37:16	37:61	10	av_log
arg	37:23	37:31	11	s->avctx
water	37:23	0:0	12	s
op	37:24	0:0	12	->
water	37:26	0:0	12	avctx
arg	37:33	37:45	11	AV_LOG_DEBUG
water	37:33	0:0	12	AV_LOG_DEBUG
arg	37:47	37:61	11	"FGS bp start"
water	37:47	0:0	12	"FGS bp start"
water	37:62	0:0	10	;
else	38:12	39:58	6
stmts	38:17	39:58	7	
if	38:17	39:58	8	(startcode <= 0 x1AF)
cond	38:21	38:35	9	startcode <= 0 x1AF
water	38:21	0:0	10	startcode
op	38:31	0:0	10	<=
water	38:34	0:0	10	0
water	38:35	0:0	10	x1AF
stmts	39:16	39:58	9	
call	39:16	39:57	10	av_log
arg	39:23	39:31	11	s->avctx
water	39:23	0:0	12	s
op	39:24	0:0	12	->
water	39:26	0:0	12	avctx
arg	39:33	39:45	11	AV_LOG_DEBUG
water	39:33	0:0	12	AV_LOG_DEBUG
arg	39:47	39:57	11	"Reserved"
water	39:47	0:0	12	"Reserved"
water	39:58	0:0	10	;
else	40:12	41:73	6
stmts	40:17	41:73	7	
if	40:17	41:73	8	(startcode == 0 x1B0)
cond	40:21	40:35	9	startcode == 0 x1B0
water	40:21	0:0	10	startcode
op	40:31	0:0	10	==
water	40:34	0:0	10	0
water	40:35	0:0	10	x1B0
stmts	41:16	41:73	9	
call	41:16	41:72	10	av_log
arg	41:23	41:31	11	s->avctx
water	41:23	0:0	12	s
op	41:24	0:0	12	->
water	41:26	0:0	12	avctx
arg	41:33	41:45	11	AV_LOG_DEBUG
water	41:33	0:0	12	AV_LOG_DEBUG
arg	41:47	41:72	11	"Visual Object Seq Start"
water	41:47	0:0	12	"Visual Object Seq Start"
water	41:73	0:0	10	;
else	42:12	43:71	6
stmts	42:17	43:71	7	
if	42:17	43:71	8	(startcode == 0 x1B1)
cond	42:21	42:35	9	startcode == 0 x1B1
water	42:21	0:0	10	startcode
op	42:31	0:0	10	==
water	42:34	0:0	10	0
water	42:35	0:0	10	x1B1
stmts	43:16	43:71	9	
call	43:16	43:70	10	av_log
arg	43:23	43:31	11	s->avctx
water	43:23	0:0	12	s
op	43:24	0:0	12	->
water	43:26	0:0	12	avctx
arg	43:33	43:45	11	AV_LOG_DEBUG
water	43:33	0:0	12	AV_LOG_DEBUG
arg	43:47	43:70	11	"Visual Object Seq End"
water	43:47	0:0	12	"Visual Object Seq End"
water	43:71	0:0	10	;
else	44:12	45:59	6
stmts	44:17	45:59	7	
if	44:17	45:59	8	(startcode == 0 x1B2)
cond	44:21	44:35	9	startcode == 0 x1B2
water	44:21	0:0	10	startcode
op	44:31	0:0	10	==
water	44:34	0:0	10	0
water	44:35	0:0	10	x1B2
stmts	45:16	45:59	9	
call	45:16	45:58	10	av_log
arg	45:23	45:31	11	s->avctx
water	45:23	0:0	12	s
op	45:24	0:0	12	->
water	45:26	0:0	12	avctx
arg	45:33	45:45	11	AV_LOG_DEBUG
water	45:33	0:0	12	AV_LOG_DEBUG
arg	45:47	45:58	11	"User Data"
water	45:47	0:0	12	"User Data"
water	45:59	0:0	10	;
else	46:12	47:68	6
stmts	46:17	47:68	7	
if	46:17	47:68	8	(startcode == 0 x1B3)
cond	46:21	46:35	9	startcode == 0 x1B3
water	46:21	0:0	10	startcode
op	46:31	0:0	10	==
water	46:34	0:0	10	0
water	46:35	0:0	10	x1B3
stmts	47:16	47:68	9	
call	47:16	47:67	10	av_log
arg	47:23	47:31	11	s->avctx
water	47:23	0:0	12	s
op	47:24	0:0	12	->
water	47:26	0:0	12	avctx
arg	47:33	47:45	11	AV_LOG_DEBUG
water	47:33	0:0	12	AV_LOG_DEBUG
arg	47:47	47:67	11	"Group of VOP start"
water	47:47	0:0	12	"Group of VOP start"
water	47:68	0:0	10	;
else	48:12	49:69	6
stmts	48:17	49:69	7	
if	48:17	49:69	8	(startcode == 0 x1B4)
cond	48:21	48:35	9	startcode == 0 x1B4
water	48:21	0:0	10	startcode
op	48:31	0:0	10	==
water	48:34	0:0	10	0
water	48:35	0:0	10	x1B4
stmts	49:16	49:69	9	
call	49:16	49:68	10	av_log
arg	49:23	49:31	11	s->avctx
water	49:23	0:0	12	s
op	49:24	0:0	12	->
water	49:26	0:0	12	avctx
arg	49:33	49:45	11	AV_LOG_DEBUG
water	49:33	0:0	12	AV_LOG_DEBUG
arg	49:47	49:68	11	"Video Session Error"
water	49:47	0:0	12	"Video Session Error"
water	49:69	0:0	10	;
else	50:12	51:69	6
stmts	50:17	51:69	7	
if	50:17	51:69	8	(startcode == 0 x1B5)
cond	50:21	50:35	9	startcode == 0 x1B5
water	50:21	0:0	10	startcode
op	50:31	0:0	10	==
water	50:34	0:0	10	0
water	50:35	0:0	10	x1B5
stmts	51:16	51:69	9	
call	51:16	51:68	10	av_log
arg	51:23	51:31	11	s->avctx
water	51:23	0:0	12	s
op	51:24	0:0	12	->
water	51:26	0:0	12	avctx
arg	51:33	51:45	11	AV_LOG_DEBUG
water	51:33	0:0	12	AV_LOG_DEBUG
arg	51:47	51:68	11	"Visual Object Start"
water	51:47	0:0	12	"Visual Object Start"
water	51:69	0:0	10	;
else	52:12	53:74	6
stmts	52:17	53:74	7	
if	52:17	53:74	8	(startcode == 0 x1B6)
cond	52:21	52:35	9	startcode == 0 x1B6
water	52:21	0:0	10	startcode
op	52:31	0:0	10	==
water	52:34	0:0	10	0
water	52:35	0:0	10	x1B6
stmts	53:16	53:74	9	
call	53:16	53:73	10	av_log
arg	53:23	53:31	11	s->avctx
water	53:23	0:0	12	s
op	53:24	0:0	12	->
water	53:26	0:0	12	avctx
arg	53:33	53:45	11	AV_LOG_DEBUG
water	53:33	0:0	12	AV_LOG_DEBUG
arg	53:47	53:73	11	"Video Object Plane start"
water	53:47	0:0	12	"Video Object Plane start"
water	53:74	0:0	10	;
else	54:12	55:61	6
stmts	54:17	55:61	7	
if	54:17	55:61	8	(startcode == 0 x1B7)
cond	54:21	54:35	9	startcode == 0 x1B7
water	54:21	0:0	10	startcode
op	54:31	0:0	10	==
water	54:34	0:0	10	0
water	54:35	0:0	10	x1B7
stmts	55:16	55:61	9	
call	55:16	55:60	10	av_log
arg	55:23	55:31	11	s->avctx
water	55:23	0:0	12	s
op	55:24	0:0	12	->
water	55:26	0:0	12	avctx
arg	55:33	55:45	11	AV_LOG_DEBUG
water	55:33	0:0	12	AV_LOG_DEBUG
arg	55:47	55:60	11	"slice start"
water	55:47	0:0	12	"slice start"
water	55:61	0:0	10	;
else	56:12	57:65	6
stmts	56:17	57:65	7	
if	56:17	57:65	8	(startcode == 0 x1B8)
cond	56:21	56:35	9	startcode == 0 x1B8
water	56:21	0:0	10	startcode
op	56:31	0:0	10	==
water	56:34	0:0	10	0
water	56:35	0:0	10	x1B8
stmts	57:16	57:65	9	
call	57:16	57:64	10	av_log
arg	57:23	57:31	11	s->avctx
water	57:23	0:0	12	s
op	57:24	0:0	12	->
water	57:26	0:0	12	avctx
arg	57:33	57:45	11	AV_LOG_DEBUG
water	57:33	0:0	12	AV_LOG_DEBUG
arg	57:47	57:64	11	"extension start"
water	57:47	0:0	12	"extension start"
water	57:65	0:0	10	;
else	58:12	59:59	6
stmts	58:17	59:59	7	
if	58:17	59:59	8	(startcode == 0 x1B9)
cond	58:21	58:35	9	startcode == 0 x1B9
water	58:21	0:0	10	startcode
op	58:31	0:0	10	==
water	58:34	0:0	10	0
water	58:35	0:0	10	x1B9
stmts	59:16	59:59	9	
call	59:16	59:58	10	av_log
arg	59:23	59:31	11	s->avctx
water	59:23	0:0	12	s
op	59:24	0:0	12	->
water	59:26	0:0	12	avctx
arg	59:33	59:45	11	AV_LOG_DEBUG
water	59:33	0:0	12	AV_LOG_DEBUG
arg	59:47	59:58	11	"fgs start"
water	59:47	0:0	12	"fgs start"
water	59:59	0:0	10	;
else	60:12	61:66	6
stmts	60:17	61:66	7	
if	60:17	61:66	8	(startcode == 0 x1BA)
cond	60:21	60:35	9	startcode == 0 x1BA
water	60:21	0:0	10	startcode
op	60:31	0:0	10	==
water	60:34	0:0	10	0
water	60:35	0:0	10	x1BA
stmts	61:16	61:66	9	
call	61:16	61:65	10	av_log
arg	61:23	61:31	11	s->avctx
water	61:23	0:0	12	s
op	61:24	0:0	12	->
water	61:26	0:0	12	avctx
arg	61:33	61:45	11	AV_LOG_DEBUG
water	61:33	0:0	12	AV_LOG_DEBUG
arg	61:47	61:65	11	"FBA Object start"
water	61:47	0:0	12	"FBA Object start"
water	61:66	0:0	10	;
else	62:12	63:72	6
stmts	62:17	63:72	7	
if	62:17	63:72	8	(startcode == 0 x1BB)
cond	62:21	62:35	9	startcode == 0 x1BB
water	62:21	0:0	10	startcode
op	62:31	0:0	10	==
water	62:34	0:0	10	0
water	62:35	0:0	10	x1BB
stmts	63:16	63:72	9	
call	63:16	63:71	10	av_log
arg	63:23	63:31	11	s->avctx
water	63:23	0:0	12	s
op	63:24	0:0	12	->
water	63:26	0:0	12	avctx
arg	63:33	63:45	11	AV_LOG_DEBUG
water	63:33	0:0	12	AV_LOG_DEBUG
arg	63:47	63:71	11	"FBA Object Plane start"
water	63:47	0:0	12	"FBA Object Plane start"
water	63:72	0:0	10	;
else	64:12	65:67	6
stmts	64:17	65:67	7	
if	64:17	65:67	8	(startcode == 0 x1BC)
cond	64:21	64:35	9	startcode == 0 x1BC
water	64:21	0:0	10	startcode
op	64:31	0:0	10	==
water	64:34	0:0	10	0
water	64:35	0:0	10	x1BC
stmts	65:16	65:67	9	
call	65:16	65:66	10	av_log
arg	65:23	65:31	11	s->avctx
water	65:23	0:0	12	s
op	65:24	0:0	12	->
water	65:26	0:0	12	avctx
arg	65:33	65:45	11	AV_LOG_DEBUG
water	65:33	0:0	12	AV_LOG_DEBUG
arg	65:47	65:66	11	"Mesh Object start"
water	65:47	0:0	12	"Mesh Object start"
water	65:67	0:0	10	;
else	66:12	67:73	6
stmts	66:17	67:73	7	
if	66:17	67:73	8	(startcode == 0 x1BD)
cond	66:21	66:35	9	startcode == 0 x1BD
water	66:21	0:0	10	startcode
op	66:31	0:0	10	==
water	66:34	0:0	10	0
water	66:35	0:0	10	x1BD
stmts	67:16	67:73	9	
call	67:16	67:72	10	av_log
arg	67:23	67:31	11	s->avctx
water	67:23	0:0	12	s
op	67:24	0:0	12	->
water	67:26	0:0	12	avctx
arg	67:33	67:45	11	AV_LOG_DEBUG
water	67:33	0:0	12	AV_LOG_DEBUG
arg	67:47	67:72	11	"Mesh Object Plane start"
water	67:47	0:0	12	"Mesh Object Plane start"
water	67:73	0:0	10	;
else	68:12	69:76	6
stmts	68:17	69:76	7	
if	68:17	69:76	8	(startcode == 0 x1BE)
cond	68:21	68:35	9	startcode == 0 x1BE
water	68:21	0:0	10	startcode
op	68:31	0:0	10	==
water	68:34	0:0	10	0
water	68:35	0:0	10	x1BE
stmts	69:16	69:76	9	
call	69:16	69:75	10	av_log
arg	69:23	69:31	11	s->avctx
water	69:23	0:0	12	s
op	69:24	0:0	12	->
water	69:26	0:0	12	avctx
arg	69:33	69:45	11	AV_LOG_DEBUG
water	69:33	0:0	12	AV_LOG_DEBUG
arg	69:47	69:75	11	"Still Texture Object start"
water	69:47	0:0	12	"Still Texture Object start"
water	69:76	0:0	10	;
else	70:12	71:77	6
stmts	70:17	71:77	7	
if	70:17	71:77	8	(startcode == 0 x1BF)
cond	70:21	70:35	9	startcode == 0 x1BF
water	70:21	0:0	10	startcode
op	70:31	0:0	10	==
water	70:34	0:0	10	0
water	70:35	0:0	10	x1BF
stmts	71:16	71:77	9	
call	71:16	71:76	10	av_log
arg	71:23	71:31	11	s->avctx
water	71:23	0:0	12	s
op	71:24	0:0	12	->
water	71:26	0:0	12	avctx
arg	71:33	71:45	11	AV_LOG_DEBUG
water	71:33	0:0	12	AV_LOG_DEBUG
arg	71:47	71:76	11	"Texture Spatial Layer start"
water	71:47	0:0	12	"Texture Spatial Layer start"
water	71:77	0:0	10	;
else	72:12	73:73	6
stmts	72:17	73:73	7	
if	72:17	73:73	8	(startcode == 0 x1C0)
cond	72:21	72:35	9	startcode == 0 x1C0
water	72:21	0:0	10	startcode
op	72:31	0:0	10	==
water	72:34	0:0	10	0
water	72:35	0:0	10	x1C0
stmts	73:16	73:73	9	
call	73:16	73:72	10	av_log
arg	73:23	73:31	11	s->avctx
water	73:23	0:0	12	s
op	73:24	0:0	12	->
water	73:26	0:0	12	avctx
arg	73:33	73:45	11	AV_LOG_DEBUG
water	73:33	0:0	12	AV_LOG_DEBUG
arg	73:47	73:72	11	"Texture SNR Layer start"
water	73:47	0:0	12	"Texture SNR Layer start"
water	73:73	0:0	10	;
else	74:12	75:68	6
stmts	74:17	75:68	7	
if	74:17	75:68	8	(startcode == 0 x1C1)
cond	74:21	74:35	9	startcode == 0 x1C1
water	74:21	0:0	10	startcode
op	74:31	0:0	10	==
water	74:34	0:0	10	0
water	74:35	0:0	10	x1C1
stmts	75:16	75:68	9	
call	75:16	75:67	10	av_log
arg	75:23	75:31	11	s->avctx
water	75:23	0:0	12	s
op	75:24	0:0	12	->
water	75:26	0:0	12	avctx
arg	75:33	75:45	11	AV_LOG_DEBUG
water	75:33	0:0	12	AV_LOG_DEBUG
arg	75:47	75:67	11	"Texture Tile start"
water	75:47	0:0	12	"Texture Tile start"
water	75:68	0:0	10	;
else	76:12	77:75	6
stmts	76:17	77:75	7	
if	76:17	77:75	8	(startcode == 0 x1C2)
cond	76:21	76:35	9	startcode == 0 x1C2
water	76:21	0:0	10	startcode
op	76:31	0:0	10	==
water	76:34	0:0	10	0
water	76:35	0:0	10	x1C2
stmts	77:16	77:75	9	
call	77:16	77:74	10	av_log
arg	77:23	77:31	11	s->avctx
water	77:23	0:0	12	s
op	77:24	0:0	12	->
water	77:26	0:0	12	avctx
arg	77:33	77:45	11	AV_LOG_DEBUG
water	77:33	0:0	12	AV_LOG_DEBUG
arg	77:47	77:74	11	"Texture Shape Layer start"
water	77:47	0:0	12	"Texture Shape Layer start"
water	77:75	0:0	10	;
else	78:12	79:64	6
stmts	78:17	79:64	7	
if	78:17	79:64	8	(startcode == 0 x1C3)
cond	78:21	78:35	9	startcode == 0 x1C3
water	78:21	0:0	10	startcode
op	78:31	0:0	10	==
water	78:34	0:0	10	0
water	78:35	0:0	10	x1C3
stmts	79:16	79:64	9	
call	79:16	79:63	10	av_log
arg	79:23	79:31	11	s->avctx
water	79:23	0:0	12	s
op	79:24	0:0	12	->
water	79:26	0:0	12	avctx
arg	79:33	79:45	11	AV_LOG_DEBUG
water	79:33	0:0	12	AV_LOG_DEBUG
arg	79:47	79:63	11	"stuffing start"
water	79:47	0:0	12	"stuffing start"
water	79:64	0:0	10	;
else	80:12	81:58	6
stmts	80:17	81:58	7	
if	80:17	81:58	8	(startcode <= 0 x1C5)
cond	80:21	80:35	9	startcode <= 0 x1C5
water	80:21	0:0	10	startcode
op	80:31	0:0	10	<=
water	80:34	0:0	10	0
water	80:35	0:0	10	x1C5
stmts	81:16	81:58	9	
call	81:16	81:57	10	av_log
arg	81:23	81:31	11	s->avctx
water	81:23	0:0	12	s
op	81:24	0:0	12	->
water	81:26	0:0	12	avctx
arg	81:33	81:45	11	AV_LOG_DEBUG
water	81:33	0:0	12	AV_LOG_DEBUG
arg	81:47	81:57	11	"reserved"
water	81:47	0:0	12	"reserved"
water	81:58	0:0	10	;
else	82:12	83:62	6
stmts	82:17	83:62	7	
if	82:17	83:62	8	(startcode <= 0 x1FF)
cond	82:21	82:35	9	startcode <= 0 x1FF
water	82:21	0:0	10	startcode
op	82:31	0:0	10	<=
water	82:34	0:0	10	0
water	82:35	0:0	10	x1FF
stmts	83:16	83:62	9	
call	83:16	83:61	10	av_log
arg	83:23	83:31	11	s->avctx
water	83:23	0:0	12	s
op	83:24	0:0	12	->
water	83:26	0:0	12	avctx
arg	83:33	83:45	11	AV_LOG_DEBUG
water	83:33	0:0	12	AV_LOG_DEBUG
arg	83:47	83:61	11	"System start"
water	83:47	0:0	12	"System start"
water	83:62	0:0	10	;
call	84:12	84:73	6	av_log
arg	84:19	84:27	7	s->avctx
water	84:19	0:0	8	s
op	84:20	0:0	8	->
water	84:22	0:0	8	avctx
arg	84:29	84:41	7	AV_LOG_DEBUG
water	84:29	0:0	8	AV_LOG_DEBUG
arg	84:43	84:53	7	" at %d\n"
water	84:43	0:0	8	" at %d\n"
arg	84:55	84:73	7	get_bits_count(gb)
call	84:55	84:72	8	get_bits_count
arg	84:70	84:72	9	gb
water	84:70	0:0	10	gb
water	84:74	0:0	6	;
water	85:8	0:0	6	}
if	86:8	89:8	4	(startcode >= 0 x120 && startcode <= 0 x12F)
cond	86:12	86:48	5	startcode >= 0 x120 && startcode <= 0 x12F
water	86:12	0:0	6	startcode
op	86:22	0:0	6	>=
water	86:25	0:0	6	0
water	86:26	0:0	6	x120
op	86:31	0:0	6	&&
water	86:34	0:0	6	startcode
op	86:44	0:0	6	<=
water	86:47	0:0	6	0
water	86:48	0:0	6	x12F
stmts	86:54	89:8	5	
water	86:54	0:0	6	{
if	87:12	88:26	6	(( ret =decode_vol_header (ctx ,gb ) ) < 0)
cond	87:16	87:53	7	( ret =decode_vol_header (ctx ,gb ) ) < 0
water	87:16	0:0	8	(
water	87:17	0:0	8	ret
op	87:21	0:0	8	=
call	87:23	87:48	8	decode_vol_header
arg	87:41	87:44	9	ctx
water	87:41	0:0	10	ctx
arg	87:46	87:48	9	gb
water	87:46	0:0	10	gb
water	87:49	0:0	8	)
op	87:51	0:0	8	<
water	87:53	0:0	8	0
stmts	88:16	88:26	7	
return	88:16	88:26	8	ret
water	88:23	0:0	9	ret
water	89:8	0:0	6	}
else	89:10	91:8	4
stmts	89:15	91:8	5	
if	89:15	91:8	6	(startcode == USER_DATA_STARTCODE)
cond	89:19	89:32	7	startcode == USER_DATA_STARTCODE
water	89:19	0:0	8	startcode
op	89:29	0:0	8	==
water	89:32	0:0	8	USER_DATA_STARTCODE
stmts	89:53	91:8	7	
water	89:53	0:0	8	{
call	90:12	90:36	8	decode_user_data
arg	90:29	90:32	9	ctx
water	90:29	0:0	10	ctx
arg	90:34	90:36	9	gb
water	90:34	0:0	10	gb
water	90:37	0:0	8	;
water	91:8	0:0	8	}
else	91:10	93:8	4
stmts	91:15	93:8	5	
if	91:15	93:8	6	(startcode == GOP_STARTCODE)
cond	91:19	91:32	7	startcode == GOP_STARTCODE
water	91:19	0:0	8	startcode
op	91:29	0:0	8	==
water	91:32	0:0	8	GOP_STARTCODE
stmts	91:47	93:8	7	
water	91:47	0:0	8	{
call	92:12	92:41	8	mpeg4_decode_gop_header
arg	92:36	92:37	9	s
water	92:36	0:0	10	s
arg	92:39	92:41	9	gb
water	92:39	0:0	10	gb
water	92:42	0:0	8	;
water	93:8	0:0	8	}
else	93:10	95:8	4
stmts	93:15	95:8	5	
if	93:15	95:8	6	(startcode == VOS_STARTCODE)
cond	93:19	93:32	7	startcode == VOS_STARTCODE
water	93:19	0:0	8	startcode
op	93:29	0:0	8	==
water	93:32	0:0	8	VOS_STARTCODE
stmts	93:47	95:8	7	
water	93:47	0:0	8	{
call	94:12	94:44	8	mpeg4_decode_profile_level
arg	94:39	94:40	9	s
water	94:39	0:0	10	s
arg	94:42	94:44	9	gb
water	94:42	0:0	10	gb
water	94:45	0:0	8	;
water	95:8	0:0	8	}
else	95:10	97:8	4
stmts	95:15	97:8	5	
if	95:15	97:8	6	(startcode == VOP_STARTCODE)
cond	95:19	95:32	7	startcode == VOP_STARTCODE
water	95:19	0:0	8	startcode
op	95:29	0:0	8	==
water	95:32	0:0	8	VOP_STARTCODE
stmts	95:47	97:8	7	
water	95:47	0:0	8	{
break	96:12	96:17	8	
water	97:8	0:0	8	}
call	98:8	98:25	4	align_get_bits
arg	98:23	98:25	5	gb
water	98:23	0:0	6	gb
water	98:26	0:0	4	;
water	99:8	0:0	4	startcode
op	99:18	0:0	4	=
water	99:20	0:0	4	0
water	99:21	0:0	4	xff
water	99:24	0:0	4	;
water	100:4	0:0	4	}
label	101:0	101:3	2	end :
if	102:4	103:24	2	(s -> avctx -> flags & AV_CODEC_FLAG_LOW_DELAY)
cond	102:8	102:26	3	s -> avctx -> flags & AV_CODEC_FLAG_LOW_DELAY
water	102:8	0:0	4	s
op	102:9	0:0	4	->
water	102:11	0:0	4	avctx
op	102:16	0:0	4	->
water	102:18	0:0	4	flags
op	102:24	0:0	4	&
water	102:26	0:0	4	AV_CODEC_FLAG_LOW_DELAY
stmts	103:8	103:24	3	
water	103:8	0:0	4	s
op	103:9	0:0	4	->
water	103:11	0:0	4	low_delay
op	103:21	0:0	4	=
water	103:23	0:0	4	1
water	103:24	0:0	4	;
water	104:4	0:0	2	s
op	104:5	0:0	2	->
water	104:7	0:0	2	avctx
op	104:12	0:0	2	->
water	104:14	0:0	2	has_b_frames
op	104:27	0:0	2	=
op	104:29	0:0	2	!
water	104:30	0:0	2	s
op	104:31	0:0	2	->
water	104:33	0:0	2	low_delay
water	104:42	0:0	2	;
return	105:4	105:37	2	decode_vop_header(ctx,gb)
call	105:11	105:36	3	decode_vop_header
arg	105:29	105:32	4	ctx
water	105:29	0:0	5	ctx
arg	105:34	105:36	4	gb
water	105:34	0:0	5	gb
