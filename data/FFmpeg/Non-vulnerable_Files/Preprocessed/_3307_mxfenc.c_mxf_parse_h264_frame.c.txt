func	1:0	59:0	0	static int	mxf_parse_h264_frame
params	1:31	0:0	1	
param	1:32	1:50	2	AVFormatContext *	s
param	1:52	1:64	2	AVStream *	st
param	2:32	2:45	2	AVPacket *	pkt
param	2:47	2:63	2	MXFIndexEntry *	e
stmnts	0:0	58:12	1	
decl	4:4	4:34	2	MXFContext	*mxf
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	priv_data
decl	5:4	5:40	2	MXFStreamContext	*sc
op	5:25	0:0	2	=
water	5:27	0:0	2	st
op	5:29	0:0	2	->
water	5:31	0:0	2	priv_data
water	6:4	0:0	2	static
water	6:11	0:0	2	const
water	6:17	0:0	2	int
water	6:21	0:0	2	mxf_h264_num_codec_uls
op	6:44	0:0	2	=
op	6:46	0:0	2	sizeof
water	6:52	0:0	2	(
water	6:53	0:0	2	mxf_h264_codec_uls
water	6:71	0:0	2	)
op	6:73	0:0	2	/
op	6:75	0:0	2	sizeof
water	6:81	0:0	2	(
water	6:82	0:0	2	mxf_h264_codec_uls
op	6:100	0:0	2	[
water	6:101	0:0	2	0
op	6:102	0:0	2	]
water	6:103	0:0	2	)
water	6:104	0:0	2	;
decl	7:4	7:34	2	const uint8_t	*buf
op	7:23	0:0	2	=
water	7:25	0:0	2	pkt
op	7:28	0:0	2	->
water	7:30	0:0	2	data
decl	8:4	8:50	2	const uint8_t	*buf_end
op	8:27	0:0	2	=
water	8:29	0:0	2	pkt
op	8:32	0:0	2	->
water	8:34	0:0	2	data
op	8:39	0:0	2	+
water	8:41	0:0	2	pkt
op	8:44	0:0	2	->
water	8:46	0:0	2	size
decl	9:4	9:23	2	uint32_t	state
op	9:19	0:0	2	=
op	9:21	0:0	2	-
water	9:22	0:0	2	1
decl	10:4	10:24	2	int	extra_size
op	10:19	0:0	2	=
water	10:21	0:0	2	512
decl	11:4	11:21	2	int	i
water	11:9	0:0	2	,
decl	11:4	11:21	2	int	frame_size
decl	12:4	12:21	2	uint8_t	uid_found
if	13:4	14:41	2	(pkt -> size > extra_size)
cond	13:8	13:20	3	pkt -> size > extra_size
water	13:8	0:0	4	pkt
op	13:11	0:0	4	->
water	13:13	0:0	4	size
op	13:18	0:0	4	>
water	13:20	0:0	4	extra_size
stmts	14:8	14:41	3	
water	14:8	0:0	4	buf_end
op	14:16	0:0	4	-=
water	14:19	0:0	4	pkt
op	14:22	0:0	4	->
water	14:24	0:0	4	size
op	14:29	0:0	4	-
water	14:31	0:0	4	extra_size
water	14:41	0:0	4	;
for	15:4	35:4	2	(;;)
forinit	15:9	15:9	3	;
water	15:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	15:13	35:4	3	
water	15:13	0:0	4	{
water	16:8	0:0	4	buf
op	16:12	0:0	4	=
call	16:14	16:57	4	avpriv_find_start_code
arg	16:37	16:40	5	buf
water	16:37	0:0	6	buf
arg	16:42	16:49	5	buf_end
water	16:42	0:0	6	buf_end
arg	16:51	16:57	5	&state
op	16:51	0:0	6	&
water	16:52	0:0	6	state
water	16:58	0:0	4	;
if	17:8	18:17	4	(buf >= buf_end)
cond	17:12	17:19	5	buf >= buf_end
water	17:12	0:0	6	buf
op	17:16	0:0	6	>=
water	17:19	0:0	6	buf_end
stmts	18:12	18:17	5	
break	18:12	18:17	6	
op	19:8	0:0	4	--
water	19:10	0:0	4	buf
water	19:13	0:0	4	;
switch	20:8	34:8	4	(state & 0 x1f)
cond	20:16	20:25	5	state & 0 x1f
water	20:16	0:0	6	state
op	20:22	0:0	6	&
water	20:24	0:0	6	0
water	20:25	0:0	6	x1f
stmts	20:30	34:8	5	
water	20:30	0:0	6	{
label	21:8	21:20	6	case NAL_SPS :
water	22:12	0:0	6	st
op	22:14	0:0	6	->
water	22:16	0:0	6	codec
op	22:21	0:0	6	->
water	22:23	0:0	6	profile
op	22:31	0:0	6	=
water	22:33	0:0	6	buf
op	22:36	0:0	6	[
water	22:37	0:0	6	1
op	22:38	0:0	6	]
water	22:39	0:0	6	;
water	23:12	0:0	6	e
op	23:13	0:0	6	->
water	23:15	0:0	6	flags
op	23:21	0:0	6	|=
water	23:24	0:0	6	0
water	23:25	0:0	6	x40
water	23:28	0:0	6	;
break	24:12	24:17	6	
label	25:8	25:20	6	case NAL_PPS :
if	26:12	30:12	6	(e -> flags & 0 x40)
cond	26:16	26:28	7	e -> flags & 0 x40
water	26:16	0:0	8	e
op	26:17	0:0	8	->
water	26:19	0:0	8	flags
op	26:25	0:0	8	&
water	26:27	0:0	8	0
water	26:28	0:0	8	x40
stmts	26:33	30:12	7	
water	26:33	0:0	8	{
water	27:16	0:0	8	e
op	27:17	0:0	8	->
water	27:19	0:0	8	flags
op	27:25	0:0	8	|=
water	27:28	0:0	8	0
water	27:29	0:0	8	x80
water	27:32	0:0	8	;
water	28:16	0:0	8	extra_size
op	28:27	0:0	8	=
water	28:29	0:0	8	0
water	28:30	0:0	8	;
water	29:16	0:0	8	buf
op	29:20	0:0	8	=
water	29:22	0:0	8	buf_end
water	29:29	0:0	8	;
water	30:12	0:0	8	}
break	31:12	31:17	6	
label	32:8	32:15	6	default :
break	33:12	33:17	6	
water	34:8	0:0	6	}
water	35:4	0:0	4	}
if	36:4	37:16	2	(mxf -> header_written)
cond	36:8	36:13	3	mxf -> header_written
water	36:8	0:0	4	mxf
op	36:11	0:0	4	->
water	36:13	0:0	4	header_written
stmts	37:8	37:16	3	
return	37:8	37:16	4	1
water	37:15	0:0	5	1
water	38:4	0:0	2	sc
op	38:6	0:0	2	->
water	38:8	0:0	2	aspect_ratio
op	38:21	0:0	2	=
water	38:23	0:0	2	(
water	38:24	0:0	2	AVRational
water	38:34	0:0	2	)
water	38:35	0:0	2	{
water	38:37	0:0	2	16
water	38:39	0:0	2	,
water	38:41	0:0	2	9
water	38:43	0:0	2	}
water	38:44	0:0	2	;
water	39:4	0:0	2	sc
op	39:6	0:0	2	->
water	39:8	0:0	2	component_depth
op	39:24	0:0	2	=
water	39:26	0:0	2	10
water	39:28	0:0	2	;
water	40:4	0:0	2	sc
op	40:6	0:0	2	->
water	40:8	0:0	2	interlaced
op	40:19	0:0	2	=
water	40:21	0:0	2	st
op	40:23	0:0	2	->
water	40:25	0:0	2	codec
op	40:30	0:0	2	->
water	40:32	0:0	2	field_order
op	40:44	0:0	2	!=
water	40:47	0:0	2	AV_FIELD_PROGRESSIVE
water	40:68	0:0	2	?
water	40:70	0:0	2	1
water	40:72	0:0	2	:
water	40:74	0:0	2	0
water	40:75	0:0	2	;
if	41:4	42:31	2	(sc -> interlaced)
cond	41:8	41:12	3	sc -> interlaced
water	41:8	0:0	4	sc
op	41:10	0:0	4	->
water	41:12	0:0	4	interlaced
stmts	42:8	42:31	3	
water	42:8	0:0	4	sc
op	42:10	0:0	4	->
water	42:12	0:0	4	field_dominance
op	42:28	0:0	4	=
water	42:30	0:0	4	1
water	42:31	0:0	4	;
water	43:4	0:0	2	uid_found
op	43:14	0:0	2	=
water	43:16	0:0	2	0
water	43:17	0:0	2	;
water	44:4	0:0	2	frame_size
op	44:15	0:0	2	=
water	44:17	0:0	2	pkt
op	44:20	0:0	2	->
water	44:22	0:0	2	size
op	44:27	0:0	2	+
water	44:29	0:0	2	extra_size
water	44:39	0:0	2	;
for	45:4	53:4	2	(i = 0 ;i < mxf_h264_num_codec_uls;i ++)
forinit	45:9	45:14	3	i = 0 ;
water	45:9	0:0	4	i
op	45:11	0:0	4	=
water	45:13	0:0	4	0
water	45:14	0:0	4	;
cond	45:16	45:20	3	i < mxf_h264_num_codec_uls
water	45:16	0:0	4	i
op	45:18	0:0	4	<
water	45:20	0:0	4	mxf_h264_num_codec_uls
forexpr	45:44	45:45	3	i ++
water	45:44	0:0	4	i
op	45:45	0:0	4	++
stmts	45:49	53:4	3	
water	45:49	0:0	4	{
if	46:8	49:8	4	(frame_size == mxf_h264_codec_uls [ i ] . frame_size && sc -> interlaced == mxf_h264_codec_uls [ i ] . interlaced)
cond	46:12	46:102	5	frame_size == mxf_h264_codec_uls [ i ] . frame_size && sc -> interlaced == mxf_h264_codec_uls [ i ] . interlaced
water	46:12	0:0	6	frame_size
op	46:23	0:0	6	==
water	46:26	0:0	6	mxf_h264_codec_uls
op	46:44	0:0	6	[
water	46:45	0:0	6	i
op	46:46	0:0	6	]
op	46:47	0:0	6	.
water	46:48	0:0	6	frame_size
op	46:59	0:0	6	&&
water	46:62	0:0	6	sc
op	46:64	0:0	6	->
water	46:66	0:0	6	interlaced
op	46:77	0:0	6	==
water	46:80	0:0	6	mxf_h264_codec_uls
op	46:98	0:0	6	[
water	46:99	0:0	6	i
op	46:100	0:0	6	]
op	46:101	0:0	6	.
water	46:102	0:0	6	interlaced
stmts	46:114	49:8	5	
water	46:114	0:0	6	{
water	47:12	0:0	6	sc
op	47:14	0:0	6	->
water	47:16	0:0	6	codec_ul
op	47:25	0:0	6	=
op	47:27	0:0	6	&
water	47:28	0:0	6	mxf_h264_codec_uls
op	47:46	0:0	6	[
water	47:47	0:0	6	i
op	47:48	0:0	6	]
op	47:49	0:0	6	.
water	47:50	0:0	6	uid
water	47:53	0:0	6	;
return	48:12	48:20	6	1
water	48:19	0:0	7	1
water	49:8	0:0	6	}
else	49:10	52:8	4
stmts	49:15	52:8	5	
if	49:15	52:8	6	(st -> codec -> profile == mxf_h264_codec_uls [ i ] . profile)
cond	49:19	49:63	7	st -> codec -> profile == mxf_h264_codec_uls [ i ] . profile
water	49:19	0:0	8	st
op	49:21	0:0	8	->
water	49:23	0:0	8	codec
op	49:28	0:0	8	->
water	49:30	0:0	8	profile
op	49:38	0:0	8	==
water	49:41	0:0	8	mxf_h264_codec_uls
op	49:59	0:0	8	[
water	49:60	0:0	8	i
op	49:61	0:0	8	]
op	49:62	0:0	8	.
water	49:63	0:0	8	profile
stmts	49:72	52:8	7	
water	49:72	0:0	8	{
water	50:12	0:0	8	sc
op	50:14	0:0	8	->
water	50:16	0:0	8	codec_ul
op	50:25	0:0	8	=
op	50:27	0:0	8	&
water	50:28	0:0	8	mxf_h264_codec_uls
op	50:46	0:0	8	[
water	50:47	0:0	8	i
op	50:48	0:0	8	]
op	50:49	0:0	8	.
water	50:50	0:0	8	uid
water	50:53	0:0	8	;
water	51:12	0:0	8	uid_found
op	51:22	0:0	8	=
water	51:24	0:0	8	1
water	51:25	0:0	8	;
water	52:8	0:0	8	}
water	53:4	0:0	4	}
if	54:4	57:4	2	(! uid_found)
cond	54:8	54:9	3	! uid_found
op	54:8	0:0	4	!
water	54:9	0:0	4	uid_found
stmts	54:20	57:4	3	
water	54:20	0:0	4	{
call	55:8	55:67	4	av_log
arg	55:15	55:16	5	s
water	55:15	0:0	6	s
arg	55:18	55:30	5	AV_LOG_ERROR
water	55:18	0:0	6	AV_LOG_ERROR
arg	55:32	55:67	5	"AVC Intra 50/100 supported only\n"
water	55:32	0:0	6	"AVC Intra 50/100 supported only\n"
water	55:68	0:0	4	;
return	56:8	56:16	4	0
water	56:15	0:0	5	0
water	57:4	0:0	4	}
return	58:4	58:12	2	1
water	58:11	0:0	3	1
