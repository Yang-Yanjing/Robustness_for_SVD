func	1:0	54:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:31	2	char *	argv[]
stmnts	0:0	53:12	1	
decl	3:4	3:14	2	FILE	*f[2]
decl	4:4	4:15	2	int	len
op	4:12	0:0	2	=
water	4:14	0:0	2	1
decl	5:4	5:49	2	int	shift_first
op	5:19	0:0	2	=
water	5:21	0:0	2	argc
op	5:26	0:0	2	<
water	5:28	0:0	2	5
water	5:30	0:0	2	?
water	5:32	0:0	2	0
water	5:34	0:0	2	:
call	5:36	5:48	3	atoi
arg	5:41	5:48	4	argv[4]
water	5:41	0:0	5	argv
op	5:45	0:0	5	[
water	5:46	0:0	5	4
op	5:47	0:0	5	]
decl	6:4	6:49	2	int	skip_bytes
op	6:19	0:0	2	=
water	6:21	0:0	2	argc
op	6:26	0:0	2	<
water	6:28	0:0	2	6
water	6:30	0:0	2	?
water	6:32	0:0	2	0
water	6:34	0:0	2	:
call	6:36	6:48	3	atoi
arg	6:41	6:48	4	argv[5]
water	6:41	0:0	5	argv
op	6:45	0:0	5	[
water	6:46	0:0	5	5
op	6:47	0:0	5	]
decl	7:4	7:65	2	int	shift_last
op	7:19	0:0	2	=
water	7:21	0:0	2	shift_first
op	7:33	0:0	2	+
water	7:35	0:0	2	(
water	7:36	0:0	2	argc
op	7:41	0:0	2	<
water	7:43	0:0	2	7
water	7:45	0:0	2	?
water	7:47	0:0	2	0
water	7:49	0:0	2	:
call	7:51	7:63	3	atoi
arg	7:56	7:63	4	argv[6]
water	7:56	0:0	5	argv
op	7:60	0:0	5	[
water	7:61	0:0	5	6
op	7:62	0:0	5	]
water	7:64	0:0	2	)
decl	8:4	8:13	2	int	shift
decl	9:4	9:23	2	int	max_psnr
op	9:19	0:0	2	=
op	9:21	0:0	2	-
water	9:22	0:0	2	1
decl	10:4	10:26	2	int	max_psnr_shift
op	10:23	0:0	2	=
water	10:25	0:0	2	0
if	11:4	12:47	2	(shift_last > shift_first)
cond	11:8	11:21	3	shift_last > shift_first
water	11:8	0:0	4	shift_last
op	11:19	0:0	4	>
water	11:21	0:0	4	shift_first
stmts	12:8	12:47	3	
water	12:8	0:0	4	shift_first
op	12:20	0:0	4	-=
water	12:23	0:0	4	shift_last
op	12:34	0:0	4	-
water	12:36	0:0	4	shift_first
water	12:47	0:0	4	;
if	13:4	30:4	2	(argc > 3)
cond	13:8	13:15	3	argc > 3
water	13:8	0:0	4	argc
op	13:13	0:0	4	>
water	13:15	0:0	4	3
stmts	13:18	30:4	3	
water	13:18	0:0	4	{
if	14:8	16:8	4	(!strcmp (argv [ 3 ] ,"u8" ))
cond	14:12	14:33	5	!strcmp (argv [ 3 ] ,"u8" )
op	14:12	0:0	6	!
call	14:13	14:33	6	strcmp
arg	14:20	14:27	7	argv[3]
water	14:20	0:0	8	argv
op	14:24	0:0	8	[
water	14:25	0:0	8	3
op	14:26	0:0	8	]
arg	14:29	14:33	7	"u8"
water	14:29	0:0	8	"u8"
stmts	14:36	16:8	5	
water	14:36	0:0	6	{
water	15:12	0:0	6	len
op	15:16	0:0	6	=
water	15:18	0:0	6	1
water	15:19	0:0	6	;
water	16:8	0:0	6	}
else	16:10	18:8	4
stmts	16:15	18:8	5	
if	16:15	18:8	6	(!strcmp (argv [ 3 ] ,"s16" ))
cond	16:19	16:41	7	!strcmp (argv [ 3 ] ,"s16" )
op	16:19	0:0	8	!
call	16:20	16:41	8	strcmp
arg	16:27	16:34	9	argv[3]
water	16:27	0:0	10	argv
op	16:31	0:0	10	[
water	16:32	0:0	10	3
op	16:33	0:0	10	]
arg	16:36	16:41	9	"s16"
water	16:36	0:0	10	"s16"
stmts	16:44	18:8	7	
water	16:44	0:0	8	{
water	17:12	0:0	8	len
op	17:16	0:0	8	=
water	17:18	0:0	8	2
water	17:19	0:0	8	;
water	18:8	0:0	8	}
else	18:10	20:8	4
stmts	18:15	20:8	5	
if	18:15	20:8	6	(!strcmp (argv [ 3 ] ,"f32" ))
cond	18:19	18:41	7	!strcmp (argv [ 3 ] ,"f32" )
op	18:19	0:0	8	!
call	18:20	18:41	8	strcmp
arg	18:27	18:34	9	argv[3]
water	18:27	0:0	10	argv
op	18:31	0:0	10	[
water	18:32	0:0	10	3
op	18:33	0:0	10	]
arg	18:36	18:41	9	"f32"
water	18:36	0:0	10	"f32"
stmts	18:44	20:8	7	
water	18:44	0:0	8	{
water	19:12	0:0	8	len
op	19:16	0:0	8	=
water	19:18	0:0	8	4
water	19:19	0:0	8	;
water	20:8	0:0	8	}
else	20:10	22:8	4
stmts	20:15	22:8	5	
if	20:15	22:8	6	(!strcmp (argv [ 3 ] ,"f64" ))
cond	20:19	20:41	7	!strcmp (argv [ 3 ] ,"f64" )
op	20:19	0:0	8	!
call	20:20	20:41	8	strcmp
arg	20:27	20:34	9	argv[3]
water	20:27	0:0	10	argv
op	20:31	0:0	10	[
water	20:32	0:0	10	3
op	20:33	0:0	10	]
arg	20:36	20:41	9	"f64"
water	20:36	0:0	10	"f64"
stmts	20:44	22:8	7	
water	20:44	0:0	8	{
water	21:12	0:0	8	len
op	21:16	0:0	8	=
water	21:18	0:0	8	8
water	21:19	0:0	8	;
water	22:8	0:0	8	}
else	22:10	29:8	4
stmts	22:15	29:8	5	
water	22:15	0:0	6	{
decl	23:12	23:21	6	char	*end
water	24:12	0:0	6	len
op	24:16	0:0	6	=
call	24:18	24:41	6	strtol
arg	24:25	24:32	7	argv[3]
water	24:25	0:0	8	argv
op	24:29	0:0	8	[
water	24:30	0:0	8	3
op	24:31	0:0	8	]
arg	24:34	24:38	7	&end
op	24:34	0:0	8	&
water	24:35	0:0	8	end
arg	24:40	24:41	7	0
water	24:40	0:0	8	0
water	24:42	0:0	6	;
if	25:12	28:12	6	(* end || len < 1 || len > 2)
cond	25:16	25:41	7	* end || len < 1 || len > 2
op	25:16	0:0	8	*
water	25:17	0:0	8	end
op	25:21	0:0	8	||
water	25:24	0:0	8	len
op	25:28	0:0	8	<
water	25:30	0:0	8	1
op	25:32	0:0	8	||
water	25:35	0:0	8	len
op	25:39	0:0	8	>
water	25:41	0:0	8	2
stmts	25:44	28:12	7	
water	25:44	0:0	8	{
call	26:16	26:104	8	fprintf
arg	26:24	26:30	9	stderr
water	26:24	0:0	10	stderr
arg	26:32	26:95	9	"Unsupported sample format: %s\nSupported: u8, s16, f32, f64\n"
water	26:32	0:0	10	"Unsupported sample format: %s\nSupported: u8, s16, f32, f64\n"
arg	26:97	26:104	9	argv[3]
water	26:97	0:0	10	argv
op	26:101	0:0	10	[
water	26:102	0:0	10	3
op	26:103	0:0	10	]
water	26:105	0:0	8	;
return	27:16	27:24	8	1
water	27:23	0:0	9	1
water	28:12	0:0	8	}
water	29:8	0:0	6	}
water	30:4	0:0	4	}
if	31:4	35:4	2	(argc < 3)
cond	31:8	31:15	3	argc < 3
water	31:8	0:0	4	argc
op	31:13	0:0	4	<
water	31:15	0:0	4	3
stmts	31:18	35:4	3	
water	31:18	0:0	4	{
call	32:8	32:121	4	printf
arg	32:15	32:121	5	"tiny_psnr <file1> <file2> [<elem size>|u8|s16|f32|f64 [<shift> [<skip bytes> [<shift search range>]]]]\n"
water	32:15	0:0	6	"tiny_psnr <file1> <file2> [<elem size>|u8|s16|f32|f64 [<shift> [<skip bytes> [<shift search range>]]]]\n"
water	32:122	0:0	4	;
call	33:8	33:57	4	printf
arg	33:15	33:57	5	"WAV headers are skipped automatically.\n"
water	33:15	0:0	6	"WAV headers are skipped automatically.\n"
water	33:58	0:0	4	;
return	34:8	34:16	4	1
water	34:15	0:0	5	1
water	35:4	0:0	4	}
water	36:4	0:0	2	f
op	36:5	0:0	2	[
water	36:6	0:0	2	0
op	36:7	0:0	2	]
op	36:9	0:0	2	=
call	36:11	36:30	2	fopen
arg	36:17	36:24	3	argv[1]
water	36:17	0:0	4	argv
op	36:21	0:0	4	[
water	36:22	0:0	4	1
op	36:23	0:0	4	]
arg	36:26	36:30	3	"rb"
water	36:26	0:0	4	"rb"
water	36:31	0:0	2	;
water	37:4	0:0	2	f
op	37:5	0:0	2	[
water	37:6	0:0	2	1
op	37:7	0:0	2	]
op	37:9	0:0	2	=
call	37:11	37:30	2	fopen
arg	37:17	37:24	3	argv[2]
water	37:17	0:0	4	argv
op	37:21	0:0	4	[
water	37:22	0:0	4	2
op	37:23	0:0	4	]
arg	37:26	37:30	3	"rb"
water	37:26	0:0	4	"rb"
water	37:31	0:0	2	;
if	38:4	41:4	2	(! f [ 0 ] || ! f [ 1 ])
cond	38:8	38:21	3	! f [ 0 ] || ! f [ 1 ]
op	38:8	0:0	4	!
water	38:9	0:0	4	f
op	38:10	0:0	4	[
water	38:11	0:0	4	0
op	38:12	0:0	4	]
op	38:14	0:0	4	||
op	38:17	0:0	4	!
water	38:18	0:0	4	f
op	38:19	0:0	4	[
water	38:20	0:0	4	1
op	38:21	0:0	4	]
stmts	38:24	41:4	3	
water	38:24	0:0	4	{
call	39:8	39:55	4	fprintf
arg	39:16	39:22	5	stderr
water	39:16	0:0	6	stderr
arg	39:24	39:55	5	"Could not open input files.\n"
water	39:24	0:0	6	"Could not open input files.\n"
water	39:56	0:0	4	;
return	40:8	40:16	4	1
water	40:15	0:0	5	1
water	41:4	0:0	4	}
for	42:4	48:4	2	(shift = shift_first ;shift <= shift_last;shift ++)
forinit	42:9	42:28	3	shift = shift_first ;
water	42:9	0:0	4	shift
op	42:15	0:0	4	=
water	42:17	0:0	4	shift_first
water	42:28	0:0	4	;
cond	42:30	42:39	3	shift <= shift_last
water	42:30	0:0	4	shift
op	42:36	0:0	4	<=
water	42:39	0:0	4	shift_last
forexpr	42:51	42:56	3	shift ++
water	42:51	0:0	4	shift
op	42:56	0:0	4	++
stmts	42:60	48:4	3	
water	42:60	0:0	4	{
decl	43:8	43:54	4	int	psnr
op	43:17	0:0	4	=
call	43:19	43:53	5	run_psnr
arg	43:28	43:29	6	f
water	43:28	0:0	7	f
arg	43:31	43:34	6	len
water	43:31	0:0	7	len
arg	43:36	43:41	6	shift
water	43:36	0:0	7	shift
arg	43:43	43:53	6	skip_bytes
water	43:43	0:0	7	skip_bytes
if	44:8	47:8	4	(psnr > max_psnr || ( shift < 0 && psnr == max_psnr ))
cond	44:12	44:61	5	psnr > max_psnr || ( shift < 0 && psnr == max_psnr )
water	44:12	0:0	6	psnr
op	44:17	0:0	6	>
water	44:19	0:0	6	max_psnr
op	44:28	0:0	6	||
water	44:31	0:0	6	(
water	44:32	0:0	6	shift
op	44:38	0:0	6	<
water	44:40	0:0	6	0
op	44:42	0:0	6	&&
water	44:45	0:0	6	psnr
op	44:50	0:0	6	==
water	44:53	0:0	6	max_psnr
water	44:61	0:0	6	)
stmts	44:64	47:8	5	
water	44:64	0:0	6	{
water	45:12	0:0	6	max_psnr
op	45:21	0:0	6	=
water	45:23	0:0	6	psnr
water	45:27	0:0	6	;
water	46:12	0:0	6	max_psnr_shift
op	46:27	0:0	6	=
water	46:29	0:0	6	shift
water	46:34	0:0	6	;
water	47:8	0:0	6	}
water	48:4	0:0	4	}
if	49:4	50:16	2	(max_psnr < 0)
cond	49:8	49:19	3	max_psnr < 0
water	49:8	0:0	4	max_psnr
op	49:17	0:0	4	<
water	49:19	0:0	4	0
stmts	50:8	50:16	3	
return	50:8	50:16	4	2
water	50:15	0:0	5	2
if	51:4	52:112	2	(shift_last > shift_first)
cond	51:8	51:21	3	shift_last > shift_first
water	51:8	0:0	4	shift_last
op	51:19	0:0	4	>
water	51:21	0:0	4	shift_first
stmts	52:8	52:112	3	
call	52:8	52:111	4	printf
arg	52:15	52:53	5	"Best PSNR is %3d.%02d for shift %i\n"
water	52:15	0:0	6	"Best PSNR is %3d.%02d for shift %i\n"
arg	52:55	52:74	5	(int)(max_psnr/F)
call	52:55	52:73	6	(int)
arg	52:61	52:73	7	max_psnr/F
water	52:61	0:0	8	max_psnr
op	52:70	0:0	8	/
water	52:72	0:0	8	F
arg	52:76	52:95	5	(int)(max_psnr%F)
call	52:76	52:94	6	(int)
arg	52:82	52:94	7	max_psnr%F
water	52:82	0:0	8	max_psnr
op	52:91	0:0	8	%
water	52:93	0:0	8	F
arg	52:97	52:111	5	max_psnr_shift
water	52:97	0:0	6	max_psnr_shift
water	52:112	0:0	4	;
return	53:4	53:12	2	0
water	53:11	0:0	3	0
