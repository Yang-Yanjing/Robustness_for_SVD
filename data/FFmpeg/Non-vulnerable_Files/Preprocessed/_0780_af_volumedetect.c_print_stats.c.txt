func	1:0	38:0	0	static void	print_stats
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	37:4	1	
decl	3:4	3:36	2	VolDetectContext	*vd
op	3:25	0:0	2	=
water	3:27	0:0	2	ctx
op	3:30	0:0	2	->
water	3:32	0:0	2	priv
decl	4:4	4:28	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:28	2	int	max_volume
water	4:21	0:0	2	,
decl	4:4	4:28	2	int	shift
decl	5:4	5:69	2	uint64_t	nb_samples
op	5:24	0:0	2	=
water	5:26	0:0	2	0
water	5:27	0:0	2	,
decl	5:4	5:69	2	uint64_t	power
op	5:35	0:0	2	=
water	5:37	0:0	2	0
water	5:38	0:0	2	,
decl	5:4	5:69	2	uint64_t	nb_samples_shift
op	5:57	0:0	2	=
water	5:59	0:0	2	0
water	5:60	0:0	2	,
decl	5:4	5:69	2	uint64_t	sum
op	5:66	0:0	2	=
water	5:68	0:0	2	0
decl	6:4	6:39	2	uint64_t	histdb[MAX_DB+1]
op	6:32	0:0	2	=
water	6:34	0:0	2	{
water	6:36	0:0	2	0
water	6:38	0:0	2	}
for	7:4	8:38	2	(i = 0 ;i < 0 x10000;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:21	3	i < 0 x10000
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	0
water	7:21	0:0	4	x10000
forexpr	7:29	7:30	3	i ++
water	7:29	0:0	4	i
op	7:30	0:0	4	++
stmts	8:8	8:38	3	
water	8:8	0:0	4	nb_samples
op	8:19	0:0	4	+=
water	8:22	0:0	4	vd
op	8:24	0:0	4	->
water	8:26	0:0	4	histogram
op	8:35	0:0	4	[
water	8:36	0:0	4	i
op	8:37	0:0	4	]
water	8:38	0:0	4	;
call	9:4	9:65	2	av_log
arg	9:11	9:14	3	ctx
water	9:11	0:0	4	ctx
arg	9:16	9:27	3	AV_LOG_INFO
water	9:16	0:0	4	AV_LOG_INFO
arg	9:29	9:53	3	"n_samples: %"PRId64"\n"
water	9:29	0:0	4	"n_samples: %"
water	9:43	0:0	4	PRId64
water	9:49	0:0	4	"\n"
arg	9:55	9:65	3	nb_samples
water	9:55	0:0	4	nb_samples
water	9:66	0:0	2	;
if	10:4	11:14	2	(! nb_samples)
cond	10:8	10:9	3	! nb_samples
op	10:8	0:0	4	!
water	10:9	0:0	4	nb_samples
stmts	11:8	11:14	3	
return	11:8	11:14	4	
water	16:4	0:0	2	shift
op	16:10	0:0	2	=
call	16:12	16:36	2	av_log2
arg	16:20	16:36	3	nb_samples>>33
water	16:20	0:0	4	nb_samples
op	16:31	0:0	4	>>
water	16:34	0:0	4	33
water	16:37	0:0	2	;
for	17:4	20:4	2	(i = 0 ;i < 0 x10000;i ++)
forinit	17:9	17:14	3	i = 0 ;
water	17:9	0:0	4	i
op	17:11	0:0	4	=
water	17:13	0:0	4	0
water	17:14	0:0	4	;
cond	17:16	17:21	3	i < 0 x10000
water	17:16	0:0	4	i
op	17:18	0:0	4	<
water	17:20	0:0	4	0
water	17:21	0:0	4	x10000
forexpr	17:29	17:30	3	i ++
water	17:29	0:0	4	i
op	17:30	0:0	4	++
stmts	17:34	20:4	3	
water	17:34	0:0	4	{
water	18:8	0:0	4	nb_samples_shift
op	18:25	0:0	4	+=
water	18:28	0:0	4	vd
op	18:30	0:0	4	->
water	18:32	0:0	4	histogram
op	18:41	0:0	4	[
water	18:42	0:0	4	i
op	18:43	0:0	4	]
op	18:45	0:0	4	>>
water	18:48	0:0	4	shift
water	18:53	0:0	4	;
water	19:8	0:0	4	power
op	19:14	0:0	4	+=
water	19:17	0:0	4	(
water	19:18	0:0	4	i
op	19:20	0:0	4	-
water	19:22	0:0	4	0
water	19:23	0:0	4	x8000
water	19:28	0:0	4	)
op	19:30	0:0	4	*
water	19:32	0:0	4	(
water	19:33	0:0	4	i
op	19:35	0:0	4	-
water	19:37	0:0	4	0
water	19:38	0:0	4	x8000
water	19:43	0:0	4	)
op	19:45	0:0	4	*
water	19:47	0:0	4	(
water	19:48	0:0	4	vd
op	19:50	0:0	4	->
water	19:52	0:0	4	histogram
op	19:61	0:0	4	[
water	19:62	0:0	4	i
op	19:63	0:0	4	]
op	19:65	0:0	4	>>
water	19:68	0:0	4	shift
water	19:73	0:0	4	)
water	19:74	0:0	4	;
water	20:4	0:0	4	}
if	21:4	22:14	2	(! nb_samples_shift)
cond	21:8	21:9	3	! nb_samples_shift
op	21:8	0:0	4	!
water	21:9	0:0	4	nb_samples_shift
stmts	22:8	22:14	3	
return	22:8	22:14	4	
water	23:4	0:0	2	power
op	23:10	0:0	2	=
water	23:12	0:0	2	(
water	23:13	0:0	2	power
op	23:19	0:0	2	+
water	23:21	0:0	2	nb_samples_shift
op	23:38	0:0	2	/
water	23:40	0:0	2	2
water	23:41	0:0	2	)
op	23:43	0:0	2	/
water	23:45	0:0	2	nb_samples_shift
water	23:61	0:0	2	;
call	24:4	24:39	2	av_assert0
arg	24:15	24:39	3	power<=0x8000*0x8000
water	24:15	0:0	4	power
op	24:21	0:0	4	<=
water	24:24	0:0	4	0
water	24:25	0:0	4	x8000
op	24:31	0:0	4	*
water	24:33	0:0	4	0
water	24:34	0:0	4	x8000
water	24:40	0:0	2	;
call	25:4	25:68	2	av_log
arg	25:11	25:14	3	ctx
water	25:11	0:0	4	ctx
arg	25:16	25:27	3	AV_LOG_INFO
water	25:16	0:0	4	AV_LOG_INFO
arg	25:29	25:53	3	"mean_volume: %.1f dB\n"
water	25:29	0:0	4	"mean_volume: %.1f dB\n"
arg	25:55	25:68	3	-logdb(power)
op	25:55	0:0	4	-
call	25:56	25:67	4	logdb
arg	25:62	25:67	5	power
water	25:62	0:0	6	power
water	25:69	0:0	2	;
water	26:4	0:0	2	max_volume
op	26:15	0:0	2	=
water	26:17	0:0	2	0
water	26:18	0:0	2	x8000
water	26:23	0:0	2	;
while	27:4	29:20	2	(max_volume > 0 && ! vd -> histogram [ 0 x8000 + max_volume ] && ! vd -> histogram [ 0 x8000 - max_volume ])
cond	27:11	28:63	3	max_volume > 0 && ! vd -> histogram [ 0 x8000 + max_volume ] && ! vd -> histogram [ 0 x8000 - max_volume ]
water	27:11	0:0	4	max_volume
op	27:22	0:0	4	>
water	27:24	0:0	4	0
op	27:26	0:0	4	&&
op	27:29	0:0	4	!
water	27:30	0:0	4	vd
op	27:32	0:0	4	->
water	27:34	0:0	4	histogram
op	27:43	0:0	4	[
water	27:44	0:0	4	0
water	27:45	0:0	4	x8000
op	27:51	0:0	4	+
water	27:53	0:0	4	max_volume
op	27:63	0:0	4	]
op	27:65	0:0	4	&&
op	28:29	0:0	4	!
water	28:30	0:0	4	vd
op	28:32	0:0	4	->
water	28:34	0:0	4	histogram
op	28:43	0:0	4	[
water	28:44	0:0	4	0
water	28:45	0:0	4	x8000
op	28:51	0:0	4	-
water	28:53	0:0	4	max_volume
op	28:63	0:0	4	]
stmts	29:8	29:20	3	
water	29:8	0:0	4	max_volume
op	29:18	0:0	4	--
water	29:20	0:0	4	;
call	30:4	30:85	2	av_log
arg	30:11	30:14	3	ctx
water	30:11	0:0	4	ctx
arg	30:16	30:27	3	AV_LOG_INFO
water	30:16	0:0	4	AV_LOG_INFO
arg	30:29	30:52	3	"max_volume: %.1f dB\n"
water	30:29	0:0	4	"max_volume: %.1f dB\n"
arg	30:54	30:85	3	-logdb(max_volume*max_volume)
op	30:54	0:0	4	-
call	30:55	30:84	4	logdb
arg	30:61	30:84	5	max_volume*max_volume
water	30:61	0:0	6	max_volume
op	30:72	0:0	6	*
water	30:74	0:0	6	max_volume
water	30:86	0:0	2	;
for	31:4	32:75	2	(i = 0 ;i < 0 x10000;i ++)
forinit	31:9	31:14	3	i = 0 ;
water	31:9	0:0	4	i
op	31:11	0:0	4	=
water	31:13	0:0	4	0
water	31:14	0:0	4	;
cond	31:16	31:21	3	i < 0 x10000
water	31:16	0:0	4	i
op	31:18	0:0	4	<
water	31:20	0:0	4	0
water	31:21	0:0	4	x10000
forexpr	31:29	31:30	3	i ++
water	31:29	0:0	4	i
op	31:30	0:0	4	++
stmts	32:8	32:75	3	
water	32:8	0:0	4	histdb
op	32:14	0:0	4	[
water	32:15	0:0	4	(
water	32:16	0:0	4	int
water	32:19	0:0	4	)
call	32:20	32:53	4	logdb
arg	32:26	32:53	5	(i-0x8000)*(i-0x8000)
water	32:26	0:0	6	(
water	32:27	0:0	6	i
op	32:29	0:0	6	-
water	32:31	0:0	6	0
water	32:32	0:0	6	x8000
water	32:37	0:0	6	)
op	32:39	0:0	6	*
water	32:41	0:0	6	(
water	32:42	0:0	6	i
op	32:44	0:0	6	-
water	32:46	0:0	6	0
water	32:47	0:0	6	x8000
water	32:52	0:0	6	)
op	32:54	0:0	4	]
op	32:56	0:0	4	+=
water	32:59	0:0	4	vd
op	32:61	0:0	4	->
water	32:63	0:0	4	histogram
op	32:72	0:0	4	[
water	32:73	0:0	4	i
op	32:74	0:0	4	]
water	32:75	0:0	4	;
for	33:4	33:47	2	(i = 0 ;i <= MAX_DB && ! histdb [ i ];i ++)
forinit	33:9	33:14	3	i = 0 ;
water	33:9	0:0	4	i
op	33:11	0:0	4	=
water	33:13	0:0	4	0
water	33:14	0:0	4	;
cond	33:16	33:40	3	i <= MAX_DB && ! histdb [ i ]
water	33:16	0:0	4	i
op	33:18	0:0	4	<=
water	33:21	0:0	4	MAX_DB
op	33:28	0:0	4	&&
op	33:31	0:0	4	!
water	33:32	0:0	4	histdb
op	33:38	0:0	4	[
water	33:39	0:0	4	i
op	33:40	0:0	4	]
forexpr	33:43	33:44	3	i ++
water	33:43	0:0	4	i
op	33:44	0:0	4	++
stmts	33:47	33:47	3	
water	33:47	0:0	4	;
for	34:4	37:4	2	(;i <= MAX_DB && sum < nb_samples / 1000;i ++)
forinit	34:9	34:9	3	;
water	34:9	0:0	4	;
cond	34:11	34:45	3	i <= MAX_DB && sum < nb_samples / 1000
water	34:11	0:0	4	i
op	34:13	0:0	4	<=
water	34:16	0:0	4	MAX_DB
op	34:23	0:0	4	&&
water	34:26	0:0	4	sum
op	34:30	0:0	4	<
water	34:32	0:0	4	nb_samples
op	34:43	0:0	4	/
water	34:45	0:0	4	1000
forexpr	34:51	34:52	3	i ++
water	34:51	0:0	4	i
op	34:52	0:0	4	++
stmts	34:56	37:4	3	
water	34:56	0:0	4	{
call	35:8	35:76	4	av_log
arg	35:15	35:18	5	ctx
water	35:15	0:0	6	ctx
arg	35:20	35:31	5	AV_LOG_INFO
water	35:20	0:0	6	AV_LOG_INFO
arg	35:33	35:62	5	"histogram_%ddb: %"PRId64"\n"
water	35:33	0:0	6	"histogram_%ddb: %"
water	35:52	0:0	6	PRId64
water	35:58	0:0	6	"\n"
arg	35:64	35:65	5	i
water	35:64	0:0	6	i
arg	35:67	35:76	5	histdb[i]
water	35:67	0:0	6	histdb
op	35:73	0:0	6	[
water	35:74	0:0	6	i
op	35:75	0:0	6	]
water	35:77	0:0	4	;
water	36:8	0:0	4	sum
op	36:12	0:0	4	+=
water	36:15	0:0	4	histdb
op	36:21	0:0	4	[
water	36:22	0:0	4	i
op	36:23	0:0	4	]
water	36:24	0:0	4	;
water	37:4	0:0	4	}
