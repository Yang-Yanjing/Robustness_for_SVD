func	1:0	25:0	0	void	av_sha512_update
params	1:21	0:0	1	
param	1:22	1:35	2	AVSHA512 *	ctx
param	1:37	1:56	2	const uint8_t *	data
param	1:58	1:74	2	unsigned int	len
stmnts	0:0	23:46	1	
decl	3:4	3:21	2	unsigned int	i
water	3:18	0:0	2	,
decl	3:4	3:21	2	unsigned int	j
water	4:4	0:0	2	j
op	4:6	0:0	2	=
water	4:8	0:0	2	ctx
op	4:11	0:0	2	->
water	4:13	0:0	2	count
op	4:19	0:0	2	&
water	4:21	0:0	2	127
water	4:24	0:0	2	;
water	5:4	0:0	2	ctx
op	5:7	0:0	2	->
water	5:9	0:0	2	count
op	5:15	0:0	2	+=
water	5:18	0:0	2	len
water	5:21	0:0	2	;
for	7:4	13:4	2	(i = 0 ;i < len;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:20	3	i < len
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	len
forexpr	7:25	7:26	3	i ++
water	7:25	0:0	4	i
op	7:26	0:0	4	++
stmts	7:30	13:4	3	
water	7:30	0:0	4	{
water	8:8	0:0	4	ctx
op	8:11	0:0	4	->
water	8:13	0:0	4	buffer
op	8:19	0:0	4	[
water	8:20	0:0	4	j
op	8:21	0:0	4	++
op	8:23	0:0	4	]
op	8:25	0:0	4	=
water	8:27	0:0	4	data
op	8:31	0:0	4	[
water	8:32	0:0	4	i
op	8:33	0:0	4	]
water	8:34	0:0	4	;
if	9:8	12:8	4	(128 == j)
cond	9:12	9:19	5	128 == j
water	9:12	0:0	6	128
op	9:16	0:0	6	==
water	9:19	0:0	6	j
stmts	9:22	12:8	5	
water	9:22	0:0	6	{
call	10:12	10:52	6	sha512_transform
arg	10:29	10:39	7	ctx->state
water	10:29	0:0	8	ctx
op	10:32	0:0	8	->
water	10:34	0:0	8	state
arg	10:41	10:52	7	ctx->buffer
water	10:41	0:0	8	ctx
op	10:44	0:0	8	->
water	10:46	0:0	8	buffer
water	10:53	0:0	6	;
water	11:12	0:0	6	j
op	11:14	0:0	6	=
water	11:16	0:0	6	0
water	11:17	0:0	6	;
water	12:8	0:0	6	}
water	13:4	0:0	4	}
if	15:4	21:4	2	(( j + len ) > 127)
cond	15:8	15:20	3	( j + len ) > 127
water	15:8	0:0	4	(
water	15:9	0:0	4	j
op	15:11	0:0	4	+
water	15:13	0:0	4	len
water	15:16	0:0	4	)
op	15:18	0:0	4	>
water	15:20	0:0	4	127
stmts	15:25	21:4	3	
water	15:25	0:0	4	{
call	16:8	16:51	4	memcpy
arg	16:15	16:30	5	&ctx->buffer[j]
op	16:15	0:0	6	&
water	16:16	0:0	6	ctx
op	16:19	0:0	6	->
water	16:21	0:0	6	buffer
op	16:27	0:0	6	[
water	16:28	0:0	6	j
op	16:29	0:0	6	]
arg	16:32	16:36	5	data
water	16:32	0:0	6	data
arg	16:38	16:51	5	(i=128-j)
water	16:38	0:0	6	(
water	16:39	0:0	6	i
op	16:41	0:0	6	=
water	16:43	0:0	6	128
op	16:47	0:0	6	-
water	16:49	0:0	6	j
water	16:50	0:0	6	)
water	16:52	0:0	4	;
call	17:8	17:48	4	sha512_transform
arg	17:25	17:35	5	ctx->state
water	17:25	0:0	6	ctx
op	17:28	0:0	6	->
water	17:30	0:0	6	state
arg	17:37	17:48	5	ctx->buffer
water	17:37	0:0	6	ctx
op	17:40	0:0	6	->
water	17:42	0:0	6	buffer
water	17:49	0:0	4	;
for	18:8	19:50	4	(;i + 127 < len;i += 128)
forinit	18:13	18:13	5	;
water	18:13	0:0	6	;
cond	18:15	18:25	5	i + 127 < len
water	18:15	0:0	6	i
op	18:17	0:0	6	+
water	18:19	0:0	6	127
op	18:23	0:0	6	<
water	18:25	0:0	6	len
forexpr	18:30	18:35	5	i += 128
water	18:30	0:0	6	i
op	18:32	0:0	6	+=
water	18:35	0:0	6	128
stmts	19:12	19:50	5	
call	19:12	19:49	6	sha512_transform
arg	19:29	19:39	7	ctx->state
water	19:29	0:0	8	ctx
op	19:32	0:0	8	->
water	19:34	0:0	8	state
arg	19:41	19:49	7	&data[i]
op	19:41	0:0	8	&
water	19:42	0:0	8	data
op	19:46	0:0	8	[
water	19:47	0:0	8	i
op	19:48	0:0	8	]
water	19:50	0:0	6	;
water	20:8	0:0	4	j
op	20:10	0:0	4	=
water	20:12	0:0	4	0
water	20:13	0:0	4	;
water	21:4	0:0	4	}
else	21:6	22:13	2
stmts	22:8	22:13	3	
water	22:8	0:0	4	i
op	22:10	0:0	4	=
water	22:12	0:0	4	0
water	22:13	0:0	4	;
call	23:4	23:45	2	memcpy
arg	23:11	23:26	3	&ctx->buffer[j]
op	23:11	0:0	4	&
water	23:12	0:0	4	ctx
op	23:15	0:0	4	->
water	23:17	0:0	4	buffer
op	23:23	0:0	4	[
water	23:24	0:0	4	j
op	23:25	0:0	4	]
arg	23:28	23:36	3	&data[i]
op	23:28	0:0	4	&
water	23:29	0:0	4	data
op	23:33	0:0	4	[
water	23:34	0:0	4	i
op	23:35	0:0	4	]
arg	23:38	23:45	3	len-i
water	23:38	0:0	4	len
op	23:42	0:0	4	-
water	23:44	0:0	4	i
water	23:46	0:0	2	;
