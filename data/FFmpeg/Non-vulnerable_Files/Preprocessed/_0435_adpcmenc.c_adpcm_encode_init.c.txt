func	1:15	83:0	0	int	adpcm_encode_init
params	1:36	0:0	1	
param	1:37	1:58	2	AVCodecContext *	avctx
stmnts	0:0	82:14	1	
decl	3:4	3:44	2	ADPCMEncodeContext	*s
op	3:26	0:0	2	=
water	3:28	0:0	2	avctx
op	3:33	0:0	2	->
water	3:35	0:0	2	priv_data
decl	4:4	4:22	2	uint8_t	*extradata
decl	5:4	5:9	2	int	i
decl	6:4	6:29	2	int	ret
op	6:12	0:0	2	=
call	6:14	6:28	3	AVERROR
arg	6:22	6:28	4	ENOMEM
water	6:22	0:0	5	ENOMEM
if	7:4	10:4	2	(avctx -> channels > 2)
cond	7:8	7:26	3	avctx -> channels > 2
water	7:8	0:0	4	avctx
op	7:13	0:0	4	->
water	7:15	0:0	4	channels
op	7:24	0:0	4	>
water	7:26	0:0	4	2
stmts	7:29	10:4	3	
water	7:29	0:0	4	{
call	8:8	8:72	4	av_log
arg	8:15	8:20	5	avctx
water	8:15	0:0	6	avctx
arg	8:22	8:34	5	AV_LOG_ERROR
water	8:22	0:0	6	AV_LOG_ERROR
arg	8:36	8:72	5	"only stereo or mono is supported\n"
water	8:36	0:0	6	"only stereo or mono is supported\n"
water	8:73	0:0	4	;
return	9:8	9:30	4	AVERROR(EINVAL)
call	9:15	9:29	5	AVERROR
arg	9:23	9:29	6	EINVAL
water	9:23	0:0	7	EINVAL
water	10:4	0:0	4	}
if	11:4	14:4	2	(avctx -> trellis && ( unsigned ) avctx -> trellis > 16 U)
cond	11:8	11:55	3	avctx -> trellis && ( unsigned ) avctx -> trellis > 16 U
water	11:8	0:0	4	avctx
op	11:13	0:0	4	->
water	11:15	0:0	4	trellis
op	11:23	0:0	4	&&
water	11:26	0:0	4	(
water	11:27	0:0	4	unsigned
water	11:35	0:0	4	)
water	11:36	0:0	4	avctx
op	11:41	0:0	4	->
water	11:43	0:0	4	trellis
op	11:51	0:0	4	>
water	11:53	0:0	4	16
water	11:55	0:0	4	U
stmts	11:58	14:4	3	
water	11:58	0:0	4	{
call	12:8	12:60	4	av_log
arg	12:15	12:20	5	avctx
water	12:15	0:0	6	avctx
arg	12:22	12:34	5	AV_LOG_ERROR
water	12:22	0:0	6	AV_LOG_ERROR
arg	12:36	12:60	5	"invalid trellis size\n"
water	12:36	0:0	6	"invalid trellis size\n"
water	12:61	0:0	4	;
return	13:8	13:30	4	AVERROR(EINVAL)
call	13:15	13:29	5	AVERROR
arg	13:23	13:29	6	EINVAL
water	13:23	0:0	7	EINVAL
water	14:4	0:0	4	}
if	15:4	26:4	2	(avctx -> trellis)
cond	15:8	15:15	3	avctx -> trellis
water	15:8	0:0	4	avctx
op	15:13	0:0	4	->
water	15:15	0:0	4	trellis
stmts	15:24	26:4	3	
water	15:24	0:0	4	{
decl	16:8	16:43	4	int	frontier
op	16:22	0:0	4	=
water	16:24	0:0	4	1
op	16:26	0:0	4	<<
water	16:29	0:0	4	avctx
op	16:34	0:0	4	->
water	16:36	0:0	4	trellis
decl	17:8	17:51	4	int	max_paths
op	17:22	0:0	4	=
water	17:25	0:0	4	frontier
op	17:34	0:0	4	*
water	17:36	0:0	4	FREEZE_INTERVAL
call	18:8	19:61	4	FF_ALLOC_OR_GOTO
arg	18:25	18:30	5	avctx
water	18:25	0:0	6	avctx
arg	18:32	18:40	5	s->paths
water	18:32	0:0	6	s
op	18:33	0:0	6	->
water	18:35	0:0	6	paths
arg	19:25	19:54	5	max_paths*sizeof(*s->paths)
water	19:25	0:0	6	max_paths
op	19:35	0:0	6	*
op	19:37	0:0	6	sizeof
water	19:43	0:0	6	(
op	19:44	0:0	6	*
water	19:45	0:0	6	s
op	19:46	0:0	6	->
water	19:48	0:0	6	paths
water	19:53	0:0	6	)
arg	19:56	19:61	5	error
water	19:56	0:0	6	error
water	19:62	0:0	4	;
call	20:8	21:68	4	FF_ALLOC_OR_GOTO
arg	20:25	20:30	5	avctx
water	20:25	0:0	6	avctx
arg	20:32	20:43	5	s->node_buf
water	20:32	0:0	6	s
op	20:33	0:0	6	->
water	20:35	0:0	6	node_buf
arg	21:25	21:60	5	2*frontier*sizeof(*s->node_buf)
water	21:25	0:0	6	2
op	21:27	0:0	6	*
water	21:29	0:0	6	frontier
op	21:38	0:0	6	*
op	21:40	0:0	6	sizeof
water	21:46	0:0	6	(
op	21:47	0:0	6	*
water	21:48	0:0	6	s
op	21:49	0:0	6	->
water	21:51	0:0	6	node_buf
water	21:59	0:0	6	)
arg	21:63	21:68	5	error
water	21:63	0:0	6	error
water	21:69	0:0	4	;
call	22:8	23:68	4	FF_ALLOC_OR_GOTO
arg	22:25	22:30	5	avctx
water	22:25	0:0	6	avctx
arg	22:32	22:44	5	s->nodep_buf
water	22:32	0:0	6	s
op	22:33	0:0	6	->
water	22:35	0:0	6	nodep_buf
arg	23:25	23:61	5	2*frontier*sizeof(*s->nodep_buf)
water	23:25	0:0	6	2
op	23:27	0:0	6	*
water	23:29	0:0	6	frontier
op	23:38	0:0	6	*
op	23:40	0:0	6	sizeof
water	23:46	0:0	6	(
op	23:47	0:0	6	*
water	23:48	0:0	6	s
op	23:49	0:0	6	->
water	23:51	0:0	6	nodep_buf
water	23:60	0:0	6	)
arg	23:63	23:68	5	error
water	23:63	0:0	6	error
water	23:69	0:0	4	;
call	24:8	25:64	4	FF_ALLOC_OR_GOTO
arg	24:25	24:30	5	avctx
water	24:25	0:0	6	avctx
arg	24:32	24:47	5	s->trellis_hash
water	24:32	0:0	6	s
op	24:33	0:0	6	->
water	24:35	0:0	6	trellis_hash
arg	25:25	25:57	5	65536*sizeof(*s->trellis_hash)
water	25:25	0:0	6	65536
op	25:31	0:0	6	*
op	25:33	0:0	6	sizeof
water	25:39	0:0	6	(
op	25:40	0:0	6	*
water	25:41	0:0	6	s
op	25:42	0:0	6	->
water	25:44	0:0	6	trellis_hash
water	25:56	0:0	6	)
arg	25:59	25:64	5	error
water	25:59	0:0	6	error
water	25:65	0:0	4	;
water	26:4	0:0	4	}
water	27:4	0:0	2	avctx
op	27:9	0:0	2	->
water	27:11	0:0	2	bits_per_coded_sample
op	27:33	0:0	2	=
call	27:35	27:74	2	av_get_bits_per_sample
arg	27:58	27:74	3	avctx->codec->id
water	27:58	0:0	4	avctx
op	27:63	0:0	4	->
water	27:65	0:0	4	codec
op	27:70	0:0	4	->
water	27:72	0:0	4	id
water	27:75	0:0	2	;
switch	28:4	78:4	2	(avctx -> codec -> id)
cond	28:12	28:26	3	avctx -> codec -> id
water	28:12	0:0	4	avctx
op	28:17	0:0	4	->
water	28:19	0:0	4	codec
op	28:24	0:0	4	->
water	28:26	0:0	4	id
stmts	28:30	78:4	3	
water	28:30	0:0	4	{
label	29:4	29:34	4	case AV_CODEC_ID_ADPCM_IMA_WAV :
water	32:8	0:0	4	avctx
op	32:13	0:0	4	->
water	32:15	0:0	4	frame_size
op	32:26	0:0	4	=
water	32:28	0:0	4	(
water	32:29	0:0	4	BLKSIZE
op	32:37	0:0	4	-
water	32:39	0:0	4	4
op	32:41	0:0	4	*
water	32:43	0:0	4	avctx
op	32:48	0:0	4	->
water	32:50	0:0	4	channels
water	32:58	0:0	4	)
op	32:60	0:0	4	*
water	32:62	0:0	4	8
op	32:64	0:0	4	/
water	33:28	0:0	4	(
water	33:29	0:0	4	4
op	33:31	0:0	4	*
water	33:33	0:0	4	avctx
op	33:38	0:0	4	->
water	33:40	0:0	4	channels
water	33:48	0:0	4	)
op	33:50	0:0	4	+
water	33:52	0:0	4	1
water	33:53	0:0	4	;
water	36:8	0:0	4	avctx
op	36:13	0:0	4	->
water	36:15	0:0	4	block_align
op	36:27	0:0	4	=
water	36:29	0:0	4	BLKSIZE
water	36:36	0:0	4	;
water	37:8	0:0	4	avctx
op	37:13	0:0	4	->
water	37:15	0:0	4	bits_per_coded_sample
op	37:37	0:0	4	=
water	37:39	0:0	4	4
water	37:40	0:0	4	;
break	38:8	38:13	4	
label	39:4	39:33	4	case AV_CODEC_ID_ADPCM_IMA_QT :
water	40:8	0:0	4	avctx
op	40:13	0:0	4	->
water	40:15	0:0	4	frame_size
op	40:27	0:0	4	=
water	40:29	0:0	4	64
water	40:31	0:0	4	;
water	41:8	0:0	4	avctx
op	41:13	0:0	4	->
water	41:15	0:0	4	block_align
op	41:27	0:0	4	=
water	41:29	0:0	4	34
op	41:32	0:0	4	*
water	41:34	0:0	4	avctx
op	41:39	0:0	4	->
water	41:41	0:0	4	channels
water	41:49	0:0	4	;
break	42:8	42:13	4	
label	43:4	43:29	4	case AV_CODEC_ID_ADPCM_MS :
water	46:8	0:0	4	avctx
op	46:13	0:0	4	->
water	46:15	0:0	4	frame_size
op	46:26	0:0	4	=
water	46:28	0:0	4	(
water	46:29	0:0	4	BLKSIZE
op	46:37	0:0	4	-
water	46:39	0:0	4	7
op	46:41	0:0	4	*
water	46:43	0:0	4	avctx
op	46:48	0:0	4	->
water	46:50	0:0	4	channels
water	46:58	0:0	4	)
op	46:60	0:0	4	*
water	46:62	0:0	4	2
op	46:64	0:0	4	/
water	46:66	0:0	4	avctx
op	46:71	0:0	4	->
water	46:73	0:0	4	channels
op	46:82	0:0	4	+
water	46:84	0:0	4	2
water	46:85	0:0	4	;
water	47:8	0:0	4	avctx
op	47:13	0:0	4	->
water	47:15	0:0	4	bits_per_coded_sample
op	47:37	0:0	4	=
water	47:39	0:0	4	4
water	47:40	0:0	4	;
water	48:8	0:0	4	avctx
op	48:13	0:0	4	->
water	48:15	0:0	4	block_align
op	48:30	0:0	4	=
water	48:32	0:0	4	BLKSIZE
water	48:39	0:0	4	;
if	49:8	50:22	4	(! ( avctx -> extradata =av_malloc (32 + AV_INPUT_BUFFER_PADDING_SIZE ) ))
cond	49:12	49:77	5	! ( avctx -> extradata =av_malloc (32 + AV_INPUT_BUFFER_PADDING_SIZE ) )
op	49:12	0:0	6	!
water	49:13	0:0	6	(
water	49:14	0:0	6	avctx
op	49:19	0:0	6	->
water	49:21	0:0	6	extradata
op	49:31	0:0	6	=
call	49:33	49:76	6	av_malloc
arg	49:43	49:76	7	32+AV_INPUT_BUFFER_PADDING_SIZE
water	49:43	0:0	8	32
op	49:46	0:0	8	+
water	49:48	0:0	8	AV_INPUT_BUFFER_PADDING_SIZE
water	49:77	0:0	6	)
stmts	50:12	50:22	5	
goto	50:12	50:22	6	error
water	50:17	0:0	7	error
water	51:8	0:0	4	avctx
op	51:13	0:0	4	->
water	51:15	0:0	4	extradata_size
op	51:30	0:0	4	=
water	51:32	0:0	4	32
water	51:34	0:0	4	;
water	52:8	0:0	4	extradata
op	52:18	0:0	4	=
water	52:20	0:0	4	avctx
op	52:25	0:0	4	->
water	52:27	0:0	4	extradata
water	52:36	0:0	4	;
call	53:8	53:57	4	bytestream_put_le16
arg	53:28	53:38	5	&extradata
op	53:28	0:0	6	&
water	53:29	0:0	6	extradata
arg	53:40	53:57	5	avctx->frame_size
water	53:40	0:0	6	avctx
op	53:45	0:0	6	->
water	53:47	0:0	6	frame_size
water	53:58	0:0	4	;
call	54:8	54:41	4	bytestream_put_le16
arg	54:28	54:38	5	&extradata
op	54:28	0:0	6	&
water	54:29	0:0	6	extradata
arg	54:40	54:41	5	7
water	54:40	0:0	6	7
water	54:42	0:0	4	;
for	55:8	58:8	4	(i = 0 ;i < 7;i ++)
forinit	55:13	55:18	5	i = 0 ;
water	55:13	0:0	6	i
op	55:15	0:0	6	=
water	55:17	0:0	6	0
water	55:18	0:0	6	;
cond	55:20	55:24	5	i < 7
water	55:20	0:0	6	i
op	55:22	0:0	6	<
water	55:24	0:0	6	7
forexpr	55:27	55:28	5	i ++
water	55:27	0:0	6	i
op	55:28	0:0	6	++
stmts	55:32	58:8	5	
water	55:32	0:0	6	{
call	56:12	56:71	6	bytestream_put_le16
arg	56:32	56:42	7	&extradata
op	56:32	0:0	8	&
water	56:33	0:0	8	extradata
arg	56:44	56:71	7	ff_adpcm_AdaptCoeff1[i]*4
water	56:44	0:0	8	ff_adpcm_AdaptCoeff1
op	56:64	0:0	8	[
water	56:65	0:0	8	i
op	56:66	0:0	8	]
op	56:68	0:0	8	*
water	56:70	0:0	8	4
water	56:72	0:0	6	;
call	57:12	57:71	6	bytestream_put_le16
arg	57:32	57:42	7	&extradata
op	57:32	0:0	8	&
water	57:33	0:0	8	extradata
arg	57:44	57:71	7	ff_adpcm_AdaptCoeff2[i]*4
water	57:44	0:0	8	ff_adpcm_AdaptCoeff2
op	57:64	0:0	8	[
water	57:65	0:0	8	i
op	57:66	0:0	8	]
op	57:68	0:0	8	*
water	57:70	0:0	8	4
water	57:72	0:0	6	;
water	58:8	0:0	6	}
break	59:8	59:13	4	
label	60:4	60:33	4	case AV_CODEC_ID_ADPCM_YAMAHA :
water	61:8	0:0	4	avctx
op	61:13	0:0	4	->
water	61:15	0:0	4	frame_size
op	61:27	0:0	4	=
water	61:29	0:0	4	BLKSIZE
op	61:37	0:0	4	*
water	61:39	0:0	4	2
op	61:41	0:0	4	/
water	61:43	0:0	4	avctx
op	61:48	0:0	4	->
water	61:50	0:0	4	channels
water	61:58	0:0	4	;
water	62:8	0:0	4	avctx
op	62:13	0:0	4	->
water	62:15	0:0	4	block_align
op	62:27	0:0	4	=
water	62:29	0:0	4	BLKSIZE
water	62:36	0:0	4	;
break	63:8	63:13	4	
label	64:4	64:30	4	case AV_CODEC_ID_ADPCM_SWF :
if	65:8	72:8	4	(avctx -> sample_rate != 11025 && avctx -> sample_rate != 22050 && avctx -> sample_rate != 44100)
cond	65:12	67:34	5	avctx -> sample_rate != 11025 && avctx -> sample_rate != 22050 && avctx -> sample_rate != 44100
water	65:12	0:0	6	avctx
op	65:17	0:0	6	->
water	65:19	0:0	6	sample_rate
op	65:31	0:0	6	!=
water	65:34	0:0	6	11025
op	65:40	0:0	6	&&
water	66:12	0:0	6	avctx
op	66:17	0:0	6	->
water	66:19	0:0	6	sample_rate
op	66:31	0:0	6	!=
water	66:34	0:0	6	22050
op	66:40	0:0	6	&&
water	67:12	0:0	6	avctx
op	67:17	0:0	6	->
water	67:19	0:0	6	sample_rate
op	67:31	0:0	6	!=
water	67:34	0:0	6	44100
stmts	67:41	72:8	5	
water	67:41	0:0	6	{
call	68:12	69:37	6	av_log
arg	68:19	68:24	7	avctx
water	68:19	0:0	8	avctx
arg	68:26	68:38	7	AV_LOG_ERROR
water	68:26	0:0	8	AV_LOG_ERROR
arg	68:40	69:37	7	"Sample rate must be 11025, ""22050 or 44100\n"
water	68:40	0:0	8	"Sample rate must be 11025, "
water	69:19	0:0	8	"22050 or 44100\n"
water	69:38	0:0	6	;
water	70:12	0:0	6	ret
op	70:16	0:0	6	=
call	70:18	70:32	6	AVERROR
arg	70:26	70:32	7	EINVAL
water	70:26	0:0	8	EINVAL
water	70:33	0:0	6	;
goto	71:12	71:22	6	error
water	71:17	0:0	7	error
water	72:8	0:0	6	}
water	73:8	0:0	4	avctx
op	73:13	0:0	4	->
water	73:15	0:0	4	frame_size
op	73:26	0:0	4	=
water	73:28	0:0	4	512
op	73:32	0:0	4	*
water	73:34	0:0	4	(
water	73:35	0:0	4	avctx
op	73:40	0:0	4	->
water	73:42	0:0	4	sample_rate
op	73:54	0:0	4	/
water	73:56	0:0	4	11025
water	73:61	0:0	4	)
water	73:62	0:0	4	;
break	74:8	74:13	4	
label	75:4	75:11	4	default :
water	76:8	0:0	4	ret
op	76:12	0:0	4	=
call	76:14	76:28	4	AVERROR
arg	76:22	76:28	5	EINVAL
water	76:22	0:0	6	EINVAL
water	76:29	0:0	4	;
goto	77:8	77:18	4	error
water	77:13	0:0	5	error
water	78:4	0:0	4	}
return	79:4	79:12	2	0
water	79:11	0:0	3	0
label	80:0	80:5	2	error :
call	81:4	81:28	2	adpcm_encode_close
arg	81:23	81:28	3	avctx
water	81:23	0:0	4	avctx
water	81:29	0:0	2	;
return	82:4	82:14	2	ret
water	82:11	0:0	3	ret
