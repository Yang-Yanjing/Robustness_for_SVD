func	1:0	110:0	0	static int	v4l2_set_parameters
params	1:30	0:0	1	
param	1:31	1:51	2	AVFormatContext *	ctx
stmnts	0:0	109:12	1	
decl	3:4	3:41	2	struct video_data	*s
op	3:25	0:0	2	=
water	3:27	0:0	2	ctx
op	3:30	0:0	2	->
water	3:32	0:0	2	priv_data
decl	4:4	4:41	2	struct v4l2_standard	standard
op	4:34	0:0	2	=
water	4:36	0:0	2	{
water	4:38	0:0	2	0
water	4:40	0:0	2	}
decl	5:4	5:45	2	struct v4l2_streamparm	streamparm
op	5:38	0:0	2	=
water	5:40	0:0	2	{
water	5:42	0:0	2	0
water	5:44	0:0	2	}
decl	6:4	6:26	2	struct v4l2_fract	*tpf
decl	7:4	7:34	2	AVRational	framerate_q
op	7:27	0:0	2	=
water	7:29	0:0	2	{
water	7:31	0:0	2	0
water	7:33	0:0	2	}
decl	8:4	8:14	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:14	2	int	ret
if	9:4	14:4	2	(s -> framerate && ( ret =av_parse_video_rate (& framerate_q ,s -> framerate ) ) < 0)
cond	9:8	10:66	3	s -> framerate && ( ret =av_parse_video_rate (& framerate_q ,s -> framerate ) ) < 0
water	9:8	0:0	4	s
op	9:9	0:0	4	->
water	9:11	0:0	4	framerate
op	9:21	0:0	4	&&
water	10:8	0:0	4	(
water	10:9	0:0	4	ret
op	10:13	0:0	4	=
call	10:15	10:61	4	av_parse_video_rate
arg	10:35	10:47	5	&framerate_q
op	10:35	0:0	6	&
water	10:36	0:0	6	framerate_q
arg	10:49	10:61	5	s->framerate
water	10:49	0:0	6	s
op	10:50	0:0	6	->
water	10:52	0:0	6	framerate
water	10:62	0:0	4	)
op	10:64	0:0	4	<
water	10:66	0:0	4	0
stmts	10:69	14:4	3	
water	10:69	0:0	4	{
call	11:8	12:27	4	av_log
arg	11:15	11:18	5	ctx
water	11:15	0:0	6	ctx
arg	11:20	11:32	5	AV_LOG_ERROR
water	11:20	0:0	6	AV_LOG_ERROR
arg	11:34	11:69	5	"Could not parse framerate '%s'.\n"
water	11:34	0:0	6	"Could not parse framerate '%s'.\n"
arg	12:15	12:27	5	s->framerate
water	12:15	0:0	6	s
op	12:16	0:0	6	->
water	12:18	0:0	6	framerate
water	12:28	0:0	4	;
return	13:8	13:18	4	ret
water	13:15	0:0	5	ret
water	14:4	0:0	4	}
if	15:4	42:4	2	(s -> standard)
cond	15:8	15:11	3	s -> standard
water	15:8	0:0	4	s
op	15:9	0:0	4	->
water	15:11	0:0	4	standard
stmts	15:21	42:4	3	
water	15:21	0:0	4	{
if	16:8	38:8	4	(s -> std_id)
cond	16:12	16:15	5	s -> std_id
water	16:12	0:0	6	s
op	16:13	0:0	6	->
water	16:15	0:0	6	std_id
stmts	16:23	38:8	5	
water	16:23	0:0	6	{
water	17:12	0:0	6	ret
op	17:16	0:0	6	=
water	17:18	0:0	6	0
water	17:19	0:0	6	;
call	18:12	18:75	6	av_log
arg	18:19	18:22	7	ctx
water	18:19	0:0	8	ctx
arg	18:24	18:36	7	AV_LOG_DEBUG
water	18:24	0:0	8	AV_LOG_DEBUG
arg	18:38	18:62	7	"Setting standard: %s\n"
water	18:38	0:0	8	"Setting standard: %s\n"
arg	18:64	18:75	7	s->standard
water	18:64	0:0	8	s
op	18:65	0:0	8	->
water	18:67	0:0	8	standard
water	18:76	0:0	6	;
for	20:12	28:12	6	(i = 0 ;;i ++)
forinit	20:17	20:22	7	i = 0 ;
water	20:17	0:0	8	i
op	20:19	0:0	8	=
water	20:21	0:0	8	0
water	20:22	0:0	8	;
cond	0:0	0:0	7	
forexpr	20:26	20:27	7	i ++
water	20:26	0:0	8	i
op	20:27	0:0	8	++
stmts	20:31	28:12	7	
water	20:31	0:0	8	{
water	21:16	0:0	8	standard
op	21:24	0:0	8	.
water	21:25	0:0	8	index
op	21:31	0:0	8	=
water	21:33	0:0	8	i
water	21:34	0:0	8	;
if	22:16	25:16	8	(v4l2_ioctl (s -> fd ,VIDIOC_ENUMSTD ,& standard ) < 0)
cond	22:20	22:67	9	v4l2_ioctl (s -> fd ,VIDIOC_ENUMSTD ,& standard ) < 0
call	22:20	22:63	10	v4l2_ioctl
arg	22:31	22:36	11	s->fd
water	22:31	0:0	12	s
op	22:32	0:0	12	->
water	22:34	0:0	12	fd
arg	22:38	22:52	11	VIDIOC_ENUMSTD
water	22:38	0:0	12	VIDIOC_ENUMSTD
arg	22:54	22:63	11	&standard
op	22:54	0:0	12	&
water	22:55	0:0	12	standard
op	22:65	0:0	10	<
water	22:67	0:0	10	0
stmts	22:70	25:16	9	
water	22:70	0:0	10	{
water	23:20	0:0	10	ret
op	23:24	0:0	10	=
call	23:26	23:39	10	AVERROR
arg	23:34	23:39	11	errno
water	23:34	0:0	12	errno
water	23:40	0:0	10	;
break	24:20	24:25	10	
water	25:16	0:0	10	}
if	26:16	27:25	8	(!av_strcasecmp (standard . name ,s -> standard ))
cond	26:20	26:61	9	!av_strcasecmp (standard . name ,s -> standard )
op	26:20	0:0	10	!
call	26:21	26:61	10	av_strcasecmp
arg	26:35	26:48	11	standard.name
water	26:35	0:0	12	standard
op	26:43	0:0	12	.
water	26:44	0:0	12	name
arg	26:50	26:61	11	s->standard
water	26:50	0:0	12	s
op	26:51	0:0	12	->
water	26:53	0:0	12	standard
stmts	27:20	27:25	9	
break	27:20	27:25	10	
water	28:12	0:0	8	}
if	29:12	32:12	6	(ret < 0)
cond	29:16	29:22	7	ret < 0
water	29:16	0:0	8	ret
op	29:20	0:0	8	<
water	29:22	0:0	8	0
stmts	29:25	32:12	7	
water	29:25	0:0	8	{
call	30:16	30:95	8	av_log
arg	30:23	30:26	9	ctx
water	30:23	0:0	10	ctx
arg	30:28	30:40	9	AV_LOG_ERROR
water	30:28	0:0	10	AV_LOG_ERROR
arg	30:42	30:82	9	"Unknown or unsupported standard '%s'\n"
water	30:42	0:0	10	"Unknown or unsupported standard '%s'\n"
arg	30:84	30:95	9	s->standard
water	30:84	0:0	10	s
op	30:85	0:0	10	->
water	30:87	0:0	10	standard
water	30:96	0:0	8	;
return	31:16	31:26	8	ret
water	31:23	0:0	9	ret
water	32:12	0:0	8	}
if	33:12	37:12	6	(v4l2_ioctl (s -> fd ,VIDIOC_S_STD ,& standard . id ) < 0)
cond	33:16	33:64	7	v4l2_ioctl (s -> fd ,VIDIOC_S_STD ,& standard . id ) < 0
call	33:16	33:60	8	v4l2_ioctl
arg	33:27	33:32	9	s->fd
water	33:27	0:0	10	s
op	33:28	0:0	10	->
water	33:30	0:0	10	fd
arg	33:34	33:46	9	VIDIOC_S_STD
water	33:34	0:0	10	VIDIOC_S_STD
arg	33:48	33:60	9	&standard.id
op	33:48	0:0	10	&
water	33:49	0:0	10	standard
op	33:57	0:0	10	.
water	33:58	0:0	10	id
op	33:62	0:0	8	<
water	33:64	0:0	8	0
stmts	33:67	37:12	7	
water	33:67	0:0	8	{
water	34:16	0:0	8	ret
op	34:20	0:0	8	=
call	34:22	34:35	8	AVERROR
arg	34:30	34:35	9	errno
water	34:30	0:0	10	errno
water	34:36	0:0	8	;
call	35:16	35:86	8	av_log
arg	35:23	35:26	9	ctx
water	35:23	0:0	10	ctx
arg	35:28	35:40	9	AV_LOG_ERROR
water	35:28	0:0	10	AV_LOG_ERROR
arg	35:42	35:69	9	"ioctl(VIDIOC_S_STD): %s\n"
water	35:42	0:0	10	"ioctl(VIDIOC_S_STD): %s\n"
arg	35:71	35:86	9	av_err2str(ret)
call	35:71	35:85	10	av_err2str
arg	35:82	35:85	11	ret
water	35:82	0:0	12	ret
water	35:87	0:0	8	;
return	36:16	36:26	8	ret
water	36:23	0:0	9	ret
water	37:12	0:0	8	}
water	38:8	0:0	6	}
else	38:10	41:8	4
stmts	38:15	41:8	5	
water	38:15	0:0	6	{
call	39:12	40:64	6	av_log
arg	39:19	39:22	7	ctx
water	39:19	0:0	8	ctx
arg	39:24	39:38	7	AV_LOG_WARNING
water	39:24	0:0	8	AV_LOG_WARNING
arg	40:19	40:64	7	"This device does not support any standard\n"
water	40:19	0:0	8	"This device does not support any standard\n"
water	40:65	0:0	6	;
water	41:8	0:0	6	}
water	42:4	0:0	4	}
if	44:4	68:4	2	(v4l2_ioctl (s -> fd ,VIDIOC_G_STD ,& s -> std_id ) == 0)
cond	44:8	44:55	3	v4l2_ioctl (s -> fd ,VIDIOC_G_STD ,& s -> std_id ) == 0
call	44:8	44:50	4	v4l2_ioctl
arg	44:19	44:24	5	s->fd
water	44:19	0:0	6	s
op	44:20	0:0	6	->
water	44:22	0:0	6	fd
arg	44:26	44:38	5	VIDIOC_G_STD
water	44:26	0:0	6	VIDIOC_G_STD
arg	44:40	44:50	5	&s->std_id
op	44:40	0:0	6	&
water	44:41	0:0	6	s
op	44:42	0:0	6	->
water	44:44	0:0	6	std_id
op	44:52	0:0	4	==
water	44:55	0:0	4	0
stmts	44:58	68:4	3	
water	44:58	0:0	4	{
water	45:8	0:0	4	tpf
op	45:12	0:0	4	=
op	45:14	0:0	4	&
water	45:15	0:0	4	standard
op	45:23	0:0	4	.
water	45:24	0:0	4	frameperiod
water	45:35	0:0	4	;
for	46:8	67:8	4	(i = 0 ;;i ++)
forinit	46:13	46:18	5	i = 0 ;
water	46:13	0:0	6	i
op	46:15	0:0	6	=
water	46:17	0:0	6	0
water	46:18	0:0	6	;
cond	0:0	0:0	5	
forexpr	46:22	46:23	5	i ++
water	46:22	0:0	6	i
op	46:23	0:0	6	++
stmts	46:27	67:8	5	
water	46:27	0:0	6	{
water	47:12	0:0	6	standard
op	47:20	0:0	6	.
water	47:21	0:0	6	index
op	47:27	0:0	6	=
water	47:29	0:0	6	i
water	47:30	0:0	6	;
if	48:12	60:12	6	(v4l2_ioctl (s -> fd ,VIDIOC_ENUMSTD ,& standard ) < 0)
cond	48:16	48:63	7	v4l2_ioctl (s -> fd ,VIDIOC_ENUMSTD ,& standard ) < 0
call	48:16	48:59	8	v4l2_ioctl
arg	48:27	48:32	9	s->fd
water	48:27	0:0	10	s
op	48:28	0:0	10	->
water	48:30	0:0	10	fd
arg	48:34	48:48	9	VIDIOC_ENUMSTD
water	48:34	0:0	10	VIDIOC_ENUMSTD
arg	48:50	48:59	9	&standard
op	48:50	0:0	10	&
water	48:51	0:0	10	standard
op	48:61	0:0	8	<
water	48:63	0:0	8	0
stmts	48:66	60:12	7	
water	48:66	0:0	8	{
water	49:16	0:0	8	ret
op	49:20	0:0	8	=
call	49:22	49:35	8	AVERROR
arg	49:30	49:35	9	errno
water	49:30	0:0	10	errno
water	49:36	0:0	8	;
if	50:16	57:16	8	(ret ==AVERROR (EINVAL ) || ret ==AVERROR (ENODATA ))
cond	50:20	52:45	9	ret ==AVERROR (EINVAL ) || ret ==AVERROR (ENODATA )
water	50:20	0:0	10	ret
op	50:24	0:0	10	==
call	50:27	50:41	10	AVERROR
arg	50:35	50:41	11	EINVAL
water	50:35	0:0	12	EINVAL
op	52:20	0:0	10	||
water	52:23	0:0	10	ret
op	52:27	0:0	10	==
call	52:30	52:45	10	AVERROR
arg	52:38	52:45	11	ENODATA
water	52:38	0:0	12	ENODATA
stmts	54:18	57:16	9	
water	54:18	0:0	10	{
water	55:20	0:0	10	tpf
op	55:24	0:0	10	=
op	55:26	0:0	10	&
water	55:27	0:0	10	streamparm
op	55:37	0:0	10	.
water	55:38	0:0	10	parm
op	55:42	0:0	10	.
water	55:43	0:0	10	capture
op	55:50	0:0	10	.
water	55:51	0:0	10	timeperframe
water	55:63	0:0	10	;
break	56:20	56:25	10	
water	57:16	0:0	10	}
call	58:16	58:88	8	av_log
arg	58:23	58:26	9	ctx
water	58:23	0:0	10	ctx
arg	58:28	58:40	9	AV_LOG_ERROR
water	58:28	0:0	10	AV_LOG_ERROR
arg	58:42	58:71	9	"ioctl(VIDIOC_ENUMSTD): %s\n"
water	58:42	0:0	10	"ioctl(VIDIOC_ENUMSTD): %s\n"
arg	58:73	58:88	9	av_err2str(ret)
call	58:73	58:87	10	av_err2str
arg	58:84	58:87	11	ret
water	58:84	0:0	12	ret
water	58:89	0:0	8	;
return	59:16	59:26	8	ret
water	59:23	0:0	9	ret
water	60:12	0:0	8	}
if	61:12	66:12	6	(standard . id == s -> std_id)
cond	61:16	61:34	7	standard . id == s -> std_id
water	61:16	0:0	8	standard
op	61:24	0:0	8	.
water	61:25	0:0	8	id
op	61:28	0:0	8	==
water	61:31	0:0	8	s
op	61:32	0:0	8	->
water	61:34	0:0	8	std_id
stmts	61:42	66:12	7	
water	61:42	0:0	8	{
call	62:16	64:93	8	av_log
arg	62:23	62:26	9	ctx
water	62:23	0:0	10	ctx
arg	62:28	62:40	9	AV_LOG_DEBUG
water	62:28	0:0	10	AV_LOG_DEBUG
arg	63:23	63:82	9	"Current standard: %s, id: %"PRIx64", frameperiod: %d/%d\n"
water	63:23	0:0	10	"Current standard: %s, id: %"
water	63:52	0:0	10	PRIx64
water	63:58	0:0	10	", frameperiod: %d/%d\n"
arg	64:23	64:36	9	standard.name
water	64:23	0:0	10	standard
op	64:31	0:0	10	.
water	64:32	0:0	10	name
arg	64:38	64:59	9	(uint64_t)standard.id
water	64:38	0:0	10	(
water	64:39	0:0	10	uint64_t
water	64:47	0:0	10	)
water	64:48	0:0	10	standard
op	64:56	0:0	10	.
water	64:57	0:0	10	id
arg	64:61	64:75	9	tpf->numerator
water	64:61	0:0	10	tpf
op	64:64	0:0	10	->
water	64:66	0:0	10	numerator
arg	64:77	64:93	9	tpf->denominator
water	64:77	0:0	10	tpf
op	64:80	0:0	10	->
water	64:82	0:0	10	denominator
water	64:94	0:0	8	;
break	65:16	65:21	8	
water	66:12	0:0	8	}
water	67:8	0:0	6	}
water	68:4	0:0	4	}
else	68:6	70:4	2
stmts	68:11	70:4	3	
water	68:11	0:0	4	{
water	69:8	0:0	4	tpf
op	69:12	0:0	4	=
op	69:14	0:0	4	&
water	69:15	0:0	4	streamparm
op	69:25	0:0	4	.
water	69:26	0:0	4	parm
op	69:30	0:0	4	.
water	69:31	0:0	4	capture
op	69:38	0:0	4	.
water	69:39	0:0	4	timeperframe
water	69:51	0:0	4	;
water	70:4	0:0	4	}
water	71:4	0:0	2	streamparm
op	71:14	0:0	2	.
water	71:15	0:0	2	type
op	71:20	0:0	2	=
water	71:22	0:0	2	V4L2_BUF_TYPE_VIDEO_CAPTURE
water	71:49	0:0	2	;
if	72:4	76:4	2	(v4l2_ioctl (s -> fd ,VIDIOC_G_PARM ,& streamparm ) < 0)
cond	72:8	72:56	3	v4l2_ioctl (s -> fd ,VIDIOC_G_PARM ,& streamparm ) < 0
call	72:8	72:52	4	v4l2_ioctl
arg	72:19	72:24	5	s->fd
water	72:19	0:0	6	s
op	72:20	0:0	6	->
water	72:22	0:0	6	fd
arg	72:26	72:39	5	VIDIOC_G_PARM
water	72:26	0:0	6	VIDIOC_G_PARM
arg	72:41	72:52	5	&streamparm
op	72:41	0:0	6	&
water	72:42	0:0	6	streamparm
op	72:54	0:0	4	<
water	72:56	0:0	4	0
stmts	72:59	76:4	3	
water	72:59	0:0	4	{
water	73:8	0:0	4	ret
op	73:12	0:0	4	=
call	73:14	73:27	4	AVERROR
arg	73:22	73:27	5	errno
water	73:22	0:0	6	errno
water	73:28	0:0	4	;
call	74:8	74:79	4	av_log
arg	74:15	74:18	5	ctx
water	74:15	0:0	6	ctx
arg	74:20	74:32	5	AV_LOG_ERROR
water	74:20	0:0	6	AV_LOG_ERROR
arg	74:34	74:62	5	"ioctl(VIDIOC_G_PARM): %s\n"
water	74:34	0:0	6	"ioctl(VIDIOC_G_PARM): %s\n"
arg	74:64	74:79	5	av_err2str(ret)
call	74:64	74:78	6	av_err2str
arg	74:75	74:78	7	ret
water	74:75	0:0	8	ret
water	74:80	0:0	4	;
return	75:8	75:18	4	ret
water	75:15	0:0	5	ret
water	76:4	0:0	4	}
if	77:4	102:4	2	(framerate_q . num && framerate_q . den)
cond	77:8	77:39	3	framerate_q . num && framerate_q . den
water	77:8	0:0	4	framerate_q
op	77:19	0:0	4	.
water	77:20	0:0	4	num
op	77:24	0:0	4	&&
water	77:27	0:0	4	framerate_q
op	77:38	0:0	4	.
water	77:39	0:0	4	den
stmts	77:44	102:4	3	
water	77:44	0:0	4	{
if	78:8	98:8	4	(streamparm . parm . capture . capability & V4L2_CAP_TIMEPERFRAME)
cond	78:12	78:49	5	streamparm . parm . capture . capability & V4L2_CAP_TIMEPERFRAME
water	78:12	0:0	6	streamparm
op	78:22	0:0	6	.
water	78:23	0:0	6	parm
op	78:27	0:0	6	.
water	78:28	0:0	6	capture
op	78:35	0:0	6	.
water	78:36	0:0	6	capability
op	78:47	0:0	6	&
water	78:49	0:0	6	V4L2_CAP_TIMEPERFRAME
stmts	78:72	98:8	5	
water	78:72	0:0	6	{
water	79:12	0:0	6	tpf
op	79:16	0:0	6	=
op	79:18	0:0	6	&
water	79:19	0:0	6	streamparm
op	79:29	0:0	6	.
water	79:30	0:0	6	parm
op	79:34	0:0	6	.
water	79:35	0:0	6	capture
op	79:42	0:0	6	.
water	79:43	0:0	6	timeperframe
water	79:55	0:0	6	;
call	80:12	81:51	6	av_log
arg	80:19	80:22	7	ctx
water	80:19	0:0	8	ctx
arg	80:24	80:36	7	AV_LOG_DEBUG
water	80:24	0:0	8	AV_LOG_DEBUG
arg	80:38	80:73	7	"Setting time per frame to %d/%d\n"
water	80:38	0:0	8	"Setting time per frame to %d/%d\n"
arg	81:19	81:34	7	framerate_q.den
water	81:19	0:0	8	framerate_q
op	81:30	0:0	8	.
water	81:31	0:0	8	den
arg	81:36	81:51	7	framerate_q.num
water	81:36	0:0	8	framerate_q
op	81:47	0:0	8	.
water	81:48	0:0	8	num
water	81:52	0:0	6	;
water	82:12	0:0	6	tpf
op	82:15	0:0	6	->
water	82:17	0:0	6	numerator
op	82:29	0:0	6	=
water	82:31	0:0	6	framerate_q
op	82:42	0:0	6	.
water	82:43	0:0	6	den
water	82:46	0:0	6	;
water	83:12	0:0	6	tpf
op	83:15	0:0	6	->
water	83:17	0:0	6	denominator
op	83:29	0:0	6	=
water	83:31	0:0	6	framerate_q
op	83:42	0:0	6	.
water	83:43	0:0	6	num
water	83:46	0:0	6	;
if	84:12	89:12	6	(v4l2_ioctl (s -> fd ,VIDIOC_S_PARM ,& streamparm ) < 0)
cond	84:16	84:64	7	v4l2_ioctl (s -> fd ,VIDIOC_S_PARM ,& streamparm ) < 0
call	84:16	84:60	8	v4l2_ioctl
arg	84:27	84:32	9	s->fd
water	84:27	0:0	10	s
op	84:28	0:0	10	->
water	84:30	0:0	10	fd
arg	84:34	84:47	9	VIDIOC_S_PARM
water	84:34	0:0	10	VIDIOC_S_PARM
arg	84:49	84:60	9	&streamparm
op	84:49	0:0	10	&
water	84:50	0:0	10	streamparm
op	84:62	0:0	8	<
water	84:64	0:0	8	0
stmts	84:67	89:12	7	
water	84:67	0:0	8	{
water	85:16	0:0	8	ret
op	85:20	0:0	8	=
call	85:22	85:35	8	AVERROR
arg	85:30	85:35	9	errno
water	85:30	0:0	10	errno
water	85:36	0:0	8	;
call	86:16	87:38	8	av_log
arg	86:23	86:26	9	ctx
water	86:23	0:0	10	ctx
arg	86:28	86:40	9	AV_LOG_ERROR
water	86:28	0:0	10	AV_LOG_ERROR
arg	86:42	86:70	9	"ioctl(VIDIOC_S_PARM): %s\n"
water	86:42	0:0	10	"ioctl(VIDIOC_S_PARM): %s\n"
arg	87:23	87:38	9	av_err2str(ret)
call	87:23	87:37	10	av_err2str
arg	87:34	87:37	11	ret
water	87:34	0:0	12	ret
water	87:39	0:0	8	;
return	88:16	88:26	8	ret
water	88:23	0:0	9	ret
water	89:12	0:0	8	}
if	90:12	97:12	6	(framerate_q . num != tpf -> denominator || framerate_q . den != tpf -> numerator)
cond	90:16	91:40	7	framerate_q . num != tpf -> denominator || framerate_q . den != tpf -> numerator
water	90:16	0:0	8	framerate_q
op	90:27	0:0	8	.
water	90:28	0:0	8	num
op	90:32	0:0	8	!=
water	90:35	0:0	8	tpf
op	90:38	0:0	8	->
water	90:40	0:0	8	denominator
op	90:52	0:0	8	||
water	91:16	0:0	8	framerate_q
op	91:27	0:0	8	.
water	91:28	0:0	8	den
op	91:32	0:0	8	!=
water	91:35	0:0	8	tpf
op	91:38	0:0	8	->
water	91:40	0:0	8	numerator
stmts	91:51	97:12	7	
water	91:51	0:0	8	{
call	92:16	96:55	8	av_log
arg	92:23	92:26	9	ctx
water	92:23	0:0	10	ctx
arg	92:28	92:39	9	AV_LOG_INFO
water	92:28	0:0	10	AV_LOG_INFO
arg	93:23	94:41	9	"The driver changed the time per frame from ""%d/%d to %d/%d\n"
water	93:23	0:0	10	"The driver changed the time per frame from "
water	94:23	0:0	10	"%d/%d to %d/%d\n"
arg	95:23	95:38	9	framerate_q.den
water	95:23	0:0	10	framerate_q
op	95:34	0:0	10	.
water	95:35	0:0	10	den
arg	95:40	95:55	9	framerate_q.num
water	95:40	0:0	10	framerate_q
op	95:51	0:0	10	.
water	95:52	0:0	10	num
arg	96:23	96:37	9	tpf->numerator
water	96:23	0:0	10	tpf
op	96:26	0:0	10	->
water	96:28	0:0	10	numerator
arg	96:39	96:55	9	tpf->denominator
water	96:39	0:0	10	tpf
op	96:42	0:0	10	->
water	96:44	0:0	10	denominator
water	96:56	0:0	8	;
water	97:12	0:0	8	}
water	98:8	0:0	6	}
else	98:10	101:8	4
stmts	98:15	101:8	5	
water	98:15	0:0	6	{
call	99:12	100:77	6	av_log
arg	99:19	99:22	7	ctx
water	99:19	0:0	8	ctx
arg	99:24	99:38	7	AV_LOG_WARNING
water	99:24	0:0	8	AV_LOG_WARNING
arg	100:19	100:77	7	"The driver does not permit changing the time per frame\n"
water	100:19	0:0	8	"The driver does not permit changing the time per frame\n"
water	100:78	0:0	6	;
water	101:8	0:0	6	}
water	102:4	0:0	4	}
if	103:4	107:4	2	(tpf -> denominator > 0 && tpf -> numerator > 0)
cond	103:8	103:49	3	tpf -> denominator > 0 && tpf -> numerator > 0
water	103:8	0:0	4	tpf
op	103:11	0:0	4	->
water	103:13	0:0	4	denominator
op	103:25	0:0	4	>
water	103:27	0:0	4	0
op	103:29	0:0	4	&&
water	103:32	0:0	4	tpf
op	103:35	0:0	4	->
water	103:37	0:0	4	numerator
op	103:47	0:0	4	>
water	103:49	0:0	4	0
stmts	103:52	107:4	3	
water	103:52	0:0	4	{
water	104:8	0:0	4	ctx
op	104:11	0:0	4	->
water	104:13	0:0	4	streams
op	104:20	0:0	4	[
water	104:21	0:0	4	0
op	104:22	0:0	4	]
op	104:23	0:0	4	->
water	104:25	0:0	4	avg_frame_rate
op	104:39	0:0	4	.
water	104:40	0:0	4	num
op	104:44	0:0	4	=
water	104:46	0:0	4	tpf
op	104:49	0:0	4	->
water	104:51	0:0	4	denominator
water	104:62	0:0	4	;
water	105:8	0:0	4	ctx
op	105:11	0:0	4	->
water	105:13	0:0	4	streams
op	105:20	0:0	4	[
water	105:21	0:0	4	0
op	105:22	0:0	4	]
op	105:23	0:0	4	->
water	105:25	0:0	4	avg_frame_rate
op	105:39	0:0	4	.
water	105:40	0:0	4	den
op	105:44	0:0	4	=
water	105:46	0:0	4	tpf
op	105:49	0:0	4	->
water	105:51	0:0	4	numerator
water	105:60	0:0	4	;
water	106:8	0:0	4	ctx
op	106:11	0:0	4	->
water	106:13	0:0	4	streams
op	106:20	0:0	4	[
water	106:21	0:0	4	0
op	106:22	0:0	4	]
op	106:23	0:0	4	->
water	106:25	0:0	4	r_frame_rate
op	106:38	0:0	4	=
water	106:40	0:0	4	ctx
op	106:43	0:0	4	->
water	106:45	0:0	4	streams
op	106:52	0:0	4	[
water	106:53	0:0	4	0
op	106:54	0:0	4	]
op	106:55	0:0	4	->
water	106:57	0:0	4	avg_frame_rate
water	106:71	0:0	4	;
water	107:4	0:0	4	}
else	107:6	108:63	2
stmts	108:8	108:63	3	
call	108:8	108:62	4	av_log
arg	108:15	108:18	5	ctx
water	108:15	0:0	6	ctx
arg	108:20	108:34	5	AV_LOG_WARNING
water	108:20	0:0	6	AV_LOG_WARNING
arg	108:36	108:62	5	"Time per frame unknown\n"
water	108:36	0:0	6	"Time per frame unknown\n"
water	108:63	0:0	4	;
return	109:4	109:12	2	0
water	109:11	0:0	3	0
