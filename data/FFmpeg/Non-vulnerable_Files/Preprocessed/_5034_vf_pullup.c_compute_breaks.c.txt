func	1:0	33:0	0	static void	compute_breaks
params	1:26	0:0	1	
param	1:27	1:43	2	PullupContext *	s
param	1:45	1:60	2	PullupField *	f0
stmnts	0:0	32:33	1	
decl	3:4	3:30	2	PullupField	*f1
op	3:20	0:0	2	=
water	3:22	0:0	2	f0
op	3:24	0:0	2	->
water	3:26	0:0	2	next
decl	4:4	4:30	2	PullupField	*f2
op	4:20	0:0	2	=
water	4:22	0:0	2	f1
op	4:24	0:0	2	->
water	4:26	0:0	2	next
decl	5:4	5:30	2	PullupField	*f3
op	5:20	0:0	2	=
water	5:22	0:0	2	f2
op	5:24	0:0	2	->
water	5:26	0:0	2	next
decl	6:4	6:34	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:34	2	int	l
water	6:12	0:0	2	,
decl	6:4	6:34	2	int	max_l
op	6:20	0:0	2	=
water	6:22	0:0	2	0
water	6:23	0:0	2	,
decl	6:4	6:34	2	int	max_r
op	6:31	0:0	2	=
water	6:33	0:0	2	0
if	7:4	8:14	2	(f0 -> flags & F_HAVE_BREAKS)
cond	7:8	7:20	3	f0 -> flags & F_HAVE_BREAKS
water	7:8	0:0	4	f0
op	7:10	0:0	4	->
water	7:12	0:0	4	flags
op	7:18	0:0	4	&
water	7:20	0:0	4	F_HAVE_BREAKS
stmts	8:8	8:14	3	
return	8:8	8:14	4	
water	9:4	0:0	2	f0
op	9:6	0:0	2	->
water	9:8	0:0	2	flags
op	9:14	0:0	2	|=
water	9:17	0:0	2	F_HAVE_BREAKS
water	9:30	0:0	2	;
if	11:4	14:4	2	(f0 -> buffer == f2 -> buffer && f1 -> buffer != f3 -> buffer)
cond	11:8	11:54	3	f0 -> buffer == f2 -> buffer && f1 -> buffer != f3 -> buffer
water	11:8	0:0	4	f0
op	11:10	0:0	4	->
water	11:12	0:0	4	buffer
op	11:19	0:0	4	==
water	11:22	0:0	4	f2
op	11:24	0:0	4	->
water	11:26	0:0	4	buffer
op	11:33	0:0	4	&&
water	11:36	0:0	4	f1
op	11:38	0:0	4	->
water	11:40	0:0	4	buffer
op	11:47	0:0	4	!=
water	11:50	0:0	4	f3
op	11:52	0:0	4	->
water	11:54	0:0	4	buffer
stmts	11:62	14:4	3	
water	11:62	0:0	4	{
water	12:8	0:0	4	f2
op	12:10	0:0	4	->
water	12:12	0:0	4	breaks
op	12:19	0:0	4	|=
water	12:22	0:0	4	BREAK_RIGHT
water	12:33	0:0	4	;
return	13:8	13:14	4	
water	14:4	0:0	4	}
if	15:4	18:4	2	(f0 -> buffer != f2 -> buffer && f1 -> buffer == f3 -> buffer)
cond	15:8	15:54	3	f0 -> buffer != f2 -> buffer && f1 -> buffer == f3 -> buffer
water	15:8	0:0	4	f0
op	15:10	0:0	4	->
water	15:12	0:0	4	buffer
op	15:19	0:0	4	!=
water	15:22	0:0	4	f2
op	15:24	0:0	4	->
water	15:26	0:0	4	buffer
op	15:33	0:0	4	&&
water	15:36	0:0	4	f1
op	15:38	0:0	4	->
water	15:40	0:0	4	buffer
op	15:47	0:0	4	==
water	15:50	0:0	4	f3
op	15:52	0:0	4	->
water	15:54	0:0	4	buffer
stmts	15:62	18:4	3	
water	15:62	0:0	4	{
water	16:8	0:0	4	f1
op	16:10	0:0	4	->
water	16:12	0:0	4	breaks
op	16:19	0:0	4	|=
water	16:22	0:0	4	BREAK_LEFT
water	16:32	0:0	4	;
return	17:8	17:14	4	
water	18:4	0:0	4	}
for	19:4	25:4	2	(i = 0 ;i < s -> metric_length;i ++)
forinit	19:9	19:14	3	i = 0 ;
water	19:9	0:0	4	i
op	19:11	0:0	4	=
water	19:13	0:0	4	0
water	19:14	0:0	4	;
cond	19:16	19:23	3	i < s -> metric_length
water	19:16	0:0	4	i
op	19:18	0:0	4	<
water	19:20	0:0	4	s
op	19:21	0:0	4	->
water	19:23	0:0	4	metric_length
forexpr	19:38	19:39	3	i ++
water	19:38	0:0	4	i
op	19:39	0:0	4	++
stmts	19:43	25:4	3	
water	19:43	0:0	4	{
water	20:8	0:0	4	l
op	20:10	0:0	4	=
water	20:12	0:0	4	f2
op	20:14	0:0	4	->
water	20:16	0:0	4	diffs
op	20:21	0:0	4	[
water	20:22	0:0	4	i
op	20:23	0:0	4	]
op	20:25	0:0	4	-
water	20:27	0:0	4	f3
op	20:29	0:0	4	->
water	20:31	0:0	4	diffs
op	20:36	0:0	4	[
water	20:37	0:0	4	i
op	20:38	0:0	4	]
water	20:39	0:0	4	;
if	21:8	22:22	4	(l > max_l)
cond	21:13	21:17	5	l > max_l
water	21:13	0:0	6	l
op	21:15	0:0	6	>
water	21:17	0:0	6	max_l
stmts	22:12	22:22	5	
water	22:12	0:0	6	max_l
op	22:18	0:0	6	=
water	22:21	0:0	6	l
water	22:22	0:0	6	;
if	23:8	24:22	4	(- l > max_r)
cond	23:12	23:17	5	- l > max_r
op	23:12	0:0	6	-
water	23:13	0:0	6	l
op	23:15	0:0	6	>
water	23:17	0:0	6	max_r
stmts	24:12	24:22	5	
water	24:12	0:0	6	max_r
op	24:18	0:0	6	=
op	24:20	0:0	6	-
water	24:21	0:0	6	l
water	24:22	0:0	6	;
water	25:4	0:0	4	}
if	27:4	28:14	2	(max_l + max_r < 128)
cond	27:8	27:24	3	max_l + max_r < 128
water	27:8	0:0	4	max_l
op	27:14	0:0	4	+
water	27:16	0:0	4	max_r
op	27:22	0:0	4	<
water	27:24	0:0	4	128
stmts	28:8	28:14	3	
return	28:8	28:14	4	
if	29:4	30:32	2	(max_l > 4 * max_r)
cond	29:8	29:20	3	max_l > 4 * max_r
water	29:8	0:0	4	max_l
op	29:14	0:0	4	>
water	29:16	0:0	4	4
op	29:18	0:0	4	*
water	29:20	0:0	4	max_r
stmts	30:8	30:32	3	
water	30:8	0:0	4	f1
op	30:10	0:0	4	->
water	30:12	0:0	4	breaks
op	30:19	0:0	4	|=
water	30:22	0:0	4	BREAK_LEFT
water	30:32	0:0	4	;
if	31:4	32:33	2	(max_r > 4 * max_l)
cond	31:8	31:20	3	max_r > 4 * max_l
water	31:8	0:0	4	max_r
op	31:14	0:0	4	>
water	31:16	0:0	4	4
op	31:18	0:0	4	*
water	31:20	0:0	4	max_l
stmts	32:8	32:33	3	
water	32:8	0:0	4	f2
op	32:10	0:0	4	->
water	32:12	0:0	4	breaks
op	32:19	0:0	4	|=
water	32:22	0:0	4	BREAK_RIGHT
water	32:33	0:0	4	;
