func	1:0	56:0	0	static int	mxf_parse_mpeg2_frame
params	1:32	0:0	1	
param	1:33	1:51	2	AVFormatContext *	s
param	1:53	1:65	2	AVStream *	st
param	2:33	2:46	2	AVPacket *	pkt
param	2:48	2:64	2	MXFIndexEntry *	e
stmnts	0:0	55:25	1	
decl	4:4	4:40	2	MXFStreamContext	*sc
op	4:25	0:0	2	=
water	4:27	0:0	2	st
op	4:29	0:0	2	->
water	4:31	0:0	2	priv_data
decl	5:4	5:19	2	uint32_t	c
op	5:15	0:0	2	=
op	5:17	0:0	2	-
water	5:18	0:0	2	1
decl	6:4	6:9	2	int	i
for	7:4	52:4	2	(i = 0 ;i < pkt -> size - 4;i ++)
forinit	7:8	7:13	3	i = 0 ;
water	7:8	0:0	4	i
op	7:10	0:0	4	=
water	7:12	0:0	4	0
water	7:13	0:0	4	;
cond	7:15	7:31	3	i < pkt -> size - 4
water	7:15	0:0	4	i
op	7:17	0:0	4	<
water	7:19	0:0	4	pkt
op	7:22	0:0	4	->
water	7:24	0:0	4	size
op	7:29	0:0	4	-
water	7:31	0:0	4	4
forexpr	7:34	7:35	3	i ++
water	7:34	0:0	4	i
op	7:35	0:0	4	++
stmts	7:39	52:4	3	
water	7:39	0:0	4	{
water	8:8	0:0	4	c
op	8:10	0:0	4	=
water	8:12	0:0	4	(
water	8:13	0:0	4	c
op	8:14	0:0	4	<<
water	8:16	0:0	4	8
water	8:17	0:0	4	)
op	8:19	0:0	4	+
water	8:21	0:0	4	pkt
op	8:24	0:0	4	->
water	8:26	0:0	4	data
op	8:30	0:0	4	[
water	8:31	0:0	4	i
op	8:32	0:0	4	]
water	8:33	0:0	4	;
if	9:8	19:8	4	(c == 0 x1b5)
cond	9:12	9:18	5	c == 0 x1b5
water	9:12	0:0	6	c
op	9:14	0:0	6	==
water	9:17	0:0	6	0
water	9:18	0:0	6	x1b5
stmts	9:24	19:8	5	
water	9:24	0:0	6	{
if	10:12	13:12	6	(( pkt -> data [ i + 1 ] & 0 xf0 ) == 0 x10)
cond	10:16	10:44	7	( pkt -> data [ i + 1 ] & 0 xf0 ) == 0 x10
water	10:16	0:0	8	(
water	10:17	0:0	8	pkt
op	10:20	0:0	8	->
water	10:22	0:0	8	data
op	10:26	0:0	8	[
water	10:27	0:0	8	i
op	10:28	0:0	8	+
water	10:29	0:0	8	1
op	10:30	0:0	8	]
op	10:32	0:0	8	&
water	10:34	0:0	8	0
water	10:35	0:0	8	xf0
water	10:38	0:0	8	)
op	10:40	0:0	8	==
water	10:43	0:0	8	0
water	10:44	0:0	8	x10
stmts	10:49	13:12	7	
water	10:49	0:0	8	{
water	11:16	0:0	8	st
op	11:18	0:0	8	->
water	11:20	0:0	8	codec
op	11:25	0:0	8	->
water	11:27	0:0	8	profile
op	11:35	0:0	8	=
water	11:37	0:0	8	pkt
op	11:40	0:0	8	->
water	11:42	0:0	8	data
op	11:46	0:0	8	[
water	11:47	0:0	8	i
op	11:48	0:0	8	+
water	11:49	0:0	8	1
op	11:50	0:0	8	]
op	11:52	0:0	8	&
water	11:54	0:0	8	0
water	11:55	0:0	8	x07
water	11:58	0:0	8	;
water	12:16	0:0	8	st
op	12:18	0:0	8	->
water	12:20	0:0	8	codec
op	12:25	0:0	8	->
water	12:27	0:0	8	level
op	12:35	0:0	8	=
water	12:37	0:0	8	pkt
op	12:40	0:0	8	->
water	12:42	0:0	8	data
op	12:46	0:0	8	[
water	12:47	0:0	8	i
op	12:48	0:0	8	+
water	12:49	0:0	8	2
op	12:50	0:0	8	]
op	12:52	0:0	8	>>
water	12:55	0:0	8	4
water	12:56	0:0	8	;
water	13:12	0:0	8	}
else	13:14	18:12	6
stmts	13:19	18:12	7	
if	13:19	18:12	8	(i + 5 < pkt -> size && ( pkt -> data [ i + 1 ] & 0 xf0 ) == 0 x80)
cond	13:23	13:72	9	i + 5 < pkt -> size && ( pkt -> data [ i + 1 ] & 0 xf0 ) == 0 x80
water	13:23	0:0	10	i
op	13:25	0:0	10	+
water	13:27	0:0	10	5
op	13:29	0:0	10	<
water	13:31	0:0	10	pkt
op	13:34	0:0	10	->
water	13:36	0:0	10	size
op	13:41	0:0	10	&&
water	13:44	0:0	10	(
water	13:45	0:0	10	pkt
op	13:48	0:0	10	->
water	13:50	0:0	10	data
op	13:54	0:0	10	[
water	13:55	0:0	10	i
op	13:56	0:0	10	+
water	13:57	0:0	10	1
op	13:58	0:0	10	]
op	13:60	0:0	10	&
water	13:62	0:0	10	0
water	13:63	0:0	10	xf0
water	13:66	0:0	10	)
op	13:68	0:0	10	==
water	13:71	0:0	10	0
water	13:72	0:0	10	x80
stmts	13:77	18:12	9	
water	13:77	0:0	10	{
water	14:16	0:0	10	sc
op	14:18	0:0	10	->
water	14:20	0:0	10	interlaced
op	14:31	0:0	10	=
op	14:33	0:0	10	!
water	14:34	0:0	10	(
water	14:35	0:0	10	pkt
op	14:38	0:0	10	->
water	14:40	0:0	10	data
op	14:44	0:0	10	[
water	14:45	0:0	10	i
op	14:46	0:0	10	+
water	14:47	0:0	10	5
op	14:48	0:0	10	]
op	14:50	0:0	10	&
water	14:52	0:0	10	0
water	14:53	0:0	10	x80
water	14:56	0:0	10	)
water	14:57	0:0	10	;
if	15:16	16:70	10	(sc -> interlaced)
cond	15:20	15:24	11	sc -> interlaced
water	15:20	0:0	12	sc
op	15:22	0:0	12	->
water	15:24	0:0	12	interlaced
stmts	16:20	16:70	11	
water	16:20	0:0	12	sc
op	16:22	0:0	12	->
water	16:24	0:0	12	field_dominance
op	16:40	0:0	12	=
water	16:42	0:0	12	1
op	16:44	0:0	12	+
op	16:46	0:0	12	!
water	16:47	0:0	12	(
water	16:48	0:0	12	pkt
op	16:51	0:0	12	->
water	16:53	0:0	12	data
op	16:57	0:0	12	[
water	16:58	0:0	12	i
op	16:59	0:0	12	+
water	16:60	0:0	12	4
op	16:61	0:0	12	]
op	16:63	0:0	12	&
water	16:65	0:0	12	0
water	16:66	0:0	12	x80
water	16:69	0:0	12	)
water	16:70	0:0	12	;
break	17:16	17:21	10	
water	18:12	0:0	10	}
water	19:8	0:0	6	}
else	19:10	25:8	4
stmts	19:15	25:8	5	
if	19:15	25:8	6	(c == 0 x1b8)
cond	19:19	19:25	7	c == 0 x1b8
water	19:19	0:0	8	c
op	19:21	0:0	8	==
water	19:24	0:0	8	0
water	19:25	0:0	8	x1b8
stmts	19:31	25:8	7	
water	19:31	0:0	8	{
if	20:12	24:12	8	(pkt -> data [ i + 4 ] >> 6 & 0 x01)
cond	20:16	20:37	9	pkt -> data [ i + 4 ] >> 6 & 0 x01
water	20:16	0:0	10	pkt
op	20:19	0:0	10	->
water	20:21	0:0	10	data
op	20:25	0:0	10	[
water	20:26	0:0	10	i
op	20:27	0:0	10	+
water	20:28	0:0	10	4
op	20:29	0:0	10	]
op	20:30	0:0	10	>>
water	20:32	0:0	10	6
op	20:34	0:0	10	&
water	20:36	0:0	10	0
water	20:37	0:0	10	x01
stmts	20:42	24:12	9	
water	20:42	0:0	10	{
water	21:16	0:0	10	sc
op	21:18	0:0	10	->
water	21:20	0:0	10	closed_gop
op	21:31	0:0	10	=
water	21:33	0:0	10	1
water	21:34	0:0	10	;
if	22:16	23:36	10	(e -> flags & 0 x40)
cond	22:20	22:32	11	e -> flags & 0 x40
water	22:20	0:0	12	e
op	22:21	0:0	12	->
water	22:23	0:0	12	flags
op	22:29	0:0	12	&
water	22:31	0:0	12	0
water	22:32	0:0	12	x40
stmts	23:20	23:36	11	
water	23:20	0:0	12	e
op	23:21	0:0	12	->
water	23:23	0:0	12	flags
op	23:29	0:0	12	|=
water	23:32	0:0	12	0
water	23:33	0:0	12	x80
water	23:36	0:0	12	;
water	24:12	0:0	10	}
water	25:8	0:0	8	}
else	25:10	35:8	4
stmts	25:15	35:8	5	
if	25:15	35:8	6	(c == 0 x1b3)
cond	25:19	25:25	7	c == 0 x1b3
water	25:19	0:0	8	c
op	25:21	0:0	8	==
water	25:24	0:0	8	0
water	25:25	0:0	8	x1b3
stmts	25:31	35:8	7	
water	25:31	0:0	8	{
water	26:12	0:0	8	e
op	26:13	0:0	8	->
water	26:15	0:0	8	flags
op	26:21	0:0	8	|=
water	26:24	0:0	8	0
water	26:25	0:0	8	x40
water	26:28	0:0	8	;
switch	27:12	34:12	8	(( pkt -> data [ i + 4 ] >> 4 ) & 0 xf)
cond	27:20	27:43	9	( pkt -> data [ i + 4 ] >> 4 ) & 0 xf
water	27:20	0:0	10	(
water	27:21	0:0	10	pkt
op	27:24	0:0	10	->
water	27:26	0:0	10	data
op	27:30	0:0	10	[
water	27:31	0:0	10	i
op	27:32	0:0	10	+
water	27:33	0:0	10	4
op	27:34	0:0	10	]
op	27:35	0:0	10	>>
water	27:37	0:0	10	4
water	27:38	0:0	10	)
op	27:40	0:0	10	&
water	27:42	0:0	10	0
water	27:43	0:0	10	xf
stmts	27:47	34:12	9	
water	27:47	0:0	10	{
label	28:12	28:18	10	case 2 :
water	28:21	0:0	10	sc
op	28:23	0:0	10	->
water	28:25	0:0	10	aspect_ratio
op	28:38	0:0	10	=
water	28:40	0:0	10	(
water	28:41	0:0	10	AVRational
water	28:51	0:0	10	)
water	28:52	0:0	10	{
water	28:55	0:0	10	4
water	28:56	0:0	10	,
water	28:59	0:0	10	3
water	28:60	0:0	10	}
water	28:61	0:0	10	;
break	28:63	28:68	10	
label	29:12	29:18	10	case 3 :
water	29:21	0:0	10	sc
op	29:23	0:0	10	->
water	29:25	0:0	10	aspect_ratio
op	29:38	0:0	10	=
water	29:40	0:0	10	(
water	29:41	0:0	10	AVRational
water	29:51	0:0	10	)
water	29:52	0:0	10	{
water	29:54	0:0	10	16
water	29:56	0:0	10	,
water	29:59	0:0	10	9
water	29:60	0:0	10	}
water	29:61	0:0	10	;
break	29:63	29:68	10	
label	30:12	30:18	10	case 4 :
water	30:21	0:0	10	sc
op	30:23	0:0	10	->
water	30:25	0:0	10	aspect_ratio
op	30:38	0:0	10	=
water	30:40	0:0	10	(
water	30:41	0:0	10	AVRational
water	30:51	0:0	10	)
water	30:52	0:0	10	{
water	30:53	0:0	10	221
water	30:56	0:0	10	,
water	30:57	0:0	10	100
water	30:60	0:0	10	}
water	30:61	0:0	10	;
break	30:63	30:68	10	
label	31:12	31:19	10	default :
call	32:16	33:72	10	av_reduce
arg	32:26	32:47	11	&sc->aspect_ratio.num
op	32:26	0:0	12	&
water	32:27	0:0	12	sc
op	32:29	0:0	12	->
water	32:31	0:0	12	aspect_ratio
op	32:43	0:0	12	.
water	32:44	0:0	12	num
arg	32:49	32:70	11	&sc->aspect_ratio.den
op	32:49	0:0	12	&
water	32:50	0:0	12	sc
op	32:52	0:0	12	->
water	32:54	0:0	12	aspect_ratio
op	32:66	0:0	12	.
water	32:67	0:0	12	den
arg	33:26	33:42	11	st->codec->width
water	33:26	0:0	12	st
op	33:28	0:0	12	->
water	33:30	0:0	12	codec
op	33:35	0:0	12	->
water	33:37	0:0	12	width
arg	33:44	33:61	11	st->codec->height
water	33:44	0:0	12	st
op	33:46	0:0	12	->
water	33:48	0:0	12	codec
op	33:53	0:0	12	->
water	33:55	0:0	12	height
arg	33:63	33:72	11	1024*1024
water	33:63	0:0	12	1024
op	33:67	0:0	12	*
water	33:68	0:0	12	1024
water	33:73	0:0	10	;
water	34:12	0:0	10	}
water	35:8	0:0	8	}
else	35:10	51:8	4
stmts	35:15	51:8	5	
if	35:15	51:8	6	(c == 0 x100)
cond	35:19	35:25	7	c == 0 x100
water	35:19	0:0	8	c
op	35:21	0:0	8	==
water	35:24	0:0	8	0
water	35:25	0:0	8	x100
stmts	35:31	51:8	7	
water	35:31	0:0	8	{
decl	36:12	36:54	8	int	pict_type
op	36:26	0:0	8	=
water	36:28	0:0	8	(
water	36:29	0:0	8	pkt
op	36:32	0:0	8	->
water	36:34	0:0	8	data
op	36:38	0:0	8	[
water	36:39	0:0	8	i
op	36:40	0:0	8	+
water	36:41	0:0	8	2
op	36:42	0:0	8	]
op	36:43	0:0	8	>>
water	36:45	0:0	8	3
water	36:46	0:0	8	)
op	36:48	0:0	8	&
water	36:50	0:0	8	0
water	36:51	0:0	8	x07
water	37:12	0:0	8	e
op	37:13	0:0	8	->
water	37:15	0:0	8	temporal_ref
op	37:28	0:0	8	=
water	37:30	0:0	8	(
water	37:31	0:0	8	pkt
op	37:34	0:0	8	->
water	37:36	0:0	8	data
op	37:40	0:0	8	[
water	37:41	0:0	8	i
op	37:42	0:0	8	+
water	37:43	0:0	8	1
op	37:44	0:0	8	]
op	37:45	0:0	8	<<
water	37:47	0:0	8	2
water	37:48	0:0	8	)
op	37:50	0:0	8	|
water	37:52	0:0	8	(
water	37:53	0:0	8	pkt
op	37:56	0:0	8	->
water	37:58	0:0	8	data
op	37:62	0:0	8	[
water	37:63	0:0	8	i
op	37:64	0:0	8	+
water	37:65	0:0	8	2
op	37:66	0:0	8	]
op	37:67	0:0	8	>>
water	37:69	0:0	8	6
water	37:70	0:0	8	)
water	37:71	0:0	8	;
if	38:12	41:12	8	(pict_type == 2)
cond	38:16	38:29	9	pict_type == 2
water	38:16	0:0	10	pict_type
op	38:26	0:0	10	==
water	38:29	0:0	10	2
stmts	38:32	41:12	9	
water	38:32	0:0	10	{
water	39:16	0:0	10	e
op	39:17	0:0	10	->
water	39:19	0:0	10	flags
op	39:25	0:0	10	|=
water	39:28	0:0	10	0
water	39:29	0:0	10	x22
water	39:32	0:0	10	;
water	40:16	0:0	10	sc
op	40:18	0:0	10	->
water	40:20	0:0	10	closed_gop
op	40:31	0:0	10	=
water	40:33	0:0	10	0
water	40:34	0:0	10	;
water	41:12	0:0	10	}
else	41:14	47:12	8
stmts	41:19	47:12	9	
if	41:19	47:12	10	(pict_type == 3)
cond	41:23	41:36	11	pict_type == 3
water	41:23	0:0	12	pict_type
op	41:33	0:0	12	==
water	41:36	0:0	12	3
stmts	41:39	47:12	11	
water	41:39	0:0	12	{
if	42:16	43:36	12	(sc -> closed_gop)
cond	42:20	42:24	13	sc -> closed_gop
water	42:20	0:0	14	sc
op	42:22	0:0	14	->
water	42:24	0:0	14	closed_gop
stmts	43:20	43:36	13	
water	43:20	0:0	14	e
op	43:21	0:0	14	->
water	43:23	0:0	14	flags
op	43:29	0:0	14	|=
water	43:32	0:0	14	0
water	43:33	0:0	14	x13
water	43:36	0:0	14	;
else	44:16	45:36	12
stmts	45:20	45:36	13	
water	45:20	0:0	14	e
op	45:21	0:0	14	->
water	45:23	0:0	14	flags
op	45:29	0:0	14	|=
water	45:32	0:0	14	0
water	45:33	0:0	14	x33
water	45:36	0:0	14	;
water	46:16	0:0	12	sc
op	46:18	0:0	12	->
water	46:20	0:0	12	temporal_reordering
op	46:40	0:0	12	=
op	46:42	0:0	12	-
water	46:43	0:0	12	1
water	46:44	0:0	12	;
water	47:12	0:0	12	}
else	47:14	50:12	8
stmts	47:19	50:12	9	
if	47:19	50:12	10	(! pict_type)
cond	47:23	47:24	11	! pict_type
op	47:23	0:0	12	!
water	47:24	0:0	12	pict_type
stmts	47:35	50:12	11	
water	47:35	0:0	12	{
call	48:16	48:69	12	av_log
arg	48:23	48:24	13	s
water	48:23	0:0	14	s
arg	48:26	48:38	13	AV_LOG_ERROR
water	48:26	0:0	14	AV_LOG_ERROR
arg	48:40	48:69	13	"error parsing mpeg2 frame\n"
water	48:40	0:0	14	"error parsing mpeg2 frame\n"
water	48:70	0:0	12	;
return	49:16	49:24	12	0
water	49:23	0:0	13	0
water	50:12	0:0	12	}
water	51:8	0:0	8	}
water	52:4	0:0	4	}
if	53:4	54:56	2	(s -> oformat != & ff_mxf_d10_muxer)
cond	53:8	53:23	3	s -> oformat != & ff_mxf_d10_muxer
water	53:8	0:0	4	s
op	53:9	0:0	4	->
water	53:11	0:0	4	oformat
op	53:19	0:0	4	!=
op	53:22	0:0	4	&
water	53:23	0:0	4	ff_mxf_d10_muxer
stmts	54:8	54:56	3	
water	54:8	0:0	4	sc
op	54:10	0:0	4	->
water	54:12	0:0	4	codec_ul
op	54:21	0:0	4	=
call	54:23	54:55	4	mxf_get_mpeg2_codec_ul
arg	54:46	54:55	5	st->codec
water	54:46	0:0	6	st
op	54:48	0:0	6	->
water	54:50	0:0	6	codec
water	54:56	0:0	4	;
return	55:4	55:25	2	!!sc->codec_ul
op	55:11	0:0	3	!
op	55:12	0:0	3	!
water	55:13	0:0	3	sc
op	55:15	0:0	3	->
water	55:17	0:0	3	codec_ul
