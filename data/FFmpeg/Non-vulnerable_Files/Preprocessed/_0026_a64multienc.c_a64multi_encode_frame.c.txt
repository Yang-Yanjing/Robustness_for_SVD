func	1:0	110:0	0	static int	a64multi_encode_frame
params	1:32	0:0	1	
param	1:33	1:54	2	AVCodecContext *	avctx
param	1:56	1:69	2	AVPacket *	pkt
param	2:33	2:49	2	const AVFrame *	p
param	2:51	2:66	2	int *	got_packet
stmnts	0:0	109:12	1	
decl	4:4	4:36	2	A64Context	*c
op	4:18	0:0	2	=
water	4:20	0:0	2	avctx
op	4:25	0:0	2	->
water	4:27	0:0	2	priv_data
decl	5:4	5:13	2	int	frame
decl	6:4	6:12	2	int	x
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	y
decl	7:4	7:16	2	int	b_height
decl	8:4	8:15	2	int	b_width
decl	9:4	9:21	2	int	req_size
water	9:16	0:0	2	,
decl	9:4	9:21	2	int	ret
decl	10:4	10:23	2	uint8_t	*buf
op	10:17	0:0	2	=
water	10:19	0:0	2	NULL
decl	11:4	11:36	2	int	*charmap
op	11:21	0:0	2	=
water	11:23	0:0	2	c
op	11:24	0:0	2	->
water	11:26	0:0	2	mc_charmap
decl	12:4	12:35	2	uint8_t	*colram
op	12:21	0:0	2	=
water	12:23	0:0	2	c
op	12:24	0:0	2	->
water	12:26	0:0	2	mc_colram
decl	13:4	13:36	2	uint8_t	*charset
op	13:21	0:0	2	=
water	13:23	0:0	2	c
op	13:24	0:0	2	->
water	13:26	0:0	2	mc_charset
decl	14:4	14:41	2	int	*meta
op	14:21	0:0	2	=
water	14:23	0:0	2	c
op	14:24	0:0	2	->
water	14:26	0:0	2	mc_meta_charset
decl	15:4	15:36	2	int	*best_cb
op	15:21	0:0	2	=
water	15:23	0:0	2	c
op	15:24	0:0	2	->
water	15:26	0:0	2	mc_best_cb
decl	16:4	16:47	2	int	charset_size
op	16:21	0:0	2	=
water	16:23	0:0	2	0
water	16:24	0:0	2	x800
op	16:29	0:0	2	*
water	16:31	0:0	2	(
water	16:32	0:0	2	INTERLACED
op	16:43	0:0	2	+
water	16:45	0:0	2	1
water	16:46	0:0	2	)
decl	17:4	17:45	2	int	colram_size
op	17:21	0:0	2	=
water	17:23	0:0	2	0
water	17:24	0:0	2	x100
op	17:29	0:0	2	*
water	17:31	0:0	2	c
op	17:32	0:0	2	->
water	17:34	0:0	2	mc_use_5col
decl	18:4	18:19	2	int	screen_size
if	19:4	23:4	2	(CROP_SCREENS)
cond	19:7	19:7	3	CROP_SCREENS
water	19:7	0:0	4	CROP_SCREENS
stmts	19:21	23:4	3	
water	19:21	0:0	4	{
water	20:8	0:0	4	b_height
op	20:17	0:0	4	=
call	20:19	20:46	4	FFMIN
arg	20:25	20:38	5	avctx->height
water	20:25	0:0	6	avctx
op	20:30	0:0	6	->
water	20:32	0:0	6	height
arg	20:39	20:46	5	C64YRES
water	20:39	0:0	6	C64YRES
op	20:48	0:0	4	>>
water	20:51	0:0	4	3
water	20:52	0:0	4	;
water	21:8	0:0	4	b_width
op	21:17	0:0	4	=
call	21:19	21:46	4	FFMIN
arg	21:25	21:38	5	avctx->width
water	21:25	0:0	6	avctx
op	21:30	0:0	6	->
water	21:32	0:0	6	width
arg	21:39	21:46	5	C64XRES
water	21:39	0:0	6	C64XRES
op	21:48	0:0	4	>>
water	21:51	0:0	4	3
water	21:52	0:0	4	;
water	22:8	0:0	4	screen_size
op	22:20	0:0	4	=
water	22:22	0:0	4	b_width
op	22:30	0:0	4	*
water	22:32	0:0	4	b_height
water	22:40	0:0	4	;
water	23:4	0:0	4	}
else	23:6	27:4	2
stmts	23:11	27:4	3	
water	23:11	0:0	4	{
water	24:8	0:0	4	b_height
op	24:17	0:0	4	=
water	24:19	0:0	4	C64YRES
op	24:27	0:0	4	>>
water	24:30	0:0	4	3
water	24:31	0:0	4	;
water	25:8	0:0	4	b_width
op	25:17	0:0	4	=
water	25:19	0:0	4	C64XRES
op	25:27	0:0	4	>>
water	25:30	0:0	4	3
water	25:31	0:0	4	;
water	26:8	0:0	4	screen_size
op	26:20	0:0	4	=
water	26:22	0:0	4	0
water	26:23	0:0	4	x400
water	26:27	0:0	4	;
water	27:4	0:0	4	}
if	29:4	39:4	2	(! p)
cond	29:8	29:9	3	! p
op	29:8	0:0	4	!
water	29:9	0:0	4	p
stmts	29:12	39:4	3	
water	29:12	0:0	4	{
if	31:8	31:37	4	(! c -> mc_lifetime)
cond	31:12	31:16	5	! c -> mc_lifetime
op	31:12	0:0	6	!
water	31:13	0:0	6	c
op	31:14	0:0	6	->
water	31:16	0:0	6	mc_lifetime
stmts	31:29	31:37	5	
return	31:29	31:37	6	0
water	31:36	0:0	7	0
if	33:8	35:8	4	(! c -> mc_frame_counter)
cond	33:12	33:16	5	! c -> mc_frame_counter
op	33:12	0:0	6	!
water	33:13	0:0	6	c
op	33:14	0:0	6	->
water	33:16	0:0	6	mc_frame_counter
stmts	33:34	35:8	5	
water	33:34	0:0	6	{
water	34:12	0:0	6	c
op	34:13	0:0	6	->
water	34:15	0:0	6	mc_lifetime
op	34:27	0:0	6	=
water	34:29	0:0	6	0
water	34:30	0:0	6	;
water	35:8	0:0	6	}
else	37:8	37:49	4
stmts	37:13	37:49	5	
water	37:13	0:0	6	c
op	37:14	0:0	6	->
water	37:16	0:0	6	mc_lifetime
op	37:28	0:0	6	=
water	37:30	0:0	6	c
op	37:31	0:0	6	->
water	37:33	0:0	6	mc_frame_counter
water	37:49	0:0	6	;
water	39:4	0:0	4	}
else	39:6	49:4	2
stmts	39:11	49:4	3	
water	39:11	0:0	4	{
if	41:8	48:8	4	(c -> mc_frame_counter < c -> mc_lifetime)
cond	41:12	41:37	5	c -> mc_frame_counter < c -> mc_lifetime
water	41:12	0:0	6	c
op	41:13	0:0	6	->
water	41:15	0:0	6	mc_frame_counter
op	41:32	0:0	6	<
water	41:34	0:0	6	c
op	41:35	0:0	6	->
water	41:37	0:0	6	mc_lifetime
stmts	41:50	48:8	5	
water	41:50	0:0	6	{
call	42:12	42:74	6	to_meta_with_crop
arg	42:30	42:35	7	avctx
water	42:30	0:0	8	avctx
arg	42:37	42:38	7	p
water	42:37	0:0	8	p
arg	42:40	42:74	7	meta+32000*c->mc_frame_counter
water	42:40	0:0	8	meta
op	42:45	0:0	8	+
water	42:47	0:0	8	32000
op	42:53	0:0	8	*
water	42:55	0:0	8	c
op	42:56	0:0	8	->
water	42:58	0:0	8	mc_frame_counter
water	42:75	0:0	6	;
water	43:12	0:0	6	c
op	43:13	0:0	6	->
water	43:15	0:0	6	mc_frame_counter
op	43:31	0:0	6	++
water	43:33	0:0	6	;
if	44:12	45:36	6	(c -> next_pts == AV_NOPTS_VALUE)
cond	44:16	44:31	7	c -> next_pts == AV_NOPTS_VALUE
water	44:16	0:0	8	c
op	44:17	0:0	8	->
water	44:19	0:0	8	next_pts
op	44:28	0:0	8	==
water	44:31	0:0	8	AV_NOPTS_VALUE
stmts	45:16	45:36	7	
water	45:16	0:0	8	c
op	45:17	0:0	8	->
water	45:19	0:0	8	next_pts
op	45:28	0:0	8	=
water	45:30	0:0	8	p
op	45:31	0:0	8	->
water	45:33	0:0	8	pts
water	45:36	0:0	8	;
return	47:12	47:20	6	0
water	47:19	0:0	7	0
water	48:8	0:0	6	}
water	49:4	0:0	4	}
if	51:4	108:4	2	(c -> mc_frame_counter == c -> mc_lifetime)
cond	51:8	51:34	3	c -> mc_frame_counter == c -> mc_lifetime
water	51:8	0:0	4	c
op	51:9	0:0	4	->
water	51:11	0:0	4	mc_frame_counter
op	51:28	0:0	4	==
water	51:31	0:0	4	c
op	51:32	0:0	4	->
water	51:34	0:0	4	mc_lifetime
stmts	51:47	108:4	3	
water	51:47	0:0	4	{
water	52:8	0:0	4	req_size
op	52:17	0:0	4	=
water	52:19	0:0	4	0
water	52:20	0:0	4	;
if	54:8	75:8	4	(c -> mc_lifetime)
cond	54:12	54:15	5	c -> mc_lifetime
water	54:12	0:0	6	c
op	54:13	0:0	6	->
water	54:15	0:0	6	mc_lifetime
stmts	54:28	75:8	5	
water	54:28	0:0	6	{
decl	55:12	55:86	6	int	alloc_size
op	55:27	0:0	6	=
water	55:29	0:0	6	charset_size
op	55:42	0:0	6	+
water	55:44	0:0	6	c
op	55:45	0:0	6	->
water	55:47	0:0	6	mc_lifetime
op	55:58	0:0	6	*
water	55:59	0:0	6	(
water	55:60	0:0	6	screen_size
op	55:72	0:0	6	+
water	55:74	0:0	6	colram_size
water	55:85	0:0	6	)
if	56:12	57:26	6	(( ret =ff_alloc_packet2 (avctx ,pkt ,alloc_size ,0 ) ) < 0)
cond	56:16	56:70	7	( ret =ff_alloc_packet2 (avctx ,pkt ,alloc_size ,0 ) ) < 0
water	56:16	0:0	8	(
water	56:17	0:0	8	ret
op	56:21	0:0	8	=
call	56:23	56:65	8	ff_alloc_packet2
arg	56:40	56:45	9	avctx
water	56:40	0:0	10	avctx
arg	56:47	56:50	9	pkt
water	56:47	0:0	10	pkt
arg	56:52	56:62	9	alloc_size
water	56:52	0:0	10	alloc_size
arg	56:64	56:65	9	0
water	56:64	0:0	10	0
water	56:66	0:0	8	)
op	56:68	0:0	8	<
water	56:70	0:0	8	0
stmts	57:16	57:26	7	
return	57:16	57:26	8	ret
water	57:23	0:0	9	ret
water	58:12	0:0	6	buf
op	58:16	0:0	6	=
water	58:18	0:0	6	pkt
op	58:21	0:0	6	->
water	58:23	0:0	6	data
water	58:27	0:0	6	;
water	60:12	0:0	6	ret
op	60:16	0:0	6	=
call	60:18	61:70	6	avpriv_init_elbg
arg	60:35	60:39	7	meta
water	60:35	0:0	8	meta
arg	60:41	60:43	7	32
water	60:41	0:0	8	32
arg	60:45	60:66	7	1000*c->mc_lifetime
water	60:45	0:0	8	1000
op	60:50	0:0	8	*
water	60:52	0:0	8	c
op	60:53	0:0	8	->
water	60:55	0:0	8	mc_lifetime
arg	60:68	60:75	7	best_cb
water	60:68	0:0	8	best_cb
arg	61:31	61:44	7	CHARSET_CHARS
water	61:31	0:0	8	CHARSET_CHARS
arg	61:46	61:48	7	50
water	61:46	0:0	8	50
arg	61:50	61:57	7	charmap
water	61:50	0:0	8	charmap
arg	61:59	61:70	7	&c->randctx
op	61:59	0:0	8	&
water	61:60	0:0	8	c
op	61:61	0:0	8	->
water	61:63	0:0	8	randctx
water	61:71	0:0	6	;
if	62:12	63:26	6	(ret < 0)
cond	62:16	62:22	7	ret < 0
water	62:16	0:0	8	ret
op	62:20	0:0	8	<
water	62:22	0:0	8	0
stmts	63:16	63:26	7	
return	63:16	63:26	8	ret
water	63:23	0:0	9	ret
water	64:12	0:0	6	ret
op	64:16	0:0	6	=
call	64:18	65:68	6	avpriv_do_elbg
arg	64:33	64:37	7	meta
water	64:33	0:0	8	meta
arg	64:39	64:41	7	32
water	64:39	0:0	8	32
arg	64:43	64:64	7	1000*c->mc_lifetime
water	64:43	0:0	8	1000
op	64:48	0:0	8	*
water	64:50	0:0	8	c
op	64:51	0:0	8	->
water	64:53	0:0	8	mc_lifetime
arg	64:66	64:73	7	best_cb
water	64:66	0:0	8	best_cb
arg	65:29	65:42	7	CHARSET_CHARS
water	65:29	0:0	8	CHARSET_CHARS
arg	65:44	65:46	7	50
water	65:44	0:0	8	50
arg	65:48	65:55	7	charmap
water	65:48	0:0	8	charmap
arg	65:57	65:68	7	&c->randctx
op	65:57	0:0	8	&
water	65:58	0:0	8	c
op	65:59	0:0	8	->
water	65:61	0:0	8	randctx
water	65:69	0:0	6	;
if	66:12	67:26	6	(ret < 0)
cond	66:16	66:22	7	ret < 0
water	66:16	0:0	8	ret
op	66:20	0:0	8	<
water	66:22	0:0	8	0
stmts	67:16	67:26	7	
return	67:16	67:26	8	ret
water	67:23	0:0	9	ret
call	69:12	69:49	6	render_charset
arg	69:27	69:32	7	avctx
water	69:27	0:0	8	avctx
arg	69:34	69:41	7	charset
water	69:34	0:0	8	charset
arg	69:43	69:49	7	colram
water	69:43	0:0	8	colram
water	69:50	0:0	6	;
call	71:12	71:45	6	memcpy
arg	71:19	71:22	7	buf
water	71:19	0:0	8	buf
arg	71:24	71:31	7	charset
water	71:24	0:0	8	charset
arg	71:33	71:45	7	charset_size
water	71:33	0:0	8	charset_size
water	71:46	0:0	6	;
water	73:12	0:0	6	buf
op	73:21	0:0	6	+=
water	73:24	0:0	6	charset_size
water	73:36	0:0	6	;
water	74:12	0:0	6	req_size
op	74:21	0:0	6	+=
water	74:24	0:0	6	charset_size
water	74:36	0:0	6	;
water	75:8	0:0	6	}
for	77:8	96:8	4	(frame = 0 ;frame < c -> mc_lifetime;frame ++)
forinit	77:13	77:22	5	frame = 0 ;
water	77:13	0:0	6	frame
op	77:19	0:0	6	=
water	77:21	0:0	6	0
water	77:22	0:0	6	;
cond	77:24	77:35	5	frame < c -> mc_lifetime
water	77:24	0:0	6	frame
op	77:30	0:0	6	<
water	77:32	0:0	6	c
op	77:33	0:0	6	->
water	77:35	0:0	6	mc_lifetime
forexpr	77:48	77:53	5	frame ++
water	77:48	0:0	6	frame
op	77:53	0:0	6	++
stmts	77:57	96:8	5	
water	77:57	0:0	6	{
for	79:12	83:12	6	(y = 0 ;y < b_height;y ++)
forinit	79:17	79:22	7	y = 0 ;
water	79:17	0:0	8	y
op	79:19	0:0	8	=
water	79:21	0:0	8	0
water	79:22	0:0	8	;
cond	79:24	79:28	7	y < b_height
water	79:24	0:0	8	y
op	79:26	0:0	8	<
water	79:28	0:0	8	b_height
forexpr	79:38	79:39	7	y ++
water	79:38	0:0	8	y
op	79:39	0:0	8	++
stmts	79:43	83:12	7	
water	79:43	0:0	8	{
for	80:16	82:16	8	(x = 0 ;x < b_width;x ++)
forinit	80:21	80:26	9	x = 0 ;
water	80:21	0:0	10	x
op	80:23	0:0	10	=
water	80:25	0:0	10	0
water	80:26	0:0	10	;
cond	80:28	80:32	9	x < b_width
water	80:28	0:0	10	x
op	80:30	0:0	10	<
water	80:32	0:0	10	b_width
forexpr	80:41	80:42	9	x ++
water	80:41	0:0	10	x
op	80:42	0:0	10	++
stmts	80:46	82:16	9	
water	80:46	0:0	10	{
water	81:20	0:0	10	buf
op	81:23	0:0	10	[
water	81:24	0:0	10	y
op	81:26	0:0	10	*
water	81:28	0:0	10	b_width
op	81:36	0:0	10	+
water	81:38	0:0	10	x
op	81:39	0:0	10	]
op	81:41	0:0	10	=
water	81:43	0:0	10	charmap
op	81:50	0:0	10	[
water	81:51	0:0	10	y
op	81:53	0:0	10	*
water	81:55	0:0	10	b_width
op	81:63	0:0	10	+
water	81:65	0:0	10	x
op	81:66	0:0	10	]
water	81:67	0:0	10	;
water	82:16	0:0	10	}
water	83:12	0:0	8	}
water	85:12	0:0	6	buf
op	85:16	0:0	6	+=
water	85:19	0:0	6	screen_size
water	85:30	0:0	6	;
water	86:12	0:0	6	req_size
op	86:21	0:0	6	+=
water	86:24	0:0	6	screen_size
water	86:35	0:0	6	;
if	88:12	93:12	6	(c -> mc_use_5col)
cond	88:16	88:19	7	c -> mc_use_5col
water	88:16	0:0	8	c
op	88:17	0:0	8	->
water	88:19	0:0	8	mc_use_5col
stmts	88:32	93:12	7	
water	88:32	0:0	8	{
call	89:16	89:56	8	a64_compress_colram
arg	89:36	89:39	9	buf
water	89:36	0:0	10	buf
arg	89:41	89:48	9	charmap
water	89:41	0:0	10	charmap
arg	89:50	89:56	9	colram
water	89:50	0:0	10	colram
water	89:57	0:0	8	;
water	91:16	0:0	8	buf
op	91:20	0:0	8	+=
water	91:23	0:0	8	colram_size
water	91:34	0:0	8	;
water	92:16	0:0	8	req_size
op	92:25	0:0	8	+=
water	92:28	0:0	8	colram_size
water	92:39	0:0	8	;
water	93:12	0:0	8	}
water	95:12	0:0	6	charmap
op	95:20	0:0	6	+=
water	95:23	0:0	6	1000
water	95:27	0:0	6	;
water	96:8	0:0	6	}
call	97:8	97:58	4	AV_WB32
arg	97:16	97:36	5	avctx->extradata+4
water	97:16	0:0	6	avctx
op	97:21	0:0	6	->
water	97:23	0:0	6	extradata
op	97:33	0:0	6	+
water	97:35	0:0	6	4
arg	97:39	97:58	5	c->mc_frame_counter
water	97:39	0:0	6	c
op	97:40	0:0	6	->
water	97:42	0:0	6	mc_frame_counter
water	97:59	0:0	4	;
call	98:8	98:51	4	AV_WB32
arg	98:16	98:36	5	avctx->extradata+8
water	98:16	0:0	6	avctx
op	98:21	0:0	6	->
water	98:23	0:0	6	extradata
op	98:33	0:0	6	+
water	98:35	0:0	6	8
arg	98:39	98:51	5	charset_size
water	98:39	0:0	6	charset_size
water	98:52	0:0	4	;
call	99:8	99:64	4	AV_WB32
arg	99:16	99:37	5	avctx->extradata+12
water	99:16	0:0	6	avctx
op	99:21	0:0	6	->
water	99:23	0:0	6	extradata
op	99:33	0:0	6	+
water	99:35	0:0	6	12
arg	99:39	99:64	5	screen_size+colram_size
water	99:39	0:0	6	screen_size
op	99:51	0:0	6	+
water	99:53	0:0	6	colram_size
water	99:65	0:0	4	;
water	101:8	0:0	4	c
op	101:9	0:0	4	->
water	101:11	0:0	4	mc_frame_counter
op	101:28	0:0	4	=
water	101:30	0:0	4	0
water	101:31	0:0	4	;
water	102:8	0:0	4	pkt
op	102:11	0:0	4	->
water	102:13	0:0	4	pts
op	102:17	0:0	4	=
water	102:19	0:0	4	pkt
op	102:22	0:0	4	->
water	102:24	0:0	4	dts
op	102:28	0:0	4	=
water	102:30	0:0	4	c
op	102:31	0:0	4	->
water	102:33	0:0	4	next_pts
water	102:41	0:0	4	;
water	103:8	0:0	4	c
op	103:9	0:0	4	->
water	103:11	0:0	4	next_pts
op	103:28	0:0	4	=
water	103:30	0:0	4	AV_NOPTS_VALUE
water	103:44	0:0	4	;
call	104:8	104:40	4	av_assert0
arg	104:19	104:40	5	pkt->size>=req_size
water	104:19	0:0	6	pkt
op	104:22	0:0	6	->
water	104:24	0:0	6	size
op	104:29	0:0	6	>=
water	104:32	0:0	6	req_size
water	104:41	0:0	4	;
water	105:8	0:0	4	pkt
op	105:11	0:0	4	->
water	105:13	0:0	4	size
op	105:20	0:0	4	=
water	105:22	0:0	4	req_size
water	105:30	0:0	4	;
water	106:8	0:0	4	pkt
op	106:11	0:0	4	->
water	106:13	0:0	4	flags
op	106:19	0:0	4	|=
water	106:22	0:0	4	AV_PKT_FLAG_KEY
water	106:37	0:0	4	;
op	107:8	0:0	4	*
water	107:9	0:0	4	got_packet
op	107:20	0:0	4	=
op	107:22	0:0	4	!
op	107:23	0:0	4	!
water	107:24	0:0	4	req_size
water	107:32	0:0	4	;
water	108:4	0:0	4	}
return	109:4	109:12	2	0
water	109:11	0:0	3	0
