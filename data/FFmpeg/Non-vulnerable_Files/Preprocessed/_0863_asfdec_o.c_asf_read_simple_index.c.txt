func	1:0	41:0	0	static int	asf_read_simple_index
params	1:32	0:0	1	
param	1:33	1:51	2	AVFormatContext *	s
param	1:53	1:76	2	const GUIDParseTable *	g
stmnts	0:0	40:12	1	
decl	3:4	3:34	2	ASFContext	*asf
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:26	2	AVStream	*st
op	5:20	0:0	2	=
water	5:22	0:0	2	NULL
decl	6:4	6:21	2	uint64_t	interval
decl	7:4	7:32	2	uint32_t	pkt_num
water	7:20	0:0	2	,
decl	7:4	7:32	2	uint32_t	nb_entries
decl	8:4	8:29	2	int32_t	prev_pkt_num
op	8:25	0:0	2	=
op	8:27	0:0	2	-
water	8:28	0:0	2	1
decl	9:4	9:9	2	int	i
decl	10:4	10:33	2	uint64_t	size
op	10:18	0:0	2	=
call	10:20	10:32	3	avio_rl64
arg	10:30	10:32	4	pb
water	10:30	0:0	5	pb
for	13:4	19:4	2	(i = 0 ;i < asf -> nb_streams;i ++)
forinit	13:9	13:14	3	i = 0 ;
water	13:9	0:0	4	i
op	13:11	0:0	4	=
water	13:13	0:0	4	0
water	13:14	0:0	4	;
cond	13:16	13:25	3	i < asf -> nb_streams
water	13:16	0:0	4	i
op	13:18	0:0	4	<
water	13:20	0:0	4	asf
op	13:23	0:0	4	->
water	13:25	0:0	4	nb_streams
forexpr	13:37	13:38	3	i ++
water	13:37	0:0	4	i
op	13:38	0:0	4	++
stmts	13:42	19:4	3	
water	13:42	0:0	4	{
if	14:8	18:8	4	(( asf -> asf_st [ i ] -> type == AVMEDIA_TYPE_VIDEO ) && ! asf -> asf_st [ i ] -> indexed)
cond	14:12	14:77	5	( asf -> asf_st [ i ] -> type == AVMEDIA_TYPE_VIDEO ) && ! asf -> asf_st [ i ] -> indexed
water	14:12	0:0	6	(
water	14:13	0:0	6	asf
op	14:16	0:0	6	->
water	14:18	0:0	6	asf_st
op	14:24	0:0	6	[
water	14:25	0:0	6	i
op	14:26	0:0	6	]
op	14:27	0:0	6	->
water	14:29	0:0	6	type
op	14:34	0:0	6	==
water	14:37	0:0	6	AVMEDIA_TYPE_VIDEO
water	14:55	0:0	6	)
op	14:57	0:0	6	&&
op	14:60	0:0	6	!
water	14:61	0:0	6	asf
op	14:64	0:0	6	->
water	14:66	0:0	6	asf_st
op	14:72	0:0	6	[
water	14:73	0:0	6	i
op	14:74	0:0	6	]
op	14:75	0:0	6	->
water	14:77	0:0	6	indexed
stmts	14:86	18:8	5	
water	14:86	0:0	6	{
water	15:12	0:0	6	asf
op	15:15	0:0	6	->
water	15:17	0:0	6	asf_st
op	15:23	0:0	6	[
water	15:24	0:0	6	i
op	15:25	0:0	6	]
op	15:26	0:0	6	->
water	15:28	0:0	6	indexed
op	15:36	0:0	6	=
water	15:38	0:0	6	1
water	15:39	0:0	6	;
water	16:12	0:0	6	st
op	16:15	0:0	6	=
water	16:17	0:0	6	s
op	16:18	0:0	6	->
water	16:20	0:0	6	streams
op	16:27	0:0	6	[
water	16:28	0:0	6	asf
op	16:31	0:0	6	->
water	16:33	0:0	6	asf_st
op	16:39	0:0	6	[
water	16:40	0:0	6	i
op	16:41	0:0	6	]
op	16:42	0:0	6	->
water	16:44	0:0	6	index
op	16:49	0:0	6	]
water	16:50	0:0	6	;
break	17:12	17:17	6	
water	18:8	0:0	6	}
water	19:4	0:0	4	}
if	20:4	23:4	2	(! st)
cond	20:8	20:9	3	! st
op	20:8	0:0	4	!
water	20:9	0:0	4	st
stmts	20:13	23:4	3	
water	20:13	0:0	4	{
call	21:8	21:31	4	avio_skip
arg	21:18	21:20	5	pb
water	21:18	0:0	6	pb
arg	21:22	21:31	5	size-24
water	21:22	0:0	6	size
op	21:27	0:0	6	-
water	21:29	0:0	6	24
water	21:32	0:0	4	;
return	22:8	22:16	4	0
water	22:15	0:0	5	0
water	23:4	0:0	4	}
call	24:4	24:20	2	avio_skip
arg	24:14	24:16	3	pb
water	24:14	0:0	4	pb
arg	24:18	24:20	3	16
water	24:18	0:0	4	16
water	24:21	0:0	2	;
water	25:4	0:0	2	interval
op	25:13	0:0	2	=
call	25:15	25:27	2	avio_rl64
arg	25:25	25:27	3	pb
water	25:25	0:0	4	pb
water	25:28	0:0	2	;
call	26:4	26:19	2	avio_skip
arg	26:14	26:16	3	pb
water	26:14	0:0	4	pb
arg	26:18	26:19	3	4
water	26:18	0:0	4	4
water	26:20	0:0	2	;
water	27:4	0:0	2	nb_entries
op	27:15	0:0	2	=
call	27:17	27:29	2	avio_rl32
arg	27:27	27:29	3	pb
water	27:27	0:0	4	pb
water	27:30	0:0	2	;
for	28:4	37:4	2	(i = 0 ;i < nb_entries;i ++)
forinit	28:9	28:14	3	i = 0 ;
water	28:9	0:0	4	i
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:20	3	i < nb_entries
water	28:16	0:0	4	i
op	28:18	0:0	4	<
water	28:20	0:0	4	nb_entries
forexpr	28:32	28:33	3	i ++
water	28:32	0:0	4	i
op	28:33	0:0	4	++
stmts	28:37	37:4	3	
water	28:37	0:0	4	{
water	29:8	0:0	4	pkt_num
op	29:16	0:0	4	=
call	29:18	29:30	4	avio_rl32
arg	29:28	29:30	5	pb
water	29:28	0:0	6	pb
water	29:31	0:0	4	;
call	30:8	30:23	4	avio_skip
arg	30:18	30:20	5	pb
water	30:18	0:0	6	pb
arg	30:22	30:23	5	2
water	30:22	0:0	6	2
water	30:24	0:0	4	;
if	31:8	36:8	4	(prev_pkt_num != pkt_num)
cond	31:12	31:28	5	prev_pkt_num != pkt_num
water	31:12	0:0	6	prev_pkt_num
op	31:25	0:0	6	!=
water	31:28	0:0	6	pkt_num
stmts	31:37	36:8	5	
water	31:37	0:0	6	{
call	32:12	34:68	6	av_add_index_entry
arg	32:31	32:33	7	st
water	32:31	0:0	8	st
arg	32:35	33:38	7	asf->first_packet_offset+asf->packet_size*pkt_num
water	32:35	0:0	8	asf
op	32:38	0:0	8	->
water	32:40	0:0	8	first_packet_offset
op	32:60	0:0	8	+
water	32:62	0:0	8	asf
op	32:65	0:0	8	->
water	32:67	0:0	8	packet_size
op	32:79	0:0	8	*
water	33:31	0:0	8	pkt_num
arg	33:40	33:70	7	av_rescale(interval,i,10000)
call	33:40	33:69	8	av_rescale
arg	33:51	33:59	9	interval
water	33:51	0:0	10	interval
arg	33:61	33:62	9	i
water	33:61	0:0	10	i
arg	33:64	33:69	9	10000
water	33:64	0:0	10	10000
arg	34:31	34:47	7	asf->packet_size
water	34:31	0:0	8	asf
op	34:34	0:0	8	->
water	34:36	0:0	8	packet_size
arg	34:49	34:50	7	0
water	34:49	0:0	8	0
arg	34:52	34:68	7	AVINDEX_KEYFRAME
water	34:52	0:0	8	AVINDEX_KEYFRAME
water	34:69	0:0	6	;
water	35:12	0:0	6	prev_pkt_num
op	35:25	0:0	6	=
water	35:27	0:0	6	pkt_num
water	35:34	0:0	6	;
water	36:8	0:0	6	}
water	37:4	0:0	4	}
water	38:4	0:0	2	asf
op	38:7	0:0	2	->
water	38:9	0:0	2	is_simple_index
op	38:25	0:0	2	=
water	38:27	0:0	2	1
water	38:28	0:0	2	;
call	39:4	39:40	2	align_position
arg	39:19	39:21	3	pb
water	39:19	0:0	4	pb
arg	39:23	39:34	3	asf->offset
water	39:23	0:0	4	asf
op	39:26	0:0	4	->
water	39:28	0:0	4	offset
arg	39:36	39:40	3	size
water	39:36	0:0	4	size
water	39:41	0:0	2	;
return	40:4	40:12	2	0
water	40:11	0:0	3	0
