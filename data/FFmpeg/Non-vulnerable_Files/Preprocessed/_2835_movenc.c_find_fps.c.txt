func	1:0	11:0	0	static AVRational	find_fps
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
param	1:47	1:59	2	AVStream *	st
stmnts	0:0	10:15	1	
decl	3:4	3:74	2	AVRational	rate
op	3:20	0:0	2	=
water	3:22	0:0	2	{
water	3:23	0:0	2	st
op	3:25	0:0	2	->
water	3:27	0:0	2	codec
op	3:32	0:0	2	->
water	3:34	0:0	2	time_base
op	3:43	0:0	2	.
water	3:44	0:0	2	den
water	3:47	0:0	2	,
water	3:49	0:0	2	st
op	3:51	0:0	2	->
water	3:53	0:0	2	codec
op	3:58	0:0	2	->
water	3:60	0:0	2	time_base
op	3:69	0:0	2	.
water	3:70	0:0	2	num
water	3:73	0:0	2	}
if	5:4	9:4	2	(av_timecode_check_frame_rate (rate ) < 0)
cond	5:8	5:45	3	av_timecode_check_frame_rate (rate ) < 0
call	5:8	5:41	4	av_timecode_check_frame_rate
arg	5:37	5:41	5	rate
water	5:37	0:0	6	rate
op	5:43	0:0	4	<
water	5:45	0:0	4	0
stmts	5:48	9:4	3	
water	5:48	0:0	4	{
call	6:8	7:81	4	av_log
arg	6:15	6:16	5	s
water	6:15	0:0	6	s
arg	6:18	6:30	5	AV_LOG_DEBUG
water	6:18	0:0	6	AV_LOG_DEBUG
arg	6:32	6:82	5	"timecode: tbc=%d/%d invalid, fallback on %d/%d\n"
water	6:32	0:0	6	"timecode: tbc=%d/%d invalid, fallback on %d/%d\n"
arg	7:15	7:23	5	rate.num
water	7:15	0:0	6	rate
op	7:19	0:0	6	.
water	7:20	0:0	6	num
arg	7:25	7:33	5	rate.den
water	7:25	0:0	6	rate
op	7:29	0:0	6	.
water	7:30	0:0	6	den
arg	7:35	7:57	5	st->avg_frame_rate.num
water	7:35	0:0	6	st
op	7:37	0:0	6	->
water	7:39	0:0	6	avg_frame_rate
op	7:53	0:0	6	.
water	7:54	0:0	6	num
arg	7:59	7:81	5	st->avg_frame_rate.den
water	7:59	0:0	6	st
op	7:61	0:0	6	->
water	7:63	0:0	6	avg_frame_rate
op	7:77	0:0	6	.
water	7:78	0:0	6	den
water	7:82	0:0	4	;
water	8:8	0:0	4	rate
op	8:13	0:0	4	=
water	8:15	0:0	4	st
op	8:17	0:0	4	->
water	8:19	0:0	4	avg_frame_rate
water	8:33	0:0	4	;
water	9:4	0:0	4	}
return	10:4	10:15	2	rate
water	10:11	0:0	3	rate
