func	1:24	23:0	0	void	filter_rgb
params	1:39	0:0	1	
param	1:40	1:54	2	FadeContext *	s
param	1:56	1:76	2	const AVFrame *	frame
param	2:40	2:55	2	int	slice_start
param	2:57	2:70	2	int	slice_end
param	3:40	3:52	2	int	do_alpha
param	3:54	3:62	2	int	step
stmnts	0:0	22:4	1	
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
decl	6:4	6:41	2	const uint8_t	r_idx
op	6:25	0:0	2	=
water	6:27	0:0	2	s
op	6:28	0:0	2	->
water	6:30	0:0	2	rgba_map
op	6:38	0:0	2	[
water	6:39	0:0	2	R
op	6:40	0:0	2	]
decl	7:4	7:41	2	const uint8_t	g_idx
op	7:25	0:0	2	=
water	7:27	0:0	2	s
op	7:28	0:0	2	->
water	7:30	0:0	2	rgba_map
op	7:38	0:0	2	[
water	7:39	0:0	2	G
op	7:40	0:0	2	]
decl	8:4	8:41	2	const uint8_t	b_idx
op	8:25	0:0	2	=
water	8:27	0:0	2	s
op	8:28	0:0	2	->
water	8:30	0:0	2	rgba_map
op	8:38	0:0	2	[
water	8:39	0:0	2	B
op	8:40	0:0	2	]
decl	9:4	9:41	2	const uint8_t	a_idx
op	9:25	0:0	2	=
water	9:27	0:0	2	s
op	9:28	0:0	2	->
water	9:30	0:0	2	rgba_map
op	9:38	0:0	2	[
water	9:39	0:0	2	A
op	9:40	0:0	2	]
decl	10:4	10:36	2	const uint8_t	*c
op	10:21	0:0	2	=
water	10:23	0:0	2	s
op	10:24	0:0	2	->
water	10:26	0:0	2	color_rgba
for	11:4	22:4	2	(i = slice_start ;i < slice_end;i ++)
forinit	11:9	11:24	3	i = slice_start ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	slice_start
water	11:24	0:0	4	;
cond	11:26	11:30	3	i < slice_end
water	11:26	0:0	4	i
op	11:28	0:0	4	<
water	11:30	0:0	4	slice_end
forexpr	11:41	11:42	3	i ++
water	11:41	0:0	4	i
op	11:42	0:0	4	++
stmts	11:46	22:4	3	
water	11:46	0:0	4	{
decl	12:8	12:60	4	uint8_t	*p
op	12:19	0:0	4	=
water	12:21	0:0	4	frame
op	12:26	0:0	4	->
water	12:28	0:0	4	data
op	12:32	0:0	4	[
water	12:33	0:0	4	0
op	12:34	0:0	4	]
op	12:36	0:0	4	+
water	12:38	0:0	4	i
op	12:40	0:0	4	*
water	12:42	0:0	4	frame
op	12:47	0:0	4	->
water	12:49	0:0	4	linesize
op	12:57	0:0	4	[
water	12:58	0:0	4	0
op	12:59	0:0	4	]
for	13:8	21:8	4	(j = 0 ;j < frame -> width;j ++)
forinit	13:13	13:18	5	j = 0 ;
water	13:13	0:0	6	j
op	13:15	0:0	6	=
water	13:17	0:0	6	0
water	13:18	0:0	6	;
cond	13:20	13:31	5	j < frame -> width
water	13:20	0:0	6	j
op	13:22	0:0	6	<
water	13:24	0:0	6	frame
op	13:29	0:0	6	->
water	13:31	0:0	6	width
forexpr	13:38	13:39	5	j ++
water	13:38	0:0	6	j
op	13:39	0:0	6	++
stmts	13:43	21:8	5	
water	13:43	0:0	6	{
water	15:12	0:0	6	p
op	15:13	0:0	6	[
water	15:14	0:0	6	r_idx
op	15:19	0:0	6	]
op	15:21	0:0	6	=
call	15:23	15:38	6	INTERP
arg	15:30	15:35	7	r_idx
water	15:30	0:0	8	r_idx
arg	15:37	15:38	7	0
water	15:37	0:0	8	0
water	15:39	0:0	6	;
water	16:12	0:0	6	p
op	16:13	0:0	6	[
water	16:14	0:0	6	g_idx
op	16:19	0:0	6	]
op	16:21	0:0	6	=
call	16:23	16:38	6	INTERP
arg	16:30	16:35	7	g_idx
water	16:30	0:0	8	g_idx
arg	16:37	16:38	7	1
water	16:37	0:0	8	1
water	16:39	0:0	6	;
water	17:12	0:0	6	p
op	17:13	0:0	6	[
water	17:14	0:0	6	b_idx
op	17:19	0:0	6	]
op	17:21	0:0	6	=
call	17:23	17:38	6	INTERP
arg	17:30	17:35	7	b_idx
water	17:30	0:0	8	b_idx
arg	17:37	17:38	7	2
water	17:37	0:0	8	2
water	17:39	0:0	6	;
if	18:12	19:43	6	(do_alpha)
cond	18:16	18:16	7	do_alpha
water	18:16	0:0	8	do_alpha
stmts	19:16	19:43	7	
water	19:16	0:0	8	p
op	19:17	0:0	8	[
water	19:18	0:0	8	a_idx
op	19:23	0:0	8	]
op	19:25	0:0	8	=
call	19:27	19:42	8	INTERP
arg	19:34	19:39	9	a_idx
water	19:34	0:0	10	a_idx
arg	19:41	19:42	9	3
water	19:41	0:0	10	3
water	19:43	0:0	8	;
water	20:12	0:0	6	p
op	20:14	0:0	6	+=
water	20:17	0:0	6	step
water	20:21	0:0	6	;
water	21:8	0:0	6	}
water	22:4	0:0	4	}
