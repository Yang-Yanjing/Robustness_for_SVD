func	1:0	120:0	0	static int	run_psnr
params	1:19	0:0	1	
param	1:20	1:30	2	FILE *	f[2]
param	1:32	1:39	2	int	len
param	1:41	1:50	2	int	shift
param	1:52	1:66	2	int	skip_bytes
stmnts	0:0	119:13	1	
decl	3:4	3:12	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:12	2	int	j
decl	4:4	4:20	2	uint64_t	sse
op	4:17	0:0	2	=
water	4:19	0:0	2	0
decl	5:4	5:22	2	double	sse_d
op	5:17	0:0	2	=
water	5:19	0:0	2	0
op	5:20	0:0	2	.
water	5:21	0:0	2	0
water	6:4	0:0	2	uint8_t
water	6:12	0:0	2	buf
op	6:15	0:0	2	[
water	6:16	0:0	2	2
op	6:17	0:0	2	]
op	6:18	0:0	2	[
water	6:19	0:0	2	SIZE
op	6:23	0:0	2	]
water	6:24	0:0	2	;
decl	7:4	7:43	2	int64_t	max
op	7:19	0:0	2	=
water	7:21	0:0	2	(
water	7:22	0:0	2	1
water	7:23	0:0	2	LL
op	7:26	0:0	2	<<
water	7:29	0:0	2	(
water	7:30	0:0	2	8
op	7:32	0:0	2	*
water	7:34	0:0	2	len
water	7:37	0:0	2	)
water	7:38	0:0	2	)
op	7:40	0:0	2	-
water	7:42	0:0	2	1
decl	8:4	8:22	2	int	size0
op	8:19	0:0	2	=
water	8:21	0:0	2	0
decl	9:4	9:22	2	int	size1
op	9:19	0:0	2	=
water	9:21	0:0	2	0
decl	10:4	10:24	2	uint64_t	maxdist
op	10:21	0:0	2	=
water	10:23	0:0	2	0
decl	11:4	11:26	2	double	maxdist_d
op	11:21	0:0	2	=
water	11:23	0:0	2	0
op	11:24	0:0	2	.
water	11:25	0:0	2	0
decl	12:4	12:14	2	int	noseek
water	13:4	0:0	2	noseek
op	13:11	0:0	2	=
call	13:13	13:36	2	fseek
arg	13:19	13:23	3	f[0]
water	13:19	0:0	4	f
op	13:20	0:0	4	[
water	13:21	0:0	4	0
op	13:22	0:0	4	]
arg	13:25	13:26	3	0
water	13:25	0:0	4	0
arg	13:28	13:36	3	SEEK_SET
water	13:28	0:0	4	SEEK_SET
op	13:38	0:0	2	||
call	14:13	14:36	2	fseek
arg	14:19	14:23	3	f[1]
water	14:19	0:0	4	f
op	14:20	0:0	4	[
water	14:21	0:0	4	1
op	14:22	0:0	4	]
arg	14:25	14:26	3	0
water	14:25	0:0	4	0
arg	14:28	14:36	3	SEEK_SET
water	14:28	0:0	4	SEEK_SET
water	14:37	0:0	2	;
if	15:4	37:4	2	(! noseek)
cond	15:8	15:9	3	! noseek
op	15:8	0:0	4	!
water	15:9	0:0	4	noseek
stmts	15:17	37:4	3	
water	15:17	0:0	4	{
for	16:8	33:8	4	(i = 0 ;i < 2;i ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:24	5	i < 2
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	2
forexpr	16:27	16:28	5	i ++
water	16:27	0:0	6	i
op	16:28	0:0	6	++
stmts	16:32	33:8	5	
water	16:32	0:0	6	{
decl	17:12	17:31	6	uint8_t	*p
op	17:23	0:0	6	=
water	17:25	0:0	6	buf
op	17:28	0:0	6	[
water	17:29	0:0	6	i
op	17:30	0:0	6	]
if	18:12	19:25	6	(fread (p ,1 ,12 ,f [ i ] ) != 12)
cond	18:16	18:41	7	fread (p ,1 ,12 ,f [ i ] ) != 12
call	18:16	18:36	8	fread
arg	18:22	18:23	9	p
water	18:22	0:0	10	p
arg	18:25	18:26	9	1
water	18:25	0:0	10	1
arg	18:28	18:30	9	12
water	18:28	0:0	10	12
arg	18:32	18:36	9	f[i]
water	18:32	0:0	10	f
op	18:33	0:0	10	[
water	18:34	0:0	10	i
op	18:35	0:0	10	]
op	18:38	0:0	8	!=
water	18:41	0:0	8	12
stmts	19:16	19:25	7	
return	19:16	19:25	8	-1
op	19:23	0:0	9	-
water	19:24	0:0	9	1
if	20:12	30:12	6	(!memcmp (p ,"RIFF" ,4 ) && !memcmp (p + 8 ,"WAVE" ,4 ))
cond	20:16	21:40	7	!memcmp (p ,"RIFF" ,4 ) && !memcmp (p + 8 ,"WAVE" ,4 )
op	20:16	0:0	8	!
call	20:17	20:36	8	memcmp
arg	20:24	20:25	9	p
water	20:24	0:0	10	p
arg	20:27	20:33	9	"RIFF"
water	20:27	0:0	10	"RIFF"
arg	20:35	20:36	9	4
water	20:35	0:0	10	4
op	20:38	0:0	8	&&
op	21:16	0:0	8	!
call	21:17	21:40	8	memcmp
arg	21:24	21:29	9	p+8
water	21:24	0:0	10	p
op	21:26	0:0	10	+
water	21:28	0:0	10	8
arg	21:31	21:37	9	"WAVE"
water	21:31	0:0	10	"WAVE"
arg	21:39	21:40	9	4
water	21:39	0:0	10	4
stmts	21:43	30:12	7	
water	21:43	0:0	8	{
if	22:16	23:29	8	(fread (p ,1 ,8 ,f [ i ] ) != 8)
cond	22:20	22:44	9	fread (p ,1 ,8 ,f [ i ] ) != 8
call	22:20	22:39	10	fread
arg	22:26	22:27	11	p
water	22:26	0:0	12	p
arg	22:29	22:30	11	1
water	22:29	0:0	12	1
arg	22:32	22:33	11	8
water	22:32	0:0	12	8
arg	22:35	22:39	11	f[i]
water	22:35	0:0	12	f
op	22:36	0:0	12	[
water	22:37	0:0	12	i
op	22:38	0:0	12	]
op	22:41	0:0	10	!=
water	22:44	0:0	10	8
stmts	23:20	23:29	9	
return	23:20	23:29	10	-1
op	23:27	0:0	11	-
water	23:28	0:0	11	1
while	24:16	29:16	8	(memcmp (p ,"data" ,4 ))
cond	24:23	24:42	9	memcmp (p ,"data" ,4 )
call	24:23	24:42	10	memcmp
arg	24:30	24:31	11	p
water	24:30	0:0	12	p
arg	24:33	24:39	11	"data"
water	24:33	0:0	12	"data"
arg	24:41	24:42	11	4
water	24:41	0:0	12	4
stmts	24:45	29:16	9	
water	24:45	0:0	10	{
decl	25:20	25:70	10	int	s
op	25:26	0:0	10	=
water	25:28	0:0	10	p
op	25:29	0:0	10	[
water	25:30	0:0	10	4
op	25:31	0:0	10	]
op	25:33	0:0	10	|
water	25:35	0:0	10	p
op	25:36	0:0	10	[
water	25:37	0:0	10	5
op	25:38	0:0	10	]
op	25:40	0:0	10	<<
water	25:43	0:0	10	8
op	25:45	0:0	10	|
water	25:47	0:0	10	p
op	25:48	0:0	10	[
water	25:49	0:0	10	6
op	25:50	0:0	10	]
op	25:52	0:0	10	<<
water	25:55	0:0	10	16
op	25:58	0:0	10	|
water	25:60	0:0	10	p
op	25:61	0:0	10	[
water	25:62	0:0	10	7
op	25:63	0:0	10	]
op	25:65	0:0	10	<<
water	25:68	0:0	10	24
call	26:20	26:43	10	fseek
arg	26:26	26:30	11	f[i]
water	26:26	0:0	12	f
op	26:27	0:0	12	[
water	26:28	0:0	12	i
op	26:29	0:0	12	]
arg	26:32	26:33	11	s
water	26:32	0:0	12	s
arg	26:35	26:43	11	SEEK_CUR
water	26:35	0:0	12	SEEK_CUR
water	26:44	0:0	10	;
if	27:20	28:33	10	(fread (p ,1 ,8 ,f [ i ] ) != 8)
cond	27:24	27:48	11	fread (p ,1 ,8 ,f [ i ] ) != 8
call	27:24	27:43	12	fread
arg	27:30	27:31	13	p
water	27:30	0:0	14	p
arg	27:33	27:34	13	1
water	27:33	0:0	14	1
arg	27:36	27:37	13	8
water	27:36	0:0	14	8
arg	27:39	27:43	13	f[i]
water	27:39	0:0	14	f
op	27:40	0:0	14	[
water	27:41	0:0	14	i
op	27:42	0:0	14	]
op	27:45	0:0	12	!=
water	27:48	0:0	12	8
stmts	28:24	28:33	11	
return	28:24	28:33	12	-1
op	28:31	0:0	13	-
water	28:32	0:0	13	1
water	29:16	0:0	10	}
water	30:12	0:0	8	}
else	30:14	32:12	6
stmts	30:19	32:12	7	
water	30:19	0:0	8	{
call	31:16	31:41	8	fseek
arg	31:22	31:26	9	f[i]
water	31:22	0:0	10	f
op	31:23	0:0	10	[
water	31:24	0:0	10	i
op	31:25	0:0	10	]
arg	31:28	31:31	9	-12
op	31:28	0:0	10	-
water	31:29	0:0	10	12
arg	31:33	31:41	9	SEEK_CUR
water	31:33	0:0	10	SEEK_CUR
water	31:42	0:0	8	;
water	32:12	0:0	8	}
water	33:8	0:0	6	}
call	34:8	34:48	4	fseek
arg	34:14	34:26	5	f[shift<0]
water	34:14	0:0	6	f
op	34:15	0:0	6	[
water	34:16	0:0	6	shift
op	34:22	0:0	6	<
water	34:24	0:0	6	0
op	34:25	0:0	6	]
arg	34:28	34:38	5	abs(shift)
call	34:28	34:37	6	abs
arg	34:32	34:37	7	shift
water	34:32	0:0	8	shift
arg	34:40	34:48	5	SEEK_CUR
water	34:40	0:0	6	SEEK_CUR
water	34:49	0:0	4	;
call	35:8	35:40	4	fseek
arg	35:14	35:18	5	f[0]
water	35:14	0:0	6	f
op	35:15	0:0	6	[
water	35:16	0:0	6	0
op	35:17	0:0	6	]
arg	35:20	35:30	5	skip_bytes
water	35:20	0:0	6	skip_bytes
arg	35:32	35:40	5	SEEK_CUR
water	35:32	0:0	6	SEEK_CUR
water	35:41	0:0	4	;
call	36:8	36:40	4	fseek
arg	36:14	36:18	5	f[1]
water	36:14	0:0	6	f
op	36:15	0:0	6	[
water	36:16	0:0	6	1
op	36:17	0:0	6	]
arg	36:20	36:30	5	skip_bytes
water	36:20	0:0	6	skip_bytes
arg	36:32	36:40	5	SEEK_CUR
water	36:32	0:0	6	SEEK_CUR
water	36:41	0:0	4	;
water	37:4	0:0	4	}
for	38:4	82:4	2	(;;)
forinit	38:9	38:9	3	;
water	38:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	38:13	82:4	3	
water	38:13	0:0	4	{
decl	39:8	39:45	4	int	s0
op	39:15	0:0	4	=
call	39:17	39:44	5	fread
arg	39:23	39:29	6	buf[0]
water	39:23	0:0	7	buf
op	39:26	0:0	7	[
water	39:27	0:0	7	0
op	39:28	0:0	7	]
arg	39:31	39:32	6	1
water	39:31	0:0	7	1
arg	39:34	39:38	6	SIZE
water	39:34	0:0	7	SIZE
arg	39:40	39:44	6	f[0]
water	39:40	0:0	7	f
op	39:41	0:0	7	[
water	39:42	0:0	7	0
op	39:43	0:0	7	]
decl	40:8	40:45	4	int	s1
op	40:15	0:0	4	=
call	40:17	40:44	5	fread
arg	40:23	40:29	6	buf[1]
water	40:23	0:0	7	buf
op	40:26	0:0	7	[
water	40:27	0:0	7	1
op	40:28	0:0	7	]
arg	40:31	40:32	6	1
water	40:31	0:0	7	1
arg	40:34	40:38	6	SIZE
water	40:34	0:0	7	SIZE
arg	40:40	40:44	6	f[1]
water	40:40	0:0	7	f
op	40:41	0:0	7	[
water	40:42	0:0	7	1
op	40:43	0:0	7	]
for	41:8	77:8	4	(j = 0 ;j <FFMIN (s0 ,s1 );j += len)
forinit	41:13	41:18	5	j = 0 ;
water	41:13	0:0	6	j
op	41:15	0:0	6	=
water	41:17	0:0	6	0
water	41:18	0:0	6	;
cond	41:20	41:36	5	j <FFMIN (s0 ,s1 )
water	41:20	0:0	6	j
op	41:22	0:0	6	<
call	41:24	41:36	6	FFMIN
arg	41:30	41:32	7	s0
water	41:30	0:0	8	s0
arg	41:34	41:36	7	s1
water	41:34	0:0	8	s1
forexpr	41:39	41:44	5	j += len
water	41:39	0:0	6	j
op	41:41	0:0	6	+=
water	41:44	0:0	6	len
stmts	41:49	77:8	5	
water	41:49	0:0	6	{
switch	42:12	76:12	6	(len)
cond	42:20	42:20	7	len
water	42:20	0:0	8	len
stmts	42:25	76:12	7	
water	42:25	0:0	8	{
label	43:12	43:18	8	case 1 :
label	44:12	44:18	8	case 2 :
water	44:20	0:0	8	{
decl	45:16	45:28	8	int64_t	a
water	45:25	0:0	8	,
decl	45:16	45:28	8	int64_t	b
decl	46:16	46:24	8	int	dist
if	47:16	50:16	8	(len == 2)
cond	47:20	47:27	9	len == 2
water	47:20	0:0	10	len
op	47:24	0:0	10	==
water	47:27	0:0	10	2
stmts	47:30	50:16	9	
water	47:30	0:0	10	{
water	48:20	0:0	10	a
op	48:22	0:0	10	=
call	48:24	48:43	10	get_s16l
arg	48:33	48:43	11	buf[0]+j
water	48:33	0:0	12	buf
op	48:36	0:0	12	[
water	48:37	0:0	12	0
op	48:38	0:0	12	]
op	48:40	0:0	12	+
water	48:42	0:0	12	j
water	48:44	0:0	10	;
water	49:20	0:0	10	b
op	49:22	0:0	10	=
call	49:24	49:43	10	get_s16l
arg	49:33	49:43	11	buf[1]+j
water	49:33	0:0	12	buf
op	49:36	0:0	12	[
water	49:37	0:0	12	1
op	49:38	0:0	12	]
op	49:40	0:0	12	+
water	49:42	0:0	12	j
water	49:44	0:0	10	;
water	50:16	0:0	10	}
else	50:18	53:16	8
stmts	50:23	53:16	9	
water	50:23	0:0	10	{
water	51:20	0:0	10	a
op	51:22	0:0	10	=
water	51:24	0:0	10	buf
op	51:27	0:0	10	[
water	51:28	0:0	10	0
op	51:29	0:0	10	]
op	51:30	0:0	10	[
water	51:31	0:0	10	j
op	51:32	0:0	10	]
water	51:33	0:0	10	;
water	52:20	0:0	10	b
op	52:22	0:0	10	=
water	52:24	0:0	10	buf
op	52:27	0:0	10	[
water	52:28	0:0	10	1
op	52:29	0:0	10	]
op	52:30	0:0	10	[
water	52:31	0:0	10	j
op	52:32	0:0	10	]
water	52:33	0:0	10	;
water	53:16	0:0	10	}
water	54:16	0:0	8	sse
op	54:20	0:0	8	+=
water	54:23	0:0	8	(
water	54:24	0:0	8	a
op	54:26	0:0	8	-
water	54:28	0:0	8	b
water	54:29	0:0	8	)
op	54:31	0:0	8	*
water	54:33	0:0	8	(
water	54:34	0:0	8	a
op	54:36	0:0	8	-
water	54:38	0:0	8	b
water	54:39	0:0	8	)
water	54:40	0:0	8	;
water	55:16	0:0	8	dist
op	55:21	0:0	8	=
call	55:23	55:32	8	abs
arg	55:27	55:32	9	a-b
water	55:27	0:0	10	a
op	55:29	0:0	10	-
water	55:31	0:0	10	b
water	55:33	0:0	8	;
if	56:16	57:34	8	(dist > maxdist)
cond	56:20	56:27	9	dist > maxdist
water	56:20	0:0	10	dist
op	56:25	0:0	10	>
water	56:27	0:0	10	maxdist
stmts	57:20	57:34	9	
water	57:20	0:0	10	maxdist
op	57:28	0:0	10	=
water	57:30	0:0	10	dist
water	57:34	0:0	10	;
break	58:16	58:21	8	
water	59:12	0:0	8	}
label	60:12	60:18	8	case 4 :
label	61:12	61:18	8	case 8 :
water	61:20	0:0	8	{
decl	62:16	62:33	8	double	dist
water	62:27	0:0	8	,
decl	62:16	62:33	8	double	a
water	62:30	0:0	8	,
decl	62:16	62:33	8	double	b
if	63:16	66:16	8	(len == 8)
cond	63:20	63:27	9	len == 8
water	63:20	0:0	10	len
op	63:24	0:0	10	==
water	63:27	0:0	10	8
stmts	63:30	66:16	9	
water	63:30	0:0	10	{
water	64:20	0:0	10	a
op	64:22	0:0	10	=
call	64:24	64:43	10	get_f64l
arg	64:33	64:43	11	buf[0]+j
water	64:33	0:0	12	buf
op	64:36	0:0	12	[
water	64:37	0:0	12	0
op	64:38	0:0	12	]
op	64:40	0:0	12	+
water	64:42	0:0	12	j
water	64:44	0:0	10	;
water	65:20	0:0	10	b
op	65:22	0:0	10	=
call	65:24	65:43	10	get_f64l
arg	65:33	65:43	11	buf[1]+j
water	65:33	0:0	12	buf
op	65:36	0:0	12	[
water	65:37	0:0	12	1
op	65:38	0:0	12	]
op	65:40	0:0	12	+
water	65:42	0:0	12	j
water	65:44	0:0	10	;
water	66:16	0:0	10	}
else	66:18	69:16	8
stmts	66:23	69:16	9	
water	66:23	0:0	10	{
water	67:20	0:0	10	a
op	67:22	0:0	10	=
call	67:24	67:43	10	get_f32l
arg	67:33	67:43	11	buf[0]+j
water	67:33	0:0	12	buf
op	67:36	0:0	12	[
water	67:37	0:0	12	0
op	67:38	0:0	12	]
op	67:40	0:0	12	+
water	67:42	0:0	12	j
water	67:44	0:0	10	;
water	68:20	0:0	10	b
op	68:22	0:0	10	=
call	68:24	68:43	10	get_f32l
arg	68:33	68:43	11	buf[1]+j
water	68:33	0:0	12	buf
op	68:36	0:0	12	[
water	68:37	0:0	12	1
op	68:38	0:0	12	]
op	68:40	0:0	12	+
water	68:42	0:0	12	j
water	68:44	0:0	10	;
water	69:16	0:0	10	}
water	70:16	0:0	8	dist
op	70:21	0:0	8	=
call	70:23	70:33	8	fabs
arg	70:28	70:33	9	a-b
water	70:28	0:0	10	a
op	70:30	0:0	10	-
water	70:32	0:0	10	b
water	70:34	0:0	8	;
water	71:16	0:0	8	sse_d
op	71:22	0:0	8	+=
water	71:25	0:0	8	(
water	71:26	0:0	8	a
op	71:28	0:0	8	-
water	71:30	0:0	8	b
water	71:31	0:0	8	)
op	71:33	0:0	8	*
water	71:35	0:0	8	(
water	71:36	0:0	8	a
op	71:38	0:0	8	-
water	71:40	0:0	8	b
water	71:41	0:0	8	)
water	71:42	0:0	8	;
if	72:16	73:36	8	(dist > maxdist_d)
cond	72:20	72:27	9	dist > maxdist_d
water	72:20	0:0	10	dist
op	72:25	0:0	10	>
water	72:27	0:0	10	maxdist_d
stmts	73:20	73:36	9	
water	73:20	0:0	10	maxdist_d
op	73:30	0:0	10	=
water	73:32	0:0	10	dist
water	73:36	0:0	10	;
break	74:16	74:21	8	
water	75:12	0:0	8	}
water	76:12	0:0	8	}
water	77:8	0:0	6	}
water	78:8	0:0	4	size0
op	78:14	0:0	4	+=
water	78:17	0:0	4	s0
water	78:19	0:0	4	;
water	79:8	0:0	4	size1
op	79:14	0:0	4	+=
water	79:17	0:0	4	s1
water	79:19	0:0	4	;
if	80:8	81:17	4	(s0 + s1 <= 0)
cond	80:12	80:23	5	s0 + s1 <= 0
water	80:12	0:0	6	s0
op	80:15	0:0	6	+
water	80:17	0:0	6	s1
op	80:20	0:0	6	<=
water	80:23	0:0	6	0
stmts	81:12	81:17	5	
break	81:12	81:17	6	
water	82:4	0:0	4	}
water	83:4	0:0	2	i
op	83:6	0:0	2	=
call	83:8	83:26	2	FFMIN
arg	83:14	83:19	3	size0
water	83:14	0:0	4	size0
arg	83:21	83:26	3	size1
water	83:21	0:0	4	size1
op	83:28	0:0	2	/
water	83:30	0:0	2	len
water	83:33	0:0	2	;
if	84:4	85:13	2	(! i)
cond	84:8	84:9	3	! i
op	84:8	0:0	4	!
water	84:9	0:0	4	i
stmts	85:8	85:13	3	
water	85:8	0:0	4	i
op	85:10	0:0	4	=
water	85:12	0:0	4	1
water	85:13	0:0	4	;
switch	86:4	118:4	2	(len)
cond	86:12	86:12	3	len
water	86:12	0:0	4	len
stmts	86:17	118:4	3	
water	86:17	0:0	4	{
label	87:4	87:10	4	case 1 :
label	88:4	88:10	4	case 2 :
water	88:12	0:0	4	{
decl	89:8	89:21	4	uint64_t	psnr
decl	90:8	90:88	4	uint64_t	dev
op	90:21	0:0	4	=
call	90:23	90:87	5	int_sqrt
arg	90:32	90:87	6	((sse/i)*F*F)+(((sse%i)*F*F)+i/2)/i
water	90:32	0:0	7	(
water	90:33	0:0	7	(
water	90:34	0:0	7	sse
op	90:38	0:0	7	/
water	90:40	0:0	7	i
water	90:41	0:0	7	)
op	90:43	0:0	7	*
water	90:45	0:0	7	F
op	90:47	0:0	7	*
water	90:49	0:0	7	F
water	90:50	0:0	7	)
op	90:52	0:0	7	+
water	90:54	0:0	7	(
water	90:55	0:0	7	(
water	90:56	0:0	7	(
water	90:57	0:0	7	sse
op	90:61	0:0	7	%
water	90:63	0:0	7	i
water	90:64	0:0	7	)
op	90:66	0:0	7	*
water	90:68	0:0	7	F
op	90:70	0:0	7	*
water	90:72	0:0	7	F
water	90:73	0:0	7	)
op	90:75	0:0	7	+
water	90:77	0:0	7	i
op	90:79	0:0	7	/
water	90:81	0:0	7	2
water	90:82	0:0	7	)
op	90:84	0:0	7	/
water	90:86	0:0	7	i
if	91:8	93:61	4	(sse)
cond	91:12	91:12	5	sse
water	91:12	0:0	6	sse
stmts	92:12	93:61	5	
water	92:12	0:0	6	psnr
op	92:17	0:0	6	=
water	92:19	0:0	6	(
water	92:20	0:0	6	(
water	92:21	0:0	6	2
call	92:23	92:40	6	*log16
arg	92:31	92:40	7	max<<16
water	92:31	0:0	8	max
op	92:35	0:0	8	<<
water	92:38	0:0	8	16
op	92:42	0:0	6	+
call	92:44	92:51	6	log16
arg	92:50	92:51	7	i
water	92:50	0:0	8	i
op	92:53	0:0	6	-
call	92:55	92:64	6	log16
arg	92:61	92:64	7	sse
water	92:61	0:0	8	sse
water	92:65	0:0	6	)
op	92:67	0:0	6	*
water	93:20	0:0	6	284619
water	93:26	0:0	6	LL
op	93:29	0:0	6	*
water	93:31	0:0	6	F
op	93:33	0:0	6	+
water	93:35	0:0	6	(
water	93:36	0:0	6	1
water	93:37	0:0	6	LL
op	93:40	0:0	6	<<
water	93:43	0:0	6	31
water	93:45	0:0	6	)
water	93:46	0:0	6	)
op	93:48	0:0	6	/
water	93:50	0:0	6	(
water	93:51	0:0	6	1
water	93:52	0:0	6	LL
op	93:55	0:0	6	<<
water	93:58	0:0	6	32
water	93:60	0:0	6	)
water	93:61	0:0	6	;
else	94:8	95:31	4
stmts	95:12	95:31	5	
water	95:12	0:0	6	psnr
op	95:17	0:0	6	=
water	95:19	0:0	6	1000
op	95:24	0:0	6	*
water	95:26	0:0	6	F
op	95:28	0:0	6	-
water	95:30	0:0	6	1
water	95:31	0:0	6	;
call	96:8	99:36	4	printf
arg	96:15	96:81	5	"stddev:%5d.%02d PSNR:%3d.%02d MAXDIFF:%5"PRIu64" bytes:%9d/%9d\n"
water	96:15	0:0	6	"stddev:%5d.%02d PSNR:%3d.%02d MAXDIFF:%5"
water	96:57	0:0	6	PRIu64
water	96:63	0:0	6	" bytes:%9d/%9d\n"
arg	97:15	97:29	5	(int)(dev/F)
call	97:15	97:28	6	(int)
arg	97:21	97:28	7	dev/F
water	97:21	0:0	8	dev
op	97:25	0:0	8	/
water	97:27	0:0	8	F
arg	97:31	97:45	5	(int)(dev%F)
call	97:31	97:44	6	(int)
arg	97:37	97:44	7	dev%F
water	97:37	0:0	8	dev
op	97:41	0:0	8	%
water	97:43	0:0	8	F
arg	98:15	98:30	5	(int)(psnr/F)
call	98:15	98:29	6	(int)
arg	98:21	98:29	7	psnr/F
water	98:21	0:0	8	psnr
op	98:26	0:0	8	/
water	98:28	0:0	8	F
arg	98:32	98:47	5	(int)(psnr%F)
call	98:32	98:46	6	(int)
arg	98:38	98:46	7	psnr%F
water	98:38	0:0	8	psnr
op	98:43	0:0	8	%
water	98:45	0:0	8	F
arg	99:15	99:22	5	maxdist
water	99:15	0:0	6	maxdist
arg	99:24	99:29	5	size0
water	99:24	0:0	6	size0
arg	99:31	99:36	5	size1
water	99:31	0:0	6	size1
water	99:37	0:0	4	;
return	100:8	100:19	4	psnr
water	100:15	0:0	5	psnr
water	101:8	0:0	4	}
label	102:4	102:10	4	case 4 :
label	103:4	103:10	4	case 8 :
water	103:12	0:0	4	{
decl	104:8	104:25	4	char	psnr_str[64]
decl	105:8	105:29	4	double	psnr
op	105:20	0:0	4	=
water	105:22	0:0	4	INT_MAX
decl	106:8	106:36	4	double	dev
op	106:19	0:0	4	=
call	106:21	106:35	5	sqrt
arg	106:26	106:35	6	sse_d/i
water	106:26	0:0	7	sse_d
op	106:32	0:0	7	/
water	106:34	0:0	7	i
decl	107:8	107:65	4	uint64_t	scale
op	107:23	0:0	4	=
water	107:25	0:0	4	(
water	107:26	0:0	4	len
op	107:30	0:0	4	==
water	107:33	0:0	4	4
water	107:34	0:0	4	)
water	107:36	0:0	4	?
water	107:38	0:0	4	(
water	107:39	0:0	4	1
water	107:40	0:0	4	ULL
op	107:44	0:0	4	<<
water	107:47	0:0	4	24
water	107:49	0:0	4	)
water	107:51	0:0	4	:
water	107:53	0:0	4	(
water	107:54	0:0	4	1
water	107:55	0:0	4	ULL
op	107:59	0:0	4	<<
water	107:62	0:0	4	32
water	107:64	0:0	4	)
if	108:8	111:8	4	(sse_d)
cond	108:12	108:12	5	sse_d
water	108:12	0:0	6	sse_d
stmts	108:19	111:8	5	
water	108:19	0:0	6	{
water	109:12	0:0	6	psnr
op	109:17	0:0	6	=
water	109:19	0:0	6	2
call	109:21	109:34	6	*log
arg	109:27	109:34	7	DBL_MAX
water	109:27	0:0	8	DBL_MAX
op	109:36	0:0	6	-
call	109:38	109:51	6	log
arg	109:42	109:51	7	i/sse_d
water	109:42	0:0	8	i
op	109:44	0:0	8	/
water	109:46	0:0	8	sse_d
water	109:52	0:0	6	;
call	110:12	110:63	6	snprintf
arg	110:21	110:29	7	psnr_str
water	110:21	0:0	8	psnr_str
arg	110:31	110:47	7	sizeof(psnr_str)
op	110:31	0:0	8	sizeof
water	110:37	0:0	8	(
water	110:38	0:0	8	psnr_str
water	110:46	0:0	8	)
arg	110:49	110:57	7	"%5.02f"
water	110:49	0:0	8	"%5.02f"
arg	110:59	110:63	7	psnr
water	110:59	0:0	8	psnr
water	110:64	0:0	6	;
water	111:8	0:0	6	}
else	111:10	112:55	4
stmts	112:12	112:55	5	
call	112:12	112:54	6	snprintf
arg	112:21	112:29	7	psnr_str
water	112:21	0:0	8	psnr_str
arg	112:31	112:47	7	sizeof(psnr_str)
op	112:31	0:0	8	sizeof
water	112:37	0:0	8	(
water	112:38	0:0	8	psnr_str
water	112:46	0:0	8	)
arg	112:49	112:54	7	"inf"
water	112:49	0:0	8	"inf"
water	112:55	0:0	6	;
water	113:8	0:0	4	maxdist
op	113:16	0:0	4	=
water	113:18	0:0	4	maxdist_d
op	113:28	0:0	4	*
water	113:30	0:0	4	scale
water	113:35	0:0	4	;
call	114:8	115:59	4	printf
arg	114:15	114:74	5	"stddev:%10.2f PSNR:%s MAXDIFF:%10"PRIu64" bytes:%9d/%9d\n"
water	114:15	0:0	6	"stddev:%10.2f PSNR:%s MAXDIFF:%10"
water	114:50	0:0	6	PRIu64
water	114:56	0:0	6	" bytes:%9d/%9d\n"
arg	115:15	115:26	5	dev*scale
water	115:15	0:0	6	dev
op	115:19	0:0	6	*
water	115:21	0:0	6	scale
arg	115:28	115:36	5	psnr_str
water	115:28	0:0	6	psnr_str
arg	115:38	115:45	5	maxdist
water	115:38	0:0	6	maxdist
arg	115:47	115:52	5	size0
water	115:47	0:0	6	size0
arg	115:54	115:59	5	size1
water	115:54	0:0	6	size1
water	115:60	0:0	4	;
return	116:8	116:19	4	psnr
water	116:15	0:0	5	psnr
water	117:4	0:0	4	}
water	118:4	0:0	4	}
return	119:4	119:13	2	-1
op	119:11	0:0	3	-
water	119:12	0:0	3	1
