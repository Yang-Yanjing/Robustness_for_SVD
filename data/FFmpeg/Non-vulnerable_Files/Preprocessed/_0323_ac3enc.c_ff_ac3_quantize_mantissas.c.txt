func	1:0	22:0	0	void	ff_ac3_quantize_mantissas
params	1:30	0:0	1	
param	1:31	1:50	2	AC3EncodeContext *	s
stmnts	0:0	21:4	1	
decl	3:4	3:31	2	int	blk
water	3:11	0:0	2	,
decl	3:4	3:31	2	int	ch
water	3:15	0:0	2	,
decl	3:4	3:31	2	int	ch0
op	3:20	0:0	2	=
water	3:21	0:0	2	0
water	3:22	0:0	2	,
decl	3:4	3:31	2	int	got_cpl
for	4:4	21:4	2	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	4:9	4:16	3	blk = 0 ;
water	4:9	0:0	4	blk
op	4:13	0:0	4	=
water	4:15	0:0	4	0
water	4:16	0:0	4	;
cond	4:18	4:27	3	blk < s -> num_blocks
water	4:18	0:0	4	blk
op	4:22	0:0	4	<
water	4:24	0:0	4	s
op	4:25	0:0	4	->
water	4:27	0:0	4	num_blocks
forexpr	4:39	4:42	3	blk ++
water	4:39	0:0	4	blk
op	4:42	0:0	4	++
stmts	4:46	21:4	3	
water	4:46	0:0	4	{
decl	5:8	5:41	4	AC3Block	*block
op	5:24	0:0	4	=
op	5:26	0:0	4	&
water	5:27	0:0	4	s
op	5:28	0:0	4	->
water	5:30	0:0	4	blocks
op	5:36	0:0	4	[
water	5:37	0:0	4	blk
op	5:40	0:0	4	]
decl	6:8	6:25	4	AC3Mant	m
op	6:18	0:0	4	=
water	6:20	0:0	4	{
water	6:22	0:0	4	0
water	6:24	0:0	4	}
water	7:8	0:0	4	got_cpl
op	7:16	0:0	4	=
op	7:18	0:0	4	!
water	7:19	0:0	4	block
op	7:24	0:0	4	->
water	7:26	0:0	4	cpl_in_use
water	7:36	0:0	4	;
for	8:8	20:8	4	(ch = 1 ;ch <= s -> channels;ch ++)
forinit	8:13	8:19	5	ch = 1 ;
water	8:13	0:0	6	ch
op	8:16	0:0	6	=
water	8:18	0:0	6	1
water	8:19	0:0	6	;
cond	8:21	8:30	5	ch <= s -> channels
water	8:21	0:0	6	ch
op	8:24	0:0	6	<=
water	8:27	0:0	6	s
op	8:28	0:0	6	->
water	8:30	0:0	6	channels
forexpr	8:40	8:42	5	ch ++
water	8:40	0:0	6	ch
op	8:42	0:0	6	++
stmts	8:46	20:8	5	
water	8:46	0:0	6	{
if	9:12	13:12	6	(! got_cpl && ch > 1 && block -> channel_in_cpl [ ch - 1 ])
cond	9:16	9:64	7	! got_cpl && ch > 1 && block -> channel_in_cpl [ ch - 1 ]
op	9:16	0:0	8	!
water	9:17	0:0	8	got_cpl
op	9:25	0:0	8	&&
water	9:28	0:0	8	ch
op	9:31	0:0	8	>
water	9:33	0:0	8	1
op	9:35	0:0	8	&&
water	9:38	0:0	8	block
op	9:43	0:0	8	->
water	9:45	0:0	8	channel_in_cpl
op	9:59	0:0	8	[
water	9:60	0:0	8	ch
op	9:62	0:0	8	-
water	9:63	0:0	8	1
op	9:64	0:0	8	]
stmts	9:67	13:12	7	
water	9:67	0:0	8	{
water	10:16	0:0	8	ch0
op	10:24	0:0	8	=
water	10:26	0:0	8	ch
op	10:29	0:0	8	-
water	10:31	0:0	8	1
water	10:32	0:0	8	;
water	11:16	0:0	8	ch
op	11:24	0:0	8	=
water	11:26	0:0	8	CPL_CH
water	11:32	0:0	8	;
water	12:16	0:0	8	got_cpl
op	12:24	0:0	8	=
water	12:26	0:0	8	1
water	12:27	0:0	8	;
water	13:12	0:0	8	}
call	14:12	17:76	6	quantize_mantissas_blk_ch
arg	14:38	14:40	7	&m
op	14:38	0:0	8	&
water	14:39	0:0	8	m
arg	14:42	14:63	7	block->fixed_coef[ch]
water	14:42	0:0	8	block
op	14:47	0:0	8	->
water	14:49	0:0	8	fixed_coef
op	14:59	0:0	8	[
water	14:60	0:0	8	ch
op	14:62	0:0	8	]
arg	15:38	15:82	7	s->blocks[s->exp_ref_block[ch][blk]].exp[ch]
water	15:38	0:0	8	s
op	15:39	0:0	8	->
water	15:41	0:0	8	blocks
op	15:47	0:0	8	[
water	15:48	0:0	8	s
op	15:49	0:0	8	->
water	15:51	0:0	8	exp_ref_block
op	15:64	0:0	8	[
water	15:65	0:0	8	ch
op	15:67	0:0	8	]
op	15:68	0:0	8	[
water	15:69	0:0	8	blk
op	15:72	0:0	8	]
op	15:73	0:0	8	]
op	15:74	0:0	8	.
water	15:75	0:0	8	exp
op	15:78	0:0	8	[
water	15:79	0:0	8	ch
op	15:81	0:0	8	]
arg	16:38	16:57	7	s->ref_bap[ch][blk]
water	16:38	0:0	8	s
op	16:39	0:0	8	->
water	16:41	0:0	8	ref_bap
op	16:48	0:0	8	[
water	16:49	0:0	8	ch
op	16:51	0:0	8	]
op	16:52	0:0	8	[
water	16:53	0:0	8	blk
op	16:56	0:0	8	]
arg	16:59	16:75	7	block->qmant[ch]
water	16:59	0:0	8	block
op	16:64	0:0	8	->
water	16:66	0:0	8	qmant
op	16:71	0:0	8	[
water	16:72	0:0	8	ch
op	16:74	0:0	8	]
arg	17:38	17:55	7	s->start_freq[ch]
water	17:38	0:0	8	s
op	17:39	0:0	8	->
water	17:41	0:0	8	start_freq
op	17:51	0:0	8	[
water	17:52	0:0	8	ch
op	17:54	0:0	8	]
arg	17:57	17:76	7	block->end_freq[ch]
water	17:57	0:0	8	block
op	17:62	0:0	8	->
water	17:64	0:0	8	end_freq
op	17:72	0:0	8	[
water	17:73	0:0	8	ch
op	17:75	0:0	8	]
water	17:77	0:0	6	;
if	18:12	19:24	6	(ch == CPL_CH)
cond	18:16	18:22	7	ch == CPL_CH
water	18:16	0:0	8	ch
op	18:19	0:0	8	==
water	18:22	0:0	8	CPL_CH
stmts	19:16	19:24	7	
water	19:16	0:0	8	ch
op	19:19	0:0	8	=
water	19:21	0:0	8	ch0
water	19:24	0:0	8	;
water	20:8	0:0	6	}
water	21:4	0:0	4	}
