func	1:0	62:0	0	static void	m4sl_cb
params	1:19	0:0	1	
param	1:20	1:40	2	MpegTSFilter *	filter
param	1:42	1:64	2	const uint8_t *	section
param	2:20	2:35	2	int	section_len
stmnts	0:0	61:46	1	
decl	4:4	4:55	2	MpegTSContext	*ts
op	4:22	0:0	2	=
water	4:24	0:0	2	filter
op	4:30	0:0	2	->
water	4:32	0:0	2	u
op	4:33	0:0	2	.
water	4:34	0:0	2	section_filter
op	4:48	0:0	2	.
water	4:49	0:0	2	opaque
decl	5:4	5:57	2	MpegTSSectionFilter	*tssf
op	5:30	0:0	2	=
op	5:32	0:0	2	&
water	5:33	0:0	2	filter
op	5:39	0:0	2	->
water	5:41	0:0	2	u
op	5:42	0:0	2	.
water	5:43	0:0	2	section_filter
decl	6:4	6:19	2	SectionHeader	h
decl	7:4	7:28	2	const uint8_t	*p
water	7:20	0:0	2	,
decl	7:4	7:28	2	const uint8_t	*p_end
decl	8:4	8:18	2	AVIOContext	pb
decl	9:4	9:27	2	int	mp4_descr_count
op	9:24	0:0	2	=
water	9:26	0:0	2	0
decl	10:4	10:55	2	Mp4Descr	mp4_descr[MAX_MP4_DESCR_COUNT]
op	10:44	0:0	2	=
water	10:46	0:0	2	{
water	10:48	0:0	2	{
water	10:50	0:0	2	0
water	10:52	0:0	2	}
water	10:54	0:0	2	}
decl	11:4	11:14	2	int	i
water	11:9	0:0	2	,
decl	11:4	11:14	2	int	pid
decl	12:4	12:35	2	AVFormatContext	*s
op	12:23	0:0	2	=
water	12:25	0:0	2	ts
op	12:27	0:0	2	->
water	12:29	0:0	2	stream
water	13:4	0:0	2	p_end
op	13:10	0:0	2	=
water	13:12	0:0	2	section
op	13:20	0:0	2	+
water	13:22	0:0	2	section_len
op	13:34	0:0	2	-
water	13:36	0:0	2	4
water	13:37	0:0	2	;
water	14:4	0:0	2	p
op	14:6	0:0	2	=
water	14:8	0:0	2	section
water	14:15	0:0	2	;
if	15:4	16:14	2	(parse_section_header (& h ,& p ,p_end ) < 0)
cond	15:8	15:46	3	parse_section_header (& h ,& p ,p_end ) < 0
call	15:8	15:42	4	parse_section_header
arg	15:29	15:31	5	&h
op	15:29	0:0	6	&
water	15:30	0:0	6	h
arg	15:33	15:35	5	&p
op	15:33	0:0	6	&
water	15:34	0:0	6	p
arg	15:37	15:42	5	p_end
water	15:37	0:0	6	p_end
op	15:44	0:0	4	<
water	15:46	0:0	4	0
stmts	16:8	16:14	3	
return	16:8	16:14	4	
if	17:4	18:14	2	(h . tid != M4OD_TID)
cond	17:8	17:17	3	h . tid != M4OD_TID
water	17:8	0:0	4	h
op	17:9	0:0	4	.
water	17:10	0:0	4	tid
op	17:14	0:0	4	!=
water	17:17	0:0	4	M4OD_TID
stmts	18:8	18:14	3	
return	18:8	18:14	4	
if	19:4	20:14	2	(skip_identical (& h ,tssf ))
cond	19:8	19:31	3	skip_identical (& h ,tssf )
call	19:8	19:31	4	skip_identical
arg	19:23	19:25	5	&h
op	19:23	0:0	6	&
water	19:24	0:0	6	h
arg	19:27	19:31	5	tssf
water	19:27	0:0	6	tssf
stmts	20:8	20:14	3	
return	20:8	20:14	4	
call	21:4	22:35	2	mp4_read_od
arg	21:16	21:17	3	s
water	21:16	0:0	4	s
arg	21:19	21:20	3	p
water	21:19	0:0	4	p
arg	21:22	21:44	3	(unsigned)(p_end-p)
call	21:22	21:43	4	(unsigned)
arg	21:34	21:43	5	p_end-p
water	21:34	0:0	6	p_end
op	21:40	0:0	6	-
water	21:42	0:0	6	p
arg	21:46	21:55	3	mp4_descr
water	21:46	0:0	4	mp4_descr
arg	21:57	21:73	3	&mp4_descr_count
op	21:57	0:0	4	&
water	21:58	0:0	4	mp4_descr_count
arg	22:16	22:35	3	MAX_MP4_DESCR_COUNT
water	22:16	0:0	4	MAX_MP4_DESCR_COUNT
water	22:36	0:0	2	;
for	23:4	59:4	2	(pid = 0 ;pid < NB_PID_MAX;pid ++)
forinit	23:9	23:16	3	pid = 0 ;
water	23:9	0:0	4	pid
op	23:13	0:0	4	=
water	23:15	0:0	4	0
water	23:16	0:0	4	;
cond	23:18	23:24	3	pid < NB_PID_MAX
water	23:18	0:0	4	pid
op	23:22	0:0	4	<
water	23:24	0:0	4	NB_PID_MAX
forexpr	23:36	23:39	3	pid ++
water	23:36	0:0	4	pid
op	23:39	0:0	4	++
stmts	23:43	59:4	3	
water	23:43	0:0	4	{
if	24:8	25:20	4	(! ts -> pids [ pid ])
cond	24:12	24:25	5	! ts -> pids [ pid ]
op	24:12	0:0	6	!
water	24:13	0:0	6	ts
op	24:15	0:0	6	->
water	24:17	0:0	6	pids
op	24:21	0:0	6	[
water	24:22	0:0	6	pid
op	24:25	0:0	6	]
stmts	25:12	25:20	5	
continue	25:12	25:20	6	
for	26:8	58:8	4	(i = 0 ;i < mp4_descr_count;i ++)
forinit	26:13	26:18	5	i = 0 ;
water	26:13	0:0	6	i
op	26:15	0:0	6	=
water	26:17	0:0	6	0
water	26:18	0:0	6	;
cond	26:20	26:24	5	i < mp4_descr_count
water	26:20	0:0	6	i
op	26:22	0:0	6	<
water	26:24	0:0	6	mp4_descr_count
forexpr	26:41	26:42	5	i ++
water	26:41	0:0	6	i
op	26:42	0:0	6	++
stmts	26:46	58:8	5	
water	26:46	0:0	6	{
decl	27:12	27:27	6	PESContext	*pes
decl	28:12	28:24	6	AVStream	*st
if	29:12	30:24	6	(ts -> pids [ pid ] -> es_id != mp4_descr [ i ] . es_id)
cond	29:16	29:53	7	ts -> pids [ pid ] -> es_id != mp4_descr [ i ] . es_id
water	29:16	0:0	8	ts
op	29:18	0:0	8	->
water	29:20	0:0	8	pids
op	29:24	0:0	8	[
water	29:25	0:0	8	pid
op	29:28	0:0	8	]
op	29:29	0:0	8	->
water	29:31	0:0	8	es_id
op	29:37	0:0	8	!=
water	29:40	0:0	8	mp4_descr
op	29:49	0:0	8	[
water	29:50	0:0	8	i
op	29:51	0:0	8	]
op	29:52	0:0	8	.
water	29:53	0:0	8	es_id
stmts	30:16	30:24	7	
continue	30:16	30:24	8	
if	31:12	34:12	6	(ts -> pids [ pid ] -> type != MPEGTS_PES)
cond	31:16	31:39	7	ts -> pids [ pid ] -> type != MPEGTS_PES
water	31:16	0:0	8	ts
op	31:18	0:0	8	->
water	31:20	0:0	8	pids
op	31:24	0:0	8	[
water	31:25	0:0	8	pid
op	31:28	0:0	8	]
op	31:29	0:0	8	->
water	31:31	0:0	8	type
op	31:36	0:0	8	!=
water	31:39	0:0	8	MPEGTS_PES
stmts	31:51	34:12	7	
water	31:51	0:0	8	{
call	32:16	32:66	8	av_log
arg	32:23	32:24	9	s
water	32:23	0:0	10	s
arg	32:26	32:38	9	AV_LOG_ERROR
water	32:26	0:0	10	AV_LOG_ERROR
arg	32:40	32:61	9	"pid %x is not PES\n"
water	32:40	0:0	10	"pid %x is not PES\n"
arg	32:63	32:66	9	pid
water	32:63	0:0	10	pid
water	32:67	0:0	8	;
continue	33:16	33:24	8	
water	34:12	0:0	8	}
water	35:12	0:0	6	pes
op	35:16	0:0	6	=
water	35:18	0:0	6	ts
op	35:20	0:0	6	->
water	35:22	0:0	6	pids
op	35:26	0:0	6	[
water	35:27	0:0	6	pid
op	35:30	0:0	6	]
op	35:31	0:0	6	->
water	35:33	0:0	6	u
op	35:34	0:0	6	.
water	35:35	0:0	6	pes_filter
op	35:45	0:0	6	.
water	35:46	0:0	6	opaque
water	35:52	0:0	6	;
water	36:12	0:0	6	st
op	36:16	0:0	6	=
water	36:18	0:0	6	pes
op	36:21	0:0	6	->
water	36:23	0:0	6	st
water	36:25	0:0	6	;
if	37:12	38:24	6	(! st)
cond	37:16	37:17	7	! st
op	37:16	0:0	8	!
water	37:17	0:0	8	st
stmts	38:16	38:24	7	
continue	38:16	38:24	8	
water	39:12	0:0	6	pes
op	39:15	0:0	6	->
water	39:17	0:0	6	sl
op	39:20	0:0	6	=
water	39:22	0:0	6	mp4_descr
op	39:31	0:0	6	[
water	39:32	0:0	6	i
op	39:33	0:0	6	]
op	39:34	0:0	6	.
water	39:35	0:0	6	sl
water	39:37	0:0	6	;
call	40:12	42:52	6	ffio_init_context
arg	40:30	40:33	7	&pb
op	40:30	0:0	8	&
water	40:31	0:0	8	pb
arg	40:35	40:64	7	mp4_descr[i].dec_config_descr
water	40:35	0:0	8	mp4_descr
op	40:44	0:0	8	[
water	40:45	0:0	8	i
op	40:46	0:0	8	]
op	40:47	0:0	8	.
water	40:48	0:0	8	dec_config_descr
arg	41:30	41:63	7	mp4_descr[i].dec_config_descr_len
water	41:30	0:0	8	mp4_descr
op	41:39	0:0	8	[
water	41:40	0:0	8	i
op	41:41	0:0	8	]
op	41:42	0:0	8	.
water	41:43	0:0	8	dec_config_descr_len
arg	41:65	41:66	7	0
water	41:65	0:0	8	0
arg	42:30	42:34	7	NULL
water	42:30	0:0	8	NULL
arg	42:36	42:40	7	NULL
water	42:36	0:0	8	NULL
arg	42:42	42:46	7	NULL
water	42:42	0:0	8	NULL
arg	42:48	42:52	7	NULL
water	42:48	0:0	8	NULL
water	42:53	0:0	6	;
call	43:12	43:51	6	ff_mp4_read_dec_config_descr
arg	43:41	43:42	7	s
water	43:41	0:0	8	s
arg	43:44	43:46	7	st
water	43:44	0:0	8	st
arg	43:48	43:51	7	&pb
op	43:48	0:0	8	&
water	43:49	0:0	8	pb
water	43:52	0:0	6	;
if	44:12	46:36	6	(st -> codec -> codec_id == AV_CODEC_ID_AAC && st -> codec -> extradata_size > 0)
cond	44:16	45:44	7	st -> codec -> codec_id == AV_CODEC_ID_AAC && st -> codec -> extradata_size > 0
water	44:16	0:0	8	st
op	44:18	0:0	8	->
water	44:20	0:0	8	codec
op	44:25	0:0	8	->
water	44:27	0:0	8	codec_id
op	44:36	0:0	8	==
water	44:39	0:0	8	AV_CODEC_ID_AAC
op	44:55	0:0	8	&&
water	45:16	0:0	8	st
op	45:18	0:0	8	->
water	45:20	0:0	8	codec
op	45:25	0:0	8	->
water	45:27	0:0	8	extradata_size
op	45:42	0:0	8	>
water	45:44	0:0	8	0
stmts	46:16	46:36	7	
water	46:16	0:0	8	st
op	46:18	0:0	8	->
water	46:20	0:0	8	need_parsing
op	46:33	0:0	8	=
water	46:35	0:0	8	0
water	46:36	0:0	8	;
if	47:12	49:36	6	(st -> codec -> codec_id == AV_CODEC_ID_H264 && st -> codec -> extradata_size > 0)
cond	47:16	48:44	7	st -> codec -> codec_id == AV_CODEC_ID_H264 && st -> codec -> extradata_size > 0
water	47:16	0:0	8	st
op	47:18	0:0	8	->
water	47:20	0:0	8	codec
op	47:25	0:0	8	->
water	47:27	0:0	8	codec_id
op	47:36	0:0	8	==
water	47:39	0:0	8	AV_CODEC_ID_H264
op	47:56	0:0	8	&&
water	48:16	0:0	8	st
op	48:18	0:0	8	->
water	48:20	0:0	8	codec
op	48:25	0:0	8	->
water	48:27	0:0	8	extradata_size
op	48:42	0:0	8	>
water	48:44	0:0	8	0
stmts	49:16	49:36	7	
water	49:16	0:0	8	st
op	49:18	0:0	8	->
water	49:20	0:0	8	need_parsing
op	49:33	0:0	8	=
water	49:35	0:0	8	0
water	49:36	0:0	8	;
if	50:12	52:12	6	(st -> codec -> codec_id <= AV_CODEC_ID_NONE)
cond	50:16	50:39	7	st -> codec -> codec_id <= AV_CODEC_ID_NONE
water	50:16	0:0	8	st
op	50:18	0:0	8	->
water	50:20	0:0	8	codec
op	50:25	0:0	8	->
water	50:27	0:0	8	codec_id
op	50:36	0:0	8	<=
water	50:39	0:0	8	AV_CODEC_ID_NONE
stmts	50:57	52:12	7	
water	50:57	0:0	8	{
water	0:0	0:0	8	STATEMENTS
water	52:12	0:0	8	}
else	52:14	53:58	6
stmts	52:19	53:58	7	
if	52:19	53:58	8	(st -> codec -> codec_id < AV_CODEC_ID_FIRST_AUDIO)
cond	52:23	52:45	9	st -> codec -> codec_id < AV_CODEC_ID_FIRST_AUDIO
water	52:23	0:0	10	st
op	52:25	0:0	10	->
water	52:27	0:0	10	codec
op	52:32	0:0	10	->
water	52:34	0:0	10	codec_id
op	52:43	0:0	10	<
water	52:45	0:0	10	AV_CODEC_ID_FIRST_AUDIO
stmts	53:16	53:58	9	
water	53:16	0:0	10	st
op	53:18	0:0	10	->
water	53:20	0:0	10	codec
op	53:25	0:0	10	->
water	53:27	0:0	10	codec_type
op	53:38	0:0	10	=
water	53:40	0:0	10	AVMEDIA_TYPE_VIDEO
water	53:58	0:0	10	;
else	54:12	55:58	6
stmts	54:17	55:58	7	
if	54:17	55:58	8	(st -> codec -> codec_id < AV_CODEC_ID_FIRST_SUBTITLE)
cond	54:21	54:43	9	st -> codec -> codec_id < AV_CODEC_ID_FIRST_SUBTITLE
water	54:21	0:0	10	st
op	54:23	0:0	10	->
water	54:25	0:0	10	codec
op	54:30	0:0	10	->
water	54:32	0:0	10	codec_id
op	54:41	0:0	10	<
water	54:43	0:0	10	AV_CODEC_ID_FIRST_SUBTITLE
stmts	55:16	55:58	9	
water	55:16	0:0	10	st
op	55:18	0:0	10	->
water	55:20	0:0	10	codec
op	55:25	0:0	10	->
water	55:27	0:0	10	codec_type
op	55:38	0:0	10	=
water	55:40	0:0	10	AVMEDIA_TYPE_AUDIO
water	55:58	0:0	10	;
else	56:12	57:61	6
stmts	56:17	57:61	7	
if	56:17	57:61	8	(st -> codec -> codec_id < AV_CODEC_ID_FIRST_UNKNOWN)
cond	56:21	56:43	9	st -> codec -> codec_id < AV_CODEC_ID_FIRST_UNKNOWN
water	56:21	0:0	10	st
op	56:23	0:0	10	->
water	56:25	0:0	10	codec
op	56:30	0:0	10	->
water	56:32	0:0	10	codec_id
op	56:41	0:0	10	<
water	56:43	0:0	10	AV_CODEC_ID_FIRST_UNKNOWN
stmts	57:16	57:61	9	
water	57:16	0:0	10	st
op	57:18	0:0	10	->
water	57:20	0:0	10	codec
op	57:25	0:0	10	->
water	57:27	0:0	10	codec_type
op	57:38	0:0	10	=
water	57:40	0:0	10	AVMEDIA_TYPE_SUBTITLE
water	57:61	0:0	10	;
water	58:8	0:0	6	}
water	59:4	0:0	4	}
for	60:4	61:46	2	(i = 0 ;i < mp4_descr_count;i ++)
forinit	60:9	60:14	3	i = 0 ;
water	60:9	0:0	4	i
op	60:11	0:0	4	=
water	60:13	0:0	4	0
water	60:14	0:0	4	;
cond	60:16	60:20	3	i < mp4_descr_count
water	60:16	0:0	4	i
op	60:18	0:0	4	<
water	60:20	0:0	4	mp4_descr_count
forexpr	60:37	60:38	3	i ++
water	60:37	0:0	4	i
op	60:38	0:0	4	++
stmts	61:8	61:46	3	
call	61:8	61:45	4	av_free
arg	61:16	61:45	5	mp4_descr[i].dec_config_descr
water	61:16	0:0	6	mp4_descr
op	61:25	0:0	6	[
water	61:26	0:0	6	i
op	61:27	0:0	6	]
op	61:28	0:0	6	.
water	61:29	0:0	6	dec_config_descr
water	61:46	0:0	4	;
