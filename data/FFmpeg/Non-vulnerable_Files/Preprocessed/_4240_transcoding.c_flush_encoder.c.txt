func	1:0	17:0	0	static int	flush_encoder
params	1:24	0:0	1	
param	1:25	1:50	2	unsigned int	stream_index
stmnts	0:0	16:14	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:17	2	int	got_frame
if	5:4	7:16	2	(! ( ofmt_ctx -> streams [ stream_index ] -> codec -> codec -> capabilities & AV_CODEC_CAP_DELAY ))
cond	5:8	6:34	3	! ( ofmt_ctx -> streams [ stream_index ] -> codec -> codec -> capabilities & AV_CODEC_CAP_DELAY )
op	5:8	0:0	4	!
water	5:9	0:0	4	(
water	5:10	0:0	4	ofmt_ctx
op	5:18	0:0	4	->
water	5:20	0:0	4	streams
op	5:27	0:0	4	[
water	5:28	0:0	4	stream_index
op	5:40	0:0	4	]
op	5:41	0:0	4	->
water	5:43	0:0	4	codec
op	5:48	0:0	4	->
water	5:50	0:0	4	codec
op	5:55	0:0	4	->
water	5:57	0:0	4	capabilities
op	5:70	0:0	4	&
water	6:16	0:0	4	AV_CODEC_CAP_DELAY
water	6:34	0:0	4	)
stmts	7:8	7:16	3	
return	7:8	7:16	4	0
water	7:15	0:0	5	0
while	8:4	15:4	2	(1)
cond	8:11	8:11	3	1
water	8:11	0:0	4	1
stmts	8:14	15:4	3	
water	8:14	0:0	4	{
call	9:8	9:79	4	av_log
arg	9:15	9:19	5	NULL
water	9:15	0:0	6	NULL
arg	9:21	9:32	5	AV_LOG_INFO
water	9:21	0:0	6	AV_LOG_INFO
arg	9:34	9:65	5	"Flushing stream #%u encoder\n"
water	9:34	0:0	6	"Flushing stream #%u encoder\n"
arg	9:67	9:79	5	stream_index
water	9:67	0:0	6	stream_index
water	9:80	0:0	4	;
water	10:8	0:0	4	ret
op	10:12	0:0	4	=
call	10:14	10:63	4	encode_write_frame
arg	10:33	10:37	5	NULL
water	10:33	0:0	6	NULL
arg	10:39	10:51	5	stream_index
water	10:39	0:0	6	stream_index
arg	10:53	10:63	5	&got_frame
op	10:53	0:0	6	&
water	10:54	0:0	6	got_frame
water	10:64	0:0	4	;
if	11:8	12:17	4	(ret < 0)
cond	11:12	11:18	5	ret < 0
water	11:12	0:0	6	ret
op	11:16	0:0	6	<
water	11:18	0:0	6	0
stmts	12:12	12:17	5	
break	12:12	12:17	6	
if	13:8	14:20	4	(! got_frame)
cond	13:12	13:13	5	! got_frame
op	13:12	0:0	6	!
water	13:13	0:0	6	got_frame
stmts	14:12	14:20	5	
return	14:12	14:20	6	0
water	14:19	0:0	7	0
water	15:4	0:0	4	}
return	16:4	16:14	2	ret
water	16:11	0:0	3	ret
