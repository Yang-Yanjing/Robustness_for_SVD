func	1:0	88:0	0	static void	mkv_write_block
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
param	1:48	1:63	2	AVIOContext *	pb
param	2:28	2:48	2	unsigned int	blockid
param	2:50	2:63	2	AVPacket *	pkt
param	2:65	2:77	2	int	keyframe
stmnts	0:0	87:4	1	
decl	4:4	4:42	2	MatroskaMuxContext	*mkv
op	4:28	0:0	2	=
water	4:30	0:0	2	s
op	4:31	0:0	2	->
water	4:33	0:0	2	priv_data
decl	5:4	5:64	2	AVCodecContext	*codec
op	5:26	0:0	2	=
water	5:28	0:0	2	s
op	5:29	0:0	2	->
water	5:31	0:0	2	streams
op	5:38	0:0	2	[
water	5:39	0:0	2	pkt
op	5:42	0:0	2	->
water	5:44	0:0	2	stream_index
op	5:56	0:0	2	]
op	5:57	0:0	2	->
water	5:59	0:0	2	codec
decl	6:4	6:43	2	uint8_t	*data
op	6:18	0:0	2	=
water	6:20	0:0	2	NULL
water	6:24	0:0	2	,
decl	6:4	6:43	2	uint8_t	*side_data
op	6:37	0:0	2	=
water	6:39	0:0	2	NULL
decl	7:4	7:56	2	int	offset
op	7:15	0:0	2	=
water	7:17	0:0	2	0
water	7:18	0:0	2	,
decl	7:4	7:56	2	int	size
op	7:25	0:0	2	=
water	7:27	0:0	2	pkt
op	7:30	0:0	2	->
water	7:32	0:0	2	size
water	7:36	0:0	2	,
decl	7:4	7:56	2	int	side_data_size
op	7:53	0:0	2	=
water	7:55	0:0	2	0
decl	8:4	8:79	2	int64_t	ts
op	8:15	0:0	2	=
water	8:17	0:0	2	mkv
op	8:20	0:0	2	->
water	8:22	0:0	2	tracks
op	8:28	0:0	2	[
water	8:29	0:0	2	pkt
op	8:32	0:0	2	->
water	8:34	0:0	2	stream_index
op	8:46	0:0	2	]
op	8:47	0:0	2	.
water	8:48	0:0	2	write_dts
water	8:58	0:0	2	?
water	8:60	0:0	2	pkt
op	8:63	0:0	2	->
water	8:65	0:0	2	dts
water	8:69	0:0	2	:
water	8:71	0:0	2	pkt
op	8:74	0:0	2	->
water	8:76	0:0	2	pts
decl	9:4	9:30	2	uint64_t	additional_id
op	9:27	0:0	2	=
water	9:29	0:0	2	0
decl	10:4	10:31	2	int64_t	discard_padding
op	10:28	0:0	2	=
water	10:30	0:0	2	0
decl	11:4	11:92	2	uint8_t	track_number
op	11:25	0:0	2	=
water	11:27	0:0	2	(
water	11:28	0:0	2	mkv
op	11:31	0:0	2	->
water	11:33	0:0	2	is_dash
water	11:41	0:0	2	?
water	11:43	0:0	2	mkv
op	11:46	0:0	2	->
water	11:48	0:0	2	dash_track_number
water	11:66	0:0	2	:
water	11:68	0:0	2	(
water	11:69	0:0	2	pkt
op	11:72	0:0	2	->
water	11:74	0:0	2	stream_index
op	11:87	0:0	2	+
water	11:89	0:0	2	1
water	11:90	0:0	2	)
water	11:91	0:0	2	)
decl	12:4	12:56	2	ebml_master	block_group
water	12:27	0:0	2	,
decl	12:4	12:56	2	ebml_master	block_additions
water	12:44	0:0	2	,
decl	12:4	12:56	2	ebml_master	block_more
call	13:4	16:24	2	av_log
arg	13:11	13:12	3	s
water	13:11	0:0	4	s
arg	13:14	13:26	3	AV_LOG_DEBUG
water	13:14	0:0	4	AV_LOG_DEBUG
arg	13:28	14:73	3	"Writing block at offset %"PRIu64", size %d, ""pts %"PRId64", dts %"PRId64", duration %d, keyframe %d\n"
water	13:28	0:0	4	"Writing block at offset %"
water	13:56	0:0	4	PRIu64
water	13:63	0:0	4	", size %d, "
water	14:11	0:0	4	"pts %"
water	14:19	0:0	4	PRId64
water	14:26	0:0	4	", dts %"
water	14:36	0:0	4	PRId64
water	14:43	0:0	4	", duration %d, keyframe %d\n"
arg	15:11	15:24	3	avio_tell(pb)
call	15:11	15:23	4	avio_tell
arg	15:21	15:23	5	pb
water	15:21	0:0	6	pb
arg	15:26	15:35	3	pkt->size
water	15:26	0:0	4	pkt
op	15:29	0:0	4	->
water	15:31	0:0	4	size
arg	15:37	15:45	3	pkt->pts
water	15:37	0:0	4	pkt
op	15:40	0:0	4	->
water	15:42	0:0	4	pts
arg	15:47	15:55	3	pkt->dts
water	15:47	0:0	4	pkt
op	15:50	0:0	4	->
water	15:52	0:0	4	dts
arg	15:57	15:70	3	pkt->duration
water	15:57	0:0	4	pkt
op	15:60	0:0	4	->
water	15:62	0:0	4	duration
arg	16:11	16:24	3	keyframe!=0
water	16:11	0:0	4	keyframe
op	16:20	0:0	4	!=
water	16:23	0:0	4	0
water	16:25	0:0	2	;
if	17:4	19:59	2	(codec -> codec_id == AV_CODEC_ID_H264 && codec -> extradata_size > 0 && (AV_RB24 (codec -> extradata ) == 1 ||AV_RB32 (codec -> extradata ) == 1 ))
cond	17:8	18:73	3	codec -> codec_id == AV_CODEC_ID_H264 && codec -> extradata_size > 0 && (AV_RB24 (codec -> extradata ) == 1 ||AV_RB32 (codec -> extradata ) == 1 )
water	17:8	0:0	4	codec
op	17:13	0:0	4	->
water	17:15	0:0	4	codec_id
op	17:24	0:0	4	==
water	17:27	0:0	4	AV_CODEC_ID_H264
op	17:44	0:0	4	&&
water	17:47	0:0	4	codec
op	17:52	0:0	4	->
water	17:54	0:0	4	extradata_size
op	17:69	0:0	4	>
water	17:71	0:0	4	0
op	17:73	0:0	4	&&
water	18:8	0:0	4	(
call	18:9	18:33	4	AV_RB24
arg	18:17	18:33	5	codec->extradata
water	18:17	0:0	6	codec
op	18:22	0:0	6	->
water	18:24	0:0	6	extradata
op	18:35	0:0	4	==
water	18:38	0:0	4	1
op	18:40	0:0	4	||
call	18:43	18:67	4	AV_RB32
arg	18:51	18:67	5	codec->extradata
water	18:51	0:0	6	codec
op	18:56	0:0	6	->
water	18:58	0:0	6	extradata
op	18:69	0:0	4	==
water	18:72	0:0	4	1
water	18:73	0:0	4	)
stmts	19:8	19:59	3	
call	19:8	19:58	4	ff_avc_parse_nal_units_buf
arg	19:35	19:44	5	pkt->data
water	19:35	0:0	6	pkt
op	19:38	0:0	6	->
water	19:40	0:0	6	data
arg	19:46	19:51	5	&data
op	19:46	0:0	6	&
water	19:47	0:0	6	data
arg	19:53	19:58	5	&size
op	19:53	0:0	6	&
water	19:54	0:0	6	size
water	19:59	0:0	4	;
else	20:4	23:64	2
stmts	20:9	23:64	3	
if	20:9	23:64	4	(codec -> codec_id == AV_CODEC_ID_HEVC && codec -> extradata_size > 6 && (AV_RB24 (codec -> extradata ) == 1 ||AV_RB32 (codec -> extradata ) == 1 ))
cond	20:13	21:78	5	codec -> codec_id == AV_CODEC_ID_HEVC && codec -> extradata_size > 6 && (AV_RB24 (codec -> extradata ) == 1 ||AV_RB32 (codec -> extradata ) == 1 )
water	20:13	0:0	6	codec
op	20:18	0:0	6	->
water	20:20	0:0	6	codec_id
op	20:29	0:0	6	==
water	20:32	0:0	6	AV_CODEC_ID_HEVC
op	20:49	0:0	6	&&
water	20:52	0:0	6	codec
op	20:57	0:0	6	->
water	20:59	0:0	6	extradata_size
op	20:74	0:0	6	>
water	20:76	0:0	6	6
op	20:78	0:0	6	&&
water	21:13	0:0	6	(
call	21:14	21:38	6	AV_RB24
arg	21:22	21:38	7	codec->extradata
water	21:22	0:0	8	codec
op	21:27	0:0	8	->
water	21:29	0:0	8	extradata
op	21:40	0:0	6	==
water	21:43	0:0	6	1
op	21:45	0:0	6	||
call	21:48	21:72	6	AV_RB32
arg	21:56	21:72	7	codec->extradata
water	21:56	0:0	8	codec
op	21:61	0:0	8	->
water	21:63	0:0	8	extradata
op	21:74	0:0	6	==
water	21:77	0:0	6	1
water	21:78	0:0	6	)
stmts	23:8	23:64	5	
call	23:8	23:63	6	ff_hevc_annexb2mp4_buf
arg	23:31	23:40	7	pkt->data
water	23:31	0:0	8	pkt
op	23:34	0:0	8	->
water	23:36	0:0	8	data
arg	23:42	23:47	7	&data
op	23:42	0:0	8	&
water	23:43	0:0	8	data
arg	23:49	23:54	7	&size
op	23:49	0:0	8	&
water	23:50	0:0	8	size
arg	23:56	23:57	7	0
water	23:56	0:0	8	0
arg	23:59	23:63	7	NULL
water	23:59	0:0	8	NULL
water	23:64	0:0	6	;
else	24:4	30:4	2
stmts	24:9	30:4	3	
if	24:9	30:4	4	(codec -> codec_id == AV_CODEC_ID_WAVPACK)
cond	24:13	24:32	5	codec -> codec_id == AV_CODEC_ID_WAVPACK
water	24:13	0:0	6	codec
op	24:18	0:0	6	->
water	24:20	0:0	6	codec_id
op	24:29	0:0	6	==
water	24:32	0:0	6	AV_CODEC_ID_WAVPACK
stmts	24:53	30:4	5	
water	24:53	0:0	6	{
decl	25:8	25:60	6	int	ret
op	25:16	0:0	6	=
call	25:18	25:59	7	mkv_strip_wavpack
arg	25:36	25:45	8	pkt->data
water	25:36	0:0	9	pkt
op	25:39	0:0	9	->
water	25:41	0:0	9	data
arg	25:47	25:52	8	&data
op	25:47	0:0	9	&
water	25:48	0:0	9	data
arg	25:54	25:59	8	&size
op	25:54	0:0	9	&
water	25:55	0:0	9	size
if	26:8	29:8	6	(ret < 0)
cond	26:12	26:18	7	ret < 0
water	26:12	0:0	8	ret
op	26:16	0:0	8	<
water	26:18	0:0	8	0
stmts	26:21	29:8	7	
water	26:21	0:0	8	{
call	27:12	27:73	8	av_log
arg	27:19	27:20	9	s
water	27:19	0:0	10	s
arg	27:22	27:34	9	AV_LOG_ERROR
water	27:22	0:0	10	AV_LOG_ERROR
arg	27:36	27:73	9	"Error stripping a WavPack packet.\n"
water	27:36	0:0	10	"Error stripping a WavPack packet.\n"
water	27:74	0:0	8	;
return	28:12	28:18	8	
water	29:8	0:0	8	}
water	30:4	0:0	6	}
else	30:6	31:24	2
stmts	31:8	31:24	3	
water	31:8	0:0	4	data
op	31:13	0:0	4	=
water	31:15	0:0	4	pkt
op	31:18	0:0	4	->
water	31:20	0:0	4	data
water	31:24	0:0	4	;
if	32:4	37:4	2	(codec -> codec_id == AV_CODEC_ID_PRORES && size >= 8)
cond	32:8	32:57	3	codec -> codec_id == AV_CODEC_ID_PRORES && size >= 8
water	32:8	0:0	4	codec
op	32:13	0:0	4	->
water	32:15	0:0	4	codec_id
op	32:24	0:0	4	==
water	32:27	0:0	4	AV_CODEC_ID_PRORES
op	32:46	0:0	4	&&
water	32:49	0:0	4	size
op	32:54	0:0	4	>=
water	32:57	0:0	4	8
stmts	32:60	37:4	3	
water	32:60	0:0	4	{
water	35:8	0:0	4	size
op	35:14	0:0	4	-=
water	35:17	0:0	4	8
water	35:18	0:0	4	;
water	36:8	0:0	4	offset
op	36:15	0:0	4	=
water	36:17	0:0	4	8
water	36:18	0:0	4	;
water	37:4	0:0	4	}
water	38:4	0:0	2	side_data
op	38:14	0:0	2	=
call	38:16	40:55	2	av_packet_get_side_data
arg	38:40	38:43	3	pkt
water	38:40	0:0	4	pkt
arg	39:40	39:64	3	AV_PKT_DATA_SKIP_SAMPLES
water	39:40	0:0	4	AV_PKT_DATA_SKIP_SAMPLES
arg	40:40	40:55	3	&side_data_size
op	40:40	0:0	4	&
water	40:41	0:0	4	side_data_size
water	40:56	0:0	2	;
if	41:4	45:4	2	(side_data && side_data_size >= 10)
cond	41:8	41:39	3	side_data && side_data_size >= 10
water	41:8	0:0	4	side_data
op	41:18	0:0	4	&&
water	41:21	0:0	4	side_data_size
op	41:36	0:0	4	>=
water	41:39	0:0	4	10
stmts	41:43	45:4	3	
water	41:43	0:0	4	{
water	42:8	0:0	4	discard_padding
op	42:24	0:0	4	=
call	42:26	44:66	4	av_rescale_q
arg	42:39	42:61	5	AV_RL32(side_data+4)
call	42:39	42:60	6	AV_RL32
arg	42:47	42:60	7	side_data+4
water	42:47	0:0	8	side_data
op	42:57	0:0	8	+
water	42:59	0:0	8	4
arg	43:39	43:74	5	(AVRational){1,codec->sample_rate}
water	43:39	0:0	6	(
water	43:40	0:0	6	AVRational
water	43:50	0:0	6	)
water	43:51	0:0	6	{
water	43:52	0:0	6	1
water	43:53	0:0	6	,
water	43:55	0:0	6	codec
op	43:60	0:0	6	->
water	43:62	0:0	6	sample_rate
water	43:73	0:0	6	}
arg	44:39	44:66	5	(AVRational){1,1000000000}
water	44:39	0:0	6	(
water	44:40	0:0	6	AVRational
water	44:50	0:0	6	)
water	44:51	0:0	6	{
water	44:52	0:0	6	1
water	44:53	0:0	6	,
water	44:55	0:0	6	1000000000
water	44:65	0:0	6	}
water	44:67	0:0	4	;
water	45:4	0:0	4	}
water	46:4	0:0	2	side_data
op	46:14	0:0	2	=
call	46:16	48:55	2	av_packet_get_side_data
arg	46:40	46:43	3	pkt
water	46:40	0:0	4	pkt
arg	47:40	47:76	3	AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL
water	47:40	0:0	4	AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL
arg	48:40	48:55	3	&side_data_size
op	48:40	0:0	4	&
water	48:41	0:0	4	side_data_size
water	48:56	0:0	2	;
if	49:4	53:4	2	(side_data)
cond	49:8	49:8	3	side_data
water	49:8	0:0	4	side_data
stmts	49:19	53:4	3	
water	49:19	0:0	4	{
water	50:8	0:0	4	additional_id
op	50:22	0:0	4	=
call	50:24	50:41	4	AV_RB64
arg	50:32	50:41	5	side_data
water	50:32	0:0	6	side_data
water	50:42	0:0	4	;
water	51:8	0:0	4	side_data
op	51:18	0:0	4	+=
water	51:21	0:0	4	8
water	51:22	0:0	4	;
water	52:8	0:0	4	side_data_size
op	52:23	0:0	4	-=
water	52:26	0:0	4	8
water	52:27	0:0	4	;
water	53:4	0:0	4	}
if	54:4	57:4	2	(( side_data_size && additional_id == 1 ) || discard_padding)
cond	54:8	54:50	3	( side_data_size && additional_id == 1 ) || discard_padding
water	54:8	0:0	4	(
water	54:9	0:0	4	side_data_size
op	54:24	0:0	4	&&
water	54:27	0:0	4	additional_id
op	54:41	0:0	4	==
water	54:44	0:0	4	1
water	54:45	0:0	4	)
op	54:47	0:0	4	||
water	54:50	0:0	4	discard_padding
stmts	54:67	57:4	3	
water	54:67	0:0	4	{
water	55:8	0:0	4	block_group
op	55:20	0:0	4	=
call	55:22	55:69	4	start_ebml_master
arg	55:40	55:42	5	pb
water	55:40	0:0	6	pb
arg	55:44	55:66	5	MATROSKA_ID_BLOCKGROUP
water	55:44	0:0	6	MATROSKA_ID_BLOCKGROUP
arg	55:68	55:69	5	0
water	55:68	0:0	6	0
water	55:70	0:0	4	;
water	56:8	0:0	4	blockid
op	56:16	0:0	4	=
water	56:18	0:0	4	MATROSKA_ID_BLOCK
water	56:35	0:0	4	;
water	57:4	0:0	4	}
call	58:4	58:27	2	put_ebml_id
arg	58:16	58:18	3	pb
water	58:16	0:0	4	pb
arg	58:20	58:27	3	blockid
water	58:20	0:0	4	blockid
water	58:28	0:0	2	;
call	59:4	59:32	2	put_ebml_num
arg	59:17	59:19	3	pb
water	59:17	0:0	4	pb
arg	59:21	59:29	3	size+4
water	59:21	0:0	4	size
op	59:26	0:0	4	+
water	59:28	0:0	4	4
arg	59:31	59:32	3	0
water	59:31	0:0	4	0
water	59:33	0:0	2	;
call	61:4	61:35	2	avio_w8
arg	61:12	61:14	3	pb
water	61:12	0:0	4	pb
arg	61:16	61:35	3	0x80|track_number
water	61:16	0:0	4	0
water	61:17	0:0	4	x80
op	61:21	0:0	4	|
water	61:23	0:0	4	track_number
water	61:36	0:0	2	;
call	62:4	62:39	2	avio_wb16
arg	62:14	62:16	3	pb
water	62:14	0:0	4	pb
arg	62:18	62:39	3	ts-mkv->cluster_pts
water	62:18	0:0	4	ts
op	62:21	0:0	4	-
water	62:23	0:0	4	mkv
op	62:26	0:0	4	->
water	62:28	0:0	4	cluster_pts
water	62:40	0:0	2	;
call	63:4	63:79	2	avio_w8
arg	63:12	63:14	3	pb
water	63:12	0:0	4	pb
arg	63:16	63:79	3	(blockid==MATROSKA_ID_SIMPLEBLOCK&&keyframe)?(1<<7):0
water	63:16	0:0	4	(
water	63:17	0:0	4	blockid
op	63:25	0:0	4	==
water	63:28	0:0	4	MATROSKA_ID_SIMPLEBLOCK
op	63:52	0:0	4	&&
water	63:55	0:0	4	keyframe
water	63:63	0:0	4	)
water	63:65	0:0	4	?
water	63:67	0:0	4	(
water	63:68	0:0	4	1
op	63:70	0:0	4	<<
water	63:73	0:0	4	7
water	63:74	0:0	4	)
water	63:76	0:0	4	:
water	63:78	0:0	4	0
water	63:80	0:0	2	;
call	64:4	64:38	2	avio_write
arg	64:15	64:17	3	pb
water	64:15	0:0	4	pb
arg	64:19	64:32	3	data+offset
water	64:19	0:0	4	data
op	64:24	0:0	4	+
water	64:26	0:0	4	offset
arg	64:34	64:38	3	size
water	64:34	0:0	4	size
water	64:39	0:0	2	;
if	65:4	66:21	2	(data != pkt -> data)
cond	65:8	65:21	3	data != pkt -> data
water	65:8	0:0	4	data
op	65:13	0:0	4	!=
water	65:16	0:0	4	pkt
op	65:19	0:0	4	->
water	65:21	0:0	4	data
stmts	66:8	66:21	3	
call	66:8	66:20	4	av_free
arg	66:16	66:20	5	data
water	66:16	0:0	6	data
water	66:21	0:0	4	;
if	67:4	70:4	2	(blockid == MATROSKA_ID_BLOCK && ! keyframe)
cond	67:8	67:41	3	blockid == MATROSKA_ID_BLOCK && ! keyframe
water	67:8	0:0	4	blockid
op	67:16	0:0	4	==
water	67:19	0:0	4	MATROSKA_ID_BLOCK
op	67:37	0:0	4	&&
op	67:40	0:0	4	!
water	67:41	0:0	4	keyframe
stmts	67:51	70:4	3	
water	67:51	0:0	4	{
call	68:8	69:65	4	put_ebml_sint
arg	68:22	68:24	5	pb
water	68:22	0:0	6	pb
arg	68:26	68:52	5	MATROSKA_ID_BLOCKREFERENCE
water	68:26	0:0	6	MATROSKA_ID_BLOCKREFERENCE
arg	69:22	69:65	5	mkv->last_track_timestamp[track_number-1]
water	69:22	0:0	6	mkv
op	69:25	0:0	6	->
water	69:27	0:0	6	last_track_timestamp
op	69:47	0:0	6	[
water	69:48	0:0	6	track_number
op	69:61	0:0	6	-
water	69:63	0:0	6	1
op	69:64	0:0	6	]
water	69:66	0:0	4	;
water	70:4	0:0	4	}
water	71:4	0:0	2	mkv
op	71:7	0:0	2	->
water	71:9	0:0	2	last_track_timestamp
op	71:29	0:0	2	[
water	71:30	0:0	2	track_number
op	71:43	0:0	2	-
water	71:45	0:0	2	1
op	71:46	0:0	2	]
op	71:48	0:0	2	=
water	71:50	0:0	2	ts
op	71:53	0:0	2	-
water	71:55	0:0	2	mkv
op	71:58	0:0	2	->
water	71:60	0:0	2	cluster_pts
water	71:71	0:0	2	;
if	72:4	74:4	2	(discard_padding)
cond	72:8	72:8	3	discard_padding
water	72:8	0:0	4	discard_padding
stmts	72:25	74:4	3	
water	72:25	0:0	4	{
call	73:8	73:69	4	put_ebml_sint
arg	73:22	73:24	5	pb
water	73:22	0:0	6	pb
arg	73:26	73:52	5	MATROSKA_ID_DISCARDPADDING
water	73:26	0:0	6	MATROSKA_ID_DISCARDPADDING
arg	73:54	73:69	5	discard_padding
water	73:54	0:0	6	discard_padding
water	73:70	0:0	4	;
water	74:4	0:0	4	}
if	75:4	84:4	2	(side_data_size && additional_id == 1)
cond	75:8	75:43	3	side_data_size && additional_id == 1
water	75:8	0:0	4	side_data_size
op	75:23	0:0	4	&&
water	75:26	0:0	4	additional_id
op	75:40	0:0	4	==
water	75:43	0:0	4	1
stmts	75:46	84:4	3	
water	75:46	0:0	4	{
water	76:8	0:0	4	block_additions
op	76:24	0:0	4	=
call	76:26	76:77	4	start_ebml_master
arg	76:44	76:46	5	pb
water	76:44	0:0	6	pb
arg	76:48	76:74	5	MATROSKA_ID_BLOCKADDITIONS
water	76:48	0:0	6	MATROSKA_ID_BLOCKADDITIONS
arg	76:76	76:77	5	0
water	76:76	0:0	6	0
water	76:78	0:0	4	;
water	77:8	0:0	4	block_more
op	77:19	0:0	4	=
call	77:21	77:67	4	start_ebml_master
arg	77:39	77:41	5	pb
water	77:39	0:0	6	pb
arg	77:43	77:64	5	MATROSKA_ID_BLOCKMORE
water	77:43	0:0	6	MATROSKA_ID_BLOCKMORE
arg	77:66	77:67	5	0
water	77:66	0:0	6	0
water	77:68	0:0	4	;
call	78:8	78:51	4	put_ebml_uint
arg	78:22	78:24	5	pb
water	78:22	0:0	6	pb
arg	78:26	78:48	5	MATROSKA_ID_BLOCKADDID
water	78:26	0:0	6	MATROSKA_ID_BLOCKADDID
arg	78:50	78:51	5	1
water	78:50	0:0	6	1
water	78:52	0:0	4	;
call	79:8	79:51	4	put_ebml_id
arg	79:20	79:22	5	pb
water	79:20	0:0	6	pb
arg	79:24	79:51	5	MATROSKA_ID_BLOCKADDITIONAL
water	79:24	0:0	6	MATROSKA_ID_BLOCKADDITIONAL
water	79:52	0:0	4	;
call	80:8	80:42	4	put_ebml_num
arg	80:21	80:23	5	pb
water	80:21	0:0	6	pb
arg	80:25	80:39	5	side_data_size
water	80:25	0:0	6	side_data_size
arg	80:41	80:42	5	0
water	80:41	0:0	6	0
water	80:43	0:0	4	;
call	81:8	81:48	4	avio_write
arg	81:19	81:21	5	pb
water	81:19	0:0	6	pb
arg	81:23	81:32	5	side_data
water	81:23	0:0	6	side_data
arg	81:34	81:48	5	side_data_size
water	81:34	0:0	6	side_data_size
water	81:49	0:0	4	;
call	82:8	82:38	4	end_ebml_master
arg	82:24	82:26	5	pb
water	82:24	0:0	6	pb
arg	82:28	82:38	5	block_more
water	82:28	0:0	6	block_more
water	82:39	0:0	4	;
call	83:8	83:43	4	end_ebml_master
arg	83:24	83:26	5	pb
water	83:24	0:0	6	pb
arg	83:28	83:43	5	block_additions
water	83:28	0:0	6	block_additions
water	83:44	0:0	4	;
water	84:4	0:0	4	}
if	85:4	87:4	2	(( side_data_size && additional_id == 1 ) || discard_padding)
cond	85:8	85:50	3	( side_data_size && additional_id == 1 ) || discard_padding
water	85:8	0:0	4	(
water	85:9	0:0	4	side_data_size
op	85:24	0:0	4	&&
water	85:27	0:0	4	additional_id
op	85:41	0:0	4	==
water	85:44	0:0	4	1
water	85:45	0:0	4	)
op	85:47	0:0	4	||
water	85:50	0:0	4	discard_padding
stmts	85:67	87:4	3	
water	85:67	0:0	4	{
call	86:8	86:39	4	end_ebml_master
arg	86:24	86:26	5	pb
water	86:24	0:0	6	pb
arg	86:28	86:39	5	block_group
water	86:28	0:0	6	block_group
water	86:40	0:0	4	;
water	87:4	0:0	4	}
