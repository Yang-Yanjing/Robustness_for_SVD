func	1:0	102:0	0	static int	run_test
params	1:19	0:0	1	
param	1:20	1:32	2	AVCodec *	enc
param	1:34	1:46	2	AVCodec *	dec
param	1:48	1:71	2	AVCodecContext *	enc_ctx
param	2:20	2:43	2	AVCodecContext *	dec_ctx
stmnts	0:0	101:12	1	
decl	4:4	4:20	2	AVPacket	enc_pkt
decl	5:4	5:33	2	AVFrame	*in_frame
water	5:21	0:0	2	,
decl	5:4	5:33	2	AVFrame	*out_frame
decl	6:4	6:43	2	uint8_t	*raw_in
op	6:20	0:0	2	=
water	6:22	0:0	2	NULL
water	6:26	0:0	2	,
decl	6:4	6:43	2	uint8_t	*raw_out
op	6:37	0:0	2	=
water	6:39	0:0	2	NULL
decl	7:4	7:37	2	int	in_offset
op	7:18	0:0	2	=
water	7:20	0:0	2	0
water	7:21	0:0	2	,
decl	7:4	7:37	2	int	out_offset
op	7:34	0:0	2	=
water	7:36	0:0	2	0
decl	8:4	8:18	2	int	result
op	8:15	0:0	2	=
water	8:17	0:0	2	0
decl	9:4	9:22	2	int	got_output
op	9:19	0:0	2	=
water	9:21	0:0	2	0
decl	10:4	10:13	2	int	i
op	10:10	0:0	2	=
water	10:12	0:0	2	0
decl	11:4	11:39	2	int	in_frame_bytes
water	11:22	0:0	2	,
decl	11:4	11:39	2	int	out_frame_bytes
water	12:4	0:0	2	in_frame
op	12:13	0:0	2	=
call	12:15	12:30	2	av_frame_alloc
water	12:31	0:0	2	;
if	13:4	16:4	2	(! in_frame)
cond	13:8	13:9	3	! in_frame
op	13:8	0:0	4	!
water	13:9	0:0	4	in_frame
stmts	13:19	16:4	3	
water	13:19	0:0	4	{
call	14:8	14:65	4	av_log
arg	14:15	14:19	5	NULL
water	14:15	0:0	6	NULL
arg	14:21	14:33	5	AV_LOG_ERROR
water	14:21	0:0	6	AV_LOG_ERROR
arg	14:35	14:65	5	"Can't allocate input frame\n"
water	14:35	0:0	6	"Can't allocate input frame\n"
water	14:66	0:0	4	;
return	15:8	15:30	4	AVERROR(ENOMEM)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	ENOMEM
water	15:23	0:0	7	ENOMEM
water	16:4	0:0	4	}
water	17:4	0:0	2	in_frame
op	17:12	0:0	2	->
water	17:14	0:0	2	nb_samples
op	17:25	0:0	2	=
water	17:27	0:0	2	enc_ctx
op	17:34	0:0	2	->
water	17:36	0:0	2	frame_size
water	17:46	0:0	2	;
water	18:4	0:0	2	in_frame
op	18:12	0:0	2	->
water	18:14	0:0	2	format
op	18:21	0:0	2	=
water	18:23	0:0	2	enc_ctx
op	18:30	0:0	2	->
water	18:32	0:0	2	sample_fmt
water	18:42	0:0	2	;
water	19:4	0:0	2	in_frame
op	19:12	0:0	2	->
water	19:14	0:0	2	channel_layout
op	19:29	0:0	2	=
water	19:31	0:0	2	enc_ctx
op	19:38	0:0	2	->
water	19:40	0:0	2	channel_layout
water	19:54	0:0	2	;
if	20:4	23:4	2	(av_frame_get_buffer (in_frame ,32 ) != 0)
cond	20:8	20:45	3	av_frame_get_buffer (in_frame ,32 ) != 0
call	20:8	20:40	4	av_frame_get_buffer
arg	20:28	20:36	5	in_frame
water	20:28	0:0	6	in_frame
arg	20:38	20:40	5	32
water	20:38	0:0	6	32
op	20:42	0:0	4	!=
water	20:45	0:0	4	0
stmts	20:48	23:4	3	
water	20:48	0:0	4	{
call	21:8	21:78	4	av_log
arg	21:15	21:19	5	NULL
water	21:15	0:0	6	NULL
arg	21:21	21:33	5	AV_LOG_ERROR
water	21:21	0:0	6	AV_LOG_ERROR
arg	21:35	21:78	5	"Can't allocate a buffer for input frame\n"
water	21:35	0:0	6	"Can't allocate a buffer for input frame\n"
water	21:79	0:0	4	;
return	22:8	22:30	4	AVERROR(ENOMEM)
call	22:15	22:29	5	AVERROR
arg	22:23	22:29	6	ENOMEM
water	22:23	0:0	7	ENOMEM
water	23:4	0:0	4	}
water	24:4	0:0	2	out_frame
op	24:14	0:0	2	=
call	24:16	24:31	2	av_frame_alloc
water	24:32	0:0	2	;
if	25:4	28:4	2	(! out_frame)
cond	25:8	25:9	3	! out_frame
op	25:8	0:0	4	!
water	25:9	0:0	4	out_frame
stmts	25:20	28:4	3	
water	25:20	0:0	4	{
call	26:8	26:66	4	av_log
arg	26:15	26:19	5	NULL
water	26:15	0:0	6	NULL
arg	26:21	26:33	5	AV_LOG_ERROR
water	26:21	0:0	6	AV_LOG_ERROR
arg	26:35	26:66	5	"Can't allocate output frame\n"
water	26:35	0:0	6	"Can't allocate output frame\n"
water	26:67	0:0	4	;
return	27:8	27:30	4	AVERROR(ENOMEM)
call	27:15	27:29	5	AVERROR
arg	27:23	27:29	6	ENOMEM
water	27:23	0:0	7	ENOMEM
water	28:4	0:0	4	}
water	29:4	0:0	2	raw_in
op	29:11	0:0	2	=
call	29:13	29:63	2	av_malloc
arg	29:23	29:63	3	in_frame->linesize[0]*NUMBER_OF_FRAMES
water	29:23	0:0	4	in_frame
op	29:31	0:0	4	->
water	29:33	0:0	4	linesize
op	29:41	0:0	4	[
water	29:42	0:0	4	0
op	29:43	0:0	4	]
op	29:45	0:0	4	*
water	29:47	0:0	4	NUMBER_OF_FRAMES
water	29:64	0:0	2	;
if	30:4	33:4	2	(! raw_in)
cond	30:8	30:9	3	! raw_in
op	30:8	0:0	4	!
water	30:9	0:0	4	raw_in
stmts	30:17	33:4	3	
water	30:17	0:0	4	{
call	31:8	31:71	4	av_log
arg	31:15	31:19	5	NULL
water	31:15	0:0	6	NULL
arg	31:21	31:33	5	AV_LOG_ERROR
water	31:21	0:0	6	AV_LOG_ERROR
arg	31:35	31:71	5	"Can't allocate memory for raw_in\n"
water	31:35	0:0	6	"Can't allocate memory for raw_in\n"
water	31:72	0:0	4	;
return	32:8	32:30	4	AVERROR(ENOMEM)
call	32:15	32:29	5	AVERROR
arg	32:23	32:29	6	ENOMEM
water	32:23	0:0	7	ENOMEM
water	33:4	0:0	4	}
water	34:4	0:0	2	raw_out
op	34:12	0:0	2	=
call	34:14	34:64	2	av_malloc
arg	34:24	34:64	3	in_frame->linesize[0]*NUMBER_OF_FRAMES
water	34:24	0:0	4	in_frame
op	34:32	0:0	4	->
water	34:34	0:0	4	linesize
op	34:42	0:0	4	[
water	34:43	0:0	4	0
op	34:44	0:0	4	]
op	34:46	0:0	4	*
water	34:48	0:0	4	NUMBER_OF_FRAMES
water	34:65	0:0	2	;
if	35:4	38:4	2	(! raw_out)
cond	35:8	35:9	3	! raw_out
op	35:8	0:0	4	!
water	35:9	0:0	4	raw_out
stmts	35:18	38:4	3	
water	35:18	0:0	4	{
call	36:8	36:72	4	av_log
arg	36:15	36:19	5	NULL
water	36:15	0:0	6	NULL
arg	36:21	36:33	5	AV_LOG_ERROR
water	36:21	0:0	6	AV_LOG_ERROR
arg	36:35	36:72	5	"Can't allocate memory for raw_out\n"
water	36:35	0:0	6	"Can't allocate memory for raw_out\n"
water	36:73	0:0	4	;
return	37:8	37:30	4	AVERROR(ENOMEM)
call	37:15	37:29	5	AVERROR
arg	37:23	37:29	6	ENOMEM
water	37:23	0:0	7	ENOMEM
water	38:4	0:0	4	}
for	39:4	91:4	2	(i = 0 ;i < NUMBER_OF_FRAMES;i ++)
forinit	39:9	39:14	3	i = 0 ;
water	39:9	0:0	4	i
op	39:11	0:0	4	=
water	39:13	0:0	4	0
water	39:14	0:0	4	;
cond	39:16	39:20	3	i < NUMBER_OF_FRAMES
water	39:16	0:0	4	i
op	39:18	0:0	4	<
water	39:20	0:0	4	NUMBER_OF_FRAMES
forexpr	39:38	39:39	3	i ++
water	39:38	0:0	4	i
op	39:39	0:0	4	++
stmts	39:43	91:4	3	
water	39:43	0:0	4	{
call	40:8	40:31	4	av_init_packet
arg	40:23	40:31	5	&enc_pkt
op	40:23	0:0	6	&
water	40:24	0:0	6	enc_pkt
water	40:32	0:0	4	;
water	41:8	0:0	4	enc_pkt
op	41:15	0:0	4	.
water	41:16	0:0	4	data
op	41:21	0:0	4	=
water	41:23	0:0	4	NULL
water	41:27	0:0	4	;
water	42:8	0:0	4	enc_pkt
op	42:15	0:0	4	.
water	42:16	0:0	4	size
op	42:21	0:0	4	=
water	42:23	0:0	4	0
water	42:24	0:0	4	;
call	43:8	44:65	4	generate_raw_frame
arg	43:27	43:57	5	(uint16_t*)(in_frame->data[0])
call	43:27	43:56	6	(uint16_t*)
arg	43:39	43:56	7	in_frame->data[0]
water	43:39	0:0	8	in_frame
op	43:47	0:0	8	->
water	43:49	0:0	8	data
op	43:53	0:0	8	[
water	43:54	0:0	8	0
op	43:55	0:0	8	]
arg	43:59	43:60	5	i
water	43:59	0:0	6	i
arg	43:62	43:82	5	enc_ctx->sample_rate
water	43:62	0:0	6	enc_ctx
op	43:69	0:0	6	->
water	43:71	0:0	6	sample_rate
arg	44:27	44:44	5	enc_ctx->channels
water	44:27	0:0	6	enc_ctx
op	44:34	0:0	6	->
water	44:36	0:0	6	channels
arg	44:46	44:65	5	enc_ctx->frame_size
water	44:46	0:0	6	enc_ctx
op	44:53	0:0	6	->
water	44:55	0:0	6	frame_size
water	44:66	0:0	4	;
water	45:8	0:0	4	in_frame_bytes
op	45:23	0:0	4	=
water	45:25	0:0	4	in_frame
op	45:33	0:0	4	->
water	45:35	0:0	4	nb_samples
call	45:46	45:78	4	*av_frame_get_channels
arg	45:70	45:78	5	in_frame
water	45:70	0:0	6	in_frame
op	45:80	0:0	4	*
op	45:82	0:0	4	sizeof
water	45:88	0:0	4	(
water	45:89	0:0	4	uint16_t
water	45:97	0:0	4	)
water	45:98	0:0	4	;
if	46:8	49:8	4	(in_frame_bytes > in_frame -> linesize [ 0 ])
cond	46:12	46:49	5	in_frame_bytes > in_frame -> linesize [ 0 ]
water	46:12	0:0	6	in_frame_bytes
op	46:27	0:0	6	>
water	46:29	0:0	6	in_frame
op	46:37	0:0	6	->
water	46:39	0:0	6	linesize
op	46:47	0:0	6	[
water	46:48	0:0	6	0
op	46:49	0:0	6	]
stmts	46:52	49:8	5	
water	46:52	0:0	6	{
call	47:12	47:82	6	av_log
arg	47:19	47:23	7	NULL
water	47:19	0:0	8	NULL
arg	47:25	47:37	7	AV_LOG_ERROR
water	47:25	0:0	8	AV_LOG_ERROR
arg	47:39	47:82	7	"Incorrect value of input frame linesize\n"
water	47:39	0:0	8	"Incorrect value of input frame linesize\n"
water	47:83	0:0	6	;
return	48:12	48:20	6	1
water	48:19	0:0	7	1
water	49:8	0:0	6	}
call	50:8	50:68	4	memcpy
arg	50:15	50:33	5	raw_in+in_offset
water	50:15	0:0	6	raw_in
op	50:22	0:0	6	+
water	50:24	0:0	6	in_offset
arg	50:35	50:52	5	in_frame->data[0]
water	50:35	0:0	6	in_frame
op	50:43	0:0	6	->
water	50:45	0:0	6	data
op	50:49	0:0	6	[
water	50:50	0:0	6	0
op	50:51	0:0	6	]
arg	50:54	50:68	5	in_frame_bytes
water	50:54	0:0	6	in_frame_bytes
water	50:69	0:0	4	;
water	51:8	0:0	4	in_offset
op	51:18	0:0	4	+=
water	51:21	0:0	4	in_frame_bytes
water	51:35	0:0	4	;
water	52:8	0:0	4	result
op	52:15	0:0	4	=
call	52:17	52:79	4	avcodec_encode_audio2
arg	52:39	52:46	5	enc_ctx
water	52:39	0:0	6	enc_ctx
arg	52:48	52:56	5	&enc_pkt
op	52:48	0:0	6	&
water	52:49	0:0	6	enc_pkt
arg	52:58	52:66	5	in_frame
water	52:58	0:0	6	in_frame
arg	52:68	52:79	5	&got_output
op	52:68	0:0	6	&
water	52:69	0:0	6	got_output
water	52:80	0:0	4	;
if	53:8	56:8	4	(result < 0)
cond	53:12	53:21	5	result < 0
water	53:12	0:0	6	result
op	53:19	0:0	6	<
water	53:21	0:0	6	0
stmts	53:24	56:8	5	
water	53:24	0:0	6	{
call	54:12	54:69	6	av_log
arg	54:19	54:23	7	NULL
water	54:19	0:0	8	NULL
arg	54:25	54:37	7	AV_LOG_ERROR
water	54:25	0:0	8	AV_LOG_ERROR
arg	54:39	54:69	7	"Error encoding audio frame\n"
water	54:39	0:0	8	"Error encoding audio frame\n"
water	54:70	0:0	6	;
return	55:12	55:25	6	result
water	55:19	0:0	7	result
water	56:8	0:0	6	}
if	58:8	89:8	4	(got_output)
cond	58:12	58:12	5	got_output
water	58:12	0:0	6	got_output
stmts	58:24	89:8	5	
water	58:24	0:0	6	{
water	59:12	0:0	6	result
op	59:19	0:0	6	=
call	59:21	59:84	6	avcodec_decode_audio4
arg	59:43	59:50	7	dec_ctx
water	59:43	0:0	8	dec_ctx
arg	59:52	59:61	7	out_frame
water	59:52	0:0	8	out_frame
arg	59:63	59:74	7	&got_output
op	59:63	0:0	8	&
water	59:64	0:0	8	got_output
arg	59:76	59:84	7	&enc_pkt
op	59:76	0:0	8	&
water	59:77	0:0	8	enc_pkt
water	59:85	0:0	6	;
if	60:12	63:12	6	(result < 0)
cond	60:16	60:25	7	result < 0
water	60:16	0:0	8	result
op	60:23	0:0	8	<
water	60:25	0:0	8	0
stmts	60:28	63:12	7	
water	60:28	0:0	8	{
call	61:16	61:74	8	av_log
arg	61:23	61:27	9	NULL
water	61:23	0:0	10	NULL
arg	61:29	61:41	9	AV_LOG_ERROR
water	61:29	0:0	10	AV_LOG_ERROR
arg	61:43	61:74	9	"Error decoding audio packet\n"
water	61:43	0:0	10	"Error decoding audio packet\n"
water	61:75	0:0	8	;
return	62:16	62:29	8	result
water	62:23	0:0	9	result
water	63:12	0:0	8	}
if	64:12	88:12	6	(got_output)
cond	64:16	64:16	7	got_output
water	64:16	0:0	8	got_output
stmts	64:28	88:12	7	
water	64:28	0:0	8	{
if	65:16	68:16	8	(result != enc_pkt . size)
cond	65:20	65:38	9	result != enc_pkt . size
water	65:20	0:0	10	result
op	65:27	0:0	10	!=
water	65:30	0:0	10	enc_pkt
op	65:37	0:0	10	.
water	65:38	0:0	10	size
stmts	65:44	68:16	9	
water	65:44	0:0	10	{
call	66:20	66:140	10	av_log
arg	66:27	66:31	11	NULL
water	66:27	0:0	12	NULL
arg	66:33	66:44	11	AV_LOG_INFO
water	66:33	0:0	12	AV_LOG_INFO
arg	66:46	66:140	11	"Decoder consumed only part of a packet, it is allowed to do so -- need to update this test\n"
water	66:46	0:0	12	"Decoder consumed only part of a packet, it is allowed to do so -- need to update this test\n"
water	66:141	0:0	10	;
return	67:20	67:42	10	AVERROR_UNKNOWN
water	67:27	0:0	11	AVERROR_UNKNOWN
water	68:16	0:0	10	}
if	69:16	72:16	8	(in_frame -> nb_samples != out_frame -> nb_samples)
cond	69:20	69:55	9	in_frame -> nb_samples != out_frame -> nb_samples
water	69:20	0:0	10	in_frame
op	69:28	0:0	10	->
water	69:30	0:0	10	nb_samples
op	69:41	0:0	10	!=
water	69:44	0:0	10	out_frame
op	69:53	0:0	10	->
water	69:55	0:0	10	nb_samples
stmts	69:67	72:16	9	
water	69:67	0:0	10	{
call	70:20	70:121	10	av_log
arg	70:27	70:31	11	NULL
water	70:27	0:0	12	NULL
arg	70:33	70:45	11	AV_LOG_ERROR
water	70:33	0:0	12	AV_LOG_ERROR
arg	70:47	70:121	11	"Error frames before and after decoding has different number of samples\n"
water	70:47	0:0	12	"Error frames before and after decoding has different number of samples\n"
water	70:122	0:0	10	;
return	71:20	71:42	10	AVERROR_UNKNOWN
water	71:27	0:0	11	AVERROR_UNKNOWN
water	72:16	0:0	10	}
if	73:16	76:16	8	(in_frame -> channel_layout != out_frame -> channel_layout)
cond	73:20	73:59	9	in_frame -> channel_layout != out_frame -> channel_layout
water	73:20	0:0	10	in_frame
op	73:28	0:0	10	->
water	73:30	0:0	10	channel_layout
op	73:45	0:0	10	!=
water	73:48	0:0	10	out_frame
op	73:57	0:0	10	->
water	73:59	0:0	10	channel_layout
stmts	73:75	76:16	9	
water	73:75	0:0	10	{
call	74:20	74:118	10	av_log
arg	74:27	74:31	11	NULL
water	74:27	0:0	12	NULL
arg	74:33	74:45	11	AV_LOG_ERROR
water	74:33	0:0	12	AV_LOG_ERROR
arg	74:47	74:118	11	"Error frames before and after decoding has different channel layout\n"
water	74:47	0:0	12	"Error frames before and after decoding has different channel layout\n"
water	74:119	0:0	10	;
return	75:20	75:42	10	AVERROR_UNKNOWN
water	75:27	0:0	11	AVERROR_UNKNOWN
water	76:16	0:0	10	}
if	77:16	80:16	8	(in_frame -> format != out_frame -> format)
cond	77:20	77:51	9	in_frame -> format != out_frame -> format
water	77:20	0:0	10	in_frame
op	77:28	0:0	10	->
water	77:30	0:0	10	format
op	77:37	0:0	10	!=
water	77:40	0:0	10	out_frame
op	77:49	0:0	10	->
water	77:51	0:0	10	format
stmts	77:59	80:16	9	
water	77:59	0:0	10	{
call	78:20	78:117	10	av_log
arg	78:27	78:31	11	NULL
water	78:27	0:0	12	NULL
arg	78:33	78:45	11	AV_LOG_ERROR
water	78:33	0:0	12	AV_LOG_ERROR
arg	78:47	78:117	11	"Error frames before and after decoding has different sample format\n"
water	78:47	0:0	12	"Error frames before and after decoding has different sample format\n"
water	78:118	0:0	10	;
return	79:20	79:42	10	AVERROR_UNKNOWN
water	79:27	0:0	11	AVERROR_UNKNOWN
water	80:16	0:0	10	}
water	81:16	0:0	8	out_frame_bytes
op	81:32	0:0	8	=
water	81:34	0:0	8	out_frame
op	81:43	0:0	8	->
water	81:45	0:0	8	nb_samples
call	81:56	81:89	8	*av_frame_get_channels
arg	81:80	81:89	9	out_frame
water	81:80	0:0	10	out_frame
op	81:91	0:0	8	*
op	81:93	0:0	8	sizeof
water	81:99	0:0	8	(
water	81:100	0:0	8	uint16_t
water	81:108	0:0	8	)
water	81:109	0:0	8	;
if	82:16	85:16	8	(out_frame_bytes > out_frame -> linesize [ 0 ])
cond	82:20	82:59	9	out_frame_bytes > out_frame -> linesize [ 0 ]
water	82:20	0:0	10	out_frame_bytes
op	82:36	0:0	10	>
water	82:38	0:0	10	out_frame
op	82:47	0:0	10	->
water	82:49	0:0	10	linesize
op	82:57	0:0	10	[
water	82:58	0:0	10	0
op	82:59	0:0	10	]
stmts	82:62	85:16	9	
water	82:62	0:0	10	{
call	83:20	83:91	10	av_log
arg	83:27	83:31	11	NULL
water	83:27	0:0	12	NULL
arg	83:33	83:45	11	AV_LOG_ERROR
water	83:33	0:0	12	AV_LOG_ERROR
arg	83:47	83:91	11	"Incorrect value of output frame linesize\n"
water	83:47	0:0	12	"Incorrect value of output frame linesize\n"
water	83:92	0:0	10	;
return	84:20	84:28	10	1
water	84:27	0:0	11	1
water	85:16	0:0	10	}
call	86:16	86:80	8	memcpy
arg	86:23	86:43	9	raw_out+out_offset
water	86:23	0:0	10	raw_out
op	86:31	0:0	10	+
water	86:33	0:0	10	out_offset
arg	86:45	86:63	9	out_frame->data[0]
water	86:45	0:0	10	out_frame
op	86:54	0:0	10	->
water	86:56	0:0	10	data
op	86:60	0:0	10	[
water	86:61	0:0	10	0
op	86:62	0:0	10	]
arg	86:65	86:80	9	out_frame_bytes
water	86:65	0:0	10	out_frame_bytes
water	86:81	0:0	8	;
water	87:16	0:0	8	out_offset
op	87:27	0:0	8	+=
water	87:30	0:0	8	out_frame_bytes
water	87:45	0:0	8	;
water	88:12	0:0	8	}
water	89:8	0:0	6	}
call	90:8	90:31	4	av_free_packet
arg	90:23	90:31	5	&enc_pkt
op	90:23	0:0	6	&
water	90:24	0:0	6	enc_pkt
water	90:32	0:0	4	;
water	91:4	0:0	4	}
if	92:4	95:4	2	(memcmp (raw_in ,raw_out ,out_frame_bytes * NUMBER_OF_FRAMES ) != 0)
cond	92:8	92:71	3	memcmp (raw_in ,raw_out ,out_frame_bytes * NUMBER_OF_FRAMES ) != 0
call	92:8	92:66	4	memcmp
arg	92:15	92:21	5	raw_in
water	92:15	0:0	6	raw_in
arg	92:23	92:30	5	raw_out
water	92:23	0:0	6	raw_out
arg	92:32	92:66	5	out_frame_bytes*NUMBER_OF_FRAMES
water	92:32	0:0	6	out_frame_bytes
op	92:48	0:0	6	*
water	92:50	0:0	6	NUMBER_OF_FRAMES
op	92:68	0:0	4	!=
water	92:71	0:0	4	0
stmts	92:74	95:4	3	
water	92:74	0:0	4	{
call	93:8	93:53	4	av_log
arg	93:15	93:19	5	NULL
water	93:15	0:0	6	NULL
arg	93:21	93:33	5	AV_LOG_ERROR
water	93:21	0:0	6	AV_LOG_ERROR
arg	93:35	93:53	5	"Output differs\n"
water	93:35	0:0	6	"Output differs\n"
water	93:54	0:0	4	;
return	94:8	94:16	4	1
water	94:15	0:0	5	1
water	95:4	0:0	4	}
call	96:4	96:36	2	av_log
arg	96:11	96:15	3	NULL
water	96:11	0:0	4	NULL
arg	96:17	96:28	3	AV_LOG_INFO
water	96:17	0:0	4	AV_LOG_INFO
arg	96:30	96:36	3	"OK\n"
water	96:30	0:0	4	"OK\n"
water	96:37	0:0	2	;
call	97:4	97:20	2	av_freep
arg	97:13	97:20	3	&raw_in
op	97:13	0:0	4	&
water	97:14	0:0	4	raw_in
water	97:21	0:0	2	;
call	98:4	98:21	2	av_freep
arg	98:13	98:21	3	&raw_out
op	98:13	0:0	4	&
water	98:14	0:0	4	raw_out
water	98:22	0:0	2	;
call	99:4	99:27	2	av_frame_free
arg	99:18	99:27	3	&in_frame
op	99:18	0:0	4	&
water	99:19	0:0	4	in_frame
water	99:28	0:0	2	;
call	100:4	100:28	2	av_frame_free
arg	100:18	100:28	3	&out_frame
op	100:18	0:0	4	&
water	100:19	0:0	4	out_frame
water	100:29	0:0	2	;
return	101:4	101:12	2	0
water	101:11	0:0	3	0
