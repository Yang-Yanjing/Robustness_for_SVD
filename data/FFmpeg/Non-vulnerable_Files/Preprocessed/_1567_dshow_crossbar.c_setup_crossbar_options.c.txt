func	1:0	73:0	0	static HRESULT	setup_crossbar_options
params	2:22	0:0	1	
param	2:23	2:45	2	IAMCrossbar *	cross_bar
param	2:47	2:75	2	enum dshowDeviceType	devtype
param	2:77	2:99	2	AVFormatContext *	avctx
stmnts	0:0	72:15	1	
decl	4:4	4:44	2	struct dshow_ctx	*ctx
op	4:26	0:0	2	=
water	4:28	0:0	2	avctx
op	4:33	0:0	2	->
water	4:35	0:0	2	priv_data
decl	5:4	5:44	2	long	count_output_pins
water	5:26	0:0	2	,
decl	5:4	5:44	2	long	count_input_pins
decl	6:4	6:9	2	int	i
decl	7:4	7:66	2	int	log_level
op	7:18	0:0	2	=
water	7:20	0:0	2	ctx
op	7:23	0:0	2	->
water	7:25	0:0	2	list_options
water	7:38	0:0	2	?
water	7:40	0:0	2	AV_LOG_INFO
water	7:52	0:0	2	:
water	7:54	0:0	2	AV_LOG_DEBUG
decl	8:4	8:62	2	int	video_input_pin
op	8:24	0:0	2	=
water	8:26	0:0	2	ctx
op	8:29	0:0	2	->
water	8:31	0:0	2	crossbar_video_input_pin_number
decl	9:4	9:62	2	int	audio_input_pin
op	9:24	0:0	2	=
water	9:26	0:0	2	ctx
op	9:29	0:0	2	->
water	9:31	0:0	2	crossbar_audio_input_pin_number
decl	10:4	10:55	2	const char	*device_name
op	10:28	0:0	2	=
water	10:30	0:0	2	ctx
op	10:33	0:0	2	->
water	10:35	0:0	2	device_name
op	10:46	0:0	2	[
water	10:47	0:0	2	devtype
op	10:54	0:0	2	]
decl	11:4	11:14	2	HRESULT	hr
call	12:4	12:84	2	av_log
arg	12:11	12:16	3	avctx
water	12:11	0:0	4	avctx
arg	12:18	12:27	3	log_level
water	12:18	0:0	4	log_level
arg	12:29	12:71	3	"Crossbar Switching Information for %s:\n"
water	12:29	0:0	4	"Crossbar Switching Information for %s:\n"
arg	12:73	12:84	3	device_name
water	12:73	0:0	4	device_name
water	12:85	0:0	2	;
water	13:4	0:0	2	hr
op	13:7	0:0	2	=
call	13:9	13:83	2	IAMCrossbar_get_PinCounts
arg	13:35	13:44	3	cross_bar
water	13:35	0:0	4	cross_bar
arg	13:46	13:64	3	&count_output_pins
op	13:46	0:0	4	&
water	13:47	0:0	4	count_output_pins
arg	13:66	13:83	3	&count_input_pins
op	13:66	0:0	4	&
water	13:67	0:0	4	count_input_pins
water	13:84	0:0	2	;
if	14:4	17:4	2	(hr != S_OK)
cond	14:8	14:14	3	hr != S_OK
water	14:8	0:0	4	hr
op	14:11	0:0	4	!=
water	14:14	0:0	4	S_OK
stmts	14:20	17:4	3	
water	14:20	0:0	4	{
call	15:8	15:73	4	av_log
arg	15:15	15:20	5	avctx
water	15:15	0:0	6	avctx
arg	15:22	15:34	5	AV_LOG_ERROR
water	15:22	0:0	6	AV_LOG_ERROR
arg	15:36	15:73	5	"Unable to get crossbar pin counts\n"
water	15:36	0:0	6	"Unable to get crossbar pin counts\n"
water	15:74	0:0	4	;
return	16:8	16:17	4	hr
water	16:15	0:0	5	hr
water	17:4	0:0	4	}
for	18:4	60:4	2	(i = 0 ;i < count_output_pins;i ++)
forinit	18:9	18:14	3	i = 0 ;
water	18:9	0:0	4	i
op	18:11	0:0	4	=
water	18:13	0:0	4	0
water	18:14	0:0	4	;
cond	18:16	18:20	3	i < count_output_pins
water	18:16	0:0	4	i
op	18:18	0:0	4	<
water	18:20	0:0	4	count_output_pins
forexpr	18:39	18:40	3	i ++
water	18:39	0:0	4	i
op	18:40	0:0	4	++
stmts	19:4	60:4	3	
water	19:4	0:0	4	{
decl	20:8	20:13	4	int	j
decl	21:8	21:48	4	long	related_pin
water	21:24	0:0	4	,
decl	21:8	21:48	4	long	pin_type
water	21:34	0:0	4	,
decl	21:8	21:48	4	long	route_to_pin
water	22:8	0:0	4	hr
op	22:11	0:0	4	=
call	22:13	22:89	4	IAMCrossbar_get_CrossbarPinInfo
arg	22:45	22:54	5	cross_bar
water	22:45	0:0	6	cross_bar
arg	22:56	22:61	5	FALSE
water	22:56	0:0	6	FALSE
arg	22:63	22:64	5	i
water	22:63	0:0	6	i
arg	22:66	22:78	5	&related_pin
op	22:66	0:0	6	&
water	22:67	0:0	6	related_pin
arg	22:80	22:89	5	&pin_type
op	22:80	0:0	6	&
water	22:81	0:0	6	pin_type
water	22:90	0:0	4	;
if	23:8	33:8	4	(pin_type == PhysConn_Video_VideoDecoder)
cond	23:12	23:24	5	pin_type == PhysConn_Video_VideoDecoder
water	23:12	0:0	6	pin_type
op	23:21	0:0	6	==
water	23:24	0:0	6	PhysConn_Video_VideoDecoder
stmts	23:53	33:8	5	
water	23:53	0:0	6	{
if	25:12	32:12	6	(video_input_pin != - 1)
cond	25:16	25:36	7	video_input_pin != - 1
water	25:16	0:0	8	video_input_pin
op	25:32	0:0	8	!=
op	25:35	0:0	8	-
water	25:36	0:0	8	1
stmts	25:39	32:12	7	
water	25:39	0:0	8	{
call	26:16	26:93	8	av_log
arg	26:23	26:28	9	avctx
water	26:23	0:0	10	avctx
arg	26:30	26:39	9	log_level
water	26:30	0:0	10	log_level
arg	26:41	26:76	9	"Routing video input from pin %d\n"
water	26:41	0:0	10	"Routing video input from pin %d\n"
arg	26:78	26:93	9	video_input_pin
water	26:78	0:0	10	video_input_pin
water	26:94	0:0	8	;
water	27:16	0:0	8	hr
op	27:19	0:0	8	=
call	27:21	27:68	8	IAMCrossbar_Route
arg	27:39	27:48	9	cross_bar
water	27:39	0:0	10	cross_bar
arg	27:50	27:51	9	i
water	27:50	0:0	10	i
arg	27:53	27:68	9	video_input_pin
water	27:53	0:0	10	video_input_pin
water	27:69	0:0	8	;
if	28:16	31:16	8	(hr != S_OK)
cond	28:20	28:26	9	hr != S_OK
water	28:20	0:0	10	hr
op	28:23	0:0	10	!=
water	28:26	0:0	10	S_OK
stmts	28:32	31:16	9	
water	28:32	0:0	10	{
call	29:20	29:108	10	av_log
arg	29:27	29:32	11	avctx
water	29:27	0:0	12	avctx
arg	29:34	29:46	11	AV_LOG_ERROR
water	29:34	0:0	12	AV_LOG_ERROR
arg	29:48	29:91	11	"Unable to route video input from pin %d\n"
water	29:48	0:0	12	"Unable to route video input from pin %d\n"
arg	29:93	29:108	11	video_input_pin
water	29:93	0:0	12	video_input_pin
water	29:109	0:0	10	;
return	30:20	30:39	10	AVERROR(EIO)
call	30:27	30:38	11	AVERROR
arg	30:35	30:38	12	EIO
water	30:35	0:0	13	EIO
water	31:16	0:0	10	}
water	32:12	0:0	8	}
water	33:8	0:0	6	}
else	33:10	42:8	4
stmts	33:15	42:8	5	
if	33:15	42:8	6	(pin_type == PhysConn_Audio_AudioDecoder)
cond	33:19	33:31	7	pin_type == PhysConn_Audio_AudioDecoder
water	33:19	0:0	8	pin_type
op	33:28	0:0	8	==
water	33:31	0:0	8	PhysConn_Audio_AudioDecoder
stmts	33:60	42:8	7	
water	33:60	0:0	8	{
if	34:12	41:12	8	(audio_input_pin != - 1)
cond	34:16	34:36	9	audio_input_pin != - 1
water	34:16	0:0	10	audio_input_pin
op	34:32	0:0	10	!=
op	34:35	0:0	10	-
water	34:36	0:0	10	1
stmts	34:39	41:12	9	
water	34:39	0:0	10	{
call	35:16	35:93	10	av_log
arg	35:23	35:28	11	avctx
water	35:23	0:0	12	avctx
arg	35:30	35:39	11	log_level
water	35:30	0:0	12	log_level
arg	35:41	35:76	11	"Routing audio input from pin %d\n"
water	35:41	0:0	12	"Routing audio input from pin %d\n"
arg	35:78	35:93	11	audio_input_pin
water	35:78	0:0	12	audio_input_pin
water	35:94	0:0	10	;
water	36:16	0:0	10	hr
op	36:19	0:0	10	=
call	36:21	36:68	10	IAMCrossbar_Route
arg	36:39	36:48	11	cross_bar
water	36:39	0:0	12	cross_bar
arg	36:50	36:51	11	i
water	36:50	0:0	12	i
arg	36:53	36:68	11	audio_input_pin
water	36:53	0:0	12	audio_input_pin
water	36:69	0:0	10	;
if	37:16	40:16	10	(hr != S_OK)
cond	37:20	37:26	11	hr != S_OK
water	37:20	0:0	12	hr
op	37:23	0:0	12	!=
water	37:26	0:0	12	S_OK
stmts	37:32	40:16	11	
water	37:32	0:0	12	{
call	38:20	38:108	12	av_log
arg	38:27	38:32	13	avctx
water	38:27	0:0	14	avctx
arg	38:34	38:46	13	AV_LOG_ERROR
water	38:34	0:0	14	AV_LOG_ERROR
arg	38:48	38:91	13	"Unable to route audio input from pin %d\n"
water	38:48	0:0	14	"Unable to route audio input from pin %d\n"
arg	38:93	38:108	13	audio_input_pin
water	38:93	0:0	14	audio_input_pin
water	38:109	0:0	12	;
return	39:20	39:29	12	hr
water	39:27	0:0	13	hr
water	40:16	0:0	12	}
water	41:12	0:0	10	}
water	42:8	0:0	8	}
else	42:10	44:8	4
stmts	42:15	44:8	5	
water	42:15	0:0	6	{
call	43:12	43:153	6	av_log
arg	43:19	43:24	7	avctx
water	43:19	0:0	8	avctx
arg	43:26	43:40	7	AV_LOG_WARNING
water	43:26	0:0	8	AV_LOG_WARNING
arg	43:42	43:123	7	"Unexpected output pin type, please report the type if you want to use this (%s)"
water	43:42	0:0	8	"Unexpected output pin type, please report the type if you want to use this (%s)"
arg	43:125	43:153	7	GetPhysicalPinName(pin_type)
call	43:125	43:152	8	GetPhysicalPinName
arg	43:144	43:152	9	pin_type
water	43:144	0:0	10	pin_type
water	43:154	0:0	6	;
water	44:8	0:0	6	}
water	45:8	0:0	4	hr
op	45:11	0:0	4	=
call	45:13	45:67	4	IAMCrossbar_get_IsRoutedTo
arg	45:40	45:49	5	cross_bar
water	45:40	0:0	6	cross_bar
arg	45:51	45:52	5	i
water	45:51	0:0	6	i
arg	45:54	45:67	5	&route_to_pin
op	45:54	0:0	6	&
water	45:55	0:0	6	route_to_pin
water	45:68	0:0	4	;
if	46:8	49:8	4	(hr != S_OK)
cond	46:12	46:18	5	hr != S_OK
water	46:12	0:0	6	hr
op	46:15	0:0	6	!=
water	46:18	0:0	6	S_OK
stmts	46:24	49:8	5	
water	46:24	0:0	6	{
call	47:12	47:94	6	av_log
arg	47:19	47:24	7	avctx
water	47:19	0:0	8	avctx
arg	47:26	47:38	7	AV_LOG_ERROR
water	47:26	0:0	8	AV_LOG_ERROR
arg	47:40	47:91	7	"Unable to get crossbar is routed to from pin %d\n"
water	47:40	0:0	8	"Unable to get crossbar is routed to from pin %d\n"
arg	47:93	47:94	7	i
water	47:93	0:0	8	i
water	47:95	0:0	6	;
return	48:12	48:21	6	hr
water	48:19	0:0	7	hr
water	49:8	0:0	6	}
call	50:8	50:138	4	av_log
arg	50:15	50:20	5	avctx
water	50:15	0:0	6	avctx
arg	50:22	50:31	5	log_level
water	50:22	0:0	6	log_level
arg	50:33	50:92	5	"  Crossbar Output pin %d: \"%s\" related output pin: %ld "
water	50:33	0:0	6	"  Crossbar Output pin %d: \"%s\" related output pin: %ld "
arg	50:94	50:95	5	i
water	50:94	0:0	6	i
arg	50:97	50:125	5	GetPhysicalPinName(pin_type)
call	50:97	50:124	6	GetPhysicalPinName
arg	50:116	50:124	7	pin_type
water	50:116	0:0	8	pin_type
arg	50:127	50:138	5	related_pin
water	50:127	0:0	6	related_pin
water	50:139	0:0	4	;
call	51:8	51:72	4	av_log
arg	51:15	51:20	5	avctx
water	51:15	0:0	6	avctx
arg	51:22	51:31	5	log_level
water	51:22	0:0	6	log_level
arg	51:33	51:58	5	"current input pin: %ld "
water	51:33	0:0	6	"current input pin: %ld "
arg	51:60	51:72	5	route_to_pin
water	51:60	0:0	6	route_to_pin
water	51:73	0:0	4	;
call	52:8	52:58	4	av_log
arg	52:15	52:20	5	avctx
water	52:15	0:0	6	avctx
arg	52:22	52:31	5	log_level
water	52:22	0:0	6	log_level
arg	52:33	52:58	5	"compatible input pins: "
water	52:33	0:0	6	"compatible input pins: "
water	52:59	0:0	4	;
for	53:8	58:8	4	(j = 0 ;j < count_input_pins;j ++)
forinit	53:13	53:18	5	j = 0 ;
water	53:13	0:0	6	j
op	53:15	0:0	6	=
water	53:17	0:0	6	0
water	53:18	0:0	6	;
cond	53:20	53:24	5	j < count_input_pins
water	53:20	0:0	6	j
op	53:22	0:0	6	<
water	53:24	0:0	6	count_input_pins
forexpr	53:42	53:43	5	j ++
water	53:42	0:0	6	j
op	53:43	0:0	6	++
stmts	54:8	58:8	5	
water	54:8	0:0	6	{
water	55:12	0:0	6	hr
op	55:15	0:0	6	=
call	55:17	55:53	6	IAMCrossbar_CanRoute
arg	55:38	55:47	7	cross_bar
water	55:38	0:0	8	cross_bar
arg	55:49	55:50	7	i
water	55:49	0:0	8	i
arg	55:52	55:53	7	j
water	55:52	0:0	8	j
water	55:54	0:0	6	;
if	56:12	57:50	6	(hr == S_OK)
cond	56:16	56:22	7	hr == S_OK
water	56:16	0:0	8	hr
op	56:19	0:0	8	==
water	56:22	0:0	8	S_OK
stmts	57:16	57:50	7	
call	57:16	57:49	8	av_log
arg	57:23	57:28	9	avctx
water	57:23	0:0	10	avctx
arg	57:30	57:40	9	log_level
water	57:30	0:0	10	log_level
arg	57:41	57:46	9	"%d "
water	57:41	0:0	10	"%d "
arg	57:48	57:49	9	j
water	57:48	0:0	10	j
water	57:50	0:0	8	;
water	58:8	0:0	6	}
call	59:8	59:37	4	av_log
arg	59:15	59:20	5	avctx
water	59:15	0:0	6	avctx
arg	59:22	59:31	5	log_level
water	59:22	0:0	6	log_level
arg	59:33	59:37	5	"\n"
water	59:33	0:0	6	"\n"
water	59:38	0:0	4	;
water	60:4	0:0	4	}
for	61:4	71:4	2	(i = 0 ;i < count_input_pins;i ++)
forinit	61:9	61:14	3	i = 0 ;
water	61:9	0:0	4	i
op	61:11	0:0	4	=
water	61:13	0:0	4	0
water	61:14	0:0	4	;
cond	61:16	61:20	3	i < count_input_pins
water	61:16	0:0	4	i
op	61:18	0:0	4	<
water	61:20	0:0	4	count_input_pins
forexpr	61:38	61:39	3	i ++
water	61:38	0:0	4	i
op	61:39	0:0	4	++
stmts	62:4	71:4	3	
water	62:4	0:0	4	{
decl	63:8	63:34	4	long	related_pin
water	63:24	0:0	4	,
decl	63:8	63:34	4	long	pin_type
water	64:8	0:0	4	hr
op	64:11	0:0	4	=
call	64:13	64:88	4	IAMCrossbar_get_CrossbarPinInfo
arg	64:45	64:54	5	cross_bar
water	64:45	0:0	6	cross_bar
arg	64:56	64:60	5	TRUE
water	64:56	0:0	6	TRUE
arg	64:62	64:63	5	i
water	64:62	0:0	6	i
arg	64:65	64:77	5	&related_pin
op	64:65	0:0	6	&
water	64:66	0:0	6	related_pin
arg	64:79	64:88	5	&pin_type
op	64:79	0:0	6	&
water	64:80	0:0	6	pin_type
water	64:89	0:0	4	;
if	65:8	68:8	4	(hr != S_OK)
cond	65:12	65:18	5	hr != S_OK
water	65:12	0:0	6	hr
op	65:15	0:0	6	!=
water	65:18	0:0	6	S_OK
stmts	65:24	68:8	5	
water	65:24	0:0	6	{
call	66:12	66:98	6	av_log
arg	66:19	66:24	7	avctx
water	66:19	0:0	8	avctx
arg	66:26	66:38	7	AV_LOG_ERROR
water	66:26	0:0	8	AV_LOG_ERROR
arg	66:40	66:95	7	"unable to get crossbar info audio input from pin %d\n"
water	66:40	0:0	8	"unable to get crossbar info audio input from pin %d\n"
arg	66:97	66:98	7	i
water	66:97	0:0	8	i
water	66:99	0:0	6	;
return	67:12	67:21	6	hr
water	67:19	0:0	7	hr
water	68:8	0:0	6	}
call	69:8	69:101	4	av_log
arg	69:15	69:20	5	avctx
water	69:15	0:0	6	avctx
arg	69:22	69:31	5	log_level
water	69:22	0:0	6	log_level
arg	69:33	69:68	5	"  Crossbar Input pin %d - \"%s\" "
water	69:33	0:0	6	"  Crossbar Input pin %d - \"%s\" "
arg	69:70	69:71	5	i
water	69:70	0:0	6	i
arg	69:73	69:101	5	GetPhysicalPinName(pin_type)
call	69:73	69:100	6	GetPhysicalPinName
arg	69:92	69:100	7	pin_type
water	69:92	0:0	8	pin_type
water	69:102	0:0	4	;
call	70:8	70:72	4	av_log
arg	70:15	70:20	5	avctx
water	70:15	0:0	6	avctx
arg	70:22	70:31	5	log_level
water	70:22	0:0	6	log_level
arg	70:33	70:59	5	"related input pin: %ld\n"
water	70:33	0:0	6	"related input pin: %ld\n"
arg	70:61	70:72	5	related_pin
water	70:61	0:0	6	related_pin
water	70:73	0:0	4	;
water	71:4	0:0	4	}
return	72:4	72:15	2	S_OK
water	72:11	0:0	3	S_OK
