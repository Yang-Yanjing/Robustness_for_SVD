func	1:0	36:0	0	static void	filter
params	1:18	0:0	1	
param	1:19	1:38	2	OWDenoiseContext *	s
param	2:19	2:37	2	uint8_t *	dst
param	2:39	2:55	2	int	dst_linesize
param	3:19	3:37	2	const uint8_t *	src
param	3:39	3:55	2	int	src_linesize
param	4:19	4:28	2	int	width
param	4:30	4:40	2	int	height
param	4:42	4:57	2	double	strength
stmnts	0:0	35:4	1	
decl	6:4	6:36	2	int	x
water	6:9	0:0	2	,
decl	6:4	6:36	2	int	y
water	6:12	0:0	2	,
decl	6:4	6:36	2	int	i
water	6:15	0:0	2	,
decl	6:4	6:36	2	int	j
water	6:18	0:0	2	,
decl	6:4	6:36	2	int	depth
op	6:26	0:0	2	=
water	6:28	0:0	2	s
op	6:29	0:0	2	->
water	6:31	0:0	2	depth
while	7:4	8:15	2	(1 << depth > width || 1 << depth > height)
cond	7:11	7:42	3	1 << depth > width || 1 << depth > height
water	7:11	0:0	4	1
op	7:12	0:0	4	<<
water	7:14	0:0	4	depth
op	7:20	0:0	4	>
water	7:22	0:0	4	width
op	7:28	0:0	4	||
water	7:31	0:0	4	1
op	7:32	0:0	4	<<
water	7:34	0:0	4	depth
op	7:40	0:0	4	>
water	7:42	0:0	4	height
stmts	8:8	8:15	3	
water	8:8	0:0	4	depth
op	8:13	0:0	4	--
water	8:15	0:0	4	;
for	9:4	11:71	2	(y = 0 ;y < height;y ++)
forinit	9:9	9:14	3	y = 0 ;
water	9:9	0:0	4	y
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:20	3	y < height
water	9:16	0:0	4	y
op	9:18	0:0	4	<
water	9:20	0:0	4	height
forexpr	9:28	9:29	3	y ++
water	9:28	0:0	4	y
op	9:29	0:0	4	++
stmts	10:8	11:71	3	
for	10:8	11:71	4	(x = 0 ;x < width;x ++)
forinit	10:12	10:17	5	x = 0 ;
water	10:12	0:0	6	x
op	10:14	0:0	6	=
water	10:16	0:0	6	0
water	10:17	0:0	6	;
cond	10:19	10:23	5	x < width
water	10:19	0:0	6	x
op	10:21	0:0	6	<
water	10:23	0:0	6	width
forexpr	10:30	10:31	5	x ++
water	10:30	0:0	6	x
op	10:31	0:0	6	++
stmts	11:12	11:71	5	
water	11:12	0:0	6	s
op	11:13	0:0	6	->
water	11:15	0:0	6	plane
op	11:20	0:0	6	[
water	11:21	0:0	6	0
op	11:22	0:0	6	]
op	11:23	0:0	6	[
water	11:24	0:0	6	0
op	11:25	0:0	6	]
op	11:26	0:0	6	[
water	11:27	0:0	6	y
op	11:28	0:0	6	*
water	11:29	0:0	6	s
op	11:30	0:0	6	->
water	11:32	0:0	6	linesize
op	11:41	0:0	6	+
water	11:43	0:0	6	x
op	11:44	0:0	6	]
op	11:46	0:0	6	=
water	11:48	0:0	6	src
op	11:51	0:0	6	[
water	11:52	0:0	6	y
op	11:53	0:0	6	*
water	11:54	0:0	6	src_linesize
op	11:67	0:0	6	+
water	11:69	0:0	6	x
op	11:70	0:0	6	]
water	11:71	0:0	6	;
for	12:4	13:104	2	(i = 0 ;i < depth;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:20	3	i < depth
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	depth
forexpr	12:27	12:28	3	i ++
water	12:27	0:0	4	i
op	12:28	0:0	4	++
stmts	13:8	13:104	3	
call	13:8	13:103	4	decompose2D2
arg	13:21	13:36	5	s->plane[i+1]
water	13:21	0:0	6	s
op	13:22	0:0	6	->
water	13:24	0:0	6	plane
op	13:29	0:0	6	[
water	13:30	0:0	6	i
op	13:32	0:0	6	+
water	13:34	0:0	6	1
op	13:35	0:0	6	]
arg	13:38	13:52	5	s->plane[i][0]
water	13:38	0:0	6	s
op	13:39	0:0	6	->
water	13:41	0:0	6	plane
op	13:46	0:0	6	[
water	13:47	0:0	6	i
op	13:48	0:0	6	]
op	13:49	0:0	6	[
water	13:50	0:0	6	0
op	13:51	0:0	6	]
arg	13:54	13:69	5	s->plane[0]+1
water	13:54	0:0	6	s
op	13:55	0:0	6	->
water	13:57	0:0	6	plane
op	13:62	0:0	6	[
water	13:63	0:0	6	0
op	13:64	0:0	6	]
op	13:66	0:0	6	+
water	13:68	0:0	6	1
arg	13:71	13:82	5	s->linesize
water	13:71	0:0	6	s
op	13:72	0:0	6	->
water	13:74	0:0	6	linesize
arg	13:84	13:88	5	1<<i
water	13:84	0:0	6	1
op	13:85	0:0	6	<<
water	13:87	0:0	6	i
arg	13:90	13:95	5	width
water	13:90	0:0	6	width
arg	13:97	13:103	5	height
water	13:97	0:0	6	height
water	13:104	0:0	4	;
for	14:4	26:4	2	(i = 0 ;i < depth;i ++)
forinit	14:9	14:14	3	i = 0 ;
water	14:9	0:0	4	i
op	14:11	0:0	4	=
water	14:13	0:0	4	0
water	14:14	0:0	4	;
cond	14:16	14:20	3	i < depth
water	14:16	0:0	4	i
op	14:18	0:0	4	<
water	14:20	0:0	4	depth
forexpr	14:27	14:28	3	i ++
water	14:27	0:0	4	i
op	14:28	0:0	4	++
stmts	14:32	26:4	3	
water	14:32	0:0	4	{
for	15:8	25:8	4	(j = 1 ;j < 4;j ++)
forinit	15:13	15:18	5	j = 1 ;
water	15:13	0:0	6	j
op	15:15	0:0	6	=
water	15:17	0:0	6	1
water	15:18	0:0	6	;
cond	15:20	15:24	5	j < 4
water	15:20	0:0	6	j
op	15:22	0:0	6	<
water	15:24	0:0	6	4
forexpr	15:27	15:28	5	j ++
water	15:27	0:0	6	j
op	15:28	0:0	6	++
stmts	15:32	25:8	5	
water	15:32	0:0	6	{
for	16:12	24:12	6	(y = 0 ;y < height;y ++)
forinit	16:17	16:22	7	y = 0 ;
water	16:17	0:0	8	y
op	16:19	0:0	8	=
water	16:21	0:0	8	0
water	16:22	0:0	8	;
cond	16:24	16:28	7	y < height
water	16:24	0:0	8	y
op	16:26	0:0	8	<
water	16:28	0:0	8	height
forexpr	16:36	16:37	7	y ++
water	16:36	0:0	8	y
op	16:37	0:0	8	++
stmts	16:41	24:12	7	
water	16:41	0:0	8	{
for	17:16	23:16	8	(x = 0 ;x < width;x ++)
forinit	17:21	17:26	9	x = 0 ;
water	17:21	0:0	10	x
op	17:23	0:0	10	=
water	17:25	0:0	10	0
water	17:26	0:0	10	;
cond	17:28	17:32	9	x < width
water	17:28	0:0	10	x
op	17:30	0:0	10	<
water	17:32	0:0	10	width
forexpr	17:39	17:40	9	x ++
water	17:39	0:0	10	x
op	17:40	0:0	10	++
stmts	17:44	23:16	9	
water	17:44	0:0	10	{
decl	18:20	18:68	10	double	v
op	18:29	0:0	10	=
water	18:31	0:0	10	s
op	18:32	0:0	10	->
water	18:34	0:0	10	plane
op	18:39	0:0	10	[
water	18:40	0:0	10	i
op	18:42	0:0	10	+
water	18:44	0:0	10	1
op	18:45	0:0	10	]
op	18:46	0:0	10	[
water	18:47	0:0	10	j
op	18:48	0:0	10	]
op	18:49	0:0	10	[
water	18:50	0:0	10	y
op	18:51	0:0	10	*
water	18:52	0:0	10	s
op	18:53	0:0	10	->
water	18:55	0:0	10	linesize
op	18:64	0:0	10	+
water	18:66	0:0	10	x
op	18:67	0:0	10	]
if	19:20	19:57	10	(v > strength)
cond	19:29	19:34	11	v > strength
water	19:29	0:0	12	v
op	19:31	0:0	12	>
water	19:34	0:0	12	strength
stmts	19:44	19:57	11	
water	19:44	0:0	12	v
op	19:46	0:0	12	-=
water	19:49	0:0	12	strength
water	19:57	0:0	12	;
else	20:20	20:57	10
stmts	20:25	20:57	11	
if	20:25	20:57	12	(v < - strength)
cond	20:29	20:34	13	v < - strength
water	20:29	0:0	14	v
op	20:31	0:0	14	<
op	20:33	0:0	14	-
water	20:34	0:0	14	strength
stmts	20:44	20:57	13	
water	20:44	0:0	14	v
op	20:46	0:0	14	+=
water	20:49	0:0	14	strength
water	20:57	0:0	14	;
else	21:20	21:50	10
stmts	21:44	21:50	11	
water	21:44	0:0	12	v
op	21:47	0:0	12	=
water	21:49	0:0	12	0
water	21:50	0:0	12	;
water	22:20	0:0	10	s
op	22:21	0:0	10	->
water	22:23	0:0	10	plane
op	22:28	0:0	10	[
water	22:29	0:0	10	i
op	22:31	0:0	10	+
water	22:33	0:0	10	1
op	22:34	0:0	10	]
op	22:35	0:0	10	[
water	22:36	0:0	10	j
op	22:37	0:0	10	]
op	22:38	0:0	10	[
water	22:39	0:0	10	x
op	22:41	0:0	10	+
water	22:43	0:0	10	y
op	22:44	0:0	10	*
water	22:45	0:0	10	s
op	22:46	0:0	10	->
water	22:48	0:0	10	linesize
op	22:56	0:0	10	]
op	22:58	0:0	10	=
water	22:60	0:0	10	v
water	22:61	0:0	10	;
water	23:16	0:0	10	}
water	24:12	0:0	8	}
water	25:8	0:0	6	}
water	26:4	0:0	4	}
for	27:4	28:102	2	(i = depth - 1 ;i >= 0;i --)
forinit	27:9	27:20	3	i = depth - 1 ;
water	27:9	0:0	4	i
op	27:11	0:0	4	=
water	27:13	0:0	4	depth
op	27:18	0:0	4	-
water	27:19	0:0	4	1
water	27:20	0:0	4	;
cond	27:22	27:27	3	i >= 0
water	27:22	0:0	4	i
op	27:24	0:0	4	>=
water	27:27	0:0	4	0
forexpr	27:30	27:31	3	i --
water	27:30	0:0	4	i
op	27:31	0:0	4	--
stmts	28:8	28:102	3	
call	28:8	28:101	4	compose2D2
arg	28:19	28:33	5	s->plane[i][0]
water	28:19	0:0	6	s
op	28:20	0:0	6	->
water	28:22	0:0	6	plane
op	28:27	0:0	6	[
water	28:28	0:0	6	i
op	28:29	0:0	6	]
op	28:30	0:0	6	[
water	28:31	0:0	6	0
op	28:32	0:0	6	]
arg	28:35	28:50	5	s->plane[i+1]
water	28:35	0:0	6	s
op	28:36	0:0	6	->
water	28:38	0:0	6	plane
op	28:43	0:0	6	[
water	28:44	0:0	6	i
op	28:46	0:0	6	+
water	28:48	0:0	6	1
op	28:49	0:0	6	]
arg	28:52	28:67	5	s->plane[0]+1
water	28:52	0:0	6	s
op	28:53	0:0	6	->
water	28:55	0:0	6	plane
op	28:60	0:0	6	[
water	28:61	0:0	6	0
op	28:62	0:0	6	]
op	28:64	0:0	6	+
water	28:66	0:0	6	1
arg	28:69	28:80	5	s->linesize
water	28:69	0:0	6	s
op	28:70	0:0	6	->
water	28:72	0:0	6	linesize
arg	28:82	28:86	5	1<<i
water	28:82	0:0	6	1
op	28:83	0:0	6	<<
water	28:85	0:0	6	i
arg	28:88	28:93	5	width
water	28:88	0:0	6	width
arg	28:95	28:101	5	height
water	28:95	0:0	6	height
water	28:102	0:0	4	;
for	29:4	35:4	2	(y = 0 ;y < height;y ++)
forinit	29:9	29:14	3	y = 0 ;
water	29:9	0:0	4	y
op	29:11	0:0	4	=
water	29:13	0:0	4	0
water	29:14	0:0	4	;
cond	29:16	29:20	3	y < height
water	29:16	0:0	4	y
op	29:18	0:0	4	<
water	29:20	0:0	4	height
forexpr	29:28	29:29	3	y ++
water	29:28	0:0	4	y
op	29:29	0:0	4	++
stmts	29:33	35:4	3	
water	29:33	0:0	4	{
for	30:8	34:8	4	(x = 0 ;x < width;x ++)
forinit	30:13	30:18	5	x = 0 ;
water	30:13	0:0	6	x
op	30:15	0:0	6	=
water	30:17	0:0	6	0
water	30:18	0:0	6	;
cond	30:20	30:24	5	x < width
water	30:20	0:0	6	x
op	30:22	0:0	6	<
water	30:24	0:0	6	width
forexpr	30:31	30:32	5	x ++
water	30:31	0:0	6	x
op	30:32	0:0	6	++
stmts	30:36	34:8	5	
water	30:36	0:0	6	{
water	31:12	0:0	6	i
op	31:14	0:0	6	=
water	31:16	0:0	6	s
op	31:17	0:0	6	->
water	31:19	0:0	6	plane
op	31:24	0:0	6	[
water	31:25	0:0	6	0
op	31:26	0:0	6	]
op	31:27	0:0	6	[
water	31:28	0:0	6	0
op	31:29	0:0	6	]
op	31:30	0:0	6	[
water	31:31	0:0	6	y
op	31:32	0:0	6	*
water	31:33	0:0	6	s
op	31:34	0:0	6	->
water	31:36	0:0	6	linesize
op	31:45	0:0	6	+
water	31:47	0:0	6	x
op	31:48	0:0	6	]
op	31:50	0:0	6	+
water	31:52	0:0	6	dither
op	31:58	0:0	6	[
water	31:59	0:0	6	x
op	31:60	0:0	6	&
water	31:61	0:0	6	7
op	31:62	0:0	6	]
op	31:63	0:0	6	[
water	31:64	0:0	6	y
op	31:65	0:0	6	&
water	31:66	0:0	6	7
op	31:67	0:0	6	]
op	31:68	0:0	6	*
water	31:69	0:0	6	(
water	31:70	0:0	6	1
op	31:71	0:0	6	.
water	31:72	0:0	6	0
op	31:73	0:0	6	/
water	31:74	0:0	6	64
water	31:76	0:0	6	)
op	31:78	0:0	6	+
water	31:80	0:0	6	1
op	31:81	0:0	6	.
water	31:82	0:0	6	0
op	31:83	0:0	6	/
water	31:84	0:0	6	128
water	31:87	0:0	6	;
if	32:12	32:50	6	(( unsigned ) i > 255 U)
cond	32:16	32:33	7	( unsigned ) i > 255 U
water	32:16	0:0	8	(
water	32:17	0:0	8	unsigned
water	32:25	0:0	8	)
water	32:26	0:0	8	i
op	32:28	0:0	8	>
water	32:30	0:0	8	255
water	32:33	0:0	8	U
stmts	32:36	32:50	7	
water	32:36	0:0	8	i
op	32:38	0:0	8	=
op	32:40	0:0	8	~
water	32:41	0:0	8	(
water	32:42	0:0	8	i
op	32:44	0:0	8	>>
water	32:47	0:0	8	31
water	32:49	0:0	8	)
water	32:50	0:0	8	;
water	33:12	0:0	6	dst
op	33:15	0:0	6	[
water	33:16	0:0	6	y
op	33:17	0:0	6	*
water	33:18	0:0	6	dst_linesize
op	33:31	0:0	6	+
water	33:33	0:0	6	x
op	33:34	0:0	6	]
op	33:36	0:0	6	=
water	33:38	0:0	6	i
water	33:39	0:0	6	;
water	34:8	0:0	6	}
water	35:4	0:0	4	}
