func	1:0	122:0	0	static void	write_packet
params	1:24	0:0	1	
param	1:25	1:39	2	OutputFile *	of
param	1:41	1:54	2	AVPacket *	pkt
param	1:56	1:73	2	OutputStream *	ost
param	1:75	1:86	2	int	unqueue
stmnts	0:0	121:24	1	
decl	3:4	3:32	2	AVFormatContext	*s
op	3:23	0:0	2	=
water	3:25	0:0	2	of
op	3:27	0:0	2	->
water	3:29	0:0	2	ctx
decl	4:4	4:26	2	AVStream	*st
op	4:17	0:0	2	=
water	4:19	0:0	2	ost
op	4:22	0:0	2	->
water	4:24	0:0	2	st
decl	5:4	5:11	2	int	ret
if	14:4	20:4	2	(! ( st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO && ost -> encoding_needed ) && ! unqueue)
cond	14:8	14:86	3	! ( st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO && ost -> encoding_needed ) && ! unqueue
op	14:8	0:0	4	!
water	14:9	0:0	4	(
water	14:10	0:0	4	st
op	14:12	0:0	4	->
water	14:14	0:0	4	codecpar
op	14:22	0:0	4	->
water	14:24	0:0	4	codec_type
op	14:35	0:0	4	==
water	14:38	0:0	4	AVMEDIA_TYPE_VIDEO
op	14:57	0:0	4	&&
water	14:60	0:0	4	ost
op	14:63	0:0	4	->
water	14:65	0:0	4	encoding_needed
water	14:80	0:0	4	)
op	14:82	0:0	4	&&
op	14:85	0:0	4	!
water	14:86	0:0	4	unqueue
stmts	14:95	20:4	3	
water	14:95	0:0	4	{
if	15:8	18:8	4	(ost -> frame_number >= ost -> max_frames)
cond	15:12	15:38	5	ost -> frame_number >= ost -> max_frames
water	15:12	0:0	6	ost
op	15:15	0:0	6	->
water	15:17	0:0	6	frame_number
op	15:30	0:0	6	>=
water	15:33	0:0	6	ost
op	15:36	0:0	6	->
water	15:38	0:0	6	max_frames
stmts	15:50	18:8	5	
water	15:50	0:0	6	{
call	16:12	16:31	6	av_packet_unref
arg	16:28	16:31	7	pkt
water	16:28	0:0	8	pkt
water	16:32	0:0	6	;
return	17:12	17:18	6	
water	18:8	0:0	6	}
water	19:8	0:0	4	ost
op	19:11	0:0	4	->
water	19:13	0:0	4	frame_number
op	19:25	0:0	4	++
water	19:27	0:0	4	;
water	20:4	0:0	4	}
if	21:4	43:4	2	(! of -> header_written)
cond	21:8	21:13	3	! of -> header_written
op	21:8	0:0	4	!
water	21:9	0:0	4	of
op	21:11	0:0	4	->
water	21:13	0:0	4	header_written
stmts	21:29	43:4	3	
water	21:29	0:0	4	{
decl	22:8	22:30	4	AVPacket	tmp_pkt
op	22:25	0:0	4	=
water	22:27	0:0	4	{
water	22:28	0:0	4	0
water	22:29	0:0	4	}
if	24:8	36:8	4	(!av_fifo_space (ost -> muxing_queue ))
cond	24:12	24:44	5	!av_fifo_space (ost -> muxing_queue )
op	24:12	0:0	6	!
call	24:13	24:44	6	av_fifo_space
arg	24:27	24:44	7	ost->muxing_queue
water	24:27	0:0	8	ost
op	24:30	0:0	8	->
water	24:32	0:0	8	muxing_queue
stmts	24:47	36:8	5	
water	24:47	0:0	6	{
decl	25:12	26:60	6	int	new_size
op	25:25	0:0	6	=
call	25:27	26:59	7	FFMIN
arg	25:33	25:68	8	2*av_fifo_size(ost->muxing_queue)
water	25:33	0:0	9	2
call	25:35	25:67	9	*av_fifo_size
arg	25:50	25:67	10	ost->muxing_queue
water	25:50	0:0	11	ost
op	25:53	0:0	11	->
water	25:55	0:0	11	muxing_queue
arg	26:33	26:59	8	ost->max_muxing_queue_size
water	26:33	0:0	9	ost
op	26:36	0:0	9	->
water	26:38	0:0	9	max_muxing_queue_size
if	27:12	32:12	6	(new_size <=av_fifo_size (ost -> muxing_queue ))
cond	27:16	27:58	7	new_size <=av_fifo_size (ost -> muxing_queue )
water	27:16	0:0	8	new_size
op	27:25	0:0	8	<=
call	27:28	27:58	8	av_fifo_size
arg	27:41	27:58	9	ost->muxing_queue
water	27:41	0:0	10	ost
op	27:44	0:0	10	->
water	27:46	0:0	10	muxing_queue
stmts	27:61	32:12	7	
water	27:61	0:0	8	{
call	28:16	30:54	8	av_log
arg	28:23	28:27	9	NULL
water	28:23	0:0	10	NULL
arg	28:29	28:41	9	AV_LOG_ERROR
water	28:29	0:0	10	AV_LOG_ERROR
arg	29:23	29:77	9	"Too many packets buffered for output stream %d:%d.\n"
water	29:23	0:0	10	"Too many packets buffered for output stream %d:%d.\n"
arg	30:23	30:38	9	ost->file_index
water	30:23	0:0	10	ost
op	30:26	0:0	10	->
water	30:28	0:0	10	file_index
arg	30:40	30:54	9	ost->st->index
water	30:40	0:0	10	ost
op	30:43	0:0	10	->
water	30:45	0:0	10	st
op	30:47	0:0	10	->
water	30:49	0:0	10	index
water	30:55	0:0	8	;
call	31:16	31:30	8	exit_program
arg	31:29	31:30	9	1
water	31:29	0:0	10	1
water	31:31	0:0	8	;
water	32:12	0:0	8	}
water	33:12	0:0	6	ret
op	33:16	0:0	6	=
call	33:18	33:62	6	av_fifo_realloc2
arg	33:35	33:52	7	ost->muxing_queue
water	33:35	0:0	8	ost
op	33:38	0:0	8	->
water	33:40	0:0	8	muxing_queue
arg	33:54	33:62	7	new_size
water	33:54	0:0	8	new_size
water	33:63	0:0	6	;
if	34:12	35:31	6	(ret < 0)
cond	34:16	34:22	7	ret < 0
water	34:16	0:0	8	ret
op	34:20	0:0	8	<
water	34:22	0:0	8	0
stmts	35:16	35:31	7	
call	35:16	35:30	8	exit_program
arg	35:29	35:30	9	1
water	35:29	0:0	10	1
water	35:31	0:0	8	;
water	36:8	0:0	6	}
water	37:8	0:0	4	ret
op	37:12	0:0	4	=
call	37:14	37:41	4	av_packet_ref
arg	37:28	37:36	5	&tmp_pkt
op	37:28	0:0	6	&
water	37:29	0:0	6	tmp_pkt
arg	37:38	37:41	5	pkt
water	37:38	0:0	6	pkt
water	37:42	0:0	4	;
if	38:8	39:27	4	(ret < 0)
cond	38:12	38:18	5	ret < 0
water	38:12	0:0	6	ret
op	38:16	0:0	6	<
water	38:18	0:0	6	0
stmts	39:12	39:27	5	
call	39:12	39:26	6	exit_program
arg	39:25	39:26	7	1
water	39:25	0:0	8	1
water	39:27	0:0	6	;
call	40:8	40:80	4	av_fifo_generic_write
arg	40:30	40:47	5	ost->muxing_queue
water	40:30	0:0	6	ost
op	40:33	0:0	6	->
water	40:35	0:0	6	muxing_queue
arg	40:49	40:57	5	&tmp_pkt
op	40:49	0:0	6	&
water	40:50	0:0	6	tmp_pkt
arg	40:59	40:74	5	sizeof(tmp_pkt)
op	40:59	0:0	6	sizeof
water	40:65	0:0	6	(
water	40:66	0:0	6	tmp_pkt
water	40:73	0:0	6	)
arg	40:76	40:80	5	NULL
water	40:76	0:0	6	NULL
water	40:81	0:0	4	;
call	41:8	41:27	4	av_packet_unref
arg	41:24	41:27	5	pkt
water	41:24	0:0	6	pkt
water	41:28	0:0	4	;
return	42:8	42:14	4	
water	43:4	0:0	4	}
if	44:4	46:44	2	(( st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO && video_sync_method == VSYNC_DROP ) || ( st -> codecpar -> codec_type == AVMEDIA_TYPE_AUDIO && audio_sync_method < 0 ))
cond	44:8	45:80	3	( st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO && video_sync_method == VSYNC_DROP ) || ( st -> codecpar -> codec_type == AVMEDIA_TYPE_AUDIO && audio_sync_method < 0 )
water	44:8	0:0	4	(
water	44:9	0:0	4	st
op	44:11	0:0	4	->
water	44:13	0:0	4	codecpar
op	44:21	0:0	4	->
water	44:23	0:0	4	codec_type
op	44:34	0:0	4	==
water	44:37	0:0	4	AVMEDIA_TYPE_VIDEO
op	44:56	0:0	4	&&
water	44:59	0:0	4	video_sync_method
op	44:77	0:0	4	==
water	44:80	0:0	4	VSYNC_DROP
water	44:90	0:0	4	)
op	44:92	0:0	4	||
water	45:8	0:0	4	(
water	45:9	0:0	4	st
op	45:11	0:0	4	->
water	45:13	0:0	4	codecpar
op	45:21	0:0	4	->
water	45:23	0:0	4	codec_type
op	45:34	0:0	4	==
water	45:37	0:0	4	AVMEDIA_TYPE_AUDIO
op	45:56	0:0	4	&&
water	45:59	0:0	4	audio_sync_method
op	45:77	0:0	4	<
water	45:79	0:0	4	0
water	45:80	0:0	4	)
stmts	46:8	46:44	3	
water	46:8	0:0	4	pkt
op	46:11	0:0	4	->
water	46:13	0:0	4	pts
op	46:17	0:0	4	=
water	46:19	0:0	4	pkt
op	46:22	0:0	4	->
water	46:24	0:0	4	dts
op	46:28	0:0	4	=
water	46:30	0:0	4	AV_NOPTS_VALUE
water	46:44	0:0	4	;
if	47:4	65:4	2	(st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	47:8	47:36	3	st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO
water	47:8	0:0	4	st
op	47:10	0:0	4	->
water	47:12	0:0	4	codecpar
op	47:20	0:0	4	->
water	47:22	0:0	4	codec_type
op	47:33	0:0	4	==
water	47:36	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	47:56	65:4	3	
water	47:56	0:0	4	{
decl	48:8	48:13	4	int	i
decl	49:8	50:51	4	uint8_t	*sd
op	49:20	0:0	4	=
call	49:22	50:50	5	av_packet_get_side_data
arg	49:46	49:49	6	pkt
water	49:46	0:0	7	pkt
arg	49:51	49:76	6	AV_PKT_DATA_QUALITY_STATS
water	49:51	0:0	7	AV_PKT_DATA_QUALITY_STATS
arg	50:46	50:50	6	NULL
water	50:46	0:0	7	NULL
water	51:8	0:0	4	ost
op	51:11	0:0	4	->
water	51:13	0:0	4	quality
op	51:21	0:0	4	=
water	51:23	0:0	4	sd
water	51:26	0:0	4	?
call	51:28	51:38	4	AV_RL32
arg	51:36	51:38	5	sd
water	51:36	0:0	6	sd
water	51:40	0:0	4	:
op	51:42	0:0	4	-
water	51:43	0:0	4	1
water	51:44	0:0	4	;
water	52:8	0:0	4	ost
op	52:11	0:0	4	->
water	52:13	0:0	4	pict_type
op	52:23	0:0	4	=
water	52:25	0:0	4	sd
water	52:28	0:0	4	?
water	52:30	0:0	4	sd
op	52:32	0:0	4	[
water	52:33	0:0	4	4
op	52:34	0:0	4	]
water	52:36	0:0	4	:
water	52:38	0:0	4	AV_PICTURE_TYPE_NONE
water	52:58	0:0	4	;
for	53:8	58:8	4	(i = 0 ;i <FF_ARRAY_ELEMS (ost -> error );i ++)
forinit	53:13	53:18	5	i = 0 ;
water	53:13	0:0	6	i
op	53:15	0:0	6	=
water	53:17	0:0	6	0
water	53:18	0:0	6	;
cond	53:20	53:47	5	i <FF_ARRAY_ELEMS (ost -> error )
water	53:20	0:0	6	i
op	53:21	0:0	6	<
call	53:22	53:47	6	FF_ARRAY_ELEMS
arg	53:37	53:47	7	ost->error
water	53:37	0:0	8	ost
op	53:40	0:0	8	->
water	53:42	0:0	8	error
forexpr	53:50	53:51	5	i ++
water	53:50	0:0	6	i
op	53:51	0:0	6	++
stmts	53:55	58:8	5	
water	53:55	0:0	6	{
if	54:12	55:53	6	(sd && i < sd [ 5 ])
cond	54:16	54:30	7	sd && i < sd [ 5 ]
water	54:16	0:0	8	sd
op	54:19	0:0	8	&&
water	54:22	0:0	8	i
op	54:24	0:0	8	<
water	54:26	0:0	8	sd
op	54:28	0:0	8	[
water	54:29	0:0	8	5
op	54:30	0:0	8	]
stmts	55:16	55:53	7	
water	55:16	0:0	8	ost
op	55:19	0:0	8	->
water	55:21	0:0	8	error
op	55:26	0:0	8	[
water	55:27	0:0	8	i
op	55:28	0:0	8	]
op	55:30	0:0	8	=
call	55:32	55:52	8	AV_RL64
arg	55:40	55:52	9	sd+8+8*i
water	55:40	0:0	10	sd
op	55:43	0:0	10	+
water	55:45	0:0	10	8
op	55:47	0:0	10	+
water	55:49	0:0	10	8
op	55:50	0:0	10	*
water	55:51	0:0	10	i
water	55:53	0:0	8	;
else	56:12	57:34	6
stmts	57:16	57:34	7	
water	57:16	0:0	8	ost
op	57:19	0:0	8	->
water	57:21	0:0	8	error
op	57:26	0:0	8	[
water	57:27	0:0	8	i
op	57:28	0:0	8	]
op	57:30	0:0	8	=
op	57:32	0:0	8	-
water	57:33	0:0	8	1
water	57:34	0:0	8	;
water	58:8	0:0	6	}
if	59:8	64:8	4	(ost -> frame_rate . num && ost -> is_cfr)
cond	59:12	59:40	5	ost -> frame_rate . num && ost -> is_cfr
water	59:12	0:0	6	ost
op	59:15	0:0	6	->
water	59:17	0:0	6	frame_rate
op	59:27	0:0	6	.
water	59:28	0:0	6	num
op	59:32	0:0	6	&&
water	59:35	0:0	6	ost
op	59:38	0:0	6	->
water	59:40	0:0	6	is_cfr
stmts	59:48	64:8	5	
water	59:48	0:0	6	{
if	60:12	61:114	6	(pkt -> duration > 0)
cond	60:16	60:32	7	pkt -> duration > 0
water	60:16	0:0	8	pkt
op	60:19	0:0	8	->
water	60:21	0:0	8	duration
op	60:30	0:0	8	>
water	60:32	0:0	8	0
stmts	61:16	61:114	7	
call	61:16	61:113	8	av_log
arg	61:23	61:27	9	NULL
water	61:23	0:0	10	NULL
arg	61:29	61:43	9	AV_LOG_WARNING
water	61:29	0:0	10	AV_LOG_WARNING
arg	61:45	61:113	9	"Overriding packet duration by frame rate, this should not happen\n"
water	61:45	0:0	10	"Overriding packet duration by frame rate, this should not happen\n"
water	61:114	0:0	8	;
water	62:12	0:0	6	pkt
op	62:15	0:0	6	->
water	62:17	0:0	6	duration
op	62:26	0:0	6	=
call	62:28	63:58	6	av_rescale_q
arg	62:41	62:42	7	1
water	62:41	0:0	8	1
arg	62:44	62:69	7	av_inv_q(ost->frame_rate)
call	62:44	62:68	8	av_inv_q
arg	62:53	62:68	9	ost->frame_rate
water	62:53	0:0	10	ost
op	62:56	0:0	10	->
water	62:58	0:0	10	frame_rate
arg	63:41	63:58	7	ost->mux_timebase
water	63:41	0:0	8	ost
op	63:44	0:0	8	->
water	63:46	0:0	8	mux_timebase
water	63:59	0:0	6	;
water	64:8	0:0	6	}
water	65:4	0:0	4	}
call	66:4	66:67	2	av_packet_rescale_ts
arg	66:25	66:28	3	pkt
water	66:25	0:0	4	pkt
arg	66:30	66:47	3	ost->mux_timebase
water	66:30	0:0	4	ost
op	66:33	0:0	4	->
water	66:35	0:0	4	mux_timebase
arg	66:49	66:67	3	ost->st->time_base
water	66:49	0:0	4	ost
op	66:52	0:0	4	->
water	66:54	0:0	4	st
op	66:56	0:0	4	->
water	66:58	0:0	4	time_base
water	66:68	0:0	2	;
if	67:4	101:4	2	(! ( s -> oformat -> flags & AVFMT_NOTIMESTAMPS ))
cond	67:8	67:48	3	! ( s -> oformat -> flags & AVFMT_NOTIMESTAMPS )
op	67:8	0:0	4	!
water	67:9	0:0	4	(
water	67:10	0:0	4	s
op	67:11	0:0	4	->
water	67:13	0:0	4	oformat
op	67:20	0:0	4	->
water	67:22	0:0	4	flags
op	67:28	0:0	4	&
water	67:30	0:0	4	AVFMT_NOTIMESTAMPS
water	67:48	0:0	4	)
stmts	67:51	101:4	3	
water	67:51	0:0	4	{
if	68:8	78:8	4	(pkt -> dts != AV_NOPTS_VALUE && pkt -> pts != AV_NOPTS_VALUE && pkt -> dts > pkt -> pts)
cond	68:12	70:28	5	pkt -> dts != AV_NOPTS_VALUE && pkt -> pts != AV_NOPTS_VALUE && pkt -> dts > pkt -> pts
water	68:12	0:0	6	pkt
op	68:15	0:0	6	->
water	68:17	0:0	6	dts
op	68:21	0:0	6	!=
water	68:24	0:0	6	AV_NOPTS_VALUE
op	68:39	0:0	6	&&
water	69:12	0:0	6	pkt
op	69:15	0:0	6	->
water	69:17	0:0	6	pts
op	69:21	0:0	6	!=
water	69:24	0:0	6	AV_NOPTS_VALUE
op	69:39	0:0	6	&&
water	70:12	0:0	6	pkt
op	70:15	0:0	6	->
water	70:17	0:0	6	dts
op	70:21	0:0	6	>
water	70:23	0:0	6	pkt
op	70:26	0:0	6	->
water	70:28	0:0	6	pts
stmts	70:33	78:8	5	
water	70:33	0:0	6	{
call	71:12	73:50	6	av_log
arg	71:19	71:20	7	s
water	71:19	0:0	8	s
arg	71:22	71:36	7	AV_LOG_WARNING
water	71:22	0:0	8	AV_LOG_WARNING
arg	71:38	71:122	7	"Invalid DTS: %"PRId64" PTS: %"PRId64" in output stream %d:%d, replacing by guess\n"
water	71:38	0:0	8	"Invalid DTS: %"
water	71:54	0:0	8	PRId64
water	71:60	0:0	8	" PTS: %"
water	71:69	0:0	8	PRId64
water	71:75	0:0	8	" in output stream %d:%d, replacing by guess\n"
arg	72:19	72:27	7	pkt->dts
water	72:19	0:0	8	pkt
op	72:22	0:0	8	->
water	72:24	0:0	8	dts
arg	72:29	72:37	7	pkt->pts
water	72:29	0:0	8	pkt
op	72:32	0:0	8	->
water	72:34	0:0	8	pts
arg	73:19	73:34	7	ost->file_index
water	73:19	0:0	8	ost
op	73:22	0:0	8	->
water	73:24	0:0	8	file_index
arg	73:36	73:50	7	ost->st->index
water	73:36	0:0	8	ost
op	73:39	0:0	8	->
water	73:41	0:0	8	st
op	73:43	0:0	8	->
water	73:45	0:0	8	index
water	73:51	0:0	6	;
water	74:12	0:0	6	pkt
op	74:15	0:0	6	->
water	74:17	0:0	6	pts
op	74:21	0:0	6	=
water	75:12	0:0	6	pkt
op	75:15	0:0	6	->
water	75:17	0:0	6	dts
op	75:21	0:0	6	=
water	75:23	0:0	6	pkt
op	75:26	0:0	6	->
water	75:28	0:0	6	pts
op	75:32	0:0	6	+
water	75:34	0:0	6	pkt
op	75:37	0:0	6	->
water	75:39	0:0	6	dts
op	75:43	0:0	6	+
water	75:45	0:0	6	ost
op	75:48	0:0	6	->
water	75:50	0:0	6	last_mux_dts
op	75:63	0:0	6	+
water	75:65	0:0	6	1
op	76:21	0:0	6	-
call	76:23	76:71	6	FFMIN3
arg	76:30	76:38	7	pkt->pts
water	76:30	0:0	8	pkt
op	76:33	0:0	8	->
water	76:35	0:0	8	pts
arg	76:40	76:48	7	pkt->dts
water	76:40	0:0	8	pkt
op	76:43	0:0	8	->
water	76:45	0:0	8	dts
arg	76:50	76:71	7	ost->last_mux_dts+1
water	76:50	0:0	8	ost
op	76:53	0:0	8	->
water	76:55	0:0	8	last_mux_dts
op	76:68	0:0	8	+
water	76:70	0:0	8	1
op	77:21	0:0	6	-
call	77:23	77:71	6	FFMAX3
arg	77:30	77:38	7	pkt->pts
water	77:30	0:0	8	pkt
op	77:33	0:0	8	->
water	77:35	0:0	8	pts
arg	77:40	77:48	7	pkt->dts
water	77:40	0:0	8	pkt
op	77:43	0:0	8	->
water	77:45	0:0	8	dts
arg	77:50	77:71	7	ost->last_mux_dts+1
water	77:50	0:0	8	ost
op	77:53	0:0	8	->
water	77:55	0:0	8	last_mux_dts
op	77:68	0:0	8	+
water	77:70	0:0	8	1
water	77:72	0:0	6	;
water	78:8	0:0	6	}
if	79:8	100:8	4	(( st -> codecpar -> codec_type == AVMEDIA_TYPE_AUDIO || st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO ) && pkt -> dts != AV_NOPTS_VALUE && ! ( st -> codecpar -> codec_id == AV_CODEC_ID_VP9 && ost -> stream_copy ) && ost -> last_mux_dts != AV_NOPTS_VALUE)
cond	79:12	82:33	5	( st -> codecpar -> codec_type == AVMEDIA_TYPE_AUDIO || st -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO ) && pkt -> dts != AV_NOPTS_VALUE && ! ( st -> codecpar -> codec_id == AV_CODEC_ID_VP9 && ost -> stream_copy ) && ost -> last_mux_dts != AV_NOPTS_VALUE
water	79:12	0:0	6	(
water	79:13	0:0	6	st
op	79:15	0:0	6	->
water	79:17	0:0	6	codecpar
op	79:25	0:0	6	->
water	79:27	0:0	6	codec_type
op	79:38	0:0	6	==
water	79:41	0:0	6	AVMEDIA_TYPE_AUDIO
op	79:60	0:0	6	||
water	79:63	0:0	6	st
op	79:65	0:0	6	->
water	79:67	0:0	6	codecpar
op	79:75	0:0	6	->
water	79:77	0:0	6	codec_type
op	79:88	0:0	6	==
water	79:91	0:0	6	AVMEDIA_TYPE_VIDEO
water	79:109	0:0	6	)
op	79:111	0:0	6	&&
water	80:12	0:0	6	pkt
op	80:15	0:0	6	->
water	80:17	0:0	6	dts
op	80:21	0:0	6	!=
water	80:24	0:0	6	AV_NOPTS_VALUE
op	80:39	0:0	6	&&
op	81:12	0:0	6	!
water	81:13	0:0	6	(
water	81:14	0:0	6	st
op	81:16	0:0	6	->
water	81:18	0:0	6	codecpar
op	81:26	0:0	6	->
water	81:28	0:0	6	codec_id
op	81:37	0:0	6	==
water	81:40	0:0	6	AV_CODEC_ID_VP9
op	81:56	0:0	6	&&
water	81:59	0:0	6	ost
op	81:62	0:0	6	->
water	81:64	0:0	6	stream_copy
water	81:75	0:0	6	)
op	81:77	0:0	6	&&
water	82:12	0:0	6	ost
op	82:15	0:0	6	->
water	82:17	0:0	6	last_mux_dts
op	82:30	0:0	6	!=
water	82:33	0:0	6	AV_NOPTS_VALUE
stmts	82:49	100:8	5	
water	82:49	0:0	6	{
decl	83:12	83:87	6	int64_t	max
op	83:24	0:0	6	=
water	83:26	0:0	6	ost
op	83:29	0:0	6	->
water	83:31	0:0	6	last_mux_dts
op	83:44	0:0	6	+
op	83:46	0:0	6	!
water	83:47	0:0	6	(
water	83:48	0:0	6	s
op	83:49	0:0	6	->
water	83:51	0:0	6	oformat
op	83:58	0:0	6	->
water	83:60	0:0	6	flags
op	83:66	0:0	6	&
water	83:68	0:0	6	AVFMT_TS_NONSTRICT
water	83:86	0:0	6	)
if	84:12	99:12	6	(pkt -> dts < max)
cond	84:16	84:27	7	pkt -> dts < max
water	84:16	0:0	8	pkt
op	84:19	0:0	8	->
water	84:21	0:0	8	dts
op	84:25	0:0	8	<
water	84:27	0:0	8	max
stmts	84:32	99:12	7	
water	84:32	0:0	8	{
decl	85:16	85:131	8	int	loglevel
op	85:29	0:0	8	=
water	85:31	0:0	8	max
op	85:35	0:0	8	-
water	85:37	0:0	8	pkt
op	85:40	0:0	8	->
water	85:42	0:0	8	dts
op	85:46	0:0	8	>
water	85:48	0:0	8	2
op	85:50	0:0	8	||
water	85:53	0:0	8	st
op	85:55	0:0	8	->
water	85:57	0:0	8	codecpar
op	85:65	0:0	8	->
water	85:67	0:0	8	codec_type
op	85:78	0:0	8	==
water	85:81	0:0	8	AVMEDIA_TYPE_VIDEO
water	85:100	0:0	8	?
water	85:102	0:0	8	AV_LOG_WARNING
water	85:117	0:0	8	:
water	85:119	0:0	8	AV_LOG_DEBUG
call	86:16	88:83	8	av_log
arg	86:23	86:24	9	s
water	86:23	0:0	10	s
arg	86:26	86:34	9	loglevel
water	86:26	0:0	10	loglevel
arg	86:36	87:73	9	"Non-monotonous DTS in output stream ""%d:%d; previous: %"PRId64", current: %"PRId64"; "
water	86:36	0:0	10	"Non-monotonous DTS in output stream "
water	87:23	0:0	10	"%d:%d; previous: %"
water	87:43	0:0	10	PRId64
water	87:49	0:0	10	", current: %"
water	87:63	0:0	10	PRId64
water	87:69	0:0	10	"; "
arg	88:23	88:38	9	ost->file_index
water	88:23	0:0	10	ost
op	88:26	0:0	10	->
water	88:28	0:0	10	file_index
arg	88:40	88:54	9	ost->st->index
water	88:40	0:0	10	ost
op	88:43	0:0	10	->
water	88:45	0:0	10	st
op	88:47	0:0	10	->
water	88:49	0:0	10	index
arg	88:56	88:73	9	ost->last_mux_dts
water	88:56	0:0	10	ost
op	88:59	0:0	10	->
water	88:61	0:0	10	last_mux_dts
arg	88:75	88:83	9	pkt->dts
water	88:75	0:0	10	pkt
op	88:78	0:0	10	->
water	88:80	0:0	10	dts
water	88:84	0:0	8	;
if	89:16	92:16	8	(exit_on_error)
cond	89:20	89:20	9	exit_on_error
water	89:20	0:0	10	exit_on_error
stmts	89:35	92:16	9	
water	89:35	0:0	10	{
call	90:20	90:60	10	av_log
arg	90:27	90:31	11	NULL
water	90:27	0:0	12	NULL
arg	90:33	90:45	11	AV_LOG_FATAL
water	90:33	0:0	12	AV_LOG_FATAL
arg	90:47	90:60	11	"aborting.\n"
water	90:47	0:0	12	"aborting.\n"
water	90:61	0:0	10	;
call	91:20	91:34	10	exit_program
arg	91:33	91:34	11	1
water	91:33	0:0	12	1
water	91:35	0:0	10	;
water	92:16	0:0	10	}
call	93:16	95:26	8	av_log
arg	93:23	93:24	9	s
water	93:23	0:0	10	s
arg	93:26	93:34	9	loglevel
water	93:26	0:0	10	loglevel
arg	93:36	94:70	9	"changing to %"PRId64". This may result ""in incorrect timestamps in the output file.\n"
water	93:36	0:0	10	"changing to %"
water	93:51	0:0	10	PRId64
water	93:57	0:0	10	". This may result "
water	94:23	0:0	10	"in incorrect timestamps in the output file.\n"
arg	95:23	95:26	9	max
water	95:23	0:0	10	max
water	95:27	0:0	8	;
if	96:16	97:51	8	(pkt -> pts >= pkt -> dts)
cond	96:20	96:37	9	pkt -> pts >= pkt -> dts
water	96:20	0:0	10	pkt
op	96:23	0:0	10	->
water	96:25	0:0	10	pts
op	96:29	0:0	10	>=
water	96:32	0:0	10	pkt
op	96:35	0:0	10	->
water	96:37	0:0	10	dts
stmts	97:20	97:51	9	
water	97:20	0:0	10	pkt
op	97:23	0:0	10	->
water	97:25	0:0	10	pts
op	97:29	0:0	10	=
call	97:31	97:50	10	FFMAX
arg	97:37	97:45	11	pkt->pts
water	97:37	0:0	12	pkt
op	97:40	0:0	12	->
water	97:42	0:0	12	pts
arg	97:47	97:50	11	max
water	97:47	0:0	12	max
water	97:51	0:0	10	;
water	98:16	0:0	8	pkt
op	98:19	0:0	8	->
water	98:21	0:0	8	dts
op	98:25	0:0	8	=
water	98:27	0:0	8	max
water	98:30	0:0	8	;
water	99:12	0:0	8	}
water	100:8	0:0	6	}
water	101:4	0:0	4	}
water	102:4	0:0	2	ost
op	102:7	0:0	2	->
water	102:9	0:0	2	last_mux_dts
op	102:22	0:0	2	=
water	102:24	0:0	2	pkt
op	102:27	0:0	2	->
water	102:29	0:0	2	dts
water	102:32	0:0	2	;
water	103:4	0:0	2	ost
op	103:7	0:0	2	->
water	103:9	0:0	2	data_size
op	103:19	0:0	2	+=
water	103:22	0:0	2	pkt
op	103:25	0:0	2	->
water	103:27	0:0	2	size
water	103:31	0:0	2	;
water	104:4	0:0	2	ost
op	104:7	0:0	2	->
water	104:9	0:0	2	packets_written
op	104:24	0:0	2	++
water	104:26	0:0	2	;
water	105:4	0:0	2	pkt
op	105:7	0:0	2	->
water	105:9	0:0	2	stream_index
op	105:22	0:0	2	=
water	105:24	0:0	2	ost
op	105:27	0:0	2	->
water	105:29	0:0	2	index
water	105:34	0:0	2	;
if	106:4	114:4	2	(debug_ts)
cond	106:8	106:8	3	debug_ts
water	106:8	0:0	4	debug_ts
stmts	106:18	114:4	3	
water	106:18	0:0	4	{
call	107:8	113:14	4	av_log
arg	107:15	107:19	5	NULL
water	107:15	0:0	6	NULL
arg	107:21	107:32	5	AV_LOG_INFO
water	107:21	0:0	6	AV_LOG_INFO
arg	107:34	108:81	5	"muxer <- type:%s ""pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s size:%d\n"
water	107:34	0:0	6	"muxer <- type:%s "
water	108:16	0:0	6	"pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s size:%d\n"
arg	109:16	109:66	5	av_get_media_type_string(ost->enc_ctx->codec_type)
call	109:16	109:65	6	av_get_media_type_string
arg	109:41	109:65	7	ost->enc_ctx->codec_type
water	109:41	0:0	8	ost
op	109:44	0:0	8	->
water	109:46	0:0	8	enc_ctx
op	109:53	0:0	8	->
water	109:55	0:0	8	codec_type
arg	110:16	110:35	5	av_ts2str(pkt->pts)
call	110:16	110:34	6	av_ts2str
arg	110:26	110:34	7	pkt->pts
water	110:26	0:0	8	pkt
op	110:29	0:0	8	->
water	110:31	0:0	8	pts
arg	110:37	110:81	5	av_ts2timestr(pkt->pts,&ost->st->time_base)
call	110:37	110:80	6	av_ts2timestr
arg	110:51	110:59	7	pkt->pts
water	110:51	0:0	8	pkt
op	110:54	0:0	8	->
water	110:56	0:0	8	pts
arg	110:61	110:80	7	&ost->st->time_base
op	110:61	0:0	8	&
water	110:62	0:0	8	ost
op	110:65	0:0	8	->
water	110:67	0:0	8	st
op	110:69	0:0	8	->
water	110:71	0:0	8	time_base
arg	111:16	111:35	5	av_ts2str(pkt->dts)
call	111:16	111:34	6	av_ts2str
arg	111:26	111:34	7	pkt->dts
water	111:26	0:0	8	pkt
op	111:29	0:0	8	->
water	111:31	0:0	8	dts
arg	111:37	111:81	5	av_ts2timestr(pkt->dts,&ost->st->time_base)
call	111:37	111:80	6	av_ts2timestr
arg	111:51	111:59	7	pkt->dts
water	111:51	0:0	8	pkt
op	111:54	0:0	8	->
water	111:56	0:0	8	dts
arg	111:61	111:80	7	&ost->st->time_base
op	111:61	0:0	8	&
water	111:62	0:0	8	ost
op	111:65	0:0	8	->
water	111:67	0:0	8	st
op	111:69	0:0	8	->
water	111:71	0:0	8	time_base
arg	112:16	113:14	5	pkt->size
water	112:16	0:0	6	pkt
op	112:19	0:0	6	->
water	112:21	0:0	6	size
water	113:15	0:0	4	;
water	114:4	0:0	4	}
water	115:4	0:0	2	ret
op	115:8	0:0	2	=
call	115:10	115:43	2	av_interleaved_write_frame
arg	115:37	115:38	3	s
water	115:37	0:0	4	s
arg	115:40	115:43	3	pkt
water	115:40	0:0	4	pkt
water	115:44	0:0	2	;
if	116:4	120:4	2	(ret < 0)
cond	116:8	116:14	3	ret < 0
water	116:8	0:0	4	ret
op	116:12	0:0	4	<
water	116:14	0:0	4	0
stmts	116:17	120:4	3	
water	116:17	0:0	4	{
call	117:8	117:55	4	print_error
arg	117:20	117:50	5	"av_interleaved_write_frame()"
water	117:20	0:0	6	"av_interleaved_write_frame()"
arg	117:52	117:55	5	ret
water	117:52	0:0	6	ret
water	117:56	0:0	4	;
water	118:8	0:0	4	main_return_code
op	118:25	0:0	4	=
water	118:27	0:0	4	1
water	118:28	0:0	4	;
call	119:8	119:89	4	close_all_output_streams
arg	119:33	119:36	5	ost
water	119:33	0:0	6	ost
arg	119:38	119:71	5	MUXER_FINISHED|ENCODER_FINISHED
water	119:38	0:0	6	MUXER_FINISHED
op	119:53	0:0	6	|
water	119:55	0:0	6	ENCODER_FINISHED
arg	119:73	119:89	5	ENCODER_FINISHED
water	119:73	0:0	6	ENCODER_FINISHED
water	119:90	0:0	4	;
water	120:4	0:0	4	}
call	121:4	121:23	2	av_packet_unref
arg	121:20	121:23	3	pkt
water	121:20	0:0	4	pkt
water	121:24	0:0	2	;
