func	1:0	11:0	0	static int	generate_raw_frame
params	1:29	0:0	1	
param	1:30	1:50	2	uint16_t *	frame_data
param	1:52	1:57	2	int	i
param	1:59	1:74	2	int	sample_rate
param	2:30	2:42	2	int	channels
param	2:44	2:58	2	int	frame_size
stmnts	0:0	10:12	1	
decl	4:4	4:12	2	int	j
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	k
for	5:4	9:4	2	(j = 0 ;j < frame_size;j ++)
forinit	5:9	5:14	3	j = 0 ;
water	5:9	0:0	4	j
op	5:11	0:0	4	=
water	5:13	0:0	4	0
water	5:14	0:0	4	;
cond	5:16	5:20	3	j < frame_size
water	5:16	0:0	4	j
op	5:18	0:0	4	<
water	5:20	0:0	4	frame_size
forexpr	5:32	5:33	3	j ++
water	5:32	0:0	4	j
op	5:33	0:0	4	++
stmts	5:37	9:4	3	
water	5:37	0:0	4	{
water	6:8	0:0	4	frame_data
op	6:18	0:0	4	[
water	6:19	0:0	4	channels
op	6:28	0:0	4	*
water	6:30	0:0	4	j
op	6:31	0:0	4	]
op	6:33	0:0	4	=
water	6:35	0:0	4	10000
op	6:41	0:0	4	*
water	6:43	0:0	4	(
water	6:44	0:0	4	(
water	6:45	0:0	4	j
op	6:47	0:0	4	/
water	6:49	0:0	4	10
op	6:52	0:0	4	*
water	6:54	0:0	4	i
water	6:55	0:0	4	)
op	6:57	0:0	4	%
water	6:59	0:0	4	2
water	6:60	0:0	4	)
water	6:61	0:0	4	;
for	7:8	8:77	4	(k = 1 ;k < channels;k ++)
forinit	7:13	7:18	5	k = 1 ;
water	7:13	0:0	6	k
op	7:15	0:0	6	=
water	7:17	0:0	6	1
water	7:18	0:0	6	;
cond	7:20	7:24	5	k < channels
water	7:20	0:0	6	k
op	7:22	0:0	6	<
water	7:24	0:0	6	channels
forexpr	7:34	7:35	5	k ++
water	7:34	0:0	6	k
op	7:35	0:0	6	++
stmts	8:12	8:77	5	
water	8:12	0:0	6	frame_data
op	8:22	0:0	6	[
water	8:23	0:0	6	channels
op	8:32	0:0	6	*
water	8:34	0:0	6	j
op	8:36	0:0	6	+
water	8:38	0:0	6	k
op	8:39	0:0	6	]
op	8:41	0:0	6	=
water	8:43	0:0	6	frame_data
op	8:53	0:0	6	[
water	8:54	0:0	6	channels
op	8:63	0:0	6	*
water	8:65	0:0	6	j
op	8:66	0:0	6	]
op	8:68	0:0	6	*
water	8:70	0:0	6	(
water	8:71	0:0	6	k
op	8:73	0:0	6	+
water	8:75	0:0	6	1
water	8:76	0:0	6	)
water	8:77	0:0	6	;
water	9:4	0:0	4	}
return	10:4	10:12	2	0
water	10:11	0:0	3	0
