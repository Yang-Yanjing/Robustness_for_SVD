func	1:0	78:0	0	static int	open_input_stream
params	1:28	0:0	1	
param	1:29	1:43	2	HTTPContext *	c
param	1:45	1:61	2	const char *	info
stmnts	0:0	77:12	1	
decl	3:4	3:17	2	char	buf[128]
decl	4:4	4:29	2	char	input_filename[1024]
decl	5:4	5:29	2	AVFormatContext	*s
op	5:23	0:0	2	=
water	5:25	0:0	2	NULL
decl	6:4	6:24	2	int	buf_size
water	6:16	0:0	2	,
decl	6:4	6:24	2	int	i
water	6:19	0:0	2	,
decl	6:4	6:24	2	int	ret
decl	7:4	7:22	2	int64_t	stream_pos
if	9:4	23:4	2	(c -> stream -> feed)
cond	9:8	9:19	3	c -> stream -> feed
water	9:8	0:0	4	c
op	9:9	0:0	4	->
water	9:11	0:0	4	stream
op	9:17	0:0	4	->
water	9:19	0:0	4	feed
stmts	9:25	23:4	3	
water	9:25	0:0	4	{
call	10:8	10:61	4	strcpy
arg	10:15	10:29	5	input_filename
water	10:15	0:0	6	input_filename
arg	10:31	10:61	5	c->stream->feed->feed_filename
water	10:31	0:0	6	c
op	10:32	0:0	6	->
water	10:34	0:0	6	stream
op	10:40	0:0	6	->
water	10:42	0:0	6	feed
op	10:46	0:0	6	->
water	10:48	0:0	6	feed_filename
water	10:62	0:0	4	;
water	11:8	0:0	4	buf_size
op	11:17	0:0	4	=
water	11:19	0:0	4	FFM_PACKET_SIZE
water	11:34	0:0	4	;
if	13:8	18:8	4	(av_find_info_tag (buf ,sizeof ( buf ) ,"date" ,info ))
cond	13:12	13:59	5	av_find_info_tag (buf ,sizeof ( buf ) ,"date" ,info )
call	13:12	13:59	6	av_find_info_tag
arg	13:29	13:32	7	buf
water	13:29	0:0	8	buf
arg	13:34	13:45	7	sizeof(buf)
op	13:34	0:0	8	sizeof
water	13:40	0:0	8	(
water	13:41	0:0	8	buf
water	13:44	0:0	8	)
arg	13:47	13:53	7	"date"
water	13:47	0:0	8	"date"
arg	13:55	13:59	7	info
water	13:55	0:0	8	info
stmts	13:62	18:8	5	
water	13:62	0:0	6	{
if	14:12	17:12	6	(( ret =av_parse_time (& stream_pos ,buf ,0 ) ) < 0)
cond	14:16	14:61	7	( ret =av_parse_time (& stream_pos ,buf ,0 ) ) < 0
water	14:16	0:0	8	(
water	14:17	0:0	8	ret
op	14:21	0:0	8	=
call	14:23	14:56	8	av_parse_time
arg	14:37	14:48	9	&stream_pos
op	14:37	0:0	10	&
water	14:38	0:0	10	stream_pos
arg	14:50	14:53	9	buf
water	14:50	0:0	10	buf
arg	14:55	14:56	9	0
water	14:55	0:0	10	0
water	14:57	0:0	8	)
op	14:59	0:0	8	<
water	14:61	0:0	8	0
stmts	14:64	17:12	7	
water	14:64	0:0	8	{
call	15:16	15:76	8	http_log
arg	15:25	15:71	9	"Invalid date specification '%s' for stream\n"
water	15:25	0:0	10	"Invalid date specification '%s' for stream\n"
arg	15:73	15:76	9	buf
water	15:73	0:0	10	buf
water	15:77	0:0	8	;
return	16:16	16:26	8	ret
water	16:23	0:0	9	ret
water	17:12	0:0	8	}
water	18:8	0:0	6	}
else	18:10	21:8	4
stmts	18:15	21:8	5	
if	18:15	21:8	6	(av_find_info_tag (buf ,sizeof ( buf ) ,"buffer" ,info ))
cond	18:19	18:68	7	av_find_info_tag (buf ,sizeof ( buf ) ,"buffer" ,info )
call	18:19	18:68	8	av_find_info_tag
arg	18:36	18:39	9	buf
water	18:36	0:0	10	buf
arg	18:41	18:52	9	sizeof(buf)
op	18:41	0:0	10	sizeof
water	18:47	0:0	10	(
water	18:48	0:0	10	buf
water	18:51	0:0	10	)
arg	18:54	18:62	9	"buffer"
water	18:54	0:0	10	"buffer"
arg	18:64	18:68	9	info
water	18:64	0:0	10	info
stmts	18:71	21:8	7	
water	18:71	0:0	8	{
decl	19:12	19:46	8	int	prebuffer
op	19:26	0:0	8	=
call	19:28	19:45	9	strtol
arg	19:35	19:38	10	buf
water	19:35	0:0	11	buf
arg	19:40	19:41	10	0
water	19:40	0:0	11	0
arg	19:43	19:45	10	10
water	19:43	0:0	11	10
water	20:12	0:0	8	stream_pos
op	20:23	0:0	8	=
call	20:25	20:36	8	av_gettime
op	20:38	0:0	8	-
water	20:40	0:0	8	prebuffer
op	20:50	0:0	8	*
water	20:52	0:0	8	(
water	20:53	0:0	8	int64_t
water	20:60	0:0	8	)
water	20:61	0:0	8	1000000
water	20:68	0:0	8	;
water	21:8	0:0	8	}
else	21:10	22:76	4
stmts	22:12	22:76	5	
water	22:12	0:0	6	stream_pos
op	22:23	0:0	6	=
call	22:25	22:36	6	av_gettime
op	22:38	0:0	6	-
water	22:40	0:0	6	c
op	22:41	0:0	6	->
water	22:43	0:0	6	stream
op	22:49	0:0	6	->
water	22:51	0:0	6	prebuffer
op	22:61	0:0	6	*
water	22:63	0:0	6	(
water	22:64	0:0	6	int64_t
water	22:71	0:0	6	)
water	22:72	0:0	6	1000
water	22:76	0:0	6	;
water	23:4	0:0	4	}
else	23:6	34:4	2
stmts	23:11	34:4	3	
water	23:11	0:0	4	{
call	24:8	24:55	4	strcpy
arg	24:15	24:29	5	input_filename
water	24:15	0:0	6	input_filename
arg	24:31	24:55	5	c->stream->feed_filename
water	24:31	0:0	6	c
op	24:32	0:0	6	->
water	24:34	0:0	6	stream
op	24:40	0:0	6	->
water	24:42	0:0	6	feed_filename
water	24:56	0:0	4	;
water	25:8	0:0	4	buf_size
op	25:17	0:0	4	=
water	25:19	0:0	4	0
water	25:20	0:0	4	;
if	27:8	32:8	4	(av_find_info_tag (buf ,sizeof ( buf ) ,"date" ,info ))
cond	27:12	27:59	5	av_find_info_tag (buf ,sizeof ( buf ) ,"date" ,info )
call	27:12	27:59	6	av_find_info_tag
arg	27:29	27:32	7	buf
water	27:29	0:0	8	buf
arg	27:34	27:45	7	sizeof(buf)
op	27:34	0:0	8	sizeof
water	27:40	0:0	8	(
water	27:41	0:0	8	buf
water	27:44	0:0	8	)
arg	27:47	27:53	7	"date"
water	27:47	0:0	8	"date"
arg	27:55	27:59	7	info
water	27:55	0:0	8	info
stmts	27:62	32:8	5	
water	27:62	0:0	6	{
if	28:12	31:12	6	(( ret =av_parse_time (& stream_pos ,buf ,1 ) ) < 0)
cond	28:16	28:61	7	( ret =av_parse_time (& stream_pos ,buf ,1 ) ) < 0
water	28:16	0:0	8	(
water	28:17	0:0	8	ret
op	28:21	0:0	8	=
call	28:23	28:56	8	av_parse_time
arg	28:37	28:48	9	&stream_pos
op	28:37	0:0	10	&
water	28:38	0:0	10	stream_pos
arg	28:50	28:53	9	buf
water	28:50	0:0	10	buf
arg	28:55	28:56	9	1
water	28:55	0:0	10	1
water	28:57	0:0	8	)
op	28:59	0:0	8	<
water	28:61	0:0	8	0
stmts	28:64	31:12	7	
water	28:64	0:0	8	{
call	29:16	29:76	8	http_log
arg	29:25	29:71	9	"Invalid date specification '%s' for stream\n"
water	29:25	0:0	10	"Invalid date specification '%s' for stream\n"
arg	29:73	29:76	9	buf
water	29:73	0:0	10	buf
water	29:77	0:0	8	;
return	30:16	30:26	8	ret
water	30:23	0:0	9	ret
water	31:12	0:0	8	}
water	32:8	0:0	6	}
else	32:10	33:26	4
stmts	33:12	33:26	5	
water	33:12	0:0	6	stream_pos
op	33:23	0:0	6	=
water	33:25	0:0	6	0
water	33:26	0:0	6	;
water	34:4	0:0	4	}
if	35:4	38:4	2	(! input_filename [ 0 ])
cond	35:8	35:25	3	! input_filename [ 0 ]
op	35:8	0:0	4	!
water	35:9	0:0	4	input_filename
op	35:23	0:0	4	[
water	35:24	0:0	4	0
op	35:25	0:0	4	]
stmts	35:28	38:4	3	
water	35:28	0:0	4	{
call	36:8	36:57	4	http_log
arg	36:17	36:57	5	"No filename was specified for stream\n"
water	36:17	0:0	6	"No filename was specified for stream\n"
water	36:58	0:0	4	;
return	37:8	37:30	4	AVERROR(EINVAL)
call	37:15	37:29	5	AVERROR
arg	37:23	37:29	6	EINVAL
water	37:23	0:0	7	EINVAL
water	38:4	0:0	4	}
water	40:4	0:0	2	ret
op	40:8	0:0	2	=
call	40:10	41:49	2	avformat_open_input
arg	40:30	40:32	3	&s
op	40:30	0:0	4	&
water	40:31	0:0	4	s
arg	40:34	40:48	3	input_filename
water	40:34	0:0	4	input_filename
arg	40:50	40:65	3	c->stream->ifmt
water	40:50	0:0	4	c
op	40:51	0:0	4	->
water	40:53	0:0	4	stream
op	40:59	0:0	4	->
water	40:61	0:0	4	ifmt
arg	41:30	41:49	3	&c->stream->in_opts
op	41:30	0:0	4	&
water	41:31	0:0	4	c
op	41:32	0:0	4	->
water	41:34	0:0	4	stream
op	41:40	0:0	4	->
water	41:42	0:0	4	in_opts
water	41:50	0:0	2	;
if	42:4	46:4	2	(ret < 0)
cond	42:8	42:14	3	ret < 0
water	42:8	0:0	4	ret
op	42:12	0:0	4	<
water	42:14	0:0	4	0
stmts	42:17	46:4	3	
water	42:17	0:0	4	{
call	43:8	44:48	4	http_log
arg	43:17	43:50	5	"Could not open input '%s': %s\n"
water	43:17	0:0	6	"Could not open input '%s': %s\n"
arg	44:17	44:31	5	input_filename
water	44:17	0:0	6	input_filename
arg	44:33	44:48	5	av_err2str(ret)
call	44:33	44:47	6	av_err2str
arg	44:44	44:47	7	ret
water	44:44	0:0	8	ret
water	44:49	0:0	4	;
return	45:8	45:18	4	ret
water	45:15	0:0	5	ret
water	46:4	0:0	4	}
if	48:4	54:4	2	(buf_size > 0)
cond	48:8	48:19	3	buf_size > 0
water	48:8	0:0	4	buf_size
op	48:17	0:0	4	>
water	48:19	0:0	4	0
stmts	48:22	54:4	3	
water	48:22	0:0	4	{
water	49:8	0:0	4	ret
op	49:12	0:0	4	=
call	49:14	49:47	4	ffio_set_buf_size
arg	49:32	49:37	5	s->pb
water	49:32	0:0	6	s
op	49:33	0:0	6	->
water	49:35	0:0	6	pb
arg	49:39	49:47	5	buf_size
water	49:39	0:0	6	buf_size
water	49:48	0:0	4	;
if	50:8	53:8	4	(ret < 0)
cond	50:12	50:18	5	ret < 0
water	50:12	0:0	6	ret
op	50:16	0:0	6	<
water	50:18	0:0	6	0
stmts	50:21	53:8	5	
water	50:21	0:0	6	{
call	51:12	51:50	6	http_log
arg	51:21	51:50	7	"Failed to set buffer size\n"
water	51:21	0:0	8	"Failed to set buffer size\n"
water	51:51	0:0	6	;
return	52:12	52:22	6	ret
water	52:19	0:0	7	ret
water	53:8	0:0	6	}
water	54:4	0:0	4	}
water	55:4	0:0	2	s
op	55:5	0:0	2	->
water	55:7	0:0	2	flags
op	55:13	0:0	2	|=
water	55:16	0:0	2	AVFMT_FLAG_GENPTS
water	55:33	0:0	2	;
water	56:4	0:0	2	c
op	56:5	0:0	2	->
water	56:7	0:0	2	fmt_in
op	56:14	0:0	2	=
water	56:16	0:0	2	s
water	56:17	0:0	2	;
if	57:4	62:4	2	(strcmp (s -> iformat -> name ,"ffm" ) && ( ret =avformat_find_stream_info (c -> fmt_in ,NULL ) ) < 0)
cond	57:8	58:61	3	strcmp (s -> iformat -> name ,"ffm" ) && ( ret =avformat_find_stream_info (c -> fmt_in ,NULL ) ) < 0
call	57:8	57:38	4	strcmp
arg	57:15	57:31	5	s->iformat->name
water	57:15	0:0	6	s
op	57:16	0:0	6	->
water	57:18	0:0	6	iformat
op	57:25	0:0	6	->
water	57:27	0:0	6	name
arg	57:33	57:38	5	"ffm"
water	57:33	0:0	6	"ffm"
op	57:40	0:0	4	&&
water	58:8	0:0	4	(
water	58:9	0:0	4	ret
op	58:13	0:0	4	=
call	58:15	58:56	4	avformat_find_stream_info
arg	58:41	58:50	5	c->fmt_in
water	58:41	0:0	6	c
op	58:42	0:0	6	->
water	58:44	0:0	6	fmt_in
arg	58:52	58:56	5	NULL
water	58:52	0:0	6	NULL
water	58:57	0:0	4	)
op	58:59	0:0	4	<
water	58:61	0:0	4	0
stmts	58:64	62:4	3	
water	58:64	0:0	4	{
call	59:8	59:78	4	http_log
arg	59:17	59:62	5	"Could not find stream info for input '%s'\n"
water	59:17	0:0	6	"Could not find stream info for input '%s'\n"
arg	59:64	59:78	5	input_filename
water	59:64	0:0	6	input_filename
water	59:79	0:0	4	;
call	60:8	60:31	4	avformat_close_input
arg	60:29	60:31	5	&s
op	60:29	0:0	6	&
water	60:30	0:0	6	s
water	60:32	0:0	4	;
return	61:8	61:18	4	ret
water	61:15	0:0	5	ret
water	62:4	0:0	4	}
water	65:4	0:0	2	c
op	65:5	0:0	2	->
water	65:7	0:0	2	pts_stream_index
op	65:24	0:0	2	=
water	65:26	0:0	2	0
water	65:27	0:0	2	;
for	66:4	71:4	2	(i = 0 ;i < c -> stream -> nb_streams;i ++)
forinit	66:8	66:11	3	i = 0 ;
water	66:8	0:0	4	i
op	66:9	0:0	4	=
water	66:10	0:0	4	0
water	66:11	0:0	4	;
cond	66:12	66:25	3	i < c -> stream -> nb_streams
water	66:12	0:0	4	i
op	66:13	0:0	4	<
water	66:14	0:0	4	c
op	66:15	0:0	4	->
water	66:17	0:0	4	stream
op	66:23	0:0	4	->
water	66:25	0:0	4	nb_streams
forexpr	66:36	66:37	3	i ++
water	66:36	0:0	4	i
op	66:37	0:0	4	++
stmts	66:41	71:4	3	
water	66:41	0:0	4	{
if	67:8	70:8	4	(c -> pts_stream_index == 0 && c -> stream -> streams [ i ] -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	67:12	68:56	5	c -> pts_stream_index == 0 && c -> stream -> streams [ i ] -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	67:12	0:0	6	c
op	67:13	0:0	6	->
water	67:15	0:0	6	pts_stream_index
op	67:32	0:0	6	==
water	67:35	0:0	6	0
op	67:37	0:0	6	&&
water	68:12	0:0	6	c
op	68:13	0:0	6	->
water	68:15	0:0	6	stream
op	68:21	0:0	6	->
water	68:23	0:0	6	streams
op	68:30	0:0	6	[
water	68:31	0:0	6	i
op	68:32	0:0	6	]
op	68:33	0:0	6	->
water	68:35	0:0	6	codec
op	68:40	0:0	6	->
water	68:42	0:0	6	codec_type
op	68:53	0:0	6	==
water	68:56	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	68:76	70:8	5	
water	68:76	0:0	6	{
water	69:12	0:0	6	c
op	69:13	0:0	6	->
water	69:15	0:0	6	pts_stream_index
op	69:32	0:0	6	=
water	69:34	0:0	6	i
water	69:35	0:0	6	;
water	70:8	0:0	6	}
water	71:4	0:0	4	}
if	72:4	73:51	2	(c -> fmt_in -> iformat -> read_seek)
cond	72:8	72:28	3	c -> fmt_in -> iformat -> read_seek
water	72:8	0:0	4	c
op	72:9	0:0	4	->
water	72:11	0:0	4	fmt_in
op	72:17	0:0	4	->
water	72:19	0:0	4	iformat
op	72:26	0:0	4	->
water	72:28	0:0	4	read_seek
stmts	73:8	73:51	3	
call	73:8	73:50	4	av_seek_frame
arg	73:22	73:31	5	c->fmt_in
water	73:22	0:0	6	c
op	73:23	0:0	6	->
water	73:25	0:0	6	fmt_in
arg	73:33	73:35	5	-1
op	73:33	0:0	6	-
water	73:34	0:0	6	1
arg	73:37	73:47	5	stream_pos
water	73:37	0:0	6	stream_pos
arg	73:49	73:50	5	0
water	73:49	0:0	6	0
water	73:51	0:0	4	;
water	75:4	0:0	2	c
op	75:5	0:0	2	->
water	75:7	0:0	2	start_time
op	75:18	0:0	2	=
water	75:20	0:0	2	cur_time
water	75:28	0:0	2	;
water	76:4	0:0	2	c
op	76:5	0:0	2	->
water	76:7	0:0	2	first_pts
op	76:17	0:0	2	=
water	76:19	0:0	2	AV_NOPTS_VALUE
water	76:33	0:0	2	;
return	77:4	77:12	2	0
water	77:11	0:0	3	0
