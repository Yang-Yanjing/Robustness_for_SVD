func	1:0	27:0	0	AVBufferRef *	av_frame_get_plane_buffer
params	1:38	0:0	1	
param	1:39	1:53	2	AVFrame *	frame
param	1:55	1:64	2	int	plane
stmnts	0:0	26:15	1	
decl	3:4	3:17	2	uint8_t	*data
decl	4:4	4:17	2	int	planes
water	4:14	0:0	2	,
decl	4:4	4:17	2	int	i
if	5:4	11:4	2	(frame -> nb_samples)
cond	5:8	5:15	3	frame -> nb_samples
water	5:8	0:0	4	frame
op	5:13	0:0	4	->
water	5:15	0:0	4	nb_samples
stmts	5:27	11:4	3	
water	5:27	0:0	4	{
decl	6:8	6:38	4	int	channels
op	6:21	0:0	4	=
water	6:23	0:0	4	frame
op	6:28	0:0	4	->
water	6:30	0:0	4	channels
if	7:8	8:23	4	(! channels)
cond	7:12	7:13	5	! channels
op	7:12	0:0	6	!
water	7:13	0:0	6	channels
stmts	8:12	8:23	5	
return	8:12	8:23	6	NULL
water	8:19	0:0	7	NULL
call	9:8	9:40	4	CHECK_CHANNELS_CONSISTENCY
arg	9:35	9:40	5	frame
water	9:35	0:0	6	frame
water	9:41	0:0	4	;
water	10:8	0:0	4	planes
op	10:15	0:0	4	=
call	10:17	10:54	4	av_sample_fmt_is_planar
arg	10:41	10:54	5	frame->format
water	10:41	0:0	6	frame
op	10:46	0:0	6	->
water	10:48	0:0	6	format
water	10:56	0:0	4	?
water	10:58	0:0	4	channels
water	10:67	0:0	4	:
water	10:69	0:0	4	1
water	10:70	0:0	4	;
water	11:4	0:0	4	}
else	11:6	12:18	2
stmts	12:8	12:18	3	
water	12:8	0:0	4	planes
op	12:15	0:0	4	=
water	12:17	0:0	4	4
water	12:18	0:0	4	;
if	13:4	14:19	2	(plane < 0 || plane >= planes || ! frame -> extended_data [ plane ])
cond	13:8	13:67	3	plane < 0 || plane >= planes || ! frame -> extended_data [ plane ]
water	13:8	0:0	4	plane
op	13:14	0:0	4	<
water	13:16	0:0	4	0
op	13:18	0:0	4	||
water	13:21	0:0	4	plane
op	13:27	0:0	4	>=
water	13:30	0:0	4	planes
op	13:37	0:0	4	||
op	13:40	0:0	4	!
water	13:41	0:0	4	frame
op	13:46	0:0	4	->
water	13:48	0:0	4	extended_data
op	13:61	0:0	4	[
water	13:62	0:0	4	plane
op	13:67	0:0	4	]
stmts	14:8	14:19	3	
return	14:8	14:19	4	NULL
water	14:15	0:0	5	NULL
water	15:4	0:0	2	data
op	15:9	0:0	2	=
water	15:11	0:0	2	frame
op	15:16	0:0	2	->
water	15:18	0:0	2	extended_data
op	15:31	0:0	2	[
water	15:32	0:0	2	plane
op	15:37	0:0	2	]
water	15:38	0:0	2	;
for	16:4	20:4	2	(i = 0 ;i <FF_ARRAY_ELEMS (frame -> buf ) && frame -> buf [ i ];i ++)
forinit	16:9	16:14	3	i = 0 ;
water	16:9	0:0	4	i
op	16:11	0:0	4	=
water	16:13	0:0	4	0
water	16:14	0:0	4	;
cond	16:16	16:62	3	i <FF_ARRAY_ELEMS (frame -> buf ) && frame -> buf [ i ]
water	16:16	0:0	4	i
op	16:18	0:0	4	<
call	16:20	16:45	4	FF_ARRAY_ELEMS
arg	16:35	16:45	5	frame->buf
water	16:35	0:0	6	frame
op	16:40	0:0	6	->
water	16:42	0:0	6	buf
op	16:47	0:0	4	&&
water	16:50	0:0	4	frame
op	16:55	0:0	4	->
water	16:57	0:0	4	buf
op	16:60	0:0	4	[
water	16:61	0:0	4	i
op	16:62	0:0	4	]
forexpr	16:65	16:66	3	i ++
water	16:65	0:0	4	i
op	16:66	0:0	4	++
stmts	16:70	20:4	3	
water	16:70	0:0	4	{
decl	17:8	17:40	4	AVBufferRef	*buf
op	17:25	0:0	4	=
water	17:27	0:0	4	frame
op	17:32	0:0	4	->
water	17:34	0:0	4	buf
op	17:37	0:0	4	[
water	17:38	0:0	4	i
op	17:39	0:0	4	]
if	18:8	19:22	4	(data >= buf -> data && data < buf -> data + buf -> size)
cond	18:12	18:57	5	data >= buf -> data && data < buf -> data + buf -> size
water	18:12	0:0	6	data
op	18:17	0:0	6	>=
water	18:20	0:0	6	buf
op	18:23	0:0	6	->
water	18:25	0:0	6	data
op	18:30	0:0	6	&&
water	18:33	0:0	6	data
op	18:38	0:0	6	<
water	18:40	0:0	6	buf
op	18:43	0:0	6	->
water	18:45	0:0	6	data
op	18:50	0:0	6	+
water	18:52	0:0	6	buf
op	18:55	0:0	6	->
water	18:57	0:0	6	size
stmts	19:12	19:22	5	
return	19:12	19:22	6	buf
water	19:19	0:0	7	buf
water	20:4	0:0	4	}
for	21:4	25:4	2	(i = 0 ;i < frame -> nb_extended_buf;i ++)
forinit	21:9	21:14	3	i = 0 ;
water	21:9	0:0	4	i
op	21:11	0:0	4	=
water	21:13	0:0	4	0
water	21:14	0:0	4	;
cond	21:16	21:27	3	i < frame -> nb_extended_buf
water	21:16	0:0	4	i
op	21:18	0:0	4	<
water	21:20	0:0	4	frame
op	21:25	0:0	4	->
water	21:27	0:0	4	nb_extended_buf
forexpr	21:44	21:45	3	i ++
water	21:44	0:0	4	i
op	21:45	0:0	4	++
stmts	21:49	25:4	3	
water	21:49	0:0	4	{
decl	22:8	22:49	4	AVBufferRef	*buf
op	22:25	0:0	4	=
water	22:27	0:0	4	frame
op	22:32	0:0	4	->
water	22:34	0:0	4	extended_buf
op	22:46	0:0	4	[
water	22:47	0:0	4	i
op	22:48	0:0	4	]
if	23:8	24:22	4	(data >= buf -> data && data < buf -> data + buf -> size)
cond	23:12	23:57	5	data >= buf -> data && data < buf -> data + buf -> size
water	23:12	0:0	6	data
op	23:17	0:0	6	>=
water	23:20	0:0	6	buf
op	23:23	0:0	6	->
water	23:25	0:0	6	data
op	23:30	0:0	6	&&
water	23:33	0:0	6	data
op	23:38	0:0	6	<
water	23:40	0:0	6	buf
op	23:43	0:0	6	->
water	23:45	0:0	6	data
op	23:50	0:0	6	+
water	23:52	0:0	6	buf
op	23:55	0:0	6	->
water	23:57	0:0	6	size
stmts	24:12	24:22	5	
return	24:12	24:22	6	buf
water	24:19	0:0	7	buf
water	25:4	0:0	4	}
return	26:4	26:15	2	NULL
water	26:11	0:0	3	NULL
