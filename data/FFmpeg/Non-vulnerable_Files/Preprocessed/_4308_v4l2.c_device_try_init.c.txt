func	1:0	45:0	0	static int	device_try_init
params	1:26	0:0	1	
param	1:27	1:47	2	AVFormatContext *	ctx
param	2:27	2:53	2	enum AVPixelFormat	pix_fmt
param	3:27	3:37	2	int *	width
param	4:27	4:38	2	int *	height
param	5:27	5:51	2	uint32_t *	desired_format
param	6:27	6:51	2	enum AVCodecID *	codec_id
stmnts	0:0	44:14	1	
decl	8:4	8:14	2	int	ret
water	8:11	0:0	2	,
decl	8:4	8:14	2	int	i
op	9:4	0:0	2	*
water	9:5	0:0	2	desired_format
op	9:20	0:0	2	=
call	9:22	9:64	2	ff_fmt_ff2v4l
arg	9:36	9:43	3	pix_fmt
water	9:36	0:0	4	pix_fmt
arg	9:45	9:64	3	ctx->video_codec_id
water	9:45	0:0	4	ctx
op	9:48	0:0	4	->
water	9:50	0:0	4	video_codec_id
water	9:65	0:0	2	;
if	10:4	17:4	2	(* desired_format)
cond	10:8	10:9	3	* desired_format
op	10:8	0:0	4	*
water	10:9	0:0	4	desired_format
stmts	10:25	17:4	3	
water	10:25	0:0	4	{
water	11:8	0:0	4	ret
op	11:12	0:0	4	=
call	11:14	11:61	4	device_init
arg	11:26	11:29	5	ctx
water	11:26	0:0	6	ctx
arg	11:31	11:36	5	width
water	11:31	0:0	6	width
arg	11:38	11:44	5	height
water	11:38	0:0	6	height
arg	11:46	11:61	5	*desired_format
op	11:46	0:0	6	*
water	11:47	0:0	6	desired_format
water	11:62	0:0	4	;
if	12:8	16:8	4	(ret < 0)
cond	12:12	12:18	5	ret < 0
water	12:12	0:0	6	ret
op	12:16	0:0	6	<
water	12:18	0:0	6	0
stmts	12:21	16:8	5	
water	12:21	0:0	6	{
op	13:12	0:0	6	*
water	13:13	0:0	6	desired_format
op	13:28	0:0	6	=
water	13:30	0:0	6	0
water	13:31	0:0	6	;
if	14:12	15:26	6	(ret !=AVERROR (EINVAL ))
cond	14:16	14:37	7	ret !=AVERROR (EINVAL )
water	14:16	0:0	8	ret
op	14:20	0:0	8	!=
call	14:23	14:37	8	AVERROR
arg	14:31	14:37	9	EINVAL
water	14:31	0:0	10	EINVAL
stmts	15:16	15:26	7	
return	15:16	15:26	8	ret
water	15:23	0:0	9	ret
water	16:8	0:0	6	}
water	17:4	0:0	4	}
if	18:4	41:4	2	(! * desired_format)
cond	18:8	18:10	3	! * desired_format
op	18:8	0:0	4	!
op	18:9	0:0	4	*
water	18:10	0:0	4	desired_format
stmts	18:26	41:4	3	
water	18:26	0:0	4	{
for	19:8	33:8	4	(i = 0 ;ff_fmt_conversion_table [ i ] . codec_id != AV_CODEC_ID_NONE;i ++)
forinit	19:13	19:18	5	i = 0 ;
water	19:13	0:0	6	i
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:59	5	ff_fmt_conversion_table [ i ] . codec_id != AV_CODEC_ID_NONE
water	19:20	0:0	6	ff_fmt_conversion_table
op	19:43	0:0	6	[
water	19:44	0:0	6	i
op	19:45	0:0	6	]
op	19:46	0:0	6	.
water	19:47	0:0	6	codec_id
op	19:56	0:0	6	!=
water	19:59	0:0	6	AV_CODEC_ID_NONE
forexpr	19:77	19:78	5	i ++
water	19:77	0:0	6	i
op	19:78	0:0	6	++
stmts	19:82	33:8	5	
water	19:82	0:0	6	{
if	20:12	32:12	6	(ctx -> video_codec_id == AV_CODEC_ID_NONE || ff_fmt_conversion_table [ i ] . codec_id == ctx -> video_codec_id)
cond	20:16	21:60	7	ctx -> video_codec_id == AV_CODEC_ID_NONE || ff_fmt_conversion_table [ i ] . codec_id == ctx -> video_codec_id
water	20:16	0:0	8	ctx
op	20:19	0:0	8	->
water	20:21	0:0	8	video_codec_id
op	20:36	0:0	8	==
water	20:39	0:0	8	AV_CODEC_ID_NONE
op	20:56	0:0	8	||
water	21:16	0:0	8	ff_fmt_conversion_table
op	21:39	0:0	8	[
water	21:40	0:0	8	i
op	21:41	0:0	8	]
op	21:42	0:0	8	.
water	21:43	0:0	8	codec_id
op	21:52	0:0	8	==
water	21:55	0:0	8	ctx
op	21:58	0:0	8	->
water	21:60	0:0	8	video_codec_id
stmts	21:76	32:12	7	
water	21:76	0:0	8	{
call	22:16	24:107	8	av_log
arg	22:23	22:26	9	ctx
water	22:23	0:0	10	ctx
arg	22:28	22:40	9	AV_LOG_DEBUG
water	22:28	0:0	10	AV_LOG_DEBUG
arg	22:42	22:79	9	"Trying to set codec:%s pix_fmt:%s\n"
water	22:42	0:0	10	"Trying to set codec:%s pix_fmt:%s\n"
arg	23:23	23:76	9	avcodec_get_name(ff_fmt_conversion_table[i].codec_id)
call	23:23	23:75	10	avcodec_get_name
arg	23:40	23:75	11	ff_fmt_conversion_table[i].codec_id
water	23:40	0:0	12	ff_fmt_conversion_table
op	23:63	0:0	12	[
water	23:64	0:0	12	i
op	23:65	0:0	12	]
op	23:66	0:0	12	.
water	23:67	0:0	12	codec_id
arg	24:23	24:107	9	(char*)av_x_if_null(av_get_pix_fmt_name(ff_fmt_conversion_table[i].ff_fmt),"none")
water	24:23	0:0	10	(
water	24:24	0:0	10	char
op	24:29	0:0	10	*
water	24:30	0:0	10	)
call	24:31	24:106	10	av_x_if_null
arg	24:44	24:98	11	av_get_pix_fmt_name(ff_fmt_conversion_table[i].ff_fmt)
call	24:44	24:97	12	av_get_pix_fmt_name
arg	24:64	24:97	13	ff_fmt_conversion_table[i].ff_fmt
water	24:64	0:0	14	ff_fmt_conversion_table
op	24:87	0:0	14	[
water	24:88	0:0	14	i
op	24:89	0:0	14	]
op	24:90	0:0	14	.
water	24:91	0:0	14	ff_fmt
arg	24:100	24:106	11	"none"
water	24:100	0:0	12	"none"
water	24:108	0:0	8	;
op	25:16	0:0	8	*
water	25:17	0:0	8	desired_format
op	25:32	0:0	8	=
water	25:34	0:0	8	ff_fmt_conversion_table
op	25:57	0:0	8	[
water	25:58	0:0	8	i
op	25:59	0:0	8	]
op	25:60	0:0	8	.
water	25:61	0:0	8	v4l2_fmt
water	25:69	0:0	8	;
water	26:16	0:0	8	ret
op	26:20	0:0	8	=
call	26:22	26:69	8	device_init
arg	26:34	26:37	9	ctx
water	26:34	0:0	10	ctx
arg	26:39	26:44	9	width
water	26:39	0:0	10	width
arg	26:46	26:52	9	height
water	26:46	0:0	10	height
arg	26:54	26:69	9	*desired_format
op	26:54	0:0	10	*
water	26:55	0:0	10	desired_format
water	26:70	0:0	8	;
if	27:16	28:25	8	(ret >= 0)
cond	27:20	27:27	9	ret >= 0
water	27:20	0:0	10	ret
op	27:24	0:0	10	>=
water	27:27	0:0	10	0
stmts	28:20	28:25	9	
break	28:20	28:25	10	
else	29:16	30:30	8
stmts	29:21	30:30	9	
if	29:21	30:30	10	(ret !=AVERROR (EINVAL ))
cond	29:25	29:46	11	ret !=AVERROR (EINVAL )
water	29:25	0:0	12	ret
op	29:29	0:0	12	!=
call	29:32	29:46	12	AVERROR
arg	29:40	29:46	13	EINVAL
water	29:40	0:0	14	EINVAL
stmts	30:20	30:30	11	
return	30:20	30:30	12	ret
water	30:27	0:0	13	ret
op	31:16	0:0	8	*
water	31:17	0:0	8	desired_format
op	31:32	0:0	8	=
water	31:34	0:0	8	0
water	31:35	0:0	8	;
water	32:12	0:0	8	}
water	33:8	0:0	6	}
if	34:8	40:8	4	(* desired_format == 0)
cond	34:12	34:31	5	* desired_format == 0
op	34:12	0:0	6	*
water	34:13	0:0	6	desired_format
op	34:28	0:0	6	==
water	34:31	0:0	6	0
stmts	34:34	40:8	5	
water	34:34	0:0	6	{
call	35:12	38:86	6	av_log
arg	35:19	35:22	7	ctx
water	35:19	0:0	8	ctx
arg	35:24	35:36	7	AV_LOG_ERROR
water	35:24	0:0	8	AV_LOG_ERROR
arg	35:38	36:68	7	"Cannot find a proper format for ""codec '%s' (id %d), pixel format '%s' (id %d)\n"
water	35:38	0:0	8	"Cannot find a proper format for "
water	36:19	0:0	8	"codec '%s' (id %d), pixel format '%s' (id %d)\n"
arg	37:19	37:56	7	avcodec_get_name(ctx->video_codec_id)
call	37:19	37:55	8	avcodec_get_name
arg	37:36	37:55	9	ctx->video_codec_id
water	37:36	0:0	10	ctx
op	37:39	0:0	10	->
water	37:41	0:0	10	video_codec_id
arg	37:58	37:77	7	ctx->video_codec_id
water	37:58	0:0	8	ctx
op	37:61	0:0	8	->
water	37:63	0:0	8	video_codec_id
arg	38:19	38:77	7	(char*)av_x_if_null(av_get_pix_fmt_name(pix_fmt),"none")
water	38:19	0:0	8	(
water	38:20	0:0	8	char
op	38:25	0:0	8	*
water	38:26	0:0	8	)
call	38:27	38:76	8	av_x_if_null
arg	38:40	38:68	9	av_get_pix_fmt_name(pix_fmt)
call	38:40	38:67	10	av_get_pix_fmt_name
arg	38:60	38:67	11	pix_fmt
water	38:60	0:0	12	pix_fmt
arg	38:70	38:76	9	"none"
water	38:70	0:0	10	"none"
arg	38:79	38:86	7	pix_fmt
water	38:79	0:0	8	pix_fmt
water	38:87	0:0	6	;
water	39:12	0:0	6	ret
op	39:16	0:0	6	=
call	39:18	39:32	6	AVERROR
arg	39:26	39:32	7	EINVAL
water	39:26	0:0	8	EINVAL
water	39:33	0:0	6	;
water	40:8	0:0	6	}
water	41:4	0:0	4	}
op	42:4	0:0	2	*
water	42:5	0:0	2	codec_id
op	42:14	0:0	2	=
call	42:16	42:48	2	ff_fmt_v4l2codec
arg	42:33	42:48	3	*desired_format
op	42:33	0:0	4	*
water	42:34	0:0	4	desired_format
water	42:49	0:0	2	;
call	43:4	43:44	2	av_assert0
arg	43:15	43:44	3	*codec_id!=AV_CODEC_ID_NONE
op	43:15	0:0	4	*
water	43:16	0:0	4	codec_id
op	43:25	0:0	4	!=
water	43:28	0:0	4	AV_CODEC_ID_NONE
water	43:45	0:0	2	;
return	44:4	44:14	2	ret
water	44:11	0:0	3	ret
