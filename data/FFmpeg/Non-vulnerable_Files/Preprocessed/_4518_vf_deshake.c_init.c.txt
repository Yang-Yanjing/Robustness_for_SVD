func	1:15	40:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	39:12	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:39	2	DeshakeContext	*deshake
op	4:28	0:0	2	=
water	4:30	0:0	2	ctx
op	4:33	0:0	2	->
water	4:35	0:0	2	priv
water	5:4	0:0	2	deshake
op	5:11	0:0	2	->
water	5:13	0:0	2	sad
op	5:17	0:0	2	=
call	5:19	5:60	2	av_pixelutils_get_sad_fn
arg	5:44	5:45	3	4
water	5:44	0:0	4	4
arg	5:47	5:48	3	4
water	5:47	0:0	4	4
arg	5:50	5:51	3	1
water	5:50	0:0	4	1
arg	5:53	5:60	3	deshake
water	5:53	0:0	4	deshake
water	5:61	0:0	2	;
if	6:4	7:30	2	(! deshake -> sad)
cond	6:8	6:18	3	! deshake -> sad
op	6:8	0:0	4	!
water	6:9	0:0	4	deshake
op	6:16	0:0	4	->
water	6:18	0:0	4	sad
stmts	7:8	7:30	3	
return	7:8	7:30	4	AVERROR(EINVAL)
call	7:15	7:29	5	AVERROR
arg	7:23	7:29	6	EINVAL
water	7:23	0:0	7	EINVAL
water	8:4	0:0	2	deshake
op	8:11	0:0	2	->
water	8:13	0:0	2	refcount
op	8:22	0:0	2	=
water	8:24	0:0	2	20
water	8:26	0:0	2	;
water	9:4	0:0	2	deshake
op	9:11	0:0	2	->
water	9:13	0:0	2	blocksize
op	9:23	0:0	2	/=
water	9:26	0:0	2	2
water	9:27	0:0	2	;
water	10:4	0:0	2	deshake
op	10:11	0:0	2	->
water	10:13	0:0	2	blocksize
op	10:23	0:0	2	=
call	10:25	10:59	2	av_clip
arg	10:33	10:51	3	deshake->blocksize
water	10:33	0:0	4	deshake
op	10:40	0:0	4	->
water	10:42	0:0	4	blocksize
arg	10:53	10:54	3	4
water	10:53	0:0	4	4
arg	10:56	10:59	3	128
water	10:56	0:0	4	128
water	10:60	0:0	2	;
if	11:4	14:4	2	(deshake -> rx % 16)
cond	11:8	11:22	3	deshake -> rx % 16
water	11:8	0:0	4	deshake
op	11:15	0:0	4	->
water	11:17	0:0	4	rx
op	11:20	0:0	4	%
water	11:22	0:0	4	16
stmts	11:26	14:4	3	
water	11:26	0:0	4	{
call	12:8	12:65	4	av_log
arg	12:15	12:18	5	ctx
water	12:15	0:0	6	ctx
arg	12:20	12:32	5	AV_LOG_ERROR
water	12:20	0:0	6	AV_LOG_ERROR
arg	12:34	12:65	5	"rx must be a multiple of 16\n"
water	12:34	0:0	6	"rx must be a multiple of 16\n"
water	12:66	0:0	4	;
return	13:8	13:35	4	AVERROR_PATCHWELCOME
water	13:15	0:0	5	AVERROR_PATCHWELCOME
water	14:4	0:0	4	}
if	15:4	16:51	2	(deshake -> filename)
cond	15:8	15:17	3	deshake -> filename
water	15:8	0:0	4	deshake
op	15:15	0:0	4	->
water	15:17	0:0	4	filename
stmts	16:8	16:51	3	
water	16:8	0:0	4	deshake
op	16:15	0:0	4	->
water	16:17	0:0	4	fp
op	16:20	0:0	4	=
call	16:22	16:50	4	fopen
arg	16:28	16:45	5	deshake->filename
water	16:28	0:0	6	deshake
op	16:35	0:0	6	->
water	16:37	0:0	6	filename
arg	16:47	16:50	5	"w"
water	16:47	0:0	6	"w"
water	16:51	0:0	4	;
if	17:4	18:155	2	(deshake -> fp)
cond	17:8	17:17	3	deshake -> fp
water	17:8	0:0	4	deshake
op	17:15	0:0	4	->
water	17:17	0:0	4	fp
stmts	18:8	18:155	3	
call	18:8	18:154	4	fwrite
arg	18:15	18:122	5	"Ori x, Avg x, Fin x, Ori y, Avg y, Fin y, Ori angle, Avg angle, Fin angle, Ori zoom, Avg zoom, Fin zoom\n"
water	18:15	0:0	6	"Ori x, Avg x, Fin x, Ori y, Avg y, Fin y, Ori angle, Avg angle, Fin angle, Ori zoom, Avg zoom, Fin zoom\n"
arg	18:124	18:136	5	sizeof(char)
op	18:124	0:0	6	sizeof
water	18:130	0:0	6	(
water	18:131	0:0	6	char
water	18:135	0:0	6	)
arg	18:138	18:141	5	104
water	18:138	0:0	6	104
arg	18:143	18:154	5	deshake->fp
water	18:143	0:0	6	deshake
op	18:150	0:0	6	->
water	18:152	0:0	6	fp
water	18:155	0:0	4	;
if	21:4	24:4	2	(deshake -> cx > 0)
cond	21:8	21:22	3	deshake -> cx > 0
water	21:8	0:0	4	deshake
op	21:15	0:0	4	->
water	21:17	0:0	4	cx
op	21:20	0:0	4	>
water	21:22	0:0	4	0
stmts	21:25	24:4	3	
water	21:25	0:0	4	{
water	22:8	0:0	4	deshake
op	22:15	0:0	4	->
water	22:17	0:0	4	cw
op	22:20	0:0	4	+=
water	22:23	0:0	4	deshake
op	22:30	0:0	4	->
water	22:32	0:0	4	cx
op	22:35	0:0	4	-
water	22:37	0:0	4	(
water	22:38	0:0	4	deshake
op	22:45	0:0	4	->
water	22:47	0:0	4	cx
op	22:50	0:0	4	&
water	22:52	0:0	4	~15
water	22:55	0:0	4	)
water	22:56	0:0	4	;
water	23:8	0:0	4	deshake
op	23:15	0:0	4	->
water	23:17	0:0	4	cx
op	23:20	0:0	4	&=
water	23:23	0:0	4	~15
water	23:26	0:0	4	;
water	24:4	0:0	4	}
water	25:4	0:0	2	deshake
op	25:11	0:0	2	->
water	25:13	0:0	2	transform
op	25:23	0:0	2	=
water	25:25	0:0	2	deshake_transform_c
water	25:44	0:0	2	;
if	26:4	29:4	2	(! CONFIG_OPENCL && deshake -> opencl)
cond	26:8	26:35	3	! CONFIG_OPENCL && deshake -> opencl
op	26:8	0:0	4	!
water	26:9	0:0	4	CONFIG_OPENCL
op	26:23	0:0	4	&&
water	26:26	0:0	4	deshake
op	26:33	0:0	4	->
water	26:35	0:0	4	opencl
stmts	26:43	29:4	3	
water	26:43	0:0	4	{
call	27:8	27:102	4	av_log
arg	27:15	27:18	5	ctx
water	27:15	0:0	6	ctx
arg	27:20	27:32	5	AV_LOG_ERROR
water	27:20	0:0	6	AV_LOG_ERROR
arg	27:34	27:102	5	"OpenCL support was not enabled in this build, cannot be selected\n"
water	27:34	0:0	6	"OpenCL support was not enabled in this build, cannot be selected\n"
water	27:103	0:0	4	;
return	28:8	28:30	4	AVERROR(EINVAL)
call	28:15	28:29	5	AVERROR
arg	28:23	28:29	6	EINVAL
water	28:23	0:0	7	EINVAL
water	29:4	0:0	4	}
if	30:4	35:4	2	(CONFIG_OPENCL && deshake -> opencl)
cond	30:8	30:34	3	CONFIG_OPENCL && deshake -> opencl
water	30:8	0:0	4	CONFIG_OPENCL
op	30:22	0:0	4	&&
water	30:25	0:0	4	deshake
op	30:32	0:0	4	->
water	30:34	0:0	4	opencl
stmts	30:42	35:4	3	
water	30:42	0:0	4	{
water	31:8	0:0	4	deshake
op	31:15	0:0	4	->
water	31:17	0:0	4	transform
op	31:27	0:0	4	=
water	31:29	0:0	4	ff_opencl_transform
water	31:48	0:0	4	;
water	32:8	0:0	4	ret
op	32:12	0:0	4	=
call	32:14	32:40	4	ff_opencl_deshake_init
arg	32:37	32:40	5	ctx
water	32:37	0:0	6	ctx
water	32:41	0:0	4	;
if	33:8	34:22	4	(ret < 0)
cond	33:12	33:18	5	ret < 0
water	33:12	0:0	6	ret
op	33:16	0:0	6	<
water	33:18	0:0	6	0
stmts	34:12	34:22	5	
return	34:12	34:22	6	ret
water	34:19	0:0	7	ret
water	35:4	0:0	4	}
call	36:4	38:110	2	av_log
arg	36:11	36:14	3	ctx
water	36:11	0:0	4	ctx
arg	36:16	36:30	3	AV_LOG_VERBOSE
water	36:16	0:0	4	AV_LOG_VERBOSE
arg	36:32	36:130	3	"cx: %d, cy: %d, cw: %d, ch: %d, rx: %d, ry: %d, edge: %d blocksize: %d contrast: %d search: %d\n"
water	36:32	0:0	4	"cx: %d, cy: %d, cw: %d, ch: %d, rx: %d, ry: %d, edge: %d blocksize: %d contrast: %d search: %d\n"
arg	37:11	37:22	3	deshake->cx
water	37:11	0:0	4	deshake
op	37:18	0:0	4	->
water	37:20	0:0	4	cx
arg	37:24	37:35	3	deshake->cy
water	37:24	0:0	4	deshake
op	37:31	0:0	4	->
water	37:33	0:0	4	cy
arg	37:37	37:48	3	deshake->cw
water	37:37	0:0	4	deshake
op	37:44	0:0	4	->
water	37:46	0:0	4	cw
arg	37:50	37:61	3	deshake->ch
water	37:50	0:0	4	deshake
op	37:57	0:0	4	->
water	37:59	0:0	4	ch
arg	38:11	38:22	3	deshake->rx
water	38:11	0:0	4	deshake
op	38:18	0:0	4	->
water	38:20	0:0	4	rx
arg	38:24	38:35	3	deshake->ry
water	38:24	0:0	4	deshake
op	38:31	0:0	4	->
water	38:33	0:0	4	ry
arg	38:37	38:50	3	deshake->edge
water	38:37	0:0	4	deshake
op	38:44	0:0	4	->
water	38:46	0:0	4	edge
arg	38:52	38:74	3	deshake->blocksize*2
water	38:52	0:0	4	deshake
op	38:59	0:0	4	->
water	38:61	0:0	4	blocksize
op	38:71	0:0	4	*
water	38:73	0:0	4	2
arg	38:76	38:93	3	deshake->contrast
water	38:76	0:0	4	deshake
op	38:83	0:0	4	->
water	38:85	0:0	4	contrast
arg	38:95	38:110	3	deshake->search
water	38:95	0:0	4	deshake
op	38:102	0:0	4	->
water	38:104	0:0	4	search
water	38:111	0:0	2	;
return	39:4	39:12	2	0
water	39:11	0:0	3	0
