func	1:0	116:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	115:18	1	
decl	3:4	3:86	2	int64_t	src_ch_layout
op	3:26	0:0	2	=
water	3:28	0:0	2	AV_CH_LAYOUT_STEREO
water	3:47	0:0	2	,
decl	3:4	3:86	2	int64_t	dst_ch_layout
op	3:63	0:0	2	=
water	3:65	0:0	2	AV_CH_LAYOUT_SURROUND
decl	4:4	4:42	2	int	src_rate
op	4:17	0:0	2	=
water	4:19	0:0	2	48000
water	4:24	0:0	2	,
decl	4:4	4:42	2	int	dst_rate
op	4:35	0:0	2	=
water	4:37	0:0	2	44100
decl	5:4	5:48	2	uint8_t	**src_data
op	5:23	0:0	2	=
water	5:25	0:0	2	NULL
water	5:29	0:0	2	,
decl	5:4	5:48	2	uint8_t	**dst_data
op	5:42	0:0	2	=
water	5:44	0:0	2	NULL
decl	6:4	6:48	2	int	src_nb_channels
op	6:24	0:0	2	=
water	6:26	0:0	2	0
water	6:27	0:0	2	,
decl	6:4	6:48	2	int	dst_nb_channels
op	6:45	0:0	2	=
water	6:47	0:0	2	0
decl	7:4	7:34	2	int	src_linesize
water	7:20	0:0	2	,
decl	7:4	7:34	2	int	dst_linesize
decl	8:4	8:65	2	int	src_nb_samples
op	8:23	0:0	2	=
water	8:25	0:0	2	1024
water	8:29	0:0	2	,
decl	8:4	8:65	2	int	dst_nb_samples
water	8:45	0:0	2	,
decl	8:4	8:65	2	int	max_dst_nb_samples
decl	9:4	9:94	2	enum AVSampleFormat	src_sample_fmt
op	9:39	0:0	2	=
water	9:41	0:0	2	AV_SAMPLE_FMT_DBL
water	9:58	0:0	2	,
decl	9:4	9:94	2	enum AVSampleFormat	dst_sample_fmt
op	9:75	0:0	2	=
water	9:77	0:0	2	AV_SAMPLE_FMT_S16
decl	10:4	10:35	2	const char	*dst_filename
op	10:29	0:0	2	=
water	10:31	0:0	2	NULL
decl	11:4	11:18	2	FILE	*dst_file
decl	12:4	12:19	2	int	dst_bufsize
decl	13:4	13:19	2	const char	*fmt
decl	14:4	14:30	2	struct SwrContext	*swr_ctx
decl	15:4	15:12	2	double	t
decl	16:4	16:11	2	int	ret
if	17:4	24:4	2	(argc != 2)
cond	17:8	17:16	3	argc != 2
water	17:8	0:0	4	argc
op	17:13	0:0	4	!=
water	17:16	0:0	4	2
stmts	17:19	24:4	3	
water	17:19	0:0	4	{
call	18:8	22:19	4	fprintf
arg	18:16	18:22	5	stderr
water	18:16	0:0	6	stderr
arg	18:24	21:94	5	"Usage: %s output_file\n""API example program to show how to resample an audio stream with libswresample.\n""This program generates a series of audio frames, resamples them to a specified ""output format and rate and saves them to an output file named output_file.\n"
water	18:24	0:0	6	"Usage: %s output_file\n"
water	19:16	0:0	6	"API example program to show how to resample an audio stream with libswresample.\n"
water	20:16	0:0	6	"This program generates a series of audio frames, resamples them to a specified "
water	21:16	0:0	6	"output format and rate and saves them to an output file named output_file.\n"
arg	22:12	22:19	5	argv[0]
water	22:12	0:0	6	argv
op	22:16	0:0	6	[
water	22:17	0:0	6	0
op	22:18	0:0	6	]
water	22:20	0:0	4	;
call	23:8	23:14	4	exit
arg	23:13	23:14	5	1
water	23:13	0:0	6	1
water	23:15	0:0	4	;
water	24:4	0:0	4	}
water	25:4	0:0	2	dst_filename
op	25:17	0:0	2	=
water	25:19	0:0	2	argv
op	25:23	0:0	2	[
water	25:24	0:0	2	1
op	25:25	0:0	2	]
water	25:26	0:0	2	;
water	26:4	0:0	2	dst_file
op	26:13	0:0	2	=
call	26:15	26:39	2	fopen
arg	26:21	26:33	3	dst_filename
water	26:21	0:0	4	dst_filename
arg	26:35	26:39	3	"wb"
water	26:35	0:0	4	"wb"
water	26:40	0:0	2	;
if	27:4	30:4	2	(! dst_file)
cond	27:8	27:9	3	! dst_file
op	27:8	0:0	4	!
water	27:9	0:0	4	dst_file
stmts	27:19	30:4	3	
water	27:19	0:0	4	{
call	28:8	28:76	4	fprintf
arg	28:16	28:22	5	stderr
water	28:16	0:0	6	stderr
arg	28:24	28:62	5	"Could not open destination file %s\n"
water	28:24	0:0	6	"Could not open destination file %s\n"
arg	28:64	28:76	5	dst_filename
water	28:64	0:0	6	dst_filename
water	28:77	0:0	4	;
call	29:8	29:14	4	exit
arg	29:13	29:14	5	1
water	29:13	0:0	6	1
water	29:15	0:0	4	;
water	30:4	0:0	4	}
water	32:4	0:0	2	swr_ctx
op	32:12	0:0	2	=
call	32:14	32:24	2	swr_alloc
water	32:25	0:0	2	;
if	33:4	37:4	2	(! swr_ctx)
cond	33:8	33:9	3	! swr_ctx
op	33:8	0:0	4	!
water	33:9	0:0	4	swr_ctx
stmts	33:18	37:4	3	
water	33:18	0:0	4	{
call	34:8	34:64	4	fprintf
arg	34:16	34:22	5	stderr
water	34:16	0:0	6	stderr
arg	34:24	34:64	5	"Could not allocate resampler context\n"
water	34:24	0:0	6	"Could not allocate resampler context\n"
water	34:65	0:0	4	;
water	35:8	0:0	4	ret
op	35:12	0:0	4	=
call	35:14	35:28	4	AVERROR
arg	35:22	35:28	5	ENOMEM
water	35:22	0:0	6	ENOMEM
water	35:29	0:0	4	;
goto	36:8	36:16	4	end
water	36:13	0:0	5	end
water	37:4	0:0	4	}
call	39:4	39:68	2	av_opt_set_int
arg	39:19	39:26	3	swr_ctx
water	39:19	0:0	4	swr_ctx
arg	39:28	39:47	3	"in_channel_layout"
water	39:28	0:0	4	"in_channel_layout"
arg	39:52	39:65	3	src_ch_layout
water	39:52	0:0	4	src_ch_layout
arg	39:67	39:68	3	0
water	39:67	0:0	4	0
water	39:69	0:0	2	;
call	40:4	40:63	2	av_opt_set_int
arg	40:19	40:26	3	swr_ctx
water	40:19	0:0	4	swr_ctx
arg	40:28	40:44	3	"in_sample_rate"
water	40:28	0:0	4	"in_sample_rate"
arg	40:52	40:60	3	src_rate
water	40:52	0:0	4	src_rate
arg	40:62	40:63	3	0
water	40:62	0:0	4	0
water	40:64	0:0	2	;
call	41:4	41:69	2	av_opt_set_sample_fmt
arg	41:26	41:33	3	swr_ctx
water	41:26	0:0	4	swr_ctx
arg	41:35	41:50	3	"in_sample_fmt"
water	41:35	0:0	4	"in_sample_fmt"
arg	41:52	41:66	3	src_sample_fmt
water	41:52	0:0	4	src_sample_fmt
arg	41:68	41:69	3	0
water	41:68	0:0	4	0
water	41:70	0:0	2	;
call	42:4	42:69	2	av_opt_set_int
arg	42:19	42:26	3	swr_ctx
water	42:19	0:0	4	swr_ctx
arg	42:28	42:48	3	"out_channel_layout"
water	42:28	0:0	4	"out_channel_layout"
arg	42:53	42:66	3	dst_ch_layout
water	42:53	0:0	4	dst_ch_layout
arg	42:68	42:69	3	0
water	42:68	0:0	4	0
water	42:70	0:0	2	;
call	43:4	43:64	2	av_opt_set_int
arg	43:19	43:26	3	swr_ctx
water	43:19	0:0	4	swr_ctx
arg	43:28	43:45	3	"out_sample_rate"
water	43:28	0:0	4	"out_sample_rate"
arg	43:53	43:61	3	dst_rate
water	43:53	0:0	4	dst_rate
arg	43:63	43:64	3	0
water	43:63	0:0	4	0
water	43:65	0:0	2	;
call	44:4	44:70	2	av_opt_set_sample_fmt
arg	44:26	44:33	3	swr_ctx
water	44:26	0:0	4	swr_ctx
arg	44:35	44:51	3	"out_sample_fmt"
water	44:35	0:0	4	"out_sample_fmt"
arg	44:53	44:67	3	dst_sample_fmt
water	44:53	0:0	4	dst_sample_fmt
arg	44:69	44:70	3	0
water	44:69	0:0	4	0
water	44:71	0:0	2	;
if	46:4	49:4	2	(( ret =swr_init (swr_ctx ) ) < 0)
cond	46:8	46:36	3	( ret =swr_init (swr_ctx ) ) < 0
water	46:8	0:0	4	(
water	46:9	0:0	4	ret
op	46:13	0:0	4	=
call	46:15	46:31	4	swr_init
arg	46:24	46:31	5	swr_ctx
water	46:24	0:0	6	swr_ctx
water	46:32	0:0	4	)
op	46:34	0:0	4	<
water	46:36	0:0	4	0
stmts	46:39	49:4	3	
water	46:39	0:0	4	{
call	47:8	47:71	4	fprintf
arg	47:16	47:22	5	stderr
water	47:16	0:0	6	stderr
arg	47:24	47:71	5	"Failed to initialize the resampling context\n"
water	47:24	0:0	6	"Failed to initialize the resampling context\n"
water	47:72	0:0	4	;
goto	48:8	48:16	4	end
water	48:13	0:0	5	end
water	49:4	0:0	4	}
water	51:4	0:0	2	src_nb_channels
op	51:20	0:0	2	=
call	51:22	51:69	2	av_get_channel_layout_nb_channels
arg	51:56	51:69	3	src_ch_layout
water	51:56	0:0	4	src_ch_layout
water	51:70	0:0	2	;
water	52:4	0:0	2	ret
op	52:8	0:0	2	=
call	52:10	53:78	2	av_samples_alloc_array_and_samples
arg	52:45	52:54	3	&src_data
op	52:45	0:0	4	&
water	52:46	0:0	4	src_data
arg	52:56	52:69	3	&src_linesize
op	52:56	0:0	4	&
water	52:57	0:0	4	src_linesize
arg	52:71	52:86	3	src_nb_channels
water	52:71	0:0	4	src_nb_channels
arg	53:45	53:59	3	src_nb_samples
water	53:45	0:0	4	src_nb_samples
arg	53:61	53:75	3	src_sample_fmt
water	53:61	0:0	4	src_sample_fmt
arg	53:77	53:78	3	0
water	53:77	0:0	4	0
water	53:79	0:0	2	;
if	54:4	57:4	2	(ret < 0)
cond	54:8	54:14	3	ret < 0
water	54:8	0:0	4	ret
op	54:12	0:0	4	<
water	54:14	0:0	4	0
stmts	54:17	57:4	3	
water	54:17	0:0	4	{
call	55:8	55:61	4	fprintf
arg	55:16	55:22	5	stderr
water	55:16	0:0	6	stderr
arg	55:24	55:61	5	"Could not allocate source samples\n"
water	55:24	0:0	6	"Could not allocate source samples\n"
water	55:62	0:0	4	;
goto	56:8	56:16	4	end
water	56:13	0:0	5	end
water	57:4	0:0	4	}
water	61:4	0:0	2	max_dst_nb_samples
op	61:23	0:0	2	=
water	61:25	0:0	2	dst_nb_samples
op	61:40	0:0	2	=
call	62:8	62:70	2	av_rescale_rnd
arg	62:23	62:37	3	src_nb_samples
water	62:23	0:0	4	src_nb_samples
arg	62:39	62:47	3	dst_rate
water	62:39	0:0	4	dst_rate
arg	62:49	62:57	3	src_rate
water	62:49	0:0	4	src_rate
arg	62:59	62:70	3	AV_ROUND_UP
water	62:59	0:0	4	AV_ROUND_UP
water	62:71	0:0	2	;
water	64:4	0:0	2	dst_nb_channels
op	64:20	0:0	2	=
call	64:22	64:69	2	av_get_channel_layout_nb_channels
arg	64:56	64:69	3	dst_ch_layout
water	64:56	0:0	4	dst_ch_layout
water	64:70	0:0	2	;
water	65:4	0:0	2	ret
op	65:8	0:0	2	=
call	65:10	66:78	2	av_samples_alloc_array_and_samples
arg	65:45	65:54	3	&dst_data
op	65:45	0:0	4	&
water	65:46	0:0	4	dst_data
arg	65:56	65:69	3	&dst_linesize
op	65:56	0:0	4	&
water	65:57	0:0	4	dst_linesize
arg	65:71	65:86	3	dst_nb_channels
water	65:71	0:0	4	dst_nb_channels
arg	66:45	66:59	3	dst_nb_samples
water	66:45	0:0	4	dst_nb_samples
arg	66:61	66:75	3	dst_sample_fmt
water	66:61	0:0	4	dst_sample_fmt
arg	66:77	66:78	3	0
water	66:77	0:0	4	0
water	66:79	0:0	2	;
if	67:4	70:4	2	(ret < 0)
cond	67:8	67:14	3	ret < 0
water	67:8	0:0	4	ret
op	67:12	0:0	4	<
water	67:14	0:0	4	0
stmts	67:17	70:4	3	
water	67:17	0:0	4	{
call	68:8	68:66	4	fprintf
arg	68:16	68:22	5	stderr
water	68:16	0:0	6	stderr
arg	68:24	68:66	5	"Could not allocate destination samples\n"
water	68:24	0:0	6	"Could not allocate destination samples\n"
water	68:67	0:0	4	;
goto	69:8	69:16	4	end
water	69:13	0:0	5	end
water	70:4	0:0	4	}
water	71:4	0:0	2	t
op	71:6	0:0	2	=
water	71:8	0:0	2	0
water	71:9	0:0	2	;
do	72:4	100:4	2	(t < 10)
cond	100:13	100:17	3	t < 10
water	100:13	0:0	4	t
op	100:15	0:0	4	<
water	100:17	0:0	4	10
stmts	72:7	100:4	3	
water	72:7	0:0	4	{
call	74:8	74:89	4	fill_samples
arg	74:21	74:42	5	(double*)src_data[0]
water	74:21	0:0	6	(
water	74:22	0:0	6	double
op	74:29	0:0	6	*
water	74:30	0:0	6	)
water	74:31	0:0	6	src_data
op	74:39	0:0	6	[
water	74:40	0:0	6	0
op	74:41	0:0	6	]
arg	74:44	74:58	5	src_nb_samples
water	74:44	0:0	6	src_nb_samples
arg	74:60	74:75	5	src_nb_channels
water	74:60	0:0	6	src_nb_channels
arg	74:77	74:85	5	src_rate
water	74:77	0:0	6	src_rate
arg	74:87	74:89	5	&t
op	74:87	0:0	6	&
water	74:88	0:0	6	t
water	74:90	0:0	4	;
water	76:8	0:0	4	dst_nb_samples
op	76:23	0:0	4	=
call	76:25	77:87	4	av_rescale_rnd
arg	76:40	77:54	5	swr_get_delay(swr_ctx,src_rate)+src_nb_samples
call	76:40	76:71	6	swr_get_delay
arg	76:54	76:61	7	swr_ctx
water	76:54	0:0	8	swr_ctx
arg	76:63	76:71	7	src_rate
water	76:63	0:0	8	src_rate
op	76:73	0:0	6	+
water	77:40	0:0	6	src_nb_samples
arg	77:56	77:64	5	dst_rate
water	77:56	0:0	6	dst_rate
arg	77:66	77:74	5	src_rate
water	77:66	0:0	6	src_rate
arg	77:76	77:87	5	AV_ROUND_UP
water	77:76	0:0	6	AV_ROUND_UP
water	77:88	0:0	4	;
if	78:8	85:8	4	(dst_nb_samples > max_dst_nb_samples)
cond	78:12	78:29	5	dst_nb_samples > max_dst_nb_samples
water	78:12	0:0	6	dst_nb_samples
op	78:27	0:0	6	>
water	78:29	0:0	6	max_dst_nb_samples
stmts	78:49	85:8	5	
water	78:49	0:0	6	{
call	79:12	79:33	6	av_freep
arg	79:21	79:33	7	&dst_data[0]
op	79:21	0:0	8	&
water	79:22	0:0	8	dst_data
op	79:30	0:0	8	[
water	79:31	0:0	8	0
op	79:32	0:0	8	]
water	79:34	0:0	6	;
water	80:12	0:0	6	ret
op	80:16	0:0	6	=
call	80:18	81:68	6	av_samples_alloc
arg	80:35	80:43	7	dst_data
water	80:35	0:0	8	dst_data
arg	80:45	80:58	7	&dst_linesize
op	80:45	0:0	8	&
water	80:46	0:0	8	dst_linesize
arg	80:60	80:75	7	dst_nb_channels
water	80:60	0:0	8	dst_nb_channels
arg	81:35	81:49	7	dst_nb_samples
water	81:35	0:0	8	dst_nb_samples
arg	81:51	81:65	7	dst_sample_fmt
water	81:51	0:0	8	dst_sample_fmt
arg	81:67	81:68	7	1
water	81:67	0:0	8	1
water	81:69	0:0	6	;
if	82:12	83:21	6	(ret < 0)
cond	82:16	82:22	7	ret < 0
water	82:16	0:0	8	ret
op	82:20	0:0	8	<
water	82:22	0:0	8	0
stmts	83:16	83:21	7	
break	83:16	83:21	8	
water	84:12	0:0	6	max_dst_nb_samples
op	84:31	0:0	6	=
water	84:33	0:0	6	dst_nb_samples
water	84:47	0:0	6	;
water	85:8	0:0	6	}
water	87:8	0:0	4	ret
op	87:12	0:0	4	=
call	87:14	87:103	4	swr_convert
arg	87:26	87:33	5	swr_ctx
water	87:26	0:0	6	swr_ctx
arg	87:35	87:43	5	dst_data
water	87:35	0:0	6	dst_data
arg	87:45	87:59	5	dst_nb_samples
water	87:45	0:0	6	dst_nb_samples
arg	87:61	87:87	5	(constuint8_t**)src_data
water	87:61	0:0	6	(
water	87:62	0:0	6	const
water	87:68	0:0	6	uint8_t
op	87:76	0:0	6	*
op	87:77	0:0	6	*
water	87:78	0:0	6	)
water	87:79	0:0	6	src_data
arg	87:89	87:103	5	src_nb_samples
water	87:89	0:0	6	src_nb_samples
water	87:104	0:0	4	;
if	88:8	91:8	4	(ret < 0)
cond	88:12	88:18	5	ret < 0
water	88:12	0:0	6	ret
op	88:16	0:0	6	<
water	88:18	0:0	6	0
stmts	88:21	91:8	5	
water	88:21	0:0	6	{
call	89:12	89:54	6	fprintf
arg	89:20	89:26	7	stderr
water	89:20	0:0	8	stderr
arg	89:28	89:54	7	"Error while converting\n"
water	89:28	0:0	8	"Error while converting\n"
water	89:55	0:0	6	;
goto	90:12	90:20	6	end
water	90:17	0:0	7	end
water	91:8	0:0	6	}
water	92:8	0:0	4	dst_bufsize
op	92:20	0:0	4	=
call	92:22	93:71	4	av_samples_get_buffer_size
arg	92:49	92:62	5	&dst_linesize
op	92:49	0:0	6	&
water	92:50	0:0	6	dst_linesize
arg	92:64	92:79	5	dst_nb_channels
water	92:64	0:0	6	dst_nb_channels
arg	93:49	93:52	5	ret
water	93:49	0:0	6	ret
arg	93:54	93:68	5	dst_sample_fmt
water	93:54	0:0	6	dst_sample_fmt
arg	93:70	93:71	5	1
water	93:70	0:0	6	1
water	93:72	0:0	4	;
if	94:8	97:8	4	(dst_bufsize < 0)
cond	94:12	94:26	5	dst_bufsize < 0
water	94:12	0:0	6	dst_bufsize
op	94:24	0:0	6	<
water	94:26	0:0	6	0
stmts	94:29	97:8	5	
water	94:29	0:0	6	{
call	95:12	95:64	6	fprintf
arg	95:20	95:26	7	stderr
water	95:20	0:0	8	stderr
arg	95:28	95:64	7	"Could not get sample buffer size\n"
water	95:28	0:0	8	"Could not get sample buffer size\n"
water	95:65	0:0	6	;
goto	96:12	96:20	6	end
water	96:17	0:0	7	end
water	97:8	0:0	6	}
call	98:8	98:60	4	printf
arg	98:15	98:36	5	"t:%f in:%d out:%d\n"
water	98:15	0:0	6	"t:%f in:%d out:%d\n"
arg	98:38	98:39	5	t
water	98:38	0:0	6	t
arg	98:41	98:55	5	src_nb_samples
water	98:41	0:0	6	src_nb_samples
arg	98:57	98:60	5	ret
water	98:57	0:0	6	ret
water	98:61	0:0	4	;
call	99:8	99:52	4	fwrite
arg	99:15	99:26	5	dst_data[0]
water	99:15	0:0	6	dst_data
op	99:23	0:0	6	[
water	99:24	0:0	6	0
op	99:25	0:0	6	]
arg	99:28	99:29	5	1
water	99:28	0:0	6	1
arg	99:31	99:42	5	dst_bufsize
water	99:31	0:0	6	dst_bufsize
arg	99:44	99:52	5	dst_file
water	99:44	0:0	6	dst_file
water	99:53	0:0	4	;
water	100:4	0:0	4	}
water	100:20	0:0	2	;
if	101:4	102:16	2	(( ret =get_format_from_sample_fmt (& fmt ,dst_sample_fmt ) ) < 0)
cond	101:8	101:67	3	( ret =get_format_from_sample_fmt (& fmt ,dst_sample_fmt ) ) < 0
water	101:8	0:0	4	(
water	101:9	0:0	4	ret
op	101:13	0:0	4	=
call	101:15	101:62	4	get_format_from_sample_fmt
arg	101:42	101:46	5	&fmt
op	101:42	0:0	6	&
water	101:43	0:0	6	fmt
arg	101:48	101:62	5	dst_sample_fmt
water	101:48	0:0	6	dst_sample_fmt
water	101:63	0:0	4	)
op	101:65	0:0	4	<
water	101:67	0:0	4	0
stmts	102:8	102:16	3	
goto	102:8	102:16	4	end
water	102:13	0:0	5	end
call	103:4	105:71	2	fprintf
arg	103:12	103:18	3	stderr
water	103:12	0:0	4	stderr
arg	103:20	104:77	3	"Resampling succeeded. Play the output file with the command:\n""ffplay -f %s -channel_layout %"PRId64" -channels %d -ar %d %s\n"
water	103:20	0:0	4	"Resampling succeeded. Play the output file with the command:\n"
water	104:12	0:0	4	"ffplay -f %s -channel_layout %"
water	104:44	0:0	4	PRId64
water	104:50	0:0	4	" -channels %d -ar %d %s\n"
arg	105:12	105:15	3	fmt
water	105:12	0:0	4	fmt
arg	105:17	105:30	3	dst_ch_layout
water	105:17	0:0	4	dst_ch_layout
arg	105:32	105:47	3	dst_nb_channels
water	105:32	0:0	4	dst_nb_channels
arg	105:49	105:57	3	dst_rate
water	105:49	0:0	4	dst_rate
arg	105:59	105:71	3	dst_filename
water	105:59	0:0	4	dst_filename
water	105:72	0:0	2	;
label	106:0	106:3	2	end :
call	107:4	107:19	2	fclose
arg	107:11	107:19	3	dst_file
water	107:11	0:0	4	dst_file
water	107:20	0:0	2	;
if	108:4	109:30	2	(src_data)
cond	108:8	108:8	3	src_data
water	108:8	0:0	4	src_data
stmts	109:8	109:30	3	
call	109:8	109:29	4	av_freep
arg	109:17	109:29	5	&src_data[0]
op	109:17	0:0	6	&
water	109:18	0:0	6	src_data
op	109:26	0:0	6	[
water	109:27	0:0	6	0
op	109:28	0:0	6	]
water	109:30	0:0	4	;
call	110:4	110:22	2	av_freep
arg	110:13	110:22	3	&src_data
op	110:13	0:0	4	&
water	110:14	0:0	4	src_data
water	110:23	0:0	2	;
if	111:4	112:30	2	(dst_data)
cond	111:8	111:8	3	dst_data
water	111:8	0:0	4	dst_data
stmts	112:8	112:30	3	
call	112:8	112:29	4	av_freep
arg	112:17	112:29	5	&dst_data[0]
op	112:17	0:0	6	&
water	112:18	0:0	6	dst_data
op	112:26	0:0	6	[
water	112:27	0:0	6	0
op	112:28	0:0	6	]
water	112:30	0:0	4	;
call	113:4	113:22	2	av_freep
arg	113:13	113:22	3	&dst_data
op	113:13	0:0	4	&
water	113:14	0:0	4	dst_data
water	113:23	0:0	2	;
call	114:4	114:21	2	swr_free
arg	114:13	114:21	3	&swr_ctx
op	114:13	0:0	4	&
water	114:14	0:0	4	swr_ctx
water	114:22	0:0	2	;
return	115:4	115:18	2	ret<0
water	115:11	0:0	3	ret
op	115:15	0:0	3	<
water	115:17	0:0	3	0
