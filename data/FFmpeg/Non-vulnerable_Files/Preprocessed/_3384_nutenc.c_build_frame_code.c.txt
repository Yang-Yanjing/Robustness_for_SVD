func	1:0	118:0	0	static void	build_frame_code
params	1:28	0:0	1	
param	1:29	1:47	2	AVFormatContext *	s
stmnts	0:0	117:49	1	
decl	3:4	3:34	2	NUTContext	*nut
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:41	2	int	key_frame
water	4:17	0:0	2	,
decl	4:4	4:41	2	int	index
water	4:24	0:0	2	,
decl	4:4	4:41	2	int	pred
water	4:30	0:0	2	,
decl	4:4	4:41	2	int	stream_id
decl	5:4	5:17	2	int	start
op	5:14	0:0	2	=
water	5:16	0:0	2	1
decl	6:4	6:19	2	int	end
op	6:14	0:0	2	=
water	6:16	0:0	2	254
decl	7:4	7:42	2	int	keyframe_0_esc
op	7:23	0:0	2	=
water	7:25	0:0	2	s
op	7:26	0:0	2	->
water	7:28	0:0	2	nb_streams
op	7:39	0:0	2	>
water	7:41	0:0	2	2
decl	8:4	8:22	2	int	pred_table[10]
decl	9:4	9:17	2	FrameCode	*ft
water	10:4	0:0	2	ft
op	10:18	0:0	2	=
op	10:20	0:0	2	&
water	10:21	0:0	2	nut
op	10:24	0:0	2	->
water	10:26	0:0	2	frame_code
op	10:36	0:0	2	[
water	10:37	0:0	2	start
op	10:42	0:0	2	]
water	10:43	0:0	2	;
water	11:4	0:0	2	ft
op	11:6	0:0	2	->
water	11:8	0:0	2	flags
op	11:18	0:0	2	=
water	11:20	0:0	2	FLAG_CODED
water	11:30	0:0	2	;
water	12:4	0:0	2	ft
op	12:6	0:0	2	->
water	12:8	0:0	2	size_mul
op	12:18	0:0	2	=
water	12:20	0:0	2	1
water	12:21	0:0	2	;
water	13:4	0:0	2	ft
op	13:6	0:0	2	->
water	13:8	0:0	2	pts_delta
op	13:18	0:0	2	=
water	13:20	0:0	2	1
water	13:21	0:0	2	;
water	14:4	0:0	2	start
op	14:9	0:0	2	++
water	14:11	0:0	2	;
if	15:4	21:4	2	(keyframe_0_esc)
cond	15:8	15:8	3	keyframe_0_esc
water	15:8	0:0	4	keyframe_0_esc
stmts	15:24	21:4	3	
water	15:24	0:0	4	{
decl	17:8	17:47	4	FrameCode	*ft
op	17:22	0:0	4	=
op	17:24	0:0	4	&
water	17:25	0:0	4	nut
op	17:28	0:0	4	->
water	17:30	0:0	4	frame_code
op	17:40	0:0	4	[
water	17:41	0:0	4	start
op	17:46	0:0	4	]
water	18:8	0:0	4	ft
op	18:10	0:0	4	->
water	18:12	0:0	4	flags
op	18:21	0:0	4	=
water	18:23	0:0	4	FLAG_STREAM_ID
op	18:38	0:0	4	|
water	18:40	0:0	4	FLAG_SIZE_MSB
op	18:54	0:0	4	|
water	18:56	0:0	4	FLAG_CODED_PTS
water	18:70	0:0	4	;
water	19:8	0:0	4	ft
op	19:10	0:0	4	->
water	19:12	0:0	4	size_mul
op	19:21	0:0	4	=
water	19:23	0:0	4	1
water	19:24	0:0	4	;
water	20:8	0:0	4	start
op	20:13	0:0	4	++
water	20:15	0:0	4	;
water	21:4	0:0	4	}
for	22:4	113:4	2	(stream_id = 0 ;stream_id < s -> nb_streams;stream_id ++)
forinit	22:9	22:22	3	stream_id = 0 ;
water	22:9	0:0	4	stream_id
op	22:19	0:0	4	=
water	22:21	0:0	4	0
water	22:22	0:0	4	;
cond	22:24	22:39	3	stream_id < s -> nb_streams
water	22:24	0:0	4	stream_id
op	22:34	0:0	4	<
water	22:36	0:0	4	s
op	22:37	0:0	4	->
water	22:39	0:0	4	nb_streams
forexpr	22:51	22:60	3	stream_id ++
water	22:51	0:0	4	stream_id
op	22:60	0:0	4	++
stmts	22:64	113:4	3	
water	22:64	0:0	4	{
decl	23:8	23:76	4	int	start2
op	23:19	0:0	4	=
water	23:21	0:0	4	start
op	23:27	0:0	4	+
water	23:29	0:0	4	(
water	23:30	0:0	4	end
op	23:34	0:0	4	-
water	23:36	0:0	4	start
water	23:41	0:0	4	)
op	23:43	0:0	4	*
water	23:45	0:0	4	stream_id
op	23:61	0:0	4	/
water	23:63	0:0	4	s
op	23:64	0:0	4	->
water	23:66	0:0	4	nb_streams
decl	24:8	24:76	4	int	end2
op	24:19	0:0	4	=
water	24:21	0:0	4	start
op	24:27	0:0	4	+
water	24:29	0:0	4	(
water	24:30	0:0	4	end
op	24:34	0:0	4	-
water	24:36	0:0	4	start
water	24:41	0:0	4	)
op	24:43	0:0	4	*
water	24:45	0:0	4	(
water	24:46	0:0	4	stream_id
op	24:56	0:0	4	+
water	24:58	0:0	4	1
water	24:59	0:0	4	)
op	24:61	0:0	4	/
water	24:63	0:0	4	s
op	24:64	0:0	4	->
water	24:66	0:0	4	nb_streams
decl	25:8	25:60	4	AVCodecContext	*codec
op	25:30	0:0	4	=
water	25:32	0:0	4	s
op	25:33	0:0	4	->
water	25:35	0:0	4	streams
op	25:42	0:0	4	[
water	25:43	0:0	4	stream_id
op	25:52	0:0	4	]
op	25:53	0:0	4	->
water	25:55	0:0	4	codec
decl	26:8	26:71	4	int	is_audio
op	26:30	0:0	4	=
water	26:32	0:0	4	codec
op	26:37	0:0	4	->
water	26:39	0:0	4	codec_type
op	26:50	0:0	4	==
water	26:53	0:0	4	AVMEDIA_TYPE_AUDIO
decl	27:8	27:41	4	int	intra_only
op	27:30	0:0	4	=
water	27:33	0:0	4	is_audio
decl	28:8	28:22	4	int	pred_count
decl	29:8	29:26	4	int	frame_size
op	29:23	0:0	4	=
water	29:25	0:0	4	0
if	30:8	34:8	4	(codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	30:12	30:33	5	codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	30:12	0:0	6	codec
op	30:17	0:0	6	->
water	30:19	0:0	6	codec_type
op	30:30	0:0	6	==
water	30:33	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	30:53	34:8	5	
water	30:53	0:0	6	{
water	31:12	0:0	6	frame_size
op	31:23	0:0	6	=
call	31:25	31:61	6	av_get_audio_frame_duration
arg	31:53	31:58	7	codec
water	31:53	0:0	8	codec
arg	31:60	31:61	7	0
water	31:60	0:0	8	0
water	31:62	0:0	6	;
if	32:12	33:31	6	(codec -> codec_id == AV_CODEC_ID_VORBIS && ! frame_size)
cond	32:16	32:58	7	codec -> codec_id == AV_CODEC_ID_VORBIS && ! frame_size
water	32:16	0:0	8	codec
op	32:21	0:0	8	->
water	32:23	0:0	8	codec_id
op	32:32	0:0	8	==
water	32:35	0:0	8	AV_CODEC_ID_VORBIS
op	32:54	0:0	8	&&
op	32:57	0:0	8	!
water	32:58	0:0	8	frame_size
stmts	33:16	33:31	7	
water	33:16	0:0	8	frame_size
op	33:27	0:0	8	=
water	33:29	0:0	8	64
water	33:31	0:0	8	;
water	34:8	0:0	6	}
else	34:10	38:8	4
stmts	34:15	38:8	5	
water	34:15	0:0	6	{
decl	35:12	35:88	6	AVRational	f
op	35:25	0:0	6	=
call	35:27	35:87	7	av_div_q
arg	35:36	35:52	8	codec->time_base
water	35:36	0:0	9	codec
op	35:41	0:0	9	->
water	35:43	0:0	9	time_base
arg	35:54	35:87	8	*nut->stream[stream_id].time_base
op	35:54	0:0	9	*
water	35:55	0:0	9	nut
op	35:58	0:0	9	->
water	35:60	0:0	9	stream
op	35:66	0:0	9	[
water	35:67	0:0	9	stream_id
op	35:76	0:0	9	]
op	35:77	0:0	9	.
water	35:78	0:0	9	time_base
if	36:12	37:34	6	(f . den == 1 && f . num > 0)
cond	36:16	36:36	7	f . den == 1 && f . num > 0
water	36:16	0:0	8	f
op	36:17	0:0	8	.
water	36:18	0:0	8	den
op	36:22	0:0	8	==
water	36:25	0:0	8	1
op	36:27	0:0	8	&&
water	36:30	0:0	8	f
op	36:31	0:0	8	.
water	36:32	0:0	8	num
op	36:35	0:0	8	>
water	36:36	0:0	8	0
stmts	37:16	37:34	7	
water	37:16	0:0	8	frame_size
op	37:27	0:0	8	=
water	37:29	0:0	8	f
op	37:30	0:0	8	.
water	37:31	0:0	8	num
water	37:34	0:0	8	;
water	38:8	0:0	6	}
if	39:8	40:26	4	(! frame_size)
cond	39:12	39:13	5	! frame_size
op	39:12	0:0	6	!
water	39:13	0:0	6	frame_size
stmts	40:12	40:26	5	
water	40:12	0:0	6	frame_size
op	40:23	0:0	6	=
water	40:25	0:0	6	1
water	40:26	0:0	6	;
for	41:8	52:8	4	(key_frame = 0 ;key_frame < 2;key_frame ++)
forinit	41:13	41:26	5	key_frame = 0 ;
water	41:13	0:0	6	key_frame
op	41:23	0:0	6	=
water	41:25	0:0	6	0
water	41:26	0:0	6	;
cond	41:28	41:40	5	key_frame < 2
water	41:28	0:0	6	key_frame
op	41:38	0:0	6	<
water	41:40	0:0	6	2
forexpr	41:43	41:52	5	key_frame ++
water	41:43	0:0	6	key_frame
op	41:52	0:0	6	++
stmts	41:56	52:8	5	
water	41:56	0:0	6	{
if	42:12	51:12	6	(! intra_only || ! keyframe_0_esc || key_frame != 0)
cond	42:16	42:63	7	! intra_only || ! keyframe_0_esc || key_frame != 0
op	42:16	0:0	8	!
water	42:17	0:0	8	intra_only
op	42:28	0:0	8	||
op	42:31	0:0	8	!
water	42:32	0:0	8	keyframe_0_esc
op	42:47	0:0	8	||
water	42:50	0:0	8	key_frame
op	42:60	0:0	8	!=
water	42:63	0:0	8	0
stmts	42:66	51:12	7	
water	42:66	0:0	8	{
decl	43:16	43:56	8	FrameCode	*ft
op	43:30	0:0	8	=
op	43:32	0:0	8	&
water	43:33	0:0	8	nut
op	43:36	0:0	8	->
water	43:38	0:0	8	frame_code
op	43:48	0:0	8	[
water	43:49	0:0	8	start2
op	43:55	0:0	8	]
water	44:16	0:0	8	ft
op	44:18	0:0	8	->
water	44:20	0:0	8	flags
op	44:30	0:0	8	=
water	44:32	0:0	8	FLAG_KEY
op	44:41	0:0	8	*
water	44:43	0:0	8	key_frame
water	44:52	0:0	8	;
water	45:16	0:0	8	ft
op	45:18	0:0	8	->
water	45:20	0:0	8	flags
op	45:29	0:0	8	|=
water	45:32	0:0	8	FLAG_SIZE_MSB
op	45:46	0:0	8	|
water	45:48	0:0	8	FLAG_CODED_PTS
water	45:62	0:0	8	;
water	46:16	0:0	8	ft
op	46:18	0:0	8	->
water	46:20	0:0	8	stream_id
op	46:30	0:0	8	=
water	46:32	0:0	8	stream_id
water	46:41	0:0	8	;
water	47:16	0:0	8	ft
op	47:18	0:0	8	->
water	47:20	0:0	8	size_mul
op	47:30	0:0	8	=
water	47:32	0:0	8	1
water	47:33	0:0	8	;
if	48:16	49:77	8	(is_audio)
cond	48:20	48:20	9	is_audio
water	48:20	0:0	10	is_audio
stmts	49:20	49:77	9	
water	49:20	0:0	10	ft
op	49:22	0:0	10	->
water	49:24	0:0	10	header_idx
op	49:35	0:0	10	=
call	49:37	49:76	10	find_header_idx
arg	49:53	49:54	11	s
water	49:53	0:0	12	s
arg	49:56	49:61	11	codec
water	49:56	0:0	12	codec
arg	49:63	49:65	11	-1
op	49:63	0:0	12	-
water	49:64	0:0	12	1
arg	49:67	49:76	11	key_frame
water	49:67	0:0	12	key_frame
water	49:77	0:0	10	;
water	50:16	0:0	8	start2
op	50:22	0:0	8	++
water	50:24	0:0	8	;
water	51:12	0:0	8	}
water	52:8	0:0	6	}
water	53:8	0:0	4	key_frame
op	53:18	0:0	4	=
water	53:20	0:0	4	intra_only
water	53:30	0:0	4	;
if	55:8	71:8	4	(is_audio)
cond	55:12	55:12	5	is_audio
water	55:12	0:0	6	is_audio
stmts	55:22	71:8	5	
water	55:22	0:0	6	{
decl	56:12	57:54	6	int	frame_bytes
op	56:28	0:0	6	=
water	56:30	0:0	6	codec
op	56:35	0:0	6	->
water	56:37	0:0	6	frame_size
op	56:48	0:0	6	*
water	56:50	0:0	6	(
water	56:51	0:0	6	int64_t
water	56:58	0:0	6	)
water	56:59	0:0	6	codec
op	56:64	0:0	6	->
water	56:66	0:0	6	bit_rate
op	56:75	0:0	6	/
water	57:30	0:0	6	(
water	57:31	0:0	6	8
op	57:33	0:0	6	*
water	57:35	0:0	6	codec
op	57:40	0:0	6	->
water	57:42	0:0	6	sample_rate
water	57:53	0:0	6	)
decl	58:12	58:19	6	int	pts
for	59:12	70:12	6	(pts = 0 ;pts < 2;pts ++)
forinit	59:17	59:24	7	pts = 0 ;
water	59:17	0:0	8	pts
op	59:21	0:0	8	=
water	59:23	0:0	8	0
water	59:24	0:0	8	;
cond	59:26	59:32	7	pts < 2
water	59:26	0:0	8	pts
op	59:30	0:0	8	<
water	59:32	0:0	8	2
forexpr	59:35	59:38	7	pts ++
water	59:35	0:0	8	pts
op	59:38	0:0	8	++
stmts	59:42	70:12	7	
water	59:42	0:0	8	{
for	60:16	69:16	8	(pred = 0 ;pred < 2;pred ++)
forinit	60:21	60:29	9	pred = 0 ;
water	60:21	0:0	10	pred
op	60:26	0:0	10	=
water	60:28	0:0	10	0
water	60:29	0:0	10	;
cond	60:31	60:38	9	pred < 2
water	60:31	0:0	10	pred
op	60:36	0:0	10	<
water	60:38	0:0	10	2
forexpr	60:41	60:45	9	pred ++
water	60:41	0:0	10	pred
op	60:45	0:0	10	++
stmts	60:49	69:16	9	
water	60:49	0:0	10	{
decl	61:20	61:61	10	FrameCode	*ft
op	61:35	0:0	10	=
op	61:37	0:0	10	&
water	61:38	0:0	10	nut
op	61:41	0:0	10	->
water	61:43	0:0	10	frame_code
op	61:53	0:0	10	[
water	61:54	0:0	10	start2
op	61:60	0:0	10	]
water	62:20	0:0	10	ft
op	62:22	0:0	10	->
water	62:24	0:0	10	flags
op	62:35	0:0	10	=
water	62:37	0:0	10	FLAG_KEY
op	62:46	0:0	10	*
water	62:48	0:0	10	key_frame
water	62:57	0:0	10	;
water	63:20	0:0	10	ft
op	63:22	0:0	10	->
water	63:24	0:0	10	stream_id
op	63:35	0:0	10	=
water	63:37	0:0	10	stream_id
water	63:46	0:0	10	;
water	64:20	0:0	10	ft
op	64:22	0:0	10	->
water	64:24	0:0	10	size_mul
op	64:35	0:0	10	=
water	64:37	0:0	10	frame_bytes
op	64:49	0:0	10	+
water	64:51	0:0	10	2
water	64:52	0:0	10	;
water	65:20	0:0	10	ft
op	65:22	0:0	10	->
water	65:24	0:0	10	size_lsb
op	65:35	0:0	10	=
water	65:37	0:0	10	frame_bytes
op	65:49	0:0	10	+
water	65:51	0:0	10	pred
water	65:55	0:0	10	;
water	66:20	0:0	10	ft
op	66:22	0:0	10	->
water	66:24	0:0	10	pts_delta
op	66:35	0:0	10	=
water	66:37	0:0	10	pts
op	66:41	0:0	10	*
water	66:43	0:0	10	frame_size
water	66:53	0:0	10	;
water	67:20	0:0	10	ft
op	67:22	0:0	10	->
water	67:24	0:0	10	header_idx
op	67:35	0:0	10	=
call	67:37	67:92	10	find_header_idx
arg	67:53	67:54	11	s
water	67:53	0:0	12	s
arg	67:56	67:61	11	codec
water	67:56	0:0	12	codec
arg	67:63	67:81	11	frame_bytes+pred
water	67:63	0:0	12	frame_bytes
op	67:75	0:0	12	+
water	67:77	0:0	12	pred
arg	67:83	67:92	11	key_frame
water	67:83	0:0	12	key_frame
water	67:93	0:0	10	;
water	68:20	0:0	10	start2
op	68:26	0:0	10	++
water	68:28	0:0	10	;
water	69:16	0:0	10	}
water	70:12	0:0	8	}
water	71:8	0:0	6	}
else	71:10	78:8	4
stmts	71:15	78:8	5	
water	71:15	0:0	6	{
decl	72:12	72:52	6	FrameCode	*ft
op	72:26	0:0	6	=
op	72:28	0:0	6	&
water	72:29	0:0	6	nut
op	72:32	0:0	6	->
water	72:34	0:0	6	frame_code
op	72:44	0:0	6	[
water	72:45	0:0	6	start2
op	72:51	0:0	6	]
water	73:12	0:0	6	ft
op	73:14	0:0	6	->
water	73:16	0:0	6	flags
op	73:26	0:0	6	=
water	73:28	0:0	6	FLAG_KEY
op	73:37	0:0	6	|
water	73:39	0:0	6	FLAG_SIZE_MSB
water	73:52	0:0	6	;
water	74:12	0:0	6	ft
op	74:14	0:0	6	->
water	74:16	0:0	6	stream_id
op	74:26	0:0	6	=
water	74:28	0:0	6	stream_id
water	74:37	0:0	6	;
water	75:12	0:0	6	ft
op	75:14	0:0	6	->
water	75:16	0:0	6	size_mul
op	75:26	0:0	6	=
water	75:28	0:0	6	1
water	75:29	0:0	6	;
water	76:12	0:0	6	ft
op	76:14	0:0	6	->
water	76:16	0:0	6	pts_delta
op	76:26	0:0	6	=
water	76:28	0:0	6	frame_size
water	76:38	0:0	6	;
water	77:12	0:0	6	start2
op	77:18	0:0	6	++
water	77:20	0:0	6	;
water	78:8	0:0	6	}
if	80:8	87:8	4	(codec -> has_b_frames)
cond	80:12	80:19	5	codec -> has_b_frames
water	80:12	0:0	6	codec
op	80:17	0:0	6	->
water	80:19	0:0	6	has_b_frames
stmts	80:33	87:8	5	
water	80:33	0:0	6	{
water	81:12	0:0	6	pred_count
op	81:26	0:0	6	=
water	81:28	0:0	6	5
water	81:29	0:0	6	;
water	82:12	0:0	6	pred_table
op	82:22	0:0	6	[
water	82:23	0:0	6	0
op	82:24	0:0	6	]
op	82:26	0:0	6	=
op	82:28	0:0	6	-
water	82:29	0:0	6	2
water	82:30	0:0	6	;
water	83:12	0:0	6	pred_table
op	83:22	0:0	6	[
water	83:23	0:0	6	1
op	83:24	0:0	6	]
op	83:26	0:0	6	=
op	83:28	0:0	6	-
water	83:29	0:0	6	1
water	83:30	0:0	6	;
water	84:12	0:0	6	pred_table
op	84:22	0:0	6	[
water	84:23	0:0	6	2
op	84:24	0:0	6	]
op	84:26	0:0	6	=
water	84:28	0:0	6	1
water	84:29	0:0	6	;
water	85:12	0:0	6	pred_table
op	85:22	0:0	6	[
water	85:23	0:0	6	3
op	85:24	0:0	6	]
op	85:26	0:0	6	=
water	85:28	0:0	6	3
water	85:29	0:0	6	;
water	86:12	0:0	6	pred_table
op	86:22	0:0	6	[
water	86:23	0:0	6	4
op	86:24	0:0	6	]
op	86:26	0:0	6	=
water	86:28	0:0	6	4
water	86:29	0:0	6	;
water	87:8	0:0	6	}
else	87:10	92:8	4
stmts	87:15	92:8	5	
if	87:15	92:8	6	(codec -> codec_id == AV_CODEC_ID_VORBIS)
cond	87:19	87:38	7	codec -> codec_id == AV_CODEC_ID_VORBIS
water	87:19	0:0	8	codec
op	87:24	0:0	8	->
water	87:26	0:0	8	codec_id
op	87:35	0:0	8	==
water	87:38	0:0	8	AV_CODEC_ID_VORBIS
stmts	87:58	92:8	7	
water	87:58	0:0	8	{
water	88:12	0:0	8	pred_count
op	88:26	0:0	8	=
water	88:28	0:0	8	3
water	88:29	0:0	8	;
water	89:12	0:0	8	pred_table
op	89:22	0:0	8	[
water	89:23	0:0	8	0
op	89:24	0:0	8	]
op	89:26	0:0	8	=
water	89:28	0:0	8	2
water	89:29	0:0	8	;
water	90:12	0:0	8	pred_table
op	90:22	0:0	8	[
water	90:23	0:0	8	1
op	90:24	0:0	8	]
op	90:26	0:0	8	=
water	90:28	0:0	8	9
water	90:29	0:0	8	;
water	91:12	0:0	8	pred_table
op	91:22	0:0	8	[
water	91:23	0:0	8	2
op	91:24	0:0	8	]
op	91:26	0:0	8	=
water	91:28	0:0	8	16
water	91:30	0:0	8	;
water	92:8	0:0	8	}
else	92:10	95:8	4
stmts	92:15	95:8	5	
water	92:15	0:0	6	{
water	93:12	0:0	6	pred_count
op	93:26	0:0	6	=
water	93:28	0:0	6	1
water	93:29	0:0	6	;
water	94:12	0:0	6	pred_table
op	94:22	0:0	6	[
water	94:23	0:0	6	0
op	94:24	0:0	6	]
op	94:26	0:0	6	=
water	94:28	0:0	6	1
water	94:29	0:0	6	;
water	95:8	0:0	6	}
for	96:8	112:8	4	(pred = 0 ;pred < pred_count;pred ++)
forinit	96:13	96:21	5	pred = 0 ;
water	96:13	0:0	6	pred
op	96:18	0:0	6	=
water	96:20	0:0	6	0
water	96:21	0:0	6	;
cond	96:23	96:30	5	pred < pred_count
water	96:23	0:0	6	pred
op	96:28	0:0	6	<
water	96:30	0:0	6	pred_count
forexpr	96:42	96:46	5	pred ++
water	96:42	0:0	6	pred
op	96:46	0:0	6	++
stmts	96:50	112:8	5	
water	96:50	0:0	6	{
decl	97:12	97:69	6	int	start3
op	97:23	0:0	6	=
water	97:25	0:0	6	start2
op	97:32	0:0	6	+
water	97:34	0:0	6	(
water	97:35	0:0	6	end2
op	97:40	0:0	6	-
water	97:42	0:0	6	start2
water	97:48	0:0	6	)
op	97:50	0:0	6	*
water	97:52	0:0	6	pred
op	97:57	0:0	6	/
water	97:59	0:0	6	pred_count
decl	98:12	98:75	6	int	end3
op	98:23	0:0	6	=
water	98:25	0:0	6	start2
op	98:32	0:0	6	+
water	98:34	0:0	6	(
water	98:35	0:0	6	end2
op	98:40	0:0	6	-
water	98:42	0:0	6	start2
water	98:48	0:0	6	)
op	98:50	0:0	6	*
water	98:52	0:0	6	(
water	98:53	0:0	6	pred
op	98:58	0:0	6	+
water	98:60	0:0	6	1
water	98:61	0:0	6	)
op	98:63	0:0	6	/
water	98:65	0:0	6	pred_count
water	99:12	0:0	6	pred_table
op	99:22	0:0	6	[
water	99:23	0:0	6	pred
op	99:27	0:0	6	]
op	99:29	0:0	6	*=
water	99:32	0:0	6	frame_size
water	99:42	0:0	6	;
for	100:12	111:12	6	(index = start3 ;index < end3;index ++)
forinit	100:17	100:31	7	index = start3 ;
water	100:17	0:0	8	index
op	100:23	0:0	8	=
water	100:25	0:0	8	start3
water	100:31	0:0	8	;
cond	100:33	100:41	7	index < end3
water	100:33	0:0	8	index
op	100:39	0:0	8	<
water	100:41	0:0	8	end3
forexpr	100:47	100:52	7	index ++
water	100:47	0:0	8	index
op	100:52	0:0	8	++
stmts	100:56	111:12	7	
water	100:56	0:0	8	{
decl	101:16	101:55	8	FrameCode	*ft
op	101:30	0:0	8	=
op	101:32	0:0	8	&
water	101:33	0:0	8	nut
op	101:36	0:0	8	->
water	101:38	0:0	8	frame_code
op	101:48	0:0	8	[
water	101:49	0:0	8	index
op	101:54	0:0	8	]
water	102:16	0:0	8	ft
op	102:18	0:0	8	->
water	102:20	0:0	8	flags
op	102:30	0:0	8	=
water	102:32	0:0	8	FLAG_KEY
op	102:41	0:0	8	*
water	102:43	0:0	8	key_frame
water	102:52	0:0	8	;
water	103:16	0:0	8	ft
op	103:18	0:0	8	->
water	103:20	0:0	8	flags
op	103:29	0:0	8	|=
water	103:32	0:0	8	FLAG_SIZE_MSB
water	103:45	0:0	8	;
water	104:16	0:0	8	ft
op	104:18	0:0	8	->
water	104:20	0:0	8	stream_id
op	104:30	0:0	8	=
water	104:32	0:0	8	stream_id
water	104:41	0:0	8	;
water	106:16	0:0	8	ft
op	106:18	0:0	8	->
water	106:20	0:0	8	size_mul
op	106:30	0:0	8	=
water	106:32	0:0	8	end3
op	106:37	0:0	8	-
water	106:39	0:0	8	start3
water	106:45	0:0	8	;
water	107:16	0:0	8	ft
op	107:18	0:0	8	->
water	107:20	0:0	8	size_lsb
op	107:30	0:0	8	=
water	107:32	0:0	8	index
op	107:38	0:0	8	-
water	107:40	0:0	8	start3
water	107:46	0:0	8	;
water	108:16	0:0	8	ft
op	108:18	0:0	8	->
water	108:20	0:0	8	pts_delta
op	108:30	0:0	8	=
water	108:32	0:0	8	pred_table
op	108:42	0:0	8	[
water	108:43	0:0	8	pred
op	108:47	0:0	8	]
water	108:48	0:0	8	;
if	109:16	110:77	8	(is_audio)
cond	109:20	109:20	9	is_audio
water	109:20	0:0	10	is_audio
stmts	110:20	110:77	9	
water	110:20	0:0	10	ft
op	110:22	0:0	10	->
water	110:24	0:0	10	header_idx
op	110:35	0:0	10	=
call	110:37	110:76	10	find_header_idx
arg	110:53	110:54	11	s
water	110:53	0:0	12	s
arg	110:56	110:61	11	codec
water	110:56	0:0	12	codec
arg	110:63	110:65	11	-1
op	110:63	0:0	12	-
water	110:64	0:0	12	1
arg	110:67	110:76	11	key_frame
water	110:67	0:0	12	key_frame
water	110:77	0:0	10	;
water	111:12	0:0	8	}
water	112:8	0:0	6	}
water	113:4	0:0	4	}
call	114:4	114:93	2	memmove
arg	114:12	114:37	3	&nut->frame_code['N'+1]
op	114:12	0:0	4	&
water	114:13	0:0	4	nut
op	114:16	0:0	4	->
water	114:18	0:0	4	frame_code
op	114:28	0:0	4	[
water	114:29	0:0	4	'N'
op	114:33	0:0	4	+
water	114:35	0:0	4	1
op	114:36	0:0	4	]
arg	114:39	114:60	3	&nut->frame_code['N']
op	114:39	0:0	4	&
water	114:40	0:0	4	nut
op	114:43	0:0	4	->
water	114:45	0:0	4	frame_code
op	114:55	0:0	4	[
water	114:56	0:0	4	'N'
op	114:59	0:0	4	]
arg	114:62	114:93	3	sizeof(FrameCode)*(255-'N')
op	114:62	0:0	4	sizeof
water	114:68	0:0	4	(
water	114:69	0:0	4	FrameCode
water	114:78	0:0	4	)
op	114:80	0:0	4	*
water	114:82	0:0	4	(
water	114:83	0:0	4	255
op	114:87	0:0	4	-
water	114:89	0:0	4	'N'
water	114:92	0:0	4	)
water	114:94	0:0	2	;
water	115:4	0:0	2	nut
op	115:7	0:0	2	->
water	115:9	0:0	2	frame_code
op	115:19	0:0	2	[
water	115:20	0:0	2	0
op	115:21	0:0	2	]
op	115:22	0:0	2	.
water	115:23	0:0	2	flags
op	115:35	0:0	2	=
water	116:8	0:0	2	nut
op	116:11	0:0	2	->
water	116:13	0:0	2	frame_code
op	116:23	0:0	2	[
water	116:24	0:0	2	255
op	116:27	0:0	2	]
op	116:28	0:0	2	.
water	116:29	0:0	2	flags
op	116:35	0:0	2	=
water	117:8	0:0	2	nut
op	117:11	0:0	2	->
water	117:13	0:0	2	frame_code
op	117:23	0:0	2	[
water	117:24	0:0	2	'N'
op	117:27	0:0	2	]
op	117:28	0:0	2	.
water	117:29	0:0	2	flags
op	117:35	0:0	2	=
water	117:37	0:0	2	FLAG_INVALID
water	117:49	0:0	2	;
