func	1:0	75:0	0	static inline int	mpeg2_decode_block_intra
params	1:42	0:0	1	
param	1:43	1:60	2	MpegEncContext *	s
param	2:43	2:57	2	int16_t *	block
param	2:59	2:64	2	int	n
stmnts	0:0	74:12	1	
decl	4:4	4:34	2	int	level
water	4:13	0:0	2	,
decl	4:4	4:34	2	int	dc
water	4:17	0:0	2	,
decl	4:4	4:34	2	int	diff
water	4:23	0:0	2	,
decl	4:4	4:34	2	int	i
water	4:26	0:0	2	,
decl	4:4	4:34	2	int	j
water	4:29	0:0	2	,
decl	4:4	4:34	2	int	run
decl	5:4	5:17	2	int	component
decl	6:4	6:15	2	RLTable	*rl
water	7:4	0:0	2	uint8_t
op	7:12	0:0	2	*
water	7:13	0:0	2	const
water	7:19	0:0	2	scantable
op	7:29	0:0	2	=
water	7:31	0:0	2	s
op	7:32	0:0	2	->
water	7:34	0:0	2	intra_scantable
op	7:49	0:0	2	.
water	7:50	0:0	2	permutated
water	7:60	0:0	2	;
decl	8:4	8:32	2	const uint16_t	*quant_matrix
decl	9:4	9:32	2	const int	qscale
op	9:21	0:0	2	=
water	9:23	0:0	2	s
op	9:24	0:0	2	->
water	9:26	0:0	2	qscale
decl	10:4	10:16	2	int	mismatch
if	12:4	15:4	2	(n < 4)
cond	12:8	12:12	3	n < 4
water	12:8	0:0	4	n
op	12:10	0:0	4	<
water	12:12	0:0	4	4
stmts	12:15	15:4	3	
water	12:15	0:0	4	{
water	13:8	0:0	4	quant_matrix
op	13:21	0:0	4	=
water	13:23	0:0	4	s
op	13:24	0:0	4	->
water	13:26	0:0	4	intra_matrix
water	13:38	0:0	4	;
water	14:8	0:0	4	component
op	14:21	0:0	4	=
water	14:23	0:0	4	0
water	14:24	0:0	4	;
water	15:4	0:0	4	}
else	15:6	18:4	2
stmts	15:11	18:4	3	
water	15:11	0:0	4	{
water	16:8	0:0	4	quant_matrix
op	16:21	0:0	4	=
water	16:23	0:0	4	s
op	16:24	0:0	4	->
water	16:26	0:0	4	chroma_intra_matrix
water	16:45	0:0	4	;
water	17:8	0:0	4	component
op	17:21	0:0	4	=
water	17:23	0:0	4	(
water	17:24	0:0	4	n
op	17:26	0:0	4	&
water	17:28	0:0	4	1
water	17:29	0:0	4	)
op	17:31	0:0	4	+
water	17:33	0:0	4	1
water	17:34	0:0	4	;
water	18:4	0:0	4	}
water	19:4	0:0	2	diff
op	19:9	0:0	2	=
call	19:11	19:38	2	decode_dc
arg	19:21	19:27	3	&s->gb
op	19:21	0:0	4	&
water	19:22	0:0	4	s
op	19:23	0:0	4	->
water	19:25	0:0	4	gb
arg	19:29	19:38	3	component
water	19:29	0:0	4	component
water	19:39	0:0	2	;
if	20:4	21:34	2	(diff >= 0 xffff)
cond	20:8	20:17	3	diff >= 0 xffff
water	20:8	0:0	4	diff
op	20:13	0:0	4	>=
water	20:16	0:0	4	0
water	20:17	0:0	4	xffff
stmts	21:8	21:34	3	
return	21:8	21:34	4	AVERROR_INVALIDDATA
water	21:15	0:0	5	AVERROR_INVALIDDATA
water	22:4	0:0	2	dc
op	22:8	0:0	2	=
water	22:10	0:0	2	s
op	22:11	0:0	2	->
water	22:13	0:0	2	last_dc
op	22:20	0:0	2	[
water	22:21	0:0	2	component
op	22:30	0:0	2	]
water	22:31	0:0	2	;
water	23:4	0:0	2	dc
op	23:7	0:0	2	+=
water	23:10	0:0	2	diff
water	23:14	0:0	2	;
water	24:4	0:0	2	s
op	24:5	0:0	2	->
water	24:7	0:0	2	last_dc
op	24:14	0:0	2	[
water	24:15	0:0	2	component
op	24:24	0:0	2	]
op	24:26	0:0	2	=
water	24:28	0:0	2	dc
water	24:30	0:0	2	;
water	25:4	0:0	2	block
op	25:9	0:0	2	[
water	25:10	0:0	2	0
op	25:11	0:0	2	]
op	25:13	0:0	2	=
water	25:15	0:0	2	dc
op	25:18	0:0	2	<<
water	25:21	0:0	2	(
water	25:22	0:0	2	3
op	25:24	0:0	2	-
water	25:26	0:0	2	s
op	25:27	0:0	2	->
water	25:29	0:0	2	intra_dc_precision
water	25:47	0:0	2	)
water	25:48	0:0	2	;
call	26:4	26:41	2	ff_tlog
arg	26:12	26:20	3	s->avctx
water	26:12	0:0	4	s
op	26:13	0:0	4	->
water	26:15	0:0	4	avctx
arg	26:22	26:31	3	"dc=%d\n"
water	26:22	0:0	4	"dc=%d\n"
arg	26:33	26:41	3	block[0]
water	26:33	0:0	4	block
op	26:38	0:0	4	[
water	26:39	0:0	4	0
op	26:40	0:0	4	]
water	26:42	0:0	2	;
water	27:4	0:0	2	mismatch
op	27:13	0:0	2	=
water	27:15	0:0	2	block
op	27:20	0:0	2	[
water	27:21	0:0	2	0
op	27:22	0:0	2	]
op	27:24	0:0	2	^
water	27:26	0:0	2	1
water	27:27	0:0	2	;
water	28:4	0:0	2	i
op	28:6	0:0	2	=
water	28:8	0:0	2	0
water	28:9	0:0	2	;
if	29:4	30:25	2	(s -> intra_vlc_format)
cond	29:8	29:11	3	s -> intra_vlc_format
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	intra_vlc_format
stmts	30:8	30:25	3	
water	30:8	0:0	4	rl
op	30:11	0:0	4	=
op	30:13	0:0	4	&
water	30:14	0:0	4	ff_rl_mpeg2
water	30:25	0:0	4	;
else	31:4	32:25	2
stmts	32:8	32:25	3	
water	32:8	0:0	4	rl
op	32:11	0:0	4	=
op	32:13	0:0	4	&
water	32:14	0:0	4	ff_rl_mpeg1
water	32:25	0:0	4	;
water	33:4	0:0	2	{
call	34:8	34:30	2	OPEN_READER
arg	34:20	34:22	3	re
water	34:20	0:0	4	re
arg	34:24	34:30	3	&s->gb
op	34:24	0:0	4	&
water	34:25	0:0	4	s
op	34:26	0:0	4	->
water	34:28	0:0	4	gb
water	34:31	0:0	2	;
for	36:8	69:8	2	(;;)
forinit	36:13	36:13	3	;
water	36:13	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	36:17	69:8	3	
water	36:17	0:0	4	{
call	37:12	37:35	4	UPDATE_CACHE
arg	37:25	37:27	5	re
water	37:25	0:0	6	re
arg	37:29	37:35	5	&s->gb
op	37:29	0:0	6	&
water	37:30	0:0	6	s
op	37:31	0:0	6	->
water	37:33	0:0	6	gb
water	37:36	0:0	4	;
call	38:12	39:41	4	GET_RL_VLC
arg	38:23	38:28	5	level
water	38:23	0:0	6	level
arg	38:30	38:33	5	run
water	38:30	0:0	6	run
arg	38:35	38:37	5	re
water	38:35	0:0	6	re
arg	38:39	38:45	5	&s->gb
op	38:39	0:0	6	&
water	38:40	0:0	6	s
op	38:41	0:0	6	->
water	38:43	0:0	6	gb
arg	38:47	38:60	5	rl->rl_vlc[0]
water	38:47	0:0	6	rl
op	38:49	0:0	6	->
water	38:51	0:0	6	rl_vlc
op	38:57	0:0	6	[
water	38:58	0:0	6	0
op	38:59	0:0	6	]
arg	39:23	39:35	5	TEX_VLC_BITS
water	39:23	0:0	6	TEX_VLC_BITS
arg	39:37	39:38	5	2
water	39:37	0:0	6	2
arg	39:40	39:41	5	0
water	39:40	0:0	6	0
water	39:42	0:0	4	;
if	40:12	42:12	4	(level == 127)
cond	40:16	40:25	5	level == 127
water	40:16	0:0	6	level
op	40:22	0:0	6	==
water	40:25	0:0	6	127
stmts	40:30	42:12	5	
water	40:30	0:0	6	{
break	41:16	41:21	6	
water	42:12	0:0	6	}
else	42:14	50:12	4
stmts	42:19	50:12	5	
if	42:19	50:12	6	(level != 0)
cond	42:23	42:32	7	level != 0
water	42:23	0:0	8	level
op	42:29	0:0	8	!=
water	42:32	0:0	8	0
stmts	42:35	50:12	7	
water	42:35	0:0	8	{
water	43:16	0:0	8	i
op	43:18	0:0	8	+=
water	43:21	0:0	8	run
water	43:24	0:0	8	;
call	44:16	44:42	8	check_scantable_index
arg	44:38	44:39	9	s
water	44:38	0:0	10	s
arg	44:41	44:42	9	i
water	44:41	0:0	10	i
water	44:43	0:0	8	;
water	45:16	0:0	8	j
op	45:18	0:0	8	=
water	45:20	0:0	8	scantable
op	45:29	0:0	8	[
water	45:30	0:0	8	i
op	45:31	0:0	8	]
water	45:32	0:0	8	;
water	46:16	0:0	8	level
op	46:22	0:0	8	=
water	46:24	0:0	8	(
water	46:25	0:0	8	level
op	46:31	0:0	8	*
water	46:33	0:0	8	qscale
op	46:40	0:0	8	*
water	46:42	0:0	8	quant_matrix
op	46:54	0:0	8	[
water	46:55	0:0	8	j
op	46:56	0:0	8	]
water	46:57	0:0	8	)
op	46:59	0:0	8	>>
water	46:62	0:0	8	4
water	46:63	0:0	8	;
water	47:16	0:0	8	level
op	47:22	0:0	8	=
water	47:24	0:0	8	(
water	47:25	0:0	8	level
op	47:31	0:0	8	^
call	47:33	47:57	8	SHOW_SBITS
arg	47:44	47:46	9	re
water	47:44	0:0	10	re
arg	47:48	47:54	9	&s->gb
op	47:48	0:0	10	&
water	47:49	0:0	10	s
op	47:50	0:0	10	->
water	47:52	0:0	10	gb
arg	47:56	47:57	9	1
water	47:56	0:0	10	1
water	47:58	0:0	8	)
op	47:60	0:0	8	-
call	48:24	48:48	8	SHOW_SBITS
arg	48:35	48:37	9	re
water	48:35	0:0	10	re
arg	48:39	48:45	9	&s->gb
op	48:39	0:0	10	&
water	48:40	0:0	10	s
op	48:41	0:0	10	->
water	48:43	0:0	10	gb
arg	48:47	48:48	9	1
water	48:47	0:0	10	1
water	48:49	0:0	8	;
call	49:16	49:44	8	LAST_SKIP_BITS
arg	49:31	49:33	9	re
water	49:31	0:0	10	re
arg	49:35	49:41	9	&s->gb
op	49:35	0:0	10	&
water	49:36	0:0	10	s
op	49:37	0:0	10	->
water	49:39	0:0	10	gb
arg	49:43	49:44	9	1
water	49:43	0:0	10	1
water	49:45	0:0	8	;
water	50:12	0:0	8	}
else	50:14	66:12	4
stmts	50:19	66:12	5	
water	50:19	0:0	6	{
water	52:16	0:0	6	run
op	52:20	0:0	6	=
call	52:22	52:46	6	SHOW_UBITS
arg	52:33	52:35	7	re
water	52:33	0:0	8	re
arg	52:37	52:43	7	&s->gb
op	52:37	0:0	8	&
water	52:38	0:0	8	s
op	52:39	0:0	8	->
water	52:41	0:0	8	gb
arg	52:45	52:46	7	6
water	52:45	0:0	8	6
op	52:48	0:0	6	+
water	52:50	0:0	6	1
water	52:51	0:0	6	;
call	53:16	53:44	6	LAST_SKIP_BITS
arg	53:31	53:33	7	re
water	53:31	0:0	8	re
arg	53:35	53:41	7	&s->gb
op	53:35	0:0	8	&
water	53:36	0:0	8	s
op	53:37	0:0	8	->
water	53:39	0:0	8	gb
arg	53:43	53:44	7	6
water	53:43	0:0	8	6
water	53:45	0:0	6	;
call	54:16	54:39	6	UPDATE_CACHE
arg	54:29	54:31	7	re
water	54:29	0:0	8	re
arg	54:33	54:39	7	&s->gb
op	54:33	0:0	8	&
water	54:34	0:0	8	s
op	54:35	0:0	8	->
water	54:37	0:0	8	gb
water	54:40	0:0	6	;
water	55:16	0:0	6	level
op	55:22	0:0	6	=
call	55:24	55:49	6	SHOW_SBITS
arg	55:35	55:37	7	re
water	55:35	0:0	8	re
arg	55:39	55:45	7	&s->gb
op	55:39	0:0	8	&
water	55:40	0:0	8	s
op	55:41	0:0	8	->
water	55:43	0:0	8	gb
arg	55:47	55:49	7	12
water	55:47	0:0	8	12
water	55:50	0:0	6	;
call	56:16	56:40	6	SKIP_BITS
arg	56:26	56:28	7	re
water	56:26	0:0	8	re
arg	56:30	56:36	7	&s->gb
op	56:30	0:0	8	&
water	56:31	0:0	8	s
op	56:32	0:0	8	->
water	56:34	0:0	8	gb
arg	56:38	56:40	7	12
water	56:38	0:0	8	12
water	56:41	0:0	6	;
water	57:16	0:0	6	i
op	57:18	0:0	6	+=
water	57:21	0:0	6	run
water	57:24	0:0	6	;
call	58:16	58:42	6	check_scantable_index
arg	58:38	58:39	7	s
water	58:38	0:0	8	s
arg	58:41	58:42	7	i
water	58:41	0:0	8	i
water	58:43	0:0	6	;
water	59:16	0:0	6	j
op	59:18	0:0	6	=
water	59:20	0:0	6	scantable
op	59:29	0:0	6	[
water	59:30	0:0	6	i
op	59:31	0:0	6	]
water	59:32	0:0	6	;
if	60:16	63:16	6	(level < 0)
cond	60:20	60:28	7	level < 0
water	60:20	0:0	8	level
op	60:26	0:0	8	<
water	60:28	0:0	8	0
stmts	60:31	63:16	7	
water	60:31	0:0	8	{
water	61:20	0:0	8	level
op	61:26	0:0	8	=
water	61:28	0:0	8	(
op	61:29	0:0	8	-
water	61:30	0:0	8	level
op	61:36	0:0	8	*
water	61:38	0:0	8	qscale
op	61:45	0:0	8	*
water	61:47	0:0	8	quant_matrix
op	61:59	0:0	8	[
water	61:60	0:0	8	j
op	61:61	0:0	8	]
water	61:62	0:0	8	)
op	61:64	0:0	8	>>
water	61:67	0:0	8	4
water	61:68	0:0	8	;
water	62:20	0:0	8	level
op	62:26	0:0	8	=
op	62:28	0:0	8	-
water	62:29	0:0	8	level
water	62:34	0:0	8	;
water	63:16	0:0	8	}
else	63:18	65:16	6
stmts	63:23	65:16	7	
water	63:23	0:0	8	{
water	64:20	0:0	8	level
op	64:26	0:0	8	=
water	64:28	0:0	8	(
water	64:29	0:0	8	level
op	64:35	0:0	8	*
water	64:37	0:0	8	qscale
op	64:44	0:0	8	*
water	64:46	0:0	8	quant_matrix
op	64:58	0:0	8	[
water	64:59	0:0	8	j
op	64:60	0:0	8	]
water	64:61	0:0	8	)
op	64:63	0:0	8	>>
water	64:66	0:0	8	4
water	64:67	0:0	8	;
water	65:16	0:0	8	}
water	66:12	0:0	6	}
water	67:12	0:0	4	mismatch
op	67:21	0:0	4	^=
water	67:24	0:0	4	level
water	67:29	0:0	4	;
water	68:12	0:0	4	block
op	68:17	0:0	4	[
water	68:18	0:0	4	j
op	68:19	0:0	4	]
op	68:22	0:0	4	=
water	68:24	0:0	4	level
water	68:29	0:0	4	;
water	69:8	0:0	4	}
call	70:8	70:31	2	CLOSE_READER
arg	70:21	70:23	3	re
water	70:21	0:0	4	re
arg	70:25	70:31	3	&s->gb
op	70:25	0:0	4	&
water	70:26	0:0	4	s
op	70:27	0:0	4	->
water	70:29	0:0	4	gb
water	70:32	0:0	2	;
water	71:4	0:0	2	}
water	72:4	0:0	2	block
op	72:9	0:0	2	[
water	72:10	0:0	2	63
op	72:12	0:0	2	]
op	72:14	0:0	2	^=
water	72:17	0:0	2	mismatch
op	72:26	0:0	2	&
water	72:28	0:0	2	1
water	72:29	0:0	2	;
water	73:4	0:0	2	s
op	73:5	0:0	2	->
water	73:7	0:0	2	block_last_index
op	73:23	0:0	2	[
water	73:24	0:0	2	n
op	73:25	0:0	2	]
op	73:27	0:0	2	=
water	73:29	0:0	2	i
water	73:30	0:0	2	;
return	74:4	74:12	2	0
water	74:11	0:0	3	0
