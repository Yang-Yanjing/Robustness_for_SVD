func	1:0	37:0	0	static int	mxf_edit_unit_absolute_offset
params	1:40	0:0	1	
param	1:41	1:56	2	MXFContext *	mxf
param	1:58	1:84	2	MXFIndexTable *	index_table
param	1:86	1:103	2	int64_t	edit_unit
param	1:105	1:127	2	int64_t *	edit_unit_out
param	1:129	1:148	2	int64_t *	offset_out
param	1:150	1:157	2	int	nag
stmnts	0:0	36:30	1	
decl	3:4	3:9	2	int	i
decl	4:4	4:27	2	int64_t	offset_temp
op	4:24	0:0	2	=
water	4:26	0:0	2	0
for	5:4	33:4	2	(i = 0 ;i < index_table -> nb_segments;i ++)
forinit	5:9	5:14	3	i = 0 ;
water	5:9	0:0	4	i
op	5:11	0:0	4	=
water	5:13	0:0	4	0
water	5:14	0:0	4	;
cond	5:16	5:33	3	i < index_table -> nb_segments
water	5:16	0:0	4	i
op	5:18	0:0	4	<
water	5:20	0:0	4	index_table
op	5:31	0:0	4	->
water	5:33	0:0	4	nb_segments
forexpr	5:46	5:47	3	i ++
water	5:46	0:0	4	i
op	5:47	0:0	4	++
stmts	5:51	33:4	3	
water	5:51	0:0	4	{
decl	6:8	6:58	4	MXFIndexTableSegment	*s
op	6:32	0:0	4	=
water	6:34	0:0	4	index_table
op	6:45	0:0	4	->
water	6:47	0:0	4	segments
op	6:55	0:0	4	[
water	6:56	0:0	4	i
op	6:57	0:0	4	]
water	7:8	0:0	4	edit_unit
op	7:18	0:0	4	=
call	7:20	7:60	4	FFMAX
arg	7:26	7:35	5	edit_unit
water	7:26	0:0	6	edit_unit
arg	7:37	7:60	5	s->index_start_position
water	7:37	0:0	6	s
op	7:38	0:0	6	->
water	7:40	0:0	6	index_start_position
water	7:61	0:0	4	;
if	8:8	29:8	4	(edit_unit < s -> index_start_position + s -> index_duration)
cond	8:12	8:53	5	edit_unit < s -> index_start_position + s -> index_duration
water	8:12	0:0	6	edit_unit
op	8:22	0:0	6	<
water	8:24	0:0	6	s
op	8:25	0:0	6	->
water	8:27	0:0	6	index_start_position
op	8:48	0:0	6	+
water	8:50	0:0	6	s
op	8:51	0:0	6	->
water	8:53	0:0	6	index_duration
stmts	8:69	29:8	5	
water	8:69	0:0	6	{
decl	9:12	9:63	6	int64_t	index
op	9:26	0:0	6	=
water	9:28	0:0	6	edit_unit
op	9:38	0:0	6	-
water	9:40	0:0	6	s
op	9:41	0:0	6	->
water	9:43	0:0	6	index_start_position
if	10:12	11:62	6	(s -> edit_unit_byte_count)
cond	10:16	10:19	7	s -> edit_unit_byte_count
water	10:16	0:0	8	s
op	10:17	0:0	8	->
water	10:19	0:0	8	edit_unit_byte_count
stmts	11:16	11:62	7	
water	11:16	0:0	8	offset_temp
op	11:28	0:0	8	+=
water	11:31	0:0	8	s
op	11:32	0:0	8	->
water	11:34	0:0	8	edit_unit_byte_count
op	11:55	0:0	8	*
water	11:57	0:0	8	index
water	11:62	0:0	8	;
else	12:12	21:12	6
stmts	12:17	21:12	7	
if	12:17	21:12	8	(s -> nb_index_entries)
cond	12:21	12:24	9	s -> nb_index_entries
water	12:21	0:0	10	s
op	12:22	0:0	10	->
water	12:24	0:0	10	nb_index_entries
stmts	12:42	21:12	9	
water	12:42	0:0	10	{
if	13:16	14:30	10	(s -> nb_index_entries == 2 * s -> index_duration + 1)
cond	13:20	13:67	11	s -> nb_index_entries == 2 * s -> index_duration + 1
water	13:20	0:0	12	s
op	13:21	0:0	12	->
water	13:23	0:0	12	nb_index_entries
op	13:40	0:0	12	==
water	13:43	0:0	12	2
op	13:45	0:0	12	*
water	13:47	0:0	12	s
op	13:48	0:0	12	->
water	13:50	0:0	12	index_duration
op	13:65	0:0	12	+
water	13:67	0:0	12	1
stmts	14:20	14:30	11	
water	14:20	0:0	12	index
op	14:26	0:0	12	*=
water	14:29	0:0	12	2
water	14:30	0:0	12	;
if	15:16	19:16	10	(index < 0 || index >= s -> nb_index_entries)
cond	15:20	15:45	11	index < 0 || index >= s -> nb_index_entries
water	15:20	0:0	12	index
op	15:26	0:0	12	<
water	15:28	0:0	12	0
op	15:30	0:0	12	||
water	15:33	0:0	12	index
op	15:39	0:0	12	>=
water	15:42	0:0	12	s
op	15:43	0:0	12	->
water	15:45	0:0	12	nb_index_entries
stmts	15:63	19:16	11	
water	15:63	0:0	12	{
call	16:20	17:74	12	av_log
arg	16:27	16:34	13	mxf->fc
water	16:27	0:0	14	mxf
op	16:30	0:0	14	->
water	16:32	0:0	14	fc
arg	16:36	16:48	13	AV_LOG_ERROR
water	16:36	0:0	14	AV_LOG_ERROR
arg	16:50	16:112	13	"IndexSID %i segment at %"PRId64" IndexEntryArray too small\n"
water	16:50	0:0	14	"IndexSID %i segment at %"
water	16:76	0:0	14	PRId64
water	16:82	0:0	14	" IndexEntryArray too small\n"
arg	17:27	17:49	13	index_table->index_sid
water	17:27	0:0	14	index_table
op	17:38	0:0	14	->
water	17:40	0:0	14	index_sid
arg	17:51	17:74	13	s->index_start_position
water	17:51	0:0	14	s
op	17:52	0:0	14	->
water	17:54	0:0	14	index_start_position
water	17:75	0:0	12	;
return	18:20	18:46	12	AVERROR_INVALIDDATA
water	18:27	0:0	13	AVERROR_INVALIDDATA
water	19:16	0:0	12	}
water	20:16	0:0	10	offset_temp
op	20:28	0:0	10	=
water	20:30	0:0	10	s
op	20:31	0:0	10	->
water	20:33	0:0	10	stream_offset_entries
op	20:54	0:0	10	[
water	20:55	0:0	10	index
op	20:60	0:0	10	]
water	20:61	0:0	10	;
water	21:12	0:0	10	}
else	21:14	25:12	6
stmts	21:19	25:12	7	
water	21:19	0:0	8	{
call	22:16	23:70	8	av_log
arg	22:23	22:30	9	mxf->fc
water	22:23	0:0	10	mxf
op	22:26	0:0	10	->
water	22:28	0:0	10	fc
arg	22:32	22:44	9	AV_LOG_ERROR
water	22:32	0:0	10	AV_LOG_ERROR
arg	22:46	22:128	9	"IndexSID %i segment at %"PRId64" missing EditUnitByteCount and IndexEntryArray\n"
water	22:46	0:0	10	"IndexSID %i segment at %"
water	22:72	0:0	10	PRId64
water	22:78	0:0	10	" missing EditUnitByteCount and IndexEntryArray\n"
arg	23:23	23:45	9	index_table->index_sid
water	23:23	0:0	10	index_table
op	23:34	0:0	10	->
water	23:36	0:0	10	index_sid
arg	23:47	23:70	9	s->index_start_position
water	23:47	0:0	10	s
op	23:48	0:0	10	->
water	23:50	0:0	10	index_start_position
water	23:71	0:0	8	;
return	24:16	24:42	8	AVERROR_INVALIDDATA
water	24:23	0:0	9	AVERROR_INVALIDDATA
water	25:12	0:0	8	}
if	26:12	27:42	6	(edit_unit_out)
cond	26:16	26:16	7	edit_unit_out
water	26:16	0:0	8	edit_unit_out
stmts	27:16	27:42	7	
op	27:16	0:0	8	*
water	27:17	0:0	8	edit_unit_out
op	27:31	0:0	8	=
water	27:33	0:0	8	edit_unit
water	27:42	0:0	8	;
return	28:12	28:99	6	mxf_absolute_bodysid_offset(mxf,index_table->body_sid,offset_temp,offset_out)
call	28:19	28:98	7	mxf_absolute_bodysid_offset
arg	28:47	28:50	8	mxf
water	28:47	0:0	9	mxf
arg	28:52	28:73	8	index_table->body_sid
water	28:52	0:0	9	index_table
op	28:63	0:0	9	->
water	28:65	0:0	9	body_sid
arg	28:75	28:86	8	offset_temp
water	28:75	0:0	9	offset_temp
arg	28:88	28:98	8	offset_out
water	28:88	0:0	9	offset_out
water	29:8	0:0	6	}
else	29:10	32:8	4
stmts	29:15	32:8	5	
water	29:15	0:0	6	{
water	31:12	0:0	6	offset_temp
op	31:24	0:0	6	+=
water	31:27	0:0	6	s
op	31:28	0:0	6	->
water	31:30	0:0	6	edit_unit_byte_count
op	31:51	0:0	6	*
water	31:53	0:0	6	s
op	31:54	0:0	6	->
water	31:56	0:0	6	index_duration
water	31:70	0:0	6	;
water	32:8	0:0	6	}
water	33:4	0:0	4	}
if	34:4	35:138	2	(nag)
cond	34:8	34:8	3	nag
water	34:8	0:0	4	nag
stmts	35:8	35:138	3	
call	35:8	35:137	4	av_log
arg	35:15	35:22	5	mxf->fc
water	35:15	0:0	6	mxf
op	35:18	0:0	6	->
water	35:20	0:0	6	fc
arg	35:24	35:36	5	AV_LOG_ERROR
water	35:24	0:0	6	AV_LOG_ERROR
arg	35:38	35:102	5	"failed to map EditUnit %"PRId64" in IndexSID %i to an offset\n"
water	35:38	0:0	6	"failed to map EditUnit %"
water	35:64	0:0	6	PRId64
water	35:70	0:0	6	" in IndexSID %i to an offset\n"
arg	35:104	35:113	5	edit_unit
water	35:104	0:0	6	edit_unit
arg	35:115	35:137	5	index_table->index_sid
water	35:115	0:0	6	index_table
op	35:126	0:0	6	->
water	35:128	0:0	6	index_sid
water	35:138	0:0	4	;
return	36:4	36:30	2	AVERROR_INVALIDDATA
water	36:11	0:0	3	AVERROR_INVALIDDATA
