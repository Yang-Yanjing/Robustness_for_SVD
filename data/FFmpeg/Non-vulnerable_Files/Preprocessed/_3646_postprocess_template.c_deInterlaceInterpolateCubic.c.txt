func	1:19	76:0	0	RENAME	(deInterlaceInterpolateCubic)
params	1:54	0:0	1	
param	1:55	1:68	2	uint8_t	src[]
param	1:70	1:80	2	int	stride
stmnts	4:4	74:4	1	
water	4:4	0:0	2	src
op	4:7	0:0	2	+=
water	4:10	0:0	2	stride
op	4:16	0:0	2	*
water	4:17	0:0	2	3
water	4:18	0:0	2	;
water	5:4	0:0	2	__asm__
water	5:12	0:0	2	volatile
water	5:20	0:0	2	(
water	6:8	0:0	2	"lea (%0, %1), %%"
water	6:26	0:0	2	REG_a
water	6:31	0:0	2	"                \n\t"
water	7:8	0:0	2	"lea (%%"
water	7:17	0:0	2	REG_a
water	7:22	0:0	2	", %1, 4), %%"
water	7:36	0:0	2	REG_d
water	7:41	0:0	2	"      \n\t"
water	8:8	0:0	2	"lea (%%"
water	8:17	0:0	2	REG_d
water	8:22	0:0	2	", %1, 4), %%"
water	8:36	0:0	2	REG_c
water	8:41	0:0	2	"      \n\t"
water	9:8	0:0	2	"add %1, %%"
water	9:20	0:0	2	REG_c
water	9:25	0:0	2	"                      \n\t"
water	11:8	0:0	2	"pxor %%xmm7, %%xmm7                    \n\t"
water	13:8	0:0	2	"movq "
water	14:8	0:0	2	"movq "
water	15:8	0:0	2	"movq "
water	16:8	0:0	2	"movq "
water	17:8	0:0	2	"pavgb %%xmm2, %%xmm1                   \n\t"
water	18:8	0:0	2	"pavgb %%xmm3, %%xmm0                   \n\t"
water	19:8	0:0	2	"punpcklbw %%xmm7, %%xmm0               \n\t"
water	20:8	0:0	2	"punpcklbw %%xmm7, %%xmm1               \n\t"
water	21:8	0:0	2	"psubw %%xmm1, %%xmm0                   \n\t"
water	22:8	0:0	2	"psraw $3, %%xmm0                       \n\t"
water	23:8	0:0	2	"psubw %%xmm0, %%xmm1                   \n\t"
water	24:8	0:0	2	"packuswb %%xmm1, %%xmm1                \n\t"
water	25:8	0:0	2	"movlps %%xmm1, "
water	27:8	0:0	2	"pxor %%mm7, %%mm7                      \n\t"
water	31:8	0:0	2	"movq "
water	32:8	0:0	2	"movq "
water	33:8	0:0	2	"movq "
water	34:8	0:0	2	"movq "
call	35:8	35:26	2	PAVGB
arg	35:14	35:19	3	%%mm2
op	35:14	0:0	4	%
op	35:15	0:0	4	%
water	35:16	0:0	4	mm2
arg	35:21	35:26	3	%%mm1
op	35:21	0:0	4	%
op	35:22	0:0	4	%
water	35:23	0:0	4	mm1
call	36:8	36:26	2	PAVGB
arg	36:14	36:19	3	%%mm3
op	36:14	0:0	4	%
op	36:15	0:0	4	%
water	36:16	0:0	4	mm3
arg	36:21	36:26	3	%%mm0
op	36:21	0:0	4	%
op	36:22	0:0	4	%
water	36:23	0:0	4	mm0
water	37:8	0:0	2	"movq %%mm0, %%mm2                      \n\t"
water	38:8	0:0	2	"punpcklbw %%mm7, %%mm0                 \n\t"
water	39:8	0:0	2	"punpckhbw %%mm7, %%mm2                 \n\t"
water	40:8	0:0	2	"movq %%mm1, %%mm3                      \n\t"
water	41:8	0:0	2	"punpcklbw %%mm7, %%mm1                 \n\t"
water	42:8	0:0	2	"punpckhbw %%mm7, %%mm3                 \n\t"
water	43:8	0:0	2	"psubw %%mm1, %%mm0                     \n\t"
water	44:8	0:0	2	"psubw %%mm3, %%mm2                     \n\t"
water	45:8	0:0	2	"psraw $3, %%mm0                        \n\t"
water	46:8	0:0	2	"psraw $3, %%mm2                        \n\t"
water	47:8	0:0	2	"psubw %%mm0, %%mm1                     \n\t"
water	48:8	0:0	2	"psubw %%mm2, %%mm3                     \n\t"
water	49:8	0:0	2	"packuswb %%mm3, %%mm1                  \n\t"
water	50:8	0:0	2	"movq %%mm1, "
call	53:0	53:83	2	DEINT_CUBIC
arg	53:12	53:24	3	(%0)
water	53:12	0:0	4	(
op	53:13	0:0	4	%
water	53:14	0:0	4	0
water	53:15	0:0	4	)
arg	53:26	53:38	3	(%%REGa,%1)
water	53:26	0:0	4	(
op	53:27	0:0	4	%
op	53:28	0:0	4	%
water	53:29	0:0	4	REGa
water	53:33	0:0	4	,
op	53:35	0:0	4	%
water	53:36	0:0	4	1
water	53:37	0:0	4	)
arg	53:40	53:55	3	(%%REGa,%1,2)
water	53:40	0:0	4	(
op	53:41	0:0	4	%
op	53:42	0:0	4	%
water	53:43	0:0	4	REGa
water	53:47	0:0	4	,
op	53:49	0:0	4	%
water	53:50	0:0	4	1
water	53:51	0:0	4	,
water	53:53	0:0	4	2
water	53:54	0:0	4	)
arg	53:57	53:69	3	(%0,%1,4)
water	53:57	0:0	4	(
op	53:58	0:0	4	%
water	53:59	0:0	4	0
water	53:60	0:0	4	,
op	53:62	0:0	4	%
water	53:63	0:0	4	1
water	53:64	0:0	4	,
water	53:66	0:0	4	4
water	53:67	0:0	4	)
arg	53:71	53:83	3	(%%REGd,%1)
water	53:71	0:0	4	(
op	53:72	0:0	4	%
op	53:73	0:0	4	%
water	53:74	0:0	4	REGd
water	53:78	0:0	4	,
op	53:80	0:0	4	%
water	53:81	0:0	4	1
water	53:82	0:0	4	)
call	54:0	54:82	2	DEINT_CUBIC
arg	54:12	54:24	3	(%%REGa,%1)
water	54:12	0:0	4	(
op	54:13	0:0	4	%
op	54:14	0:0	4	%
water	54:15	0:0	4	REGa
water	54:19	0:0	4	,
op	54:21	0:0	4	%
water	54:22	0:0	4	1
water	54:23	0:0	4	)
arg	54:26	54:38	3	(%0,%1,4)
water	54:26	0:0	4	(
op	54:27	0:0	4	%
water	54:28	0:0	4	0
water	54:29	0:0	4	,
op	54:31	0:0	4	%
water	54:32	0:0	4	1
water	54:33	0:0	4	,
water	54:35	0:0	4	4
water	54:36	0:0	4	)
arg	54:40	54:55	3	(%%REGd)
water	54:40	0:0	4	(
op	54:41	0:0	4	%
op	54:42	0:0	4	%
water	54:43	0:0	4	REGd
water	54:47	0:0	4	)
arg	54:57	54:69	3	(%%REGd,%1)
water	54:57	0:0	4	(
op	54:58	0:0	4	%
op	54:59	0:0	4	%
water	54:60	0:0	4	REGd
water	54:64	0:0	4	,
op	54:66	0:0	4	%
water	54:67	0:0	4	1
water	54:68	0:0	4	)
arg	54:71	54:82	3	(%0,%1,8)
water	54:71	0:0	4	(
op	54:72	0:0	4	%
water	54:73	0:0	4	0
water	54:74	0:0	4	,
op	54:76	0:0	4	%
water	54:77	0:0	4	1
water	54:78	0:0	4	,
water	54:80	0:0	4	8
water	54:81	0:0	4	)
call	55:0	55:79	2	DEINT_CUBIC
arg	55:12	55:24	3	(%0,%1,4)
water	55:12	0:0	4	(
op	55:13	0:0	4	%
water	55:14	0:0	4	0
water	55:15	0:0	4	,
op	55:17	0:0	4	%
water	55:18	0:0	4	1
water	55:19	0:0	4	,
water	55:21	0:0	4	4
water	55:22	0:0	4	)
arg	55:26	55:38	3	(%%REGd,%1)
water	55:26	0:0	4	(
op	55:27	0:0	4	%
op	55:28	0:0	4	%
water	55:29	0:0	4	REGd
water	55:33	0:0	4	,
op	55:35	0:0	4	%
water	55:36	0:0	4	1
water	55:37	0:0	4	)
arg	55:40	55:55	3	(%%REGd,%1,2)
water	55:40	0:0	4	(
op	55:41	0:0	4	%
op	55:42	0:0	4	%
water	55:43	0:0	4	REGd
water	55:47	0:0	4	,
op	55:49	0:0	4	%
water	55:50	0:0	4	1
water	55:51	0:0	4	,
water	55:53	0:0	4	2
water	55:54	0:0	4	)
arg	55:57	55:69	3	(%0,%1,8)
water	55:57	0:0	4	(
op	55:58	0:0	4	%
water	55:59	0:0	4	0
water	55:60	0:0	4	,
op	55:62	0:0	4	%
water	55:63	0:0	4	1
water	55:64	0:0	4	,
water	55:66	0:0	4	8
water	55:67	0:0	4	)
arg	55:71	55:79	3	(%%REGc)
water	55:71	0:0	4	(
op	55:72	0:0	4	%
op	55:73	0:0	4	%
water	55:74	0:0	4	REGc
water	55:78	0:0	4	)
call	56:0	56:86	2	DEINT_CUBIC
arg	56:12	56:24	3	(%%REGd,%1)
water	56:12	0:0	4	(
op	56:13	0:0	4	%
op	56:14	0:0	4	%
water	56:15	0:0	4	REGd
water	56:19	0:0	4	,
op	56:21	0:0	4	%
water	56:22	0:0	4	1
water	56:23	0:0	4	)
arg	56:26	56:38	3	(%0,%1,8)
water	56:26	0:0	4	(
op	56:27	0:0	4	%
water	56:28	0:0	4	0
water	56:29	0:0	4	,
op	56:31	0:0	4	%
water	56:32	0:0	4	1
water	56:33	0:0	4	,
water	56:35	0:0	4	8
water	56:36	0:0	4	)
arg	56:40	56:55	3	(%%REGd,%1,4)
water	56:40	0:0	4	(
op	56:41	0:0	4	%
op	56:42	0:0	4	%
water	56:43	0:0	4	REGd
water	56:47	0:0	4	,
op	56:49	0:0	4	%
water	56:50	0:0	4	1
water	56:51	0:0	4	,
water	56:53	0:0	4	4
water	56:54	0:0	4	)
arg	56:57	56:69	3	(%%REGc)
water	56:57	0:0	4	(
op	56:58	0:0	4	%
op	56:59	0:0	4	%
water	56:60	0:0	4	REGc
water	56:64	0:0	4	)
arg	56:71	56:86	3	(%%REGc,%1,2)
water	56:71	0:0	4	(
op	56:72	0:0	4	%
op	56:73	0:0	4	%
water	56:74	0:0	4	REGc
water	56:78	0:0	4	,
op	56:80	0:0	4	%
water	56:81	0:0	4	1
water	56:82	0:0	4	,
water	56:84	0:0	4	2
water	56:85	0:0	4	)
water	57:8	0:0	2	:
water	57:10	0:0	2	:
water	57:12	0:0	2	"r"
water	57:16	0:0	2	(
water	57:17	0:0	2	src
water	57:20	0:0	2	)
water	57:21	0:0	2	,
water	57:23	0:0	2	"r"
water	57:27	0:0	2	(
water	57:28	0:0	2	(
water	57:29	0:0	2	x86_reg
water	57:36	0:0	2	)
water	57:37	0:0	2	stride
water	57:43	0:0	2	)
water	58:8	0:0	2	:
water	60:8	0:0	2	XMM_CLOBBERS
water	60:20	0:0	2	(
water	60:21	0:0	2	"%xmm0"
water	60:28	0:0	2	,
water	60:30	0:0	2	"%xmm1"
water	60:37	0:0	2	,
water	60:39	0:0	2	"%xmm2"
water	60:46	0:0	2	,
water	60:48	0:0	2	"%xmm3"
water	60:55	0:0	2	,
water	60:57	0:0	2	"%xmm7"
water	60:64	0:0	2	,
water	60:65	0:0	2	)
water	62:8	0:0	2	"%"
water	62:11	0:0	2	REG_a
water	62:16	0:0	2	,
water	62:18	0:0	2	"%"
water	62:21	0:0	2	REG_d
water	62:26	0:0	2	,
water	62:28	0:0	2	"%"
water	62:31	0:0	2	REG_c
water	63:4	0:0	2	)
water	63:5	0:0	2	;
decl	66:4	66:9	2	int	x
water	67:4	0:0	2	src
op	67:7	0:0	2	+=
water	67:10	0:0	2	stride
op	67:16	0:0	2	*
water	67:17	0:0	2	3
water	67:18	0:0	2	;
for	68:4	74:4	2	(x = 0 ;x < 8;x ++)
forinit	68:8	68:11	3	x = 0 ;
water	68:8	0:0	4	x
op	68:9	0:0	4	=
water	68:10	0:0	4	0
water	68:11	0:0	4	;
cond	68:13	68:15	3	x < 8
water	68:13	0:0	4	x
op	68:14	0:0	4	<
water	68:15	0:0	4	8
forexpr	68:18	68:19	3	x ++
water	68:18	0:0	4	x
op	68:19	0:0	4	++
stmts	68:22	74:4	3	
water	68:22	0:0	4	{
water	69:8	0:0	4	src
op	69:11	0:0	4	[
water	69:12	0:0	4	stride
op	69:18	0:0	4	*
water	69:19	0:0	4	3
op	69:20	0:0	4	]
op	69:22	0:0	4	=
call	69:24	69:109	4	av_clip_uint8
arg	69:38	69:109	5	(-src[0]+9*src[stride*2]+9*src[stride*4]-src[stride*6])>>4
water	69:38	0:0	6	(
op	69:39	0:0	6	-
water	69:40	0:0	6	src
op	69:43	0:0	6	[
water	69:44	0:0	6	0
op	69:45	0:0	6	]
op	69:54	0:0	6	+
water	69:56	0:0	6	9
op	69:57	0:0	6	*
water	69:58	0:0	6	src
op	69:61	0:0	6	[
water	69:62	0:0	6	stride
op	69:68	0:0	6	*
water	69:69	0:0	6	2
op	69:70	0:0	6	]
op	69:72	0:0	6	+
water	69:74	0:0	6	9
op	69:75	0:0	6	*
water	69:76	0:0	6	src
op	69:79	0:0	6	[
water	69:80	0:0	6	stride
op	69:86	0:0	6	*
water	69:87	0:0	6	4
op	69:88	0:0	6	]
op	69:90	0:0	6	-
water	69:92	0:0	6	src
op	69:95	0:0	6	[
water	69:96	0:0	6	stride
op	69:102	0:0	6	*
water	69:103	0:0	6	6
op	69:104	0:0	6	]
water	69:105	0:0	6	)
op	69:106	0:0	6	>>
water	69:108	0:0	6	4
water	69:110	0:0	4	;
water	70:8	0:0	4	src
op	70:11	0:0	4	[
water	70:12	0:0	4	stride
op	70:18	0:0	4	*
water	70:19	0:0	4	5
op	70:20	0:0	4	]
op	70:22	0:0	4	=
call	70:24	70:109	4	av_clip_uint8
arg	70:38	70:109	5	(-src[stride*2]+9*src[stride*4]+9*src[stride*6]-src[stride*8])>>4
water	70:38	0:0	6	(
op	70:39	0:0	6	-
water	70:40	0:0	6	src
op	70:43	0:0	6	[
water	70:44	0:0	6	stride
op	70:50	0:0	6	*
water	70:51	0:0	6	2
op	70:52	0:0	6	]
op	70:54	0:0	6	+
water	70:56	0:0	6	9
op	70:57	0:0	6	*
water	70:58	0:0	6	src
op	70:61	0:0	6	[
water	70:62	0:0	6	stride
op	70:68	0:0	6	*
water	70:69	0:0	6	4
op	70:70	0:0	6	]
op	70:72	0:0	6	+
water	70:74	0:0	6	9
op	70:75	0:0	6	*
water	70:76	0:0	6	src
op	70:79	0:0	6	[
water	70:80	0:0	6	stride
op	70:86	0:0	6	*
water	70:87	0:0	6	6
op	70:88	0:0	6	]
op	70:90	0:0	6	-
water	70:92	0:0	6	src
op	70:95	0:0	6	[
water	70:96	0:0	6	stride
op	70:102	0:0	6	*
water	70:103	0:0	6	8
op	70:104	0:0	6	]
water	70:105	0:0	6	)
op	70:106	0:0	6	>>
water	70:108	0:0	6	4
water	70:110	0:0	4	;
water	71:8	0:0	4	src
op	71:11	0:0	4	[
water	71:12	0:0	4	stride
op	71:18	0:0	4	*
water	71:19	0:0	4	7
op	71:20	0:0	4	]
op	71:22	0:0	4	=
call	71:24	71:110	4	av_clip_uint8
arg	71:38	71:110	5	(-src[stride*4]+9*src[stride*6]+9*src[stride*8]-src[stride*10])>>4
water	71:38	0:0	6	(
op	71:39	0:0	6	-
water	71:40	0:0	6	src
op	71:43	0:0	6	[
water	71:44	0:0	6	stride
op	71:50	0:0	6	*
water	71:51	0:0	6	4
op	71:52	0:0	6	]
op	71:54	0:0	6	+
water	71:56	0:0	6	9
op	71:57	0:0	6	*
water	71:58	0:0	6	src
op	71:61	0:0	6	[
water	71:62	0:0	6	stride
op	71:68	0:0	6	*
water	71:69	0:0	6	6
op	71:70	0:0	6	]
op	71:72	0:0	6	+
water	71:74	0:0	6	9
op	71:75	0:0	6	*
water	71:76	0:0	6	src
op	71:79	0:0	6	[
water	71:80	0:0	6	stride
op	71:86	0:0	6	*
water	71:87	0:0	6	8
op	71:88	0:0	6	]
op	71:90	0:0	6	-
water	71:92	0:0	6	src
op	71:95	0:0	6	[
water	71:96	0:0	6	stride
op	71:102	0:0	6	*
water	71:103	0:0	6	10
op	71:105	0:0	6	]
water	71:106	0:0	6	)
op	71:107	0:0	6	>>
water	71:109	0:0	6	4
water	71:111	0:0	4	;
water	72:8	0:0	4	src
op	72:11	0:0	4	[
water	72:12	0:0	4	stride
op	72:18	0:0	4	*
water	72:19	0:0	4	9
op	72:20	0:0	4	]
op	72:22	0:0	4	=
call	72:24	72:111	4	av_clip_uint8
arg	72:38	72:111	5	(-src[stride*6]+9*src[stride*8]+9*src[stride*10]-src[stride*12])>>4
water	72:38	0:0	6	(
op	72:39	0:0	6	-
water	72:40	0:0	6	src
op	72:43	0:0	6	[
water	72:44	0:0	6	stride
op	72:50	0:0	6	*
water	72:51	0:0	6	6
op	72:52	0:0	6	]
op	72:54	0:0	6	+
water	72:56	0:0	6	9
op	72:57	0:0	6	*
water	72:58	0:0	6	src
op	72:61	0:0	6	[
water	72:62	0:0	6	stride
op	72:68	0:0	6	*
water	72:69	0:0	6	8
op	72:70	0:0	6	]
op	72:72	0:0	6	+
water	72:74	0:0	6	9
op	72:75	0:0	6	*
water	72:76	0:0	6	src
op	72:79	0:0	6	[
water	72:80	0:0	6	stride
op	72:86	0:0	6	*
water	72:87	0:0	6	10
op	72:89	0:0	6	]
op	72:91	0:0	6	-
water	72:93	0:0	6	src
op	72:96	0:0	6	[
water	72:97	0:0	6	stride
op	72:103	0:0	6	*
water	72:104	0:0	6	12
op	72:106	0:0	6	]
water	72:107	0:0	6	)
op	72:108	0:0	6	>>
water	72:110	0:0	6	4
water	72:112	0:0	4	;
water	73:8	0:0	4	src
op	73:11	0:0	4	++
water	73:13	0:0	4	;
water	74:4	0:0	4	}
