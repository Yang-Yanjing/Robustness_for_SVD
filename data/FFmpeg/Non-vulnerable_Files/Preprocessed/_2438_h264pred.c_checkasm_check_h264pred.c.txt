func	1:0	27:0	0	void	checkasm_check_h264pred
params	1:28	0:0	1	
param	1:29	1:33	2	void
stmnts	3:4	26:4	1	
water	3:4	0:0	2	static
water	3:11	0:0	2	const
water	3:17	0:0	2	struct
water	3:24	0:0	2	{
call	4:8	4:19	2	void
arg	4:14	4:19	3	*func
op	4:14	0:0	4	*
water	4:15	0:0	4	func
water	4:20	0:0	2	(
water	4:21	0:0	2	H264PredContext
op	4:36	0:0	2	*
water	4:37	0:0	2	,
water	4:39	0:0	2	uint8_t
op	4:46	0:0	2	*
water	4:47	0:0	2	,
water	4:49	0:0	2	uint8_t
op	4:56	0:0	2	*
water	4:57	0:0	2	,
water	4:59	0:0	2	int
water	4:62	0:0	2	,
water	4:64	0:0	2	int
water	4:67	0:0	2	,
water	4:69	0:0	2	int
water	4:72	0:0	2	)
water	4:73	0:0	2	;
water	5:8	0:0	2	const
water	5:14	0:0	2	char
op	5:19	0:0	2	*
water	5:20	0:0	2	name
water	5:24	0:0	2	;
water	6:4	0:0	2	}
water	6:6	0:0	2	tests
op	6:11	0:0	2	[
op	6:12	0:0	2	]
op	6:14	0:0	2	=
water	6:16	0:0	2	{
water	7:8	0:0	2	{
water	7:10	0:0	2	check_pred4x4
water	7:23	0:0	2	,
water	7:27	0:0	2	"pred4x4"
water	7:39	0:0	2	}
water	7:40	0:0	2	,
water	8:8	0:0	2	{
water	8:10	0:0	2	check_pred8x8
water	8:23	0:0	2	,
water	8:27	0:0	2	"pred8x8"
water	8:39	0:0	2	}
water	8:40	0:0	2	,
water	9:8	0:0	2	{
water	9:10	0:0	2	check_pred16x16
water	9:25	0:0	2	,
water	9:27	0:0	2	"pred16x16"
water	9:39	0:0	2	}
water	9:40	0:0	2	,
water	10:8	0:0	2	{
water	10:10	0:0	2	check_pred8x8l
water	10:24	0:0	2	,
water	10:27	0:0	2	"pred8x8l"
water	10:39	0:0	2	}
water	10:40	0:0	2	,
water	11:4	0:0	2	}
water	11:5	0:0	2	;
call	12:4	12:46	2	LOCAL_ALIGNED_16
arg	12:21	12:28	3	uint8_t
water	12:21	0:0	4	uint8_t
arg	12:30	12:34	3	buf0
water	12:30	0:0	4	buf0
arg	12:36	12:46	3	[BUF_SIZE]
op	12:36	0:0	4	[
water	12:37	0:0	4	BUF_SIZE
op	12:45	0:0	4	]
water	12:47	0:0	2	;
call	13:4	13:46	2	LOCAL_ALIGNED_16
arg	13:21	13:28	3	uint8_t
water	13:21	0:0	4	uint8_t
arg	13:30	13:34	3	buf1
water	13:30	0:0	4	buf1
arg	13:36	13:46	3	[BUF_SIZE]
op	13:36	0:0	4	[
water	13:37	0:0	4	BUF_SIZE
op	13:45	0:0	4	]
water	13:47	0:0	2	;
decl	14:4	14:21	2	H264PredContext	h
decl	15:4	15:45	2	int	test
water	15:12	0:0	2	,
decl	15:4	15:45	2	int	codec
water	15:19	0:0	2	,
decl	15:4	15:45	2	int	chroma_format
water	15:34	0:0	2	,
decl	15:4	15:45	2	int	bit_depth
for	16:4	26:4	2	(test = 0 ;test <FF_ARRAY_ELEMS (tests );test ++)
forinit	16:9	16:17	3	test = 0 ;
water	16:9	0:0	4	test
op	16:14	0:0	4	=
water	16:16	0:0	4	0
water	16:17	0:0	4	;
cond	16:19	16:46	3	test <FF_ARRAY_ELEMS (tests )
water	16:19	0:0	4	test
op	16:24	0:0	4	<
call	16:26	16:46	4	FF_ARRAY_ELEMS
arg	16:41	16:46	5	tests
water	16:41	0:0	6	tests
forexpr	16:49	16:53	3	test ++
water	16:49	0:0	4	test
op	16:53	0:0	4	++
stmts	16:57	26:4	3	
water	16:57	0:0	4	{
for	17:8	24:8	4	(codec = 0 ;codec < 4;codec ++)
forinit	17:13	17:22	5	codec = 0 ;
water	17:13	0:0	6	codec
op	17:19	0:0	6	=
water	17:21	0:0	6	0
water	17:22	0:0	6	;
cond	17:24	17:32	5	codec < 4
water	17:24	0:0	6	codec
op	17:30	0:0	6	<
water	17:32	0:0	6	4
forexpr	17:35	17:40	5	codec ++
water	17:35	0:0	6	codec
op	17:40	0:0	6	++
stmts	17:44	24:8	5	
water	17:44	0:0	6	{
decl	18:12	18:43	6	int	codec_id
op	18:25	0:0	6	=
water	18:27	0:0	6	codec_ids
op	18:36	0:0	6	[
water	18:37	0:0	6	codec
op	18:42	0:0	6	]
for	19:12	23:16	6	(bit_depth = 8 ;bit_depth <= ( codec_id == AV_CODEC_ID_H264 ? 10 : 8 );bit_depth ++)
forinit	19:17	19:30	7	bit_depth = 8 ;
water	19:17	0:0	8	bit_depth
op	19:27	0:0	8	=
water	19:29	0:0	8	8
water	19:30	0:0	8	;
cond	19:32	19:83	7	bit_depth <= ( codec_id == AV_CODEC_ID_H264 ? 10 : 8 )
water	19:32	0:0	8	bit_depth
op	19:42	0:0	8	<=
water	19:45	0:0	8	(
water	19:46	0:0	8	codec_id
op	19:55	0:0	8	==
water	19:58	0:0	8	AV_CODEC_ID_H264
water	19:75	0:0	8	?
water	19:77	0:0	8	10
water	19:80	0:0	8	:
water	19:82	0:0	8	8
water	19:83	0:0	8	)
forexpr	19:86	19:95	7	bit_depth ++
water	19:86	0:0	8	bit_depth
op	19:95	0:0	8	++
stmts	20:16	23:16	7	
for	20:16	23:16	8	(chroma_format = 1 ;chroma_format <= ( codec_id == AV_CODEC_ID_H264 ? 2 : 1 );chroma_format ++)
forinit	20:21	20:38	9	chroma_format = 1 ;
water	20:21	0:0	10	chroma_format
op	20:35	0:0	10	=
water	20:37	0:0	10	1
water	20:38	0:0	10	;
cond	20:40	20:94	9	chroma_format <= ( codec_id == AV_CODEC_ID_H264 ? 2 : 1 )
water	20:40	0:0	10	chroma_format
op	20:54	0:0	10	<=
water	20:57	0:0	10	(
water	20:58	0:0	10	codec_id
op	20:67	0:0	10	==
water	20:70	0:0	10	AV_CODEC_ID_H264
water	20:87	0:0	10	?
water	20:89	0:0	10	2
water	20:91	0:0	10	:
water	20:93	0:0	10	1
water	20:94	0:0	10	)
forexpr	20:97	20:110	9	chroma_format ++
water	20:97	0:0	10	chroma_format
op	20:110	0:0	10	++
stmts	20:114	23:16	9	
water	20:114	0:0	10	{
call	21:20	21:76	10	ff_h264_pred_init
arg	21:38	21:40	11	&h
op	21:38	0:0	12	&
water	21:39	0:0	12	h
arg	21:42	21:50	11	codec_id
water	21:42	0:0	12	codec_id
arg	21:52	21:61	11	bit_depth
water	21:52	0:0	12	bit_depth
arg	21:63	21:76	11	chroma_format
water	21:63	0:0	12	chroma_format
water	21:77	0:0	10	;
water	22:20	0:0	10	tests
op	22:25	0:0	10	[
water	22:26	0:0	10	test
op	22:30	0:0	10	]
op	22:31	0:0	10	.
call	22:32	22:84	10	func
arg	22:37	22:39	11	&h
op	22:37	0:0	12	&
water	22:38	0:0	12	h
arg	22:41	22:45	11	buf0
water	22:41	0:0	12	buf0
arg	22:47	22:51	11	buf1
water	22:47	0:0	12	buf1
arg	22:53	22:58	11	codec
water	22:53	0:0	12	codec
arg	22:60	22:73	11	chroma_format
water	22:60	0:0	12	chroma_format
arg	22:75	22:84	11	bit_depth
water	22:75	0:0	12	bit_depth
water	22:85	0:0	10	;
water	23:16	0:0	10	}
water	24:8	0:0	6	}
call	25:8	25:37	4	report
arg	25:15	25:19	5	"%s"
water	25:15	0:0	6	"%s"
arg	25:21	25:37	5	tests[test].name
water	25:21	0:0	6	tests
op	25:26	0:0	6	[
water	25:27	0:0	6	test
op	25:31	0:0	6	]
op	25:32	0:0	6	.
water	25:33	0:0	6	name
water	25:38	0:0	4	;
water	26:4	0:0	4	}
