func	1:0	110:0	0	static int	output_mpd
params	1:21	0:0	1	
param	1:22	1:43	2	struct Tracks *	tracks
param	1:45	1:65	2	const char *	filename
stmnts	0:0	109:14	1	
decl	3:4	3:13	2	FILE	*out
decl	4:4	4:21	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:21	2	int	j
water	4:12	0:0	2	,
decl	4:4	4:21	2	int	ret
op	4:18	0:0	2	=
water	4:20	0:0	2	0
decl	5:4	5:52	2	struct Track	**adaptation_sets_buf[2]
op	5:42	0:0	2	=
water	5:44	0:0	2	{
water	5:46	0:0	2	NULL
water	5:51	0:0	2	}
decl	6:4	6:35	2	struct Track	***adaptation_sets
decl	7:4	7:32	2	int	nb_tracks_buf[2]
op	7:25	0:0	2	=
water	7:27	0:0	2	{
water	7:29	0:0	2	0
water	7:31	0:0	2	}
decl	8:4	8:18	2	int	*nb_tracks
decl	9:4	9:20	2	int	set
water	9:11	0:0	2	,
decl	9:4	9:20	2	int	nb_sets
if	10:4	31:4	2	(! tracks -> multiple_tracks_per_file)
cond	10:8	10:17	3	! tracks -> multiple_tracks_per_file
op	10:8	0:0	4	!
water	10:9	0:0	4	tracks
op	10:15	0:0	4	->
water	10:17	0:0	4	multiple_tracks_per_file
stmts	10:43	31:4	3	
water	10:43	0:0	4	{
water	11:8	0:0	4	adaptation_sets
op	11:24	0:0	4	=
water	11:26	0:0	4	adaptation_sets_buf
water	11:45	0:0	4	;
water	12:8	0:0	4	nb_tracks
op	12:18	0:0	4	=
water	12:20	0:0	4	nb_tracks_buf
water	12:33	0:0	4	;
water	13:8	0:0	4	nb_sets
op	13:16	0:0	4	=
water	13:18	0:0	4	2
water	13:19	0:0	4	;
for	14:8	20:8	4	(i = 0 ;i < 2;i ++)
forinit	14:13	14:18	5	i = 0 ;
water	14:13	0:0	6	i
op	14:15	0:0	6	=
water	14:17	0:0	6	0
water	14:18	0:0	6	;
cond	14:20	14:24	5	i < 2
water	14:20	0:0	6	i
op	14:22	0:0	6	<
water	14:24	0:0	6	2
forexpr	14:27	14:28	5	i ++
water	14:27	0:0	6	i
op	14:28	0:0	6	++
stmts	14:32	20:8	5	
water	14:32	0:0	6	{
water	15:12	0:0	6	adaptation_sets
op	15:27	0:0	6	[
water	15:28	0:0	6	i
op	15:29	0:0	6	]
op	15:31	0:0	6	=
call	15:33	15:95	6	av_malloc_array
arg	15:49	15:66	7	tracks->nb_tracks
water	15:49	0:0	8	tracks
op	15:55	0:0	8	->
water	15:57	0:0	8	nb_tracks
arg	15:68	15:95	7	sizeof(*adaptation_sets[i])
op	15:68	0:0	8	sizeof
water	15:74	0:0	8	(
op	15:75	0:0	8	*
water	15:76	0:0	8	adaptation_sets
op	15:91	0:0	8	[
water	15:92	0:0	8	i
op	15:93	0:0	8	]
water	15:94	0:0	8	)
water	15:96	0:0	6	;
if	16:12	19:12	6	(! adaptation_sets [ i ])
cond	16:16	16:34	7	! adaptation_sets [ i ]
op	16:16	0:0	8	!
water	16:17	0:0	8	adaptation_sets
op	16:32	0:0	8	[
water	16:33	0:0	8	i
op	16:34	0:0	8	]
stmts	16:37	19:12	7	
water	16:37	0:0	8	{
water	17:16	0:0	8	ret
op	17:20	0:0	8	=
call	17:22	17:36	8	AVERROR
arg	17:30	17:36	9	ENOMEM
water	17:30	0:0	10	ENOMEM
water	17:37	0:0	8	;
goto	18:16	18:24	8	err
water	18:21	0:0	9	err
water	19:12	0:0	8	}
water	20:8	0:0	6	}
for	21:8	30:8	4	(i = 0 ;i < tracks -> nb_tracks;i ++)
forinit	21:13	21:18	5	i = 0 ;
water	21:13	0:0	6	i
op	21:15	0:0	6	=
water	21:17	0:0	6	0
water	21:18	0:0	6	;
cond	21:20	21:32	5	i < tracks -> nb_tracks
water	21:20	0:0	6	i
op	21:22	0:0	6	<
water	21:24	0:0	6	tracks
op	21:30	0:0	6	->
water	21:32	0:0	6	nb_tracks
forexpr	21:43	21:44	5	i ++
water	21:43	0:0	6	i
op	21:44	0:0	6	++
stmts	21:48	30:8	5	
water	21:48	0:0	6	{
decl	22:12	22:30	6	int	set_index
op	22:26	0:0	6	=
op	22:28	0:0	6	-
water	22:29	0:0	6	1
if	23:12	24:29	6	(tracks -> tracks [ i ] -> is_video)
cond	23:16	23:35	7	tracks -> tracks [ i ] -> is_video
water	23:16	0:0	8	tracks
op	23:22	0:0	8	->
water	23:24	0:0	8	tracks
op	23:30	0:0	8	[
water	23:31	0:0	8	i
op	23:32	0:0	8	]
op	23:33	0:0	8	->
water	23:35	0:0	8	is_video
stmts	24:16	24:29	7	
water	24:16	0:0	8	set_index
op	24:26	0:0	8	=
water	24:28	0:0	8	0
water	24:29	0:0	8	;
else	25:12	26:29	6
stmts	25:17	26:29	7	
if	25:17	26:29	8	(tracks -> tracks [ i ] -> is_audio)
cond	25:21	25:40	9	tracks -> tracks [ i ] -> is_audio
water	25:21	0:0	10	tracks
op	25:27	0:0	10	->
water	25:29	0:0	10	tracks
op	25:35	0:0	10	[
water	25:36	0:0	10	i
op	25:37	0:0	10	]
op	25:38	0:0	10	->
water	25:40	0:0	10	is_audio
stmts	26:16	26:29	9	
water	26:16	0:0	10	set_index
op	26:26	0:0	10	=
water	26:28	0:0	10	1
water	26:29	0:0	10	;
else	27:12	28:24	6
stmts	28:16	28:24	7	
continue	28:16	28:24	8	
water	29:12	0:0	6	adaptation_sets
op	29:27	0:0	6	[
water	29:28	0:0	6	set_index
op	29:37	0:0	6	]
op	29:38	0:0	6	[
water	29:39	0:0	6	nb_tracks
op	29:48	0:0	6	[
water	29:49	0:0	6	set_index
op	29:58	0:0	6	]
op	29:59	0:0	6	++
op	29:61	0:0	6	]
op	29:63	0:0	6	=
water	29:65	0:0	6	tracks
op	29:71	0:0	6	->
water	29:73	0:0	6	tracks
op	29:79	0:0	6	[
water	29:80	0:0	6	i
op	29:81	0:0	6	]
water	29:82	0:0	6	;
water	30:8	0:0	6	}
water	31:4	0:0	4	}
else	31:6	35:4	2
stmts	31:11	35:4	3	
water	31:11	0:0	4	{
water	32:8	0:0	4	adaptation_sets
op	32:24	0:0	4	=
op	32:26	0:0	4	&
water	32:27	0:0	4	tracks
op	32:33	0:0	4	->
water	32:35	0:0	4	tracks
water	32:41	0:0	4	;
water	33:8	0:0	4	nb_tracks
op	33:18	0:0	4	=
op	33:20	0:0	4	&
water	33:21	0:0	4	tracks
op	33:27	0:0	4	->
water	33:29	0:0	4	nb_tracks
water	33:38	0:0	4	;
water	34:8	0:0	4	nb_sets
op	34:16	0:0	4	=
water	34:18	0:0	4	1
water	34:19	0:0	4	;
water	35:4	0:0	4	}
water	36:4	0:0	2	out
op	36:8	0:0	2	=
call	36:10	36:29	2	fopen
arg	36:16	36:24	3	filename
water	36:16	0:0	4	filename
arg	36:26	36:29	3	"w"
water	36:26	0:0	4	"w"
water	36:30	0:0	2	;
if	37:4	41:4	2	(! out)
cond	37:8	37:9	3	! out
op	37:8	0:0	4	!
water	37:9	0:0	4	out
stmts	37:14	41:4	3	
water	37:14	0:0	4	{
water	38:8	0:0	4	ret
op	38:12	0:0	4	=
call	38:14	38:27	4	AVERROR
arg	38:22	38:27	5	errno
water	38:22	0:0	6	errno
water	38:28	0:0	4	;
call	39:8	39:23	4	perror
arg	39:15	39:23	5	filename
water	39:15	0:0	6	filename
water	39:24	0:0	4	;
return	40:8	40:18	4	ret
water	40:15	0:0	5	ret
water	41:4	0:0	4	}
call	42:4	42:63	2	fprintf
arg	42:12	42:15	3	out
water	42:12	0:0	4	out
arg	42:17	42:63	3	"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
water	42:17	0:0	4	"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
water	42:64	0:0	2	;
call	43:4	48:37	2	fprintf
arg	43:12	43:15	3	out
water	43:12	0:0	4	out
arg	43:17	48:37	3	"<MPD xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n""\txmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n""\txmlns:xlink=\"http://www.w3.org/1999/xlink\"\n""\txsi:schemaLocation=\"urn:mpeg:DASH:schema:MPD:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n""\tprofiles=\"urn:mpeg:dash:profile:isoff-on-demand:2011\"\n""\ttype=\"static\"\n"
water	43:17	0:0	4	"<MPD xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
water	44:16	0:0	4	"\txmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n"
water	45:16	0:0	4	"\txmlns:xlink=\"http://www.w3.org/1999/xlink\"\n"
water	46:16	0:0	4	"\txsi:schemaLocation=\"urn:mpeg:DASH:schema:MPD:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n"
water	47:16	0:0	4	"\tprofiles=\"urn:mpeg:dash:profile:isoff-on-demand:2011\"\n"
water	48:16	0:0	4	"\ttype=\"static\"\n"
water	48:38	0:0	2	;
call	49:4	49:49	2	fprintf
arg	49:12	49:15	3	out
water	49:12	0:0	4	out
arg	49:17	49:49	3	"\tmediaPresentationDuration=\""
water	49:17	0:0	4	"\tmediaPresentationDuration=\""
water	49:50	0:0	2	;
call	50:4	50:54	2	write_time
arg	50:15	50:18	3	out
water	50:15	0:0	4	out
arg	50:20	50:36	3	tracks->duration
water	50:20	0:0	4	tracks
op	50:26	0:0	4	->
water	50:28	0:0	4	duration
arg	50:38	50:39	3	1
water	50:38	0:0	4	1
arg	50:41	50:54	3	AV_ROUND_DOWN
water	50:41	0:0	4	AV_ROUND_DOWN
water	50:55	0:0	2	;
call	51:4	51:23	2	fprintf
arg	51:12	51:15	3	out
water	51:12	0:0	4	out
arg	51:17	51:23	3	"\"\n"
water	51:17	0:0	4	"\"\n"
water	51:24	0:0	2	;
call	52:4	52:46	2	fprintf
arg	52:12	52:15	3	out
water	52:12	0:0	4	out
arg	52:17	52:46	3	"\tminBufferTime=\"PT5S\">\n"
water	52:17	0:0	4	"\tminBufferTime=\"PT5S\">\n"
water	52:47	0:0	2	;
call	53:4	53:48	2	fprintf
arg	53:12	53:15	3	out
water	53:12	0:0	4	out
arg	53:17	53:48	3	"\t<Period start=\"PT0.0S\">\n"
water	53:17	0:0	4	"\t<Period start=\"PT0.0S\">\n"
water	53:49	0:0	2	;
for	54:4	102:4	2	(set = 0 ;set < nb_sets;set ++)
forinit	54:9	54:16	3	set = 0 ;
water	54:9	0:0	4	set
op	54:13	0:0	4	=
water	54:15	0:0	4	0
water	54:16	0:0	4	;
cond	54:18	54:24	3	set < nb_sets
water	54:18	0:0	4	set
op	54:22	0:0	4	<
water	54:24	0:0	4	nb_sets
forexpr	54:33	54:36	3	set ++
water	54:33	0:0	4	set
op	54:36	0:0	4	++
stmts	54:40	102:4	3	
water	54:40	0:0	4	{
if	55:8	56:20	4	(nb_tracks [ set ] == 0)
cond	55:12	55:30	5	nb_tracks [ set ] == 0
water	55:12	0:0	6	nb_tracks
op	55:21	0:0	6	[
water	55:22	0:0	6	set
op	55:25	0:0	6	]
op	55:27	0:0	6	==
water	55:30	0:0	6	0
stmts	56:12	56:20	5	
continue	56:12	56:20	6	
call	57:8	57:70	4	fprintf
arg	57:16	57:19	5	out
water	57:16	0:0	6	out
arg	57:21	57:70	5	"\t\t<AdaptationSet segmentAlignment=\"true\">\n"
water	57:21	0:0	6	"\t\t<AdaptationSet segmentAlignment=\"true\">\n"
water	57:71	0:0	4	;
if	58:8	65:8	4	(nb_sets == 1)
cond	58:12	58:23	5	nb_sets == 1
water	58:12	0:0	6	nb_sets
op	58:20	0:0	6	==
water	58:23	0:0	6	1
stmts	58:26	65:8	5	
water	58:26	0:0	6	{
for	59:12	64:12	6	(i = 0 ;i < nb_tracks [ set ];i ++)
forinit	59:17	59:22	7	i = 0 ;
water	59:17	0:0	8	i
op	59:19	0:0	8	=
water	59:21	0:0	8	0
water	59:22	0:0	8	;
cond	59:24	59:41	7	i < nb_tracks [ set ]
water	59:24	0:0	8	i
op	59:26	0:0	8	<
water	59:28	0:0	8	nb_tracks
op	59:37	0:0	8	[
water	59:38	0:0	8	set
op	59:41	0:0	8	]
forexpr	59:44	59:45	7	i ++
water	59:44	0:0	8	i
op	59:45	0:0	8	++
stmts	59:49	64:12	7	
water	59:49	0:0	8	{
decl	60:16	60:61	8	struct Track	*track
op	60:36	0:0	8	=
water	60:38	0:0	8	adaptation_sets
op	60:53	0:0	8	[
water	60:54	0:0	8	set
op	60:57	0:0	8	]
op	60:58	0:0	8	[
water	60:59	0:0	8	i
op	60:60	0:0	8	]
if	61:16	62:25	8	(strcmp (track -> name ,adaptation_sets [ set ] [ 0 ] -> name ))
cond	61:20	61:69	9	strcmp (track -> name ,adaptation_sets [ set ] [ 0 ] -> name )
call	61:20	61:69	10	strcmp
arg	61:27	61:38	11	track->name
water	61:27	0:0	12	track
op	61:32	0:0	12	->
water	61:34	0:0	12	name
arg	61:40	61:69	11	adaptation_sets[set][0]->name
water	61:40	0:0	12	adaptation_sets
op	61:55	0:0	12	[
water	61:56	0:0	12	set
op	61:59	0:0	12	]
op	61:60	0:0	12	[
water	61:61	0:0	12	0
op	61:62	0:0	12	]
op	61:63	0:0	12	->
water	61:65	0:0	12	name
stmts	62:20	62:25	9	
break	62:20	62:25	10	
call	63:16	63:142	8	fprintf
arg	63:24	63:27	9	out
water	63:24	0:0	10	out
arg	63:29	63:88	9	"\t\t\t<ContentComponent id=\"%d\" contentType=\"%s\" />\n"
water	63:29	0:0	10	"\t\t\t<ContentComponent id=\"%d\" contentType=\"%s\" />\n"
arg	63:90	63:105	9	track->track_id
water	63:90	0:0	10	track
op	63:95	0:0	10	->
water	63:97	0:0	10	track_id
arg	63:107	63:142	9	track->is_audio?"audio":"video"
water	63:107	0:0	10	track
op	63:112	0:0	10	->
water	63:114	0:0	10	is_audio
water	63:123	0:0	10	?
water	63:125	0:0	10	"audio"
water	63:133	0:0	10	:
water	63:135	0:0	10	"video"
water	63:143	0:0	8	;
water	64:12	0:0	8	}
water	65:8	0:0	6	}
for	66:8	100:8	4	(i = 0 ;i < nb_tracks [ set ];)
forinit	66:13	66:18	5	i = 0 ;
water	66:13	0:0	6	i
op	66:15	0:0	6	=
water	66:17	0:0	6	0
water	66:18	0:0	6	;
cond	66:20	66:37	5	i < nb_tracks [ set ]
water	66:20	0:0	6	i
op	66:22	0:0	6	<
water	66:24	0:0	6	nb_tracks
op	66:33	0:0	6	[
water	66:34	0:0	6	set
op	66:37	0:0	6	]
forexpr	0:0	0:0	5	
stmts	66:42	100:8	5	
water	66:42	0:0	6	{
decl	67:12	67:63	6	struct Track	*first_track
op	67:38	0:0	6	=
water	67:40	0:0	6	adaptation_sets
op	67:55	0:0	6	[
water	67:56	0:0	6	set
op	67:59	0:0	6	]
op	67:60	0:0	6	[
water	67:61	0:0	6	i
op	67:62	0:0	6	]
decl	68:12	68:81	6	int	width
op	68:22	0:0	6	=
water	68:24	0:0	6	0
water	68:25	0:0	6	,
decl	68:12	68:81	6	int	height
op	68:34	0:0	6	=
water	68:36	0:0	6	0
water	68:37	0:0	6	,
decl	68:12	68:81	6	int	sample_rate
op	68:51	0:0	6	=
water	68:53	0:0	6	0
water	68:54	0:0	6	,
decl	68:12	68:81	6	int	channels
op	68:65	0:0	6	=
water	68:67	0:0	6	0
water	68:68	0:0	6	,
decl	68:12	68:81	6	int	bitrate
op	68:78	0:0	6	=
water	68:80	0:0	6	0
call	69:12	69:71	6	fprintf
arg	69:20	69:23	7	out
water	69:20	0:0	8	out
arg	69:25	69:68	7	"\t\t\t<Representation id=\"%d\" codecs=\""
water	69:25	0:0	8	"\t\t\t<Representation id=\"%d\" codecs=\""
arg	69:70	69:71	7	i
water	69:70	0:0	8	i
water	69:72	0:0	6	;
for	70:12	86:12	6	(j = i ;j < nb_tracks [ set ];j ++)
forinit	70:17	70:22	7	j = i ;
water	70:17	0:0	8	j
op	70:19	0:0	8	=
water	70:21	0:0	8	i
water	70:22	0:0	8	;
cond	70:24	70:41	7	j < nb_tracks [ set ]
water	70:24	0:0	8	j
op	70:26	0:0	8	<
water	70:28	0:0	8	nb_tracks
op	70:37	0:0	8	[
water	70:38	0:0	8	set
op	70:41	0:0	8	]
forexpr	70:44	70:45	7	j ++
water	70:44	0:0	8	j
op	70:45	0:0	8	++
stmts	70:49	86:12	7	
water	70:49	0:0	8	{
decl	71:16	71:61	8	struct Track	*track
op	71:36	0:0	8	=
water	71:38	0:0	8	adaptation_sets
op	71:53	0:0	8	[
water	71:54	0:0	8	set
op	71:57	0:0	8	]
op	71:58	0:0	8	[
water	71:59	0:0	8	j
op	71:60	0:0	8	]
if	72:16	73:25	8	(strcmp (track -> name ,first_track -> name ))
cond	72:20	72:57	9	strcmp (track -> name ,first_track -> name )
call	72:20	72:57	10	strcmp
arg	72:27	72:38	11	track->name
water	72:27	0:0	12	track
op	72:32	0:0	12	->
water	72:34	0:0	12	name
arg	72:40	72:57	11	first_track->name
water	72:40	0:0	12	first_track
op	72:51	0:0	12	->
water	72:53	0:0	12	name
stmts	73:20	73:25	9	
break	73:20	73:25	10	
if	74:16	77:16	8	(track -> is_audio)
cond	74:20	74:27	9	track -> is_audio
water	74:20	0:0	10	track
op	74:25	0:0	10	->
water	74:27	0:0	10	is_audio
stmts	74:37	77:16	9	
water	74:37	0:0	10	{
water	75:20	0:0	10	sample_rate
op	75:32	0:0	10	=
water	75:34	0:0	10	track
op	75:39	0:0	10	->
water	75:41	0:0	10	sample_rate
water	75:52	0:0	10	;
water	76:20	0:0	10	channels
op	76:29	0:0	10	=
water	76:31	0:0	10	track
op	76:36	0:0	10	->
water	76:38	0:0	10	channels
water	76:46	0:0	10	;
water	77:16	0:0	10	}
if	78:16	81:16	8	(track -> is_video)
cond	78:20	78:27	9	track -> is_video
water	78:20	0:0	10	track
op	78:25	0:0	10	->
water	78:27	0:0	10	is_video
stmts	78:37	81:16	9	
water	78:37	0:0	10	{
water	79:20	0:0	10	width
op	79:26	0:0	10	=
water	79:28	0:0	10	track
op	79:33	0:0	10	->
water	79:35	0:0	10	width
water	79:40	0:0	10	;
water	80:20	0:0	10	height
op	80:27	0:0	10	=
water	80:29	0:0	10	track
op	80:34	0:0	10	->
water	80:36	0:0	10	height
water	80:42	0:0	10	;
water	81:16	0:0	10	}
water	82:16	0:0	8	bitrate
op	82:24	0:0	8	+=
water	82:27	0:0	8	track
op	82:32	0:0	8	->
water	82:34	0:0	8	bitrate
water	82:41	0:0	8	;
if	83:16	84:37	8	(j > i)
cond	83:20	83:24	9	j > i
water	83:20	0:0	10	j
op	83:22	0:0	10	>
water	83:24	0:0	10	i
stmts	84:20	84:37	9	
call	84:20	84:36	10	fprintf
arg	84:28	84:31	11	out
water	84:28	0:0	12	out
arg	84:33	84:36	11	","
water	84:33	0:0	12	","
water	84:37	0:0	10	;
call	85:16	85:51	8	fprintf
arg	85:24	85:27	9	out
water	85:24	0:0	10	out
arg	85:29	85:33	9	"%s"
water	85:29	0:0	10	"%s"
arg	85:35	85:51	9	track->codec_str
water	85:35	0:0	10	track
op	85:40	0:0	10	->
water	85:42	0:0	10	codec_str
water	85:52	0:0	8	;
water	86:12	0:0	8	}
call	87:12	88:54	6	fprintf
arg	87:20	87:23	7	out
water	87:20	0:0	8	out
arg	87:25	87:66	7	"\" mimeType=\"%s/mp4\" bandwidth=\"%d\""
water	87:25	0:0	8	"\" mimeType=\"%s/mp4\" bandwidth=\"%d\""
arg	88:20	88:45	7	width?"video":"audio"
water	88:20	0:0	8	width
water	88:26	0:0	8	?
water	88:28	0:0	8	"video"
water	88:36	0:0	8	:
water	88:38	0:0	8	"audio"
arg	88:47	88:54	7	bitrate
water	88:47	0:0	8	bitrate
water	88:55	0:0	6	;
if	89:12	90:74	6	(width > 0 && height > 0)
cond	89:16	89:38	7	width > 0 && height > 0
water	89:16	0:0	8	width
op	89:22	0:0	8	>
water	89:24	0:0	8	0
op	89:26	0:0	8	&&
water	89:29	0:0	8	height
op	89:36	0:0	8	>
water	89:38	0:0	8	0
stmts	90:16	90:74	7	
call	90:16	90:73	8	fprintf
arg	90:24	90:27	9	out
water	90:24	0:0	10	out
arg	90:29	90:58	9	" width=\"%d\" height=\"%d\""
water	90:29	0:0	10	" width=\"%d\" height=\"%d\""
arg	90:60	90:65	9	width
water	90:60	0:0	10	width
arg	90:67	90:73	9	height
water	90:67	0:0	10	height
water	90:74	0:0	8	;
if	91:12	92:70	6	(sample_rate > 0)
cond	91:16	91:30	7	sample_rate > 0
water	91:16	0:0	8	sample_rate
op	91:28	0:0	8	>
water	91:30	0:0	8	0
stmts	92:16	92:70	7	
call	92:16	92:69	8	fprintf
arg	92:24	92:27	9	out
water	92:24	0:0	10	out
arg	92:29	92:56	9	" audioSamplingRate=\"%d\""
water	92:29	0:0	10	" audioSamplingRate=\"%d\""
arg	92:58	92:69	9	sample_rate
water	92:58	0:0	10	sample_rate
water	92:70	0:0	8	;
call	93:12	93:30	6	fprintf
arg	93:20	93:23	7	out
water	93:20	0:0	8	out
arg	93:25	93:30	7	">\n"
water	93:25	0:0	8	">\n"
water	93:31	0:0	6	;
if	94:12	95:165	6	(channels > 0)
cond	94:16	94:27	7	channels > 0
water	94:16	0:0	8	channels
op	94:25	0:0	8	>
water	94:27	0:0	8	0
stmts	95:16	95:165	7	
call	95:16	95:164	8	fprintf
arg	95:24	95:27	9	out
water	95:24	0:0	10	out
arg	95:29	95:154	9	"\t\t\t\t<AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"%d\" />\n"
water	95:29	0:0	10	"\t\t\t\t<AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"%d\" />\n"
arg	95:156	95:164	9	channels
water	95:156	0:0	10	channels
water	95:165	0:0	8	;
call	96:12	96:77	6	fprintf
arg	96:20	96:23	7	out
water	96:20	0:0	8	out
arg	96:25	96:58	7	"\t\t\t\t<BaseURL>%s</BaseURL>\n"
water	96:25	0:0	8	"\t\t\t\t<BaseURL>%s</BaseURL>\n"
arg	96:60	96:77	7	first_track->name
water	96:60	0:0	8	first_track
op	96:71	0:0	8	->
water	96:73	0:0	8	name
water	96:78	0:0	6	;
call	97:12	97:168	6	fprintf
arg	97:20	97:23	7	out
water	97:20	0:0	8	out
arg	97:25	97:87	7	"\t\t\t\t<SegmentBase indexRange=\"%"PRId64"-%"PRId64"\" />\n"
water	97:25	0:0	8	"\t\t\t\t<SegmentBase indexRange=\"%"
water	97:62	0:0	8	PRId64
water	97:68	0:0	8	"-%"
water	97:72	0:0	8	PRId64
water	97:78	0:0	8	"\" />\n"
arg	97:89	97:112	7	first_track->sidx_start
water	97:89	0:0	8	first_track
op	97:100	0:0	8	->
water	97:102	0:0	8	sidx_start
arg	97:114	97:168	7	first_track->sidx_start+first_track->sidx_length-1
water	97:114	0:0	8	first_track
op	97:125	0:0	8	->
water	97:127	0:0	8	sidx_start
op	97:138	0:0	8	+
water	97:140	0:0	8	first_track
op	97:151	0:0	8	->
water	97:153	0:0	8	sidx_length
op	97:165	0:0	8	-
water	97:167	0:0	8	1
water	97:169	0:0	6	;
call	98:12	98:52	6	fprintf
arg	98:20	98:23	7	out
water	98:20	0:0	8	out
arg	98:25	98:52	7	"\t\t\t</Representation>\n"
water	98:25	0:0	8	"\t\t\t</Representation>\n"
water	98:53	0:0	6	;
water	99:12	0:0	6	i
op	99:14	0:0	6	=
water	99:16	0:0	6	j
water	99:17	0:0	6	;
water	100:8	0:0	6	}
call	101:8	101:45	4	fprintf
arg	101:16	101:19	5	out
water	101:16	0:0	6	out
arg	101:21	101:45	5	"\t\t</AdaptationSet>\n"
water	101:21	0:0	6	"\t\t</AdaptationSet>\n"
water	101:46	0:0	4	;
water	102:4	0:0	4	}
call	103:4	103:32	2	fprintf
arg	103:12	103:15	3	out
water	103:12	0:0	4	out
arg	103:17	103:32	3	"\t</Period>\n"
water	103:17	0:0	4	"\t</Period>\n"
water	103:33	0:0	2	;
call	104:4	104:27	2	fprintf
arg	104:12	104:15	3	out
water	104:12	0:0	4	out
arg	104:17	104:27	3	"</MPD>\n"
water	104:17	0:0	4	"</MPD>\n"
water	104:28	0:0	2	;
call	105:4	105:14	2	fclose
arg	105:11	105:14	3	out
water	105:11	0:0	4	out
water	105:15	0:0	2	;
label	106:0	106:3	2	err :
for	107:4	108:39	2	(i = 0 ;i < 2;i ++)
forinit	107:9	107:14	3	i = 0 ;
water	107:9	0:0	4	i
op	107:11	0:0	4	=
water	107:13	0:0	4	0
water	107:14	0:0	4	;
cond	107:16	107:20	3	i < 2
water	107:16	0:0	4	i
op	107:18	0:0	4	<
water	107:20	0:0	4	2
forexpr	107:23	107:24	3	i ++
water	107:23	0:0	4	i
op	107:24	0:0	4	++
stmts	108:8	108:39	3	
call	108:8	108:38	4	av_free
arg	108:16	108:38	5	adaptation_sets_buf[i]
water	108:16	0:0	6	adaptation_sets_buf
op	108:35	0:0	6	[
water	108:36	0:0	6	i
op	108:37	0:0	6	]
water	108:39	0:0	4	;
return	109:4	109:14	2	ret
water	109:11	0:0	3	ret
