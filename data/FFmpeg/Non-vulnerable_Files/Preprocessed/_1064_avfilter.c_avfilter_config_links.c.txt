func	1:0	81:0	0	int	avfilter_config_links
params	1:25	0:0	1	
param	1:26	1:49	2	AVFilterContext *	filter
stmnts	3:4	80:12	1	
call	3:4	3:21	2	int
arg	3:9	3:21	3	*config_link
op	3:9	0:0	4	*
water	3:10	0:0	4	config_link
water	3:22	0:0	2	(
water	3:23	0:0	2	AVFilterLink
op	3:36	0:0	2	*
water	3:37	0:0	2	)
water	3:38	0:0	2	;
water	4:4	0:0	2	unsigned
water	4:13	0:0	2	i
water	4:14	0:0	2	;
decl	5:4	5:11	2	int	ret
for	6:4	79:4	2	(i = 0 ;i < filter -> nb_inputs;i ++)
forinit	6:9	6:14	3	i = 0 ;
water	6:9	0:0	4	i
op	6:11	0:0	4	=
water	6:13	0:0	4	0
water	6:14	0:0	4	;
cond	6:16	6:28	3	i < filter -> nb_inputs
water	6:16	0:0	4	i
op	6:18	0:0	4	<
water	6:20	0:0	4	filter
op	6:26	0:0	4	->
water	6:28	0:0	4	nb_inputs
forexpr	6:39	6:41	3	i ++
water	6:39	0:0	4	i
op	6:41	0:0	4	++
stmts	6:45	79:4	3	
water	6:45	0:0	4	{
decl	7:8	7:46	4	AVFilterLink	*link
op	7:27	0:0	4	=
water	7:29	0:0	4	filter
op	7:35	0:0	4	->
water	7:37	0:0	4	inputs
op	7:43	0:0	4	[
water	7:44	0:0	4	i
op	7:45	0:0	4	]
decl	8:8	8:28	4	AVFilterLink	*inlink
if	9:8	9:27	4	(! link)
cond	9:12	9:13	5	! link
op	9:12	0:0	6	!
water	9:13	0:0	6	link
stmts	9:19	9:27	5	
continue	9:19	9:27	6	
if	10:8	14:8	4	(! link -> src || ! link -> dst)
cond	10:12	10:33	5	! link -> src || ! link -> dst
op	10:12	0:0	6	!
water	10:13	0:0	6	link
op	10:17	0:0	6	->
water	10:19	0:0	6	src
op	10:23	0:0	6	||
op	10:26	0:0	6	!
water	10:27	0:0	6	link
op	10:31	0:0	6	->
water	10:33	0:0	6	dst
stmts	10:38	14:8	5	
water	10:38	0:0	6	{
call	11:12	12:76	6	av_log
arg	11:19	11:25	7	filter
water	11:19	0:0	8	filter
arg	11:27	11:39	7	AV_LOG_ERROR
water	11:27	0:0	8	AV_LOG_ERROR
arg	12:19	12:73	7	"Not all input and output are properly linked (%d).\n"
water	12:19	0:0	8	"Not all input and output are properly linked (%d).\n"
arg	12:75	12:76	7	i
water	12:75	0:0	8	i
water	12:77	0:0	6	;
return	13:12	13:34	6	AVERROR(EINVAL)
call	13:19	13:33	7	AVERROR
arg	13:27	13:33	8	EINVAL
water	13:27	0:0	9	EINVAL
water	14:8	0:0	6	}
water	15:8	0:0	4	inlink
op	15:15	0:0	4	=
water	15:17	0:0	4	link
op	15:21	0:0	4	->
water	15:23	0:0	4	src
op	15:26	0:0	4	->
water	15:28	0:0	4	nb_inputs
water	15:38	0:0	4	?
water	15:40	0:0	4	link
op	15:44	0:0	4	->
water	15:46	0:0	4	src
op	15:49	0:0	4	->
water	15:51	0:0	4	inputs
op	15:57	0:0	4	[
water	15:58	0:0	4	0
op	15:59	0:0	4	]
water	15:61	0:0	4	:
water	15:63	0:0	4	NULL
water	15:67	0:0	4	;
water	16:8	0:0	4	link
op	16:12	0:0	4	->
water	16:14	0:0	4	current_pts
op	16:26	0:0	4	=
water	16:28	0:0	4	AV_NOPTS_VALUE
water	16:42	0:0	4	;
switch	17:8	78:8	4	(link -> init_state)
cond	17:16	17:22	5	link -> init_state
water	17:16	0:0	6	link
op	17:20	0:0	6	->
water	17:22	0:0	6	init_state
stmts	17:34	78:8	5	
water	17:34	0:0	6	{
label	18:8	18:24	6	case AVLINK_INIT :
continue	19:12	19:20	6	
label	20:8	20:29	6	case AVLINK_STARTINIT :
call	21:12	21:74	6	av_log
arg	21:19	21:25	7	filter
water	21:19	0:0	8	filter
arg	21:27	21:38	7	AV_LOG_INFO
water	21:27	0:0	8	AV_LOG_INFO
arg	21:40	21:74	7	"circular filter chain detected\n"
water	21:40	0:0	8	"circular filter chain detected\n"
water	21:75	0:0	6	;
return	22:12	22:20	6	0
water	22:19	0:0	7	0
label	23:8	23:26	6	case AVLINK_UNINIT :
water	24:12	0:0	6	link
op	24:16	0:0	6	->
water	24:18	0:0	6	init_state
op	24:29	0:0	6	=
water	24:31	0:0	6	AVLINK_STARTINIT
water	24:47	0:0	6	;
if	25:12	26:26	6	(( ret =avfilter_config_links (link -> src ) ) < 0)
cond	25:16	25:59	7	( ret =avfilter_config_links (link -> src ) ) < 0
water	25:16	0:0	8	(
water	25:17	0:0	8	ret
op	25:21	0:0	8	=
call	25:23	25:54	8	avfilter_config_links
arg	25:45	25:54	9	link->src
water	25:45	0:0	10	link
op	25:49	0:0	10	->
water	25:51	0:0	10	src
water	25:55	0:0	8	)
op	25:57	0:0	8	<
water	25:59	0:0	8	0
stmts	26:16	26:26	7	
return	26:16	26:26	8	ret
water	26:23	0:0	9	ret
if	27:12	35:12	6	(! ( config_link = link -> srcpad -> config_props ))
cond	27:16	27:58	7	! ( config_link = link -> srcpad -> config_props )
op	27:16	0:0	8	!
water	27:17	0:0	8	(
water	27:18	0:0	8	config_link
op	27:30	0:0	8	=
water	27:32	0:0	8	link
op	27:36	0:0	8	->
water	27:38	0:0	8	srcpad
op	27:44	0:0	8	->
water	27:46	0:0	8	config_props
water	27:58	0:0	8	)
stmts	27:61	35:12	7	
water	27:61	0:0	8	{
if	28:16	34:16	8	(link -> src -> nb_inputs != 1)
cond	28:20	28:44	9	link -> src -> nb_inputs != 1
water	28:20	0:0	10	link
op	28:24	0:0	10	->
water	28:26	0:0	10	src
op	28:29	0:0	10	->
water	28:31	0:0	10	nb_inputs
op	28:41	0:0	10	!=
water	28:44	0:0	10	1
stmts	28:47	34:16	9	
water	28:47	0:0	10	{
call	29:20	32:80	10	av_log
arg	29:27	29:36	11	link->src
water	29:27	0:0	12	link
op	29:31	0:0	12	->
water	29:33	0:0	12	src
arg	29:38	29:50	11	AV_LOG_ERROR
water	29:38	0:0	12	AV_LOG_ERROR
arg	29:52	32:80	11	"Source filters and filters ""with more than one input ""must set config_props() ""callbacks on all outputs\n"
water	29:52	0:0	12	"Source filters and filters "
water	30:52	0:0	12	"with more than one input "
water	31:52	0:0	12	"must set config_props() "
water	32:52	0:0	12	"callbacks on all outputs\n"
water	32:81	0:0	10	;
return	33:20	33:42	10	AVERROR(EINVAL)
call	33:27	33:41	11	AVERROR
arg	33:35	33:41	12	EINVAL
water	33:35	0:0	13	EINVAL
water	34:16	0:0	10	}
water	35:12	0:0	8	}
else	35:14	40:12	6
stmts	35:19	40:12	7	
if	35:19	40:12	8	(( ret =config_link (link ) ) < 0)
cond	35:23	35:51	9	( ret =config_link (link ) ) < 0
water	35:23	0:0	10	(
water	35:24	0:0	10	ret
op	35:28	0:0	10	=
call	35:30	35:46	10	config_link
arg	35:42	35:46	11	link
water	35:42	0:0	12	link
water	35:47	0:0	10	)
op	35:49	0:0	10	<
water	35:51	0:0	10	0
stmts	35:54	40:12	9	
water	35:54	0:0	10	{
call	36:16	38:38	10	av_log
arg	36:23	36:32	11	link->src
water	36:23	0:0	12	link
op	36:27	0:0	12	->
water	36:29	0:0	12	src
arg	36:34	36:46	11	AV_LOG_ERROR
water	36:34	0:0	12	AV_LOG_ERROR
arg	37:23	37:63	11	"Failed to configure output pad on %s\n"
water	37:23	0:0	12	"Failed to configure output pad on %s\n"
arg	38:23	38:38	11	link->src->name
water	38:23	0:0	12	link
op	38:27	0:0	12	->
water	38:29	0:0	12	src
op	38:32	0:0	12	->
water	38:34	0:0	12	name
water	38:39	0:0	10	;
return	39:16	39:26	10	ret
water	39:23	0:0	11	ret
water	40:12	0:0	10	}
switch	41:12	69:12	6	(link -> type)
cond	41:20	41:26	7	link -> type
water	41:20	0:0	8	link
op	41:24	0:0	8	->
water	41:26	0:0	8	type
stmts	41:32	69:12	7	
water	41:32	0:0	8	{
label	42:12	42:35	8	case AVMEDIA_TYPE_VIDEO :
if	43:16	44:81	8	(! link -> time_base . num && ! link -> time_base . den)
cond	43:20	43:61	9	! link -> time_base . num && ! link -> time_base . den
op	43:20	0:0	10	!
water	43:21	0:0	10	link
op	43:25	0:0	10	->
water	43:27	0:0	10	time_base
op	43:36	0:0	10	.
water	43:37	0:0	10	num
op	43:41	0:0	10	&&
op	43:44	0:0	10	!
water	43:45	0:0	10	link
op	43:49	0:0	10	->
water	43:51	0:0	10	time_base
op	43:60	0:0	10	.
water	43:61	0:0	10	den
stmts	44:20	44:81	9	
water	44:20	0:0	10	link
op	44:24	0:0	10	->
water	44:26	0:0	10	time_base
op	44:36	0:0	10	=
water	44:38	0:0	10	inlink
water	44:45	0:0	10	?
water	44:47	0:0	10	inlink
op	44:53	0:0	10	->
water	44:55	0:0	10	time_base
water	44:65	0:0	10	:
water	44:67	0:0	10	AV_TIME_BASE_Q
water	44:81	0:0	10	;
if	45:16	47:71	8	(! link -> sample_aspect_ratio . num && ! link -> sample_aspect_ratio . den)
cond	45:20	45:81	9	! link -> sample_aspect_ratio . num && ! link -> sample_aspect_ratio . den
op	45:20	0:0	10	!
water	45:21	0:0	10	link
op	45:25	0:0	10	->
water	45:27	0:0	10	sample_aspect_ratio
op	45:46	0:0	10	.
water	45:47	0:0	10	num
op	45:51	0:0	10	&&
op	45:54	0:0	10	!
water	45:55	0:0	10	link
op	45:59	0:0	10	->
water	45:61	0:0	10	sample_aspect_ratio
op	45:80	0:0	10	.
water	45:81	0:0	10	den
stmts	46:20	47:71	9	
water	46:20	0:0	10	link
op	46:24	0:0	10	->
water	46:26	0:0	10	sample_aspect_ratio
op	46:46	0:0	10	=
water	46:48	0:0	10	inlink
water	46:55	0:0	10	?
water	47:24	0:0	10	inlink
op	47:30	0:0	10	->
water	47:32	0:0	10	sample_aspect_ratio
water	47:52	0:0	10	:
water	47:54	0:0	10	(
water	47:55	0:0	10	AVRational
water	47:65	0:0	10	)
water	47:66	0:0	10	{
water	47:67	0:0	10	1
water	47:68	0:0	10	,
water	47:69	0:0	10	1
water	47:70	0:0	10	}
water	47:71	0:0	10	;
if	48:16	49:57	8	(inlink && ! link -> frame_rate . num && ! link -> frame_rate . den)
cond	48:20	48:73	9	inlink && ! link -> frame_rate . num && ! link -> frame_rate . den
water	48:20	0:0	10	inlink
op	48:27	0:0	10	&&
op	48:30	0:0	10	!
water	48:31	0:0	10	link
op	48:35	0:0	10	->
water	48:37	0:0	10	frame_rate
op	48:47	0:0	10	.
water	48:48	0:0	10	num
op	48:52	0:0	10	&&
op	48:55	0:0	10	!
water	48:56	0:0	10	link
op	48:60	0:0	10	->
water	48:62	0:0	10	frame_rate
op	48:72	0:0	10	.
water	48:73	0:0	10	den
stmts	49:20	49:57	9	
water	49:20	0:0	10	link
op	49:24	0:0	10	->
water	49:26	0:0	10	frame_rate
op	49:37	0:0	10	=
water	49:39	0:0	10	inlink
op	49:45	0:0	10	->
water	49:47	0:0	10	frame_rate
water	49:57	0:0	10	;
if	50:16	55:16	8	(inlink)
cond	50:20	50:20	9	inlink
water	50:20	0:0	10	inlink
stmts	50:28	55:16	9	
water	50:28	0:0	10	{
if	51:20	52:43	10	(! link -> w)
cond	51:24	51:31	11	! link -> w
op	51:24	0:0	12	!
water	51:25	0:0	12	link
op	51:29	0:0	12	->
water	51:31	0:0	12	w
stmts	52:24	52:43	11	
water	52:24	0:0	12	link
op	52:28	0:0	12	->
water	52:30	0:0	12	w
op	52:32	0:0	12	=
water	52:34	0:0	12	inlink
op	52:40	0:0	12	->
water	52:42	0:0	12	w
water	52:43	0:0	12	;
if	53:20	54:43	10	(! link -> h)
cond	53:24	53:31	11	! link -> h
op	53:24	0:0	12	!
water	53:25	0:0	12	link
op	53:29	0:0	12	->
water	53:31	0:0	12	h
stmts	54:24	54:43	11	
water	54:24	0:0	12	link
op	54:28	0:0	12	->
water	54:30	0:0	12	h
op	54:32	0:0	12	=
water	54:34	0:0	12	inlink
op	54:40	0:0	12	->
water	54:42	0:0	12	h
water	54:43	0:0	12	;
water	55:16	0:0	10	}
else	55:18	60:16	8
stmts	55:23	60:16	9	
if	55:23	60:16	10	(! link -> w || ! link -> h)
cond	55:27	55:46	11	! link -> w || ! link -> h
op	55:27	0:0	12	!
water	55:28	0:0	12	link
op	55:32	0:0	12	->
water	55:34	0:0	12	w
op	55:36	0:0	12	||
op	55:39	0:0	12	!
water	55:40	0:0	12	link
op	55:44	0:0	12	->
water	55:46	0:0	12	h
stmts	55:49	60:16	11	
water	55:49	0:0	12	{
call	56:20	58:47	12	av_log
arg	56:27	56:36	13	link->src
water	56:27	0:0	14	link
op	56:31	0:0	14	->
water	56:33	0:0	14	src
arg	56:38	56:50	13	AV_LOG_ERROR
water	56:38	0:0	14	AV_LOG_ERROR
arg	57:27	58:47	13	"Video source filters must set their output link's ""width and height\n"
water	57:27	0:0	14	"Video source filters must set their output link's "
water	58:27	0:0	14	"width and height\n"
water	58:48	0:0	12	;
return	59:20	59:42	12	AVERROR(EINVAL)
call	59:27	59:41	13	AVERROR
arg	59:35	59:41	14	EINVAL
water	59:35	0:0	15	EINVAL
water	60:16	0:0	12	}
break	61:16	61:21	8	
label	62:12	62:35	8	case AVMEDIA_TYPE_AUDIO :
if	63:16	66:16	8	(inlink)
cond	63:20	63:20	9	inlink
water	63:20	0:0	10	inlink
stmts	63:28	66:16	9	
water	63:28	0:0	10	{
if	64:20	65:59	10	(! link -> time_base . num && ! link -> time_base . den)
cond	64:24	64:65	11	! link -> time_base . num && ! link -> time_base . den
op	64:24	0:0	12	!
water	64:25	0:0	12	link
op	64:29	0:0	12	->
water	64:31	0:0	12	time_base
op	64:40	0:0	12	.
water	64:41	0:0	12	num
op	64:45	0:0	12	&&
op	64:48	0:0	12	!
water	64:49	0:0	12	link
op	64:53	0:0	12	->
water	64:55	0:0	12	time_base
op	64:64	0:0	12	.
water	64:65	0:0	12	den
stmts	65:24	65:59	11	
water	65:24	0:0	12	link
op	65:28	0:0	12	->
water	65:30	0:0	12	time_base
op	65:40	0:0	12	=
water	65:42	0:0	12	inlink
op	65:48	0:0	12	->
water	65:50	0:0	12	time_base
water	65:59	0:0	12	;
water	66:16	0:0	10	}
if	67:16	68:73	8	(! link -> time_base . num && ! link -> time_base . den)
cond	67:20	67:61	9	! link -> time_base . num && ! link -> time_base . den
op	67:20	0:0	10	!
water	67:21	0:0	10	link
op	67:25	0:0	10	->
water	67:27	0:0	10	time_base
op	67:36	0:0	10	.
water	67:37	0:0	10	num
op	67:41	0:0	10	&&
op	67:44	0:0	10	!
water	67:45	0:0	10	link
op	67:49	0:0	10	->
water	67:51	0:0	10	time_base
op	67:60	0:0	10	.
water	67:61	0:0	10	den
stmts	68:20	68:73	9	
water	68:20	0:0	10	link
op	68:24	0:0	10	->
water	68:26	0:0	10	time_base
op	68:36	0:0	10	=
water	68:38	0:0	10	(
water	68:39	0:0	10	AVRational
water	68:49	0:0	10	)
water	68:51	0:0	10	{
water	68:52	0:0	10	1
water	68:53	0:0	10	,
water	68:55	0:0	10	link
op	68:59	0:0	10	->
water	68:61	0:0	10	sample_rate
water	68:72	0:0	10	}
water	68:73	0:0	10	;
water	69:12	0:0	8	}
if	70:12	76:16	6	(( config_link = link -> dstpad -> config_props ))
cond	70:16	70:57	7	( config_link = link -> dstpad -> config_props )
water	70:16	0:0	8	(
water	70:17	0:0	8	config_link
op	70:29	0:0	8	=
water	70:31	0:0	8	link
op	70:35	0:0	8	->
water	70:37	0:0	8	dstpad
op	70:43	0:0	8	->
water	70:45	0:0	8	config_props
water	70:57	0:0	8	)
stmts	71:16	76:16	7	
if	71:16	76:16	8	(( ret =config_link (link ) ) < 0)
cond	71:20	71:48	9	( ret =config_link (link ) ) < 0
water	71:20	0:0	10	(
water	71:21	0:0	10	ret
op	71:25	0:0	10	=
call	71:27	71:43	10	config_link
arg	71:39	71:43	11	link
water	71:39	0:0	12	link
water	71:44	0:0	10	)
op	71:46	0:0	10	<
water	71:48	0:0	10	0
stmts	71:51	76:16	9	
water	71:51	0:0	10	{
call	72:20	74:42	10	av_log
arg	72:27	72:36	11	link->dst
water	72:27	0:0	12	link
op	72:31	0:0	12	->
water	72:33	0:0	12	dst
arg	72:38	72:50	11	AV_LOG_ERROR
water	72:38	0:0	12	AV_LOG_ERROR
arg	73:27	73:66	11	"Failed to configure input pad on %s\n"
water	73:27	0:0	12	"Failed to configure input pad on %s\n"
arg	74:27	74:42	11	link->dst->name
water	74:27	0:0	12	link
op	74:31	0:0	12	->
water	74:33	0:0	12	dst
op	74:36	0:0	12	->
water	74:38	0:0	12	name
water	74:43	0:0	10	;
return	75:20	75:30	10	ret
water	75:27	0:0	11	ret
water	76:16	0:0	10	}
water	77:12	0:0	6	link
op	77:16	0:0	6	->
water	77:18	0:0	6	init_state
op	77:29	0:0	6	=
water	77:31	0:0	6	AVLINK_INIT
water	77:42	0:0	6	;
water	78:8	0:0	6	}
water	79:4	0:0	4	}
return	80:4	80:12	2	0
water	80:11	0:0	3	0
