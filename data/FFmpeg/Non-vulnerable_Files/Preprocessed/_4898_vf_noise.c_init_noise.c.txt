func	1:15	56:0	0	int	init_noise
params	1:29	0:0	1	
param	1:30	1:45	2	NoiseContext *	n
param	1:47	1:55	2	int	comp
stmnts	0:0	55:12	1	
decl	3:4	3:57	2	int8_t	*noise
op	3:18	0:0	2	=
call	3:20	3:56	3	av_malloc
arg	3:30	3:56	4	MAX_NOISE*sizeof(int8_t)
water	3:30	0:0	5	MAX_NOISE
op	3:40	0:0	5	*
op	3:42	0:0	5	sizeof
water	3:48	0:0	5	(
water	3:49	0:0	5	int8_t
water	3:55	0:0	5	)
decl	4:4	4:38	2	FilterParams	*fp
op	4:21	0:0	2	=
op	4:23	0:0	2	&
water	4:24	0:0	2	n
op	4:25	0:0	2	->
water	4:27	0:0	2	param
op	4:32	0:0	2	[
water	4:33	0:0	2	comp
op	4:37	0:0	2	]
decl	5:4	5:36	2	AVLFG	*lfg
op	5:15	0:0	2	=
op	5:17	0:0	2	&
water	5:18	0:0	2	n
op	5:19	0:0	2	->
water	5:21	0:0	2	param
op	5:26	0:0	2	[
water	5:27	0:0	2	comp
op	5:31	0:0	2	]
op	5:32	0:0	2	.
water	5:33	0:0	2	lfg
decl	6:4	6:31	2	int	strength
op	6:17	0:0	2	=
water	6:19	0:0	2	fp
op	6:21	0:0	2	->
water	6:23	0:0	2	strength
decl	7:4	7:25	2	int	flags
op	7:14	0:0	2	=
water	7:16	0:0	2	fp
op	7:18	0:0	2	->
water	7:20	0:0	2	flags
decl	8:4	8:12	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:12	2	int	j
if	9:4	10:30	2	(! noise)
cond	9:8	9:9	3	! noise
op	9:8	0:0	4	!
water	9:9	0:0	4	noise
stmts	10:8	10:30	3	
return	10:8	10:30	4	AVERROR(ENOMEM)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	ENOMEM
water	10:23	0:0	7	ENOMEM
call	11:4	11:48	2	av_lfg_init
arg	11:16	11:24	3	&fp->lfg
op	11:16	0:0	4	&
water	11:17	0:0	4	fp
op	11:19	0:0	4	->
water	11:21	0:0	4	lfg
arg	11:26	11:48	3	fp->seed+comp*31415U
water	11:26	0:0	4	fp
op	11:28	0:0	4	->
water	11:30	0:0	4	seed
op	11:35	0:0	4	+
water	11:37	0:0	4	comp
op	11:41	0:0	4	*
water	11:42	0:0	4	31415
water	11:47	0:0	4	U
water	11:49	0:0	2	;
for	12:4	50:4	2	(i = 0 , j = 0 ;i < MAX_NOISE;i ++ , j ++)
forinit	12:9	12:21	3	i = 0 , j = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	,
water	12:16	0:0	4	j
op	12:18	0:0	4	=
water	12:20	0:0	4	0
water	12:21	0:0	4	;
cond	12:23	12:27	3	i < MAX_NOISE
water	12:23	0:0	4	i
op	12:25	0:0	4	<
water	12:27	0:0	4	MAX_NOISE
forexpr	12:38	12:44	3	i ++ , j ++
water	12:38	0:0	4	i
op	12:39	0:0	4	++
water	12:41	0:0	4	,
water	12:43	0:0	4	j
op	12:44	0:0	4	++
stmts	12:48	50:4	3	
water	12:48	0:0	4	{
if	13:8	29:8	4	(flags & NOISE_UNIFORM)
cond	13:12	13:20	5	flags & NOISE_UNIFORM
water	13:12	0:0	6	flags
op	13:18	0:0	6	&
water	13:20	0:0	6	NOISE_UNIFORM
stmts	13:35	29:8	5	
water	13:35	0:0	6	{
if	14:12	21:12	6	(flags & NOISE_AVERAGED)
cond	14:16	14:24	7	flags & NOISE_AVERAGED
water	14:16	0:0	8	flags
op	14:22	0:0	8	&
water	14:24	0:0	8	NOISE_AVERAGED
stmts	14:40	21:12	7	
water	14:40	0:0	8	{
if	15:16	18:16	8	(flags & NOISE_PATTERN)
cond	15:20	15:28	9	flags & NOISE_PATTERN
water	15:20	0:0	10	flags
op	15:26	0:0	10	&
water	15:28	0:0	10	NOISE_PATTERN
stmts	15:43	18:16	9	
water	15:43	0:0	10	{
water	16:20	0:0	10	noise
op	16:25	0:0	10	[
water	16:26	0:0	10	i
op	16:27	0:0	10	]
op	16:29	0:0	10	=
water	16:31	0:0	10	(
call	16:32	16:47	10	RAND_N
arg	16:39	16:47	11	strength
water	16:39	0:0	12	strength
op	16:49	0:0	10	-
water	16:51	0:0	10	strength
op	16:60	0:0	10	/
water	16:62	0:0	10	2
water	16:63	0:0	10	)
op	16:65	0:0	10	/
water	16:67	0:0	10	6
op	17:24	0:0	10	+
water	17:26	0:0	10	patt
op	17:30	0:0	10	[
water	17:31	0:0	10	j
op	17:33	0:0	10	%
water	17:35	0:0	10	4
op	17:36	0:0	10	]
op	17:38	0:0	10	*
water	17:40	0:0	10	strength
op	17:49	0:0	10	*
water	17:51	0:0	10	0
op	17:52	0:0	10	.
water	17:53	0:0	10	25
op	17:56	0:0	10	/
water	17:58	0:0	10	3
water	17:59	0:0	10	;
water	18:16	0:0	10	}
else	18:18	20:16	8
stmts	18:23	20:16	9	
water	18:23	0:0	10	{
water	19:20	0:0	10	noise
op	19:25	0:0	10	[
water	19:26	0:0	10	i
op	19:27	0:0	10	]
op	19:29	0:0	10	=
water	19:31	0:0	10	(
call	19:32	19:47	10	RAND_N
arg	19:39	19:47	11	strength
water	19:39	0:0	12	strength
op	19:49	0:0	10	-
water	19:51	0:0	10	strength
op	19:60	0:0	10	/
water	19:62	0:0	10	2
water	19:63	0:0	10	)
op	19:65	0:0	10	/
water	19:67	0:0	10	3
water	19:68	0:0	10	;
water	20:16	0:0	10	}
water	21:12	0:0	8	}
else	21:14	28:12	6
stmts	21:19	28:12	7	
water	21:19	0:0	8	{
if	22:16	25:16	8	(flags & NOISE_PATTERN)
cond	22:20	22:28	9	flags & NOISE_PATTERN
water	22:20	0:0	10	flags
op	22:26	0:0	10	&
water	22:28	0:0	10	NOISE_PATTERN
stmts	22:43	25:16	9	
water	22:43	0:0	10	{
water	23:20	0:0	10	noise
op	23:25	0:0	10	[
water	23:26	0:0	10	i
op	23:27	0:0	10	]
op	23:29	0:0	10	=
water	23:31	0:0	10	(
call	23:32	23:47	10	RAND_N
arg	23:39	23:47	11	strength
water	23:39	0:0	12	strength
op	23:49	0:0	10	-
water	23:51	0:0	10	strength
op	23:60	0:0	10	/
water	23:62	0:0	10	2
water	23:63	0:0	10	)
op	23:65	0:0	10	/
water	23:67	0:0	10	2
op	24:24	0:0	10	+
water	24:26	0:0	10	patt
op	24:30	0:0	10	[
water	24:31	0:0	10	j
op	24:33	0:0	10	%
water	24:35	0:0	10	4
op	24:36	0:0	10	]
op	24:38	0:0	10	*
water	24:40	0:0	10	strength
op	24:49	0:0	10	*
water	24:51	0:0	10	0
op	24:52	0:0	10	.
water	24:53	0:0	10	25
water	24:55	0:0	10	;
water	25:16	0:0	10	}
else	25:18	27:16	8
stmts	25:23	27:16	9	
water	25:23	0:0	10	{
water	26:20	0:0	10	noise
op	26:25	0:0	10	[
water	26:26	0:0	10	i
op	26:27	0:0	10	]
op	26:29	0:0	10	=
call	26:31	26:46	10	RAND_N
arg	26:38	26:46	11	strength
water	26:38	0:0	12	strength
op	26:48	0:0	10	-
water	26:50	0:0	10	strength
op	26:59	0:0	10	/
water	26:61	0:0	10	2
water	26:62	0:0	10	;
water	27:16	0:0	10	}
water	28:12	0:0	8	}
water	29:8	0:0	6	}
else	29:10	47:8	4
stmts	29:15	47:8	5	
water	29:15	0:0	6	{
decl	30:12	30:32	6	double	x1
water	30:21	0:0	6	,
decl	30:12	30:32	6	double	x2
water	30:25	0:0	6	,
decl	30:12	30:32	6	double	w
water	30:28	0:0	6	,
decl	30:12	30:32	6	double	y1
do	31:12	35:12	6	(w >= 1 . 0)
cond	35:21	35:28	7	w >= 1 . 0
water	35:21	0:0	8	w
op	35:23	0:0	8	>=
water	35:26	0:0	8	1
op	35:27	0:0	8	.
water	35:28	0:0	8	0
stmts	31:15	35:12	7	
water	31:15	0:0	8	{
water	32:16	0:0	8	x1
op	32:19	0:0	8	=
water	32:21	0:0	8	2
op	32:22	0:0	8	.
water	32:23	0:0	8	0
call	32:25	32:41	8	*av_lfg_get
arg	32:38	32:41	9	lfg
water	32:38	0:0	10	lfg
op	32:43	0:0	8	/
water	32:45	0:0	8	(
water	32:46	0:0	8	float
water	32:51	0:0	8	)
water	32:52	0:0	8	UINT_MAX
op	32:61	0:0	8	-
water	32:63	0:0	8	1
op	32:64	0:0	8	.
water	32:65	0:0	8	0
water	32:66	0:0	8	;
water	33:16	0:0	8	x2
op	33:19	0:0	8	=
water	33:21	0:0	8	2
op	33:22	0:0	8	.
water	33:23	0:0	8	0
call	33:25	33:41	8	*av_lfg_get
arg	33:38	33:41	9	lfg
water	33:38	0:0	10	lfg
op	33:43	0:0	8	/
water	33:45	0:0	8	(
water	33:46	0:0	8	float
water	33:51	0:0	8	)
water	33:52	0:0	8	UINT_MAX
op	33:61	0:0	8	-
water	33:63	0:0	8	1
op	33:64	0:0	8	.
water	33:65	0:0	8	0
water	33:66	0:0	8	;
water	34:16	0:0	8	w
op	34:18	0:0	8	=
water	34:20	0:0	8	x1
op	34:23	0:0	8	*
water	34:25	0:0	8	x1
op	34:28	0:0	8	+
water	34:30	0:0	8	x2
op	34:33	0:0	8	*
water	34:35	0:0	8	x2
water	34:37	0:0	8	;
water	35:12	0:0	8	}
water	35:30	0:0	6	;
water	36:12	0:0	6	w
op	36:16	0:0	6	=
call	36:18	36:42	6	sqrt
arg	36:23	36:42	7	(-2.0*log(w))/w
water	36:23	0:0	8	(
op	36:24	0:0	8	-
water	36:25	0:0	8	2
op	36:26	0:0	8	.
water	36:27	0:0	8	0
call	36:29	36:36	8	*log
arg	36:35	36:36	9	w
water	36:35	0:0	10	w
water	36:37	0:0	8	)
op	36:39	0:0	8	/
water	36:41	0:0	8	w
water	36:43	0:0	6	;
water	37:12	0:0	6	y1
op	37:16	0:0	6	=
water	37:18	0:0	6	x1
op	37:21	0:0	6	*
water	37:23	0:0	6	w
water	37:24	0:0	6	;
water	38:12	0:0	6	y1
op	38:15	0:0	6	*=
water	38:18	0:0	6	strength
op	38:27	0:0	6	/
call	38:29	38:37	6	sqrt
arg	38:34	38:37	7	3.0
water	38:34	0:0	8	3
op	38:35	0:0	8	.
water	38:36	0:0	8	0
water	38:38	0:0	6	;
if	39:12	42:12	6	(flags & NOISE_PATTERN)
cond	39:16	39:24	7	flags & NOISE_PATTERN
water	39:16	0:0	8	flags
op	39:22	0:0	8	&
water	39:24	0:0	8	NOISE_PATTERN
stmts	39:39	42:12	7	
water	39:39	0:0	8	{
water	40:16	0:0	8	y1
op	40:19	0:0	8	/=
water	40:22	0:0	8	2
water	40:23	0:0	8	;
water	41:16	0:0	8	y1
op	41:19	0:0	8	+=
water	41:22	0:0	8	patt
op	41:26	0:0	8	[
water	41:27	0:0	8	j
op	41:29	0:0	8	%
water	41:31	0:0	8	4
op	41:32	0:0	8	]
op	41:34	0:0	8	*
water	41:36	0:0	8	strength
op	41:45	0:0	8	*
water	41:47	0:0	8	0
op	41:48	0:0	8	.
water	41:49	0:0	8	35
water	41:51	0:0	8	;
water	42:12	0:0	8	}
water	43:12	0:0	6	y1
op	43:15	0:0	6	=
call	43:17	43:39	6	av_clipf
arg	43:26	43:28	7	y1
water	43:26	0:0	8	y1
arg	43:30	43:34	7	-128
op	43:30	0:0	8	-
water	43:31	0:0	8	128
arg	43:36	43:39	7	127
water	43:36	0:0	8	127
water	43:40	0:0	6	;
if	44:12	45:25	6	(flags & NOISE_AVERAGED)
cond	44:16	44:24	7	flags & NOISE_AVERAGED
water	44:16	0:0	8	flags
op	44:22	0:0	8	&
water	44:24	0:0	8	NOISE_AVERAGED
stmts	45:16	45:25	7	
water	45:16	0:0	8	y1
op	45:19	0:0	8	/=
water	45:22	0:0	8	3
op	45:23	0:0	8	.
water	45:24	0:0	8	0
water	45:25	0:0	8	;
water	46:12	0:0	6	noise
op	46:17	0:0	6	[
water	46:18	0:0	6	i
op	46:19	0:0	6	]
op	46:21	0:0	6	=
water	46:23	0:0	6	(
water	46:24	0:0	6	int
water	46:27	0:0	6	)
water	46:28	0:0	6	y1
water	46:30	0:0	6	;
water	47:8	0:0	6	}
if	48:8	49:15	4	(RAND_N (6 ) == 0)
cond	48:12	48:25	5	RAND_N (6 ) == 0
call	48:12	48:20	6	RAND_N
arg	48:19	48:20	7	6
water	48:19	0:0	8	6
op	48:22	0:0	6	==
water	48:25	0:0	6	0
stmts	49:12	49:15	5	
water	49:12	0:0	6	j
op	49:13	0:0	6	--
water	49:15	0:0	6	;
water	50:4	0:0	4	}
for	51:4	53:78	2	(i = 0 ;i < MAX_RES;i ++)
forinit	51:9	51:14	3	i = 0 ;
water	51:9	0:0	4	i
op	51:11	0:0	4	=
water	51:13	0:0	4	0
water	51:14	0:0	4	;
cond	51:16	51:20	3	i < MAX_RES
water	51:16	0:0	4	i
op	51:18	0:0	4	<
water	51:20	0:0	4	MAX_RES
forexpr	51:29	51:30	3	i ++
water	51:29	0:0	4	i
op	51:30	0:0	4	++
stmts	52:8	53:78	3	
for	52:8	53:78	4	(j = 0 ;j < 3;j ++)
forinit	52:13	52:18	5	j = 0 ;
water	52:13	0:0	6	j
op	52:15	0:0	6	=
water	52:17	0:0	6	0
water	52:18	0:0	6	;
cond	52:20	52:24	5	j < 3
water	52:20	0:0	6	j
op	52:22	0:0	6	<
water	52:24	0:0	6	3
forexpr	52:27	52:28	5	j ++
water	52:27	0:0	6	j
op	52:28	0:0	6	++
stmts	53:12	53:78	5	
water	53:12	0:0	6	fp
op	53:14	0:0	6	->
water	53:16	0:0	6	prev_shift
op	53:26	0:0	6	[
water	53:27	0:0	6	i
op	53:28	0:0	6	]
op	53:29	0:0	6	[
water	53:30	0:0	6	j
op	53:31	0:0	6	]
op	53:33	0:0	6	=
water	53:35	0:0	6	noise
op	53:41	0:0	6	+
water	53:43	0:0	6	(
call	53:44	53:58	6	av_lfg_get
arg	53:55	53:58	7	lfg
water	53:55	0:0	8	lfg
op	53:60	0:0	6	&
water	53:62	0:0	6	(
water	53:63	0:0	6	MAX_SHIFT
op	53:73	0:0	6	-
water	53:75	0:0	6	1
water	53:76	0:0	6	)
water	53:77	0:0	6	)
water	53:78	0:0	6	;
water	54:4	0:0	2	fp
op	54:6	0:0	2	->
water	54:8	0:0	2	noise
op	54:14	0:0	2	=
water	54:16	0:0	2	noise
water	54:21	0:0	2	;
return	55:4	55:12	2	0
water	55:11	0:0	3	0
