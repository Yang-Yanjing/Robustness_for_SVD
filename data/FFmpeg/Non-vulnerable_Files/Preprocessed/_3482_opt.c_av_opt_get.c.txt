func	1:0	72:0	0	int	av_opt_get
params	1:14	0:0	1	
param	1:15	1:24	2	void *	obj
param	1:26	1:42	2	const char *	name
param	1:44	1:60	2	int	search_flags
param	1:62	1:79	2	uint8_t * *	out_val
stmnts	0:0	71:41	1	
decl	3:4	3:26	2	void	*dst
water	3:13	0:0	2	,
decl	3:4	3:26	2	void	*target_obj
decl	4:4	4:83	2	const AVOption	*o
op	4:22	0:0	2	=
call	4:24	4:82	3	av_opt_find2
arg	4:37	4:40	4	obj
water	4:37	0:0	5	obj
arg	4:42	4:46	4	name
water	4:42	0:0	5	name
arg	4:48	4:52	4	NULL
water	4:48	0:0	5	NULL
arg	4:54	4:55	4	0
water	4:54	0:0	5	0
arg	4:57	4:69	4	search_flags
water	4:57	0:0	5	search_flags
arg	4:71	4:82	4	&target_obj
op	4:71	0:0	5	&
water	4:72	0:0	5	target_obj
decl	5:4	5:26	2	uint8_t	*bin
water	5:16	0:0	2	,
decl	5:4	5:26	2	uint8_t	buf[128]
decl	6:4	6:19	2	int	len
water	6:11	0:0	2	,
decl	6:4	6:19	2	int	i
water	6:14	0:0	2	,
decl	6:4	6:19	2	int	ret
decl	7:4	7:15	2	int64_t	i64
if	8:4	9:39	2	(! o || ! target_obj || ( o -> offset <= 0 && o -> type != AV_OPT_TYPE_CONST ))
cond	8:8	8:74	3	! o || ! target_obj || ( o -> offset <= 0 && o -> type != AV_OPT_TYPE_CONST )
op	8:8	0:0	4	!
water	8:9	0:0	4	o
op	8:11	0:0	4	||
op	8:14	0:0	4	!
water	8:15	0:0	4	target_obj
op	8:26	0:0	4	||
water	8:29	0:0	4	(
water	8:30	0:0	4	o
op	8:31	0:0	4	->
water	8:33	0:0	4	offset
op	8:39	0:0	4	<=
water	8:41	0:0	4	0
op	8:43	0:0	4	&&
water	8:46	0:0	4	o
op	8:47	0:0	4	->
water	8:49	0:0	4	type
op	8:54	0:0	4	!=
water	8:57	0:0	4	AV_OPT_TYPE_CONST
water	8:74	0:0	4	)
stmts	9:8	9:39	3	
return	9:8	9:39	4	AVERROR_OPTION_NOT_FOUND
water	9:15	0:0	5	AVERROR_OPTION_NOT_FOUND
water	10:4	0:0	2	dst
op	10:8	0:0	2	=
water	10:10	0:0	2	(
water	10:11	0:0	2	uint8_t
op	10:18	0:0	2	*
water	10:19	0:0	2	)
water	10:20	0:0	2	target_obj
op	10:31	0:0	2	+
water	10:33	0:0	2	o
op	10:34	0:0	2	->
water	10:36	0:0	2	offset
water	10:42	0:0	2	;
water	11:4	0:0	2	buf
op	11:7	0:0	2	[
water	11:8	0:0	2	0
op	11:9	0:0	2	]
op	11:11	0:0	2	=
water	11:13	0:0	2	0
water	11:14	0:0	2	;
switch	12:4	67:4	2	(o -> type)
cond	12:12	12:15	3	o -> type
water	12:12	0:0	4	o
op	12:13	0:0	4	->
water	12:15	0:0	4	type
stmts	12:21	67:4	3	
water	12:21	0:0	4	{
label	13:4	13:26	4	case AV_OPT_TYPE_FLAGS :
water	13:32	0:0	4	ret
op	13:36	0:0	4	=
call	13:38	13:90	4	snprintf
arg	13:47	13:50	5	buf
water	13:47	0:0	6	buf
arg	13:52	13:63	5	sizeof(buf)
op	13:52	0:0	6	sizeof
water	13:58	0:0	6	(
water	13:59	0:0	6	buf
water	13:62	0:0	6	)
arg	13:65	13:73	5	"0x%08X"
water	13:65	0:0	6	"0x%08X"
arg	13:76	13:90	5	*(int*)dst
op	13:76	0:0	6	*
water	13:77	0:0	6	(
water	13:78	0:0	6	int
op	13:85	0:0	6	*
water	13:86	0:0	6	)
water	13:87	0:0	6	dst
water	13:91	0:0	4	;
break	13:92	13:97	4	
label	14:4	14:24	4	case AV_OPT_TYPE_INT :
water	14:32	0:0	4	ret
op	14:36	0:0	4	=
call	14:38	14:90	4	snprintf
arg	14:47	14:50	5	buf
water	14:47	0:0	6	buf
arg	14:52	14:63	5	sizeof(buf)
op	14:52	0:0	6	sizeof
water	14:58	0:0	6	(
water	14:59	0:0	6	buf
water	14:62	0:0	6	)
arg	14:65	14:70	5	"%d"
water	14:65	0:0	6	"%d"
arg	14:76	14:90	5	*(int*)dst
op	14:76	0:0	6	*
water	14:77	0:0	6	(
water	14:78	0:0	6	int
op	14:85	0:0	6	*
water	14:86	0:0	6	)
water	14:87	0:0	6	dst
water	14:91	0:0	4	;
break	14:92	14:97	4	
label	15:4	15:26	4	case AV_OPT_TYPE_INT64 :
water	15:32	0:0	4	ret
op	15:36	0:0	4	=
call	15:38	15:90	4	snprintf
arg	15:47	15:50	5	buf
water	15:47	0:0	6	buf
arg	15:52	15:63	5	sizeof(buf)
op	15:52	0:0	6	sizeof
water	15:58	0:0	6	(
water	15:59	0:0	6	buf
water	15:62	0:0	6	)
arg	15:65	15:74	5	"%"PRId64
water	15:65	0:0	6	"%"
water	15:68	0:0	6	PRId64
arg	15:76	15:90	5	*(int64_t*)dst
op	15:76	0:0	6	*
water	15:77	0:0	6	(
water	15:78	0:0	6	int64_t
op	15:85	0:0	6	*
water	15:86	0:0	6	)
water	15:87	0:0	6	dst
water	15:91	0:0	4	;
break	15:92	15:97	4	
label	16:4	16:26	4	case AV_OPT_TYPE_FLOAT :
water	16:32	0:0	4	ret
op	16:36	0:0	4	=
call	16:38	16:90	4	snprintf
arg	16:47	16:50	5	buf
water	16:47	0:0	6	buf
arg	16:52	16:63	5	sizeof(buf)
op	16:52	0:0	6	sizeof
water	16:58	0:0	6	(
water	16:59	0:0	6	buf
water	16:62	0:0	6	)
arg	16:65	16:70	5	"%f"
water	16:65	0:0	6	"%f"
arg	16:76	16:90	5	*(float*)dst
op	16:76	0:0	6	*
water	16:77	0:0	6	(
water	16:78	0:0	6	float
op	16:85	0:0	6	*
water	16:86	0:0	6	)
water	16:87	0:0	6	dst
water	16:91	0:0	4	;
break	16:92	16:97	4	
label	17:4	17:27	4	case AV_OPT_TYPE_DOUBLE :
water	17:32	0:0	4	ret
op	17:36	0:0	4	=
call	17:38	17:90	4	snprintf
arg	17:47	17:50	5	buf
water	17:47	0:0	6	buf
arg	17:52	17:63	5	sizeof(buf)
op	17:52	0:0	6	sizeof
water	17:58	0:0	6	(
water	17:59	0:0	6	buf
water	17:62	0:0	6	)
arg	17:65	17:70	5	"%f"
water	17:65	0:0	6	"%f"
arg	17:76	17:90	5	*(double*)dst
op	17:76	0:0	6	*
water	17:77	0:0	6	(
water	17:78	0:0	6	double
op	17:85	0:0	6	*
water	17:86	0:0	6	)
water	17:87	0:0	6	dst
water	17:91	0:0	4	;
break	17:92	17:97	4	
label	18:4	18:31	4	case AV_OPT_TYPE_VIDEO_RATE :
label	19:4	19:29	4	case AV_OPT_TYPE_RATIONAL :
water	19:32	0:0	4	ret
op	19:36	0:0	4	=
call	19:38	19:124	4	snprintf
arg	19:47	19:50	5	buf
water	19:47	0:0	6	buf
arg	19:52	19:63	5	sizeof(buf)
op	19:52	0:0	6	sizeof
water	19:58	0:0	6	(
water	19:59	0:0	6	buf
water	19:62	0:0	6	)
arg	19:65	19:72	5	"%d/%d"
water	19:65	0:0	6	"%d/%d"
arg	19:76	19:99	5	((AVRational*)dst)->num
water	19:76	0:0	6	(
water	19:77	0:0	6	(
water	19:78	0:0	6	AVRational
op	19:88	0:0	6	*
water	19:89	0:0	6	)
water	19:90	0:0	6	dst
water	19:93	0:0	6	)
op	19:94	0:0	6	->
water	19:96	0:0	6	num
arg	19:101	19:124	5	((AVRational*)dst)->den
water	19:101	0:0	6	(
water	19:102	0:0	6	(
water	19:103	0:0	6	AVRational
op	19:113	0:0	6	*
water	19:114	0:0	6	)
water	19:115	0:0	6	dst
water	19:118	0:0	6	)
op	19:119	0:0	6	->
water	19:121	0:0	6	den
water	19:125	0:0	4	;
break	19:126	19:131	4	
label	20:4	20:26	4	case AV_OPT_TYPE_CONST :
water	20:32	0:0	4	ret
op	20:36	0:0	4	=
call	20:38	20:94	4	snprintf
arg	20:47	20:50	5	buf
water	20:47	0:0	6	buf
arg	20:52	20:63	5	sizeof(buf)
op	20:52	0:0	6	sizeof
water	20:58	0:0	6	(
water	20:59	0:0	6	buf
water	20:62	0:0	6	)
arg	20:65	20:70	5	"%f"
water	20:65	0:0	6	"%f"
arg	20:76	20:94	5	o->default_val.dbl
water	20:76	0:0	6	o
op	20:77	0:0	6	->
water	20:79	0:0	6	default_val
op	20:90	0:0	6	.
water	20:91	0:0	6	dbl
water	20:95	0:0	4	;
break	20:96	20:101	4	
label	21:4	21:27	4	case AV_OPT_TYPE_STRING :
if	22:8	23:49	4	(* ( uint8_t * * ) dst)
cond	22:12	22:24	5	* ( uint8_t * * ) dst
op	22:12	0:0	6	*
water	22:13	0:0	6	(
water	22:14	0:0	6	uint8_t
op	22:21	0:0	6	*
op	22:22	0:0	6	*
water	22:23	0:0	6	)
water	22:24	0:0	6	dst
stmts	23:12	23:49	5	
op	23:12	0:0	6	*
water	23:13	0:0	6	out_val
op	23:21	0:0	6	=
call	23:23	23:48	6	av_strdup
arg	23:33	23:48	7	*(uint8_t**)dst
op	23:33	0:0	8	*
water	23:34	0:0	8	(
water	23:35	0:0	8	uint8_t
op	23:42	0:0	8	*
op	23:43	0:0	8	*
water	23:44	0:0	8	)
water	23:45	0:0	8	dst
water	23:49	0:0	6	;
else	24:8	25:36	4
stmts	25:12	25:36	5	
op	25:12	0:0	6	*
water	25:13	0:0	6	out_val
op	25:21	0:0	6	=
call	25:23	25:35	6	av_strdup
arg	25:33	25:35	7	""
water	25:33	0:0	8	""
water	25:36	0:0	6	;
return	26:8	26:45	4	*out_val?0:AVERROR(ENOMEM)
op	26:15	0:0	5	*
water	26:16	0:0	5	out_val
water	26:24	0:0	5	?
water	26:26	0:0	5	0
water	26:28	0:0	5	:
call	26:30	26:44	5	AVERROR
arg	26:38	26:44	6	ENOMEM
water	26:38	0:0	7	ENOMEM
label	27:4	27:27	4	case AV_OPT_TYPE_BINARY :
water	28:8	0:0	4	len
op	28:12	0:0	4	=
op	28:14	0:0	4	*
call	28:15	28:58	4	(int*)
arg	28:22	28:58	5	((uint8_t*)dst)+sizeof(uint8_t*)
water	28:22	0:0	6	(
water	28:23	0:0	6	(
water	28:24	0:0	6	uint8_t
op	28:32	0:0	6	*
water	28:33	0:0	6	)
water	28:34	0:0	6	dst
water	28:37	0:0	6	)
op	28:39	0:0	6	+
op	28:41	0:0	6	sizeof
water	28:47	0:0	6	(
water	28:48	0:0	6	uint8_t
op	28:56	0:0	6	*
water	28:57	0:0	6	)
water	28:59	0:0	4	;
if	29:8	30:34	4	(( uint64_t ) len * 2 + 1 > INT_MAX)
cond	29:12	29:34	5	( uint64_t ) len * 2 + 1 > INT_MAX
water	29:12	0:0	6	(
water	29:13	0:0	6	uint64_t
water	29:21	0:0	6	)
water	29:22	0:0	6	len
op	29:25	0:0	6	*
water	29:26	0:0	6	2
op	29:28	0:0	6	+
water	29:30	0:0	6	1
op	29:32	0:0	6	>
water	29:34	0:0	6	INT_MAX
stmts	30:12	30:34	5	
return	30:12	30:34	6	AVERROR(EINVAL)
call	30:19	30:33	7	AVERROR
arg	30:27	30:33	8	EINVAL
water	30:27	0:0	9	EINVAL
if	31:8	32:34	4	(! ( * out_val =av_malloc (len * 2 + 1 ) ))
cond	31:12	31:45	5	! ( * out_val =av_malloc (len * 2 + 1 ) )
op	31:12	0:0	6	!
water	31:13	0:0	6	(
op	31:14	0:0	6	*
water	31:15	0:0	6	out_val
op	31:23	0:0	6	=
call	31:25	31:44	6	av_malloc
arg	31:35	31:44	7	len*2+1
water	31:35	0:0	8	len
op	31:38	0:0	8	*
water	31:39	0:0	8	2
op	31:41	0:0	8	+
water	31:43	0:0	8	1
water	31:45	0:0	6	)
stmts	32:12	32:34	5	
return	32:12	32:34	6	AVERROR(ENOMEM)
call	32:19	32:33	7	AVERROR
arg	32:27	32:33	8	ENOMEM
water	32:27	0:0	9	ENOMEM
if	33:8	36:8	4	(! len)
cond	33:12	33:13	5	! len
op	33:12	0:0	6	!
water	33:13	0:0	6	len
stmts	33:18	36:8	5	
water	33:18	0:0	6	{
op	34:12	0:0	6	*
water	34:13	0:0	6	out_val
op	34:20	0:0	6	[
water	34:21	0:0	6	0
op	34:22	0:0	6	]
op	34:24	0:0	6	=
water	34:26	0:0	6	'\0'
water	34:30	0:0	6	;
return	35:12	35:20	6	0
water	35:19	0:0	7	0
water	36:8	0:0	6	}
water	37:8	0:0	4	bin
op	37:12	0:0	4	=
op	37:14	0:0	4	*
water	37:15	0:0	4	(
water	37:16	0:0	4	uint8_t
op	37:23	0:0	4	*
op	37:24	0:0	4	*
water	37:25	0:0	4	)
water	37:26	0:0	4	dst
water	37:29	0:0	4	;
for	38:8	39:55	4	(i = 0 ;i < len;i ++)
forinit	38:13	38:18	5	i = 0 ;
water	38:13	0:0	6	i
op	38:15	0:0	6	=
water	38:17	0:0	6	0
water	38:18	0:0	6	;
cond	38:20	38:24	5	i < len
water	38:20	0:0	6	i
op	38:22	0:0	6	<
water	38:24	0:0	6	len
forexpr	38:29	38:30	5	i ++
water	38:29	0:0	6	i
op	38:30	0:0	6	++
stmts	39:12	39:55	5	
call	39:12	39:54	6	snprintf
arg	39:21	39:35	7	*out_val+i*2
op	39:21	0:0	8	*
water	39:22	0:0	8	out_val
op	39:30	0:0	8	+
water	39:32	0:0	8	i
op	39:33	0:0	8	*
water	39:34	0:0	8	2
arg	39:37	39:38	7	3
water	39:37	0:0	8	3
arg	39:40	39:46	7	"%02X"
water	39:40	0:0	8	"%02X"
arg	39:48	39:54	7	bin[i]
water	39:48	0:0	8	bin
op	39:51	0:0	8	[
water	39:52	0:0	8	i
op	39:53	0:0	8	]
water	39:55	0:0	6	;
return	40:8	40:16	4	0
water	40:15	0:0	5	0
label	41:4	41:31	4	case AV_OPT_TYPE_IMAGE_SIZE :
water	42:8	0:0	4	ret
op	42:12	0:0	4	=
call	42:14	42:82	4	snprintf
arg	42:23	42:26	5	buf
water	42:23	0:0	6	buf
arg	42:28	42:39	5	sizeof(buf)
op	42:28	0:0	6	sizeof
water	42:34	0:0	6	(
water	42:35	0:0	6	buf
water	42:38	0:0	6	)
arg	42:41	42:48	5	"%dx%d"
water	42:41	0:0	6	"%dx%d"
arg	42:50	42:65	5	((int*)dst)[0]
water	42:50	0:0	6	(
water	42:51	0:0	6	(
water	42:52	0:0	6	int
op	42:56	0:0	6	*
water	42:57	0:0	6	)
water	42:58	0:0	6	dst
water	42:61	0:0	6	)
op	42:62	0:0	6	[
water	42:63	0:0	6	0
op	42:64	0:0	6	]
arg	42:67	42:82	5	((int*)dst)[1]
water	42:67	0:0	6	(
water	42:68	0:0	6	(
water	42:69	0:0	6	int
op	42:73	0:0	6	*
water	42:74	0:0	6	)
water	42:75	0:0	6	dst
water	42:78	0:0	6	)
op	42:79	0:0	6	[
water	42:80	0:0	6	1
op	42:81	0:0	6	]
water	42:83	0:0	4	;
break	43:8	43:13	4	
label	44:4	44:30	4	case AV_OPT_TYPE_PIXEL_FMT :
water	45:8	0:0	4	ret
op	45:12	0:0	4	=
call	45:14	45:124	4	snprintf
arg	45:23	45:26	5	buf
water	45:23	0:0	6	buf
arg	45:28	45:39	5	sizeof(buf)
op	45:28	0:0	6	sizeof
water	45:34	0:0	6	(
water	45:35	0:0	6	buf
water	45:38	0:0	6	)
arg	45:41	45:45	5	"%s"
water	45:41	0:0	6	"%s"
arg	45:47	45:124	5	(char*)av_x_if_null(av_get_pix_fmt_name(*(enumAVPixelFormat*)dst),"none")
water	45:47	0:0	6	(
water	45:48	0:0	6	char
op	45:53	0:0	6	*
water	45:54	0:0	6	)
call	45:55	45:123	6	av_x_if_null
arg	45:68	45:115	7	av_get_pix_fmt_name(*(enumAVPixelFormat*)dst)
call	45:68	45:114	8	av_get_pix_fmt_name
arg	45:88	45:114	9	*(enumAVPixelFormat*)dst
op	45:88	0:0	10	*
water	45:89	0:0	10	(
water	45:90	0:0	10	enum
water	45:95	0:0	10	AVPixelFormat
op	45:109	0:0	10	*
water	45:110	0:0	10	)
water	45:111	0:0	10	dst
arg	45:117	45:123	7	"none"
water	45:117	0:0	8	"none"
water	45:125	0:0	4	;
break	46:8	46:13	4	
label	47:4	47:31	4	case AV_OPT_TYPE_SAMPLE_FMT :
water	48:8	0:0	4	ret
op	48:12	0:0	4	=
call	48:14	48:128	4	snprintf
arg	48:23	48:26	5	buf
water	48:23	0:0	6	buf
arg	48:28	48:39	5	sizeof(buf)
op	48:28	0:0	6	sizeof
water	48:34	0:0	6	(
water	48:35	0:0	6	buf
water	48:38	0:0	6	)
arg	48:41	48:45	5	"%s"
water	48:41	0:0	6	"%s"
arg	48:47	48:128	5	(char*)av_x_if_null(av_get_sample_fmt_name(*(enumAVSampleFormat*)dst),"none")
water	48:47	0:0	6	(
water	48:48	0:0	6	char
op	48:53	0:0	6	*
water	48:54	0:0	6	)
call	48:55	48:127	6	av_x_if_null
arg	48:68	48:119	7	av_get_sample_fmt_name(*(enumAVSampleFormat*)dst)
call	48:68	48:118	8	av_get_sample_fmt_name
arg	48:91	48:118	9	*(enumAVSampleFormat*)dst
op	48:91	0:0	10	*
water	48:92	0:0	10	(
water	48:93	0:0	10	enum
water	48:98	0:0	10	AVSampleFormat
op	48:113	0:0	10	*
water	48:114	0:0	10	)
water	48:115	0:0	10	dst
arg	48:121	48:127	7	"none"
water	48:121	0:0	8	"none"
water	48:129	0:0	4	;
break	49:8	49:13	4	
label	50:4	50:29	4	case AV_OPT_TYPE_DURATION :
water	51:8	0:0	4	i64
op	51:12	0:0	4	=
op	51:14	0:0	4	*
water	51:15	0:0	4	(
water	51:16	0:0	4	int64_t
op	51:24	0:0	4	*
water	51:25	0:0	4	)
water	51:26	0:0	4	dst
water	51:29	0:0	4	;
water	52:8	0:0	4	ret
op	52:12	0:0	4	=
call	52:14	54:72	4	snprintf
arg	52:23	52:26	5	buf
water	52:23	0:0	6	buf
arg	52:28	52:39	5	sizeof(buf)
op	52:28	0:0	6	sizeof
water	52:34	0:0	6	(
water	52:35	0:0	6	buf
water	52:38	0:0	6	)
arg	52:41	52:67	5	"%"PRIi64":%02d:%02d.%06d"
water	52:41	0:0	6	"%"
water	52:44	0:0	6	PRIi64
water	52:50	0:0	6	":%02d:%02d.%06d"
arg	53:23	53:39	5	i64/3600000000
water	53:23	0:0	6	i64
op	53:27	0:0	6	/
water	53:29	0:0	6	3600000000
arg	53:41	53:69	5	(int)((i64/60000000)%60)
call	53:41	53:68	6	(int)
arg	53:47	53:68	7	(i64/60000000)%60
water	53:47	0:0	8	(
water	53:48	0:0	8	i64
op	53:52	0:0	8	/
water	53:54	0:0	8	60000000
water	53:62	0:0	8	)
op	53:64	0:0	8	%
water	53:66	0:0	8	60
arg	54:23	54:50	5	(int)((i64/1000000)%60)
call	54:23	54:49	6	(int)
arg	54:29	54:49	7	(i64/1000000)%60
water	54:29	0:0	8	(
water	54:30	0:0	8	i64
op	54:34	0:0	8	/
water	54:36	0:0	8	1000000
water	54:43	0:0	8	)
op	54:45	0:0	8	%
water	54:47	0:0	8	60
arg	54:52	54:72	5	(int)(i64%1000000)
call	54:52	54:71	6	(int)
arg	54:58	54:71	7	i64%1000000
water	54:58	0:0	8	i64
op	54:62	0:0	8	%
water	54:64	0:0	8	1000000
water	54:73	0:0	4	;
break	55:8	55:13	4	
label	56:4	56:26	4	case AV_OPT_TYPE_COLOR :
water	57:8	0:0	4	ret
op	57:12	0:0	4	=
call	57:14	59:73	4	snprintf
arg	57:23	57:26	5	buf
water	57:23	0:0	6	buf
arg	57:28	57:39	5	sizeof(buf)
op	57:28	0:0	6	sizeof
water	57:34	0:0	6	(
water	57:35	0:0	6	buf
water	57:38	0:0	6	)
arg	57:41	57:61	5	"0x%02x%02x%02x%02x"
water	57:41	0:0	6	"0x%02x%02x%02x%02x"
arg	58:23	58:47	5	(int)((uint8_t*)dst)[0]
call	58:23	58:43	6	(int)
arg	58:29	58:43	7	(uint8_t*)dst
water	58:29	0:0	8	(
water	58:30	0:0	8	uint8_t
op	58:38	0:0	8	*
water	58:39	0:0	8	)
water	58:40	0:0	8	dst
op	58:44	0:0	6	[
water	58:45	0:0	6	0
op	58:46	0:0	6	]
arg	58:49	58:73	5	(int)((uint8_t*)dst)[1]
call	58:49	58:69	6	(int)
arg	58:55	58:69	7	(uint8_t*)dst
water	58:55	0:0	8	(
water	58:56	0:0	8	uint8_t
op	58:64	0:0	8	*
water	58:65	0:0	8	)
water	58:66	0:0	8	dst
op	58:70	0:0	6	[
water	58:71	0:0	6	1
op	58:72	0:0	6	]
arg	59:23	59:47	5	(int)((uint8_t*)dst)[2]
call	59:23	59:43	6	(int)
arg	59:29	59:43	7	(uint8_t*)dst
water	59:29	0:0	8	(
water	59:30	0:0	8	uint8_t
op	59:38	0:0	8	*
water	59:39	0:0	8	)
water	59:40	0:0	8	dst
op	59:44	0:0	6	[
water	59:45	0:0	6	2
op	59:46	0:0	6	]
arg	59:49	59:73	5	(int)((uint8_t*)dst)[3]
call	59:49	59:69	6	(int)
arg	59:55	59:69	7	(uint8_t*)dst
water	59:55	0:0	8	(
water	59:56	0:0	8	uint8_t
op	59:64	0:0	8	*
water	59:65	0:0	8	)
water	59:66	0:0	8	dst
op	59:70	0:0	6	[
water	59:71	0:0	6	3
op	59:72	0:0	6	]
water	59:74	0:0	4	;
break	60:8	60:13	4	
label	61:4	61:35	4	case AV_OPT_TYPE_CHANNEL_LAYOUT :
water	62:8	0:0	4	i64
op	62:12	0:0	4	=
op	62:14	0:0	4	*
water	62:15	0:0	4	(
water	62:16	0:0	4	int64_t
op	62:24	0:0	4	*
water	62:25	0:0	4	)
water	62:26	0:0	4	dst
water	62:29	0:0	4	;
water	63:8	0:0	4	ret
op	63:12	0:0	4	=
call	63:14	63:57	4	snprintf
arg	63:23	63:26	5	buf
water	63:23	0:0	6	buf
arg	63:28	63:39	5	sizeof(buf)
op	63:28	0:0	6	sizeof
water	63:34	0:0	6	(
water	63:35	0:0	6	buf
water	63:38	0:0	6	)
arg	63:41	63:52	5	"0x%"PRIx64
water	63:41	0:0	6	"0x%"
water	63:46	0:0	6	PRIx64
arg	63:54	63:57	5	i64
water	63:54	0:0	6	i64
water	63:58	0:0	4	;
break	64:8	64:13	4	
label	65:4	65:11	4	default :
return	66:8	66:30	4	AVERROR(EINVAL)
call	66:15	66:29	5	AVERROR
arg	66:23	66:29	6	EINVAL
water	66:23	0:0	7	EINVAL
water	67:4	0:0	4	}
if	68:4	69:30	2	(ret >= sizeof ( buf ))
cond	68:8	68:25	3	ret >= sizeof ( buf )
water	68:8	0:0	4	ret
op	68:12	0:0	4	>=
op	68:15	0:0	4	sizeof
water	68:21	0:0	4	(
water	68:22	0:0	4	buf
water	68:25	0:0	4	)
stmts	69:8	69:30	3	
return	69:8	69:30	4	AVERROR(EINVAL)
call	69:15	69:29	5	AVERROR
arg	69:23	69:29	6	EINVAL
water	69:23	0:0	7	EINVAL
op	70:4	0:0	2	*
water	70:5	0:0	2	out_val
op	70:13	0:0	2	=
call	70:15	70:28	2	av_strdup
arg	70:25	70:28	3	buf
water	70:25	0:0	4	buf
water	70:29	0:0	2	;
return	71:4	71:41	2	*out_val?0:AVERROR(ENOMEM)
op	71:11	0:0	3	*
water	71:12	0:0	3	out_val
water	71:20	0:0	3	?
water	71:22	0:0	3	0
water	71:24	0:0	3	:
call	71:26	71:40	3	AVERROR
arg	71:34	71:40	4	ENOMEM
water	71:34	0:0	5	ENOMEM
