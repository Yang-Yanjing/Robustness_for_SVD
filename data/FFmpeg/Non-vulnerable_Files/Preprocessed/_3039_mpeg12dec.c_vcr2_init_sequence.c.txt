func	1:0	47:0	0	static int	vcr2_init_sequence
params	1:29	0:0	1	
param	1:30	1:51	2	AVCodecContext *	avctx
stmnts	0:0	46:12	1	
decl	3:4	3:40	2	Mpeg1Context	*s1
op	3:22	0:0	2	=
water	3:24	0:0	2	avctx
op	3:29	0:0	2	->
water	3:31	0:0	2	priv_data
decl	4:4	4:41	2	MpegEncContext	*s
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	s1
op	4:27	0:0	2	->
water	4:29	0:0	2	mpeg_enc_ctx
decl	5:4	5:17	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:17	2	int	v
water	5:12	0:0	2	,
decl	5:4	5:17	2	int	ret
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	out_format
op	7:18	0:0	2	=
water	7:20	0:0	2	FMT_MPEG1
water	7:29	0:0	2	;
if	8:4	11:4	2	(s1 -> mpeg_enc_ctx_allocated)
cond	8:8	8:12	3	s1 -> mpeg_enc_ctx_allocated
water	8:8	0:0	4	s1
op	8:10	0:0	4	->
water	8:12	0:0	4	mpeg_enc_ctx_allocated
stmts	8:36	11:4	3	
water	8:36	0:0	4	{
call	9:8	9:27	4	ff_mpv_common_end
arg	9:26	9:27	5	s
water	9:26	0:0	6	s
water	9:28	0:0	4	;
water	10:8	0:0	4	s1
op	10:10	0:0	4	->
water	10:12	0:0	4	mpeg_enc_ctx_allocated
op	10:35	0:0	4	=
water	10:37	0:0	4	0
water	10:38	0:0	4	;
water	11:4	0:0	4	}
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	width
op	12:24	0:0	2	=
water	12:26	0:0	2	avctx
op	12:31	0:0	2	->
water	12:33	0:0	2	coded_width
water	12:44	0:0	2	;
water	13:4	0:0	2	s
op	13:5	0:0	2	->
water	13:7	0:0	2	height
op	13:24	0:0	2	=
water	13:26	0:0	2	avctx
op	13:31	0:0	2	->
water	13:33	0:0	2	coded_height
water	13:45	0:0	2	;
water	14:4	0:0	2	avctx
op	14:9	0:0	2	->
water	14:11	0:0	2	has_b_frames
op	14:24	0:0	2	=
water	14:26	0:0	2	0
water	14:27	0:0	2	;
water	15:4	0:0	2	s
op	15:5	0:0	2	->
water	15:7	0:0	2	low_delay
op	15:24	0:0	2	=
water	15:26	0:0	2	1
water	15:27	0:0	2	;
water	16:4	0:0	2	avctx
op	16:9	0:0	2	->
water	16:11	0:0	2	pix_fmt
op	16:19	0:0	2	=
call	16:21	16:47	2	mpeg_get_pixelformat
arg	16:42	16:47	3	avctx
water	16:42	0:0	4	avctx
water	16:48	0:0	2	;
call	17:4	17:34	2	setup_hwaccel_for_pixfmt
arg	17:29	17:34	3	avctx
water	17:29	0:0	4	avctx
water	17:35	0:0	2	;
call	18:4	18:22	2	ff_mpv_idct_init
arg	18:21	18:22	3	s
water	18:21	0:0	4	s
water	18:23	0:0	2	;
if	19:4	20:18	2	(( ret =ff_mpv_common_init (s ) ) < 0)
cond	19:8	19:40	3	( ret =ff_mpv_common_init (s ) ) < 0
water	19:8	0:0	4	(
water	19:9	0:0	4	ret
op	19:13	0:0	4	=
call	19:15	19:35	4	ff_mpv_common_init
arg	19:34	19:35	5	s
water	19:34	0:0	6	s
water	19:36	0:0	4	)
op	19:38	0:0	4	<
water	19:40	0:0	4	0
stmts	20:8	20:18	3	
return	20:8	20:18	4	ret
water	20:15	0:0	5	ret
water	21:4	0:0	2	s1
op	21:6	0:0	2	->
water	21:8	0:0	2	mpeg_enc_ctx_allocated
op	21:31	0:0	2	=
water	21:33	0:0	2	1
water	21:34	0:0	2	;
for	22:4	30:4	2	(i = 0 ;i < 64;i ++)
forinit	22:9	22:14	3	i = 0 ;
water	22:9	0:0	4	i
op	22:11	0:0	4	=
water	22:13	0:0	4	0
water	22:14	0:0	4	;
cond	22:16	22:20	3	i < 64
water	22:16	0:0	4	i
op	22:18	0:0	4	<
water	22:20	0:0	4	64
forexpr	22:24	22:25	3	i ++
water	22:24	0:0	4	i
op	22:25	0:0	4	++
stmts	22:29	30:4	3	
water	22:29	0:0	4	{
decl	23:8	23:43	4	int	j
op	23:14	0:0	4	=
water	23:16	0:0	4	s
op	23:17	0:0	4	->
water	23:19	0:0	4	idsp
op	23:23	0:0	4	.
water	23:24	0:0	4	idct_permutation
op	23:40	0:0	4	[
water	23:41	0:0	4	i
op	23:42	0:0	4	]
water	24:8	0:0	4	v
op	24:10	0:0	4	=
water	24:12	0:0	4	ff_mpeg1_default_intra_matrix
op	24:41	0:0	4	[
water	24:42	0:0	4	i
op	24:43	0:0	4	]
water	24:44	0:0	4	;
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	intra_matrix
op	25:23	0:0	4	[
water	25:24	0:0	4	j
op	25:25	0:0	4	]
op	25:34	0:0	4	=
water	25:36	0:0	4	v
water	25:37	0:0	4	;
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	chroma_intra_matrix
op	26:30	0:0	4	[
water	26:31	0:0	4	j
op	26:32	0:0	4	]
op	26:34	0:0	4	=
water	26:36	0:0	4	v
water	26:37	0:0	4	;
water	27:8	0:0	4	v
op	27:10	0:0	4	=
water	27:12	0:0	4	ff_mpeg1_default_non_intra_matrix
op	27:45	0:0	4	[
water	27:46	0:0	4	i
op	27:47	0:0	4	]
water	27:48	0:0	4	;
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	inter_matrix
op	28:23	0:0	4	[
water	28:24	0:0	4	j
op	28:25	0:0	4	]
op	28:34	0:0	4	=
water	28:36	0:0	4	v
water	28:37	0:0	4	;
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	chroma_inter_matrix
op	29:30	0:0	4	[
water	29:31	0:0	4	j
op	29:32	0:0	4	]
op	29:34	0:0	4	=
water	29:36	0:0	4	v
water	29:37	0:0	4	;
water	30:4	0:0	4	}
water	31:4	0:0	2	s
op	31:5	0:0	2	->
water	31:7	0:0	2	progressive_sequence
op	31:29	0:0	2	=
water	31:31	0:0	2	1
water	31:32	0:0	2	;
water	32:4	0:0	2	s
op	32:5	0:0	2	->
water	32:7	0:0	2	progressive_frame
op	32:29	0:0	2	=
water	32:31	0:0	2	1
water	32:32	0:0	2	;
water	33:4	0:0	2	s
op	33:5	0:0	2	->
water	33:7	0:0	2	picture_structure
op	33:29	0:0	2	=
water	33:31	0:0	2	PICT_FRAME
water	33:41	0:0	2	;
water	34:4	0:0	2	s
op	34:5	0:0	2	->
water	34:7	0:0	2	first_field
op	34:29	0:0	2	=
water	34:31	0:0	2	0
water	34:32	0:0	2	;
water	35:4	0:0	2	s
op	35:5	0:0	2	->
water	35:7	0:0	2	frame_pred_frame_dct
op	35:29	0:0	2	=
water	35:31	0:0	2	1
water	35:32	0:0	2	;
water	36:4	0:0	2	s
op	36:5	0:0	2	->
water	36:7	0:0	2	chroma_format
op	36:29	0:0	2	=
water	36:31	0:0	2	1
water	36:32	0:0	2	;
if	37:4	39:4	2	(s -> codec_tag ==AV_RL32 ("BW10" ))
cond	37:8	37:38	3	s -> codec_tag ==AV_RL32 ("BW10" )
water	37:8	0:0	4	s
op	37:9	0:0	4	->
water	37:11	0:0	4	codec_tag
op	37:21	0:0	4	==
call	37:24	37:38	4	AV_RL32
arg	37:32	37:38	5	"BW10"
water	37:32	0:0	6	"BW10"
stmts	37:41	39:4	3	
water	37:41	0:0	4	{
water	38:8	0:0	4	s
op	38:9	0:0	4	->
water	38:11	0:0	4	codec_id
op	38:33	0:0	4	=
water	38:35	0:0	4	s
op	38:36	0:0	4	->
water	38:38	0:0	4	avctx
op	38:43	0:0	4	->
water	38:45	0:0	4	codec_id
op	38:54	0:0	4	=
water	38:56	0:0	4	AV_CODEC_ID_MPEG1VIDEO
water	38:78	0:0	4	;
water	39:4	0:0	4	}
else	39:6	42:4	2
stmts	39:11	42:4	3	
water	39:11	0:0	4	{
water	40:8	0:0	4	s
op	40:9	0:0	4	->
water	40:11	0:0	4	swap_uv
op	40:19	0:0	4	=
water	40:21	0:0	4	1
water	40:22	0:0	4	;
water	41:8	0:0	4	s
op	41:9	0:0	4	->
water	41:11	0:0	4	codec_id
op	41:33	0:0	4	=
water	41:35	0:0	4	s
op	41:36	0:0	4	->
water	41:38	0:0	4	avctx
op	41:43	0:0	4	->
water	41:45	0:0	4	codec_id
op	41:54	0:0	4	=
water	41:56	0:0	4	AV_CODEC_ID_MPEG2VIDEO
water	41:78	0:0	4	;
water	42:4	0:0	4	}
water	43:4	0:0	2	s1
op	43:6	0:0	2	->
water	43:8	0:0	2	save_width
op	43:29	0:0	2	=
water	43:31	0:0	2	s
op	43:32	0:0	2	->
water	43:34	0:0	2	width
water	43:39	0:0	2	;
water	44:4	0:0	2	s1
op	44:6	0:0	2	->
water	44:8	0:0	2	save_height
op	44:29	0:0	2	=
water	44:31	0:0	2	s
op	44:32	0:0	2	->
water	44:34	0:0	2	height
water	44:40	0:0	2	;
water	45:4	0:0	2	s1
op	45:6	0:0	2	->
water	45:8	0:0	2	save_progressive_seq
op	45:29	0:0	2	=
water	45:31	0:0	2	s
op	45:32	0:0	2	->
water	45:34	0:0	2	progressive_sequence
water	45:54	0:0	2	;
return	46:4	46:12	2	0
water	46:11	0:0	3	0
