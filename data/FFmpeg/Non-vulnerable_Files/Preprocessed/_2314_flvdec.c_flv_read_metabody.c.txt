func	1:0	45:0	0	static int	flv_read_metabody
params	1:28	0:0	1	
param	1:29	1:47	2	AVFormatContext *	s
param	1:49	1:65	2	int64_t	next_pos
stmnts	0:0	44:12	1	
decl	3:4	3:20	2	AMFDataType	type
decl	4:4	4:40	2	AVStream	*stream
water	4:20	0:0	2	,
decl	4:4	4:40	2	AVStream	*astream
water	4:30	0:0	2	,
decl	4:4	4:40	2	AVStream	*vstream
water	5:4	0:0	2	AVStream
water	5:13	0:0	2	av_unused
op	5:23	0:0	2	*
water	5:24	0:0	2	dstream
water	5:31	0:0	2	;
decl	6:4	6:20	2	AVIOContext	*ioc
decl	7:4	7:9	2	int	i
decl	10:4	10:19	2	char	buffer[32]
water	11:4	0:0	2	astream
op	11:12	0:0	2	=
water	11:14	0:0	2	NULL
water	11:18	0:0	2	;
water	12:4	0:0	2	vstream
op	12:12	0:0	2	=
water	12:14	0:0	2	NULL
water	12:18	0:0	2	;
water	13:4	0:0	2	dstream
op	13:12	0:0	2	=
water	13:14	0:0	2	NULL
water	13:18	0:0	2	;
water	14:4	0:0	2	ioc
op	14:12	0:0	2	=
water	14:14	0:0	2	s
op	14:15	0:0	2	->
water	14:17	0:0	2	pb
water	14:19	0:0	2	;
water	16:4	0:0	2	type
op	16:9	0:0	2	=
call	16:11	16:22	2	avio_r8
arg	16:19	16:22	3	ioc
water	16:19	0:0	4	ioc
water	16:23	0:0	2	;
if	17:4	19:27	2	(type != AMF_DATA_TYPE_STRING ||amf_get_string (ioc ,buffer ,sizeof ( buffer ) ) < 0)
cond	17:8	18:54	3	type != AMF_DATA_TYPE_STRING ||amf_get_string (ioc ,buffer ,sizeof ( buffer ) ) < 0
water	17:8	0:0	4	type
op	17:13	0:0	4	!=
water	17:16	0:0	4	AMF_DATA_TYPE_STRING
op	17:37	0:0	4	||
call	18:8	18:50	4	amf_get_string
arg	18:23	18:26	5	ioc
water	18:23	0:0	6	ioc
arg	18:28	18:34	5	buffer
water	18:28	0:0	6	buffer
arg	18:36	18:50	5	sizeof(buffer)
op	18:36	0:0	6	sizeof
water	18:42	0:0	6	(
water	18:43	0:0	6	buffer
water	18:49	0:0	6	)
op	18:52	0:0	4	<
water	18:54	0:0	4	0
stmts	19:8	19:27	3	
return	19:8	19:27	4	TYPE_UNKNOWN
water	19:15	0:0	5	TYPE_UNKNOWN
if	20:4	21:30	2	(!strcmp (buffer ,"onTextData" ))
cond	20:8	20:36	3	!strcmp (buffer ,"onTextData" )
op	20:8	0:0	4	!
call	20:9	20:36	4	strcmp
arg	20:16	20:22	5	buffer
water	20:16	0:0	6	buffer
arg	20:24	20:36	5	"onTextData"
water	20:24	0:0	6	"onTextData"
stmts	21:8	21:30	3	
return	21:8	21:30	4	TYPE_ONTEXTDATA
water	21:15	0:0	5	TYPE_ONTEXTDATA
if	22:4	23:29	2	(!strcmp (buffer ,"onCaption" ))
cond	22:8	22:35	3	!strcmp (buffer ,"onCaption" )
op	22:8	0:0	4	!
call	22:9	22:35	4	strcmp
arg	22:16	22:22	5	buffer
water	22:16	0:0	6	buffer
arg	22:24	22:35	5	"onCaption"
water	22:24	0:0	6	"onCaption"
stmts	23:8	23:29	3	
return	23:8	23:29	4	TYPE_ONCAPTION
water	23:15	0:0	5	TYPE_ONCAPTION
if	24:4	25:33	2	(!strcmp (buffer ,"onCaptionInfo" ))
cond	24:8	24:39	3	!strcmp (buffer ,"onCaptionInfo" )
op	24:8	0:0	4	!
call	24:9	24:39	4	strcmp
arg	24:16	24:22	5	buffer
water	24:16	0:0	6	buffer
arg	24:24	24:39	5	"onCaptionInfo"
water	24:24	0:0	6	"onCaptionInfo"
stmts	25:8	25:33	3	
return	25:8	25:33	4	TYPE_ONCAPTIONINFO
water	25:15	0:0	5	TYPE_ONCAPTIONINFO
if	26:4	29:4	2	(strcmp (buffer ,"onMetaData" ) &&strcmp (buffer ,"onCuePoint" ))
cond	26:8	26:67	3	strcmp (buffer ,"onMetaData" ) &&strcmp (buffer ,"onCuePoint" )
call	26:8	26:35	4	strcmp
arg	26:15	26:21	5	buffer
water	26:15	0:0	6	buffer
arg	26:23	26:35	5	"onMetaData"
water	26:23	0:0	6	"onMetaData"
op	26:37	0:0	4	&&
call	26:40	26:67	4	strcmp
arg	26:47	26:53	5	buffer
water	26:47	0:0	6	buffer
arg	26:55	26:67	5	"onCuePoint"
water	26:55	0:0	6	"onCuePoint"
stmts	26:70	29:4	3	
water	26:70	0:0	4	{
call	27:8	27:59	4	av_log
arg	27:15	27:16	5	s
water	27:15	0:0	6	s
arg	27:18	27:30	5	AV_LOG_DEBUG
water	27:18	0:0	6	AV_LOG_DEBUG
arg	27:32	27:51	5	"Unknown type %s\n"
water	27:32	0:0	6	"Unknown type %s\n"
arg	27:53	27:59	5	buffer
water	27:53	0:0	6	buffer
water	27:60	0:0	4	;
return	28:8	28:27	4	TYPE_UNKNOWN
water	28:15	0:0	5	TYPE_UNKNOWN
water	29:4	0:0	4	}
for	32:4	40:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	32:9	32:14	3	i = 0 ;
water	32:9	0:0	4	i
op	32:11	0:0	4	=
water	32:13	0:0	4	0
water	32:14	0:0	4	;
cond	32:16	32:23	3	i < s -> nb_streams
water	32:16	0:0	4	i
op	32:18	0:0	4	<
water	32:20	0:0	4	s
op	32:21	0:0	4	->
water	32:23	0:0	4	nb_streams
forexpr	32:35	32:36	3	i ++
water	32:35	0:0	4	i
op	32:36	0:0	4	++
stmts	32:40	40:4	3	
water	32:40	0:0	4	{
water	33:8	0:0	4	stream
op	33:15	0:0	4	=
water	33:17	0:0	4	s
op	33:18	0:0	4	->
water	33:20	0:0	4	streams
op	33:27	0:0	4	[
water	33:28	0:0	4	i
op	33:29	0:0	4	]
water	33:30	0:0	4	;
if	34:8	35:28	4	(stream -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	34:12	34:41	5	stream -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	34:12	0:0	6	stream
op	34:18	0:0	6	->
water	34:20	0:0	6	codec
op	34:25	0:0	6	->
water	34:27	0:0	6	codec_type
op	34:38	0:0	6	==
water	34:41	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	35:12	35:28	5	
water	35:12	0:0	6	vstream
op	35:20	0:0	6	=
water	35:22	0:0	6	stream
water	35:28	0:0	6	;
else	36:8	37:28	4
stmts	36:13	37:28	5	
if	36:13	37:28	6	(stream -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	36:17	36:46	7	stream -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	36:17	0:0	8	stream
op	36:23	0:0	8	->
water	36:25	0:0	8	codec
op	36:30	0:0	8	->
water	36:32	0:0	8	codec_type
op	36:43	0:0	8	==
water	36:46	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	37:12	37:28	7	
water	37:12	0:0	8	astream
op	37:20	0:0	8	=
water	37:22	0:0	8	stream
water	37:28	0:0	8	;
else	38:8	39:28	4
stmts	38:13	39:28	5	
if	38:13	39:28	6	(stream -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE)
cond	38:17	38:46	7	stream -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE
water	38:17	0:0	8	stream
op	38:23	0:0	8	->
water	38:25	0:0	8	codec
op	38:30	0:0	8	->
water	38:32	0:0	8	codec_type
op	38:43	0:0	8	==
water	38:46	0:0	8	AVMEDIA_TYPE_SUBTITLE
stmts	39:12	39:28	7	
water	39:12	0:0	8	dstream
op	39:20	0:0	8	=
water	39:22	0:0	8	stream
water	39:28	0:0	8	;
water	40:4	0:0	4	}
if	42:4	43:17	2	(amf_parse_object (s ,astream ,vstream ,buffer ,next_pos ,0 ) < 0)
cond	42:8	42:69	3	amf_parse_object (s ,astream ,vstream ,buffer ,next_pos ,0 ) < 0
call	42:8	42:65	4	amf_parse_object
arg	42:25	42:26	5	s
water	42:25	0:0	6	s
arg	42:28	42:35	5	astream
water	42:28	0:0	6	astream
arg	42:37	42:44	5	vstream
water	42:37	0:0	6	vstream
arg	42:46	42:52	5	buffer
water	42:46	0:0	6	buffer
arg	42:54	42:62	5	next_pos
water	42:54	0:0	6	next_pos
arg	42:64	42:65	5	0
water	42:64	0:0	6	0
op	42:67	0:0	4	<
water	42:69	0:0	4	0
stmts	43:8	43:17	3	
return	43:8	43:17	4	-1
op	43:15	0:0	5	-
water	43:16	0:0	5	1
return	44:4	44:12	2	0
water	44:11	0:0	3	0
