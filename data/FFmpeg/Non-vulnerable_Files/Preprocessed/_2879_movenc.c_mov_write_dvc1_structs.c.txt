func	1:0	75:0	0	static int	mov_write_dvc1_structs
params	1:33	0:0	1	
param	1:34	1:49	2	MOVTrack *	track
param	1:51	1:63	2	uint8_t *	buf
stmnts	0:0	74:12	1	
decl	3:4	3:22	2	uint8_t	*unescaped
decl	4:4	4:72	2	const uint8_t	*start
water	4:24	0:0	2	,
decl	4:4	4:72	2	const uint8_t	*next
water	4:31	0:0	2	,
decl	4:4	4:72	2	const uint8_t	*end
op	4:38	0:0	2	=
water	4:40	0:0	2	track
op	4:45	0:0	2	->
water	4:47	0:0	2	vos_data
op	4:56	0:0	2	+
water	4:58	0:0	2	track
op	4:63	0:0	2	->
water	4:65	0:0	2	vos_len
decl	5:4	5:37	2	int	unescaped_size
water	5:22	0:0	2	,
decl	5:4	5:37	2	int	seq_found
op	5:34	0:0	2	=
water	5:36	0:0	2	0
decl	6:4	6:32	2	int	level
op	6:14	0:0	2	=
water	6:16	0:0	2	0
water	6:17	0:0	2	,
decl	6:4	6:32	2	int	interlace
op	6:29	0:0	2	=
water	6:31	0:0	2	0
decl	7:4	7:49	2	int	packet_seq
op	7:21	0:0	2	=
water	7:23	0:0	2	track
op	7:28	0:0	2	->
water	7:30	0:0	2	vc1_info
op	7:38	0:0	2	.
water	7:39	0:0	2	packet_seq
decl	8:4	8:51	2	int	packet_entry
op	8:21	0:0	2	=
water	8:23	0:0	2	track
op	8:28	0:0	2	->
water	8:30	0:0	2	vc1_info
op	8:38	0:0	2	.
water	8:39	0:0	2	packet_entry
decl	9:4	9:45	2	int	slices
op	9:21	0:0	2	=
water	9:23	0:0	2	track
op	9:28	0:0	2	->
water	9:30	0:0	2	vc1_info
op	9:38	0:0	2	.
water	9:39	0:0	2	slices
decl	10:4	10:21	2	PutBitContext	pbc
if	11:4	18:4	2	(track -> start_dts == AV_NOPTS_VALUE)
cond	11:8	11:28	3	track -> start_dts == AV_NOPTS_VALUE
water	11:8	0:0	4	track
op	11:13	0:0	4	->
water	11:15	0:0	4	start_dts
op	11:25	0:0	4	==
water	11:28	0:0	4	AV_NOPTS_VALUE
stmts	11:44	18:4	3	
water	11:44	0:0	4	{
water	14:8	0:0	4	packet_seq
op	14:19	0:0	4	=
water	14:21	0:0	4	packet_entry
op	14:34	0:0	4	=
water	14:36	0:0	4	1
water	14:37	0:0	4	;
call	15:8	17:66	4	av_log
arg	15:15	15:19	5	NULL
water	15:15	0:0	6	NULL
arg	15:21	15:35	5	AV_LOG_WARNING
water	15:21	0:0	6	AV_LOG_WARNING
arg	16:15	17:66	5	"moov atom written before any packets, unable to write correct ""dvc1 atom. Set the delay_moov flag to fix this.\n"
water	16:15	0:0	6	"moov atom written before any packets, unable to write correct "
water	17:15	0:0	6	"dvc1 atom. Set the delay_moov flag to fix this.\n"
water	17:67	0:0	4	;
water	18:4	0:0	4	}
water	19:4	0:0	2	unescaped
op	19:14	0:0	2	=
call	19:16	19:72	2	av_mallocz
arg	19:27	19:72	3	track->vos_len+AV_INPUT_BUFFER_PADDING_SIZE
water	19:27	0:0	4	track
op	19:32	0:0	4	->
water	19:34	0:0	4	vos_len
op	19:42	0:0	4	+
water	19:44	0:0	4	AV_INPUT_BUFFER_PADDING_SIZE
water	19:73	0:0	2	;
if	20:4	21:30	2	(! unescaped)
cond	20:8	20:9	3	! unescaped
op	20:8	0:0	4	!
water	20:9	0:0	4	unescaped
stmts	21:8	21:30	3	
return	21:8	21:30	4	AVERROR(ENOMEM)
call	21:15	21:29	5	AVERROR
arg	21:23	21:29	6	ENOMEM
water	21:23	0:0	7	ENOMEM
water	22:4	0:0	2	start
op	22:10	0:0	2	=
call	22:12	22:49	2	find_next_marker
arg	22:29	22:44	3	track->vos_data
water	22:29	0:0	4	track
op	22:34	0:0	4	->
water	22:36	0:0	4	vos_data
arg	22:46	22:49	3	end
water	22:46	0:0	4	end
water	22:50	0:0	2	;
for	23:4	47:4	2	(next = start ;next < end;start = next)
forinit	23:9	23:21	3	next = start ;
water	23:9	0:0	4	next
op	23:14	0:0	4	=
water	23:16	0:0	4	start
water	23:21	0:0	4	;
cond	23:23	23:30	3	next < end
water	23:23	0:0	4	next
op	23:28	0:0	4	<
water	23:30	0:0	4	end
forexpr	23:35	23:43	3	start = next
water	23:35	0:0	4	start
op	23:41	0:0	4	=
water	23:43	0:0	4	next
stmts	23:49	47:4	3	
water	23:49	0:0	4	{
decl	24:8	24:24	4	GetBitContext	gb
decl	25:8	25:16	4	int	size
water	26:8	0:0	4	next
op	26:13	0:0	4	=
call	26:15	26:46	4	find_next_marker
arg	26:32	26:41	5	start+4
water	26:32	0:0	6	start
op	26:38	0:0	6	+
water	26:40	0:0	6	4
arg	26:43	26:46	5	end
water	26:43	0:0	6	end
water	26:47	0:0	4	;
water	27:8	0:0	4	size
op	27:13	0:0	4	=
water	27:15	0:0	4	next
op	27:20	0:0	4	-
water	27:22	0:0	4	start
op	27:28	0:0	4	-
water	27:30	0:0	4	4
water	27:31	0:0	4	;
if	28:8	29:20	4	(size <= 0)
cond	28:12	28:20	5	size <= 0
water	28:12	0:0	6	size
op	28:17	0:0	6	<=
water	28:20	0:0	6	0
stmts	29:12	29:20	5	
continue	29:12	29:20	6	
water	30:8	0:0	4	unescaped_size
op	30:23	0:0	4	=
call	30:25	30:71	4	vc1_unescape_buffer
arg	30:45	30:54	5	start+4
water	30:45	0:0	6	start
op	30:51	0:0	6	+
water	30:53	0:0	6	4
arg	30:56	30:60	5	size
water	30:56	0:0	6	size
arg	30:62	30:71	5	unescaped
water	30:62	0:0	6	unescaped
water	30:72	0:0	4	;
call	31:8	31:56	4	init_get_bits
arg	31:22	31:25	5	&gb
op	31:22	0:0	6	&
water	31:23	0:0	6	gb
arg	31:27	31:36	5	unescaped
water	31:27	0:0	6	unescaped
arg	31:38	31:56	5	8*unescaped_size
water	31:38	0:0	6	8
op	31:40	0:0	6	*
water	31:42	0:0	6	unescaped_size
water	31:57	0:0	4	;
if	32:8	46:8	4	(AV_RB32 (start ) == VC1_CODE_SEQHDR)
cond	32:12	32:30	5	AV_RB32 (start ) == VC1_CODE_SEQHDR
call	32:12	32:25	6	AV_RB32
arg	32:20	32:25	7	start
water	32:20	0:0	8	start
op	32:27	0:0	6	==
water	32:30	0:0	6	VC1_CODE_SEQHDR
stmts	32:47	46:8	5	
water	32:47	0:0	6	{
decl	33:12	33:42	6	int	profile
op	33:24	0:0	6	=
call	33:26	33:41	7	get_bits
arg	33:35	33:38	8	&gb
op	33:35	0:0	9	&
water	33:36	0:0	9	gb
arg	33:40	33:41	8	2
water	33:40	0:0	9	2
if	34:12	37:12	6	(profile != PROFILE_ADVANCED)
cond	34:16	34:27	7	profile != PROFILE_ADVANCED
water	34:16	0:0	8	profile
op	34:24	0:0	8	!=
water	34:27	0:0	8	PROFILE_ADVANCED
stmts	34:45	37:12	7	
water	34:45	0:0	8	{
call	35:16	35:33	8	av_free
arg	35:24	35:33	9	unescaped
water	35:24	0:0	10	unescaped
water	35:34	0:0	8	;
return	36:16	36:38	8	AVERROR(ENOSYS)
call	36:23	36:37	9	AVERROR
arg	36:31	36:37	10	ENOSYS
water	36:31	0:0	11	ENOSYS
water	37:12	0:0	8	}
water	38:12	0:0	6	seq_found
op	38:22	0:0	6	=
water	38:24	0:0	6	1
water	38:25	0:0	6	;
water	39:12	0:0	6	level
op	39:18	0:0	6	=
call	39:20	39:35	6	get_bits
arg	39:29	39:32	7	&gb
op	39:29	0:0	8	&
water	39:30	0:0	8	gb
arg	39:34	39:35	7	3
water	39:34	0:0	8	3
water	39:36	0:0	6	;
call	42:12	42:52	6	skip_bits_long
arg	42:27	42:30	7	&gb
op	42:27	0:0	8	&
water	42:28	0:0	8	gb
arg	42:32	42:52	7	2+3+5+1+2*12
water	42:32	0:0	8	2
op	42:34	0:0	8	+
water	42:36	0:0	8	3
op	42:38	0:0	8	+
water	42:40	0:0	8	5
op	42:42	0:0	8	+
water	42:44	0:0	8	1
op	42:46	0:0	8	+
water	42:48	0:0	8	2
op	42:49	0:0	8	*
water	42:50	0:0	8	12
water	42:53	0:0	6	;
call	43:12	43:28	6	skip_bits
arg	43:22	43:25	7	&gb
op	43:22	0:0	8	&
water	43:23	0:0	8	gb
arg	43:27	43:28	7	1
water	43:27	0:0	8	1
water	43:29	0:0	6	;
water	44:12	0:0	6	interlace
op	44:22	0:0	6	=
call	44:24	44:37	6	get_bits1
arg	44:34	44:37	7	&gb
op	44:34	0:0	8	&
water	44:35	0:0	8	gb
water	44:38	0:0	6	;
call	45:12	45:28	6	skip_bits
arg	45:22	45:25	7	&gb
op	45:22	0:0	8	&
water	45:23	0:0	8	gb
arg	45:27	45:28	7	4
water	45:27	0:0	8	4
water	45:29	0:0	6	;
water	46:8	0:0	6	}
water	47:4	0:0	4	}
if	48:4	51:4	2	(! seq_found)
cond	48:8	48:9	3	! seq_found
op	48:8	0:0	4	!
water	48:9	0:0	4	seq_found
stmts	48:20	51:4	3	
water	48:20	0:0	4	{
call	49:8	49:25	4	av_free
arg	49:16	49:25	5	unescaped
water	49:16	0:0	6	unescaped
water	49:26	0:0	4	;
return	50:8	50:30	4	AVERROR(ENOSYS)
call	50:15	50:29	5	AVERROR
arg	50:23	50:29	6	ENOSYS
water	50:23	0:0	7	ENOSYS
water	51:4	0:0	4	}
call	52:4	52:30	2	init_put_bits
arg	52:18	52:22	3	&pbc
op	52:18	0:0	4	&
water	52:19	0:0	4	pbc
arg	52:24	52:27	3	buf
water	52:24	0:0	4	buf
arg	52:29	52:30	3	7
water	52:29	0:0	4	7
water	52:31	0:0	2	;
call	54:4	54:24	2	put_bits
arg	54:13	54:17	3	&pbc
op	54:13	0:0	4	&
water	54:14	0:0	4	pbc
arg	54:19	54:20	3	4
water	54:19	0:0	4	4
arg	54:22	54:24	3	12
water	54:22	0:0	4	12
water	54:25	0:0	2	;
call	55:4	55:27	2	put_bits
arg	55:13	55:17	3	&pbc
op	55:13	0:0	4	&
water	55:14	0:0	4	pbc
arg	55:19	55:20	3	3
water	55:19	0:0	4	3
arg	55:22	55:27	3	level
water	55:22	0:0	4	level
water	55:28	0:0	2	;
call	56:4	56:23	2	put_bits
arg	56:13	56:17	3	&pbc
op	56:13	0:0	4	&
water	56:14	0:0	4	pbc
arg	56:19	56:20	3	1
water	56:19	0:0	4	1
arg	56:22	56:23	3	0
water	56:22	0:0	4	0
water	56:24	0:0	2	;
call	58:4	58:27	2	put_bits
arg	58:13	58:17	3	&pbc
op	58:13	0:0	4	&
water	58:14	0:0	4	pbc
arg	58:19	58:20	3	3
water	58:19	0:0	4	3
arg	58:22	58:27	3	level
water	58:22	0:0	4	level
water	58:28	0:0	2	;
call	59:4	59:23	2	put_bits
arg	59:13	59:17	3	&pbc
op	59:13	0:0	4	&
water	59:14	0:0	4	pbc
arg	59:19	59:20	3	1
water	59:19	0:0	4	1
arg	59:22	59:23	3	0
water	59:22	0:0	4	0
water	59:24	0:0	2	;
call	60:4	60:23	2	put_bits
arg	60:13	60:17	3	&pbc
op	60:13	0:0	4	&
water	60:14	0:0	4	pbc
arg	60:19	60:20	3	6
water	60:19	0:0	4	6
arg	60:22	60:23	3	0
water	60:22	0:0	4	0
water	60:24	0:0	2	;
call	61:4	61:32	2	put_bits
arg	61:13	61:17	3	&pbc
op	61:13	0:0	4	&
water	61:14	0:0	4	pbc
arg	61:19	61:20	3	1
water	61:19	0:0	4	1
arg	61:22	61:32	3	!interlace
op	61:22	0:0	4	!
water	61:23	0:0	4	interlace
water	61:33	0:0	2	;
call	62:4	62:33	2	put_bits
arg	62:13	62:17	3	&pbc
op	62:13	0:0	4	&
water	62:14	0:0	4	pbc
arg	62:19	62:20	3	1
water	62:19	0:0	4	1
arg	62:22	62:33	3	!packet_seq
op	62:22	0:0	4	!
water	62:23	0:0	4	packet_seq
water	62:34	0:0	2	;
call	63:4	63:35	2	put_bits
arg	63:13	63:17	3	&pbc
op	63:13	0:0	4	&
water	63:14	0:0	4	pbc
arg	63:19	63:20	3	1
water	63:19	0:0	4	1
arg	63:22	63:35	3	!packet_entry
op	63:22	0:0	4	!
water	63:23	0:0	4	packet_entry
water	63:36	0:0	2	;
call	64:4	64:29	2	put_bits
arg	64:13	64:17	3	&pbc
op	64:13	0:0	4	&
water	64:14	0:0	4	pbc
arg	64:19	64:20	3	1
water	64:19	0:0	4	1
arg	64:22	64:29	3	!slices
op	64:22	0:0	4	!
water	64:23	0:0	4	slices
water	64:30	0:0	2	;
call	65:4	65:23	2	put_bits
arg	65:13	65:17	3	&pbc
op	65:13	0:0	4	&
water	65:14	0:0	4	pbc
arg	65:19	65:20	3	1
water	65:19	0:0	4	1
arg	65:22	65:23	3	0
water	65:22	0:0	4	0
water	65:24	0:0	2	;
call	66:4	66:23	2	put_bits
arg	66:13	66:17	3	&pbc
op	66:13	0:0	4	&
water	66:14	0:0	4	pbc
arg	66:19	66:20	3	1
water	66:19	0:0	4	1
arg	66:22	66:23	3	0
water	66:22	0:0	4	0
water	66:24	0:0	2	;
if	68:4	69:87	2	(track -> st -> avg_frame_rate . num > 0 && track -> st -> avg_frame_rate . den > 0)
cond	68:8	68:77	3	track -> st -> avg_frame_rate . num > 0 && track -> st -> avg_frame_rate . den > 0
water	68:8	0:0	4	track
op	68:13	0:0	4	->
water	68:15	0:0	4	st
op	68:17	0:0	4	->
water	68:19	0:0	4	avg_frame_rate
op	68:33	0:0	4	.
water	68:34	0:0	4	num
op	68:38	0:0	4	>
water	68:40	0:0	4	0
op	68:42	0:0	4	&&
water	68:45	0:0	4	track
op	68:50	0:0	4	->
water	68:52	0:0	4	st
op	68:54	0:0	4	->
water	68:56	0:0	4	avg_frame_rate
op	68:70	0:0	4	.
water	68:71	0:0	4	den
op	68:75	0:0	4	>
water	68:77	0:0	4	0
stmts	69:8	69:87	3	
call	69:8	69:86	4	put_bits32
arg	69:19	69:23	5	&pbc
op	69:19	0:0	6	&
water	69:20	0:0	6	pbc
arg	69:25	69:86	5	track->st->avg_frame_rate.num/track->st->avg_frame_rate.den
water	69:25	0:0	6	track
op	69:30	0:0	6	->
water	69:32	0:0	6	st
op	69:34	0:0	6	->
water	69:36	0:0	6	avg_frame_rate
op	69:50	0:0	6	.
water	69:51	0:0	6	num
op	69:55	0:0	6	/
water	69:57	0:0	6	track
op	69:62	0:0	6	->
water	69:64	0:0	6	st
op	69:66	0:0	6	->
water	69:68	0:0	6	avg_frame_rate
op	69:82	0:0	6	.
water	69:83	0:0	6	den
water	69:87	0:0	4	;
else	70:4	71:36	2
stmts	71:8	71:36	3	
call	71:8	71:35	4	put_bits32
arg	71:19	71:23	5	&pbc
op	71:19	0:0	6	&
water	71:20	0:0	6	pbc
arg	71:25	71:35	5	0xffffffff
water	71:25	0:0	6	0
water	71:26	0:0	6	xffffffff
water	71:36	0:0	4	;
call	72:4	72:23	2	flush_put_bits
arg	72:19	72:23	3	&pbc
op	72:19	0:0	4	&
water	72:20	0:0	4	pbc
water	72:24	0:0	2	;
call	73:4	73:21	2	av_free
arg	73:12	73:21	3	unescaped
water	73:12	0:0	4	unescaped
water	73:22	0:0	2	;
return	74:4	74:12	2	0
water	74:11	0:0	3	0
