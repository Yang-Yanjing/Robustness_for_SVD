func	1:0	154:0	0	static int	grab_read_header
params	1:27	0:0	1	
param	1:28	1:47	2	AVFormatContext *	s1
param	1:49	1:71	2	AVFormatParameters *	ap
stmnts	0:0	153:23	1	
decl	3:4	3:32	2	VideoData	*s
op	3:17	0:0	2	=
water	3:19	0:0	2	s1
op	3:21	0:0	2	->
water	3:23	0:0	2	priv_data
decl	4:4	4:16	2	AVStream	*st
decl	5:4	5:16	2	int	video_fd
decl	6:4	6:38	2	int	desired_palette
water	6:23	0:0	2	,
decl	6:4	6:38	2	int	desired_depth
decl	7:4	7:28	2	struct video_tuner	tuner
decl	8:4	8:28	2	struct video_audio	audio
decl	9:4	9:29	2	struct video_picture	pict
decl	10:4	10:9	2	int	j
decl	11:4	11:51	2	int	vformat_num
op	11:20	0:0	2	=
call	11:22	11:50	3	FF_ARRAY_ELEMS
arg	11:37	11:50	4	video_formats
water	11:37	0:0	5	video_formats
call	12:4	12:104	2	av_log
arg	12:11	12:13	3	s1
water	12:11	0:0	4	s1
arg	12:15	12:29	3	AV_LOG_WARNING
water	12:15	0:0	4	AV_LOG_WARNING
arg	12:31	12:104	3	"V4L input device is deprecated and will be removed in the next release."
water	12:31	0:0	4	"V4L input device is deprecated and will be removed in the next release."
water	12:105	0:0	2	;
if	13:4	16:4	2	(ap -> time_base . den <= 0)
cond	13:8	13:29	3	ap -> time_base . den <= 0
water	13:8	0:0	4	ap
op	13:10	0:0	4	->
water	13:12	0:0	4	time_base
op	13:21	0:0	4	.
water	13:22	0:0	4	den
op	13:26	0:0	4	<=
water	13:29	0:0	4	0
stmts	13:32	16:4	3	
water	13:32	0:0	4	{
call	14:8	14:76	4	av_log
arg	14:15	14:17	5	s1
water	14:15	0:0	6	s1
arg	14:19	14:31	5	AV_LOG_ERROR
water	14:19	0:0	6	AV_LOG_ERROR
arg	14:33	14:57	5	"Wrong time base (%d)\n"
water	14:33	0:0	6	"Wrong time base (%d)\n"
arg	14:59	14:76	5	ap->time_base.den
water	14:59	0:0	6	ap
op	14:61	0:0	6	->
water	14:63	0:0	6	time_base
op	14:72	0:0	6	.
water	14:73	0:0	6	den
water	14:77	0:0	4	;
return	15:8	15:17	4	-1
op	15:15	0:0	5	-
water	15:16	0:0	5	1
water	16:4	0:0	4	}
water	17:4	0:0	2	s
op	17:5	0:0	2	->
water	17:7	0:0	2	time_base
op	17:17	0:0	2	=
water	17:19	0:0	2	ap
op	17:21	0:0	2	->
water	17:23	0:0	2	time_base
water	17:32	0:0	2	;
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	video_win
op	18:16	0:0	2	.
water	18:17	0:0	2	width
op	18:23	0:0	2	=
water	18:25	0:0	2	ap
op	18:27	0:0	2	->
water	18:29	0:0	2	width
water	18:34	0:0	2	;
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	video_win
op	19:16	0:0	2	.
water	19:17	0:0	2	height
op	19:24	0:0	2	=
water	19:26	0:0	2	ap
op	19:28	0:0	2	->
water	19:30	0:0	2	height
water	19:36	0:0	2	;
water	20:4	0:0	2	st
op	20:7	0:0	2	=
call	20:9	20:37	2	avformat_new_stream
arg	20:29	20:31	3	s1
water	20:29	0:0	4	s1
arg	20:33	20:37	3	NULL
water	20:33	0:0	4	NULL
water	20:38	0:0	2	;
if	21:4	22:30	2	(! st)
cond	21:8	21:9	3	! st
op	21:8	0:0	4	!
water	21:9	0:0	4	st
stmts	22:8	22:30	3	
return	22:8	22:30	4	AVERROR(ENOMEM)
call	22:15	22:29	5	AVERROR
arg	22:23	22:29	6	ENOMEM
water	22:23	0:0	7	ENOMEM
call	23:4	23:42	2	avpriv_set_pts_info
arg	23:24	23:26	3	st
water	23:24	0:0	4	st
arg	23:28	23:30	3	64
water	23:28	0:0	4	64
arg	23:32	23:33	3	1
water	23:32	0:0	4	1
arg	23:35	23:42	3	1000000
water	23:35	0:0	4	1000000
water	23:43	0:0	2	;
water	24:4	0:0	2	video_fd
op	24:13	0:0	2	=
call	24:15	24:40	2	open
arg	24:20	24:32	3	s1->filename
water	24:20	0:0	4	s1
op	24:22	0:0	4	->
water	24:24	0:0	4	filename
arg	24:34	24:40	3	O_RDWR
water	24:34	0:0	4	O_RDWR
water	24:41	0:0	2	;
if	25:4	28:4	2	(video_fd < 0)
cond	25:8	25:19	3	video_fd < 0
water	25:8	0:0	4	video_fd
op	25:17	0:0	4	<
water	25:19	0:0	4	0
stmts	25:22	28:4	3	
water	25:22	0:0	4	{
call	26:8	26:74	4	av_log
arg	26:15	26:17	5	s1
water	26:15	0:0	6	s1
arg	26:19	26:31	5	AV_LOG_ERROR
water	26:19	0:0	6	AV_LOG_ERROR
arg	26:33	26:43	5	"%s: %s\n"
water	26:33	0:0	6	"%s: %s\n"
arg	26:45	26:57	5	s1->filename
water	26:45	0:0	6	s1
op	26:47	0:0	6	->
water	26:49	0:0	6	filename
arg	26:59	26:74	5	strerror(errno)
call	26:59	26:73	6	strerror
arg	26:68	26:73	7	errno
water	26:68	0:0	8	errno
water	26:75	0:0	4	;
goto	27:8	27:17	4	fail
water	27:13	0:0	5	fail
water	28:4	0:0	4	}
if	29:4	32:4	2	(ioctl (video_fd ,VIDIOCGCAP ,& s -> video_cap ) < 0)
cond	29:8	29:53	3	ioctl (video_fd ,VIDIOCGCAP ,& s -> video_cap ) < 0
call	29:8	29:49	4	ioctl
arg	29:14	29:22	5	video_fd
water	29:14	0:0	6	video_fd
arg	29:24	29:34	5	VIDIOCGCAP
water	29:24	0:0	6	VIDIOCGCAP
arg	29:36	29:49	5	&s->video_cap
op	29:36	0:0	6	&
water	29:37	0:0	6	s
op	29:38	0:0	6	->
water	29:40	0:0	6	video_cap
op	29:51	0:0	4	<
water	29:53	0:0	4	0
stmts	29:56	32:4	3	
water	29:56	0:0	4	{
call	30:8	30:68	4	av_log
arg	30:15	30:17	5	s1
water	30:15	0:0	6	s1
arg	30:19	30:31	5	AV_LOG_ERROR
water	30:19	0:0	6	AV_LOG_ERROR
arg	30:33	30:51	5	"VIDIOCGCAP: %s\n"
water	30:33	0:0	6	"VIDIOCGCAP: %s\n"
arg	30:53	30:68	5	strerror(errno)
call	30:53	30:67	6	strerror
arg	30:62	30:67	7	errno
water	30:62	0:0	8	errno
water	30:69	0:0	4	;
goto	31:8	31:17	4	fail
water	31:13	0:0	5	fail
water	32:4	0:0	4	}
if	33:4	36:4	2	(! ( s -> video_cap . type & VID_TYPE_CAPTURE ))
cond	33:8	33:46	3	! ( s -> video_cap . type & VID_TYPE_CAPTURE )
op	33:8	0:0	4	!
water	33:9	0:0	4	(
water	33:10	0:0	4	s
op	33:11	0:0	4	->
water	33:13	0:0	4	video_cap
op	33:22	0:0	4	.
water	33:23	0:0	4	type
op	33:28	0:0	4	&
water	33:30	0:0	4	VID_TYPE_CAPTURE
water	33:46	0:0	4	)
stmts	33:49	36:4	3	
water	33:49	0:0	4	{
call	34:8	34:79	4	av_log
arg	34:15	34:17	5	s1
water	34:15	0:0	6	s1
arg	34:19	34:31	5	AV_LOG_ERROR
water	34:19	0:0	6	AV_LOG_ERROR
arg	34:33	34:79	5	"Fatal: grab device does not handle capture\n"
water	34:33	0:0	6	"Fatal: grab device does not handle capture\n"
water	34:80	0:0	4	;
goto	35:8	35:17	4	fail
water	35:13	0:0	5	fail
water	36:4	0:0	4	}
if	38:4	43:4	2	(s -> video_win . width <= 0 || s -> video_win . height <= 0)
cond	38:8	38:58	3	s -> video_win . width <= 0 || s -> video_win . height <= 0
water	38:8	0:0	4	s
op	38:9	0:0	4	->
water	38:11	0:0	4	video_win
op	38:20	0:0	4	.
water	38:21	0:0	4	width
op	38:27	0:0	4	<=
water	38:30	0:0	4	0
op	38:32	0:0	4	||
water	38:35	0:0	4	s
op	38:36	0:0	4	->
water	38:38	0:0	4	video_win
op	38:47	0:0	4	.
water	38:48	0:0	4	height
op	38:55	0:0	4	<=
water	38:58	0:0	4	0
stmts	38:61	43:4	3	
water	38:61	0:0	4	{
if	39:8	42:8	4	(ioctl (video_fd ,VIDIOCGWIN ,& s -> video_win ,sizeof ( s -> video_win ) ) < 0)
cond	39:12	39:79	5	ioctl (video_fd ,VIDIOCGWIN ,& s -> video_win ,sizeof ( s -> video_win ) ) < 0
call	39:12	39:75	6	ioctl
arg	39:18	39:26	7	video_fd
water	39:18	0:0	8	video_fd
arg	39:28	39:38	7	VIDIOCGWIN
water	39:28	0:0	8	VIDIOCGWIN
arg	39:40	39:53	7	&s->video_win
op	39:40	0:0	8	&
water	39:41	0:0	8	s
op	39:42	0:0	8	->
water	39:44	0:0	8	video_win
arg	39:55	39:75	7	sizeof(s->video_win)
op	39:55	0:0	8	sizeof
water	39:61	0:0	8	(
water	39:62	0:0	8	s
op	39:63	0:0	8	->
water	39:65	0:0	8	video_win
water	39:74	0:0	8	)
op	39:77	0:0	6	<
water	39:79	0:0	6	0
stmts	39:82	42:8	5	
water	39:82	0:0	6	{
call	40:12	40:72	6	av_log
arg	40:19	40:21	7	s1
water	40:19	0:0	8	s1
arg	40:23	40:35	7	AV_LOG_ERROR
water	40:23	0:0	8	AV_LOG_ERROR
arg	40:37	40:55	7	"VIDIOCGWIN: %s\n"
water	40:37	0:0	8	"VIDIOCGWIN: %s\n"
arg	40:57	40:72	7	strerror(errno)
call	40:57	40:71	8	strerror
arg	40:66	40:71	9	errno
water	40:66	0:0	10	errno
water	40:73	0:0	6	;
goto	41:12	41:21	6	fail
water	41:17	0:0	7	fail
water	42:8	0:0	6	}
water	43:4	0:0	4	}
if	44:4	45:17	2	(av_image_check_size (s -> video_win . width ,s -> video_win . height ,0 ,s1 ) < 0)
cond	44:7	44:77	3	av_image_check_size (s -> video_win . width ,s -> video_win . height ,0 ,s1 ) < 0
call	44:7	44:73	4	av_image_check_size
arg	44:27	44:45	5	s->video_win.width
water	44:27	0:0	6	s
op	44:28	0:0	6	->
water	44:30	0:0	6	video_win
op	44:39	0:0	6	.
water	44:40	0:0	6	width
arg	44:47	44:66	5	s->video_win.height
water	44:47	0:0	6	s
op	44:48	0:0	6	->
water	44:50	0:0	6	video_win
op	44:59	0:0	6	.
water	44:60	0:0	6	height
arg	44:68	44:69	5	0
water	44:68	0:0	6	0
arg	44:71	44:73	5	s1
water	44:71	0:0	6	s1
op	44:75	0:0	4	<
water	44:77	0:0	4	0
stmts	45:8	45:17	3	
return	45:8	45:17	4	-1
op	45:15	0:0	5	-
water	45:16	0:0	5	1
water	46:4	0:0	2	desired_palette
op	46:20	0:0	2	=
op	46:22	0:0	2	-
water	46:23	0:0	2	1
water	46:24	0:0	2	;
water	47:4	0:0	2	desired_depth
op	47:18	0:0	2	=
op	47:20	0:0	2	-
water	47:21	0:0	2	1
water	47:22	0:0	2	;
for	48:4	54:4	2	(j = 0 ;j < vformat_num;j ++)
forinit	48:9	48:14	3	j = 0 ;
water	48:9	0:0	4	j
op	48:11	0:0	4	=
water	48:13	0:0	4	0
water	48:14	0:0	4	;
cond	48:16	48:20	3	j < vformat_num
water	48:16	0:0	4	j
op	48:18	0:0	4	<
water	48:20	0:0	4	vformat_num
forexpr	48:33	48:34	3	j ++
water	48:33	0:0	4	j
op	48:34	0:0	4	++
stmts	48:38	54:4	3	
water	48:38	0:0	4	{
if	49:8	53:8	4	(ap -> pix_fmt == video_formats [ j ] . pix_fmt)
cond	49:12	49:44	5	ap -> pix_fmt == video_formats [ j ] . pix_fmt
water	49:12	0:0	6	ap
op	49:14	0:0	6	->
water	49:16	0:0	6	pix_fmt
op	49:24	0:0	6	==
water	49:27	0:0	6	video_formats
op	49:40	0:0	6	[
water	49:41	0:0	6	j
op	49:42	0:0	6	]
op	49:43	0:0	6	.
water	49:44	0:0	6	pix_fmt
stmts	49:53	53:8	5	
water	49:53	0:0	6	{
water	50:12	0:0	6	desired_palette
op	50:28	0:0	6	=
water	50:30	0:0	6	video_formats
op	50:43	0:0	6	[
water	50:44	0:0	6	j
op	50:45	0:0	6	]
op	50:46	0:0	6	.
water	50:47	0:0	6	palette
water	50:54	0:0	6	;
water	51:12	0:0	6	desired_depth
op	51:26	0:0	6	=
water	51:28	0:0	6	video_formats
op	51:41	0:0	6	[
water	51:42	0:0	6	j
op	51:43	0:0	6	]
op	51:44	0:0	6	.
water	51:45	0:0	6	depth
water	51:50	0:0	6	;
break	52:12	52:17	6	
water	53:8	0:0	6	}
water	54:4	0:0	4	}
if	56:4	59:4	2	(!ioctl (video_fd ,VIDIOCGTUNER ,& tuner ))
cond	56:8	56:45	3	!ioctl (video_fd ,VIDIOCGTUNER ,& tuner )
op	56:8	0:0	4	!
call	56:9	56:45	4	ioctl
arg	56:15	56:23	5	video_fd
water	56:15	0:0	6	video_fd
arg	56:25	56:37	5	VIDIOCGTUNER
water	56:25	0:0	6	VIDIOCGTUNER
arg	56:39	56:45	5	&tuner
op	56:39	0:0	6	&
water	56:40	0:0	6	tuner
stmts	56:48	59:4	3	
water	56:48	0:0	4	{
water	57:8	0:0	4	tuner
op	57:13	0:0	4	.
water	57:14	0:0	4	mode
op	57:19	0:0	4	=
water	57:21	0:0	4	s
op	57:22	0:0	4	->
water	57:24	0:0	4	standard
water	57:32	0:0	4	;
call	58:8	58:44	4	ioctl
arg	58:14	58:22	5	video_fd
water	58:14	0:0	6	video_fd
arg	58:24	58:36	5	VIDIOCSTUNER
water	58:24	0:0	6	VIDIOCSTUNER
arg	58:38	58:44	5	&tuner
op	58:38	0:0	6	&
water	58:39	0:0	6	tuner
water	58:45	0:0	4	;
water	59:4	0:0	4	}
water	61:4	0:0	2	audio
op	61:9	0:0	2	.
water	61:10	0:0	2	audio
op	61:16	0:0	2	=
water	61:18	0:0	2	0
water	61:19	0:0	2	;
call	62:4	62:40	2	ioctl
arg	62:10	62:18	3	video_fd
water	62:10	0:0	4	video_fd
arg	62:20	62:32	3	VIDIOCGAUDIO
water	62:20	0:0	4	VIDIOCGAUDIO
arg	62:34	62:40	3	&audio
op	62:34	0:0	4	&
water	62:35	0:0	4	audio
water	62:41	0:0	2	;
call	63:4	63:49	2	memcpy
arg	63:11	63:26	3	&s->audio_saved
op	63:11	0:0	4	&
water	63:12	0:0	4	s
op	63:13	0:0	4	->
water	63:15	0:0	4	audio_saved
arg	63:28	63:34	3	&audio
op	63:28	0:0	4	&
water	63:29	0:0	4	audio
arg	63:36	63:49	3	sizeof(audio)
op	63:36	0:0	4	sizeof
water	63:42	0:0	4	(
water	63:43	0:0	4	audio
water	63:48	0:0	4	)
water	63:50	0:0	2	;
water	64:4	0:0	2	audio
op	64:9	0:0	2	.
water	64:10	0:0	2	flags
op	64:16	0:0	2	&=
water	64:19	0:0	2	~VIDEO_AUDIO_MUTE
water	64:36	0:0	2	;
call	65:4	65:40	2	ioctl
arg	65:10	65:18	3	video_fd
water	65:10	0:0	4	video_fd
arg	65:20	65:32	3	VIDIOCSAUDIO
water	65:20	0:0	4	VIDIOCSAUDIO
arg	65:34	65:40	3	&audio
op	65:34	0:0	4	&
water	65:35	0:0	4	audio
water	65:41	0:0	2	;
call	66:4	66:38	2	ioctl
arg	66:10	66:18	3	video_fd
water	66:10	0:0	4	video_fd
arg	66:20	66:31	3	VIDIOCGPICT
water	66:20	0:0	4	VIDIOCGPICT
arg	66:33	66:38	3	&pict
op	66:33	0:0	4	&
water	66:34	0:0	4	pict
water	66:39	0:0	2	;
call	67:4	68:81	2	ff_dlog
arg	67:12	67:14	3	s1
water	67:12	0:0	4	s1
arg	67:16	67:81	3	"v4l: colour=%d hue=%d brightness=%d constrast=%d whiteness=%d\n"
water	67:16	0:0	4	"v4l: colour=%d hue=%d brightness=%d constrast=%d whiteness=%d\n"
arg	68:12	68:23	3	pict.colour
water	68:12	0:0	4	pict
op	68:16	0:0	4	.
water	68:17	0:0	4	colour
arg	68:25	68:33	3	pict.hue
water	68:25	0:0	4	pict
op	68:29	0:0	4	.
water	68:30	0:0	4	hue
arg	68:35	68:50	3	pict.brightness
water	68:35	0:0	4	pict
op	68:39	0:0	4	.
water	68:40	0:0	4	brightness
arg	68:52	68:65	3	pict.contrast
water	68:52	0:0	4	pict
op	68:56	0:0	4	.
water	68:57	0:0	4	contrast
arg	68:67	68:81	3	pict.whiteness
water	68:67	0:0	4	pict
op	68:71	0:0	4	.
water	68:72	0:0	4	whiteness
water	68:82	0:0	2	;
water	70:4	0:0	2	pict
op	70:8	0:0	2	.
water	70:9	0:0	2	palette
op	70:17	0:0	2	=
water	70:19	0:0	2	desired_palette
water	70:34	0:0	2	;
water	71:4	0:0	2	pict
op	71:8	0:0	2	.
water	71:9	0:0	2	depth
op	71:14	0:0	2	=
water	71:16	0:0	2	desired_depth
water	71:29	0:0	2	;
if	72:4	81:4	2	(desired_palette == - 1 ||ioctl (video_fd ,VIDIOCSPICT ,& pict ) < 0)
cond	72:8	72:71	3	desired_palette == - 1 ||ioctl (video_fd ,VIDIOCSPICT ,& pict ) < 0
water	72:8	0:0	4	desired_palette
op	72:24	0:0	4	==
op	72:27	0:0	4	-
water	72:28	0:0	4	1
op	72:30	0:0	4	||
call	72:33	72:67	4	ioctl
arg	72:39	72:47	5	video_fd
water	72:39	0:0	6	video_fd
arg	72:49	72:60	5	VIDIOCSPICT
water	72:49	0:0	6	VIDIOCSPICT
arg	72:62	72:67	5	&pict
op	72:62	0:0	6	&
water	72:63	0:0	6	pict
op	72:69	0:0	4	<
water	72:71	0:0	4	0
stmts	72:74	81:4	3	
water	72:74	0:0	4	{
for	73:8	78:8	4	(j = 0 ;j < vformat_num;j ++)
forinit	73:13	73:18	5	j = 0 ;
water	73:13	0:0	6	j
op	73:15	0:0	6	=
water	73:17	0:0	6	0
water	73:18	0:0	6	;
cond	73:20	73:24	5	j < vformat_num
water	73:20	0:0	6	j
op	73:22	0:0	6	<
water	73:24	0:0	6	vformat_num
forexpr	73:37	73:38	5	j ++
water	73:37	0:0	6	j
op	73:38	0:0	6	++
stmts	73:42	78:8	5	
water	73:42	0:0	6	{
water	74:12	0:0	6	pict
op	74:16	0:0	6	.
water	74:17	0:0	6	palette
op	74:25	0:0	6	=
water	74:27	0:0	6	video_formats
op	74:40	0:0	6	[
water	74:41	0:0	6	j
op	74:42	0:0	6	]
op	74:43	0:0	6	.
water	74:44	0:0	6	palette
water	74:51	0:0	6	;
water	75:12	0:0	6	pict
op	75:16	0:0	6	.
water	75:17	0:0	6	depth
op	75:23	0:0	6	=
water	75:25	0:0	6	video_formats
op	75:38	0:0	6	[
water	75:39	0:0	6	j
op	75:40	0:0	6	]
op	75:41	0:0	6	.
water	75:42	0:0	6	depth
water	75:47	0:0	6	;
if	76:12	77:21	6	(- 1 !=ioctl (video_fd ,VIDIOCSPICT ,& pict ))
cond	76:16	76:56	7	- 1 !=ioctl (video_fd ,VIDIOCSPICT ,& pict )
op	76:16	0:0	8	-
water	76:17	0:0	8	1
op	76:19	0:0	8	!=
call	76:22	76:56	8	ioctl
arg	76:28	76:36	9	video_fd
water	76:28	0:0	10	video_fd
arg	76:38	76:49	9	VIDIOCSPICT
water	76:38	0:0	10	VIDIOCSPICT
arg	76:51	76:56	9	&pict
op	76:51	0:0	10	&
water	76:52	0:0	10	pict
stmts	77:16	77:21	7	
break	77:16	77:21	8	
water	78:8	0:0	6	}
if	79:8	80:22	4	(j >= vformat_num)
cond	79:12	79:17	5	j >= vformat_num
water	79:12	0:0	6	j
op	79:14	0:0	6	>=
water	79:17	0:0	6	vformat_num
stmts	80:12	80:22	5	
goto	80:12	80:22	6	fail1
water	80:17	0:0	7	fail1
water	81:4	0:0	4	}
if	82:4	101:4	2	(ioctl (video_fd ,VIDIOCGMBUF ,& s -> gb_buffers ) < 0)
cond	82:8	82:55	3	ioctl (video_fd ,VIDIOCGMBUF ,& s -> gb_buffers ) < 0
call	82:8	82:51	4	ioctl
arg	82:14	82:22	5	video_fd
water	82:14	0:0	6	video_fd
arg	82:24	82:35	5	VIDIOCGMBUF
water	82:24	0:0	6	VIDIOCGMBUF
arg	82:37	82:51	5	&s->gb_buffers
op	82:37	0:0	6	&
water	82:38	0:0	6	s
op	82:39	0:0	6	->
water	82:41	0:0	6	gb_buffers
op	82:53	0:0	4	<
water	82:55	0:0	4	0
stmts	82:58	101:4	3	
water	82:58	0:0	4	{
decl	84:8	84:15	4	int	val
water	85:8	0:0	4	s
op	85:9	0:0	4	->
water	85:11	0:0	4	video_win
op	85:20	0:0	4	.
water	85:21	0:0	4	x
op	85:23	0:0	4	=
water	85:25	0:0	4	0
water	85:26	0:0	4	;
water	86:8	0:0	4	s
op	86:9	0:0	4	->
water	86:11	0:0	4	video_win
op	86:20	0:0	4	.
water	86:21	0:0	4	y
op	86:23	0:0	4	=
water	86:25	0:0	4	0
water	86:26	0:0	4	;
water	87:8	0:0	4	s
op	87:9	0:0	4	->
water	87:11	0:0	4	video_win
op	87:20	0:0	4	.
water	87:21	0:0	4	chromakey
op	87:31	0:0	4	=
op	87:33	0:0	4	-
water	87:34	0:0	4	1
water	87:35	0:0	4	;
water	88:8	0:0	4	s
op	88:9	0:0	4	->
water	88:11	0:0	4	video_win
op	88:20	0:0	4	.
water	88:21	0:0	4	flags
op	88:27	0:0	4	=
water	88:29	0:0	4	0
water	88:30	0:0	4	;
if	89:8	92:8	4	(ioctl (video_fd ,VIDIOCSWIN ,s -> video_win ) < 0)
cond	89:12	89:56	5	ioctl (video_fd ,VIDIOCSWIN ,s -> video_win ) < 0
call	89:12	89:52	6	ioctl
arg	89:18	89:26	7	video_fd
water	89:18	0:0	8	video_fd
arg	89:28	89:38	7	VIDIOCSWIN
water	89:28	0:0	8	VIDIOCSWIN
arg	89:40	89:52	7	s->video_win
water	89:40	0:0	8	s
op	89:41	0:0	8	->
water	89:43	0:0	8	video_win
op	89:54	0:0	6	<
water	89:56	0:0	6	0
stmts	89:59	92:8	5	
water	89:59	0:0	6	{
call	90:12	90:72	6	av_log
arg	90:19	90:21	7	s1
water	90:19	0:0	8	s1
arg	90:23	90:35	7	AV_LOG_ERROR
water	90:23	0:0	8	AV_LOG_ERROR
arg	90:37	90:55	7	"VIDIOCSWIN: %s\n"
water	90:37	0:0	8	"VIDIOCSWIN: %s\n"
arg	90:57	90:72	7	strerror(errno)
call	90:57	90:71	8	strerror
arg	90:66	90:71	9	errno
water	90:66	0:0	10	errno
water	90:73	0:0	6	;
goto	91:12	91:21	6	fail
water	91:17	0:0	7	fail
water	92:8	0:0	6	}
water	93:8	0:0	4	s
op	93:9	0:0	4	->
water	93:11	0:0	4	frame_format
op	93:24	0:0	4	=
water	93:26	0:0	4	pict
op	93:30	0:0	4	.
water	93:31	0:0	4	palette
water	93:38	0:0	4	;
water	94:8	0:0	4	val
op	94:12	0:0	4	=
water	94:14	0:0	4	1
water	94:15	0:0	4	;
if	95:8	98:8	4	(ioctl (video_fd ,VIDIOCCAPTURE ,& val ) < 0)
cond	95:12	95:51	5	ioctl (video_fd ,VIDIOCCAPTURE ,& val ) < 0
call	95:12	95:47	6	ioctl
arg	95:18	95:26	7	video_fd
water	95:18	0:0	8	video_fd
arg	95:28	95:41	7	VIDIOCCAPTURE
water	95:28	0:0	8	VIDIOCCAPTURE
arg	95:43	95:47	7	&val
op	95:43	0:0	8	&
water	95:44	0:0	8	val
op	95:49	0:0	6	<
water	95:51	0:0	6	0
stmts	95:54	98:8	5	
water	95:54	0:0	6	{
call	96:12	96:75	6	av_log
arg	96:19	96:21	7	s1
water	96:19	0:0	8	s1
arg	96:23	96:35	7	AV_LOG_ERROR
water	96:23	0:0	8	AV_LOG_ERROR
arg	96:37	96:58	7	"VIDIOCCAPTURE: %s\n"
water	96:37	0:0	8	"VIDIOCCAPTURE: %s\n"
arg	96:60	96:75	7	strerror(errno)
call	96:60	96:74	8	strerror
arg	96:69	96:74	9	errno
water	96:69	0:0	10	errno
water	96:76	0:0	6	;
goto	97:12	97:21	6	fail
water	97:17	0:0	7	fail
water	98:8	0:0	6	}
water	99:8	0:0	4	s
op	99:9	0:0	4	->
water	99:11	0:0	4	time_frame
op	99:22	0:0	4	=
call	99:24	99:35	4	av_gettime
op	99:37	0:0	4	*
water	99:39	0:0	4	s
op	99:40	0:0	4	->
water	99:42	0:0	4	time_base
op	99:51	0:0	4	.
water	99:52	0:0	4	den
op	99:56	0:0	4	/
water	99:58	0:0	4	s
op	99:59	0:0	4	->
water	99:61	0:0	4	time_base
op	99:70	0:0	4	.
water	99:71	0:0	4	num
water	99:74	0:0	4	;
water	100:8	0:0	4	s
op	100:9	0:0	4	->
water	100:11	0:0	4	use_mmap
op	100:20	0:0	4	=
water	100:22	0:0	4	0
water	100:23	0:0	4	;
water	101:4	0:0	4	}
else	101:6	132:4	2
stmts	101:11	132:4	3	
water	101:11	0:0	4	{
water	102:8	0:0	4	s
op	102:9	0:0	4	->
water	102:11	0:0	4	video_buf
op	102:21	0:0	4	=
call	102:23	102:96	4	mmap
arg	102:28	102:29	5	0
water	102:28	0:0	6	0
arg	102:31	102:49	5	s->gb_buffers.size
water	102:31	0:0	6	s
op	102:32	0:0	6	->
water	102:34	0:0	6	gb_buffers
op	102:44	0:0	6	.
water	102:45	0:0	6	size
arg	102:51	102:71	5	PROT_READ|PROT_WRITE
water	102:51	0:0	6	PROT_READ
op	102:60	0:0	6	|
water	102:61	0:0	6	PROT_WRITE
arg	102:73	102:83	5	MAP_SHARED
water	102:73	0:0	6	MAP_SHARED
arg	102:85	102:93	5	video_fd
water	102:85	0:0	6	video_fd
arg	102:95	102:96	5	0
water	102:95	0:0	6	0
water	102:97	0:0	4	;
if	103:8	109:8	4	(( unsigned char * ) - 1 == s -> video_buf)
cond	103:12	103:37	5	( unsigned char * ) - 1 == s -> video_buf
water	103:12	0:0	6	(
water	103:13	0:0	6	unsigned
water	103:22	0:0	6	char
op	103:26	0:0	6	*
water	103:27	0:0	6	)
op	103:28	0:0	6	-
water	103:29	0:0	6	1
op	103:31	0:0	6	==
water	103:34	0:0	6	s
op	103:35	0:0	6	->
water	103:37	0:0	6	video_buf
stmts	103:48	109:8	5	
water	103:48	0:0	6	{
water	104:12	0:0	6	s
op	104:13	0:0	6	->
water	104:15	0:0	6	video_buf
op	104:25	0:0	6	=
call	104:27	104:101	6	mmap
arg	104:32	104:33	7	0
water	104:32	0:0	8	0
arg	104:35	104:53	7	s->gb_buffers.size
water	104:35	0:0	8	s
op	104:36	0:0	8	->
water	104:38	0:0	8	gb_buffers
op	104:48	0:0	8	.
water	104:49	0:0	8	size
arg	104:55	104:75	7	PROT_READ|PROT_WRITE
water	104:55	0:0	8	PROT_READ
op	104:64	0:0	8	|
water	104:65	0:0	8	PROT_WRITE
arg	104:77	104:88	7	MAP_PRIVATE
water	104:77	0:0	8	MAP_PRIVATE
arg	104:90	104:98	7	video_fd
water	104:90	0:0	8	video_fd
arg	104:100	104:101	7	0
water	104:100	0:0	8	0
water	104:102	0:0	6	;
if	105:12	108:12	6	(( unsigned char * ) - 1 == s -> video_buf)
cond	105:16	105:41	7	( unsigned char * ) - 1 == s -> video_buf
water	105:16	0:0	8	(
water	105:17	0:0	8	unsigned
water	105:26	0:0	8	char
op	105:30	0:0	8	*
water	105:31	0:0	8	)
op	105:32	0:0	8	-
water	105:33	0:0	8	1
op	105:35	0:0	8	==
water	105:38	0:0	8	s
op	105:39	0:0	8	->
water	105:41	0:0	8	video_buf
stmts	105:52	108:12	7	
water	105:52	0:0	8	{
call	106:16	106:70	8	av_log
arg	106:23	106:25	9	s1
water	106:23	0:0	10	s1
arg	106:27	106:39	9	AV_LOG_ERROR
water	106:27	0:0	10	AV_LOG_ERROR
arg	106:41	106:53	9	"mmap: %s\n"
water	106:41	0:0	10	"mmap: %s\n"
arg	106:55	106:70	9	strerror(errno)
call	106:55	106:69	10	strerror
arg	106:64	106:69	11	errno
water	106:64	0:0	12	errno
water	106:71	0:0	8	;
goto	107:16	107:25	8	fail
water	107:21	0:0	9	fail
water	108:12	0:0	8	}
water	109:8	0:0	6	}
water	110:8	0:0	4	s
op	110:9	0:0	4	->
water	110:11	0:0	4	gb_frame
op	110:20	0:0	4	=
water	110:22	0:0	4	0
water	110:23	0:0	4	;
water	111:8	0:0	4	s
op	111:9	0:0	4	->
water	111:11	0:0	4	time_frame
op	111:22	0:0	4	=
call	111:24	111:35	4	av_gettime
op	111:37	0:0	4	*
water	111:39	0:0	4	s
op	111:40	0:0	4	->
water	111:42	0:0	4	time_base
op	111:51	0:0	4	.
water	111:52	0:0	4	den
op	111:56	0:0	4	/
water	111:58	0:0	4	s
op	111:59	0:0	4	->
water	111:61	0:0	4	time_base
op	111:70	0:0	4	.
water	111:71	0:0	4	num
water	111:74	0:0	4	;
water	113:8	0:0	4	s
op	113:9	0:0	4	->
water	113:11	0:0	4	gb_buf
op	113:17	0:0	4	.
water	113:18	0:0	4	frame
op	113:24	0:0	4	=
water	113:26	0:0	4	s
op	113:27	0:0	4	->
water	113:29	0:0	4	gb_frame
op	113:38	0:0	4	%
water	113:40	0:0	4	s
op	113:41	0:0	4	->
water	113:43	0:0	4	gb_buffers
op	113:53	0:0	4	.
water	113:54	0:0	4	frames
water	113:60	0:0	4	;
water	114:8	0:0	4	s
op	114:9	0:0	4	->
water	114:11	0:0	4	gb_buf
op	114:17	0:0	4	.
water	114:18	0:0	4	height
op	114:25	0:0	4	=
water	114:27	0:0	4	s
op	114:28	0:0	4	->
water	114:30	0:0	4	video_win
op	114:39	0:0	4	.
water	114:40	0:0	4	height
water	114:46	0:0	4	;
water	115:8	0:0	4	s
op	115:9	0:0	4	->
water	115:11	0:0	4	gb_buf
op	115:17	0:0	4	.
water	115:18	0:0	4	width
op	115:24	0:0	4	=
water	115:26	0:0	4	s
op	115:27	0:0	4	->
water	115:29	0:0	4	video_win
op	115:38	0:0	4	.
water	115:39	0:0	4	width
water	115:44	0:0	4	;
water	116:8	0:0	4	s
op	116:9	0:0	4	->
water	116:11	0:0	4	gb_buf
op	116:17	0:0	4	.
water	116:18	0:0	4	format
op	116:25	0:0	4	=
water	116:27	0:0	4	pict
op	116:31	0:0	4	.
water	116:32	0:0	4	palette
water	116:39	0:0	4	;
if	117:8	125:8	4	(ioctl (video_fd ,VIDIOCMCAPTURE ,& s -> gb_buf ) < 0)
cond	117:12	117:58	5	ioctl (video_fd ,VIDIOCMCAPTURE ,& s -> gb_buf ) < 0
call	117:12	117:54	6	ioctl
arg	117:18	117:26	7	video_fd
water	117:18	0:0	8	video_fd
arg	117:28	117:42	7	VIDIOCMCAPTURE
water	117:28	0:0	8	VIDIOCMCAPTURE
arg	117:44	117:54	7	&s->gb_buf
op	117:44	0:0	8	&
water	117:45	0:0	8	s
op	117:46	0:0	8	->
water	117:48	0:0	8	gb_buf
op	117:56	0:0	6	<
water	117:58	0:0	6	0
stmts	117:61	125:8	5	
water	117:61	0:0	6	{
if	118:12	121:12	6	(errno != EAGAIN)
cond	118:16	118:25	7	errno != EAGAIN
water	118:16	0:0	8	errno
op	118:22	0:0	8	!=
water	118:25	0:0	8	EAGAIN
stmts	118:33	121:12	7	
water	118:33	0:0	8	{
label	119:12	119:17	8	fail1 :
call	120:16	120:80	8	av_log
arg	120:23	120:25	9	s1
water	120:23	0:0	10	s1
arg	120:27	120:39	9	AV_LOG_ERROR
water	120:27	0:0	10	AV_LOG_ERROR
arg	120:41	120:63	9	"VIDIOCMCAPTURE: %s\n"
water	120:41	0:0	10	"VIDIOCMCAPTURE: %s\n"
arg	120:65	120:80	9	strerror(errno)
call	120:65	120:79	10	strerror
arg	120:74	120:79	11	errno
water	120:74	0:0	12	errno
water	120:81	0:0	8	;
water	121:12	0:0	8	}
else	121:14	123:12	6
stmts	121:19	123:12	7	
water	121:19	0:0	8	{
call	122:16	122:97	8	av_log
arg	122:23	122:25	9	s1
water	122:23	0:0	10	s1
arg	122:27	122:39	9	AV_LOG_ERROR
water	122:27	0:0	10	AV_LOG_ERROR
arg	122:41	122:97	9	"Fatal: grab device does not receive any video signal\n"
water	122:41	0:0	10	"Fatal: grab device does not receive any video signal\n"
water	122:98	0:0	8	;
water	123:12	0:0	8	}
goto	124:12	124:21	6	fail
water	124:17	0:0	7	fail
water	125:8	0:0	6	}
for	126:8	129:8	4	(j = 1 ;j < s -> gb_buffers . frames;j ++)
forinit	126:13	126:18	5	j = 1 ;
water	126:13	0:0	6	j
op	126:15	0:0	6	=
water	126:17	0:0	6	1
water	126:18	0:0	6	;
cond	126:20	126:38	5	j < s -> gb_buffers . frames
water	126:20	0:0	6	j
op	126:22	0:0	6	<
water	126:24	0:0	6	s
op	126:25	0:0	6	->
water	126:27	0:0	6	gb_buffers
op	126:37	0:0	6	.
water	126:38	0:0	6	frames
forexpr	126:46	126:47	5	j ++
water	126:46	0:0	6	j
op	126:47	0:0	6	++
stmts	126:51	129:8	5	
water	126:51	0:0	6	{
water	127:10	0:0	6	s
op	127:11	0:0	6	->
water	127:13	0:0	6	gb_buf
op	127:19	0:0	6	.
water	127:20	0:0	6	frame
op	127:26	0:0	6	=
water	127:28	0:0	6	j
water	127:29	0:0	6	;
call	128:10	128:52	6	ioctl
arg	128:16	128:24	7	video_fd
water	128:16	0:0	8	video_fd
arg	128:26	128:40	7	VIDIOCMCAPTURE
water	128:26	0:0	8	VIDIOCMCAPTURE
arg	128:42	128:52	7	&s->gb_buf
op	128:42	0:0	8	&
water	128:43	0:0	8	s
op	128:44	0:0	8	->
water	128:46	0:0	8	gb_buf
water	128:53	0:0	6	;
water	129:8	0:0	6	}
water	130:8	0:0	4	s
op	130:9	0:0	4	->
water	130:11	0:0	4	frame_format
op	130:24	0:0	4	=
water	130:26	0:0	4	s
op	130:27	0:0	4	->
water	130:29	0:0	4	gb_buf
op	130:35	0:0	4	.
water	130:36	0:0	4	format
water	130:42	0:0	4	;
water	131:8	0:0	4	s
op	131:9	0:0	4	->
water	131:11	0:0	4	use_mmap
op	131:20	0:0	4	=
water	131:22	0:0	4	1
water	131:23	0:0	4	;
water	132:4	0:0	4	}
for	133:4	139:4	2	(j = 0 ;j < vformat_num;j ++)
forinit	133:9	133:14	3	j = 0 ;
water	133:9	0:0	4	j
op	133:11	0:0	4	=
water	133:13	0:0	4	0
water	133:14	0:0	4	;
cond	133:16	133:20	3	j < vformat_num
water	133:16	0:0	4	j
op	133:18	0:0	4	<
water	133:20	0:0	4	vformat_num
forexpr	133:33	133:34	3	j ++
water	133:33	0:0	4	j
op	133:34	0:0	4	++
stmts	133:38	139:4	3	
water	133:38	0:0	4	{
if	134:8	138:8	4	(s -> frame_format == video_formats [ j ] . palette)
cond	134:12	134:48	5	s -> frame_format == video_formats [ j ] . palette
water	134:12	0:0	6	s
op	134:13	0:0	6	->
water	134:15	0:0	6	frame_format
op	134:28	0:0	6	==
water	134:31	0:0	6	video_formats
op	134:44	0:0	6	[
water	134:45	0:0	6	j
op	134:46	0:0	6	]
op	134:47	0:0	6	.
water	134:48	0:0	6	palette
stmts	134:57	138:8	5	
water	134:57	0:0	6	{
water	135:12	0:0	6	s
op	135:13	0:0	6	->
water	135:15	0:0	6	frame_size
op	135:26	0:0	6	=
water	135:28	0:0	6	s
op	135:29	0:0	6	->
water	135:31	0:0	6	video_win
op	135:40	0:0	6	.
water	135:41	0:0	6	width
op	135:47	0:0	6	*
water	135:49	0:0	6	s
op	135:50	0:0	6	->
water	135:52	0:0	6	video_win
op	135:61	0:0	6	.
water	135:62	0:0	6	height
op	135:69	0:0	6	*
water	135:71	0:0	6	video_formats
op	135:84	0:0	6	[
water	135:85	0:0	6	j
op	135:86	0:0	6	]
op	135:87	0:0	6	.
water	135:88	0:0	6	depth
op	135:94	0:0	6	/
water	135:96	0:0	6	8
water	135:97	0:0	6	;
water	136:12	0:0	6	st
op	136:14	0:0	6	->
water	136:16	0:0	6	codec
op	136:21	0:0	6	->
water	136:23	0:0	6	pix_fmt
op	136:31	0:0	6	=
water	136:33	0:0	6	video_formats
op	136:46	0:0	6	[
water	136:47	0:0	6	j
op	136:48	0:0	6	]
op	136:49	0:0	6	.
water	136:50	0:0	6	pix_fmt
water	136:57	0:0	6	;
break	137:12	137:17	6	
water	138:8	0:0	6	}
water	139:4	0:0	4	}
if	140:4	141:17	2	(j >= vformat_num)
cond	140:8	140:13	3	j >= vformat_num
water	140:8	0:0	4	j
op	140:10	0:0	4	>=
water	140:13	0:0	4	vformat_num
stmts	141:8	141:17	3	
goto	141:8	141:17	4	fail
water	141:13	0:0	5	fail
water	142:4	0:0	2	s
op	142:5	0:0	2	->
water	142:7	0:0	2	fd
op	142:10	0:0	2	=
water	142:12	0:0	2	video_fd
water	142:20	0:0	2	;
water	143:4	0:0	2	st
op	143:6	0:0	2	->
water	143:8	0:0	2	codec
op	143:13	0:0	2	->
water	143:15	0:0	2	codec_type
op	143:26	0:0	2	=
water	143:28	0:0	2	AVMEDIA_TYPE_VIDEO
water	143:46	0:0	2	;
water	144:4	0:0	2	st
op	144:6	0:0	2	->
water	144:8	0:0	2	codec
op	144:13	0:0	2	->
water	144:15	0:0	2	codec_id
op	144:24	0:0	2	=
water	144:26	0:0	2	AV_CODEC_ID_RAWVIDEO
water	144:46	0:0	2	;
water	145:4	0:0	2	st
op	145:6	0:0	2	->
water	145:8	0:0	2	codec
op	145:13	0:0	2	->
water	145:15	0:0	2	width
op	145:21	0:0	2	=
water	145:23	0:0	2	s
op	145:24	0:0	2	->
water	145:26	0:0	2	video_win
op	145:35	0:0	2	.
water	145:36	0:0	2	width
water	145:41	0:0	2	;
water	146:4	0:0	2	st
op	146:6	0:0	2	->
water	146:8	0:0	2	codec
op	146:13	0:0	2	->
water	146:15	0:0	2	height
op	146:22	0:0	2	=
water	146:24	0:0	2	s
op	146:25	0:0	2	->
water	146:27	0:0	2	video_win
op	146:36	0:0	2	.
water	146:37	0:0	2	height
water	146:43	0:0	2	;
water	147:4	0:0	2	st
op	147:6	0:0	2	->
water	147:8	0:0	2	codec
op	147:13	0:0	2	->
water	147:15	0:0	2	time_base
op	147:25	0:0	2	=
water	147:27	0:0	2	s
op	147:28	0:0	2	->
water	147:30	0:0	2	time_base
water	147:39	0:0	2	;
water	148:4	0:0	2	st
op	148:6	0:0	2	->
water	148:8	0:0	2	codec
op	148:13	0:0	2	->
water	148:15	0:0	2	bit_rate
op	148:24	0:0	2	=
water	148:26	0:0	2	s
op	148:27	0:0	2	->
water	148:29	0:0	2	frame_size
op	148:40	0:0	2	*
water	148:42	0:0	2	1
op	148:43	0:0	2	/
call	148:44	148:71	2	av_q2d
arg	148:51	148:71	3	st->codec->time_base
water	148:51	0:0	4	st
op	148:53	0:0	4	->
water	148:55	0:0	4	codec
op	148:60	0:0	4	->
water	148:62	0:0	4	time_base
op	148:73	0:0	2	*
water	148:75	0:0	2	8
water	148:76	0:0	2	;
return	149:4	149:12	2	0
water	149:11	0:0	3	0
label	150:1	150:5	2	fail :
if	151:4	152:23	2	(video_fd >= 0)
cond	151:8	151:20	3	video_fd >= 0
water	151:8	0:0	4	video_fd
op	151:17	0:0	4	>=
water	151:20	0:0	4	0
stmts	152:8	152:23	3	
call	152:8	152:22	4	close
arg	152:14	152:22	5	video_fd
water	152:14	0:0	6	video_fd
water	152:23	0:0	4	;
return	153:4	153:23	2	AVERROR(EIO)
call	153:11	153:22	3	AVERROR
arg	153:19	153:22	4	EIO
water	153:19	0:0	5	EIO
