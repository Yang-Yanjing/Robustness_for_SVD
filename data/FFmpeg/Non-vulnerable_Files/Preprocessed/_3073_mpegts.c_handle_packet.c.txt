func	1:0	118:0	0	static int	handle_packet
params	1:24	0:0	1	
param	1:25	1:42	2	MpegTSContext *	ts
param	1:44	1:65	2	const uint8_t *	packet
stmnts	0:0	117:12	1	
decl	3:4	3:21	2	MpegTSFilter	*tss
decl	4:4	5:35	2	int	len
water	4:11	0:0	2	,
decl	4:4	5:35	2	int	pid
water	4:16	0:0	2	,
decl	4:4	5:35	2	int	cc
water	4:20	0:0	2	,
decl	4:4	5:35	2	int	expected_cc
water	4:33	0:0	2	,
decl	4:4	5:35	2	int	cc_ok
water	4:40	0:0	2	,
decl	4:4	5:35	2	int	afc
water	4:45	0:0	2	,
decl	4:4	5:35	2	int	is_start
water	4:55	0:0	2	,
decl	4:4	5:35	2	int	is_discontinuity
water	4:73	0:0	2	,
decl	4:4	5:35	2	int	has_adaptation
water	5:22	0:0	2	,
decl	4:4	5:35	2	int	has_payload
decl	6:4	6:28	2	const uint8_t	*p
water	6:20	0:0	2	,
decl	6:4	6:28	2	const uint8_t	*p_end
decl	7:4	7:15	2	int64_t	pos
water	8:4	0:0	2	pid
op	8:8	0:0	2	=
call	8:10	8:28	2	AV_RB16
arg	8:18	8:28	3	packet+1
water	8:18	0:0	4	packet
op	8:25	0:0	4	+
water	8:27	0:0	4	1
op	8:30	0:0	2	&
water	8:32	0:0	2	0
water	8:33	0:0	2	x1fff
water	8:38	0:0	2	;
if	9:4	10:16	2	(pid &&discard_pid (ts ,pid ))
cond	9:8	9:34	3	pid &&discard_pid (ts ,pid )
water	9:8	0:0	4	pid
op	9:12	0:0	4	&&
call	9:15	9:34	4	discard_pid
arg	9:27	9:29	5	ts
water	9:27	0:0	6	ts
arg	9:31	9:34	5	pid
water	9:31	0:0	6	pid
stmts	10:8	10:16	3	
return	10:8	10:16	4	0
water	10:15	0:0	5	0
water	11:4	0:0	2	is_start
op	11:13	0:0	2	=
water	11:15	0:0	2	packet
op	11:21	0:0	2	[
water	11:22	0:0	2	1
op	11:23	0:0	2	]
op	11:25	0:0	2	&
water	11:27	0:0	2	0
water	11:28	0:0	2	x40
water	11:31	0:0	2	;
water	12:4	0:0	2	tss
op	12:8	0:0	2	=
water	12:10	0:0	2	ts
op	12:12	0:0	2	->
water	12:14	0:0	2	pids
op	12:18	0:0	2	[
water	12:19	0:0	2	pid
op	12:22	0:0	2	]
water	12:23	0:0	2	;
if	13:4	16:4	2	(ts -> auto_guess && ! tss && is_start)
cond	13:8	13:34	3	ts -> auto_guess && ! tss && is_start
water	13:8	0:0	4	ts
op	13:10	0:0	4	->
water	13:12	0:0	4	auto_guess
op	13:23	0:0	4	&&
op	13:26	0:0	4	!
water	13:27	0:0	4	tss
op	13:31	0:0	4	&&
water	13:34	0:0	4	is_start
stmts	13:44	16:4	3	
water	13:44	0:0	4	{
call	14:8	14:34	4	add_pes_stream
arg	14:23	14:25	5	ts
water	14:23	0:0	6	ts
arg	14:27	14:30	5	pid
water	14:27	0:0	6	pid
arg	14:32	14:34	5	-1
op	14:32	0:0	6	-
water	14:33	0:0	6	1
water	14:35	0:0	4	;
water	15:8	0:0	4	tss
op	15:12	0:0	4	=
water	15:14	0:0	4	ts
op	15:16	0:0	4	->
water	15:18	0:0	4	pids
op	15:22	0:0	4	[
water	15:23	0:0	4	pid
op	15:26	0:0	4	]
water	15:27	0:0	4	;
water	16:4	0:0	4	}
if	17:4	18:16	2	(! tss)
cond	17:8	17:9	3	! tss
op	17:8	0:0	4	!
water	17:9	0:0	4	tss
stmts	18:8	18:16	3	
return	18:8	18:16	4	0
water	18:15	0:0	5	0
water	19:4	0:0	2	ts
op	19:6	0:0	2	->
water	19:8	0:0	2	current_pid
op	19:20	0:0	2	=
water	19:22	0:0	2	pid
water	19:25	0:0	2	;
water	20:4	0:0	2	afc
op	20:8	0:0	2	=
water	20:10	0:0	2	(
water	20:11	0:0	2	packet
op	20:17	0:0	2	[
water	20:18	0:0	2	3
op	20:19	0:0	2	]
op	20:21	0:0	2	>>
water	20:24	0:0	2	4
water	20:25	0:0	2	)
op	20:27	0:0	2	&
water	20:29	0:0	2	3
water	20:30	0:0	2	;
if	21:4	22:16	2	(afc == 0)
cond	21:8	21:15	3	afc == 0
water	21:8	0:0	4	afc
op	21:12	0:0	4	==
water	21:15	0:0	4	0
stmts	22:8	22:16	3	
return	22:8	22:16	4	0
water	22:15	0:0	5	0
water	23:4	0:0	2	has_adaptation
op	23:21	0:0	2	=
water	23:23	0:0	2	afc
op	23:27	0:0	2	&
water	23:29	0:0	2	2
water	23:30	0:0	2	;
water	24:4	0:0	2	has_payload
op	24:21	0:0	2	=
water	24:23	0:0	2	afc
op	24:27	0:0	2	&
water	24:29	0:0	2	1
water	24:30	0:0	2	;
water	25:4	0:0	2	is_discontinuity
op	25:21	0:0	2	=
water	25:23	0:0	2	has_adaptation
op	25:38	0:0	2	&&
water	26:23	0:0	2	packet
op	26:29	0:0	2	[
water	26:30	0:0	2	4
op	26:31	0:0	2	]
op	26:33	0:0	2	!=
water	26:36	0:0	2	0
op	26:38	0:0	2	&&
water	27:23	0:0	2	(
water	27:24	0:0	2	packet
op	27:30	0:0	2	[
water	27:31	0:0	2	5
op	27:32	0:0	2	]
op	27:34	0:0	2	&
water	27:36	0:0	2	0
water	27:37	0:0	2	x80
water	27:40	0:0	2	)
water	27:41	0:0	2	;
water	29:4	0:0	2	cc
op	29:7	0:0	2	=
water	29:9	0:0	2	(
water	29:10	0:0	2	packet
op	29:16	0:0	2	[
water	29:17	0:0	2	3
op	29:18	0:0	2	]
op	29:20	0:0	2	&
water	29:22	0:0	2	0
water	29:23	0:0	2	xf
water	29:25	0:0	2	)
water	29:26	0:0	2	;
water	30:4	0:0	2	expected_cc
op	30:16	0:0	2	=
water	30:18	0:0	2	has_payload
water	30:30	0:0	2	?
water	30:32	0:0	2	(
water	30:33	0:0	2	tss
op	30:36	0:0	2	->
water	30:38	0:0	2	last_cc
op	30:46	0:0	2	+
water	30:48	0:0	2	1
water	30:49	0:0	2	)
op	30:51	0:0	2	&
water	30:53	0:0	2	0
water	30:54	0:0	2	x0f
water	30:58	0:0	2	:
water	30:60	0:0	2	tss
op	30:63	0:0	2	->
water	30:65	0:0	2	last_cc
water	30:72	0:0	2	;
water	31:4	0:0	2	cc_ok
op	31:10	0:0	2	=
water	31:12	0:0	2	pid
op	31:16	0:0	2	==
water	31:19	0:0	2	0
water	31:20	0:0	2	x1FFF
op	31:26	0:0	2	||
water	32:12	0:0	2	is_discontinuity
op	32:29	0:0	2	||
water	33:12	0:0	2	tss
op	33:15	0:0	2	->
water	33:17	0:0	2	last_cc
op	33:25	0:0	2	<
water	33:27	0:0	2	0
op	33:29	0:0	2	||
water	34:12	0:0	2	expected_cc
op	34:24	0:0	2	==
water	34:27	0:0	2	cc
water	34:29	0:0	2	;
water	35:4	0:0	2	tss
op	35:7	0:0	2	->
water	35:9	0:0	2	last_cc
op	35:17	0:0	2	=
water	35:19	0:0	2	cc
water	35:21	0:0	2	;
if	36:4	44:4	2	(! cc_ok)
cond	36:8	36:9	3	! cc_ok
op	36:8	0:0	4	!
water	36:9	0:0	4	cc_ok
stmts	36:16	44:4	3	
water	36:16	0:0	4	{
call	37:8	39:35	4	av_log
arg	37:15	37:25	5	ts->stream
water	37:15	0:0	6	ts
op	37:17	0:0	6	->
water	37:19	0:0	6	stream
arg	37:27	37:39	5	AV_LOG_DEBUG
water	37:27	0:0	6	AV_LOG_DEBUG
arg	38:15	38:72	5	"Continuity check failed for pid %d expected %d got %d\n"
water	38:15	0:0	6	"Continuity check failed for pid %d expected %d got %d\n"
arg	39:15	39:18	5	pid
water	39:15	0:0	6	pid
arg	39:20	39:31	5	expected_cc
water	39:20	0:0	6	expected_cc
arg	39:33	39:35	5	cc
water	39:33	0:0	6	cc
water	39:36	0:0	4	;
if	40:8	43:8	4	(tss -> type == MPEGTS_PES)
cond	40:12	40:25	5	tss -> type == MPEGTS_PES
water	40:12	0:0	6	tss
op	40:15	0:0	6	->
water	40:17	0:0	6	type
op	40:22	0:0	6	==
water	40:25	0:0	6	MPEGTS_PES
stmts	40:37	43:8	5	
water	40:37	0:0	6	{
decl	41:12	41:53	6	PESContext	*pc
op	41:27	0:0	6	=
water	41:29	0:0	6	tss
op	41:32	0:0	6	->
water	41:34	0:0	6	u
op	41:35	0:0	6	.
water	41:36	0:0	6	pes_filter
op	41:46	0:0	6	.
water	41:47	0:0	6	opaque
water	42:12	0:0	6	pc
op	42:14	0:0	6	->
water	42:16	0:0	6	flags
op	42:22	0:0	6	|=
water	42:25	0:0	6	AV_PKT_FLAG_CORRUPT
water	42:44	0:0	6	;
water	43:8	0:0	6	}
water	44:4	0:0	4	}
water	45:4	0:0	2	p
op	45:6	0:0	2	=
water	45:8	0:0	2	packet
op	45:15	0:0	2	+
water	45:17	0:0	2	4
water	45:18	0:0	2	;
if	46:4	53:4	2	(has_adaptation)
cond	46:8	46:8	3	has_adaptation
water	46:8	0:0	4	has_adaptation
stmts	46:24	53:4	3	
water	46:24	0:0	4	{
decl	47:8	47:21	4	int64_t	pcr_h
decl	48:8	48:17	4	int	pcr_l
if	49:8	50:47	4	(parse_pcr (& pcr_h ,& pcr_l ,packet ) == 0)
cond	49:12	49:49	5	parse_pcr (& pcr_h ,& pcr_l ,packet ) == 0
call	49:12	49:44	6	parse_pcr
arg	49:22	49:28	7	&pcr_h
op	49:22	0:0	8	&
water	49:23	0:0	8	pcr_h
arg	49:30	49:36	7	&pcr_l
op	49:30	0:0	8	&
water	49:31	0:0	8	pcr_l
arg	49:38	49:44	7	packet
water	49:38	0:0	8	packet
op	49:46	0:0	6	==
water	49:49	0:0	6	0
stmts	50:12	50:47	5	
water	50:12	0:0	6	tss
op	50:15	0:0	6	->
water	50:17	0:0	6	last_pcr
op	50:26	0:0	6	=
water	50:28	0:0	6	pcr_h
op	50:34	0:0	6	*
water	50:36	0:0	6	300
op	50:40	0:0	6	+
water	50:42	0:0	6	pcr_l
water	50:47	0:0	6	;
water	52:8	0:0	4	p
op	52:10	0:0	4	+=
water	52:13	0:0	4	p
op	52:14	0:0	4	[
water	52:15	0:0	4	0
op	52:16	0:0	4	]
op	52:18	0:0	4	+
water	52:20	0:0	4	1
water	52:21	0:0	4	;
water	53:4	0:0	4	}
water	55:4	0:0	2	p_end
op	55:10	0:0	2	=
water	55:12	0:0	2	packet
op	55:19	0:0	2	+
water	55:21	0:0	2	TS_PACKET_SIZE
water	55:35	0:0	2	;
if	56:4	57:16	2	(p >= p_end || ! has_payload)
cond	56:8	56:23	3	p >= p_end || ! has_payload
water	56:8	0:0	4	p
op	56:10	0:0	4	>=
water	56:13	0:0	4	p_end
op	56:19	0:0	4	||
op	56:22	0:0	4	!
water	56:23	0:0	4	has_payload
stmts	57:8	57:16	3	
return	57:8	57:16	4	0
water	57:15	0:0	5	0
water	58:4	0:0	2	pos
op	58:8	0:0	2	=
call	58:10	58:34	2	avio_tell
arg	58:20	58:34	3	ts->stream->pb
water	58:20	0:0	4	ts
op	58:22	0:0	4	->
water	58:24	0:0	4	stream
op	58:30	0:0	4	->
water	58:32	0:0	4	pb
water	58:35	0:0	2	;
if	59:4	62:4	2	(pos >= 0)
cond	59:8	59:15	3	pos >= 0
water	59:8	0:0	4	pos
op	59:12	0:0	4	>=
water	59:15	0:0	4	0
stmts	59:18	62:4	3	
water	59:18	0:0	4	{
call	60:8	60:40	4	av_assert0
arg	60:19	60:40	5	pos>=TS_PACKET_SIZE
water	60:19	0:0	6	pos
op	60:23	0:0	6	>=
water	60:26	0:0	6	TS_PACKET_SIZE
water	60:41	0:0	4	;
water	61:8	0:0	4	ts
op	61:10	0:0	4	->
water	61:12	0:0	4	pos47_full
op	61:23	0:0	4	=
water	61:25	0:0	4	pos
op	61:29	0:0	4	-
water	61:31	0:0	4	TS_PACKET_SIZE
water	61:45	0:0	4	;
water	62:4	0:0	4	}
if	63:4	108:4	2	(tss -> type == MPEGTS_SECTION)
cond	63:8	63:21	3	tss -> type == MPEGTS_SECTION
water	63:8	0:0	4	tss
op	63:11	0:0	4	->
water	63:13	0:0	4	type
op	63:18	0:0	4	==
water	63:21	0:0	4	MPEGTS_SECTION
stmts	63:37	108:4	3	
water	63:37	0:0	4	{
if	64:8	82:8	4	(is_start)
cond	64:12	64:12	5	is_start
water	64:12	0:0	6	is_start
stmts	64:22	82:8	5	
water	64:22	0:0	6	{
water	66:12	0:0	6	len
op	66:16	0:0	6	=
op	66:18	0:0	6	*
water	66:19	0:0	6	p
op	66:20	0:0	6	++
water	66:22	0:0	6	;
if	67:12	68:24	6	(len > p_end - p)
cond	67:16	67:30	7	len > p_end - p
water	67:16	0:0	8	len
op	67:20	0:0	8	>
water	67:22	0:0	8	p_end
op	67:28	0:0	8	-
water	67:30	0:0	8	p
stmts	68:16	68:24	7	
return	68:16	68:24	8	0
water	68:23	0:0	9	0
if	69:12	76:12	6	(len && cc_ok)
cond	69:16	69:23	7	len && cc_ok
water	69:16	0:0	8	len
op	69:20	0:0	8	&&
water	69:23	0:0	8	cc_ok
stmts	69:30	76:12	7	
water	69:30	0:0	8	{
call	71:16	72:44	8	write_section_data
arg	71:35	71:37	9	ts
water	71:35	0:0	10	ts
arg	71:39	71:42	9	tss
water	71:39	0:0	10	tss
arg	72:35	72:36	9	p
water	72:35	0:0	10	p
arg	72:38	72:41	9	len
water	72:38	0:0	10	len
arg	72:43	72:44	9	0
water	72:43	0:0	10	0
water	72:45	0:0	8	;
if	74:16	75:28	8	(! ts -> pids [ pid ])
cond	74:20	74:33	9	! ts -> pids [ pid ]
op	74:20	0:0	10	!
water	74:21	0:0	10	ts
op	74:23	0:0	10	->
water	74:25	0:0	10	pids
op	74:29	0:0	10	[
water	74:30	0:0	10	pid
op	74:33	0:0	10	]
stmts	75:20	75:28	9	
return	75:20	75:28	10	0
water	75:27	0:0	11	0
water	76:12	0:0	8	}
water	77:12	0:0	6	p
op	77:14	0:0	6	+=
water	77:17	0:0	6	len
water	77:20	0:0	6	;
if	78:12	81:12	6	(p < p_end)
cond	78:16	78:20	7	p < p_end
water	78:16	0:0	8	p
op	78:18	0:0	8	<
water	78:20	0:0	8	p_end
stmts	78:27	81:12	7	
water	78:27	0:0	8	{
call	79:16	80:50	8	write_section_data
arg	79:35	79:37	9	ts
water	79:35	0:0	10	ts
arg	79:39	79:42	9	tss
water	79:39	0:0	10	tss
arg	80:35	80:36	9	p
water	80:35	0:0	10	p
arg	80:38	80:47	9	p_end-p
water	80:38	0:0	10	p_end
op	80:44	0:0	10	-
water	80:46	0:0	10	p
arg	80:49	80:50	9	1
water	80:49	0:0	10	1
water	80:51	0:0	8	;
water	81:12	0:0	8	}
water	82:8	0:0	6	}
else	82:10	87:8	4
stmts	82:15	87:8	5	
water	82:15	0:0	6	{
if	83:12	86:12	6	(cc_ok)
cond	83:16	83:16	7	cc_ok
water	83:16	0:0	8	cc_ok
stmts	83:23	86:12	7	
water	83:23	0:0	8	{
call	84:16	85:50	8	write_section_data
arg	84:35	84:37	9	ts
water	84:35	0:0	10	ts
arg	84:39	84:42	9	tss
water	84:39	0:0	10	tss
arg	85:35	85:36	9	p
water	85:35	0:0	10	p
arg	85:38	85:47	9	p_end-p
water	85:38	0:0	10	p_end
op	85:44	0:0	10	-
water	85:46	0:0	10	p
arg	85:49	85:50	9	0
water	85:49	0:0	10	0
water	85:51	0:0	8	;
water	86:12	0:0	8	}
water	87:8	0:0	6	}
if	90:8	107:8	4	(ts -> stream -> ctx_flags & AVFMTCTX_NOHEADER && ts -> scan_all_pmts <= 0)
cond	90:12	90:78	5	ts -> stream -> ctx_flags & AVFMTCTX_NOHEADER && ts -> scan_all_pmts <= 0
water	90:12	0:0	6	ts
op	90:14	0:0	6	->
water	90:16	0:0	6	stream
op	90:22	0:0	6	->
water	90:24	0:0	6	ctx_flags
op	90:34	0:0	6	&
water	90:36	0:0	6	AVFMTCTX_NOHEADER
op	90:54	0:0	6	&&
water	90:57	0:0	6	ts
op	90:59	0:0	6	->
water	90:61	0:0	6	scan_all_pmts
op	90:75	0:0	6	<=
water	90:78	0:0	6	0
stmts	90:81	107:8	5	
water	90:81	0:0	6	{
decl	91:12	91:17	6	int	i
for	92:12	95:12	6	(i = 0 ;i < ts -> nb_prg;i ++)
forinit	92:17	92:22	7	i = 0 ;
water	92:17	0:0	8	i
op	92:19	0:0	8	=
water	92:21	0:0	8	0
water	92:22	0:0	8	;
cond	92:24	92:32	7	i < ts -> nb_prg
water	92:24	0:0	8	i
op	92:26	0:0	8	<
water	92:28	0:0	8	ts
op	92:30	0:0	8	->
water	92:32	0:0	8	nb_prg
forexpr	92:40	92:41	7	i ++
water	92:40	0:0	8	i
op	92:41	0:0	8	++
stmts	92:45	95:12	7	
water	92:45	0:0	8	{
if	93:16	94:25	8	(! ts -> prg [ i ] . pmt_found)
cond	93:20	93:32	9	! ts -> prg [ i ] . pmt_found
op	93:20	0:0	10	!
water	93:21	0:0	10	ts
op	93:23	0:0	10	->
water	93:25	0:0	10	prg
op	93:28	0:0	10	[
water	93:29	0:0	10	i
op	93:30	0:0	10	]
op	93:31	0:0	10	.
water	93:32	0:0	10	pmt_found
stmts	94:20	94:25	9	
break	94:20	94:25	10	
water	95:12	0:0	8	}
if	96:12	106:12	6	(i == ts -> nb_prg && ts -> nb_prg > 0)
cond	96:16	96:48	7	i == ts -> nb_prg && ts -> nb_prg > 0
water	96:16	0:0	8	i
op	96:18	0:0	8	==
water	96:21	0:0	8	ts
op	96:23	0:0	8	->
water	96:25	0:0	8	nb_prg
op	96:32	0:0	8	&&
water	96:35	0:0	8	ts
op	96:37	0:0	8	->
water	96:39	0:0	8	nb_prg
op	96:46	0:0	8	>
water	96:48	0:0	8	0
stmts	96:51	106:12	7	
water	96:51	0:0	8	{
decl	97:16	97:29	8	int	types
op	97:26	0:0	8	=
water	97:28	0:0	8	0
for	98:16	101:16	8	(i = 0 ;i < ts -> stream -> nb_streams;i ++)
forinit	98:21	98:26	9	i = 0 ;
water	98:21	0:0	10	i
op	98:23	0:0	10	=
water	98:25	0:0	10	0
water	98:26	0:0	10	;
cond	98:28	98:44	9	i < ts -> stream -> nb_streams
water	98:28	0:0	10	i
op	98:30	0:0	10	<
water	98:32	0:0	10	ts
op	98:34	0:0	10	->
water	98:36	0:0	10	stream
op	98:42	0:0	10	->
water	98:44	0:0	10	nb_streams
forexpr	98:56	98:57	9	i ++
water	98:56	0:0	10	i
op	98:57	0:0	10	++
stmts	98:61	101:16	9	
water	98:61	0:0	10	{
decl	99:20	99:57	10	AVStream	*st
op	99:33	0:0	10	=
water	99:35	0:0	10	ts
op	99:37	0:0	10	->
water	99:39	0:0	10	stream
op	99:45	0:0	10	->
water	99:47	0:0	10	streams
op	99:54	0:0	10	[
water	99:55	0:0	10	i
op	99:56	0:0	10	]
water	100:20	0:0	10	types
op	100:26	0:0	10	|=
water	100:29	0:0	10	1
op	100:30	0:0	10	<<
water	100:32	0:0	10	st
op	100:34	0:0	10	->
water	100:36	0:0	10	codec
op	100:41	0:0	10	->
water	100:43	0:0	10	codec_type
water	100:53	0:0	10	;
water	101:16	0:0	10	}
if	102:16	105:16	8	(( types & ( 1 << AVMEDIA_TYPE_AUDIO ) && types & ( 1 << AVMEDIA_TYPE_VIDEO ) ) || pos > 100000)
cond	102:20	102:98	9	( types & ( 1 << AVMEDIA_TYPE_AUDIO ) && types & ( 1 << AVMEDIA_TYPE_VIDEO ) ) || pos > 100000
water	102:20	0:0	10	(
water	102:21	0:0	10	types
op	102:27	0:0	10	&
water	102:29	0:0	10	(
water	102:30	0:0	10	1
op	102:31	0:0	10	<<
water	102:33	0:0	10	AVMEDIA_TYPE_AUDIO
water	102:51	0:0	10	)
op	102:53	0:0	10	&&
water	102:56	0:0	10	types
op	102:62	0:0	10	&
water	102:64	0:0	10	(
water	102:65	0:0	10	1
op	102:66	0:0	10	<<
water	102:68	0:0	10	AVMEDIA_TYPE_VIDEO
water	102:86	0:0	10	)
water	102:87	0:0	10	)
op	102:89	0:0	10	||
water	102:92	0:0	10	pos
op	102:96	0:0	10	>
water	102:98	0:0	10	100000
stmts	102:106	105:16	9	
water	102:106	0:0	10	{
call	103:20	103:93	10	av_log
arg	103:27	103:37	11	ts->stream
water	103:27	0:0	12	ts
op	103:29	0:0	12	->
water	103:31	0:0	12	stream
arg	103:39	103:51	11	AV_LOG_DEBUG
water	103:39	0:0	12	AV_LOG_DEBUG
arg	103:53	103:93	11	"All programs have pmt, headers found\n"
water	103:53	0:0	12	"All programs have pmt, headers found\n"
water	103:94	0:0	10	;
water	104:20	0:0	10	ts
op	104:22	0:0	10	->
water	104:24	0:0	10	stream
op	104:30	0:0	10	->
water	104:32	0:0	10	ctx_flags
op	104:42	0:0	10	&=
water	104:45	0:0	10	~AVFMTCTX_NOHEADER
water	104:63	0:0	10	;
water	105:16	0:0	10	}
water	106:12	0:0	8	}
water	107:8	0:0	6	}
water	108:4	0:0	4	}
else	108:6	116:4	2
stmts	108:11	116:4	3	
water	108:11	0:0	4	{
decl	109:8	109:15	4	int	ret
if	111:8	115:8	4	(tss -> type == MPEGTS_PES)
cond	111:12	111:25	5	tss -> type == MPEGTS_PES
water	111:12	0:0	6	tss
op	111:15	0:0	6	->
water	111:17	0:0	6	type
op	111:22	0:0	6	==
water	111:25	0:0	6	MPEGTS_PES
stmts	111:37	115:8	5	
water	111:37	0:0	6	{
if	112:12	114:26	6	(( ret =tss -> u . pes_filter . pes_cb (tss ,p ,p_end - p ,is_start ,pos - ts -> raw_packet_size ) ) < 0)
cond	112:16	113:78	7	( ret =tss -> u . pes_filter . pes_cb (tss ,p ,p_end - p ,is_start ,pos - ts -> raw_packet_size ) ) < 0
water	112:16	0:0	8	(
water	112:17	0:0	8	ret
op	112:21	0:0	8	=
call	112:23	113:73	8	tss->u.pes_filter.pes_cb
arg	112:48	112:51	9	tss
water	112:48	0:0	10	tss
arg	112:53	112:54	9	p
water	112:53	0:0	10	p
arg	112:56	112:65	9	p_end-p
water	112:56	0:0	10	p_end
op	112:62	0:0	10	-
water	112:64	0:0	10	p
arg	112:67	112:75	9	is_start
water	112:67	0:0	10	is_start
arg	113:48	113:73	9	pos-ts->raw_packet_size
water	113:48	0:0	10	pos
op	113:52	0:0	10	-
water	113:54	0:0	10	ts
op	113:56	0:0	10	->
water	113:58	0:0	10	raw_packet_size
water	113:74	0:0	8	)
op	113:76	0:0	8	<
water	113:78	0:0	8	0
stmts	114:16	114:26	7	
return	114:16	114:26	8	ret
water	114:23	0:0	9	ret
water	115:8	0:0	6	}
water	116:4	0:0	4	}
return	117:4	117:12	2	0
water	117:11	0:0	3	0
