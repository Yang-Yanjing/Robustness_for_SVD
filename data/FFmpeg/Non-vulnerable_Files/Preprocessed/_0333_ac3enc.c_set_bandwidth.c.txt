func	1:15	61:0	0	void	set_bandwidth
params	1:33	0:0	1	
param	1:34	1:53	2	AC3EncodeContext *	s
stmnts	0:0	60:4	1	
decl	3:4	3:37	2	int	blk
water	3:11	0:0	2	,
decl	3:4	3:37	2	int	ch
water	3:15	0:0	2	,
decl	3:4	3:37	2	int	av_uninit
water	3:26	0:0	2	(
water	3:27	0:0	2	cpl_start
water	3:36	0:0	2	)
if	4:4	9:4	2	(s -> cutoff)
cond	4:8	4:11	3	s -> cutoff
water	4:8	0:0	4	s
op	4:9	0:0	4	->
water	4:11	0:0	4	cutoff
stmts	4:19	9:4	3	
water	4:19	0:0	4	{
decl	6:8	6:22	4	int	fbw_coeffs
water	7:8	0:0	4	fbw_coeffs
op	7:23	0:0	4	=
water	7:25	0:0	4	s
op	7:26	0:0	4	->
water	7:28	0:0	4	cutoff
op	7:35	0:0	4	*
water	7:37	0:0	4	2
op	7:39	0:0	4	*
water	7:41	0:0	4	AC3_MAX_COEFS
op	7:55	0:0	4	/
water	7:57	0:0	4	s
op	7:58	0:0	4	->
water	7:60	0:0	4	sample_rate
water	7:71	0:0	4	;
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	bandwidth_code
op	8:26	0:0	4	=
call	8:28	8:64	4	av_clip
arg	8:36	8:57	5	(fbw_coeffs-73)/3
water	8:36	0:0	6	(
water	8:37	0:0	6	fbw_coeffs
op	8:48	0:0	6	-
water	8:50	0:0	6	73
water	8:52	0:0	6	)
op	8:54	0:0	6	/
water	8:56	0:0	6	3
arg	8:59	8:60	5	0
water	8:59	0:0	6	0
arg	8:62	8:64	5	60
water	8:62	0:0	6	60
water	8:65	0:0	4	;
water	9:4	0:0	4	}
else	9:6	12:4	2
stmts	9:11	12:4	3	
water	9:11	0:0	4	{
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	bandwidth_code
op	11:26	0:0	4	=
water	11:28	0:0	4	ac3_bandwidth_tab
op	11:45	0:0	4	[
water	11:46	0:0	4	s
op	11:47	0:0	4	->
water	11:49	0:0	4	fbw_channels
op	11:61	0:0	4	-
water	11:62	0:0	4	1
op	11:63	0:0	4	]
op	11:64	0:0	4	[
water	11:65	0:0	4	s
op	11:66	0:0	4	->
water	11:68	0:0	4	bit_alloc
op	11:77	0:0	4	.
water	11:78	0:0	4	sr_code
op	11:85	0:0	4	]
op	11:86	0:0	4	[
water	11:87	0:0	4	s
op	11:88	0:0	4	->
water	11:90	0:0	4	frame_size_code
op	11:105	0:0	4	/
water	11:106	0:0	4	2
op	11:107	0:0	4	]
water	11:108	0:0	4	;
water	12:4	0:0	4	}
for	14:4	18:4	2	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	14:9	14:15	3	ch = 1 ;
water	14:9	0:0	4	ch
op	14:12	0:0	4	=
water	14:14	0:0	4	1
water	14:15	0:0	4	;
cond	14:17	14:26	3	ch <= s -> fbw_channels
water	14:17	0:0	4	ch
op	14:20	0:0	4	<=
water	14:23	0:0	4	s
op	14:24	0:0	4	->
water	14:26	0:0	4	fbw_channels
forexpr	14:40	14:42	3	ch ++
water	14:40	0:0	4	ch
op	14:42	0:0	4	++
stmts	14:46	18:4	3	
water	14:46	0:0	4	{
water	15:8	0:0	4	s
op	15:9	0:0	4	->
water	15:11	0:0	4	start_freq
op	15:21	0:0	4	[
water	15:22	0:0	4	ch
op	15:24	0:0	4	]
op	15:26	0:0	4	=
water	15:28	0:0	4	0
water	15:29	0:0	4	;
for	16:8	17:68	4	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	16:13	16:20	5	blk = 0 ;
water	16:13	0:0	6	blk
op	16:17	0:0	6	=
water	16:19	0:0	6	0
water	16:20	0:0	6	;
cond	16:22	16:31	5	blk < s -> num_blocks
water	16:22	0:0	6	blk
op	16:26	0:0	6	<
water	16:28	0:0	6	s
op	16:29	0:0	6	->
water	16:31	0:0	6	num_blocks
forexpr	16:43	16:46	5	blk ++
water	16:43	0:0	6	blk
op	16:46	0:0	6	++
stmts	17:12	17:68	5	
water	17:12	0:0	6	s
op	17:13	0:0	6	->
water	17:15	0:0	6	blocks
op	17:21	0:0	6	[
water	17:22	0:0	6	blk
op	17:25	0:0	6	]
op	17:26	0:0	6	.
water	17:27	0:0	6	end_freq
op	17:35	0:0	6	[
water	17:36	0:0	6	ch
op	17:38	0:0	6	]
op	17:40	0:0	6	=
water	17:42	0:0	6	s
op	17:43	0:0	6	->
water	17:45	0:0	6	bandwidth_code
op	17:60	0:0	6	*
water	17:62	0:0	6	3
op	17:64	0:0	6	+
water	17:66	0:0	6	73
water	17:68	0:0	6	;
water	18:4	0:0	4	}
if	20:4	24:4	2	(s -> lfe_on)
cond	20:8	20:11	3	s -> lfe_on
water	20:8	0:0	4	s
op	20:9	0:0	4	->
water	20:11	0:0	4	lfe_on
stmts	20:19	24:4	3	
water	20:19	0:0	4	{
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	start_freq
op	21:21	0:0	4	[
water	21:22	0:0	4	s
op	21:23	0:0	4	->
water	21:25	0:0	4	lfe_channel
op	21:36	0:0	4	]
op	21:38	0:0	4	=
water	21:40	0:0	4	0
water	21:41	0:0	4	;
for	22:8	23:43	4	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	22:13	22:20	5	blk = 0 ;
water	22:13	0:0	6	blk
op	22:17	0:0	6	=
water	22:19	0:0	6	0
water	22:20	0:0	6	;
cond	22:22	22:31	5	blk < s -> num_blocks
water	22:22	0:0	6	blk
op	22:26	0:0	6	<
water	22:28	0:0	6	s
op	22:29	0:0	6	->
water	22:31	0:0	6	num_blocks
forexpr	22:43	22:46	5	blk ++
water	22:43	0:0	6	blk
op	22:46	0:0	6	++
stmts	23:12	23:43	5	
water	23:12	0:0	6	s
op	23:13	0:0	6	->
water	23:15	0:0	6	blocks
op	23:21	0:0	6	[
water	23:22	0:0	6	blk
op	23:25	0:0	6	]
op	23:26	0:0	6	.
water	23:27	0:0	6	end_freq
op	23:35	0:0	6	[
water	23:36	0:0	6	ch
op	23:38	0:0	6	]
op	23:40	0:0	6	=
water	23:42	0:0	6	7
water	23:43	0:0	6	;
water	24:4	0:0	4	}
if	26:4	38:4	2	(s -> cpl_enabled)
cond	26:8	26:11	3	s -> cpl_enabled
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	cpl_enabled
stmts	26:24	38:4	3	
water	26:24	0:0	4	{
if	27:8	29:8	4	(s -> options . cpl_start != AC3ENC_OPT_AUTO)
cond	27:12	27:36	5	s -> options . cpl_start != AC3ENC_OPT_AUTO
water	27:12	0:0	6	s
op	27:13	0:0	6	->
water	27:15	0:0	6	options
op	27:22	0:0	6	.
water	27:23	0:0	6	cpl_start
op	27:33	0:0	6	!=
water	27:36	0:0	6	AC3ENC_OPT_AUTO
stmts	27:53	29:8	5	
water	27:53	0:0	6	{
water	28:12	0:0	6	cpl_start
op	28:22	0:0	6	=
water	28:24	0:0	6	s
op	28:25	0:0	6	->
water	28:27	0:0	6	options
op	28:34	0:0	6	.
water	28:35	0:0	6	cpl_start
water	28:44	0:0	6	;
water	29:8	0:0	6	}
else	29:10	37:8	4
stmts	29:15	37:8	5	
water	29:15	0:0	6	{
water	30:12	0:0	6	cpl_start
op	30:22	0:0	6	=
water	30:24	0:0	6	ac3_coupling_start_tab
op	30:46	0:0	6	[
water	30:47	0:0	6	s
op	30:48	0:0	6	->
water	30:50	0:0	6	channel_mode
op	30:62	0:0	6	-
water	30:63	0:0	6	2
op	30:64	0:0	6	]
op	30:65	0:0	6	[
water	30:66	0:0	6	s
op	30:67	0:0	6	->
water	30:69	0:0	6	bit_alloc
op	30:78	0:0	6	.
water	30:79	0:0	6	sr_code
op	30:86	0:0	6	]
op	30:87	0:0	6	[
water	30:88	0:0	6	s
op	30:89	0:0	6	->
water	30:91	0:0	6	frame_size_code
op	30:106	0:0	6	/
water	30:107	0:0	6	2
op	30:108	0:0	6	]
water	30:109	0:0	6	;
if	31:12	36:12	6	(cpl_start < 0)
cond	31:16	31:28	7	cpl_start < 0
water	31:16	0:0	8	cpl_start
op	31:26	0:0	8	<
water	31:28	0:0	8	0
stmts	31:31	36:12	7	
water	31:31	0:0	8	{
if	32:16	33:38	8	(s -> options . channel_coupling == AC3ENC_OPT_AUTO)
cond	32:20	32:51	9	s -> options . channel_coupling == AC3ENC_OPT_AUTO
water	32:20	0:0	10	s
op	32:21	0:0	10	->
water	32:23	0:0	10	options
op	32:30	0:0	10	.
water	32:31	0:0	10	channel_coupling
op	32:48	0:0	10	==
water	32:51	0:0	10	AC3ENC_OPT_AUTO
stmts	33:20	33:38	9	
water	33:20	0:0	10	s
op	33:21	0:0	10	->
water	33:23	0:0	10	cpl_enabled
op	33:35	0:0	10	=
water	33:37	0:0	10	0
water	33:38	0:0	10	;
else	34:16	35:34	8
stmts	35:20	35:34	9	
water	35:20	0:0	10	cpl_start
op	35:30	0:0	10	=
water	35:32	0:0	10	15
water	35:34	0:0	10	;
water	36:12	0:0	8	}
water	37:8	0:0	6	}
water	38:4	0:0	4	}
if	39:4	60:4	2	(s -> cpl_enabled)
cond	39:8	39:11	3	s -> cpl_enabled
water	39:8	0:0	4	s
op	39:9	0:0	4	->
water	39:11	0:0	4	cpl_enabled
stmts	39:24	60:4	3	
water	39:24	0:0	4	{
decl	40:8	40:43	4	int	i
water	40:13	0:0	4	,
decl	40:8	40:43	4	int	cpl_start_band
water	40:29	0:0	4	,
decl	40:8	40:43	4	int	cpl_end_band
decl	41:8	41:51	4	uint8_t	*cpl_band_sizes
op	41:32	0:0	4	=
water	41:34	0:0	4	s
op	41:35	0:0	4	->
water	41:37	0:0	4	cpl_band_sizes
water	42:8	0:0	4	cpl_end_band
op	42:23	0:0	4	=
water	42:25	0:0	4	s
op	42:26	0:0	4	->
water	42:28	0:0	4	bandwidth_code
op	42:43	0:0	4	/
water	42:45	0:0	4	4
op	42:47	0:0	4	+
water	42:49	0:0	4	3
water	42:50	0:0	4	;
water	43:8	0:0	4	cpl_start_band
op	43:23	0:0	4	=
call	43:25	43:72	4	av_clip
arg	43:33	43:42	5	cpl_start
water	43:33	0:0	6	cpl_start
arg	43:44	43:45	5	0
water	43:44	0:0	6	0
arg	43:47	43:72	5	FFMIN(cpl_end_band-1,15)
call	43:47	43:71	6	FFMIN
arg	43:53	43:67	7	cpl_end_band-1
water	43:53	0:0	8	cpl_end_band
op	43:65	0:0	8	-
water	43:66	0:0	8	1
arg	43:69	43:71	7	15
water	43:69	0:0	8	15
water	43:73	0:0	4	;
water	44:8	0:0	4	s
op	44:9	0:0	4	->
water	44:11	0:0	4	num_cpl_subbands
op	44:28	0:0	4	=
water	44:30	0:0	4	cpl_end_band
op	44:43	0:0	4	-
water	44:45	0:0	4	cpl_start_band
water	44:59	0:0	4	;
water	45:8	0:0	4	s
op	45:9	0:0	4	->
water	45:11	0:0	4	num_cpl_bands
op	45:25	0:0	4	=
water	45:27	0:0	4	1
water	45:28	0:0	4	;
op	46:8	0:0	4	*
water	46:9	0:0	4	cpl_band_sizes
op	46:25	0:0	4	=
water	46:27	0:0	4	12
water	46:29	0:0	4	;
for	47:8	55:8	4	(i = cpl_start_band + 1 ;i < cpl_end_band;i ++)
forinit	47:13	47:35	5	i = cpl_start_band + 1 ;
water	47:13	0:0	6	i
op	47:15	0:0	6	=
water	47:17	0:0	6	cpl_start_band
op	47:32	0:0	6	+
water	47:34	0:0	6	1
water	47:35	0:0	6	;
cond	47:37	47:41	5	i < cpl_end_band
water	47:37	0:0	6	i
op	47:39	0:0	6	<
water	47:41	0:0	6	cpl_end_band
forexpr	47:55	47:56	5	i ++
water	47:55	0:0	6	i
op	47:56	0:0	6	++
stmts	47:60	55:8	5	
water	47:60	0:0	6	{
if	48:12	50:12	6	(ff_eac3_default_cpl_band_struct [ i ])
cond	48:16	48:49	7	ff_eac3_default_cpl_band_struct [ i ]
water	48:16	0:0	8	ff_eac3_default_cpl_band_struct
op	48:47	0:0	8	[
water	48:48	0:0	8	i
op	48:49	0:0	8	]
stmts	48:52	50:12	7	
water	48:52	0:0	8	{
op	49:16	0:0	8	*
water	49:17	0:0	8	cpl_band_sizes
op	49:32	0:0	8	+=
water	49:35	0:0	8	12
water	49:37	0:0	8	;
water	50:12	0:0	8	}
else	50:14	54:12	6
stmts	50:19	54:12	7	
water	50:19	0:0	8	{
water	51:16	0:0	8	s
op	51:17	0:0	8	->
water	51:19	0:0	8	num_cpl_bands
op	51:32	0:0	8	++
water	51:34	0:0	8	;
water	52:16	0:0	8	cpl_band_sizes
op	52:30	0:0	8	++
water	52:32	0:0	8	;
op	53:16	0:0	8	*
water	53:17	0:0	8	cpl_band_sizes
op	53:32	0:0	8	=
water	53:34	0:0	8	12
water	53:36	0:0	8	;
water	54:12	0:0	8	}
water	55:8	0:0	6	}
water	56:8	0:0	4	s
op	56:9	0:0	4	->
water	56:11	0:0	4	start_freq
op	56:21	0:0	4	[
water	56:22	0:0	4	CPL_CH
op	56:28	0:0	4	]
op	56:30	0:0	4	=
water	56:32	0:0	4	cpl_start_band
op	56:47	0:0	4	*
water	56:49	0:0	4	12
op	56:52	0:0	4	+
water	56:54	0:0	4	37
water	56:56	0:0	4	;
water	57:8	0:0	4	s
op	57:9	0:0	4	->
water	57:11	0:0	4	cpl_end_freq
op	57:30	0:0	4	=
water	57:32	0:0	4	cpl_end_band
op	57:47	0:0	4	*
water	57:49	0:0	4	12
op	57:52	0:0	4	+
water	57:54	0:0	4	37
water	57:56	0:0	4	;
for	58:8	59:61	4	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	58:13	58:20	5	blk = 0 ;
water	58:13	0:0	6	blk
op	58:17	0:0	6	=
water	58:19	0:0	6	0
water	58:20	0:0	6	;
cond	58:22	58:31	5	blk < s -> num_blocks
water	58:22	0:0	6	blk
op	58:26	0:0	6	<
water	58:28	0:0	6	s
op	58:29	0:0	6	->
water	58:31	0:0	6	num_blocks
forexpr	58:43	58:46	5	blk ++
water	58:43	0:0	6	blk
op	58:46	0:0	6	++
stmts	59:12	59:61	5	
water	59:12	0:0	6	s
op	59:13	0:0	6	->
water	59:15	0:0	6	blocks
op	59:21	0:0	6	[
water	59:22	0:0	6	blk
op	59:25	0:0	6	]
op	59:26	0:0	6	.
water	59:27	0:0	6	end_freq
op	59:35	0:0	6	[
water	59:36	0:0	6	CPL_CH
op	59:42	0:0	6	]
op	59:44	0:0	6	=
water	59:46	0:0	6	s
op	59:47	0:0	6	->
water	59:49	0:0	6	cpl_end_freq
water	59:61	0:0	6	;
water	60:4	0:0	4	}
