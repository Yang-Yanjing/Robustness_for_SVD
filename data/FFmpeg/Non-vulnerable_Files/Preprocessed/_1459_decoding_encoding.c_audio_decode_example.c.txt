func	1:0	89:0	0	static void	audio_decode_example
params	1:32	0:0	1	
param	1:33	1:56	2	const char *	outfilename
param	1:58	1:78	2	const char *	filename
stmnts	0:0	88:33	1	
decl	3:4	3:18	2	AVCodec	*codec
decl	4:4	4:27	2	AVCodecContext	*c
op	4:21	0:0	2	=
water	4:23	0:0	2	NULL
decl	5:4	5:11	2	int	len
decl	6:4	6:21	2	FILE	*f
water	6:11	0:0	2	,
decl	6:4	6:21	2	FILE	*outfile
decl	7:4	7:66	2	uint8_t	inbuf[AUDIO_INBUF_SIZE+AV_INPUT_BUFFER_PADDING_SIZE]
decl	8:4	8:18	2	AVPacket	avpkt
decl	9:4	9:33	2	AVFrame	*decoded_frame
op	9:27	0:0	2	=
water	9:29	0:0	2	NULL
call	10:4	10:25	2	av_init_packet
arg	10:19	10:25	3	&avpkt
op	10:19	0:0	4	&
water	10:20	0:0	4	avpkt
water	10:26	0:0	2	;
call	11:4	11:64	2	printf
arg	11:11	11:41	3	"Decode audio file %s to %s\n"
water	11:11	0:0	4	"Decode audio file %s to %s\n"
arg	11:43	11:51	3	filename
water	11:43	0:0	4	filename
arg	11:53	11:64	3	outfilename
water	11:53	0:0	4	outfilename
water	11:65	0:0	2	;
water	13:4	0:0	2	codec
op	13:10	0:0	2	=
call	13:12	13:48	2	avcodec_find_decoder
arg	13:33	13:48	3	AV_CODEC_ID_MP2
water	13:33	0:0	4	AV_CODEC_ID_MP2
water	13:49	0:0	2	;
if	14:4	17:4	2	(! codec)
cond	14:8	14:9	3	! codec
op	14:8	0:0	4	!
water	14:9	0:0	4	codec
stmts	14:16	17:4	3	
water	14:16	0:0	4	{
call	15:8	15:43	4	fprintf
arg	15:16	15:22	5	stderr
water	15:16	0:0	6	stderr
arg	15:24	15:43	5	"Codec not found\n"
water	15:24	0:0	6	"Codec not found\n"
water	15:44	0:0	4	;
call	16:8	16:14	4	exit
arg	16:13	16:14	5	1
water	16:13	0:0	6	1
water	16:15	0:0	4	;
water	17:4	0:0	4	}
water	18:4	0:0	2	c
op	18:6	0:0	2	=
call	18:8	18:36	2	avcodec_alloc_context3
arg	18:31	18:36	3	codec
water	18:31	0:0	4	codec
water	18:37	0:0	2	;
if	19:4	22:4	2	(! c)
cond	19:8	19:9	3	! c
op	19:8	0:0	4	!
water	19:9	0:0	4	c
stmts	19:12	22:4	3	
water	19:12	0:0	4	{
call	20:8	20:66	4	fprintf
arg	20:16	20:22	5	stderr
water	20:16	0:0	6	stderr
arg	20:24	20:66	5	"Could not allocate audio codec context\n"
water	20:24	0:0	6	"Could not allocate audio codec context\n"
water	20:67	0:0	4	;
call	21:8	21:14	4	exit
arg	21:13	21:14	5	1
water	21:13	0:0	6	1
water	21:15	0:0	4	;
water	22:4	0:0	4	}
if	24:4	27:4	2	(avcodec_open2 (c ,codec ,NULL ) < 0)
cond	24:8	24:40	3	avcodec_open2 (c ,codec ,NULL ) < 0
call	24:8	24:36	4	avcodec_open2
arg	24:22	24:23	5	c
water	24:22	0:0	6	c
arg	24:25	24:30	5	codec
water	24:25	0:0	6	codec
arg	24:32	24:36	5	NULL
water	24:32	0:0	6	NULL
op	24:38	0:0	4	<
water	24:40	0:0	4	0
stmts	24:43	27:4	3	
water	24:43	0:0	4	{
call	25:8	25:48	4	fprintf
arg	25:16	25:22	5	stderr
water	25:16	0:0	6	stderr
arg	25:24	25:48	5	"Could not open codec\n"
water	25:24	0:0	6	"Could not open codec\n"
water	25:49	0:0	4	;
call	26:8	26:14	4	exit
arg	26:13	26:14	5	1
water	26:13	0:0	6	1
water	26:15	0:0	4	;
water	27:4	0:0	4	}
water	28:4	0:0	2	f
op	28:6	0:0	2	=
call	28:8	28:28	2	fopen
arg	28:14	28:22	3	filename
water	28:14	0:0	4	filename
arg	28:24	28:28	3	"rb"
water	28:24	0:0	4	"rb"
water	28:29	0:0	2	;
if	29:4	32:4	2	(! f)
cond	29:8	29:9	3	! f
op	29:8	0:0	4	!
water	29:9	0:0	4	f
stmts	29:12	32:4	3	
water	29:12	0:0	4	{
call	30:8	30:55	4	fprintf
arg	30:16	30:22	5	stderr
water	30:16	0:0	6	stderr
arg	30:24	30:45	5	"Could not open %s\n"
water	30:24	0:0	6	"Could not open %s\n"
arg	30:47	30:55	5	filename
water	30:47	0:0	6	filename
water	30:56	0:0	4	;
call	31:8	31:14	4	exit
arg	31:13	31:14	5	1
water	31:13	0:0	6	1
water	31:15	0:0	4	;
water	32:4	0:0	4	}
water	33:4	0:0	2	outfile
op	33:12	0:0	2	=
call	33:14	33:37	2	fopen
arg	33:20	33:31	3	outfilename
water	33:20	0:0	4	outfilename
arg	33:33	33:37	3	"wb"
water	33:33	0:0	4	"wb"
water	33:38	0:0	2	;
if	34:4	37:4	2	(! outfile)
cond	34:8	34:9	3	! outfile
op	34:8	0:0	4	!
water	34:9	0:0	4	outfile
stmts	34:18	37:4	3	
water	34:18	0:0	4	{
call	35:8	35:17	4	av_free
arg	35:16	35:17	5	c
water	35:16	0:0	6	c
water	35:18	0:0	4	;
call	36:8	36:14	4	exit
arg	36:13	36:14	5	1
water	36:13	0:0	6	1
water	36:15	0:0	4	;
water	37:4	0:0	4	}
water	39:4	0:0	2	avpkt
op	39:9	0:0	2	.
water	39:10	0:0	2	data
op	39:15	0:0	2	=
water	39:17	0:0	2	inbuf
water	39:22	0:0	2	;
water	40:4	0:0	2	avpkt
op	40:9	0:0	2	.
water	40:10	0:0	2	size
op	40:15	0:0	2	=
call	40:17	40:52	2	fread
arg	40:23	40:28	3	inbuf
water	40:23	0:0	4	inbuf
arg	40:30	40:31	3	1
water	40:30	0:0	4	1
arg	40:33	40:49	3	AUDIO_INBUF_SIZE
water	40:33	0:0	4	AUDIO_INBUF_SIZE
arg	40:51	40:52	3	f
water	40:51	0:0	4	f
water	40:53	0:0	2	;
while	41:4	83:4	2	(avpkt . size > 0)
cond	41:11	41:24	3	avpkt . size > 0
water	41:11	0:0	4	avpkt
op	41:16	0:0	4	.
water	41:17	0:0	4	size
op	41:22	0:0	4	>
water	41:24	0:0	4	0
stmts	41:27	83:4	3	
water	41:27	0:0	4	{
decl	42:8	42:17	4	int	i
water	42:13	0:0	4	,
decl	42:8	42:17	4	int	ch
decl	43:8	43:25	4	int	got_frame
op	43:22	0:0	4	=
water	43:24	0:0	4	0
if	44:8	49:8	4	(! decoded_frame)
cond	44:12	44:13	5	! decoded_frame
op	44:12	0:0	6	!
water	44:13	0:0	6	decoded_frame
stmts	44:28	49:8	5	
water	44:28	0:0	6	{
if	45:12	48:12	6	(! ( decoded_frame =av_frame_alloc ( ) ))
cond	45:16	45:50	7	! ( decoded_frame =av_frame_alloc ( ) )
op	45:16	0:0	8	!
water	45:17	0:0	8	(
water	45:18	0:0	8	decoded_frame
op	45:32	0:0	8	=
call	45:34	45:49	8	av_frame_alloc
water	45:50	0:0	8	)
stmts	45:53	48:12	7	
water	45:53	0:0	8	{
call	46:16	46:66	8	fprintf
arg	46:24	46:30	9	stderr
water	46:24	0:0	10	stderr
arg	46:32	46:66	9	"Could not allocate audio frame\n"
water	46:32	0:0	10	"Could not allocate audio frame\n"
water	46:67	0:0	8	;
call	47:16	47:22	8	exit
arg	47:21	47:22	9	1
water	47:21	0:0	10	1
water	47:23	0:0	8	;
water	48:12	0:0	8	}
water	49:8	0:0	6	}
water	50:8	0:0	4	len
op	50:12	0:0	4	=
call	50:14	50:72	4	avcodec_decode_audio4
arg	50:36	50:37	5	c
water	50:36	0:0	6	c
arg	50:39	50:52	5	decoded_frame
water	50:39	0:0	6	decoded_frame
arg	50:54	50:64	5	&got_frame
op	50:54	0:0	6	&
water	50:55	0:0	6	got_frame
arg	50:66	50:72	5	&avpkt
op	50:66	0:0	6	&
water	50:67	0:0	6	avpkt
water	50:73	0:0	4	;
if	51:8	54:8	4	(len < 0)
cond	51:12	51:18	5	len < 0
water	51:12	0:0	6	len
op	51:16	0:0	6	<
water	51:18	0:0	6	0
stmts	51:21	54:8	5	
water	51:21	0:0	6	{
call	52:12	52:52	6	fprintf
arg	52:20	52:26	7	stderr
water	52:20	0:0	8	stderr
arg	52:28	52:52	7	"Error while decoding\n"
water	52:28	0:0	8	"Error while decoding\n"
water	52:53	0:0	6	;
call	53:12	53:18	6	exit
arg	53:17	53:18	7	1
water	53:17	0:0	8	1
water	53:19	0:0	6	;
water	54:8	0:0	6	}
if	55:8	66:8	4	(got_frame)
cond	55:12	55:12	5	got_frame
water	55:12	0:0	6	got_frame
stmts	55:23	66:8	5	
water	55:23	0:0	6	{
decl	57:12	57:66	6	int	data_size
op	57:26	0:0	6	=
call	57:28	57:65	7	av_get_bytes_per_sample
arg	57:52	57:65	8	c->sample_fmt
water	57:52	0:0	9	c
op	57:53	0:0	9	->
water	57:55	0:0	9	sample_fmt
if	58:12	62:12	6	(data_size < 0)
cond	58:16	58:28	7	data_size < 0
water	58:16	0:0	8	data_size
op	58:26	0:0	8	<
water	58:28	0:0	8	0
stmts	58:31	62:12	7	
water	58:31	0:0	8	{
call	60:16	60:65	8	fprintf
arg	60:24	60:30	9	stderr
water	60:24	0:0	10	stderr
arg	60:32	60:65	9	"Failed to calculate data size\n"
water	60:32	0:0	10	"Failed to calculate data size\n"
water	60:66	0:0	8	;
call	61:16	61:22	8	exit
arg	61:21	61:22	9	1
water	61:21	0:0	10	1
water	61:23	0:0	8	;
water	62:12	0:0	8	}
for	63:12	65:88	6	(i = 0 ;i < decoded_frame -> nb_samples;i ++)
forinit	63:17	63:20	7	i = 0 ;
water	63:17	0:0	8	i
op	63:18	0:0	8	=
water	63:19	0:0	8	0
water	63:20	0:0	8	;
cond	63:22	63:39	7	i < decoded_frame -> nb_samples
water	63:22	0:0	8	i
op	63:23	0:0	8	<
water	63:24	0:0	8	decoded_frame
op	63:37	0:0	8	->
water	63:39	0:0	8	nb_samples
forexpr	63:51	63:52	7	i ++
water	63:51	0:0	8	i
op	63:52	0:0	8	++
stmts	64:16	65:88	7	
for	64:16	65:88	8	(ch = 0 ;ch < c -> channels;ch ++)
forinit	64:21	64:25	9	ch = 0 ;
water	64:21	0:0	10	ch
op	64:23	0:0	10	=
water	64:24	0:0	10	0
water	64:25	0:0	10	;
cond	64:27	64:33	9	ch < c -> channels
water	64:27	0:0	10	ch
op	64:29	0:0	10	<
water	64:30	0:0	10	c
op	64:31	0:0	10	->
water	64:33	0:0	10	channels
forexpr	64:43	64:45	9	ch ++
water	64:43	0:0	10	ch
op	64:45	0:0	10	++
stmts	65:20	65:88	9	
call	65:20	65:87	10	fwrite
arg	65:27	65:64	11	decoded_frame->data[ch]+data_size*i
water	65:27	0:0	12	decoded_frame
op	65:40	0:0	12	->
water	65:42	0:0	12	data
op	65:46	0:0	12	[
water	65:47	0:0	12	ch
op	65:49	0:0	12	]
op	65:51	0:0	12	+
water	65:53	0:0	12	data_size
op	65:62	0:0	12	*
water	65:63	0:0	12	i
arg	65:66	65:67	11	1
water	65:66	0:0	12	1
arg	65:69	65:78	11	data_size
water	65:69	0:0	12	data_size
arg	65:80	65:87	11	outfile
water	65:80	0:0	12	outfile
water	65:88	0:0	10	;
water	66:8	0:0	6	}
water	67:8	0:0	4	avpkt
op	67:13	0:0	4	.
water	67:14	0:0	4	size
op	67:19	0:0	4	-=
water	67:22	0:0	4	len
water	67:25	0:0	4	;
water	68:8	0:0	4	avpkt
op	68:13	0:0	4	.
water	68:14	0:0	4	data
op	68:19	0:0	4	+=
water	68:22	0:0	4	len
water	68:25	0:0	4	;
water	69:8	0:0	4	avpkt
op	69:13	0:0	4	.
water	69:14	0:0	4	dts
op	69:18	0:0	4	=
water	70:8	0:0	4	avpkt
op	70:13	0:0	4	.
water	70:14	0:0	4	pts
op	70:18	0:0	4	=
water	70:20	0:0	4	AV_NOPTS_VALUE
water	70:34	0:0	4	;
if	71:8	82:8	4	(avpkt . size < AUDIO_REFILL_THRESH)
cond	71:12	71:25	5	avpkt . size < AUDIO_REFILL_THRESH
water	71:12	0:0	6	avpkt
op	71:17	0:0	6	.
water	71:18	0:0	6	size
op	71:23	0:0	6	<
water	71:25	0:0	6	AUDIO_REFILL_THRESH
stmts	71:46	82:8	5	
water	71:46	0:0	6	{
call	76:12	76:49	6	memmove
arg	76:20	76:25	7	inbuf
water	76:20	0:0	8	inbuf
arg	76:27	76:37	7	avpkt.data
water	76:27	0:0	8	avpkt
op	76:32	0:0	8	.
water	76:33	0:0	8	data
arg	76:39	76:49	7	avpkt.size
water	76:39	0:0	8	avpkt
op	76:44	0:0	8	.
water	76:45	0:0	8	size
water	76:50	0:0	6	;
water	77:12	0:0	6	avpkt
op	77:17	0:0	6	.
water	77:18	0:0	6	data
op	77:23	0:0	6	=
water	77:25	0:0	6	inbuf
water	77:30	0:0	6	;
water	78:12	0:0	6	len
op	78:16	0:0	6	=
call	78:18	79:56	6	fread
arg	78:24	78:47	7	avpkt.data+avpkt.size
water	78:24	0:0	8	avpkt
op	78:29	0:0	8	.
water	78:30	0:0	8	data
op	78:35	0:0	8	+
water	78:37	0:0	8	avpkt
op	78:42	0:0	8	.
water	78:43	0:0	8	size
arg	78:49	78:50	7	1
water	78:49	0:0	8	1
arg	79:24	79:53	7	AUDIO_INBUF_SIZE-avpkt.size
water	79:24	0:0	8	AUDIO_INBUF_SIZE
op	79:41	0:0	8	-
water	79:43	0:0	8	avpkt
op	79:48	0:0	8	.
water	79:49	0:0	8	size
arg	79:55	79:56	7	f
water	79:55	0:0	8	f
water	79:57	0:0	6	;
if	80:12	81:33	6	(len > 0)
cond	80:16	80:22	7	len > 0
water	80:16	0:0	8	len
op	80:20	0:0	8	>
water	80:22	0:0	8	0
stmts	81:16	81:33	7	
water	81:16	0:0	8	avpkt
op	81:21	0:0	8	.
water	81:22	0:0	8	size
op	81:27	0:0	8	+=
water	81:30	0:0	8	len
water	81:33	0:0	8	;
water	82:8	0:0	6	}
water	83:4	0:0	4	}
call	84:4	84:18	2	fclose
arg	84:11	84:18	3	outfile
water	84:11	0:0	4	outfile
water	84:19	0:0	2	;
call	85:4	85:12	2	fclose
arg	85:11	85:12	3	f
water	85:11	0:0	4	f
water	85:13	0:0	2	;
call	86:4	86:19	2	avcodec_close
arg	86:18	86:19	3	c
water	86:18	0:0	4	c
water	86:20	0:0	2	;
call	87:4	87:13	2	av_free
arg	87:12	87:13	3	c
water	87:12	0:0	4	c
water	87:14	0:0	2	;
call	88:4	88:32	2	av_frame_free
arg	88:18	88:32	3	&decoded_frame
op	88:18	0:0	4	&
water	88:19	0:0	4	decoded_frame
water	88:33	0:0	2	;
