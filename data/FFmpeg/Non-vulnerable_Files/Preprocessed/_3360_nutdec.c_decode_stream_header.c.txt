func	1:0	100:0	0	static int	decode_stream_header
params	1:31	0:0	1	
param	1:32	1:47	2	NUTContext *	nut
stmnts	0:0	99:14	1	
decl	3:4	3:33	2	AVFormatContext	*s
op	3:23	0:0	2	=
water	3:25	0:0	2	nut
op	3:28	0:0	2	->
water	3:30	0:0	2	avf
decl	4:4	4:30	2	AVIOContext	*bc
op	4:23	0:0	2	=
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	pb
decl	5:4	5:22	2	StreamContext	*stc
water	6:4	0:0	2	int
water	6:8	0:0	2	class
water	6:13	0:0	2	,
water	6:15	0:0	2	stream_id
water	6:24	0:0	2	,
water	6:26	0:0	2	ret
water	6:29	0:0	2	;
decl	7:4	7:21	2	uint64_t	tmp
water	7:16	0:0	2	,
decl	7:4	7:21	2	uint64_t	end
decl	8:4	8:23	2	AVStream	*st
op	8:17	0:0	2	=
water	8:19	0:0	2	NULL
water	9:4	0:0	2	end
op	9:9	0:0	2	=
call	9:11	9:56	2	get_packetheader
arg	9:28	9:31	3	nut
water	9:28	0:0	4	nut
arg	9:33	9:35	3	bc
water	9:33	0:0	4	bc
arg	9:37	9:38	3	1
water	9:37	0:0	4	1
arg	9:40	9:56	3	STREAM_STARTCODE
water	9:40	0:0	4	STREAM_STARTCODE
water	9:57	0:0	2	;
water	10:4	0:0	2	end
op	10:8	0:0	2	+=
call	10:11	10:23	2	avio_tell
arg	10:21	10:23	3	bc
water	10:21	0:0	4	bc
water	10:24	0:0	2	;
call	11:4	11:71	2	GET_V
arg	11:10	11:19	3	stream_id
water	11:10	0:0	4	stream_id
arg	11:21	11:71	3	tmp<s->nb_streams&&!nut->stream[tmp].time_base
water	11:21	0:0	4	tmp
op	11:25	0:0	4	<
water	11:27	0:0	4	s
op	11:28	0:0	4	->
water	11:30	0:0	4	nb_streams
op	11:41	0:0	4	&&
op	11:44	0:0	4	!
water	11:45	0:0	4	nut
op	11:48	0:0	4	->
water	11:50	0:0	4	stream
op	11:56	0:0	4	[
water	11:57	0:0	4	tmp
op	11:60	0:0	4	]
op	11:61	0:0	4	.
water	11:62	0:0	4	time_base
water	11:72	0:0	2	;
water	12:4	0:0	2	stc
op	12:8	0:0	2	=
op	12:10	0:0	2	&
water	12:11	0:0	2	nut
op	12:14	0:0	2	->
water	12:16	0:0	2	stream
op	12:22	0:0	2	[
water	12:23	0:0	2	stream_id
op	12:32	0:0	2	]
water	12:33	0:0	2	;
water	13:4	0:0	2	st
op	13:8	0:0	2	=
water	13:10	0:0	2	s
op	13:11	0:0	2	->
water	13:13	0:0	2	streams
op	13:20	0:0	2	[
water	13:21	0:0	2	stream_id
op	13:30	0:0	2	]
water	13:31	0:0	2	;
if	14:4	15:30	2	(! st)
cond	14:8	14:9	3	! st
op	14:8	0:0	4	!
water	14:9	0:0	4	st
stmts	15:8	15:30	3	
return	15:8	15:30	4	AVERROR(ENOMEM)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	ENOMEM
water	15:23	0:0	7	ENOMEM
water	16:4	0:0	2	class
op	16:25	0:0	2	=
call	16:27	16:46	2	ffio_read_varlen
arg	16:44	16:46	3	bc
water	16:44	0:0	4	bc
water	16:47	0:0	2	;
water	17:4	0:0	2	tmp
op	17:25	0:0	2	=
call	17:27	17:40	2	get_fourcc
arg	17:38	17:40	3	bc
water	17:38	0:0	4	bc
water	17:41	0:0	2	;
water	18:4	0:0	2	st
op	18:6	0:0	2	->
water	18:8	0:0	2	codec
op	18:13	0:0	2	->
water	18:15	0:0	2	codec_tag
op	18:25	0:0	2	=
water	18:27	0:0	2	tmp
water	18:30	0:0	2	;
switch	19:4	51:4	2	(class)
cond	19:12	19:12	3	class
water	19:12	0:0	4	class
stmts	19:19	51:4	3	
water	19:19	0:0	4	{
label	20:4	20:10	4	case 0 :
water	21:8	0:0	4	st
op	21:10	0:0	4	->
water	21:12	0:0	4	codec
op	21:17	0:0	4	->
water	21:19	0:0	4	codec_type
op	21:30	0:0	4	=
water	21:32	0:0	4	AVMEDIA_TYPE_VIDEO
water	21:50	0:0	4	;
water	22:8	0:0	4	st
op	22:10	0:0	4	->
water	22:12	0:0	4	codec
op	22:17	0:0	4	->
water	22:19	0:0	4	codec_id
op	22:30	0:0	4	=
call	22:32	28:51	4	av_codec_get_id
arg	22:48	27:49	5	(constAVCodecTag*const[]){ff_nut_video_tags,ff_codec_bmp_tags,ff_codec_movvideo_tags,0}
water	22:48	0:0	6	(
water	22:49	0:0	6	const
water	22:55	0:0	6	AVCodecTag
op	22:66	0:0	6	*
water	22:68	0:0	6	const
op	22:74	0:0	6	[
op	22:75	0:0	6	]
water	22:76	0:0	6	)
water	22:78	0:0	6	{
water	23:52	0:0	6	ff_nut_video_tags
water	23:69	0:0	6	,
water	24:52	0:0	6	ff_codec_bmp_tags
water	24:69	0:0	6	,
water	25:52	0:0	6	ff_codec_movvideo_tags
water	25:74	0:0	6	,
water	26:52	0:0	6	0
water	27:48	0:0	6	}
arg	28:48	28:51	5	tmp
water	28:48	0:0	6	tmp
water	28:52	0:0	4	;
break	29:8	29:13	4	
label	30:4	30:10	4	case 1 :
water	31:8	0:0	4	st
op	31:10	0:0	4	->
water	31:12	0:0	4	codec
op	31:17	0:0	4	->
water	31:19	0:0	4	codec_type
op	31:30	0:0	4	=
water	31:32	0:0	4	AVMEDIA_TYPE_AUDIO
water	31:50	0:0	4	;
water	32:8	0:0	4	st
op	32:10	0:0	4	->
water	32:12	0:0	4	codec
op	32:17	0:0	4	->
water	32:19	0:0	4	codec_id
op	32:30	0:0	4	=
call	32:32	38:51	4	av_codec_get_id
arg	32:48	37:49	5	(constAVCodecTag*const[]){ff_nut_audio_tags,ff_codec_wav_tags,ff_nut_audio_extra_tags,0}
water	32:48	0:0	6	(
water	32:49	0:0	6	const
water	32:55	0:0	6	AVCodecTag
op	32:66	0:0	6	*
water	32:68	0:0	6	const
op	32:74	0:0	6	[
op	32:75	0:0	6	]
water	32:76	0:0	6	)
water	32:78	0:0	6	{
water	33:52	0:0	6	ff_nut_audio_tags
water	33:69	0:0	6	,
water	34:52	0:0	6	ff_codec_wav_tags
water	34:69	0:0	6	,
water	35:52	0:0	6	ff_nut_audio_extra_tags
water	35:75	0:0	6	,
water	36:52	0:0	6	0
water	37:48	0:0	6	}
arg	38:48	38:51	5	tmp
water	38:48	0:0	6	tmp
water	38:52	0:0	4	;
break	39:8	39:13	4	
label	40:4	40:10	4	case 2 :
water	41:8	0:0	4	st
op	41:10	0:0	4	->
water	41:12	0:0	4	codec
op	41:17	0:0	4	->
water	41:19	0:0	4	codec_type
op	41:30	0:0	4	=
water	41:32	0:0	4	AVMEDIA_TYPE_SUBTITLE
water	41:53	0:0	4	;
water	42:8	0:0	4	st
op	42:10	0:0	4	->
water	42:12	0:0	4	codec
op	42:17	0:0	4	->
water	42:19	0:0	4	codec_id
op	42:30	0:0	4	=
call	42:32	42:73	4	ff_codec_get_id
arg	42:48	42:68	5	ff_nut_subtitle_tags
water	42:48	0:0	6	ff_nut_subtitle_tags
arg	42:70	42:73	5	tmp
water	42:70	0:0	6	tmp
water	42:74	0:0	4	;
break	43:8	43:13	4	
label	44:4	44:10	4	case 3 :
water	45:8	0:0	4	st
op	45:10	0:0	4	->
water	45:12	0:0	4	codec
op	45:17	0:0	4	->
water	45:19	0:0	4	codec_type
op	45:30	0:0	4	=
water	45:32	0:0	4	AVMEDIA_TYPE_DATA
water	45:49	0:0	4	;
water	46:8	0:0	4	st
op	46:10	0:0	4	->
water	46:12	0:0	4	codec
op	46:17	0:0	4	->
water	46:19	0:0	4	codec_id
op	46:30	0:0	4	=
call	46:32	46:69	4	ff_codec_get_id
arg	46:48	46:64	5	ff_nut_data_tags
water	46:48	0:0	6	ff_nut_data_tags
arg	46:66	46:69	5	tmp
water	46:66	0:0	6	tmp
water	46:70	0:0	4	;
break	47:8	47:13	4	
label	48:4	48:11	4	default :
call	49:8	49:68	4	av_log
arg	49:15	49:16	5	s
water	49:15	0:0	6	s
arg	49:18	49:30	5	AV_LOG_ERROR
water	49:18	0:0	6	AV_LOG_ERROR
arg	49:32	49:61	5	"unknown stream class (%d)\n"
water	49:32	0:0	6	"unknown stream class (%d)\n"
arg	49:63	49:68	5	class
water	49:63	0:0	6	class
water	49:69	0:0	4	;
return	50:8	50:30	4	AVERROR(ENOSYS)
call	50:15	50:29	5	AVERROR
arg	50:23	50:29	6	ENOSYS
water	50:23	0:0	7	ENOSYS
water	51:4	0:0	4	}
if	52:4	55:45	2	(class < 3 && st -> codec -> codec_id == AV_CODEC_ID_NONE)
cond	52:8	52:44	3	class < 3 && st -> codec -> codec_id == AV_CODEC_ID_NONE
water	52:8	0:0	4	class
op	52:14	0:0	4	<
water	52:16	0:0	4	3
op	52:18	0:0	4	&&
water	52:21	0:0	4	st
op	52:23	0:0	4	->
water	52:25	0:0	4	codec
op	52:30	0:0	4	->
water	52:32	0:0	4	codec_id
op	52:41	0:0	4	==
water	52:44	0:0	4	AV_CODEC_ID_NONE
stmts	53:8	55:45	3	
call	53:8	55:44	4	av_log
arg	53:15	53:16	5	s
water	53:15	0:0	6	s
arg	53:18	53:30	5	AV_LOG_ERROR
water	53:18	0:0	6	AV_LOG_ERROR
arg	54:15	54:66	5	"Unknown codec tag '0x%04x' for stream number %d\n"
water	54:15	0:0	6	"Unknown codec tag '0x%04x' for stream number %d\n"
arg	55:15	55:33	5	(unsignedint)tmp
water	55:15	0:0	6	(
water	55:16	0:0	6	unsigned
water	55:25	0:0	6	int
water	55:28	0:0	6	)
water	55:30	0:0	6	tmp
arg	55:35	55:44	5	stream_id
water	55:35	0:0	6	stream_id
water	55:45	0:0	4	;
call	56:4	56:55	2	GET_V
arg	56:10	56:27	3	stc->time_base_id
water	56:10	0:0	4	stc
op	56:13	0:0	4	->
water	56:15	0:0	4	time_base_id
arg	56:29	56:55	3	tmp<nut->time_base_count
water	56:29	0:0	4	tmp
op	56:33	0:0	4	<
water	56:35	0:0	4	nut
op	56:38	0:0	4	->
water	56:40	0:0	4	time_base_count
water	56:56	0:0	2	;
call	57:4	57:38	2	GET_V
arg	57:10	57:28	3	stc->msb_pts_shift
water	57:10	0:0	4	stc
op	57:13	0:0	4	->
water	57:15	0:0	4	msb_pts_shift
arg	57:30	57:38	3	tmp<16
water	57:30	0:0	4	tmp
op	57:34	0:0	4	<
water	57:36	0:0	4	16
water	57:39	0:0	2	;
water	58:4	0:0	2	stc
op	58:7	0:0	2	->
water	58:9	0:0	2	max_pts_distance
op	58:26	0:0	2	=
call	58:28	58:47	2	ffio_read_varlen
arg	58:45	58:47	3	bc
water	58:45	0:0	4	bc
water	58:48	0:0	2	;
call	59:4	59:39	2	GET_V
arg	59:10	59:27	3	stc->decode_delay
water	59:10	0:0	4	stc
op	59:13	0:0	4	->
water	59:15	0:0	4	decode_delay
arg	59:29	59:39	3	tmp<1000
water	59:29	0:0	4	tmp
op	59:33	0:0	4	<
water	59:35	0:0	4	1000
water	59:40	0:0	2	;
water	60:4	0:0	2	st
op	60:6	0:0	2	->
water	60:8	0:0	2	codec
op	60:13	0:0	2	->
water	60:15	0:0	2	has_b_frames
op	60:28	0:0	2	=
water	60:30	0:0	2	stc
op	60:33	0:0	2	->
water	60:35	0:0	2	decode_delay
water	60:47	0:0	2	;
call	61:4	61:23	2	ffio_read_varlen
arg	61:21	61:23	3	bc
water	61:21	0:0	4	bc
water	61:24	0:0	2	;
call	62:4	62:52	2	GET_V
arg	62:10	62:35	3	st->codec->extradata_size
water	62:10	0:0	4	st
op	62:12	0:0	4	->
water	62:14	0:0	4	codec
op	62:19	0:0	4	->
water	62:21	0:0	4	extradata_size
arg	62:37	62:52	3	tmp<(1<<30)
water	62:37	0:0	4	tmp
op	62:41	0:0	4	<
water	62:43	0:0	4	(
water	62:44	0:0	4	1
op	62:46	0:0	4	<<
water	62:49	0:0	4	30
water	62:51	0:0	4	)
water	62:53	0:0	2	;
if	63:4	66:4	2	(st -> codec -> extradata_size)
cond	63:8	63:19	3	st -> codec -> extradata_size
water	63:8	0:0	4	st
op	63:10	0:0	4	->
water	63:12	0:0	4	codec
op	63:17	0:0	4	->
water	63:19	0:0	4	extradata_size
stmts	63:35	66:4	3	
water	63:35	0:0	4	{
if	64:8	65:34	4	(ff_get_extradata (st -> codec ,bc ,st -> codec -> extradata_size ) < 0)
cond	64:12	64:73	5	ff_get_extradata (st -> codec ,bc ,st -> codec -> extradata_size ) < 0
call	64:12	64:69	6	ff_get_extradata
arg	64:29	64:38	7	st->codec
water	64:29	0:0	8	st
op	64:31	0:0	8	->
water	64:33	0:0	8	codec
arg	64:40	64:42	7	bc
water	64:40	0:0	8	bc
arg	64:44	64:69	7	st->codec->extradata_size
water	64:44	0:0	8	st
op	64:46	0:0	8	->
water	64:48	0:0	8	codec
op	64:53	0:0	8	->
water	64:55	0:0	8	extradata_size
op	64:71	0:0	6	<
water	64:73	0:0	6	0
stmts	65:12	65:34	5	
return	65:12	65:34	6	AVERROR(ENOMEM)
call	65:19	65:33	7	AVERROR
arg	65:27	65:33	8	ENOMEM
water	65:27	0:0	9	ENOMEM
water	66:4	0:0	4	}
if	67:4	79:4	2	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	67:8	67:33	3	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	67:8	0:0	4	st
op	67:10	0:0	4	->
water	67:12	0:0	4	codec
op	67:17	0:0	4	->
water	67:19	0:0	4	codec_type
op	67:30	0:0	4	==
water	67:33	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	67:53	79:4	3	
water	67:53	0:0	4	{
call	68:8	68:40	4	GET_V
arg	68:14	68:30	5	st->codec->width
water	68:14	0:0	6	st
op	68:16	0:0	6	->
water	68:18	0:0	6	codec
op	68:23	0:0	6	->
water	68:25	0:0	6	width
arg	68:33	68:40	5	tmp>0
water	68:33	0:0	6	tmp
op	68:37	0:0	6	>
water	68:39	0:0	6	0
water	68:41	0:0	4	;
call	69:8	69:40	4	GET_V
arg	69:14	69:31	5	st->codec->height
water	69:14	0:0	6	st
op	69:16	0:0	6	->
water	69:18	0:0	6	codec
op	69:23	0:0	6	->
water	69:25	0:0	6	height
arg	69:33	69:40	5	tmp>0
water	69:33	0:0	6	tmp
op	69:37	0:0	6	>
water	69:39	0:0	6	0
water	69:41	0:0	4	;
water	70:8	0:0	4	st
op	70:10	0:0	4	->
water	70:12	0:0	4	sample_aspect_ratio
op	70:31	0:0	4	.
water	70:32	0:0	4	num
op	70:36	0:0	4	=
call	70:38	70:57	4	ffio_read_varlen
arg	70:55	70:57	5	bc
water	70:55	0:0	6	bc
water	70:58	0:0	4	;
water	71:8	0:0	4	st
op	71:10	0:0	4	->
water	71:12	0:0	4	sample_aspect_ratio
op	71:31	0:0	4	.
water	71:32	0:0	4	den
op	71:36	0:0	4	=
call	71:38	71:57	4	ffio_read_varlen
arg	71:55	71:57	5	bc
water	71:55	0:0	6	bc
water	71:58	0:0	4	;
if	72:8	77:8	4	(( ! st -> sample_aspect_ratio . num ) != ( ! st -> sample_aspect_ratio . den ))
cond	72:12	72:75	5	( ! st -> sample_aspect_ratio . num ) != ( ! st -> sample_aspect_ratio . den )
water	72:12	0:0	6	(
op	72:13	0:0	6	!
water	72:14	0:0	6	st
op	72:16	0:0	6	->
water	72:18	0:0	6	sample_aspect_ratio
op	72:37	0:0	6	.
water	72:38	0:0	6	num
water	72:41	0:0	6	)
op	72:43	0:0	6	!=
water	72:46	0:0	6	(
op	72:47	0:0	6	!
water	72:48	0:0	6	st
op	72:50	0:0	6	->
water	72:52	0:0	6	sample_aspect_ratio
op	72:71	0:0	6	.
water	72:72	0:0	6	den
water	72:75	0:0	6	)
stmts	72:78	77:8	5	
water	72:78	0:0	6	{
call	73:12	74:75	6	av_log
arg	73:19	73:20	7	s
water	73:19	0:0	8	s
arg	73:22	73:34	7	AV_LOG_ERROR
water	73:22	0:0	8	AV_LOG_ERROR
arg	73:36	73:66	7	"invalid aspect ratio %d/%d\n"
water	73:36	0:0	8	"invalid aspect ratio %d/%d\n"
arg	74:19	74:46	7	st->sample_aspect_ratio.num
water	74:19	0:0	8	st
op	74:21	0:0	8	->
water	74:23	0:0	8	sample_aspect_ratio
op	74:42	0:0	8	.
water	74:43	0:0	8	num
arg	74:48	74:75	7	st->sample_aspect_ratio.den
water	74:48	0:0	8	st
op	74:50	0:0	8	->
water	74:52	0:0	8	sample_aspect_ratio
op	74:71	0:0	8	.
water	74:72	0:0	8	den
water	74:76	0:0	6	;
water	75:12	0:0	6	ret
op	75:16	0:0	6	=
water	75:18	0:0	6	AVERROR_INVALIDDATA
water	75:37	0:0	6	;
goto	76:12	76:21	6	fail
water	76:17	0:0	7	fail
water	77:8	0:0	6	}
call	78:8	78:27	4	ffio_read_varlen
arg	78:25	78:27	5	bc
water	78:25	0:0	6	bc
water	78:28	0:0	4	;
water	79:4	0:0	4	}
else	79:6	83:4	2
stmts	79:11	83:4	3	
if	79:11	83:4	4	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	79:15	79:40	5	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	79:15	0:0	6	st
op	79:17	0:0	6	->
water	79:19	0:0	6	codec
op	79:24	0:0	6	->
water	79:26	0:0	6	codec_type
op	79:37	0:0	6	==
water	79:40	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	79:60	83:4	5	
water	79:60	0:0	6	{
call	80:8	80:45	6	GET_V
arg	80:14	80:36	7	st->codec->sample_rate
water	80:14	0:0	8	st
op	80:16	0:0	8	->
water	80:18	0:0	8	codec
op	80:23	0:0	8	->
water	80:25	0:0	8	sample_rate
arg	80:38	80:45	7	tmp>0
water	80:38	0:0	8	tmp
op	80:42	0:0	8	>
water	80:44	0:0	8	0
water	80:46	0:0	6	;
call	81:8	81:27	6	ffio_read_varlen
arg	81:25	81:27	7	bc
water	81:25	0:0	8	bc
water	81:28	0:0	6	;
call	82:8	82:42	6	GET_V
arg	82:14	82:33	7	st->codec->channels
water	82:14	0:0	8	st
op	82:16	0:0	8	->
water	82:18	0:0	8	codec
op	82:23	0:0	8	->
water	82:25	0:0	8	channels
arg	82:35	82:42	7	tmp>0
water	82:35	0:0	8	tmp
op	82:39	0:0	8	>
water	82:41	0:0	8	0
water	82:43	0:0	6	;
water	83:4	0:0	6	}
if	84:4	89:4	2	(skip_reserved (bc ,end ) ||ffio_get_checksum (bc ))
cond	84:8	84:54	3	skip_reserved (bc ,end ) ||ffio_get_checksum (bc )
call	84:8	84:29	4	skip_reserved
arg	84:22	84:24	5	bc
water	84:22	0:0	6	bc
arg	84:26	84:29	5	end
water	84:26	0:0	6	end
op	84:31	0:0	4	||
call	84:34	84:54	4	ffio_get_checksum
arg	84:52	84:54	5	bc
water	84:52	0:0	6	bc
stmts	84:57	89:4	3	
water	84:57	0:0	4	{
call	85:8	86:64	4	av_log
arg	85:15	85:16	5	s
water	85:15	0:0	6	s
arg	85:18	85:30	5	AV_LOG_ERROR
water	85:18	0:0	6	AV_LOG_ERROR
arg	86:15	86:53	5	"stream header %d checksum mismatch\n"
water	86:15	0:0	6	"stream header %d checksum mismatch\n"
arg	86:55	86:64	5	stream_id
water	86:55	0:0	6	stream_id
water	86:65	0:0	4	;
water	87:8	0:0	4	ret
op	87:12	0:0	4	=
water	87:14	0:0	4	AVERROR_INVALIDDATA
water	87:33	0:0	4	;
goto	88:8	88:17	4	fail
water	88:13	0:0	5	fail
water	89:4	0:0	4	}
water	90:4	0:0	2	stc
op	90:7	0:0	2	->
water	90:9	0:0	2	time_base
op	90:19	0:0	2	=
op	90:21	0:0	2	&
water	90:22	0:0	2	nut
op	90:25	0:0	2	->
water	90:27	0:0	2	time_base
op	90:36	0:0	2	[
water	90:37	0:0	2	stc
op	90:40	0:0	2	->
water	90:42	0:0	2	time_base_id
op	90:54	0:0	2	]
water	90:55	0:0	2	;
call	91:4	92:43	2	avpriv_set_pts_info
arg	91:24	91:45	3	s->streams[stream_id]
water	91:24	0:0	4	s
op	91:25	0:0	4	->
water	91:27	0:0	4	streams
op	91:34	0:0	4	[
water	91:35	0:0	4	stream_id
op	91:44	0:0	4	]
arg	91:47	91:49	3	63
water	91:47	0:0	4	63
arg	91:51	91:70	3	stc->time_base->num
water	91:51	0:0	4	stc
op	91:54	0:0	4	->
water	91:56	0:0	4	time_base
op	91:65	0:0	4	->
water	91:67	0:0	4	num
arg	92:24	92:43	3	stc->time_base->den
water	92:24	0:0	4	stc
op	92:27	0:0	4	->
water	92:29	0:0	4	time_base
op	92:38	0:0	4	->
water	92:40	0:0	4	den
water	92:44	0:0	2	;
return	93:4	93:12	2	0
water	93:11	0:0	3	0
label	94:0	94:4	2	fail :
if	95:4	98:4	2	(st && st -> codec)
cond	95:8	95:18	3	st && st -> codec
water	95:8	0:0	4	st
op	95:11	0:0	4	&&
water	95:14	0:0	4	st
op	95:16	0:0	4	->
water	95:18	0:0	4	codec
stmts	95:25	98:4	3	
water	95:25	0:0	4	{
call	96:8	96:38	4	av_freep
arg	96:17	96:38	5	&st->codec->extradata
op	96:17	0:0	6	&
water	96:18	0:0	6	st
op	96:20	0:0	6	->
water	96:22	0:0	6	codec
op	96:27	0:0	6	->
water	96:29	0:0	6	extradata
water	96:39	0:0	4	;
water	97:8	0:0	4	st
op	97:10	0:0	4	->
water	97:12	0:0	4	codec
op	97:17	0:0	4	->
water	97:19	0:0	4	extradata_size
op	97:34	0:0	4	=
water	97:36	0:0	4	0
water	97:37	0:0	4	;
water	98:4	0:0	4	}
return	99:4	99:14	2	ret
water	99:11	0:0	3	ret
