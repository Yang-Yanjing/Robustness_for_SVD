func	1:0	88:0	0	static int	read_tfra
params	1:20	0:0	1	
param	1:21	1:42	2	struct Tracks *	tracks
param	1:44	1:59	2	int	start_index
param	1:61	1:75	2	AVIOContext *	f
stmnts	0:0	87:14	1	
decl	3:4	3:35	2	int	ret
op	3:12	0:0	2	=
water	3:14	0:0	2	AVERROR_EOF
water	3:25	0:0	2	,
decl	3:4	3:35	2	int	track_id
decl	4:4	4:34	2	int	version
water	4:15	0:0	2	,
decl	4:4	4:34	2	int	fieldlength
water	4:28	0:0	2	,
decl	4:4	4:34	2	int	i
water	4:31	0:0	2	,
decl	4:4	4:34	2	int	j
decl	5:4	5:32	2	int64_t	pos
op	5:18	0:0	2	=
call	5:20	5:31	3	avio_tell
arg	5:30	5:31	4	f
water	5:30	0:0	5	f
decl	6:4	6:32	2	uint32_t	size
op	6:18	0:0	2	=
call	6:20	6:31	3	avio_rb32
arg	6:30	6:31	4	f
water	6:30	0:0	5	f
decl	7:4	7:30	2	struct Track	*track
op	7:24	0:0	2	=
water	7:26	0:0	2	NULL
if	8:4	9:17	2	(avio_rb32 (f ) !=MKBETAG ('t' ,'f' ,'r' ,'a' ))
cond	8:8	8:50	3	avio_rb32 (f ) !=MKBETAG ('t' ,'f' ,'r' ,'a' )
call	8:8	8:19	4	avio_rb32
arg	8:18	8:19	5	f
water	8:18	0:0	6	f
op	8:21	0:0	4	!=
call	8:24	8:50	4	MKBETAG
arg	8:32	8:35	5	't'
water	8:32	0:0	6	't'
arg	8:37	8:40	5	'f'
water	8:37	0:0	6	'f'
arg	8:42	8:45	5	'r'
water	8:42	0:0	6	'r'
arg	8:47	8:50	5	'a'
water	8:47	0:0	6	'a'
stmts	9:8	9:17	3	
goto	9:8	9:17	4	fail
water	9:13	0:0	5	fail
water	10:4	0:0	2	version
op	10:12	0:0	2	=
call	10:14	10:23	2	avio_r8
arg	10:22	10:23	3	f
water	10:22	0:0	4	f
water	10:24	0:0	2	;
call	11:4	11:15	2	avio_rb24
arg	11:14	11:15	3	f
water	11:14	0:0	4	f
water	11:16	0:0	2	;
water	12:4	0:0	2	track_id
op	12:13	0:0	2	=
call	12:15	12:26	2	avio_rb32
arg	12:25	12:26	3	f
water	12:25	0:0	4	f
water	12:27	0:0	2	;
for	13:4	15:37	2	(i = start_index ;i < tracks -> nb_tracks && ! track;i ++)
forinit	13:9	13:24	3	i = start_index ;
water	13:9	0:0	4	i
op	13:11	0:0	4	=
water	13:13	0:0	4	start_index
water	13:24	0:0	4	;
cond	13:26	13:52	3	i < tracks -> nb_tracks && ! track
water	13:26	0:0	4	i
op	13:28	0:0	4	<
water	13:30	0:0	4	tracks
op	13:36	0:0	4	->
water	13:38	0:0	4	nb_tracks
op	13:48	0:0	4	&&
op	13:51	0:0	4	!
water	13:52	0:0	4	track
forexpr	13:59	13:60	3	i ++
water	13:59	0:0	4	i
op	13:60	0:0	4	++
stmts	14:8	15:37	3	
if	14:8	15:37	4	(tracks -> tracks [ i ] -> track_id == track_id)
cond	14:12	14:43	5	tracks -> tracks [ i ] -> track_id == track_id
water	14:12	0:0	6	tracks
op	14:18	0:0	6	->
water	14:20	0:0	6	tracks
op	14:26	0:0	6	[
water	14:27	0:0	6	i
op	14:28	0:0	6	]
op	14:29	0:0	6	->
water	14:31	0:0	6	track_id
op	14:40	0:0	6	==
water	14:43	0:0	6	track_id
stmts	15:12	15:37	5	
water	15:12	0:0	6	track
op	15:18	0:0	6	=
water	15:20	0:0	6	tracks
op	15:26	0:0	6	->
water	15:28	0:0	6	tracks
op	15:34	0:0	6	[
water	15:35	0:0	6	i
op	15:36	0:0	6	]
water	15:37	0:0	6	;
if	16:4	20:4	2	(! track)
cond	16:8	16:9	3	! track
op	16:8	0:0	4	!
water	16:9	0:0	4	track
stmts	16:16	20:4	3	
water	16:16	0:0	4	{
water	18:8	0:0	4	ret
op	18:12	0:0	4	=
water	18:14	0:0	4	0
water	18:15	0:0	4	;
goto	19:8	19:17	4	fail
water	19:13	0:0	5	fail
water	20:4	0:0	4	}
water	21:4	0:0	2	fieldlength
op	21:16	0:0	2	=
call	21:18	21:29	2	avio_rb32
arg	21:28	21:29	3	f
water	21:28	0:0	4	f
water	21:30	0:0	2	;
water	22:4	0:0	2	track
op	22:9	0:0	2	->
water	22:11	0:0	2	chunks
op	22:19	0:0	2	=
call	22:21	22:32	2	avio_rb32
arg	22:31	22:32	3	f
water	22:31	0:0	4	f
water	22:33	0:0	2	;
water	23:4	0:0	2	track
op	23:9	0:0	2	->
water	23:11	0:0	2	offsets
op	23:19	0:0	2	=
call	23:21	23:76	2	av_mallocz_array
arg	23:38	23:51	3	track->chunks
water	23:38	0:0	4	track
op	23:43	0:0	4	->
water	23:45	0:0	4	chunks
arg	23:53	23:76	3	sizeof(*track->offsets)
op	23:53	0:0	4	sizeof
water	23:59	0:0	4	(
op	23:60	0:0	4	*
water	23:61	0:0	4	track
op	23:66	0:0	4	->
water	23:68	0:0	4	offsets
water	23:75	0:0	4	)
water	23:77	0:0	2	;
if	24:4	28:4	2	(! track -> offsets)
cond	24:8	24:16	3	! track -> offsets
op	24:8	0:0	4	!
water	24:9	0:0	4	track
op	24:14	0:0	4	->
water	24:16	0:0	4	offsets
stmts	24:25	28:4	3	
water	24:25	0:0	4	{
water	25:8	0:0	4	track
op	25:13	0:0	4	->
water	25:15	0:0	4	chunks
op	25:22	0:0	4	=
water	25:24	0:0	4	0
water	25:25	0:0	4	;
water	26:8	0:0	4	ret
op	26:12	0:0	4	=
call	26:14	26:28	4	AVERROR
arg	26:22	26:28	5	ENOMEM
water	26:22	0:0	6	ENOMEM
water	26:29	0:0	4	;
goto	27:8	27:17	4	fail
water	27:13	0:0	5	fail
water	28:4	0:0	4	}
for	31:4	48:4	2	(i = 0 ;i < track -> chunks;i ++)
forinit	31:9	31:14	3	i = 0 ;
water	31:9	0:0	4	i
op	31:11	0:0	4	=
water	31:13	0:0	4	0
water	31:14	0:0	4	;
cond	31:16	31:27	3	i < track -> chunks
water	31:16	0:0	4	i
op	31:18	0:0	4	<
water	31:20	0:0	4	track
op	31:25	0:0	4	->
water	31:27	0:0	4	chunks
forexpr	31:35	31:36	3	i ++
water	31:35	0:0	4	i
op	31:36	0:0	4	++
stmts	31:40	48:4	3	
water	31:40	0:0	4	{
if	32:8	35:8	4	(version == 1)
cond	32:12	32:23	5	version == 1
water	32:12	0:0	6	version
op	32:20	0:0	6	==
water	32:23	0:0	6	1
stmts	32:26	35:8	5	
water	32:26	0:0	6	{
water	33:12	0:0	6	track
op	33:17	0:0	6	->
water	33:19	0:0	6	offsets
op	33:26	0:0	6	[
water	33:27	0:0	6	i
op	33:28	0:0	6	]
op	33:29	0:0	6	.
water	33:30	0:0	6	time
op	33:37	0:0	6	=
call	33:39	33:50	6	avio_rb64
arg	33:49	33:50	7	f
water	33:49	0:0	8	f
water	33:51	0:0	6	;
water	34:12	0:0	6	track
op	34:17	0:0	6	->
water	34:19	0:0	6	offsets
op	34:26	0:0	6	[
water	34:27	0:0	6	i
op	34:28	0:0	6	]
op	34:29	0:0	6	.
water	34:30	0:0	6	offset
op	34:37	0:0	6	=
call	34:39	34:50	6	avio_rb64
arg	34:49	34:50	7	f
water	34:49	0:0	8	f
water	34:51	0:0	6	;
water	35:8	0:0	6	}
else	35:10	38:8	4
stmts	35:15	38:8	5	
water	35:15	0:0	6	{
water	36:12	0:0	6	track
op	36:17	0:0	6	->
water	36:19	0:0	6	offsets
op	36:26	0:0	6	[
water	36:27	0:0	6	i
op	36:28	0:0	6	]
op	36:29	0:0	6	.
water	36:30	0:0	6	time
op	36:37	0:0	6	=
call	36:39	36:50	6	avio_rb32
arg	36:49	36:50	7	f
water	36:49	0:0	8	f
water	36:51	0:0	6	;
water	37:12	0:0	6	track
op	37:17	0:0	6	->
water	37:19	0:0	6	offsets
op	37:26	0:0	6	[
water	37:27	0:0	6	i
op	37:28	0:0	6	]
op	37:29	0:0	6	.
water	37:30	0:0	6	offset
op	37:37	0:0	6	=
call	37:39	37:50	6	avio_rb32
arg	37:49	37:50	7	f
water	37:49	0:0	8	f
water	37:51	0:0	6	;
water	38:8	0:0	6	}
for	39:8	40:22	4	(j = 0 ;j < ( ( fieldlength >> 4 ) & 3 ) + 1;j ++)
forinit	39:13	39:18	5	j = 0 ;
water	39:13	0:0	6	j
op	39:15	0:0	6	=
water	39:17	0:0	6	0
water	39:18	0:0	6	;
cond	39:20	39:51	5	j < ( ( fieldlength >> 4 ) & 3 ) + 1
water	39:20	0:0	6	j
op	39:22	0:0	6	<
water	39:24	0:0	6	(
water	39:25	0:0	6	(
water	39:26	0:0	6	fieldlength
op	39:38	0:0	6	>>
water	39:41	0:0	6	4
water	39:42	0:0	6	)
op	39:44	0:0	6	&
water	39:46	0:0	6	3
water	39:47	0:0	6	)
op	39:49	0:0	6	+
water	39:51	0:0	6	1
forexpr	39:54	39:55	5	j ++
water	39:54	0:0	6	j
op	39:55	0:0	6	++
stmts	40:12	40:22	5	
call	40:12	40:21	6	avio_r8
arg	40:20	40:21	7	f
water	40:20	0:0	8	f
water	40:22	0:0	6	;
for	41:8	42:22	4	(j = 0 ;j < ( ( fieldlength >> 2 ) & 3 ) + 1;j ++)
forinit	41:13	41:18	5	j = 0 ;
water	41:13	0:0	6	j
op	41:15	0:0	6	=
water	41:17	0:0	6	0
water	41:18	0:0	6	;
cond	41:20	41:51	5	j < ( ( fieldlength >> 2 ) & 3 ) + 1
water	41:20	0:0	6	j
op	41:22	0:0	6	<
water	41:24	0:0	6	(
water	41:25	0:0	6	(
water	41:26	0:0	6	fieldlength
op	41:38	0:0	6	>>
water	41:41	0:0	6	2
water	41:42	0:0	6	)
op	41:44	0:0	6	&
water	41:46	0:0	6	3
water	41:47	0:0	6	)
op	41:49	0:0	6	+
water	41:51	0:0	6	1
forexpr	41:54	41:55	5	j ++
water	41:54	0:0	6	j
op	41:55	0:0	6	++
stmts	42:12	42:22	5	
call	42:12	42:21	6	avio_r8
arg	42:20	42:21	7	f
water	42:20	0:0	8	f
water	42:22	0:0	6	;
for	43:8	44:22	4	(j = 0 ;j < ( ( fieldlength >> 0 ) & 3 ) + 1;j ++)
forinit	43:13	43:18	5	j = 0 ;
water	43:13	0:0	6	j
op	43:15	0:0	6	=
water	43:17	0:0	6	0
water	43:18	0:0	6	;
cond	43:20	43:51	5	j < ( ( fieldlength >> 0 ) & 3 ) + 1
water	43:20	0:0	6	j
op	43:22	0:0	6	<
water	43:24	0:0	6	(
water	43:25	0:0	6	(
water	43:26	0:0	6	fieldlength
op	43:38	0:0	6	>>
water	43:41	0:0	6	0
water	43:42	0:0	6	)
op	43:44	0:0	6	&
water	43:46	0:0	6	3
water	43:47	0:0	6	)
op	43:49	0:0	6	+
water	43:51	0:0	6	1
forexpr	43:54	43:55	5	j ++
water	43:54	0:0	6	j
op	43:55	0:0	6	++
stmts	44:12	44:22	5	
call	44:12	44:21	6	avio_r8
arg	44:20	44:21	7	f
water	44:20	0:0	8	f
water	44:22	0:0	6	;
if	45:8	47:71	4	(i > 0)
cond	45:12	45:16	5	i > 0
water	45:12	0:0	6	i
op	45:14	0:0	6	>
water	45:16	0:0	6	0
stmts	46:12	47:71	5	
water	46:12	0:0	6	track
op	46:17	0:0	6	->
water	46:19	0:0	6	offsets
op	46:26	0:0	6	[
water	46:27	0:0	6	i
op	46:29	0:0	6	-
water	46:31	0:0	6	1
op	46:32	0:0	6	]
op	46:33	0:0	6	.
water	46:34	0:0	6	duration
op	46:43	0:0	6	=
water	46:45	0:0	6	track
op	46:50	0:0	6	->
water	46:52	0:0	6	offsets
op	46:59	0:0	6	[
water	46:60	0:0	6	i
op	46:61	0:0	6	]
op	46:62	0:0	6	.
water	46:63	0:0	6	time
op	46:68	0:0	6	-
water	47:45	0:0	6	track
op	47:50	0:0	6	->
water	47:52	0:0	6	offsets
op	47:59	0:0	6	[
water	47:60	0:0	6	i
op	47:62	0:0	6	-
water	47:64	0:0	6	1
op	47:65	0:0	6	]
op	47:66	0:0	6	.
water	47:67	0:0	6	time
water	47:71	0:0	6	;
water	48:4	0:0	4	}
if	49:4	53:4	2	(track -> chunks > 0)
cond	49:8	49:24	3	track -> chunks > 0
water	49:8	0:0	4	track
op	49:13	0:0	4	->
water	49:15	0:0	4	chunks
op	49:22	0:0	4	>
water	49:24	0:0	4	0
stmts	49:27	53:4	3	
water	49:27	0:0	4	{
water	50:8	0:0	4	track
op	50:13	0:0	4	->
water	50:15	0:0	4	offsets
op	50:22	0:0	4	[
water	50:23	0:0	4	track
op	50:28	0:0	4	->
water	50:30	0:0	4	chunks
op	50:37	0:0	4	-
water	50:39	0:0	4	1
op	50:40	0:0	4	]
op	50:41	0:0	4	.
water	50:42	0:0	4	duration
op	50:51	0:0	4	=
water	50:53	0:0	4	track
op	50:58	0:0	4	->
water	50:60	0:0	4	offsets
op	50:67	0:0	4	[
water	50:68	0:0	4	0
op	50:69	0:0	4	]
op	50:70	0:0	4	.
water	50:71	0:0	4	time
op	50:76	0:0	4	+
water	51:53	0:0	4	track
op	51:58	0:0	4	->
water	51:60	0:0	4	duration
op	51:69	0:0	4	-
water	52:53	0:0	4	track
op	52:58	0:0	4	->
water	52:60	0:0	4	offsets
op	52:67	0:0	4	[
water	52:68	0:0	4	track
op	52:73	0:0	4	->
water	52:75	0:0	4	chunks
op	52:82	0:0	4	-
water	52:84	0:0	4	1
op	52:85	0:0	4	]
op	52:86	0:0	4	.
water	52:87	0:0	4	time
water	52:91	0:0	4	;
water	53:4	0:0	4	}
for	55:4	62:4	2	(i = 0 ;i < track -> chunks;i ++)
forinit	55:9	55:14	3	i = 0 ;
water	55:9	0:0	4	i
op	55:11	0:0	4	=
water	55:13	0:0	4	0
water	55:14	0:0	4	;
cond	55:16	55:27	3	i < track -> chunks
water	55:16	0:0	4	i
op	55:18	0:0	4	<
water	55:20	0:0	4	track
op	55:25	0:0	4	->
water	55:27	0:0	4	chunks
forexpr	55:35	55:36	3	i ++
water	55:35	0:0	4	i
op	55:36	0:0	4	++
stmts	55:40	62:4	3	
water	55:40	0:0	4	{
decl	56:8	56:74	4	int64_t	duration
op	56:25	0:0	4	=
call	56:27	56:73	5	read_moof_duration
arg	56:46	56:47	6	f
water	56:46	0:0	7	f
arg	56:49	56:73	6	track->offsets[i].offset
water	56:49	0:0	7	track
op	56:54	0:0	7	->
water	56:56	0:0	7	offsets
op	56:63	0:0	7	[
water	56:64	0:0	7	i
op	56:65	0:0	7	]
op	56:66	0:0	7	.
water	56:67	0:0	7	offset
if	57:8	61:8	4	(duration > 0 &&abs (duration - track -> offsets [ i ] . duration ) > 3)
cond	57:12	57:73	5	duration > 0 &&abs (duration - track -> offsets [ i ] . duration ) > 3
water	57:12	0:0	6	duration
op	57:21	0:0	6	>
water	57:23	0:0	6	0
op	57:25	0:0	6	&&
call	57:28	57:69	6	abs
arg	57:32	57:69	7	duration-track->offsets[i].duration
water	57:32	0:0	8	duration
op	57:41	0:0	8	-
water	57:43	0:0	8	track
op	57:48	0:0	8	->
water	57:50	0:0	8	offsets
op	57:57	0:0	8	[
water	57:58	0:0	8	i
op	57:59	0:0	8	]
op	57:60	0:0	8	.
water	57:61	0:0	8	duration
op	57:71	0:0	6	>
water	57:73	0:0	6	3
stmts	57:76	61:8	5	
water	57:76	0:0	6	{
water	60:12	0:0	6	track
op	60:17	0:0	6	->
water	60:19	0:0	6	offsets
op	60:26	0:0	6	[
water	60:27	0:0	6	i
op	60:28	0:0	6	]
op	60:29	0:0	6	.
water	60:30	0:0	6	duration
op	60:39	0:0	6	=
water	60:41	0:0	6	duration
water	60:49	0:0	6	;
water	61:8	0:0	6	}
water	62:4	0:0	4	}
if	63:4	83:4	2	(track -> chunks > 0)
cond	63:8	63:24	3	track -> chunks > 0
water	63:8	0:0	4	track
op	63:13	0:0	4	->
water	63:15	0:0	4	chunks
op	63:22	0:0	4	>
water	63:24	0:0	4	0
stmts	63:27	83:4	3	
water	63:27	0:0	4	{
if	64:8	82:8	4	(track -> offsets [ track -> chunks - 1 ] . duration <= 0)
cond	64:12	64:58	5	track -> offsets [ track -> chunks - 1 ] . duration <= 0
water	64:12	0:0	6	track
op	64:17	0:0	6	->
water	64:19	0:0	6	offsets
op	64:26	0:0	6	[
water	64:27	0:0	6	track
op	64:32	0:0	6	->
water	64:34	0:0	6	chunks
op	64:41	0:0	6	-
water	64:43	0:0	6	1
op	64:44	0:0	6	]
op	64:45	0:0	6	.
water	64:46	0:0	6	duration
op	64:55	0:0	6	<=
water	64:58	0:0	6	0
stmts	64:61	82:8	5	
water	64:61	0:0	6	{
call	65:12	68:62	6	fprintf
arg	65:20	65:26	7	stderr
water	65:20	0:0	8	stderr
arg	65:28	67:32	7	"Calculated last chunk duration for track %d ""was non-positive (%"PRId64"), probably due to missing ""fragments "
water	65:28	0:0	8	"Calculated last chunk duration for track %d "
water	66:20	0:0	8	"was non-positive (%"
water	66:41	0:0	8	PRId64
water	66:47	0:0	8	"), probably due to missing "
water	67:20	0:0	8	"fragments "
arg	67:34	67:49	7	track->track_id
water	67:34	0:0	8	track
op	67:39	0:0	8	->
water	67:41	0:0	8	track_id
arg	68:20	68:62	7	track->offsets[track->chunks-1].duration
water	68:20	0:0	8	track
op	68:25	0:0	8	->
water	68:27	0:0	8	offsets
op	68:34	0:0	8	[
water	68:35	0:0	8	track
op	68:40	0:0	8	->
water	68:42	0:0	8	chunks
op	68:49	0:0	8	-
water	68:51	0:0	8	1
op	68:52	0:0	8	]
op	68:53	0:0	8	.
water	68:54	0:0	8	duration
water	68:63	0:0	6	;
if	69:12	72:12	6	(track -> chunks > 1)
cond	69:16	69:32	7	track -> chunks > 1
water	69:16	0:0	8	track
op	69:21	0:0	8	->
water	69:23	0:0	8	chunks
op	69:30	0:0	8	>
water	69:32	0:0	8	1
stmts	69:35	72:12	7	
water	69:35	0:0	8	{
water	70:16	0:0	8	track
op	70:21	0:0	8	->
water	70:23	0:0	8	offsets
op	70:30	0:0	8	[
water	70:31	0:0	8	track
op	70:36	0:0	8	->
water	70:38	0:0	8	chunks
op	70:45	0:0	8	-
water	70:47	0:0	8	1
op	70:48	0:0	8	]
op	70:49	0:0	8	.
water	70:50	0:0	8	duration
op	70:59	0:0	8	=
water	71:20	0:0	8	track
op	71:25	0:0	8	->
water	71:27	0:0	8	offsets
op	71:34	0:0	8	[
water	71:35	0:0	8	track
op	71:40	0:0	8	->
water	71:42	0:0	8	chunks
op	71:49	0:0	8	-
water	71:51	0:0	8	2
op	71:52	0:0	8	]
op	71:53	0:0	8	.
water	71:54	0:0	8	duration
water	71:62	0:0	8	;
water	72:12	0:0	8	}
else	72:14	74:12	6
stmts	72:19	74:12	7	
water	72:19	0:0	8	{
water	73:16	0:0	8	track
op	73:21	0:0	8	->
water	73:23	0:0	8	offsets
op	73:30	0:0	8	[
water	73:31	0:0	8	track
op	73:36	0:0	8	->
water	73:38	0:0	8	chunks
op	73:45	0:0	8	-
water	73:47	0:0	8	1
op	73:48	0:0	8	]
op	73:49	0:0	8	.
water	73:50	0:0	8	duration
op	73:59	0:0	8	=
water	73:61	0:0	8	1
water	73:62	0:0	8	;
water	74:12	0:0	8	}
call	75:12	76:62	6	fprintf
arg	75:20	75:26	7	stderr
water	75:20	0:0	8	stderr
arg	75:28	75:54	7	"corrected to %"PRId64"\n"
water	75:28	0:0	8	"corrected to %"
water	75:44	0:0	8	PRId64
water	75:50	0:0	8	"\n"
arg	76:20	76:62	7	track->offsets[track->chunks-1].duration
water	76:20	0:0	8	track
op	76:25	0:0	8	->
water	76:27	0:0	8	offsets
op	76:34	0:0	8	[
water	76:35	0:0	8	track
op	76:40	0:0	8	->
water	76:42	0:0	8	chunks
op	76:49	0:0	8	-
water	76:51	0:0	8	1
op	76:52	0:0	8	]
op	76:53	0:0	8	.
water	76:54	0:0	8	duration
water	76:63	0:0	6	;
water	77:12	0:0	6	track
op	77:17	0:0	6	->
water	77:19	0:0	6	duration
op	77:28	0:0	6	=
water	77:30	0:0	6	track
op	77:35	0:0	6	->
water	77:37	0:0	6	offsets
op	77:44	0:0	6	[
water	77:45	0:0	6	track
op	77:50	0:0	6	->
water	77:52	0:0	6	chunks
op	77:59	0:0	6	-
water	77:61	0:0	6	1
op	77:62	0:0	6	]
op	77:63	0:0	6	.
water	77:64	0:0	6	time
op	77:69	0:0	6	+
water	78:30	0:0	6	track
op	78:35	0:0	6	->
water	78:37	0:0	6	offsets
op	78:44	0:0	6	[
water	78:45	0:0	6	track
op	78:50	0:0	6	->
water	78:52	0:0	6	chunks
op	78:59	0:0	6	-
water	78:61	0:0	6	1
op	78:62	0:0	6	]
op	78:63	0:0	6	.
water	78:64	0:0	6	duration
op	78:73	0:0	6	-
water	79:30	0:0	6	track
op	79:35	0:0	6	->
water	79:37	0:0	6	offsets
op	79:44	0:0	6	[
water	79:45	0:0	6	0
op	79:46	0:0	6	]
op	79:47	0:0	6	.
water	79:48	0:0	6	time
water	79:52	0:0	6	;
call	80:12	81:35	6	fprintf
arg	80:20	80:26	7	stderr
water	80:20	0:0	8	stderr
arg	80:28	80:69	7	"Track duration corrected to %"PRId64"\n"
water	80:28	0:0	8	"Track duration corrected to %"
water	80:59	0:0	8	PRId64
water	80:65	0:0	8	"\n"
arg	81:20	81:35	7	track->duration
water	81:20	0:0	8	track
op	81:25	0:0	8	->
water	81:27	0:0	8	duration
water	81:36	0:0	6	;
water	82:8	0:0	6	}
water	83:4	0:0	4	}
water	84:4	0:0	2	ret
op	84:8	0:0	2	=
water	84:10	0:0	2	0
water	84:11	0:0	2	;
label	85:0	85:4	2	fail :
call	86:4	86:37	2	avio_seek
arg	86:14	86:15	3	f
water	86:14	0:0	4	f
arg	86:17	86:27	3	pos+size
water	86:17	0:0	4	pos
op	86:21	0:0	4	+
water	86:23	0:0	4	size
arg	86:29	86:37	3	SEEK_SET
water	86:29	0:0	4	SEEK_SET
water	86:38	0:0	2	;
return	87:4	87:14	2	ret
water	87:11	0:0	3	ret
