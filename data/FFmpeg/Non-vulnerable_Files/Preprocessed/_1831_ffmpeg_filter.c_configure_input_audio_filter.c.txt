func	1:0	52:0	0	static int	configure_input_audio_filter
params	1:39	0:0	1	
param	1:40	1:55	2	FilterGraph *	fg
param	1:57	1:77	2	InputFilter *	ifilter
param	2:40	2:57	2	AVFilterInOut *	in
stmnts	0:0	51:26	1	
decl	4:4	4:32	2	AVFilterContext	*last_filter
decl	5:4	5:66	2	const AVFilter	*abuffer_filt
op	5:33	0:0	2	=
call	5:35	5:65	3	avfilter_get_by_name
arg	5:56	5:65	4	"abuffer"
water	5:56	0:0	5	"abuffer"
decl	6:4	6:35	2	InputStream	*ist
op	6:21	0:0	2	=
water	6:23	0:0	2	ifilter
op	6:30	0:0	2	->
water	6:32	0:0	2	ist
decl	7:4	7:51	2	InputFile	*f
op	7:21	0:0	2	=
water	7:23	0:0	2	input_files
op	7:34	0:0	2	[
water	7:35	0:0	2	ist
op	7:38	0:0	2	->
water	7:40	0:0	2	file_index
op	7:50	0:0	2	]
decl	8:4	8:17	2	AVBPrint	args
decl	9:4	9:18	2	char	name[255]
decl	10:4	10:24	2	int	ret
water	10:11	0:0	2	,
decl	10:4	10:24	2	int	pad_idx
op	10:21	0:0	2	=
water	10:23	0:0	2	0
decl	11:4	11:24	2	int64_t	tsoffset
op	11:21	0:0	2	=
water	11:23	0:0	2	0
if	12:4	15:4	2	(ist -> dec_ctx -> codec_type != AVMEDIA_TYPE_AUDIO)
cond	12:8	12:36	3	ist -> dec_ctx -> codec_type != AVMEDIA_TYPE_AUDIO
water	12:8	0:0	4	ist
op	12:11	0:0	4	->
water	12:13	0:0	4	dec_ctx
op	12:20	0:0	4	->
water	12:22	0:0	4	codec_type
op	12:33	0:0	4	!=
water	12:36	0:0	4	AVMEDIA_TYPE_AUDIO
stmts	12:56	15:4	3	
water	12:56	0:0	4	{
call	13:8	13:85	4	av_log
arg	13:15	13:19	5	NULL
water	13:15	0:0	6	NULL
arg	13:21	13:33	5	AV_LOG_ERROR
water	13:21	0:0	6	AV_LOG_ERROR
arg	13:35	13:85	5	"Cannot connect audio filter to non audio input\n"
water	13:35	0:0	6	"Cannot connect audio filter to non audio input\n"
water	13:86	0:0	4	;
return	14:8	14:30	4	AVERROR(EINVAL)
call	14:15	14:29	5	AVERROR
arg	14:23	14:29	6	EINVAL
water	14:23	0:0	7	EINVAL
water	15:4	0:0	4	}
call	16:4	16:53	2	av_bprint_init
arg	16:19	16:24	3	&args
op	16:19	0:0	4	&
water	16:20	0:0	4	args
arg	16:26	16:27	3	0
water	16:26	0:0	4	0
arg	16:29	16:53	3	AV_BPRINT_SIZE_AUTOMATIC
water	16:29	0:0	4	AV_BPRINT_SIZE_AUTOMATIC
water	16:54	0:0	2	;
call	17:4	20:52	2	av_bprintf
arg	17:15	17:20	3	&args
op	17:15	0:0	4	&
water	17:16	0:0	4	args
arg	17:22	17:68	3	"time_base=%d/%d:sample_rate=%d:sample_fmt=%s"
water	17:22	0:0	4	"time_base=%d/%d:sample_rate=%d:sample_fmt=%s"
arg	18:13	18:14	3	1
water	18:13	0:0	4	1
arg	18:16	18:36	3	ifilter->sample_rate
water	18:16	0:0	4	ifilter
op	18:23	0:0	4	->
water	18:25	0:0	4	sample_rate
arg	19:13	19:33	3	ifilter->sample_rate
water	19:13	0:0	4	ifilter
op	19:20	0:0	4	->
water	19:22	0:0	4	sample_rate
arg	20:13	20:52	3	av_get_sample_fmt_name(ifilter->format)
call	20:13	20:51	4	av_get_sample_fmt_name
arg	20:36	20:51	5	ifilter->format
water	20:36	0:0	6	ifilter
op	20:43	0:0	6	->
water	20:45	0:0	6	format
water	20:53	0:0	2	;
if	21:4	23:43	2	(ifilter -> channel_layout)
cond	21:8	21:17	3	ifilter -> channel_layout
water	21:8	0:0	4	ifilter
op	21:15	0:0	4	->
water	21:17	0:0	4	channel_layout
stmts	22:8	23:43	3	
call	22:8	23:42	4	av_bprintf
arg	22:19	22:24	5	&args
op	22:19	0:0	6	&
water	22:20	0:0	6	args
arg	22:26	22:53	5	":channel_layout=0x%"PRIx64
water	22:26	0:0	6	":channel_layout=0x%"
water	22:47	0:0	6	PRIx64
arg	23:19	23:42	5	ifilter->channel_layout
water	23:19	0:0	6	ifilter
op	23:26	0:0	6	->
water	23:28	0:0	6	channel_layout
water	23:43	0:0	4	;
else	24:4	25:60	2
stmts	25:8	25:60	3	
call	25:8	25:59	4	av_bprintf
arg	25:19	25:24	5	&args
op	25:19	0:0	6	&
water	25:20	0:0	6	args
arg	25:26	25:40	5	":channels=%d"
water	25:26	0:0	6	":channels=%d"
arg	25:42	25:59	5	ifilter->channels
water	25:42	0:0	6	ifilter
op	25:49	0:0	6	->
water	25:51	0:0	6	channels
water	25:60	0:0	4	;
call	26:4	27:44	2	snprintf
arg	26:13	26:17	3	name
water	26:13	0:0	4	name
arg	26:19	26:31	3	sizeof(name)
op	26:19	0:0	4	sizeof
water	26:25	0:0	4	(
water	26:26	0:0	4	name
water	26:30	0:0	4	)
arg	26:33	26:52	3	"graph_%d_in_%d_%d"
water	26:33	0:0	4	"graph_%d_in_%d_%d"
arg	26:54	26:63	3	fg->index
water	26:54	0:0	4	fg
op	26:56	0:0	4	->
water	26:58	0:0	4	index
arg	27:13	27:28	3	ist->file_index
water	27:13	0:0	4	ist
op	27:16	0:0	4	->
water	27:18	0:0	4	file_index
arg	27:30	27:44	3	ist->st->index
water	27:30	0:0	4	ist
op	27:33	0:0	4	->
water	27:35	0:0	4	st
op	27:37	0:0	4	->
water	27:39	0:0	4	index
water	27:45	0:0	2	;
if	28:4	31:18	2	(( ret =avfilter_graph_create_filter (& ifilter -> filter ,abuffer_filt ,name ,args . str ,NULL ,fg -> graph ) ) < 0)
cond	28:8	30:58	3	( ret =avfilter_graph_create_filter (& ifilter -> filter ,abuffer_filt ,name ,args . str ,NULL ,fg -> graph ) ) < 0
water	28:8	0:0	4	(
water	28:9	0:0	4	ret
op	28:13	0:0	4	=
call	28:15	30:53	4	avfilter_graph_create_filter
arg	28:44	28:60	5	&ifilter->filter
op	28:44	0:0	6	&
water	28:45	0:0	6	ifilter
op	28:52	0:0	6	->
water	28:54	0:0	6	filter
arg	28:62	28:74	5	abuffer_filt
water	28:62	0:0	6	abuffer_filt
arg	29:44	29:48	5	name
water	29:44	0:0	6	name
arg	29:50	29:58	5	args.str
water	29:50	0:0	6	args
op	29:54	0:0	6	.
water	29:55	0:0	6	str
arg	29:60	29:64	5	NULL
water	29:60	0:0	6	NULL
arg	30:44	30:53	5	fg->graph
water	30:44	0:0	6	fg
op	30:46	0:0	6	->
water	30:48	0:0	6	graph
water	30:54	0:0	4	)
op	30:56	0:0	4	<
water	30:58	0:0	4	0
stmts	31:8	31:18	3	
return	31:8	31:18	4	ret
water	31:15	0:0	5	ret
water	32:4	0:0	2	last_filter
op	32:16	0:0	2	=
water	32:18	0:0	2	ifilter
op	32:25	0:0	2	->
water	32:27	0:0	2	filter
water	32:33	0:0	2	;
decl	34:4	34:29	2	AVFilterContext	*filt_ctx
call	36:4	37:56	2	av_log
arg	36:11	36:15	3	NULL
water	36:11	0:0	4	NULL
arg	36:17	36:28	3	AV_LOG_INFO
water	36:17	0:0	4	AV_LOG_INFO
arg	36:30	37:51	3	opt_name" is forwarded to lavfi ""similarly to -af "filter_name"=%s.\n"
water	36:30	0:0	4	opt_name
water	36:39	0:0	4	" is forwarded to lavfi "
water	37:11	0:0	4	"similarly to -af "
water	37:31	0:0	4	filter_name
water	37:43	0:0	4	"=%s.\n"
arg	37:53	37:56	3	arg
water	37:53	0:0	4	arg
water	37:57	0:0	2	;
call	39:4	40:71	2	snprintf
arg	39:13	39:17	3	name
water	39:13	0:0	4	name
arg	39:19	39:31	3	sizeof(name)
op	39:19	0:0	4	sizeof
water	39:25	0:0	4	(
water	39:26	0:0	4	name
water	39:30	0:0	4	)
arg	39:33	39:55	3	"graph_%d_%s_in_%d_%d"
water	39:33	0:0	4	"graph_%d_%s_in_%d_%d"
arg	40:16	40:25	3	fg->index
water	40:16	0:0	4	fg
op	40:18	0:0	4	->
water	40:20	0:0	4	index
arg	40:27	40:38	3	filter_name
water	40:27	0:0	4	filter_name
arg	40:40	40:55	3	ist->file_index
water	40:40	0:0	4	ist
op	40:43	0:0	4	->
water	40:45	0:0	4	file_index
arg	40:57	40:71	3	ist->st->index
water	40:57	0:0	4	ist
op	40:60	0:0	4	->
water	40:62	0:0	4	st
op	40:64	0:0	4	->
water	40:66	0:0	4	index
water	40:72	0:0	2	;
water	41:4	0:0	2	ret
op	41:8	0:0	2	=
call	41:10	43:65	2	avfilter_graph_create_filter
arg	41:39	41:48	3	&filt_ctx
op	41:39	0:0	4	&
water	41:40	0:0	4	filt_ctx
arg	42:39	42:72	3	avfilter_get_by_name(filter_name)
call	42:39	42:71	4	avfilter_get_by_name
arg	42:60	42:71	5	filter_name
water	42:60	0:0	6	filter_name
arg	43:39	43:43	3	name
water	43:39	0:0	4	name
arg	43:45	43:48	3	arg
water	43:45	0:0	4	arg
arg	43:50	43:54	3	NULL
water	43:50	0:0	4	NULL
arg	43:56	43:65	3	fg->graph
water	43:56	0:0	4	fg
op	43:58	0:0	4	->
water	43:60	0:0	4	graph
water	43:66	0:0	2	;
if	44:4	45:18	2	(ret < 0)
cond	44:8	44:14	3	ret < 0
water	44:8	0:0	4	ret
op	44:12	0:0	4	<
water	44:14	0:0	4	0
stmts	45:8	45:18	3	
return	45:8	45:18	4	ret
water	45:15	0:0	5	ret
water	47:4	0:0	2	ret
op	47:8	0:0	2	=
call	47:10	47:51	2	avfilter_link
arg	47:24	47:35	3	last_filter
water	47:24	0:0	4	last_filter
arg	47:37	47:38	3	0
water	47:37	0:0	4	0
arg	47:40	47:48	3	filt_ctx
water	47:40	0:0	4	filt_ctx
arg	47:50	47:51	3	0
water	47:50	0:0	4	0
water	47:52	0:0	2	;
if	48:4	49:18	2	(ret < 0)
cond	48:8	48:14	3	ret < 0
water	48:8	0:0	4	ret
op	48:12	0:0	4	<
water	48:14	0:0	4	0
stmts	49:8	49:18	3	
return	49:8	49:18	4	ret
water	49:15	0:0	5	ret
water	51:4	0:0	2	last_filter
op	51:16	0:0	2	=
water	51:18	0:0	2	filt_ctx
water	51:26	0:0	2	;
decl	54:8	54:28	0	char	args[256]
op	54:23	0:0	0	=
water	54:25	0:0	0	{
water	54:26	0:0	0	0
water	54:27	0:0	0	}
decl	75:8	75:22	0	char	args[256]
