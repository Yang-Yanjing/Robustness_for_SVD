func	1:0	76:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:57	2	AVFrame *	in
stmnts	0:0	75:40	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:29	2	SPPContext	*s
op	4:18	0:0	2	=
water	4:20	0:0	2	ctx
op	4:23	0:0	2	->
water	4:25	0:0	2	priv
decl	5:4	5:43	2	AVFilterLink	*outlink
op	5:26	0:0	2	=
water	5:28	0:0	2	ctx
op	5:31	0:0	2	->
water	5:33	0:0	2	outputs
op	5:40	0:0	2	[
water	5:41	0:0	2	0
op	5:42	0:0	2	]
decl	6:4	6:21	2	AVFrame	*out
op	6:17	0:0	2	=
water	6:19	0:0	2	in
decl	7:4	7:21	2	int	qp_stride
op	7:18	0:0	2	=
water	7:20	0:0	2	0
decl	8:4	8:33	2	const int8_t	*qp_table
op	8:27	0:0	2	=
water	8:29	0:0	2	NULL
decl	9:4	9:72	2	const AVPixFmtDescriptor	*desc
op	9:35	0:0	2	=
call	9:37	9:71	3	av_pix_fmt_desc_get
arg	9:57	9:71	4	inlink->format
water	9:57	0:0	5	inlink
op	9:63	0:0	5	->
water	9:65	0:0	5	format
decl	10:4	10:52	2	const int	depth
op	10:20	0:0	2	=
water	10:22	0:0	2	desc
op	10:26	0:0	2	->
water	10:28	0:0	2	comp
op	10:32	0:0	2	[
water	10:33	0:0	2	0
op	10:34	0:0	2	]
op	10:35	0:0	2	.
water	10:36	0:0	2	depth_minus1
op	10:49	0:0	2	+
water	10:51	0:0	2	1
if	15:4	39:4	2	(! s -> qp)
cond	15:8	15:12	3	! s -> qp
op	15:8	0:0	4	!
water	15:9	0:0	4	s
op	15:10	0:0	4	->
water	15:12	0:0	4	qp
stmts	15:16	39:4	3	
water	15:16	0:0	4	{
water	16:8	0:0	4	qp_table
op	16:17	0:0	4	=
call	16:19	16:72	4	av_frame_get_qp_table
arg	16:41	16:43	5	in
water	16:41	0:0	6	in
arg	16:45	16:55	5	&qp_stride
op	16:45	0:0	6	&
water	16:46	0:0	6	qp_stride
arg	16:57	16:72	5	&s->qscale_type
op	16:57	0:0	6	&
water	16:58	0:0	6	s
op	16:59	0:0	6	->
water	16:61	0:0	6	qscale_type
water	16:73	0:0	4	;
if	17:8	38:8	4	(qp_table && ! s -> use_bframe_qp && in -> pict_type != AV_PICTURE_TYPE_B)
cond	17:12	17:62	5	qp_table && ! s -> use_bframe_qp && in -> pict_type != AV_PICTURE_TYPE_B
water	17:12	0:0	6	qp_table
op	17:21	0:0	6	&&
op	17:24	0:0	6	!
water	17:25	0:0	6	s
op	17:26	0:0	6	->
water	17:28	0:0	6	use_bframe_qp
op	17:42	0:0	6	&&
water	17:45	0:0	6	in
op	17:47	0:0	6	->
water	17:49	0:0	6	pict_type
op	17:59	0:0	6	!=
water	17:62	0:0	6	AV_PICTURE_TYPE_B
stmts	17:81	38:8	5	
water	17:81	0:0	6	{
decl	18:12	18:20	6	int	w
water	18:17	0:0	6	,
decl	18:12	18:20	6	int	h
if	21:12	24:12	6	(! qp_stride)
cond	21:16	21:17	7	! qp_stride
op	21:16	0:0	8	!
water	21:17	0:0	8	qp_stride
stmts	21:28	24:12	7	
water	21:28	0:0	8	{
water	22:16	0:0	8	w
op	22:18	0:0	8	=
call	22:20	22:47	8	FF_CEIL_RSHIFT
arg	22:35	22:44	9	inlink->w
water	22:35	0:0	10	inlink
op	22:41	0:0	10	->
water	22:43	0:0	10	w
arg	22:46	22:47	9	4
water	22:46	0:0	10	4
water	22:48	0:0	8	;
water	23:16	0:0	8	h
op	23:18	0:0	8	=
water	23:20	0:0	8	1
water	23:21	0:0	8	;
water	24:12	0:0	8	}
else	24:14	27:12	6
stmts	24:19	27:12	7	
water	24:19	0:0	8	{
water	25:16	0:0	8	w
op	25:18	0:0	8	=
water	25:20	0:0	8	qp_stride
water	25:29	0:0	8	;
water	26:16	0:0	8	h
op	26:18	0:0	8	=
call	26:20	26:47	8	FF_CEIL_RSHIFT
arg	26:35	26:44	9	inlink->h
water	26:35	0:0	10	inlink
op	26:41	0:0	10	->
water	26:43	0:0	10	h
arg	26:46	26:47	9	4
water	26:46	0:0	10	4
water	26:48	0:0	8	;
water	27:12	0:0	8	}
if	28:12	35:12	6	(w * h > s -> non_b_qp_alloc_size)
cond	28:16	28:27	7	w * h > s -> non_b_qp_alloc_size
water	28:16	0:0	8	w
op	28:18	0:0	8	*
water	28:20	0:0	8	h
op	28:22	0:0	8	>
water	28:24	0:0	8	s
op	28:25	0:0	8	->
water	28:27	0:0	8	non_b_qp_alloc_size
stmts	28:48	35:12	7	
water	28:48	0:0	8	{
decl	29:16	29:69	8	int	ret
op	29:24	0:0	8	=
call	29:26	29:68	9	av_reallocp_array
arg	29:44	29:62	10	&s->non_b_qp_table
op	29:44	0:0	11	&
water	29:45	0:0	11	s
op	29:46	0:0	11	->
water	29:48	0:0	11	non_b_qp_table
arg	29:64	29:65	10	w
water	29:64	0:0	11	w
arg	29:67	29:68	10	h
water	29:67	0:0	11	h
if	30:16	33:16	8	(ret < 0)
cond	30:20	30:26	9	ret < 0
water	30:20	0:0	10	ret
op	30:24	0:0	10	<
water	30:26	0:0	10	0
stmts	30:29	33:16	9	
water	30:29	0:0	10	{
water	31:20	0:0	10	s
op	31:21	0:0	10	->
water	31:23	0:0	10	non_b_qp_alloc_size
op	31:43	0:0	10	=
water	31:45	0:0	10	0
water	31:46	0:0	10	;
return	32:20	32:30	10	ret
water	32:27	0:0	11	ret
water	33:16	0:0	10	}
water	34:16	0:0	8	s
op	34:17	0:0	8	->
water	34:19	0:0	8	non_b_qp_alloc_size
op	34:39	0:0	8	=
water	34:41	0:0	8	w
op	34:43	0:0	8	*
water	34:45	0:0	8	h
water	34:46	0:0	8	;
water	35:12	0:0	8	}
call	36:12	36:54	6	av_assert0
arg	36:23	36:54	7	w*h<=s->non_b_qp_alloc_size
water	36:23	0:0	8	w
op	36:25	0:0	8	*
water	36:27	0:0	8	h
op	36:29	0:0	8	<=
water	36:32	0:0	8	s
op	36:33	0:0	8	->
water	36:35	0:0	8	non_b_qp_alloc_size
water	36:55	0:0	6	;
call	37:12	37:53	6	memcpy
arg	37:19	37:36	7	s->non_b_qp_table
water	37:19	0:0	8	s
op	37:20	0:0	8	->
water	37:22	0:0	8	non_b_qp_table
arg	37:38	37:46	7	qp_table
water	37:38	0:0	8	qp_table
arg	37:48	37:53	7	w*h
water	37:48	0:0	8	w
op	37:50	0:0	8	*
water	37:52	0:0	8	h
water	37:54	0:0	6	;
water	38:8	0:0	6	}
water	39:4	0:0	4	}
if	40:4	67:4	2	(s -> log2_count && ! ctx -> is_disabled)
cond	40:8	40:31	3	s -> log2_count && ! ctx -> is_disabled
water	40:8	0:0	4	s
op	40:9	0:0	4	->
water	40:11	0:0	4	log2_count
op	40:22	0:0	4	&&
op	40:25	0:0	4	!
water	40:26	0:0	4	ctx
op	40:29	0:0	4	->
water	40:31	0:0	4	is_disabled
stmts	40:44	67:4	3	
water	40:44	0:0	4	{
if	41:8	42:40	4	(! s -> use_bframe_qp && s -> non_b_qp_table)
cond	41:12	41:36	5	! s -> use_bframe_qp && s -> non_b_qp_table
op	41:12	0:0	6	!
water	41:13	0:0	6	s
op	41:14	0:0	6	->
water	41:16	0:0	6	use_bframe_qp
op	41:30	0:0	6	&&
water	41:33	0:0	6	s
op	41:34	0:0	6	->
water	41:36	0:0	6	non_b_qp_table
stmts	42:12	42:40	5	
water	42:12	0:0	6	qp_table
op	42:21	0:0	6	=
water	42:23	0:0	6	s
op	42:24	0:0	6	->
water	42:26	0:0	6	non_b_qp_table
water	42:40	0:0	6	;
if	43:8	66:8	4	(qp_table || s -> qp)
cond	43:12	43:27	5	qp_table || s -> qp
water	43:12	0:0	6	qp_table
op	43:21	0:0	6	||
water	43:24	0:0	6	s
op	43:25	0:0	6	->
water	43:27	0:0	6	qp
stmts	43:31	66:8	5	
water	43:31	0:0	6	{
decl	44:12	44:61	6	const int	cw
op	44:25	0:0	6	=
call	44:27	44:60	7	FF_CEIL_RSHIFT
arg	44:42	44:51	8	inlink->w
water	44:42	0:0	9	inlink
op	44:48	0:0	9	->
water	44:50	0:0	9	w
arg	44:53	44:60	8	s->hsub
water	44:53	0:0	9	s
op	44:54	0:0	9	->
water	44:56	0:0	9	hsub
decl	45:12	45:61	6	const int	ch
op	45:25	0:0	6	=
call	45:27	45:60	7	FF_CEIL_RSHIFT
arg	45:42	45:51	8	inlink->h
water	45:42	0:0	9	inlink
op	45:48	0:0	9	->
water	45:50	0:0	9	h
arg	45:53	45:60	8	s->vsub
water	45:53	0:0	9	s
op	45:54	0:0	9	->
water	45:56	0:0	9	vsub
if	48:12	59:12	6	(!av_frame_is_writable (in ) || ( inlink -> w & 7 ) || ( inlink -> h & 7 ))
cond	48:16	48:78	7	!av_frame_is_writable (in ) || ( inlink -> w & 7 ) || ( inlink -> h & 7 )
op	48:16	0:0	8	!
call	48:17	48:40	8	av_frame_is_writable
arg	48:38	48:40	9	in
water	48:38	0:0	10	in
op	48:42	0:0	8	||
water	48:45	0:0	8	(
water	48:46	0:0	8	inlink
op	48:52	0:0	8	->
water	48:54	0:0	8	w
op	48:56	0:0	8	&
water	48:58	0:0	8	7
water	48:59	0:0	8	)
op	48:61	0:0	8	||
water	48:64	0:0	8	(
water	48:65	0:0	8	inlink
op	48:71	0:0	8	->
water	48:73	0:0	8	h
op	48:75	0:0	8	&
water	48:77	0:0	8	7
water	48:78	0:0	8	)
stmts	48:81	59:12	7	
water	48:81	0:0	8	{
decl	49:16	49:59	8	const int	aligned_w
op	49:36	0:0	8	=
call	49:38	49:58	9	FFALIGN
arg	49:46	49:55	10	inlink->w
water	49:46	0:0	11	inlink
op	49:52	0:0	11	->
water	49:54	0:0	11	w
arg	49:57	49:58	10	8
water	49:57	0:0	11	8
decl	50:16	50:59	8	const int	aligned_h
op	50:36	0:0	8	=
call	50:38	50:58	9	FFALIGN
arg	50:46	50:55	10	inlink->h
water	50:46	0:0	11	inlink
op	50:52	0:0	11	->
water	50:54	0:0	11	h
arg	50:57	50:58	10	8
water	50:57	0:0	11	8
water	51:16	0:0	8	out
op	51:20	0:0	8	=
call	51:22	51:71	8	ff_get_video_buffer
arg	51:42	51:49	9	outlink
water	51:42	0:0	10	outlink
arg	51:51	51:60	9	aligned_w
water	51:51	0:0	10	aligned_w
arg	51:62	51:71	9	aligned_h
water	51:62	0:0	10	aligned_h
water	51:72	0:0	8	;
if	52:16	55:16	8	(! out)
cond	52:20	52:21	9	! out
op	52:20	0:0	10	!
water	52:21	0:0	10	out
stmts	52:26	55:16	9	
water	52:26	0:0	10	{
call	53:20	53:37	10	av_frame_free
arg	53:34	53:37	11	&in
op	53:34	0:0	12	&
water	53:35	0:0	12	in
water	53:38	0:0	10	;
return	54:20	54:42	10	AVERROR(ENOMEM)
call	54:27	54:41	11	AVERROR
arg	54:35	54:41	12	ENOMEM
water	54:35	0:0	13	ENOMEM
water	55:16	0:0	10	}
call	56:16	56:43	8	av_frame_copy_props
arg	56:36	56:39	9	out
water	56:36	0:0	10	out
arg	56:41	56:43	9	in
water	56:41	0:0	10	in
water	56:44	0:0	8	;
water	57:16	0:0	8	out
op	57:19	0:0	8	->
water	57:21	0:0	8	width
op	57:28	0:0	8	=
water	57:30	0:0	8	in
op	57:32	0:0	8	->
water	57:34	0:0	8	width
water	57:39	0:0	8	;
water	58:16	0:0	8	out
op	58:19	0:0	8	->
water	58:21	0:0	8	height
op	58:28	0:0	8	=
water	58:30	0:0	8	in
op	58:32	0:0	8	->
water	58:34	0:0	8	height
water	58:40	0:0	8	;
water	59:12	0:0	8	}
call	60:12	60:135	6	filter
arg	60:19	60:20	7	s
water	60:19	0:0	8	s
arg	60:22	60:34	7	out->data[0]
water	60:22	0:0	8	out
op	60:25	0:0	8	->
water	60:27	0:0	8	data
op	60:31	0:0	8	[
water	60:32	0:0	8	0
op	60:33	0:0	8	]
arg	60:36	60:47	7	in->data[0]
water	60:36	0:0	8	in
op	60:38	0:0	8	->
water	60:40	0:0	8	data
op	60:44	0:0	8	[
water	60:45	0:0	8	0
op	60:46	0:0	8	]
arg	60:49	60:65	7	out->linesize[0]
water	60:49	0:0	8	out
op	60:52	0:0	8	->
water	60:54	0:0	8	linesize
op	60:62	0:0	8	[
water	60:63	0:0	8	0
op	60:64	0:0	8	]
arg	60:67	60:82	7	in->linesize[0]
water	60:67	0:0	8	in
op	60:69	0:0	8	->
water	60:71	0:0	8	linesize
op	60:79	0:0	8	[
water	60:80	0:0	8	0
op	60:81	0:0	8	]
arg	60:84	60:93	7	inlink->w
water	60:84	0:0	8	inlink
op	60:90	0:0	8	->
water	60:92	0:0	8	w
arg	60:95	60:104	7	inlink->h
water	60:95	0:0	8	inlink
op	60:101	0:0	8	->
water	60:103	0:0	8	h
arg	60:106	60:114	7	qp_table
water	60:106	0:0	8	qp_table
arg	60:116	60:125	7	qp_stride
water	60:116	0:0	8	qp_stride
arg	60:127	60:128	7	1
water	60:127	0:0	8	1
arg	60:130	60:135	7	depth
water	60:130	0:0	8	depth
water	60:136	0:0	6	;
if	61:12	64:12	6	(out -> data [ 2 ])
cond	61:16	61:27	7	out -> data [ 2 ]
water	61:16	0:0	8	out
op	61:19	0:0	8	->
water	61:21	0:0	8	data
op	61:25	0:0	8	[
water	61:26	0:0	8	2
op	61:27	0:0	8	]
stmts	61:30	64:12	7	
water	61:30	0:0	8	{
call	62:16	62:139	8	filter
arg	62:23	62:24	9	s
water	62:23	0:0	10	s
arg	62:26	62:38	9	out->data[1]
water	62:26	0:0	10	out
op	62:29	0:0	10	->
water	62:31	0:0	10	data
op	62:35	0:0	10	[
water	62:36	0:0	10	1
op	62:37	0:0	10	]
arg	62:40	62:51	9	in->data[1]
water	62:40	0:0	10	in
op	62:42	0:0	10	->
water	62:44	0:0	10	data
op	62:48	0:0	10	[
water	62:49	0:0	10	1
op	62:50	0:0	10	]
arg	62:53	62:69	9	out->linesize[1]
water	62:53	0:0	10	out
op	62:56	0:0	10	->
water	62:58	0:0	10	linesize
op	62:66	0:0	10	[
water	62:67	0:0	10	1
op	62:68	0:0	10	]
arg	62:71	62:86	9	in->linesize[1]
water	62:71	0:0	10	in
op	62:73	0:0	10	->
water	62:75	0:0	10	linesize
op	62:83	0:0	10	[
water	62:84	0:0	10	1
op	62:85	0:0	10	]
arg	62:88	62:90	9	cw
water	62:88	0:0	10	cw
arg	62:99	62:101	9	ch
water	62:99	0:0	10	ch
arg	62:110	62:118	9	qp_table
water	62:110	0:0	10	qp_table
arg	62:120	62:129	9	qp_stride
water	62:120	0:0	10	qp_stride
arg	62:131	62:132	9	0
water	62:131	0:0	10	0
arg	62:134	62:139	9	depth
water	62:134	0:0	10	depth
water	62:140	0:0	8	;
call	63:16	63:139	8	filter
arg	63:23	63:24	9	s
water	63:23	0:0	10	s
arg	63:26	63:38	9	out->data[2]
water	63:26	0:0	10	out
op	63:29	0:0	10	->
water	63:31	0:0	10	data
op	63:35	0:0	10	[
water	63:36	0:0	10	2
op	63:37	0:0	10	]
arg	63:40	63:51	9	in->data[2]
water	63:40	0:0	10	in
op	63:42	0:0	10	->
water	63:44	0:0	10	data
op	63:48	0:0	10	[
water	63:49	0:0	10	2
op	63:50	0:0	10	]
arg	63:53	63:69	9	out->linesize[2]
water	63:53	0:0	10	out
op	63:56	0:0	10	->
water	63:58	0:0	10	linesize
op	63:66	0:0	10	[
water	63:67	0:0	10	2
op	63:68	0:0	10	]
arg	63:71	63:86	9	in->linesize[2]
water	63:71	0:0	10	in
op	63:73	0:0	10	->
water	63:75	0:0	10	linesize
op	63:83	0:0	10	[
water	63:84	0:0	10	2
op	63:85	0:0	10	]
arg	63:88	63:90	9	cw
water	63:88	0:0	10	cw
arg	63:99	63:101	9	ch
water	63:99	0:0	10	ch
arg	63:110	63:118	9	qp_table
water	63:110	0:0	10	qp_table
arg	63:120	63:129	9	qp_stride
water	63:120	0:0	10	qp_stride
arg	63:131	63:132	9	0
water	63:131	0:0	10	0
arg	63:134	63:139	9	depth
water	63:134	0:0	10	depth
water	63:140	0:0	8	;
water	64:12	0:0	8	}
call	65:12	65:19	6	emms_c
water	65:20	0:0	6	;
water	66:8	0:0	6	}
water	67:4	0:0	4	}
if	68:4	74:4	2	(in != out)
cond	68:8	68:14	3	in != out
water	68:8	0:0	4	in
op	68:11	0:0	4	!=
water	68:14	0:0	4	out
stmts	68:19	74:4	3	
water	68:19	0:0	4	{
if	69:8	72:53	4	(in -> data [ 3 ])
cond	69:12	69:22	5	in -> data [ 3 ]
water	69:12	0:0	6	in
op	69:14	0:0	6	->
water	69:16	0:0	6	data
op	69:20	0:0	6	[
water	69:21	0:0	6	3
op	69:22	0:0	6	]
stmts	70:12	72:53	5	
call	70:12	72:52	6	av_image_copy_plane
arg	70:32	70:44	7	out->data[3]
water	70:32	0:0	8	out
op	70:35	0:0	8	->
water	70:37	0:0	8	data
op	70:41	0:0	8	[
water	70:42	0:0	8	3
op	70:43	0:0	8	]
arg	70:46	70:62	7	out->linesize[3]
water	70:46	0:0	8	out
op	70:49	0:0	8	->
water	70:51	0:0	8	linesize
op	70:59	0:0	8	[
water	70:60	0:0	8	3
op	70:61	0:0	8	]
arg	71:32	71:44	7	in->data[3]
water	71:32	0:0	8	in
op	71:35	0:0	8	->
water	71:37	0:0	8	data
op	71:41	0:0	8	[
water	71:42	0:0	8	3
op	71:43	0:0	8	]
arg	71:46	71:62	7	in->linesize[3]
water	71:46	0:0	8	in
op	71:49	0:0	8	->
water	71:51	0:0	8	linesize
op	71:59	0:0	8	[
water	71:60	0:0	8	3
op	71:61	0:0	8	]
arg	72:32	72:41	7	inlink->w
water	72:32	0:0	8	inlink
op	72:38	0:0	8	->
water	72:40	0:0	8	w
arg	72:43	72:52	7	inlink->h
water	72:43	0:0	8	inlink
op	72:49	0:0	8	->
water	72:51	0:0	8	h
water	72:53	0:0	6	;
call	73:8	73:25	4	av_frame_free
arg	73:22	73:25	5	&in
op	73:22	0:0	6	&
water	73:23	0:0	6	in
water	73:26	0:0	4	;
water	74:4	0:0	4	}
return	75:4	75:40	2	ff_filter_frame(outlink,out)
call	75:11	75:39	3	ff_filter_frame
arg	75:27	75:34	4	outlink
water	75:27	0:0	5	outlink
arg	75:36	75:39	4	out
water	75:36	0:0	5	out
