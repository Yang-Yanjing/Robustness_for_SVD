func	1:0	44:0	0	int	ff_fill_line_with_color
params	1:27	0:0	1	
param	1:28	1:44	2	uint8_t *	line[4]
param	1:46	1:63	2	int	pixel_step[4]
param	1:65	1:70	2	int	w
param	1:72	1:92	2	uint8_t	dst_color[4]
param	2:28	2:54	2	enum AVPixelFormat	pix_fmt
param	2:56	2:77	2	uint8_t	rgba_color[4]
param	3:28	3:47	2	int *	is_packed_rgba
param	3:49	3:72	2	uint8_t	rgba_map_ptr[4]
stmnts	0:0	43:12	1	
decl	5:4	5:29	2	uint8_t	rgba_map[4]
op	5:24	0:0	2	=
water	5:26	0:0	2	{
water	5:27	0:0	2	0
water	5:28	0:0	2	}
decl	6:4	6:9	2	int	i
decl	7:4	7:69	2	const AVPixFmtDescriptor	*pix_desc
op	7:39	0:0	2	=
call	7:41	7:68	3	av_pix_fmt_desc_get
arg	7:61	7:68	4	pix_fmt
water	7:61	0:0	5	pix_fmt
decl	8:4	8:12	2	int	hsub
call	9:4	9:23	2	av_assert0
arg	9:15	9:23	3	pix_desc
water	9:15	0:0	4	pix_desc
water	9:24	0:0	2	;
water	10:4	0:0	2	hsub
op	10:9	0:0	2	=
water	10:11	0:0	2	pix_desc
op	10:19	0:0	2	->
water	10:21	0:0	2	log2_chroma_w
water	10:34	0:0	2	;
op	11:4	0:0	2	*
water	11:5	0:0	2	is_packed_rgba
op	11:20	0:0	2	=
call	11:22	11:56	2	ff_fill_rgba_map
arg	11:39	11:47	3	rgba_map
water	11:39	0:0	4	rgba_map
arg	11:49	11:56	3	pix_fmt
water	11:49	0:0	4	pix_fmt
op	11:58	0:0	2	>=
water	11:61	0:0	2	0
water	11:62	0:0	2	;
if	12:4	23:4	2	(* is_packed_rgba)
cond	12:8	12:9	3	* is_packed_rgba
op	12:8	0:0	4	*
water	12:9	0:0	4	is_packed_rgba
stmts	12:25	23:4	3	
water	12:25	0:0	4	{
water	13:8	0:0	4	pixel_step
op	13:18	0:0	4	[
water	13:19	0:0	4	0
op	13:20	0:0	4	]
op	13:22	0:0	4	=
water	13:24	0:0	4	(
call	13:25	13:55	4	av_get_bits_per_pixel
arg	13:47	13:55	5	pix_desc
water	13:47	0:0	6	pix_desc
water	13:56	0:0	4	)
op	13:57	0:0	4	>>
water	13:59	0:0	4	3
water	13:60	0:0	4	;
for	14:8	15:50	4	(i = 0 ;i < 4;i ++)
forinit	14:13	14:18	5	i = 0 ;
water	14:13	0:0	6	i
op	14:15	0:0	6	=
water	14:17	0:0	6	0
water	14:18	0:0	6	;
cond	14:20	14:24	5	i < 4
water	14:20	0:0	6	i
op	14:22	0:0	6	<
water	14:24	0:0	6	4
forexpr	14:27	14:28	5	i ++
water	14:27	0:0	6	i
op	14:28	0:0	6	++
stmts	15:12	15:50	5	
water	15:12	0:0	6	dst_color
op	15:21	0:0	6	[
water	15:22	0:0	6	rgba_map
op	15:30	0:0	6	[
water	15:31	0:0	6	i
op	15:32	0:0	6	]
op	15:33	0:0	6	]
op	15:35	0:0	6	=
water	15:37	0:0	6	rgba_color
op	15:47	0:0	6	[
water	15:48	0:0	6	i
op	15:49	0:0	6	]
water	15:50	0:0	6	;
water	16:8	0:0	4	line
op	16:12	0:0	4	[
water	16:13	0:0	4	0
op	16:14	0:0	4	]
op	16:16	0:0	4	=
call	16:18	16:50	4	av_malloc_array
arg	16:34	16:35	5	w
water	16:34	0:0	6	w
arg	16:37	16:50	5	pixel_step[0]
water	16:37	0:0	6	pixel_step
op	16:47	0:0	6	[
water	16:48	0:0	6	0
op	16:49	0:0	6	]
water	16:51	0:0	4	;
if	17:8	18:34	4	(! line [ 0 ])
cond	17:12	17:19	5	! line [ 0 ]
op	17:12	0:0	6	!
water	17:13	0:0	6	line
op	17:17	0:0	6	[
water	17:18	0:0	6	0
op	17:19	0:0	6	]
stmts	18:12	18:34	5	
return	18:12	18:34	6	AVERROR(ENOMEM)
call	18:19	18:33	7	AVERROR
arg	18:27	18:33	8	ENOMEM
water	18:27	0:0	9	ENOMEM
for	19:8	20:73	4	(i = 0 ;i < w;i ++)
forinit	19:13	19:18	5	i = 0 ;
water	19:13	0:0	6	i
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:24	5	i < w
water	19:20	0:0	6	i
op	19:22	0:0	6	<
water	19:24	0:0	6	w
forexpr	19:27	19:28	5	i ++
water	19:27	0:0	6	i
op	19:28	0:0	6	++
stmts	20:12	20:73	5	
call	20:12	20:72	6	memcpy
arg	20:19	20:46	7	line[0]+i*pixel_step[0]
water	20:19	0:0	8	line
op	20:23	0:0	8	[
water	20:24	0:0	8	0
op	20:25	0:0	8	]
op	20:27	0:0	8	+
water	20:29	0:0	8	i
op	20:31	0:0	8	*
water	20:33	0:0	8	pixel_step
op	20:43	0:0	8	[
water	20:44	0:0	8	0
op	20:45	0:0	8	]
arg	20:48	20:57	7	dst_color
water	20:48	0:0	8	dst_color
arg	20:59	20:72	7	pixel_step[0]
water	20:59	0:0	8	pixel_step
op	20:69	0:0	8	[
water	20:70	0:0	8	0
op	20:71	0:0	8	]
water	20:73	0:0	6	;
if	21:8	22:67	4	(rgba_map_ptr)
cond	21:12	21:12	5	rgba_map_ptr
water	21:12	0:0	6	rgba_map_ptr
stmts	22:12	22:67	5	
call	22:12	22:66	6	memcpy
arg	22:19	22:31	7	rgba_map_ptr
water	22:19	0:0	8	rgba_map_ptr
arg	22:33	22:41	7	rgba_map
water	22:33	0:0	8	rgba_map
arg	22:43	22:66	7	sizeof(rgba_map[0])*4
op	22:43	0:0	8	sizeof
water	22:49	0:0	8	(
water	22:50	0:0	8	rgba_map
op	22:58	0:0	8	[
water	22:59	0:0	8	0
op	22:60	0:0	8	]
water	22:61	0:0	8	)
op	22:63	0:0	8	*
water	22:65	0:0	8	4
water	22:67	0:0	6	;
water	23:4	0:0	4	}
else	23:6	42:4	2
stmts	23:11	42:4	3	
water	23:11	0:0	4	{
decl	24:8	24:17	4	int	plane
water	25:8	0:0	4	dst_color
op	25:17	0:0	4	[
water	25:18	0:0	4	0
op	25:19	0:0	4	]
op	25:21	0:0	4	=
call	25:23	25:80	4	RGB_TO_Y_CCIR
arg	25:37	25:50	5	rgba_color[0]
water	25:37	0:0	6	rgba_color
op	25:47	0:0	6	[
water	25:48	0:0	6	0
op	25:49	0:0	6	]
arg	25:52	25:65	5	rgba_color[1]
water	25:52	0:0	6	rgba_color
op	25:62	0:0	6	[
water	25:63	0:0	6	1
op	25:64	0:0	6	]
arg	25:67	25:80	5	rgba_color[2]
water	25:67	0:0	6	rgba_color
op	25:77	0:0	6	[
water	25:78	0:0	6	2
op	25:79	0:0	6	]
water	25:81	0:0	4	;
water	26:8	0:0	4	dst_color
op	26:17	0:0	4	[
water	26:18	0:0	4	1
op	26:19	0:0	4	]
op	26:21	0:0	4	=
call	26:23	26:83	4	RGB_TO_U_CCIR
arg	26:37	26:50	5	rgba_color[0]
water	26:37	0:0	6	rgba_color
op	26:47	0:0	6	[
water	26:48	0:0	6	0
op	26:49	0:0	6	]
arg	26:52	26:65	5	rgba_color[1]
water	26:52	0:0	6	rgba_color
op	26:62	0:0	6	[
water	26:63	0:0	6	1
op	26:64	0:0	6	]
arg	26:67	26:80	5	rgba_color[2]
water	26:67	0:0	6	rgba_color
op	26:77	0:0	6	[
water	26:78	0:0	6	2
op	26:79	0:0	6	]
arg	26:82	26:83	5	0
water	26:82	0:0	6	0
water	26:84	0:0	4	;
water	27:8	0:0	4	dst_color
op	27:17	0:0	4	[
water	27:18	0:0	4	2
op	27:19	0:0	4	]
op	27:21	0:0	4	=
call	27:23	27:83	4	RGB_TO_V_CCIR
arg	27:37	27:50	5	rgba_color[0]
water	27:37	0:0	6	rgba_color
op	27:47	0:0	6	[
water	27:48	0:0	6	0
op	27:49	0:0	6	]
arg	27:52	27:65	5	rgba_color[1]
water	27:52	0:0	6	rgba_color
op	27:62	0:0	6	[
water	27:63	0:0	6	1
op	27:64	0:0	6	]
arg	27:67	27:80	5	rgba_color[2]
water	27:67	0:0	6	rgba_color
op	27:77	0:0	6	[
water	27:78	0:0	6	2
op	27:79	0:0	6	]
arg	27:82	27:83	5	0
water	27:82	0:0	6	0
water	27:84	0:0	4	;
water	28:8	0:0	4	dst_color
op	28:17	0:0	4	[
water	28:18	0:0	4	3
op	28:19	0:0	4	]
op	28:21	0:0	4	=
water	28:23	0:0	4	rgba_color
op	28:33	0:0	4	[
water	28:34	0:0	4	3
op	28:35	0:0	4	]
water	28:36	0:0	4	;
for	29:8	41:8	4	(plane = 0 ;plane < 4;plane ++)
forinit	29:13	29:22	5	plane = 0 ;
water	29:13	0:0	6	plane
op	29:19	0:0	6	=
water	29:21	0:0	6	0
water	29:22	0:0	6	;
cond	29:24	29:32	5	plane < 4
water	29:24	0:0	6	plane
op	29:30	0:0	6	<
water	29:32	0:0	6	4
forexpr	29:35	29:40	5	plane ++
water	29:35	0:0	6	plane
op	29:40	0:0	6	++
stmts	29:44	41:8	5	
water	29:44	0:0	6	{
decl	30:12	30:25	6	int	line_size
decl	31:12	31:61	6	int	hsub1
op	31:22	0:0	6	=
water	31:24	0:0	6	(
water	31:25	0:0	6	plane
op	31:31	0:0	6	==
water	31:34	0:0	6	1
op	31:36	0:0	6	||
water	31:39	0:0	6	plane
op	31:45	0:0	6	==
water	31:48	0:0	6	2
water	31:49	0:0	6	)
water	31:51	0:0	6	?
water	31:53	0:0	6	hsub
water	31:58	0:0	6	:
water	31:60	0:0	6	0
water	32:12	0:0	6	pixel_step
op	32:22	0:0	6	[
water	32:23	0:0	6	plane
op	32:28	0:0	6	]
op	32:30	0:0	6	=
water	32:32	0:0	6	1
water	32:33	0:0	6	;
water	33:12	0:0	6	line_size
op	33:22	0:0	6	=
call	33:24	33:47	6	FF_CEIL_RSHIFT
arg	33:39	33:40	7	w
water	33:39	0:0	8	w
arg	33:42	33:47	7	hsub1
water	33:42	0:0	8	hsub1
op	33:49	0:0	6	*
water	33:51	0:0	6	pixel_step
op	33:61	0:0	6	[
water	33:62	0:0	6	plane
op	33:67	0:0	6	]
water	33:68	0:0	6	;
water	34:12	0:0	6	line
op	34:16	0:0	6	[
water	34:17	0:0	6	plane
op	34:22	0:0	6	]
op	34:24	0:0	6	=
call	34:26	34:45	6	av_malloc
arg	34:36	34:45	7	line_size
water	34:36	0:0	8	line_size
water	34:46	0:0	6	;
if	35:12	39:12	6	(! line [ plane ])
cond	35:16	35:27	7	! line [ plane ]
op	35:16	0:0	8	!
water	35:17	0:0	8	line
op	35:21	0:0	8	[
water	35:22	0:0	8	plane
op	35:27	0:0	8	]
stmts	35:30	39:12	7	
water	35:30	0:0	8	{
while	36:16	37:44	8	(plane && line [ plane - 1 ])
cond	36:22	36:43	9	plane && line [ plane - 1 ]
water	36:22	0:0	10	plane
op	36:28	0:0	10	&&
water	36:31	0:0	10	line
op	36:35	0:0	10	[
water	36:36	0:0	10	plane
op	36:41	0:0	10	-
water	36:42	0:0	10	1
op	36:43	0:0	10	]
stmts	37:20	37:44	9	
call	37:20	37:43	10	av_freep
arg	37:29	37:43	11	&line[--plane]
op	37:29	0:0	12	&
water	37:30	0:0	12	line
op	37:34	0:0	12	[
op	37:35	0:0	12	--
water	37:37	0:0	12	plane
op	37:42	0:0	12	]
water	37:44	0:0	10	;
return	38:16	38:38	8	AVERROR(ENOMEM)
call	38:23	38:37	9	AVERROR
arg	38:31	38:37	10	ENOMEM
water	38:31	0:0	11	ENOMEM
water	39:12	0:0	8	}
call	40:12	40:59	6	memset
arg	40:19	40:30	7	line[plane]
water	40:19	0:0	8	line
op	40:23	0:0	8	[
water	40:24	0:0	8	plane
op	40:29	0:0	8	]
arg	40:32	40:48	7	dst_color[plane]
water	40:32	0:0	8	dst_color
op	40:41	0:0	8	[
water	40:42	0:0	8	plane
op	40:47	0:0	8	]
arg	40:50	40:59	7	line_size
water	40:50	0:0	8	line_size
water	40:60	0:0	6	;
water	41:8	0:0	6	}
water	42:4	0:0	4	}
return	43:4	43:12	2	0
water	43:11	0:0	3	0
