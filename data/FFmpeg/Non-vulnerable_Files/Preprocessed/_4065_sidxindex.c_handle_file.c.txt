func	1:0	83:0	0	static int	handle_file
params	1:22	0:0	1	
param	1:23	1:44	2	struct Tracks *	tracks
param	1:46	1:62	2	const char *	file
stmnts	0:0	82:14	1	
decl	3:4	3:31	2	AVFormatContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	NULL
decl	4:4	4:51	2	int	err
op	4:12	0:0	2	=
water	4:14	0:0	2	0
water	4:15	0:0	2	,
decl	4:4	4:51	2	int	i
water	4:18	0:0	2	,
decl	4:4	4:51	2	int	orig_tracks
op	4:32	0:0	2	=
water	4:34	0:0	2	tracks
op	4:40	0:0	2	->
water	4:42	0:0	2	nb_tracks
decl	5:4	5:25	2	char	errbuf[50]
water	5:19	0:0	2	,
decl	5:4	5:25	2	char	*ptr
decl	6:4	6:23	2	struct Track	*track
water	7:4	0:0	2	err
op	7:8	0:0	2	=
call	7:10	7:52	2	avformat_open_input
arg	7:30	7:34	3	&ctx
op	7:30	0:0	4	&
water	7:31	0:0	4	ctx
arg	7:36	7:40	3	file
water	7:36	0:0	4	file
arg	7:42	7:46	3	NULL
water	7:42	0:0	4	NULL
arg	7:48	7:52	3	NULL
water	7:48	0:0	4	NULL
water	7:53	0:0	2	;
if	8:4	12:4	2	(err < 0)
cond	8:8	8:14	3	err < 0
water	8:8	0:0	4	err
op	8:12	0:0	4	<
water	8:14	0:0	4	0
stmts	8:17	12:4	3	
water	8:17	0:0	4	{
call	9:8	9:47	4	av_strerror
arg	9:20	9:23	5	err
water	9:20	0:0	6	err
arg	9:25	9:31	5	errbuf
water	9:25	0:0	6	errbuf
arg	9:33	9:47	5	sizeof(errbuf)
op	9:33	0:0	6	sizeof
water	9:39	0:0	6	(
water	9:40	0:0	6	errbuf
water	9:46	0:0	6	)
water	9:48	0:0	4	;
call	10:8	10:63	4	fprintf
arg	10:16	10:22	5	stderr
water	10:16	0:0	6	stderr
arg	10:24	10:49	5	"Unable to open %s: %s\n"
water	10:24	0:0	6	"Unable to open %s: %s\n"
arg	10:51	10:55	5	file
water	10:51	0:0	6	file
arg	10:57	10:63	5	errbuf
water	10:57	0:0	6	errbuf
water	10:64	0:0	4	;
return	11:8	11:16	4	1
water	11:15	0:0	5	1
water	12:4	0:0	4	}
water	13:4	0:0	2	err
op	13:8	0:0	2	=
call	13:10	13:45	2	avformat_find_stream_info
arg	13:36	13:39	3	ctx
water	13:36	0:0	4	ctx
arg	13:41	13:45	3	NULL
water	13:41	0:0	4	NULL
water	13:46	0:0	2	;
if	14:4	18:4	2	(err < 0)
cond	14:8	14:14	3	err < 0
water	14:8	0:0	4	err
op	14:12	0:0	4	<
water	14:14	0:0	4	0
stmts	14:17	18:4	3	
water	14:17	0:0	4	{
call	15:8	15:47	4	av_strerror
arg	15:20	15:23	5	err
water	15:20	0:0	6	err
arg	15:25	15:31	5	errbuf
water	15:25	0:0	6	errbuf
arg	15:33	15:47	5	sizeof(errbuf)
op	15:33	0:0	6	sizeof
water	15:39	0:0	6	(
water	15:40	0:0	6	errbuf
water	15:46	0:0	6	)
water	15:48	0:0	4	;
call	16:8	16:67	4	fprintf
arg	16:16	16:22	5	stderr
water	16:16	0:0	6	stderr
arg	16:24	16:53	5	"Unable to identify %s: %s\n"
water	16:24	0:0	6	"Unable to identify %s: %s\n"
arg	16:55	16:59	5	file
water	16:55	0:0	6	file
arg	16:61	16:67	5	errbuf
water	16:61	0:0	6	errbuf
water	16:68	0:0	4	;
goto	17:8	17:17	4	fail
water	17:13	0:0	5	fail
water	18:4	0:0	4	}
if	19:4	22:4	2	(ctx -> nb_streams < 1)
cond	19:8	19:26	3	ctx -> nb_streams < 1
water	19:8	0:0	4	ctx
op	19:11	0:0	4	->
water	19:13	0:0	4	nb_streams
op	19:24	0:0	4	<
water	19:26	0:0	4	1
stmts	19:29	22:4	3	
water	19:29	0:0	4	{
call	20:8	20:56	4	fprintf
arg	20:16	20:22	5	stderr
water	20:16	0:0	6	stderr
arg	20:24	20:50	5	"No streams found in %s\n"
water	20:24	0:0	6	"No streams found in %s\n"
arg	20:52	20:56	5	file
water	20:52	0:0	6	file
water	20:57	0:0	4	;
goto	21:8	21:17	4	fail
water	21:13	0:0	5	fail
water	22:4	0:0	4	}
if	23:4	24:44	2	(ctx -> nb_streams > 1)
cond	23:8	23:26	3	ctx -> nb_streams > 1
water	23:8	0:0	4	ctx
op	23:11	0:0	4	->
water	23:13	0:0	4	nb_streams
op	23:24	0:0	4	>
water	23:26	0:0	4	1
stmts	24:8	24:44	3	
water	24:8	0:0	4	tracks
op	24:14	0:0	4	->
water	24:16	0:0	4	multiple_tracks_per_file
op	24:41	0:0	4	=
water	24:43	0:0	4	1
water	24:44	0:0	4	;
for	25:4	76:4	2	(i = 0 ;i < ctx -> nb_streams;i ++)
forinit	25:9	25:14	3	i = 0 ;
water	25:9	0:0	4	i
op	25:11	0:0	4	=
water	25:13	0:0	4	0
water	25:14	0:0	4	;
cond	25:16	25:25	3	i < ctx -> nb_streams
water	25:16	0:0	4	i
op	25:18	0:0	4	<
water	25:20	0:0	4	ctx
op	25:23	0:0	4	->
water	25:25	0:0	4	nb_streams
forexpr	25:37	25:38	3	i ++
water	25:37	0:0	4	i
op	25:38	0:0	4	++
stmts	25:42	76:4	3	
water	25:42	0:0	4	{
decl	26:8	26:27	4	struct Track	**temp
decl	27:8	27:38	4	AVStream	*st
op	27:21	0:0	4	=
water	27:23	0:0	4	ctx
op	27:26	0:0	4	->
water	27:28	0:0	4	streams
op	27:35	0:0	4	[
water	27:36	0:0	4	i
op	27:37	0:0	4	]
if	28:8	32:8	4	(st -> codec -> bit_rate == 0)
cond	28:12	28:35	5	st -> codec -> bit_rate == 0
water	28:12	0:0	6	st
op	28:14	0:0	6	->
water	28:16	0:0	6	codec
op	28:21	0:0	6	->
water	28:23	0:0	6	bit_rate
op	28:32	0:0	6	==
water	28:35	0:0	6	0
stmts	28:38	32:8	5	
water	28:38	0:0	6	{
call	29:12	30:32	6	fprintf
arg	29:20	29:26	7	stderr
water	29:20	0:0	8	stderr
arg	29:28	29:78	7	"Skipping track %d in %s as it has zero bitrate\n"
water	29:28	0:0	8	"Skipping track %d in %s as it has zero bitrate\n"
arg	30:20	30:26	7	st->id
water	30:20	0:0	8	st
op	30:22	0:0	8	->
water	30:24	0:0	8	id
arg	30:28	30:32	7	file
water	30:28	0:0	8	file
water	30:33	0:0	6	;
continue	31:12	31:20	6	
water	32:8	0:0	6	}
water	33:8	0:0	4	track
op	33:14	0:0	4	=
call	33:16	33:41	4	av_mallocz
arg	33:27	33:41	5	sizeof(*track)
op	33:27	0:0	6	sizeof
water	33:33	0:0	6	(
op	33:34	0:0	6	*
water	33:35	0:0	6	track
water	33:40	0:0	6	)
water	33:42	0:0	4	;
if	34:8	37:8	4	(! track)
cond	34:12	34:13	5	! track
op	34:12	0:0	6	!
water	34:13	0:0	6	track
stmts	34:20	37:8	5	
water	34:20	0:0	6	{
water	35:12	0:0	6	err
op	35:16	0:0	6	=
call	35:18	35:32	6	AVERROR
arg	35:26	35:32	7	ENOMEM
water	35:26	0:0	8	ENOMEM
water	35:33	0:0	6	;
goto	36:12	36:21	6	fail
water	36:17	0:0	7	fail
water	37:8	0:0	6	}
water	38:8	0:0	4	temp
op	38:13	0:0	4	=
call	38:15	39:55	4	av_realloc_array
arg	38:32	38:46	5	tracks->tracks
water	38:32	0:0	6	tracks
op	38:38	0:0	6	->
water	38:40	0:0	6	tracks
arg	38:48	38:69	5	tracks->nb_tracks+1
water	38:48	0:0	6	tracks
op	38:54	0:0	6	->
water	38:56	0:0	6	nb_tracks
op	38:66	0:0	6	+
water	38:68	0:0	6	1
arg	39:32	39:55	5	sizeof(*tracks->tracks)
op	39:32	0:0	6	sizeof
water	39:38	0:0	6	(
op	39:39	0:0	6	*
water	39:40	0:0	6	tracks
op	39:46	0:0	6	->
water	39:48	0:0	6	tracks
water	39:54	0:0	6	)
water	39:56	0:0	4	;
if	40:8	44:8	4	(! temp)
cond	40:12	40:13	5	! temp
op	40:12	0:0	6	!
water	40:13	0:0	6	temp
stmts	40:19	44:8	5	
water	40:19	0:0	6	{
call	41:12	41:25	6	av_free
arg	41:20	41:25	7	track
water	41:20	0:0	8	track
water	41:26	0:0	6	;
water	42:12	0:0	6	err
op	42:16	0:0	6	=
call	42:18	42:32	6	AVERROR
arg	42:26	42:32	7	ENOMEM
water	42:26	0:0	8	ENOMEM
water	42:33	0:0	6	;
goto	43:12	43:21	6	fail
water	43:17	0:0	7	fail
water	44:8	0:0	6	}
water	45:8	0:0	4	tracks
op	45:14	0:0	4	->
water	45:16	0:0	4	tracks
op	45:23	0:0	4	=
water	45:25	0:0	4	temp
water	45:29	0:0	4	;
water	46:8	0:0	4	tracks
op	46:14	0:0	4	->
water	46:16	0:0	4	tracks
op	46:22	0:0	4	[
water	46:23	0:0	4	tracks
op	46:29	0:0	4	->
water	46:31	0:0	4	nb_tracks
op	46:40	0:0	4	]
op	46:42	0:0	4	=
water	46:44	0:0	4	track
water	46:49	0:0	4	;
water	47:8	0:0	4	track
op	47:13	0:0	4	->
water	47:15	0:0	4	name
op	47:20	0:0	4	=
water	47:22	0:0	4	file
water	47:26	0:0	4	;
if	48:8	49:33	4	(( ptr =strrchr (file ,'/' ) ))
cond	48:12	48:37	5	( ptr =strrchr (file ,'/' ) )
water	48:12	0:0	6	(
water	48:13	0:0	6	ptr
op	48:17	0:0	6	=
call	48:19	48:36	6	strrchr
arg	48:27	48:31	7	file
water	48:27	0:0	8	file
arg	48:33	48:36	7	'/'
water	48:33	0:0	8	'/'
water	48:37	0:0	6	)
stmts	49:12	49:33	5	
water	49:12	0:0	6	track
op	49:17	0:0	6	->
water	49:19	0:0	6	name
op	49:24	0:0	6	=
water	49:26	0:0	6	ptr
op	49:30	0:0	6	+
water	49:32	0:0	6	1
water	49:33	0:0	6	;
water	50:8	0:0	4	track
op	50:13	0:0	4	->
water	50:15	0:0	4	bitrate
op	50:25	0:0	4	=
water	50:27	0:0	4	st
op	50:29	0:0	4	->
water	50:31	0:0	4	codec
op	50:36	0:0	4	->
water	50:38	0:0	4	bit_rate
water	50:46	0:0	4	;
water	51:8	0:0	4	track
op	51:13	0:0	4	->
water	51:15	0:0	4	track_id
op	51:25	0:0	4	=
water	51:27	0:0	4	st
op	51:29	0:0	4	->
water	51:31	0:0	4	id
water	51:33	0:0	4	;
water	52:8	0:0	4	track
op	52:13	0:0	4	->
water	52:15	0:0	4	timescale
op	52:25	0:0	4	=
water	52:27	0:0	4	st
op	52:29	0:0	4	->
water	52:31	0:0	4	time_base
op	52:40	0:0	4	.
water	52:41	0:0	4	den
water	52:44	0:0	4	;
water	53:8	0:0	4	track
op	53:13	0:0	4	->
water	53:15	0:0	4	duration
op	53:25	0:0	4	=
water	53:27	0:0	4	st
op	53:29	0:0	4	->
water	53:31	0:0	4	duration
water	53:39	0:0	4	;
water	54:8	0:0	4	track
op	54:13	0:0	4	->
water	54:15	0:0	4	is_audio
op	54:25	0:0	4	=
water	54:27	0:0	4	st
op	54:29	0:0	4	->
water	54:31	0:0	4	codec
op	54:36	0:0	4	->
water	54:38	0:0	4	codec_type
op	54:49	0:0	4	==
water	54:52	0:0	4	AVMEDIA_TYPE_AUDIO
water	54:70	0:0	4	;
water	55:8	0:0	4	track
op	55:13	0:0	4	->
water	55:15	0:0	4	is_video
op	55:25	0:0	4	=
water	55:27	0:0	4	st
op	55:29	0:0	4	->
water	55:31	0:0	4	codec
op	55:36	0:0	4	->
water	55:38	0:0	4	codec_type
op	55:49	0:0	4	==
water	55:52	0:0	4	AVMEDIA_TYPE_VIDEO
water	55:70	0:0	4	;
if	56:8	62:8	4	(! track -> is_audio && ! track -> is_video)
cond	56:12	56:40	5	! track -> is_audio && ! track -> is_video
op	56:12	0:0	6	!
water	56:13	0:0	6	track
op	56:18	0:0	6	->
water	56:20	0:0	6	is_audio
op	56:29	0:0	6	&&
op	56:32	0:0	6	!
water	56:33	0:0	6	track
op	56:38	0:0	6	->
water	56:40	0:0	6	is_video
stmts	56:50	62:8	5	
water	56:50	0:0	6	{
call	57:12	59:41	6	fprintf
arg	57:20	57:26	7	stderr
water	57:20	0:0	8	stderr
arg	58:20	58:75	7	"Track %d in %s is neither video nor audio, skipping\n"
water	58:20	0:0	8	"Track %d in %s is neither video nor audio, skipping\n"
arg	59:20	59:35	7	track->track_id
water	59:20	0:0	8	track
op	59:25	0:0	8	->
water	59:27	0:0	8	track_id
arg	59:37	59:41	7	file
water	59:37	0:0	8	file
water	59:42	0:0	6	;
call	60:12	60:55	6	av_freep
arg	60:21	60:55	7	&tracks->tracks[tracks->nb_tracks]
op	60:21	0:0	8	&
water	60:22	0:0	8	tracks
op	60:28	0:0	8	->
water	60:30	0:0	8	tracks
op	60:36	0:0	8	[
water	60:37	0:0	8	tracks
op	60:43	0:0	8	->
water	60:45	0:0	8	nb_tracks
op	60:54	0:0	8	]
water	60:56	0:0	6	;
continue	61:12	61:20	6	
water	62:8	0:0	6	}
water	63:8	0:0	4	tracks
op	63:14	0:0	4	->
water	63:16	0:0	4	duration
op	63:25	0:0	4	=
call	63:27	65:78	4	FFMAX
arg	63:33	63:49	5	tracks->duration
water	63:33	0:0	6	tracks
op	63:39	0:0	6	->
water	63:41	0:0	6	duration
arg	64:33	65:78	5	av_rescale_rnd(track->duration,AV_TIME_BASE,track->timescale,AV_ROUND_UP)
call	64:33	65:77	6	av_rescale_rnd
arg	64:48	64:63	7	track->duration
water	64:48	0:0	8	track
op	64:53	0:0	8	->
water	64:55	0:0	8	duration
arg	64:65	64:77	7	AV_TIME_BASE
water	64:65	0:0	8	AV_TIME_BASE
arg	65:48	65:64	7	track->timescale
water	65:48	0:0	8	track
op	65:53	0:0	8	->
water	65:55	0:0	8	timescale
arg	65:66	65:77	7	AV_ROUND_UP
water	65:66	0:0	8	AV_ROUND_UP
water	65:79	0:0	4	;
if	66:8	69:8	4	(track -> is_audio)
cond	66:12	66:19	5	track -> is_audio
water	66:12	0:0	6	track
op	66:17	0:0	6	->
water	66:19	0:0	6	is_audio
stmts	66:29	69:8	5	
water	66:29	0:0	6	{
water	67:12	0:0	6	track
op	67:17	0:0	6	->
water	67:19	0:0	6	channels
op	67:31	0:0	6	=
water	67:33	0:0	6	st
op	67:35	0:0	6	->
water	67:37	0:0	6	codec
op	67:42	0:0	6	->
water	67:44	0:0	6	channels
water	67:52	0:0	6	;
water	68:12	0:0	6	track
op	68:17	0:0	6	->
water	68:19	0:0	6	sample_rate
op	68:31	0:0	6	=
water	68:33	0:0	6	st
op	68:35	0:0	6	->
water	68:37	0:0	6	codec
op	68:42	0:0	6	->
water	68:44	0:0	6	sample_rate
water	68:55	0:0	6	;
water	69:8	0:0	6	}
if	70:8	73:8	4	(track -> is_video)
cond	70:12	70:19	5	track -> is_video
water	70:12	0:0	6	track
op	70:17	0:0	6	->
water	70:19	0:0	6	is_video
stmts	70:29	73:8	5	
water	70:29	0:0	6	{
water	71:12	0:0	6	track
op	71:17	0:0	6	->
water	71:19	0:0	6	width
op	71:26	0:0	6	=
water	71:28	0:0	6	st
op	71:30	0:0	6	->
water	71:32	0:0	6	codec
op	71:37	0:0	6	->
water	71:39	0:0	6	width
water	71:44	0:0	6	;
water	72:12	0:0	6	track
op	72:17	0:0	6	->
water	72:19	0:0	6	height
op	72:26	0:0	6	=
water	72:28	0:0	6	st
op	72:30	0:0	6	->
water	72:32	0:0	6	codec
op	72:37	0:0	6	->
water	72:39	0:0	6	height
water	72:45	0:0	6	;
water	73:8	0:0	6	}
call	74:8	74:75	4	set_codec_str
arg	74:22	74:31	5	st->codec
water	74:22	0:0	6	st
op	74:24	0:0	6	->
water	74:26	0:0	6	codec
arg	74:33	74:49	5	track->codec_str
water	74:33	0:0	6	track
op	74:38	0:0	6	->
water	74:40	0:0	6	codec_str
arg	74:51	74:75	5	sizeof(track->codec_str)
op	74:51	0:0	6	sizeof
water	74:57	0:0	6	(
water	74:58	0:0	6	track
op	74:63	0:0	6	->
water	74:65	0:0	6	codec_str
water	74:74	0:0	6	)
water	74:76	0:0	4	;
water	75:8	0:0	4	tracks
op	75:14	0:0	4	->
water	75:16	0:0	4	nb_tracks
op	75:25	0:0	4	++
water	75:27	0:0	4	;
water	76:4	0:0	4	}
call	77:4	77:29	2	avformat_close_input
arg	77:25	77:29	3	&ctx
op	77:25	0:0	4	&
water	77:26	0:0	4	ctx
water	77:30	0:0	2	;
water	78:4	0:0	2	err
op	78:8	0:0	2	=
call	78:10	78:45	2	find_sidx
arg	78:20	78:26	3	tracks
water	78:20	0:0	4	tracks
arg	78:28	78:39	3	orig_tracks
water	78:28	0:0	4	orig_tracks
arg	78:41	78:45	3	file
water	78:41	0:0	4	file
water	78:46	0:0	2	;
label	79:0	79:4	2	fail :
if	80:4	81:34	2	(ctx)
cond	80:8	80:8	3	ctx
water	80:8	0:0	4	ctx
stmts	81:8	81:34	3	
call	81:8	81:33	4	avformat_close_input
arg	81:29	81:33	5	&ctx
op	81:29	0:0	6	&
water	81:30	0:0	6	ctx
water	81:34	0:0	4	;
return	82:4	82:14	2	err
water	82:11	0:0	3	err
