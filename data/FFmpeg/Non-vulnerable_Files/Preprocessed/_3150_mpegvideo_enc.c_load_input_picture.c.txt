func	1:0	121:0	0	static int	load_input_picture
params	1:29	0:0	1	
param	1:30	1:47	2	MpegEncContext *	s
param	1:49	1:71	2	const AVFrame *	pic_arg
stmnts	0:0	120:12	1	
decl	3:4	3:23	2	Picture	*pic
op	3:17	0:0	2	=
water	3:19	0:0	2	NULL
decl	4:4	4:15	2	int64_t	pts
decl	5:4	5:42	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:42	2	int	display_picture_number
op	5:34	0:0	2	=
water	5:36	0:0	2	0
water	5:37	0:0	2	,
decl	5:4	5:42	2	int	ret
decl	6:4	7:71	2	const int	encoding_delay
op	6:29	0:0	2	=
water	6:31	0:0	2	s
op	6:32	0:0	2	->
water	6:34	0:0	2	max_b_frames
water	6:47	0:0	2	?
water	6:49	0:0	2	s
op	6:50	0:0	2	->
water	6:52	0:0	2	max_b_frames
water	6:65	0:0	2	:
water	7:49	0:0	2	(
water	7:50	0:0	2	s
op	7:51	0:0	2	->
water	7:53	0:0	2	low_delay
water	7:63	0:0	2	?
water	7:65	0:0	2	0
water	7:67	0:0	2	:
water	7:69	0:0	2	1
water	7:70	0:0	2	)
decl	8:4	8:18	2	int	direct
op	8:15	0:0	2	=
water	8:17	0:0	2	1
if	9:4	36:4	2	(pic_arg)
cond	9:8	9:8	3	pic_arg
water	9:8	0:0	4	pic_arg
stmts	9:17	36:4	3	
water	9:17	0:0	4	{
water	10:8	0:0	4	pts
op	10:12	0:0	4	=
water	10:14	0:0	4	pic_arg
op	10:21	0:0	4	->
water	10:23	0:0	4	pts
water	10:26	0:0	4	;
water	11:8	0:0	4	display_picture_number
op	11:31	0:0	4	=
water	11:33	0:0	4	s
op	11:34	0:0	4	->
water	11:36	0:0	4	input_picture_number
op	11:56	0:0	4	++
water	11:58	0:0	4	;
if	12:8	25:8	4	(pts != AV_NOPTS_VALUE)
cond	12:12	12:19	5	pts != AV_NOPTS_VALUE
water	12:12	0:0	6	pts
op	12:16	0:0	6	!=
water	12:19	0:0	6	AV_NOPTS_VALUE
stmts	12:35	25:8	5	
water	12:35	0:0	6	{
if	13:12	23:12	6	(s -> user_specified_pts != AV_NOPTS_VALUE)
cond	13:16	13:41	7	s -> user_specified_pts != AV_NOPTS_VALUE
water	13:16	0:0	8	s
op	13:17	0:0	8	->
water	13:19	0:0	8	user_specified_pts
op	13:38	0:0	8	!=
water	13:41	0:0	8	AV_NOPTS_VALUE
stmts	13:57	23:12	7	
water	13:57	0:0	8	{
decl	14:16	14:52	8	int64_t	last
op	14:29	0:0	8	=
water	14:31	0:0	8	s
op	14:32	0:0	8	->
water	14:34	0:0	8	user_specified_pts
if	15:16	20:16	8	(pts <= last)
cond	15:20	15:27	9	pts <= last
water	15:20	0:0	10	pts
op	15:24	0:0	10	<=
water	15:27	0:0	10	last
stmts	15:33	20:16	9	
water	15:33	0:0	10	{
call	16:20	18:36	10	av_log
arg	16:27	16:35	11	s->avctx
water	16:27	0:0	12	s
op	16:28	0:0	12	->
water	16:30	0:0	12	avctx
arg	16:37	16:49	11	AV_LOG_ERROR
water	16:37	0:0	12	AV_LOG_ERROR
arg	17:27	17:74	11	"Invalid pts (%"PRId64") <= last (%"PRId64")\n"
water	17:27	0:0	12	"Invalid pts (%"
water	17:43	0:0	12	PRId64
water	17:49	0:0	12	") <= last (%"
water	17:63	0:0	12	PRId64
water	17:69	0:0	12	")\n"
arg	18:27	18:30	11	pts
water	18:27	0:0	12	pts
arg	18:32	18:36	11	last
water	18:32	0:0	12	last
water	18:37	0:0	10	;
return	19:20	19:42	10	AVERROR(EINVAL)
call	19:27	19:41	11	AVERROR
arg	19:35	19:41	12	EINVAL
water	19:35	0:0	13	EINVAL
water	20:16	0:0	10	}
if	21:16	22:45	8	(! s -> low_delay && display_picture_number == 1)
cond	21:20	21:63	9	! s -> low_delay && display_picture_number == 1
op	21:20	0:0	10	!
water	21:21	0:0	10	s
op	21:22	0:0	10	->
water	21:24	0:0	10	low_delay
op	21:34	0:0	10	&&
water	21:37	0:0	10	display_picture_number
op	21:60	0:0	10	==
water	21:63	0:0	10	1
stmts	22:20	22:45	9	
water	22:20	0:0	10	s
op	22:21	0:0	10	->
water	22:23	0:0	10	dts_delta
op	22:33	0:0	10	=
water	22:35	0:0	10	pts
op	22:39	0:0	10	-
water	22:41	0:0	10	last
water	22:45	0:0	10	;
water	23:12	0:0	8	}
water	24:12	0:0	6	s
op	24:13	0:0	6	->
water	24:15	0:0	6	user_specified_pts
op	24:34	0:0	6	=
water	24:36	0:0	6	pts
water	24:39	0:0	6	;
water	25:8	0:0	6	}
else	25:10	35:8	4
stmts	25:15	35:8	5	
water	25:15	0:0	6	{
if	26:12	32:12	6	(s -> user_specified_pts != AV_NOPTS_VALUE)
cond	26:16	26:41	7	s -> user_specified_pts != AV_NOPTS_VALUE
water	26:16	0:0	8	s
op	26:17	0:0	8	->
water	26:19	0:0	8	user_specified_pts
op	26:38	0:0	8	!=
water	26:41	0:0	8	AV_NOPTS_VALUE
stmts	26:57	32:12	7	
water	26:57	0:0	8	{
water	27:16	0:0	8	s
op	27:17	0:0	8	->
water	27:19	0:0	8	user_specified_pts
op	27:38	0:0	8	=
water	28:16	0:0	8	pts
op	28:20	0:0	8	=
water	28:22	0:0	8	s
op	28:23	0:0	8	->
water	28:25	0:0	8	user_specified_pts
op	28:44	0:0	8	+
water	28:46	0:0	8	1
water	28:47	0:0	8	;
call	29:16	31:26	8	av_log
arg	29:23	29:31	9	s->avctx
water	29:23	0:0	10	s
op	29:24	0:0	10	->
water	29:26	0:0	10	avctx
arg	29:33	29:44	9	AV_LOG_INFO
water	29:33	0:0	10	AV_LOG_INFO
arg	30:23	30:77	9	"Warning: AVFrame.pts=? trying to guess (%"PRId64")\n"
water	30:23	0:0	10	"Warning: AVFrame.pts=? trying to guess (%"
water	30:66	0:0	10	PRId64
water	30:72	0:0	10	")\n"
arg	31:23	31:26	9	pts
water	31:23	0:0	10	pts
water	31:27	0:0	8	;
water	32:12	0:0	8	}
else	32:14	34:12	6
stmts	32:19	34:12	7	
water	32:19	0:0	8	{
water	33:16	0:0	8	pts
op	33:20	0:0	8	=
water	33:22	0:0	8	display_picture_number
water	33:44	0:0	8	;
water	34:12	0:0	8	}
water	35:8	0:0	6	}
water	36:4	0:0	4	}
if	37:4	115:4	2	(pic_arg)
cond	37:8	37:8	3	pic_arg
water	37:8	0:0	4	pic_arg
stmts	37:17	115:4	3	
water	37:17	0:0	4	{
if	38:8	42:22	4	(! pic_arg -> buf [ 0 ] || pic_arg -> linesize [ 0 ] != s -> linesize || pic_arg -> linesize [ 1 ] != s -> uvlinesize || pic_arg -> linesize [ 2 ] != s -> uvlinesize)
cond	38:12	41:39	5	! pic_arg -> buf [ 0 ] || pic_arg -> linesize [ 0 ] != s -> linesize || pic_arg -> linesize [ 1 ] != s -> uvlinesize || pic_arg -> linesize [ 2 ] != s -> uvlinesize
op	38:12	0:0	6	!
water	38:13	0:0	6	pic_arg
op	38:20	0:0	6	->
water	38:22	0:0	6	buf
op	38:25	0:0	6	[
water	38:26	0:0	6	0
op	38:27	0:0	6	]
op	38:29	0:0	6	||
water	39:12	0:0	6	pic_arg
op	39:19	0:0	6	->
water	39:21	0:0	6	linesize
op	39:29	0:0	6	[
water	39:30	0:0	6	0
op	39:31	0:0	6	]
op	39:33	0:0	6	!=
water	39:36	0:0	6	s
op	39:37	0:0	6	->
water	39:39	0:0	6	linesize
op	39:48	0:0	6	||
water	40:12	0:0	6	pic_arg
op	40:19	0:0	6	->
water	40:21	0:0	6	linesize
op	40:29	0:0	6	[
water	40:30	0:0	6	1
op	40:31	0:0	6	]
op	40:33	0:0	6	!=
water	40:36	0:0	6	s
op	40:37	0:0	6	->
water	40:39	0:0	6	uvlinesize
op	40:50	0:0	6	||
water	41:12	0:0	6	pic_arg
op	41:19	0:0	6	->
water	41:21	0:0	6	linesize
op	41:29	0:0	6	[
water	41:30	0:0	6	2
op	41:31	0:0	6	]
op	41:33	0:0	6	!=
water	41:36	0:0	6	s
op	41:37	0:0	6	->
water	41:39	0:0	6	uvlinesize
stmts	42:12	42:22	5	
water	42:12	0:0	6	direct
op	42:19	0:0	6	=
water	42:21	0:0	6	0
water	42:22	0:0	6	;
if	43:8	44:22	4	(( s -> width & 15 ) || ( s -> height & 15 ))
cond	43:12	43:46	5	( s -> width & 15 ) || ( s -> height & 15 )
water	43:12	0:0	6	(
water	43:13	0:0	6	s
op	43:14	0:0	6	->
water	43:16	0:0	6	width
op	43:22	0:0	6	&
water	43:24	0:0	6	15
water	43:26	0:0	6	)
op	43:28	0:0	6	||
water	43:31	0:0	6	(
water	43:32	0:0	6	s
op	43:33	0:0	6	->
water	43:35	0:0	6	height
op	43:42	0:0	6	&
water	43:44	0:0	6	15
water	43:46	0:0	6	)
stmts	44:12	44:22	5	
water	44:12	0:0	6	direct
op	44:19	0:0	6	=
water	44:21	0:0	6	0
water	44:22	0:0	6	;
if	45:8	46:22	4	((( intptr_t ) (pic_arg -> data [ 0 ] ) ) & ( STRIDE_ALIGN - 1 ))
cond	45:12	45:60	5	(( intptr_t ) (pic_arg -> data [ 0 ] ) ) & ( STRIDE_ALIGN - 1 )
water	45:12	0:0	6	(
call	45:13	45:40	6	(intptr_t)
arg	45:24	45:40	7	pic_arg->data[0]
water	45:24	0:0	8	pic_arg
op	45:31	0:0	8	->
water	45:33	0:0	8	data
op	45:37	0:0	8	[
water	45:38	0:0	8	0
op	45:39	0:0	8	]
water	45:41	0:0	6	)
op	45:43	0:0	6	&
water	45:45	0:0	6	(
water	45:46	0:0	6	STRIDE_ALIGN
op	45:58	0:0	6	-
water	45:59	0:0	6	1
water	45:60	0:0	6	)
stmts	46:12	46:22	5	
water	46:12	0:0	6	direct
op	46:19	0:0	6	=
water	46:21	0:0	6	0
water	46:22	0:0	6	;
if	47:8	48:22	4	(s -> linesize & ( STRIDE_ALIGN - 1 ))
cond	47:12	47:41	5	s -> linesize & ( STRIDE_ALIGN - 1 )
water	47:12	0:0	6	s
op	47:13	0:0	6	->
water	47:15	0:0	6	linesize
op	47:24	0:0	6	&
water	47:26	0:0	6	(
water	47:27	0:0	6	STRIDE_ALIGN
op	47:39	0:0	6	-
water	47:40	0:0	6	1
water	47:41	0:0	6	)
stmts	48:12	48:22	5	
water	48:12	0:0	6	direct
op	48:19	0:0	6	=
water	48:21	0:0	6	0
water	48:22	0:0	6	;
call	49:8	50:64	4	ff_dlog
arg	49:16	49:24	5	s->avctx
water	49:16	0:0	6	s
op	49:17	0:0	6	->
water	49:19	0:0	6	avctx
arg	49:26	49:77	5	"%d %d %"PTRDIFF_SPECIFIER" %"PTRDIFF_SPECIFIER"\n"
water	49:26	0:0	6	"%d %d %"
water	49:35	0:0	6	PTRDIFF_SPECIFIER
water	49:52	0:0	6	" %"
water	49:56	0:0	6	PTRDIFF_SPECIFIER
water	49:73	0:0	6	"\n"
arg	49:79	49:99	5	pic_arg->linesize[0]
water	49:79	0:0	6	pic_arg
op	49:86	0:0	6	->
water	49:88	0:0	6	linesize
op	49:96	0:0	6	[
water	49:97	0:0	6	0
op	49:98	0:0	6	]
arg	50:16	50:36	5	pic_arg->linesize[1]
water	50:16	0:0	6	pic_arg
op	50:23	0:0	6	->
water	50:25	0:0	6	linesize
op	50:33	0:0	6	[
water	50:34	0:0	6	1
op	50:35	0:0	6	]
arg	50:38	50:49	5	s->linesize
water	50:38	0:0	6	s
op	50:39	0:0	6	->
water	50:41	0:0	6	linesize
arg	50:51	50:64	5	s->uvlinesize
water	50:51	0:0	6	s
op	50:52	0:0	6	->
water	50:54	0:0	6	uvlinesize
water	50:65	0:0	4	;
water	51:8	0:0	4	i
op	51:10	0:0	4	=
call	51:12	51:63	4	ff_find_unused_picture
arg	51:35	51:43	5	s->avctx
water	51:35	0:0	6	s
op	51:36	0:0	6	->
water	51:38	0:0	6	avctx
arg	51:45	51:55	5	s->picture
water	51:45	0:0	6	s
op	51:46	0:0	6	->
water	51:48	0:0	6	picture
arg	51:57	51:63	5	direct
water	51:57	0:0	6	direct
water	51:64	0:0	4	;
if	52:8	53:20	4	(i < 0)
cond	52:12	52:16	5	i < 0
water	52:12	0:0	6	i
op	52:14	0:0	6	<
water	52:16	0:0	6	0
stmts	53:12	53:20	5	
return	53:12	53:20	6	i
water	53:19	0:0	7	i
water	54:8	0:0	4	pic
op	54:12	0:0	4	=
op	54:14	0:0	4	&
water	54:15	0:0	4	s
op	54:16	0:0	4	->
water	54:18	0:0	4	picture
op	54:25	0:0	4	[
water	54:26	0:0	4	i
op	54:27	0:0	4	]
water	54:28	0:0	4	;
water	55:8	0:0	4	pic
op	55:11	0:0	4	->
water	55:13	0:0	4	reference
op	55:23	0:0	4	=
water	55:25	0:0	4	3
water	55:26	0:0	4	;
if	56:8	59:8	4	(direct)
cond	56:12	56:12	5	direct
water	56:12	0:0	6	direct
stmts	56:20	59:8	5	
water	56:20	0:0	6	{
if	57:12	58:26	6	(( ret =av_frame_ref (pic -> f ,pic_arg ) ) < 0)
cond	57:16	57:56	7	( ret =av_frame_ref (pic -> f ,pic_arg ) ) < 0
water	57:16	0:0	8	(
water	57:17	0:0	8	ret
op	57:21	0:0	8	=
call	57:23	57:51	8	av_frame_ref
arg	57:36	57:42	9	pic->f
water	57:36	0:0	10	pic
op	57:39	0:0	10	->
water	57:41	0:0	10	f
arg	57:44	57:51	9	pic_arg
water	57:44	0:0	10	pic_arg
water	57:52	0:0	8	)
op	57:54	0:0	8	<
water	57:56	0:0	8	0
stmts	58:16	58:26	7	
return	58:16	58:26	8	ret
water	58:23	0:0	9	ret
water	59:8	0:0	6	}
water	60:8	0:0	4	ret
op	60:12	0:0	4	=
call	60:14	60:42	4	alloc_picture
arg	60:28	60:29	5	s
water	60:28	0:0	6	s
arg	60:31	60:34	5	pic
water	60:31	0:0	6	pic
arg	60:36	60:42	5	direct
water	60:36	0:0	6	direct
water	60:43	0:0	4	;
if	61:8	62:22	4	(ret < 0)
cond	61:12	61:18	5	ret < 0
water	61:12	0:0	6	ret
op	61:16	0:0	6	<
water	61:18	0:0	6	0
stmts	62:12	62:22	5	
return	62:12	62:22	6	ret
water	62:19	0:0	7	ret
if	63:8	109:8	4	(! direct)
cond	63:12	63:13	5	! direct
op	63:12	0:0	6	!
water	63:13	0:0	6	direct
stmts	63:21	109:8	5	
water	63:21	0:0	6	{
if	64:12	68:12	6	(pic -> f -> data [ 0 ] + INPLACE_OFFSET == pic_arg -> data [ 0 ] && pic -> f -> data [ 1 ] + INPLACE_OFFSET == pic_arg -> data [ 1 ] && pic -> f -> data [ 2 ] + INPLACE_OFFSET == pic_arg -> data [ 2 ])
cond	64:16	66:67	7	pic -> f -> data [ 0 ] + INPLACE_OFFSET == pic_arg -> data [ 0 ] && pic -> f -> data [ 1 ] + INPLACE_OFFSET == pic_arg -> data [ 1 ] && pic -> f -> data [ 2 ] + INPLACE_OFFSET == pic_arg -> data [ 2 ]
water	64:16	0:0	8	pic
op	64:19	0:0	8	->
water	64:21	0:0	8	f
op	64:22	0:0	8	->
water	64:24	0:0	8	data
op	64:28	0:0	8	[
water	64:29	0:0	8	0
op	64:30	0:0	8	]
op	64:32	0:0	8	+
water	64:34	0:0	8	INPLACE_OFFSET
op	64:49	0:0	8	==
water	64:52	0:0	8	pic_arg
op	64:59	0:0	8	->
water	64:61	0:0	8	data
op	64:65	0:0	8	[
water	64:66	0:0	8	0
op	64:67	0:0	8	]
op	64:69	0:0	8	&&
water	65:16	0:0	8	pic
op	65:19	0:0	8	->
water	65:21	0:0	8	f
op	65:22	0:0	8	->
water	65:24	0:0	8	data
op	65:28	0:0	8	[
water	65:29	0:0	8	1
op	65:30	0:0	8	]
op	65:32	0:0	8	+
water	65:34	0:0	8	INPLACE_OFFSET
op	65:49	0:0	8	==
water	65:52	0:0	8	pic_arg
op	65:59	0:0	8	->
water	65:61	0:0	8	data
op	65:65	0:0	8	[
water	65:66	0:0	8	1
op	65:67	0:0	8	]
op	65:69	0:0	8	&&
water	66:16	0:0	8	pic
op	66:19	0:0	8	->
water	66:21	0:0	8	f
op	66:22	0:0	8	->
water	66:24	0:0	8	data
op	66:28	0:0	8	[
water	66:29	0:0	8	2
op	66:30	0:0	8	]
op	66:32	0:0	8	+
water	66:34	0:0	8	INPLACE_OFFSET
op	66:49	0:0	8	==
water	66:52	0:0	8	pic_arg
op	66:59	0:0	8	->
water	66:61	0:0	8	data
op	66:65	0:0	8	[
water	66:66	0:0	8	2
op	66:67	0:0	8	]
stmts	66:70	68:12	7	
water	66:70	0:0	8	{
water	0:0	0:0	8	STATEMENTS
water	68:12	0:0	8	}
else	68:14	108:12	6
stmts	68:19	108:12	7	
water	68:19	0:0	8	{
decl	69:16	69:50	8	int	h_chroma_shift
water	69:34	0:0	8	,
decl	69:16	69:50	8	int	v_chroma_shift
call	70:16	72:64	8	av_pix_fmt_get_chroma_sub_sample
arg	70:49	70:66	9	s->avctx->pix_fmt
water	70:49	0:0	10	s
op	70:50	0:0	10	->
water	70:52	0:0	10	avctx
op	70:57	0:0	10	->
water	70:59	0:0	10	pix_fmt
arg	71:49	71:64	9	&h_chroma_shift
op	71:49	0:0	10	&
water	71:50	0:0	10	h_chroma_shift
arg	72:49	72:64	9	&v_chroma_shift
op	72:49	0:0	10	&
water	72:50	0:0	10	v_chroma_shift
water	72:65	0:0	8	;
for	73:16	107:16	8	(i = 0 ;i < 3;i ++)
forinit	73:21	73:26	9	i = 0 ;
water	73:21	0:0	10	i
op	73:23	0:0	10	=
water	73:25	0:0	10	0
water	73:26	0:0	10	;
cond	73:28	73:32	9	i < 3
water	73:28	0:0	10	i
op	73:30	0:0	10	<
water	73:32	0:0	10	3
forexpr	73:35	73:36	9	i ++
water	73:35	0:0	10	i
op	73:36	0:0	10	++
stmts	73:40	107:16	9	
water	73:40	0:0	10	{
decl	74:20	74:57	10	int	src_stride
op	74:35	0:0	10	=
water	74:37	0:0	10	pic_arg
op	74:44	0:0	10	->
water	74:46	0:0	10	linesize
op	74:54	0:0	10	[
water	74:55	0:0	10	i
op	74:56	0:0	10	]
decl	75:20	75:68	10	int	dst_stride
op	75:35	0:0	10	=
water	75:37	0:0	10	i
water	75:39	0:0	10	?
water	75:41	0:0	10	s
op	75:42	0:0	10	->
water	75:44	0:0	10	uvlinesize
water	75:55	0:0	10	:
water	75:57	0:0	10	s
op	75:58	0:0	10	->
water	75:60	0:0	10	linesize
decl	76:20	76:56	10	int	h_shift
op	76:32	0:0	10	=
water	76:34	0:0	10	i
water	76:36	0:0	10	?
water	76:38	0:0	10	h_chroma_shift
water	76:53	0:0	10	:
water	76:55	0:0	10	0
decl	77:20	77:56	10	int	v_shift
op	77:32	0:0	10	=
water	77:34	0:0	10	i
water	77:36	0:0	10	?
water	77:38	0:0	10	v_chroma_shift
water	77:53	0:0	10	:
water	77:55	0:0	10	0
decl	78:20	78:48	10	int	w
op	78:26	0:0	10	=
water	78:28	0:0	10	s
op	78:29	0:0	10	->
water	78:31	0:0	10	width
op	78:38	0:0	10	>>
water	78:41	0:0	10	h_shift
decl	79:20	79:48	10	int	h
op	79:26	0:0	10	=
water	79:28	0:0	10	s
op	79:29	0:0	10	->
water	79:31	0:0	10	height
op	79:38	0:0	10	>>
water	79:41	0:0	10	v_shift
decl	80:20	80:51	10	uint8_t	*src
op	80:33	0:0	10	=
water	80:35	0:0	10	pic_arg
op	80:42	0:0	10	->
water	80:44	0:0	10	data
op	80:48	0:0	10	[
water	80:49	0:0	10	i
op	80:50	0:0	10	]
decl	81:20	81:50	10	uint8_t	*dst
op	81:33	0:0	10	=
water	81:35	0:0	10	pic
op	81:38	0:0	10	->
water	81:40	0:0	10	f
op	81:41	0:0	10	->
water	81:43	0:0	10	data
op	81:47	0:0	10	[
water	81:48	0:0	10	i
op	81:49	0:0	10	]
decl	82:20	82:33	10	int	vpad
op	82:29	0:0	10	=
water	82:31	0:0	10	16
if	83:20	86:33	10	(s -> codec_id == AV_CODEC_ID_MPEG2VIDEO && ! s -> progressive_sequence &&FFALIGN (s -> height ,32 ) - s -> height > 16)
cond	83:27	85:64	11	s -> codec_id == AV_CODEC_ID_MPEG2VIDEO && ! s -> progressive_sequence &&FFALIGN (s -> height ,32 ) - s -> height > 16
water	83:27	0:0	12	s
op	83:28	0:0	12	->
water	83:30	0:0	12	codec_id
op	83:39	0:0	12	==
water	83:42	0:0	12	AV_CODEC_ID_MPEG2VIDEO
op	84:24	0:0	12	&&
op	84:27	0:0	12	!
water	84:28	0:0	12	s
op	84:29	0:0	12	->
water	84:31	0:0	12	progressive_sequence
op	85:24	0:0	12	&&
call	85:27	85:48	12	FFALIGN
arg	85:35	85:44	13	s->height
water	85:35	0:0	14	s
op	85:36	0:0	14	->
water	85:38	0:0	14	height
arg	85:46	85:48	13	32
water	85:46	0:0	14	32
op	85:50	0:0	12	-
water	85:52	0:0	12	s
op	85:53	0:0	12	->
water	85:55	0:0	12	height
op	85:62	0:0	12	>
water	85:64	0:0	12	16
stmts	86:24	86:33	11	
water	86:24	0:0	12	vpad
op	86:29	0:0	12	=
water	86:31	0:0	12	32
water	86:33	0:0	12	;
if	87:20	88:45	10	(! s -> avctx -> rc_buffer_size)
cond	87:24	87:35	11	! s -> avctx -> rc_buffer_size
op	87:24	0:0	12	!
water	87:25	0:0	12	s
op	87:26	0:0	12	->
water	87:28	0:0	12	avctx
op	87:33	0:0	12	->
water	87:35	0:0	12	rc_buffer_size
stmts	88:24	88:45	11	
water	88:24	0:0	12	dst
op	88:28	0:0	12	+=
water	88:31	0:0	12	INPLACE_OFFSET
water	88:45	0:0	12	;
if	89:20	90:56	10	(src_stride == dst_stride)
cond	89:24	89:38	11	src_stride == dst_stride
water	89:24	0:0	12	src_stride
op	89:35	0:0	12	==
water	89:38	0:0	12	dst_stride
stmts	90:24	90:56	11	
call	90:24	90:55	12	memcpy
arg	90:31	90:34	13	dst
water	90:31	0:0	14	dst
arg	90:36	90:39	13	src
water	90:36	0:0	14	src
arg	90:41	90:55	13	src_stride*h
water	90:41	0:0	14	src_stride
op	90:52	0:0	14	*
water	90:54	0:0	14	h
water	90:56	0:0	12	;
else	91:20	99:20	10
stmts	91:25	99:20	11	
water	91:25	0:0	12	{
decl	92:24	92:34	12	int	h2
op	92:31	0:0	12	=
water	92:33	0:0	12	h
decl	93:24	93:43	12	uint8_t	*dst2
op	93:38	0:0	12	=
water	93:40	0:0	12	dst
while	94:24	98:24	12	(h2 --)
cond	94:31	94:33	13	h2 --
water	94:31	0:0	14	h2
op	94:33	0:0	14	--
stmts	94:37	98:24	13	
water	94:37	0:0	14	{
call	95:28	95:47	14	memcpy
arg	95:35	95:39	15	dst2
water	95:35	0:0	16	dst2
arg	95:41	95:44	15	src
water	95:41	0:0	16	src
arg	95:46	95:47	15	w
water	95:46	0:0	16	w
water	95:48	0:0	14	;
water	96:28	0:0	14	dst2
op	96:33	0:0	14	+=
water	96:36	0:0	14	dst_stride
water	96:46	0:0	14	;
water	97:28	0:0	14	src
op	97:32	0:0	14	+=
water	97:35	0:0	14	src_stride
water	97:45	0:0	14	;
water	98:24	0:0	14	}
water	99:20	0:0	12	}
if	100:20	106:20	10	(( s -> width & 15 ) || ( s -> height & ( vpad - 1 ) ))
cond	100:24	100:64	11	( s -> width & 15 ) || ( s -> height & ( vpad - 1 ) )
water	100:24	0:0	12	(
water	100:25	0:0	12	s
op	100:26	0:0	12	->
water	100:28	0:0	12	width
op	100:34	0:0	12	&
water	100:36	0:0	12	15
water	100:38	0:0	12	)
op	100:40	0:0	12	||
water	100:43	0:0	12	(
water	100:44	0:0	12	s
op	100:45	0:0	12	->
water	100:47	0:0	12	height
op	100:54	0:0	12	&
water	100:56	0:0	12	(
water	100:57	0:0	12	vpad
op	100:61	0:0	12	-
water	100:62	0:0	12	1
water	100:63	0:0	12	)
water	100:64	0:0	12	)
stmts	100:67	106:20	11	
water	100:67	0:0	12	{
call	101:24	105:59	12	s->mpvencdsp.draw_edges
arg	101:48	101:51	13	dst
water	101:48	0:0	14	dst
arg	101:53	101:63	13	dst_stride
water	101:53	0:0	14	dst_stride
arg	102:48	102:49	13	w
water	102:48	0:0	14	w
arg	102:51	102:52	13	h
water	102:51	0:0	14	h
arg	103:48	103:61	13	16>>h_shift
water	103:48	0:0	14	16
op	103:51	0:0	14	>>
water	103:54	0:0	14	h_shift
arg	104:48	104:63	13	vpad>>v_shift
water	104:48	0:0	14	vpad
op	104:53	0:0	14	>>
water	104:56	0:0	14	v_shift
arg	105:48	105:59	13	EDGE_BOTTOM
water	105:48	0:0	14	EDGE_BOTTOM
water	105:60	0:0	12	;
water	106:20	0:0	12	}
water	107:16	0:0	10	}
water	108:12	0:0	8	}
water	109:8	0:0	6	}
water	110:8	0:0	4	ret
op	110:12	0:0	4	=
call	110:14	110:49	4	av_frame_copy_props
arg	110:34	110:40	5	pic->f
water	110:34	0:0	6	pic
op	110:37	0:0	6	->
water	110:39	0:0	6	f
arg	110:42	110:49	5	pic_arg
water	110:42	0:0	6	pic_arg
water	110:50	0:0	4	;
if	111:8	112:22	4	(ret < 0)
cond	111:12	111:18	5	ret < 0
water	111:12	0:0	6	ret
op	111:16	0:0	6	<
water	111:18	0:0	6	0
stmts	112:12	112:22	5	
return	112:12	112:22	6	ret
water	112:19	0:0	7	ret
water	113:8	0:0	4	pic
op	113:11	0:0	4	->
water	113:13	0:0	4	f
op	113:14	0:0	4	->
water	113:16	0:0	4	display_picture_number
op	113:39	0:0	4	=
water	113:41	0:0	4	display_picture_number
water	113:63	0:0	4	;
water	114:8	0:0	4	pic
op	114:11	0:0	4	->
water	114:13	0:0	4	f
op	114:14	0:0	4	->
water	114:16	0:0	4	pts
op	114:20	0:0	4	=
water	114:22	0:0	4	pts
water	114:25	0:0	4	;
water	115:4	0:0	4	}
for	117:4	118:53	2	(i = 1 ;i < MAX_PICTURE_COUNT;i ++)
forinit	117:9	117:14	3	i = 1 ;
water	117:9	0:0	4	i
op	117:11	0:0	4	=
water	117:13	0:0	4	1
water	117:14	0:0	4	;
cond	117:16	117:20	3	i < MAX_PICTURE_COUNT
water	117:16	0:0	4	i
op	117:18	0:0	4	<
water	117:20	0:0	4	MAX_PICTURE_COUNT
forexpr	117:40	117:41	3	i ++
water	117:40	0:0	4	i
op	117:41	0:0	4	++
stmts	118:8	118:53	3	
water	118:8	0:0	4	s
op	118:9	0:0	4	->
water	118:11	0:0	4	input_picture
op	118:24	0:0	4	[
water	118:25	0:0	4	i
op	118:27	0:0	4	-
water	118:29	0:0	4	1
op	118:30	0:0	4	]
op	118:32	0:0	4	=
water	118:34	0:0	4	s
op	118:35	0:0	4	->
water	118:37	0:0	4	input_picture
op	118:50	0:0	4	[
water	118:51	0:0	4	i
op	118:52	0:0	4	]
water	118:53	0:0	4	;
water	119:4	0:0	2	s
op	119:5	0:0	2	->
water	119:7	0:0	2	input_picture
op	119:20	0:0	2	[
water	119:21	0:0	2	encoding_delay
op	119:35	0:0	2	]
op	119:37	0:0	2	=
water	119:39	0:0	2	(
water	119:40	0:0	2	Picture
op	119:47	0:0	2	*
water	119:48	0:0	2	)
water	119:50	0:0	2	pic
water	119:53	0:0	2	;
return	120:4	120:12	2	0
water	120:11	0:0	3	0
