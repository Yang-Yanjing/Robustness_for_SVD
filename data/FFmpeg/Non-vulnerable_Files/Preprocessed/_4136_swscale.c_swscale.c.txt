func	1:0	456:0	0	static int	swscale
params	1:18	0:0	1	
param	1:19	1:32	2	SwsContext *	c
param	1:34	1:54	2	const uint8_t *	src[]
param	2:19	2:34	2	int	srcStride[]
param	2:36	2:49	2	int	srcSliceY
param	3:19	3:32	2	int	srcSliceH
param	3:34	3:48	2	uint8_t *	dst[]
param	3:50	3:65	2	int	dstStride[]
stmnts	0:0	455:26	1	
decl	8:4	8:46	2	const int	srcW
op	8:37	0:0	2	=
water	8:39	0:0	2	c
op	8:40	0:0	2	->
water	8:42	0:0	2	srcW
decl	10:4	10:46	2	const int	dstW
op	10:37	0:0	2	=
water	10:39	0:0	2	c
op	10:40	0:0	2	->
water	10:42	0:0	2	dstW
decl	11:4	11:46	2	const int	dstH
op	11:37	0:0	2	=
water	11:39	0:0	2	c
op	11:40	0:0	2	->
water	11:42	0:0	2	dstH
decl	13:4	13:49	2	const int	chrDstW
op	13:37	0:0	2	=
water	13:39	0:0	2	c
op	13:40	0:0	2	->
water	13:42	0:0	2	chrDstW
decl	14:4	14:49	2	const int	chrSrcW
op	14:37	0:0	2	=
water	14:39	0:0	2	c
op	14:40	0:0	2	->
water	14:42	0:0	2	chrSrcW
decl	15:4	15:49	2	const int	lumXInc
op	15:37	0:0	2	=
water	15:39	0:0	2	c
op	15:40	0:0	2	->
water	15:42	0:0	2	lumXInc
decl	16:4	16:49	2	const int	chrXInc
op	16:37	0:0	2	=
water	16:39	0:0	2	c
op	16:40	0:0	2	->
water	16:42	0:0	2	chrXInc
decl	18:4	18:53	2	const enum AVPixelFormat	dstFormat
op	18:39	0:0	2	=
water	18:41	0:0	2	c
op	18:42	0:0	2	->
water	18:44	0:0	2	dstFormat
decl	19:4	19:47	2	const int	flags
op	19:37	0:0	2	=
water	19:39	0:0	2	c
op	19:40	0:0	2	->
water	19:42	0:0	2	flags
decl	20:4	20:55	2	int32_t	*vLumFilterPos
op	20:37	0:0	2	=
water	20:39	0:0	2	c
op	20:40	0:0	2	->
water	20:42	0:0	2	vLumFilterPos
decl	21:4	21:55	2	int32_t	*vChrFilterPos
op	21:37	0:0	2	=
water	21:39	0:0	2	c
op	21:40	0:0	2	->
water	21:42	0:0	2	vChrFilterPos
decl	23:4	23:55	2	int32_t	*hLumFilterPos
op	23:37	0:0	2	=
water	23:39	0:0	2	c
op	23:40	0:0	2	->
water	23:42	0:0	2	hLumFilterPos
decl	24:4	24:55	2	int32_t	*hChrFilterPos
op	24:37	0:0	2	=
water	24:39	0:0	2	c
op	24:40	0:0	2	->
water	24:42	0:0	2	hChrFilterPos
decl	25:4	25:52	2	int16_t	*hLumFilter
op	25:37	0:0	2	=
water	25:39	0:0	2	c
op	25:40	0:0	2	->
water	25:42	0:0	2	hLumFilter
decl	26:4	26:52	2	int16_t	*hChrFilter
op	26:37	0:0	2	=
water	26:39	0:0	2	c
op	26:40	0:0	2	->
water	26:42	0:0	2	hChrFilter
decl	27:4	27:54	2	int32_t	*lumMmxFilter
op	27:37	0:0	2	=
water	27:39	0:0	2	c
op	27:40	0:0	2	->
water	27:42	0:0	2	lumMmxFilter
decl	28:4	28:54	2	int32_t	*chrMmxFilter
op	28:37	0:0	2	=
water	28:39	0:0	2	c
op	28:40	0:0	2	->
water	28:42	0:0	2	chrMmxFilter
decl	30:4	30:56	2	const int	vLumFilterSize
op	30:37	0:0	2	=
water	30:39	0:0	2	c
op	30:40	0:0	2	->
water	30:42	0:0	2	vLumFilterSize
decl	31:4	31:56	2	const int	vChrFilterSize
op	31:37	0:0	2	=
water	31:39	0:0	2	c
op	31:40	0:0	2	->
water	31:42	0:0	2	vChrFilterSize
decl	33:4	33:56	2	const int	hLumFilterSize
op	33:37	0:0	2	=
water	33:39	0:0	2	c
op	33:40	0:0	2	->
water	33:42	0:0	2	hLumFilterSize
decl	34:4	34:56	2	const int	hChrFilterSize
op	34:37	0:0	2	=
water	34:39	0:0	2	c
op	34:40	0:0	2	->
water	34:42	0:0	2	hChrFilterSize
decl	35:4	35:51	2	int16_t	**lumPixBuf
op	35:37	0:0	2	=
water	35:39	0:0	2	c
op	35:40	0:0	2	->
water	35:42	0:0	2	lumPixBuf
decl	36:4	36:52	2	int16_t	**chrUPixBuf
op	36:37	0:0	2	=
water	36:39	0:0	2	c
op	36:40	0:0	2	->
water	36:42	0:0	2	chrUPixBuf
decl	37:4	37:52	2	int16_t	**chrVPixBuf
op	37:37	0:0	2	=
water	37:39	0:0	2	c
op	37:40	0:0	2	->
water	37:42	0:0	2	chrVPixBuf
decl	39:4	39:51	2	int16_t	**alpPixBuf
op	39:37	0:0	2	=
water	39:39	0:0	2	c
op	39:40	0:0	2	->
water	39:42	0:0	2	alpPixBuf
decl	40:4	40:53	2	const int	vLumBufSize
op	40:37	0:0	2	=
water	40:39	0:0	2	c
op	40:40	0:0	2	->
water	40:42	0:0	2	vLumBufSize
decl	41:4	41:53	2	const int	vChrBufSize
op	41:37	0:0	2	=
water	41:39	0:0	2	c
op	41:40	0:0	2	->
water	41:42	0:0	2	vChrBufSize
decl	43:4	43:58	2	uint8_t	*formatConvBuffer
op	43:37	0:0	2	=
water	43:39	0:0	2	c
op	43:40	0:0	2	->
water	43:42	0:0	2	formatConvBuffer
decl	44:4	44:49	2	uint32_t	*pal
op	44:37	0:0	2	=
water	44:39	0:0	2	c
op	44:40	0:0	2	->
water	44:42	0:0	2	pal_yuv
decl	46:4	46:52	2	yuv2planar1_fn	yuv2plane1
op	46:37	0:0	2	=
water	46:39	0:0	2	c
op	46:40	0:0	2	->
water	46:42	0:0	2	yuv2plane1
decl	47:4	47:52	2	yuv2planarX_fn	yuv2planeX
op	47:37	0:0	2	=
water	47:39	0:0	2	c
op	47:40	0:0	2	->
water	47:42	0:0	2	yuv2planeX
decl	48:4	48:52	2	yuv2interleavedX_fn	yuv2nv12cX
op	48:37	0:0	2	=
water	48:39	0:0	2	c
op	48:40	0:0	2	->
water	48:42	0:0	2	yuv2nv12cX
decl	49:4	49:53	2	yuv2packed1_fn	yuv2packed1
op	49:37	0:0	2	=
water	49:39	0:0	2	c
op	49:40	0:0	2	->
water	49:42	0:0	2	yuv2packed1
decl	50:4	50:53	2	yuv2packed2_fn	yuv2packed2
op	50:37	0:0	2	=
water	50:39	0:0	2	c
op	50:40	0:0	2	->
water	50:42	0:0	2	yuv2packed2
decl	51:4	51:53	2	yuv2packedX_fn	yuv2packedX
op	51:37	0:0	2	=
water	51:39	0:0	2	c
op	51:40	0:0	2	->
water	51:42	0:0	2	yuv2packedX
decl	52:4	52:50	2	yuv2anyX_fn	yuv2anyX
op	52:37	0:0	2	=
water	52:39	0:0	2	c
op	52:40	0:0	2	->
water	52:42	0:0	2	yuv2anyX
decl	53:4	53:86	2	const int	chrSrcSliceY
op	53:37	0:0	2	=
water	53:54	0:0	2	srcSliceY
op	53:64	0:0	2	>>
water	53:67	0:0	2	c
op	53:68	0:0	2	->
water	53:70	0:0	2	chrSrcVSubSample
decl	54:4	54:87	2	const int	chrSrcSliceH
op	54:37	0:0	2	=
call	54:39	54:86	3	FF_CEIL_RSHIFT
arg	54:54	54:63	4	srcSliceH
water	54:54	0:0	5	srcSliceH
arg	54:67	54:86	4	c->chrSrcVSubSample
water	54:67	0:0	5	c
op	54:68	0:0	5	->
water	54:70	0:0	5	chrSrcVSubSample
decl	55:4	56:60	2	int	should_dither
op	55:37	0:0	2	=
call	55:39	55:64	3	is9_OR_10BPS
arg	55:52	55:64	4	c->srcFormat
water	55:52	0:0	5	c
op	55:53	0:0	5	->
water	55:55	0:0	5	srcFormat
op	55:66	0:0	2	||
call	56:39	56:59	3	is16BPS
arg	56:47	56:59	4	c->srcFormat
water	56:47	0:0	5	c
op	56:48	0:0	5	->
water	56:50	0:0	5	srcFormat
decl	57:4	57:16	2	int	lastDstY
decl	59:4	59:30	2	int	dstY
op	59:21	0:0	2	=
water	59:23	0:0	2	c
op	59:24	0:0	2	->
water	59:26	0:0	2	dstY
decl	60:4	60:37	2	int	lumBufIndex
op	60:21	0:0	2	=
water	60:23	0:0	2	c
op	60:24	0:0	2	->
water	60:26	0:0	2	lumBufIndex
decl	61:4	61:37	2	int	chrBufIndex
op	61:21	0:0	2	=
water	61:23	0:0	2	c
op	61:24	0:0	2	->
water	61:26	0:0	2	chrBufIndex
decl	62:4	62:38	2	int	lastInLumBuf
op	62:21	0:0	2	=
water	62:23	0:0	2	c
op	62:24	0:0	2	->
water	62:26	0:0	2	lastInLumBuf
decl	63:4	63:38	2	int	lastInChrBuf
op	63:21	0:0	2	=
water	63:23	0:0	2	c
op	63:24	0:0	2	->
water	63:26	0:0	2	lastInChrBuf
decl	64:4	64:44	2	int	perform_gamma
op	64:22	0:0	2	=
water	64:24	0:0	2	c
op	64:25	0:0	2	->
water	64:27	0:0	2	is_internal_gamma
decl	66:4	66:20	2	int	lumStart
op	66:17	0:0	2	=
water	66:19	0:0	2	0
decl	67:4	67:32	2	int	lumEnd
op	67:15	0:0	2	=
water	67:17	0:0	2	c
op	67:18	0:0	2	->
water	67:20	0:0	2	descIndex
op	67:29	0:0	2	[
water	67:30	0:0	2	0
op	67:31	0:0	2	]
decl	68:4	68:25	2	int	chrStart
op	68:17	0:0	2	=
water	68:19	0:0	2	lumEnd
decl	69:4	69:32	2	int	chrEnd
op	69:15	0:0	2	=
water	69:17	0:0	2	c
op	69:18	0:0	2	->
water	69:20	0:0	2	descIndex
op	69:29	0:0	2	[
water	69:30	0:0	2	1
op	69:31	0:0	2	]
decl	70:4	70:23	2	int	vStart
op	70:15	0:0	2	=
water	70:17	0:0	2	chrEnd
decl	71:4	71:25	2	int	vEnd
op	71:13	0:0	2	=
water	71:15	0:0	2	c
op	71:16	0:0	2	->
water	71:18	0:0	2	numDesc
decl	72:4	72:45	2	SwsSlice	*src_slice
op	72:24	0:0	2	=
op	72:26	0:0	2	&
water	72:27	0:0	2	c
op	72:28	0:0	2	->
water	72:30	0:0	2	slice
op	72:35	0:0	2	[
water	72:36	0:0	2	lumStart
op	72:44	0:0	2	]
decl	73:4	73:51	2	SwsSlice	*hout_slice
op	73:25	0:0	2	=
op	73:27	0:0	2	&
water	73:28	0:0	2	c
op	73:29	0:0	2	->
water	73:31	0:0	2	slice
op	73:36	0:0	2	[
water	73:37	0:0	2	c
op	73:38	0:0	2	->
water	73:40	0:0	2	numSlice
op	73:48	0:0	2	-
water	73:49	0:0	2	2
op	73:50	0:0	2	]
decl	74:4	74:51	2	SwsSlice	*vout_slice
op	74:25	0:0	2	=
op	74:27	0:0	2	&
water	74:28	0:0	2	c
op	74:29	0:0	2	->
water	74:31	0:0	2	slice
op	74:36	0:0	2	[
water	74:37	0:0	2	c
op	74:38	0:0	2	->
water	74:40	0:0	2	numSlice
op	74:48	0:0	2	-
water	74:49	0:0	2	1
op	74:50	0:0	2	]
decl	75:4	75:39	2	SwsFilterDescriptor	*desc
op	75:30	0:0	2	=
water	75:32	0:0	2	c
op	75:33	0:0	2	->
water	75:35	0:0	2	desc
decl	76:4	76:23	2	int	hasLumHoles
op	76:20	0:0	2	=
water	76:22	0:0	2	1
decl	77:4	77:23	2	int	hasChrHoles
op	77:20	0:0	2	=
water	77:22	0:0	2	1
if	80:4	82:4	2	(!usePal (c -> srcFormat ))
cond	80:8	80:28	3	!usePal (c -> srcFormat )
op	80:8	0:0	4	!
call	80:9	80:28	4	usePal
arg	80:16	80:28	5	c->srcFormat
water	80:16	0:0	6	c
op	80:17	0:0	6	->
water	80:19	0:0	6	srcFormat
stmts	80:31	82:4	3	
water	80:31	0:0	4	{
water	81:8	0:0	4	pal
op	81:12	0:0	4	=
water	81:14	0:0	4	c
op	81:15	0:0	4	->
water	81:17	0:0	4	input_rgb2yuv_table
water	81:36	0:0	4	;
water	82:4	0:0	4	}
if	84:4	93:4	2	(isPacked (c -> srcFormat ))
cond	84:8	84:29	3	isPacked (c -> srcFormat )
call	84:8	84:29	4	isPacked
arg	84:17	84:29	5	c->srcFormat
water	84:17	0:0	6	c
op	84:18	0:0	6	->
water	84:20	0:0	6	srcFormat
stmts	84:32	93:4	3	
water	84:32	0:0	4	{
water	85:8	0:0	4	src
op	85:11	0:0	4	[
water	85:12	0:0	4	0
op	85:13	0:0	4	]
op	85:15	0:0	4	=
water	86:8	0:0	4	src
op	86:11	0:0	4	[
water	86:12	0:0	4	1
op	86:13	0:0	4	]
op	86:15	0:0	4	=
water	87:8	0:0	4	src
op	87:11	0:0	4	[
water	87:12	0:0	4	2
op	87:13	0:0	4	]
op	87:15	0:0	4	=
water	88:8	0:0	4	src
op	88:11	0:0	4	[
water	88:12	0:0	4	3
op	88:13	0:0	4	]
op	88:15	0:0	4	=
water	88:17	0:0	4	src
op	88:20	0:0	4	[
water	88:21	0:0	4	0
op	88:22	0:0	4	]
water	88:23	0:0	4	;
water	89:8	0:0	4	srcStride
op	89:17	0:0	4	[
water	89:18	0:0	4	0
op	89:19	0:0	4	]
op	89:21	0:0	4	=
water	90:8	0:0	4	srcStride
op	90:17	0:0	4	[
water	90:18	0:0	4	1
op	90:19	0:0	4	]
op	90:21	0:0	4	=
water	91:8	0:0	4	srcStride
op	91:17	0:0	4	[
water	91:18	0:0	4	2
op	91:19	0:0	4	]
op	91:21	0:0	4	=
water	92:8	0:0	4	srcStride
op	92:17	0:0	4	[
water	92:18	0:0	4	3
op	92:19	0:0	4	]
op	92:21	0:0	4	=
water	92:23	0:0	4	srcStride
op	92:32	0:0	4	[
water	92:33	0:0	4	0
op	92:34	0:0	4	]
water	92:35	0:0	4	;
water	93:4	0:0	4	}
water	94:4	0:0	2	srcStride
op	94:13	0:0	2	[
water	94:14	0:0	2	1
op	94:15	0:0	2	]
op	94:17	0:0	2	<<=
water	94:21	0:0	2	c
op	94:22	0:0	2	->
water	94:24	0:0	2	vChrDrop
water	94:32	0:0	2	;
water	95:4	0:0	2	srcStride
op	95:13	0:0	2	[
water	95:14	0:0	2	2
op	95:15	0:0	2	]
op	95:17	0:0	2	<<=
water	95:21	0:0	2	c
op	95:22	0:0	2	->
water	95:24	0:0	2	vChrDrop
water	95:32	0:0	2	;
call	96:4	100:60	2	DEBUG_BUFFERS
arg	96:18	96:90	3	"swscale() %p[%d] %p[%d] %p[%d] %p[%d] -> %p[%d] %p[%d] %p[%d] %p[%d]\n"
water	96:18	0:0	4	"swscale() %p[%d] %p[%d] %p[%d] %p[%d] -> %p[%d] %p[%d] %p[%d] %p[%d]\n"
arg	97:18	97:24	3	src[0]
water	97:18	0:0	4	src
op	97:21	0:0	4	[
water	97:22	0:0	4	0
op	97:23	0:0	4	]
arg	97:26	97:38	3	srcStride[0]
water	97:26	0:0	4	srcStride
op	97:35	0:0	4	[
water	97:36	0:0	4	0
op	97:37	0:0	4	]
arg	97:40	97:46	3	src[1]
water	97:40	0:0	4	src
op	97:43	0:0	4	[
water	97:44	0:0	4	1
op	97:45	0:0	4	]
arg	97:48	97:60	3	srcStride[1]
water	97:48	0:0	4	srcStride
op	97:57	0:0	4	[
water	97:58	0:0	4	1
op	97:59	0:0	4	]
arg	98:18	98:24	3	src[2]
water	98:18	0:0	4	src
op	98:21	0:0	4	[
water	98:22	0:0	4	2
op	98:23	0:0	4	]
arg	98:26	98:38	3	srcStride[2]
water	98:26	0:0	4	srcStride
op	98:35	0:0	4	[
water	98:36	0:0	4	2
op	98:37	0:0	4	]
arg	98:40	98:46	3	src[3]
water	98:40	0:0	4	src
op	98:43	0:0	4	[
water	98:44	0:0	4	3
op	98:45	0:0	4	]
arg	98:48	98:60	3	srcStride[3]
water	98:48	0:0	4	srcStride
op	98:57	0:0	4	[
water	98:58	0:0	4	3
op	98:59	0:0	4	]
arg	99:18	99:24	3	dst[0]
water	99:18	0:0	4	dst
op	99:21	0:0	4	[
water	99:22	0:0	4	0
op	99:23	0:0	4	]
arg	99:26	99:38	3	dstStride[0]
water	99:26	0:0	4	dstStride
op	99:35	0:0	4	[
water	99:36	0:0	4	0
op	99:37	0:0	4	]
arg	99:40	99:46	3	dst[1]
water	99:40	0:0	4	dst
op	99:43	0:0	4	[
water	99:44	0:0	4	1
op	99:45	0:0	4	]
arg	99:48	99:60	3	dstStride[1]
water	99:48	0:0	4	dstStride
op	99:57	0:0	4	[
water	99:58	0:0	4	1
op	99:59	0:0	4	]
arg	100:18	100:24	3	dst[2]
water	100:18	0:0	4	dst
op	100:21	0:0	4	[
water	100:22	0:0	4	2
op	100:23	0:0	4	]
arg	100:26	100:38	3	dstStride[2]
water	100:26	0:0	4	dstStride
op	100:35	0:0	4	[
water	100:36	0:0	4	2
op	100:37	0:0	4	]
arg	100:40	100:46	3	dst[3]
water	100:40	0:0	4	dst
op	100:43	0:0	4	[
water	100:44	0:0	4	3
op	100:45	0:0	4	]
arg	100:48	100:60	3	dstStride[3]
water	100:48	0:0	4	dstStride
op	100:57	0:0	4	[
water	100:58	0:0	4	3
op	100:59	0:0	4	]
water	100:61	0:0	2	;
call	101:4	102:50	2	DEBUG_BUFFERS
arg	101:18	101:67	3	"srcSliceY: %d srcSliceH: %d dstY: %d dstH: %d\n"
water	101:18	0:0	4	"srcSliceY: %d srcSliceH: %d dstY: %d dstH: %d\n"
arg	102:18	102:27	3	srcSliceY
water	102:18	0:0	4	srcSliceY
arg	102:29	102:38	3	srcSliceH
water	102:29	0:0	4	srcSliceH
arg	102:40	102:44	3	dstY
water	102:40	0:0	4	dstY
arg	102:46	102:50	3	dstH
water	102:46	0:0	4	dstH
water	102:51	0:0	2	;
call	103:4	104:74	2	DEBUG_BUFFERS
arg	103:18	103:91	3	"vLumFilterSize: %d vLumBufSize: %d vChrFilterSize: %d vChrBufSize: %d\n"
water	103:18	0:0	4	"vLumFilterSize: %d vLumBufSize: %d vChrFilterSize: %d vChrBufSize: %d\n"
arg	104:18	104:32	3	vLumFilterSize
water	104:18	0:0	4	vLumFilterSize
arg	104:34	104:45	3	vLumBufSize
water	104:34	0:0	4	vLumBufSize
arg	104:47	104:61	3	vChrFilterSize
water	104:47	0:0	4	vChrFilterSize
arg	104:63	104:74	3	vChrBufSize
water	104:63	0:0	4	vChrBufSize
water	104:75	0:0	2	;
if	105:4	114:4	2	(dstStride [ 0 ] & 15 || dstStride [ 1 ] & 15 || dstStride [ 2 ] & 15 || dstStride [ 3 ] & 15)
cond	105:8	106:40	3	dstStride [ 0 ] & 15 || dstStride [ 1 ] & 15 || dstStride [ 2 ] & 15 || dstStride [ 3 ] & 15
water	105:8	0:0	4	dstStride
op	105:17	0:0	4	[
water	105:18	0:0	4	0
op	105:19	0:0	4	]
op	105:20	0:0	4	&
water	105:21	0:0	4	15
op	105:24	0:0	4	||
water	105:27	0:0	4	dstStride
op	105:36	0:0	4	[
water	105:37	0:0	4	1
op	105:38	0:0	4	]
op	105:39	0:0	4	&
water	105:40	0:0	4	15
op	105:43	0:0	4	||
water	106:8	0:0	4	dstStride
op	106:17	0:0	4	[
water	106:18	0:0	4	2
op	106:19	0:0	4	]
op	106:20	0:0	4	&
water	106:21	0:0	4	15
op	106:24	0:0	4	||
water	106:27	0:0	4	dstStride
op	106:36	0:0	4	[
water	106:37	0:0	4	3
op	106:38	0:0	4	]
op	106:39	0:0	4	&
water	106:40	0:0	4	15
stmts	106:44	114:4	3	
water	106:44	0:0	4	{
water	107:8	0:0	4	static
water	107:15	0:0	4	int
water	107:19	0:0	4	warnedAlready
op	107:33	0:0	4	=
water	107:35	0:0	4	0
water	107:36	0:0	4	;
if	108:8	113:8	4	(flags & SWS_PRINT_INFO && ! warnedAlready)
cond	108:12	108:39	5	flags & SWS_PRINT_INFO && ! warnedAlready
water	108:12	0:0	6	flags
op	108:18	0:0	6	&
water	108:20	0:0	6	SWS_PRINT_INFO
op	108:35	0:0	6	&&
op	108:38	0:0	6	!
water	108:39	0:0	6	warnedAlready
stmts	108:54	113:8	5	
water	108:54	0:0	6	{
call	109:12	111:75	6	av_log
arg	109:19	109:20	7	c
water	109:19	0:0	8	c
arg	109:22	109:36	7	AV_LOG_WARNING
water	109:22	0:0	8	AV_LOG_WARNING
arg	110:19	111:75	7	"Warning: dstStride is not aligned!\n""         ->cannot do aligned memory accesses anymore\n"
water	110:19	0:0	8	"Warning: dstStride is not aligned!\n"
water	111:19	0:0	8	"         ->cannot do aligned memory accesses anymore\n"
water	111:76	0:0	6	;
water	112:12	0:0	6	warnedAlready
op	112:26	0:0	6	=
water	112:28	0:0	6	1
water	112:29	0:0	6	;
water	113:8	0:0	6	}
water	114:4	0:0	4	}
if	115:4	126:4	2	(( uintptr_t ) dst [ 0 ] & 15 || ( uintptr_t ) dst [ 1 ] & 15 || ( uintptr_t ) dst [ 2 ] & 15 || ( uintptr_t ) src [ 0 ] & 15 || ( uintptr_t ) src [ 1 ] & 15 || ( uintptr_t ) src [ 2 ] & 15 || dstStride [ 0 ] & 15 || dstStride [ 1 ] & 15 || dstStride [ 2 ] & 15 || dstStride [ 3 ] & 15 || srcStride [ 0 ] & 15 || srcStride [ 1 ] & 15 || srcStride [ 2 ] & 15 || srcStride [ 3 ] & 15)
cond	115:11	118:81	3	( uintptr_t ) dst [ 0 ] & 15 || ( uintptr_t ) dst [ 1 ] & 15 || ( uintptr_t ) dst [ 2 ] & 15 || ( uintptr_t ) src [ 0 ] & 15 || ( uintptr_t ) src [ 1 ] & 15 || ( uintptr_t ) src [ 2 ] & 15 || dstStride [ 0 ] & 15 || dstStride [ 1 ] & 15 || dstStride [ 2 ] & 15 || dstStride [ 3 ] & 15 || srcStride [ 0 ] & 15 || srcStride [ 1 ] & 15 || srcStride [ 2 ] & 15 || srcStride [ 3 ] & 15
water	115:11	0:0	4	(
water	115:12	0:0	4	uintptr_t
water	115:21	0:0	4	)
water	115:22	0:0	4	dst
op	115:25	0:0	4	[
water	115:26	0:0	4	0
op	115:27	0:0	4	]
op	115:28	0:0	4	&
water	115:29	0:0	4	15
op	115:32	0:0	4	||
water	115:35	0:0	4	(
water	115:36	0:0	4	uintptr_t
water	115:45	0:0	4	)
water	115:46	0:0	4	dst
op	115:49	0:0	4	[
water	115:50	0:0	4	1
op	115:51	0:0	4	]
op	115:52	0:0	4	&
water	115:53	0:0	4	15
op	115:56	0:0	4	||
water	115:59	0:0	4	(
water	115:60	0:0	4	uintptr_t
water	115:69	0:0	4	)
water	115:70	0:0	4	dst
op	115:73	0:0	4	[
water	115:74	0:0	4	2
op	115:75	0:0	4	]
op	115:76	0:0	4	&
water	115:77	0:0	4	15
op	116:8	0:0	4	||
water	116:11	0:0	4	(
water	116:12	0:0	4	uintptr_t
water	116:21	0:0	4	)
water	116:22	0:0	4	src
op	116:25	0:0	4	[
water	116:26	0:0	4	0
op	116:27	0:0	4	]
op	116:28	0:0	4	&
water	116:29	0:0	4	15
op	116:32	0:0	4	||
water	116:35	0:0	4	(
water	116:36	0:0	4	uintptr_t
water	116:45	0:0	4	)
water	116:46	0:0	4	src
op	116:49	0:0	4	[
water	116:50	0:0	4	1
op	116:51	0:0	4	]
op	116:52	0:0	4	&
water	116:53	0:0	4	15
op	116:56	0:0	4	||
water	116:59	0:0	4	(
water	116:60	0:0	4	uintptr_t
water	116:69	0:0	4	)
water	116:70	0:0	4	src
op	116:73	0:0	4	[
water	116:74	0:0	4	2
op	116:75	0:0	4	]
op	116:76	0:0	4	&
water	116:77	0:0	4	15
op	117:8	0:0	4	||
water	117:11	0:0	4	dstStride
op	117:20	0:0	4	[
water	117:21	0:0	4	0
op	117:22	0:0	4	]
op	117:23	0:0	4	&
water	117:24	0:0	4	15
op	117:27	0:0	4	||
water	117:30	0:0	4	dstStride
op	117:39	0:0	4	[
water	117:40	0:0	4	1
op	117:41	0:0	4	]
op	117:42	0:0	4	&
water	117:43	0:0	4	15
op	117:46	0:0	4	||
water	117:49	0:0	4	dstStride
op	117:58	0:0	4	[
water	117:59	0:0	4	2
op	117:60	0:0	4	]
op	117:61	0:0	4	&
water	117:62	0:0	4	15
op	117:65	0:0	4	||
water	117:68	0:0	4	dstStride
op	117:77	0:0	4	[
water	117:78	0:0	4	3
op	117:79	0:0	4	]
op	117:80	0:0	4	&
water	117:81	0:0	4	15
op	118:8	0:0	4	||
water	118:11	0:0	4	srcStride
op	118:20	0:0	4	[
water	118:21	0:0	4	0
op	118:22	0:0	4	]
op	118:23	0:0	4	&
water	118:24	0:0	4	15
op	118:27	0:0	4	||
water	118:30	0:0	4	srcStride
op	118:39	0:0	4	[
water	118:40	0:0	4	1
op	118:41	0:0	4	]
op	118:42	0:0	4	&
water	118:43	0:0	4	15
op	118:46	0:0	4	||
water	118:49	0:0	4	srcStride
op	118:58	0:0	4	[
water	118:59	0:0	4	2
op	118:60	0:0	4	]
op	118:61	0:0	4	&
water	118:62	0:0	4	15
op	118:65	0:0	4	||
water	118:68	0:0	4	srcStride
op	118:77	0:0	4	[
water	118:78	0:0	4	3
op	118:79	0:0	4	]
op	118:80	0:0	4	&
water	118:81	0:0	4	15
stmts	119:6	126:4	3	
water	119:6	0:0	4	{
water	120:8	0:0	4	static
water	120:15	0:0	4	int
water	120:19	0:0	4	warnedAlready
op	120:32	0:0	4	=
water	120:33	0:0	4	0
water	120:34	0:0	4	;
decl	121:8	121:42	4	int	cpu_flags
op	121:22	0:0	4	=
call	121:24	121:41	5	av_get_cpu_flags
if	122:8	125:8	4	(HAVE_MMXEXT && ( cpu_flags & AV_CPU_FLAG_SSE2 ) && ! warnedAlready)
cond	122:12	122:62	5	HAVE_MMXEXT && ( cpu_flags & AV_CPU_FLAG_SSE2 ) && ! warnedAlready
water	122:12	0:0	6	HAVE_MMXEXT
op	122:24	0:0	6	&&
water	122:27	0:0	6	(
water	122:28	0:0	6	cpu_flags
op	122:38	0:0	6	&
water	122:40	0:0	6	AV_CPU_FLAG_SSE2
water	122:56	0:0	6	)
op	122:58	0:0	6	&&
op	122:61	0:0	6	!
water	122:62	0:0	6	warnedAlready
stmts	122:76	125:8	5	
water	122:76	0:0	6	{
call	123:12	123:100	6	av_log
arg	123:19	123:20	7	c
water	123:19	0:0	8	c
arg	123:22	123:36	7	AV_LOG_WARNING
water	123:22	0:0	8	AV_LOG_WARNING
arg	123:38	123:100	7	"Warning: data is not aligned! This can lead to a speedloss\n"
water	123:38	0:0	8	"Warning: data is not aligned! This can lead to a speedloss\n"
water	123:101	0:0	6	;
water	124:12	0:0	6	warnedAlready
op	124:25	0:0	6	=
water	124:26	0:0	6	1
water	124:27	0:0	6	;
water	125:8	0:0	6	}
water	126:4	0:0	4	}
if	130:4	136:4	2	(srcSliceY == 0)
cond	130:8	130:21	3	srcSliceY == 0
water	130:8	0:0	4	srcSliceY
op	130:18	0:0	4	==
water	130:21	0:0	4	0
stmts	130:24	136:4	3	
water	130:24	0:0	4	{
water	131:8	0:0	4	lumBufIndex
op	131:21	0:0	4	=
op	131:23	0:0	4	-
water	131:24	0:0	4	1
water	131:25	0:0	4	;
water	132:8	0:0	4	chrBufIndex
op	132:21	0:0	4	=
op	132:23	0:0	4	-
water	132:24	0:0	4	1
water	132:25	0:0	4	;
water	133:8	0:0	4	dstY
op	133:21	0:0	4	=
water	133:23	0:0	4	0
water	133:24	0:0	4	;
water	134:8	0:0	4	lastInLumBuf
op	134:21	0:0	4	=
op	134:23	0:0	4	-
water	134:24	0:0	4	1
water	134:25	0:0	4	;
water	135:8	0:0	4	lastInChrBuf
op	135:21	0:0	4	=
op	135:23	0:0	4	-
water	135:24	0:0	4	1
water	135:25	0:0	4	;
water	136:4	0:0	4	}
if	137:4	139:4	2	(! should_dither)
cond	137:8	137:9	3	! should_dither
op	137:8	0:0	4	!
water	137:9	0:0	4	should_dither
stmts	137:24	139:4	3	
water	137:24	0:0	4	{
water	138:8	0:0	4	c
op	138:9	0:0	4	->
water	138:11	0:0	4	chrDither8
op	138:22	0:0	4	=
water	138:24	0:0	4	c
op	138:25	0:0	4	->
water	138:27	0:0	4	lumDither8
op	138:38	0:0	4	=
water	138:40	0:0	4	sws_pb_64
water	138:49	0:0	4	;
water	139:4	0:0	4	}
water	140:4	0:0	2	lastDstY
op	140:13	0:0	2	=
water	140:15	0:0	2	dstY
water	140:19	0:0	2	;
call	142:4	143:86	2	ff_init_vscale_pfn
arg	142:23	142:24	3	c
water	142:23	0:0	4	c
arg	142:26	142:36	3	yuv2plane1
water	142:26	0:0	4	yuv2plane1
arg	142:38	142:48	3	yuv2planeX
water	142:38	0:0	4	yuv2planeX
arg	142:50	142:60	3	yuv2nv12cX
water	142:50	0:0	4	yuv2nv12cX
arg	143:19	143:30	3	yuv2packed1
water	143:19	0:0	4	yuv2packed1
arg	143:32	143:43	3	yuv2packed2
water	143:32	0:0	4	yuv2packed2
arg	143:45	143:56	3	yuv2packedX
water	143:45	0:0	4	yuv2packedX
arg	143:58	143:66	3	yuv2anyX
water	143:58	0:0	4	yuv2anyX
arg	143:68	143:86	3	c->use_mmx_vfilter
water	143:68	0:0	4	c
op	143:69	0:0	4	->
water	143:71	0:0	4	use_mmx_vfilter
water	143:87	0:0	2	;
call	144:4	145:60	2	ff_init_slice_from_src
arg	144:27	144:36	3	src_slice
water	144:27	0:0	4	src_slice
arg	144:38	144:52	3	(uint8_t**)src
water	144:38	0:0	4	(
water	144:39	0:0	4	uint8_t
op	144:46	0:0	4	*
op	144:47	0:0	4	*
water	144:48	0:0	4	)
water	144:49	0:0	4	src
arg	144:54	144:63	3	srcStride
water	144:54	0:0	4	srcStride
arg	144:65	144:72	3	c->srcW
water	144:65	0:0	4	c
op	144:66	0:0	4	->
water	144:68	0:0	4	srcW
arg	145:12	145:21	3	srcSliceY
water	145:12	0:0	4	srcSliceY
arg	145:23	145:32	3	srcSliceH
water	145:23	0:0	4	srcSliceH
arg	145:34	145:46	3	chrSrcSliceY
water	145:34	0:0	4	chrSrcSliceY
arg	145:48	145:60	3	chrSrcSliceH
water	145:48	0:0	4	chrSrcSliceH
water	145:61	0:0	2	;
call	146:4	148:53	2	ff_init_slice_from_src
arg	146:27	146:37	3	vout_slice
water	146:27	0:0	4	vout_slice
arg	146:39	146:53	3	(uint8_t**)dst
water	146:39	0:0	4	(
water	146:40	0:0	4	uint8_t
op	146:47	0:0	4	*
op	146:48	0:0	4	*
water	146:49	0:0	4	)
water	146:50	0:0	4	dst
arg	146:55	146:64	3	dstStride
water	146:55	0:0	4	dstStride
arg	146:66	146:73	3	c->dstW
water	146:66	0:0	4	c
op	146:67	0:0	4	->
water	146:69	0:0	4	dstW
arg	147:12	147:16	3	dstY
water	147:12	0:0	4	dstY
arg	147:18	147:22	3	dstH
water	147:18	0:0	4	dstH
arg	147:24	147:51	3	dstY>>c->chrDstVSubSample
water	147:24	0:0	4	dstY
op	147:29	0:0	4	>>
water	147:32	0:0	4	c
op	147:33	0:0	4	->
water	147:35	0:0	4	chrDstVSubSample
arg	148:12	148:53	3	FF_CEIL_RSHIFT(dstH,c->chrDstVSubSample)
call	148:12	148:52	4	FF_CEIL_RSHIFT
arg	148:27	148:31	5	dstH
water	148:27	0:0	6	dstH
arg	148:33	148:52	5	c->chrDstVSubSample
water	148:33	0:0	6	c
op	148:34	0:0	6	->
water	148:36	0:0	6	chrDstVSubSample
water	148:54	0:0	2	;
water	149:4	0:0	2	hout_slice
op	149:14	0:0	2	->
water	149:16	0:0	2	plane
op	149:21	0:0	2	[
water	149:22	0:0	2	0
op	149:23	0:0	2	]
op	149:24	0:0	2	.
water	149:25	0:0	2	sliceY
op	149:32	0:0	2	=
water	149:34	0:0	2	lastInLumBuf
op	149:47	0:0	2	+
water	149:49	0:0	2	1
water	149:50	0:0	2	;
water	150:4	0:0	2	hout_slice
op	150:14	0:0	2	->
water	150:16	0:0	2	plane
op	150:21	0:0	2	[
water	150:22	0:0	2	1
op	150:23	0:0	2	]
op	150:24	0:0	2	.
water	150:25	0:0	2	sliceY
op	150:32	0:0	2	=
water	150:34	0:0	2	lastInChrBuf
op	150:47	0:0	2	+
water	150:49	0:0	2	1
water	150:50	0:0	2	;
water	151:4	0:0	2	hout_slice
op	151:14	0:0	2	->
water	151:16	0:0	2	plane
op	151:21	0:0	2	[
water	151:22	0:0	2	2
op	151:23	0:0	2	]
op	151:24	0:0	2	.
water	151:25	0:0	2	sliceY
op	151:32	0:0	2	=
water	151:34	0:0	2	lastInChrBuf
op	151:47	0:0	2	+
water	151:49	0:0	2	1
water	151:50	0:0	2	;
water	152:4	0:0	2	hout_slice
op	152:14	0:0	2	->
water	152:16	0:0	2	plane
op	152:21	0:0	2	[
water	152:22	0:0	2	3
op	152:23	0:0	2	]
op	152:24	0:0	2	.
water	152:25	0:0	2	sliceY
op	152:32	0:0	2	=
water	152:34	0:0	2	lastInLumBuf
op	152:47	0:0	2	+
water	152:49	0:0	2	1
water	152:50	0:0	2	;
water	153:4	0:0	2	hout_slice
op	153:14	0:0	2	->
water	153:16	0:0	2	plane
op	153:21	0:0	2	[
water	153:22	0:0	2	0
op	153:23	0:0	2	]
op	153:24	0:0	2	.
water	153:25	0:0	2	sliceH
op	153:32	0:0	2	=
water	154:4	0:0	2	hout_slice
op	154:14	0:0	2	->
water	154:16	0:0	2	plane
op	154:21	0:0	2	[
water	154:22	0:0	2	1
op	154:23	0:0	2	]
op	154:24	0:0	2	.
water	154:25	0:0	2	sliceH
op	154:32	0:0	2	=
water	155:4	0:0	2	hout_slice
op	155:14	0:0	2	->
water	155:16	0:0	2	plane
op	155:21	0:0	2	[
water	155:22	0:0	2	2
op	155:23	0:0	2	]
op	155:24	0:0	2	.
water	155:25	0:0	2	sliceH
op	155:32	0:0	2	=
water	156:4	0:0	2	hout_slice
op	156:14	0:0	2	->
water	156:16	0:0	2	plane
op	156:21	0:0	2	[
water	156:22	0:0	2	3
op	156:23	0:0	2	]
op	156:24	0:0	2	.
water	156:25	0:0	2	sliceH
op	156:32	0:0	2	=
water	156:34	0:0	2	0
water	156:35	0:0	2	;
water	157:4	0:0	2	hout_slice
op	157:14	0:0	2	->
water	157:16	0:0	2	width
op	157:22	0:0	2	=
water	157:24	0:0	2	dstW
water	157:28	0:0	2	;
for	159:4	432:4	2	(;dstY < dstH;dstY ++)
forinit	159:9	159:9	3	;
water	159:9	0:0	4	;
cond	159:11	159:18	3	dstY < dstH
water	159:11	0:0	4	dstY
op	159:16	0:0	4	<
water	159:18	0:0	4	dstH
forexpr	159:24	159:28	3	dstY ++
water	159:24	0:0	4	dstY
op	159:28	0:0	4	++
stmts	159:32	432:4	3	
water	159:32	0:0	4	{
decl	160:8	160:55	4	const int	chrDstY
op	160:26	0:0	4	=
water	160:28	0:0	4	dstY
op	160:33	0:0	4	>>
water	160:36	0:0	4	c
op	160:37	0:0	4	->
water	160:39	0:0	4	chrDstVSubSample
decl	162:8	167:9	4	uint8_t	*dest[4]
op	162:26	0:0	4	=
water	162:28	0:0	4	{
water	163:12	0:0	4	dst
op	163:15	0:0	4	[
water	163:16	0:0	4	0
op	163:17	0:0	4	]
op	163:19	0:0	4	+
water	163:21	0:0	4	dstStride
op	163:30	0:0	4	[
water	163:31	0:0	4	0
op	163:32	0:0	4	]
op	163:34	0:0	4	*
water	163:36	0:0	4	dstY
water	163:40	0:0	4	,
water	164:12	0:0	4	dst
op	164:15	0:0	4	[
water	164:16	0:0	4	1
op	164:17	0:0	4	]
op	164:19	0:0	4	+
water	164:21	0:0	4	dstStride
op	164:30	0:0	4	[
water	164:31	0:0	4	1
op	164:32	0:0	4	]
op	164:34	0:0	4	*
water	164:36	0:0	4	chrDstY
water	164:43	0:0	4	,
water	165:12	0:0	4	dst
op	165:15	0:0	4	[
water	165:16	0:0	4	2
op	165:17	0:0	4	]
op	165:19	0:0	4	+
water	165:21	0:0	4	dstStride
op	165:30	0:0	4	[
water	165:31	0:0	4	2
op	165:32	0:0	4	]
op	165:34	0:0	4	*
water	165:36	0:0	4	chrDstY
water	165:43	0:0	4	,
water	166:12	0:0	4	(
water	166:13	0:0	4	CONFIG_SWSCALE_ALPHA
op	166:34	0:0	4	&&
water	166:37	0:0	4	alpPixBuf
water	166:46	0:0	4	)
water	166:48	0:0	4	?
water	166:50	0:0	4	dst
op	166:53	0:0	4	[
water	166:54	0:0	4	3
op	166:55	0:0	4	]
op	166:57	0:0	4	+
water	166:59	0:0	4	dstStride
op	166:68	0:0	4	[
water	166:69	0:0	4	3
op	166:70	0:0	4	]
op	166:72	0:0	4	*
water	166:74	0:0	4	dstY
water	166:79	0:0	4	:
water	166:81	0:0	4	NULL
water	166:85	0:0	4	,
water	167:8	0:0	4	}
decl	169:8	169:47	4	int	use_mmx_vfilter
op	169:27	0:0	4	=
water	169:29	0:0	4	c
op	169:30	0:0	4	->
water	169:32	0:0	4	use_mmx_vfilter
decl	171:8	171:80	4	const int	firstLumSrcY
op	171:32	0:0	4	=
call	171:34	171:79	5	FFMAX
arg	171:40	171:58	6	1-vLumFilterSize
water	171:40	0:0	7	1
op	171:42	0:0	7	-
water	171:44	0:0	7	vLumFilterSize
arg	171:60	171:79	6	vLumFilterPos[dstY]
water	171:60	0:0	7	vLumFilterPos
op	171:73	0:0	7	[
water	171:74	0:0	7	dstY
op	171:78	0:0	7	]
decl	172:8	172:132	4	const int	firstLumSrcY2
op	172:32	0:0	4	=
call	172:34	172:131	5	FFMAX
arg	172:40	172:58	6	1-vLumFilterSize
water	172:40	0:0	7	1
op	172:42	0:0	7	-
water	172:44	0:0	7	vLumFilterSize
arg	172:60	172:131	6	vLumFilterPos[FFMIN(dstY|((1<<c->chrDstVSubSample)-1),dstH-1)]
water	172:60	0:0	7	vLumFilterPos
op	172:73	0:0	7	[
call	172:74	172:129	7	FFMIN
arg	172:80	172:119	8	dstY|((1<<c->chrDstVSubSample)-1)
water	172:80	0:0	9	dstY
op	172:85	0:0	9	|
water	172:87	0:0	9	(
water	172:88	0:0	9	(
water	172:89	0:0	9	1
op	172:91	0:0	9	<<
water	172:94	0:0	9	c
op	172:95	0:0	9	->
water	172:97	0:0	9	chrDstVSubSample
water	172:113	0:0	9	)
op	172:115	0:0	9	-
water	172:117	0:0	9	1
water	172:118	0:0	9	)
arg	172:121	172:129	8	dstH-1
water	172:121	0:0	9	dstH
op	172:126	0:0	9	-
water	172:128	0:0	9	1
op	172:130	0:0	7	]
decl	174:8	174:83	4	const int	firstChrSrcY
op	174:32	0:0	4	=
call	174:34	174:82	5	FFMAX
arg	174:40	174:58	6	1-vChrFilterSize
water	174:40	0:0	7	1
op	174:42	0:0	7	-
water	174:44	0:0	7	vChrFilterSize
arg	174:60	174:82	6	vChrFilterPos[chrDstY]
water	174:60	0:0	7	vChrFilterPos
op	174:73	0:0	7	[
water	174:74	0:0	7	chrDstY
op	174:81	0:0	7	]
decl	176:8	176:80	4	int	lastLumSrcY
op	176:25	0:0	4	=
call	176:27	176:75	5	FFMIN
arg	176:33	176:40	6	c->srcH
water	176:33	0:0	7	c
op	176:34	0:0	7	->
water	176:36	0:0	7	srcH
arg	176:45	176:75	6	firstLumSrcY+vLumFilterSize
water	176:45	0:0	7	firstLumSrcY
op	176:59	0:0	7	+
water	176:61	0:0	7	vLumFilterSize
op	176:77	0:0	4	-
water	176:79	0:0	4	1
decl	177:8	177:80	4	int	lastLumSrcY2
op	177:25	0:0	4	=
call	177:27	177:75	5	FFMIN
arg	177:33	177:40	6	c->srcH
water	177:33	0:0	7	c
op	177:34	0:0	7	->
water	177:36	0:0	7	srcH
arg	177:45	177:75	6	firstLumSrcY2+vLumFilterSize
water	177:45	0:0	7	firstLumSrcY2
op	177:59	0:0	7	+
water	177:61	0:0	7	vLumFilterSize
op	177:77	0:0	4	-
water	177:79	0:0	4	1
decl	178:8	178:80	4	int	lastChrSrcY
op	178:25	0:0	4	=
call	178:27	178:75	5	FFMIN
arg	178:33	178:43	6	c->chrSrcH
water	178:33	0:0	7	c
op	178:34	0:0	7	->
water	178:36	0:0	7	chrSrcH
arg	178:45	178:75	6	firstChrSrcY+vChrFilterSize
water	178:45	0:0	7	firstChrSrcY
op	178:59	0:0	7	+
water	178:61	0:0	7	vChrFilterSize
op	178:77	0:0	4	-
water	178:79	0:0	4	1
decl	179:8	179:24	4	int	enough_lines
decl	181:8	181:13	4	int	i
decl	182:8	182:67	4	int	posY
water	182:16	0:0	4	,
decl	182:8	182:67	4	int	cPosY
water	182:23	0:0	4	,
decl	182:8	182:67	4	int	firstPosY
water	182:34	0:0	4	,
decl	182:8	182:67	4	int	lastPosY
water	182:44	0:0	4	,
decl	182:8	182:67	4	int	firstCPosY
water	182:56	0:0	4	,
decl	182:8	182:67	4	int	lastCPosY
if	185:8	196:8	4	(firstLumSrcY > lastInLumBuf)
cond	185:12	185:27	5	firstLumSrcY > lastInLumBuf
water	185:12	0:0	6	firstLumSrcY
op	185:25	0:0	6	>
water	185:27	0:0	6	lastInLumBuf
stmts	185:41	196:8	5	
water	185:41	0:0	6	{
water	187:12	0:0	6	hasLumHoles
op	187:24	0:0	6	=
water	187:26	0:0	6	lastInLumBuf
op	187:39	0:0	6	!=
water	187:42	0:0	6	firstLumSrcY
op	187:55	0:0	6	-
water	187:57	0:0	6	1
water	187:58	0:0	6	;
if	188:12	193:12	6	(hasLumHoles)
cond	188:16	188:16	7	hasLumHoles
water	188:16	0:0	8	hasLumHoles
stmts	188:29	193:12	7	
water	188:29	0:0	8	{
water	189:16	0:0	8	hout_slice
op	189:26	0:0	8	->
water	189:28	0:0	8	plane
op	189:33	0:0	8	[
water	189:34	0:0	8	0
op	189:35	0:0	8	]
op	189:36	0:0	8	.
water	189:37	0:0	8	sliceY
op	189:44	0:0	8	=
water	189:46	0:0	8	lastInLumBuf
op	189:59	0:0	8	+
water	189:61	0:0	8	1
water	189:62	0:0	8	;
water	190:16	0:0	8	hout_slice
op	190:26	0:0	8	->
water	190:28	0:0	8	plane
op	190:33	0:0	8	[
water	190:34	0:0	8	3
op	190:35	0:0	8	]
op	190:36	0:0	8	.
water	190:37	0:0	8	sliceY
op	190:44	0:0	8	=
water	190:46	0:0	8	lastInLumBuf
op	190:59	0:0	8	+
water	190:61	0:0	8	1
water	190:62	0:0	8	;
water	191:16	0:0	8	hout_slice
op	191:26	0:0	8	->
water	191:28	0:0	8	plane
op	191:33	0:0	8	[
water	191:34	0:0	8	0
op	191:35	0:0	8	]
op	191:36	0:0	8	.
water	191:37	0:0	8	sliceH
op	191:44	0:0	8	=
water	192:16	0:0	8	hout_slice
op	192:26	0:0	8	->
water	192:28	0:0	8	plane
op	192:33	0:0	8	[
water	192:34	0:0	8	3
op	192:35	0:0	8	]
op	192:36	0:0	8	.
water	192:37	0:0	8	sliceH
op	192:44	0:0	8	=
water	192:46	0:0	8	0
water	192:47	0:0	8	;
water	193:12	0:0	8	}
water	195:12	0:0	6	lastInLumBuf
op	195:25	0:0	6	=
water	195:27	0:0	6	firstLumSrcY
op	195:40	0:0	6	-
water	195:42	0:0	6	1
water	195:43	0:0	6	;
water	196:8	0:0	6	}
if	197:8	208:8	4	(firstChrSrcY > lastInChrBuf)
cond	197:12	197:27	5	firstChrSrcY > lastInChrBuf
water	197:12	0:0	6	firstChrSrcY
op	197:25	0:0	6	>
water	197:27	0:0	6	lastInChrBuf
stmts	197:41	208:8	5	
water	197:41	0:0	6	{
water	199:12	0:0	6	hasChrHoles
op	199:24	0:0	6	=
water	199:26	0:0	6	lastInChrBuf
op	199:39	0:0	6	!=
water	199:42	0:0	6	firstChrSrcY
op	199:55	0:0	6	-
water	199:57	0:0	6	1
water	199:58	0:0	6	;
if	200:12	205:12	6	(hasChrHoles)
cond	200:16	200:16	7	hasChrHoles
water	200:16	0:0	8	hasChrHoles
stmts	200:29	205:12	7	
water	200:29	0:0	8	{
water	201:16	0:0	8	hout_slice
op	201:26	0:0	8	->
water	201:28	0:0	8	plane
op	201:33	0:0	8	[
water	201:34	0:0	8	1
op	201:35	0:0	8	]
op	201:36	0:0	8	.
water	201:37	0:0	8	sliceY
op	201:44	0:0	8	=
water	201:46	0:0	8	lastInChrBuf
op	201:59	0:0	8	+
water	201:61	0:0	8	1
water	201:62	0:0	8	;
water	202:16	0:0	8	hout_slice
op	202:26	0:0	8	->
water	202:28	0:0	8	plane
op	202:33	0:0	8	[
water	202:34	0:0	8	2
op	202:35	0:0	8	]
op	202:36	0:0	8	.
water	202:37	0:0	8	sliceY
op	202:44	0:0	8	=
water	202:46	0:0	8	lastInChrBuf
op	202:59	0:0	8	+
water	202:61	0:0	8	1
water	202:62	0:0	8	;
water	203:16	0:0	8	hout_slice
op	203:26	0:0	8	->
water	203:28	0:0	8	plane
op	203:33	0:0	8	[
water	203:34	0:0	8	1
op	203:35	0:0	8	]
op	203:36	0:0	8	.
water	203:37	0:0	8	sliceH
op	203:44	0:0	8	=
water	204:16	0:0	8	hout_slice
op	204:26	0:0	8	->
water	204:28	0:0	8	plane
op	204:33	0:0	8	[
water	204:34	0:0	8	2
op	204:35	0:0	8	]
op	204:36	0:0	8	.
water	204:37	0:0	8	sliceH
op	204:44	0:0	8	=
water	204:46	0:0	8	0
water	204:47	0:0	8	;
water	205:12	0:0	8	}
water	207:12	0:0	6	lastInChrBuf
op	207:25	0:0	6	=
water	207:27	0:0	6	firstChrSrcY
op	207:40	0:0	6	-
water	207:42	0:0	6	1
water	207:43	0:0	6	;
water	208:8	0:0	6	}
call	209:8	209:65	4	av_assert0
arg	209:19	209:65	5	firstLumSrcY>=lastInLumBuf-vLumBufSize+1
water	209:19	0:0	6	firstLumSrcY
op	209:32	0:0	6	>=
water	209:35	0:0	6	lastInLumBuf
op	209:48	0:0	6	-
water	209:50	0:0	6	vLumBufSize
op	209:62	0:0	6	+
water	209:64	0:0	6	1
water	209:66	0:0	4	;
call	210:8	210:65	4	av_assert0
arg	210:19	210:65	5	firstChrSrcY>=lastInChrBuf-vChrBufSize+1
water	210:19	0:0	6	firstChrSrcY
op	210:32	0:0	6	>=
water	210:35	0:0	6	lastInChrBuf
op	210:48	0:0	6	-
water	210:50	0:0	6	vChrBufSize
op	210:62	0:0	6	+
water	210:64	0:0	6	1
water	210:66	0:0	4	;
call	211:8	211:40	4	DEBUG_BUFFERS
arg	211:22	211:34	5	"dstY: %d\n"
water	211:22	0:0	6	"dstY: %d\n"
arg	211:36	211:40	5	dstY
water	211:36	0:0	6	dstY
water	211:41	0:0	4	;
call	212:8	213:61	4	DEBUG_BUFFERS
arg	212:22	212:77	5	"\tfirstLumSrcY: %d lastLumSrcY: %d lastInLumBuf: %d\n"
water	212:22	0:0	6	"\tfirstLumSrcY: %d lastLumSrcY: %d lastInLumBuf: %d\n"
arg	213:22	213:34	5	firstLumSrcY
water	213:22	0:0	6	firstLumSrcY
arg	213:36	213:47	5	lastLumSrcY
water	213:36	0:0	6	lastLumSrcY
arg	213:49	213:61	5	lastInLumBuf
water	213:49	0:0	6	lastInLumBuf
water	213:62	0:0	4	;
call	214:8	215:61	4	DEBUG_BUFFERS
arg	214:22	214:77	5	"\tfirstChrSrcY: %d lastChrSrcY: %d lastInChrBuf: %d\n"
water	214:22	0:0	6	"\tfirstChrSrcY: %d lastChrSrcY: %d lastInChrBuf: %d\n"
arg	215:22	215:34	5	firstChrSrcY
water	215:22	0:0	6	firstChrSrcY
arg	215:36	215:47	5	lastChrSrcY
water	215:36	0:0	6	lastChrSrcY
arg	215:49	215:61	5	lastInChrBuf
water	215:49	0:0	6	lastInChrBuf
water	215:62	0:0	4	;
water	217:8	0:0	4	enough_lines
op	217:21	0:0	4	=
water	217:23	0:0	4	lastLumSrcY2
op	217:36	0:0	4	<
water	217:38	0:0	4	srcSliceY
op	217:48	0:0	4	+
water	217:50	0:0	4	srcSliceH
op	217:60	0:0	4	&&
water	218:23	0:0	4	lastChrSrcY
op	218:35	0:0	4	<
call	218:37	218:94	4	FF_CEIL_RSHIFT
arg	218:52	218:73	5	srcSliceY+srcSliceH
water	218:52	0:0	6	srcSliceY
op	218:62	0:0	6	+
water	218:64	0:0	6	srcSliceH
arg	218:75	218:94	5	c->chrSrcVSubSample
water	218:75	0:0	6	c
op	218:76	0:0	6	->
water	218:78	0:0	6	chrSrcVSubSample
water	218:95	0:0	4	;
if	219:8	224:8	4	(! enough_lines)
cond	219:12	219:13	5	! enough_lines
op	219:12	0:0	6	!
water	219:13	0:0	6	enough_lines
stmts	219:27	224:8	5	
water	219:27	0:0	6	{
water	220:12	0:0	6	lastLumSrcY
op	220:24	0:0	6	=
water	220:26	0:0	6	srcSliceY
op	220:36	0:0	6	+
water	220:38	0:0	6	srcSliceH
op	220:48	0:0	6	-
water	220:50	0:0	6	1
water	220:51	0:0	6	;
water	221:12	0:0	6	lastChrSrcY
op	221:24	0:0	6	=
water	221:26	0:0	6	chrSrcSliceY
op	221:39	0:0	6	+
water	221:41	0:0	6	chrSrcSliceH
op	221:54	0:0	6	-
water	221:56	0:0	6	1
water	221:57	0:0	6	;
call	222:12	223:50	6	DEBUG_BUFFERS
arg	222:26	222:76	7	"buffering slice: lastLumSrcY %d lastChrSrcY %d\n"
water	222:26	0:0	8	"buffering slice: lastLumSrcY %d lastChrSrcY %d\n"
arg	223:26	223:37	7	lastLumSrcY
water	223:26	0:0	8	lastLumSrcY
arg	223:39	223:50	7	lastChrSrcY
water	223:39	0:0	8	lastChrSrcY
water	223:51	0:0	6	;
water	224:8	0:0	6	}
water	226:8	0:0	4	posY
op	226:13	0:0	4	=
water	226:15	0:0	4	hout_slice
op	226:25	0:0	4	->
water	226:27	0:0	4	plane
op	226:32	0:0	4	[
water	226:33	0:0	4	0
op	226:34	0:0	4	]
op	226:35	0:0	4	.
water	226:36	0:0	4	sliceY
op	226:43	0:0	4	+
water	226:45	0:0	4	hout_slice
op	226:55	0:0	4	->
water	226:57	0:0	4	plane
op	226:62	0:0	4	[
water	226:63	0:0	4	0
op	226:64	0:0	4	]
op	226:65	0:0	4	.
water	226:66	0:0	4	sliceH
water	226:72	0:0	4	;
if	227:8	230:8	4	(posY <= lastLumSrcY && ! hasLumHoles)
cond	227:12	227:36	5	posY <= lastLumSrcY && ! hasLumHoles
water	227:12	0:0	6	posY
op	227:17	0:0	6	<=
water	227:20	0:0	6	lastLumSrcY
op	227:32	0:0	6	&&
op	227:35	0:0	6	!
water	227:36	0:0	6	hasLumHoles
stmts	227:49	230:8	5	
water	227:49	0:0	6	{
water	228:12	0:0	6	firstPosY
op	228:22	0:0	6	=
call	228:24	228:48	6	FFMAX
arg	228:30	228:42	7	firstLumSrcY
water	228:30	0:0	8	firstLumSrcY
arg	228:44	228:48	7	posY
water	228:44	0:0	8	posY
water	228:49	0:0	6	;
water	229:12	0:0	6	lastPosY
op	229:21	0:0	6	=
call	229:23	229:85	6	FFMIN
arg	229:29	229:58	7	lastLumSrcY+MAX_LINES_AHEAD
water	229:29	0:0	8	lastLumSrcY
op	229:41	0:0	8	+
water	229:43	0:0	8	MAX_LINES_AHEAD
arg	229:60	229:85	7	srcSliceY+srcSliceH-1
water	229:60	0:0	8	srcSliceY
op	229:70	0:0	8	+
water	229:72	0:0	8	srcSliceH
op	229:82	0:0	8	-
water	229:84	0:0	8	1
water	229:86	0:0	6	;
water	230:8	0:0	6	}
else	230:10	233:8	4
stmts	230:15	233:8	5	
water	230:15	0:0	6	{
water	231:12	0:0	6	firstPosY
op	231:22	0:0	6	=
water	231:24	0:0	6	lastInLumBuf
op	231:37	0:0	6	+
water	231:39	0:0	6	1
water	231:40	0:0	6	;
water	232:12	0:0	6	lastPosY
op	232:21	0:0	6	=
water	232:23	0:0	6	lastLumSrcY
water	232:34	0:0	6	;
water	233:8	0:0	6	}
water	234:8	0:0	4	cPosY
op	234:14	0:0	4	=
water	234:16	0:0	4	hout_slice
op	234:26	0:0	4	->
water	234:28	0:0	4	plane
op	234:33	0:0	4	[
water	234:34	0:0	4	1
op	234:35	0:0	4	]
op	234:36	0:0	4	.
water	234:37	0:0	4	sliceY
op	234:44	0:0	4	+
water	234:46	0:0	4	hout_slice
op	234:56	0:0	4	->
water	234:58	0:0	4	plane
op	234:63	0:0	4	[
water	234:64	0:0	4	1
op	234:65	0:0	4	]
op	234:66	0:0	4	.
water	234:67	0:0	4	sliceH
water	234:73	0:0	4	;
if	235:8	238:8	4	(cPosY <= lastChrSrcY && ! hasChrHoles)
cond	235:12	235:37	5	cPosY <= lastChrSrcY && ! hasChrHoles
water	235:12	0:0	6	cPosY
op	235:18	0:0	6	<=
water	235:21	0:0	6	lastChrSrcY
op	235:33	0:0	6	&&
op	235:36	0:0	6	!
water	235:37	0:0	6	hasChrHoles
stmts	235:50	238:8	5	
water	235:50	0:0	6	{
water	236:12	0:0	6	firstCPosY
op	236:23	0:0	6	=
call	236:25	236:50	6	FFMAX
arg	236:31	236:43	7	firstChrSrcY
water	236:31	0:0	8	firstChrSrcY
arg	236:45	236:50	7	cPosY
water	236:45	0:0	8	cPosY
water	236:51	0:0	6	;
water	237:12	0:0	6	lastCPosY
op	237:22	0:0	6	=
call	237:24	237:123	6	FFMIN
arg	237:30	237:59	7	lastChrSrcY+MAX_LINES_AHEAD
water	237:30	0:0	8	lastChrSrcY
op	237:42	0:0	8	+
water	237:44	0:0	8	MAX_LINES_AHEAD
arg	237:61	237:123	7	FF_CEIL_RSHIFT(srcSliceY+srcSliceH,c->chrSrcVSubSample)-1
call	237:61	237:118	8	FF_CEIL_RSHIFT
arg	237:76	237:97	9	srcSliceY+srcSliceH
water	237:76	0:0	10	srcSliceY
op	237:86	0:0	10	+
water	237:88	0:0	10	srcSliceH
arg	237:99	237:118	9	c->chrSrcVSubSample
water	237:99	0:0	10	c
op	237:100	0:0	10	->
water	237:102	0:0	10	chrSrcVSubSample
op	237:120	0:0	8	-
water	237:122	0:0	8	1
water	237:124	0:0	6	;
water	238:8	0:0	6	}
else	238:10	241:8	4
stmts	238:15	241:8	5	
water	238:15	0:0	6	{
water	239:12	0:0	6	firstCPosY
op	239:23	0:0	6	=
water	239:25	0:0	6	lastInChrBuf
op	239:38	0:0	6	+
water	239:40	0:0	6	1
water	239:41	0:0	6	;
water	240:12	0:0	6	lastCPosY
op	240:22	0:0	6	=
water	240:24	0:0	6	lastChrSrcY
water	240:35	0:0	6	;
water	241:8	0:0	6	}
call	242:8	242:55	4	ff_rotate_slice
arg	242:24	242:34	5	hout_slice
water	242:24	0:0	6	hout_slice
arg	242:36	242:44	5	lastPosY
water	242:36	0:0	6	lastPosY
arg	242:46	242:55	5	lastCPosY
water	242:46	0:0	6	lastCPosY
water	242:56	0:0	4	;
if	243:8	246:8	4	(posY < lastLumSrcY + 1)
cond	243:12	243:33	5	posY < lastLumSrcY + 1
water	243:12	0:0	6	posY
op	243:17	0:0	6	<
water	243:19	0:0	6	lastLumSrcY
op	243:31	0:0	6	+
water	243:33	0:0	6	1
stmts	243:36	246:8	5	
water	243:36	0:0	6	{
for	244:12	245:81	6	(i = lumStart ;i < lumEnd;++ i)
forinit	244:17	244:29	7	i = lumStart ;
water	244:17	0:0	8	i
op	244:19	0:0	8	=
water	244:21	0:0	8	lumStart
water	244:29	0:0	8	;
cond	244:31	244:35	7	i < lumEnd
water	244:31	0:0	8	i
op	244:33	0:0	8	<
water	244:35	0:0	8	lumEnd
forexpr	244:43	244:45	7	++ i
op	244:43	0:0	8	++
water	244:45	0:0	8	i
stmts	245:16	245:81	7	
water	245:16	0:0	8	desc
op	245:20	0:0	8	[
water	245:21	0:0	8	i
op	245:22	0:0	8	]
op	245:23	0:0	8	.
call	245:24	245:80	8	process
arg	245:32	245:33	9	c
water	245:32	0:0	10	c
arg	245:35	245:43	9	&desc[i]
op	245:35	0:0	10	&
water	245:36	0:0	10	desc
op	245:40	0:0	10	[
water	245:41	0:0	10	i
op	245:42	0:0	10	]
arg	245:45	245:54	9	firstPosY
water	245:45	0:0	10	firstPosY
arg	245:56	245:80	9	lastPosY-firstPosY+1
water	245:56	0:0	10	lastPosY
op	245:65	0:0	10	-
water	245:67	0:0	10	firstPosY
op	245:77	0:0	10	+
water	245:79	0:0	10	1
water	245:81	0:0	8	;
water	246:8	0:0	6	}
water	247:8	0:0	4	lumBufIndex
op	247:20	0:0	4	+=
water	247:23	0:0	4	lastLumSrcY
op	247:35	0:0	4	-
water	247:37	0:0	4	lastInLumBuf
water	247:49	0:0	4	;
water	248:8	0:0	4	lastInLumBuf
op	248:21	0:0	4	=
water	248:23	0:0	4	lastLumSrcY
water	248:34	0:0	4	;
if	249:8	252:8	4	(cPosY < lastChrSrcY + 1)
cond	249:12	249:34	5	cPosY < lastChrSrcY + 1
water	249:12	0:0	6	cPosY
op	249:18	0:0	6	<
water	249:20	0:0	6	lastChrSrcY
op	249:32	0:0	6	+
water	249:34	0:0	6	1
stmts	249:37	252:8	5	
water	249:37	0:0	6	{
for	250:12	251:84	6	(i = chrStart ;i < chrEnd;++ i)
forinit	250:17	250:29	7	i = chrStart ;
water	250:17	0:0	8	i
op	250:19	0:0	8	=
water	250:21	0:0	8	chrStart
water	250:29	0:0	8	;
cond	250:31	250:35	7	i < chrEnd
water	250:31	0:0	8	i
op	250:33	0:0	8	<
water	250:35	0:0	8	chrEnd
forexpr	250:43	250:45	7	++ i
op	250:43	0:0	8	++
water	250:45	0:0	8	i
stmts	251:16	251:84	7	
water	251:16	0:0	8	desc
op	251:20	0:0	8	[
water	251:21	0:0	8	i
op	251:22	0:0	8	]
op	251:23	0:0	8	.
call	251:24	251:83	8	process
arg	251:32	251:33	9	c
water	251:32	0:0	10	c
arg	251:35	251:43	9	&desc[i]
op	251:35	0:0	10	&
water	251:36	0:0	10	desc
op	251:40	0:0	10	[
water	251:41	0:0	10	i
op	251:42	0:0	10	]
arg	251:45	251:55	9	firstCPosY
water	251:45	0:0	10	firstCPosY
arg	251:57	251:83	9	lastCPosY-firstCPosY+1
water	251:57	0:0	10	lastCPosY
op	251:67	0:0	10	-
water	251:69	0:0	10	firstCPosY
op	251:80	0:0	10	+
water	251:82	0:0	10	1
water	251:84	0:0	8	;
water	252:8	0:0	6	}
water	253:8	0:0	4	chrBufIndex
op	253:20	0:0	4	+=
water	253:23	0:0	4	lastChrSrcY
op	253:35	0:0	4	-
water	253:37	0:0	4	lastInChrBuf
water	253:49	0:0	4	;
water	254:8	0:0	4	lastInChrBuf
op	254:21	0:0	4	=
water	254:23	0:0	4	lastChrSrcY
water	254:34	0:0	4	;
while	257:8	280:8	4	(lastInLumBuf < lastLumSrcY)
cond	257:15	257:30	5	lastInLumBuf < lastLumSrcY
water	257:15	0:0	6	lastInLumBuf
op	257:28	0:0	6	<
water	257:30	0:0	6	lastLumSrcY
stmts	257:43	280:8	5	
water	257:43	0:0	6	{
decl	258:12	263:13	6	const uint8_t	*src1[4]
op	258:35	0:0	6	=
water	258:37	0:0	6	{
water	259:16	0:0	6	src
op	259:19	0:0	6	[
water	259:20	0:0	6	0
op	259:21	0:0	6	]
op	259:23	0:0	6	+
water	259:25	0:0	6	(
water	259:26	0:0	6	lastInLumBuf
op	259:39	0:0	6	+
water	259:41	0:0	6	1
op	259:43	0:0	6	-
water	259:45	0:0	6	srcSliceY
water	259:54	0:0	6	)
op	259:56	0:0	6	*
water	259:58	0:0	6	srcStride
op	259:67	0:0	6	[
water	259:68	0:0	6	0
op	259:69	0:0	6	]
water	259:70	0:0	6	,
water	260:16	0:0	6	src
op	260:19	0:0	6	[
water	260:20	0:0	6	1
op	260:21	0:0	6	]
op	260:23	0:0	6	+
water	260:25	0:0	6	(
water	260:26	0:0	6	lastInLumBuf
op	260:39	0:0	6	+
water	260:41	0:0	6	1
op	260:43	0:0	6	-
water	260:45	0:0	6	srcSliceY
water	260:54	0:0	6	)
op	260:56	0:0	6	*
water	260:58	0:0	6	srcStride
op	260:67	0:0	6	[
water	260:68	0:0	6	1
op	260:69	0:0	6	]
water	260:70	0:0	6	,
water	261:16	0:0	6	src
op	261:19	0:0	6	[
water	261:20	0:0	6	2
op	261:21	0:0	6	]
op	261:23	0:0	6	+
water	261:25	0:0	6	(
water	261:26	0:0	6	lastInLumBuf
op	261:39	0:0	6	+
water	261:41	0:0	6	1
op	261:43	0:0	6	-
water	261:45	0:0	6	srcSliceY
water	261:54	0:0	6	)
op	261:56	0:0	6	*
water	261:58	0:0	6	srcStride
op	261:67	0:0	6	[
water	261:68	0:0	6	2
op	261:69	0:0	6	]
water	261:70	0:0	6	,
water	262:16	0:0	6	src
op	262:19	0:0	6	[
water	262:20	0:0	6	3
op	262:21	0:0	6	]
op	262:23	0:0	6	+
water	262:25	0:0	6	(
water	262:26	0:0	6	lastInLumBuf
op	262:39	0:0	6	+
water	262:41	0:0	6	1
op	262:43	0:0	6	-
water	262:45	0:0	6	srcSliceY
water	262:54	0:0	6	)
op	262:56	0:0	6	*
water	262:58	0:0	6	srcStride
op	262:67	0:0	6	[
water	262:68	0:0	6	3
op	262:69	0:0	6	]
water	262:70	0:0	6	,
water	263:12	0:0	6	}
water	264:12	0:0	6	lumBufIndex
op	264:23	0:0	6	++
water	264:25	0:0	6	;
call	265:12	265:52	6	av_assert0
arg	265:23	265:52	7	lumBufIndex<2*vLumBufSize
water	265:23	0:0	8	lumBufIndex
op	265:35	0:0	8	<
water	265:37	0:0	8	2
op	265:39	0:0	8	*
water	265:41	0:0	8	vLumBufSize
water	265:53	0:0	6	;
call	266:12	266:63	6	av_assert0
arg	266:23	266:63	7	lastInLumBuf+1-srcSliceY<srcSliceH
water	266:23	0:0	8	lastInLumBuf
op	266:36	0:0	8	+
water	266:38	0:0	8	1
op	266:40	0:0	8	-
water	266:42	0:0	8	srcSliceY
op	266:52	0:0	8	<
water	266:54	0:0	8	srcSliceH
water	266:64	0:0	6	;
call	267:12	267:56	6	av_assert0
arg	267:23	267:56	7	lastInLumBuf+1-srcSliceY>=0
water	267:23	0:0	8	lastInLumBuf
op	267:36	0:0	8	+
water	267:38	0:0	8	1
op	267:40	0:0	8	-
water	267:42	0:0	8	srcSliceY
op	267:52	0:0	8	>=
water	267:55	0:0	8	0
water	267:57	0:0	6	;
if	268:12	269:67	6	(perform_gamma)
cond	268:16	268:16	7	perform_gamma
water	268:16	0:0	8	perform_gamma
stmts	269:16	269:67	7	
call	269:16	269:66	8	gamma_convert
arg	269:30	269:46	9	(uint8_t**)src1
water	269:30	0:0	10	(
water	269:31	0:0	10	uint8_t
op	269:39	0:0	10	*
op	269:40	0:0	10	*
water	269:41	0:0	10	)
water	269:42	0:0	10	src1
arg	269:48	269:52	9	srcW
water	269:48	0:0	10	srcW
arg	269:54	269:66	9	c->inv_gamma
water	269:54	0:0	10	c
op	269:55	0:0	10	->
water	269:57	0:0	10	inv_gamma
water	269:67	0:0	8	;
call	270:12	272:44	6	hyscale
arg	270:20	270:21	7	c
water	270:20	0:0	8	c
arg	270:23	270:45	7	lumPixBuf[lumBufIndex]
water	270:23	0:0	8	lumPixBuf
op	270:32	0:0	8	[
water	270:33	0:0	8	lumBufIndex
op	270:44	0:0	8	]
arg	270:47	270:51	7	dstW
water	270:47	0:0	8	dstW
arg	270:53	270:57	7	src1
water	270:53	0:0	8	src1
arg	270:59	270:63	7	srcW
water	270:59	0:0	8	srcW
arg	270:65	270:72	7	lumXInc
water	270:65	0:0	8	lumXInc
arg	271:20	271:30	7	hLumFilter
water	271:20	0:0	8	hLumFilter
arg	271:32	271:45	7	hLumFilterPos
water	271:32	0:0	8	hLumFilterPos
arg	271:47	271:61	7	hLumFilterSize
water	271:47	0:0	8	hLumFilterSize
arg	272:20	272:36	7	formatConvBuffer
water	272:20	0:0	8	formatConvBuffer
arg	272:38	272:41	7	pal
water	272:38	0:0	8	pal
arg	272:43	272:44	7	0
water	272:43	0:0	8	0
water	272:45	0:0	6	;
if	273:12	276:49	6	(CONFIG_SWSCALE_ALPHA && alpPixBuf)
cond	273:16	273:40	7	CONFIG_SWSCALE_ALPHA && alpPixBuf
water	273:16	0:0	8	CONFIG_SWSCALE_ALPHA
op	273:37	0:0	8	&&
water	273:40	0:0	8	alpPixBuf
stmts	274:16	276:49	7	
call	274:16	276:48	8	hyscale
arg	274:24	274:25	9	c
water	274:24	0:0	10	c
arg	274:27	274:49	9	alpPixBuf[lumBufIndex]
water	274:27	0:0	10	alpPixBuf
op	274:36	0:0	10	[
water	274:37	0:0	10	lumBufIndex
op	274:48	0:0	10	]
arg	274:51	274:55	9	dstW
water	274:51	0:0	10	dstW
arg	274:57	274:61	9	src1
water	274:57	0:0	10	src1
arg	274:63	274:67	9	srcW
water	274:63	0:0	10	srcW
arg	275:24	275:31	9	lumXInc
water	275:24	0:0	10	lumXInc
arg	275:33	275:43	9	hLumFilter
water	275:33	0:0	10	hLumFilter
arg	275:45	275:58	9	hLumFilterPos
water	275:45	0:0	10	hLumFilterPos
arg	275:60	275:74	9	hLumFilterSize
water	275:60	0:0	10	hLumFilterSize
arg	276:24	276:40	9	formatConvBuffer
water	276:24	0:0	10	formatConvBuffer
arg	276:42	276:45	9	pal
water	276:42	0:0	10	pal
arg	276:47	276:48	9	1
water	276:47	0:0	10	1
water	276:49	0:0	8	;
water	277:12	0:0	6	lastInLumBuf
op	277:24	0:0	6	++
water	277:26	0:0	6	;
call	278:12	279:51	6	DEBUG_BUFFERS
arg	278:26	278:66	7	"\t\tlumBufIndex %d: lastInLumBuf: %d\n"
water	278:26	0:0	8	"\t\tlumBufIndex %d: lastInLumBuf: %d\n"
arg	279:26	279:37	7	lumBufIndex
water	279:26	0:0	8	lumBufIndex
arg	279:39	279:51	7	lastInLumBuf
water	279:39	0:0	8	lastInLumBuf
water	279:52	0:0	6	;
water	280:8	0:0	6	}
while	281:8	301:8	4	(lastInChrBuf < lastChrSrcY)
cond	281:15	281:30	5	lastInChrBuf < lastChrSrcY
water	281:15	0:0	6	lastInChrBuf
op	281:28	0:0	6	<
water	281:30	0:0	6	lastChrSrcY
stmts	281:43	301:8	5	
water	281:43	0:0	6	{
decl	282:12	287:13	6	const uint8_t	*src1[4]
op	282:35	0:0	6	=
water	282:37	0:0	6	{
water	283:16	0:0	6	src
op	283:19	0:0	6	[
water	283:20	0:0	6	0
op	283:21	0:0	6	]
op	283:23	0:0	6	+
water	283:25	0:0	6	(
water	283:26	0:0	6	lastInChrBuf
op	283:39	0:0	6	+
water	283:41	0:0	6	1
op	283:43	0:0	6	-
water	283:45	0:0	6	chrSrcSliceY
water	283:57	0:0	6	)
op	283:59	0:0	6	*
water	283:61	0:0	6	srcStride
op	283:70	0:0	6	[
water	283:71	0:0	6	0
op	283:72	0:0	6	]
water	283:73	0:0	6	,
water	284:16	0:0	6	src
op	284:19	0:0	6	[
water	284:20	0:0	6	1
op	284:21	0:0	6	]
op	284:23	0:0	6	+
water	284:25	0:0	6	(
water	284:26	0:0	6	lastInChrBuf
op	284:39	0:0	6	+
water	284:41	0:0	6	1
op	284:43	0:0	6	-
water	284:45	0:0	6	chrSrcSliceY
water	284:57	0:0	6	)
op	284:59	0:0	6	*
water	284:61	0:0	6	srcStride
op	284:70	0:0	6	[
water	284:71	0:0	6	1
op	284:72	0:0	6	]
water	284:73	0:0	6	,
water	285:16	0:0	6	src
op	285:19	0:0	6	[
water	285:20	0:0	6	2
op	285:21	0:0	6	]
op	285:23	0:0	6	+
water	285:25	0:0	6	(
water	285:26	0:0	6	lastInChrBuf
op	285:39	0:0	6	+
water	285:41	0:0	6	1
op	285:43	0:0	6	-
water	285:45	0:0	6	chrSrcSliceY
water	285:57	0:0	6	)
op	285:59	0:0	6	*
water	285:61	0:0	6	srcStride
op	285:70	0:0	6	[
water	285:71	0:0	6	2
op	285:72	0:0	6	]
water	285:73	0:0	6	,
water	286:16	0:0	6	src
op	286:19	0:0	6	[
water	286:20	0:0	6	3
op	286:21	0:0	6	]
op	286:23	0:0	6	+
water	286:25	0:0	6	(
water	286:26	0:0	6	lastInChrBuf
op	286:39	0:0	6	+
water	286:41	0:0	6	1
op	286:43	0:0	6	-
water	286:45	0:0	6	chrSrcSliceY
water	286:57	0:0	6	)
op	286:59	0:0	6	*
water	286:61	0:0	6	srcStride
op	286:70	0:0	6	[
water	286:71	0:0	6	3
op	286:72	0:0	6	]
water	286:73	0:0	6	,
water	287:12	0:0	6	}
water	288:12	0:0	6	chrBufIndex
op	288:23	0:0	6	++
water	288:25	0:0	6	;
call	289:12	289:52	6	av_assert0
arg	289:23	289:52	7	chrBufIndex<2*vChrBufSize
water	289:23	0:0	8	chrBufIndex
op	289:35	0:0	8	<
water	289:37	0:0	8	2
op	289:39	0:0	8	*
water	289:41	0:0	8	vChrBufSize
water	289:53	0:0	6	;
call	290:12	290:71	6	av_assert0
arg	290:23	290:71	7	lastInChrBuf+1-chrSrcSliceY<(chrSrcSliceH)
water	290:23	0:0	8	lastInChrBuf
op	290:36	0:0	8	+
water	290:38	0:0	8	1
op	290:40	0:0	8	-
water	290:42	0:0	8	chrSrcSliceY
op	290:55	0:0	8	<
water	290:57	0:0	8	(
water	290:58	0:0	8	chrSrcSliceH
water	290:70	0:0	8	)
water	290:72	0:0	6	;
call	291:12	291:59	6	av_assert0
arg	291:23	291:59	7	lastInChrBuf+1-chrSrcSliceY>=0
water	291:23	0:0	8	lastInChrBuf
op	291:36	0:0	8	+
water	291:38	0:0	8	1
op	291:40	0:0	8	-
water	291:42	0:0	8	chrSrcSliceY
op	291:55	0:0	8	>=
water	291:58	0:0	8	0
water	291:60	0:0	6	;
if	293:12	297:46	6	(c -> needs_hcscale)
cond	293:16	293:19	7	c -> needs_hcscale
water	293:16	0:0	8	c
op	293:17	0:0	8	->
water	293:19	0:0	8	needs_hcscale
stmts	294:16	297:46	7	
call	294:16	297:45	8	hcscale
arg	294:24	294:25	9	c
water	294:24	0:0	10	c
arg	294:27	294:50	9	chrUPixBuf[chrBufIndex]
water	294:27	0:0	10	chrUPixBuf
op	294:37	0:0	10	[
water	294:38	0:0	10	chrBufIndex
op	294:49	0:0	10	]
arg	294:52	294:75	9	chrVPixBuf[chrBufIndex]
water	294:52	0:0	10	chrVPixBuf
op	294:62	0:0	10	[
water	294:63	0:0	10	chrBufIndex
op	294:74	0:0	10	]
arg	295:24	295:31	9	chrDstW
water	295:24	0:0	10	chrDstW
arg	295:33	295:37	9	src1
water	295:33	0:0	10	src1
arg	295:39	295:46	9	chrSrcW
water	295:39	0:0	10	chrSrcW
arg	295:48	295:55	9	chrXInc
water	295:48	0:0	10	chrXInc
arg	296:24	296:34	9	hChrFilter
water	296:24	0:0	10	hChrFilter
arg	296:36	296:49	9	hChrFilterPos
water	296:36	0:0	10	hChrFilterPos
arg	296:51	296:65	9	hChrFilterSize
water	296:51	0:0	10	hChrFilterSize
arg	297:24	297:40	9	formatConvBuffer
water	297:24	0:0	10	formatConvBuffer
arg	297:42	297:45	9	pal
water	297:42	0:0	10	pal
water	297:46	0:0	8	;
water	298:12	0:0	6	lastInChrBuf
op	298:24	0:0	6	++
water	298:26	0:0	6	;
call	299:12	300:51	6	DEBUG_BUFFERS
arg	299:26	299:66	7	"\t\tchrBufIndex %d: lastInChrBuf: %d\n"
water	299:26	0:0	8	"\t\tchrBufIndex %d: lastInChrBuf: %d\n"
arg	300:26	300:37	7	chrBufIndex
water	300:26	0:0	8	chrBufIndex
arg	300:39	300:51	7	lastInChrBuf
water	300:39	0:0	8	lastInChrBuf
water	300:52	0:0	6	;
water	301:8	0:0	6	}
if	304:8	305:38	4	(lumBufIndex >= vLumBufSize)
cond	304:12	304:27	5	lumBufIndex >= vLumBufSize
water	304:12	0:0	6	lumBufIndex
op	304:24	0:0	6	>=
water	304:27	0:0	6	vLumBufSize
stmts	305:12	305:38	5	
water	305:12	0:0	6	lumBufIndex
op	305:24	0:0	6	-=
water	305:27	0:0	6	vLumBufSize
water	305:38	0:0	6	;
if	306:8	307:38	4	(chrBufIndex >= vChrBufSize)
cond	306:12	306:27	5	chrBufIndex >= vChrBufSize
water	306:12	0:0	6	chrBufIndex
op	306:24	0:0	6	>=
water	306:27	0:0	6	vChrBufSize
stmts	307:12	307:38	5	
water	307:12	0:0	6	chrBufIndex
op	307:24	0:0	6	-=
water	307:27	0:0	6	vChrBufSize
water	307:38	0:0	6	;
if	308:8	309:17	4	(! enough_lines)
cond	308:12	308:13	5	! enough_lines
op	308:12	0:0	6	!
water	308:13	0:0	6	enough_lines
stmts	309:12	309:17	5	
break	309:12	309:17	6	
call	311:8	312:56	4	ff_updateMMXDitherTables
arg	311:33	311:34	5	c
water	311:33	0:0	6	c
arg	311:36	311:40	5	dstY
water	311:36	0:0	6	dstY
arg	311:42	311:53	5	lumBufIndex
water	311:42	0:0	6	lumBufIndex
arg	311:55	311:66	5	chrBufIndex
water	311:55	0:0	6	chrBufIndex
arg	312:30	312:42	5	lastInLumBuf
water	312:30	0:0	6	lastInLumBuf
arg	312:44	312:56	5	lastInChrBuf
water	312:44	0:0	6	lastInChrBuf
water	312:57	0:0	4	;
if	314:8	317:8	4	(should_dither)
cond	314:12	314:12	5	should_dither
water	314:12	0:0	6	should_dither
stmts	314:27	317:8	5	
water	314:27	0:0	6	{
water	315:12	0:0	6	c
op	315:13	0:0	6	->
water	315:15	0:0	6	chrDither8
op	315:26	0:0	6	=
water	315:28	0:0	6	ff_dither_8x8_128
op	315:45	0:0	6	[
water	315:46	0:0	6	chrDstY
op	315:54	0:0	6	&
water	315:56	0:0	6	7
op	315:57	0:0	6	]
water	315:58	0:0	6	;
water	316:12	0:0	6	c
op	316:13	0:0	6	->
water	316:15	0:0	6	lumDither8
op	316:26	0:0	6	=
water	316:28	0:0	6	ff_dither_8x8_128
op	316:45	0:0	6	[
water	316:46	0:0	6	dstY
op	316:54	0:0	6	&
water	316:56	0:0	6	7
op	316:57	0:0	6	]
water	316:58	0:0	6	;
water	317:8	0:0	6	}
if	318:8	326:8	4	(dstY >= dstH - 2)
cond	318:12	318:27	5	dstY >= dstH - 2
water	318:12	0:0	6	dstY
op	318:17	0:0	6	>=
water	318:20	0:0	6	dstH
op	318:25	0:0	6	-
water	318:27	0:0	6	2
stmts	318:30	326:8	5	
water	318:30	0:0	6	{
call	321:12	322:88	6	ff_sws_init_output_funcs
arg	321:37	321:38	7	c
water	321:37	0:0	8	c
arg	321:40	321:51	7	&yuv2plane1
op	321:40	0:0	8	&
water	321:41	0:0	8	yuv2plane1
arg	321:53	321:64	7	&yuv2planeX
op	321:53	0:0	8	&
water	321:54	0:0	8	yuv2planeX
arg	321:66	321:77	7	&yuv2nv12cX
op	321:66	0:0	8	&
water	321:67	0:0	8	yuv2nv12cX
arg	322:37	322:49	7	&yuv2packed1
op	322:37	0:0	8	&
water	322:38	0:0	8	yuv2packed1
arg	322:51	322:63	7	&yuv2packed2
op	322:51	0:0	8	&
water	322:52	0:0	8	yuv2packed2
arg	322:65	322:77	7	&yuv2packedX
op	322:65	0:0	8	&
water	322:66	0:0	8	yuv2packedX
arg	322:79	322:88	7	&yuv2anyX
op	322:79	0:0	8	&
water	322:80	0:0	8	yuv2anyX
water	322:89	0:0	6	;
water	323:12	0:0	6	use_mmx_vfilter
op	323:27	0:0	6	=
water	323:29	0:0	6	0
water	323:30	0:0	6	;
call	324:12	325:91	6	ff_init_vscale_pfn
arg	324:31	324:32	7	c
water	324:31	0:0	8	c
arg	324:34	324:44	7	yuv2plane1
water	324:34	0:0	8	yuv2plane1
arg	324:46	324:56	7	yuv2planeX
water	324:46	0:0	8	yuv2planeX
arg	324:58	324:68	7	yuv2nv12cX
water	324:58	0:0	8	yuv2nv12cX
arg	325:27	325:38	7	yuv2packed1
water	325:27	0:0	8	yuv2packed1
arg	325:40	325:51	7	yuv2packed2
water	325:40	0:0	8	yuv2packed2
arg	325:53	325:64	7	yuv2packedX
water	325:53	0:0	8	yuv2packedX
arg	325:66	325:74	7	yuv2anyX
water	325:66	0:0	8	yuv2anyX
arg	325:76	325:91	7	use_mmx_vfilter
water	325:76	0:0	8	use_mmx_vfilter
water	325:92	0:0	6	;
water	326:8	0:0	6	}
water	327:8	0:0	4	{
for	329:12	330:53	4	(i = vStart ;i < vEnd;++ i)
forinit	329:17	329:27	5	i = vStart ;
water	329:17	0:0	6	i
op	329:19	0:0	6	=
water	329:21	0:0	6	vStart
water	329:27	0:0	6	;
cond	329:29	329:33	5	i < vEnd
water	329:29	0:0	6	i
op	329:31	0:0	6	<
water	329:33	0:0	6	vEnd
forexpr	329:39	329:41	5	++ i
op	329:39	0:0	6	++
water	329:41	0:0	6	i
stmts	330:16	330:53	5	
water	330:16	0:0	6	desc
op	330:20	0:0	6	[
water	330:21	0:0	6	i
op	330:22	0:0	6	]
op	330:23	0:0	6	.
call	330:24	330:52	6	process
arg	330:32	330:33	7	c
water	330:32	0:0	8	c
arg	330:35	330:43	7	&desc[i]
op	330:35	0:0	8	&
water	330:36	0:0	8	desc
op	330:40	0:0	8	[
water	330:41	0:0	8	i
op	330:42	0:0	8	]
arg	330:45	330:49	7	dstY
water	330:45	0:0	8	dstY
arg	330:51	330:52	7	1
water	330:51	0:0	8	1
water	330:53	0:0	6	;
decl	332:12	332:135	4	const int16_t	**lumSrcPtr
op	332:39	0:0	4	=
call	332:41	332:65	5	(constint16_t**)
arg	332:60	332:65	6	void*
water	332:60	0:0	7	void
op	332:64	0:0	7	*
water	332:67	0:0	4	lumPixBuf
op	332:78	0:0	4	+
water	332:80	0:0	4	lumBufIndex
op	332:92	0:0	4	+
water	332:94	0:0	4	firstLumSrcY
op	332:107	0:0	4	-
water	332:109	0:0	4	lastInLumBuf
op	332:122	0:0	4	+
water	332:124	0:0	4	vLumBufSize
decl	333:12	333:135	4	const int16_t	**chrUSrcPtr
op	333:39	0:0	4	=
call	333:41	333:65	5	(constint16_t**)
arg	333:60	333:65	6	void*
water	333:60	0:0	7	void
op	333:64	0:0	7	*
water	333:67	0:0	4	chrUPixBuf
op	333:78	0:0	4	+
water	333:80	0:0	4	chrBufIndex
op	333:92	0:0	4	+
water	333:94	0:0	4	firstChrSrcY
op	333:107	0:0	4	-
water	333:109	0:0	4	lastInChrBuf
op	333:122	0:0	4	+
water	333:124	0:0	4	vChrBufSize
decl	334:12	334:135	4	const int16_t	**chrVSrcPtr
op	334:39	0:0	4	=
call	334:41	334:65	5	(constint16_t**)
arg	334:60	334:65	6	void*
water	334:60	0:0	7	void
op	334:64	0:0	7	*
water	334:67	0:0	4	chrVPixBuf
op	334:78	0:0	4	+
water	334:80	0:0	4	chrBufIndex
op	334:92	0:0	4	+
water	334:94	0:0	4	firstChrSrcY
op	334:107	0:0	4	-
water	334:109	0:0	4	lastInChrBuf
op	334:122	0:0	4	+
water	334:124	0:0	4	vChrBufSize
decl	335:12	336:141	4	const int16_t	**alpSrcPtr
op	335:39	0:0	4	=
water	335:41	0:0	4	(
water	335:42	0:0	4	CONFIG_SWSCALE_ALPHA
op	335:63	0:0	4	&&
water	335:66	0:0	4	alpPixBuf
water	335:75	0:0	4	)
water	335:77	0:0	4	?
call	336:41	336:65	5	(constint16_t**)
arg	336:60	336:65	6	void*
water	336:60	0:0	7	void
op	336:64	0:0	7	*
water	336:67	0:0	4	alpPixBuf
op	336:77	0:0	4	+
water	336:79	0:0	4	lumBufIndex
op	336:91	0:0	4	+
water	336:93	0:0	4	firstLumSrcY
op	336:106	0:0	4	-
water	336:108	0:0	4	lastInLumBuf
op	336:121	0:0	4	+
water	336:123	0:0	4	vLumBufSize
water	336:135	0:0	4	:
water	336:137	0:0	4	NULL
decl	337:12	337:47	4	int16_t	*vLumFilter
op	337:32	0:0	4	=
water	337:34	0:0	4	c
op	337:35	0:0	4	->
water	337:37	0:0	4	vLumFilter
decl	338:12	338:47	4	int16_t	*vChrFilter
op	338:32	0:0	4	=
water	338:34	0:0	4	c
op	338:35	0:0	4	->
water	338:37	0:0	4	vChrFilter
if	339:12	393:12	4	(isPlanarYUV (dstFormat ) || (isGray (dstFormat ) && !isALPHA (dstFormat ) ))
cond	339:16	340:57	5	isPlanarYUV (dstFormat ) || (isGray (dstFormat ) && !isALPHA (dstFormat ) )
call	339:16	339:37	6	isPlanarYUV
arg	339:28	339:37	7	dstFormat
water	339:28	0:0	8	dstFormat
op	339:39	0:0	6	||
water	340:16	0:0	6	(
call	340:17	340:33	6	isGray
arg	340:24	340:33	7	dstFormat
water	340:24	0:0	8	dstFormat
op	340:35	0:0	6	&&
op	340:38	0:0	6	!
call	340:39	340:56	6	isALPHA
arg	340:47	340:56	7	dstFormat
water	340:47	0:0	8	dstFormat
water	340:57	0:0	6	)
stmts	340:60	393:12	5	
water	340:60	0:0	6	{
decl	341:16	341:70	6	const int	chrSkipMask
op	341:38	0:0	6	=
water	341:40	0:0	6	(
water	341:41	0:0	6	1
op	341:43	0:0	6	<<
water	341:46	0:0	6	c
op	341:47	0:0	6	->
water	341:49	0:0	6	chrDstVSubSample
water	341:65	0:0	6	)
op	341:67	0:0	6	-
water	341:69	0:0	6	1
water	342:16	0:0	6	vLumFilter
op	342:27	0:0	6	+=
water	342:33	0:0	6	dstY
op	342:38	0:0	6	*
water	342:40	0:0	6	vLumFilterSize
water	342:54	0:0	6	;
water	343:16	0:0	6	vChrFilter
op	343:27	0:0	6	+=
water	343:30	0:0	6	chrDstY
op	343:38	0:0	6	*
water	343:40	0:0	6	vChrFilterSize
water	343:54	0:0	6	;
if	352:16	355:16	6	(use_mmx_vfilter)
cond	352:19	352:19	7	use_mmx_vfilter
water	352:19	0:0	8	use_mmx_vfilter
stmts	352:35	355:16	7	
water	352:35	0:0	8	{
water	353:20	0:0	8	vLumFilter
op	353:30	0:0	8	=
water	353:32	0:0	8	(
water	353:33	0:0	8	int16_t
op	353:41	0:0	8	*
water	353:42	0:0	8	)
water	353:43	0:0	8	c
op	353:44	0:0	8	->
water	353:46	0:0	8	lumMmxFilter
water	353:58	0:0	8	;
water	354:20	0:0	8	vChrFilter
op	354:30	0:0	8	=
water	354:32	0:0	8	(
water	354:33	0:0	8	int16_t
op	354:41	0:0	8	*
water	354:42	0:0	8	)
water	354:43	0:0	8	c
op	354:44	0:0	8	->
water	354:46	0:0	8	chrMmxFilter
water	354:58	0:0	8	;
water	355:16	0:0	8	}
if	356:16	358:16	6	(vLumFilterSize == 1)
cond	356:20	356:38	7	vLumFilterSize == 1
water	356:20	0:0	8	vLumFilterSize
op	356:35	0:0	8	==
water	356:38	0:0	8	1
stmts	356:41	358:16	7	
water	356:41	0:0	8	{
call	357:20	357:76	8	yuv2plane1
arg	357:31	357:43	9	lumSrcPtr[0]
water	357:31	0:0	10	lumSrcPtr
op	357:40	0:0	10	[
water	357:41	0:0	10	0
op	357:42	0:0	10	]
arg	357:45	357:52	9	dest[0]
water	357:45	0:0	10	dest
op	357:49	0:0	10	[
water	357:50	0:0	10	0
op	357:51	0:0	10	]
arg	357:54	357:58	9	dstW
water	357:54	0:0	10	dstW
arg	357:60	357:73	9	c->lumDither8
water	357:60	0:0	10	c
op	357:61	0:0	10	->
water	357:63	0:0	10	lumDither8
arg	357:75	357:76	9	0
water	357:75	0:0	10	0
water	357:77	0:0	8	;
water	358:16	0:0	8	}
else	358:18	362:16	6
stmts	358:23	362:16	7	
water	358:23	0:0	8	{
call	359:20	361:53	8	yuv2planeX
arg	359:31	359:41	9	vLumFilter
water	359:31	0:0	10	vLumFilter
arg	359:43	359:57	9	vLumFilterSize
water	359:43	0:0	10	vLumFilterSize
arg	360:31	360:40	9	lumSrcPtr
water	360:31	0:0	10	lumSrcPtr
arg	360:42	360:49	9	dest[0]
water	360:42	0:0	10	dest
op	360:46	0:0	10	[
water	360:47	0:0	10	0
op	360:48	0:0	10	]
arg	361:31	361:35	9	dstW
water	361:31	0:0	10	dstW
arg	361:37	361:50	9	c->lumDither8
water	361:37	0:0	10	c
op	361:38	0:0	10	->
water	361:40	0:0	10	lumDither8
arg	361:52	361:53	9	0
water	361:52	0:0	10	0
water	361:54	0:0	8	;
water	362:16	0:0	8	}
if	363:16	379:16	6	(! ( ( dstY & chrSkipMask ) ||isGray (dstFormat ) ))
cond	363:20	363:63	7	! ( ( dstY & chrSkipMask ) ||isGray (dstFormat ) )
op	363:20	0:0	8	!
water	363:21	0:0	8	(
water	363:22	0:0	8	(
water	363:23	0:0	8	dstY
op	363:28	0:0	8	&
water	363:30	0:0	8	chrSkipMask
water	363:41	0:0	8	)
op	363:43	0:0	8	||
call	363:46	363:62	8	isGray
arg	363:53	363:62	9	dstFormat
water	363:53	0:0	10	dstFormat
water	363:63	0:0	8	)
stmts	363:66	379:16	7	
water	363:66	0:0	8	{
if	364:20	368:20	8	(yuv2nv12cX)
cond	364:24	364:24	9	yuv2nv12cX
water	364:24	0:0	10	yuv2nv12cX
stmts	364:36	368:20	9	
water	364:36	0:0	10	{
call	365:24	367:51	10	yuv2nv12cX
arg	365:35	365:36	11	c
water	365:35	0:0	12	c
arg	365:38	365:48	11	vChrFilter
water	365:38	0:0	12	vChrFilter
arg	366:35	366:49	11	vChrFilterSize
water	366:35	0:0	12	vChrFilterSize
arg	366:51	366:61	11	chrUSrcPtr
water	366:51	0:0	12	chrUSrcPtr
arg	366:63	366:73	11	chrVSrcPtr
water	366:63	0:0	12	chrVSrcPtr
arg	367:35	367:42	11	dest[1]
water	367:35	0:0	12	dest
op	367:39	0:0	12	[
water	367:40	0:0	12	1
op	367:41	0:0	12	]
arg	367:44	367:51	11	chrDstW
water	367:44	0:0	12	chrDstW
water	367:52	0:0	10	;
water	368:20	0:0	10	}
else	368:22	371:20	8
stmts	368:27	371:20	9	
if	368:27	371:20	10	(vChrFilterSize == 1)
cond	368:31	368:49	11	vChrFilterSize == 1
water	368:31	0:0	12	vChrFilterSize
op	368:46	0:0	12	==
water	368:49	0:0	12	1
stmts	368:52	371:20	11	
water	368:52	0:0	12	{
call	369:24	369:84	12	yuv2plane1
arg	369:35	369:48	13	chrUSrcPtr[0]
water	369:35	0:0	14	chrUSrcPtr
op	369:45	0:0	14	[
water	369:46	0:0	14	0
op	369:47	0:0	14	]
arg	369:50	369:57	13	dest[1]
water	369:50	0:0	14	dest
op	369:54	0:0	14	[
water	369:55	0:0	14	1
op	369:56	0:0	14	]
arg	369:59	369:66	13	chrDstW
water	369:59	0:0	14	chrDstW
arg	369:68	369:81	13	c->chrDither8
water	369:68	0:0	14	c
op	369:69	0:0	14	->
water	369:71	0:0	14	chrDither8
arg	369:83	369:84	13	0
water	369:83	0:0	14	0
water	369:85	0:0	12	;
call	370:24	370:84	12	yuv2plane1
arg	370:35	370:48	13	chrVSrcPtr[0]
water	370:35	0:0	14	chrVSrcPtr
op	370:45	0:0	14	[
water	370:46	0:0	14	0
op	370:47	0:0	14	]
arg	370:50	370:57	13	dest[2]
water	370:50	0:0	14	dest
op	370:54	0:0	14	[
water	370:55	0:0	14	2
op	370:56	0:0	14	]
arg	370:59	370:66	13	chrDstW
water	370:59	0:0	14	chrDstW
arg	370:68	370:81	13	c->chrDither8
water	370:68	0:0	14	c
op	370:69	0:0	14	->
water	370:71	0:0	14	chrDither8
arg	370:83	370:84	13	3
water	370:83	0:0	14	3
water	370:85	0:0	12	;
water	371:20	0:0	12	}
else	371:22	378:20	8
stmts	371:27	378:20	9	
water	371:27	0:0	10	{
call	372:24	374:60	10	yuv2planeX
arg	372:35	372:45	11	vChrFilter
water	372:35	0:0	12	vChrFilter
arg	373:35	373:49	11	vChrFilterSize
water	373:35	0:0	12	vChrFilterSize
arg	373:51	373:61	11	chrUSrcPtr
water	373:51	0:0	12	chrUSrcPtr
arg	373:63	373:70	11	dest[1]
water	373:63	0:0	12	dest
op	373:67	0:0	12	[
water	373:68	0:0	12	1
op	373:69	0:0	12	]
arg	374:35	374:42	11	chrDstW
water	374:35	0:0	12	chrDstW
arg	374:44	374:57	11	c->chrDither8
water	374:44	0:0	12	c
op	374:45	0:0	12	->
water	374:47	0:0	12	chrDither8
arg	374:59	374:60	11	0
water	374:59	0:0	12	0
water	374:61	0:0	10	;
call	375:24	377:99	10	yuv2planeX
arg	375:35	375:45	11	vChrFilter
water	375:35	0:0	12	vChrFilter
arg	376:35	376:49	11	vChrFilterSize
water	376:35	0:0	12	vChrFilterSize
arg	376:51	376:61	11	chrVSrcPtr
water	376:51	0:0	12	chrVSrcPtr
arg	376:63	376:70	11	dest[2]
water	376:63	0:0	12	dest
op	376:67	0:0	12	[
water	376:68	0:0	12	2
op	376:69	0:0	12	]
arg	377:35	377:42	11	chrDstW
water	377:35	0:0	12	chrDstW
arg	377:44	377:57	11	c->chrDither8
water	377:44	0:0	12	c
op	377:45	0:0	12	->
water	377:47	0:0	12	chrDither8
arg	377:59	377:99	11	use_mmx_vfilter?(c->uv_offx2>>1):3
water	377:59	0:0	12	use_mmx_vfilter
water	377:75	0:0	12	?
water	377:77	0:0	12	(
water	377:78	0:0	12	c
op	377:79	0:0	12	->
water	377:81	0:0	12	uv_offx2
op	377:90	0:0	12	>>
water	377:93	0:0	12	1
water	377:94	0:0	12	)
water	377:96	0:0	12	:
water	377:98	0:0	12	3
water	377:100	0:0	10	;
water	378:20	0:0	10	}
water	379:16	0:0	8	}
if	380:16	392:16	6	(CONFIG_SWSCALE_ALPHA && alpPixBuf)
cond	380:20	380:44	7	CONFIG_SWSCALE_ALPHA && alpPixBuf
water	380:20	0:0	8	CONFIG_SWSCALE_ALPHA
op	380:41	0:0	8	&&
water	380:44	0:0	8	alpPixBuf
stmts	380:55	392:16	7	
water	380:55	0:0	8	{
if	381:20	383:20	8	(use_mmx_vfilter)
cond	381:23	381:23	9	use_mmx_vfilter
water	381:23	0:0	10	use_mmx_vfilter
stmts	381:39	383:20	9	
water	381:39	0:0	10	{
water	382:24	0:0	10	vLumFilter
op	382:34	0:0	10	=
water	382:36	0:0	10	(
water	382:37	0:0	10	int16_t
op	382:45	0:0	10	*
water	382:46	0:0	10	)
water	382:47	0:0	10	c
op	382:48	0:0	10	->
water	382:50	0:0	10	alpMmxFilter
water	382:62	0:0	10	;
water	383:20	0:0	10	}
if	384:20	387:20	8	(vLumFilterSize == 1)
cond	384:24	384:42	9	vLumFilterSize == 1
water	384:24	0:0	10	vLumFilterSize
op	384:39	0:0	10	==
water	384:42	0:0	10	1
stmts	384:45	387:20	9	
water	384:45	0:0	10	{
call	385:24	386:51	10	yuv2plane1
arg	385:35	385:47	11	alpSrcPtr[0]
water	385:35	0:0	12	alpSrcPtr
op	385:44	0:0	12	[
water	385:45	0:0	12	0
op	385:46	0:0	12	]
arg	385:49	385:56	11	dest[3]
water	385:49	0:0	12	dest
op	385:53	0:0	12	[
water	385:54	0:0	12	3
op	385:55	0:0	12	]
arg	385:58	385:62	11	dstW
water	385:58	0:0	12	dstW
arg	386:35	386:48	11	c->lumDither8
water	386:35	0:0	12	c
op	386:36	0:0	12	->
water	386:38	0:0	12	lumDither8
arg	386:50	386:51	11	0
water	386:50	0:0	12	0
water	386:52	0:0	10	;
water	387:20	0:0	10	}
else	387:22	391:20	8
stmts	387:27	391:20	9	
water	387:27	0:0	10	{
call	388:24	390:57	10	yuv2planeX
arg	388:35	388:45	11	vLumFilter
water	388:35	0:0	12	vLumFilter
arg	389:35	389:49	11	vLumFilterSize
water	389:35	0:0	12	vLumFilterSize
arg	389:51	389:60	11	alpSrcPtr
water	389:51	0:0	12	alpSrcPtr
arg	389:62	389:69	11	dest[3]
water	389:62	0:0	12	dest
op	389:66	0:0	12	[
water	389:67	0:0	12	3
op	389:68	0:0	12	]
arg	390:35	390:39	11	dstW
water	390:35	0:0	12	dstW
arg	390:41	390:54	11	c->lumDither8
water	390:41	0:0	12	c
op	390:42	0:0	12	->
water	390:44	0:0	12	lumDither8
arg	390:56	390:57	11	0
water	390:56	0:0	12	0
water	390:58	0:0	10	;
water	391:20	0:0	10	}
water	392:16	0:0	8	}
water	393:12	0:0	6	}
else	393:14	420:12	4
stmts	393:19	420:12	5	
if	393:19	420:12	6	(yuv2packedX)
cond	393:23	393:23	7	yuv2packedX
water	393:23	0:0	8	yuv2packedX
stmts	393:36	420:12	7	
water	393:36	0:0	8	{
call	394:16	394:107	8	av_assert1
arg	394:27	394:107	9	lumSrcPtr+vLumFilterSize-1<(constint16_t**)lumPixBuf+vLumBufSize*2
water	394:27	0:0	10	lumSrcPtr
op	394:38	0:0	10	+
water	394:40	0:0	10	vLumFilterSize
op	394:55	0:0	10	-
water	394:57	0:0	10	1
op	394:59	0:0	10	<
water	394:61	0:0	10	(
water	394:62	0:0	10	const
water	394:68	0:0	10	int16_t
op	394:76	0:0	10	*
op	394:77	0:0	10	*
water	394:78	0:0	10	)
water	394:79	0:0	10	lumPixBuf
op	394:90	0:0	10	+
water	394:92	0:0	10	vLumBufSize
op	394:104	0:0	10	*
water	394:106	0:0	10	2
water	394:108	0:0	8	;
call	395:16	395:107	8	av_assert1
arg	395:27	395:107	9	chrUSrcPtr+vChrFilterSize-1<(constint16_t**)chrUPixBuf+vChrBufSize*2
water	395:27	0:0	10	chrUSrcPtr
op	395:38	0:0	10	+
water	395:40	0:0	10	vChrFilterSize
op	395:55	0:0	10	-
water	395:57	0:0	10	1
op	395:59	0:0	10	<
water	395:61	0:0	10	(
water	395:62	0:0	10	const
water	395:68	0:0	10	int16_t
op	395:76	0:0	10	*
op	395:77	0:0	10	*
water	395:78	0:0	10	)
water	395:79	0:0	10	chrUPixBuf
op	395:90	0:0	10	+
water	395:92	0:0	10	vChrBufSize
op	395:104	0:0	10	*
water	395:106	0:0	10	2
water	395:108	0:0	8	;
if	396:16	402:16	8	(c -> yuv2packed1 && vLumFilterSize == 1 && vChrFilterSize <= 2)
cond	396:20	397:38	9	c -> yuv2packed1 && vLumFilterSize == 1 && vChrFilterSize <= 2
water	396:20	0:0	10	c
op	396:21	0:0	10	->
water	396:23	0:0	10	yuv2packed1
op	396:35	0:0	10	&&
water	396:38	0:0	10	vLumFilterSize
op	396:53	0:0	10	==
water	396:56	0:0	10	1
op	396:58	0:0	10	&&
water	397:20	0:0	10	vChrFilterSize
op	397:35	0:0	10	<=
water	397:38	0:0	10	2
stmts	397:41	402:16	9	
water	397:41	0:0	10	{
decl	398:20	398:85	10	int	chrAlpha
op	398:33	0:0	10	=
water	398:35	0:0	10	vChrFilterSize
op	398:50	0:0	10	==
water	398:53	0:0	10	1
water	398:55	0:0	10	?
water	398:57	0:0	10	0
water	398:59	0:0	10	:
water	398:61	0:0	10	vChrFilter
op	398:71	0:0	10	[
water	398:72	0:0	10	2
op	398:74	0:0	10	*
water	398:76	0:0	10	dstY
op	398:81	0:0	10	+
water	398:83	0:0	10	1
op	398:84	0:0	10	]
call	399:20	401:61	10	yuv2packed1
arg	399:32	399:33	11	c
water	399:32	0:0	12	c
arg	399:35	399:45	11	*lumSrcPtr
op	399:35	0:0	12	*
water	399:36	0:0	12	lumSrcPtr
arg	399:47	399:57	11	chrUSrcPtr
water	399:47	0:0	12	chrUSrcPtr
arg	399:59	399:69	11	chrVSrcPtr
water	399:59	0:0	12	chrVSrcPtr
arg	400:32	400:61	11	alpPixBuf?*alpSrcPtr:NULL
water	400:32	0:0	12	alpPixBuf
water	400:42	0:0	12	?
op	400:44	0:0	12	*
water	400:45	0:0	12	alpSrcPtr
water	400:55	0:0	12	:
water	400:57	0:0	12	NULL
arg	401:32	401:39	11	dest[0]
water	401:32	0:0	12	dest
op	401:36	0:0	12	[
water	401:37	0:0	12	0
op	401:38	0:0	12	]
arg	401:41	401:45	11	dstW
water	401:41	0:0	12	dstW
arg	401:47	401:55	11	chrAlpha
water	401:47	0:0	12	chrAlpha
arg	401:57	401:61	11	dstY
water	401:57	0:0	12	dstY
water	401:62	0:0	10	;
water	402:16	0:0	10	}
else	402:18	413:16	8
stmts	402:23	413:16	9	
if	402:23	413:16	10	(c -> yuv2packed2 && vLumFilterSize == 2 && vChrFilterSize == 2)
cond	402:27	403:45	11	c -> yuv2packed2 && vLumFilterSize == 2 && vChrFilterSize == 2
water	402:27	0:0	12	c
op	402:28	0:0	12	->
water	402:30	0:0	12	yuv2packed2
op	402:42	0:0	12	&&
water	402:45	0:0	12	vLumFilterSize
op	402:60	0:0	12	==
water	402:63	0:0	12	2
op	402:65	0:0	12	&&
water	403:27	0:0	12	vChrFilterSize
op	403:42	0:0	12	==
water	403:45	0:0	12	2
stmts	403:48	413:16	11	
water	403:48	0:0	12	{
decl	404:20	404:59	12	int	lumAlpha
op	404:33	0:0	12	=
water	404:35	0:0	12	vLumFilter
op	404:45	0:0	12	[
water	404:46	0:0	12	2
op	404:48	0:0	12	*
water	404:50	0:0	12	dstY
op	404:55	0:0	12	+
water	404:57	0:0	12	1
op	404:58	0:0	12	]
decl	405:20	405:59	12	int	chrAlpha
op	405:33	0:0	12	=
water	405:35	0:0	12	vChrFilter
op	405:45	0:0	12	[
water	405:46	0:0	12	2
op	405:48	0:0	12	*
water	405:50	0:0	12	dstY
op	405:55	0:0	12	+
water	405:57	0:0	12	1
op	405:58	0:0	12	]
water	406:20	0:0	12	lumMmxFilter
op	406:32	0:0	12	[
water	406:33	0:0	12	2
op	406:34	0:0	12	]
op	406:36	0:0	12	=
water	407:20	0:0	12	lumMmxFilter
op	407:32	0:0	12	[
water	407:33	0:0	12	3
op	407:34	0:0	12	]
op	407:36	0:0	12	=
water	407:38	0:0	12	vLumFilter
op	407:48	0:0	12	[
water	407:49	0:0	12	2
op	407:51	0:0	12	*
water	407:53	0:0	12	dstY
op	407:57	0:0	12	]
op	407:62	0:0	12	*
water	407:64	0:0	12	0
water	407:65	0:0	12	x10001
water	407:71	0:0	12	;
water	408:20	0:0	12	chrMmxFilter
op	408:32	0:0	12	[
water	408:33	0:0	12	2
op	408:34	0:0	12	]
op	408:36	0:0	12	=
water	409:20	0:0	12	chrMmxFilter
op	409:32	0:0	12	[
water	409:33	0:0	12	3
op	409:34	0:0	12	]
op	409:36	0:0	12	=
water	409:38	0:0	12	vChrFilter
op	409:48	0:0	12	[
water	409:49	0:0	12	2
op	409:51	0:0	12	*
water	409:53	0:0	12	chrDstY
op	409:60	0:0	12	]
op	409:62	0:0	12	*
water	409:64	0:0	12	0
water	409:65	0:0	12	x10001
water	409:71	0:0	12	;
call	410:20	412:71	12	yuv2packed2
arg	410:32	410:33	13	c
water	410:32	0:0	14	c
arg	410:35	410:44	13	lumSrcPtr
water	410:35	0:0	14	lumSrcPtr
arg	410:46	410:56	13	chrUSrcPtr
water	410:46	0:0	14	chrUSrcPtr
arg	410:58	410:68	13	chrVSrcPtr
water	410:58	0:0	14	chrVSrcPtr
arg	411:32	411:60	13	alpPixBuf?alpSrcPtr:NULL
water	411:32	0:0	14	alpPixBuf
water	411:42	0:0	14	?
water	411:44	0:0	14	alpSrcPtr
water	411:54	0:0	14	:
water	411:56	0:0	14	NULL
arg	412:32	412:39	13	dest[0]
water	412:32	0:0	14	dest
op	412:36	0:0	14	[
water	412:37	0:0	14	0
op	412:38	0:0	14	]
arg	412:41	412:45	13	dstW
water	412:41	0:0	14	dstW
arg	412:47	412:55	13	lumAlpha
water	412:47	0:0	14	lumAlpha
arg	412:57	412:65	13	chrAlpha
water	412:57	0:0	14	chrAlpha
arg	412:67	412:71	13	dstY
water	412:67	0:0	14	dstY
water	412:72	0:0	12	;
water	413:16	0:0	12	}
else	413:18	419:16	8
stmts	413:23	419:16	9	
water	413:23	0:0	10	{
call	414:20	418:62	10	yuv2packedX
arg	414:32	414:33	11	c
water	414:32	0:0	12	c
arg	414:35	414:69	11	vLumFilter+dstY*vLumFilterSize
water	414:35	0:0	12	vLumFilter
op	414:46	0:0	12	+
water	414:48	0:0	12	dstY
op	414:53	0:0	12	*
water	414:55	0:0	12	vLumFilterSize
arg	415:32	415:41	11	lumSrcPtr
water	415:32	0:0	12	lumSrcPtr
arg	415:43	415:57	11	vLumFilterSize
water	415:43	0:0	12	vLumFilterSize
arg	416:32	416:66	11	vChrFilter+dstY*vChrFilterSize
water	416:32	0:0	12	vChrFilter
op	416:43	0:0	12	+
water	416:45	0:0	12	dstY
op	416:50	0:0	12	*
water	416:52	0:0	12	vChrFilterSize
arg	417:32	417:42	11	chrUSrcPtr
water	417:32	0:0	12	chrUSrcPtr
arg	417:44	417:54	11	chrVSrcPtr
water	417:44	0:0	12	chrVSrcPtr
arg	417:56	417:70	11	vChrFilterSize
water	417:56	0:0	12	vChrFilterSize
arg	418:32	418:41	11	alpSrcPtr
water	418:32	0:0	12	alpSrcPtr
arg	418:43	418:50	11	dest[0]
water	418:43	0:0	12	dest
op	418:47	0:0	12	[
water	418:48	0:0	12	0
op	418:49	0:0	12	]
arg	418:52	418:56	11	dstW
water	418:52	0:0	12	dstW
arg	418:58	418:62	11	dstY
water	418:58	0:0	12	dstY
water	418:63	0:0	10	;
water	419:16	0:0	10	}
water	420:12	0:0	8	}
else	420:14	427:12	4
stmts	420:19	427:12	5	
water	420:19	0:0	6	{
call	421:16	421:55	6	av_assert1
arg	421:27	421:55	7	!yuv2packed1&&!yuv2packed2
op	421:27	0:0	8	!
water	421:28	0:0	8	yuv2packed1
op	421:40	0:0	8	&&
op	421:43	0:0	8	!
water	421:44	0:0	8	yuv2packed2
water	421:56	0:0	6	;
call	422:16	426:52	6	yuv2anyX
arg	422:25	422:26	7	c
water	422:25	0:0	8	c
arg	422:28	422:62	7	vLumFilter+dstY*vLumFilterSize
water	422:28	0:0	8	vLumFilter
op	422:39	0:0	8	+
water	422:41	0:0	8	dstY
op	422:46	0:0	8	*
water	422:48	0:0	8	vLumFilterSize
arg	423:25	423:34	7	lumSrcPtr
water	423:25	0:0	8	lumSrcPtr
arg	423:36	423:50	7	vLumFilterSize
water	423:36	0:0	8	vLumFilterSize
arg	424:25	424:59	7	vChrFilter+dstY*vChrFilterSize
water	424:25	0:0	8	vChrFilter
op	424:36	0:0	8	+
water	424:38	0:0	8	dstY
op	424:43	0:0	8	*
water	424:45	0:0	8	vChrFilterSize
arg	425:25	425:35	7	chrUSrcPtr
water	425:25	0:0	8	chrUSrcPtr
arg	425:37	425:47	7	chrVSrcPtr
water	425:37	0:0	8	chrVSrcPtr
arg	425:49	425:63	7	vChrFilterSize
water	425:49	0:0	8	vChrFilterSize
arg	426:25	426:34	7	alpSrcPtr
water	426:25	0:0	8	alpSrcPtr
arg	426:36	426:40	7	dest
water	426:36	0:0	8	dest
arg	426:42	426:46	7	dstW
water	426:42	0:0	8	dstW
arg	426:48	426:52	7	dstY
water	426:48	0:0	8	dstY
water	426:53	0:0	6	;
water	427:12	0:0	6	}
if	428:12	429:51	4	(perform_gamma)
cond	428:16	428:16	5	perform_gamma
water	428:16	0:0	6	perform_gamma
stmts	429:16	429:51	5	
call	429:16	429:50	6	gamma_convert
arg	429:30	429:34	7	dest
water	429:30	0:0	8	dest
arg	429:36	429:40	7	dstW
water	429:36	0:0	8	dstW
arg	429:42	429:50	7	c->gamma
water	429:42	0:0	8	c
op	429:43	0:0	8	->
water	429:45	0:0	8	gamma
water	429:51	0:0	6	;
water	431:8	0:0	4	}
water	432:4	0:0	4	}
if	433:4	443:4	2	(isPlanar (dstFormat ) &&isALPHA (dstFormat ) && ! alpPixBuf)
cond	433:8	433:54	3	isPlanar (dstFormat ) &&isALPHA (dstFormat ) && ! alpPixBuf
call	433:8	433:26	4	isPlanar
arg	433:17	433:26	5	dstFormat
water	433:17	0:0	6	dstFormat
op	433:28	0:0	4	&&
call	433:31	433:48	4	isALPHA
arg	433:39	433:48	5	dstFormat
water	433:39	0:0	6	dstFormat
op	433:50	0:0	4	&&
op	433:53	0:0	4	!
water	433:54	0:0	4	alpPixBuf
stmts	433:65	443:4	3	
water	433:65	0:0	4	{
decl	434:8	434:25	4	int	length
op	434:19	0:0	4	=
water	434:21	0:0	4	dstW
decl	435:8	435:36	4	int	height
op	435:19	0:0	4	=
water	435:21	0:0	4	dstY
op	435:26	0:0	4	-
water	435:28	0:0	4	lastDstY
if	436:8	441:8	4	(is16BPS (dstFormat ) ||isNBPS (dstFormat ))
cond	436:12	436:50	5	is16BPS (dstFormat ) ||isNBPS (dstFormat )
call	436:12	436:29	6	is16BPS
arg	436:20	436:29	7	dstFormat
water	436:20	0:0	8	dstFormat
op	436:31	0:0	6	||
call	436:34	436:50	6	isNBPS
arg	436:41	436:50	7	dstFormat
water	436:41	0:0	8	dstFormat
stmts	436:53	441:8	5	
water	436:53	0:0	6	{
decl	437:12	437:75	6	const AVPixFmtDescriptor	*desc
op	437:43	0:0	6	=
call	437:45	437:74	7	av_pix_fmt_desc_get
arg	437:65	437:74	8	dstFormat
water	437:65	0:0	9	dstFormat
call	438:12	440:35	6	fillPlane16
arg	438:24	438:30	7	dst[3]
water	438:24	0:0	8	dst
op	438:27	0:0	8	[
water	438:28	0:0	8	3
op	438:29	0:0	8	]
arg	438:32	438:44	7	dstStride[3]
water	438:32	0:0	8	dstStride
op	438:41	0:0	8	[
water	438:42	0:0	8	3
op	438:43	0:0	8	]
arg	438:46	438:52	7	length
water	438:46	0:0	8	length
arg	438:54	438:60	7	height
water	438:54	0:0	8	height
arg	438:62	438:70	7	lastDstY
water	438:62	0:0	8	lastDstY
arg	439:20	439:21	7	1
water	439:20	0:0	8	1
arg	439:23	439:49	7	desc->comp[3].depth_minus1
water	439:23	0:0	8	desc
op	439:27	0:0	8	->
water	439:29	0:0	8	comp
op	439:33	0:0	8	[
water	439:34	0:0	8	3
op	439:35	0:0	8	]
op	439:36	0:0	8	.
water	439:37	0:0	8	depth_minus1
arg	440:20	440:35	7	isBE(dstFormat)
call	440:20	440:34	8	isBE
arg	440:25	440:34	9	dstFormat
water	440:25	0:0	10	dstFormat
water	440:36	0:0	6	;
water	441:8	0:0	6	}
else	441:10	442:74	4
stmts	442:12	442:74	5	
call	442:12	442:73	6	fillPlane
arg	442:22	442:28	7	dst[3]
water	442:22	0:0	8	dst
op	442:25	0:0	8	[
water	442:26	0:0	8	3
op	442:27	0:0	8	]
arg	442:30	442:42	7	dstStride[3]
water	442:30	0:0	8	dstStride
op	442:39	0:0	8	[
water	442:40	0:0	8	3
op	442:41	0:0	8	]
arg	442:44	442:50	7	length
water	442:44	0:0	8	length
arg	442:52	442:58	7	height
water	442:52	0:0	8	height
arg	442:60	442:68	7	lastDstY
water	442:60	0:0	8	lastDstY
arg	442:70	442:73	7	255
water	442:70	0:0	8	255
water	442:74	0:0	6	;
water	443:4	0:0	4	}
if	445:4	446:48	2	(av_get_cpu_flags ( ) & AV_CPU_FLAG_MMXEXT)
cond	445:8	445:29	3	av_get_cpu_flags ( ) & AV_CPU_FLAG_MMXEXT
call	445:8	445:25	4	av_get_cpu_flags
op	445:27	0:0	4	&
water	445:29	0:0	4	AV_CPU_FLAG_MMXEXT
stmts	446:8	446:48	3	
water	446:8	0:0	4	__asm__
water	446:16	0:0	4	volatile
water	446:25	0:0	4	(
water	446:26	0:0	4	"sfence"
op	446:35	0:0	4	::
water	446:37	0:0	4	:
water	446:39	0:0	4	"memory"
water	446:47	0:0	4	)
water	446:48	0:0	4	;
call	448:4	448:11	2	emms_c
water	448:12	0:0	2	;
water	450:4	0:0	2	c
op	450:5	0:0	2	->
water	450:7	0:0	2	dstY
op	450:20	0:0	2	=
water	450:22	0:0	2	dstY
water	450:26	0:0	2	;
water	451:4	0:0	2	c
op	451:5	0:0	2	->
water	451:7	0:0	2	lumBufIndex
op	451:20	0:0	2	=
water	451:22	0:0	2	lumBufIndex
water	451:33	0:0	2	;
water	452:4	0:0	2	c
op	452:5	0:0	2	->
water	452:7	0:0	2	chrBufIndex
op	452:20	0:0	2	=
water	452:22	0:0	2	chrBufIndex
water	452:33	0:0	2	;
water	453:4	0:0	2	c
op	453:5	0:0	2	->
water	453:7	0:0	2	lastInLumBuf
op	453:20	0:0	2	=
water	453:22	0:0	2	lastInLumBuf
water	453:34	0:0	2	;
water	454:4	0:0	2	c
op	454:5	0:0	2	->
water	454:7	0:0	2	lastInChrBuf
op	454:20	0:0	2	=
water	454:22	0:0	2	lastInChrBuf
water	454:34	0:0	2	;
return	455:4	455:26	2	dstY-lastDstY
water	455:11	0:0	3	dstY
op	455:16	0:0	3	-
water	455:18	0:0	3	lastDstY
