func	1:0	58:0	0	static inline int	mpeg2_fast_decode_block_non_intra
params	1:51	0:0	1	
param	1:52	1:69	2	MpegEncContext *	s
param	2:52	2:66	2	int16_t *	block
param	2:68	2:73	2	int	n
stmnts	0:0	57:12	1	
decl	4:4	4:24	2	int	level
water	4:13	0:0	2	,
decl	4:4	4:24	2	int	i
water	4:16	0:0	2	,
decl	4:4	4:24	2	int	j
water	4:19	0:0	2	,
decl	4:4	4:24	2	int	run
decl	5:4	5:43	2	RLTable	*rl
op	5:29	0:0	2	=
op	5:31	0:0	2	&
water	5:32	0:0	2	ff_rl_mpeg1
water	6:4	0:0	2	uint8_t
op	6:12	0:0	2	*
water	6:13	0:0	2	const
water	6:19	0:0	2	scantable
op	6:29	0:0	2	=
water	6:31	0:0	2	s
op	6:32	0:0	2	->
water	6:34	0:0	2	intra_scantable
op	6:49	0:0	2	.
water	6:50	0:0	2	permutated
water	6:60	0:0	2	;
decl	7:4	7:40	2	const int	qscale
op	7:29	0:0	2	=
water	7:31	0:0	2	s
op	7:32	0:0	2	->
water	7:34	0:0	2	qscale
call	8:4	8:26	2	OPEN_READER
arg	8:16	8:18	3	re
water	8:16	0:0	4	re
arg	8:20	8:26	3	&s->gb
op	8:20	0:0	4	&
water	8:21	0:0	4	s
op	8:22	0:0	4	->
water	8:24	0:0	4	gb
water	8:27	0:0	2	;
water	9:4	0:0	2	i
op	9:6	0:0	2	=
op	9:8	0:0	2	-
water	9:9	0:0	2	1
water	9:10	0:0	2	;
call	11:4	11:27	2	UPDATE_CACHE
arg	11:17	11:19	3	re
water	11:17	0:0	4	re
arg	11:21	11:27	3	&s->gb
op	11:21	0:0	4	&
water	11:22	0:0	4	s
op	11:23	0:0	4	->
water	11:25	0:0	4	gb
water	11:28	0:0	2	;
if	12:4	21:4	2	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) < 0)
cond	12:8	12:44	3	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) < 0
water	12:8	0:0	4	(
water	12:9	0:0	4	(
water	12:10	0:0	4	int32_t
water	12:17	0:0	4	)
call	12:19	12:39	4	GET_CACHE
arg	12:29	12:31	5	re
water	12:29	0:0	6	re
arg	12:33	12:39	5	&s->gb
op	12:33	0:0	6	&
water	12:34	0:0	6	s
op	12:35	0:0	6	->
water	12:37	0:0	6	gb
water	12:40	0:0	4	)
op	12:42	0:0	4	<
water	12:44	0:0	4	0
stmts	12:47	21:4	3	
water	12:47	0:0	4	{
water	13:8	0:0	4	level
op	13:14	0:0	4	=
water	13:16	0:0	4	(
water	13:17	0:0	4	3
op	13:19	0:0	4	*
water	13:21	0:0	4	qscale
water	13:27	0:0	4	)
op	13:29	0:0	4	>>
water	13:32	0:0	4	1
water	13:33	0:0	4	;
if	14:8	15:26	4	(GET_CACHE (re ,& s -> gb ) & 0 x40000000)
cond	14:12	14:37	5	GET_CACHE (re ,& s -> gb ) & 0 x40000000
call	14:12	14:32	6	GET_CACHE
arg	14:22	14:24	7	re
water	14:22	0:0	8	re
arg	14:26	14:32	7	&s->gb
op	14:26	0:0	8	&
water	14:27	0:0	8	s
op	14:28	0:0	8	->
water	14:30	0:0	8	gb
op	14:34	0:0	6	&
water	14:36	0:0	6	0
water	14:37	0:0	6	x40000000
stmts	15:12	15:26	5	
water	15:12	0:0	6	level
op	15:18	0:0	6	=
op	15:20	0:0	6	-
water	15:21	0:0	6	level
water	15:26	0:0	6	;
water	16:8	0:0	4	block
op	16:13	0:0	4	[
water	16:14	0:0	4	0
op	16:15	0:0	4	]
op	16:17	0:0	4	=
water	16:19	0:0	4	level
water	16:24	0:0	4	;
water	17:8	0:0	4	i
op	17:9	0:0	4	++
water	17:11	0:0	4	;
call	18:8	18:31	4	SKIP_BITS
arg	18:18	18:20	5	re
water	18:18	0:0	6	re
arg	18:22	18:28	5	&s->gb
op	18:22	0:0	6	&
water	18:23	0:0	6	s
op	18:24	0:0	6	->
water	18:26	0:0	6	gb
arg	18:30	18:31	5	2
water	18:30	0:0	6	2
water	18:32	0:0	4	;
if	19:8	20:20	4	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF)
cond	19:12	19:60	5	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF
water	19:12	0:0	6	(
water	19:13	0:0	6	(
water	19:14	0:0	6	int32_t
water	19:21	0:0	6	)
call	19:23	19:43	6	GET_CACHE
arg	19:33	19:35	7	re
water	19:33	0:0	8	re
arg	19:37	19:43	7	&s->gb
op	19:37	0:0	8	&
water	19:38	0:0	8	s
op	19:39	0:0	8	->
water	19:41	0:0	8	gb
water	19:44	0:0	6	)
op	19:46	0:0	6	<=
water	19:49	0:0	6	(
water	19:50	0:0	6	int32_t
water	19:57	0:0	6	)
water	19:59	0:0	6	0
water	19:60	0:0	6	xBFFFFFFF
stmts	20:12	20:20	5	
goto	20:12	20:20	6	end
water	20:17	0:0	7	end
water	21:4	0:0	4	}
for	23:4	52:4	2	(;;)
forinit	23:9	23:9	3	;
water	23:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	23:13	52:4	3	
water	23:13	0:0	4	{
call	24:8	24:76	4	GET_RL_VLC
arg	24:19	24:24	5	level
water	24:19	0:0	6	level
arg	24:26	24:29	5	run
water	24:26	0:0	6	run
arg	24:31	24:33	5	re
water	24:31	0:0	6	re
arg	24:35	24:41	5	&s->gb
op	24:35	0:0	6	&
water	24:36	0:0	6	s
op	24:37	0:0	6	->
water	24:39	0:0	6	gb
arg	24:43	24:56	5	rl->rl_vlc[0]
water	24:43	0:0	6	rl
op	24:45	0:0	6	->
water	24:47	0:0	6	rl_vlc
op	24:53	0:0	6	[
water	24:54	0:0	6	0
op	24:55	0:0	6	]
arg	24:58	24:70	5	TEX_VLC_BITS
water	24:58	0:0	6	TEX_VLC_BITS
arg	24:72	24:73	5	2
water	24:72	0:0	6	2
arg	24:75	24:76	5	0
water	24:75	0:0	6	0
water	24:77	0:0	4	;
if	25:8	32:8	4	(level != 0)
cond	25:12	25:21	5	level != 0
water	25:12	0:0	6	level
op	25:18	0:0	6	!=
water	25:21	0:0	6	0
stmts	25:24	32:8	5	
water	25:24	0:0	6	{
water	26:12	0:0	6	i
op	26:14	0:0	6	+=
water	26:17	0:0	6	run
water	26:20	0:0	6	;
water	27:12	0:0	6	j
op	27:14	0:0	6	=
water	27:16	0:0	6	scantable
op	27:25	0:0	6	[
water	27:26	0:0	6	i
op	27:27	0:0	6	]
water	27:28	0:0	6	;
water	28:12	0:0	6	level
op	28:18	0:0	6	=
water	28:20	0:0	6	(
water	28:21	0:0	6	(
water	28:22	0:0	6	level
op	28:28	0:0	6	*
water	28:30	0:0	6	2
op	28:32	0:0	6	+
water	28:34	0:0	6	1
water	28:35	0:0	6	)
op	28:37	0:0	6	*
water	28:39	0:0	6	qscale
water	28:45	0:0	6	)
op	28:47	0:0	6	>>
water	28:50	0:0	6	1
water	28:51	0:0	6	;
water	29:12	0:0	6	level
op	29:18	0:0	6	=
water	29:20	0:0	6	(
water	29:21	0:0	6	level
op	29:27	0:0	6	^
call	29:29	29:53	6	SHOW_SBITS
arg	29:40	29:42	7	re
water	29:40	0:0	8	re
arg	29:44	29:50	7	&s->gb
op	29:44	0:0	8	&
water	29:45	0:0	8	s
op	29:46	0:0	8	->
water	29:48	0:0	8	gb
arg	29:52	29:53	7	1
water	29:52	0:0	8	1
water	29:54	0:0	6	)
op	29:56	0:0	6	-
call	30:20	30:44	6	SHOW_SBITS
arg	30:31	30:33	7	re
water	30:31	0:0	8	re
arg	30:35	30:41	7	&s->gb
op	30:35	0:0	8	&
water	30:36	0:0	8	s
op	30:37	0:0	8	->
water	30:39	0:0	8	gb
arg	30:43	30:44	7	1
water	30:43	0:0	8	1
water	30:45	0:0	6	;
call	31:12	31:35	6	SKIP_BITS
arg	31:22	31:24	7	re
water	31:22	0:0	8	re
arg	31:26	31:32	7	&s->gb
op	31:26	0:0	8	&
water	31:27	0:0	8	s
op	31:28	0:0	8	->
water	31:30	0:0	8	gb
arg	31:34	31:35	7	1
water	31:34	0:0	8	1
water	31:36	0:0	6	;
water	32:8	0:0	6	}
else	32:10	47:8	4
stmts	32:15	47:8	5	
water	32:15	0:0	6	{
water	34:12	0:0	6	run
op	34:16	0:0	6	=
call	34:18	34:42	6	SHOW_UBITS
arg	34:29	34:31	7	re
water	34:29	0:0	8	re
arg	34:33	34:39	7	&s->gb
op	34:33	0:0	8	&
water	34:34	0:0	8	s
op	34:35	0:0	8	->
water	34:37	0:0	8	gb
arg	34:41	34:42	7	6
water	34:41	0:0	8	6
op	34:44	0:0	6	+
water	34:46	0:0	6	1
water	34:47	0:0	6	;
call	35:12	35:40	6	LAST_SKIP_BITS
arg	35:27	35:29	7	re
water	35:27	0:0	8	re
arg	35:31	35:37	7	&s->gb
op	35:31	0:0	8	&
water	35:32	0:0	8	s
op	35:33	0:0	8	->
water	35:35	0:0	8	gb
arg	35:39	35:40	7	6
water	35:39	0:0	8	6
water	35:41	0:0	6	;
call	36:12	36:35	6	UPDATE_CACHE
arg	36:25	36:27	7	re
water	36:25	0:0	8	re
arg	36:29	36:35	7	&s->gb
op	36:29	0:0	8	&
water	36:30	0:0	8	s
op	36:31	0:0	8	->
water	36:33	0:0	8	gb
water	36:36	0:0	6	;
water	37:12	0:0	6	level
op	37:18	0:0	6	=
call	37:20	37:45	6	SHOW_SBITS
arg	37:31	37:33	7	re
water	37:31	0:0	8	re
arg	37:35	37:41	7	&s->gb
op	37:35	0:0	8	&
water	37:36	0:0	8	s
op	37:37	0:0	8	->
water	37:39	0:0	8	gb
arg	37:43	37:45	7	12
water	37:43	0:0	8	12
water	37:46	0:0	6	;
call	38:12	38:36	6	SKIP_BITS
arg	38:22	38:24	7	re
water	38:22	0:0	8	re
arg	38:26	38:32	7	&s->gb
op	38:26	0:0	8	&
water	38:27	0:0	8	s
op	38:28	0:0	8	->
water	38:30	0:0	8	gb
arg	38:34	38:36	7	12
water	38:34	0:0	8	12
water	38:37	0:0	6	;
water	39:12	0:0	6	i
op	39:14	0:0	6	+=
water	39:17	0:0	6	run
water	39:20	0:0	6	;
water	40:12	0:0	6	j
op	40:14	0:0	6	=
water	40:16	0:0	6	scantable
op	40:25	0:0	6	[
water	40:26	0:0	6	i
op	40:27	0:0	6	]
water	40:28	0:0	6	;
if	41:12	44:12	6	(level < 0)
cond	41:16	41:24	7	level < 0
water	41:16	0:0	8	level
op	41:22	0:0	8	<
water	41:24	0:0	8	0
stmts	41:27	44:12	7	
water	41:27	0:0	8	{
water	42:16	0:0	8	level
op	42:22	0:0	8	=
water	42:24	0:0	8	(
water	42:25	0:0	8	(
op	42:26	0:0	8	-
water	42:27	0:0	8	level
op	42:33	0:0	8	*
water	42:35	0:0	8	2
op	42:37	0:0	8	+
water	42:39	0:0	8	1
water	42:40	0:0	8	)
op	42:42	0:0	8	*
water	42:44	0:0	8	qscale
water	42:50	0:0	8	)
op	42:52	0:0	8	>>
water	42:55	0:0	8	1
water	42:56	0:0	8	;
water	43:16	0:0	8	level
op	43:22	0:0	8	=
op	43:24	0:0	8	-
water	43:25	0:0	8	level
water	43:30	0:0	8	;
water	44:12	0:0	8	}
else	44:14	46:12	6
stmts	44:19	46:12	7	
water	44:19	0:0	8	{
water	45:16	0:0	8	level
op	45:22	0:0	8	=
water	45:24	0:0	8	(
water	45:25	0:0	8	(
water	45:26	0:0	8	level
op	45:32	0:0	8	*
water	45:34	0:0	8	2
op	45:36	0:0	8	+
water	45:38	0:0	8	1
water	45:39	0:0	8	)
op	45:41	0:0	8	*
water	45:43	0:0	8	qscale
water	45:49	0:0	8	)
op	45:51	0:0	8	>>
water	45:54	0:0	8	1
water	45:55	0:0	8	;
water	46:12	0:0	8	}
water	47:8	0:0	6	}
water	48:8	0:0	4	block
op	48:13	0:0	4	[
water	48:14	0:0	4	j
op	48:15	0:0	4	]
op	48:17	0:0	4	=
water	48:19	0:0	4	level
water	48:24	0:0	4	;
if	49:8	50:17	4	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF || i > 63)
cond	49:12	49:77	5	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF || i > 63
water	49:12	0:0	6	(
water	49:13	0:0	6	(
water	49:14	0:0	6	int32_t
water	49:21	0:0	6	)
call	49:23	49:43	6	GET_CACHE
arg	49:33	49:35	7	re
water	49:33	0:0	8	re
arg	49:37	49:43	7	&s->gb
op	49:37	0:0	8	&
water	49:38	0:0	8	s
op	49:39	0:0	8	->
water	49:41	0:0	8	gb
water	49:44	0:0	6	)
op	49:46	0:0	6	<=
water	49:49	0:0	6	(
water	49:50	0:0	6	int32_t
water	49:57	0:0	6	)
water	49:59	0:0	6	0
water	49:60	0:0	6	xBFFFFFFF
op	49:70	0:0	6	||
water	49:73	0:0	6	i
op	49:75	0:0	6	>
water	49:77	0:0	6	63
stmts	50:12	50:17	5	
break	50:12	50:17	6	
call	51:8	51:31	4	UPDATE_CACHE
arg	51:21	51:23	5	re
water	51:21	0:0	6	re
arg	51:25	51:31	5	&s->gb
op	51:25	0:0	6	&
water	51:26	0:0	6	s
op	51:27	0:0	6	->
water	51:29	0:0	6	gb
water	51:32	0:0	4	;
water	52:4	0:0	4	}
label	53:0	53:3	2	end :
call	54:4	54:32	2	LAST_SKIP_BITS
arg	54:19	54:21	3	re
water	54:19	0:0	4	re
arg	54:23	54:29	3	&s->gb
op	54:23	0:0	4	&
water	54:24	0:0	4	s
op	54:25	0:0	4	->
water	54:27	0:0	4	gb
arg	54:31	54:32	3	2
water	54:31	0:0	4	2
water	54:33	0:0	2	;
call	55:4	55:27	2	CLOSE_READER
arg	55:17	55:19	3	re
water	55:17	0:0	4	re
arg	55:21	55:27	3	&s->gb
op	55:21	0:0	4	&
water	55:22	0:0	4	s
op	55:23	0:0	4	->
water	55:25	0:0	4	gb
water	55:28	0:0	2	;
water	56:4	0:0	2	s
op	56:5	0:0	2	->
water	56:7	0:0	2	block_last_index
op	56:23	0:0	2	[
water	56:24	0:0	2	n
op	56:25	0:0	2	]
op	56:27	0:0	2	=
water	56:29	0:0	2	i
water	56:30	0:0	2	;
return	57:4	57:12	2	0
water	57:11	0:0	3	0
