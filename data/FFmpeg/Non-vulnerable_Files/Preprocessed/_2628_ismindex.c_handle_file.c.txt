func	1:0	105:0	0	static int	handle_file
params	1:22	0:0	1	
param	1:23	1:44	2	struct Tracks *	tracks
param	1:46	1:62	2	const char *	file
param	1:64	1:73	2	int	split
param	2:23	2:31	2	int	ismf
param	2:33	2:53	2	const char *	basename
param	3:23	3:48	2	const char *	output_prefix
stmnts	0:0	104:14	1	
decl	5:4	5:31	2	AVFormatContext	*ctx
op	5:25	0:0	2	=
water	5:27	0:0	2	NULL
decl	6:4	6:51	2	int	err
op	6:12	0:0	2	=
water	6:14	0:0	2	0
water	6:15	0:0	2	,
decl	6:4	6:51	2	int	i
water	6:18	0:0	2	,
decl	6:4	6:51	2	int	orig_tracks
op	6:32	0:0	2	=
water	6:34	0:0	2	tracks
op	6:40	0:0	2	->
water	6:42	0:0	2	nb_tracks
decl	7:4	7:25	2	char	errbuf[50]
water	7:19	0:0	2	,
decl	7:4	7:25	2	char	*ptr
decl	8:4	8:23	2	struct Track	*track
water	9:4	0:0	2	err
op	9:8	0:0	2	=
call	9:10	9:52	2	avformat_open_input
arg	9:30	9:34	3	&ctx
op	9:30	0:0	4	&
water	9:31	0:0	4	ctx
arg	9:36	9:40	3	file
water	9:36	0:0	4	file
arg	9:42	9:46	3	NULL
water	9:42	0:0	4	NULL
arg	9:48	9:52	3	NULL
water	9:48	0:0	4	NULL
water	9:53	0:0	2	;
if	10:4	14:4	2	(err < 0)
cond	10:8	10:14	3	err < 0
water	10:8	0:0	4	err
op	10:12	0:0	4	<
water	10:14	0:0	4	0
stmts	10:17	14:4	3	
water	10:17	0:0	4	{
call	11:8	11:47	4	av_strerror
arg	11:20	11:23	5	err
water	11:20	0:0	6	err
arg	11:25	11:31	5	errbuf
water	11:25	0:0	6	errbuf
arg	11:33	11:47	5	sizeof(errbuf)
op	11:33	0:0	6	sizeof
water	11:39	0:0	6	(
water	11:40	0:0	6	errbuf
water	11:46	0:0	6	)
water	11:48	0:0	4	;
call	12:8	12:63	4	fprintf
arg	12:16	12:22	5	stderr
water	12:16	0:0	6	stderr
arg	12:24	12:49	5	"Unable to open %s: %s\n"
water	12:24	0:0	6	"Unable to open %s: %s\n"
arg	12:51	12:55	5	file
water	12:51	0:0	6	file
arg	12:57	12:63	5	errbuf
water	12:57	0:0	6	errbuf
water	12:64	0:0	4	;
return	13:8	13:16	4	1
water	13:15	0:0	5	1
water	14:4	0:0	4	}
water	15:4	0:0	2	err
op	15:8	0:0	2	=
call	15:10	15:45	2	avformat_find_stream_info
arg	15:36	15:39	3	ctx
water	15:36	0:0	4	ctx
arg	15:41	15:45	3	NULL
water	15:41	0:0	4	NULL
water	15:46	0:0	2	;
if	16:4	20:4	2	(err < 0)
cond	16:8	16:14	3	err < 0
water	16:8	0:0	4	err
op	16:12	0:0	4	<
water	16:14	0:0	4	0
stmts	16:17	20:4	3	
water	16:17	0:0	4	{
call	17:8	17:47	4	av_strerror
arg	17:20	17:23	5	err
water	17:20	0:0	6	err
arg	17:25	17:31	5	errbuf
water	17:25	0:0	6	errbuf
arg	17:33	17:47	5	sizeof(errbuf)
op	17:33	0:0	6	sizeof
water	17:39	0:0	6	(
water	17:40	0:0	6	errbuf
water	17:46	0:0	6	)
water	17:48	0:0	4	;
call	18:8	18:67	4	fprintf
arg	18:16	18:22	5	stderr
water	18:16	0:0	6	stderr
arg	18:24	18:53	5	"Unable to identify %s: %s\n"
water	18:24	0:0	6	"Unable to identify %s: %s\n"
arg	18:55	18:59	5	file
water	18:55	0:0	6	file
arg	18:61	18:67	5	errbuf
water	18:61	0:0	6	errbuf
water	18:68	0:0	4	;
goto	19:8	19:17	4	fail
water	19:13	0:0	5	fail
water	20:4	0:0	4	}
if	21:4	24:4	2	(ctx -> nb_streams < 1)
cond	21:8	21:26	3	ctx -> nb_streams < 1
water	21:8	0:0	4	ctx
op	21:11	0:0	4	->
water	21:13	0:0	4	nb_streams
op	21:24	0:0	4	<
water	21:26	0:0	4	1
stmts	21:29	24:4	3	
water	21:29	0:0	4	{
call	22:8	22:56	4	fprintf
arg	22:16	22:22	5	stderr
water	22:16	0:0	6	stderr
arg	22:24	22:50	5	"No streams found in %s\n"
water	22:24	0:0	6	"No streams found in %s\n"
arg	22:52	22:56	5	file
water	22:52	0:0	6	file
water	22:57	0:0	4	;
goto	23:8	23:17	4	fail
water	23:13	0:0	5	fail
water	24:4	0:0	4	}
for	25:4	97:4	2	(i = 0 ;i < ctx -> nb_streams;i ++)
forinit	25:9	25:14	3	i = 0 ;
water	25:9	0:0	4	i
op	25:11	0:0	4	=
water	25:13	0:0	4	0
water	25:14	0:0	4	;
cond	25:16	25:25	3	i < ctx -> nb_streams
water	25:16	0:0	4	i
op	25:18	0:0	4	<
water	25:20	0:0	4	ctx
op	25:23	0:0	4	->
water	25:25	0:0	4	nb_streams
forexpr	25:37	25:38	3	i ++
water	25:37	0:0	4	i
op	25:38	0:0	4	++
stmts	25:42	97:4	3	
water	25:42	0:0	4	{
decl	26:8	26:27	4	struct Track	**temp
decl	27:8	27:38	4	AVStream	*st
op	27:21	0:0	4	=
water	27:23	0:0	4	ctx
op	27:26	0:0	4	->
water	27:28	0:0	4	streams
op	27:35	0:0	4	[
water	27:36	0:0	4	i
op	27:37	0:0	4	]
if	28:8	32:8	4	(st -> codec -> bit_rate == 0)
cond	28:12	28:35	5	st -> codec -> bit_rate == 0
water	28:12	0:0	6	st
op	28:14	0:0	6	->
water	28:16	0:0	6	codec
op	28:21	0:0	6	->
water	28:23	0:0	6	bit_rate
op	28:32	0:0	6	==
water	28:35	0:0	6	0
stmts	28:38	32:8	5	
water	28:38	0:0	6	{
call	29:12	30:32	6	fprintf
arg	29:20	29:26	7	stderr
water	29:20	0:0	8	stderr
arg	29:28	29:78	7	"Skipping track %d in %s as it has zero bitrate\n"
water	29:28	0:0	8	"Skipping track %d in %s as it has zero bitrate\n"
arg	30:20	30:26	7	st->id
water	30:20	0:0	8	st
op	30:22	0:0	8	->
water	30:24	0:0	8	id
arg	30:28	30:32	7	file
water	30:28	0:0	8	file
water	30:33	0:0	6	;
continue	31:12	31:20	6	
water	32:8	0:0	6	}
water	33:8	0:0	4	track
op	33:14	0:0	4	=
call	33:16	33:41	4	av_mallocz
arg	33:27	33:41	5	sizeof(*track)
op	33:27	0:0	6	sizeof
water	33:33	0:0	6	(
op	33:34	0:0	6	*
water	33:35	0:0	6	track
water	33:40	0:0	6	)
water	33:42	0:0	4	;
if	34:8	37:8	4	(! track)
cond	34:12	34:13	5	! track
op	34:12	0:0	6	!
water	34:13	0:0	6	track
stmts	34:20	37:8	5	
water	34:20	0:0	6	{
water	35:12	0:0	6	err
op	35:16	0:0	6	=
call	35:18	35:32	6	AVERROR
arg	35:26	35:32	7	ENOMEM
water	35:26	0:0	8	ENOMEM
water	35:33	0:0	6	;
goto	36:12	36:21	6	fail
water	36:17	0:0	7	fail
water	37:8	0:0	6	}
water	38:8	0:0	4	temp
op	38:13	0:0	4	=
call	38:15	40:55	4	av_realloc_array
arg	38:32	38:46	5	tracks->tracks
water	38:32	0:0	6	tracks
op	38:38	0:0	6	->
water	38:40	0:0	6	tracks
arg	39:32	39:53	5	tracks->nb_tracks+1
water	39:32	0:0	6	tracks
op	39:38	0:0	6	->
water	39:40	0:0	6	nb_tracks
op	39:50	0:0	6	+
water	39:52	0:0	6	1
arg	40:32	40:55	5	sizeof(*tracks->tracks)
op	40:32	0:0	6	sizeof
water	40:38	0:0	6	(
op	40:39	0:0	6	*
water	40:40	0:0	6	tracks
op	40:46	0:0	6	->
water	40:48	0:0	6	tracks
water	40:54	0:0	6	)
water	40:56	0:0	4	;
if	41:8	45:8	4	(! temp)
cond	41:12	41:13	5	! temp
op	41:12	0:0	6	!
water	41:13	0:0	6	temp
stmts	41:19	45:8	5	
water	41:19	0:0	6	{
call	42:12	42:25	6	av_free
arg	42:20	42:25	7	track
water	42:20	0:0	8	track
water	42:26	0:0	6	;
water	43:12	0:0	6	err
op	43:16	0:0	6	=
call	43:18	43:32	6	AVERROR
arg	43:26	43:32	7	ENOMEM
water	43:26	0:0	8	ENOMEM
water	43:33	0:0	6	;
goto	44:12	44:21	6	fail
water	44:17	0:0	7	fail
water	45:8	0:0	6	}
water	46:8	0:0	4	tracks
op	46:14	0:0	4	->
water	46:16	0:0	4	tracks
op	46:23	0:0	4	=
water	46:25	0:0	4	temp
water	46:29	0:0	4	;
water	47:8	0:0	4	tracks
op	47:14	0:0	4	->
water	47:16	0:0	4	tracks
op	47:22	0:0	4	[
water	47:23	0:0	4	tracks
op	47:29	0:0	4	->
water	47:31	0:0	4	nb_tracks
op	47:40	0:0	4	]
op	47:42	0:0	4	=
water	47:44	0:0	4	track
water	47:49	0:0	4	;
water	48:8	0:0	4	track
op	48:13	0:0	4	->
water	48:15	0:0	4	name
op	48:20	0:0	4	=
water	48:22	0:0	4	file
water	48:26	0:0	4	;
if	49:8	50:33	4	(( ptr =strrchr (file ,'/' ) ))
cond	49:12	49:37	5	( ptr =strrchr (file ,'/' ) )
water	49:12	0:0	6	(
water	49:13	0:0	6	ptr
op	49:17	0:0	6	=
call	49:19	49:36	6	strrchr
arg	49:27	49:31	7	file
water	49:27	0:0	8	file
arg	49:33	49:36	7	'/'
water	49:33	0:0	8	'/'
water	49:37	0:0	6	)
stmts	50:12	50:33	5	
water	50:12	0:0	6	track
op	50:17	0:0	6	->
water	50:19	0:0	6	name
op	50:24	0:0	6	=
water	50:26	0:0	6	ptr
op	50:30	0:0	6	+
water	50:32	0:0	6	1
water	50:33	0:0	6	;
water	51:8	0:0	4	track
op	51:13	0:0	4	->
water	51:15	0:0	4	bitrate
op	51:25	0:0	4	=
water	51:27	0:0	4	st
op	51:29	0:0	4	->
water	51:31	0:0	4	codec
op	51:36	0:0	4	->
water	51:38	0:0	4	bit_rate
water	51:46	0:0	4	;
water	52:8	0:0	4	track
op	52:13	0:0	4	->
water	52:15	0:0	4	track_id
op	52:25	0:0	4	=
water	52:27	0:0	4	st
op	52:29	0:0	4	->
water	52:31	0:0	4	id
water	52:33	0:0	4	;
water	53:8	0:0	4	track
op	53:13	0:0	4	->
water	53:15	0:0	4	timescale
op	53:25	0:0	4	=
water	53:27	0:0	4	st
op	53:29	0:0	4	->
water	53:31	0:0	4	time_base
op	53:40	0:0	4	.
water	53:41	0:0	4	den
water	53:44	0:0	4	;
water	54:8	0:0	4	track
op	54:13	0:0	4	->
water	54:15	0:0	4	duration
op	54:25	0:0	4	=
water	54:27	0:0	4	st
op	54:29	0:0	4	->
water	54:31	0:0	4	duration
water	54:39	0:0	4	;
water	55:8	0:0	4	track
op	55:13	0:0	4	->
water	55:15	0:0	4	is_audio
op	55:25	0:0	4	=
water	55:27	0:0	4	st
op	55:29	0:0	4	->
water	55:31	0:0	4	codec
op	55:36	0:0	4	->
water	55:38	0:0	4	codec_type
op	55:49	0:0	4	==
water	55:52	0:0	4	AVMEDIA_TYPE_AUDIO
water	55:70	0:0	4	;
water	56:8	0:0	4	track
op	56:13	0:0	4	->
water	56:15	0:0	4	is_video
op	56:25	0:0	4	=
water	56:27	0:0	4	st
op	56:29	0:0	4	->
water	56:31	0:0	4	codec
op	56:36	0:0	4	->
water	56:38	0:0	4	codec_type
op	56:49	0:0	4	==
water	56:52	0:0	4	AVMEDIA_TYPE_VIDEO
water	56:70	0:0	4	;
if	57:8	63:8	4	(! track -> is_audio && ! track -> is_video)
cond	57:12	57:40	5	! track -> is_audio && ! track -> is_video
op	57:12	0:0	6	!
water	57:13	0:0	6	track
op	57:18	0:0	6	->
water	57:20	0:0	6	is_audio
op	57:29	0:0	6	&&
op	57:32	0:0	6	!
water	57:33	0:0	6	track
op	57:38	0:0	6	->
water	57:40	0:0	6	is_video
stmts	57:50	63:8	5	
water	57:50	0:0	6	{
call	58:12	60:41	6	fprintf
arg	58:20	58:26	7	stderr
water	58:20	0:0	8	stderr
arg	59:20	59:75	7	"Track %d in %s is neither video nor audio, skipping\n"
water	59:20	0:0	8	"Track %d in %s is neither video nor audio, skipping\n"
arg	60:20	60:35	7	track->track_id
water	60:20	0:0	8	track
op	60:25	0:0	8	->
water	60:27	0:0	8	track_id
arg	60:37	60:41	7	file
water	60:37	0:0	8	file
water	60:42	0:0	6	;
call	61:12	61:55	6	av_freep
arg	61:21	61:55	7	&tracks->tracks[tracks->nb_tracks]
op	61:21	0:0	8	&
water	61:22	0:0	8	tracks
op	61:28	0:0	8	->
water	61:30	0:0	8	tracks
op	61:36	0:0	8	[
water	61:37	0:0	8	tracks
op	61:43	0:0	8	->
water	61:45	0:0	8	nb_tracks
op	61:54	0:0	8	]
water	61:56	0:0	6	;
continue	62:12	62:20	6	
water	63:8	0:0	6	}
water	64:8	0:0	4	tracks
op	64:14	0:0	4	->
water	64:16	0:0	4	duration
op	64:25	0:0	4	=
call	64:27	66:78	4	FFMAX
arg	64:33	64:49	5	tracks->duration
water	64:33	0:0	6	tracks
op	64:39	0:0	6	->
water	64:41	0:0	6	duration
arg	65:33	66:78	5	av_rescale_rnd(track->duration,AV_TIME_BASE,track->timescale,AV_ROUND_UP)
call	65:33	66:77	6	av_rescale_rnd
arg	65:48	65:63	7	track->duration
water	65:48	0:0	8	track
op	65:53	0:0	8	->
water	65:55	0:0	8	duration
arg	65:65	65:77	7	AV_TIME_BASE
water	65:65	0:0	8	AV_TIME_BASE
arg	66:48	66:64	7	track->timescale
water	66:48	0:0	8	track
op	66:53	0:0	8	->
water	66:55	0:0	8	timescale
arg	66:66	66:77	7	AV_ROUND_UP
water	66:66	0:0	8	AV_ROUND_UP
water	66:79	0:0	4	;
if	67:8	83:8	4	(track -> is_audio)
cond	67:12	67:19	5	track -> is_audio
water	67:12	0:0	6	track
op	67:17	0:0	6	->
water	67:19	0:0	6	is_audio
stmts	67:29	83:8	5	
water	67:29	0:0	6	{
if	68:12	69:55	6	(tracks -> audio_track < 0)
cond	68:16	68:38	7	tracks -> audio_track < 0
water	68:16	0:0	8	tracks
op	68:22	0:0	8	->
water	68:24	0:0	8	audio_track
op	68:36	0:0	8	<
water	68:38	0:0	8	0
stmts	69:16	69:55	7	
water	69:16	0:0	8	tracks
op	69:22	0:0	8	->
water	69:24	0:0	8	audio_track
op	69:36	0:0	8	=
water	69:38	0:0	8	tracks
op	69:44	0:0	8	->
water	69:46	0:0	8	nb_tracks
water	69:55	0:0	8	;
water	70:12	0:0	6	tracks
op	70:18	0:0	6	->
water	70:20	0:0	6	nb_audio_tracks
op	70:35	0:0	6	++
water	70:37	0:0	6	;
water	71:12	0:0	6	track
op	71:17	0:0	6	->
water	71:19	0:0	6	channels
op	71:31	0:0	6	=
water	71:33	0:0	6	st
op	71:35	0:0	6	->
water	71:37	0:0	6	codec
op	71:42	0:0	6	->
water	71:44	0:0	6	channels
water	71:52	0:0	6	;
water	72:12	0:0	6	track
op	72:17	0:0	6	->
water	72:19	0:0	6	sample_rate
op	72:31	0:0	6	=
water	72:33	0:0	6	st
op	72:35	0:0	6	->
water	72:37	0:0	6	codec
op	72:42	0:0	6	->
water	72:44	0:0	6	sample_rate
water	72:55	0:0	6	;
if	73:12	77:12	6	(st -> codec -> codec_id == AV_CODEC_ID_AAC)
cond	73:16	73:39	7	st -> codec -> codec_id == AV_CODEC_ID_AAC
water	73:16	0:0	8	st
op	73:18	0:0	8	->
water	73:20	0:0	8	codec
op	73:25	0:0	8	->
water	73:27	0:0	8	codec_id
op	73:36	0:0	8	==
water	73:39	0:0	8	AV_CODEC_ID_AAC
stmts	73:56	77:12	7	
water	73:56	0:0	8	{
water	74:16	0:0	8	track
op	74:21	0:0	8	->
water	74:23	0:0	8	fourcc
op	74:33	0:0	8	=
water	74:35	0:0	8	"AACL"
water	74:41	0:0	8	;
water	75:16	0:0	8	track
op	75:21	0:0	8	->
water	75:23	0:0	8	tag
op	75:33	0:0	8	=
water	75:35	0:0	8	255
water	75:38	0:0	8	;
water	76:16	0:0	8	track
op	76:21	0:0	8	->
water	76:23	0:0	8	blocksize
op	76:33	0:0	8	=
water	76:35	0:0	8	4
water	76:36	0:0	8	;
water	77:12	0:0	8	}
else	77:14	81:12	6
stmts	77:19	81:12	7	
if	77:19	81:12	8	(st -> codec -> codec_id == AV_CODEC_ID_WMAPRO)
cond	77:23	77:46	9	st -> codec -> codec_id == AV_CODEC_ID_WMAPRO
water	77:23	0:0	10	st
op	77:25	0:0	10	->
water	77:27	0:0	10	codec
op	77:32	0:0	10	->
water	77:34	0:0	10	codec_id
op	77:43	0:0	10	==
water	77:46	0:0	10	AV_CODEC_ID_WMAPRO
stmts	77:66	81:12	9	
water	77:66	0:0	10	{
water	78:16	0:0	10	track
op	78:21	0:0	10	->
water	78:23	0:0	10	fourcc
op	78:33	0:0	10	=
water	78:35	0:0	10	"WMAP"
water	78:41	0:0	10	;
water	79:16	0:0	10	track
op	79:21	0:0	10	->
water	79:23	0:0	10	tag
op	79:33	0:0	10	=
water	79:35	0:0	10	st
op	79:37	0:0	10	->
water	79:39	0:0	10	codec
op	79:44	0:0	10	->
water	79:46	0:0	10	codec_tag
water	79:55	0:0	10	;
water	80:16	0:0	10	track
op	80:21	0:0	10	->
water	80:23	0:0	10	blocksize
op	80:33	0:0	10	=
water	80:35	0:0	10	st
op	80:37	0:0	10	->
water	80:39	0:0	10	codec
op	80:44	0:0	10	->
water	80:46	0:0	10	block_align
water	80:57	0:0	10	;
water	81:12	0:0	10	}
call	82:12	82:45	6	get_private_data
arg	82:29	82:34	7	track
water	82:29	0:0	8	track
arg	82:36	82:45	7	st->codec
water	82:36	0:0	8	st
op	82:38	0:0	8	->
water	82:40	0:0	8	codec
water	82:46	0:0	6	;
water	83:8	0:0	6	}
if	84:8	95:8	4	(track -> is_video)
cond	84:12	84:19	5	track -> is_video
water	84:12	0:0	6	track
op	84:17	0:0	6	->
water	84:19	0:0	6	is_video
stmts	84:29	95:8	5	
water	84:29	0:0	6	{
if	85:12	86:55	6	(tracks -> video_track < 0)
cond	85:16	85:38	7	tracks -> video_track < 0
water	85:16	0:0	8	tracks
op	85:22	0:0	8	->
water	85:24	0:0	8	video_track
op	85:36	0:0	8	<
water	85:38	0:0	8	0
stmts	86:16	86:55	7	
water	86:16	0:0	8	tracks
op	86:22	0:0	8	->
water	86:24	0:0	8	video_track
op	86:36	0:0	8	=
water	86:38	0:0	8	tracks
op	86:44	0:0	8	->
water	86:46	0:0	8	nb_tracks
water	86:55	0:0	8	;
water	87:12	0:0	6	tracks
op	87:18	0:0	6	->
water	87:20	0:0	6	nb_video_tracks
op	87:35	0:0	6	++
water	87:37	0:0	6	;
water	88:12	0:0	6	track
op	88:17	0:0	6	->
water	88:19	0:0	6	width
op	88:26	0:0	6	=
water	88:28	0:0	6	st
op	88:30	0:0	6	->
water	88:32	0:0	6	codec
op	88:37	0:0	6	->
water	88:39	0:0	6	width
water	88:44	0:0	6	;
water	89:12	0:0	6	track
op	89:17	0:0	6	->
water	89:19	0:0	6	height
op	89:26	0:0	6	=
water	89:28	0:0	6	st
op	89:30	0:0	6	->
water	89:32	0:0	6	codec
op	89:37	0:0	6	->
water	89:39	0:0	6	height
water	89:45	0:0	6	;
if	90:12	91:38	6	(st -> codec -> codec_id == AV_CODEC_ID_H264)
cond	90:16	90:39	7	st -> codec -> codec_id == AV_CODEC_ID_H264
water	90:16	0:0	8	st
op	90:18	0:0	8	->
water	90:20	0:0	8	codec
op	90:25	0:0	8	->
water	90:27	0:0	8	codec_id
op	90:36	0:0	8	==
water	90:39	0:0	8	AV_CODEC_ID_H264
stmts	91:16	91:38	7	
water	91:16	0:0	8	track
op	91:21	0:0	8	->
water	91:23	0:0	8	fourcc
op	91:30	0:0	8	=
water	91:32	0:0	8	"H264"
water	91:38	0:0	8	;
else	92:12	93:38	6
stmts	92:17	93:38	7	
if	92:17	93:38	8	(st -> codec -> codec_id == AV_CODEC_ID_VC1)
cond	92:21	92:44	9	st -> codec -> codec_id == AV_CODEC_ID_VC1
water	92:21	0:0	10	st
op	92:23	0:0	10	->
water	92:25	0:0	10	codec
op	92:30	0:0	10	->
water	92:32	0:0	10	codec_id
op	92:41	0:0	10	==
water	92:44	0:0	10	AV_CODEC_ID_VC1
stmts	93:16	93:38	9	
water	93:16	0:0	10	track
op	93:21	0:0	10	->
water	93:23	0:0	10	fourcc
op	93:30	0:0	10	=
water	93:32	0:0	10	"WVC1"
water	93:38	0:0	10	;
call	94:12	94:51	6	get_video_private_data
arg	94:35	94:40	7	track
water	94:35	0:0	8	track
arg	94:42	94:51	7	st->codec
water	94:42	0:0	8	st
op	94:44	0:0	8	->
water	94:46	0:0	8	codec
water	94:52	0:0	6	;
water	95:8	0:0	6	}
water	96:8	0:0	4	tracks
op	96:14	0:0	4	->
water	96:16	0:0	4	nb_tracks
op	96:25	0:0	4	++
water	96:27	0:0	4	;
water	97:4	0:0	4	}
call	98:4	98:29	2	avformat_close_input
arg	98:25	98:29	3	&ctx
op	98:25	0:0	4	&
water	98:26	0:0	4	ctx
water	98:30	0:0	2	;
water	99:4	0:0	2	err
op	99:8	0:0	2	=
call	99:10	100:33	2	read_mfra
arg	99:20	99:26	3	tracks
water	99:20	0:0	4	tracks
arg	99:28	99:39	3	orig_tracks
water	99:28	0:0	4	orig_tracks
arg	99:41	99:45	3	file
water	99:41	0:0	4	file
arg	99:47	99:52	3	split
water	99:47	0:0	4	split
arg	99:54	99:58	3	ismf
water	99:54	0:0	4	ismf
arg	99:60	99:68	3	basename
water	99:60	0:0	4	basename
arg	100:20	100:33	3	output_prefix
water	100:20	0:0	4	output_prefix
water	100:34	0:0	2	;
label	101:0	101:4	2	fail :
if	102:4	103:34	2	(ctx)
cond	102:8	102:8	3	ctx
water	102:8	0:0	4	ctx
stmts	103:8	103:34	3	
call	103:8	103:33	4	avformat_close_input
arg	103:29	103:33	5	&ctx
op	103:29	0:0	6	&
water	103:30	0:0	6	ctx
water	103:34	0:0	4	;
return	104:4	104:14	2	err
water	104:11	0:0	3	err
