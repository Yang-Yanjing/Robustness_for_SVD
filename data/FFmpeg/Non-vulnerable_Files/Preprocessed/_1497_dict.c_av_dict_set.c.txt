func	1:0	69:0	0	int	av_dict_set
params	1:15	0:0	1	
param	1:16	1:33	2	AVDictionary * *	pm
param	1:35	1:50	2	const char *	key
param	1:52	1:69	2	const char *	value
param	2:16	2:25	2	int	flags
stmnts	0:0	68:26	1	
decl	4:4	4:25	2	AVDictionary	*m
op	4:20	0:0	2	=
op	4:22	0:0	2	*
water	4:23	0:0	2	pm
decl	5:4	5:61	2	AVDictionaryEntry	*tag
op	5:27	0:0	2	=
call	5:29	5:60	3	av_dict_get
arg	5:41	5:42	4	m
water	5:41	0:0	5	m
arg	5:44	5:47	4	key
water	5:44	0:0	5	key
arg	5:49	5:53	4	NULL
water	5:49	0:0	5	NULL
arg	5:55	5:60	4	flags
water	5:55	0:0	5	flags
decl	6:4	6:61	2	char	*oldval
op	6:17	0:0	2	=
water	6:19	0:0	2	NULL
water	6:23	0:0	2	,
decl	6:4	6:61	2	char	*copy_key
op	6:35	0:0	2	=
water	6:37	0:0	2	NULL
water	6:41	0:0	2	,
decl	6:4	6:61	2	char	*copy_value
op	6:55	0:0	2	=
water	6:57	0:0	2	NULL
if	7:4	8:30	2	(flags & AV_DICT_DONT_STRDUP_KEY)
cond	7:8	7:16	3	flags & AV_DICT_DONT_STRDUP_KEY
water	7:8	0:0	4	flags
op	7:14	0:0	4	&
water	7:16	0:0	4	AV_DICT_DONT_STRDUP_KEY
stmts	8:8	8:30	3	
water	8:8	0:0	4	copy_key
op	8:17	0:0	4	=
water	8:19	0:0	4	(
water	8:20	0:0	4	void
op	8:25	0:0	4	*
water	8:26	0:0	4	)
water	8:27	0:0	4	key
water	8:30	0:0	4	;
else	9:4	10:33	2
stmts	10:8	10:33	3	
water	10:8	0:0	4	copy_key
op	10:17	0:0	4	=
call	10:19	10:32	4	av_strdup
arg	10:29	10:32	5	key
water	10:29	0:0	6	key
water	10:33	0:0	4	;
if	11:4	12:34	2	(flags & AV_DICT_DONT_STRDUP_VAL)
cond	11:8	11:16	3	flags & AV_DICT_DONT_STRDUP_VAL
water	11:8	0:0	4	flags
op	11:14	0:0	4	&
water	11:16	0:0	4	AV_DICT_DONT_STRDUP_VAL
stmts	12:8	12:34	3	
water	12:8	0:0	4	copy_value
op	12:19	0:0	4	=
water	12:21	0:0	4	(
water	12:22	0:0	4	void
op	12:27	0:0	4	*
water	12:28	0:0	4	)
water	12:29	0:0	4	value
water	12:34	0:0	4	;
else	13:4	14:37	2
stmts	13:9	14:37	3	
if	13:9	14:37	4	(copy_key)
cond	13:13	13:13	5	copy_key
water	13:13	0:0	6	copy_key
stmts	14:8	14:37	5	
water	14:8	0:0	6	copy_value
op	14:19	0:0	6	=
call	14:21	14:36	6	av_strdup
arg	14:31	14:36	7	value
water	14:31	0:0	8	value
water	14:37	0:0	6	;
if	15:4	16:40	2	(! m)
cond	15:8	15:9	3	! m
op	15:8	0:0	4	!
water	15:9	0:0	4	m
stmts	16:8	16:40	3	
water	16:8	0:0	4	m
op	16:10	0:0	4	=
op	16:12	0:0	4	*
water	16:13	0:0	4	pm
op	16:16	0:0	4	=
call	16:18	16:39	4	av_mallocz
arg	16:29	16:39	5	sizeof(*m)
op	16:29	0:0	6	sizeof
water	16:35	0:0	6	(
op	16:36	0:0	6	*
water	16:37	0:0	6	m
water	16:38	0:0	6	)
water	16:40	0:0	4	;
if	17:4	18:20	2	(! m || ( key && ! copy_key ) || ( value && ! copy_value ))
cond	17:8	17:57	3	! m || ( key && ! copy_key ) || ( value && ! copy_value )
op	17:8	0:0	4	!
water	17:9	0:0	4	m
op	17:11	0:0	4	||
water	17:14	0:0	4	(
water	17:15	0:0	4	key
op	17:19	0:0	4	&&
op	17:22	0:0	4	!
water	17:23	0:0	4	copy_key
water	17:31	0:0	4	)
op	17:33	0:0	4	||
water	17:36	0:0	4	(
water	17:37	0:0	4	value
op	17:43	0:0	4	&&
op	17:46	0:0	4	!
water	17:47	0:0	4	copy_value
water	17:57	0:0	4	)
stmts	18:8	18:20	3	
goto	18:8	18:20	4	err_out
water	18:13	0:0	5	err_out
if	19:4	31:4	2	(tag)
cond	19:8	19:8	3	tag
water	19:8	0:0	4	tag
stmts	19:13	31:4	3	
water	19:13	0:0	4	{
if	20:8	24:8	4	(flags & AV_DICT_DONT_OVERWRITE)
cond	20:12	20:20	5	flags & AV_DICT_DONT_OVERWRITE
water	20:12	0:0	6	flags
op	20:18	0:0	6	&
water	20:20	0:0	6	AV_DICT_DONT_OVERWRITE
stmts	20:44	24:8	5	
water	20:44	0:0	6	{
call	21:12	21:28	6	av_free
arg	21:20	21:28	7	copy_key
water	21:20	0:0	8	copy_key
water	21:29	0:0	6	;
call	22:12	22:30	6	av_free
arg	22:20	22:30	7	copy_value
water	22:20	0:0	8	copy_value
water	22:31	0:0	6	;
return	23:12	23:20	6	0
water	23:19	0:0	7	0
water	24:8	0:0	6	}
if	25:8	26:31	4	(flags & AV_DICT_APPEND)
cond	25:12	25:20	5	flags & AV_DICT_APPEND
water	25:12	0:0	6	flags
op	25:18	0:0	6	&
water	25:20	0:0	6	AV_DICT_APPEND
stmts	26:12	26:31	5	
water	26:12	0:0	6	oldval
op	26:19	0:0	6	=
water	26:21	0:0	6	tag
op	26:24	0:0	6	->
water	26:26	0:0	6	value
water	26:31	0:0	6	;
else	27:8	28:31	4
stmts	28:12	28:31	5	
call	28:12	28:30	6	av_free
arg	28:20	28:30	7	tag->value
water	28:20	0:0	8	tag
op	28:23	0:0	8	->
water	28:25	0:0	8	value
water	28:31	0:0	6	;
call	29:8	29:24	4	av_free
arg	29:16	29:24	5	tag->key
water	29:16	0:0	6	tag
op	29:19	0:0	6	->
water	29:21	0:0	6	key
water	29:25	0:0	4	;
op	30:8	0:0	4	*
water	30:9	0:0	4	tag
op	30:13	0:0	4	=
water	30:15	0:0	4	m
op	30:16	0:0	4	->
water	30:18	0:0	4	elems
op	30:23	0:0	4	[
op	30:24	0:0	4	--
water	30:26	0:0	4	m
op	30:27	0:0	4	->
water	30:29	0:0	4	count
op	30:34	0:0	4	]
water	30:35	0:0	4	;
water	31:4	0:0	4	}
else	31:6	37:4	2
stmts	31:11	37:4	3	
water	31:11	0:0	4	{
decl	32:8	33:79	4	AVDictionaryEntry	*tmp
op	32:31	0:0	4	=
call	32:33	33:78	5	av_realloc
arg	32:44	32:52	6	m->elems
water	32:44	0:0	7	m
op	32:45	0:0	7	->
water	32:47	0:0	7	elems
arg	33:44	33:78	6	(m->count+1)*sizeof(*m->elems)
water	33:44	0:0	7	(
water	33:45	0:0	7	m
op	33:46	0:0	7	->
water	33:48	0:0	7	count
op	33:54	0:0	7	+
water	33:56	0:0	7	1
water	33:57	0:0	7	)
op	33:59	0:0	7	*
op	33:61	0:0	7	sizeof
water	33:67	0:0	7	(
op	33:68	0:0	7	*
water	33:69	0:0	7	m
op	33:70	0:0	7	->
water	33:72	0:0	7	elems
water	33:77	0:0	7	)
if	34:8	35:24	4	(! tmp)
cond	34:12	34:13	5	! tmp
op	34:12	0:0	6	!
water	34:13	0:0	6	tmp
stmts	35:12	35:24	5	
goto	35:12	35:24	6	err_out
water	35:17	0:0	7	err_out
water	36:8	0:0	4	m
op	36:9	0:0	4	->
water	36:11	0:0	4	elems
op	36:17	0:0	4	=
water	36:19	0:0	4	tmp
water	36:22	0:0	4	;
water	37:4	0:0	4	}
if	38:4	53:4	2	(copy_value)
cond	38:8	38:8	3	copy_value
water	38:8	0:0	4	copy_value
stmts	38:20	53:4	3	
water	38:20	0:0	4	{
water	39:8	0:0	4	m
op	39:9	0:0	4	->
water	39:11	0:0	4	elems
op	39:16	0:0	4	[
water	39:17	0:0	4	m
op	39:18	0:0	4	->
water	39:20	0:0	4	count
op	39:25	0:0	4	]
op	39:26	0:0	4	.
water	39:27	0:0	4	key
op	39:31	0:0	4	=
water	39:33	0:0	4	copy_key
water	39:41	0:0	4	;
water	40:8	0:0	4	m
op	40:9	0:0	4	->
water	40:11	0:0	4	elems
op	40:16	0:0	4	[
water	40:17	0:0	4	m
op	40:18	0:0	4	->
water	40:20	0:0	4	count
op	40:25	0:0	4	]
op	40:26	0:0	4	.
water	40:27	0:0	4	value
op	40:33	0:0	4	=
water	40:35	0:0	4	copy_value
water	40:45	0:0	4	;
if	41:8	51:8	4	(oldval && flags & AV_DICT_APPEND)
cond	41:12	41:30	5	oldval && flags & AV_DICT_APPEND
water	41:12	0:0	6	oldval
op	41:19	0:0	6	&&
water	41:22	0:0	6	flags
op	41:28	0:0	6	&
water	41:30	0:0	6	AV_DICT_APPEND
stmts	41:46	51:8	5	
water	41:46	0:0	6	{
decl	42:12	42:64	6	size_t	len
op	42:23	0:0	6	=
call	42:25	42:38	7	strlen
arg	42:32	42:38	8	oldval
water	42:32	0:0	9	oldval
op	42:40	0:0	6	+
call	42:42	42:59	7	strlen
arg	42:49	42:59	8	copy_value
water	42:49	0:0	9	copy_value
op	42:61	0:0	6	+
water	42:63	0:0	6	1
decl	43:12	43:42	6	char	*newval
op	43:25	0:0	6	=
call	43:27	43:41	7	av_mallocz
arg	43:38	43:41	8	len
water	43:38	0:0	9	len
if	44:12	45:28	6	(! newval)
cond	44:16	44:17	7	! newval
op	44:16	0:0	8	!
water	44:17	0:0	8	newval
stmts	45:16	45:28	7	
goto	45:16	45:28	8	err_out
water	45:21	0:0	9	err_out
call	46:12	46:42	6	av_strlcat
arg	46:23	46:29	7	newval
water	46:23	0:0	8	newval
arg	46:31	46:37	7	oldval
water	46:31	0:0	8	oldval
arg	46:39	46:42	7	len
water	46:39	0:0	8	len
water	46:43	0:0	6	;
call	47:12	47:28	6	av_freep
arg	47:21	47:28	7	&oldval
op	47:21	0:0	8	&
water	47:22	0:0	8	oldval
water	47:29	0:0	6	;
call	48:12	48:46	6	av_strlcat
arg	48:23	48:29	7	newval
water	48:23	0:0	8	newval
arg	48:31	48:41	7	copy_value
water	48:31	0:0	8	copy_value
arg	48:43	48:46	7	len
water	48:43	0:0	8	len
water	48:47	0:0	6	;
water	49:12	0:0	6	m
op	49:13	0:0	6	->
water	49:15	0:0	6	elems
op	49:20	0:0	6	[
water	49:21	0:0	6	m
op	49:22	0:0	6	->
water	49:24	0:0	6	count
op	49:29	0:0	6	]
op	49:30	0:0	6	.
water	49:31	0:0	6	value
op	49:37	0:0	6	=
water	49:39	0:0	6	newval
water	49:45	0:0	6	;
call	50:12	50:32	6	av_freep
arg	50:21	50:32	7	&copy_value
op	50:21	0:0	8	&
water	50:22	0:0	8	copy_value
water	50:33	0:0	6	;
water	51:8	0:0	6	}
water	52:8	0:0	4	m
op	52:9	0:0	4	->
water	52:11	0:0	4	count
op	52:16	0:0	4	++
water	52:18	0:0	4	;
water	53:4	0:0	4	}
else	53:6	55:4	2
stmts	53:11	55:4	3	
water	53:11	0:0	4	{
call	54:8	54:26	4	av_freep
arg	54:17	54:26	5	&copy_key
op	54:17	0:0	6	&
water	54:18	0:0	6	copy_key
water	54:27	0:0	4	;
water	55:4	0:0	4	}
if	56:4	59:4	2	(! m -> count)
cond	56:8	56:12	3	! m -> count
op	56:8	0:0	4	!
water	56:9	0:0	4	m
op	56:10	0:0	4	->
water	56:12	0:0	4	count
stmts	56:19	59:4	3	
water	56:19	0:0	4	{
call	57:8	57:26	4	av_freep
arg	57:17	57:26	5	&m->elems
op	57:17	0:0	6	&
water	57:18	0:0	6	m
op	57:19	0:0	6	->
water	57:21	0:0	6	elems
water	57:27	0:0	4	;
call	58:8	58:19	4	av_freep
arg	58:17	58:19	5	pm
water	58:17	0:0	6	pm
water	58:20	0:0	4	;
water	59:4	0:0	4	}
return	60:4	60:12	2	0
water	60:11	0:0	3	0
label	61:0	61:7	2	err_out :
if	62:4	65:4	2	(m && ! m -> count)
cond	62:8	62:17	3	m && ! m -> count
water	62:8	0:0	4	m
op	62:10	0:0	4	&&
op	62:13	0:0	4	!
water	62:14	0:0	4	m
op	62:15	0:0	4	->
water	62:17	0:0	4	count
stmts	62:24	65:4	3	
water	62:24	0:0	4	{
call	63:8	63:26	4	av_freep
arg	63:17	63:26	5	&m->elems
op	63:17	0:0	6	&
water	63:18	0:0	6	m
op	63:19	0:0	6	->
water	63:21	0:0	6	elems
water	63:27	0:0	4	;
call	64:8	64:19	4	av_freep
arg	64:17	64:19	5	pm
water	64:17	0:0	6	pm
water	64:20	0:0	4	;
water	65:4	0:0	4	}
call	66:4	66:20	2	av_free
arg	66:12	66:20	3	copy_key
water	66:12	0:0	4	copy_key
water	66:21	0:0	2	;
call	67:4	67:22	2	av_free
arg	67:12	67:22	3	copy_value
water	67:12	0:0	4	copy_value
water	67:23	0:0	2	;
return	68:4	68:26	2	AVERROR(ENOMEM)
call	68:11	68:25	3	AVERROR
arg	68:19	68:25	4	ENOMEM
water	68:19	0:0	5	ENOMEM
