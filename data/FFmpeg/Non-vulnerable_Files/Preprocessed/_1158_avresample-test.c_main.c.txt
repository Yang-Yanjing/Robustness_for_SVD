func	1:0	136:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	135:14	1	
decl	3:4	3:29	2	AVAudioResampleContext	*s
decl	4:4	4:13	2	AVLFG	rnd
decl	5:4	5:15	2	int	ret
op	5:12	0:0	2	=
water	5:14	0:0	2	0
decl	6:4	6:26	2	uint8_t	*in_buf
op	6:20	0:0	2	=
water	6:22	0:0	2	NULL
decl	7:4	7:27	2	uint8_t	*out_buf
op	7:21	0:0	2	=
water	7:23	0:0	2	NULL
decl	8:4	8:28	2	unsigned int	in_buf_size
decl	9:4	9:29	2	unsigned int	out_buf_size
decl	10:4	10:54	2	uint8_t	*in_data[AVRESAMPLE_MAX_CHANNELS]
op	10:47	0:0	2	=
water	10:49	0:0	2	{
water	10:51	0:0	2	0
water	10:53	0:0	2	}
decl	11:4	11:54	2	uint8_t	*out_data[AVRESAMPLE_MAX_CHANNELS]
op	11:47	0:0	2	=
water	11:49	0:0	2	{
water	11:51	0:0	2	0
water	11:53	0:0	2	}
decl	12:4	12:19	2	int	in_linesize
decl	13:4	13:20	2	int	out_linesize
decl	14:4	14:25	2	uint64_t	in_ch_layout
decl	15:4	15:19	2	int	in_channels
decl	16:4	16:30	2	enum AVSampleFormat	in_fmt
decl	17:4	17:15	2	int	in_rate
decl	18:4	18:26	2	uint64_t	out_ch_layout
decl	19:4	19:20	2	int	out_channels
decl	20:4	20:31	2	enum AVSampleFormat	out_fmt
decl	21:4	21:16	2	int	out_rate
decl	22:4	22:43	2	int	num_formats
water	22:19	0:0	2	,
decl	22:4	22:43	2	int	num_rates
water	22:30	0:0	2	,
decl	22:4	22:43	2	int	num_layouts
decl	23:4	23:24	2	int	i
water	23:9	0:0	2	,
decl	23:4	23:24	2	int	j
water	23:12	0:0	2	,
decl	23:4	23:24	2	int	k
water	23:15	0:0	2	,
decl	23:4	23:24	2	int	l
water	23:18	0:0	2	,
decl	23:4	23:24	2	int	m
water	23:21	0:0	2	,
decl	23:4	23:24	2	int	n
water	24:4	0:0	2	num_formats
op	24:16	0:0	2	=
water	24:18	0:0	2	2
water	24:19	0:0	2	;
water	25:4	0:0	2	num_rates
op	25:16	0:0	2	=
water	25:18	0:0	2	2
water	25:19	0:0	2	;
water	26:4	0:0	2	num_layouts
op	26:16	0:0	2	=
water	26:18	0:0	2	2
water	26:19	0:0	2	;
if	27:4	36:4	2	(argc > 1)
cond	27:8	27:15	3	argc > 1
water	27:8	0:0	4	argc
op	27:13	0:0	4	>
water	27:15	0:0	4	1
stmts	27:18	36:4	3	
water	27:18	0:0	4	{
if	28:8	33:8	4	(!av_strncasecmp (argv [ 1 ] ,"-h" ,3 ))
cond	28:12	28:44	5	!av_strncasecmp (argv [ 1 ] ,"-h" ,3 )
op	28:12	0:0	6	!
call	28:13	28:44	6	av_strncasecmp
arg	28:28	28:35	7	argv[1]
water	28:28	0:0	8	argv
op	28:32	0:0	8	[
water	28:33	0:0	8	1
op	28:34	0:0	8	]
arg	28:37	28:41	7	"-h"
water	28:37	0:0	8	"-h"
arg	28:43	28:44	7	3
water	28:43	0:0	8	3
stmts	28:47	33:8	5	
water	28:47	0:0	6	{
call	29:12	31:39	6	av_log
arg	29:19	29:23	7	NULL
water	29:19	0:0	8	NULL
arg	29:25	29:36	7	AV_LOG_INFO
water	29:25	0:0	8	AV_LOG_INFO
arg	29:38	31:39	7	"Usage: avresample-test [<num formats> ""[<num sample rates> [<num channel layouts>]]]\n""Default is 2 2 2\n"
water	29:38	0:0	8	"Usage: avresample-test [<num formats> "
water	30:19	0:0	8	"[<num sample rates> [<num channel layouts>]]]\n"
water	31:19	0:0	8	"Default is 2 2 2\n"
water	31:40	0:0	6	;
return	32:12	32:20	6	0
water	32:19	0:0	7	0
water	33:8	0:0	6	}
water	34:8	0:0	4	num_formats
op	34:20	0:0	4	=
call	34:22	34:45	4	strtol
arg	34:29	34:36	5	argv[1]
water	34:29	0:0	6	argv
op	34:33	0:0	6	[
water	34:34	0:0	6	1
op	34:35	0:0	6	]
arg	34:38	34:42	5	NULL
water	34:38	0:0	6	NULL
arg	34:44	34:45	5	0
water	34:44	0:0	6	0
water	34:46	0:0	4	;
water	35:8	0:0	4	num_formats
op	35:20	0:0	4	=
call	35:22	35:69	4	av_clip
arg	35:30	35:41	5	num_formats
water	35:30	0:0	6	num_formats
arg	35:43	35:44	5	1
water	35:43	0:0	6	1
arg	35:46	35:69	5	FF_ARRAY_ELEMS(formats)
call	35:46	35:68	6	FF_ARRAY_ELEMS
arg	35:61	35:68	7	formats
water	35:61	0:0	8	formats
water	35:70	0:0	4	;
water	36:4	0:0	4	}
if	37:4	40:4	2	(argc > 2)
cond	37:8	37:15	3	argc > 2
water	37:8	0:0	4	argc
op	37:13	0:0	4	>
water	37:15	0:0	4	2
stmts	37:18	40:4	3	
water	37:18	0:0	4	{
water	38:8	0:0	4	num_rates
op	38:18	0:0	4	=
call	38:20	38:43	4	strtol
arg	38:27	38:34	5	argv[2]
water	38:27	0:0	6	argv
op	38:31	0:0	6	[
water	38:32	0:0	6	2
op	38:33	0:0	6	]
arg	38:36	38:40	5	NULL
water	38:36	0:0	6	NULL
arg	38:42	38:43	5	0
water	38:42	0:0	6	0
water	38:44	0:0	4	;
water	39:8	0:0	4	num_rates
op	39:18	0:0	4	=
call	39:20	39:63	4	av_clip
arg	39:28	39:37	5	num_rates
water	39:28	0:0	6	num_rates
arg	39:39	39:40	5	1
water	39:39	0:0	6	1
arg	39:42	39:63	5	FF_ARRAY_ELEMS(rates)
call	39:42	39:62	6	FF_ARRAY_ELEMS
arg	39:57	39:62	7	rates
water	39:57	0:0	8	rates
water	39:64	0:0	4	;
water	40:4	0:0	4	}
if	41:4	44:4	2	(argc > 3)
cond	41:8	41:15	3	argc > 3
water	41:8	0:0	4	argc
op	41:13	0:0	4	>
water	41:15	0:0	4	3
stmts	41:18	44:4	3	
water	41:18	0:0	4	{
water	42:8	0:0	4	num_layouts
op	42:20	0:0	4	=
call	42:22	42:45	4	strtol
arg	42:29	42:36	5	argv[3]
water	42:29	0:0	6	argv
op	42:33	0:0	6	[
water	42:34	0:0	6	3
op	42:35	0:0	6	]
arg	42:38	42:42	5	NULL
water	42:38	0:0	6	NULL
arg	42:44	42:45	5	0
water	42:44	0:0	6	0
water	42:46	0:0	4	;
water	43:8	0:0	4	num_layouts
op	43:20	0:0	4	=
call	43:22	43:69	4	av_clip
arg	43:30	43:41	5	num_layouts
water	43:30	0:0	6	num_layouts
arg	43:43	43:44	5	1
water	43:43	0:0	6	1
arg	43:46	43:69	5	FF_ARRAY_ELEMS(layouts)
call	43:46	43:68	6	FF_ARRAY_ELEMS
arg	43:61	43:68	7	layouts
water	43:61	0:0	8	layouts
water	43:70	0:0	4	;
water	44:4	0:0	4	}
call	45:4	45:33	2	av_log_set_level
arg	45:21	45:33	3	AV_LOG_DEBUG
water	45:21	0:0	4	AV_LOG_DEBUG
water	45:34	0:0	2	;
call	46:4	46:30	2	av_lfg_init
arg	46:16	46:20	3	&rnd
op	46:16	0:0	4	&
water	46:17	0:0	4	rnd
arg	46:22	46:30	3	0xC0FFEE
water	46:22	0:0	4	0
water	46:23	0:0	4	xC0FFEE
water	46:31	0:0	2	;
water	47:4	0:0	2	in_buf_size
op	47:16	0:0	2	=
call	47:18	48:66	2	av_samples_get_buffer_size
arg	47:45	47:57	3	&in_linesize
op	47:45	0:0	4	&
water	47:46	0:0	4	in_linesize
arg	47:59	47:60	3	8
water	47:59	0:0	4	8
arg	47:62	47:71	3	48000*6
water	47:62	0:0	4	48000
op	47:68	0:0	4	*
water	47:70	0:0	4	6
arg	48:45	48:63	3	AV_SAMPLE_FMT_DBLP
water	48:45	0:0	4	AV_SAMPLE_FMT_DBLP
arg	48:65	48:66	3	0
water	48:65	0:0	4	0
water	48:67	0:0	2	;
water	49:4	0:0	2	out_buf_size
op	49:17	0:0	2	=
water	49:19	0:0	2	in_buf_size
water	49:30	0:0	2	;
water	50:4	0:0	2	in_buf
op	50:11	0:0	2	=
call	50:13	50:34	2	av_malloc
arg	50:23	50:34	3	in_buf_size
water	50:23	0:0	4	in_buf_size
water	50:35	0:0	2	;
if	51:4	52:16	2	(! in_buf)
cond	51:8	51:9	3	! in_buf
op	51:8	0:0	4	!
water	51:9	0:0	4	in_buf
stmts	52:8	52:16	3	
goto	52:8	52:16	4	end
water	52:13	0:0	5	end
water	53:4	0:0	2	out_buf
op	53:12	0:0	2	=
call	53:14	53:36	2	av_malloc
arg	53:24	53:36	3	out_buf_size
water	53:24	0:0	4	out_buf_size
water	53:37	0:0	2	;
if	54:4	55:16	2	(! out_buf)
cond	54:8	54:9	3	! out_buf
op	54:8	0:0	4	!
water	54:9	0:0	4	out_buf
stmts	55:8	55:16	3	
goto	55:8	55:16	4	end
water	55:13	0:0	5	end
water	56:4	0:0	2	s
op	56:6	0:0	2	=
call	56:8	56:33	2	avresample_alloc_context
water	56:34	0:0	2	;
if	57:4	61:4	2	(! s)
cond	57:8	57:9	3	! s
op	57:8	0:0	4	!
water	57:9	0:0	4	s
stmts	57:12	61:4	3	
water	57:12	0:0	4	{
call	58:8	58:78	4	av_log
arg	58:15	58:19	5	NULL
water	58:15	0:0	6	NULL
arg	58:21	58:33	5	AV_LOG_ERROR
water	58:21	0:0	6	AV_LOG_ERROR
arg	58:35	58:78	5	"Error allocating AVAudioResampleContext\n"
water	58:35	0:0	6	"Error allocating AVAudioResampleContext\n"
water	58:79	0:0	4	;
water	59:8	0:0	4	ret
op	59:12	0:0	4	=
water	59:14	0:0	4	1
water	59:15	0:0	4	;
goto	60:8	60:16	4	end
water	60:13	0:0	5	end
water	61:4	0:0	4	}
for	62:4	129:4	2	(i = 0 ;i < num_formats;i ++)
forinit	62:9	62:14	3	i = 0 ;
water	62:9	0:0	4	i
op	62:11	0:0	4	=
water	62:13	0:0	4	0
water	62:14	0:0	4	;
cond	62:16	62:20	3	i < num_formats
water	62:16	0:0	4	i
op	62:18	0:0	4	<
water	62:20	0:0	4	num_formats
forexpr	62:33	62:34	3	i ++
water	62:33	0:0	4	i
op	62:34	0:0	4	++
stmts	62:38	129:4	3	
water	62:38	0:0	4	{
water	63:8	0:0	4	in_fmt
op	63:15	0:0	4	=
water	63:17	0:0	4	formats
op	63:24	0:0	4	[
water	63:25	0:0	4	i
op	63:26	0:0	4	]
water	63:27	0:0	4	;
for	64:8	128:8	4	(k = 0 ;k < num_layouts;k ++)
forinit	64:13	64:18	5	k = 0 ;
water	64:13	0:0	6	k
op	64:15	0:0	6	=
water	64:17	0:0	6	0
water	64:18	0:0	6	;
cond	64:20	64:24	5	k < num_layouts
water	64:20	0:0	6	k
op	64:22	0:0	6	<
water	64:24	0:0	6	num_layouts
forexpr	64:37	64:38	5	k ++
water	64:37	0:0	6	k
op	64:38	0:0	6	++
stmts	64:42	128:8	5	
water	64:42	0:0	6	{
water	65:12	0:0	6	in_ch_layout
op	65:25	0:0	6	=
water	65:27	0:0	6	layouts
op	65:34	0:0	6	[
water	65:35	0:0	6	k
op	65:36	0:0	6	]
water	65:37	0:0	6	;
water	66:12	0:0	6	in_channels
op	66:25	0:0	6	=
call	66:27	66:73	6	av_get_channel_layout_nb_channels
arg	66:61	66:73	7	in_ch_layout
water	66:61	0:0	8	in_ch_layout
water	66:74	0:0	6	;
for	67:12	127:12	6	(m = 0 ;m < num_rates;m ++)
forinit	67:17	67:22	7	m = 0 ;
water	67:17	0:0	8	m
op	67:19	0:0	8	=
water	67:21	0:0	8	0
water	67:22	0:0	8	;
cond	67:24	67:28	7	m < num_rates
water	67:24	0:0	8	m
op	67:26	0:0	8	<
water	67:28	0:0	8	num_rates
forexpr	67:39	67:40	7	m ++
water	67:39	0:0	8	m
op	67:40	0:0	8	++
stmts	67:44	127:12	7	
water	67:44	0:0	8	{
water	68:16	0:0	8	in_rate
op	68:24	0:0	8	=
water	68:26	0:0	8	rates
op	68:31	0:0	8	[
water	68:32	0:0	8	m
op	68:33	0:0	8	]
water	68:34	0:0	8	;
water	69:16	0:0	8	ret
op	69:20	0:0	8	=
call	69:22	71:54	8	av_samples_fill_arrays
arg	69:45	69:52	9	in_data
water	69:45	0:0	10	in_data
arg	69:54	69:66	9	&in_linesize
op	69:54	0:0	10	&
water	69:55	0:0	10	in_linesize
arg	69:68	69:74	9	in_buf
water	69:68	0:0	10	in_buf
arg	70:45	70:56	9	in_channels
water	70:45	0:0	10	in_channels
arg	70:58	70:69	9	in_rate*6
water	70:58	0:0	10	in_rate
op	70:66	0:0	10	*
water	70:68	0:0	10	6
arg	71:45	71:51	9	in_fmt
water	71:45	0:0	10	in_fmt
arg	71:53	71:54	9	0
water	71:53	0:0	10	0
water	71:55	0:0	8	;
if	72:16	75:16	8	(ret < 0)
cond	72:20	72:26	9	ret < 0
water	72:20	0:0	10	ret
op	72:24	0:0	10	<
water	72:26	0:0	10	0
stmts	72:29	75:16	9	
water	72:29	0:0	10	{
call	73:20	73:74	10	av_log
arg	73:27	73:28	11	s
water	73:27	0:0	12	s
arg	73:30	73:42	11	AV_LOG_ERROR
water	73:30	0:0	12	AV_LOG_ERROR
arg	73:44	73:74	11	"failed in_data fill arrays\n"
water	73:44	0:0	12	"failed in_data fill arrays\n"
water	73:75	0:0	10	;
goto	74:20	74:28	10	end
water	74:25	0:0	11	end
water	75:16	0:0	10	}
call	76:16	76:90	8	audiogen
arg	76:25	76:29	9	&rnd
op	76:25	0:0	10	&
water	76:26	0:0	10	rnd
arg	76:31	76:47	9	(void**)in_data
water	76:31	0:0	10	(
water	76:32	0:0	10	void
op	76:37	0:0	10	*
op	76:38	0:0	10	*
water	76:39	0:0	10	)
water	76:40	0:0	10	in_data
arg	76:49	76:55	9	in_fmt
water	76:49	0:0	10	in_fmt
arg	76:57	76:68	9	in_channels
water	76:57	0:0	10	in_channels
arg	76:70	76:77	9	in_rate
water	76:70	0:0	10	in_rate
arg	76:79	76:90	9	in_rate*6
water	76:79	0:0	10	in_rate
op	76:87	0:0	10	*
water	76:89	0:0	10	6
water	76:91	0:0	8	;
for	77:16	126:16	8	(j = 0 ;j < num_formats;j ++)
forinit	77:21	77:26	9	j = 0 ;
water	77:21	0:0	10	j
op	77:23	0:0	10	=
water	77:25	0:0	10	0
water	77:26	0:0	10	;
cond	77:28	77:32	9	j < num_formats
water	77:28	0:0	10	j
op	77:30	0:0	10	<
water	77:32	0:0	10	num_formats
forexpr	77:45	77:46	9	j ++
water	77:45	0:0	10	j
op	77:46	0:0	10	++
stmts	77:50	126:16	9	
water	77:50	0:0	10	{
water	78:20	0:0	10	out_fmt
op	78:28	0:0	10	=
water	78:30	0:0	10	formats
op	78:37	0:0	10	[
water	78:38	0:0	10	j
op	78:39	0:0	10	]
water	78:40	0:0	10	;
for	79:20	125:20	10	(l = 0 ;l < num_layouts;l ++)
forinit	79:25	79:30	11	l = 0 ;
water	79:25	0:0	12	l
op	79:27	0:0	12	=
water	79:29	0:0	12	0
water	79:30	0:0	12	;
cond	79:32	79:36	11	l < num_layouts
water	79:32	0:0	12	l
op	79:34	0:0	12	<
water	79:36	0:0	12	num_layouts
forexpr	79:49	79:50	11	l ++
water	79:49	0:0	12	l
op	79:50	0:0	12	++
stmts	79:54	125:20	11	
water	79:54	0:0	12	{
water	80:24	0:0	12	out_ch_layout
op	80:38	0:0	12	=
water	80:40	0:0	12	layouts
op	80:47	0:0	12	[
water	80:48	0:0	12	l
op	80:49	0:0	12	]
water	80:50	0:0	12	;
water	81:24	0:0	12	out_channels
op	81:38	0:0	12	=
call	81:40	81:87	12	av_get_channel_layout_nb_channels
arg	81:74	81:87	13	out_ch_layout
water	81:74	0:0	14	out_ch_layout
water	81:88	0:0	12	;
for	82:24	124:24	12	(n = 0 ;n < num_rates;n ++)
forinit	82:29	82:34	13	n = 0 ;
water	82:29	0:0	14	n
op	82:31	0:0	14	=
water	82:33	0:0	14	0
water	82:34	0:0	14	;
cond	82:36	82:40	13	n < num_rates
water	82:36	0:0	14	n
op	82:38	0:0	14	<
water	82:40	0:0	14	num_rates
forexpr	82:51	82:52	13	n ++
water	82:51	0:0	14	n
op	82:52	0:0	14	++
stmts	82:56	124:24	13	
water	82:56	0:0	14	{
water	83:28	0:0	14	out_rate
op	83:37	0:0	14	=
water	83:39	0:0	14	rates
op	83:44	0:0	14	[
water	83:45	0:0	14	n
op	83:46	0:0	14	]
water	83:47	0:0	14	;
call	84:28	86:79	14	av_log
arg	84:35	84:39	15	NULL
water	84:35	0:0	16	NULL
arg	84:41	84:52	15	AV_LOG_INFO
water	84:41	0:0	16	AV_LOG_INFO
arg	84:54	84:101	15	"%s to %s, %d to %d channels, %d Hz to %d Hz\n"
water	84:54	0:0	16	"%s to %s, %d to %d channels, %d Hz to %d Hz\n"
arg	85:35	85:65	15	av_get_sample_fmt_name(in_fmt)
call	85:35	85:64	16	av_get_sample_fmt_name
arg	85:58	85:64	17	in_fmt
water	85:58	0:0	18	in_fmt
arg	85:67	85:98	15	av_get_sample_fmt_name(out_fmt)
call	85:67	85:97	16	av_get_sample_fmt_name
arg	85:90	85:97	17	out_fmt
water	85:90	0:0	18	out_fmt
arg	86:35	86:46	15	in_channels
water	86:35	0:0	16	in_channels
arg	86:48	86:60	15	out_channels
water	86:48	0:0	16	out_channels
arg	86:62	86:69	15	in_rate
water	86:62	0:0	16	in_rate
arg	86:71	86:79	15	out_rate
water	86:71	0:0	16	out_rate
water	86:80	0:0	14	;
water	87:28	0:0	14	ret
op	87:32	0:0	14	=
call	87:34	89:81	14	av_samples_fill_arrays
arg	87:57	87:65	15	out_data
water	87:57	0:0	16	out_data
arg	87:67	87:80	15	&out_linesize
op	87:67	0:0	16	&
water	87:68	0:0	16	out_linesize
arg	88:57	88:64	15	out_buf
water	88:57	0:0	16	out_buf
arg	88:66	88:78	15	out_channels
water	88:66	0:0	16	out_channels
arg	89:57	89:69	15	out_rate*6
water	89:57	0:0	16	out_rate
op	89:66	0:0	16	*
water	89:68	0:0	16	6
arg	89:71	89:78	15	out_fmt
water	89:71	0:0	16	out_fmt
arg	89:80	89:81	15	0
water	89:80	0:0	16	0
water	89:82	0:0	14	;
if	90:28	93:28	14	(ret < 0)
cond	90:32	90:38	15	ret < 0
water	90:32	0:0	16	ret
op	90:36	0:0	16	<
water	90:38	0:0	16	0
stmts	90:41	93:28	15	
water	90:41	0:0	16	{
call	91:32	91:87	16	av_log
arg	91:39	91:40	17	s
water	91:39	0:0	18	s
arg	91:42	91:54	17	AV_LOG_ERROR
water	91:42	0:0	18	AV_LOG_ERROR
arg	91:56	91:87	17	"failed out_data fill arrays\n"
water	91:56	0:0	18	"failed out_data fill arrays\n"
water	91:88	0:0	16	;
goto	92:32	92:40	16	end
water	92:37	0:0	17	end
water	93:28	0:0	16	}
call	94:28	94:84	14	av_opt_set_int
arg	94:43	94:44	15	s
water	94:43	0:0	16	s
arg	94:46	94:65	15	"in_channel_layout"
water	94:46	0:0	16	"in_channel_layout"
arg	94:68	94:80	15	in_ch_layout
water	94:68	0:0	16	in_ch_layout
arg	94:83	94:84	15	0
water	94:83	0:0	16	0
water	94:85	0:0	14	;
call	95:28	95:84	14	av_opt_set_int
arg	95:43	95:44	15	s
water	95:43	0:0	16	s
arg	95:46	95:61	15	"in_sample_fmt"
water	95:46	0:0	16	"in_sample_fmt"
arg	95:68	95:74	15	in_fmt
water	95:68	0:0	16	in_fmt
arg	95:83	95:84	15	0
water	95:83	0:0	16	0
water	95:85	0:0	14	;
call	96:28	96:84	14	av_opt_set_int
arg	96:43	96:44	15	s
water	96:43	0:0	16	s
arg	96:46	96:62	15	"in_sample_rate"
water	96:46	0:0	16	"in_sample_rate"
arg	96:68	96:75	15	in_rate
water	96:68	0:0	16	in_rate
arg	96:83	96:84	15	0
water	96:83	0:0	16	0
water	96:85	0:0	14	;
call	97:28	97:84	14	av_opt_set_int
arg	97:43	97:44	15	s
water	97:43	0:0	16	s
arg	97:46	97:66	15	"out_channel_layout"
water	97:46	0:0	16	"out_channel_layout"
arg	97:68	97:81	15	out_ch_layout
water	97:68	0:0	16	out_ch_layout
arg	97:83	97:84	15	0
water	97:83	0:0	16	0
water	97:85	0:0	14	;
call	98:28	98:84	14	av_opt_set_int
arg	98:43	98:44	15	s
water	98:43	0:0	16	s
arg	98:46	98:62	15	"out_sample_fmt"
water	98:46	0:0	16	"out_sample_fmt"
arg	98:68	98:75	15	out_fmt
water	98:68	0:0	16	out_fmt
arg	98:83	98:84	15	0
water	98:83	0:0	16	0
water	98:85	0:0	14	;
call	99:28	99:84	14	av_opt_set_int
arg	99:43	99:44	15	s
water	99:43	0:0	16	s
arg	99:46	99:63	15	"out_sample_rate"
water	99:46	0:0	16	"out_sample_rate"
arg	99:68	99:76	15	out_rate
water	99:68	0:0	16	out_rate
arg	99:83	99:84	15	0
water	99:83	0:0	16	0
water	99:85	0:0	14	;
call	100:28	100:90	14	av_opt_set_int
arg	100:43	100:44	15	s
water	100:43	0:0	16	s
arg	100:46	100:67	15	"internal_sample_fmt"
water	100:46	0:0	16	"internal_sample_fmt"
arg	100:69	100:87	15	AV_SAMPLE_FMT_FLTP
water	100:69	0:0	16	AV_SAMPLE_FMT_FLTP
arg	100:89	100:90	15	0
water	100:89	0:0	16	0
water	100:91	0:0	14	;
water	101:28	0:0	14	ret
op	101:32	0:0	14	=
call	101:34	101:51	14	avresample_open
arg	101:50	101:51	15	s
water	101:50	0:0	16	s
water	101:52	0:0	14	;
if	102:28	105:28	14	(ret < 0)
cond	102:32	102:38	15	ret < 0
water	102:32	0:0	16	ret
op	102:36	0:0	16	<
water	102:38	0:0	16	0
stmts	102:41	105:28	15	
water	102:41	0:0	16	{
call	103:32	103:81	16	av_log
arg	103:39	103:40	17	s
water	103:39	0:0	18	s
arg	103:42	103:54	17	AV_LOG_ERROR
water	103:42	0:0	18	AV_LOG_ERROR
arg	103:56	103:81	17	"Error opening context\n"
water	103:56	0:0	18	"Error opening context\n"
water	103:82	0:0	16	;
goto	104:32	104:40	16	end
water	104:37	0:0	17	end
water	105:28	0:0	16	}
water	106:28	0:0	14	ret
op	106:32	0:0	14	=
call	106:34	107:92	14	avresample_convert
arg	106:53	106:54	15	s
water	106:53	0:0	16	s
arg	106:56	106:64	15	out_data
water	106:56	0:0	16	out_data
arg	106:66	106:78	15	out_linesize
water	106:66	0:0	16	out_linesize
arg	106:80	106:92	15	out_rate*6
water	106:80	0:0	16	out_rate
op	106:89	0:0	16	*
water	106:91	0:0	16	6
arg	107:57	107:64	15	in_data
water	107:57	0:0	16	in_data
arg	107:67	107:78	15	in_linesize
water	107:67	0:0	16	in_linesize
arg	107:81	107:92	15	in_rate*6
water	107:81	0:0	16	in_rate
op	107:89	0:0	16	*
water	107:91	0:0	16	6
water	107:93	0:0	14	;
if	108:28	113:28	14	(ret < 0)
cond	108:32	108:38	15	ret < 0
water	108:32	0:0	16	ret
op	108:36	0:0	16	<
water	108:38	0:0	16	0
stmts	108:41	113:28	15	
water	108:41	0:0	16	{
decl	109:32	109:48	16	char	errbuf[256]
call	110:32	110:71	16	av_strerror
arg	110:44	110:47	17	ret
water	110:44	0:0	18	ret
arg	110:49	110:55	17	errbuf
water	110:49	0:0	18	errbuf
arg	110:57	110:71	17	sizeof(errbuf)
op	110:57	0:0	18	sizeof
water	110:63	0:0	18	(
water	110:64	0:0	18	errbuf
water	110:70	0:0	18	)
water	110:72	0:0	16	;
call	111:32	111:73	16	av_log
arg	111:39	111:43	17	NULL
water	111:39	0:0	18	NULL
arg	111:45	111:57	17	AV_LOG_ERROR
water	111:45	0:0	18	AV_LOG_ERROR
arg	111:59	111:65	17	"%s\n"
water	111:59	0:0	18	"%s\n"
arg	111:67	111:73	17	errbuf
water	111:67	0:0	18	errbuf
water	111:74	0:0	16	;
goto	112:32	112:40	16	end
water	112:37	0:0	17	end
water	113:28	0:0	16	}
call	114:28	115:51	14	av_log
arg	114:35	114:39	15	NULL
water	114:35	0:0	16	NULL
arg	114:41	114:52	15	AV_LOG_INFO
water	114:41	0:0	16	AV_LOG_INFO
arg	114:54	114:92	15	"Converted %d samples to %d samples\n"
water	114:54	0:0	16	"Converted %d samples to %d samples\n"
arg	115:35	115:46	15	in_rate*6
water	115:35	0:0	16	in_rate
op	115:43	0:0	16	*
water	115:45	0:0	16	6
arg	115:48	115:51	15	ret
water	115:48	0:0	16	ret
water	115:52	0:0	14	;
if	116:28	118:63	14	(avresample_get_delay (s ) > 0)
cond	116:32	116:58	15	avresample_get_delay (s ) > 0
call	116:32	116:54	16	avresample_get_delay
arg	116:53	116:54	17	s
water	116:53	0:0	18	s
op	116:56	0:0	16	>
water	116:58	0:0	16	0
stmts	117:32	118:63	15	
call	117:32	118:62	16	av_log
arg	117:39	117:43	17	NULL
water	117:39	0:0	18	NULL
arg	117:45	117:56	17	AV_LOG_INFO
water	117:45	0:0	18	AV_LOG_INFO
arg	117:58	117:92	17	"%d delay samples not converted\n"
water	117:58	0:0	18	"%d delay samples not converted\n"
arg	118:39	118:62	17	avresample_get_delay(s)
call	118:39	118:61	18	avresample_get_delay
arg	118:60	118:61	19	s
water	118:60	0:0	20	s
water	118:63	0:0	16	;
if	119:28	121:63	14	(avresample_available (s ) > 0)
cond	119:32	119:58	15	avresample_available (s ) > 0
call	119:32	119:54	16	avresample_available
arg	119:53	119:54	17	s
water	119:53	0:0	18	s
op	119:56	0:0	16	>
water	119:58	0:0	16	0
stmts	120:32	121:63	15	
call	120:32	121:62	16	av_log
arg	120:39	120:43	17	NULL
water	120:39	0:0	18	NULL
arg	120:45	120:56	17	AV_LOG_INFO
water	120:45	0:0	18	AV_LOG_INFO
arg	120:58	120:93	17	"%d samples available for output\n"
water	120:58	0:0	18	"%d samples available for output\n"
arg	121:39	121:62	17	avresample_available(s)
call	121:39	121:61	18	avresample_available
arg	121:60	121:61	19	s
water	121:60	0:0	20	s
water	121:63	0:0	16	;
call	122:28	122:58	14	av_log
arg	122:35	122:39	15	NULL
water	122:35	0:0	16	NULL
arg	122:41	122:52	15	AV_LOG_INFO
water	122:41	0:0	16	AV_LOG_INFO
arg	122:54	122:58	15	"\n"
water	122:54	0:0	16	"\n"
water	122:59	0:0	14	;
call	123:28	123:46	14	avresample_close
arg	123:45	123:46	15	s
water	123:45	0:0	16	s
water	123:47	0:0	14	;
water	124:24	0:0	14	}
water	125:20	0:0	12	}
water	126:16	0:0	10	}
water	127:12	0:0	8	}
water	128:8	0:0	6	}
water	129:4	0:0	4	}
water	130:4	0:0	2	ret
op	130:8	0:0	2	=
water	130:10	0:0	2	0
water	130:11	0:0	2	;
label	131:0	131:3	2	end :
call	132:4	132:20	2	av_freep
arg	132:13	132:20	3	&in_buf
op	132:13	0:0	4	&
water	132:14	0:0	4	in_buf
water	132:21	0:0	2	;
call	133:4	133:21	2	av_freep
arg	133:13	133:21	3	&out_buf
op	133:13	0:0	4	&
water	133:14	0:0	4	out_buf
water	133:22	0:0	2	;
call	134:4	134:22	2	avresample_free
arg	134:20	134:22	3	&s
op	134:20	0:0	4	&
water	134:21	0:0	4	s
water	134:23	0:0	2	;
return	135:4	135:14	2	ret
water	135:11	0:0	3	ret
