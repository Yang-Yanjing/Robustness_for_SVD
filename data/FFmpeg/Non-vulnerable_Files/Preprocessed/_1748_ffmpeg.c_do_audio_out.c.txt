func	1:0	48:0	0	static void	do_audio_out
params	1:24	0:0	1	
param	1:25	1:39	2	OutputFile *	of
param	1:41	1:58	2	OutputStream *	ost
param	2:25	2:39	2	AVFrame *	frame
stmnts	0:0	47:19	1	
decl	4:4	4:38	2	AVCodecContext	*enc
op	4:24	0:0	2	=
water	4:26	0:0	2	ost
op	4:29	0:0	2	->
water	4:31	0:0	2	enc_ctx
decl	5:4	5:16	2	AVPacket	pkt
decl	6:4	6:11	2	int	ret
call	7:4	7:23	2	av_init_packet
arg	7:19	7:23	3	&pkt
op	7:19	0:0	4	&
water	7:20	0:0	4	pkt
water	7:24	0:0	2	;
water	8:4	0:0	2	pkt
op	8:7	0:0	2	.
water	8:8	0:0	2	data
op	8:13	0:0	2	=
water	8:15	0:0	2	NULL
water	8:19	0:0	2	;
water	9:4	0:0	2	pkt
op	9:7	0:0	2	.
water	9:8	0:0	2	size
op	9:13	0:0	2	=
water	9:15	0:0	2	0
water	9:16	0:0	2	;
if	10:4	11:14	2	(!check_recording_time (ost ))
cond	10:8	10:33	3	!check_recording_time (ost )
op	10:8	0:0	4	!
call	10:9	10:33	4	check_recording_time
arg	10:30	10:33	5	ost
water	10:30	0:0	6	ost
stmts	11:8	11:14	3	
return	11:8	11:14	4	
if	12:4	13:35	2	(frame -> pts == AV_NOPTS_VALUE || audio_sync_method < 0)
cond	12:8	12:60	3	frame -> pts == AV_NOPTS_VALUE || audio_sync_method < 0
water	12:8	0:0	4	frame
op	12:13	0:0	4	->
water	12:15	0:0	4	pts
op	12:19	0:0	4	==
water	12:22	0:0	4	AV_NOPTS_VALUE
op	12:37	0:0	4	||
water	12:40	0:0	4	audio_sync_method
op	12:58	0:0	4	<
water	12:60	0:0	4	0
stmts	13:8	13:35	3	
water	13:8	0:0	4	frame
op	13:13	0:0	4	->
water	13:15	0:0	4	pts
op	13:19	0:0	4	=
water	13:21	0:0	4	ost
op	13:24	0:0	4	->
water	13:26	0:0	4	sync_opts
water	13:35	0:0	4	;
water	14:4	0:0	2	ost
op	14:7	0:0	2	->
water	14:9	0:0	2	sync_opts
op	14:19	0:0	2	=
water	14:21	0:0	2	frame
op	14:26	0:0	2	->
water	14:28	0:0	2	pts
op	14:32	0:0	2	+
water	14:34	0:0	2	frame
op	14:39	0:0	2	->
water	14:41	0:0	2	nb_samples
water	14:51	0:0	2	;
water	15:4	0:0	2	ost
op	15:7	0:0	2	->
water	15:9	0:0	2	samples_encoded
op	15:25	0:0	2	+=
water	15:28	0:0	2	frame
op	15:33	0:0	2	->
water	15:35	0:0	2	nb_samples
water	15:45	0:0	2	;
water	16:4	0:0	2	ost
op	16:7	0:0	2	->
water	16:9	0:0	2	frames_encoded
op	16:23	0:0	2	++
water	16:25	0:0	2	;
call	17:4	17:36	2	av_assert0
arg	17:15	17:36	3	pkt.size||!pkt.data
water	17:15	0:0	4	pkt
op	17:18	0:0	4	.
water	17:19	0:0	4	size
op	17:24	0:0	4	||
op	17:27	0:0	4	!
water	17:28	0:0	4	pkt
op	17:31	0:0	4	.
water	17:32	0:0	4	data
water	17:37	0:0	2	;
call	18:4	18:25	2	update_benchmark
arg	18:21	18:25	3	NULL
water	18:21	0:0	4	NULL
water	18:26	0:0	2	;
if	19:4	24:4	2	(debug_ts)
cond	19:8	19:8	3	debug_ts
water	19:8	0:0	4	debug_ts
stmts	19:18	24:4	3	
water	19:18	0:0	4	{
call	20:8	23:53	4	av_log
arg	20:15	20:19	5	NULL
water	20:15	0:0	6	NULL
arg	20:21	20:32	5	AV_LOG_INFO
water	20:21	0:0	6	AV_LOG_INFO
arg	20:34	21:65	5	"encoder <- type:audio ""frame_pts:%s frame_pts_time:%s time_base:%d/%d\n"
water	20:34	0:0	6	"encoder <- type:audio "
water	21:15	0:0	6	"frame_pts:%s frame_pts_time:%s time_base:%d/%d\n"
arg	22:15	22:36	5	av_ts2str(frame->pts)
call	22:15	22:35	6	av_ts2str
arg	22:25	22:35	7	frame->pts
water	22:25	0:0	8	frame
op	22:30	0:0	8	->
water	22:32	0:0	8	pts
arg	22:38	22:80	5	av_ts2timestr(frame->pts,&enc->time_base)
call	22:38	22:79	6	av_ts2timestr
arg	22:52	22:62	7	frame->pts
water	22:52	0:0	8	frame
op	22:57	0:0	8	->
water	22:59	0:0	8	pts
arg	22:64	22:79	7	&enc->time_base
op	22:64	0:0	8	&
water	22:65	0:0	8	enc
op	22:68	0:0	8	->
water	22:70	0:0	8	time_base
arg	23:15	23:33	5	enc->time_base.num
water	23:15	0:0	6	enc
op	23:18	0:0	6	->
water	23:20	0:0	6	time_base
op	23:29	0:0	6	.
water	23:30	0:0	6	num
arg	23:35	23:53	5	enc->time_base.den
water	23:35	0:0	6	enc
op	23:38	0:0	6	->
water	23:40	0:0	6	time_base
op	23:49	0:0	6	.
water	23:50	0:0	6	den
water	23:54	0:0	4	;
water	24:4	0:0	4	}
water	25:4	0:0	2	ret
op	25:8	0:0	2	=
call	25:10	25:39	2	avcodec_send_frame
arg	25:29	25:32	3	enc
water	25:29	0:0	4	enc
arg	25:34	25:39	3	frame
water	25:34	0:0	4	frame
water	25:40	0:0	2	;
if	26:4	27:18	2	(ret < 0)
cond	26:8	26:14	3	ret < 0
water	26:8	0:0	4	ret
op	26:12	0:0	4	<
water	26:14	0:0	4	0
stmts	27:8	27:18	3	
goto	27:8	27:18	4	error
water	27:13	0:0	5	error
while	28:4	43:4	2	(1)
cond	28:11	28:11	3	1
water	28:11	0:0	4	1
stmts	28:14	43:4	3	
water	28:14	0:0	4	{
water	29:8	0:0	4	ret
op	29:12	0:0	4	=
call	29:14	29:46	4	avcodec_receive_packet
arg	29:37	29:40	5	enc
water	29:37	0:0	6	enc
arg	29:42	29:46	5	&pkt
op	29:42	0:0	6	&
water	29:43	0:0	6	pkt
water	29:47	0:0	4	;
if	30:8	31:17	4	(ret ==AVERROR (EAGAIN ))
cond	30:12	30:33	5	ret ==AVERROR (EAGAIN )
water	30:12	0:0	6	ret
op	30:16	0:0	6	==
call	30:19	30:33	6	AVERROR
arg	30:27	30:33	7	EAGAIN
water	30:27	0:0	8	EAGAIN
stmts	31:12	31:17	5	
break	31:12	31:17	6	
if	32:8	33:22	4	(ret < 0)
cond	32:12	32:18	5	ret < 0
water	32:12	0:0	6	ret
op	32:16	0:0	6	<
water	32:18	0:0	6	0
stmts	33:12	33:22	5	
goto	33:12	33:22	6	error
water	33:17	0:0	7	error
call	34:8	34:74	4	update_benchmark
arg	34:25	34:45	5	"encode_audio %d.%d"
water	34:25	0:0	6	"encode_audio %d.%d"
arg	34:47	34:62	5	ost->file_index
water	34:47	0:0	6	ost
op	34:50	0:0	6	->
water	34:52	0:0	6	file_index
arg	34:64	34:74	5	ost->index
water	34:64	0:0	6	ost
op	34:67	0:0	6	->
water	34:69	0:0	6	index
water	34:75	0:0	4	;
call	35:8	35:68	4	av_packet_rescale_ts
arg	35:29	35:33	5	&pkt
op	35:29	0:0	6	&
water	35:30	0:0	6	pkt
arg	35:35	35:49	5	enc->time_base
water	35:35	0:0	6	enc
op	35:38	0:0	6	->
water	35:40	0:0	6	time_base
arg	35:51	35:68	5	ost->mux_timebase
water	35:51	0:0	6	ost
op	35:54	0:0	6	->
water	35:56	0:0	6	mux_timebase
water	35:69	0:0	4	;
if	36:8	41:8	4	(debug_ts)
cond	36:12	36:12	5	debug_ts
water	36:12	0:0	6	debug_ts
stmts	36:22	41:8	5	
water	36:22	0:0	6	{
call	37:12	40:78	6	av_log
arg	37:19	37:23	7	NULL
water	37:19	0:0	8	NULL
arg	37:25	37:36	7	AV_LOG_INFO
water	37:25	0:0	8	AV_LOG_INFO
arg	37:38	38:76	7	"encoder -> type:audio ""pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s\n"
water	37:38	0:0	8	"encoder -> type:audio "
water	38:19	0:0	8	"pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s\n"
arg	39:19	39:37	7	av_ts2str(pkt.pts)
call	39:19	39:36	8	av_ts2str
arg	39:29	39:36	9	pkt.pts
water	39:29	0:0	10	pkt
op	39:32	0:0	10	.
water	39:33	0:0	10	pts
arg	39:39	39:78	7	av_ts2timestr(pkt.pts,&enc->time_base)
call	39:39	39:77	8	av_ts2timestr
arg	39:53	39:60	9	pkt.pts
water	39:53	0:0	10	pkt
op	39:56	0:0	10	.
water	39:57	0:0	10	pts
arg	39:62	39:77	9	&enc->time_base
op	39:62	0:0	10	&
water	39:63	0:0	10	enc
op	39:66	0:0	10	->
water	39:68	0:0	10	time_base
arg	40:19	40:37	7	av_ts2str(pkt.dts)
call	40:19	40:36	8	av_ts2str
arg	40:29	40:36	9	pkt.dts
water	40:29	0:0	10	pkt
op	40:32	0:0	10	.
water	40:33	0:0	10	dts
arg	40:39	40:78	7	av_ts2timestr(pkt.dts,&enc->time_base)
call	40:39	40:77	8	av_ts2timestr
arg	40:53	40:60	9	pkt.dts
water	40:53	0:0	10	pkt
op	40:56	0:0	10	.
water	40:57	0:0	10	dts
arg	40:62	40:77	9	&enc->time_base
op	40:62	0:0	10	&
water	40:63	0:0	10	enc
op	40:66	0:0	10	->
water	40:68	0:0	10	time_base
water	40:79	0:0	6	;
water	41:8	0:0	6	}
call	42:8	42:35	4	output_packet
arg	42:22	42:24	5	of
water	42:22	0:0	6	of
arg	42:26	42:30	5	&pkt
op	42:26	0:0	6	&
water	42:27	0:0	6	pkt
arg	42:32	42:35	5	ost
water	42:32	0:0	6	ost
water	42:36	0:0	4	;
water	43:4	0:0	4	}
return	44:4	44:10	2	
label	45:0	45:5	2	error :
call	46:4	46:56	2	av_log
arg	46:11	46:15	3	NULL
water	46:11	0:0	4	NULL
arg	46:17	46:29	3	AV_LOG_FATAL
water	46:17	0:0	4	AV_LOG_FATAL
arg	46:31	46:56	3	"Audio encoding failed\n"
water	46:31	0:0	4	"Audio encoding failed\n"
water	46:57	0:0	2	;
call	47:4	47:18	2	exit_program
arg	47:17	47:18	3	1
water	47:17	0:0	4	1
water	47:19	0:0	2	;
