func	1:0	84:0	0	static int	dash_flush
params	1:21	0:0	1	
param	1:22	1:40	2	AVFormatContext *	s
param	1:42	1:51	2	int	final
param	1:53	1:63	2	int	stream
stmnts	0:0	83:14	1	
decl	3:4	3:33	2	DASHContext	*c
op	3:19	0:0	2	=
water	3:21	0:0	2	s
op	3:22	0:0	2	->
water	3:24	0:0	2	priv_data
decl	4:4	4:18	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:18	2	int	ret
op	4:15	0:0	2	=
water	4:17	0:0	2	0
decl	5:4	5:35	2	int	cur_flush_segment_index
op	5:32	0:0	2	=
water	5:34	0:0	2	0
if	6:4	7:66	2	(stream >= 0)
cond	6:8	6:18	3	stream >= 0
water	6:8	0:0	4	stream
op	6:15	0:0	4	>=
water	6:18	0:0	4	0
stmts	7:8	7:66	3	
water	7:8	0:0	4	cur_flush_segment_index
op	7:32	0:0	4	=
water	7:34	0:0	4	c
op	7:35	0:0	4	->
water	7:37	0:0	4	streams
op	7:44	0:0	4	[
water	7:45	0:0	4	stream
op	7:51	0:0	4	]
op	7:52	0:0	4	.
water	7:53	0:0	4	segment_index
water	7:66	0:0	4	;
for	8:4	61:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	8:9	8:14	3	i = 0 ;
water	8:9	0:0	4	i
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:23	3	i < s -> nb_streams
water	8:16	0:0	4	i
op	8:18	0:0	4	<
water	8:20	0:0	4	s
op	8:21	0:0	4	->
water	8:23	0:0	4	nb_streams
forexpr	8:35	8:36	3	i ++
water	8:35	0:0	4	i
op	8:36	0:0	4	++
stmts	8:40	61:4	3	
water	8:40	0:0	4	{
decl	9:8	9:41	4	OutputStream	*os
op	9:25	0:0	4	=
op	9:27	0:0	4	&
water	9:28	0:0	4	c
op	9:29	0:0	4	->
water	9:31	0:0	4	streams
op	9:38	0:0	4	[
water	9:39	0:0	4	i
op	9:40	0:0	4	]
decl	10:8	10:66	4	char	filename[1024]
op	10:28	0:0	4	=
water	10:30	0:0	4	""
water	10:32	0:0	4	,
decl	10:8	10:66	4	char	full_path[1024]
water	10:49	0:0	4	,
decl	10:8	10:66	4	char	temp_path[1024]
decl	11:8	11:25	4	int64_t	start_pos
decl	12:8	12:42	4	int	range_length
water	12:24	0:0	4	,
decl	12:8	12:42	4	int	index_length
op	12:39	0:0	4	=
water	12:41	0:0	4	0
if	13:8	14:20	4	(! os -> packets_written)
cond	13:12	13:17	5	! os -> packets_written
op	13:12	0:0	6	!
water	13:13	0:0	6	os
op	13:15	0:0	6	->
water	13:17	0:0	6	packets_written
stmts	14:12	14:20	5	
continue	14:12	14:20	6	
if	18:8	25:8	4	(stream >= 0 && i != stream)
cond	18:12	18:32	5	stream >= 0 && i != stream
water	18:12	0:0	6	stream
op	18:19	0:0	6	>=
water	18:22	0:0	6	0
op	18:24	0:0	6	&&
water	18:27	0:0	6	i
op	18:29	0:0	6	!=
water	18:32	0:0	6	stream
stmts	18:40	25:8	5	
water	18:40	0:0	6	{
if	19:12	20:24	6	(s -> streams [ i ] -> codec -> codec_type != AVMEDIA_TYPE_AUDIO)
cond	19:16	19:52	7	s -> streams [ i ] -> codec -> codec_type != AVMEDIA_TYPE_AUDIO
water	19:16	0:0	8	s
op	19:17	0:0	8	->
water	19:19	0:0	8	streams
op	19:26	0:0	8	[
water	19:27	0:0	8	i
op	19:28	0:0	8	]
op	19:29	0:0	8	->
water	19:31	0:0	8	codec
op	19:36	0:0	8	->
water	19:38	0:0	8	codec_type
op	19:49	0:0	8	!=
water	19:52	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	20:16	20:24	7	
continue	20:16	20:24	8	
if	23:12	24:24	6	(c -> has_video && os -> segment_index > cur_flush_segment_index)
cond	23:16	23:52	7	c -> has_video && os -> segment_index > cur_flush_segment_index
water	23:16	0:0	8	c
op	23:17	0:0	8	->
water	23:19	0:0	8	has_video
op	23:29	0:0	8	&&
water	23:32	0:0	8	os
op	23:34	0:0	8	->
water	23:36	0:0	8	segment_index
op	23:50	0:0	8	>
water	23:52	0:0	8	cur_flush_segment_index
stmts	24:16	24:24	7	
continue	24:16	24:24	8	
water	25:8	0:0	6	}
if	26:8	33:8	4	(! os -> init_range_length)
cond	26:12	26:17	5	! os -> init_range_length
op	26:12	0:0	6	!
water	26:13	0:0	6	os
op	26:15	0:0	6	->
water	26:17	0:0	6	init_range_length
stmts	26:36	33:8	5	
water	26:36	0:0	6	{
call	27:12	27:40	6	av_write_frame
arg	27:27	27:34	7	os->ctx
water	27:27	0:0	8	os
op	27:29	0:0	8	->
water	27:31	0:0	8	ctx
arg	27:36	27:40	7	NULL
water	27:36	0:0	8	NULL
water	27:41	0:0	6	;
water	28:12	0:0	6	os
op	28:14	0:0	6	->
water	28:16	0:0	6	init_range_length
op	28:34	0:0	6	=
call	28:36	28:57	6	avio_tell
arg	28:46	28:57	7	os->ctx->pb
water	28:46	0:0	8	os
op	28:48	0:0	8	->
water	28:50	0:0	8	ctx
op	28:53	0:0	8	->
water	28:55	0:0	8	pb
water	28:58	0:0	6	;
if	29:12	32:12	6	(! c -> single_file)
cond	29:16	29:20	7	! c -> single_file
op	29:16	0:0	8	!
water	29:17	0:0	8	c
op	29:18	0:0	8	->
water	29:20	0:0	8	single_file
stmts	29:33	32:12	7	
water	29:33	0:0	8	{
call	30:16	30:35	8	ffurl_close
arg	30:28	30:35	9	os->out
water	30:28	0:0	10	os
op	30:30	0:0	10	->
water	30:32	0:0	10	out
water	30:36	0:0	8	;
water	31:16	0:0	8	os
op	31:18	0:0	8	->
water	31:20	0:0	8	out
op	31:24	0:0	8	=
water	31:26	0:0	8	NULL
water	31:30	0:0	8	;
water	32:12	0:0	8	}
water	33:8	0:0	6	}
water	34:8	0:0	4	start_pos
op	34:18	0:0	4	=
call	34:20	34:41	4	avio_tell
arg	34:30	34:41	5	os->ctx->pb
water	34:30	0:0	6	os
op	34:32	0:0	6	->
water	34:34	0:0	6	ctx
op	34:37	0:0	6	->
water	34:39	0:0	6	pb
water	34:42	0:0	4	;
if	35:8	43:8	4	(! c -> single_file)
cond	35:12	35:16	5	! c -> single_file
op	35:12	0:0	6	!
water	35:13	0:0	6	c
op	35:14	0:0	6	->
water	35:16	0:0	6	single_file
stmts	35:29	43:8	5	
water	35:29	0:0	6	{
call	36:12	36:130	6	dash_fill_tmpl_params
arg	36:34	36:42	7	filename
water	36:34	0:0	8	filename
arg	36:44	36:60	7	sizeof(filename)
op	36:44	0:0	8	sizeof
water	36:50	0:0	8	(
water	36:51	0:0	8	filename
water	36:59	0:0	8	)
arg	36:62	36:79	7	c->media_seg_name
water	36:62	0:0	8	c
op	36:63	0:0	8	->
water	36:65	0:0	8	media_seg_name
arg	36:81	36:82	7	i
water	36:81	0:0	8	i
arg	36:84	36:101	7	os->segment_index
water	36:84	0:0	8	os
op	36:86	0:0	8	->
water	36:88	0:0	8	segment_index
arg	36:103	36:115	7	os->bit_rate
water	36:103	0:0	8	os
op	36:105	0:0	8	->
water	36:107	0:0	8	bit_rate
arg	36:117	36:130	7	os->start_pts
water	36:117	0:0	8	os
op	36:119	0:0	8	->
water	36:121	0:0	8	start_pts
water	36:131	0:0	6	;
call	37:12	37:79	6	snprintf
arg	37:21	37:30	7	full_path
water	37:21	0:0	8	full_path
arg	37:32	37:49	7	sizeof(full_path)
op	37:32	0:0	8	sizeof
water	37:38	0:0	8	(
water	37:39	0:0	8	full_path
water	37:48	0:0	8	)
arg	37:51	37:57	7	"%s%s"
water	37:51	0:0	8	"%s%s"
arg	37:59	37:69	7	c->dirname
water	37:59	0:0	8	c
op	37:60	0:0	8	->
water	37:62	0:0	8	dirname
arg	37:71	37:79	7	filename
water	37:71	0:0	8	filename
water	37:80	0:0	6	;
call	38:12	38:70	6	snprintf
arg	38:21	38:30	7	temp_path
water	38:21	0:0	8	temp_path
arg	38:32	38:49	7	sizeof(temp_path)
op	38:32	0:0	8	sizeof
water	38:38	0:0	8	(
water	38:39	0:0	8	temp_path
water	38:48	0:0	8	)
arg	38:51	38:59	7	"%s.tmp"
water	38:51	0:0	8	"%s.tmp"
arg	38:61	38:70	7	full_path
water	38:61	0:0	8	full_path
water	38:71	0:0	6	;
water	39:12	0:0	6	ret
op	39:16	0:0	6	=
call	39:18	39:95	6	ffurl_open
arg	39:29	39:37	7	&os->out
op	39:29	0:0	8	&
water	39:30	0:0	8	os
op	39:32	0:0	8	->
water	39:34	0:0	8	out
arg	39:39	39:48	7	temp_path
water	39:39	0:0	8	temp_path
arg	39:50	39:65	7	AVIO_FLAG_WRITE
water	39:50	0:0	8	AVIO_FLAG_WRITE
arg	39:67	39:89	7	&s->interrupt_callback
op	39:67	0:0	8	&
water	39:68	0:0	8	s
op	39:69	0:0	8	->
water	39:71	0:0	8	interrupt_callback
arg	39:91	39:95	7	NULL
water	39:91	0:0	8	NULL
water	39:96	0:0	6	;
if	40:12	41:21	6	(ret < 0)
cond	40:16	40:22	7	ret < 0
water	40:16	0:0	8	ret
op	40:20	0:0	8	<
water	40:22	0:0	8	0
stmts	41:16	41:21	7	
break	41:16	41:21	8	
call	42:12	42:34	6	write_styp
arg	42:23	42:34	7	os->ctx->pb
water	42:23	0:0	8	os
op	42:25	0:0	8	->
water	42:27	0:0	8	ctx
op	42:30	0:0	8	->
water	42:32	0:0	8	pb
water	42:35	0:0	6	;
water	43:8	0:0	6	}
else	43:10	45:8	4
stmts	43:15	45:8	5	
water	43:15	0:0	6	{
call	44:12	44:83	6	snprintf
arg	44:21	44:30	7	full_path
water	44:21	0:0	8	full_path
arg	44:32	44:49	7	sizeof(full_path)
op	44:32	0:0	8	sizeof
water	44:38	0:0	8	(
water	44:39	0:0	8	full_path
water	44:48	0:0	8	)
arg	44:51	44:57	7	"%s%s"
water	44:51	0:0	8	"%s%s"
arg	44:59	44:69	7	c->dirname
water	44:59	0:0	8	c
op	44:60	0:0	8	->
water	44:62	0:0	8	dirname
arg	44:71	44:83	7	os->initfile
water	44:71	0:0	8	os
op	44:73	0:0	8	->
water	44:75	0:0	8	initfile
water	44:84	0:0	6	;
water	45:8	0:0	6	}
call	46:8	46:36	4	av_write_frame
arg	46:23	46:30	5	os->ctx
water	46:23	0:0	6	os
op	46:25	0:0	6	->
water	46:27	0:0	6	ctx
arg	46:32	46:36	5	NULL
water	46:32	0:0	6	NULL
water	46:37	0:0	4	;
call	47:8	47:30	4	avio_flush
arg	47:19	47:30	5	os->ctx->pb
water	47:19	0:0	6	os
op	47:21	0:0	6	->
water	47:23	0:0	6	ctx
op	47:26	0:0	6	->
water	47:28	0:0	6	pb
water	47:31	0:0	4	;
water	48:8	0:0	4	os
op	48:10	0:0	4	->
water	48:12	0:0	4	packets_written
op	48:28	0:0	4	=
water	48:30	0:0	4	0
water	48:31	0:0	4	;
water	49:8	0:0	4	range_length
op	49:21	0:0	4	=
call	49:23	49:44	4	avio_tell
arg	49:33	49:44	5	os->ctx->pb
water	49:33	0:0	6	os
op	49:35	0:0	6	->
water	49:37	0:0	6	ctx
op	49:40	0:0	6	->
water	49:42	0:0	6	pb
op	49:46	0:0	4	-
water	49:48	0:0	4	start_pos
water	49:57	0:0	4	;
if	50:8	52:8	4	(c -> single_file)
cond	50:12	50:15	5	c -> single_file
water	50:12	0:0	6	c
op	50:13	0:0	6	->
water	50:15	0:0	6	single_file
stmts	50:28	52:8	5	
water	50:28	0:0	6	{
call	51:12	51:67	6	find_index_range
arg	51:29	51:30	7	s
water	51:29	0:0	8	s
arg	51:32	51:41	7	full_path
water	51:32	0:0	8	full_path
arg	51:43	51:52	7	start_pos
water	51:43	0:0	8	start_pos
arg	51:54	51:67	7	&index_length
op	51:54	0:0	8	&
water	51:55	0:0	8	index_length
water	51:68	0:0	6	;
water	52:8	0:0	6	}
else	52:10	58:8	4
stmts	52:15	58:8	5	
water	52:15	0:0	6	{
call	53:12	53:31	6	ffurl_close
arg	53:24	53:31	7	os->out
water	53:24	0:0	8	os
op	53:26	0:0	8	->
water	53:28	0:0	8	out
water	53:32	0:0	6	;
water	54:12	0:0	6	os
op	54:14	0:0	6	->
water	54:16	0:0	6	out
op	54:20	0:0	6	=
water	54:22	0:0	6	NULL
water	54:26	0:0	6	;
water	55:12	0:0	6	ret
op	55:16	0:0	6	=
call	55:18	55:51	6	ff_rename
arg	55:28	55:37	7	temp_path
water	55:28	0:0	8	temp_path
arg	55:39	55:48	7	full_path
water	55:39	0:0	8	full_path
arg	55:50	55:51	7	s
water	55:50	0:0	8	s
water	55:52	0:0	6	;
if	56:12	57:21	6	(ret < 0)
cond	56:16	56:22	7	ret < 0
water	56:16	0:0	8	ret
op	56:20	0:0	8	<
water	56:22	0:0	8	0
stmts	57:16	57:21	7	
break	57:16	57:21	8	
water	58:8	0:0	6	}
call	59:8	59:115	4	add_segment
arg	59:20	59:22	5	os
water	59:20	0:0	6	os
arg	59:24	59:32	5	filename
water	59:24	0:0	6	filename
arg	59:34	59:47	5	os->start_pts
water	59:34	0:0	6	os
op	59:36	0:0	6	->
water	59:38	0:0	6	start_pts
arg	59:49	59:76	5	os->max_pts-os->start_pts
water	59:49	0:0	6	os
op	59:51	0:0	6	->
water	59:53	0:0	6	max_pts
op	59:61	0:0	6	-
water	59:63	0:0	6	os
op	59:65	0:0	6	->
water	59:67	0:0	6	start_pts
arg	59:78	59:87	5	start_pos
water	59:78	0:0	6	start_pos
arg	59:89	59:101	5	range_length
water	59:89	0:0	6	range_length
arg	59:103	59:115	5	index_length
water	59:103	0:0	6	index_length
water	59:116	0:0	4	;
call	60:8	60:120	4	av_log
arg	60:15	60:16	5	s
water	60:15	0:0	6	s
arg	60:18	60:32	5	AV_LOG_VERBOSE
water	60:18	0:0	6	AV_LOG_VERBOSE
arg	60:34	60:87	5	"Representation %d media segment %d written to: %s\n"
water	60:34	0:0	6	"Representation %d media segment %d written to: %s\n"
arg	60:89	60:90	5	i
water	60:89	0:0	6	i
arg	60:92	60:109	5	os->segment_index
water	60:92	0:0	6	os
op	60:94	0:0	6	->
water	60:96	0:0	6	segment_index
arg	60:111	60:120	5	full_path
water	60:111	0:0	6	full_path
water	60:121	0:0	4	;
water	61:4	0:0	4	}
if	62:4	80:4	2	(c -> window_size || ( final && c -> remove_at_exit ))
cond	62:8	62:53	3	c -> window_size || ( final && c -> remove_at_exit )
water	62:8	0:0	4	c
op	62:9	0:0	4	->
water	62:11	0:0	4	window_size
op	62:23	0:0	4	||
water	62:26	0:0	4	(
water	62:27	0:0	4	final
op	62:33	0:0	4	&&
water	62:36	0:0	4	c
op	62:37	0:0	4	->
water	62:39	0:0	4	remove_at_exit
water	62:53	0:0	4	)
stmts	62:56	80:4	3	
water	62:56	0:0	4	{
for	63:8	79:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	63:13	63:18	5	i = 0 ;
water	63:13	0:0	6	i
op	63:15	0:0	6	=
water	63:17	0:0	6	0
water	63:18	0:0	6	;
cond	63:20	63:27	5	i < s -> nb_streams
water	63:20	0:0	6	i
op	63:22	0:0	6	<
water	63:24	0:0	6	s
op	63:25	0:0	6	->
water	63:27	0:0	6	nb_streams
forexpr	63:39	63:40	5	i ++
water	63:39	0:0	6	i
op	63:40	0:0	6	++
stmts	63:44	79:8	5	
water	63:44	0:0	6	{
decl	64:12	64:45	6	OutputStream	*os
op	64:29	0:0	6	=
op	64:31	0:0	6	&
water	64:32	0:0	6	c
op	64:33	0:0	6	->
water	64:35	0:0	6	streams
op	64:42	0:0	6	[
water	64:43	0:0	6	i
op	64:44	0:0	6	]
decl	65:12	65:17	6	int	j
decl	66:12	66:80	6	int	remove
op	66:23	0:0	6	=
water	66:25	0:0	6	os
op	66:27	0:0	6	->
water	66:29	0:0	6	nb_segments
op	66:41	0:0	6	-
water	66:43	0:0	6	c
op	66:44	0:0	6	->
water	66:46	0:0	6	window_size
op	66:58	0:0	6	-
water	66:60	0:0	6	c
op	66:61	0:0	6	->
water	66:63	0:0	6	extra_window_size
if	67:12	68:40	6	(final && c -> remove_at_exit)
cond	67:16	67:28	7	final && c -> remove_at_exit
water	67:16	0:0	8	final
op	67:22	0:0	8	&&
water	67:25	0:0	8	c
op	67:26	0:0	8	->
water	67:28	0:0	8	remove_at_exit
stmts	68:16	68:40	7	
water	68:16	0:0	8	remove
op	68:23	0:0	8	=
water	68:25	0:0	8	os
op	68:27	0:0	8	->
water	68:29	0:0	8	nb_segments
water	68:40	0:0	8	;
if	69:12	78:12	6	(remove > 0)
cond	69:16	69:25	7	remove > 0
water	69:16	0:0	8	remove
op	69:23	0:0	8	>
water	69:25	0:0	8	0
stmts	69:28	78:12	7	
water	69:28	0:0	8	{
for	70:16	75:16	8	(j = 0 ;j < remove;j ++)
forinit	70:21	70:26	9	j = 0 ;
water	70:21	0:0	10	j
op	70:23	0:0	10	=
water	70:25	0:0	10	0
water	70:26	0:0	10	;
cond	70:28	70:32	9	j < remove
water	70:28	0:0	10	j
op	70:30	0:0	10	<
water	70:32	0:0	10	remove
forexpr	70:40	70:41	9	j ++
water	70:40	0:0	10	j
op	70:41	0:0	10	++
stmts	70:45	75:16	9	
water	70:45	0:0	10	{
decl	71:20	71:39	10	char	filename[1024]
call	72:20	72:98	10	snprintf
arg	72:29	72:37	11	filename
water	72:29	0:0	12	filename
arg	72:39	72:55	11	sizeof(filename)
op	72:39	0:0	12	sizeof
water	72:45	0:0	12	(
water	72:46	0:0	12	filename
water	72:54	0:0	12	)
arg	72:57	72:63	11	"%s%s"
water	72:57	0:0	12	"%s%s"
arg	72:65	72:75	11	c->dirname
water	72:65	0:0	12	c
op	72:66	0:0	12	->
water	72:68	0:0	12	dirname
arg	72:77	72:98	11	os->segments[j]->file
water	72:77	0:0	12	os
op	72:79	0:0	12	->
water	72:81	0:0	12	segments
op	72:89	0:0	12	[
water	72:90	0:0	12	j
op	72:91	0:0	12	]
op	72:92	0:0	12	->
water	72:94	0:0	12	file
water	72:99	0:0	10	;
call	73:20	73:35	10	unlink
arg	73:27	73:35	11	filename
water	73:27	0:0	12	filename
water	73:36	0:0	10	;
call	74:20	74:43	10	av_free
arg	74:28	74:43	11	os->segments[j]
water	74:28	0:0	12	os
op	74:30	0:0	12	->
water	74:32	0:0	12	segments
op	74:40	0:0	12	[
water	74:41	0:0	12	j
op	74:42	0:0	12	]
water	74:44	0:0	10	;
water	75:16	0:0	10	}
water	76:16	0:0	8	os
op	76:18	0:0	8	->
water	76:20	0:0	8	nb_segments
op	76:32	0:0	8	-=
water	76:35	0:0	8	remove
water	76:41	0:0	8	;
call	77:16	77:100	8	memmove
arg	77:24	77:36	9	os->segments
water	77:24	0:0	10	os
op	77:26	0:0	10	->
water	77:28	0:0	10	segments
arg	77:38	77:59	9	os->segments+remove
water	77:38	0:0	10	os
op	77:40	0:0	10	->
water	77:42	0:0	10	segments
op	77:51	0:0	10	+
water	77:53	0:0	10	remove
arg	77:61	77:100	9	os->nb_segments*sizeof(*os->segments)
water	77:61	0:0	10	os
op	77:63	0:0	10	->
water	77:65	0:0	10	nb_segments
op	77:77	0:0	10	*
op	77:79	0:0	10	sizeof
water	77:85	0:0	10	(
op	77:86	0:0	10	*
water	77:87	0:0	10	os
op	77:89	0:0	10	->
water	77:91	0:0	10	segments
water	77:99	0:0	10	)
water	77:101	0:0	8	;
water	78:12	0:0	8	}
water	79:8	0:0	6	}
water	80:4	0:0	4	}
if	81:4	82:38	2	(ret >= 0)
cond	81:8	81:15	3	ret >= 0
water	81:8	0:0	4	ret
op	81:12	0:0	4	>=
water	81:15	0:0	4	0
stmts	82:8	82:38	3	
water	82:8	0:0	4	ret
op	82:12	0:0	4	=
call	82:14	82:37	4	write_manifest
arg	82:29	82:30	5	s
water	82:29	0:0	6	s
arg	82:32	82:37	5	final
water	82:32	0:0	6	final
water	82:38	0:0	4	;
return	83:4	83:14	2	ret
water	83:11	0:0	3	ret
