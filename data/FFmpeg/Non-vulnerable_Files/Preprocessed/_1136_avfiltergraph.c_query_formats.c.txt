func	1:0	153:8	0	static int	query_formats
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterGraph *	graph
param	1:47	1:63	2	AVClass *	log_ctx
stmnts	0:0	152:12	1	
decl	3:4	3:17	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:17	2	int	j
water	3:12	0:0	2	,
decl	3:4	3:17	2	int	ret
decl	4:4	4:45	2	int	scaler_count
op	4:21	0:0	2	=
water	4:23	0:0	2	0
water	4:24	0:0	2	,
decl	4:4	4:45	2	int	resampler_count
op	4:42	0:0	2	=
water	4:44	0:0	2	0
decl	5:4	5:25	2	int	count_queried
op	5:22	0:0	2	=
water	5:24	0:0	2	0
decl	6:4	6:24	2	int	count_merged
op	6:21	0:0	2	=
water	6:23	0:0	2	0
decl	7:4	7:32	2	int	count_already_merged
op	7:29	0:0	2	=
water	7:31	0:0	2	0
decl	8:4	8:25	2	int	count_delayed
op	8:22	0:0	2	=
water	8:24	0:0	2	0
for	9:4	21:4	2	(i = 0 ;i < graph -> nb_filters;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:27	3	i < graph -> nb_filters
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	graph
op	9:25	0:0	4	->
water	9:27	0:0	4	nb_filters
forexpr	9:39	9:40	3	i ++
water	9:39	0:0	4	i
op	9:40	0:0	4	++
stmts	9:44	21:4	3	
water	9:44	0:0	4	{
decl	10:8	10:46	4	AVFilterContext	*f
op	10:27	0:0	4	=
water	10:29	0:0	4	graph
op	10:34	0:0	4	->
water	10:36	0:0	4	filters
op	10:43	0:0	4	[
water	10:44	0:0	4	i
op	10:45	0:0	4	]
if	11:8	12:20	4	(formats_declared (f ))
cond	11:12	11:30	5	formats_declared (f )
call	11:12	11:30	6	formats_declared
arg	11:29	11:30	7	f
water	11:29	0:0	8	f
stmts	12:12	12:20	5	
continue	12:12	12:20	6	
if	13:8	14:41	4	(f -> filter -> query_formats)
cond	13:12	13:23	5	f -> filter -> query_formats
water	13:12	0:0	6	f
op	13:13	0:0	6	->
water	13:15	0:0	6	filter
op	13:21	0:0	6	->
water	13:23	0:0	6	query_formats
stmts	14:12	14:41	5	
water	14:12	0:0	6	ret
op	14:16	0:0	6	=
call	14:18	14:40	6	filter_query_formats
arg	14:39	14:40	7	f
water	14:39	0:0	8	f
water	14:41	0:0	6	;
else	15:8	16:45	4
stmts	16:12	16:45	5	
water	16:12	0:0	6	ret
op	16:16	0:0	6	=
call	16:18	16:44	6	ff_default_query_formats
arg	16:43	16:44	7	f
water	16:43	0:0	8	f
water	16:45	0:0	6	;
if	17:8	18:22	4	(ret < 0 && ret !=AVERROR (EAGAIN ))
cond	17:12	17:44	5	ret < 0 && ret !=AVERROR (EAGAIN )
water	17:12	0:0	6	ret
op	17:16	0:0	6	<
water	17:18	0:0	6	0
op	17:20	0:0	6	&&
water	17:23	0:0	6	ret
op	17:27	0:0	6	!=
call	17:30	17:44	6	AVERROR
arg	17:38	17:44	7	EAGAIN
water	17:38	0:0	8	EAGAIN
stmts	18:12	18:22	5	
return	18:12	18:22	6	ret
water	18:19	0:0	7	ret
water	20:8	0:0	4	count_queried
op	20:22	0:0	4	+=
water	20:25	0:0	4	ret
op	20:29	0:0	4	>=
water	20:32	0:0	4	0
water	20:33	0:0	4	;
water	21:4	0:0	4	}
for	23:4	48:12	2	(i = 0 ;i < graph -> nb_filters;i ++)
forinit	23:9	23:14	3	i = 0 ;
water	23:9	0:0	4	i
op	23:11	0:0	4	=
water	23:13	0:0	4	0
water	23:14	0:0	4	;
cond	23:16	23:27	3	i < graph -> nb_filters
water	23:16	0:0	4	i
op	23:18	0:0	4	<
water	23:20	0:0	4	graph
op	23:25	0:0	4	->
water	23:27	0:0	4	nb_filters
forexpr	23:39	23:40	3	i ++
water	23:39	0:0	4	i
op	23:40	0:0	4	++
stmts	23:44	48:12	3	
water	23:44	0:0	4	{
decl	24:8	24:51	4	AVFilterContext	*filter
op	24:32	0:0	4	=
water	24:34	0:0	4	graph
op	24:39	0:0	4	->
water	24:41	0:0	4	filters
op	24:48	0:0	4	[
water	24:49	0:0	4	i
op	24:50	0:0	4	]
for	25:8	46:12	4	(j = 0 ;j < filter -> nb_inputs;j ++)
forinit	25:13	25:18	5	j = 0 ;
water	25:13	0:0	6	j
op	25:15	0:0	6	=
water	25:17	0:0	6	0
water	25:18	0:0	6	;
cond	25:20	25:32	5	j < filter -> nb_inputs
water	25:20	0:0	6	j
op	25:22	0:0	6	<
water	25:24	0:0	6	filter
op	25:30	0:0	6	->
water	25:32	0:0	6	nb_inputs
forexpr	25:43	25:44	5	j ++
water	25:43	0:0	6	j
op	25:44	0:0	6	++
stmts	25:48	46:12	5	
water	25:48	0:0	6	{
decl	26:12	26:50	6	AVFilterLink	*link
op	26:31	0:0	6	=
water	26:33	0:0	6	filter
op	26:39	0:0	6	->
water	26:41	0:0	6	inputs
op	26:47	0:0	6	[
water	26:48	0:0	6	j
op	26:49	0:0	6	]
decl	27:12	27:34	6	int	convert_needed
op	27:31	0:0	6	=
water	27:33	0:0	6	0
if	28:12	29:24	6	(! link)
cond	28:16	28:17	7	! link
op	28:16	0:0	8	!
water	28:17	0:0	8	link
stmts	29:16	29:24	7	
continue	29:16	29:24	8	
if	30:12	34:38	6	(link -> in_formats != link -> out_formats && link -> in_formats && link -> out_formats)
cond	30:16	31:45	7	link -> in_formats != link -> out_formats && link -> in_formats && link -> out_formats
water	30:16	0:0	8	link
op	30:20	0:0	8	->
water	30:22	0:0	8	in_formats
op	30:33	0:0	8	!=
water	30:36	0:0	8	link
op	30:40	0:0	8	->
water	30:42	0:0	8	out_formats
op	31:16	0:0	8	&&
water	31:19	0:0	8	link
op	31:23	0:0	8	->
water	31:25	0:0	8	in_formats
op	31:36	0:0	8	&&
water	31:39	0:0	8	link
op	31:43	0:0	8	->
water	31:45	0:0	8	out_formats
stmts	32:16	34:38	7	
if	32:16	34:38	8	(!can_merge_formats (link -> in_formats ,link -> out_formats ,link -> type ,0 ))
cond	32:20	33:51	9	!can_merge_formats (link -> in_formats ,link -> out_formats ,link -> type ,0 )
op	32:20	0:0	10	!
call	32:21	33:51	10	can_merge_formats
arg	32:39	32:55	11	link->in_formats
water	32:39	0:0	12	link
op	32:43	0:0	12	->
water	32:45	0:0	12	in_formats
arg	32:57	32:74	11	link->out_formats
water	32:57	0:0	12	link
op	32:61	0:0	12	->
water	32:63	0:0	12	out_formats
arg	33:38	33:48	11	link->type
water	33:38	0:0	12	link
op	33:42	0:0	12	->
water	33:44	0:0	12	type
arg	33:50	33:51	11	0
water	33:50	0:0	12	0
stmts	34:20	34:38	9	
water	34:20	0:0	10	convert_needed
op	34:35	0:0	10	=
water	34:37	0:0	10	1
water	34:38	0:0	10	;
if	35:12	42:12	6	(link -> type == AVMEDIA_TYPE_AUDIO)
cond	35:16	35:30	7	link -> type == AVMEDIA_TYPE_AUDIO
water	35:16	0:0	8	link
op	35:20	0:0	8	->
water	35:22	0:0	8	type
op	35:27	0:0	8	==
water	35:30	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	35:50	42:12	7	
water	35:50	0:0	8	{
if	36:16	41:42	8	(link -> in_samplerates != link -> out_samplerates && link -> in_samplerates && link -> out_samplerates)
cond	36:20	37:53	9	link -> in_samplerates != link -> out_samplerates && link -> in_samplerates && link -> out_samplerates
water	36:20	0:0	10	link
op	36:24	0:0	10	->
water	36:26	0:0	10	in_samplerates
op	36:41	0:0	10	!=
water	36:44	0:0	10	link
op	36:48	0:0	10	->
water	36:50	0:0	10	out_samplerates
op	37:20	0:0	10	&&
water	37:23	0:0	10	link
op	37:27	0:0	10	->
water	37:29	0:0	10	in_samplerates
op	37:44	0:0	10	&&
water	37:47	0:0	10	link
op	37:51	0:0	10	->
water	37:53	0:0	10	out_samplerates
stmts	38:20	41:42	9	
if	38:20	41:42	10	(!can_merge_formats (link -> in_samplerates ,link -> out_samplerates ,0 ,1 ))
cond	38:24	40:47	11	!can_merge_formats (link -> in_samplerates ,link -> out_samplerates ,0 ,1 )
op	38:24	0:0	12	!
call	38:25	40:47	12	can_merge_formats
arg	38:43	38:63	13	link->in_samplerates
water	38:43	0:0	14	link
op	38:47	0:0	14	->
water	38:49	0:0	14	in_samplerates
arg	39:43	39:64	13	link->out_samplerates
water	39:43	0:0	14	link
op	39:47	0:0	14	->
water	39:49	0:0	14	out_samplerates
arg	40:43	40:44	13	0
water	40:43	0:0	14	0
arg	40:46	40:47	13	1
water	40:46	0:0	14	1
stmts	41:24	41:42	11	
water	41:24	0:0	12	convert_needed
op	41:39	0:0	12	=
water	41:41	0:0	12	1
water	41:42	0:0	12	;
water	42:12	0:0	8	}
water	44:12	0:0	6	if
water	44:15	0:0	6	(
op	44:16	0:0	6	!
water	44:17	0:0	6	(
water	44:18	0:0	6	link
op	44:22	0:0	6	->
water	44:24	0:0	6	in_
water	45:16	0:0	6	count_delayed
op	45:29	0:0	6	++
water	45:31	0:0	6	;
water	46:12	0:0	6	}
else	46:14	47:38	4
stmts	46:19	47:38	5	
water	46:19	0:0	6	if
water	46:22	0:0	6	(
water	46:23	0:0	6	link
op	46:27	0:0	6	->
water	46:29	0:0	6	in_
water	47:16	0:0	6	count_already_merged
op	47:36	0:0	6	++
water	47:38	0:0	6	;
water	48:12	0:0	4	}
else	48:14	51:12	2
stmts	48:19	51:12	3	
if	48:19	51:12	4	(! convert_needed)
cond	48:23	48:24	5	! convert_needed
op	48:23	0:0	6	!
water	48:24	0:0	6	convert_needed
stmts	48:40	51:12	5	
water	48:40	0:0	6	{
water	49:16	0:0	6	count_merged
op	49:28	0:0	6	++
water	49:30	0:0	6	;
water	50:16	0:0	6	statement
water	51:12	0:0	6	}
if	52:12	63:12	2	(link -> type == AVMEDIA_TYPE_AUDIO)
cond	52:16	52:30	3	link -> type == AVMEDIA_TYPE_AUDIO
water	52:16	0:0	4	link
op	52:20	0:0	4	->
water	52:22	0:0	4	type
op	52:27	0:0	4	==
water	52:30	0:0	4	AVMEDIA_TYPE_AUDIO
stmts	52:50	63:12	3	
water	52:50	0:0	4	{
water	53:16	0:0	4	MERGE_DISPATCH
water	53:30	0:0	4	(
water	53:31	0:0	4	channel_layouts
water	53:46	0:0	4	,
water	54:20	0:0	4	if
water	54:23	0:0	4	(
op	54:24	0:0	4	!
call	54:25	55:75	4	ff_merge_channel_layouts
arg	54:50	54:74	5	link->in_channel_layouts
water	54:50	0:0	6	link
op	54:54	0:0	6	->
water	54:56	0:0	6	in_channel_layouts
arg	55:50	55:75	5	link->out_channel_layouts
water	55:50	0:0	6	link
op	55:54	0:0	6	->
water	55:56	0:0	6	out_channel_layouts
water	55:76	0:0	4	)
water	56:24	0:0	4	convert_needed
op	56:39	0:0	4	=
water	56:41	0:0	4	1
water	56:42	0:0	4	;
water	57:16	0:0	4	)
water	58:16	0:0	4	MERGE_DISPATCH
water	58:30	0:0	4	(
water	58:31	0:0	4	samplerates
water	58:42	0:0	4	,
water	59:20	0:0	4	if
water	59:23	0:0	4	(
op	59:24	0:0	4	!
call	59:25	60:67	4	ff_merge_samplerates
arg	59:46	59:66	5	link->in_samplerates
water	59:46	0:0	6	link
op	59:50	0:0	6	->
water	59:52	0:0	6	in_samplerates
arg	60:46	60:67	5	link->out_samplerates
water	60:46	0:0	6	link
op	60:50	0:0	6	->
water	60:52	0:0	6	out_samplerates
water	60:68	0:0	4	)
water	61:24	0:0	4	convert_needed
op	61:39	0:0	4	=
water	61:41	0:0	4	1
water	61:42	0:0	4	;
water	62:16	0:0	4	)
water	63:12	0:0	4	}
water	64:12	0:0	2	MERGE_DISPATCH
water	64:26	0:0	2	(
water	64:27	0:0	2	formats
water	64:34	0:0	2	,
water	65:16	0:0	2	if
water	65:19	0:0	2	(
op	65:20	0:0	2	!
call	65:21	66:48	2	ff_merge_formats
arg	65:38	65:54	3	link->in_formats
water	65:38	0:0	4	link
op	65:42	0:0	4	->
water	65:44	0:0	4	in_formats
arg	65:56	65:73	3	link->out_formats
water	65:56	0:0	4	link
op	65:60	0:0	4	->
water	65:62	0:0	4	out_formats
arg	66:38	66:48	3	link->type
water	66:38	0:0	4	link
op	66:42	0:0	4	->
water	66:44	0:0	4	type
water	66:49	0:0	2	)
water	67:20	0:0	2	convert_needed
op	67:35	0:0	2	=
water	67:37	0:0	2	1
water	67:38	0:0	2	;
water	68:12	0:0	2	)
if	70:12	152:12	2	(convert_needed)
cond	70:16	70:16	3	convert_needed
water	70:16	0:0	4	convert_needed
stmts	70:32	152:12	3	
water	70:32	0:0	4	{
decl	71:16	71:40	4	AVFilterContext	*convert
decl	72:16	72:32	4	AVFilter	*filter
decl	73:16	73:46	4	AVFilterLink	*inlink
water	73:36	0:0	4	,
decl	73:16	73:46	4	AVFilterLink	*outlink
decl	74:16	74:36	4	char	scale_args[256]
decl	75:16	75:34	4	char	inst_name[30]
switch	77:16	110:16	4	(link -> type)
cond	77:24	77:30	5	link -> type
water	77:24	0:0	6	link
op	77:28	0:0	6	->
water	77:30	0:0	6	type
stmts	77:36	110:16	5	
water	77:36	0:0	6	{
label	78:16	78:39	6	case AVMEDIA_TYPE_VIDEO :
if	79:20	83:20	6	(! ( filter =avfilter_get_by_name ("scale" ) ))
cond	79:24	79:64	7	! ( filter =avfilter_get_by_name ("scale" ) )
op	79:24	0:0	8	!
water	79:25	0:0	8	(
water	79:26	0:0	8	filter
op	79:33	0:0	8	=
call	79:35	79:63	8	avfilter_get_by_name
arg	79:56	79:63	9	"scale"
water	79:56	0:0	10	"scale"
water	79:64	0:0	8	)
stmts	79:67	83:20	7	
water	79:67	0:0	8	{
call	80:24	81:77	8	av_log
arg	80:31	80:38	9	log_ctx
water	80:31	0:0	10	log_ctx
arg	80:40	80:52	9	AV_LOG_ERROR
water	80:40	0:0	10	AV_LOG_ERROR
arg	80:54	81:77	9	"'scale' filter ""not present, cannot convert pixel formats.\n"
water	80:54	0:0	10	"'scale' filter "
water	81:31	0:0	10	"not present, cannot convert pixel formats.\n"
water	81:78	0:0	8	;
return	82:24	82:46	8	AVERROR(EINVAL)
call	82:31	82:45	9	AVERROR
arg	82:39	82:45	10	EINVAL
water	82:39	0:0	11	EINVAL
water	83:20	0:0	8	}
call	84:20	85:43	6	snprintf
arg	84:29	84:38	7	inst_name
water	84:29	0:0	8	inst_name
arg	84:40	84:57	7	sizeof(inst_name)
op	84:40	0:0	8	sizeof
water	84:46	0:0	8	(
water	84:47	0:0	8	inst_name
water	84:56	0:0	8	)
arg	84:59	84:84	7	"auto-inserted scaler %d"
water	84:59	0:0	8	"auto-inserted scaler %d"
arg	85:29	85:43	7	scaler_count++
water	85:29	0:0	8	scaler_count
op	85:41	0:0	8	++
water	85:44	0:0	6	;
if	86:20	89:34	6	(( ret =avfilter_graph_create_filter (& convert ,filter ,inst_name ,graph -> scale_sws_opts ,NULL ,graph ) ) < 0)
cond	86:24	88:70	7	( ret =avfilter_graph_create_filter (& convert ,filter ,inst_name ,graph -> scale_sws_opts ,NULL ,graph ) ) < 0
water	86:24	0:0	8	(
water	86:25	0:0	8	ret
op	86:29	0:0	8	=
call	86:31	88:65	8	avfilter_graph_create_filter
arg	86:60	86:68	9	&convert
op	86:60	0:0	10	&
water	86:61	0:0	10	convert
arg	86:70	86:76	9	filter
water	86:70	0:0	10	filter
arg	87:60	87:69	9	inst_name
water	87:60	0:0	10	inst_name
arg	87:71	87:92	9	graph->scale_sws_opts
water	87:71	0:0	10	graph
op	87:76	0:0	10	->
water	87:78	0:0	10	scale_sws_opts
arg	87:94	87:98	9	NULL
water	87:94	0:0	10	NULL
arg	88:60	88:65	9	graph
water	88:60	0:0	10	graph
water	88:66	0:0	8	)
op	88:68	0:0	8	<
water	88:70	0:0	8	0
stmts	89:24	89:34	7	
return	89:24	89:34	8	ret
water	89:31	0:0	9	ret
break	90:20	90:25	6	
label	91:16	91:39	6	case AVMEDIA_TYPE_AUDIO :
if	92:20	96:20	6	(! ( filter =avfilter_get_by_name ("aresample" ) ))
cond	92:24	92:68	7	! ( filter =avfilter_get_by_name ("aresample" ) )
op	92:24	0:0	8	!
water	92:25	0:0	8	(
water	92:26	0:0	8	filter
op	92:33	0:0	8	=
call	92:35	92:67	8	avfilter_get_by_name
arg	92:56	92:67	9	"aresample"
water	92:56	0:0	10	"aresample"
water	92:68	0:0	8	)
stmts	92:71	96:20	7	
water	92:71	0:0	8	{
call	93:24	94:77	8	av_log
arg	93:31	93:38	9	log_ctx
water	93:31	0:0	10	log_ctx
arg	93:40	93:52	9	AV_LOG_ERROR
water	93:40	0:0	10	AV_LOG_ERROR
arg	93:54	94:77	9	"'aresample' filter ""not present, cannot convert audio formats.\n"
water	93:54	0:0	10	"'aresample' filter "
water	94:31	0:0	10	"not present, cannot convert audio formats.\n"
water	94:78	0:0	8	;
return	95:24	95:46	8	AVERROR(EINVAL)
call	95:31	95:45	9	AVERROR
arg	95:39	95:45	10	EINVAL
water	95:39	0:0	11	EINVAL
water	96:20	0:0	8	}
call	97:20	98:46	6	snprintf
arg	97:29	97:38	7	inst_name
water	97:29	0:0	8	inst_name
arg	97:40	97:57	7	sizeof(inst_name)
op	97:40	0:0	8	sizeof
water	97:46	0:0	8	(
water	97:47	0:0	8	inst_name
water	97:56	0:0	8	)
arg	97:59	97:87	7	"auto-inserted resampler %d"
water	97:59	0:0	8	"auto-inserted resampler %d"
arg	98:29	98:46	7	resampler_count++
water	98:29	0:0	8	resampler_count
op	98:44	0:0	8	++
water	98:47	0:0	6	;
water	99:20	0:0	6	scale_args
op	99:30	0:0	6	[
water	99:31	0:0	6	0
op	99:32	0:0	6	]
op	99:34	0:0	6	=
water	99:36	0:0	6	'\0'
water	99:40	0:0	6	;
if	100:20	102:59	6	(graph -> aresample_swr_opts)
cond	100:24	100:31	7	graph -> aresample_swr_opts
water	100:24	0:0	8	graph
op	100:29	0:0	8	->
water	100:31	0:0	8	aresample_swr_opts
stmts	101:24	102:59	7	
call	101:24	102:58	8	snprintf
arg	101:33	101:43	9	scale_args
water	101:33	0:0	10	scale_args
arg	101:45	101:63	9	sizeof(scale_args)
op	101:45	0:0	10	sizeof
water	101:51	0:0	10	(
water	101:52	0:0	10	scale_args
water	101:62	0:0	10	)
arg	101:65	101:69	9	"%s"
water	101:65	0:0	10	"%s"
arg	102:33	102:58	9	graph->aresample_swr_opts
water	102:33	0:0	10	graph
op	102:38	0:0	10	->
water	102:40	0:0	10	aresample_swr_opts
water	102:59	0:0	8	;
if	103:20	106:34	6	(( ret =avfilter_graph_create_filter (& convert ,filter ,inst_name ,graph -> aresample_swr_opts ,NULL ,graph ) ) < 0)
cond	103:24	105:76	7	( ret =avfilter_graph_create_filter (& convert ,filter ,inst_name ,graph -> aresample_swr_opts ,NULL ,graph ) ) < 0
water	103:24	0:0	8	(
water	103:25	0:0	8	ret
op	103:29	0:0	8	=
call	103:31	105:71	8	avfilter_graph_create_filter
arg	103:60	103:68	9	&convert
op	103:60	0:0	10	&
water	103:61	0:0	10	convert
arg	103:70	103:76	9	filter
water	103:70	0:0	10	filter
arg	104:60	104:69	9	inst_name
water	104:60	0:0	10	inst_name
arg	104:71	104:96	9	graph->aresample_swr_opts
water	104:71	0:0	10	graph
op	104:76	0:0	10	->
water	104:78	0:0	10	aresample_swr_opts
arg	105:60	105:64	9	NULL
water	105:60	0:0	10	NULL
arg	105:66	105:71	9	graph
water	105:66	0:0	10	graph
water	105:72	0:0	8	)
op	105:74	0:0	8	<
water	105:76	0:0	8	0
stmts	106:24	106:34	7	
return	106:24	106:34	8	ret
water	106:31	0:0	9	ret
break	107:20	107:25	6	
label	108:16	108:23	6	default :
return	109:20	109:42	6	AVERROR(EINVAL)
call	109:27	109:41	7	AVERROR
arg	109:35	109:41	8	EINVAL
water	109:35	0:0	9	EINVAL
water	110:16	0:0	6	}
if	111:16	112:30	4	(( ret =avfilter_insert_filter (link ,convert ,0 ,0 ) ) < 0)
cond	111:20	111:74	5	( ret =avfilter_insert_filter (link ,convert ,0 ,0 ) ) < 0
water	111:20	0:0	6	(
water	111:21	0:0	6	ret
op	111:25	0:0	6	=
call	111:27	111:69	6	avfilter_insert_filter
arg	111:50	111:54	7	link
water	111:50	0:0	8	link
arg	111:56	111:63	7	convert
water	111:56	0:0	8	convert
arg	111:65	111:66	7	0
water	111:65	0:0	8	0
arg	111:68	111:69	7	0
water	111:68	0:0	8	0
water	111:70	0:0	6	)
op	111:72	0:0	6	<
water	111:74	0:0	6	0
stmts	112:20	112:30	5	
return	112:20	112:30	6	ret
water	112:27	0:0	7	ret
if	113:16	114:30	4	(( ret =filter_query_formats (convert ) ) < 0)
cond	113:20	113:60	5	( ret =filter_query_formats (convert ) ) < 0
water	113:20	0:0	6	(
water	113:21	0:0	6	ret
op	113:25	0:0	6	=
call	113:27	113:55	6	filter_query_formats
arg	113:48	113:55	7	convert
water	113:48	0:0	8	convert
water	113:56	0:0	6	)
op	113:58	0:0	6	<
water	113:60	0:0	6	0
stmts	114:20	114:30	5	
return	114:20	114:30	6	ret
water	114:27	0:0	7	ret
water	115:16	0:0	4	inlink
op	115:24	0:0	4	=
water	115:26	0:0	4	convert
op	115:33	0:0	4	->
water	115:35	0:0	4	inputs
op	115:41	0:0	4	[
water	115:42	0:0	4	0
op	115:43	0:0	4	]
water	115:44	0:0	4	;
water	116:16	0:0	4	outlink
op	116:24	0:0	4	=
water	116:26	0:0	4	convert
op	116:33	0:0	4	->
water	116:35	0:0	4	outputs
op	116:42	0:0	4	[
water	116:43	0:0	4	0
op	116:44	0:0	4	]
water	116:45	0:0	4	;
call	117:16	117:61	4	av_assert0
arg	117:28	117:61	5	inlink->in_formats->refcount>0
water	117:28	0:0	6	inlink
op	117:34	0:0	6	->
water	117:37	0:0	6	in_formats
op	117:47	0:0	6	->
water	117:49	0:0	6	refcount
op	117:58	0:0	6	>
water	117:60	0:0	6	0
water	117:62	0:0	4	;
call	118:16	118:61	4	av_assert0
arg	118:28	118:61	5	inlink->out_formats->refcount>0
water	118:28	0:0	6	inlink
op	118:34	0:0	6	->
water	118:36	0:0	6	out_formats
op	118:47	0:0	6	->
water	118:49	0:0	6	refcount
op	118:58	0:0	6	>
water	118:60	0:0	6	0
water	118:62	0:0	4	;
call	119:16	119:61	4	av_assert0
arg	119:27	119:61	5	outlink->in_formats->refcount>0
water	119:27	0:0	6	outlink
op	119:34	0:0	6	->
water	119:37	0:0	6	in_formats
op	119:47	0:0	6	->
water	119:49	0:0	6	refcount
op	119:58	0:0	6	>
water	119:60	0:0	6	0
water	119:62	0:0	4	;
call	120:16	120:61	4	av_assert0
arg	120:27	120:61	5	outlink->out_formats->refcount>0
water	120:27	0:0	6	outlink
op	120:34	0:0	6	->
water	120:36	0:0	6	out_formats
op	120:47	0:0	6	->
water	120:49	0:0	6	refcount
op	120:58	0:0	6	>
water	120:60	0:0	6	0
water	120:62	0:0	4	;
if	121:16	130:16	4	(outlink -> type == AVMEDIA_TYPE_AUDIO)
cond	121:20	121:37	5	outlink -> type == AVMEDIA_TYPE_AUDIO
water	121:20	0:0	6	outlink
op	121:27	0:0	6	->
water	121:29	0:0	6	type
op	121:34	0:0	6	==
water	121:37	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	121:57	130:16	5	
water	121:57	0:0	6	{
call	122:20	122:69	6	av_assert0
arg	122:32	122:69	7	inlink->in_samplerates->refcount>0
water	122:32	0:0	8	inlink
op	122:38	0:0	8	->
water	122:41	0:0	8	in_samplerates
op	122:55	0:0	8	->
water	122:57	0:0	8	refcount
op	122:66	0:0	8	>
water	122:68	0:0	8	0
water	122:70	0:0	6	;
call	123:20	123:69	6	av_assert0
arg	123:32	123:69	7	inlink->out_samplerates->refcount>0
water	123:32	0:0	8	inlink
op	123:38	0:0	8	->
water	123:40	0:0	8	out_samplerates
op	123:55	0:0	8	->
water	123:57	0:0	8	refcount
op	123:66	0:0	8	>
water	123:68	0:0	8	0
water	123:70	0:0	6	;
call	124:20	124:69	6	av_assert0
arg	124:31	124:69	7	outlink->in_samplerates->refcount>0
water	124:31	0:0	8	outlink
op	124:38	0:0	8	->
water	124:41	0:0	8	in_samplerates
op	124:55	0:0	8	->
water	124:57	0:0	8	refcount
op	124:66	0:0	8	>
water	124:68	0:0	8	0
water	124:70	0:0	6	;
call	125:20	125:69	6	av_assert0
arg	125:31	125:69	7	outlink->out_samplerates->refcount>0
water	125:31	0:0	8	outlink
op	125:38	0:0	8	->
water	125:40	0:0	8	out_samplerates
op	125:55	0:0	8	->
water	125:57	0:0	8	refcount
op	125:66	0:0	8	>
water	125:68	0:0	8	0
water	125:70	0:0	6	;
call	126:20	126:73	6	av_assert0
arg	126:32	126:73	7	inlink->in_channel_layouts->refcount>0
water	126:32	0:0	8	inlink
op	126:38	0:0	8	->
water	126:41	0:0	8	in_channel_layouts
op	126:59	0:0	8	->
water	126:61	0:0	8	refcount
op	126:70	0:0	8	>
water	126:72	0:0	8	0
water	126:74	0:0	6	;
call	127:20	127:73	6	av_assert0
arg	127:32	127:73	7	inlink->out_channel_layouts->refcount>0
water	127:32	0:0	8	inlink
op	127:38	0:0	8	->
water	127:40	0:0	8	out_channel_layouts
op	127:59	0:0	8	->
water	127:61	0:0	8	refcount
op	127:70	0:0	8	>
water	127:72	0:0	8	0
water	127:74	0:0	6	;
call	128:20	128:73	6	av_assert0
arg	128:31	128:73	7	outlink->in_channel_layouts->refcount>0
water	128:31	0:0	8	outlink
op	128:38	0:0	8	->
water	128:41	0:0	8	in_channel_layouts
op	128:59	0:0	8	->
water	128:61	0:0	8	refcount
op	128:70	0:0	8	>
water	128:72	0:0	8	0
water	128:74	0:0	6	;
call	129:20	129:73	6	av_assert0
arg	129:31	129:73	7	outlink->out_channel_layouts->refcount>0
water	129:31	0:0	8	outlink
op	129:38	0:0	8	->
water	129:40	0:0	8	out_channel_layouts
op	129:59	0:0	8	->
water	129:61	0:0	8	refcount
op	129:70	0:0	8	>
water	129:72	0:0	8	0
water	129:74	0:0	6	;
water	130:16	0:0	6	}
if	131:16	133:41	4	(!ff_merge_formats (inlink -> in_formats ,inlink -> out_formats ,inlink -> type ) || !ff_merge_formats (outlink -> in_formats ,outlink -> out_formats ,outlink -> type ))
cond	131:20	132:94	5	!ff_merge_formats (inlink -> in_formats ,inlink -> out_formats ,inlink -> type ) || !ff_merge_formats (outlink -> in_formats ,outlink -> out_formats ,outlink -> type )
op	131:20	0:0	6	!
call	131:21	131:94	6	ff_merge_formats
arg	131:39	131:57	7	inlink->in_formats
water	131:39	0:0	8	inlink
op	131:45	0:0	8	->
water	131:47	0:0	8	in_formats
arg	131:60	131:79	7	inlink->out_formats
water	131:60	0:0	8	inlink
op	131:66	0:0	8	->
water	131:68	0:0	8	out_formats
arg	131:82	131:94	7	inlink->type
water	131:82	0:0	8	inlink
op	131:88	0:0	8	->
water	131:90	0:0	8	type
op	131:96	0:0	6	||
op	132:20	0:0	6	!
call	132:21	132:94	6	ff_merge_formats
arg	132:38	132:57	7	outlink->in_formats
water	132:38	0:0	8	outlink
op	132:45	0:0	8	->
water	132:47	0:0	8	in_formats
arg	132:59	132:79	7	outlink->out_formats
water	132:59	0:0	8	outlink
op	132:66	0:0	8	->
water	132:68	0:0	8	out_formats
arg	132:81	132:94	7	outlink->type
water	132:81	0:0	8	outlink
op	132:88	0:0	8	->
water	132:90	0:0	8	type
stmts	133:20	133:41	5	
water	133:20	0:0	6	ret
op	133:24	0:0	6	=
call	133:26	133:40	6	AVERROR
arg	133:34	133:40	7	ENOSYS
water	133:34	0:0	8	ENOSYS
water	133:41	0:0	6	;
if	134:16	139:41	4	(inlink -> type == AVMEDIA_TYPE_AUDIO && ( !ff_merge_samplerates (inlink -> in_samplerates ,inlink -> out_samplerates ) || !ff_merge_channel_layouts (inlink -> in_channel_layouts ,inlink -> out_channel_layouts ) ))
cond	134:20	138:75	5	inlink -> type == AVMEDIA_TYPE_AUDIO && ( !ff_merge_samplerates (inlink -> in_samplerates ,inlink -> out_samplerates ) || !ff_merge_channel_layouts (inlink -> in_channel_layouts ,inlink -> out_channel_layouts ) )
water	134:20	0:0	6	inlink
op	134:26	0:0	6	->
water	134:28	0:0	6	type
op	134:33	0:0	6	==
water	134:36	0:0	6	AVMEDIA_TYPE_AUDIO
op	134:55	0:0	6	&&
water	135:20	0:0	6	(
op	135:21	0:0	6	!
call	135:22	136:66	6	ff_merge_samplerates
arg	135:43	135:65	7	inlink->in_samplerates
water	135:43	0:0	8	inlink
op	135:49	0:0	8	->
water	135:51	0:0	8	in_samplerates
arg	136:43	136:66	7	inlink->out_samplerates
water	136:43	0:0	8	inlink
op	136:49	0:0	8	->
water	136:51	0:0	8	out_samplerates
op	136:68	0:0	6	||
op	137:21	0:0	6	!
call	137:22	138:74	6	ff_merge_channel_layouts
arg	137:47	137:73	7	inlink->in_channel_layouts
water	137:47	0:0	8	inlink
op	137:53	0:0	8	->
water	137:55	0:0	8	in_channel_layouts
arg	138:47	138:74	7	inlink->out_channel_layouts
water	138:47	0:0	8	inlink
op	138:53	0:0	8	->
water	138:55	0:0	8	out_channel_layouts
water	138:75	0:0	6	)
stmts	139:20	139:41	5	
water	139:20	0:0	6	ret
op	139:24	0:0	6	=
call	139:26	139:40	6	AVERROR
arg	139:34	139:40	7	ENOSYS
water	139:34	0:0	8	ENOSYS
water	139:41	0:0	6	;
if	140:16	145:41	4	(outlink -> type == AVMEDIA_TYPE_AUDIO && ( !ff_merge_samplerates (outlink -> in_samplerates ,outlink -> out_samplerates ) || !ff_merge_channel_layouts (outlink -> in_channel_layouts ,outlink -> out_channel_layouts ) ))
cond	140:20	144:76	5	outlink -> type == AVMEDIA_TYPE_AUDIO && ( !ff_merge_samplerates (outlink -> in_samplerates ,outlink -> out_samplerates ) || !ff_merge_channel_layouts (outlink -> in_channel_layouts ,outlink -> out_channel_layouts ) )
water	140:20	0:0	6	outlink
op	140:27	0:0	6	->
water	140:29	0:0	6	type
op	140:34	0:0	6	==
water	140:37	0:0	6	AVMEDIA_TYPE_AUDIO
op	140:56	0:0	6	&&
water	141:20	0:0	6	(
op	141:21	0:0	6	!
call	141:22	142:67	6	ff_merge_samplerates
arg	141:43	141:66	7	outlink->in_samplerates
water	141:43	0:0	8	outlink
op	141:50	0:0	8	->
water	141:52	0:0	8	in_samplerates
arg	142:43	142:67	7	outlink->out_samplerates
water	142:43	0:0	8	outlink
op	142:50	0:0	8	->
water	142:52	0:0	8	out_samplerates
op	142:69	0:0	6	||
op	143:21	0:0	6	!
call	143:22	144:75	6	ff_merge_channel_layouts
arg	143:47	143:74	7	outlink->in_channel_layouts
water	143:47	0:0	8	outlink
op	143:54	0:0	8	->
water	143:56	0:0	8	in_channel_layouts
arg	144:47	144:75	7	outlink->out_channel_layouts
water	144:47	0:0	8	outlink
op	144:54	0:0	8	->
water	144:56	0:0	8	out_channel_layouts
water	144:76	0:0	6	)
stmts	145:20	145:41	5	
water	145:20	0:0	6	ret
op	145:24	0:0	6	=
call	145:26	145:40	6	AVERROR
arg	145:34	145:40	7	ENOSYS
water	145:34	0:0	8	ENOSYS
water	145:41	0:0	6	;
if	146:16	151:16	4	(ret < 0)
cond	146:20	146:26	5	ret < 0
water	146:20	0:0	6	ret
op	146:24	0:0	6	<
water	146:26	0:0	6	0
stmts	146:29	151:16	5	
water	146:29	0:0	6	{
call	147:20	149:89	6	av_log
arg	147:27	147:34	7	log_ctx
water	147:27	0:0	8	log_ctx
arg	147:36	147:48	7	AV_LOG_ERROR
water	147:36	0:0	8	AV_LOG_ERROR
arg	148:27	149:55	7	"Impossible to convert between the formats supported by the filter ""'%s' and the filter '%s'\n"
water	148:27	0:0	8	"Impossible to convert between the formats supported by the filter "
water	149:27	0:0	8	"'%s' and the filter '%s'\n"
arg	149:57	149:72	7	link->src->name
water	149:57	0:0	8	link
op	149:61	0:0	8	->
water	149:63	0:0	8	src
op	149:66	0:0	8	->
water	149:68	0:0	8	name
arg	149:74	149:89	7	link->dst->name
water	149:74	0:0	8	link
op	149:78	0:0	8	->
water	149:80	0:0	8	dst
op	149:83	0:0	8	->
water	149:85	0:0	8	name
water	149:90	0:0	6	;
return	150:20	150:30	6	ret
water	150:27	0:0	7	ret
water	151:16	0:0	6	}
water	152:12	0:0	4	}
decl	159:8	159:19	0	AVBPrint	bp
