func	1:0	38:0	0	static unsigned int	read_sbr_data
params	1:33	0:0	1	
param	1:34	1:48	2	AACContext *	ac
param	1:50	1:78	2	SpectralBandReplication *	sbr
param	2:34	2:51	2	GetBitContext *	gb
param	2:53	2:63	2	int	id_aac
stmnts	0:0	37:35	1	
decl	4:4	4:41	2	unsigned int	cnt
op	4:21	0:0	2	=
call	4:23	4:40	3	get_bits_count
arg	4:38	4:40	4	gb
water	4:38	0:0	5	gb
water	5:4	0:0	2	sbr
op	5:7	0:0	2	->
water	5:9	0:0	2	id_aac
op	5:16	0:0	2	=
water	5:18	0:0	2	id_aac
water	5:24	0:0	2	;
if	6:4	11:4	2	(id_aac == TYPE_SCE || id_aac == TYPE_CCE)
cond	6:8	6:40	3	id_aac == TYPE_SCE || id_aac == TYPE_CCE
water	6:8	0:0	4	id_aac
op	6:15	0:0	4	==
water	6:18	0:0	4	TYPE_SCE
op	6:27	0:0	4	||
water	6:30	0:0	4	id_aac
op	6:37	0:0	4	==
water	6:40	0:0	4	TYPE_CCE
stmts	6:50	11:4	3	
water	6:50	0:0	4	{
if	7:8	10:8	4	(read_sbr_single_channel_element (ac ,sbr ,gb ))
cond	7:12	7:55	5	read_sbr_single_channel_element (ac ,sbr ,gb )
call	7:12	7:55	6	read_sbr_single_channel_element
arg	7:44	7:46	7	ac
water	7:44	0:0	8	ac
arg	7:48	7:51	7	sbr
water	7:48	0:0	8	sbr
arg	7:53	7:55	7	gb
water	7:53	0:0	8	gb
stmts	7:58	10:8	5	
water	7:58	0:0	6	{
call	8:12	8:27	6	sbr_turnoff
arg	8:24	8:27	7	sbr
water	8:24	0:0	8	sbr
water	8:28	0:0	6	;
return	9:12	9:43	6	get_bits_count(gb)-cnt
call	9:19	9:36	7	get_bits_count
arg	9:34	9:36	8	gb
water	9:34	0:0	9	gb
op	9:38	0:0	7	-
water	9:40	0:0	7	cnt
water	10:8	0:0	6	}
water	11:4	0:0	4	}
else	11:6	16:4	2
stmts	11:11	16:4	3	
if	11:11	16:4	4	(id_aac == TYPE_CPE)
cond	11:15	11:25	5	id_aac == TYPE_CPE
water	11:15	0:0	6	id_aac
op	11:22	0:0	6	==
water	11:25	0:0	6	TYPE_CPE
stmts	11:35	16:4	5	
water	11:35	0:0	6	{
if	12:8	15:8	6	(read_sbr_channel_pair_element (ac ,sbr ,gb ))
cond	12:12	12:53	7	read_sbr_channel_pair_element (ac ,sbr ,gb )
call	12:12	12:53	8	read_sbr_channel_pair_element
arg	12:42	12:44	9	ac
water	12:42	0:0	10	ac
arg	12:46	12:49	9	sbr
water	12:46	0:0	10	sbr
arg	12:51	12:53	9	gb
water	12:51	0:0	10	gb
stmts	12:56	15:8	7	
water	12:56	0:0	8	{
call	13:12	13:27	8	sbr_turnoff
arg	13:24	13:27	9	sbr
water	13:24	0:0	10	sbr
water	13:28	0:0	8	;
return	14:12	14:43	8	get_bits_count(gb)-cnt
call	14:19	14:36	9	get_bits_count
arg	14:34	14:36	10	gb
water	14:34	0:0	11	gb
op	14:38	0:0	9	-
water	14:40	0:0	9	cnt
water	15:8	0:0	8	}
water	16:4	0:0	6	}
else	16:6	21:4	2
stmts	16:11	21:4	3	
water	16:11	0:0	4	{
call	17:8	18:79	4	av_log
arg	17:15	17:24	5	ac->avctx
water	17:15	0:0	6	ac
op	17:17	0:0	6	->
water	17:19	0:0	6	avctx
arg	17:26	17:38	5	AV_LOG_ERROR
water	17:26	0:0	6	AV_LOG_ERROR
arg	18:12	18:71	5	"Invalid bitstream - cannot apply SBR to element type %d\n"
water	18:12	0:0	6	"Invalid bitstream - cannot apply SBR to element type %d\n"
arg	18:73	18:79	5	id_aac
water	18:73	0:0	6	id_aac
water	18:80	0:0	4	;
call	19:8	19:23	4	sbr_turnoff
arg	19:20	19:23	5	sbr
water	19:20	0:0	6	sbr
water	19:24	0:0	4	;
return	20:8	20:39	4	get_bits_count(gb)-cnt
call	20:15	20:32	5	get_bits_count
arg	20:30	20:32	6	gb
water	20:30	0:0	7	gb
op	20:34	0:0	5	-
water	20:36	0:0	5	cnt
water	21:4	0:0	4	}
if	22:4	36:4	2	(get_bits1 (gb ))
cond	22:8	22:20	3	get_bits1 (gb )
call	22:8	22:20	4	get_bits1
arg	22:18	22:20	5	gb
water	22:18	0:0	6	gb
stmts	22:23	36:4	3	
water	22:23	0:0	4	{
decl	23:8	23:43	4	int	num_bits_left
op	23:26	0:0	4	=
call	23:28	23:42	5	get_bits
arg	23:37	23:39	6	gb
water	23:37	0:0	7	gb
arg	23:41	23:42	6	4
water	23:41	0:0	7	4
if	24:8	25:44	4	(num_bits_left == 15)
cond	24:12	24:29	5	num_bits_left == 15
water	24:12	0:0	6	num_bits_left
op	24:26	0:0	6	==
water	24:29	0:0	6	15
stmts	25:12	25:44	5	
water	25:12	0:0	6	num_bits_left
op	25:26	0:0	6	+=
call	25:29	25:43	6	get_bits
arg	25:38	25:40	7	gb
water	25:38	0:0	8	gb
arg	25:42	25:43	7	8
water	25:42	0:0	8	8
water	25:44	0:0	6	;
water	26:8	0:0	4	num_bits_left
op	26:22	0:0	4	<<=
water	26:26	0:0	4	3
water	26:27	0:0	4	;
while	27:8	30:8	4	(num_bits_left > 7)
cond	27:15	27:31	5	num_bits_left > 7
water	27:15	0:0	6	num_bits_left
op	27:29	0:0	6	>
water	27:31	0:0	6	7
stmts	27:34	30:8	5	
water	27:34	0:0	6	{
water	28:12	0:0	6	num_bits_left
op	28:26	0:0	6	-=
water	28:29	0:0	6	2
water	28:30	0:0	6	;
call	29:12	29:75	6	read_sbr_extension
arg	29:31	29:33	7	ac
water	29:31	0:0	8	ac
arg	29:35	29:38	7	sbr
water	29:35	0:0	8	sbr
arg	29:40	29:42	7	gb
water	29:40	0:0	8	gb
arg	29:44	29:59	7	get_bits(gb,2)
call	29:44	29:58	8	get_bits
arg	29:53	29:55	9	gb
water	29:53	0:0	10	gb
arg	29:57	29:58	9	2
water	29:57	0:0	10	2
arg	29:61	29:75	7	&num_bits_left
op	29:61	0:0	8	&
water	29:62	0:0	8	num_bits_left
water	29:76	0:0	6	;
water	30:8	0:0	6	}
if	31:8	33:8	4	(num_bits_left < 0)
cond	31:12	31:28	5	num_bits_left < 0
water	31:12	0:0	6	num_bits_left
op	31:26	0:0	6	<
water	31:28	0:0	6	0
stmts	31:31	33:8	5	
water	31:31	0:0	6	{
call	32:12	32:72	6	av_log
arg	32:19	32:28	7	ac->avctx
water	32:19	0:0	8	ac
op	32:21	0:0	8	->
water	32:23	0:0	8	avctx
arg	32:30	32:42	7	AV_LOG_ERROR
water	32:30	0:0	8	AV_LOG_ERROR
arg	32:44	32:72	7	"SBR Extension over read.\n"
water	32:44	0:0	8	"SBR Extension over read.\n"
water	32:73	0:0	6	;
water	33:8	0:0	6	}
if	34:8	35:40	4	(num_bits_left > 0)
cond	34:12	34:28	5	num_bits_left > 0
water	34:12	0:0	6	num_bits_left
op	34:26	0:0	6	>
water	34:28	0:0	6	0
stmts	35:12	35:40	5	
call	35:12	35:39	6	skip_bits
arg	35:22	35:24	7	gb
water	35:22	0:0	8	gb
arg	35:26	35:39	7	num_bits_left
water	35:26	0:0	8	num_bits_left
water	35:40	0:0	6	;
water	36:4	0:0	4	}
return	37:4	37:35	2	get_bits_count(gb)-cnt
call	37:11	37:28	3	get_bits_count
arg	37:26	37:28	4	gb
water	37:26	0:0	5	gb
op	37:30	0:0	3	-
water	37:32	0:0	3	cnt
