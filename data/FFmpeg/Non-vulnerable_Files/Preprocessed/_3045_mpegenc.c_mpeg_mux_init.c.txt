func	1:15	203:0	0	int	mpeg_mux_init
params	1:32	0:0	1	
param	1:33	1:53	2	AVFormatContext *	ctx
stmnts	0:0	202:26	1	
decl	3:4	3:38	2	MpegMuxContext	*s
op	3:22	0:0	2	=
water	3:24	0:0	2	ctx
op	3:27	0:0	2	->
water	3:29	0:0	2	priv_data
decl	4:4	4:79	2	int	bitrate
water	4:15	0:0	2	,
decl	4:4	4:79	2	int	i
water	4:18	0:0	2	,
decl	4:4	4:79	2	int	mpa_id
water	4:26	0:0	2	,
decl	4:4	4:79	2	int	mpv_id
water	4:34	0:0	2	,
decl	4:4	4:79	2	int	h264_id
water	4:43	0:0	2	,
decl	4:4	4:79	2	int	mps_id
water	4:51	0:0	2	,
decl	4:4	4:79	2	int	ac3_id
water	4:59	0:0	2	,
decl	4:4	4:79	2	int	dts_id
water	4:67	0:0	2	,
decl	4:4	4:79	2	int	lpcm_id
water	4:76	0:0	2	,
decl	4:4	4:79	2	int	j
decl	5:4	5:16	2	AVStream	*st
decl	6:4	6:22	2	StreamInfo	*stream
decl	7:4	7:21	2	int	audio_bitrate
decl	8:4	8:21	2	int	video_bitrate
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	packet_number
op	9:21	0:0	2	=
water	9:23	0:0	2	0
water	9:24	0:0	2	;
water	10:4	0:0	2	s
op	10:5	0:0	2	->
water	10:7	0:0	2	is_vcd
op	10:16	0:0	2	=
water	10:19	0:0	2	(
water	10:20	0:0	2	CONFIG_MPEG1VCD_MUXER
op	10:43	0:0	2	&&
water	10:46	0:0	2	ctx
op	10:49	0:0	2	->
water	10:51	0:0	2	oformat
op	10:59	0:0	2	==
op	10:62	0:0	2	&
water	10:63	0:0	2	ff_mpeg1vcd_muxer
water	10:80	0:0	2	)
water	10:81	0:0	2	;
water	11:4	0:0	2	s
op	11:5	0:0	2	->
water	11:7	0:0	2	is_svcd
op	11:16	0:0	2	=
water	11:19	0:0	2	(
water	11:20	0:0	2	CONFIG_MPEG2SVCD_MUXER
op	11:43	0:0	2	&&
water	11:46	0:0	2	ctx
op	11:49	0:0	2	->
water	11:51	0:0	2	oformat
op	11:59	0:0	2	==
op	11:62	0:0	2	&
water	11:63	0:0	2	ff_mpeg2svcd_muxer
water	11:81	0:0	2	)
water	11:82	0:0	2	;
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	is_mpeg2
op	12:16	0:0	2	=
water	12:18	0:0	2	(
water	12:19	0:0	2	(
water	12:20	0:0	2	CONFIG_MPEG2VOB_MUXER
op	12:43	0:0	2	&&
water	12:46	0:0	2	ctx
op	12:49	0:0	2	->
water	12:51	0:0	2	oformat
op	12:59	0:0	2	==
op	12:62	0:0	2	&
water	12:63	0:0	2	ff_mpeg2vob_muxer
water	12:80	0:0	2	)
op	12:82	0:0	2	||
water	13:19	0:0	2	(
water	13:20	0:0	2	CONFIG_MPEG2DVD_MUXER
op	13:43	0:0	2	&&
water	13:46	0:0	2	ctx
op	13:49	0:0	2	->
water	13:51	0:0	2	oformat
op	13:59	0:0	2	==
op	13:62	0:0	2	&
water	13:63	0:0	2	ff_mpeg2dvd_muxer
water	13:80	0:0	2	)
op	13:82	0:0	2	||
water	14:19	0:0	2	(
water	14:20	0:0	2	CONFIG_MPEG2SVCD_MUXER
op	14:43	0:0	2	&&
water	14:46	0:0	2	ctx
op	14:49	0:0	2	->
water	14:51	0:0	2	oformat
op	14:59	0:0	2	==
op	14:62	0:0	2	&
water	14:63	0:0	2	ff_mpeg2svcd_muxer
water	14:81	0:0	2	)
water	14:82	0:0	2	)
water	14:83	0:0	2	;
water	15:4	0:0	2	s
op	15:5	0:0	2	->
water	15:7	0:0	2	is_dvd
op	15:16	0:0	2	=
water	15:19	0:0	2	(
water	15:20	0:0	2	CONFIG_MPEG2DVD_MUXER
op	15:43	0:0	2	&&
water	15:46	0:0	2	ctx
op	15:49	0:0	2	->
water	15:51	0:0	2	oformat
op	15:59	0:0	2	==
op	15:62	0:0	2	&
water	15:63	0:0	2	ff_mpeg2dvd_muxer
water	15:80	0:0	2	)
water	15:81	0:0	2	;
if	16:4	23:4	2	(ctx -> packet_size)
cond	16:8	16:13	3	ctx -> packet_size
water	16:8	0:0	4	ctx
op	16:11	0:0	4	->
water	16:13	0:0	4	packet_size
stmts	16:26	23:4	3	
water	16:26	0:0	4	{
if	17:8	21:8	4	(ctx -> packet_size< 20 || ctx -> packet_size >(1 << 23 ) + 10)
cond	17:12	17:68	5	ctx -> packet_size< 20 || ctx -> packet_size >(1 << 23 ) + 10
call	17:12	17:64	6	ctx->packet_size
arg	17:57	17:64	7	1<<23
water	17:57	0:0	8	1
op	17:59	0:0	8	<<
water	17:62	0:0	8	23
op	17:66	0:0	6	+
water	17:68	0:0	6	10
stmts	17:72	21:8	5	
water	17:72	0:0	6	{
call	18:12	19:35	6	av_log
arg	18:19	18:22	7	ctx
water	18:19	0:0	8	ctx
arg	18:24	18:36	7	AV_LOG_ERROR
water	18:24	0:0	8	AV_LOG_ERROR
arg	18:38	18:64	7	"Invalid packet size %d\n"
water	18:38	0:0	8	"Invalid packet size %d\n"
arg	19:19	19:35	7	ctx->packet_size
water	19:19	0:0	8	ctx
op	19:22	0:0	8	->
water	19:24	0:0	8	packet_size
water	19:36	0:0	6	;
goto	20:12	20:21	6	fail
water	20:17	0:0	7	fail
water	21:8	0:0	6	}
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	packet_size
op	22:23	0:0	4	=
water	22:25	0:0	4	ctx
op	22:28	0:0	4	->
water	22:30	0:0	4	packet_size
water	22:41	0:0	4	;
water	23:4	0:0	4	}
else	23:6	24:29	2
stmts	24:8	24:29	3	
water	24:8	0:0	4	s
op	24:9	0:0	4	->
water	24:11	0:0	4	packet_size
op	24:23	0:0	4	=
water	24:25	0:0	4	2048
water	24:29	0:0	4	;
if	25:4	26:42	2	(ctx -> max_delay < 0)
cond	25:8	25:25	3	ctx -> max_delay < 0
water	25:8	0:0	4	ctx
op	25:11	0:0	4	->
water	25:13	0:0	4	max_delay
op	25:23	0:0	4	<
water	25:25	0:0	4	0
stmts	26:8	26:42	3	
water	26:8	0:0	4	ctx
op	26:11	0:0	4	->
water	26:13	0:0	4	max_delay
op	26:23	0:0	4	=
water	26:25	0:0	4	AV_TIME_BASE
op	26:37	0:0	4	*
water	26:38	0:0	4	7
op	26:39	0:0	4	/
water	26:40	0:0	4	10
water	26:42	0:0	4	;
water	27:4	0:0	2	s
op	27:5	0:0	2	->
water	27:7	0:0	2	vcd_padding_bytes_written
op	27:33	0:0	2	=
water	27:35	0:0	2	0
water	27:36	0:0	2	;
water	28:4	0:0	2	s
op	28:5	0:0	2	->
water	28:7	0:0	2	vcd_padding_bitrate_num
op	28:33	0:0	2	=
water	28:35	0:0	2	0
water	28:36	0:0	2	;
water	29:4	0:0	2	s
op	29:5	0:0	2	->
water	29:7	0:0	2	audio_bound
op	29:19	0:0	2	=
water	29:21	0:0	2	0
water	29:22	0:0	2	;
water	30:4	0:0	2	s
op	30:5	0:0	2	->
water	30:7	0:0	2	video_bound
op	30:19	0:0	2	=
water	30:21	0:0	2	0
water	30:22	0:0	2	;
water	31:4	0:0	2	mpa_id
op	31:12	0:0	2	=
water	31:14	0:0	2	AUDIO_ID
water	31:22	0:0	2	;
water	32:4	0:0	2	ac3_id
op	32:12	0:0	2	=
water	32:14	0:0	2	AC3_ID
water	32:20	0:0	2	;
water	33:4	0:0	2	dts_id
op	33:12	0:0	2	=
water	33:14	0:0	2	DTS_ID
water	33:20	0:0	2	;
water	34:4	0:0	2	mpv_id
op	34:12	0:0	2	=
water	34:14	0:0	2	VIDEO_ID
water	34:22	0:0	2	;
water	35:4	0:0	2	h264_id
op	35:12	0:0	2	=
water	35:14	0:0	2	H264_ID
water	35:21	0:0	2	;
water	36:4	0:0	2	mps_id
op	36:12	0:0	2	=
water	36:14	0:0	2	SUB_ID
water	36:20	0:0	2	;
water	37:4	0:0	2	lpcm_id
op	37:12	0:0	2	=
water	37:14	0:0	2	LPCM_ID
water	37:21	0:0	2	;
for	38:4	115:4	2	(i = 0 ;i < ctx -> nb_streams;i ++)
forinit	38:9	38:14	3	i = 0 ;
water	38:9	0:0	4	i
op	38:11	0:0	4	=
water	38:13	0:0	4	0
water	38:14	0:0	4	;
cond	38:16	38:25	3	i < ctx -> nb_streams
water	38:16	0:0	4	i
op	38:18	0:0	4	<
water	38:20	0:0	4	ctx
op	38:23	0:0	4	->
water	38:25	0:0	4	nb_streams
forexpr	38:37	38:38	3	i ++
water	38:37	0:0	4	i
op	38:38	0:0	4	++
stmts	38:42	115:4	3	
water	38:42	0:0	4	{
water	39:8	0:0	4	st
op	39:15	0:0	4	=
water	39:17	0:0	4	ctx
op	39:20	0:0	4	->
water	39:22	0:0	4	streams
op	39:29	0:0	4	[
water	39:30	0:0	4	i
op	39:31	0:0	4	]
water	39:32	0:0	4	;
water	40:8	0:0	4	stream
op	40:15	0:0	4	=
call	40:17	40:46	4	av_mallocz
arg	40:28	40:46	5	sizeof(StreamInfo)
op	40:28	0:0	6	sizeof
water	40:34	0:0	6	(
water	40:35	0:0	6	StreamInfo
water	40:45	0:0	6	)
water	40:47	0:0	4	;
if	41:8	42:21	4	(! stream)
cond	41:12	41:13	5	! stream
op	41:12	0:0	6	!
water	41:13	0:0	6	stream
stmts	42:12	42:21	5	
goto	42:12	42:21	6	fail
water	42:17	0:0	7	fail
water	43:8	0:0	4	st
op	43:10	0:0	4	->
water	43:12	0:0	4	priv_data
op	43:22	0:0	4	=
water	43:24	0:0	4	stream
water	43:30	0:0	4	;
call	44:8	44:44	4	avpriv_set_pts_info
arg	44:28	44:30	5	st
water	44:28	0:0	6	st
arg	44:32	44:34	5	64
water	44:32	0:0	6	64
arg	44:36	44:37	5	1
water	44:36	0:0	6	1
arg	44:39	44:44	5	90000
water	44:39	0:0	6	90000
water	44:45	0:0	4	;
switch	45:8	111:8	4	(st -> codec -> codec_type)
cond	45:16	45:27	5	st -> codec -> codec_type
water	45:16	0:0	6	st
op	45:18	0:0	6	->
water	45:20	0:0	6	codec
op	45:25	0:0	6	->
water	45:27	0:0	6	codec_type
stmts	45:39	111:8	5	
water	45:39	0:0	6	{
label	46:8	46:31	6	case AVMEDIA_TYPE_AUDIO :
if	47:12	55:62	6	(! s -> is_mpeg2 && ( st -> codec -> codec_id == AV_CODEC_ID_AC3 || st -> codec -> codec_id == AV_CODEC_ID_DTS || st -> codec -> codec_id == AV_CODEC_ID_PCM_S16BE ))
cond	47:16	50:61	7	! s -> is_mpeg2 && ( st -> codec -> codec_id == AV_CODEC_ID_AC3 || st -> codec -> codec_id == AV_CODEC_ID_DTS || st -> codec -> codec_id == AV_CODEC_ID_PCM_S16BE )
op	47:16	0:0	8	!
water	47:17	0:0	8	s
op	47:18	0:0	8	->
water	47:20	0:0	8	is_mpeg2
op	47:29	0:0	8	&&
water	48:16	0:0	8	(
water	48:17	0:0	8	st
op	48:19	0:0	8	->
water	48:21	0:0	8	codec
op	48:26	0:0	8	->
water	48:28	0:0	8	codec_id
op	48:37	0:0	8	==
water	48:40	0:0	8	AV_CODEC_ID_AC3
op	48:56	0:0	8	||
water	49:17	0:0	8	st
op	49:19	0:0	8	->
water	49:21	0:0	8	codec
op	49:26	0:0	8	->
water	49:28	0:0	8	codec_id
op	49:37	0:0	8	==
water	49:40	0:0	8	AV_CODEC_ID_DTS
op	49:56	0:0	8	||
water	50:17	0:0	8	st
op	50:19	0:0	8	->
water	50:21	0:0	8	codec
op	50:26	0:0	8	->
water	50:28	0:0	8	codec_id
op	50:37	0:0	8	==
water	50:40	0:0	8	AV_CODEC_ID_PCM_S16BE
water	50:61	0:0	8	)
stmts	51:17	55:62	7	
call	51:17	55:61	8	av_log
arg	51:24	51:27	9	ctx
water	51:24	0:0	10	ctx
arg	51:29	51:43	9	AV_LOG_WARNING
water	51:29	0:0	10	AV_LOG_WARNING
arg	52:24	54:61	9	"%s in MPEG-1 system streams is not widely supported, ""consider using the vob or the dvd muxer ""to force a MPEG-2 program stream.\n"
water	52:24	0:0	10	"%s in MPEG-1 system streams is not widely supported, "
water	53:24	0:0	10	"consider using the vob or the dvd muxer "
water	54:24	0:0	10	"to force a MPEG-2 program stream.\n"
arg	55:24	55:61	9	avcodec_get_name(st->codec->codec_id)
call	55:24	55:60	10	avcodec_get_name
arg	55:41	55:60	11	st->codec->codec_id
water	55:41	0:0	12	st
op	55:43	0:0	12	->
water	55:45	0:0	12	codec
op	55:50	0:0	12	->
water	55:52	0:0	12	codec_id
water	55:62	0:0	8	;
if	56:12	58:12	6	(st -> codec -> codec_id == AV_CODEC_ID_AC3)
cond	56:16	56:39	7	st -> codec -> codec_id == AV_CODEC_ID_AC3
water	56:16	0:0	8	st
op	56:18	0:0	8	->
water	56:20	0:0	8	codec
op	56:25	0:0	8	->
water	56:27	0:0	8	codec_id
op	56:36	0:0	8	==
water	56:39	0:0	8	AV_CODEC_ID_AC3
stmts	56:56	58:12	7	
water	56:56	0:0	8	{
water	57:16	0:0	8	stream
op	57:22	0:0	8	->
water	57:24	0:0	8	id
op	57:27	0:0	8	=
water	57:29	0:0	8	ac3_id
op	57:35	0:0	8	++
water	57:37	0:0	8	;
water	58:12	0:0	8	}
else	58:14	60:12	6
stmts	58:19	60:12	7	
if	58:19	60:12	8	(st -> codec -> codec_id == AV_CODEC_ID_DTS)
cond	58:23	58:46	9	st -> codec -> codec_id == AV_CODEC_ID_DTS
water	58:23	0:0	10	st
op	58:25	0:0	10	->
water	58:27	0:0	10	codec
op	58:32	0:0	10	->
water	58:34	0:0	10	codec_id
op	58:43	0:0	10	==
water	58:46	0:0	10	AV_CODEC_ID_DTS
stmts	58:63	60:12	9	
water	58:63	0:0	10	{
water	59:16	0:0	10	stream
op	59:22	0:0	10	->
water	59:24	0:0	10	id
op	59:27	0:0	10	=
water	59:29	0:0	10	dts_id
op	59:35	0:0	10	++
water	59:37	0:0	10	;
water	60:12	0:0	10	}
else	60:14	74:12	6
stmts	60:19	74:12	7	
if	60:19	74:12	8	(st -> codec -> codec_id == AV_CODEC_ID_PCM_S16BE)
cond	60:23	60:46	9	st -> codec -> codec_id == AV_CODEC_ID_PCM_S16BE
water	60:23	0:0	10	st
op	60:25	0:0	10	->
water	60:27	0:0	10	codec
op	60:32	0:0	10	->
water	60:34	0:0	10	codec_id
op	60:43	0:0	10	==
water	60:46	0:0	10	AV_CODEC_ID_PCM_S16BE
stmts	60:69	74:12	9	
water	60:69	0:0	10	{
water	61:16	0:0	10	stream
op	61:22	0:0	10	->
water	61:24	0:0	10	id
op	61:27	0:0	10	=
water	61:29	0:0	10	lpcm_id
op	61:36	0:0	10	++
water	61:38	0:0	10	;
for	62:16	65:16	10	(j = 0 ;j < 4;j ++)
forinit	62:21	62:26	11	j = 0 ;
water	62:21	0:0	12	j
op	62:23	0:0	12	=
water	62:25	0:0	12	0
water	62:26	0:0	12	;
cond	62:28	62:32	11	j < 4
water	62:28	0:0	12	j
op	62:30	0:0	12	<
water	62:32	0:0	12	4
forexpr	62:35	62:36	11	j ++
water	62:35	0:0	12	j
op	62:36	0:0	12	++
stmts	62:40	65:16	11	
water	62:40	0:0	12	{
if	63:20	64:29	12	(lpcm_freq_tab [ j ] == st -> codec -> sample_rate)
cond	63:24	63:55	13	lpcm_freq_tab [ j ] == st -> codec -> sample_rate
water	63:24	0:0	14	lpcm_freq_tab
op	63:37	0:0	14	[
water	63:38	0:0	14	j
op	63:39	0:0	14	]
op	63:41	0:0	14	==
water	63:44	0:0	14	st
op	63:46	0:0	14	->
water	63:48	0:0	14	codec
op	63:53	0:0	14	->
water	63:55	0:0	14	sample_rate
stmts	64:24	64:29	13	
break	64:24	64:29	14	
water	65:16	0:0	12	}
if	66:16	67:29	10	(j == 4)
cond	66:20	66:25	11	j == 4
water	66:20	0:0	12	j
op	66:22	0:0	12	==
water	66:25	0:0	12	4
stmts	67:20	67:29	11	
goto	67:20	67:29	12	fail
water	67:25	0:0	13	fail
if	68:16	69:29	10	(st -> codec -> channels > 8)
cond	68:20	68:42	11	st -> codec -> channels > 8
water	68:20	0:0	12	st
op	68:22	0:0	12	->
water	68:24	0:0	12	codec
op	68:29	0:0	12	->
water	68:31	0:0	12	channels
op	68:40	0:0	12	>
water	68:42	0:0	12	8
stmts	69:20	69:29	11	
return	69:20	69:29	12	-1
op	69:27	0:0	13	-
water	69:28	0:0	13	1
water	70:16	0:0	10	stream
op	70:22	0:0	10	->
water	70:24	0:0	10	lpcm_header
op	70:35	0:0	10	[
water	70:36	0:0	10	0
op	70:37	0:0	10	]
op	70:39	0:0	10	=
water	70:41	0:0	10	0
water	70:42	0:0	10	x0c
water	70:45	0:0	10	;
water	71:16	0:0	10	stream
op	71:22	0:0	10	->
water	71:24	0:0	10	lpcm_header
op	71:35	0:0	10	[
water	71:36	0:0	10	1
op	71:37	0:0	10	]
op	71:39	0:0	10	=
water	71:41	0:0	10	(
water	71:42	0:0	10	st
op	71:44	0:0	10	->
water	71:46	0:0	10	codec
op	71:51	0:0	10	->
water	71:53	0:0	10	channels
op	71:62	0:0	10	-
water	71:64	0:0	10	1
water	71:65	0:0	10	)
op	71:67	0:0	10	|
water	71:69	0:0	10	(
water	71:70	0:0	10	j
op	71:72	0:0	10	<<
water	71:75	0:0	10	4
water	71:76	0:0	10	)
water	71:77	0:0	10	;
water	72:16	0:0	10	stream
op	72:22	0:0	10	->
water	72:24	0:0	10	lpcm_header
op	72:35	0:0	10	[
water	72:36	0:0	10	2
op	72:37	0:0	10	]
op	72:39	0:0	10	=
water	72:41	0:0	10	0
water	72:42	0:0	10	x80
water	72:45	0:0	10	;
water	73:16	0:0	10	stream
op	73:22	0:0	10	->
water	73:24	0:0	10	lpcm_align
op	73:39	0:0	10	=
water	73:41	0:0	10	st
op	73:43	0:0	10	->
water	73:45	0:0	10	codec
op	73:50	0:0	10	->
water	73:52	0:0	10	channels
op	73:61	0:0	10	*
water	73:63	0:0	10	2
water	73:64	0:0	10	;
water	74:12	0:0	10	}
else	74:14	76:12	6
stmts	74:19	76:12	7	
water	74:19	0:0	8	{
water	75:16	0:0	8	stream
op	75:22	0:0	8	->
water	75:24	0:0	8	id
op	75:27	0:0	8	=
water	75:29	0:0	8	mpa_id
op	75:35	0:0	8	++
water	75:37	0:0	8	;
water	76:12	0:0	8	}
water	79:12	0:0	6	stream
op	79:18	0:0	6	->
water	79:20	0:0	6	max_buffer_size
op	79:36	0:0	6	=
water	79:38	0:0	6	4
op	79:40	0:0	6	*
water	79:42	0:0	6	1024
water	79:46	0:0	6	;
water	80:12	0:0	6	s
op	80:13	0:0	6	->
water	80:15	0:0	6	audio_bound
op	80:26	0:0	6	++
water	80:28	0:0	6	;
break	81:12	81:17	6	
label	82:8	82:31	6	case AVMEDIA_TYPE_VIDEO :
if	83:12	84:38	6	(st -> codec -> codec_id == AV_CODEC_ID_H264)
cond	83:16	83:39	7	st -> codec -> codec_id == AV_CODEC_ID_H264
water	83:16	0:0	8	st
op	83:18	0:0	8	->
water	83:20	0:0	8	codec
op	83:25	0:0	8	->
water	83:27	0:0	8	codec_id
op	83:36	0:0	8	==
water	83:39	0:0	8	AV_CODEC_ID_H264
stmts	84:16	84:38	7	
water	84:16	0:0	8	stream
op	84:22	0:0	8	->
water	84:24	0:0	8	id
op	84:27	0:0	8	=
water	84:29	0:0	8	h264_id
op	84:36	0:0	8	++
water	84:38	0:0	8	;
else	85:12	86:37	6
stmts	86:16	86:37	7	
water	86:16	0:0	8	stream
op	86:22	0:0	8	->
water	86:24	0:0	8	id
op	86:27	0:0	8	=
water	86:29	0:0	8	mpv_id
op	86:35	0:0	8	++
water	86:37	0:0	8	;
if	87:12	88:82	6	(st -> codec -> rc_buffer_size)
cond	87:16	87:27	7	st -> codec -> rc_buffer_size
water	87:16	0:0	8	st
op	87:18	0:0	8	->
water	87:20	0:0	8	codec
op	87:25	0:0	8	->
water	87:27	0:0	8	rc_buffer_size
stmts	88:16	88:82	7	
water	88:16	0:0	8	stream
op	88:22	0:0	8	->
water	88:24	0:0	8	max_buffer_size
op	88:40	0:0	8	=
water	88:42	0:0	8	6
op	88:44	0:0	8	*
water	88:46	0:0	8	1024
op	88:51	0:0	8	+
water	88:53	0:0	8	st
op	88:55	0:0	8	->
water	88:57	0:0	8	codec
op	88:62	0:0	8	->
water	88:64	0:0	8	rc_buffer_size
op	88:79	0:0	8	/
water	88:81	0:0	8	8
water	88:82	0:0	8	;
else	89:12	96:12	6
stmts	89:17	96:12	7	
water	89:17	0:0	8	{
call	90:16	93:93	8	av_log
arg	90:23	90:26	9	ctx
water	90:23	0:0	10	ctx
arg	90:28	90:42	9	AV_LOG_WARNING
water	90:28	0:0	10	AV_LOG_WARNING
arg	91:23	93:93	9	"VBV buffer size not set, using default size of 130KB\n""If you want the mpeg file to be compliant to some specification\n""Like DVD, VCD or others, make sure you set the correct buffer size\n"
water	91:23	0:0	10	"VBV buffer size not set, using default size of 130KB\n"
water	92:23	0:0	10	"If you want the mpeg file to be compliant to some specification\n"
water	93:23	0:0	10	"Like DVD, VCD or others, make sure you set the correct buffer size\n"
water	93:94	0:0	8	;
water	95:16	0:0	8	stream
op	95:22	0:0	8	->
water	95:24	0:0	8	max_buffer_size
op	95:40	0:0	8	=
water	95:42	0:0	8	230
op	95:46	0:0	8	*
water	95:48	0:0	8	1024
water	95:52	0:0	8	;
water	96:12	0:0	8	}
if	97:12	100:12	6	(stream -> max_buffer_size > 1024 * 8191)
cond	97:16	97:49	7	stream -> max_buffer_size > 1024 * 8191
water	97:16	0:0	8	stream
op	97:22	0:0	8	->
water	97:24	0:0	8	max_buffer_size
op	97:40	0:0	8	>
water	97:42	0:0	8	1024
op	97:47	0:0	8	*
water	97:49	0:0	8	8191
stmts	97:55	100:12	7	
water	97:55	0:0	8	{
call	98:16	98:98	8	av_log
arg	98:23	98:26	9	ctx
water	98:23	0:0	10	ctx
arg	98:28	98:42	9	AV_LOG_WARNING
water	98:28	0:0	10	AV_LOG_WARNING
arg	98:44	98:73	9	"buffer size %d, too large\n"
water	98:44	0:0	10	"buffer size %d, too large\n"
arg	98:75	98:98	9	stream->max_buffer_size
water	98:75	0:0	10	stream
op	98:81	0:0	10	->
water	98:83	0:0	10	max_buffer_size
water	98:99	0:0	8	;
water	99:16	0:0	8	stream
op	99:22	0:0	8	->
water	99:24	0:0	8	max_buffer_size
op	99:40	0:0	8	=
water	99:42	0:0	8	1024
op	99:47	0:0	8	*
water	99:49	0:0	8	8191
water	99:53	0:0	8	;
water	100:12	0:0	8	}
water	101:12	0:0	6	s
op	101:13	0:0	6	->
water	101:15	0:0	6	video_bound
op	101:26	0:0	6	++
water	101:28	0:0	6	;
break	102:12	102:17	6	
label	103:8	103:34	6	case AVMEDIA_TYPE_SUBTITLE :
water	104:12	0:0	6	stream
op	104:18	0:0	6	->
water	104:20	0:0	6	id
op	104:36	0:0	6	=
water	104:38	0:0	6	mps_id
op	104:44	0:0	6	++
water	104:46	0:0	6	;
water	105:12	0:0	6	stream
op	105:18	0:0	6	->
water	105:20	0:0	6	max_buffer_size
op	105:36	0:0	6	=
water	105:38	0:0	6	16
op	105:41	0:0	6	*
water	105:43	0:0	6	1024
water	105:47	0:0	6	;
break	106:12	106:17	6	
label	107:8	107:15	6	default :
call	108:12	109:69	6	av_log
arg	108:19	108:22	7	ctx
water	108:19	0:0	8	ctx
arg	108:24	108:36	7	AV_LOG_ERROR
water	108:24	0:0	8	AV_LOG_ERROR
arg	108:38	108:85	7	"Invalid media type %s for output stream #%d\n"
water	108:38	0:0	8	"Invalid media type %s for output stream #%d\n"
arg	109:19	109:66	7	av_get_media_type_string(st->codec->codec_type)
call	109:19	109:65	8	av_get_media_type_string
arg	109:44	109:65	9	st->codec->codec_type
water	109:44	0:0	10	st
op	109:46	0:0	10	->
water	109:48	0:0	10	codec
op	109:53	0:0	10	->
water	109:55	0:0	10	codec_type
arg	109:68	109:69	7	i
water	109:68	0:0	8	i
water	109:70	0:0	6	;
return	110:12	110:34	6	AVERROR(EINVAL)
call	110:19	110:33	7	AVERROR
arg	110:27	110:33	8	EINVAL
water	110:27	0:0	9	EINVAL
water	111:8	0:0	6	}
water	112:8	0:0	4	stream
op	112:14	0:0	4	->
water	112:16	0:0	4	fifo
op	112:21	0:0	4	=
call	112:23	112:39	4	av_fifo_alloc
arg	112:37	112:39	5	16
water	112:37	0:0	6	16
water	112:40	0:0	4	;
if	113:8	114:21	4	(! stream -> fifo)
cond	113:12	113:21	5	! stream -> fifo
op	113:12	0:0	6	!
water	113:13	0:0	6	stream
op	113:19	0:0	6	->
water	113:21	0:0	6	fifo
stmts	114:12	114:21	5	
goto	114:12	114:21	6	fail
water	114:17	0:0	7	fail
water	115:4	0:0	4	}
water	116:4	0:0	2	bitrate
op	116:18	0:0	2	=
water	116:20	0:0	2	0
water	116:21	0:0	2	;
water	117:4	0:0	2	audio_bitrate
op	117:18	0:0	2	=
water	117:20	0:0	2	0
water	117:21	0:0	2	;
water	118:4	0:0	2	video_bitrate
op	118:18	0:0	2	=
water	118:20	0:0	2	0
water	118:21	0:0	2	;
for	119:4	135:4	2	(i = 0 ;i < ctx -> nb_streams;i ++)
forinit	119:9	119:14	3	i = 0 ;
water	119:9	0:0	4	i
op	119:11	0:0	4	=
water	119:13	0:0	4	0
water	119:14	0:0	4	;
cond	119:16	119:25	3	i < ctx -> nb_streams
water	119:16	0:0	4	i
op	119:18	0:0	4	<
water	119:20	0:0	4	ctx
op	119:23	0:0	4	->
water	119:25	0:0	4	nb_streams
forexpr	119:37	119:38	3	i ++
water	119:37	0:0	4	i
op	119:38	0:0	4	++
stmts	119:42	135:4	3	
water	119:42	0:0	4	{
decl	120:8	120:22	4	int	codec_rate
water	121:8	0:0	4	st
op	121:15	0:0	4	=
water	121:17	0:0	4	ctx
op	121:20	0:0	4	->
water	121:22	0:0	4	streams
op	121:29	0:0	4	[
water	121:30	0:0	4	i
op	121:31	0:0	4	]
water	121:32	0:0	4	;
water	122:8	0:0	4	stream
op	122:15	0:0	4	=
water	122:17	0:0	4	(
water	122:18	0:0	4	StreamInfo
op	122:29	0:0	4	*
water	122:30	0:0	4	)
water	122:31	0:0	4	st
op	122:33	0:0	4	->
water	122:35	0:0	4	priv_data
water	122:44	0:0	4	;
if	123:8	125:47	4	(st -> codec -> rc_max_rate || st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	123:12	124:37	5	st -> codec -> rc_max_rate || st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	123:12	0:0	6	st
op	123:14	0:0	6	->
water	123:16	0:0	6	codec
op	123:21	0:0	6	->
water	123:23	0:0	6	rc_max_rate
op	123:35	0:0	6	||
water	124:12	0:0	6	st
op	124:14	0:0	6	->
water	124:16	0:0	6	codec
op	124:21	0:0	6	->
water	124:23	0:0	6	codec_type
op	124:34	0:0	6	==
water	124:37	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	125:12	125:47	5	
water	125:12	0:0	6	codec_rate
op	125:23	0:0	6	=
water	125:25	0:0	6	st
op	125:27	0:0	6	->
water	125:29	0:0	6	codec
op	125:34	0:0	6	->
water	125:36	0:0	6	rc_max_rate
water	125:47	0:0	6	;
else	126:8	127:44	4
stmts	127:12	127:44	5	
water	127:12	0:0	6	codec_rate
op	127:23	0:0	6	=
water	127:25	0:0	6	st
op	127:27	0:0	6	->
water	127:29	0:0	6	codec
op	127:34	0:0	6	->
water	127:36	0:0	6	bit_rate
water	127:44	0:0	6	;
if	128:8	129:61	4	(! codec_rate)
cond	128:12	128:13	5	! codec_rate
op	128:12	0:0	6	!
water	128:13	0:0	6	codec_rate
stmts	129:12	129:61	5	
water	129:12	0:0	6	codec_rate
op	129:23	0:0	6	=
water	129:25	0:0	6	(
water	129:26	0:0	6	1
op	129:28	0:0	6	<<
water	129:31	0:0	6	21
water	129:33	0:0	6	)
op	129:35	0:0	6	*
water	129:37	0:0	6	8
op	129:39	0:0	6	*
water	129:41	0:0	6	50
op	129:44	0:0	6	/
water	129:46	0:0	6	ctx
op	129:49	0:0	6	->
water	129:51	0:0	6	nb_streams
water	129:61	0:0	6	;
water	130:8	0:0	4	bitrate
op	130:16	0:0	4	+=
water	130:19	0:0	4	codec_rate
water	130:29	0:0	4	;
if	131:8	132:39	4	(( stream -> id & 0 xe0 ) == AUDIO_ID)
cond	131:12	131:35	5	( stream -> id & 0 xe0 ) == AUDIO_ID
water	131:12	0:0	6	(
water	131:13	0:0	6	stream
op	131:19	0:0	6	->
water	131:21	0:0	6	id
op	131:24	0:0	6	&
water	131:26	0:0	6	0
water	131:27	0:0	6	xe0
water	131:30	0:0	6	)
op	131:32	0:0	6	==
water	131:35	0:0	6	AUDIO_ID
stmts	132:12	132:39	5	
water	132:12	0:0	6	audio_bitrate
op	132:26	0:0	6	+=
water	132:29	0:0	6	codec_rate
water	132:39	0:0	6	;
else	133:8	134:39	4
stmts	133:13	134:39	5	
if	133:13	134:39	6	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	133:17	133:42	7	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	133:17	0:0	8	st
op	133:19	0:0	8	->
water	133:21	0:0	8	codec
op	133:26	0:0	8	->
water	133:28	0:0	8	codec_type
op	133:39	0:0	8	==
water	133:42	0:0	8	AVMEDIA_TYPE_VIDEO
stmts	134:12	134:39	7	
water	134:12	0:0	8	video_bitrate
op	134:26	0:0	8	+=
water	134:29	0:0	8	codec_rate
water	134:39	0:0	8	;
water	135:4	0:0	4	}
if	136:4	138:4	2	(s -> user_mux_rate)
cond	136:8	136:11	3	s -> user_mux_rate
water	136:8	0:0	4	s
op	136:9	0:0	4	->
water	136:11	0:0	4	user_mux_rate
stmts	136:26	138:4	3	
water	136:26	0:0	4	{
water	137:8	0:0	4	s
op	137:9	0:0	4	->
water	137:11	0:0	4	mux_rate
op	137:20	0:0	4	=
water	137:22	0:0	4	(
water	137:23	0:0	4	s
op	137:24	0:0	4	->
water	137:26	0:0	4	user_mux_rate
op	137:40	0:0	4	+
water	137:42	0:0	4	(
water	137:43	0:0	4	8
op	137:45	0:0	4	*
water	137:47	0:0	4	50
water	137:49	0:0	4	)
op	137:51	0:0	4	-
water	137:53	0:0	4	1
water	137:54	0:0	4	)
op	137:56	0:0	4	/
water	137:58	0:0	4	(
water	137:59	0:0	4	8
op	137:61	0:0	4	*
water	137:63	0:0	4	50
water	137:65	0:0	4	)
water	137:66	0:0	4	;
water	138:4	0:0	4	}
else	138:6	148:4	2
stmts	138:11	148:4	3	
water	138:11	0:0	4	{
water	141:8	0:0	4	bitrate
op	141:19	0:0	4	+=
water	141:22	0:0	4	bitrate
op	141:30	0:0	4	/
water	141:32	0:0	4	20
water	141:34	0:0	4	;
water	142:8	0:0	4	bitrate
op	142:19	0:0	4	+=
water	142:22	0:0	4	10000
water	142:27	0:0	4	;
water	143:8	0:0	4	s
op	143:9	0:0	4	->
water	143:11	0:0	4	mux_rate
op	143:20	0:0	4	=
water	143:22	0:0	4	(
water	143:23	0:0	4	bitrate
op	143:31	0:0	4	+
water	143:33	0:0	4	(
water	143:34	0:0	4	8
op	143:36	0:0	4	*
water	143:38	0:0	4	50
water	143:40	0:0	4	)
op	143:42	0:0	4	-
water	143:44	0:0	4	1
water	143:45	0:0	4	)
op	143:47	0:0	4	/
water	143:49	0:0	4	(
water	143:50	0:0	4	8
op	143:52	0:0	4	*
water	143:54	0:0	4	50
water	143:56	0:0	4	)
water	143:57	0:0	4	;
if	144:8	147:8	4	(s -> mux_rate >= ( 1 << 22 ))
cond	144:12	144:33	5	s -> mux_rate >= ( 1 << 22 )
water	144:12	0:0	6	s
op	144:13	0:0	6	->
water	144:15	0:0	6	mux_rate
op	144:24	0:0	6	>=
water	144:27	0:0	6	(
water	144:28	0:0	6	1
op	144:29	0:0	6	<<
water	144:31	0:0	6	22
water	144:33	0:0	6	)
stmts	144:36	147:8	5	
water	144:36	0:0	6	{
call	145:12	145:81	6	av_log
arg	145:19	145:22	7	ctx
water	145:19	0:0	8	ctx
arg	145:24	145:38	7	AV_LOG_WARNING
water	145:24	0:0	8	AV_LOG_WARNING
arg	145:40	145:68	7	"mux rate %d is too large\n"
water	145:40	0:0	8	"mux rate %d is too large\n"
arg	145:70	145:81	7	s->mux_rate
water	145:70	0:0	8	s
op	145:71	0:0	8	->
water	145:73	0:0	8	mux_rate
water	145:82	0:0	6	;
water	146:12	0:0	6	s
op	146:13	0:0	6	->
water	146:15	0:0	6	mux_rate
op	146:24	0:0	6	=
water	146:26	0:0	6	(
water	146:27	0:0	6	1
op	146:28	0:0	6	<<
water	146:30	0:0	6	22
water	146:32	0:0	6	)
op	146:34	0:0	6	-
water	146:36	0:0	6	1
water	146:37	0:0	6	;
water	147:8	0:0	6	}
water	148:4	0:0	4	}
if	149:4	172:4	2	(s -> is_vcd)
cond	149:8	149:11	3	s -> is_vcd
water	149:8	0:0	4	s
op	149:9	0:0	4	->
water	149:11	0:0	4	is_vcd
stmts	149:19	172:4	3	
water	149:19	0:0	4	{
decl	150:8	150:29	4	int64_t	overhead_rate
water	167:8	0:0	4	overhead_rate
op	167:23	0:0	4	=
water	167:25	0:0	4	audio_bitrate
op	167:39	0:0	4	*
water	167:41	0:0	4	2294
water	167:45	0:0	4	LL
op	167:48	0:0	4	*
water	167:50	0:0	4	(
water	167:51	0:0	4	2324
op	167:56	0:0	4	-
water	167:58	0:0	4	2279
water	167:62	0:0	4	)
water	167:63	0:0	4	;
water	168:8	0:0	4	overhead_rate
op	168:22	0:0	4	+=
water	168:25	0:0	4	video_bitrate
op	168:39	0:0	4	*
water	168:41	0:0	4	2279
water	168:45	0:0	4	LL
op	168:48	0:0	4	*
water	168:50	0:0	4	(
water	168:51	0:0	4	2324
op	168:56	0:0	4	-
water	168:58	0:0	4	2294
water	168:62	0:0	4	)
water	168:63	0:0	4	;
water	170:8	0:0	4	s
op	170:9	0:0	4	->
water	170:11	0:0	4	vcd_padding_bitrate_num
op	170:35	0:0	4	=
water	170:37	0:0	4	(
water	170:38	0:0	4	2324
water	170:42	0:0	4	LL
op	170:45	0:0	4	*
water	170:47	0:0	4	75
op	170:50	0:0	4	*
water	170:52	0:0	4	8
op	170:54	0:0	4	-
water	170:56	0:0	4	bitrate
water	170:63	0:0	4	)
op	170:65	0:0	4	*
water	170:67	0:0	4	2279
op	170:72	0:0	4	*
water	170:74	0:0	4	2294
op	170:79	0:0	4	-
water	170:81	0:0	4	overhead_rate
water	170:94	0:0	4	;
water	172:4	0:0	4	}
if	173:4	175:31	2	(s -> is_vcd || s -> is_mpeg2)
cond	173:8	173:24	3	s -> is_vcd || s -> is_mpeg2
water	173:8	0:0	4	s
op	173:9	0:0	4	->
water	173:11	0:0	4	is_vcd
op	173:18	0:0	4	||
water	173:21	0:0	4	s
op	173:22	0:0	4	->
water	173:24	0:0	4	is_mpeg2
stmts	175:8	175:31	3	
water	175:8	0:0	4	s
op	175:9	0:0	4	->
water	175:11	0:0	4	pack_header_freq
op	175:28	0:0	4	=
water	175:30	0:0	4	1
water	175:31	0:0	4	;
else	176:4	178:62	2
stmts	178:8	178:62	3	
water	178:8	0:0	4	s
op	178:9	0:0	4	->
water	178:11	0:0	4	pack_header_freq
op	178:28	0:0	4	=
water	178:30	0:0	4	2
op	178:32	0:0	4	*
water	178:34	0:0	4	bitrate
op	178:42	0:0	4	/
water	178:44	0:0	4	s
op	178:45	0:0	4	->
water	178:47	0:0	4	packet_size
op	178:59	0:0	4	/
water	178:61	0:0	4	8
water	178:62	0:0	4	;
if	180:4	181:31	2	(s -> pack_header_freq == 0)
cond	180:8	180:31	3	s -> pack_header_freq == 0
water	180:8	0:0	4	s
op	180:9	0:0	4	->
water	180:11	0:0	4	pack_header_freq
op	180:28	0:0	4	==
water	180:31	0:0	4	0
stmts	181:8	181:31	3	
water	181:8	0:0	4	s
op	181:9	0:0	4	->
water	181:11	0:0	4	pack_header_freq
op	181:28	0:0	4	=
water	181:30	0:0	4	1
water	181:31	0:0	4	;
if	182:4	184:56	2	(s -> is_mpeg2)
cond	182:8	182:11	3	s -> is_mpeg2
water	182:8	0:0	4	s
op	182:9	0:0	4	->
water	182:11	0:0	4	is_mpeg2
stmts	184:8	184:56	3	
water	184:8	0:0	4	s
op	184:9	0:0	4	->
water	184:11	0:0	4	system_header_freq
op	184:30	0:0	4	=
water	184:32	0:0	4	s
op	184:33	0:0	4	->
water	184:35	0:0	4	pack_header_freq
op	184:52	0:0	4	*
water	184:54	0:0	4	40
water	184:56	0:0	4	;
else	185:4	189:42	2
stmts	185:9	189:42	3	
if	185:9	189:42	4	(s -> is_vcd)
cond	185:13	185:16	5	s -> is_vcd
water	185:13	0:0	6	s
op	185:14	0:0	6	->
water	185:16	0:0	6	is_vcd
stmts	189:8	189:42	5	
water	189:8	0:0	6	s
op	189:9	0:0	6	->
water	189:11	0:0	6	system_header_freq
op	189:30	0:0	6	=
water	189:32	0:0	6	0
water	189:33	0:0	6	x7fffffff
water	189:42	0:0	6	;
else	190:4	191:55	2
stmts	191:8	191:55	3	
water	191:8	0:0	4	s
op	191:9	0:0	4	->
water	191:11	0:0	4	system_header_freq
op	191:30	0:0	4	=
water	191:32	0:0	4	s
op	191:33	0:0	4	->
water	191:35	0:0	4	pack_header_freq
op	191:52	0:0	4	*
water	191:54	0:0	4	5
water	191:55	0:0	4	;
for	192:4	195:4	2	(i = 0 ;i < ctx -> nb_streams;i ++)
forinit	192:9	192:14	3	i = 0 ;
water	192:9	0:0	4	i
op	192:11	0:0	4	=
water	192:13	0:0	4	0
water	192:14	0:0	4	;
cond	192:16	192:25	3	i < ctx -> nb_streams
water	192:16	0:0	4	i
op	192:18	0:0	4	<
water	192:20	0:0	4	ctx
op	192:23	0:0	4	->
water	192:25	0:0	4	nb_streams
forexpr	192:37	192:38	3	i ++
water	192:37	0:0	4	i
op	192:38	0:0	4	++
stmts	192:42	195:4	3	
water	192:42	0:0	4	{
water	193:8	0:0	4	stream
op	193:30	0:0	4	=
water	193:32	0:0	4	ctx
op	193:35	0:0	4	->
water	193:37	0:0	4	streams
op	193:44	0:0	4	[
water	193:45	0:0	4	i
op	193:46	0:0	4	]
op	193:47	0:0	4	->
water	193:49	0:0	4	priv_data
water	193:58	0:0	4	;
water	194:8	0:0	4	stream
op	194:14	0:0	4	->
water	194:16	0:0	4	packet_number
op	194:30	0:0	4	=
water	194:32	0:0	4	0
water	194:33	0:0	4	;
water	195:4	0:0	4	}
water	196:4	0:0	2	s
op	196:5	0:0	2	->
water	196:7	0:0	2	system_header_size
op	196:26	0:0	2	=
call	196:28	196:54	2	get_system_header_size
arg	196:51	196:54	3	ctx
water	196:51	0:0	4	ctx
water	196:55	0:0	2	;
water	197:4	0:0	2	s
op	197:5	0:0	2	->
water	197:7	0:0	2	last_scr
op	197:26	0:0	2	=
water	197:28	0:0	2	AV_NOPTS_VALUE
water	197:42	0:0	2	;
return	198:4	198:12	2	0
water	198:11	0:0	3	0
label	199:0	199:4	2	fail :
for	200:4	201:45	2	(i = 0 ;i < ctx -> nb_streams;i ++)
forinit	200:9	200:14	3	i = 0 ;
water	200:9	0:0	4	i
op	200:11	0:0	4	=
water	200:13	0:0	4	0
water	200:14	0:0	4	;
cond	200:16	200:25	3	i < ctx -> nb_streams
water	200:16	0:0	4	i
op	200:18	0:0	4	<
water	200:20	0:0	4	ctx
op	200:23	0:0	4	->
water	200:25	0:0	4	nb_streams
forexpr	200:37	200:38	3	i ++
water	200:37	0:0	4	i
op	200:38	0:0	4	++
stmts	201:8	201:45	3	
call	201:8	201:44	4	av_freep
arg	201:17	201:44	5	&ctx->streams[i]->priv_data
op	201:17	0:0	6	&
water	201:18	0:0	6	ctx
op	201:21	0:0	6	->
water	201:23	0:0	6	streams
op	201:30	0:0	6	[
water	201:31	0:0	6	i
op	201:32	0:0	6	]
op	201:33	0:0	6	->
water	201:35	0:0	6	priv_data
water	201:45	0:0	4	;
return	202:4	202:26	2	AVERROR(ENOMEM)
call	202:11	202:25	3	AVERROR
arg	202:19	202:25	4	ENOMEM
water	202:19	0:0	5	ENOMEM
