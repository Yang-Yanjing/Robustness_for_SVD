func	1:0	34:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:60	2	AVFrame *	frame
stmnts	0:0	33:42	1	
decl	3:4	3:9	2	int	k
decl	4:4	4:39	2	AVFilterContext	*ctx
op	4:26	0:0	2	=
water	4:28	0:0	2	inlink
op	4:34	0:0	2	->
water	4:36	0:0	2	dst
decl	5:4	5:43	2	AVFilterLink	*outlink
op	5:26	0:0	2	=
water	5:28	0:0	2	ctx
op	5:31	0:0	2	->
water	5:33	0:0	2	outputs
op	5:40	0:0	2	[
water	5:41	0:0	2	0
op	5:42	0:0	2	]
decl	6:4	6:36	2	DejudderContext	*s
op	6:25	0:0	2	=
water	6:27	0:0	2	ctx
op	6:30	0:0	2	->
water	6:32	0:0	2	priv
decl	7:4	7:39	2	int64_t	*judbuff
op	7:26	0:0	2	=
water	7:28	0:0	2	s
op	7:29	0:0	2	->
water	7:31	0:0	2	ringbuff
decl	8:4	8:38	2	int64_t	next_pts
op	8:26	0:0	2	=
water	8:28	0:0	2	frame
op	8:33	0:0	2	->
water	8:35	0:0	2	pts
decl	9:4	9:18	2	int64_t	offset
if	10:4	11:46	2	(next_pts == AV_NOPTS_VALUE)
cond	10:8	10:20	3	next_pts == AV_NOPTS_VALUE
water	10:8	0:0	4	next_pts
op	10:17	0:0	4	==
water	10:20	0:0	4	AV_NOPTS_VALUE
stmts	11:8	11:46	3	
return	11:8	11:46	4	ff_filter_frame(outlink,frame)
call	11:15	11:45	5	ff_filter_frame
arg	11:31	11:38	6	outlink
water	11:31	0:0	7	outlink
arg	11:40	11:45	6	frame
water	11:40	0:0	7	frame
if	12:4	15:4	2	(s -> start_count)
cond	12:8	12:11	3	s -> start_count
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	start_count
stmts	12:24	15:4	3	
water	12:24	0:0	4	{
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	start_count
op	13:22	0:0	4	--
water	13:24	0:0	4	;
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	new_pts
op	14:19	0:0	4	=
water	14:21	0:0	4	next_pts
op	14:30	0:0	4	*
water	14:32	0:0	4	2
op	14:34	0:0	4	*
water	14:36	0:0	4	s
op	14:37	0:0	4	->
water	14:39	0:0	4	cycle
water	14:44	0:0	4	;
water	15:4	0:0	4	}
else	15:6	23:4	2
stmts	15:11	23:4	3	
water	15:11	0:0	4	{
if	16:8	20:8	4	(next_pts < judbuff [ s -> i2 ])
cond	16:12	16:36	5	next_pts < judbuff [ s -> i2 ]
water	16:12	0:0	6	next_pts
op	16:21	0:0	6	<
water	16:23	0:0	6	judbuff
op	16:30	0:0	6	[
water	16:31	0:0	6	s
op	16:32	0:0	6	->
water	16:34	0:0	6	i2
op	16:36	0:0	6	]
stmts	16:39	20:8	5	
water	16:39	0:0	6	{
water	17:12	0:0	6	offset
op	17:19	0:0	6	=
water	17:21	0:0	6	next_pts
op	17:30	0:0	6	+
water	17:32	0:0	6	judbuff
op	17:39	0:0	6	[
water	17:40	0:0	6	s
op	17:41	0:0	6	->
water	17:43	0:0	6	i3
op	17:45	0:0	6	]
op	17:47	0:0	6	-
water	17:49	0:0	6	judbuff
op	17:56	0:0	6	[
water	17:57	0:0	6	s
op	17:58	0:0	6	->
water	17:60	0:0	6	i4
op	17:62	0:0	6	]
op	17:64	0:0	6	-
water	17:66	0:0	6	judbuff
op	17:73	0:0	6	[
water	17:74	0:0	6	s
op	17:75	0:0	6	->
water	17:77	0:0	6	i1
op	17:79	0:0	6	]
water	17:80	0:0	6	;
for	18:12	19:36	6	(k = 0 ;k < s -> cycle + 2;k ++)
forinit	18:17	18:22	7	k = 0 ;
water	18:17	0:0	8	k
op	18:19	0:0	8	=
water	18:21	0:0	8	0
water	18:22	0:0	8	;
cond	18:24	18:39	7	k < s -> cycle + 2
water	18:24	0:0	8	k
op	18:26	0:0	8	<
water	18:28	0:0	8	s
op	18:29	0:0	8	->
water	18:31	0:0	8	cycle
op	18:37	0:0	8	+
water	18:39	0:0	8	2
forexpr	18:42	18:43	7	k ++
water	18:42	0:0	8	k
op	18:43	0:0	8	++
stmts	19:16	19:36	7	
water	19:16	0:0	8	judbuff
op	19:23	0:0	8	[
water	19:24	0:0	8	k
op	19:25	0:0	8	]
op	19:27	0:0	8	+=
water	19:30	0:0	8	offset
water	19:36	0:0	8	;
water	20:8	0:0	6	}
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	new_pts
op	21:19	0:0	4	+=
water	21:22	0:0	4	(
water	21:23	0:0	4	s
op	21:24	0:0	4	->
water	21:26	0:0	4	cycle
op	21:32	0:0	4	-
water	21:34	0:0	4	1
water	21:35	0:0	4	)
op	21:37	0:0	4	*
water	21:39	0:0	4	(
water	21:40	0:0	4	judbuff
op	21:47	0:0	4	[
water	21:48	0:0	4	s
op	21:49	0:0	4	->
water	21:51	0:0	4	i3
op	21:53	0:0	4	]
op	21:55	0:0	4	-
water	21:57	0:0	4	judbuff
op	21:64	0:0	4	[
water	21:65	0:0	4	s
op	21:66	0:0	4	->
water	21:68	0:0	4	i1
op	21:70	0:0	4	]
water	21:71	0:0	4	)
op	22:20	0:0	4	+
water	22:22	0:0	4	(
water	22:23	0:0	4	s
op	22:24	0:0	4	->
water	22:26	0:0	4	cycle
op	22:32	0:0	4	+
water	22:34	0:0	4	1
water	22:35	0:0	4	)
op	22:37	0:0	4	*
water	22:39	0:0	4	(
water	22:40	0:0	4	next_pts
op	22:49	0:0	4	-
water	22:51	0:0	4	judbuff
op	22:58	0:0	4	[
water	22:59	0:0	4	s
op	22:60	0:0	4	->
water	22:62	0:0	4	i4
op	22:64	0:0	4	]
water	22:65	0:0	4	)
water	22:66	0:0	4	;
water	23:4	0:0	4	}
water	24:4	0:0	2	judbuff
op	24:11	0:0	2	[
water	24:12	0:0	2	s
op	24:13	0:0	2	->
water	24:15	0:0	2	i2
op	24:17	0:0	2	]
op	24:19	0:0	2	=
water	24:21	0:0	2	next_pts
water	24:29	0:0	2	;
water	25:4	0:0	2	s
op	25:5	0:0	2	->
water	25:7	0:0	2	i1
op	25:10	0:0	2	=
water	25:12	0:0	2	s
op	25:13	0:0	2	->
water	25:15	0:0	2	i2
water	25:17	0:0	2	;
water	26:4	0:0	2	s
op	26:5	0:0	2	->
water	26:7	0:0	2	i2
op	26:10	0:0	2	=
water	26:12	0:0	2	s
op	26:13	0:0	2	->
water	26:15	0:0	2	i3
water	26:17	0:0	2	;
water	27:4	0:0	2	s
op	27:5	0:0	2	->
water	27:7	0:0	2	i3
op	27:10	0:0	2	=
water	27:12	0:0	2	s
op	27:13	0:0	2	->
water	27:15	0:0	2	i4
water	27:17	0:0	2	;
water	28:4	0:0	2	s
op	28:5	0:0	2	->
water	28:7	0:0	2	i4
op	28:10	0:0	2	=
water	28:12	0:0	2	(
water	28:13	0:0	2	s
op	28:14	0:0	2	->
water	28:16	0:0	2	i4
op	28:19	0:0	2	+
water	28:21	0:0	2	1
water	28:22	0:0	2	)
op	28:24	0:0	2	%
water	28:26	0:0	2	(
water	28:27	0:0	2	s
op	28:28	0:0	2	->
water	28:30	0:0	2	cycle
op	28:36	0:0	2	+
water	28:38	0:0	2	2
water	28:39	0:0	2	)
water	28:40	0:0	2	;
water	29:4	0:0	2	frame
op	29:9	0:0	2	->
water	29:11	0:0	2	pts
op	29:15	0:0	2	=
water	29:17	0:0	2	s
op	29:18	0:0	2	->
water	29:20	0:0	2	new_pts
water	29:27	0:0	2	;
for	30:4	31:60	2	(k = 0 ;k < s -> cycle + 2;k ++)
forinit	30:9	30:14	3	k = 0 ;
water	30:9	0:0	4	k
op	30:11	0:0	4	=
water	30:13	0:0	4	0
water	30:14	0:0	4	;
cond	30:16	30:31	3	k < s -> cycle + 2
water	30:16	0:0	4	k
op	30:18	0:0	4	<
water	30:20	0:0	4	s
op	30:21	0:0	4	->
water	30:23	0:0	4	cycle
op	30:29	0:0	4	+
water	30:31	0:0	4	2
forexpr	30:34	30:35	3	k ++
water	30:34	0:0	4	k
op	30:35	0:0	4	++
stmts	31:8	31:60	3	
call	31:8	31:59	4	av_log
arg	31:15	31:18	5	ctx
water	31:15	0:0	6	ctx
arg	31:20	31:32	5	AV_LOG_DEBUG
water	31:20	0:0	6	AV_LOG_DEBUG
arg	31:34	31:47	5	"%"PRId64"\t"
water	31:34	0:0	6	"%"
water	31:37	0:0	6	PRId64
water	31:43	0:0	6	"\t"
arg	31:49	31:59	5	judbuff[k]
water	31:49	0:0	6	judbuff
op	31:56	0:0	6	[
water	31:57	0:0	6	k
op	31:58	0:0	6	]
water	31:60	0:0	4	;
call	32:4	32:85	2	av_log
arg	32:11	32:14	3	ctx
water	32:11	0:0	4	ctx
arg	32:16	32:28	3	AV_LOG_DEBUG
water	32:16	0:0	4	AV_LOG_DEBUG
arg	32:30	32:63	3	"next=%"PRId64", new=%"PRId64"\n"
water	32:30	0:0	4	"next=%"
water	32:38	0:0	4	PRId64
water	32:44	0:0	4	", new=%"
water	32:53	0:0	4	PRId64
water	32:59	0:0	4	"\n"
arg	32:65	32:73	3	next_pts
water	32:65	0:0	4	next_pts
arg	32:75	32:85	3	frame->pts
water	32:75	0:0	4	frame
op	32:80	0:0	4	->
water	32:82	0:0	4	pts
water	32:86	0:0	2	;
return	33:4	33:42	2	ff_filter_frame(outlink,frame)
call	33:11	33:41	3	ff_filter_frame
arg	33:27	33:34	4	outlink
water	33:27	0:0	5	outlink
arg	33:36	33:41	4	frame
water	33:36	0:0	5	frame
