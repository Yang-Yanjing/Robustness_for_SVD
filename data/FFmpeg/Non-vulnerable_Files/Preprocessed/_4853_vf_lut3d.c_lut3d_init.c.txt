func	2:15	44:0	0	int	lut3d_init
params	2:29	0:0	1	
param	2:30	2:50	2	AVFilterContext *	ctx
stmnts	0:0	43:14	1	
decl	4:4	4:11	2	int	ret
decl	5:4	5:11	2	FILE	*f
decl	6:4	6:19	2	const char	*ext
decl	7:4	7:35	2	LUT3DContext	*lut3d
op	7:24	0:0	2	=
water	7:26	0:0	2	ctx
op	7:29	0:0	2	->
water	7:31	0:0	2	priv
if	8:4	11:4	2	(! lut3d -> file)
cond	8:8	8:16	3	! lut3d -> file
op	8:8	0:0	4	!
water	8:9	0:0	4	lut3d
op	8:14	0:0	4	->
water	8:16	0:0	4	file
stmts	8:22	11:4	3	
water	8:22	0:0	4	{
call	9:8	9:37	4	set_identity_matrix
arg	9:28	9:33	5	lut3d
water	9:28	0:0	6	lut3d
arg	9:35	9:37	5	32
water	9:35	0:0	6	32
water	9:38	0:0	4	;
return	10:8	10:16	4	0
water	10:15	0:0	5	0
water	11:4	0:0	4	}
water	12:4	0:0	2	f
op	12:6	0:0	2	=
call	12:8	12:30	2	fopen
arg	12:14	12:25	3	lut3d->file
water	12:14	0:0	4	lut3d
op	12:19	0:0	4	->
water	12:21	0:0	4	file
arg	12:27	12:30	3	"r"
water	12:27	0:0	4	"r"
water	12:31	0:0	2	;
if	13:4	17:4	2	(! f)
cond	13:8	13:9	3	! f
op	13:8	0:0	4	!
water	13:9	0:0	4	f
stmts	13:12	17:4	3	
water	13:12	0:0	4	{
water	14:8	0:0	4	ret
op	14:12	0:0	4	=
call	14:14	14:27	4	AVERROR
arg	14:22	14:27	5	errno
water	14:22	0:0	6	errno
water	14:28	0:0	4	;
call	15:8	15:74	4	av_log
arg	15:15	15:18	5	ctx
water	15:15	0:0	6	ctx
arg	15:20	15:32	5	AV_LOG_ERROR
water	15:20	0:0	6	AV_LOG_ERROR
arg	15:34	15:44	5	"%s: %s\n"
water	15:34	0:0	6	"%s: %s\n"
arg	15:46	15:57	5	lut3d->file
water	15:46	0:0	6	lut3d
op	15:51	0:0	6	->
water	15:53	0:0	6	file
arg	15:59	15:74	5	av_err2str(ret)
call	15:59	15:73	6	av_err2str
arg	15:70	15:73	7	ret
water	15:70	0:0	8	ret
water	15:75	0:0	4	;
return	16:8	16:18	4	ret
water	16:15	0:0	5	ret
water	17:4	0:0	4	}
water	18:4	0:0	2	ext
op	18:8	0:0	2	=
call	18:10	18:34	2	strrchr
arg	18:18	18:29	3	lut3d->file
water	18:18	0:0	4	lut3d
op	18:23	0:0	4	->
water	18:25	0:0	4	file
arg	18:31	18:34	3	'.'
water	18:31	0:0	4	'.'
water	18:35	0:0	2	;
if	19:4	23:4	2	(! ext)
cond	19:8	19:9	3	! ext
op	19:8	0:0	4	!
water	19:9	0:0	4	ext
stmts	19:14	23:4	3	
water	19:14	0:0	4	{
call	20:8	20:83	4	av_log
arg	20:15	20:18	5	ctx
water	20:15	0:0	6	ctx
arg	20:20	20:32	5	AV_LOG_ERROR
water	20:20	0:0	6	AV_LOG_ERROR
arg	20:34	20:83	5	"Unable to guess the format from the extension\n"
water	20:34	0:0	6	"Unable to guess the format from the extension\n"
water	20:84	0:0	4	;
water	21:8	0:0	4	ret
op	21:12	0:0	4	=
water	21:14	0:0	4	AVERROR_INVALIDDATA
water	21:33	0:0	4	;
goto	22:8	22:16	4	end
water	22:13	0:0	5	end
water	23:4	0:0	4	}
water	24:4	0:0	2	ext
op	24:7	0:0	2	++
water	24:9	0:0	2	;
if	25:4	27:4	2	(!av_strcasecmp (ext ,"dat" ))
cond	25:8	25:33	3	!av_strcasecmp (ext ,"dat" )
op	25:8	0:0	4	!
call	25:9	25:33	4	av_strcasecmp
arg	25:23	25:26	5	ext
water	25:23	0:0	6	ext
arg	25:28	25:33	5	"dat"
water	25:28	0:0	6	"dat"
stmts	25:36	27:4	3	
water	25:36	0:0	4	{
water	26:8	0:0	4	ret
op	26:12	0:0	4	=
call	26:14	26:30	4	parse_dat
arg	26:24	26:27	5	ctx
water	26:24	0:0	6	ctx
arg	26:29	26:30	5	f
water	26:29	0:0	6	f
water	26:31	0:0	4	;
water	27:4	0:0	4	}
else	27:6	29:4	2
stmts	27:11	29:4	3	
if	27:11	29:4	4	(!av_strcasecmp (ext ,"3dl" ))
cond	27:15	27:40	5	!av_strcasecmp (ext ,"3dl" )
op	27:15	0:0	6	!
call	27:16	27:40	6	av_strcasecmp
arg	27:30	27:33	7	ext
water	27:30	0:0	8	ext
arg	27:35	27:40	7	"3dl"
water	27:35	0:0	8	"3dl"
stmts	27:43	29:4	5	
water	27:43	0:0	6	{
water	28:8	0:0	6	ret
op	28:12	0:0	6	=
call	28:14	28:30	6	parse_3dl
arg	28:24	28:27	7	ctx
water	28:24	0:0	8	ctx
arg	28:29	28:30	7	f
water	28:29	0:0	8	f
water	28:31	0:0	6	;
water	29:4	0:0	6	}
else	29:6	31:4	2
stmts	29:11	31:4	3	
if	29:11	31:4	4	(!av_strcasecmp (ext ,"cube" ))
cond	29:15	29:41	5	!av_strcasecmp (ext ,"cube" )
op	29:15	0:0	6	!
call	29:16	29:41	6	av_strcasecmp
arg	29:30	29:33	7	ext
water	29:30	0:0	8	ext
arg	29:35	29:41	7	"cube"
water	29:35	0:0	8	"cube"
stmts	29:44	31:4	5	
water	29:44	0:0	6	{
water	30:8	0:0	6	ret
op	30:12	0:0	6	=
call	30:14	30:31	6	parse_cube
arg	30:25	30:28	7	ctx
water	30:25	0:0	8	ctx
arg	30:30	30:31	7	f
water	30:30	0:0	8	f
water	30:32	0:0	6	;
water	31:4	0:0	6	}
else	31:6	33:4	2
stmts	31:11	33:4	3	
if	31:11	33:4	4	(!av_strcasecmp (ext ,"m3d" ))
cond	31:15	31:40	5	!av_strcasecmp (ext ,"m3d" )
op	31:15	0:0	6	!
call	31:16	31:40	6	av_strcasecmp
arg	31:30	31:33	7	ext
water	31:30	0:0	8	ext
arg	31:35	31:40	7	"m3d"
water	31:35	0:0	8	"m3d"
stmts	31:43	33:4	5	
water	31:43	0:0	6	{
water	32:8	0:0	6	ret
op	32:12	0:0	6	=
call	32:14	32:30	6	parse_m3d
arg	32:24	32:27	7	ctx
water	32:24	0:0	8	ctx
arg	32:29	32:30	7	f
water	32:29	0:0	8	f
water	32:31	0:0	6	;
water	33:4	0:0	6	}
else	33:6	36:4	2
stmts	33:11	36:4	3	
water	33:11	0:0	4	{
call	34:8	34:71	4	av_log
arg	34:15	34:18	5	ctx
water	34:15	0:0	6	ctx
arg	34:20	34:32	5	AV_LOG_ERROR
water	34:20	0:0	6	AV_LOG_ERROR
arg	34:34	34:66	5	"Unrecognized '.%s' file type\n"
water	34:34	0:0	6	"Unrecognized '.%s' file type\n"
arg	34:68	34:71	5	ext
water	34:68	0:0	6	ext
water	34:72	0:0	4	;
water	35:8	0:0	4	ret
op	35:12	0:0	4	=
call	35:14	35:28	4	AVERROR
arg	35:22	35:28	5	EINVAL
water	35:22	0:0	6	EINVAL
water	35:29	0:0	4	;
water	36:4	0:0	4	}
if	37:4	40:4	2	(! ret && ! lut3d -> lutsize)
cond	37:8	37:24	3	! ret && ! lut3d -> lutsize
op	37:8	0:0	4	!
water	37:9	0:0	4	ret
op	37:13	0:0	4	&&
op	37:16	0:0	4	!
water	37:17	0:0	4	lut3d
op	37:22	0:0	4	->
water	37:24	0:0	4	lutsize
stmts	37:33	40:4	3	
water	37:33	0:0	4	{
call	38:8	38:53	4	av_log
arg	38:15	38:18	5	ctx
water	38:15	0:0	6	ctx
arg	38:20	38:32	5	AV_LOG_ERROR
water	38:20	0:0	6	AV_LOG_ERROR
arg	38:34	38:53	5	"3D LUT is empty\n"
water	38:34	0:0	6	"3D LUT is empty\n"
water	38:54	0:0	4	;
water	39:8	0:0	4	ret
op	39:12	0:0	4	=
water	39:14	0:0	4	AVERROR_INVALIDDATA
water	39:33	0:0	4	;
water	40:4	0:0	4	}
label	41:0	41:3	2	end :
call	42:4	42:12	2	fclose
arg	42:11	42:12	3	f
water	42:11	0:0	4	f
water	42:13	0:0	2	;
return	43:4	43:14	2	ret
water	43:11	0:0	3	ret
