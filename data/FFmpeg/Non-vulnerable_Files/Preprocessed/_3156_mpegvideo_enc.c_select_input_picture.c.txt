func	1:0	153:0	0	static int	select_input_picture
params	1:31	0:0	1	
param	1:32	1:49	2	MpegEncContext *	s
stmnts	0:0	152:12	1	
decl	3:4	3:14	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:14	2	int	ret
for	4:4	5:73	2	(i = 1 ;i < MAX_PICTURE_COUNT;i ++)
forinit	4:9	4:14	3	i = 1 ;
water	4:9	0:0	4	i
op	4:11	0:0	4	=
water	4:13	0:0	4	1
water	4:14	0:0	4	;
cond	4:16	4:20	3	i < MAX_PICTURE_COUNT
water	4:16	0:0	4	i
op	4:18	0:0	4	<
water	4:20	0:0	4	MAX_PICTURE_COUNT
forexpr	4:39	4:40	3	i ++
water	4:39	0:0	4	i
op	4:40	0:0	4	++
stmts	5:8	5:73	3	
water	5:8	0:0	4	s
op	5:9	0:0	4	->
water	5:11	0:0	4	reordered_input_picture
op	5:34	0:0	4	[
water	5:35	0:0	4	i
op	5:37	0:0	4	-
water	5:39	0:0	4	1
op	5:40	0:0	4	]
op	5:42	0:0	4	=
water	5:44	0:0	4	s
op	5:45	0:0	4	->
water	5:47	0:0	4	reordered_input_picture
op	5:70	0:0	4	[
water	5:71	0:0	4	i
op	5:72	0:0	4	]
water	5:73	0:0	4	;
water	6:4	0:0	2	s
op	6:5	0:0	2	->
water	6:7	0:0	2	reordered_input_picture
op	6:30	0:0	2	[
water	6:31	0:0	2	MAX_PICTURE_COUNT
op	6:49	0:0	2	-
water	6:51	0:0	2	1
op	6:52	0:0	2	]
op	6:54	0:0	2	=
water	6:56	0:0	2	NULL
water	6:60	0:0	2	;
if	8:4	109:4	2	(! s -> reordered_input_picture [ 0 ] && s -> input_picture [ 0 ])
cond	8:8	8:60	3	! s -> reordered_input_picture [ 0 ] && s -> input_picture [ 0 ]
op	8:8	0:0	4	!
water	8:9	0:0	4	s
op	8:10	0:0	4	->
water	8:12	0:0	4	reordered_input_picture
op	8:35	0:0	4	[
water	8:36	0:0	4	0
op	8:37	0:0	4	]
op	8:39	0:0	4	&&
water	8:42	0:0	4	s
op	8:43	0:0	4	->
water	8:45	0:0	4	input_picture
op	8:58	0:0	4	[
water	8:59	0:0	4	0
op	8:60	0:0	4	]
stmts	8:63	109:4	3	
water	8:63	0:0	4	{
if	9:8	18:8	4	(s -> avctx -> frame_skip_threshold || s -> avctx -> frame_skip_factor)
cond	9:12	9:56	5	s -> avctx -> frame_skip_threshold || s -> avctx -> frame_skip_factor
water	9:12	0:0	6	s
op	9:13	0:0	6	->
water	9:15	0:0	6	avctx
op	9:20	0:0	6	->
water	9:22	0:0	6	frame_skip_threshold
op	9:43	0:0	6	||
water	9:46	0:0	6	s
op	9:47	0:0	6	->
water	9:49	0:0	6	avctx
op	9:54	0:0	6	->
water	9:56	0:0	6	frame_skip_factor
stmts	9:75	18:8	5	
water	9:75	0:0	6	{
if	10:12	17:12	6	(s -> picture_in_gop_number < s -> gop_size && s -> next_picture_ptr &&skip_check (s ,s -> input_picture [ 0 ] ,s -> next_picture_ptr ))
cond	10:16	12:70	7	s -> picture_in_gop_number < s -> gop_size && s -> next_picture_ptr &&skip_check (s ,s -> input_picture [ 0 ] ,s -> next_picture_ptr )
water	10:16	0:0	8	s
op	10:17	0:0	8	->
water	10:19	0:0	8	picture_in_gop_number
op	10:41	0:0	8	<
water	10:43	0:0	8	s
op	10:44	0:0	8	->
water	10:46	0:0	8	gop_size
op	10:55	0:0	8	&&
water	11:16	0:0	8	s
op	11:17	0:0	8	->
water	11:19	0:0	8	next_picture_ptr
op	11:36	0:0	8	&&
call	12:16	12:70	8	skip_check
arg	12:27	12:28	9	s
water	12:27	0:0	10	s
arg	12:30	12:49	9	s->input_picture[0]
water	12:30	0:0	10	s
op	12:31	0:0	10	->
water	12:33	0:0	10	input_picture
op	12:46	0:0	10	[
water	12:47	0:0	10	0
op	12:48	0:0	10	]
arg	12:51	12:70	9	s->next_picture_ptr
water	12:51	0:0	10	s
op	12:52	0:0	10	->
water	12:54	0:0	10	next_picture_ptr
stmts	12:73	17:12	7	
water	12:73	0:0	8	{
call	14:16	14:53	8	av_frame_unref
arg	14:31	14:53	9	s->input_picture[0]->f
water	14:31	0:0	10	s
op	14:32	0:0	10	->
water	14:34	0:0	10	input_picture
op	14:47	0:0	10	[
water	14:48	0:0	10	0
op	14:49	0:0	10	]
op	14:50	0:0	10	->
water	14:52	0:0	10	f
water	14:54	0:0	8	;
call	15:16	15:34	8	ff_vbv_update
arg	15:30	15:31	9	s
water	15:30	0:0	10	s
arg	15:33	15:34	9	0
water	15:33	0:0	10	0
water	15:35	0:0	8	;
goto	16:16	16:34	8	no_output_pic
water	16:21	0:0	9	no_output_pic
water	17:12	0:0	8	}
water	18:8	0:0	6	}
if	19:8	25:8	4	(! s -> next_picture_ptr || s -> intra_only)
cond	20:12	20:39	5	! s -> next_picture_ptr || s -> intra_only
op	20:12	0:0	6	!
water	20:13	0:0	6	s
op	20:14	0:0	6	->
water	20:16	0:0	6	next_picture_ptr
op	20:33	0:0	6	||
water	20:36	0:0	6	s
op	20:37	0:0	6	->
water	20:39	0:0	6	intra_only
stmts	20:51	25:8	5	
water	20:51	0:0	6	{
water	21:12	0:0	6	s
op	21:13	0:0	6	->
water	21:15	0:0	6	reordered_input_picture
op	21:38	0:0	6	[
water	21:39	0:0	6	0
op	21:40	0:0	6	]
op	21:42	0:0	6	=
water	21:44	0:0	6	s
op	21:45	0:0	6	->
water	21:47	0:0	6	input_picture
op	21:60	0:0	6	[
water	21:61	0:0	6	0
op	21:62	0:0	6	]
water	21:63	0:0	6	;
water	22:12	0:0	6	s
op	22:13	0:0	6	->
water	22:15	0:0	6	reordered_input_picture
op	22:38	0:0	6	[
water	22:39	0:0	6	0
op	22:40	0:0	6	]
op	22:41	0:0	6	->
water	22:43	0:0	6	f
op	22:44	0:0	6	->
water	22:46	0:0	6	pict_type
op	22:56	0:0	6	=
water	22:58	0:0	6	AV_PICTURE_TYPE_I
water	22:75	0:0	6	;
water	23:12	0:0	6	s
op	23:13	0:0	6	->
water	23:15	0:0	6	reordered_input_picture
op	23:38	0:0	6	[
water	23:39	0:0	6	0
op	23:40	0:0	6	]
op	23:41	0:0	6	->
water	23:43	0:0	6	f
op	23:44	0:0	6	->
water	23:46	0:0	6	coded_picture_number
op	23:67	0:0	6	=
water	24:16	0:0	6	s
op	24:17	0:0	6	->
water	24:19	0:0	6	coded_picture_number
op	24:39	0:0	6	++
water	24:41	0:0	6	;
water	25:8	0:0	6	}
else	25:10	108:8	4
stmts	25:15	108:8	5	
water	25:15	0:0	6	{
decl	26:12	26:24	6	int	b_frames
if	27:12	39:12	6	(s -> avctx -> flags & AV_CODEC_FLAG_PASS2)
cond	27:16	27:34	7	s -> avctx -> flags & AV_CODEC_FLAG_PASS2
water	27:16	0:0	8	s
op	27:17	0:0	8	->
water	27:19	0:0	8	avctx
op	27:24	0:0	8	->
water	27:26	0:0	8	flags
op	27:32	0:0	8	&
water	27:34	0:0	8	AV_CODEC_FLAG_PASS2
stmts	27:55	39:12	7	
water	27:55	0:0	8	{
for	28:16	38:16	8	(i = 0 ;i < s -> max_b_frames + 1;i ++)
forinit	28:21	28:26	9	i = 0 ;
water	28:21	0:0	10	i
op	28:23	0:0	10	=
water	28:25	0:0	10	0
water	28:26	0:0	10	;
cond	28:28	28:50	9	i < s -> max_b_frames + 1
water	28:28	0:0	10	i
op	28:30	0:0	10	<
water	28:32	0:0	10	s
op	28:33	0:0	10	->
water	28:35	0:0	10	max_b_frames
op	28:48	0:0	10	+
water	28:50	0:0	10	1
forexpr	28:53	28:54	9	i ++
water	28:53	0:0	10	i
op	28:54	0:0	10	++
stmts	28:58	38:16	9	
water	28:58	0:0	10	{
decl	29:20	29:85	10	int	pict_num
op	29:33	0:0	10	=
water	29:35	0:0	10	s
op	29:36	0:0	10	->
water	29:38	0:0	10	input_picture
op	29:51	0:0	10	[
water	29:52	0:0	10	0
op	29:53	0:0	10	]
op	29:54	0:0	10	->
water	29:56	0:0	10	f
op	29:57	0:0	10	->
water	29:59	0:0	10	display_picture_number
op	29:82	0:0	10	+
water	29:84	0:0	10	i
if	30:20	31:29	10	(pict_num >= s -> rc_context . num_entries)
cond	30:24	30:50	11	pict_num >= s -> rc_context . num_entries
water	30:24	0:0	12	pict_num
op	30:33	0:0	12	>=
water	30:36	0:0	12	s
op	30:37	0:0	12	->
water	30:39	0:0	12	rc_context
op	30:49	0:0	12	.
water	30:50	0:0	12	num_entries
stmts	31:24	31:29	11	
break	31:24	31:29	12	
if	32:20	35:20	10	(! s -> input_picture [ i ])
cond	32:24	32:43	11	! s -> input_picture [ i ]
op	32:24	0:0	12	!
water	32:25	0:0	12	s
op	32:26	0:0	12	->
water	32:28	0:0	12	input_picture
op	32:41	0:0	12	[
water	32:42	0:0	12	i
op	32:43	0:0	12	]
stmts	32:46	35:20	11	
water	32:46	0:0	12	{
water	33:24	0:0	12	s
op	33:25	0:0	12	->
water	33:27	0:0	12	rc_context
op	33:37	0:0	12	.
water	33:38	0:0	12	entry
op	33:43	0:0	12	[
water	33:44	0:0	12	pict_num
op	33:53	0:0	12	-
water	33:55	0:0	12	1
op	33:56	0:0	12	]
op	33:57	0:0	12	.
water	33:58	0:0	12	new_pict_type
op	33:72	0:0	12	=
water	33:74	0:0	12	AV_PICTURE_TYPE_P
water	33:91	0:0	12	;
break	34:24	34:29	12	
water	35:20	0:0	12	}
water	36:20	0:0	10	s
op	36:21	0:0	10	->
water	36:23	0:0	10	input_picture
op	36:36	0:0	10	[
water	36:37	0:0	10	i
op	36:38	0:0	10	]
op	36:39	0:0	10	->
water	36:41	0:0	10	f
op	36:42	0:0	10	->
water	36:44	0:0	10	pict_type
op	36:54	0:0	10	=
water	37:24	0:0	10	s
op	37:25	0:0	10	->
water	37:27	0:0	10	rc_context
op	37:37	0:0	10	.
water	37:38	0:0	10	entry
op	37:43	0:0	10	[
water	37:44	0:0	10	pict_num
op	37:52	0:0	10	]
op	37:53	0:0	10	.
water	37:54	0:0	10	new_pict_type
water	37:67	0:0	10	;
water	38:16	0:0	10	}
water	39:12	0:0	8	}
if	40:12	44:12	6	(s -> avctx -> b_frame_strategy == 0)
cond	40:16	40:46	7	s -> avctx -> b_frame_strategy == 0
water	40:16	0:0	8	s
op	40:17	0:0	8	->
water	40:19	0:0	8	avctx
op	40:24	0:0	8	->
water	40:26	0:0	8	b_frame_strategy
op	40:43	0:0	8	==
water	40:46	0:0	8	0
stmts	40:49	44:12	7	
water	40:49	0:0	8	{
water	41:16	0:0	8	b_frames
op	41:25	0:0	8	=
water	41:27	0:0	8	s
op	41:28	0:0	8	->
water	41:30	0:0	8	max_b_frames
water	41:42	0:0	8	;
while	42:16	43:30	8	(b_frames && ! s -> input_picture [ b_frames ])
cond	42:23	42:61	9	b_frames && ! s -> input_picture [ b_frames ]
water	42:23	0:0	10	b_frames
op	42:32	0:0	10	&&
op	42:35	0:0	10	!
water	42:36	0:0	10	s
op	42:37	0:0	10	->
water	42:39	0:0	10	input_picture
op	42:52	0:0	10	[
water	42:53	0:0	10	b_frames
op	42:61	0:0	10	]
stmts	43:20	43:30	9	
water	43:20	0:0	10	b_frames
op	43:28	0:0	10	--
water	43:30	0:0	10	;
water	44:12	0:0	8	}
else	44:14	66:12	6
stmts	44:19	66:12	7	
if	44:19	66:12	8	(s -> avctx -> b_frame_strategy == 1)
cond	44:23	44:53	9	s -> avctx -> b_frame_strategy == 1
water	44:23	0:0	10	s
op	44:24	0:0	10	->
water	44:26	0:0	10	avctx
op	44:31	0:0	10	->
water	44:33	0:0	10	b_frame_strategy
op	44:50	0:0	10	==
water	44:53	0:0	10	1
stmts	44:56	66:12	9	
water	44:56	0:0	10	{
for	45:16	54:16	10	(i = 1 ;i < s -> max_b_frames + 1;i ++)
forinit	45:21	45:26	11	i = 1 ;
water	45:21	0:0	12	i
op	45:23	0:0	12	=
water	45:25	0:0	12	1
water	45:26	0:0	12	;
cond	45:28	45:50	11	i < s -> max_b_frames + 1
water	45:28	0:0	12	i
op	45:30	0:0	12	<
water	45:32	0:0	12	s
op	45:33	0:0	12	->
water	45:35	0:0	12	max_b_frames
op	45:48	0:0	12	+
water	45:50	0:0	12	1
forexpr	45:53	45:54	11	i ++
water	45:53	0:0	12	i
op	45:54	0:0	12	++
stmts	45:58	54:16	11	
water	45:58	0:0	12	{
if	46:20	53:20	12	(s -> input_picture [ i ] && s -> input_picture [ i ] -> b_frame_score == 0)
cond	46:24	47:62	13	s -> input_picture [ i ] && s -> input_picture [ i ] -> b_frame_score == 0
water	46:24	0:0	14	s
op	46:25	0:0	14	->
water	46:27	0:0	14	input_picture
op	46:40	0:0	14	[
water	46:41	0:0	14	i
op	46:42	0:0	14	]
op	46:44	0:0	14	&&
water	47:24	0:0	14	s
op	47:25	0:0	14	->
water	47:27	0:0	14	input_picture
op	47:40	0:0	14	[
water	47:41	0:0	14	i
op	47:42	0:0	14	]
op	47:43	0:0	14	->
water	47:45	0:0	14	b_frame_score
op	47:59	0:0	14	==
water	47:62	0:0	14	0
stmts	47:65	53:20	13	
water	47:65	0:0	14	{
water	48:24	0:0	14	s
op	48:25	0:0	14	->
water	48:27	0:0	14	input_picture
op	48:40	0:0	14	[
water	48:41	0:0	14	i
op	48:42	0:0	14	]
op	48:43	0:0	14	->
water	48:45	0:0	14	b_frame_score
op	48:59	0:0	14	=
call	49:28	52:55	14	get_intra_count
arg	49:44	49:45	15	s
water	49:44	0:0	16	s
arg	50:44	50:79	15	s->input_picture[i]->f->data[0]
water	50:44	0:0	16	s
op	50:45	0:0	16	->
water	50:47	0:0	16	input_picture
op	50:60	0:0	16	[
water	50:61	0:0	16	i
op	50:66	0:0	16	]
op	50:67	0:0	16	->
water	50:69	0:0	16	f
op	50:70	0:0	16	->
water	50:72	0:0	16	data
op	50:76	0:0	16	[
water	50:77	0:0	16	0
op	50:78	0:0	16	]
arg	51:44	51:79	15	s->input_picture[i-1]->f->data[0]
water	51:44	0:0	16	s
op	51:45	0:0	16	->
water	51:47	0:0	16	input_picture
op	51:60	0:0	16	[
water	51:61	0:0	16	i
op	51:63	0:0	16	-
water	51:65	0:0	16	1
op	51:66	0:0	16	]
op	51:67	0:0	16	->
water	51:69	0:0	16	f
op	51:70	0:0	16	->
water	51:72	0:0	16	data
op	51:76	0:0	16	[
water	51:77	0:0	16	0
op	51:78	0:0	16	]
arg	52:44	52:55	15	s->linesize
water	52:44	0:0	16	s
op	52:45	0:0	16	->
water	52:47	0:0	16	linesize
op	52:57	0:0	14	+
water	52:59	0:0	14	1
water	52:60	0:0	14	;
water	53:20	0:0	14	}
water	54:16	0:0	12	}
for	55:16	60:16	10	(i = 0 ;i < s -> max_b_frames + 1;i ++)
forinit	55:21	55:26	11	i = 0 ;
water	55:21	0:0	12	i
op	55:23	0:0	12	=
water	55:25	0:0	12	0
water	55:26	0:0	12	;
cond	55:28	55:50	11	i < s -> max_b_frames + 1
water	55:28	0:0	12	i
op	55:30	0:0	12	<
water	55:32	0:0	12	s
op	55:33	0:0	12	->
water	55:35	0:0	12	max_b_frames
op	55:48	0:0	12	+
water	55:50	0:0	12	1
forexpr	55:53	55:54	11	i ++
water	55:53	0:0	12	i
op	55:54	0:0	12	++
stmts	55:58	60:16	11	
water	55:58	0:0	12	{
if	56:20	59:29	12	(! s -> input_picture [ i ] || s -> input_picture [ i ] -> b_frame_score - 1 > s -> mb_num / s -> avctx -> b_sensitivity)
cond	56:24	58:50	13	! s -> input_picture [ i ] || s -> input_picture [ i ] -> b_frame_score - 1 > s -> mb_num / s -> avctx -> b_sensitivity
op	56:24	0:0	14	!
water	56:25	0:0	14	s
op	56:26	0:0	14	->
water	56:28	0:0	14	input_picture
op	56:41	0:0	14	[
water	56:42	0:0	14	i
op	56:43	0:0	14	]
op	56:45	0:0	14	||
water	57:24	0:0	14	s
op	57:25	0:0	14	->
water	57:27	0:0	14	input_picture
op	57:40	0:0	14	[
water	57:41	0:0	14	i
op	57:42	0:0	14	]
op	57:43	0:0	14	->
water	57:45	0:0	14	b_frame_score
op	57:59	0:0	14	-
water	57:61	0:0	14	1
op	57:63	0:0	14	>
water	58:28	0:0	14	s
op	58:29	0:0	14	->
water	58:31	0:0	14	mb_num
op	58:38	0:0	14	/
water	58:40	0:0	14	s
op	58:41	0:0	14	->
water	58:43	0:0	14	avctx
op	58:48	0:0	14	->
water	58:50	0:0	14	b_sensitivity
stmts	59:24	59:29	13	
break	59:24	59:29	14	
water	60:16	0:0	12	}
water	61:16	0:0	10	b_frames
op	61:25	0:0	10	=
call	61:27	61:41	10	FFMAX
arg	61:33	61:34	11	0
water	61:33	0:0	12	0
arg	61:36	61:41	11	i-1
water	61:36	0:0	12	i
op	61:38	0:0	12	-
water	61:40	0:0	12	1
water	61:42	0:0	10	;
for	63:16	65:16	10	(i = 0 ;i < b_frames + 1;i ++)
forinit	63:21	63:26	11	i = 0 ;
water	63:21	0:0	12	i
op	63:23	0:0	12	=
water	63:25	0:0	12	0
water	63:26	0:0	12	;
cond	63:28	63:43	11	i < b_frames + 1
water	63:28	0:0	12	i
op	63:30	0:0	12	<
water	63:32	0:0	12	b_frames
op	63:41	0:0	12	+
water	63:43	0:0	12	1
forexpr	63:46	63:47	11	i ++
water	63:46	0:0	12	i
op	63:47	0:0	12	++
stmts	63:51	65:16	11	
water	63:51	0:0	12	{
water	64:20	0:0	12	s
op	64:21	0:0	12	->
water	64:23	0:0	12	input_picture
op	64:36	0:0	12	[
water	64:37	0:0	12	i
op	64:38	0:0	12	]
op	64:39	0:0	12	->
water	64:41	0:0	12	b_frame_score
op	64:55	0:0	12	=
water	64:57	0:0	12	0
water	64:58	0:0	12	;
water	65:16	0:0	12	}
water	66:12	0:0	10	}
else	66:14	68:12	6
stmts	66:19	68:12	7	
if	66:19	68:12	8	(s -> avctx -> b_frame_strategy == 2)
cond	66:23	66:53	9	s -> avctx -> b_frame_strategy == 2
water	66:23	0:0	10	s
op	66:24	0:0	10	->
water	66:26	0:0	10	avctx
op	66:31	0:0	10	->
water	66:33	0:0	10	b_frame_strategy
op	66:50	0:0	10	==
water	66:53	0:0	10	2
stmts	66:56	68:12	9	
water	66:56	0:0	10	{
water	67:16	0:0	10	b_frames
op	67:25	0:0	10	=
call	67:27	67:50	10	estimate_best_b_count
arg	67:49	67:50	11	s
water	67:49	0:0	12	s
water	67:51	0:0	10	;
water	68:12	0:0	10	}
else	68:14	71:12	6
stmts	68:19	71:12	7	
water	68:19	0:0	8	{
call	69:16	69:75	8	av_log
arg	69:23	69:31	9	s->avctx
water	69:23	0:0	10	s
op	69:24	0:0	10	->
water	69:26	0:0	10	avctx
arg	69:33	69:45	9	AV_LOG_ERROR
water	69:33	0:0	10	AV_LOG_ERROR
arg	69:47	69:75	9	"illegal b frame strategy\n"
water	69:47	0:0	10	"illegal b frame strategy\n"
water	69:76	0:0	8	;
water	70:16	0:0	8	b_frames
op	70:25	0:0	8	=
water	70:27	0:0	8	0
water	70:28	0:0	8	;
water	71:12	0:0	8	}
call	72:12	72:19	6	emms_c
water	72:20	0:0	6	;
for	73:12	77:12	6	(i = b_frames - 1 ;i >= 0;i --)
forinit	73:17	73:33	7	i = b_frames - 1 ;
water	73:17	0:0	8	i
op	73:19	0:0	8	=
water	73:21	0:0	8	b_frames
op	73:30	0:0	8	-
water	73:32	0:0	8	1
water	73:33	0:0	8	;
cond	73:35	73:40	7	i >= 0
water	73:35	0:0	8	i
op	73:37	0:0	8	>=
water	73:40	0:0	8	0
forexpr	73:43	73:44	7	i --
water	73:43	0:0	8	i
op	73:44	0:0	8	--
stmts	73:48	77:12	7	
water	73:48	0:0	8	{
decl	74:16	74:60	8	int	type
op	74:25	0:0	8	=
water	74:27	0:0	8	s
op	74:28	0:0	8	->
water	74:30	0:0	8	input_picture
op	74:43	0:0	8	[
water	74:44	0:0	8	i
op	74:45	0:0	8	]
op	74:46	0:0	8	->
water	74:48	0:0	8	f
op	74:49	0:0	8	->
water	74:51	0:0	8	pict_type
if	75:16	76:32	8	(type && type != AV_PICTURE_TYPE_B)
cond	75:20	75:36	9	type && type != AV_PICTURE_TYPE_B
water	75:20	0:0	10	type
op	75:25	0:0	10	&&
water	75:28	0:0	10	type
op	75:33	0:0	10	!=
water	75:36	0:0	10	AV_PICTURE_TYPE_B
stmts	76:20	76:32	9	
water	76:20	0:0	10	b_frames
op	76:29	0:0	10	=
water	76:31	0:0	10	i
water	76:32	0:0	10	;
water	77:12	0:0	8	}
if	78:12	82:12	6	(s -> input_picture [ b_frames ] -> f -> pict_type == AV_PICTURE_TYPE_B && b_frames == s -> max_b_frames)
cond	78:16	79:31	7	s -> input_picture [ b_frames ] -> f -> pict_type == AV_PICTURE_TYPE_B && b_frames == s -> max_b_frames
water	78:16	0:0	8	s
op	78:17	0:0	8	->
water	78:19	0:0	8	input_picture
op	78:32	0:0	8	[
water	78:33	0:0	8	b_frames
op	78:41	0:0	8	]
op	78:42	0:0	8	->
water	78:44	0:0	8	f
op	78:45	0:0	8	->
water	78:47	0:0	8	pict_type
op	78:57	0:0	8	==
water	78:60	0:0	8	AV_PICTURE_TYPE_B
op	78:78	0:0	8	&&
water	79:16	0:0	8	b_frames
op	79:25	0:0	8	==
water	79:28	0:0	8	s
op	79:29	0:0	8	->
water	79:31	0:0	8	max_b_frames
stmts	79:45	82:12	7	
water	79:45	0:0	8	{
call	80:16	81:62	8	av_log
arg	80:23	80:31	9	s->avctx
water	80:23	0:0	10	s
op	80:24	0:0	10	->
water	80:26	0:0	10	avctx
arg	80:33	80:45	9	AV_LOG_ERROR
water	80:33	0:0	10	AV_LOG_ERROR
arg	81:23	81:62	9	"warning, too many b frames in a row\n"
water	81:23	0:0	10	"warning, too many b frames in a row\n"
water	81:63	0:0	8	;
water	82:12	0:0	8	}
if	83:12	92:12	6	(s -> picture_in_gop_number + b_frames >= s -> gop_size)
cond	83:16	83:58	7	s -> picture_in_gop_number + b_frames >= s -> gop_size
water	83:16	0:0	8	s
op	83:17	0:0	8	->
water	83:19	0:0	8	picture_in_gop_number
op	83:41	0:0	8	+
water	83:43	0:0	8	b_frames
op	83:52	0:0	8	>=
water	83:55	0:0	8	s
op	83:56	0:0	8	->
water	83:58	0:0	8	gop_size
stmts	83:68	92:12	7	
water	83:68	0:0	8	{
if	84:16	87:16	8	(( s -> mpv_flags & FF_MPV_FLAG_STRICT_GOP ) && s -> gop_size > s -> picture_in_gop_number)
cond	84:20	85:37	9	( s -> mpv_flags & FF_MPV_FLAG_STRICT_GOP ) && s -> gop_size > s -> picture_in_gop_number
water	84:20	0:0	10	(
water	84:21	0:0	10	s
op	84:22	0:0	10	->
water	84:24	0:0	10	mpv_flags
op	84:34	0:0	10	&
water	84:36	0:0	10	FF_MPV_FLAG_STRICT_GOP
water	84:58	0:0	10	)
op	84:60	0:0	10	&&
water	85:20	0:0	10	s
op	85:21	0:0	10	->
water	85:23	0:0	10	gop_size
op	85:32	0:0	10	>
water	85:34	0:0	10	s
op	85:35	0:0	10	->
water	85:37	0:0	10	picture_in_gop_number
stmts	85:60	87:16	9	
water	85:60	0:0	10	{
water	86:20	0:0	10	b_frames
op	86:29	0:0	10	=
water	86:31	0:0	10	s
op	86:32	0:0	10	->
water	86:34	0:0	10	gop_size
op	86:43	0:0	10	-
water	86:45	0:0	10	s
op	86:46	0:0	10	->
water	86:48	0:0	10	picture_in_gop_number
op	86:70	0:0	10	-
water	86:72	0:0	10	1
water	86:73	0:0	10	;
water	87:16	0:0	10	}
else	87:18	91:16	8
stmts	87:23	91:16	9	
water	87:23	0:0	10	{
if	88:20	89:36	10	(s -> avctx -> flags & AV_CODEC_FLAG_CLOSED_GOP)
cond	88:24	88:42	11	s -> avctx -> flags & AV_CODEC_FLAG_CLOSED_GOP
water	88:24	0:0	12	s
op	88:25	0:0	12	->
water	88:27	0:0	12	avctx
op	88:32	0:0	12	->
water	88:34	0:0	12	flags
op	88:40	0:0	12	&
water	88:42	0:0	12	AV_CODEC_FLAG_CLOSED_GOP
stmts	89:24	89:36	11	
water	89:24	0:0	12	b_frames
op	89:33	0:0	12	=
water	89:35	0:0	12	0
water	89:36	0:0	12	;
water	90:20	0:0	10	s
op	90:21	0:0	10	->
water	90:23	0:0	10	input_picture
op	90:36	0:0	10	[
water	90:37	0:0	10	b_frames
op	90:45	0:0	10	]
op	90:46	0:0	10	->
water	90:48	0:0	10	f
op	90:49	0:0	10	->
water	90:51	0:0	10	pict_type
op	90:61	0:0	10	=
water	90:63	0:0	10	AV_PICTURE_TYPE_I
water	90:80	0:0	10	;
water	91:16	0:0	10	}
water	92:12	0:0	8	}
if	93:12	95:26	6	(( s -> avctx -> flags & AV_CODEC_FLAG_CLOSED_GOP ) && b_frames && s -> input_picture [ b_frames ] -> f -> pict_type == AV_PICTURE_TYPE_I)
cond	93:16	94:60	7	( s -> avctx -> flags & AV_CODEC_FLAG_CLOSED_GOP ) && b_frames && s -> input_picture [ b_frames ] -> f -> pict_type == AV_PICTURE_TYPE_I
water	93:16	0:0	8	(
water	93:17	0:0	8	s
op	93:18	0:0	8	->
water	93:20	0:0	8	avctx
op	93:25	0:0	8	->
water	93:27	0:0	8	flags
op	93:33	0:0	8	&
water	93:35	0:0	8	AV_CODEC_FLAG_CLOSED_GOP
water	93:59	0:0	8	)
op	93:61	0:0	8	&&
water	93:64	0:0	8	b_frames
op	93:73	0:0	8	&&
water	94:16	0:0	8	s
op	94:17	0:0	8	->
water	94:19	0:0	8	input_picture
op	94:32	0:0	8	[
water	94:33	0:0	8	b_frames
op	94:41	0:0	8	]
op	94:42	0:0	8	->
water	94:44	0:0	8	f
op	94:45	0:0	8	->
water	94:47	0:0	8	pict_type
op	94:57	0:0	8	==
water	94:60	0:0	8	AV_PICTURE_TYPE_I
stmts	95:16	95:26	7	
water	95:16	0:0	8	b_frames
op	95:24	0:0	8	--
water	95:26	0:0	8	;
water	96:12	0:0	6	s
op	96:13	0:0	6	->
water	96:15	0:0	6	reordered_input_picture
op	96:38	0:0	6	[
water	96:39	0:0	6	0
op	96:40	0:0	6	]
op	96:42	0:0	6	=
water	96:44	0:0	6	s
op	96:45	0:0	6	->
water	96:47	0:0	6	input_picture
op	96:60	0:0	6	[
water	96:61	0:0	6	b_frames
op	96:69	0:0	6	]
water	96:70	0:0	6	;
if	97:12	98:79	6	(s -> reordered_input_picture [ 0 ] -> f -> pict_type != AV_PICTURE_TYPE_I)
cond	97:16	97:63	7	s -> reordered_input_picture [ 0 ] -> f -> pict_type != AV_PICTURE_TYPE_I
water	97:16	0:0	8	s
op	97:17	0:0	8	->
water	97:19	0:0	8	reordered_input_picture
op	97:42	0:0	8	[
water	97:43	0:0	8	0
op	97:44	0:0	8	]
op	97:45	0:0	8	->
water	97:47	0:0	8	f
op	97:48	0:0	8	->
water	97:50	0:0	8	pict_type
op	97:60	0:0	8	!=
water	97:63	0:0	8	AV_PICTURE_TYPE_I
stmts	98:16	98:79	7	
water	98:16	0:0	8	s
op	98:17	0:0	8	->
water	98:19	0:0	8	reordered_input_picture
op	98:42	0:0	8	[
water	98:43	0:0	8	0
op	98:44	0:0	8	]
op	98:45	0:0	8	->
water	98:47	0:0	8	f
op	98:48	0:0	8	->
water	98:50	0:0	8	pict_type
op	98:60	0:0	8	=
water	98:62	0:0	8	AV_PICTURE_TYPE_P
water	98:79	0:0	8	;
water	99:12	0:0	6	s
op	99:13	0:0	6	->
water	99:15	0:0	6	reordered_input_picture
op	99:38	0:0	6	[
water	99:39	0:0	6	0
op	99:40	0:0	6	]
op	99:41	0:0	6	->
water	99:43	0:0	6	f
op	99:44	0:0	6	->
water	99:46	0:0	6	coded_picture_number
op	99:67	0:0	6	=
water	100:16	0:0	6	s
op	100:17	0:0	6	->
water	100:19	0:0	6	coded_picture_number
op	100:39	0:0	6	++
water	100:41	0:0	6	;
for	101:12	107:12	6	(i = 0 ;i < b_frames;i ++)
forinit	101:17	101:22	7	i = 0 ;
water	101:17	0:0	8	i
op	101:19	0:0	8	=
water	101:21	0:0	8	0
water	101:22	0:0	8	;
cond	101:24	101:28	7	i < b_frames
water	101:24	0:0	8	i
op	101:26	0:0	8	<
water	101:28	0:0	8	b_frames
forexpr	101:38	101:39	7	i ++
water	101:38	0:0	8	i
op	101:39	0:0	8	++
stmts	101:43	107:12	7	
water	101:43	0:0	8	{
water	102:16	0:0	8	s
op	102:17	0:0	8	->
water	102:19	0:0	8	reordered_input_picture
op	102:42	0:0	8	[
water	102:43	0:0	8	i
op	102:45	0:0	8	+
water	102:47	0:0	8	1
op	102:48	0:0	8	]
op	102:50	0:0	8	=
water	102:52	0:0	8	s
op	102:53	0:0	8	->
water	102:55	0:0	8	input_picture
op	102:68	0:0	8	[
water	102:69	0:0	8	i
op	102:70	0:0	8	]
water	102:71	0:0	8	;
water	103:16	0:0	8	s
op	103:17	0:0	8	->
water	103:19	0:0	8	reordered_input_picture
op	103:42	0:0	8	[
water	103:43	0:0	8	i
op	103:45	0:0	8	+
water	103:47	0:0	8	1
op	103:48	0:0	8	]
op	103:49	0:0	8	->
water	103:51	0:0	8	f
op	103:52	0:0	8	->
water	103:54	0:0	8	pict_type
op	103:64	0:0	8	=
water	104:20	0:0	8	AV_PICTURE_TYPE_B
water	104:37	0:0	8	;
water	105:16	0:0	8	s
op	105:17	0:0	8	->
water	105:19	0:0	8	reordered_input_picture
op	105:42	0:0	8	[
water	105:43	0:0	8	i
op	105:45	0:0	8	+
water	105:47	0:0	8	1
op	105:48	0:0	8	]
op	105:49	0:0	8	->
water	105:51	0:0	8	f
op	105:52	0:0	8	->
water	105:54	0:0	8	coded_picture_number
op	105:75	0:0	8	=
water	106:20	0:0	8	s
op	106:21	0:0	8	->
water	106:23	0:0	8	coded_picture_number
op	106:43	0:0	8	++
water	106:45	0:0	8	;
water	107:12	0:0	8	}
water	108:8	0:0	6	}
water	109:4	0:0	4	}
label	110:0	110:13	2	no_output_pic :
if	111:4	149:4	2	(s -> reordered_input_picture [ 0 ])
cond	111:8	111:36	3	s -> reordered_input_picture [ 0 ]
water	111:8	0:0	4	s
op	111:9	0:0	4	->
water	111:11	0:0	4	reordered_input_picture
op	111:34	0:0	4	[
water	111:35	0:0	4	0
op	111:36	0:0	4	]
stmts	111:39	149:4	3	
water	111:39	0:0	4	{
water	112:8	0:0	4	s
op	112:9	0:0	4	->
water	112:11	0:0	4	reordered_input_picture
op	112:34	0:0	4	[
water	112:35	0:0	4	0
op	112:36	0:0	4	]
op	112:37	0:0	4	->
water	112:39	0:0	4	reference
op	112:49	0:0	4	=
water	113:11	0:0	4	s
op	113:12	0:0	4	->
water	113:14	0:0	4	reordered_input_picture
op	113:37	0:0	4	[
water	113:38	0:0	4	0
op	113:39	0:0	4	]
op	113:40	0:0	4	->
water	113:42	0:0	4	f
op	113:43	0:0	4	->
water	113:45	0:0	4	pict_type
op	113:55	0:0	4	!=
water	114:15	0:0	4	AV_PICTURE_TYPE_B
water	114:33	0:0	4	?
water	114:35	0:0	4	3
water	114:37	0:0	4	:
water	114:39	0:0	4	0
water	114:40	0:0	4	;
call	115:8	115:55	4	ff_mpeg_unref_picture
arg	115:30	115:38	5	s->avctx
water	115:30	0:0	6	s
op	115:31	0:0	6	->
water	115:33	0:0	6	avctx
arg	115:40	115:55	5	&s->new_picture
op	115:40	0:0	6	&
water	115:41	0:0	6	s
op	115:42	0:0	6	->
water	115:44	0:0	6	new_picture
water	115:56	0:0	4	;
if	116:8	117:22	4	(( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> new_picture ,s -> reordered_input_picture [ 0 ] ) ))
cond	116:12	116:96	5	( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> new_picture ,s -> reordered_input_picture [ 0 ] ) )
water	116:12	0:0	6	(
water	116:13	0:0	6	ret
op	116:17	0:0	6	=
call	116:19	116:95	6	ff_mpeg_ref_picture
arg	116:39	116:47	7	s->avctx
water	116:39	0:0	8	s
op	116:40	0:0	8	->
water	116:42	0:0	8	avctx
arg	116:49	116:64	7	&s->new_picture
op	116:49	0:0	8	&
water	116:50	0:0	8	s
op	116:51	0:0	8	->
water	116:53	0:0	8	new_picture
arg	116:66	116:95	7	s->reordered_input_picture[0]
water	116:66	0:0	8	s
op	116:67	0:0	8	->
water	116:69	0:0	8	reordered_input_picture
op	116:92	0:0	8	[
water	116:93	0:0	8	0
op	116:94	0:0	8	]
water	116:96	0:0	6	)
stmts	117:12	117:22	5	
return	117:12	117:22	6	ret
water	117:19	0:0	7	ret
if	118:8	137:8	4	(s -> reordered_input_picture [ 0 ] -> shared || s -> avctx -> rc_buffer_size)
cond	118:12	118:63	5	s -> reordered_input_picture [ 0 ] -> shared || s -> avctx -> rc_buffer_size
water	118:12	0:0	6	s
op	118:13	0:0	6	->
water	118:15	0:0	6	reordered_input_picture
op	118:38	0:0	6	[
water	118:39	0:0	6	0
op	118:40	0:0	6	]
op	118:41	0:0	6	->
water	118:43	0:0	6	shared
op	118:50	0:0	6	||
water	118:53	0:0	6	s
op	118:54	0:0	6	->
water	118:56	0:0	6	avctx
op	118:61	0:0	6	->
water	118:63	0:0	6	rc_buffer_size
stmts	118:79	137:8	5	
water	118:79	0:0	6	{
decl	121:12	121:24	6	Picture	*pic
decl	122:12	122:67	6	int	i
op	122:18	0:0	6	=
call	122:20	122:66	7	ff_find_unused_picture
arg	122:43	122:51	8	s->avctx
water	122:43	0:0	9	s
op	122:44	0:0	9	->
water	122:46	0:0	9	avctx
arg	122:53	122:63	8	s->picture
water	122:53	0:0	9	s
op	122:54	0:0	9	->
water	122:56	0:0	9	picture
arg	122:65	122:66	8	0
water	122:65	0:0	9	0
if	123:12	124:24	6	(i < 0)
cond	123:16	123:20	7	i < 0
water	123:16	0:0	8	i
op	123:18	0:0	8	<
water	123:20	0:0	8	0
stmts	124:16	124:24	7	
return	124:16	124:24	8	i
water	124:23	0:0	9	i
water	125:12	0:0	6	pic
op	125:16	0:0	6	=
op	125:18	0:0	6	&
water	125:19	0:0	6	s
op	125:20	0:0	6	->
water	125:22	0:0	6	picture
op	125:29	0:0	6	[
water	125:30	0:0	6	i
op	125:31	0:0	6	]
water	125:32	0:0	6	;
water	126:12	0:0	6	pic
op	126:15	0:0	6	->
water	126:17	0:0	6	reference
op	126:27	0:0	6	=
water	126:29	0:0	6	s
op	126:30	0:0	6	->
water	126:32	0:0	6	reordered_input_picture
op	126:55	0:0	6	[
water	126:56	0:0	6	0
op	126:57	0:0	6	]
op	126:58	0:0	6	->
water	126:60	0:0	6	reference
water	126:69	0:0	6	;
if	127:12	129:12	6	(alloc_picture (s ,pic ,0 ) < 0)
cond	127:16	127:43	7	alloc_picture (s ,pic ,0 ) < 0
call	127:16	127:39	8	alloc_picture
arg	127:30	127:31	9	s
water	127:30	0:0	10	s
arg	127:33	127:36	9	pic
water	127:33	0:0	10	pic
arg	127:38	127:39	9	0
water	127:38	0:0	10	0
op	127:41	0:0	8	<
water	127:43	0:0	8	0
stmts	127:46	129:12	7	
water	127:46	0:0	8	{
return	128:16	128:25	8	-1
op	128:23	0:0	9	-
water	128:24	0:0	9	1
water	129:12	0:0	8	}
water	130:12	0:0	6	ret
op	130:16	0:0	6	=
call	130:18	130:78	6	av_frame_copy_props
arg	130:38	130:44	7	pic->f
water	130:38	0:0	8	pic
op	130:41	0:0	8	->
water	130:43	0:0	8	f
arg	130:46	130:78	7	s->reordered_input_picture[0]->f
water	130:46	0:0	8	s
op	130:47	0:0	8	->
water	130:49	0:0	8	reordered_input_picture
op	130:72	0:0	8	[
water	130:73	0:0	8	0
op	130:74	0:0	8	]
op	130:75	0:0	8	->
water	130:77	0:0	8	f
water	130:79	0:0	6	;
if	131:12	132:26	6	(ret < 0)
cond	131:16	131:22	7	ret < 0
water	131:16	0:0	8	ret
op	131:20	0:0	8	<
water	131:22	0:0	8	0
stmts	132:16	132:26	7	
return	132:16	132:26	8	ret
water	132:23	0:0	9	ret
call	134:12	134:59	6	av_frame_unref
arg	134:27	134:59	7	s->reordered_input_picture[0]->f
water	134:27	0:0	8	s
op	134:28	0:0	8	->
water	134:30	0:0	8	reordered_input_picture
op	134:53	0:0	8	[
water	134:54	0:0	8	0
op	134:55	0:0	8	]
op	134:56	0:0	8	->
water	134:58	0:0	8	f
water	134:60	0:0	6	;
water	135:12	0:0	6	s
op	135:13	0:0	6	->
water	135:15	0:0	6	reordered_input_picture
op	135:38	0:0	6	[
water	135:39	0:0	6	0
op	135:40	0:0	6	]
op	135:41	0:0	6	->
water	135:43	0:0	6	shared
op	135:50	0:0	6	=
water	135:52	0:0	6	0
water	135:53	0:0	6	;
water	136:12	0:0	6	s
op	136:13	0:0	6	->
water	136:15	0:0	6	current_picture_ptr
op	136:35	0:0	6	=
water	136:37	0:0	6	pic
water	136:40	0:0	6	;
water	137:8	0:0	6	}
else	137:10	143:8	4
stmts	137:15	143:8	5	
water	137:15	0:0	6	{
water	139:12	0:0	6	s
op	139:13	0:0	6	->
water	139:15	0:0	6	current_picture_ptr
op	139:35	0:0	6	=
water	139:37	0:0	6	s
op	139:38	0:0	6	->
water	139:40	0:0	6	reordered_input_picture
op	139:63	0:0	6	[
water	139:64	0:0	6	0
op	139:65	0:0	6	]
water	139:66	0:0	6	;
for	140:12	142:12	6	(i = 0 ;i < 4;i ++)
forinit	140:17	140:22	7	i = 0 ;
water	140:17	0:0	8	i
op	140:19	0:0	8	=
water	140:21	0:0	8	0
water	140:22	0:0	8	;
cond	140:24	140:28	7	i < 4
water	140:24	0:0	8	i
op	140:26	0:0	8	<
water	140:28	0:0	8	4
forexpr	140:31	140:32	7	i ++
water	140:31	0:0	8	i
op	140:32	0:0	8	++
stmts	140:36	142:12	7	
water	140:36	0:0	8	{
water	141:16	0:0	8	s
op	141:17	0:0	8	->
water	141:19	0:0	8	new_picture
op	141:30	0:0	8	.
water	141:31	0:0	8	f
op	141:32	0:0	8	->
water	141:34	0:0	8	data
op	141:38	0:0	8	[
water	141:39	0:0	8	i
op	141:40	0:0	8	]
op	141:42	0:0	8	+=
water	141:45	0:0	8	INPLACE_OFFSET
water	141:59	0:0	8	;
water	142:12	0:0	8	}
water	143:8	0:0	6	}
call	144:8	144:59	4	ff_mpeg_unref_picture
arg	144:30	144:38	5	s->avctx
water	144:30	0:0	6	s
op	144:31	0:0	6	->
water	144:33	0:0	6	avctx
arg	144:40	144:59	5	&s->current_picture
op	144:40	0:0	6	&
water	144:41	0:0	6	s
op	144:42	0:0	6	->
water	144:44	0:0	6	current_picture
water	144:60	0:0	4	;
if	145:8	147:22	4	(( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> current_picture ,s -> current_picture_ptr ) ) < 0)
cond	145:12	146:66	5	( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> current_picture ,s -> current_picture_ptr ) ) < 0
water	145:12	0:0	6	(
water	145:13	0:0	6	ret
op	145:17	0:0	6	=
call	145:19	146:61	6	ff_mpeg_ref_picture
arg	145:39	145:47	7	s->avctx
water	145:39	0:0	8	s
op	145:40	0:0	8	->
water	145:42	0:0	8	avctx
arg	145:49	145:68	7	&s->current_picture
op	145:49	0:0	8	&
water	145:50	0:0	8	s
op	145:51	0:0	8	->
water	145:53	0:0	8	current_picture
arg	146:39	146:61	7	s->current_picture_ptr
water	146:39	0:0	8	s
op	146:40	0:0	8	->
water	146:42	0:0	8	current_picture_ptr
water	146:62	0:0	6	)
op	146:64	0:0	6	<
water	146:66	0:0	6	0
stmts	147:12	147:22	5	
return	147:12	147:22	6	ret
water	147:19	0:0	7	ret
water	148:8	0:0	4	s
op	148:9	0:0	4	->
water	148:11	0:0	4	picture_number
op	148:26	0:0	4	=
water	148:28	0:0	4	s
op	148:29	0:0	4	->
water	148:31	0:0	4	new_picture
op	148:42	0:0	4	.
water	148:43	0:0	4	f
op	148:44	0:0	4	->
water	148:46	0:0	4	display_picture_number
water	148:68	0:0	4	;
water	149:4	0:0	4	}
else	149:6	151:4	2
stmts	149:11	151:4	3	
water	149:11	0:0	4	{
call	150:8	150:55	4	ff_mpeg_unref_picture
arg	150:30	150:38	5	s->avctx
water	150:30	0:0	6	s
op	150:31	0:0	6	->
water	150:33	0:0	6	avctx
arg	150:40	150:55	5	&s->new_picture
op	150:40	0:0	6	&
water	150:41	0:0	6	s
op	150:42	0:0	6	->
water	150:44	0:0	6	new_picture
water	150:56	0:0	4	;
water	151:4	0:0	4	}
return	152:4	152:12	2	0
water	152:11	0:0	3	0
