func	1:0	74:0	0	static int	nut_write_header
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
stmnts	0:0	73:12	1	
decl	3:4	3:34	2	NUTContext	*nut
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*bc
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:17	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:17	2	int	j
water	5:12	0:0	2	,
decl	5:4	5:17	2	int	ret
water	6:4	0:0	2	nut
op	6:7	0:0	2	->
water	6:9	0:0	2	avf
op	6:13	0:0	2	=
water	6:15	0:0	2	s
water	6:16	0:0	2	;
water	7:4	0:0	2	nut
op	7:7	0:0	2	->
water	7:9	0:0	2	version
op	7:17	0:0	2	=
call	7:19	7:61	2	FFMAX
arg	7:25	7:43	3	NUT_STABLE_VERSION
water	7:25	0:0	4	NUT_STABLE_VERSION
arg	7:45	7:61	3	3+!!nut->flags
water	7:45	0:0	4	3
op	7:47	0:0	4	+
op	7:49	0:0	4	!
op	7:50	0:0	4	!
water	7:51	0:0	4	nut
op	7:54	0:0	4	->
water	7:56	0:0	4	flags
water	7:62	0:0	2	;
if	8:4	15:4	2	(nut -> version > 3 && s -> strict_std_compliance > FF_COMPLIANCE_EXPERIMENTAL)
cond	8:8	8:55	3	nut -> version > 3 && s -> strict_std_compliance > FF_COMPLIANCE_EXPERIMENTAL
water	8:8	0:0	4	nut
op	8:11	0:0	4	->
water	8:13	0:0	4	version
op	8:21	0:0	4	>
water	8:23	0:0	4	3
op	8:25	0:0	4	&&
water	8:28	0:0	4	s
op	8:29	0:0	4	->
water	8:31	0:0	4	strict_std_compliance
op	8:53	0:0	4	>
water	8:55	0:0	4	FF_COMPLIANCE_EXPERIMENTAL
stmts	8:83	15:4	3	
water	8:83	0:0	4	{
call	9:8	13:27	4	av_log
arg	9:15	9:16	5	s
water	9:15	0:0	6	s
arg	9:18	9:30	5	AV_LOG_ERROR
water	9:18	0:0	6	AV_LOG_ERROR
arg	10:15	12:75	5	"The additional syncpoint modes require version %d, ""that is currently not finalized, ""please set -f_strict experimental in order to enable it.\n"
water	10:15	0:0	6	"The additional syncpoint modes require version %d, "
water	11:15	0:0	6	"that is currently not finalized, "
water	12:15	0:0	6	"please set -f_strict experimental in order to enable it.\n"
arg	13:15	13:27	5	nut->version
water	13:15	0:0	6	nut
op	13:18	0:0	6	->
water	13:20	0:0	6	version
water	13:28	0:0	4	;
return	14:8	14:35	4	AVERROR_EXPERIMENTAL
water	14:15	0:0	5	AVERROR_EXPERIMENTAL
water	15:4	0:0	4	}
water	16:4	0:0	2	nut
op	16:7	0:0	2	->
water	16:9	0:0	2	stream
op	16:18	0:0	2	=
call	16:20	16:67	2	av_calloc
arg	16:30	16:43	3	s->nb_streams
water	16:30	0:0	4	s
op	16:31	0:0	4	->
water	16:33	0:0	4	nb_streams
arg	16:46	16:67	3	sizeof(*nut->stream)
op	16:46	0:0	4	sizeof
water	16:52	0:0	4	(
op	16:53	0:0	4	*
water	16:54	0:0	4	nut
op	16:57	0:0	4	->
water	16:59	0:0	4	stream
water	16:66	0:0	4	)
water	16:68	0:0	2	;
water	17:4	0:0	2	nut
op	17:7	0:0	2	->
water	17:9	0:0	2	chapter
op	17:18	0:0	2	=
call	17:20	17:67	2	av_calloc
arg	17:30	17:44	3	s->nb_chapters
water	17:30	0:0	4	s
op	17:31	0:0	4	->
water	17:33	0:0	4	nb_chapters
arg	17:46	17:67	3	sizeof(*nut->chapter)
op	17:46	0:0	4	sizeof
water	17:52	0:0	4	(
op	17:53	0:0	4	*
water	17:54	0:0	4	nut
op	17:57	0:0	4	->
water	17:59	0:0	4	chapter
water	17:66	0:0	4	)
water	17:68	0:0	2	;
water	18:4	0:0	2	nut
op	18:7	0:0	2	->
water	18:9	0:0	2	time_base
op	18:18	0:0	2	=
call	18:20	19:69	2	av_calloc
arg	18:30	19:44	3	s->nb_streams+s->nb_chapters
water	18:30	0:0	4	s
op	18:31	0:0	4	->
water	18:33	0:0	4	nb_streams
op	18:44	0:0	4	+
water	19:30	0:0	4	s
op	19:31	0:0	4	->
water	19:33	0:0	4	nb_chapters
arg	19:46	19:69	3	sizeof(*nut->time_base)
op	19:46	0:0	4	sizeof
water	19:52	0:0	4	(
op	19:53	0:0	4	*
water	19:54	0:0	4	nut
op	19:57	0:0	4	->
water	19:59	0:0	4	time_base
water	19:68	0:0	4	)
water	19:70	0:0	2	;
if	20:4	25:4	2	(! nut -> stream || ! nut -> chapter || ! nut -> time_base)
cond	20:8	20:47	3	! nut -> stream || ! nut -> chapter || ! nut -> time_base
op	20:8	0:0	4	!
water	20:9	0:0	4	nut
op	20:12	0:0	4	->
water	20:14	0:0	4	stream
op	20:21	0:0	4	||
op	20:24	0:0	4	!
water	20:25	0:0	4	nut
op	20:28	0:0	4	->
water	20:30	0:0	4	chapter
op	20:38	0:0	4	||
op	20:41	0:0	4	!
water	20:42	0:0	4	nut
op	20:45	0:0	4	->
water	20:47	0:0	4	time_base
stmts	20:58	25:4	3	
water	20:58	0:0	4	{
call	21:8	21:29	4	av_freep
arg	21:17	21:29	5	&nut->stream
op	21:17	0:0	6	&
water	21:18	0:0	6	nut
op	21:21	0:0	6	->
water	21:23	0:0	6	stream
water	21:30	0:0	4	;
call	22:8	22:30	4	av_freep
arg	22:17	22:30	5	&nut->chapter
op	22:17	0:0	6	&
water	22:18	0:0	6	nut
op	22:21	0:0	6	->
water	22:23	0:0	6	chapter
water	22:31	0:0	4	;
call	23:8	23:32	4	av_freep
arg	23:17	23:32	5	&nut->time_base
op	23:17	0:0	6	&
water	23:18	0:0	6	nut
op	23:21	0:0	6	->
water	23:23	0:0	6	time_base
water	23:33	0:0	4	;
return	24:8	24:30	4	AVERROR(ENOMEM)
call	24:15	24:29	5	AVERROR
arg	24:23	24:29	6	ENOMEM
water	24:23	0:0	7	ENOMEM
water	25:4	0:0	4	}
for	26:4	51:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	26:9	26:14	3	i = 0 ;
water	26:9	0:0	4	i
op	26:11	0:0	4	=
water	26:13	0:0	4	0
water	26:14	0:0	4	;
cond	26:16	26:23	3	i < s -> nb_streams
water	26:16	0:0	4	i
op	26:18	0:0	4	<
water	26:20	0:0	4	s
op	26:21	0:0	4	->
water	26:23	0:0	4	nb_streams
forexpr	26:35	26:36	3	i ++
water	26:35	0:0	4	i
op	26:36	0:0	4	++
stmts	26:40	51:4	3	
water	26:40	0:0	4	{
decl	27:8	27:36	4	AVStream	*st
op	27:21	0:0	4	=
water	27:23	0:0	4	s
op	27:24	0:0	4	->
water	27:26	0:0	4	streams
op	27:33	0:0	4	[
water	27:34	0:0	4	i
op	27:35	0:0	4	]
decl	28:8	28:17	4	int	ssize
decl	29:8	29:28	4	AVRational	time_base
call	30:8	30:75	4	ff_parse_specific_params
arg	30:33	30:35	5	st
water	30:33	0:0	6	st
arg	30:37	30:51	5	&time_base.den
op	30:37	0:0	6	&
water	30:38	0:0	6	time_base
op	30:47	0:0	6	.
water	30:48	0:0	6	den
arg	30:53	30:59	5	&ssize
op	30:53	0:0	6	&
water	30:54	0:0	6	ssize
arg	30:61	30:75	5	&time_base.num
op	30:61	0:0	6	&
water	30:62	0:0	6	time_base
op	30:71	0:0	6	.
water	30:72	0:0	6	num
water	30:76	0:0	4	;
if	31:8	33:8	4	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO && st -> codec -> sample_rate)
cond	31:12	31:70	5	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO && st -> codec -> sample_rate
water	31:12	0:0	6	st
op	31:14	0:0	6	->
water	31:16	0:0	6	codec
op	31:21	0:0	6	->
water	31:23	0:0	6	codec_type
op	31:34	0:0	6	==
water	31:37	0:0	6	AVMEDIA_TYPE_AUDIO
op	31:56	0:0	6	&&
water	31:59	0:0	6	st
op	31:61	0:0	6	->
water	31:63	0:0	6	codec
op	31:68	0:0	6	->
water	31:70	0:0	6	sample_rate
stmts	31:83	33:8	5	
water	31:83	0:0	6	{
water	32:12	0:0	6	time_base
op	32:22	0:0	6	=
water	32:24	0:0	6	(
water	32:25	0:0	6	AVRational
water	32:35	0:0	6	)
water	32:37	0:0	6	{
water	32:38	0:0	6	1
water	32:39	0:0	6	,
water	32:41	0:0	6	st
op	32:43	0:0	6	->
water	32:45	0:0	6	codec
op	32:50	0:0	6	->
water	32:52	0:0	6	sample_rate
water	32:63	0:0	6	}
water	32:64	0:0	6	;
water	33:8	0:0	6	}
else	33:10	35:8	4
stmts	33:15	35:8	5	
water	33:15	0:0	6	{
water	34:12	0:0	6	time_base
op	34:22	0:0	6	=
call	34:24	34:55	6	ff_choose_timebase
arg	34:43	34:44	7	s
water	34:43	0:0	8	s
arg	34:46	34:48	7	st
water	34:46	0:0	8	st
arg	34:50	34:55	7	48000
water	34:50	0:0	8	48000
water	34:56	0:0	6	;
water	35:8	0:0	6	}
call	36:8	36:64	4	avpriv_set_pts_info
arg	36:28	36:30	5	st
water	36:28	0:0	6	st
arg	36:32	36:34	5	64
water	36:32	0:0	6	64
arg	36:36	36:49	5	time_base.num
water	36:36	0:0	6	time_base
op	36:45	0:0	6	.
water	36:46	0:0	6	num
arg	36:51	36:64	5	time_base.den
water	36:51	0:0	6	time_base
op	36:60	0:0	6	.
water	36:61	0:0	6	den
water	36:65	0:0	4	;
for	37:8	40:12	4	(j = 0 ;j < nut -> time_base_count;j ++)
forinit	37:13	37:18	5	j = 0 ;
water	37:13	0:0	6	j
op	37:15	0:0	6	=
water	37:17	0:0	6	0
water	37:18	0:0	6	;
cond	37:20	37:29	5	j < nut -> time_base_count
water	37:20	0:0	6	j
op	37:22	0:0	6	<
water	37:24	0:0	6	nut
op	37:27	0:0	6	->
water	37:29	0:0	6	time_base_count
forexpr	37:46	37:47	5	j ++
water	37:46	0:0	6	j
op	37:47	0:0	6	++
stmts	38:12	40:12	5	
if	38:12	40:12	6	(!memcmp (& time_base ,& nut -> time_base [ j ] ,sizeof ( AVRational ) ))
cond	38:16	38:74	7	!memcmp (& time_base ,& nut -> time_base [ j ] ,sizeof ( AVRational ) )
op	38:16	0:0	8	!
call	38:17	38:74	8	memcmp
arg	38:24	38:34	9	&time_base
op	38:24	0:0	10	&
water	38:25	0:0	10	time_base
arg	38:36	38:54	9	&nut->time_base[j]
op	38:36	0:0	10	&
water	38:37	0:0	10	nut
op	38:40	0:0	10	->
water	38:42	0:0	10	time_base
op	38:51	0:0	10	[
water	38:52	0:0	10	j
op	38:53	0:0	10	]
arg	38:56	38:74	9	sizeof(AVRational)
op	38:56	0:0	10	sizeof
water	38:62	0:0	10	(
water	38:63	0:0	10	AVRational
water	38:73	0:0	10	)
stmts	38:77	40:12	7	
water	38:77	0:0	8	{
break	39:16	39:21	8	
water	40:12	0:0	8	}
water	41:8	0:0	4	nut
op	41:11	0:0	4	->
water	41:13	0:0	4	time_base
op	41:22	0:0	4	[
water	41:23	0:0	4	j
op	41:24	0:0	4	]
op	41:33	0:0	4	=
water	41:35	0:0	4	time_base
water	41:44	0:0	4	;
water	42:8	0:0	4	nut
op	42:11	0:0	4	->
water	42:13	0:0	4	stream
op	42:19	0:0	4	[
water	42:20	0:0	4	i
op	42:21	0:0	4	]
op	42:22	0:0	4	.
water	42:23	0:0	4	time_base
op	42:33	0:0	4	=
op	42:35	0:0	4	&
water	42:36	0:0	4	nut
op	42:39	0:0	4	->
water	42:41	0:0	4	time_base
op	42:50	0:0	4	[
water	42:51	0:0	4	j
op	42:52	0:0	4	]
water	42:53	0:0	4	;
if	43:8	44:34	4	(j == nut -> time_base_count)
cond	43:12	43:22	5	j == nut -> time_base_count
water	43:12	0:0	6	j
op	43:14	0:0	6	==
water	43:17	0:0	6	nut
op	43:20	0:0	6	->
water	43:22	0:0	6	time_base_count
stmts	44:12	44:34	5	
water	44:12	0:0	6	nut
op	44:15	0:0	6	->
water	44:17	0:0	6	time_base_count
op	44:32	0:0	6	++
water	44:34	0:0	6	;
if	45:8	46:44	4	(INT64_C (1000 ) * time_base . num >= time_base . den)
cond	45:12	45:55	5	INT64_C (1000 ) * time_base . num >= time_base . den
call	45:12	45:24	6	INT64_C
arg	45:20	45:24	7	1000
water	45:20	0:0	8	1000
op	45:26	0:0	6	*
water	45:28	0:0	6	time_base
op	45:37	0:0	6	.
water	45:38	0:0	6	num
op	45:42	0:0	6	>=
water	45:45	0:0	6	time_base
op	45:54	0:0	6	.
water	45:55	0:0	6	den
stmts	46:12	46:44	5	
water	46:12	0:0	6	nut
op	46:15	0:0	6	->
water	46:17	0:0	6	stream
op	46:23	0:0	6	[
water	46:24	0:0	6	i
op	46:25	0:0	6	]
op	46:26	0:0	6	.
water	46:27	0:0	6	msb_pts_shift
op	46:41	0:0	6	=
water	46:43	0:0	6	7
water	46:44	0:0	6	;
else	47:8	48:45	4
stmts	48:12	48:45	5	
water	48:12	0:0	6	nut
op	48:15	0:0	6	->
water	48:17	0:0	6	stream
op	48:23	0:0	6	[
water	48:24	0:0	6	i
op	48:25	0:0	6	]
op	48:26	0:0	6	.
water	48:27	0:0	6	msb_pts_shift
op	48:41	0:0	6	=
water	48:43	0:0	6	14
water	48:45	0:0	6	;
water	49:8	0:0	4	nut
op	49:11	0:0	4	->
water	49:13	0:0	4	stream
op	49:19	0:0	4	[
water	49:20	0:0	4	i
op	49:21	0:0	4	]
op	49:22	0:0	4	.
water	49:23	0:0	4	max_pts_distance
op	49:40	0:0	4	=
call	50:12	50:46	4	FFMAX
arg	50:18	50:31	5	time_base.den
water	50:18	0:0	6	time_base
op	50:27	0:0	6	.
water	50:28	0:0	6	den
arg	50:33	50:46	5	time_base.num
water	50:33	0:0	6	time_base
op	50:42	0:0	6	.
water	50:43	0:0	6	num
op	50:48	0:0	4	/
water	50:50	0:0	4	time_base
op	50:59	0:0	4	.
water	50:60	0:0	4	num
water	50:63	0:0	4	;
water	51:4	0:0	4	}
for	52:4	61:4	2	(i = 0 ;i < s -> nb_chapters;i ++)
forinit	52:9	52:14	3	i = 0 ;
water	52:9	0:0	4	i
op	52:11	0:0	4	=
water	52:13	0:0	4	0
water	52:14	0:0	4	;
cond	52:16	52:23	3	i < s -> nb_chapters
water	52:16	0:0	4	i
op	52:18	0:0	4	<
water	52:20	0:0	4	s
op	52:21	0:0	4	->
water	52:23	0:0	4	nb_chapters
forexpr	52:36	52:37	3	i ++
water	52:36	0:0	4	i
op	52:37	0:0	4	++
stmts	52:41	61:4	3	
water	52:41	0:0	4	{
decl	53:8	53:38	4	AVChapter	*ch
op	53:22	0:0	4	=
water	53:24	0:0	4	s
op	53:25	0:0	4	->
water	53:27	0:0	4	chapters
op	53:35	0:0	4	[
water	53:36	0:0	4	i
op	53:37	0:0	4	]
for	54:8	56:21	4	(j = 0 ;j < nut -> time_base_count;j ++)
forinit	54:13	54:18	5	j = 0 ;
water	54:13	0:0	6	j
op	54:15	0:0	6	=
water	54:17	0:0	6	0
water	54:18	0:0	6	;
cond	54:20	54:29	5	j < nut -> time_base_count
water	54:20	0:0	6	j
op	54:22	0:0	6	<
water	54:24	0:0	6	nut
op	54:27	0:0	6	->
water	54:29	0:0	6	time_base_count
forexpr	54:46	54:47	5	j ++
water	54:46	0:0	6	j
op	54:47	0:0	6	++
stmts	55:12	56:21	5	
if	55:12	56:21	6	(!memcmp (& ch -> time_base ,& nut -> time_base [ j ] ,sizeof ( AVRational ) ))
cond	55:16	55:78	7	!memcmp (& ch -> time_base ,& nut -> time_base [ j ] ,sizeof ( AVRational ) )
op	55:16	0:0	8	!
call	55:17	55:78	8	memcmp
arg	55:24	55:38	9	&ch->time_base
op	55:24	0:0	10	&
water	55:25	0:0	10	ch
op	55:27	0:0	10	->
water	55:29	0:0	10	time_base
arg	55:40	55:58	9	&nut->time_base[j]
op	55:40	0:0	10	&
water	55:41	0:0	10	nut
op	55:44	0:0	10	->
water	55:46	0:0	10	time_base
op	55:55	0:0	10	[
water	55:56	0:0	10	j
op	55:57	0:0	10	]
arg	55:60	55:78	9	sizeof(AVRational)
op	55:60	0:0	10	sizeof
water	55:66	0:0	10	(
water	55:67	0:0	10	AVRational
water	55:77	0:0	10	)
stmts	56:16	56:21	7	
break	56:16	56:21	8	
water	57:8	0:0	4	nut
op	57:11	0:0	4	->
water	57:13	0:0	4	time_base
op	57:22	0:0	4	[
water	57:23	0:0	4	j
op	57:24	0:0	4	]
op	57:34	0:0	4	=
water	57:36	0:0	4	ch
op	57:38	0:0	4	->
water	57:40	0:0	4	time_base
water	57:49	0:0	4	;
water	58:8	0:0	4	nut
op	58:11	0:0	4	->
water	58:13	0:0	4	chapter
op	58:20	0:0	4	[
water	58:21	0:0	4	i
op	58:22	0:0	4	]
op	58:23	0:0	4	.
water	58:24	0:0	4	time_base
op	58:34	0:0	4	=
op	58:36	0:0	4	&
water	58:37	0:0	4	nut
op	58:40	0:0	4	->
water	58:42	0:0	4	time_base
op	58:51	0:0	4	[
water	58:52	0:0	4	j
op	58:53	0:0	4	]
water	58:54	0:0	4	;
if	59:8	60:34	4	(j == nut -> time_base_count)
cond	59:12	59:22	5	j == nut -> time_base_count
water	59:12	0:0	6	j
op	59:14	0:0	6	==
water	59:17	0:0	6	nut
op	59:20	0:0	6	->
water	59:22	0:0	6	time_base_count
stmts	60:12	60:34	5	
water	60:12	0:0	6	nut
op	60:15	0:0	6	->
water	60:17	0:0	6	time_base_count
op	60:32	0:0	6	++
water	60:34	0:0	6	;
water	61:4	0:0	4	}
water	62:4	0:0	2	nut
op	62:7	0:0	2	->
water	62:9	0:0	2	max_distance
op	62:22	0:0	2	=
water	62:24	0:0	2	MAX_DISTANCE
water	62:36	0:0	2	;
call	63:4	63:27	2	build_elision_headers
arg	63:26	63:27	3	s
water	63:26	0:0	4	s
water	63:28	0:0	2	;
call	64:4	64:22	2	build_frame_code
arg	64:21	64:22	3	s
water	64:21	0:0	4	s
water	64:23	0:0	2	;
call	65:4	65:57	2	av_assert0
arg	65:15	65:57	3	nut->frame_code['N'].flags==FLAG_INVALID
water	65:15	0:0	4	nut
op	65:18	0:0	4	->
water	65:20	0:0	4	frame_code
op	65:30	0:0	4	[
water	65:31	0:0	4	'N'
op	65:34	0:0	4	]
op	65:35	0:0	4	.
water	65:36	0:0	4	flags
op	65:42	0:0	4	==
water	65:45	0:0	4	FLAG_INVALID
water	65:58	0:0	2	;
call	66:4	66:47	2	avio_write
arg	66:15	66:17	3	bc
water	66:15	0:0	4	bc
arg	66:19	66:28	3	ID_STRING
water	66:19	0:0	4	ID_STRING
arg	66:30	66:47	3	strlen(ID_STRING)
call	66:30	66:46	4	strlen
arg	66:37	66:46	5	ID_STRING
water	66:37	0:0	6	ID_STRING
water	66:48	0:0	2	;
call	67:4	67:17	2	avio_w8
arg	67:12	67:14	3	bc
water	67:12	0:0	4	bc
arg	67:16	67:17	3	0
water	67:16	0:0	4	0
water	67:18	0:0	2	;
if	68:4	69:18	2	(( ret =write_headers (s ,bc ) ) < 0)
cond	68:8	68:39	3	( ret =write_headers (s ,bc ) ) < 0
water	68:8	0:0	4	(
water	68:9	0:0	4	ret
op	68:13	0:0	4	=
call	68:15	68:34	4	write_headers
arg	68:29	68:30	5	s
water	68:29	0:0	6	s
arg	68:32	68:34	5	bc
water	68:32	0:0	6	bc
water	68:35	0:0	4	)
op	68:37	0:0	4	<
water	68:39	0:0	4	0
stmts	69:8	69:18	3	
return	69:8	69:18	4	ret
water	69:15	0:0	5	ret
if	70:4	71:32	2	(s -> avoid_negative_ts < 0)
cond	70:8	70:31	3	s -> avoid_negative_ts < 0
water	70:8	0:0	4	s
op	70:9	0:0	4	->
water	70:11	0:0	4	avoid_negative_ts
op	70:29	0:0	4	<
water	70:31	0:0	4	0
stmts	71:8	71:32	3	
water	71:8	0:0	4	s
op	71:9	0:0	4	->
water	71:11	0:0	4	avoid_negative_ts
op	71:29	0:0	4	=
water	71:31	0:0	4	1
water	71:32	0:0	4	;
call	72:4	72:17	2	avio_flush
arg	72:15	72:17	3	bc
water	72:15	0:0	4	bc
water	72:18	0:0	2	;
return	73:4	73:12	2	0
water	73:11	0:0	3	0
