func	2:0	40:0	0	static void	denoise_spatial
params	2:27	0:0	1	
param	2:28	2:44	2	HQDN3DContext *	s
param	3:28	3:40	2	uint8_t *	src
param	3:42	3:54	2	uint8_t *	dst
param	4:28	4:46	2	uint16_t *	line_ant
param	4:48	4:67	2	uint16_t *	frame_ant
param	5:28	5:33	2	int	w
param	5:35	5:40	2	int	h
param	5:42	5:53	2	int	sstride
param	5:55	5:66	2	int	dstride
param	6:28	6:44	2	int16_t *	spatial
param	6:46	6:63	2	int16_t *	temporal
param	6:65	6:74	2	int	depth
stmnts	0:0	39:4	1	
decl	8:4	8:13	2	long	x
water	8:10	0:0	2	,
decl	8:4	8:13	2	long	y
decl	9:4	9:22	2	uint32_t	pixel_ant
decl	10:4	10:16	2	uint32_t	tmp
water	11:4	0:0	2	spatial
op	11:13	0:0	2	+=
water	11:16	0:0	2	256
op	11:20	0:0	2	<<
water	11:23	0:0	2	LUT_BITS
water	11:31	0:0	2	;
water	12:4	0:0	2	temporal
op	12:13	0:0	2	+=
water	12:16	0:0	2	256
op	12:20	0:0	2	<<
water	12:23	0:0	2	LUT_BITS
water	12:31	0:0	2	;
water	15:4	0:0	2	pixel_ant
op	15:14	0:0	2	=
call	15:16	15:22	2	LOAD
arg	15:21	15:22	3	0
water	15:21	0:0	4	0
water	15:23	0:0	2	;
for	16:4	20:4	2	(x = 0 ;x < w;x ++)
forinit	16:9	16:14	3	x = 0 ;
water	16:9	0:0	4	x
op	16:11	0:0	4	=
water	16:13	0:0	4	0
water	16:14	0:0	4	;
cond	16:16	16:20	3	x < w
water	16:16	0:0	4	x
op	16:18	0:0	4	<
water	16:20	0:0	4	w
forexpr	16:23	16:24	3	x ++
water	16:23	0:0	4	x
op	16:24	0:0	4	++
stmts	16:28	20:4	3	
water	16:28	0:0	4	{
water	17:8	0:0	4	line_ant
op	17:16	0:0	4	[
water	17:17	0:0	4	x
op	17:18	0:0	4	]
op	17:20	0:0	4	=
water	17:22	0:0	4	tmp
op	17:26	0:0	4	=
water	17:28	0:0	4	pixel_ant
op	17:38	0:0	4	=
call	17:40	17:82	4	lowpass
arg	17:48	17:57	5	pixel_ant
water	17:48	0:0	6	pixel_ant
arg	17:59	17:66	5	LOAD(x)
call	17:59	17:65	6	LOAD
arg	17:64	17:65	7	x
water	17:64	0:0	8	x
arg	17:68	17:75	5	spatial
water	17:68	0:0	6	spatial
arg	17:77	17:82	5	depth
water	17:77	0:0	6	depth
water	17:83	0:0	4	;
water	18:8	0:0	4	frame_ant
op	18:17	0:0	4	[
water	18:18	0:0	4	x
op	18:19	0:0	4	]
op	18:21	0:0	4	=
water	18:23	0:0	4	tmp
op	18:27	0:0	4	=
call	18:29	18:71	4	lowpass
arg	18:37	18:49	5	frame_ant[x]
water	18:37	0:0	6	frame_ant
op	18:46	0:0	6	[
water	18:47	0:0	6	x
op	18:48	0:0	6	]
arg	18:51	18:54	5	tmp
water	18:51	0:0	6	tmp
arg	18:56	18:64	5	temporal
water	18:56	0:0	6	temporal
arg	18:66	18:71	5	depth
water	18:66	0:0	6	depth
water	18:72	0:0	4	;
call	19:8	19:20	4	STORE
arg	19:14	19:15	5	x
water	19:14	0:0	6	x
arg	19:17	19:20	5	tmp
water	19:17	0:0	6	tmp
water	19:21	0:0	4	;
water	20:4	0:0	4	}
for	21:4	39:4	2	(y = 1 ;y < h;y ++)
forinit	21:9	21:14	3	y = 1 ;
water	21:9	0:0	4	y
op	21:11	0:0	4	=
water	21:13	0:0	4	1
water	21:14	0:0	4	;
cond	21:16	21:20	3	y < h
water	21:16	0:0	4	y
op	21:18	0:0	4	<
water	21:20	0:0	4	h
forexpr	21:23	21:24	3	y ++
water	21:23	0:0	4	y
op	21:24	0:0	4	++
stmts	21:28	39:4	3	
water	21:28	0:0	4	{
water	22:8	0:0	4	src
op	22:12	0:0	4	+=
water	22:15	0:0	4	sstride
water	22:22	0:0	4	;
water	23:8	0:0	4	dst
op	23:12	0:0	4	+=
water	23:15	0:0	4	dstride
water	23:22	0:0	4	;
water	24:8	0:0	4	frame_ant
op	24:18	0:0	4	+=
water	24:21	0:0	4	w
water	24:22	0:0	4	;
if	25:8	28:8	4	(s -> denoise_row [ depth ])
cond	25:12	25:32	5	s -> denoise_row [ depth ]
water	25:12	0:0	6	s
op	25:13	0:0	6	->
water	25:15	0:0	6	denoise_row
op	25:26	0:0	6	[
water	25:27	0:0	6	depth
op	25:32	0:0	6	]
stmts	25:35	28:8	5	
water	25:35	0:0	6	{
water	26:12	0:0	6	s
op	26:13	0:0	6	->
water	26:15	0:0	6	denoise_row
op	26:26	0:0	6	[
water	26:27	0:0	6	depth
op	26:32	0:0	6	]
water	26:33	0:0	6	(
water	26:34	0:0	6	src
water	26:37	0:0	6	,
water	26:39	0:0	6	dst
water	26:42	0:0	6	,
water	26:44	0:0	6	line_ant
water	26:52	0:0	6	,
water	26:54	0:0	6	frame_ant
water	26:63	0:0	6	,
water	26:65	0:0	6	w
water	26:66	0:0	6	,
water	26:68	0:0	6	spatial
water	26:75	0:0	6	,
water	26:77	0:0	6	temporal
water	26:85	0:0	6	)
water	26:86	0:0	6	;
continue	27:12	27:20	6	
water	28:8	0:0	6	}
water	29:8	0:0	4	pixel_ant
op	29:18	0:0	4	=
call	29:20	29:26	4	LOAD
arg	29:25	29:26	5	0
water	29:25	0:0	6	0
water	29:27	0:0	4	;
for	30:8	35:8	4	(x = 0 ;x < w - 1;x ++)
forinit	30:13	30:18	5	x = 0 ;
water	30:13	0:0	6	x
op	30:15	0:0	6	=
water	30:17	0:0	6	0
water	30:18	0:0	6	;
cond	30:20	30:26	5	x < w - 1
water	30:20	0:0	6	x
op	30:22	0:0	6	<
water	30:24	0:0	6	w
op	30:25	0:0	6	-
water	30:26	0:0	6	1
forexpr	30:29	30:30	5	x ++
water	30:29	0:0	6	x
op	30:30	0:0	6	++
stmts	30:34	35:8	5	
water	30:34	0:0	6	{
water	31:12	0:0	6	line_ant
op	31:20	0:0	6	[
water	31:21	0:0	6	x
op	31:22	0:0	6	]
op	31:24	0:0	6	=
water	31:26	0:0	6	tmp
op	31:30	0:0	6	=
call	31:32	31:78	6	lowpass
arg	31:40	31:51	7	line_ant[x]
water	31:40	0:0	8	line_ant
op	31:48	0:0	8	[
water	31:49	0:0	8	x
op	31:50	0:0	8	]
arg	31:53	31:62	7	pixel_ant
water	31:53	0:0	8	pixel_ant
arg	31:64	31:71	7	spatial
water	31:64	0:0	8	spatial
arg	31:73	31:78	7	depth
water	31:73	0:0	8	depth
water	31:79	0:0	6	;
water	32:12	0:0	6	pixel_ant
op	32:22	0:0	6	=
call	32:24	32:68	6	lowpass
arg	32:32	32:41	7	pixel_ant
water	32:32	0:0	8	pixel_ant
arg	32:43	32:52	7	LOAD(x+1)
call	32:43	32:51	8	LOAD
arg	32:48	32:51	9	x+1
water	32:48	0:0	10	x
op	32:49	0:0	10	+
water	32:50	0:0	10	1
arg	32:54	32:61	7	spatial
water	32:54	0:0	8	spatial
arg	32:63	32:68	7	depth
water	32:63	0:0	8	depth
water	32:69	0:0	6	;
water	33:12	0:0	6	frame_ant
op	33:21	0:0	6	[
water	33:22	0:0	6	x
op	33:23	0:0	6	]
op	33:25	0:0	6	=
water	33:27	0:0	6	tmp
op	33:31	0:0	6	=
call	33:33	33:75	6	lowpass
arg	33:41	33:53	7	frame_ant[x]
water	33:41	0:0	8	frame_ant
op	33:50	0:0	8	[
water	33:51	0:0	8	x
op	33:52	0:0	8	]
arg	33:55	33:58	7	tmp
water	33:55	0:0	8	tmp
arg	33:60	33:68	7	temporal
water	33:60	0:0	8	temporal
arg	33:70	33:75	7	depth
water	33:70	0:0	8	depth
water	33:76	0:0	6	;
call	34:12	34:24	6	STORE
arg	34:18	34:19	7	x
water	34:18	0:0	8	x
arg	34:21	34:24	7	tmp
water	34:21	0:0	8	tmp
water	34:25	0:0	6	;
water	35:8	0:0	6	}
water	36:8	0:0	4	line_ant
op	36:16	0:0	4	[
water	36:17	0:0	4	x
op	36:18	0:0	4	]
op	36:20	0:0	4	=
water	36:22	0:0	4	tmp
op	36:26	0:0	4	=
call	36:28	36:74	4	lowpass
arg	36:36	36:47	5	line_ant[x]
water	36:36	0:0	6	line_ant
op	36:44	0:0	6	[
water	36:45	0:0	6	x
op	36:46	0:0	6	]
arg	36:49	36:58	5	pixel_ant
water	36:49	0:0	6	pixel_ant
arg	36:60	36:67	5	spatial
water	36:60	0:0	6	spatial
arg	36:69	36:74	5	depth
water	36:69	0:0	6	depth
water	36:75	0:0	4	;
water	37:8	0:0	4	frame_ant
op	37:17	0:0	4	[
water	37:18	0:0	4	x
op	37:19	0:0	4	]
op	37:21	0:0	4	=
water	37:23	0:0	4	tmp
op	37:27	0:0	4	=
call	37:29	37:71	4	lowpass
arg	37:37	37:49	5	frame_ant[x]
water	37:37	0:0	6	frame_ant
op	37:46	0:0	6	[
water	37:47	0:0	6	x
op	37:48	0:0	6	]
arg	37:51	37:54	5	tmp
water	37:51	0:0	6	tmp
arg	37:56	37:64	5	temporal
water	37:56	0:0	6	temporal
arg	37:66	37:71	5	depth
water	37:66	0:0	6	depth
water	37:72	0:0	4	;
call	38:8	38:20	4	STORE
arg	38:14	38:15	5	x
water	38:14	0:0	6	x
arg	38:17	38:20	5	tmp
water	38:17	0:0	6	tmp
water	38:21	0:0	4	;
water	39:4	0:0	4	}
