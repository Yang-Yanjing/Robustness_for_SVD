func	1:0	45:0	0	static void	read_sbr_noise
params	1:26	0:0	1	
param	1:27	1:55	2	SpectralBandReplication *	sbr
param	1:57	1:74	2	GetBitContext *	gb
param	2:27	2:43	2	SBRData *	ch_data
param	2:45	2:51	2	int	ch
stmnts	0:0	44:42	1	
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	j
call	5:4	5:21	2	VLC_TYPE
arg	5:14	5:21	3	*t_huff
op	5:14	0:0	4	*
water	5:15	0:0	4	t_huff
op	5:22	0:0	2	[
water	5:23	0:0	2	2
op	5:24	0:0	2	]
water	5:25	0:0	2	,
water	5:27	0:0	2	(
op	5:28	0:0	2	*
water	5:29	0:0	2	f_huff
water	5:35	0:0	2	)
op	5:36	0:0	2	[
water	5:37	0:0	2	2
op	5:38	0:0	2	]
water	5:39	0:0	2	;
decl	6:4	6:20	2	int	t_lav
water	6:13	0:0	2	,
decl	6:4	6:20	2	int	f_lav
decl	7:4	7:54	2	int	delta
op	7:14	0:0	2	=
water	7:16	0:0	2	(
water	7:17	0:0	2	ch
op	7:20	0:0	2	==
water	7:23	0:0	2	1
op	7:25	0:0	2	&&
water	7:28	0:0	2	sbr
op	7:31	0:0	2	->
water	7:33	0:0	2	bs_coupling
op	7:45	0:0	2	==
water	7:48	0:0	2	1
water	7:49	0:0	2	)
op	7:51	0:0	2	+
water	7:53	0:0	2	1
if	8:4	13:4	2	(sbr -> bs_coupling && ch)
cond	8:8	8:28	3	sbr -> bs_coupling && ch
water	8:8	0:0	4	sbr
op	8:11	0:0	4	->
water	8:13	0:0	4	bs_coupling
op	8:25	0:0	4	&&
water	8:28	0:0	4	ch
stmts	8:32	13:4	3	
water	8:32	0:0	4	{
water	9:8	0:0	4	t_huff
op	9:15	0:0	4	=
water	9:17	0:0	4	vlc_sbr
op	9:24	0:0	4	[
water	9:25	0:0	4	T_HUFFMAN_NOISE_BAL_3_0DB
op	9:50	0:0	4	]
op	9:51	0:0	4	.
water	9:52	0:0	4	table
water	9:57	0:0	4	;
water	10:8	0:0	4	t_lav
op	10:15	0:0	4	=
water	10:17	0:0	4	vlc_sbr_lav
op	10:28	0:0	4	[
water	10:29	0:0	4	T_HUFFMAN_NOISE_BAL_3_0DB
op	10:54	0:0	4	]
water	10:55	0:0	4	;
water	11:8	0:0	4	f_huff
op	11:15	0:0	4	=
water	11:17	0:0	4	vlc_sbr
op	11:24	0:0	4	[
water	11:25	0:0	4	F_HUFFMAN_ENV_BAL_3_0DB
op	11:48	0:0	4	]
op	11:49	0:0	4	.
water	11:50	0:0	4	table
water	11:55	0:0	4	;
water	12:8	0:0	4	f_lav
op	12:15	0:0	4	=
water	12:17	0:0	4	vlc_sbr_lav
op	12:28	0:0	4	[
water	12:29	0:0	4	F_HUFFMAN_ENV_BAL_3_0DB
op	12:52	0:0	4	]
water	12:53	0:0	4	;
water	13:4	0:0	4	}
else	13:6	18:4	2
stmts	13:11	18:4	3	
water	13:11	0:0	4	{
water	14:8	0:0	4	t_huff
op	14:15	0:0	4	=
water	14:17	0:0	4	vlc_sbr
op	14:24	0:0	4	[
water	14:25	0:0	4	T_HUFFMAN_NOISE_3_0DB
op	14:46	0:0	4	]
op	14:47	0:0	4	.
water	14:48	0:0	4	table
water	14:53	0:0	4	;
water	15:8	0:0	4	t_lav
op	15:15	0:0	4	=
water	15:17	0:0	4	vlc_sbr_lav
op	15:28	0:0	4	[
water	15:29	0:0	4	T_HUFFMAN_NOISE_3_0DB
op	15:50	0:0	4	]
water	15:51	0:0	4	;
water	16:8	0:0	4	f_huff
op	16:15	0:0	4	=
water	16:17	0:0	4	vlc_sbr
op	16:24	0:0	4	[
water	16:25	0:0	4	F_HUFFMAN_ENV_3_0DB
op	16:44	0:0	4	]
op	16:45	0:0	4	.
water	16:46	0:0	4	table
water	16:51	0:0	4	;
water	17:8	0:0	4	f_lav
op	17:15	0:0	4	=
water	17:17	0:0	4	vlc_sbr_lav
op	17:28	0:0	4	[
water	17:29	0:0	4	F_HUFFMAN_ENV_3_0DB
op	17:48	0:0	4	]
water	17:49	0:0	4	;
water	18:4	0:0	4	}
for	20:4	29:4	2	(i = 0 ;i < ch_data -> bs_num_noise;i ++)
forinit	20:9	20:14	3	i = 0 ;
water	20:9	0:0	4	i
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:29	3	i < ch_data -> bs_num_noise
water	20:16	0:0	4	i
op	20:18	0:0	4	<
water	20:20	0:0	4	ch_data
op	20:27	0:0	4	->
water	20:29	0:0	4	bs_num_noise
forexpr	20:43	20:44	3	i ++
water	20:43	0:0	4	i
op	20:44	0:0	4	++
stmts	20:48	29:4	3	
water	20:48	0:0	4	{
if	21:8	24:8	4	(ch_data -> bs_df_noise [ i ])
cond	21:12	21:34	5	ch_data -> bs_df_noise [ i ]
water	21:12	0:0	6	ch_data
op	21:19	0:0	6	->
water	21:21	0:0	6	bs_df_noise
op	21:32	0:0	6	[
water	21:33	0:0	6	i
op	21:34	0:0	6	]
stmts	21:37	24:8	5	
water	21:37	0:0	6	{
for	22:12	23:130	6	(j = 0 ;j < sbr -> n_q;j ++)
forinit	22:17	22:22	7	j = 0 ;
water	22:17	0:0	8	j
op	22:19	0:0	8	=
water	22:21	0:0	8	0
water	22:22	0:0	8	;
cond	22:24	22:33	7	j < sbr -> n_q
water	22:24	0:0	8	j
op	22:26	0:0	8	<
water	22:28	0:0	8	sbr
op	22:31	0:0	8	->
water	22:33	0:0	8	n_q
forexpr	22:38	22:39	7	j ++
water	22:38	0:0	8	j
op	22:39	0:0	8	++
stmts	23:16	23:130	7	
water	23:16	0:0	8	ch_data
op	23:23	0:0	8	->
water	23:25	0:0	8	noise_facs
op	23:35	0:0	8	[
water	23:36	0:0	8	i
op	23:38	0:0	8	+
water	23:40	0:0	8	1
op	23:41	0:0	8	]
op	23:42	0:0	8	[
water	23:43	0:0	8	j
op	23:44	0:0	8	]
op	23:45	0:0	8	.
water	23:46	0:0	8	mant
op	23:51	0:0	8	=
water	23:53	0:0	8	ch_data
op	23:60	0:0	8	->
water	23:62	0:0	8	noise_facs
op	23:72	0:0	8	[
water	23:73	0:0	8	i
op	23:74	0:0	8	]
op	23:75	0:0	8	[
water	23:76	0:0	8	j
op	23:77	0:0	8	]
op	23:78	0:0	8	.
water	23:79	0:0	8	mant
op	23:84	0:0	8	+
water	23:86	0:0	8	delta
op	23:92	0:0	8	*
water	23:94	0:0	8	(
call	23:95	23:120	8	get_vlc2
arg	23:104	23:106	9	gb
water	23:104	0:0	10	gb
arg	23:108	23:114	9	t_huff
water	23:108	0:0	10	t_huff
arg	23:116	23:117	9	9
water	23:116	0:0	10	9
arg	23:119	23:120	9	2
water	23:119	0:0	10	2
op	23:122	0:0	8	-
water	23:124	0:0	8	t_lav
water	23:129	0:0	8	)
water	23:130	0:0	8	;
water	24:8	0:0	6	}
else	24:10	28:8	4
stmts	24:15	28:8	5	
water	24:15	0:0	6	{
water	25:12	0:0	6	ch_data
op	25:19	0:0	6	->
water	25:21	0:0	6	noise_facs
op	25:31	0:0	6	[
water	25:32	0:0	6	i
op	25:34	0:0	6	+
water	25:36	0:0	6	1
op	25:37	0:0	6	]
op	25:38	0:0	6	[
water	25:39	0:0	6	0
op	25:40	0:0	6	]
op	25:41	0:0	6	.
water	25:42	0:0	6	mant
op	25:47	0:0	6	=
water	25:49	0:0	6	delta
call	25:55	25:71	6	*get_bits
arg	25:66	25:68	7	gb
water	25:66	0:0	8	gb
arg	25:70	25:71	7	5
water	25:70	0:0	8	5
water	25:72	0:0	6	;
for	26:12	27:138	6	(j = 1 ;j < sbr -> n_q;j ++)
forinit	26:17	26:22	7	j = 1 ;
water	26:17	0:0	8	j
op	26:19	0:0	8	=
water	26:21	0:0	8	1
water	26:22	0:0	8	;
cond	26:24	26:33	7	j < sbr -> n_q
water	26:24	0:0	8	j
op	26:26	0:0	8	<
water	26:28	0:0	8	sbr
op	26:31	0:0	8	->
water	26:33	0:0	8	n_q
forexpr	26:38	26:39	7	j ++
water	26:38	0:0	8	j
op	26:39	0:0	8	++
stmts	27:16	27:138	7	
water	27:16	0:0	8	ch_data
op	27:23	0:0	8	->
water	27:25	0:0	8	noise_facs
op	27:35	0:0	8	[
water	27:36	0:0	8	i
op	27:38	0:0	8	+
water	27:40	0:0	8	1
op	27:41	0:0	8	]
op	27:42	0:0	8	[
water	27:43	0:0	8	j
op	27:44	0:0	8	]
op	27:45	0:0	8	.
water	27:46	0:0	8	mant
op	27:51	0:0	8	=
water	27:53	0:0	8	ch_data
op	27:60	0:0	8	->
water	27:62	0:0	8	noise_facs
op	27:72	0:0	8	[
water	27:73	0:0	8	i
op	27:75	0:0	8	+
water	27:77	0:0	8	1
op	27:78	0:0	8	]
op	27:79	0:0	8	[
water	27:80	0:0	8	j
op	27:82	0:0	8	-
water	27:84	0:0	8	1
op	27:85	0:0	8	]
op	27:86	0:0	8	.
water	27:87	0:0	8	mant
op	27:92	0:0	8	+
water	27:94	0:0	8	delta
op	27:100	0:0	8	*
water	27:102	0:0	8	(
call	27:103	27:128	8	get_vlc2
arg	27:112	27:114	9	gb
water	27:112	0:0	10	gb
arg	27:116	27:122	9	f_huff
water	27:116	0:0	10	f_huff
arg	27:124	27:125	9	9
water	27:124	0:0	10	9
arg	27:127	27:128	9	3
water	27:127	0:0	10	3
op	27:130	0:0	8	-
water	27:132	0:0	8	f_lav
water	27:137	0:0	8	)
water	27:138	0:0	8	;
water	28:8	0:0	6	}
water	29:4	0:0	4	}
for	31:4	40:4	2	(i = 0 ;i < ch_data -> bs_num_noise;i ++)
forinit	31:9	31:14	3	i = 0 ;
water	31:9	0:0	4	i
op	31:11	0:0	4	=
water	31:13	0:0	4	0
water	31:14	0:0	4	;
cond	31:16	31:29	3	i < ch_data -> bs_num_noise
water	31:16	0:0	4	i
op	31:18	0:0	4	<
water	31:20	0:0	4	ch_data
op	31:27	0:0	4	->
water	31:29	0:0	4	bs_num_noise
forexpr	31:43	31:44	3	i ++
water	31:43	0:0	4	i
op	31:44	0:0	4	++
stmts	31:48	40:4	3	
water	31:48	0:0	4	{
if	32:8	35:8	4	(ch_data -> bs_df_noise [ i ])
cond	32:12	32:34	5	ch_data -> bs_df_noise [ i ]
water	32:12	0:0	6	ch_data
op	32:19	0:0	6	->
water	32:21	0:0	6	bs_df_noise
op	32:32	0:0	6	[
water	32:33	0:0	6	i
op	32:34	0:0	6	]
stmts	32:37	35:8	5	
water	32:37	0:0	6	{
for	33:12	34:120	6	(j = 0 ;j < sbr -> n_q;j ++)
forinit	33:17	33:22	7	j = 0 ;
water	33:17	0:0	8	j
op	33:19	0:0	8	=
water	33:21	0:0	8	0
water	33:22	0:0	8	;
cond	33:24	33:33	7	j < sbr -> n_q
water	33:24	0:0	8	j
op	33:26	0:0	8	<
water	33:28	0:0	8	sbr
op	33:31	0:0	8	->
water	33:33	0:0	8	n_q
forexpr	33:38	33:39	7	j ++
water	33:38	0:0	8	j
op	33:39	0:0	8	++
stmts	34:16	34:120	7	
water	34:16	0:0	8	ch_data
op	34:23	0:0	8	->
water	34:25	0:0	8	noise_facs
op	34:35	0:0	8	[
water	34:36	0:0	8	i
op	34:38	0:0	8	+
water	34:40	0:0	8	1
op	34:41	0:0	8	]
op	34:42	0:0	8	[
water	34:43	0:0	8	j
op	34:44	0:0	8	]
op	34:46	0:0	8	=
water	34:48	0:0	8	ch_data
op	34:55	0:0	8	->
water	34:57	0:0	8	noise_facs
op	34:67	0:0	8	[
water	34:68	0:0	8	i
op	34:69	0:0	8	]
op	34:70	0:0	8	[
water	34:71	0:0	8	j
op	34:72	0:0	8	]
op	34:74	0:0	8	+
water	34:76	0:0	8	delta
op	34:82	0:0	8	*
water	34:84	0:0	8	(
call	34:85	34:110	8	get_vlc2
arg	34:94	34:96	9	gb
water	34:94	0:0	10	gb
arg	34:98	34:104	9	t_huff
water	34:98	0:0	10	t_huff
arg	34:106	34:107	9	9
water	34:106	0:0	10	9
arg	34:109	34:110	9	2
water	34:109	0:0	10	2
op	34:112	0:0	8	-
water	34:114	0:0	8	t_lav
water	34:119	0:0	8	)
water	34:120	0:0	8	;
water	35:8	0:0	6	}
else	35:10	39:8	4
stmts	35:15	39:8	5	
water	35:15	0:0	6	{
water	36:12	0:0	6	ch_data
op	36:19	0:0	6	->
water	36:21	0:0	6	noise_facs
op	36:31	0:0	6	[
water	36:32	0:0	6	i
op	36:34	0:0	6	+
water	36:36	0:0	6	1
op	36:37	0:0	6	]
op	36:38	0:0	6	[
water	36:39	0:0	6	0
op	36:40	0:0	6	]
op	36:42	0:0	6	=
water	36:44	0:0	6	delta
call	36:50	36:66	6	*get_bits
arg	36:61	36:63	7	gb
water	36:61	0:0	8	gb
arg	36:65	36:66	7	5
water	36:65	0:0	8	5
water	36:67	0:0	6	;
for	37:12	38:128	6	(j = 1 ;j < sbr -> n_q;j ++)
forinit	37:17	37:22	7	j = 1 ;
water	37:17	0:0	8	j
op	37:19	0:0	8	=
water	37:21	0:0	8	1
water	37:22	0:0	8	;
cond	37:24	37:33	7	j < sbr -> n_q
water	37:24	0:0	8	j
op	37:26	0:0	8	<
water	37:28	0:0	8	sbr
op	37:31	0:0	8	->
water	37:33	0:0	8	n_q
forexpr	37:38	37:39	7	j ++
water	37:38	0:0	8	j
op	37:39	0:0	8	++
stmts	38:16	38:128	7	
water	38:16	0:0	8	ch_data
op	38:23	0:0	8	->
water	38:25	0:0	8	noise_facs
op	38:35	0:0	8	[
water	38:36	0:0	8	i
op	38:38	0:0	8	+
water	38:40	0:0	8	1
op	38:41	0:0	8	]
op	38:42	0:0	8	[
water	38:43	0:0	8	j
op	38:44	0:0	8	]
op	38:46	0:0	8	=
water	38:48	0:0	8	ch_data
op	38:55	0:0	8	->
water	38:57	0:0	8	noise_facs
op	38:67	0:0	8	[
water	38:68	0:0	8	i
op	38:70	0:0	8	+
water	38:72	0:0	8	1
op	38:73	0:0	8	]
op	38:74	0:0	8	[
water	38:75	0:0	8	j
op	38:77	0:0	8	-
water	38:79	0:0	8	1
op	38:80	0:0	8	]
op	38:82	0:0	8	+
water	38:84	0:0	8	delta
op	38:90	0:0	8	*
water	38:92	0:0	8	(
call	38:93	38:118	8	get_vlc2
arg	38:102	38:104	9	gb
water	38:102	0:0	10	gb
arg	38:106	38:112	9	f_huff
water	38:106	0:0	10	f_huff
arg	38:114	38:115	9	9
water	38:114	0:0	10	9
arg	38:117	38:118	9	3
water	38:117	0:0	10	3
op	38:120	0:0	8	-
water	38:122	0:0	8	f_lav
water	38:127	0:0	8	)
water	38:128	0:0	8	;
water	39:8	0:0	6	}
water	40:4	0:0	4	}
call	43:4	44:41	2	memcpy
arg	43:11	43:33	3	ch_data->noise_facs[0]
water	43:11	0:0	4	ch_data
op	43:18	0:0	4	->
water	43:20	0:0	4	noise_facs
op	43:30	0:0	4	[
water	43:31	0:0	4	0
op	43:32	0:0	4	]
arg	43:35	43:77	3	ch_data->noise_facs[ch_data->bs_num_noise]
water	43:35	0:0	4	ch_data
op	43:42	0:0	4	->
water	43:44	0:0	4	noise_facs
op	43:54	0:0	4	[
water	43:55	0:0	4	ch_data
op	43:62	0:0	4	->
water	43:64	0:0	4	bs_num_noise
op	43:76	0:0	4	]
arg	44:11	44:41	3	sizeof(ch_data->noise_facs[0])
op	44:11	0:0	4	sizeof
water	44:17	0:0	4	(
water	44:18	0:0	4	ch_data
op	44:25	0:0	4	->
water	44:27	0:0	4	noise_facs
op	44:37	0:0	4	[
water	44:38	0:0	4	0
op	44:39	0:0	4	]
water	44:40	0:0	4	)
water	44:42	0:0	2	;
