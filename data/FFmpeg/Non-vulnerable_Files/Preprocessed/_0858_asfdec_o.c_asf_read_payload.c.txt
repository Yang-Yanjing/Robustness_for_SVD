func	1:0	64:0	0	static int	asf_read_payload
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
param	1:48	1:61	2	AVPacket *	pkt
stmnts	0:0	63:12	1	
decl	3:4	3:34	2	ASFContext	*asf
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:14	2	int	ret
water	5:11	0:0	2	,
decl	5:4	5:14	2	int	i
decl	6:4	6:29	2	ASFPacket	*asf_pkt
op	6:23	0:0	2	=
water	6:25	0:0	2	NULL
if	7:4	48:4	2	(! asf -> sub_left)
cond	7:8	7:14	3	! asf -> sub_left
op	7:8	0:0	4	!
water	7:9	0:0	4	asf
op	7:12	0:0	4	->
water	7:14	0:0	4	sub_left
stmts	7:24	48:4	3	
water	7:24	0:0	4	{
decl	8:8	8:35	4	uint32_t	off_len
water	8:24	0:0	4	,
decl	8:8	8:35	4	uint32_t	media_len
decl	9:8	9:26	4	uint8_t	stream_num
water	10:8	0:0	4	stream_num
op	10:19	0:0	4	=
call	10:21	10:31	4	avio_r8
arg	10:29	10:31	5	pb
water	10:29	0:0	6	pb
water	10:32	0:0	4	;
water	11:8	0:0	4	asf
op	11:11	0:0	4	->
water	11:13	0:0	4	stream_index
op	11:26	0:0	4	=
water	11:28	0:0	4	stream_num
op	11:39	0:0	4	&
water	11:41	0:0	4	ASF_STREAM_NUM
water	11:55	0:0	4	;
for	12:8	18:8	4	(i = 0 ;i < asf -> nb_streams;i ++)
forinit	12:13	12:18	5	i = 0 ;
water	12:13	0:0	6	i
op	12:15	0:0	6	=
water	12:17	0:0	6	0
water	12:18	0:0	6	;
cond	12:20	12:29	5	i < asf -> nb_streams
water	12:20	0:0	6	i
op	12:22	0:0	6	<
water	12:24	0:0	6	asf
op	12:27	0:0	6	->
water	12:29	0:0	6	nb_streams
forexpr	12:41	12:42	5	i ++
water	12:41	0:0	6	i
op	12:42	0:0	6	++
stmts	12:46	18:8	5	
water	12:46	0:0	6	{
if	13:12	17:12	6	(asf -> stream_index == asf -> asf_st [ i ] -> stream_index)
cond	13:16	13:53	7	asf -> stream_index == asf -> asf_st [ i ] -> stream_index
water	13:16	0:0	8	asf
op	13:19	0:0	8	->
water	13:21	0:0	8	stream_index
op	13:34	0:0	8	==
water	13:37	0:0	8	asf
op	13:40	0:0	8	->
water	13:42	0:0	8	asf_st
op	13:48	0:0	8	[
water	13:49	0:0	8	i
op	13:50	0:0	8	]
op	13:51	0:0	8	->
water	13:53	0:0	8	stream_index
stmts	13:67	17:12	7	
water	13:67	0:0	8	{
water	14:16	0:0	8	asf_pkt
op	14:38	0:0	8	=
op	14:40	0:0	8	&
water	14:41	0:0	8	asf
op	14:44	0:0	8	->
water	14:46	0:0	8	asf_st
op	14:52	0:0	8	[
water	14:53	0:0	8	i
op	14:54	0:0	8	]
op	14:55	0:0	8	->
water	14:57	0:0	8	pkt
water	14:60	0:0	8	;
water	15:16	0:0	8	asf_pkt
op	15:23	0:0	8	->
water	15:25	0:0	8	stream_index
op	15:38	0:0	8	=
water	15:40	0:0	8	asf
op	15:43	0:0	8	->
water	15:45	0:0	8	asf_st
op	15:51	0:0	8	[
water	15:52	0:0	8	i
op	15:53	0:0	8	]
op	15:54	0:0	8	->
water	15:56	0:0	8	index
water	15:61	0:0	8	;
break	16:16	16:21	8	
water	17:12	0:0	8	}
water	18:8	0:0	6	}
if	19:8	20:38	4	(! asf_pkt)
cond	19:12	19:13	5	! asf_pkt
op	19:12	0:0	6	!
water	19:13	0:0	6	asf_pkt
stmts	20:12	20:38	5	
return	20:12	20:38	6	AVERROR_INVALIDDATA
water	20:19	0:0	7	AVERROR_INVALIDDATA
if	21:8	22:45	4	(stream_num >> 7)
cond	21:12	21:26	5	stream_num >> 7
water	21:12	0:0	6	stream_num
op	21:23	0:0	6	>>
water	21:26	0:0	6	7
stmts	22:12	22:45	5	
water	22:12	0:0	6	asf_pkt
op	22:19	0:0	6	->
water	22:21	0:0	6	flags
op	22:27	0:0	6	|=
water	22:30	0:0	6	AV_PKT_FLAG_KEY
water	22:45	0:0	6	;
call	23:8	24:73	4	READ_LEN
arg	23:17	23:84	5	asf->prop_flags&ASF_PL_MASK_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_SIZE
water	23:17	0:0	6	asf
op	23:20	0:0	6	->
water	23:22	0:0	6	prop_flags
op	23:33	0:0	6	&
water	23:35	0:0	6	ASF_PL_MASK_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_SIZE
arg	24:17	24:62	5	ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_
water	24:17	0:0	6	ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_
arg	24:64	24:73	5	media_len
water	24:64	0:0	6	media_len
water	24:74	0:0	4	;
call	25:8	26:76	4	READ_LEN
arg	25:17	25:89	5	asf->prop_flags&ASF_PL_MASK_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_SIZE
water	25:17	0:0	6	asf
op	25:20	0:0	6	->
water	25:22	0:0	6	prop_flags
op	25:33	0:0	6	&
water	25:35	0:0	6	ASF_PL_MASK_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_SIZE
arg	26:17	26:67	5	ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_
water	26:17	0:0	6	ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_
arg	26:69	26:76	5	off_len
water	26:69	0:0	6	off_len
water	26:77	0:0	4	;
call	27:8	28:77	4	READ_LEN
arg	27:17	27:80	5	asf->prop_flags&ASF_PL_MASK_REPLICATED_DATA_LENGTH_FIELD_SIZE
water	27:17	0:0	6	asf
op	27:20	0:0	6	->
water	27:22	0:0	6	prop_flags
op	27:33	0:0	6	&
water	27:35	0:0	6	ASF_PL_MASK_REPLICATED_DATA_LENGTH_FIELD_SIZE
arg	28:17	28:58	5	ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_
water	28:17	0:0	6	ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_
arg	28:60	28:77	5	asf->rep_data_len
water	28:60	0:0	6	asf
op	28:63	0:0	6	->
water	28:65	0:0	6	rep_data_len
water	28:78	0:0	4	;
if	29:8	32:8	4	(asf_pkt -> size_left && ( asf_pkt -> frame_num != media_len ))
cond	29:12	29:66	5	asf_pkt -> size_left && ( asf_pkt -> frame_num != media_len )
water	29:12	0:0	6	asf_pkt
op	29:19	0:0	6	->
water	29:21	0:0	6	size_left
op	29:31	0:0	6	&&
water	29:34	0:0	6	(
water	29:35	0:0	6	asf_pkt
op	29:42	0:0	6	->
water	29:44	0:0	6	frame_num
op	29:54	0:0	6	!=
water	29:57	0:0	6	media_len
water	29:66	0:0	6	)
stmts	29:69	32:8	5	
water	29:69	0:0	6	{
call	30:12	30:74	6	av_log
arg	30:19	30:20	7	s
water	30:19	0:0	8	s
arg	30:22	30:36	7	AV_LOG_WARNING
water	30:22	0:0	8	AV_LOG_WARNING
arg	30:38	30:74	7	"Unfinished frame will be ignored\n"
water	30:38	0:0	8	"Unfinished frame will be ignored\n"
water	30:75	0:0	6	;
call	31:12	31:32	6	reset_packet
arg	31:25	31:32	7	asf_pkt
water	31:25	0:0	8	asf_pkt
water	31:33	0:0	6	;
water	32:8	0:0	6	}
water	33:8	0:0	4	asf_pkt
op	33:15	0:0	4	->
water	33:17	0:0	4	frame_num
op	33:27	0:0	4	=
water	33:29	0:0	4	media_len
water	33:38	0:0	4	;
water	34:8	0:0	4	asf
op	34:11	0:0	4	->
water	34:13	0:0	4	sub_dts
op	34:21	0:0	4	=
water	34:23	0:0	4	off_len
water	34:30	0:0	4	;
if	35:8	38:8	4	(asf -> nb_mult_left)
cond	35:12	35:17	5	asf -> nb_mult_left
water	35:12	0:0	6	asf
op	35:15	0:0	6	->
water	35:17	0:0	6	nb_mult_left
stmts	35:31	38:8	5	
water	35:31	0:0	6	{
if	36:12	37:26	6	(( ret =asf_read_multiple_payload (s ,pkt ,asf_pkt ) ) < 0)
cond	36:16	36:69	7	( ret =asf_read_multiple_payload (s ,pkt ,asf_pkt ) ) < 0
water	36:16	0:0	8	(
water	36:17	0:0	8	ret
op	36:21	0:0	8	=
call	36:23	36:64	8	asf_read_multiple_payload
arg	36:49	36:50	9	s
water	36:49	0:0	10	s
arg	36:52	36:55	9	pkt
water	36:52	0:0	10	pkt
arg	36:57	36:64	9	asf_pkt
water	36:57	0:0	10	asf_pkt
water	36:65	0:0	8	)
op	36:67	0:0	8	<
water	36:69	0:0	8	0
stmts	37:16	37:26	7	
return	37:16	37:26	8	ret
water	37:23	0:0	9	ret
water	38:8	0:0	6	}
else	38:10	44:8	4
stmts	38:15	44:8	5	
if	38:15	44:8	6	(asf -> rep_data_len == 1)
cond	38:19	38:40	7	asf -> rep_data_len == 1
water	38:19	0:0	8	asf
op	38:22	0:0	8	->
water	38:24	0:0	8	rep_data_len
op	38:37	0:0	8	==
water	38:40	0:0	8	1
stmts	38:43	44:8	7	
water	38:43	0:0	8	{
water	39:12	0:0	8	asf
op	39:15	0:0	8	->
water	39:17	0:0	8	sub_left
op	39:26	0:0	8	=
water	39:28	0:0	8	1
water	39:29	0:0	8	;
water	40:12	0:0	8	asf
op	40:15	0:0	8	->
water	40:17	0:0	8	state
op	40:26	0:0	8	=
water	40:28	0:0	8	READ_SINGLE
water	40:39	0:0	8	;
water	41:12	0:0	8	pkt
op	41:15	0:0	8	->
water	41:17	0:0	8	flags
op	41:26	0:0	8	=
water	41:28	0:0	8	asf_pkt
op	41:35	0:0	8	->
water	41:37	0:0	8	flags
water	41:42	0:0	8	;
if	42:12	43:26	8	(( ret =asf_read_subpayload (s ,pkt ,1 ) ) < 0)
cond	42:16	42:57	9	( ret =asf_read_subpayload (s ,pkt ,1 ) ) < 0
water	42:16	0:0	10	(
water	42:17	0:0	10	ret
op	42:21	0:0	10	=
call	42:23	42:52	10	asf_read_subpayload
arg	42:43	42:44	11	s
water	42:43	0:0	12	s
arg	42:46	42:49	11	pkt
water	42:46	0:0	12	pkt
arg	42:51	42:52	11	1
water	42:51	0:0	12	1
water	42:53	0:0	10	)
op	42:55	0:0	10	<
water	42:57	0:0	10	0
stmts	43:16	43:26	9	
return	43:16	43:26	10	ret
water	43:23	0:0	11	ret
water	44:8	0:0	8	}
else	44:10	47:8	4
stmts	44:15	47:8	5	
water	44:15	0:0	6	{
if	45:12	46:26	6	(( ret =asf_read_single_payload (s ,pkt ,asf_pkt ) ) < 0)
cond	45:16	45:67	7	( ret =asf_read_single_payload (s ,pkt ,asf_pkt ) ) < 0
water	45:16	0:0	8	(
water	45:17	0:0	8	ret
op	45:21	0:0	8	=
call	45:23	45:62	8	asf_read_single_payload
arg	45:47	45:48	9	s
water	45:47	0:0	10	s
arg	45:50	45:53	9	pkt
water	45:50	0:0	10	pkt
arg	45:55	45:62	9	asf_pkt
water	45:55	0:0	10	asf_pkt
water	45:63	0:0	8	)
op	45:65	0:0	8	<
water	45:67	0:0	8	0
stmts	46:16	46:26	7	
return	46:16	46:26	8	ret
water	46:23	0:0	9	ret
water	47:8	0:0	6	}
water	48:4	0:0	4	}
else	48:6	62:4	2
stmts	48:11	62:4	3	
water	48:11	0:0	4	{
for	49:8	54:8	4	(i = 0 ;i <= asf -> nb_streams;i ++)
forinit	49:13	49:18	5	i = 0 ;
water	49:13	0:0	6	i
op	49:15	0:0	6	=
water	49:17	0:0	6	0
water	49:18	0:0	6	;
cond	49:20	49:30	5	i <= asf -> nb_streams
water	49:20	0:0	6	i
op	49:22	0:0	6	<=
water	49:25	0:0	6	asf
op	49:28	0:0	6	->
water	49:30	0:0	6	nb_streams
forexpr	49:42	49:43	5	i ++
water	49:42	0:0	6	i
op	49:43	0:0	6	++
stmts	49:47	54:8	5	
water	49:47	0:0	6	{
if	50:12	53:12	6	(asf -> stream_index == asf -> asf_st [ i ] -> stream_index)
cond	50:16	50:53	7	asf -> stream_index == asf -> asf_st [ i ] -> stream_index
water	50:16	0:0	8	asf
op	50:19	0:0	8	->
water	50:21	0:0	8	stream_index
op	50:34	0:0	8	==
water	50:37	0:0	8	asf
op	50:40	0:0	8	->
water	50:42	0:0	8	asf_st
op	50:48	0:0	8	[
water	50:49	0:0	8	i
op	50:50	0:0	8	]
op	50:51	0:0	8	->
water	50:53	0:0	8	stream_index
stmts	50:67	53:12	7	
water	50:67	0:0	8	{
water	51:16	0:0	8	asf_pkt
op	51:24	0:0	8	=
op	51:26	0:0	8	&
water	51:27	0:0	8	asf
op	51:30	0:0	8	->
water	51:32	0:0	8	asf_st
op	51:38	0:0	8	[
water	51:39	0:0	8	i
op	51:40	0:0	8	]
op	51:41	0:0	8	->
water	51:43	0:0	8	pkt
water	51:46	0:0	8	;
break	52:16	52:21	8	
water	53:12	0:0	8	}
water	54:8	0:0	6	}
if	55:8	56:38	4	(! asf_pkt)
cond	55:12	55:13	5	! asf_pkt
op	55:12	0:0	6	!
water	55:13	0:0	6	asf_pkt
stmts	56:12	56:38	5	
return	56:12	56:38	6	AVERROR_INVALIDDATA
water	56:19	0:0	7	AVERROR_INVALIDDATA
water	57:8	0:0	4	pkt
op	57:11	0:0	4	->
water	57:13	0:0	4	flags
op	57:27	0:0	4	=
water	57:29	0:0	4	asf_pkt
op	57:36	0:0	4	->
water	57:38	0:0	4	flags
water	57:43	0:0	4	;
water	58:8	0:0	4	pkt
op	58:11	0:0	4	->
water	58:13	0:0	4	dts
op	58:27	0:0	4	=
water	58:29	0:0	4	asf_pkt
op	58:36	0:0	4	->
water	58:38	0:0	4	dts
water	58:41	0:0	4	;
water	59:8	0:0	4	pkt
op	59:11	0:0	4	->
water	59:13	0:0	4	stream_index
op	59:27	0:0	4	=
water	59:29	0:0	4	asf
op	59:32	0:0	4	->
water	59:34	0:0	4	asf_st
op	59:40	0:0	4	[
water	59:41	0:0	4	i
op	59:42	0:0	4	]
op	59:43	0:0	4	->
water	59:45	0:0	4	index
water	59:50	0:0	4	;
if	60:8	61:22	4	(( ret =asf_read_subpayload (s ,pkt ,0 ) ) < 0)
cond	60:12	60:53	5	( ret =asf_read_subpayload (s ,pkt ,0 ) ) < 0
water	60:12	0:0	6	(
water	60:13	0:0	6	ret
op	60:17	0:0	6	=
call	60:19	60:48	6	asf_read_subpayload
arg	60:39	60:40	7	s
water	60:39	0:0	8	s
arg	60:42	60:45	7	pkt
water	60:42	0:0	8	pkt
arg	60:47	60:48	7	0
water	60:47	0:0	8	0
water	60:49	0:0	6	)
op	60:51	0:0	6	<
water	60:53	0:0	6	0
stmts	61:12	61:22	5	
return	61:12	61:22	6	ret
water	61:19	0:0	7	ret
water	62:4	0:0	4	}
return	63:4	63:12	2	0
water	63:11	0:0	3	0
