decl	1:7	1:53	0	int	movie_request_frame
water	1:30	0:0	0	(
water	1:31	0:0	0	AVFilterLink
op	1:44	0:0	0	*
water	1:45	0:0	0	outlink
water	1:52	0:0	0	)
func	2:0	53:0	0	static AVStream *	find_stream
params	2:28	0:0	1	
param	2:29	2:38	2	void *	log
param	2:40	2:60	2	AVFormatContext *	avf
param	2:62	2:78	2	const char *	spec
stmnts	0:0	52:16	1	
decl	4:4	4:43	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:43	2	int	ret
water	4:14	0:0	2	,
decl	4:4	4:43	2	int	already
op	4:24	0:0	2	=
water	4:26	0:0	2	0
water	4:27	0:0	2	,
decl	4:4	4:43	2	int	stream_id
op	4:39	0:0	2	=
op	4:41	0:0	2	-
water	4:42	0:0	2	1
decl	5:4	5:28	2	char	type_char[2]
water	5:21	0:0	2	,
decl	5:4	5:28	2	char	dummy
decl	6:4	6:26	2	AVStream	*found
op	6:20	0:0	2	=
water	6:22	0:0	2	NULL
decl	7:4	7:25	2	enum AVMediaType	type
water	8:4	0:0	2	ret
op	8:8	0:0	2	=
call	8:10	8:67	2	sscanf
arg	8:17	8:21	3	spec
water	8:17	0:0	4	spec
arg	8:23	8:36	3	"d%1[av]%d%c"
water	8:23	0:0	4	"d%1[av]%d%c"
arg	8:38	8:47	3	type_char
water	8:38	0:0	4	type_char
arg	8:49	8:59	3	&stream_id
op	8:49	0:0	4	&
water	8:50	0:0	4	stream_id
arg	8:61	8:67	3	&dummy
op	8:61	0:0	4	&
water	8:62	0:0	4	dummy
water	8:68	0:0	2	;
if	9:4	18:4	2	(ret >= 1 && ret <= 2)
cond	9:8	9:27	3	ret >= 1 && ret <= 2
water	9:8	0:0	4	ret
op	9:12	0:0	4	>=
water	9:15	0:0	4	1
op	9:17	0:0	4	&&
water	9:20	0:0	4	ret
op	9:24	0:0	4	<=
water	9:27	0:0	4	2
stmts	9:30	18:4	3	
water	9:30	0:0	4	{
water	10:8	0:0	4	type
op	10:13	0:0	4	=
water	10:15	0:0	4	type_char
op	10:24	0:0	4	[
water	10:25	0:0	4	0
op	10:26	0:0	4	]
op	10:28	0:0	4	==
water	10:31	0:0	4	'v'
water	10:35	0:0	4	?
water	10:37	0:0	4	AVMEDIA_TYPE_VIDEO
water	10:56	0:0	4	:
water	10:58	0:0	4	AVMEDIA_TYPE_AUDIO
water	10:76	0:0	4	;
water	11:8	0:0	4	ret
op	11:12	0:0	4	=
call	11:14	11:67	4	av_find_best_stream
arg	11:34	11:37	5	avf
water	11:34	0:0	6	avf
arg	11:39	11:43	5	type
water	11:39	0:0	6	type
arg	11:45	11:54	5	stream_id
water	11:45	0:0	6	stream_id
arg	11:56	11:58	5	-1
op	11:56	0:0	6	-
water	11:57	0:0	6	1
arg	11:60	11:64	5	NULL
water	11:60	0:0	6	NULL
arg	11:66	11:67	5	0
water	11:66	0:0	6	0
water	11:68	0:0	4	;
if	12:8	16:8	4	(ret < 0)
cond	12:12	12:18	5	ret < 0
water	12:12	0:0	6	ret
op	12:16	0:0	6	<
water	12:18	0:0	6	0
stmts	12:21	16:8	5	
water	12:21	0:0	6	{
call	13:12	14:60	6	av_log
arg	13:19	13:22	7	log
water	13:19	0:0	8	log
arg	13:24	13:36	7	AV_LOG_ERROR
water	13:24	0:0	8	AV_LOG_ERROR
arg	13:38	13:76	7	"No %s stream with index '%d' found\n"
water	13:38	0:0	8	"No %s stream with index '%d' found\n"
arg	14:19	14:49	7	av_get_media_type_string(type)
call	14:19	14:48	8	av_get_media_type_string
arg	14:44	14:48	9	type
water	14:44	0:0	10	type
arg	14:51	14:60	7	stream_id
water	14:51	0:0	8	stream_id
water	14:61	0:0	6	;
return	15:12	15:23	6	NULL
water	15:19	0:0	7	NULL
water	16:8	0:0	6	}
return	17:8	17:32	4	avf->streams[ret]
water	17:15	0:0	5	avf
op	17:18	0:0	5	->
water	17:20	0:0	5	streams
op	17:27	0:0	5	[
water	17:28	0:0	5	ret
op	17:31	0:0	5	]
water	18:4	0:0	4	}
for	19:4	38:4	2	(i = 0 ;i < avf -> nb_streams;i ++)
forinit	19:9	19:14	3	i = 0 ;
water	19:9	0:0	4	i
op	19:11	0:0	4	=
water	19:13	0:0	4	0
water	19:14	0:0	4	;
cond	19:16	19:25	3	i < avf -> nb_streams
water	19:16	0:0	4	i
op	19:18	0:0	4	<
water	19:20	0:0	4	avf
op	19:23	0:0	4	->
water	19:25	0:0	4	nb_streams
forexpr	19:37	19:38	3	i ++
water	19:37	0:0	4	i
op	19:38	0:0	4	++
stmts	19:42	38:4	3	
water	19:42	0:0	4	{
water	20:8	0:0	4	ret
op	20:12	0:0	4	=
call	20:14	20:72	4	avformat_match_stream_specifier
arg	20:46	20:49	5	avf
water	20:46	0:0	6	avf
arg	20:51	20:66	5	avf->streams[i]
water	20:51	0:0	6	avf
op	20:54	0:0	6	->
water	20:56	0:0	6	streams
op	20:63	0:0	6	[
water	20:64	0:0	6	i
op	20:65	0:0	6	]
arg	20:68	20:72	5	spec
water	20:68	0:0	6	spec
water	20:73	0:0	4	;
if	21:8	25:8	4	(ret < 0)
cond	21:12	21:18	5	ret < 0
water	21:12	0:0	6	ret
op	21:16	0:0	6	<
water	21:18	0:0	6	0
stmts	21:21	25:8	5	
water	21:21	0:0	6	{
call	22:12	23:60	6	av_log
arg	22:19	22:22	7	log
water	22:19	0:0	8	log
arg	22:24	22:36	7	AV_LOG_ERROR
water	22:24	0:0	8	AV_LOG_ERROR
arg	23:19	23:54	7	"Invalid stream specifier \"%s\"\n"
water	23:19	0:0	8	"Invalid stream specifier \"%s\"\n"
arg	23:56	23:60	7	spec
water	23:56	0:0	8	spec
water	23:61	0:0	6	;
return	24:12	24:23	6	NULL
water	24:19	0:0	7	NULL
water	25:8	0:0	6	}
if	26:8	27:20	4	(! ret)
cond	26:12	26:13	5	! ret
op	26:12	0:0	6	!
water	26:13	0:0	6	ret
stmts	27:12	27:20	5	
continue	27:12	27:20	6	
if	28:8	31:8	4	(avf -> streams [ i ] -> discard != AVDISCARD_ALL)
cond	28:12	28:40	5	avf -> streams [ i ] -> discard != AVDISCARD_ALL
water	28:12	0:0	6	avf
op	28:15	0:0	6	->
water	28:17	0:0	6	streams
op	28:24	0:0	6	[
water	28:25	0:0	6	i
op	28:26	0:0	6	]
op	28:27	0:0	6	->
water	28:29	0:0	6	discard
op	28:37	0:0	6	!=
water	28:40	0:0	6	AVDISCARD_ALL
stmts	28:55	31:8	5	
water	28:55	0:0	6	{
water	29:12	0:0	6	already
op	29:19	0:0	6	++
water	29:21	0:0	6	;
continue	30:12	30:20	6	
water	31:8	0:0	6	}
if	32:8	36:8	4	(found)
cond	32:12	32:12	5	found
water	32:12	0:0	6	found
stmts	32:19	36:8	5	
water	32:19	0:0	6	{
call	33:12	34:76	6	av_log
arg	33:19	33:22	7	log
water	33:19	0:0	8	log
arg	33:24	33:38	7	AV_LOG_WARNING
water	33:24	0:0	8	AV_LOG_WARNING
arg	34:19	34:67	7	"Ambiguous stream specifier \"%s\", using #%d\n"
water	34:19	0:0	8	"Ambiguous stream specifier \"%s\", using #%d\n"
arg	34:69	34:73	7	spec
water	34:69	0:0	8	spec
arg	34:75	34:76	7	i
water	34:75	0:0	8	i
water	34:77	0:0	6	;
break	35:12	35:17	6	
water	36:8	0:0	6	}
water	37:8	0:0	4	found
op	37:14	0:0	4	=
water	37:16	0:0	4	avf
op	37:19	0:0	4	->
water	37:21	0:0	4	streams
op	37:28	0:0	4	[
water	37:29	0:0	4	i
op	37:30	0:0	4	]
water	37:31	0:0	4	;
water	38:4	0:0	4	}
if	39:4	44:4	2	(! found)
cond	39:8	39:9	3	! found
op	39:8	0:0	4	!
water	39:9	0:0	4	found
stmts	39:16	44:4	3	
water	39:16	0:0	4	{
call	40:8	42:51	4	av_log
arg	40:15	40:18	5	log
water	40:15	0:0	6	log
arg	40:20	40:34	5	AV_LOG_WARNING
water	40:20	0:0	6	AV_LOG_WARNING
arg	40:36	40:66	5	"Stream specifier \"%s\" %s\n"
water	40:36	0:0	6	"Stream specifier \"%s\" %s\n"
arg	40:68	40:72	5	spec
water	40:68	0:0	6	spec
arg	41:15	42:51	5	already?"matched only already used streams":"did not match any stream"
water	41:15	0:0	6	already
water	41:23	0:0	6	?
water	41:25	0:0	6	"matched only already used streams"
water	41:61	0:0	6	:
water	42:25	0:0	6	"did not match any stream"
water	42:52	0:0	4	;
return	43:8	43:19	4	NULL
water	43:15	0:0	5	NULL
water	44:4	0:0	4	}
if	45:4	51:4	2	(found -> codec -> codec_type != AVMEDIA_TYPE_VIDEO && found -> codec -> codec_type != AVMEDIA_TYPE_AUDIO)
cond	45:8	46:36	3	found -> codec -> codec_type != AVMEDIA_TYPE_VIDEO && found -> codec -> codec_type != AVMEDIA_TYPE_AUDIO
water	45:8	0:0	4	found
op	45:13	0:0	4	->
water	45:15	0:0	4	codec
op	45:20	0:0	4	->
water	45:22	0:0	4	codec_type
op	45:33	0:0	4	!=
water	45:36	0:0	4	AVMEDIA_TYPE_VIDEO
op	45:55	0:0	4	&&
water	46:8	0:0	4	found
op	46:13	0:0	4	->
water	46:15	0:0	4	codec
op	46:20	0:0	4	->
water	46:22	0:0	4	codec_type
op	46:33	0:0	4	!=
water	46:36	0:0	4	AVMEDIA_TYPE_AUDIO
stmts	46:56	51:4	3	
water	46:56	0:0	4	{
call	47:8	49:65	4	av_log
arg	47:15	47:18	5	log
water	47:15	0:0	6	log
arg	47:20	47:32	5	AV_LOG_ERROR
water	47:20	0:0	6	AV_LOG_ERROR
arg	47:34	48:55	5	"Stream specifier \"%s\" matched a %s stream,""currently unsupported by libavfilter\n"
water	47:34	0:0	6	"Stream specifier \"%s\" matched a %s stream,"
water	48:15	0:0	6	"currently unsupported by libavfilter\n"
arg	48:57	48:61	5	spec
water	48:57	0:0	6	spec
arg	49:15	49:65	5	av_get_media_type_string(found->codec->codec_type)
call	49:15	49:64	6	av_get_media_type_string
arg	49:40	49:64	7	found->codec->codec_type
water	49:40	0:0	8	found
op	49:45	0:0	8	->
water	49:47	0:0	8	codec
op	49:52	0:0	8	->
water	49:54	0:0	8	codec_type
water	49:66	0:0	4	;
return	50:8	50:19	4	NULL
water	50:15	0:0	5	NULL
water	51:4	0:0	4	}
return	52:4	52:16	2	found
water	52:11	0:0	3	found
