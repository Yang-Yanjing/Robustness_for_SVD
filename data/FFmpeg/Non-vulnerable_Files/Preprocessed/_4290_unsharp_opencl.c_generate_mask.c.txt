func	1:0	36:0	0	static int	generate_mask
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
stmnts	0:0	35:14	1	
decl	3:4	3:19	2	cl_mem	masks[4]
decl	4:4	4:25	2	cl_mem	mask_matrix[2]
decl	5:4	5:40	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:40	2	int	ret
op	5:15	0:0	2	=
water	5:17	0:0	2	0
water	5:18	0:0	2	,
decl	5:4	5:40	2	int	step_x[2]
water	5:29	0:0	2	,
decl	5:4	5:40	2	int	step_y[2]
decl	6:4	6:39	2	UnsharpContext	*unsharp
op	6:28	0:0	2	=
water	6:30	0:0	2	ctx
op	6:33	0:0	2	->
water	6:35	0:0	2	priv
water	7:4	0:0	2	mask_matrix
op	7:15	0:0	2	[
water	7:16	0:0	2	0
op	7:17	0:0	2	]
op	7:19	0:0	2	=
water	7:21	0:0	2	unsharp
op	7:28	0:0	2	->
water	7:30	0:0	2	opencl_ctx
op	7:40	0:0	2	.
water	7:41	0:0	2	cl_luma_mask
water	7:53	0:0	2	;
water	8:4	0:0	2	mask_matrix
op	8:15	0:0	2	[
water	8:16	0:0	2	1
op	8:17	0:0	2	]
op	8:19	0:0	2	=
water	8:21	0:0	2	unsharp
op	8:28	0:0	2	->
water	8:30	0:0	2	opencl_ctx
op	8:40	0:0	2	.
water	8:41	0:0	2	cl_chroma_mask
water	8:55	0:0	2	;
water	9:4	0:0	2	masks
op	9:9	0:0	2	[
water	9:10	0:0	2	0
op	9:11	0:0	2	]
op	9:13	0:0	2	=
water	9:15	0:0	2	unsharp
op	9:22	0:0	2	->
water	9:24	0:0	2	opencl_ctx
op	9:34	0:0	2	.
water	9:35	0:0	2	cl_luma_mask_x
water	9:49	0:0	2	;
water	10:4	0:0	2	masks
op	10:9	0:0	2	[
water	10:10	0:0	2	1
op	10:11	0:0	2	]
op	10:13	0:0	2	=
water	10:15	0:0	2	unsharp
op	10:22	0:0	2	->
water	10:24	0:0	2	opencl_ctx
op	10:34	0:0	2	.
water	10:35	0:0	2	cl_luma_mask_y
water	10:49	0:0	2	;
water	11:4	0:0	2	masks
op	11:9	0:0	2	[
water	11:10	0:0	2	2
op	11:11	0:0	2	]
op	11:13	0:0	2	=
water	11:15	0:0	2	unsharp
op	11:22	0:0	2	->
water	11:24	0:0	2	opencl_ctx
op	11:34	0:0	2	.
water	11:35	0:0	2	cl_chroma_mask_x
water	11:51	0:0	2	;
water	12:4	0:0	2	masks
op	12:9	0:0	2	[
water	12:10	0:0	2	3
op	12:11	0:0	2	]
op	12:13	0:0	2	=
water	12:15	0:0	2	unsharp
op	12:22	0:0	2	->
water	12:24	0:0	2	opencl_ctx
op	12:34	0:0	2	.
water	12:35	0:0	2	cl_chroma_mask_y
water	12:51	0:0	2	;
water	13:4	0:0	2	step_x
op	13:10	0:0	2	[
water	13:11	0:0	2	0
op	13:12	0:0	2	]
op	13:14	0:0	2	=
water	13:16	0:0	2	unsharp
op	13:23	0:0	2	->
water	13:25	0:0	2	luma
op	13:29	0:0	2	.
water	13:30	0:0	2	steps_x
water	13:37	0:0	2	;
water	14:4	0:0	2	step_x
op	14:10	0:0	2	[
water	14:11	0:0	2	1
op	14:12	0:0	2	]
op	14:14	0:0	2	=
water	14:16	0:0	2	unsharp
op	14:23	0:0	2	->
water	14:25	0:0	2	chroma
op	14:31	0:0	2	.
water	14:32	0:0	2	steps_x
water	14:39	0:0	2	;
water	15:4	0:0	2	step_y
op	15:10	0:0	2	[
water	15:11	0:0	2	0
op	15:12	0:0	2	]
op	15:14	0:0	2	=
water	15:16	0:0	2	unsharp
op	15:23	0:0	2	->
water	15:25	0:0	2	luma
op	15:29	0:0	2	.
water	15:30	0:0	2	steps_y
water	15:37	0:0	2	;
water	16:4	0:0	2	step_y
op	16:10	0:0	2	[
water	16:11	0:0	2	1
op	16:12	0:0	2	]
op	16:14	0:0	2	=
water	16:16	0:0	2	unsharp
op	16:23	0:0	2	->
water	16:25	0:0	2	chroma
op	16:31	0:0	2	.
water	16:32	0:0	2	steps_y
water	16:39	0:0	2	;
if	18:4	19:48	2	(step_x [ 0 ] > 8 || step_x [ 1 ] > 8 || step_y [ 0 ] > 8 || step_y [ 1 ] > 8)
cond	18:8	18:63	3	step_x [ 0 ] > 8 || step_x [ 1 ] > 8 || step_y [ 0 ] > 8 || step_y [ 1 ] > 8
water	18:8	0:0	4	step_x
op	18:14	0:0	4	[
water	18:15	0:0	4	0
op	18:16	0:0	4	]
op	18:17	0:0	4	>
water	18:18	0:0	4	8
op	18:20	0:0	4	||
water	18:23	0:0	4	step_x
op	18:29	0:0	4	[
water	18:30	0:0	4	1
op	18:31	0:0	4	]
op	18:32	0:0	4	>
water	18:33	0:0	4	8
op	18:35	0:0	4	||
water	18:38	0:0	4	step_y
op	18:44	0:0	4	[
water	18:45	0:0	4	0
op	18:46	0:0	4	]
op	18:47	0:0	4	>
water	18:48	0:0	4	8
op	18:50	0:0	4	||
water	18:53	0:0	4	step_y
op	18:59	0:0	4	[
water	18:60	0:0	4	1
op	18:61	0:0	4	]
op	18:62	0:0	4	>
water	18:63	0:0	4	8
stmts	19:8	19:48	3	
water	19:8	0:0	4	unsharp
op	19:15	0:0	4	->
water	19:17	0:0	4	opencl_ctx
op	19:27	0:0	4	.
water	19:28	0:0	4	use_fast_kernels
op	19:45	0:0	4	=
water	19:47	0:0	4	0
water	19:48	0:0	4	;
else	20:4	21:48	2
stmts	21:8	21:48	3	
water	21:8	0:0	4	unsharp
op	21:15	0:0	4	->
water	21:17	0:0	4	opencl_ctx
op	21:27	0:0	4	.
water	21:28	0:0	4	use_fast_kernels
op	21:45	0:0	4	=
water	21:47	0:0	4	1
water	21:48	0:0	4	;
if	22:4	25:4	2	(! masks [ 0 ] || ! masks [ 1 ] || ! masks [ 2 ] || ! masks [ 3 ])
cond	22:8	22:55	3	! masks [ 0 ] || ! masks [ 1 ] || ! masks [ 2 ] || ! masks [ 3 ]
op	22:8	0:0	4	!
water	22:9	0:0	4	masks
op	22:14	0:0	4	[
water	22:15	0:0	4	0
op	22:16	0:0	4	]
op	22:18	0:0	4	||
op	22:21	0:0	4	!
water	22:22	0:0	4	masks
op	22:27	0:0	4	[
water	22:28	0:0	4	1
op	22:29	0:0	4	]
op	22:31	0:0	4	||
op	22:34	0:0	4	!
water	22:35	0:0	4	masks
op	22:40	0:0	4	[
water	22:41	0:0	4	2
op	22:42	0:0	4	]
op	22:44	0:0	4	||
op	22:47	0:0	4	!
water	22:48	0:0	4	masks
op	22:53	0:0	4	[
water	22:54	0:0	4	3
op	22:55	0:0	4	]
stmts	22:58	25:4	3	
water	22:58	0:0	4	{
call	23:8	23:82	4	av_log
arg	23:15	23:18	5	ctx
water	23:15	0:0	6	ctx
arg	23:20	23:32	5	AV_LOG_ERROR
water	23:20	0:0	6	AV_LOG_ERROR
arg	23:34	23:82	5	"Luma mask and chroma mask should not be NULL\n"
water	23:34	0:0	6	"Luma mask and chroma mask should not be NULL\n"
water	23:83	0:0	4	;
return	24:8	24:30	4	AVERROR(EINVAL)
call	24:15	24:29	5	AVERROR
arg	24:23	24:29	6	EINVAL
water	24:23	0:0	7	EINVAL
water	25:4	0:0	4	}
if	26:4	29:4	2	(! mask_matrix [ 0 ] || ! mask_matrix [ 1 ])
cond	26:8	26:41	3	! mask_matrix [ 0 ] || ! mask_matrix [ 1 ]
op	26:8	0:0	4	!
water	26:9	0:0	4	mask_matrix
op	26:20	0:0	4	[
water	26:21	0:0	4	0
op	26:22	0:0	4	]
op	26:24	0:0	4	||
op	26:27	0:0	4	!
water	26:28	0:0	4	mask_matrix
op	26:39	0:0	4	[
water	26:40	0:0	4	1
op	26:41	0:0	4	]
stmts	26:44	29:4	3	
water	26:44	0:0	4	{
call	27:8	27:82	4	av_log
arg	27:15	27:18	5	ctx
water	27:15	0:0	6	ctx
arg	27:20	27:32	5	AV_LOG_ERROR
water	27:20	0:0	6	AV_LOG_ERROR
arg	27:34	27:82	5	"Luma mask and chroma mask should not be NULL\n"
water	27:34	0:0	6	"Luma mask and chroma mask should not be NULL\n"
water	27:83	0:0	4	;
return	28:8	28:30	4	AVERROR(EINVAL)
call	28:15	28:29	5	AVERROR
arg	28:23	28:29	6	EINVAL
water	28:23	0:0	7	EINVAL
water	29:4	0:0	4	}
for	30:4	34:4	2	(i = 0 ;i < 2;i ++)
forinit	30:9	30:14	3	i = 0 ;
water	30:9	0:0	4	i
op	30:11	0:0	4	=
water	30:13	0:0	4	0
water	30:14	0:0	4	;
cond	30:16	30:20	3	i < 2
water	30:16	0:0	4	i
op	30:18	0:0	4	<
water	30:20	0:0	4	2
forexpr	30:23	30:24	3	i ++
water	30:23	0:0	4	i
op	30:24	0:0	4	++
stmts	30:28	34:4	3	
water	30:28	0:0	4	{
water	31:8	0:0	4	ret
op	31:12	0:0	4	=
call	31:14	31:81	4	copy_separable_masks
arg	31:35	31:45	5	masks[2*i]
water	31:35	0:0	6	masks
op	31:40	0:0	6	[
water	31:41	0:0	6	2
op	31:42	0:0	6	*
water	31:43	0:0	6	i
op	31:44	0:0	6	]
arg	31:47	31:59	5	masks[2*i+1]
water	31:47	0:0	6	masks
op	31:52	0:0	6	[
water	31:53	0:0	6	2
op	31:54	0:0	6	*
water	31:55	0:0	6	i
op	31:56	0:0	6	+
water	31:57	0:0	6	1
op	31:58	0:0	6	]
arg	31:61	31:70	5	step_x[i]
water	31:61	0:0	6	step_x
op	31:67	0:0	6	[
water	31:68	0:0	6	i
op	31:69	0:0	6	]
arg	31:72	31:81	5	step_y[i]
water	31:72	0:0	6	step_y
op	31:78	0:0	6	[
water	31:79	0:0	6	i
op	31:80	0:0	6	]
water	31:82	0:0	4	;
if	32:8	33:22	4	(ret < 0)
cond	32:12	32:18	5	ret < 0
water	32:12	0:0	6	ret
op	32:16	0:0	6	<
water	32:18	0:0	6	0
stmts	33:12	33:22	5	
return	33:12	33:22	6	ret
water	33:19	0:0	7	ret
water	34:4	0:0	4	}
return	35:4	35:14	2	ret
water	35:11	0:0	3	ret
