func	1:0	33:0	0	static inline void	copy_context_after_encode
params	1:44	0:0	1	
param	1:45	1:62	2	MpegEncContext *	d
param	1:64	1:81	2	MpegEncContext *	s
param	1:83	1:91	2	int	type
stmnts	0:0	32:46	1	
decl	2:4	2:9	2	int	i
call	3:4	3:42	2	memcpy
arg	3:11	3:16	3	d->mv
water	3:11	0:0	4	d
op	3:12	0:0	4	->
water	3:14	0:0	4	mv
arg	3:18	3:23	3	s->mv
water	3:18	0:0	4	s
op	3:19	0:0	4	->
water	3:21	0:0	4	mv
arg	3:25	3:42	3	2*4*2*sizeof(int)
water	3:25	0:0	4	2
op	3:26	0:0	4	*
water	3:27	0:0	4	4
op	3:28	0:0	4	*
water	3:29	0:0	4	2
op	3:30	0:0	4	*
op	3:31	0:0	4	sizeof
water	3:37	0:0	4	(
water	3:38	0:0	4	int
water	3:41	0:0	4	)
water	3:43	0:0	2	;
call	4:4	4:52	2	memcpy
arg	4:11	4:21	3	d->last_mv
water	4:11	0:0	4	d
op	4:12	0:0	4	->
water	4:14	0:0	4	last_mv
arg	4:23	4:33	3	s->last_mv
water	4:23	0:0	4	s
op	4:24	0:0	4	->
water	4:26	0:0	4	last_mv
arg	4:35	4:52	3	2*2*2*sizeof(int)
water	4:35	0:0	4	2
op	4:36	0:0	4	*
water	4:37	0:0	4	2
op	4:38	0:0	4	*
water	4:39	0:0	4	2
op	4:40	0:0	4	*
op	4:41	0:0	4	sizeof
water	4:47	0:0	4	(
water	4:48	0:0	4	int
water	4:51	0:0	4	)
water	4:53	0:0	2	;
water	6:4	0:0	2	d
op	6:5	0:0	2	->
water	6:7	0:0	2	mb_skip_run
op	6:18	0:0	2	=
water	6:20	0:0	2	s
op	6:21	0:0	2	->
water	6:23	0:0	2	mb_skip_run
water	6:34	0:0	2	;
for	7:4	8:37	2	(i = 0 ;i < 3;i ++)
forinit	7:8	7:11	3	i = 0 ;
water	7:8	0:0	4	i
op	7:9	0:0	4	=
water	7:10	0:0	4	0
water	7:11	0:0	4	;
cond	7:13	7:15	3	i < 3
water	7:13	0:0	4	i
op	7:14	0:0	4	<
water	7:15	0:0	4	3
forexpr	7:18	7:19	3	i ++
water	7:18	0:0	4	i
op	7:19	0:0	4	++
stmts	8:8	8:37	3	
water	8:8	0:0	4	d
op	8:9	0:0	4	->
water	8:11	0:0	4	last_dc
op	8:18	0:0	4	[
water	8:19	0:0	4	i
op	8:20	0:0	4	]
op	8:22	0:0	4	=
water	8:24	0:0	4	s
op	8:25	0:0	4	->
water	8:27	0:0	4	last_dc
op	8:34	0:0	4	[
water	8:35	0:0	4	i
op	8:36	0:0	4	]
water	8:37	0:0	4	;
water	10:4	0:0	2	d
op	10:5	0:0	2	->
water	10:7	0:0	2	mv_bits
op	10:14	0:0	2	=
water	10:16	0:0	2	s
op	10:17	0:0	2	->
water	10:19	0:0	2	mv_bits
water	10:26	0:0	2	;
water	11:4	0:0	2	d
op	11:5	0:0	2	->
water	11:7	0:0	2	i_tex_bits
op	11:17	0:0	2	=
water	11:19	0:0	2	s
op	11:20	0:0	2	->
water	11:22	0:0	2	i_tex_bits
water	11:32	0:0	2	;
water	12:4	0:0	2	d
op	12:5	0:0	2	->
water	12:7	0:0	2	p_tex_bits
op	12:17	0:0	2	=
water	12:19	0:0	2	s
op	12:20	0:0	2	->
water	12:22	0:0	2	p_tex_bits
water	12:32	0:0	2	;
water	13:4	0:0	2	d
op	13:5	0:0	2	->
water	13:7	0:0	2	i_count
op	13:14	0:0	2	=
water	13:16	0:0	2	s
op	13:17	0:0	2	->
water	13:19	0:0	2	i_count
water	13:26	0:0	2	;
water	14:4	0:0	2	d
op	14:5	0:0	2	->
water	14:7	0:0	2	f_count
op	14:14	0:0	2	=
water	14:16	0:0	2	s
op	14:17	0:0	2	->
water	14:19	0:0	2	f_count
water	14:26	0:0	2	;
water	15:4	0:0	2	d
op	15:5	0:0	2	->
water	15:7	0:0	2	b_count
op	15:14	0:0	2	=
water	15:16	0:0	2	s
op	15:17	0:0	2	->
water	15:19	0:0	2	b_count
water	15:26	0:0	2	;
water	16:4	0:0	2	d
op	16:5	0:0	2	->
water	16:7	0:0	2	skip_count
op	16:17	0:0	2	=
water	16:19	0:0	2	s
op	16:20	0:0	2	->
water	16:22	0:0	2	skip_count
water	16:32	0:0	2	;
water	17:4	0:0	2	d
op	17:5	0:0	2	->
water	17:7	0:0	2	misc_bits
op	17:16	0:0	2	=
water	17:18	0:0	2	s
op	17:19	0:0	2	->
water	17:21	0:0	2	misc_bits
water	17:30	0:0	2	;
water	18:4	0:0	2	d
op	18:5	0:0	2	->
water	18:7	0:0	2	mb_intra
op	18:15	0:0	2	=
water	18:17	0:0	2	s
op	18:18	0:0	2	->
water	18:20	0:0	2	mb_intra
water	18:28	0:0	2	;
water	19:4	0:0	2	d
op	19:5	0:0	2	->
water	19:7	0:0	2	mb_skipped
op	19:17	0:0	2	=
water	19:19	0:0	2	s
op	19:20	0:0	2	->
water	19:22	0:0	2	mb_skipped
water	19:32	0:0	2	;
water	20:4	0:0	2	d
op	20:5	0:0	2	->
water	20:7	0:0	2	mv_type
op	20:14	0:0	2	=
water	20:16	0:0	2	s
op	20:17	0:0	2	->
water	20:19	0:0	2	mv_type
water	20:26	0:0	2	;
water	21:4	0:0	2	d
op	21:5	0:0	2	->
water	21:7	0:0	2	mv_dir
op	21:13	0:0	2	=
water	21:15	0:0	2	s
op	21:16	0:0	2	->
water	21:18	0:0	2	mv_dir
water	21:24	0:0	2	;
water	22:4	0:0	2	d
op	22:5	0:0	2	->
water	22:7	0:0	2	pb
op	22:9	0:0	2	=
water	22:11	0:0	2	s
op	22:12	0:0	2	->
water	22:14	0:0	2	pb
water	22:16	0:0	2	;
if	23:4	26:4	2	(s -> data_partitioning)
cond	23:7	23:10	3	s -> data_partitioning
water	23:7	0:0	4	s
op	23:8	0:0	4	->
water	23:10	0:0	4	data_partitioning
stmts	23:28	26:4	3	
water	23:28	0:0	4	{
water	24:8	0:0	4	d
op	24:9	0:0	4	->
water	24:11	0:0	4	pb2
op	24:14	0:0	4	=
water	24:16	0:0	4	s
op	24:17	0:0	4	->
water	24:19	0:0	4	pb2
water	24:22	0:0	4	;
water	25:8	0:0	4	d
op	25:9	0:0	4	->
water	25:11	0:0	4	tex_pb
op	25:17	0:0	4	=
water	25:19	0:0	4	s
op	25:20	0:0	4	->
water	25:22	0:0	4	tex_pb
water	25:28	0:0	4	;
water	26:4	0:0	4	}
water	27:4	0:0	2	d
op	27:5	0:0	2	->
water	27:7	0:0	2	block
op	27:12	0:0	2	=
water	27:14	0:0	2	s
op	27:15	0:0	2	->
water	27:17	0:0	2	block
water	27:22	0:0	2	;
for	28:4	29:54	2	(i = 0 ;i < 8;i ++)
forinit	28:8	28:11	3	i = 0 ;
water	28:8	0:0	4	i
op	28:9	0:0	4	=
water	28:10	0:0	4	0
water	28:11	0:0	4	;
cond	28:13	28:15	3	i < 8
water	28:13	0:0	4	i
op	28:14	0:0	4	<
water	28:15	0:0	4	8
forexpr	28:18	28:19	3	i ++
water	28:18	0:0	4	i
op	28:19	0:0	4	++
stmts	29:8	29:54	3	
water	29:8	0:0	4	d
op	29:9	0:0	4	->
water	29:11	0:0	4	block_last_index
op	29:27	0:0	4	[
water	29:28	0:0	4	i
op	29:29	0:0	4	]
op	29:30	0:0	4	=
water	29:32	0:0	4	s
op	29:33	0:0	4	->
water	29:35	0:0	4	block_last_index
op	29:51	0:0	4	[
water	29:52	0:0	4	i
op	29:53	0:0	4	]
water	29:54	0:0	4	;
water	30:4	0:0	2	d
op	30:5	0:0	2	->
water	30:7	0:0	2	interlaced_dct
op	30:21	0:0	2	=
water	30:23	0:0	2	s
op	30:24	0:0	2	->
water	30:26	0:0	2	interlaced_dct
water	30:40	0:0	2	;
water	31:4	0:0	2	d
op	31:5	0:0	2	->
water	31:7	0:0	2	qscale
op	31:13	0:0	2	=
water	31:15	0:0	2	s
op	31:16	0:0	2	->
water	31:18	0:0	2	qscale
water	31:24	0:0	2	;
water	32:4	0:0	2	d
op	32:5	0:0	2	->
water	32:7	0:0	2	esc3_level_length
op	32:24	0:0	2	=
water	32:26	0:0	2	s
op	32:27	0:0	2	->
water	32:29	0:0	2	esc3_level_length
water	32:46	0:0	2	;
