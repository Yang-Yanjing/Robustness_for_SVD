func	1:0	49:0	0	static int	rm_read_packet
params	1:25	0:0	1	
param	1:26	1:44	2	AVFormatContext *	s
param	1:46	1:59	2	AVPacket *	pkt
stmnts	0:0	48:12	1	
decl	3:4	3:37	2	RMDemuxContext	*rm
op	3:23	0:0	2	=
water	3:25	0:0	2	s
op	3:26	0:0	2	->
water	3:28	0:0	2	priv_data
decl	4:4	4:23	2	AVStream	*st
op	4:17	0:0	2	=
water	4:19	0:0	2	NULL
decl	5:4	5:28	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:28	2	int	len
water	5:14	0:0	2	,
decl	5:4	5:28	2	int	res
water	5:19	0:0	2	,
decl	5:4	5:28	2	int	seq
op	5:25	0:0	2	=
water	5:27	0:0	2	1
decl	6:4	6:26	2	int64_t	timestamp
water	6:21	0:0	2	,
decl	6:4	6:26	2	int64_t	pos
decl	7:4	7:13	2	int	flags
for	8:4	47:4	2	(;;)
forinit	8:9	8:9	3	;
water	8:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	8:13	47:4	3	
water	8:13	0:0	4	{
if	9:8	16:8	4	(rm -> audio_pkt_cnt)
cond	9:12	9:16	5	rm -> audio_pkt_cnt
water	9:12	0:0	6	rm
op	9:14	0:0	6	->
water	9:16	0:0	6	audio_pkt_cnt
stmts	9:31	16:8	5	
water	9:31	0:0	6	{
water	11:12	0:0	6	st
op	11:15	0:0	6	=
water	11:17	0:0	6	s
op	11:18	0:0	6	->
water	11:20	0:0	6	streams
op	11:27	0:0	6	[
water	11:28	0:0	6	rm
op	11:30	0:0	6	->
water	11:32	0:0	6	audio_stream_num
op	11:48	0:0	6	]
water	11:49	0:0	6	;
water	12:12	0:0	6	res
op	12:16	0:0	6	=
call	12:18	12:71	6	ff_rm_retrieve_cache
arg	12:39	12:40	7	s
water	12:39	0:0	8	s
arg	12:42	12:47	7	s->pb
water	12:42	0:0	8	s
op	12:43	0:0	8	->
water	12:45	0:0	8	pb
arg	12:49	12:51	7	st
water	12:49	0:0	8	st
arg	12:53	12:66	7	st->priv_data
water	12:53	0:0	8	st
op	12:55	0:0	8	->
water	12:57	0:0	8	priv_data
arg	12:68	12:71	7	pkt
water	12:68	0:0	8	pkt
water	12:72	0:0	6	;
if	13:12	14:26	6	(res < 0)
cond	13:15	13:21	7	res < 0
water	13:15	0:0	8	res
op	13:19	0:0	8	<
water	13:21	0:0	8	0
stmts	14:16	14:26	7	
return	14:16	14:26	8	res
water	14:23	0:0	9	res
water	15:12	0:0	6	flags
op	15:18	0:0	6	=
water	15:20	0:0	6	0
water	15:21	0:0	6	;
water	16:8	0:0	6	}
else	16:10	41:8	4
stmts	16:15	41:8	5	
water	16:15	0:0	6	{
if	17:12	26:12	6	(rm -> old_format)
cond	17:16	17:20	7	rm -> old_format
water	17:16	0:0	8	rm
op	17:18	0:0	8	->
water	17:20	0:0	8	old_format
stmts	17:32	26:12	7	
water	17:32	0:0	8	{
decl	18:16	18:29	8	RMStream	*ast
water	19:16	0:0	8	st
op	19:19	0:0	8	=
water	19:21	0:0	8	s
op	19:22	0:0	8	->
water	19:24	0:0	8	streams
op	19:31	0:0	8	[
water	19:32	0:0	8	0
op	19:33	0:0	8	]
water	19:34	0:0	8	;
water	20:16	0:0	8	ast
op	20:20	0:0	8	=
water	20:22	0:0	8	st
op	20:24	0:0	8	->
water	20:26	0:0	8	priv_data
water	20:35	0:0	8	;
water	21:16	0:0	8	timestamp
op	21:26	0:0	8	=
water	21:28	0:0	8	AV_NOPTS_VALUE
water	21:42	0:0	8	;
water	22:16	0:0	8	len
op	22:20	0:0	8	=
op	22:22	0:0	8	!
water	22:23	0:0	8	ast
op	22:26	0:0	8	->
water	22:28	0:0	8	audio_framesize
water	22:44	0:0	8	?
water	22:46	0:0	8	RAW_PACKET_SIZE
water	22:62	0:0	8	:
water	23:20	0:0	8	ast
op	23:23	0:0	8	->
water	23:25	0:0	8	coded_framesize
op	23:41	0:0	8	*
water	23:43	0:0	8	ast
op	23:46	0:0	8	->
water	23:48	0:0	8	sub_packet_h
op	23:61	0:0	8	/
water	23:63	0:0	8	2
water	23:64	0:0	8	;
water	24:16	0:0	8	flags
op	24:22	0:0	8	=
water	24:24	0:0	8	(
water	24:25	0:0	8	seq
op	24:28	0:0	8	++
op	24:31	0:0	8	==
water	24:34	0:0	8	1
water	24:35	0:0	8	)
water	24:37	0:0	8	?
water	24:39	0:0	8	2
water	24:41	0:0	8	:
water	24:43	0:0	8	0
water	24:44	0:0	8	;
water	25:16	0:0	8	pos
op	25:20	0:0	8	=
call	25:22	25:37	8	avio_tell
arg	25:32	25:37	9	s->pb
water	25:32	0:0	10	s
op	25:33	0:0	10	->
water	25:35	0:0	10	pb
water	25:38	0:0	8	;
water	26:12	0:0	8	}
else	26:14	30:12	6
stmts	26:19	30:12	7	
water	26:19	0:0	8	{
water	27:16	0:0	8	len
op	27:20	0:0	8	=
call	27:22	27:61	8	rm_sync
arg	27:30	27:31	9	s
water	27:30	0:0	10	s
arg	27:33	27:43	9	&timestamp
op	27:33	0:0	10	&
water	27:34	0:0	10	timestamp
arg	27:45	27:51	9	&flags
op	27:45	0:0	10	&
water	27:46	0:0	10	flags
arg	27:53	27:55	9	&i
op	27:53	0:0	10	&
water	27:54	0:0	10	i
arg	27:57	27:61	9	&pos
op	27:57	0:0	10	&
water	27:58	0:0	10	pos
water	27:62	0:0	8	;
if	28:16	29:38	8	(len > 0)
cond	28:20	28:26	9	len > 0
water	28:20	0:0	10	len
op	28:24	0:0	10	>
water	28:26	0:0	10	0
stmts	29:20	29:38	9	
water	29:20	0:0	10	st
op	29:23	0:0	10	=
water	29:25	0:0	10	s
op	29:26	0:0	10	->
water	29:28	0:0	10	streams
op	29:35	0:0	10	[
water	29:36	0:0	10	i
op	29:37	0:0	10	]
water	29:38	0:0	10	;
water	30:12	0:0	8	}
if	31:12	32:35	6	(len <= 0 ||avio_feof (s -> pb ))
cond	31:16	31:43	7	len <= 0 ||avio_feof (s -> pb )
water	31:16	0:0	8	len
op	31:20	0:0	8	<=
water	31:23	0:0	8	0
op	31:25	0:0	8	||
call	31:28	31:43	8	avio_feof
arg	31:38	31:43	9	s->pb
water	31:38	0:0	10	s
op	31:39	0:0	10	->
water	31:41	0:0	10	pb
stmts	32:16	32:35	7	
return	32:16	32:35	8	AVERROR(EIO)
call	32:23	32:34	9	AVERROR
arg	32:31	32:34	10	EIO
water	32:31	0:0	11	EIO
water	33:12	0:0	6	res
op	33:16	0:0	6	=
call	33:18	34:60	6	ff_rm_parse_packet
arg	33:38	33:39	7	s
water	33:38	0:0	8	s
arg	33:41	33:46	7	s->pb
water	33:41	0:0	8	s
op	33:42	0:0	8	->
water	33:44	0:0	8	pb
arg	33:48	33:50	7	st
water	33:48	0:0	8	st
arg	33:52	33:65	7	st->priv_data
water	33:52	0:0	8	st
op	33:54	0:0	8	->
water	33:56	0:0	8	priv_data
arg	33:67	33:70	7	len
water	33:67	0:0	8	len
arg	33:72	33:75	7	pkt
water	33:72	0:0	8	pkt
arg	34:38	34:42	7	&seq
op	34:38	0:0	8	&
water	34:39	0:0	8	seq
arg	34:44	34:49	7	flags
water	34:44	0:0	8	flags
arg	34:51	34:60	7	timestamp
water	34:51	0:0	8	timestamp
water	34:61	0:0	6	;
if	35:12	36:26	6	(res < - 1)
cond	35:16	35:23	7	res < - 1
water	35:16	0:0	8	res
op	35:20	0:0	8	<
op	35:22	0:0	8	-
water	35:23	0:0	8	1
stmts	36:16	36:26	7	
return	36:16	36:26	8	res
water	36:23	0:0	9	res
if	37:12	38:78	6	(( flags & 2 ) && ( seq & 0 x7F ) == 1)
cond	37:15	37:42	7	( flags & 2 ) && ( seq & 0 x7F ) == 1
water	37:15	0:0	8	(
water	37:16	0:0	8	flags
op	37:21	0:0	8	&
water	37:22	0:0	8	2
water	37:23	0:0	8	)
op	37:25	0:0	8	&&
water	37:28	0:0	8	(
water	37:29	0:0	8	seq
op	37:32	0:0	8	&
water	37:33	0:0	8	0
water	37:34	0:0	8	x7F
water	37:37	0:0	8	)
op	37:39	0:0	8	==
water	37:42	0:0	8	1
stmts	38:16	38:78	7	
call	38:16	38:77	8	av_add_index_entry
arg	38:35	38:37	9	st
water	38:35	0:0	10	st
arg	38:39	38:42	9	pos
water	38:39	0:0	10	pos
arg	38:44	38:53	9	timestamp
water	38:44	0:0	10	timestamp
arg	38:55	38:56	9	0
water	38:55	0:0	10	0
arg	38:58	38:59	9	0
water	38:58	0:0	10	0
arg	38:61	38:77	9	AVINDEX_KEYFRAME
water	38:61	0:0	10	AVINDEX_KEYFRAME
water	38:78	0:0	8	;
if	39:12	40:24	6	(res)
cond	39:16	39:16	7	res
water	39:16	0:0	8	res
stmts	40:16	40:24	7	
continue	40:16	40:24	8	
water	41:8	0:0	6	}
if	42:8	45:8	4	(( st -> discard >= AVDISCARD_NONKEY && ! ( flags & 2 ) ) || st -> discard >= AVDISCARD_ALL)
cond	42:13	43:29	5	( st -> discard >= AVDISCARD_NONKEY && ! ( flags & 2 ) ) || st -> discard >= AVDISCARD_ALL
water	42:13	0:0	6	(
water	42:14	0:0	6	st
op	42:16	0:0	6	->
water	42:18	0:0	6	discard
op	42:26	0:0	6	>=
water	42:29	0:0	6	AVDISCARD_NONKEY
op	42:46	0:0	6	&&
op	42:49	0:0	6	!
water	42:50	0:0	6	(
water	42:51	0:0	6	flags
op	42:56	0:0	6	&
water	42:57	0:0	6	2
water	42:58	0:0	6	)
water	42:59	0:0	6	)
op	43:11	0:0	6	||
water	43:14	0:0	6	st
op	43:16	0:0	6	->
water	43:18	0:0	6	discard
op	43:26	0:0	6	>=
water	43:29	0:0	6	AVDISCARD_ALL
stmts	43:43	45:8	5	
water	43:43	0:0	6	{
call	44:12	44:30	6	av_free_packet
arg	44:27	44:30	7	pkt
water	44:27	0:0	8	pkt
water	44:31	0:0	6	;
water	45:8	0:0	6	}
else	45:10	46:17	4
stmts	46:12	46:17	5	
break	46:12	46:17	6	
water	47:4	0:0	4	}
return	48:4	48:12	2	0
water	48:11	0:0	3	0
