func	1:15	158:0	0	int	channelmap_init
params	1:34	0:0	1	
param	1:35	1:55	2	AVFilterContext *	ctx
stmnts	0:0	157:12	1	
decl	3:4	3:36	2	ChannelMapContext	*s
op	3:25	0:0	2	=
water	3:27	0:0	2	ctx
op	3:30	0:0	2	->
water	3:32	0:0	2	priv
decl	4:4	4:34	2	char	*mapping
water	4:17	0:0	2	,
decl	4:4	4:34	2	char	separator
op	4:29	0:0	2	=
water	4:31	0:0	2	'|'
decl	5:4	5:23	2	int	map_entries
op	5:20	0:0	2	=
water	5:22	0:0	2	0
decl	6:4	6:17	2	char	buf[256]
decl	7:4	7:25	2	enum MappingMode	mode
decl	8:4	8:28	2	uint64_t	out_ch_mask
op	8:25	0:0	2	=
water	8:27	0:0	2	0
decl	9:4	9:9	2	int	i
water	10:4	0:0	2	mapping
op	10:12	0:0	2	=
water	10:14	0:0	2	s
op	10:15	0:0	2	->
water	10:17	0:0	2	mapping_str
water	10:28	0:0	2	;
if	11:4	13:4	2	(! mapping)
cond	11:8	11:9	3	! mapping
op	11:8	0:0	4	!
water	11:9	0:0	4	mapping
stmts	11:18	13:4	3	
water	11:18	0:0	4	{
water	12:8	0:0	4	mode
op	12:13	0:0	4	=
water	12:15	0:0	4	MAP_NONE
water	12:23	0:0	4	;
water	13:4	0:0	4	}
else	13:6	38:4	2
stmts	13:11	38:4	3	
water	13:11	0:0	4	{
decl	14:8	14:41	4	char	*dash
op	14:19	0:0	4	=
call	14:21	14:40	5	strchr
arg	14:28	14:35	6	mapping
water	14:28	0:0	7	mapping
arg	14:37	14:40	6	'-'
water	14:37	0:0	7	'-'
if	15:8	20:8	4	(! dash)
cond	15:12	15:13	5	! dash
op	15:12	0:0	6	!
water	15:13	0:0	6	dash
stmts	15:19	20:8	5	
water	15:19	0:0	6	{
if	16:12	17:34	6	(av_isdigit (* mapping ))
cond	16:16	16:35	7	av_isdigit (* mapping )
call	16:16	16:35	8	av_isdigit
arg	16:27	16:35	9	*mapping
op	16:27	0:0	10	*
water	16:28	0:0	10	mapping
stmts	17:16	17:34	7	
water	17:16	0:0	8	mode
op	17:21	0:0	8	=
water	17:23	0:0	8	MAP_ONE_INT
water	17:34	0:0	8	;
else	18:12	19:34	6
stmts	19:16	19:34	7	
water	19:16	0:0	8	mode
op	19:21	0:0	8	=
water	19:23	0:0	8	MAP_ONE_STR
water	19:34	0:0	8	;
water	20:8	0:0	6	}
else	20:10	25:8	4
stmts	20:15	25:8	5	
if	20:15	25:8	6	(av_isdigit (* mapping ))
cond	20:19	20:38	7	av_isdigit (* mapping )
call	20:19	20:38	8	av_isdigit
arg	20:30	20:38	9	*mapping
op	20:30	0:0	10	*
water	20:31	0:0	10	mapping
stmts	20:41	25:8	7	
water	20:41	0:0	8	{
if	21:12	22:39	8	(av_isdigit (* ( dash + 1 ) ))
cond	21:16	21:36	9	av_isdigit (* ( dash + 1 ) )
call	21:16	21:36	10	av_isdigit
arg	21:27	21:36	11	*(dash+1)
op	21:27	0:0	12	*
water	21:28	0:0	12	(
water	21:29	0:0	12	dash
op	21:33	0:0	12	+
water	21:34	0:0	12	1
water	21:35	0:0	12	)
stmts	22:16	22:39	9	
water	22:16	0:0	10	mode
op	22:21	0:0	10	=
water	22:23	0:0	10	MAP_PAIR_INT_INT
water	22:39	0:0	10	;
else	23:12	24:39	8
stmts	24:16	24:39	9	
water	24:16	0:0	10	mode
op	24:21	0:0	10	=
water	24:23	0:0	10	MAP_PAIR_INT_STR
water	24:39	0:0	10	;
water	25:8	0:0	8	}
else	25:10	30:8	4
stmts	25:15	30:8	5	
water	25:15	0:0	6	{
if	26:12	27:39	6	(av_isdigit (* ( dash + 1 ) ))
cond	26:16	26:36	7	av_isdigit (* ( dash + 1 ) )
call	26:16	26:36	8	av_isdigit
arg	26:27	26:36	9	*(dash+1)
op	26:27	0:0	10	*
water	26:28	0:0	10	(
water	26:29	0:0	10	dash
op	26:33	0:0	10	+
water	26:34	0:0	10	1
water	26:35	0:0	10	)
stmts	27:16	27:39	7	
water	27:16	0:0	8	mode
op	27:21	0:0	8	=
water	27:23	0:0	8	MAP_PAIR_STR_INT
water	27:39	0:0	8	;
else	28:12	29:39	6
stmts	29:16	29:39	7	
water	29:16	0:0	8	mode
op	29:21	0:0	8	=
water	29:23	0:0	8	MAP_PAIR_STR_STR
water	29:39	0:0	8	;
water	30:8	0:0	6	}
if	32:8	36:8	4	(strchr (mapping ,',' ))
cond	32:12	32:31	5	strchr (mapping ,',' )
call	32:12	32:31	6	strchr
arg	32:19	32:26	7	mapping
water	32:19	0:0	8	mapping
arg	32:28	32:31	7	','
water	32:28	0:0	8	','
stmts	32:34	36:8	5	
water	32:34	0:0	6	{
call	33:12	34:52	6	av_log
arg	33:19	33:22	7	ctx
water	33:19	0:0	8	ctx
arg	33:24	33:38	7	AV_LOG_WARNING
water	33:24	0:0	8	AV_LOG_WARNING
arg	33:40	34:52	7	"This syntax is deprecated, use ""'|' to separate the mappings.\n"
water	33:40	0:0	8	"This syntax is deprecated, use "
water	34:19	0:0	8	"'|' to separate the mappings.\n"
water	34:53	0:0	6	;
water	35:12	0:0	6	separator
op	35:22	0:0	6	=
water	35:24	0:0	6	','
water	35:27	0:0	6	;
water	36:8	0:0	6	}
water	38:4	0:0	4	}
if	39:4	46:4	2	(mode != MAP_NONE)
cond	39:8	39:16	3	mode != MAP_NONE
water	39:8	0:0	4	mode
op	39:13	0:0	4	!=
water	39:16	0:0	4	MAP_NONE
stmts	39:26	46:4	3	
water	39:26	0:0	4	{
decl	40:8	40:27	4	char	*sep
op	40:18	0:0	4	=
water	40:20	0:0	4	mapping
water	41:8	0:0	4	map_entries
op	41:20	0:0	4	=
water	41:22	0:0	4	1
water	41:23	0:0	4	;
while	42:8	45:8	4	(( sep =strchr (sep ,separator ) ))
cond	42:15	42:44	5	( sep =strchr (sep ,separator ) )
water	42:15	0:0	6	(
water	42:16	0:0	6	sep
op	42:20	0:0	6	=
call	42:22	42:43	6	strchr
arg	42:29	42:32	7	sep
water	42:29	0:0	8	sep
arg	42:34	42:43	7	separator
water	42:34	0:0	8	separator
water	42:44	0:0	6	)
stmts	42:47	45:8	5	
water	42:47	0:0	6	{
if	43:12	44:29	6	(* ++ sep)
cond	43:16	43:19	7	* ++ sep
op	43:16	0:0	8	*
op	43:17	0:0	8	++
water	43:19	0:0	8	sep
stmts	44:16	44:29	7	
water	44:16	0:0	8	map_entries
op	44:27	0:0	8	++
water	44:29	0:0	8	;
water	45:8	0:0	6	}
water	46:4	0:0	4	}
if	47:4	50:4	2	(map_entries > MAX_CH)
cond	47:8	47:22	3	map_entries > MAX_CH
water	47:8	0:0	4	map_entries
op	47:20	0:0	4	>
water	47:22	0:0	4	MAX_CH
stmts	47:30	50:4	3	
water	47:30	0:0	4	{
call	48:8	48:82	4	av_log
arg	48:15	48:18	5	ctx
water	48:15	0:0	6	ctx
arg	48:20	48:32	5	AV_LOG_ERROR
water	48:20	0:0	6	AV_LOG_ERROR
arg	48:34	48:69	5	"Too many channels mapped: '%d'.\n"
water	48:34	0:0	6	"Too many channels mapped: '%d'.\n"
arg	48:71	48:82	5	map_entries
water	48:71	0:0	6	map_entries
water	48:83	0:0	4	;
return	49:8	49:30	4	AVERROR(EINVAL)
call	49:15	49:29	5	AVERROR
arg	49:23	49:29	6	EINVAL
water	49:23	0:0	7	EINVAL
water	50:4	0:0	4	}
for	51:4	113:4	2	(i = 0 ;i < map_entries;i ++)
forinit	51:9	51:14	3	i = 0 ;
water	51:9	0:0	4	i
op	51:11	0:0	4	=
water	51:13	0:0	4	0
water	51:14	0:0	4	;
cond	51:16	51:20	3	i < map_entries
water	51:16	0:0	4	i
op	51:18	0:0	4	<
water	51:20	0:0	4	map_entries
forexpr	51:33	51:34	3	i ++
water	51:33	0:0	4	i
op	51:34	0:0	4	++
stmts	51:38	113:4	3	
water	51:38	0:0	4	{
decl	52:8	52:43	4	int	in_ch_idx
op	52:22	0:0	4	=
op	52:24	0:0	4	-
water	52:25	0:0	4	1
water	52:26	0:0	4	,
decl	52:8	52:43	4	int	out_ch_idx
op	52:39	0:0	4	=
op	52:41	0:0	4	-
water	52:42	0:0	4	1
decl	53:8	53:38	4	uint64_t	in_ch
op	53:23	0:0	4	=
water	53:25	0:0	4	0
water	53:26	0:0	4	,
decl	53:8	53:38	4	uint64_t	out_ch
op	53:35	0:0	4	=
water	53:37	0:0	4	0
water	54:8	0:0	4	static
water	54:15	0:0	4	const
water	54:21	0:0	4	char
water	54:26	0:0	4	err
op	54:29	0:0	4	[
op	54:30	0:0	4	]
op	54:32	0:0	4	=
water	54:34	0:0	4	"Failed to parse channel map\n"
water	54:65	0:0	4	;
switch	55:8	112:8	4	(mode)
cond	55:16	55:16	5	mode
water	55:16	0:0	6	mode
stmts	55:22	112:8	5	
water	55:22	0:0	6	{
label	56:8	56:24	6	case MAP_ONE_INT :
if	57:12	60:12	6	(get_channel_idx (& mapping ,& in_ch_idx ,separator ,MAX_CH ) < 0)
cond	57:16	57:75	7	get_channel_idx (& mapping ,& in_ch_idx ,separator ,MAX_CH ) < 0
call	57:16	57:71	8	get_channel_idx
arg	57:32	57:40	9	&mapping
op	57:32	0:0	10	&
water	57:33	0:0	10	mapping
arg	57:42	57:52	9	&in_ch_idx
op	57:42	0:0	10	&
water	57:43	0:0	10	in_ch_idx
arg	57:54	57:63	9	separator
water	57:54	0:0	10	separator
arg	57:65	57:71	9	MAX_CH
water	57:65	0:0	10	MAX_CH
op	57:73	0:0	8	<
water	57:75	0:0	8	0
stmts	57:78	60:12	7	
water	57:78	0:0	8	{
call	58:16	58:45	8	av_log
arg	58:23	58:26	9	ctx
water	58:23	0:0	10	ctx
arg	58:28	58:40	9	AV_LOG_ERROR
water	58:28	0:0	10	AV_LOG_ERROR
arg	58:42	58:45	9	err
water	58:42	0:0	10	err
water	58:46	0:0	8	;
return	59:16	59:38	8	AVERROR(EINVAL)
call	59:23	59:37	9	AVERROR
arg	59:31	59:37	10	EINVAL
water	59:31	0:0	11	EINVAL
water	60:12	0:0	8	}
water	61:12	0:0	6	s
op	61:13	0:0	6	->
water	61:15	0:0	6	map
op	61:18	0:0	6	[
water	61:19	0:0	6	i
op	61:20	0:0	6	]
op	61:21	0:0	6	.
water	61:22	0:0	6	in_channel_idx
op	61:38	0:0	6	=
water	61:40	0:0	6	in_ch_idx
water	61:49	0:0	6	;
water	62:12	0:0	6	s
op	62:13	0:0	6	->
water	62:15	0:0	6	map
op	62:18	0:0	6	[
water	62:19	0:0	6	i
op	62:20	0:0	6	]
op	62:21	0:0	6	.
water	62:22	0:0	6	out_channel_idx
op	62:38	0:0	6	=
water	62:40	0:0	6	i
water	62:41	0:0	6	;
break	63:12	63:17	6	
label	64:8	64:24	6	case MAP_ONE_STR :
if	65:12	68:12	6	(get_channel (& mapping ,& in_ch ,separator ) < 0)
cond	65:16	65:59	7	get_channel (& mapping ,& in_ch ,separator ) < 0
call	65:16	65:55	8	get_channel
arg	65:28	65:36	9	&mapping
op	65:28	0:0	10	&
water	65:29	0:0	10	mapping
arg	65:38	65:44	9	&in_ch
op	65:38	0:0	10	&
water	65:39	0:0	10	in_ch
arg	65:46	65:55	9	separator
water	65:46	0:0	10	separator
op	65:57	0:0	8	<
water	65:59	0:0	8	0
stmts	65:62	68:12	7	
water	65:62	0:0	8	{
call	66:16	66:45	8	av_log
arg	66:23	66:26	9	ctx
water	66:23	0:0	10	ctx
arg	66:28	66:40	9	AV_LOG_ERROR
water	66:28	0:0	10	AV_LOG_ERROR
arg	66:42	66:45	9	err
water	66:42	0:0	10	err
water	66:46	0:0	8	;
return	67:16	67:38	8	AVERROR(EINVAL)
call	67:23	67:37	9	AVERROR
arg	67:31	67:37	10	EINVAL
water	67:31	0:0	11	EINVAL
water	68:12	0:0	8	}
water	69:12	0:0	6	s
op	69:13	0:0	6	->
water	69:15	0:0	6	map
op	69:18	0:0	6	[
water	69:19	0:0	6	i
op	69:20	0:0	6	]
op	69:21	0:0	6	.
water	69:22	0:0	6	in_channel
op	69:38	0:0	6	=
water	69:40	0:0	6	in_ch
water	69:45	0:0	6	;
water	70:12	0:0	6	s
op	70:13	0:0	6	->
water	70:15	0:0	6	map
op	70:18	0:0	6	[
water	70:19	0:0	6	i
op	70:20	0:0	6	]
op	70:21	0:0	6	.
water	70:22	0:0	6	out_channel_idx
op	70:38	0:0	6	=
water	70:40	0:0	6	i
water	70:41	0:0	6	;
break	71:12	71:17	6	
label	72:8	72:29	6	case MAP_PAIR_INT_INT :
if	73:12	77:12	6	(get_channel_idx (& mapping ,& in_ch_idx ,'-' ,MAX_CH ) < 0 ||get_channel_idx (& mapping ,& out_ch_idx ,separator ,MAX_CH ) < 0)
cond	73:16	74:76	7	get_channel_idx (& mapping ,& in_ch_idx ,'-' ,MAX_CH ) < 0 ||get_channel_idx (& mapping ,& out_ch_idx ,separator ,MAX_CH ) < 0
call	73:16	73:65	8	get_channel_idx
arg	73:32	73:40	9	&mapping
op	73:32	0:0	10	&
water	73:33	0:0	10	mapping
arg	73:42	73:52	9	&in_ch_idx
op	73:42	0:0	10	&
water	73:43	0:0	10	in_ch_idx
arg	73:54	73:57	9	'-'
water	73:54	0:0	10	'-'
arg	73:59	73:65	9	MAX_CH
water	73:59	0:0	10	MAX_CH
op	73:67	0:0	8	<
water	73:69	0:0	8	0
op	73:71	0:0	8	||
call	74:16	74:72	8	get_channel_idx
arg	74:32	74:40	9	&mapping
op	74:32	0:0	10	&
water	74:33	0:0	10	mapping
arg	74:42	74:53	9	&out_ch_idx
op	74:42	0:0	10	&
water	74:43	0:0	10	out_ch_idx
arg	74:55	74:64	9	separator
water	74:55	0:0	10	separator
arg	74:66	74:72	9	MAX_CH
water	74:66	0:0	10	MAX_CH
op	74:74	0:0	8	<
water	74:76	0:0	8	0
stmts	74:79	77:12	7	
water	74:79	0:0	8	{
call	75:16	75:45	8	av_log
arg	75:23	75:26	9	ctx
water	75:23	0:0	10	ctx
arg	75:28	75:40	9	AV_LOG_ERROR
water	75:28	0:0	10	AV_LOG_ERROR
arg	75:42	75:45	9	err
water	75:42	0:0	10	err
water	75:46	0:0	8	;
return	76:16	76:38	8	AVERROR(EINVAL)
call	76:23	76:37	9	AVERROR
arg	76:31	76:37	10	EINVAL
water	76:31	0:0	11	EINVAL
water	77:12	0:0	8	}
water	78:12	0:0	6	s
op	78:13	0:0	6	->
water	78:15	0:0	6	map
op	78:18	0:0	6	[
water	78:19	0:0	6	i
op	78:20	0:0	6	]
op	78:21	0:0	6	.
water	78:22	0:0	6	in_channel_idx
op	78:38	0:0	6	=
water	78:40	0:0	6	in_ch_idx
water	78:49	0:0	6	;
water	79:12	0:0	6	s
op	79:13	0:0	6	->
water	79:15	0:0	6	map
op	79:18	0:0	6	[
water	79:19	0:0	6	i
op	79:20	0:0	6	]
op	79:21	0:0	6	.
water	79:22	0:0	6	out_channel_idx
op	79:38	0:0	6	=
water	79:40	0:0	6	out_ch_idx
water	79:50	0:0	6	;
break	80:12	80:17	6	
label	81:8	81:29	6	case MAP_PAIR_INT_STR :
if	82:12	87:12	6	(get_channel_idx (& mapping ,& in_ch_idx ,'-' ,MAX_CH ) < 0 ||get_channel (& mapping ,& out_ch ,separator ) < 0 || out_ch & out_ch_mask)
cond	82:16	84:25	7	get_channel_idx (& mapping ,& in_ch_idx ,'-' ,MAX_CH ) < 0 ||get_channel (& mapping ,& out_ch ,separator ) < 0 || out_ch & out_ch_mask
call	82:16	82:65	8	get_channel_idx
arg	82:32	82:40	9	&mapping
op	82:32	0:0	10	&
water	82:33	0:0	10	mapping
arg	82:42	82:52	9	&in_ch_idx
op	82:42	0:0	10	&
water	82:43	0:0	10	in_ch_idx
arg	82:54	82:57	9	'-'
water	82:54	0:0	10	'-'
arg	82:59	82:65	9	MAX_CH
water	82:59	0:0	10	MAX_CH
op	82:67	0:0	8	<
water	82:69	0:0	8	0
op	82:71	0:0	8	||
call	83:16	83:56	8	get_channel
arg	83:28	83:36	9	&mapping
op	83:28	0:0	10	&
water	83:29	0:0	10	mapping
arg	83:38	83:45	9	&out_ch
op	83:38	0:0	10	&
water	83:39	0:0	10	out_ch
arg	83:47	83:56	9	separator
water	83:47	0:0	10	separator
op	83:58	0:0	8	<
water	83:60	0:0	8	0
op	83:62	0:0	8	||
water	84:16	0:0	8	out_ch
op	84:23	0:0	8	&
water	84:25	0:0	8	out_ch_mask
stmts	84:38	87:12	7	
water	84:38	0:0	8	{
call	85:16	85:45	8	av_log
arg	85:23	85:26	9	ctx
water	85:23	0:0	10	ctx
arg	85:28	85:40	9	AV_LOG_ERROR
water	85:28	0:0	10	AV_LOG_ERROR
arg	85:42	85:45	9	err
water	85:42	0:0	10	err
water	85:46	0:0	8	;
return	86:16	86:38	8	AVERROR(EINVAL)
call	86:23	86:37	9	AVERROR
arg	86:31	86:37	10	EINVAL
water	86:31	0:0	11	EINVAL
water	87:12	0:0	8	}
water	88:12	0:0	6	s
op	88:13	0:0	6	->
water	88:15	0:0	6	map
op	88:18	0:0	6	[
water	88:19	0:0	6	i
op	88:20	0:0	6	]
op	88:21	0:0	6	.
water	88:22	0:0	6	in_channel_idx
op	88:38	0:0	6	=
water	88:40	0:0	6	in_ch_idx
water	88:49	0:0	6	;
water	89:12	0:0	6	s
op	89:13	0:0	6	->
water	89:15	0:0	6	map
op	89:18	0:0	6	[
water	89:19	0:0	6	i
op	89:20	0:0	6	]
op	89:21	0:0	6	.
water	89:22	0:0	6	out_channel
op	89:38	0:0	6	=
water	89:40	0:0	6	out_ch
water	89:46	0:0	6	;
water	90:12	0:0	6	out_ch_mask
op	90:24	0:0	6	|=
water	90:27	0:0	6	out_ch
water	90:33	0:0	6	;
break	91:12	91:17	6	
label	92:8	92:29	6	case MAP_PAIR_STR_INT :
if	93:12	97:12	6	(get_channel (& mapping ,& in_ch ,'-' ) < 0 ||get_channel_idx (& mapping ,& out_ch_idx ,separator ,MAX_CH ) < 0)
cond	93:16	94:76	7	get_channel (& mapping ,& in_ch ,'-' ) < 0 ||get_channel_idx (& mapping ,& out_ch_idx ,separator ,MAX_CH ) < 0
call	93:16	93:49	8	get_channel
arg	93:28	93:36	9	&mapping
op	93:28	0:0	10	&
water	93:29	0:0	10	mapping
arg	93:38	93:44	9	&in_ch
op	93:38	0:0	10	&
water	93:39	0:0	10	in_ch
arg	93:46	93:49	9	'-'
water	93:46	0:0	10	'-'
op	93:51	0:0	8	<
water	93:53	0:0	8	0
op	93:55	0:0	8	||
call	94:16	94:72	8	get_channel_idx
arg	94:32	94:40	9	&mapping
op	94:32	0:0	10	&
water	94:33	0:0	10	mapping
arg	94:42	94:53	9	&out_ch_idx
op	94:42	0:0	10	&
water	94:43	0:0	10	out_ch_idx
arg	94:55	94:64	9	separator
water	94:55	0:0	10	separator
arg	94:66	94:72	9	MAX_CH
water	94:66	0:0	10	MAX_CH
op	94:74	0:0	8	<
water	94:76	0:0	8	0
stmts	94:79	97:12	7	
water	94:79	0:0	8	{
call	95:16	95:45	8	av_log
arg	95:23	95:26	9	ctx
water	95:23	0:0	10	ctx
arg	95:28	95:40	9	AV_LOG_ERROR
water	95:28	0:0	10	AV_LOG_ERROR
arg	95:42	95:45	9	err
water	95:42	0:0	10	err
water	95:46	0:0	8	;
return	96:16	96:38	8	AVERROR(EINVAL)
call	96:23	96:37	9	AVERROR
arg	96:31	96:37	10	EINVAL
water	96:31	0:0	11	EINVAL
water	97:12	0:0	8	}
water	98:12	0:0	6	s
op	98:13	0:0	6	->
water	98:15	0:0	6	map
op	98:18	0:0	6	[
water	98:19	0:0	6	i
op	98:20	0:0	6	]
op	98:21	0:0	6	.
water	98:22	0:0	6	in_channel
op	98:38	0:0	6	=
water	98:40	0:0	6	in_ch
water	98:45	0:0	6	;
water	99:12	0:0	6	s
op	99:13	0:0	6	->
water	99:15	0:0	6	map
op	99:18	0:0	6	[
water	99:19	0:0	6	i
op	99:20	0:0	6	]
op	99:21	0:0	6	.
water	99:22	0:0	6	out_channel_idx
op	99:38	0:0	6	=
water	99:40	0:0	6	out_ch_idx
water	99:50	0:0	6	;
break	100:12	100:17	6	
label	101:8	101:29	6	case MAP_PAIR_STR_STR :
if	102:12	107:12	6	(get_channel (& mapping ,& in_ch ,'-' ) < 0 ||get_channel (& mapping ,& out_ch ,separator ) < 0 || out_ch & out_ch_mask)
cond	102:16	104:25	7	get_channel (& mapping ,& in_ch ,'-' ) < 0 ||get_channel (& mapping ,& out_ch ,separator ) < 0 || out_ch & out_ch_mask
call	102:16	102:49	8	get_channel
arg	102:28	102:36	9	&mapping
op	102:28	0:0	10	&
water	102:29	0:0	10	mapping
arg	102:38	102:44	9	&in_ch
op	102:38	0:0	10	&
water	102:39	0:0	10	in_ch
arg	102:46	102:49	9	'-'
water	102:46	0:0	10	'-'
op	102:51	0:0	8	<
water	102:53	0:0	8	0
op	102:55	0:0	8	||
call	103:16	103:56	8	get_channel
arg	103:28	103:36	9	&mapping
op	103:28	0:0	10	&
water	103:29	0:0	10	mapping
arg	103:38	103:45	9	&out_ch
op	103:38	0:0	10	&
water	103:39	0:0	10	out_ch
arg	103:47	103:56	9	separator
water	103:47	0:0	10	separator
op	103:58	0:0	8	<
water	103:60	0:0	8	0
op	103:62	0:0	8	||
water	104:16	0:0	8	out_ch
op	104:23	0:0	8	&
water	104:25	0:0	8	out_ch_mask
stmts	104:38	107:12	7	
water	104:38	0:0	8	{
call	105:16	105:45	8	av_log
arg	105:23	105:26	9	ctx
water	105:23	0:0	10	ctx
arg	105:28	105:40	9	AV_LOG_ERROR
water	105:28	0:0	10	AV_LOG_ERROR
arg	105:42	105:45	9	err
water	105:42	0:0	10	err
water	105:46	0:0	8	;
return	106:16	106:38	8	AVERROR(EINVAL)
call	106:23	106:37	9	AVERROR
arg	106:31	106:37	10	EINVAL
water	106:31	0:0	11	EINVAL
water	107:12	0:0	8	}
water	108:12	0:0	6	s
op	108:13	0:0	6	->
water	108:15	0:0	6	map
op	108:18	0:0	6	[
water	108:19	0:0	6	i
op	108:20	0:0	6	]
op	108:21	0:0	6	.
water	108:22	0:0	6	in_channel
op	108:33	0:0	6	=
water	108:35	0:0	6	in_ch
water	108:40	0:0	6	;
water	109:12	0:0	6	s
op	109:13	0:0	6	->
water	109:15	0:0	6	map
op	109:18	0:0	6	[
water	109:19	0:0	6	i
op	109:20	0:0	6	]
op	109:21	0:0	6	.
water	109:22	0:0	6	out_channel
op	109:34	0:0	6	=
water	109:36	0:0	6	out_ch
water	109:42	0:0	6	;
water	110:12	0:0	6	out_ch_mask
op	110:24	0:0	6	|=
water	110:27	0:0	6	out_ch
water	110:33	0:0	6	;
break	111:12	111:17	6	
water	112:8	0:0	6	}
water	113:4	0:0	4	}
water	114:4	0:0	2	s
op	114:5	0:0	2	->
water	114:7	0:0	2	mode
op	114:21	0:0	2	=
water	114:23	0:0	2	mode
water	114:27	0:0	2	;
water	115:4	0:0	2	s
op	115:5	0:0	2	->
water	115:7	0:0	2	nch
op	115:21	0:0	2	=
water	115:23	0:0	2	map_entries
water	115:34	0:0	2	;
water	116:4	0:0	2	s
op	116:5	0:0	2	->
water	116:7	0:0	2	output_layout
op	116:21	0:0	2	=
water	116:23	0:0	2	out_ch_mask
water	116:35	0:0	2	?
water	116:37	0:0	2	out_ch_mask
water	116:49	0:0	2	:
call	117:23	117:64	2	av_get_default_channel_layout
arg	117:53	117:64	3	map_entries
water	117:53	0:0	4	map_entries
water	117:65	0:0	2	;
if	118:4	145:4	2	(s -> channel_layout_str)
cond	118:8	118:11	3	s -> channel_layout_str
water	118:8	0:0	4	s
op	118:9	0:0	4	->
water	118:11	0:0	4	channel_layout_str
stmts	118:31	145:4	3	
water	118:31	0:0	4	{
decl	119:8	119:20	4	uint64_t	fmt
if	120:8	124:8	4	(( fmt =av_get_channel_layout (s -> channel_layout_str ) ) == 0)
cond	120:12	120:68	5	( fmt =av_get_channel_layout (s -> channel_layout_str ) ) == 0
water	120:12	0:0	6	(
water	120:13	0:0	6	fmt
op	120:17	0:0	6	=
call	120:19	120:62	6	av_get_channel_layout
arg	120:41	120:62	7	s->channel_layout_str
water	120:41	0:0	8	s
op	120:42	0:0	8	->
water	120:44	0:0	8	channel_layout_str
water	120:63	0:0	6	)
op	120:65	0:0	6	==
water	120:68	0:0	6	0
stmts	120:71	124:8	5	
water	120:71	0:0	6	{
call	121:12	122:40	6	av_log
arg	121:19	121:22	7	ctx
water	121:19	0:0	8	ctx
arg	121:24	121:36	7	AV_LOG_ERROR
water	121:24	0:0	8	AV_LOG_ERROR
arg	121:38	121:77	7	"Error parsing channel layout: '%s'.\n"
water	121:38	0:0	8	"Error parsing channel layout: '%s'.\n"
arg	122:19	122:40	7	s->channel_layout_str
water	122:19	0:0	8	s
op	122:20	0:0	8	->
water	122:22	0:0	8	channel_layout_str
water	122:41	0:0	6	;
return	123:12	123:34	6	AVERROR(EINVAL)
call	123:19	123:33	7	AVERROR
arg	123:27	123:33	8	EINVAL
water	123:27	0:0	9	EINVAL
water	124:8	0:0	6	}
if	125:8	132:8	4	(mode == MAP_NONE)
cond	125:12	125:20	5	mode == MAP_NONE
water	125:12	0:0	6	mode
op	125:17	0:0	6	==
water	125:20	0:0	6	MAP_NONE
stmts	125:30	132:8	5	
water	125:30	0:0	6	{
decl	126:12	126:17	6	int	i
water	127:12	0:0	6	s
op	127:13	0:0	6	->
water	127:15	0:0	6	nch
op	127:19	0:0	6	=
call	127:21	127:58	6	av_get_channel_layout_nb_channels
arg	127:55	127:58	7	fmt
water	127:55	0:0	8	fmt
water	127:59	0:0	6	;
for	128:12	131:12	6	(i = 0 ;i < s -> nch;i ++)
forinit	128:17	128:22	7	i = 0 ;
water	128:17	0:0	8	i
op	128:19	0:0	8	=
water	128:21	0:0	8	0
water	128:22	0:0	8	;
cond	128:24	128:31	7	i < s -> nch
water	128:24	0:0	8	i
op	128:26	0:0	8	<
water	128:28	0:0	8	s
op	128:29	0:0	8	->
water	128:31	0:0	8	nch
forexpr	128:36	128:37	7	i ++
water	128:36	0:0	8	i
op	128:37	0:0	8	++
stmts	128:41	131:12	7	
water	128:41	0:0	8	{
water	129:16	0:0	8	s
op	129:17	0:0	8	->
water	129:19	0:0	8	map
op	129:22	0:0	8	[
water	129:23	0:0	8	i
op	129:24	0:0	8	]
op	129:25	0:0	8	.
water	129:26	0:0	8	in_channel_idx
op	129:42	0:0	8	=
water	129:44	0:0	8	i
water	129:45	0:0	8	;
water	130:16	0:0	8	s
op	130:17	0:0	8	->
water	130:19	0:0	8	map
op	130:22	0:0	8	[
water	130:23	0:0	8	i
op	130:24	0:0	8	]
op	130:25	0:0	8	.
water	130:26	0:0	8	out_channel_idx
op	130:42	0:0	8	=
water	130:44	0:0	8	i
water	130:45	0:0	8	;
water	131:12	0:0	8	}
water	132:8	0:0	6	}
else	132:10	138:8	4
stmts	132:15	138:8	5	
if	132:15	138:8	6	(out_ch_mask && out_ch_mask != fmt)
cond	132:19	132:49	7	out_ch_mask && out_ch_mask != fmt
water	132:19	0:0	8	out_ch_mask
op	132:31	0:0	8	&&
water	132:34	0:0	8	out_ch_mask
op	132:46	0:0	8	!=
water	132:49	0:0	8	fmt
stmts	132:54	138:8	7	
water	132:54	0:0	8	{
call	133:12	133:73	8	av_get_channel_layout_string
arg	133:41	133:44	9	buf
water	133:41	0:0	10	buf
arg	133:46	133:57	9	sizeof(buf)
op	133:46	0:0	10	sizeof
water	133:52	0:0	10	(
water	133:53	0:0	10	buf
water	133:56	0:0	10	)
arg	133:59	133:60	9	0
water	133:59	0:0	10	0
arg	133:62	133:73	9	out_ch_mask
water	133:62	0:0	10	out_ch_mask
water	133:74	0:0	8	;
call	134:12	136:45	8	av_log
arg	134:19	134:22	9	ctx
water	134:19	0:0	10	ctx
arg	134:24	134:36	9	AV_LOG_ERROR
water	134:24	0:0	10	AV_LOG_ERROR
arg	135:19	135:98	9	"Output channel layout '%s' does not match the list of channel mapped: '%s'.\n"
water	135:19	0:0	10	"Output channel layout '%s' does not match the list of channel mapped: '%s'.\n"
arg	136:19	136:40	9	s->channel_layout_str
water	136:19	0:0	10	s
op	136:20	0:0	10	->
water	136:22	0:0	10	channel_layout_str
arg	136:42	136:45	9	buf
water	136:42	0:0	10	buf
water	136:46	0:0	8	;
return	137:12	137:34	8	AVERROR(EINVAL)
call	137:19	137:33	9	AVERROR
arg	137:27	137:33	10	EINVAL
water	137:27	0:0	11	EINVAL
water	138:8	0:0	8	}
else	138:10	143:8	4
stmts	138:15	143:8	5	
if	138:15	143:8	6	(s -> nch !=av_get_channel_layout_nb_channels (fmt ))
cond	138:19	138:66	7	s -> nch !=av_get_channel_layout_nb_channels (fmt )
water	138:19	0:0	8	s
op	138:20	0:0	8	->
water	138:22	0:0	8	nch
op	138:26	0:0	8	!=
call	138:29	138:66	8	av_get_channel_layout_nb_channels
arg	138:63	138:66	9	fmt
water	138:63	0:0	10	fmt
stmts	138:69	143:8	7	
water	138:69	0:0	8	{
call	139:12	141:48	8	av_log
arg	139:19	139:22	9	ctx
water	139:19	0:0	10	ctx
arg	139:24	139:36	9	AV_LOG_ERROR
water	139:24	0:0	10	AV_LOG_ERROR
arg	140:19	140:96	9	"Output channel layout %s does not match the number of channels mapped %d.\n"
water	140:19	0:0	10	"Output channel layout %s does not match the number of channels mapped %d.\n"
arg	141:19	141:40	9	s->channel_layout_str
water	141:19	0:0	10	s
op	141:20	0:0	10	->
water	141:22	0:0	10	channel_layout_str
arg	141:42	141:48	9	s->nch
water	141:42	0:0	10	s
op	141:43	0:0	10	->
water	141:45	0:0	10	nch
water	141:49	0:0	8	;
return	142:12	142:34	8	AVERROR(EINVAL)
call	142:19	142:33	9	AVERROR
arg	142:27	142:33	10	EINVAL
water	142:27	0:0	11	EINVAL
water	143:8	0:0	8	}
water	144:8	0:0	4	s
op	144:9	0:0	4	->
water	144:11	0:0	4	output_layout
op	144:25	0:0	4	=
water	144:27	0:0	4	fmt
water	144:30	0:0	4	;
water	145:4	0:0	4	}
if	146:4	150:4	2	(! s -> output_layout)
cond	146:8	146:12	3	! s -> output_layout
op	146:8	0:0	4	!
water	146:9	0:0	4	s
op	146:10	0:0	4	->
water	146:12	0:0	4	output_layout
stmts	146:27	150:4	3	
water	146:27	0:0	4	{
call	147:8	148:51	4	av_log
arg	147:15	147:18	5	ctx
water	147:15	0:0	6	ctx
arg	147:20	147:32	5	AV_LOG_ERROR
water	147:20	0:0	6	AV_LOG_ERROR
arg	147:34	148:51	5	"Output channel layout is not set and ""cannot be guessed from the maps.\n"
water	147:34	0:0	6	"Output channel layout is not set and "
water	148:15	0:0	6	"cannot be guessed from the maps.\n"
water	148:52	0:0	4	;
return	149:8	149:30	4	AVERROR(EINVAL)
call	149:15	149:29	5	AVERROR
arg	149:23	149:29	6	EINVAL
water	149:23	0:0	7	EINVAL
water	150:4	0:0	4	}
if	151:4	156:4	2	(mode == MAP_PAIR_INT_STR || mode == MAP_PAIR_STR_STR)
cond	151:8	151:44	3	mode == MAP_PAIR_INT_STR || mode == MAP_PAIR_STR_STR
water	151:8	0:0	4	mode
op	151:13	0:0	4	==
water	151:16	0:0	4	MAP_PAIR_INT_STR
op	151:33	0:0	4	||
water	151:36	0:0	4	mode
op	151:41	0:0	4	==
water	151:44	0:0	4	MAP_PAIR_STR_STR
stmts	151:62	156:4	3	
water	151:62	0:0	4	{
for	152:8	155:8	4	(i = 0 ;i < s -> nch;i ++)
forinit	152:13	152:18	5	i = 0 ;
water	152:13	0:0	6	i
op	152:15	0:0	6	=
water	152:17	0:0	6	0
water	152:18	0:0	6	;
cond	152:20	152:27	5	i < s -> nch
water	152:20	0:0	6	i
op	152:22	0:0	6	<
water	152:24	0:0	6	s
op	152:25	0:0	6	->
water	152:27	0:0	6	nch
forexpr	152:32	152:33	5	i ++
water	152:32	0:0	6	i
op	152:33	0:0	6	++
stmts	152:37	155:8	5	
water	152:37	0:0	6	{
water	153:12	0:0	6	s
op	153:13	0:0	6	->
water	153:15	0:0	6	map
op	153:18	0:0	6	[
water	153:19	0:0	6	i
op	153:20	0:0	6	]
op	153:21	0:0	6	.
water	153:22	0:0	6	out_channel_idx
op	153:38	0:0	6	=
call	153:40	154:55	6	av_get_channel_layout_channel_index
arg	154:16	154:32	7	s->output_layout
water	154:16	0:0	8	s
op	154:17	0:0	8	->
water	154:19	0:0	8	output_layout
arg	154:34	154:55	7	s->map[i].out_channel
water	154:34	0:0	8	s
op	154:35	0:0	8	->
water	154:37	0:0	8	map
op	154:40	0:0	8	[
water	154:41	0:0	8	i
op	154:42	0:0	8	]
op	154:43	0:0	8	.
water	154:44	0:0	8	out_channel
water	154:56	0:0	6	;
water	155:8	0:0	6	}
water	156:4	0:0	4	}
return	157:4	157:12	2	0
water	157:11	0:0	3	0
