func	1:0	24:0	0	static int	request_frame
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	23:14	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:32	2	ChorusContext	*s
op	4:21	0:0	2	=
water	4:23	0:0	2	ctx
op	4:26	0:0	2	->
water	4:28	0:0	2	priv
decl	5:4	5:11	2	int	ret
water	6:4	0:0	2	ret
op	6:8	0:0	2	=
call	6:10	6:41	2	ff_request_frame
arg	6:27	6:41	3	ctx->inputs[0]
water	6:27	0:0	4	ctx
op	6:30	0:0	4	->
water	6:32	0:0	4	inputs
op	6:38	0:0	4	[
water	6:39	0:0	4	0
op	6:40	0:0	4	]
water	6:42	0:0	2	;
if	7:4	22:4	2	(ret == AVERROR_EOF && ! ctx -> is_disabled && s -> fade_out)
cond	7:8	7:54	3	ret == AVERROR_EOF && ! ctx -> is_disabled && s -> fade_out
water	7:8	0:0	4	ret
op	7:12	0:0	4	==
water	7:15	0:0	4	AVERROR_EOF
op	7:27	0:0	4	&&
op	7:30	0:0	4	!
water	7:31	0:0	4	ctx
op	7:34	0:0	4	->
water	7:36	0:0	4	is_disabled
op	7:48	0:0	4	&&
water	7:51	0:0	4	s
op	7:52	0:0	4	->
water	7:54	0:0	4	fade_out
stmts	7:64	22:4	3	
water	7:64	0:0	4	{
decl	8:8	8:49	4	int	nb_samples
op	8:23	0:0	4	=
call	8:25	8:48	5	FFMIN
arg	8:31	8:42	6	s->fade_out
water	8:31	0:0	7	s
op	8:32	0:0	7	->
water	8:34	0:0	7	fade_out
arg	8:44	8:48	6	2048
water	8:44	0:0	7	2048
decl	9:8	9:22	4	AVFrame	*frame
water	10:8	0:0	4	frame
op	10:14	0:0	4	=
call	10:16	10:55	4	ff_get_audio_buffer
arg	10:36	10:43	5	outlink
water	10:36	0:0	6	outlink
arg	10:45	10:55	5	nb_samples
water	10:45	0:0	6	nb_samples
water	10:56	0:0	4	;
if	11:8	12:34	4	(! frame)
cond	11:12	11:13	5	! frame
op	11:12	0:0	6	!
water	11:13	0:0	6	frame
stmts	12:12	12:34	5	
return	12:12	12:34	6	AVERROR(ENOMEM)
call	12:19	12:33	7	AVERROR
arg	12:27	12:33	8	ENOMEM
water	12:27	0:0	9	ENOMEM
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	fade_out
op	13:20	0:0	4	-=
water	13:23	0:0	4	nb_samples
water	13:33	0:0	4	;
call	14:8	17:44	4	av_samples_set_silence
arg	14:31	14:51	5	frame->extended_data
water	14:31	0:0	6	frame
op	14:36	0:0	6	->
water	14:38	0:0	6	extended_data
arg	14:53	14:54	5	0
water	14:53	0:0	6	0
arg	15:31	15:48	5	frame->nb_samples
water	15:31	0:0	6	frame
op	15:36	0:0	6	->
water	15:38	0:0	6	nb_samples
arg	16:31	16:48	5	outlink->channels
water	16:31	0:0	6	outlink
op	16:38	0:0	6	->
water	16:40	0:0	6	channels
arg	17:31	17:44	5	frame->format
water	17:31	0:0	6	frame
op	17:36	0:0	6	->
water	17:38	0:0	6	format
water	17:45	0:0	4	;
water	18:8	0:0	4	frame
op	18:13	0:0	4	->
water	18:15	0:0	4	pts
op	18:19	0:0	4	=
water	18:21	0:0	4	s
op	18:22	0:0	4	->
water	18:24	0:0	4	next_pts
water	18:32	0:0	4	;
if	19:8	20:110	4	(s -> next_pts != AV_NOPTS_VALUE)
cond	19:12	19:27	5	s -> next_pts != AV_NOPTS_VALUE
water	19:12	0:0	6	s
op	19:13	0:0	6	->
water	19:15	0:0	6	next_pts
op	19:24	0:0	6	!=
water	19:27	0:0	6	AV_NOPTS_VALUE
stmts	20:12	20:110	5	
water	20:12	0:0	6	s
op	20:13	0:0	6	->
water	20:15	0:0	6	next_pts
op	20:24	0:0	6	+=
call	20:27	20:109	6	av_rescale_q
arg	20:40	20:50	7	nb_samples
water	20:40	0:0	8	nb_samples
arg	20:52	20:89	7	(AVRational){1,outlink->sample_rate}
water	20:52	0:0	8	(
water	20:53	0:0	8	AVRational
water	20:63	0:0	8	)
water	20:64	0:0	8	{
water	20:65	0:0	8	1
water	20:66	0:0	8	,
water	20:68	0:0	8	outlink
op	20:75	0:0	8	->
water	20:77	0:0	8	sample_rate
water	20:88	0:0	8	}
arg	20:91	20:109	7	outlink->time_base
water	20:91	0:0	8	outlink
op	20:98	0:0	8	->
water	20:100	0:0	8	time_base
water	20:110	0:0	6	;
water	21:8	0:0	4	ret
op	21:12	0:0	4	=
call	21:14	21:48	4	filter_frame
arg	21:27	21:41	5	ctx->inputs[0]
water	21:27	0:0	6	ctx
op	21:30	0:0	6	->
water	21:32	0:0	6	inputs
op	21:38	0:0	6	[
water	21:39	0:0	6	0
op	21:40	0:0	6	]
arg	21:43	21:48	5	frame
water	21:43	0:0	6	frame
water	21:49	0:0	4	;
water	22:4	0:0	4	}
return	23:4	23:14	2	ret
water	23:11	0:0	3	ret
