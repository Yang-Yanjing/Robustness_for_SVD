func	1:0	91:0	0	static int	atrim_filter_frame
params	1:29	0:0	1	
param	1:30	1:50	2	AVFilterLink *	inlink
param	1:52	1:66	2	AVFrame *	frame
stmnts	0:0	90:12	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:36	2	TrimContext	*s
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	priv
decl	5:4	5:36	2	int64_t	start_sample
water	5:24	0:0	2	,
decl	5:4	5:36	2	int64_t	end_sample
decl	6:4	6:15	2	int64_t	pts
decl	7:4	7:12	2	int	drop
if	9:4	12:4	2	(s -> eof)
cond	9:8	9:11	3	s -> eof
water	9:8	0:0	4	s
op	9:9	0:0	4	->
water	9:11	0:0	4	eof
stmts	9:16	12:4	3	
water	9:16	0:0	4	{
call	10:8	10:28	4	av_frame_free
arg	10:22	10:28	5	&frame
op	10:22	0:0	6	&
water	10:23	0:0	6	frame
water	10:29	0:0	4	;
return	11:8	11:16	4	0
water	11:15	0:0	5	0
water	12:4	0:0	4	}
if	13:4	15:66	2	(frame -> pts != AV_NOPTS_VALUE)
cond	13:8	13:22	3	frame -> pts != AV_NOPTS_VALUE
water	13:8	0:0	4	frame
op	13:13	0:0	4	->
water	13:15	0:0	4	pts
op	13:19	0:0	4	!=
water	13:22	0:0	4	AV_NOPTS_VALUE
stmts	14:8	15:66	3	
water	14:8	0:0	4	pts
op	14:12	0:0	4	=
call	14:14	15:65	4	av_rescale_q
arg	14:27	14:37	5	frame->pts
water	14:27	0:0	6	frame
op	14:32	0:0	6	->
water	14:34	0:0	6	pts
arg	14:39	14:56	5	inlink->time_base
water	14:39	0:0	6	inlink
op	14:45	0:0	6	->
water	14:47	0:0	6	time_base
arg	15:27	15:65	5	(AVRational){1,inlink->sample_rate}
water	15:27	0:0	6	(
water	15:28	0:0	6	AVRational
water	15:38	0:0	6	)
water	15:39	0:0	6	{
water	15:41	0:0	6	1
water	15:42	0:0	6	,
water	15:44	0:0	6	inlink
op	15:50	0:0	6	->
water	15:52	0:0	6	sample_rate
water	15:64	0:0	6	}
water	15:66	0:0	4	;
else	16:4	17:25	2
stmts	17:8	17:25	3	
water	17:8	0:0	4	pts
op	17:12	0:0	4	=
water	17:14	0:0	4	s
op	17:15	0:0	4	->
water	17:17	0:0	4	next_pts
water	17:25	0:0	4	;
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	next_pts
op	18:16	0:0	2	=
water	18:18	0:0	2	pts
op	18:22	0:0	2	+
water	18:24	0:0	2	frame
op	18:29	0:0	2	->
water	18:31	0:0	2	nb_samples
water	18:41	0:0	2	;
if	20:4	22:4	2	(s -> start_sample < 0 && s -> start_pts == AV_NOPTS_VALUE)
cond	20:8	20:47	3	s -> start_sample < 0 && s -> start_pts == AV_NOPTS_VALUE
water	20:8	0:0	4	s
op	20:9	0:0	4	->
water	20:11	0:0	4	start_sample
op	20:24	0:0	4	<
water	20:26	0:0	4	0
op	20:28	0:0	4	&&
water	20:31	0:0	4	s
op	20:32	0:0	4	->
water	20:34	0:0	4	start_pts
op	20:44	0:0	4	==
water	20:47	0:0	4	AV_NOPTS_VALUE
stmts	20:63	22:4	3	
water	20:63	0:0	4	{
water	21:8	0:0	4	start_sample
op	21:21	0:0	4	=
water	21:23	0:0	4	0
water	21:24	0:0	4	;
water	22:4	0:0	4	}
else	22:6	37:4	2
stmts	22:11	37:4	3	
water	22:11	0:0	4	{
water	23:8	0:0	4	drop
op	23:13	0:0	4	=
water	23:15	0:0	4	1
water	23:16	0:0	4	;
water	24:8	0:0	4	start_sample
op	24:21	0:0	4	=
water	24:23	0:0	4	frame
op	24:28	0:0	4	->
water	24:30	0:0	4	nb_samples
water	24:40	0:0	4	;
if	25:8	29:8	4	(s -> start_sample >= 0 && s -> nb_samples + frame -> nb_samples > s -> start_sample)
cond	25:12	26:51	5	s -> start_sample >= 0 && s -> nb_samples + frame -> nb_samples > s -> start_sample
water	25:12	0:0	6	s
op	25:13	0:0	6	->
water	25:15	0:0	6	start_sample
op	25:28	0:0	6	>=
water	25:31	0:0	6	0
op	25:33	0:0	6	&&
water	26:12	0:0	6	s
op	26:13	0:0	6	->
water	26:15	0:0	6	nb_samples
op	26:26	0:0	6	+
water	26:28	0:0	6	frame
op	26:33	0:0	6	->
water	26:35	0:0	6	nb_samples
op	26:46	0:0	6	>
water	26:48	0:0	6	s
op	26:49	0:0	6	->
water	26:51	0:0	6	start_sample
stmts	26:65	29:8	5	
water	26:65	0:0	6	{
water	27:12	0:0	6	drop
op	27:25	0:0	6	=
water	27:27	0:0	6	0
water	27:28	0:0	6	;
water	28:12	0:0	6	start_sample
op	28:25	0:0	6	=
call	28:27	28:78	6	FFMIN
arg	28:33	28:45	7	start_sample
water	28:33	0:0	8	start_sample
arg	28:47	28:78	7	s->start_sample-s->nb_samples
water	28:47	0:0	8	s
op	28:48	0:0	8	->
water	28:50	0:0	8	start_sample
op	28:63	0:0	8	-
water	28:65	0:0	8	s
op	28:66	0:0	8	->
water	28:68	0:0	8	nb_samples
water	28:79	0:0	6	;
water	29:8	0:0	6	}
if	30:8	34:8	4	(s -> start_pts != AV_NOPTS_VALUE && pts != AV_NOPTS_VALUE && pts + frame -> nb_samples > s -> start_pts)
cond	30:12	31:41	5	s -> start_pts != AV_NOPTS_VALUE && pts != AV_NOPTS_VALUE && pts + frame -> nb_samples > s -> start_pts
water	30:12	0:0	6	s
op	30:13	0:0	6	->
water	30:15	0:0	6	start_pts
op	30:25	0:0	6	!=
water	30:28	0:0	6	AV_NOPTS_VALUE
op	30:43	0:0	6	&&
water	30:46	0:0	6	pts
op	30:50	0:0	6	!=
water	30:53	0:0	6	AV_NOPTS_VALUE
op	30:68	0:0	6	&&
water	31:12	0:0	6	pts
op	31:16	0:0	6	+
water	31:18	0:0	6	frame
op	31:23	0:0	6	->
water	31:25	0:0	6	nb_samples
op	31:36	0:0	6	>
water	31:38	0:0	6	s
op	31:39	0:0	6	->
water	31:41	0:0	6	start_pts
stmts	31:52	34:8	5	
water	31:52	0:0	6	{
water	32:12	0:0	6	drop
op	32:17	0:0	6	=
water	32:19	0:0	6	0
water	32:20	0:0	6	;
water	33:12	0:0	6	start_sample
op	33:25	0:0	6	=
call	33:27	33:65	6	FFMIN
arg	33:33	33:45	7	start_sample
water	33:33	0:0	8	start_sample
arg	33:47	33:65	7	s->start_pts-pts
water	33:47	0:0	8	s
op	33:48	0:0	8	->
water	33:50	0:0	8	start_pts
op	33:60	0:0	8	-
water	33:62	0:0	8	pts
water	33:66	0:0	6	;
water	34:8	0:0	6	}
if	35:8	36:21	4	(drop)
cond	35:12	35:12	5	drop
water	35:12	0:0	6	drop
stmts	36:12	36:21	5	
goto	36:12	36:21	6	drop
water	36:17	0:0	7	drop
water	37:4	0:0	4	}
if	38:4	39:41	2	(s -> first_pts == AV_NOPTS_VALUE)
cond	38:8	38:24	3	s -> first_pts == AV_NOPTS_VALUE
water	38:8	0:0	4	s
op	38:9	0:0	4	->
water	38:11	0:0	4	first_pts
op	38:21	0:0	4	==
water	38:24	0:0	4	AV_NOPTS_VALUE
stmts	39:8	39:41	3	
water	39:8	0:0	4	s
op	39:9	0:0	4	->
water	39:11	0:0	4	first_pts
op	39:21	0:0	4	=
water	39:23	0:0	4	pts
op	39:27	0:0	4	+
water	39:29	0:0	4	start_sample
water	39:41	0:0	4	;
if	41:4	43:4	2	(s -> end_sample == INT64_MAX && s -> end_pts == AV_NOPTS_VALUE && ! s -> duration_tb)
cond	41:8	41:74	3	s -> end_sample == INT64_MAX && s -> end_pts == AV_NOPTS_VALUE && ! s -> duration_tb
water	41:8	0:0	4	s
op	41:9	0:0	4	->
water	41:11	0:0	4	end_sample
op	41:22	0:0	4	==
water	41:25	0:0	4	INT64_MAX
op	41:35	0:0	4	&&
water	41:38	0:0	4	s
op	41:39	0:0	4	->
water	41:41	0:0	4	end_pts
op	41:49	0:0	4	==
water	41:52	0:0	4	AV_NOPTS_VALUE
op	41:67	0:0	4	&&
op	41:70	0:0	4	!
water	41:71	0:0	4	s
op	41:72	0:0	4	->
water	41:74	0:0	4	duration_tb
stmts	41:87	43:4	3	
water	41:87	0:0	4	{
water	42:8	0:0	4	end_sample
op	42:19	0:0	4	=
water	42:21	0:0	4	frame
op	42:26	0:0	4	->
water	42:28	0:0	4	nb_samples
water	42:38	0:0	4	;
water	43:4	0:0	4	}
else	43:6	64:4	2
stmts	43:11	64:4	3	
water	43:11	0:0	4	{
water	44:8	0:0	4	drop
op	44:19	0:0	4	=
water	44:21	0:0	4	1
water	44:22	0:0	4	;
water	45:8	0:0	4	end_sample
op	45:19	0:0	4	=
water	45:21	0:0	4	0
water	45:22	0:0	4	;
if	46:8	50:8	4	(s -> end_sample != INT64_MAX && s -> nb_samples < s -> end_sample)
cond	46:12	47:31	5	s -> end_sample != INT64_MAX && s -> nb_samples < s -> end_sample
water	46:12	0:0	6	s
op	46:13	0:0	6	->
water	46:15	0:0	6	end_sample
op	46:26	0:0	6	!=
water	46:29	0:0	6	INT64_MAX
op	46:39	0:0	6	&&
water	47:12	0:0	6	s
op	47:13	0:0	6	->
water	47:15	0:0	6	nb_samples
op	47:26	0:0	6	<
water	47:28	0:0	6	s
op	47:29	0:0	6	->
water	47:31	0:0	6	end_sample
stmts	47:43	50:8	5	
water	47:43	0:0	6	{
water	48:12	0:0	6	drop
op	48:23	0:0	6	=
water	48:25	0:0	6	0
water	48:26	0:0	6	;
water	49:12	0:0	6	end_sample
op	49:23	0:0	6	=
call	49:25	49:72	6	FFMAX
arg	49:31	49:41	7	end_sample
water	49:31	0:0	8	end_sample
arg	49:43	49:72	7	s->end_sample-s->nb_samples
water	49:43	0:0	8	s
op	49:44	0:0	8	->
water	49:46	0:0	8	end_sample
op	49:57	0:0	8	-
water	49:59	0:0	8	s
op	49:60	0:0	8	->
water	49:62	0:0	8	nb_samples
water	49:73	0:0	6	;
water	50:8	0:0	6	}
if	51:8	55:8	4	(s -> end_pts != AV_NOPTS_VALUE && pts != AV_NOPTS_VALUE && pts < s -> end_pts)
cond	51:12	52:21	5	s -> end_pts != AV_NOPTS_VALUE && pts != AV_NOPTS_VALUE && pts < s -> end_pts
water	51:12	0:0	6	s
op	51:13	0:0	6	->
water	51:15	0:0	6	end_pts
op	51:23	0:0	6	!=
water	51:26	0:0	6	AV_NOPTS_VALUE
op	51:41	0:0	6	&&
water	51:44	0:0	6	pts
op	51:48	0:0	6	!=
water	51:51	0:0	6	AV_NOPTS_VALUE
op	51:66	0:0	6	&&
water	52:12	0:0	6	pts
op	52:16	0:0	6	<
water	52:18	0:0	6	s
op	52:19	0:0	6	->
water	52:21	0:0	6	end_pts
stmts	52:30	55:8	5	
water	52:30	0:0	6	{
water	53:12	0:0	6	drop
op	53:23	0:0	6	=
water	53:25	0:0	6	0
water	53:26	0:0	6	;
water	54:12	0:0	6	end_sample
op	54:23	0:0	6	=
call	54:25	54:59	6	FFMAX
arg	54:31	54:41	7	end_sample
water	54:31	0:0	8	end_sample
arg	54:43	54:59	7	s->end_pts-pts
water	54:43	0:0	8	s
op	54:44	0:0	8	->
water	54:46	0:0	8	end_pts
op	54:54	0:0	8	-
water	54:56	0:0	8	pts
water	54:60	0:0	6	;
water	55:8	0:0	6	}
if	56:8	59:8	4	(s -> duration_tb && pts - s -> first_pts < s -> duration_tb)
cond	56:12	56:54	5	s -> duration_tb && pts - s -> first_pts < s -> duration_tb
water	56:12	0:0	6	s
op	56:13	0:0	6	->
water	56:15	0:0	6	duration_tb
op	56:27	0:0	6	&&
water	56:30	0:0	6	pts
op	56:34	0:0	6	-
water	56:36	0:0	6	s
op	56:37	0:0	6	->
water	56:39	0:0	6	first_pts
op	56:49	0:0	6	<
water	56:51	0:0	6	s
op	56:52	0:0	6	->
water	56:54	0:0	6	duration_tb
stmts	56:67	59:8	5	
water	56:67	0:0	6	{
water	57:12	0:0	6	drop
op	57:23	0:0	6	=
water	57:25	0:0	6	0
water	57:26	0:0	6	;
water	58:12	0:0	6	end_sample
op	58:23	0:0	6	=
call	58:25	58:78	6	FFMAX
arg	58:31	58:41	7	end_sample
water	58:31	0:0	8	end_sample
arg	58:43	58:78	7	s->first_pts+s->duration_tb-pts
water	58:43	0:0	8	s
op	58:44	0:0	8	->
water	58:46	0:0	8	first_pts
op	58:56	0:0	8	+
water	58:58	0:0	8	s
op	58:59	0:0	8	->
water	58:61	0:0	8	duration_tb
op	58:73	0:0	8	-
water	58:75	0:0	8	pts
water	58:79	0:0	6	;
water	59:8	0:0	6	}
if	60:8	63:8	4	(drop)
cond	60:12	60:12	5	drop
water	60:12	0:0	6	drop
stmts	60:18	63:8	5	
water	60:18	0:0	6	{
water	61:12	0:0	6	s
op	61:13	0:0	6	->
water	61:15	0:0	6	eof
op	61:19	0:0	6	=
water	61:21	0:0	6	inlink
op	61:27	0:0	6	->
water	61:29	0:0	6	closed
op	61:36	0:0	6	=
water	61:38	0:0	6	1
water	61:39	0:0	6	;
goto	62:12	62:21	6	drop
water	62:17	0:0	7	drop
water	63:8	0:0	6	}
water	64:4	0:0	4	}
water	65:4	0:0	2	s
op	65:5	0:0	2	->
water	65:7	0:0	2	nb_samples
op	65:18	0:0	2	+=
water	65:21	0:0	2	frame
op	65:26	0:0	2	->
water	65:28	0:0	2	nb_samples
water	65:38	0:0	2	;
water	66:4	0:0	2	start_sample
op	66:19	0:0	2	=
call	66:21	66:42	2	FFMAX
arg	66:27	66:28	3	0
water	66:27	0:0	4	0
arg	66:30	66:42	3	start_sample
water	66:30	0:0	4	start_sample
water	66:43	0:0	2	;
water	67:4	0:0	2	end_sample
op	67:19	0:0	2	=
call	67:21	67:56	2	FFMIN
arg	67:27	67:44	3	frame->nb_samples
water	67:27	0:0	4	frame
op	67:32	0:0	4	->
water	67:34	0:0	4	nb_samples
arg	67:46	67:56	3	end_sample
water	67:46	0:0	4	end_sample
water	67:57	0:0	2	;
call	68:4	68:94	2	av_assert0
arg	68:15	68:94	3	start_sample<end_sample||(start_sample==end_sample&&!frame->nb_samples)
water	68:15	0:0	4	start_sample
op	68:28	0:0	4	<
water	68:30	0:0	4	end_sample
op	68:41	0:0	4	||
water	68:44	0:0	4	(
water	68:45	0:0	4	start_sample
op	68:58	0:0	4	==
water	68:61	0:0	4	end_sample
op	68:72	0:0	4	&&
op	68:75	0:0	4	!
water	68:76	0:0	4	frame
op	68:81	0:0	4	->
water	68:83	0:0	4	nb_samples
water	68:93	0:0	4	)
water	68:95	0:0	2	;
if	69:4	84:4	2	(start_sample)
cond	69:8	69:8	3	start_sample
water	69:8	0:0	4	start_sample
stmts	69:22	84:4	3	
water	69:22	0:0	4	{
decl	70:8	70:86	4	AVFrame	*out
op	70:21	0:0	4	=
call	70:23	70:85	5	ff_get_audio_buffer
arg	70:43	70:58	6	ctx->outputs[0]
water	70:43	0:0	7	ctx
op	70:46	0:0	7	->
water	70:48	0:0	7	outputs
op	70:55	0:0	7	[
water	70:56	0:0	7	0
op	70:57	0:0	7	]
arg	70:60	70:85	6	end_sample-start_sample
water	70:60	0:0	7	end_sample
op	70:71	0:0	7	-
water	70:73	0:0	7	start_sample
if	71:8	74:8	4	(! out)
cond	71:12	71:13	5	! out
op	71:12	0:0	6	!
water	71:13	0:0	6	out
stmts	71:18	74:8	5	
water	71:18	0:0	6	{
call	72:12	72:32	6	av_frame_free
arg	72:26	72:32	7	&frame
op	72:26	0:0	8	&
water	72:27	0:0	8	frame
water	72:33	0:0	6	;
return	73:12	73:34	6	AVERROR(ENOMEM)
call	73:19	73:33	7	AVERROR
arg	73:27	73:33	8	ENOMEM
water	73:27	0:0	9	ENOMEM
water	74:8	0:0	6	}
call	75:8	75:38	4	av_frame_copy_props
arg	75:28	75:31	5	out
water	75:28	0:0	6	out
arg	75:33	75:38	5	frame
water	75:33	0:0	6	frame
water	75:39	0:0	4	;
call	76:8	78:37	4	av_samples_copy
arg	76:24	76:42	5	out->extended_data
water	76:24	0:0	6	out
op	76:27	0:0	6	->
water	76:29	0:0	6	extended_data
arg	76:44	76:64	5	frame->extended_data
water	76:44	0:0	6	frame
op	76:49	0:0	6	->
water	76:51	0:0	6	extended_data
arg	76:66	76:67	5	0
water	76:66	0:0	6	0
arg	76:69	76:81	5	start_sample
water	76:69	0:0	6	start_sample
arg	77:24	77:39	5	out->nb_samples
water	77:24	0:0	6	out
op	77:27	0:0	6	->
water	77:29	0:0	6	nb_samples
arg	77:41	77:57	5	inlink->channels
water	77:41	0:0	6	inlink
op	77:47	0:0	6	->
water	77:49	0:0	6	channels
arg	78:24	78:37	5	frame->format
water	78:24	0:0	6	frame
op	78:29	0:0	6	->
water	78:31	0:0	6	format
water	78:38	0:0	4	;
if	79:8	81:55	4	(out -> pts != AV_NOPTS_VALUE)
cond	79:12	79:24	5	out -> pts != AV_NOPTS_VALUE
water	79:12	0:0	6	out
op	79:15	0:0	6	->
water	79:17	0:0	6	pts
op	79:21	0:0	6	!=
water	79:24	0:0	6	AV_NOPTS_VALUE
stmts	80:12	81:55	5	
water	80:12	0:0	6	out
op	80:15	0:0	6	->
water	80:17	0:0	6	pts
op	80:21	0:0	6	+=
call	80:24	81:54	6	av_rescale_q
arg	80:37	80:49	7	start_sample
water	80:37	0:0	8	start_sample
arg	80:51	80:86	7	(AVRational){1,out->sample_rate}
water	80:51	0:0	8	(
water	80:52	0:0	8	AVRational
water	80:62	0:0	8	)
water	80:63	0:0	8	{
water	80:65	0:0	8	1
water	80:66	0:0	8	,
water	80:68	0:0	8	out
op	80:71	0:0	8	->
water	80:73	0:0	8	sample_rate
water	80:85	0:0	8	}
arg	81:37	81:54	7	inlink->time_base
water	81:37	0:0	8	inlink
op	81:43	0:0	8	->
water	81:45	0:0	8	time_base
water	81:55	0:0	6	;
call	82:8	82:28	4	av_frame_free
arg	82:22	82:28	5	&frame
op	82:22	0:0	6	&
water	82:23	0:0	6	frame
water	82:29	0:0	4	;
water	83:8	0:0	4	frame
op	83:14	0:0	4	=
water	83:16	0:0	4	out
water	83:19	0:0	4	;
water	84:4	0:0	4	}
else	84:6	85:38	2
stmts	85:8	85:38	3	
water	85:8	0:0	4	frame
op	85:13	0:0	4	->
water	85:15	0:0	4	nb_samples
op	85:26	0:0	4	=
water	85:28	0:0	4	end_sample
water	85:38	0:0	4	;
return	86:4	86:50	2	ff_filter_frame(ctx->outputs[0],frame)
call	86:11	86:49	3	ff_filter_frame
arg	86:27	86:42	4	ctx->outputs[0]
water	86:27	0:0	5	ctx
op	86:30	0:0	5	->
water	86:32	0:0	5	outputs
op	86:39	0:0	5	[
water	86:40	0:0	5	0
op	86:41	0:0	5	]
arg	86:44	86:49	4	frame
water	86:44	0:0	5	frame
label	87:0	87:4	2	drop :
water	88:4	0:0	2	s
op	88:5	0:0	2	->
water	88:7	0:0	2	nb_samples
op	88:18	0:0	2	+=
water	88:21	0:0	2	frame
op	88:26	0:0	2	->
water	88:28	0:0	2	nb_samples
water	88:38	0:0	2	;
call	89:4	89:24	2	av_frame_free
arg	89:18	89:24	3	&frame
op	89:18	0:0	4	&
water	89:19	0:0	4	frame
water	89:25	0:0	2	;
return	90:4	90:12	2	0
water	90:11	0:0	3	0
