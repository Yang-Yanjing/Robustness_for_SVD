func	1:0	167:0	0	static void	output_audio_block
params	1:30	0:0	1	
param	1:31	1:50	2	AC3EncodeContext *	s
param	1:52	1:59	2	int	blk
stmnts	0:0	166:4	1	
decl	3:4	3:49	2	int	ch
water	3:10	0:0	2	,
decl	3:4	3:49	2	int	i
water	3:13	0:0	2	,
decl	3:4	3:49	2	int	baie
water	3:19	0:0	2	,
decl	3:4	3:49	2	int	bnd
water	3:24	0:0	2	,
decl	3:4	3:49	2	int	got_cpl
water	3:33	0:0	2	,
decl	3:4	3:49	2	int	av_uninit
water	3:44	0:0	2	(
water	3:45	0:0	2	ch0
water	3:48	0:0	2	)
decl	4:4	4:37	2	AC3Block	*block
op	4:20	0:0	2	=
op	4:22	0:0	2	&
water	4:23	0:0	2	s
op	4:24	0:0	2	->
water	4:26	0:0	2	blocks
op	4:32	0:0	2	[
water	4:33	0:0	2	blk
op	4:36	0:0	2	]
if	6:4	9:4	2	(! s -> eac3)
cond	6:8	6:12	3	! s -> eac3
op	6:8	0:0	4	!
water	6:9	0:0	4	s
op	6:10	0:0	4	->
water	6:12	0:0	4	eac3
stmts	6:18	9:4	3	
water	6:18	0:0	4	{
for	7:8	8:34	4	(ch = 0 ;ch < s -> fbw_channels;ch ++)
forinit	7:13	7:19	5	ch = 0 ;
water	7:13	0:0	6	ch
op	7:16	0:0	6	=
water	7:18	0:0	6	0
water	7:19	0:0	6	;
cond	7:21	7:29	5	ch < s -> fbw_channels
water	7:21	0:0	6	ch
op	7:24	0:0	6	<
water	7:26	0:0	6	s
op	7:27	0:0	6	->
water	7:29	0:0	6	fbw_channels
forexpr	7:43	7:45	5	ch ++
water	7:43	0:0	6	ch
op	7:45	0:0	6	++
stmts	8:12	8:34	5	
call	8:12	8:33	6	put_bits
arg	8:21	8:27	7	&s->pb
op	8:21	0:0	8	&
water	8:22	0:0	8	s
op	8:23	0:0	8	->
water	8:25	0:0	8	pb
arg	8:29	8:30	7	1
water	8:29	0:0	8	1
arg	8:32	8:33	7	0
water	8:32	0:0	8	0
water	8:34	0:0	6	;
water	9:4	0:0	4	}
if	11:4	14:4	2	(! s -> eac3)
cond	11:8	11:12	3	! s -> eac3
op	11:8	0:0	4	!
water	11:9	0:0	4	s
op	11:10	0:0	4	->
water	11:12	0:0	4	eac3
stmts	11:18	14:4	3	
water	11:18	0:0	4	{
for	12:8	13:34	4	(ch = 0 ;ch < s -> fbw_channels;ch ++)
forinit	12:13	12:19	5	ch = 0 ;
water	12:13	0:0	6	ch
op	12:16	0:0	6	=
water	12:18	0:0	6	0
water	12:19	0:0	6	;
cond	12:21	12:29	5	ch < s -> fbw_channels
water	12:21	0:0	6	ch
op	12:24	0:0	6	<
water	12:26	0:0	6	s
op	12:27	0:0	6	->
water	12:29	0:0	6	fbw_channels
forexpr	12:43	12:45	5	ch ++
water	12:43	0:0	6	ch
op	12:45	0:0	6	++
stmts	13:12	13:34	5	
call	13:12	13:33	6	put_bits
arg	13:21	13:27	7	&s->pb
op	13:21	0:0	8	&
water	13:22	0:0	8	s
op	13:23	0:0	8	->
water	13:25	0:0	8	pb
arg	13:29	13:30	7	1
water	13:29	0:0	8	1
arg	13:32	13:33	7	1
water	13:32	0:0	8	1
water	13:34	0:0	6	;
water	14:4	0:0	4	}
call	16:4	16:25	2	put_bits
arg	16:13	16:19	3	&s->pb
op	16:13	0:0	4	&
water	16:14	0:0	4	s
op	16:15	0:0	4	->
water	16:17	0:0	4	pb
arg	16:21	16:22	3	1
water	16:21	0:0	4	1
arg	16:24	16:25	3	0
water	16:24	0:0	4	0
water	16:26	0:0	2	;
if	18:4	19:30	2	(s -> eac3)
cond	18:8	18:11	3	s -> eac3
water	18:8	0:0	4	s
op	18:9	0:0	4	->
water	18:11	0:0	4	eac3
stmts	19:8	19:30	3	
call	19:8	19:29	4	put_bits
arg	19:17	19:23	5	&s->pb
op	19:17	0:0	6	&
water	19:18	0:0	6	s
op	19:19	0:0	6	->
water	19:21	0:0	6	pb
arg	19:25	19:26	5	1
water	19:25	0:0	6	1
arg	19:28	19:29	5	0
water	19:28	0:0	6	0
water	19:30	0:0	4	;
if	21:4	22:52	2	(! s -> eac3)
cond	21:8	21:12	3	! s -> eac3
op	21:8	0:0	4	!
water	21:9	0:0	4	s
op	21:10	0:0	4	->
water	21:12	0:0	4	eac3
stmts	22:8	22:52	3	
call	22:8	22:51	4	put_bits
arg	22:17	22:23	5	&s->pb
op	22:17	0:0	6	&
water	22:18	0:0	6	s
op	22:19	0:0	6	->
water	22:21	0:0	6	pb
arg	22:25	22:26	5	1
water	22:25	0:0	6	1
arg	22:28	22:51	5	block->new_cpl_strategy
water	22:28	0:0	6	block
op	22:33	0:0	6	->
water	22:35	0:0	6	new_cpl_strategy
water	22:52	0:0	4	;
if	23:4	48:4	2	(block -> new_cpl_strategy)
cond	23:8	23:15	3	block -> new_cpl_strategy
water	23:8	0:0	4	block
op	23:13	0:0	4	->
water	23:15	0:0	4	new_cpl_strategy
stmts	23:33	48:4	3	
water	23:33	0:0	4	{
if	24:8	25:50	4	(! s -> eac3)
cond	24:12	24:16	5	! s -> eac3
op	24:12	0:0	6	!
water	24:13	0:0	6	s
op	24:14	0:0	6	->
water	24:16	0:0	6	eac3
stmts	25:12	25:50	5	
call	25:12	25:49	6	put_bits
arg	25:21	25:27	7	&s->pb
op	25:21	0:0	8	&
water	25:22	0:0	8	s
op	25:23	0:0	8	->
water	25:25	0:0	8	pb
arg	25:29	25:30	7	1
water	25:29	0:0	8	1
arg	25:32	25:49	7	block->cpl_in_use
water	25:32	0:0	8	block
op	25:37	0:0	8	->
water	25:39	0:0	8	cpl_in_use
water	25:50	0:0	6	;
if	26:8	47:8	4	(block -> cpl_in_use)
cond	26:12	26:19	5	block -> cpl_in_use
water	26:12	0:0	6	block
op	26:17	0:0	6	->
water	26:19	0:0	6	cpl_in_use
stmts	26:31	47:8	5	
water	26:31	0:0	6	{
decl	27:12	27:34	6	int	start_sub
water	27:25	0:0	6	,
decl	27:12	27:34	6	int	end_sub
if	28:12	29:38	6	(s -> eac3)
cond	28:16	28:19	7	s -> eac3
water	28:16	0:0	8	s
op	28:17	0:0	8	->
water	28:19	0:0	8	eac3
stmts	29:16	29:38	7	
call	29:16	29:37	8	put_bits
arg	29:25	29:31	9	&s->pb
op	29:25	0:0	10	&
water	29:26	0:0	10	s
op	29:27	0:0	10	->
water	29:29	0:0	10	pb
arg	29:33	29:34	9	1
water	29:33	0:0	10	1
arg	29:36	29:37	9	0
water	29:36	0:0	10	0
water	29:38	0:0	8	;
if	30:12	33:12	6	(! s -> eac3 || s -> channel_mode != AC3_CHMODE_STEREO)
cond	30:16	30:47	7	! s -> eac3 || s -> channel_mode != AC3_CHMODE_STEREO
op	30:16	0:0	8	!
water	30:17	0:0	8	s
op	30:18	0:0	8	->
water	30:20	0:0	8	eac3
op	30:25	0:0	8	||
water	30:28	0:0	8	s
op	30:29	0:0	8	->
water	30:31	0:0	8	channel_mode
op	30:44	0:0	8	!=
water	30:47	0:0	8	AC3_CHMODE_STEREO
stmts	30:66	33:12	7	
water	30:66	0:0	8	{
for	31:16	32:66	8	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	31:21	31:27	9	ch = 1 ;
water	31:21	0:0	10	ch
op	31:24	0:0	10	=
water	31:26	0:0	10	1
water	31:27	0:0	10	;
cond	31:29	31:38	9	ch <= s -> fbw_channels
water	31:29	0:0	10	ch
op	31:32	0:0	10	<=
water	31:35	0:0	10	s
op	31:36	0:0	10	->
water	31:38	0:0	10	fbw_channels
forexpr	31:52	31:54	9	ch ++
water	31:52	0:0	10	ch
op	31:54	0:0	10	++
stmts	32:20	32:66	9	
call	32:20	32:65	10	put_bits
arg	32:29	32:35	11	&s->pb
op	32:29	0:0	12	&
water	32:30	0:0	12	s
op	32:31	0:0	12	->
water	32:33	0:0	12	pb
arg	32:37	32:38	11	1
water	32:37	0:0	12	1
arg	32:40	32:65	11	block->channel_in_cpl[ch]
water	32:40	0:0	12	block
op	32:45	0:0	12	->
water	32:47	0:0	12	channel_in_cpl
op	32:61	0:0	12	[
water	32:62	0:0	12	ch
op	32:64	0:0	12	]
water	32:66	0:0	10	;
water	33:12	0:0	8	}
if	34:12	35:38	6	(s -> channel_mode == AC3_CHMODE_STEREO)
cond	34:16	34:35	7	s -> channel_mode == AC3_CHMODE_STEREO
water	34:16	0:0	8	s
op	34:17	0:0	8	->
water	34:19	0:0	8	channel_mode
op	34:32	0:0	8	==
water	34:35	0:0	8	AC3_CHMODE_STEREO
stmts	35:16	35:38	7	
call	35:16	35:37	8	put_bits
arg	35:25	35:31	9	&s->pb
op	35:25	0:0	10	&
water	35:26	0:0	10	s
op	35:27	0:0	10	->
water	35:29	0:0	10	pb
arg	35:33	35:34	9	1
water	35:33	0:0	10	1
arg	35:36	35:37	9	0
water	35:36	0:0	10	0
water	35:38	0:0	8	;
water	36:12	0:0	6	start_sub
op	36:22	0:0	6	=
water	36:24	0:0	6	(
water	36:25	0:0	6	s
op	36:26	0:0	6	->
water	36:28	0:0	6	start_freq
op	36:38	0:0	6	[
water	36:39	0:0	6	CPL_CH
op	36:45	0:0	6	]
op	36:47	0:0	6	-
water	36:49	0:0	6	37
water	36:51	0:0	6	)
op	36:53	0:0	6	/
water	36:55	0:0	6	12
water	36:57	0:0	6	;
water	37:12	0:0	6	end_sub
op	37:22	0:0	6	=
water	37:24	0:0	6	(
water	37:25	0:0	6	s
op	37:26	0:0	6	->
water	37:28	0:0	6	cpl_end_freq
op	37:47	0:0	6	-
water	37:49	0:0	6	37
water	37:51	0:0	6	)
op	37:53	0:0	6	/
water	37:55	0:0	6	12
water	37:57	0:0	6	;
call	38:12	38:41	6	put_bits
arg	38:21	38:27	7	&s->pb
op	38:21	0:0	8	&
water	38:22	0:0	8	s
op	38:23	0:0	8	->
water	38:25	0:0	8	pb
arg	38:29	38:30	7	4
water	38:29	0:0	8	4
arg	38:32	38:41	7	start_sub
water	38:32	0:0	8	start_sub
water	38:42	0:0	6	;
call	39:12	39:43	6	put_bits
arg	39:21	39:27	7	&s->pb
op	39:21	0:0	8	&
water	39:22	0:0	8	s
op	39:23	0:0	8	->
water	39:25	0:0	8	pb
arg	39:29	39:30	7	4
water	39:29	0:0	8	4
arg	39:32	39:43	7	end_sub-3
water	39:32	0:0	8	end_sub
op	39:40	0:0	8	-
water	39:42	0:0	8	3
water	39:44	0:0	6	;
if	41:12	43:12	6	(s -> eac3)
cond	41:16	41:19	7	s -> eac3
water	41:16	0:0	8	s
op	41:17	0:0	8	->
water	41:19	0:0	8	eac3
stmts	41:25	43:12	7	
water	41:25	0:0	8	{
call	42:16	42:37	8	put_bits
arg	42:25	42:31	9	&s->pb
op	42:25	0:0	10	&
water	42:26	0:0	10	s
op	42:27	0:0	10	->
water	42:29	0:0	10	pb
arg	42:33	42:34	9	1
water	42:33	0:0	10	1
arg	42:36	42:37	9	0
water	42:36	0:0	10	0
water	42:38	0:0	8	;
water	43:12	0:0	8	}
else	43:14	46:12	6
stmts	43:19	46:12	7	
water	43:19	0:0	8	{
for	44:16	45:77	8	(bnd = start_sub + 1 ;bnd < end_sub;bnd ++)
forinit	44:21	44:38	9	bnd = start_sub + 1 ;
water	44:21	0:0	10	bnd
op	44:25	0:0	10	=
water	44:27	0:0	10	start_sub
op	44:36	0:0	10	+
water	44:37	0:0	10	1
water	44:38	0:0	10	;
cond	44:40	44:46	9	bnd < end_sub
water	44:40	0:0	10	bnd
op	44:44	0:0	10	<
water	44:46	0:0	10	end_sub
forexpr	44:55	44:58	9	bnd ++
water	44:55	0:0	10	bnd
op	44:58	0:0	10	++
stmts	45:20	45:77	9	
call	45:20	45:76	10	put_bits
arg	45:29	45:35	11	&s->pb
op	45:29	0:0	12	&
water	45:30	0:0	12	s
op	45:31	0:0	12	->
water	45:33	0:0	12	pb
arg	45:37	45:38	11	1
water	45:37	0:0	12	1
arg	45:40	45:76	11	ff_eac3_default_cpl_band_struct[bnd]
water	45:40	0:0	12	ff_eac3_default_cpl_band_struct
op	45:71	0:0	12	[
water	45:72	0:0	12	bnd
op	45:75	0:0	12	]
water	45:77	0:0	10	;
water	46:12	0:0	8	}
water	47:8	0:0	6	}
water	48:4	0:0	4	}
if	50:4	64:4	2	(block -> cpl_in_use)
cond	50:8	50:15	3	block -> cpl_in_use
water	50:8	0:0	4	block
op	50:13	0:0	4	->
water	50:15	0:0	4	cpl_in_use
stmts	50:27	64:4	3	
water	50:27	0:0	4	{
for	51:8	63:8	4	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	51:13	51:19	5	ch = 1 ;
water	51:13	0:0	6	ch
op	51:16	0:0	6	=
water	51:18	0:0	6	1
water	51:19	0:0	6	;
cond	51:21	51:30	5	ch <= s -> fbw_channels
water	51:21	0:0	6	ch
op	51:24	0:0	6	<=
water	51:27	0:0	6	s
op	51:28	0:0	6	->
water	51:30	0:0	6	fbw_channels
forexpr	51:44	51:46	5	ch ++
water	51:44	0:0	6	ch
op	51:46	0:0	6	++
stmts	51:50	63:8	5	
water	51:50	0:0	6	{
if	52:12	62:12	6	(block -> channel_in_cpl [ ch ])
cond	52:16	52:40	7	block -> channel_in_cpl [ ch ]
water	52:16	0:0	8	block
op	52:21	0:0	8	->
water	52:23	0:0	8	channel_in_cpl
op	52:37	0:0	8	[
water	52:38	0:0	8	ch
op	52:40	0:0	8	]
stmts	52:43	62:12	7	
water	52:43	0:0	8	{
if	53:16	54:66	8	(! s -> eac3 || block -> new_cpl_coords [ ch ] != 2)
cond	53:20	53:61	9	! s -> eac3 || block -> new_cpl_coords [ ch ] != 2
op	53:20	0:0	10	!
water	53:21	0:0	10	s
op	53:22	0:0	10	->
water	53:24	0:0	10	eac3
op	53:29	0:0	10	||
water	53:32	0:0	10	block
op	53:37	0:0	10	->
water	53:39	0:0	10	new_cpl_coords
op	53:53	0:0	10	[
water	53:54	0:0	10	ch
op	53:56	0:0	10	]
op	53:58	0:0	10	!=
water	53:61	0:0	10	2
stmts	54:20	54:66	9	
call	54:20	54:65	10	put_bits
arg	54:29	54:35	11	&s->pb
op	54:29	0:0	12	&
water	54:30	0:0	12	s
op	54:31	0:0	12	->
water	54:33	0:0	12	pb
arg	54:37	54:38	11	1
water	54:37	0:0	12	1
arg	54:40	54:65	11	block->new_cpl_coords[ch]
water	54:40	0:0	12	block
op	54:45	0:0	12	->
water	54:47	0:0	12	new_cpl_coords
op	54:61	0:0	12	[
water	54:62	0:0	12	ch
op	54:64	0:0	12	]
water	54:66	0:0	10	;
if	55:16	61:16	8	(block -> new_cpl_coords [ ch ])
cond	55:20	55:44	9	block -> new_cpl_coords [ ch ]
water	55:20	0:0	10	block
op	55:25	0:0	10	->
water	55:27	0:0	10	new_cpl_coords
op	55:41	0:0	10	[
water	55:42	0:0	10	ch
op	55:44	0:0	10	]
stmts	55:47	61:16	9	
water	55:47	0:0	10	{
call	56:20	56:65	10	put_bits
arg	56:29	56:35	11	&s->pb
op	56:29	0:0	12	&
water	56:30	0:0	12	s
op	56:31	0:0	12	->
water	56:33	0:0	12	pb
arg	56:37	56:38	11	2
water	56:37	0:0	12	2
arg	56:40	56:65	11	block->cpl_master_exp[ch]
water	56:40	0:0	12	block
op	56:45	0:0	12	->
water	56:47	0:0	12	cpl_master_exp
op	56:61	0:0	12	[
water	56:62	0:0	12	ch
op	56:64	0:0	12	]
water	56:66	0:0	10	;
for	57:20	60:20	10	(bnd = 0 ;bnd < s -> num_cpl_bands;bnd ++)
forinit	57:25	57:32	11	bnd = 0 ;
water	57:25	0:0	12	bnd
op	57:29	0:0	12	=
water	57:31	0:0	12	0
water	57:32	0:0	12	;
cond	57:34	57:43	11	bnd < s -> num_cpl_bands
water	57:34	0:0	12	bnd
op	57:38	0:0	12	<
water	57:40	0:0	12	s
op	57:41	0:0	12	->
water	57:43	0:0	12	num_cpl_bands
forexpr	57:58	57:61	11	bnd ++
water	57:58	0:0	12	bnd
op	57:61	0:0	12	++
stmts	57:65	60:20	11	
water	57:65	0:0	12	{
call	58:24	58:74	12	put_bits
arg	58:33	58:39	13	&s->pb
op	58:33	0:0	14	&
water	58:34	0:0	14	s
op	58:35	0:0	14	->
water	58:37	0:0	14	pb
arg	58:41	58:42	13	4
water	58:41	0:0	14	4
arg	58:44	58:74	13	block->cpl_coord_exp[ch][bnd]
water	58:44	0:0	14	block
op	58:49	0:0	14	->
water	58:51	0:0	14	cpl_coord_exp
op	58:65	0:0	14	[
water	58:66	0:0	14	ch
op	58:68	0:0	14	]
op	58:69	0:0	14	[
water	58:70	0:0	14	bnd
op	58:73	0:0	14	]
water	58:75	0:0	12	;
call	59:24	59:74	12	put_bits
arg	59:33	59:39	13	&s->pb
op	59:33	0:0	14	&
water	59:34	0:0	14	s
op	59:35	0:0	14	->
water	59:37	0:0	14	pb
arg	59:41	59:42	13	4
water	59:41	0:0	14	4
arg	59:44	59:74	13	block->cpl_coord_mant[ch][bnd]
water	59:44	0:0	14	block
op	59:49	0:0	14	->
water	59:51	0:0	14	cpl_coord_mant
op	59:65	0:0	14	[
water	59:66	0:0	14	ch
op	59:68	0:0	14	]
op	59:69	0:0	14	[
water	59:70	0:0	14	bnd
op	59:73	0:0	14	]
water	59:75	0:0	12	;
water	60:20	0:0	12	}
water	61:16	0:0	10	}
water	62:12	0:0	8	}
water	63:8	0:0	6	}
water	64:4	0:0	4	}
if	66:4	74:4	2	(s -> channel_mode == AC3_CHMODE_STEREO)
cond	66:8	66:27	3	s -> channel_mode == AC3_CHMODE_STEREO
water	66:8	0:0	4	s
op	66:9	0:0	4	->
water	66:11	0:0	4	channel_mode
op	66:24	0:0	4	==
water	66:27	0:0	4	AC3_CHMODE_STEREO
stmts	66:46	74:4	3	
water	66:46	0:0	4	{
if	67:8	68:64	4	(! s -> eac3 || blk > 0)
cond	67:12	67:30	5	! s -> eac3 || blk > 0
op	67:12	0:0	6	!
water	67:13	0:0	6	s
op	67:14	0:0	6	->
water	67:16	0:0	6	eac3
op	67:21	0:0	6	||
water	67:24	0:0	6	blk
op	67:28	0:0	6	>
water	67:30	0:0	6	0
stmts	68:12	68:64	5	
call	68:12	68:63	6	put_bits
arg	68:21	68:27	7	&s->pb
op	68:21	0:0	8	&
water	68:22	0:0	8	s
op	68:23	0:0	8	->
water	68:25	0:0	8	pb
arg	68:29	68:30	7	1
water	68:29	0:0	8	1
arg	68:32	68:63	7	block->new_rematrixing_strategy
water	68:32	0:0	8	block
op	68:37	0:0	8	->
water	68:39	0:0	8	new_rematrixing_strategy
water	68:64	0:0	6	;
if	69:8	73:8	4	(block -> new_rematrixing_strategy)
cond	69:12	69:19	5	block -> new_rematrixing_strategy
water	69:12	0:0	6	block
op	69:17	0:0	6	->
water	69:19	0:0	6	new_rematrixing_strategy
stmts	69:45	73:8	5	
water	69:45	0:0	6	{
for	71:12	72:66	6	(bnd = 0 ;bnd < block -> num_rematrixing_bands;bnd ++)
forinit	71:17	71:24	7	bnd = 0 ;
water	71:17	0:0	8	bnd
op	71:21	0:0	8	=
water	71:23	0:0	8	0
water	71:24	0:0	8	;
cond	71:26	71:39	7	bnd < block -> num_rematrixing_bands
water	71:26	0:0	8	bnd
op	71:30	0:0	8	<
water	71:32	0:0	8	block
op	71:37	0:0	8	->
water	71:39	0:0	8	num_rematrixing_bands
forexpr	71:62	71:65	7	bnd ++
water	71:62	0:0	8	bnd
op	71:65	0:0	8	++
stmts	72:16	72:66	7	
call	72:16	72:65	8	put_bits
arg	72:25	72:31	9	&s->pb
op	72:25	0:0	10	&
water	72:26	0:0	10	s
op	72:27	0:0	10	->
water	72:29	0:0	10	pb
arg	72:33	72:34	9	1
water	72:33	0:0	10	1
arg	72:36	72:65	9	block->rematrixing_flags[bnd]
water	72:36	0:0	10	block
op	72:41	0:0	10	->
water	72:43	0:0	10	rematrixing_flags
op	72:60	0:0	10	[
water	72:61	0:0	10	bnd
op	72:64	0:0	10	]
water	72:66	0:0	8	;
water	73:8	0:0	6	}
water	74:4	0:0	4	}
if	76:4	81:4	2	(! s -> eac3)
cond	76:8	76:12	3	! s -> eac3
op	76:8	0:0	4	!
water	76:9	0:0	4	s
op	76:10	0:0	4	->
water	76:12	0:0	4	eac3
stmts	76:18	81:4	3	
water	76:18	0:0	4	{
for	77:8	78:57	4	(ch = ! block -> cpl_in_use ;ch <= s -> fbw_channels;ch ++)
forinit	77:13	77:36	5	ch = ! block -> cpl_in_use ;
water	77:13	0:0	6	ch
op	77:16	0:0	6	=
op	77:18	0:0	6	!
water	77:19	0:0	6	block
op	77:24	0:0	6	->
water	77:26	0:0	6	cpl_in_use
water	77:36	0:0	6	;
cond	77:38	77:47	5	ch <= s -> fbw_channels
water	77:38	0:0	6	ch
op	77:41	0:0	6	<=
water	77:44	0:0	6	s
op	77:45	0:0	6	->
water	77:47	0:0	6	fbw_channels
forexpr	77:61	77:63	5	ch ++
water	77:61	0:0	6	ch
op	77:63	0:0	6	++
stmts	78:12	78:57	5	
call	78:12	78:56	6	put_bits
arg	78:21	78:27	7	&s->pb
op	78:21	0:0	8	&
water	78:22	0:0	8	s
op	78:23	0:0	8	->
water	78:25	0:0	8	pb
arg	78:29	78:30	7	2
water	78:29	0:0	8	2
arg	78:32	78:56	7	s->exp_strategy[ch][blk]
water	78:32	0:0	8	s
op	78:33	0:0	8	->
water	78:35	0:0	8	exp_strategy
op	78:47	0:0	8	[
water	78:48	0:0	8	ch
op	78:50	0:0	8	]
op	78:51	0:0	8	[
water	78:52	0:0	8	blk
op	78:55	0:0	8	]
water	78:57	0:0	6	;
if	79:8	80:69	4	(s -> lfe_on)
cond	79:12	79:15	5	s -> lfe_on
water	79:12	0:0	6	s
op	79:13	0:0	6	->
water	79:15	0:0	6	lfe_on
stmts	80:12	80:69	5	
call	80:12	80:68	6	put_bits
arg	80:21	80:27	7	&s->pb
op	80:21	0:0	8	&
water	80:22	0:0	8	s
op	80:23	0:0	8	->
water	80:25	0:0	8	pb
arg	80:29	80:30	7	1
water	80:29	0:0	8	1
arg	80:32	80:68	7	s->exp_strategy[s->lfe_channel][blk]
water	80:32	0:0	8	s
op	80:33	0:0	8	->
water	80:35	0:0	8	exp_strategy
op	80:47	0:0	8	[
water	80:48	0:0	8	s
op	80:49	0:0	8	->
water	80:51	0:0	8	lfe_channel
op	80:62	0:0	8	]
op	80:63	0:0	8	[
water	80:64	0:0	8	blk
op	80:67	0:0	8	]
water	80:69	0:0	6	;
water	81:4	0:0	4	}
for	83:4	86:4	2	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	83:9	83:15	3	ch = 1 ;
water	83:9	0:0	4	ch
op	83:12	0:0	4	=
water	83:14	0:0	4	1
water	83:15	0:0	4	;
cond	83:17	83:26	3	ch <= s -> fbw_channels
water	83:17	0:0	4	ch
op	83:20	0:0	4	<=
water	83:23	0:0	4	s
op	83:24	0:0	4	->
water	83:26	0:0	4	fbw_channels
forexpr	83:40	83:42	3	ch ++
water	83:40	0:0	4	ch
op	83:42	0:0	4	++
stmts	83:46	86:4	3	
water	83:46	0:0	4	{
if	84:8	85:50	4	(s -> exp_strategy [ ch ] [ blk ] != EXP_REUSE && ! block -> channel_in_cpl [ ch ])
cond	84:12	84:78	5	s -> exp_strategy [ ch ] [ blk ] != EXP_REUSE && ! block -> channel_in_cpl [ ch ]
water	84:12	0:0	6	s
op	84:13	0:0	6	->
water	84:15	0:0	6	exp_strategy
op	84:27	0:0	6	[
water	84:28	0:0	6	ch
op	84:30	0:0	6	]
op	84:31	0:0	6	[
water	84:32	0:0	6	blk
op	84:35	0:0	6	]
op	84:37	0:0	6	!=
water	84:40	0:0	6	EXP_REUSE
op	84:50	0:0	6	&&
op	84:53	0:0	6	!
water	84:54	0:0	6	block
op	84:59	0:0	6	->
water	84:61	0:0	6	channel_in_cpl
op	84:75	0:0	6	[
water	84:76	0:0	6	ch
op	84:78	0:0	6	]
stmts	85:12	85:50	5	
call	85:12	85:49	6	put_bits
arg	85:21	85:27	7	&s->pb
op	85:21	0:0	8	&
water	85:22	0:0	8	s
op	85:23	0:0	8	->
water	85:25	0:0	8	pb
arg	85:29	85:30	7	6
water	85:29	0:0	8	6
arg	85:32	85:49	7	s->bandwidth_code
water	85:32	0:0	8	s
op	85:33	0:0	8	->
water	85:35	0:0	8	bandwidth_code
water	85:50	0:0	6	;
water	86:4	0:0	4	}
for	88:4	102:4	2	(ch = ! block -> cpl_in_use ;ch <= s -> channels;ch ++)
forinit	88:9	88:32	3	ch = ! block -> cpl_in_use ;
water	88:9	0:0	4	ch
op	88:12	0:0	4	=
op	88:14	0:0	4	!
water	88:15	0:0	4	block
op	88:20	0:0	4	->
water	88:22	0:0	4	cpl_in_use
water	88:32	0:0	4	;
cond	88:34	88:43	3	ch <= s -> channels
water	88:34	0:0	4	ch
op	88:37	0:0	4	<=
water	88:40	0:0	4	s
op	88:41	0:0	4	->
water	88:43	0:0	4	channels
forexpr	88:53	88:55	3	ch ++
water	88:53	0:0	4	ch
op	88:55	0:0	4	++
stmts	88:59	102:4	3	
water	88:59	0:0	4	{
decl	89:8	89:21	4	int	nb_groups
decl	90:8	90:32	4	int	cpl
op	90:16	0:0	4	=
water	90:18	0:0	4	(
water	90:19	0:0	4	ch
op	90:22	0:0	4	==
water	90:25	0:0	4	CPL_CH
water	90:31	0:0	4	)
if	91:8	92:20	4	(s -> exp_strategy [ ch ] [ blk ] == EXP_REUSE)
cond	91:12	91:40	5	s -> exp_strategy [ ch ] [ blk ] == EXP_REUSE
water	91:12	0:0	6	s
op	91:13	0:0	6	->
water	91:15	0:0	6	exp_strategy
op	91:27	0:0	6	[
water	91:28	0:0	6	ch
op	91:30	0:0	6	]
op	91:31	0:0	6	[
water	91:32	0:0	6	blk
op	91:35	0:0	6	]
op	91:37	0:0	6	==
water	91:40	0:0	6	EXP_REUSE
stmts	92:12	92:20	5	
continue	92:12	92:20	6	
call	94:8	94:60	4	put_bits
arg	94:17	94:23	5	&s->pb
op	94:17	0:0	6	&
water	94:18	0:0	6	s
op	94:19	0:0	6	->
water	94:21	0:0	6	pb
arg	94:25	94:26	5	4
water	94:25	0:0	6	4
arg	94:28	94:60	5	block->grouped_exp[ch][0]>>cpl
water	94:28	0:0	6	block
op	94:33	0:0	6	->
water	94:35	0:0	6	grouped_exp
op	94:46	0:0	6	[
water	94:47	0:0	6	ch
op	94:49	0:0	6	]
op	94:50	0:0	6	[
water	94:51	0:0	6	0
op	94:52	0:0	6	]
op	94:54	0:0	6	>>
water	94:57	0:0	6	cpl
water	94:61	0:0	4	;
water	96:8	0:0	4	nb_groups
op	96:18	0:0	4	=
water	96:20	0:0	4	exponent_group_tab
op	96:38	0:0	4	[
water	96:39	0:0	4	cpl
op	96:42	0:0	4	]
op	96:43	0:0	4	[
water	96:44	0:0	4	s
op	96:45	0:0	4	->
water	96:47	0:0	4	exp_strategy
op	96:59	0:0	4	[
water	96:60	0:0	4	ch
op	96:62	0:0	4	]
op	96:63	0:0	4	[
water	96:64	0:0	4	blk
op	96:67	0:0	4	]
op	96:68	0:0	4	-
water	96:69	0:0	4	1
op	96:70	0:0	4	]
op	96:71	0:0	4	[
water	96:72	0:0	4	block
op	96:77	0:0	4	->
water	96:79	0:0	4	end_freq
op	96:87	0:0	4	[
water	96:88	0:0	4	ch
op	96:90	0:0	4	]
op	96:91	0:0	4	-
water	96:92	0:0	4	s
op	96:93	0:0	4	->
water	96:95	0:0	4	start_freq
op	96:105	0:0	4	[
water	96:106	0:0	4	ch
op	96:108	0:0	4	]
op	96:109	0:0	4	]
water	96:110	0:0	4	;
for	97:8	98:58	4	(i = 1 ;i <= nb_groups;i ++)
forinit	97:13	97:18	5	i = 1 ;
water	97:13	0:0	6	i
op	97:15	0:0	6	=
water	97:17	0:0	6	1
water	97:18	0:0	6	;
cond	97:20	97:25	5	i <= nb_groups
water	97:20	0:0	6	i
op	97:22	0:0	6	<=
water	97:25	0:0	6	nb_groups
forexpr	97:36	97:37	5	i ++
water	97:36	0:0	6	i
op	97:37	0:0	6	++
stmts	98:12	98:58	5	
call	98:12	98:57	6	put_bits
arg	98:21	98:27	7	&s->pb
op	98:21	0:0	8	&
water	98:22	0:0	8	s
op	98:23	0:0	8	->
water	98:25	0:0	8	pb
arg	98:29	98:30	7	7
water	98:29	0:0	8	7
arg	98:32	98:57	7	block->grouped_exp[ch][i]
water	98:32	0:0	8	block
op	98:37	0:0	8	->
water	98:39	0:0	8	grouped_exp
op	98:50	0:0	8	[
water	98:51	0:0	8	ch
op	98:53	0:0	8	]
op	98:54	0:0	8	[
water	98:55	0:0	8	i
op	98:56	0:0	8	]
water	98:58	0:0	6	;
if	100:8	101:34	4	(ch != s -> lfe_channel && ! cpl)
cond	100:12	100:37	5	ch != s -> lfe_channel && ! cpl
water	100:12	0:0	6	ch
op	100:15	0:0	6	!=
water	100:18	0:0	6	s
op	100:19	0:0	6	->
water	100:21	0:0	6	lfe_channel
op	100:33	0:0	6	&&
op	100:36	0:0	6	!
water	100:37	0:0	6	cpl
stmts	101:12	101:34	5	
call	101:12	101:33	6	put_bits
arg	101:21	101:27	7	&s->pb
op	101:21	0:0	8	&
water	101:22	0:0	8	s
op	101:23	0:0	8	->
water	101:25	0:0	8	pb
arg	101:29	101:30	7	2
water	101:29	0:0	8	2
arg	101:32	101:33	7	0
water	101:32	0:0	8	0
water	101:34	0:0	6	;
water	102:4	0:0	4	}
if	104:4	114:4	2	(! s -> eac3)
cond	104:8	104:12	3	! s -> eac3
op	104:8	0:0	4	!
water	104:9	0:0	4	s
op	104:10	0:0	4	->
water	104:12	0:0	4	eac3
stmts	104:18	114:4	3	
water	104:18	0:0	4	{
water	105:8	0:0	4	baie
op	105:13	0:0	4	=
water	105:15	0:0	4	(
water	105:16	0:0	4	blk
op	105:20	0:0	4	==
water	105:23	0:0	4	0
water	105:24	0:0	4	)
water	105:25	0:0	4	;
call	106:8	106:32	4	put_bits
arg	106:17	106:23	5	&s->pb
op	106:17	0:0	6	&
water	106:18	0:0	6	s
op	106:19	0:0	6	->
water	106:21	0:0	6	pb
arg	106:25	106:26	5	1
water	106:25	0:0	6	1
arg	106:28	106:32	5	baie
water	106:28	0:0	6	baie
water	106:33	0:0	4	;
if	107:8	113:8	4	(baie)
cond	107:12	107:12	5	baie
water	107:12	0:0	6	baie
stmts	107:18	113:8	5	
water	107:18	0:0	6	{
call	108:12	108:50	6	put_bits
arg	108:21	108:27	7	&s->pb
op	108:21	0:0	8	&
water	108:22	0:0	8	s
op	108:23	0:0	8	->
water	108:25	0:0	8	pb
arg	108:29	108:30	7	2
water	108:29	0:0	8	2
arg	108:32	108:50	7	s->slow_decay_code
water	108:32	0:0	8	s
op	108:33	0:0	8	->
water	108:35	0:0	8	slow_decay_code
water	108:51	0:0	6	;
call	109:12	109:50	6	put_bits
arg	109:21	109:27	7	&s->pb
op	109:21	0:0	8	&
water	109:22	0:0	8	s
op	109:23	0:0	8	->
water	109:25	0:0	8	pb
arg	109:29	109:30	7	2
water	109:29	0:0	8	2
arg	109:32	109:50	7	s->fast_decay_code
water	109:32	0:0	8	s
op	109:33	0:0	8	->
water	109:35	0:0	8	fast_decay_code
water	109:51	0:0	6	;
call	110:12	110:49	6	put_bits
arg	110:21	110:27	7	&s->pb
op	110:21	0:0	8	&
water	110:22	0:0	8	s
op	110:23	0:0	8	->
water	110:25	0:0	8	pb
arg	110:29	110:30	7	2
water	110:29	0:0	8	2
arg	110:32	110:49	7	s->slow_gain_code
water	110:32	0:0	8	s
op	110:33	0:0	8	->
water	110:35	0:0	8	slow_gain_code
water	110:50	0:0	6	;
call	111:12	111:50	6	put_bits
arg	111:21	111:27	7	&s->pb
op	111:21	0:0	8	&
water	111:22	0:0	8	s
op	111:23	0:0	8	->
water	111:25	0:0	8	pb
arg	111:29	111:30	7	2
water	111:29	0:0	8	2
arg	111:32	111:50	7	s->db_per_bit_code
water	111:32	0:0	8	s
op	111:33	0:0	8	->
water	111:35	0:0	8	db_per_bit_code
water	111:51	0:0	6	;
call	112:12	112:45	6	put_bits
arg	112:21	112:27	7	&s->pb
op	112:21	0:0	8	&
water	112:22	0:0	8	s
op	112:23	0:0	8	->
water	112:25	0:0	8	pb
arg	112:29	112:30	7	3
water	112:29	0:0	8	3
arg	112:32	112:45	7	s->floor_code
water	112:32	0:0	8	s
op	112:33	0:0	8	->
water	112:35	0:0	8	floor_code
water	112:46	0:0	6	;
water	113:8	0:0	6	}
water	114:4	0:0	4	}
if	116:4	125:4	2	(! s -> eac3)
cond	116:8	116:12	3	! s -> eac3
op	116:8	0:0	4	!
water	116:9	0:0	4	s
op	116:10	0:0	4	->
water	116:12	0:0	4	eac3
stmts	116:18	125:4	3	
water	116:18	0:0	4	{
call	117:8	117:50	4	put_bits
arg	117:17	117:23	5	&s->pb
op	117:17	0:0	6	&
water	117:18	0:0	6	s
op	117:19	0:0	6	->
water	117:21	0:0	6	pb
arg	117:25	117:26	5	1
water	117:25	0:0	6	1
arg	117:28	117:50	5	block->new_snr_offsets
water	117:28	0:0	6	block
op	117:33	0:0	6	->
water	117:35	0:0	6	new_snr_offsets
water	117:51	0:0	4	;
if	118:8	124:8	4	(block -> new_snr_offsets)
cond	118:12	118:19	5	block -> new_snr_offsets
water	118:12	0:0	6	block
op	118:17	0:0	6	->
water	118:19	0:0	6	new_snr_offsets
stmts	118:36	124:8	5	
water	118:36	0:0	6	{
call	119:12	119:52	6	put_bits
arg	119:21	119:27	7	&s->pb
op	119:21	0:0	8	&
water	119:22	0:0	8	s
op	119:23	0:0	8	->
water	119:25	0:0	8	pb
arg	119:29	119:30	7	6
water	119:29	0:0	8	6
arg	119:32	119:52	7	s->coarse_snr_offset
water	119:32	0:0	8	s
op	119:33	0:0	8	->
water	119:35	0:0	8	coarse_snr_offset
water	119:53	0:0	6	;
for	120:12	123:12	6	(ch = ! block -> cpl_in_use ;ch <= s -> channels;ch ++)
forinit	120:17	120:40	7	ch = ! block -> cpl_in_use ;
water	120:17	0:0	8	ch
op	120:20	0:0	8	=
op	120:22	0:0	8	!
water	120:23	0:0	8	block
op	120:28	0:0	8	->
water	120:30	0:0	8	cpl_in_use
water	120:40	0:0	8	;
cond	120:42	120:51	7	ch <= s -> channels
water	120:42	0:0	8	ch
op	120:45	0:0	8	<=
water	120:48	0:0	8	s
op	120:49	0:0	8	->
water	120:51	0:0	8	channels
forexpr	120:61	120:63	7	ch ++
water	120:61	0:0	8	ch
op	120:63	0:0	8	++
stmts	120:67	123:12	7	
water	120:67	0:0	8	{
call	121:16	121:58	8	put_bits
arg	121:25	121:31	9	&s->pb
op	121:25	0:0	10	&
water	121:26	0:0	10	s
op	121:27	0:0	10	->
water	121:29	0:0	10	pb
arg	121:33	121:34	9	4
water	121:33	0:0	10	4
arg	121:36	121:58	9	s->fine_snr_offset[ch]
water	121:36	0:0	10	s
op	121:37	0:0	10	->
water	121:39	0:0	10	fine_snr_offset
op	121:54	0:0	10	[
water	121:55	0:0	10	ch
op	121:57	0:0	10	]
water	121:59	0:0	8	;
call	122:16	122:57	8	put_bits
arg	122:25	122:31	9	&s->pb
op	122:25	0:0	10	&
water	122:26	0:0	10	s
op	122:27	0:0	10	->
water	122:29	0:0	10	pb
arg	122:33	122:34	9	3
water	122:33	0:0	10	3
arg	122:36	122:57	9	s->fast_gain_code[ch]
water	122:36	0:0	10	s
op	122:37	0:0	10	->
water	122:39	0:0	10	fast_gain_code
op	122:53	0:0	10	[
water	122:54	0:0	10	ch
op	122:56	0:0	10	]
water	122:58	0:0	8	;
water	123:12	0:0	8	}
water	124:8	0:0	6	}
water	125:4	0:0	4	}
else	125:6	127:4	2
stmts	125:11	127:4	3	
water	125:11	0:0	4	{
call	126:8	126:29	4	put_bits
arg	126:17	126:23	5	&s->pb
op	126:17	0:0	6	&
water	126:18	0:0	6	s
op	126:19	0:0	6	->
water	126:21	0:0	6	pb
arg	126:25	126:26	5	1
water	126:25	0:0	6	1
arg	126:28	126:29	5	0
water	126:28	0:0	6	0
water	126:30	0:0	4	;
water	127:4	0:0	4	}
if	129:4	136:4	2	(block -> cpl_in_use)
cond	129:8	129:15	3	block -> cpl_in_use
water	129:8	0:0	4	block
op	129:13	0:0	4	->
water	129:15	0:0	4	cpl_in_use
stmts	129:27	136:4	3	
water	129:27	0:0	4	{
if	130:8	131:52	4	(! s -> eac3 || block -> new_cpl_leak != 2)
cond	130:12	130:47	5	! s -> eac3 || block -> new_cpl_leak != 2
op	130:12	0:0	6	!
water	130:13	0:0	6	s
op	130:14	0:0	6	->
water	130:16	0:0	6	eac3
op	130:21	0:0	6	||
water	130:24	0:0	6	block
op	130:29	0:0	6	->
water	130:31	0:0	6	new_cpl_leak
op	130:44	0:0	6	!=
water	130:47	0:0	6	2
stmts	131:12	131:52	5	
call	131:12	131:51	6	put_bits
arg	131:21	131:27	7	&s->pb
op	131:21	0:0	8	&
water	131:22	0:0	8	s
op	131:23	0:0	8	->
water	131:25	0:0	8	pb
arg	131:29	131:30	7	1
water	131:29	0:0	8	1
arg	131:32	131:51	7	block->new_cpl_leak
water	131:32	0:0	8	block
op	131:37	0:0	8	->
water	131:39	0:0	8	new_cpl_leak
water	131:52	0:0	6	;
if	132:8	135:8	4	(block -> new_cpl_leak)
cond	132:12	132:19	5	block -> new_cpl_leak
water	132:12	0:0	6	block
op	132:17	0:0	6	->
water	132:19	0:0	6	new_cpl_leak
stmts	132:33	135:8	5	
water	132:33	0:0	6	{
call	133:12	133:58	6	put_bits
arg	133:21	133:27	7	&s->pb
op	133:21	0:0	8	&
water	133:22	0:0	8	s
op	133:23	0:0	8	->
water	133:25	0:0	8	pb
arg	133:29	133:30	7	3
water	133:29	0:0	8	3
arg	133:32	133:58	7	s->bit_alloc.cpl_fast_leak
water	133:32	0:0	8	s
op	133:33	0:0	8	->
water	133:35	0:0	8	bit_alloc
op	133:44	0:0	8	.
water	133:45	0:0	8	cpl_fast_leak
water	133:59	0:0	6	;
call	134:12	134:58	6	put_bits
arg	134:21	134:27	7	&s->pb
op	134:21	0:0	8	&
water	134:22	0:0	8	s
op	134:23	0:0	8	->
water	134:25	0:0	8	pb
arg	134:29	134:30	7	3
water	134:29	0:0	8	3
arg	134:32	134:58	7	s->bit_alloc.cpl_slow_leak
water	134:32	0:0	8	s
op	134:33	0:0	8	->
water	134:35	0:0	8	bit_alloc
op	134:44	0:0	8	.
water	134:45	0:0	8	cpl_slow_leak
water	134:59	0:0	6	;
water	135:8	0:0	6	}
water	136:4	0:0	4	}
if	137:4	140:4	2	(! s -> eac3)
cond	137:8	137:12	3	! s -> eac3
op	137:8	0:0	4	!
water	137:9	0:0	4	s
op	137:10	0:0	4	->
water	137:12	0:0	4	eac3
stmts	137:18	140:4	3	
water	137:18	0:0	4	{
call	138:8	138:29	4	put_bits
arg	138:17	138:23	5	&s->pb
op	138:17	0:0	6	&
water	138:18	0:0	6	s
op	138:19	0:0	6	->
water	138:21	0:0	6	pb
arg	138:25	138:26	5	1
water	138:25	0:0	6	1
arg	138:28	138:29	5	0
water	138:28	0:0	6	0
water	138:30	0:0	4	;
call	139:8	139:29	4	put_bits
arg	139:17	139:23	5	&s->pb
op	139:17	0:0	6	&
water	139:18	0:0	6	s
op	139:19	0:0	6	->
water	139:21	0:0	6	pb
arg	139:25	139:26	5	1
water	139:25	0:0	6	1
arg	139:28	139:29	5	0
water	139:28	0:0	6	0
water	139:30	0:0	4	;
water	140:4	0:0	4	}
water	142:4	0:0	2	got_cpl
op	142:12	0:0	2	=
op	142:14	0:0	2	!
water	142:15	0:0	2	block
op	142:20	0:0	2	->
water	142:22	0:0	2	cpl_in_use
water	142:32	0:0	2	;
for	143:4	166:4	2	(ch = 1 ;ch <= s -> channels;ch ++)
forinit	143:9	143:15	3	ch = 1 ;
water	143:9	0:0	4	ch
op	143:12	0:0	4	=
water	143:14	0:0	4	1
water	143:15	0:0	4	;
cond	143:17	143:26	3	ch <= s -> channels
water	143:17	0:0	4	ch
op	143:20	0:0	4	<=
water	143:23	0:0	4	s
op	143:24	0:0	4	->
water	143:26	0:0	4	channels
forexpr	143:36	143:38	3	ch ++
water	143:36	0:0	4	ch
op	143:38	0:0	4	++
stmts	143:42	166:4	3	
water	143:42	0:0	4	{
decl	144:8	144:16	4	int	b
water	144:13	0:0	4	,
decl	144:8	144:16	4	int	q
if	145:8	149:8	4	(! got_cpl && ch > 1 && block -> channel_in_cpl [ ch - 1 ])
cond	145:12	145:60	5	! got_cpl && ch > 1 && block -> channel_in_cpl [ ch - 1 ]
op	145:12	0:0	6	!
water	145:13	0:0	6	got_cpl
op	145:21	0:0	6	&&
water	145:24	0:0	6	ch
op	145:27	0:0	6	>
water	145:29	0:0	6	1
op	145:31	0:0	6	&&
water	145:34	0:0	6	block
op	145:39	0:0	6	->
water	145:41	0:0	6	channel_in_cpl
op	145:55	0:0	6	[
water	145:56	0:0	6	ch
op	145:58	0:0	6	-
water	145:59	0:0	6	1
op	145:60	0:0	6	]
stmts	145:63	149:8	5	
water	145:63	0:0	6	{
water	146:12	0:0	6	ch0
op	146:20	0:0	6	=
water	146:22	0:0	6	ch
op	146:25	0:0	6	-
water	146:27	0:0	6	1
water	146:28	0:0	6	;
water	147:12	0:0	6	ch
op	147:20	0:0	6	=
water	147:22	0:0	6	CPL_CH
water	147:28	0:0	6	;
water	148:12	0:0	6	got_cpl
op	148:20	0:0	6	=
water	148:22	0:0	6	1
water	148:23	0:0	6	;
water	149:8	0:0	6	}
for	150:8	163:8	4	(i = s -> start_freq [ ch ] ;i < block -> end_freq [ ch ];i ++)
forinit	150:13	150:34	5	i = s -> start_freq [ ch ] ;
water	150:13	0:0	6	i
op	150:15	0:0	6	=
water	150:17	0:0	6	s
op	150:18	0:0	6	->
water	150:20	0:0	6	start_freq
op	150:30	0:0	6	[
water	150:31	0:0	6	ch
op	150:33	0:0	6	]
water	150:34	0:0	6	;
cond	150:36	150:58	5	i < block -> end_freq [ ch ]
water	150:36	0:0	6	i
op	150:38	0:0	6	<
water	150:40	0:0	6	block
op	150:45	0:0	6	->
water	150:47	0:0	6	end_freq
op	150:55	0:0	6	[
water	150:56	0:0	6	ch
op	150:58	0:0	6	]
forexpr	150:61	150:62	5	i ++
water	150:61	0:0	6	i
op	150:62	0:0	6	++
stmts	150:66	163:8	5	
water	150:66	0:0	6	{
water	151:12	0:0	6	q
op	151:14	0:0	6	=
water	151:16	0:0	6	block
op	151:21	0:0	6	->
water	151:23	0:0	6	qmant
op	151:28	0:0	6	[
water	151:29	0:0	6	ch
op	151:31	0:0	6	]
op	151:32	0:0	6	[
water	151:33	0:0	6	i
op	151:34	0:0	6	]
water	151:35	0:0	6	;
water	152:12	0:0	6	b
op	152:14	0:0	6	=
water	152:16	0:0	6	s
op	152:17	0:0	6	->
water	152:19	0:0	6	ref_bap
op	152:26	0:0	6	[
water	152:27	0:0	6	ch
op	152:29	0:0	6	]
op	152:30	0:0	6	[
water	152:31	0:0	6	blk
op	152:34	0:0	6	]
op	152:35	0:0	6	[
water	152:36	0:0	6	i
op	152:37	0:0	6	]
water	152:38	0:0	6	;
switch	153:12	162:12	6	(b)
cond	153:20	153:20	7	b
water	153:20	0:0	8	b
stmts	153:23	162:12	7	
water	153:23	0:0	8	{
label	154:12	154:18	8	case 0 :
break	154:61	154:66	8	
label	155:12	155:18	8	case 1 :
if	155:20	155:59	8	(q != 128)
cond	155:24	155:29	9	q != 128
water	155:24	0:0	10	q
op	155:26	0:0	10	!=
water	155:29	0:0	10	128
stmts	155:34	155:59	9	
call	155:34	155:58	10	put_bits
arg	155:44	155:50	11	&s->pb
op	155:44	0:0	12	&
water	155:45	0:0	12	s
op	155:46	0:0	12	->
water	155:48	0:0	12	pb
arg	155:54	155:55	11	5
water	155:54	0:0	12	5
arg	155:57	155:58	11	q
water	155:57	0:0	12	q
water	155:59	0:0	10	;
break	155:61	155:66	8	
label	156:12	156:18	8	case 2 :
if	156:20	156:59	8	(q != 128)
cond	156:24	156:29	9	q != 128
water	156:24	0:0	10	q
op	156:26	0:0	10	!=
water	156:29	0:0	10	128
stmts	156:34	156:59	9	
call	156:34	156:58	10	put_bits
arg	156:44	156:50	11	&s->pb
op	156:44	0:0	12	&
water	156:45	0:0	12	s
op	156:46	0:0	12	->
water	156:48	0:0	12	pb
arg	156:54	156:55	11	7
water	156:54	0:0	12	7
arg	156:57	156:58	11	q
water	156:57	0:0	12	q
water	156:59	0:0	10	;
break	156:61	156:66	8	
label	157:12	157:18	8	case 3 :
call	157:34	157:58	8	put_sbits
arg	157:44	157:50	9	&s->pb
op	157:44	0:0	10	&
water	157:45	0:0	10	s
op	157:46	0:0	10	->
water	157:48	0:0	10	pb
arg	157:54	157:55	9	3
water	157:54	0:0	10	3
arg	157:57	157:58	9	q
water	157:57	0:0	10	q
water	157:59	0:0	8	;
break	157:61	157:66	8	
label	158:12	158:18	8	case 4 :
if	158:20	158:59	8	(q != 128)
cond	158:24	158:29	9	q != 128
water	158:24	0:0	10	q
op	158:26	0:0	10	!=
water	158:29	0:0	10	128
stmts	158:34	158:59	9	
call	158:34	158:58	10	put_bits
arg	158:44	158:50	11	&s->pb
op	158:44	0:0	12	&
water	158:45	0:0	12	s
op	158:46	0:0	12	->
water	158:48	0:0	12	pb
arg	158:54	158:55	11	7
water	158:54	0:0	12	7
arg	158:57	158:58	11	q
water	158:57	0:0	12	q
water	158:59	0:0	10	;
break	158:61	158:66	8	
label	159:12	159:19	8	case 14 :
call	159:34	159:58	8	put_sbits
arg	159:44	159:50	9	&s->pb
op	159:44	0:0	10	&
water	159:45	0:0	10	s
op	159:46	0:0	10	->
water	159:48	0:0	10	pb
arg	159:53	159:55	9	14
water	159:53	0:0	10	14
arg	159:57	159:58	9	q
water	159:57	0:0	10	q
water	159:59	0:0	8	;
break	159:61	159:66	8	
label	160:12	160:19	8	case 15 :
call	160:34	160:58	8	put_sbits
arg	160:44	160:50	9	&s->pb
op	160:44	0:0	10	&
water	160:45	0:0	10	s
op	160:46	0:0	10	->
water	160:48	0:0	10	pb
arg	160:53	160:55	9	16
water	160:53	0:0	10	16
arg	160:57	160:58	9	q
water	160:57	0:0	10	q
water	160:59	0:0	8	;
break	160:61	160:66	8	
label	161:12	161:19	8	default :
call	161:34	161:58	8	put_sbits
arg	161:44	161:50	9	&s->pb
op	161:44	0:0	10	&
water	161:45	0:0	10	s
op	161:46	0:0	10	->
water	161:48	0:0	10	pb
arg	161:52	161:55	9	b-1
water	161:52	0:0	10	b
op	161:53	0:0	10	-
water	161:54	0:0	10	1
arg	161:57	161:58	9	q
water	161:57	0:0	10	q
water	161:59	0:0	8	;
break	161:61	161:66	8	
water	162:12	0:0	8	}
water	163:8	0:0	6	}
if	164:8	165:20	4	(ch == CPL_CH)
cond	164:12	164:18	5	ch == CPL_CH
water	164:12	0:0	6	ch
op	164:15	0:0	6	==
water	164:18	0:0	6	CPL_CH
stmts	165:12	165:20	5	
water	165:12	0:0	6	ch
op	165:15	0:0	6	=
water	165:17	0:0	6	ch0
water	165:20	0:0	6	;
water	166:4	0:0	4	}
