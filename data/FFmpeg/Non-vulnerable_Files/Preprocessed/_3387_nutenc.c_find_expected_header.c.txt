func	1:0	56:0	0	static int	find_expected_header
params	1:31	0:0	1	
param	1:32	1:49	2	AVCodecContext *	c
param	1:51	1:59	2	int	size
param	1:61	1:74	2	int	key_frame
param	2:32	2:47	2	uint8_t	out[64]
stmnts	0:0	55:12	1	
decl	4:4	4:36	2	int	sample_rate
op	4:20	0:0	2	=
water	4:22	0:0	2	c
op	4:23	0:0	2	->
water	4:25	0:0	2	sample_rate
if	5:4	6:16	2	(size > 4096)
cond	5:8	5:15	3	size > 4096
water	5:8	0:0	4	size
op	5:13	0:0	4	>
water	5:15	0:0	4	4096
stmts	6:8	6:16	3	
return	6:8	6:16	4	0
water	6:15	0:0	5	0
call	7:4	7:18	2	AV_WB24
arg	7:12	7:15	3	out
water	7:12	0:0	4	out
arg	7:17	7:18	3	1
water	7:17	0:0	4	1
water	7:19	0:0	2	;
if	8:4	15:4	2	(c -> codec_id == AV_CODEC_ID_MPEG4)
cond	8:8	8:23	3	c -> codec_id == AV_CODEC_ID_MPEG4
water	8:8	0:0	4	c
op	8:9	0:0	4	->
water	8:11	0:0	4	codec_id
op	8:20	0:0	4	==
water	8:23	0:0	4	AV_CODEC_ID_MPEG4
stmts	8:42	15:4	3	
water	8:42	0:0	4	{
if	9:8	11:8	4	(key_frame)
cond	9:12	9:12	5	key_frame
water	9:12	0:0	6	key_frame
stmts	9:23	11:8	5	
water	9:23	0:0	6	{
return	10:12	10:20	6	3
water	10:19	0:0	7	3
water	11:8	0:0	6	}
else	11:10	14:8	4
stmts	11:15	14:8	5	
water	11:15	0:0	6	{
water	12:12	0:0	6	out
op	12:15	0:0	6	[
water	12:16	0:0	6	3
op	12:17	0:0	6	]
op	12:19	0:0	6	=
water	12:21	0:0	6	0
water	12:22	0:0	6	xB6
water	12:25	0:0	6	;
return	13:12	13:20	6	4
water	13:19	0:0	7	4
water	14:8	0:0	6	}
water	15:4	0:0	4	}
else	15:6	18:4	2
stmts	15:11	18:4	3	
if	15:11	18:4	4	(c -> codec_id == AV_CODEC_ID_MPEG1VIDEO || c -> codec_id == AV_CODEC_ID_MPEG2VIDEO)
cond	15:15	16:30	5	c -> codec_id == AV_CODEC_ID_MPEG1VIDEO || c -> codec_id == AV_CODEC_ID_MPEG2VIDEO
water	15:15	0:0	6	c
op	15:16	0:0	6	->
water	15:18	0:0	6	codec_id
op	15:27	0:0	6	==
water	15:30	0:0	6	AV_CODEC_ID_MPEG1VIDEO
op	15:53	0:0	6	||
water	16:15	0:0	6	c
op	16:16	0:0	6	->
water	16:18	0:0	6	codec_id
op	16:27	0:0	6	==
water	16:30	0:0	6	AV_CODEC_ID_MPEG2VIDEO
stmts	16:54	18:4	5	
water	16:54	0:0	6	{
return	17:8	17:16	6	3
water	17:15	0:0	7	3
water	18:4	0:0	6	}
else	18:6	20:4	2
stmts	18:11	20:4	3	
if	18:11	20:4	4	(c -> codec_id == AV_CODEC_ID_H264)
cond	18:15	18:30	5	c -> codec_id == AV_CODEC_ID_H264
water	18:15	0:0	6	c
op	18:16	0:0	6	->
water	18:18	0:0	6	codec_id
op	18:27	0:0	6	==
water	18:30	0:0	6	AV_CODEC_ID_H264
stmts	18:48	20:4	5	
water	18:48	0:0	6	{
return	19:8	19:16	6	3
water	19:15	0:0	7	3
water	20:4	0:0	6	}
else	20:6	54:4	2
stmts	20:11	54:4	3	
if	20:11	54:4	4	(c -> codec_id == AV_CODEC_ID_MP3 || c -> codec_id == AV_CODEC_ID_MP2)
cond	20:15	21:30	5	c -> codec_id == AV_CODEC_ID_MP3 || c -> codec_id == AV_CODEC_ID_MP2
water	20:15	0:0	6	c
op	20:16	0:0	6	->
water	20:18	0:0	6	codec_id
op	20:27	0:0	6	==
water	20:30	0:0	6	AV_CODEC_ID_MP3
op	20:46	0:0	6	||
water	21:15	0:0	6	c
op	21:16	0:0	6	->
water	21:18	0:0	6	codec_id
op	21:27	0:0	6	==
water	21:30	0:0	6	AV_CODEC_ID_MP2
stmts	21:47	54:4	5	
water	21:47	0:0	6	{
decl	22:8	22:69	6	int	lsf
water	22:15	0:0	6	,
decl	22:8	22:69	6	int	mpeg25
water	22:23	0:0	6	,
decl	22:8	22:69	6	int	sample_rate_index
water	22:42	0:0	6	,
decl	22:8	22:69	6	int	bitrate_index
water	22:57	0:0	6	,
decl	22:8	22:69	6	int	frame_size
decl	23:8	23:68	6	int	layer
op	23:28	0:0	6	=
water	23:30	0:0	6	c
op	23:31	0:0	6	->
water	23:33	0:0	6	codec_id
op	23:42	0:0	6	==
water	23:45	0:0	6	AV_CODEC_ID_MP3
water	23:61	0:0	6	?
water	23:63	0:0	6	3
water	23:65	0:0	6	:
water	23:67	0:0	6	2
decl	24:8	24:40	6	unsigned int	header
op	24:28	0:0	6	=
water	24:30	0:0	6	0
water	24:31	0:0	6	xFFF00000
water	25:8	0:0	6	lsf
op	25:22	0:0	6	=
water	25:24	0:0	6	sample_rate
op	25:36	0:0	6	<
water	25:38	0:0	6	(
water	25:39	0:0	6	24000
op	25:45	0:0	6	+
water	25:47	0:0	6	32000
water	25:52	0:0	6	)
op	25:54	0:0	6	/
water	25:56	0:0	6	2
water	25:57	0:0	6	;
water	26:8	0:0	6	mpeg25
op	26:22	0:0	6	=
water	26:24	0:0	6	sample_rate
op	26:36	0:0	6	<
water	26:38	0:0	6	(
water	26:39	0:0	6	12000
op	26:45	0:0	6	+
water	26:47	0:0	6	16000
water	26:52	0:0	6	)
op	26:54	0:0	6	/
water	26:56	0:0	6	2
water	26:57	0:0	6	;
water	27:8	0:0	6	sample_rate
op	27:20	0:0	6	<<=
water	27:24	0:0	6	lsf
op	27:28	0:0	6	+
water	27:30	0:0	6	mpeg25
water	27:36	0:0	6	;
if	28:8	28:73	6	(sample_rate < ( 32000 + 44100 ) / 2)
cond	28:17	28:49	7	sample_rate < ( 32000 + 44100 ) / 2
water	28:17	0:0	8	sample_rate
op	28:29	0:0	8	<
water	28:31	0:0	8	(
water	28:32	0:0	8	32000
op	28:38	0:0	8	+
water	28:40	0:0	8	44100
water	28:45	0:0	8	)
op	28:47	0:0	8	/
water	28:49	0:0	8	2
stmts	28:52	28:73	7	
water	28:52	0:0	8	sample_rate_index
op	28:70	0:0	8	=
water	28:72	0:0	8	2
water	28:73	0:0	8	;
else	29:8	29:73	6
stmts	29:13	29:73	7	
if	29:13	29:73	8	(sample_rate < ( 44100 + 48000 ) / 2)
cond	29:17	29:49	9	sample_rate < ( 44100 + 48000 ) / 2
water	29:17	0:0	10	sample_rate
op	29:29	0:0	10	<
water	29:31	0:0	10	(
water	29:32	0:0	10	44100
op	29:38	0:0	10	+
water	29:40	0:0	10	48000
water	29:45	0:0	10	)
op	29:47	0:0	10	/
water	29:49	0:0	10	2
stmts	29:52	29:73	9	
water	29:52	0:0	10	sample_rate_index
op	29:70	0:0	10	=
water	29:72	0:0	10	0
water	29:73	0:0	10	;
else	30:8	30:73	6
stmts	30:52	30:73	7	
water	30:52	0:0	8	sample_rate_index
op	30:70	0:0	8	=
water	30:72	0:0	8	1
water	30:73	0:0	8	;
water	31:8	0:0	6	sample_rate
op	31:20	0:0	6	=
water	31:22	0:0	6	avpriv_mpa_freq_tab
op	31:41	0:0	6	[
water	31:42	0:0	6	sample_rate_index
op	31:59	0:0	6	]
op	31:61	0:0	6	>>
water	31:64	0:0	6	(
water	31:65	0:0	6	lsf
op	31:69	0:0	6	+
water	31:71	0:0	6	mpeg25
water	31:77	0:0	6	)
water	31:78	0:0	6	;
for	32:8	39:8	6	(bitrate_index = 2 ;bitrate_index < 30;bitrate_index ++)
forinit	32:13	32:30	7	bitrate_index = 2 ;
water	32:13	0:0	8	bitrate_index
op	32:27	0:0	8	=
water	32:29	0:0	8	2
water	32:30	0:0	8	;
cond	32:32	32:48	7	bitrate_index < 30
water	32:32	0:0	8	bitrate_index
op	32:46	0:0	8	<
water	32:48	0:0	8	30
forexpr	32:52	32:65	7	bitrate_index ++
water	32:52	0:0	8	bitrate_index
op	32:65	0:0	8	++
stmts	32:69	39:8	7	
water	32:69	0:0	8	{
water	33:12	0:0	8	frame_size
op	33:23	0:0	8	=
water	34:16	0:0	8	avpriv_mpa_bitrate_tab
op	34:38	0:0	8	[
water	34:39	0:0	8	lsf
op	34:42	0:0	8	]
op	34:43	0:0	8	[
water	34:44	0:0	8	layer
op	34:50	0:0	8	-
water	34:52	0:0	8	1
op	34:53	0:0	8	]
op	34:54	0:0	8	[
water	34:55	0:0	8	bitrate_index
op	34:69	0:0	8	>>
water	34:72	0:0	8	1
op	34:73	0:0	8	]
water	34:74	0:0	8	;
water	35:12	0:0	8	frame_size
op	35:23	0:0	8	=
water	35:25	0:0	8	(
water	35:26	0:0	8	frame_size
op	35:37	0:0	8	*
water	35:39	0:0	8	144000
water	35:45	0:0	8	)
op	35:47	0:0	8	/
water	35:49	0:0	8	(
water	35:50	0:0	8	sample_rate
op	35:62	0:0	8	<<
water	35:65	0:0	8	lsf
water	35:68	0:0	8	)
op	35:70	0:0	8	+
water	36:16	0:0	8	(
water	36:17	0:0	8	bitrate_index
op	36:31	0:0	8	&
water	36:33	0:0	8	1
water	36:34	0:0	8	)
water	36:35	0:0	8	;
if	37:12	38:21	8	(frame_size == size)
cond	37:16	37:30	9	frame_size == size
water	37:16	0:0	10	frame_size
op	37:27	0:0	10	==
water	37:30	0:0	10	size
stmts	38:16	38:21	9	
break	38:16	38:21	10	
water	39:8	0:0	8	}
water	40:8	0:0	6	header
op	40:15	0:0	6	|=
water	40:18	0:0	6	(
op	40:19	0:0	6	!
water	40:20	0:0	6	lsf
water	40:23	0:0	6	)
op	40:25	0:0	6	<<
water	40:28	0:0	6	19
water	40:30	0:0	6	;
water	41:8	0:0	6	header
op	41:15	0:0	6	|=
water	41:18	0:0	6	(
water	41:19	0:0	6	4
op	41:21	0:0	6	-
water	41:23	0:0	6	layer
water	41:28	0:0	6	)
op	41:30	0:0	6	<<
water	41:33	0:0	6	17
water	41:35	0:0	6	;
water	42:8	0:0	6	header
op	42:15	0:0	6	|=
water	42:18	0:0	6	1
op	42:20	0:0	6	<<
water	42:23	0:0	6	16
water	42:25	0:0	6	;
call	43:8	43:27	6	AV_WB32
arg	43:16	43:19	7	out
water	43:16	0:0	8	out
arg	43:21	43:27	7	header
water	43:21	0:0	8	header
water	43:28	0:0	6	;
if	44:8	45:20	6	(size <= 0)
cond	44:12	44:20	7	size <= 0
water	44:12	0:0	8	size
op	44:17	0:0	8	<=
water	44:20	0:0	8	0
stmts	45:12	45:20	7	
return	45:12	45:20	8	2
water	45:19	0:0	9	2
if	46:8	47:21	6	(bitrate_index == 30)
cond	46:12	46:29	7	bitrate_index == 30
water	46:12	0:0	8	bitrate_index
op	46:26	0:0	8	==
water	46:29	0:0	8	30
stmts	47:12	47:21	7	
return	47:12	47:21	8	-1
op	47:19	0:0	9	-
water	47:20	0:0	9	1
water	48:8	0:0	6	header
op	48:15	0:0	6	|=
water	48:18	0:0	6	(
water	48:19	0:0	6	bitrate_index
op	48:33	0:0	6	>>
water	48:36	0:0	6	1
water	48:37	0:0	6	)
op	48:39	0:0	6	<<
water	48:42	0:0	6	12
water	48:44	0:0	6	;
water	49:8	0:0	6	header
op	49:15	0:0	6	|=
water	49:18	0:0	6	sample_rate_index
op	49:36	0:0	6	<<
water	49:39	0:0	6	10
water	49:41	0:0	6	;
water	50:8	0:0	6	header
op	50:15	0:0	6	|=
water	50:18	0:0	6	(
water	50:19	0:0	6	bitrate_index
op	50:33	0:0	6	&
water	50:35	0:0	6	1
water	50:36	0:0	6	)
op	50:38	0:0	6	<<
water	50:41	0:0	6	9
water	50:42	0:0	6	;
return	51:8	51:16	6	2
water	51:15	0:0	7	2
water	54:4	0:0	6	}
return	55:4	55:12	2	0
water	55:11	0:0	3	0
