func	1:0	22:0	0	static int	bit_alloc
params	1:20	0:0	1	
param	1:21	1:40	2	AC3EncodeContext *	s
param	1:42	1:56	2	int	snr_offset
stmnts	0:0	21:33	1	
decl	3:4	3:15	2	int	blk
water	3:11	0:0	2	,
decl	3:4	3:15	2	int	ch
water	4:4	0:0	2	snr_offset
op	4:15	0:0	2	=
water	4:17	0:0	2	(
water	4:18	0:0	2	snr_offset
op	4:29	0:0	2	-
water	4:31	0:0	2	240
water	4:34	0:0	2	)
op	4:36	0:0	2	<<
water	4:39	0:0	2	2
water	4:40	0:0	2	;
call	5:4	5:21	2	reset_block_bap
arg	5:20	5:21	3	s
water	5:20	0:0	4	s
water	5:22	0:0	2	;
for	6:4	20:4	2	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	6:9	6:16	3	blk = 0 ;
water	6:9	0:0	4	blk
op	6:13	0:0	4	=
water	6:15	0:0	4	0
water	6:16	0:0	4	;
cond	6:18	6:27	3	blk < s -> num_blocks
water	6:18	0:0	4	blk
op	6:22	0:0	4	<
water	6:24	0:0	4	s
op	6:25	0:0	4	->
water	6:27	0:0	4	num_blocks
forexpr	6:39	6:42	3	blk ++
water	6:39	0:0	4	blk
op	6:42	0:0	4	++
stmts	6:46	20:4	3	
water	6:46	0:0	4	{
decl	7:8	7:41	4	AC3Block	*block
op	7:24	0:0	4	=
op	7:26	0:0	4	&
water	7:27	0:0	4	s
op	7:28	0:0	4	->
water	7:30	0:0	4	blocks
op	7:36	0:0	4	[
water	7:37	0:0	4	blk
op	7:40	0:0	4	]
for	8:8	19:8	4	(ch = ! block -> cpl_in_use ;ch <= s -> channels;ch ++)
forinit	8:13	8:36	5	ch = ! block -> cpl_in_use ;
water	8:13	0:0	6	ch
op	8:16	0:0	6	=
op	8:18	0:0	6	!
water	8:19	0:0	6	block
op	8:24	0:0	6	->
water	8:26	0:0	6	cpl_in_use
water	8:36	0:0	6	;
cond	8:38	8:47	5	ch <= s -> channels
water	8:38	0:0	6	ch
op	8:41	0:0	6	<=
water	8:44	0:0	6	s
op	8:45	0:0	6	->
water	8:47	0:0	6	channels
forexpr	8:57	8:59	5	ch ++
water	8:57	0:0	6	ch
op	8:59	0:0	6	++
stmts	8:63	19:8	5	
water	8:63	0:0	6	{
if	13:12	18:12	6	(s -> exp_strategy [ ch ] [ blk ] != EXP_REUSE)
cond	13:16	13:44	7	s -> exp_strategy [ ch ] [ blk ] != EXP_REUSE
water	13:16	0:0	8	s
op	13:17	0:0	8	->
water	13:19	0:0	8	exp_strategy
op	13:31	0:0	8	[
water	13:32	0:0	8	ch
op	13:34	0:0	8	]
op	13:35	0:0	8	[
water	13:36	0:0	8	blk
op	13:39	0:0	8	]
op	13:41	0:0	8	!=
water	13:44	0:0	8	EXP_REUSE
stmts	13:55	18:12	7	
water	13:55	0:0	8	{
call	14:16	17:80	8	s->ac3dsp.bit_alloc_calc_bap
arg	14:45	14:60	9	block->mask[ch]
water	14:45	0:0	10	block
op	14:50	0:0	10	->
water	14:52	0:0	10	mask
op	14:56	0:0	10	[
water	14:57	0:0	10	ch
op	14:59	0:0	10	]
arg	14:62	14:76	9	block->psd[ch]
water	14:62	0:0	10	block
op	14:67	0:0	10	->
water	14:69	0:0	10	psd
op	14:72	0:0	10	[
water	14:73	0:0	10	ch
op	14:75	0:0	10	]
arg	15:45	15:62	9	s->start_freq[ch]
water	15:45	0:0	10	s
op	15:46	0:0	10	->
water	15:48	0:0	10	start_freq
op	15:58	0:0	10	[
water	15:59	0:0	10	ch
op	15:61	0:0	10	]
arg	15:64	15:83	9	block->end_freq[ch]
water	15:64	0:0	10	block
op	15:69	0:0	10	->
water	15:71	0:0	10	end_freq
op	15:79	0:0	10	[
water	15:80	0:0	10	ch
op	15:82	0:0	10	]
arg	16:45	16:55	9	snr_offset
water	16:45	0:0	10	snr_offset
arg	16:57	16:75	9	s->bit_alloc.floor
water	16:57	0:0	10	s
op	16:58	0:0	10	->
water	16:60	0:0	10	bit_alloc
op	16:69	0:0	10	.
water	16:70	0:0	10	floor
arg	17:45	17:59	9	ff_ac3_bap_tab
water	17:45	0:0	10	ff_ac3_bap_tab
arg	17:61	17:80	9	s->ref_bap[ch][blk]
water	17:61	0:0	10	s
op	17:62	0:0	10	->
water	17:64	0:0	10	ref_bap
op	17:71	0:0	10	[
water	17:72	0:0	10	ch
op	17:74	0:0	10	]
op	17:75	0:0	10	[
water	17:76	0:0	10	blk
op	17:79	0:0	10	]
water	17:81	0:0	8	;
water	18:12	0:0	8	}
water	19:8	0:0	6	}
water	20:4	0:0	4	}
return	21:4	21:33	2	count_mantissa_bits(s)
call	21:11	21:32	3	count_mantissa_bits
arg	21:31	21:32	4	s
water	21:31	0:0	5	s
