func	1:0	61:0	0	int	av_opt_set
params	1:14	0:0	1	
param	1:15	1:24	2	void *	obj
param	1:26	1:42	2	const char *	name
param	1:44	1:59	2	const char *	val
param	1:61	1:77	2	int	search_flags
stmnts	0:0	60:26	1	
decl	3:4	3:15	2	int	ret
op	3:12	0:0	2	=
water	3:14	0:0	2	0
decl	4:4	4:26	2	void	*dst
water	4:13	0:0	2	,
decl	4:4	4:26	2	void	*target_obj
decl	5:4	5:83	2	const AVOption	*o
op	5:22	0:0	2	=
call	5:24	5:82	3	av_opt_find2
arg	5:37	5:40	4	obj
water	5:37	0:0	5	obj
arg	5:42	5:46	4	name
water	5:42	0:0	5	name
arg	5:48	5:52	4	NULL
water	5:48	0:0	5	NULL
arg	5:54	5:55	4	0
water	5:54	0:0	5	0
arg	5:57	5:69	4	search_flags
water	5:57	0:0	5	search_flags
arg	5:71	5:82	4	&target_obj
op	5:71	0:0	5	&
water	5:72	0:0	5	target_obj
if	6:4	7:39	2	(! o || ! target_obj)
cond	6:8	6:15	3	! o || ! target_obj
op	6:8	0:0	4	!
water	6:9	0:0	4	o
op	6:11	0:0	4	||
op	6:14	0:0	4	!
water	6:15	0:0	4	target_obj
stmts	7:8	7:39	3	
return	7:8	7:39	4	AVERROR_OPTION_NOT_FOUND
water	7:15	0:0	5	AVERROR_OPTION_NOT_FOUND
if	8:4	13:30	2	(! val && ( o -> type != AV_OPT_TYPE_STRING && o -> type != AV_OPT_TYPE_PIXEL_FMT && o -> type != AV_OPT_TYPE_SAMPLE_FMT && o -> type != AV_OPT_TYPE_IMAGE_SIZE && o -> type != AV_OPT_TYPE_VIDEO_RATE && o -> type != AV_OPT_TYPE_DURATION && o -> type != AV_OPT_TYPE_COLOR && o -> type != AV_OPT_TYPE_CHANNEL_LAYOUT ))
cond	8:8	12:54	3	! val && ( o -> type != AV_OPT_TYPE_STRING && o -> type != AV_OPT_TYPE_PIXEL_FMT && o -> type != AV_OPT_TYPE_SAMPLE_FMT && o -> type != AV_OPT_TYPE_IMAGE_SIZE && o -> type != AV_OPT_TYPE_VIDEO_RATE && o -> type != AV_OPT_TYPE_DURATION && o -> type != AV_OPT_TYPE_COLOR && o -> type != AV_OPT_TYPE_CHANNEL_LAYOUT )
op	8:8	0:0	4	!
water	8:9	0:0	4	val
op	8:13	0:0	4	&&
water	8:16	0:0	4	(
water	8:17	0:0	4	o
op	8:18	0:0	4	->
water	8:20	0:0	4	type
op	8:25	0:0	4	!=
water	8:28	0:0	4	AV_OPT_TYPE_STRING
op	8:47	0:0	4	&&
water	9:17	0:0	4	o
op	9:18	0:0	4	->
water	9:20	0:0	4	type
op	9:25	0:0	4	!=
water	9:28	0:0	4	AV_OPT_TYPE_PIXEL_FMT
op	9:50	0:0	4	&&
water	9:53	0:0	4	o
op	9:54	0:0	4	->
water	9:56	0:0	4	type
op	9:61	0:0	4	!=
water	9:64	0:0	4	AV_OPT_TYPE_SAMPLE_FMT
op	9:87	0:0	4	&&
water	10:17	0:0	4	o
op	10:18	0:0	4	->
water	10:20	0:0	4	type
op	10:25	0:0	4	!=
water	10:28	0:0	4	AV_OPT_TYPE_IMAGE_SIZE
op	10:51	0:0	4	&&
water	10:54	0:0	4	o
op	10:55	0:0	4	->
water	10:57	0:0	4	type
op	10:62	0:0	4	!=
water	10:65	0:0	4	AV_OPT_TYPE_VIDEO_RATE
op	10:88	0:0	4	&&
water	11:17	0:0	4	o
op	11:18	0:0	4	->
water	11:20	0:0	4	type
op	11:25	0:0	4	!=
water	11:28	0:0	4	AV_OPT_TYPE_DURATION
op	11:49	0:0	4	&&
water	11:52	0:0	4	o
op	11:53	0:0	4	->
water	11:55	0:0	4	type
op	11:60	0:0	4	!=
water	11:63	0:0	4	AV_OPT_TYPE_COLOR
op	11:81	0:0	4	&&
water	12:17	0:0	4	o
op	12:18	0:0	4	->
water	12:20	0:0	4	type
op	12:25	0:0	4	!=
water	12:28	0:0	4	AV_OPT_TYPE_CHANNEL_LAYOUT
water	12:54	0:0	4	)
stmts	13:8	13:30	3	
return	13:8	13:30	4	AVERROR(EINVAL)
call	13:15	13:29	5	AVERROR
arg	13:23	13:29	6	EINVAL
water	13:23	0:0	7	EINVAL
if	14:4	15:30	2	(o -> flags & AV_OPT_FLAG_READONLY)
cond	14:8	14:19	3	o -> flags & AV_OPT_FLAG_READONLY
water	14:8	0:0	4	o
op	14:9	0:0	4	->
water	14:11	0:0	4	flags
op	14:17	0:0	4	&
water	14:19	0:0	4	AV_OPT_FLAG_READONLY
stmts	15:8	15:30	3	
return	15:8	15:30	4	AVERROR(EINVAL)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	EINVAL
water	15:23	0:0	7	EINVAL
water	16:4	0:0	2	dst
op	16:8	0:0	2	=
water	16:10	0:0	2	(
water	16:11	0:0	2	(
water	16:12	0:0	2	uint8_t
op	16:19	0:0	2	*
water	16:20	0:0	2	)
water	16:21	0:0	2	target_obj
water	16:31	0:0	2	)
op	16:33	0:0	2	+
water	16:35	0:0	2	o
op	16:36	0:0	2	->
water	16:38	0:0	2	offset
water	16:44	0:0	2	;
switch	17:4	58:4	2	(o -> type)
cond	17:12	17:15	3	o -> type
water	17:12	0:0	4	o
op	17:13	0:0	4	->
water	17:15	0:0	4	type
stmts	17:21	58:4	3	
water	17:21	0:0	4	{
label	18:4	18:27	4	case AV_OPT_TYPE_STRING :
return	18:31	18:66	4	set_string(obj,o,val,dst)
call	18:38	18:65	5	set_string
arg	18:49	18:52	6	obj
water	18:49	0:0	7	obj
arg	18:54	18:55	6	o
water	18:54	0:0	7	o
arg	18:57	18:60	6	val
water	18:57	0:0	7	val
arg	18:62	18:65	6	dst
water	18:62	0:0	7	dst
label	19:4	19:27	4	case AV_OPT_TYPE_BINARY :
return	19:31	19:73	4	set_string_binary(obj,o,val,dst)
call	19:38	19:72	5	set_string_binary
arg	19:56	19:59	6	obj
water	19:56	0:0	7	obj
arg	19:61	19:62	6	o
water	19:61	0:0	7	o
arg	19:64	19:67	6	val
water	19:64	0:0	7	val
arg	19:69	19:72	6	dst
water	19:69	0:0	7	dst
label	20:4	20:26	4	case AV_OPT_TYPE_FLAGS :
label	21:4	21:24	4	case AV_OPT_TYPE_INT :
label	22:4	22:26	4	case AV_OPT_TYPE_INT64 :
label	23:4	23:26	4	case AV_OPT_TYPE_FLOAT :
label	24:4	24:27	4	case AV_OPT_TYPE_DOUBLE :
label	25:4	25:29	4	case AV_OPT_TYPE_RATIONAL :
return	25:31	25:85	4	set_string_number(obj,target_obj,o,val,dst)
call	25:38	25:84	5	set_string_number
arg	25:56	25:59	6	obj
water	25:56	0:0	7	obj
arg	25:61	25:71	6	target_obj
water	25:61	0:0	7	target_obj
arg	25:73	25:74	6	o
water	25:73	0:0	7	o
arg	25:76	25:79	6	val
water	25:76	0:0	7	val
arg	25:81	25:84	6	dst
water	25:81	0:0	7	dst
label	26:4	26:31	4	case AV_OPT_TYPE_IMAGE_SIZE :
return	26:33	26:79	4	set_string_image_size(obj,o,val,dst)
call	26:40	26:78	5	set_string_image_size
arg	26:62	26:65	6	obj
water	26:62	0:0	7	obj
arg	26:67	26:68	6	o
water	26:67	0:0	7	o
arg	26:70	26:73	6	val
water	26:70	0:0	7	val
arg	26:75	26:78	6	dst
water	26:75	0:0	7	dst
label	27:4	27:31	4	case AV_OPT_TYPE_VIDEO_RATE :
return	27:33	27:79	4	set_string_video_rate(obj,o,val,dst)
call	27:40	27:78	5	set_string_video_rate
arg	27:62	27:65	6	obj
water	27:62	0:0	7	obj
arg	27:67	27:68	6	o
water	27:67	0:0	7	o
arg	27:70	27:73	6	val
water	27:70	0:0	7	val
arg	27:75	27:78	6	dst
water	27:75	0:0	7	dst
label	28:4	28:30	4	case AV_OPT_TYPE_PIXEL_FMT :
return	28:33	28:78	4	set_string_pixel_fmt(obj,o,val,dst)
call	28:40	28:77	5	set_string_pixel_fmt
arg	28:61	28:64	6	obj
water	28:61	0:0	7	obj
arg	28:66	28:67	6	o
water	28:66	0:0	7	o
arg	28:69	28:72	6	val
water	28:69	0:0	7	val
arg	28:74	28:77	6	dst
water	28:74	0:0	7	dst
label	29:4	29:31	4	case AV_OPT_TYPE_SAMPLE_FMT :
return	29:33	29:79	4	set_string_sample_fmt(obj,o,val,dst)
call	29:40	29:78	5	set_string_sample_fmt
arg	29:62	29:65	6	obj
water	29:62	0:0	7	obj
arg	29:67	29:68	6	o
water	29:67	0:0	7	o
arg	29:70	29:73	6	val
water	29:70	0:0	7	val
arg	29:75	29:78	6	dst
water	29:75	0:0	7	dst
label	30:4	30:29	4	case AV_OPT_TYPE_DURATION :
if	31:8	34:8	4	(! val)
cond	31:12	31:13	5	! val
op	31:12	0:0	6	!
water	31:13	0:0	6	val
stmts	31:18	34:8	5	
water	31:18	0:0	6	{
op	32:12	0:0	6	*
water	32:13	0:0	6	(
water	32:14	0:0	6	int64_t
op	32:22	0:0	6	*
water	32:23	0:0	6	)
water	32:24	0:0	6	dst
op	32:28	0:0	6	=
water	32:30	0:0	6	0
water	32:31	0:0	6	;
return	33:12	33:20	6	0
water	33:19	0:0	7	0
water	34:8	0:0	6	}
else	34:10	38:8	4
stmts	34:15	38:8	5	
water	34:15	0:0	6	{
if	35:12	36:99	6	(( ret =av_parse_time (dst ,val ,1 ) ) < 0)
cond	35:16	35:53	7	( ret =av_parse_time (dst ,val ,1 ) ) < 0
water	35:16	0:0	8	(
water	35:17	0:0	8	ret
op	35:21	0:0	8	=
call	35:23	35:48	8	av_parse_time
arg	35:37	35:40	9	dst
water	35:37	0:0	10	dst
arg	35:42	35:45	9	val
water	35:42	0:0	10	val
arg	35:47	35:48	9	1
water	35:47	0:0	10	1
water	35:49	0:0	8	)
op	35:51	0:0	8	<
water	35:53	0:0	8	0
stmts	36:16	36:99	7	
call	36:16	36:98	8	av_log
arg	36:23	36:26	9	obj
water	36:23	0:0	10	obj
arg	36:28	36:40	9	AV_LOG_ERROR
water	36:28	0:0	10	AV_LOG_ERROR
arg	36:42	36:93	9	"Unable to parse option value \"%s\" as duration\n"
water	36:42	0:0	10	"Unable to parse option value \"%s\" as duration\n"
arg	36:95	36:98	9	val
water	36:95	0:0	10	val
water	36:99	0:0	8	;
return	37:12	37:22	6	ret
water	37:19	0:0	7	ret
water	38:8	0:0	6	}
break	39:8	39:13	4	
label	40:4	40:26	4	case AV_OPT_TYPE_COLOR :
return	40:33	40:74	4	set_string_color(obj,o,val,dst)
call	40:40	40:73	5	set_string_color
arg	40:57	40:60	6	obj
water	40:57	0:0	7	obj
arg	40:62	40:63	6	o
water	40:62	0:0	7	o
arg	40:65	40:68	6	val
water	40:65	0:0	7	val
arg	40:70	40:73	6	dst
water	40:70	0:0	7	dst
label	41:4	41:35	4	case AV_OPT_TYPE_CHANNEL_LAYOUT :
if	42:8	44:8	4	(! val || !strcmp (val ,"none" ))
cond	42:12	42:39	5	! val || !strcmp (val ,"none" )
op	42:12	0:0	6	!
water	42:13	0:0	6	val
op	42:17	0:0	6	||
op	42:20	0:0	6	!
call	42:21	42:39	6	strcmp
arg	42:28	42:31	7	val
water	42:28	0:0	8	val
arg	42:33	42:39	7	"none"
water	42:33	0:0	8	"none"
stmts	42:42	44:8	5	
water	42:42	0:0	6	{
op	43:12	0:0	6	*
water	43:13	0:0	6	(
water	43:14	0:0	6	int64_t
op	43:22	0:0	6	*
water	43:23	0:0	6	)
water	43:24	0:0	6	dst
op	43:28	0:0	6	=
water	43:30	0:0	6	0
water	43:31	0:0	6	;
water	44:8	0:0	6	}
else	44:10	56:8	4
stmts	44:15	56:8	5	
water	44:15	0:0	6	{
decl	46:12	46:54	6	int64_t	cl
op	46:23	0:0	6	=
call	46:25	46:53	7	ff_get_channel_layout
arg	46:47	46:50	8	val
water	46:47	0:0	9	val
arg	46:52	46:53	8	0
water	46:52	0:0	9	0
decl	48:12	48:51	6	int64_t	cl
op	48:23	0:0	6	=
call	48:25	48:50	7	av_get_channel_layout
arg	48:47	48:50	8	val
water	48:47	0:0	9	val
if	50:12	53:12	6	(! cl)
cond	50:16	50:17	7	! cl
op	50:16	0:0	8	!
water	50:17	0:0	8	cl
stmts	50:21	53:12	7	
water	50:21	0:0	8	{
call	51:16	51:104	8	av_log
arg	51:23	51:26	9	obj
water	51:23	0:0	10	obj
arg	51:28	51:40	9	AV_LOG_ERROR
water	51:28	0:0	10	AV_LOG_ERROR
arg	51:42	51:99	9	"Unable to parse option value \"%s\" as channel layout\n"
water	51:42	0:0	10	"Unable to parse option value \"%s\" as channel layout\n"
arg	51:101	51:104	9	val
water	51:101	0:0	10	val
water	51:105	0:0	8	;
water	52:16	0:0	8	ret
op	52:20	0:0	8	=
call	52:22	52:36	8	AVERROR
arg	52:30	52:36	9	EINVAL
water	52:30	0:0	10	EINVAL
water	52:37	0:0	8	;
water	53:12	0:0	8	}
op	54:12	0:0	6	*
water	54:13	0:0	6	(
water	54:14	0:0	6	int64_t
op	54:22	0:0	6	*
water	54:23	0:0	6	)
water	54:24	0:0	6	dst
op	54:28	0:0	6	=
water	54:30	0:0	6	cl
water	54:32	0:0	6	;
return	55:12	55:22	6	ret
water	55:19	0:0	7	ret
water	56:8	0:0	6	}
break	57:8	57:13	4	
water	58:4	0:0	4	}
call	59:4	59:54	2	av_log
arg	59:11	59:14	3	obj
water	59:11	0:0	4	obj
arg	59:16	59:28	3	AV_LOG_ERROR
water	59:16	0:0	4	AV_LOG_ERROR
arg	59:30	59:54	3	"Invalid option type.\n"
water	59:30	0:0	4	"Invalid option type.\n"
water	59:55	0:0	2	;
return	60:4	60:26	2	AVERROR(EINVAL)
call	60:11	60:25	3	AVERROR
arg	60:19	60:25	4	EINVAL
water	60:19	0:0	5	EINVAL
