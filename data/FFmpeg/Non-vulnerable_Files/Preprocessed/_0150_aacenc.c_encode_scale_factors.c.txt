func	1:0	31:0	0	static void	encode_scale_factors
params	1:32	0:0	1	
param	1:33	1:54	2	AVCodecContext *	avctx
param	1:56	1:72	2	AACEncContext *	s
param	2:33	2:58	2	SingleChannelElement *	sce
stmnts	0:0	30:4	1	
decl	4:4	4:78	2	int	diff
water	4:12	0:0	2	,
decl	4:4	4:78	2	int	off_sf
op	4:21	0:0	2	=
water	4:23	0:0	2	sce
op	4:26	0:0	2	->
water	4:28	0:0	2	sf_idx
op	4:34	0:0	2	[
water	4:35	0:0	2	0
op	4:36	0:0	2	]
water	4:37	0:0	2	,
decl	4:4	4:78	2	int	off_pns
op	4:47	0:0	2	=
water	4:49	0:0	2	sce
op	4:52	0:0	2	->
water	4:54	0:0	2	sf_idx
op	4:60	0:0	2	[
water	4:61	0:0	2	0
op	4:62	0:0	2	]
op	4:64	0:0	2	-
water	4:66	0:0	2	NOISE_OFFSET
decl	5:4	5:34	2	int	off_is
op	5:15	0:0	2	=
water	5:17	0:0	2	0
water	5:18	0:0	2	,
decl	5:4	5:34	2	int	noise_flag
op	5:31	0:0	2	=
water	5:33	0:0	2	1
decl	6:4	6:12	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	w
for	7:4	30:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	7:9	7:14	3	w = 0 ;
water	7:9	0:0	4	w
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:29	3	w < sce -> ics . num_windows
water	7:16	0:0	4	w
op	7:18	0:0	4	<
water	7:20	0:0	4	sce
op	7:23	0:0	4	->
water	7:25	0:0	4	ics
op	7:28	0:0	4	.
water	7:29	0:0	4	num_windows
forexpr	7:42	7:67	3	w += sce -> ics . group_len [ w ]
water	7:42	0:0	4	w
op	7:44	0:0	4	+=
water	7:47	0:0	4	sce
op	7:50	0:0	4	->
water	7:52	0:0	4	ics
op	7:55	0:0	4	.
water	7:56	0:0	4	group_len
op	7:65	0:0	4	[
water	7:66	0:0	4	w
op	7:67	0:0	4	]
stmts	7:70	30:4	3	
water	7:70	0:0	4	{
for	8:8	29:8	4	(i = 0 ;i < sce -> ics . max_sfb;i ++)
forinit	8:13	8:18	5	i = 0 ;
water	8:13	0:0	6	i
op	8:15	0:0	6	=
water	8:17	0:0	6	0
water	8:18	0:0	6	;
cond	8:20	8:33	5	i < sce -> ics . max_sfb
water	8:20	0:0	6	i
op	8:22	0:0	6	<
water	8:24	0:0	6	sce
op	8:27	0:0	6	->
water	8:29	0:0	6	ics
op	8:32	0:0	6	.
water	8:33	0:0	6	max_sfb
forexpr	8:42	8:43	5	i ++
water	8:42	0:0	6	i
op	8:43	0:0	6	++
stmts	8:47	29:8	5	
water	8:47	0:0	6	{
if	9:12	28:12	6	(! sce -> zeroes [ w * 16 + i ])
cond	9:16	9:37	7	! sce -> zeroes [ w * 16 + i ]
op	9:16	0:0	8	!
water	9:17	0:0	8	sce
op	9:20	0:0	8	->
water	9:22	0:0	8	zeroes
op	9:28	0:0	8	[
water	9:29	0:0	8	w
op	9:30	0:0	8	*
water	9:31	0:0	8	16
op	9:34	0:0	8	+
water	9:36	0:0	8	i
op	9:37	0:0	8	]
stmts	9:40	28:12	7	
water	9:40	0:0	8	{
if	10:16	17:16	8	(sce -> band_type [ w * 16 + i ] == NOISE_BT)
cond	10:20	10:48	9	sce -> band_type [ w * 16 + i ] == NOISE_BT
water	10:20	0:0	10	sce
op	10:23	0:0	10	->
water	10:25	0:0	10	band_type
op	10:34	0:0	10	[
water	10:35	0:0	10	w
op	10:36	0:0	10	*
water	10:37	0:0	10	16
op	10:40	0:0	10	+
water	10:42	0:0	10	i
op	10:43	0:0	10	]
op	10:45	0:0	10	==
water	10:48	0:0	10	NOISE_BT
stmts	10:58	17:16	9	
water	10:58	0:0	10	{
water	11:20	0:0	10	diff
op	11:25	0:0	10	=
water	11:27	0:0	10	sce
op	11:30	0:0	10	->
water	11:32	0:0	10	sf_idx
op	11:38	0:0	10	[
water	11:39	0:0	10	w
op	11:40	0:0	10	*
water	11:41	0:0	10	16
op	11:44	0:0	10	+
water	11:46	0:0	10	i
op	11:47	0:0	10	]
op	11:49	0:0	10	-
water	11:51	0:0	10	off_pns
water	11:58	0:0	10	;
water	12:20	0:0	10	off_pns
op	12:28	0:0	10	=
water	12:30	0:0	10	sce
op	12:33	0:0	10	->
water	12:35	0:0	10	sf_idx
op	12:41	0:0	10	[
water	12:42	0:0	10	w
op	12:43	0:0	10	*
water	12:44	0:0	10	16
op	12:47	0:0	10	+
water	12:49	0:0	10	i
op	12:50	0:0	10	]
water	12:51	0:0	10	;
if	13:20	16:20	10	(noise_flag -- > 0)
cond	13:24	13:39	11	noise_flag -- > 0
water	13:24	0:0	12	noise_flag
op	13:34	0:0	12	--
op	13:37	0:0	12	>
water	13:39	0:0	12	0
stmts	13:42	16:20	11	
water	13:42	0:0	12	{
call	14:24	14:73	12	put_bits
arg	14:33	14:39	13	&s->pb
op	14:33	0:0	14	&
water	14:34	0:0	14	s
op	14:35	0:0	14	->
water	14:37	0:0	14	pb
arg	14:41	14:55	13	NOISE_PRE_BITS
water	14:41	0:0	14	NOISE_PRE_BITS
arg	14:57	14:73	13	diff+NOISE_PRE
water	14:57	0:0	14	diff
op	14:62	0:0	14	+
water	14:64	0:0	14	NOISE_PRE
water	14:74	0:0	12	;
continue	15:24	15:32	12	
water	16:20	0:0	12	}
water	17:16	0:0	10	}
else	17:18	21:16	8
stmts	17:23	21:16	9	
if	17:23	21:16	10	(sce -> band_type [ w * 16 + i ] == INTENSITY_BT || sce -> band_type [ w * 16 + i ] == INTENSITY_BT2)
cond	17:27	18:55	11	sce -> band_type [ w * 16 + i ] == INTENSITY_BT || sce -> band_type [ w * 16 + i ] == INTENSITY_BT2
water	17:27	0:0	12	sce
op	17:30	0:0	12	->
water	17:32	0:0	12	band_type
op	17:41	0:0	12	[
water	17:42	0:0	12	w
op	17:43	0:0	12	*
water	17:44	0:0	12	16
op	17:47	0:0	12	+
water	17:49	0:0	12	i
op	17:50	0:0	12	]
op	17:52	0:0	12	==
water	17:55	0:0	12	INTENSITY_BT
op	17:69	0:0	12	||
water	18:27	0:0	12	sce
op	18:30	0:0	12	->
water	18:32	0:0	12	band_type
op	18:41	0:0	12	[
water	18:42	0:0	12	w
op	18:43	0:0	12	*
water	18:44	0:0	12	16
op	18:47	0:0	12	+
water	18:49	0:0	12	i
op	18:50	0:0	12	]
op	18:52	0:0	12	==
water	18:55	0:0	12	INTENSITY_BT2
stmts	18:70	21:16	11	
water	18:70	0:0	12	{
water	19:20	0:0	12	diff
op	19:25	0:0	12	=
water	19:27	0:0	12	sce
op	19:30	0:0	12	->
water	19:32	0:0	12	sf_idx
op	19:38	0:0	12	[
water	19:39	0:0	12	w
op	19:40	0:0	12	*
water	19:41	0:0	12	16
op	19:44	0:0	12	+
water	19:46	0:0	12	i
op	19:47	0:0	12	]
op	19:49	0:0	12	-
water	19:51	0:0	12	off_is
water	19:57	0:0	12	;
water	20:20	0:0	12	off_is
op	20:27	0:0	12	=
water	20:29	0:0	12	sce
op	20:32	0:0	12	->
water	20:34	0:0	12	sf_idx
op	20:40	0:0	12	[
water	20:41	0:0	12	w
op	20:42	0:0	12	*
water	20:43	0:0	12	16
op	20:46	0:0	12	+
water	20:48	0:0	12	i
op	20:49	0:0	12	]
water	20:50	0:0	12	;
water	21:16	0:0	12	}
else	21:18	24:16	8
stmts	21:23	24:16	9	
water	21:23	0:0	10	{
water	22:20	0:0	10	diff
op	22:25	0:0	10	=
water	22:27	0:0	10	sce
op	22:30	0:0	10	->
water	22:32	0:0	10	sf_idx
op	22:38	0:0	10	[
water	22:39	0:0	10	w
op	22:40	0:0	10	*
water	22:41	0:0	10	16
op	22:44	0:0	10	+
water	22:46	0:0	10	i
op	22:47	0:0	10	]
op	22:49	0:0	10	-
water	22:51	0:0	10	off_sf
water	22:57	0:0	10	;
water	23:20	0:0	10	off_sf
op	23:27	0:0	10	=
water	23:29	0:0	10	sce
op	23:32	0:0	10	->
water	23:34	0:0	10	sf_idx
op	23:40	0:0	10	[
water	23:41	0:0	10	w
op	23:42	0:0	10	*
water	23:43	0:0	10	16
op	23:46	0:0	10	+
water	23:48	0:0	10	i
op	23:49	0:0	10	]
water	23:50	0:0	10	;
water	24:16	0:0	10	}
water	25:16	0:0	8	diff
op	25:21	0:0	8	+=
water	25:24	0:0	8	SCALE_DIFF_ZERO
water	25:39	0:0	8	;
call	26:16	26:51	8	av_assert0
arg	26:27	26:51	9	diff>=0&&diff<=120
water	26:27	0:0	10	diff
op	26:32	0:0	10	>=
water	26:35	0:0	10	0
op	26:37	0:0	10	&&
water	26:40	0:0	10	diff
op	26:45	0:0	10	<=
water	26:48	0:0	10	120
water	26:52	0:0	8	;
call	27:16	27:93	8	put_bits
arg	27:25	27:31	9	&s->pb
op	27:25	0:0	10	&
water	27:26	0:0	10	s
op	27:27	0:0	10	->
water	27:29	0:0	10	pb
arg	27:33	27:62	9	ff_aac_scalefactor_bits[diff]
water	27:33	0:0	10	ff_aac_scalefactor_bits
op	27:56	0:0	10	[
water	27:57	0:0	10	diff
op	27:61	0:0	10	]
arg	27:64	27:93	9	ff_aac_scalefactor_code[diff]
water	27:64	0:0	10	ff_aac_scalefactor_code
op	27:87	0:0	10	[
water	27:88	0:0	10	diff
op	27:92	0:0	10	]
water	27:94	0:0	8	;
water	28:12	0:0	8	}
water	29:8	0:0	6	}
water	30:4	0:0	4	}
