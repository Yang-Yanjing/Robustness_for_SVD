func	1:0	52:0	0	static int	latm_decode_frame
params	1:28	0:0	1	
param	1:29	1:50	2	AVCodecContext *	avctx
param	1:52	1:61	2	void *	out
param	2:29	2:47	2	int *	got_frame_ptr
param	2:49	2:64	2	AVPacket *	avpkt
stmnts	0:0	51:20	1	
decl	4:4	4:50	2	struct LATMContext	*latmctx
op	4:32	0:0	2	=
water	4:34	0:0	2	avctx
op	4:39	0:0	2	->
water	4:41	0:0	2	priv_data
decl	5:4	5:38	2	int	muxlength
water	5:33	0:0	2	,
decl	5:4	5:38	2	int	err
decl	6:4	6:26	2	GetBitContext	gb
if	7:4	8:18	2	(( err =init_get_bits8 (& gb ,avpkt -> data ,avpkt -> size ) ) < 0)
cond	7:8	7:64	3	( err =init_get_bits8 (& gb ,avpkt -> data ,avpkt -> size ) ) < 0
water	7:8	0:0	4	(
water	7:9	0:0	4	err
op	7:13	0:0	4	=
call	7:15	7:59	4	init_get_bits8
arg	7:30	7:33	5	&gb
op	7:30	0:0	6	&
water	7:31	0:0	6	gb
arg	7:35	7:46	5	avpkt->data
water	7:35	0:0	6	avpkt
op	7:40	0:0	6	->
water	7:42	0:0	6	data
arg	7:48	7:59	5	avpkt->size
water	7:48	0:0	6	avpkt
op	7:53	0:0	6	->
water	7:55	0:0	6	size
water	7:60	0:0	4	)
op	7:62	0:0	4	<
water	7:64	0:0	4	0
stmts	8:8	8:18	3	
return	8:8	8:18	4	err
water	8:15	0:0	5	err
if	10:4	11:34	2	(get_bits (& gb ,11 ) != LOAS_SYNC_WORD)
cond	10:8	10:29	3	get_bits (& gb ,11 ) != LOAS_SYNC_WORD
call	10:8	10:24	4	get_bits
arg	10:17	10:20	5	&gb
op	10:17	0:0	6	&
water	10:18	0:0	6	gb
arg	10:22	10:24	5	11
water	10:22	0:0	6	11
op	10:26	0:0	4	!=
water	10:29	0:0	4	LOAS_SYNC_WORD
stmts	11:8	11:34	3	
return	11:8	11:34	4	AVERROR_INVALIDDATA
water	11:15	0:0	5	AVERROR_INVALIDDATA
water	12:4	0:0	2	muxlength
op	12:14	0:0	2	=
call	12:16	12:32	2	get_bits
arg	12:25	12:28	3	&gb
op	12:25	0:0	4	&
water	12:26	0:0	4	gb
arg	12:30	12:32	3	13
water	12:30	0:0	4	13
op	12:34	0:0	2	+
water	12:36	0:0	2	3
water	12:37	0:0	2	;
if	14:4	15:34	2	(muxlength > avpkt -> size)
cond	14:8	14:27	3	muxlength > avpkt -> size
water	14:8	0:0	4	muxlength
op	14:18	0:0	4	>
water	14:20	0:0	4	avpkt
op	14:25	0:0	4	->
water	14:27	0:0	4	size
stmts	15:8	15:34	3	
return	15:8	15:34	4	AVERROR_INVALIDDATA
water	15:15	0:0	5	AVERROR_INVALIDDATA
if	16:4	17:18	2	(( err =read_audio_mux_element (latmctx ,& gb ) ) < 0)
cond	16:8	16:55	3	( err =read_audio_mux_element (latmctx ,& gb ) ) < 0
water	16:8	0:0	4	(
water	16:9	0:0	4	err
op	16:13	0:0	4	=
call	16:15	16:50	4	read_audio_mux_element
arg	16:38	16:45	5	latmctx
water	16:38	0:0	6	latmctx
arg	16:47	16:50	5	&gb
op	16:47	0:0	6	&
water	16:48	0:0	6	gb
water	16:51	0:0	4	)
op	16:53	0:0	4	<
water	16:55	0:0	4	0
stmts	17:8	17:18	3	
return	17:8	17:18	4	err
water	17:15	0:0	5	err
if	18:4	32:4	2	(! latmctx -> initialized)
cond	18:8	18:18	3	! latmctx -> initialized
op	18:8	0:0	4	!
water	18:9	0:0	4	latmctx
op	18:16	0:0	4	->
water	18:18	0:0	4	initialized
stmts	18:31	32:4	3	
water	18:31	0:0	4	{
if	19:8	22:8	4	(! avctx -> extradata)
cond	19:12	19:20	5	! avctx -> extradata
op	19:12	0:0	6	!
water	19:13	0:0	6	avctx
op	19:18	0:0	6	->
water	19:20	0:0	6	extradata
stmts	19:31	22:8	5	
water	19:31	0:0	6	{
op	20:12	0:0	6	*
water	20:13	0:0	6	got_frame_ptr
op	20:27	0:0	6	=
water	20:29	0:0	6	0
water	20:30	0:0	6	;
return	21:12	21:30	6	avpkt->size
water	21:19	0:0	7	avpkt
op	21:24	0:0	7	->
water	21:26	0:0	7	size
water	22:8	0:0	6	}
else	22:10	31:8	4
stmts	22:15	31:8	5	
water	22:15	0:0	6	{
call	23:12	23:55	6	push_output_configuration
arg	23:38	23:55	7	&latmctx->aac_ctx
op	23:38	0:0	8	&
water	23:39	0:0	8	latmctx
op	23:46	0:0	8	->
water	23:48	0:0	8	aac_ctx
water	23:56	0:0	6	;
if	24:12	29:12	6	(( err =decode_audio_specific_config (& latmctx -> aac_ctx ,avctx ,& latmctx -> aac_ctx . oc [ 1 ] . m4ac ,avctx -> extradata ,avctx -> extradata_size * 8 LL ,1 ) ) < 0)
cond	24:16	26:71	7	( err =decode_audio_specific_config (& latmctx -> aac_ctx ,avctx ,& latmctx -> aac_ctx . oc [ 1 ] . m4ac ,avctx -> extradata ,avctx -> extradata_size * 8 LL ,1 ) ) < 0
water	24:16	0:0	8	(
water	24:17	0:0	8	err
op	24:21	0:0	8	=
call	24:23	26:66	8	decode_audio_specific_config
arg	25:20	25:37	9	&latmctx->aac_ctx
op	25:20	0:0	10	&
water	25:21	0:0	10	latmctx
op	25:28	0:0	10	->
water	25:30	0:0	10	aac_ctx
arg	25:39	25:44	9	avctx
water	25:39	0:0	10	avctx
arg	25:46	25:74	9	&latmctx->aac_ctx.oc[1].m4ac
op	25:46	0:0	10	&
water	25:47	0:0	10	latmctx
op	25:54	0:0	10	->
water	25:56	0:0	10	aac_ctx
op	25:63	0:0	10	.
water	25:64	0:0	10	oc
op	25:66	0:0	10	[
water	25:67	0:0	10	1
op	25:68	0:0	10	]
op	25:69	0:0	10	.
water	25:70	0:0	10	m4ac
arg	26:20	26:36	9	avctx->extradata
water	26:20	0:0	10	avctx
op	26:25	0:0	10	->
water	26:27	0:0	10	extradata
arg	26:38	26:63	9	avctx->extradata_size*8LL
water	26:38	0:0	10	avctx
op	26:43	0:0	10	->
water	26:45	0:0	10	extradata_size
op	26:59	0:0	10	*
water	26:60	0:0	10	8
water	26:61	0:0	10	LL
arg	26:65	26:66	9	1
water	26:65	0:0	10	1
water	26:67	0:0	8	)
op	26:69	0:0	8	<
water	26:71	0:0	8	0
stmts	26:74	29:12	7	
water	26:74	0:0	8	{
call	27:16	27:58	8	pop_output_configuration
arg	27:41	27:58	9	&latmctx->aac_ctx
op	27:41	0:0	10	&
water	27:42	0:0	10	latmctx
op	27:49	0:0	10	->
water	27:51	0:0	10	aac_ctx
water	27:59	0:0	8	;
return	28:16	28:26	8	err
water	28:23	0:0	9	err
water	29:12	0:0	8	}
water	30:12	0:0	6	latmctx
op	30:19	0:0	6	->
water	30:21	0:0	6	initialized
op	30:33	0:0	6	=
water	30:35	0:0	6	1
water	30:36	0:0	6	;
water	31:8	0:0	6	}
water	32:4	0:0	4	}
if	33:4	38:4	2	(show_bits (& gb ,12 ) == 0 xfff)
cond	33:8	33:31	3	show_bits (& gb ,12 ) == 0 xfff
call	33:8	33:25	4	show_bits
arg	33:18	33:21	5	&gb
op	33:18	0:0	6	&
water	33:19	0:0	6	gb
arg	33:23	33:25	5	12
water	33:23	0:0	6	12
op	33:27	0:0	4	==
water	33:30	0:0	4	0
water	33:31	0:0	4	xfff
stmts	33:37	38:4	3	
water	33:37	0:0	4	{
call	34:8	36:29	4	av_log
arg	34:15	34:37	5	latmctx->aac_ctx.avctx
water	34:15	0:0	6	latmctx
op	34:22	0:0	6	->
water	34:24	0:0	6	aac_ctx
op	34:31	0:0	6	.
water	34:32	0:0	6	avctx
arg	34:39	34:51	5	AV_LOG_ERROR
water	34:39	0:0	6	AV_LOG_ERROR
arg	35:15	36:29	5	"ADTS header detected, probably as result of configuration ""misparsing\n"
water	35:15	0:0	6	"ADTS header detected, probably as result of configuration "
water	36:15	0:0	6	"misparsing\n"
water	36:30	0:0	4	;
return	37:8	37:34	4	AVERROR_INVALIDDATA
water	37:15	0:0	5	AVERROR_INVALIDDATA
water	38:4	0:0	4	}
switch	39:4	48:4	2	(latmctx -> aac_ctx . oc [ 1 ] . m4ac . object_type)
cond	39:12	39:40	3	latmctx -> aac_ctx . oc [ 1 ] . m4ac . object_type
water	39:12	0:0	4	latmctx
op	39:19	0:0	4	->
water	39:21	0:0	4	aac_ctx
op	39:28	0:0	4	.
water	39:29	0:0	4	oc
op	39:31	0:0	4	[
water	39:32	0:0	4	1
op	39:33	0:0	4	]
op	39:34	0:0	4	.
water	39:35	0:0	4	m4ac
op	39:39	0:0	4	.
water	39:40	0:0	4	object_type
stmts	39:53	48:4	3	
water	39:53	0:0	4	{
label	40:4	40:22	4	case AOT_ER_AAC_LC :
label	41:4	41:23	4	case AOT_ER_AAC_LTP :
label	42:4	42:22	4	case AOT_ER_AAC_LD :
label	43:4	43:23	4	case AOT_ER_AAC_ELD :
water	44:8	0:0	4	err
op	44:12	0:0	4	=
call	44:14	44:64	4	aac_decode_er_frame
arg	44:34	44:39	5	avctx
water	44:34	0:0	6	avctx
arg	44:41	44:44	5	out
water	44:41	0:0	6	out
arg	44:46	44:59	5	got_frame_ptr
water	44:46	0:0	6	got_frame_ptr
arg	44:61	44:64	5	&gb
op	44:61	0:0	6	&
water	44:62	0:0	6	gb
water	44:65	0:0	4	;
break	45:8	45:13	4	
label	46:4	46:11	4	default :
water	47:8	0:0	4	err
op	47:12	0:0	4	=
call	47:14	47:72	4	aac_decode_frame_int
arg	47:35	47:40	5	avctx
water	47:35	0:0	6	avctx
arg	47:42	47:45	5	out
water	47:42	0:0	6	out
arg	47:47	47:60	5	got_frame_ptr
water	47:47	0:0	6	got_frame_ptr
arg	47:62	47:65	5	&gb
op	47:62	0:0	6	&
water	47:63	0:0	6	gb
arg	47:67	47:72	5	avpkt
water	47:67	0:0	6	avpkt
water	47:73	0:0	4	;
water	48:4	0:0	4	}
if	49:4	50:18	2	(err < 0)
cond	49:8	49:14	3	err < 0
water	49:8	0:0	4	err
op	49:12	0:0	4	<
water	49:14	0:0	4	0
stmts	50:8	50:18	3	
return	50:8	50:18	4	err
water	50:15	0:0	5	err
return	51:4	51:20	2	muxlength
water	51:11	0:0	3	muxlength
