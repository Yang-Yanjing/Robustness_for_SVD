func	1:0	56:0	0	static int	mov_write_moov_tag
params	1:29	0:0	1	
param	1:30	1:45	2	AVIOContext *	pb
param	1:47	1:65	2	MOVMuxContext *	mov
param	2:30	2:48	2	AVFormatContext *	s
stmnts	0:0	55:31	1	
decl	4:4	4:9	2	int	i
decl	5:4	5:31	2	int64_t	pos
op	5:16	0:0	2	=
call	5:18	5:30	3	avio_tell
arg	5:28	5:30	4	pb
water	5:28	0:0	5	pb
call	6:4	6:19	2	avio_wb32
arg	6:14	6:16	3	pb
water	6:14	0:0	4	pb
arg	6:18	6:19	3	0
water	6:18	0:0	4	0
water	6:20	0:0	2	;
call	7:4	7:27	2	ffio_wfourcc
arg	7:17	7:19	3	pb
water	7:17	0:0	4	pb
arg	7:21	7:27	3	"moov"
water	7:21	0:0	4	"moov"
water	7:28	0:0	2	;
for	8:4	15:4	2	(i = 0 ;i < mov -> nb_streams;i ++)
forinit	8:9	8:14	3	i = 0 ;
water	8:9	0:0	4	i
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:25	3	i < mov -> nb_streams
water	8:16	0:0	4	i
op	8:18	0:0	4	<
water	8:20	0:0	4	mov
op	8:23	0:0	4	->
water	8:25	0:0	4	nb_streams
forexpr	8:37	8:38	3	i ++
water	8:37	0:0	4	i
op	8:38	0:0	4	++
stmts	8:42	15:4	3	
water	8:42	0:0	4	{
if	9:8	10:20	4	(mov -> tracks [ i ] . entry <= 0 && ! ( mov -> flags & FF_MOV_FLAG_FRAGMENT ))
cond	9:12	9:76	5	mov -> tracks [ i ] . entry <= 0 && ! ( mov -> flags & FF_MOV_FLAG_FRAGMENT )
water	9:12	0:0	6	mov
op	9:15	0:0	6	->
water	9:17	0:0	6	tracks
op	9:23	0:0	6	[
water	9:24	0:0	6	i
op	9:25	0:0	6	]
op	9:26	0:0	6	.
water	9:27	0:0	6	entry
op	9:33	0:0	6	<=
water	9:36	0:0	6	0
op	9:38	0:0	6	&&
op	9:41	0:0	6	!
water	9:42	0:0	6	(
water	9:43	0:0	6	mov
op	9:46	0:0	6	->
water	9:48	0:0	6	flags
op	9:54	0:0	6	&
water	9:56	0:0	6	FF_MOV_FLAG_FRAGMENT
water	9:76	0:0	6	)
stmts	10:12	10:20	5	
continue	10:12	10:20	6	
water	11:8	0:0	4	mov
op	11:11	0:0	4	->
water	11:13	0:0	4	tracks
op	11:19	0:0	4	[
water	11:20	0:0	4	i
op	11:21	0:0	4	]
op	11:22	0:0	4	.
water	11:23	0:0	4	time
op	11:32	0:0	4	=
water	11:34	0:0	4	mov
op	11:37	0:0	4	->
water	11:39	0:0	4	time
water	11:43	0:0	4	;
water	12:8	0:0	4	mov
op	12:11	0:0	4	->
water	12:13	0:0	4	tracks
op	12:19	0:0	4	[
water	12:20	0:0	4	i
op	12:21	0:0	4	]
op	12:22	0:0	4	.
water	12:23	0:0	4	track_id
op	12:32	0:0	4	=
water	12:34	0:0	4	i
op	12:36	0:0	4	+
water	12:38	0:0	4	1
water	12:39	0:0	4	;
if	13:8	14:41	4	(mov -> tracks [ i ] . entry)
cond	13:12	13:27	5	mov -> tracks [ i ] . entry
water	13:12	0:0	6	mov
op	13:15	0:0	6	->
water	13:17	0:0	6	tracks
op	13:23	0:0	6	[
water	13:24	0:0	6	i
op	13:25	0:0	6	]
op	13:26	0:0	6	.
water	13:27	0:0	6	entry
stmts	14:12	14:41	5	
call	14:12	14:40	6	build_chunks
arg	14:25	14:40	7	&mov->tracks[i]
op	14:25	0:0	8	&
water	14:26	0:0	8	mov
op	14:29	0:0	8	->
water	14:31	0:0	8	tracks
op	14:37	0:0	8	[
water	14:38	0:0	8	i
op	14:39	0:0	8	]
water	14:41	0:0	6	;
water	15:4	0:0	4	}
if	16:4	20:8	2	(mov -> chapter_track)
cond	16:8	16:13	3	mov -> chapter_track
water	16:8	0:0	4	mov
op	16:11	0:0	4	->
water	16:13	0:0	4	chapter_track
stmts	17:8	20:8	3	
for	17:8	20:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	17:13	17:18	5	i = 0 ;
water	17:13	0:0	6	i
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:27	5	i < s -> nb_streams
water	17:20	0:0	6	i
op	17:22	0:0	6	<
water	17:24	0:0	6	s
op	17:25	0:0	6	->
water	17:27	0:0	6	nb_streams
forexpr	17:39	17:40	5	i ++
water	17:39	0:0	6	i
op	17:40	0:0	6	++
stmts	17:44	20:8	5	
water	17:44	0:0	6	{
water	18:12	0:0	6	mov
op	18:15	0:0	6	->
water	18:17	0:0	6	tracks
op	18:23	0:0	6	[
water	18:24	0:0	6	i
op	18:25	0:0	6	]
op	18:26	0:0	6	.
water	18:27	0:0	6	tref_tag
op	18:36	0:0	6	=
call	18:38	18:59	6	MKTAG
arg	18:44	18:47	7	'c'
water	18:44	0:0	8	'c'
arg	18:48	18:51	7	'h'
water	18:48	0:0	8	'h'
arg	18:52	18:55	7	'a'
water	18:52	0:0	8	'a'
arg	18:56	18:59	7	'p'
water	18:56	0:0	8	'p'
water	18:60	0:0	6	;
water	19:12	0:0	6	mov
op	19:15	0:0	6	->
water	19:17	0:0	6	tracks
op	19:23	0:0	6	[
water	19:24	0:0	6	i
op	19:25	0:0	6	]
op	19:26	0:0	6	.
water	19:27	0:0	6	tref_id
op	19:36	0:0	6	=
water	19:38	0:0	6	mov
op	19:41	0:0	6	->
water	19:43	0:0	6	tracks
op	19:49	0:0	6	[
water	19:50	0:0	6	mov
op	19:53	0:0	6	->
water	19:55	0:0	6	chapter_track
op	19:68	0:0	6	]
op	19:69	0:0	6	.
water	19:70	0:0	6	track_id
water	19:78	0:0	6	;
water	20:8	0:0	6	}
for	21:4	27:4	2	(i = 0 ;i < mov -> nb_streams;i ++)
forinit	21:9	21:14	3	i = 0 ;
water	21:9	0:0	4	i
op	21:11	0:0	4	=
water	21:13	0:0	4	0
water	21:14	0:0	4	;
cond	21:16	21:25	3	i < mov -> nb_streams
water	21:16	0:0	4	i
op	21:18	0:0	4	<
water	21:20	0:0	4	mov
op	21:23	0:0	4	->
water	21:25	0:0	4	nb_streams
forexpr	21:37	21:38	3	i ++
water	21:37	0:0	4	i
op	21:38	0:0	4	++
stmts	21:42	27:4	3	
water	21:42	0:0	4	{
if	22:8	26:8	4	(mov -> tracks [ i ] . tag ==MKTAG ('r' ,'t' ,'p' ,' ' ))
cond	22:12	22:55	5	mov -> tracks [ i ] . tag ==MKTAG ('r' ,'t' ,'p' ,' ' )
water	22:12	0:0	6	mov
op	22:15	0:0	6	->
water	22:17	0:0	6	tracks
op	22:23	0:0	6	[
water	22:24	0:0	6	i
op	22:25	0:0	6	]
op	22:26	0:0	6	.
water	22:27	0:0	6	tag
op	22:31	0:0	6	==
call	22:34	22:55	6	MKTAG
arg	22:40	22:43	7	'r'
water	22:40	0:0	8	'r'
arg	22:44	22:47	7	't'
water	22:44	0:0	8	't'
arg	22:48	22:51	7	'p'
water	22:48	0:0	8	'p'
arg	22:52	22:55	7	' '
water	22:52	0:0	8	' '
stmts	22:58	26:8	5	
water	22:58	0:0	6	{
water	23:12	0:0	6	mov
op	23:15	0:0	6	->
water	23:17	0:0	6	tracks
op	23:23	0:0	6	[
water	23:24	0:0	6	i
op	23:25	0:0	6	]
op	23:26	0:0	6	.
water	23:27	0:0	6	tref_tag
op	23:36	0:0	6	=
call	23:38	23:59	6	MKTAG
arg	23:44	23:47	7	'h'
water	23:44	0:0	8	'h'
arg	23:48	23:51	7	'i'
water	23:48	0:0	8	'i'
arg	23:52	23:55	7	'n'
water	23:52	0:0	8	'n'
arg	23:56	23:59	7	't'
water	23:56	0:0	8	't'
water	23:60	0:0	6	;
water	24:12	0:0	6	mov
op	24:15	0:0	6	->
water	24:17	0:0	6	tracks
op	24:23	0:0	6	[
water	24:24	0:0	6	i
op	24:25	0:0	6	]
op	24:26	0:0	6	.
water	24:27	0:0	6	tref_id
op	24:35	0:0	6	=
water	25:16	0:0	6	mov
op	25:19	0:0	6	->
water	25:21	0:0	6	tracks
op	25:27	0:0	6	[
water	25:28	0:0	6	mov
op	25:31	0:0	6	->
water	25:33	0:0	6	tracks
op	25:39	0:0	6	[
water	25:40	0:0	6	i
op	25:41	0:0	6	]
op	25:42	0:0	6	.
water	25:43	0:0	6	src_track
op	25:52	0:0	6	]
op	25:53	0:0	6	.
water	25:54	0:0	6	track_id
water	25:62	0:0	6	;
water	26:8	0:0	6	}
water	27:4	0:0	4	}
for	28:4	38:4	2	(i = 0 ;i < mov -> nb_streams;i ++)
forinit	28:9	28:14	3	i = 0 ;
water	28:9	0:0	4	i
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:25	3	i < mov -> nb_streams
water	28:16	0:0	4	i
op	28:18	0:0	4	<
water	28:20	0:0	4	mov
op	28:23	0:0	4	->
water	28:25	0:0	4	nb_streams
forexpr	28:37	28:38	3	i ++
water	28:37	0:0	4	i
op	28:38	0:0	4	++
stmts	28:42	38:4	3	
water	28:42	0:0	4	{
if	29:8	37:8	4	(mov -> tracks [ i ] . tag ==MKTAG ('t' ,'m' ,'c' ,'d' ))
cond	29:12	29:55	5	mov -> tracks [ i ] . tag ==MKTAG ('t' ,'m' ,'c' ,'d' )
water	29:12	0:0	6	mov
op	29:15	0:0	6	->
water	29:17	0:0	6	tracks
op	29:23	0:0	6	[
water	29:24	0:0	6	i
op	29:25	0:0	6	]
op	29:26	0:0	6	.
water	29:27	0:0	6	tag
op	29:31	0:0	6	==
call	29:34	29:55	6	MKTAG
arg	29:40	29:43	7	't'
water	29:40	0:0	8	't'
arg	29:44	29:47	7	'm'
water	29:44	0:0	8	'm'
arg	29:48	29:51	7	'c'
water	29:48	0:0	8	'c'
arg	29:52	29:55	7	'd'
water	29:52	0:0	8	'd'
stmts	29:58	37:8	5	
water	29:58	0:0	6	{
decl	30:12	30:50	6	int	src_trk
op	30:24	0:0	6	=
water	30:26	0:0	6	mov
op	30:29	0:0	6	->
water	30:31	0:0	6	tracks
op	30:37	0:0	6	[
water	30:38	0:0	6	i
op	30:39	0:0	6	]
op	30:40	0:0	6	.
water	30:41	0:0	6	src_track
water	31:12	0:0	6	mov
op	31:15	0:0	6	->
water	31:17	0:0	6	tracks
op	31:23	0:0	6	[
water	31:24	0:0	6	src_trk
op	31:31	0:0	6	]
op	31:32	0:0	6	.
water	31:33	0:0	6	tref_tag
op	31:42	0:0	6	=
water	31:44	0:0	6	mov
op	31:47	0:0	6	->
water	31:49	0:0	6	tracks
op	31:55	0:0	6	[
water	31:56	0:0	6	i
op	31:57	0:0	6	]
op	31:58	0:0	6	.
water	31:59	0:0	6	tag
water	31:62	0:0	6	;
water	32:12	0:0	6	mov
op	32:15	0:0	6	->
water	32:17	0:0	6	tracks
op	32:23	0:0	6	[
water	32:24	0:0	6	src_trk
op	32:31	0:0	6	]
op	32:32	0:0	6	.
water	32:33	0:0	6	tref_id
op	32:42	0:0	6	=
water	32:44	0:0	6	mov
op	32:47	0:0	6	->
water	32:49	0:0	6	tracks
op	32:55	0:0	6	[
water	32:56	0:0	6	i
op	32:57	0:0	6	]
op	32:58	0:0	6	.
water	32:59	0:0	6	track_id
water	32:67	0:0	6	;
water	34:12	0:0	6	mov
op	34:15	0:0	6	->
water	34:17	0:0	6	tracks
op	34:23	0:0	6	[
water	34:24	0:0	6	i
op	34:25	0:0	6	]
op	34:26	0:0	6	.
water	34:27	0:0	6	track_duration
op	34:42	0:0	6	=
call	34:44	36:85	6	av_rescale
arg	34:55	34:90	7	mov->tracks[src_trk].track_duration
water	34:55	0:0	8	mov
op	34:58	0:0	8	->
water	34:60	0:0	8	tracks
op	34:66	0:0	8	[
water	34:67	0:0	8	src_trk
op	34:74	0:0	8	]
op	34:75	0:0	8	.
water	34:76	0:0	8	track_duration
arg	35:55	35:79	7	mov->tracks[i].timescale
water	35:55	0:0	8	mov
op	35:58	0:0	8	->
water	35:60	0:0	8	tracks
op	35:66	0:0	8	[
water	35:67	0:0	8	i
op	35:68	0:0	8	]
op	35:69	0:0	8	.
water	35:70	0:0	8	timescale
arg	36:55	36:85	7	mov->tracks[src_trk].timescale
water	36:55	0:0	8	mov
op	36:58	0:0	8	->
water	36:60	0:0	8	tracks
op	36:66	0:0	8	[
water	36:67	0:0	8	src_trk
op	36:74	0:0	8	]
op	36:75	0:0	8	.
water	36:76	0:0	8	timescale
water	36:86	0:0	6	;
water	37:8	0:0	6	}
water	38:4	0:0	4	}
call	39:4	39:30	2	mov_write_mvhd_tag
arg	39:23	39:25	3	pb
water	39:23	0:0	4	pb
arg	39:27	39:30	3	mov
water	39:27	0:0	4	mov
water	39:31	0:0	2	;
if	40:4	41:35	2	(mov -> mode != MODE_MOV && ! mov -> iods_skip)
cond	40:8	40:39	3	mov -> mode != MODE_MOV && ! mov -> iods_skip
water	40:8	0:0	4	mov
op	40:11	0:0	4	->
water	40:13	0:0	4	mode
op	40:18	0:0	4	!=
water	40:21	0:0	4	MODE_MOV
op	40:30	0:0	4	&&
op	40:33	0:0	4	!
water	40:34	0:0	4	mov
op	40:37	0:0	4	->
water	40:39	0:0	4	iods_skip
stmts	41:8	41:35	3	
call	41:8	41:34	4	mov_write_iods_tag
arg	41:27	41:29	5	pb
water	41:27	0:0	6	pb
arg	41:31	41:34	5	mov
water	41:31	0:0	6	mov
water	41:35	0:0	4	;
for	42:4	48:4	2	(i = 0 ;i < mov -> nb_streams;i ++)
forinit	42:9	42:14	3	i = 0 ;
water	42:9	0:0	4	i
op	42:11	0:0	4	=
water	42:13	0:0	4	0
water	42:14	0:0	4	;
cond	42:16	42:25	3	i < mov -> nb_streams
water	42:16	0:0	4	i
op	42:18	0:0	4	<
water	42:20	0:0	4	mov
op	42:23	0:0	4	->
water	42:25	0:0	4	nb_streams
forexpr	42:37	42:38	3	i ++
water	42:37	0:0	4	i
op	42:38	0:0	4	++
stmts	42:42	48:4	3	
water	42:42	0:0	4	{
if	43:8	47:8	4	(mov -> tracks [ i ] . entry > 0 || mov -> flags & FF_MOV_FLAG_FRAGMENT)
cond	43:12	43:53	5	mov -> tracks [ i ] . entry > 0 || mov -> flags & FF_MOV_FLAG_FRAGMENT
water	43:12	0:0	6	mov
op	43:15	0:0	6	->
water	43:17	0:0	6	tracks
op	43:23	0:0	6	[
water	43:24	0:0	6	i
op	43:25	0:0	6	]
op	43:26	0:0	6	.
water	43:27	0:0	6	entry
op	43:33	0:0	6	>
water	43:35	0:0	6	0
op	43:37	0:0	6	||
water	43:40	0:0	6	mov
op	43:43	0:0	6	->
water	43:45	0:0	6	flags
op	43:51	0:0	6	&
water	43:53	0:0	6	FF_MOV_FLAG_FRAGMENT
stmts	43:75	47:8	5	
water	43:75	0:0	6	{
decl	44:12	44:110	6	int	ret
op	44:20	0:0	6	=
call	44:22	44:109	7	mov_write_trak_tag
arg	44:41	44:43	8	pb
water	44:41	0:0	9	pb
arg	44:45	44:48	8	mov
water	44:45	0:0	9	mov
arg	44:50	44:67	8	&(mov->tracks[i])
op	44:50	0:0	9	&
water	44:51	0:0	9	(
water	44:52	0:0	9	mov
op	44:55	0:0	9	->
water	44:57	0:0	9	tracks
op	44:63	0:0	9	[
water	44:64	0:0	9	i
op	44:65	0:0	9	]
water	44:66	0:0	9	)
arg	44:69	44:109	8	i<s->nb_streams?s->streams[i]:NULL
water	44:69	0:0	9	i
op	44:71	0:0	9	<
water	44:73	0:0	9	s
op	44:74	0:0	9	->
water	44:76	0:0	9	nb_streams
water	44:87	0:0	9	?
water	44:89	0:0	9	s
op	44:90	0:0	9	->
water	44:92	0:0	9	streams
op	44:99	0:0	9	[
water	44:100	0:0	9	i
op	44:101	0:0	9	]
water	44:103	0:0	9	:
water	44:105	0:0	9	NULL
if	45:12	46:26	6	(ret < 0)
cond	45:16	45:22	7	ret < 0
water	45:16	0:0	8	ret
op	45:20	0:0	8	<
water	45:22	0:0	8	0
stmts	46:16	46:26	7	
return	46:16	46:26	8	ret
water	46:23	0:0	9	ret
water	47:8	0:0	6	}
water	48:4	0:0	4	}
if	49:4	50:35	2	(mov -> flags & FF_MOV_FLAG_FRAGMENT)
cond	49:8	49:21	3	mov -> flags & FF_MOV_FLAG_FRAGMENT
water	49:8	0:0	4	mov
op	49:11	0:0	4	->
water	49:13	0:0	4	flags
op	49:19	0:0	4	&
water	49:21	0:0	4	FF_MOV_FLAG_FRAGMENT
stmts	50:8	50:35	3	
call	50:8	50:34	4	mov_write_mvex_tag
arg	50:27	50:29	5	pb
water	50:27	0:0	6	pb
arg	50:31	50:34	5	mov
water	50:31	0:0	6	mov
water	50:35	0:0	4	;
if	51:4	52:37	2	(mov -> mode == MODE_PSP)
cond	51:8	51:21	3	mov -> mode == MODE_PSP
water	51:8	0:0	4	mov
op	51:11	0:0	4	->
water	51:13	0:0	4	mode
op	51:18	0:0	4	==
water	51:21	0:0	4	MODE_PSP
stmts	52:8	52:37	3	
call	52:8	52:36	4	mov_write_uuidusmt_tag
arg	52:31	52:33	5	pb
water	52:31	0:0	6	pb
arg	52:35	52:36	5	s
water	52:35	0:0	6	s
water	52:37	0:0	4	;
else	53:4	54:38	2
stmts	54:8	54:38	3	
call	54:8	54:37	4	mov_write_udta_tag
arg	54:27	54:29	5	pb
water	54:27	0:0	6	pb
arg	54:31	54:34	5	mov
water	54:31	0:0	6	mov
arg	54:36	54:37	5	s
water	54:36	0:0	6	s
water	54:38	0:0	4	;
return	55:4	55:31	2	update_size(pb,pos)
call	55:11	55:30	3	update_size
arg	55:23	55:25	4	pb
water	55:23	0:0	5	pb
arg	55:27	55:30	4	pos
water	55:27	0:0	5	pos
