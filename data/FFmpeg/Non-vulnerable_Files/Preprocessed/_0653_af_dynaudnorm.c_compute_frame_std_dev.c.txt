func	1:0	22:0	0	static double	compute_frame_std_dev
params	1:35	0:0	1	
param	1:36	1:68	2	DynamicAudioNormalizerContext *	s
param	2:36	2:50	2	AVFrame *	frame
param	2:52	2:63	2	int	channel
stmnts	0:0	21:45	1	
decl	4:4	4:25	2	double	variance
op	4:20	0:0	2	=
water	4:22	0:0	2	0
op	4:23	0:0	2	.
water	4:24	0:0	2	0
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	c
if	6:4	14:4	2	(channel == - 1)
cond	6:8	6:20	3	channel == - 1
water	6:8	0:0	4	channel
op	6:16	0:0	4	==
op	6:19	0:0	4	-
water	6:20	0:0	4	1
stmts	6:23	14:4	3	
water	6:23	0:0	4	{
for	7:8	12:8	4	(c = 0 ;c < s -> channels;c ++)
forinit	7:13	7:18	5	c = 0 ;
water	7:13	0:0	6	c
op	7:15	0:0	6	=
water	7:17	0:0	6	0
water	7:18	0:0	6	;
cond	7:20	7:27	5	c < s -> channels
water	7:20	0:0	6	c
op	7:22	0:0	6	<
water	7:24	0:0	6	s
op	7:25	0:0	6	->
water	7:27	0:0	6	channels
forexpr	7:37	7:38	5	c ++
water	7:37	0:0	6	c
op	7:38	0:0	6	++
stmts	7:42	12:8	5	
water	7:42	0:0	6	{
decl	8:12	8:70	6	const double	*data_ptr
op	8:35	0:0	6	=
water	8:37	0:0	6	(
water	8:38	0:0	6	double
op	8:45	0:0	6	*
water	8:46	0:0	6	)
water	8:47	0:0	6	frame
op	8:52	0:0	6	->
water	8:54	0:0	6	extended_data
op	8:67	0:0	6	[
water	8:68	0:0	6	c
op	8:69	0:0	6	]
for	9:12	11:12	6	(i = 0 ;i < frame -> nb_samples;i ++)
forinit	9:17	9:22	7	i = 0 ;
water	9:17	0:0	8	i
op	9:19	0:0	8	=
water	9:21	0:0	8	0
water	9:22	0:0	8	;
cond	9:24	9:35	7	i < frame -> nb_samples
water	9:24	0:0	8	i
op	9:26	0:0	8	<
water	9:28	0:0	8	frame
op	9:33	0:0	8	->
water	9:35	0:0	8	nb_samples
forexpr	9:47	9:48	7	i ++
water	9:47	0:0	8	i
op	9:48	0:0	8	++
stmts	9:52	11:12	7	
water	9:52	0:0	8	{
water	10:16	0:0	8	variance
op	10:25	0:0	8	+=
call	10:28	10:44	8	pow2
arg	10:33	10:44	9	data_ptr[i]
water	10:33	0:0	10	data_ptr
op	10:41	0:0	10	[
water	10:42	0:0	10	i
op	10:43	0:0	10	]
water	10:45	0:0	8	;
water	11:12	0:0	8	}
water	12:8	0:0	6	}
water	13:8	0:0	4	variance
op	13:17	0:0	4	/=
water	13:20	0:0	4	(
water	13:21	0:0	4	s
op	13:22	0:0	4	->
water	13:24	0:0	4	channels
op	13:33	0:0	4	*
water	13:35	0:0	4	frame
op	13:40	0:0	4	->
water	13:42	0:0	4	nb_samples
water	13:52	0:0	4	)
op	13:54	0:0	4	-
water	13:56	0:0	4	1
water	13:57	0:0	4	;
water	14:4	0:0	4	}
else	14:6	20:4	2
stmts	14:11	20:4	3	
water	14:11	0:0	4	{
decl	15:8	15:72	4	const double	*data_ptr
op	15:31	0:0	4	=
water	15:33	0:0	4	(
water	15:34	0:0	4	double
op	15:41	0:0	4	*
water	15:42	0:0	4	)
water	15:43	0:0	4	frame
op	15:48	0:0	4	->
water	15:50	0:0	4	extended_data
op	15:63	0:0	4	[
water	15:64	0:0	4	channel
op	15:71	0:0	4	]
for	16:8	18:8	4	(i = 0 ;i < frame -> nb_samples;i ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:31	5	i < frame -> nb_samples
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	frame
op	16:29	0:0	6	->
water	16:31	0:0	6	nb_samples
forexpr	16:43	16:44	5	i ++
water	16:43	0:0	6	i
op	16:44	0:0	6	++
stmts	16:48	18:8	5	
water	16:48	0:0	6	{
water	17:12	0:0	6	variance
op	17:21	0:0	6	+=
call	17:24	17:40	6	pow2
arg	17:29	17:40	7	data_ptr[i]
water	17:29	0:0	8	data_ptr
op	17:37	0:0	8	[
water	17:38	0:0	8	i
op	17:39	0:0	8	]
water	17:41	0:0	6	;
water	18:8	0:0	6	}
water	19:8	0:0	4	variance
op	19:17	0:0	4	/=
water	19:20	0:0	4	frame
op	19:25	0:0	4	->
water	19:27	0:0	4	nb_samples
op	19:38	0:0	4	-
water	19:40	0:0	4	1
water	19:41	0:0	4	;
water	20:4	0:0	4	}
return	21:4	21:45	2	FFMAX(sqrt(variance),DBL_EPSILON)
call	21:11	21:44	3	FFMAX
arg	21:17	21:31	4	sqrt(variance)
call	21:17	21:30	5	sqrt
arg	21:22	21:30	6	variance
water	21:22	0:0	7	variance
arg	21:33	21:44	4	DBL_EPSILON
water	21:33	0:0	5	DBL_EPSILON
