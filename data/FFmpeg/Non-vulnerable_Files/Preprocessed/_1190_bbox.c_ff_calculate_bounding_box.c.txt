func	1:0	48:0	0	int	ff_calculate_bounding_box
params	1:29	0:0	1	
param	1:30	1:49	2	FFBoundingBox *	bbox
param	2:30	2:49	2	const uint8_t *	data
param	2:51	2:63	2	int	linesize
param	2:65	2:70	2	int	w
param	2:72	2:77	2	int	h
param	3:30	3:41	2	int	min_val
stmnts	0:0	47:12	1	
decl	5:4	5:12	2	int	x
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	y
decl	6:4	6:15	2	int	start_x
decl	7:4	7:15	2	int	start_y
decl	8:4	8:13	2	int	end_x
decl	9:4	9:13	2	int	end_y
decl	10:4	10:23	2	const uint8_t	*line
for	12:4	15:25	2	(start_x = 0 ;start_x < w;start_x ++)
forinit	12:9	12:20	3	start_x = 0 ;
water	12:9	0:0	4	start_x
op	12:17	0:0	4	=
water	12:19	0:0	4	0
water	12:20	0:0	4	;
cond	12:22	12:32	3	start_x < w
water	12:22	0:0	4	start_x
op	12:30	0:0	4	<
water	12:32	0:0	4	w
forexpr	12:35	12:42	3	start_x ++
water	12:35	0:0	4	start_x
op	12:42	0:0	4	++
stmts	13:8	15:25	3	
for	13:8	15:25	4	(y = 0 ;y < h;y ++)
forinit	13:13	13:18	5	y = 0 ;
water	13:13	0:0	6	y
op	13:15	0:0	6	=
water	13:17	0:0	6	0
water	13:18	0:0	6	;
cond	13:20	13:24	5	y < h
water	13:20	0:0	6	y
op	13:22	0:0	6	<
water	13:24	0:0	6	h
forexpr	13:27	13:28	5	y ++
water	13:27	0:0	6	y
op	13:28	0:0	6	++
stmts	14:12	15:25	5	
if	14:12	15:25	6	(( data [ y * linesize + start_x ] > min_val ))
cond	14:16	14:55	7	( data [ y * linesize + start_x ] > min_val )
water	14:16	0:0	8	(
water	14:17	0:0	8	data
op	14:21	0:0	8	[
water	14:22	0:0	8	y
op	14:24	0:0	8	*
water	14:26	0:0	8	linesize
op	14:35	0:0	8	+
water	14:37	0:0	8	start_x
op	14:44	0:0	8	]
op	14:46	0:0	8	>
water	14:48	0:0	8	min_val
water	14:55	0:0	8	)
stmts	15:16	15:25	7	
goto	15:16	15:25	8	outl
water	15:21	0:0	9	outl
label	16:0	16:4	2	outl :
if	17:4	18:16	2	(start_x == w)
cond	17:8	17:19	3	start_x == w
water	17:8	0:0	4	start_x
op	17:16	0:0	4	==
water	17:19	0:0	4	w
stmts	18:8	18:16	3	
return	18:8	18:16	4	0
water	18:15	0:0	5	0
for	20:4	23:25	2	(end_x = w - 1 ;end_x >= start_x;end_x --)
forinit	20:9	20:22	3	end_x = w - 1 ;
water	20:9	0:0	4	end_x
op	20:15	0:0	4	=
water	20:17	0:0	4	w
op	20:19	0:0	4	-
water	20:21	0:0	4	1
water	20:22	0:0	4	;
cond	20:24	20:33	3	end_x >= start_x
water	20:24	0:0	4	end_x
op	20:30	0:0	4	>=
water	20:33	0:0	4	start_x
forexpr	20:42	20:47	3	end_x --
water	20:42	0:0	4	end_x
op	20:47	0:0	4	--
stmts	21:8	23:25	3	
for	21:8	23:25	4	(y = 0 ;y < h;y ++)
forinit	21:13	21:18	5	y = 0 ;
water	21:13	0:0	6	y
op	21:15	0:0	6	=
water	21:17	0:0	6	0
water	21:18	0:0	6	;
cond	21:20	21:24	5	y < h
water	21:20	0:0	6	y
op	21:22	0:0	6	<
water	21:24	0:0	6	h
forexpr	21:27	21:28	5	y ++
water	21:27	0:0	6	y
op	21:28	0:0	6	++
stmts	22:12	23:25	5	
if	22:12	23:25	6	(( data [ y * linesize + end_x ] > min_val ))
cond	22:16	22:53	7	( data [ y * linesize + end_x ] > min_val )
water	22:16	0:0	8	(
water	22:17	0:0	8	data
op	22:21	0:0	8	[
water	22:22	0:0	8	y
op	22:24	0:0	8	*
water	22:26	0:0	8	linesize
op	22:35	0:0	8	+
water	22:37	0:0	8	end_x
op	22:42	0:0	8	]
op	22:44	0:0	8	>
water	22:46	0:0	8	min_val
water	22:53	0:0	8	)
stmts	23:16	23:25	7	
goto	23:16	23:25	8	outr
water	23:21	0:0	9	outr
label	24:0	24:4	2	outr :
water	26:4	0:0	2	line
op	26:9	0:0	2	=
water	26:11	0:0	2	data
water	26:15	0:0	2	;
for	27:4	32:4	2	(start_y = 0 ;start_y < h;start_y ++)
forinit	27:9	27:20	3	start_y = 0 ;
water	27:9	0:0	4	start_y
op	27:17	0:0	4	=
water	27:19	0:0	4	0
water	27:20	0:0	4	;
cond	27:22	27:32	3	start_y < h
water	27:22	0:0	4	start_y
op	27:30	0:0	4	<
water	27:32	0:0	4	h
forexpr	27:35	27:42	3	start_y ++
water	27:35	0:0	4	start_y
op	27:42	0:0	4	++
stmts	27:46	32:4	3	
water	27:46	0:0	4	{
for	28:8	30:25	4	(x = 0 ;x < w;x ++)
forinit	28:13	28:18	5	x = 0 ;
water	28:13	0:0	6	x
op	28:15	0:0	6	=
water	28:17	0:0	6	0
water	28:18	0:0	6	;
cond	28:20	28:24	5	x < w
water	28:20	0:0	6	x
op	28:22	0:0	6	<
water	28:24	0:0	6	w
forexpr	28:27	28:28	5	x ++
water	28:27	0:0	6	x
op	28:28	0:0	6	++
stmts	29:12	30:25	5	
if	29:12	30:25	6	(line [ x ] > min_val)
cond	29:16	29:26	7	line [ x ] > min_val
water	29:16	0:0	8	line
op	29:20	0:0	8	[
water	29:21	0:0	8	x
op	29:22	0:0	8	]
op	29:24	0:0	8	>
water	29:26	0:0	8	min_val
stmts	30:16	30:25	7	
goto	30:16	30:25	8	outt
water	30:21	0:0	9	outt
water	31:8	0:0	4	line
op	31:13	0:0	4	+=
water	31:16	0:0	4	linesize
water	31:24	0:0	4	;
water	32:4	0:0	4	}
label	33:0	33:4	2	outt :
water	35:4	0:0	2	line
op	35:9	0:0	2	=
water	35:11	0:0	2	data
op	35:16	0:0	2	+
water	35:18	0:0	2	(
water	35:19	0:0	2	h
op	35:20	0:0	2	-
water	35:21	0:0	2	1
water	35:22	0:0	2	)
op	35:23	0:0	2	*
water	35:24	0:0	2	linesize
water	35:32	0:0	2	;
for	36:4	41:4	2	(end_y = h - 1 ;end_y >= start_y;end_y --)
forinit	36:9	36:22	3	end_y = h - 1 ;
water	36:9	0:0	4	end_y
op	36:15	0:0	4	=
water	36:17	0:0	4	h
op	36:19	0:0	4	-
water	36:21	0:0	4	1
water	36:22	0:0	4	;
cond	36:24	36:33	3	end_y >= start_y
water	36:24	0:0	4	end_y
op	36:30	0:0	4	>=
water	36:33	0:0	4	start_y
forexpr	36:42	36:47	3	end_y --
water	36:42	0:0	4	end_y
op	36:47	0:0	4	--
stmts	36:51	41:4	3	
water	36:51	0:0	4	{
for	37:8	39:25	4	(x = 0 ;x < w;x ++)
forinit	37:13	37:18	5	x = 0 ;
water	37:13	0:0	6	x
op	37:15	0:0	6	=
water	37:17	0:0	6	0
water	37:18	0:0	6	;
cond	37:20	37:24	5	x < w
water	37:20	0:0	6	x
op	37:22	0:0	6	<
water	37:24	0:0	6	w
forexpr	37:27	37:28	5	x ++
water	37:27	0:0	6	x
op	37:28	0:0	6	++
stmts	38:12	39:25	5	
if	38:12	39:25	6	(line [ x ] > min_val)
cond	38:16	38:26	7	line [ x ] > min_val
water	38:16	0:0	8	line
op	38:20	0:0	8	[
water	38:21	0:0	8	x
op	38:22	0:0	8	]
op	38:24	0:0	8	>
water	38:26	0:0	8	min_val
stmts	39:16	39:25	7	
goto	39:16	39:25	8	outb
water	39:21	0:0	9	outb
water	40:8	0:0	4	line
op	40:13	0:0	4	-=
water	40:16	0:0	4	linesize
water	40:24	0:0	4	;
water	41:4	0:0	4	}
label	42:0	42:4	2	outb :
water	43:4	0:0	2	bbox
op	43:8	0:0	2	->
water	43:10	0:0	2	x1
op	43:13	0:0	2	=
water	43:15	0:0	2	start_x
water	43:22	0:0	2	;
water	44:4	0:0	2	bbox
op	44:8	0:0	2	->
water	44:10	0:0	2	y1
op	44:13	0:0	2	=
water	44:15	0:0	2	start_y
water	44:22	0:0	2	;
water	45:4	0:0	2	bbox
op	45:8	0:0	2	->
water	45:10	0:0	2	x2
op	45:13	0:0	2	=
water	45:15	0:0	2	end_x
water	45:20	0:0	2	;
water	46:4	0:0	2	bbox
op	46:8	0:0	2	->
water	46:10	0:0	2	y2
op	46:13	0:0	2	=
water	46:15	0:0	2	end_y
water	46:20	0:0	2	;
return	47:4	47:12	2	1
water	47:11	0:0	3	1
