func	1:0	87:0	0	static int	open_output_file
params	1:27	0:0	1	
param	1:28	1:48	2	const char *	filename
stmnts	0:0	86:12	1	
decl	3:4	3:24	2	AVStream	*out_stream
decl	4:4	4:23	2	AVStream	*in_stream
decl	5:4	5:37	2	AVCodecContext	*dec_ctx
water	5:27	0:0	2	,
decl	5:4	5:37	2	AVCodecContext	*enc_ctx
decl	6:4	6:20	2	AVCodec	*encoder
decl	7:4	7:11	2	int	ret
decl	8:4	8:18	2	unsigned int	i
water	9:4	0:0	2	ofmt_ctx
op	9:13	0:0	2	=
water	9:15	0:0	2	NULL
water	9:19	0:0	2	;
call	10:4	10:66	2	avformat_alloc_output_context2
arg	10:35	10:44	3	&ofmt_ctx
op	10:35	0:0	4	&
water	10:36	0:0	4	ofmt_ctx
arg	10:46	10:50	3	NULL
water	10:46	0:0	4	NULL
arg	10:52	10:56	3	NULL
water	10:52	0:0	4	NULL
arg	10:58	10:66	3	filename
water	10:58	0:0	4	filename
water	10:67	0:0	2	;
if	11:4	14:4	2	(! ofmt_ctx)
cond	11:8	11:9	3	! ofmt_ctx
op	11:8	0:0	4	!
water	11:9	0:0	4	ofmt_ctx
stmts	11:19	14:4	3	
water	11:19	0:0	4	{
call	12:8	12:70	4	av_log
arg	12:15	12:19	5	NULL
water	12:15	0:0	6	NULL
arg	12:21	12:33	5	AV_LOG_ERROR
water	12:21	0:0	6	AV_LOG_ERROR
arg	12:35	12:70	5	"Could not create output context\n"
water	12:35	0:0	6	"Could not create output context\n"
water	12:71	0:0	4	;
return	13:8	13:30	4	AVERROR_UNKNOWN
water	13:15	0:0	5	AVERROR_UNKNOWN
water	14:4	0:0	4	}
for	15:4	71:4	2	(i = 0 ;i < ifmt_ctx -> nb_streams;i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:30	3	i < ifmt_ctx -> nb_streams
water	15:16	0:0	4	i
op	15:18	0:0	4	<
water	15:20	0:0	4	ifmt_ctx
op	15:28	0:0	4	->
water	15:30	0:0	4	nb_streams
forexpr	15:42	15:43	3	i ++
water	15:42	0:0	4	i
op	15:43	0:0	4	++
stmts	15:47	71:4	3	
water	15:47	0:0	4	{
water	16:8	0:0	4	out_stream
op	16:19	0:0	4	=
call	16:21	16:55	4	avformat_new_stream
arg	16:41	16:49	5	ofmt_ctx
water	16:41	0:0	6	ofmt_ctx
arg	16:51	16:55	5	NULL
water	16:51	0:0	6	NULL
water	16:56	0:0	4	;
if	17:8	20:8	4	(! out_stream)
cond	17:12	17:13	5	! out_stream
op	17:12	0:0	6	!
water	17:13	0:0	6	out_stream
stmts	17:25	20:8	5	
water	17:25	0:0	6	{
call	18:12	18:74	6	av_log
arg	18:19	18:23	7	NULL
water	18:19	0:0	8	NULL
arg	18:25	18:37	7	AV_LOG_ERROR
water	18:25	0:0	8	AV_LOG_ERROR
arg	18:39	18:74	7	"Failed allocating output stream\n"
water	18:39	0:0	8	"Failed allocating output stream\n"
water	18:75	0:0	6	;
return	19:12	19:34	6	AVERROR_UNKNOWN
water	19:19	0:0	7	AVERROR_UNKNOWN
water	20:8	0:0	6	}
water	21:8	0:0	4	in_stream
op	21:18	0:0	4	=
water	21:20	0:0	4	ifmt_ctx
op	21:28	0:0	4	->
water	21:30	0:0	4	streams
op	21:37	0:0	4	[
water	21:38	0:0	4	i
op	21:39	0:0	4	]
water	21:40	0:0	4	;
water	22:8	0:0	4	dec_ctx
op	22:16	0:0	4	=
water	22:18	0:0	4	in_stream
op	22:27	0:0	4	->
water	22:29	0:0	4	codec
water	22:34	0:0	4	;
water	23:8	0:0	4	enc_ctx
op	23:16	0:0	4	=
water	23:18	0:0	4	out_stream
op	23:28	0:0	4	->
water	23:30	0:0	4	codec
water	23:35	0:0	4	;
if	24:8	57:8	4	(dec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO || dec_ctx -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	24:12	25:42	5	dec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO || dec_ctx -> codec_type == AVMEDIA_TYPE_AUDIO
water	24:12	0:0	6	dec_ctx
op	24:19	0:0	6	->
water	24:21	0:0	6	codec_type
op	24:32	0:0	6	==
water	24:35	0:0	6	AVMEDIA_TYPE_VIDEO
op	25:16	0:0	6	||
water	25:19	0:0	6	dec_ctx
op	25:26	0:0	6	->
water	25:28	0:0	6	codec_type
op	25:39	0:0	6	==
water	25:42	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	25:62	57:8	5	
water	25:62	0:0	6	{
water	27:12	0:0	6	encoder
op	27:20	0:0	6	=
call	27:22	27:60	6	avcodec_find_encoder
arg	27:43	27:60	7	dec_ctx->codec_id
water	27:43	0:0	8	dec_ctx
op	27:50	0:0	8	->
water	27:52	0:0	8	codec_id
water	27:61	0:0	6	;
if	28:12	31:12	6	(! encoder)
cond	28:16	28:17	7	! encoder
op	28:16	0:0	8	!
water	28:17	0:0	8	encoder
stmts	28:26	31:12	7	
water	28:26	0:0	8	{
call	29:16	29:74	8	av_log
arg	29:23	29:27	9	NULL
water	29:23	0:0	10	NULL
arg	29:29	29:41	9	AV_LOG_FATAL
water	29:29	0:0	10	AV_LOG_FATAL
arg	29:43	29:74	9	"Necessary encoder not found\n"
water	29:43	0:0	10	"Necessary encoder not found\n"
water	29:75	0:0	8	;
return	30:16	30:42	8	AVERROR_INVALIDDATA
water	30:23	0:0	9	AVERROR_INVALIDDATA
water	31:12	0:0	8	}
if	35:12	43:12	6	(dec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	35:16	35:39	7	dec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO
water	35:16	0:0	8	dec_ctx
op	35:23	0:0	8	->
water	35:25	0:0	8	codec_type
op	35:36	0:0	8	==
water	35:39	0:0	8	AVMEDIA_TYPE_VIDEO
stmts	35:59	43:12	7	
water	35:59	0:0	8	{
water	36:16	0:0	8	enc_ctx
op	36:23	0:0	8	->
water	36:25	0:0	8	height
op	36:32	0:0	8	=
water	36:34	0:0	8	dec_ctx
op	36:41	0:0	8	->
water	36:43	0:0	8	height
water	36:49	0:0	8	;
water	37:16	0:0	8	enc_ctx
op	37:23	0:0	8	->
water	37:25	0:0	8	width
op	37:31	0:0	8	=
water	37:33	0:0	8	dec_ctx
op	37:40	0:0	8	->
water	37:42	0:0	8	width
water	37:47	0:0	8	;
water	38:16	0:0	8	enc_ctx
op	38:23	0:0	8	->
water	38:25	0:0	8	sample_aspect_ratio
op	38:45	0:0	8	=
water	38:47	0:0	8	dec_ctx
op	38:54	0:0	8	->
water	38:56	0:0	8	sample_aspect_ratio
water	38:75	0:0	8	;
water	40:16	0:0	8	enc_ctx
op	40:23	0:0	8	->
water	40:25	0:0	8	pix_fmt
op	40:33	0:0	8	=
water	40:35	0:0	8	encoder
op	40:42	0:0	8	->
water	40:44	0:0	8	pix_fmts
op	40:52	0:0	8	[
water	40:53	0:0	8	0
op	40:54	0:0	8	]
water	40:55	0:0	8	;
water	42:16	0:0	8	enc_ctx
op	42:23	0:0	8	->
water	42:25	0:0	8	time_base
op	42:35	0:0	8	=
water	42:37	0:0	8	dec_ctx
op	42:44	0:0	8	->
water	42:46	0:0	8	time_base
water	42:55	0:0	8	;
water	43:12	0:0	8	}
else	43:14	50:12	6
stmts	43:19	50:12	7	
water	43:19	0:0	8	{
water	44:16	0:0	8	enc_ctx
op	44:23	0:0	8	->
water	44:25	0:0	8	sample_rate
op	44:37	0:0	8	=
water	44:39	0:0	8	dec_ctx
op	44:46	0:0	8	->
water	44:48	0:0	8	sample_rate
water	44:59	0:0	8	;
water	45:16	0:0	8	enc_ctx
op	45:23	0:0	8	->
water	45:25	0:0	8	channel_layout
op	45:40	0:0	8	=
water	45:42	0:0	8	dec_ctx
op	45:49	0:0	8	->
water	45:51	0:0	8	channel_layout
water	45:65	0:0	8	;
water	46:16	0:0	8	enc_ctx
op	46:23	0:0	8	->
water	46:25	0:0	8	channels
op	46:34	0:0	8	=
call	46:36	46:93	8	av_get_channel_layout_nb_channels
arg	46:70	46:93	9	enc_ctx->channel_layout
water	46:70	0:0	10	enc_ctx
op	46:77	0:0	10	->
water	46:79	0:0	10	channel_layout
water	46:94	0:0	8	;
water	48:16	0:0	8	enc_ctx
op	48:23	0:0	8	->
water	48:25	0:0	8	sample_fmt
op	48:36	0:0	8	=
water	48:38	0:0	8	encoder
op	48:45	0:0	8	->
water	48:47	0:0	8	sample_fmts
op	48:58	0:0	8	[
water	48:59	0:0	8	0
op	48:60	0:0	8	]
water	48:61	0:0	8	;
water	49:16	0:0	8	enc_ctx
op	49:23	0:0	8	->
water	49:25	0:0	8	time_base
op	49:35	0:0	8	=
water	49:37	0:0	8	(
water	49:38	0:0	8	AVRational
water	49:48	0:0	8	)
water	49:49	0:0	8	{
water	49:50	0:0	8	1
water	49:51	0:0	8	,
water	49:53	0:0	8	enc_ctx
op	49:60	0:0	8	->
water	49:62	0:0	8	sample_rate
water	49:73	0:0	8	}
water	49:74	0:0	8	;
water	50:12	0:0	8	}
water	52:12	0:0	6	ret
op	52:16	0:0	6	=
call	52:18	52:54	6	avcodec_open2
arg	52:32	52:39	7	enc_ctx
water	52:32	0:0	8	enc_ctx
arg	52:41	52:48	7	encoder
water	52:41	0:0	8	encoder
arg	52:50	52:54	7	NULL
water	52:50	0:0	8	NULL
water	52:55	0:0	6	;
if	53:12	56:12	6	(ret < 0)
cond	53:16	53:22	7	ret < 0
water	53:16	0:0	8	ret
op	53:20	0:0	8	<
water	53:22	0:0	8	0
stmts	53:25	56:12	7	
water	53:25	0:0	8	{
call	54:16	54:90	8	av_log
arg	54:23	54:27	9	NULL
water	54:23	0:0	10	NULL
arg	54:29	54:41	9	AV_LOG_ERROR
water	54:29	0:0	10	AV_LOG_ERROR
arg	54:43	54:87	9	"Cannot open video encoder for stream #%u\n"
water	54:43	0:0	10	"Cannot open video encoder for stream #%u\n"
arg	54:89	54:90	9	i
water	54:89	0:0	10	i
water	54:91	0:0	8	;
return	55:16	55:26	8	ret
water	55:23	0:0	9	ret
water	56:12	0:0	8	}
water	57:8	0:0	6	}
else	57:10	60:8	4
stmts	57:15	60:8	5	
if	57:15	60:8	6	(dec_ctx -> codec_type == AVMEDIA_TYPE_UNKNOWN)
cond	57:19	57:42	7	dec_ctx -> codec_type == AVMEDIA_TYPE_UNKNOWN
water	57:19	0:0	8	dec_ctx
op	57:26	0:0	8	->
water	57:28	0:0	8	codec_type
op	57:39	0:0	8	==
water	57:42	0:0	8	AVMEDIA_TYPE_UNKNOWN
stmts	57:64	60:8	7	
water	57:64	0:0	8	{
call	58:12	58:102	8	av_log
arg	58:19	58:23	9	NULL
water	58:19	0:0	10	NULL
arg	58:25	58:37	9	AV_LOG_FATAL
water	58:25	0:0	10	AV_LOG_FATAL
arg	58:39	58:99	9	"Elementary stream #%d is of unknown type, cannot proceed\n"
water	58:39	0:0	10	"Elementary stream #%d is of unknown type, cannot proceed\n"
arg	58:101	58:102	9	i
water	58:101	0:0	10	i
water	58:103	0:0	8	;
return	59:12	59:38	8	AVERROR_INVALIDDATA
water	59:19	0:0	9	AVERROR_INVALIDDATA
water	60:8	0:0	8	}
else	60:10	68:8	4
stmts	60:15	68:8	5	
water	60:15	0:0	6	{
water	62:12	0:0	6	ret
op	62:16	0:0	6	=
call	62:18	63:47	6	avcodec_copy_context
arg	62:39	62:66	7	ofmt_ctx->streams[i]->codec
water	62:39	0:0	8	ofmt_ctx
op	62:47	0:0	8	->
water	62:49	0:0	8	streams
op	62:56	0:0	8	[
water	62:57	0:0	8	i
op	62:58	0:0	8	]
op	62:59	0:0	8	->
water	62:61	0:0	8	codec
arg	63:20	63:47	7	ifmt_ctx->streams[i]->codec
water	63:20	0:0	8	ifmt_ctx
op	63:28	0:0	8	->
water	63:30	0:0	8	streams
op	63:37	0:0	8	[
water	63:38	0:0	8	i
op	63:39	0:0	8	]
op	63:40	0:0	8	->
water	63:42	0:0	8	codec
water	63:48	0:0	6	;
if	64:12	67:12	6	(ret < 0)
cond	64:16	64:22	7	ret < 0
water	64:16	0:0	8	ret
op	64:20	0:0	8	<
water	64:22	0:0	8	0
stmts	64:25	67:12	7	
water	64:25	0:0	8	{
call	65:16	65:76	8	av_log
arg	65:23	65:27	9	NULL
water	65:23	0:0	10	NULL
arg	65:29	65:41	9	AV_LOG_ERROR
water	65:29	0:0	10	AV_LOG_ERROR
arg	65:43	65:76	9	"Copying stream context failed\n"
water	65:43	0:0	10	"Copying stream context failed\n"
water	65:77	0:0	8	;
return	66:16	66:26	8	ret
water	66:23	0:0	9	ret
water	67:12	0:0	8	}
water	68:8	0:0	6	}
if	69:8	70:57	4	(ofmt_ctx -> oformat -> flags & AVFMT_GLOBALHEADER)
cond	69:12	69:39	5	ofmt_ctx -> oformat -> flags & AVFMT_GLOBALHEADER
water	69:12	0:0	6	ofmt_ctx
op	69:20	0:0	6	->
water	69:22	0:0	6	oformat
op	69:29	0:0	6	->
water	69:31	0:0	6	flags
op	69:37	0:0	6	&
water	69:39	0:0	6	AVFMT_GLOBALHEADER
stmts	70:12	70:57	5	
water	70:12	0:0	6	enc_ctx
op	70:19	0:0	6	->
water	70:21	0:0	6	flags
op	70:27	0:0	6	|=
water	70:30	0:0	6	AV_CODEC_FLAG_GLOBAL_HEADER
water	70:57	0:0	6	;
water	71:4	0:0	4	}
call	72:4	72:43	2	av_dump_format
arg	72:19	72:27	3	ofmt_ctx
water	72:19	0:0	4	ofmt_ctx
arg	72:29	72:30	3	0
water	72:29	0:0	4	0
arg	72:32	72:40	3	filename
water	72:32	0:0	4	filename
arg	72:42	72:43	3	1
water	72:42	0:0	4	1
water	72:44	0:0	2	;
if	73:4	79:4	2	(! ( ofmt_ctx -> oformat -> flags & AVFMT_NOFILE ))
cond	73:8	73:49	3	! ( ofmt_ctx -> oformat -> flags & AVFMT_NOFILE )
op	73:8	0:0	4	!
water	73:9	0:0	4	(
water	73:10	0:0	4	ofmt_ctx
op	73:18	0:0	4	->
water	73:20	0:0	4	oformat
op	73:27	0:0	4	->
water	73:29	0:0	4	flags
op	73:35	0:0	4	&
water	73:37	0:0	4	AVFMT_NOFILE
water	73:49	0:0	4	)
stmts	73:52	79:4	3	
water	73:52	0:0	4	{
water	74:8	0:0	4	ret
op	74:12	0:0	4	=
call	74:14	74:64	4	avio_open
arg	74:24	74:37	5	&ofmt_ctx->pb
op	74:24	0:0	6	&
water	74:25	0:0	6	ofmt_ctx
op	74:33	0:0	6	->
water	74:35	0:0	6	pb
arg	74:39	74:47	5	filename
water	74:39	0:0	6	filename
arg	74:49	74:64	5	AVIO_FLAG_WRITE
water	74:49	0:0	6	AVIO_FLAG_WRITE
water	74:65	0:0	4	;
if	75:8	78:8	4	(ret < 0)
cond	75:12	75:18	5	ret < 0
water	75:12	0:0	6	ret
op	75:16	0:0	6	<
water	75:18	0:0	6	0
stmts	75:21	78:8	5	
water	75:21	0:0	6	{
call	76:12	76:82	6	av_log
arg	76:19	76:23	7	NULL
water	76:19	0:0	8	NULL
arg	76:25	76:37	7	AV_LOG_ERROR
water	76:25	0:0	8	AV_LOG_ERROR
arg	76:39	76:72	7	"Could not open output file '%s'"
water	76:39	0:0	8	"Could not open output file '%s'"
arg	76:74	76:82	7	filename
water	76:74	0:0	8	filename
water	76:83	0:0	6	;
return	77:12	77:22	6	ret
water	77:19	0:0	7	ret
water	78:8	0:0	6	}
water	79:4	0:0	4	}
water	81:4	0:0	2	ret
op	81:8	0:0	2	=
call	81:10	81:46	2	avformat_write_header
arg	81:32	81:40	3	ofmt_ctx
water	81:32	0:0	4	ofmt_ctx
arg	81:42	81:46	3	NULL
water	81:42	0:0	4	NULL
water	81:47	0:0	2	;
if	82:4	85:4	2	(ret < 0)
cond	82:8	82:14	3	ret < 0
water	82:8	0:0	4	ret
op	82:12	0:0	4	<
water	82:14	0:0	4	0
stmts	82:17	85:4	3	
water	82:17	0:0	4	{
call	83:8	83:78	4	av_log
arg	83:15	83:19	5	NULL
water	83:15	0:0	6	NULL
arg	83:21	83:33	5	AV_LOG_ERROR
water	83:21	0:0	6	AV_LOG_ERROR
arg	83:35	83:78	5	"Error occurred when opening output file\n"
water	83:35	0:0	6	"Error occurred when opening output file\n"
water	83:79	0:0	4	;
return	84:8	84:18	4	ret
water	84:15	0:0	5	ret
water	85:4	0:0	4	}
return	86:4	86:12	2	0
water	86:11	0:0	3	0
