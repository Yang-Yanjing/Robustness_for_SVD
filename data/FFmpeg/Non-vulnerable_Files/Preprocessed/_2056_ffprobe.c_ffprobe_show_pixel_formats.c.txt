func	1:0	45:0	0	static void	ffprobe_show_pixel_formats
params	1:38	0:0	1	
param	1:39	1:55	2	WriterContext *	w
stmnts	0:0	44:34	1	
decl	3:4	3:44	2	const AVPixFmtDescriptor	*pixdesc
op	3:38	0:0	2	=
water	3:40	0:0	2	NULL
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	n
call	5:4	5:59	2	writer_print_section_header
arg	5:32	5:33	3	w
water	5:32	0:0	4	w
arg	5:35	5:59	3	SECTION_ID_PIXEL_FORMATS
water	5:35	0:0	4	SECTION_ID_PIXEL_FORMATS
water	5:60	0:0	2	;
while	6:4	43:4	2	(pixdesc =av_pix_fmt_desc_next (pixdesc ))
cond	6:11	6:49	3	pixdesc =av_pix_fmt_desc_next (pixdesc )
water	6:11	0:0	4	pixdesc
op	6:19	0:0	4	=
call	6:21	6:49	4	av_pix_fmt_desc_next
arg	6:42	6:49	5	pixdesc
water	6:42	0:0	6	pixdesc
stmts	6:52	43:4	3	
water	6:52	0:0	4	{
call	7:8	7:62	4	writer_print_section_header
arg	7:36	7:37	5	w
water	7:36	0:0	6	w
arg	7:39	7:62	5	SECTION_ID_PIXEL_FORMAT
water	7:39	0:0	6	SECTION_ID_PIXEL_FORMAT
water	7:63	0:0	4	;
call	8:8	8:39	4	print_str
arg	8:18	8:24	5	"name"
water	8:18	0:0	6	"name"
arg	8:26	8:39	5	pixdesc->name
water	8:26	0:0	6	pixdesc
op	8:33	0:0	6	->
water	8:35	0:0	6	name
water	8:40	0:0	4	;
call	9:8	9:57	4	print_int
arg	9:18	9:33	5	"nb_components"
water	9:18	0:0	6	"nb_components"
arg	9:35	9:57	5	pixdesc->nb_components
water	9:35	0:0	6	pixdesc
op	9:42	0:0	6	->
water	9:44	0:0	6	nb_components
water	9:58	0:0	4	;
if	10:8	13:8	4	(( pixdesc -> nb_components >= 3 ) && ! ( pixdesc -> flags & AV_PIX_FMT_FLAG_RGB ))
cond	10:12	10:83	5	( pixdesc -> nb_components >= 3 ) && ! ( pixdesc -> flags & AV_PIX_FMT_FLAG_RGB )
water	10:12	0:0	6	(
water	10:13	0:0	6	pixdesc
op	10:20	0:0	6	->
water	10:22	0:0	6	nb_components
op	10:36	0:0	6	>=
water	10:39	0:0	6	3
water	10:40	0:0	6	)
op	10:42	0:0	6	&&
op	10:45	0:0	6	!
water	10:46	0:0	6	(
water	10:47	0:0	6	pixdesc
op	10:54	0:0	6	->
water	10:56	0:0	6	flags
op	10:62	0:0	6	&
water	10:64	0:0	6	AV_PIX_FMT_FLAG_RGB
water	10:83	0:0	6	)
stmts	10:86	13:8	5	
water	10:86	0:0	6	{
call	11:12	11:65	6	print_int
arg	11:26	11:41	7	"log2_chroma_w"
water	11:26	0:0	8	"log2_chroma_w"
arg	11:43	11:65	7	pixdesc->log2_chroma_w
water	11:43	0:0	8	pixdesc
op	11:50	0:0	8	->
water	11:52	0:0	8	log2_chroma_w
water	11:66	0:0	6	;
call	12:12	12:65	6	print_int
arg	12:26	12:41	7	"log2_chroma_h"
water	12:26	0:0	8	"log2_chroma_h"
arg	12:43	12:65	7	pixdesc->log2_chroma_h
water	12:43	0:0	8	pixdesc
op	12:50	0:0	8	->
water	12:52	0:0	8	log2_chroma_h
water	12:66	0:0	6	;
water	13:8	0:0	6	}
else	13:10	16:8	4
stmts	13:15	16:8	5	
water	13:15	0:0	6	{
call	14:12	14:48	6	print_str_opt
arg	14:26	14:41	7	"log2_chroma_w"
water	14:26	0:0	8	"log2_chroma_w"
arg	14:43	14:48	7	"N/A"
water	14:43	0:0	8	"N/A"
water	14:49	0:0	6	;
call	15:12	15:48	6	print_str_opt
arg	15:26	15:41	7	"log2_chroma_h"
water	15:26	0:0	8	"log2_chroma_h"
arg	15:43	15:48	7	"N/A"
water	15:43	0:0	8	"N/A"
water	15:49	0:0	6	;
water	16:8	0:0	6	}
water	17:8	0:0	4	n
op	17:10	0:0	4	=
call	17:12	17:41	4	av_get_bits_per_pixel
arg	17:34	17:41	5	pixdesc
water	17:34	0:0	6	pixdesc
water	17:42	0:0	4	;
if	18:8	18:49	4	(n)
cond	18:12	18:12	5	n
water	18:12	0:0	6	n
stmts	18:15	18:49	5	
call	18:15	18:48	6	print_int
arg	18:29	18:45	7	"bits_per_pixel"
water	18:29	0:0	8	"bits_per_pixel"
arg	18:47	18:48	7	n
water	18:47	0:0	8	n
water	18:49	0:0	6	;
else	19:8	19:53	4
stmts	19:15	19:53	5	
call	19:15	19:52	6	print_str_opt
arg	19:29	19:45	7	"bits_per_pixel"
water	19:29	0:0	8	"bits_per_pixel"
arg	19:47	19:52	7	"N/A"
water	19:47	0:0	8	"N/A"
water	19:53	0:0	6	;
if	20:8	31:8	4	(do_show_pixel_format_flags)
cond	20:12	20:12	5	do_show_pixel_format_flags
water	20:12	0:0	6	do_show_pixel_format_flags
stmts	20:40	31:8	5	
water	20:40	0:0	6	{
call	21:12	21:72	6	writer_print_section_header
arg	21:40	21:41	7	w
water	21:40	0:0	8	w
arg	21:43	21:72	7	SECTION_ID_PIXEL_FORMAT_FLAGS
water	21:43	0:0	8	SECTION_ID_PIXEL_FORMAT_FLAGS
water	21:73	0:0	6	;
call	22:12	22:54	6	PRINT_PIX_FMT_FLAG
arg	22:31	22:33	7	BE
water	22:31	0:0	8	BE
arg	22:42	22:54	7	"big_endian"
water	22:42	0:0	8	"big_endian"
water	22:55	0:0	6	;
call	23:12	23:51	6	PRINT_PIX_FMT_FLAG
arg	23:31	23:34	7	PAL
water	23:31	0:0	8	PAL
arg	23:42	23:51	7	"palette"
water	23:42	0:0	8	"palette"
water	23:52	0:0	6	;
call	24:12	24:53	6	PRINT_PIX_FMT_FLAG
arg	24:31	24:40	7	BITSTREAM
water	24:31	0:0	8	BITSTREAM
arg	24:42	24:53	7	"bitstream"
water	24:42	0:0	8	"bitstream"
water	24:54	0:0	6	;
call	25:12	25:51	6	PRINT_PIX_FMT_FLAG
arg	25:31	25:38	7	HWACCEL
water	25:31	0:0	8	HWACCEL
arg	25:42	25:51	7	"hwaccel"
water	25:42	0:0	8	"hwaccel"
water	25:52	0:0	6	;
call	26:12	26:50	6	PRINT_PIX_FMT_FLAG
arg	26:31	26:37	7	PLANAR
water	26:31	0:0	8	PLANAR
arg	26:42	26:50	7	"planar"
water	26:42	0:0	8	"planar"
water	26:51	0:0	6	;
call	27:12	27:47	6	PRINT_PIX_FMT_FLAG
arg	27:31	27:34	7	RGB
water	27:31	0:0	8	RGB
arg	27:42	27:47	7	"rgb"
water	27:42	0:0	8	"rgb"
water	27:48	0:0	6	;
call	28:12	28:53	6	PRINT_PIX_FMT_FLAG
arg	28:31	28:40	7	PSEUDOPAL
water	28:31	0:0	8	PSEUDOPAL
arg	28:42	28:53	7	"pseudopal"
water	28:42	0:0	8	"pseudopal"
water	28:54	0:0	6	;
call	29:12	29:49	6	PRINT_PIX_FMT_FLAG
arg	29:31	29:36	7	ALPHA
water	29:31	0:0	8	ALPHA
arg	29:42	29:49	7	"alpha"
water	29:42	0:0	8	"alpha"
water	29:50	0:0	6	;
call	30:12	30:41	6	writer_print_section_footer
arg	30:40	30:41	7	w
water	30:40	0:0	8	w
water	30:42	0:0	6	;
water	31:8	0:0	6	}
if	32:8	41:8	4	(do_show_pixel_format_components && ( pixdesc -> nb_components > 0 ))
cond	32:12	32:74	5	do_show_pixel_format_components && ( pixdesc -> nb_components > 0 )
water	32:12	0:0	6	do_show_pixel_format_components
op	32:44	0:0	6	&&
water	32:47	0:0	6	(
water	32:48	0:0	6	pixdesc
op	32:55	0:0	6	->
water	32:57	0:0	6	nb_components
op	32:71	0:0	6	>
water	32:73	0:0	6	0
water	32:74	0:0	6	)
stmts	32:77	41:8	5	
water	32:77	0:0	6	{
call	33:12	33:77	6	writer_print_section_header
arg	33:40	33:41	7	w
water	33:40	0:0	8	w
arg	33:43	33:77	7	SECTION_ID_PIXEL_FORMAT_COMPONENTS
water	33:43	0:0	8	SECTION_ID_PIXEL_FORMAT_COMPONENTS
water	33:78	0:0	6	;
for	34:12	39:12	6	(i = 0 ;i < pixdesc -> nb_components;i ++)
forinit	34:17	34:22	7	i = 0 ;
water	34:17	0:0	8	i
op	34:19	0:0	8	=
water	34:21	0:0	8	0
water	34:22	0:0	8	;
cond	34:24	34:37	7	i < pixdesc -> nb_components
water	34:24	0:0	8	i
op	34:26	0:0	8	<
water	34:28	0:0	8	pixdesc
op	34:35	0:0	8	->
water	34:37	0:0	8	nb_components
forexpr	34:52	34:53	7	i ++
water	34:52	0:0	8	i
op	34:53	0:0	8	++
stmts	34:57	39:12	7	
water	34:57	0:0	8	{
call	35:16	35:80	8	writer_print_section_header
arg	35:44	35:45	9	w
water	35:44	0:0	10	w
arg	35:47	35:80	9	SECTION_ID_PIXEL_FORMAT_COMPONENT
water	35:47	0:0	10	SECTION_ID_PIXEL_FORMAT_COMPONENT
water	35:81	0:0	8	;
call	36:16	36:40	8	print_int
arg	36:26	36:33	9	"index"
water	36:26	0:0	10	"index"
arg	36:35	36:40	9	i+1
water	36:35	0:0	10	i
op	36:37	0:0	10	+
water	36:39	0:0	10	1
water	36:41	0:0	8	;
call	37:16	37:61	8	print_int
arg	37:26	37:37	9	"bit_depth"
water	37:26	0:0	10	"bit_depth"
arg	37:39	37:61	9	pixdesc->comp[i].depth
water	37:39	0:0	10	pixdesc
op	37:46	0:0	10	->
water	37:48	0:0	10	comp
op	37:52	0:0	10	[
water	37:53	0:0	10	i
op	37:54	0:0	10	]
op	37:55	0:0	10	.
water	37:56	0:0	10	depth
water	37:62	0:0	8	;
call	38:16	38:45	8	writer_print_section_footer
arg	38:44	38:45	9	w
water	38:44	0:0	10	w
water	38:46	0:0	8	;
water	39:12	0:0	8	}
call	40:12	40:41	6	writer_print_section_footer
arg	40:40	40:41	7	w
water	40:40	0:0	8	w
water	40:42	0:0	6	;
water	41:8	0:0	6	}
call	42:8	42:37	4	writer_print_section_footer
arg	42:36	42:37	5	w
water	42:36	0:0	6	w
water	42:38	0:0	4	;
water	43:4	0:0	4	}
call	44:4	44:33	2	writer_print_section_footer
arg	44:32	44:33	3	w
water	44:32	0:0	4	w
water	44:34	0:0	2	;
