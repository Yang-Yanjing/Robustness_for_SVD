func	1:0	21:0	0	static int	formats_declared
params	1:27	0:0	1	
param	1:28	1:46	2	AVFilterContext *	f
stmnts	0:0	20:12	1	
decl	3:4	3:9	2	int	i
for	4:4	11:4	2	(i = 0 ;i < f -> nb_inputs;i ++)
forinit	4:9	4:14	3	i = 0 ;
water	4:9	0:0	4	i
op	4:11	0:0	4	=
water	4:13	0:0	4	0
water	4:14	0:0	4	;
cond	4:16	4:23	3	i < f -> nb_inputs
water	4:16	0:0	4	i
op	4:18	0:0	4	<
water	4:20	0:0	4	f
op	4:21	0:0	4	->
water	4:23	0:0	4	nb_inputs
forexpr	4:34	4:35	3	i ++
water	4:34	0:0	4	i
op	4:35	0:0	4	++
stmts	4:39	11:4	3	
water	4:39	0:0	4	{
if	5:8	6:20	4	(! f -> inputs [ i ] -> out_formats)
cond	5:12	5:27	5	! f -> inputs [ i ] -> out_formats
op	5:12	0:0	6	!
water	5:13	0:0	6	f
op	5:14	0:0	6	->
water	5:16	0:0	6	inputs
op	5:22	0:0	6	[
water	5:23	0:0	6	i
op	5:24	0:0	6	]
op	5:25	0:0	6	->
water	5:27	0:0	6	out_formats
stmts	6:12	6:20	5	
return	6:12	6:20	6	0
water	6:19	0:0	7	0
if	7:8	10:20	4	(f -> inputs [ i ] -> type == AVMEDIA_TYPE_AUDIO && ! ( f -> inputs [ i ] -> out_samplerates && f -> inputs [ i ] -> out_channel_layouts ))
cond	7:12	9:47	5	f -> inputs [ i ] -> type == AVMEDIA_TYPE_AUDIO && ! ( f -> inputs [ i ] -> out_samplerates && f -> inputs [ i ] -> out_channel_layouts )
water	7:12	0:0	6	f
op	7:13	0:0	6	->
water	7:15	0:0	6	inputs
op	7:21	0:0	6	[
water	7:22	0:0	6	i
op	7:23	0:0	6	]
op	7:24	0:0	6	->
water	7:26	0:0	6	type
op	7:31	0:0	6	==
water	7:34	0:0	6	AVMEDIA_TYPE_AUDIO
op	7:53	0:0	6	&&
op	8:12	0:0	6	!
water	8:13	0:0	6	(
water	8:14	0:0	6	f
op	8:15	0:0	6	->
water	8:17	0:0	6	inputs
op	8:23	0:0	6	[
water	8:24	0:0	6	i
op	8:25	0:0	6	]
op	8:26	0:0	6	->
water	8:28	0:0	6	out_samplerates
op	8:44	0:0	6	&&
water	9:14	0:0	6	f
op	9:15	0:0	6	->
water	9:17	0:0	6	inputs
op	9:23	0:0	6	[
water	9:24	0:0	6	i
op	9:25	0:0	6	]
op	9:26	0:0	6	->
water	9:28	0:0	6	out_channel_layouts
water	9:47	0:0	6	)
stmts	10:12	10:20	5	
return	10:12	10:20	6	0
water	10:19	0:0	7	0
water	11:4	0:0	4	}
for	12:4	19:4	2	(i = 0 ;i < f -> nb_outputs;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:23	3	i < f -> nb_outputs
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	f
op	12:21	0:0	4	->
water	12:23	0:0	4	nb_outputs
forexpr	12:35	12:36	3	i ++
water	12:35	0:0	4	i
op	12:36	0:0	4	++
stmts	12:40	19:4	3	
water	12:40	0:0	4	{
if	13:8	14:20	4	(! f -> outputs [ i ] -> in_formats)
cond	13:12	13:28	5	! f -> outputs [ i ] -> in_formats
op	13:12	0:0	6	!
water	13:13	0:0	6	f
op	13:14	0:0	6	->
water	13:16	0:0	6	outputs
op	13:23	0:0	6	[
water	13:24	0:0	6	i
op	13:25	0:0	6	]
op	13:26	0:0	6	->
water	13:28	0:0	6	in_formats
stmts	14:12	14:20	5	
return	14:12	14:20	6	0
water	14:19	0:0	7	0
if	15:8	18:20	4	(f -> outputs [ i ] -> type == AVMEDIA_TYPE_AUDIO && ! ( f -> outputs [ i ] -> in_samplerates && f -> outputs [ i ] -> in_channel_layouts ))
cond	15:12	17:47	5	f -> outputs [ i ] -> type == AVMEDIA_TYPE_AUDIO && ! ( f -> outputs [ i ] -> in_samplerates && f -> outputs [ i ] -> in_channel_layouts )
water	15:12	0:0	6	f
op	15:13	0:0	6	->
water	15:15	0:0	6	outputs
op	15:22	0:0	6	[
water	15:23	0:0	6	i
op	15:24	0:0	6	]
op	15:25	0:0	6	->
water	15:27	0:0	6	type
op	15:32	0:0	6	==
water	15:35	0:0	6	AVMEDIA_TYPE_AUDIO
op	15:54	0:0	6	&&
op	16:12	0:0	6	!
water	16:13	0:0	6	(
water	16:14	0:0	6	f
op	16:15	0:0	6	->
water	16:17	0:0	6	outputs
op	16:24	0:0	6	[
water	16:25	0:0	6	i
op	16:26	0:0	6	]
op	16:27	0:0	6	->
water	16:29	0:0	6	in_samplerates
op	16:44	0:0	6	&&
water	17:14	0:0	6	f
op	17:15	0:0	6	->
water	17:17	0:0	6	outputs
op	17:24	0:0	6	[
water	17:25	0:0	6	i
op	17:26	0:0	6	]
op	17:27	0:0	6	->
water	17:29	0:0	6	in_channel_layouts
water	17:47	0:0	6	)
stmts	18:12	18:20	5	
return	18:12	18:20	6	0
water	18:19	0:0	7	0
water	19:4	0:0	4	}
return	20:4	20:12	2	1
water	20:11	0:0	3	1
