func	1:0	98:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	97:12	1	
decl	3:4	3:51	2	OutputStream	video_st
op	3:26	0:0	2	=
water	3:28	0:0	2	{
water	3:30	0:0	2	0
water	3:32	0:0	2	}
water	3:33	0:0	2	,
decl	3:4	3:51	2	OutputStream	audio_st
op	3:44	0:0	2	=
water	3:46	0:0	2	{
water	3:48	0:0	2	0
water	3:50	0:0	2	}
decl	4:4	4:24	2	const char	*filename
decl	5:4	5:23	2	AVOutputFormat	*fmt
decl	6:4	6:23	2	AVFormatContext	*oc
decl	7:4	7:38	2	AVCodec	*audio_codec
water	7:24	0:0	2	,
decl	7:4	7:38	2	AVCodec	*video_codec
decl	8:4	8:11	2	int	ret
decl	9:4	9:38	2	int	have_video
op	9:19	0:0	2	=
water	9:21	0:0	2	0
water	9:22	0:0	2	,
decl	9:4	9:38	2	int	have_audio
op	9:35	0:0	2	=
water	9:37	0:0	2	0
decl	10:4	10:42	2	int	encode_video
op	10:21	0:0	2	=
water	10:23	0:0	2	0
water	10:24	0:0	2	,
decl	10:4	10:42	2	int	encode_audio
op	10:39	0:0	2	=
water	10:41	0:0	2	0
decl	11:4	11:28	2	AVDictionary	*opt
op	11:22	0:0	2	=
water	11:24	0:0	2	NULL
call	13:4	13:20	2	av_register_all
water	13:21	0:0	2	;
if	14:4	23:4	2	(argc < 2)
cond	14:8	14:15	3	argc < 2
water	14:8	0:0	4	argc
op	14:13	0:0	4	<
water	14:15	0:0	4	2
stmts	14:18	23:4	3	
water	14:18	0:0	4	{
call	15:8	21:28	4	printf
arg	15:15	21:19	5	"usage: %s output_file\n""API example program to output a media file with libavformat.\n""This program generates a synthetic audio and video stream, encodes and\n""muxes them into a file named output_file.\n""The output format is automatically guessed according to the file extension.\n""Raw images can also be output by using '%%d' in the filename.\n""\n"
water	15:15	0:0	6	"usage: %s output_file\n"
water	16:15	0:0	6	"API example program to output a media file with libavformat.\n"
water	17:15	0:0	6	"This program generates a synthetic audio and video stream, encodes and\n"
water	18:15	0:0	6	"muxes them into a file named output_file.\n"
water	19:15	0:0	6	"The output format is automatically guessed according to the file extension.\n"
water	20:15	0:0	6	"Raw images can also be output by using '%%d' in the filename.\n"
water	21:15	0:0	6	"\n"
arg	21:21	21:28	5	argv[0]
water	21:21	0:0	6	argv
op	21:25	0:0	6	[
water	21:26	0:0	6	0
op	21:27	0:0	6	]
water	21:29	0:0	4	;
return	22:8	22:16	4	1
water	22:15	0:0	5	1
water	23:4	0:0	4	}
water	24:4	0:0	2	filename
op	24:13	0:0	2	=
water	24:15	0:0	2	argv
op	24:19	0:0	2	[
water	24:20	0:0	2	1
op	24:21	0:0	2	]
water	24:22	0:0	2	;
if	25:4	27:4	2	(argc > 3 && !strcmp (argv [ 2 ] ,"-flags" ))
cond	25:8	25:45	3	argc > 3 && !strcmp (argv [ 2 ] ,"-flags" )
water	25:8	0:0	4	argc
op	25:13	0:0	4	>
water	25:15	0:0	4	3
op	25:17	0:0	4	&&
op	25:20	0:0	4	!
call	25:21	25:45	4	strcmp
arg	25:28	25:35	5	argv[2]
water	25:28	0:0	6	argv
op	25:32	0:0	6	[
water	25:33	0:0	6	2
op	25:34	0:0	6	]
arg	25:37	25:45	5	"-flags"
water	25:37	0:0	6	"-flags"
stmts	25:48	27:4	3	
water	25:48	0:0	4	{
call	26:8	26:47	4	av_dict_set
arg	26:20	26:24	5	&opt
op	26:20	0:0	6	&
water	26:21	0:0	6	opt
arg	26:26	26:35	5	argv[2]+1
water	26:26	0:0	6	argv
op	26:30	0:0	6	[
water	26:31	0:0	6	2
op	26:32	0:0	6	]
op	26:33	0:0	6	+
water	26:34	0:0	6	1
arg	26:37	26:44	5	argv[3]
water	26:37	0:0	6	argv
op	26:41	0:0	6	[
water	26:42	0:0	6	3
op	26:43	0:0	6	]
arg	26:46	26:47	5	0
water	26:46	0:0	6	0
water	26:48	0:0	4	;
water	27:4	0:0	4	}
call	29:4	29:60	2	avformat_alloc_output_context2
arg	29:35	29:38	3	&oc
op	29:35	0:0	4	&
water	29:36	0:0	4	oc
arg	29:40	29:44	3	NULL
water	29:40	0:0	4	NULL
arg	29:46	29:50	3	NULL
water	29:46	0:0	4	NULL
arg	29:52	29:60	3	filename
water	29:52	0:0	4	filename
water	29:61	0:0	2	;
if	30:4	33:4	2	(! oc)
cond	30:8	30:9	3	! oc
op	30:8	0:0	4	!
water	30:9	0:0	4	oc
stmts	30:13	33:4	3	
water	30:13	0:0	4	{
call	31:8	31:82	4	printf
arg	31:15	31:82	5	"Could not deduce output format from file extension: using MPEG.\n"
water	31:15	0:0	6	"Could not deduce output format from file extension: using MPEG.\n"
water	31:83	0:0	4	;
call	32:8	32:66	4	avformat_alloc_output_context2
arg	32:39	32:42	5	&oc
op	32:39	0:0	6	&
water	32:40	0:0	6	oc
arg	32:44	32:48	5	NULL
water	32:44	0:0	6	NULL
arg	32:50	32:56	5	"mpeg"
water	32:50	0:0	6	"mpeg"
arg	32:58	32:66	5	filename
water	32:58	0:0	6	filename
water	32:67	0:0	4	;
water	33:4	0:0	4	}
if	34:4	35:16	2	(! oc)
cond	34:8	34:9	3	! oc
op	34:8	0:0	4	!
water	34:9	0:0	4	oc
stmts	35:8	35:16	3	
return	35:8	35:16	4	1
water	35:15	0:0	5	1
water	36:4	0:0	2	fmt
op	36:8	0:0	2	=
water	36:10	0:0	2	oc
op	36:12	0:0	2	->
water	36:14	0:0	2	oformat
water	36:21	0:0	2	;
if	39:4	43:4	2	(fmt -> video_codec != AV_CODEC_ID_NONE)
cond	39:8	39:28	3	fmt -> video_codec != AV_CODEC_ID_NONE
water	39:8	0:0	4	fmt
op	39:11	0:0	4	->
water	39:13	0:0	4	video_codec
op	39:25	0:0	4	!=
water	39:28	0:0	4	AV_CODEC_ID_NONE
stmts	39:46	43:4	3	
water	39:46	0:0	4	{
call	40:8	40:64	4	add_stream
arg	40:19	40:28	5	&video_st
op	40:19	0:0	6	&
water	40:20	0:0	6	video_st
arg	40:30	40:32	5	oc
water	40:30	0:0	6	oc
arg	40:34	40:46	5	&video_codec
op	40:34	0:0	6	&
water	40:35	0:0	6	video_codec
arg	40:48	40:64	5	fmt->video_codec
water	40:48	0:0	6	fmt
op	40:51	0:0	6	->
water	40:53	0:0	6	video_codec
water	40:65	0:0	4	;
water	41:8	0:0	4	have_video
op	41:19	0:0	4	=
water	41:21	0:0	4	1
water	41:22	0:0	4	;
water	42:8	0:0	4	encode_video
op	42:21	0:0	4	=
water	42:23	0:0	4	1
water	42:24	0:0	4	;
water	43:4	0:0	4	}
if	44:4	48:4	2	(fmt -> audio_codec != AV_CODEC_ID_NONE)
cond	44:8	44:28	3	fmt -> audio_codec != AV_CODEC_ID_NONE
water	44:8	0:0	4	fmt
op	44:11	0:0	4	->
water	44:13	0:0	4	audio_codec
op	44:25	0:0	4	!=
water	44:28	0:0	4	AV_CODEC_ID_NONE
stmts	44:46	48:4	3	
water	44:46	0:0	4	{
call	45:8	45:64	4	add_stream
arg	45:19	45:28	5	&audio_st
op	45:19	0:0	6	&
water	45:20	0:0	6	audio_st
arg	45:30	45:32	5	oc
water	45:30	0:0	6	oc
arg	45:34	45:46	5	&audio_codec
op	45:34	0:0	6	&
water	45:35	0:0	6	audio_codec
arg	45:48	45:64	5	fmt->audio_codec
water	45:48	0:0	6	fmt
op	45:51	0:0	6	->
water	45:53	0:0	6	audio_codec
water	45:65	0:0	4	;
water	46:8	0:0	4	have_audio
op	46:19	0:0	4	=
water	46:21	0:0	4	1
water	46:22	0:0	4	;
water	47:8	0:0	4	encode_audio
op	47:21	0:0	4	=
water	47:23	0:0	4	1
water	47:24	0:0	4	;
water	48:4	0:0	4	}
if	51:4	52:51	2	(have_video)
cond	51:8	51:8	3	have_video
water	51:8	0:0	4	have_video
stmts	52:8	52:51	3	
call	52:8	52:50	4	open_video
arg	52:19	52:21	5	oc
water	52:19	0:0	6	oc
arg	52:23	52:34	5	video_codec
water	52:23	0:0	6	video_codec
arg	52:36	52:45	5	&video_st
op	52:36	0:0	6	&
water	52:37	0:0	6	video_st
arg	52:47	52:50	5	opt
water	52:47	0:0	6	opt
water	52:51	0:0	4	;
if	53:4	54:51	2	(have_audio)
cond	53:8	53:8	3	have_audio
water	53:8	0:0	4	have_audio
stmts	54:8	54:51	3	
call	54:8	54:50	4	open_audio
arg	54:19	54:21	5	oc
water	54:19	0:0	6	oc
arg	54:23	54:34	5	audio_codec
water	54:23	0:0	6	audio_codec
arg	54:36	54:45	5	&audio_st
op	54:36	0:0	6	&
water	54:37	0:0	6	audio_st
arg	54:47	54:50	5	opt
water	54:47	0:0	6	opt
water	54:51	0:0	4	;
call	55:4	55:37	2	av_dump_format
arg	55:19	55:21	3	oc
water	55:19	0:0	4	oc
arg	55:23	55:24	3	0
water	55:23	0:0	4	0
arg	55:26	55:34	3	filename
water	55:26	0:0	4	filename
arg	55:36	55:37	3	1
water	55:36	0:0	4	1
water	55:38	0:0	2	;
if	57:4	64:4	2	(! ( fmt -> flags & AVFMT_NOFILE ))
cond	57:8	57:35	3	! ( fmt -> flags & AVFMT_NOFILE )
op	57:8	0:0	4	!
water	57:9	0:0	4	(
water	57:10	0:0	4	fmt
op	57:13	0:0	4	->
water	57:15	0:0	4	flags
op	57:21	0:0	4	&
water	57:23	0:0	4	AVFMT_NOFILE
water	57:35	0:0	4	)
stmts	57:38	64:4	3	
water	57:38	0:0	4	{
water	58:8	0:0	4	ret
op	58:12	0:0	4	=
call	58:14	58:58	4	avio_open
arg	58:24	58:31	5	&oc->pb
op	58:24	0:0	6	&
water	58:25	0:0	6	oc
op	58:27	0:0	6	->
water	58:29	0:0	6	pb
arg	58:33	58:41	5	filename
water	58:33	0:0	6	filename
arg	58:43	58:58	5	AVIO_FLAG_WRITE
water	58:43	0:0	6	AVIO_FLAG_WRITE
water	58:59	0:0	4	;
if	59:8	63:8	4	(ret < 0)
cond	59:12	59:18	5	ret < 0
water	59:12	0:0	6	ret
op	59:16	0:0	6	<
water	59:18	0:0	6	0
stmts	59:21	63:8	5	
water	59:21	0:0	6	{
call	60:12	61:35	6	fprintf
arg	60:20	60:26	7	stderr
water	60:20	0:0	8	stderr
arg	60:28	60:55	7	"Could not open '%s': %s\n"
water	60:28	0:0	8	"Could not open '%s': %s\n"
arg	60:57	60:65	7	filename
water	60:57	0:0	8	filename
arg	61:20	61:35	7	av_err2str(ret)
call	61:20	61:34	8	av_err2str
arg	61:31	61:34	9	ret
water	61:31	0:0	10	ret
water	61:36	0:0	6	;
return	62:12	62:20	6	1
water	62:19	0:0	7	1
water	63:8	0:0	6	}
water	64:4	0:0	4	}
water	66:4	0:0	2	ret
op	66:8	0:0	2	=
call	66:10	66:40	2	avformat_write_header
arg	66:32	66:34	3	oc
water	66:32	0:0	4	oc
arg	66:36	66:40	3	&opt
op	66:36	0:0	4	&
water	66:37	0:0	4	opt
water	66:41	0:0	2	;
if	67:4	71:4	2	(ret < 0)
cond	67:8	67:14	3	ret < 0
water	67:8	0:0	4	ret
op	67:12	0:0	4	<
water	67:14	0:0	4	0
stmts	67:17	71:4	3	
water	67:17	0:0	4	{
call	68:8	69:31	4	fprintf
arg	68:16	68:22	5	stderr
water	68:16	0:0	6	stderr
arg	68:24	68:71	5	"Error occurred when opening output file: %s\n"
water	68:24	0:0	6	"Error occurred when opening output file: %s\n"
arg	69:16	69:31	5	av_err2str(ret)
call	69:16	69:30	6	av_err2str
arg	69:27	69:30	7	ret
water	69:27	0:0	8	ret
water	69:32	0:0	4	;
return	70:8	70:16	4	1
water	70:15	0:0	5	1
water	71:4	0:0	4	}
while	72:4	81:4	2	(encode_video || encode_audio)
cond	72:11	72:27	3	encode_video || encode_audio
water	72:11	0:0	4	encode_video
op	72:24	0:0	4	||
water	72:27	0:0	4	encode_audio
stmts	72:41	81:4	3	
water	72:41	0:0	4	{
if	74:8	78:8	4	(encode_video && ( ! encode_audio ||av_compare_ts (video_st . next_pts ,video_st . st -> codec -> time_base ,audio_st . next_pts ,audio_st . st -> codec -> time_base ) <= 0 ))
cond	74:12	76:98	5	encode_video && ( ! encode_audio ||av_compare_ts (video_st . next_pts ,video_st . st -> codec -> time_base ,audio_st . next_pts ,audio_st . st -> codec -> time_base ) <= 0 )
water	74:12	0:0	6	encode_video
op	74:25	0:0	6	&&
water	75:12	0:0	6	(
op	75:13	0:0	6	!
water	75:14	0:0	6	encode_audio
op	75:27	0:0	6	||
call	75:30	76:92	6	av_compare_ts
arg	75:44	75:61	7	video_st.next_pts
water	75:44	0:0	8	video_st
op	75:52	0:0	8	.
water	75:53	0:0	8	next_pts
arg	75:63	75:92	7	video_st.st->codec->time_base
water	75:63	0:0	8	video_st
op	75:71	0:0	8	.
water	75:72	0:0	8	st
op	75:74	0:0	8	->
water	75:76	0:0	8	codec
op	75:81	0:0	8	->
water	75:83	0:0	8	time_base
arg	76:44	76:61	7	audio_st.next_pts
water	76:44	0:0	8	audio_st
op	76:52	0:0	8	.
water	76:53	0:0	8	next_pts
arg	76:63	76:92	7	audio_st.st->codec->time_base
water	76:63	0:0	8	audio_st
op	76:71	0:0	8	.
water	76:72	0:0	8	st
op	76:74	0:0	8	->
water	76:76	0:0	8	codec
op	76:81	0:0	8	->
water	76:83	0:0	8	time_base
op	76:94	0:0	6	<=
water	76:97	0:0	6	0
water	76:98	0:0	6	)
stmts	76:101	78:8	5	
water	76:101	0:0	6	{
water	77:12	0:0	6	encode_video
op	77:25	0:0	6	=
op	77:27	0:0	6	!
call	77:28	77:59	6	write_video_frame
arg	77:46	77:48	7	oc
water	77:46	0:0	8	oc
arg	77:50	77:59	7	&video_st
op	77:50	0:0	8	&
water	77:51	0:0	8	video_st
water	77:60	0:0	6	;
water	78:8	0:0	6	}
else	78:10	80:8	4
stmts	78:15	80:8	5	
water	78:15	0:0	6	{
water	79:12	0:0	6	encode_audio
op	79:25	0:0	6	=
op	79:27	0:0	6	!
call	79:28	79:59	6	write_audio_frame
arg	79:46	79:48	7	oc
water	79:46	0:0	8	oc
arg	79:50	79:59	7	&audio_st
op	79:50	0:0	8	&
water	79:51	0:0	8	audio_st
water	79:60	0:0	6	;
water	80:8	0:0	6	}
water	81:4	0:0	4	}
call	86:4	86:23	2	av_write_trailer
arg	86:21	86:23	3	oc
water	86:21	0:0	4	oc
water	86:24	0:0	2	;
if	88:4	89:35	2	(have_video)
cond	88:8	88:8	3	have_video
water	88:8	0:0	4	have_video
stmts	89:8	89:35	3	
call	89:8	89:34	4	close_stream
arg	89:21	89:23	5	oc
water	89:21	0:0	6	oc
arg	89:25	89:34	5	&video_st
op	89:25	0:0	6	&
water	89:26	0:0	6	video_st
water	89:35	0:0	4	;
if	90:4	91:35	2	(have_audio)
cond	90:8	90:8	3	have_audio
water	90:8	0:0	4	have_audio
stmts	91:8	91:35	3	
call	91:8	91:34	4	close_stream
arg	91:21	91:23	5	oc
water	91:21	0:0	6	oc
arg	91:25	91:34	5	&audio_st
op	91:25	0:0	6	&
water	91:26	0:0	6	audio_st
water	91:35	0:0	4	;
if	92:4	94:28	2	(! ( fmt -> flags & AVFMT_NOFILE ))
cond	92:8	92:35	3	! ( fmt -> flags & AVFMT_NOFILE )
op	92:8	0:0	4	!
water	92:9	0:0	4	(
water	92:10	0:0	4	fmt
op	92:13	0:0	4	->
water	92:15	0:0	4	flags
op	92:21	0:0	4	&
water	92:23	0:0	4	AVFMT_NOFILE
water	92:35	0:0	4	)
stmts	94:8	94:28	3	
call	94:8	94:27	4	avio_closep
arg	94:20	94:27	5	&oc->pb
op	94:20	0:0	6	&
water	94:21	0:0	6	oc
op	94:23	0:0	6	->
water	94:25	0:0	6	pb
water	94:28	0:0	4	;
call	96:4	96:28	2	avformat_free_context
arg	96:26	96:28	3	oc
water	96:26	0:0	4	oc
water	96:29	0:0	2	;
return	97:4	97:12	2	0
water	97:11	0:0	3	0
