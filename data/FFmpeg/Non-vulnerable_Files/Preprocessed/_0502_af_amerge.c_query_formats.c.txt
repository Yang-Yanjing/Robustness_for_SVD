func	1:0	63:0	0	static int	query_formats
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
stmnts	0:0	62:12	1	
decl	3:4	3:32	2	AMergeContext	*s
op	3:21	0:0	2	=
water	3:23	0:0	2	ctx
op	3:26	0:0	2	->
water	3:28	0:0	2	priv
decl	4:4	4:47	2	int64_t	inlayout[SWR_CH_MAX]
water	4:32	0:0	2	,
decl	4:4	4:47	2	int64_t	outlayout
op	4:44	0:0	2	=
water	4:46	0:0	2	0
decl	5:4	5:28	2	AVFilterFormats	*formats
decl	6:4	6:35	2	AVFilterChannelLayouts	*layouts
decl	7:4	7:33	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:33	2	int	overlap
op	7:19	0:0	2	=
water	7:21	0:0	2	0
water	7:22	0:0	2	,
decl	7:4	7:33	2	int	nb_ch
op	7:30	0:0	2	=
water	7:32	0:0	2	0
for	8:4	26:4	2	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	8:9	8:14	3	i = 0 ;
water	8:9	0:0	4	i
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:23	3	i < s -> nb_inputs
water	8:16	0:0	4	i
op	8:18	0:0	4	<
water	8:20	0:0	4	s
op	8:21	0:0	4	->
water	8:23	0:0	4	nb_inputs
forexpr	8:34	8:35	3	i ++
water	8:34	0:0	4	i
op	8:35	0:0	4	++
stmts	8:39	26:4	3	
water	8:39	0:0	4	{
if	9:8	14:8	4	(! ctx -> inputs [ i ] -> in_channel_layouts || ! ctx -> inputs [ i ] -> in_channel_layouts -> nb_channel_layouts)
cond	9:12	10:49	5	! ctx -> inputs [ i ] -> in_channel_layouts || ! ctx -> inputs [ i ] -> in_channel_layouts -> nb_channel_layouts
op	9:12	0:0	6	!
water	9:13	0:0	6	ctx
op	9:16	0:0	6	->
water	9:18	0:0	6	inputs
op	9:24	0:0	6	[
water	9:25	0:0	6	i
op	9:26	0:0	6	]
op	9:27	0:0	6	->
water	9:29	0:0	6	in_channel_layouts
op	9:48	0:0	6	||
op	10:12	0:0	6	!
water	10:13	0:0	6	ctx
op	10:16	0:0	6	->
water	10:18	0:0	6	inputs
op	10:24	0:0	6	[
water	10:25	0:0	6	i
op	10:26	0:0	6	]
op	10:27	0:0	6	->
water	10:29	0:0	6	in_channel_layouts
op	10:47	0:0	6	->
water	10:49	0:0	6	nb_channel_layouts
stmts	10:69	14:8	5	
water	10:69	0:0	6	{
call	11:12	12:60	6	av_log
arg	11:19	11:22	7	ctx
water	11:19	0:0	8	ctx
arg	11:24	11:38	7	AV_LOG_WARNING
water	11:24	0:0	8	AV_LOG_WARNING
arg	12:19	12:53	7	"No channel layout for input %d\n"
water	12:19	0:0	8	"No channel layout for input %d\n"
arg	12:55	12:60	7	i+1
water	12:55	0:0	8	i
op	12:57	0:0	8	+
water	12:59	0:0	8	1
water	12:61	0:0	6	;
return	13:12	13:34	6	AVERROR(EAGAIN)
call	13:19	13:33	7	AVERROR
arg	13:27	13:33	8	EAGAIN
water	13:27	0:0	9	EAGAIN
water	14:8	0:0	6	}
water	15:8	0:0	4	inlayout
op	15:16	0:0	4	[
water	15:17	0:0	4	i
op	15:18	0:0	4	]
op	15:20	0:0	4	=
water	15:22	0:0	4	ctx
op	15:25	0:0	4	->
water	15:27	0:0	4	inputs
op	15:33	0:0	4	[
water	15:34	0:0	4	i
op	15:35	0:0	4	]
op	15:36	0:0	4	->
water	15:38	0:0	4	in_channel_layouts
op	15:56	0:0	4	->
water	15:58	0:0	4	channel_layouts
op	15:73	0:0	4	[
water	15:74	0:0	4	0
op	15:75	0:0	4	]
water	15:76	0:0	4	;
if	16:8	20:8	4	(ctx -> inputs [ i ] -> in_channel_layouts -> nb_channel_layouts > 1)
cond	16:12	16:69	5	ctx -> inputs [ i ] -> in_channel_layouts -> nb_channel_layouts > 1
water	16:12	0:0	6	ctx
op	16:15	0:0	6	->
water	16:17	0:0	6	inputs
op	16:23	0:0	6	[
water	16:24	0:0	6	i
op	16:25	0:0	6	]
op	16:26	0:0	6	->
water	16:28	0:0	6	in_channel_layouts
op	16:46	0:0	6	->
water	16:48	0:0	6	nb_channel_layouts
op	16:67	0:0	6	>
water	16:69	0:0	6	1
stmts	16:72	20:8	5	
water	16:72	0:0	6	{
decl	17:12	17:25	6	char	buf[256]
call	18:12	18:73	6	av_get_channel_layout_string
arg	18:41	18:44	7	buf
water	18:41	0:0	8	buf
arg	18:46	18:57	7	sizeof(buf)
op	18:46	0:0	8	sizeof
water	18:52	0:0	8	(
water	18:53	0:0	8	buf
water	18:56	0:0	8	)
arg	18:59	18:60	7	0
water	18:59	0:0	8	0
arg	18:62	18:73	7	inlayout[i]
water	18:62	0:0	8	inlayout
op	18:70	0:0	8	[
water	18:71	0:0	8	i
op	18:72	0:0	8	]
water	18:74	0:0	6	;
call	19:12	19:78	6	av_log
arg	19:19	19:22	7	ctx
water	19:19	0:0	8	ctx
arg	19:24	19:35	7	AV_LOG_INFO
water	19:24	0:0	8	AV_LOG_INFO
arg	19:37	19:66	7	"Using \"%s\" for input %d\n"
water	19:37	0:0	8	"Using \"%s\" for input %d\n"
arg	19:68	19:71	7	buf
water	19:68	0:0	8	buf
arg	19:73	19:78	7	i+1
water	19:73	0:0	8	i
op	19:75	0:0	8	+
water	19:77	0:0	8	1
water	19:79	0:0	6	;
water	20:8	0:0	6	}
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	in
op	21:13	0:0	4	[
water	21:14	0:0	4	i
op	21:15	0:0	4	]
op	21:16	0:0	4	.
water	21:17	0:0	4	nb_ch
op	21:23	0:0	4	=
call	21:25	21:70	4	av_get_channel_layout_nb_channels
arg	21:59	21:70	5	inlayout[i]
water	21:59	0:0	6	inlayout
op	21:67	0:0	6	[
water	21:68	0:0	6	i
op	21:69	0:0	6	]
water	21:71	0:0	4	;
if	22:8	23:21	4	(outlayout & inlayout [ i ])
cond	22:12	22:34	5	outlayout & inlayout [ i ]
water	22:12	0:0	6	outlayout
op	22:22	0:0	6	&
water	22:24	0:0	6	inlayout
op	22:32	0:0	6	[
water	22:33	0:0	6	i
op	22:34	0:0	6	]
stmts	23:12	23:21	5	
water	23:12	0:0	6	overlap
op	23:19	0:0	6	++
water	23:21	0:0	6	;
water	24:8	0:0	4	outlayout
op	24:18	0:0	4	|=
water	24:21	0:0	4	inlayout
op	24:29	0:0	4	[
water	24:30	0:0	4	i
op	24:31	0:0	4	]
water	24:32	0:0	4	;
water	25:8	0:0	4	nb_ch
op	25:14	0:0	4	+=
water	25:17	0:0	4	s
op	25:18	0:0	4	->
water	25:20	0:0	4	in
op	25:22	0:0	4	[
water	25:23	0:0	4	i
op	25:24	0:0	4	]
op	25:25	0:0	4	.
water	25:26	0:0	4	nb_ch
water	25:31	0:0	4	;
water	26:4	0:0	4	}
if	27:4	30:4	2	(nb_ch > SWR_CH_MAX)
cond	27:8	27:16	3	nb_ch > SWR_CH_MAX
water	27:8	0:0	4	nb_ch
op	27:14	0:0	4	>
water	27:16	0:0	4	SWR_CH_MAX
stmts	27:28	30:4	3	
water	27:28	0:0	4	{
call	28:8	28:76	4	av_log
arg	28:15	28:18	5	ctx
water	28:15	0:0	6	ctx
arg	28:20	28:32	5	AV_LOG_ERROR
water	28:20	0:0	6	AV_LOG_ERROR
arg	28:34	28:64	5	"Too many channels (max %d)\n"
water	28:34	0:0	6	"Too many channels (max %d)\n"
arg	28:66	28:76	5	SWR_CH_MAX
water	28:66	0:0	6	SWR_CH_MAX
water	28:77	0:0	4	;
return	29:8	29:30	4	AVERROR(EINVAL)
call	29:15	29:29	5	AVERROR
arg	29:23	29:29	6	EINVAL
water	29:23	0:0	7	EINVAL
water	30:4	0:0	4	}
if	31:4	40:4	2	(overlap)
cond	31:8	31:8	3	overlap
water	31:8	0:0	4	overlap
stmts	31:17	40:4	3	
water	31:17	0:0	4	{
call	32:8	34:92	4	av_log
arg	32:15	32:18	5	ctx
water	32:15	0:0	6	ctx
arg	32:20	32:34	5	AV_LOG_WARNING
water	32:20	0:0	6	AV_LOG_WARNING
arg	33:15	34:92	5	"Input channel layouts overlap: ""output layout will be determined by the number of distinct input channels\n"
water	33:15	0:0	6	"Input channel layouts overlap: "
water	34:15	0:0	6	"output layout will be determined by the number of distinct input channels\n"
water	34:93	0:0	4	;
for	35:8	36:27	4	(i = 0 ;i < nb_ch;i ++)
forinit	35:13	35:18	5	i = 0 ;
water	35:13	0:0	6	i
op	35:15	0:0	6	=
water	35:17	0:0	6	0
water	35:18	0:0	6	;
cond	35:20	35:24	5	i < nb_ch
water	35:20	0:0	6	i
op	35:22	0:0	6	<
water	35:24	0:0	6	nb_ch
forexpr	35:31	35:32	5	i ++
water	35:31	0:0	6	i
op	35:32	0:0	6	++
stmts	36:12	36:27	5	
water	36:12	0:0	6	s
op	36:13	0:0	6	->
water	36:15	0:0	6	route
op	36:20	0:0	6	[
water	36:21	0:0	6	i
op	36:22	0:0	6	]
op	36:24	0:0	6	=
water	36:26	0:0	6	i
water	36:27	0:0	6	;
water	37:8	0:0	4	outlayout
op	37:18	0:0	4	=
call	37:20	37:55	4	av_get_default_channel_layout
arg	37:50	37:55	5	nb_ch
water	37:50	0:0	6	nb_ch
water	37:56	0:0	4	;
if	38:8	39:61	4	(! outlayout && nb_ch)
cond	38:12	38:26	5	! outlayout && nb_ch
op	38:12	0:0	6	!
water	38:13	0:0	6	outlayout
op	38:23	0:0	6	&&
water	38:26	0:0	6	nb_ch
stmts	39:12	39:61	5	
water	39:12	0:0	6	outlayout
op	39:22	0:0	6	=
water	39:24	0:0	6	0
water	39:25	0:0	6	xFFFFFFFFFFFFFFFFULL
op	39:46	0:0	6	>>
water	39:49	0:0	6	(
water	39:50	0:0	6	64
op	39:53	0:0	6	-
water	39:55	0:0	6	nb_ch
water	39:60	0:0	6	)
water	39:61	0:0	6	;
water	40:4	0:0	4	}
else	40:6	50:4	2
stmts	40:11	50:4	3	
water	40:11	0:0	4	{
decl	41:8	41:30	4	int	*route[SWR_CH_MAX]
decl	42:8	42:32	4	int	c
water	42:13	0:0	4	,
decl	42:8	42:32	4	int	out_ch_number
op	42:29	0:0	4	=
water	42:31	0:0	4	0
water	43:8	0:0	4	route
op	43:13	0:0	4	[
water	43:14	0:0	4	0
op	43:15	0:0	4	]
op	43:17	0:0	4	=
water	43:19	0:0	4	s
op	43:20	0:0	4	->
water	43:22	0:0	4	route
water	43:27	0:0	4	;
for	44:8	45:56	4	(i = 1 ;i < s -> nb_inputs;i ++)
forinit	44:13	44:18	5	i = 1 ;
water	44:13	0:0	6	i
op	44:15	0:0	6	=
water	44:17	0:0	6	1
water	44:18	0:0	6	;
cond	44:20	44:27	5	i < s -> nb_inputs
water	44:20	0:0	6	i
op	44:22	0:0	6	<
water	44:24	0:0	6	s
op	44:25	0:0	6	->
water	44:27	0:0	6	nb_inputs
forexpr	44:38	44:39	5	i ++
water	44:38	0:0	6	i
op	44:39	0:0	6	++
stmts	45:12	45:56	5	
water	45:12	0:0	6	route
op	45:17	0:0	6	[
water	45:18	0:0	6	i
op	45:19	0:0	6	]
op	45:21	0:0	6	=
water	45:23	0:0	6	route
op	45:28	0:0	6	[
water	45:29	0:0	6	i
op	45:31	0:0	6	-
water	45:33	0:0	6	1
op	45:34	0:0	6	]
op	45:36	0:0	6	+
water	45:38	0:0	6	s
op	45:39	0:0	6	->
water	45:41	0:0	6	in
op	45:43	0:0	6	[
water	45:44	0:0	6	i
op	45:46	0:0	6	-
water	45:48	0:0	6	1
op	45:49	0:0	6	]
op	45:50	0:0	6	.
water	45:51	0:0	6	nb_ch
water	45:56	0:0	6	;
for	46:8	49:51	4	(c = 0 ;c < 64;c ++)
forinit	46:13	46:18	5	c = 0 ;
water	46:13	0:0	6	c
op	46:15	0:0	6	=
water	46:17	0:0	6	0
water	46:18	0:0	6	;
cond	46:20	46:24	5	c < 64
water	46:20	0:0	6	c
op	46:22	0:0	6	<
water	46:24	0:0	6	64
forexpr	46:28	46:29	5	c ++
water	46:28	0:0	6	c
op	46:29	0:0	6	++
stmts	47:12	49:51	5	
for	47:12	49:51	6	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	47:17	47:22	7	i = 0 ;
water	47:17	0:0	8	i
op	47:19	0:0	8	=
water	47:21	0:0	8	0
water	47:22	0:0	8	;
cond	47:24	47:31	7	i < s -> nb_inputs
water	47:24	0:0	8	i
op	47:26	0:0	8	<
water	47:28	0:0	8	s
op	47:29	0:0	8	->
water	47:31	0:0	8	nb_inputs
forexpr	47:42	47:43	7	i ++
water	47:42	0:0	8	i
op	47:43	0:0	8	++
stmts	48:16	49:51	7	
if	48:16	49:51	8	(( inlayout [ i ] >> c ) & 1)
cond	48:20	48:41	9	( inlayout [ i ] >> c ) & 1
water	48:20	0:0	10	(
water	48:21	0:0	10	inlayout
op	48:29	0:0	10	[
water	48:30	0:0	10	i
op	48:31	0:0	10	]
op	48:33	0:0	10	>>
water	48:36	0:0	10	c
water	48:37	0:0	10	)
op	48:39	0:0	10	&
water	48:41	0:0	10	1
stmts	49:20	49:51	9	
op	49:20	0:0	10	*
water	49:21	0:0	10	(
water	49:22	0:0	10	route
op	49:27	0:0	10	[
water	49:28	0:0	10	i
op	49:29	0:0	10	]
op	49:30	0:0	10	++
water	49:32	0:0	10	)
op	49:34	0:0	10	=
water	49:36	0:0	10	out_ch_number
op	49:49	0:0	10	++
water	49:51	0:0	10	;
water	50:4	0:0	4	}
water	51:4	0:0	2	formats
op	51:12	0:0	2	=
call	51:14	51:61	2	ff_make_format_list
arg	51:34	51:61	3	ff_packed_sample_fmts_array
water	51:34	0:0	4	ff_packed_sample_fmts_array
water	51:62	0:0	2	;
call	52:4	52:38	2	ff_set_common_formats
arg	52:26	52:29	3	ctx
water	52:26	0:0	4	ctx
arg	52:31	52:38	3	formats
water	52:31	0:0	4	formats
water	52:39	0:0	2	;
for	53:4	57:4	2	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	53:9	53:14	3	i = 0 ;
water	53:9	0:0	4	i
op	53:11	0:0	4	=
water	53:13	0:0	4	0
water	53:14	0:0	4	;
cond	53:16	53:23	3	i < s -> nb_inputs
water	53:16	0:0	4	i
op	53:18	0:0	4	<
water	53:20	0:0	4	s
op	53:21	0:0	4	->
water	53:23	0:0	4	nb_inputs
forexpr	53:34	53:35	3	i ++
water	53:34	0:0	4	i
op	53:35	0:0	4	++
stmts	53:39	57:4	3	
water	53:39	0:0	4	{
water	54:8	0:0	4	layouts
op	54:16	0:0	4	=
water	54:18	0:0	4	NULL
water	54:22	0:0	4	;
call	55:8	55:51	4	ff_add_channel_layout
arg	55:30	55:38	5	&layouts
op	55:30	0:0	6	&
water	55:31	0:0	6	layouts
arg	55:40	55:51	5	inlayout[i]
water	55:40	0:0	6	inlayout
op	55:48	0:0	6	[
water	55:49	0:0	6	i
op	55:50	0:0	6	]
water	55:52	0:0	4	;
call	56:8	56:76	4	ff_channel_layouts_ref
arg	56:31	56:38	5	layouts
water	56:31	0:0	6	layouts
arg	56:40	56:76	5	&ctx->inputs[i]->out_channel_layouts
op	56:40	0:0	6	&
water	56:41	0:0	6	ctx
op	56:44	0:0	6	->
water	56:46	0:0	6	inputs
op	56:52	0:0	6	[
water	56:53	0:0	6	i
op	56:54	0:0	6	]
op	56:55	0:0	6	->
water	56:57	0:0	6	out_channel_layouts
water	56:77	0:0	4	;
water	57:4	0:0	4	}
water	58:4	0:0	2	layouts
op	58:12	0:0	2	=
water	58:14	0:0	2	NULL
water	58:18	0:0	2	;
call	59:4	59:45	2	ff_add_channel_layout
arg	59:26	59:34	3	&layouts
op	59:26	0:0	4	&
water	59:27	0:0	4	layouts
arg	59:36	59:45	3	outlayout
water	59:36	0:0	4	outlayout
water	59:46	0:0	2	;
call	60:4	60:72	2	ff_channel_layouts_ref
arg	60:27	60:34	3	layouts
water	60:27	0:0	4	layouts
arg	60:36	60:72	3	&ctx->outputs[0]->in_channel_layouts
op	60:36	0:0	4	&
water	60:37	0:0	4	ctx
op	60:40	0:0	4	->
water	60:42	0:0	4	outputs
op	60:49	0:0	4	[
water	60:50	0:0	4	0
op	60:51	0:0	4	]
op	60:52	0:0	4	->
water	60:54	0:0	4	in_channel_layouts
water	60:73	0:0	2	;
call	61:4	61:55	2	ff_set_common_samplerates
arg	61:30	61:33	3	ctx
water	61:30	0:0	4	ctx
arg	61:35	61:55	3	ff_all_samplerates()
call	61:35	61:54	4	ff_all_samplerates
water	61:56	0:0	2	;
return	62:4	62:12	2	0
water	62:11	0:0	3	0
