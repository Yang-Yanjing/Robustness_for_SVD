func	1:15	24:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	23:12	1	
decl	3:4	3:31	2	NoiseContext	*n
op	3:20	0:0	2	=
water	3:22	0:0	2	ctx
op	3:25	0:0	2	->
water	3:27	0:0	2	priv
decl	4:4	4:14	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:14	2	int	i
for	5:4	14:4	2	(i = 0 ;i < 4;i ++)
forinit	5:9	5:14	3	i = 0 ;
water	5:9	0:0	4	i
op	5:11	0:0	4	=
water	5:13	0:0	4	0
water	5:14	0:0	4	;
cond	5:16	5:20	3	i < 4
water	5:16	0:0	4	i
op	5:18	0:0	4	<
water	5:20	0:0	4	4
forexpr	5:23	5:24	3	i ++
water	5:23	0:0	4	i
op	5:24	0:0	4	++
stmts	5:28	14:4	3	
water	5:28	0:0	4	{
if	6:8	7:42	4	(n -> all . seed >= 0)
cond	6:12	6:27	5	n -> all . seed >= 0
water	6:12	0:0	6	n
op	6:13	0:0	6	->
water	6:15	0:0	6	all
op	6:18	0:0	6	.
water	6:19	0:0	6	seed
op	6:24	0:0	6	>=
water	6:27	0:0	6	0
stmts	7:12	7:42	5	
water	7:12	0:0	6	n
op	7:13	0:0	6	->
water	7:15	0:0	6	param
op	7:20	0:0	6	[
water	7:21	0:0	6	i
op	7:22	0:0	6	]
op	7:23	0:0	6	.
water	7:24	0:0	6	seed
op	7:29	0:0	6	=
water	7:31	0:0	6	n
op	7:32	0:0	6	->
water	7:34	0:0	6	all
op	7:37	0:0	6	.
water	7:38	0:0	6	seed
water	7:42	0:0	6	;
else	8:8	9:37	4
stmts	9:12	9:37	5	
water	9:12	0:0	6	n
op	9:13	0:0	6	->
water	9:15	0:0	6	param
op	9:20	0:0	6	[
water	9:21	0:0	6	i
op	9:22	0:0	6	]
op	9:23	0:0	6	.
water	9:24	0:0	6	seed
op	9:29	0:0	6	=
water	9:31	0:0	6	123457
water	9:37	0:0	6	;
if	10:8	11:50	4	(n -> all . strength)
cond	10:12	10:19	5	n -> all . strength
water	10:12	0:0	6	n
op	10:13	0:0	6	->
water	10:15	0:0	6	all
op	10:18	0:0	6	.
water	10:19	0:0	6	strength
stmts	11:12	11:50	5	
water	11:12	0:0	6	n
op	11:13	0:0	6	->
water	11:15	0:0	6	param
op	11:20	0:0	6	[
water	11:21	0:0	6	i
op	11:22	0:0	6	]
op	11:23	0:0	6	.
water	11:24	0:0	6	strength
op	11:33	0:0	6	=
water	11:35	0:0	6	n
op	11:36	0:0	6	->
water	11:38	0:0	6	all
op	11:41	0:0	6	.
water	11:42	0:0	6	strength
water	11:50	0:0	6	;
if	12:8	13:44	4	(n -> all . flags)
cond	12:12	12:19	5	n -> all . flags
water	12:12	0:0	6	n
op	12:13	0:0	6	->
water	12:15	0:0	6	all
op	12:18	0:0	6	.
water	12:19	0:0	6	flags
stmts	13:12	13:44	5	
water	13:12	0:0	6	n
op	13:13	0:0	6	->
water	13:15	0:0	6	param
op	13:20	0:0	6	[
water	13:21	0:0	6	i
op	13:22	0:0	6	]
op	13:23	0:0	6	.
water	13:24	0:0	6	flags
op	13:30	0:0	6	=
water	13:32	0:0	6	n
op	13:33	0:0	6	->
water	13:35	0:0	6	all
op	13:38	0:0	6	.
water	13:39	0:0	6	flags
water	13:44	0:0	6	;
water	14:4	0:0	4	}
for	15:4	18:4	2	(i = 0 ;i < 4;i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:20	3	i < 4
water	15:16	0:0	4	i
op	15:18	0:0	4	<
water	15:20	0:0	4	4
forexpr	15:23	15:24	3	i ++
water	15:23	0:0	4	i
op	15:24	0:0	4	++
stmts	15:28	18:4	3	
water	15:28	0:0	4	{
if	16:8	17:22	4	(n -> param [ i ] . strength && ( ( ret =init_noise (n ,i ) ) < 0 ))
cond	16:12	16:65	5	n -> param [ i ] . strength && ( ( ret =init_noise (n ,i ) ) < 0 )
water	16:12	0:0	6	n
op	16:13	0:0	6	->
water	16:15	0:0	6	param
op	16:20	0:0	6	[
water	16:21	0:0	6	i
op	16:22	0:0	6	]
op	16:23	0:0	6	.
water	16:24	0:0	6	strength
op	16:33	0:0	6	&&
water	16:36	0:0	6	(
water	16:37	0:0	6	(
water	16:38	0:0	6	ret
op	16:42	0:0	6	=
call	16:44	16:59	6	init_noise
arg	16:55	16:56	7	n
water	16:55	0:0	8	n
arg	16:58	16:59	7	i
water	16:58	0:0	8	i
water	16:60	0:0	6	)
op	16:62	0:0	6	<
water	16:64	0:0	6	0
water	16:65	0:0	6	)
stmts	17:12	17:22	5	
return	17:12	17:22	6	ret
water	17:19	0:0	7	ret
water	18:4	0:0	4	}
water	19:4	0:0	2	n
op	19:5	0:0	2	->
water	19:7	0:0	2	line_noise
op	19:22	0:0	2	=
water	19:24	0:0	2	ff_line_noise_c
water	19:39	0:0	2	;
water	20:4	0:0	2	n
op	20:5	0:0	2	->
water	20:7	0:0	2	line_noise_avg
op	20:22	0:0	2	=
water	20:24	0:0	2	ff_line_noise_avg_c
water	20:43	0:0	2	;
if	21:4	22:28	2	(ARCH_X86)
cond	21:8	21:8	3	ARCH_X86
water	21:8	0:0	4	ARCH_X86
stmts	22:8	22:28	3	
call	22:8	22:27	4	ff_noise_init_x86
arg	22:26	22:27	5	n
water	22:26	0:0	6	n
water	22:28	0:0	4	;
return	23:4	23:12	2	0
water	23:11	0:0	3	0
