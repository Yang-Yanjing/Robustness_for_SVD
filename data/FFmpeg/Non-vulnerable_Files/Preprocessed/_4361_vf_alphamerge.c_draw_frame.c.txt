func	1:0	29:0	0	static void	draw_frame
params	1:22	0:0	1	
param	1:23	1:43	2	AVFilterContext *	ctx
param	2:23	2:40	2	AVFrame *	main_buf
param	3:23	3:41	2	AVFrame *	alpha_buf
stmnts	0:0	28:4	1	
decl	5:4	5:40	2	AlphaMergeContext	*merge
op	5:29	0:0	2	=
water	5:31	0:0	2	ctx
op	5:34	0:0	2	->
water	5:36	0:0	2	priv
decl	6:4	6:28	2	int	h
op	6:10	0:0	2	=
water	6:12	0:0	2	main_buf
op	6:20	0:0	2	->
water	6:22	0:0	2	height
if	7:4	19:4	2	(merge -> is_packed_rgb)
cond	7:8	7:15	3	merge -> is_packed_rgb
water	7:8	0:0	4	merge
op	7:13	0:0	4	->
water	7:15	0:0	4	is_packed_rgb
stmts	7:30	19:4	3	
water	7:30	0:0	4	{
decl	8:8	8:16	4	int	x
water	8:13	0:0	4	,
decl	8:8	8:16	4	int	y
decl	9:8	9:27	4	uint8_t	*pin
water	9:20	0:0	4	,
decl	9:8	9:27	4	uint8_t	*pout
for	10:8	18:8	4	(y = 0 ;y < h;y ++)
forinit	10:13	10:18	5	y = 0 ;
water	10:13	0:0	6	y
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:20	10:24	5	y < h
water	10:20	0:0	6	y
op	10:22	0:0	6	<
water	10:24	0:0	6	h
forexpr	10:27	10:28	5	y ++
water	10:27	0:0	6	y
op	10:28	0:0	6	++
stmts	10:32	18:8	5	
water	10:32	0:0	6	{
water	11:12	0:0	6	pin
op	11:16	0:0	6	=
water	11:18	0:0	6	alpha_buf
op	11:27	0:0	6	->
water	11:29	0:0	6	data
op	11:33	0:0	6	[
water	11:34	0:0	6	0
op	11:35	0:0	6	]
op	11:37	0:0	6	+
water	11:39	0:0	6	y
op	11:41	0:0	6	*
water	11:43	0:0	6	alpha_buf
op	11:52	0:0	6	->
water	11:54	0:0	6	linesize
op	11:62	0:0	6	[
water	11:63	0:0	6	0
op	11:64	0:0	6	]
water	11:65	0:0	6	;
water	12:12	0:0	6	pout
op	12:17	0:0	6	=
water	12:19	0:0	6	main_buf
op	12:27	0:0	6	->
water	12:29	0:0	6	data
op	12:33	0:0	6	[
water	12:34	0:0	6	0
op	12:35	0:0	6	]
op	12:37	0:0	6	+
water	12:39	0:0	6	y
op	12:41	0:0	6	*
water	12:43	0:0	6	main_buf
op	12:51	0:0	6	->
water	12:53	0:0	6	linesize
op	12:61	0:0	6	[
water	12:62	0:0	6	0
op	12:63	0:0	6	]
op	12:65	0:0	6	+
water	12:67	0:0	6	merge
op	12:72	0:0	6	->
water	12:74	0:0	6	rgba_map
op	12:82	0:0	6	[
water	12:83	0:0	6	A
op	12:84	0:0	6	]
water	12:85	0:0	6	;
for	13:12	17:12	6	(x = 0 ;x < main_buf -> width;x ++)
forinit	13:17	13:22	7	x = 0 ;
water	13:17	0:0	8	x
op	13:19	0:0	8	=
water	13:21	0:0	8	0
water	13:22	0:0	8	;
cond	13:24	13:38	7	x < main_buf -> width
water	13:24	0:0	8	x
op	13:26	0:0	8	<
water	13:28	0:0	8	main_buf
op	13:36	0:0	8	->
water	13:38	0:0	8	width
forexpr	13:45	13:46	7	x ++
water	13:45	0:0	8	x
op	13:46	0:0	8	++
stmts	13:50	17:12	7	
water	13:50	0:0	8	{
op	14:16	0:0	8	*
water	14:17	0:0	8	pout
op	14:22	0:0	8	=
op	14:24	0:0	8	*
water	14:25	0:0	8	pin
water	14:28	0:0	8	;
water	15:16	0:0	8	pin
op	15:20	0:0	8	+=
water	15:23	0:0	8	1
water	15:24	0:0	8	;
water	16:16	0:0	8	pout
op	16:21	0:0	8	+=
water	16:24	0:0	8	4
water	16:25	0:0	8	;
water	17:12	0:0	8	}
water	18:8	0:0	6	}
water	19:4	0:0	4	}
else	19:6	28:4	2
stmts	19:11	28:4	3	
water	19:11	0:0	4	{
decl	20:8	20:13	4	int	y
decl	21:8	21:55	4	const int	main_linesize
op	21:32	0:0	4	=
water	21:34	0:0	4	main_buf
op	21:42	0:0	4	->
water	21:44	0:0	4	linesize
op	21:52	0:0	4	[
water	21:53	0:0	4	A
op	21:54	0:0	4	]
decl	22:8	22:57	4	const int	alpha_linesize
op	22:33	0:0	4	=
water	22:35	0:0	4	alpha_buf
op	22:44	0:0	4	->
water	22:46	0:0	4	linesize
op	22:54	0:0	4	[
water	22:55	0:0	4	Y
op	22:56	0:0	4	]
for	23:8	27:8	4	(y = 0 ;y < h && y < alpha_buf -> height;y ++)
forinit	23:13	23:18	5	y = 0 ;
water	23:13	0:0	6	y
op	23:15	0:0	6	=
water	23:17	0:0	6	0
water	23:18	0:0	6	;
cond	23:20	23:44	5	y < h && y < alpha_buf -> height
water	23:20	0:0	6	y
op	23:22	0:0	6	<
water	23:24	0:0	6	h
op	23:26	0:0	6	&&
water	23:29	0:0	6	y
op	23:31	0:0	6	<
water	23:33	0:0	6	alpha_buf
op	23:42	0:0	6	->
water	23:44	0:0	6	height
forexpr	23:52	23:53	5	y ++
water	23:52	0:0	6	y
op	23:53	0:0	6	++
stmts	23:57	27:8	5	
water	23:57	0:0	6	{
call	24:12	26:55	6	memcpy
arg	24:19	24:56	7	main_buf->data[A]+y*main_linesize
water	24:19	0:0	8	main_buf
op	24:27	0:0	8	->
water	24:29	0:0	8	data
op	24:33	0:0	8	[
water	24:34	0:0	8	A
op	24:35	0:0	8	]
op	24:37	0:0	8	+
water	24:39	0:0	8	y
op	24:41	0:0	8	*
water	24:43	0:0	8	main_linesize
arg	25:19	25:58	7	alpha_buf->data[Y]+y*alpha_linesize
water	25:19	0:0	8	alpha_buf
op	25:28	0:0	8	->
water	25:30	0:0	8	data
op	25:34	0:0	8	[
water	25:35	0:0	8	Y
op	25:36	0:0	8	]
op	25:38	0:0	8	+
water	25:40	0:0	8	y
op	25:42	0:0	8	*
water	25:44	0:0	8	alpha_linesize
arg	26:19	26:55	7	FFMIN(main_linesize,alpha_linesize)
call	26:19	26:54	8	FFMIN
arg	26:25	26:38	9	main_linesize
water	26:25	0:0	10	main_linesize
arg	26:40	26:54	9	alpha_linesize
water	26:40	0:0	10	alpha_linesize
water	26:56	0:0	6	;
water	27:8	0:0	6	}
water	28:4	0:0	4	}
