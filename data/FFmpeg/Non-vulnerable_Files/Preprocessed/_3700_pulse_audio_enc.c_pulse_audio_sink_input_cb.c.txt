func	1:0	22:0	0	static void	pulse_audio_sink_input_cb
params	1:37	0:0	1	
param	1:38	1:53	2	pa_context *	ctx
param	1:55	1:82	2	const pa_sink_input_info *	i
param	2:38	2:45	2	int	eol
param	2:47	2:61	2	void *	userdata
stmnts	0:0	21:4	1	
decl	4:4	4:33	2	AVFormatContext	*h
op	4:23	0:0	2	=
water	4:25	0:0	2	userdata
decl	5:4	5:31	2	PulseData	*s
op	5:17	0:0	2	=
water	5:19	0:0	2	h
op	5:20	0:0	2	->
water	5:22	0:0	2	priv_data
if	6:4	7:14	2	(s -> ctx != ctx)
cond	6:8	6:18	3	s -> ctx != ctx
water	6:8	0:0	4	s
op	6:9	0:0	4	->
water	6:11	0:0	4	ctx
op	6:15	0:0	4	!=
water	6:18	0:0	4	ctx
stmts	7:8	7:14	3	
return	7:8	7:14	4	
if	8:4	21:4	2	(! eol)
cond	8:8	8:9	3	! eol
op	8:8	0:0	4	!
water	8:9	0:0	4	eol
stmts	8:14	21:4	3	
water	8:14	0:0	4	{
decl	9:8	9:18	4	double	val
decl	10:8	10:52	4	pa_volume_t	vol
op	10:24	0:0	4	=
call	10:26	10:51	5	pa_cvolume_avg
arg	10:41	10:51	6	&i->volume
op	10:41	0:0	7	&
water	10:42	0:0	7	i
op	10:43	0:0	7	->
water	10:45	0:0	7	volume
if	11:8	14:8	4	(s -> mute < 0 || ( s -> mute && ! i -> mute ) || ( ! s -> mute && i -> mute ))
cond	11:12	11:72	5	s -> mute < 0 || ( s -> mute && ! i -> mute ) || ( ! s -> mute && i -> mute )
water	11:12	0:0	6	s
op	11:13	0:0	6	->
water	11:15	0:0	6	mute
op	11:20	0:0	6	<
water	11:22	0:0	6	0
op	11:24	0:0	6	||
water	11:27	0:0	6	(
water	11:28	0:0	6	s
op	11:29	0:0	6	->
water	11:31	0:0	6	mute
op	11:36	0:0	6	&&
op	11:39	0:0	6	!
water	11:40	0:0	6	i
op	11:41	0:0	6	->
water	11:43	0:0	6	mute
water	11:47	0:0	6	)
op	11:49	0:0	6	||
water	11:52	0:0	6	(
op	11:53	0:0	6	!
water	11:54	0:0	6	s
op	11:55	0:0	6	->
water	11:57	0:0	6	mute
op	11:62	0:0	6	&&
water	11:65	0:0	6	i
op	11:66	0:0	6	->
water	11:68	0:0	6	mute
water	11:72	0:0	6	)
stmts	11:75	14:8	5	
water	11:75	0:0	6	{
water	12:12	0:0	6	s
op	12:13	0:0	6	->
water	12:15	0:0	6	mute
op	12:20	0:0	6	=
water	12:22	0:0	6	i
op	12:23	0:0	6	->
water	12:25	0:0	6	mute
water	12:29	0:0	6	;
call	13:12	13:110	6	avdevice_dev_to_app_control_message
arg	13:48	13:49	7	h
water	13:48	0:0	8	h
arg	13:51	13:83	7	AV_DEV_TO_APP_MUTE_STATE_CHANGED
water	13:51	0:0	8	AV_DEV_TO_APP_MUTE_STATE_CHANGED
arg	13:85	13:93	7	&s->mute
op	13:85	0:0	8	&
water	13:86	0:0	8	s
op	13:87	0:0	8	->
water	13:89	0:0	8	mute
arg	13:95	13:110	7	sizeof(s->mute)
op	13:95	0:0	8	sizeof
water	13:101	0:0	8	(
water	13:102	0:0	8	s
op	13:103	0:0	8	->
water	13:105	0:0	8	mute
water	13:109	0:0	8	)
water	13:111	0:0	6	;
water	14:8	0:0	6	}
water	15:8	0:0	4	vol
op	15:12	0:0	4	=
call	15:14	15:53	4	pa_sw_volume_divide
arg	15:34	15:37	5	vol
water	15:34	0:0	6	vol
arg	15:39	15:53	5	s->base_volume
water	15:39	0:0	6	s
op	15:40	0:0	6	->
water	15:42	0:0	6	base_volume
water	15:54	0:0	4	;
if	16:8	20:8	4	(s -> last_volume != vol)
cond	16:12	16:30	5	s -> last_volume != vol
water	16:12	0:0	6	s
op	16:13	0:0	6	->
water	16:15	0:0	6	last_volume
op	16:27	0:0	6	!=
water	16:30	0:0	6	vol
stmts	16:35	20:8	5	
water	16:35	0:0	6	{
water	17:12	0:0	6	val
op	17:16	0:0	6	=
water	17:18	0:0	6	(
water	17:19	0:0	6	double
water	17:25	0:0	6	)
water	17:26	0:0	6	vol
op	17:30	0:0	6	/
water	17:32	0:0	6	PA_VOLUME_NORM
water	17:46	0:0	6	;
call	18:12	18:104	6	avdevice_dev_to_app_control_message
arg	18:48	18:49	7	h
water	18:48	0:0	8	h
arg	18:51	18:85	7	AV_DEV_TO_APP_VOLUME_LEVEL_CHANGED
water	18:51	0:0	8	AV_DEV_TO_APP_VOLUME_LEVEL_CHANGED
arg	18:87	18:91	7	&val
op	18:87	0:0	8	&
water	18:88	0:0	8	val
arg	18:93	18:104	7	sizeof(val)
op	18:93	0:0	8	sizeof
water	18:99	0:0	8	(
water	18:100	0:0	8	val
water	18:103	0:0	8	)
water	18:105	0:0	6	;
water	19:12	0:0	6	s
op	19:13	0:0	6	->
water	19:15	0:0	6	last_volume
op	19:27	0:0	6	=
water	19:29	0:0	6	vol
water	19:32	0:0	6	;
water	20:8	0:0	6	}
water	21:4	0:0	4	}
