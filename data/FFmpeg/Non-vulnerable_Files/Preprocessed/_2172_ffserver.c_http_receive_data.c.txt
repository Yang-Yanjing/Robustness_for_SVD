func	1:0	144:0	0	static int	http_receive_data
params	1:28	0:0	1	
param	1:29	1:43	2	HTTPContext *	c
stmnts	0:0	143:13	1	
decl	3:4	3:19	2	HTTPContext	*c1
decl	4:4	4:25	2	int	len
water	4:11	0:0	2	,
decl	4:4	4:25	2	int	loop_run
op	4:22	0:0	2	=
water	4:24	0:0	2	0
while	5:4	32:4	2	(c -> chunked_encoding && ! c -> chunk_size && c -> buffer_end > c -> buffer_ptr)
cond	5:11	6:30	3	c -> chunked_encoding && ! c -> chunk_size && c -> buffer_end > c -> buffer_ptr
water	5:11	0:0	4	c
op	5:12	0:0	4	->
water	5:14	0:0	4	chunked_encoding
op	5:31	0:0	4	&&
op	5:34	0:0	4	!
water	5:35	0:0	4	c
op	5:36	0:0	4	->
water	5:38	0:0	4	chunk_size
op	5:49	0:0	4	&&
water	6:11	0:0	4	c
op	6:12	0:0	4	->
water	6:14	0:0	4	buffer_end
op	6:25	0:0	4	>
water	6:27	0:0	4	c
op	6:28	0:0	4	->
water	6:30	0:0	4	buffer_ptr
stmts	6:42	32:4	3	
water	6:42	0:0	4	{
water	8:8	0:0	4	len
op	8:12	0:0	4	=
call	8:14	8:45	4	recv
arg	8:19	8:24	5	c->fd
water	8:19	0:0	6	c
op	8:20	0:0	6	->
water	8:22	0:0	6	fd
arg	8:26	8:39	5	c->buffer_ptr
water	8:26	0:0	6	c
op	8:27	0:0	6	->
water	8:29	0:0	6	buffer_ptr
arg	8:41	8:42	5	1
water	8:41	0:0	6	1
arg	8:44	8:45	5	0
water	8:44	0:0	6	0
water	8:46	0:0	4	;
if	9:8	15:8	4	(len < 0)
cond	9:12	9:18	5	len < 0
water	9:12	0:0	6	len
op	9:16	0:0	6	<
water	9:18	0:0	6	0
stmts	9:21	15:8	5	
water	9:21	0:0	6	{
if	10:12	13:25	6	(ff_neterrno ( ) !=AVERROR (EAGAIN ) &&ff_neterrno ( ) !=AVERROR (EINTR ))
cond	10:16	11:46	7	ff_neterrno ( ) !=AVERROR (EAGAIN ) &&ff_neterrno ( ) !=AVERROR (EINTR )
call	10:16	10:28	8	ff_neterrno
op	10:30	0:0	8	!=
call	10:33	10:47	8	AVERROR
arg	10:41	10:47	9	EAGAIN
water	10:41	0:0	10	EAGAIN
op	10:49	0:0	8	&&
call	11:16	11:28	8	ff_neterrno
op	11:30	0:0	8	!=
call	11:33	11:46	8	AVERROR
arg	11:41	11:46	9	EINTR
water	11:41	0:0	10	EINTR
stmts	13:16	13:25	7	
goto	13:16	13:25	8	fail
water	13:21	0:0	9	fail
return	14:12	14:20	6	0
water	14:19	0:0	7	0
water	15:8	0:0	6	}
else	15:10	18:8	4
stmts	15:15	18:8	5	
if	15:15	18:8	6	(len == 0)
cond	15:19	15:26	7	len == 0
water	15:19	0:0	8	len
op	15:23	0:0	8	==
water	15:26	0:0	8	0
stmts	15:29	18:8	7	
water	15:29	0:0	8	{
goto	17:12	17:21	8	fail
water	17:17	0:0	9	fail
water	18:8	0:0	8	}
else	18:10	27:8	4
stmts	18:15	27:8	5	
if	18:15	27:8	6	(c -> buffer_ptr - c -> buffer >= 2 && !memcmp (c -> buffer_ptr - 1 ,"\r\n" ,2 ))
cond	18:19	19:55	7	c -> buffer_ptr - c -> buffer >= 2 && !memcmp (c -> buffer_ptr - 1 ,"\r\n" ,2 )
water	18:19	0:0	8	c
op	18:20	0:0	8	->
water	18:22	0:0	8	buffer_ptr
op	18:33	0:0	8	-
water	18:35	0:0	8	c
op	18:36	0:0	8	->
water	18:38	0:0	8	buffer
op	18:45	0:0	8	>=
water	18:48	0:0	8	2
op	18:50	0:0	8	&&
op	19:19	0:0	8	!
call	19:20	19:55	8	memcmp
arg	19:27	19:44	9	c->buffer_ptr-1
water	19:27	0:0	10	c
op	19:28	0:0	10	->
water	19:30	0:0	10	buffer_ptr
op	19:41	0:0	10	-
water	19:43	0:0	10	1
arg	19:46	19:52	9	"\r\n"
water	19:46	0:0	10	"\r\n"
arg	19:54	19:55	9	2
water	19:54	0:0	10	2
stmts	19:58	27:8	7	
water	19:58	0:0	8	{
water	20:12	0:0	8	c
op	20:13	0:0	8	->
water	20:15	0:0	8	chunk_size
op	20:26	0:0	8	=
call	20:28	20:51	8	strtol
arg	20:35	20:44	9	c->buffer
water	20:35	0:0	10	c
op	20:36	0:0	10	->
water	20:38	0:0	10	buffer
arg	20:46	20:47	9	0
water	20:46	0:0	10	0
arg	20:49	20:51	9	16
water	20:49	0:0	10	16
water	20:52	0:0	8	;
if	21:12	24:12	8	(c -> chunk_size <= 0)
cond	21:16	21:33	9	c -> chunk_size <= 0
water	21:16	0:0	10	c
op	21:17	0:0	10	->
water	21:19	0:0	10	chunk_size
op	21:30	0:0	10	<=
water	21:33	0:0	10	0
stmts	21:36	24:12	9	
water	21:36	0:0	10	{
water	22:16	0:0	10	c
op	22:17	0:0	10	->
water	22:19	0:0	10	chunk_size
op	22:30	0:0	10	=
water	22:32	0:0	10	0
water	22:33	0:0	10	;
goto	23:16	23:25	10	fail
water	23:21	0:0	11	fail
water	24:12	0:0	10	}
water	25:12	0:0	8	c
op	25:13	0:0	8	->
water	25:15	0:0	8	buffer_ptr
op	25:26	0:0	8	=
water	25:28	0:0	8	c
op	25:29	0:0	8	->
water	25:31	0:0	8	buffer
water	25:37	0:0	8	;
break	26:12	26:17	8	
water	27:8	0:0	8	}
else	27:10	29:21	4
stmts	27:15	29:21	5	
if	27:15	29:21	6	(++ loop_run > 10)
cond	27:19	27:32	7	++ loop_run > 10
op	27:19	0:0	8	++
water	27:21	0:0	8	loop_run
op	27:30	0:0	8	>
water	27:32	0:0	8	10
stmts	29:12	29:21	7	
goto	29:12	29:21	8	fail
water	29:17	0:0	9	fail
else	30:8	31:27	4
stmts	31:12	31:27	5	
water	31:12	0:0	6	c
op	31:13	0:0	6	->
water	31:15	0:0	6	buffer_ptr
op	31:25	0:0	6	++
water	31:27	0:0	6	;
water	32:4	0:0	4	}
if	33:4	51:4	2	(c -> buffer_end > c -> buffer_ptr)
cond	33:8	33:27	3	c -> buffer_end > c -> buffer_ptr
water	33:8	0:0	4	c
op	33:9	0:0	4	->
water	33:11	0:0	4	buffer_end
op	33:22	0:0	4	>
water	33:24	0:0	4	c
op	33:25	0:0	4	->
water	33:27	0:0	4	buffer_ptr
stmts	33:39	51:4	3	
water	33:39	0:0	4	{
water	34:8	0:0	4	len
op	34:12	0:0	4	=
call	34:14	35:73	4	recv
arg	34:19	34:24	5	c->fd
water	34:19	0:0	6	c
op	34:20	0:0	6	->
water	34:22	0:0	6	fd
arg	34:26	34:39	5	c->buffer_ptr
water	34:26	0:0	6	c
op	34:27	0:0	6	->
water	34:29	0:0	6	buffer_ptr
arg	35:19	35:70	5	FFMIN(c->chunk_size,c->buffer_end-c->buffer_ptr)
call	35:19	35:69	6	FFMIN
arg	35:25	35:38	7	c->chunk_size
water	35:25	0:0	8	c
op	35:26	0:0	8	->
water	35:28	0:0	8	chunk_size
arg	35:40	35:69	7	c->buffer_end-c->buffer_ptr
water	35:40	0:0	8	c
op	35:41	0:0	8	->
water	35:43	0:0	8	buffer_end
op	35:54	0:0	8	-
water	35:56	0:0	8	c
op	35:57	0:0	8	->
water	35:59	0:0	8	buffer_ptr
arg	35:72	35:73	5	0
water	35:72	0:0	6	0
water	35:74	0:0	4	;
if	36:8	41:8	4	(len < 0)
cond	36:12	36:18	5	len < 0
water	36:12	0:0	6	len
op	36:16	0:0	6	<
water	36:18	0:0	6	0
stmts	36:21	41:8	5	
water	36:21	0:0	6	{
if	37:12	40:25	6	(ff_neterrno ( ) !=AVERROR (EAGAIN ) &&ff_neterrno ( ) !=AVERROR (EINTR ))
cond	37:16	38:46	7	ff_neterrno ( ) !=AVERROR (EAGAIN ) &&ff_neterrno ( ) !=AVERROR (EINTR )
call	37:16	37:28	8	ff_neterrno
op	37:30	0:0	8	!=
call	37:33	37:47	8	AVERROR
arg	37:41	37:47	9	EAGAIN
water	37:41	0:0	10	EAGAIN
op	37:49	0:0	8	&&
call	38:16	38:28	8	ff_neterrno
op	38:30	0:0	8	!=
call	38:33	38:46	8	AVERROR
arg	38:41	38:46	9	EINTR
water	38:41	0:0	10	EINTR
stmts	40:16	40:25	7	
goto	40:16	40:25	8	fail
water	40:21	0:0	9	fail
water	41:8	0:0	6	}
else	41:10	43:21	4
stmts	41:15	43:21	5	
if	41:15	43:21	6	(len == 0)
cond	41:19	41:26	7	len == 0
water	41:19	0:0	8	len
op	41:23	0:0	8	==
water	41:26	0:0	8	0
stmts	43:12	43:21	7	
goto	43:12	43:21	8	fail
water	43:17	0:0	9	fail
else	44:8	50:8	4
stmts	44:13	50:8	5	
water	44:13	0:0	6	{
call	45:12	45:43	6	av_assert0
arg	45:23	45:43	7	len<=c->chunk_size
water	45:23	0:0	8	len
op	45:27	0:0	8	<=
water	45:30	0:0	8	c
op	45:31	0:0	8	->
water	45:33	0:0	8	chunk_size
water	45:44	0:0	6	;
water	46:12	0:0	6	c
op	46:13	0:0	6	->
water	46:15	0:0	6	chunk_size
op	46:26	0:0	6	-=
water	46:29	0:0	6	len
water	46:32	0:0	6	;
water	47:12	0:0	6	c
op	47:13	0:0	6	->
water	47:15	0:0	6	buffer_ptr
op	47:26	0:0	6	+=
water	47:29	0:0	6	len
water	47:32	0:0	6	;
water	48:12	0:0	6	c
op	48:13	0:0	6	->
water	48:15	0:0	6	data_count
op	48:26	0:0	6	+=
water	48:29	0:0	6	len
water	48:32	0:0	6	;
call	49:12	49:55	6	update_datarate
arg	49:28	49:40	7	&c->datarate
op	49:28	0:0	8	&
water	49:29	0:0	8	c
op	49:30	0:0	8	->
water	49:32	0:0	8	datarate
arg	49:42	49:55	7	c->data_count
water	49:42	0:0	8	c
op	49:43	0:0	8	->
water	49:45	0:0	8	data_count
water	49:56	0:0	6	;
water	50:8	0:0	6	}
water	51:4	0:0	4	}
if	52:4	58:4	2	(c -> buffer_ptr - c -> buffer >= 2 && c -> data_count > FFM_PACKET_SIZE)
cond	52:8	52:58	3	c -> buffer_ptr - c -> buffer >= 2 && c -> data_count > FFM_PACKET_SIZE
water	52:8	0:0	4	c
op	52:9	0:0	4	->
water	52:11	0:0	4	buffer_ptr
op	52:22	0:0	4	-
water	52:24	0:0	4	c
op	52:25	0:0	4	->
water	52:27	0:0	4	buffer
op	52:34	0:0	4	>=
water	52:37	0:0	4	2
op	52:39	0:0	4	&&
water	52:42	0:0	4	c
op	52:43	0:0	4	->
water	52:45	0:0	4	data_count
op	52:56	0:0	4	>
water	52:58	0:0	4	FFM_PACKET_SIZE
stmts	52:75	58:4	3	
water	52:75	0:0	4	{
if	53:8	57:8	4	(c -> buffer [ 0 ] != 'f' || c -> buffer [ 1 ] != 'm')
cond	53:12	54:28	5	c -> buffer [ 0 ] != 'f' || c -> buffer [ 1 ] != 'm'
water	53:12	0:0	6	c
op	53:13	0:0	6	->
water	53:15	0:0	6	buffer
op	53:21	0:0	6	[
water	53:22	0:0	6	0
op	53:23	0:0	6	]
op	53:25	0:0	6	!=
water	53:28	0:0	6	'f'
op	53:32	0:0	6	||
water	54:12	0:0	6	c
op	54:13	0:0	6	->
water	54:15	0:0	6	buffer
op	54:21	0:0	6	[
water	54:22	0:0	6	1
op	54:23	0:0	6	]
op	54:25	0:0	6	!=
water	54:28	0:0	6	'm'
stmts	54:33	57:8	5	
water	54:33	0:0	6	{
call	55:12	55:79	6	http_log
arg	55:21	55:79	7	"Feed stream has become desynchronized -- disconnecting\n"
water	55:21	0:0	8	"Feed stream has become desynchronized -- disconnecting\n"
water	55:80	0:0	6	;
goto	56:12	56:21	6	fail
water	56:17	0:0	7	fail
water	57:8	0:0	6	}
water	58:4	0:0	4	}
if	59:4	132:4	2	(c -> buffer_ptr >= c -> buffer_end)
cond	59:8	59:28	3	c -> buffer_ptr >= c -> buffer_end
water	59:8	0:0	4	c
op	59:9	0:0	4	->
water	59:11	0:0	4	buffer_ptr
op	59:22	0:0	4	>=
water	59:25	0:0	4	c
op	59:26	0:0	4	->
water	59:28	0:0	4	buffer_end
stmts	59:40	132:4	3	
water	59:40	0:0	4	{
decl	60:8	60:40	4	FFServerStream	*feed
op	60:29	0:0	4	=
water	60:31	0:0	4	c
op	60:32	0:0	4	->
water	60:34	0:0	4	stream
if	63:8	92:8	4	(c -> data_count > FFM_PACKET_SIZE)
cond	63:12	63:28	5	c -> data_count > FFM_PACKET_SIZE
water	63:12	0:0	6	c
op	63:13	0:0	6	->
water	63:15	0:0	6	data_count
op	63:26	0:0	6	>
water	63:28	0:0	6	FFM_PACKET_SIZE
stmts	63:45	92:8	5	
water	63:45	0:0	6	{
if	66:12	67:78	6	(lseek (c -> feed_fd ,feed -> feed_write_index ,SEEK_SET ) == - 1)
cond	66:16	66:72	7	lseek (c -> feed_fd ,feed -> feed_write_index ,SEEK_SET ) == - 1
call	66:16	66:66	8	lseek
arg	66:22	66:32	9	c->feed_fd
water	66:22	0:0	10	c
op	66:23	0:0	10	->
water	66:25	0:0	10	feed_fd
arg	66:34	66:56	9	feed->feed_write_index
water	66:34	0:0	10	feed
op	66:38	0:0	10	->
water	66:40	0:0	10	feed_write_index
arg	66:58	66:66	9	SEEK_SET
water	66:58	0:0	10	SEEK_SET
op	66:68	0:0	8	==
op	66:71	0:0	8	-
water	66:72	0:0	8	1
stmts	67:16	67:78	7	
call	67:16	67:77	8	http_log
arg	67:25	67:53	9	"Seek to %"PRId64" failed\n"
water	67:25	0:0	10	"Seek to %"
water	67:36	0:0	10	PRId64
water	67:42	0:0	10	" failed\n"
arg	67:55	67:77	9	feed->feed_write_index
water	67:55	0:0	10	feed
op	67:59	0:0	10	->
water	67:61	0:0	10	feed_write_index
water	67:78	0:0	8	;
if	68:12	71:12	6	(write (c -> feed_fd ,c -> buffer ,FFM_PACKET_SIZE ) < 0)
cond	68:16	68:64	7	write (c -> feed_fd ,c -> buffer ,FFM_PACKET_SIZE ) < 0
call	68:16	68:60	8	write
arg	68:22	68:32	9	c->feed_fd
water	68:22	0:0	10	c
op	68:23	0:0	10	->
water	68:25	0:0	10	feed_fd
arg	68:34	68:43	9	c->buffer
water	68:34	0:0	10	c
op	68:35	0:0	10	->
water	68:37	0:0	10	buffer
arg	68:45	68:60	9	FFM_PACKET_SIZE
water	68:45	0:0	10	FFM_PACKET_SIZE
op	68:62	0:0	8	<
water	68:64	0:0	8	0
stmts	68:67	71:12	7	
water	68:67	0:0	8	{
call	69:16	69:76	8	http_log
arg	69:25	69:59	9	"Error writing to feed file: %s\n"
water	69:25	0:0	10	"Error writing to feed file: %s\n"
arg	69:61	69:76	9	strerror(errno)
call	69:61	69:75	10	strerror
arg	69:70	69:75	11	errno
water	69:70	0:0	12	errno
water	69:77	0:0	8	;
goto	70:16	70:25	8	fail
water	70:21	0:0	9	fail
water	71:12	0:0	8	}
water	72:12	0:0	6	feed
op	72:16	0:0	6	->
water	72:18	0:0	6	feed_write_index
op	72:35	0:0	6	+=
water	72:38	0:0	6	FFM_PACKET_SIZE
water	72:53	0:0	6	;
if	74:12	75:56	6	(feed -> feed_write_index > c -> stream -> feed_size)
cond	74:16	74:52	7	feed -> feed_write_index > c -> stream -> feed_size
water	74:16	0:0	8	feed
op	74:20	0:0	8	->
water	74:22	0:0	8	feed_write_index
op	74:39	0:0	8	>
water	74:41	0:0	8	c
op	74:42	0:0	8	->
water	74:44	0:0	8	stream
op	74:50	0:0	8	->
water	74:52	0:0	8	feed_size
stmts	75:16	75:56	7	
water	75:16	0:0	8	feed
op	75:20	0:0	8	->
water	75:22	0:0	8	feed_size
op	75:32	0:0	8	=
water	75:34	0:0	8	feed
op	75:38	0:0	8	->
water	75:40	0:0	8	feed_write_index
water	75:56	0:0	8	;
if	77:12	79:56	6	(c -> stream -> feed_max_size && feed -> feed_write_index >= c -> stream -> feed_max_size)
cond	77:16	78:53	7	c -> stream -> feed_max_size && feed -> feed_write_index >= c -> stream -> feed_max_size
water	77:16	0:0	8	c
op	77:17	0:0	8	->
water	77:19	0:0	8	stream
op	77:25	0:0	8	->
water	77:27	0:0	8	feed_max_size
op	77:41	0:0	8	&&
water	78:16	0:0	8	feed
op	78:20	0:0	8	->
water	78:22	0:0	8	feed_write_index
op	78:39	0:0	8	>=
water	78:42	0:0	8	c
op	78:43	0:0	8	->
water	78:45	0:0	8	stream
op	78:51	0:0	8	->
water	78:53	0:0	8	feed_max_size
stmts	79:16	79:56	7	
water	79:16	0:0	8	feed
op	79:20	0:0	8	->
water	79:22	0:0	8	feed_write_index
op	79:39	0:0	8	=
water	79:41	0:0	8	FFM_PACKET_SIZE
water	79:56	0:0	8	;
if	81:12	85:12	6	(ffm_write_write_index (c -> feed_fd ,feed -> feed_write_index ) < 0)
cond	81:16	81:76	7	ffm_write_write_index (c -> feed_fd ,feed -> feed_write_index ) < 0
call	81:16	81:72	8	ffm_write_write_index
arg	81:38	81:48	9	c->feed_fd
water	81:38	0:0	10	c
op	81:39	0:0	10	->
water	81:41	0:0	10	feed_fd
arg	81:50	81:72	9	feed->feed_write_index
water	81:50	0:0	10	feed
op	81:54	0:0	10	->
water	81:56	0:0	10	feed_write_index
op	81:74	0:0	8	<
water	81:76	0:0	8	0
stmts	81:79	85:12	7	
water	81:79	0:0	8	{
call	82:16	83:40	8	http_log
arg	82:25	82:65	9	"Error writing index to feed file: %s\n"
water	82:25	0:0	10	"Error writing index to feed file: %s\n"
arg	83:25	83:40	9	strerror(errno)
call	83:25	83:39	10	strerror
arg	83:34	83:39	11	errno
water	83:34	0:0	12	errno
water	83:41	0:0	8	;
goto	84:16	84:25	8	fail
water	84:21	0:0	9	fail
water	85:12	0:0	8	}
for	87:12	91:12	6	(c1 = first_http_ctx ;c1;c1 = c1 -> next)
forinit	87:16	87:35	7	c1 = first_http_ctx ;
water	87:16	0:0	8	c1
op	87:19	0:0	8	=
water	87:21	0:0	8	first_http_ctx
water	87:35	0:0	8	;
cond	87:37	87:37	7	c1
water	87:37	0:0	8	c1
forexpr	87:41	87:50	7	c1 = c1 -> next
water	87:41	0:0	8	c1
op	87:44	0:0	8	=
water	87:46	0:0	8	c1
op	87:48	0:0	8	->
water	87:50	0:0	8	next
stmts	87:56	91:12	7	
water	87:56	0:0	8	{
if	88:16	90:51	8	(c1 -> state == HTTPSTATE_WAIT_FEED && c1 -> stream -> feed == c -> stream -> feed)
cond	88:20	89:51	9	c1 -> state == HTTPSTATE_WAIT_FEED && c1 -> stream -> feed == c -> stream -> feed
water	88:20	0:0	10	c1
op	88:22	0:0	10	->
water	88:24	0:0	10	state
op	88:30	0:0	10	==
water	88:33	0:0	10	HTTPSTATE_WAIT_FEED
op	88:53	0:0	10	&&
water	89:20	0:0	10	c1
op	89:22	0:0	10	->
water	89:24	0:0	10	stream
op	89:30	0:0	10	->
water	89:32	0:0	10	feed
op	89:37	0:0	10	==
water	89:40	0:0	10	c
op	89:41	0:0	10	->
water	89:43	0:0	10	stream
op	89:49	0:0	10	->
water	89:51	0:0	10	feed
stmts	90:20	90:51	9	
water	90:20	0:0	10	c1
op	90:22	0:0	10	->
water	90:24	0:0	10	state
op	90:30	0:0	10	=
water	90:32	0:0	10	HTTPSTATE_SEND_DATA
water	90:51	0:0	10	;
water	91:12	0:0	8	}
water	92:8	0:0	6	}
else	92:10	130:8	4
stmts	92:15	130:8	5	
water	92:15	0:0	6	{
decl	94:12	94:57	6	AVFormatContext	*s
op	94:31	0:0	6	=
call	94:33	94:56	7	avformat_alloc_context
decl	95:12	95:27	6	AVIOContext	*pb
decl	96:12	96:33	6	AVInputFormat	*fmt_in
decl	97:12	97:17	6	int	i
if	98:12	99:25	6	(! s)
cond	98:16	98:17	7	! s
op	98:16	0:0	8	!
water	98:17	0:0	8	s
stmts	99:16	99:25	7	
goto	99:16	99:25	8	fail
water	99:21	0:0	9	fail
water	101:12	0:0	6	fmt_in
op	101:19	0:0	6	=
call	101:21	101:57	6	av_find_input_format
arg	101:42	101:57	7	feed->fmt->name
water	101:42	0:0	8	feed
op	101:46	0:0	8	->
water	101:48	0:0	8	fmt
op	101:51	0:0	8	->
water	101:53	0:0	8	name
water	101:58	0:0	6	;
if	102:12	103:25	6	(! fmt_in)
cond	102:16	102:17	7	! fmt_in
op	102:16	0:0	8	!
water	102:17	0:0	8	fmt_in
stmts	103:16	103:25	7	
goto	103:16	103:25	8	fail
water	103:21	0:0	9	fail
water	104:12	0:0	6	pb
op	104:15	0:0	6	=
call	104:17	105:61	6	avio_alloc_context
arg	104:36	104:45	7	c->buffer
water	104:36	0:0	8	c
op	104:37	0:0	8	->
water	104:39	0:0	8	buffer
arg	104:47	104:72	7	c->buffer_end-c->buffer
water	104:47	0:0	8	c
op	104:48	0:0	8	->
water	104:50	0:0	8	buffer_end
op	104:61	0:0	8	-
water	104:63	0:0	8	c
op	104:64	0:0	8	->
water	104:66	0:0	8	buffer
arg	105:36	105:37	7	0
water	105:36	0:0	8	0
arg	105:39	105:43	7	NULL
water	105:39	0:0	8	NULL
arg	105:45	105:49	7	NULL
water	105:45	0:0	8	NULL
arg	105:51	105:55	7	NULL
water	105:51	0:0	8	NULL
arg	105:57	105:61	7	NULL
water	105:57	0:0	8	NULL
water	105:62	0:0	6	;
if	106:12	107:25	6	(! pb)
cond	106:16	106:17	7	! pb
op	106:16	0:0	8	!
water	106:17	0:0	8	pb
stmts	107:16	107:25	7	
goto	107:16	107:25	8	fail
water	107:21	0:0	9	fail
water	108:12	0:0	6	pb
op	108:14	0:0	6	->
water	108:16	0:0	6	seekable
op	108:25	0:0	6	=
water	108:27	0:0	6	0
water	108:28	0:0	6	;
water	109:12	0:0	6	s
op	109:13	0:0	6	->
water	109:15	0:0	6	pb
op	109:18	0:0	6	=
water	109:20	0:0	6	pb
water	109:22	0:0	6	;
if	110:12	113:12	6	(avformat_open_input (& s ,c -> stream -> feed_filename ,fmt_in ,NULL ) < 0)
cond	110:16	110:82	7	avformat_open_input (& s ,c -> stream -> feed_filename ,fmt_in ,NULL ) < 0
call	110:16	110:78	8	avformat_open_input
arg	110:36	110:38	9	&s
op	110:36	0:0	10	&
water	110:37	0:0	10	s
arg	110:40	110:64	9	c->stream->feed_filename
water	110:40	0:0	10	c
op	110:41	0:0	10	->
water	110:43	0:0	10	stream
op	110:49	0:0	10	->
water	110:51	0:0	10	feed_filename
arg	110:66	110:72	9	fmt_in
water	110:66	0:0	10	fmt_in
arg	110:74	110:78	9	NULL
water	110:74	0:0	10	NULL
op	110:80	0:0	8	<
water	110:82	0:0	8	0
stmts	110:85	113:12	7	
water	110:85	0:0	8	{
call	111:16	111:28	8	av_freep
arg	111:25	111:28	9	&pb
op	111:25	0:0	10	&
water	111:26	0:0	10	pb
water	111:29	0:0	8	;
goto	112:16	112:25	8	fail
water	112:21	0:0	9	fail
water	113:12	0:0	8	}
if	115:12	121:12	6	(s -> nb_streams != feed -> nb_streams)
cond	115:16	115:39	7	s -> nb_streams != feed -> nb_streams
water	115:16	0:0	8	s
op	115:17	0:0	8	->
water	115:19	0:0	8	nb_streams
op	115:30	0:0	8	!=
water	115:33	0:0	8	feed
op	115:37	0:0	8	->
water	115:39	0:0	8	nb_streams
stmts	115:51	121:12	7	
water	115:51	0:0	8	{
call	116:16	116:39	8	avformat_close_input
arg	116:37	116:39	9	&s
op	116:37	0:0	10	&
water	116:38	0:0	10	s
water	116:40	0:0	8	;
call	117:16	117:28	8	av_freep
arg	117:25	117:28	9	&pb
op	117:25	0:0	10	&
water	117:26	0:0	10	pb
water	117:29	0:0	8	;
call	118:16	119:49	8	http_log
arg	118:25	118:83	9	"Feed '%s' stream number does not match registered feed\n"
water	118:25	0:0	10	"Feed '%s' stream number does not match registered feed\n"
arg	119:25	119:49	9	c->stream->feed_filename
water	119:25	0:0	10	c
op	119:26	0:0	10	->
water	119:28	0:0	10	stream
op	119:34	0:0	10	->
water	119:36	0:0	10	feed_filename
water	119:50	0:0	8	;
goto	120:16	120:25	8	fail
water	120:21	0:0	9	fail
water	121:12	0:0	8	}
for	122:12	127:12	6	(i = 0 ;i < s -> nb_streams;i ++)
forinit	122:17	122:22	7	i = 0 ;
water	122:17	0:0	8	i
op	122:19	0:0	8	=
water	122:21	0:0	8	0
water	122:22	0:0	8	;
cond	122:24	122:31	7	i < s -> nb_streams
water	122:24	0:0	8	i
op	122:26	0:0	8	<
water	122:28	0:0	8	s
op	122:29	0:0	8	->
water	122:31	0:0	8	nb_streams
forexpr	122:43	122:44	7	i ++
water	122:43	0:0	8	i
op	122:44	0:0	8	++
stmts	122:48	127:12	7	
water	122:48	0:0	8	{
decl	123:16	123:55	8	LayeredAVStream	*fst
op	123:37	0:0	8	=
water	123:39	0:0	8	feed
op	123:43	0:0	8	->
water	123:45	0:0	8	streams
op	123:52	0:0	8	[
water	123:53	0:0	8	i
op	123:54	0:0	8	]
decl	124:16	124:44	8	AVStream	*st
op	124:29	0:0	8	=
water	124:31	0:0	8	s
op	124:32	0:0	8	->
water	124:34	0:0	8	streams
op	124:41	0:0	8	[
water	124:42	0:0	8	i
op	124:43	0:0	8	]
call	125:16	125:70	8	avcodec_parameters_to_context
arg	125:46	125:56	9	fst->codec
water	125:46	0:0	10	fst
op	125:49	0:0	10	->
water	125:51	0:0	10	codec
arg	125:58	125:70	9	st->codecpar
water	125:58	0:0	10	st
op	125:60	0:0	10	->
water	125:62	0:0	10	codecpar
water	125:71	0:0	8	;
call	126:16	126:73	8	avcodec_parameters_from_context
arg	126:48	126:61	9	fst->codecpar
water	126:48	0:0	10	fst
op	126:51	0:0	10	->
water	126:53	0:0	10	codecpar
arg	126:63	126:73	9	fst->codec
water	126:63	0:0	10	fst
op	126:66	0:0	10	->
water	126:68	0:0	10	codec
water	126:74	0:0	8	;
water	127:12	0:0	8	}
call	128:12	128:35	6	avformat_close_input
arg	128:33	128:35	7	&s
op	128:33	0:0	8	&
water	128:34	0:0	8	s
water	128:36	0:0	6	;
call	129:12	129:24	6	av_freep
arg	129:21	129:24	7	&pb
op	129:21	0:0	8	&
water	129:22	0:0	8	pb
water	129:25	0:0	6	;
water	130:8	0:0	6	}
water	131:8	0:0	4	c
op	131:9	0:0	4	->
water	131:11	0:0	4	buffer_ptr
op	131:22	0:0	4	=
water	131:24	0:0	4	c
op	131:25	0:0	4	->
water	131:27	0:0	4	buffer
water	131:33	0:0	4	;
water	132:4	0:0	4	}
return	133:4	133:12	2	0
water	133:11	0:0	3	0
label	134:1	134:5	2	fail :
water	135:4	0:0	2	c
op	135:5	0:0	2	->
water	135:7	0:0	2	stream
op	135:13	0:0	2	->
water	135:15	0:0	2	feed_opened
op	135:27	0:0	2	=
water	135:29	0:0	2	0
water	135:30	0:0	2	;
call	136:4	136:20	2	close
arg	136:10	136:20	3	c->feed_fd
water	136:10	0:0	4	c
op	136:11	0:0	4	->
water	136:13	0:0	4	feed_fd
water	136:21	0:0	2	;
for	138:4	142:4	2	(c1 = first_http_ctx ;c1;c1 = c1 -> next)
forinit	138:8	138:27	3	c1 = first_http_ctx ;
water	138:8	0:0	4	c1
op	138:11	0:0	4	=
water	138:13	0:0	4	first_http_ctx
water	138:27	0:0	4	;
cond	138:29	138:29	3	c1
water	138:29	0:0	4	c1
forexpr	138:33	138:42	3	c1 = c1 -> next
water	138:33	0:0	4	c1
op	138:36	0:0	4	=
water	138:38	0:0	4	c1
op	138:40	0:0	4	->
water	138:42	0:0	4	next
stmts	138:48	142:4	3	
water	138:48	0:0	4	{
if	139:8	141:51	4	(c1 -> state == HTTPSTATE_WAIT_FEED && c1 -> stream -> feed == c -> stream -> feed)
cond	139:12	140:43	5	c1 -> state == HTTPSTATE_WAIT_FEED && c1 -> stream -> feed == c -> stream -> feed
water	139:12	0:0	6	c1
op	139:14	0:0	6	->
water	139:16	0:0	6	state
op	139:22	0:0	6	==
water	139:25	0:0	6	HTTPSTATE_WAIT_FEED
op	139:45	0:0	6	&&
water	140:12	0:0	6	c1
op	140:14	0:0	6	->
water	140:16	0:0	6	stream
op	140:22	0:0	6	->
water	140:24	0:0	6	feed
op	140:29	0:0	6	==
water	140:32	0:0	6	c
op	140:33	0:0	6	->
water	140:35	0:0	6	stream
op	140:41	0:0	6	->
water	140:43	0:0	6	feed
stmts	141:12	141:51	5	
water	141:12	0:0	6	c1
op	141:14	0:0	6	->
water	141:16	0:0	6	state
op	141:22	0:0	6	=
water	141:24	0:0	6	HTTPSTATE_SEND_DATA_TRAILER
water	141:51	0:0	6	;
water	142:4	0:0	4	}
return	143:4	143:13	2	-1
op	143:11	0:0	3	-
water	143:12	0:0	3	1
