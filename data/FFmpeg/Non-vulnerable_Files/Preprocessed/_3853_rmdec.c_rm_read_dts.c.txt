func	1:0	37:0	0	static int64_t	rm_read_dts
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
param	1:47	1:63	2	int	stream_index
param	2:31	2:44	2	int64_t *	ppos
param	2:46	2:63	2	int64_t	pos_limit
stmnts	0:0	36:14	1	
decl	4:4	4:37	2	RMDemuxContext	*rm
op	4:23	0:0	2	=
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	priv_data
decl	5:4	5:20	2	int64_t	pos
water	5:15	0:0	2	,
decl	5:4	5:20	2	int64_t	dts
decl	6:4	6:36	2	int	stream_index2
water	6:21	0:0	2	,
decl	6:4	6:36	2	int	flags
water	6:28	0:0	2	,
decl	6:4	6:36	2	int	len
water	6:33	0:0	2	,
decl	6:4	6:36	2	int	h
water	7:4	0:0	2	pos
op	7:8	0:0	2	=
op	7:10	0:0	2	*
water	7:11	0:0	2	ppos
water	7:15	0:0	2	;
if	8:4	9:29	2	(rm -> old_format)
cond	8:7	8:11	3	rm -> old_format
water	8:7	0:0	4	rm
op	8:9	0:0	4	->
water	8:11	0:0	4	old_format
stmts	9:8	9:29	3	
return	9:8	9:29	4	AV_NOPTS_VALUE
water	9:15	0:0	5	AV_NOPTS_VALUE
if	10:4	11:29	2	(avio_seek (s -> pb ,pos ,SEEK_SET ) < 0)
cond	10:8	10:42	3	avio_seek (s -> pb ,pos ,SEEK_SET ) < 0
call	10:8	10:38	4	avio_seek
arg	10:18	10:23	5	s->pb
water	10:18	0:0	6	s
op	10:19	0:0	6	->
water	10:21	0:0	6	pb
arg	10:25	10:28	5	pos
water	10:25	0:0	6	pos
arg	10:30	10:38	5	SEEK_SET
water	10:30	0:0	6	SEEK_SET
op	10:40	0:0	4	<
water	10:42	0:0	4	0
stmts	11:8	11:29	3	
return	11:8	11:29	4	AV_NOPTS_VALUE
water	11:15	0:0	5	AV_NOPTS_VALUE
water	12:4	0:0	2	rm
op	12:6	0:0	2	->
water	12:8	0:0	2	remaining_len
op	12:21	0:0	2	=
water	12:22	0:0	2	0
water	12:23	0:0	2	;
for	13:4	34:4	2	(;;)
forinit	13:8	13:8	3	;
water	13:8	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	13:11	34:4	3	
water	13:11	0:0	4	{
decl	14:8	14:17	4	int	seq
op	14:15	0:0	4	=
water	14:16	0:0	4	1
decl	15:8	15:20	4	AVStream	*st
water	16:8	0:0	4	len
op	16:12	0:0	4	=
call	16:14	16:59	4	rm_sync
arg	16:22	16:23	5	s
water	16:22	0:0	6	s
arg	16:25	16:29	5	&dts
op	16:25	0:0	6	&
water	16:26	0:0	6	dts
arg	16:31	16:37	5	&flags
op	16:31	0:0	6	&
water	16:32	0:0	6	flags
arg	16:39	16:53	5	&stream_index2
op	16:39	0:0	6	&
water	16:40	0:0	6	stream_index2
arg	16:55	16:59	5	&pos
op	16:55	0:0	6	&
water	16:56	0:0	6	pos
water	16:60	0:0	4	;
if	17:8	18:33	4	(len < 0)
cond	17:11	17:15	5	len < 0
water	17:11	0:0	6	len
op	17:14	0:0	6	<
water	17:15	0:0	6	0
stmts	18:12	18:33	5	
return	18:12	18:33	6	AV_NOPTS_VALUE
water	18:19	0:0	7	AV_NOPTS_VALUE
water	19:8	0:0	4	st
op	19:11	0:0	4	=
water	19:13	0:0	4	s
op	19:14	0:0	4	->
water	19:16	0:0	4	streams
op	19:23	0:0	4	[
water	19:24	0:0	4	stream_index2
op	19:37	0:0	4	]
water	19:38	0:0	4	;
if	20:8	25:8	4	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	20:12	20:37	5	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	20:12	0:0	6	st
op	20:14	0:0	6	->
water	20:16	0:0	6	codec
op	20:21	0:0	6	->
water	20:23	0:0	6	codec_type
op	20:34	0:0	6	==
water	20:37	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	20:57	25:8	5	
water	20:57	0:0	6	{
water	21:12	0:0	6	h
op	21:13	0:0	6	=
call	21:15	21:28	6	avio_r8
arg	21:23	21:28	7	s->pb
water	21:23	0:0	8	s
op	21:24	0:0	8	->
water	21:26	0:0	8	pb
water	21:29	0:0	6	;
water	21:31	0:0	6	len
op	21:34	0:0	6	--
water	21:36	0:0	6	;
if	22:12	24:12	6	(! ( h & 0 x40 ))
cond	22:15	22:25	7	! ( h & 0 x40 )
op	22:15	0:0	8	!
water	22:16	0:0	8	(
water	22:17	0:0	8	h
op	22:19	0:0	8	&
water	22:21	0:0	8	0
water	22:22	0:0	8	x40
water	22:25	0:0	8	)
stmts	22:27	24:12	7	
water	22:27	0:0	8	{
water	23:16	0:0	8	seq
op	23:20	0:0	8	=
call	23:22	23:35	8	avio_r8
arg	23:30	23:35	9	s->pb
water	23:30	0:0	10	s
op	23:31	0:0	10	->
water	23:33	0:0	10	pb
water	23:36	0:0	8	;
water	23:38	0:0	8	len
op	23:41	0:0	8	--
water	23:43	0:0	8	;
water	24:12	0:0	8	}
water	25:8	0:0	6	}
if	26:8	32:8	4	(( flags & 2 ) && ( seq & 0 x7F ) == 1)
cond	26:11	26:38	5	( flags & 2 ) && ( seq & 0 x7F ) == 1
water	26:11	0:0	6	(
water	26:12	0:0	6	flags
op	26:17	0:0	6	&
water	26:18	0:0	6	2
water	26:19	0:0	6	)
op	26:21	0:0	6	&&
water	26:24	0:0	6	(
water	26:25	0:0	6	seq
op	26:28	0:0	6	&
water	26:29	0:0	6	0
water	26:30	0:0	6	x7F
water	26:33	0:0	6	)
op	26:35	0:0	6	==
water	26:38	0:0	6	1
stmts	26:40	32:8	5	
water	26:40	0:0	6	{
call	27:12	28:64	6	av_log
arg	27:19	27:20	7	s
water	27:19	0:0	8	s
arg	27:22	27:34	7	AV_LOG_TRACE
water	27:22	0:0	8	AV_LOG_TRACE
arg	27:36	27:61	7	"%d %d-%d %"PRId64" %d\n"
water	27:36	0:0	8	"%d %d-%d %"
water	27:48	0:0	8	PRId64
water	27:54	0:0	8	" %d\n"
arg	28:20	28:25	7	flags
water	28:20	0:0	8	flags
arg	28:27	28:40	7	stream_index2
water	28:27	0:0	8	stream_index2
arg	28:42	28:54	7	stream_index
water	28:42	0:0	8	stream_index
arg	28:56	28:59	7	dts
water	28:56	0:0	8	dts
arg	28:61	28:64	7	seq
water	28:61	0:0	8	seq
water	28:65	0:0	6	;
call	29:12	29:67	6	av_add_index_entry
arg	29:31	29:33	7	st
water	29:31	0:0	8	st
arg	29:35	29:38	7	pos
water	29:35	0:0	8	pos
arg	29:40	29:43	7	dts
water	29:40	0:0	8	dts
arg	29:45	29:46	7	0
water	29:45	0:0	8	0
arg	29:48	29:49	7	0
water	29:48	0:0	8	0
arg	29:51	29:67	7	AVINDEX_KEYFRAME
water	29:51	0:0	8	AVINDEX_KEYFRAME
water	29:68	0:0	6	;
if	30:12	31:21	6	(stream_index2 == stream_index)
cond	30:15	30:32	7	stream_index2 == stream_index
water	30:15	0:0	8	stream_index2
op	30:29	0:0	8	==
water	30:32	0:0	8	stream_index
stmts	31:16	31:21	7	
break	31:16	31:21	8	
water	32:8	0:0	6	}
call	33:8	33:28	4	avio_skip
arg	33:18	33:23	5	s->pb
water	33:18	0:0	6	s
op	33:19	0:0	6	->
water	33:21	0:0	6	pb
arg	33:25	33:28	5	len
water	33:25	0:0	6	len
water	33:29	0:0	4	;
water	34:4	0:0	4	}
op	35:4	0:0	2	*
water	35:5	0:0	2	ppos
op	35:10	0:0	2	=
water	35:12	0:0	2	pos
water	35:15	0:0	2	;
return	36:4	36:14	2	dts
water	36:11	0:0	3	dts
