func	1:0	175:0	0	static int	gdigrab_read_header
params	2:19	0:0	1	
param	2:20	2:39	2	AVFormatContext *	s1
stmnts	0:0	174:14	1	
decl	4:4	4:43	2	struct gdigrab	*gdigrab
op	4:28	0:0	2	=
water	4:30	0:0	2	s1
op	4:32	0:0	2	->
water	4:34	0:0	2	priv_data
decl	5:4	5:13	2	HWND	hwnd
decl	6:4	6:25	2	HDC	source_hdc
op	6:19	0:0	2	=
water	6:21	0:0	2	NULL
decl	7:4	7:25	2	HDC	dest_hdc
op	7:19	0:0	2	=
water	7:21	0:0	2	NULL
decl	8:4	8:18	2	BITMAPINFO	bmi
decl	9:4	9:25	2	HBITMAP	hbmp
op	9:19	0:0	2	=
water	9:21	0:0	2	NULL
decl	10:4	10:25	2	void	*buffer
op	10:19	0:0	2	=
water	10:21	0:0	2	NULL
decl	11:4	11:39	2	const char	*filename
op	11:25	0:0	2	=
water	11:27	0:0	2	s1
op	11:29	0:0	2	->
water	11:31	0:0	2	filename
decl	12:4	12:31	2	const char	*name
op	12:25	0:0	2	=
water	12:27	0:0	2	NULL
decl	13:4	13:31	2	AVStream	*st
op	13:25	0:0	2	=
water	13:27	0:0	2	NULL
decl	14:4	14:11	2	int	bpp
decl	15:4	15:21	2	RECT	virtual_rect
decl	16:4	16:18	2	RECT	clip_rect
decl	17:4	17:14	2	BITMAP	bmp
decl	18:4	18:11	2	int	ret
if	19:4	33:4	2	(!strncmp (filename ,"title=" ,6 ))
cond	19:8	19:38	3	!strncmp (filename ,"title=" ,6 )
op	19:8	0:0	4	!
call	19:9	19:38	4	strncmp
arg	19:17	19:25	5	filename
water	19:17	0:0	6	filename
arg	19:27	19:35	5	"title="
water	19:27	0:0	6	"title="
arg	19:37	19:38	5	6
water	19:37	0:0	6	6
stmts	19:41	33:4	3	
water	19:41	0:0	4	{
water	20:8	0:0	4	name
op	20:13	0:0	4	=
water	20:15	0:0	4	filename
op	20:24	0:0	4	+
water	20:26	0:0	4	6
water	20:27	0:0	4	;
water	21:8	0:0	4	hwnd
op	21:13	0:0	4	=
call	21:15	21:36	4	FindWindow
arg	21:26	21:30	5	NULL
water	21:26	0:0	6	NULL
arg	21:32	21:36	5	name
water	21:32	0:0	6	name
water	21:37	0:0	4	;
if	22:8	27:8	4	(! hwnd)
cond	22:12	22:13	5	! hwnd
op	22:12	0:0	6	!
water	22:13	0:0	6	hwnd
stmts	22:19	27:8	5	
water	22:19	0:0	6	{
call	23:12	24:62	6	av_log
arg	23:19	23:21	7	s1
water	23:19	0:0	8	s1
arg	23:23	23:35	7	AV_LOG_ERROR
water	23:23	0:0	8	AV_LOG_ERROR
arg	24:19	24:56	7	"Can't find window '%s', aborting.\n"
water	24:19	0:0	8	"Can't find window '%s', aborting.\n"
arg	24:58	24:62	7	name
water	24:58	0:0	8	name
water	24:63	0:0	6	;
water	25:12	0:0	6	ret
op	25:16	0:0	6	=
call	25:18	25:29	6	AVERROR
arg	25:26	25:29	7	EIO
water	25:26	0:0	8	EIO
water	25:30	0:0	6	;
goto	26:12	26:22	6	error
water	26:17	0:0	7	error
water	27:8	0:0	6	}
if	28:8	32:8	4	(gdigrab -> show_region)
cond	28:12	28:21	5	gdigrab -> show_region
water	28:12	0:0	6	gdigrab
op	28:19	0:0	6	->
water	28:21	0:0	6	show_region
stmts	28:34	32:8	5	
water	28:34	0:0	6	{
call	29:12	30:65	6	av_log
arg	29:19	29:21	7	s1
water	29:19	0:0	8	s1
arg	29:23	29:37	7	AV_LOG_WARNING
water	29:23	0:0	8	AV_LOG_WARNING
arg	30:20	30:65	7	"Can't show region when grabbing a window.\n"
water	30:20	0:0	8	"Can't show region when grabbing a window.\n"
water	30:66	0:0	6	;
water	31:12	0:0	6	gdigrab
op	31:19	0:0	6	->
water	31:21	0:0	6	show_region
op	31:33	0:0	6	=
water	31:35	0:0	6	0
water	31:36	0:0	6	;
water	32:8	0:0	6	}
water	33:4	0:0	4	}
else	33:6	35:4	2
stmts	33:11	35:4	3	
if	33:11	35:4	4	(!strcmp (filename ,"desktop" ))
cond	33:15	33:42	5	!strcmp (filename ,"desktop" )
op	33:15	0:0	6	!
call	33:16	33:42	6	strcmp
arg	33:23	33:31	7	filename
water	33:23	0:0	8	filename
arg	33:33	33:42	7	"desktop"
water	33:33	0:0	8	"desktop"
stmts	33:45	35:4	5	
water	33:45	0:0	6	{
water	34:8	0:0	6	hwnd
op	34:13	0:0	6	=
water	34:15	0:0	6	NULL
water	34:19	0:0	6	;
water	35:4	0:0	6	}
else	35:6	40:4	2
stmts	35:11	40:4	3	
water	35:11	0:0	4	{
call	36:8	37:91	4	av_log
arg	36:15	36:17	5	s1
water	36:15	0:0	6	s1
arg	36:19	36:31	5	AV_LOG_ERROR
water	36:19	0:0	6	AV_LOG_ERROR
arg	37:15	37:91	5	"Please use \"desktop\" or \"title=<windowname>\" to specify your target.\n"
water	37:15	0:0	6	"Please use \"desktop\" or \"title=<windowname>\" to specify your target.\n"
water	37:92	0:0	4	;
water	38:8	0:0	4	ret
op	38:12	0:0	4	=
call	38:14	38:25	4	AVERROR
arg	38:22	38:25	5	EIO
water	38:22	0:0	6	EIO
water	38:26	0:0	4	;
goto	39:8	39:18	4	error
water	39:13	0:0	5	error
water	40:4	0:0	4	}
if	41:4	43:4	2	(hwnd)
cond	41:8	41:8	3	hwnd
water	41:8	0:0	4	hwnd
stmts	41:14	43:4	3	
water	41:14	0:0	4	{
call	42:8	42:41	4	GetClientRect
arg	42:22	42:26	5	hwnd
water	42:22	0:0	6	hwnd
arg	42:28	42:41	5	&virtual_rect
op	42:28	0:0	6	&
water	42:29	0:0	6	virtual_rect
water	42:42	0:0	4	;
water	43:4	0:0	4	}
else	43:6	48:4	2
stmts	43:11	48:4	3	
water	43:11	0:0	4	{
water	44:8	0:0	4	virtual_rect
op	44:20	0:0	4	.
water	44:21	0:0	4	left
op	44:26	0:0	4	=
call	44:28	44:62	4	GetSystemMetrics
arg	44:45	44:62	5	SM_XVIRTUALSCREEN
water	44:45	0:0	6	SM_XVIRTUALSCREEN
water	44:63	0:0	4	;
water	45:8	0:0	4	virtual_rect
op	45:20	0:0	4	.
water	45:21	0:0	4	top
op	45:25	0:0	4	=
call	45:27	45:61	4	GetSystemMetrics
arg	45:44	45:61	5	SM_YVIRTUALSCREEN
water	45:44	0:0	6	SM_YVIRTUALSCREEN
water	45:62	0:0	4	;
water	46:8	0:0	4	virtual_rect
op	46:20	0:0	4	.
water	46:21	0:0	4	right
op	46:27	0:0	4	=
water	46:29	0:0	4	virtual_rect
op	46:41	0:0	4	.
water	46:42	0:0	4	left
op	46:47	0:0	4	+
call	46:49	46:84	4	GetSystemMetrics
arg	46:66	46:84	5	SM_CXVIRTUALSCREEN
water	46:66	0:0	6	SM_CXVIRTUALSCREEN
water	46:85	0:0	4	;
water	47:8	0:0	4	virtual_rect
op	47:20	0:0	4	.
water	47:21	0:0	4	bottom
op	47:28	0:0	4	=
water	47:30	0:0	4	virtual_rect
op	47:42	0:0	4	.
water	47:43	0:0	4	top
op	47:47	0:0	4	+
call	47:49	47:84	4	GetSystemMetrics
arg	47:66	47:84	5	SM_CYVIRTUALSCREEN
water	47:66	0:0	6	SM_CYVIRTUALSCREEN
water	47:85	0:0	4	;
water	48:4	0:0	4	}
if	50:4	55:4	2	(! gdigrab -> width || ! gdigrab -> height)
cond	50:8	50:37	3	! gdigrab -> width || ! gdigrab -> height
op	50:8	0:0	4	!
water	50:9	0:0	4	gdigrab
op	50:16	0:0	4	->
water	50:18	0:0	4	width
op	50:24	0:0	4	||
op	50:27	0:0	4	!
water	50:28	0:0	4	gdigrab
op	50:35	0:0	4	->
water	50:37	0:0	4	height
stmts	50:45	55:4	3	
water	50:45	0:0	4	{
water	51:8	0:0	4	clip_rect
op	51:17	0:0	4	.
water	51:18	0:0	4	left
op	51:23	0:0	4	=
water	51:25	0:0	4	virtual_rect
op	51:37	0:0	4	.
water	51:38	0:0	4	left
water	51:42	0:0	4	;
water	52:8	0:0	4	clip_rect
op	52:17	0:0	4	.
water	52:18	0:0	4	top
op	52:22	0:0	4	=
water	52:24	0:0	4	virtual_rect
op	52:36	0:0	4	.
water	52:37	0:0	4	top
water	52:40	0:0	4	;
water	53:8	0:0	4	clip_rect
op	53:17	0:0	4	.
water	53:18	0:0	4	right
op	53:24	0:0	4	=
water	53:26	0:0	4	virtual_rect
op	53:38	0:0	4	.
water	53:39	0:0	4	right
water	53:44	0:0	4	;
water	54:8	0:0	4	clip_rect
op	54:17	0:0	4	.
water	54:18	0:0	4	bottom
op	54:25	0:0	4	=
water	54:27	0:0	4	virtual_rect
op	54:39	0:0	4	.
water	54:40	0:0	4	bottom
water	54:46	0:0	4	;
water	55:4	0:0	4	}
else	55:6	60:4	2
stmts	55:11	60:4	3	
water	55:11	0:0	4	{
water	56:8	0:0	4	clip_rect
op	56:17	0:0	4	.
water	56:18	0:0	4	left
op	56:23	0:0	4	=
water	56:25	0:0	4	gdigrab
op	56:32	0:0	4	->
water	56:34	0:0	4	offset_x
water	56:42	0:0	4	;
water	57:8	0:0	4	clip_rect
op	57:17	0:0	4	.
water	57:18	0:0	4	top
op	57:22	0:0	4	=
water	57:24	0:0	4	gdigrab
op	57:31	0:0	4	->
water	57:33	0:0	4	offset_y
water	57:41	0:0	4	;
water	58:8	0:0	4	clip_rect
op	58:17	0:0	4	.
water	58:18	0:0	4	right
op	58:24	0:0	4	=
water	58:26	0:0	4	gdigrab
op	58:33	0:0	4	->
water	58:35	0:0	4	width
op	58:41	0:0	4	+
water	58:43	0:0	4	gdigrab
op	58:50	0:0	4	->
water	58:52	0:0	4	offset_x
water	58:60	0:0	4	;
water	59:8	0:0	4	clip_rect
op	59:17	0:0	4	.
water	59:18	0:0	4	bottom
op	59:25	0:0	4	=
water	59:27	0:0	4	gdigrab
op	59:34	0:0	4	->
water	59:36	0:0	4	height
op	59:43	0:0	4	+
water	59:45	0:0	4	gdigrab
op	59:52	0:0	4	->
water	59:54	0:0	4	offset_y
water	59:62	0:0	4	;
water	60:4	0:0	4	}
if	61:4	73:4	2	(clip_rect . left < virtual_rect . left || clip_rect . top < virtual_rect . top || clip_rect . right > virtual_rect . right || clip_rect . bottom > virtual_rect . bottom)
cond	61:8	64:44	3	clip_rect . left < virtual_rect . left || clip_rect . top < virtual_rect . top || clip_rect . right > virtual_rect . right || clip_rect . bottom > virtual_rect . bottom
water	61:8	0:0	4	clip_rect
op	61:17	0:0	4	.
water	61:18	0:0	4	left
op	61:23	0:0	4	<
water	61:25	0:0	4	virtual_rect
op	61:37	0:0	4	.
water	61:38	0:0	4	left
op	61:43	0:0	4	||
water	62:12	0:0	4	clip_rect
op	62:21	0:0	4	.
water	62:22	0:0	4	top
op	62:26	0:0	4	<
water	62:28	0:0	4	virtual_rect
op	62:40	0:0	4	.
water	62:41	0:0	4	top
op	62:45	0:0	4	||
water	63:12	0:0	4	clip_rect
op	63:21	0:0	4	.
water	63:22	0:0	4	right
op	63:28	0:0	4	>
water	63:30	0:0	4	virtual_rect
op	63:42	0:0	4	.
water	63:43	0:0	4	right
op	63:49	0:0	4	||
water	64:12	0:0	4	clip_rect
op	64:21	0:0	4	.
water	64:22	0:0	4	bottom
op	64:29	0:0	4	>
water	64:31	0:0	4	virtual_rect
op	64:43	0:0	4	.
water	64:44	0:0	4	bottom
stmts	64:52	73:4	3	
water	64:52	0:0	4	{
call	65:12	70:59	4	av_log
arg	65:19	65:21	5	s1
water	65:19	0:0	6	s1
arg	65:23	65:35	5	AV_LOG_ERROR
water	65:23	0:0	6	AV_LOG_ERROR
arg	66:20	66:102	5	"Capture area (%li,%li),(%li,%li) extends outside window area (%li,%li),(%li,%li)"
water	66:20	0:0	6	"Capture area (%li,%li),(%li,%li) extends outside window area (%li,%li),(%li,%li)"
arg	67:20	67:34	5	clip_rect.left
water	67:20	0:0	6	clip_rect
op	67:29	0:0	6	.
water	67:30	0:0	6	left
arg	67:36	67:49	5	clip_rect.top
water	67:36	0:0	6	clip_rect
op	67:45	0:0	6	.
water	67:46	0:0	6	top
arg	68:20	68:35	5	clip_rect.right
water	68:20	0:0	6	clip_rect
op	68:29	0:0	6	.
water	68:30	0:0	6	right
arg	68:37	68:53	5	clip_rect.bottom
water	68:37	0:0	6	clip_rect
op	68:46	0:0	6	.
water	68:47	0:0	6	bottom
arg	69:20	69:37	5	virtual_rect.left
water	69:20	0:0	6	virtual_rect
op	69:32	0:0	6	.
water	69:33	0:0	6	left
arg	69:39	69:55	5	virtual_rect.top
water	69:39	0:0	6	virtual_rect
op	69:51	0:0	6	.
water	69:52	0:0	6	top
arg	70:20	70:38	5	virtual_rect.right
water	70:20	0:0	6	virtual_rect
op	70:32	0:0	6	.
water	70:33	0:0	6	right
arg	70:40	70:59	5	virtual_rect.bottom
water	70:40	0:0	6	virtual_rect
op	70:52	0:0	6	.
water	70:53	0:0	6	bottom
water	70:60	0:0	4	;
water	71:12	0:0	4	ret
op	71:16	0:0	4	=
call	71:18	71:29	4	AVERROR
arg	71:26	71:29	5	EIO
water	71:26	0:0	6	EIO
water	71:30	0:0	4	;
goto	72:12	72:22	4	error
water	72:17	0:0	5	error
water	73:4	0:0	4	}
water	76:4	0:0	2	source_hdc
op	76:15	0:0	2	=
call	76:17	76:27	2	GetDC
arg	76:23	76:27	3	hwnd
water	76:23	0:0	4	hwnd
water	76:28	0:0	2	;
if	77:4	81:4	2	(! source_hdc)
cond	77:8	77:9	3	! source_hdc
op	77:8	0:0	4	!
water	77:9	0:0	4	source_hdc
stmts	77:21	81:4	3	
water	77:21	0:0	4	{
call	78:8	78:60	4	WIN32_API_ERROR
arg	78:24	78:60	5	"Couldn't get window device context"
water	78:24	0:0	6	"Couldn't get window device context"
water	78:61	0:0	4	;
water	79:8	0:0	4	ret
op	79:12	0:0	4	=
call	79:14	79:25	4	AVERROR
arg	79:22	79:25	5	EIO
water	79:22	0:0	6	EIO
water	79:26	0:0	4	;
goto	80:8	80:18	4	error
water	80:13	0:0	5	error
water	81:4	0:0	4	}
water	82:4	0:0	2	bpp
op	82:8	0:0	2	=
call	82:10	82:45	2	GetDeviceCaps
arg	82:24	82:34	3	source_hdc
water	82:24	0:0	4	source_hdc
arg	82:36	82:45	3	BITSPIXEL
water	82:36	0:0	4	BITSPIXEL
water	82:46	0:0	2	;
if	83:4	90:4	2	(name)
cond	83:8	83:8	3	name
water	83:8	0:0	4	name
stmts	83:14	90:4	3	
water	83:14	0:0	4	{
call	84:8	89:49	4	av_log
arg	84:15	84:17	5	s1
water	84:15	0:0	6	s1
arg	84:19	84:30	5	AV_LOG_INFO
water	84:19	0:0	6	AV_LOG_INFO
arg	85:15	85:69	5	"Found window %s, capturing %lix%lix%i at (%li,%li)\n"
water	85:15	0:0	6	"Found window %s, capturing %lix%lix%i at (%li,%li)\n"
arg	86:15	86:19	5	name
water	86:15	0:0	6	name
arg	87:15	87:47	5	clip_rect.right-clip_rect.left
water	87:15	0:0	6	clip_rect
op	87:24	0:0	6	.
water	87:25	0:0	6	right
op	87:31	0:0	6	-
water	87:33	0:0	6	clip_rect
op	87:42	0:0	6	.
water	87:43	0:0	6	left
arg	88:15	88:47	5	clip_rect.bottom-clip_rect.top
water	88:15	0:0	6	clip_rect
op	88:24	0:0	6	.
water	88:25	0:0	6	bottom
op	88:32	0:0	6	-
water	88:34	0:0	6	clip_rect
op	88:43	0:0	6	.
water	88:44	0:0	6	top
arg	89:15	89:18	5	bpp
water	89:15	0:0	6	bpp
arg	89:20	89:34	5	clip_rect.left
water	89:20	0:0	6	clip_rect
op	89:29	0:0	6	.
water	89:30	0:0	6	left
arg	89:36	89:49	5	clip_rect.top
water	89:36	0:0	6	clip_rect
op	89:45	0:0	6	.
water	89:46	0:0	6	top
water	89:50	0:0	4	;
water	90:4	0:0	4	}
else	90:6	96:4	2
stmts	90:11	96:4	3	
water	90:11	0:0	4	{
call	91:8	95:49	4	av_log
arg	91:15	91:17	5	s1
water	91:15	0:0	6	s1
arg	91:19	91:30	5	AV_LOG_INFO
water	91:19	0:0	6	AV_LOG_INFO
arg	92:15	92:69	5	"Capturing whole desktop as %lix%lix%i at (%li,%li)\n"
water	92:15	0:0	6	"Capturing whole desktop as %lix%lix%i at (%li,%li)\n"
arg	93:15	93:47	5	clip_rect.right-clip_rect.left
water	93:15	0:0	6	clip_rect
op	93:24	0:0	6	.
water	93:25	0:0	6	right
op	93:31	0:0	6	-
water	93:33	0:0	6	clip_rect
op	93:42	0:0	6	.
water	93:43	0:0	6	left
arg	94:15	94:47	5	clip_rect.bottom-clip_rect.top
water	94:15	0:0	6	clip_rect
op	94:24	0:0	6	.
water	94:25	0:0	6	bottom
op	94:32	0:0	6	-
water	94:34	0:0	6	clip_rect
op	94:43	0:0	6	.
water	94:44	0:0	6	top
arg	95:15	95:18	5	bpp
water	95:15	0:0	6	bpp
arg	95:20	95:34	5	clip_rect.left
water	95:20	0:0	6	clip_rect
op	95:29	0:0	6	.
water	95:30	0:0	6	left
arg	95:36	95:49	5	clip_rect.top
water	95:36	0:0	6	clip_rect
op	95:45	0:0	6	.
water	95:46	0:0	6	top
water	95:50	0:0	4	;
water	96:4	0:0	4	}
if	97:4	102:4	2	(clip_rect . right - clip_rect . left <= 0 || clip_rect . bottom - clip_rect . top <= 0 || bpp % 8)
cond	97:8	98:57	3	clip_rect . right - clip_rect . left <= 0 || clip_rect . bottom - clip_rect . top <= 0 || bpp % 8
water	97:8	0:0	4	clip_rect
op	97:17	0:0	4	.
water	97:18	0:0	4	right
op	97:24	0:0	4	-
water	97:26	0:0	4	clip_rect
op	97:35	0:0	4	.
water	97:36	0:0	4	left
op	97:41	0:0	4	<=
water	97:44	0:0	4	0
op	97:46	0:0	4	||
water	98:12	0:0	4	clip_rect
op	98:21	0:0	4	.
water	98:22	0:0	4	bottom
op	98:29	0:0	4	-
water	98:31	0:0	4	clip_rect
op	98:40	0:0	4	.
water	98:41	0:0	4	top
op	98:45	0:0	4	<=
water	98:48	0:0	4	0
op	98:50	0:0	4	||
water	98:53	0:0	4	bpp
op	98:56	0:0	4	%
water	98:57	0:0	4	8
stmts	98:60	102:4	3	
water	98:60	0:0	4	{
call	99:8	99:65	4	av_log
arg	99:15	99:17	5	s1
water	99:15	0:0	6	s1
arg	99:19	99:31	5	AV_LOG_ERROR
water	99:19	0:0	6	AV_LOG_ERROR
arg	99:33	99:65	5	"Invalid properties, aborting\n"
water	99:33	0:0	6	"Invalid properties, aborting\n"
water	99:66	0:0	4	;
water	100:8	0:0	4	ret
op	100:12	0:0	4	=
call	100:14	100:25	4	AVERROR
arg	100:22	100:25	5	EIO
water	100:22	0:0	6	EIO
water	100:26	0:0	4	;
goto	101:8	101:18	4	error
water	101:13	0:0	5	error
water	102:4	0:0	4	}
water	103:4	0:0	2	dest_hdc
op	103:13	0:0	2	=
call	103:15	103:44	2	CreateCompatibleDC
arg	103:34	103:44	3	source_hdc
water	103:34	0:0	4	source_hdc
water	103:45	0:0	2	;
if	104:4	108:4	2	(! dest_hdc)
cond	104:8	104:9	3	! dest_hdc
op	104:8	0:0	4	!
water	104:9	0:0	4	dest_hdc
stmts	104:19	108:4	3	
water	104:19	0:0	4	{
call	105:8	105:54	4	WIN32_API_ERROR
arg	105:24	105:54	5	"Screen DC CreateCompatibleDC"
water	105:24	0:0	6	"Screen DC CreateCompatibleDC"
water	105:55	0:0	4	;
water	106:8	0:0	4	ret
op	106:12	0:0	4	=
call	106:14	106:25	4	AVERROR
arg	106:22	106:25	5	EIO
water	106:22	0:0	6	EIO
water	106:26	0:0	4	;
goto	107:8	107:18	4	error
water	107:13	0:0	5	error
water	108:4	0:0	4	}
water	110:4	0:0	2	bmi
op	110:7	0:0	2	.
water	110:8	0:0	2	bmiHeader
op	110:17	0:0	2	.
water	110:18	0:0	2	biSize
op	110:34	0:0	2	=
op	110:36	0:0	2	sizeof
water	110:42	0:0	2	(
water	110:43	0:0	2	BITMAPINFOHEADER
water	110:59	0:0	2	)
water	110:60	0:0	2	;
water	111:4	0:0	2	bmi
op	111:7	0:0	2	.
water	111:8	0:0	2	bmiHeader
op	111:17	0:0	2	.
water	111:18	0:0	2	biWidth
op	111:34	0:0	2	=
water	111:36	0:0	2	clip_rect
op	111:45	0:0	2	.
water	111:46	0:0	2	right
op	111:52	0:0	2	-
water	111:54	0:0	2	clip_rect
op	111:63	0:0	2	.
water	111:64	0:0	2	left
water	111:68	0:0	2	;
water	112:4	0:0	2	bmi
op	112:7	0:0	2	.
water	112:8	0:0	2	bmiHeader
op	112:17	0:0	2	.
water	112:18	0:0	2	biHeight
op	112:34	0:0	2	=
op	112:36	0:0	2	-
water	112:37	0:0	2	(
water	112:38	0:0	2	clip_rect
op	112:47	0:0	2	.
water	112:48	0:0	2	bottom
op	112:55	0:0	2	-
water	112:57	0:0	2	clip_rect
op	112:66	0:0	2	.
water	112:67	0:0	2	top
water	112:70	0:0	2	)
water	112:71	0:0	2	;
water	113:4	0:0	2	bmi
op	113:7	0:0	2	.
water	113:8	0:0	2	bmiHeader
op	113:17	0:0	2	.
water	113:18	0:0	2	biPlanes
op	113:34	0:0	2	=
water	113:36	0:0	2	1
water	113:37	0:0	2	;
water	114:4	0:0	2	bmi
op	114:7	0:0	2	.
water	114:8	0:0	2	bmiHeader
op	114:17	0:0	2	.
water	114:18	0:0	2	biBitCount
op	114:34	0:0	2	=
water	114:36	0:0	2	bpp
water	114:39	0:0	2	;
water	115:4	0:0	2	bmi
op	115:7	0:0	2	.
water	115:8	0:0	2	bmiHeader
op	115:17	0:0	2	.
water	115:18	0:0	2	biCompression
op	115:34	0:0	2	=
water	115:36	0:0	2	BI_RGB
water	115:42	0:0	2	;
water	116:4	0:0	2	bmi
op	116:7	0:0	2	.
water	116:8	0:0	2	bmiHeader
op	116:17	0:0	2	.
water	116:18	0:0	2	biSizeImage
op	116:34	0:0	2	=
water	116:36	0:0	2	0
water	116:37	0:0	2	;
water	117:4	0:0	2	bmi
op	117:7	0:0	2	.
water	117:8	0:0	2	bmiHeader
op	117:17	0:0	2	.
water	117:18	0:0	2	biXPelsPerMeter
op	117:34	0:0	2	=
water	117:36	0:0	2	0
water	117:37	0:0	2	;
water	118:4	0:0	2	bmi
op	118:7	0:0	2	.
water	118:8	0:0	2	bmiHeader
op	118:17	0:0	2	.
water	118:18	0:0	2	biYPelsPerMeter
op	118:34	0:0	2	=
water	118:36	0:0	2	0
water	118:37	0:0	2	;
water	119:4	0:0	2	bmi
op	119:7	0:0	2	.
water	119:8	0:0	2	bmiHeader
op	119:17	0:0	2	.
water	119:18	0:0	2	biClrUsed
op	119:34	0:0	2	=
water	119:36	0:0	2	0
water	119:37	0:0	2	;
water	120:4	0:0	2	bmi
op	120:7	0:0	2	.
water	120:8	0:0	2	bmiHeader
op	120:17	0:0	2	.
water	120:18	0:0	2	biClrImportant
op	120:34	0:0	2	=
water	120:36	0:0	2	0
water	120:37	0:0	2	;
water	121:4	0:0	2	hbmp
op	121:9	0:0	2	=
call	121:11	122:28	2	CreateDIBSection
arg	121:28	121:36	3	dest_hdc
water	121:28	0:0	4	dest_hdc
arg	121:38	121:42	3	&bmi
op	121:38	0:0	4	&
water	121:39	0:0	4	bmi
arg	121:44	121:58	3	DIB_RGB_COLORS
water	121:44	0:0	4	DIB_RGB_COLORS
arg	122:12	122:19	3	&buffer
op	122:12	0:0	4	&
water	122:13	0:0	4	buffer
arg	122:21	122:25	3	NULL
water	122:21	0:0	4	NULL
arg	122:27	122:28	3	0
water	122:27	0:0	4	0
water	122:29	0:0	2	;
if	123:4	127:4	2	(! hbmp)
cond	123:8	123:9	3	! hbmp
op	123:8	0:0	4	!
water	123:9	0:0	4	hbmp
stmts	123:15	127:4	3	
water	123:15	0:0	4	{
call	124:8	124:46	4	WIN32_API_ERROR
arg	124:24	124:46	5	"Creating DIB Section"
water	124:24	0:0	6	"Creating DIB Section"
water	124:47	0:0	4	;
water	125:8	0:0	4	ret
op	125:12	0:0	4	=
call	125:14	125:25	4	AVERROR
arg	125:22	125:25	5	EIO
water	125:22	0:0	6	EIO
water	125:26	0:0	4	;
goto	126:8	126:18	4	error
water	126:13	0:0	5	error
water	127:4	0:0	4	}
if	128:4	132:4	2	(!SelectObject (dest_hdc ,hbmp ))
cond	128:8	128:36	3	!SelectObject (dest_hdc ,hbmp )
op	128:8	0:0	4	!
call	128:9	128:36	4	SelectObject
arg	128:22	128:30	5	dest_hdc
water	128:22	0:0	6	dest_hdc
arg	128:32	128:36	5	hbmp
water	128:32	0:0	6	hbmp
stmts	128:39	132:4	3	
water	128:39	0:0	4	{
call	129:8	129:38	4	WIN32_API_ERROR
arg	129:24	129:38	5	"SelectObject"
water	129:24	0:0	6	"SelectObject"
water	129:39	0:0	4	;
water	130:8	0:0	4	ret
op	130:12	0:0	4	=
call	130:14	130:25	4	AVERROR
arg	130:22	130:25	5	EIO
water	130:22	0:0	6	EIO
water	130:26	0:0	4	;
goto	131:8	131:18	4	error
water	131:13	0:0	5	error
water	132:4	0:0	4	}
call	134:4	134:40	2	GetObject
arg	134:14	134:18	3	hbmp
water	134:14	0:0	4	hbmp
arg	134:20	134:34	3	sizeof(BITMAP)
op	134:20	0:0	4	sizeof
water	134:26	0:0	4	(
water	134:27	0:0	4	BITMAP
water	134:33	0:0	4	)
arg	134:36	134:40	3	&bmp
op	134:36	0:0	4	&
water	134:37	0:0	4	bmp
water	134:41	0:0	2	;
water	135:4	0:0	2	st
op	135:7	0:0	2	=
call	135:9	135:37	2	avformat_new_stream
arg	135:29	135:31	3	s1
water	135:29	0:0	4	s1
arg	135:33	135:37	3	NULL
water	135:33	0:0	4	NULL
water	135:38	0:0	2	;
if	136:4	139:4	2	(! st)
cond	136:8	136:9	3	! st
op	136:8	0:0	4	!
water	136:9	0:0	4	st
stmts	136:13	139:4	3	
water	136:13	0:0	4	{
water	137:8	0:0	4	ret
op	137:12	0:0	4	=
call	137:14	137:28	4	AVERROR
arg	137:22	137:28	5	ENOMEM
water	137:22	0:0	6	ENOMEM
water	137:29	0:0	4	;
goto	138:8	138:18	4	error
water	138:13	0:0	5	error
water	139:4	0:0	4	}
call	140:4	140:42	2	avpriv_set_pts_info
arg	140:24	140:26	3	st
water	140:24	0:0	4	st
arg	140:28	140:30	3	64
water	140:28	0:0	4	64
arg	140:32	140:33	3	1
water	140:32	0:0	4	1
arg	140:35	140:42	3	1000000
water	140:35	0:0	4	1000000
water	140:43	0:0	2	;
water	141:4	0:0	2	gdigrab
op	141:11	0:0	2	->
water	141:13	0:0	2	frame_size
op	141:25	0:0	2	=
water	141:27	0:0	2	bmp
op	141:30	0:0	2	.
water	141:31	0:0	2	bmWidthBytes
op	141:44	0:0	2	*
water	141:46	0:0	2	bmp
op	141:49	0:0	2	.
water	141:50	0:0	2	bmHeight
op	141:59	0:0	2	*
water	141:61	0:0	2	bmp
op	141:64	0:0	2	.
water	141:65	0:0	2	bmPlanes
water	141:73	0:0	2	;
water	142:4	0:0	2	gdigrab
op	142:11	0:0	2	->
water	142:13	0:0	2	header_size
op	142:25	0:0	2	=
op	142:27	0:0	2	sizeof
water	142:33	0:0	2	(
water	142:34	0:0	2	BITMAPFILEHEADER
water	142:50	0:0	2	)
op	142:52	0:0	2	+
op	142:54	0:0	2	sizeof
water	142:60	0:0	2	(
water	142:61	0:0	2	BITMAPINFOHEADER
water	142:77	0:0	2	)
op	142:79	0:0	2	+
water	143:27	0:0	2	(
water	143:28	0:0	2	bpp
op	143:32	0:0	2	<=
water	143:35	0:0	2	8
water	143:37	0:0	2	?
water	143:39	0:0	2	(
water	143:40	0:0	2	1
op	143:42	0:0	2	<<
water	143:45	0:0	2	bpp
water	143:48	0:0	2	)
water	143:50	0:0	2	:
water	143:52	0:0	2	0
water	143:53	0:0	2	)
op	143:55	0:0	2	*
op	143:57	0:0	2	sizeof
water	143:63	0:0	2	(
water	143:64	0:0	2	RGBQUAD
water	143:71	0:0	2	)
water	143:73	0:0	2	;
water	144:4	0:0	2	gdigrab
op	144:11	0:0	2	->
water	144:13	0:0	2	time_base
op	144:25	0:0	2	=
call	144:27	144:54	2	av_inv_q
arg	144:36	144:54	3	gdigrab->framerate
water	144:36	0:0	4	gdigrab
op	144:43	0:0	4	->
water	144:45	0:0	4	framerate
water	144:55	0:0	2	;
water	145:4	0:0	2	gdigrab
op	145:11	0:0	2	->
water	145:13	0:0	2	time_frame
op	145:25	0:0	2	=
call	145:27	145:38	2	av_gettime
op	145:40	0:0	2	/
call	145:42	145:67	2	av_q2d
arg	145:49	145:67	3	gdigrab->time_base
water	145:49	0:0	4	gdigrab
op	145:56	0:0	4	->
water	145:58	0:0	4	time_base
water	145:68	0:0	2	;
water	146:4	0:0	2	gdigrab
op	146:11	0:0	2	->
water	146:13	0:0	2	hwnd
op	146:24	0:0	2	=
water	146:26	0:0	2	hwnd
water	146:30	0:0	2	;
water	147:4	0:0	2	gdigrab
op	147:11	0:0	2	->
water	147:13	0:0	2	source_hdc
op	147:24	0:0	2	=
water	147:26	0:0	2	source_hdc
water	147:36	0:0	2	;
water	148:4	0:0	2	gdigrab
op	148:11	0:0	2	->
water	148:13	0:0	2	dest_hdc
op	148:24	0:0	2	=
water	148:26	0:0	2	dest_hdc
water	148:34	0:0	2	;
water	149:4	0:0	2	gdigrab
op	149:11	0:0	2	->
water	149:13	0:0	2	hbmp
op	149:24	0:0	2	=
water	149:26	0:0	2	hbmp
water	149:30	0:0	2	;
water	150:4	0:0	2	gdigrab
op	150:11	0:0	2	->
water	150:13	0:0	2	bmi
op	150:24	0:0	2	=
water	150:26	0:0	2	bmi
water	150:29	0:0	2	;
water	151:4	0:0	2	gdigrab
op	151:11	0:0	2	->
water	151:13	0:0	2	buffer
op	151:24	0:0	2	=
water	151:26	0:0	2	buffer
water	151:32	0:0	2	;
water	152:4	0:0	2	gdigrab
op	152:11	0:0	2	->
water	152:13	0:0	2	clip_rect
op	152:24	0:0	2	=
water	152:26	0:0	2	clip_rect
water	152:35	0:0	2	;
water	153:4	0:0	2	gdigrab
op	153:11	0:0	2	->
water	153:13	0:0	2	cursor_error_printed
op	153:34	0:0	2	=
water	153:36	0:0	2	0
water	153:37	0:0	2	;
if	154:4	159:4	2	(gdigrab -> show_region)
cond	154:8	154:17	3	gdigrab -> show_region
water	154:8	0:0	4	gdigrab
op	154:15	0:0	4	->
water	154:17	0:0	4	show_region
stmts	154:30	159:4	3	
water	154:30	0:0	4	{
if	155:8	158:8	4	(gdigrab_region_wnd_init (s1 ,gdigrab ))
cond	155:12	155:47	5	gdigrab_region_wnd_init (s1 ,gdigrab )
call	155:12	155:47	6	gdigrab_region_wnd_init
arg	155:36	155:38	7	s1
water	155:36	0:0	8	s1
arg	155:40	155:47	7	gdigrab
water	155:40	0:0	8	gdigrab
stmts	155:50	158:8	5	
water	155:50	0:0	6	{
water	156:12	0:0	6	ret
op	156:16	0:0	6	=
call	156:18	156:29	6	AVERROR
arg	156:26	156:29	7	EIO
water	156:26	0:0	8	EIO
water	156:30	0:0	6	;
goto	157:12	157:22	6	error
water	157:17	0:0	7	error
water	158:8	0:0	6	}
water	159:4	0:0	4	}
water	160:4	0:0	2	st
op	160:6	0:0	2	->
water	160:8	0:0	2	codec
op	160:13	0:0	2	->
water	160:15	0:0	2	codec_type
op	160:26	0:0	2	=
water	160:28	0:0	2	AVMEDIA_TYPE_VIDEO
water	160:46	0:0	2	;
water	161:4	0:0	2	st
op	161:6	0:0	2	->
water	161:8	0:0	2	codec
op	161:13	0:0	2	->
water	161:15	0:0	2	codec_id
op	161:26	0:0	2	=
water	161:28	0:0	2	AV_CODEC_ID_BMP
water	161:43	0:0	2	;
water	162:4	0:0	2	st
op	162:6	0:0	2	->
water	162:8	0:0	2	codec
op	162:13	0:0	2	->
water	162:15	0:0	2	time_base
op	162:26	0:0	2	=
water	162:28	0:0	2	gdigrab
op	162:35	0:0	2	->
water	162:37	0:0	2	time_base
water	162:46	0:0	2	;
water	163:4	0:0	2	st
op	163:6	0:0	2	->
water	163:8	0:0	2	codec
op	163:13	0:0	2	->
water	163:15	0:0	2	bit_rate
op	163:26	0:0	2	=
water	163:28	0:0	2	(
water	163:29	0:0	2	gdigrab
op	163:36	0:0	2	->
water	163:38	0:0	2	header_size
op	163:50	0:0	2	+
water	163:52	0:0	2	gdigrab
op	163:59	0:0	2	->
water	163:61	0:0	2	frame_size
water	163:71	0:0	2	)
op	163:73	0:0	2	*
water	163:75	0:0	2	1
op	163:76	0:0	2	/
call	163:77	163:102	2	av_q2d
arg	163:84	163:102	3	gdigrab->time_base
water	163:84	0:0	4	gdigrab
op	163:91	0:0	4	->
water	163:93	0:0	4	time_base
op	163:104	0:0	2	*
water	163:106	0:0	2	8
water	163:107	0:0	2	;
return	164:4	164:12	2	0
water	164:11	0:0	3	0
label	165:0	165:5	2	error :
if	166:4	167:35	2	(source_hdc)
cond	166:8	166:8	3	source_hdc
water	166:8	0:0	4	source_hdc
stmts	167:8	167:35	3	
call	167:8	167:34	4	ReleaseDC
arg	167:18	167:22	5	hwnd
water	167:18	0:0	6	hwnd
arg	167:24	167:34	5	source_hdc
water	167:24	0:0	6	source_hdc
water	167:35	0:0	4	;
if	168:4	169:26	2	(dest_hdc)
cond	168:8	168:8	3	dest_hdc
water	168:8	0:0	4	dest_hdc
stmts	169:8	169:26	3	
call	169:8	169:25	4	DeleteDC
arg	169:17	169:25	5	dest_hdc
water	169:17	0:0	6	dest_hdc
water	169:26	0:0	4	;
if	170:4	171:26	2	(hbmp)
cond	170:8	170:8	3	hbmp
water	170:8	0:0	4	hbmp
stmts	171:8	171:26	3	
call	171:8	171:25	4	DeleteObject
arg	171:21	171:25	5	hbmp
water	171:21	0:0	6	hbmp
water	171:26	0:0	4	;
if	172:4	173:28	2	(source_hdc)
cond	172:8	172:8	3	source_hdc
water	172:8	0:0	4	source_hdc
stmts	173:8	173:28	3	
call	173:8	173:27	4	DeleteDC
arg	173:17	173:27	5	source_hdc
water	173:17	0:0	6	source_hdc
water	173:28	0:0	4	;
return	174:4	174:14	2	ret
water	174:11	0:0	3	ret
