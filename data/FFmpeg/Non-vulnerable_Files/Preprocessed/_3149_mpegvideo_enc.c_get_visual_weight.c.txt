func	1:0	22:0	0	static void	get_visual_weight
params	1:29	0:0	1	
param	1:30	1:45	2	int16_t *	weight
param	1:47	1:59	2	uint8_t *	ptr
param	1:61	1:71	2	int	stride
stmnts	0:0	21:4	1	
decl	3:4	3:12	2	int	x
water	3:9	0:0	2	,
decl	3:4	3:12	2	int	y
for	5:4	21:4	2	(y = 0 ;y < 8;y ++)
forinit	5:9	5:14	3	y = 0 ;
water	5:9	0:0	4	y
op	5:11	0:0	4	=
water	5:13	0:0	4	0
water	5:14	0:0	4	;
cond	5:16	5:20	3	y < 8
water	5:16	0:0	4	y
op	5:18	0:0	4	<
water	5:20	0:0	4	8
forexpr	5:23	5:24	3	y ++
water	5:23	0:0	4	y
op	5:24	0:0	4	++
stmts	5:28	21:4	3	
water	5:28	0:0	4	{
for	6:8	20:8	4	(x = 0 ;x < 8;x ++)
forinit	6:13	6:18	5	x = 0 ;
water	6:13	0:0	6	x
op	6:15	0:0	6	=
water	6:17	0:0	6	0
water	6:18	0:0	6	;
cond	6:20	6:24	5	x < 8
water	6:20	0:0	6	x
op	6:22	0:0	6	<
water	6:24	0:0	6	8
forexpr	6:27	6:28	5	x ++
water	6:27	0:0	6	x
op	6:28	0:0	6	++
stmts	6:32	20:8	5	
water	6:32	0:0	6	{
decl	7:12	7:22	6	int	x2
water	7:18	0:0	6	,
decl	7:12	7:22	6	int	y2
decl	8:12	8:23	6	int	sum
op	8:20	0:0	6	=
water	8:22	0:0	6	0
decl	9:12	9:23	6	int	sqr
op	9:20	0:0	6	=
water	9:22	0:0	6	0
decl	10:12	10:25	6	int	count
op	10:22	0:0	6	=
water	10:24	0:0	6	0
for	11:12	18:12	6	(y2 =FFMAX (y - 1 ,0 ) ;y2 <FFMIN (8 ,y + 2 );y2 ++)
forinit	11:17	11:37	7	y2 =FFMAX (y - 1 ,0 ) ;
water	11:17	0:0	8	y2
op	11:20	0:0	8	=
call	11:22	11:36	8	FFMAX
arg	11:28	11:33	9	y-1
water	11:28	0:0	10	y
op	11:30	0:0	10	-
water	11:32	0:0	10	1
arg	11:35	11:36	9	0
water	11:35	0:0	10	0
water	11:37	0:0	8	;
cond	11:39	11:58	7	y2 <FFMIN (8 ,y + 2 )
water	11:39	0:0	8	y2
op	11:42	0:0	8	<
call	11:44	11:58	8	FFMIN
arg	11:50	11:51	9	8
water	11:50	0:0	10	8
arg	11:53	11:58	9	y+2
water	11:53	0:0	10	y
op	11:55	0:0	10	+
water	11:57	0:0	10	2
forexpr	11:61	11:63	7	y2 ++
water	11:61	0:0	8	y2
op	11:63	0:0	8	++
stmts	11:67	18:12	7	
water	11:67	0:0	8	{
for	12:16	17:16	8	(x2 =FFMAX (x - 1 ,0 ) ;x2 <FFMIN (8 ,x + 2 );x2 ++)
forinit	12:21	12:40	9	x2 =FFMAX (x - 1 ,0 ) ;
water	12:21	0:0	10	x2
op	12:23	0:0	10	=
call	12:25	12:39	10	FFMAX
arg	12:31	12:36	11	x-1
water	12:31	0:0	12	x
op	12:33	0:0	12	-
water	12:35	0:0	12	1
arg	12:38	12:39	11	0
water	12:38	0:0	12	0
water	12:40	0:0	10	;
cond	12:42	12:61	9	x2 <FFMIN (8 ,x + 2 )
water	12:42	0:0	10	x2
op	12:45	0:0	10	<
call	12:47	12:61	10	FFMIN
arg	12:53	12:54	11	8
water	12:53	0:0	12	8
arg	12:56	12:61	11	x+2
water	12:56	0:0	12	x
op	12:58	0:0	12	+
water	12:60	0:0	12	2
forexpr	12:64	12:66	9	x2 ++
water	12:64	0:0	10	x2
op	12:66	0:0	10	++
stmts	12:70	17:16	9	
water	12:70	0:0	10	{
decl	13:20	13:49	10	int	v
op	13:26	0:0	10	=
water	13:28	0:0	10	ptr
op	13:31	0:0	10	[
water	13:32	0:0	10	x2
op	13:35	0:0	10	+
water	13:37	0:0	10	y2
op	13:40	0:0	10	*
water	13:42	0:0	10	stride
op	13:48	0:0	10	]
water	14:20	0:0	10	sum
op	14:24	0:0	10	+=
water	14:27	0:0	10	v
water	14:28	0:0	10	;
water	15:20	0:0	10	sqr
op	15:24	0:0	10	+=
water	15:27	0:0	10	v
op	15:29	0:0	10	*
water	15:31	0:0	10	v
water	15:32	0:0	10	;
water	16:20	0:0	10	count
op	16:25	0:0	10	++
water	16:27	0:0	10	;
water	17:16	0:0	10	}
water	18:12	0:0	8	}
water	19:12	0:0	6	weight
op	19:18	0:0	6	[
water	19:19	0:0	6	x
op	19:21	0:0	6	+
water	19:23	0:0	6	8
op	19:25	0:0	6	*
water	19:27	0:0	6	y
op	19:28	0:0	6	]
op	19:29	0:0	6	=
water	19:31	0:0	6	(
water	19:32	0:0	6	36
call	19:35	19:68	6	*ff_sqrt
arg	19:45	19:68	7	count*sqr-sum*sum
water	19:45	0:0	8	count
op	19:51	0:0	8	*
water	19:53	0:0	8	sqr
op	19:57	0:0	8	-
water	19:59	0:0	8	sum
op	19:63	0:0	8	*
water	19:65	0:0	8	sum
water	19:69	0:0	6	)
op	19:71	0:0	6	/
water	19:73	0:0	6	count
water	19:78	0:0	6	;
water	20:8	0:0	6	}
water	21:4	0:0	4	}
