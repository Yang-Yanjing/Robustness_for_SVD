func	1:15	66:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	65:12	1	
decl	3:4	3:36	2	RemovelogoContext	*s
op	3:25	0:0	2	=
water	3:27	0:0	2	ctx
op	3:30	0:0	2	->
water	3:32	0:0	2	priv
decl	4:4	4:15	2	int	***mask
decl	5:4	5:15	2	int	ret
op	5:12	0:0	2	=
water	5:14	0:0	2	0
decl	6:4	6:21	2	int	a
water	6:9	0:0	2	,
decl	6:4	6:21	2	int	b
water	6:12	0:0	2	,
decl	6:4	6:21	2	int	c
water	6:15	0:0	2	,
decl	6:4	6:21	2	int	w
water	6:18	0:0	2	,
decl	6:4	6:21	2	int	h
decl	7:4	7:46	2	int	full_max_mask_size
water	7:26	0:0	2	,
decl	7:4	7:46	2	int	half_max_mask_size
if	8:4	11:4	2	(! s -> filename)
cond	8:8	8:12	3	! s -> filename
op	8:8	0:0	4	!
water	8:9	0:0	4	s
op	8:10	0:0	4	->
water	8:12	0:0	4	filename
stmts	8:22	11:4	3	
water	8:22	0:0	4	{
call	9:8	9:71	4	av_log
arg	9:15	9:18	5	ctx
water	9:15	0:0	6	ctx
arg	9:20	9:32	5	AV_LOG_ERROR
water	9:20	0:0	6	AV_LOG_ERROR
arg	9:34	9:71	5	"The bitmap file name is mandatory\n"
water	9:34	0:0	6	"The bitmap file name is mandatory\n"
water	9:72	0:0	4	;
return	10:8	10:30	4	AVERROR(EINVAL)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	EINVAL
water	10:23	0:0	7	EINVAL
water	11:4	0:0	4	}
if	13:4	14:18	2	(( ret =load_mask (& s -> full_mask_data ,& w ,& h ,s -> filename ,ctx ) ) < 0)
cond	13:8	13:74	3	( ret =load_mask (& s -> full_mask_data ,& w ,& h ,s -> filename ,ctx ) ) < 0
water	13:8	0:0	4	(
water	13:9	0:0	4	ret
op	13:13	0:0	4	=
call	13:15	13:69	4	load_mask
arg	13:25	13:43	5	&s->full_mask_data
op	13:25	0:0	6	&
water	13:26	0:0	6	s
op	13:27	0:0	6	->
water	13:29	0:0	6	full_mask_data
arg	13:45	13:47	5	&w
op	13:45	0:0	6	&
water	13:46	0:0	6	w
arg	13:49	13:51	5	&h
op	13:49	0:0	6	&
water	13:50	0:0	6	h
arg	13:53	13:64	5	s->filename
water	13:53	0:0	6	s
op	13:54	0:0	6	->
water	13:56	0:0	6	filename
arg	13:66	13:69	5	ctx
water	13:66	0:0	6	ctx
water	13:70	0:0	4	)
op	13:72	0:0	4	<
water	13:74	0:0	4	0
stmts	14:8	14:18	3	
return	14:8	14:18	4	ret
water	14:15	0:0	5	ret
water	15:4	0:0	2	s
op	15:5	0:0	2	->
water	15:7	0:0	2	mask_w
op	15:14	0:0	2	=
water	15:16	0:0	2	w
water	15:17	0:0	2	;
water	16:4	0:0	2	s
op	16:5	0:0	2	->
water	16:7	0:0	2	mask_h
op	16:14	0:0	2	=
water	16:16	0:0	2	h
water	16:17	0:0	2	;
call	17:4	18:57	2	convert_mask_to_strength_mask
arg	17:34	17:51	3	s->full_mask_data
water	17:34	0:0	4	s
op	17:35	0:0	4	->
water	17:37	0:0	4	full_mask_data
arg	17:53	17:54	3	w
water	17:53	0:0	4	w
arg	17:56	17:57	3	w
water	17:56	0:0	4	w
arg	17:59	17:60	3	h
water	17:59	0:0	4	h
arg	18:34	18:36	3	16
water	18:34	0:0	4	16
arg	18:38	18:57	3	&full_max_mask_size
op	18:38	0:0	4	&
water	18:39	0:0	4	full_max_mask_size
water	18:58	0:0	2	;
if	20:4	21:30	2	(! ( s -> half_mask_data =av_mallocz (w / 2 * h / 2 ) ))
cond	20:8	20:51	3	! ( s -> half_mask_data =av_mallocz (w / 2 * h / 2 ) )
op	20:8	0:0	4	!
water	20:9	0:0	4	(
water	20:10	0:0	4	s
op	20:11	0:0	4	->
water	20:13	0:0	4	half_mask_data
op	20:28	0:0	4	=
call	20:30	20:50	4	av_mallocz
arg	20:41	20:50	5	w/2*h/2
water	20:41	0:0	6	w
op	20:42	0:0	6	/
water	20:43	0:0	6	2
op	20:45	0:0	6	*
water	20:47	0:0	6	h
op	20:48	0:0	6	/
water	20:49	0:0	6	2
water	20:51	0:0	4	)
stmts	21:8	21:30	3	
return	21:8	21:30	4	AVERROR(ENOMEM)
call	21:15	21:29	5	AVERROR
arg	21:23	21:29	6	ENOMEM
water	21:23	0:0	7	ENOMEM
call	22:4	24:54	2	generate_half_size_image
arg	22:29	22:46	3	s->full_mask_data
water	22:29	0:0	4	s
op	22:30	0:0	4	->
water	22:32	0:0	4	full_mask_data
arg	22:48	22:49	3	w
water	22:48	0:0	4	w
arg	23:29	23:46	3	s->half_mask_data
water	23:29	0:0	4	s
op	23:30	0:0	4	->
water	23:32	0:0	4	half_mask_data
arg	23:48	23:51	3	w/2
water	23:48	0:0	4	w
op	23:49	0:0	4	/
water	23:50	0:0	4	2
arg	24:29	24:30	3	w
water	24:29	0:0	4	w
arg	24:32	24:33	3	h
water	24:32	0:0	4	h
arg	24:35	24:54	3	&half_max_mask_size
op	24:35	0:0	4	&
water	24:36	0:0	4	half_max_mask_size
water	24:55	0:0	2	;
water	25:4	0:0	2	s
op	25:5	0:0	2	->
water	25:7	0:0	2	max_mask_size
op	25:21	0:0	2	=
call	25:23	25:67	2	FFMAX
arg	25:29	25:47	3	full_max_mask_size
water	25:29	0:0	4	full_max_mask_size
arg	25:49	25:67	3	half_max_mask_size
water	25:49	0:0	4	half_max_mask_size
water	25:68	0:0	2	;
water	30:4	0:0	2	mask
op	30:9	0:0	2	=
water	30:11	0:0	2	(
water	30:12	0:0	2	int
op	30:16	0:0	2	*
op	30:17	0:0	2	*
op	30:18	0:0	2	*
water	30:19	0:0	2	)
call	30:20	30:72	2	av_malloc_array
arg	30:36	30:56	3	s->max_mask_size+1
water	30:36	0:0	4	s
op	30:37	0:0	4	->
water	30:39	0:0	4	max_mask_size
op	30:53	0:0	4	+
water	30:55	0:0	4	1
arg	30:58	30:72	3	sizeof(int**)
op	30:58	0:0	4	sizeof
water	30:64	0:0	4	(
water	30:65	0:0	4	int
op	30:69	0:0	4	*
op	30:70	0:0	4	*
water	30:71	0:0	4	)
water	30:73	0:0	2	;
if	31:4	32:30	2	(! mask)
cond	31:8	31:9	3	! mask
op	31:8	0:0	4	!
water	31:9	0:0	4	mask
stmts	32:8	32:30	3	
return	32:8	32:30	4	AVERROR(ENOMEM)
call	32:15	32:29	5	AVERROR
arg	32:23	32:29	6	ENOMEM
water	32:23	0:0	7	ENOMEM
for	33:4	52:4	2	(a = 0 ;a <= s -> max_mask_size;a ++)
forinit	33:9	33:14	3	a = 0 ;
water	33:9	0:0	4	a
op	33:11	0:0	4	=
water	33:13	0:0	4	0
water	33:14	0:0	4	;
cond	33:16	33:24	3	a <= s -> max_mask_size
water	33:16	0:0	4	a
op	33:18	0:0	4	<=
water	33:21	0:0	4	s
op	33:22	0:0	4	->
water	33:24	0:0	4	max_mask_size
forexpr	33:39	33:40	3	a ++
water	33:39	0:0	4	a
op	33:40	0:0	4	++
stmts	33:44	52:4	3	
water	33:44	0:0	4	{
water	34:8	0:0	4	mask
op	34:12	0:0	4	[
water	34:13	0:0	4	a
op	34:14	0:0	4	]
op	34:16	0:0	4	=
water	34:18	0:0	4	(
water	34:19	0:0	4	int
op	34:23	0:0	4	*
op	34:24	0:0	4	*
water	34:25	0:0	4	)
call	34:26	34:68	4	av_malloc_array
arg	34:42	34:53	5	(a*2)+1
water	34:42	0:0	6	(
water	34:43	0:0	6	a
op	34:45	0:0	6	*
water	34:47	0:0	6	2
water	34:48	0:0	6	)
op	34:50	0:0	6	+
water	34:52	0:0	6	1
arg	34:55	34:68	5	sizeof(int*)
op	34:55	0:0	6	sizeof
water	34:61	0:0	6	(
water	34:62	0:0	6	int
op	34:66	0:0	6	*
water	34:67	0:0	6	)
water	34:69	0:0	4	;
if	35:8	38:8	4	(! mask [ a ])
cond	35:12	35:19	5	! mask [ a ]
op	35:12	0:0	6	!
water	35:13	0:0	6	mask
op	35:17	0:0	6	[
water	35:18	0:0	6	a
op	35:19	0:0	6	]
stmts	35:22	38:8	5	
water	35:22	0:0	6	{
call	36:12	36:24	6	av_free
arg	36:20	36:24	7	mask
water	36:20	0:0	8	mask
water	36:25	0:0	6	;
return	37:12	37:34	6	AVERROR(ENOMEM)
call	37:19	37:33	7	AVERROR
arg	37:27	37:33	8	ENOMEM
water	37:27	0:0	9	ENOMEM
water	38:8	0:0	6	}
for	39:8	51:8	4	(b = - a ;b <= a;b ++)
forinit	39:13	39:19	5	b = - a ;
water	39:13	0:0	6	b
op	39:15	0:0	6	=
op	39:17	0:0	6	-
water	39:18	0:0	6	a
water	39:19	0:0	6	;
cond	39:21	39:26	5	b <= a
water	39:21	0:0	6	b
op	39:23	0:0	6	<=
water	39:26	0:0	6	a
forexpr	39:29	39:30	5	b ++
water	39:29	0:0	6	b
op	39:30	0:0	6	++
stmts	39:34	51:8	5	
water	39:34	0:0	6	{
water	40:12	0:0	6	mask
op	40:16	0:0	6	[
water	40:17	0:0	6	a
op	40:18	0:0	6	]
op	40:19	0:0	6	[
water	40:20	0:0	6	b
op	40:22	0:0	6	+
water	40:24	0:0	6	a
op	40:25	0:0	6	]
op	40:27	0:0	6	=
water	40:29	0:0	6	(
water	40:30	0:0	6	int
op	40:34	0:0	6	*
water	40:35	0:0	6	)
call	40:36	40:76	6	av_malloc_array
arg	40:52	40:63	7	(a*2)+1
water	40:52	0:0	8	(
water	40:53	0:0	8	a
op	40:55	0:0	8	*
water	40:57	0:0	8	2
water	40:58	0:0	8	)
op	40:60	0:0	8	+
water	40:62	0:0	8	1
arg	40:65	40:76	7	sizeof(int)
op	40:65	0:0	8	sizeof
water	40:71	0:0	8	(
water	40:72	0:0	8	int
water	40:75	0:0	8	)
water	40:77	0:0	6	;
if	41:12	44:12	6	(! mask [ a ] [ b + a ])
cond	41:16	41:30	7	! mask [ a ] [ b + a ]
op	41:16	0:0	8	!
water	41:17	0:0	8	mask
op	41:21	0:0	8	[
water	41:22	0:0	8	a
op	41:23	0:0	8	]
op	41:24	0:0	8	[
water	41:25	0:0	8	b
op	41:27	0:0	8	+
water	41:29	0:0	8	a
op	41:30	0:0	8	]
stmts	41:33	44:12	7	
water	41:33	0:0	8	{
call	42:16	42:28	8	av_free
arg	42:24	42:28	9	mask
water	42:24	0:0	10	mask
water	42:29	0:0	8	;
return	43:16	43:38	8	AVERROR(ENOMEM)
call	43:23	43:37	9	AVERROR
arg	43:31	43:37	10	ENOMEM
water	43:31	0:0	11	ENOMEM
water	44:12	0:0	8	}
for	45:12	50:12	6	(c = - a ;c <= a;c ++)
forinit	45:17	45:23	7	c = - a ;
water	45:17	0:0	8	c
op	45:19	0:0	8	=
op	45:21	0:0	8	-
water	45:22	0:0	8	a
water	45:23	0:0	8	;
cond	45:25	45:30	7	c <= a
water	45:25	0:0	8	c
op	45:27	0:0	8	<=
water	45:30	0:0	8	a
forexpr	45:33	45:34	7	c ++
water	45:33	0:0	8	c
op	45:34	0:0	8	++
stmts	45:38	50:12	7	
water	45:38	0:0	8	{
if	46:16	47:45	8	(( b * b ) + ( c * c ) <= ( a * a ))
cond	46:20	46:47	9	( b * b ) + ( c * c ) <= ( a * a )
water	46:20	0:0	10	(
water	46:21	0:0	10	b
op	46:23	0:0	10	*
water	46:25	0:0	10	b
water	46:26	0:0	10	)
op	46:28	0:0	10	+
water	46:30	0:0	10	(
water	46:31	0:0	10	c
op	46:33	0:0	10	*
water	46:35	0:0	10	c
water	46:36	0:0	10	)
op	46:38	0:0	10	<=
water	46:41	0:0	10	(
water	46:42	0:0	10	a
op	46:44	0:0	10	*
water	46:46	0:0	10	a
water	46:47	0:0	10	)
stmts	47:20	47:45	9	
water	47:20	0:0	10	mask
op	47:24	0:0	10	[
water	47:25	0:0	10	a
op	47:26	0:0	10	]
op	47:27	0:0	10	[
water	47:28	0:0	10	b
op	47:30	0:0	10	+
water	47:32	0:0	10	a
op	47:33	0:0	10	]
op	47:34	0:0	10	[
water	47:35	0:0	10	c
op	47:37	0:0	10	+
water	47:39	0:0	10	a
op	47:40	0:0	10	]
op	47:42	0:0	10	=
water	47:44	0:0	10	1
water	47:45	0:0	10	;
else	48:16	49:45	8
stmts	49:20	49:45	9	
water	49:20	0:0	10	mask
op	49:24	0:0	10	[
water	49:25	0:0	10	a
op	49:26	0:0	10	]
op	49:27	0:0	10	[
water	49:28	0:0	10	b
op	49:30	0:0	10	+
water	49:32	0:0	10	a
op	49:33	0:0	10	]
op	49:34	0:0	10	[
water	49:35	0:0	10	c
op	49:37	0:0	10	+
water	49:39	0:0	10	a
op	49:40	0:0	10	]
op	49:42	0:0	10	=
water	49:44	0:0	10	0
water	49:45	0:0	10	;
water	50:12	0:0	8	}
water	51:8	0:0	6	}
water	52:4	0:0	4	}
water	53:4	0:0	2	s
op	53:5	0:0	2	->
water	53:7	0:0	2	mask
op	53:12	0:0	2	=
water	53:14	0:0	2	mask
water	53:18	0:0	2	;
call	56:4	56:79	2	ff_calculate_bounding_box
arg	56:30	56:48	3	&s->full_mask_bbox
op	56:30	0:0	4	&
water	56:31	0:0	4	s
op	56:32	0:0	4	->
water	56:34	0:0	4	full_mask_bbox
arg	56:50	56:67	3	s->full_mask_data
water	56:50	0:0	4	s
op	56:51	0:0	4	->
water	56:53	0:0	4	full_mask_data
arg	56:69	56:70	3	w
water	56:69	0:0	4	w
arg	56:72	56:73	3	w
water	56:72	0:0	4	w
arg	56:75	56:76	3	h
water	56:75	0:0	4	h
arg	56:78	56:79	3	0
water	56:78	0:0	4	0
water	56:80	0:0	2	;
call	57:4	57:85	2	ff_calculate_bounding_box
arg	57:30	57:48	3	&s->half_mask_bbox
op	57:30	0:0	4	&
water	57:31	0:0	4	s
op	57:32	0:0	4	->
water	57:34	0:0	4	half_mask_bbox
arg	57:50	57:67	3	s->half_mask_data
water	57:50	0:0	4	s
op	57:51	0:0	4	->
water	57:53	0:0	4	half_mask_data
arg	57:69	57:72	3	w/2
water	57:69	0:0	4	w
op	57:70	0:0	4	/
water	57:71	0:0	4	2
arg	57:74	57:77	3	w/2
water	57:74	0:0	4	w
op	57:75	0:0	4	/
water	57:76	0:0	4	2
arg	57:79	57:82	3	h/2
water	57:79	0:0	4	h
op	57:80	0:0	4	/
water	57:81	0:0	4	2
arg	57:84	57:85	3	0
water	57:84	0:0	4	0
water	57:86	0:0	2	;
water	59:4	0:0	2	av_log
water	59:10	0:0	2	(
water	59:11	0:0	2	ctx
water	59:14	0:0	2	,
water	59:16	0:0	2	AV_LOG_VERBOSE
water	59:30	0:0	2	,
water	60:11	0:0	2	s
op	60:12	0:0	2	->
water	60:14	0:0	2	mask_type
water	61:11	0:0	2	s
op	61:12	0:0	2	->
water	61:14	0:0	2	mask_type
water	62:11	0:0	2	mask_type
call	63:4	63:23	2	SHOW_LOGO_INFO
arg	63:19	63:23	3	full
water	63:19	0:0	4	full
water	63:24	0:0	2	;
call	64:4	64:23	2	SHOW_LOGO_INFO
arg	64:19	64:23	3	half
water	64:19	0:0	4	half
water	64:24	0:0	2	;
return	65:4	65:12	2	0
water	65:11	0:0	3	0
