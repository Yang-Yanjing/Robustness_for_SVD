func	1:0	34:0	0	void	av_image_copy
params	1:18	0:0	1	
param	1:19	1:39	2	uint8_t *	dst_data[4]
param	1:41	1:61	2	int	dst_linesizes[4]
param	2:19	2:45	2	const uint8_t *	src_data[4]
param	2:47	2:73	2	const int	src_linesizes[4]
param	3:19	3:45	2	enum AVPixelFormat	pix_fmt
param	3:47	3:56	2	int	width
param	3:58	3:68	2	int	height
stmnts	0:0	33:4	1	
decl	5:4	5:65	2	const AVPixFmtDescriptor	*desc
op	5:35	0:0	2	=
call	5:37	5:64	3	av_pix_fmt_desc_get
arg	5:57	5:64	4	pix_fmt
water	5:57	0:0	5	pix_fmt
if	6:4	7:14	2	(! desc || desc -> flags & AV_PIX_FMT_FLAG_HWACCEL)
cond	6:8	6:31	3	! desc || desc -> flags & AV_PIX_FMT_FLAG_HWACCEL
op	6:8	0:0	4	!
water	6:9	0:0	4	desc
op	6:14	0:0	4	||
water	6:17	0:0	4	desc
op	6:21	0:0	4	->
water	6:23	0:0	4	flags
op	6:29	0:0	4	&
water	6:31	0:0	4	AV_PIX_FMT_FLAG_HWACCEL
stmts	7:8	7:14	3	
return	7:8	7:14	4	
if	8:4	15:4	2	(desc -> flags & AV_PIX_FMT_FLAG_PAL || desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL)
cond	8:8	9:22	3	desc -> flags & AV_PIX_FMT_FLAG_PAL || desc -> flags & AV_PIX_FMT_FLAG_PSEUDOPAL
water	8:8	0:0	4	desc
op	8:12	0:0	4	->
water	8:14	0:0	4	flags
op	8:20	0:0	4	&
water	8:22	0:0	4	AV_PIX_FMT_FLAG_PAL
op	8:42	0:0	4	||
water	9:8	0:0	4	desc
op	9:12	0:0	4	->
water	9:14	0:0	4	flags
op	9:20	0:0	4	&
water	9:22	0:0	4	AV_PIX_FMT_FLAG_PSEUDOPAL
stmts	9:49	15:4	3	
water	9:49	0:0	4	{
call	10:8	12:41	4	av_image_copy_plane
arg	10:28	10:39	5	dst_data[0]
water	10:28	0:0	6	dst_data
op	10:36	0:0	6	[
water	10:37	0:0	6	0
op	10:38	0:0	6	]
arg	10:41	10:57	5	dst_linesizes[0]
water	10:41	0:0	6	dst_linesizes
op	10:54	0:0	6	[
water	10:55	0:0	6	0
op	10:56	0:0	6	]
arg	11:28	11:39	5	src_data[0]
water	11:28	0:0	6	src_data
op	11:36	0:0	6	[
water	11:37	0:0	6	0
op	11:38	0:0	6	]
arg	11:41	11:57	5	src_linesizes[0]
water	11:41	0:0	6	src_linesizes
op	11:54	0:0	6	[
water	11:55	0:0	6	0
op	11:56	0:0	6	]
arg	12:28	12:33	5	width
water	12:28	0:0	6	width
arg	12:35	12:41	5	height
water	12:35	0:0	6	height
water	12:42	0:0	4	;
call	14:8	14:46	4	memcpy
arg	14:15	14:26	5	dst_data[1]
water	14:15	0:0	6	dst_data
op	14:23	0:0	6	[
water	14:24	0:0	6	1
op	14:25	0:0	6	]
arg	14:28	14:39	5	src_data[1]
water	14:28	0:0	6	src_data
op	14:36	0:0	6	[
water	14:37	0:0	6	1
op	14:38	0:0	6	]
arg	14:41	14:46	5	4*256
water	14:41	0:0	6	4
op	14:42	0:0	6	*
water	14:43	0:0	6	256
water	14:47	0:0	4	;
water	15:4	0:0	4	}
else	15:6	33:4	2
stmts	15:11	33:4	3	
water	15:11	0:0	4	{
decl	16:8	16:28	4	int	i
water	16:13	0:0	4	,
decl	16:8	16:28	4	int	planes_nb
op	16:25	0:0	4	=
water	16:27	0:0	4	0
for	17:8	18:65	4	(i = 0 ;i < desc -> nb_components;i ++)
forinit	17:13	17:18	5	i = 0 ;
water	17:13	0:0	6	i
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:30	5	i < desc -> nb_components
water	17:20	0:0	6	i
op	17:22	0:0	6	<
water	17:24	0:0	6	desc
op	17:28	0:0	6	->
water	17:30	0:0	6	nb_components
forexpr	17:45	17:46	5	i ++
water	17:45	0:0	6	i
op	17:46	0:0	6	++
stmts	18:12	18:65	5	
water	18:12	0:0	6	planes_nb
op	18:22	0:0	6	=
call	18:24	18:64	6	FFMAX
arg	18:30	18:39	7	planes_nb
water	18:30	0:0	8	planes_nb
arg	18:41	18:64	7	desc->comp[i].plane+1
water	18:41	0:0	8	desc
op	18:45	0:0	8	->
water	18:47	0:0	8	comp
op	18:51	0:0	8	[
water	18:52	0:0	8	i
op	18:53	0:0	8	]
op	18:54	0:0	8	.
water	18:55	0:0	8	plane
op	18:61	0:0	8	+
water	18:63	0:0	8	1
water	18:65	0:0	6	;
for	19:8	32:8	4	(i = 0 ;i < planes_nb;i ++)
forinit	19:13	19:18	5	i = 0 ;
water	19:13	0:0	6	i
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:24	5	i < planes_nb
water	19:20	0:0	6	i
op	19:22	0:0	6	<
water	19:24	0:0	6	planes_nb
forexpr	19:35	19:36	5	i ++
water	19:35	0:0	6	i
op	19:36	0:0	6	++
stmts	19:40	32:8	5	
water	19:40	0:0	6	{
decl	20:12	20:26	6	int	h
op	20:18	0:0	6	=
water	20:20	0:0	6	height
decl	21:12	21:65	6	int	bwidth
op	21:23	0:0	6	=
call	21:25	21:64	7	av_image_get_linesize
arg	21:47	21:54	8	pix_fmt
water	21:47	0:0	9	pix_fmt
arg	21:56	21:61	8	width
water	21:56	0:0	9	width
arg	21:63	21:64	8	i
water	21:63	0:0	9	i
if	22:12	25:12	6	(bwidth < 0)
cond	22:16	22:25	7	bwidth < 0
water	22:16	0:0	8	bwidth
op	22:23	0:0	8	<
water	22:25	0:0	8	0
stmts	22:28	25:12	7	
water	22:28	0:0	8	{
call	23:16	23:75	8	av_log
arg	23:23	23:27	9	NULL
water	23:23	0:0	10	NULL
arg	23:29	23:41	9	AV_LOG_ERROR
water	23:29	0:0	10	AV_LOG_ERROR
arg	23:43	23:75	9	"av_image_get_linesize failed\n"
water	23:43	0:0	10	"av_image_get_linesize failed\n"
water	23:76	0:0	8	;
return	24:16	24:22	8	
water	25:12	0:0	8	}
if	26:12	28:12	6	(i == 1 || i == 2)
cond	26:16	26:31	7	i == 1 || i == 2
water	26:16	0:0	8	i
op	26:18	0:0	8	==
water	26:21	0:0	8	1
op	26:23	0:0	8	||
water	26:26	0:0	8	i
op	26:28	0:0	8	==
water	26:31	0:0	8	2
stmts	26:34	28:12	7	
water	26:34	0:0	8	{
water	27:16	0:0	8	h
op	27:18	0:0	8	=
call	27:20	27:62	8	FF_CEIL_RSHIFT
arg	27:35	27:41	9	height
water	27:35	0:0	10	height
arg	27:43	27:62	9	desc->log2_chroma_h
water	27:43	0:0	10	desc
op	27:47	0:0	10	->
water	27:49	0:0	10	log2_chroma_h
water	27:63	0:0	8	;
water	28:12	0:0	8	}
call	29:12	31:41	6	av_image_copy_plane
arg	29:32	29:43	7	dst_data[i]
water	29:32	0:0	8	dst_data
op	29:40	0:0	8	[
water	29:41	0:0	8	i
op	29:42	0:0	8	]
arg	29:45	29:61	7	dst_linesizes[i]
water	29:45	0:0	8	dst_linesizes
op	29:58	0:0	8	[
water	29:59	0:0	8	i
op	29:60	0:0	8	]
arg	30:32	30:43	7	src_data[i]
water	30:32	0:0	8	src_data
op	30:40	0:0	8	[
water	30:41	0:0	8	i
op	30:42	0:0	8	]
arg	30:45	30:61	7	src_linesizes[i]
water	30:45	0:0	8	src_linesizes
op	30:58	0:0	8	[
water	30:59	0:0	8	i
op	30:60	0:0	8	]
arg	31:32	31:38	7	bwidth
water	31:32	0:0	8	bwidth
arg	31:40	31:41	7	h
water	31:40	0:0	8	h
water	31:42	0:0	6	;
water	32:8	0:0	6	}
water	33:4	0:0	4	}
