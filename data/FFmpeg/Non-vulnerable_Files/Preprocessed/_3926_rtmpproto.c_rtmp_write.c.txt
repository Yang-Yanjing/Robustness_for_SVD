func	1:0	118:0	0	static int	rtmp_write
params	1:21	0:0	1	
param	1:22	1:35	2	URLContext *	s
param	1:37	1:55	2	const uint8_t *	buf
param	1:57	1:65	2	int	size
stmnts	0:0	117:15	1	
decl	3:4	3:34	2	RTMPContext	*rt
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:24	2	int	size_temp
op	4:18	0:0	2	=
water	4:20	0:0	2	size
decl	5:4	5:30	2	int	pktsize
water	5:15	0:0	2	,
decl	5:4	5:30	2	int	pkttype
water	5:24	0:0	2	,
decl	5:4	5:30	2	int	copy
decl	6:4	6:15	2	uint32_t	ts
decl	7:4	7:33	2	const uint8_t	*buf_temp
op	7:28	0:0	2	=
water	7:30	0:0	2	buf
decl	8:4	8:13	2	uint8_t	c
decl	9:4	9:11	2	int	ret
do	10:4	91:4	2	(buf_temp - buf < size)
cond	91:13	91:30	3	buf_temp - buf < size
water	91:13	0:0	4	buf_temp
op	91:22	0:0	4	-
water	91:24	0:0	4	buf
op	91:28	0:0	4	<
water	91:30	0:0	4	size
stmts	10:7	91:4	3	
water	10:7	0:0	4	{
if	11:8	17:8	4	(rt -> skip_bytes)
cond	11:12	11:16	5	rt -> skip_bytes
water	11:12	0:0	6	rt
op	11:14	0:0	6	->
water	11:16	0:0	6	skip_bytes
stmts	11:28	17:8	5	
water	11:28	0:0	6	{
decl	12:12	12:55	6	int	skip
op	12:21	0:0	6	=
call	12:23	12:54	7	FFMIN
arg	12:29	12:43	8	rt->skip_bytes
water	12:29	0:0	9	rt
op	12:31	0:0	9	->
water	12:33	0:0	9	skip_bytes
arg	12:45	12:54	8	size_temp
water	12:45	0:0	9	size_temp
water	13:12	0:0	6	buf_temp
op	13:27	0:0	6	+=
water	13:30	0:0	6	skip
water	13:34	0:0	6	;
water	14:12	0:0	6	size_temp
op	14:27	0:0	6	-=
water	14:30	0:0	6	skip
water	14:34	0:0	6	;
water	15:12	0:0	6	rt
op	15:14	0:0	6	->
water	15:16	0:0	6	skip_bytes
op	15:27	0:0	6	-=
water	15:30	0:0	6	skip
water	15:34	0:0	6	;
continue	16:12	16:20	6	
water	17:8	0:0	6	}
if	18:8	52:8	4	(rt -> flv_header_bytes < RTMP_HEADER)
cond	18:12	18:35	5	rt -> flv_header_bytes < RTMP_HEADER
water	18:12	0:0	6	rt
op	18:14	0:0	6	->
water	18:16	0:0	6	flv_header_bytes
op	18:33	0:0	6	<
water	18:35	0:0	6	RTMP_HEADER
stmts	18:48	52:8	5	
water	18:48	0:0	6	{
decl	19:12	19:50	6	const uint8_t	*header
op	19:34	0:0	6	=
water	19:36	0:0	6	rt
op	19:38	0:0	6	->
water	19:40	0:0	6	flv_header
decl	20:12	20:44	6	int	channel
op	20:24	0:0	6	=
water	20:26	0:0	6	RTMP_AUDIO_CHANNEL
water	21:12	0:0	6	copy
op	21:17	0:0	6	=
call	21:19	21:70	6	FFMIN
arg	21:25	21:59	7	RTMP_HEADER-rt->flv_header_bytes
water	21:25	0:0	8	RTMP_HEADER
op	21:37	0:0	8	-
water	21:39	0:0	8	rt
op	21:41	0:0	8	->
water	21:43	0:0	8	flv_header_bytes
arg	21:61	21:70	7	size_temp
water	21:61	0:0	8	size_temp
water	21:71	0:0	6	;
call	22:12	22:88	6	bytestream_get_buffer
arg	22:34	22:43	7	&buf_temp
op	22:34	0:0	8	&
water	22:35	0:0	8	buf_temp
arg	22:45	22:82	7	rt->flv_header+rt->flv_header_bytes
water	22:45	0:0	8	rt
op	22:47	0:0	8	->
water	22:49	0:0	8	flv_header
op	22:60	0:0	8	+
water	22:62	0:0	8	rt
op	22:64	0:0	8	->
water	22:66	0:0	8	flv_header_bytes
arg	22:84	22:88	7	copy
water	22:84	0:0	8	copy
water	22:89	0:0	6	;
water	23:12	0:0	6	rt
op	23:14	0:0	6	->
water	23:16	0:0	6	flv_header_bytes
op	23:33	0:0	6	+=
water	23:36	0:0	6	copy
water	23:40	0:0	6	;
water	24:12	0:0	6	size_temp
op	24:33	0:0	6	-=
water	24:36	0:0	6	copy
water	24:40	0:0	6	;
if	25:12	26:21	6	(rt -> flv_header_bytes < RTMP_HEADER)
cond	25:16	25:39	7	rt -> flv_header_bytes < RTMP_HEADER
water	25:16	0:0	8	rt
op	25:18	0:0	8	->
water	25:20	0:0	8	flv_header_bytes
op	25:37	0:0	8	<
water	25:39	0:0	8	RTMP_HEADER
stmts	26:16	26:21	7	
break	26:16	26:21	8	
water	27:12	0:0	6	pkttype
op	27:20	0:0	6	=
call	27:22	27:49	6	bytestream_get_byte
arg	27:42	27:49	7	&header
op	27:42	0:0	8	&
water	27:43	0:0	8	header
water	27:50	0:0	6	;
water	28:12	0:0	6	pktsize
op	28:20	0:0	6	=
call	28:22	28:49	6	bytestream_get_be24
arg	28:42	28:49	7	&header
op	28:42	0:0	8	&
water	28:43	0:0	8	header
water	28:50	0:0	6	;
water	29:12	0:0	6	ts
op	29:15	0:0	6	=
call	29:17	29:44	6	bytestream_get_be24
arg	29:37	29:44	7	&header
op	29:37	0:0	8	&
water	29:38	0:0	8	header
water	29:45	0:0	6	;
water	30:12	0:0	6	ts
op	30:15	0:0	6	|=
call	30:18	30:45	6	bytestream_get_byte
arg	30:38	30:45	7	&header
op	30:38	0:0	8	&
water	30:39	0:0	8	header
op	30:47	0:0	6	<<
water	30:50	0:0	6	24
water	30:52	0:0	6	;
call	31:12	31:39	6	bytestream_get_be24
arg	31:32	31:39	7	&header
op	31:32	0:0	8	&
water	31:33	0:0	8	header
water	31:40	0:0	6	;
water	32:12	0:0	6	rt
op	32:14	0:0	6	->
water	32:16	0:0	6	flv_size
op	32:25	0:0	6	=
water	32:27	0:0	6	pktsize
water	32:34	0:0	6	;
if	33:12	34:44	6	(pkttype == RTMP_PT_VIDEO)
cond	33:16	33:27	7	pkttype == RTMP_PT_VIDEO
water	33:16	0:0	8	pkttype
op	33:24	0:0	8	==
water	33:27	0:0	8	RTMP_PT_VIDEO
stmts	34:16	34:44	7	
water	34:16	0:0	8	channel
op	34:24	0:0	8	=
water	34:26	0:0	8	RTMP_VIDEO_CHANNEL
water	34:44	0:0	8	;
if	35:12	45:12	6	(( ( pkttype == RTMP_PT_VIDEO || pkttype == RTMP_PT_AUDIO ) && ts == 0 ) || pkttype == RTMP_PT_NOTIFY)
cond	35:16	36:27	7	( ( pkttype == RTMP_PT_VIDEO || pkttype == RTMP_PT_AUDIO ) && ts == 0 ) || pkttype == RTMP_PT_NOTIFY
water	35:16	0:0	8	(
water	35:17	0:0	8	(
water	35:18	0:0	8	pkttype
op	35:26	0:0	8	==
water	35:29	0:0	8	RTMP_PT_VIDEO
op	35:43	0:0	8	||
water	35:46	0:0	8	pkttype
op	35:54	0:0	8	==
water	35:57	0:0	8	RTMP_PT_AUDIO
water	35:70	0:0	8	)
op	35:72	0:0	8	&&
water	35:75	0:0	8	ts
op	35:78	0:0	8	==
water	35:81	0:0	8	0
water	35:82	0:0	8	)
op	35:84	0:0	8	||
water	36:16	0:0	8	pkttype
op	36:24	0:0	8	==
water	36:27	0:0	8	RTMP_PT_NOTIFY
stmts	36:43	45:12	7	
water	36:43	0:0	8	{
if	37:16	40:30	8	(( ret =ff_rtmp_check_alloc_array (& rt -> prev_pkt [ 1 ] ,& rt -> nb_prev_pkt [ 1 ] ,channel ) ) < 0)
cond	37:20	39:65	9	( ret =ff_rtmp_check_alloc_array (& rt -> prev_pkt [ 1 ] ,& rt -> nb_prev_pkt [ 1 ] ,channel ) ) < 0
water	37:20	0:0	10	(
water	37:21	0:0	10	ret
op	37:25	0:0	10	=
call	37:27	39:60	10	ff_rtmp_check_alloc_array
arg	37:53	37:69	11	&rt->prev_pkt[1]
op	37:53	0:0	12	&
water	37:54	0:0	12	rt
op	37:56	0:0	12	->
water	37:58	0:0	12	prev_pkt
op	37:66	0:0	12	[
water	37:67	0:0	12	1
op	37:68	0:0	12	]
arg	38:53	38:72	11	&rt->nb_prev_pkt[1]
op	38:53	0:0	12	&
water	38:54	0:0	12	rt
op	38:56	0:0	12	->
water	38:58	0:0	12	nb_prev_pkt
op	38:69	0:0	12	[
water	38:70	0:0	12	1
op	38:71	0:0	12	]
arg	39:53	39:60	11	channel
water	39:53	0:0	12	channel
water	39:61	0:0	10	)
op	39:63	0:0	10	<
water	39:65	0:0	10	0
stmts	40:20	40:30	9	
return	40:20	40:30	10	ret
water	40:27	0:0	11	ret
water	44:16	0:0	8	rt
op	44:18	0:0	8	->
water	44:20	0:0	8	prev_pkt
op	44:28	0:0	8	[
water	44:29	0:0	8	1
op	44:30	0:0	8	]
op	44:31	0:0	8	[
water	44:32	0:0	8	channel
op	44:39	0:0	8	]
op	44:40	0:0	8	.
water	44:41	0:0	8	channel_id
op	44:52	0:0	8	=
water	44:54	0:0	8	0
water	44:55	0:0	8	;
water	45:12	0:0	8	}
if	47:12	49:26	6	(( ret =ff_rtmp_packet_create (& rt -> out_pkt ,channel ,pkttype ,ts ,pktsize ) ) < 0)
cond	47:16	48:70	7	( ret =ff_rtmp_packet_create (& rt -> out_pkt ,channel ,pkttype ,ts ,pktsize ) ) < 0
water	47:16	0:0	8	(
water	47:17	0:0	8	ret
op	47:21	0:0	8	=
call	47:23	48:65	8	ff_rtmp_packet_create
arg	47:45	47:57	9	&rt->out_pkt
op	47:45	0:0	10	&
water	47:46	0:0	10	rt
op	47:48	0:0	10	->
water	47:50	0:0	10	out_pkt
arg	47:59	47:66	9	channel
water	47:59	0:0	10	channel
arg	48:45	48:52	9	pkttype
water	48:45	0:0	10	pkttype
arg	48:54	48:56	9	ts
water	48:54	0:0	10	ts
arg	48:58	48:65	9	pktsize
water	48:58	0:0	10	pktsize
water	48:66	0:0	8	)
op	48:68	0:0	8	<
water	48:70	0:0	8	0
stmts	49:16	49:26	7	
return	49:16	49:26	8	ret
water	49:23	0:0	9	ret
water	50:12	0:0	6	rt
op	50:14	0:0	6	->
water	50:16	0:0	6	out_pkt
op	50:23	0:0	6	.
water	50:24	0:0	6	extra
op	50:30	0:0	6	=
water	50:32	0:0	6	rt
op	50:34	0:0	6	->
water	50:36	0:0	6	stream_id
water	50:45	0:0	6	;
water	51:12	0:0	6	rt
op	51:14	0:0	6	->
water	51:16	0:0	6	flv_data
op	51:25	0:0	6	=
water	51:27	0:0	6	rt
op	51:29	0:0	6	->
water	51:31	0:0	6	out_pkt
op	51:38	0:0	6	.
water	51:39	0:0	6	data
water	51:43	0:0	6	;
water	52:8	0:0	6	}
water	53:8	0:0	4	copy
op	53:13	0:0	4	=
call	53:15	53:58	4	FFMIN
arg	53:21	53:47	5	rt->flv_size-rt->flv_off
water	53:21	0:0	6	rt
op	53:23	0:0	6	->
water	53:25	0:0	6	flv_size
op	53:34	0:0	6	-
water	53:36	0:0	6	rt
op	53:38	0:0	6	->
water	53:40	0:0	6	flv_off
arg	53:49	53:58	5	size_temp
water	53:49	0:0	6	size_temp
water	53:59	0:0	4	;
call	54:8	54:73	4	bytestream_get_buffer
arg	54:30	54:39	5	&buf_temp
op	54:30	0:0	6	&
water	54:31	0:0	6	buf_temp
arg	54:41	54:67	5	rt->flv_data+rt->flv_off
water	54:41	0:0	6	rt
op	54:43	0:0	6	->
water	54:45	0:0	6	flv_data
op	54:54	0:0	6	+
water	54:56	0:0	6	rt
op	54:58	0:0	6	->
water	54:60	0:0	6	flv_off
arg	54:69	54:73	5	copy
water	54:69	0:0	6	copy
water	54:74	0:0	4	;
water	55:8	0:0	4	rt
op	55:10	0:0	4	->
water	55:12	0:0	4	flv_off
op	55:20	0:0	4	+=
water	55:23	0:0	4	copy
water	55:27	0:0	4	;
water	56:8	0:0	4	size_temp
op	56:20	0:0	4	-=
water	56:23	0:0	4	copy
water	56:27	0:0	4	;
if	57:8	90:8	4	(rt -> flv_off == rt -> flv_size)
cond	57:12	57:31	5	rt -> flv_off == rt -> flv_size
water	57:12	0:0	6	rt
op	57:14	0:0	6	->
water	57:16	0:0	6	flv_off
op	57:24	0:0	6	==
water	57:27	0:0	6	rt
op	57:29	0:0	6	->
water	57:31	0:0	6	flv_size
stmts	57:41	90:8	5	
water	57:41	0:0	6	{
water	58:12	0:0	6	rt
op	58:14	0:0	6	->
water	58:16	0:0	6	skip_bytes
op	58:27	0:0	6	=
water	58:29	0:0	6	4
water	58:30	0:0	6	;
if	59:12	83:12	6	(rt -> out_pkt . type == RTMP_PT_NOTIFY)
cond	59:16	59:36	7	rt -> out_pkt . type == RTMP_PT_NOTIFY
water	59:16	0:0	8	rt
op	59:18	0:0	8	->
water	59:20	0:0	8	out_pkt
op	59:27	0:0	8	.
water	59:28	0:0	8	type
op	59:33	0:0	8	==
water	59:36	0:0	8	RTMP_PT_NOTIFY
stmts	59:52	83:12	7	
water	59:52	0:0	8	{
decl	64:16	64:41	8	uint8_t	commandbuffer[64]
decl	65:16	65:33	8	int	stringlen
op	65:30	0:0	8	=
water	65:32	0:0	8	0
decl	66:16	66:34	8	GetByteContext	gbc
call	67:16	67:65	8	bytestream2_init
arg	67:33	67:37	9	&gbc
op	67:33	0:0	10	&
water	67:34	0:0	10	gbc
arg	67:39	67:51	9	rt->flv_data
water	67:39	0:0	10	rt
op	67:41	0:0	10	->
water	67:43	0:0	10	flv_data
arg	67:53	67:65	9	rt->flv_size
water	67:53	0:0	10	rt
op	67:55	0:0	10	->
water	67:57	0:0	10	flv_size
water	67:66	0:0	8	;
if	68:16	82:16	8	(!ff_amf_read_string (& gbc ,commandbuffer ,sizeof ( commandbuffer ) ,& stringlen ))
cond	68:20	69:50	9	!ff_amf_read_string (& gbc ,commandbuffer ,sizeof ( commandbuffer ) ,& stringlen )
op	68:20	0:0	10	!
call	68:21	69:50	10	ff_amf_read_string
arg	68:40	68:44	11	&gbc
op	68:40	0:0	12	&
water	68:41	0:0	12	gbc
arg	68:46	68:59	11	commandbuffer
water	68:46	0:0	12	commandbuffer
arg	68:61	68:82	11	sizeof(commandbuffer)
op	68:61	0:0	12	sizeof
water	68:67	0:0	12	(
water	68:68	0:0	12	commandbuffer
water	68:81	0:0	12	)
arg	69:40	69:50	11	&stringlen
op	69:40	0:0	12	&
water	69:41	0:0	12	stringlen
stmts	69:53	82:16	9	
water	69:53	0:0	10	{
if	70:20	81:20	10	(!strcmp (commandbuffer ,"onMetaData" ) || !strcmp (commandbuffer ,"|RtmpSampleAccess" ))
cond	70:24	71:66	11	!strcmp (commandbuffer ,"onMetaData" ) || !strcmp (commandbuffer ,"|RtmpSampleAccess" )
op	70:24	0:0	12	!
call	70:25	70:59	12	strcmp
arg	70:32	70:45	13	commandbuffer
water	70:32	0:0	14	commandbuffer
arg	70:47	70:59	13	"onMetaData"
water	70:47	0:0	14	"onMetaData"
op	70:61	0:0	12	||
op	71:24	0:0	12	!
call	71:25	71:66	12	strcmp
arg	71:32	71:45	13	commandbuffer
water	71:32	0:0	14	commandbuffer
arg	71:47	71:66	13	"|RtmpSampleAccess"
water	71:47	0:0	14	"|RtmpSampleAccess"
stmts	71:69	81:20	11	
water	71:69	0:0	12	{
decl	72:24	72:36	12	uint8_t	*ptr
if	73:24	76:24	12	(( ret =av_reallocp (& rt -> out_pkt . data ,rt -> out_pkt . size + 16 ) ) < 0)
cond	73:28	73:92	13	( ret =av_reallocp (& rt -> out_pkt . data ,rt -> out_pkt . size + 16 ) ) < 0
water	73:28	0:0	14	(
water	73:29	0:0	14	ret
op	73:33	0:0	14	=
call	73:35	73:87	14	av_reallocp
arg	73:47	73:64	15	&rt->out_pkt.data
op	73:47	0:0	16	&
water	73:48	0:0	16	rt
op	73:50	0:0	16	->
water	73:52	0:0	16	out_pkt
op	73:59	0:0	16	.
water	73:60	0:0	16	data
arg	73:66	73:87	15	rt->out_pkt.size+16
water	73:66	0:0	16	rt
op	73:68	0:0	16	->
water	73:70	0:0	16	out_pkt
op	73:77	0:0	16	.
water	73:78	0:0	16	size
op	73:83	0:0	16	+
water	73:85	0:0	16	16
water	73:88	0:0	14	)
op	73:90	0:0	14	<
water	73:92	0:0	14	0
stmts	73:95	76:24	13	
water	73:95	0:0	14	{
water	74:28	0:0	14	rt
op	74:30	0:0	14	->
water	74:32	0:0	14	flv_size
op	74:41	0:0	14	=
water	74:43	0:0	14	rt
op	74:45	0:0	14	->
water	74:47	0:0	14	flv_off
op	74:55	0:0	14	=
water	74:57	0:0	14	rt
op	74:59	0:0	14	->
water	74:61	0:0	14	flv_header_bytes
op	74:78	0:0	14	=
water	74:80	0:0	14	0
water	74:81	0:0	14	;
return	75:28	75:38	14	ret
water	75:35	0:0	15	ret
water	76:24	0:0	14	}
call	77:24	77:89	12	memmove
arg	77:32	77:53	13	rt->out_pkt.data+16
water	77:32	0:0	14	rt
op	77:34	0:0	14	->
water	77:36	0:0	14	out_pkt
op	77:43	0:0	14	.
water	77:44	0:0	14	data
op	77:49	0:0	14	+
water	77:51	0:0	14	16
arg	77:55	77:71	13	rt->out_pkt.data
water	77:55	0:0	14	rt
op	77:57	0:0	14	->
water	77:59	0:0	14	out_pkt
op	77:66	0:0	14	.
water	77:67	0:0	14	data
arg	77:73	77:89	13	rt->out_pkt.size
water	77:73	0:0	14	rt
op	77:75	0:0	14	->
water	77:77	0:0	14	out_pkt
op	77:84	0:0	14	.
water	77:85	0:0	14	size
water	77:90	0:0	12	;
water	78:24	0:0	12	rt
op	78:26	0:0	12	->
water	78:28	0:0	12	out_pkt
op	78:35	0:0	12	.
water	78:36	0:0	12	size
op	78:41	0:0	12	+=
water	78:44	0:0	12	16
water	78:46	0:0	12	;
water	79:24	0:0	12	ptr
op	79:28	0:0	12	=
water	79:30	0:0	12	rt
op	79:32	0:0	12	->
water	79:34	0:0	12	out_pkt
op	79:41	0:0	12	.
water	79:42	0:0	12	data
water	79:46	0:0	12	;
call	80:24	80:65	12	ff_amf_write_string
arg	80:44	80:48	13	&ptr
op	80:44	0:0	14	&
water	80:45	0:0	14	ptr
arg	80:50	80:65	13	"@setDataFrame"
water	80:50	0:0	14	"@setDataFrame"
water	80:66	0:0	12	;
water	81:20	0:0	12	}
water	82:16	0:0	10	}
water	83:12	0:0	8	}
if	84:12	85:26	6	(( ret =rtmp_send_packet (rt ,& rt -> out_pkt ,0 ) ) < 0)
cond	84:16	84:64	7	( ret =rtmp_send_packet (rt ,& rt -> out_pkt ,0 ) ) < 0
water	84:16	0:0	8	(
water	84:17	0:0	8	ret
op	84:21	0:0	8	=
call	84:23	84:59	8	rtmp_send_packet
arg	84:40	84:42	9	rt
water	84:40	0:0	10	rt
arg	84:44	84:56	9	&rt->out_pkt
op	84:44	0:0	10	&
water	84:45	0:0	10	rt
op	84:47	0:0	10	->
water	84:49	0:0	10	out_pkt
arg	84:58	84:59	9	0
water	84:58	0:0	10	0
water	84:60	0:0	8	)
op	84:62	0:0	8	<
water	84:64	0:0	8	0
stmts	85:16	85:26	7	
return	85:16	85:26	8	ret
water	85:23	0:0	9	ret
water	86:12	0:0	6	rt
op	86:14	0:0	6	->
water	86:16	0:0	6	flv_size
op	86:25	0:0	6	=
water	86:27	0:0	6	0
water	86:28	0:0	6	;
water	87:12	0:0	6	rt
op	87:14	0:0	6	->
water	87:16	0:0	6	flv_off
op	87:24	0:0	6	=
water	87:26	0:0	6	0
water	87:27	0:0	6	;
water	88:12	0:0	6	rt
op	88:14	0:0	6	->
water	88:16	0:0	6	flv_header_bytes
op	88:33	0:0	6	=
water	88:35	0:0	6	0
water	88:36	0:0	6	;
water	89:12	0:0	6	rt
op	89:14	0:0	6	->
water	89:16	0:0	6	flv_nb_packets
op	89:30	0:0	6	++
water	89:32	0:0	6	;
water	90:8	0:0	6	}
water	91:4	0:0	4	}
water	91:35	0:0	2	;
if	92:4	93:19	2	(rt -> flv_nb_packets < rt -> flush_interval)
cond	92:8	92:33	3	rt -> flv_nb_packets < rt -> flush_interval
water	92:8	0:0	4	rt
op	92:10	0:0	4	->
water	92:12	0:0	4	flv_nb_packets
op	92:27	0:0	4	<
water	92:29	0:0	4	rt
op	92:31	0:0	4	->
water	92:33	0:0	4	flush_interval
stmts	93:8	93:19	3	
return	93:8	93:19	4	size
water	93:15	0:0	5	size
water	94:4	0:0	2	rt
op	94:6	0:0	2	->
water	94:8	0:0	2	flv_nb_packets
op	94:23	0:0	2	=
water	94:25	0:0	2	0
water	94:26	0:0	2	;
water	96:4	0:0	2	rt
op	96:6	0:0	2	->
water	96:8	0:0	2	stream
op	96:14	0:0	2	->
water	96:16	0:0	2	flags
op	96:22	0:0	2	|=
water	96:25	0:0	2	AVIO_FLAG_NONBLOCK
water	96:43	0:0	2	;
water	98:4	0:0	2	ret
op	98:8	0:0	2	=
call	98:10	98:38	2	ffurl_read
arg	98:21	98:31	3	rt->stream
water	98:21	0:0	4	rt
op	98:23	0:0	4	->
water	98:25	0:0	4	stream
arg	98:33	98:35	3	&c
op	98:33	0:0	4	&
water	98:34	0:0	4	c
arg	98:37	98:38	3	1
water	98:37	0:0	4	1
water	98:39	0:0	2	;
water	100:4	0:0	2	rt
op	100:6	0:0	2	->
water	100:8	0:0	2	stream
op	100:14	0:0	2	->
water	100:16	0:0	2	flags
op	100:22	0:0	2	&=
water	100:25	0:0	2	~AVIO_FLAG_NONBLOCK
water	100:44	0:0	2	;
if	101:4	104:4	2	(ret ==AVERROR (EAGAIN ))
cond	101:8	101:29	3	ret ==AVERROR (EAGAIN )
water	101:8	0:0	4	ret
op	101:12	0:0	4	==
call	101:15	101:29	4	AVERROR
arg	101:23	101:29	5	EAGAIN
water	101:23	0:0	6	EAGAIN
stmts	101:32	104:4	3	
water	101:32	0:0	4	{
return	103:8	103:19	4	size
water	103:15	0:0	5	size
water	104:4	0:0	4	}
else	104:6	106:4	2
stmts	104:11	106:4	3	
if	104:11	106:4	4	(ret < 0)
cond	104:15	104:21	5	ret < 0
water	104:15	0:0	6	ret
op	104:19	0:0	6	<
water	104:21	0:0	6	0
stmts	104:24	106:4	5	
water	104:24	0:0	6	{
return	105:8	105:18	6	ret
water	105:15	0:0	7	ret
water	106:4	0:0	6	}
else	106:6	116:4	2
stmts	106:11	116:4	3	
if	106:11	116:4	4	(ret == 1)
cond	106:15	106:22	5	ret == 1
water	106:15	0:0	6	ret
op	106:19	0:0	6	==
water	106:22	0:0	6	1
stmts	106:25	116:4	5	
water	106:25	0:0	6	{
decl	107:8	107:31	6	RTMPPacket	rpkt
op	107:24	0:0	6	=
water	107:26	0:0	6	{
water	107:28	0:0	6	0
water	107:30	0:0	6	}
if	108:8	112:23	6	(( ret =ff_rtmp_packet_read_internal (rt -> stream ,& rpkt ,rt -> in_chunk_size ,& rt -> prev_pkt [ 0 ] ,& rt -> nb_prev_pkt [ 0 ] ,c ) ) <= 0)
cond	108:12	111:76	7	( ret =ff_rtmp_packet_read_internal (rt -> stream ,& rpkt ,rt -> in_chunk_size ,& rt -> prev_pkt [ 0 ] ,& rt -> nb_prev_pkt [ 0 ] ,c ) ) <= 0
water	108:12	0:0	8	(
water	108:13	0:0	8	ret
op	108:17	0:0	8	=
call	108:19	111:70	8	ff_rtmp_packet_read_internal
arg	108:48	108:58	9	rt->stream
water	108:48	0:0	10	rt
op	108:50	0:0	10	->
water	108:52	0:0	10	stream
arg	108:60	108:65	9	&rpkt
op	108:60	0:0	10	&
water	108:61	0:0	10	rpkt
arg	109:48	109:65	9	rt->in_chunk_size
water	109:48	0:0	10	rt
op	109:50	0:0	10	->
water	109:52	0:0	10	in_chunk_size
arg	110:48	110:64	9	&rt->prev_pkt[0]
op	110:48	0:0	10	&
water	110:49	0:0	10	rt
op	110:51	0:0	10	->
water	110:53	0:0	10	prev_pkt
op	110:61	0:0	10	[
water	110:62	0:0	10	0
op	110:63	0:0	10	]
arg	111:48	111:67	9	&rt->nb_prev_pkt[0]
op	111:48	0:0	10	&
water	111:49	0:0	10	rt
op	111:51	0:0	10	->
water	111:53	0:0	10	nb_prev_pkt
op	111:64	0:0	10	[
water	111:65	0:0	10	0
op	111:66	0:0	10	]
arg	111:69	111:70	9	c
water	111:69	0:0	10	c
water	111:71	0:0	8	)
op	111:73	0:0	8	<=
water	111:76	0:0	8	0
stmts	112:13	112:23	7	
return	112:13	112:23	8	ret
water	112:20	0:0	9	ret
if	113:8	114:22	6	(( ret =rtmp_parse_result (s ,rt ,& rpkt ) ) < 0)
cond	113:12	113:54	7	( ret =rtmp_parse_result (s ,rt ,& rpkt ) ) < 0
water	113:12	0:0	8	(
water	113:13	0:0	8	ret
op	113:17	0:0	8	=
call	113:19	113:49	8	rtmp_parse_result
arg	113:37	113:38	9	s
water	113:37	0:0	10	s
arg	113:40	113:42	9	rt
water	113:40	0:0	10	rt
arg	113:44	113:49	9	&rpkt
op	113:44	0:0	10	&
water	113:45	0:0	10	rpkt
water	113:50	0:0	8	)
op	113:52	0:0	8	<
water	113:54	0:0	8	0
stmts	114:12	114:22	7	
return	114:12	114:22	8	ret
water	114:19	0:0	9	ret
call	115:8	115:36	6	ff_rtmp_packet_destroy
arg	115:31	115:36	7	&rpkt
op	115:31	0:0	8	&
water	115:32	0:0	8	rpkt
water	115:37	0:0	6	;
water	116:4	0:0	6	}
return	117:4	117:15	2	size
water	117:11	0:0	3	size
