func	1:0	146:0	0	static FFPsyWindowInfo	psy_lame_window
params	1:38	0:0	1	
param	1:39	1:56	2	FFPsyContext *	ctx
param	1:58	1:76	2	const float *	audio
param	2:39	2:54	2	const float *	la
param	2:56	2:67	2	int	channel
param	2:69	2:82	2	int	prev_type
stmnts	0:0	145:13	1	
decl	4:4	4:63	2	AacPsyContext	*pctx
op	4:24	0:0	2	=
water	4:26	0:0	2	(
water	4:27	0:0	2	AacPsyContext
op	4:40	0:0	2	*
water	4:41	0:0	2	)
water	4:43	0:0	2	ctx
op	4:46	0:0	2	->
water	4:48	0:0	2	model_priv_data
decl	5:4	5:44	2	AacPsyChannel	*pch
op	5:24	0:0	2	=
op	5:26	0:0	2	&
water	5:27	0:0	2	pctx
op	5:31	0:0	2	->
water	5:33	0:0	2	ch
op	5:35	0:0	2	[
water	5:36	0:0	2	channel
op	5:43	0:0	2	]
decl	6:4	6:24	2	int	grouping
op	6:21	0:0	2	=
water	6:23	0:0	2	0
decl	7:4	7:24	2	int	uselongblock
op	7:21	0:0	2	=
water	7:23	0:0	2	1
decl	8:4	8:49	2	int	attacks[AAC_NUM_BLOCKS_SHORT+1]
op	8:42	0:0	2	=
water	8:44	0:0	2	{
water	8:46	0:0	2	0
water	8:48	0:0	2	}
decl	9:4	9:41	2	float	clippings[AAC_NUM_BLOCKS_SHORT]
decl	10:4	10:9	2	int	i
decl	11:4	11:34	2	FFPsyWindowInfo	wi
op	11:23	0:0	2	=
water	11:25	0:0	2	{
water	11:27	0:0	2	{
water	11:29	0:0	2	0
water	11:31	0:0	2	}
water	11:33	0:0	2	}
if	12:4	83:4	2	(la)
cond	12:8	12:8	3	la
water	12:8	0:0	4	la
stmts	12:12	83:4	3	
water	12:12	0:0	4	{
decl	13:8	13:42	4	float	hpfsmpl[AAC_BLOCK_SIZE_LONG]
water	14:8	0:0	4	float
water	14:14	0:0	4	const
op	14:20	0:0	4	*
water	14:21	0:0	4	pf
op	14:24	0:0	4	=
water	14:26	0:0	4	hpfsmpl
water	14:33	0:0	4	;
decl	15:8	15:83	4	float	attack_intensity[(AAC_NUM_BLOCKS_SHORT+1)*PSY_LAME_NUM_SUBBLOCKS]
decl	16:8	16:82	4	float	energy_subshort[(AAC_NUM_BLOCKS_SHORT+1)*PSY_LAME_NUM_SUBBLOCKS]
decl	17:8	17:60	4	float	energy_short[AAC_NUM_BLOCKS_SHORT+1]
op	17:53	0:0	4	=
water	17:55	0:0	4	{
water	17:57	0:0	4	0
water	17:59	0:0	4	}
decl	18:8	18:78	4	const float	*firbuf
op	18:28	0:0	4	=
water	18:30	0:0	4	la
op	18:33	0:0	4	+
water	18:35	0:0	4	(
water	18:36	0:0	4	AAC_BLOCK_SIZE_SHORT
op	18:56	0:0	4	/
water	18:57	0:0	4	4
op	18:59	0:0	4	-
water	18:61	0:0	4	PSY_LAME_FIR_LEN
water	18:77	0:0	4	)
decl	19:8	19:23	4	int	att_sum
op	19:20	0:0	4	=
water	19:22	0:0	4	0
call	21:8	21:53	4	psy_hp_filter
arg	21:22	21:28	5	firbuf
water	21:22	0:0	6	firbuf
arg	21:30	21:37	5	hpfsmpl
water	21:30	0:0	6	hpfsmpl
arg	21:39	21:53	5	psy_fir_coeffs
water	21:39	0:0	6	psy_fir_coeffs
water	21:54	0:0	4	;
for	23:8	28:8	4	(i = 0 ;i < PSY_LAME_NUM_SUBBLOCKS;i ++)
forinit	23:13	23:18	5	i = 0 ;
water	23:13	0:0	6	i
op	23:15	0:0	6	=
water	23:17	0:0	6	0
water	23:18	0:0	6	;
cond	23:20	23:24	5	i < PSY_LAME_NUM_SUBBLOCKS
water	23:20	0:0	6	i
op	23:22	0:0	6	<
water	23:24	0:0	6	PSY_LAME_NUM_SUBBLOCKS
forexpr	23:48	23:49	5	i ++
water	23:48	0:0	6	i
op	23:49	0:0	6	++
stmts	23:53	28:8	5	
water	23:53	0:0	6	{
water	24:12	0:0	6	energy_subshort
op	24:27	0:0	6	[
water	24:28	0:0	6	i
op	24:29	0:0	6	]
op	24:31	0:0	6	=
water	24:33	0:0	6	pch
op	24:36	0:0	6	->
water	24:38	0:0	6	prev_energy_subshort
op	24:58	0:0	6	[
water	24:59	0:0	6	i
op	24:61	0:0	6	+
water	24:63	0:0	6	(
water	24:64	0:0	6	(
water	24:65	0:0	6	AAC_NUM_BLOCKS_SHORT
op	24:86	0:0	6	-
water	24:88	0:0	6	1
water	24:89	0:0	6	)
op	24:91	0:0	6	*
water	24:93	0:0	6	PSY_LAME_NUM_SUBBLOCKS
water	24:115	0:0	6	)
op	24:116	0:0	6	]
water	24:117	0:0	6	;
call	25:12	25:111	6	assert
arg	25:19	25:111	7	pch->prev_energy_subshort[i+((AAC_NUM_BLOCKS_SHORT-2)*PSY_LAME_NUM_SUBBLOCKS+1)]>0
water	25:19	0:0	8	pch
op	25:22	0:0	8	->
water	25:24	0:0	8	prev_energy_subshort
op	25:44	0:0	8	[
water	25:45	0:0	8	i
op	25:47	0:0	8	+
water	25:49	0:0	8	(
water	25:50	0:0	8	(
water	25:51	0:0	8	AAC_NUM_BLOCKS_SHORT
op	25:72	0:0	8	-
water	25:74	0:0	8	2
water	25:75	0:0	8	)
op	25:77	0:0	8	*
water	25:79	0:0	8	PSY_LAME_NUM_SUBBLOCKS
op	25:102	0:0	8	+
water	25:104	0:0	8	1
water	25:105	0:0	8	)
op	25:106	0:0	8	]
op	25:108	0:0	8	>
water	25:110	0:0	8	0
water	25:112	0:0	6	;
water	26:12	0:0	6	attack_intensity
op	26:28	0:0	6	[
water	26:29	0:0	6	i
op	26:30	0:0	6	]
op	26:32	0:0	6	=
water	26:34	0:0	6	energy_subshort
op	26:49	0:0	6	[
water	26:50	0:0	6	i
op	26:51	0:0	6	]
op	26:53	0:0	6	/
water	26:55	0:0	6	pch
op	26:58	0:0	6	->
water	26:60	0:0	6	prev_energy_subshort
op	26:80	0:0	6	[
water	26:81	0:0	6	i
op	26:83	0:0	6	+
water	26:85	0:0	6	(
water	26:86	0:0	6	(
water	26:87	0:0	6	AAC_NUM_BLOCKS_SHORT
op	26:108	0:0	6	-
water	26:110	0:0	6	2
water	26:111	0:0	6	)
op	26:113	0:0	6	*
water	26:115	0:0	6	PSY_LAME_NUM_SUBBLOCKS
op	26:138	0:0	6	+
water	26:140	0:0	6	1
water	26:141	0:0	6	)
op	26:142	0:0	6	]
water	26:143	0:0	6	;
water	27:12	0:0	6	energy_short
op	27:24	0:0	6	[
water	27:25	0:0	6	0
op	27:26	0:0	6	]
op	27:28	0:0	6	+=
water	27:31	0:0	6	energy_subshort
op	27:46	0:0	6	[
water	27:47	0:0	6	i
op	27:48	0:0	6	]
water	27:49	0:0	6	;
water	28:8	0:0	6	}
for	29:8	50:8	4	(i = 0 ;i < AAC_NUM_BLOCKS_SHORT * PSY_LAME_NUM_SUBBLOCKS;i ++)
forinit	29:13	29:18	5	i = 0 ;
water	29:13	0:0	6	i
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:47	5	i < AAC_NUM_BLOCKS_SHORT * PSY_LAME_NUM_SUBBLOCKS
water	29:20	0:0	6	i
op	29:22	0:0	6	<
water	29:24	0:0	6	AAC_NUM_BLOCKS_SHORT
op	29:45	0:0	6	*
water	29:47	0:0	6	PSY_LAME_NUM_SUBBLOCKS
forexpr	29:71	29:72	5	i ++
water	29:71	0:0	6	i
op	29:72	0:0	6	++
stmts	29:76	50:8	5	
water	29:76	0:0	6	{
water	30:12	0:0	6	float
water	30:18	0:0	6	const
op	30:24	0:0	6	*
water	30:25	0:0	6	const
water	30:31	0:0	6	pfe
op	30:35	0:0	6	=
water	30:37	0:0	6	pf
op	30:40	0:0	6	+
water	30:42	0:0	6	AAC_BLOCK_SIZE_LONG
op	30:62	0:0	6	/
water	30:64	0:0	6	(
water	30:65	0:0	6	AAC_NUM_BLOCKS_SHORT
op	30:86	0:0	6	*
water	30:88	0:0	6	PSY_LAME_NUM_SUBBLOCKS
water	30:110	0:0	6	)
water	30:111	0:0	6	;
decl	31:12	31:26	6	float	p
op	31:20	0:0	6	=
water	31:22	0:0	6	1
op	31:23	0:0	6	.
water	31:24	0:0	6	0
water	31:25	0:0	6	f
for	32:12	33:40	6	(;pf < pfe;pf ++)
forinit	32:17	32:17	7	;
water	32:17	0:0	8	;
cond	32:19	32:24	7	pf < pfe
water	32:19	0:0	8	pf
op	32:22	0:0	8	<
water	32:24	0:0	8	pfe
forexpr	32:29	32:31	7	pf ++
water	32:29	0:0	8	pf
op	32:31	0:0	8	++
stmts	33:16	33:40	7	
water	33:16	0:0	8	p
op	33:18	0:0	8	=
call	33:20	33:39	8	FFMAX
arg	33:26	33:27	9	p
water	33:26	0:0	10	p
arg	33:29	33:39	9	fabsf(*pf)
call	33:29	33:38	10	fabsf
arg	33:35	33:38	11	*pf
op	33:35	0:0	12	*
water	33:36	0:0	12	pf
water	33:40	0:0	8	;
water	34:12	0:0	6	pch
op	34:15	0:0	6	->
water	34:17	0:0	6	prev_energy_subshort
op	34:37	0:0	6	[
water	34:38	0:0	6	i
op	34:39	0:0	6	]
op	34:41	0:0	6	=
water	34:43	0:0	6	energy_subshort
op	34:58	0:0	6	[
water	34:59	0:0	6	i
op	34:61	0:0	6	+
water	34:63	0:0	6	PSY_LAME_NUM_SUBBLOCKS
op	34:85	0:0	6	]
op	34:87	0:0	6	=
water	34:89	0:0	6	p
water	34:90	0:0	6	;
water	35:12	0:0	6	energy_short
op	35:24	0:0	6	[
water	35:25	0:0	6	1
op	35:27	0:0	6	+
water	35:29	0:0	6	i
op	35:31	0:0	6	/
water	35:33	0:0	6	PSY_LAME_NUM_SUBBLOCKS
op	35:55	0:0	6	]
op	35:57	0:0	6	+=
water	35:60	0:0	6	p
water	35:61	0:0	6	;
if	43:12	44:46	6	(p > energy_subshort [ i + 1 ])
cond	43:16	43:41	7	p > energy_subshort [ i + 1 ]
water	43:16	0:0	8	p
op	43:18	0:0	8	>
water	43:20	0:0	8	energy_subshort
op	43:35	0:0	8	[
water	43:36	0:0	8	i
op	43:38	0:0	8	+
water	43:40	0:0	8	1
op	43:41	0:0	8	]
stmts	44:16	44:46	7	
water	44:16	0:0	8	p
op	44:18	0:0	8	=
water	44:20	0:0	8	p
op	44:22	0:0	8	/
water	44:24	0:0	8	energy_subshort
op	44:39	0:0	8	[
water	44:40	0:0	8	i
op	44:42	0:0	8	+
water	44:44	0:0	8	1
op	44:45	0:0	8	]
water	44:46	0:0	8	;
else	45:12	46:56	6
stmts	45:17	46:56	7	
if	45:17	46:56	8	(energy_subshort [ i + 1 ] > p * 10 . 0 f)
cond	45:21	45:54	9	energy_subshort [ i + 1 ] > p * 10 . 0 f
water	45:21	0:0	10	energy_subshort
op	45:36	0:0	10	[
water	45:37	0:0	10	i
op	45:39	0:0	10	+
water	45:41	0:0	10	1
op	45:42	0:0	10	]
op	45:44	0:0	10	>
water	45:46	0:0	10	p
op	45:48	0:0	10	*
water	45:50	0:0	10	10
op	45:52	0:0	10	.
water	45:53	0:0	10	0
water	45:54	0:0	10	f
stmts	46:16	46:56	9	
water	46:16	0:0	10	p
op	46:18	0:0	10	=
water	46:20	0:0	10	energy_subshort
op	46:35	0:0	10	[
water	46:36	0:0	10	i
op	46:38	0:0	10	+
water	46:40	0:0	10	1
op	46:41	0:0	10	]
op	46:43	0:0	10	/
water	46:45	0:0	10	(
water	46:46	0:0	10	p
op	46:48	0:0	10	*
water	46:50	0:0	10	10
op	46:52	0:0	10	.
water	46:53	0:0	10	0
water	46:54	0:0	10	f
water	46:55	0:0	10	)
water	46:56	0:0	10	;
else	47:12	48:23	6
stmts	48:16	48:23	7	
water	48:16	0:0	8	p
op	48:18	0:0	8	=
water	48:20	0:0	8	0
op	48:21	0:0	8	.
water	48:22	0:0	8	0
water	48:23	0:0	8	;
water	49:12	0:0	6	attack_intensity
op	49:28	0:0	6	[
water	49:29	0:0	6	i
op	49:31	0:0	6	+
water	49:33	0:0	6	PSY_LAME_NUM_SUBBLOCKS
op	49:55	0:0	6	]
op	49:57	0:0	6	=
water	49:59	0:0	6	p
water	49:60	0:0	6	;
water	50:8	0:0	6	}
for	52:8	55:90	4	(i = 0 ;i < ( AAC_NUM_BLOCKS_SHORT + 1 ) * PSY_LAME_NUM_SUBBLOCKS;i ++)
forinit	52:13	52:18	5	i = 0 ;
water	52:13	0:0	6	i
op	52:15	0:0	6	=
water	52:17	0:0	6	0
water	52:18	0:0	6	;
cond	52:20	52:53	5	i < ( AAC_NUM_BLOCKS_SHORT + 1 ) * PSY_LAME_NUM_SUBBLOCKS
water	52:20	0:0	6	i
op	52:22	0:0	6	<
water	52:24	0:0	6	(
water	52:25	0:0	6	AAC_NUM_BLOCKS_SHORT
op	52:46	0:0	6	+
water	52:48	0:0	6	1
water	52:49	0:0	6	)
op	52:51	0:0	6	*
water	52:53	0:0	6	PSY_LAME_NUM_SUBBLOCKS
forexpr	52:77	52:78	5	i ++
water	52:77	0:0	6	i
op	52:78	0:0	6	++
stmts	53:12	55:90	5	
if	53:12	55:90	6	(! attacks [ i / PSY_LAME_NUM_SUBBLOCKS ])
cond	53:16	53:51	7	! attacks [ i / PSY_LAME_NUM_SUBBLOCKS ]
op	53:16	0:0	8	!
water	53:17	0:0	8	attacks
op	53:24	0:0	8	[
water	53:25	0:0	8	i
op	53:27	0:0	8	/
water	53:29	0:0	8	PSY_LAME_NUM_SUBBLOCKS
op	53:51	0:0	8	]
stmts	54:16	55:90	7	
if	54:16	55:90	8	(attack_intensity [ i ] > pch -> attack_threshold)
cond	54:20	54:47	9	attack_intensity [ i ] > pch -> attack_threshold
water	54:20	0:0	10	attack_intensity
op	54:36	0:0	10	[
water	54:37	0:0	10	i
op	54:38	0:0	10	]
op	54:40	0:0	10	>
water	54:42	0:0	10	pch
op	54:45	0:0	10	->
water	54:47	0:0	10	attack_threshold
stmts	55:20	55:90	9	
water	55:20	0:0	10	attacks
op	55:27	0:0	10	[
water	55:28	0:0	10	i
op	55:30	0:0	10	/
water	55:32	0:0	10	PSY_LAME_NUM_SUBBLOCKS
op	55:54	0:0	10	]
op	55:56	0:0	10	=
water	55:58	0:0	10	(
water	55:59	0:0	10	i
op	55:61	0:0	10	%
water	55:63	0:0	10	PSY_LAME_NUM_SUBBLOCKS
water	55:85	0:0	10	)
op	55:87	0:0	10	+
water	55:89	0:0	10	1
water	55:90	0:0	10	;
for	60:8	72:8	4	(i = 1 ;i < AAC_NUM_BLOCKS_SHORT + 1;i ++)
forinit	60:13	60:18	5	i = 1 ;
water	60:13	0:0	6	i
op	60:15	0:0	6	=
water	60:17	0:0	6	1
water	60:18	0:0	6	;
cond	60:20	60:47	5	i < AAC_NUM_BLOCKS_SHORT + 1
water	60:20	0:0	6	i
op	60:22	0:0	6	<
water	60:24	0:0	6	AAC_NUM_BLOCKS_SHORT
op	60:45	0:0	6	+
water	60:47	0:0	6	1
forexpr	60:50	60:51	5	i ++
water	60:50	0:0	6	i
op	60:51	0:0	6	++
stmts	60:55	72:8	5	
water	60:55	0:0	6	{
water	61:12	0:0	6	float
water	61:18	0:0	6	const
water	61:24	0:0	6	u
op	61:26	0:0	6	=
water	61:28	0:0	6	energy_short
op	61:40	0:0	6	[
water	61:41	0:0	6	i
op	61:43	0:0	6	-
water	61:45	0:0	6	1
op	61:46	0:0	6	]
water	61:47	0:0	6	;
water	62:12	0:0	6	float
water	62:18	0:0	6	const
water	62:24	0:0	6	v
op	62:26	0:0	6	=
water	62:28	0:0	6	energy_short
op	62:40	0:0	6	[
water	62:41	0:0	6	i
op	62:42	0:0	6	]
water	62:43	0:0	6	;
water	63:12	0:0	6	float
water	63:18	0:0	6	const
water	63:24	0:0	6	m
op	63:26	0:0	6	=
call	63:28	63:38	6	FFMAX
arg	63:34	63:35	7	u
water	63:34	0:0	8	u
arg	63:37	63:38	7	v
water	63:37	0:0	8	v
water	63:39	0:0	6	;
if	64:12	70:12	6	(m < 40000)
cond	64:16	64:20	7	m < 40000
water	64:16	0:0	8	m
op	64:18	0:0	8	<
water	64:20	0:0	8	40000
stmts	64:27	70:12	7	
water	64:27	0:0	8	{
if	65:16	69:16	8	(u < 1 . 7 f * v && v < 1 . 7 f * u)
cond	65:20	65:47	9	u < 1 . 7 f * v && v < 1 . 7 f * u
water	65:20	0:0	10	u
op	65:22	0:0	10	<
water	65:24	0:0	10	1
op	65:25	0:0	10	.
water	65:26	0:0	10	7
water	65:27	0:0	10	f
op	65:29	0:0	10	*
water	65:31	0:0	10	v
op	65:33	0:0	10	&&
water	65:36	0:0	10	v
op	65:38	0:0	10	<
water	65:40	0:0	10	1
op	65:41	0:0	10	.
water	65:42	0:0	10	7
water	65:43	0:0	10	f
op	65:45	0:0	10	*
water	65:47	0:0	10	u
stmts	65:50	69:16	9	
water	65:50	0:0	10	{
if	66:20	67:38	10	(i == 1 && attacks [ 0 ] < attacks [ i ])
cond	66:24	66:56	11	i == 1 && attacks [ 0 ] < attacks [ i ]
water	66:24	0:0	12	i
op	66:26	0:0	12	==
water	66:29	0:0	12	1
op	66:31	0:0	12	&&
water	66:34	0:0	12	attacks
op	66:41	0:0	12	[
water	66:42	0:0	12	0
op	66:43	0:0	12	]
op	66:45	0:0	12	<
water	66:47	0:0	12	attacks
op	66:54	0:0	12	[
water	66:55	0:0	12	i
op	66:56	0:0	12	]
stmts	67:24	67:38	11	
water	67:24	0:0	12	attacks
op	67:31	0:0	12	[
water	67:32	0:0	12	0
op	67:33	0:0	12	]
op	67:35	0:0	12	=
water	67:37	0:0	12	0
water	67:38	0:0	12	;
water	68:20	0:0	10	attacks
op	68:27	0:0	10	[
water	68:28	0:0	10	i
op	68:29	0:0	10	]
op	68:31	0:0	10	=
water	68:33	0:0	10	0
water	68:34	0:0	10	;
water	69:16	0:0	10	}
water	70:12	0:0	8	}
water	71:12	0:0	6	att_sum
op	71:20	0:0	6	+=
water	71:23	0:0	6	attacks
op	71:30	0:0	6	[
water	71:31	0:0	6	i
op	71:32	0:0	6	]
water	71:33	0:0	6	;
water	72:8	0:0	6	}
if	73:8	74:26	4	(attacks [ 0 ] <= pch -> prev_attack)
cond	73:12	73:31	5	attacks [ 0 ] <= pch -> prev_attack
water	73:12	0:0	6	attacks
op	73:19	0:0	6	[
water	73:20	0:0	6	0
op	73:21	0:0	6	]
op	73:23	0:0	6	<=
water	73:26	0:0	6	pch
op	73:29	0:0	6	->
water	73:31	0:0	6	prev_attack
stmts	74:12	74:26	5	
water	74:12	0:0	6	attacks
op	74:19	0:0	6	[
water	74:20	0:0	6	0
op	74:21	0:0	6	]
op	74:23	0:0	6	=
water	74:25	0:0	6	0
water	74:26	0:0	6	;
water	75:8	0:0	4	att_sum
op	75:16	0:0	4	+=
water	75:19	0:0	4	attacks
op	75:26	0:0	4	[
water	75:27	0:0	4	0
op	75:28	0:0	4	]
water	75:29	0:0	4	;
if	77:8	82:8	4	(pch -> prev_attack == 3 || att_sum)
cond	77:12	77:37	5	pch -> prev_attack == 3 || att_sum
water	77:12	0:0	6	pch
op	77:15	0:0	6	->
water	77:17	0:0	6	prev_attack
op	77:29	0:0	6	==
water	77:32	0:0	6	3
op	77:34	0:0	6	||
water	77:37	0:0	6	att_sum
stmts	77:46	82:8	5	
water	77:46	0:0	6	{
water	78:12	0:0	6	uselongblock
op	78:25	0:0	6	=
water	78:27	0:0	6	0
water	78:28	0:0	6	;
for	79:12	81:34	6	(i = 1 ;i < AAC_NUM_BLOCKS_SHORT + 1;i ++)
forinit	79:17	79:22	7	i = 1 ;
water	79:17	0:0	8	i
op	79:19	0:0	8	=
water	79:21	0:0	8	1
water	79:22	0:0	8	;
cond	79:24	79:51	7	i < AAC_NUM_BLOCKS_SHORT + 1
water	79:24	0:0	8	i
op	79:26	0:0	8	<
water	79:28	0:0	8	AAC_NUM_BLOCKS_SHORT
op	79:49	0:0	8	+
water	79:51	0:0	8	1
forexpr	79:54	79:55	7	i ++
water	79:54	0:0	8	i
op	79:55	0:0	8	++
stmts	80:16	81:34	7	
if	80:16	81:34	8	(attacks [ i ] && attacks [ i - 1 ])
cond	80:20	80:45	9	attacks [ i ] && attacks [ i - 1 ]
water	80:20	0:0	10	attacks
op	80:27	0:0	10	[
water	80:28	0:0	10	i
op	80:29	0:0	10	]
op	80:31	0:0	10	&&
water	80:34	0:0	10	attacks
op	80:41	0:0	10	[
water	80:42	0:0	10	i
op	80:43	0:0	10	-
water	80:44	0:0	10	1
op	80:45	0:0	10	]
stmts	81:20	81:34	9	
water	81:20	0:0	10	attacks
op	81:27	0:0	10	[
water	81:28	0:0	10	i
op	81:29	0:0	10	]
op	81:31	0:0	10	=
water	81:33	0:0	10	0
water	81:34	0:0	10	;
water	82:8	0:0	6	}
water	83:4	0:0	4	}
else	83:6	86:4	2
stmts	83:11	86:4	3	
water	83:11	0:0	4	{
water	85:8	0:0	4	uselongblock
op	85:21	0:0	4	=
op	85:23	0:0	4	!
water	85:24	0:0	4	(
water	85:25	0:0	4	prev_type
op	85:35	0:0	4	==
water	85:38	0:0	4	EIGHT_SHORT_SEQUENCE
water	85:58	0:0	4	)
water	85:59	0:0	4	;
water	86:4	0:0	4	}
call	87:4	87:48	2	lame_apply_block_type
arg	87:26	87:29	3	pch
water	87:26	0:0	4	pch
arg	87:31	87:34	3	&wi
op	87:31	0:0	4	&
water	87:32	0:0	4	wi
arg	87:36	87:48	3	uselongblock
water	87:36	0:0	4	uselongblock
water	87:49	0:0	2	;
if	89:4	98:4	2	(audio)
cond	89:8	89:8	3	audio
water	89:8	0:0	4	audio
stmts	89:15	98:4	3	
water	89:15	0:0	4	{
for	90:8	97:8	4	(i = 0 ;i < AAC_NUM_BLOCKS_SHORT;i ++)
forinit	90:13	90:18	5	i = 0 ;
water	90:13	0:0	6	i
op	90:15	0:0	6	=
water	90:17	0:0	6	0
water	90:18	0:0	6	;
cond	90:20	90:24	5	i < AAC_NUM_BLOCKS_SHORT
water	90:20	0:0	6	i
op	90:22	0:0	6	<
water	90:24	0:0	6	AAC_NUM_BLOCKS_SHORT
forexpr	90:46	90:47	5	i ++
water	90:46	0:0	6	i
op	90:47	0:0	6	++
stmts	90:51	97:8	5	
water	90:51	0:0	6	{
decl	91:12	91:64	6	const float	*wbuf
op	91:30	0:0	6	=
water	91:32	0:0	6	audio
op	91:38	0:0	6	+
water	91:40	0:0	6	i
op	91:42	0:0	6	*
water	91:44	0:0	6	AAC_BLOCK_SIZE_SHORT
decl	92:12	92:25	6	float	max
op	92:22	0:0	6	=
water	92:24	0:0	6	0
decl	93:12	93:17	6	int	j
for	94:12	95:48	6	(j = 0 ;j < AAC_BLOCK_SIZE_SHORT;j ++)
forinit	94:17	94:22	7	j = 0 ;
water	94:17	0:0	8	j
op	94:19	0:0	8	=
water	94:21	0:0	8	0
water	94:22	0:0	8	;
cond	94:24	94:28	7	j < AAC_BLOCK_SIZE_SHORT
water	94:24	0:0	8	j
op	94:26	0:0	8	<
water	94:28	0:0	8	AAC_BLOCK_SIZE_SHORT
forexpr	94:50	94:51	7	j ++
water	94:50	0:0	8	j
op	94:51	0:0	8	++
stmts	95:16	95:48	7	
water	95:16	0:0	8	max
op	95:20	0:0	8	=
call	95:22	95:47	8	FFMAX
arg	95:28	95:31	9	max
water	95:28	0:0	10	max
arg	95:33	95:47	9	fabsf(wbuf[j])
call	95:33	95:46	10	fabsf
arg	95:39	95:46	11	wbuf[j]
water	95:39	0:0	12	wbuf
op	95:43	0:0	12	[
water	95:44	0:0	12	j
op	95:45	0:0	12	]
water	95:48	0:0	8	;
water	96:12	0:0	6	clippings
op	96:21	0:0	6	[
water	96:22	0:0	6	i
op	96:23	0:0	6	]
op	96:25	0:0	6	=
water	96:27	0:0	6	max
water	96:30	0:0	6	;
water	97:8	0:0	6	}
water	98:4	0:0	4	}
else	98:6	101:4	2
stmts	98:11	101:4	3	
water	98:11	0:0	4	{
for	99:8	100:28	4	(i = 0 ;i < 8;i ++)
forinit	99:13	99:18	5	i = 0 ;
water	99:13	0:0	6	i
op	99:15	0:0	6	=
water	99:17	0:0	6	0
water	99:18	0:0	6	;
cond	99:20	99:24	5	i < 8
water	99:20	0:0	6	i
op	99:22	0:0	6	<
water	99:24	0:0	6	8
forexpr	99:27	99:28	5	i ++
water	99:27	0:0	6	i
op	99:28	0:0	6	++
stmts	100:12	100:28	5	
water	100:12	0:0	6	clippings
op	100:21	0:0	6	[
water	100:22	0:0	6	i
op	100:23	0:0	6	]
op	100:25	0:0	6	=
water	100:27	0:0	6	0
water	100:28	0:0	6	;
water	101:4	0:0	4	}
water	102:4	0:0	2	wi
op	102:6	0:0	2	.
water	102:7	0:0	2	window_type
op	102:18	0:0	2	[
water	102:19	0:0	2	1
op	102:20	0:0	2	]
op	102:22	0:0	2	=
water	102:24	0:0	2	prev_type
water	102:33	0:0	2	;
if	103:4	114:4	2	(wi . window_type [ 0 ] != EIGHT_SHORT_SEQUENCE)
cond	103:8	103:29	3	wi . window_type [ 0 ] != EIGHT_SHORT_SEQUENCE
water	103:8	0:0	4	wi
op	103:10	0:0	4	.
water	103:11	0:0	4	window_type
op	103:22	0:0	4	[
water	103:23	0:0	4	0
op	103:24	0:0	4	]
op	103:26	0:0	4	!=
water	103:29	0:0	4	EIGHT_SHORT_SEQUENCE
stmts	103:51	114:4	3	
water	103:51	0:0	4	{
decl	104:8	104:29	4	float	clipping
op	104:23	0:0	4	=
water	104:25	0:0	4	0
op	104:26	0:0	4	.
water	104:27	0:0	4	0
water	104:28	0:0	4	f
water	105:8	0:0	4	wi
op	105:10	0:0	4	.
water	105:11	0:0	4	num_windows
op	105:24	0:0	4	=
water	105:26	0:0	4	1
water	105:27	0:0	4	;
water	106:8	0:0	4	wi
op	106:10	0:0	4	.
water	106:11	0:0	4	grouping
op	106:19	0:0	4	[
water	106:20	0:0	4	0
op	106:21	0:0	4	]
op	106:24	0:0	4	=
water	106:26	0:0	4	1
water	106:27	0:0	4	;
if	107:8	108:31	4	(wi . window_type [ 0 ] == LONG_START_SEQUENCE)
cond	107:12	107:33	5	wi . window_type [ 0 ] == LONG_START_SEQUENCE
water	107:12	0:0	6	wi
op	107:14	0:0	6	.
water	107:15	0:0	6	window_type
op	107:26	0:0	6	[
water	107:27	0:0	6	0
op	107:28	0:0	6	]
op	107:30	0:0	6	==
water	107:33	0:0	6	LONG_START_SEQUENCE
stmts	108:12	108:31	5	
water	108:12	0:0	6	wi
op	108:14	0:0	6	.
water	108:15	0:0	6	window_shape
op	108:28	0:0	6	=
water	108:30	0:0	6	0
water	108:31	0:0	6	;
else	109:8	110:31	4
stmts	110:12	110:31	5	
water	110:12	0:0	6	wi
op	110:14	0:0	6	.
water	110:15	0:0	6	window_shape
op	110:28	0:0	6	=
water	110:30	0:0	6	1
water	110:31	0:0	6	;
for	111:8	112:52	4	(i = 0 ;i < 8;i ++)
forinit	111:13	111:18	5	i = 0 ;
water	111:13	0:0	6	i
op	111:15	0:0	6	=
water	111:17	0:0	6	0
water	111:18	0:0	6	;
cond	111:20	111:24	5	i < 8
water	111:20	0:0	6	i
op	111:22	0:0	6	<
water	111:24	0:0	6	8
forexpr	111:27	111:28	5	i ++
water	111:27	0:0	6	i
op	111:28	0:0	6	++
stmts	112:12	112:52	5	
water	112:12	0:0	6	clipping
op	112:21	0:0	6	=
call	112:23	112:51	6	FFMAX
arg	112:29	112:37	7	clipping
water	112:29	0:0	8	clipping
arg	112:39	112:51	7	clippings[i]
water	112:39	0:0	8	clippings
op	112:48	0:0	8	[
water	112:49	0:0	8	i
op	112:50	0:0	8	]
water	112:52	0:0	6	;
water	113:8	0:0	4	wi
op	113:10	0:0	4	.
water	113:11	0:0	4	clipping
op	113:19	0:0	4	[
water	113:20	0:0	4	0
op	113:21	0:0	4	]
op	113:23	0:0	4	=
water	113:25	0:0	4	clipping
water	113:33	0:0	4	;
water	114:4	0:0	4	}
else	114:6	130:4	2
stmts	114:11	130:4	3	
water	114:11	0:0	4	{
decl	115:8	115:23	4	int	lastgrp
op	115:20	0:0	4	=
water	115:22	0:0	4	0
water	116:8	0:0	4	wi
op	116:10	0:0	4	.
water	116:11	0:0	4	num_windows
op	116:23	0:0	4	=
water	116:25	0:0	4	8
water	116:26	0:0	4	;
water	117:8	0:0	4	wi
op	117:10	0:0	4	.
water	117:11	0:0	4	window_shape
op	117:24	0:0	4	=
water	117:26	0:0	4	0
water	117:27	0:0	4	;
for	118:8	122:8	4	(i = 0 ;i < 8;i ++)
forinit	118:13	118:18	5	i = 0 ;
water	118:13	0:0	6	i
op	118:15	0:0	6	=
water	118:17	0:0	6	0
water	118:18	0:0	6	;
cond	118:20	118:24	5	i < 8
water	118:20	0:0	6	i
op	118:22	0:0	6	<
water	118:24	0:0	6	8
forexpr	118:27	118:28	5	i ++
water	118:27	0:0	6	i
op	118:28	0:0	6	++
stmts	118:32	122:8	5	
water	118:32	0:0	6	{
if	119:12	120:27	6	(! ( ( pch -> next_grouping >> i ) & 1 ))
cond	119:16	119:47	7	! ( ( pch -> next_grouping >> i ) & 1 )
op	119:16	0:0	8	!
water	119:17	0:0	8	(
water	119:18	0:0	8	(
water	119:19	0:0	8	pch
op	119:22	0:0	8	->
water	119:24	0:0	8	next_grouping
op	119:38	0:0	8	>>
water	119:41	0:0	8	i
water	119:42	0:0	8	)
op	119:44	0:0	8	&
water	119:46	0:0	8	1
water	119:47	0:0	8	)
stmts	120:16	120:27	7	
water	120:16	0:0	8	lastgrp
op	120:24	0:0	8	=
water	120:26	0:0	8	i
water	120:27	0:0	8	;
water	121:12	0:0	6	wi
op	121:14	0:0	6	.
water	121:15	0:0	6	grouping
op	121:23	0:0	6	[
water	121:24	0:0	6	lastgrp
op	121:31	0:0	6	]
op	121:32	0:0	6	++
water	121:34	0:0	6	;
water	122:8	0:0	6	}
for	123:8	129:8	4	(i = 0 ;i < 8;i += wi . grouping [ i ])
forinit	123:13	123:18	5	i = 0 ;
water	123:13	0:0	6	i
op	123:15	0:0	6	=
water	123:17	0:0	6	0
water	123:18	0:0	6	;
cond	123:20	123:24	5	i < 8
water	123:20	0:0	6	i
op	123:22	0:0	6	<
water	123:24	0:0	6	8
forexpr	123:27	123:45	5	i += wi . grouping [ i ]
water	123:27	0:0	6	i
op	123:29	0:0	6	+=
water	123:32	0:0	6	wi
op	123:34	0:0	6	.
water	123:35	0:0	6	grouping
op	123:43	0:0	6	[
water	123:44	0:0	6	i
op	123:45	0:0	6	]
stmts	123:48	129:8	5	
water	123:48	0:0	6	{
decl	124:12	124:17	6	int	w
decl	125:12	125:33	6	float	clipping
op	125:27	0:0	6	=
water	125:29	0:0	6	0
op	125:30	0:0	6	.
water	125:31	0:0	6	0
water	125:32	0:0	6	f
for	126:12	127:58	6	(w = 0 ;w < wi . grouping [ i ] && ! clipping;w ++)
forinit	126:17	126:22	7	w = 0 ;
water	126:17	0:0	8	w
op	126:19	0:0	8	=
water	126:21	0:0	8	0
water	126:22	0:0	8	;
cond	126:24	126:47	7	w < wi . grouping [ i ] && ! clipping
water	126:24	0:0	8	w
op	126:26	0:0	8	<
water	126:28	0:0	8	wi
op	126:30	0:0	8	.
water	126:31	0:0	8	grouping
op	126:39	0:0	8	[
water	126:40	0:0	8	i
op	126:41	0:0	8	]
op	126:43	0:0	8	&&
op	126:46	0:0	8	!
water	126:47	0:0	8	clipping
forexpr	126:57	126:58	7	w ++
water	126:57	0:0	8	w
op	126:58	0:0	8	++
stmts	127:16	127:58	7	
water	127:16	0:0	8	clipping
op	127:25	0:0	8	=
call	127:27	127:57	8	FFMAX
arg	127:33	127:41	9	clipping
water	127:33	0:0	10	clipping
arg	127:43	127:57	9	clippings[i+w]
water	127:43	0:0	10	clippings
op	127:52	0:0	10	[
water	127:53	0:0	10	i
op	127:54	0:0	10	+
water	127:55	0:0	10	w
op	127:56	0:0	10	]
water	127:58	0:0	8	;
water	128:12	0:0	6	wi
op	128:14	0:0	6	.
water	128:15	0:0	6	clipping
op	128:23	0:0	6	[
water	128:24	0:0	6	i
op	128:25	0:0	6	]
op	128:27	0:0	6	=
water	128:29	0:0	6	clipping
water	128:37	0:0	6	;
water	129:8	0:0	6	}
water	130:4	0:0	4	}
for	137:4	142:4	2	(i = 0 ;i < 9;i ++)
forinit	137:9	137:14	3	i = 0 ;
water	137:9	0:0	4	i
op	137:11	0:0	4	=
water	137:13	0:0	4	0
water	137:14	0:0	4	;
cond	137:16	137:20	3	i < 9
water	137:16	0:0	4	i
op	137:18	0:0	4	<
water	137:20	0:0	4	9
forexpr	137:23	137:24	3	i ++
water	137:23	0:0	4	i
op	137:24	0:0	4	++
stmts	137:28	142:4	3	
water	137:28	0:0	4	{
if	138:8	141:8	4	(attacks [ i ])
cond	138:12	138:21	5	attacks [ i ]
water	138:12	0:0	6	attacks
op	138:19	0:0	6	[
water	138:20	0:0	6	i
op	138:21	0:0	6	]
stmts	138:24	141:8	5	
water	138:24	0:0	6	{
water	139:12	0:0	6	grouping
op	139:21	0:0	6	=
water	139:23	0:0	6	i
water	139:24	0:0	6	;
break	140:12	140:17	6	
water	141:8	0:0	6	}
water	142:4	0:0	4	}
water	143:4	0:0	2	pch
op	143:7	0:0	2	->
water	143:9	0:0	2	next_grouping
op	143:23	0:0	2	=
water	143:25	0:0	2	window_grouping
op	143:40	0:0	2	[
water	143:41	0:0	2	grouping
op	143:49	0:0	2	]
water	143:50	0:0	2	;
water	144:4	0:0	2	pch
op	144:7	0:0	2	->
water	144:9	0:0	2	prev_attack
op	144:21	0:0	2	=
water	144:23	0:0	2	attacks
op	144:30	0:0	2	[
water	144:31	0:0	2	8
op	144:32	0:0	2	]
water	144:33	0:0	2	;
return	145:4	145:13	2	wi
water	145:11	0:0	3	wi
