func	2:8	25:0	0	void	ff_volume_init_x86
params	2:31	0:0	1	
param	2:32	2:50	2	VolumeContext *	vol
stmnts	0:0	24:4	1	
decl	4:4	4:38	2	int	cpu_flags
op	4:18	0:0	2	=
call	4:20	4:37	3	av_get_cpu_flags
decl	5:4	5:78	2	enum AVSampleFormat	sample_fmt
op	5:35	0:0	2	=
call	5:37	5:77	3	av_get_packed_sample_fmt
arg	5:62	5:77	4	vol->sample_fmt
water	5:62	0:0	5	vol
op	5:65	0:0	5	->
water	5:67	0:0	5	sample_fmt
if	6:4	11:4	2	(sample_fmt == AV_SAMPLE_FMT_S16)
cond	6:8	6:22	3	sample_fmt == AV_SAMPLE_FMT_S16
water	6:8	0:0	4	sample_fmt
op	6:19	0:0	4	==
water	6:22	0:0	4	AV_SAMPLE_FMT_S16
stmts	6:41	11:4	3	
water	6:41	0:0	4	{
if	7:8	10:8	4	(EXTERNAL_SSE2 (cpu_flags ) && vol -> volume_i < 32768)
cond	7:12	7:56	5	EXTERNAL_SSE2 (cpu_flags ) && vol -> volume_i < 32768
call	7:12	7:35	6	EXTERNAL_SSE2
arg	7:26	7:35	7	cpu_flags
water	7:26	0:0	8	cpu_flags
op	7:37	0:0	6	&&
water	7:40	0:0	6	vol
op	7:43	0:0	6	->
water	7:45	0:0	6	volume_i
op	7:54	0:0	6	<
water	7:56	0:0	6	32768
stmts	7:63	10:8	5	
water	7:63	0:0	6	{
water	8:12	0:0	6	vol
op	8:15	0:0	6	->
water	8:17	0:0	6	scale_samples
op	8:31	0:0	6	=
water	8:33	0:0	6	ff_scale_samples_s16_sse2
water	8:58	0:0	6	;
water	9:12	0:0	6	vol
op	9:15	0:0	6	->
water	9:17	0:0	6	samples_align
op	9:31	0:0	6	=
water	9:33	0:0	6	8
water	9:34	0:0	6	;
water	10:8	0:0	6	}
water	11:4	0:0	4	}
else	11:6	24:4	2
stmts	11:11	24:4	3	
if	11:11	24:4	4	(sample_fmt == AV_SAMPLE_FMT_S32)
cond	11:15	11:29	5	sample_fmt == AV_SAMPLE_FMT_S32
water	11:15	0:0	6	sample_fmt
op	11:26	0:0	6	==
water	11:29	0:0	6	AV_SAMPLE_FMT_S32
stmts	11:48	24:4	5	
water	11:48	0:0	6	{
if	12:8	15:8	6	(EXTERNAL_SSE2 (cpu_flags ))
cond	12:12	12:35	7	EXTERNAL_SSE2 (cpu_flags )
call	12:12	12:35	8	EXTERNAL_SSE2
arg	12:26	12:35	9	cpu_flags
water	12:26	0:0	10	cpu_flags
stmts	12:38	15:8	7	
water	12:38	0:0	8	{
water	13:12	0:0	8	vol
op	13:15	0:0	8	->
water	13:17	0:0	8	scale_samples
op	13:31	0:0	8	=
water	13:33	0:0	8	ff_scale_samples_s32_sse2
water	13:58	0:0	8	;
water	14:12	0:0	8	vol
op	14:15	0:0	8	->
water	14:17	0:0	8	samples_align
op	14:31	0:0	8	=
water	14:33	0:0	8	4
water	14:34	0:0	8	;
water	15:8	0:0	8	}
if	16:8	19:8	6	(EXTERNAL_SSSE3 (cpu_flags ) && cpu_flags & AV_CPU_FLAG_ATOM)
cond	16:12	16:53	7	EXTERNAL_SSSE3 (cpu_flags ) && cpu_flags & AV_CPU_FLAG_ATOM
call	16:12	16:36	8	EXTERNAL_SSSE3
arg	16:27	16:36	9	cpu_flags
water	16:27	0:0	10	cpu_flags
op	16:38	0:0	8	&&
water	16:41	0:0	8	cpu_flags
op	16:51	0:0	8	&
water	16:53	0:0	8	AV_CPU_FLAG_ATOM
stmts	16:71	19:8	7	
water	16:71	0:0	8	{
water	17:12	0:0	8	vol
op	17:15	0:0	8	->
water	17:17	0:0	8	scale_samples
op	17:31	0:0	8	=
water	17:33	0:0	8	ff_scale_samples_s32_ssse3_atom
water	17:64	0:0	8	;
water	18:12	0:0	8	vol
op	18:15	0:0	8	->
water	18:17	0:0	8	samples_align
op	18:31	0:0	8	=
water	18:33	0:0	8	4
water	18:34	0:0	8	;
water	19:8	0:0	8	}
if	20:8	23:8	6	(EXTERNAL_AVX_FAST (cpu_flags ))
cond	20:12	20:39	7	EXTERNAL_AVX_FAST (cpu_flags )
call	20:12	20:39	8	EXTERNAL_AVX_FAST
arg	20:30	20:39	9	cpu_flags
water	20:30	0:0	10	cpu_flags
stmts	20:42	23:8	7	
water	20:42	0:0	8	{
water	21:12	0:0	8	vol
op	21:15	0:0	8	->
water	21:17	0:0	8	scale_samples
op	21:31	0:0	8	=
water	21:33	0:0	8	ff_scale_samples_s32_avx
water	21:57	0:0	8	;
water	22:12	0:0	8	vol
op	22:15	0:0	8	->
water	22:17	0:0	8	samples_align
op	22:31	0:0	8	=
water	22:33	0:0	8	8
water	22:34	0:0	8	;
water	23:8	0:0	8	}
water	24:4	0:0	6	}
