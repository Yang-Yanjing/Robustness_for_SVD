func	1:0	106:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	105:22	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:49	2	AVPacket	packet
op	4:20	0:0	2	=
water	4:22	0:0	2	{
op	4:24	0:0	2	.
water	4:25	0:0	2	data
op	4:30	0:0	2	=
water	4:32	0:0	2	NULL
water	4:36	0:0	2	,
op	4:38	0:0	2	.
water	4:39	0:0	2	size
op	4:44	0:0	2	=
water	4:46	0:0	2	0
water	4:48	0:0	2	}
decl	5:4	5:25	2	AVFrame	*frame
op	5:19	0:0	2	=
water	5:21	0:0	2	NULL
decl	6:4	6:25	2	enum AVMediaType	type
decl	7:4	7:29	2	unsigned int	stream_index
decl	8:4	8:18	2	unsigned int	i
decl	9:4	9:17	2	int	got_frame
call	10:4	10:18	2	int
arg	10:9	10:18	3	*dec_func
op	10:9	0:0	4	*
water	10:10	0:0	4	dec_func
water	10:19	0:0	2	(
water	10:20	0:0	2	AVCodecContext
op	10:35	0:0	2	*
water	10:36	0:0	2	,
water	10:38	0:0	2	AVFrame
op	10:46	0:0	2	*
water	10:47	0:0	2	,
water	10:49	0:0	2	int
op	10:53	0:0	2	*
water	10:54	0:0	2	,
water	10:56	0:0	2	const
water	10:62	0:0	2	AVPacket
op	10:71	0:0	2	*
water	10:72	0:0	2	)
water	10:73	0:0	2	;
if	11:4	14:4	2	(argc != 3)
cond	11:8	11:16	3	argc != 3
water	11:8	0:0	4	argc
op	11:13	0:0	4	!=
water	11:16	0:0	4	3
stmts	11:19	14:4	3	
water	11:19	0:0	4	{
call	12:8	12:84	4	av_log
arg	12:15	12:19	5	NULL
water	12:15	0:0	6	NULL
arg	12:21	12:33	5	AV_LOG_ERROR
water	12:21	0:0	6	AV_LOG_ERROR
arg	12:35	12:75	5	"Usage: %s <input file> <output file>\n"
water	12:35	0:0	6	"Usage: %s <input file> <output file>\n"
arg	12:77	12:84	5	argv[0]
water	12:77	0:0	6	argv
op	12:81	0:0	6	[
water	12:82	0:0	6	0
op	12:83	0:0	6	]
water	12:85	0:0	4	;
return	13:8	13:16	4	1
water	13:15	0:0	5	1
water	14:4	0:0	4	}
call	15:4	15:20	2	av_register_all
water	15:21	0:0	2	;
call	16:4	16:26	2	avfilter_register_all
water	16:27	0:0	2	;
if	17:4	18:16	2	(( ret =open_input_file (argv [ 1 ] ) ) < 0)
cond	17:8	17:43	3	( ret =open_input_file (argv [ 1 ] ) ) < 0
water	17:8	0:0	4	(
water	17:9	0:0	4	ret
op	17:13	0:0	4	=
call	17:15	17:38	4	open_input_file
arg	17:31	17:38	5	argv[1]
water	17:31	0:0	6	argv
op	17:35	0:0	6	[
water	17:36	0:0	6	1
op	17:37	0:0	6	]
water	17:39	0:0	4	)
op	17:41	0:0	4	<
water	17:43	0:0	4	0
stmts	18:8	18:16	3	
goto	18:8	18:16	4	end
water	18:13	0:0	5	end
if	19:4	20:16	2	(( ret =open_output_file (argv [ 2 ] ) ) < 0)
cond	19:8	19:44	3	( ret =open_output_file (argv [ 2 ] ) ) < 0
water	19:8	0:0	4	(
water	19:9	0:0	4	ret
op	19:13	0:0	4	=
call	19:15	19:39	4	open_output_file
arg	19:32	19:39	5	argv[2]
water	19:32	0:0	6	argv
op	19:36	0:0	6	[
water	19:37	0:0	6	2
op	19:38	0:0	6	]
water	19:40	0:0	4	)
op	19:42	0:0	4	<
water	19:44	0:0	4	0
stmts	20:8	20:16	3	
goto	20:8	20:16	4	end
water	20:13	0:0	5	end
if	21:4	22:16	2	(( ret =init_filters ( ) ) < 0)
cond	21:8	21:33	3	( ret =init_filters ( ) ) < 0
water	21:8	0:0	4	(
water	21:9	0:0	4	ret
op	21:13	0:0	4	=
call	21:15	21:28	4	init_filters
water	21:29	0:0	4	)
op	21:31	0:0	4	<
water	21:33	0:0	4	0
stmts	22:8	22:16	3	
goto	22:8	22:16	4	end
water	22:13	0:0	5	end
while	24:4	69:4	2	(1)
cond	24:11	24:11	3	1
water	24:11	0:0	4	1
stmts	24:14	69:4	3	
water	24:14	0:0	4	{
if	25:8	26:17	4	(( ret =av_read_frame (ifmt_ctx ,& packet ) ) < 0)
cond	25:12	25:55	5	( ret =av_read_frame (ifmt_ctx ,& packet ) ) < 0
water	25:12	0:0	6	(
water	25:13	0:0	6	ret
op	25:17	0:0	6	=
call	25:19	25:50	6	av_read_frame
arg	25:33	25:41	7	ifmt_ctx
water	25:33	0:0	8	ifmt_ctx
arg	25:43	25:50	7	&packet
op	25:43	0:0	8	&
water	25:44	0:0	8	packet
water	25:51	0:0	6	)
op	25:53	0:0	6	<
water	25:55	0:0	6	0
stmts	26:12	26:17	5	
break	26:12	26:17	6	
water	27:8	0:0	4	stream_index
op	27:21	0:0	4	=
water	27:23	0:0	4	packet
op	27:29	0:0	4	.
water	27:30	0:0	4	stream_index
water	27:42	0:0	4	;
water	28:8	0:0	4	type
op	28:13	0:0	4	=
water	28:15	0:0	4	ifmt_ctx
op	28:23	0:0	4	->
water	28:25	0:0	4	streams
op	28:32	0:0	4	[
water	28:33	0:0	4	packet
op	28:39	0:0	4	.
water	28:40	0:0	4	stream_index
op	28:52	0:0	4	]
op	28:53	0:0	4	->
water	28:55	0:0	4	codec
op	28:60	0:0	4	->
water	28:62	0:0	4	codec_type
water	28:72	0:0	4	;
call	29:8	30:28	4	av_log
arg	29:15	29:19	5	NULL
water	29:15	0:0	6	NULL
arg	29:21	29:33	5	AV_LOG_DEBUG
water	29:21	0:0	6	AV_LOG_DEBUG
arg	29:35	29:76	5	"Demuxer gave frame of stream_index %u\n"
water	29:35	0:0	6	"Demuxer gave frame of stream_index %u\n"
arg	30:16	30:28	5	stream_index
water	30:16	0:0	6	stream_index
water	30:29	0:0	4	;
if	31:8	59:8	4	(filter_ctx [ stream_index ] . filter_graph)
cond	31:12	31:37	5	filter_ctx [ stream_index ] . filter_graph
water	31:12	0:0	6	filter_ctx
op	31:22	0:0	6	[
water	31:23	0:0	6	stream_index
op	31:35	0:0	6	]
op	31:36	0:0	6	.
water	31:37	0:0	6	filter_graph
stmts	31:51	59:8	5	
water	31:51	0:0	6	{
call	32:12	32:77	6	av_log
arg	32:19	32:23	7	NULL
water	32:19	0:0	8	NULL
arg	32:25	32:37	7	AV_LOG_DEBUG
water	32:25	0:0	8	AV_LOG_DEBUG
arg	32:39	32:77	7	"Going to reencode&filter the frame\n"
water	32:39	0:0	8	"Going to reencode&filter the frame\n"
water	32:78	0:0	6	;
water	33:12	0:0	6	frame
op	33:18	0:0	6	=
call	33:20	33:35	6	av_frame_alloc
water	33:36	0:0	6	;
if	34:12	37:12	6	(! frame)
cond	34:16	34:17	7	! frame
op	34:16	0:0	8	!
water	34:17	0:0	8	frame
stmts	34:24	37:12	7	
water	34:24	0:0	8	{
water	35:16	0:0	8	ret
op	35:20	0:0	8	=
call	35:22	35:36	8	AVERROR
arg	35:30	35:36	9	ENOMEM
water	35:30	0:0	10	ENOMEM
water	35:37	0:0	8	;
break	36:16	36:21	8	
water	37:12	0:0	8	}
call	38:12	40:82	6	av_packet_rescale_ts
arg	38:33	38:40	7	&packet
op	38:33	0:0	8	&
water	38:34	0:0	8	packet
arg	39:33	39:75	7	ifmt_ctx->streams[stream_index]->time_base
water	39:33	0:0	8	ifmt_ctx
op	39:41	0:0	8	->
water	39:43	0:0	8	streams
op	39:50	0:0	8	[
water	39:51	0:0	8	stream_index
op	39:63	0:0	8	]
op	39:64	0:0	8	->
water	39:66	0:0	8	time_base
arg	40:33	40:82	7	ifmt_ctx->streams[stream_index]->codec->time_base
water	40:33	0:0	8	ifmt_ctx
op	40:41	0:0	8	->
water	40:43	0:0	8	streams
op	40:50	0:0	8	[
water	40:51	0:0	8	stream_index
op	40:63	0:0	8	]
op	40:64	0:0	8	->
water	40:66	0:0	8	codec
op	40:71	0:0	8	->
water	40:73	0:0	8	time_base
water	40:83	0:0	6	;
water	41:12	0:0	6	dec_func
op	41:21	0:0	6	=
water	41:23	0:0	6	(
water	41:24	0:0	6	type
op	41:29	0:0	6	==
water	41:32	0:0	6	AVMEDIA_TYPE_VIDEO
water	41:50	0:0	6	)
water	41:52	0:0	6	?
water	41:54	0:0	6	avcodec_decode_video2
water	41:76	0:0	6	:
water	42:16	0:0	6	avcodec_decode_audio4
water	42:37	0:0	6	;
water	43:12	0:0	6	ret
op	43:16	0:0	6	=
call	43:18	44:39	6	dec_func
arg	43:27	43:65	7	ifmt_ctx->streams[stream_index]->codec
water	43:27	0:0	8	ifmt_ctx
op	43:35	0:0	8	->
water	43:37	0:0	8	streams
op	43:44	0:0	8	[
water	43:45	0:0	8	stream_index
op	43:57	0:0	8	]
op	43:58	0:0	8	->
water	43:60	0:0	8	codec
arg	43:67	43:72	7	frame
water	43:67	0:0	8	frame
arg	44:20	44:30	7	&got_frame
op	44:20	0:0	8	&
water	44:21	0:0	8	got_frame
arg	44:32	44:39	7	&packet
op	44:32	0:0	8	&
water	44:33	0:0	8	packet
water	44:40	0:0	6	;
if	45:12	49:12	6	(ret < 0)
cond	45:16	45:22	7	ret < 0
water	45:16	0:0	8	ret
op	45:20	0:0	8	<
water	45:22	0:0	8	0
stmts	45:25	49:12	7	
water	45:25	0:0	8	{
call	46:16	46:36	8	av_frame_free
arg	46:30	46:36	9	&frame
op	46:30	0:0	10	&
water	46:31	0:0	10	frame
water	46:37	0:0	8	;
call	47:16	47:62	8	av_log
arg	47:23	47:27	9	NULL
water	47:23	0:0	10	NULL
arg	47:29	47:41	9	AV_LOG_ERROR
water	47:29	0:0	10	AV_LOG_ERROR
arg	47:43	47:62	9	"Decoding failed\n"
water	47:43	0:0	10	"Decoding failed\n"
water	47:63	0:0	8	;
break	48:16	48:21	8	
water	49:12	0:0	8	}
if	50:12	56:12	6	(got_frame)
cond	50:16	50:16	7	got_frame
water	50:16	0:0	8	got_frame
stmts	50:27	56:12	7	
water	50:27	0:0	8	{
water	51:16	0:0	8	frame
op	51:21	0:0	8	->
water	51:23	0:0	8	pts
op	51:27	0:0	8	=
call	51:29	51:69	8	av_frame_get_best_effort_timestamp
arg	51:64	51:69	9	frame
water	51:64	0:0	10	frame
water	51:70	0:0	8	;
water	52:16	0:0	8	ret
op	52:20	0:0	8	=
call	52:22	52:67	8	filter_encode_write_frame
arg	52:48	52:53	9	frame
water	52:48	0:0	10	frame
arg	52:55	52:67	9	stream_index
water	52:55	0:0	10	stream_index
water	52:68	0:0	8	;
call	53:16	53:36	8	av_frame_free
arg	53:30	53:36	9	&frame
op	53:30	0:0	10	&
water	53:31	0:0	10	frame
water	53:37	0:0	8	;
if	54:16	55:28	8	(ret < 0)
cond	54:20	54:26	9	ret < 0
water	54:20	0:0	10	ret
op	54:24	0:0	10	<
water	54:26	0:0	10	0
stmts	55:20	55:28	9	
goto	55:20	55:28	10	end
water	55:25	0:0	11	end
water	56:12	0:0	8	}
else	56:14	58:12	6
stmts	56:19	58:12	7	
water	56:19	0:0	8	{
call	57:16	57:36	8	av_frame_free
arg	57:30	57:36	9	&frame
op	57:30	0:0	10	&
water	57:31	0:0	10	frame
water	57:37	0:0	8	;
water	58:12	0:0	8	}
water	59:8	0:0	6	}
else	59:10	67:8	4
stmts	59:15	67:8	5	
water	59:15	0:0	6	{
call	61:12	63:75	6	av_packet_rescale_ts
arg	61:33	61:40	7	&packet
op	61:33	0:0	8	&
water	61:34	0:0	8	packet
arg	62:33	62:75	7	ifmt_ctx->streams[stream_index]->time_base
water	62:33	0:0	8	ifmt_ctx
op	62:41	0:0	8	->
water	62:43	0:0	8	streams
op	62:50	0:0	8	[
water	62:51	0:0	8	stream_index
op	62:63	0:0	8	]
op	62:64	0:0	8	->
water	62:66	0:0	8	time_base
arg	63:33	63:75	7	ofmt_ctx->streams[stream_index]->time_base
water	63:33	0:0	8	ofmt_ctx
op	63:41	0:0	8	->
water	63:43	0:0	8	streams
op	63:50	0:0	8	[
water	63:51	0:0	8	stream_index
op	63:63	0:0	8	]
op	63:64	0:0	8	->
water	63:66	0:0	8	time_base
water	63:76	0:0	6	;
water	64:12	0:0	6	ret
op	64:16	0:0	6	=
call	64:18	64:62	6	av_interleaved_write_frame
arg	64:45	64:53	7	ofmt_ctx
water	64:45	0:0	8	ofmt_ctx
arg	64:55	64:62	7	&packet
op	64:55	0:0	8	&
water	64:56	0:0	8	packet
water	64:63	0:0	6	;
if	65:12	66:24	6	(ret < 0)
cond	65:16	65:22	7	ret < 0
water	65:16	0:0	8	ret
op	65:20	0:0	8	<
water	65:22	0:0	8	0
stmts	66:16	66:24	7	
goto	66:16	66:24	8	end
water	66:21	0:0	9	end
water	67:8	0:0	6	}
call	68:8	68:30	4	av_free_packet
arg	68:23	68:30	5	&packet
op	68:23	0:0	6	&
water	68:24	0:0	6	packet
water	68:31	0:0	4	;
water	69:4	0:0	4	}
for	71:4	86:4	2	(i = 0 ;i < ifmt_ctx -> nb_streams;i ++)
forinit	71:9	71:14	3	i = 0 ;
water	71:9	0:0	4	i
op	71:11	0:0	4	=
water	71:13	0:0	4	0
water	71:14	0:0	4	;
cond	71:16	71:30	3	i < ifmt_ctx -> nb_streams
water	71:16	0:0	4	i
op	71:18	0:0	4	<
water	71:20	0:0	4	ifmt_ctx
op	71:28	0:0	4	->
water	71:30	0:0	4	nb_streams
forexpr	71:42	71:43	3	i ++
water	71:42	0:0	4	i
op	71:43	0:0	4	++
stmts	71:47	86:4	3	
water	71:47	0:0	4	{
if	73:8	74:20	4	(! filter_ctx [ i ] . filter_graph)
cond	73:12	73:27	5	! filter_ctx [ i ] . filter_graph
op	73:12	0:0	6	!
water	73:13	0:0	6	filter_ctx
op	73:23	0:0	6	[
water	73:24	0:0	6	i
op	73:25	0:0	6	]
op	73:26	0:0	6	.
water	73:27	0:0	6	filter_graph
stmts	74:12	74:20	5	
continue	74:12	74:20	6	
water	75:8	0:0	4	ret
op	75:12	0:0	4	=
call	75:14	75:47	4	filter_encode_write_frame
arg	75:40	75:44	5	NULL
water	75:40	0:0	6	NULL
arg	75:46	75:47	5	i
water	75:46	0:0	6	i
water	75:48	0:0	4	;
if	76:8	79:8	4	(ret < 0)
cond	76:12	76:18	5	ret < 0
water	76:12	0:0	6	ret
op	76:16	0:0	6	<
water	76:18	0:0	6	0
stmts	76:21	79:8	5	
water	76:21	0:0	6	{
call	77:12	77:65	6	av_log
arg	77:19	77:23	7	NULL
water	77:19	0:0	8	NULL
arg	77:25	77:37	7	AV_LOG_ERROR
water	77:25	0:0	8	AV_LOG_ERROR
arg	77:39	77:65	7	"Flushing filter failed\n"
water	77:39	0:0	8	"Flushing filter failed\n"
water	77:66	0:0	6	;
goto	78:12	78:20	6	end
water	78:17	0:0	7	end
water	79:8	0:0	6	}
water	81:8	0:0	4	ret
op	81:12	0:0	4	=
call	81:14	81:29	4	flush_encoder
arg	81:28	81:29	5	i
water	81:28	0:0	6	i
water	81:30	0:0	4	;
if	82:8	85:8	4	(ret < 0)
cond	82:12	82:18	5	ret < 0
water	82:12	0:0	6	ret
op	82:16	0:0	6	<
water	82:18	0:0	6	0
stmts	82:21	85:8	5	
water	82:21	0:0	6	{
call	83:12	83:66	6	av_log
arg	83:19	83:23	7	NULL
water	83:19	0:0	8	NULL
arg	83:25	83:37	7	AV_LOG_ERROR
water	83:25	0:0	8	AV_LOG_ERROR
arg	83:39	83:66	7	"Flushing encoder failed\n"
water	83:39	0:0	8	"Flushing encoder failed\n"
water	83:67	0:0	6	;
goto	84:12	84:20	6	end
water	84:17	0:0	7	end
water	85:8	0:0	6	}
water	86:4	0:0	4	}
call	87:4	87:29	2	av_write_trailer
arg	87:21	87:29	3	ofmt_ctx
water	87:21	0:0	4	ofmt_ctx
water	87:30	0:0	2	;
label	88:0	88:3	2	end :
call	89:4	89:26	2	av_free_packet
arg	89:19	89:26	3	&packet
op	89:19	0:0	4	&
water	89:20	0:0	4	packet
water	89:27	0:0	2	;
call	90:4	90:24	2	av_frame_free
arg	90:18	90:24	3	&frame
op	90:18	0:0	4	&
water	90:19	0:0	4	frame
water	90:25	0:0	2	;
for	91:4	97:4	2	(i = 0 ;i < ifmt_ctx -> nb_streams;i ++)
forinit	91:9	91:14	3	i = 0 ;
water	91:9	0:0	4	i
op	91:11	0:0	4	=
water	91:13	0:0	4	0
water	91:14	0:0	4	;
cond	91:16	91:30	3	i < ifmt_ctx -> nb_streams
water	91:16	0:0	4	i
op	91:18	0:0	4	<
water	91:20	0:0	4	ifmt_ctx
op	91:28	0:0	4	->
water	91:30	0:0	4	nb_streams
forexpr	91:42	91:43	3	i ++
water	91:42	0:0	4	i
op	91:43	0:0	4	++
stmts	91:47	97:4	3	
water	91:47	0:0	4	{
call	92:8	92:49	4	avcodec_close
arg	92:22	92:49	5	ifmt_ctx->streams[i]->codec
water	92:22	0:0	6	ifmt_ctx
op	92:30	0:0	6	->
water	92:32	0:0	6	streams
op	92:39	0:0	6	[
water	92:40	0:0	6	i
op	92:41	0:0	6	]
op	92:42	0:0	6	->
water	92:44	0:0	6	codec
water	92:50	0:0	4	;
if	93:8	94:54	4	(ofmt_ctx && ofmt_ctx -> nb_streams > i && ofmt_ctx -> streams [ i ] && ofmt_ctx -> streams [ i ] -> codec)
cond	93:12	93:98	5	ofmt_ctx && ofmt_ctx -> nb_streams > i && ofmt_ctx -> streams [ i ] && ofmt_ctx -> streams [ i ] -> codec
water	93:12	0:0	6	ofmt_ctx
op	93:21	0:0	6	&&
water	93:24	0:0	6	ofmt_ctx
op	93:32	0:0	6	->
water	93:34	0:0	6	nb_streams
op	93:45	0:0	6	>
water	93:47	0:0	6	i
op	93:49	0:0	6	&&
water	93:52	0:0	6	ofmt_ctx
op	93:60	0:0	6	->
water	93:62	0:0	6	streams
op	93:69	0:0	6	[
water	93:70	0:0	6	i
op	93:71	0:0	6	]
op	93:73	0:0	6	&&
water	93:76	0:0	6	ofmt_ctx
op	93:84	0:0	6	->
water	93:86	0:0	6	streams
op	93:93	0:0	6	[
water	93:94	0:0	6	i
op	93:95	0:0	6	]
op	93:96	0:0	6	->
water	93:98	0:0	6	codec
stmts	94:12	94:54	5	
call	94:12	94:53	6	avcodec_close
arg	94:26	94:53	7	ofmt_ctx->streams[i]->codec
water	94:26	0:0	8	ofmt_ctx
op	94:34	0:0	8	->
water	94:36	0:0	8	streams
op	94:43	0:0	8	[
water	94:44	0:0	8	i
op	94:45	0:0	8	]
op	94:46	0:0	8	->
water	94:48	0:0	8	codec
water	94:54	0:0	6	;
if	95:8	96:60	4	(filter_ctx && filter_ctx [ i ] . filter_graph)
cond	95:12	95:40	5	filter_ctx && filter_ctx [ i ] . filter_graph
water	95:12	0:0	6	filter_ctx
op	95:23	0:0	6	&&
water	95:26	0:0	6	filter_ctx
op	95:36	0:0	6	[
water	95:37	0:0	6	i
op	95:38	0:0	6	]
op	95:39	0:0	6	.
water	95:40	0:0	6	filter_graph
stmts	96:12	96:60	5	
call	96:12	96:59	6	avfilter_graph_free
arg	96:32	96:59	7	&filter_ctx[i].filter_graph
op	96:32	0:0	8	&
water	96:33	0:0	8	filter_ctx
op	96:43	0:0	8	[
water	96:44	0:0	8	i
op	96:45	0:0	8	]
op	96:46	0:0	8	.
water	96:47	0:0	8	filter_graph
water	96:60	0:0	6	;
water	97:4	0:0	4	}
call	98:4	98:22	2	av_free
arg	98:12	98:22	3	filter_ctx
water	98:12	0:0	4	filter_ctx
water	98:23	0:0	2	;
call	99:4	99:34	2	avformat_close_input
arg	99:25	99:34	3	&ifmt_ctx
op	99:25	0:0	4	&
water	99:26	0:0	4	ifmt_ctx
water	99:35	0:0	2	;
if	100:4	101:34	2	(ofmt_ctx && ! ( ofmt_ctx -> oformat -> flags & AVFMT_NOFILE ))
cond	100:8	100:61	3	ofmt_ctx && ! ( ofmt_ctx -> oformat -> flags & AVFMT_NOFILE )
water	100:8	0:0	4	ofmt_ctx
op	100:17	0:0	4	&&
op	100:20	0:0	4	!
water	100:21	0:0	4	(
water	100:22	0:0	4	ofmt_ctx
op	100:30	0:0	4	->
water	100:32	0:0	4	oformat
op	100:39	0:0	4	->
water	100:41	0:0	4	flags
op	100:47	0:0	4	&
water	100:49	0:0	4	AVFMT_NOFILE
water	100:61	0:0	4	)
stmts	101:8	101:34	3	
call	101:8	101:33	4	avio_closep
arg	101:20	101:33	5	&ofmt_ctx->pb
op	101:20	0:0	6	&
water	101:21	0:0	6	ofmt_ctx
op	101:29	0:0	6	->
water	101:31	0:0	6	pb
water	101:34	0:0	4	;
call	102:4	102:34	2	avformat_free_context
arg	102:26	102:34	3	ofmt_ctx
water	102:26	0:0	4	ofmt_ctx
water	102:35	0:0	2	;
if	103:4	104:75	2	(ret < 0)
cond	103:8	103:14	3	ret < 0
water	103:8	0:0	4	ret
op	103:12	0:0	4	<
water	103:14	0:0	4	0
stmts	104:8	104:75	3	
call	104:8	104:74	4	av_log
arg	104:15	104:19	5	NULL
water	104:15	0:0	6	NULL
arg	104:21	104:33	5	AV_LOG_ERROR
water	104:21	0:0	6	AV_LOG_ERROR
arg	104:35	104:57	5	"Error occurred: %s\n"
water	104:35	0:0	6	"Error occurred: %s\n"
arg	104:59	104:74	5	av_err2str(ret)
call	104:59	104:73	6	av_err2str
arg	104:70	104:73	7	ret
water	104:70	0:0	8	ret
water	104:75	0:0	4	;
return	105:4	105:22	2	ret?1:0
water	105:11	0:0	3	ret
water	105:15	0:0	3	?
water	105:17	0:0	3	1
water	105:19	0:0	3	:
water	105:21	0:0	3	0
