func	1:0	99:0	0	static int	join_request_frame
params	1:29	0:0	1	
param	1:30	1:51	2	AVFilterLink *	outlink
stmnts	0:0	98:14	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:36	2	JoinContext	*s
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	priv
decl	5:4	5:18	2	AVFrame	*frame
decl	6:4	6:28	2	int	linesize
op	6:19	0:0	2	=
water	6:21	0:0	2	INT_MAX
decl	7:4	7:22	2	int	nb_samples
op	7:19	0:0	2	=
water	7:21	0:0	2	0
decl	8:4	8:22	2	int	nb_buffers
op	8:19	0:0	2	=
water	8:21	0:0	2	0
decl	9:4	9:17	2	int	i
water	9:9	0:0	2	,
decl	9:4	9:17	2	int	j
water	9:12	0:0	2	,
decl	9:4	9:17	2	int	ret
for	11:4	22:4	2	(i = 0 ;i < ctx -> nb_inputs;i ++)
forinit	11:9	11:14	3	i = 0 ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:25	3	i < ctx -> nb_inputs
water	11:16	0:0	4	i
op	11:18	0:0	4	<
water	11:20	0:0	4	ctx
op	11:23	0:0	4	->
water	11:25	0:0	4	nb_inputs
forexpr	11:36	11:37	3	i ++
water	11:36	0:0	4	i
op	11:37	0:0	4	++
stmts	11:41	22:4	3	
water	11:41	0:0	4	{
decl	12:8	12:45	4	AVFilterLink	*inlink
op	12:29	0:0	4	=
water	12:31	0:0	4	ctx
op	12:34	0:0	4	->
water	12:36	0:0	4	inputs
op	12:42	0:0	4	[
water	12:43	0:0	4	i
op	12:44	0:0	4	]
if	13:8	15:22	4	(! s -> input_frames [ i ] && ( ret =ff_request_frame (inlink ) ) < 0)
cond	13:12	14:47	5	! s -> input_frames [ i ] && ( ret =ff_request_frame (inlink ) ) < 0
op	13:12	0:0	6	!
water	13:13	0:0	6	s
op	13:14	0:0	6	->
water	13:16	0:0	6	input_frames
op	13:28	0:0	6	[
water	13:29	0:0	6	i
op	13:30	0:0	6	]
op	13:32	0:0	6	&&
water	14:12	0:0	6	(
water	14:13	0:0	6	ret
op	14:17	0:0	6	=
call	14:19	14:42	6	ff_request_frame
arg	14:36	14:42	7	inlink
water	14:36	0:0	8	inlink
water	14:43	0:0	6	)
op	14:45	0:0	6	<
water	14:47	0:0	6	0
stmts	15:12	15:22	5	
return	15:12	15:22	6	ret
water	15:19	0:0	7	ret
if	17:8	21:8	4	(i == 0)
cond	17:12	17:17	5	i == 0
water	17:12	0:0	6	i
op	17:14	0:0	6	==
water	17:17	0:0	6	0
stmts	17:20	21:8	5	
water	17:20	0:0	6	{
water	18:12	0:0	6	nb_samples
op	18:23	0:0	6	=
water	18:25	0:0	6	s
op	18:26	0:0	6	->
water	18:28	0:0	6	input_frames
op	18:40	0:0	6	[
water	18:41	0:0	6	0
op	18:42	0:0	6	]
op	18:43	0:0	6	->
water	18:45	0:0	6	nb_samples
water	18:55	0:0	6	;
for	19:12	20:60	6	(j = 1 ;! i && j < ctx -> nb_inputs;j ++)
forinit	19:17	19:22	7	j = 1 ;
water	19:17	0:0	8	j
op	19:19	0:0	8	=
water	19:21	0:0	8	1
water	19:22	0:0	8	;
cond	19:24	19:39	7	! i && j < ctx -> nb_inputs
op	19:24	0:0	8	!
water	19:25	0:0	8	i
op	19:27	0:0	8	&&
water	19:30	0:0	8	j
op	19:32	0:0	8	<
water	19:34	0:0	8	ctx
op	19:37	0:0	8	->
water	19:39	0:0	8	nb_inputs
forexpr	19:50	19:51	7	j ++
water	19:50	0:0	8	j
op	19:51	0:0	8	++
stmts	20:16	20:60	7	
water	20:16	0:0	8	ctx
op	20:19	0:0	8	->
water	20:21	0:0	8	inputs
op	20:27	0:0	8	[
water	20:28	0:0	8	j
op	20:29	0:0	8	]
op	20:30	0:0	8	->
water	20:32	0:0	8	request_samples
op	20:48	0:0	8	=
water	20:50	0:0	8	nb_samples
water	20:60	0:0	8	;
water	21:8	0:0	6	}
water	22:4	0:0	4	}
water	24:4	0:0	2	frame
op	24:10	0:0	2	=
call	24:12	24:27	2	av_frame_alloc
water	24:28	0:0	2	;
if	25:4	26:30	2	(! frame)
cond	25:8	25:9	3	! frame
op	25:8	0:0	4	!
water	25:9	0:0	4	frame
stmts	26:8	26:30	3	
return	26:8	26:30	4	AVERROR(ENOMEM)
call	26:15	26:29	5	AVERROR
arg	26:23	26:29	6	ENOMEM
water	26:23	0:0	7	ENOMEM
if	27:4	34:4	2	(s -> nb_channels >FF_ARRAY_ELEMS (frame -> data ))
cond	27:8	27:51	3	s -> nb_channels >FF_ARRAY_ELEMS (frame -> data )
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	nb_channels
op	27:23	0:0	4	>
call	27:25	27:51	4	FF_ARRAY_ELEMS
arg	27:40	27:51	5	frame->data
water	27:40	0:0	6	frame
op	27:45	0:0	6	->
water	27:47	0:0	6	data
stmts	27:54	34:4	3	
water	27:54	0:0	4	{
water	28:8	0:0	4	frame
op	28:13	0:0	4	->
water	28:15	0:0	4	extended_data
op	28:29	0:0	4	=
call	28:31	29:71	4	av_mallocz_array
arg	28:48	28:62	5	s->nb_channels
water	28:48	0:0	6	s
op	28:49	0:0	6	->
water	28:51	0:0	6	nb_channels
arg	29:42	29:71	5	sizeof(*frame->extended_data)
op	29:42	0:0	6	sizeof
water	29:48	0:0	6	(
op	29:49	0:0	6	*
water	29:50	0:0	6	frame
op	29:55	0:0	6	->
water	29:57	0:0	6	extended_data
water	29:70	0:0	6	)
water	29:72	0:0	4	;
if	30:8	33:8	4	(! frame -> extended_data)
cond	30:12	30:20	5	! frame -> extended_data
op	30:12	0:0	6	!
water	30:13	0:0	6	frame
op	30:18	0:0	6	->
water	30:20	0:0	6	extended_data
stmts	30:35	33:8	5	
water	30:35	0:0	6	{
water	31:12	0:0	6	ret
op	31:16	0:0	6	=
call	31:18	31:32	6	AVERROR
arg	31:26	31:32	7	ENOMEM
water	31:26	0:0	8	ENOMEM
water	31:33	0:0	6	;
goto	32:12	32:21	6	fail
water	32:17	0:0	7	fail
water	33:8	0:0	6	}
water	34:4	0:0	4	}
for	36:4	54:4	2	(i = 0 ;i < s -> nb_channels;i ++)
forinit	36:9	36:14	3	i = 0 ;
water	36:9	0:0	4	i
op	36:11	0:0	4	=
water	36:13	0:0	4	0
water	36:14	0:0	4	;
cond	36:16	36:23	3	i < s -> nb_channels
water	36:16	0:0	4	i
op	36:18	0:0	4	<
water	36:20	0:0	4	s
op	36:21	0:0	4	->
water	36:23	0:0	4	nb_channels
forexpr	36:36	36:37	3	i ++
water	36:36	0:0	4	i
op	36:37	0:0	4	++
stmts	36:41	54:4	3	
water	36:41	0:0	4	{
decl	37:8	37:40	4	ChannelMap	*ch
op	37:23	0:0	4	=
op	37:25	0:0	4	&
water	37:26	0:0	4	s
op	37:27	0:0	4	->
water	37:29	0:0	4	channels
op	37:37	0:0	4	[
water	37:38	0:0	4	i
op	37:39	0:0	4	]
decl	38:8	38:51	4	AVFrame	*cur
op	38:23	0:0	4	=
water	38:25	0:0	4	s
op	38:26	0:0	4	->
water	38:28	0:0	4	input_frames
op	38:40	0:0	4	[
water	38:41	0:0	4	ch
op	38:43	0:0	4	->
water	38:45	0:0	4	input
op	38:50	0:0	4	]
decl	39:8	39:24	4	AVBufferRef	*buf
water	40:8	0:0	4	frame
op	40:13	0:0	4	->
water	40:15	0:0	4	extended_data
op	40:28	0:0	4	[
water	40:29	0:0	4	i
op	40:30	0:0	4	]
op	40:32	0:0	4	=
water	40:34	0:0	4	cur
op	40:37	0:0	4	->
water	40:39	0:0	4	extended_data
op	40:52	0:0	4	[
water	40:53	0:0	4	ch
op	40:55	0:0	4	->
water	40:57	0:0	4	in_channel_idx
op	40:71	0:0	4	]
water	40:72	0:0	4	;
water	41:8	0:0	4	linesize
op	41:17	0:0	4	=
call	41:19	41:51	4	FFMIN
arg	41:25	41:33	5	linesize
water	41:25	0:0	6	linesize
arg	41:35	41:51	5	cur->linesize[0]
water	41:35	0:0	6	cur
op	41:38	0:0	6	->
water	41:40	0:0	6	linesize
op	41:48	0:0	6	[
water	41:49	0:0	6	0
op	41:50	0:0	6	]
water	41:52	0:0	4	;
water	44:8	0:0	4	buf
op	44:12	0:0	4	=
call	44:14	44:63	4	av_frame_get_plane_buffer
arg	44:40	44:43	5	cur
water	44:40	0:0	6	cur
arg	44:45	44:63	5	ch->in_channel_idx
water	44:45	0:0	6	ch
op	44:47	0:0	6	->
water	44:49	0:0	6	in_channel_idx
water	44:64	0:0	4	;
if	45:8	48:8	4	(! buf)
cond	45:12	45:13	5	! buf
op	45:12	0:0	6	!
water	45:13	0:0	6	buf
stmts	45:18	48:8	5	
water	45:18	0:0	6	{
water	46:12	0:0	6	ret
op	46:16	0:0	6	=
call	46:18	46:32	6	AVERROR
arg	46:26	46:32	7	EINVAL
water	46:26	0:0	8	EINVAL
water	46:33	0:0	6	;
goto	47:12	47:21	6	fail
water	47:17	0:0	7	fail
water	48:8	0:0	6	}
for	49:8	51:21	4	(j = 0 ;j < nb_buffers;j ++)
forinit	49:13	49:18	5	j = 0 ;
water	49:13	0:0	6	j
op	49:15	0:0	6	=
water	49:17	0:0	6	0
water	49:18	0:0	6	;
cond	49:20	49:24	5	j < nb_buffers
water	49:20	0:0	6	j
op	49:22	0:0	6	<
water	49:24	0:0	6	nb_buffers
forexpr	49:36	49:37	5	j ++
water	49:36	0:0	6	j
op	49:37	0:0	6	++
stmts	50:12	51:21	5	
if	50:12	51:21	6	(s -> buffers [ j ] -> buffer == buf -> buffer)
cond	50:16	50:46	7	s -> buffers [ j ] -> buffer == buf -> buffer
water	50:16	0:0	8	s
op	50:17	0:0	8	->
water	50:19	0:0	8	buffers
op	50:26	0:0	8	[
water	50:27	0:0	8	j
op	50:28	0:0	8	]
op	50:29	0:0	8	->
water	50:31	0:0	8	buffer
op	50:38	0:0	8	==
water	50:41	0:0	8	buf
op	50:44	0:0	8	->
water	50:46	0:0	8	buffer
stmts	51:16	51:21	7	
break	51:16	51:21	8	
if	52:8	53:42	4	(j == i)
cond	52:12	52:17	5	j == i
water	52:12	0:0	6	j
op	52:14	0:0	6	==
water	52:17	0:0	6	i
stmts	53:12	53:42	5	
water	53:12	0:0	6	s
op	53:13	0:0	6	->
water	53:15	0:0	6	buffers
op	53:22	0:0	6	[
water	53:23	0:0	6	nb_buffers
op	53:33	0:0	6	++
op	53:35	0:0	6	]
op	53:37	0:0	6	=
water	53:39	0:0	6	buf
water	53:42	0:0	6	;
water	54:4	0:0	4	}
if	56:4	65:4	2	(nb_buffers >FF_ARRAY_ELEMS (frame -> buf ))
cond	56:8	56:46	3	nb_buffers >FF_ARRAY_ELEMS (frame -> buf )
water	56:8	0:0	4	nb_buffers
op	56:19	0:0	4	>
call	56:21	56:46	4	FF_ARRAY_ELEMS
arg	56:36	56:46	5	frame->buf
water	56:36	0:0	6	frame
op	56:41	0:0	6	->
water	56:43	0:0	6	buf
stmts	56:49	65:4	3	
water	56:49	0:0	4	{
water	57:8	0:0	4	frame
op	57:13	0:0	4	->
water	57:15	0:0	4	nb_extended_buf
op	57:31	0:0	4	=
water	57:33	0:0	4	nb_buffers
op	57:44	0:0	4	-
call	57:46	57:71	4	FF_ARRAY_ELEMS
arg	57:61	57:71	5	frame->buf
water	57:61	0:0	6	frame
op	57:66	0:0	6	->
water	57:68	0:0	6	buf
water	57:72	0:0	4	;
water	58:8	0:0	4	frame
op	58:13	0:0	4	->
water	58:15	0:0	4	extended_buf
op	58:28	0:0	4	=
call	58:30	59:75	4	av_mallocz_array
arg	58:47	58:69	5	frame->nb_extended_buf
water	58:47	0:0	6	frame
op	58:52	0:0	6	->
water	58:54	0:0	6	nb_extended_buf
arg	59:47	59:75	5	sizeof(*frame->extended_buf)
op	59:47	0:0	6	sizeof
water	59:53	0:0	6	(
op	59:54	0:0	6	*
water	59:55	0:0	6	frame
op	59:60	0:0	6	->
water	59:62	0:0	6	extended_buf
water	59:74	0:0	6	)
water	59:76	0:0	4	;
if	60:8	64:8	4	(! frame -> extended_buf)
cond	60:12	60:20	5	! frame -> extended_buf
op	60:12	0:0	6	!
water	60:13	0:0	6	frame
op	60:18	0:0	6	->
water	60:20	0:0	6	extended_buf
stmts	60:34	64:8	5	
water	60:34	0:0	6	{
water	61:12	0:0	6	frame
op	61:17	0:0	6	->
water	61:19	0:0	6	nb_extended_buf
op	61:35	0:0	6	=
water	61:37	0:0	6	0
water	61:38	0:0	6	;
water	62:12	0:0	6	ret
op	62:16	0:0	6	=
call	62:18	62:32	6	AVERROR
arg	62:26	62:32	7	ENOMEM
water	62:26	0:0	8	ENOMEM
water	62:33	0:0	6	;
goto	63:12	63:21	6	fail
water	63:17	0:0	7	fail
water	64:8	0:0	6	}
water	65:4	0:0	4	}
for	66:4	72:4	2	(i = 0 ;i <FFMIN (FF_ARRAY_ELEMS (frame -> buf ) ,nb_buffers );i ++)
forinit	66:9	66:14	3	i = 0 ;
water	66:9	0:0	4	i
op	66:11	0:0	4	=
water	66:13	0:0	4	0
water	66:14	0:0	4	;
cond	66:16	66:64	3	i <FFMIN (FF_ARRAY_ELEMS (frame -> buf ) ,nb_buffers )
water	66:16	0:0	4	i
op	66:18	0:0	4	<
call	66:20	66:64	4	FFMIN
arg	66:26	66:52	5	FF_ARRAY_ELEMS(frame->buf)
call	66:26	66:51	6	FF_ARRAY_ELEMS
arg	66:41	66:51	7	frame->buf
water	66:41	0:0	8	frame
op	66:46	0:0	8	->
water	66:48	0:0	8	buf
arg	66:54	66:64	5	nb_buffers
water	66:54	0:0	6	nb_buffers
forexpr	66:67	66:68	3	i ++
water	66:67	0:0	4	i
op	66:68	0:0	4	++
stmts	66:72	72:4	3	
water	66:72	0:0	4	{
water	67:8	0:0	4	frame
op	67:13	0:0	4	->
water	67:15	0:0	4	buf
op	67:18	0:0	4	[
water	67:19	0:0	4	i
op	67:20	0:0	4	]
op	67:22	0:0	4	=
call	67:24	67:51	4	av_buffer_ref
arg	67:38	67:51	5	s->buffers[i]
water	67:38	0:0	6	s
op	67:39	0:0	6	->
water	67:41	0:0	6	buffers
op	67:48	0:0	6	[
water	67:49	0:0	6	i
op	67:50	0:0	6	]
water	67:52	0:0	4	;
if	68:8	71:8	4	(! frame -> buf [ i ])
cond	68:12	68:25	5	! frame -> buf [ i ]
op	68:12	0:0	6	!
water	68:13	0:0	6	frame
op	68:18	0:0	6	->
water	68:20	0:0	6	buf
op	68:23	0:0	6	[
water	68:24	0:0	6	i
op	68:25	0:0	6	]
stmts	68:28	71:8	5	
water	68:28	0:0	6	{
water	69:12	0:0	6	ret
op	69:16	0:0	6	=
call	69:18	69:32	6	AVERROR
arg	69:26	69:32	7	ENOMEM
water	69:26	0:0	8	ENOMEM
water	69:33	0:0	6	;
goto	70:12	70:21	6	fail
water	70:17	0:0	7	fail
water	71:8	0:0	6	}
water	72:4	0:0	4	}
for	73:4	80:4	2	(i = 0 ;i < frame -> nb_extended_buf;i ++)
forinit	73:9	73:14	3	i = 0 ;
water	73:9	0:0	4	i
op	73:11	0:0	4	=
water	73:13	0:0	4	0
water	73:14	0:0	4	;
cond	73:16	73:27	3	i < frame -> nb_extended_buf
water	73:16	0:0	4	i
op	73:18	0:0	4	<
water	73:20	0:0	4	frame
op	73:25	0:0	4	->
water	73:27	0:0	4	nb_extended_buf
forexpr	73:44	73:45	3	i ++
water	73:44	0:0	4	i
op	73:45	0:0	4	++
stmts	73:49	80:4	3	
water	73:49	0:0	4	{
water	74:8	0:0	4	frame
op	74:13	0:0	4	->
water	74:15	0:0	4	extended_buf
op	74:27	0:0	4	[
water	74:28	0:0	4	i
op	74:29	0:0	4	]
op	74:31	0:0	4	=
call	74:33	75:74	4	av_buffer_ref
arg	74:47	75:74	5	s->buffers[i+FF_ARRAY_ELEMS(frame->buf)]
water	74:47	0:0	6	s
op	74:48	0:0	6	->
water	74:50	0:0	6	buffers
op	74:57	0:0	6	[
water	74:58	0:0	6	i
op	74:60	0:0	6	+
call	75:47	75:72	6	FF_ARRAY_ELEMS
arg	75:62	75:72	7	frame->buf
water	75:62	0:0	8	frame
op	75:67	0:0	8	->
water	75:69	0:0	8	buf
op	75:73	0:0	6	]
water	75:75	0:0	4	;
if	76:8	79:8	4	(! frame -> extended_buf [ i ])
cond	76:12	76:34	5	! frame -> extended_buf [ i ]
op	76:12	0:0	6	!
water	76:13	0:0	6	frame
op	76:18	0:0	6	->
water	76:20	0:0	6	extended_buf
op	76:32	0:0	6	[
water	76:33	0:0	6	i
op	76:34	0:0	6	]
stmts	76:37	79:8	5	
water	76:37	0:0	6	{
water	77:12	0:0	6	ret
op	77:16	0:0	6	=
call	77:18	77:32	6	AVERROR
arg	77:26	77:32	7	ENOMEM
water	77:26	0:0	8	ENOMEM
water	77:33	0:0	6	;
goto	78:12	78:21	6	fail
water	78:17	0:0	7	fail
water	79:8	0:0	6	}
water	80:4	0:0	4	}
water	81:4	0:0	2	frame
op	81:9	0:0	2	->
water	81:11	0:0	2	nb_samples
op	81:26	0:0	2	=
water	81:28	0:0	2	nb_samples
water	81:38	0:0	2	;
water	82:4	0:0	2	frame
op	82:9	0:0	2	->
water	82:11	0:0	2	channel_layout
op	82:26	0:0	2	=
water	82:28	0:0	2	outlink
op	82:35	0:0	2	->
water	82:37	0:0	2	channel_layout
water	82:51	0:0	2	;
call	83:4	83:50	2	av_frame_set_channels
arg	83:26	83:31	3	frame
water	83:26	0:0	4	frame
arg	83:33	83:50	3	outlink->channels
water	83:33	0:0	4	outlink
op	83:40	0:0	4	->
water	83:42	0:0	4	channels
water	83:51	0:0	2	;
water	84:4	0:0	2	frame
op	84:9	0:0	2	->
water	84:11	0:0	2	sample_rate
op	84:26	0:0	2	=
water	84:28	0:0	2	outlink
op	84:35	0:0	2	->
water	84:37	0:0	2	sample_rate
water	84:48	0:0	2	;
water	85:4	0:0	2	frame
op	85:9	0:0	2	->
water	85:11	0:0	2	format
op	85:26	0:0	2	=
water	85:28	0:0	2	outlink
op	85:35	0:0	2	->
water	85:37	0:0	2	format
water	85:43	0:0	2	;
water	86:4	0:0	2	frame
op	86:9	0:0	2	->
water	86:11	0:0	2	pts
op	86:26	0:0	2	=
water	86:28	0:0	2	s
op	86:29	0:0	2	->
water	86:31	0:0	2	input_frames
op	86:43	0:0	2	[
water	86:44	0:0	2	0
op	86:45	0:0	2	]
op	86:46	0:0	2	->
water	86:48	0:0	2	pts
water	86:51	0:0	2	;
water	87:4	0:0	2	frame
op	87:9	0:0	2	->
water	87:11	0:0	2	linesize
op	87:19	0:0	2	[
water	87:20	0:0	2	0
op	87:21	0:0	2	]
op	87:26	0:0	2	=
water	87:28	0:0	2	linesize
water	87:36	0:0	2	;
if	88:4	91:4	2	(frame -> data != frame -> extended_data)
cond	88:8	88:30	3	frame -> data != frame -> extended_data
water	88:8	0:0	4	frame
op	88:13	0:0	4	->
water	88:15	0:0	4	data
op	88:20	0:0	4	!=
water	88:23	0:0	4	frame
op	88:28	0:0	4	->
water	88:30	0:0	4	extended_data
stmts	88:45	91:4	3	
water	88:45	0:0	4	{
call	89:8	90:65	4	memcpy
arg	89:15	89:26	5	frame->data
water	89:15	0:0	6	frame
op	89:20	0:0	6	->
water	89:22	0:0	6	data
arg	89:28	89:48	5	frame->extended_data
water	89:28	0:0	6	frame
op	89:33	0:0	6	->
water	89:35	0:0	6	extended_data
arg	89:50	90:65	5	sizeof(*frame->data)*FFMIN(FF_ARRAY_ELEMS(frame->data),s->nb_channels)
op	89:50	0:0	6	sizeof
water	89:56	0:0	6	(
op	89:57	0:0	6	*
water	89:58	0:0	6	frame
op	89:63	0:0	6	->
water	89:65	0:0	6	data
water	89:69	0:0	6	)
call	89:71	90:64	6	*FFMIN
arg	90:21	90:48	7	FF_ARRAY_ELEMS(frame->data)
call	90:21	90:47	8	FF_ARRAY_ELEMS
arg	90:36	90:47	9	frame->data
water	90:36	0:0	10	frame
op	90:41	0:0	10	->
water	90:43	0:0	10	data
arg	90:50	90:64	7	s->nb_channels
water	90:50	0:0	8	s
op	90:51	0:0	8	->
water	90:53	0:0	8	nb_channels
water	90:66	0:0	4	;
water	91:4	0:0	4	}
water	92:4	0:0	2	ret
op	92:8	0:0	2	=
call	92:10	92:40	2	ff_filter_frame
arg	92:26	92:33	3	outlink
water	92:26	0:0	4	outlink
arg	92:35	92:40	3	frame
water	92:35	0:0	4	frame
water	92:41	0:0	2	;
for	93:4	94:42	2	(i = 0 ;i < ctx -> nb_inputs;i ++)
forinit	93:9	93:14	3	i = 0 ;
water	93:9	0:0	4	i
op	93:11	0:0	4	=
water	93:13	0:0	4	0
water	93:14	0:0	4	;
cond	93:16	93:25	3	i < ctx -> nb_inputs
water	93:16	0:0	4	i
op	93:18	0:0	4	<
water	93:20	0:0	4	ctx
op	93:23	0:0	4	->
water	93:25	0:0	4	nb_inputs
forexpr	93:36	93:37	3	i ++
water	93:36	0:0	4	i
op	93:37	0:0	4	++
stmts	94:8	94:42	3	
call	94:8	94:41	4	av_frame_free
arg	94:22	94:41	5	&s->input_frames[i]
op	94:22	0:0	6	&
water	94:23	0:0	6	s
op	94:24	0:0	6	->
water	94:26	0:0	6	input_frames
op	94:38	0:0	6	[
water	94:39	0:0	6	i
op	94:40	0:0	6	]
water	94:42	0:0	4	;
return	95:4	95:14	2	ret
water	95:11	0:0	3	ret
label	96:0	96:4	2	fail :
call	97:4	97:24	2	av_frame_free
arg	97:18	97:24	3	&frame
op	97:18	0:0	4	&
water	97:19	0:0	4	frame
water	97:25	0:0	2	;
return	98:4	98:14	2	ret
water	98:11	0:0	3	ret
