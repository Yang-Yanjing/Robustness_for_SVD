func	1:0	11:0	0	static int	nut_probe
params	1:20	0:0	1	
param	1:21	1:35	2	AVProbeData *	p
stmnts	0:0	10:12	1	
decl	3:4	3:9	2	int	i
for	4:4	9:4	2	(i = 0 ;i < p -> buf_size - 8;i ++)
forinit	4:9	4:14	3	i = 0 ;
water	4:9	0:0	4	i
op	4:11	0:0	4	=
water	4:13	0:0	4	0
water	4:14	0:0	4	;
cond	4:16	4:32	3	i < p -> buf_size - 8
water	4:16	0:0	4	i
op	4:18	0:0	4	<
water	4:20	0:0	4	p
op	4:21	0:0	4	->
water	4:23	0:0	4	buf_size
op	4:31	0:0	4	-
water	4:32	0:0	4	8
forexpr	4:35	4:36	3	i ++
water	4:35	0:0	4	i
op	4:36	0:0	4	++
stmts	4:40	9:4	3	
water	4:40	0:0	4	{
if	5:8	6:20	4	(AV_RB32 (p -> buf + i ) != MAIN_STARTCODE >> 32)
cond	5:12	5:49	5	AV_RB32 (p -> buf + i ) != MAIN_STARTCODE >> 32
call	5:12	5:28	6	AV_RB32
arg	5:20	5:28	7	p->buf+i
water	5:20	0:0	8	p
op	5:21	0:0	8	->
water	5:23	0:0	8	buf
op	5:26	0:0	8	+
water	5:27	0:0	8	i
op	5:30	0:0	6	!=
water	5:33	0:0	6	MAIN_STARTCODE
op	5:47	0:0	6	>>
water	5:49	0:0	6	32
stmts	6:12	6:20	5	
continue	6:12	6:20	6	
if	7:8	8:36	4	(AV_RB32 (p -> buf + i + 4 ) == ( MAIN_STARTCODE & 0 xFFFFFFFF ))
cond	7:12	7:63	5	AV_RB32 (p -> buf + i + 4 ) == ( MAIN_STARTCODE & 0 xFFFFFFFF )
call	7:12	7:30	6	AV_RB32
arg	7:20	7:30	7	p->buf+i+4
water	7:20	0:0	8	p
op	7:21	0:0	8	->
water	7:23	0:0	8	buf
op	7:26	0:0	8	+
water	7:27	0:0	8	i
op	7:28	0:0	8	+
water	7:29	0:0	8	4
op	7:32	0:0	6	==
water	7:35	0:0	6	(
water	7:36	0:0	6	MAIN_STARTCODE
op	7:51	0:0	6	&
water	7:53	0:0	6	0
water	7:54	0:0	6	xFFFFFFFF
water	7:63	0:0	6	)
stmts	8:12	8:36	5	
return	8:12	8:36	6	AVPROBE_SCORE_MAX
water	8:19	0:0	7	AVPROBE_SCORE_MAX
water	9:4	0:0	4	}
return	10:4	10:12	2	0
water	10:11	0:0	3	0
