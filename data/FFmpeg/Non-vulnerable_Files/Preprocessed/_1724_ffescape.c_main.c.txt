func	1:0	118:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	117:12	1	
decl	3:4	3:16	2	AVBPrint	src
decl	4:4	4:27	2	char	*src_buf
water	4:17	0:0	2	,
decl	4:4	4:27	2	char	*dst_buf
decl	5:4	5:54	2	const char	*outfilename
op	5:28	0:0	2	=
water	5:30	0:0	2	NULL
water	5:34	0:0	2	,
decl	5:4	5:54	2	const char	*infilename
op	5:48	0:0	2	=
water	5:50	0:0	2	NULL
decl	6:4	6:40	2	FILE	*outfile
op	6:18	0:0	2	=
water	6:20	0:0	2	NULL
water	6:24	0:0	2	,
decl	6:4	6:40	2	FILE	*infile
op	6:34	0:0	2	=
water	6:36	0:0	2	NULL
decl	7:4	7:30	2	const char	*prompt
op	7:23	0:0	2	=
water	7:25	0:0	2	"=> "
decl	8:4	8:55	2	enum AVEscapeMode	escape_mode
op	8:34	0:0	2	=
water	8:36	0:0	2	AV_ESCAPE_MODE_AUTO
decl	9:4	9:24	2	int	escape_flags
op	9:21	0:0	2	=
water	9:23	0:0	2	0
decl	10:4	10:17	2	int	level
op	10:14	0:0	2	=
water	10:16	0:0	2	1
decl	11:4	11:16	2	int	echo
op	11:13	0:0	2	=
water	11:15	0:0	2	0
decl	12:4	12:30	2	char	*special_chars
op	12:24	0:0	2	=
water	12:26	0:0	2	NULL
decl	13:4	13:9	2	int	c
while	14:4	71:4	2	(( c =getopt (argc ,argv ,"ef:hi:l:o:m:p:s:" ) ) != - 1)
cond	14:11	14:60	3	( c =getopt (argc ,argv ,"ef:hi:l:o:m:p:s:" ) ) != - 1
water	14:11	0:0	4	(
water	14:12	0:0	4	c
op	14:14	0:0	4	=
call	14:16	14:53	4	getopt
arg	14:23	14:27	5	argc
water	14:23	0:0	6	argc
arg	14:29	14:33	5	argv
water	14:29	0:0	6	argv
arg	14:35	14:53	5	"ef:hi:l:o:m:p:s:"
water	14:35	0:0	6	"ef:hi:l:o:m:p:s:"
water	14:54	0:0	4	)
op	14:56	0:0	4	!=
op	14:59	0:0	4	-
water	14:60	0:0	4	1
stmts	14:63	71:4	3	
water	14:63	0:0	4	{
switch	15:8	70:8	4	(c)
cond	15:16	15:16	5	c
water	15:16	0:0	6	c
stmts	15:19	70:8	5	
water	15:19	0:0	6	{
water	16:8	0:0	6	case
water	16:13	0:0	6	'e'
water	16:16	0:0	6	:
water	17:12	0:0	6	echo
op	17:17	0:0	6	=
water	17:19	0:0	6	1
water	17:20	0:0	6	;
break	18:12	18:17	6	
water	19:8	0:0	6	case
water	19:13	0:0	6	'h'
water	19:16	0:0	6	:
call	20:12	20:18	6	usage
water	20:19	0:0	6	;
return	21:12	21:20	6	0
water	21:19	0:0	7	0
water	22:8	0:0	6	case
water	22:13	0:0	6	'i'
water	22:16	0:0	6	:
water	23:12	0:0	6	infilename
op	23:23	0:0	6	=
water	23:25	0:0	6	optarg
water	23:31	0:0	6	;
break	24:12	24:17	6	
water	25:8	0:0	6	case
water	25:13	0:0	6	'f'
water	25:16	0:0	6	:
water	26:12	0:0	6	if
water	26:20	0:0	6	(
op	26:21	0:0	6	!
call	26:22	26:49	6	strcmp
arg	26:29	26:35	7	optarg
water	26:29	0:0	8	optarg
arg	26:37	26:49	7	"whitespace"
water	26:37	0:0	8	"whitespace"
water	26:50	0:0	6	)
water	26:52	0:0	6	escape_flags
op	26:65	0:0	6	|=
water	26:68	0:0	6	AV_ESCAPE_FLAG_WHITESPACE
water	26:93	0:0	6	;
else	27:12	27:89	6
stmts	27:17	27:89	7	
if	27:17	27:89	8	(!strcmp (optarg ,"strict" ))
cond	27:21	27:45	9	!strcmp (optarg ,"strict" )
op	27:21	0:0	10	!
call	27:22	27:45	10	strcmp
arg	27:29	27:35	11	optarg
water	27:29	0:0	12	optarg
arg	27:37	27:45	11	"strict"
water	27:37	0:0	12	"strict"
stmts	27:52	27:89	9	
water	27:52	0:0	10	escape_flags
op	27:65	0:0	10	|=
water	27:68	0:0	10	AV_ESCAPE_FLAG_STRICT
water	27:89	0:0	10	;
else	28:12	33:12	6
stmts	28:17	33:12	7	
water	28:17	0:0	8	{
call	29:16	31:81	8	av_log
arg	29:23	29:27	9	NULL
water	29:23	0:0	10	NULL
arg	29:29	29:41	9	AV_LOG_ERROR
water	29:29	0:0	10	AV_LOG_ERROR
arg	30:23	31:73	9	"Invalid value '%s' for option -f, ""valid arguments are 'whitespace', and 'strict'\n"
water	30:23	0:0	10	"Invalid value '%s' for option -f, "
water	31:23	0:0	10	"valid arguments are 'whitespace', and 'strict'\n"
arg	31:75	31:81	9	optarg
water	31:75	0:0	10	optarg
water	31:82	0:0	8	;
return	32:16	32:24	8	1
water	32:23	0:0	9	1
water	33:12	0:0	8	}
break	34:12	34:17	6	
water	35:8	0:0	6	case
water	35:13	0:0	6	'l'
water	35:16	0:0	6	:
water	36:8	0:0	6	{
water	37:12	0:0	6	char
op	37:17	0:0	6	*
water	37:18	0:0	6	tail
water	37:22	0:0	6	;
water	38:12	0:0	6	long
water	38:17	0:0	6	int
water	38:21	0:0	6	li
op	38:24	0:0	6	=
call	38:26	38:50	6	strtol
arg	38:33	38:39	7	optarg
water	38:33	0:0	8	optarg
arg	38:41	38:46	7	&tail
op	38:41	0:0	8	&
water	38:42	0:0	8	tail
arg	38:48	38:50	7	10
water	38:48	0:0	8	10
water	38:51	0:0	6	;
water	39:12	0:0	6	if
water	39:15	0:0	6	(
op	39:16	0:0	6	*
water	39:17	0:0	6	tail
op	39:22	0:0	6	||
water	39:25	0:0	6	li
op	39:28	0:0	6	>
water	39:30	0:0	6	INT_MAX
op	39:38	0:0	6	||
water	39:41	0:0	6	li
op	39:44	0:0	6	<
water	39:46	0:0	6	0
water	39:47	0:0	6	)
water	39:49	0:0	6	{
call	40:16	42:30	6	av_log
arg	40:23	40:27	7	NULL
water	40:23	0:0	8	NULL
arg	40:29	40:41	7	AV_LOG_ERROR
water	40:29	0:0	8	AV_LOG_ERROR
arg	41:24	41:101	7	"Invalid value '%s' for option -l, argument must be a non negative integer\n"
water	41:24	0:0	8	"Invalid value '%s' for option -l, argument must be a non negative integer\n"
arg	42:24	42:30	7	optarg
water	42:24	0:0	8	optarg
water	42:31	0:0	6	;
water	43:16	0:0	6	return
water	43:23	0:0	6	1
water	43:24	0:0	6	;
water	44:12	0:0	6	}
water	45:12	0:0	6	level
op	45:18	0:0	6	=
water	45:20	0:0	6	li
water	45:22	0:0	6	;
water	46:12	0:0	6	break
water	46:17	0:0	6	;
water	47:8	0:0	6	}
water	48:8	0:0	6	case
water	48:13	0:0	6	'm'
water	48:16	0:0	6	:
water	49:12	0:0	6	if
water	49:20	0:0	6	(
op	49:21	0:0	6	!
call	49:22	49:43	6	strcmp
arg	49:29	49:35	7	optarg
water	49:29	0:0	8	optarg
arg	49:37	49:43	7	"auto"
water	49:37	0:0	8	"auto"
water	49:44	0:0	6	)
water	49:51	0:0	6	escape_mode
op	49:63	0:0	6	=
water	49:65	0:0	6	AV_ESCAPE_MODE_AUTO
water	49:84	0:0	6	;
else	50:12	50:89	6
stmts	50:17	50:89	7	
if	50:17	50:89	8	(!strcmp (optarg ,"backslash" ))
cond	50:21	50:48	9	!strcmp (optarg ,"backslash" )
op	50:21	0:0	10	!
call	50:22	50:48	10	strcmp
arg	50:29	50:35	11	optarg
water	50:29	0:0	12	optarg
arg	50:37	50:48	11	"backslash"
water	50:37	0:0	12	"backslash"
stmts	50:51	50:89	9	
water	50:51	0:0	10	escape_mode
op	50:63	0:0	10	=
water	50:65	0:0	10	AV_ESCAPE_MODE_BACKSLASH
water	50:89	0:0	10	;
else	51:12	51:85	6
stmts	51:17	51:85	7	
if	51:17	51:85	8	(!strcmp (optarg ,"quote" ))
cond	51:21	51:44	9	!strcmp (optarg ,"quote" )
op	51:21	0:0	10	!
call	51:22	51:44	10	strcmp
arg	51:29	51:35	11	optarg
water	51:29	0:0	12	optarg
arg	51:37	51:44	11	"quote"
water	51:37	0:0	12	"quote"
stmts	51:51	51:85	9	
water	51:51	0:0	10	escape_mode
op	51:63	0:0	10	=
water	51:65	0:0	10	AV_ESCAPE_MODE_QUOTE
water	51:85	0:0	10	;
else	52:12	57:12	6
stmts	52:17	57:12	7	
water	52:17	0:0	8	{
call	53:16	55:79	8	av_log
arg	53:23	53:27	9	NULL
water	53:23	0:0	10	NULL
arg	53:29	53:41	9	AV_LOG_ERROR
water	53:29	0:0	10	AV_LOG_ERROR
arg	54:23	55:71	9	"Invalid value '%s' for option -m, ""valid arguments are 'backslash', and 'quote'\n"
water	54:23	0:0	10	"Invalid value '%s' for option -m, "
water	55:23	0:0	10	"valid arguments are 'backslash', and 'quote'\n"
arg	55:73	55:79	9	optarg
water	55:73	0:0	10	optarg
water	55:80	0:0	8	;
return	56:16	56:24	8	1
water	56:23	0:0	9	1
water	57:12	0:0	8	}
break	58:12	58:17	6	
water	59:8	0:0	6	case
water	59:13	0:0	6	'o'
water	59:16	0:0	6	:
water	60:12	0:0	6	outfilename
op	60:24	0:0	6	=
water	60:26	0:0	6	optarg
water	60:32	0:0	6	;
break	61:12	61:17	6	
water	62:8	0:0	6	case
water	62:13	0:0	6	'p'
water	62:16	0:0	6	:
water	63:12	0:0	6	prompt
op	63:19	0:0	6	=
water	63:21	0:0	6	optarg
water	63:27	0:0	6	;
break	64:12	64:17	6	
water	65:8	0:0	6	case
water	65:13	0:0	6	's'
water	65:16	0:0	6	:
water	66:12	0:0	6	special_chars
op	66:26	0:0	6	=
water	66:28	0:0	6	optarg
water	66:34	0:0	6	;
break	67:12	67:17	6	
water	68:8	0:0	6	case
water	68:13	0:0	6	'?'
water	68:16	0:0	6	:
water	69:12	0:0	6	return
water	69:19	0:0	6	1
water	69:20	0:0	6	;
water	70:8	0:0	6	}
water	71:4	0:0	4	}
if	72:4	75:4	2	(! infilename || !strcmp (infilename ,"-" ))
cond	72:8	72:46	3	! infilename || !strcmp (infilename ,"-" )
op	72:8	0:0	4	!
water	72:9	0:0	4	infilename
op	72:20	0:0	4	||
op	72:23	0:0	4	!
call	72:24	72:46	4	strcmp
arg	72:31	72:41	5	infilename
water	72:31	0:0	6	infilename
arg	72:43	72:46	5	"-"
water	72:43	0:0	6	"-"
stmts	72:49	75:4	3	
water	72:49	0:0	4	{
water	73:8	0:0	4	infilename
op	73:19	0:0	4	=
water	73:21	0:0	4	"stdin"
water	73:28	0:0	4	;
water	74:8	0:0	4	infile
op	74:15	0:0	4	=
water	74:17	0:0	4	stdin
water	74:22	0:0	4	;
water	75:4	0:0	4	}
else	75:6	77:4	2
stmts	75:11	77:4	3	
water	75:11	0:0	4	{
water	76:8	0:0	4	infile
op	76:15	0:0	4	=
call	76:17	76:38	4	fopen
arg	76:23	76:33	5	infilename
water	76:23	0:0	6	infilename
arg	76:35	76:38	5	"r"
water	76:35	0:0	6	"r"
water	76:39	0:0	4	;
water	77:4	0:0	4	}
if	78:4	81:4	2	(! infile)
cond	78:8	78:9	3	! infile
op	78:8	0:0	4	!
water	78:9	0:0	4	infile
stmts	78:17	81:4	3	
water	78:17	0:0	4	{
call	79:8	79:106	4	av_log
arg	79:15	79:19	5	NULL
water	79:15	0:0	6	NULL
arg	79:21	79:33	5	AV_LOG_ERROR
water	79:21	0:0	6	AV_LOG_ERROR
arg	79:35	79:77	5	"Impossible to open input file '%s': %s\n"
water	79:35	0:0	6	"Impossible to open input file '%s': %s\n"
arg	79:79	79:89	5	infilename
water	79:79	0:0	6	infilename
arg	79:91	79:106	5	strerror(errno)
call	79:91	79:105	6	strerror
arg	79:100	79:105	7	errno
water	79:100	0:0	8	errno
water	79:107	0:0	4	;
return	80:8	80:16	4	1
water	80:15	0:0	5	1
water	81:4	0:0	4	}
if	82:4	85:4	2	(! outfilename || !strcmp (outfilename ,"-" ))
cond	82:8	82:48	3	! outfilename || !strcmp (outfilename ,"-" )
op	82:8	0:0	4	!
water	82:9	0:0	4	outfilename
op	82:21	0:0	4	||
op	82:24	0:0	4	!
call	82:25	82:48	4	strcmp
arg	82:32	82:43	5	outfilename
water	82:32	0:0	6	outfilename
arg	82:45	82:48	5	"-"
water	82:45	0:0	6	"-"
stmts	82:51	85:4	3	
water	82:51	0:0	4	{
water	83:8	0:0	4	outfilename
op	83:20	0:0	4	=
water	83:22	0:0	4	"stdout"
water	83:30	0:0	4	;
water	84:8	0:0	4	outfile
op	84:16	0:0	4	=
water	84:18	0:0	4	stdout
water	84:24	0:0	4	;
water	85:4	0:0	4	}
else	85:6	87:4	2
stmts	85:11	87:4	3	
water	85:11	0:0	4	{
water	86:8	0:0	4	outfile
op	86:16	0:0	4	=
call	86:18	86:40	4	fopen
arg	86:24	86:35	5	outfilename
water	86:24	0:0	6	outfilename
arg	86:37	86:40	5	"w"
water	86:37	0:0	6	"w"
water	86:41	0:0	4	;
water	87:4	0:0	4	}
if	88:4	91:4	2	(! outfile)
cond	88:8	88:9	3	! outfile
op	88:8	0:0	4	!
water	88:9	0:0	4	outfile
stmts	88:18	91:4	3	
water	88:18	0:0	4	{
call	89:8	89:108	4	av_log
arg	89:15	89:19	5	NULL
water	89:15	0:0	6	NULL
arg	89:21	89:33	5	AV_LOG_ERROR
water	89:21	0:0	6	AV_LOG_ERROR
arg	89:35	89:78	5	"Impossible to open output file '%s': %s\n"
water	89:35	0:0	6	"Impossible to open output file '%s': %s\n"
arg	89:80	89:91	5	outfilename
water	89:80	0:0	6	outfilename
arg	89:93	89:108	5	strerror(errno)
call	89:93	89:107	6	strerror
arg	89:102	89:107	7	errno
water	89:102	0:0	8	errno
water	89:109	0:0	4	;
return	90:8	90:16	4	1
water	90:15	0:0	5	1
water	91:4	0:0	4	}
call	93:4	93:52	2	av_bprint_init
arg	93:19	93:23	3	&src
op	93:19	0:0	4	&
water	93:20	0:0	4	src
arg	93:25	93:26	3	1
water	93:25	0:0	4	1
arg	93:28	93:52	3	AV_BPRINT_SIZE_UNLIMITED
water	93:28	0:0	4	AV_BPRINT_SIZE_UNLIMITED
water	93:53	0:0	2	;
while	94:4	95:35	2	(( c =fgetc (infile ) ) != EOF)
cond	94:11	94:34	3	( c =fgetc (infile ) ) != EOF
water	94:11	0:0	4	(
water	94:12	0:0	4	c
op	94:14	0:0	4	=
call	94:16	94:28	4	fgetc
arg	94:22	94:28	5	infile
water	94:22	0:0	6	infile
water	94:29	0:0	4	)
op	94:31	0:0	4	!=
water	94:34	0:0	4	EOF
stmts	95:8	95:35	3	
call	95:8	95:34	4	av_bprint_chars
arg	95:24	95:28	5	&src
op	95:24	0:0	6	&
water	95:25	0:0	6	src
arg	95:30	95:31	5	c
water	95:30	0:0	6	c
arg	95:33	95:34	5	1
water	95:33	0:0	6	1
water	95:35	0:0	4	;
call	96:4	96:30	2	av_bprint_chars
arg	96:20	96:24	3	&src
op	96:20	0:0	4	&
water	96:21	0:0	4	src
arg	96:26	96:27	3	0
water	96:26	0:0	4	0
arg	96:29	96:30	3	1
water	96:29	0:0	4	1
water	96:31	0:0	2	;
if	97:4	101:4	2	(!av_bprint_is_complete (& src ))
cond	97:8	97:35	3	!av_bprint_is_complete (& src )
op	97:8	0:0	4	!
call	97:9	97:35	4	av_bprint_is_complete
arg	97:31	97:35	5	&src
op	97:31	0:0	6	&
water	97:32	0:0	6	src
stmts	97:38	101:4	3	
water	97:38	0:0	4	{
call	98:8	98:88	4	av_log
arg	98:15	98:19	5	NULL
water	98:15	0:0	6	NULL
arg	98:21	98:33	5	AV_LOG_ERROR
water	98:21	0:0	6	AV_LOG_ERROR
arg	98:35	98:88	5	"Could not allocate a buffer for the source string\n"
water	98:35	0:0	6	"Could not allocate a buffer for the source string\n"
water	98:89	0:0	4	;
call	99:8	99:37	4	av_bprint_finalize
arg	99:27	99:31	5	&src
op	99:27	0:0	6	&
water	99:28	0:0	6	src
arg	99:33	99:37	5	NULL
water	99:33	0:0	6	NULL
water	99:38	0:0	4	;
return	100:8	100:16	4	1
water	100:15	0:0	5	1
water	101:4	0:0	4	}
call	102:4	102:37	2	av_bprint_finalize
arg	102:23	102:27	3	&src
op	102:23	0:0	4	&
water	102:24	0:0	4	src
arg	102:29	102:37	3	&src_buf
op	102:29	0:0	4	&
water	102:30	0:0	4	src_buf
water	102:38	0:0	2	;
if	103:4	104:39	2	(echo)
cond	103:8	103:8	3	echo
water	103:8	0:0	4	echo
stmts	104:8	104:39	3	
call	104:8	104:38	4	fprintf
arg	104:16	104:23	5	outfile
water	104:16	0:0	6	outfile
arg	104:25	104:29	5	"%s"
water	104:25	0:0	6	"%s"
arg	104:31	104:38	5	src_buf
water	104:31	0:0	6	src_buf
water	104:39	0:0	4	;
water	106:4	0:0	2	dst_buf
op	106:12	0:0	2	=
water	106:14	0:0	2	src_buf
water	106:21	0:0	2	;
while	107:4	114:4	2	(level --)
cond	107:11	107:16	3	level --
water	107:11	0:0	4	level
op	107:16	0:0	4	--
stmts	107:20	114:4	3	
water	107:20	0:0	4	{
if	108:8	111:8	4	(av_escape (& dst_buf ,src_buf ,special_chars ,escape_mode ,escape_flags ) < 0)
cond	108:12	108:85	5	av_escape (& dst_buf ,src_buf ,special_chars ,escape_mode ,escape_flags ) < 0
call	108:12	108:81	6	av_escape
arg	108:22	108:30	7	&dst_buf
op	108:22	0:0	8	&
water	108:23	0:0	8	dst_buf
arg	108:32	108:39	7	src_buf
water	108:32	0:0	8	src_buf
arg	108:41	108:54	7	special_chars
water	108:41	0:0	8	special_chars
arg	108:56	108:67	7	escape_mode
water	108:56	0:0	8	escape_mode
arg	108:69	108:81	7	escape_flags
water	108:69	0:0	8	escape_flags
op	108:83	0:0	6	<
water	108:85	0:0	6	0
stmts	108:88	111:8	5	
water	108:88	0:0	6	{
call	109:12	109:66	6	av_log
arg	109:19	109:23	7	NULL
water	109:19	0:0	8	NULL
arg	109:25	109:37	7	AV_LOG_ERROR
water	109:25	0:0	8	AV_LOG_ERROR
arg	109:39	109:66	7	"Could not escape string\n"
water	109:39	0:0	8	"Could not escape string\n"
water	109:67	0:0	6	;
return	110:12	110:20	6	1
water	110:19	0:0	7	1
water	111:8	0:0	6	}
call	112:8	112:23	4	av_free
arg	112:16	112:23	5	src_buf
water	112:16	0:0	6	src_buf
water	112:24	0:0	4	;
water	113:8	0:0	4	src_buf
op	113:16	0:0	4	=
water	113:18	0:0	4	dst_buf
water	113:25	0:0	4	;
water	114:4	0:0	4	}
call	115:4	115:44	2	fprintf
arg	115:12	115:19	3	outfile
water	115:12	0:0	4	outfile
arg	115:21	115:27	3	"%s%s"
water	115:21	0:0	4	"%s%s"
arg	115:29	115:35	3	prompt
water	115:29	0:0	4	prompt
arg	115:37	115:44	3	dst_buf
water	115:37	0:0	4	dst_buf
water	115:45	0:0	2	;
call	116:4	116:19	2	av_free
arg	116:12	116:19	3	dst_buf
water	116:12	0:0	4	dst_buf
water	116:20	0:0	2	;
return	117:4	117:12	2	0
water	117:11	0:0	3	0
