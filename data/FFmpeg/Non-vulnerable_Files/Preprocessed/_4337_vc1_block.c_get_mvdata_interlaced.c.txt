func	1:24	47:0	0	void	get_mvdata_interlaced
params	1:50	0:0	1	
param	1:51	1:64	2	VC1Context *	v
param	1:66	1:76	2	int *	dmv_x
param	2:51	2:61	2	int *	dmv_y
param	2:63	2:77	2	int *	pred_flag
stmnts	0:0	46:4	1	
decl	4:4	4:21	2	int	index
water	4:13	0:0	2	,
decl	4:4	4:21	2	int	index1
decl	5:4	5:26	2	int	extend_x
water	5:16	0:0	2	,
decl	5:4	5:26	2	int	extend_y
decl	6:4	6:32	2	GetBitContext	*gb
op	6:22	0:0	2	=
op	6:24	0:0	2	&
water	6:25	0:0	2	v
op	6:26	0:0	2	->
water	6:28	0:0	2	s
op	6:29	0:0	2	.
water	6:30	0:0	2	gb
decl	7:4	7:17	2	int	bits
water	7:12	0:0	2	,
decl	7:4	7:17	2	int	esc
decl	8:4	8:17	2	int	val
water	8:11	0:0	2	,
decl	8:4	8:17	2	int	sign
if	9:4	12:4	2	(v -> numref)
cond	9:8	9:11	3	v -> numref
water	9:8	0:0	4	v
op	9:9	0:0	4	->
water	9:11	0:0	4	numref
stmts	9:19	12:4	3	
water	9:19	0:0	4	{
water	10:8	0:0	4	bits
op	10:13	0:0	4	=
water	10:15	0:0	4	VC1_2REF_MVDATA_VLC_BITS
water	10:39	0:0	4	;
water	11:8	0:0	4	esc
op	11:13	0:0	4	=
water	11:15	0:0	4	125
water	11:18	0:0	4	;
water	12:4	0:0	4	}
else	12:6	15:4	2
stmts	12:11	15:4	3	
water	12:11	0:0	4	{
water	13:8	0:0	4	bits
op	13:13	0:0	4	=
water	13:15	0:0	4	VC1_1REF_MVDATA_VLC_BITS
water	13:39	0:0	4	;
water	14:8	0:0	4	esc
op	14:13	0:0	4	=
water	14:15	0:0	4	71
water	14:17	0:0	4	;
water	15:4	0:0	4	}
water	16:4	0:0	2	extend_x
op	16:13	0:0	2	=
water	16:15	0:0	2	v
op	16:16	0:0	2	->
water	16:18	0:0	2	dmvrange
op	16:27	0:0	2	&
water	16:29	0:0	2	1
water	16:30	0:0	2	;
water	17:4	0:0	2	extend_y
op	17:13	0:0	2	=
water	17:15	0:0	2	(
water	17:16	0:0	2	v
op	17:17	0:0	2	->
water	17:19	0:0	2	dmvrange
op	17:28	0:0	2	>>
water	17:31	0:0	2	1
water	17:32	0:0	2	)
op	17:34	0:0	2	&
water	17:36	0:0	2	1
water	17:37	0:0	2	;
water	18:4	0:0	2	index
op	18:10	0:0	2	=
call	18:12	18:51	2	get_vlc2
arg	18:21	18:23	3	gb
water	18:21	0:0	4	gb
arg	18:25	18:42	3	v->imv_vlc->table
water	18:25	0:0	4	v
op	18:26	0:0	4	->
water	18:28	0:0	4	imv_vlc
op	18:35	0:0	4	->
water	18:37	0:0	4	table
arg	18:44	18:48	3	bits
water	18:44	0:0	4	bits
arg	18:50	18:51	3	3
water	18:50	0:0	4	3
water	18:52	0:0	2	;
if	19:4	27:4	2	(index == esc)
cond	19:8	19:17	3	index == esc
water	19:8	0:0	4	index
op	19:14	0:0	4	==
water	19:17	0:0	4	esc
stmts	19:22	27:4	3	
water	19:22	0:0	4	{
op	20:8	0:0	4	*
water	20:9	0:0	4	dmv_x
op	20:15	0:0	4	=
call	20:17	20:36	4	get_bits
arg	20:26	20:28	5	gb
water	20:26	0:0	6	gb
arg	20:30	20:36	5	v->k_x
water	20:30	0:0	6	v
op	20:31	0:0	6	->
water	20:33	0:0	6	k_x
water	20:37	0:0	4	;
op	21:8	0:0	4	*
water	21:9	0:0	4	dmv_y
op	21:15	0:0	4	=
call	21:17	21:36	4	get_bits
arg	21:26	21:28	5	gb
water	21:26	0:0	6	gb
arg	21:30	21:36	5	v->k_y
water	21:30	0:0	6	v
op	21:31	0:0	6	->
water	21:33	0:0	6	k_y
water	21:37	0:0	4	;
if	22:8	26:8	4	(v -> numref)
cond	22:12	22:15	5	v -> numref
water	22:12	0:0	6	v
op	22:13	0:0	6	->
water	22:15	0:0	6	numref
stmts	22:23	26:8	5	
water	22:23	0:0	6	{
if	23:12	24:39	6	(pred_flag)
cond	23:16	23:16	7	pred_flag
water	23:16	0:0	8	pred_flag
stmts	24:16	24:39	7	
op	24:16	0:0	8	*
water	24:17	0:0	8	pred_flag
op	24:27	0:0	8	=
op	24:29	0:0	8	*
water	24:30	0:0	8	dmv_y
op	24:36	0:0	8	&
water	24:38	0:0	8	1
water	24:39	0:0	8	;
op	25:12	0:0	6	*
water	25:13	0:0	6	dmv_y
op	25:19	0:0	6	=
water	25:21	0:0	6	(
op	25:22	0:0	6	*
water	25:23	0:0	6	dmv_y
op	25:29	0:0	6	+
water	25:31	0:0	6	(
op	25:32	0:0	6	*
water	25:33	0:0	6	dmv_y
op	25:39	0:0	6	&
water	25:41	0:0	6	1
water	25:42	0:0	6	)
water	25:43	0:0	6	)
op	25:45	0:0	6	>>
water	25:48	0:0	6	1
water	25:49	0:0	6	;
water	26:8	0:0	6	}
water	27:4	0:0	4	}
else	28:4	46:4	2
stmts	28:9	46:4	3	
water	28:9	0:0	4	{
call	29:8	29:30	4	av_assert0
arg	29:19	29:30	5	index<esc
water	29:19	0:0	6	index
op	29:25	0:0	6	<
water	29:27	0:0	6	esc
water	29:31	0:0	4	;
water	30:8	0:0	4	index1
op	30:15	0:0	4	=
water	30:17	0:0	4	(
water	30:18	0:0	4	index
op	30:24	0:0	4	+
water	30:26	0:0	4	1
water	30:27	0:0	4	)
op	30:29	0:0	4	%
water	30:31	0:0	4	9
water	30:32	0:0	4	;
if	31:8	35:8	4	(index1 != 0)
cond	31:12	31:22	5	index1 != 0
water	31:12	0:0	6	index1
op	31:19	0:0	6	!=
water	31:22	0:0	6	0
stmts	31:25	35:8	5	
water	31:25	0:0	6	{
water	32:12	0:0	6	val
op	32:19	0:0	6	=
call	32:21	32:51	6	get_bits
arg	32:30	32:32	7	gb
water	32:30	0:0	8	gb
arg	32:34	32:51	7	index1+extend_x
water	32:34	0:0	8	index1
op	32:41	0:0	8	+
water	32:43	0:0	8	extend_x
water	32:52	0:0	6	;
water	33:12	0:0	6	sign
op	33:19	0:0	6	=
water	33:21	0:0	6	0
op	33:23	0:0	6	-
water	33:25	0:0	6	(
water	33:26	0:0	6	val
op	33:30	0:0	6	&
water	33:32	0:0	6	1
water	33:33	0:0	6	)
water	33:34	0:0	6	;
op	34:12	0:0	6	*
water	34:13	0:0	6	dmv_x
op	34:19	0:0	6	=
water	34:21	0:0	6	(
water	34:22	0:0	6	sign
op	34:27	0:0	6	^
water	34:29	0:0	6	(
water	34:30	0:0	6	(
water	34:31	0:0	6	val
op	34:35	0:0	6	>>
water	34:38	0:0	6	1
water	34:39	0:0	6	)
op	34:41	0:0	6	+
water	34:43	0:0	6	offset_table
op	34:55	0:0	6	[
water	34:56	0:0	6	extend_x
op	34:64	0:0	6	]
op	34:65	0:0	6	[
water	34:66	0:0	6	index1
op	34:72	0:0	6	]
water	34:73	0:0	6	)
water	34:74	0:0	6	)
op	34:76	0:0	6	-
water	34:78	0:0	6	sign
water	34:82	0:0	6	;
water	35:8	0:0	6	}
else	35:10	36:22	4
stmts	36:12	36:22	5	
op	36:12	0:0	6	*
water	36:13	0:0	6	dmv_x
op	36:19	0:0	6	=
water	36:21	0:0	6	0
water	36:22	0:0	6	;
water	37:8	0:0	4	index1
op	37:15	0:0	4	=
water	37:17	0:0	4	(
water	37:18	0:0	4	index
op	37:24	0:0	4	+
water	37:26	0:0	4	1
water	37:27	0:0	4	)
op	37:29	0:0	4	/
water	37:31	0:0	4	9
water	37:32	0:0	4	;
if	38:8	42:8	4	(index1 > v -> numref)
cond	38:12	38:24	5	index1 > v -> numref
water	38:12	0:0	6	index1
op	38:19	0:0	6	>
water	38:21	0:0	6	v
op	38:22	0:0	6	->
water	38:24	0:0	6	numref
stmts	38:32	42:8	5	
water	38:32	0:0	6	{
water	39:12	0:0	6	val
op	39:19	0:0	6	=
call	39:21	39:66	6	get_bits
arg	39:30	39:32	7	gb
water	39:30	0:0	8	gb
arg	39:34	39:66	7	(index1>>v->numref)+extend_y
water	39:34	0:0	8	(
water	39:35	0:0	8	index1
op	39:42	0:0	8	>>
water	39:45	0:0	8	v
op	39:46	0:0	8	->
water	39:48	0:0	8	numref
water	39:54	0:0	8	)
op	39:56	0:0	8	+
water	39:58	0:0	8	extend_y
water	39:67	0:0	6	;
water	40:12	0:0	6	sign
op	40:19	0:0	6	=
water	40:21	0:0	6	0
op	40:23	0:0	6	-
water	40:25	0:0	6	(
water	40:26	0:0	6	val
op	40:30	0:0	6	&
water	40:32	0:0	6	1
water	40:33	0:0	6	)
water	40:34	0:0	6	;
op	41:12	0:0	6	*
water	41:13	0:0	6	dmv_y
op	41:19	0:0	6	=
water	41:21	0:0	6	(
water	41:22	0:0	6	sign
op	41:27	0:0	6	^
water	41:29	0:0	6	(
water	41:30	0:0	6	(
water	41:31	0:0	6	val
op	41:35	0:0	6	>>
water	41:38	0:0	6	1
water	41:39	0:0	6	)
op	41:41	0:0	6	+
water	41:43	0:0	6	offset_table
op	41:55	0:0	6	[
water	41:56	0:0	6	extend_y
op	41:64	0:0	6	]
op	41:65	0:0	6	[
water	41:66	0:0	6	index1
op	41:73	0:0	6	>>
water	41:76	0:0	6	v
op	41:77	0:0	6	->
water	41:79	0:0	6	numref
op	41:85	0:0	6	]
water	41:86	0:0	6	)
water	41:87	0:0	6	)
op	41:89	0:0	6	-
water	41:91	0:0	6	sign
water	41:95	0:0	6	;
water	42:8	0:0	6	}
else	42:10	43:22	4
stmts	43:12	43:22	5	
op	43:12	0:0	6	*
water	43:13	0:0	6	dmv_y
op	43:19	0:0	6	=
water	43:21	0:0	6	0
water	43:22	0:0	6	;
if	44:8	45:35	4	(v -> numref && pred_flag)
cond	44:12	44:25	5	v -> numref && pred_flag
water	44:12	0:0	6	v
op	44:13	0:0	6	->
water	44:15	0:0	6	numref
op	44:22	0:0	6	&&
water	44:25	0:0	6	pred_flag
stmts	45:12	45:35	5	
op	45:12	0:0	6	*
water	45:13	0:0	6	pred_flag
op	45:23	0:0	6	=
water	45:25	0:0	6	index1
op	45:32	0:0	6	&
water	45:34	0:0	6	1
water	45:35	0:0	6	;
water	46:4	0:0	4	}
