func	1:0	67:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:60	2	AVFrame *	frame
stmnts	0:0	66:58	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:36	2	FadeContext	*s
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	priv
decl	5:4	5:103	2	double	frame_timestamp
op	5:27	0:0	2	=
water	5:29	0:0	2	frame
op	5:34	0:0	2	->
water	5:36	0:0	2	pts
op	5:40	0:0	2	==
water	5:43	0:0	2	AV_NOPTS_VALUE
water	5:58	0:0	2	?
op	5:60	0:0	2	-
water	5:61	0:0	2	1
water	5:63	0:0	2	:
water	5:65	0:0	2	frame
op	5:70	0:0	2	->
water	5:72	0:0	2	pts
call	5:76	5:102	3	*av_q2d
arg	5:85	5:102	4	inlink->time_base
water	5:85	0:0	5	inlink
op	5:91	0:0	5	->
water	5:93	0:0	5	time_base
if	7:4	22:4	2	(s -> fade_state == VF_FADE_WAITING)
cond	7:8	7:25	3	s -> fade_state == VF_FADE_WAITING
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	fade_state
op	7:22	0:0	4	==
water	7:25	0:0	4	VF_FADE_WAITING
stmts	7:42	22:4	3	
water	7:42	0:0	4	{
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	factor
op	8:17	0:0	4	=
water	8:18	0:0	4	0
water	8:19	0:0	4	;
if	9:8	21:8	4	(frame_timestamp >= s -> start_time / ( double ) AV_TIME_BASE && inlink -> frame_count >= s -> start_frame)
cond	9:12	10:41	5	frame_timestamp >= s -> start_time / ( double ) AV_TIME_BASE && inlink -> frame_count >= s -> start_frame
water	9:12	0:0	6	frame_timestamp
op	9:28	0:0	6	>=
water	9:31	0:0	6	s
op	9:32	0:0	6	->
water	9:34	0:0	6	start_time
op	9:44	0:0	6	/
water	9:45	0:0	6	(
water	9:46	0:0	6	double
water	9:52	0:0	6	)
water	9:53	0:0	6	AV_TIME_BASE
op	10:12	0:0	6	&&
water	10:15	0:0	6	inlink
op	10:21	0:0	6	->
water	10:23	0:0	6	frame_count
op	10:35	0:0	6	>=
water	10:38	0:0	6	s
op	10:39	0:0	6	->
water	10:41	0:0	6	start_frame
stmts	10:54	21:8	5	
water	10:54	0:0	6	{
water	12:12	0:0	6	s
op	12:13	0:0	6	->
water	12:15	0:0	6	fade_state
op	12:26	0:0	6	=
water	12:28	0:0	6	VF_FADE_FADING
water	12:42	0:0	6	;
if	14:12	16:12	6	(s -> start_time == 0 && s -> start_frame != 0)
cond	14:16	14:56	7	s -> start_time == 0 && s -> start_frame != 0
water	14:16	0:0	8	s
op	14:17	0:0	8	->
water	14:19	0:0	8	start_time
op	14:30	0:0	8	==
water	14:33	0:0	8	0
op	14:35	0:0	8	&&
water	14:38	0:0	8	s
op	14:39	0:0	8	->
water	14:41	0:0	8	start_frame
op	14:53	0:0	8	!=
water	14:56	0:0	8	0
stmts	14:59	16:12	7	
water	14:59	0:0	8	{
water	15:16	0:0	8	s
op	15:17	0:0	8	->
water	15:19	0:0	8	start_time
op	15:30	0:0	8	=
water	15:32	0:0	8	frame_timestamp
op	15:47	0:0	8	*
water	15:48	0:0	8	(
water	15:49	0:0	8	double
water	15:55	0:0	8	)
water	15:56	0:0	8	AV_TIME_BASE
water	15:68	0:0	8	;
water	16:12	0:0	8	}
if	18:12	20:12	6	(s -> start_time != 0 && s -> start_frame == 0)
cond	18:16	18:56	7	s -> start_time != 0 && s -> start_frame == 0
water	18:16	0:0	8	s
op	18:17	0:0	8	->
water	18:19	0:0	8	start_time
op	18:30	0:0	8	!=
water	18:33	0:0	8	0
op	18:35	0:0	8	&&
water	18:38	0:0	8	s
op	18:39	0:0	8	->
water	18:41	0:0	8	start_frame
op	18:53	0:0	8	==
water	18:56	0:0	8	0
stmts	18:59	20:12	7	
water	18:59	0:0	8	{
water	19:16	0:0	8	s
op	19:17	0:0	8	->
water	19:19	0:0	8	start_frame
op	19:31	0:0	8	=
water	19:33	0:0	8	inlink
op	19:39	0:0	8	->
water	19:41	0:0	8	frame_count
water	19:52	0:0	8	;
water	20:12	0:0	8	}
water	21:8	0:0	6	}
water	22:4	0:0	4	}
if	23:4	39:4	2	(s -> fade_state == VF_FADE_FADING)
cond	23:8	23:25	3	s -> fade_state == VF_FADE_FADING
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	fade_state
op	23:22	0:0	4	==
water	23:25	0:0	4	VF_FADE_FADING
stmts	23:41	39:4	3	
water	23:41	0:0	4	{
if	24:8	30:8	4	(s -> duration == 0)
cond	24:12	24:27	5	s -> duration == 0
water	24:12	0:0	6	s
op	24:13	0:0	6	->
water	24:15	0:0	6	duration
op	24:24	0:0	6	==
water	24:27	0:0	6	0
stmts	24:30	30:8	5	
water	24:30	0:0	6	{
water	26:12	0:0	6	s
op	26:13	0:0	6	->
water	26:15	0:0	6	factor
op	26:22	0:0	6	=
water	26:24	0:0	6	(
water	26:25	0:0	6	inlink
op	26:31	0:0	6	->
water	26:33	0:0	6	frame_count
op	26:45	0:0	6	-
water	26:47	0:0	6	s
op	26:48	0:0	6	->
water	26:50	0:0	6	start_frame
water	26:61	0:0	6	)
op	26:63	0:0	6	*
water	26:65	0:0	6	s
op	26:66	0:0	6	->
water	26:68	0:0	6	fade_per_frame
water	26:82	0:0	6	;
if	27:12	29:12	6	(inlink -> frame_count > s -> start_frame + s -> nb_frames)
cond	27:16	27:58	7	inlink -> frame_count > s -> start_frame + s -> nb_frames
water	27:16	0:0	8	inlink
op	27:22	0:0	8	->
water	27:24	0:0	8	frame_count
op	27:36	0:0	8	>
water	27:38	0:0	8	s
op	27:39	0:0	8	->
water	27:41	0:0	8	start_frame
op	27:53	0:0	8	+
water	27:55	0:0	8	s
op	27:56	0:0	8	->
water	27:58	0:0	8	nb_frames
stmts	27:69	29:12	7	
water	27:69	0:0	8	{
water	28:16	0:0	8	s
op	28:17	0:0	8	->
water	28:19	0:0	8	fade_state
op	28:30	0:0	8	=
water	28:32	0:0	8	VF_FADE_DONE
water	28:44	0:0	8	;
water	29:12	0:0	8	}
water	30:8	0:0	6	}
else	30:10	38:8	4
stmts	30:15	38:8	5	
water	30:15	0:0	6	{
water	32:12	0:0	6	s
op	32:13	0:0	6	->
water	32:15	0:0	6	factor
op	32:22	0:0	6	=
water	32:24	0:0	6	(
water	32:25	0:0	6	frame_timestamp
op	32:41	0:0	6	-
water	32:43	0:0	6	s
op	32:44	0:0	6	->
water	32:46	0:0	6	start_time
op	32:56	0:0	6	/
water	32:57	0:0	6	(
water	32:58	0:0	6	double
water	32:64	0:0	6	)
water	32:65	0:0	6	AV_TIME_BASE
water	32:77	0:0	6	)
op	33:28	0:0	6	*
water	33:30	0:0	6	(
water	33:31	0:0	6	float
water	33:36	0:0	6	)
water	33:38	0:0	6	UINT16_MAX
op	33:49	0:0	6	/
water	33:51	0:0	6	(
water	33:52	0:0	6	s
op	33:53	0:0	6	->
water	33:55	0:0	6	duration
op	33:63	0:0	6	/
water	33:64	0:0	6	(
water	33:65	0:0	6	double
water	33:71	0:0	6	)
water	33:72	0:0	6	AV_TIME_BASE
water	33:84	0:0	6	)
water	33:85	0:0	6	;
if	34:12	37:12	6	(frame_timestamp > s -> start_time / ( double ) AV_TIME_BASE + s -> duration / ( double ) AV_TIME_BASE)
cond	34:16	35:56	7	frame_timestamp > s -> start_time / ( double ) AV_TIME_BASE + s -> duration / ( double ) AV_TIME_BASE
water	34:16	0:0	8	frame_timestamp
op	34:32	0:0	8	>
water	34:34	0:0	8	s
op	34:35	0:0	8	->
water	34:37	0:0	8	start_time
op	34:47	0:0	8	/
water	34:48	0:0	8	(
water	34:49	0:0	8	double
water	34:55	0:0	8	)
water	34:56	0:0	8	AV_TIME_BASE
op	35:34	0:0	8	+
water	35:36	0:0	8	s
op	35:37	0:0	8	->
water	35:39	0:0	8	duration
op	35:47	0:0	8	/
water	35:48	0:0	8	(
water	35:49	0:0	8	double
water	35:55	0:0	8	)
water	35:56	0:0	8	AV_TIME_BASE
stmts	35:70	37:12	7	
water	35:70	0:0	8	{
water	36:16	0:0	8	s
op	36:17	0:0	8	->
water	36:19	0:0	8	fade_state
op	36:30	0:0	8	=
water	36:32	0:0	8	VF_FADE_DONE
water	36:44	0:0	8	;
water	37:12	0:0	8	}
water	38:8	0:0	6	}
water	39:4	0:0	4	}
if	40:4	42:4	2	(s -> fade_state == VF_FADE_DONE)
cond	40:8	40:25	3	s -> fade_state == VF_FADE_DONE
water	40:8	0:0	4	s
op	40:9	0:0	4	->
water	40:11	0:0	4	fade_state
op	40:22	0:0	4	==
water	40:25	0:0	4	VF_FADE_DONE
stmts	40:39	42:4	3	
water	40:39	0:0	4	{
water	41:8	0:0	4	s
op	41:9	0:0	4	->
water	41:11	0:0	4	factor
op	41:17	0:0	4	=
water	41:18	0:0	4	UINT16_MAX
water	41:28	0:0	4	;
water	42:4	0:0	4	}
water	43:4	0:0	2	s
op	43:5	0:0	2	->
water	43:7	0:0	2	factor
op	43:14	0:0	2	=
call	43:16	43:40	2	av_clip_uint16
arg	43:31	43:40	3	s->factor
water	43:31	0:0	4	s
op	43:32	0:0	4	->
water	43:34	0:0	4	factor
water	43:41	0:0	2	;
if	45:4	47:4	2	(s -> type == FADE_OUT)
cond	45:8	45:19	3	s -> type == FADE_OUT
water	45:8	0:0	4	s
op	45:9	0:0	4	->
water	45:11	0:0	4	type
op	45:16	0:0	4	==
water	45:19	0:0	4	FADE_OUT
stmts	45:29	47:4	3	
water	45:29	0:0	4	{
water	46:8	0:0	4	s
op	46:9	0:0	4	->
water	46:11	0:0	4	factor
op	46:17	0:0	4	=
water	46:18	0:0	4	UINT16_MAX
op	46:28	0:0	4	-
water	46:29	0:0	4	s
op	46:30	0:0	4	->
water	46:32	0:0	4	factor
water	46:38	0:0	4	;
water	47:4	0:0	4	}
if	48:4	65:4	2	(s -> factor < UINT16_MAX)
cond	48:8	48:20	3	s -> factor < UINT16_MAX
water	48:8	0:0	4	s
op	48:9	0:0	4	->
water	48:11	0:0	4	factor
op	48:18	0:0	4	<
water	48:20	0:0	4	UINT16_MAX
stmts	48:32	65:4	3	
water	48:32	0:0	4	{
if	49:8	52:8	4	(s -> alpha)
cond	49:12	49:15	5	s -> alpha
water	49:12	0:0	6	s
op	49:13	0:0	6	->
water	49:15	0:0	6	alpha
stmts	49:22	52:8	5	
water	49:22	0:0	6	{
call	50:12	51:76	6	ctx->internal->execute
arg	50:35	50:38	7	ctx
water	50:35	0:0	8	ctx
arg	50:40	50:58	7	filter_slice_alpha
water	50:40	0:0	8	filter_slice_alpha
arg	50:60	50:65	7	frame
water	50:60	0:0	8	frame
arg	50:67	50:71	7	NULL
water	50:67	0:0	8	NULL
arg	51:32	51:76	7	FFMIN(frame->height,ctx->graph->nb_threads)
call	51:32	51:75	8	FFMIN
arg	51:38	51:51	9	frame->height
water	51:38	0:0	10	frame
op	51:43	0:0	10	->
water	51:45	0:0	10	height
arg	51:53	51:75	9	ctx->graph->nb_threads
water	51:53	0:0	10	ctx
op	51:56	0:0	10	->
water	51:58	0:0	10	graph
op	51:63	0:0	10	->
water	51:65	0:0	10	nb_threads
water	51:77	0:0	6	;
water	52:8	0:0	6	}
else	52:10	55:8	4
stmts	52:15	55:8	5	
if	52:15	55:8	6	(s -> is_packed_rgb && ! s -> black_fade)
cond	52:19	52:43	7	s -> is_packed_rgb && ! s -> black_fade
water	52:19	0:0	8	s
op	52:20	0:0	8	->
water	52:22	0:0	8	is_packed_rgb
op	52:36	0:0	8	&&
op	52:39	0:0	8	!
water	52:40	0:0	8	s
op	52:41	0:0	8	->
water	52:43	0:0	8	black_fade
stmts	52:55	55:8	7	
water	52:55	0:0	8	{
call	53:12	54:79	8	ctx->internal->execute
arg	53:35	53:38	9	ctx
water	53:35	0:0	10	ctx
arg	53:40	53:56	9	filter_slice_rgb
water	53:40	0:0	10	filter_slice_rgb
arg	53:58	53:63	9	frame
water	53:58	0:0	10	frame
arg	53:65	53:69	9	NULL
water	53:65	0:0	10	NULL
arg	54:35	54:79	9	FFMIN(frame->height,ctx->graph->nb_threads)
call	54:35	54:78	10	FFMIN
arg	54:41	54:54	11	frame->height
water	54:41	0:0	12	frame
op	54:46	0:0	12	->
water	54:48	0:0	12	height
arg	54:56	54:78	11	ctx->graph->nb_threads
water	54:56	0:0	12	ctx
op	54:59	0:0	12	->
water	54:61	0:0	12	graph
op	54:66	0:0	12	->
water	54:68	0:0	12	nb_threads
water	54:80	0:0	8	;
water	55:8	0:0	8	}
else	55:10	64:8	4
stmts	55:15	64:8	5	
water	55:15	0:0	6	{
call	57:12	58:76	6	ctx->internal->execute
arg	57:35	57:38	7	ctx
water	57:35	0:0	8	ctx
arg	57:40	57:57	7	filter_slice_luma
water	57:40	0:0	8	filter_slice_luma
arg	57:59	57:64	7	frame
water	57:59	0:0	8	frame
arg	57:66	57:70	7	NULL
water	57:66	0:0	8	NULL
arg	58:32	58:76	7	FFMIN(frame->height,ctx->graph->nb_threads)
call	58:32	58:75	8	FFMIN
arg	58:38	58:51	9	frame->height
water	58:38	0:0	10	frame
op	58:43	0:0	10	->
water	58:45	0:0	10	height
arg	58:53	58:75	9	ctx->graph->nb_threads
water	58:53	0:0	10	ctx
op	58:56	0:0	10	->
water	58:58	0:0	10	graph
op	58:63	0:0	10	->
water	58:65	0:0	10	nb_threads
water	58:77	0:0	6	;
if	59:12	63:12	6	(frame -> data [ 1 ] && frame -> data [ 2 ])
cond	59:16	59:47	7	frame -> data [ 1 ] && frame -> data [ 2 ]
water	59:16	0:0	8	frame
op	59:21	0:0	8	->
water	59:23	0:0	8	data
op	59:27	0:0	8	[
water	59:28	0:0	8	1
op	59:29	0:0	8	]
op	59:31	0:0	8	&&
water	59:34	0:0	8	frame
op	59:39	0:0	8	->
water	59:41	0:0	8	data
op	59:45	0:0	8	[
water	59:46	0:0	8	2
op	59:47	0:0	8	]
stmts	59:50	63:12	7	
water	59:50	0:0	8	{
call	61:16	62:80	8	ctx->internal->execute
arg	61:39	61:42	9	ctx
water	61:39	0:0	10	ctx
arg	61:44	61:63	9	filter_slice_chroma
water	61:44	0:0	10	filter_slice_chroma
arg	61:65	61:70	9	frame
water	61:65	0:0	10	frame
arg	61:72	61:76	9	NULL
water	61:72	0:0	10	NULL
arg	62:36	62:80	9	FFMIN(frame->height,ctx->graph->nb_threads)
call	62:36	62:79	10	FFMIN
arg	62:42	62:55	11	frame->height
water	62:42	0:0	12	frame
op	62:47	0:0	12	->
water	62:49	0:0	12	height
arg	62:57	62:79	11	ctx->graph->nb_threads
water	62:57	0:0	12	ctx
op	62:60	0:0	12	->
water	62:62	0:0	12	graph
op	62:67	0:0	12	->
water	62:69	0:0	12	nb_threads
water	62:81	0:0	8	;
water	63:12	0:0	8	}
water	64:8	0:0	6	}
water	65:4	0:0	4	}
return	66:4	66:58	2	ff_filter_frame(inlink->dst->outputs[0],frame)
call	66:11	66:57	3	ff_filter_frame
arg	66:27	66:50	4	inlink->dst->outputs[0]
water	66:27	0:0	5	inlink
op	66:33	0:0	5	->
water	66:35	0:0	5	dst
op	66:38	0:0	5	->
water	66:40	0:0	5	outputs
op	66:47	0:0	5	[
water	66:48	0:0	5	0
op	66:49	0:0	5	]
arg	66:52	66:57	4	frame
water	66:52	0:0	5	frame
