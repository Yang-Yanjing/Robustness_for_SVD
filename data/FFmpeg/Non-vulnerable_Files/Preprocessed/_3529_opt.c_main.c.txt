func	1:0	180:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	0:0	179:12	1	
decl	3:4	3:9	2	int	i
call	4:4	4:33	2	av_log_set_level
arg	4:21	4:33	3	AV_LOG_DEBUG
water	4:21	0:0	4	AV_LOG_DEBUG
water	4:34	0:0	2	;
call	5:4	5:41	2	av_log_set_callback
arg	5:24	5:41	3	log_callback_help
water	5:24	0:0	4	log_callback_help
water	5:42	0:0	2	;
call	6:4	6:37	2	printf
arg	6:11	6:37	3	"Testing default values\n"
water	6:11	0:0	4	"Testing default values\n"
water	6:38	0:0	2	;
water	7:4	0:0	2	{
decl	8:8	8:36	2	TestContext	test_ctx
op	8:29	0:0	2	=
water	8:31	0:0	2	{
water	8:33	0:0	2	0
water	8:35	0:0	2	}
water	9:8	0:0	2	test_ctx
op	9:16	0:0	2	.
water	9:17	0:0	2	class
op	9:23	0:0	2	=
op	9:25	0:0	2	&
water	9:26	0:0	2	test_class
water	9:36	0:0	2	;
call	10:8	10:37	2	av_opt_set_defaults
arg	10:28	10:37	3	&test_ctx
op	10:28	0:0	4	&
water	10:29	0:0	4	test_ctx
water	10:38	0:0	2	;
call	11:8	11:39	2	printf
arg	11:15	11:25	3	"num=%d\n"
water	11:15	0:0	4	"num=%d\n"
arg	11:27	11:39	3	test_ctx.num
water	11:27	0:0	4	test_ctx
op	11:35	0:0	4	.
water	11:36	0:0	4	num
water	11:40	0:0	2	;
call	12:8	12:45	2	printf
arg	12:15	12:28	3	"toggle=%d\n"
water	12:15	0:0	4	"toggle=%d\n"
arg	12:30	12:45	3	test_ctx.toggle
water	12:30	0:0	4	test_ctx
op	12:38	0:0	4	.
water	12:39	0:0	4	toggle
water	12:46	0:0	2	;
call	13:8	13:45	2	printf
arg	13:15	13:28	3	"string=%s\n"
water	13:15	0:0	4	"string=%s\n"
arg	13:30	13:45	3	test_ctx.string
water	13:30	0:0	4	test_ctx
op	13:38	0:0	4	.
water	13:39	0:0	4	string
water	13:46	0:0	2	;
call	14:8	14:45	2	printf
arg	14:15	14:28	3	"escape=%s\n"
water	14:15	0:0	4	"escape=%s\n"
arg	14:30	14:45	3	test_ctx.escape
water	14:30	0:0	4	test_ctx
op	14:38	0:0	4	.
water	14:39	0:0	4	escape
water	14:46	0:0	2	;
call	15:8	15:43	2	printf
arg	15:15	15:27	3	"flags=%d\n"
water	15:15	0:0	4	"flags=%d\n"
arg	15:29	15:43	3	test_ctx.flags
water	15:29	0:0	4	test_ctx
op	15:37	0:0	4	.
water	15:38	0:0	4	flags
water	15:44	0:0	2	;
call	16:8	16:79	2	printf
arg	16:15	16:33	3	"rational=%d/%d\n"
water	16:15	0:0	4	"rational=%d/%d\n"
arg	16:35	16:56	3	test_ctx.rational.num
water	16:35	0:0	4	test_ctx
op	16:43	0:0	4	.
water	16:44	0:0	4	rational
op	16:52	0:0	4	.
water	16:53	0:0	4	num
arg	16:58	16:79	3	test_ctx.rational.den
water	16:58	0:0	4	test_ctx
op	16:66	0:0	4	.
water	16:67	0:0	4	rational
op	16:75	0:0	4	.
water	16:76	0:0	4	den
water	16:80	0:0	2	;
call	17:8	17:85	2	printf
arg	17:15	17:35	3	"video_rate=%d/%d\n"
water	17:15	0:0	4	"video_rate=%d/%d\n"
arg	17:37	17:60	3	test_ctx.video_rate.num
water	17:37	0:0	4	test_ctx
op	17:45	0:0	4	.
water	17:46	0:0	4	video_rate
op	17:56	0:0	4	.
water	17:57	0:0	4	num
arg	17:62	17:85	3	test_ctx.video_rate.den
water	17:62	0:0	4	test_ctx
op	17:70	0:0	4	.
water	17:71	0:0	4	video_rate
op	17:81	0:0	4	.
water	17:82	0:0	4	den
water	17:86	0:0	2	;
call	18:8	18:61	2	printf
arg	18:15	18:37	3	"width=%d height=%d\n"
water	18:15	0:0	4	"width=%d height=%d\n"
arg	18:39	18:49	3	test_ctx.w
water	18:39	0:0	4	test_ctx
op	18:47	0:0	4	.
water	18:48	0:0	4	w
arg	18:51	18:61	3	test_ctx.h
water	18:51	0:0	4	test_ctx
op	18:59	0:0	4	.
water	18:60	0:0	4	h
water	18:62	0:0	2	;
call	19:8	19:68	2	printf
arg	19:15	19:29	3	"pix_fmt=%s\n"
water	19:15	0:0	4	"pix_fmt=%s\n"
arg	19:31	19:68	3	av_get_pix_fmt_name(test_ctx.pix_fmt)
call	19:31	19:67	4	av_get_pix_fmt_name
arg	19:51	19:67	5	test_ctx.pix_fmt
water	19:51	0:0	6	test_ctx
op	19:59	0:0	6	.
water	19:60	0:0	6	pix_fmt
water	19:69	0:0	2	;
call	20:8	20:77	2	printf
arg	20:15	20:32	3	"sample_fmt=%s\n"
water	20:15	0:0	4	"sample_fmt=%s\n"
arg	20:34	20:77	3	av_get_sample_fmt_name(test_ctx.sample_fmt)
call	20:34	20:76	4	av_get_sample_fmt_name
arg	20:57	20:76	5	test_ctx.sample_fmt
water	20:57	0:0	6	test_ctx
op	20:65	0:0	6	.
water	20:66	0:0	6	sample_fmt
water	20:78	0:0	2	;
call	21:8	21:56	2	printf
arg	21:15	21:37	3	"duration=%"PRId64"\n"
water	21:15	0:0	4	"duration=%"
water	21:27	0:0	4	PRId64
water	21:33	0:0	4	"\n"
arg	21:39	21:56	3	test_ctx.duration
water	21:39	0:0	4	test_ctx
op	21:47	0:0	4	.
water	21:48	0:0	4	duration
water	21:57	0:0	2	;
call	22:8	22:112	2	printf
arg	22:15	22:36	3	"color=%d %d %d %d\n"
water	22:15	0:0	4	"color=%d %d %d %d\n"
arg	22:38	22:55	3	test_ctx.color[0]
water	22:38	0:0	4	test_ctx
op	22:46	0:0	4	.
water	22:47	0:0	4	color
op	22:52	0:0	4	[
water	22:53	0:0	4	0
op	22:54	0:0	4	]
arg	22:57	22:74	3	test_ctx.color[1]
water	22:57	0:0	4	test_ctx
op	22:65	0:0	4	.
water	22:66	0:0	4	color
op	22:71	0:0	4	[
water	22:72	0:0	4	1
op	22:73	0:0	4	]
arg	22:76	22:93	3	test_ctx.color[2]
water	22:76	0:0	4	test_ctx
op	22:84	0:0	4	.
water	22:85	0:0	4	color
op	22:90	0:0	4	[
water	22:91	0:0	4	2
op	22:92	0:0	4	]
arg	22:95	22:112	3	test_ctx.color[3]
water	22:95	0:0	4	test_ctx
op	22:103	0:0	4	.
water	22:104	0:0	4	color
op	22:109	0:0	4	[
water	22:110	0:0	4	3
op	22:111	0:0	4	]
water	22:113	0:0	2	;
call	23:8	23:111	2	printf
arg	23:15	23:53	3	"channel_layout=%"PRId64"=%"PRId64"\n"
water	23:15	0:0	4	"channel_layout=%"
water	23:33	0:0	4	PRId64
water	23:39	0:0	4	"=%"
water	23:43	0:0	4	PRId64
water	23:49	0:0	4	"\n"
arg	23:55	23:78	3	test_ctx.channel_layout
water	23:55	0:0	4	test_ctx
op	23:63	0:0	4	.
water	23:64	0:0	4	channel_layout
arg	23:80	23:111	3	(int64_t)AV_CH_LAYOUT_HEXAGONAL
water	23:80	0:0	4	(
water	23:81	0:0	4	int64_t
water	23:88	0:0	4	)
water	23:89	0:0	4	AV_CH_LAYOUT_HEXAGONAL
water	23:112	0:0	2	;
if	24:8	25:170	2	(test_ctx . binary)
cond	24:12	24:21	3	test_ctx . binary
water	24:12	0:0	4	test_ctx
op	24:20	0:0	4	.
water	24:21	0:0	4	binary
stmts	25:12	25:170	3	
call	25:12	25:169	4	printf
arg	25:19	25:41	5	"binary=%x %x %x %x\n"
water	25:19	0:0	6	"binary=%x %x %x %x\n"
arg	25:43	25:73	5	((uint8_t*)test_ctx.binary)[0]
water	25:43	0:0	6	(
water	25:44	0:0	6	(
water	25:45	0:0	6	uint8_t
op	25:52	0:0	6	*
water	25:53	0:0	6	)
water	25:54	0:0	6	test_ctx
op	25:62	0:0	6	.
water	25:63	0:0	6	binary
water	25:69	0:0	6	)
op	25:70	0:0	6	[
water	25:71	0:0	6	0
op	25:72	0:0	6	]
arg	25:75	25:105	5	((uint8_t*)test_ctx.binary)[1]
water	25:75	0:0	6	(
water	25:76	0:0	6	(
water	25:77	0:0	6	uint8_t
op	25:84	0:0	6	*
water	25:85	0:0	6	)
water	25:86	0:0	6	test_ctx
op	25:94	0:0	6	.
water	25:95	0:0	6	binary
water	25:101	0:0	6	)
op	25:102	0:0	6	[
water	25:103	0:0	6	1
op	25:104	0:0	6	]
arg	25:107	25:137	5	((uint8_t*)test_ctx.binary)[2]
water	25:107	0:0	6	(
water	25:108	0:0	6	(
water	25:109	0:0	6	uint8_t
op	25:116	0:0	6	*
water	25:117	0:0	6	)
water	25:118	0:0	6	test_ctx
op	25:126	0:0	6	.
water	25:127	0:0	6	binary
water	25:133	0:0	6	)
op	25:134	0:0	6	[
water	25:135	0:0	6	2
op	25:136	0:0	6	]
arg	25:139	25:169	5	((uint8_t*)test_ctx.binary)[3]
water	25:139	0:0	6	(
water	25:140	0:0	6	(
water	25:141	0:0	6	uint8_t
op	25:148	0:0	6	*
water	25:149	0:0	6	)
water	25:150	0:0	6	test_ctx
op	25:158	0:0	6	.
water	25:159	0:0	6	binary
water	25:165	0:0	6	)
op	25:166	0:0	6	[
water	25:167	0:0	6	3
op	25:168	0:0	6	]
water	25:170	0:0	4	;
call	26:8	26:55	2	printf
arg	26:15	26:33	3	"binary_size=%d\n"
water	26:15	0:0	4	"binary_size=%d\n"
arg	26:35	26:55	3	test_ctx.binary_size
water	26:35	0:0	4	test_ctx
op	26:43	0:0	4	.
water	26:44	0:0	4	binary_size
water	26:56	0:0	2	;
call	27:8	27:50	2	printf
arg	27:15	27:34	3	"num64=%"PRId64"\n"
water	27:15	0:0	4	"num64=%"
water	27:24	0:0	4	PRId64
water	27:30	0:0	4	"\n"
arg	27:36	27:50	3	test_ctx.num64
water	27:36	0:0	4	test_ctx
op	27:44	0:0	4	.
water	27:45	0:0	4	num64
water	27:51	0:0	2	;
call	28:8	28:41	2	printf
arg	28:15	28:27	3	"flt=%.6f\n"
water	28:15	0:0	4	"flt=%.6f\n"
arg	28:29	28:41	3	test_ctx.flt
water	28:29	0:0	4	test_ctx
op	28:37	0:0	4	.
water	28:38	0:0	4	flt
water	28:42	0:0	2	;
call	29:8	29:41	2	printf
arg	29:15	29:27	3	"dbl=%.6f\n"
water	29:15	0:0	4	"dbl=%.6f\n"
arg	29:29	29:41	3	test_ctx.dbl
water	29:29	0:0	4	test_ctx
op	29:37	0:0	4	.
water	29:38	0:0	4	dbl
water	29:42	0:0	2	;
call	30:8	30:43	2	av_opt_show2
arg	30:21	30:30	3	&test_ctx
op	30:21	0:0	4	&
water	30:22	0:0	4	test_ctx
arg	30:32	30:36	3	NULL
water	30:32	0:0	4	NULL
arg	30:38	30:40	3	-1
op	30:38	0:0	4	-
water	30:39	0:0	4	1
arg	30:42	30:43	3	0
water	30:42	0:0	4	0
water	30:44	0:0	2	;
call	31:8	31:29	2	av_opt_free
arg	31:20	31:29	3	&test_ctx
op	31:20	0:0	4	&
water	31:21	0:0	4	test_ctx
water	31:30	0:0	2	;
water	32:4	0:0	2	}
call	33:4	33:51	2	printf
arg	33:11	33:51	3	"\nTesting av_opt_is_set_to_default()\n"
water	33:11	0:0	4	"\nTesting av_opt_is_set_to_default()\n"
water	33:52	0:0	2	;
water	34:4	0:0	2	{
decl	35:8	35:15	2	int	ret
decl	36:8	36:36	2	TestContext	test_ctx
op	36:29	0:0	2	=
water	36:31	0:0	2	{
water	36:33	0:0	2	0
water	36:35	0:0	2	}
decl	37:8	37:32	2	const AVOption	*o
op	37:26	0:0	2	=
water	37:28	0:0	2	NULL
water	38:8	0:0	2	test_ctx
op	38:16	0:0	2	.
water	38:17	0:0	2	class
op	38:23	0:0	2	=
op	38:25	0:0	2	&
water	38:26	0:0	2	test_class
water	38:36	0:0	2	;
call	39:8	39:37	2	av_log_set_level
arg	39:25	39:37	3	AV_LOG_QUIET
water	39:25	0:0	4	AV_LOG_QUIET
water	39:38	0:0	2	;
while	40:8	43:8	2	(o =av_opt_next (& test_ctx ,o ))
cond	40:15	40:43	3	o =av_opt_next (& test_ctx ,o )
water	40:15	0:0	4	o
op	40:17	0:0	4	=
call	40:19	40:43	4	av_opt_next
arg	40:31	40:40	5	&test_ctx
op	40:31	0:0	6	&
water	40:32	0:0	6	test_ctx
arg	40:42	40:43	5	o
water	40:42	0:0	6	o
stmts	40:46	43:8	3	
water	40:46	0:0	4	{
water	41:12	0:0	4	ret
op	41:16	0:0	4	=
call	41:18	41:72	4	av_opt_is_set_to_default_by_name
arg	41:51	41:60	5	&test_ctx
op	41:51	0:0	6	&
water	41:52	0:0	6	test_ctx
arg	41:62	41:69	5	o->name
water	41:62	0:0	6	o
op	41:63	0:0	6	->
water	41:65	0:0	6	name
arg	41:71	41:72	5	0
water	41:71	0:0	6	0
water	41:73	0:0	4	;
call	42:12	42:100	4	printf
arg	42:19	42:52	5	"name:%10s default:%d error:%s\n"
water	42:19	0:0	6	"name:%10s default:%d error:%s\n"
arg	42:54	42:61	5	o->name
water	42:54	0:0	6	o
op	42:55	0:0	6	->
water	42:57	0:0	6	name
arg	42:63	42:68	5	!!ret
op	42:63	0:0	6	!
op	42:64	0:0	6	!
water	42:65	0:0	6	ret
arg	42:70	42:100	5	ret<0?av_err2str(ret):""
water	42:70	0:0	6	ret
op	42:74	0:0	6	<
water	42:76	0:0	6	0
water	42:78	0:0	6	?
call	42:80	42:94	6	av_err2str
arg	42:91	42:94	7	ret
water	42:91	0:0	8	ret
water	42:96	0:0	6	:
water	42:98	0:0	6	""
water	42:101	0:0	4	;
water	43:8	0:0	4	}
call	44:8	44:37	2	av_opt_set_defaults
arg	44:28	44:37	3	&test_ctx
op	44:28	0:0	4	&
water	44:29	0:0	4	test_ctx
water	44:38	0:0	2	;
while	45:8	48:8	2	(o =av_opt_next (& test_ctx ,o ))
cond	45:15	45:43	3	o =av_opt_next (& test_ctx ,o )
water	45:15	0:0	4	o
op	45:17	0:0	4	=
call	45:19	45:43	4	av_opt_next
arg	45:31	45:40	5	&test_ctx
op	45:31	0:0	6	&
water	45:32	0:0	6	test_ctx
arg	45:42	45:43	5	o
water	45:42	0:0	6	o
stmts	45:46	48:8	3	
water	45:46	0:0	4	{
water	46:12	0:0	4	ret
op	46:16	0:0	4	=
call	46:18	46:72	4	av_opt_is_set_to_default_by_name
arg	46:51	46:60	5	&test_ctx
op	46:51	0:0	6	&
water	46:52	0:0	6	test_ctx
arg	46:62	46:69	5	o->name
water	46:62	0:0	6	o
op	46:63	0:0	6	->
water	46:65	0:0	6	name
arg	46:71	46:72	5	0
water	46:71	0:0	6	0
water	46:73	0:0	4	;
call	47:12	47:100	4	printf
arg	47:19	47:52	5	"name:%10s default:%d error:%s\n"
water	47:19	0:0	6	"name:%10s default:%d error:%s\n"
arg	47:54	47:61	5	o->name
water	47:54	0:0	6	o
op	47:55	0:0	6	->
water	47:57	0:0	6	name
arg	47:63	47:68	5	!!ret
op	47:63	0:0	6	!
op	47:64	0:0	6	!
water	47:65	0:0	6	ret
arg	47:70	47:100	5	ret<0?av_err2str(ret):""
water	47:70	0:0	6	ret
op	47:74	0:0	6	<
water	47:76	0:0	6	0
water	47:78	0:0	6	?
call	47:80	47:94	6	av_err2str
arg	47:91	47:94	7	ret
water	47:91	0:0	8	ret
water	47:96	0:0	6	:
water	47:98	0:0	6	""
water	47:101	0:0	4	;
water	48:8	0:0	4	}
call	49:8	49:29	2	av_opt_free
arg	49:20	49:29	3	&test_ctx
op	49:20	0:0	4	&
water	49:21	0:0	4	test_ctx
water	49:30	0:0	2	;
water	50:4	0:0	2	}
call	51:4	51:40	2	printf
arg	51:11	51:40	3	"\nTest av_opt_serialize()\n"
water	51:11	0:0	4	"\nTest av_opt_serialize()\n"
water	51:41	0:0	2	;
water	52:4	0:0	2	{
decl	53:8	53:36	2	TestContext	test_ctx
op	53:29	0:0	2	=
water	53:31	0:0	2	{
water	53:33	0:0	2	0
water	53:35	0:0	2	}
decl	54:8	54:17	2	char	*buf
water	55:8	0:0	2	test_ctx
op	55:16	0:0	2	.
water	55:17	0:0	2	class
op	55:23	0:0	2	=
op	55:25	0:0	2	&
water	55:26	0:0	2	test_class
water	55:36	0:0	2	;
call	56:8	56:37	2	av_log_set_level
arg	56:25	56:37	3	AV_LOG_QUIET
water	56:25	0:0	4	AV_LOG_QUIET
water	56:38	0:0	2	;
call	57:8	57:37	2	av_opt_set_defaults
arg	57:28	57:37	3	&test_ctx
op	57:28	0:0	4	&
water	57:29	0:0	4	test_ctx
water	57:38	0:0	2	;
if	58:8	69:8	2	(av_opt_serialize (& test_ctx ,0 ,0 ,& buf ,'=' ,',' ) >= 0)
cond	58:12	58:65	3	av_opt_serialize (& test_ctx ,0 ,0 ,& buf ,'=' ,',' ) >= 0
call	58:12	58:60	4	av_opt_serialize
arg	58:29	58:38	5	&test_ctx
op	58:29	0:0	6	&
water	58:30	0:0	6	test_ctx
arg	58:40	58:41	5	0
water	58:40	0:0	6	0
arg	58:43	58:44	5	0
water	58:43	0:0	6	0
arg	58:46	58:50	5	&buf
op	58:46	0:0	6	&
water	58:47	0:0	6	buf
arg	58:52	58:55	5	'='
water	58:52	0:0	6	'='
arg	58:57	58:60	5	','
water	58:57	0:0	6	','
op	58:62	0:0	4	>=
water	58:65	0:0	4	0
stmts	58:68	69:8	3	
water	58:68	0:0	4	{
call	59:12	59:30	4	printf
arg	59:19	59:25	5	"%s\n"
water	59:19	0:0	6	"%s\n"
arg	59:27	59:30	5	buf
water	59:27	0:0	6	buf
water	59:31	0:0	4	;
call	60:12	60:33	4	av_opt_free
arg	60:24	60:33	5	&test_ctx
op	60:24	0:0	6	&
water	60:25	0:0	6	test_ctx
water	60:34	0:0	4	;
call	61:12	61:49	4	memset
arg	61:19	61:28	5	&test_ctx
op	61:19	0:0	6	&
water	61:20	0:0	6	test_ctx
arg	61:30	61:31	5	0
water	61:30	0:0	6	0
arg	61:33	61:49	5	sizeof(test_ctx)
op	61:33	0:0	6	sizeof
water	61:39	0:0	6	(
water	61:40	0:0	6	test_ctx
water	61:48	0:0	6	)
water	61:50	0:0	4	;
water	62:12	0:0	4	test_ctx
op	62:20	0:0	4	.
water	62:21	0:0	4	class
op	62:27	0:0	4	=
op	62:29	0:0	4	&
water	62:30	0:0	4	test_class
water	62:40	0:0	4	;
call	63:12	63:58	4	av_set_options_string
arg	63:34	63:43	5	&test_ctx
op	63:34	0:0	6	&
water	63:35	0:0	6	test_ctx
arg	63:45	63:48	5	buf
water	63:45	0:0	6	buf
arg	63:50	63:53	5	"="
water	63:50	0:0	6	"="
arg	63:55	63:58	5	","
water	63:55	0:0	6	","
water	63:59	0:0	4	;
call	64:12	64:23	4	av_free
arg	64:20	64:23	5	buf
water	64:20	0:0	6	buf
water	64:24	0:0	4	;
if	65:12	68:12	4	(av_opt_serialize (& test_ctx ,0 ,0 ,& buf ,'=' ,',' ) >= 0)
cond	65:16	65:69	5	av_opt_serialize (& test_ctx ,0 ,0 ,& buf ,'=' ,',' ) >= 0
call	65:16	65:64	6	av_opt_serialize
arg	65:33	65:42	7	&test_ctx
op	65:33	0:0	8	&
water	65:34	0:0	8	test_ctx
arg	65:44	65:45	7	0
water	65:44	0:0	8	0
arg	65:47	65:48	7	0
water	65:47	0:0	8	0
arg	65:50	65:54	7	&buf
op	65:50	0:0	8	&
water	65:51	0:0	8	buf
arg	65:56	65:59	7	'='
water	65:56	0:0	8	'='
arg	65:61	65:64	7	','
water	65:61	0:0	8	','
op	65:66	0:0	6	>=
water	65:69	0:0	6	0
stmts	65:72	68:12	5	
water	65:72	0:0	6	{
call	66:16	66:34	6	printf
arg	66:23	66:29	7	"%s\n"
water	66:23	0:0	8	"%s\n"
arg	66:31	66:34	7	buf
water	66:31	0:0	8	buf
water	66:35	0:0	6	;
call	67:16	67:27	6	av_free
arg	67:24	67:27	7	buf
water	67:24	0:0	8	buf
water	67:28	0:0	6	;
water	68:12	0:0	6	}
water	69:8	0:0	4	}
call	70:8	70:29	2	av_opt_free
arg	70:20	70:29	3	&test_ctx
op	70:20	0:0	4	&
water	70:21	0:0	4	test_ctx
water	70:30	0:0	2	;
water	71:4	0:0	2	}
call	72:4	72:48	2	printf
arg	72:11	72:48	3	"\nTesting av_set_options_string()\n"
water	72:11	0:0	4	"\nTesting av_set_options_string()\n"
water	72:49	0:0	2	;
water	73:4	0:0	2	{
decl	74:8	74:36	2	TestContext	test_ctx
op	74:29	0:0	2	=
water	74:31	0:0	2	{
water	74:33	0:0	2	0
water	74:35	0:0	2	}
water	75:8	0:0	2	static
water	75:15	0:0	2	const
water	75:21	0:0	2	char
op	75:26	0:0	2	*
water	75:28	0:0	2	const
water	75:34	0:0	2	options
op	75:41	0:0	2	[
op	75:42	0:0	2	]
op	75:44	0:0	2	=
water	75:46	0:0	2	{
water	76:12	0:0	2	""
water	76:14	0:0	2	,
water	77:12	0:0	2	":"
water	77:15	0:0	2	,
water	78:12	0:0	2	"="
water	78:15	0:0	2	,
water	79:12	0:0	2	"foo=:"
water	79:19	0:0	2	,
water	80:12	0:0	2	":=foo"
water	80:19	0:0	2	,
water	81:12	0:0	2	"=foo"
water	81:18	0:0	2	,
water	82:12	0:0	2	"foo="
water	82:18	0:0	2	,
water	83:12	0:0	2	"foo"
water	83:17	0:0	2	,
water	84:12	0:0	2	"foo=val"
water	84:21	0:0	2	,
water	85:12	0:0	2	"foo==val"
water	85:22	0:0	2	,
water	86:12	0:0	2	"toggle=:"
water	86:22	0:0	2	,
water	87:12	0:0	2	"string=:"
water	87:22	0:0	2	,
water	88:12	0:0	2	"toggle=1 : foo"
water	88:28	0:0	2	,
water	89:12	0:0	2	"toggle=100"
water	89:24	0:0	2	,
water	90:12	0:0	2	"toggle==1"
water	90:23	0:0	2	,
water	91:12	0:0	2	"flags=+mu-lame : num=42: toggle=0"
water	91:47	0:0	2	,
water	92:12	0:0	2	"num=42 : string=blahblah"
water	92:38	0:0	2	,
water	93:12	0:0	2	"rational=0 : rational=1/2 : rational=1/-1"
water	93:55	0:0	2	,
water	94:12	0:0	2	"rational=-1/0"
water	94:27	0:0	2	,
water	95:12	0:0	2	"size=1024x768"
water	95:27	0:0	2	,
water	96:12	0:0	2	"size=pal"
water	96:22	0:0	2	,
water	97:12	0:0	2	"size=bogus"
water	97:24	0:0	2	,
water	98:12	0:0	2	"pix_fmt=yuv420p"
water	98:29	0:0	2	,
water	99:12	0:0	2	"pix_fmt=2"
water	99:23	0:0	2	,
water	100:12	0:0	2	"pix_fmt=bogus"
water	100:27	0:0	2	,
water	101:12	0:0	2	"sample_fmt=s16"
water	101:28	0:0	2	,
water	102:12	0:0	2	"sample_fmt=2"
water	102:26	0:0	2	,
water	103:12	0:0	2	"sample_fmt=bogus"
water	103:30	0:0	2	,
water	104:12	0:0	2	"video_rate=pal"
water	104:28	0:0	2	,
water	105:12	0:0	2	"video_rate=25"
water	105:27	0:0	2	,
water	106:12	0:0	2	"video_rate=30000/1001"
water	106:35	0:0	2	,
water	107:12	0:0	2	"video_rate=30/1.001"
water	107:33	0:0	2	,
water	108:12	0:0	2	"video_rate=bogus"
water	108:30	0:0	2	,
water	109:12	0:0	2	"duration=bogus"
water	109:28	0:0	2	,
water	110:12	0:0	2	"duration=123.45"
water	110:29	0:0	2	,
water	111:12	0:0	2	"duration=1\\:23\\:45.67"
water	111:37	0:0	2	,
water	112:12	0:0	2	"color=blue"
water	112:24	0:0	2	,
water	113:12	0:0	2	"color=0x223300"
water	113:28	0:0	2	,
water	114:12	0:0	2	"color=0x42FF07AA"
water	114:30	0:0	2	,
water	115:12	0:0	2	"cl=stereo+downmix"
water	115:31	0:0	2	,
water	116:12	0:0	2	"cl=foo"
water	116:20	0:0	2	,
water	117:12	0:0	2	"bin=boguss"
water	117:24	0:0	2	,
water	118:12	0:0	2	"bin=111"
water	118:21	0:0	2	,
water	119:12	0:0	2	"bin=ffff"
water	119:22	0:0	2	,
water	120:12	0:0	2	"num64=bogus"
water	120:25	0:0	2	,
water	121:12	0:0	2	"num64=44"
water	121:22	0:0	2	,
water	122:12	0:0	2	"num64=44.4"
water	122:24	0:0	2	,
water	123:12	0:0	2	"num64=-1"
water	123:22	0:0	2	,
water	124:12	0:0	2	"num64=101"
water	124:23	0:0	2	,
water	125:12	0:0	2	"flt=bogus"
water	125:23	0:0	2	,
water	126:12	0:0	2	"flt=2"
water	126:19	0:0	2	,
water	127:12	0:0	2	"flt=2.2"
water	127:21	0:0	2	,
water	128:12	0:0	2	"flt=-1"
water	128:20	0:0	2	,
water	129:12	0:0	2	"flt=101"
water	129:21	0:0	2	,
water	130:12	0:0	2	"dbl=bogus"
water	130:23	0:0	2	,
water	131:12	0:0	2	"dbl=2"
water	131:19	0:0	2	,
water	132:12	0:0	2	"dbl=2.2"
water	132:21	0:0	2	,
water	133:12	0:0	2	"dbl=-1"
water	133:20	0:0	2	,
water	134:12	0:0	2	"dbl=101"
water	134:21	0:0	2	,
water	135:8	0:0	2	}
water	135:9	0:0	2	;
water	136:8	0:0	2	test_ctx
op	136:16	0:0	2	.
water	136:17	0:0	2	class
op	136:23	0:0	2	=
op	136:25	0:0	2	&
water	136:26	0:0	2	test_class
water	136:36	0:0	2	;
call	137:8	137:37	2	av_opt_set_defaults
arg	137:28	137:37	3	&test_ctx
op	137:28	0:0	4	&
water	137:29	0:0	4	test_ctx
water	137:38	0:0	2	;
call	138:8	138:37	2	av_log_set_level
arg	138:25	138:37	3	AV_LOG_QUIET
water	138:25	0:0	4	AV_LOG_QUIET
water	138:38	0:0	2	;
for	139:8	149:8	2	(i = 0 ;i <FF_ARRAY_ELEMS (options );i ++)
forinit	139:13	139:16	3	i = 0 ;
water	139:13	0:0	4	i
op	139:14	0:0	4	=
water	139:15	0:0	4	0
water	139:16	0:0	4	;
cond	139:18	139:44	3	i <FF_ARRAY_ELEMS (options )
water	139:18	0:0	4	i
op	139:20	0:0	4	<
call	139:22	139:44	4	FF_ARRAY_ELEMS
arg	139:37	139:44	5	options
water	139:37	0:0	6	options
forexpr	139:47	139:48	3	i ++
water	139:47	0:0	4	i
op	139:48	0:0	4	++
stmts	139:52	149:8	3	
water	139:52	0:0	4	{
decl	140:12	140:66	4	int	silence_log
op	140:28	0:0	4	=
op	140:30	0:0	4	!
call	140:31	140:65	5	strcmp
arg	140:38	140:48	6	options[i]
water	140:38	0:0	7	options
op	140:45	0:0	7	[
water	140:46	0:0	7	i
op	140:47	0:0	7	]
arg	140:50	140:65	6	"rational=-1/0"
water	140:50	0:0	7	"rational=-1/0"
call	141:12	141:87	4	av_log
arg	141:19	141:28	5	&test_ctx
op	141:19	0:0	6	&
water	141:20	0:0	6	test_ctx
arg	141:30	141:42	5	AV_LOG_DEBUG
water	141:30	0:0	6	AV_LOG_DEBUG
arg	141:44	141:75	5	"Setting options string '%s'\n"
water	141:44	0:0	6	"Setting options string '%s'\n"
arg	141:77	141:87	5	options[i]
water	141:77	0:0	6	options
op	141:84	0:0	6	[
water	141:85	0:0	6	i
op	141:86	0:0	6	]
water	141:88	0:0	4	;
if	142:12	143:41	4	(silence_log)
cond	142:16	142:16	5	silence_log
water	142:16	0:0	6	silence_log
stmts	143:16	143:41	5	
call	143:16	143:40	6	av_log_set_callback
arg	143:36	143:40	7	NULL
water	143:36	0:0	8	NULL
water	143:41	0:0	6	;
if	144:12	145:50	4	(av_set_options_string (& test_ctx ,options [ i ] ,"=" ,":" ) < 0)
cond	144:16	144:73	5	av_set_options_string (& test_ctx ,options [ i ] ,"=" ,":" ) < 0
call	144:16	144:69	6	av_set_options_string
arg	144:38	144:47	7	&test_ctx
op	144:38	0:0	8	&
water	144:39	0:0	8	test_ctx
arg	144:49	144:59	7	options[i]
water	144:49	0:0	8	options
op	144:56	0:0	8	[
water	144:57	0:0	8	i
op	144:58	0:0	8	]
arg	144:61	144:64	7	"="
water	144:61	0:0	8	"="
arg	144:66	144:69	7	":"
water	144:66	0:0	8	":"
op	144:71	0:0	6	<
water	144:73	0:0	6	0
stmts	145:16	145:50	5	
call	145:16	145:49	6	printf
arg	145:23	145:37	7	"Error '%s'\n"
water	145:23	0:0	8	"Error '%s'\n"
arg	145:39	145:49	7	options[i]
water	145:39	0:0	8	options
op	145:46	0:0	8	[
water	145:47	0:0	8	i
op	145:48	0:0	8	]
water	145:50	0:0	6	;
else	146:12	147:50	4
stmts	147:16	147:50	5	
call	147:16	147:49	6	printf
arg	147:23	147:37	7	"OK    '%s'\n"
water	147:23	0:0	8	"OK    '%s'\n"
arg	147:39	147:49	7	options[i]
water	147:39	0:0	8	options
op	147:46	0:0	8	[
water	147:47	0:0	8	i
op	147:48	0:0	8	]
water	147:50	0:0	6	;
call	148:12	148:49	4	av_log_set_callback
arg	148:32	148:49	5	log_callback_help
water	148:32	0:0	6	log_callback_help
water	148:50	0:0	4	;
water	149:8	0:0	4	}
call	150:8	150:29	2	av_opt_free
arg	150:20	150:29	3	&test_ctx
op	150:20	0:0	4	&
water	150:21	0:0	4	test_ctx
water	150:30	0:0	2	;
water	151:4	0:0	2	}
call	152:4	152:49	2	printf
arg	152:11	152:49	3	"\nTesting av_opt_set_from_string()\n"
water	152:11	0:0	4	"\nTesting av_opt_set_from_string()\n"
water	152:50	0:0	2	;
water	153:4	0:0	2	{
decl	154:8	154:36	2	TestContext	test_ctx
op	154:29	0:0	2	=
water	154:31	0:0	2	{
water	154:33	0:0	2	0
water	154:35	0:0	2	}
water	155:8	0:0	2	static
water	155:15	0:0	2	const
water	155:21	0:0	2	char
op	155:26	0:0	2	*
water	155:28	0:0	2	const
water	155:34	0:0	2	options
op	155:41	0:0	2	[
op	155:42	0:0	2	]
op	155:44	0:0	2	=
water	155:46	0:0	2	{
water	156:12	0:0	2	""
water	156:14	0:0	2	,
water	157:12	0:0	2	"5"
water	157:15	0:0	2	,
water	158:12	0:0	2	"5:hello"
water	158:21	0:0	2	,
water	159:12	0:0	2	"5:hello:size=pal"
water	159:30	0:0	2	,
water	160:12	0:0	2	"5:size=pal:hello"
water	160:30	0:0	2	,
water	161:12	0:0	2	":"
water	161:15	0:0	2	,
water	162:12	0:0	2	"="
water	162:15	0:0	2	,
water	163:12	0:0	2	" 5 : hello : size = pal "
water	163:38	0:0	2	,
water	164:12	0:0	2	"a_very_long_option_name_that_will_need_to_be_ellipsized_around_here=42"
water	165:8	0:0	2	}
water	165:9	0:0	2	;
water	166:8	0:0	2	static
water	166:15	0:0	2	const
water	166:21	0:0	2	char
op	166:26	0:0	2	*
water	166:28	0:0	2	const
water	166:34	0:0	2	shorthand
op	166:43	0:0	2	[
op	166:44	0:0	2	]
op	166:46	0:0	2	=
water	166:48	0:0	2	{
water	166:50	0:0	2	"num"
water	166:55	0:0	2	,
water	166:57	0:0	2	"string"
water	166:65	0:0	2	,
water	166:67	0:0	2	NULL
water	166:72	0:0	2	}
water	166:73	0:0	2	;
water	167:8	0:0	2	test_ctx
op	167:16	0:0	2	.
water	167:17	0:0	2	class
op	167:23	0:0	2	=
op	167:25	0:0	2	&
water	167:26	0:0	2	test_class
water	167:36	0:0	2	;
call	168:8	168:37	2	av_opt_set_defaults
arg	168:28	168:37	3	&test_ctx
op	168:28	0:0	4	&
water	168:29	0:0	4	test_ctx
water	168:38	0:0	2	;
call	169:8	169:37	2	av_log_set_level
arg	169:25	169:37	3	AV_LOG_QUIET
water	169:25	0:0	4	AV_LOG_QUIET
water	169:38	0:0	2	;
for	170:8	176:8	2	(i = 0 ;i <FF_ARRAY_ELEMS (options );i ++)
forinit	170:13	170:16	3	i = 0 ;
water	170:13	0:0	4	i
op	170:14	0:0	4	=
water	170:15	0:0	4	0
water	170:16	0:0	4	;
cond	170:18	170:44	3	i <FF_ARRAY_ELEMS (options )
water	170:18	0:0	4	i
op	170:20	0:0	4	<
call	170:22	170:44	4	FF_ARRAY_ELEMS
arg	170:37	170:44	5	options
water	170:37	0:0	6	options
forexpr	170:47	170:48	3	i ++
water	170:47	0:0	4	i
op	170:48	0:0	4	++
stmts	170:52	176:8	3	
water	170:52	0:0	4	{
call	171:12	171:87	4	av_log
arg	171:19	171:28	5	&test_ctx
op	171:19	0:0	6	&
water	171:20	0:0	6	test_ctx
arg	171:30	171:42	5	AV_LOG_DEBUG
water	171:30	0:0	6	AV_LOG_DEBUG
arg	171:44	171:75	5	"Setting options string '%s'\n"
water	171:44	0:0	6	"Setting options string '%s'\n"
arg	171:77	171:87	5	options[i]
water	171:77	0:0	6	options
op	171:84	0:0	6	[
water	171:85	0:0	6	i
op	171:86	0:0	6	]
water	171:88	0:0	4	;
if	172:12	173:50	4	(av_opt_set_from_string (& test_ctx ,options [ i ] ,shorthand ,"=" ,":" ) < 0)
cond	172:16	172:85	5	av_opt_set_from_string (& test_ctx ,options [ i ] ,shorthand ,"=" ,":" ) < 0
call	172:16	172:81	6	av_opt_set_from_string
arg	172:39	172:48	7	&test_ctx
op	172:39	0:0	8	&
water	172:40	0:0	8	test_ctx
arg	172:50	172:60	7	options[i]
water	172:50	0:0	8	options
op	172:57	0:0	8	[
water	172:58	0:0	8	i
op	172:59	0:0	8	]
arg	172:62	172:71	7	shorthand
water	172:62	0:0	8	shorthand
arg	172:73	172:76	7	"="
water	172:73	0:0	8	"="
arg	172:78	172:81	7	":"
water	172:78	0:0	8	":"
op	172:83	0:0	6	<
water	172:85	0:0	6	0
stmts	173:16	173:50	5	
call	173:16	173:49	6	printf
arg	173:23	173:37	7	"Error '%s'\n"
water	173:23	0:0	8	"Error '%s'\n"
arg	173:39	173:49	7	options[i]
water	173:39	0:0	8	options
op	173:46	0:0	8	[
water	173:47	0:0	8	i
op	173:48	0:0	8	]
water	173:50	0:0	6	;
else	174:12	175:50	4
stmts	175:16	175:50	5	
call	175:16	175:49	6	printf
arg	175:23	175:37	7	"OK    '%s'\n"
water	175:23	0:0	8	"OK    '%s'\n"
arg	175:39	175:49	7	options[i]
water	175:39	0:0	8	options
op	175:46	0:0	8	[
water	175:47	0:0	8	i
op	175:48	0:0	8	]
water	175:50	0:0	6	;
water	176:8	0:0	4	}
call	177:8	177:29	2	av_opt_free
arg	177:20	177:29	3	&test_ctx
op	177:20	0:0	4	&
water	177:21	0:0	4	test_ctx
water	177:30	0:0	2	;
water	178:4	0:0	2	}
return	179:4	179:12	2	0
water	179:11	0:0	3	0
