decl	5:4	5:11	0	int	ret
decl	6:4	6:63	0	AVFilterInOut	*cur
water	6:22	0:0	0	,
decl	6:4	6:63	0	AVFilterInOut	*match
water	6:30	0:0	0	,
decl	6:4	6:63	0	AVFilterInOut	*inputs
op	6:40	0:0	0	=
water	6:42	0:0	0	NULL
water	6:46	0:0	0	,
decl	6:4	6:63	0	AVFilterInOut	*outputs
op	6:57	0:0	0	=
water	6:59	0:0	0	NULL
func	59:0	65:0	0	int	avfilter_graph_parse
params	59:24	0:0	1	
param	59:25	59:45	2	AVFilterGraph *	graph
param	59:47	59:66	2	const char *	filters
param	60:25	60:47	2	AVFilterInOut * *	inputs
param	60:49	60:72	2	AVFilterInOut * *	outputs
param	61:25	61:38	2	void *	log_ctx
stmnts	63:4	63:77	1	
return	63:4	63:77	2	avfilter_graph_parse_ptr(graph,filters,inputs,outputs,log_ctx)
call	63:11	63:76	3	avfilter_graph_parse_ptr
arg	63:36	63:41	4	graph
water	63:36	0:0	5	graph
arg	63:43	63:50	4	filters
water	63:43	0:0	5	filters
arg	63:52	63:58	4	inputs
water	63:52	0:0	5	inputs
arg	63:60	63:67	4	outputs
water	63:60	0:0	5	outputs
arg	63:69	63:76	4	log_ctx
water	63:69	0:0	5	log_ctx
func	66:0	134:0	0	int	avfilter_graph_parse_ptr
params	66:28	0:0	1	
param	66:29	66:49	2	AVFilterGraph *	graph
param	66:51	66:70	2	const char *	filters
param	67:25	67:56	2	AVFilterInOut * *	open_inputs_ptr
param	67:58	67:90	2	AVFilterInOut * *	open_outputs_ptr
param	68:25	68:38	2	void *	log_ctx
stmnts	0:0	133:14	1	
decl	70:4	70:26	2	int	index
op	70:14	0:0	2	=
water	70:16	0:0	2	0
water	70:17	0:0	2	,
decl	70:4	70:26	2	int	ret
op	70:23	0:0	2	=
water	70:25	0:0	2	0
decl	71:4	71:16	2	char	chr
op	71:13	0:0	2	=
water	71:15	0:0	2	0
decl	72:4	72:37	2	AVFilterInOut	*curr_inputs
op	72:31	0:0	2	=
water	72:33	0:0	2	NULL
decl	73:4	73:77	2	AVFilterInOut	*open_inputs
op	73:32	0:0	2	=
water	73:34	0:0	2	open_inputs_ptr
water	73:51	0:0	2	?
op	73:53	0:0	2	*
water	73:54	0:0	2	open_inputs_ptr
water	73:71	0:0	2	:
water	73:73	0:0	2	NULL
decl	74:4	74:77	2	AVFilterInOut	*open_outputs
op	74:32	0:0	2	=
water	74:34	0:0	2	open_outputs_ptr
water	74:51	0:0	2	?
op	74:53	0:0	2	*
water	74:54	0:0	2	open_outputs_ptr
water	74:71	0:0	2	:
water	74:73	0:0	2	NULL
if	75:4	76:16	2	(( ret =parse_sws_flags (& filters ,graph ) ) < 0)
cond	75:8	75:51	3	( ret =parse_sws_flags (& filters ,graph ) ) < 0
water	75:8	0:0	4	(
water	75:9	0:0	4	ret
op	75:13	0:0	4	=
call	75:15	75:46	4	parse_sws_flags
arg	75:31	75:39	5	&filters
op	75:31	0:0	6	&
water	75:32	0:0	6	filters
arg	75:41	75:46	5	graph
water	75:41	0:0	6	graph
water	75:47	0:0	4	)
op	75:49	0:0	4	<
water	75:51	0:0	4	0
stmts	76:8	76:16	3	
goto	76:8	76:16	4	end
water	76:13	0:0	5	end
do	77:4	106:4	2	(chr == ',' || chr == ';')
cond	106:13	106:34	3	chr == ',' || chr == ';'
water	106:13	0:0	4	chr
op	106:17	0:0	4	==
water	106:20	0:0	4	','
op	106:24	0:0	4	||
water	106:27	0:0	4	chr
op	106:31	0:0	4	==
water	106:34	0:0	4	';'
stmts	77:7	106:4	3	
water	77:7	0:0	4	{
decl	78:8	78:31	4	AVFilterContext	*filter
decl	79:8	79:41	4	const char	*filterchain
op	79:32	0:0	4	=
water	79:34	0:0	4	filters
water	80:8	0:0	4	filters
op	80:16	0:0	4	+=
call	80:19	80:46	4	strspn
arg	80:26	80:33	5	filters
water	80:26	0:0	6	filters
arg	80:35	80:46	5	WHITESPACES
water	80:35	0:0	6	WHITESPACES
water	80:47	0:0	4	;
if	81:8	82:20	4	(( ret =parse_inputs (& filters ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	81:12	81:83	5	( ret =parse_inputs (& filters ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0
water	81:12	0:0	6	(
water	81:13	0:0	6	ret
op	81:17	0:0	6	=
call	81:19	81:78	6	parse_inputs
arg	81:32	81:40	7	&filters
op	81:32	0:0	8	&
water	81:33	0:0	8	filters
arg	81:42	81:54	7	&curr_inputs
op	81:42	0:0	8	&
water	81:43	0:0	8	curr_inputs
arg	81:56	81:69	7	&open_outputs
op	81:56	0:0	8	&
water	81:57	0:0	8	open_outputs
arg	81:71	81:78	7	log_ctx
water	81:71	0:0	8	log_ctx
water	81:79	0:0	6	)
op	81:81	0:0	6	<
water	81:83	0:0	6	0
stmts	82:12	82:20	5	
goto	82:12	82:20	6	end
water	82:17	0:0	7	end
if	83:8	84:20	4	(( ret =parse_filter (& filter ,& filters ,graph ,index ,log_ctx ) ) < 0)
cond	83:12	83:77	5	( ret =parse_filter (& filter ,& filters ,graph ,index ,log_ctx ) ) < 0
water	83:12	0:0	6	(
water	83:13	0:0	6	ret
op	83:17	0:0	6	=
call	83:19	83:72	6	parse_filter
arg	83:32	83:39	7	&filter
op	83:32	0:0	8	&
water	83:33	0:0	8	filter
arg	83:41	83:49	7	&filters
op	83:41	0:0	8	&
water	83:42	0:0	8	filters
arg	83:51	83:56	7	graph
water	83:51	0:0	8	graph
arg	83:58	83:63	7	index
water	83:58	0:0	8	index
arg	83:65	83:72	7	log_ctx
water	83:65	0:0	8	log_ctx
water	83:73	0:0	6	)
op	83:75	0:0	6	<
water	83:77	0:0	6	0
stmts	84:12	84:20	5	
goto	84:12	84:20	6	end
water	84:17	0:0	7	end
if	85:8	90:8	4	(filter -> nb_inputs == 1 && ! curr_inputs && ! index)
cond	85:12	85:55	5	filter -> nb_inputs == 1 && ! curr_inputs && ! index
water	85:12	0:0	6	filter
op	85:18	0:0	6	->
water	85:20	0:0	6	nb_inputs
op	85:30	0:0	6	==
water	85:33	0:0	6	1
op	85:35	0:0	6	&&
op	85:38	0:0	6	!
water	85:39	0:0	6	curr_inputs
op	85:51	0:0	6	&&
op	85:54	0:0	6	!
water	85:55	0:0	6	index
stmts	85:62	90:8	5	
water	85:62	0:0	6	{
decl	87:12	87:36	6	const char	*tmp
op	87:28	0:0	6	=
water	87:30	0:0	6	"[in]"
if	88:12	89:24	6	(( ret =parse_inputs (& tmp ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	88:16	88:83	7	( ret =parse_inputs (& tmp ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0
water	88:16	0:0	8	(
water	88:17	0:0	8	ret
op	88:21	0:0	8	=
call	88:23	88:78	8	parse_inputs
arg	88:36	88:40	9	&tmp
op	88:36	0:0	10	&
water	88:37	0:0	10	tmp
arg	88:42	88:54	9	&curr_inputs
op	88:42	0:0	10	&
water	88:43	0:0	10	curr_inputs
arg	88:56	88:69	9	&open_outputs
op	88:56	0:0	10	&
water	88:57	0:0	10	open_outputs
arg	88:71	88:78	9	log_ctx
water	88:71	0:0	10	log_ctx
water	88:79	0:0	8	)
op	88:81	0:0	8	<
water	88:83	0:0	8	0
stmts	89:16	89:24	7	
goto	89:16	89:24	8	end
water	89:21	0:0	9	end
water	90:8	0:0	6	}
if	91:8	92:20	4	(( ret =link_filter_inouts (filter ,& curr_inputs ,& open_inputs ,log_ctx ) ) < 0)
cond	91:12	91:86	5	( ret =link_filter_inouts (filter ,& curr_inputs ,& open_inputs ,log_ctx ) ) < 0
water	91:12	0:0	6	(
water	91:13	0:0	6	ret
op	91:17	0:0	6	=
call	91:19	91:81	6	link_filter_inouts
arg	91:38	91:44	7	filter
water	91:38	0:0	8	filter
arg	91:46	91:58	7	&curr_inputs
op	91:46	0:0	8	&
water	91:47	0:0	8	curr_inputs
arg	91:60	91:72	7	&open_inputs
op	91:60	0:0	8	&
water	91:61	0:0	8	open_inputs
arg	91:74	91:81	7	log_ctx
water	91:74	0:0	8	log_ctx
water	91:82	0:0	6	)
op	91:84	0:0	6	<
water	91:86	0:0	6	0
stmts	92:12	92:20	5	
goto	92:12	92:20	6	end
water	92:17	0:0	7	end
if	93:8	95:20	4	(( ret =parse_outputs (& filters ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	93:12	94:45	5	( ret =parse_outputs (& filters ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0
water	93:12	0:0	6	(
water	93:13	0:0	6	ret
op	93:17	0:0	6	=
call	93:19	94:40	6	parse_outputs
arg	93:33	93:41	7	&filters
op	93:33	0:0	8	&
water	93:34	0:0	8	filters
arg	93:43	93:55	7	&curr_inputs
op	93:43	0:0	8	&
water	93:44	0:0	8	curr_inputs
arg	93:57	93:69	7	&open_inputs
op	93:57	0:0	8	&
water	93:58	0:0	8	open_inputs
arg	93:71	93:84	7	&open_outputs
op	93:71	0:0	8	&
water	93:72	0:0	8	open_outputs
arg	94:33	94:40	7	log_ctx
water	94:33	0:0	8	log_ctx
water	94:41	0:0	6	)
op	94:43	0:0	6	<
water	94:45	0:0	6	0
stmts	95:12	95:20	5	
goto	95:12	95:20	6	end
water	95:17	0:0	7	end
water	96:8	0:0	4	filters
op	96:16	0:0	4	+=
call	96:19	96:46	4	strspn
arg	96:26	96:33	5	filters
water	96:26	0:0	6	filters
arg	96:35	96:46	5	WHITESPACES
water	96:35	0:0	6	WHITESPACES
water	96:47	0:0	4	;
water	97:8	0:0	4	chr
op	97:12	0:0	4	=
op	97:14	0:0	4	*
water	97:15	0:0	4	filters
op	97:22	0:0	4	++
water	97:24	0:0	4	;
if	98:8	104:8	4	(chr == ';' && curr_inputs)
cond	98:12	98:26	5	chr == ';' && curr_inputs
water	98:12	0:0	6	chr
op	98:16	0:0	6	==
water	98:19	0:0	6	';'
op	98:23	0:0	6	&&
water	98:26	0:0	6	curr_inputs
stmts	98:39	104:8	5	
water	98:39	0:0	6	{
call	99:12	101:30	6	av_log
arg	99:19	99:26	7	log_ctx
water	99:19	0:0	8	log_ctx
arg	99:28	99:40	7	AV_LOG_ERROR
water	99:28	0:0	8	AV_LOG_ERROR
arg	100:19	100:86	7	"Invalid filterchain containing an unlabelled output pad: \"%s\"\n"
water	100:19	0:0	8	"Invalid filterchain containing an unlabelled output pad: \"%s\"\n"
arg	101:19	101:30	7	filterchain
water	101:19	0:0	8	filterchain
water	101:31	0:0	6	;
water	102:12	0:0	6	ret
op	102:16	0:0	6	=
call	102:18	102:32	6	AVERROR
arg	102:26	102:32	7	EINVAL
water	102:26	0:0	8	EINVAL
water	102:33	0:0	6	;
goto	103:12	103:20	6	end
water	103:17	0:0	7	end
water	104:8	0:0	6	}
water	105:8	0:0	4	index
op	105:13	0:0	4	++
water	105:15	0:0	4	;
water	106:4	0:0	4	}
water	106:38	0:0	2	;
if	107:4	113:4	2	(chr)
cond	107:8	107:8	3	chr
water	107:8	0:0	4	chr
stmts	107:13	113:4	3	
water	107:13	0:0	4	{
call	108:8	110:26	4	av_log
arg	108:15	108:22	5	log_ctx
water	108:15	0:0	6	log_ctx
arg	108:24	108:36	5	AV_LOG_ERROR
water	108:24	0:0	6	AV_LOG_ERROR
arg	109:15	109:70	5	"Unable to parse graph description substring: \"%s\"\n"
water	109:15	0:0	6	"Unable to parse graph description substring: \"%s\"\n"
arg	110:15	110:26	5	filters-1
water	110:15	0:0	6	filters
op	110:23	0:0	6	-
water	110:25	0:0	6	1
water	110:27	0:0	4	;
water	111:8	0:0	4	ret
op	111:12	0:0	4	=
call	111:14	111:28	4	AVERROR
arg	111:22	111:28	5	EINVAL
water	111:22	0:0	6	EINVAL
water	111:29	0:0	4	;
goto	112:8	112:16	4	end
water	112:13	0:0	5	end
water	113:4	0:0	4	}
if	114:4	120:4	2	(curr_inputs)
cond	114:8	114:8	3	curr_inputs
water	114:8	0:0	4	curr_inputs
stmts	114:21	120:4	3	
water	114:21	0:0	4	{
decl	116:8	116:33	4	const char	*tmp
op	116:24	0:0	4	=
water	116:26	0:0	4	"[out]"
if	117:8	119:20	4	(( ret =parse_outputs (& tmp ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	117:12	118:45	5	( ret =parse_outputs (& tmp ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0
water	117:12	0:0	6	(
water	117:13	0:0	6	ret
op	117:17	0:0	6	=
call	117:19	118:40	6	parse_outputs
arg	117:33	117:37	7	&tmp
op	117:33	0:0	8	&
water	117:34	0:0	8	tmp
arg	117:39	117:51	7	&curr_inputs
op	117:39	0:0	8	&
water	117:40	0:0	8	curr_inputs
arg	117:53	117:65	7	&open_inputs
op	117:53	0:0	8	&
water	117:54	0:0	8	open_inputs
arg	117:67	117:80	7	&open_outputs
op	117:67	0:0	8	&
water	117:68	0:0	8	open_outputs
arg	118:33	118:40	7	log_ctx
water	118:33	0:0	8	log_ctx
water	118:41	0:0	6	)
op	118:43	0:0	6	<
water	118:45	0:0	6	0
stmts	119:12	119:20	5	
goto	119:12	119:20	6	end
water	119:17	0:0	7	end
water	120:4	0:0	4	}
label	121:0	121:3	2	end :
if	123:4	123:55	2	(open_inputs_ptr)
cond	123:8	123:8	3	open_inputs_ptr
water	123:8	0:0	4	open_inputs_ptr
stmts	123:25	123:55	3	
op	123:25	0:0	4	*
water	123:26	0:0	4	open_inputs_ptr
op	123:42	0:0	4	=
water	123:44	0:0	4	open_inputs
water	123:55	0:0	4	;
else	124:4	124:42	2
stmts	124:9	124:42	3	
call	124:9	124:41	4	avfilter_inout_free
arg	124:29	124:41	5	&open_inputs
op	124:29	0:0	6	&
water	124:30	0:0	6	open_inputs
water	124:42	0:0	4	;
if	125:4	125:58	2	(open_outputs_ptr)
cond	125:8	125:8	3	open_outputs_ptr
water	125:8	0:0	4	open_outputs_ptr
stmts	125:26	125:58	3	
op	125:26	0:0	4	*
water	125:27	0:0	4	open_outputs_ptr
op	125:44	0:0	4	=
water	125:46	0:0	4	open_outputs
water	125:58	0:0	4	;
else	126:4	126:43	2
stmts	126:9	126:43	3	
call	126:9	126:42	4	avfilter_inout_free
arg	126:29	126:42	5	&open_outputs
op	126:29	0:0	6	&
water	126:30	0:0	6	open_outputs
water	126:43	0:0	4	;
call	127:4	127:36	2	avfilter_inout_free
arg	127:24	127:36	3	&curr_inputs
op	127:24	0:0	4	&
water	127:25	0:0	4	curr_inputs
water	127:37	0:0	2	;
if	128:4	132:4	2	(ret < 0)
cond	128:8	128:14	3	ret < 0
water	128:8	0:0	4	ret
op	128:12	0:0	4	<
water	128:14	0:0	4	0
stmts	128:17	132:4	3	
water	128:17	0:0	4	{
while	129:8	130:44	4	(graph -> nb_filters)
cond	129:15	129:22	5	graph -> nb_filters
water	129:15	0:0	6	graph
op	129:20	0:0	6	->
water	129:22	0:0	6	nb_filters
stmts	130:12	130:44	5	
call	130:12	130:43	6	avfilter_free
arg	130:26	130:43	7	graph->filters[0]
water	130:26	0:0	8	graph
op	130:31	0:0	8	->
water	130:33	0:0	8	filters
op	130:40	0:0	8	[
water	130:41	0:0	8	0
op	130:42	0:0	8	]
water	130:44	0:0	6	;
call	131:8	131:32	4	av_freep
arg	131:17	131:32	5	&graph->filters
op	131:17	0:0	6	&
water	131:18	0:0	6	graph
op	131:23	0:0	6	->
water	131:25	0:0	6	filters
water	131:33	0:0	4	;
water	132:4	0:0	4	}
return	133:4	133:14	2	ret
water	133:11	0:0	3	ret
func	136:0	142:0	0	int	avfilter_graph_parse
params	136:24	0:0	1	
param	136:25	136:45	2	AVFilterGraph *	graph
param	136:47	136:66	2	const char *	filters
param	137:25	137:47	2	AVFilterInOut * *	inputs
param	137:49	137:72	2	AVFilterInOut * *	outputs
param	138:25	138:38	2	void *	log_ctx
stmnts	140:4	140:77	1	
return	140:4	140:77	2	avfilter_graph_parse_ptr(graph,filters,inputs,outputs,log_ctx)
call	140:11	140:76	3	avfilter_graph_parse_ptr
arg	140:36	140:41	4	graph
water	140:36	0:0	5	graph
arg	140:43	140:50	4	filters
water	140:43	0:0	5	filters
arg	140:52	140:58	4	inputs
water	140:52	0:0	5	inputs
arg	140:60	140:67	4	outputs
water	140:60	0:0	5	outputs
arg	140:69	140:76	4	log_ctx
water	140:69	0:0	5	log_ctx
func	143:0	211:0	0	int	avfilter_graph_parse_ptr
params	143:28	0:0	1	
param	143:29	143:49	2	AVFilterGraph *	graph
param	143:51	143:70	2	const char *	filters
param	144:25	144:56	2	AVFilterInOut * *	open_inputs_ptr
param	144:58	144:90	2	AVFilterInOut * *	open_outputs_ptr
param	145:25	145:38	2	void *	log_ctx
stmnts	0:0	210:14	1	
decl	147:4	147:26	2	int	index
op	147:14	0:0	2	=
water	147:16	0:0	2	0
water	147:17	0:0	2	,
decl	147:4	147:26	2	int	ret
op	147:23	0:0	2	=
water	147:25	0:0	2	0
decl	148:4	148:16	2	char	chr
op	148:13	0:0	2	=
water	148:15	0:0	2	0
decl	149:4	149:37	2	AVFilterInOut	*curr_inputs
op	149:31	0:0	2	=
water	149:33	0:0	2	NULL
decl	150:4	150:77	2	AVFilterInOut	*open_inputs
op	150:32	0:0	2	=
water	150:34	0:0	2	open_inputs_ptr
water	150:51	0:0	2	?
op	150:53	0:0	2	*
water	150:54	0:0	2	open_inputs_ptr
water	150:71	0:0	2	:
water	150:73	0:0	2	NULL
decl	151:4	151:77	2	AVFilterInOut	*open_outputs
op	151:32	0:0	2	=
water	151:34	0:0	2	open_outputs_ptr
water	151:51	0:0	2	?
op	151:53	0:0	2	*
water	151:54	0:0	2	open_outputs_ptr
water	151:71	0:0	2	:
water	151:73	0:0	2	NULL
if	152:4	153:16	2	(( ret =parse_sws_flags (& filters ,graph ) ) < 0)
cond	152:8	152:51	3	( ret =parse_sws_flags (& filters ,graph ) ) < 0
water	152:8	0:0	4	(
water	152:9	0:0	4	ret
op	152:13	0:0	4	=
call	152:15	152:46	4	parse_sws_flags
arg	152:31	152:39	5	&filters
op	152:31	0:0	6	&
water	152:32	0:0	6	filters
arg	152:41	152:46	5	graph
water	152:41	0:0	6	graph
water	152:47	0:0	4	)
op	152:49	0:0	4	<
water	152:51	0:0	4	0
stmts	153:8	153:16	3	
goto	153:8	153:16	4	end
water	153:13	0:0	5	end
do	154:4	183:4	2	(chr == ',' || chr == ';')
cond	183:13	183:34	3	chr == ',' || chr == ';'
water	183:13	0:0	4	chr
op	183:17	0:0	4	==
water	183:20	0:0	4	','
op	183:24	0:0	4	||
water	183:27	0:0	4	chr
op	183:31	0:0	4	==
water	183:34	0:0	4	';'
stmts	154:7	183:4	3	
water	154:7	0:0	4	{
decl	155:8	155:31	4	AVFilterContext	*filter
decl	156:8	156:41	4	const char	*filterchain
op	156:32	0:0	4	=
water	156:34	0:0	4	filters
water	157:8	0:0	4	filters
op	157:16	0:0	4	+=
call	157:19	157:46	4	strspn
arg	157:26	157:33	5	filters
water	157:26	0:0	6	filters
arg	157:35	157:46	5	WHITESPACES
water	157:35	0:0	6	WHITESPACES
water	157:47	0:0	4	;
if	158:8	159:20	4	(( ret =parse_inputs (& filters ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	158:12	158:83	5	( ret =parse_inputs (& filters ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0
water	158:12	0:0	6	(
water	158:13	0:0	6	ret
op	158:17	0:0	6	=
call	158:19	158:78	6	parse_inputs
arg	158:32	158:40	7	&filters
op	158:32	0:0	8	&
water	158:33	0:0	8	filters
arg	158:42	158:54	7	&curr_inputs
op	158:42	0:0	8	&
water	158:43	0:0	8	curr_inputs
arg	158:56	158:69	7	&open_outputs
op	158:56	0:0	8	&
water	158:57	0:0	8	open_outputs
arg	158:71	158:78	7	log_ctx
water	158:71	0:0	8	log_ctx
water	158:79	0:0	6	)
op	158:81	0:0	6	<
water	158:83	0:0	6	0
stmts	159:12	159:20	5	
goto	159:12	159:20	6	end
water	159:17	0:0	7	end
if	160:8	161:20	4	(( ret =parse_filter (& filter ,& filters ,graph ,index ,log_ctx ) ) < 0)
cond	160:12	160:77	5	( ret =parse_filter (& filter ,& filters ,graph ,index ,log_ctx ) ) < 0
water	160:12	0:0	6	(
water	160:13	0:0	6	ret
op	160:17	0:0	6	=
call	160:19	160:72	6	parse_filter
arg	160:32	160:39	7	&filter
op	160:32	0:0	8	&
water	160:33	0:0	8	filter
arg	160:41	160:49	7	&filters
op	160:41	0:0	8	&
water	160:42	0:0	8	filters
arg	160:51	160:56	7	graph
water	160:51	0:0	8	graph
arg	160:58	160:63	7	index
water	160:58	0:0	8	index
arg	160:65	160:72	7	log_ctx
water	160:65	0:0	8	log_ctx
water	160:73	0:0	6	)
op	160:75	0:0	6	<
water	160:77	0:0	6	0
stmts	161:12	161:20	5	
goto	161:12	161:20	6	end
water	161:17	0:0	7	end
if	162:8	167:8	4	(filter -> nb_inputs == 1 && ! curr_inputs && ! index)
cond	162:12	162:55	5	filter -> nb_inputs == 1 && ! curr_inputs && ! index
water	162:12	0:0	6	filter
op	162:18	0:0	6	->
water	162:20	0:0	6	nb_inputs
op	162:30	0:0	6	==
water	162:33	0:0	6	1
op	162:35	0:0	6	&&
op	162:38	0:0	6	!
water	162:39	0:0	6	curr_inputs
op	162:51	0:0	6	&&
op	162:54	0:0	6	!
water	162:55	0:0	6	index
stmts	162:62	167:8	5	
water	162:62	0:0	6	{
decl	164:12	164:36	6	const char	*tmp
op	164:28	0:0	6	=
water	164:30	0:0	6	"[in]"
if	165:12	166:24	6	(( ret =parse_inputs (& tmp ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	165:16	165:83	7	( ret =parse_inputs (& tmp ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0
water	165:16	0:0	8	(
water	165:17	0:0	8	ret
op	165:21	0:0	8	=
call	165:23	165:78	8	parse_inputs
arg	165:36	165:40	9	&tmp
op	165:36	0:0	10	&
water	165:37	0:0	10	tmp
arg	165:42	165:54	9	&curr_inputs
op	165:42	0:0	10	&
water	165:43	0:0	10	curr_inputs
arg	165:56	165:69	9	&open_outputs
op	165:56	0:0	10	&
water	165:57	0:0	10	open_outputs
arg	165:71	165:78	9	log_ctx
water	165:71	0:0	10	log_ctx
water	165:79	0:0	8	)
op	165:81	0:0	8	<
water	165:83	0:0	8	0
stmts	166:16	166:24	7	
goto	166:16	166:24	8	end
water	166:21	0:0	9	end
water	167:8	0:0	6	}
if	168:8	169:20	4	(( ret =link_filter_inouts (filter ,& curr_inputs ,& open_inputs ,log_ctx ) ) < 0)
cond	168:12	168:86	5	( ret =link_filter_inouts (filter ,& curr_inputs ,& open_inputs ,log_ctx ) ) < 0
water	168:12	0:0	6	(
water	168:13	0:0	6	ret
op	168:17	0:0	6	=
call	168:19	168:81	6	link_filter_inouts
arg	168:38	168:44	7	filter
water	168:38	0:0	8	filter
arg	168:46	168:58	7	&curr_inputs
op	168:46	0:0	8	&
water	168:47	0:0	8	curr_inputs
arg	168:60	168:72	7	&open_inputs
op	168:60	0:0	8	&
water	168:61	0:0	8	open_inputs
arg	168:74	168:81	7	log_ctx
water	168:74	0:0	8	log_ctx
water	168:82	0:0	6	)
op	168:84	0:0	6	<
water	168:86	0:0	6	0
stmts	169:12	169:20	5	
goto	169:12	169:20	6	end
water	169:17	0:0	7	end
if	170:8	172:20	4	(( ret =parse_outputs (& filters ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	170:12	171:45	5	( ret =parse_outputs (& filters ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0
water	170:12	0:0	6	(
water	170:13	0:0	6	ret
op	170:17	0:0	6	=
call	170:19	171:40	6	parse_outputs
arg	170:33	170:41	7	&filters
op	170:33	0:0	8	&
water	170:34	0:0	8	filters
arg	170:43	170:55	7	&curr_inputs
op	170:43	0:0	8	&
water	170:44	0:0	8	curr_inputs
arg	170:57	170:69	7	&open_inputs
op	170:57	0:0	8	&
water	170:58	0:0	8	open_inputs
arg	170:71	170:84	7	&open_outputs
op	170:71	0:0	8	&
water	170:72	0:0	8	open_outputs
arg	171:33	171:40	7	log_ctx
water	171:33	0:0	8	log_ctx
water	171:41	0:0	6	)
op	171:43	0:0	6	<
water	171:45	0:0	6	0
stmts	172:12	172:20	5	
goto	172:12	172:20	6	end
water	172:17	0:0	7	end
water	173:8	0:0	4	filters
op	173:16	0:0	4	+=
call	173:19	173:46	4	strspn
arg	173:26	173:33	5	filters
water	173:26	0:0	6	filters
arg	173:35	173:46	5	WHITESPACES
water	173:35	0:0	6	WHITESPACES
water	173:47	0:0	4	;
water	174:8	0:0	4	chr
op	174:12	0:0	4	=
op	174:14	0:0	4	*
water	174:15	0:0	4	filters
op	174:22	0:0	4	++
water	174:24	0:0	4	;
if	175:8	181:8	4	(chr == ';' && curr_inputs)
cond	175:12	175:26	5	chr == ';' && curr_inputs
water	175:12	0:0	6	chr
op	175:16	0:0	6	==
water	175:19	0:0	6	';'
op	175:23	0:0	6	&&
water	175:26	0:0	6	curr_inputs
stmts	175:39	181:8	5	
water	175:39	0:0	6	{
call	176:12	178:30	6	av_log
arg	176:19	176:26	7	log_ctx
water	176:19	0:0	8	log_ctx
arg	176:28	176:40	7	AV_LOG_ERROR
water	176:28	0:0	8	AV_LOG_ERROR
arg	177:19	177:86	7	"Invalid filterchain containing an unlabelled output pad: \"%s\"\n"
water	177:19	0:0	8	"Invalid filterchain containing an unlabelled output pad: \"%s\"\n"
arg	178:19	178:30	7	filterchain
water	178:19	0:0	8	filterchain
water	178:31	0:0	6	;
water	179:12	0:0	6	ret
op	179:16	0:0	6	=
call	179:18	179:32	6	AVERROR
arg	179:26	179:32	7	EINVAL
water	179:26	0:0	8	EINVAL
water	179:33	0:0	6	;
goto	180:12	180:20	6	end
water	180:17	0:0	7	end
water	181:8	0:0	6	}
water	182:8	0:0	4	index
op	182:13	0:0	4	++
water	182:15	0:0	4	;
water	183:4	0:0	4	}
water	183:38	0:0	2	;
if	184:4	190:4	2	(chr)
cond	184:8	184:8	3	chr
water	184:8	0:0	4	chr
stmts	184:13	190:4	3	
water	184:13	0:0	4	{
call	185:8	187:26	4	av_log
arg	185:15	185:22	5	log_ctx
water	185:15	0:0	6	log_ctx
arg	185:24	185:36	5	AV_LOG_ERROR
water	185:24	0:0	6	AV_LOG_ERROR
arg	186:15	186:70	5	"Unable to parse graph description substring: \"%s\"\n"
water	186:15	0:0	6	"Unable to parse graph description substring: \"%s\"\n"
arg	187:15	187:26	5	filters-1
water	187:15	0:0	6	filters
op	187:23	0:0	6	-
water	187:25	0:0	6	1
water	187:27	0:0	4	;
water	188:8	0:0	4	ret
op	188:12	0:0	4	=
call	188:14	188:28	4	AVERROR
arg	188:22	188:28	5	EINVAL
water	188:22	0:0	6	EINVAL
water	188:29	0:0	4	;
goto	189:8	189:16	4	end
water	189:13	0:0	5	end
water	190:4	0:0	4	}
if	191:4	197:4	2	(curr_inputs)
cond	191:8	191:8	3	curr_inputs
water	191:8	0:0	4	curr_inputs
stmts	191:21	197:4	3	
water	191:21	0:0	4	{
decl	193:8	193:33	4	const char	*tmp
op	193:24	0:0	4	=
water	193:26	0:0	4	"[out]"
if	194:8	196:20	4	(( ret =parse_outputs (& tmp ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	194:12	195:45	5	( ret =parse_outputs (& tmp ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0
water	194:12	0:0	6	(
water	194:13	0:0	6	ret
op	194:17	0:0	6	=
call	194:19	195:40	6	parse_outputs
arg	194:33	194:37	7	&tmp
op	194:33	0:0	8	&
water	194:34	0:0	8	tmp
arg	194:39	194:51	7	&curr_inputs
op	194:39	0:0	8	&
water	194:40	0:0	8	curr_inputs
arg	194:53	194:65	7	&open_inputs
op	194:53	0:0	8	&
water	194:54	0:0	8	open_inputs
arg	194:67	194:80	7	&open_outputs
op	194:67	0:0	8	&
water	194:68	0:0	8	open_outputs
arg	195:33	195:40	7	log_ctx
water	195:33	0:0	8	log_ctx
water	195:41	0:0	6	)
op	195:43	0:0	6	<
water	195:45	0:0	6	0
stmts	196:12	196:20	5	
goto	196:12	196:20	6	end
water	196:17	0:0	7	end
water	197:4	0:0	4	}
label	198:0	198:3	2	end :
if	200:4	200:55	2	(open_inputs_ptr)
cond	200:8	200:8	3	open_inputs_ptr
water	200:8	0:0	4	open_inputs_ptr
stmts	200:25	200:55	3	
op	200:25	0:0	4	*
water	200:26	0:0	4	open_inputs_ptr
op	200:42	0:0	4	=
water	200:44	0:0	4	open_inputs
water	200:55	0:0	4	;
else	201:4	201:42	2
stmts	201:9	201:42	3	
call	201:9	201:41	4	avfilter_inout_free
arg	201:29	201:41	5	&open_inputs
op	201:29	0:0	6	&
water	201:30	0:0	6	open_inputs
water	201:42	0:0	4	;
if	202:4	202:58	2	(open_outputs_ptr)
cond	202:8	202:8	3	open_outputs_ptr
water	202:8	0:0	4	open_outputs_ptr
stmts	202:26	202:58	3	
op	202:26	0:0	4	*
water	202:27	0:0	4	open_outputs_ptr
op	202:44	0:0	4	=
water	202:46	0:0	4	open_outputs
water	202:58	0:0	4	;
else	203:4	203:43	2
stmts	203:9	203:43	3	
call	203:9	203:42	4	avfilter_inout_free
arg	203:29	203:42	5	&open_outputs
op	203:29	0:0	6	&
water	203:30	0:0	6	open_outputs
water	203:43	0:0	4	;
call	204:4	204:36	2	avfilter_inout_free
arg	204:24	204:36	3	&curr_inputs
op	204:24	0:0	4	&
water	204:25	0:0	4	curr_inputs
water	204:37	0:0	2	;
if	205:4	209:4	2	(ret < 0)
cond	205:8	205:14	3	ret < 0
water	205:8	0:0	4	ret
op	205:12	0:0	4	<
water	205:14	0:0	4	0
stmts	205:17	209:4	3	
water	205:17	0:0	4	{
while	206:8	207:44	4	(graph -> nb_filters)
cond	206:15	206:22	5	graph -> nb_filters
water	206:15	0:0	6	graph
op	206:20	0:0	6	->
water	206:22	0:0	6	nb_filters
stmts	207:12	207:44	5	
call	207:12	207:43	6	avfilter_free
arg	207:26	207:43	7	graph->filters[0]
water	207:26	0:0	8	graph
op	207:31	0:0	8	->
water	207:33	0:0	8	filters
op	207:40	0:0	8	[
water	207:41	0:0	8	0
op	207:42	0:0	8	]
water	207:44	0:0	6	;
call	208:8	208:32	4	av_freep
arg	208:17	208:32	5	&graph->filters
op	208:17	0:0	6	&
water	208:18	0:0	6	graph
op	208:23	0:0	6	->
water	208:25	0:0	6	filters
water	208:33	0:0	4	;
water	209:4	0:0	4	}
return	210:4	210:14	2	ret
water	210:11	0:0	3	ret
