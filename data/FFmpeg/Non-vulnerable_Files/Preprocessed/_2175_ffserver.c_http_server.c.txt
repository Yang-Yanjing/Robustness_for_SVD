func	1:0	133:0	0	static int	http_server
params	1:22	0:0	1	
param	1:23	1:27	2	void
stmnts	0:0	132:13	1	
decl	3:4	3:41	2	int	server_fd
op	3:18	0:0	2	=
water	3:20	0:0	2	0
water	3:21	0:0	2	,
decl	3:4	3:41	2	int	rtsp_server_fd
op	3:38	0:0	2	=
water	3:40	0:0	2	0
decl	4:4	4:18	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:18	2	int	delay
decl	5:4	5:42	2	struct pollfd	*poll_table
water	5:29	0:0	2	,
decl	5:4	5:42	2	struct pollfd	*poll_entry
decl	6:4	6:27	2	HTTPContext	*c
water	6:18	0:0	2	,
decl	6:4	6:27	2	HTTPContext	*c_next
water	7:4	0:0	2	poll_table
op	7:15	0:0	2	=
call	7:17	8:53	2	av_mallocz_array
arg	7:34	7:68	3	config.nb_max_http_connections+2
water	7:34	0:0	4	config
op	7:40	0:0	4	.
water	7:41	0:0	4	nb_max_http_connections
op	7:65	0:0	4	+
water	7:67	0:0	4	2
arg	8:34	8:53	3	sizeof(*poll_table)
op	8:34	0:0	4	sizeof
water	8:40	0:0	4	(
op	8:41	0:0	4	*
water	8:42	0:0	4	poll_table
water	8:52	0:0	4	)
water	8:54	0:0	2	;
if	9:4	13:4	2	(! poll_table)
cond	9:7	9:8	3	! poll_table
op	9:7	0:0	4	!
water	9:8	0:0	4	poll_table
stmts	9:20	13:4	3	
water	9:20	0:0	4	{
call	10:8	11:65	4	http_log
arg	10:17	11:33	5	"Impossible to allocate a poll table handling %d ""connections.\n"
water	10:17	0:0	6	"Impossible to allocate a poll table handling %d "
water	11:17	0:0	6	"connections.\n"
arg	11:35	11:65	5	config.nb_max_http_connections
water	11:35	0:0	6	config
op	11:41	0:0	6	.
water	11:42	0:0	6	nb_max_http_connections
water	11:66	0:0	4	;
return	12:8	12:17	4	-1
op	12:15	0:0	5	-
water	12:16	0:0	5	1
water	13:4	0:0	4	}
if	14:4	18:4	2	(config . http_addr . sin_port)
cond	14:8	14:25	3	config . http_addr . sin_port
water	14:8	0:0	4	config
op	14:14	0:0	4	.
water	14:15	0:0	4	http_addr
op	14:24	0:0	4	.
water	14:25	0:0	4	sin_port
stmts	14:35	18:4	3	
water	14:35	0:0	4	{
water	15:8	0:0	4	server_fd
op	15:18	0:0	4	=
call	15:20	15:56	4	socket_open_listen
arg	15:39	15:56	5	&config.http_addr
op	15:39	0:0	6	&
water	15:40	0:0	6	config
op	15:46	0:0	6	.
water	15:47	0:0	6	http_addr
water	15:57	0:0	4	;
if	16:8	17:21	4	(server_fd < 0)
cond	16:12	16:24	5	server_fd < 0
water	16:12	0:0	6	server_fd
op	16:22	0:0	6	<
water	16:24	0:0	6	0
stmts	17:12	17:21	5	
goto	17:12	17:21	6	quit
water	17:17	0:0	7	quit
water	18:4	0:0	4	}
if	19:4	25:4	2	(config . rtsp_addr . sin_port)
cond	19:8	19:25	3	config . rtsp_addr . sin_port
water	19:8	0:0	4	config
op	19:14	0:0	4	.
water	19:15	0:0	4	rtsp_addr
op	19:24	0:0	4	.
water	19:25	0:0	4	sin_port
stmts	19:35	25:4	3	
water	19:35	0:0	4	{
water	20:8	0:0	4	rtsp_server_fd
op	20:23	0:0	4	=
call	20:25	20:61	4	socket_open_listen
arg	20:44	20:61	5	&config.rtsp_addr
op	20:44	0:0	6	&
water	20:45	0:0	6	config
op	20:51	0:0	6	.
water	20:52	0:0	6	rtsp_addr
water	20:62	0:0	4	;
if	21:8	24:8	4	(rtsp_server_fd < 0)
cond	21:12	21:29	5	rtsp_server_fd < 0
water	21:12	0:0	6	rtsp_server_fd
op	21:27	0:0	6	<
water	21:29	0:0	6	0
stmts	21:32	24:8	5	
water	21:32	0:0	6	{
call	22:12	22:33	6	closesocket
arg	22:24	22:33	7	server_fd
water	22:24	0:0	8	server_fd
water	22:34	0:0	6	;
goto	23:12	23:21	6	quit
water	23:17	0:0	7	quit
water	24:8	0:0	6	}
water	25:4	0:0	4	}
if	26:4	29:4	2	(! rtsp_server_fd && ! server_fd)
cond	26:8	26:28	3	! rtsp_server_fd && ! server_fd
op	26:8	0:0	4	!
water	26:9	0:0	4	rtsp_server_fd
op	26:24	0:0	4	&&
op	26:27	0:0	4	!
water	26:28	0:0	4	server_fd
stmts	26:39	29:4	3	
water	26:39	0:0	4	{
call	27:8	27:44	4	http_log
arg	27:17	27:44	5	"HTTP and RTSP disabled.\n"
water	27:17	0:0	6	"HTTP and RTSP disabled.\n"
water	27:45	0:0	4	;
goto	28:8	28:17	4	quit
water	28:13	0:0	5	quit
water	29:4	0:0	4	}
call	30:4	30:34	2	http_log
arg	30:13	30:34	3	"FFserver started.\n"
water	30:13	0:0	4	"FFserver started.\n"
water	30:35	0:0	2	;
call	31:4	31:36	2	start_children
arg	31:19	31:36	3	config.first_feed
water	31:19	0:0	4	config
op	31:25	0:0	4	.
water	31:26	0:0	4	first_feed
water	31:37	0:0	2	;
call	32:4	32:20	2	start_multicast
water	32:21	0:0	2	;
for	33:4	129:4	2	(;;)
forinit	33:8	33:8	3	;
water	33:8	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	33:12	129:4	3	
water	33:12	0:0	4	{
water	34:8	0:0	4	poll_entry
op	34:19	0:0	4	=
water	34:21	0:0	4	poll_table
water	34:31	0:0	4	;
if	35:8	39:8	4	(server_fd)
cond	35:12	35:12	5	server_fd
water	35:12	0:0	6	server_fd
stmts	35:23	39:8	5	
water	35:23	0:0	6	{
water	36:12	0:0	6	poll_entry
op	36:22	0:0	6	->
water	36:24	0:0	6	fd
op	36:27	0:0	6	=
water	36:29	0:0	6	server_fd
water	36:38	0:0	6	;
water	37:12	0:0	6	poll_entry
op	37:22	0:0	6	->
water	37:24	0:0	6	events
op	37:31	0:0	6	=
water	37:33	0:0	6	POLLIN
water	37:39	0:0	6	;
water	38:12	0:0	6	poll_entry
op	38:22	0:0	6	++
water	38:24	0:0	6	;
water	39:8	0:0	6	}
if	40:8	44:8	4	(rtsp_server_fd)
cond	40:12	40:12	5	rtsp_server_fd
water	40:12	0:0	6	rtsp_server_fd
stmts	40:28	44:8	5	
water	40:28	0:0	6	{
water	41:12	0:0	6	poll_entry
op	41:22	0:0	6	->
water	41:24	0:0	6	fd
op	41:27	0:0	6	=
water	41:29	0:0	6	rtsp_server_fd
water	41:43	0:0	6	;
water	42:12	0:0	6	poll_entry
op	42:22	0:0	6	->
water	42:24	0:0	6	events
op	42:31	0:0	6	=
water	42:33	0:0	6	POLLIN
water	42:39	0:0	6	;
water	43:12	0:0	6	poll_entry
op	43:22	0:0	6	++
water	43:24	0:0	6	;
water	44:8	0:0	6	}
water	46:8	0:0	4	c
op	46:10	0:0	4	=
water	46:12	0:0	4	first_http_ctx
water	46:26	0:0	4	;
water	47:8	0:0	4	delay
op	47:14	0:0	4	=
water	47:16	0:0	4	1000
water	47:20	0:0	4	;
while	48:8	93:8	4	(c)
cond	48:15	48:15	5	c
water	48:15	0:0	6	c
stmts	48:18	93:8	5	
water	48:18	0:0	6	{
decl	49:12	49:18	6	int	fd
water	50:12	0:0	6	fd
op	50:15	0:0	6	=
water	50:17	0:0	6	c
op	50:18	0:0	6	->
water	50:20	0:0	6	fd
water	50:22	0:0	6	;
switch	51:12	91:12	6	(c -> state)
cond	51:19	51:22	7	c -> state
water	51:19	0:0	8	c
op	51:20	0:0	8	->
water	51:22	0:0	8	state
stmts	51:29	91:12	7	
water	51:29	0:0	8	{
label	52:12	52:38	8	case HTTPSTATE_SEND_HEADER :
label	53:12	53:37	8	case RTSPSTATE_SEND_REPLY :
label	54:12	54:38	8	case RTSPSTATE_SEND_PACKET :
water	55:16	0:0	8	c
op	55:17	0:0	8	->
water	55:19	0:0	8	poll_entry
op	55:30	0:0	8	=
water	55:32	0:0	8	poll_entry
water	55:42	0:0	8	;
water	56:16	0:0	8	poll_entry
op	56:26	0:0	8	->
water	56:28	0:0	8	fd
op	56:31	0:0	8	=
water	56:33	0:0	8	fd
water	56:35	0:0	8	;
water	57:16	0:0	8	poll_entry
op	57:26	0:0	8	->
water	57:28	0:0	8	events
op	57:35	0:0	8	=
water	57:37	0:0	8	POLLOUT
water	57:44	0:0	8	;
water	58:16	0:0	8	poll_entry
op	58:26	0:0	8	++
water	58:28	0:0	8	;
break	59:16	59:21	8	
label	60:12	60:43	8	case HTTPSTATE_SEND_DATA_HEADER :
label	61:12	61:36	8	case HTTPSTATE_SEND_DATA :
label	62:12	62:44	8	case HTTPSTATE_SEND_DATA_TRAILER :
if	63:16	70:16	8	(! c -> is_packetized)
cond	63:20	63:24	9	! c -> is_packetized
op	63:20	0:0	10	!
water	63:21	0:0	10	c
op	63:22	0:0	10	->
water	63:24	0:0	10	is_packetized
stmts	63:39	70:16	9	
water	63:39	0:0	10	{
water	66:20	0:0	10	c
op	66:21	0:0	10	->
water	66:23	0:0	10	poll_entry
op	66:34	0:0	10	=
water	66:36	0:0	10	poll_entry
water	66:46	0:0	10	;
water	67:20	0:0	10	poll_entry
op	67:30	0:0	10	->
water	67:32	0:0	10	fd
op	67:35	0:0	10	=
water	67:37	0:0	10	fd
water	67:39	0:0	10	;
water	68:20	0:0	10	poll_entry
op	68:30	0:0	10	->
water	68:32	0:0	10	events
op	68:39	0:0	10	=
water	68:41	0:0	10	POLLOUT
water	68:48	0:0	10	;
water	69:20	0:0	10	poll_entry
op	69:30	0:0	10	++
water	69:32	0:0	10	;
water	70:16	0:0	10	}
else	70:18	76:16	8
stmts	70:23	76:16	9	
water	70:23	0:0	10	{
if	74:20	75:34	10	(delay > 10)
cond	74:24	74:32	11	delay > 10
water	74:24	0:0	12	delay
op	74:30	0:0	12	>
water	74:32	0:0	12	10
stmts	75:24	75:34	11	
water	75:24	0:0	12	delay
op	75:30	0:0	12	=
water	75:32	0:0	12	10
water	75:34	0:0	12	;
water	76:16	0:0	10	}
break	77:16	77:21	8	
label	78:12	78:39	8	case HTTPSTATE_WAIT_REQUEST :
label	79:12	79:39	8	case HTTPSTATE_RECEIVE_DATA :
label	80:12	80:36	8	case HTTPSTATE_WAIT_FEED :
label	81:12	81:39	8	case RTSPSTATE_WAIT_REQUEST :
water	83:16	0:0	8	c
op	83:17	0:0	8	->
water	83:19	0:0	8	poll_entry
op	83:30	0:0	8	=
water	83:32	0:0	8	poll_entry
water	83:42	0:0	8	;
water	84:16	0:0	8	poll_entry
op	84:26	0:0	8	->
water	84:28	0:0	8	fd
op	84:31	0:0	8	=
water	84:33	0:0	8	fd
water	84:35	0:0	8	;
water	85:16	0:0	8	poll_entry
op	85:26	0:0	8	->
water	85:28	0:0	8	events
op	85:35	0:0	8	=
water	85:37	0:0	8	POLLIN
water	85:43	0:0	8	;
water	86:16	0:0	8	poll_entry
op	86:26	0:0	8	++
water	86:28	0:0	8	;
break	87:16	87:21	8	
label	88:12	88:19	8	default :
water	89:16	0:0	8	c
op	89:17	0:0	8	->
water	89:19	0:0	8	poll_entry
op	89:30	0:0	8	=
water	89:32	0:0	8	NULL
water	89:36	0:0	8	;
break	90:16	90:21	8	
water	91:12	0:0	8	}
water	92:12	0:0	6	c
op	92:14	0:0	6	=
water	92:16	0:0	6	c
op	92:17	0:0	6	->
water	92:19	0:0	6	next
water	92:23	0:0	6	;
water	93:8	0:0	6	}
do	96:8	102:8	4	(ret < 0)
cond	102:17	102:23	5	ret < 0
water	102:17	0:0	6	ret
op	102:21	0:0	6	<
water	102:23	0:0	6	0
stmts	96:11	102:8	5	
water	96:11	0:0	6	{
water	97:12	0:0	6	ret
op	97:16	0:0	6	=
call	97:18	97:65	6	poll
arg	97:23	97:33	7	poll_table
water	97:23	0:0	8	poll_table
arg	97:35	97:58	7	poll_entry-poll_table
water	97:35	0:0	8	poll_entry
op	97:46	0:0	8	-
water	97:48	0:0	8	poll_table
arg	97:60	97:65	7	delay
water	97:60	0:0	8	delay
water	97:66	0:0	6	;
if	98:12	101:12	6	(ret < 0 &&ff_neterrno ( ) !=AVERROR (EAGAIN ) &&ff_neterrno ( ) !=AVERROR (EINTR ))
cond	98:16	99:46	7	ret < 0 &&ff_neterrno ( ) !=AVERROR (EAGAIN ) &&ff_neterrno ( ) !=AVERROR (EINTR )
water	98:16	0:0	8	ret
op	98:20	0:0	8	<
water	98:22	0:0	8	0
op	98:24	0:0	8	&&
call	98:27	98:39	8	ff_neterrno
op	98:41	0:0	8	!=
call	98:44	98:58	8	AVERROR
arg	98:52	98:58	9	EAGAIN
water	98:52	0:0	10	EAGAIN
op	98:60	0:0	8	&&
call	99:16	99:28	8	ff_neterrno
op	99:30	0:0	8	!=
call	99:33	99:46	8	AVERROR
arg	99:41	99:46	9	EINTR
water	99:41	0:0	10	EINTR
stmts	99:49	101:12	7	
water	99:49	0:0	8	{
goto	100:16	100:25	8	quit
water	100:21	0:0	9	quit
water	101:12	0:0	8	}
water	102:8	0:0	6	}
water	102:25	0:0	4	;
water	103:8	0:0	4	cur_time
op	103:17	0:0	4	=
call	103:19	103:30	4	av_gettime
op	103:32	0:0	4	/
water	103:34	0:0	4	1000
water	103:38	0:0	4	;
if	104:8	107:8	4	(need_to_start_children)
cond	104:12	104:12	5	need_to_start_children
water	104:12	0:0	6	need_to_start_children
stmts	104:36	107:8	5	
water	104:36	0:0	6	{
water	105:12	0:0	6	need_to_start_children
op	105:35	0:0	6	=
water	105:37	0:0	6	0
water	105:38	0:0	6	;
call	106:12	106:44	6	start_children
arg	106:27	106:44	7	config.first_feed
water	106:27	0:0	8	config
op	106:33	0:0	8	.
water	106:34	0:0	8	first_feed
water	106:45	0:0	6	;
water	107:8	0:0	6	}
for	109:8	116:8	4	(c = first_http_ctx ;c;c = c_next)
forinit	109:12	109:30	5	c = first_http_ctx ;
water	109:12	0:0	6	c
op	109:14	0:0	6	=
water	109:16	0:0	6	first_http_ctx
water	109:30	0:0	6	;
cond	109:32	109:32	5	c
water	109:32	0:0	6	c
forexpr	109:35	109:39	5	c = c_next
water	109:35	0:0	6	c
op	109:37	0:0	6	=
water	109:39	0:0	6	c_next
stmts	109:47	116:8	5	
water	109:47	0:0	6	{
water	110:12	0:0	6	c_next
op	110:19	0:0	6	=
water	110:21	0:0	6	c
op	110:22	0:0	6	->
water	110:24	0:0	6	next
water	110:28	0:0	6	;
if	111:12	115:12	6	(handle_connection (c ) < 0)
cond	111:16	111:39	7	handle_connection (c ) < 0
call	111:16	111:35	8	handle_connection
arg	111:34	111:35	9	c
water	111:34	0:0	10	c
op	111:37	0:0	8	<
water	111:39	0:0	8	0
stmts	111:42	115:12	7	
water	111:42	0:0	8	{
call	112:16	112:32	8	log_connection
arg	112:31	112:32	9	c
water	112:31	0:0	10	c
water	112:33	0:0	8	;
call	114:16	114:34	8	close_connection
arg	114:33	114:34	9	c
water	114:33	0:0	10	c
water	114:35	0:0	8	;
water	115:12	0:0	8	}
water	116:8	0:0	6	}
water	117:8	0:0	4	poll_entry
op	117:19	0:0	4	=
water	117:21	0:0	4	poll_table
water	117:31	0:0	4	;
if	118:8	123:8	4	(server_fd)
cond	118:12	118:12	5	server_fd
water	118:12	0:0	6	server_fd
stmts	118:23	123:8	5	
water	118:23	0:0	6	{
if	120:12	121:44	6	(poll_entry -> revents & POLLIN)
cond	120:16	120:38	7	poll_entry -> revents & POLLIN
water	120:16	0:0	8	poll_entry
op	120:26	0:0	8	->
water	120:28	0:0	8	revents
op	120:36	0:0	8	&
water	120:38	0:0	8	POLLIN
stmts	121:16	121:44	7	
call	121:16	121:43	8	new_connection
arg	121:31	121:40	9	server_fd
water	121:31	0:0	10	server_fd
arg	121:42	121:43	9	0
water	121:42	0:0	10	0
water	121:44	0:0	8	;
water	122:12	0:0	6	poll_entry
op	122:22	0:0	6	++
water	122:24	0:0	6	;
water	123:8	0:0	6	}
if	124:8	128:8	4	(rtsp_server_fd)
cond	124:12	124:12	5	rtsp_server_fd
water	124:12	0:0	6	rtsp_server_fd
stmts	124:28	128:8	5	
water	124:28	0:0	6	{
if	126:12	127:49	6	(poll_entry -> revents & POLLIN)
cond	126:16	126:38	7	poll_entry -> revents & POLLIN
water	126:16	0:0	8	poll_entry
op	126:26	0:0	8	->
water	126:28	0:0	8	revents
op	126:36	0:0	8	&
water	126:38	0:0	8	POLLIN
stmts	127:16	127:49	7	
call	127:16	127:48	8	new_connection
arg	127:31	127:45	9	rtsp_server_fd
water	127:31	0:0	10	rtsp_server_fd
arg	127:47	127:48	9	1
water	127:47	0:0	10	1
water	127:49	0:0	8	;
water	128:8	0:0	6	}
water	129:4	0:0	4	}
label	130:0	130:4	2	quit :
call	131:4	131:22	2	av_free
arg	131:12	131:22	3	poll_table
water	131:12	0:0	4	poll_table
water	131:23	0:0	2	;
return	132:4	132:13	2	-1
op	132:11	0:0	3	-
water	132:12	0:0	3	1
