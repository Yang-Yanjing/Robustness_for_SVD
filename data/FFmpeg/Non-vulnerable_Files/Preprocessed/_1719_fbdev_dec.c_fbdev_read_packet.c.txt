func	1:0	45:0	0	static int	fbdev_read_packet
params	1:28	0:0	1	
param	1:29	1:51	2	AVFormatContext *	avctx
param	1:53	1:66	2	AVPacket *	pkt
stmnts	0:0	44:28	1	
decl	3:4	3:42	2	FBDevContext	*fbdev
op	3:24	0:0	2	=
water	3:26	0:0	2	avctx
op	3:31	0:0	2	->
water	3:33	0:0	2	priv_data
decl	4:4	4:26	2	int64_t	curtime
water	4:19	0:0	2	,
decl	4:4	4:26	2	int64_t	delay
decl	5:4	5:22	2	struct timespec	ts
decl	6:4	6:14	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:14	2	int	ret
decl	7:4	7:23	2	uint8_t	*pin
water	7:16	0:0	2	,
decl	7:4	7:23	2	uint8_t	*pout
if	8:4	9:40	2	(fbdev -> time_frame == AV_NOPTS_VALUE)
cond	8:8	8:29	3	fbdev -> time_frame == AV_NOPTS_VALUE
water	8:8	0:0	4	fbdev
op	8:13	0:0	4	->
water	8:15	0:0	4	time_frame
op	8:26	0:0	4	==
water	8:29	0:0	4	AV_NOPTS_VALUE
stmts	9:8	9:40	3	
water	9:8	0:0	4	fbdev
op	9:13	0:0	4	->
water	9:15	0:0	4	time_frame
op	9:26	0:0	4	=
call	9:28	9:39	4	av_gettime
water	9:40	0:0	4	;
while	11:4	26:4	2	(1)
cond	11:11	11:11	3	1
water	11:11	0:0	4	1
stmts	11:14	26:4	3	
water	11:14	0:0	4	{
water	12:8	0:0	4	curtime
op	12:16	0:0	4	=
call	12:18	12:29	4	av_gettime
water	12:30	0:0	4	;
water	13:8	0:0	4	delay
op	13:14	0:0	4	=
water	13:16	0:0	4	fbdev
op	13:21	0:0	4	->
water	13:23	0:0	4	time_frame
op	13:34	0:0	4	-
water	13:36	0:0	4	curtime
water	13:43	0:0	4	;
call	14:8	16:49	4	av_log
arg	14:15	14:20	5	avctx
water	14:15	0:0	6	avctx
arg	14:22	14:34	5	AV_LOG_TRACE
water	14:22	0:0	6	AV_LOG_TRACE
arg	15:16	15:74	5	"time_frame:%"PRId64" curtime:%"PRId64" delay:%"PRId64"\n"
water	15:16	0:0	6	"time_frame:%"
water	15:30	0:0	6	PRId64
water	15:36	0:0	6	" curtime:%"
water	15:48	0:0	6	PRId64
water	15:54	0:0	6	" delay:%"
water	15:64	0:0	6	PRId64
water	15:70	0:0	6	"\n"
arg	16:16	16:33	5	fbdev->time_frame
water	16:16	0:0	6	fbdev
op	16:21	0:0	6	->
water	16:23	0:0	6	time_frame
arg	16:35	16:42	5	curtime
water	16:35	0:0	6	curtime
arg	16:44	16:49	5	delay
water	16:44	0:0	6	delay
water	16:50	0:0	4	;
if	17:8	20:8	4	(delay <= 0)
cond	17:12	17:21	5	delay <= 0
water	17:12	0:0	6	delay
op	17:18	0:0	6	<=
water	17:21	0:0	6	0
stmts	17:24	20:8	5	
water	17:24	0:0	6	{
water	18:12	0:0	6	fbdev
op	18:17	0:0	6	->
water	18:19	0:0	6	time_frame
op	18:30	0:0	6	+=
call	18:33	18:48	6	INT64_C
arg	18:41	18:48	7	1000000
water	18:41	0:0	8	1000000
op	18:50	0:0	6	/
call	18:52	18:77	6	av_q2d
arg	18:59	18:77	7	fbdev->framerate_q
water	18:59	0:0	8	fbdev
op	18:64	0:0	8	->
water	18:66	0:0	8	framerate_q
water	18:78	0:0	6	;
break	19:12	19:17	6	
water	20:8	0:0	6	}
if	21:8	22:34	4	(avctx -> flags & AVFMT_FLAG_NONBLOCK)
cond	21:12	21:27	5	avctx -> flags & AVFMT_FLAG_NONBLOCK
water	21:12	0:0	6	avctx
op	21:17	0:0	6	->
water	21:19	0:0	6	flags
op	21:25	0:0	6	&
water	21:27	0:0	6	AVFMT_FLAG_NONBLOCK
stmts	22:12	22:34	5	
return	22:12	22:34	6	AVERROR(EAGAIN)
call	22:19	22:33	7	AVERROR
arg	22:27	22:33	8	EAGAIN
water	22:27	0:0	9	EAGAIN
water	23:8	0:0	4	ts
op	23:10	0:0	4	.
water	23:11	0:0	4	tv_sec
op	23:19	0:0	4	=
water	23:22	0:0	4	delay
op	23:28	0:0	4	/
water	23:30	0:0	4	1000000
water	23:37	0:0	4	;
water	24:8	0:0	4	ts
op	24:10	0:0	4	.
water	24:11	0:0	4	tv_nsec
op	24:19	0:0	4	=
water	24:21	0:0	4	(
water	24:22	0:0	4	delay
op	24:28	0:0	4	%
water	24:30	0:0	4	1000000
water	24:37	0:0	4	)
op	24:39	0:0	4	*
water	24:41	0:0	4	1000
water	24:45	0:0	4	;
while	25:8	25:57	4	(nanosleep (& ts ,& ts ) < 0 && errno == EINTR)
cond	25:15	25:51	5	nanosleep (& ts ,& ts ) < 0 && errno == EINTR
call	25:15	25:33	6	nanosleep
arg	25:25	25:28	7	&ts
op	25:25	0:0	8	&
water	25:26	0:0	8	ts
arg	25:30	25:33	7	&ts
op	25:30	0:0	8	&
water	25:31	0:0	8	ts
op	25:35	0:0	6	<
water	25:37	0:0	6	0
op	25:39	0:0	6	&&
water	25:42	0:0	6	errno
op	25:48	0:0	6	==
water	25:51	0:0	6	EINTR
stmts	25:57	25:57	5	
water	25:57	0:0	6	;
water	26:4	0:0	4	}
if	27:4	28:18	2	(( ret =av_new_packet (pkt ,fbdev -> frame_size ) ) < 0)
cond	27:8	27:56	3	( ret =av_new_packet (pkt ,fbdev -> frame_size ) ) < 0
water	27:8	0:0	4	(
water	27:9	0:0	4	ret
op	27:13	0:0	4	=
call	27:15	27:51	4	av_new_packet
arg	27:29	27:32	5	pkt
water	27:29	0:0	6	pkt
arg	27:34	27:51	5	fbdev->frame_size
water	27:34	0:0	6	fbdev
op	27:39	0:0	6	->
water	27:41	0:0	6	frame_size
water	27:52	0:0	4	)
op	27:54	0:0	4	<
water	27:56	0:0	4	0
stmts	28:8	28:18	3	
return	28:8	28:18	4	ret
water	28:15	0:0	5	ret
if	30:4	33:4	2	(ioctl (fbdev -> fd ,FBIOGET_VSCREENINFO ,& fbdev -> varinfo ) < 0)
cond	30:8	30:65	3	ioctl (fbdev -> fd ,FBIOGET_VSCREENINFO ,& fbdev -> varinfo ) < 0
call	30:8	30:61	4	ioctl
arg	30:14	30:23	5	fbdev->fd
water	30:14	0:0	6	fbdev
op	30:19	0:0	6	->
water	30:21	0:0	6	fd
arg	30:25	30:44	5	FBIOGET_VSCREENINFO
water	30:25	0:0	6	FBIOGET_VSCREENINFO
arg	30:46	30:61	5	&fbdev->varinfo
op	30:46	0:0	6	&
water	30:47	0:0	6	fbdev
op	30:52	0:0	6	->
water	30:54	0:0	6	varinfo
op	30:63	0:0	4	<
water	30:65	0:0	4	0
stmts	30:68	33:4	3	
water	30:68	0:0	4	{
call	31:8	32:81	4	av_log
arg	31:15	31:20	5	avctx
water	31:15	0:0	6	avctx
arg	31:22	31:36	5	AV_LOG_WARNING
water	31:22	0:0	6	AV_LOG_WARNING
arg	32:15	32:53	5	"Error refreshing variable info: %s\n"
water	32:15	0:0	6	"Error refreshing variable info: %s\n"
arg	32:55	32:81	5	av_err2str(AVERROR(errno))
call	32:55	32:80	6	av_err2str
arg	32:66	32:80	7	AVERROR(errno)
call	32:66	32:79	8	AVERROR
arg	32:74	32:79	9	errno
water	32:74	0:0	10	errno
water	32:82	0:0	4	;
water	33:4	0:0	4	}
water	34:4	0:0	2	pkt
op	34:7	0:0	2	->
water	34:9	0:0	2	pts
op	34:13	0:0	2	=
water	34:15	0:0	2	curtime
water	34:22	0:0	2	;
water	36:4	0:0	2	pin
op	36:8	0:0	2	=
water	36:10	0:0	2	fbdev
op	36:15	0:0	2	->
water	36:17	0:0	2	data
op	36:22	0:0	2	+
water	36:24	0:0	2	fbdev
op	36:29	0:0	2	->
water	36:31	0:0	2	bytes_per_pixel
op	36:47	0:0	2	*
water	36:49	0:0	2	fbdev
op	36:54	0:0	2	->
water	36:56	0:0	2	varinfo
op	36:63	0:0	2	.
water	36:64	0:0	2	xoffset
op	36:72	0:0	2	+
water	37:24	0:0	2	fbdev
op	37:29	0:0	2	->
water	37:31	0:0	2	varinfo
op	37:38	0:0	2	.
water	37:39	0:0	2	yoffset
op	37:47	0:0	2	*
water	37:49	0:0	2	fbdev
op	37:54	0:0	2	->
water	37:56	0:0	2	fixinfo
op	37:63	0:0	2	.
water	37:64	0:0	2	line_length
water	37:75	0:0	2	;
water	38:4	0:0	2	pout
op	38:9	0:0	2	=
water	38:11	0:0	2	pkt
op	38:14	0:0	2	->
water	38:16	0:0	2	data
water	38:20	0:0	2	;
for	39:4	43:4	2	(i = 0 ;i < fbdev -> height;i ++)
forinit	39:9	39:14	3	i = 0 ;
water	39:9	0:0	4	i
op	39:11	0:0	4	=
water	39:13	0:0	4	0
water	39:14	0:0	4	;
cond	39:16	39:27	3	i < fbdev -> height
water	39:16	0:0	4	i
op	39:18	0:0	4	<
water	39:20	0:0	4	fbdev
op	39:25	0:0	4	->
water	39:27	0:0	4	height
forexpr	39:35	39:36	3	i ++
water	39:35	0:0	4	i
op	39:36	0:0	4	++
stmts	39:40	43:4	3	
water	39:40	0:0	4	{
call	40:8	40:47	4	memcpy
arg	40:15	40:19	5	pout
water	40:15	0:0	6	pout
arg	40:21	40:24	5	pin
water	40:21	0:0	6	pin
arg	40:26	40:47	5	fbdev->frame_linesize
water	40:26	0:0	6	fbdev
op	40:31	0:0	6	->
water	40:33	0:0	6	frame_linesize
water	40:48	0:0	4	;
water	41:8	0:0	4	pin
op	41:13	0:0	4	+=
water	41:16	0:0	4	fbdev
op	41:21	0:0	4	->
water	41:23	0:0	4	fixinfo
op	41:30	0:0	4	.
water	41:31	0:0	4	line_length
water	41:42	0:0	4	;
water	42:8	0:0	4	pout
op	42:13	0:0	4	+=
water	42:16	0:0	4	fbdev
op	42:21	0:0	4	->
water	42:23	0:0	4	frame_linesize
water	42:37	0:0	4	;
water	43:4	0:0	4	}
return	44:4	44:28	2	fbdev->frame_size
water	44:11	0:0	3	fbdev
op	44:16	0:0	3	->
water	44:18	0:0	3	frame_size
