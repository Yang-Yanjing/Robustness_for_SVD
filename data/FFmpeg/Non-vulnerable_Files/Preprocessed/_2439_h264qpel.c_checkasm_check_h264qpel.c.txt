func	1:0	30:0	0	void	checkasm_check_h264qpel
params	1:28	0:0	1	
param	1:29	1:33	2	void
stmnts	3:4	29:4	1	
call	3:4	3:46	2	LOCAL_ALIGNED_16
arg	3:21	3:28	3	uint8_t
water	3:21	0:0	4	uint8_t
arg	3:30	3:34	3	buf0
water	3:30	0:0	4	buf0
arg	3:36	3:46	3	[BUF_SIZE]
op	3:36	0:0	4	[
water	3:37	0:0	4	BUF_SIZE
op	3:45	0:0	4	]
water	3:47	0:0	2	;
call	4:4	4:46	2	LOCAL_ALIGNED_16
arg	4:21	4:28	3	uint8_t
water	4:21	0:0	4	uint8_t
arg	4:30	4:34	3	buf1
water	4:30	0:0	4	buf1
arg	4:36	4:46	3	[BUF_SIZE]
op	4:36	0:0	4	[
water	4:37	0:0	4	BUF_SIZE
op	4:45	0:0	4	]
water	4:47	0:0	2	;
call	5:4	5:46	2	LOCAL_ALIGNED_16
arg	5:21	5:28	3	uint8_t
water	5:21	0:0	4	uint8_t
arg	5:30	5:34	3	dst0
water	5:30	0:0	4	dst0
arg	5:36	5:46	3	[BUF_SIZE]
op	5:36	0:0	4	[
water	5:37	0:0	4	BUF_SIZE
op	5:45	0:0	4	]
water	5:47	0:0	2	;
call	6:4	6:46	2	LOCAL_ALIGNED_16
arg	6:21	6:28	3	uint8_t
water	6:21	0:0	4	uint8_t
arg	6:30	6:34	3	dst1
water	6:30	0:0	4	dst1
arg	6:36	6:46	3	[BUF_SIZE]
op	6:36	0:0	4	[
water	6:37	0:0	4	BUF_SIZE
op	6:45	0:0	4	]
water	6:47	0:0	2	;
decl	7:4	7:21	2	H264QpelContext	h
decl	8:4	8:27	2	int	op
water	8:10	0:0	2	,
decl	8:4	8:27	2	int	bit_depth
water	8:21	0:0	2	,
decl	8:4	8:27	2	int	i
water	8:24	0:0	2	,
decl	8:4	8:27	2	int	j
call	9:4	9:73	2	declare_func
arg	9:17	9:21	3	void
water	9:17	0:0	4	void
arg	9:23	9:35	3	uint8_t*dst
water	9:23	0:0	4	uint8_t
op	9:31	0:0	4	*
water	9:32	0:0	4	dst
arg	9:37	9:55	3	constuint8_t*src
water	9:37	0:0	4	const
water	9:43	0:0	4	uint8_t
op	9:51	0:0	4	*
water	9:52	0:0	4	src
arg	9:57	9:73	3	ptrdiff_tstride
water	9:57	0:0	4	ptrdiff_t
water	9:67	0:0	4	stride
water	9:74	0:0	2	;
for	10:4	29:4	2	(op = 0 ;op < 2;op ++)
forinit	10:9	10:15	3	op = 0 ;
water	10:9	0:0	4	op
op	10:12	0:0	4	=
water	10:14	0:0	4	0
water	10:15	0:0	4	;
cond	10:17	10:22	3	op < 2
water	10:17	0:0	4	op
op	10:20	0:0	4	<
water	10:22	0:0	4	2
forexpr	10:25	10:27	3	op ++
water	10:25	0:0	4	op
op	10:27	0:0	4	++
stmts	10:31	29:4	3	
water	10:31	0:0	4	{
call	11:8	11:26	4	qpel_mc_func
arg	11:22	11:26	5	*tab
op	11:22	0:0	6	*
water	11:23	0:0	6	tab
op	11:27	0:0	4	[
water	11:28	0:0	4	16
op	11:30	0:0	4	]
op	11:32	0:0	4	=
water	11:34	0:0	4	op
water	11:37	0:0	4	?
water	11:39	0:0	4	h
op	11:40	0:0	4	.
water	11:41	0:0	4	avg_h264_qpel_pixels_tab
water	11:66	0:0	4	:
water	11:68	0:0	4	h
op	11:69	0:0	4	.
water	11:70	0:0	4	put_h264_qpel_pixels_tab
water	11:94	0:0	4	;
decl	12:8	12:48	4	const char	*op_name
op	12:28	0:0	4	=
water	12:30	0:0	4	op
water	12:33	0:0	4	?
water	12:35	0:0	4	"avg"
water	12:41	0:0	4	:
water	12:43	0:0	4	"put"
for	13:8	27:8	4	(bit_depth = 8 ;bit_depth <= 10;bit_depth ++)
forinit	13:13	13:26	5	bit_depth = 8 ;
water	13:13	0:0	6	bit_depth
op	13:23	0:0	6	=
water	13:25	0:0	6	8
water	13:26	0:0	6	;
cond	13:28	13:41	5	bit_depth <= 10
water	13:28	0:0	6	bit_depth
op	13:38	0:0	6	<=
water	13:41	0:0	6	10
forexpr	13:45	13:54	5	bit_depth ++
water	13:45	0:0	6	bit_depth
op	13:54	0:0	6	++
stmts	13:58	27:8	5	
water	13:58	0:0	6	{
call	14:12	14:42	6	ff_h264qpel_init
arg	14:29	14:31	7	&h
op	14:29	0:0	8	&
water	14:30	0:0	8	h
arg	14:33	14:42	7	bit_depth
water	14:33	0:0	8	bit_depth
water	14:43	0:0	6	;
for	15:12	26:12	6	(i = 0 ;i < ( op ? 3 : 4 );i ++)
forinit	15:17	15:22	7	i = 0 ;
water	15:17	0:0	8	i
op	15:19	0:0	8	=
water	15:21	0:0	8	0
water	15:22	0:0	8	;
cond	15:24	15:39	7	i < ( op ? 3 : 4 )
water	15:24	0:0	8	i
op	15:26	0:0	8	<
water	15:28	0:0	8	(
water	15:29	0:0	8	op
water	15:32	0:0	8	?
water	15:34	0:0	8	3
water	15:36	0:0	8	:
water	15:38	0:0	8	4
water	15:39	0:0	8	)
forexpr	15:42	15:43	7	i ++
water	15:42	0:0	8	i
op	15:43	0:0	8	++
stmts	15:47	26:12	7	
water	15:47	0:0	8	{
decl	16:16	16:34	8	int	size
op	16:25	0:0	8	=
water	16:27	0:0	8	16
op	16:30	0:0	8	>>
water	16:33	0:0	8	i
for	17:16	25:20	8	(j = 0 ;j < 16;j ++)
forinit	17:21	17:26	9	j = 0 ;
water	17:21	0:0	10	j
op	17:23	0:0	10	=
water	17:25	0:0	10	0
water	17:26	0:0	10	;
cond	17:28	17:32	9	j < 16
water	17:28	0:0	10	j
op	17:30	0:0	10	<
water	17:32	0:0	10	16
forexpr	17:36	17:37	9	j ++
water	17:36	0:0	10	j
op	17:37	0:0	10	++
stmts	18:20	25:20	9	
if	18:20	25:20	10	(check_func (tab [ i ] [ j ] ,"%s_h264_qpel_%d_mc%d%d_%d" ,op_name ,size ,j & 3 ,j >> 2 ,bit_depth ))
cond	18:24	18:114	11	check_func (tab [ i ] [ j ] ,"%s_h264_qpel_%d_mc%d%d_%d" ,op_name ,size ,j & 3 ,j >> 2 ,bit_depth )
call	18:24	18:114	12	check_func
arg	18:35	18:44	13	tab[i][j]
water	18:35	0:0	14	tab
op	18:38	0:0	14	[
water	18:39	0:0	14	i
op	18:40	0:0	14	]
op	18:41	0:0	14	[
water	18:42	0:0	14	j
op	18:43	0:0	14	]
arg	18:46	18:73	13	"%s_h264_qpel_%d_mc%d%d_%d"
water	18:46	0:0	14	"%s_h264_qpel_%d_mc%d%d_%d"
arg	18:75	18:82	13	op_name
water	18:75	0:0	14	op_name
arg	18:84	18:88	13	size
water	18:84	0:0	14	size
arg	18:90	18:95	13	j&3
water	18:90	0:0	14	j
op	18:92	0:0	14	&
water	18:94	0:0	14	3
arg	18:97	18:103	13	j>>2
water	18:97	0:0	14	j
op	18:99	0:0	14	>>
water	18:102	0:0	14	2
arg	18:105	18:114	13	bit_depth
water	18:105	0:0	14	bit_depth
stmts	18:117	25:20	11	
water	18:117	0:0	12	{
call	19:24	19:42	12	randomize_buffers
water	19:43	0:0	12	;
call	20:24	20:64	12	call_ref
arg	20:33	20:37	13	dst0
water	20:33	0:0	14	dst0
arg	20:39	20:43	13	src0
water	20:39	0:0	14	src0
arg	20:45	20:64	13	size*SIZEOF_PIXEL
water	20:45	0:0	14	size
op	20:50	0:0	14	*
water	20:52	0:0	14	SIZEOF_PIXEL
water	20:65	0:0	12	;
call	21:24	21:64	12	call_new
arg	21:33	21:37	13	dst1
water	21:33	0:0	14	dst1
arg	21:39	21:43	13	src1
water	21:39	0:0	14	src1
arg	21:45	21:64	13	size*SIZEOF_PIXEL
water	21:45	0:0	14	size
op	21:50	0:0	14	*
water	21:52	0:0	14	SIZEOF_PIXEL
water	21:65	0:0	12	;
if	22:24	23:34	12	(memcmp (buf0 ,buf1 ,BUF_SIZE ) ||memcmp (dst0 ,dst1 ,BUF_SIZE ))
cond	22:28	22:87	13	memcmp (buf0 ,buf1 ,BUF_SIZE ) ||memcmp (dst0 ,dst1 ,BUF_SIZE )
call	22:28	22:55	14	memcmp
arg	22:35	22:39	15	buf0
water	22:35	0:0	16	buf0
arg	22:41	22:45	15	buf1
water	22:41	0:0	16	buf1
arg	22:47	22:55	15	BUF_SIZE
water	22:47	0:0	16	BUF_SIZE
op	22:57	0:0	14	||
call	22:60	22:87	14	memcmp
arg	22:67	22:71	15	dst0
water	22:67	0:0	16	dst0
arg	22:73	22:77	15	dst1
water	22:73	0:0	16	dst1
arg	22:79	22:87	15	BUF_SIZE
water	22:79	0:0	16	BUF_SIZE
stmts	23:28	23:34	13	
call	23:28	23:33	14	fail
water	23:34	0:0	14	;
call	24:24	24:65	12	bench_new
arg	24:34	24:38	13	dst1
water	24:34	0:0	14	dst1
arg	24:40	24:44	13	src1
water	24:40	0:0	14	src1
arg	24:46	24:65	13	size*SIZEOF_PIXEL
water	24:46	0:0	14	size
op	24:51	0:0	14	*
water	24:53	0:0	14	SIZEOF_PIXEL
water	24:66	0:0	12	;
water	25:20	0:0	12	}
water	26:12	0:0	8	}
water	27:8	0:0	6	}
call	28:8	28:28	4	report
arg	28:15	28:19	5	"%s"
water	28:15	0:0	6	"%s"
arg	28:21	28:28	5	op_name
water	28:21	0:0	6	op_name
water	28:29	0:0	4	;
water	29:4	0:0	4	}
