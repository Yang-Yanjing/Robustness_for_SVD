func	1:0	47:0	0	static int	aic_decode_frame
params	1:27	0:0	1	
param	1:28	1:49	2	AVCodecContext *	avctx
param	1:51	1:61	2	void *	data
param	1:63	1:77	2	int *	got_frame
param	2:28	2:43	2	AVPacket *	avpkt
stmnts	0:0	46:22	1	
decl	4:4	4:41	2	AICContext	*ctx
op	4:23	0:0	2	=
water	4:25	0:0	2	avctx
op	4:30	0:0	2	->
water	4:32	0:0	2	priv_data
decl	5:4	5:36	2	const uint8_t	*buf
op	5:23	0:0	2	=
water	5:25	0:0	2	avpkt
op	5:30	0:0	2	->
water	5:32	0:0	2	data
decl	6:4	6:36	2	int	buf_size
op	6:23	0:0	2	=
water	6:25	0:0	2	avpkt
op	6:30	0:0	2	->
water	6:32	0:0	2	size
decl	7:4	7:21	2	GetByteContext	gb
decl	8:4	8:16	2	uint32_t	off
decl	9:4	9:17	2	int	x
water	9:9	0:0	2	,
decl	9:4	9:17	2	int	y
water	9:12	0:0	2	,
decl	9:4	9:17	2	int	ret
decl	10:4	10:18	2	int	slice_size
water	11:4	0:0	2	ctx
op	11:7	0:0	2	->
water	11:9	0:0	2	frame
op	11:26	0:0	2	=
water	11:28	0:0	2	data
water	11:32	0:0	2	;
water	12:4	0:0	2	ctx
op	12:7	0:0	2	->
water	12:9	0:0	2	frame
op	12:14	0:0	2	->
water	12:16	0:0	2	pict_type
op	12:26	0:0	2	=
water	12:28	0:0	2	AV_PICTURE_TYPE_I
water	12:45	0:0	2	;
water	13:4	0:0	2	ctx
op	13:7	0:0	2	->
water	13:9	0:0	2	frame
op	13:14	0:0	2	->
water	13:16	0:0	2	key_frame
op	13:26	0:0	2	=
water	13:28	0:0	2	1
water	13:29	0:0	2	;
water	14:4	0:0	2	off
op	14:8	0:0	2	=
call	14:10	14:74	2	FFALIGN
arg	14:18	14:71	3	AIC_HDR_SIZE+ctx->num_x_slices*ctx->mb_height*2
water	14:18	0:0	4	AIC_HDR_SIZE
op	14:31	0:0	4	+
water	14:33	0:0	4	ctx
op	14:36	0:0	4	->
water	14:38	0:0	4	num_x_slices
op	14:51	0:0	4	*
water	14:53	0:0	4	ctx
op	14:56	0:0	4	->
water	14:58	0:0	4	mb_height
op	14:68	0:0	4	*
water	14:70	0:0	4	2
arg	14:73	14:74	3	4
water	14:73	0:0	4	4
water	14:75	0:0	2	;
if	15:4	18:4	2	(buf_size < off)
cond	15:8	15:19	3	buf_size < off
water	15:8	0:0	4	buf_size
op	15:17	0:0	4	<
water	15:19	0:0	4	off
stmts	15:24	18:4	3	
water	15:24	0:0	4	{
call	16:8	16:55	4	av_log
arg	16:15	16:20	5	avctx
water	16:15	0:0	6	avctx
arg	16:22	16:34	5	AV_LOG_ERROR
water	16:22	0:0	6	AV_LOG_ERROR
arg	16:36	16:55	5	"Too small frame\n"
water	16:36	0:0	6	"Too small frame\n"
water	16:56	0:0	4	;
return	17:8	17:34	4	AVERROR_INVALIDDATA
water	17:15	0:0	5	AVERROR_INVALIDDATA
water	18:4	0:0	4	}
water	19:4	0:0	2	ret
op	19:8	0:0	2	=
call	19:10	19:46	2	aic_decode_header
arg	19:28	19:31	3	ctx
water	19:28	0:0	4	ctx
arg	19:33	19:36	3	buf
water	19:33	0:0	4	buf
arg	19:38	19:46	3	buf_size
water	19:38	0:0	4	buf_size
water	19:47	0:0	2	;
if	20:4	23:4	2	(ret < 0)
cond	20:8	20:14	3	ret < 0
water	20:8	0:0	4	ret
op	20:12	0:0	4	<
water	20:14	0:0	4	0
stmts	20:17	23:4	3	
water	20:17	0:0	4	{
call	21:8	21:54	4	av_log
arg	21:15	21:20	5	avctx
water	21:15	0:0	6	avctx
arg	21:22	21:34	5	AV_LOG_ERROR
water	21:22	0:0	6	AV_LOG_ERROR
arg	21:36	21:54	5	"Invalid header\n"
water	21:36	0:0	6	"Invalid header\n"
water	21:55	0:0	4	;
return	22:8	22:18	4	ret
water	22:15	0:0	5	ret
water	23:4	0:0	4	}
if	24:4	25:18	2	(( ret =ff_get_buffer (avctx ,ctx -> frame ,0 ) ) < 0)
cond	24:8	24:54	3	( ret =ff_get_buffer (avctx ,ctx -> frame ,0 ) ) < 0
water	24:8	0:0	4	(
water	24:9	0:0	4	ret
op	24:13	0:0	4	=
call	24:15	24:49	4	ff_get_buffer
arg	24:29	24:34	5	avctx
water	24:29	0:0	6	avctx
arg	24:36	24:46	5	ctx->frame
water	24:36	0:0	6	ctx
op	24:39	0:0	6	->
water	24:41	0:0	6	frame
arg	24:48	24:49	5	0
water	24:48	0:0	6	0
water	24:50	0:0	4	)
op	24:52	0:0	4	<
water	24:54	0:0	4	0
stmts	25:8	25:18	3	
return	25:8	25:18	4	ret
water	25:15	0:0	5	ret
call	26:4	27:59	2	bytestream2_init
arg	26:21	26:24	3	&gb
op	26:21	0:0	4	&
water	26:22	0:0	4	gb
arg	26:26	26:44	3	buf+AIC_HDR_SIZE
water	26:26	0:0	4	buf
op	26:30	0:0	4	+
water	26:32	0:0	4	AIC_HDR_SIZE
arg	27:21	27:59	3	ctx->num_x_slices*ctx->mb_height*2
water	27:21	0:0	4	ctx
op	27:24	0:0	4	->
water	27:26	0:0	4	num_x_slices
op	27:39	0:0	4	*
water	27:41	0:0	4	ctx
op	27:44	0:0	4	->
water	27:46	0:0	4	mb_height
op	27:56	0:0	4	*
water	27:58	0:0	4	2
water	27:60	0:0	2	;
for	28:4	44:4	2	(y = 0 ;y < ctx -> mb_height;y ++)
forinit	28:9	28:14	3	y = 0 ;
water	28:9	0:0	4	y
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:25	3	y < ctx -> mb_height
water	28:16	0:0	4	y
op	28:18	0:0	4	<
water	28:20	0:0	4	ctx
op	28:23	0:0	4	->
water	28:25	0:0	4	mb_height
forexpr	28:36	28:37	3	y ++
water	28:36	0:0	4	y
op	28:37	0:0	4	++
stmts	28:41	44:4	3	
water	28:41	0:0	4	{
for	29:8	43:8	4	(x = 0 ;x < ctx -> mb_width;x += ctx -> slice_width)
forinit	29:13	29:18	5	x = 0 ;
water	29:13	0:0	6	x
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:29	5	x < ctx -> mb_width
water	29:20	0:0	6	x
op	29:22	0:0	6	<
water	29:24	0:0	6	ctx
op	29:27	0:0	6	->
water	29:29	0:0	6	mb_width
forexpr	29:39	29:49	5	x += ctx -> slice_width
water	29:39	0:0	6	x
op	29:41	0:0	6	+=
water	29:44	0:0	6	ctx
op	29:47	0:0	6	->
water	29:49	0:0	6	slice_width
stmts	29:62	43:8	5	
water	29:62	0:0	6	{
water	30:12	0:0	6	slice_size
op	30:23	0:0	6	=
call	30:25	30:49	6	bytestream2_get_le16
arg	30:46	30:49	7	&gb
op	30:46	0:0	8	&
water	30:47	0:0	8	gb
op	30:51	0:0	6	*
water	30:53	0:0	6	4
water	30:54	0:0	6	;
if	31:12	35:12	6	(slice_size + off > buf_size || ! slice_size)
cond	31:16	31:48	7	slice_size + off > buf_size || ! slice_size
water	31:16	0:0	8	slice_size
op	31:27	0:0	8	+
water	31:29	0:0	8	off
op	31:33	0:0	8	>
water	31:35	0:0	8	buf_size
op	31:44	0:0	8	||
op	31:47	0:0	8	!
water	31:48	0:0	8	slice_size
stmts	31:60	35:12	7	
water	31:60	0:0	8	{
call	32:16	33:77	8	av_log
arg	32:23	32:28	9	avctx
water	32:23	0:0	10	avctx
arg	32:30	32:42	9	AV_LOG_ERROR
water	32:30	0:0	10	AV_LOG_ERROR
arg	33:23	33:59	9	"Incorrect slice size %d at %d.%d\n"
water	33:23	0:0	10	"Incorrect slice size %d at %d.%d\n"
arg	33:61	33:71	9	slice_size
water	33:61	0:0	10	slice_size
arg	33:73	33:74	9	x
water	33:73	0:0	10	x
arg	33:76	33:77	9	y
water	33:76	0:0	10	y
water	33:78	0:0	8	;
return	34:16	34:42	8	AVERROR_INVALIDDATA
water	34:23	0:0	9	AVERROR_INVALIDDATA
water	35:12	0:0	8	}
water	36:12	0:0	6	ret
op	36:16	0:0	6	=
call	36:18	36:67	6	aic_decode_slice
arg	36:35	36:38	7	ctx
water	36:35	0:0	8	ctx
arg	36:40	36:41	7	x
water	36:40	0:0	8	x
arg	36:43	36:44	7	y
water	36:43	0:0	8	y
arg	36:46	36:55	7	buf+off
water	36:46	0:0	8	buf
op	36:50	0:0	8	+
water	36:52	0:0	8	off
arg	36:57	36:67	7	slice_size
water	36:57	0:0	8	slice_size
water	36:68	0:0	6	;
if	37:12	41:12	6	(ret < 0)
cond	37:16	37:22	7	ret < 0
water	37:16	0:0	8	ret
op	37:20	0:0	8	<
water	37:22	0:0	8	0
stmts	37:25	41:12	7	
water	37:25	0:0	8	{
call	38:16	39:62	8	av_log
arg	38:23	38:28	9	avctx
water	38:23	0:0	10	avctx
arg	38:30	38:42	9	AV_LOG_ERROR
water	38:30	0:0	10	AV_LOG_ERROR
arg	39:23	39:56	9	"Error decoding slice at %d.%d\n"
water	39:23	0:0	10	"Error decoding slice at %d.%d\n"
arg	39:58	39:59	9	x
water	39:58	0:0	10	x
arg	39:61	39:62	9	y
water	39:61	0:0	10	y
water	39:63	0:0	8	;
return	40:16	40:26	8	ret
water	40:23	0:0	9	ret
water	41:12	0:0	8	}
water	42:12	0:0	6	off
op	42:16	0:0	6	+=
water	42:19	0:0	6	slice_size
water	42:29	0:0	6	;
water	43:8	0:0	6	}
water	44:4	0:0	4	}
op	45:4	0:0	2	*
water	45:5	0:0	2	got_frame
op	45:15	0:0	2	=
water	45:17	0:0	2	1
water	45:18	0:0	2	;
return	46:4	46:22	2	avpkt->size
water	46:11	0:0	3	avpkt
op	46:16	0:0	3	->
water	46:18	0:0	3	size
