func	1:0	43:0	0	static int	buffer_needs_copy
params	1:28	0:0	1	
param	1:29	1:42	2	PadContext *	s
param	1:44	1:58	2	AVFrame *	frame
param	1:60	1:76	2	AVBufferRef *	buf
stmnts	0:0	42:12	1	
decl	3:4	3:50	2	int	planes[4]
op	3:18	0:0	2	=
water	3:20	0:0	2	{
op	3:22	0:0	2	-
water	3:23	0:0	2	1
water	3:24	0:0	2	,
op	3:26	0:0	2	-
water	3:27	0:0	2	1
water	3:28	0:0	2	,
op	3:30	0:0	2	-
water	3:31	0:0	2	1
water	3:32	0:0	2	,
op	3:34	0:0	2	-
water	3:35	0:0	2	1
water	3:36	0:0	2	}
water	3:37	0:0	2	,
decl	3:4	3:50	2	int	*p
op	3:42	0:0	2	=
water	3:44	0:0	2	planes
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	j
for	6:4	9:4	2	(i = 0 ;i <FF_ARRAY_ELEMS (planes ) && frame -> data [ i ];i ++)
forinit	6:9	6:14	3	i = 0 ;
water	6:9	0:0	4	i
op	6:11	0:0	4	=
water	6:13	0:0	4	0
water	6:14	0:0	4	;
cond	6:16	6:59	3	i <FF_ARRAY_ELEMS (planes ) && frame -> data [ i ]
water	6:16	0:0	4	i
op	6:18	0:0	4	<
call	6:20	6:41	4	FF_ARRAY_ELEMS
arg	6:35	6:41	5	planes
water	6:35	0:0	6	planes
op	6:43	0:0	4	&&
water	6:46	0:0	4	frame
op	6:51	0:0	4	->
water	6:53	0:0	4	data
op	6:57	0:0	4	[
water	6:58	0:0	4	i
op	6:59	0:0	4	]
forexpr	6:62	6:63	3	i ++
water	6:62	0:0	4	i
op	6:63	0:0	4	++
stmts	6:67	9:4	3	
water	6:67	0:0	4	{
if	7:8	8:20	4	(av_frame_get_plane_buffer (frame ,i ) == buf)
cond	7:12	7:51	5	av_frame_get_plane_buffer (frame ,i ) == buf
call	7:12	7:46	6	av_frame_get_plane_buffer
arg	7:38	7:43	7	frame
water	7:38	0:0	8	frame
arg	7:45	7:46	7	i
water	7:45	0:0	8	i
op	7:48	0:0	6	==
water	7:51	0:0	6	buf
stmts	8:12	8:20	5	
op	8:12	0:0	6	*
water	8:13	0:0	6	p
op	8:14	0:0	6	++
op	8:17	0:0	6	=
water	8:19	0:0	6	i
water	8:20	0:0	6	;
water	9:4	0:0	4	}
for	12:4	41:4	2	(i = 0 ;i <FF_ARRAY_ELEMS (planes ) && planes [ i ] >= 0;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:59	3	i <FF_ARRAY_ELEMS (planes ) && planes [ i ] >= 0
water	12:16	0:0	4	i
op	12:18	0:0	4	<
call	12:20	12:41	4	FF_ARRAY_ELEMS
arg	12:35	12:41	5	planes
water	12:35	0:0	6	planes
op	12:43	0:0	4	&&
water	12:46	0:0	4	planes
op	12:52	0:0	4	[
water	12:53	0:0	4	i
op	12:54	0:0	4	]
op	12:56	0:0	4	>=
water	12:59	0:0	4	0
forexpr	12:62	12:63	3	i ++
water	12:62	0:0	4	i
op	12:63	0:0	4	++
stmts	12:67	41:4	3	
water	12:67	0:0	4	{
decl	13:8	13:42	4	int	hsub
op	13:17	0:0	4	=
water	13:19	0:0	4	s
op	13:20	0:0	4	->
water	13:22	0:0	4	draw
op	13:26	0:0	4	.
water	13:27	0:0	4	hsub
op	13:31	0:0	4	[
water	13:32	0:0	4	planes
op	13:38	0:0	4	[
water	13:39	0:0	4	i
op	13:40	0:0	4	]
op	13:41	0:0	4	]
decl	14:8	14:42	4	int	vsub
op	14:17	0:0	4	=
water	14:19	0:0	4	s
op	14:20	0:0	4	->
water	14:22	0:0	4	draw
op	14:26	0:0	4	.
water	14:27	0:0	4	vsub
op	14:31	0:0	4	[
water	14:32	0:0	4	planes
op	14:38	0:0	4	[
water	14:39	0:0	4	i
op	14:40	0:0	4	]
op	14:41	0:0	4	]
decl	15:8	15:47	4	uint8_t	*start
op	15:23	0:0	4	=
water	15:25	0:0	4	frame
op	15:30	0:0	4	->
water	15:32	0:0	4	data
op	15:36	0:0	4	[
water	15:37	0:0	4	planes
op	15:43	0:0	4	[
water	15:44	0:0	4	i
op	15:45	0:0	4	]
op	15:46	0:0	4	]
decl	16:8	17:59	4	uint8_t	*end
op	16:23	0:0	4	=
water	16:25	0:0	4	start
op	16:31	0:0	4	+
water	16:33	0:0	4	(
water	16:34	0:0	4	frame
op	16:39	0:0	4	->
water	16:41	0:0	4	height
op	16:48	0:0	4	>>
water	16:51	0:0	4	vsub
water	16:55	0:0	4	)
op	16:57	0:0	4	*
water	17:33	0:0	4	frame
op	17:38	0:0	4	->
water	17:40	0:0	4	linesize
op	17:48	0:0	4	[
water	17:49	0:0	4	planes
op	17:55	0:0	4	[
water	17:56	0:0	4	i
op	17:57	0:0	4	]
op	17:58	0:0	4	]
decl	20:8	21:73	4	ptrdiff_t	req_start
op	20:28	0:0	4	=
water	20:30	0:0	4	(
water	20:31	0:0	4	s
op	20:32	0:0	4	->
water	20:34	0:0	4	x
op	20:36	0:0	4	>>
water	20:39	0:0	4	hsub
water	20:43	0:0	4	)
op	20:45	0:0	4	*
water	20:47	0:0	4	s
op	20:48	0:0	4	->
water	20:50	0:0	4	draw
op	20:54	0:0	4	.
water	20:55	0:0	4	pixelstep
op	20:64	0:0	4	[
water	20:65	0:0	4	planes
op	20:71	0:0	4	[
water	20:72	0:0	4	i
op	20:73	0:0	4	]
op	20:74	0:0	4	]
op	20:76	0:0	4	+
water	21:30	0:0	4	(
water	21:31	0:0	4	s
op	21:32	0:0	4	->
water	21:34	0:0	4	y
op	21:36	0:0	4	>>
water	21:39	0:0	4	vsub
water	21:43	0:0	4	)
op	21:45	0:0	4	*
water	21:47	0:0	4	frame
op	21:52	0:0	4	->
water	21:54	0:0	4	linesize
op	21:62	0:0	4	[
water	21:63	0:0	4	planes
op	21:69	0:0	4	[
water	21:70	0:0	4	i
op	21:71	0:0	4	]
op	21:72	0:0	4	]
decl	22:8	24:98	4	ptrdiff_t	req_end
op	22:28	0:0	4	=
water	22:30	0:0	4	(
water	22:31	0:0	4	(
water	22:32	0:0	4	s
op	22:33	0:0	4	->
water	22:35	0:0	4	w
op	22:37	0:0	4	-
water	22:39	0:0	4	s
op	22:40	0:0	4	->
water	22:42	0:0	4	x
op	22:44	0:0	4	-
water	22:46	0:0	4	frame
op	22:51	0:0	4	->
water	22:53	0:0	4	width
water	22:58	0:0	4	)
op	22:60	0:0	4	>>
water	22:63	0:0	4	hsub
water	22:67	0:0	4	)
op	22:69	0:0	4	*
water	23:30	0:0	4	s
op	23:31	0:0	4	->
water	23:33	0:0	4	draw
op	23:37	0:0	4	.
water	23:38	0:0	4	pixelstep
op	23:47	0:0	4	[
water	23:48	0:0	4	planes
op	23:54	0:0	4	[
water	23:55	0:0	4	i
op	23:56	0:0	4	]
op	23:57	0:0	4	]
op	23:59	0:0	4	+
water	24:30	0:0	4	(
water	24:31	0:0	4	(
water	24:32	0:0	4	s
op	24:33	0:0	4	->
water	24:35	0:0	4	h
op	24:37	0:0	4	-
water	24:39	0:0	4	s
op	24:40	0:0	4	->
water	24:42	0:0	4	y
op	24:44	0:0	4	-
water	24:46	0:0	4	frame
op	24:51	0:0	4	->
water	24:53	0:0	4	height
water	24:59	0:0	4	)
op	24:61	0:0	4	>>
water	24:64	0:0	4	vsub
water	24:68	0:0	4	)
op	24:70	0:0	4	*
water	24:72	0:0	4	frame
op	24:77	0:0	4	->
water	24:79	0:0	4	linesize
op	24:87	0:0	4	[
water	24:88	0:0	4	planes
op	24:94	0:0	4	[
water	24:95	0:0	4	i
op	24:96	0:0	4	]
op	24:97	0:0	4	]
if	25:8	26:20	4	(frame -> linesize [ planes [ i ] ] < ( s -> w >> hsub ) * s -> draw . pixelstep [ planes [ i ] ])
cond	25:12	25:85	5	frame -> linesize [ planes [ i ] ] < ( s -> w >> hsub ) * s -> draw . pixelstep [ planes [ i ] ]
water	25:12	0:0	6	frame
op	25:17	0:0	6	->
water	25:19	0:0	6	linesize
op	25:27	0:0	6	[
water	25:28	0:0	6	planes
op	25:34	0:0	6	[
water	25:35	0:0	6	i
op	25:36	0:0	6	]
op	25:37	0:0	6	]
op	25:39	0:0	6	<
water	25:41	0:0	6	(
water	25:42	0:0	6	s
op	25:43	0:0	6	->
water	25:45	0:0	6	w
op	25:47	0:0	6	>>
water	25:50	0:0	6	hsub
water	25:54	0:0	6	)
op	25:56	0:0	6	*
water	25:58	0:0	6	s
op	25:59	0:0	6	->
water	25:61	0:0	6	draw
op	25:65	0:0	6	.
water	25:66	0:0	6	pixelstep
op	25:75	0:0	6	[
water	25:76	0:0	6	planes
op	25:82	0:0	6	[
water	25:83	0:0	6	i
op	25:84	0:0	6	]
op	25:85	0:0	6	]
stmts	26:12	26:20	5	
return	26:12	26:20	6	1
water	26:19	0:0	7	1
if	27:8	29:20	4	(start - buf -> data < req_start || ( buf -> data + buf -> size ) - end < req_end)
cond	27:12	28:44	5	start - buf -> data < req_start || ( buf -> data + buf -> size ) - end < req_end
water	27:12	0:0	6	start
op	27:18	0:0	6	-
water	27:20	0:0	6	buf
op	27:23	0:0	6	->
water	27:25	0:0	6	data
op	27:30	0:0	6	<
water	27:32	0:0	6	req_start
op	27:42	0:0	6	||
water	28:12	0:0	6	(
water	28:13	0:0	6	buf
op	28:16	0:0	6	->
water	28:18	0:0	6	data
op	28:23	0:0	6	+
water	28:25	0:0	6	buf
op	28:28	0:0	6	->
water	28:30	0:0	6	size
water	28:34	0:0	6	)
op	28:36	0:0	6	-
water	28:38	0:0	6	end
op	28:42	0:0	6	<
water	28:44	0:0	6	req_end
stmts	29:12	29:20	5	
return	29:12	29:20	6	1
water	29:19	0:0	7	1
for	30:8	40:8	4	(j = 0 ;j <FF_ARRAY_ELEMS (planes ) && planes [ j ] >= 0;j ++)
forinit	30:13	30:18	5	j = 0 ;
water	30:13	0:0	6	j
op	30:15	0:0	6	=
water	30:17	0:0	6	0
water	30:18	0:0	6	;
cond	30:20	30:63	5	j <FF_ARRAY_ELEMS (planes ) && planes [ j ] >= 0
water	30:20	0:0	6	j
op	30:22	0:0	6	<
call	30:24	30:45	6	FF_ARRAY_ELEMS
arg	30:39	30:45	7	planes
water	30:39	0:0	8	planes
op	30:47	0:0	6	&&
water	30:50	0:0	6	planes
op	30:56	0:0	6	[
water	30:57	0:0	6	j
op	30:58	0:0	6	]
op	30:60	0:0	6	>=
water	30:63	0:0	6	0
forexpr	30:66	30:67	5	j ++
water	30:66	0:0	6	j
op	30:67	0:0	6	++
stmts	30:71	40:8	5	
water	30:71	0:0	6	{
decl	31:12	31:47	6	int	vsub1
op	31:22	0:0	6	=
water	31:24	0:0	6	s
op	31:25	0:0	6	->
water	31:27	0:0	6	draw
op	31:31	0:0	6	.
water	31:32	0:0	6	vsub
op	31:36	0:0	6	[
water	31:37	0:0	6	planes
op	31:43	0:0	6	[
water	31:44	0:0	6	j
op	31:45	0:0	6	]
op	31:46	0:0	6	]
decl	32:12	32:52	6	uint8_t	*start1
op	32:28	0:0	6	=
water	32:30	0:0	6	frame
op	32:35	0:0	6	->
water	32:37	0:0	6	data
op	32:41	0:0	6	[
water	32:42	0:0	6	planes
op	32:48	0:0	6	[
water	32:49	0:0	6	j
op	32:50	0:0	6	]
op	32:51	0:0	6	]
decl	33:12	34:65	6	uint8_t	*end1
op	33:28	0:0	6	=
water	33:30	0:0	6	start1
op	33:37	0:0	6	+
water	33:39	0:0	6	(
water	33:40	0:0	6	frame
op	33:45	0:0	6	->
water	33:47	0:0	6	height
op	33:54	0:0	6	>>
water	33:57	0:0	6	vsub1
water	33:62	0:0	6	)
op	33:64	0:0	6	*
water	34:39	0:0	6	frame
op	34:44	0:0	6	->
water	34:46	0:0	6	linesize
op	34:54	0:0	6	[
water	34:55	0:0	6	planes
op	34:61	0:0	6	[
water	34:62	0:0	6	j
op	34:63	0:0	6	]
op	34:64	0:0	6	]
if	35:12	36:24	6	(i == j)
cond	35:16	35:21	7	i == j
water	35:16	0:0	8	i
op	35:18	0:0	8	==
water	35:21	0:0	8	j
stmts	36:16	36:24	7	
continue	36:16	36:24	8	
if	37:12	39:24	6	(FFSIGN (start - end1 ) !=FFSIGN (start - end1 - req_start ) ||FFSIGN (end - start1 ) !=FFSIGN (end - start1 + req_end ))
cond	37:16	38:69	7	FFSIGN (start - end1 ) !=FFSIGN (start - end1 - req_start ) ||FFSIGN (end - start1 ) !=FFSIGN (end - start1 + req_end )
call	37:16	37:35	8	FFSIGN
arg	37:23	37:35	9	start-end1
water	37:23	0:0	10	start
op	37:29	0:0	10	-
water	37:31	0:0	10	end1
op	37:37	0:0	8	!=
call	37:40	37:71	8	FFSIGN
arg	37:47	37:71	9	start-end1-req_start
water	37:47	0:0	10	start
op	37:53	0:0	10	-
water	37:55	0:0	10	end1
op	37:60	0:0	10	-
water	37:62	0:0	10	req_start
op	37:73	0:0	8	||
call	38:16	38:35	8	FFSIGN
arg	38:23	38:35	9	end-start1
water	38:23	0:0	10	end
op	38:27	0:0	10	-
water	38:29	0:0	10	start1
op	38:37	0:0	8	!=
call	38:40	38:69	8	FFSIGN
arg	38:47	38:69	9	end-start1+req_end
water	38:47	0:0	10	end
op	38:51	0:0	10	-
water	38:53	0:0	10	start1
op	38:60	0:0	10	+
water	38:62	0:0	10	req_end
stmts	39:16	39:24	7	
return	39:16	39:24	8	1
water	39:23	0:0	9	1
water	40:8	0:0	6	}
water	41:4	0:0	4	}
return	42:4	42:12	2	0
water	42:11	0:0	3	0
