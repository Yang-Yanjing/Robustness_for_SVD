func	1:0	127:0	0	static void	rtsp_cmd_setup
params	1:26	0:0	1	
param	1:27	1:41	2	HTTPContext *	c
param	1:43	1:58	2	const char *	url
param	2:27	2:47	2	RTSPMessageHeader *	h
stmnts	0:0	126:30	1	
decl	4:4	4:26	2	FFServerStream	*stream
decl	5:4	5:41	2	int	stream_index
water	5:20	0:0	2	,
decl	5:4	5:41	2	int	rtp_port
water	5:30	0:0	2	,
decl	5:4	5:41	2	int	rtcp_port
decl	6:4	6:18	2	char	buf[1024]
decl	7:4	7:20	2	char	path1[1024]
decl	8:4	8:20	2	const char	*path
decl	9:4	9:22	2	HTTPContext	*rtp_c
decl	10:4	10:26	2	RTSPTransportField	*th
decl	11:4	11:32	2	struct sockaddr_in	dest_addr
decl	12:4	12:31	2	RTSPActionServerSetup	setup
call	14:4	14:75	2	av_url_split
arg	14:17	14:21	3	NULL
water	14:17	0:0	4	NULL
arg	14:23	14:24	3	0
water	14:23	0:0	4	0
arg	14:26	14:30	3	NULL
water	14:26	0:0	4	NULL
arg	14:32	14:33	3	0
water	14:32	0:0	4	0
arg	14:35	14:39	3	NULL
water	14:35	0:0	4	NULL
arg	14:41	14:42	3	0
water	14:41	0:0	4	0
arg	14:44	14:48	3	NULL
water	14:44	0:0	4	NULL
arg	14:50	14:55	3	path1
water	14:50	0:0	4	path1
arg	14:57	14:70	3	sizeof(path1)
op	14:57	0:0	4	sizeof
water	14:63	0:0	4	(
water	14:64	0:0	4	path1
water	14:69	0:0	4	)
arg	14:72	14:75	3	url
water	14:72	0:0	4	url
water	14:76	0:0	2	;
water	15:4	0:0	2	path
op	15:9	0:0	2	=
water	15:11	0:0	2	path1
water	15:16	0:0	2	;
if	16:4	17:14	2	(* path == '/')
cond	16:8	16:17	3	* path == '/'
op	16:8	0:0	4	*
water	16:9	0:0	4	path
op	16:14	0:0	4	==
water	16:17	0:0	4	'/'
stmts	17:8	17:14	3	
water	17:8	0:0	4	path
op	17:12	0:0	4	++
water	17:14	0:0	4	;
for	19:4	40:4	2	(stream = config . first_stream ;stream;stream = stream -> next)
forinit	19:8	19:36	3	stream = config . first_stream ;
water	19:8	0:0	4	stream
op	19:15	0:0	4	=
water	19:17	0:0	4	config
op	19:23	0:0	4	.
water	19:24	0:0	4	first_stream
water	19:36	0:0	4	;
cond	19:38	19:38	3	stream
water	19:38	0:0	4	stream
forexpr	19:46	19:63	3	stream = stream -> next
water	19:46	0:0	4	stream
op	19:53	0:0	4	=
water	19:55	0:0	4	stream
op	19:61	0:0	4	->
water	19:63	0:0	4	next
stmts	19:69	40:4	3	
water	19:69	0:0	4	{
if	20:8	23:8	4	(stream -> is_feed || ! stream -> fmt ||strcmp (stream -> fmt -> name ,"rtp" ))
cond	20:12	21:43	5	stream -> is_feed || ! stream -> fmt ||strcmp (stream -> fmt -> name ,"rtp" )
water	20:12	0:0	6	stream
op	20:18	0:0	6	->
water	20:20	0:0	6	is_feed
op	20:28	0:0	6	||
op	20:31	0:0	6	!
water	20:32	0:0	6	stream
op	20:38	0:0	6	->
water	20:40	0:0	6	fmt
op	20:44	0:0	6	||
call	21:12	21:43	6	strcmp
arg	21:19	21:36	7	stream->fmt->name
water	21:19	0:0	8	stream
op	21:25	0:0	8	->
water	21:27	0:0	8	fmt
op	21:30	0:0	8	->
water	21:32	0:0	8	name
arg	21:38	21:43	7	"rtp"
water	21:38	0:0	8	"rtp"
stmts	21:46	23:8	5	
water	21:46	0:0	6	{
continue	22:12	22:20	6	
water	23:8	0:0	6	}
if	25:8	32:8	4	(!strcmp (path ,stream -> filename ))
cond	25:12	25:42	5	!strcmp (path ,stream -> filename )
op	25:12	0:0	6	!
call	25:13	25:42	6	strcmp
arg	25:20	25:24	7	path
water	25:20	0:0	8	path
arg	25:26	25:42	7	stream->filename
water	25:26	0:0	8	stream
op	25:32	0:0	8	->
water	25:34	0:0	8	filename
stmts	25:45	32:8	5	
water	25:45	0:0	6	{
if	26:12	29:12	6	(stream -> nb_streams != 1)
cond	26:16	26:38	7	stream -> nb_streams != 1
water	26:16	0:0	8	stream
op	26:22	0:0	8	->
water	26:24	0:0	8	nb_streams
op	26:35	0:0	8	!=
water	26:38	0:0	8	1
stmts	26:41	29:12	7	
water	26:41	0:0	8	{
call	27:16	27:57	8	rtsp_reply_error
arg	27:33	27:34	9	c
water	27:33	0:0	10	c
arg	27:36	27:57	9	RTSP_STATUS_AGGREGATE
water	27:36	0:0	10	RTSP_STATUS_AGGREGATE
water	27:58	0:0	8	;
return	28:16	28:22	8	
water	29:12	0:0	8	}
water	30:12	0:0	6	stream_index
op	30:25	0:0	6	=
water	30:27	0:0	6	0
water	30:28	0:0	6	;
goto	31:12	31:22	6	found
water	31:17	0:0	7	found
water	32:8	0:0	6	}
for	33:8	39:8	4	(stream_index = 0 ;stream_index < stream -> nb_streams;stream_index ++)
forinit	33:12	33:28	5	stream_index = 0 ;
water	33:12	0:0	6	stream_index
op	33:25	0:0	6	=
water	33:27	0:0	6	0
water	33:28	0:0	6	;
cond	33:30	33:53	5	stream_index < stream -> nb_streams
water	33:30	0:0	6	stream_index
op	33:43	0:0	6	<
water	33:45	0:0	6	stream
op	33:51	0:0	6	->
water	33:53	0:0	6	nb_streams
forexpr	34:12	34:24	5	stream_index ++
water	34:12	0:0	6	stream_index
op	34:24	0:0	6	++
stmts	34:28	39:8	5	
water	34:28	0:0	6	{
call	35:12	36:51	6	snprintf
arg	35:21	35:24	7	buf
water	35:21	0:0	8	buf
arg	35:26	35:37	7	sizeof(buf)
op	35:26	0:0	8	sizeof
water	35:32	0:0	8	(
water	35:33	0:0	8	buf
water	35:36	0:0	8	)
arg	35:39	35:55	7	"%s/streamid=%d"
water	35:39	0:0	8	"%s/streamid=%d"
arg	36:21	36:37	7	stream->filename
water	36:21	0:0	8	stream
op	36:27	0:0	8	->
water	36:29	0:0	8	filename
arg	36:39	36:51	7	stream_index
water	36:39	0:0	8	stream_index
water	36:52	0:0	6	;
if	37:12	38:26	6	(!strcmp (path ,buf ))
cond	37:16	37:33	7	!strcmp (path ,buf )
op	37:16	0:0	8	!
call	37:17	37:33	8	strcmp
arg	37:24	37:28	9	path
water	37:24	0:0	10	path
arg	37:30	37:33	9	buf
water	37:30	0:0	10	buf
stmts	38:16	38:26	7	
goto	38:16	38:26	8	found
water	38:21	0:0	9	found
water	39:8	0:0	6	}
water	40:4	0:0	4	}
call	42:4	42:43	2	rtsp_reply_error
arg	42:21	42:22	3	c
water	42:21	0:0	4	c
arg	42:24	42:43	3	RTSP_STATUS_SERVICE
water	42:24	0:0	4	RTSP_STATUS_SERVICE
water	42:44	0:0	2	;
return	43:4	43:10	2	
label	44:1	44:6	2	found :
if	46:4	51:4	2	(h -> session_id [ 0 ] == '\0')
cond	46:8	46:28	3	h -> session_id [ 0 ] == '\0'
water	46:8	0:0	4	h
op	46:9	0:0	4	->
water	46:11	0:0	4	session_id
op	46:21	0:0	4	[
water	46:22	0:0	4	0
op	46:23	0:0	4	]
op	46:25	0:0	4	==
water	46:28	0:0	4	'\0'
stmts	46:34	51:4	3	
water	46:34	0:0	4	{
water	47:8	0:0	4	unsigned
water	47:17	0:0	4	random0
op	47:25	0:0	4	=
call	47:27	47:51	4	av_lfg_get
arg	47:38	47:51	5	&random_state
op	47:38	0:0	6	&
water	47:39	0:0	6	random_state
water	47:52	0:0	4	;
water	48:8	0:0	4	unsigned
water	48:17	0:0	4	random1
op	48:25	0:0	4	=
call	48:27	48:51	4	av_lfg_get
arg	48:38	48:51	5	&random_state
op	48:38	0:0	6	&
water	48:39	0:0	6	random_state
water	48:52	0:0	4	;
call	49:8	50:33	4	snprintf
arg	49:17	49:30	5	h->session_id
water	49:17	0:0	6	h
op	49:18	0:0	6	->
water	49:20	0:0	6	session_id
arg	49:32	49:53	5	sizeof(h->session_id)
op	49:32	0:0	6	sizeof
water	49:38	0:0	6	(
water	49:39	0:0	6	h
op	49:40	0:0	6	->
water	49:42	0:0	6	session_id
water	49:52	0:0	6	)
arg	49:55	49:65	5	"%08x%08x"
water	49:55	0:0	6	"%08x%08x"
arg	50:17	50:24	5	random0
water	50:17	0:0	6	random0
arg	50:26	50:33	5	random1
water	50:26	0:0	6	random1
water	50:34	0:0	4	;
water	51:4	0:0	4	}
water	53:4	0:0	2	rtp_c
op	53:10	0:0	2	=
call	53:12	53:42	2	find_rtp_session
arg	53:29	53:42	3	h->session_id
water	53:29	0:0	4	h
op	53:30	0:0	4	->
water	53:32	0:0	4	session_id
water	53:43	0:0	2	;
if	54:4	75:4	2	(! rtp_c)
cond	54:8	54:9	3	! rtp_c
op	54:8	0:0	4	!
water	54:9	0:0	4	rtp_c
stmts	54:16	75:4	3	
water	54:16	0:0	4	{
water	56:8	0:0	4	th
op	56:11	0:0	4	=
call	56:13	56:55	4	find_transport
arg	56:28	56:29	5	h
water	56:28	0:0	6	h
arg	56:31	56:55	5	RTSP_LOWER_TRANSPORT_UDP
water	56:31	0:0	6	RTSP_LOWER_TRANSPORT_UDP
water	56:56	0:0	4	;
if	57:8	63:8	4	(! th)
cond	57:12	57:13	5	! th
op	57:12	0:0	6	!
water	57:13	0:0	6	th
stmts	57:17	63:8	5	
water	57:17	0:0	6	{
water	58:12	0:0	6	th
op	58:15	0:0	6	=
call	58:17	58:59	6	find_transport
arg	58:32	58:33	7	h
water	58:32	0:0	8	h
arg	58:35	58:59	7	RTSP_LOWER_TRANSPORT_TCP
water	58:35	0:0	8	RTSP_LOWER_TRANSPORT_TCP
water	58:60	0:0	6	;
if	59:12	62:12	6	(! th)
cond	59:16	59:17	7	! th
op	59:16	0:0	8	!
water	59:17	0:0	8	th
stmts	59:21	62:12	7	
water	59:21	0:0	8	{
call	60:16	60:57	8	rtsp_reply_error
arg	60:33	60:34	9	c
water	60:33	0:0	10	c
arg	60:36	60:57	9	RTSP_STATUS_TRANSPORT
water	60:36	0:0	10	RTSP_STATUS_TRANSPORT
water	60:58	0:0	8	;
return	61:16	61:22	8	
water	62:12	0:0	8	}
water	63:8	0:0	6	}
water	64:8	0:0	4	rtp_c
op	64:14	0:0	4	=
call	64:16	65:54	4	rtp_new_connection
arg	64:35	64:48	5	&c->from_addr
op	64:35	0:0	6	&
water	64:36	0:0	6	c
op	64:37	0:0	6	->
water	64:39	0:0	6	from_addr
arg	64:50	64:56	5	stream
water	64:50	0:0	6	stream
arg	64:58	64:71	5	h->session_id
water	64:58	0:0	6	h
op	64:59	0:0	6	->
water	64:61	0:0	6	session_id
arg	65:35	65:54	5	th->lower_transport
water	65:35	0:0	6	th
op	65:37	0:0	6	->
water	65:39	0:0	6	lower_transport
water	65:55	0:0	4	;
if	66:8	69:8	4	(! rtp_c)
cond	66:12	66:13	5	! rtp_c
op	66:12	0:0	6	!
water	66:13	0:0	6	rtp_c
stmts	66:20	69:8	5	
water	66:20	0:0	6	{
call	67:12	67:53	6	rtsp_reply_error
arg	67:29	67:30	7	c
water	67:29	0:0	8	c
arg	67:32	67:53	7	RTSP_STATUS_BANDWIDTH
water	67:32	0:0	8	RTSP_STATUS_BANDWIDTH
water	67:54	0:0	6	;
return	68:12	68:18	6	
water	69:8	0:0	6	}
if	71:8	74:8	4	(open_input_stream (rtp_c ,"" ) < 0)
cond	71:12	71:43	5	open_input_stream (rtp_c ,"" ) < 0
call	71:12	71:39	6	open_input_stream
arg	71:30	71:35	7	rtp_c
water	71:30	0:0	8	rtp_c
arg	71:37	71:39	7	""
water	71:37	0:0	8	""
op	71:41	0:0	6	<
water	71:43	0:0	6	0
stmts	71:46	74:8	5	
water	71:46	0:0	6	{
call	72:12	72:52	6	rtsp_reply_error
arg	72:29	72:30	7	c
water	72:29	0:0	8	c
arg	72:32	72:52	7	RTSP_STATUS_INTERNAL
water	72:32	0:0	8	RTSP_STATUS_INTERNAL
water	72:53	0:0	6	;
return	73:12	73:18	6	
water	74:8	0:0	6	}
water	75:4	0:0	4	}
if	78:4	81:4	2	(rtp_c -> stream != stream)
cond	78:8	78:25	3	rtp_c -> stream != stream
water	78:8	0:0	4	rtp_c
op	78:13	0:0	4	->
water	78:15	0:0	4	stream
op	78:22	0:0	4	!=
water	78:25	0:0	4	stream
stmts	78:33	81:4	3	
water	78:33	0:0	4	{
call	79:8	79:47	4	rtsp_reply_error
arg	79:25	79:26	5	c
water	79:25	0:0	6	c
arg	79:28	79:47	5	RTSP_STATUS_SERVICE
water	79:28	0:0	6	RTSP_STATUS_SERVICE
water	79:48	0:0	4	;
return	80:8	80:14	4	
water	81:4	0:0	4	}
if	83:4	86:4	2	(rtp_c -> rtp_ctx [ stream_index ])
cond	83:8	83:35	3	rtp_c -> rtp_ctx [ stream_index ]
water	83:8	0:0	4	rtp_c
op	83:13	0:0	4	->
water	83:15	0:0	4	rtp_ctx
op	83:22	0:0	4	[
water	83:23	0:0	4	stream_index
op	83:35	0:0	4	]
stmts	83:38	86:4	3	
water	83:38	0:0	4	{
call	84:8	84:45	4	rtsp_reply_error
arg	84:25	84:26	5	c
water	84:25	0:0	6	c
arg	84:28	84:45	5	RTSP_STATUS_STATE
water	84:28	0:0	6	RTSP_STATUS_STATE
water	84:46	0:0	4	;
return	85:8	85:14	4	
water	86:4	0:0	4	}
water	88:4	0:0	2	th
op	88:7	0:0	2	=
call	88:9	88:46	2	find_transport
arg	88:24	88:25	3	h
water	88:24	0:0	4	h
arg	88:27	88:46	3	rtp_c->rtp_protocol
water	88:27	0:0	4	rtp_c
op	88:32	0:0	4	->
water	88:34	0:0	4	rtp_protocol
water	88:47	0:0	2	;
if	89:4	93:4	2	(! th || ( th -> lower_transport == RTSP_LOWER_TRANSPORT_UDP && th -> client_port_min <= 0 ))
cond	89:8	90:40	3	! th || ( th -> lower_transport == RTSP_LOWER_TRANSPORT_UDP && th -> client_port_min <= 0 )
op	89:8	0:0	4	!
water	89:9	0:0	4	th
op	89:12	0:0	4	||
water	89:15	0:0	4	(
water	89:16	0:0	4	th
op	89:18	0:0	4	->
water	89:20	0:0	4	lower_transport
op	89:36	0:0	4	==
water	89:39	0:0	4	RTSP_LOWER_TRANSPORT_UDP
op	89:64	0:0	4	&&
water	90:16	0:0	4	th
op	90:18	0:0	4	->
water	90:20	0:0	4	client_port_min
op	90:36	0:0	4	<=
water	90:39	0:0	4	0
water	90:40	0:0	4	)
stmts	90:43	93:4	3	
water	90:43	0:0	4	{
call	91:8	91:49	4	rtsp_reply_error
arg	91:25	91:26	5	c
water	91:25	0:0	6	c
arg	91:28	91:49	5	RTSP_STATUS_TRANSPORT
water	91:28	0:0	6	RTSP_STATUS_TRANSPORT
water	91:50	0:0	4	;
return	92:8	92:14	4	
water	93:4	0:0	4	}
water	95:4	0:0	2	setup
op	95:9	0:0	2	.
water	95:10	0:0	2	transport_option
op	95:26	0:0	2	[
water	95:27	0:0	2	0
op	95:28	0:0	2	]
op	95:30	0:0	2	=
water	95:32	0:0	2	'\0'
water	95:36	0:0	2	;
water	96:4	0:0	2	dest_addr
op	96:14	0:0	2	=
water	96:16	0:0	2	rtp_c
op	96:21	0:0	2	->
water	96:23	0:0	2	from_addr
water	96:32	0:0	2	;
water	97:4	0:0	2	dest_addr
op	97:13	0:0	2	.
water	97:14	0:0	2	sin_port
op	97:23	0:0	2	=
call	97:25	97:50	2	htons
arg	97:31	97:50	3	th->client_port_min
water	97:31	0:0	4	th
op	97:33	0:0	4	->
water	97:35	0:0	4	client_port_min
water	97:51	0:0	2	;
if	99:4	102:4	2	(rtp_new_av_stream (rtp_c ,stream_index ,& dest_addr ,c ) < 0)
cond	99:8	99:64	3	rtp_new_av_stream (rtp_c ,stream_index ,& dest_addr ,c ) < 0
call	99:8	99:60	4	rtp_new_av_stream
arg	99:26	99:31	5	rtp_c
water	99:26	0:0	6	rtp_c
arg	99:33	99:45	5	stream_index
water	99:33	0:0	6	stream_index
arg	99:47	99:57	5	&dest_addr
op	99:47	0:0	6	&
water	99:48	0:0	6	dest_addr
arg	99:59	99:60	5	c
water	99:59	0:0	6	c
op	99:62	0:0	4	<
water	99:64	0:0	4	0
stmts	99:67	102:4	3	
water	99:67	0:0	4	{
call	100:8	100:49	4	rtsp_reply_error
arg	100:25	100:26	5	c
water	100:25	0:0	6	c
arg	100:28	100:49	5	RTSP_STATUS_TRANSPORT
water	100:28	0:0	6	RTSP_STATUS_TRANSPORT
water	100:50	0:0	4	;
return	101:8	101:14	4	
water	102:4	0:0	4	}
call	104:4	104:39	2	rtsp_reply_header
arg	104:22	104:23	3	c
water	104:22	0:0	4	c
arg	104:25	104:39	3	RTSP_STATUS_OK
water	104:25	0:0	4	RTSP_STATUS_OK
water	104:40	0:0	2	;
call	106:4	106:59	2	avio_printf
arg	106:16	106:21	3	c->pb
water	106:16	0:0	4	c
op	106:17	0:0	4	->
water	106:19	0:0	4	pb
arg	106:23	106:40	3	"Session: %s\r\n"
water	106:23	0:0	4	"Session: %s\r\n"
arg	106:42	106:59	3	rtp_c->session_id
water	106:42	0:0	4	rtp_c
op	106:47	0:0	4	->
water	106:49	0:0	4	session_id
water	106:60	0:0	2	;
switch	107:4	122:4	2	(rtp_c -> rtp_protocol)
cond	107:11	107:18	3	rtp_c -> rtp_protocol
water	107:11	0:0	4	rtp_c
op	107:16	0:0	4	->
water	107:18	0:0	4	rtp_protocol
stmts	107:32	122:4	3	
water	107:32	0:0	4	{
label	108:4	108:33	4	case RTSP_LOWER_TRANSPORT_UDP :
water	109:8	0:0	4	rtp_port
op	109:17	0:0	4	=
call	109:19	109:77	4	ff_rtp_get_local_rtp_port
arg	109:45	109:77	5	rtp_c->rtp_handles[stream_index]
water	109:45	0:0	6	rtp_c
op	109:50	0:0	6	->
water	109:52	0:0	6	rtp_handles
op	109:63	0:0	6	[
water	109:64	0:0	6	stream_index
op	109:76	0:0	6	]
water	109:78	0:0	4	;
water	110:8	0:0	4	rtcp_port
op	110:18	0:0	4	=
call	110:20	110:79	4	ff_rtp_get_local_rtcp_port
arg	110:47	110:79	5	rtp_c->rtp_handles[stream_index]
water	110:47	0:0	6	rtp_c
op	110:52	0:0	6	->
water	110:54	0:0	6	rtp_handles
op	110:65	0:0	6	[
water	110:66	0:0	6	stream_index
op	110:78	0:0	6	]
water	110:80	0:0	4	;
call	111:8	114:39	4	avio_printf
arg	111:20	111:25	5	c->pb
water	111:20	0:0	6	c
op	111:21	0:0	6	->
water	111:23	0:0	6	pb
arg	111:27	112:57	5	"Transport: RTP/AVP/UDP;unicast;""client_port=%d-%d;server_port=%d-%d"
water	111:27	0:0	6	"Transport: RTP/AVP/UDP;unicast;"
water	112:20	0:0	6	"client_port=%d-%d;server_port=%d-%d"
arg	113:20	113:39	5	th->client_port_min
water	113:20	0:0	6	th
op	113:22	0:0	6	->
water	113:24	0:0	6	client_port_min
arg	113:41	113:60	5	th->client_port_max
water	113:41	0:0	6	th
op	113:43	0:0	6	->
water	113:45	0:0	6	client_port_max
arg	114:20	114:28	5	rtp_port
water	114:20	0:0	6	rtp_port
arg	114:30	114:39	5	rtcp_port
water	114:30	0:0	6	rtcp_port
water	114:40	0:0	4	;
break	115:8	115:13	4	
label	116:4	116:33	4	case RTSP_LOWER_TRANSPORT_TCP :
call	117:8	118:58	4	avio_printf
arg	117:20	117:25	5	c->pb
water	117:20	0:0	6	c
op	117:21	0:0	6	->
water	117:23	0:0	6	pb
arg	117:27	117:69	5	"Transport: RTP/AVP/TCP;interleaved=%d-%d"
water	117:27	0:0	6	"Transport: RTP/AVP/TCP;interleaved=%d-%d"
arg	118:20	118:36	5	stream_index*2
water	118:20	0:0	6	stream_index
op	118:33	0:0	6	*
water	118:35	0:0	6	2
arg	118:38	118:58	5	stream_index*2+1
water	118:38	0:0	6	stream_index
op	118:51	0:0	6	*
water	118:53	0:0	6	2
op	118:55	0:0	6	+
water	118:57	0:0	6	1
water	118:59	0:0	4	;
break	119:8	119:13	4	
label	120:4	120:11	4	default :
break	121:8	121:13	4	
water	122:4	0:0	4	}
if	123:4	124:57	2	(setup . transport_option [ 0 ] != '\0')
cond	123:8	123:37	3	setup . transport_option [ 0 ] != '\0'
water	123:8	0:0	4	setup
op	123:13	0:0	4	.
water	123:14	0:0	4	transport_option
op	123:30	0:0	4	[
water	123:31	0:0	4	0
op	123:32	0:0	4	]
op	123:34	0:0	4	!=
water	123:37	0:0	4	'\0'
stmts	124:8	124:57	3	
call	124:8	124:56	4	avio_printf
arg	124:20	124:25	5	c->pb
water	124:20	0:0	6	c
op	124:21	0:0	6	->
water	124:23	0:0	6	pb
arg	124:27	124:32	5	";%s"
water	124:27	0:0	6	";%s"
arg	124:34	124:56	5	setup.transport_option
water	124:34	0:0	6	setup
op	124:39	0:0	6	.
water	124:40	0:0	6	transport_option
water	124:57	0:0	4	;
call	125:4	125:29	2	avio_printf
arg	125:16	125:21	3	c->pb
water	125:16	0:0	4	c
op	125:17	0:0	4	->
water	125:19	0:0	4	pb
arg	125:23	125:29	3	"\r\n"
water	125:23	0:0	4	"\r\n"
water	125:30	0:0	2	;
call	126:4	126:29	2	avio_printf
arg	126:16	126:21	3	c->pb
water	126:16	0:0	4	c
op	126:17	0:0	4	->
water	126:19	0:0	4	pb
arg	126:23	126:29	3	"\r\n"
water	126:23	0:0	4	"\r\n"
water	126:30	0:0	2	;
