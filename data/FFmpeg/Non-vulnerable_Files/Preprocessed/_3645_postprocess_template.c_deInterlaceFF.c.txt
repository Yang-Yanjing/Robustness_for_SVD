func	1:19	65:0	0	RENAME	(deInterlaceFF)
params	1:40	0:0	1	
param	1:41	1:54	2	uint8_t	src[]
param	1:56	1:66	2	int	stride
param	1:68	1:80	2	uint8_t *	tmp
stmnts	4:4	63:4	1	
water	4:4	0:0	2	src
op	4:7	0:0	2	+=
water	4:10	0:0	2	stride
op	4:16	0:0	2	*
water	4:17	0:0	2	4
water	4:18	0:0	2	;
water	5:4	0:0	2	__asm__
water	5:12	0:0	2	volatile
water	5:20	0:0	2	(
water	6:8	0:0	2	"lea (%0, %1), %%"
water	6:26	0:0	2	REG_a
water	6:31	0:0	2	"                \n\t"
water	7:8	0:0	2	"lea (%%"
water	7:17	0:0	2	REG_a
water	7:22	0:0	2	", %1, 4), %%"
water	7:36	0:0	2	REG_d
water	7:41	0:0	2	"      \n\t"
water	8:8	0:0	2	"pxor %%mm7, %%mm7                      \n\t"
water	9:8	0:0	2	"movq (%2), %%mm0                       \n\t"
water	13:8	0:0	2	"movq "
water	14:8	0:0	2	"movq "
water	15:8	0:0	2	"movq "
water	16:8	0:0	2	"movq "
call	17:8	17:26	2	PAVGB
arg	17:14	17:19	3	%%mm3
op	17:14	0:0	4	%
op	17:15	0:0	4	%
water	17:16	0:0	4	mm3
arg	17:21	17:26	3	%%mm1
op	17:21	0:0	4	%
op	17:22	0:0	4	%
water	17:23	0:0	4	mm1
call	18:8	18:26	2	PAVGB
arg	18:14	18:19	3	%%mm4
op	18:14	0:0	4	%
op	18:15	0:0	4	%
water	18:16	0:0	4	mm4
arg	18:21	18:26	3	%%mm0
op	18:21	0:0	4	%
op	18:22	0:0	4	%
water	18:23	0:0	4	mm0
water	19:8	0:0	2	"movq %%mm0, %%mm3                      \n\t"
water	20:8	0:0	2	"punpcklbw %%mm7, %%mm0                 \n\t"
water	21:8	0:0	2	"punpckhbw %%mm7, %%mm3                 \n\t"
water	22:8	0:0	2	"movq %%mm1, %%mm4                      \n\t"
water	23:8	0:0	2	"punpcklbw %%mm7, %%mm1                 \n\t"
water	24:8	0:0	2	"punpckhbw %%mm7, %%mm4                 \n\t"
water	25:8	0:0	2	"psllw $2, %%mm1                        \n\t"
water	26:8	0:0	2	"psllw $2, %%mm4                        \n\t"
water	27:8	0:0	2	"psubw %%mm0, %%mm1                     \n\t"
water	28:8	0:0	2	"psubw %%mm3, %%mm4                     \n\t"
water	29:8	0:0	2	"movq %%mm2, %%mm5                      \n\t"
water	30:8	0:0	2	"movq %%mm2, %%mm0                      \n\t"
water	31:8	0:0	2	"punpcklbw %%mm7, %%mm2                 \n\t"
water	32:8	0:0	2	"punpckhbw %%mm7, %%mm5                 \n\t"
water	33:8	0:0	2	"paddw %%mm2, %%mm1                     \n\t"
water	34:8	0:0	2	"paddw %%mm5, %%mm4                     \n\t"
water	35:8	0:0	2	"psraw $2, %%mm1                        \n\t"
water	36:8	0:0	2	"psraw $2, %%mm4                        \n\t"
water	37:8	0:0	2	"packuswb %%mm4, %%mm1                  \n\t"
water	38:8	0:0	2	"movq %%mm1, "
call	40:0	40:69	2	DEINT_FF
arg	40:9	40:21	3	(%0)
water	40:9	0:0	4	(
op	40:10	0:0	4	%
water	40:11	0:0	4	0
water	40:12	0:0	4	)
arg	40:23	40:38	3	(%%REGa)
water	40:23	0:0	4	(
op	40:24	0:0	4	%
op	40:25	0:0	4	%
water	40:26	0:0	4	REGa
water	40:30	0:0	4	)
arg	40:40	40:52	3	(%%REGa,%1)
water	40:40	0:0	4	(
op	40:41	0:0	4	%
op	40:42	0:0	4	%
water	40:43	0:0	4	REGa
water	40:47	0:0	4	,
op	40:49	0:0	4	%
water	40:50	0:0	4	1
water	40:51	0:0	4	)
arg	40:54	40:69	3	(%%REGa,%1,2)
water	40:54	0:0	4	(
op	40:55	0:0	4	%
op	40:56	0:0	4	%
water	40:57	0:0	4	REGa
water	40:61	0:0	4	,
op	40:63	0:0	4	%
water	40:64	0:0	4	1
water	40:65	0:0	4	,
water	40:67	0:0	4	2
water	40:68	0:0	4	)
call	41:0	41:69	2	DEINT_FF
arg	41:9	41:21	3	(%%REGa,%1)
water	41:9	0:0	4	(
op	41:10	0:0	4	%
op	41:11	0:0	4	%
water	41:12	0:0	4	REGa
water	41:16	0:0	4	,
op	41:18	0:0	4	%
water	41:19	0:0	4	1
water	41:20	0:0	4	)
arg	41:23	41:38	3	(%%REGa,%1,2)
water	41:23	0:0	4	(
op	41:24	0:0	4	%
op	41:25	0:0	4	%
water	41:26	0:0	4	REGa
water	41:30	0:0	4	,
op	41:32	0:0	4	%
water	41:33	0:0	4	1
water	41:34	0:0	4	,
water	41:36	0:0	4	2
water	41:37	0:0	4	)
arg	41:40	41:52	3	(%0,%1,4)
water	41:40	0:0	4	(
op	41:41	0:0	4	%
water	41:42	0:0	4	0
water	41:43	0:0	4	,
op	41:45	0:0	4	%
water	41:46	0:0	4	1
water	41:47	0:0	4	,
water	41:49	0:0	4	4
water	41:50	0:0	4	)
arg	41:54	41:69	3	(%%REGd)
water	41:54	0:0	4	(
op	41:55	0:0	4	%
op	41:56	0:0	4	%
water	41:57	0:0	4	REGd
water	41:61	0:0	4	)
call	42:0	42:69	2	DEINT_FF
arg	42:9	42:21	3	(%0,%1,4)
water	42:9	0:0	4	(
op	42:10	0:0	4	%
water	42:11	0:0	4	0
water	42:12	0:0	4	,
op	42:14	0:0	4	%
water	42:15	0:0	4	1
water	42:16	0:0	4	,
water	42:18	0:0	4	4
water	42:19	0:0	4	)
arg	42:23	42:38	3	(%%REGd)
water	42:23	0:0	4	(
op	42:24	0:0	4	%
op	42:25	0:0	4	%
water	42:26	0:0	4	REGd
water	42:30	0:0	4	)
arg	42:40	42:52	3	(%%REGd,%1)
water	42:40	0:0	4	(
op	42:41	0:0	4	%
op	42:42	0:0	4	%
water	42:43	0:0	4	REGd
water	42:47	0:0	4	,
op	42:49	0:0	4	%
water	42:50	0:0	4	1
water	42:51	0:0	4	)
arg	42:54	42:69	3	(%%REGd,%1,2)
water	42:54	0:0	4	(
op	42:55	0:0	4	%
op	42:56	0:0	4	%
water	42:57	0:0	4	REGd
water	42:61	0:0	4	,
op	42:63	0:0	4	%
water	42:64	0:0	4	1
water	42:65	0:0	4	,
water	42:67	0:0	4	2
water	42:68	0:0	4	)
call	43:0	43:69	2	DEINT_FF
arg	43:9	43:21	3	(%%REGd,%1)
water	43:9	0:0	4	(
op	43:10	0:0	4	%
op	43:11	0:0	4	%
water	43:12	0:0	4	REGd
water	43:16	0:0	4	,
op	43:18	0:0	4	%
water	43:19	0:0	4	1
water	43:20	0:0	4	)
arg	43:23	43:38	3	(%%REGd,%1,2)
water	43:23	0:0	4	(
op	43:24	0:0	4	%
op	43:25	0:0	4	%
water	43:26	0:0	4	REGd
water	43:30	0:0	4	,
op	43:32	0:0	4	%
water	43:33	0:0	4	1
water	43:34	0:0	4	,
water	43:36	0:0	4	2
water	43:37	0:0	4	)
arg	43:40	43:52	3	(%0,%1,8)
water	43:40	0:0	4	(
op	43:41	0:0	4	%
water	43:42	0:0	4	0
water	43:43	0:0	4	,
op	43:45	0:0	4	%
water	43:46	0:0	4	1
water	43:47	0:0	4	,
water	43:49	0:0	4	8
water	43:50	0:0	4	)
arg	43:54	43:69	3	(%%REGd,%1,4)
water	43:54	0:0	4	(
op	43:55	0:0	4	%
op	43:56	0:0	4	%
water	43:57	0:0	4	REGd
water	43:61	0:0	4	,
op	43:63	0:0	4	%
water	43:64	0:0	4	1
water	43:65	0:0	4	,
water	43:67	0:0	4	4
water	43:68	0:0	4	)
water	44:8	0:0	2	"movq %%mm0, (%2)                       \n\t"
water	45:8	0:0	2	:
water	45:10	0:0	2	:
water	45:12	0:0	2	"r"
water	45:16	0:0	2	(
water	45:17	0:0	2	src
water	45:20	0:0	2	)
water	45:21	0:0	2	,
water	45:23	0:0	2	"r"
water	45:27	0:0	2	(
water	45:28	0:0	2	(
water	45:29	0:0	2	x86_reg
water	45:36	0:0	2	)
water	45:37	0:0	2	stride
water	45:43	0:0	2	)
water	45:44	0:0	2	,
water	45:46	0:0	2	"r"
water	45:49	0:0	2	(
water	45:50	0:0	2	tmp
water	45:53	0:0	2	)
water	46:8	0:0	2	:
water	46:10	0:0	2	"%"
water	46:13	0:0	2	REG_a
water	46:18	0:0	2	,
water	46:20	0:0	2	"%"
water	46:23	0:0	2	REG_d
water	47:4	0:0	2	)
water	47:5	0:0	2	;
decl	49:4	49:9	2	int	x
water	50:4	0:0	2	src
op	50:7	0:0	2	+=
water	50:10	0:0	2	stride
op	50:16	0:0	2	*
water	50:17	0:0	2	4
water	50:18	0:0	2	;
for	51:4	63:4	2	(x = 0 ;x < 8;x ++)
forinit	51:8	51:11	3	x = 0 ;
water	51:8	0:0	4	x
op	51:9	0:0	4	=
water	51:10	0:0	4	0
water	51:11	0:0	4	;
cond	51:13	51:15	3	x < 8
water	51:13	0:0	4	x
op	51:14	0:0	4	<
water	51:15	0:0	4	8
forexpr	51:18	51:19	3	x ++
water	51:18	0:0	4	x
op	51:19	0:0	4	++
stmts	51:22	63:4	3	
water	51:22	0:0	4	{
decl	52:8	52:22	4	int	t1
op	52:14	0:0	4	=
water	52:16	0:0	4	tmp
op	52:19	0:0	4	[
water	52:20	0:0	4	x
op	52:21	0:0	4	]
decl	53:8	53:29	4	int	t2
op	53:14	0:0	4	=
water	53:16	0:0	4	src
op	53:19	0:0	4	[
water	53:20	0:0	4	stride
op	53:26	0:0	4	*
water	53:27	0:0	4	1
op	53:28	0:0	4	]
water	54:8	0:0	4	src
op	54:11	0:0	4	[
water	54:12	0:0	4	stride
op	54:18	0:0	4	*
water	54:19	0:0	4	1
op	54:20	0:0	4	]
op	54:21	0:0	4	=
call	54:23	54:108	4	av_clip_uint8
arg	54:37	54:108	5	(-t1+4*src[stride*0]+2*t2+4*src[stride*2]-src[stride*3]+4)>>3
water	54:37	0:0	6	(
op	54:38	0:0	6	-
water	54:39	0:0	6	t1
op	54:42	0:0	6	+
water	54:44	0:0	6	4
op	54:45	0:0	6	*
water	54:46	0:0	6	src
op	54:49	0:0	6	[
water	54:50	0:0	6	stride
op	54:56	0:0	6	*
water	54:57	0:0	6	0
op	54:58	0:0	6	]
op	54:60	0:0	6	+
water	54:62	0:0	6	2
op	54:63	0:0	6	*
water	54:64	0:0	6	t2
op	54:67	0:0	6	+
water	54:69	0:0	6	4
op	54:70	0:0	6	*
water	54:71	0:0	6	src
op	54:74	0:0	6	[
water	54:75	0:0	6	stride
op	54:81	0:0	6	*
water	54:82	0:0	6	2
op	54:83	0:0	6	]
op	54:85	0:0	6	-
water	54:87	0:0	6	src
op	54:90	0:0	6	[
water	54:91	0:0	6	stride
op	54:97	0:0	6	*
water	54:98	0:0	6	3
op	54:99	0:0	6	]
op	54:101	0:0	6	+
water	54:103	0:0	6	4
water	54:104	0:0	6	)
op	54:105	0:0	6	>>
water	54:107	0:0	6	3
water	54:109	0:0	4	;
water	55:8	0:0	4	t1
op	55:10	0:0	4	=
water	55:12	0:0	4	src
op	55:15	0:0	4	[
water	55:16	0:0	4	stride
op	55:22	0:0	4	*
water	55:23	0:0	4	4
op	55:24	0:0	4	]
water	55:25	0:0	4	;
water	56:8	0:0	4	src
op	56:11	0:0	4	[
water	56:12	0:0	4	stride
op	56:18	0:0	4	*
water	56:19	0:0	4	3
op	56:20	0:0	4	]
op	56:21	0:0	4	=
call	56:23	56:108	4	av_clip_uint8
arg	56:37	56:108	5	(-t2+4*src[stride*2]+2*t1+4*src[stride*4]-src[stride*5]+4)>>3
water	56:37	0:0	6	(
op	56:38	0:0	6	-
water	56:39	0:0	6	t2
op	56:42	0:0	6	+
water	56:44	0:0	6	4
op	56:45	0:0	6	*
water	56:46	0:0	6	src
op	56:49	0:0	6	[
water	56:50	0:0	6	stride
op	56:56	0:0	6	*
water	56:57	0:0	6	2
op	56:58	0:0	6	]
op	56:60	0:0	6	+
water	56:62	0:0	6	2
op	56:63	0:0	6	*
water	56:64	0:0	6	t1
op	56:67	0:0	6	+
water	56:69	0:0	6	4
op	56:70	0:0	6	*
water	56:71	0:0	6	src
op	56:74	0:0	6	[
water	56:75	0:0	6	stride
op	56:81	0:0	6	*
water	56:82	0:0	6	4
op	56:83	0:0	6	]
op	56:85	0:0	6	-
water	56:87	0:0	6	src
op	56:90	0:0	6	[
water	56:91	0:0	6	stride
op	56:97	0:0	6	*
water	56:98	0:0	6	5
op	56:99	0:0	6	]
op	56:101	0:0	6	+
water	56:103	0:0	6	4
water	56:104	0:0	6	)
op	56:105	0:0	6	>>
water	56:107	0:0	6	3
water	56:109	0:0	4	;
water	57:8	0:0	4	t2
op	57:10	0:0	4	=
water	57:12	0:0	4	src
op	57:15	0:0	4	[
water	57:16	0:0	4	stride
op	57:22	0:0	4	*
water	57:23	0:0	4	6
op	57:24	0:0	4	]
water	57:25	0:0	4	;
water	58:8	0:0	4	src
op	58:11	0:0	4	[
water	58:12	0:0	4	stride
op	58:18	0:0	4	*
water	58:19	0:0	4	5
op	58:20	0:0	4	]
op	58:21	0:0	4	=
call	58:23	58:108	4	av_clip_uint8
arg	58:37	58:108	5	(-t1+4*src[stride*4]+2*t2+4*src[stride*6]-src[stride*7]+4)>>3
water	58:37	0:0	6	(
op	58:38	0:0	6	-
water	58:39	0:0	6	t1
op	58:42	0:0	6	+
water	58:44	0:0	6	4
op	58:45	0:0	6	*
water	58:46	0:0	6	src
op	58:49	0:0	6	[
water	58:50	0:0	6	stride
op	58:56	0:0	6	*
water	58:57	0:0	6	4
op	58:58	0:0	6	]
op	58:60	0:0	6	+
water	58:62	0:0	6	2
op	58:63	0:0	6	*
water	58:64	0:0	6	t2
op	58:67	0:0	6	+
water	58:69	0:0	6	4
op	58:70	0:0	6	*
water	58:71	0:0	6	src
op	58:74	0:0	6	[
water	58:75	0:0	6	stride
op	58:81	0:0	6	*
water	58:82	0:0	6	6
op	58:83	0:0	6	]
op	58:85	0:0	6	-
water	58:87	0:0	6	src
op	58:90	0:0	6	[
water	58:91	0:0	6	stride
op	58:97	0:0	6	*
water	58:98	0:0	6	7
op	58:99	0:0	6	]
op	58:101	0:0	6	+
water	58:103	0:0	6	4
water	58:104	0:0	6	)
op	58:105	0:0	6	>>
water	58:107	0:0	6	3
water	58:109	0:0	4	;
water	59:8	0:0	4	t1
op	59:10	0:0	4	=
water	59:12	0:0	4	src
op	59:15	0:0	4	[
water	59:16	0:0	4	stride
op	59:22	0:0	4	*
water	59:23	0:0	4	8
op	59:24	0:0	4	]
water	59:25	0:0	4	;
water	60:8	0:0	4	src
op	60:11	0:0	4	[
water	60:12	0:0	4	stride
op	60:18	0:0	4	*
water	60:19	0:0	4	7
op	60:20	0:0	4	]
op	60:21	0:0	4	=
call	60:23	60:108	4	av_clip_uint8
arg	60:37	60:108	5	(-t2+4*src[stride*6]+2*t1+4*src[stride*8]-src[stride*9]+4)>>3
water	60:37	0:0	6	(
op	60:38	0:0	6	-
water	60:39	0:0	6	t2
op	60:42	0:0	6	+
water	60:44	0:0	6	4
op	60:45	0:0	6	*
water	60:46	0:0	6	src
op	60:49	0:0	6	[
water	60:50	0:0	6	stride
op	60:56	0:0	6	*
water	60:57	0:0	6	6
op	60:58	0:0	6	]
op	60:60	0:0	6	+
water	60:62	0:0	6	2
op	60:63	0:0	6	*
water	60:64	0:0	6	t1
op	60:67	0:0	6	+
water	60:69	0:0	6	4
op	60:70	0:0	6	*
water	60:71	0:0	6	src
op	60:74	0:0	6	[
water	60:75	0:0	6	stride
op	60:81	0:0	6	*
water	60:82	0:0	6	8
op	60:83	0:0	6	]
op	60:85	0:0	6	-
water	60:87	0:0	6	src
op	60:90	0:0	6	[
water	60:91	0:0	6	stride
op	60:97	0:0	6	*
water	60:98	0:0	6	9
op	60:99	0:0	6	]
op	60:101	0:0	6	+
water	60:103	0:0	6	4
water	60:104	0:0	6	)
op	60:105	0:0	6	>>
water	60:107	0:0	6	3
water	60:109	0:0	4	;
water	61:8	0:0	4	tmp
op	61:11	0:0	4	[
water	61:12	0:0	4	x
op	61:13	0:0	4	]
op	61:14	0:0	4	=
water	61:16	0:0	4	t1
water	61:18	0:0	4	;
water	62:8	0:0	4	src
op	62:11	0:0	4	++
water	62:13	0:0	4	;
water	63:4	0:0	4	}
