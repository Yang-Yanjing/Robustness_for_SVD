func	1:0	231:0	0	int	ff_rtsp_connect
params	1:19	0:0	1	
param	1:20	1:38	2	AVFormatContext *	s
stmnts	0:0	230:14	1	
decl	3:4	3:32	2	RTSPState	*rt
op	3:18	0:0	2	=
water	3:20	0:0	2	s
op	3:21	0:0	2	->
water	3:23	0:0	2	priv_data
decl	4:4	4:43	2	char	proto[128]
water	4:19	0:0	2	,
decl	4:4	4:43	2	char	host[1024]
water	4:31	0:0	2	,
decl	4:4	4:43	2	char	path[1024]
decl	5:4	5:44	2	char	tcpname[1024]
water	5:22	0:0	2	,
decl	5:4	5:44	2	char	cmd[2048]
water	5:33	0:0	2	,
decl	5:4	5:44	2	char	auth[128]
decl	6:4	6:40	2	const char	*lower_rtsp_proto
op	6:33	0:0	2	=
water	6:35	0:0	2	"tcp"
decl	7:4	7:25	2	int	port
water	7:12	0:0	2	,
decl	7:4	7:25	2	int	err
water	7:17	0:0	2	,
decl	7:4	7:25	2	int	tcp_fd
decl	8:4	8:52	2	RTSPMessageHeader	reply1
op	8:29	0:0	2	=
water	8:31	0:0	2	{
water	8:32	0:0	2	0
water	8:33	0:0	2	}
water	8:34	0:0	2	,
decl	8:4	8:52	2	RTSPMessageHeader	*reply
op	8:43	0:0	2	=
op	8:45	0:0	2	&
water	8:46	0:0	2	reply1
decl	9:4	9:32	2	int	lower_transport_mask
op	9:29	0:0	2	=
water	9:31	0:0	2	0
decl	10:4	10:40	2	int	default_port
op	10:21	0:0	2	=
water	10:23	0:0	2	RTSP_DEFAULT_PORT
decl	11:4	11:32	2	char	real_challenge[64]
op	11:28	0:0	2	=
water	11:30	0:0	2	""
decl	12:4	12:32	2	struct sockaddr_storage	peer
decl	13:4	13:37	2	socklen_t	peer_len
op	13:23	0:0	2	=
op	13:25	0:0	2	sizeof
water	13:31	0:0	2	(
water	13:32	0:0	2	peer
water	13:36	0:0	2	)
if	14:4	19:4	2	(rt -> rtp_port_max < rt -> rtp_port_min)
cond	14:8	14:31	3	rt -> rtp_port_max < rt -> rtp_port_min
water	14:8	0:0	4	rt
op	14:10	0:0	4	->
water	14:12	0:0	4	rtp_port_max
op	14:25	0:0	4	<
water	14:27	0:0	4	rt
op	14:29	0:0	4	->
water	14:31	0:0	4	rtp_port_min
stmts	14:45	19:4	3	
water	14:45	0:0	4	{
call	15:8	17:70	4	av_log
arg	15:15	15:16	5	s
water	15:15	0:0	6	s
arg	15:18	15:30	5	AV_LOG_ERROR
water	15:18	0:0	6	AV_LOG_ERROR
arg	15:32	16:52	5	"Invalid UDP port range, max port %d less ""than min port %d\n"
water	15:32	0:0	6	"Invalid UDP port range, max port %d less "
water	16:32	0:0	6	"than min port %d\n"
arg	16:54	16:70	5	rt->rtp_port_max
water	16:54	0:0	6	rt
op	16:56	0:0	6	->
water	16:58	0:0	6	rtp_port_max
arg	17:54	17:70	5	rt->rtp_port_min
water	17:54	0:0	6	rt
op	17:56	0:0	6	->
water	17:58	0:0	6	rtp_port_min
water	17:71	0:0	4	;
return	18:8	18:30	4	AVERROR(EINVAL)
call	18:15	18:29	5	AVERROR
arg	18:23	18:29	6	EINVAL
water	18:23	0:0	7	EINVAL
water	19:4	0:0	4	}
if	20:4	21:27	2	(!ff_network_init ( ))
cond	20:8	20:25	3	!ff_network_init ( )
op	20:8	0:0	4	!
call	20:9	20:25	4	ff_network_init
stmts	21:8	21:27	3	
return	21:8	21:27	4	AVERROR(EIO)
call	21:15	21:26	5	AVERROR
arg	21:23	21:26	6	EIO
water	21:23	0:0	7	EIO
if	22:4	23:64	2	(s -> max_delay < 0)
cond	22:8	22:23	3	s -> max_delay < 0
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	max_delay
op	22:21	0:0	4	<
water	22:23	0:0	4	0
stmts	23:8	23:64	3	
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	max_delay
op	23:21	0:0	4	=
water	23:23	0:0	4	s
op	23:24	0:0	4	->
water	23:26	0:0	4	iformat
water	23:34	0:0	4	?
water	23:36	0:0	4	DEFAULT_REORDERING_DELAY
water	23:61	0:0	4	:
water	23:63	0:0	4	0
water	23:64	0:0	4	;
water	24:4	0:0	2	rt
op	24:6	0:0	2	->
water	24:8	0:0	2	control_transport
op	24:26	0:0	2	=
water	24:28	0:0	2	RTSP_MODE_PLAIN
water	24:43	0:0	2	;
if	25:4	28:4	2	(rt -> lower_transport_mask & ( 1 << RTSP_LOWER_TRANSPORT_HTTP ))
cond	25:8	25:66	3	rt -> lower_transport_mask & ( 1 << RTSP_LOWER_TRANSPORT_HTTP )
water	25:8	0:0	4	rt
op	25:10	0:0	4	->
water	25:12	0:0	4	lower_transport_mask
op	25:33	0:0	4	&
water	25:35	0:0	4	(
water	25:36	0:0	4	1
op	25:38	0:0	4	<<
water	25:41	0:0	4	RTSP_LOWER_TRANSPORT_HTTP
water	25:66	0:0	4	)
stmts	25:69	28:4	3	
water	25:69	0:0	4	{
water	26:8	0:0	4	rt
op	26:10	0:0	4	->
water	26:12	0:0	4	lower_transport_mask
op	26:33	0:0	4	=
water	26:35	0:0	4	1
op	26:37	0:0	4	<<
water	26:40	0:0	4	RTSP_LOWER_TRANSPORT_TCP
water	26:64	0:0	4	;
water	27:8	0:0	4	rt
op	27:10	0:0	4	->
water	27:12	0:0	4	control_transport
op	27:30	0:0	4	=
water	27:32	0:0	4	RTSP_MODE_TUNNEL
water	27:48	0:0	4	;
water	28:4	0:0	4	}
water	30:4	0:0	2	rt
op	30:6	0:0	2	->
water	30:8	0:0	2	lower_transport_mask
op	30:29	0:0	2	&=
water	30:32	0:0	2	(
water	30:33	0:0	2	1
op	30:35	0:0	2	<<
water	30:38	0:0	2	RTSP_LOWER_TRANSPORT_NB
water	30:61	0:0	2	)
op	30:63	0:0	2	-
water	30:65	0:0	2	1
water	30:66	0:0	2	;
label	31:0	31:8	2	redirect :
call	33:4	34:75	2	av_url_split
arg	33:17	33:22	3	proto
water	33:17	0:0	4	proto
arg	33:24	33:37	3	sizeof(proto)
op	33:24	0:0	4	sizeof
water	33:30	0:0	4	(
water	33:31	0:0	4	proto
water	33:36	0:0	4	)
arg	33:39	33:43	3	auth
water	33:39	0:0	4	auth
arg	33:45	33:57	3	sizeof(auth)
op	33:45	0:0	4	sizeof
water	33:51	0:0	4	(
water	33:52	0:0	4	auth
water	33:56	0:0	4	)
arg	34:17	34:21	3	host
water	34:17	0:0	4	host
arg	34:23	34:35	3	sizeof(host)
op	34:23	0:0	4	sizeof
water	34:29	0:0	4	(
water	34:30	0:0	4	host
water	34:34	0:0	4	)
arg	34:37	34:42	3	&port
op	34:37	0:0	4	&
water	34:38	0:0	4	port
arg	34:44	34:48	3	path
water	34:44	0:0	4	path
arg	34:50	34:62	3	sizeof(path)
op	34:50	0:0	4	sizeof
water	34:56	0:0	4	(
water	34:57	0:0	4	path
water	34:61	0:0	4	)
arg	34:64	34:75	3	s->filename
water	34:64	0:0	4	s
op	34:65	0:0	4	->
water	34:67	0:0	4	filename
water	34:76	0:0	2	;
if	35:4	39:4	2	(!strcmp (proto ,"rtsps" ))
cond	35:8	35:30	3	!strcmp (proto ,"rtsps" )
op	35:8	0:0	4	!
call	35:9	35:30	4	strcmp
arg	35:16	35:21	5	proto
water	35:16	0:0	6	proto
arg	35:23	35:30	5	"rtsps"
water	35:23	0:0	6	"rtsps"
stmts	35:33	39:4	3	
water	35:33	0:0	4	{
water	36:8	0:0	4	lower_rtsp_proto
op	36:33	0:0	4	=
water	36:35	0:0	4	"tls"
water	36:40	0:0	4	;
water	37:8	0:0	4	default_port
op	37:33	0:0	4	=
water	37:35	0:0	4	RTSPS_DEFAULT_PORT
water	37:53	0:0	4	;
water	38:8	0:0	4	rt
op	38:10	0:0	4	->
water	38:12	0:0	4	lower_transport_mask
op	38:33	0:0	4	=
water	38:35	0:0	4	1
op	38:37	0:0	4	<<
water	38:40	0:0	4	RTSP_LOWER_TRANSPORT_TCP
water	38:64	0:0	4	;
water	39:4	0:0	4	}
if	40:4	42:4	2	(* auth)
cond	40:8	40:9	3	* auth
op	40:8	0:0	4	*
water	40:9	0:0	4	auth
stmts	40:15	42:4	3	
water	40:15	0:0	4	{
call	41:8	41:51	4	av_strlcpy
arg	41:19	41:27	5	rt->auth
water	41:19	0:0	6	rt
op	41:21	0:0	6	->
water	41:23	0:0	6	auth
arg	41:29	41:33	5	auth
water	41:29	0:0	6	auth
arg	41:35	41:51	5	sizeof(rt->auth)
op	41:35	0:0	6	sizeof
water	41:41	0:0	6	(
water	41:42	0:0	6	rt
op	41:44	0:0	6	->
water	41:46	0:0	6	auth
water	41:50	0:0	6	)
water	41:52	0:0	4	;
water	42:4	0:0	4	}
if	43:4	44:27	2	(port < 0)
cond	43:8	43:15	3	port < 0
water	43:8	0:0	4	port
op	43:13	0:0	4	<
water	43:15	0:0	4	0
stmts	44:8	44:27	3	
water	44:8	0:0	4	port
op	44:13	0:0	4	=
water	44:15	0:0	4	default_port
water	44:27	0:0	4	;
water	45:4	0:0	2	lower_transport_mask
op	45:25	0:0	2	=
water	45:27	0:0	2	rt
op	45:29	0:0	2	->
water	45:31	0:0	2	lower_transport_mask
water	45:51	0:0	2	;
if	46:4	47:65	2	(! lower_transport_mask)
cond	46:8	46:9	3	! lower_transport_mask
op	46:8	0:0	4	!
water	46:9	0:0	4	lower_transport_mask
stmts	47:8	47:65	3	
water	47:8	0:0	4	lower_transport_mask
op	47:29	0:0	4	=
water	47:31	0:0	4	(
water	47:32	0:0	4	1
op	47:34	0:0	4	<<
water	47:37	0:0	4	RTSP_LOWER_TRANSPORT_NB
water	47:60	0:0	4	)
op	47:62	0:0	4	-
water	47:64	0:0	4	1
water	47:65	0:0	4	;
if	48:4	58:4	2	(s -> oformat)
cond	48:8	48:11	3	s -> oformat
water	48:8	0:0	4	s
op	48:9	0:0	4	->
water	48:11	0:0	4	oformat
stmts	48:20	58:4	3	
water	48:20	0:0	4	{
water	50:8	0:0	4	lower_transport_mask
op	50:29	0:0	4	&=
water	50:32	0:0	4	(
water	50:33	0:0	4	1
op	50:35	0:0	4	<<
water	50:38	0:0	4	RTSP_LOWER_TRANSPORT_UDP
water	50:62	0:0	4	)
op	50:64	0:0	4	|
water	51:32	0:0	4	(
water	51:33	0:0	4	1
op	51:35	0:0	4	<<
water	51:38	0:0	4	RTSP_LOWER_TRANSPORT_TCP
water	51:62	0:0	4	)
water	51:63	0:0	4	;
if	52:8	57:8	4	(! lower_transport_mask || rt -> control_transport == RTSP_MODE_TUNNEL)
cond	52:12	52:62	5	! lower_transport_mask || rt -> control_transport == RTSP_MODE_TUNNEL
op	52:12	0:0	6	!
water	52:13	0:0	6	lower_transport_mask
op	52:34	0:0	6	||
water	52:37	0:0	6	rt
op	52:39	0:0	6	->
water	52:41	0:0	6	control_transport
op	52:59	0:0	6	==
water	52:62	0:0	6	RTSP_MODE_TUNNEL
stmts	52:80	57:8	5	
water	52:80	0:0	6	{
call	53:12	54:82	6	av_log
arg	53:19	53:20	7	s
water	53:19	0:0	8	s
arg	53:22	53:34	7	AV_LOG_ERROR
water	53:22	0:0	8	AV_LOG_ERROR
arg	53:36	54:82	7	"Unsupported lower transport method, ""only UDP and TCP are supported for output.\n"
water	53:36	0:0	8	"Unsupported lower transport method, "
water	54:36	0:0	8	"only UDP and TCP are supported for output.\n"
water	54:83	0:0	6	;
water	55:12	0:0	6	err
op	55:16	0:0	6	=
call	55:18	55:32	6	AVERROR
arg	55:26	55:32	7	EINVAL
water	55:26	0:0	8	EINVAL
water	55:33	0:0	6	;
goto	56:12	56:21	6	fail
water	56:17	0:0	7	fail
water	57:8	0:0	6	}
water	58:4	0:0	4	}
call	62:4	63:38	2	ff_url_join
arg	62:16	62:31	3	rt->control_uri
water	62:16	0:0	4	rt
op	62:18	0:0	4	->
water	62:20	0:0	4	control_uri
arg	62:33	62:56	3	sizeof(rt->control_uri)
op	62:33	0:0	4	sizeof
water	62:39	0:0	4	(
water	62:40	0:0	4	rt
op	62:42	0:0	4	->
water	62:44	0:0	4	control_uri
water	62:55	0:0	4	)
arg	62:58	62:63	3	proto
water	62:58	0:0	4	proto
arg	62:65	62:69	3	NULL
water	62:65	0:0	4	NULL
arg	63:16	63:20	3	host
water	63:16	0:0	4	host
arg	63:22	63:26	3	port
water	63:22	0:0	4	port
arg	63:28	63:32	3	"%s"
water	63:28	0:0	4	"%s"
arg	63:34	63:38	3	path
water	63:34	0:0	4	path
water	63:39	0:0	2	;
if	64:4	130:4	2	(rt -> control_transport == RTSP_MODE_TUNNEL)
cond	64:8	64:33	3	rt -> control_transport == RTSP_MODE_TUNNEL
water	64:8	0:0	4	rt
op	64:10	0:0	4	->
water	64:12	0:0	4	control_transport
op	64:30	0:0	4	==
water	64:33	0:0	4	RTSP_MODE_TUNNEL
stmts	64:51	130:4	3	
water	64:51	0:0	4	{
decl	66:8	66:27	4	char	httpname[1024]
decl	67:8	67:30	4	char	sessioncookie[17]
decl	68:8	68:26	4	char	headers[1024]
call	69:8	69:84	4	ff_url_join
arg	69:20	69:28	5	httpname
water	69:20	0:0	6	httpname
arg	69:30	69:46	5	sizeof(httpname)
op	69:30	0:0	6	sizeof
water	69:36	0:0	6	(
water	69:37	0:0	6	httpname
water	69:45	0:0	6	)
arg	69:48	69:54	5	"http"
water	69:48	0:0	6	"http"
arg	69:56	69:60	5	auth
water	69:56	0:0	6	auth
arg	69:62	69:66	5	host
water	69:62	0:0	6	host
arg	69:68	69:72	5	port
water	69:68	0:0	6	port
arg	69:74	69:78	5	"%s"
water	69:74	0:0	6	"%s"
arg	69:80	69:84	5	path
water	69:80	0:0	6	path
water	69:85	0:0	4	;
call	70:8	71:59	4	snprintf
arg	70:17	70:30	5	sessioncookie
water	70:17	0:0	6	sessioncookie
arg	70:32	70:53	5	sizeof(sessioncookie)
op	70:32	0:0	6	sizeof
water	70:38	0:0	6	(
water	70:39	0:0	6	sessioncookie
water	70:52	0:0	6	)
arg	70:55	70:65	5	"%08x%08x"
water	70:55	0:0	6	"%08x%08x"
arg	71:17	71:37	5	av_get_random_seed()
call	71:17	71:36	6	av_get_random_seed
arg	71:39	71:59	5	av_get_random_seed()
call	71:39	71:58	6	av_get_random_seed
water	71:60	0:0	4	;
if	73:8	77:8	4	(ffurl_alloc (& rt -> rtsp_hd ,httpname ,AVIO_FLAG_READ ,& s -> interrupt_callback ) < 0)
cond	73:12	74:50	5	ffurl_alloc (& rt -> rtsp_hd ,httpname ,AVIO_FLAG_READ ,& s -> interrupt_callback ) < 0
call	73:12	74:46	6	ffurl_alloc
arg	73:24	73:36	7	&rt->rtsp_hd
op	73:24	0:0	8	&
water	73:25	0:0	8	rt
op	73:27	0:0	8	->
water	73:29	0:0	8	rtsp_hd
arg	73:38	73:46	7	httpname
water	73:38	0:0	8	httpname
arg	73:48	73:62	7	AVIO_FLAG_READ
water	73:48	0:0	8	AVIO_FLAG_READ
arg	74:24	74:46	7	&s->interrupt_callback
op	74:24	0:0	8	&
water	74:25	0:0	8	s
op	74:26	0:0	8	->
water	74:28	0:0	8	interrupt_callback
op	74:48	0:0	6	<
water	74:50	0:0	6	0
stmts	74:53	77:8	5	
water	74:53	0:0	6	{
water	75:12	0:0	6	err
op	75:16	0:0	6	=
call	75:18	75:29	6	AVERROR
arg	75:26	75:29	7	EIO
water	75:26	0:0	8	EIO
water	75:30	0:0	6	;
goto	76:12	76:21	6	fail
water	76:17	0:0	7	fail
water	77:8	0:0	6	}
call	79:8	84:30	4	snprintf
arg	79:17	79:24	5	headers
water	79:17	0:0	6	headers
arg	79:26	79:41	5	sizeof(headers)
op	79:26	0:0	6	sizeof
water	79:32	0:0	6	(
water	79:33	0:0	6	headers
water	79:40	0:0	6	)
arg	80:17	83:46	5	"x-sessioncookie: %s\r\n""Accept: application/x-rtsp-tunnelled\r\n""Pragma: no-cache\r\n""Cache-Control: no-cache\r\n"
water	80:17	0:0	6	"x-sessioncookie: %s\r\n"
water	81:17	0:0	6	"Accept: application/x-rtsp-tunnelled\r\n"
water	82:17	0:0	6	"Pragma: no-cache\r\n"
water	83:17	0:0	6	"Cache-Control: no-cache\r\n"
arg	84:17	84:30	5	sessioncookie
water	84:17	0:0	6	sessioncookie
water	84:31	0:0	4	;
call	85:8	85:64	4	av_opt_set
arg	85:19	85:41	5	rt->rtsp_hd->priv_data
water	85:19	0:0	6	rt
op	85:21	0:0	6	->
water	85:23	0:0	6	rtsp_hd
op	85:30	0:0	6	->
water	85:32	0:0	6	priv_data
arg	85:43	85:52	5	"headers"
water	85:43	0:0	6	"headers"
arg	85:54	85:61	5	headers
water	85:54	0:0	6	headers
arg	85:63	85:64	5	0
water	85:63	0:0	6	0
water	85:65	0:0	4	;
if	87:8	90:8	4	(ffurl_connect (rt -> rtsp_hd ,NULL ))
cond	87:12	87:43	5	ffurl_connect (rt -> rtsp_hd ,NULL )
call	87:12	87:43	6	ffurl_connect
arg	87:26	87:37	7	rt->rtsp_hd
water	87:26	0:0	8	rt
op	87:28	0:0	8	->
water	87:30	0:0	8	rtsp_hd
arg	87:39	87:43	7	NULL
water	87:39	0:0	8	NULL
stmts	87:46	90:8	5	
water	87:46	0:0	6	{
water	88:12	0:0	6	err
op	88:16	0:0	6	=
call	88:18	88:29	6	AVERROR
arg	88:26	88:29	7	EIO
water	88:26	0:0	8	EIO
water	88:30	0:0	6	;
goto	89:12	89:21	6	fail
water	89:17	0:0	7	fail
water	90:8	0:0	6	}
if	92:8	96:8	4	(ffurl_alloc (& rt -> rtsp_hd_out ,httpname ,AVIO_FLAG_WRITE ,& s -> interrupt_callback ) < 0)
cond	92:12	93:50	5	ffurl_alloc (& rt -> rtsp_hd_out ,httpname ,AVIO_FLAG_WRITE ,& s -> interrupt_callback ) < 0
call	92:12	93:46	6	ffurl_alloc
arg	92:24	92:40	7	&rt->rtsp_hd_out
op	92:24	0:0	8	&
water	92:25	0:0	8	rt
op	92:27	0:0	8	->
water	92:29	0:0	8	rtsp_hd_out
arg	92:42	92:50	7	httpname
water	92:42	0:0	8	httpname
arg	92:52	92:67	7	AVIO_FLAG_WRITE
water	92:52	0:0	8	AVIO_FLAG_WRITE
arg	93:24	93:46	7	&s->interrupt_callback
op	93:24	0:0	8	&
water	93:25	0:0	8	s
op	93:26	0:0	8	->
water	93:28	0:0	8	interrupt_callback
op	93:48	0:0	6	<
water	93:50	0:0	6	0
stmts	93:54	96:8	5	
water	93:54	0:0	6	{
water	94:12	0:0	6	err
op	94:16	0:0	6	=
call	94:18	94:29	6	AVERROR
arg	94:26	94:29	7	EIO
water	94:26	0:0	8	EIO
water	94:30	0:0	6	;
goto	95:12	95:21	6	fail
water	95:17	0:0	7	fail
water	96:8	0:0	6	}
call	98:8	105:30	4	snprintf
arg	98:17	98:24	5	headers
water	98:17	0:0	6	headers
arg	98:26	98:41	5	sizeof(headers)
op	98:26	0:0	6	sizeof
water	98:32	0:0	6	(
water	98:33	0:0	6	headers
water	98:40	0:0	6	)
arg	99:17	104:60	5	"x-sessioncookie: %s\r\n""Content-Type: application/x-rtsp-tunnelled\r\n""Pragma: no-cache\r\n""Cache-Control: no-cache\r\n""Content-Length: 32767\r\n""Expires: Sun, 9 Jan 1972 00:00:00 GMT\r\n"
water	99:17	0:0	6	"x-sessioncookie: %s\r\n"
water	100:17	0:0	6	"Content-Type: application/x-rtsp-tunnelled\r\n"
water	101:17	0:0	6	"Pragma: no-cache\r\n"
water	102:17	0:0	6	"Cache-Control: no-cache\r\n"
water	103:17	0:0	6	"Content-Length: 32767\r\n"
water	104:17	0:0	6	"Expires: Sun, 9 Jan 1972 00:00:00 GMT\r\n"
arg	105:17	105:30	5	sessioncookie
water	105:17	0:0	6	sessioncookie
water	105:31	0:0	4	;
call	106:8	106:68	4	av_opt_set
arg	106:19	106:45	5	rt->rtsp_hd_out->priv_data
water	106:19	0:0	6	rt
op	106:21	0:0	6	->
water	106:23	0:0	6	rtsp_hd_out
op	106:34	0:0	6	->
water	106:36	0:0	6	priv_data
arg	106:47	106:56	5	"headers"
water	106:47	0:0	6	"headers"
arg	106:58	106:65	5	headers
water	106:58	0:0	6	headers
arg	106:67	106:68	5	0
water	106:67	0:0	6	0
water	106:69	0:0	4	;
call	107:8	107:69	4	av_opt_set
arg	107:19	107:45	5	rt->rtsp_hd_out->priv_data
water	107:19	0:0	6	rt
op	107:21	0:0	6	->
water	107:23	0:0	6	rtsp_hd_out
op	107:34	0:0	6	->
water	107:36	0:0	6	priv_data
arg	107:47	107:61	5	"chunked_post"
water	107:47	0:0	6	"chunked_post"
arg	107:63	107:66	5	"0"
water	107:63	0:0	6	"0"
arg	107:68	107:69	5	0
water	107:68	0:0	6	0
water	107:70	0:0	4	;
call	124:8	124:60	4	ff_http_init_auth_state
arg	124:32	124:47	5	rt->rtsp_hd_out
water	124:32	0:0	6	rt
op	124:34	0:0	6	->
water	124:36	0:0	6	rtsp_hd_out
arg	124:49	124:60	5	rt->rtsp_hd
water	124:49	0:0	6	rt
op	124:51	0:0	6	->
water	124:53	0:0	6	rtsp_hd
water	124:61	0:0	4	;
if	126:8	129:8	4	(ffurl_connect (rt -> rtsp_hd_out ,NULL ))
cond	126:12	126:47	5	ffurl_connect (rt -> rtsp_hd_out ,NULL )
call	126:12	126:47	6	ffurl_connect
arg	126:26	126:41	7	rt->rtsp_hd_out
water	126:26	0:0	8	rt
op	126:28	0:0	8	->
water	126:30	0:0	8	rtsp_hd_out
arg	126:43	126:47	7	NULL
water	126:43	0:0	8	NULL
stmts	126:50	129:8	5	
water	126:50	0:0	6	{
water	127:12	0:0	6	err
op	127:16	0:0	6	=
call	127:18	127:29	6	AVERROR
arg	127:26	127:29	7	EIO
water	127:26	0:0	8	EIO
water	127:30	0:0	6	;
goto	128:12	128:21	6	fail
water	128:17	0:0	7	fail
water	129:8	0:0	6	}
water	130:4	0:0	4	}
else	130:6	142:4	2
stmts	130:11	142:4	3	
water	130:11	0:0	4	{
decl	131:8	131:15	4	int	ret
call	133:8	135:47	4	ff_url_join
arg	133:20	133:27	5	tcpname
water	133:20	0:0	6	tcpname
arg	133:29	133:44	5	sizeof(tcpname)
op	133:29	0:0	6	sizeof
water	133:35	0:0	6	(
water	133:36	0:0	6	tcpname
water	133:43	0:0	6	)
arg	133:46	133:62	5	lower_rtsp_proto
water	133:46	0:0	6	lower_rtsp_proto
arg	133:64	133:68	5	NULL
water	133:64	0:0	6	NULL
arg	134:20	134:24	5	host
water	134:20	0:0	6	host
arg	134:26	134:30	5	port
water	134:26	0:0	6	port
arg	135:20	135:33	5	"?timeout=%d"
water	135:20	0:0	6	"?timeout=%d"
arg	135:35	135:47	5	rt->stimeout
water	135:35	0:0	6	rt
op	135:37	0:0	6	->
water	135:39	0:0	6	stimeout
water	135:48	0:0	4	;
if	136:8	140:8	4	(( ret =ffurl_open (& rt -> rtsp_hd ,tcpname ,AVIO_FLAG_READ_WRITE ,& s -> interrupt_callback ,NULL ) ) < 0)
cond	136:12	137:56	5	( ret =ffurl_open (& rt -> rtsp_hd ,tcpname ,AVIO_FLAG_READ_WRITE ,& s -> interrupt_callback ,NULL ) ) < 0
water	136:12	0:0	6	(
water	136:13	0:0	6	ret
op	136:17	0:0	6	=
call	136:19	137:51	6	ffurl_open
arg	136:30	136:42	7	&rt->rtsp_hd
op	136:30	0:0	8	&
water	136:31	0:0	8	rt
op	136:33	0:0	8	->
water	136:35	0:0	8	rtsp_hd
arg	136:44	136:51	7	tcpname
water	136:44	0:0	8	tcpname
arg	136:53	136:73	7	AVIO_FLAG_READ_WRITE
water	136:53	0:0	8	AVIO_FLAG_READ_WRITE
arg	137:23	137:45	7	&s->interrupt_callback
op	137:23	0:0	8	&
water	137:24	0:0	8	s
op	137:25	0:0	8	->
water	137:27	0:0	8	interrupt_callback
arg	137:47	137:51	7	NULL
water	137:47	0:0	8	NULL
water	137:52	0:0	6	)
op	137:54	0:0	6	<
water	137:56	0:0	6	0
stmts	137:59	140:8	5	
water	137:59	0:0	6	{
water	138:12	0:0	6	err
op	138:16	0:0	6	=
water	138:18	0:0	6	ret
water	138:21	0:0	6	;
goto	139:12	139:21	6	fail
water	139:17	0:0	7	fail
water	140:8	0:0	6	}
water	141:8	0:0	4	rt
op	141:10	0:0	4	->
water	141:12	0:0	4	rtsp_hd_out
op	141:24	0:0	4	=
water	141:26	0:0	4	rt
op	141:28	0:0	4	->
water	141:30	0:0	4	rtsp_hd
water	141:37	0:0	4	;
water	142:4	0:0	4	}
water	143:4	0:0	2	rt
op	143:6	0:0	2	->
water	143:8	0:0	2	seq
op	143:12	0:0	2	=
water	143:14	0:0	2	0
water	143:15	0:0	2	;
water	144:4	0:0	2	tcp_fd
op	144:11	0:0	2	=
call	144:13	144:46	2	ffurl_get_file_handle
arg	144:35	144:46	3	rt->rtsp_hd
water	144:35	0:0	4	rt
op	144:37	0:0	4	->
water	144:39	0:0	4	rtsp_hd
water	144:47	0:0	2	;
if	145:4	148:4	2	(tcp_fd < 0)
cond	145:8	145:17	3	tcp_fd < 0
water	145:8	0:0	4	tcp_fd
op	145:15	0:0	4	<
water	145:17	0:0	4	0
stmts	145:20	148:4	3	
water	145:20	0:0	4	{
water	146:8	0:0	4	err
op	146:12	0:0	4	=
water	146:14	0:0	4	tcp_fd
water	146:20	0:0	4	;
goto	147:8	147:17	4	fail
water	147:13	0:0	5	fail
water	148:4	0:0	4	}
if	149:4	152:4	2	(!getpeername (tcp_fd ,( struct sockaddr * ) & peer ,& peer_len ))
cond	149:8	149:64	3	!getpeername (tcp_fd ,( struct sockaddr * ) & peer ,& peer_len )
op	149:8	0:0	4	!
call	149:9	149:64	4	getpeername
arg	149:21	149:27	5	tcp_fd
water	149:21	0:0	6	tcp_fd
arg	149:29	149:53	5	(structsockaddr*)&peer
water	149:29	0:0	6	(
water	149:30	0:0	6	struct
water	149:37	0:0	6	sockaddr
op	149:45	0:0	6	*
water	149:46	0:0	6	)
op	149:48	0:0	6	&
water	149:49	0:0	6	peer
arg	149:55	149:64	5	&peer_len
op	149:55	0:0	6	&
water	149:56	0:0	6	peer_len
stmts	149:67	152:4	3	
water	149:67	0:0	4	{
call	150:8	151:43	4	getnameinfo
arg	150:20	150:44	5	(structsockaddr*)&peer
water	150:20	0:0	6	(
water	150:21	0:0	6	struct
water	150:28	0:0	6	sockaddr
op	150:36	0:0	6	*
water	150:37	0:0	6	)
op	150:39	0:0	6	&
water	150:40	0:0	6	peer
arg	150:46	150:54	5	peer_len
water	150:46	0:0	6	peer_len
arg	150:56	150:60	5	host
water	150:56	0:0	6	host
arg	150:62	150:74	5	sizeof(host)
op	150:62	0:0	6	sizeof
water	150:68	0:0	6	(
water	150:69	0:0	6	host
water	150:73	0:0	6	)
arg	151:20	151:24	5	NULL
water	151:20	0:0	6	NULL
arg	151:26	151:27	5	0
water	151:26	0:0	6	0
arg	151:29	151:43	5	NI_NUMERICHOST
water	151:29	0:0	6	NI_NUMERICHOST
water	151:44	0:0	4	;
water	152:4	0:0	4	}
for	155:4	187:4	2	(rt -> server_type = RTSP_SERVER_RTP ;;)
forinit	155:9	155:42	3	rt -> server_type = RTSP_SERVER_RTP ;
water	155:9	0:0	4	rt
op	155:11	0:0	4	->
water	155:13	0:0	4	server_type
op	155:25	0:0	4	=
water	155:27	0:0	4	RTSP_SERVER_RTP
water	155:42	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	155:46	187:4	3	
water	155:46	0:0	4	{
water	156:8	0:0	4	cmd
op	156:11	0:0	4	[
water	156:12	0:0	4	0
op	156:13	0:0	4	]
op	156:15	0:0	4	=
water	156:17	0:0	4	0
water	156:18	0:0	4	;
if	157:8	172:35	4	(rt -> server_type == RTSP_SERVER_REAL)
cond	157:12	157:31	5	rt -> server_type == RTSP_SERVER_REAL
water	157:12	0:0	6	rt
op	157:14	0:0	6	->
water	157:16	0:0	6	server_type
op	157:28	0:0	6	==
water	157:31	0:0	6	RTSP_SERVER_REAL
stmts	158:12	172:35	5	
call	158:12	172:34	6	av_strlcat
arg	158:23	158:26	7	cmd
water	158:23	0:0	8	cmd
arg	168:23	171:71	7	"ClientChallenge: 9e26d33f2984236010ef6253fb1887f7\r\n""PlayerStarttime: [28/03/2003:22:50:23 00:00]\r\n""CompanyID: KnKV4M4I/B2FjJ1TToLycw==\r\n""GUID: 00000000-0000-0000-0000-000000000000\r\n"
water	168:23	0:0	8	"ClientChallenge: 9e26d33f2984236010ef6253fb1887f7\r\n"
water	169:23	0:0	8	"PlayerStarttime: [28/03/2003:22:50:23 00:00]\r\n"
water	170:23	0:0	8	"CompanyID: KnKV4M4I/B2FjJ1TToLycw==\r\n"
water	171:23	0:0	8	"GUID: 00000000-0000-0000-0000-000000000000\r\n"
arg	172:23	172:34	7	sizeof(cmd)
op	172:23	0:0	8	sizeof
water	172:29	0:0	8	(
water	172:30	0:0	8	cmd
water	172:33	0:0	8	)
water	172:35	0:0	6	;
call	173:8	173:72	4	ff_rtsp_send_cmd
arg	173:25	173:26	5	s
water	173:25	0:0	6	s
arg	173:28	173:37	5	"OPTIONS"
water	173:28	0:0	6	"OPTIONS"
arg	173:39	173:54	5	rt->control_uri
water	173:39	0:0	6	rt
op	173:41	0:0	6	->
water	173:43	0:0	6	control_uri
arg	173:56	173:59	5	cmd
water	173:56	0:0	6	cmd
arg	173:61	173:66	5	reply
water	173:61	0:0	6	reply
arg	173:68	173:72	5	NULL
water	173:68	0:0	6	NULL
water	173:73	0:0	4	;
if	174:8	177:8	4	(reply -> status_code != RTSP_STATUS_OK)
cond	174:12	174:34	5	reply -> status_code != RTSP_STATUS_OK
water	174:12	0:0	6	reply
op	174:17	0:0	6	->
water	174:19	0:0	6	status_code
op	174:31	0:0	6	!=
water	174:34	0:0	6	RTSP_STATUS_OK
stmts	174:50	177:8	5	
water	174:50	0:0	6	{
water	175:12	0:0	6	err
op	175:16	0:0	6	=
call	175:18	175:73	6	ff_rtsp_averror
arg	175:34	175:52	7	reply->status_code
water	175:34	0:0	8	reply
op	175:39	0:0	8	->
water	175:41	0:0	8	status_code
arg	175:54	175:73	7	AVERROR_INVALIDDATA
water	175:54	0:0	8	AVERROR_INVALIDDATA
water	175:74	0:0	6	;
goto	176:12	176:21	6	fail
water	176:17	0:0	7	fail
water	177:8	0:0	6	}
if	179:8	182:8	4	(rt -> server_type != RTSP_SERVER_REAL && reply -> real_challenge [ 0 ])
cond	179:12	179:74	5	rt -> server_type != RTSP_SERVER_REAL && reply -> real_challenge [ 0 ]
water	179:12	0:0	6	rt
op	179:14	0:0	6	->
water	179:16	0:0	6	server_type
op	179:28	0:0	6	!=
water	179:31	0:0	6	RTSP_SERVER_REAL
op	179:48	0:0	6	&&
water	179:51	0:0	6	reply
op	179:56	0:0	6	->
water	179:58	0:0	6	real_challenge
op	179:72	0:0	6	[
water	179:73	0:0	6	0
op	179:74	0:0	6	]
stmts	179:77	182:8	5	
water	179:77	0:0	6	{
water	180:12	0:0	6	rt
op	180:14	0:0	6	->
water	180:16	0:0	6	server_type
op	180:28	0:0	6	=
water	180:30	0:0	6	RTSP_SERVER_REAL
water	180:46	0:0	6	;
continue	181:12	181:20	6	
water	182:8	0:0	6	}
else	182:10	184:8	4
stmts	182:15	184:8	5	
if	182:15	184:8	6	(!av_strncasecmp (reply -> server ,"WMServer/" ,9 ))
cond	182:19	182:64	7	!av_strncasecmp (reply -> server ,"WMServer/" ,9 )
op	182:19	0:0	8	!
call	182:20	182:64	8	av_strncasecmp
arg	182:35	182:48	9	reply->server
water	182:35	0:0	10	reply
op	182:40	0:0	10	->
water	182:42	0:0	10	server
arg	182:50	182:61	9	"WMServer/"
water	182:50	0:0	10	"WMServer/"
arg	182:63	182:64	9	9
water	182:63	0:0	10	9
stmts	182:67	184:8	7	
water	182:67	0:0	8	{
water	183:12	0:0	8	rt
op	183:14	0:0	8	->
water	183:16	0:0	8	server_type
op	183:28	0:0	8	=
water	183:30	0:0	8	RTSP_SERVER_WMS
water	183:45	0:0	8	;
water	184:8	0:0	8	}
else	184:10	185:57	4
stmts	184:15	185:57	5	
if	184:15	185:57	6	(rt -> server_type == RTSP_SERVER_REAL)
cond	184:19	184:38	7	rt -> server_type == RTSP_SERVER_REAL
water	184:19	0:0	8	rt
op	184:21	0:0	8	->
water	184:23	0:0	8	server_type
op	184:35	0:0	8	==
water	184:38	0:0	8	RTSP_SERVER_REAL
stmts	185:12	185:57	7	
call	185:12	185:56	8	strcpy
arg	185:19	185:33	9	real_challenge
water	185:19	0:0	10	real_challenge
arg	185:35	185:56	9	reply->real_challenge
water	185:35	0:0	10	reply
op	185:40	0:0	10	->
water	185:42	0:0	10	real_challenge
water	185:57	0:0	8	;
break	186:8	186:13	4	
water	187:4	0:0	4	}
if	188:4	189:51	2	(CONFIG_RTSP_DEMUXER && s -> iformat)
cond	188:8	188:34	3	CONFIG_RTSP_DEMUXER && s -> iformat
water	188:8	0:0	4	CONFIG_RTSP_DEMUXER
op	188:28	0:0	4	&&
water	188:31	0:0	4	s
op	188:32	0:0	4	->
water	188:34	0:0	4	iformat
stmts	189:8	189:51	3	
water	189:8	0:0	4	err
op	189:12	0:0	4	=
call	189:14	189:50	4	ff_rtsp_setup_input_streams
arg	189:42	189:43	5	s
water	189:42	0:0	6	s
arg	189:45	189:50	5	reply
water	189:45	0:0	6	reply
water	189:51	0:0	4	;
else	190:4	191:51	2
stmts	190:9	191:51	3	
if	190:9	191:51	4	(CONFIG_RTSP_MUXER)
cond	190:13	190:13	5	CONFIG_RTSP_MUXER
water	190:13	0:0	6	CONFIG_RTSP_MUXER
stmts	191:8	191:51	5	
water	191:8	0:0	6	err
op	191:12	0:0	6	=
call	191:14	191:50	6	ff_rtsp_setup_output_streams
arg	191:43	191:44	7	s
water	191:43	0:0	8	s
arg	191:46	191:50	7	host
water	191:46	0:0	8	host
water	191:51	0:0	6	;
else	192:4	193:21	2
stmts	193:8	193:21	3	
call	193:8	193:20	4	av_assert0
arg	193:19	193:20	5	0
water	193:19	0:0	6	0
water	193:21	0:0	4	;
if	194:4	195:17	2	(err)
cond	194:8	194:8	3	err
water	194:8	0:0	4	err
stmts	195:8	195:17	3	
goto	195:8	195:17	4	fail
water	195:13	0:0	5	fail
do	196:4	212:4	2	(err)
cond	212:13	212:13	3	err
water	212:13	0:0	4	err
stmts	196:7	212:4	3	
water	196:7	0:0	4	{
decl	197:8	198:62	4	int	lower_transport
op	197:28	0:0	4	=
water	197:30	0:0	4	ff_log2_tab
op	197:41	0:0	4	[
water	197:42	0:0	4	lower_transport_mask
op	197:63	0:0	4	&
op	198:34	0:0	4	~
water	198:35	0:0	4	(
water	198:36	0:0	4	lower_transport_mask
op	198:57	0:0	4	-
water	198:59	0:0	4	1
water	198:60	0:0	4	)
op	198:61	0:0	4	]
if	199:8	201:54	4	(( lower_transport_mask & ( 1 << RTSP_LOWER_TRANSPORT_TCP ) ) && ( rt -> rtsp_flags & RTSP_FLAG_PREFER_TCP ))
cond	199:12	200:57	5	( lower_transport_mask & ( 1 << RTSP_LOWER_TRANSPORT_TCP ) ) && ( rt -> rtsp_flags & RTSP_FLAG_PREFER_TCP )
water	199:12	0:0	6	(
water	199:13	0:0	6	lower_transport_mask
op	199:34	0:0	6	&
water	199:36	0:0	6	(
water	199:37	0:0	6	1
op	199:39	0:0	6	<<
water	199:42	0:0	6	RTSP_LOWER_TRANSPORT_TCP
water	199:66	0:0	6	)
water	199:67	0:0	6	)
op	200:16	0:0	6	&&
water	200:19	0:0	6	(
water	200:20	0:0	6	rt
op	200:22	0:0	6	->
water	200:24	0:0	6	rtsp_flags
op	200:35	0:0	6	&
water	200:37	0:0	6	RTSP_FLAG_PREFER_TCP
water	200:57	0:0	6	)
stmts	201:12	201:54	5	
water	201:12	0:0	6	lower_transport
op	201:28	0:0	6	=
water	201:30	0:0	6	RTSP_LOWER_TRANSPORT_TCP
water	201:54	0:0	6	;
water	202:8	0:0	4	err
op	202:12	0:0	4	=
call	202:14	204:58	4	ff_rtsp_make_setup_request
arg	202:41	202:42	5	s
water	202:41	0:0	6	s
arg	202:44	202:48	5	host
water	202:44	0:0	6	host
arg	202:50	202:54	5	port
water	202:50	0:0	6	port
arg	202:56	202:71	5	lower_transport
water	202:56	0:0	6	lower_transport
arg	203:33	204:58	5	rt->server_type==RTSP_SERVER_REAL?real_challenge:NULL
water	203:33	0:0	6	rt
op	203:35	0:0	6	->
water	203:37	0:0	6	server_type
op	203:49	0:0	6	==
water	203:52	0:0	6	RTSP_SERVER_REAL
water	203:69	0:0	6	?
water	204:37	0:0	6	real_challenge
water	204:52	0:0	6	:
water	204:54	0:0	6	NULL
water	204:59	0:0	4	;
if	205:8	206:21	4	(err < 0)
cond	205:12	205:18	5	err < 0
water	205:12	0:0	6	err
op	205:16	0:0	6	<
water	205:18	0:0	6	0
stmts	206:12	206:21	5	
goto	206:12	206:21	6	fail
water	206:17	0:0	7	fail
water	207:8	0:0	4	lower_transport_mask
op	207:29	0:0	4	&=
op	207:32	0:0	4	~
water	207:33	0:0	4	(
water	207:34	0:0	4	1
op	207:36	0:0	4	<<
water	207:39	0:0	4	lower_transport
water	207:54	0:0	4	)
water	207:55	0:0	4	;
if	208:8	211:8	4	(lower_transport_mask == 0 && err == 1)
cond	208:12	208:48	5	lower_transport_mask == 0 && err == 1
water	208:12	0:0	6	lower_transport_mask
op	208:33	0:0	6	==
water	208:36	0:0	6	0
op	208:38	0:0	6	&&
water	208:41	0:0	6	err
op	208:45	0:0	6	==
water	208:48	0:0	6	1
stmts	208:51	211:8	5	
water	208:51	0:0	6	{
water	209:12	0:0	6	err
op	209:16	0:0	6	=
call	209:18	209:41	6	AVERROR
arg	209:26	209:41	7	EPROTONOSUPPORT
water	209:26	0:0	8	EPROTONOSUPPORT
water	209:42	0:0	6	;
goto	210:12	210:21	6	fail
water	210:17	0:0	7	fail
water	211:8	0:0	6	}
water	212:4	0:0	4	}
water	212:17	0:0	2	;
water	213:4	0:0	2	rt
op	213:6	0:0	2	->
water	213:8	0:0	2	lower_transport_mask
op	213:29	0:0	2	=
water	213:31	0:0	2	lower_transport_mask
water	213:51	0:0	2	;
call	214:4	214:77	2	av_strlcpy
arg	214:15	214:33	3	rt->real_challenge
water	214:15	0:0	4	rt
op	214:17	0:0	4	->
water	214:19	0:0	4	real_challenge
arg	214:35	214:49	3	real_challenge
water	214:35	0:0	4	real_challenge
arg	214:51	214:77	3	sizeof(rt->real_challenge)
op	214:51	0:0	4	sizeof
water	214:57	0:0	4	(
water	214:58	0:0	4	rt
op	214:60	0:0	4	->
water	214:62	0:0	4	real_challenge
water	214:76	0:0	4	)
water	214:78	0:0	2	;
water	215:4	0:0	2	rt
op	215:6	0:0	2	->
water	215:8	0:0	2	state
op	215:14	0:0	2	=
water	215:16	0:0	2	RTSP_STATE_IDLE
water	215:31	0:0	2	;
water	216:4	0:0	2	rt
op	216:6	0:0	2	->
water	216:8	0:0	2	seek_timestamp
op	216:23	0:0	2	=
water	216:25	0:0	2	0
water	216:26	0:0	2	;
return	217:4	217:12	2	0
water	217:11	0:0	3	0
label	218:1	218:5	2	fail :
call	219:4	219:27	2	ff_rtsp_close_streams
arg	219:26	219:27	3	s
water	219:26	0:0	4	s
water	219:28	0:0	2	;
call	220:4	220:31	2	ff_rtsp_close_connections
arg	220:30	220:31	3	s
water	220:30	0:0	4	s
water	220:32	0:0	2	;
if	221:4	228:4	2	(reply -> status_code >= 300 && reply -> status_code < 400 && s -> iformat)
cond	221:8	221:67	3	reply -> status_code >= 300 && reply -> status_code < 400 && s -> iformat
water	221:8	0:0	4	reply
op	221:13	0:0	4	->
water	221:15	0:0	4	status_code
op	221:27	0:0	4	>=
water	221:29	0:0	4	300
op	221:33	0:0	4	&&
water	221:36	0:0	4	reply
op	221:41	0:0	4	->
water	221:43	0:0	4	status_code
op	221:55	0:0	4	<
water	221:57	0:0	4	400
op	221:61	0:0	4	&&
water	221:64	0:0	4	s
op	221:65	0:0	4	->
water	221:67	0:0	4	iformat
stmts	221:76	228:4	3	
water	221:76	0:0	4	{
call	222:8	222:68	4	av_strlcpy
arg	222:19	222:30	5	s->filename
water	222:19	0:0	6	s
op	222:20	0:0	6	->
water	222:22	0:0	6	filename
arg	222:32	222:47	5	reply->location
water	222:32	0:0	6	reply
op	222:37	0:0	6	->
water	222:39	0:0	6	location
arg	222:49	222:68	5	sizeof(s->filename)
op	222:49	0:0	6	sizeof
water	222:55	0:0	6	(
water	222:56	0:0	6	s
op	222:57	0:0	6	->
water	222:59	0:0	6	filename
water	222:67	0:0	6	)
water	222:69	0:0	4	;
water	223:8	0:0	4	rt
op	223:10	0:0	4	->
water	223:12	0:0	4	session_id
op	223:22	0:0	4	[
water	223:23	0:0	4	0
op	223:24	0:0	4	]
op	223:26	0:0	4	=
water	223:28	0:0	4	'\0'
water	223:32	0:0	4	;
call	224:8	226:26	4	av_log
arg	224:15	224:16	5	s
water	224:15	0:0	6	s
arg	224:18	224:29	5	AV_LOG_INFO
water	224:18	0:0	6	AV_LOG_INFO
arg	224:31	224:63	5	"Status %d: Redirecting to %s\n"
water	224:31	0:0	6	"Status %d: Redirecting to %s\n"
arg	225:15	225:33	5	reply->status_code
water	225:15	0:0	6	reply
op	225:20	0:0	6	->
water	225:22	0:0	6	status_code
arg	226:15	226:26	5	s->filename
water	226:15	0:0	6	s
op	226:16	0:0	6	->
water	226:18	0:0	6	filename
water	226:27	0:0	4	;
goto	227:8	227:21	4	redirect
water	227:13	0:0	5	redirect
water	228:4	0:0	4	}
call	229:4	229:21	2	ff_network_close
water	229:22	0:0	2	;
return	230:4	230:14	2	err
water	230:11	0:0	3	err
