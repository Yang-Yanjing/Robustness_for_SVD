func	1:0	64:0	0	static void	get_tag
params	1:19	0:0	1	
param	1:20	1:38	2	AVFormatContext *	s
param	1:40	1:55	2	AVIOContext *	pb
param	1:57	1:72	2	const char *	key
param	1:74	1:82	2	int	type
param	1:84	1:94	2	int	length
stmnts	0:0	63:18	1	
decl	3:4	3:16	2	int	buf_size
decl	4:4	4:13	2	char	*buf
if	5:4	8:4	2	(!strcmp (key ,"WM/MediaThumbType" ))
cond	5:8	5:40	3	!strcmp (key ,"WM/MediaThumbType" )
op	5:8	0:0	4	!
call	5:9	5:40	4	strcmp
arg	5:16	5:19	5	key
water	5:16	0:0	6	key
arg	5:21	5:40	5	"WM/MediaThumbType"
water	5:21	0:0	6	"WM/MediaThumbType"
stmts	5:43	8:4	3	
water	5:43	0:0	4	{
call	6:8	6:28	4	avio_skip
arg	6:18	6:20	5	pb
water	6:18	0:0	6	pb
arg	6:22	6:28	5	length
water	6:22	0:0	6	length
water	6:29	0:0	4	;
return	7:8	7:14	4	
water	8:4	0:0	4	}
water	9:4	0:0	2	buf_size
op	9:13	0:0	2	=
call	9:15	9:46	2	FFMAX
arg	9:21	9:29	3	2*length
water	9:21	0:0	4	2
op	9:22	0:0	4	*
water	9:23	0:0	4	length
arg	9:31	9:46	3	LEN_PRETTY_GUID
water	9:31	0:0	4	LEN_PRETTY_GUID
op	9:48	0:0	2	+
water	9:50	0:0	2	1
water	9:51	0:0	2	;
water	10:4	0:0	2	buf
op	10:8	0:0	2	=
call	10:10	10:28	2	av_malloc
arg	10:20	10:28	3	buf_size
water	10:20	0:0	4	buf_size
water	10:29	0:0	2	;
if	11:4	12:14	2	(! buf)
cond	11:8	11:9	3	! buf
op	11:8	0:0	4	!
water	11:9	0:0	4	buf
stmts	12:8	12:14	3	
return	12:8	12:14	4	
if	13:4	15:4	2	(type == 0 && length == 4)
cond	13:8	13:31	3	type == 0 && length == 4
water	13:8	0:0	4	type
op	13:13	0:0	4	==
water	13:16	0:0	4	0
op	13:18	0:0	4	&&
water	13:21	0:0	4	length
op	13:28	0:0	4	==
water	13:31	0:0	4	4
stmts	13:34	15:4	3	
water	13:34	0:0	4	{
call	14:8	14:51	4	snprintf
arg	14:17	14:20	5	buf
water	14:17	0:0	6	buf
arg	14:22	14:30	5	buf_size
water	14:22	0:0	6	buf_size
arg	14:32	14:36	5	"%u"
water	14:32	0:0	6	"%u"
arg	14:38	14:51	5	avio_rl32(pb)
call	14:38	14:50	6	avio_rl32
arg	14:48	14:50	7	pb
water	14:48	0:0	8	pb
water	14:52	0:0	4	;
water	15:4	0:0	4	}
else	15:6	21:4	2
stmts	15:11	21:4	3	
if	15:11	21:4	4	(type == 1)
cond	15:15	15:23	5	type == 1
water	15:15	0:0	6	type
op	15:20	0:0	6	==
water	15:23	0:0	6	1
stmts	15:26	21:4	5	
water	15:26	0:0	6	{
call	16:8	16:50	6	avio_get_str16le
arg	16:25	16:27	7	pb
water	16:25	0:0	8	pb
arg	16:29	16:35	7	length
water	16:29	0:0	8	length
arg	16:37	16:40	7	buf
water	16:37	0:0	8	buf
arg	16:42	16:50	7	buf_size
water	16:42	0:0	8	buf_size
water	16:51	0:0	6	;
if	17:8	20:8	6	(!strlen (buf ))
cond	17:12	17:23	7	!strlen (buf )
op	17:12	0:0	8	!
call	17:13	17:23	8	strlen
arg	17:20	17:23	9	buf
water	17:20	0:0	10	buf
stmts	17:26	20:8	7	
water	17:26	0:0	8	{
call	18:11	18:22	8	av_free
arg	18:19	18:22	9	buf
water	18:19	0:0	10	buf
water	18:23	0:0	8	;
return	19:11	19:17	8	
water	20:8	0:0	8	}
water	21:4	0:0	6	}
else	21:6	23:4	2
stmts	21:11	23:4	3	
if	21:11	23:4	4	(type == 3 && length == 4)
cond	21:15	21:38	5	type == 3 && length == 4
water	21:15	0:0	6	type
op	21:20	0:0	6	==
water	21:23	0:0	6	3
op	21:25	0:0	6	&&
water	21:28	0:0	6	length
op	21:35	0:0	6	==
water	21:38	0:0	6	4
stmts	21:41	23:4	5	
water	21:41	0:0	6	{
call	22:8	22:52	6	strcpy
arg	22:15	22:18	7	buf
water	22:15	0:0	8	buf
arg	22:20	22:52	7	avio_rl32(pb)?"true":"false"
call	22:20	22:32	8	avio_rl32
arg	22:30	22:32	9	pb
water	22:30	0:0	10	pb
water	22:34	0:0	8	?
water	22:36	0:0	8	"true"
water	22:43	0:0	8	:
water	22:45	0:0	8	"false"
water	22:53	0:0	6	;
water	23:4	0:0	6	}
else	23:6	46:4	2
stmts	23:11	46:4	3	
if	23:11	46:4	4	(type == 4 && length == 8)
cond	23:15	23:38	5	type == 4 && length == 8
water	23:15	0:0	6	type
op	23:20	0:0	6	==
water	23:23	0:0	6	4
op	23:25	0:0	6	&&
water	23:28	0:0	6	length
op	23:35	0:0	6	==
water	23:38	0:0	6	8
stmts	23:41	46:4	5	
water	23:41	0:0	6	{
decl	24:8	24:35	6	int64_t	num
op	24:20	0:0	6	=
call	24:22	24:34	7	avio_rl64
arg	24:32	24:34	8	pb
water	24:32	0:0	9	pb
if	25:8	31:8	6	(!strcmp (key ,"WM/EncodingTime" ) || !strcmp (key ,"WM/MediaOriginalBroadcastDateTime" ))
cond	25:12	26:60	7	!strcmp (key ,"WM/EncodingTime" ) || !strcmp (key ,"WM/MediaOriginalBroadcastDateTime" )
op	25:12	0:0	8	!
call	25:13	25:42	8	strcmp
arg	25:20	25:23	9	key
water	25:20	0:0	10	key
arg	25:25	25:42	9	"WM/EncodingTime"
water	25:25	0:0	10	"WM/EncodingTime"
op	25:44	0:0	8	||
op	26:12	0:0	8	!
call	26:13	26:60	8	strcmp
arg	26:20	26:23	9	key
water	26:20	0:0	10	key
arg	26:25	26:60	9	"WM/MediaOriginalBroadcastDateTime"
water	26:25	0:0	10	"WM/MediaOriginalBroadcastDateTime"
stmts	26:63	31:8	7	
water	26:63	0:0	8	{
if	27:12	30:12	8	(filetime_to_iso8601 (buf ,buf_size ,num ) < 0)
cond	27:16	27:58	9	filetime_to_iso8601 (buf ,buf_size ,num ) < 0
call	27:16	27:54	10	filetime_to_iso8601
arg	27:36	27:39	11	buf
water	27:36	0:0	12	buf
arg	27:41	27:49	11	buf_size
water	27:41	0:0	12	buf_size
arg	27:51	27:54	11	num
water	27:51	0:0	12	num
op	27:56	0:0	10	<
water	27:58	0:0	10	0
stmts	27:61	30:12	9	
water	27:61	0:0	10	{
call	28:16	28:27	10	av_free
arg	28:24	28:27	11	buf
water	28:24	0:0	12	buf
water	28:28	0:0	10	;
return	29:16	29:22	10	
water	30:12	0:0	10	}
water	31:8	0:0	8	}
else	31:10	37:8	6
stmts	31:15	37:8	7	
if	31:15	37:8	8	(!strcmp (key ,"WM/WMRVEncodeTime" ) || !strcmp (key ,"WM/WMRVEndTime" ))
cond	31:19	32:48	9	!strcmp (key ,"WM/WMRVEncodeTime" ) || !strcmp (key ,"WM/WMRVEndTime" )
op	31:19	0:0	10	!
call	31:20	31:51	10	strcmp
arg	31:27	31:30	11	key
water	31:27	0:0	12	key
arg	31:32	31:51	11	"WM/WMRVEncodeTime"
water	31:32	0:0	12	"WM/WMRVEncodeTime"
op	31:53	0:0	10	||
op	32:19	0:0	10	!
call	32:20	32:48	10	strcmp
arg	32:27	32:30	11	key
water	32:27	0:0	12	key
arg	32:32	32:48	11	"WM/WMRVEndTime"
water	32:32	0:0	12	"WM/WMRVEndTime"
stmts	32:51	37:8	9	
water	32:51	0:0	10	{
if	33:12	36:12	10	(crazytime_to_iso8601 (buf ,buf_size ,num ) < 0)
cond	33:16	33:59	11	crazytime_to_iso8601 (buf ,buf_size ,num ) < 0
call	33:16	33:55	12	crazytime_to_iso8601
arg	33:37	33:40	13	buf
water	33:37	0:0	14	buf
arg	33:42	33:50	13	buf_size
water	33:42	0:0	14	buf_size
arg	33:52	33:55	13	num
water	33:52	0:0	14	num
op	33:57	0:0	12	<
water	33:59	0:0	12	0
stmts	33:62	36:12	11	
water	33:62	0:0	12	{
call	34:16	34:27	12	av_free
arg	34:24	34:27	13	buf
water	34:24	0:0	14	buf
water	34:28	0:0	12	;
return	35:16	35:22	12	
water	36:12	0:0	12	}
water	37:8	0:0	10	}
else	37:10	42:8	6
stmts	37:15	42:8	7	
if	37:15	42:8	8	(!strcmp (key ,"WM/WMRVExpirationDate" ))
cond	37:19	37:55	9	!strcmp (key ,"WM/WMRVExpirationDate" )
op	37:19	0:0	10	!
call	37:20	37:55	10	strcmp
arg	37:27	37:30	11	key
water	37:27	0:0	12	key
arg	37:32	37:55	11	"WM/WMRVExpirationDate"
water	37:32	0:0	12	"WM/WMRVExpirationDate"
stmts	37:58	42:8	9	
water	37:58	0:0	10	{
if	38:12	41:12	10	(oledate_to_iso8601 (buf ,buf_size ,num ) < 0)
cond	38:16	38:57	11	oledate_to_iso8601 (buf ,buf_size ,num ) < 0
call	38:16	38:53	12	oledate_to_iso8601
arg	38:35	38:38	13	buf
water	38:35	0:0	14	buf
arg	38:40	38:48	13	buf_size
water	38:40	0:0	14	buf_size
arg	38:50	38:53	13	num
water	38:50	0:0	14	num
op	38:55	0:0	12	<
water	38:57	0:0	12	0
stmts	38:61	41:12	11	
water	38:61	0:0	12	{
call	39:16	39:27	12	av_free
arg	39:24	39:27	13	buf
water	39:24	0:0	14	buf
water	39:28	0:0	12	;
return	40:16	40:22	12	
water	41:12	0:0	12	}
water	42:8	0:0	10	}
else	42:10	43:61	6
stmts	42:15	43:61	7	
if	42:15	43:61	8	(!strcmp (key ,"WM/WMRVBitrate" ))
cond	42:19	42:48	9	!strcmp (key ,"WM/WMRVBitrate" )
op	42:19	0:0	10	!
call	42:20	42:48	10	strcmp
arg	42:27	42:30	11	key
water	42:27	0:0	12	key
arg	42:32	42:48	11	"WM/WMRVBitrate"
water	42:32	0:0	12	"WM/WMRVBitrate"
stmts	43:12	43:61	9	
call	43:12	43:60	10	snprintf
arg	43:21	43:24	11	buf
water	43:21	0:0	12	buf
arg	43:26	43:34	11	buf_size
water	43:26	0:0	12	buf_size
arg	43:36	43:40	11	"%f"
water	43:36	0:0	12	"%f"
arg	43:42	43:60	11	av_int2double(num)
call	43:42	43:59	12	av_int2double
arg	43:56	43:59	13	num
water	43:56	0:0	14	num
water	43:61	0:0	10	;
else	44:8	45:51	6
stmts	45:12	45:51	7	
call	45:12	45:50	8	snprintf
arg	45:21	45:24	9	buf
water	45:21	0:0	10	buf
arg	45:26	45:34	9	buf_size
water	45:26	0:0	10	buf_size
arg	45:36	45:45	9	"%"PRIi64
water	45:36	0:0	10	"%"
water	45:39	0:0	10	PRIi64
arg	45:47	45:50	9	num
water	45:47	0:0	10	num
water	45:51	0:0	8	;
water	46:4	0:0	6	}
else	46:6	48:4	2
stmts	46:11	48:4	3	
if	46:11	48:4	4	(type == 5 && length == 2)
cond	46:15	46:38	5	type == 5 && length == 2
water	46:15	0:0	6	type
op	46:20	0:0	6	==
water	46:23	0:0	6	5
op	46:25	0:0	6	&&
water	46:28	0:0	6	length
op	46:35	0:0	6	==
water	46:38	0:0	6	2
stmts	46:41	48:4	5	
water	46:41	0:0	6	{
call	47:8	47:51	6	snprintf
arg	47:17	47:20	7	buf
water	47:17	0:0	8	buf
arg	47:22	47:30	7	buf_size
water	47:22	0:0	8	buf_size
arg	47:32	47:36	7	"%u"
water	47:32	0:0	8	"%u"
arg	47:38	47:51	7	avio_rl16(pb)
call	47:38	47:50	8	avio_rl16
arg	47:48	47:50	9	pb
water	47:48	0:0	10	pb
water	47:52	0:0	6	;
water	48:4	0:0	6	}
else	48:6	52:4	2
stmts	48:11	52:4	3	
if	48:11	52:4	4	(type == 6 && length == 16)
cond	48:15	48:38	5	type == 6 && length == 16
water	48:15	0:0	6	type
op	48:20	0:0	6	==
water	48:23	0:0	6	6
op	48:25	0:0	6	&&
water	48:28	0:0	6	length
op	48:35	0:0	6	==
water	48:38	0:0	6	16
stmts	48:42	52:4	5	
water	48:42	0:0	6	{
decl	49:8	49:24	6	ff_asf_guid	guid
call	50:8	50:30	6	avio_read
arg	50:18	50:20	7	pb
water	50:18	0:0	8	pb
arg	50:22	50:26	7	guid
water	50:22	0:0	8	guid
arg	50:28	50:30	7	16
water	50:28	0:0	8	16
water	50:31	0:0	6	;
call	51:8	51:70	6	snprintf
arg	51:17	51:20	7	buf
water	51:17	0:0	8	buf
arg	51:22	51:30	7	buf_size
water	51:22	0:0	8	buf_size
arg	51:32	51:47	7	PRI_PRETTY_GUID
water	51:32	0:0	8	PRI_PRETTY_GUID
arg	51:49	51:70	7	ARG_PRETTY_GUID(guid)
call	51:49	51:69	8	ARG_PRETTY_GUID
arg	51:65	51:69	9	guid
water	51:65	0:0	10	guid
water	51:71	0:0	6	;
water	52:4	0:0	6	}
else	52:6	56:4	2
stmts	52:11	56:4	3	
if	52:11	56:4	4	(type == 2 && !strcmp (key ,"WM/Picture" ))
cond	52:15	52:53	5	type == 2 && !strcmp (key ,"WM/Picture" )
water	52:15	0:0	6	type
op	52:20	0:0	6	==
water	52:23	0:0	6	2
op	52:25	0:0	6	&&
op	52:28	0:0	6	!
call	52:29	52:53	6	strcmp
arg	52:36	52:39	7	key
water	52:36	0:0	8	key
arg	52:41	52:53	7	"WM/Picture"
water	52:41	0:0	8	"WM/Picture"
stmts	52:56	56:4	5	
water	52:56	0:0	6	{
call	53:8	53:36	6	get_attachment
arg	53:23	53:24	7	s
water	53:23	0:0	8	s
arg	53:26	53:28	7	pb
water	53:26	0:0	8	pb
arg	53:30	53:36	7	length
water	53:30	0:0	8	length
water	53:37	0:0	6	;
call	54:8	54:21	6	av_freep
arg	54:17	54:21	7	&buf
op	54:17	0:0	8	&
water	54:18	0:0	8	buf
water	54:22	0:0	6	;
return	55:8	55:14	6	
water	56:4	0:0	6	}
else	56:6	61:4	2
stmts	56:11	61:4	3	
water	56:11	0:0	4	{
call	57:8	57:21	4	av_freep
arg	57:17	57:21	5	&buf
op	57:17	0:0	6	&
water	57:18	0:0	6	buf
water	57:22	0:0	4	;
call	58:8	58:113	4	av_log
arg	58:15	58:16	5	s
water	58:15	0:0	6	s
arg	58:18	58:32	5	AV_LOG_WARNING
water	58:18	0:0	6	AV_LOG_WARNING
arg	58:34	58:94	5	"unsupported metadata entry; key:%s, type:%d, length:0x%x\n"
water	58:34	0:0	6	"unsupported metadata entry; key:%s, type:%d, length:0x%x\n"
arg	58:96	58:99	5	key
water	58:96	0:0	6	key
arg	58:101	58:105	5	type
water	58:101	0:0	6	type
arg	58:107	58:113	5	length
water	58:107	0:0	6	length
water	58:114	0:0	4	;
call	59:8	59:28	4	avio_skip
arg	59:18	59:20	5	pb
water	59:18	0:0	6	pb
arg	59:22	59:28	5	length
water	59:22	0:0	6	length
water	59:29	0:0	4	;
return	60:8	60:14	4	
water	61:4	0:0	4	}
call	62:4	62:41	2	av_dict_set
arg	62:16	62:28	3	&s->metadata
op	62:16	0:0	4	&
water	62:17	0:0	4	s
op	62:18	0:0	4	->
water	62:20	0:0	4	metadata
arg	62:30	62:33	3	key
water	62:30	0:0	4	key
arg	62:35	62:38	3	buf
water	62:35	0:0	4	buf
arg	62:40	62:41	3	0
water	62:40	0:0	4	0
water	62:42	0:0	2	;
call	63:4	63:17	2	av_freep
arg	63:13	63:17	3	&buf
op	63:13	0:0	4	&
water	63:14	0:0	4	buf
water	63:18	0:0	2	;
