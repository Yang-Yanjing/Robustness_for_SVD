func	1:0	43:0	0	void	ff_aac_search_for_is
params	1:25	0:0	1	
param	1:26	1:42	2	AACEncContext *	s
param	1:44	1:65	2	AVCodecContext *	avctx
param	1:67	1:86	2	ChannelElement *	cpe
stmnts	0:0	42:26	1	
decl	3:4	3:44	2	SingleChannelElement	*sce0
op	3:31	0:0	2	=
op	3:33	0:0	2	&
water	3:34	0:0	2	cpe
op	3:37	0:0	2	->
water	3:39	0:0	2	ch
op	3:41	0:0	2	[
water	3:42	0:0	2	0
op	3:43	0:0	2	]
decl	4:4	4:44	2	SingleChannelElement	*sce1
op	4:31	0:0	2	=
op	4:33	0:0	2	&
water	4:34	0:0	2	cpe
op	4:37	0:0	2	->
water	4:39	0:0	2	ch
op	4:41	0:0	2	[
water	4:42	0:0	2	1
op	4:43	0:0	2	]
decl	5:4	5:41	2	int	start
op	5:14	0:0	2	=
water	5:16	0:0	2	0
water	5:17	0:0	2	,
decl	5:4	5:41	2	int	count
op	5:25	0:0	2	=
water	5:27	0:0	2	0
water	5:28	0:0	2	,
decl	5:4	5:41	2	int	w
water	5:31	0:0	2	,
decl	5:4	5:41	2	int	w2
water	5:35	0:0	2	,
decl	5:4	5:41	2	int	g
water	5:38	0:0	2	,
decl	5:4	5:41	2	int	i
decl	6:4	6:83	2	const float	freq_mult
op	6:26	0:0	2	=
water	6:28	0:0	2	avctx
op	6:33	0:0	2	->
water	6:35	0:0	2	sample_rate
op	6:46	0:0	2	/
water	6:47	0:0	2	(
water	6:48	0:0	2	1024
op	6:52	0:0	2	.
water	6:53	0:0	2	0
water	6:54	0:0	2	f
op	6:55	0:0	2	/
water	6:56	0:0	2	sce0
op	6:60	0:0	2	->
water	6:62	0:0	2	ics
op	6:65	0:0	2	.
water	6:66	0:0	2	num_windows
water	6:77	0:0	2	)
op	6:78	0:0	2	/
water	6:79	0:0	2	2
op	6:80	0:0	2	.
water	6:81	0:0	2	0
water	6:82	0:0	2	f
if	7:4	8:14	2	(! cpe -> common_window)
cond	7:8	7:14	3	! cpe -> common_window
op	7:8	0:0	4	!
water	7:9	0:0	4	cpe
op	7:12	0:0	4	->
water	7:14	0:0	4	common_window
stmts	8:8	8:14	3	
return	8:8	8:14	4	
for	9:4	41:4	2	(w = 0 ;w < sce0 -> ics . num_windows;w += sce0 -> ics . group_len [ w ])
forinit	9:9	9:14	3	w = 0 ;
water	9:9	0:0	4	w
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:30	3	w < sce0 -> ics . num_windows
water	9:16	0:0	4	w
op	9:18	0:0	4	<
water	9:20	0:0	4	sce0
op	9:24	0:0	4	->
water	9:26	0:0	4	ics
op	9:29	0:0	4	.
water	9:30	0:0	4	num_windows
forexpr	9:43	9:69	3	w += sce0 -> ics . group_len [ w ]
water	9:43	0:0	4	w
op	9:45	0:0	4	+=
water	9:48	0:0	4	sce0
op	9:52	0:0	4	->
water	9:54	0:0	4	ics
op	9:57	0:0	4	.
water	9:58	0:0	4	group_len
op	9:67	0:0	4	[
water	9:68	0:0	4	w
op	9:69	0:0	4	]
stmts	9:72	41:4	3	
water	9:72	0:0	4	{
water	10:8	0:0	4	start
op	10:14	0:0	4	=
water	10:16	0:0	4	0
water	10:17	0:0	4	;
for	11:8	40:8	4	(g = 0 ;g < sce0 -> ics . num_swb;g ++)
forinit	11:13	11:18	5	g = 0 ;
water	11:13	0:0	6	g
op	11:15	0:0	6	=
water	11:17	0:0	6	0
water	11:18	0:0	6	;
cond	11:21	11:35	5	g < sce0 -> ics . num_swb
water	11:21	0:0	6	g
op	11:23	0:0	6	<
water	11:25	0:0	6	sce0
op	11:29	0:0	6	->
water	11:31	0:0	6	ics
op	11:34	0:0	6	.
water	11:35	0:0	6	num_swb
forexpr	11:44	11:45	5	g ++
water	11:44	0:0	6	g
op	11:45	0:0	6	++
stmts	11:49	40:8	5	
water	11:49	0:0	6	{
if	12:12	38:12	6	(start * freq_mult > INT_STEREO_LOW_LIMIT * ( s -> lambda / 170 . 0 f ) && cpe -> ch [ 0 ] . band_type [ w * 16 + g ] != NOISE_BT && ! cpe -> ch [ 0 ] . zeroes [ w * 16 + g ] && cpe -> ch [ 1 ] . band_type [ w * 16 + g ] != NOISE_BT && ! cpe -> ch [ 1 ] . zeroes [ w * 16 + g ])
cond	12:16	14:85	7	start * freq_mult > INT_STEREO_LOW_LIMIT * ( s -> lambda / 170 . 0 f ) && cpe -> ch [ 0 ] . band_type [ w * 16 + g ] != NOISE_BT && ! cpe -> ch [ 0 ] . zeroes [ w * 16 + g ] && cpe -> ch [ 1 ] . band_type [ w * 16 + g ] != NOISE_BT && ! cpe -> ch [ 1 ] . zeroes [ w * 16 + g ]
water	12:16	0:0	8	start
op	12:21	0:0	8	*
water	12:22	0:0	8	freq_mult
op	12:32	0:0	8	>
water	12:34	0:0	8	INT_STEREO_LOW_LIMIT
op	12:54	0:0	8	*
water	12:55	0:0	8	(
water	12:56	0:0	8	s
op	12:57	0:0	8	->
water	12:59	0:0	8	lambda
op	12:65	0:0	8	/
water	12:66	0:0	8	170
op	12:69	0:0	8	.
water	12:70	0:0	8	0
water	12:71	0:0	8	f
water	12:72	0:0	8	)
op	12:74	0:0	8	&&
water	13:16	0:0	8	cpe
op	13:19	0:0	8	->
water	13:21	0:0	8	ch
op	13:23	0:0	8	[
water	13:24	0:0	8	0
op	13:25	0:0	8	]
op	13:26	0:0	8	.
water	13:27	0:0	8	band_type
op	13:36	0:0	8	[
water	13:37	0:0	8	w
op	13:38	0:0	8	*
water	13:39	0:0	8	16
op	13:41	0:0	8	+
water	13:42	0:0	8	g
op	13:43	0:0	8	]
op	13:45	0:0	8	!=
water	13:48	0:0	8	NOISE_BT
op	13:57	0:0	8	&&
op	13:60	0:0	8	!
water	13:61	0:0	8	cpe
op	13:64	0:0	8	->
water	13:66	0:0	8	ch
op	13:68	0:0	8	[
water	13:69	0:0	8	0
op	13:70	0:0	8	]
op	13:71	0:0	8	.
water	13:72	0:0	8	zeroes
op	13:78	0:0	8	[
water	13:79	0:0	8	w
op	13:80	0:0	8	*
water	13:81	0:0	8	16
op	13:83	0:0	8	+
water	13:84	0:0	8	g
op	13:85	0:0	8	]
op	13:87	0:0	8	&&
water	14:16	0:0	8	cpe
op	14:19	0:0	8	->
water	14:21	0:0	8	ch
op	14:23	0:0	8	[
water	14:24	0:0	8	1
op	14:25	0:0	8	]
op	14:26	0:0	8	.
water	14:27	0:0	8	band_type
op	14:36	0:0	8	[
water	14:37	0:0	8	w
op	14:38	0:0	8	*
water	14:39	0:0	8	16
op	14:41	0:0	8	+
water	14:42	0:0	8	g
op	14:43	0:0	8	]
op	14:45	0:0	8	!=
water	14:48	0:0	8	NOISE_BT
op	14:57	0:0	8	&&
op	14:60	0:0	8	!
water	14:61	0:0	8	cpe
op	14:64	0:0	8	->
water	14:66	0:0	8	ch
op	14:68	0:0	8	[
water	14:69	0:0	8	1
op	14:70	0:0	8	]
op	14:71	0:0	8	.
water	14:72	0:0	8	zeroes
op	14:78	0:0	8	[
water	14:79	0:0	8	w
op	14:80	0:0	8	*
water	14:81	0:0	8	16
op	14:83	0:0	8	+
water	14:84	0:0	8	g
op	14:85	0:0	8	]
stmts	14:88	38:12	7	
water	14:88	0:0	8	{
decl	15:16	15:63	8	float	ener0
op	15:28	0:0	8	=
water	15:30	0:0	8	0
op	15:31	0:0	8	.
water	15:32	0:0	8	0
water	15:33	0:0	8	f
water	15:34	0:0	8	,
decl	15:16	15:63	8	float	ener1
op	15:42	0:0	8	=
water	15:44	0:0	8	0
op	15:45	0:0	8	.
water	15:46	0:0	8	0
water	15:47	0:0	8	f
water	15:48	0:0	8	,
decl	15:16	15:63	8	float	ener01
op	15:57	0:0	8	=
water	15:59	0:0	8	0
op	15:60	0:0	8	.
water	15:61	0:0	8	0
water	15:62	0:0	8	f
decl	16:16	16:56	8	struct AACISError	ph_err1
water	16:41	0:0	8	,
decl	16:16	16:56	8	struct AACISError	ph_err2
water	16:50	0:0	8	,
decl	16:16	16:56	8	struct AACISError	*erf
for	17:16	25:16	8	(w2 = 0 ;w2 < sce0 -> ics . group_len [ w ];w2 ++)
forinit	17:21	17:27	9	w2 = 0 ;
water	17:21	0:0	10	w2
op	17:24	0:0	10	=
water	17:26	0:0	10	0
water	17:27	0:0	10	;
cond	17:29	17:55	9	w2 < sce0 -> ics . group_len [ w ]
water	17:29	0:0	10	w2
op	17:32	0:0	10	<
water	17:34	0:0	10	sce0
op	17:38	0:0	10	->
water	17:40	0:0	10	ics
op	17:43	0:0	10	.
water	17:44	0:0	10	group_len
op	17:53	0:0	10	[
water	17:54	0:0	10	w
op	17:55	0:0	10	]
forexpr	17:58	17:60	9	w2 ++
water	17:58	0:0	10	w2
op	17:60	0:0	10	++
stmts	17:64	25:16	9	
water	17:64	0:0	10	{
for	18:20	24:20	10	(i = 0 ;i < sce0 -> ics . swb_sizes [ g ];i ++)
forinit	18:25	18:30	11	i = 0 ;
water	18:25	0:0	12	i
op	18:27	0:0	12	=
water	18:29	0:0	12	0
water	18:30	0:0	12	;
cond	18:32	18:57	11	i < sce0 -> ics . swb_sizes [ g ]
water	18:32	0:0	12	i
op	18:34	0:0	12	<
water	18:36	0:0	12	sce0
op	18:40	0:0	12	->
water	18:42	0:0	12	ics
op	18:45	0:0	12	.
water	18:46	0:0	12	swb_sizes
op	18:55	0:0	12	[
water	18:56	0:0	12	g
op	18:57	0:0	12	]
forexpr	18:60	18:61	11	i ++
water	18:60	0:0	12	i
op	18:61	0:0	12	++
stmts	18:65	24:20	11	
water	18:65	0:0	12	{
decl	19:24	19:71	12	float	coef0
op	19:36	0:0	12	=
water	19:38	0:0	12	sce0
op	19:42	0:0	12	->
water	19:44	0:0	12	pcoeffs
op	19:51	0:0	12	[
water	19:52	0:0	12	start
op	19:57	0:0	12	+
water	19:58	0:0	12	(
water	19:59	0:0	12	w
op	19:60	0:0	12	+
water	19:61	0:0	12	w2
water	19:63	0:0	12	)
op	19:64	0:0	12	*
water	19:65	0:0	12	128
op	19:68	0:0	12	+
water	19:69	0:0	12	i
op	19:70	0:0	12	]
decl	20:24	20:71	12	float	coef1
op	20:36	0:0	12	=
water	20:38	0:0	12	sce1
op	20:42	0:0	12	->
water	20:44	0:0	12	pcoeffs
op	20:51	0:0	12	[
water	20:52	0:0	12	start
op	20:57	0:0	12	+
water	20:58	0:0	12	(
water	20:59	0:0	12	w
op	20:60	0:0	12	+
water	20:61	0:0	12	w2
water	20:63	0:0	12	)
op	20:64	0:0	12	*
water	20:65	0:0	12	128
op	20:68	0:0	12	+
water	20:69	0:0	12	i
op	20:70	0:0	12	]
water	21:24	0:0	12	ener0
op	21:31	0:0	12	+=
water	21:34	0:0	12	coef0
op	21:39	0:0	12	*
water	21:40	0:0	12	coef0
water	21:45	0:0	12	;
water	22:24	0:0	12	ener1
op	22:31	0:0	12	+=
water	22:34	0:0	12	coef1
op	22:39	0:0	12	*
water	22:40	0:0	12	coef1
water	22:45	0:0	12	;
water	23:24	0:0	12	ener01
op	23:31	0:0	12	+=
water	23:34	0:0	12	(
water	23:35	0:0	12	coef0
op	23:41	0:0	12	+
water	23:43	0:0	12	coef1
water	23:48	0:0	12	)
op	23:49	0:0	12	*
water	23:50	0:0	12	(
water	23:51	0:0	12	coef0
op	23:57	0:0	12	+
water	23:59	0:0	12	coef1
water	23:64	0:0	12	)
water	23:65	0:0	12	;
water	24:20	0:0	12	}
water	25:16	0:0	10	}
water	26:16	0:0	8	ph_err1
op	26:24	0:0	8	=
call	26:26	27:76	8	ff_aac_is_encoding_err
arg	26:49	26:50	9	s
water	26:49	0:0	10	s
arg	26:52	26:55	9	cpe
water	26:52	0:0	10	cpe
arg	26:57	26:62	9	start
water	26:57	0:0	10	start
arg	26:64	26:65	9	w
water	26:64	0:0	10	w
arg	26:67	26:68	9	g
water	26:67	0:0	10	g
arg	27:49	27:54	9	ener0
water	27:49	0:0	10	ener0
arg	27:56	27:61	9	ener1
water	27:56	0:0	10	ener1
arg	27:63	27:69	9	ener01
water	27:63	0:0	10	ener01
arg	27:71	27:72	9	0
water	27:71	0:0	10	0
arg	27:74	27:76	9	-1
op	27:74	0:0	10	-
water	27:75	0:0	10	1
water	27:77	0:0	8	;
water	28:16	0:0	8	ph_err2
op	28:24	0:0	8	=
call	28:26	29:76	8	ff_aac_is_encoding_err
arg	28:49	28:50	9	s
water	28:49	0:0	10	s
arg	28:52	28:55	9	cpe
water	28:52	0:0	10	cpe
arg	28:57	28:62	9	start
water	28:57	0:0	10	start
arg	28:64	28:65	9	w
water	28:64	0:0	10	w
arg	28:67	28:68	9	g
water	28:67	0:0	10	g
arg	29:49	29:54	9	ener0
water	29:49	0:0	10	ener0
arg	29:56	29:61	9	ener1
water	29:56	0:0	10	ener1
arg	29:63	29:69	9	ener01
water	29:63	0:0	10	ener01
arg	29:71	29:72	9	0
water	29:71	0:0	10	0
arg	29:74	29:76	9	+1
op	29:74	0:0	10	+
water	29:75	0:0	10	1
water	29:77	0:0	8	;
water	30:16	0:0	8	erf
op	30:20	0:0	8	=
water	30:22	0:0	8	ph_err1
op	30:29	0:0	8	.
water	30:30	0:0	8	error
op	30:36	0:0	8	<
water	30:38	0:0	8	ph_err2
op	30:45	0:0	8	.
water	30:46	0:0	8	error
water	30:52	0:0	8	?
op	30:54	0:0	8	&
water	30:55	0:0	8	ph_err1
water	30:63	0:0	8	:
op	30:65	0:0	8	&
water	30:66	0:0	8	ph_err2
water	30:73	0:0	8	;
if	31:16	37:16	8	(erf -> pass)
cond	31:20	31:25	9	erf -> pass
water	31:20	0:0	10	erf
op	31:23	0:0	10	->
water	31:25	0:0	10	pass
stmts	31:31	37:16	9	
water	31:31	0:0	10	{
water	32:20	0:0	10	cpe
op	32:23	0:0	10	->
water	32:25	0:0	10	is_mask
op	32:32	0:0	10	[
water	32:33	0:0	10	w
op	32:34	0:0	10	*
water	32:35	0:0	10	16
op	32:37	0:0	10	+
water	32:38	0:0	10	g
op	32:39	0:0	10	]
op	32:41	0:0	10	=
water	32:43	0:0	10	1
water	32:44	0:0	10	;
water	33:20	0:0	10	cpe
op	33:23	0:0	10	->
water	33:25	0:0	10	ch
op	33:27	0:0	10	[
water	33:28	0:0	10	0
op	33:29	0:0	10	]
op	33:30	0:0	10	.
water	33:31	0:0	10	is_ener
op	33:38	0:0	10	[
water	33:39	0:0	10	w
op	33:40	0:0	10	*
water	33:41	0:0	10	16
op	33:43	0:0	10	+
water	33:44	0:0	10	g
op	33:45	0:0	10	]
op	33:47	0:0	10	=
call	33:49	33:66	10	sqrt
arg	33:54	33:66	11	ener0/ener01
water	33:54	0:0	12	ener0
op	33:59	0:0	12	/
water	33:60	0:0	12	ener01
water	33:67	0:0	10	;
water	34:20	0:0	10	cpe
op	34:23	0:0	10	->
water	34:25	0:0	10	ch
op	34:27	0:0	10	[
water	34:28	0:0	10	1
op	34:29	0:0	10	]
op	34:30	0:0	10	.
water	34:31	0:0	10	is_ener
op	34:38	0:0	10	[
water	34:39	0:0	10	w
op	34:40	0:0	10	*
water	34:41	0:0	10	16
op	34:43	0:0	10	+
water	34:44	0:0	10	g
op	34:45	0:0	10	]
op	34:47	0:0	10	=
water	34:49	0:0	10	ener0
op	34:54	0:0	10	/
water	34:55	0:0	10	ener1
water	34:60	0:0	10	;
water	35:20	0:0	10	cpe
op	35:23	0:0	10	->
water	35:25	0:0	10	ch
op	35:27	0:0	10	[
water	35:28	0:0	10	1
op	35:29	0:0	10	]
op	35:30	0:0	10	.
water	35:31	0:0	10	band_type
op	35:40	0:0	10	[
water	35:41	0:0	10	w
op	35:42	0:0	10	*
water	35:43	0:0	10	16
op	35:45	0:0	10	+
water	35:46	0:0	10	g
op	35:47	0:0	10	]
op	35:49	0:0	10	=
water	35:51	0:0	10	erf
op	35:54	0:0	10	->
water	35:56	0:0	10	phase
water	35:62	0:0	10	?
water	35:64	0:0	10	INTENSITY_BT
water	35:77	0:0	10	:
water	35:79	0:0	10	INTENSITY_BT2
water	35:92	0:0	10	;
water	36:20	0:0	10	count
op	36:25	0:0	10	++
water	36:27	0:0	10	;
water	37:16	0:0	10	}
water	38:12	0:0	8	}
water	39:12	0:0	6	start
op	39:18	0:0	6	+=
water	39:21	0:0	6	sce0
op	39:25	0:0	6	->
water	39:27	0:0	6	ics
op	39:30	0:0	6	.
water	39:31	0:0	6	swb_sizes
op	39:40	0:0	6	[
water	39:41	0:0	6	g
op	39:42	0:0	6	]
water	39:43	0:0	6	;
water	40:8	0:0	6	}
water	41:4	0:0	4	}
water	42:4	0:0	2	cpe
op	42:7	0:0	2	->
water	42:9	0:0	2	is_mode
op	42:17	0:0	2	=
op	42:19	0:0	2	!
op	42:20	0:0	2	!
water	42:21	0:0	2	count
water	42:26	0:0	2	;
