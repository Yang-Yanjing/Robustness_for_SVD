func	1:0	65:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	64:14	1	
decl	3:4	3:50	2	enum AVPixelFormat	srcFormat
op	3:33	0:0	2	=
water	3:35	0:0	2	AV_PIX_FMT_NONE
decl	4:4	4:50	2	enum AVPixelFormat	dstFormat
op	4:33	0:0	2	=
water	4:35	0:0	2	AV_PIX_FMT_NONE
decl	5:4	5:46	2	uint8_t	*rgb_data
op	5:24	0:0	2	=
call	5:26	5:45	3	av_malloc
arg	5:36	5:45	4	W*H*4
water	5:36	0:0	5	W
op	5:38	0:0	5	*
water	5:40	0:0	5	H
op	5:42	0:0	5	*
water	5:44	0:0	5	4
water	6:4	0:0	2	const
water	6:10	0:0	2	uint8_t
op	6:18	0:0	2	*
water	6:20	0:0	2	const
water	6:26	0:0	2	rgb_src
op	6:33	0:0	2	[
water	6:34	0:0	2	4
op	6:35	0:0	2	]
op	6:37	0:0	2	=
water	6:39	0:0	2	{
water	6:41	0:0	2	rgb_data
water	6:49	0:0	2	,
water	6:51	0:0	2	NULL
water	6:55	0:0	2	,
water	6:57	0:0	2	NULL
water	6:61	0:0	2	,
water	6:63	0:0	2	NULL
water	6:68	0:0	2	}
water	6:69	0:0	2	;
decl	7:4	7:44	2	int	rgb_stride[4]
op	7:24	0:0	2	=
water	7:26	0:0	2	{
water	7:28	0:0	2	4
op	7:30	0:0	2	*
water	7:32	0:0	2	W
water	7:33	0:0	2	,
water	7:35	0:0	2	0
water	7:36	0:0	2	,
water	7:38	0:0	2	0
water	7:39	0:0	2	,
water	7:41	0:0	2	0
water	7:43	0:0	2	}
decl	8:4	8:46	2	uint8_t	*data
op	8:24	0:0	2	=
call	8:26	8:45	3	av_malloc
arg	8:36	8:45	4	4*W*H
water	8:36	0:0	5	4
op	8:38	0:0	5	*
water	8:40	0:0	5	W
op	8:42	0:0	5	*
water	8:44	0:0	5	H
decl	9:4	9:84	2	uint8_t	*src[4]
op	9:24	0:0	2	=
water	9:26	0:0	2	{
water	9:28	0:0	2	data
water	9:32	0:0	2	,
water	9:34	0:0	2	data
op	9:39	0:0	2	+
water	9:41	0:0	2	W
op	9:43	0:0	2	*
water	9:45	0:0	2	H
water	9:46	0:0	2	,
water	9:48	0:0	2	data
op	9:53	0:0	2	+
water	9:55	0:0	2	W
op	9:57	0:0	2	*
water	9:59	0:0	2	H
op	9:61	0:0	2	*
water	9:63	0:0	2	2
water	9:64	0:0	2	,
water	9:66	0:0	2	data
op	9:71	0:0	2	+
water	9:73	0:0	2	W
op	9:75	0:0	2	*
water	9:77	0:0	2	H
op	9:79	0:0	2	*
water	9:81	0:0	2	3
water	9:83	0:0	2	}
decl	10:4	10:40	2	int	stride[4]
op	10:24	0:0	2	=
water	10:26	0:0	2	{
water	10:28	0:0	2	W
water	10:29	0:0	2	,
water	10:31	0:0	2	W
water	10:32	0:0	2	,
water	10:34	0:0	2	W
water	10:35	0:0	2	,
water	10:37	0:0	2	W
water	10:39	0:0	2	}
decl	11:4	11:12	2	int	x
water	11:9	0:0	2	,
decl	11:4	11:12	2	int	y
decl	12:4	12:26	2	struct SwsContext	*sws
decl	13:4	13:14	2	AVLFG	rand
decl	14:4	14:16	2	int	res
op	14:12	0:0	2	=
op	14:14	0:0	2	-
water	14:15	0:0	2	1
decl	15:4	15:9	2	int	i
decl	16:4	16:19	2	FILE	*fp
op	16:13	0:0	2	=
water	16:15	0:0	2	NULL
if	17:4	18:17	2	(! rgb_data || ! data)
cond	17:8	17:22	3	! rgb_data || ! data
op	17:8	0:0	4	!
water	17:9	0:0	4	rgb_data
op	17:18	0:0	4	||
op	17:21	0:0	4	!
water	17:22	0:0	4	data
stmts	18:8	18:17	3	
return	18:8	18:17	4	-1
op	18:15	0:0	5	-
water	18:16	0:0	5	1
for	19:4	45:4	2	(i = 1 ;i < argc;i += 2)
forinit	19:9	19:14	3	i = 1 ;
water	19:9	0:0	4	i
op	19:11	0:0	4	=
water	19:13	0:0	4	1
water	19:14	0:0	4	;
cond	19:16	19:20	3	i < argc
water	19:16	0:0	4	i
op	19:18	0:0	4	<
water	19:20	0:0	4	argc
forexpr	19:26	19:31	3	i += 2
water	19:26	0:0	4	i
op	19:28	0:0	4	+=
water	19:31	0:0	4	2
stmts	19:34	45:4	3	
water	19:34	0:0	4	{
if	20:8	21:27	4	(argv [ i ] [ 0 ] != '-' || i + 1 == argc)
cond	20:12	20:42	5	argv [ i ] [ 0 ] != '-' || i + 1 == argc
water	20:12	0:0	6	argv
op	20:16	0:0	6	[
water	20:17	0:0	6	i
op	20:18	0:0	6	]
op	20:19	0:0	6	[
water	20:20	0:0	6	0
op	20:21	0:0	6	]
op	20:23	0:0	6	!=
water	20:26	0:0	6	'-'
op	20:30	0:0	6	||
water	20:33	0:0	6	i
op	20:35	0:0	6	+
water	20:37	0:0	6	1
op	20:39	0:0	6	==
water	20:42	0:0	6	argc
stmts	21:12	21:27	5	
goto	21:12	21:27	6	bad_option
water	21:17	0:0	7	bad_option
if	22:8	28:8	4	(!strcmp (argv [ i ] ,"-ref" ))
cond	22:12	22:35	5	!strcmp (argv [ i ] ,"-ref" )
op	22:12	0:0	6	!
call	22:13	22:35	6	strcmp
arg	22:20	22:27	7	argv[i]
water	22:20	0:0	8	argv
op	22:24	0:0	8	[
water	22:25	0:0	8	i
op	22:26	0:0	8	]
arg	22:29	22:35	7	"-ref"
water	22:29	0:0	8	"-ref"
stmts	22:38	28:8	5	
water	22:38	0:0	6	{
water	23:12	0:0	6	fp
op	23:15	0:0	6	=
call	23:17	23:39	6	fopen
arg	23:23	23:34	7	argv[i+1]
water	23:23	0:0	8	argv
op	23:27	0:0	8	[
water	23:28	0:0	8	i
op	23:30	0:0	8	+
water	23:32	0:0	8	1
op	23:33	0:0	8	]
arg	23:36	23:39	7	"r"
water	23:36	0:0	8	"r"
water	23:40	0:0	6	;
if	24:12	27:12	6	(! fp)
cond	24:16	24:17	7	! fp
op	24:16	0:0	8	!
water	24:17	0:0	8	fp
stmts	24:21	27:12	7	
water	24:21	0:0	8	{
call	25:16	25:68	8	fprintf
arg	25:24	25:30	9	stderr
water	25:24	0:0	10	stderr
arg	25:32	25:55	9	"could not open '%s'\n"
water	25:32	0:0	10	"could not open '%s'\n"
arg	25:57	25:68	9	argv[i+1]
water	25:57	0:0	10	argv
op	25:61	0:0	10	[
water	25:62	0:0	10	i
op	25:64	0:0	10	+
water	25:66	0:0	10	1
op	25:67	0:0	10	]
water	25:69	0:0	8	;
goto	26:16	26:26	8	error
water	26:21	0:0	9	error
water	27:12	0:0	8	}
water	28:8	0:0	6	}
else	28:10	34:8	4
stmts	28:15	34:8	5	
if	28:15	34:8	6	(!strcmp (argv [ i ] ,"-src" ))
cond	28:19	28:42	7	!strcmp (argv [ i ] ,"-src" )
op	28:19	0:0	8	!
call	28:20	28:42	8	strcmp
arg	28:27	28:34	9	argv[i]
water	28:27	0:0	10	argv
op	28:31	0:0	10	[
water	28:32	0:0	10	i
op	28:33	0:0	10	]
arg	28:36	28:42	9	"-src"
water	28:36	0:0	10	"-src"
stmts	28:45	34:8	7	
water	28:45	0:0	8	{
water	29:12	0:0	8	srcFormat
op	29:22	0:0	8	=
call	29:24	29:50	8	av_get_pix_fmt
arg	29:39	29:50	9	argv[i+1]
water	29:39	0:0	10	argv
op	29:43	0:0	10	[
water	29:44	0:0	10	i
op	29:46	0:0	10	+
water	29:48	0:0	10	1
op	29:49	0:0	10	]
water	29:51	0:0	8	;
if	30:12	33:12	8	(srcFormat == AV_PIX_FMT_NONE)
cond	30:16	30:29	9	srcFormat == AV_PIX_FMT_NONE
water	30:16	0:0	10	srcFormat
op	30:26	0:0	10	==
water	30:29	0:0	10	AV_PIX_FMT_NONE
stmts	30:46	33:12	9	
water	30:46	0:0	10	{
call	31:16	31:72	10	fprintf
arg	31:24	31:30	11	stderr
water	31:24	0:0	12	stderr
arg	31:32	31:59	11	"invalid pixel format %s\n"
water	31:32	0:0	12	"invalid pixel format %s\n"
arg	31:61	31:72	11	argv[i+1]
water	31:61	0:0	12	argv
op	31:65	0:0	12	[
water	31:66	0:0	12	i
op	31:68	0:0	12	+
water	31:70	0:0	12	1
op	31:71	0:0	12	]
water	31:73	0:0	10	;
return	32:16	32:25	10	-1
op	32:23	0:0	11	-
water	32:24	0:0	11	1
water	33:12	0:0	10	}
water	34:8	0:0	8	}
else	34:10	40:8	4
stmts	34:15	40:8	5	
if	34:15	40:8	6	(!strcmp (argv [ i ] ,"-dst" ))
cond	34:19	34:42	7	!strcmp (argv [ i ] ,"-dst" )
op	34:19	0:0	8	!
call	34:20	34:42	8	strcmp
arg	34:27	34:34	9	argv[i]
water	34:27	0:0	10	argv
op	34:31	0:0	10	[
water	34:32	0:0	10	i
op	34:33	0:0	10	]
arg	34:36	34:42	9	"-dst"
water	34:36	0:0	10	"-dst"
stmts	34:45	40:8	7	
water	34:45	0:0	8	{
water	35:12	0:0	8	dstFormat
op	35:22	0:0	8	=
call	35:24	35:50	8	av_get_pix_fmt
arg	35:39	35:50	9	argv[i+1]
water	35:39	0:0	10	argv
op	35:43	0:0	10	[
water	35:44	0:0	10	i
op	35:46	0:0	10	+
water	35:48	0:0	10	1
op	35:49	0:0	10	]
water	35:51	0:0	8	;
if	36:12	39:12	8	(dstFormat == AV_PIX_FMT_NONE)
cond	36:16	36:29	9	dstFormat == AV_PIX_FMT_NONE
water	36:16	0:0	10	dstFormat
op	36:26	0:0	10	==
water	36:29	0:0	10	AV_PIX_FMT_NONE
stmts	36:46	39:12	9	
water	36:46	0:0	10	{
call	37:16	37:72	10	fprintf
arg	37:24	37:30	11	stderr
water	37:24	0:0	12	stderr
arg	37:32	37:59	11	"invalid pixel format %s\n"
water	37:32	0:0	12	"invalid pixel format %s\n"
arg	37:61	37:72	11	argv[i+1]
water	37:61	0:0	12	argv
op	37:65	0:0	12	[
water	37:66	0:0	12	i
op	37:68	0:0	12	+
water	37:70	0:0	12	1
op	37:71	0:0	12	]
water	37:73	0:0	10	;
return	38:16	38:25	10	-1
op	38:23	0:0	11	-
water	38:24	0:0	11	1
water	39:12	0:0	10	}
water	40:8	0:0	8	}
else	40:10	44:8	4
stmts	40:15	44:8	5	
water	40:15	0:0	6	{
label	41:0	41:10	6	bad_option :
call	42:12	42:76	6	fprintf
arg	42:20	42:26	7	stderr
water	42:20	0:0	8	stderr
arg	42:28	42:67	7	"bad option or argument missing (%s)\n"
water	42:28	0:0	8	"bad option or argument missing (%s)\n"
arg	42:69	42:76	7	argv[i]
water	42:69	0:0	8	argv
op	42:73	0:0	8	[
water	42:74	0:0	8	i
op	42:75	0:0	8	]
water	42:77	0:0	6	;
goto	43:12	43:22	6	error
water	43:17	0:0	7	error
water	44:8	0:0	6	}
water	45:4	0:0	4	}
water	46:4	0:0	2	sws
op	46:8	0:0	2	=
call	46:10	47:76	2	sws_getContext
arg	46:25	46:31	3	W/12
water	46:25	0:0	4	W
op	46:27	0:0	4	/
water	46:29	0:0	4	12
arg	46:33	46:39	3	H/12
water	46:33	0:0	4	H
op	46:35	0:0	4	/
water	46:37	0:0	4	12
arg	46:41	46:57	3	AV_PIX_FMT_RGB32
water	46:41	0:0	4	AV_PIX_FMT_RGB32
arg	46:59	46:60	3	W
water	46:59	0:0	4	W
arg	46:62	46:63	3	H
water	46:62	0:0	4	H
arg	47:25	47:44	3	AV_PIX_FMT_YUVA420P
water	47:25	0:0	4	AV_PIX_FMT_YUVA420P
arg	47:46	47:58	3	SWS_BILINEAR
water	47:46	0:0	4	SWS_BILINEAR
arg	47:60	47:64	3	NULL
water	47:60	0:0	4	NULL
arg	47:66	47:70	3	NULL
water	47:66	0:0	4	NULL
arg	47:72	47:76	3	NULL
water	47:72	0:0	4	NULL
water	47:77	0:0	2	;
call	48:4	48:24	2	av_lfg_init
arg	48:16	48:21	3	&rand
op	48:16	0:0	4	&
water	48:17	0:0	4	rand
arg	48:23	48:24	3	1
water	48:23	0:0	4	1
water	48:25	0:0	2	;
for	49:4	51:56	2	(y = 0 ;y < H;y ++)
forinit	49:9	49:14	3	y = 0 ;
water	49:9	0:0	4	y
op	49:11	0:0	4	=
water	49:13	0:0	4	0
water	49:14	0:0	4	;
cond	49:16	49:20	3	y < H
water	49:16	0:0	4	y
op	49:18	0:0	4	<
water	49:20	0:0	4	H
forexpr	49:23	49:24	3	y ++
water	49:23	0:0	4	y
op	49:24	0:0	4	++
stmts	50:8	51:56	3	
for	50:8	51:56	4	(x = 0 ;x < W * 4;x ++)
forinit	50:13	50:18	5	x = 0 ;
water	50:13	0:0	6	x
op	50:15	0:0	6	=
water	50:17	0:0	6	0
water	50:18	0:0	6	;
cond	50:20	50:28	5	x < W * 4
water	50:20	0:0	6	x
op	50:22	0:0	6	<
water	50:24	0:0	6	W
op	50:26	0:0	6	*
water	50:28	0:0	6	4
forexpr	50:31	50:32	5	x ++
water	50:31	0:0	6	x
op	50:32	0:0	6	++
stmts	51:12	51:56	5	
water	51:12	0:0	6	rgb_data
op	51:20	0:0	6	[
water	51:22	0:0	6	x
op	51:24	0:0	6	+
water	51:26	0:0	6	y
op	51:28	0:0	6	*
water	51:30	0:0	6	4
op	51:32	0:0	6	*
water	51:34	0:0	6	W
op	51:35	0:0	6	]
op	51:37	0:0	6	=
call	51:39	51:55	6	av_lfg_get
arg	51:50	51:55	7	&rand
op	51:50	0:0	8	&
water	51:51	0:0	8	rand
water	51:56	0:0	6	;
call	52:4	52:62	2	sws_scale
arg	52:14	52:17	3	sws
water	52:14	0:0	4	sws
arg	52:19	52:26	3	rgb_src
water	52:19	0:0	4	rgb_src
arg	52:28	52:38	3	rgb_stride
water	52:28	0:0	4	rgb_stride
arg	52:40	52:41	3	0
water	52:40	0:0	4	0
arg	52:43	52:49	3	H/12
water	52:43	0:0	4	H
op	52:45	0:0	4	/
water	52:47	0:0	4	12
arg	52:51	52:54	3	src
water	52:51	0:0	4	src
arg	52:56	52:62	3	stride
water	52:56	0:0	4	stride
water	52:63	0:0	2	;
call	53:4	53:23	2	sws_freeContext
arg	53:20	53:23	3	sws
water	53:20	0:0	4	sws
water	53:24	0:0	2	;
call	54:4	54:20	2	av_free
arg	54:12	54:20	3	rgb_data
water	54:12	0:0	4	rgb_data
water	54:21	0:0	2	;
if	55:4	58:4	2	(fp)
cond	55:7	55:7	3	fp
water	55:7	0:0	4	fp
stmts	55:11	58:4	3	
water	55:11	0:0	4	{
water	56:8	0:0	4	res
op	56:12	0:0	4	=
call	56:14	56:66	4	fileTest
arg	56:23	56:26	5	src
water	56:23	0:0	6	src
arg	56:28	56:34	5	stride
water	56:28	0:0	6	stride
arg	56:36	56:37	5	W
water	56:36	0:0	6	W
arg	56:39	56:40	5	H
water	56:39	0:0	6	H
arg	56:42	56:44	5	fp
water	56:42	0:0	6	fp
arg	56:46	56:55	5	srcFormat
water	56:46	0:0	6	srcFormat
arg	56:57	56:66	5	dstFormat
water	56:57	0:0	6	dstFormat
water	56:67	0:0	4	;
call	57:8	57:17	4	fclose
arg	57:15	57:17	5	fp
water	57:15	0:0	6	fp
water	57:18	0:0	4	;
water	58:4	0:0	4	}
else	58:6	61:4	2
stmts	58:11	61:4	3	
water	58:11	0:0	4	{
call	59:8	59:56	4	selfTest
arg	59:17	59:20	5	src
water	59:17	0:0	6	src
arg	59:22	59:28	5	stride
water	59:22	0:0	6	stride
arg	59:30	59:31	5	W
water	59:30	0:0	6	W
arg	59:33	59:34	5	H
water	59:33	0:0	6	H
arg	59:36	59:45	5	srcFormat
water	59:36	0:0	6	srcFormat
arg	59:47	59:56	5	dstFormat
water	59:47	0:0	6	dstFormat
water	59:57	0:0	4	;
water	60:8	0:0	4	res
op	60:12	0:0	4	=
water	60:14	0:0	4	0
water	60:15	0:0	4	;
water	61:4	0:0	4	}
label	62:0	62:5	2	error :
call	63:4	63:16	2	av_free
arg	63:12	63:16	3	data
water	63:12	0:0	4	data
water	63:17	0:0	2	;
return	64:4	64:14	2	res
water	64:11	0:0	3	res
