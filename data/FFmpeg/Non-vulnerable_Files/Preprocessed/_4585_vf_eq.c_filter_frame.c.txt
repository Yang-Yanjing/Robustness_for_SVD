func	1:0	40:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:57	2	AVFrame *	in
stmnts	0:0	39:40	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:51	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	inlink
op	4:34	0:0	2	->
water	4:36	0:0	2	dst
op	4:39	0:0	2	->
water	4:41	0:0	2	outputs
op	4:48	0:0	2	[
water	4:49	0:0	2	0
op	4:50	0:0	2	]
decl	5:4	5:29	2	EQContext	*eq
op	5:18	0:0	2	=
water	5:20	0:0	2	ctx
op	5:23	0:0	2	->
water	5:25	0:0	2	priv
decl	6:4	6:16	2	AVFrame	*out
decl	7:4	7:42	2	int64_t	pos
op	7:16	0:0	2	=
call	7:18	7:41	3	av_frame_get_pkt_pos
arg	7:39	7:41	4	in
water	7:39	0:0	5	in
decl	8:4	8:34	2	const AVPixFmtDescriptor	*desc
decl	9:4	9:9	2	int	i
water	10:4	0:0	2	out
op	10:8	0:0	2	=
call	10:10	10:59	2	ff_get_video_buffer
arg	10:30	10:37	3	outlink
water	10:30	0:0	4	outlink
arg	10:39	10:48	3	inlink->w
water	10:39	0:0	4	inlink
op	10:45	0:0	4	->
water	10:47	0:0	4	w
arg	10:50	10:59	3	inlink->h
water	10:50	0:0	4	inlink
op	10:56	0:0	4	->
water	10:58	0:0	4	h
water	10:60	0:0	2	;
if	11:4	12:30	2	(! out)
cond	11:8	11:9	3	! out
op	11:8	0:0	4	!
water	11:9	0:0	4	out
stmts	12:8	12:30	3	
return	12:8	12:30	4	AVERROR(ENOMEM)
call	12:15	12:29	5	AVERROR
arg	12:23	12:29	6	ENOMEM
water	12:23	0:0	7	ENOMEM
call	13:4	13:31	2	av_frame_copy_props
arg	13:24	13:27	3	out
water	13:24	0:0	4	out
arg	13:29	13:31	3	in
water	13:29	0:0	4	in
water	13:32	0:0	2	;
water	14:4	0:0	2	desc
op	14:9	0:0	2	=
call	14:11	14:45	2	av_pix_fmt_desc_get
arg	14:31	14:45	3	inlink->format
water	14:31	0:0	4	inlink
op	14:37	0:0	4	->
water	14:39	0:0	4	format
water	14:46	0:0	2	;
water	15:4	0:0	2	eq
op	15:6	0:0	2	->
water	15:8	0:0	2	var_values
op	15:18	0:0	2	[
water	15:19	0:0	2	VAR_N
op	15:24	0:0	2	]
op	15:28	0:0	2	=
water	15:30	0:0	2	inlink
op	15:36	0:0	2	->
water	15:38	0:0	2	frame_count
water	15:49	0:0	2	;
water	16:4	0:0	2	eq
op	16:6	0:0	2	->
water	16:8	0:0	2	var_values
op	16:18	0:0	2	[
water	16:19	0:0	2	VAR_POS
op	16:26	0:0	2	]
op	16:28	0:0	2	=
water	16:30	0:0	2	pos
op	16:34	0:0	2	==
op	16:37	0:0	2	-
water	16:38	0:0	2	1
water	16:40	0:0	2	?
water	16:42	0:0	2	NAN
water	16:46	0:0	2	:
water	16:48	0:0	2	pos
water	16:51	0:0	2	;
water	17:4	0:0	2	eq
op	17:6	0:0	2	->
water	17:8	0:0	2	var_values
op	17:18	0:0	2	[
water	17:19	0:0	2	VAR_T
op	17:24	0:0	2	]
op	17:28	0:0	2	=
call	17:30	17:61	2	TS2T
arg	17:35	17:42	3	in->pts
water	17:35	0:0	4	in
op	17:37	0:0	4	->
water	17:39	0:0	4	pts
arg	17:44	17:61	3	inlink->time_base
water	17:44	0:0	4	inlink
op	17:50	0:0	4	->
water	17:52	0:0	4	time_base
water	17:62	0:0	2	;
if	18:4	23:4	2	(eq -> eval_mode == EVAL_MODE_FRAME)
cond	18:8	18:25	3	eq -> eval_mode == EVAL_MODE_FRAME
water	18:8	0:0	4	eq
op	18:10	0:0	4	->
water	18:12	0:0	4	eval_mode
op	18:22	0:0	4	==
water	18:25	0:0	4	EVAL_MODE_FRAME
stmts	18:42	23:4	3	
water	18:42	0:0	4	{
call	19:8	19:20	4	set_gamma
arg	19:18	19:20	5	eq
water	19:18	0:0	6	eq
water	19:21	0:0	4	;
call	20:8	20:23	4	set_contrast
arg	20:21	20:23	5	eq
water	20:21	0:0	6	eq
water	20:24	0:0	4	;
call	21:8	21:25	4	set_brightness
arg	21:23	21:25	5	eq
water	21:23	0:0	6	eq
water	21:26	0:0	4	;
call	22:8	22:25	4	set_saturation
arg	22:23	22:25	5	eq
water	22:23	0:0	6	eq
water	22:26	0:0	4	;
water	23:4	0:0	4	}
for	24:4	37:4	2	(i = 0 ;i < desc -> nb_components;i ++)
forinit	24:9	24:14	3	i = 0 ;
water	24:9	0:0	4	i
op	24:11	0:0	4	=
water	24:13	0:0	4	0
water	24:14	0:0	4	;
cond	24:16	24:26	3	i < desc -> nb_components
water	24:16	0:0	4	i
op	24:18	0:0	4	<
water	24:20	0:0	4	desc
op	24:24	0:0	4	->
water	24:26	0:0	4	nb_components
forexpr	24:41	24:42	3	i ++
water	24:41	0:0	4	i
op	24:42	0:0	4	++
stmts	24:46	37:4	3	
water	24:46	0:0	4	{
decl	25:8	25:25	4	int	w
op	25:14	0:0	4	=
water	25:16	0:0	4	inlink
op	25:22	0:0	4	->
water	25:24	0:0	4	w
decl	26:8	26:25	4	int	h
op	26:14	0:0	4	=
water	26:16	0:0	4	inlink
op	26:22	0:0	4	->
water	26:24	0:0	4	h
if	27:8	30:8	4	(i == 1 || i == 2)
cond	27:12	27:27	5	i == 1 || i == 2
water	27:12	0:0	6	i
op	27:14	0:0	6	==
water	27:17	0:0	6	1
op	27:19	0:0	6	||
water	27:22	0:0	6	i
op	27:24	0:0	6	==
water	27:27	0:0	6	2
stmts	27:30	30:8	5	
water	27:30	0:0	6	{
water	28:12	0:0	6	w
op	28:14	0:0	6	=
call	28:16	28:53	6	FF_CEIL_RSHIFT
arg	28:31	28:32	7	w
water	28:31	0:0	8	w
arg	28:34	28:53	7	desc->log2_chroma_w
water	28:34	0:0	8	desc
op	28:38	0:0	8	->
water	28:40	0:0	8	log2_chroma_w
water	28:54	0:0	6	;
water	29:12	0:0	6	h
op	29:14	0:0	6	=
call	29:16	29:53	6	FF_CEIL_RSHIFT
arg	29:31	29:32	7	h
water	29:31	0:0	8	h
arg	29:34	29:53	7	desc->log2_chroma_h
water	29:34	0:0	8	desc
op	29:38	0:0	8	->
water	29:40	0:0	8	log2_chroma_h
water	29:54	0:0	6	;
water	30:8	0:0	6	}
if	31:8	33:68	4	(eq -> param [ i ] . adjust)
cond	31:12	31:25	5	eq -> param [ i ] . adjust
water	31:12	0:0	6	eq
op	31:14	0:0	6	->
water	31:16	0:0	6	param
op	31:21	0:0	6	[
water	31:22	0:0	6	i
op	31:23	0:0	6	]
op	31:24	0:0	6	.
water	31:25	0:0	6	adjust
stmts	32:12	33:68	5	
water	32:12	0:0	6	eq
op	32:14	0:0	6	->
water	32:16	0:0	6	param
op	32:21	0:0	6	[
water	32:22	0:0	6	i
op	32:23	0:0	6	]
op	32:24	0:0	6	.
call	32:25	33:67	6	adjust
arg	32:32	32:45	7	&eq->param[i]
op	32:32	0:0	8	&
water	32:33	0:0	8	eq
op	32:35	0:0	8	->
water	32:37	0:0	8	param
op	32:42	0:0	8	[
water	32:43	0:0	8	i
op	32:44	0:0	8	]
arg	32:47	32:59	7	out->data[i]
water	32:47	0:0	8	out
op	32:50	0:0	8	->
water	32:52	0:0	8	data
op	32:56	0:0	8	[
water	32:57	0:0	8	i
op	32:58	0:0	8	]
arg	32:61	32:77	7	out->linesize[i]
water	32:61	0:0	8	out
op	32:64	0:0	8	->
water	32:66	0:0	8	linesize
op	32:74	0:0	8	[
water	32:75	0:0	8	i
op	32:76	0:0	8	]
arg	33:33	33:44	7	in->data[i]
water	33:33	0:0	8	in
op	33:35	0:0	8	->
water	33:37	0:0	8	data
op	33:41	0:0	8	[
water	33:42	0:0	8	i
op	33:43	0:0	8	]
arg	33:46	33:61	7	in->linesize[i]
water	33:46	0:0	8	in
op	33:48	0:0	8	->
water	33:50	0:0	8	linesize
op	33:58	0:0	8	[
water	33:59	0:0	8	i
op	33:60	0:0	8	]
arg	33:63	33:64	7	w
water	33:63	0:0	8	w
arg	33:66	33:67	7	h
water	33:66	0:0	8	h
water	33:68	0:0	6	;
else	34:8	36:67	4
stmts	35:12	36:67	5	
call	35:12	36:66	6	av_image_copy_plane
arg	35:32	35:44	7	out->data[i]
water	35:32	0:0	8	out
op	35:35	0:0	8	->
water	35:37	0:0	8	data
op	35:41	0:0	8	[
water	35:42	0:0	8	i
op	35:43	0:0	8	]
arg	35:46	35:62	7	out->linesize[i]
water	35:46	0:0	8	out
op	35:49	0:0	8	->
water	35:51	0:0	8	linesize
op	35:59	0:0	8	[
water	35:60	0:0	8	i
op	35:61	0:0	8	]
arg	36:32	36:43	7	in->data[i]
water	36:32	0:0	8	in
op	36:34	0:0	8	->
water	36:36	0:0	8	data
op	36:40	0:0	8	[
water	36:41	0:0	8	i
op	36:42	0:0	8	]
arg	36:45	36:60	7	in->linesize[i]
water	36:45	0:0	8	in
op	36:47	0:0	8	->
water	36:49	0:0	8	linesize
op	36:57	0:0	8	[
water	36:58	0:0	8	i
op	36:59	0:0	8	]
arg	36:62	36:63	7	w
water	36:62	0:0	8	w
arg	36:65	36:66	7	h
water	36:65	0:0	8	h
water	36:67	0:0	6	;
water	37:4	0:0	4	}
call	38:4	38:21	2	av_frame_free
arg	38:18	38:21	3	&in
op	38:18	0:0	4	&
water	38:19	0:0	4	in
water	38:22	0:0	2	;
return	39:4	39:40	2	ff_filter_frame(outlink,out)
call	39:11	39:39	3	ff_filter_frame
arg	39:27	39:34	4	outlink
water	39:27	0:0	5	outlink
arg	39:36	39:39	4	out
water	39:36	0:0	5	out
