func	1:0	41:0	0	static int	slice_decode_thread
params	1:30	0:0	1	
param	1:31	1:48	2	AVCodecContext *	c
param	1:50	1:59	2	void *	arg
stmnts	0:0	40:4	1	
decl	3:4	3:40	2	MpegEncContext	*s
op	3:24	0:0	2	=
op	3:26	0:0	2	*
water	3:27	0:0	2	(
water	3:28	0:0	2	void
op	3:33	0:0	2	*
op	3:34	0:0	2	*
water	3:35	0:0	2	)
water	3:37	0:0	2	arg
decl	4:4	4:38	2	const uint8_t	*buf
op	4:24	0:0	2	=
water	4:26	0:0	2	s
op	4:27	0:0	2	->
water	4:29	0:0	2	gb
op	4:31	0:0	2	.
water	4:32	0:0	2	buffer
decl	5:4	5:39	2	int	mb_y
op	5:24	0:0	2	=
water	5:26	0:0	2	s
op	5:27	0:0	2	->
water	5:29	0:0	2	start_mb_y
decl	6:4	6:60	2	const int	field_pic
op	6:24	0:0	2	=
water	6:26	0:0	2	s
op	6:27	0:0	2	->
water	6:29	0:0	2	picture_structure
op	6:47	0:0	2	!=
water	6:50	0:0	2	PICT_FRAME
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	er
op	7:9	0:0	2	.
water	7:10	0:0	2	error_count
op	7:22	0:0	2	=
water	7:24	0:0	2	(
water	7:25	0:0	2	3
op	7:27	0:0	2	*
water	7:29	0:0	2	(
water	7:30	0:0	2	s
op	7:31	0:0	2	->
water	7:33	0:0	2	end_mb_y
op	7:42	0:0	2	-
water	7:44	0:0	2	s
op	7:45	0:0	2	->
water	7:47	0:0	2	start_mb_y
water	7:57	0:0	2	)
op	7:59	0:0	2	*
water	7:61	0:0	2	s
op	7:62	0:0	2	->
water	7:64	0:0	2	mb_width
water	7:72	0:0	2	)
op	7:74	0:0	2	>>
water	7:77	0:0	2	field_pic
water	7:86	0:0	2	;
for	8:4	40:4	2	(;;)
forinit	8:9	8:9	3	;
water	8:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	8:13	40:4	3	
water	8:13	0:0	4	{
decl	9:8	9:27	4	uint32_t	start_code
decl	10:8	10:15	4	int	ret
water	11:8	0:0	4	ret
op	11:12	0:0	4	=
call	11:14	11:69	4	mpeg_decode_slice
arg	11:32	11:33	5	s
water	11:32	0:0	6	s
arg	11:35	11:39	5	mb_y
water	11:35	0:0	6	mb_y
arg	11:41	11:45	5	&buf
op	11:41	0:0	6	&
water	11:42	0:0	6	buf
arg	11:47	11:69	5	s->gb.buffer_end-buf
water	11:47	0:0	6	s
op	11:48	0:0	6	->
water	11:50	0:0	6	gb
op	11:52	0:0	6	.
water	11:53	0:0	6	buffer_end
op	11:64	0:0	6	-
water	11:66	0:0	6	buf
water	11:70	0:0	4	;
call	12:8	12:15	4	emms_c
water	12:16	0:0	4	;
call	13:8	15:61	4	ff_dlog
arg	13:16	13:17	5	c
water	13:16	0:0	6	c
arg	13:19	13:66	5	"ret:%d resync:%d/%d mb:%d/%d ts:%d/%d ec:%d\n"
water	13:19	0:0	6	"ret:%d resync:%d/%d mb:%d/%d ts:%d/%d ec:%d\n"
arg	14:16	14:19	5	ret
water	14:16	0:0	6	ret
arg	14:21	14:35	5	s->resync_mb_x
water	14:21	0:0	6	s
op	14:22	0:0	6	->
water	14:24	0:0	6	resync_mb_x
arg	14:37	14:51	5	s->resync_mb_y
water	14:37	0:0	6	s
op	14:38	0:0	6	->
water	14:40	0:0	6	resync_mb_y
arg	14:53	14:60	5	s->mb_x
water	14:53	0:0	6	s
op	14:54	0:0	6	->
water	14:56	0:0	6	mb_x
arg	14:62	14:69	5	s->mb_y
water	14:62	0:0	6	s
op	14:63	0:0	6	->
water	14:65	0:0	6	mb_y
arg	15:16	15:29	5	s->start_mb_y
water	15:16	0:0	6	s
op	15:17	0:0	6	->
water	15:19	0:0	6	start_mb_y
arg	15:31	15:42	5	s->end_mb_y
water	15:31	0:0	6	s
op	15:32	0:0	6	->
water	15:34	0:0	6	end_mb_y
arg	15:44	15:61	5	s->er.error_count
water	15:44	0:0	6	s
op	15:45	0:0	6	->
water	15:47	0:0	6	er
op	15:49	0:0	6	.
water	15:50	0:0	6	error_count
water	15:62	0:0	4	;
if	16:8	23:8	4	(ret < 0)
cond	16:12	16:18	5	ret < 0
water	16:12	0:0	6	ret
op	16:16	0:0	6	<
water	16:18	0:0	6	0
stmts	16:21	23:8	5	
water	16:21	0:0	6	{
if	17:12	18:26	6	(c -> err_recognition & AV_EF_EXPLODE)
cond	17:16	17:37	7	c -> err_recognition & AV_EF_EXPLODE
water	17:16	0:0	8	c
op	17:17	0:0	8	->
water	17:19	0:0	8	err_recognition
op	17:35	0:0	8	&
water	17:37	0:0	8	AV_EF_EXPLODE
stmts	18:16	18:26	7	
return	18:16	18:26	8	ret
water	18:23	0:0	9	ret
if	19:12	22:72	6	(s -> resync_mb_x >= 0 && s -> resync_mb_y >= 0)
cond	19:16	19:57	7	s -> resync_mb_x >= 0 && s -> resync_mb_y >= 0
water	19:16	0:0	8	s
op	19:17	0:0	8	->
water	19:19	0:0	8	resync_mb_x
op	19:31	0:0	8	>=
water	19:34	0:0	8	0
op	19:36	0:0	8	&&
water	19:39	0:0	8	s
op	19:40	0:0	8	->
water	19:42	0:0	8	resync_mb_y
op	19:54	0:0	8	>=
water	19:57	0:0	8	0
stmts	20:16	22:72	7	
call	20:16	22:71	8	ff_er_add_slice
arg	20:32	20:38	9	&s->er
op	20:32	0:0	10	&
water	20:33	0:0	10	s
op	20:34	0:0	10	->
water	20:36	0:0	10	er
arg	20:40	20:54	9	s->resync_mb_x
water	20:40	0:0	10	s
op	20:41	0:0	10	->
water	20:43	0:0	10	resync_mb_x
arg	20:56	20:70	9	s->resync_mb_y
water	20:56	0:0	10	s
op	20:57	0:0	10	->
water	20:59	0:0	10	resync_mb_y
arg	21:32	21:39	9	s->mb_x
water	21:32	0:0	10	s
op	21:33	0:0	10	->
water	21:35	0:0	10	mb_x
arg	21:41	21:48	9	s->mb_y
water	21:41	0:0	10	s
op	21:42	0:0	10	->
water	21:44	0:0	10	mb_y
arg	22:32	22:71	9	ER_AC_ERROR|ER_DC_ERROR|ER_MV_ERROR
water	22:32	0:0	10	ER_AC_ERROR
op	22:44	0:0	10	|
water	22:46	0:0	10	ER_DC_ERROR
op	22:58	0:0	10	|
water	22:60	0:0	10	ER_MV_ERROR
water	22:72	0:0	8	;
water	23:8	0:0	6	}
else	23:10	27:8	4
stmts	23:15	27:8	5	
water	23:15	0:0	6	{
call	24:12	26:61	6	ff_er_add_slice
arg	24:28	24:34	7	&s->er
op	24:28	0:0	8	&
water	24:29	0:0	8	s
op	24:30	0:0	8	->
water	24:32	0:0	8	er
arg	24:36	24:50	7	s->resync_mb_x
water	24:36	0:0	8	s
op	24:37	0:0	8	->
water	24:39	0:0	8	resync_mb_x
arg	24:52	24:66	7	s->resync_mb_y
water	24:52	0:0	8	s
op	24:53	0:0	8	->
water	24:55	0:0	8	resync_mb_y
arg	25:28	25:39	7	s->mb_x-1
water	25:28	0:0	8	s
op	25:29	0:0	8	->
water	25:31	0:0	8	mb_x
op	25:36	0:0	8	-
water	25:38	0:0	8	1
arg	25:41	25:48	7	s->mb_y
water	25:41	0:0	8	s
op	25:42	0:0	8	->
water	25:44	0:0	8	mb_y
arg	26:28	26:61	7	ER_AC_END|ER_DC_END|ER_MV_END
water	26:28	0:0	8	ER_AC_END
op	26:38	0:0	8	|
water	26:40	0:0	8	ER_DC_END
op	26:50	0:0	8	|
water	26:52	0:0	8	ER_MV_END
water	26:62	0:0	6	;
water	27:8	0:0	6	}
if	28:8	29:20	4	(s -> mb_y == s -> end_mb_y)
cond	28:12	28:26	5	s -> mb_y == s -> end_mb_y
water	28:12	0:0	6	s
op	28:13	0:0	6	->
water	28:15	0:0	6	mb_y
op	28:20	0:0	6	==
water	28:23	0:0	6	s
op	28:24	0:0	6	->
water	28:26	0:0	6	end_mb_y
stmts	29:12	29:20	5	
return	29:12	29:20	6	0
water	29:19	0:0	7	0
water	30:8	0:0	4	start_code
op	30:19	0:0	4	=
op	30:21	0:0	4	-
water	30:22	0:0	4	1
water	30:23	0:0	4	;
water	31:8	0:0	4	buf
op	31:19	0:0	4	=
call	31:21	31:78	4	avpriv_find_start_code
arg	31:44	31:47	5	buf
water	31:44	0:0	6	buf
arg	31:49	31:65	5	s->gb.buffer_end
water	31:49	0:0	6	s
op	31:50	0:0	6	->
water	31:52	0:0	6	gb
op	31:54	0:0	6	.
water	31:55	0:0	6	buffer_end
arg	31:67	31:78	5	&start_code
op	31:67	0:0	6	&
water	31:68	0:0	6	start_code
water	31:79	0:0	4	;
water	32:8	0:0	4	mb_y
op	32:19	0:0	4	=
water	32:21	0:0	4	start_code
op	32:32	0:0	4	-
water	32:34	0:0	4	SLICE_MIN_START_CODE
water	32:54	0:0	4	;
if	33:8	34:34	4	(s -> codec_id != AV_CODEC_ID_MPEG1VIDEO && s -> mb_height > 2800 / 16)
cond	33:12	33:73	5	s -> codec_id != AV_CODEC_ID_MPEG1VIDEO && s -> mb_height > 2800 / 16
water	33:12	0:0	6	s
op	33:13	0:0	6	->
water	33:15	0:0	6	codec_id
op	33:24	0:0	6	!=
water	33:27	0:0	6	AV_CODEC_ID_MPEG1VIDEO
op	33:50	0:0	6	&&
water	33:53	0:0	6	s
op	33:54	0:0	6	->
water	33:56	0:0	6	mb_height
op	33:66	0:0	6	>
water	33:68	0:0	6	2800
op	33:72	0:0	6	/
water	33:73	0:0	6	16
stmts	34:12	34:34	5	
water	34:12	0:0	6	mb_y
op	34:17	0:0	6	+=
water	34:20	0:0	6	(
op	34:21	0:0	6	*
water	34:22	0:0	6	buf
op	34:25	0:0	6	&
water	34:26	0:0	6	0
water	34:27	0:0	6	xE0
water	34:30	0:0	6	)
op	34:31	0:0	6	<<
water	34:33	0:0	6	2
water	34:34	0:0	6	;
water	35:8	0:0	4	mb_y
op	35:13	0:0	4	<<=
water	35:17	0:0	4	field_pic
water	35:26	0:0	4	;
if	36:8	37:18	4	(s -> picture_structure == PICT_BOTTOM_FIELD)
cond	36:12	36:36	5	s -> picture_structure == PICT_BOTTOM_FIELD
water	36:12	0:0	6	s
op	36:13	0:0	6	->
water	36:15	0:0	6	picture_structure
op	36:33	0:0	6	==
water	36:36	0:0	6	PICT_BOTTOM_FIELD
stmts	37:12	37:18	5	
water	37:12	0:0	6	mb_y
op	37:16	0:0	6	++
water	37:18	0:0	6	;
if	38:8	39:38	4	(mb_y < 0 || mb_y >= s -> end_mb_y)
cond	38:12	38:35	5	mb_y < 0 || mb_y >= s -> end_mb_y
water	38:12	0:0	6	mb_y
op	38:17	0:0	6	<
water	38:19	0:0	6	0
op	38:21	0:0	6	||
water	38:24	0:0	6	mb_y
op	38:29	0:0	6	>=
water	38:32	0:0	6	s
op	38:33	0:0	6	->
water	38:35	0:0	6	end_mb_y
stmts	39:12	39:38	5	
return	39:12	39:38	6	AVERROR_INVALIDDATA
water	39:19	0:0	7	AVERROR_INVALIDDATA
water	40:4	0:0	4	}
