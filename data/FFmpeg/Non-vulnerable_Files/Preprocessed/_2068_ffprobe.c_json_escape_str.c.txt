func	1:0	18:0	0	static const char *	json_escape_str
params	1:34	0:0	1	
param	1:35	1:48	2	AVBPrint *	dst
param	1:50	1:65	2	const char *	src
param	1:67	1:80	2	void *	log_ctx
stmnts	3:4	17:19	1	
water	3:4	0:0	2	static
water	3:11	0:0	2	const
water	3:17	0:0	2	char
water	3:22	0:0	2	json_escape
op	3:33	0:0	2	[
op	3:34	0:0	2	]
op	3:36	0:0	2	=
water	3:38	0:0	2	{
water	3:39	0:0	2	'"'
water	3:42	0:0	2	,
water	3:44	0:0	2	'\\'
water	3:48	0:0	2	,
water	3:50	0:0	2	'\b'
water	3:54	0:0	2	,
water	3:56	0:0	2	'\f'
water	3:60	0:0	2	,
water	3:62	0:0	2	'\n'
water	3:66	0:0	2	,
water	3:68	0:0	2	'\r'
water	3:72	0:0	2	,
water	3:74	0:0	2	'\t'
water	3:78	0:0	2	,
water	3:80	0:0	2	0
water	3:81	0:0	2	}
water	3:82	0:0	2	;
water	4:4	0:0	2	static
water	4:11	0:0	2	const
water	4:17	0:0	2	char
water	4:22	0:0	2	json_subst
op	4:32	0:0	2	[
op	4:33	0:0	2	]
op	4:36	0:0	2	=
water	4:38	0:0	2	{
water	4:39	0:0	2	'"'
water	4:42	0:0	2	,
water	4:44	0:0	2	'\\'
water	4:48	0:0	2	,
water	4:51	0:0	2	'b'
water	4:54	0:0	2	,
water	4:57	0:0	2	'f'
water	4:60	0:0	2	,
water	4:63	0:0	2	'n'
water	4:66	0:0	2	,
water	4:69	0:0	2	'r'
water	4:72	0:0	2	,
water	4:75	0:0	2	't'
water	4:78	0:0	2	,
water	4:80	0:0	2	0
water	4:81	0:0	2	}
water	4:82	0:0	2	;
decl	5:4	5:17	2	const char	*p
for	6:4	16:4	2	(p = src ;* p;p ++)
forinit	6:9	6:16	3	p = src ;
water	6:9	0:0	4	p
op	6:11	0:0	4	=
water	6:13	0:0	4	src
water	6:16	0:0	4	;
cond	6:18	6:19	3	* p
op	6:18	0:0	4	*
water	6:19	0:0	4	p
forexpr	6:22	6:23	3	p ++
water	6:22	0:0	4	p
op	6:23	0:0	4	++
stmts	6:27	16:4	3	
water	6:27	0:0	4	{
decl	7:8	7:41	4	char	*s
op	7:16	0:0	4	=
call	7:18	7:40	5	strchr
arg	7:25	7:36	6	json_escape
water	7:25	0:0	7	json_escape
arg	7:38	7:40	6	*p
op	7:38	0:0	7	*
water	7:39	0:0	7	p
if	8:8	11:8	4	(s)
cond	8:12	8:12	5	s
water	8:12	0:0	6	s
stmts	8:15	11:8	5	
water	8:15	0:0	6	{
call	9:12	9:40	6	av_bprint_chars
arg	9:28	9:31	7	dst
water	9:28	0:0	8	dst
arg	9:33	9:37	7	'\\'
water	9:33	0:0	8	'\\'
arg	9:39	9:40	7	1
water	9:39	0:0	8	1
water	9:41	0:0	6	;
call	10:12	10:63	6	av_bprint_chars
arg	10:28	10:31	7	dst
water	10:28	0:0	8	dst
arg	10:33	10:60	7	json_subst[s-json_escape]
water	10:33	0:0	8	json_subst
op	10:43	0:0	8	[
water	10:44	0:0	8	s
op	10:46	0:0	8	-
water	10:48	0:0	8	json_escape
op	10:59	0:0	8	]
arg	10:62	10:63	7	1
water	10:62	0:0	8	1
water	10:64	0:0	6	;
water	11:8	0:0	6	}
else	11:10	13:8	4
stmts	11:15	13:8	5	
if	11:15	13:8	6	(( unsigned char ) * p < 32)
cond	11:19	11:39	7	( unsigned char ) * p < 32
water	11:19	0:0	8	(
water	11:20	0:0	8	unsigned
water	11:29	0:0	8	char
water	11:33	0:0	8	)
op	11:34	0:0	8	*
water	11:35	0:0	8	p
op	11:37	0:0	8	<
water	11:39	0:0	8	32
stmts	11:43	13:8	7	
water	11:43	0:0	8	{
call	12:12	12:50	8	av_bprintf
arg	12:23	12:26	9	dst
water	12:23	0:0	10	dst
arg	12:28	12:39	9	"\\u00%02x"
water	12:28	0:0	10	"\\u00%02x"
arg	12:41	12:50	9	*p&0xff
op	12:41	0:0	10	*
water	12:42	0:0	10	p
op	12:44	0:0	10	&
water	12:46	0:0	10	0
water	12:47	0:0	10	xff
water	12:51	0:0	8	;
water	13:8	0:0	8	}
else	13:10	15:8	4
stmts	13:15	15:8	5	
water	13:15	0:0	6	{
call	14:12	14:38	6	av_bprint_chars
arg	14:28	14:31	7	dst
water	14:28	0:0	8	dst
arg	14:33	14:35	7	*p
op	14:33	0:0	8	*
water	14:34	0:0	8	p
arg	14:37	14:38	7	1
water	14:37	0:0	8	1
water	14:39	0:0	6	;
water	15:8	0:0	6	}
water	16:4	0:0	4	}
return	17:4	17:19	2	dst->str
water	17:11	0:0	3	dst
op	17:14	0:0	3	->
water	17:16	0:0	3	str
