func	1:0	69:0	0	int	avfilter_graph_parse_ptr
params	1:28	0:0	1	
param	1:29	1:49	2	AVFilterGraph *	graph
param	1:51	1:70	2	const char *	filters
param	2:25	2:56	2	AVFilterInOut * *	open_inputs_ptr
param	2:58	2:90	2	AVFilterInOut * *	open_outputs_ptr
param	3:25	3:38	2	void *	log_ctx
stmnts	0:0	68:14	1	
decl	5:4	5:26	2	int	index
op	5:14	0:0	2	=
water	5:16	0:0	2	0
water	5:17	0:0	2	,
decl	5:4	5:26	2	int	ret
op	5:23	0:0	2	=
water	5:25	0:0	2	0
decl	6:4	6:16	2	char	chr
op	6:13	0:0	2	=
water	6:15	0:0	2	0
decl	7:4	7:37	2	AVFilterInOut	*curr_inputs
op	7:31	0:0	2	=
water	7:33	0:0	2	NULL
decl	8:4	8:77	2	AVFilterInOut	*open_inputs
op	8:32	0:0	2	=
water	8:34	0:0	2	open_inputs_ptr
water	8:51	0:0	2	?
op	8:53	0:0	2	*
water	8:54	0:0	2	open_inputs_ptr
water	8:71	0:0	2	:
water	8:73	0:0	2	NULL
decl	9:4	9:77	2	AVFilterInOut	*open_outputs
op	9:32	0:0	2	=
water	9:34	0:0	2	open_outputs_ptr
water	9:51	0:0	2	?
op	9:53	0:0	2	*
water	9:54	0:0	2	open_outputs_ptr
water	9:71	0:0	2	:
water	9:73	0:0	2	NULL
if	10:4	11:16	2	(( ret =parse_sws_flags (& filters ,graph ) ) < 0)
cond	10:8	10:51	3	( ret =parse_sws_flags (& filters ,graph ) ) < 0
water	10:8	0:0	4	(
water	10:9	0:0	4	ret
op	10:13	0:0	4	=
call	10:15	10:46	4	parse_sws_flags
arg	10:31	10:39	5	&filters
op	10:31	0:0	6	&
water	10:32	0:0	6	filters
arg	10:41	10:46	5	graph
water	10:41	0:0	6	graph
water	10:47	0:0	4	)
op	10:49	0:0	4	<
water	10:51	0:0	4	0
stmts	11:8	11:16	3	
goto	11:8	11:16	4	end
water	11:13	0:0	5	end
do	12:4	41:4	2	(chr == ',' || chr == ';')
cond	41:13	41:34	3	chr == ',' || chr == ';'
water	41:13	0:0	4	chr
op	41:17	0:0	4	==
water	41:20	0:0	4	','
op	41:24	0:0	4	||
water	41:27	0:0	4	chr
op	41:31	0:0	4	==
water	41:34	0:0	4	';'
stmts	12:7	41:4	3	
water	12:7	0:0	4	{
decl	13:8	13:31	4	AVFilterContext	*filter
decl	14:8	14:41	4	const char	*filterchain
op	14:32	0:0	4	=
water	14:34	0:0	4	filters
water	15:8	0:0	4	filters
op	15:16	0:0	4	+=
call	15:19	15:46	4	strspn
arg	15:26	15:33	5	filters
water	15:26	0:0	6	filters
arg	15:35	15:46	5	WHITESPACES
water	15:35	0:0	6	WHITESPACES
water	15:47	0:0	4	;
if	16:8	17:20	4	(( ret =parse_inputs (& filters ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	16:12	16:83	5	( ret =parse_inputs (& filters ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0
water	16:12	0:0	6	(
water	16:13	0:0	6	ret
op	16:17	0:0	6	=
call	16:19	16:78	6	parse_inputs
arg	16:32	16:40	7	&filters
op	16:32	0:0	8	&
water	16:33	0:0	8	filters
arg	16:42	16:54	7	&curr_inputs
op	16:42	0:0	8	&
water	16:43	0:0	8	curr_inputs
arg	16:56	16:69	7	&open_outputs
op	16:56	0:0	8	&
water	16:57	0:0	8	open_outputs
arg	16:71	16:78	7	log_ctx
water	16:71	0:0	8	log_ctx
water	16:79	0:0	6	)
op	16:81	0:0	6	<
water	16:83	0:0	6	0
stmts	17:12	17:20	5	
goto	17:12	17:20	6	end
water	17:17	0:0	7	end
if	18:8	19:20	4	(( ret =parse_filter (& filter ,& filters ,graph ,index ,log_ctx ) ) < 0)
cond	18:12	18:77	5	( ret =parse_filter (& filter ,& filters ,graph ,index ,log_ctx ) ) < 0
water	18:12	0:0	6	(
water	18:13	0:0	6	ret
op	18:17	0:0	6	=
call	18:19	18:72	6	parse_filter
arg	18:32	18:39	7	&filter
op	18:32	0:0	8	&
water	18:33	0:0	8	filter
arg	18:41	18:49	7	&filters
op	18:41	0:0	8	&
water	18:42	0:0	8	filters
arg	18:51	18:56	7	graph
water	18:51	0:0	8	graph
arg	18:58	18:63	7	index
water	18:58	0:0	8	index
arg	18:65	18:72	7	log_ctx
water	18:65	0:0	8	log_ctx
water	18:73	0:0	6	)
op	18:75	0:0	6	<
water	18:77	0:0	6	0
stmts	19:12	19:20	5	
goto	19:12	19:20	6	end
water	19:17	0:0	7	end
if	20:8	25:8	4	(filter -> nb_inputs == 1 && ! curr_inputs && ! index)
cond	20:12	20:55	5	filter -> nb_inputs == 1 && ! curr_inputs && ! index
water	20:12	0:0	6	filter
op	20:18	0:0	6	->
water	20:20	0:0	6	nb_inputs
op	20:30	0:0	6	==
water	20:33	0:0	6	1
op	20:35	0:0	6	&&
op	20:38	0:0	6	!
water	20:39	0:0	6	curr_inputs
op	20:51	0:0	6	&&
op	20:54	0:0	6	!
water	20:55	0:0	6	index
stmts	20:62	25:8	5	
water	20:62	0:0	6	{
decl	22:12	22:36	6	const char	*tmp
op	22:28	0:0	6	=
water	22:30	0:0	6	"[in]"
if	23:12	24:24	6	(( ret =parse_inputs (& tmp ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	23:16	23:83	7	( ret =parse_inputs (& tmp ,& curr_inputs ,& open_outputs ,log_ctx ) ) < 0
water	23:16	0:0	8	(
water	23:17	0:0	8	ret
op	23:21	0:0	8	=
call	23:23	23:78	8	parse_inputs
arg	23:36	23:40	9	&tmp
op	23:36	0:0	10	&
water	23:37	0:0	10	tmp
arg	23:42	23:54	9	&curr_inputs
op	23:42	0:0	10	&
water	23:43	0:0	10	curr_inputs
arg	23:56	23:69	9	&open_outputs
op	23:56	0:0	10	&
water	23:57	0:0	10	open_outputs
arg	23:71	23:78	9	log_ctx
water	23:71	0:0	10	log_ctx
water	23:79	0:0	8	)
op	23:81	0:0	8	<
water	23:83	0:0	8	0
stmts	24:16	24:24	7	
goto	24:16	24:24	8	end
water	24:21	0:0	9	end
water	25:8	0:0	6	}
if	26:8	27:20	4	(( ret =link_filter_inouts (filter ,& curr_inputs ,& open_inputs ,log_ctx ) ) < 0)
cond	26:12	26:86	5	( ret =link_filter_inouts (filter ,& curr_inputs ,& open_inputs ,log_ctx ) ) < 0
water	26:12	0:0	6	(
water	26:13	0:0	6	ret
op	26:17	0:0	6	=
call	26:19	26:81	6	link_filter_inouts
arg	26:38	26:44	7	filter
water	26:38	0:0	8	filter
arg	26:46	26:58	7	&curr_inputs
op	26:46	0:0	8	&
water	26:47	0:0	8	curr_inputs
arg	26:60	26:72	7	&open_inputs
op	26:60	0:0	8	&
water	26:61	0:0	8	open_inputs
arg	26:74	26:81	7	log_ctx
water	26:74	0:0	8	log_ctx
water	26:82	0:0	6	)
op	26:84	0:0	6	<
water	26:86	0:0	6	0
stmts	27:12	27:20	5	
goto	27:12	27:20	6	end
water	27:17	0:0	7	end
if	28:8	30:20	4	(( ret =parse_outputs (& filters ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	28:12	29:45	5	( ret =parse_outputs (& filters ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0
water	28:12	0:0	6	(
water	28:13	0:0	6	ret
op	28:17	0:0	6	=
call	28:19	29:40	6	parse_outputs
arg	28:33	28:41	7	&filters
op	28:33	0:0	8	&
water	28:34	0:0	8	filters
arg	28:43	28:55	7	&curr_inputs
op	28:43	0:0	8	&
water	28:44	0:0	8	curr_inputs
arg	28:57	28:69	7	&open_inputs
op	28:57	0:0	8	&
water	28:58	0:0	8	open_inputs
arg	28:71	28:84	7	&open_outputs
op	28:71	0:0	8	&
water	28:72	0:0	8	open_outputs
arg	29:33	29:40	7	log_ctx
water	29:33	0:0	8	log_ctx
water	29:41	0:0	6	)
op	29:43	0:0	6	<
water	29:45	0:0	6	0
stmts	30:12	30:20	5	
goto	30:12	30:20	6	end
water	30:17	0:0	7	end
water	31:8	0:0	4	filters
op	31:16	0:0	4	+=
call	31:19	31:46	4	strspn
arg	31:26	31:33	5	filters
water	31:26	0:0	6	filters
arg	31:35	31:46	5	WHITESPACES
water	31:35	0:0	6	WHITESPACES
water	31:47	0:0	4	;
water	32:8	0:0	4	chr
op	32:12	0:0	4	=
op	32:14	0:0	4	*
water	32:15	0:0	4	filters
op	32:22	0:0	4	++
water	32:24	0:0	4	;
if	33:8	39:8	4	(chr == ';' && curr_inputs)
cond	33:12	33:26	5	chr == ';' && curr_inputs
water	33:12	0:0	6	chr
op	33:16	0:0	6	==
water	33:19	0:0	6	';'
op	33:23	0:0	6	&&
water	33:26	0:0	6	curr_inputs
stmts	33:39	39:8	5	
water	33:39	0:0	6	{
call	34:12	36:30	6	av_log
arg	34:19	34:26	7	log_ctx
water	34:19	0:0	8	log_ctx
arg	34:28	34:40	7	AV_LOG_ERROR
water	34:28	0:0	8	AV_LOG_ERROR
arg	35:19	35:86	7	"Invalid filterchain containing an unlabelled output pad: \"%s\"\n"
water	35:19	0:0	8	"Invalid filterchain containing an unlabelled output pad: \"%s\"\n"
arg	36:19	36:30	7	filterchain
water	36:19	0:0	8	filterchain
water	36:31	0:0	6	;
water	37:12	0:0	6	ret
op	37:16	0:0	6	=
call	37:18	37:32	6	AVERROR
arg	37:26	37:32	7	EINVAL
water	37:26	0:0	8	EINVAL
water	37:33	0:0	6	;
goto	38:12	38:20	6	end
water	38:17	0:0	7	end
water	39:8	0:0	6	}
water	40:8	0:0	4	index
op	40:13	0:0	4	++
water	40:15	0:0	4	;
water	41:4	0:0	4	}
water	41:38	0:0	2	;
if	42:4	48:4	2	(chr)
cond	42:8	42:8	3	chr
water	42:8	0:0	4	chr
stmts	42:13	48:4	3	
water	42:13	0:0	4	{
call	43:8	45:26	4	av_log
arg	43:15	43:22	5	log_ctx
water	43:15	0:0	6	log_ctx
arg	43:24	43:36	5	AV_LOG_ERROR
water	43:24	0:0	6	AV_LOG_ERROR
arg	44:15	44:70	5	"Unable to parse graph description substring: \"%s\"\n"
water	44:15	0:0	6	"Unable to parse graph description substring: \"%s\"\n"
arg	45:15	45:26	5	filters-1
water	45:15	0:0	6	filters
op	45:23	0:0	6	-
water	45:25	0:0	6	1
water	45:27	0:0	4	;
water	46:8	0:0	4	ret
op	46:12	0:0	4	=
call	46:14	46:28	4	AVERROR
arg	46:22	46:28	5	EINVAL
water	46:22	0:0	6	EINVAL
water	46:29	0:0	4	;
goto	47:8	47:16	4	end
water	47:13	0:0	5	end
water	48:4	0:0	4	}
if	49:4	55:4	2	(curr_inputs)
cond	49:8	49:8	3	curr_inputs
water	49:8	0:0	4	curr_inputs
stmts	49:21	55:4	3	
water	49:21	0:0	4	{
decl	51:8	51:33	4	const char	*tmp
op	51:24	0:0	4	=
water	51:26	0:0	4	"[out]"
if	52:8	54:20	4	(( ret =parse_outputs (& tmp ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0)
cond	52:12	53:45	5	( ret =parse_outputs (& tmp ,& curr_inputs ,& open_inputs ,& open_outputs ,log_ctx ) ) < 0
water	52:12	0:0	6	(
water	52:13	0:0	6	ret
op	52:17	0:0	6	=
call	52:19	53:40	6	parse_outputs
arg	52:33	52:37	7	&tmp
op	52:33	0:0	8	&
water	52:34	0:0	8	tmp
arg	52:39	52:51	7	&curr_inputs
op	52:39	0:0	8	&
water	52:40	0:0	8	curr_inputs
arg	52:53	52:65	7	&open_inputs
op	52:53	0:0	8	&
water	52:54	0:0	8	open_inputs
arg	52:67	52:80	7	&open_outputs
op	52:67	0:0	8	&
water	52:68	0:0	8	open_outputs
arg	53:33	53:40	7	log_ctx
water	53:33	0:0	8	log_ctx
water	53:41	0:0	6	)
op	53:43	0:0	6	<
water	53:45	0:0	6	0
stmts	54:12	54:20	5	
goto	54:12	54:20	6	end
water	54:17	0:0	7	end
water	55:4	0:0	4	}
label	56:0	56:3	2	end :
if	58:4	58:55	2	(open_inputs_ptr)
cond	58:8	58:8	3	open_inputs_ptr
water	58:8	0:0	4	open_inputs_ptr
stmts	58:25	58:55	3	
op	58:25	0:0	4	*
water	58:26	0:0	4	open_inputs_ptr
op	58:42	0:0	4	=
water	58:44	0:0	4	open_inputs
water	58:55	0:0	4	;
else	59:4	59:42	2
stmts	59:9	59:42	3	
call	59:9	59:41	4	avfilter_inout_free
arg	59:29	59:41	5	&open_inputs
op	59:29	0:0	6	&
water	59:30	0:0	6	open_inputs
water	59:42	0:0	4	;
if	60:4	60:58	2	(open_outputs_ptr)
cond	60:8	60:8	3	open_outputs_ptr
water	60:8	0:0	4	open_outputs_ptr
stmts	60:26	60:58	3	
op	60:26	0:0	4	*
water	60:27	0:0	4	open_outputs_ptr
op	60:44	0:0	4	=
water	60:46	0:0	4	open_outputs
water	60:58	0:0	4	;
else	61:4	61:43	2
stmts	61:9	61:43	3	
call	61:9	61:42	4	avfilter_inout_free
arg	61:29	61:42	5	&open_outputs
op	61:29	0:0	6	&
water	61:30	0:0	6	open_outputs
water	61:43	0:0	4	;
call	62:4	62:36	2	avfilter_inout_free
arg	62:24	62:36	3	&curr_inputs
op	62:24	0:0	4	&
water	62:25	0:0	4	curr_inputs
water	62:37	0:0	2	;
if	63:4	67:4	2	(ret < 0)
cond	63:8	63:14	3	ret < 0
water	63:8	0:0	4	ret
op	63:12	0:0	4	<
water	63:14	0:0	4	0
stmts	63:17	67:4	3	
water	63:17	0:0	4	{
while	64:8	65:44	4	(graph -> nb_filters)
cond	64:15	64:22	5	graph -> nb_filters
water	64:15	0:0	6	graph
op	64:20	0:0	6	->
water	64:22	0:0	6	nb_filters
stmts	65:12	65:44	5	
call	65:12	65:43	6	avfilter_free
arg	65:26	65:43	7	graph->filters[0]
water	65:26	0:0	8	graph
op	65:31	0:0	8	->
water	65:33	0:0	8	filters
op	65:40	0:0	8	[
water	65:41	0:0	8	0
op	65:42	0:0	8	]
water	65:44	0:0	6	;
call	66:8	66:32	4	av_freep
arg	66:17	66:32	5	&graph->filters
op	66:17	0:0	6	&
water	66:18	0:0	6	graph
op	66:23	0:0	6	->
water	66:25	0:0	6	filters
water	66:33	0:0	4	;
water	67:4	0:0	4	}
return	68:4	68:14	2	ret
water	68:11	0:0	3	ret
