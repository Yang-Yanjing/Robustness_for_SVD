func	1:0	39:0	0	static void	print_option
params	1:24	0:0	1	
param	1:25	1:45	2	const AVOption *	opts
param	1:47	1:64	2	const AVOption *	o
param	1:66	1:80	2	int	per_stream
stmnts	3:4	38:4	1	
if	3:4	4:14	2	(! ( o -> flags & ( AV_OPT_FLAG_DECODING_PARAM | AV_OPT_FLAG_ENCODING_PARAM ) ))
cond	3:8	3:78	3	! ( o -> flags & ( AV_OPT_FLAG_DECODING_PARAM | AV_OPT_FLAG_ENCODING_PARAM ) )
op	3:8	0:0	4	!
water	3:9	0:0	4	(
water	3:10	0:0	4	o
op	3:11	0:0	4	->
water	3:13	0:0	4	flags
op	3:19	0:0	4	&
water	3:21	0:0	4	(
water	3:22	0:0	4	AV_OPT_FLAG_DECODING_PARAM
op	3:49	0:0	4	|
water	3:51	0:0	4	AV_OPT_FLAG_ENCODING_PARAM
water	3:77	0:0	4	)
water	3:78	0:0	4	)
stmts	4:8	4:14	3	
return	4:8	4:14	4	
call	5:4	5:80	2	printf
arg	5:11	5:30	3	"@item -%s%s @var{"
water	5:11	0:0	4	"@item -%s%s @var{"
arg	5:32	5:39	3	o->name
water	5:32	0:0	4	o
op	5:33	0:0	4	->
water	5:35	0:0	4	name
arg	5:41	5:80	3	per_stream?"[:stream_specifier]":""
water	5:41	0:0	4	per_stream
water	5:52	0:0	4	?
water	5:54	0:0	4	"[:stream_specifier]"
water	5:76	0:0	4	:
water	5:78	0:0	4	""
water	5:81	0:0	2	;
switch	6:4	16:4	2	(o -> type)
cond	6:12	6:15	3	o -> type
water	6:12	0:0	4	o
op	6:13	0:0	4	->
water	6:15	0:0	4	type
stmts	6:21	16:4	3	
water	6:21	0:0	4	{
label	7:4	7:27	4	case AV_OPT_TYPE_BINARY :
call	7:31	7:58	4	printf
arg	7:38	7:58	5	"hexadecimal string"
water	7:38	0:0	6	"hexadecimal string"
water	7:59	0:0	4	;
break	7:61	7:66	4	
label	8:4	8:27	4	case AV_OPT_TYPE_STRING :
call	8:31	8:46	4	printf
arg	8:38	8:46	5	"string"
water	8:38	0:0	6	"string"
water	8:47	0:0	4	;
break	8:61	8:66	4	
label	9:4	9:24	4	case AV_OPT_TYPE_INT :
label	10:4	10:26	4	case AV_OPT_TYPE_INT64 :
call	10:31	10:47	4	printf
arg	10:38	10:47	5	"integer"
water	10:38	0:0	6	"integer"
water	10:48	0:0	4	;
break	10:61	10:66	4	
label	11:4	11:26	4	case AV_OPT_TYPE_FLOAT :
label	12:4	12:27	4	case AV_OPT_TYPE_DOUBLE :
call	12:31	12:45	4	printf
arg	12:38	12:45	5	"float"
water	12:38	0:0	6	"float"
water	12:46	0:0	4	;
break	12:61	12:66	4	
label	13:4	13:29	4	case AV_OPT_TYPE_RATIONAL :
call	13:31	13:55	4	printf
arg	13:38	13:55	5	"rational number"
water	13:38	0:0	6	"rational number"
water	13:56	0:0	4	;
break	13:61	13:66	4	
label	14:4	14:26	4	case AV_OPT_TYPE_FLAGS :
call	14:31	14:45	4	printf
arg	14:38	14:45	5	"flags"
water	14:38	0:0	6	"flags"
water	14:46	0:0	4	;
break	14:61	14:66	4	
label	15:4	15:11	4	default :
call	15:31	15:45	4	printf
arg	15:38	15:45	5	"value"
water	15:38	0:0	6	"value"
water	15:46	0:0	4	;
break	15:61	15:66	4	
water	16:4	0:0	4	}
call	17:4	17:22	2	printf
arg	17:11	17:22	3	"} (@emph{"
water	17:11	0:0	4	"} (@emph{"
water	17:23	0:0	2	;
if	18:4	22:4	2	(o -> flags & AV_OPT_FLAG_DECODING_PARAM)
cond	18:8	18:19	3	o -> flags & AV_OPT_FLAG_DECODING_PARAM
water	18:8	0:0	4	o
op	18:9	0:0	4	->
water	18:11	0:0	4	flags
op	18:17	0:0	4	&
water	18:19	0:0	4	AV_OPT_FLAG_DECODING_PARAM
stmts	18:47	22:4	3	
water	18:47	0:0	4	{
call	19:8	19:22	4	printf
arg	19:15	19:22	5	"input"
water	19:15	0:0	6	"input"
water	19:23	0:0	4	;
if	20:8	21:23	4	(o -> flags & AV_OPT_FLAG_ENCODING_PARAM)
cond	20:12	20:23	5	o -> flags & AV_OPT_FLAG_ENCODING_PARAM
water	20:12	0:0	6	o
op	20:13	0:0	6	->
water	20:15	0:0	6	flags
op	20:21	0:0	6	&
water	20:23	0:0	6	AV_OPT_FLAG_ENCODING_PARAM
stmts	21:12	21:23	5	
call	21:12	21:22	6	printf
arg	21:19	21:22	7	"/"
water	21:19	0:0	8	"/"
water	21:23	0:0	6	;
water	22:4	0:0	4	}
if	23:4	23:63	2	(o -> flags & AV_OPT_FLAG_ENCODING_PARAM)
cond	23:8	23:19	3	o -> flags & AV_OPT_FLAG_ENCODING_PARAM
water	23:8	0:0	4	o
op	23:9	0:0	4	->
water	23:11	0:0	4	flags
op	23:17	0:0	4	&
water	23:19	0:0	4	AV_OPT_FLAG_ENCODING_PARAM
stmts	23:47	23:63	3	
call	23:47	23:62	4	printf
arg	23:54	23:62	5	"output"
water	23:54	0:0	6	"output"
water	23:63	0:0	4	;
if	24:4	24:63	2	(o -> flags & AV_OPT_FLAG_AUDIO_PARAM)
cond	24:8	24:19	3	o -> flags & AV_OPT_FLAG_AUDIO_PARAM
water	24:8	0:0	4	o
op	24:9	0:0	4	->
water	24:11	0:0	4	flags
op	24:17	0:0	4	&
water	24:19	0:0	4	AV_OPT_FLAG_AUDIO_PARAM
stmts	24:47	24:63	3	
call	24:47	24:62	4	printf
arg	24:54	24:62	5	",audio"
water	24:54	0:0	6	",audio"
water	24:63	0:0	4	;
if	25:4	25:63	2	(o -> flags & AV_OPT_FLAG_VIDEO_PARAM)
cond	25:8	25:19	3	o -> flags & AV_OPT_FLAG_VIDEO_PARAM
water	25:8	0:0	4	o
op	25:9	0:0	4	->
water	25:11	0:0	4	flags
op	25:17	0:0	4	&
water	25:19	0:0	4	AV_OPT_FLAG_VIDEO_PARAM
stmts	25:47	25:63	3	
call	25:47	25:62	4	printf
arg	25:54	25:62	5	",video"
water	25:54	0:0	6	",video"
water	25:63	0:0	4	;
if	26:4	26:67	2	(o -> flags & AV_OPT_FLAG_SUBTITLE_PARAM)
cond	26:8	26:19	3	o -> flags & AV_OPT_FLAG_SUBTITLE_PARAM
water	26:8	0:0	4	o
op	26:9	0:0	4	->
water	26:11	0:0	4	flags
op	26:17	0:0	4	&
water	26:19	0:0	4	AV_OPT_FLAG_SUBTITLE_PARAM
stmts	26:47	26:67	3	
call	26:47	26:66	4	printf
arg	26:54	26:66	5	",subtitles"
water	26:54	0:0	6	",subtitles"
water	26:67	0:0	4	;
call	27:4	27:17	2	printf
arg	27:11	27:17	3	"})\n"
water	27:11	0:0	4	"})\n"
water	27:18	0:0	2	;
if	28:4	29:31	2	(o -> help)
cond	28:8	28:11	3	o -> help
water	28:8	0:0	4	o
op	28:9	0:0	4	->
water	28:11	0:0	4	help
stmts	29:8	29:31	3	
call	29:8	29:30	4	printf
arg	29:15	29:21	5	"%s\n"
water	29:15	0:0	6	"%s\n"
arg	29:23	29:30	5	o->help
water	29:23	0:0	6	o
op	29:24	0:0	6	->
water	29:26	0:0	6	help
water	29:31	0:0	4	;
if	30:4	38:4	2	(o -> unit)
cond	30:8	30:11	3	o -> unit
water	30:8	0:0	4	o
op	30:9	0:0	4	->
water	30:11	0:0	4	unit
stmts	30:17	38:4	3	
water	30:17	0:0	4	{
decl	31:8	31:25	4	const AVOption	*u
call	32:8	32:51	4	printf
arg	32:15	32:51	5	"\nPossible values:\n@table @samp\n"
water	32:15	0:0	6	"\nPossible values:\n@table @samp\n"
water	32:52	0:0	4	;
for	33:8	36:8	4	(u = opts ;u -> name;u ++)
forinit	33:13	33:21	5	u = opts ;
water	33:13	0:0	6	u
op	33:15	0:0	6	=
water	33:17	0:0	6	opts
water	33:21	0:0	6	;
cond	33:23	33:26	5	u -> name
water	33:23	0:0	6	u
op	33:24	0:0	6	->
water	33:26	0:0	6	name
forexpr	33:32	33:33	5	u ++
water	33:32	0:0	6	u
op	33:33	0:0	6	++
stmts	33:37	36:8	5	
water	33:37	0:0	6	{
if	34:12	35:73	6	(u -> type == AV_OPT_TYPE_CONST && u -> unit && !strcmp (u -> unit ,o -> unit ))
cond	34:16	34:83	7	u -> type == AV_OPT_TYPE_CONST && u -> unit && !strcmp (u -> unit ,o -> unit )
water	34:16	0:0	8	u
op	34:17	0:0	8	->
water	34:19	0:0	8	type
op	34:24	0:0	8	==
water	34:27	0:0	8	AV_OPT_TYPE_CONST
op	34:45	0:0	8	&&
water	34:48	0:0	8	u
op	34:49	0:0	8	->
water	34:51	0:0	8	unit
op	34:56	0:0	8	&&
op	34:59	0:0	8	!
call	34:60	34:83	8	strcmp
arg	34:67	34:74	9	u->unit
water	34:67	0:0	10	u
op	34:68	0:0	10	->
water	34:70	0:0	10	unit
arg	34:76	34:83	9	o->unit
water	34:76	0:0	10	o
op	34:77	0:0	10	->
water	34:79	0:0	10	unit
stmts	35:16	35:73	7	
call	35:16	35:72	8	printf
arg	35:23	35:39	9	"@item %s\n%s\n"
water	35:23	0:0	10	"@item %s\n%s\n"
arg	35:41	35:48	9	u->name
water	35:41	0:0	10	u
op	35:42	0:0	10	->
water	35:44	0:0	10	name
arg	35:50	35:72	9	u->help?u->help:""
water	35:50	0:0	10	u
op	35:51	0:0	10	->
water	35:53	0:0	10	help
water	35:58	0:0	10	?
water	35:60	0:0	10	u
op	35:61	0:0	10	->
water	35:63	0:0	10	help
water	35:68	0:0	10	:
water	35:70	0:0	10	""
water	35:73	0:0	8	;
water	36:8	0:0	6	}
call	37:8	37:29	4	printf
arg	37:15	37:29	5	"@end table\n"
water	37:15	0:0	6	"@end table\n"
water	37:30	0:0	4	;
water	38:4	0:0	4	}
