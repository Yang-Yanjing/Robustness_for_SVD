func	1:0	33:0	0	static inline void	do_imdct
params	1:27	0:0	1	
param	1:28	1:47	2	AC3DecodeContext *	s
param	1:49	1:61	2	int	channels
stmnts	0:0	32:4	1	
decl	3:4	3:10	2	int	ch
for	4:4	32:4	2	(ch = 1 ;ch <= channels;ch ++)
forinit	4:9	4:15	3	ch = 1 ;
water	4:9	0:0	4	ch
op	4:12	0:0	4	=
water	4:14	0:0	4	1
water	4:15	0:0	4	;
cond	4:17	4:23	3	ch <= channels
water	4:17	0:0	4	ch
op	4:20	0:0	4	<=
water	4:23	0:0	4	channels
forexpr	4:33	4:35	3	ch ++
water	4:33	0:0	4	ch
op	4:35	0:0	4	++
stmts	4:39	32:4	3	
water	4:39	0:0	4	{
if	5:8	21:8	4	(s -> block_switch [ ch ])
cond	5:12	5:30	5	s -> block_switch [ ch ]
water	5:12	0:0	6	s
op	5:13	0:0	6	->
water	5:15	0:0	6	block_switch
op	5:27	0:0	6	[
water	5:28	0:0	6	ch
op	5:30	0:0	6	]
stmts	5:33	21:8	5	
water	5:33	0:0	6	{
decl	6:12	6:17	6	int	i
decl	7:12	7:46	6	FFTSample	*x
op	7:25	0:0	6	=
water	7:27	0:0	6	s
op	7:28	0:0	6	->
water	7:30	0:0	6	tmp_output
op	7:41	0:0	6	+
water	7:43	0:0	6	128
for	8:12	9:53	6	(i = 0 ;i < 128;i ++)
forinit	8:17	8:22	7	i = 0 ;
water	8:17	0:0	8	i
op	8:19	0:0	8	=
water	8:21	0:0	8	0
water	8:22	0:0	8	;
cond	8:24	8:28	7	i < 128
water	8:24	0:0	8	i
op	8:26	0:0	8	<
water	8:28	0:0	8	128
forexpr	8:33	8:34	7	i ++
water	8:33	0:0	8	i
op	8:34	0:0	8	++
stmts	9:16	9:53	7	
water	9:16	0:0	8	x
op	9:17	0:0	8	[
water	9:18	0:0	8	i
op	9:19	0:0	8	]
op	9:21	0:0	8	=
water	9:23	0:0	8	s
op	9:24	0:0	8	->
water	9:26	0:0	8	transform_coeffs
op	9:42	0:0	8	[
water	9:43	0:0	8	ch
op	9:45	0:0	8	]
op	9:46	0:0	8	[
water	9:47	0:0	8	2
op	9:49	0:0	8	*
water	9:51	0:0	8	i
op	9:52	0:0	8	]
water	9:53	0:0	8	;
call	10:12	10:67	6	s->imdct_256.imdct_half
arg	10:36	10:49	7	&s->imdct_256
op	10:36	0:0	8	&
water	10:37	0:0	8	s
op	10:38	0:0	8	->
water	10:40	0:0	8	imdct_256
arg	10:51	10:64	7	s->tmp_output
water	10:51	0:0	8	s
op	10:52	0:0	8	->
water	10:54	0:0	8	tmp_output
arg	10:66	10:67	7	x
water	10:66	0:0	8	x
water	10:68	0:0	6	;
call	12:12	13:71	6	s->fdsp->vector_fmul_window_scaled
arg	12:47	12:64	7	s->outptr[ch-1]
water	12:47	0:0	8	s
op	12:48	0:0	8	->
water	12:50	0:0	8	outptr
op	12:56	0:0	8	[
water	12:57	0:0	8	ch
op	12:60	0:0	8	-
water	12:62	0:0	8	1
op	12:63	0:0	8	]
arg	12:66	12:82	7	s->delay[ch-1]
water	12:66	0:0	8	s
op	12:67	0:0	8	->
water	12:69	0:0	8	delay
op	12:74	0:0	8	[
water	12:75	0:0	8	ch
op	12:78	0:0	8	-
water	12:80	0:0	8	1
op	12:81	0:0	8	]
arg	13:39	13:52	7	s->tmp_output
water	13:39	0:0	8	s
op	13:40	0:0	8	->
water	13:42	0:0	8	tmp_output
arg	13:54	13:63	7	s->window
water	13:54	0:0	8	s
op	13:55	0:0	8	->
water	13:57	0:0	8	window
arg	13:65	13:68	7	128
water	13:65	0:0	8	128
arg	13:70	13:71	7	8
water	13:70	0:0	8	8
water	13:72	0:0	6	;
call	15:12	16:68	6	s->fdsp->vector_fmul_window
arg	15:40	15:57	7	s->outptr[ch-1]
water	15:40	0:0	8	s
op	15:41	0:0	8	->
water	15:43	0:0	8	outptr
op	15:49	0:0	8	[
water	15:50	0:0	8	ch
op	15:53	0:0	8	-
water	15:55	0:0	8	1
op	15:56	0:0	8	]
arg	15:59	15:75	7	s->delay[ch-1]
water	15:59	0:0	8	s
op	15:60	0:0	8	->
water	15:62	0:0	8	delay
op	15:67	0:0	8	[
water	15:68	0:0	8	ch
op	15:71	0:0	8	-
water	15:73	0:0	8	1
op	15:74	0:0	8	]
arg	16:39	16:52	7	s->tmp_output
water	16:39	0:0	8	s
op	16:40	0:0	8	->
water	16:42	0:0	8	tmp_output
arg	16:54	16:63	7	s->window
water	16:54	0:0	8	s
op	16:55	0:0	8	->
water	16:57	0:0	8	window
arg	16:65	16:68	7	128
water	16:65	0:0	8	128
water	16:69	0:0	6	;
for	18:12	19:57	6	(i = 0 ;i < 128;i ++)
forinit	18:17	18:22	7	i = 0 ;
water	18:17	0:0	8	i
op	18:19	0:0	8	=
water	18:21	0:0	8	0
water	18:22	0:0	8	;
cond	18:24	18:28	7	i < 128
water	18:24	0:0	8	i
op	18:26	0:0	8	<
water	18:28	0:0	8	128
forexpr	18:33	18:34	7	i ++
water	18:33	0:0	8	i
op	18:34	0:0	8	++
stmts	19:16	19:57	7	
water	19:16	0:0	8	x
op	19:17	0:0	8	[
water	19:18	0:0	8	i
op	19:19	0:0	8	]
op	19:21	0:0	8	=
water	19:23	0:0	8	s
op	19:24	0:0	8	->
water	19:26	0:0	8	transform_coeffs
op	19:42	0:0	8	[
water	19:43	0:0	8	ch
op	19:45	0:0	8	]
op	19:46	0:0	8	[
water	19:47	0:0	8	2
op	19:49	0:0	8	*
water	19:51	0:0	8	i
op	19:53	0:0	8	+
water	19:55	0:0	8	1
op	19:56	0:0	8	]
water	19:57	0:0	8	;
call	20:12	20:70	6	s->imdct_256.imdct_half
arg	20:36	20:49	7	&s->imdct_256
op	20:36	0:0	8	&
water	20:37	0:0	8	s
op	20:38	0:0	8	->
water	20:40	0:0	8	imdct_256
arg	20:51	20:67	7	s->delay[ch-1]
water	20:51	0:0	8	s
op	20:52	0:0	8	->
water	20:54	0:0	8	delay
op	20:59	0:0	8	[
water	20:60	0:0	8	ch
op	20:63	0:0	8	-
water	20:65	0:0	8	1
op	20:66	0:0	8	]
arg	20:69	20:70	7	x
water	20:69	0:0	8	x
water	20:71	0:0	6	;
water	21:8	0:0	6	}
else	21:10	31:8	4
stmts	21:15	31:8	5	
water	21:15	0:0	6	{
call	22:12	22:89	6	s->imdct_512.imdct_half
arg	22:36	22:49	7	&s->imdct_512
op	22:36	0:0	8	&
water	22:37	0:0	8	s
op	22:38	0:0	8	->
water	22:40	0:0	8	imdct_512
arg	22:51	22:64	7	s->tmp_output
water	22:51	0:0	8	s
op	22:52	0:0	8	->
water	22:54	0:0	8	tmp_output
arg	22:66	22:89	7	s->transform_coeffs[ch]
water	22:66	0:0	8	s
op	22:67	0:0	8	->
water	22:69	0:0	8	transform_coeffs
op	22:85	0:0	8	[
water	22:86	0:0	8	ch
op	22:88	0:0	8	]
water	22:90	0:0	6	;
call	24:12	25:71	6	s->fdsp->vector_fmul_window_scaled
arg	24:47	24:64	7	s->outptr[ch-1]
water	24:47	0:0	8	s
op	24:48	0:0	8	->
water	24:50	0:0	8	outptr
op	24:56	0:0	8	[
water	24:57	0:0	8	ch
op	24:60	0:0	8	-
water	24:62	0:0	8	1
op	24:63	0:0	8	]
arg	24:66	24:82	7	s->delay[ch-1]
water	24:66	0:0	8	s
op	24:67	0:0	8	->
water	24:69	0:0	8	delay
op	24:74	0:0	8	[
water	24:75	0:0	8	ch
op	24:78	0:0	8	-
water	24:80	0:0	8	1
op	24:81	0:0	8	]
arg	25:39	25:52	7	s->tmp_output
water	25:39	0:0	8	s
op	25:40	0:0	8	->
water	25:42	0:0	8	tmp_output
arg	25:54	25:63	7	s->window
water	25:54	0:0	8	s
op	25:55	0:0	8	->
water	25:57	0:0	8	window
arg	25:65	25:68	7	128
water	25:65	0:0	8	128
arg	25:70	25:71	7	8
water	25:70	0:0	8	8
water	25:72	0:0	6	;
call	27:12	28:68	6	s->fdsp->vector_fmul_window
arg	27:40	27:57	7	s->outptr[ch-1]
water	27:40	0:0	8	s
op	27:41	0:0	8	->
water	27:43	0:0	8	outptr
op	27:49	0:0	8	[
water	27:50	0:0	8	ch
op	27:53	0:0	8	-
water	27:55	0:0	8	1
op	27:56	0:0	8	]
arg	27:59	27:75	7	s->delay[ch-1]
water	27:59	0:0	8	s
op	27:60	0:0	8	->
water	27:62	0:0	8	delay
op	27:67	0:0	8	[
water	27:68	0:0	8	ch
op	27:71	0:0	8	-
water	27:73	0:0	8	1
op	27:74	0:0	8	]
arg	28:39	28:52	7	s->tmp_output
water	28:39	0:0	8	s
op	28:40	0:0	8	->
water	28:42	0:0	8	tmp_output
arg	28:54	28:63	7	s->window
water	28:54	0:0	8	s
op	28:55	0:0	8	->
water	28:57	0:0	8	window
arg	28:65	28:68	7	128
water	28:65	0:0	8	128
water	28:69	0:0	6	;
call	30:12	30:81	6	memcpy
arg	30:19	30:35	7	s->delay[ch-1]
water	30:19	0:0	8	s
op	30:20	0:0	8	->
water	30:22	0:0	8	delay
op	30:27	0:0	8	[
water	30:28	0:0	8	ch
op	30:31	0:0	8	-
water	30:33	0:0	8	1
op	30:34	0:0	8	]
arg	30:37	30:56	7	s->tmp_output+128
water	30:37	0:0	8	s
op	30:38	0:0	8	->
water	30:40	0:0	8	tmp_output
op	30:51	0:0	8	+
water	30:53	0:0	8	128
arg	30:58	30:81	7	128*sizeof(FFTSample)
water	30:58	0:0	8	128
op	30:62	0:0	8	*
op	30:64	0:0	8	sizeof
water	30:70	0:0	8	(
water	30:71	0:0	8	FFTSample
water	30:80	0:0	8	)
water	30:82	0:0	6	;
water	31:8	0:0	6	}
water	32:4	0:0	4	}
