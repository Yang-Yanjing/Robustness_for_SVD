func	1:24	46:0	0	void	yuv2rgb_full_X_c_template
params	2:25	0:0	1	
param	2:26	2:39	2	SwsContext *	c
param	2:41	2:65	2	const int16_t *	lumFilter
param	3:26	3:48	2	const int16_t * *	lumSrc
param	3:50	3:67	2	int	lumFilterSize
param	4:26	4:50	2	const int16_t *	chrFilter
param	4:52	4:75	2	const int16_t * *	chrUSrc
param	5:26	5:49	2	const int16_t * *	chrVSrc
param	5:51	5:68	2	int	chrFilterSize
param	6:26	6:48	2	const int16_t * *	alpSrc
param	6:50	6:63	2	uint8_t *	dest
param	7:26	7:34	2	int	dstW
param	7:36	7:41	2	int	y
param	7:43	7:68	2	enum AVPixelFormat	target
param	7:70	7:82	2	int	hasAlpha
stmnts	0:0	45:34	1	
decl	9:4	9:9	2	int	i
decl	10:4	10:81	2	int	step
op	10:13	0:0	2	=
water	10:15	0:0	2	(
water	10:16	0:0	2	target
op	10:23	0:0	2	==
water	10:26	0:0	2	AV_PIX_FMT_RGB24
op	10:43	0:0	2	||
water	10:46	0:0	2	target
op	10:53	0:0	2	==
water	10:56	0:0	2	AV_PIX_FMT_BGR24
water	10:72	0:0	2	)
water	10:74	0:0	2	?
water	10:76	0:0	2	3
water	10:78	0:0	2	:
water	10:80	0:0	2	4
decl	11:4	11:20	2	int	err[4]
op	11:15	0:0	2	=
water	11:17	0:0	2	{
water	11:18	0:0	2	0
water	11:19	0:0	2	}
decl	12:4	12:13	2	int	A
op	12:10	0:0	2	=
water	12:12	0:0	2	0
if	13:4	15:16	2	(target == AV_PIX_FMT_BGR4_BYTE || target == AV_PIX_FMT_RGB4_BYTE || target == AV_PIX_FMT_BGR8 || target == AV_PIX_FMT_RGB8)
cond	13:10	14:54	3	target == AV_PIX_FMT_BGR4_BYTE || target == AV_PIX_FMT_RGB4_BYTE || target == AV_PIX_FMT_BGR8 || target == AV_PIX_FMT_RGB8
water	13:10	0:0	4	target
op	13:17	0:0	4	==
water	13:20	0:0	4	AV_PIX_FMT_BGR4_BYTE
op	13:41	0:0	4	||
water	13:44	0:0	4	target
op	13:51	0:0	4	==
water	13:54	0:0	4	AV_PIX_FMT_RGB4_BYTE
op	14:7	0:0	4	||
water	14:10	0:0	4	target
op	14:17	0:0	4	==
water	14:20	0:0	4	AV_PIX_FMT_BGR8
op	14:41	0:0	4	||
water	14:44	0:0	4	target
op	14:51	0:0	4	==
water	14:54	0:0	4	AV_PIX_FMT_RGB8
stmts	15:8	15:16	3	
water	15:8	0:0	4	step
op	15:13	0:0	4	=
water	15:15	0:0	4	1
water	15:16	0:0	4	;
for	16:4	42:4	2	(i = 0 ;i < dstW;i ++)
forinit	16:9	16:14	3	i = 0 ;
water	16:9	0:0	4	i
op	16:11	0:0	4	=
water	16:13	0:0	4	0
water	16:14	0:0	4	;
cond	16:16	16:20	3	i < dstW
water	16:16	0:0	4	i
op	16:18	0:0	4	<
water	16:20	0:0	4	dstW
forexpr	16:26	16:27	3	i ++
water	16:26	0:0	4	i
op	16:27	0:0	4	++
stmts	16:31	42:4	3	
water	16:31	0:0	4	{
decl	17:8	17:13	4	int	j
decl	18:8	18:20	4	int	Y
op	18:14	0:0	4	=
water	18:16	0:0	4	1
op	18:17	0:0	4	<<
water	18:19	0:0	4	9
decl	19:8	19:34	4	int	U
op	19:14	0:0	4	=
water	19:16	0:0	4	(
water	19:17	0:0	4	1
op	19:18	0:0	4	<<
water	19:20	0:0	4	9
water	19:21	0:0	4	)
op	19:22	0:0	4	-
water	19:23	0:0	4	(
water	19:24	0:0	4	128
op	19:28	0:0	4	<<
water	19:31	0:0	4	19
water	19:33	0:0	4	)
decl	20:8	20:34	4	int	V
op	20:14	0:0	4	=
water	20:16	0:0	4	(
water	20:17	0:0	4	1
op	20:18	0:0	4	<<
water	20:20	0:0	4	9
water	20:21	0:0	4	)
op	20:22	0:0	4	-
water	20:23	0:0	4	(
water	20:24	0:0	4	128
op	20:28	0:0	4	<<
water	20:31	0:0	4	19
water	20:33	0:0	4	)
for	21:8	23:8	4	(j = 0 ;j < lumFilterSize;j ++)
forinit	21:13	21:18	5	j = 0 ;
water	21:13	0:0	6	j
op	21:15	0:0	6	=
water	21:17	0:0	6	0
water	21:18	0:0	6	;
cond	21:20	21:24	5	j < lumFilterSize
water	21:20	0:0	6	j
op	21:22	0:0	6	<
water	21:24	0:0	6	lumFilterSize
forexpr	21:39	21:40	5	j ++
water	21:39	0:0	6	j
op	21:40	0:0	6	++
stmts	21:44	23:8	5	
water	21:44	0:0	6	{
water	22:12	0:0	6	Y
op	22:14	0:0	6	+=
water	22:17	0:0	6	lumSrc
op	22:23	0:0	6	[
water	22:24	0:0	6	j
op	22:25	0:0	6	]
op	22:26	0:0	6	[
water	22:27	0:0	6	i
op	22:28	0:0	6	]
op	22:30	0:0	6	*
water	22:32	0:0	6	lumFilter
op	22:41	0:0	6	[
water	22:42	0:0	6	j
op	22:43	0:0	6	]
water	22:44	0:0	6	;
water	23:8	0:0	6	}
for	24:8	27:8	4	(j = 0 ;j < chrFilterSize;j ++)
forinit	24:13	24:18	5	j = 0 ;
water	24:13	0:0	6	j
op	24:15	0:0	6	=
water	24:17	0:0	6	0
water	24:18	0:0	6	;
cond	24:20	24:24	5	j < chrFilterSize
water	24:20	0:0	6	j
op	24:22	0:0	6	<
water	24:24	0:0	6	chrFilterSize
forexpr	24:39	24:40	5	j ++
water	24:39	0:0	6	j
op	24:40	0:0	6	++
stmts	24:44	27:8	5	
water	24:44	0:0	6	{
water	25:12	0:0	6	U
op	25:14	0:0	6	+=
water	25:17	0:0	6	chrUSrc
op	25:24	0:0	6	[
water	25:25	0:0	6	j
op	25:26	0:0	6	]
op	25:27	0:0	6	[
water	25:28	0:0	6	i
op	25:29	0:0	6	]
op	25:31	0:0	6	*
water	25:33	0:0	6	chrFilter
op	25:42	0:0	6	[
water	25:43	0:0	6	j
op	25:44	0:0	6	]
water	25:45	0:0	6	;
water	26:12	0:0	6	V
op	26:14	0:0	6	+=
water	26:17	0:0	6	chrVSrc
op	26:24	0:0	6	[
water	26:25	0:0	6	j
op	26:26	0:0	6	]
op	26:27	0:0	6	[
water	26:28	0:0	6	i
op	26:29	0:0	6	]
op	26:31	0:0	6	*
water	26:33	0:0	6	chrFilter
op	26:42	0:0	6	[
water	26:43	0:0	6	j
op	26:44	0:0	6	]
water	26:45	0:0	6	;
water	27:8	0:0	6	}
water	28:8	0:0	4	Y
op	28:10	0:0	4	>>=
water	28:14	0:0	4	10
water	28:16	0:0	4	;
water	29:8	0:0	4	U
op	29:10	0:0	4	>>=
water	29:14	0:0	4	10
water	29:16	0:0	4	;
water	30:8	0:0	4	V
op	30:10	0:0	4	>>=
water	30:14	0:0	4	10
water	30:16	0:0	4	;
if	31:8	39:8	4	(hasAlpha)
cond	31:12	31:12	5	hasAlpha
water	31:12	0:0	6	hasAlpha
stmts	31:22	39:8	5	
water	31:22	0:0	6	{
water	32:12	0:0	6	A
op	32:14	0:0	6	=
water	32:16	0:0	6	1
op	32:18	0:0	6	<<
water	32:21	0:0	6	18
water	32:23	0:0	6	;
for	33:12	35:12	6	(j = 0 ;j < lumFilterSize;j ++)
forinit	33:17	33:22	7	j = 0 ;
water	33:17	0:0	8	j
op	33:19	0:0	8	=
water	33:21	0:0	8	0
water	33:22	0:0	8	;
cond	33:24	33:28	7	j < lumFilterSize
water	33:24	0:0	8	j
op	33:26	0:0	8	<
water	33:28	0:0	8	lumFilterSize
forexpr	33:43	33:44	7	j ++
water	33:43	0:0	8	j
op	33:44	0:0	8	++
stmts	33:48	35:12	7	
water	33:48	0:0	8	{
water	34:16	0:0	8	A
op	34:18	0:0	8	+=
water	34:21	0:0	8	alpSrc
op	34:27	0:0	8	[
water	34:28	0:0	8	j
op	34:29	0:0	8	]
op	34:30	0:0	8	[
water	34:31	0:0	8	i
op	34:32	0:0	8	]
op	34:34	0:0	8	*
water	34:36	0:0	8	lumFilter
op	34:45	0:0	8	[
water	34:46	0:0	8	j
op	34:47	0:0	8	]
water	34:48	0:0	8	;
water	35:12	0:0	8	}
water	36:12	0:0	6	A
op	36:14	0:0	6	>>=
water	36:18	0:0	6	19
water	36:20	0:0	6	;
if	37:12	38:36	6	(A & 0 x100)
cond	37:16	37:21	7	A & 0 x100
water	37:16	0:0	8	A
op	37:18	0:0	8	&
water	37:20	0:0	8	0
water	37:21	0:0	8	x100
stmts	38:16	38:36	7	
water	38:16	0:0	8	A
op	38:18	0:0	8	=
call	38:20	38:35	8	av_clip_uint8
arg	38:34	38:35	9	A
water	38:34	0:0	10	A
water	38:36	0:0	8	;
water	39:8	0:0	6	}
call	40:8	40:75	4	yuv2rgb_write_full
arg	40:27	40:28	5	c
water	40:27	0:0	6	c
arg	40:30	40:34	5	dest
water	40:30	0:0	6	dest
arg	40:36	40:37	5	i
water	40:36	0:0	6	i
arg	40:39	40:40	5	Y
water	40:39	0:0	6	Y
arg	40:42	40:43	5	A
water	40:42	0:0	6	A
arg	40:45	40:46	5	U
water	40:45	0:0	6	U
arg	40:48	40:49	5	V
water	40:48	0:0	6	V
arg	40:51	40:52	5	y
water	40:51	0:0	6	y
arg	40:54	40:60	5	target
water	40:54	0:0	6	target
arg	40:62	40:70	5	hasAlpha
water	40:62	0:0	6	hasAlpha
arg	40:72	40:75	5	err
water	40:72	0:0	6	err
water	40:76	0:0	4	;
water	41:8	0:0	4	dest
op	41:13	0:0	4	+=
water	41:16	0:0	4	step
water	41:20	0:0	4	;
water	42:4	0:0	4	}
water	43:4	0:0	2	c
op	43:5	0:0	2	->
water	43:7	0:0	2	dither_error
op	43:19	0:0	2	[
water	43:20	0:0	2	0
op	43:21	0:0	2	]
op	43:22	0:0	2	[
water	43:23	0:0	2	i
op	43:24	0:0	2	]
op	43:26	0:0	2	=
water	43:28	0:0	2	err
op	43:31	0:0	2	[
water	43:32	0:0	2	0
op	43:33	0:0	2	]
water	43:34	0:0	2	;
water	44:4	0:0	2	c
op	44:5	0:0	2	->
water	44:7	0:0	2	dither_error
op	44:19	0:0	2	[
water	44:20	0:0	2	1
op	44:21	0:0	2	]
op	44:22	0:0	2	[
water	44:23	0:0	2	i
op	44:24	0:0	2	]
op	44:26	0:0	2	=
water	44:28	0:0	2	err
op	44:31	0:0	2	[
water	44:32	0:0	2	1
op	44:33	0:0	2	]
water	44:34	0:0	2	;
water	45:4	0:0	2	c
op	45:5	0:0	2	->
water	45:7	0:0	2	dither_error
op	45:19	0:0	2	[
water	45:20	0:0	2	2
op	45:21	0:0	2	]
op	45:22	0:0	2	[
water	45:23	0:0	2	i
op	45:24	0:0	2	]
op	45:26	0:0	2	=
water	45:28	0:0	2	err
op	45:31	0:0	2	[
water	45:32	0:0	2	2
op	45:33	0:0	2	]
water	45:34	0:0	2	;
