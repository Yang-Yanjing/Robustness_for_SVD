func	1:0	84:0	0	static int	dshow_add_device
params	2:16	0:0	1	
param	2:17	2:39	2	AVFormatContext *	avctx
param	3:17	3:45	2	enum dshowDeviceType	devtype
stmnts	0:0	83:14	1	
decl	5:4	5:44	2	struct dshow_ctx	*ctx
op	5:26	0:0	2	=
water	5:28	0:0	2	avctx
op	5:33	0:0	2	->
water	5:35	0:0	2	priv_data
decl	6:4	6:22	2	AM_MEDIA_TYPE	type
decl	7:4	7:25	2	AVCodecContext	*codec
decl	8:4	8:16	2	AVStream	*st
decl	9:4	9:26	2	int	ret
op	9:12	0:0	2	=
call	9:14	9:25	3	AVERROR
arg	9:22	9:25	4	EIO
water	9:22	0:0	5	EIO
water	10:4	0:0	2	st
op	10:7	0:0	2	=
call	10:9	10:40	2	avformat_new_stream
arg	10:29	10:34	3	avctx
water	10:29	0:0	4	avctx
arg	10:36	10:40	3	NULL
water	10:36	0:0	4	NULL
water	10:41	0:0	2	;
if	11:4	14:4	2	(! st)
cond	11:8	11:9	3	! st
op	11:8	0:0	4	!
water	11:9	0:0	4	st
stmts	11:13	14:4	3	
water	11:13	0:0	4	{
water	12:8	0:0	4	ret
op	12:12	0:0	4	=
call	12:14	12:28	4	AVERROR
arg	12:22	12:28	5	ENOMEM
water	12:22	0:0	6	ENOMEM
water	12:29	0:0	4	;
goto	13:8	13:18	4	error
water	13:13	0:0	5	error
water	14:4	0:0	4	}
water	15:4	0:0	2	st
op	15:6	0:0	2	->
water	15:8	0:0	2	id
op	15:11	0:0	2	=
water	15:13	0:0	2	devtype
water	15:20	0:0	2	;
water	16:4	0:0	2	ctx
op	16:7	0:0	2	->
water	16:9	0:0	2	capture_filter
op	16:23	0:0	2	[
water	16:24	0:0	2	devtype
op	16:31	0:0	2	]
op	16:32	0:0	2	->
water	16:34	0:0	2	stream_index
op	16:47	0:0	2	=
water	16:49	0:0	2	st
op	16:51	0:0	2	->
water	16:53	0:0	2	index
water	16:58	0:0	2	;
call	17:4	17:65	2	libAVPin_ConnectionMediaType
arg	17:33	17:58	3	ctx->capture_pin[devtype]
water	17:33	0:0	4	ctx
op	17:36	0:0	4	->
water	17:38	0:0	4	capture_pin
op	17:49	0:0	4	[
water	17:50	0:0	4	devtype
op	17:57	0:0	4	]
arg	17:60	17:65	3	&type
op	17:60	0:0	4	&
water	17:61	0:0	4	type
water	17:66	0:0	2	;
water	18:4	0:0	2	codec
op	18:10	0:0	2	=
water	18:12	0:0	2	st
op	18:14	0:0	2	->
water	18:16	0:0	2	codec
water	18:21	0:0	2	;
if	19:4	65:4	2	(devtype == VideoDevice)
cond	19:8	19:19	3	devtype == VideoDevice
water	19:8	0:0	4	devtype
op	19:16	0:0	4	==
water	19:19	0:0	4	VideoDevice
stmts	19:32	65:4	3	
water	19:32	0:0	4	{
decl	20:8	20:36	4	BITMAPINFOHEADER	*bih
op	20:30	0:0	4	=
water	20:32	0:0	4	NULL
decl	21:8	21:28	4	AVRational	time_base
if	22:8	26:8	4	(IsEqualGUID (& type . formattype ,& FORMAT_VideoInfo ))
cond	22:12	22:59	5	IsEqualGUID (& type . formattype ,& FORMAT_VideoInfo )
call	22:12	22:59	6	IsEqualGUID
arg	22:24	22:40	7	&type.formattype
op	22:24	0:0	8	&
water	22:25	0:0	8	type
op	22:29	0:0	8	.
water	22:30	0:0	8	formattype
arg	22:42	22:59	7	&FORMAT_VideoInfo
op	22:42	0:0	8	&
water	22:43	0:0	8	FORMAT_VideoInfo
stmts	22:62	26:8	5	
water	22:62	0:0	6	{
decl	23:12	23:55	6	VIDEOINFOHEADER	*v
op	23:31	0:0	6	=
water	23:33	0:0	6	(
water	23:34	0:0	6	void
op	23:39	0:0	6	*
water	23:40	0:0	6	)
water	23:42	0:0	6	type
op	23:46	0:0	6	.
water	23:47	0:0	6	pbFormat
water	24:12	0:0	6	time_base
op	24:22	0:0	6	=
water	24:24	0:0	6	(
water	24:25	0:0	6	AVRational
water	24:35	0:0	6	)
water	24:37	0:0	6	{
water	24:39	0:0	6	v
op	24:40	0:0	6	->
water	24:42	0:0	6	AvgTimePerFrame
water	24:57	0:0	6	,
water	24:59	0:0	6	10000000
water	24:68	0:0	6	}
water	24:69	0:0	6	;
water	25:12	0:0	6	bih
op	25:16	0:0	6	=
op	25:18	0:0	6	&
water	25:19	0:0	6	v
op	25:20	0:0	6	->
water	25:22	0:0	6	bmiHeader
water	25:31	0:0	6	;
water	26:8	0:0	6	}
else	26:10	30:8	4
stmts	26:15	30:8	5	
if	26:15	30:8	6	(IsEqualGUID (& type . formattype ,& FORMAT_VideoInfo2 ))
cond	26:19	26:67	7	IsEqualGUID (& type . formattype ,& FORMAT_VideoInfo2 )
call	26:19	26:67	8	IsEqualGUID
arg	26:31	26:47	9	&type.formattype
op	26:31	0:0	10	&
water	26:32	0:0	10	type
op	26:36	0:0	10	.
water	26:37	0:0	10	formattype
arg	26:49	26:67	9	&FORMAT_VideoInfo2
op	26:49	0:0	10	&
water	26:50	0:0	10	FORMAT_VideoInfo2
stmts	26:70	30:8	7	
water	26:70	0:0	8	{
decl	27:12	27:56	8	VIDEOINFOHEADER2	*v
op	27:32	0:0	8	=
water	27:34	0:0	8	(
water	27:35	0:0	8	void
op	27:40	0:0	8	*
water	27:41	0:0	8	)
water	27:43	0:0	8	type
op	27:47	0:0	8	.
water	27:48	0:0	8	pbFormat
water	28:12	0:0	8	time_base
op	28:22	0:0	8	=
water	28:24	0:0	8	(
water	28:25	0:0	8	AVRational
water	28:35	0:0	8	)
water	28:37	0:0	8	{
water	28:39	0:0	8	v
op	28:40	0:0	8	->
water	28:42	0:0	8	AvgTimePerFrame
water	28:57	0:0	8	,
water	28:59	0:0	8	10000000
water	28:68	0:0	8	}
water	28:69	0:0	8	;
water	29:12	0:0	8	bih
op	29:16	0:0	8	=
op	29:18	0:0	8	&
water	29:19	0:0	8	v
op	29:20	0:0	8	->
water	29:22	0:0	8	bmiHeader
water	29:31	0:0	8	;
water	30:8	0:0	8	}
if	31:8	34:8	4	(! bih)
cond	31:12	31:13	5	! bih
op	31:12	0:0	6	!
water	31:13	0:0	6	bih
stmts	31:18	34:8	5	
water	31:18	0:0	6	{
call	32:12	32:69	6	av_log
arg	32:19	32:24	7	avctx
water	32:19	0:0	8	avctx
arg	32:26	32:38	7	AV_LOG_ERROR
water	32:26	0:0	8	AV_LOG_ERROR
arg	32:40	32:69	7	"Could not get media type.\n"
water	32:40	0:0	8	"Could not get media type.\n"
water	32:70	0:0	6	;
goto	33:12	33:22	6	error
water	33:17	0:0	7	error
water	34:8	0:0	6	}
water	35:8	0:0	4	codec
op	35:13	0:0	4	->
water	35:15	0:0	4	time_base
op	35:26	0:0	4	=
water	35:28	0:0	4	time_base
water	35:37	0:0	4	;
water	36:8	0:0	4	codec
op	36:13	0:0	4	->
water	36:15	0:0	4	codec_type
op	36:26	0:0	4	=
water	36:28	0:0	4	AVMEDIA_TYPE_VIDEO
water	36:46	0:0	4	;
water	37:8	0:0	4	codec
op	37:13	0:0	4	->
water	37:15	0:0	4	width
op	37:26	0:0	4	=
water	37:28	0:0	4	bih
op	37:31	0:0	4	->
water	37:33	0:0	4	biWidth
water	37:40	0:0	4	;
water	38:8	0:0	4	codec
op	38:13	0:0	4	->
water	38:15	0:0	4	height
op	38:26	0:0	4	=
water	38:28	0:0	4	bih
op	38:31	0:0	4	->
water	38:33	0:0	4	biHeight
water	38:41	0:0	4	;
water	39:8	0:0	4	codec
op	39:13	0:0	4	->
water	39:15	0:0	4	codec_tag
op	39:26	0:0	4	=
water	39:28	0:0	4	bih
op	39:31	0:0	4	->
water	39:33	0:0	4	biCompression
water	39:46	0:0	4	;
water	40:8	0:0	4	codec
op	40:13	0:0	4	->
water	40:15	0:0	4	pix_fmt
op	40:26	0:0	4	=
call	40:28	40:76	4	dshow_pixfmt
arg	40:41	40:59	5	bih->biCompression
water	40:41	0:0	6	bih
op	40:44	0:0	6	->
water	40:46	0:0	6	biCompression
arg	40:61	40:76	5	bih->biBitCount
water	40:61	0:0	6	bih
op	40:64	0:0	6	->
water	40:66	0:0	6	biBitCount
water	40:77	0:0	4	;
if	41:8	44:8	4	(bih -> biCompression ==MKTAG ('H' ,'D' ,'Y' ,'C' ))
cond	41:12	41:58	5	bih -> biCompression ==MKTAG ('H' ,'D' ,'Y' ,'C' )
water	41:12	0:0	6	bih
op	41:15	0:0	6	->
water	41:17	0:0	6	biCompression
op	41:31	0:0	6	==
call	41:34	41:58	6	MKTAG
arg	41:40	41:43	7	'H'
water	41:40	0:0	8	'H'
arg	41:45	41:48	7	'D'
water	41:45	0:0	8	'D'
arg	41:50	41:53	7	'Y'
water	41:50	0:0	8	'Y'
arg	41:55	41:58	7	'C'
water	41:55	0:0	8	'C'
stmts	41:61	44:8	5	
water	41:61	0:0	6	{
call	42:12	42:81	6	av_log
arg	42:19	42:24	7	avctx
water	42:19	0:0	8	avctx
arg	42:26	42:38	7	AV_LOG_DEBUG
water	42:26	0:0	8	AV_LOG_DEBUG
arg	42:40	42:81	7	"attempt to use full range for HDYC...\n"
water	42:40	0:0	8	"attempt to use full range for HDYC...\n"
water	42:82	0:0	6	;
water	43:12	0:0	6	codec
op	43:17	0:0	6	->
water	43:19	0:0	6	color_range
op	43:31	0:0	6	=
water	43:33	0:0	6	AVCOL_RANGE_MPEG
water	43:49	0:0	6	;
water	44:8	0:0	6	}
if	45:8	54:8	4	(codec -> pix_fmt == AV_PIX_FMT_NONE)
cond	45:12	45:30	5	codec -> pix_fmt == AV_PIX_FMT_NONE
water	45:12	0:0	6	codec
op	45:17	0:0	6	->
water	45:19	0:0	6	pix_fmt
op	45:27	0:0	6	==
water	45:30	0:0	6	AV_PIX_FMT_NONE
stmts	45:47	54:8	5	
water	45:47	0:0	6	{
water	46:12	0:0	6	const
water	46:18	0:0	6	AVCodecTag
op	46:29	0:0	6	*
water	46:30	0:0	6	const
water	46:36	0:0	6	tags
op	46:40	0:0	6	[
op	46:41	0:0	6	]
op	46:43	0:0	6	=
water	46:45	0:0	6	{
call	46:47	46:76	6	avformat_get_riff_video_tags
water	46:77	0:0	6	,
water	46:79	0:0	6	NULL
water	46:84	0:0	6	}
water	46:85	0:0	6	;
water	47:12	0:0	6	codec
op	47:17	0:0	6	->
water	47:19	0:0	6	codec_id
op	47:28	0:0	6	=
call	47:30	47:70	6	av_codec_get_id
arg	47:46	47:50	7	tags
water	47:46	0:0	8	tags
arg	47:52	47:70	7	bih->biCompression
water	47:52	0:0	8	bih
op	47:55	0:0	8	->
water	47:57	0:0	8	biCompression
water	47:71	0:0	6	;
if	48:12	52:12	6	(codec -> codec_id == AV_CODEC_ID_NONE)
cond	48:16	48:35	7	codec -> codec_id == AV_CODEC_ID_NONE
water	48:16	0:0	8	codec
op	48:21	0:0	8	->
water	48:23	0:0	8	codec_id
op	48:32	0:0	8	==
water	48:35	0:0	8	AV_CODEC_ID_NONE
stmts	48:53	52:12	7	
water	48:53	0:0	8	{
call	49:16	50:87	8	av_log
arg	49:23	49:28	9	avctx
water	49:23	0:0	10	avctx
arg	49:30	49:42	9	AV_LOG_ERROR
water	49:30	0:0	10	AV_LOG_ERROR
arg	49:44	50:61	9	"Unknown compression type. ""Please report type 0x%X.\n"
water	49:44	0:0	10	"Unknown compression type. "
water	50:33	0:0	10	"Please report type 0x%X.\n"
arg	50:63	50:87	9	(int)bih->biCompression
water	50:63	0:0	10	(
water	50:64	0:0	10	int
water	50:67	0:0	10	)
water	50:69	0:0	10	bih
op	50:72	0:0	10	->
water	50:74	0:0	10	biCompression
water	50:88	0:0	8	;
return	51:16	51:43	8	AVERROR_PATCHWELCOME
water	51:23	0:0	9	AVERROR_PATCHWELCOME
water	52:12	0:0	8	}
water	53:12	0:0	6	codec
op	53:17	0:0	6	->
water	53:19	0:0	6	bits_per_coded_sample
op	53:41	0:0	6	=
water	53:43	0:0	6	bih
op	53:46	0:0	6	->
water	53:48	0:0	6	biBitCount
water	53:58	0:0	6	;
water	54:8	0:0	6	}
else	54:10	64:8	4
stmts	54:15	64:8	5	
water	54:15	0:0	6	{
water	55:12	0:0	6	codec
op	55:17	0:0	6	->
water	55:19	0:0	6	codec_id
op	55:28	0:0	6	=
water	55:30	0:0	6	AV_CODEC_ID_RAWVIDEO
water	55:50	0:0	6	;
if	56:12	63:12	6	(bih -> biCompression == BI_RGB || bih -> biCompression == BI_BITFIELDS)
cond	56:16	56:70	7	bih -> biCompression == BI_RGB || bih -> biCompression == BI_BITFIELDS
water	56:16	0:0	8	bih
op	56:19	0:0	8	->
water	56:21	0:0	8	biCompression
op	56:35	0:0	8	==
water	56:38	0:0	8	BI_RGB
op	56:45	0:0	8	||
water	56:48	0:0	8	bih
op	56:51	0:0	8	->
water	56:53	0:0	8	biCompression
op	56:67	0:0	8	==
water	56:70	0:0	8	BI_BITFIELDS
stmts	56:84	63:12	7	
water	56:84	0:0	8	{
water	57:16	0:0	8	codec
op	57:21	0:0	8	->
water	57:23	0:0	8	bits_per_coded_sample
op	57:45	0:0	8	=
water	57:47	0:0	8	bih
op	57:50	0:0	8	->
water	57:52	0:0	8	biBitCount
water	57:62	0:0	8	;
water	58:16	0:0	8	codec
op	58:21	0:0	8	->
water	58:23	0:0	8	extradata
op	58:33	0:0	8	=
call	58:35	58:77	8	av_malloc
arg	58:45	58:77	9	9+AV_INPUT_BUFFER_PADDING_SIZE
water	58:45	0:0	10	9
op	58:47	0:0	10	+
water	58:49	0:0	10	AV_INPUT_BUFFER_PADDING_SIZE
water	58:78	0:0	8	;
if	59:16	62:16	8	(codec -> extradata)
cond	59:20	59:27	9	codec -> extradata
water	59:20	0:0	10	codec
op	59:25	0:0	10	->
water	59:27	0:0	10	extradata
stmts	59:38	62:16	9	
water	59:38	0:0	10	{
water	60:20	0:0	10	codec
op	60:25	0:0	10	->
water	60:27	0:0	10	extradata_size
op	60:42	0:0	10	=
water	60:44	0:0	10	9
water	60:45	0:0	10	;
call	61:20	61:58	10	memcpy
arg	61:27	61:43	11	codec->extradata
water	61:27	0:0	12	codec
op	61:32	0:0	12	->
water	61:34	0:0	12	extradata
arg	61:45	61:55	11	"BottomUp"
water	61:45	0:0	12	"BottomUp"
arg	61:57	61:58	11	9
water	61:57	0:0	12	9
water	61:59	0:0	10	;
water	62:16	0:0	10	}
water	63:12	0:0	8	}
water	64:8	0:0	6	}
water	65:4	0:0	4	}
else	65:6	79:4	2
stmts	65:11	79:4	3	
water	65:11	0:0	4	{
decl	66:8	66:31	4	WAVEFORMATEX	*fx
op	66:25	0:0	4	=
water	66:27	0:0	4	NULL
if	67:8	69:8	4	(IsEqualGUID (& type . formattype ,& FORMAT_WaveFormatEx ))
cond	67:12	67:62	5	IsEqualGUID (& type . formattype ,& FORMAT_WaveFormatEx )
call	67:12	67:62	6	IsEqualGUID
arg	67:24	67:40	7	&type.formattype
op	67:24	0:0	8	&
water	67:25	0:0	8	type
op	67:29	0:0	8	.
water	67:30	0:0	8	formattype
arg	67:42	67:62	7	&FORMAT_WaveFormatEx
op	67:42	0:0	8	&
water	67:43	0:0	8	FORMAT_WaveFormatEx
stmts	67:65	69:8	5	
water	67:65	0:0	6	{
water	68:12	0:0	6	fx
op	68:15	0:0	6	=
water	68:17	0:0	6	(
water	68:18	0:0	6	void
op	68:23	0:0	6	*
water	68:24	0:0	6	)
water	68:26	0:0	6	type
op	68:30	0:0	6	.
water	68:31	0:0	6	pbFormat
water	68:39	0:0	6	;
water	69:8	0:0	6	}
if	70:8	73:8	4	(! fx)
cond	70:12	70:13	5	! fx
op	70:12	0:0	6	!
water	70:13	0:0	6	fx
stmts	70:17	73:8	5	
water	70:17	0:0	6	{
call	71:12	71:69	6	av_log
arg	71:19	71:24	7	avctx
water	71:19	0:0	8	avctx
arg	71:26	71:38	7	AV_LOG_ERROR
water	71:26	0:0	8	AV_LOG_ERROR
arg	71:40	71:69	7	"Could not get media type.\n"
water	71:40	0:0	8	"Could not get media type.\n"
water	71:70	0:0	6	;
goto	72:12	72:22	6	error
water	72:17	0:0	7	error
water	73:8	0:0	6	}
water	74:8	0:0	4	codec
op	74:13	0:0	4	->
water	74:15	0:0	4	codec_type
op	74:27	0:0	4	=
water	74:29	0:0	4	AVMEDIA_TYPE_AUDIO
water	74:47	0:0	4	;
water	75:8	0:0	4	codec
op	75:13	0:0	4	->
water	75:15	0:0	4	sample_fmt
op	75:27	0:0	4	=
call	75:29	75:74	4	sample_fmt_bits_per_sample
arg	75:56	75:74	5	fx->wBitsPerSample
water	75:56	0:0	6	fx
op	75:58	0:0	6	->
water	75:60	0:0	6	wBitsPerSample
water	75:75	0:0	4	;
water	76:8	0:0	4	codec
op	76:13	0:0	4	->
water	76:15	0:0	4	codec_id
op	76:27	0:0	4	=
call	76:29	76:64	4	waveform_codec_id
arg	76:47	76:64	5	codec->sample_fmt
water	76:47	0:0	6	codec
op	76:52	0:0	6	->
water	76:54	0:0	6	sample_fmt
water	76:65	0:0	4	;
water	77:8	0:0	4	codec
op	77:13	0:0	4	->
water	77:15	0:0	4	sample_rate
op	77:27	0:0	4	=
water	77:29	0:0	4	fx
op	77:31	0:0	4	->
water	77:33	0:0	4	nSamplesPerSec
water	77:47	0:0	4	;
water	78:8	0:0	4	codec
op	78:13	0:0	4	->
water	78:15	0:0	4	channels
op	78:27	0:0	4	=
water	78:29	0:0	4	fx
op	78:31	0:0	4	->
water	78:33	0:0	4	nChannels
water	78:42	0:0	4	;
water	79:4	0:0	4	}
call	80:4	80:43	2	avpriv_set_pts_info
arg	80:24	80:26	3	st
water	80:24	0:0	4	st
arg	80:28	80:30	3	64
water	80:28	0:0	4	64
arg	80:32	80:33	3	1
water	80:32	0:0	4	1
arg	80:35	80:43	3	10000000
water	80:35	0:0	4	10000000
water	80:44	0:0	2	;
water	81:4	0:0	2	ret
op	81:8	0:0	2	=
water	81:10	0:0	2	0
water	81:11	0:0	2	;
label	82:0	82:5	2	error :
return	83:4	83:14	2	ret
water	83:11	0:0	3	ret
