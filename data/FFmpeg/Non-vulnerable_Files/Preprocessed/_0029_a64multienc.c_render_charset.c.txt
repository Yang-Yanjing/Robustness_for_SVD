func	1:0	84:0	0	static void	render_charset
params	1:26	0:0	1	
param	1:27	1:48	2	AVCodecContext *	avctx
param	1:50	1:66	2	uint8_t *	charset
param	2:27	2:45	2	uint8_t *	colrammap
stmnts	0:0	83:4	1	
decl	4:4	4:36	2	A64Context	*c
op	4:18	0:0	2	=
water	4:20	0:0	2	avctx
op	4:25	0:0	2	->
water	4:27	0:0	2	priv_data
decl	5:4	5:22	2	uint8_t	row1
water	5:16	0:0	2	,
decl	5:4	5:22	2	uint8_t	row2
decl	6:4	6:21	2	int	charpos
water	6:15	0:0	2	,
decl	6:4	6:21	2	int	x
water	6:18	0:0	2	,
decl	6:4	6:21	2	int	y
decl	7:4	7:12	2	int	a
water	7:9	0:0	2	,
decl	7:4	7:12	2	int	b
decl	8:4	8:15	2	uint8_t	pix
decl	9:4	9:25	2	int	lowdiff
water	9:15	0:0	2	,
decl	9:4	9:25	2	int	highdiff
decl	10:4	10:32	2	int	*best_cb
op	10:17	0:0	2	=
water	10:19	0:0	2	c
op	10:20	0:0	2	->
water	10:22	0:0	2	mc_best_cb
water	11:4	0:0	2	static
water	11:11	0:0	2	uint8_t
water	11:19	0:0	2	index1
op	11:25	0:0	2	[
water	11:26	0:0	2	256
op	11:29	0:0	2	]
water	11:30	0:0	2	;
water	12:4	0:0	2	static
water	12:11	0:0	2	uint8_t
water	12:19	0:0	2	index2
op	12:25	0:0	2	[
water	12:26	0:0	2	256
op	12:29	0:0	2	]
water	12:30	0:0	2	;
water	13:4	0:0	2	static
water	13:11	0:0	2	uint8_t
water	13:19	0:0	2	dither
op	13:25	0:0	2	[
water	13:26	0:0	2	256
op	13:29	0:0	2	]
water	13:30	0:0	2	;
decl	14:4	14:9	2	int	i
decl	15:4	15:16	2	int	distance
water	17:4	0:0	2	i
op	17:6	0:0	2	=
water	17:8	0:0	2	0
water	17:9	0:0	2	;
for	18:4	29:4	2	(a = 0 ;a < 256;a ++)
forinit	18:9	18:12	3	a = 0 ;
water	18:9	0:0	4	a
op	18:10	0:0	4	=
water	18:11	0:0	4	0
water	18:12	0:0	4	;
cond	18:14	18:18	3	a < 256
water	18:14	0:0	4	a
op	18:16	0:0	4	<
water	18:18	0:0	4	256
forexpr	18:23	18:24	3	a ++
water	18:23	0:0	4	a
op	18:24	0:0	4	++
stmts	18:28	29:4	3	
water	18:28	0:0	4	{
if	19:8	25:8	4	(i < c -> mc_pal_size - 1 && a == c -> mc_luma_vals [ i + 1 ])
cond	19:11	19:62	5	i < c -> mc_pal_size - 1 && a == c -> mc_luma_vals [ i + 1 ]
water	19:11	0:0	6	i
op	19:13	0:0	6	<
water	19:15	0:0	6	c
op	19:16	0:0	6	->
water	19:18	0:0	6	mc_pal_size
op	19:30	0:0	6	-
water	19:31	0:0	6	1
op	19:33	0:0	6	&&
water	19:36	0:0	6	a
op	19:38	0:0	6	==
water	19:41	0:0	6	c
op	19:42	0:0	6	->
water	19:44	0:0	6	mc_luma_vals
op	19:56	0:0	6	[
water	19:57	0:0	6	i
op	19:59	0:0	6	+
water	19:61	0:0	6	1
op	19:62	0:0	6	]
stmts	19:65	25:8	5	
water	19:65	0:0	6	{
water	20:12	0:0	6	distance
op	20:21	0:0	6	=
water	20:23	0:0	6	c
op	20:24	0:0	6	->
water	20:26	0:0	6	mc_luma_vals
op	20:38	0:0	6	[
water	20:39	0:0	6	i
op	20:41	0:0	6	+
water	20:43	0:0	6	1
op	20:44	0:0	6	]
op	20:46	0:0	6	-
water	20:48	0:0	6	c
op	20:49	0:0	6	->
water	20:51	0:0	6	mc_luma_vals
op	20:63	0:0	6	[
water	20:64	0:0	6	i
op	20:65	0:0	6	]
water	20:66	0:0	6	;
for	21:12	23:12	6	(b = 0 ;b <= distance;b ++)
forinit	21:16	21:21	7	b = 0 ;
water	21:16	0:0	8	b
op	21:18	0:0	8	=
water	21:20	0:0	8	0
water	21:21	0:0	8	;
cond	21:23	21:28	7	b <= distance
water	21:23	0:0	8	b
op	21:25	0:0	8	<=
water	21:28	0:0	8	distance
forexpr	21:38	21:39	7	b ++
water	21:38	0:0	8	b
op	21:39	0:0	8	++
stmts	21:43	23:12	7	
water	21:43	0:0	8	{
water	22:18	0:0	8	dither
op	22:24	0:0	8	[
water	22:25	0:0	8	c
op	22:26	0:0	8	->
water	22:28	0:0	8	mc_luma_vals
op	22:40	0:0	8	[
water	22:41	0:0	8	i
op	22:42	0:0	8	]
op	22:44	0:0	8	+
water	22:46	0:0	8	b
op	22:47	0:0	8	]
op	22:49	0:0	8	=
water	22:51	0:0	8	b
op	22:53	0:0	8	*
water	22:55	0:0	8	(
water	22:56	0:0	8	DITHERSTEPS
op	22:68	0:0	8	-
water	22:70	0:0	8	1
water	22:71	0:0	8	)
op	22:73	0:0	8	/
water	22:75	0:0	8	distance
water	22:83	0:0	8	;
water	23:12	0:0	8	}
water	24:12	0:0	6	i
op	24:13	0:0	6	++
water	24:15	0:0	6	;
water	25:8	0:0	6	}
if	26:8	26:49	4	(i >= c -> mc_pal_size - 1)
cond	26:11	26:33	5	i >= c -> mc_pal_size - 1
water	26:11	0:0	6	i
op	26:13	0:0	6	>=
water	26:16	0:0	6	c
op	26:17	0:0	6	->
water	26:19	0:0	6	mc_pal_size
op	26:31	0:0	6	-
water	26:33	0:0	6	1
stmts	26:36	26:49	5	
water	26:36	0:0	6	dither
op	26:42	0:0	6	[
water	26:43	0:0	6	a
op	26:44	0:0	6	]
op	26:46	0:0	6	=
water	26:48	0:0	6	0
water	26:49	0:0	6	;
water	27:8	0:0	4	index1
op	27:14	0:0	4	[
water	27:15	0:0	4	a
op	27:16	0:0	4	]
op	27:18	0:0	4	=
water	27:20	0:0	4	i
water	27:21	0:0	4	;
water	28:8	0:0	4	index2
op	28:14	0:0	4	[
water	28:15	0:0	4	a
op	28:16	0:0	4	]
op	28:18	0:0	4	=
call	28:20	28:51	4	FFMIN
arg	28:26	28:31	5	i+1
water	28:26	0:0	6	i
op	28:28	0:0	6	+
water	28:30	0:0	6	1
arg	28:33	28:51	5	c->mc_pal_size-1
water	28:33	0:0	6	c
op	28:34	0:0	6	->
water	28:36	0:0	6	mc_pal_size
op	28:48	0:0	6	-
water	28:50	0:0	6	1
water	28:52	0:0	4	;
water	29:4	0:0	4	}
for	31:4	83:4	2	(charpos = 0 ;charpos < CHARSET_CHARS;charpos ++)
forinit	31:9	31:20	3	charpos = 0 ;
water	31:9	0:0	4	charpos
op	31:17	0:0	4	=
water	31:19	0:0	4	0
water	31:20	0:0	4	;
cond	31:22	31:32	3	charpos < CHARSET_CHARS
water	31:22	0:0	4	charpos
op	31:30	0:0	4	<
water	31:32	0:0	4	CHARSET_CHARS
forexpr	31:47	31:54	3	charpos ++
water	31:47	0:0	4	charpos
op	31:54	0:0	4	++
stmts	31:58	83:4	3	
water	31:58	0:0	4	{
water	32:8	0:0	4	lowdiff
op	32:17	0:0	4	=
water	32:19	0:0	4	0
water	32:20	0:0	4	;
water	33:8	0:0	4	highdiff
op	33:17	0:0	4	=
water	33:19	0:0	4	0
water	33:20	0:0	4	;
for	34:8	64:8	4	(y = 0 ;y < 8;y ++)
forinit	34:13	34:18	5	y = 0 ;
water	34:13	0:0	6	y
op	34:15	0:0	6	=
water	34:17	0:0	6	0
water	34:18	0:0	6	;
cond	34:20	34:24	5	y < 8
water	34:20	0:0	6	y
op	34:22	0:0	6	<
water	34:24	0:0	6	8
forexpr	34:27	34:28	5	y ++
water	34:27	0:0	6	y
op	34:28	0:0	6	++
stmts	34:32	64:8	5	
water	34:32	0:0	6	{
water	35:12	0:0	6	row1
op	35:17	0:0	6	=
water	35:19	0:0	6	0
water	35:20	0:0	6	;
water	35:22	0:0	6	row2
op	35:27	0:0	6	=
water	35:29	0:0	6	0
water	35:30	0:0	6	;
for	36:12	61:12	6	(x = 0 ;x < 4;x ++)
forinit	36:17	36:22	7	x = 0 ;
water	36:17	0:0	8	x
op	36:19	0:0	8	=
water	36:21	0:0	8	0
water	36:22	0:0	8	;
cond	36:24	36:28	7	x < 4
water	36:24	0:0	8	x
op	36:26	0:0	8	<
water	36:28	0:0	8	4
forexpr	36:31	36:32	7	x ++
water	36:31	0:0	8	x
op	36:32	0:0	8	++
stmts	36:36	61:12	7	
water	36:36	0:0	8	{
water	37:16	0:0	8	pix
op	37:20	0:0	8	=
water	37:22	0:0	8	best_cb
op	37:29	0:0	8	[
water	37:30	0:0	8	y
op	37:32	0:0	8	*
water	37:34	0:0	8	4
op	37:36	0:0	8	+
water	37:38	0:0	8	x
op	37:39	0:0	8	]
water	37:40	0:0	8	;
if	39:16	40:56	8	(index1 [ pix ] >= 3)
cond	39:20	39:35	9	index1 [ pix ] >= 3
water	39:20	0:0	10	index1
op	39:26	0:0	10	[
water	39:27	0:0	10	pix
op	39:30	0:0	10	]
op	39:32	0:0	10	>=
water	39:35	0:0	10	3
stmts	40:20	40:56	9	
water	40:20	0:0	10	highdiff
op	40:29	0:0	10	+=
water	40:32	0:0	10	pix
op	40:36	0:0	10	-
water	40:38	0:0	10	c
op	40:39	0:0	10	->
water	40:41	0:0	10	mc_luma_vals
op	40:53	0:0	10	[
water	40:54	0:0	10	3
op	40:55	0:0	10	]
water	40:56	0:0	10	;
if	41:16	42:55	8	(index1 [ pix ] < 1)
cond	41:20	41:34	9	index1 [ pix ] < 1
water	41:20	0:0	10	index1
op	41:26	0:0	10	[
water	41:27	0:0	10	pix
op	41:30	0:0	10	]
op	41:32	0:0	10	<
water	41:34	0:0	10	1
stmts	42:20	42:55	9	
water	42:20	0:0	10	lowdiff
op	42:28	0:0	10	+=
water	42:31	0:0	10	c
op	42:32	0:0	10	->
water	42:34	0:0	10	mc_luma_vals
op	42:46	0:0	10	[
water	42:47	0:0	10	1
op	42:48	0:0	10	]
op	42:50	0:0	10	-
water	42:52	0:0	10	pix
water	42:55	0:0	10	;
water	43:16	0:0	8	row1
op	43:21	0:0	8	<<=
water	43:25	0:0	8	2
water	43:26	0:0	8	;
if	44:16	54:16	8	(INTERLACED)
cond	44:20	44:20	9	INTERLACED
water	44:20	0:0	10	INTERLACED
stmts	44:32	54:16	9	
water	44:32	0:0	10	{
water	45:20	0:0	10	row2
op	45:25	0:0	10	<<=
water	45:29	0:0	10	2
water	45:30	0:0	10	;
if	46:20	47:51	10	(interlaced_dither_patterns [ dither [ pix ] ] [ ( y & 3 ) * 2 + 0 ] [ x & 3 ])
cond	46:24	46:86	11	interlaced_dither_patterns [ dither [ pix ] ] [ ( y & 3 ) * 2 + 0 ] [ x & 3 ]
water	46:24	0:0	12	interlaced_dither_patterns
op	46:50	0:0	12	[
water	46:51	0:0	12	dither
op	46:57	0:0	12	[
water	46:58	0:0	12	pix
op	46:61	0:0	12	]
op	46:62	0:0	12	]
op	46:63	0:0	12	[
water	46:64	0:0	12	(
water	46:65	0:0	12	y
op	46:67	0:0	12	&
water	46:69	0:0	12	3
water	46:70	0:0	12	)
op	46:72	0:0	12	*
water	46:74	0:0	12	2
op	46:76	0:0	12	+
water	46:78	0:0	12	0
op	46:79	0:0	12	]
op	46:80	0:0	12	[
water	46:81	0:0	12	x
op	46:83	0:0	12	&
water	46:85	0:0	12	3
op	46:86	0:0	12	]
stmts	47:24	47:51	11	
water	47:24	0:0	12	row1
op	47:29	0:0	12	|=
water	47:32	0:0	12	3
op	47:33	0:0	12	-
water	47:34	0:0	12	(
water	47:35	0:0	12	index2
op	47:41	0:0	12	[
water	47:42	0:0	12	pix
op	47:45	0:0	12	]
op	47:47	0:0	12	&
water	47:49	0:0	12	3
water	47:50	0:0	12	)
water	47:51	0:0	12	;
else	48:20	49:51	10
stmts	49:24	49:51	11	
water	49:24	0:0	12	row1
op	49:29	0:0	12	|=
water	49:32	0:0	12	3
op	49:33	0:0	12	-
water	49:34	0:0	12	(
water	49:35	0:0	12	index1
op	49:41	0:0	12	[
water	49:42	0:0	12	pix
op	49:45	0:0	12	]
op	49:47	0:0	12	&
water	49:49	0:0	12	3
water	49:50	0:0	12	)
water	49:51	0:0	12	;
if	50:20	51:51	10	(interlaced_dither_patterns [ dither [ pix ] ] [ ( y & 3 ) * 2 + 1 ] [ x & 3 ])
cond	50:24	50:86	11	interlaced_dither_patterns [ dither [ pix ] ] [ ( y & 3 ) * 2 + 1 ] [ x & 3 ]
water	50:24	0:0	12	interlaced_dither_patterns
op	50:50	0:0	12	[
water	50:51	0:0	12	dither
op	50:57	0:0	12	[
water	50:58	0:0	12	pix
op	50:61	0:0	12	]
op	50:62	0:0	12	]
op	50:63	0:0	12	[
water	50:64	0:0	12	(
water	50:65	0:0	12	y
op	50:67	0:0	12	&
water	50:69	0:0	12	3
water	50:70	0:0	12	)
op	50:72	0:0	12	*
water	50:74	0:0	12	2
op	50:76	0:0	12	+
water	50:78	0:0	12	1
op	50:79	0:0	12	]
op	50:80	0:0	12	[
water	50:81	0:0	12	x
op	50:83	0:0	12	&
water	50:85	0:0	12	3
op	50:86	0:0	12	]
stmts	51:24	51:51	11	
water	51:24	0:0	12	row2
op	51:29	0:0	12	|=
water	51:32	0:0	12	3
op	51:33	0:0	12	-
water	51:34	0:0	12	(
water	51:35	0:0	12	index2
op	51:41	0:0	12	[
water	51:42	0:0	12	pix
op	51:45	0:0	12	]
op	51:47	0:0	12	&
water	51:49	0:0	12	3
water	51:50	0:0	12	)
water	51:51	0:0	12	;
else	52:20	53:51	10
stmts	53:24	53:51	11	
water	53:24	0:0	12	row2
op	53:29	0:0	12	|=
water	53:32	0:0	12	3
op	53:33	0:0	12	-
water	53:34	0:0	12	(
water	53:35	0:0	12	index1
op	53:41	0:0	12	[
water	53:42	0:0	12	pix
op	53:45	0:0	12	]
op	53:47	0:0	12	&
water	53:49	0:0	12	3
water	53:50	0:0	12	)
water	53:51	0:0	12	;
water	54:16	0:0	10	}
else	55:16	60:16	8
stmts	55:21	60:16	9	
water	55:21	0:0	10	{
if	56:20	57:51	10	(multi_dither_patterns [ dither [ pix ] ] [ ( y & 3 ) ] [ x & 3 ])
cond	56:24	56:73	11	multi_dither_patterns [ dither [ pix ] ] [ ( y & 3 ) ] [ x & 3 ]
water	56:24	0:0	12	multi_dither_patterns
op	56:45	0:0	12	[
water	56:46	0:0	12	dither
op	56:52	0:0	12	[
water	56:53	0:0	12	pix
op	56:56	0:0	12	]
op	56:57	0:0	12	]
op	56:58	0:0	12	[
water	56:59	0:0	12	(
water	56:60	0:0	12	y
op	56:62	0:0	12	&
water	56:64	0:0	12	3
water	56:65	0:0	12	)
op	56:66	0:0	12	]
op	56:67	0:0	12	[
water	56:68	0:0	12	x
op	56:70	0:0	12	&
water	56:72	0:0	12	3
op	56:73	0:0	12	]
stmts	57:24	57:51	11	
water	57:24	0:0	12	row1
op	57:29	0:0	12	|=
water	57:32	0:0	12	3
op	57:33	0:0	12	-
water	57:34	0:0	12	(
water	57:35	0:0	12	index2
op	57:41	0:0	12	[
water	57:42	0:0	12	pix
op	57:45	0:0	12	]
op	57:47	0:0	12	&
water	57:49	0:0	12	3
water	57:50	0:0	12	)
water	57:51	0:0	12	;
else	58:20	59:51	10
stmts	59:24	59:51	11	
water	59:24	0:0	12	row1
op	59:29	0:0	12	|=
water	59:32	0:0	12	3
op	59:33	0:0	12	-
water	59:34	0:0	12	(
water	59:35	0:0	12	index1
op	59:41	0:0	12	[
water	59:42	0:0	12	pix
op	59:45	0:0	12	]
op	59:47	0:0	12	&
water	59:49	0:0	12	3
water	59:50	0:0	12	)
water	59:51	0:0	12	;
water	60:16	0:0	10	}
water	61:12	0:0	8	}
water	62:12	0:0	6	charset
op	62:19	0:0	6	[
water	62:20	0:0	6	y
op	62:21	0:0	6	+
water	62:22	0:0	6	0
water	62:23	0:0	6	x000
op	62:27	0:0	6	]
op	62:29	0:0	6	=
water	62:31	0:0	6	row1
water	62:35	0:0	6	;
if	63:12	63:51	6	(INTERLACED)
cond	63:16	63:16	7	INTERLACED
water	63:16	0:0	8	INTERLACED
stmts	63:28	63:51	7	
water	63:28	0:0	8	charset
op	63:35	0:0	8	[
water	63:36	0:0	8	y
op	63:37	0:0	8	+
water	63:38	0:0	8	0
water	63:39	0:0	8	x800
op	63:43	0:0	8	]
op	63:45	0:0	8	=
water	63:47	0:0	8	row2
water	63:51	0:0	8	;
water	64:8	0:0	6	}
if	66:8	76:8	4	(highdiff > 0 && lowdiff > 0 && c -> mc_use_5col)
cond	66:12	66:46	5	highdiff > 0 && lowdiff > 0 && c -> mc_use_5col
water	66:12	0:0	6	highdiff
op	66:21	0:0	6	>
water	66:23	0:0	6	0
op	66:25	0:0	6	&&
water	66:28	0:0	6	lowdiff
op	66:36	0:0	6	>
water	66:38	0:0	6	0
op	66:40	0:0	6	&&
water	66:43	0:0	6	c
op	66:44	0:0	6	->
water	66:46	0:0	6	mc_use_5col
stmts	66:59	76:8	5	
water	66:59	0:0	6	{
if	67:12	70:12	6	(lowdiff > highdiff)
cond	67:16	67:26	7	lowdiff > highdiff
water	67:16	0:0	8	lowdiff
op	67:24	0:0	8	>
water	67:26	0:0	8	highdiff
stmts	67:36	70:12	7	
water	67:36	0:0	8	{
for	68:16	69:70	8	(x = 0 ;x < 32;x ++)
forinit	68:21	68:26	9	x = 0 ;
water	68:21	0:0	10	x
op	68:23	0:0	10	=
water	68:25	0:0	10	0
water	68:26	0:0	10	;
cond	68:28	68:32	9	x < 32
water	68:28	0:0	10	x
op	68:30	0:0	10	<
water	68:32	0:0	10	32
forexpr	68:36	68:37	9	x ++
water	68:36	0:0	10	x
op	68:37	0:0	10	++
stmts	69:20	69:70	9	
water	69:20	0:0	10	best_cb
op	69:27	0:0	10	[
water	69:28	0:0	10	x
op	69:29	0:0	10	]
op	69:31	0:0	10	=
call	69:33	69:69	10	FFMIN
arg	69:39	69:57	11	c->mc_luma_vals[3]
water	69:39	0:0	12	c
op	69:40	0:0	12	->
water	69:42	0:0	12	mc_luma_vals
op	69:54	0:0	12	[
water	69:55	0:0	12	3
op	69:56	0:0	12	]
arg	69:59	69:69	11	best_cb[x]
water	69:59	0:0	12	best_cb
op	69:66	0:0	12	[
water	69:67	0:0	12	x
op	69:68	0:0	12	]
water	69:70	0:0	10	;
water	70:12	0:0	8	}
else	70:14	73:12	6
stmts	70:19	73:12	7	
water	70:19	0:0	8	{
for	71:16	72:70	8	(x = 0 ;x < 32;x ++)
forinit	71:21	71:26	9	x = 0 ;
water	71:21	0:0	10	x
op	71:23	0:0	10	=
water	71:25	0:0	10	0
water	71:26	0:0	10	;
cond	71:28	71:32	9	x < 32
water	71:28	0:0	10	x
op	71:30	0:0	10	<
water	71:32	0:0	10	32
forexpr	71:36	71:37	9	x ++
water	71:36	0:0	10	x
op	71:37	0:0	10	++
stmts	72:20	72:70	9	
water	72:20	0:0	10	best_cb
op	72:27	0:0	10	[
water	72:28	0:0	10	x
op	72:29	0:0	10	]
op	72:31	0:0	10	=
call	72:33	72:69	10	FFMAX
arg	72:39	72:57	11	c->mc_luma_vals[1]
water	72:39	0:0	12	c
op	72:40	0:0	12	->
water	72:42	0:0	12	mc_luma_vals
op	72:54	0:0	12	[
water	72:55	0:0	12	1
op	72:56	0:0	12	]
arg	72:59	72:69	11	best_cb[x]
water	72:59	0:0	12	best_cb
op	72:66	0:0	12	[
water	72:67	0:0	12	x
op	72:68	0:0	12	]
water	72:70	0:0	10	;
water	73:12	0:0	8	}
water	74:12	0:0	6	charpos
op	74:19	0:0	6	--
water	74:21	0:0	6	;
water	76:8	0:0	6	}
else	76:10	82:8	4
stmts	76:15	82:8	5	
water	76:15	0:0	6	{
water	78:12	0:0	6	best_cb
op	78:20	0:0	6	+=
water	78:23	0:0	6	32
water	78:25	0:0	6	;
water	79:12	0:0	6	charset
op	79:20	0:0	6	+=
water	79:23	0:0	6	8
water	79:24	0:0	6	;
water	81:12	0:0	6	colrammap
op	81:21	0:0	6	[
water	81:22	0:0	6	charpos
op	81:29	0:0	6	]
op	81:31	0:0	6	=
water	81:33	0:0	6	(
water	81:34	0:0	6	highdiff
op	81:43	0:0	6	>
water	81:45	0:0	6	0
water	81:46	0:0	6	)
water	81:47	0:0	6	;
water	82:8	0:0	6	}
water	83:4	0:0	4	}
