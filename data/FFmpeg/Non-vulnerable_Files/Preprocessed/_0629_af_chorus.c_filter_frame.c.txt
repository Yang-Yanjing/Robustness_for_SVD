func	1:0	39:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:60	2	AVFrame *	frame
stmnts	0:0	38:54	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:32	2	ChorusContext	*s
op	4:21	0:0	2	=
water	4:23	0:0	2	ctx
op	4:26	0:0	2	->
water	4:28	0:0	2	priv
decl	5:4	5:22	2	AVFrame	*out_frame
decl	6:4	6:15	2	int	c
water	6:9	0:0	2	,
decl	6:4	6:15	2	int	i
water	6:12	0:0	2	,
decl	6:4	6:15	2	int	n
if	7:4	9:4	2	(av_frame_is_writable (frame ))
cond	7:8	7:34	3	av_frame_is_writable (frame )
call	7:8	7:34	4	av_frame_is_writable
arg	7:29	7:34	5	frame
water	7:29	0:0	6	frame
stmts	7:37	9:4	3	
water	7:37	0:0	4	{
water	8:8	0:0	4	out_frame
op	8:18	0:0	4	=
water	8:20	0:0	4	frame
water	8:25	0:0	4	;
water	9:4	0:0	4	}
else	9:6	14:4	2
stmts	9:11	14:4	3	
water	9:11	0:0	4	{
water	10:8	0:0	4	out_frame
op	10:18	0:0	4	=
call	10:20	10:65	4	ff_get_audio_buffer
arg	10:40	10:46	5	inlink
water	10:40	0:0	6	inlink
arg	10:48	10:65	5	frame->nb_samples
water	10:48	0:0	6	frame
op	10:53	0:0	6	->
water	10:55	0:0	6	nb_samples
water	10:66	0:0	4	;
if	11:8	12:34	4	(! out_frame)
cond	11:12	11:13	5	! out_frame
op	11:12	0:0	6	!
water	11:13	0:0	6	out_frame
stmts	12:12	12:34	5	
return	12:12	12:34	6	AVERROR(ENOMEM)
call	12:19	12:33	7	AVERROR
arg	12:27	12:33	8	ENOMEM
water	12:27	0:0	9	ENOMEM
call	13:8	13:44	4	av_frame_copy_props
arg	13:28	13:37	5	out_frame
water	13:28	0:0	6	out_frame
arg	13:39	13:44	5	frame
water	13:39	0:0	6	frame
water	13:45	0:0	4	;
water	14:4	0:0	4	}
for	15:4	34:4	2	(c = 0 ;c < inlink -> channels;c ++)
forinit	15:9	15:14	3	c = 0 ;
water	15:9	0:0	4	c
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:28	3	c < inlink -> channels
water	15:16	0:0	4	c
op	15:18	0:0	4	<
water	15:20	0:0	4	inlink
op	15:26	0:0	4	->
water	15:28	0:0	4	channels
forexpr	15:38	15:39	3	c ++
water	15:38	0:0	4	c
op	15:39	0:0	4	++
stmts	15:43	34:4	3	
water	15:43	0:0	4	{
decl	16:8	16:65	4	const float	*src
op	16:25	0:0	4	=
water	16:27	0:0	4	(
water	16:28	0:0	4	const
water	16:34	0:0	4	float
op	16:40	0:0	4	*
water	16:41	0:0	4	)
water	16:42	0:0	4	frame
op	16:47	0:0	4	->
water	16:49	0:0	4	extended_data
op	16:62	0:0	4	[
water	16:63	0:0	4	c
op	16:64	0:0	4	]
decl	17:8	17:57	4	float	*dst
op	17:19	0:0	4	=
water	17:21	0:0	4	(
water	17:22	0:0	4	float
op	17:28	0:0	4	*
water	17:29	0:0	4	)
water	17:30	0:0	4	out_frame
op	17:39	0:0	4	->
water	17:41	0:0	4	extended_data
op	17:54	0:0	4	[
water	17:55	0:0	4	c
op	17:56	0:0	4	]
decl	18:8	18:51	4	float	*chorusbuf
op	18:25	0:0	4	=
water	18:27	0:0	4	(
water	18:28	0:0	4	float
op	18:34	0:0	4	*
water	18:35	0:0	4	)
water	18:36	0:0	4	s
op	18:37	0:0	4	->
water	18:39	0:0	4	chorusbuf
op	18:48	0:0	4	[
water	18:49	0:0	4	c
op	18:50	0:0	4	]
decl	19:8	19:32	4	int	*phase
op	19:19	0:0	4	=
water	19:21	0:0	4	s
op	19:22	0:0	4	->
water	19:24	0:0	4	phase
op	19:29	0:0	4	[
water	19:30	0:0	4	c
op	19:31	0:0	4	]
for	20:8	33:8	4	(i = 0 ;i < frame -> nb_samples;i ++)
forinit	20:13	20:18	5	i = 0 ;
water	20:13	0:0	6	i
op	20:15	0:0	6	=
water	20:17	0:0	6	0
water	20:18	0:0	6	;
cond	20:20	20:31	5	i < frame -> nb_samples
water	20:20	0:0	6	i
op	20:22	0:0	6	<
water	20:24	0:0	6	frame
op	20:29	0:0	6	->
water	20:31	0:0	6	nb_samples
forexpr	20:43	20:44	5	i ++
water	20:43	0:0	6	i
op	20:44	0:0	6	++
stmts	20:48	33:8	5	
water	20:48	0:0	6	{
decl	21:12	21:34	6	float	out
water	21:21	0:0	6	,
decl	21:12	21:34	6	float	in
op	21:26	0:0	6	=
water	21:28	0:0	6	src
op	21:31	0:0	6	[
water	21:32	0:0	6	i
op	21:33	0:0	6	]
water	22:12	0:0	6	out
op	22:16	0:0	6	=
water	22:18	0:0	6	in
op	22:21	0:0	6	*
water	22:23	0:0	6	s
op	22:24	0:0	6	->
water	22:26	0:0	6	in_gain
water	22:33	0:0	6	;
for	23:12	28:12	6	(n = 0 ;n < s -> num_chorus;n ++)
forinit	23:17	23:22	7	n = 0 ;
water	23:17	0:0	8	n
op	23:19	0:0	8	=
water	23:21	0:0	8	0
water	23:22	0:0	8	;
cond	23:24	23:31	7	n < s -> num_chorus
water	23:24	0:0	8	n
op	23:26	0:0	8	<
water	23:28	0:0	8	s
op	23:29	0:0	8	->
water	23:31	0:0	8	num_chorus
forexpr	23:43	23:44	7	n ++
water	23:43	0:0	8	n
op	23:44	0:0	8	++
stmts	23:48	28:12	7	
water	23:48	0:0	8	{
water	24:16	0:0	8	out
op	24:20	0:0	8	+=
water	24:23	0:0	8	chorusbuf
op	24:32	0:0	8	[
call	24:33	26:51	8	MOD
arg	24:37	25:65	9	s->max_samples+s->counter[c]-s->lookup_table[n][phase[n]]
water	24:37	0:0	10	s
op	24:38	0:0	10	->
water	24:40	0:0	10	max_samples
op	24:52	0:0	10	+
water	24:54	0:0	10	s
op	24:55	0:0	10	->
water	24:57	0:0	10	counter
op	24:64	0:0	10	[
water	24:65	0:0	10	c
op	24:66	0:0	10	]
op	24:68	0:0	10	-
water	25:37	0:0	10	s
op	25:38	0:0	10	->
water	25:40	0:0	10	lookup_table
op	25:52	0:0	10	[
water	25:53	0:0	10	n
op	25:54	0:0	10	]
op	25:55	0:0	10	[
water	25:56	0:0	10	phase
op	25:61	0:0	10	[
water	25:62	0:0	10	n
op	25:63	0:0	10	]
op	25:64	0:0	10	]
arg	26:37	26:51	9	s->max_samples
water	26:37	0:0	10	s
op	26:38	0:0	10	->
water	26:40	0:0	10	max_samples
op	26:52	0:0	8	]
op	26:54	0:0	8	*
water	26:56	0:0	8	s
op	26:57	0:0	8	->
water	26:59	0:0	8	decays
op	26:65	0:0	8	[
water	26:66	0:0	8	n
op	26:67	0:0	8	]
water	26:68	0:0	8	;
water	27:16	0:0	8	phase
op	27:21	0:0	8	[
water	27:22	0:0	8	n
op	27:23	0:0	8	]
op	27:25	0:0	8	=
call	27:27	27:57	8	MOD
arg	27:31	27:43	9	phase[n]+1
water	27:31	0:0	10	phase
op	27:36	0:0	10	[
water	27:37	0:0	10	n
op	27:38	0:0	10	]
op	27:40	0:0	10	+
water	27:42	0:0	10	1
arg	27:45	27:57	9	s->length[n]
water	27:45	0:0	10	s
op	27:46	0:0	10	->
water	27:48	0:0	10	length
op	27:54	0:0	10	[
water	27:55	0:0	10	n
op	27:56	0:0	10	]
water	27:58	0:0	8	;
water	28:12	0:0	8	}
water	29:12	0:0	6	out
op	29:16	0:0	6	*=
water	29:19	0:0	6	s
op	29:20	0:0	6	->
water	29:22	0:0	6	out_gain
water	29:30	0:0	6	;
water	30:12	0:0	6	dst
op	30:15	0:0	6	[
water	30:16	0:0	6	i
op	30:17	0:0	6	]
op	30:19	0:0	6	=
water	30:21	0:0	6	out
water	30:24	0:0	6	;
water	31:12	0:0	6	chorusbuf
op	31:21	0:0	6	[
water	31:22	0:0	6	s
op	31:23	0:0	6	->
water	31:25	0:0	6	counter
op	31:32	0:0	6	[
water	31:33	0:0	6	c
op	31:34	0:0	6	]
op	31:35	0:0	6	]
op	31:37	0:0	6	=
water	31:39	0:0	6	in
water	31:41	0:0	6	;
water	32:12	0:0	6	s
op	32:13	0:0	6	->
water	32:15	0:0	6	counter
op	32:22	0:0	6	[
water	32:23	0:0	6	c
op	32:24	0:0	6	]
op	32:26	0:0	6	=
call	32:28	32:65	6	MOD
arg	32:32	32:49	7	s->counter[c]+1
water	32:32	0:0	8	s
op	32:33	0:0	8	->
water	32:35	0:0	8	counter
op	32:42	0:0	8	[
water	32:43	0:0	8	c
op	32:44	0:0	8	]
op	32:46	0:0	8	+
water	32:48	0:0	8	1
arg	32:51	32:65	7	s->max_samples
water	32:51	0:0	8	s
op	32:52	0:0	8	->
water	32:54	0:0	8	max_samples
water	32:66	0:0	6	;
water	33:8	0:0	6	}
water	34:4	0:0	4	}
water	35:4	0:0	2	s
op	35:5	0:0	2	->
water	35:7	0:0	2	next_pts
op	35:16	0:0	2	=
water	35:18	0:0	2	frame
op	35:23	0:0	2	->
water	35:25	0:0	2	pts
op	35:29	0:0	2	+
call	35:31	35:118	2	av_rescale_q
arg	35:44	35:61	3	frame->nb_samples
water	35:44	0:0	4	frame
op	35:49	0:0	4	->
water	35:51	0:0	4	nb_samples
arg	35:63	35:99	3	(AVRational){1,inlink->sample_rate}
water	35:63	0:0	4	(
water	35:64	0:0	4	AVRational
water	35:74	0:0	4	)
water	35:75	0:0	4	{
water	35:76	0:0	4	1
water	35:77	0:0	4	,
water	35:79	0:0	4	inlink
op	35:85	0:0	4	->
water	35:87	0:0	4	sample_rate
water	35:98	0:0	4	}
arg	35:101	35:118	3	inlink->time_base
water	35:101	0:0	4	inlink
op	35:107	0:0	4	->
water	35:109	0:0	4	time_base
water	35:119	0:0	2	;
if	36:4	37:29	2	(frame != out_frame)
cond	36:8	36:17	3	frame != out_frame
water	36:8	0:0	4	frame
op	36:14	0:0	4	!=
water	36:17	0:0	4	out_frame
stmts	37:8	37:29	3	
call	37:8	37:28	4	av_frame_free
arg	37:22	37:28	5	&frame
op	37:22	0:0	6	&
water	37:23	0:0	6	frame
water	37:29	0:0	4	;
return	38:4	38:54	2	ff_filter_frame(ctx->outputs[0],out_frame)
call	38:11	38:53	3	ff_filter_frame
arg	38:27	38:42	4	ctx->outputs[0]
water	38:27	0:0	5	ctx
op	38:30	0:0	5	->
water	38:32	0:0	5	outputs
op	38:39	0:0	5	[
water	38:40	0:0	5	0
op	38:41	0:0	5	]
arg	38:44	38:53	4	out_frame
water	38:44	0:0	5	out_frame
