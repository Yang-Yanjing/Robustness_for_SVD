func	1:0	23:0	0	static int	estimate_motion_thread
params	1:33	0:0	1	
param	1:34	1:51	2	AVCodecContext *	c
param	1:53	1:62	2	void *	arg
stmnts	0:0	22:12	1	
decl	2:4	2:35	2	MpegEncContext	*s
op	2:21	0:0	2	=
op	2:23	0:0	2	*
water	2:24	0:0	2	(
water	2:25	0:0	2	void
op	2:29	0:0	2	*
op	2:30	0:0	2	*
water	2:31	0:0	2	)
water	2:32	0:0	2	arg
call	3:4	3:23	2	ff_check_alignment
water	3:24	0:0	2	;
water	4:4	0:0	2	s
op	4:5	0:0	2	->
water	4:7	0:0	2	me
op	4:9	0:0	2	.
water	4:10	0:0	2	dia_size
op	4:18	0:0	2	=
water	4:20	0:0	2	s
op	4:21	0:0	2	->
water	4:23	0:0	2	avctx
op	4:28	0:0	2	->
water	4:30	0:0	2	dia_size
water	4:38	0:0	2	;
water	5:4	0:0	2	s
op	5:5	0:0	2	->
water	5:7	0:0	2	first_slice_line
op	5:23	0:0	2	=
water	5:24	0:0	2	1
water	5:25	0:0	2	;
for	6:4	21:4	2	(s -> mb_y = s -> start_mb_y ;s -> mb_y < s -> end_mb_y;s -> mb_y ++)
forinit	6:8	6:30	3	s -> mb_y = s -> start_mb_y ;
water	6:8	0:0	4	s
op	6:9	0:0	4	->
water	6:11	0:0	4	mb_y
op	6:15	0:0	4	=
water	6:17	0:0	4	s
op	6:18	0:0	4	->
water	6:20	0:0	4	start_mb_y
water	6:30	0:0	4	;
cond	6:32	6:45	3	s -> mb_y < s -> end_mb_y
water	6:32	0:0	4	s
op	6:33	0:0	4	->
water	6:35	0:0	4	mb_y
op	6:40	0:0	4	<
water	6:42	0:0	4	s
op	6:43	0:0	4	->
water	6:45	0:0	4	end_mb_y
forexpr	6:55	6:62	3	s -> mb_y ++
water	6:55	0:0	4	s
op	6:56	0:0	4	->
water	6:58	0:0	4	mb_y
op	6:62	0:0	4	++
stmts	6:66	21:4	3	
water	6:66	0:0	4	{
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	mb_x
op	7:15	0:0	4	=
water	7:16	0:0	4	0
water	7:17	0:0	4	;
call	8:8	8:29	4	ff_init_block_index
arg	8:28	8:29	5	s
water	8:28	0:0	6	s
water	8:30	0:0	4	;
for	9:8	19:8	4	(s -> mb_x = 0 ;s -> mb_x < s -> mb_width;s -> mb_x ++)
forinit	9:12	9:21	5	s -> mb_x = 0 ;
water	9:12	0:0	6	s
op	9:13	0:0	6	->
water	9:15	0:0	6	mb_x
op	9:19	0:0	6	=
water	9:20	0:0	6	0
water	9:21	0:0	6	;
cond	9:23	9:36	5	s -> mb_x < s -> mb_width
water	9:23	0:0	6	s
op	9:24	0:0	6	->
water	9:26	0:0	6	mb_x
op	9:31	0:0	6	<
water	9:33	0:0	6	s
op	9:34	0:0	6	->
water	9:36	0:0	6	mb_width
forexpr	9:46	9:53	5	s -> mb_x ++
water	9:46	0:0	6	s
op	9:47	0:0	6	->
water	9:49	0:0	6	mb_x
op	9:53	0:0	6	++
stmts	9:57	19:8	5	
water	9:57	0:0	6	{
water	10:12	0:0	6	s
op	10:13	0:0	6	->
water	10:15	0:0	6	block_index
op	10:26	0:0	6	[
water	10:27	0:0	6	0
op	10:28	0:0	6	]
op	10:29	0:0	6	+=
water	10:31	0:0	6	2
water	10:32	0:0	6	;
water	11:12	0:0	6	s
op	11:13	0:0	6	->
water	11:15	0:0	6	block_index
op	11:26	0:0	6	[
water	11:27	0:0	6	1
op	11:28	0:0	6	]
op	11:29	0:0	6	+=
water	11:31	0:0	6	2
water	11:32	0:0	6	;
water	12:12	0:0	6	s
op	12:13	0:0	6	->
water	12:15	0:0	6	block_index
op	12:26	0:0	6	[
water	12:27	0:0	6	2
op	12:28	0:0	6	]
op	12:29	0:0	6	+=
water	12:31	0:0	6	2
water	12:32	0:0	6	;
water	13:12	0:0	6	s
op	13:13	0:0	6	->
water	13:15	0:0	6	block_index
op	13:26	0:0	6	[
water	13:27	0:0	6	3
op	13:28	0:0	6	]
op	13:29	0:0	6	+=
water	13:31	0:0	6	2
water	13:32	0:0	6	;
if	15:12	16:63	6	(s -> pict_type == AV_PICTURE_TYPE_B)
cond	15:15	15:29	7	s -> pict_type == AV_PICTURE_TYPE_B
water	15:15	0:0	8	s
op	15:16	0:0	8	->
water	15:18	0:0	8	pict_type
op	15:27	0:0	8	==
water	15:29	0:0	8	AV_PICTURE_TYPE_B
stmts	16:16	16:63	7	
call	16:16	16:62	8	ff_estimate_b_frame_motion
arg	16:43	16:44	9	s
water	16:43	0:0	10	s
arg	16:46	16:53	9	s->mb_x
water	16:46	0:0	10	s
op	16:47	0:0	10	->
water	16:49	0:0	10	mb_x
arg	16:55	16:62	9	s->mb_y
water	16:55	0:0	10	s
op	16:56	0:0	10	->
water	16:58	0:0	10	mb_y
water	16:63	0:0	8	;
else	17:12	18:63	6
stmts	18:16	18:63	7	
call	18:16	18:62	8	ff_estimate_p_frame_motion
arg	18:43	18:44	9	s
water	18:43	0:0	10	s
arg	18:46	18:53	9	s->mb_x
water	18:46	0:0	10	s
op	18:47	0:0	10	->
water	18:49	0:0	10	mb_x
arg	18:55	18:62	9	s->mb_y
water	18:55	0:0	10	s
op	18:56	0:0	10	->
water	18:58	0:0	10	mb_y
water	18:63	0:0	8	;
water	19:8	0:0	6	}
water	20:8	0:0	4	s
op	20:9	0:0	4	->
water	20:11	0:0	4	first_slice_line
op	20:27	0:0	4	=
water	20:28	0:0	4	0
water	20:29	0:0	4	;
water	21:4	0:0	4	}
return	22:4	22:12	2	0
water	22:11	0:0	3	0
