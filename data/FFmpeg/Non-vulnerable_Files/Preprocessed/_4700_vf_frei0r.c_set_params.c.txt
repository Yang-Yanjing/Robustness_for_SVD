func	1:0	69:0	0	static int	set_params
params	1:21	0:0	1	
param	1:22	1:42	2	AVFilterContext *	ctx
param	1:44	1:62	2	const char *	params
stmnts	0:0	68:12	1	
decl	3:4	3:32	2	Frei0rContext	*s
op	3:21	0:0	2	=
water	3:23	0:0	2	ctx
op	3:26	0:0	2	->
water	3:28	0:0	2	priv
decl	4:4	4:9	2	int	i
if	5:4	6:16	2	(! params)
cond	5:8	5:9	3	! params
op	5:8	0:0	4	!
water	5:9	0:0	4	params
stmts	6:8	6:16	3	
return	6:8	6:16	4	0
water	6:15	0:0	5	0
for	7:4	67:4	2	(i = 0 ;i < s -> plugin_info . num_params;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:35	3	i < s -> plugin_info . num_params
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	s
op	7:21	0:0	4	->
water	7:23	0:0	4	plugin_info
op	7:34	0:0	4	.
water	7:35	0:0	4	num_params
forexpr	7:47	7:48	3	i ++
water	7:47	0:0	4	i
op	7:48	0:0	4	++
stmts	7:52	67:4	3	
water	7:52	0:0	4	{
decl	8:8	8:29	4	f0r_param_info_t	info
decl	9:8	9:19	4	char	*param
decl	10:8	10:15	4	int	ret
call	11:8	11:34	4	s->get_param_info
arg	11:26	11:31	5	&info
op	11:26	0:0	6	&
water	11:27	0:0	6	info
arg	11:33	11:34	5	i
water	11:33	0:0	6	i
water	11:35	0:0	4	;
if	12:8	21:8	4	(* params)
cond	12:12	12:13	5	* params
op	12:12	0:0	6	*
water	12:13	0:0	6	params
stmts	12:21	21:8	5	
water	12:21	0:0	6	{
if	13:12	14:38	6	(! ( param =av_get_token (& params ,"|" ) ))
cond	13:16	13:52	7	! ( param =av_get_token (& params ,"|" ) )
op	13:16	0:0	8	!
water	13:17	0:0	8	(
water	13:18	0:0	8	param
op	13:24	0:0	8	=
call	13:26	13:51	8	av_get_token
arg	13:39	13:46	9	&params
op	13:39	0:0	10	&
water	13:40	0:0	10	params
arg	13:48	13:51	9	"|"
water	13:48	0:0	10	"|"
water	13:52	0:0	8	)
stmts	14:16	14:38	7	
return	14:16	14:38	8	AVERROR(ENOMEM)
call	14:23	14:37	9	AVERROR
arg	14:31	14:37	10	ENOMEM
water	14:31	0:0	11	ENOMEM
if	15:12	16:24	6	(* params)
cond	15:16	15:17	7	* params
op	15:16	0:0	8	*
water	15:17	0:0	8	params
stmts	16:16	16:24	7	
water	16:16	0:0	8	params
op	16:22	0:0	8	++
water	16:24	0:0	8	;
water	17:12	0:0	6	ret
op	17:16	0:0	6	=
call	17:18	17:47	6	set_param
arg	17:28	17:31	7	ctx
water	17:28	0:0	8	ctx
arg	17:33	17:37	7	info
water	17:33	0:0	8	info
arg	17:39	17:40	7	i
water	17:39	0:0	8	i
arg	17:42	17:47	7	param
water	17:42	0:0	8	param
water	17:48	0:0	6	;
call	18:12	18:25	6	av_free
arg	18:20	18:25	7	param
water	18:20	0:0	8	param
water	18:26	0:0	6	;
if	19:12	20:26	6	(ret < 0)
cond	19:16	19:22	7	ret < 0
water	19:16	0:0	8	ret
op	19:20	0:0	8	<
water	19:22	0:0	8	0
stmts	20:16	20:26	7	
return	20:16	20:26	8	ret
water	20:23	0:0	9	ret
water	21:8	0:0	6	}
call	22:8	30:31	4	av_log
arg	22:15	22:18	5	ctx
water	22:15	0:0	6	ctx
arg	22:20	22:34	5	AV_LOG_VERBOSE
water	22:20	0:0	6	AV_LOG_VERBOSE
arg	23:15	23:59	5	"idx:%d name:'%s' type:%s explanation:'%s' "
water	23:15	0:0	6	"idx:%d name:'%s' type:%s explanation:'%s' "
arg	24:15	24:16	5	i
water	24:15	0:0	6	i
arg	24:18	24:27	5	info.name
water	24:18	0:0	6	info
op	24:22	0:0	6	.
water	24:23	0:0	6	name
arg	25:15	29:71	5	info.type==F0R_PARAM_BOOL?"bool":info.type==F0R_PARAM_DOUBLE?"double":info.type==F0R_PARAM_COLOR?"color":info.type==F0R_PARAM_POSITION?"position":info.type==F0R_PARAM_STRING?"string":"unknown"
water	25:15	0:0	6	info
op	25:19	0:0	6	.
water	25:20	0:0	6	type
op	25:25	0:0	6	==
water	25:28	0:0	6	F0R_PARAM_BOOL
water	25:47	0:0	6	?
water	25:49	0:0	6	"bool"
water	25:60	0:0	6	:
water	26:15	0:0	6	info
op	26:19	0:0	6	.
water	26:20	0:0	6	type
op	26:25	0:0	6	==
water	26:28	0:0	6	F0R_PARAM_DOUBLE
water	26:47	0:0	6	?
water	26:49	0:0	6	"double"
water	26:60	0:0	6	:
water	27:15	0:0	6	info
op	27:19	0:0	6	.
water	27:20	0:0	6	type
op	27:25	0:0	6	==
water	27:28	0:0	6	F0R_PARAM_COLOR
water	27:47	0:0	6	?
water	27:49	0:0	6	"color"
water	27:60	0:0	6	:
water	28:15	0:0	6	info
op	28:19	0:0	6	.
water	28:20	0:0	6	type
op	28:25	0:0	6	==
water	28:28	0:0	6	F0R_PARAM_POSITION
water	28:47	0:0	6	?
water	28:49	0:0	6	"position"
water	28:60	0:0	6	:
water	29:15	0:0	6	info
op	29:19	0:0	6	.
water	29:20	0:0	6	type
op	29:25	0:0	6	==
water	29:28	0:0	6	F0R_PARAM_STRING
water	29:47	0:0	6	?
water	29:49	0:0	6	"string"
water	29:60	0:0	6	:
water	29:62	0:0	6	"unknown"
arg	30:15	30:31	5	info.explanation
water	30:15	0:0	6	info
op	30:19	0:0	6	.
water	30:20	0:0	6	explanation
water	30:32	0:0	4	;
call	32:8	32:42	4	av_log
arg	32:15	32:18	5	ctx
water	32:15	0:0	6	ctx
arg	32:20	32:32	5	AV_LOG_DEBUG
water	32:20	0:0	6	AV_LOG_DEBUG
arg	32:34	32:42	5	"value:"
water	32:34	0:0	6	"value:"
water	32:43	0:0	4	;
switch	33:8	64:8	4	(info . type)
cond	33:16	33:21	5	info . type
water	33:16	0:0	6	info
op	33:20	0:0	6	.
water	33:21	0:0	6	type
stmts	33:27	64:8	5	
water	33:27	0:0	6	{
decl	34:12	34:19	6	void	*v
decl	35:12	35:20	6	double	d
decl	36:12	36:25	6	char	str[128]
decl	37:12	37:33	6	f0r_param_color_t	col
decl	38:12	38:36	6	f0r_param_position_t	pos
label	39:8	39:27	6	case F0R_PARAM_BOOL :
water	40:12	0:0	6	v
op	40:14	0:0	6	=
op	40:16	0:0	6	&
water	40:17	0:0	6	d
water	40:18	0:0	6	;
call	41:12	41:48	6	s->get_param_value
arg	41:31	41:42	7	s->instance
water	41:31	0:0	8	s
op	41:32	0:0	8	->
water	41:34	0:0	8	instance
arg	41:44	41:45	7	v
water	41:44	0:0	8	v
arg	41:47	41:48	7	i
water	41:47	0:0	8	i
water	41:49	0:0	6	;
call	42:12	42:76	6	av_log
arg	42:19	42:22	7	ctx
water	42:19	0:0	8	ctx
arg	42:24	42:36	7	AV_LOG_DEBUG
water	42:24	0:0	8	AV_LOG_DEBUG
arg	42:38	42:42	7	"%s"
water	42:38	0:0	8	"%s"
arg	42:44	42:76	7	d>=0.5&&d<=1.0?"y":"n"
water	42:44	0:0	8	d
op	42:46	0:0	8	>=
water	42:49	0:0	8	0
op	42:50	0:0	8	.
water	42:51	0:0	8	5
op	42:53	0:0	8	&&
water	42:56	0:0	8	d
op	42:58	0:0	8	<=
water	42:61	0:0	8	1
op	42:62	0:0	8	.
water	42:63	0:0	8	0
water	42:65	0:0	8	?
water	42:67	0:0	8	"y"
water	42:71	0:0	8	:
water	42:73	0:0	8	"n"
water	42:77	0:0	6	;
break	43:12	43:17	6	
label	44:8	44:29	6	case F0R_PARAM_DOUBLE :
water	45:12	0:0	6	v
op	45:14	0:0	6	=
op	45:16	0:0	6	&
water	45:17	0:0	6	d
water	45:18	0:0	6	;
call	46:12	46:48	6	s->get_param_value
arg	46:31	46:42	7	s->instance
water	46:31	0:0	8	s
op	46:32	0:0	8	->
water	46:34	0:0	8	instance
arg	46:44	46:45	7	v
water	46:44	0:0	8	v
arg	46:47	46:48	7	i
water	46:47	0:0	8	i
water	46:49	0:0	6	;
call	47:12	47:45	6	av_log
arg	47:19	47:22	7	ctx
water	47:19	0:0	8	ctx
arg	47:24	47:36	7	AV_LOG_DEBUG
water	47:24	0:0	8	AV_LOG_DEBUG
arg	47:38	47:42	7	"%f"
water	47:38	0:0	8	"%f"
arg	47:44	47:45	7	d
water	47:44	0:0	8	d
water	47:46	0:0	6	;
break	48:12	48:17	6	
label	49:8	49:28	6	case F0R_PARAM_COLOR :
water	50:12	0:0	6	v
op	50:14	0:0	6	=
op	50:16	0:0	6	&
water	50:17	0:0	6	col
water	50:20	0:0	6	;
call	51:12	51:48	6	s->get_param_value
arg	51:31	51:42	7	s->instance
water	51:31	0:0	8	s
op	51:32	0:0	8	->
water	51:34	0:0	8	instance
arg	51:44	51:45	7	v
water	51:44	0:0	8	v
arg	51:47	51:48	7	i
water	51:47	0:0	8	i
water	51:49	0:0	6	;
call	52:12	52:69	6	av_log
arg	52:19	52:22	7	ctx
water	52:19	0:0	8	ctx
arg	52:24	52:36	7	AV_LOG_DEBUG
water	52:24	0:0	8	AV_LOG_DEBUG
arg	52:38	52:48	7	"%f/%f/%f"
water	52:38	0:0	8	"%f/%f/%f"
arg	52:50	52:55	7	col.r
water	52:50	0:0	8	col
op	52:53	0:0	8	.
water	52:54	0:0	8	r
arg	52:57	52:62	7	col.g
water	52:57	0:0	8	col
op	52:60	0:0	8	.
water	52:61	0:0	8	g
arg	52:64	52:69	7	col.b
water	52:64	0:0	8	col
op	52:67	0:0	8	.
water	52:68	0:0	8	b
water	52:70	0:0	6	;
break	53:12	53:17	6	
label	54:8	54:31	6	case F0R_PARAM_POSITION :
water	55:12	0:0	6	v
op	55:14	0:0	6	=
op	55:16	0:0	6	&
water	55:17	0:0	6	pos
water	55:20	0:0	6	;
call	56:12	56:48	6	s->get_param_value
arg	56:31	56:42	7	s->instance
water	56:31	0:0	8	s
op	56:32	0:0	8	->
water	56:34	0:0	8	instance
arg	56:44	56:45	7	v
water	56:44	0:0	8	v
arg	56:47	56:48	7	i
water	56:47	0:0	8	i
water	56:49	0:0	6	;
call	57:12	57:59	6	av_log
arg	57:19	57:22	7	ctx
water	57:19	0:0	8	ctx
arg	57:24	57:36	7	AV_LOG_DEBUG
water	57:24	0:0	8	AV_LOG_DEBUG
arg	57:38	57:45	7	"%f/%f"
water	57:38	0:0	8	"%f/%f"
arg	57:47	57:52	7	pos.x
water	57:47	0:0	8	pos
op	57:50	0:0	8	.
water	57:51	0:0	8	x
arg	57:54	57:59	7	pos.y
water	57:54	0:0	8	pos
op	57:57	0:0	8	.
water	57:58	0:0	8	y
water	57:60	0:0	6	;
break	58:12	58:17	6	
label	59:8	59:15	6	default :
water	60:12	0:0	6	v
op	60:14	0:0	6	=
water	60:16	0:0	6	str
water	60:19	0:0	6	;
call	61:12	61:48	6	s->get_param_value
arg	61:31	61:42	7	s->instance
water	61:31	0:0	8	s
op	61:32	0:0	8	->
water	61:34	0:0	8	instance
arg	61:44	61:45	7	v
water	61:44	0:0	8	v
arg	61:47	61:48	7	i
water	61:47	0:0	8	i
water	61:49	0:0	6	;
call	62:12	62:49	6	av_log
arg	62:19	62:22	7	ctx
water	62:19	0:0	8	ctx
arg	62:24	62:36	7	AV_LOG_DEBUG
water	62:24	0:0	8	AV_LOG_DEBUG
arg	62:38	62:44	7	"'%s'"
water	62:38	0:0	8	"'%s'"
arg	62:46	62:49	7	str
water	62:46	0:0	8	str
water	62:50	0:0	6	;
break	63:12	63:17	6	
water	64:8	0:0	6	}
call	66:8	66:41	4	av_log
arg	66:15	66:18	5	ctx
water	66:15	0:0	6	ctx
arg	66:20	66:34	5	AV_LOG_VERBOSE
water	66:20	0:0	6	AV_LOG_VERBOSE
arg	66:36	66:41	5	".\n"
water	66:36	0:0	6	".\n"
water	66:42	0:0	4	;
water	67:4	0:0	4	}
return	68:4	68:12	2	0
water	68:11	0:0	3	0
