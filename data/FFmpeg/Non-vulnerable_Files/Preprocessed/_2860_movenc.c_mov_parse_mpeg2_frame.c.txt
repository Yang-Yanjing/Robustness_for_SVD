func	1:0	19:0	0	static int	mov_parse_mpeg2_frame
params	1:32	0:0	1	
param	1:33	1:46	2	AVPacket *	pkt
param	1:48	1:63	2	uint32_t *	flags
stmnts	0:0	18:12	1	
decl	3:4	3:19	2	uint32_t	c
op	3:15	0:0	2	=
op	3:17	0:0	2	-
water	3:18	0:0	2	1
decl	4:4	4:25	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:25	2	int	closed_gop
op	4:22	0:0	2	=
water	4:24	0:0	2	0
for	5:4	17:4	2	(i = 0 ;i < pkt -> size - 4;i ++)
forinit	5:9	5:14	3	i = 0 ;
water	5:9	0:0	4	i
op	5:11	0:0	4	=
water	5:13	0:0	4	0
water	5:14	0:0	4	;
cond	5:16	5:32	3	i < pkt -> size - 4
water	5:16	0:0	4	i
op	5:18	0:0	4	<
water	5:20	0:0	4	pkt
op	5:23	0:0	4	->
water	5:25	0:0	4	size
op	5:30	0:0	4	-
water	5:32	0:0	4	4
forexpr	5:35	5:36	3	i ++
water	5:35	0:0	4	i
op	5:36	0:0	4	++
stmts	5:40	17:4	3	
water	5:40	0:0	4	{
water	6:8	0:0	4	c
op	6:10	0:0	4	=
water	6:12	0:0	4	(
water	6:13	0:0	4	c
op	6:15	0:0	4	<<
water	6:18	0:0	4	8
water	6:19	0:0	4	)
op	6:21	0:0	4	+
water	6:23	0:0	4	pkt
op	6:26	0:0	4	->
water	6:28	0:0	4	data
op	6:32	0:0	4	[
water	6:33	0:0	4	i
op	6:34	0:0	4	]
water	6:35	0:0	4	;
if	7:8	9:8	4	(c == 0 x1b8)
cond	7:12	7:18	5	c == 0 x1b8
water	7:12	0:0	6	c
op	7:14	0:0	6	==
water	7:17	0:0	6	0
water	7:18	0:0	6	x1b8
stmts	7:24	9:8	5	
water	7:24	0:0	6	{
water	8:12	0:0	6	closed_gop
op	8:23	0:0	6	=
water	8:25	0:0	6	pkt
op	8:28	0:0	6	->
water	8:30	0:0	6	data
op	8:34	0:0	6	[
water	8:35	0:0	6	i
op	8:37	0:0	6	+
water	8:39	0:0	6	4
op	8:40	0:0	6	]
op	8:42	0:0	6	>>
water	8:45	0:0	6	6
op	8:47	0:0	6	&
water	8:49	0:0	6	0
water	8:50	0:0	6	x01
water	8:53	0:0	6	;
water	9:8	0:0	6	}
else	9:10	16:8	4
stmts	9:15	16:8	5	
if	9:15	16:8	6	(c == 0 x100)
cond	9:19	9:25	7	c == 0 x100
water	9:19	0:0	8	c
op	9:21	0:0	8	==
water	9:24	0:0	8	0
water	9:25	0:0	8	x100
stmts	9:31	16:8	7	
water	9:31	0:0	8	{
decl	10:12	10:76	8	int	temp_ref
op	10:25	0:0	8	=
water	10:27	0:0	8	(
water	10:28	0:0	8	pkt
op	10:31	0:0	8	->
water	10:33	0:0	8	data
op	10:37	0:0	8	[
water	10:38	0:0	8	i
op	10:40	0:0	8	+
water	10:42	0:0	8	1
op	10:43	0:0	8	]
op	10:45	0:0	8	<<
water	10:48	0:0	8	2
water	10:49	0:0	8	)
op	10:51	0:0	8	|
water	10:53	0:0	8	(
water	10:54	0:0	8	pkt
op	10:57	0:0	8	->
water	10:59	0:0	8	data
op	10:63	0:0	8	[
water	10:64	0:0	8	i
op	10:66	0:0	8	+
water	10:68	0:0	8	2
op	10:69	0:0	8	]
op	10:71	0:0	8	>>
water	10:74	0:0	8	6
water	10:75	0:0	8	)
if	11:12	12:40	8	(! temp_ref || closed_gop)
cond	11:16	11:29	9	! temp_ref || closed_gop
op	11:16	0:0	10	!
water	11:17	0:0	10	temp_ref
op	11:26	0:0	10	||
water	11:29	0:0	10	closed_gop
stmts	12:16	12:40	9	
op	12:16	0:0	10	*
water	12:17	0:0	10	flags
op	12:23	0:0	10	=
water	12:25	0:0	10	MOV_SYNC_SAMPLE
water	12:40	0:0	10	;
else	13:12	14:48	8
stmts	14:16	14:48	9	
op	14:16	0:0	10	*
water	14:17	0:0	10	flags
op	14:23	0:0	10	=
water	14:25	0:0	10	MOV_PARTIAL_SYNC_SAMPLE
water	14:48	0:0	10	;
break	15:12	15:17	8	
water	16:8	0:0	8	}
water	17:4	0:0	4	}
return	18:4	18:12	2	0
water	18:11	0:0	3	0
