func	1:0	18:0	0	void	ff_aac_apply_main_pred
params	1:27	0:0	1	
param	1:28	1:44	2	AACEncContext *	s
param	1:46	1:71	2	SingleChannelElement *	sce
stmnts	0:0	17:4	1	
decl	3:4	3:14	2	int	sfb
water	3:11	0:0	2	,
decl	3:4	3:14	2	int	k
decl	4:4	4:86	2	const int	pmax
op	4:19	0:0	2	=
call	4:21	4:85	3	FFMIN
arg	4:27	4:43	4	sce->ics.max_sfb
water	4:27	0:0	5	sce
op	4:30	0:0	5	->
water	4:32	0:0	5	ics
op	4:35	0:0	5	.
water	4:36	0:0	5	max_sfb
arg	4:45	4:85	4	ff_aac_pred_sfb_max[s->samplerate_index]
water	4:45	0:0	5	ff_aac_pred_sfb_max
op	4:64	0:0	5	[
water	4:65	0:0	5	s
op	4:66	0:0	5	->
water	4:68	0:0	5	samplerate_index
op	4:84	0:0	5	]
if	5:4	15:4	2	(sce -> ics . window_sequence [ 0 ] != EIGHT_SHORT_SEQUENCE)
cond	5:8	5:39	3	sce -> ics . window_sequence [ 0 ] != EIGHT_SHORT_SEQUENCE
water	5:8	0:0	4	sce
op	5:11	0:0	4	->
water	5:13	0:0	4	ics
op	5:16	0:0	4	.
water	5:17	0:0	4	window_sequence
op	5:32	0:0	4	[
water	5:33	0:0	4	0
op	5:34	0:0	4	]
op	5:36	0:0	4	!=
water	5:39	0:0	4	EIGHT_SHORT_SEQUENCE
stmts	5:61	15:4	3	
water	5:61	0:0	4	{
for	6:8	11:8	4	(sfb = 0 ;sfb < pmax;sfb ++)
forinit	6:13	6:20	5	sfb = 0 ;
water	6:13	0:0	6	sfb
op	6:17	0:0	6	=
water	6:19	0:0	6	0
water	6:20	0:0	6	;
cond	6:22	6:28	5	sfb < pmax
water	6:22	0:0	6	sfb
op	6:26	0:0	6	<
water	6:28	0:0	6	pmax
forexpr	6:34	6:37	5	sfb ++
water	6:34	0:0	6	sfb
op	6:37	0:0	6	++
stmts	6:41	11:8	5	
water	6:41	0:0	6	{
for	7:12	10:12	6	(k = sce -> ics . swb_offset [ sfb ] ;k < sce -> ics . swb_offset [ sfb + 1 ];k ++)
forinit	7:17	7:45	7	k = sce -> ics . swb_offset [ sfb ] ;
water	7:17	0:0	8	k
op	7:19	0:0	8	=
water	7:21	0:0	8	sce
op	7:24	0:0	8	->
water	7:26	0:0	8	ics
op	7:29	0:0	8	.
water	7:30	0:0	8	swb_offset
op	7:40	0:0	8	[
water	7:41	0:0	8	sfb
op	7:44	0:0	8	]
water	7:45	0:0	8	;
cond	7:47	7:78	7	k < sce -> ics . swb_offset [ sfb + 1 ]
water	7:47	0:0	8	k
op	7:49	0:0	8	<
water	7:51	0:0	8	sce
op	7:54	0:0	8	->
water	7:56	0:0	8	ics
op	7:59	0:0	8	.
water	7:60	0:0	8	swb_offset
op	7:70	0:0	8	[
water	7:71	0:0	8	sfb
op	7:75	0:0	8	+
water	7:77	0:0	8	1
op	7:78	0:0	8	]
forexpr	7:81	7:82	7	k ++
water	7:81	0:0	8	k
op	7:82	0:0	8	++
stmts	7:86	10:12	7	
water	7:86	0:0	8	{
call	8:16	9:83	8	predict
arg	8:24	8:48	9	&sce->predictor_state[k]
op	8:24	0:0	10	&
water	8:25	0:0	10	sce
op	8:28	0:0	10	->
water	8:30	0:0	10	predictor_state
op	8:45	0:0	10	[
water	8:46	0:0	10	k
op	8:47	0:0	10	]
arg	8:50	8:65	9	&sce->coeffs[k]
op	8:50	0:0	10	&
water	8:51	0:0	10	sce
op	8:54	0:0	10	->
water	8:56	0:0	10	coeffs
op	8:62	0:0	10	[
water	8:63	0:0	10	k
op	8:64	0:0	10	]
arg	8:67	8:84	9	&sce->prcoeffs[k]
op	8:67	0:0	10	&
water	8:68	0:0	10	sce
op	8:71	0:0	10	->
water	8:73	0:0	10	prcoeffs
op	8:81	0:0	10	[
water	8:82	0:0	10	k
op	8:83	0:0	10	]
arg	9:24	9:83	9	sce->ics.predictor_present&&sce->ics.prediction_used[sfb]
water	9:24	0:0	10	sce
op	9:27	0:0	10	->
water	9:29	0:0	10	ics
op	9:32	0:0	10	.
water	9:33	0:0	10	predictor_present
op	9:51	0:0	10	&&
water	9:54	0:0	10	sce
op	9:57	0:0	10	->
water	9:59	0:0	10	ics
op	9:62	0:0	10	.
water	9:63	0:0	10	prediction_used
op	9:78	0:0	10	[
water	9:79	0:0	10	sfb
op	9:82	0:0	10	]
water	9:84	0:0	8	;
water	10:12	0:0	8	}
water	11:8	0:0	6	}
if	12:8	14:8	4	(sce -> ics . predictor_reset_group)
cond	12:12	12:21	5	sce -> ics . predictor_reset_group
water	12:12	0:0	6	sce
op	12:15	0:0	6	->
water	12:17	0:0	6	ics
op	12:20	0:0	6	.
water	12:21	0:0	6	predictor_reset_group
stmts	12:44	14:8	5	
water	12:44	0:0	6	{
call	13:12	13:69	6	reset_predictor_group
arg	13:34	13:37	7	sce
water	13:34	0:0	8	sce
arg	13:39	13:69	7	sce->ics.predictor_reset_group
water	13:39	0:0	8	sce
op	13:42	0:0	8	->
water	13:44	0:0	8	ics
op	13:47	0:0	8	.
water	13:48	0:0	8	predictor_reset_group
water	13:70	0:0	6	;
water	14:8	0:0	6	}
water	15:4	0:0	4	}
else	15:6	17:4	2
stmts	15:11	17:4	3	
water	15:11	0:0	4	{
call	16:8	16:49	4	reset_all_predictors
arg	16:29	16:49	5	sce->predictor_state
water	16:29	0:0	6	sce
op	16:32	0:0	6	->
water	16:34	0:0	6	predictor_state
water	16:50	0:0	4	;
water	17:4	0:0	4	}
