func	1:0	51:0	0	static int	audio_read_packet
params	1:28	0:0	1	
param	1:29	1:53	2	AVFormatContext *	context
param	1:55	1:68	2	AVPacket *	pkt
stmnts	0:0	50:12	1	
decl	3:4	3:39	2	JackData	*self
op	3:19	0:0	2	=
water	3:21	0:0	2	context
op	3:28	0:0	2	->
water	3:30	0:0	2	priv_data
decl	4:4	4:36	2	struct timespec	timeout
op	4:28	0:0	2	=
water	4:30	0:0	2	{
water	4:31	0:0	2	0
water	4:32	0:0	2	,
water	4:34	0:0	2	0
water	4:35	0:0	2	}
decl	5:4	5:12	2	int	test
if	10:4	20:4	2	(! self -> activated)
cond	10:8	10:15	3	! self -> activated
op	10:8	0:0	4	!
water	10:9	0:0	4	self
op	10:13	0:0	4	->
water	10:15	0:0	4	activated
stmts	10:26	20:4	3	
water	10:26	0:0	4	{
if	11:8	16:8	4	(!jack_activate (self -> client ))
cond	11:12	11:39	5	!jack_activate (self -> client )
op	11:12	0:0	6	!
call	11:13	11:39	6	jack_activate
arg	11:27	11:39	7	self->client
water	11:27	0:0	8	self
op	11:31	0:0	8	->
water	11:33	0:0	8	client
stmts	11:42	16:8	5	
water	11:42	0:0	6	{
water	12:12	0:0	6	self
op	12:16	0:0	6	->
water	12:18	0:0	6	activated
op	12:28	0:0	6	=
water	12:30	0:0	6	1
water	12:31	0:0	6	;
call	13:12	15:55	6	av_log
arg	13:19	13:26	7	context
water	13:19	0:0	8	context
arg	13:28	13:39	7	AV_LOG_INFO
water	13:28	0:0	8	AV_LOG_INFO
arg	14:19	14:94	7	"JACK client registered and activated (rate=%dHz, buffer_size=%d frames)\n"
water	14:19	0:0	8	"JACK client registered and activated (rate=%dHz, buffer_size=%d frames)\n"
arg	15:19	15:36	7	self->sample_rate
water	15:19	0:0	8	self
op	15:23	0:0	8	->
water	15:25	0:0	8	sample_rate
arg	15:38	15:55	7	self->buffer_size
water	15:38	0:0	8	self
op	15:42	0:0	8	->
water	15:44	0:0	8	buffer_size
water	15:56	0:0	6	;
water	16:8	0:0	6	}
else	16:10	19:8	4
stmts	16:15	19:8	5	
water	16:15	0:0	6	{
call	17:12	17:76	6	av_log
arg	17:19	17:26	7	context
water	17:19	0:0	8	context
arg	17:28	17:40	7	AV_LOG_ERROR
water	17:28	0:0	8	AV_LOG_ERROR
arg	17:42	17:76	7	"Unable to activate JACK client\n"
water	17:42	0:0	8	"Unable to activate JACK client\n"
water	17:77	0:0	6	;
return	18:12	18:31	6	AVERROR(EIO)
call	18:19	18:30	7	AVERROR
arg	18:27	18:30	8	EIO
water	18:27	0:0	9	EIO
water	19:8	0:0	6	}
water	20:4	0:0	4	}
water	22:4	0:0	2	timeout
op	22:11	0:0	2	.
water	22:12	0:0	2	tv_sec
op	22:19	0:0	2	=
call	22:21	22:32	2	av_gettime
op	22:34	0:0	2	/
water	22:36	0:0	2	1000000
op	22:44	0:0	2	+
water	22:46	0:0	2	2
water	22:47	0:0	2	;
if	23:4	37:4	2	(sem_timedwait (& self -> packet_count ,& timeout ))
cond	23:8	23:51	3	sem_timedwait (& self -> packet_count ,& timeout )
call	23:8	23:51	4	sem_timedwait
arg	23:22	23:41	5	&self->packet_count
op	23:22	0:0	6	&
water	23:23	0:0	6	self
op	23:27	0:0	6	->
water	23:29	0:0	6	packet_count
arg	23:43	23:51	5	&timeout
op	23:43	0:0	6	&
water	23:44	0:0	6	timeout
stmts	23:54	37:4	3	
water	23:54	0:0	4	{
if	24:8	27:8	4	(errno == ETIMEDOUT)
cond	24:12	24:21	5	errno == ETIMEDOUT
water	24:12	0:0	6	errno
op	24:18	0:0	6	==
water	24:21	0:0	6	ETIMEDOUT
stmts	24:32	27:8	5	
water	24:32	0:0	6	{
call	25:12	26:91	6	av_log
arg	25:19	25:26	7	context
water	25:19	0:0	8	context
arg	25:28	25:40	7	AV_LOG_ERROR
water	25:28	0:0	8	AV_LOG_ERROR
arg	26:19	26:91	7	"Input error: timed out when waiting for JACK process callback output\n"
water	26:19	0:0	8	"Input error: timed out when waiting for JACK process callback output\n"
water	26:92	0:0	6	;
water	27:8	0:0	6	}
else	27:10	33:8	4
stmts	27:15	33:8	5	
water	27:15	0:0	6	{
decl	28:12	28:28	6	char	errbuf[128]
decl	29:12	29:36	6	int	ret
op	29:20	0:0	6	=
call	29:22	29:35	7	AVERROR
arg	29:30	29:35	8	errno
water	29:30	0:0	9	errno
call	30:12	30:51	6	av_strerror
arg	30:24	30:27	7	ret
water	30:24	0:0	8	ret
arg	30:29	30:35	7	errbuf
water	30:29	0:0	8	errbuf
arg	30:37	30:51	7	sizeof(errbuf)
op	30:37	0:0	8	sizeof
water	30:43	0:0	8	(
water	30:44	0:0	8	errbuf
water	30:50	0:0	8	)
water	30:52	0:0	6	;
call	31:12	32:25	6	av_log
arg	31:19	31:26	7	context
water	31:19	0:0	8	context
arg	31:28	31:40	7	AV_LOG_ERROR
water	31:28	0:0	8	AV_LOG_ERROR
arg	31:42	31:86	7	"Error while waiting for audio packet: %s\n"
water	31:42	0:0	8	"Error while waiting for audio packet: %s\n"
arg	32:19	32:25	7	errbuf
water	32:19	0:0	8	errbuf
water	32:26	0:0	6	;
water	33:8	0:0	6	}
if	34:8	35:79	4	(! self -> client)
cond	34:12	34:19	5	! self -> client
op	34:12	0:0	6	!
water	34:13	0:0	6	self
op	34:17	0:0	6	->
water	34:19	0:0	6	client
stmts	35:12	35:79	5	
call	35:12	35:78	6	av_log
arg	35:19	35:26	7	context
water	35:19	0:0	8	context
arg	35:28	35:40	7	AV_LOG_ERROR
water	35:28	0:0	8	AV_LOG_ERROR
arg	35:42	35:78	7	"Input error: JACK server is gone\n"
water	35:42	0:0	8	"Input error: JACK server is gone\n"
water	35:79	0:0	6	;
return	36:8	36:27	4	AVERROR(EIO)
call	36:15	36:26	5	AVERROR
arg	36:23	36:26	6	EIO
water	36:23	0:0	7	EIO
water	37:4	0:0	4	}
if	38:4	41:4	2	(self -> pkt_xrun)
cond	38:8	38:14	3	self -> pkt_xrun
water	38:8	0:0	4	self
op	38:12	0:0	4	->
water	38:14	0:0	4	pkt_xrun
stmts	38:24	41:4	3	
water	38:24	0:0	4	{
call	39:8	39:61	4	av_log
arg	39:15	39:22	5	context
water	39:15	0:0	6	context
arg	39:24	39:38	5	AV_LOG_WARNING
water	39:24	0:0	6	AV_LOG_WARNING
arg	39:40	39:61	5	"Audio packet xrun\n"
water	39:40	0:0	6	"Audio packet xrun\n"
water	39:62	0:0	4	;
water	40:8	0:0	4	self
op	40:12	0:0	4	->
water	40:14	0:0	4	pkt_xrun
op	40:23	0:0	4	=
water	40:25	0:0	4	0
water	40:26	0:0	4	;
water	41:4	0:0	4	}
if	42:4	45:4	2	(self -> jack_xrun)
cond	42:8	42:14	3	self -> jack_xrun
water	42:8	0:0	4	self
op	42:12	0:0	4	->
water	42:14	0:0	4	jack_xrun
stmts	42:25	45:4	3	
water	42:25	0:0	4	{
call	43:8	43:53	4	av_log
arg	43:15	43:22	5	context
water	43:15	0:0	6	context
arg	43:24	43:38	5	AV_LOG_WARNING
water	43:24	0:0	6	AV_LOG_WARNING
arg	43:40	43:53	5	"JACK xrun\n"
water	43:40	0:0	6	"JACK xrun\n"
water	43:54	0:0	4	;
water	44:8	0:0	4	self
op	44:12	0:0	4	->
water	44:14	0:0	4	jack_xrun
op	44:24	0:0	4	=
water	44:26	0:0	4	0
water	44:27	0:0	4	;
water	45:4	0:0	4	}
call	47:4	47:67	2	av_fifo_generic_read
arg	47:25	47:42	3	self->filled_pkts
water	47:25	0:0	4	self
op	47:29	0:0	4	->
water	47:31	0:0	4	filled_pkts
arg	47:44	47:47	3	pkt
water	47:44	0:0	4	pkt
arg	47:49	47:61	3	sizeof(*pkt)
op	47:49	0:0	4	sizeof
water	47:55	0:0	4	(
op	47:56	0:0	4	*
water	47:57	0:0	4	pkt
water	47:60	0:0	4	)
arg	47:63	47:67	3	NULL
water	47:63	0:0	4	NULL
water	47:68	0:0	2	;
if	48:4	49:19	2	(( test =supply_new_packets (self ,context ) ))
cond	48:8	48:49	3	( test =supply_new_packets (self ,context ) )
water	48:8	0:0	4	(
water	48:9	0:0	4	test
op	48:14	0:0	4	=
call	48:16	48:48	4	supply_new_packets
arg	48:35	48:39	5	self
water	48:35	0:0	6	self
arg	48:41	48:48	5	context
water	48:41	0:0	6	context
water	48:49	0:0	4	)
stmts	49:8	49:19	3	
return	49:8	49:19	4	test
water	49:15	0:0	5	test
return	50:4	50:12	2	0
water	50:11	0:0	3	0
