func	1:15	123:0	0	int	validate_options
params	1:35	0:0	1	
param	1:36	1:55	2	AC3EncodeContext *	s
stmnts	0:0	122:12	1	
decl	3:4	3:36	2	AVCodecContext	*avctx
op	3:26	0:0	2	=
water	3:28	0:0	2	s
op	3:29	0:0	2	->
water	3:31	0:0	2	avctx
decl	4:4	4:22	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:22	2	int	ret
water	4:14	0:0	2	,
decl	4:4	4:22	2	int	max_sr
if	6:4	10:4	2	(! avctx -> channel_layout)
cond	6:8	6:16	3	! avctx -> channel_layout
op	6:8	0:0	4	!
water	6:9	0:0	4	avctx
op	6:14	0:0	4	->
water	6:16	0:0	4	channel_layout
stmts	6:32	10:4	3	
water	6:32	0:0	4	{
call	7:8	9:61	4	av_log
arg	7:15	7:20	5	avctx
water	7:15	0:0	6	avctx
arg	7:22	7:36	5	AV_LOG_WARNING
water	7:22	0:0	6	AV_LOG_WARNING
arg	7:38	9:61	5	"No channel layout specified. The ""encoder will guess the layout, but it ""might be incorrect.\n"
water	7:38	0:0	6	"No channel layout specified. The "
water	8:38	0:0	6	"encoder will guess the layout, but it "
water	9:38	0:0	6	"might be incorrect.\n"
water	9:62	0:0	4	;
water	10:4	0:0	4	}
water	11:4	0:0	2	ret
op	11:8	0:0	2	=
call	11:10	11:69	2	set_channel_info
arg	11:27	11:28	3	s
water	11:27	0:0	4	s
arg	11:30	11:45	3	avctx->channels
water	11:30	0:0	4	avctx
op	11:35	0:0	4	->
water	11:37	0:0	4	channels
arg	11:47	11:69	3	&avctx->channel_layout
op	11:47	0:0	4	&
water	11:48	0:0	4	avctx
op	11:53	0:0	4	->
water	11:55	0:0	4	channel_layout
water	11:70	0:0	2	;
if	12:4	15:4	2	(ret)
cond	12:8	12:8	3	ret
water	12:8	0:0	4	ret
stmts	12:13	15:4	3	
water	12:13	0:0	4	{
call	13:8	13:62	4	av_log
arg	13:15	13:20	5	avctx
water	13:15	0:0	6	avctx
arg	13:22	13:34	5	AV_LOG_ERROR
water	13:22	0:0	6	AV_LOG_ERROR
arg	13:36	13:62	5	"invalid channel layout\n"
water	13:36	0:0	6	"invalid channel layout\n"
water	13:63	0:0	4	;
return	14:8	14:18	4	ret
water	14:15	0:0	5	ret
water	15:4	0:0	4	}
water	20:4	0:0	2	max_sr
op	20:11	0:0	2	=
water	20:13	0:0	2	s
op	20:14	0:0	2	->
water	20:16	0:0	2	eac3
water	20:21	0:0	2	?
water	20:23	0:0	2	2
water	20:25	0:0	2	:
water	20:27	0:0	2	8
water	20:28	0:0	2	;
for	21:4	24:4	2	(i = 0 ;i <= max_sr;i ++)
forinit	21:9	21:14	3	i = 0 ;
water	21:9	0:0	4	i
op	21:11	0:0	4	=
water	21:13	0:0	4	0
water	21:14	0:0	4	;
cond	21:16	21:21	3	i <= max_sr
water	21:16	0:0	4	i
op	21:18	0:0	4	<=
water	21:21	0:0	4	max_sr
forexpr	21:29	21:30	3	i ++
water	21:29	0:0	4	i
op	21:30	0:0	4	++
stmts	21:34	24:4	3	
water	21:34	0:0	4	{
if	22:8	23:17	4	(( ff_ac3_sample_rate_tab [ i % 3 ] >> ( i / 3 ) ) == avctx -> sample_rate)
cond	22:12	22:65	5	( ff_ac3_sample_rate_tab [ i % 3 ] >> ( i / 3 ) ) == avctx -> sample_rate
water	22:12	0:0	6	(
water	22:13	0:0	6	ff_ac3_sample_rate_tab
op	22:35	0:0	6	[
water	22:36	0:0	6	i
op	22:38	0:0	6	%
water	22:40	0:0	6	3
op	22:41	0:0	6	]
op	22:43	0:0	6	>>
water	22:46	0:0	6	(
water	22:47	0:0	6	i
op	22:49	0:0	6	/
water	22:51	0:0	6	3
water	22:52	0:0	6	)
water	22:53	0:0	6	)
op	22:55	0:0	6	==
water	22:58	0:0	6	avctx
op	22:63	0:0	6	->
water	22:65	0:0	6	sample_rate
stmts	23:12	23:17	5	
break	23:12	23:17	6	
water	24:4	0:0	4	}
if	25:4	28:4	2	(i > max_sr)
cond	25:8	25:12	3	i > max_sr
water	25:8	0:0	4	i
op	25:10	0:0	4	>
water	25:12	0:0	4	max_sr
stmts	25:20	28:4	3	
water	25:20	0:0	4	{
call	26:8	26:59	4	av_log
arg	26:15	26:20	5	avctx
water	26:15	0:0	6	avctx
arg	26:22	26:34	5	AV_LOG_ERROR
water	26:22	0:0	6	AV_LOG_ERROR
arg	26:36	26:59	5	"invalid sample rate\n"
water	26:36	0:0	6	"invalid sample rate\n"
water	26:60	0:0	4	;
return	27:8	27:30	4	AVERROR(EINVAL)
call	27:15	27:29	5	AVERROR
arg	27:23	27:29	6	EINVAL
water	27:23	0:0	7	EINVAL
water	28:4	0:0	4	}
water	29:4	0:0	2	s
op	29:5	0:0	2	->
water	29:7	0:0	2	sample_rate
op	29:26	0:0	2	=
water	29:28	0:0	2	avctx
op	29:33	0:0	2	->
water	29:35	0:0	2	sample_rate
water	29:46	0:0	2	;
water	30:4	0:0	2	s
op	30:5	0:0	2	->
water	30:7	0:0	2	bit_alloc
op	30:16	0:0	2	.
water	30:17	0:0	2	sr_shift
op	30:26	0:0	2	=
water	30:28	0:0	2	i
op	30:30	0:0	2	/
water	30:32	0:0	2	3
water	30:33	0:0	2	;
water	31:4	0:0	2	s
op	31:5	0:0	2	->
water	31:7	0:0	2	bit_alloc
op	31:16	0:0	2	.
water	31:17	0:0	2	sr_code
op	31:26	0:0	2	=
water	31:28	0:0	2	i
op	31:30	0:0	2	%
water	31:32	0:0	2	3
water	31:33	0:0	2	;
water	32:4	0:0	2	s
op	32:5	0:0	2	->
water	32:7	0:0	2	bitstream_id
op	32:26	0:0	2	=
water	32:28	0:0	2	s
op	32:29	0:0	2	->
water	32:31	0:0	2	eac3
water	32:36	0:0	2	?
water	32:38	0:0	2	16
water	32:41	0:0	2	:
water	32:43	0:0	2	8
op	32:45	0:0	2	+
water	32:47	0:0	2	s
op	32:48	0:0	2	->
water	32:50	0:0	2	bit_alloc
op	32:59	0:0	2	.
water	32:60	0:0	2	sr_shift
water	32:68	0:0	2	;
if	34:4	42:4	2	(! avctx -> bit_rate)
cond	34:8	34:16	3	! avctx -> bit_rate
op	34:8	0:0	4	!
water	34:9	0:0	4	avctx
op	34:14	0:0	4	->
water	34:16	0:0	4	bit_rate
stmts	34:26	42:4	3	
water	34:26	0:0	4	{
switch	35:8	41:8	4	(s -> fbw_channels)
cond	35:16	35:19	5	s -> fbw_channels
water	35:16	0:0	6	s
op	35:17	0:0	6	->
water	35:19	0:0	6	fbw_channels
stmts	35:33	41:8	5	
water	35:33	0:0	6	{
label	36:8	36:14	6	case 1 :
water	36:16	0:0	6	avctx
op	36:21	0:0	6	->
water	36:23	0:0	6	bit_rate
op	36:32	0:0	6	=
water	36:35	0:0	6	96000
water	36:40	0:0	6	;
break	36:42	36:47	6	
label	37:8	37:14	6	case 2 :
water	37:16	0:0	6	avctx
op	37:21	0:0	6	->
water	37:23	0:0	6	bit_rate
op	37:32	0:0	6	=
water	37:34	0:0	6	192000
water	37:40	0:0	6	;
break	37:42	37:47	6	
label	38:8	38:14	6	case 3 :
water	38:16	0:0	6	avctx
op	38:21	0:0	6	->
water	38:23	0:0	6	bit_rate
op	38:32	0:0	6	=
water	38:34	0:0	6	320000
water	38:40	0:0	6	;
break	38:42	38:47	6	
label	39:8	39:14	6	case 4 :
water	39:16	0:0	6	avctx
op	39:21	0:0	6	->
water	39:23	0:0	6	bit_rate
op	39:32	0:0	6	=
water	39:34	0:0	6	384000
water	39:40	0:0	6	;
break	39:42	39:47	6	
label	40:8	40:14	6	case 5 :
water	40:16	0:0	6	avctx
op	40:21	0:0	6	->
water	40:23	0:0	6	bit_rate
op	40:32	0:0	6	=
water	40:34	0:0	6	448000
water	40:40	0:0	6	;
break	40:42	40:47	6	
water	41:8	0:0	6	}
water	42:4	0:0	4	}
if	44:4	86:4	2	(s -> eac3)
cond	44:8	44:11	3	s -> eac3
water	44:8	0:0	4	s
op	44:9	0:0	4	->
water	44:11	0:0	4	eac3
stmts	44:17	86:4	3	
water	44:17	0:0	4	{
decl	45:8	45:57	4	int	max_br
water	45:18	0:0	4	,
decl	45:8	45:57	4	int	min_br
water	45:26	0:0	4	,
decl	45:8	45:57	4	int	wpf
water	45:31	0:0	4	,
decl	45:8	45:57	4	int	min_br_dist
water	45:44	0:0	4	,
decl	45:8	45:57	4	int	min_br_code
decl	46:8	46:52	4	int	num_blks_code
water	46:25	0:0	4	,
decl	46:8	46:52	4	int	num_blocks
water	46:37	0:0	4	,
decl	46:8	46:52	4	int	frame_samples
for	51:8	58:8	4	(num_blks_code = 3 ;num_blks_code >= 0;num_blks_code --)
forinit	51:13	51:30	5	num_blks_code = 3 ;
water	51:13	0:0	6	num_blks_code
op	51:27	0:0	6	=
water	51:29	0:0	6	3
water	51:30	0:0	6	;
cond	51:32	51:49	5	num_blks_code >= 0
water	51:32	0:0	6	num_blks_code
op	51:46	0:0	6	>=
water	51:49	0:0	6	0
forexpr	51:52	51:65	5	num_blks_code --
water	51:52	0:0	6	num_blks_code
op	51:65	0:0	6	--
stmts	51:69	58:8	5	
water	51:69	0:0	6	{
water	52:12	0:0	6	num_blocks
op	52:23	0:0	6	=
water	52:25	0:0	6	(
water	52:26	0:0	6	(
water	52:27	0:0	6	int
op	52:30	0:0	6	[
op	52:31	0:0	6	]
water	52:32	0:0	6	)
water	52:33	0:0	6	{
water	52:35	0:0	6	1
water	52:36	0:0	6	,
water	52:38	0:0	6	2
water	52:39	0:0	6	,
water	52:41	0:0	6	3
water	52:42	0:0	6	,
water	52:44	0:0	6	6
water	52:46	0:0	6	}
water	52:47	0:0	6	)
op	52:48	0:0	6	[
water	52:49	0:0	6	num_blks_code
op	52:62	0:0	6	]
water	52:63	0:0	6	;
water	53:12	0:0	6	frame_samples
op	53:27	0:0	6	=
water	53:29	0:0	6	AC3_BLOCK_SIZE
op	53:44	0:0	6	*
water	53:46	0:0	6	num_blocks
water	53:56	0:0	6	;
water	54:12	0:0	6	max_br
op	54:19	0:0	6	=
water	54:21	0:0	6	2048
op	54:26	0:0	6	*
water	54:28	0:0	6	s
op	54:29	0:0	6	->
water	54:31	0:0	6	sample_rate
op	54:43	0:0	6	/
water	54:45	0:0	6	frame_samples
op	54:59	0:0	6	*
water	54:61	0:0	6	16
water	54:63	0:0	6	;
water	55:12	0:0	6	min_br
op	55:19	0:0	6	=
water	55:21	0:0	6	(
water	55:22	0:0	6	(
water	55:23	0:0	6	s
op	55:24	0:0	6	->
water	55:26	0:0	6	sample_rate
op	55:38	0:0	6	+
water	55:40	0:0	6	(
water	55:41	0:0	6	frame_samples
op	55:54	0:0	6	-
water	55:55	0:0	6	1
water	55:56	0:0	6	)
water	55:57	0:0	6	)
op	55:59	0:0	6	/
water	55:61	0:0	6	frame_samples
water	55:74	0:0	6	)
op	55:76	0:0	6	*
water	55:78	0:0	6	16
water	55:80	0:0	6	;
if	56:12	57:21	6	(avctx -> bit_rate <= max_br)
cond	56:16	56:35	7	avctx -> bit_rate <= max_br
water	56:16	0:0	8	avctx
op	56:21	0:0	8	->
water	56:23	0:0	8	bit_rate
op	56:32	0:0	8	<=
water	56:35	0:0	8	max_br
stmts	57:16	57:21	7	
break	57:16	57:21	8	
water	58:8	0:0	6	}
if	59:8	63:8	4	(avctx -> bit_rate < min_br || avctx -> bit_rate > max_br)
cond	59:12	59:58	5	avctx -> bit_rate < min_br || avctx -> bit_rate > max_br
water	59:12	0:0	6	avctx
op	59:17	0:0	6	->
water	59:19	0:0	6	bit_rate
op	59:28	0:0	6	<
water	59:30	0:0	6	min_br
op	59:37	0:0	6	||
water	59:40	0:0	6	avctx
op	59:45	0:0	6	->
water	59:47	0:0	6	bit_rate
op	59:56	0:0	6	>
water	59:58	0:0	6	max_br
stmts	59:66	63:8	5	
water	59:66	0:0	6	{
call	60:12	61:59	6	av_log
arg	60:19	60:24	7	avctx
water	60:19	0:0	8	avctx
arg	60:26	60:38	7	AV_LOG_ERROR
water	60:26	0:0	8	AV_LOG_ERROR
arg	60:40	61:43	7	"invalid bit rate. must be %d to %d ""for this sample rate\n"
water	60:40	0:0	8	"invalid bit rate. must be %d to %d "
water	61:19	0:0	8	"for this sample rate\n"
arg	61:45	61:51	7	min_br
water	61:45	0:0	8	min_br
arg	61:53	61:59	7	max_br
water	61:53	0:0	8	max_br
water	61:60	0:0	6	;
return	62:12	62:34	6	AVERROR(EINVAL)
call	62:19	62:33	7	AVERROR
arg	62:27	62:33	8	EINVAL
water	62:27	0:0	9	EINVAL
water	63:8	0:0	6	}
water	64:8	0:0	4	s
op	64:9	0:0	4	->
water	64:11	0:0	4	num_blks_code
op	64:25	0:0	4	=
water	64:27	0:0	4	num_blks_code
water	64:40	0:0	4	;
water	65:8	0:0	4	s
op	65:9	0:0	4	->
water	65:11	0:0	4	num_blocks
op	65:25	0:0	4	=
water	65:27	0:0	4	num_blocks
water	65:37	0:0	4	;
water	67:8	0:0	4	wpf
op	67:12	0:0	4	=
water	67:14	0:0	4	(
water	67:15	0:0	4	avctx
op	67:20	0:0	4	->
water	67:22	0:0	4	bit_rate
op	67:31	0:0	4	/
water	67:33	0:0	4	16
water	67:35	0:0	4	)
op	67:37	0:0	4	*
water	67:39	0:0	4	frame_samples
op	67:53	0:0	4	/
water	67:55	0:0	4	s
op	67:56	0:0	4	->
water	67:58	0:0	4	sample_rate
water	67:69	0:0	4	;
call	68:8	68:41	4	av_assert1
arg	68:19	68:41	5	wpf>0&&wpf<=2048
water	68:19	0:0	6	wpf
op	68:23	0:0	6	>
water	68:25	0:0	6	0
op	68:27	0:0	6	&&
water	68:30	0:0	6	wpf
op	68:34	0:0	6	<=
water	68:37	0:0	6	2048
water	68:42	0:0	4	;
water	72:8	0:0	4	min_br_code
op	72:20	0:0	4	=
op	72:22	0:0	4	-
water	72:23	0:0	4	1
water	72:24	0:0	4	;
water	73:8	0:0	4	min_br_dist
op	73:20	0:0	4	=
water	73:22	0:0	4	INT_MAX
water	73:29	0:0	4	;
for	74:8	80:8	4	(i = 0 ;i < 19;i ++)
forinit	74:13	74:18	5	i = 0 ;
water	74:13	0:0	6	i
op	74:15	0:0	6	=
water	74:17	0:0	6	0
water	74:18	0:0	6	;
cond	74:20	74:24	5	i < 19
water	74:20	0:0	6	i
op	74:22	0:0	6	<
water	74:24	0:0	6	19
forexpr	74:28	74:29	5	i ++
water	74:28	0:0	6	i
op	74:29	0:0	6	++
stmts	74:33	80:8	5	
water	74:33	0:0	6	{
decl	75:12	75:77	6	int	br_dist
op	75:24	0:0	6	=
call	75:26	75:76	7	abs
arg	75:30	75:76	8	ff_ac3_bitrate_tab[i]*1000-avctx->bit_rate
water	75:30	0:0	9	ff_ac3_bitrate_tab
op	75:48	0:0	9	[
water	75:49	0:0	9	i
op	75:50	0:0	9	]
op	75:52	0:0	9	*
water	75:54	0:0	9	1000
op	75:59	0:0	9	-
water	75:61	0:0	9	avctx
op	75:66	0:0	9	->
water	75:68	0:0	9	bit_rate
if	76:12	79:12	6	(br_dist < min_br_dist)
cond	76:16	76:26	7	br_dist < min_br_dist
water	76:16	0:0	8	br_dist
op	76:24	0:0	8	<
water	76:26	0:0	8	min_br_dist
stmts	76:39	79:12	7	
water	76:39	0:0	8	{
water	77:16	0:0	8	min_br_dist
op	77:28	0:0	8	=
water	77:30	0:0	8	br_dist
water	77:37	0:0	8	;
water	78:16	0:0	8	min_br_code
op	78:28	0:0	8	=
water	78:30	0:0	8	i
water	78:31	0:0	8	;
water	79:12	0:0	8	}
water	80:8	0:0	6	}
water	82:8	0:0	4	s
op	82:9	0:0	4	->
water	82:11	0:0	4	frame_size_code
op	82:27	0:0	4	=
water	82:29	0:0	4	min_br_code
op	82:41	0:0	4	<<
water	82:44	0:0	4	1
water	82:45	0:0	4	;
while	83:8	84:17	4	(wpf > 1 && wpf * s -> sample_rate / AC3_FRAME_SIZE * 16 > avctx -> bit_rate)
cond	83:15	83:78	5	wpf > 1 && wpf * s -> sample_rate / AC3_FRAME_SIZE * 16 > avctx -> bit_rate
water	83:15	0:0	6	wpf
op	83:19	0:0	6	>
water	83:21	0:0	6	1
op	83:23	0:0	6	&&
water	83:26	0:0	6	wpf
op	83:30	0:0	6	*
water	83:32	0:0	6	s
op	83:33	0:0	6	->
water	83:35	0:0	6	sample_rate
op	83:47	0:0	6	/
water	83:49	0:0	6	AC3_FRAME_SIZE
op	83:64	0:0	6	*
water	83:66	0:0	6	16
op	83:69	0:0	6	>
water	83:71	0:0	6	avctx
op	83:76	0:0	6	->
water	83:78	0:0	6	bit_rate
stmts	84:12	84:17	5	
water	84:12	0:0	6	wpf
op	84:15	0:0	6	--
water	84:17	0:0	6	;
water	85:8	0:0	4	s
op	85:9	0:0	4	->
water	85:11	0:0	4	frame_size_min
op	85:26	0:0	4	=
water	85:28	0:0	4	2
op	85:30	0:0	4	*
water	85:32	0:0	4	wpf
water	85:35	0:0	4	;
water	86:4	0:0	4	}
else	86:6	104:4	2
stmts	86:11	104:4	3	
water	86:11	0:0	4	{
decl	87:8	87:59	4	int	best_br
op	87:20	0:0	4	=
water	87:22	0:0	4	0
water	87:23	0:0	4	,
decl	87:8	87:59	4	int	best_code
op	87:35	0:0	4	=
water	87:37	0:0	4	0
water	87:38	0:0	4	,
decl	87:8	87:59	4	int	best_diff
op	87:50	0:0	4	=
water	87:52	0:0	4	INT_MAX
for	88:8	98:8	4	(i = 0 ;i < 19;i ++)
forinit	88:13	88:18	5	i = 0 ;
water	88:13	0:0	6	i
op	88:15	0:0	6	=
water	88:17	0:0	6	0
water	88:18	0:0	6	;
cond	88:20	88:24	5	i < 19
water	88:20	0:0	6	i
op	88:22	0:0	6	<
water	88:24	0:0	6	19
forexpr	88:28	88:29	5	i ++
water	88:28	0:0	6	i
op	88:29	0:0	6	++
stmts	88:33	98:8	5	
water	88:33	0:0	6	{
decl	89:12	89:78	6	int	br
op	89:21	0:0	6	=
water	89:23	0:0	6	(
water	89:24	0:0	6	ff_ac3_bitrate_tab
op	89:42	0:0	6	[
water	89:43	0:0	6	i
op	89:44	0:0	6	]
op	89:46	0:0	6	>>
water	89:49	0:0	6	s
op	89:50	0:0	6	->
water	89:52	0:0	6	bit_alloc
op	89:61	0:0	6	.
water	89:62	0:0	6	sr_shift
water	89:70	0:0	6	)
op	89:72	0:0	6	*
water	89:74	0:0	6	1000
decl	90:12	90:48	6	int	diff
op	90:21	0:0	6	=
call	90:23	90:47	7	abs
arg	90:27	90:47	8	br-avctx->bit_rate
water	90:27	0:0	9	br
op	90:30	0:0	9	-
water	90:32	0:0	9	avctx
op	90:37	0:0	9	->
water	90:39	0:0	9	bit_rate
if	91:12	95:12	6	(diff < best_diff)
cond	91:16	91:23	7	diff < best_diff
water	91:16	0:0	8	diff
op	91:21	0:0	8	<
water	91:23	0:0	8	best_diff
stmts	91:34	95:12	7	
water	91:34	0:0	8	{
water	92:16	0:0	8	best_br
op	92:26	0:0	8	=
water	92:28	0:0	8	br
water	92:30	0:0	8	;
water	93:16	0:0	8	best_code
op	93:26	0:0	8	=
water	93:28	0:0	8	i
water	93:29	0:0	8	;
water	94:16	0:0	8	best_diff
op	94:26	0:0	8	=
water	94:28	0:0	8	diff
water	94:32	0:0	8	;
water	95:12	0:0	8	}
if	96:12	97:21	6	(! best_diff)
cond	96:16	96:17	7	! best_diff
op	96:16	0:0	8	!
water	96:17	0:0	8	best_diff
stmts	97:16	97:21	7	
break	97:16	97:21	8	
water	98:8	0:0	6	}
water	99:8	0:0	4	avctx
op	99:13	0:0	4	->
water	99:15	0:0	4	bit_rate
op	99:27	0:0	4	=
water	99:29	0:0	4	best_br
water	99:36	0:0	4	;
water	100:8	0:0	4	s
op	100:9	0:0	4	->
water	100:11	0:0	4	frame_size_code
op	100:27	0:0	4	=
water	100:29	0:0	4	best_code
op	100:39	0:0	4	<<
water	100:42	0:0	4	1
water	100:43	0:0	4	;
water	101:8	0:0	4	s
op	101:9	0:0	4	->
water	101:11	0:0	4	frame_size_min
op	101:27	0:0	4	=
water	101:29	0:0	4	2
op	101:31	0:0	4	*
water	101:33	0:0	4	ff_ac3_frame_size_tab
op	101:54	0:0	4	[
water	101:55	0:0	4	s
op	101:56	0:0	4	->
water	101:58	0:0	4	frame_size_code
op	101:73	0:0	4	]
op	101:74	0:0	4	[
water	101:75	0:0	4	s
op	101:76	0:0	4	->
water	101:78	0:0	4	bit_alloc
op	101:87	0:0	4	.
water	101:88	0:0	4	sr_code
op	101:95	0:0	4	]
water	101:96	0:0	4	;
water	102:8	0:0	4	s
op	102:9	0:0	4	->
water	102:11	0:0	4	num_blks_code
op	102:27	0:0	4	=
water	102:29	0:0	4	0
water	102:30	0:0	4	x3
water	102:32	0:0	4	;
water	103:8	0:0	4	s
op	103:9	0:0	4	->
water	103:11	0:0	4	num_blocks
op	103:27	0:0	4	=
water	103:29	0:0	4	6
water	103:30	0:0	4	;
water	104:4	0:0	4	}
water	105:4	0:0	2	s
op	105:5	0:0	2	->
water	105:7	0:0	2	bit_rate
op	105:18	0:0	2	=
water	105:20	0:0	2	avctx
op	105:25	0:0	2	->
water	105:27	0:0	2	bit_rate
water	105:35	0:0	2	;
water	106:4	0:0	2	s
op	106:5	0:0	2	->
water	106:7	0:0	2	frame_size
op	106:18	0:0	2	=
water	106:20	0:0	2	s
op	106:21	0:0	2	->
water	106:23	0:0	2	frame_size_min
water	106:37	0:0	2	;
if	108:4	111:4	2	(avctx -> cutoff < 0)
cond	108:8	108:24	3	avctx -> cutoff < 0
water	108:8	0:0	4	avctx
op	108:13	0:0	4	->
water	108:15	0:0	4	cutoff
op	108:22	0:0	4	<
water	108:24	0:0	4	0
stmts	108:27	111:4	3	
water	108:27	0:0	4	{
call	109:8	109:64	4	av_log
arg	109:15	109:20	5	avctx
water	109:15	0:0	6	avctx
arg	109:22	109:34	5	AV_LOG_ERROR
water	109:22	0:0	6	AV_LOG_ERROR
arg	109:36	109:64	5	"invalid cutoff frequency\n"
water	109:36	0:0	6	"invalid cutoff frequency\n"
water	109:65	0:0	4	;
return	110:8	110:30	4	AVERROR(EINVAL)
call	110:15	110:29	5	AVERROR
arg	110:23	110:29	6	EINVAL
water	110:23	0:0	7	EINVAL
water	111:4	0:0	4	}
water	112:4	0:0	2	s
op	112:5	0:0	2	->
water	112:7	0:0	2	cutoff
op	112:14	0:0	2	=
water	112:16	0:0	2	avctx
op	112:21	0:0	2	->
water	112:23	0:0	2	cutoff
water	112:29	0:0	2	;
if	113:4	114:39	2	(s -> cutoff > ( s -> sample_rate >> 1 ))
cond	113:8	113:40	3	s -> cutoff > ( s -> sample_rate >> 1 )
water	113:8	0:0	4	s
op	113:9	0:0	4	->
water	113:11	0:0	4	cutoff
op	113:18	0:0	4	>
water	113:20	0:0	4	(
water	113:21	0:0	4	s
op	113:22	0:0	4	->
water	113:24	0:0	4	sample_rate
op	113:36	0:0	4	>>
water	113:39	0:0	4	1
water	113:40	0:0	4	)
stmts	114:8	114:39	3	
water	114:8	0:0	4	s
op	114:9	0:0	4	->
water	114:11	0:0	4	cutoff
op	114:18	0:0	4	=
water	114:20	0:0	4	s
op	114:21	0:0	4	->
water	114:23	0:0	4	sample_rate
op	114:35	0:0	4	>>
water	114:38	0:0	4	1
water	114:39	0:0	4	;
water	115:4	0:0	2	ret
op	115:8	0:0	2	=
call	115:10	115:36	2	ff_ac3_validate_metadata
arg	115:35	115:36	3	s
water	115:35	0:0	4	s
water	115:37	0:0	2	;
if	116:4	117:18	2	(ret)
cond	116:8	116:8	3	ret
water	116:8	0:0	4	ret
stmts	117:8	117:18	3	
return	117:8	117:18	4	ret
water	117:15	0:0	5	ret
water	118:4	0:0	2	s
op	118:5	0:0	2	->
water	118:7	0:0	2	rematrixing_enabled
op	118:27	0:0	2	=
water	118:29	0:0	2	s
op	118:30	0:0	2	->
water	118:32	0:0	2	options
op	118:39	0:0	2	.
water	118:40	0:0	2	stereo_rematrixing
op	118:59	0:0	2	&&
water	119:29	0:0	2	(
water	119:30	0:0	2	s
op	119:31	0:0	2	->
water	119:33	0:0	2	channel_mode
op	119:46	0:0	2	==
water	119:49	0:0	2	AC3_CHMODE_STEREO
water	119:66	0:0	2	)
water	119:67	0:0	2	;
water	120:4	0:0	2	s
op	120:5	0:0	2	->
water	120:7	0:0	2	cpl_enabled
op	120:19	0:0	2	=
water	120:21	0:0	2	s
op	120:22	0:0	2	->
water	120:24	0:0	2	options
op	120:31	0:0	2	.
water	120:32	0:0	2	channel_coupling
op	120:49	0:0	2	&&
water	121:21	0:0	2	s
op	121:22	0:0	2	->
water	121:24	0:0	2	channel_mode
op	121:37	0:0	2	>=
water	121:40	0:0	2	AC3_CHMODE_STEREO
water	121:57	0:0	2	;
return	122:4	122:12	2	0
water	122:11	0:0	3	0
