func	1:0	66:0	0	static void	envelope_peak
params	1:25	0:0	1	
param	1:26	1:44	2	WaveformContext *	s
param	1:46	1:58	2	AVFrame *	out
param	1:60	1:69	2	int	plane
param	1:71	1:84	2	int	component
stmnts	0:0	65:4	1	
decl	3:4	3:53	2	const int	dst_linesize
op	3:27	0:0	2	=
water	3:29	0:0	2	out
op	3:32	0:0	2	->
water	3:34	0:0	2	linesize
op	3:42	0:0	2	[
water	3:43	0:0	2	component
op	3:52	0:0	2	]
decl	4:4	4:41	2	const int	bg
op	4:17	0:0	2	=
water	4:19	0:0	2	s
op	4:20	0:0	2	->
water	4:22	0:0	2	bg_color
op	4:30	0:0	2	[
water	4:31	0:0	2	component
op	4:40	0:0	2	]
decl	5:4	5:60	2	const int	is_chroma
op	5:24	0:0	2	=
water	5:26	0:0	2	(
water	5:27	0:0	2	component
op	5:37	0:0	2	==
water	5:40	0:0	2	1
op	5:42	0:0	2	||
water	5:45	0:0	2	component
op	5:55	0:0	2	==
water	5:58	0:0	2	2
water	5:59	0:0	2	)
decl	6:4	6:64	2	const int	shift_w
op	6:22	0:0	2	=
water	6:24	0:0	2	(
water	6:25	0:0	2	is_chroma
water	6:35	0:0	2	?
water	6:37	0:0	2	s
op	6:38	0:0	2	->
water	6:40	0:0	2	desc
op	6:44	0:0	2	->
water	6:46	0:0	2	log2_chroma_w
water	6:60	0:0	2	:
water	6:62	0:0	2	0
water	6:63	0:0	2	)
decl	7:4	7:64	2	const int	shift_h
op	7:22	0:0	2	=
water	7:24	0:0	2	(
water	7:25	0:0	2	is_chroma
water	7:35	0:0	2	?
water	7:37	0:0	2	s
op	7:38	0:0	2	->
water	7:40	0:0	2	desc
op	7:44	0:0	2	->
water	7:46	0:0	2	log2_chroma_h
water	7:60	0:0	2	:
water	7:62	0:0	2	0
water	7:63	0:0	2	)
decl	8:4	8:58	2	const int	dst_h
op	8:20	0:0	2	=
call	8:22	8:57	3	FF_CEIL_RSHIFT
arg	8:37	8:48	4	out->height
water	8:37	0:0	5	out
op	8:40	0:0	5	->
water	8:42	0:0	5	height
arg	8:50	8:57	4	shift_h
water	8:50	0:0	5	shift_h
decl	9:4	9:57	2	const int	dst_w
op	9:20	0:0	2	=
call	9:22	9:56	3	FF_CEIL_RSHIFT
arg	9:37	9:47	4	out->width
water	9:37	0:0	5	out
op	9:40	0:0	5	->
water	9:42	0:0	5	width
arg	9:49	9:56	4	shift_w
water	9:49	0:0	5	shift_w
decl	10:4	10:38	2	const int	start
op	10:20	0:0	2	=
water	10:22	0:0	2	s
op	10:23	0:0	2	->
water	10:25	0:0	2	estart
op	10:31	0:0	2	[
water	10:32	0:0	2	plane
op	10:37	0:0	2	]
decl	11:4	11:34	2	const int	end
op	11:18	0:0	2	=
water	11:20	0:0	2	s
op	11:21	0:0	2	->
water	11:23	0:0	2	eend
op	11:27	0:0	2	[
water	11:28	0:0	2	plane
op	11:33	0:0	2	]
decl	12:4	12:41	2	int	*emax
op	12:14	0:0	2	=
water	12:16	0:0	2	s
op	12:17	0:0	2	->
water	12:19	0:0	2	emax
op	12:23	0:0	2	[
water	12:24	0:0	2	plane
op	12:29	0:0	2	]
op	12:30	0:0	2	[
water	12:31	0:0	2	component
op	12:40	0:0	2	]
decl	13:4	13:41	2	int	*emin
op	13:14	0:0	2	=
water	13:16	0:0	2	s
op	13:17	0:0	2	->
water	13:19	0:0	2	emin
op	13:23	0:0	2	[
water	13:24	0:0	2	plane
op	13:29	0:0	2	]
op	13:30	0:0	2	[
water	13:31	0:0	2	component
op	13:40	0:0	2	]
decl	14:4	14:16	2	uint8_t	*dst
decl	15:4	15:12	2	int	x
water	15:9	0:0	2	,
decl	15:4	15:12	2	int	y
if	16:4	41:4	2	(s -> mode)
cond	16:8	16:11	3	s -> mode
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	mode
stmts	16:17	41:4	3	
water	16:17	0:0	4	{
for	17:8	32:8	4	(x = 0 ;x < dst_w;x ++)
forinit	17:13	17:18	5	x = 0 ;
water	17:13	0:0	6	x
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:24	5	x < dst_w
water	17:20	0:0	6	x
op	17:22	0:0	6	<
water	17:24	0:0	6	dst_w
forexpr	17:31	17:32	5	x ++
water	17:31	0:0	6	x
op	17:32	0:0	6	++
stmts	17:36	32:8	5	
water	17:36	0:0	6	{
for	18:12	24:12	6	(y = start ;y < end && y < emin [ x ];y ++)
forinit	18:17	18:26	7	y = start ;
water	18:17	0:0	8	y
op	18:19	0:0	8	=
water	18:21	0:0	8	start
water	18:26	0:0	8	;
cond	18:28	18:49	7	y < end && y < emin [ x ]
water	18:28	0:0	8	y
op	18:30	0:0	8	<
water	18:32	0:0	8	end
op	18:36	0:0	8	&&
water	18:39	0:0	8	y
op	18:41	0:0	8	<
water	18:43	0:0	8	emin
op	18:47	0:0	8	[
water	18:48	0:0	8	x
op	18:49	0:0	8	]
forexpr	18:52	18:53	7	y ++
water	18:52	0:0	8	y
op	18:53	0:0	8	++
stmts	18:57	24:12	7	
water	18:57	0:0	8	{
water	19:16	0:0	8	dst
op	19:20	0:0	8	=
water	19:22	0:0	8	out
op	19:25	0:0	8	->
water	19:27	0:0	8	data
op	19:31	0:0	8	[
water	19:32	0:0	8	component
op	19:41	0:0	8	]
op	19:43	0:0	8	+
water	19:45	0:0	8	y
op	19:47	0:0	8	*
water	19:49	0:0	8	dst_linesize
op	19:62	0:0	8	+
water	19:64	0:0	8	x
water	19:65	0:0	8	;
if	20:16	23:16	8	(dst [ 0 ] != bg)
cond	20:20	20:30	9	dst [ 0 ] != bg
water	20:20	0:0	10	dst
op	20:23	0:0	10	[
water	20:24	0:0	10	0
op	20:25	0:0	10	]
op	20:27	0:0	10	!=
water	20:30	0:0	10	bg
stmts	20:34	23:16	9	
water	20:34	0:0	10	{
water	21:20	0:0	10	emin
op	21:24	0:0	10	[
water	21:25	0:0	10	x
op	21:26	0:0	10	]
op	21:28	0:0	10	=
water	21:30	0:0	10	y
water	21:31	0:0	10	;
break	22:20	22:25	10	
water	23:16	0:0	10	}
water	24:12	0:0	8	}
for	25:12	31:12	6	(y = end - 1 ;y >= start && y >= emax [ x ];y --)
forinit	25:17	25:28	7	y = end - 1 ;
water	25:17	0:0	8	y
op	25:19	0:0	8	=
water	25:21	0:0	8	end
op	25:25	0:0	8	-
water	25:27	0:0	8	1
water	25:28	0:0	8	;
cond	25:30	25:55	7	y >= start && y >= emax [ x ]
water	25:30	0:0	8	y
op	25:32	0:0	8	>=
water	25:35	0:0	8	start
op	25:41	0:0	8	&&
water	25:44	0:0	8	y
op	25:46	0:0	8	>=
water	25:49	0:0	8	emax
op	25:53	0:0	8	[
water	25:54	0:0	8	x
op	25:55	0:0	8	]
forexpr	25:58	25:59	7	y --
water	25:58	0:0	8	y
op	25:59	0:0	8	--
stmts	25:63	31:12	7	
water	25:63	0:0	8	{
water	26:16	0:0	8	dst
op	26:20	0:0	8	=
water	26:22	0:0	8	out
op	26:25	0:0	8	->
water	26:27	0:0	8	data
op	26:31	0:0	8	[
water	26:32	0:0	8	component
op	26:41	0:0	8	]
op	26:43	0:0	8	+
water	26:45	0:0	8	y
op	26:47	0:0	8	*
water	26:49	0:0	8	dst_linesize
op	26:62	0:0	8	+
water	26:64	0:0	8	x
water	26:65	0:0	8	;
if	27:16	30:16	8	(dst [ 0 ] != bg)
cond	27:20	27:30	9	dst [ 0 ] != bg
water	27:20	0:0	10	dst
op	27:23	0:0	10	[
water	27:24	0:0	10	0
op	27:25	0:0	10	]
op	27:27	0:0	10	!=
water	27:30	0:0	10	bg
stmts	27:34	30:16	9	
water	27:34	0:0	10	{
water	28:20	0:0	10	emax
op	28:24	0:0	10	[
water	28:25	0:0	10	x
op	28:26	0:0	10	]
op	28:28	0:0	10	=
water	28:30	0:0	10	y
water	28:31	0:0	10	;
break	29:20	29:25	10	
water	30:16	0:0	10	}
water	31:12	0:0	8	}
water	32:8	0:0	6	}
if	33:8	34:54	4	(s -> envelope == 3)
cond	33:12	33:27	5	s -> envelope == 3
water	33:12	0:0	6	s
op	33:13	0:0	6	->
water	33:15	0:0	6	envelope
op	33:24	0:0	6	==
water	33:27	0:0	6	3
stmts	34:12	34:54	5	
call	34:12	34:53	6	envelope_instant
arg	34:29	34:30	7	s
water	34:29	0:0	8	s
arg	34:32	34:35	7	out
water	34:32	0:0	8	out
arg	34:37	34:42	7	plane
water	34:37	0:0	8	plane
arg	34:44	34:53	7	component
water	34:44	0:0	8	component
water	34:54	0:0	6	;
for	35:8	40:8	4	(x = 0 ;x < dst_w;x ++)
forinit	35:13	35:18	5	x = 0 ;
water	35:13	0:0	6	x
op	35:15	0:0	6	=
water	35:17	0:0	6	0
water	35:18	0:0	6	;
cond	35:20	35:24	5	x < dst_w
water	35:20	0:0	6	x
op	35:22	0:0	6	<
water	35:24	0:0	6	dst_w
forexpr	35:31	35:32	5	x ++
water	35:31	0:0	6	x
op	35:32	0:0	6	++
stmts	35:36	40:8	5	
water	35:36	0:0	6	{
water	36:12	0:0	6	dst
op	36:16	0:0	6	=
water	36:18	0:0	6	out
op	36:21	0:0	6	->
water	36:23	0:0	6	data
op	36:27	0:0	6	[
water	36:28	0:0	6	component
op	36:37	0:0	6	]
op	36:39	0:0	6	+
water	36:41	0:0	6	emin
op	36:45	0:0	6	[
water	36:46	0:0	6	x
op	36:47	0:0	6	]
op	36:49	0:0	6	*
water	36:51	0:0	6	dst_linesize
op	36:64	0:0	6	+
water	36:66	0:0	6	x
water	36:67	0:0	6	;
water	37:12	0:0	6	dst
op	37:15	0:0	6	[
water	37:16	0:0	6	0
op	37:17	0:0	6	]
op	37:19	0:0	6	=
water	37:21	0:0	6	255
water	37:24	0:0	6	;
water	38:12	0:0	6	dst
op	38:16	0:0	6	=
water	38:18	0:0	6	out
op	38:21	0:0	6	->
water	38:23	0:0	6	data
op	38:27	0:0	6	[
water	38:28	0:0	6	component
op	38:37	0:0	6	]
op	38:39	0:0	6	+
water	38:41	0:0	6	emax
op	38:45	0:0	6	[
water	38:46	0:0	6	x
op	38:47	0:0	6	]
op	38:49	0:0	6	*
water	38:51	0:0	6	dst_linesize
op	38:64	0:0	6	+
water	38:66	0:0	6	x
water	38:67	0:0	6	;
water	39:12	0:0	6	dst
op	39:15	0:0	6	[
water	39:16	0:0	6	0
op	39:17	0:0	6	]
op	39:19	0:0	6	=
water	39:21	0:0	6	255
water	39:24	0:0	6	;
water	40:8	0:0	6	}
water	41:4	0:0	4	}
else	41:6	65:4	2
stmts	41:11	65:4	3	
water	41:11	0:0	4	{
for	42:8	56:8	4	(y = 0 ;y < dst_h;y ++)
forinit	42:13	42:18	5	y = 0 ;
water	42:13	0:0	6	y
op	42:15	0:0	6	=
water	42:17	0:0	6	0
water	42:18	0:0	6	;
cond	42:20	42:24	5	y < dst_h
water	42:20	0:0	6	y
op	42:22	0:0	6	<
water	42:24	0:0	6	dst_h
forexpr	42:31	42:32	5	y ++
water	42:31	0:0	6	y
op	42:32	0:0	6	++
stmts	42:36	56:8	5	
water	42:36	0:0	6	{
water	43:12	0:0	6	dst
op	43:16	0:0	6	=
water	43:18	0:0	6	out
op	43:21	0:0	6	->
water	43:23	0:0	6	data
op	43:27	0:0	6	[
water	43:28	0:0	6	component
op	43:37	0:0	6	]
op	43:39	0:0	6	+
water	43:41	0:0	6	y
op	43:43	0:0	6	*
water	43:45	0:0	6	dst_linesize
water	43:57	0:0	6	;
for	44:12	49:12	6	(x = start ;x < end && x < emin [ y ];x ++)
forinit	44:17	44:26	7	x = start ;
water	44:17	0:0	8	x
op	44:19	0:0	8	=
water	44:21	0:0	8	start
water	44:26	0:0	8	;
cond	44:28	44:49	7	x < end && x < emin [ y ]
water	44:28	0:0	8	x
op	44:30	0:0	8	<
water	44:32	0:0	8	end
op	44:36	0:0	8	&&
water	44:39	0:0	8	x
op	44:41	0:0	8	<
water	44:43	0:0	8	emin
op	44:47	0:0	8	[
water	44:48	0:0	8	y
op	44:49	0:0	8	]
forexpr	44:52	44:53	7	x ++
water	44:52	0:0	8	x
op	44:53	0:0	8	++
stmts	44:57	49:12	7	
water	44:57	0:0	8	{
if	45:16	48:16	8	(dst [ x ] != bg)
cond	45:20	45:30	9	dst [ x ] != bg
water	45:20	0:0	10	dst
op	45:23	0:0	10	[
water	45:24	0:0	10	x
op	45:25	0:0	10	]
op	45:27	0:0	10	!=
water	45:30	0:0	10	bg
stmts	45:34	48:16	9	
water	45:34	0:0	10	{
water	46:20	0:0	10	emin
op	46:24	0:0	10	[
water	46:25	0:0	10	y
op	46:26	0:0	10	]
op	46:28	0:0	10	=
water	46:30	0:0	10	x
water	46:31	0:0	10	;
break	47:20	47:25	10	
water	48:16	0:0	10	}
water	49:12	0:0	8	}
for	50:12	55:12	6	(x = end - 1 ;x >= start && x >= emax [ y ];x --)
forinit	50:17	50:28	7	x = end - 1 ;
water	50:17	0:0	8	x
op	50:19	0:0	8	=
water	50:21	0:0	8	end
op	50:25	0:0	8	-
water	50:27	0:0	8	1
water	50:28	0:0	8	;
cond	50:30	50:55	7	x >= start && x >= emax [ y ]
water	50:30	0:0	8	x
op	50:32	0:0	8	>=
water	50:35	0:0	8	start
op	50:41	0:0	8	&&
water	50:44	0:0	8	x
op	50:46	0:0	8	>=
water	50:49	0:0	8	emax
op	50:53	0:0	8	[
water	50:54	0:0	8	y
op	50:55	0:0	8	]
forexpr	50:58	50:59	7	x --
water	50:58	0:0	8	x
op	50:59	0:0	8	--
stmts	50:63	55:12	7	
water	50:63	0:0	8	{
if	51:16	54:16	8	(dst [ x ] != bg)
cond	51:20	51:30	9	dst [ x ] != bg
water	51:20	0:0	10	dst
op	51:23	0:0	10	[
water	51:24	0:0	10	x
op	51:25	0:0	10	]
op	51:27	0:0	10	!=
water	51:30	0:0	10	bg
stmts	51:34	54:16	9	
water	51:34	0:0	10	{
water	52:20	0:0	10	emax
op	52:24	0:0	10	[
water	52:25	0:0	10	y
op	52:26	0:0	10	]
op	52:28	0:0	10	=
water	52:30	0:0	10	x
water	52:31	0:0	10	;
break	53:20	53:25	10	
water	54:16	0:0	10	}
water	55:12	0:0	8	}
water	56:8	0:0	6	}
if	57:8	58:54	4	(s -> envelope == 3)
cond	57:12	57:27	5	s -> envelope == 3
water	57:12	0:0	6	s
op	57:13	0:0	6	->
water	57:15	0:0	6	envelope
op	57:24	0:0	6	==
water	57:27	0:0	6	3
stmts	58:12	58:54	5	
call	58:12	58:53	6	envelope_instant
arg	58:29	58:30	7	s
water	58:29	0:0	8	s
arg	58:32	58:35	7	out
water	58:32	0:0	8	out
arg	58:37	58:42	7	plane
water	58:37	0:0	8	plane
arg	58:44	58:53	7	component
water	58:44	0:0	8	component
water	58:54	0:0	6	;
for	59:8	64:8	4	(y = 0 ;y < dst_h;y ++)
forinit	59:13	59:18	5	y = 0 ;
water	59:13	0:0	6	y
op	59:15	0:0	6	=
water	59:17	0:0	6	0
water	59:18	0:0	6	;
cond	59:20	59:24	5	y < dst_h
water	59:20	0:0	6	y
op	59:22	0:0	6	<
water	59:24	0:0	6	dst_h
forexpr	59:31	59:32	5	y ++
water	59:31	0:0	6	y
op	59:32	0:0	6	++
stmts	59:36	64:8	5	
water	59:36	0:0	6	{
water	60:12	0:0	6	dst
op	60:16	0:0	6	=
water	60:18	0:0	6	out
op	60:21	0:0	6	->
water	60:23	0:0	6	data
op	60:27	0:0	6	[
water	60:28	0:0	6	component
op	60:37	0:0	6	]
op	60:39	0:0	6	+
water	60:41	0:0	6	y
op	60:43	0:0	6	*
water	60:45	0:0	6	dst_linesize
op	60:58	0:0	6	+
water	60:60	0:0	6	emin
op	60:64	0:0	6	[
water	60:65	0:0	6	y
op	60:66	0:0	6	]
water	60:67	0:0	6	;
water	61:12	0:0	6	dst
op	61:15	0:0	6	[
water	61:16	0:0	6	0
op	61:17	0:0	6	]
op	61:19	0:0	6	=
water	61:21	0:0	6	255
water	61:24	0:0	6	;
water	62:12	0:0	6	dst
op	62:16	0:0	6	=
water	62:18	0:0	6	out
op	62:21	0:0	6	->
water	62:23	0:0	6	data
op	62:27	0:0	6	[
water	62:28	0:0	6	component
op	62:37	0:0	6	]
op	62:39	0:0	6	+
water	62:41	0:0	6	y
op	62:43	0:0	6	*
water	62:45	0:0	6	dst_linesize
op	62:58	0:0	6	+
water	62:60	0:0	6	emax
op	62:64	0:0	6	[
water	62:65	0:0	6	y
op	62:66	0:0	6	]
water	62:67	0:0	6	;
water	63:12	0:0	6	dst
op	63:15	0:0	6	[
water	63:16	0:0	6	0
op	63:17	0:0	6	]
op	63:19	0:0	6	=
water	63:21	0:0	6	255
water	63:24	0:0	6	;
water	64:8	0:0	6	}
water	65:4	0:0	4	}
