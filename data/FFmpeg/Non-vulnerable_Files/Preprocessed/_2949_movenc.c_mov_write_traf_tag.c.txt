func	1:0	35:0	0	static int	mov_write_traf_tag
params	1:29	0:0	1	
param	1:30	1:45	2	AVIOContext *	pb
param	1:47	1:65	2	MOVMuxContext *	mov
param	2:30	2:45	2	MOVTrack *	track
param	2:47	2:66	2	int64_t	moof_offset
param	3:30	3:43	2	int	moof_size
stmnts	0:0	34:31	1	
decl	5:4	5:31	2	int64_t	pos
op	5:16	0:0	2	=
call	5:18	5:30	3	avio_tell
arg	5:28	5:30	4	pb
water	5:28	0:0	5	pb
decl	6:4	6:20	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:20	2	int	start
op	6:17	0:0	2	=
water	6:19	0:0	2	0
call	7:4	7:19	2	avio_wb32
arg	7:14	7:16	3	pb
water	7:14	0:0	4	pb
arg	7:18	7:19	3	0
water	7:18	0:0	4	0
water	7:20	0:0	2	;
call	8:4	8:27	2	ffio_wfourcc
arg	8:17	8:19	3	pb
water	8:17	0:0	4	pb
arg	8:21	8:27	3	"traf"
water	8:21	0:0	4	"traf"
water	8:28	0:0	2	;
call	9:4	9:50	2	mov_write_tfhd_tag
arg	9:23	9:25	3	pb
water	9:23	0:0	4	pb
arg	9:27	9:30	3	mov
water	9:27	0:0	4	mov
arg	9:32	9:37	3	track
water	9:32	0:0	4	track
arg	9:39	9:50	3	moof_offset
water	9:39	0:0	4	moof_offset
water	9:51	0:0	2	;
if	10:4	11:37	2	(mov -> mode != MODE_ISM)
cond	10:8	10:21	3	mov -> mode != MODE_ISM
water	10:8	0:0	4	mov
op	10:11	0:0	4	->
water	10:13	0:0	4	mode
op	10:18	0:0	4	!=
water	10:21	0:0	4	MODE_ISM
stmts	11:8	11:37	3	
call	11:8	11:36	4	mov_write_tfdt_tag
arg	11:27	11:29	5	pb
water	11:27	0:0	6	pb
arg	11:31	11:36	5	track
water	11:31	0:0	6	track
water	11:37	0:0	4	;
for	12:4	17:4	2	(i = 1 ;i < track -> entry;i ++)
forinit	12:9	12:14	3	i = 1 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	1
water	12:14	0:0	4	;
cond	12:16	12:27	3	i < track -> entry
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	track
op	12:25	0:0	4	->
water	12:27	0:0	4	entry
forexpr	12:34	12:35	3	i ++
water	12:34	0:0	4	i
op	12:35	0:0	4	++
stmts	12:39	17:4	3	
water	12:39	0:0	4	{
if	13:8	16:8	4	(track -> cluster [ i ] . pos != track -> cluster [ i - 1 ] . pos + track -> cluster [ i - 1 ] . size)
cond	13:12	13:87	5	track -> cluster [ i ] . pos != track -> cluster [ i - 1 ] . pos + track -> cluster [ i - 1 ] . size
water	13:12	0:0	6	track
op	13:17	0:0	6	->
water	13:19	0:0	6	cluster
op	13:26	0:0	6	[
water	13:27	0:0	6	i
op	13:28	0:0	6	]
op	13:29	0:0	6	.
water	13:30	0:0	6	pos
op	13:34	0:0	6	!=
water	13:37	0:0	6	track
op	13:42	0:0	6	->
water	13:44	0:0	6	cluster
op	13:51	0:0	6	[
water	13:52	0:0	6	i
op	13:54	0:0	6	-
water	13:56	0:0	6	1
op	13:57	0:0	6	]
op	13:58	0:0	6	.
water	13:59	0:0	6	pos
op	13:63	0:0	6	+
water	13:65	0:0	6	track
op	13:70	0:0	6	->
water	13:72	0:0	6	cluster
op	13:79	0:0	6	[
water	13:80	0:0	6	i
op	13:82	0:0	6	-
water	13:84	0:0	6	1
op	13:85	0:0	6	]
op	13:86	0:0	6	.
water	13:87	0:0	6	size
stmts	13:93	16:8	5	
water	13:93	0:0	6	{
call	14:12	14:66	6	mov_write_trun_tag
arg	14:31	14:33	7	pb
water	14:31	0:0	8	pb
arg	14:35	14:38	7	mov
water	14:35	0:0	8	mov
arg	14:40	14:45	7	track
water	14:40	0:0	8	track
arg	14:47	14:56	7	moof_size
water	14:47	0:0	8	moof_size
arg	14:58	14:63	7	start
water	14:58	0:0	8	start
arg	14:65	14:66	7	i
water	14:65	0:0	8	i
water	14:67	0:0	6	;
water	15:12	0:0	6	start
op	15:18	0:0	6	=
water	15:20	0:0	6	i
water	15:21	0:0	6	;
water	16:8	0:0	6	}
water	17:4	0:0	4	}
call	18:4	18:69	2	mov_write_trun_tag
arg	18:23	18:25	3	pb
water	18:23	0:0	4	pb
arg	18:27	18:30	3	mov
water	18:27	0:0	4	mov
arg	18:32	18:37	3	track
water	18:32	0:0	4	track
arg	18:39	18:48	3	moof_size
water	18:39	0:0	4	moof_size
arg	18:50	18:55	3	start
water	18:50	0:0	4	start
arg	18:57	18:69	3	track->entry
water	18:57	0:0	4	track
op	18:62	0:0	4	->
water	18:64	0:0	4	entry
water	18:70	0:0	2	;
if	19:4	33:4	2	(mov -> mode == MODE_ISM)
cond	19:8	19:21	3	mov -> mode == MODE_ISM
water	19:8	0:0	4	mov
op	19:11	0:0	4	->
water	19:13	0:0	4	mode
op	19:18	0:0	4	==
water	19:21	0:0	4	MODE_ISM
stmts	19:31	33:4	3	
water	19:31	0:0	4	{
call	20:8	20:36	4	mov_write_tfxd_tag
arg	20:27	20:29	5	pb
water	20:27	0:0	6	pb
arg	20:31	20:36	5	track
water	20:31	0:0	6	track
water	20:37	0:0	4	;
if	21:8	32:8	4	(mov -> ism_lookahead)
cond	21:12	21:17	5	mov -> ism_lookahead
water	21:12	0:0	6	mov
op	21:15	0:0	6	->
water	21:17	0:0	6	ism_lookahead
stmts	21:32	32:8	5	
water	21:32	0:0	6	{
decl	22:12	22:62	6	int	i
water	22:17	0:0	6	,
decl	22:12	22:62	6	int	size
op	22:24	0:0	6	=
water	22:26	0:0	6	16
op	22:29	0:0	6	+
water	22:31	0:0	6	4
op	22:33	0:0	6	+
water	22:35	0:0	6	1
op	22:37	0:0	6	+
water	22:39	0:0	6	16
op	22:42	0:0	6	*
water	22:44	0:0	6	mov
op	22:47	0:0	6	->
water	22:49	0:0	6	ism_lookahead
if	23:12	27:12	6	(track -> nb_frag_info > 0)
cond	23:16	23:38	7	track -> nb_frag_info > 0
water	23:16	0:0	8	track
op	23:21	0:0	8	->
water	23:23	0:0	8	nb_frag_info
op	23:36	0:0	8	>
water	23:38	0:0	8	0
stmts	23:41	27:12	7	
water	23:41	0:0	8	{
decl	24:16	24:82	8	MOVFragmentInfo	*info
op	24:38	0:0	8	=
op	24:40	0:0	8	&
water	24:41	0:0	8	track
op	24:46	0:0	8	->
water	24:48	0:0	8	frag_info
op	24:57	0:0	8	[
water	24:58	0:0	8	track
op	24:63	0:0	8	->
water	24:65	0:0	8	nb_frag_info
op	24:78	0:0	8	-
water	24:80	0:0	8	1
op	24:81	0:0	8	]
if	25:16	26:53	8	(! info -> tfrf_offset)
cond	25:20	25:27	9	! info -> tfrf_offset
op	25:20	0:0	10	!
water	25:21	0:0	10	info
op	25:25	0:0	10	->
water	25:27	0:0	10	tfrf_offset
stmts	26:20	26:53	9	
water	26:20	0:0	10	info
op	26:24	0:0	10	->
water	26:26	0:0	10	tfrf_offset
op	26:38	0:0	10	=
call	26:40	26:52	10	avio_tell
arg	26:50	26:52	11	pb
water	26:50	0:0	12	pb
water	26:53	0:0	10	;
water	27:12	0:0	8	}
call	28:12	28:34	6	avio_wb32
arg	28:22	28:24	7	pb
water	28:22	0:0	8	pb
arg	28:26	28:34	7	8+size
water	28:26	0:0	8	8
op	28:28	0:0	8	+
water	28:30	0:0	8	size
water	28:35	0:0	6	;
call	29:12	29:35	6	ffio_wfourcc
arg	29:25	29:27	7	pb
water	29:25	0:0	8	pb
arg	29:29	29:35	7	"free"
water	29:29	0:0	8	"free"
water	29:36	0:0	6	;
for	30:12	31:30	6	(i = 0 ;i < size;i ++)
forinit	30:17	30:22	7	i = 0 ;
water	30:17	0:0	8	i
op	30:19	0:0	8	=
water	30:21	0:0	8	0
water	30:22	0:0	8	;
cond	30:24	30:28	7	i < size
water	30:24	0:0	8	i
op	30:26	0:0	8	<
water	30:28	0:0	8	size
forexpr	30:34	30:35	7	i ++
water	30:34	0:0	8	i
op	30:35	0:0	8	++
stmts	31:16	31:30	7	
call	31:16	31:29	8	avio_w8
arg	31:24	31:26	9	pb
water	31:24	0:0	10	pb
arg	31:28	31:29	9	0
water	31:28	0:0	10	0
water	31:30	0:0	8	;
water	32:8	0:0	6	}
water	33:4	0:0	4	}
return	34:4	34:31	2	update_size(pb,pos)
call	34:11	34:30	3	update_size
arg	34:23	34:25	4	pb
water	34:23	0:0	5	pb
arg	34:27	34:30	4	pos
water	34:27	0:0	5	pos
