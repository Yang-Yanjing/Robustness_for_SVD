func	1:0	59:0	0	static int	filter_slice8
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
param	1:47	1:56	2	void *	arg
param	1:58	1:67	2	int	jobnr
param	1:69	1:80	2	int	nb_jobs
stmnts	0:0	58:12	1	
decl	3:4	3:36	2	ATADenoiseContext	*s
op	3:25	0:0	2	=
water	3:27	0:0	2	ctx
op	3:30	0:0	2	->
water	3:32	0:0	2	priv
decl	4:4	4:24	2	ThreadData	*td
op	4:19	0:0	2	=
water	4:21	0:0	2	arg
decl	5:4	5:24	2	AVFrame	*in
op	5:16	0:0	2	=
water	5:18	0:0	2	td
op	5:20	0:0	2	->
water	5:22	0:0	2	in
decl	6:4	6:26	2	AVFrame	*out
op	6:17	0:0	2	=
water	6:19	0:0	2	td
op	6:21	0:0	2	->
water	6:23	0:0	2	out
decl	7:4	7:28	2	const int	size
op	7:19	0:0	2	=
water	7:21	0:0	2	s
op	7:22	0:0	2	->
water	7:24	0:0	2	size
decl	8:4	8:26	2	const int	mid
op	8:18	0:0	2	=
water	8:20	0:0	2	s
op	8:21	0:0	2	->
water	8:23	0:0	2	mid
decl	9:4	9:21	2	int	p
water	9:9	0:0	2	,
decl	9:4	9:21	2	int	x
water	9:12	0:0	2	,
decl	9:4	9:21	2	int	y
water	9:15	0:0	2	,
decl	9:4	9:21	2	int	i
water	9:18	0:0	2	,
decl	9:4	9:21	2	int	j
for	10:4	57:4	2	(p = 0 ;p < s -> nb_planes;p ++)
forinit	10:9	10:14	3	p = 0 ;
water	10:9	0:0	4	p
op	10:11	0:0	4	=
water	10:13	0:0	4	0
water	10:14	0:0	4	;
cond	10:16	10:23	3	p < s -> nb_planes
water	10:16	0:0	4	p
op	10:18	0:0	4	<
water	10:20	0:0	4	s
op	10:21	0:0	4	->
water	10:23	0:0	4	nb_planes
forexpr	10:34	10:35	3	p ++
water	10:34	0:0	4	p
op	10:35	0:0	4	++
stmts	10:39	57:4	3	
water	10:39	0:0	4	{
decl	11:8	11:39	4	const int	h
op	11:20	0:0	4	=
water	11:22	0:0	4	s
op	11:23	0:0	4	->
water	11:25	0:0	4	planeheight
op	11:36	0:0	4	[
water	11:37	0:0	4	p
op	11:38	0:0	4	]
decl	12:8	12:38	4	const int	w
op	12:20	0:0	4	=
water	12:22	0:0	4	s
op	12:23	0:0	4	->
water	12:25	0:0	4	planewidth
op	12:35	0:0	4	[
water	12:36	0:0	4	p
op	12:37	0:0	4	]
decl	13:8	13:53	4	const int	slice_start
op	13:30	0:0	4	=
water	13:32	0:0	4	(
water	13:33	0:0	4	h
op	13:35	0:0	4	*
water	13:37	0:0	4	jobnr
water	13:42	0:0	4	)
op	13:44	0:0	4	/
water	13:46	0:0	4	nb_jobs
decl	14:8	14:55	4	const int	slice_end
op	14:28	0:0	4	=
water	14:30	0:0	4	(
water	14:31	0:0	4	h
op	14:33	0:0	4	*
water	14:35	0:0	4	(
water	14:36	0:0	4	jobnr
op	14:41	0:0	4	+
water	14:42	0:0	4	1
water	14:43	0:0	4	)
water	14:44	0:0	4	)
op	14:46	0:0	4	/
water	14:48	0:0	4	nb_jobs
decl	15:8	15:72	4	const uint8_t	*src
op	15:27	0:0	4	=
water	15:29	0:0	4	in
op	15:31	0:0	4	->
water	15:33	0:0	4	data
op	15:37	0:0	4	[
water	15:38	0:0	4	p
op	15:39	0:0	4	]
op	15:41	0:0	4	+
water	15:43	0:0	4	slice_start
op	15:55	0:0	4	*
water	15:57	0:0	4	in
op	15:59	0:0	4	->
water	15:61	0:0	4	linesize
op	15:69	0:0	4	[
water	15:70	0:0	4	p
op	15:71	0:0	4	]
decl	16:8	16:68	4	uint8_t	*dst
op	16:21	0:0	4	=
water	16:23	0:0	4	out
op	16:26	0:0	4	->
water	16:28	0:0	4	data
op	16:32	0:0	4	[
water	16:33	0:0	4	p
op	16:34	0:0	4	]
op	16:36	0:0	4	+
water	16:38	0:0	4	slice_start
op	16:50	0:0	4	*
water	16:52	0:0	4	out
op	16:55	0:0	4	->
water	16:57	0:0	4	linesize
op	16:65	0:0	4	[
water	16:66	0:0	4	p
op	16:67	0:0	4	]
decl	17:8	17:35	4	const int	thra
op	17:23	0:0	4	=
water	17:25	0:0	4	s
op	17:26	0:0	4	->
water	17:28	0:0	4	thra
op	17:32	0:0	4	[
water	17:33	0:0	4	p
op	17:34	0:0	4	]
decl	18:8	18:35	4	const int	thrb
op	18:23	0:0	4	=
water	18:25	0:0	4	s
op	18:26	0:0	4	->
water	18:28	0:0	4	thrb
op	18:32	0:0	4	[
water	18:33	0:0	4	p
op	18:34	0:0	4	]
decl	19:8	19:59	4	const uint8_t	**data
op	19:29	0:0	4	=
water	19:31	0:0	4	(
water	19:32	0:0	4	const
water	19:38	0:0	4	uint8_t
op	19:46	0:0	4	*
op	19:47	0:0	4	*
water	19:48	0:0	4	)
water	19:49	0:0	4	s
op	19:50	0:0	4	->
water	19:52	0:0	4	data
op	19:56	0:0	4	[
water	19:57	0:0	4	p
op	19:58	0:0	4	]
decl	20:8	20:57	4	const int	*linesize
op	20:28	0:0	4	=
water	20:30	0:0	4	(
water	20:31	0:0	4	const
water	20:37	0:0	4	int
op	20:41	0:0	4	*
water	20:42	0:0	4	)
water	20:43	0:0	4	s
op	20:44	0:0	4	->
water	20:46	0:0	4	linesize
op	20:54	0:0	4	[
water	20:55	0:0	4	p
op	20:56	0:0	4	]
decl	21:8	21:33	4	const uint8_t	*srcf[SIZE]
for	22:8	23:57	4	(i = 0 ;i < size;i ++)
forinit	22:13	22:18	5	i = 0 ;
water	22:13	0:0	6	i
op	22:15	0:0	6	=
water	22:17	0:0	6	0
water	22:18	0:0	6	;
cond	22:20	22:24	5	i < size
water	22:20	0:0	6	i
op	22:22	0:0	6	<
water	22:24	0:0	6	size
forexpr	22:30	22:31	5	i ++
water	22:30	0:0	6	i
op	22:31	0:0	6	++
stmts	23:12	23:57	5	
water	23:12	0:0	6	srcf
op	23:16	0:0	6	[
water	23:17	0:0	6	i
op	23:18	0:0	6	]
op	23:20	0:0	6	=
water	23:22	0:0	6	data
op	23:26	0:0	6	[
water	23:27	0:0	6	i
op	23:28	0:0	6	]
op	23:30	0:0	6	+
water	23:32	0:0	6	slice_start
op	23:44	0:0	6	*
water	23:46	0:0	6	linesize
op	23:54	0:0	6	[
water	23:55	0:0	6	i
op	23:56	0:0	6	]
water	23:57	0:0	6	;
for	24:8	56:8	4	(y = slice_start ;y < slice_end;y ++)
forinit	24:13	24:28	5	y = slice_start ;
water	24:13	0:0	6	y
op	24:15	0:0	6	=
water	24:17	0:0	6	slice_start
water	24:28	0:0	6	;
cond	24:30	24:34	5	y < slice_end
water	24:30	0:0	6	y
op	24:32	0:0	6	<
water	24:34	0:0	6	slice_end
forexpr	24:45	24:46	5	y ++
water	24:45	0:0	6	y
op	24:46	0:0	6	++
stmts	24:50	56:8	5	
water	24:50	0:0	6	{
for	25:12	51:12	6	(x = 0 ;x < w;x ++)
forinit	25:17	25:22	7	x = 0 ;
water	25:17	0:0	8	x
op	25:19	0:0	8	=
water	25:21	0:0	8	0
water	25:22	0:0	8	;
cond	25:24	25:28	7	x < w
water	25:24	0:0	8	x
op	25:26	0:0	8	<
water	25:28	0:0	8	w
forexpr	25:31	25:32	7	x ++
water	25:31	0:0	8	x
op	25:32	0:0	8	++
stmts	25:36	51:12	7	
water	25:36	0:0	8	{
decl	26:16	26:39	8	const int	srcx
op	26:31	0:0	8	=
water	26:33	0:0	8	src
op	26:36	0:0	8	[
water	26:37	0:0	8	x
op	26:38	0:0	8	]
water	27:16	0:0	8	unsigned
water	27:25	0:0	8	lsumdiff
op	27:34	0:0	8	=
water	27:36	0:0	8	0
water	27:37	0:0	8	,
water	27:39	0:0	8	rsumdiff
op	27:48	0:0	8	=
water	27:50	0:0	8	0
water	27:51	0:0	8	;
water	28:16	0:0	8	unsigned
water	28:25	0:0	8	ldiff
water	28:30	0:0	8	,
water	28:32	0:0	8	rdiff
water	28:37	0:0	8	;
water	29:16	0:0	8	unsigned
water	29:25	0:0	8	sum
op	29:29	0:0	8	=
water	29:31	0:0	8	srcx
water	29:35	0:0	8	;
decl	30:16	30:32	8	int	l
op	30:22	0:0	8	=
water	30:24	0:0	8	0
water	30:25	0:0	8	,
decl	30:16	30:32	8	int	r
op	30:29	0:0	8	=
water	30:31	0:0	8	0
decl	31:16	31:32	8	int	srcjx
water	31:25	0:0	8	,
decl	31:16	31:32	8	int	srcix
for	32:16	49:16	8	(j = mid - 1 , i = mid + 1 ;j >= 0 && i < size;j -- , i ++)
forinit	32:21	32:45	9	j = mid - 1 , i = mid + 1 ;
water	32:21	0:0	10	j
op	32:23	0:0	10	=
water	32:25	0:0	10	mid
op	32:29	0:0	10	-
water	32:31	0:0	10	1
water	32:32	0:0	10	,
water	32:34	0:0	10	i
op	32:36	0:0	10	=
water	32:38	0:0	10	mid
op	32:42	0:0	10	+
water	32:44	0:0	10	1
water	32:45	0:0	10	;
cond	32:47	32:61	9	j >= 0 && i < size
water	32:47	0:0	10	j
op	32:49	0:0	10	>=
water	32:52	0:0	10	0
op	32:54	0:0	10	&&
water	32:57	0:0	10	i
op	32:59	0:0	10	<
water	32:61	0:0	10	size
forexpr	32:67	32:73	9	j -- , i ++
water	32:67	0:0	10	j
op	32:68	0:0	10	--
water	32:70	0:0	10	,
water	32:72	0:0	10	i
op	32:73	0:0	10	++
stmts	32:77	49:16	9	
water	32:77	0:0	10	{
water	33:20	0:0	10	srcjx
op	33:26	0:0	10	=
water	33:28	0:0	10	srcf
op	33:32	0:0	10	[
water	33:33	0:0	10	j
op	33:34	0:0	10	]
op	33:35	0:0	10	[
water	33:36	0:0	10	x
op	33:37	0:0	10	]
water	33:38	0:0	10	;
water	34:20	0:0	10	ldiff
op	34:26	0:0	10	=
call	34:28	34:46	10	FFABS
arg	34:34	34:46	11	srcx-srcjx
water	34:34	0:0	12	srcx
op	34:39	0:0	12	-
water	34:41	0:0	12	srcjx
water	34:47	0:0	10	;
water	35:20	0:0	10	lsumdiff
op	35:29	0:0	10	+=
water	35:32	0:0	10	ldiff
water	35:37	0:0	10	;
if	36:20	38:29	10	(ldiff > thra || lsumdiff > thrb)
cond	36:24	37:35	11	ldiff > thra || lsumdiff > thrb
water	36:24	0:0	12	ldiff
op	36:30	0:0	12	>
water	36:32	0:0	12	thra
op	36:37	0:0	12	||
water	37:24	0:0	12	lsumdiff
op	37:33	0:0	12	>
water	37:35	0:0	12	thrb
stmts	38:24	38:29	11	
break	38:24	38:29	12	
water	39:20	0:0	10	l
op	39:21	0:0	10	++
water	39:23	0:0	10	;
water	40:20	0:0	10	sum
op	40:24	0:0	10	+=
water	40:27	0:0	10	srcjx
water	40:32	0:0	10	;
water	41:20	0:0	10	srcix
op	41:26	0:0	10	=
water	41:28	0:0	10	srcf
op	41:32	0:0	10	[
water	41:33	0:0	10	i
op	41:34	0:0	10	]
op	41:35	0:0	10	[
water	41:36	0:0	10	x
op	41:37	0:0	10	]
water	41:38	0:0	10	;
water	42:20	0:0	10	rdiff
op	42:26	0:0	10	=
call	42:28	42:46	10	FFABS
arg	42:34	42:46	11	srcx-srcix
water	42:34	0:0	12	srcx
op	42:39	0:0	12	-
water	42:41	0:0	12	srcix
water	42:47	0:0	10	;
water	43:20	0:0	10	rsumdiff
op	43:29	0:0	10	+=
water	43:32	0:0	10	rdiff
water	43:37	0:0	10	;
if	44:20	46:29	10	(rdiff > thra || rsumdiff > thrb)
cond	44:24	45:35	11	rdiff > thra || rsumdiff > thrb
water	44:24	0:0	12	rdiff
op	44:30	0:0	12	>
water	44:32	0:0	12	thra
op	44:37	0:0	12	||
water	45:24	0:0	12	rsumdiff
op	45:33	0:0	12	>
water	45:35	0:0	12	thrb
stmts	46:24	46:29	11	
break	46:24	46:29	12	
water	47:20	0:0	10	r
op	47:21	0:0	10	++
water	47:23	0:0	10	;
water	48:20	0:0	10	sum
op	48:24	0:0	10	+=
water	48:27	0:0	10	srcix
water	48:32	0:0	10	;
water	49:16	0:0	10	}
water	50:16	0:0	8	dst
op	50:19	0:0	8	[
water	50:20	0:0	8	x
op	50:21	0:0	8	]
op	50:23	0:0	8	=
water	50:25	0:0	8	sum
op	50:29	0:0	8	/
water	50:31	0:0	8	(
water	50:32	0:0	8	r
op	50:34	0:0	8	+
water	50:36	0:0	8	l
op	50:38	0:0	8	+
water	50:40	0:0	8	1
water	50:41	0:0	8	)
water	50:42	0:0	8	;
water	51:12	0:0	8	}
water	52:12	0:0	6	dst
op	52:16	0:0	6	+=
water	52:19	0:0	6	out
op	52:22	0:0	6	->
water	52:24	0:0	6	linesize
op	52:32	0:0	6	[
water	52:33	0:0	6	p
op	52:34	0:0	6	]
water	52:35	0:0	6	;
water	53:12	0:0	6	src
op	53:16	0:0	6	+=
water	53:19	0:0	6	in
op	53:21	0:0	6	->
water	53:23	0:0	6	linesize
op	53:31	0:0	6	[
water	53:32	0:0	6	p
op	53:33	0:0	6	]
water	53:34	0:0	6	;
for	54:12	55:38	6	(i = 0 ;i < size;i ++)
forinit	54:17	54:22	7	i = 0 ;
water	54:17	0:0	8	i
op	54:19	0:0	8	=
water	54:21	0:0	8	0
water	54:22	0:0	8	;
cond	54:24	54:28	7	i < size
water	54:24	0:0	8	i
op	54:26	0:0	8	<
water	54:28	0:0	8	size
forexpr	54:34	54:35	7	i ++
water	54:34	0:0	8	i
op	54:35	0:0	8	++
stmts	55:16	55:38	7	
water	55:16	0:0	8	srcf
op	55:20	0:0	8	[
water	55:21	0:0	8	i
op	55:22	0:0	8	]
op	55:24	0:0	8	+=
water	55:27	0:0	8	linesize
op	55:35	0:0	8	[
water	55:36	0:0	8	i
op	55:37	0:0	8	]
water	55:38	0:0	8	;
water	56:8	0:0	6	}
water	57:4	0:0	4	}
return	58:4	58:12	2	0
water	58:11	0:0	3	0
