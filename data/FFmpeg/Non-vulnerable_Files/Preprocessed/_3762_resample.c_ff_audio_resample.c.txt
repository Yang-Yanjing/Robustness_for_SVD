func	1:0	89:0	0	int	ff_audio_resample
params	1:21	0:0	1	
param	1:22	1:40	2	ResampleContext *	c
param	1:42	1:56	2	AudioData *	dst
param	1:58	1:72	2	AudioData *	src
stmnts	0:0	88:12	1	
decl	3:4	3:66	2	int	ch
water	3:10	0:0	2	,
decl	3:4	3:66	2	int	in_samples
water	3:22	0:0	2	,
decl	3:4	3:66	2	int	in_leftover
water	3:35	0:0	2	,
decl	3:4	3:66	2	int	consumed
op	3:46	0:0	2	=
water	3:48	0:0	2	0
water	3:49	0:0	2	,
decl	3:4	3:66	2	int	out_samples
op	3:63	0:0	2	=
water	3:65	0:0	2	0
decl	4:4	4:29	2	int	ret
op	4:12	0:0	2	=
call	4:14	4:28	3	AVERROR
arg	4:22	4:28	4	EINVAL
water	4:22	0:0	5	EINVAL
decl	5:4	7:49	2	int	nearest_neighbour
op	5:26	0:0	2	=
water	5:28	0:0	2	(
water	5:29	0:0	2	c
op	5:30	0:0	2	->
water	5:32	0:0	2	compensation_distance
op	5:54	0:0	2	==
water	5:57	0:0	2	0
op	5:59	0:0	2	&&
water	6:29	0:0	2	c
op	6:30	0:0	2	->
water	6:32	0:0	2	filter_length
op	6:46	0:0	2	==
water	6:49	0:0	2	1
op	6:51	0:0	2	&&
water	7:29	0:0	2	c
op	7:30	0:0	2	->
water	7:32	0:0	2	phase_shift
op	7:44	0:0	2	==
water	7:47	0:0	2	0
water	7:48	0:0	2	)
water	8:4	0:0	2	in_samples
op	8:16	0:0	2	=
water	8:18	0:0	2	src
water	8:22	0:0	2	?
water	8:24	0:0	2	src
op	8:27	0:0	2	->
water	8:29	0:0	2	nb_samples
water	8:40	0:0	2	:
water	8:42	0:0	2	0
water	8:43	0:0	2	;
water	9:4	0:0	2	in_leftover
op	9:16	0:0	2	=
water	9:18	0:0	2	c
op	9:19	0:0	2	->
water	9:21	0:0	2	buffer
op	9:27	0:0	2	->
water	9:29	0:0	2	nb_samples
water	9:39	0:0	2	;
if	11:4	15:4	2	(src)
cond	11:8	11:8	3	src
water	11:8	0:0	4	src
stmts	11:13	15:4	3	
water	11:13	0:0	4	{
water	12:8	0:0	4	ret
op	12:12	0:0	4	=
call	12:14	12:78	4	ff_audio_data_combine
arg	12:36	12:45	5	c->buffer
water	12:36	0:0	6	c
op	12:37	0:0	6	->
water	12:39	0:0	6	buffer
arg	12:47	12:58	5	in_leftover
water	12:47	0:0	6	in_leftover
arg	12:60	12:63	5	src
water	12:60	0:0	6	src
arg	12:65	12:66	5	0
water	12:65	0:0	6	0
arg	12:68	12:78	5	in_samples
water	12:68	0:0	6	in_samples
water	12:79	0:0	4	;
if	13:8	14:22	4	(ret < 0)
cond	13:12	13:18	5	ret < 0
water	13:12	0:0	6	ret
op	13:16	0:0	6	<
water	13:18	0:0	6	0
stmts	14:12	14:22	5	
return	14:12	14:22	6	ret
water	14:19	0:0	7	ret
water	15:4	0:0	4	}
else	15:6	18:4	2
stmts	15:11	18:4	3	
if	15:11	18:4	4	(in_leftover <= c -> final_padding_samples)
cond	15:15	15:33	5	in_leftover <= c -> final_padding_samples
water	15:15	0:0	6	in_leftover
op	15:27	0:0	6	<=
water	15:30	0:0	6	c
op	15:31	0:0	6	->
water	15:33	0:0	6	final_padding_samples
stmts	15:56	18:4	5	
water	15:56	0:0	6	{
return	17:8	17:16	6	0
water	17:15	0:0	7	0
water	18:4	0:0	6	}
if	19:4	34:4	2	(! c -> initial_padding_filled)
cond	19:8	19:12	3	! c -> initial_padding_filled
op	19:8	0:0	4	!
water	19:9	0:0	4	c
op	19:10	0:0	4	->
water	19:12	0:0	4	initial_padding_filled
stmts	19:36	34:4	3	
water	19:36	0:0	4	{
decl	20:8	20:70	4	int	bps
op	20:16	0:0	4	=
call	20:18	20:69	5	av_get_bytes_per_sample
arg	20:42	20:69	6	c->avr->internal_sample_fmt
water	20:42	0:0	7	c
op	20:43	0:0	7	->
water	20:45	0:0	7	avr
op	20:48	0:0	7	->
water	20:50	0:0	7	internal_sample_fmt
decl	21:8	21:13	4	int	i
if	22:8	23:20	4	(src && c -> buffer -> nb_samples < 2 * c -> padding_size)
cond	22:12	22:50	5	src && c -> buffer -> nb_samples < 2 * c -> padding_size
water	22:12	0:0	6	src
op	22:16	0:0	6	&&
water	22:19	0:0	6	c
op	22:20	0:0	6	->
water	22:22	0:0	6	buffer
op	22:28	0:0	6	->
water	22:30	0:0	6	nb_samples
op	22:41	0:0	6	<
water	22:43	0:0	6	2
op	22:45	0:0	6	*
water	22:47	0:0	6	c
op	22:48	0:0	6	->
water	22:50	0:0	6	padding_size
stmts	23:12	23:20	5	
return	23:12	23:20	6	0
water	23:19	0:0	7	0
for	24:8	32:12	4	(i = 0 ;i < c -> padding_size;i ++)
forinit	24:13	24:18	5	i = 0 ;
water	24:13	0:0	6	i
op	24:15	0:0	6	=
water	24:17	0:0	6	0
water	24:18	0:0	6	;
cond	24:20	24:27	5	i < c -> padding_size
water	24:20	0:0	6	i
op	24:22	0:0	6	<
water	24:24	0:0	6	c
op	24:25	0:0	6	->
water	24:27	0:0	6	padding_size
forexpr	24:41	24:42	5	i ++
water	24:41	0:0	6	i
op	24:42	0:0	6	++
stmts	25:12	32:12	5	
for	25:12	32:12	6	(ch = 0 ;ch < c -> buffer -> channels;ch ++)
forinit	25:17	25:23	7	ch = 0 ;
water	25:17	0:0	8	ch
op	25:20	0:0	8	=
water	25:22	0:0	8	0
water	25:23	0:0	8	;
cond	25:25	25:41	7	ch < c -> buffer -> channels
water	25:25	0:0	8	ch
op	25:28	0:0	8	<
water	25:30	0:0	8	c
op	25:31	0:0	8	->
water	25:33	0:0	8	buffer
op	25:39	0:0	8	->
water	25:41	0:0	8	channels
forexpr	25:51	25:53	7	ch ++
water	25:51	0:0	8	ch
op	25:53	0:0	8	++
stmts	25:57	32:12	7	
water	25:57	0:0	8	{
if	26:16	29:16	8	(c -> buffer -> nb_samples > 2 * c -> padding_size - i)
cond	26:20	26:66	9	c -> buffer -> nb_samples > 2 * c -> padding_size - i
water	26:20	0:0	10	c
op	26:21	0:0	10	->
water	26:23	0:0	10	buffer
op	26:29	0:0	10	->
water	26:31	0:0	10	nb_samples
op	26:42	0:0	10	>
water	26:44	0:0	10	2
op	26:46	0:0	10	*
water	26:48	0:0	10	c
op	26:49	0:0	10	->
water	26:51	0:0	10	padding_size
op	26:64	0:0	10	-
water	26:66	0:0	10	i
stmts	26:69	29:16	9	
water	26:69	0:0	10	{
call	27:20	28:85	10	memcpy
arg	27:27	27:56	11	c->buffer->data[ch]+bps*i
water	27:27	0:0	12	c
op	27:28	0:0	12	->
water	27:30	0:0	12	buffer
op	27:36	0:0	12	->
water	27:38	0:0	12	data
op	27:42	0:0	12	[
water	27:43	0:0	12	ch
op	27:45	0:0	12	]
op	27:47	0:0	12	+
water	27:49	0:0	12	bps
op	27:53	0:0	12	*
water	27:55	0:0	12	i
arg	28:27	28:80	11	c->buffer->data[ch]+bps*(2*c->padding_size-i)
water	28:27	0:0	12	c
op	28:28	0:0	12	->
water	28:30	0:0	12	buffer
op	28:36	0:0	12	->
water	28:38	0:0	12	data
op	28:42	0:0	12	[
water	28:43	0:0	12	ch
op	28:45	0:0	12	]
op	28:47	0:0	12	+
water	28:49	0:0	12	bps
op	28:53	0:0	12	*
water	28:55	0:0	12	(
water	28:56	0:0	12	2
op	28:58	0:0	12	*
water	28:60	0:0	12	c
op	28:61	0:0	12	->
water	28:63	0:0	12	padding_size
op	28:76	0:0	12	-
water	28:78	0:0	12	i
water	28:79	0:0	12	)
arg	28:82	28:85	11	bps
water	28:82	0:0	12	bps
water	28:86	0:0	10	;
water	29:16	0:0	10	}
else	29:18	31:16	8
stmts	29:23	31:16	9	
water	29:23	0:0	10	{
call	30:20	30:64	10	memset
arg	30:27	30:56	11	c->buffer->data[ch]+bps*i
water	30:27	0:0	12	c
op	30:28	0:0	12	->
water	30:30	0:0	12	buffer
op	30:36	0:0	12	->
water	30:38	0:0	12	data
op	30:42	0:0	12	[
water	30:43	0:0	12	ch
op	30:45	0:0	12	]
op	30:47	0:0	12	+
water	30:49	0:0	12	bps
op	30:53	0:0	12	*
water	30:55	0:0	12	i
arg	30:58	30:59	11	0
water	30:58	0:0	12	0
arg	30:61	30:64	11	bps
water	30:61	0:0	12	bps
water	30:65	0:0	10	;
water	31:16	0:0	10	}
water	32:12	0:0	8	}
water	33:8	0:0	4	c
op	33:9	0:0	4	->
water	33:11	0:0	4	initial_padding_filled
op	33:34	0:0	4	=
water	33:36	0:0	4	1
water	33:37	0:0	4	;
water	34:4	0:0	4	}
if	35:4	59:4	2	(! src && ! c -> final_padding_filled)
cond	35:8	35:20	3	! src && ! c -> final_padding_filled
op	35:8	0:0	4	!
water	35:9	0:0	4	src
op	35:13	0:0	4	&&
op	35:16	0:0	4	!
water	35:17	0:0	4	c
op	35:18	0:0	4	->
water	35:20	0:0	4	final_padding_filled
stmts	35:42	59:4	3	
water	35:42	0:0	4	{
decl	36:8	36:70	4	int	bps
op	36:16	0:0	4	=
call	36:18	36:69	5	av_get_bytes_per_sample
arg	36:42	36:69	6	c->avr->internal_sample_fmt
water	36:42	0:0	7	c
op	36:43	0:0	7	->
water	36:45	0:0	7	avr
op	36:48	0:0	7	->
water	36:50	0:0	7	internal_sample_fmt
decl	37:8	37:13	4	int	i
water	38:8	0:0	4	ret
op	38:12	0:0	4	=
call	38:14	40:51	4	ff_audio_data_realloc
arg	38:36	38:45	5	c->buffer
water	38:36	0:0	6	c
op	38:37	0:0	6	->
water	38:39	0:0	6	buffer
arg	39:36	40:51	5	FFMAX(in_samples,in_leftover)+c->padding_size
call	39:36	39:65	6	FFMAX
arg	39:42	39:52	7	in_samples
water	39:42	0:0	8	in_samples
arg	39:54	39:65	7	in_leftover
water	39:54	0:0	8	in_leftover
op	39:67	0:0	6	+
water	40:36	0:0	6	c
op	40:37	0:0	6	->
water	40:39	0:0	6	padding_size
water	40:52	0:0	4	;
if	41:8	44:8	4	(ret < 0)
cond	41:12	41:18	5	ret < 0
water	41:12	0:0	6	ret
op	41:16	0:0	6	<
water	41:18	0:0	6	0
stmts	41:21	44:8	5	
water	41:21	0:0	6	{
call	42:12	42:81	6	av_log
arg	42:19	42:25	7	c->avr
water	42:19	0:0	8	c
op	42:20	0:0	8	->
water	42:22	0:0	8	avr
arg	42:27	42:39	7	AV_LOG_ERROR
water	42:27	0:0	8	AV_LOG_ERROR
arg	42:41	42:81	7	"Error reallocating resampling buffer\n"
water	42:41	0:0	8	"Error reallocating resampling buffer\n"
water	42:82	0:0	6	;
return	43:12	43:34	6	AVERROR(ENOMEM)
call	43:19	43:33	7	AVERROR
arg	43:27	43:33	8	ENOMEM
water	43:27	0:0	9	ENOMEM
water	44:8	0:0	6	}
for	45:8	55:12	4	(i = 0 ;i < c -> padding_size;i ++)
forinit	45:13	45:18	5	i = 0 ;
water	45:13	0:0	6	i
op	45:15	0:0	6	=
water	45:17	0:0	6	0
water	45:18	0:0	6	;
cond	45:20	45:27	5	i < c -> padding_size
water	45:20	0:0	6	i
op	45:22	0:0	6	<
water	45:24	0:0	6	c
op	45:25	0:0	6	->
water	45:27	0:0	6	padding_size
forexpr	45:41	45:42	5	i ++
water	45:41	0:0	6	i
op	45:42	0:0	6	++
stmts	46:12	55:12	5	
for	46:12	55:12	6	(ch = 0 ;ch < c -> buffer -> channels;ch ++)
forinit	46:17	46:23	7	ch = 0 ;
water	46:17	0:0	8	ch
op	46:20	0:0	8	=
water	46:22	0:0	8	0
water	46:23	0:0	8	;
cond	46:25	46:41	7	ch < c -> buffer -> channels
water	46:25	0:0	8	ch
op	46:28	0:0	8	<
water	46:30	0:0	8	c
op	46:31	0:0	8	->
water	46:33	0:0	8	buffer
op	46:39	0:0	8	->
water	46:41	0:0	8	channels
forexpr	46:51	46:53	7	ch ++
water	46:51	0:0	8	ch
op	46:53	0:0	8	++
stmts	46:57	55:12	7	
water	46:57	0:0	8	{
if	47:16	51:16	8	(in_leftover > i)
cond	47:20	47:34	9	in_leftover > i
water	47:20	0:0	10	in_leftover
op	47:32	0:0	10	>
water	47:34	0:0	10	i
stmts	47:37	51:16	9	
water	47:37	0:0	10	{
call	48:20	50:30	10	memcpy
arg	48:27	48:72	11	c->buffer->data[ch]+bps*(in_leftover+i)
water	48:27	0:0	12	c
op	48:28	0:0	12	->
water	48:30	0:0	12	buffer
op	48:36	0:0	12	->
water	48:38	0:0	12	data
op	48:42	0:0	12	[
water	48:43	0:0	12	ch
op	48:45	0:0	12	]
op	48:47	0:0	12	+
water	48:49	0:0	12	bps
op	48:53	0:0	12	*
water	48:55	0:0	12	(
water	48:56	0:0	12	in_leftover
op	48:68	0:0	12	+
water	48:70	0:0	12	i
water	48:71	0:0	12	)
arg	49:27	49:76	11	c->buffer->data[ch]+bps*(in_leftover-i-1)
water	49:27	0:0	12	c
op	49:28	0:0	12	->
water	49:30	0:0	12	buffer
op	49:36	0:0	12	->
water	49:38	0:0	12	data
op	49:42	0:0	12	[
water	49:43	0:0	12	ch
op	49:45	0:0	12	]
op	49:47	0:0	12	+
water	49:49	0:0	12	bps
op	49:53	0:0	12	*
water	49:55	0:0	12	(
water	49:56	0:0	12	in_leftover
op	49:68	0:0	12	-
water	49:70	0:0	12	i
op	49:72	0:0	12	-
water	49:74	0:0	12	1
water	49:75	0:0	12	)
arg	50:27	50:30	11	bps
water	50:27	0:0	12	bps
water	50:31	0:0	10	;
water	51:16	0:0	10	}
else	51:18	54:16	8
stmts	51:23	54:16	9	
water	51:23	0:0	10	{
call	52:20	53:33	10	memset
arg	52:27	52:72	11	c->buffer->data[ch]+bps*(in_leftover+i)
water	52:27	0:0	12	c
op	52:28	0:0	12	->
water	52:30	0:0	12	buffer
op	52:36	0:0	12	->
water	52:38	0:0	12	data
op	52:42	0:0	12	[
water	52:43	0:0	12	ch
op	52:45	0:0	12	]
op	52:47	0:0	12	+
water	52:49	0:0	12	bps
op	52:53	0:0	12	*
water	52:55	0:0	12	(
water	52:56	0:0	12	in_leftover
op	52:68	0:0	12	+
water	52:70	0:0	12	i
water	52:71	0:0	12	)
arg	53:27	53:28	11	0
water	53:27	0:0	12	0
arg	53:30	53:33	11	bps
water	53:30	0:0	12	bps
water	53:34	0:0	10	;
water	54:16	0:0	10	}
water	55:12	0:0	8	}
water	56:8	0:0	4	c
op	56:9	0:0	4	->
water	56:11	0:0	4	buffer
op	56:17	0:0	4	->
water	56:19	0:0	4	nb_samples
op	56:32	0:0	4	+=
water	56:35	0:0	4	c
op	56:36	0:0	4	->
water	56:38	0:0	4	padding_size
water	56:50	0:0	4	;
water	57:8	0:0	4	c
op	57:9	0:0	4	->
water	57:11	0:0	4	final_padding_samples
op	57:33	0:0	4	=
water	57:35	0:0	4	c
op	57:36	0:0	4	->
water	57:38	0:0	4	padding_size
water	57:50	0:0	4	;
water	58:8	0:0	4	c
op	58:9	0:0	4	->
water	58:11	0:0	4	final_padding_filled
op	58:33	0:0	4	=
water	58:35	0:0	4	1
water	58:36	0:0	4	;
water	59:4	0:0	4	}
if	62:4	70:4	2	(! dst -> read_only && dst -> allow_realloc)
cond	62:8	62:32	3	! dst -> read_only && dst -> allow_realloc
op	62:8	0:0	4	!
water	62:9	0:0	4	dst
op	62:12	0:0	4	->
water	62:14	0:0	4	read_only
op	62:24	0:0	4	&&
water	62:27	0:0	4	dst
op	62:30	0:0	4	->
water	62:32	0:0	4	allow_realloc
stmts	62:47	70:4	3	
water	62:47	0:0	4	{
water	63:8	0:0	4	out_samples
op	63:20	0:0	4	=
call	63:22	64:60	4	resample
arg	63:31	63:32	5	c
water	63:31	0:0	6	c
arg	63:34	63:38	5	NULL
water	63:34	0:0	6	NULL
arg	63:40	63:44	5	NULL
water	63:40	0:0	6	NULL
arg	63:46	63:50	5	NULL
water	63:46	0:0	6	NULL
arg	63:52	63:73	5	c->buffer->nb_samples
water	63:52	0:0	6	c
op	63:53	0:0	6	->
water	63:55	0:0	6	buffer
op	63:61	0:0	6	->
water	63:63	0:0	6	nb_samples
arg	64:31	64:38	5	INT_MAX
water	64:31	0:0	6	INT_MAX
arg	64:40	64:41	5	0
water	64:40	0:0	6	0
arg	64:43	64:60	5	nearest_neighbour
water	64:43	0:0	6	nearest_neighbour
water	64:61	0:0	4	;
water	65:8	0:0	4	ret
op	65:12	0:0	4	=
call	65:14	65:52	4	ff_audio_data_realloc
arg	65:36	65:39	5	dst
water	65:36	0:0	6	dst
arg	65:41	65:52	5	out_samples
water	65:41	0:0	6	out_samples
water	65:53	0:0	4	;
if	66:8	69:8	4	(ret < 0)
cond	66:12	66:18	5	ret < 0
water	66:12	0:0	6	ret
op	66:16	0:0	6	<
water	66:18	0:0	6	0
stmts	66:21	69:8	5	
water	66:21	0:0	6	{
call	67:12	67:70	6	av_log
arg	67:19	67:25	7	c->avr
water	67:19	0:0	8	c
op	67:20	0:0	8	->
water	67:22	0:0	8	avr
arg	67:27	67:39	7	AV_LOG_ERROR
water	67:27	0:0	8	AV_LOG_ERROR
arg	67:41	67:70	7	"error reallocating output\n"
water	67:41	0:0	8	"error reallocating output\n"
water	67:71	0:0	6	;
return	68:12	68:22	6	ret
water	68:19	0:0	7	ret
water	69:8	0:0	6	}
water	70:4	0:0	4	}
for	72:4	77:4	2	(ch = 0 ;ch < c -> buffer -> channels;ch ++)
forinit	72:9	72:15	3	ch = 0 ;
water	72:9	0:0	4	ch
op	72:12	0:0	4	=
water	72:14	0:0	4	0
water	72:15	0:0	4	;
cond	72:17	72:33	3	ch < c -> buffer -> channels
water	72:17	0:0	4	ch
op	72:20	0:0	4	<
water	72:22	0:0	4	c
op	72:23	0:0	4	->
water	72:25	0:0	4	buffer
op	72:31	0:0	4	->
water	72:33	0:0	4	channels
forexpr	72:43	72:45	3	ch ++
water	72:43	0:0	4	ch
op	72:45	0:0	4	++
stmts	72:49	77:4	3	
water	72:49	0:0	4	{
water	73:8	0:0	4	out_samples
op	73:20	0:0	4	=
call	73:22	76:79	4	resample
arg	73:31	73:32	5	c
water	73:31	0:0	6	c
arg	73:34	73:55	5	(void*)dst->data[ch]
water	73:34	0:0	6	(
water	73:35	0:0	6	void
op	73:40	0:0	6	*
water	73:41	0:0	6	)
water	73:42	0:0	6	dst
op	73:45	0:0	6	->
water	73:47	0:0	6	data
op	73:51	0:0	6	[
water	73:52	0:0	6	ch
op	73:54	0:0	6	]
arg	74:31	74:64	5	(constvoid*)c->buffer->data[ch]
water	74:31	0:0	6	(
water	74:32	0:0	6	const
water	74:38	0:0	6	void
op	74:43	0:0	6	*
water	74:44	0:0	6	)
water	74:45	0:0	6	c
op	74:46	0:0	6	->
water	74:48	0:0	6	buffer
op	74:54	0:0	6	->
water	74:56	0:0	6	data
op	74:60	0:0	6	[
water	74:61	0:0	6	ch
op	74:63	0:0	6	]
arg	74:66	74:75	5	&consumed
op	74:66	0:0	6	&
water	74:67	0:0	6	consumed
arg	75:31	75:52	5	c->buffer->nb_samples
water	75:31	0:0	6	c
op	75:32	0:0	6	->
water	75:34	0:0	6	buffer
op	75:40	0:0	6	->
water	75:42	0:0	6	nb_samples
arg	75:54	75:76	5	dst->allocated_samples
water	75:54	0:0	6	dst
op	75:57	0:0	6	->
water	75:59	0:0	6	allocated_samples
arg	76:31	76:60	5	ch+1==c->buffer->channels
water	76:31	0:0	6	ch
op	76:34	0:0	6	+
water	76:36	0:0	6	1
op	76:38	0:0	6	==
water	76:41	0:0	6	c
op	76:42	0:0	6	->
water	76:44	0:0	6	buffer
op	76:50	0:0	6	->
water	76:52	0:0	6	channels
arg	76:62	76:79	5	nearest_neighbour
water	76:62	0:0	6	nearest_neighbour
water	76:80	0:0	4	;
water	77:4	0:0	4	}
if	78:4	81:4	2	(out_samples < 0)
cond	78:8	78:22	3	out_samples < 0
water	78:8	0:0	4	out_samples
op	78:20	0:0	4	<
water	78:22	0:0	4	0
stmts	78:25	81:4	3	
water	78:25	0:0	4	{
call	79:8	79:64	4	av_log
arg	79:15	79:21	5	c->avr
water	79:15	0:0	6	c
op	79:16	0:0	6	->
water	79:18	0:0	6	avr
arg	79:23	79:35	5	AV_LOG_ERROR
water	79:23	0:0	6	AV_LOG_ERROR
arg	79:37	79:64	5	"error during resampling\n"
water	79:37	0:0	6	"error during resampling\n"
water	79:65	0:0	4	;
return	80:8	80:26	4	out_samples
water	80:15	0:0	5	out_samples
water	81:4	0:0	4	}
call	83:4	83:43	2	ff_audio_data_drain
arg	83:24	83:33	3	c->buffer
water	83:24	0:0	4	c
op	83:25	0:0	4	->
water	83:27	0:0	4	buffer
arg	83:35	83:43	3	consumed
water	83:35	0:0	4	consumed
water	83:44	0:0	2	;
water	84:4	0:0	2	c
op	84:5	0:0	2	->
water	84:7	0:0	2	initial_padding_samples
op	84:31	0:0	2	=
call	84:33	84:79	2	FFMAX
arg	84:39	84:76	3	c->initial_padding_samples-consumed
water	84:39	0:0	4	c
op	84:40	0:0	4	->
water	84:42	0:0	4	initial_padding_samples
op	84:66	0:0	4	-
water	84:68	0:0	4	consumed
arg	84:78	84:79	3	0
water	84:78	0:0	4	0
water	84:80	0:0	2	;
call	85:4	86:71	2	av_log
arg	85:11	85:17	3	c->avr
water	85:11	0:0	4	c
op	85:12	0:0	4	->
water	85:14	0:0	4	avr
arg	85:19	85:31	3	AV_LOG_TRACE
water	85:19	0:0	4	AV_LOG_TRACE
arg	85:33	85:90	3	"resampled %d in + %d leftover to %d out + %d leftover\n"
water	85:33	0:0	4	"resampled %d in + %d leftover to %d out + %d leftover\n"
arg	86:12	86:22	3	in_samples
water	86:12	0:0	4	in_samples
arg	86:24	86:35	3	in_leftover
water	86:24	0:0	4	in_leftover
arg	86:37	86:48	3	out_samples
water	86:37	0:0	4	out_samples
arg	86:50	86:71	3	c->buffer->nb_samples
water	86:50	0:0	4	c
op	86:51	0:0	4	->
water	86:53	0:0	4	buffer
op	86:59	0:0	4	->
water	86:61	0:0	4	nb_samples
water	86:72	0:0	2	;
water	87:4	0:0	2	dst
op	87:7	0:0	2	->
water	87:9	0:0	2	nb_samples
op	87:20	0:0	2	=
water	87:22	0:0	2	out_samples
water	87:33	0:0	2	;
return	88:4	88:12	2	0
water	88:11	0:0	3	0
