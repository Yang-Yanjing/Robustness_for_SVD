func	1:0	77:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	76:12	1	
decl	3:4	3:38	2	char	fntemplate[FILENAME_BUF_SIZE]
decl	4:4	4:39	2	char	pktfilename[FILENAME_BUF_SIZE]
decl	5:4	5:32	2	AVFormatContext	*fctx
op	5:26	0:0	2	=
water	5:28	0:0	2	NULL
decl	6:4	6:16	2	AVPacket	pkt
decl	7:4	7:23	2	int64_t	pktnum
op	7:20	0:0	2	=
water	7:22	0:0	2	0
decl	8:4	8:23	2	int64_t	maxpkts
op	8:20	0:0	2	=
water	8:22	0:0	2	0
decl	9:4	9:23	2	int	donotquit
op	9:20	0:0	2	=
water	9:22	0:0	2	0
decl	10:4	10:23	2	int	nowrite
op	10:20	0:0	2	=
water	10:22	0:0	2	0
decl	11:4	11:11	2	int	err
if	12:4	19:4	2	(( argc > 1 ) && !strncmp (argv [ 1 ] ,"-" ,1 ))
cond	12:8	12:46	3	( argc > 1 ) && !strncmp (argv [ 1 ] ,"-" ,1 )
water	12:8	0:0	4	(
water	12:9	0:0	4	argc
op	12:14	0:0	4	>
water	12:16	0:0	4	1
water	12:17	0:0	4	)
op	12:19	0:0	4	&&
op	12:22	0:0	4	!
call	12:23	12:46	4	strncmp
arg	12:31	12:38	5	argv[1]
water	12:31	0:0	6	argv
op	12:35	0:0	6	[
water	12:36	0:0	6	1
op	12:37	0:0	6	]
arg	12:40	12:43	5	"-"
water	12:40	0:0	6	"-"
arg	12:45	12:46	5	1
water	12:45	0:0	6	1
stmts	12:49	19:4	3	
water	12:49	0:0	4	{
if	13:8	14:25	4	(strchr (argv [ 1 ] ,'w' ))
cond	13:12	13:31	5	strchr (argv [ 1 ] ,'w' )
call	13:12	13:31	6	strchr
arg	13:19	13:26	7	argv[1]
water	13:19	0:0	8	argv
op	13:23	0:0	8	[
water	13:24	0:0	8	1
op	13:25	0:0	8	]
arg	13:28	13:31	7	'w'
water	13:28	0:0	8	'w'
stmts	14:12	14:25	5	
water	14:12	0:0	6	donotquit
op	14:22	0:0	6	=
water	14:24	0:0	6	1
water	14:25	0:0	6	;
if	15:8	16:23	4	(strchr (argv [ 1 ] ,'n' ))
cond	15:12	15:31	5	strchr (argv [ 1 ] ,'n' )
call	15:12	15:31	6	strchr
arg	15:19	15:26	7	argv[1]
water	15:19	0:0	8	argv
op	15:23	0:0	8	[
water	15:24	0:0	8	1
op	15:25	0:0	8	]
arg	15:28	15:31	7	'n'
water	15:28	0:0	8	'n'
stmts	16:12	16:23	5	
water	16:12	0:0	6	nowrite
op	16:20	0:0	6	=
water	16:22	0:0	6	1
water	16:23	0:0	6	;
water	17:8	0:0	4	argv
op	17:12	0:0	4	++
water	17:14	0:0	4	;
water	18:8	0:0	4	argc
op	18:12	0:0	4	--
water	18:14	0:0	4	;
water	19:4	0:0	4	}
if	20:4	21:23	2	(argc < 2)
cond	20:8	20:15	3	argc < 2
water	20:8	0:0	4	argc
op	20:13	0:0	4	<
water	20:15	0:0	4	2
stmts	21:8	21:23	3	
return	21:8	21:23	4	usage(1)
call	21:15	21:22	5	usage
arg	21:21	21:22	6	1
water	21:21	0:0	7	1
if	22:4	23:31	2	(argc > 2)
cond	22:8	22:15	3	argc > 2
water	22:8	0:0	4	argc
op	22:13	0:0	4	>
water	22:15	0:0	4	2
stmts	23:8	23:31	3	
water	23:8	0:0	4	maxpkts
op	23:16	0:0	4	=
call	23:18	23:30	4	atoi
arg	23:23	23:30	5	argv[2]
water	23:23	0:0	6	argv
op	23:27	0:0	6	[
water	23:28	0:0	6	2
op	23:29	0:0	6	]
water	23:31	0:0	4	;
call	24:4	24:54	2	av_strlcpy
arg	24:15	24:25	3	fntemplate
water	24:15	0:0	4	fntemplate
arg	24:27	24:34	3	argv[1]
water	24:27	0:0	4	argv
op	24:31	0:0	4	[
water	24:32	0:0	4	1
op	24:33	0:0	4	]
arg	24:36	24:54	3	sizeof(fntemplate)
op	24:36	0:0	4	sizeof
water	24:42	0:0	4	(
water	24:43	0:0	4	fntemplate
water	24:53	0:0	4	)
water	24:55	0:0	2	;
if	25:4	26:77	2	(strrchr (argv [ 1 ] ,'/' ))
cond	25:8	25:28	3	strrchr (argv [ 1 ] ,'/' )
call	25:8	25:28	4	strrchr
arg	25:16	25:23	5	argv[1]
water	25:16	0:0	6	argv
op	25:20	0:0	6	[
water	25:21	0:0	6	1
op	25:22	0:0	6	]
arg	25:25	25:28	5	'/'
water	25:25	0:0	6	'/'
stmts	26:8	26:77	3	
call	26:8	26:76	4	av_strlcpy
arg	26:19	26:29	5	fntemplate
water	26:19	0:0	6	fntemplate
arg	26:31	26:56	5	strrchr(argv[1],'/')+1
call	26:31	26:51	6	strrchr
arg	26:39	26:46	7	argv[1]
water	26:39	0:0	8	argv
op	26:43	0:0	8	[
water	26:44	0:0	8	1
op	26:45	0:0	8	]
arg	26:48	26:51	7	'/'
water	26:48	0:0	8	'/'
op	26:53	0:0	6	+
water	26:55	0:0	6	1
arg	26:58	26:76	5	sizeof(fntemplate)
op	26:58	0:0	6	sizeof
water	26:64	0:0	6	(
water	26:65	0:0	6	fntemplate
water	26:75	0:0	6	)
water	26:77	0:0	4	;
if	27:4	28:40	2	(strrchr (fntemplate ,'.' ))
cond	27:8	27:31	3	strrchr (fntemplate ,'.' )
call	27:8	27:31	4	strrchr
arg	27:16	27:26	5	fntemplate
water	27:16	0:0	6	fntemplate
arg	27:28	27:31	5	'.'
water	27:28	0:0	6	'.'
stmts	28:8	28:40	3	
call	28:8	28:32	4	*strrchr
arg	28:17	28:27	5	fntemplate
water	28:17	0:0	6	fntemplate
arg	28:29	28:32	5	'.'
water	28:29	0:0	6	'.'
op	28:34	0:0	4	=
water	28:36	0:0	4	'\0'
water	28:40	0:0	4	;
if	29:4	32:4	2	(strchr (fntemplate ,'%' ))
cond	29:8	29:30	3	strchr (fntemplate ,'%' )
call	29:8	29:30	4	strchr
arg	29:15	29:25	5	fntemplate
water	29:15	0:0	6	fntemplate
arg	29:27	29:30	5	'%'
water	29:27	0:0	6	'%'
stmts	29:33	32:4	3	
water	29:33	0:0	4	{
call	30:8	30:64	4	fprintf
arg	30:16	30:22	5	stderr
water	30:16	0:0	6	stderr
arg	30:24	30:64	5	"cannot use filenames containing '%%'\n"
water	30:24	0:0	6	"cannot use filenames containing '%%'\n"
water	30:65	0:0	4	;
return	31:8	31:23	4	usage(1)
call	31:15	31:22	5	usage
arg	31:21	31:22	6	1
water	31:21	0:0	7	1
water	32:4	0:0	4	}
if	33:4	36:4	2	(strlen (fntemplate ) + sizeof ( PKTFILESUFF ) >= sizeof ( fntemplate ) - 1)
cond	33:8	33:73	3	strlen (fntemplate ) + sizeof ( PKTFILESUFF ) >= sizeof ( fntemplate ) - 1
call	33:8	33:25	4	strlen
arg	33:15	33:25	5	fntemplate
water	33:15	0:0	6	fntemplate
op	33:27	0:0	4	+
op	33:29	0:0	4	sizeof
water	33:35	0:0	4	(
water	33:36	0:0	4	PKTFILESUFF
water	33:47	0:0	4	)
op	33:49	0:0	4	>=
op	33:52	0:0	4	sizeof
water	33:58	0:0	4	(
water	33:59	0:0	4	fntemplate
water	33:69	0:0	4	)
op	33:71	0:0	4	-
water	33:73	0:0	4	1
stmts	33:76	36:4	3	
water	33:76	0:0	4	{
call	34:8	34:45	4	fprintf
arg	34:16	34:22	5	stderr
water	34:16	0:0	6	stderr
arg	34:24	34:45	5	"filename too long\n"
water	34:24	0:0	6	"filename too long\n"
water	34:46	0:0	4	;
return	35:8	35:23	4	usage(1)
call	35:15	35:22	5	usage
arg	35:21	35:22	6	1
water	35:21	0:0	7	1
water	36:4	0:0	4	}
call	37:4	37:34	2	strcat
arg	37:11	37:21	3	fntemplate
water	37:11	0:0	4	fntemplate
arg	37:23	37:34	3	PKTFILESUFF
water	37:23	0:0	4	PKTFILESUFF
water	37:35	0:0	2	;
call	38:4	38:43	2	printf
arg	38:11	38:31	3	"FNTEMPLATE: '%s'\n"
water	38:11	0:0	4	"FNTEMPLATE: '%s'\n"
arg	38:33	38:43	3	fntemplate
water	38:33	0:0	4	fntemplate
water	38:44	0:0	2	;
call	40:4	40:20	2	av_register_all
water	40:21	0:0	2	;
water	41:4	0:0	2	err
op	41:8	0:0	2	=
call	41:10	41:56	2	avformat_open_input
arg	41:30	41:35	3	&fctx
op	41:30	0:0	4	&
water	41:31	0:0	4	fctx
arg	41:37	41:44	3	argv[1]
water	41:37	0:0	4	argv
op	41:41	0:0	4	[
water	41:42	0:0	4	1
op	41:43	0:0	4	]
arg	41:46	41:50	3	NULL
water	41:46	0:0	4	NULL
arg	41:52	41:56	3	NULL
water	41:52	0:0	4	NULL
water	41:57	0:0	2	;
if	42:4	45:4	2	(err < 0)
cond	42:8	42:14	3	err < 0
water	42:8	0:0	4	err
op	42:12	0:0	4	<
water	42:14	0:0	4	0
stmts	42:17	45:4	3	
water	42:17	0:0	4	{
call	43:8	43:60	4	fprintf
arg	43:16	43:22	5	stderr
water	43:16	0:0	6	stderr
arg	43:24	43:55	5	"cannot open input: error %d\n"
water	43:24	0:0	6	"cannot open input: error %d\n"
arg	43:57	43:60	5	err
water	43:57	0:0	6	err
water	43:61	0:0	4	;
return	44:8	44:16	4	1
water	44:15	0:0	5	1
water	45:4	0:0	4	}
water	46:4	0:0	2	err
op	46:8	0:0	2	=
call	46:10	46:46	2	avformat_find_stream_info
arg	46:36	46:40	3	fctx
water	46:36	0:0	4	fctx
arg	46:42	46:46	3	NULL
water	46:42	0:0	4	NULL
water	46:47	0:0	2	;
if	47:4	50:4	2	(err < 0)
cond	47:8	47:14	3	err < 0
water	47:8	0:0	4	err
op	47:12	0:0	4	<
water	47:14	0:0	4	0
stmts	47:17	50:4	3	
water	47:17	0:0	4	{
call	48:8	48:68	4	fprintf
arg	48:16	48:22	5	stderr
water	48:16	0:0	6	stderr
arg	48:24	48:63	5	"avformat_find_stream_info: error %d\n"
water	48:24	0:0	6	"avformat_find_stream_info: error %d\n"
arg	48:65	48:68	5	err
water	48:65	0:0	6	err
water	48:69	0:0	4	;
return	49:8	49:16	4	1
water	49:15	0:0	5	1
water	50:4	0:0	4	}
call	51:4	51:23	2	av_init_packet
arg	51:19	51:23	3	&pkt
op	51:19	0:0	4	&
water	51:20	0:0	4	pkt
water	51:24	0:0	2	;
while	52:4	72:4	2	(( err =av_read_frame (fctx ,& pkt ) ) >= 0)
cond	52:11	52:48	3	( err =av_read_frame (fctx ,& pkt ) ) >= 0
water	52:11	0:0	4	(
water	52:12	0:0	4	err
op	52:16	0:0	4	=
call	52:18	52:42	4	av_read_frame
arg	52:32	52:36	5	fctx
water	52:32	0:0	6	fctx
arg	52:38	52:42	5	&pkt
op	52:38	0:0	6	&
water	52:39	0:0	6	pkt
water	52:43	0:0	4	)
op	52:45	0:0	4	>=
water	52:48	0:0	4	0
stmts	52:51	72:4	3	
water	52:51	0:0	4	{
decl	53:8	53:14	4	int	fd
call	54:8	56:58	4	snprintf
arg	54:17	54:28	5	pktfilename
water	54:17	0:0	6	pktfilename
arg	54:30	54:49	5	sizeof(pktfilename)
op	54:30	0:0	6	sizeof
water	54:36	0:0	6	(
water	54:37	0:0	6	pktfilename
water	54:48	0:0	6	)
arg	54:51	54:61	5	fntemplate
water	54:51	0:0	6	fntemplate
arg	54:63	54:69	5	pktnum
water	54:63	0:0	6	pktnum
arg	55:17	55:33	5	pkt.stream_index
water	55:17	0:0	6	pkt
op	55:20	0:0	6	.
water	55:21	0:0	6	stream_index
arg	55:35	55:42	5	pkt.pts
water	55:35	0:0	6	pkt
op	55:38	0:0	6	.
water	55:39	0:0	6	pts
arg	55:44	55:52	5	pkt.size
water	55:44	0:0	6	pkt
op	55:47	0:0	6	.
water	55:48	0:0	6	size
arg	56:17	56:58	5	(pkt.flags&AV_PKT_FLAG_KEY)?'K':'_'
water	56:17	0:0	6	(
water	56:18	0:0	6	pkt
op	56:21	0:0	6	.
water	56:22	0:0	6	flags
op	56:28	0:0	6	&
water	56:30	0:0	6	AV_PKT_FLAG_KEY
water	56:45	0:0	6	)
water	56:47	0:0	6	?
water	56:49	0:0	6	'K'
water	56:53	0:0	6	:
water	56:55	0:0	6	'_'
water	56:59	0:0	4	;
call	57:8	58:56	4	printf
arg	57:15	57:31	5	PKTFILESUFF"\n"
water	57:15	0:0	6	PKTFILESUFF
water	57:27	0:0	6	"\n"
arg	57:33	57:39	5	pktnum
water	57:33	0:0	6	pktnum
arg	57:41	57:57	5	pkt.stream_index
water	57:41	0:0	6	pkt
op	57:44	0:0	6	.
water	57:45	0:0	6	stream_index
arg	57:59	57:66	5	pkt.pts
water	57:59	0:0	6	pkt
op	57:62	0:0	6	.
water	57:63	0:0	6	pts
arg	57:68	57:76	5	pkt.size
water	57:68	0:0	6	pkt
op	57:71	0:0	6	.
water	57:72	0:0	6	size
arg	58:15	58:56	5	(pkt.flags&AV_PKT_FLAG_KEY)?'K':'_'
water	58:15	0:0	6	(
water	58:16	0:0	6	pkt
op	58:19	0:0	6	.
water	58:20	0:0	6	flags
op	58:26	0:0	6	&
water	58:28	0:0	6	AV_PKT_FLAG_KEY
water	58:43	0:0	6	)
water	58:45	0:0	6	?
water	58:47	0:0	6	'K'
water	58:51	0:0	6	:
water	58:53	0:0	6	'_'
water	58:57	0:0	4	;
if	59:8	67:8	4	(! nowrite)
cond	59:12	59:13	5	! nowrite
op	59:12	0:0	6	!
water	59:13	0:0	6	nowrite
stmts	59:22	67:8	5	
water	59:22	0:0	6	{
water	60:12	0:0	6	fd
op	60:16	0:0	6	=
call	60:18	60:60	6	open
arg	60:23	60:34	7	pktfilename
water	60:23	0:0	8	pktfilename
arg	60:36	60:54	7	O_WRONLY|O_CREAT
water	60:36	0:0	8	O_WRONLY
op	60:45	0:0	8	|
water	60:47	0:0	8	O_CREAT
arg	60:56	60:60	7	0644
water	60:56	0:0	8	0644
water	60:61	0:0	6	;
water	61:12	0:0	6	err
op	61:16	0:0	6	=
call	61:18	61:46	6	write
arg	61:24	61:26	7	fd
water	61:24	0:0	8	fd
arg	61:28	61:36	7	pkt.data
water	61:28	0:0	8	pkt
op	61:31	0:0	8	.
water	61:32	0:0	8	data
arg	61:38	61:46	7	pkt.size
water	61:38	0:0	8	pkt
op	61:41	0:0	8	.
water	61:42	0:0	8	size
water	61:47	0:0	6	;
if	62:12	65:12	6	(err < 0)
cond	62:16	62:22	7	err < 0
water	62:16	0:0	8	err
op	62:20	0:0	8	<
water	62:22	0:0	8	0
stmts	62:25	65:12	7	
water	62:25	0:0	8	{
call	63:16	63:56	8	fprintf
arg	63:24	63:30	9	stderr
water	63:24	0:0	10	stderr
arg	63:32	63:51	9	"write: error %d\n"
water	63:32	0:0	10	"write: error %d\n"
arg	63:53	63:56	9	err
water	63:53	0:0	10	err
water	63:57	0:0	8	;
return	64:16	64:24	8	1
water	64:23	0:0	9	1
water	65:12	0:0	8	}
call	66:12	66:20	6	close
arg	66:18	66:20	7	fd
water	66:18	0:0	8	fd
water	66:21	0:0	6	;
water	67:8	0:0	6	}
call	68:8	68:27	4	av_free_packet
arg	68:23	68:27	5	&pkt
op	68:23	0:0	6	&
water	68:24	0:0	6	pkt
water	68:28	0:0	4	;
water	69:8	0:0	4	pktnum
op	69:14	0:0	4	++
water	69:16	0:0	4	;
if	70:8	71:17	4	(maxpkts && ( pktnum >= maxpkts ))
cond	70:12	70:41	5	maxpkts && ( pktnum >= maxpkts )
water	70:12	0:0	6	maxpkts
op	70:20	0:0	6	&&
water	70:23	0:0	6	(
water	70:24	0:0	6	pktnum
op	70:31	0:0	6	>=
water	70:34	0:0	6	maxpkts
water	70:41	0:0	6	)
stmts	71:12	71:17	5	
break	71:12	71:17	6	
water	72:4	0:0	4	}
call	73:4	73:30	2	avformat_close_input
arg	73:25	73:30	3	&fctx
op	73:25	0:0	4	&
water	73:26	0:0	4	fctx
water	73:31	0:0	2	;
while	74:4	75:31	2	(donotquit)
cond	74:11	74:11	3	donotquit
water	74:11	0:0	4	donotquit
stmts	75:8	75:31	3	
call	75:8	75:30	4	av_usleep
arg	75:18	75:30	5	60*1000000
water	75:18	0:0	6	60
op	75:21	0:0	6	*
water	75:23	0:0	6	1000000
water	75:31	0:0	4	;
return	76:4	76:12	2	0
water	76:11	0:0	3	0
