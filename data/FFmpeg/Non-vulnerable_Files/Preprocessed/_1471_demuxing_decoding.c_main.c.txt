func	1:0	159:0	0	int	main
params	1:9	0:0	1	
param	1:10	1:18	2	int	argc
param	1:20	1:31	2	char * *	argv
stmnts	0:0	158:18	1	
decl	3:4	3:26	2	int	ret
op	3:12	0:0	2	=
water	3:14	0:0	2	0
water	3:15	0:0	2	,
decl	3:4	3:26	2	int	got_frame
if	4:4	17:4	2	(argc != 4 && argc != 5)
cond	4:8	4:29	3	argc != 4 && argc != 5
water	4:8	0:0	4	argc
op	4:13	0:0	4	!=
water	4:16	0:0	4	4
op	4:18	0:0	4	&&
water	4:21	0:0	4	argc
op	4:26	0:0	4	!=
water	4:29	0:0	4	5
stmts	4:32	17:4	3	
water	4:32	0:0	4	{
call	5:8	15:29	4	fprintf
arg	5:16	5:22	5	stderr
water	5:16	0:0	6	stderr
arg	5:24	15:20	5	"usage: %s [-refcount=<old|new_norefcount|new_refcount>] ""input_file video_output_file audio_output_file\n""API example program to show how to read frames from an input file.\n""This program reads frames from a file, decodes them, and writes decoded\n""video frames to a rawvideo file named video_output_file, and decoded\n""audio frames to a rawaudio file named audio_output_file.\n\n""If the -refcount option is specified, the program use the\n""reference counting frame system which allows keeping a copy of\n""the data for longer than one decode call. If unset, it's using\n""the classic old method.\n""\n"
water	5:24	0:0	6	"usage: %s [-refcount=<old|new_norefcount|new_refcount>] "
water	6:16	0:0	6	"input_file video_output_file audio_output_file\n"
water	7:16	0:0	6	"API example program to show how to read frames from an input file.\n"
water	8:16	0:0	6	"This program reads frames from a file, decodes them, and writes decoded\n"
water	9:16	0:0	6	"video frames to a rawvideo file named video_output_file, and decoded\n"
water	10:16	0:0	6	"audio frames to a rawaudio file named audio_output_file.\n\n"
water	11:16	0:0	6	"If the -refcount option is specified, the program use the\n"
water	12:16	0:0	6	"reference counting frame system which allows keeping a copy of\n"
water	13:16	0:0	6	"the data for longer than one decode call. If unset, it's using\n"
water	14:16	0:0	6	"the classic old method.\n"
water	15:16	0:0	6	"\n"
arg	15:22	15:29	5	argv[0]
water	15:22	0:0	6	argv
op	15:26	0:0	6	[
water	15:27	0:0	6	0
op	15:28	0:0	6	]
water	15:30	0:0	4	;
call	16:8	16:14	4	exit
arg	16:13	16:14	5	1
water	16:13	0:0	6	1
water	16:15	0:0	4	;
water	17:4	0:0	4	}
if	18:4	28:4	2	(argc == 5)
cond	18:8	18:16	3	argc == 5
water	18:8	0:0	4	argc
op	18:13	0:0	4	==
water	18:16	0:0	4	5
stmts	18:19	28:4	3	
water	18:19	0:0	4	{
decl	19:8	19:57	4	const char	*mode
op	19:25	0:0	4	=
water	19:27	0:0	4	argv
op	19:31	0:0	4	[
water	19:32	0:0	4	1
op	19:33	0:0	4	]
op	19:35	0:0	4	+
call	19:37	19:56	5	strlen
arg	19:44	19:56	6	"-refcount="
water	19:44	0:0	7	"-refcount="
if	20:8	20:73	4	(!strcmp (mode ,"old" ))
cond	20:17	20:36	5	!strcmp (mode ,"old" )
op	20:17	0:0	6	!
call	20:18	20:36	6	strcmp
arg	20:25	20:29	7	mode
water	20:25	0:0	8	mode
arg	20:31	20:36	7	"old"
water	20:31	0:0	8	"old"
stmts	20:50	20:73	5	
water	20:50	0:0	6	api_mode
op	20:59	0:0	6	=
water	20:61	0:0	6	API_MODE_OLD
water	20:73	0:0	6	;
else	21:8	21:90	4
stmts	21:13	21:90	5	
if	21:13	21:90	6	(!strcmp (mode ,"new_norefcount" ))
cond	21:17	21:47	7	!strcmp (mode ,"new_norefcount" )
op	21:17	0:0	8	!
call	21:18	21:47	8	strcmp
arg	21:25	21:29	9	mode
water	21:25	0:0	10	mode
arg	21:31	21:47	9	"new_norefcount"
water	21:31	0:0	10	"new_norefcount"
stmts	21:50	21:90	7	
water	21:50	0:0	8	api_mode
op	21:59	0:0	8	=
water	21:61	0:0	8	API_MODE_NEW_API_NO_REF_COUNT
water	21:90	0:0	8	;
else	22:8	22:87	4
stmts	22:13	22:87	5	
if	22:13	22:87	6	(!strcmp (mode ,"new_refcount" ))
cond	22:17	22:45	7	!strcmp (mode ,"new_refcount" )
op	22:17	0:0	8	!
call	22:18	22:45	8	strcmp
arg	22:25	22:29	9	mode
water	22:25	0:0	10	mode
arg	22:31	22:45	9	"new_refcount"
water	22:31	0:0	10	"new_refcount"
stmts	22:50	22:87	7	
water	22:50	0:0	8	api_mode
op	22:59	0:0	8	=
water	22:61	0:0	8	API_MODE_NEW_API_REF_COUNT
water	22:87	0:0	8	;
else	23:8	26:8	4
stmts	23:13	26:8	5	
water	23:13	0:0	6	{
call	24:12	24:54	6	fprintf
arg	24:20	24:26	7	stderr
water	24:20	0:0	8	stderr
arg	24:28	24:48	7	"unknow mode '%s'\n"
water	24:28	0:0	8	"unknow mode '%s'\n"
arg	24:50	24:54	7	mode
water	24:50	0:0	8	mode
water	24:55	0:0	6	;
call	25:12	25:18	6	exit
arg	25:17	25:18	7	1
water	25:17	0:0	8	1
water	25:19	0:0	6	;
water	26:8	0:0	6	}
water	27:8	0:0	4	argv
op	27:12	0:0	4	++
water	27:14	0:0	4	;
water	28:4	0:0	4	}
water	29:4	0:0	2	src_filename
op	29:17	0:0	2	=
water	29:19	0:0	2	argv
op	29:23	0:0	2	[
water	29:24	0:0	2	1
op	29:25	0:0	2	]
water	29:26	0:0	2	;
water	30:4	0:0	2	video_dst_filename
op	30:23	0:0	2	=
water	30:25	0:0	2	argv
op	30:29	0:0	2	[
water	30:30	0:0	2	2
op	30:31	0:0	2	]
water	30:32	0:0	2	;
water	31:4	0:0	2	audio_dst_filename
op	31:23	0:0	2	=
water	31:25	0:0	2	argv
op	31:29	0:0	2	[
water	31:30	0:0	2	3
op	31:31	0:0	2	]
water	31:32	0:0	2	;
call	33:4	33:20	2	av_register_all
water	33:21	0:0	2	;
if	35:4	38:4	2	(avformat_open_input (& fmt_ctx ,src_filename ,NULL ,NULL ) < 0)
cond	35:8	35:66	3	avformat_open_input (& fmt_ctx ,src_filename ,NULL ,NULL ) < 0
call	35:8	35:62	4	avformat_open_input
arg	35:28	35:36	5	&fmt_ctx
op	35:28	0:0	6	&
water	35:29	0:0	6	fmt_ctx
arg	35:38	35:50	5	src_filename
water	35:38	0:0	6	src_filename
arg	35:52	35:56	5	NULL
water	35:52	0:0	6	NULL
arg	35:58	35:62	5	NULL
water	35:58	0:0	6	NULL
op	35:64	0:0	4	<
water	35:66	0:0	4	0
stmts	35:69	38:4	3	
water	35:69	0:0	4	{
call	36:8	36:71	4	fprintf
arg	36:16	36:22	5	stderr
water	36:16	0:0	6	stderr
arg	36:24	36:57	5	"Could not open source file %s\n"
water	36:24	0:0	6	"Could not open source file %s\n"
arg	36:59	36:71	5	src_filename
water	36:59	0:0	6	src_filename
water	36:72	0:0	4	;
call	37:8	37:14	4	exit
arg	37:13	37:14	5	1
water	37:13	0:0	6	1
water	37:15	0:0	4	;
water	38:4	0:0	4	}
if	40:4	43:4	2	(avformat_find_stream_info (fmt_ctx ,NULL ) < 0)
cond	40:8	40:51	3	avformat_find_stream_info (fmt_ctx ,NULL ) < 0
call	40:8	40:47	4	avformat_find_stream_info
arg	40:34	40:41	5	fmt_ctx
water	40:34	0:0	6	fmt_ctx
arg	40:43	40:47	5	NULL
water	40:43	0:0	6	NULL
op	40:49	0:0	4	<
water	40:51	0:0	4	0
stmts	40:54	43:4	3	
water	40:54	0:0	4	{
call	41:8	41:61	4	fprintf
arg	41:16	41:22	5	stderr
water	41:16	0:0	6	stderr
arg	41:24	41:61	5	"Could not find stream information\n"
water	41:24	0:0	6	"Could not find stream information\n"
water	41:62	0:0	4	;
call	42:8	42:14	4	exit
arg	42:13	42:14	5	1
water	42:13	0:0	6	1
water	42:15	0:0	4	;
water	43:4	0:0	4	}
if	44:4	64:4	2	(open_codec_context (& video_stream_idx ,fmt_ctx ,AVMEDIA_TYPE_VIDEO ) >= 0)
cond	44:8	44:78	3	open_codec_context (& video_stream_idx ,fmt_ctx ,AVMEDIA_TYPE_VIDEO ) >= 0
call	44:8	44:73	4	open_codec_context
arg	44:27	44:44	5	&video_stream_idx
op	44:27	0:0	6	&
water	44:28	0:0	6	video_stream_idx
arg	44:46	44:53	5	fmt_ctx
water	44:46	0:0	6	fmt_ctx
arg	44:55	44:73	5	AVMEDIA_TYPE_VIDEO
water	44:55	0:0	6	AVMEDIA_TYPE_VIDEO
op	44:75	0:0	4	>=
water	44:78	0:0	4	0
stmts	44:81	64:4	3	
water	44:81	0:0	4	{
water	45:8	0:0	4	video_stream
op	45:21	0:0	4	=
water	45:23	0:0	4	fmt_ctx
op	45:30	0:0	4	->
water	45:32	0:0	4	streams
op	45:39	0:0	4	[
water	45:40	0:0	4	video_stream_idx
op	45:56	0:0	4	]
water	45:57	0:0	4	;
water	46:8	0:0	4	video_dec_ctx
op	46:22	0:0	4	=
water	46:24	0:0	4	video_stream
op	46:36	0:0	4	->
water	46:38	0:0	4	codec
water	46:43	0:0	4	;
water	47:8	0:0	4	video_dst_file
op	47:23	0:0	4	=
call	47:25	47:55	4	fopen
arg	47:31	47:49	5	video_dst_filename
water	47:31	0:0	6	video_dst_filename
arg	47:51	47:55	5	"wb"
water	47:51	0:0	6	"wb"
water	47:56	0:0	4	;
if	48:8	52:8	4	(! video_dst_file)
cond	48:12	48:13	5	! video_dst_file
op	48:12	0:0	6	!
water	48:13	0:0	6	video_dst_file
stmts	48:29	52:8	5	
water	48:29	0:0	6	{
call	49:12	49:86	6	fprintf
arg	49:20	49:26	7	stderr
water	49:20	0:0	8	stderr
arg	49:28	49:66	7	"Could not open destination file %s\n"
water	49:28	0:0	8	"Could not open destination file %s\n"
arg	49:68	49:86	7	video_dst_filename
water	49:68	0:0	8	video_dst_filename
water	49:87	0:0	6	;
water	50:12	0:0	6	ret
op	50:16	0:0	6	=
water	50:18	0:0	6	1
water	50:19	0:0	6	;
goto	51:12	51:20	6	end
water	51:17	0:0	7	end
water	52:8	0:0	6	}
water	54:8	0:0	4	width
op	54:14	0:0	4	=
water	54:16	0:0	4	video_dec_ctx
op	54:29	0:0	4	->
water	54:31	0:0	4	width
water	54:36	0:0	4	;
water	55:8	0:0	4	height
op	55:15	0:0	4	=
water	55:17	0:0	4	video_dec_ctx
op	55:30	0:0	4	->
water	55:32	0:0	4	height
water	55:38	0:0	4	;
water	56:8	0:0	4	pix_fmt
op	56:16	0:0	4	=
water	56:18	0:0	4	video_dec_ctx
op	56:31	0:0	4	->
water	56:33	0:0	4	pix_fmt
water	56:40	0:0	4	;
water	57:8	0:0	4	ret
op	57:12	0:0	4	=
call	57:14	58:54	4	av_image_alloc
arg	57:29	57:43	5	video_dst_data
water	57:29	0:0	6	video_dst_data
arg	57:45	57:63	5	video_dst_linesize
water	57:45	0:0	6	video_dst_linesize
arg	58:29	58:34	5	width
water	58:29	0:0	6	width
arg	58:36	58:42	5	height
water	58:36	0:0	6	height
arg	58:44	58:51	5	pix_fmt
water	58:44	0:0	6	pix_fmt
arg	58:53	58:54	5	1
water	58:53	0:0	6	1
water	58:55	0:0	4	;
if	59:8	62:8	4	(ret < 0)
cond	59:12	59:18	5	ret < 0
water	59:12	0:0	6	ret
op	59:16	0:0	6	<
water	59:18	0:0	6	0
stmts	59:21	62:8	5	
water	59:21	0:0	6	{
call	60:12	60:67	6	fprintf
arg	60:20	60:26	7	stderr
water	60:20	0:0	8	stderr
arg	60:28	60:67	7	"Could not allocate raw video buffer\n"
water	60:28	0:0	8	"Could not allocate raw video buffer\n"
water	60:68	0:0	6	;
goto	61:12	61:20	6	end
water	61:17	0:0	7	end
water	62:8	0:0	6	}
water	63:8	0:0	4	video_dst_bufsize
op	63:26	0:0	4	=
water	63:28	0:0	4	ret
water	63:31	0:0	4	;
water	64:4	0:0	4	}
if	65:4	74:4	2	(open_codec_context (& audio_stream_idx ,fmt_ctx ,AVMEDIA_TYPE_AUDIO ) >= 0)
cond	65:8	65:78	3	open_codec_context (& audio_stream_idx ,fmt_ctx ,AVMEDIA_TYPE_AUDIO ) >= 0
call	65:8	65:73	4	open_codec_context
arg	65:27	65:44	5	&audio_stream_idx
op	65:27	0:0	6	&
water	65:28	0:0	6	audio_stream_idx
arg	65:46	65:53	5	fmt_ctx
water	65:46	0:0	6	fmt_ctx
arg	65:55	65:73	5	AVMEDIA_TYPE_AUDIO
water	65:55	0:0	6	AVMEDIA_TYPE_AUDIO
op	65:75	0:0	4	>=
water	65:78	0:0	4	0
stmts	65:81	74:4	3	
water	65:81	0:0	4	{
water	66:8	0:0	4	audio_stream
op	66:21	0:0	4	=
water	66:23	0:0	4	fmt_ctx
op	66:30	0:0	4	->
water	66:32	0:0	4	streams
op	66:39	0:0	4	[
water	66:40	0:0	4	audio_stream_idx
op	66:56	0:0	4	]
water	66:57	0:0	4	;
water	67:8	0:0	4	audio_dec_ctx
op	67:22	0:0	4	=
water	67:24	0:0	4	audio_stream
op	67:36	0:0	4	->
water	67:38	0:0	4	codec
water	67:43	0:0	4	;
water	68:8	0:0	4	audio_dst_file
op	68:23	0:0	4	=
call	68:25	68:55	4	fopen
arg	68:31	68:49	5	audio_dst_filename
water	68:31	0:0	6	audio_dst_filename
arg	68:51	68:55	5	"wb"
water	68:51	0:0	6	"wb"
water	68:56	0:0	4	;
if	69:8	73:8	4	(! audio_dst_file)
cond	69:12	69:13	5	! audio_dst_file
op	69:12	0:0	6	!
water	69:13	0:0	6	audio_dst_file
stmts	69:29	73:8	5	
water	69:29	0:0	6	{
call	70:12	70:86	6	fprintf
arg	70:20	70:26	7	stderr
water	70:20	0:0	8	stderr
arg	70:28	70:66	7	"Could not open destination file %s\n"
water	70:28	0:0	8	"Could not open destination file %s\n"
arg	70:68	70:86	7	audio_dst_filename
water	70:68	0:0	8	audio_dst_filename
water	70:87	0:0	6	;
water	71:12	0:0	6	ret
op	71:16	0:0	6	=
water	71:18	0:0	6	1
water	71:19	0:0	6	;
goto	72:12	72:20	6	end
water	72:17	0:0	7	end
water	73:8	0:0	6	}
water	74:4	0:0	4	}
call	76:4	76:46	2	av_dump_format
arg	76:19	76:26	3	fmt_ctx
water	76:19	0:0	4	fmt_ctx
arg	76:28	76:29	3	0
water	76:28	0:0	4	0
arg	76:31	76:43	3	src_filename
water	76:31	0:0	4	src_filename
arg	76:45	76:46	3	0
water	76:45	0:0	4	0
water	76:47	0:0	2	;
if	77:4	81:4	2	(! audio_stream && ! video_stream)
cond	77:8	77:26	3	! audio_stream && ! video_stream
op	77:8	0:0	4	!
water	77:9	0:0	4	audio_stream
op	77:22	0:0	4	&&
op	77:25	0:0	4	!
water	77:26	0:0	4	video_stream
stmts	77:40	81:4	3	
water	77:40	0:0	4	{
call	78:8	78:87	4	fprintf
arg	78:16	78:22	5	stderr
water	78:16	0:0	6	stderr
arg	78:24	78:87	5	"Could not find audio or video stream in the input, aborting\n"
water	78:24	0:0	6	"Could not find audio or video stream in the input, aborting\n"
water	78:88	0:0	4	;
water	79:8	0:0	4	ret
op	79:12	0:0	4	=
water	79:14	0:0	4	1
water	79:15	0:0	4	;
goto	80:8	80:16	4	end
water	80:13	0:0	5	end
water	81:4	0:0	4	}
if	84:4	85:37	2	(api_mode == API_MODE_OLD)
cond	84:8	84:20	3	api_mode == API_MODE_OLD
water	84:8	0:0	4	api_mode
op	84:17	0:0	4	==
water	84:20	0:0	4	API_MODE_OLD
stmts	85:8	85:37	3	
water	85:8	0:0	4	frame
op	85:14	0:0	4	=
call	85:16	85:36	4	avcodec_alloc_frame
water	85:37	0:0	4	;
else	86:4	87:32	2
stmts	87:8	87:32	3	
water	87:8	0:0	4	frame
op	87:14	0:0	4	=
call	87:16	87:31	4	av_frame_alloc
water	87:32	0:0	4	;
if	88:4	92:4	2	(! frame)
cond	88:8	88:9	3	! frame
op	88:8	0:0	4	!
water	88:9	0:0	4	frame
stmts	88:16	92:4	3	
water	88:16	0:0	4	{
call	89:8	89:52	4	fprintf
arg	89:16	89:22	5	stderr
water	89:16	0:0	6	stderr
arg	89:24	89:52	5	"Could not allocate frame\n"
water	89:24	0:0	6	"Could not allocate frame\n"
water	89:53	0:0	4	;
water	90:8	0:0	4	ret
op	90:12	0:0	4	=
call	90:14	90:28	4	AVERROR
arg	90:22	90:28	5	ENOMEM
water	90:22	0:0	6	ENOMEM
water	90:29	0:0	4	;
goto	91:8	91:16	4	end
water	91:13	0:0	5	end
water	92:4	0:0	4	}
call	94:4	94:23	2	av_init_packet
arg	94:19	94:23	3	&pkt
op	94:19	0:0	4	&
water	94:20	0:0	4	pkt
water	94:24	0:0	2	;
water	95:4	0:0	2	pkt
op	95:7	0:0	2	.
water	95:8	0:0	2	data
op	95:13	0:0	2	=
water	95:15	0:0	2	NULL
water	95:19	0:0	2	;
water	96:4	0:0	2	pkt
op	96:7	0:0	2	.
water	96:8	0:0	2	size
op	96:13	0:0	2	=
water	96:15	0:0	2	0
water	96:16	0:0	2	;
if	97:4	98:93	2	(video_stream)
cond	97:8	97:8	3	video_stream
water	97:8	0:0	4	video_stream
stmts	98:8	98:93	3	
call	98:8	98:92	4	printf
arg	98:15	98:58	5	"Demuxing video from file '%s' into '%s'\n"
water	98:15	0:0	6	"Demuxing video from file '%s' into '%s'\n"
arg	98:60	98:72	5	src_filename
water	98:60	0:0	6	src_filename
arg	98:74	98:92	5	video_dst_filename
water	98:74	0:0	6	video_dst_filename
water	98:93	0:0	4	;
if	99:4	100:93	2	(audio_stream)
cond	99:8	99:8	3	audio_stream
water	99:8	0:0	4	audio_stream
stmts	100:8	100:93	3	
call	100:8	100:92	4	printf
arg	100:15	100:58	5	"Demuxing audio from file '%s' into '%s'\n"
water	100:15	0:0	6	"Demuxing audio from file '%s' into '%s'\n"
arg	100:60	100:72	5	src_filename
water	100:60	0:0	6	src_filename
arg	100:74	100:92	5	audio_dst_filename
water	100:74	0:0	6	audio_dst_filename
water	100:93	0:0	4	;
while	102:4	112:4	2	(av_read_frame (fmt_ctx ,& pkt ) >= 0)
cond	102:11	102:43	3	av_read_frame (fmt_ctx ,& pkt ) >= 0
call	102:11	102:38	4	av_read_frame
arg	102:25	102:32	5	fmt_ctx
water	102:25	0:0	6	fmt_ctx
arg	102:34	102:38	5	&pkt
op	102:34	0:0	6	&
water	102:35	0:0	6	pkt
op	102:40	0:0	4	>=
water	102:43	0:0	4	0
stmts	102:46	112:4	3	
water	102:46	0:0	4	{
decl	103:8	103:31	4	AVPacket	orig_pkt
op	103:26	0:0	4	=
water	103:28	0:0	4	pkt
do	104:8	110:8	4	(pkt . size > 0)
cond	110:17	110:28	5	pkt . size > 0
water	110:17	0:0	6	pkt
op	110:20	0:0	6	.
water	110:21	0:0	6	size
op	110:26	0:0	6	>
water	110:28	0:0	6	0
stmts	104:11	110:8	5	
water	104:11	0:0	6	{
water	105:12	0:0	6	ret
op	105:16	0:0	6	=
call	105:18	105:45	6	decode_packet
arg	105:32	105:42	7	&got_frame
op	105:32	0:0	8	&
water	105:33	0:0	8	got_frame
arg	105:44	105:45	7	0
water	105:44	0:0	8	0
water	105:46	0:0	6	;
if	106:12	107:21	6	(ret < 0)
cond	106:16	106:22	7	ret < 0
water	106:16	0:0	8	ret
op	106:20	0:0	8	<
water	106:22	0:0	8	0
stmts	107:16	107:21	7	
break	107:16	107:21	8	
water	108:12	0:0	6	pkt
op	108:15	0:0	6	.
water	108:16	0:0	6	data
op	108:21	0:0	6	+=
water	108:24	0:0	6	ret
water	108:27	0:0	6	;
water	109:12	0:0	6	pkt
op	109:15	0:0	6	.
water	109:16	0:0	6	size
op	109:21	0:0	6	-=
water	109:24	0:0	6	ret
water	109:27	0:0	6	;
water	110:8	0:0	6	}
water	110:30	0:0	4	;
call	111:8	111:32	4	av_free_packet
arg	111:23	111:32	5	&orig_pkt
op	111:23	0:0	6	&
water	111:24	0:0	6	orig_pkt
water	111:33	0:0	4	;
water	112:4	0:0	4	}
water	114:4	0:0	2	pkt
op	114:7	0:0	2	.
water	114:8	0:0	2	data
op	114:13	0:0	2	=
water	114:15	0:0	2	NULL
water	114:19	0:0	2	;
water	115:4	0:0	2	pkt
op	115:7	0:0	2	.
water	115:8	0:0	2	size
op	115:13	0:0	2	=
water	115:15	0:0	2	0
water	115:16	0:0	2	;
do	116:4	118:4	2	(got_frame)
cond	118:13	118:13	3	got_frame
water	118:13	0:0	4	got_frame
stmts	116:7	118:4	3	
water	116:7	0:0	4	{
call	117:8	117:35	4	decode_packet
arg	117:22	117:32	5	&got_frame
op	117:22	0:0	6	&
water	117:23	0:0	6	got_frame
arg	117:34	117:35	5	1
water	117:34	0:0	6	1
water	117:36	0:0	4	;
water	118:4	0:0	4	}
water	118:23	0:0	2	;
call	119:4	119:34	2	printf
arg	119:11	119:34	3	"Demuxing succeeded.\n"
water	119:11	0:0	4	"Demuxing succeeded.\n"
water	119:35	0:0	2	;
if	120:4	125:4	2	(video_stream)
cond	120:8	120:8	3	video_stream
water	120:8	0:0	4	video_stream
stmts	120:22	125:4	3	
water	120:22	0:0	4	{
call	121:8	124:33	4	printf
arg	121:15	122:70	5	"Play the output video file with the command:\n""ffplay -f rawvideo -pix_fmt %s -video_size %dx%d %s\n"
water	121:15	0:0	6	"Play the output video file with the command:\n"
water	122:15	0:0	6	"ffplay -f rawvideo -pix_fmt %s -video_size %dx%d %s\n"
arg	123:15	123:43	5	av_get_pix_fmt_name(pix_fmt)
call	123:15	123:42	6	av_get_pix_fmt_name
arg	123:35	123:42	7	pix_fmt
water	123:35	0:0	8	pix_fmt
arg	123:45	123:50	5	width
water	123:45	0:0	6	width
arg	123:52	123:58	5	height
water	123:52	0:0	6	height
arg	124:15	124:33	5	video_dst_filename
water	124:15	0:0	6	video_dst_filename
water	124:34	0:0	4	;
water	125:4	0:0	4	}
if	126:4	144:4	2	(audio_stream)
cond	126:8	126:8	3	audio_stream
water	126:8	0:0	4	audio_stream
stmts	126:22	144:4	3	
water	126:22	0:0	4	{
decl	127:8	127:60	4	enum AVSampleFormat	sfmt
op	127:33	0:0	4	=
water	127:35	0:0	4	audio_dec_ctx
op	127:48	0:0	4	->
water	127:50	0:0	4	sample_fmt
decl	128:8	128:48	4	int	n_channels
op	128:23	0:0	4	=
water	128:25	0:0	4	audio_dec_ctx
op	128:38	0:0	4	->
water	128:40	0:0	4	channels
decl	129:8	129:23	4	const char	*fmt
if	130:8	137:8	4	(av_sample_fmt_is_planar (sfmt ))
cond	130:12	130:40	5	av_sample_fmt_is_planar (sfmt )
call	130:12	130:40	6	av_sample_fmt_is_planar
arg	130:36	130:40	7	sfmt
water	130:36	0:0	8	sfmt
stmts	130:43	137:8	5	
water	130:43	0:0	6	{
decl	131:12	131:61	6	const char	*packed
op	131:31	0:0	6	=
call	131:33	131:60	7	av_get_sample_fmt_name
arg	131:56	131:60	8	sfmt
water	131:56	0:0	9	sfmt
call	132:12	134:40	6	printf
arg	132:19	133:77	7	"Warning: the sample format the decoder produced is planar ""(%s). This example will output the first channel only.\n"
water	132:19	0:0	8	"Warning: the sample format the decoder produced is planar "
water	133:19	0:0	8	"(%s). This example will output the first channel only.\n"
arg	134:19	134:40	7	packed?packed:"?"
water	134:19	0:0	8	packed
water	134:26	0:0	8	?
water	134:28	0:0	8	packed
water	134:35	0:0	8	:
water	134:37	0:0	8	"?"
water	134:41	0:0	6	;
water	135:12	0:0	6	sfmt
op	135:17	0:0	6	=
call	135:19	135:48	6	av_get_packed_sample_fmt
arg	135:44	135:48	7	sfmt
water	135:44	0:0	8	sfmt
water	135:49	0:0	6	;
water	136:12	0:0	6	n_channels
op	136:23	0:0	6	=
water	136:25	0:0	6	1
water	136:26	0:0	6	;
water	137:8	0:0	6	}
if	138:8	139:20	4	(( ret =get_format_from_sample_fmt (& fmt ,sfmt ) ) < 0)
cond	138:12	138:61	5	( ret =get_format_from_sample_fmt (& fmt ,sfmt ) ) < 0
water	138:12	0:0	6	(
water	138:13	0:0	6	ret
op	138:17	0:0	6	=
call	138:19	138:56	6	get_format_from_sample_fmt
arg	138:46	138:50	7	&fmt
op	138:46	0:0	8	&
water	138:47	0:0	8	fmt
arg	138:52	138:56	7	sfmt
water	138:52	0:0	8	sfmt
water	138:57	0:0	6	)
op	138:59	0:0	6	<
water	138:61	0:0	6	0
stmts	139:12	139:20	5	
goto	139:12	139:20	6	end
water	139:17	0:0	7	end
call	140:8	143:33	4	printf
arg	140:15	141:48	5	"Play the output audio file with the command:\n""ffplay -f %s -ac %d -ar %d %s\n"
water	140:15	0:0	6	"Play the output audio file with the command:\n"
water	141:15	0:0	6	"ffplay -f %s -ac %d -ar %d %s\n"
arg	142:15	142:18	5	fmt
water	142:15	0:0	6	fmt
arg	142:20	142:30	5	n_channels
water	142:20	0:0	6	n_channels
arg	142:32	142:58	5	audio_dec_ctx->sample_rate
water	142:32	0:0	6	audio_dec_ctx
op	142:45	0:0	6	->
water	142:47	0:0	6	sample_rate
arg	143:15	143:33	5	audio_dst_filename
water	143:15	0:0	6	audio_dst_filename
water	143:34	0:0	4	;
water	144:4	0:0	4	}
label	145:0	145:3	2	end :
call	146:4	146:31	2	avcodec_close
arg	146:18	146:31	3	video_dec_ctx
water	146:18	0:0	4	video_dec_ctx
water	146:32	0:0	2	;
call	147:4	147:31	2	avcodec_close
arg	147:18	147:31	3	audio_dec_ctx
water	147:18	0:0	4	audio_dec_ctx
water	147:32	0:0	2	;
call	148:4	148:33	2	avformat_close_input
arg	148:25	148:33	3	&fmt_ctx
op	148:25	0:0	4	&
water	148:26	0:0	4	fmt_ctx
water	148:34	0:0	2	;
if	149:4	150:30	2	(video_dst_file)
cond	149:8	149:8	3	video_dst_file
water	149:8	0:0	4	video_dst_file
stmts	150:8	150:30	3	
call	150:8	150:29	4	fclose
arg	150:15	150:29	5	video_dst_file
water	150:15	0:0	6	video_dst_file
water	150:30	0:0	4	;
if	151:4	152:30	2	(audio_dst_file)
cond	151:8	151:8	3	audio_dst_file
water	151:8	0:0	4	audio_dst_file
stmts	152:8	152:30	3	
call	152:8	152:29	4	fclose
arg	152:15	152:29	5	audio_dst_file
water	152:15	0:0	6	audio_dst_file
water	152:30	0:0	4	;
if	153:4	154:34	2	(api_mode == API_MODE_OLD)
cond	153:8	153:20	3	api_mode == API_MODE_OLD
water	153:8	0:0	4	api_mode
op	153:17	0:0	4	==
water	153:20	0:0	4	API_MODE_OLD
stmts	154:8	154:34	3	
call	154:8	154:33	4	avcodec_free_frame
arg	154:27	154:33	5	&frame
op	154:27	0:0	6	&
water	154:28	0:0	6	frame
water	154:34	0:0	4	;
else	155:4	156:29	2
stmts	156:8	156:29	3	
call	156:8	156:28	4	av_frame_free
arg	156:22	156:28	5	&frame
op	156:22	0:0	6	&
water	156:23	0:0	6	frame
water	156:29	0:0	4	;
call	157:4	157:29	2	av_free
arg	157:12	157:29	3	video_dst_data[0]
water	157:12	0:0	4	video_dst_data
op	157:26	0:0	4	[
water	157:27	0:0	4	0
op	157:28	0:0	4	]
water	157:30	0:0	2	;
return	158:4	158:18	2	ret<0
water	158:11	0:0	3	ret
op	158:15	0:0	3	<
water	158:17	0:0	3	0
