func	1:0	71:0	0	static int	parse_read_interval
params	1:30	0:0	1	
param	1:31	1:56	2	const char *	interval_spec
param	2:31	2:53	2	ReadInterval *	interval
stmnts	0:0	70:14	1	
decl	4:4	4:15	2	int	ret
op	4:12	0:0	2	=
water	4:14	0:0	2	0
decl	5:4	5:52	2	char	*next
water	5:14	0:0	2	,
decl	5:4	5:52	2	char	*p
water	5:18	0:0	2	,
decl	5:4	5:52	2	char	*spec
op	5:26	0:0	2	=
call	5:28	5:51	3	av_strdup
arg	5:38	5:51	4	interval_spec
water	5:38	0:0	5	interval_spec
if	6:4	7:30	2	(! spec)
cond	6:8	6:9	3	! spec
op	6:8	0:0	4	!
water	6:9	0:0	4	spec
stmts	7:8	7:30	3	
return	7:8	7:30	4	AVERROR(ENOMEM)
call	7:15	7:29	5	AVERROR
arg	7:23	7:29	6	ENOMEM
water	7:23	0:0	7	ENOMEM
if	8:4	12:4	2	(! * spec)
cond	8:8	8:10	3	! * spec
op	8:8	0:0	4	!
op	8:9	0:0	4	*
water	8:10	0:0	4	spec
stmts	8:16	12:4	3	
water	8:16	0:0	4	{
call	9:8	9:75	4	av_log
arg	9:15	9:19	5	NULL
water	9:15	0:0	6	NULL
arg	9:21	9:33	5	AV_LOG_ERROR
water	9:21	0:0	6	AV_LOG_ERROR
arg	9:35	9:75	5	"Invalid empty interval specification\n"
water	9:35	0:0	6	"Invalid empty interval specification\n"
water	9:76	0:0	4	;
water	10:8	0:0	4	ret
op	10:12	0:0	4	=
call	10:14	10:28	4	AVERROR
arg	10:22	10:28	5	EINVAL
water	10:22	0:0	6	EINVAL
water	10:29	0:0	4	;
goto	11:8	11:16	4	end
water	11:13	0:0	5	end
water	12:4	0:0	4	}
water	13:4	0:0	2	p
op	13:6	0:0	2	=
water	13:8	0:0	2	spec
water	13:12	0:0	2	;
water	14:4	0:0	2	next
op	14:9	0:0	2	=
call	14:11	14:27	2	strchr
arg	14:18	14:22	3	spec
water	14:18	0:0	4	spec
arg	14:24	14:27	3	'%'
water	14:24	0:0	4	'%'
water	14:28	0:0	2	;
if	15:4	16:19	2	(next)
cond	15:8	15:8	3	next
water	15:8	0:0	4	next
stmts	16:8	16:19	3	
op	16:8	0:0	4	*
water	16:9	0:0	4	next
op	16:13	0:0	4	++
op	16:16	0:0	4	=
water	16:18	0:0	4	0
water	16:19	0:0	4	;
if	18:4	31:4	2	(* p)
cond	18:8	18:9	3	* p
op	18:8	0:0	4	*
water	18:9	0:0	4	p
stmts	18:12	31:4	3	
water	18:12	0:0	4	{
water	19:8	0:0	4	interval
op	19:16	0:0	4	->
water	19:18	0:0	4	has_start
op	19:28	0:0	4	=
water	19:30	0:0	4	1
water	19:31	0:0	4	;
if	20:8	23:8	4	(* p == '+')
cond	20:12	20:18	5	* p == '+'
op	20:12	0:0	6	*
water	20:13	0:0	6	p
op	20:15	0:0	6	==
water	20:18	0:0	6	'+'
stmts	20:23	23:8	5	
water	20:23	0:0	6	{
water	21:12	0:0	6	interval
op	21:20	0:0	6	->
water	21:22	0:0	6	start_is_offset
op	21:38	0:0	6	=
water	21:40	0:0	6	1
water	21:41	0:0	6	;
water	22:12	0:0	6	p
op	22:13	0:0	6	++
water	22:15	0:0	6	;
water	23:8	0:0	6	}
else	23:10	25:8	4
stmts	23:15	25:8	5	
water	23:15	0:0	6	{
water	24:12	0:0	6	interval
op	24:20	0:0	6	->
water	24:22	0:0	6	start_is_offset
op	24:38	0:0	6	=
water	24:40	0:0	6	0
water	24:41	0:0	6	;
water	25:8	0:0	6	}
water	26:8	0:0	4	ret
op	26:12	0:0	4	=
call	26:14	26:50	4	av_parse_time
arg	26:28	26:44	5	&interval->start
op	26:28	0:0	6	&
water	26:29	0:0	6	interval
op	26:37	0:0	6	->
water	26:39	0:0	6	start
arg	26:46	26:47	5	p
water	26:46	0:0	6	p
arg	26:49	26:50	5	1
water	26:49	0:0	6	1
water	26:51	0:0	4	;
if	27:8	30:8	4	(ret < 0)
cond	27:12	27:18	5	ret < 0
water	27:12	0:0	6	ret
op	27:16	0:0	6	<
water	27:18	0:0	6	0
stmts	27:21	30:8	5	
water	27:21	0:0	6	{
call	28:12	28:87	6	av_log
arg	28:19	28:23	7	NULL
water	28:19	0:0	8	NULL
arg	28:25	28:37	7	AV_LOG_ERROR
water	28:25	0:0	8	AV_LOG_ERROR
arg	28:39	28:84	7	"Invalid interval start specification '%s'\n"
water	28:39	0:0	8	"Invalid interval start specification '%s'\n"
arg	28:86	28:87	7	p
water	28:86	0:0	8	p
water	28:88	0:0	6	;
goto	29:12	29:20	6	end
water	29:17	0:0	7	end
water	30:8	0:0	6	}
water	31:4	0:0	4	}
else	31:6	33:4	2
stmts	31:11	33:4	3	
water	31:11	0:0	4	{
water	32:8	0:0	4	interval
op	32:16	0:0	4	->
water	32:18	0:0	4	has_start
op	32:28	0:0	4	=
water	32:30	0:0	4	0
water	32:31	0:0	4	;
water	33:4	0:0	4	}
water	35:4	0:0	2	p
op	35:6	0:0	2	=
water	35:8	0:0	2	next
water	35:12	0:0	2	;
if	36:4	65:4	2	(p && * p)
cond	36:8	36:14	3	p && * p
water	36:8	0:0	4	p
op	36:10	0:0	4	&&
op	36:13	0:0	4	*
water	36:14	0:0	4	p
stmts	36:17	65:4	3	
water	36:17	0:0	4	{
decl	37:8	37:18	4	int64_t	us
water	38:8	0:0	4	interval
op	38:16	0:0	4	->
water	38:18	0:0	4	has_end
op	38:26	0:0	4	=
water	38:28	0:0	4	1
water	38:29	0:0	4	;
if	39:8	42:8	4	(* p == '+')
cond	39:12	39:18	5	* p == '+'
op	39:12	0:0	6	*
water	39:13	0:0	6	p
op	39:15	0:0	6	==
water	39:18	0:0	6	'+'
stmts	39:23	42:8	5	
water	39:23	0:0	6	{
water	40:12	0:0	6	interval
op	40:20	0:0	6	->
water	40:22	0:0	6	end_is_offset
op	40:36	0:0	6	=
water	40:38	0:0	6	1
water	40:39	0:0	6	;
water	41:12	0:0	6	p
op	41:13	0:0	6	++
water	41:15	0:0	6	;
water	42:8	0:0	6	}
else	42:10	44:8	4
stmts	42:15	44:8	5	
water	42:15	0:0	6	{
water	43:12	0:0	6	interval
op	43:20	0:0	6	->
water	43:22	0:0	6	end_is_offset
op	43:36	0:0	6	=
water	43:38	0:0	6	0
water	43:39	0:0	6	;
water	44:8	0:0	6	}
if	45:8	57:8	4	(interval -> end_is_offset && * p == '#')
cond	45:12	45:45	5	interval -> end_is_offset && * p == '#'
water	45:12	0:0	6	interval
op	45:20	0:0	6	->
water	45:22	0:0	6	end_is_offset
op	45:36	0:0	6	&&
op	45:39	0:0	6	*
water	45:40	0:0	6	p
op	45:42	0:0	6	==
water	45:45	0:0	6	'#'
stmts	45:50	57:8	5	
water	45:50	0:0	6	{
water	46:12	0:0	6	long
water	46:17	0:0	6	long
water	46:22	0:0	6	int
water	46:26	0:0	6	lli
water	46:29	0:0	6	;
decl	47:12	47:22	6	char	*tail
water	48:12	0:0	6	interval
op	48:20	0:0	6	->
water	48:22	0:0	6	duration_frames
op	48:38	0:0	6	=
water	48:40	0:0	6	1
water	48:41	0:0	6	;
water	49:12	0:0	6	p
op	49:13	0:0	6	++
water	49:15	0:0	6	;
water	50:12	0:0	6	lli
op	50:16	0:0	6	=
call	50:18	50:38	6	strtoll
arg	50:26	50:27	7	p
water	50:26	0:0	8	p
arg	50:29	50:34	7	&tail
op	50:29	0:0	8	&
water	50:30	0:0	8	tail
arg	50:36	50:38	7	10
water	50:36	0:0	8	10
water	50:39	0:0	6	;
if	51:12	55:12	6	(* tail || lli < 0)
cond	51:16	51:31	7	* tail || lli < 0
op	51:16	0:0	8	*
water	51:17	0:0	8	tail
op	51:22	0:0	8	||
water	51:25	0:0	8	lli
op	51:29	0:0	8	<
water	51:31	0:0	8	0
stmts	51:34	55:12	7	
water	51:34	0:0	8	{
call	52:16	53:90	8	av_log
arg	52:23	52:27	9	NULL
water	52:23	0:0	10	NULL
arg	52:29	52:41	9	AV_LOG_ERROR
water	52:29	0:0	10	AV_LOG_ERROR
arg	53:23	53:87	9	"Invalid or negative value '%s' for duration number of frames\n"
water	53:23	0:0	10	"Invalid or negative value '%s' for duration number of frames\n"
arg	53:89	53:90	9	p
water	53:89	0:0	10	p
water	53:91	0:0	8	;
goto	54:16	54:24	8	end
water	54:21	0:0	9	end
water	55:12	0:0	8	}
water	56:12	0:0	6	interval
op	56:20	0:0	6	->
water	56:22	0:0	6	end
op	56:26	0:0	6	=
water	56:28	0:0	6	lli
water	56:31	0:0	6	;
water	57:8	0:0	6	}
else	57:10	64:8	4
stmts	57:15	64:8	5	
water	57:15	0:0	6	{
water	58:12	0:0	6	ret
op	58:16	0:0	6	=
call	58:18	58:41	6	av_parse_time
arg	58:32	58:35	7	&us
op	58:32	0:0	8	&
water	58:33	0:0	8	us
arg	58:37	58:38	7	p
water	58:37	0:0	8	p
arg	58:40	58:41	7	1
water	58:40	0:0	8	1
water	58:42	0:0	6	;
if	59:12	62:12	6	(ret < 0)
cond	59:16	59:22	7	ret < 0
water	59:16	0:0	8	ret
op	59:20	0:0	8	<
water	59:22	0:0	8	0
stmts	59:25	62:12	7	
water	59:25	0:0	8	{
call	60:16	60:98	8	av_log
arg	60:23	60:27	9	NULL
water	60:23	0:0	10	NULL
arg	60:29	60:41	9	AV_LOG_ERROR
water	60:29	0:0	10	AV_LOG_ERROR
arg	60:43	60:95	9	"Invalid interval end/duration specification '%s'\n"
water	60:43	0:0	10	"Invalid interval end/duration specification '%s'\n"
arg	60:97	60:98	9	p
water	60:97	0:0	10	p
water	60:99	0:0	8	;
goto	61:16	61:24	8	end
water	61:21	0:0	9	end
water	62:12	0:0	8	}
water	63:12	0:0	6	interval
op	63:20	0:0	6	->
water	63:22	0:0	6	end
op	63:26	0:0	6	=
water	63:28	0:0	6	us
water	63:30	0:0	6	;
water	64:8	0:0	6	}
water	65:4	0:0	4	}
else	65:6	67:4	2
stmts	65:11	67:4	3	
water	65:11	0:0	4	{
water	66:8	0:0	4	interval
op	66:16	0:0	4	->
water	66:18	0:0	4	has_end
op	66:26	0:0	4	=
water	66:28	0:0	4	0
water	66:29	0:0	4	;
water	67:4	0:0	4	}
label	68:0	68:3	2	end :
call	69:4	69:16	2	av_free
arg	69:12	69:16	3	spec
water	69:12	0:0	4	spec
water	69:17	0:0	2	;
return	70:4	70:14	2	ret
water	70:11	0:0	3	ret
