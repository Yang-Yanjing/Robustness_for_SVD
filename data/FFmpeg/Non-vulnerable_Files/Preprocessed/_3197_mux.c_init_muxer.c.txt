func	1:0	157:0	0	static int	init_muxer
params	1:21	0:0	1	
param	1:22	1:40	2	AVFormatContext *	s
param	1:42	1:64	2	AVDictionary * *	options
stmnts	0:0	156:14	1	
decl	3:4	3:18	2	int	ret
op	3:12	0:0	2	=
water	3:14	0:0	2	0
water	3:15	0:0	2	,
decl	3:4	3:18	2	int	i
decl	4:4	4:16	2	AVStream	*st
decl	5:4	5:28	2	AVDictionary	*tmp
op	5:22	0:0	2	=
water	5:24	0:0	2	NULL
decl	6:4	6:32	2	AVCodecContext	*codec
op	6:26	0:0	2	=
water	6:28	0:0	2	NULL
decl	7:4	7:35	2	AVOutputFormat	*of
op	7:23	0:0	2	=
water	7:25	0:0	2	s
op	7:26	0:0	2	->
water	7:28	0:0	2	oformat
decl	8:4	8:24	2	AVDictionaryEntry	*e
if	9:4	10:39	2	(options)
cond	9:8	9:8	3	options
water	9:8	0:0	4	options
stmts	10:8	10:39	3	
call	10:8	10:38	4	av_dict_copy
arg	10:21	10:25	5	&tmp
op	10:21	0:0	6	&
water	10:22	0:0	6	tmp
arg	10:27	10:35	5	*options
op	10:27	0:0	6	*
water	10:28	0:0	6	options
arg	10:37	10:38	5	0
water	10:37	0:0	6	0
water	10:39	0:0	4	;
if	11:4	12:17	2	(( ret =av_opt_set_dict (s ,& tmp ) ) < 0)
cond	11:8	11:43	3	( ret =av_opt_set_dict (s ,& tmp ) ) < 0
water	11:8	0:0	4	(
water	11:9	0:0	4	ret
op	11:13	0:0	4	=
call	11:15	11:38	4	av_opt_set_dict
arg	11:31	11:32	5	s
water	11:31	0:0	6	s
arg	11:34	11:38	5	&tmp
op	11:34	0:0	6	&
water	11:35	0:0	6	tmp
water	11:39	0:0	4	)
op	11:41	0:0	4	<
water	11:43	0:0	4	0
stmts	12:8	12:17	3	
goto	12:8	12:17	4	fail
water	12:13	0:0	5	fail
if	13:4	15:17	2	(s -> priv_data && s -> oformat -> priv_class && * ( const AVClass * * ) s -> priv_data == s -> oformat -> priv_class && ( ret =av_opt_set_dict2 (s -> priv_data ,& tmp ,AV_OPT_SEARCH_CHILDREN ) ) < 0)
cond	13:8	14:79	3	s -> priv_data && s -> oformat -> priv_class && * ( const AVClass * * ) s -> priv_data == s -> oformat -> priv_class && ( ret =av_opt_set_dict2 (s -> priv_data ,& tmp ,AV_OPT_SEARCH_CHILDREN ) ) < 0
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	priv_data
op	13:21	0:0	4	&&
water	13:24	0:0	4	s
op	13:25	0:0	4	->
water	13:27	0:0	4	oformat
op	13:34	0:0	4	->
water	13:36	0:0	4	priv_class
op	13:47	0:0	4	&&
op	13:50	0:0	4	*
water	13:51	0:0	4	(
water	13:52	0:0	4	const
water	13:58	0:0	4	AVClass
op	13:65	0:0	4	*
op	13:66	0:0	4	*
water	13:67	0:0	4	)
water	13:68	0:0	4	s
op	13:69	0:0	4	->
water	13:71	0:0	4	priv_data
op	13:80	0:0	4	==
water	13:82	0:0	4	s
op	13:83	0:0	4	->
water	13:85	0:0	4	oformat
op	13:92	0:0	4	->
water	13:94	0:0	4	priv_class
op	13:105	0:0	4	&&
water	14:8	0:0	4	(
water	14:9	0:0	4	ret
op	14:13	0:0	4	=
call	14:15	14:74	4	av_opt_set_dict2
arg	14:32	14:44	5	s->priv_data
water	14:32	0:0	6	s
op	14:33	0:0	6	->
water	14:35	0:0	6	priv_data
arg	14:46	14:50	5	&tmp
op	14:46	0:0	6	&
water	14:47	0:0	6	tmp
arg	14:52	14:74	5	AV_OPT_SEARCH_CHILDREN
water	14:52	0:0	6	AV_OPT_SEARCH_CHILDREN
water	14:75	0:0	4	)
op	14:77	0:0	4	<
water	14:79	0:0	4	0
stmts	15:8	15:17	3	
goto	15:8	15:17	4	fail
water	15:13	0:0	5	fail
if	16:4	32:4	2	(s -> nb_streams && s -> streams [ 0 ] -> codec -> flags & AV_CODEC_FLAG_BITEXACT)
cond	16:8	16:55	3	s -> nb_streams && s -> streams [ 0 ] -> codec -> flags & AV_CODEC_FLAG_BITEXACT
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	nb_streams
op	16:22	0:0	4	&&
water	16:25	0:0	4	s
op	16:26	0:0	4	->
water	16:28	0:0	4	streams
op	16:35	0:0	4	[
water	16:36	0:0	4	0
op	16:37	0:0	4	]
op	16:38	0:0	4	->
water	16:40	0:0	4	codec
op	16:45	0:0	4	->
water	16:47	0:0	4	flags
op	16:53	0:0	4	&
water	16:55	0:0	4	AV_CODEC_FLAG_BITEXACT
stmts	16:79	32:4	3	
water	16:79	0:0	4	{
if	17:8	31:8	4	(! ( s -> flags & AVFMT_FLAG_BITEXACT ))
cond	17:12	17:44	5	! ( s -> flags & AVFMT_FLAG_BITEXACT )
op	17:12	0:0	6	!
water	17:13	0:0	6	(
water	17:14	0:0	6	s
op	17:15	0:0	6	->
water	17:17	0:0	6	flags
op	17:23	0:0	6	&
water	17:25	0:0	6	AVFMT_FLAG_BITEXACT
water	17:44	0:0	6	)
stmts	17:47	31:8	5	
water	17:47	0:0	6	{
call	19:12	23:68	6	av_log
arg	19:19	19:20	7	s
water	19:19	0:0	8	s
arg	19:22	19:36	7	AV_LOG_WARNING
water	19:22	0:0	8	AV_LOG_WARNING
arg	20:19	23:68	7	"Setting the AVFormatContext to bitexact mode, because ""the AVCodecContext is in that mode. This behavior will ""change in the future. To keep the current behavior, set ""AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n"
water	20:19	0:0	8	"Setting the AVFormatContext to bitexact mode, because "
water	21:19	0:0	8	"the AVCodecContext is in that mode. This behavior will "
water	22:19	0:0	8	"change in the future. To keep the current behavior, set "
water	23:19	0:0	8	"AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n"
water	23:69	0:0	6	;
water	24:12	0:0	6	s
op	24:13	0:0	6	->
water	24:15	0:0	6	flags
op	24:21	0:0	6	|=
water	24:24	0:0	6	AVFMT_FLAG_BITEXACT
water	24:43	0:0	6	;
call	26:12	29:68	6	av_log
arg	26:19	26:20	7	s
water	26:19	0:0	8	s
arg	26:22	26:36	7	AV_LOG_WARNING
water	26:22	0:0	8	AV_LOG_WARNING
arg	27:19	29:68	7	"The AVFormatContext is not in set to bitexact mode, only ""the AVCodecContext. If this is not intended, set ""AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n"
water	27:19	0:0	8	"The AVFormatContext is not in set to bitexact mode, only "
water	28:19	0:0	8	"the AVCodecContext. If this is not intended, set "
water	29:19	0:0	8	"AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n"
water	29:69	0:0	6	;
water	31:8	0:0	6	}
water	32:4	0:0	4	}
if	34:4	38:4	2	(s -> nb_streams == 0 && ! ( of -> flags & AVFMT_NOSTREAMS ))
cond	34:8	34:59	3	s -> nb_streams == 0 && ! ( of -> flags & AVFMT_NOSTREAMS )
water	34:8	0:0	4	s
op	34:9	0:0	4	->
water	34:11	0:0	4	nb_streams
op	34:22	0:0	4	==
water	34:25	0:0	4	0
op	34:27	0:0	4	&&
op	34:30	0:0	4	!
water	34:31	0:0	4	(
water	34:32	0:0	4	of
op	34:34	0:0	4	->
water	34:36	0:0	4	flags
op	34:42	0:0	4	&
water	34:44	0:0	4	AVFMT_NOSTREAMS
water	34:59	0:0	4	)
stmts	34:62	38:4	3	
water	34:62	0:0	4	{
call	35:8	35:68	4	av_log
arg	35:15	35:16	5	s
water	35:15	0:0	6	s
arg	35:18	35:30	5	AV_LOG_ERROR
water	35:18	0:0	6	AV_LOG_ERROR
arg	35:32	35:68	5	"No streams to mux were specified\n"
water	35:32	0:0	6	"No streams to mux were specified\n"
water	35:69	0:0	4	;
water	36:8	0:0	4	ret
op	36:12	0:0	4	=
call	36:14	36:28	4	AVERROR
arg	36:22	36:28	5	EINVAL
water	36:22	0:0	6	EINVAL
water	36:29	0:0	4	;
goto	37:8	37:17	4	fail
water	37:13	0:0	5	fail
water	38:4	0:0	4	}
for	39:4	126:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	39:9	39:14	3	i = 0 ;
water	39:9	0:0	4	i
op	39:11	0:0	4	=
water	39:13	0:0	4	0
water	39:14	0:0	4	;
cond	39:16	39:23	3	i < s -> nb_streams
water	39:16	0:0	4	i
op	39:18	0:0	4	<
water	39:20	0:0	4	s
op	39:21	0:0	4	->
water	39:23	0:0	4	nb_streams
forexpr	39:35	39:36	3	i ++
water	39:35	0:0	4	i
op	39:36	0:0	4	++
stmts	39:40	126:4	3	
water	39:40	0:0	4	{
water	40:8	0:0	4	st
op	40:14	0:0	4	=
water	40:16	0:0	4	s
op	40:17	0:0	4	->
water	40:19	0:0	4	streams
op	40:26	0:0	4	[
water	40:27	0:0	4	i
op	40:28	0:0	4	]
water	40:29	0:0	4	;
water	41:8	0:0	4	codec
op	41:14	0:0	4	=
water	41:16	0:0	4	st
op	41:18	0:0	4	->
water	41:20	0:0	4	codec
water	41:25	0:0	4	;
water	43:0	0:0	4	FF_DISABLE_DEPRECATION_WARNINGS
water	44:8	0:0	4	if
water	44:11	0:0	4	(
op	44:12	0:0	4	!
water	44:13	0:0	4	st
op	44:15	0:0	4	->
water	44:17	0:0	4	time_base
op	44:26	0:0	4	.
water	44:27	0:0	4	num
op	44:31	0:0	4	&&
water	44:34	0:0	4	codec
op	44:39	0:0	4	->
water	44:41	0:0	4	time_base
op	44:50	0:0	4	.
water	44:51	0:0	4	num
water	44:54	0:0	4	)
water	44:56	0:0	4	{
call	45:12	47:50	4	av_log
arg	45:19	45:20	5	s
water	45:19	0:0	6	s
arg	45:22	45:36	5	AV_LOG_WARNING
water	45:22	0:0	6	AV_LOG_WARNING
arg	45:38	47:50	5	"Using AVStream.codec.time_base as a ""timebase hint to the muxer is deprecated. Set ""AVStream.time_base instead.\n"
water	45:38	0:0	6	"Using AVStream.codec.time_base as a "
water	46:19	0:0	6	"timebase hint to the muxer is deprecated. Set "
water	47:19	0:0	6	"AVStream.time_base instead.\n"
water	47:51	0:0	4	;
call	48:12	48:82	4	avpriv_set_pts_info
arg	48:32	48:34	5	st
water	48:32	0:0	6	st
arg	48:36	48:38	5	64
water	48:36	0:0	6	64
arg	48:40	48:60	5	codec->time_base.num
water	48:40	0:0	6	codec
op	48:45	0:0	6	->
water	48:47	0:0	6	time_base
op	48:56	0:0	6	.
water	48:57	0:0	6	num
arg	48:62	48:82	5	codec->time_base.den
water	48:62	0:0	6	codec
op	48:67	0:0	6	->
water	48:69	0:0	6	time_base
op	48:78	0:0	6	.
water	48:79	0:0	6	den
water	48:83	0:0	4	;
water	49:8	0:0	4	}
water	50:0	0:0	4	FF_ENABLE_DEPRECATION_WARNINGS
water	52:8	0:0	4	if
water	52:11	0:0	4	(
op	52:12	0:0	4	!
water	52:13	0:0	4	st
op	52:15	0:0	4	->
water	52:17	0:0	4	time_base
op	52:26	0:0	4	.
water	52:27	0:0	4	num
water	52:30	0:0	4	)
water	52:32	0:0	4	{
water	54:12	0:0	4	if
water	54:15	0:0	4	(
water	54:16	0:0	4	codec
op	54:21	0:0	4	->
water	54:23	0:0	4	codec_type
op	54:34	0:0	4	==
water	54:37	0:0	4	AVMEDIA_TYPE_AUDIO
op	54:56	0:0	4	&&
water	54:59	0:0	4	codec
op	54:64	0:0	4	->
water	54:66	0:0	4	sample_rate
water	54:77	0:0	4	)
call	55:16	55:65	4	avpriv_set_pts_info
arg	55:36	55:38	5	st
water	55:36	0:0	6	st
arg	55:40	55:42	5	64
water	55:40	0:0	6	64
arg	55:44	55:45	5	1
water	55:44	0:0	6	1
arg	55:47	55:65	5	codec->sample_rate
water	55:47	0:0	6	codec
op	55:52	0:0	6	->
water	55:54	0:0	6	sample_rate
water	55:66	0:0	4	;
water	56:12	0:0	4	else
call	57:16	57:52	4	avpriv_set_pts_info
arg	57:36	57:38	5	st
water	57:36	0:0	6	st
arg	57:40	57:42	5	33
water	57:40	0:0	6	33
arg	57:44	57:45	5	1
water	57:44	0:0	6	1
arg	57:47	57:52	5	90000
water	57:47	0:0	6	90000
water	57:53	0:0	4	;
water	58:8	0:0	4	}
water	59:8	0:0	4	switch
water	59:15	0:0	4	(
water	59:16	0:0	4	codec
op	59:21	0:0	4	->
water	59:23	0:0	4	codec_type
water	59:33	0:0	4	)
water	59:35	0:0	4	{
water	60:8	0:0	4	case
water	60:13	0:0	4	AVMEDIA_TYPE_AUDIO
water	60:31	0:0	4	:
water	61:12	0:0	4	if
water	61:15	0:0	4	(
water	61:16	0:0	4	codec
op	61:21	0:0	4	->
water	61:23	0:0	4	sample_rate
op	61:35	0:0	4	<=
water	61:38	0:0	4	0
water	61:39	0:0	4	)
water	61:41	0:0	4	{
call	62:16	62:63	4	av_log
arg	62:23	62:24	5	s
water	62:23	0:0	6	s
arg	62:26	62:38	5	AV_LOG_ERROR
water	62:26	0:0	6	AV_LOG_ERROR
arg	62:40	62:63	5	"sample rate not set\n"
water	62:40	0:0	6	"sample rate not set\n"
water	62:64	0:0	4	;
water	63:16	0:0	4	ret
op	63:20	0:0	4	=
call	63:22	63:36	4	AVERROR
arg	63:30	63:36	5	EINVAL
water	63:30	0:0	6	EINVAL
water	63:37	0:0	4	;
water	64:16	0:0	4	goto
water	64:21	0:0	4	fail
water	64:25	0:0	4	;
water	65:12	0:0	4	}
water	66:12	0:0	4	if
water	66:15	0:0	4	(
op	66:16	0:0	4	!
water	66:17	0:0	4	codec
op	66:22	0:0	4	->
water	66:24	0:0	4	block_align
water	66:35	0:0	4	)
water	67:16	0:0	4	codec
op	67:21	0:0	4	->
water	67:23	0:0	4	block_align
op	67:35	0:0	4	=
water	67:37	0:0	4	codec
op	67:42	0:0	4	->
water	67:44	0:0	4	channels
call	67:53	68:75	4	*av_get_bits_per_sample
arg	68:60	68:75	5	codec->codec_id
water	68:60	0:0	6	codec
op	68:65	0:0	6	->
water	68:67	0:0	6	codec_id
op	68:77	0:0	4	>>
water	68:80	0:0	4	3
water	68:81	0:0	4	;
water	69:12	0:0	4	break
water	69:17	0:0	4	;
water	70:8	0:0	4	case
water	70:13	0:0	4	AVMEDIA_TYPE_VIDEO
water	70:31	0:0	4	:
water	71:12	0:0	4	if
water	71:15	0:0	4	(
water	71:16	0:0	4	(
water	71:17	0:0	4	codec
op	71:22	0:0	4	->
water	71:24	0:0	4	width
op	71:30	0:0	4	<=
water	71:33	0:0	4	0
op	71:35	0:0	4	||
water	71:38	0:0	4	codec
op	71:43	0:0	4	->
water	71:45	0:0	4	height
op	71:52	0:0	4	<=
water	71:55	0:0	4	0
water	71:56	0:0	4	)
op	71:58	0:0	4	&&
op	72:16	0:0	4	!
water	72:17	0:0	4	(
water	72:18	0:0	4	of
op	72:20	0:0	4	->
water	72:22	0:0	4	flags
op	72:28	0:0	4	&
water	72:30	0:0	4	AVFMT_NODIMENSIONS
water	72:48	0:0	4	)
water	72:49	0:0	4	)
water	72:51	0:0	4	{
call	73:16	73:62	4	av_log
arg	73:23	73:24	5	s
water	73:23	0:0	6	s
arg	73:26	73:38	5	AV_LOG_ERROR
water	73:26	0:0	6	AV_LOG_ERROR
arg	73:40	73:62	5	"dimensions not set\n"
water	73:40	0:0	6	"dimensions not set\n"
water	73:63	0:0	4	;
water	74:16	0:0	4	ret
op	74:20	0:0	4	=
call	74:22	74:36	4	AVERROR
arg	74:30	74:36	5	EINVAL
water	74:30	0:0	6	EINVAL
water	74:37	0:0	4	;
water	75:16	0:0	4	goto
water	75:21	0:0	4	fail
water	75:25	0:0	4	;
water	76:12	0:0	4	}
water	77:12	0:0	4	if
water	77:15	0:0	4	(
call	77:16	77:76	4	av_cmp_q
arg	77:25	77:48	5	st->sample_aspect_ratio
water	77:25	0:0	6	st
op	77:27	0:0	6	->
water	77:29	0:0	6	sample_aspect_ratio
arg	77:50	77:76	5	codec->sample_aspect_ratio
water	77:50	0:0	6	codec
op	77:55	0:0	6	->
water	77:57	0:0	6	sample_aspect_ratio
op	78:16	0:0	4	&&
call	78:19	78:93	4	FFABS
arg	78:25	78:93	5	av_q2d(st->sample_aspect_ratio)-av_q2d(codec->sample_aspect_ratio)
call	78:25	78:55	6	av_q2d
arg	78:32	78:55	7	st->sample_aspect_ratio
water	78:32	0:0	8	st
op	78:34	0:0	8	->
water	78:36	0:0	8	sample_aspect_ratio
op	78:57	0:0	6	-
call	78:59	78:92	6	av_q2d
arg	78:66	78:92	7	codec->sample_aspect_ratio
water	78:66	0:0	8	codec
op	78:71	0:0	8	->
water	78:73	0:0	8	sample_aspect_ratio
op	78:95	0:0	4	>
water	78:97	0:0	4	0
op	78:98	0:0	4	.
water	78:99	0:0	4	004
call	78:102	78:133	4	*av_q2d
arg	78:110	78:133	5	st->sample_aspect_ratio
water	78:110	0:0	6	st
op	78:112	0:0	6	->
water	78:114	0:0	6	sample_aspect_ratio
water	79:12	0:0	4	)
water	79:14	0:0	4	{
water	80:16	0:0	4	if
water	80:19	0:0	4	(
water	80:20	0:0	4	st
op	80:22	0:0	4	->
water	80:24	0:0	4	sample_aspect_ratio
op	80:43	0:0	4	.
water	80:44	0:0	4	num
op	80:48	0:0	4	!=
water	80:51	0:0	4	0
op	80:53	0:0	4	&&
water	81:20	0:0	4	st
op	81:22	0:0	4	->
water	81:24	0:0	4	sample_aspect_ratio
op	81:43	0:0	4	.
water	81:44	0:0	4	den
op	81:48	0:0	4	!=
water	81:51	0:0	4	0
op	81:53	0:0	4	&&
water	82:20	0:0	4	codec
op	82:25	0:0	4	->
water	82:27	0:0	4	sample_aspect_ratio
op	82:46	0:0	4	.
water	82:47	0:0	4	num
op	82:51	0:0	4	!=
water	82:54	0:0	4	0
op	82:56	0:0	4	&&
water	83:20	0:0	4	codec
op	83:25	0:0	4	->
water	83:27	0:0	4	sample_aspect_ratio
op	83:46	0:0	4	.
water	83:47	0:0	4	den
op	83:51	0:0	4	!=
water	83:54	0:0	4	0
water	83:55	0:0	4	)
water	83:57	0:0	4	{
call	84:20	88:57	4	av_log
arg	84:27	84:28	5	s
water	84:27	0:0	6	s
arg	84:30	84:42	5	AV_LOG_ERROR
water	84:30	0:0	6	AV_LOG_ERROR
arg	84:44	85:64	5	"Aspect ratio mismatch between muxer ""(%d/%d) and encoder layer (%d/%d)\n"
water	84:44	0:0	6	"Aspect ratio mismatch between muxer "
water	85:27	0:0	6	"(%d/%d) and encoder layer (%d/%d)\n"
arg	86:27	86:54	5	st->sample_aspect_ratio.num
water	86:27	0:0	6	st
op	86:29	0:0	6	->
water	86:31	0:0	6	sample_aspect_ratio
op	86:50	0:0	6	.
water	86:51	0:0	6	num
arg	86:56	86:83	5	st->sample_aspect_ratio.den
water	86:56	0:0	6	st
op	86:58	0:0	6	->
water	86:60	0:0	6	sample_aspect_ratio
op	86:79	0:0	6	.
water	86:80	0:0	6	den
arg	87:27	87:57	5	codec->sample_aspect_ratio.num
water	87:27	0:0	6	codec
op	87:32	0:0	6	->
water	87:34	0:0	6	sample_aspect_ratio
op	87:53	0:0	6	.
water	87:54	0:0	6	num
arg	88:27	88:57	5	codec->sample_aspect_ratio.den
water	88:27	0:0	6	codec
op	88:32	0:0	6	->
water	88:34	0:0	6	sample_aspect_ratio
op	88:53	0:0	6	.
water	88:54	0:0	6	den
water	88:58	0:0	4	;
water	89:20	0:0	4	ret
op	89:24	0:0	4	=
call	89:26	89:40	4	AVERROR
arg	89:34	89:40	5	EINVAL
water	89:34	0:0	6	EINVAL
water	89:41	0:0	4	;
water	90:20	0:0	4	goto
water	90:25	0:0	4	fail
water	90:29	0:0	4	;
water	91:16	0:0	4	}
water	92:12	0:0	4	}
water	93:12	0:0	4	break
water	93:17	0:0	4	;
water	94:8	0:0	4	}
water	95:8	0:0	4	if
water	95:11	0:0	4	(
water	95:12	0:0	4	of
op	95:14	0:0	4	->
water	95:16	0:0	4	codec_tag
water	95:25	0:0	4	)
water	95:27	0:0	4	{
water	96:12	0:0	4	if
water	96:15	0:0	4	(
water	96:19	0:0	4	codec
op	96:24	0:0	4	->
water	96:26	0:0	4	codec_tag
op	97:16	0:0	4	&&
water	97:19	0:0	4	codec
op	97:24	0:0	4	->
water	97:26	0:0	4	codec_id
op	97:35	0:0	4	==
water	97:38	0:0	4	AV_CODEC_ID_RAWVIDEO
op	98:16	0:0	4	&&
water	98:19	0:0	4	(
call	98:23	98:70	4	av_codec_get_tag
arg	98:40	98:53	5	of->codec_tag
water	98:40	0:0	6	of
op	98:42	0:0	6	->
water	98:44	0:0	6	codec_tag
arg	98:55	98:70	5	codec->codec_id
water	98:55	0:0	6	codec
op	98:60	0:0	6	->
water	98:62	0:0	6	codec_id
op	98:72	0:0	4	==
water	98:75	0:0	4	0
op	99:20	0:0	4	||
call	99:23	99:70	4	av_codec_get_tag
arg	99:40	99:53	5	of->codec_tag
water	99:40	0:0	6	of
op	99:42	0:0	6	->
water	99:44	0:0	6	codec_tag
arg	99:55	99:70	5	codec->codec_id
water	99:55	0:0	6	codec
op	99:60	0:0	6	->
water	99:62	0:0	6	codec_id
op	99:72	0:0	4	==
call	99:75	99:99	4	MKTAG
arg	99:81	99:84	5	'r'
water	99:81	0:0	6	'r'
arg	99:86	99:89	5	'a'
water	99:86	0:0	6	'a'
arg	99:91	99:94	5	'w'
water	99:91	0:0	6	'w'
arg	99:96	99:99	5	' '
water	99:96	0:0	6	' '
water	99:100	0:0	4	)
op	100:16	0:0	4	&&
op	100:19	0:0	4	!
call	100:20	100:44	4	validate_codec_tag
arg	100:39	100:40	5	s
water	100:39	0:0	6	s
arg	100:42	100:44	5	st
water	100:42	0:0	6	st
water	100:45	0:0	4	)
water	100:47	0:0	4	{
water	103:16	0:0	4	codec
op	103:21	0:0	4	->
water	103:23	0:0	4	codec_tag
op	103:33	0:0	4	=
water	103:35	0:0	4	0
water	103:36	0:0	4	;
water	104:12	0:0	4	}
water	105:12	0:0	4	if
water	105:15	0:0	4	(
water	105:16	0:0	4	codec
op	105:21	0:0	4	->
water	105:23	0:0	4	codec_tag
water	105:32	0:0	4	)
water	105:34	0:0	4	{
water	106:16	0:0	4	if
water	106:19	0:0	4	(
op	106:20	0:0	4	!
call	106:21	106:45	4	validate_codec_tag
arg	106:40	106:41	5	s
water	106:40	0:0	6	s
arg	106:43	106:45	5	st
water	106:43	0:0	6	st
water	106:46	0:0	4	)
water	106:48	0:0	4	{
water	107:20	0:0	4	char
water	107:25	0:0	4	tagbuf
op	107:31	0:0	4	[
water	107:32	0:0	4	32
op	107:34	0:0	4	]
water	107:35	0:0	4	,
water	107:37	0:0	4	tagbuf2
op	107:44	0:0	4	[
water	107:45	0:0	4	32
op	107:47	0:0	4	]
water	107:48	0:0	4	;
call	108:20	108:84	4	av_get_codec_tag_string
arg	108:44	108:50	5	tagbuf
water	108:44	0:0	6	tagbuf
arg	108:52	108:66	5	sizeof(tagbuf)
op	108:52	0:0	6	sizeof
water	108:58	0:0	6	(
water	108:59	0:0	6	tagbuf
water	108:65	0:0	6	)
arg	108:68	108:84	5	codec->codec_tag
water	108:68	0:0	6	codec
op	108:73	0:0	6	->
water	108:75	0:0	6	codec_tag
water	108:85	0:0	4	;
call	109:20	109:126	4	av_get_codec_tag_string
arg	109:44	109:51	5	tagbuf2
water	109:44	0:0	6	tagbuf2
arg	109:53	109:68	5	sizeof(tagbuf2)
op	109:53	0:0	6	sizeof
water	109:59	0:0	6	(
water	109:60	0:0	6	tagbuf2
water	109:67	0:0	6	)
arg	109:70	109:126	5	av_codec_get_tag(s->oformat->codec_tag,codec->codec_id)
call	109:70	109:125	6	av_codec_get_tag
arg	109:87	109:108	7	s->oformat->codec_tag
water	109:87	0:0	8	s
op	109:88	0:0	8	->
water	109:90	0:0	8	oformat
op	109:97	0:0	8	->
water	109:99	0:0	8	codec_tag
arg	109:110	109:125	7	codec->codec_id
water	109:110	0:0	8	codec
op	109:115	0:0	8	->
water	109:117	0:0	8	codec_id
water	109:127	0:0	4	;
call	110:20	112:77	4	av_log
arg	110:27	110:28	5	s
water	110:27	0:0	6	s
arg	110:30	110:42	5	AV_LOG_ERROR
water	110:30	0:0	6	AV_LOG_ERROR
arg	111:27	111:88	5	"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\n"
water	111:27	0:0	6	"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\n"
arg	112:27	112:33	5	tagbuf
water	112:27	0:0	6	tagbuf
arg	112:35	112:51	5	codec->codec_tag
water	112:35	0:0	6	codec
op	112:40	0:0	6	->
water	112:42	0:0	6	codec_tag
arg	112:53	112:68	5	codec->codec_id
water	112:53	0:0	6	codec
op	112:58	0:0	6	->
water	112:60	0:0	6	codec_id
arg	112:70	112:77	5	tagbuf2
water	112:70	0:0	6	tagbuf2
water	112:78	0:0	4	;
water	113:20	0:0	4	ret
op	113:24	0:0	4	=
water	113:26	0:0	4	AVERROR_INVALIDDATA
water	113:45	0:0	4	;
water	114:20	0:0	4	goto
water	114:25	0:0	4	fail
water	114:29	0:0	4	;
water	115:16	0:0	4	}
water	116:12	0:0	4	}
water	116:14	0:0	4	else
water	117:16	0:0	4	codec
op	117:21	0:0	4	->
water	117:23	0:0	4	codec_tag
op	117:33	0:0	4	=
call	117:35	117:82	4	av_codec_get_tag
arg	117:52	117:65	5	of->codec_tag
water	117:52	0:0	6	of
op	117:54	0:0	6	->
water	117:56	0:0	6	codec_tag
arg	117:67	117:82	5	codec->codec_id
water	117:67	0:0	6	codec
op	117:72	0:0	6	->
water	117:74	0:0	6	codec_id
water	117:83	0:0	4	;
water	118:8	0:0	4	}
water	119:8	0:0	4	if
water	119:11	0:0	4	(
water	119:12	0:0	4	of
op	119:14	0:0	4	->
water	119:16	0:0	4	flags
op	119:22	0:0	4	&
water	119:24	0:0	4	AVFMT_GLOBALHEADER
op	119:43	0:0	4	&&
op	120:12	0:0	4	!
water	120:13	0:0	4	(
water	120:14	0:0	4	codec
op	120:19	0:0	4	->
water	120:21	0:0	4	flags
op	120:27	0:0	4	&
water	120:29	0:0	4	AV_CODEC_FLAG_GLOBAL_HEADER
water	120:56	0:0	4	)
water	120:57	0:0	4	)
call	121:12	123:70	4	av_log
arg	121:19	121:20	5	s
water	121:19	0:0	6	s
arg	121:22	121:36	5	AV_LOG_WARNING
water	121:22	0:0	6	AV_LOG_WARNING
arg	122:19	123:67	5	"Codec for stream %d does not use global headers ""but container format requires global headers\n"
water	122:19	0:0	6	"Codec for stream %d does not use global headers "
water	123:19	0:0	6	"but container format requires global headers\n"
arg	123:69	123:70	5	i
water	123:69	0:0	6	i
water	123:71	0:0	4	;
if	124:8	125:49	4	(codec -> codec_type != AVMEDIA_TYPE_ATTACHMENT)
cond	124:12	124:33	5	codec -> codec_type != AVMEDIA_TYPE_ATTACHMENT
water	124:12	0:0	6	codec
op	124:17	0:0	6	->
water	124:19	0:0	6	codec_type
op	124:30	0:0	6	!=
water	124:33	0:0	6	AVMEDIA_TYPE_ATTACHMENT
stmts	125:12	125:49	5	
water	125:12	0:0	6	s
op	125:13	0:0	6	->
water	125:15	0:0	6	internal
op	125:23	0:0	6	->
water	125:25	0:0	6	nb_interleaved_streams
op	125:47	0:0	6	++
water	125:49	0:0	6	;
water	126:4	0:0	4	}
if	127:4	139:4	2	(! s -> priv_data && of -> priv_data_size > 0)
cond	127:8	127:46	3	! s -> priv_data && of -> priv_data_size > 0
op	127:8	0:0	4	!
water	127:9	0:0	4	s
op	127:10	0:0	4	->
water	127:12	0:0	4	priv_data
op	127:22	0:0	4	&&
water	127:25	0:0	4	of
op	127:27	0:0	4	->
water	127:29	0:0	4	priv_data_size
op	127:44	0:0	4	>
water	127:46	0:0	4	0
stmts	127:49	139:4	3	
water	127:49	0:0	4	{
water	128:8	0:0	4	s
op	128:9	0:0	4	->
water	128:11	0:0	4	priv_data
op	128:21	0:0	4	=
call	128:23	128:52	4	av_mallocz
arg	128:34	128:52	5	of->priv_data_size
water	128:34	0:0	6	of
op	128:36	0:0	6	->
water	128:38	0:0	6	priv_data_size
water	128:53	0:0	4	;
if	129:8	132:8	4	(! s -> priv_data)
cond	129:12	129:16	5	! s -> priv_data
op	129:12	0:0	6	!
water	129:13	0:0	6	s
op	129:14	0:0	6	->
water	129:16	0:0	6	priv_data
stmts	129:27	132:8	5	
water	129:27	0:0	6	{
water	130:12	0:0	6	ret
op	130:16	0:0	6	=
call	130:18	130:32	6	AVERROR
arg	130:26	130:32	7	ENOMEM
water	130:26	0:0	8	ENOMEM
water	130:33	0:0	6	;
goto	131:12	131:21	6	fail
water	131:17	0:0	7	fail
water	132:8	0:0	6	}
if	133:8	138:8	4	(of -> priv_class)
cond	133:12	133:16	5	of -> priv_class
water	133:12	0:0	6	of
op	133:14	0:0	6	->
water	133:16	0:0	6	priv_class
stmts	133:28	138:8	5	
water	133:28	0:0	6	{
op	134:12	0:0	6	*
water	134:13	0:0	6	(
water	134:14	0:0	6	const
water	134:20	0:0	6	AVClass
op	134:28	0:0	6	*
op	134:29	0:0	6	*
water	134:30	0:0	6	)
water	134:31	0:0	6	s
op	134:32	0:0	6	->
water	134:34	0:0	6	priv_data
op	134:44	0:0	6	=
water	134:46	0:0	6	of
op	134:48	0:0	6	->
water	134:50	0:0	6	priv_class
water	134:60	0:0	6	;
call	135:12	135:44	6	av_opt_set_defaults
arg	135:32	135:44	7	s->priv_data
water	135:32	0:0	8	s
op	135:33	0:0	8	->
water	135:35	0:0	8	priv_data
water	135:45	0:0	6	;
if	136:12	137:25	6	(( ret =av_opt_set_dict2 (s -> priv_data ,& tmp ,AV_OPT_SEARCH_CHILDREN ) ) < 0)
cond	136:16	136:87	7	( ret =av_opt_set_dict2 (s -> priv_data ,& tmp ,AV_OPT_SEARCH_CHILDREN ) ) < 0
water	136:16	0:0	8	(
water	136:17	0:0	8	ret
op	136:21	0:0	8	=
call	136:23	136:82	8	av_opt_set_dict2
arg	136:40	136:52	9	s->priv_data
water	136:40	0:0	10	s
op	136:41	0:0	10	->
water	136:43	0:0	10	priv_data
arg	136:54	136:58	9	&tmp
op	136:54	0:0	10	&
water	136:55	0:0	10	tmp
arg	136:60	136:82	9	AV_OPT_SEARCH_CHILDREN
water	136:60	0:0	10	AV_OPT_SEARCH_CHILDREN
water	136:83	0:0	8	)
op	136:85	0:0	8	<
water	136:87	0:0	8	0
stmts	137:16	137:25	7	
goto	137:16	137:25	8	fail
water	137:21	0:0	9	fail
water	138:8	0:0	6	}
water	139:4	0:0	4	}
if	141:4	143:4	2	(! ( s -> flags & AVFMT_FLAG_BITEXACT ))
cond	141:8	141:40	3	! ( s -> flags & AVFMT_FLAG_BITEXACT )
op	141:8	0:0	4	!
water	141:9	0:0	4	(
water	141:10	0:0	4	s
op	141:11	0:0	4	->
water	141:13	0:0	4	flags
op	141:19	0:0	4	&
water	141:21	0:0	4	AVFMT_FLAG_BITEXACT
water	141:40	0:0	4	)
stmts	141:43	143:4	3	
water	141:43	0:0	4	{
call	142:8	142:65	4	av_dict_set
arg	142:20	142:32	5	&s->metadata
op	142:20	0:0	6	&
water	142:21	0:0	6	s
op	142:22	0:0	6	->
water	142:24	0:0	6	metadata
arg	142:34	142:43	5	"encoder"
water	142:34	0:0	6	"encoder"
arg	142:45	142:62	5	LIBAVFORMAT_IDENT
water	142:45	0:0	6	LIBAVFORMAT_IDENT
arg	142:64	142:65	5	0
water	142:64	0:0	6	0
water	142:66	0:0	4	;
water	143:4	0:0	4	}
else	143:6	145:4	2
stmts	143:11	145:4	3	
water	143:11	0:0	4	{
call	144:8	144:52	4	av_dict_set
arg	144:20	144:32	5	&s->metadata
op	144:20	0:0	6	&
water	144:21	0:0	6	s
op	144:22	0:0	6	->
water	144:24	0:0	6	metadata
arg	144:34	144:43	5	"encoder"
water	144:34	0:0	6	"encoder"
arg	144:45	144:49	5	NULL
water	144:45	0:0	6	NULL
arg	144:51	144:52	5	0
water	144:51	0:0	6	0
water	144:53	0:0	4	;
water	145:4	0:0	4	}
for	146:4	148:4	2	(e = NULL ;e =av_dict_get (s -> metadata ,"encoder-" ,e ,AV_DICT_IGNORE_SUFFIX );)
forinit	146:9	146:17	3	e = NULL ;
water	146:9	0:0	4	e
op	146:11	0:0	4	=
water	146:13	0:0	4	NULL
water	146:17	0:0	4	;
cond	146:19	146:84	3	e =av_dict_get (s -> metadata ,"encoder-" ,e ,AV_DICT_IGNORE_SUFFIX )
water	146:19	0:0	4	e
op	146:21	0:0	4	=
call	146:23	146:84	4	av_dict_get
arg	146:35	146:46	5	s->metadata
water	146:35	0:0	6	s
op	146:36	0:0	6	->
water	146:38	0:0	6	metadata
arg	146:48	146:58	5	"encoder-"
water	146:48	0:0	6	"encoder-"
arg	146:60	146:61	5	e
water	146:60	0:0	6	e
arg	146:63	146:84	5	AV_DICT_IGNORE_SUFFIX
water	146:63	0:0	6	AV_DICT_IGNORE_SUFFIX
forexpr	0:0	0:0	3	
stmts	146:89	148:4	3	
water	146:89	0:0	4	{
call	147:8	147:49	4	av_dict_set
arg	147:20	147:32	5	&s->metadata
op	147:20	0:0	6	&
water	147:21	0:0	6	s
op	147:22	0:0	6	->
water	147:24	0:0	6	metadata
arg	147:34	147:40	5	e->key
water	147:34	0:0	6	e
op	147:35	0:0	6	->
water	147:37	0:0	6	key
arg	147:42	147:46	5	NULL
water	147:42	0:0	6	NULL
arg	147:48	147:49	5	0
water	147:48	0:0	6	0
water	147:50	0:0	4	;
water	148:4	0:0	4	}
if	149:4	152:4	2	(options)
cond	149:8	149:8	3	options
water	149:8	0:0	4	options
stmts	149:17	152:4	3	
water	149:17	0:0	4	{
call	150:9	150:29	4	av_dict_free
arg	150:22	150:29	5	options
water	150:22	0:0	6	options
water	150:30	0:0	4	;
op	151:9	0:0	4	*
water	151:10	0:0	4	options
op	151:18	0:0	4	=
water	151:20	0:0	4	tmp
water	151:23	0:0	4	;
water	152:4	0:0	4	}
return	153:4	153:12	2	0
water	153:11	0:0	3	0
label	154:0	154:4	2	fail :
call	155:4	155:21	2	av_dict_free
arg	155:17	155:21	3	&tmp
op	155:17	0:0	4	&
water	155:18	0:0	4	tmp
water	155:22	0:0	2	;
return	156:4	156:14	2	ret
water	156:11	0:0	3	ret
