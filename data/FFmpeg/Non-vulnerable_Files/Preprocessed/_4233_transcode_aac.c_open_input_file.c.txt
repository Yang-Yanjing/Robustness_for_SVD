func	1:0	46:0	0	static int	open_input_file
params	1:26	0:0	1	
param	1:27	1:47	2	const char *	filename
param	2:27	2:65	2	AVFormatContext * *	input_format_context
param	3:27	3:63	2	AVCodecContext * *	input_codec_context
stmnts	0:0	45:12	1	
decl	5:4	5:24	2	AVCodec	*input_codec
decl	6:4	6:13	2	int	error
if	8:4	14:4	2	(( error =avformat_open_input (input_format_context ,filename ,NULL ,NULL ) ) < 0)
cond	8:8	9:46	3	( error =avformat_open_input (input_format_context ,filename ,NULL ,NULL ) ) < 0
water	8:8	0:0	4	(
water	8:9	0:0	4	error
op	8:15	0:0	4	=
call	8:17	9:41	4	avformat_open_input
arg	8:37	8:57	5	input_format_context
water	8:37	0:0	6	input_format_context
arg	8:59	8:67	5	filename
water	8:59	0:0	6	filename
arg	8:69	8:73	5	NULL
water	8:69	0:0	6	NULL
arg	9:37	9:41	5	NULL
water	9:37	0:0	6	NULL
water	9:42	0:0	4	)
op	9:44	0:0	4	<
water	9:46	0:0	4	0
stmts	9:49	14:4	3	
water	9:49	0:0	4	{
call	10:8	11:47	4	fprintf
arg	10:16	10:22	5	stderr
water	10:16	0:0	6	stderr
arg	10:24	10:71	5	"Could not open input file '%s' (error '%s')\n"
water	10:24	0:0	6	"Could not open input file '%s' (error '%s')\n"
arg	11:16	11:24	5	filename
water	11:16	0:0	6	filename
arg	11:26	11:47	5	get_error_text(error)
call	11:26	11:46	6	get_error_text
arg	11:41	11:46	7	error
water	11:41	0:0	8	error
water	11:48	0:0	4	;
op	12:8	0:0	4	*
water	12:9	0:0	4	input_format_context
op	12:30	0:0	4	=
water	12:32	0:0	4	NULL
water	12:36	0:0	4	;
return	13:8	13:20	4	error
water	13:15	0:0	5	error
water	14:4	0:0	4	}
if	16:4	21:4	2	(( error =avformat_find_stream_info (* input_format_context ,NULL ) ) < 0)
cond	16:8	16:75	3	( error =avformat_find_stream_info (* input_format_context ,NULL ) ) < 0
water	16:8	0:0	4	(
water	16:9	0:0	4	error
op	16:15	0:0	4	=
call	16:17	16:70	4	avformat_find_stream_info
arg	16:43	16:64	5	*input_format_context
op	16:43	0:0	6	*
water	16:44	0:0	6	input_format_context
arg	16:66	16:70	5	NULL
water	16:66	0:0	6	NULL
water	16:71	0:0	4	)
op	16:73	0:0	4	<
water	16:75	0:0	4	0
stmts	16:78	21:4	3	
water	16:78	0:0	4	{
call	17:8	18:37	4	fprintf
arg	17:16	17:22	5	stderr
water	17:16	0:0	6	stderr
arg	17:24	17:72	5	"Could not open find stream info (error '%s')\n"
water	17:24	0:0	6	"Could not open find stream info (error '%s')\n"
arg	18:16	18:37	5	get_error_text(error)
call	18:16	18:36	6	get_error_text
arg	18:31	18:36	7	error
water	18:31	0:0	8	error
water	18:38	0:0	4	;
call	19:8	19:49	4	avformat_close_input
arg	19:29	19:49	5	input_format_context
water	19:29	0:0	6	input_format_context
water	19:50	0:0	4	;
return	20:8	20:20	4	error
water	20:15	0:0	5	error
water	21:4	0:0	4	}
if	23:4	28:4	2	(( * input_format_context ) -> nb_streams != 1)
cond	23:8	23:47	3	( * input_format_context ) -> nb_streams != 1
water	23:8	0:0	4	(
op	23:9	0:0	4	*
water	23:10	0:0	4	input_format_context
water	23:30	0:0	4	)
op	23:31	0:0	4	->
water	23:33	0:0	4	nb_streams
op	23:44	0:0	4	!=
water	23:47	0:0	4	1
stmts	23:50	28:4	3	
water	23:50	0:0	4	{
call	24:8	25:51	4	fprintf
arg	24:16	24:22	5	stderr
water	24:16	0:0	6	stderr
arg	24:24	24:73	5	"Expected one audio input stream, but found %d\n"
water	24:24	0:0	6	"Expected one audio input stream, but found %d\n"
arg	25:16	25:51	5	(*input_format_context)->nb_streams
water	25:16	0:0	6	(
op	25:17	0:0	6	*
water	25:18	0:0	6	input_format_context
water	25:38	0:0	6	)
op	25:39	0:0	6	->
water	25:41	0:0	6	nb_streams
water	25:52	0:0	4	;
call	26:8	26:49	4	avformat_close_input
arg	26:29	26:49	5	input_format_context
water	26:29	0:0	6	input_format_context
water	26:50	0:0	4	;
return	27:8	27:27	4	AVERROR_EXIT
water	27:15	0:0	5	AVERROR_EXIT
water	28:4	0:0	4	}
if	30:4	34:4	2	(! ( input_codec =avcodec_find_decoder (( * input_format_context ) -> streams [ 0 ] -> codec -> codec_id ) ))
cond	30:8	30:98	3	! ( input_codec =avcodec_find_decoder (( * input_format_context ) -> streams [ 0 ] -> codec -> codec_id ) )
op	30:8	0:0	4	!
water	30:9	0:0	4	(
water	30:10	0:0	4	input_codec
op	30:22	0:0	4	=
call	30:24	30:97	4	avcodec_find_decoder
arg	30:45	30:97	5	(*input_format_context)->streams[0]->codec->codec_id
water	30:45	0:0	6	(
op	30:46	0:0	6	*
water	30:47	0:0	6	input_format_context
water	30:67	0:0	6	)
op	30:68	0:0	6	->
water	30:70	0:0	6	streams
op	30:77	0:0	6	[
water	30:78	0:0	6	0
op	30:79	0:0	6	]
op	30:80	0:0	6	->
water	30:82	0:0	6	codec
op	30:87	0:0	6	->
water	30:89	0:0	6	codec_id
water	30:98	0:0	4	)
stmts	30:101	34:4	3	
water	30:101	0:0	4	{
call	31:8	31:54	4	fprintf
arg	31:16	31:22	5	stderr
water	31:16	0:0	6	stderr
arg	31:24	31:54	5	"Could not find input codec\n"
water	31:24	0:0	6	"Could not find input codec\n"
water	31:55	0:0	4	;
call	32:8	32:49	4	avformat_close_input
arg	32:29	32:49	5	input_format_context
water	32:29	0:0	6	input_format_context
water	32:50	0:0	4	;
return	33:8	33:27	4	AVERROR_EXIT
water	33:15	0:0	5	AVERROR_EXIT
water	34:4	0:0	4	}
if	36:4	42:4	2	(( error =avcodec_open2 (( * input_format_context ) -> streams [ 0 ] -> codec ,input_codec ,NULL ) ) < 0)
cond	36:8	37:53	3	( error =avcodec_open2 (( * input_format_context ) -> streams [ 0 ] -> codec ,input_codec ,NULL ) ) < 0
water	36:8	0:0	4	(
water	36:9	0:0	4	error
op	36:15	0:0	4	=
call	36:17	37:48	4	avcodec_open2
arg	36:31	36:73	5	(*input_format_context)->streams[0]->codec
water	36:31	0:0	6	(
op	36:32	0:0	6	*
water	36:33	0:0	6	input_format_context
water	36:53	0:0	6	)
op	36:54	0:0	6	->
water	36:56	0:0	6	streams
op	36:63	0:0	6	[
water	36:64	0:0	6	0
op	36:65	0:0	6	]
op	36:66	0:0	6	->
water	36:68	0:0	6	codec
arg	37:31	37:42	5	input_codec
water	37:31	0:0	6	input_codec
arg	37:44	37:48	5	NULL
water	37:44	0:0	6	NULL
water	37:49	0:0	4	)
op	37:51	0:0	4	<
water	37:53	0:0	4	0
stmts	37:56	42:4	3	
water	37:56	0:0	4	{
call	38:8	39:37	4	fprintf
arg	38:16	38:22	5	stderr
water	38:16	0:0	6	stderr
arg	38:24	38:67	5	"Could not open input codec (error '%s')\n"
water	38:24	0:0	6	"Could not open input codec (error '%s')\n"
arg	39:16	39:37	5	get_error_text(error)
call	39:16	39:36	6	get_error_text
arg	39:31	39:36	7	error
water	39:31	0:0	8	error
water	39:38	0:0	4	;
call	40:8	40:49	4	avformat_close_input
arg	40:29	40:49	5	input_format_context
water	40:29	0:0	6	input_format_context
water	40:50	0:0	4	;
return	41:8	41:20	4	error
water	41:15	0:0	5	error
water	42:4	0:0	4	}
op	44:4	0:0	2	*
water	44:5	0:0	2	input_codec_context
op	44:25	0:0	2	=
water	44:27	0:0	2	(
op	44:28	0:0	2	*
water	44:29	0:0	2	input_format_context
water	44:49	0:0	2	)
op	44:50	0:0	2	->
water	44:52	0:0	2	streams
op	44:59	0:0	2	[
water	44:60	0:0	2	0
op	44:61	0:0	2	]
op	44:62	0:0	2	->
water	44:64	0:0	2	codec
water	44:69	0:0	2	;
return	45:4	45:12	2	0
water	45:11	0:0	3	0
