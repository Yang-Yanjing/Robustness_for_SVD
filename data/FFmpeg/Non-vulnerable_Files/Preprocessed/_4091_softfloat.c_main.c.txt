func	1:0	68:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	0:0	67:12	1	
decl	2:4	2:34	2	SoftFloat	one
op	2:17	0:0	2	=
call	2:19	2:33	3	av_int2sf
arg	2:29	2:30	4	1
water	2:29	0:0	5	1
arg	2:32	2:33	4	0
water	2:32	0:0	5	0
decl	3:4	3:27	2	SoftFloat	sf1
water	3:17	0:0	2	,
decl	3:4	3:27	2	SoftFloat	sf2
water	3:22	0:0	2	,
decl	3:4	3:27	2	SoftFloat	sf3
decl	4:4	4:21	2	double	d1
water	4:13	0:0	2	,
decl	4:4	4:21	2	double	d2
water	4:17	0:0	2	,
decl	4:4	4:21	2	double	d3
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
call	6:4	6:33	2	av_log_set_level
arg	6:21	6:33	3	AV_LOG_DEBUG
water	6:21	0:0	4	AV_LOG_DEBUG
water	6:34	0:0	2	;
water	7:4	0:0	2	d1
op	7:6	0:0	2	=
water	7:8	0:0	2	1
water	7:9	0:0	2	;
for	8:4	10:4	2	(i = 0 ;i < 10;i ++)
forinit	8:8	8:12	3	i = 0 ;
water	8:8	0:0	4	i
op	8:9	0:0	4	=
water	8:11	0:0	4	0
water	8:12	0:0	4	;
cond	8:14	8:16	3	i < 10
water	8:14	0:0	4	i
op	8:15	0:0	4	<
water	8:16	0:0	4	10
forexpr	8:20	8:21	3	i ++
water	8:20	0:0	4	i
op	8:21	0:0	4	++
stmts	8:24	10:4	3	
water	8:24	0:0	4	{
water	9:8	0:0	4	d1
op	9:10	0:0	4	=
water	9:12	0:0	4	1
op	9:13	0:0	4	/
water	9:14	0:0	4	(
water	9:15	0:0	4	d1
op	9:17	0:0	4	+
water	9:18	0:0	4	1
water	9:19	0:0	4	)
water	9:20	0:0	4	;
water	10:4	0:0	4	}
call	11:4	11:51	2	printf
arg	11:11	11:30	3	"test1 double=%d\n"
water	11:11	0:0	4	"test1 double=%d\n"
arg	11:32	11:51	3	(int)(d1*(1<<24))
call	11:32	11:50	4	(int)
arg	11:38	11:50	5	d1*(1<<24)
water	11:38	0:0	6	d1
op	11:41	0:0	6	*
water	11:43	0:0	6	(
water	11:44	0:0	6	1
op	11:45	0:0	6	<<
water	11:47	0:0	6	24
water	11:49	0:0	6	)
water	11:52	0:0	2	;
water	12:4	0:0	2	sf1
op	12:7	0:0	2	=
water	12:9	0:0	2	one
water	12:12	0:0	2	;
for	13:4	15:4	2	(i = 0 ;i < 10;i ++)
forinit	13:8	13:12	3	i = 0 ;
water	13:8	0:0	4	i
op	13:9	0:0	4	=
water	13:11	0:0	4	0
water	13:12	0:0	4	;
cond	13:14	13:16	3	i < 10
water	13:14	0:0	4	i
op	13:15	0:0	4	<
water	13:16	0:0	4	10
forexpr	13:20	13:21	3	i ++
water	13:20	0:0	4	i
op	13:21	0:0	4	++
stmts	13:24	15:4	3	
water	13:24	0:0	4	{
water	14:8	0:0	4	sf1
op	14:11	0:0	4	=
call	14:13	14:64	4	av_div_sf
arg	14:23	14:26	5	one
water	14:23	0:0	6	one
arg	14:28	14:64	5	av_normalize_sf(av_add_sf(one,sf1))
call	14:28	14:63	6	av_normalize_sf
arg	14:44	14:63	7	av_add_sf(one,sf1)
call	14:44	14:62	8	av_add_sf
arg	14:54	14:57	9	one
water	14:54	0:0	10	one
arg	14:59	14:62	9	sf1
water	14:59	0:0	10	sf1
water	14:65	0:0	4	;
water	15:4	0:0	4	}
call	16:4	16:50	2	printf
arg	16:11	16:30	3	"test1 sf    =%d\n"
water	16:11	0:0	4	"test1 sf    =%d\n"
arg	16:32	16:50	3	av_sf2int(sf1,24)
call	16:32	16:49	4	av_sf2int
arg	16:42	16:45	5	sf1
water	16:42	0:0	6	sf1
arg	16:47	16:49	5	24
water	16:47	0:0	6	24
water	16:51	0:0	2	;
for	17:4	25:4	2	(i = 0 ;i < 100;i ++)
forinit	17:8	17:12	3	i = 0 ;
water	17:8	0:0	4	i
op	17:9	0:0	4	=
water	17:11	0:0	4	0
water	17:12	0:0	4	;
cond	17:14	17:16	3	i < 100
water	17:14	0:0	4	i
op	17:15	0:0	4	<
water	17:16	0:0	4	100
forexpr	17:21	17:22	3	i ++
water	17:21	0:0	4	i
op	17:22	0:0	4	++
stmts	17:25	25:4	3	
water	17:25	0:0	4	{
decl	18:8	19:13	4	START_TIMER	d1
op	19:10	0:0	4	=
water	19:12	0:0	4	i
water	20:8	0:0	4	d2
op	20:10	0:0	4	=
water	20:12	0:0	4	i
op	20:13	0:0	4	/
water	20:14	0:0	4	100
op	20:17	0:0	4	.
water	20:18	0:0	4	0
water	20:19	0:0	4	;
for	21:8	23:8	4	(j = 0 ;j < 1000;j ++)
forinit	21:12	21:16	5	j = 0 ;
water	21:12	0:0	6	j
op	21:13	0:0	6	=
water	21:15	0:0	6	0
water	21:16	0:0	6	;
cond	21:18	21:20	5	j < 1000
water	21:18	0:0	6	j
op	21:19	0:0	6	<
water	21:20	0:0	6	1000
forexpr	21:26	21:27	5	j ++
water	21:26	0:0	6	j
op	21:27	0:0	6	++
stmts	21:30	23:8	5	
water	21:30	0:0	6	{
water	22:12	0:0	6	d1
op	22:14	0:0	6	=
water	22:16	0:0	6	(
water	22:17	0:0	6	d1
op	22:19	0:0	6	+
water	22:20	0:0	6	1
water	22:21	0:0	6	)
op	22:22	0:0	6	*
water	22:23	0:0	6	d2
water	22:25	0:0	6	;
water	23:8	0:0	6	}
water	24:8	0:0	4	STOP_TIMER
water	24:18	0:0	4	(
water	24:19	0:0	4	"float add mul"
water	24:34	0:0	4	)
water	25:4	0:0	4	}
call	26:4	26:51	2	printf
arg	26:11	26:30	3	"test2 double=%d\n"
water	26:11	0:0	4	"test2 double=%d\n"
arg	26:32	26:51	3	(int)(d1*(1<<24))
call	26:32	26:50	4	(int)
arg	26:38	26:50	5	d1*(1<<24)
water	26:38	0:0	6	d1
op	26:41	0:0	6	*
water	26:43	0:0	6	(
water	26:44	0:0	6	1
op	26:45	0:0	6	<<
water	26:47	0:0	6	24
water	26:49	0:0	6	)
water	26:52	0:0	2	;
for	27:4	35:4	2	(i = 0 ;i < 100;i ++)
forinit	27:8	27:12	3	i = 0 ;
water	27:8	0:0	4	i
op	27:9	0:0	4	=
water	27:11	0:0	4	0
water	27:12	0:0	4	;
cond	27:14	27:16	3	i < 100
water	27:14	0:0	4	i
op	27:15	0:0	4	<
water	27:16	0:0	4	100
forexpr	27:21	27:22	3	i ++
water	27:21	0:0	4	i
op	27:22	0:0	4	++
stmts	27:25	35:4	3	
water	27:25	0:0	4	{
decl	28:8	29:28	4	START_TIMER	sf1
op	29:11	0:0	4	=
call	29:13	29:27	5	av_int2sf
arg	29:23	29:24	6	i
water	29:23	0:0	7	i
arg	29:26	29:27	6	0
water	29:26	0:0	7	0
water	30:8	0:0	4	sf2
op	30:11	0:0	4	=
call	30:13	30:57	4	av_div_sf
arg	30:23	30:38	5	av_int2sf(i,2)
call	30:23	30:37	6	av_int2sf
arg	30:33	30:34	7	i
water	30:33	0:0	8	i
arg	30:36	30:37	7	2
water	30:36	0:0	8	2
arg	30:40	30:57	5	av_int2sf(200,3)
call	30:40	30:56	6	av_int2sf
arg	30:50	30:53	7	200
water	30:50	0:0	8	200
arg	30:55	30:56	7	3
water	30:55	0:0	8	3
water	30:58	0:0	4	;
for	31:8	33:8	4	(j = 0 ;j < 1000;j ++)
forinit	31:12	31:16	5	j = 0 ;
water	31:12	0:0	6	j
op	31:13	0:0	6	=
water	31:15	0:0	6	0
water	31:16	0:0	6	;
cond	31:18	31:20	5	j < 1000
water	31:18	0:0	6	j
op	31:19	0:0	6	<
water	31:20	0:0	6	1000
forexpr	31:26	31:27	5	j ++
water	31:26	0:0	6	j
op	31:27	0:0	6	++
stmts	31:30	33:8	5	
water	31:30	0:0	6	{
water	32:12	0:0	6	sf1
op	32:15	0:0	6	=
call	32:17	32:50	6	av_mul_sf
arg	32:27	32:46	7	av_add_sf(sf1,one)
call	32:27	32:45	8	av_add_sf
arg	32:37	32:40	9	sf1
water	32:37	0:0	10	sf1
arg	32:42	32:45	9	one
water	32:42	0:0	10	one
arg	32:47	32:50	7	sf2
water	32:47	0:0	8	sf2
water	32:51	0:0	6	;
water	33:8	0:0	6	}
water	34:8	0:0	4	STOP_TIMER
water	34:18	0:0	4	(
water	34:19	0:0	4	"softfloat add mul"
water	34:38	0:0	4	)
water	35:4	0:0	4	}
call	36:4	36:77	2	printf
arg	36:11	36:38	3	"test2 sf    =%d (%d %d)\n"
water	36:11	0:0	4	"test2 sf    =%d (%d %d)\n"
arg	36:40	36:58	3	av_sf2int(sf1,24)
call	36:40	36:57	4	av_sf2int
arg	36:50	36:53	5	sf1
water	36:50	0:0	6	sf1
arg	36:55	36:57	5	24
water	36:55	0:0	6	24
arg	36:60	36:67	3	sf1.exp
water	36:60	0:0	4	sf1
op	36:63	0:0	4	.
water	36:64	0:0	4	exp
arg	36:69	36:77	3	sf1.mant
water	36:69	0:0	4	sf1
op	36:72	0:0	4	.
water	36:73	0:0	4	mant
water	36:78	0:0	2	;
water	37:4	0:0	2	d1
op	37:7	0:0	2	=
water	37:9	0:0	2	0
op	37:10	0:0	2	.
water	37:11	0:0	2	0177764893
water	37:21	0:0	2	;
water	38:4	0:0	2	d2
op	38:7	0:0	2	=
water	38:9	0:0	2	1374
op	38:13	0:0	2	.
water	38:14	0:0	2	40625
water	38:19	0:0	2	;
water	39:4	0:0	2	d3
op	39:7	0:0	2	=
water	39:9	0:0	2	0
op	39:10	0:0	2	.
water	39:11	0:0	2	1249694824
water	39:21	0:0	2	;
water	40:4	0:0	2	d2
op	40:7	0:0	2	+=
water	40:10	0:0	2	d1
water	40:12	0:0	2	;
water	41:4	0:0	2	d3
op	41:7	0:0	2	+=
water	41:10	0:0	2	d2
water	41:12	0:0	2	;
call	42:4	42:39	2	printf
arg	42:11	42:35	3	"test3 double: %.10lf\n"
water	42:11	0:0	4	"test3 double: %.10lf\n"
arg	42:37	42:39	3	d3
water	42:37	0:0	4	d3
water	42:40	0:0	2	;
water	43:4	0:0	2	sf1
op	43:8	0:0	2	=
water	43:10	0:0	2	FLOAT_0_017776489257
water	43:30	0:0	2	;
water	44:4	0:0	2	sf2
op	44:8	0:0	2	=
water	44:10	0:0	2	FLOAT_1374_40625
water	44:26	0:0	2	;
water	45:4	0:0	2	sf3
op	45:8	0:0	2	=
water	45:10	0:0	2	FLOAT_0_1249694824218
water	45:31	0:0	2	;
water	46:4	0:0	2	sf2
op	46:8	0:0	2	=
call	46:10	46:28	2	av_add_sf
arg	46:20	46:23	3	sf1
water	46:20	0:0	4	sf1
arg	46:25	46:28	3	sf2
water	46:25	0:0	4	sf2
water	46:29	0:0	2	;
water	47:4	0:0	2	sf3
op	47:8	0:0	2	=
call	47:10	47:28	2	av_add_sf
arg	47:20	47:23	3	sf3
water	47:20	0:0	4	sf3
arg	47:25	47:28	3	sf2
water	47:25	0:0	4	sf2
water	47:29	0:0	2	;
call	48:4	48:96	2	printf
arg	48:11	48:50	3	"test3 softfloat: %.10lf (0x%08x %d)\n"
water	48:11	0:0	4	"test3 softfloat: %.10lf (0x%08x %d)\n"
arg	48:52	48:77	3	(double)av_sf2double(sf3)
water	48:52	0:0	4	(
water	48:53	0:0	4	double
water	48:59	0:0	4	)
call	48:60	48:76	4	av_sf2double
arg	48:73	48:76	5	sf3
water	48:73	0:0	6	sf3
arg	48:79	48:87	3	sf3.mant
water	48:79	0:0	4	sf3
op	48:82	0:0	4	.
water	48:83	0:0	4	mant
arg	48:89	48:96	3	sf3.exp
water	48:89	0:0	4	sf3
op	48:92	0:0	4	.
water	48:93	0:0	4	exp
water	48:97	0:0	2	;
water	49:4	0:0	2	sf1
op	49:8	0:0	2	=
call	49:10	49:33	2	av_int2sf
arg	49:20	49:30	3	0xFFFFFFF0
water	49:20	0:0	4	0
water	49:21	0:0	4	xFFFFFFF0
arg	49:32	49:33	3	0
water	49:32	0:0	4	0
water	49:34	0:0	2	;
call	50:4	50:96	2	printf
arg	50:11	50:50	3	"test4 softfloat: %.10lf (0x%08x %d)\n"
water	50:11	0:0	4	"test4 softfloat: %.10lf (0x%08x %d)\n"
arg	50:52	50:77	3	(double)av_sf2double(sf1)
water	50:52	0:0	4	(
water	50:53	0:0	4	double
water	50:59	0:0	4	)
call	50:60	50:76	4	av_sf2double
arg	50:73	50:76	5	sf1
water	50:73	0:0	6	sf1
arg	50:79	50:87	3	sf1.mant
water	50:79	0:0	4	sf1
op	50:82	0:0	4	.
water	50:83	0:0	4	mant
arg	50:89	50:96	3	sf1.exp
water	50:89	0:0	4	sf1
op	50:92	0:0	4	.
water	50:93	0:0	4	exp
water	50:97	0:0	2	;
water	51:4	0:0	2	sf1
op	51:8	0:0	2	=
call	51:10	51:33	2	av_int2sf
arg	51:20	51:30	3	0x00000010
water	51:20	0:0	4	0
water	51:21	0:0	4	x00000010
arg	51:32	51:33	3	0
water	51:32	0:0	4	0
water	51:34	0:0	2	;
call	52:4	52:96	2	printf
arg	52:11	52:50	3	"test4 softfloat: %.10lf (0x%08x %d)\n"
water	52:11	0:0	4	"test4 softfloat: %.10lf (0x%08x %d)\n"
arg	52:52	52:77	3	(double)av_sf2double(sf1)
water	52:52	0:0	4	(
water	52:53	0:0	4	double
water	52:59	0:0	4	)
call	52:60	52:76	4	av_sf2double
arg	52:73	52:76	5	sf1
water	52:73	0:0	6	sf1
arg	52:79	52:87	3	sf1.mant
water	52:79	0:0	4	sf1
op	52:82	0:0	4	.
water	52:83	0:0	4	mant
arg	52:89	52:96	3	sf1.exp
water	52:89	0:0	4	sf1
op	52:92	0:0	4	.
water	52:93	0:0	4	exp
water	52:97	0:0	2	;
water	53:4	0:0	2	sf1
op	53:8	0:0	2	=
call	53:10	53:33	2	av_int2sf
arg	53:20	53:30	3	0x1FFFFFFF
water	53:20	0:0	4	0
water	53:21	0:0	4	x1FFFFFFF
arg	53:32	53:33	3	0
water	53:32	0:0	4	0
water	53:34	0:0	2	;
call	54:4	54:96	2	printf
arg	54:11	54:50	3	"test4 softfloat: %.10lf (0x%08x %d)\n"
water	54:11	0:0	4	"test4 softfloat: %.10lf (0x%08x %d)\n"
arg	54:52	54:77	3	(double)av_sf2double(sf1)
water	54:52	0:0	4	(
water	54:53	0:0	4	double
water	54:59	0:0	4	)
call	54:60	54:76	4	av_sf2double
arg	54:73	54:76	5	sf1
water	54:73	0:0	6	sf1
arg	54:79	54:87	3	sf1.mant
water	54:79	0:0	4	sf1
op	54:82	0:0	4	.
water	54:83	0:0	4	mant
arg	54:89	54:96	3	sf1.exp
water	54:89	0:0	4	sf1
op	54:92	0:0	4	.
water	54:93	0:0	4	exp
water	54:97	0:0	2	;
water	55:4	0:0	2	sf1
op	55:8	0:0	2	=
call	55:10	55:33	2	av_int2sf
arg	55:20	55:30	3	0xE0000001
water	55:20	0:0	4	0
water	55:21	0:0	4	xE0000001
arg	55:32	55:33	3	0
water	55:32	0:0	4	0
water	55:34	0:0	2	;
call	56:4	56:96	2	printf
arg	56:11	56:50	3	"test4 softfloat: %.10lf (0x%08x %d)\n"
water	56:11	0:0	4	"test4 softfloat: %.10lf (0x%08x %d)\n"
arg	56:52	56:77	3	(double)av_sf2double(sf1)
water	56:52	0:0	4	(
water	56:53	0:0	4	double
water	56:59	0:0	4	)
call	56:60	56:76	4	av_sf2double
arg	56:73	56:76	5	sf1
water	56:73	0:0	6	sf1
arg	56:79	56:87	3	sf1.mant
water	56:79	0:0	4	sf1
op	56:82	0:0	4	.
water	56:83	0:0	4	mant
arg	56:89	56:96	3	sf1.exp
water	56:89	0:0	4	sf1
op	56:92	0:0	4	.
water	56:93	0:0	4	exp
water	56:97	0:0	2	;
for	57:4	66:4	2	(i = 0 ;i < 4 * 36;i ++)
forinit	57:8	57:12	3	i = 0 ;
water	57:8	0:0	4	i
op	57:9	0:0	4	=
water	57:11	0:0	4	0
water	57:12	0:0	4	;
cond	57:14	57:18	3	i < 4 * 36
water	57:14	0:0	4	i
op	57:15	0:0	4	<
water	57:16	0:0	4	4
op	57:17	0:0	4	*
water	57:18	0:0	4	36
forexpr	57:22	57:23	3	i ++
water	57:22	0:0	4	i
op	57:23	0:0	4	++
stmts	57:26	66:4	3	
water	57:26	0:0	4	{
decl	58:8	58:16	4	int	s
water	58:13	0:0	4	,
decl	58:8	58:16	4	int	c
decl	59:8	59:25	4	double	errs
water	59:19	0:0	4	,
decl	59:8	59:25	4	double	errc
call	60:8	60:46	4	av_sincos_sf
arg	60:21	60:38	5	i*(1ULL<<32)/36/4
water	60:21	0:0	6	i
op	60:22	0:0	6	*
water	60:23	0:0	6	(
water	60:24	0:0	6	1
water	60:25	0:0	6	ULL
op	60:28	0:0	6	<<
water	60:30	0:0	6	32
water	60:32	0:0	6	)
op	60:33	0:0	6	/
water	60:34	0:0	6	36
op	60:36	0:0	6	/
water	60:37	0:0	6	4
arg	60:40	60:42	5	&s
op	60:40	0:0	6	&
water	60:41	0:0	6	s
arg	60:44	60:46	5	&c
op	60:44	0:0	6	&
water	60:45	0:0	6	c
water	60:47	0:0	4	;
water	61:8	0:0	4	errs
op	61:13	0:0	4	=
water	61:15	0:0	4	(
water	61:16	0:0	4	double
water	61:22	0:0	4	)
water	61:23	0:0	4	s
op	61:24	0:0	4	/
water	61:26	0:0	4	(
water	61:27	0:0	4	1
op	61:28	0:0	4	<<
water	61:30	0:0	4	30
water	61:32	0:0	4	)
op	61:34	0:0	4	-
call	61:36	61:49	4	sin
arg	61:40	61:49	5	i*M_PI/36
water	61:40	0:0	6	i
op	61:41	0:0	6	*
water	61:42	0:0	6	M_PI
op	61:46	0:0	6	/
water	61:47	0:0	6	36
water	61:50	0:0	4	;
water	62:8	0:0	4	errc
op	62:13	0:0	4	=
water	62:15	0:0	4	(
water	62:16	0:0	4	double
water	62:22	0:0	4	)
water	62:23	0:0	4	c
op	62:24	0:0	4	/
water	62:26	0:0	4	(
water	62:27	0:0	4	1
op	62:28	0:0	4	<<
water	62:30	0:0	4	30
water	62:32	0:0	4	)
op	62:34	0:0	4	-
call	62:36	62:49	4	cos
arg	62:40	62:49	5	i*M_PI/36
water	62:40	0:0	6	i
op	62:41	0:0	6	*
water	62:42	0:0	6	M_PI
op	62:46	0:0	6	/
water	62:47	0:0	6	36
water	62:50	0:0	4	;
if	63:8	65:8	4	(fabs (errs ) > 0 . 00000002 ||fabs (errc ) > 0 . 001)
cond	63:12	63:53	5	fabs (errs ) > 0 . 00000002 ||fabs (errc ) > 0 . 001
call	63:12	63:21	6	fabs
arg	63:17	63:21	7	errs
water	63:17	0:0	8	errs
op	63:23	0:0	6	>
water	63:25	0:0	6	0
op	63:26	0:0	6	.
water	63:27	0:0	6	00000002
op	63:36	0:0	6	||
call	63:39	63:48	6	fabs
arg	63:44	63:48	7	errc
water	63:44	0:0	8	errc
op	63:50	0:0	6	>
water	63:51	0:0	6	0
op	63:52	0:0	6	.
water	63:53	0:0	6	001
stmts	63:58	65:8	5	
water	63:58	0:0	6	{
call	64:12	64:122	6	printf
arg	64:19	64:49	7	"sincos FAIL %d %f %f %f %f\n"
water	64:19	0:0	8	"sincos FAIL %d %f %f %f %f\n"
arg	64:51	64:52	7	i
water	64:51	0:0	8	i
arg	64:54	64:71	7	(float)s/(1<<30)
water	64:54	0:0	8	(
water	64:55	0:0	8	float
water	64:60	0:0	8	)
water	64:61	0:0	8	s
op	64:62	0:0	8	/
water	64:64	0:0	8	(
water	64:65	0:0	8	1
op	64:66	0:0	8	<<
water	64:68	0:0	8	30
water	64:70	0:0	8	)
arg	64:73	64:90	7	(float)c/(1<<30)
water	64:73	0:0	8	(
water	64:74	0:0	8	float
water	64:79	0:0	8	)
water	64:80	0:0	8	c
op	64:81	0:0	8	/
water	64:83	0:0	8	(
water	64:84	0:0	8	1
op	64:85	0:0	8	<<
water	64:87	0:0	8	30
water	64:89	0:0	8	)
arg	64:92	64:106	7	sin(i*M_PI/36)
call	64:92	64:105	8	sin
arg	64:96	64:105	9	i*M_PI/36
water	64:96	0:0	10	i
op	64:97	0:0	10	*
water	64:98	0:0	10	M_PI
op	64:102	0:0	10	/
water	64:103	0:0	10	36
arg	64:108	64:122	7	cos(i*M_PI/36)
call	64:108	64:121	8	cos
arg	64:112	64:121	9	i*M_PI/36
water	64:112	0:0	10	i
op	64:113	0:0	10	*
water	64:114	0:0	10	M_PI
op	64:118	0:0	10	/
water	64:119	0:0	10	36
water	64:123	0:0	6	;
water	65:8	0:0	6	}
water	66:4	0:0	4	}
return	67:4	67:12	2	0
water	67:11	0:0	3	0
