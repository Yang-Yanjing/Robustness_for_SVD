func	1:0	107:0	0	static void	achroma
params	1:19	0:0	1	
param	1:20	1:38	2	WaveformContext *	s
param	1:40	1:51	2	AVFrame *	in
param	1:53	1:65	2	AVFrame *	out
param	2:20	2:33	2	int	component
param	2:35	2:48	2	int	intensity
param	2:50	2:60	2	int	offset
param	2:62	2:72	2	int	column
stmnts	0:0	106:51	1	
decl	4:4	4:52	2	const int	plane
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	desc
op	4:29	0:0	2	->
water	4:31	0:0	2	comp
op	4:35	0:0	2	[
water	4:36	0:0	2	component
op	4:45	0:0	2	]
op	4:46	0:0	2	.
water	4:47	0:0	2	plane
decl	5:4	5:32	2	const int	mirror
op	5:21	0:0	2	=
water	5:23	0:0	2	s
op	5:24	0:0	2	->
water	5:26	0:0	2	mirror
decl	6:4	6:64	2	const int	c1_linesize
op	6:26	0:0	2	=
water	6:28	0:0	2	in
op	6:30	0:0	2	->
water	6:32	0:0	2	linesize
op	6:40	0:0	2	[
water	6:41	0:0	2	(
water	6:42	0:0	2	plane
op	6:48	0:0	2	+
water	6:50	0:0	2	1
water	6:51	0:0	2	)
op	6:53	0:0	2	%
water	6:55	0:0	2	s
op	6:56	0:0	2	->
water	6:58	0:0	2	ncomp
op	6:63	0:0	2	]
decl	7:4	7:64	2	const int	c2_linesize
op	7:26	0:0	2	=
water	7:28	0:0	2	in
op	7:30	0:0	2	->
water	7:32	0:0	2	linesize
op	7:40	0:0	2	[
water	7:41	0:0	2	(
water	7:42	0:0	2	plane
op	7:48	0:0	2	+
water	7:50	0:0	2	2
water	7:51	0:0	2	)
op	7:53	0:0	2	%
water	7:55	0:0	2	s
op	7:56	0:0	2	->
water	7:58	0:0	2	ncomp
op	7:63	0:0	2	]
decl	8:4	8:65	2	const int	d1_linesize
op	8:26	0:0	2	=
water	8:28	0:0	2	out
op	8:31	0:0	2	->
water	8:33	0:0	2	linesize
op	8:41	0:0	2	[
water	8:42	0:0	2	(
water	8:43	0:0	2	plane
op	8:49	0:0	2	+
water	8:51	0:0	2	1
water	8:52	0:0	2	)
op	8:54	0:0	2	%
water	8:56	0:0	2	s
op	8:57	0:0	2	->
water	8:59	0:0	2	ncomp
op	8:64	0:0	2	]
decl	9:4	9:65	2	const int	d2_linesize
op	9:26	0:0	2	=
water	9:28	0:0	2	out
op	9:31	0:0	2	->
water	9:33	0:0	2	linesize
op	9:41	0:0	2	[
water	9:42	0:0	2	(
water	9:43	0:0	2	plane
op	9:49	0:0	2	+
water	9:51	0:0	2	2
water	9:52	0:0	2	)
op	9:54	0:0	2	%
water	9:56	0:0	2	s
op	9:57	0:0	2	->
water	9:59	0:0	2	ncomp
op	9:64	0:0	2	]
decl	10:4	10:35	2	const int	max
op	10:18	0:0	2	=
water	10:20	0:0	2	255
op	10:24	0:0	2	-
water	10:26	0:0	2	intensity
decl	11:4	11:32	2	const int	src_h
op	11:20	0:0	2	=
water	11:22	0:0	2	in
op	11:24	0:0	2	->
water	11:26	0:0	2	height
decl	12:4	12:31	2	const int	src_w
op	12:20	0:0	2	=
water	12:22	0:0	2	in
op	12:24	0:0	2	->
water	12:26	0:0	2	width
decl	13:4	13:12	2	int	x
water	13:9	0:0	2	,
decl	13:4	13:12	2	int	y
if	14:4	53:4	2	(column)
cond	14:8	14:8	3	column
water	14:8	0:0	4	column
stmts	14:16	53:4	3	
water	14:16	0:0	4	{
decl	15:8	15:75	4	const int	d1_signed_linesize
op	15:37	0:0	4	=
water	15:39	0:0	4	d1_linesize
op	15:51	0:0	4	*
water	15:53	0:0	4	(
water	15:54	0:0	4	mirror
op	15:61	0:0	4	==
water	15:64	0:0	4	1
water	15:66	0:0	4	?
op	15:68	0:0	4	-
water	15:69	0:0	4	1
water	15:71	0:0	4	:
water	15:73	0:0	4	1
water	15:74	0:0	4	)
decl	16:8	16:75	4	const int	d2_signed_linesize
op	16:37	0:0	4	=
water	16:39	0:0	4	d2_linesize
op	16:51	0:0	4	*
water	16:53	0:0	4	(
water	16:54	0:0	4	mirror
op	16:61	0:0	4	==
water	16:64	0:0	4	1
water	16:66	0:0	4	?
op	16:68	0:0	4	-
water	16:69	0:0	4	1
water	16:71	0:0	4	:
water	16:73	0:0	4	1
water	16:74	0:0	4	)
for	17:8	52:8	4	(x = 0 ;x < src_w;x ++)
forinit	17:13	17:18	5	x = 0 ;
water	17:13	0:0	6	x
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:24	5	x < src_w
water	17:20	0:0	6	x
op	17:22	0:0	6	<
water	17:24	0:0	6	src_w
forexpr	17:31	17:32	5	x ++
water	17:31	0:0	6	x
op	17:32	0:0	6	++
stmts	17:36	52:8	5	
water	17:36	0:0	6	{
decl	18:12	18:69	6	const uint8_t	*c1_data
op	18:35	0:0	6	=
water	18:37	0:0	6	in
op	18:39	0:0	6	->
water	18:41	0:0	6	data
op	18:45	0:0	6	[
water	18:46	0:0	6	(
water	18:47	0:0	6	plane
op	18:53	0:0	6	+
water	18:55	0:0	6	1
water	18:56	0:0	6	)
op	18:58	0:0	6	%
water	18:60	0:0	6	s
op	18:61	0:0	6	->
water	18:63	0:0	6	ncomp
op	18:68	0:0	6	]
decl	19:12	19:69	6	const uint8_t	*c2_data
op	19:35	0:0	6	=
water	19:37	0:0	6	in
op	19:39	0:0	6	->
water	19:41	0:0	6	data
op	19:45	0:0	6	[
water	19:46	0:0	6	(
water	19:47	0:0	6	plane
op	19:53	0:0	6	+
water	19:55	0:0	6	2
water	19:56	0:0	6	)
op	19:58	0:0	6	%
water	19:60	0:0	6	s
op	19:61	0:0	6	->
water	19:63	0:0	6	ncomp
op	19:68	0:0	6	]
decl	20:12	20:87	6	uint8_t	*d1_data
op	20:29	0:0	6	=
water	20:31	0:0	6	out
op	20:34	0:0	6	->
water	20:36	0:0	6	data
op	20:40	0:0	6	[
water	20:41	0:0	6	(
water	20:42	0:0	6	plane
op	20:48	0:0	6	+
water	20:50	0:0	6	1
water	20:51	0:0	6	)
op	20:53	0:0	6	%
water	20:55	0:0	6	s
op	20:56	0:0	6	->
water	20:58	0:0	6	ncomp
op	20:63	0:0	6	]
op	20:65	0:0	6	+
water	20:67	0:0	6	offset
op	20:74	0:0	6	*
water	20:76	0:0	6	d1_linesize
decl	21:12	21:87	6	uint8_t	*d2_data
op	21:29	0:0	6	=
water	21:31	0:0	6	out
op	21:34	0:0	6	->
water	21:36	0:0	6	data
op	21:40	0:0	6	[
water	21:41	0:0	6	(
water	21:42	0:0	6	plane
op	21:48	0:0	6	+
water	21:50	0:0	6	2
water	21:51	0:0	6	)
op	21:53	0:0	6	%
water	21:55	0:0	6	s
op	21:56	0:0	6	->
water	21:58	0:0	6	ncomp
op	21:63	0:0	6	]
op	21:65	0:0	6	+
water	21:67	0:0	6	offset
op	21:74	0:0	6	*
water	21:76	0:0	6	d2_linesize
water	22:12	0:0	6	uint8_t
op	22:20	0:0	6	*
water	22:22	0:0	6	const
water	22:28	0:0	6	d1_bottom_line
op	22:43	0:0	6	=
water	22:45	0:0	6	d1_data
op	22:53	0:0	6	+
water	22:55	0:0	6	d1_linesize
op	22:67	0:0	6	*
water	22:69	0:0	6	(
water	22:70	0:0	6	s
op	22:71	0:0	6	->
water	22:73	0:0	6	size
op	22:78	0:0	6	-
water	22:80	0:0	6	1
water	22:81	0:0	6	)
water	22:82	0:0	6	;
water	23:12	0:0	6	uint8_t
op	23:20	0:0	6	*
water	23:22	0:0	6	const
water	23:28	0:0	6	d1
op	23:31	0:0	6	=
water	23:33	0:0	6	(
water	23:34	0:0	6	mirror
water	23:41	0:0	6	?
water	23:43	0:0	6	d1_bottom_line
water	23:58	0:0	6	:
water	23:60	0:0	6	d1_data
water	23:67	0:0	6	)
water	23:68	0:0	6	;
water	24:12	0:0	6	uint8_t
op	24:20	0:0	6	*
water	24:22	0:0	6	const
water	24:28	0:0	6	d2_bottom_line
op	24:43	0:0	6	=
water	24:45	0:0	6	d2_data
op	24:53	0:0	6	+
water	24:55	0:0	6	d2_linesize
op	24:67	0:0	6	*
water	24:69	0:0	6	(
water	24:70	0:0	6	s
op	24:71	0:0	6	->
water	24:73	0:0	6	size
op	24:78	0:0	6	-
water	24:80	0:0	6	1
water	24:81	0:0	6	)
water	24:82	0:0	6	;
water	25:12	0:0	6	uint8_t
op	25:20	0:0	6	*
water	25:22	0:0	6	const
water	25:28	0:0	6	d2
op	25:31	0:0	6	=
water	25:33	0:0	6	(
water	25:34	0:0	6	mirror
water	25:41	0:0	6	?
water	25:43	0:0	6	d2_bottom_line
water	25:58	0:0	6	:
water	25:60	0:0	6	d2_data
water	25:67	0:0	6	)
water	25:68	0:0	6	;
for	26:12	51:12	6	(y = 0 ;y < src_h;y ++)
forinit	26:17	26:22	7	y = 0 ;
water	26:17	0:0	8	y
op	26:19	0:0	8	=
water	26:21	0:0	8	0
water	26:22	0:0	8	;
cond	26:24	26:28	7	y < src_h
water	26:24	0:0	8	y
op	26:26	0:0	8	<
water	26:28	0:0	8	src_h
forexpr	26:35	26:36	7	y ++
water	26:35	0:0	8	y
op	26:36	0:0	8	++
stmts	26:40	51:12	7	
water	26:40	0:0	8	{
decl	27:16	27:47	8	const int	c1
op	27:29	0:0	8	=
water	27:31	0:0	8	c1_data
op	27:38	0:0	8	[
water	27:39	0:0	8	x
op	27:40	0:0	8	]
op	27:42	0:0	8	-
water	27:44	0:0	8	128
decl	28:16	28:47	8	const int	c2
op	28:29	0:0	8	=
water	28:31	0:0	8	c2_data
op	28:38	0:0	8	[
water	28:39	0:0	8	x
op	28:40	0:0	8	]
op	28:42	0:0	8	-
water	28:44	0:0	8	128
decl	29:16	29:31	8	uint8_t	*target
decl	30:16	30:21	8	int	p
for	31:16	34:16	8	(p = 128 + c1 ;p < 128;p ++)
forinit	31:21	31:33	9	p = 128 + c1 ;
water	31:21	0:0	10	p
op	31:23	0:0	10	=
water	31:25	0:0	10	128
op	31:29	0:0	10	+
water	31:31	0:0	10	c1
water	31:33	0:0	10	;
cond	31:35	31:39	9	p < 128
water	31:35	0:0	10	p
op	31:37	0:0	10	<
water	31:39	0:0	10	128
forexpr	31:44	31:45	9	p ++
water	31:44	0:0	10	p
op	31:45	0:0	10	++
stmts	31:49	34:16	9	
water	31:49	0:0	10	{
water	32:20	0:0	10	target
op	32:27	0:0	10	=
water	32:29	0:0	10	d1
op	32:32	0:0	10	+
water	32:34	0:0	10	x
op	32:36	0:0	10	+
water	32:38	0:0	10	d1_signed_linesize
op	32:57	0:0	10	*
water	32:59	0:0	10	p
water	32:60	0:0	10	;
call	33:20	33:41	10	update
arg	33:27	33:33	11	target
water	33:27	0:0	12	target
arg	33:35	33:38	11	max
water	33:35	0:0	12	max
arg	33:40	33:41	11	1
water	33:40	0:0	12	1
water	33:42	0:0	10	;
water	34:16	0:0	10	}
for	35:16	38:16	8	(p = 128 + c1 - 1 ;p > 128;p --)
forinit	35:21	35:37	9	p = 128 + c1 - 1 ;
water	35:21	0:0	10	p
op	35:23	0:0	10	=
water	35:25	0:0	10	128
op	35:29	0:0	10	+
water	35:31	0:0	10	c1
op	35:34	0:0	10	-
water	35:36	0:0	10	1
water	35:37	0:0	10	;
cond	35:39	35:43	9	p > 128
water	35:39	0:0	10	p
op	35:41	0:0	10	>
water	35:43	0:0	10	128
forexpr	35:48	35:49	9	p --
water	35:48	0:0	10	p
op	35:49	0:0	10	--
stmts	35:53	38:16	9	
water	35:53	0:0	10	{
water	36:20	0:0	10	target
op	36:27	0:0	10	=
water	36:29	0:0	10	d1
op	36:32	0:0	10	+
water	36:34	0:0	10	x
op	36:36	0:0	10	+
water	36:38	0:0	10	d1_signed_linesize
op	36:57	0:0	10	*
water	36:59	0:0	10	p
water	36:60	0:0	10	;
call	37:20	37:41	10	update
arg	37:27	37:33	11	target
water	37:27	0:0	12	target
arg	37:35	37:38	11	max
water	37:35	0:0	12	max
arg	37:40	37:41	11	1
water	37:40	0:0	12	1
water	37:42	0:0	10	;
water	38:16	0:0	10	}
for	39:16	42:16	8	(p = 128 + c2 ;p < 128;p ++)
forinit	39:21	39:33	9	p = 128 + c2 ;
water	39:21	0:0	10	p
op	39:23	0:0	10	=
water	39:25	0:0	10	128
op	39:29	0:0	10	+
water	39:31	0:0	10	c2
water	39:33	0:0	10	;
cond	39:35	39:39	9	p < 128
water	39:35	0:0	10	p
op	39:37	0:0	10	<
water	39:39	0:0	10	128
forexpr	39:44	39:45	9	p ++
water	39:44	0:0	10	p
op	39:45	0:0	10	++
stmts	39:49	42:16	9	
water	39:49	0:0	10	{
water	40:20	0:0	10	target
op	40:27	0:0	10	=
water	40:29	0:0	10	d2
op	40:32	0:0	10	+
water	40:34	0:0	10	x
op	40:36	0:0	10	+
water	40:38	0:0	10	d2_signed_linesize
op	40:57	0:0	10	*
water	40:59	0:0	10	p
water	40:60	0:0	10	;
call	41:20	41:41	10	update
arg	41:27	41:33	11	target
water	41:27	0:0	12	target
arg	41:35	41:38	11	max
water	41:35	0:0	12	max
arg	41:40	41:41	11	1
water	41:40	0:0	12	1
water	41:42	0:0	10	;
water	42:16	0:0	10	}
for	43:16	46:16	8	(p = 128 + c2 - 1 ;p > 128;p --)
forinit	43:21	43:37	9	p = 128 + c2 - 1 ;
water	43:21	0:0	10	p
op	43:23	0:0	10	=
water	43:25	0:0	10	128
op	43:29	0:0	10	+
water	43:31	0:0	10	c2
op	43:34	0:0	10	-
water	43:36	0:0	10	1
water	43:37	0:0	10	;
cond	43:39	43:43	9	p > 128
water	43:39	0:0	10	p
op	43:41	0:0	10	>
water	43:43	0:0	10	128
forexpr	43:48	43:49	9	p --
water	43:48	0:0	10	p
op	43:49	0:0	10	--
stmts	43:53	46:16	9	
water	43:53	0:0	10	{
water	44:20	0:0	10	target
op	44:27	0:0	10	=
water	44:29	0:0	10	d2
op	44:32	0:0	10	+
water	44:34	0:0	10	x
op	44:36	0:0	10	+
water	44:38	0:0	10	d2_signed_linesize
op	44:57	0:0	10	*
water	44:59	0:0	10	p
water	44:60	0:0	10	;
call	45:20	45:41	10	update
arg	45:27	45:33	11	target
water	45:27	0:0	12	target
arg	45:35	45:38	11	max
water	45:35	0:0	12	max
arg	45:40	45:41	11	1
water	45:40	0:0	12	1
water	45:42	0:0	10	;
water	46:16	0:0	10	}
water	47:16	0:0	8	c1_data
op	47:24	0:0	8	+=
water	47:27	0:0	8	c1_linesize
water	47:38	0:0	8	;
water	48:16	0:0	8	c2_data
op	48:24	0:0	8	+=
water	48:27	0:0	8	c2_linesize
water	48:38	0:0	8	;
water	49:16	0:0	8	d1_data
op	49:24	0:0	8	+=
water	49:27	0:0	8	d1_linesize
water	49:38	0:0	8	;
water	50:16	0:0	8	d2_data
op	50:24	0:0	8	+=
water	50:27	0:0	8	d2_linesize
water	50:38	0:0	8	;
water	51:12	0:0	8	}
water	52:8	0:0	6	}
water	53:4	0:0	4	}
else	53:6	104:4	2
stmts	53:11	104:4	3	
water	53:11	0:0	4	{
decl	54:8	54:65	4	const uint8_t	*c1_data
op	54:31	0:0	4	=
water	54:33	0:0	4	in
op	54:35	0:0	4	->
water	54:37	0:0	4	data
op	54:41	0:0	4	[
water	54:42	0:0	4	(
water	54:43	0:0	4	plane
op	54:49	0:0	4	+
water	54:51	0:0	4	1
water	54:52	0:0	4	)
op	54:54	0:0	4	%
water	54:56	0:0	4	s
op	54:57	0:0	4	->
water	54:59	0:0	4	ncomp
op	54:64	0:0	4	]
decl	55:8	55:65	4	const uint8_t	*c2_data
op	55:31	0:0	4	=
water	55:33	0:0	4	in
op	55:35	0:0	4	->
water	55:37	0:0	4	data
op	55:41	0:0	4	[
water	55:42	0:0	4	(
water	55:43	0:0	4	plane
op	55:49	0:0	4	+
water	55:51	0:0	4	2
water	55:52	0:0	4	)
op	55:54	0:0	4	%
water	55:56	0:0	4	s
op	55:57	0:0	4	->
water	55:59	0:0	4	ncomp
op	55:64	0:0	4	]
decl	56:8	56:52	4	uint8_t	*d0_data
op	56:25	0:0	4	=
water	56:27	0:0	4	out
op	56:30	0:0	4	->
water	56:32	0:0	4	data
op	56:36	0:0	4	[
water	56:37	0:0	4	plane
op	56:42	0:0	4	]
op	56:44	0:0	4	+
water	56:46	0:0	4	offset
decl	57:8	57:69	4	uint8_t	*d1_data
op	57:25	0:0	4	=
water	57:27	0:0	4	out
op	57:30	0:0	4	->
water	57:32	0:0	4	data
op	57:36	0:0	4	[
water	57:37	0:0	4	(
water	57:38	0:0	4	plane
op	57:44	0:0	4	+
water	57:46	0:0	4	1
water	57:47	0:0	4	)
op	57:49	0:0	4	%
water	57:51	0:0	4	s
op	57:52	0:0	4	->
water	57:54	0:0	4	ncomp
op	57:59	0:0	4	]
op	57:61	0:0	4	+
water	57:63	0:0	4	offset
decl	58:8	58:69	4	uint8_t	*d2_data
op	58:25	0:0	4	=
water	58:27	0:0	4	out
op	58:30	0:0	4	->
water	58:32	0:0	4	data
op	58:36	0:0	4	[
water	58:37	0:0	4	(
water	58:38	0:0	4	plane
op	58:44	0:0	4	+
water	58:46	0:0	4	2
water	58:47	0:0	4	)
op	58:49	0:0	4	%
water	58:51	0:0	4	s
op	58:52	0:0	4	->
water	58:54	0:0	4	ncomp
op	58:59	0:0	4	]
op	58:61	0:0	4	+
water	58:63	0:0	4	offset
if	59:8	63:8	4	(mirror)
cond	59:12	59:12	5	mirror
water	59:12	0:0	6	mirror
stmts	59:20	63:8	5	
water	59:20	0:0	6	{
water	60:12	0:0	6	d0_data
op	60:20	0:0	6	+=
water	60:23	0:0	6	s
op	60:24	0:0	6	->
water	60:26	0:0	6	size
op	60:31	0:0	6	-
water	60:33	0:0	6	1
water	60:34	0:0	6	;
water	61:12	0:0	6	d1_data
op	61:20	0:0	6	+=
water	61:23	0:0	6	s
op	61:24	0:0	6	->
water	61:26	0:0	6	size
op	61:31	0:0	6	-
water	61:33	0:0	6	1
water	61:34	0:0	6	;
water	62:12	0:0	6	d2_data
op	62:20	0:0	6	+=
water	62:23	0:0	6	s
op	62:24	0:0	6	->
water	62:26	0:0	6	size
op	62:31	0:0	6	-
water	62:33	0:0	6	1
water	62:34	0:0	6	;
water	63:8	0:0	6	}
for	64:8	103:8	4	(y = 0 ;y < src_h;y ++)
forinit	64:13	64:18	5	y = 0 ;
water	64:13	0:0	6	y
op	64:15	0:0	6	=
water	64:17	0:0	6	0
water	64:18	0:0	6	;
cond	64:20	64:24	5	y < src_h
water	64:20	0:0	6	y
op	64:22	0:0	6	<
water	64:24	0:0	6	src_h
forexpr	64:31	64:32	5	y ++
water	64:31	0:0	6	y
op	64:32	0:0	6	++
stmts	64:36	103:8	5	
water	64:36	0:0	6	{
for	65:12	98:12	6	(x = 0 ;x < src_w;x ++)
forinit	65:17	65:22	7	x = 0 ;
water	65:17	0:0	8	x
op	65:19	0:0	8	=
water	65:21	0:0	8	0
water	65:22	0:0	8	;
cond	65:24	65:28	7	x < src_w
water	65:24	0:0	8	x
op	65:26	0:0	8	<
water	65:28	0:0	8	src_w
forexpr	65:35	65:36	7	x ++
water	65:35	0:0	8	x
op	65:36	0:0	8	++
stmts	65:40	98:12	7	
water	65:40	0:0	8	{
decl	66:16	66:47	8	const int	c1
op	66:29	0:0	8	=
water	66:31	0:0	8	c1_data
op	66:38	0:0	8	[
water	66:39	0:0	8	x
op	66:40	0:0	8	]
op	66:42	0:0	8	-
water	66:44	0:0	8	128
decl	67:16	67:47	8	const int	c2
op	67:29	0:0	8	=
water	67:31	0:0	8	c2_data
op	67:38	0:0	8	[
water	67:39	0:0	8	x
op	67:40	0:0	8	]
op	67:42	0:0	8	-
water	67:44	0:0	8	128
decl	68:16	68:31	8	uint8_t	*target
decl	69:16	69:21	8	int	p
for	70:16	76:16	8	(p = 128 + c1 ;p < 128;p ++)
forinit	70:21	70:33	9	p = 128 + c1 ;
water	70:21	0:0	10	p
op	70:23	0:0	10	=
water	70:25	0:0	10	128
op	70:29	0:0	10	+
water	70:31	0:0	10	c1
water	70:33	0:0	10	;
cond	70:35	70:39	9	p < 128
water	70:35	0:0	10	p
op	70:37	0:0	10	<
water	70:39	0:0	10	128
forexpr	70:44	70:45	9	p ++
water	70:44	0:0	10	p
op	70:45	0:0	10	++
stmts	70:49	76:16	9	
water	70:49	0:0	10	{
if	71:20	72:44	10	(mirror)
cond	71:24	71:24	11	mirror
water	71:24	0:0	12	mirror
stmts	72:24	72:44	11	
water	72:24	0:0	12	target
op	72:31	0:0	12	=
water	72:33	0:0	12	d1_data
op	72:41	0:0	12	-
water	72:43	0:0	12	p
water	72:44	0:0	12	;
else	73:20	74:44	10
stmts	74:24	74:44	11	
water	74:24	0:0	12	target
op	74:31	0:0	12	=
water	74:33	0:0	12	d1_data
op	74:41	0:0	12	+
water	74:43	0:0	12	p
water	74:44	0:0	12	;
call	75:20	75:41	10	update
arg	75:27	75:33	11	target
water	75:27	0:0	12	target
arg	75:35	75:38	11	max
water	75:35	0:0	12	max
arg	75:40	75:41	11	1
water	75:40	0:0	12	1
water	75:42	0:0	10	;
water	76:16	0:0	10	}
for	77:16	83:16	8	(p = 128 + 1 ;p < 128 + c1;p ++)
forinit	77:21	77:32	9	p = 128 + 1 ;
water	77:21	0:0	10	p
op	77:23	0:0	10	=
water	77:25	0:0	10	128
op	77:29	0:0	10	+
water	77:31	0:0	10	1
water	77:32	0:0	10	;
cond	77:34	77:44	9	p < 128 + c1
water	77:34	0:0	10	p
op	77:36	0:0	10	<
water	77:38	0:0	10	128
op	77:42	0:0	10	+
water	77:44	0:0	10	c1
forexpr	77:48	77:49	9	p ++
water	77:48	0:0	10	p
op	77:49	0:0	10	++
stmts	77:53	83:16	9	
water	77:53	0:0	10	{
if	78:20	79:44	10	(mirror)
cond	78:24	78:24	11	mirror
water	78:24	0:0	12	mirror
stmts	79:24	79:44	11	
water	79:24	0:0	12	target
op	79:31	0:0	12	=
water	79:33	0:0	12	d1_data
op	79:41	0:0	12	-
water	79:43	0:0	12	p
water	79:44	0:0	12	;
else	80:20	81:44	10
stmts	81:24	81:44	11	
water	81:24	0:0	12	target
op	81:31	0:0	12	=
water	81:33	0:0	12	d1_data
op	81:41	0:0	12	+
water	81:43	0:0	12	p
water	81:44	0:0	12	;
call	82:20	82:41	10	update
arg	82:27	82:33	11	target
water	82:27	0:0	12	target
arg	82:35	82:38	11	max
water	82:35	0:0	12	max
arg	82:40	82:41	11	1
water	82:40	0:0	12	1
water	82:42	0:0	10	;
water	83:16	0:0	10	}
for	84:16	90:16	8	(p = 128 + c2 ;p < 128;p ++)
forinit	84:21	84:33	9	p = 128 + c2 ;
water	84:21	0:0	10	p
op	84:23	0:0	10	=
water	84:25	0:0	10	128
op	84:29	0:0	10	+
water	84:31	0:0	10	c2
water	84:33	0:0	10	;
cond	84:35	84:39	9	p < 128
water	84:35	0:0	10	p
op	84:37	0:0	10	<
water	84:39	0:0	10	128
forexpr	84:44	84:45	9	p ++
water	84:44	0:0	10	p
op	84:45	0:0	10	++
stmts	84:49	90:16	9	
water	84:49	0:0	10	{
if	85:20	86:44	10	(mirror)
cond	85:24	85:24	11	mirror
water	85:24	0:0	12	mirror
stmts	86:24	86:44	11	
water	86:24	0:0	12	target
op	86:31	0:0	12	=
water	86:33	0:0	12	d2_data
op	86:41	0:0	12	-
water	86:43	0:0	12	p
water	86:44	0:0	12	;
else	87:20	88:44	10
stmts	88:24	88:44	11	
water	88:24	0:0	12	target
op	88:31	0:0	12	=
water	88:33	0:0	12	d2_data
op	88:41	0:0	12	+
water	88:43	0:0	12	p
water	88:44	0:0	12	;
call	89:20	89:41	10	update
arg	89:27	89:33	11	target
water	89:27	0:0	12	target
arg	89:35	89:38	11	max
water	89:35	0:0	12	max
arg	89:40	89:41	11	1
water	89:40	0:0	12	1
water	89:42	0:0	10	;
water	90:16	0:0	10	}
for	91:16	97:16	8	(p = 128 + 1 ;p < 128 + c2;p ++)
forinit	91:21	91:32	9	p = 128 + 1 ;
water	91:21	0:0	10	p
op	91:23	0:0	10	=
water	91:25	0:0	10	128
op	91:29	0:0	10	+
water	91:31	0:0	10	1
water	91:32	0:0	10	;
cond	91:34	91:44	9	p < 128 + c2
water	91:34	0:0	10	p
op	91:36	0:0	10	<
water	91:38	0:0	10	128
op	91:42	0:0	10	+
water	91:44	0:0	10	c2
forexpr	91:48	91:49	9	p ++
water	91:48	0:0	10	p
op	91:49	0:0	10	++
stmts	91:53	97:16	9	
water	91:53	0:0	10	{
if	92:20	93:44	10	(mirror)
cond	92:24	92:24	11	mirror
water	92:24	0:0	12	mirror
stmts	93:24	93:44	11	
water	93:24	0:0	12	target
op	93:31	0:0	12	=
water	93:33	0:0	12	d2_data
op	93:41	0:0	12	-
water	93:43	0:0	12	p
water	93:44	0:0	12	;
else	94:20	95:44	10
stmts	95:24	95:44	11	
water	95:24	0:0	12	target
op	95:31	0:0	12	=
water	95:33	0:0	12	d2_data
op	95:41	0:0	12	+
water	95:43	0:0	12	p
water	95:44	0:0	12	;
call	96:20	96:41	10	update
arg	96:27	96:33	11	target
water	96:27	0:0	12	target
arg	96:35	96:38	11	max
water	96:35	0:0	12	max
arg	96:40	96:41	11	1
water	96:40	0:0	12	1
water	96:42	0:0	10	;
water	97:16	0:0	10	}
water	98:12	0:0	8	}
water	99:12	0:0	6	c1_data
op	99:20	0:0	6	+=
water	99:23	0:0	6	c1_linesize
water	99:34	0:0	6	;
water	100:12	0:0	6	c2_data
op	100:20	0:0	6	+=
water	100:23	0:0	6	c2_linesize
water	100:34	0:0	6	;
water	101:12	0:0	6	d1_data
op	101:20	0:0	6	+=
water	101:23	0:0	6	d1_linesize
water	101:34	0:0	6	;
water	102:12	0:0	6	d2_data
op	102:20	0:0	6	+=
water	102:23	0:0	6	d2_linesize
water	102:34	0:0	6	;
water	103:8	0:0	6	}
water	104:4	0:0	4	}
call	105:4	105:50	2	envelope
arg	105:13	105:14	3	s
water	105:13	0:0	4	s
arg	105:16	105:19	3	out
water	105:16	0:0	4	out
arg	105:21	105:26	3	plane
water	105:21	0:0	4	plane
arg	105:28	105:50	3	(plane+1)%s->ncomp
water	105:28	0:0	4	(
water	105:29	0:0	4	plane
op	105:35	0:0	4	+
water	105:37	0:0	4	1
water	105:38	0:0	4	)
op	105:40	0:0	4	%
water	105:42	0:0	4	s
op	105:43	0:0	4	->
water	105:45	0:0	4	ncomp
water	105:51	0:0	2	;
call	106:4	106:50	2	envelope
arg	106:13	106:14	3	s
water	106:13	0:0	4	s
arg	106:16	106:19	3	out
water	106:16	0:0	4	out
arg	106:21	106:26	3	plane
water	106:21	0:0	4	plane
arg	106:28	106:50	3	(plane+2)%s->ncomp
water	106:28	0:0	4	(
water	106:29	0:0	4	plane
op	106:35	0:0	4	+
water	106:37	0:0	4	2
water	106:38	0:0	4	)
op	106:40	0:0	4	%
water	106:42	0:0	4	s
op	106:43	0:0	4	->
water	106:45	0:0	4	ncomp
water	106:51	0:0	2	;
