func	1:0	67:0	0	int	ff_interleave_packet_per_dts
params	1:32	0:0	1	
param	1:33	1:51	2	AVFormatContext *	s
param	1:53	1:66	2	AVPacket *	out
param	2:33	2:46	2	AVPacket *	pkt
param	2:48	2:57	2	int	flush
stmnts	0:0	66:4	1	
decl	4:4	4:22	2	AVPacketList	*pktl
decl	5:4	5:24	2	int	stream_count
op	5:21	0:0	2	=
water	5:23	0:0	2	0
decl	6:4	6:32	2	int	noninterleaved_count
op	6:29	0:0	2	=
water	6:31	0:0	2	0
decl	7:4	7:14	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:14	2	int	ret
if	8:4	11:4	2	(pkt)
cond	8:8	8:8	3	pkt
water	8:8	0:0	4	pkt
stmts	8:13	11:4	3	
water	8:13	0:0	4	{
if	9:8	10:22	4	(( ret =ff_interleave_add_packet (s ,pkt ,interleave_compare_dts ) ) < 0)
cond	9:12	9:79	5	( ret =ff_interleave_add_packet (s ,pkt ,interleave_compare_dts ) ) < 0
water	9:12	0:0	6	(
water	9:13	0:0	6	ret
op	9:17	0:0	6	=
call	9:19	9:74	6	ff_interleave_add_packet
arg	9:44	9:45	7	s
water	9:44	0:0	8	s
arg	9:47	9:50	7	pkt
water	9:47	0:0	8	pkt
arg	9:52	9:74	7	interleave_compare_dts
water	9:52	0:0	8	interleave_compare_dts
water	9:75	0:0	6	)
op	9:77	0:0	6	<
water	9:79	0:0	6	0
stmts	10:12	10:22	5	
return	10:12	10:22	6	ret
water	10:19	0:0	7	ret
water	11:4	0:0	4	}
for	12:4	20:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:23	3	i < s -> nb_streams
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	s
op	12:21	0:0	4	->
water	12:23	0:0	4	nb_streams
forexpr	12:35	12:36	3	i ++
water	12:35	0:0	4	i
op	12:36	0:0	4	++
stmts	12:40	20:4	3	
water	12:40	0:0	4	{
if	13:8	15:8	4	(s -> streams [ i ] -> last_in_packet_buffer)
cond	13:12	13:27	5	s -> streams [ i ] -> last_in_packet_buffer
water	13:12	0:0	6	s
op	13:13	0:0	6	->
water	13:15	0:0	6	streams
op	13:22	0:0	6	[
water	13:23	0:0	6	i
op	13:24	0:0	6	]
op	13:25	0:0	6	->
water	13:27	0:0	6	last_in_packet_buffer
stmts	13:50	15:8	5	
water	13:50	0:0	6	{
op	14:12	0:0	6	++
water	14:14	0:0	6	stream_count
water	14:26	0:0	6	;
water	15:8	0:0	6	}
else	15:10	19:8	4
stmts	15:15	19:8	5	
if	15:15	19:8	6	(s -> streams [ i ] -> codec -> codec_type != AVMEDIA_TYPE_ATTACHMENT && s -> streams [ i ] -> codec -> codec_id != AV_CODEC_ID_VP8 && s -> streams [ i ] -> codec -> codec_id != AV_CODEC_ID_VP9)
cond	15:19	17:53	7	s -> streams [ i ] -> codec -> codec_type != AVMEDIA_TYPE_ATTACHMENT && s -> streams [ i ] -> codec -> codec_id != AV_CODEC_ID_VP8 && s -> streams [ i ] -> codec -> codec_id != AV_CODEC_ID_VP9
water	15:19	0:0	8	s
op	15:20	0:0	8	->
water	15:22	0:0	8	streams
op	15:29	0:0	8	[
water	15:30	0:0	8	i
op	15:31	0:0	8	]
op	15:32	0:0	8	->
water	15:34	0:0	8	codec
op	15:39	0:0	8	->
water	15:41	0:0	8	codec_type
op	15:52	0:0	8	!=
water	15:55	0:0	8	AVMEDIA_TYPE_ATTACHMENT
op	15:79	0:0	8	&&
water	16:19	0:0	8	s
op	16:20	0:0	8	->
water	16:22	0:0	8	streams
op	16:29	0:0	8	[
water	16:30	0:0	8	i
op	16:31	0:0	8	]
op	16:32	0:0	8	->
water	16:34	0:0	8	codec
op	16:39	0:0	8	->
water	16:41	0:0	8	codec_id
op	16:50	0:0	8	!=
water	16:53	0:0	8	AV_CODEC_ID_VP8
op	16:69	0:0	8	&&
water	17:19	0:0	8	s
op	17:20	0:0	8	->
water	17:22	0:0	8	streams
op	17:29	0:0	8	[
water	17:30	0:0	8	i
op	17:31	0:0	8	]
op	17:32	0:0	8	->
water	17:34	0:0	8	codec
op	17:39	0:0	8	->
water	17:41	0:0	8	codec_id
op	17:50	0:0	8	!=
water	17:53	0:0	8	AV_CODEC_ID_VP9
stmts	17:70	19:8	7	
water	17:70	0:0	8	{
op	18:12	0:0	8	++
water	18:14	0:0	8	noninterleaved_count
water	18:34	0:0	8	;
water	19:8	0:0	8	}
water	20:4	0:0	4	}
if	21:4	22:17	2	(s -> internal -> nb_interleaved_streams == stream_count)
cond	21:8	21:47	3	s -> internal -> nb_interleaved_streams == stream_count
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	internal
op	21:19	0:0	4	->
water	21:21	0:0	4	nb_interleaved_streams
op	21:44	0:0	4	==
water	21:47	0:0	4	stream_count
stmts	22:8	22:17	3	
water	22:8	0:0	4	flush
op	22:14	0:0	4	=
water	22:16	0:0	4	1
water	22:17	0:0	4	;
if	23:4	50:4	2	(s -> max_interleave_delta > 0 && s -> internal -> packet_buffer && ! flush && s -> internal -> nb_interleaved_streams == stream_count + noninterleaved_count)
cond	23:8	26:60	3	s -> max_interleave_delta > 0 && s -> internal -> packet_buffer && ! flush && s -> internal -> nb_interleaved_streams == stream_count + noninterleaved_count
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	max_interleave_delta
op	23:32	0:0	4	>
water	23:34	0:0	4	0
op	23:36	0:0	4	&&
water	24:8	0:0	4	s
op	24:9	0:0	4	->
water	24:11	0:0	4	internal
op	24:19	0:0	4	->
water	24:21	0:0	4	packet_buffer
op	24:35	0:0	4	&&
op	25:8	0:0	4	!
water	25:9	0:0	4	flush
op	25:15	0:0	4	&&
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	internal
op	26:19	0:0	4	->
water	26:21	0:0	4	nb_interleaved_streams
op	26:44	0:0	4	==
water	26:47	0:0	4	stream_count
op	26:59	0:0	4	+
water	26:60	0:0	4	noninterleaved_count
stmts	27:6	50:4	3	
water	27:6	0:0	4	{
decl	28:8	28:60	4	AVPacket	*top_pkt
op	28:26	0:0	4	=
op	28:28	0:0	4	&
water	28:29	0:0	4	s
op	28:30	0:0	4	->
water	28:32	0:0	4	internal
op	28:40	0:0	4	->
water	28:42	0:0	4	packet_buffer
op	28:55	0:0	4	->
water	28:57	0:0	4	pkt
decl	29:8	29:37	4	int64_t	delta_dts
op	29:26	0:0	4	=
water	29:28	0:0	4	INT64_MIN
decl	30:8	32:54	4	int64_t	top_dts
op	30:24	0:0	4	=
call	30:26	32:53	5	av_rescale_q
arg	30:39	30:51	6	top_pkt->dts
water	30:39	0:0	7	top_pkt
op	30:46	0:0	7	->
water	30:48	0:0	7	dts
arg	31:39	31:83	6	s->streams[top_pkt->stream_index]->time_base
water	31:39	0:0	7	s
op	31:40	0:0	7	->
water	31:42	0:0	7	streams
op	31:49	0:0	7	[
water	31:50	0:0	7	top_pkt
op	31:57	0:0	7	->
water	31:59	0:0	7	stream_index
op	31:71	0:0	7	]
op	31:72	0:0	7	->
water	31:74	0:0	7	time_base
arg	32:39	32:53	6	AV_TIME_BASE_Q
water	32:39	0:0	7	AV_TIME_BASE_Q
for	33:8	42:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	33:13	33:18	5	i = 0 ;
water	33:13	0:0	6	i
op	33:15	0:0	6	=
water	33:17	0:0	6	0
water	33:18	0:0	6	;
cond	33:20	33:27	5	i < s -> nb_streams
water	33:20	0:0	6	i
op	33:22	0:0	6	<
water	33:24	0:0	6	s
op	33:25	0:0	6	->
water	33:27	0:0	6	nb_streams
forexpr	33:39	33:40	5	i ++
water	33:39	0:0	6	i
op	33:40	0:0	6	++
stmts	33:44	42:8	5	
water	33:44	0:0	6	{
decl	34:12	34:28	6	int64_t	last_dts
decl	35:12	35:75	6	const AVPacketList	*last
op	35:37	0:0	6	=
water	35:39	0:0	6	s
op	35:40	0:0	6	->
water	35:42	0:0	6	streams
op	35:49	0:0	6	[
water	35:50	0:0	6	i
op	35:51	0:0	6	]
op	35:52	0:0	6	->
water	35:54	0:0	6	last_in_packet_buffer
if	36:12	37:24	6	(! last)
cond	36:16	36:17	7	! last
op	36:16	0:0	8	!
water	36:17	0:0	8	last
stmts	37:16	37:24	7	
continue	37:16	37:24	8	
water	38:12	0:0	6	last_dts
op	38:21	0:0	6	=
call	38:23	40:50	6	av_rescale_q
arg	38:36	38:49	7	last->pkt.dts
water	38:36	0:0	8	last
op	38:40	0:0	8	->
water	38:42	0:0	8	pkt
op	38:45	0:0	8	.
water	38:46	0:0	8	dts
arg	39:36	39:60	7	s->streams[i]->time_base
water	39:36	0:0	8	s
op	39:37	0:0	8	->
water	39:39	0:0	8	streams
op	39:46	0:0	8	[
water	39:47	0:0	8	i
op	39:48	0:0	8	]
op	39:49	0:0	8	->
water	39:51	0:0	8	time_base
arg	40:36	40:50	7	AV_TIME_BASE_Q
water	40:36	0:0	8	AV_TIME_BASE_Q
water	40:51	0:0	6	;
water	41:12	0:0	6	delta_dts
op	41:22	0:0	6	=
call	41:24	41:59	6	FFMAX
arg	41:30	41:39	7	delta_dts
water	41:30	0:0	8	delta_dts
arg	41:41	41:59	7	last_dts-top_dts
water	41:41	0:0	8	last_dts
op	41:50	0:0	8	-
water	41:52	0:0	8	top_dts
water	41:60	0:0	6	;
water	42:8	0:0	6	}
if	43:8	49:8	4	(delta_dts > s -> max_interleave_delta)
cond	43:12	43:27	5	delta_dts > s -> max_interleave_delta
water	43:12	0:0	6	delta_dts
op	43:22	0:0	6	>
water	43:24	0:0	6	s
op	43:25	0:0	6	->
water	43:27	0:0	6	max_interleave_delta
stmts	43:49	49:8	5	
water	43:49	0:0	6	{
call	44:12	47:53	6	av_log
arg	44:19	44:20	7	s
water	44:19	0:0	8	s
arg	44:22	44:34	7	AV_LOG_DEBUG
water	44:22	0:0	8	AV_LOG_DEBUG
arg	45:19	46:76	7	"Delay between the first packet and last packet in the ""muxing queue is %"PRId64" > %"PRId64": forcing output\n"
water	45:19	0:0	8	"Delay between the first packet and last packet in the "
water	46:19	0:0	8	"muxing queue is %"
water	46:38	0:0	8	PRId64
water	46:44	0:0	8	" > %"
water	46:50	0:0	8	PRId64
water	46:56	0:0	8	": forcing output\n"
arg	47:19	47:28	7	delta_dts
water	47:19	0:0	8	delta_dts
arg	47:30	47:53	7	s->max_interleave_delta
water	47:30	0:0	8	s
op	47:31	0:0	8	->
water	47:33	0:0	8	max_interleave_delta
water	47:54	0:0	6	;
water	48:12	0:0	6	flush
op	48:18	0:0	6	=
water	48:20	0:0	6	1
water	48:21	0:0	6	;
water	49:8	0:0	6	}
water	50:4	0:0	4	}
if	51:4	63:4	2	(stream_count && flush)
cond	51:8	51:24	3	stream_count && flush
water	51:8	0:0	4	stream_count
op	51:21	0:0	4	&&
water	51:24	0:0	4	flush
stmts	51:31	63:4	3	
water	51:31	0:0	4	{
decl	52:8	52:20	4	AVStream	*st
water	53:8	0:0	4	pktl
op	53:13	0:0	4	=
water	53:15	0:0	4	s
op	53:16	0:0	4	->
water	53:18	0:0	4	internal
op	53:26	0:0	4	->
water	53:28	0:0	4	packet_buffer
water	53:41	0:0	4	;
op	54:8	0:0	4	*
water	54:9	0:0	4	out
op	54:13	0:0	4	=
water	54:15	0:0	4	pktl
op	54:19	0:0	4	->
water	54:21	0:0	4	pkt
water	54:24	0:0	4	;
water	55:8	0:0	4	st
op	55:13	0:0	4	=
water	55:15	0:0	4	s
op	55:16	0:0	4	->
water	55:18	0:0	4	streams
op	55:25	0:0	4	[
water	55:26	0:0	4	out
op	55:29	0:0	4	->
water	55:31	0:0	4	stream_index
op	55:43	0:0	4	]
water	55:44	0:0	4	;
water	56:8	0:0	4	s
op	56:9	0:0	4	->
water	56:11	0:0	4	internal
op	56:19	0:0	4	->
water	56:21	0:0	4	packet_buffer
op	56:35	0:0	4	=
water	56:37	0:0	4	pktl
op	56:41	0:0	4	->
water	56:43	0:0	4	next
water	56:47	0:0	4	;
if	57:8	58:49	4	(! s -> internal -> packet_buffer)
cond	57:12	57:26	5	! s -> internal -> packet_buffer
op	57:12	0:0	6	!
water	57:13	0:0	6	s
op	57:14	0:0	6	->
water	57:16	0:0	6	internal
op	57:24	0:0	6	->
water	57:26	0:0	6	packet_buffer
stmts	58:12	58:49	5	
water	58:12	0:0	6	s
op	58:13	0:0	6	->
water	58:15	0:0	6	internal
op	58:23	0:0	6	->
water	58:25	0:0	6	packet_buffer_end
op	58:43	0:0	6	=
water	58:45	0:0	6	NULL
water	58:49	0:0	6	;
if	59:8	60:44	4	(st -> last_in_packet_buffer == pktl)
cond	59:12	59:41	5	st -> last_in_packet_buffer == pktl
water	59:12	0:0	6	st
op	59:14	0:0	6	->
water	59:16	0:0	6	last_in_packet_buffer
op	59:38	0:0	6	==
water	59:41	0:0	6	pktl
stmts	60:12	60:44	5	
water	60:12	0:0	6	st
op	60:14	0:0	6	->
water	60:16	0:0	6	last_in_packet_buffer
op	60:38	0:0	6	=
water	60:40	0:0	6	NULL
water	60:44	0:0	6	;
call	61:8	61:22	4	av_freep
arg	61:17	61:22	5	&pktl
op	61:17	0:0	6	&
water	61:18	0:0	6	pktl
water	61:23	0:0	4	;
return	62:8	62:16	4	1
water	62:15	0:0	5	1
water	63:4	0:0	4	}
else	63:6	66:4	2
stmts	63:11	66:4	3	
water	63:11	0:0	4	{
call	64:8	64:26	4	av_init_packet
arg	64:23	64:26	5	out
water	64:23	0:0	6	out
water	64:27	0:0	4	;
return	65:8	65:16	4	0
water	65:15	0:0	5	0
water	66:4	0:0	4	}
