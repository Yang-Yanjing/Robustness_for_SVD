func	1:0	86:0	0	static int	read_data
params	1:20	0:0	1	
param	1:21	1:33	2	void *	opaque
param	1:35	1:47	2	uint8_t *	buf
param	1:49	1:61	2	int	buf_size
stmnts	0:0	85:16	1	
decl	3:4	3:31	2	struct playlist	*v
op	3:23	0:0	2	=
water	3:25	0:0	2	opaque
decl	4:4	4:40	2	HLSContext	*c
op	4:18	0:0	2	=
water	4:20	0:0	2	v
op	4:21	0:0	2	->
water	4:23	0:0	2	parent
op	4:29	0:0	2	->
water	4:31	0:0	2	priv_data
decl	5:4	5:14	2	int	ret
water	5:11	0:0	2	,
decl	5:4	5:14	2	int	i
decl	6:4	6:23	2	int	just_opened
op	6:20	0:0	2	=
water	6:22	0:0	2	0
label	7:0	7:7	2	restart :
if	8:4	9:26	2	(! v -> needed)
cond	8:8	8:12	3	! v -> needed
op	8:8	0:0	4	!
water	8:9	0:0	4	v
op	8:10	0:0	4	->
water	8:12	0:0	4	needed
stmts	9:8	9:26	3	
return	9:8	9:26	4	AVERROR_EOF
water	9:15	0:0	5	AVERROR_EOF
if	10:4	71:4	2	(! v -> input)
cond	10:8	10:12	3	! v -> input
op	10:8	0:0	4	!
water	10:9	0:0	4	v
op	10:10	0:0	4	->
water	10:12	0:0	4	input
stmts	10:19	71:4	3	
water	10:19	0:0	4	{
decl	11:8	11:31	4	int64_t	reload_interval
if	14:8	22:8	4	(v -> ctx && v -> ctx -> nb_streams && v -> parent -> nb_streams >= v -> stream_offset + v -> ctx -> nb_streams)
cond	14:12	15:64	5	v -> ctx && v -> ctx -> nb_streams && v -> parent -> nb_streams >= v -> stream_offset + v -> ctx -> nb_streams
water	14:12	0:0	6	v
op	14:13	0:0	6	->
water	14:15	0:0	6	ctx
op	14:19	0:0	6	&&
water	14:22	0:0	6	v
op	14:23	0:0	6	->
water	14:25	0:0	6	ctx
op	14:28	0:0	6	->
water	14:30	0:0	6	nb_streams
op	14:41	0:0	6	&&
water	15:12	0:0	6	v
op	15:13	0:0	6	->
water	15:15	0:0	6	parent
op	15:21	0:0	6	->
water	15:23	0:0	6	nb_streams
op	15:34	0:0	6	>=
water	15:37	0:0	6	v
op	15:38	0:0	6	->
water	15:40	0:0	6	stream_offset
op	15:54	0:0	6	+
water	15:56	0:0	6	v
op	15:57	0:0	6	->
water	15:59	0:0	6	ctx
op	15:62	0:0	6	->
water	15:64	0:0	6	nb_streams
stmts	15:76	22:8	5	
water	15:76	0:0	6	{
water	16:12	0:0	6	v
op	16:13	0:0	6	->
water	16:15	0:0	6	needed
op	16:22	0:0	6	=
water	16:24	0:0	6	0
water	16:25	0:0	6	;
for	17:12	21:12	6	(i = v -> stream_offset ;i < v -> stream_offset + v -> ctx -> nb_streams;i ++)
forinit	17:17	17:37	7	i = v -> stream_offset ;
water	17:17	0:0	8	i
op	17:19	0:0	8	=
water	17:21	0:0	8	v
op	17:22	0:0	8	->
water	17:24	0:0	8	stream_offset
water	17:37	0:0	8	;
cond	17:39	17:70	7	i < v -> stream_offset + v -> ctx -> nb_streams
water	17:39	0:0	8	i
op	17:41	0:0	8	<
water	17:43	0:0	8	v
op	17:44	0:0	8	->
water	17:46	0:0	8	stream_offset
op	17:60	0:0	8	+
water	17:62	0:0	8	v
op	17:63	0:0	8	->
water	17:65	0:0	8	ctx
op	17:68	0:0	8	->
water	17:70	0:0	8	nb_streams
forexpr	18:16	18:17	7	i ++
water	18:16	0:0	8	i
op	18:17	0:0	8	++
stmts	18:21	21:12	7	
water	18:21	0:0	8	{
if	19:16	20:33	8	(v -> parent -> streams [ i ] -> discard < AVDISCARD_ALL)
cond	19:20	19:53	9	v -> parent -> streams [ i ] -> discard < AVDISCARD_ALL
water	19:20	0:0	10	v
op	19:21	0:0	10	->
water	19:23	0:0	10	parent
op	19:29	0:0	10	->
water	19:31	0:0	10	streams
op	19:38	0:0	10	[
water	19:39	0:0	10	i
op	19:40	0:0	10	]
op	19:41	0:0	10	->
water	19:43	0:0	10	discard
op	19:51	0:0	10	<
water	19:53	0:0	10	AVDISCARD_ALL
stmts	20:20	20:33	9	
water	20:20	0:0	10	v
op	20:21	0:0	10	->
water	20:23	0:0	10	needed
op	20:30	0:0	10	=
water	20:32	0:0	10	1
water	20:33	0:0	10	;
water	21:12	0:0	8	}
water	22:8	0:0	6	}
if	23:8	27:8	4	(! v -> needed)
cond	23:12	23:16	5	! v -> needed
op	23:12	0:0	6	!
water	23:13	0:0	6	v
op	23:14	0:0	6	->
water	23:16	0:0	6	needed
stmts	23:24	27:8	5	
water	23:24	0:0	6	{
call	24:12	25:24	6	av_log
arg	24:19	24:28	7	v->parent
water	24:19	0:0	8	v
op	24:20	0:0	8	->
water	24:22	0:0	8	parent
arg	24:30	24:41	7	AV_LOG_INFO
water	24:30	0:0	8	AV_LOG_INFO
arg	24:43	24:78	7	"No longer receiving playlist %d\n"
water	24:43	0:0	8	"No longer receiving playlist %d\n"
arg	25:16	25:24	7	v->index
water	25:16	0:0	8	v
op	25:17	0:0	8	->
water	25:19	0:0	8	index
water	25:25	0:0	6	;
return	26:12	26:30	6	AVERROR_EOF
water	26:19	0:0	7	AVERROR_EOF
water	27:8	0:0	6	}
water	30:8	0:0	4	reload_interval
op	30:24	0:0	4	=
call	30:26	30:51	4	default_reload_interval
arg	30:50	30:51	5	v
water	30:50	0:0	6	v
water	30:52	0:0	4	;
label	31:0	31:6	4	reload :
if	32:8	43:8	4	(! v -> finished &&av_gettime_relative ( ) - v -> last_load_time >= reload_interval)
cond	32:12	33:57	5	! v -> finished &&av_gettime_relative ( ) - v -> last_load_time >= reload_interval
op	32:12	0:0	6	!
water	32:13	0:0	6	v
op	32:14	0:0	6	->
water	32:16	0:0	6	finished
op	32:25	0:0	6	&&
call	33:12	33:32	6	av_gettime_relative
op	33:34	0:0	6	-
water	33:36	0:0	6	v
op	33:37	0:0	6	->
water	33:39	0:0	6	last_load_time
op	33:54	0:0	6	>=
water	33:57	0:0	6	reload_interval
stmts	33:74	43:8	5	
water	33:74	0:0	6	{
if	34:12	38:12	6	(( ret =parse_playlist (c ,v -> url ,v ,NULL ) ) < 0)
cond	34:16	34:61	7	( ret =parse_playlist (c ,v -> url ,v ,NULL ) ) < 0
water	34:16	0:0	8	(
water	34:17	0:0	8	ret
op	34:21	0:0	8	=
call	34:23	34:56	8	parse_playlist
arg	34:38	34:39	9	c
water	34:38	0:0	10	c
arg	34:41	34:47	9	v->url
water	34:41	0:0	10	v
op	34:42	0:0	10	->
water	34:44	0:0	10	url
arg	34:49	34:50	9	v
water	34:49	0:0	10	v
arg	34:52	34:56	9	NULL
water	34:52	0:0	10	NULL
water	34:57	0:0	8	)
op	34:59	0:0	8	<
water	34:61	0:0	8	0
stmts	34:64	38:12	7	
water	34:64	0:0	8	{
call	35:16	36:31	8	av_log
arg	35:23	35:32	9	v->parent
water	35:23	0:0	10	v
op	35:24	0:0	10	->
water	35:26	0:0	10	parent
arg	35:34	35:48	9	AV_LOG_WARNING
water	35:34	0:0	10	AV_LOG_WARNING
arg	35:50	35:82	9	"Failed to reload playlist %d\n"
water	35:50	0:0	10	"Failed to reload playlist %d\n"
arg	36:23	36:31	9	v->index
water	36:23	0:0	10	v
op	36:24	0:0	10	->
water	36:26	0:0	10	index
water	36:32	0:0	8	;
return	37:16	37:26	8	ret
water	37:23	0:0	9	ret
water	38:12	0:0	8	}
water	42:12	0:0	6	reload_interval
op	42:28	0:0	6	=
water	42:30	0:0	6	v
op	42:31	0:0	6	->
water	42:33	0:0	6	target_duration
op	42:49	0:0	6	/
water	42:51	0:0	6	2
water	42:52	0:0	6	;
water	43:8	0:0	6	}
if	44:8	49:8	4	(v -> cur_seq_no < v -> start_seq_no)
cond	44:12	44:31	5	v -> cur_seq_no < v -> start_seq_no
water	44:12	0:0	6	v
op	44:13	0:0	6	->
water	44:15	0:0	6	cur_seq_no
op	44:26	0:0	6	<
water	44:28	0:0	6	v
op	44:29	0:0	6	->
water	44:31	0:0	6	start_seq_no
stmts	44:45	49:8	5	
water	44:45	0:0	6	{
call	45:12	47:50	6	av_log
arg	45:19	45:23	7	NULL
water	45:19	0:0	8	NULL
arg	45:25	45:39	7	AV_LOG_WARNING
water	45:25	0:0	8	AV_LOG_WARNING
arg	46:19	46:73	7	"skipping %d segments ahead, expired from playlists\n"
water	46:19	0:0	8	"skipping %d segments ahead, expired from playlists\n"
arg	47:19	47:50	7	v->start_seq_no-v->cur_seq_no
water	47:19	0:0	8	v
op	47:20	0:0	8	->
water	47:22	0:0	8	start_seq_no
op	47:35	0:0	8	-
water	47:37	0:0	8	v
op	47:38	0:0	8	->
water	47:40	0:0	8	cur_seq_no
water	47:51	0:0	6	;
water	48:12	0:0	6	v
op	48:13	0:0	6	->
water	48:15	0:0	6	cur_seq_no
op	48:26	0:0	6	=
water	48:28	0:0	6	v
op	48:29	0:0	6	->
water	48:31	0:0	6	start_seq_no
water	48:43	0:0	6	;
water	49:8	0:0	6	}
if	50:8	60:8	4	(v -> cur_seq_no >= v -> start_seq_no + v -> n_segments)
cond	50:12	50:50	5	v -> cur_seq_no >= v -> start_seq_no + v -> n_segments
water	50:12	0:0	6	v
op	50:13	0:0	6	->
water	50:15	0:0	6	cur_seq_no
op	50:26	0:0	6	>=
water	50:29	0:0	6	v
op	50:30	0:0	6	->
water	50:32	0:0	6	start_seq_no
op	50:45	0:0	6	+
water	50:47	0:0	6	v
op	50:48	0:0	6	->
water	50:50	0:0	6	n_segments
stmts	50:62	60:8	5	
water	50:62	0:0	6	{
if	51:12	52:34	6	(v -> finished)
cond	51:16	51:19	7	v -> finished
water	51:16	0:0	8	v
op	51:17	0:0	8	->
water	51:19	0:0	8	finished
stmts	52:16	52:34	7	
return	52:16	52:34	8	AVERROR_EOF
water	52:23	0:0	9	AVERROR_EOF
while	53:12	57:12	6	(av_gettime_relative ( ) - v -> last_load_time < reload_interval)
cond	53:19	53:63	7	av_gettime_relative ( ) - v -> last_load_time < reload_interval
call	53:19	53:39	8	av_gettime_relative
op	53:41	0:0	8	-
water	53:43	0:0	8	v
op	53:44	0:0	8	->
water	53:46	0:0	8	last_load_time
op	53:61	0:0	8	<
water	53:63	0:0	8	reload_interval
stmts	53:80	57:12	7	
water	53:80	0:0	8	{
if	54:16	55:39	8	(ff_check_interrupt (c -> interrupt_callback ))
cond	54:20	54:60	9	ff_check_interrupt (c -> interrupt_callback )
call	54:20	54:60	10	ff_check_interrupt
arg	54:39	54:60	11	c->interrupt_callback
water	54:39	0:0	12	c
op	54:40	0:0	12	->
water	54:42	0:0	12	interrupt_callback
stmts	55:20	55:39	9	
return	55:20	55:39	10	AVERROR_EXIT
water	55:27	0:0	11	AVERROR_EXIT
call	56:16	56:34	8	av_usleep
arg	56:26	56:34	9	100*1000
water	56:26	0:0	10	100
op	56:29	0:0	10	*
water	56:30	0:0	10	1000
water	56:35	0:0	8	;
water	57:12	0:0	8	}
goto	59:12	59:23	6	reload
water	59:17	0:0	7	reload
water	60:8	0:0	6	}
water	61:8	0:0	4	ret
op	61:12	0:0	4	=
call	61:14	61:29	4	open_input
arg	61:25	61:26	5	c
water	61:25	0:0	6	c
arg	61:28	61:29	5	v
water	61:28	0:0	6	v
water	61:30	0:0	4	;
if	62:8	69:8	4	(ret < 0)
cond	62:12	62:18	5	ret < 0
water	62:12	0:0	6	ret
op	62:16	0:0	6	<
water	62:18	0:0	6	0
stmts	62:21	69:8	5	
water	62:21	0:0	6	{
if	63:12	64:35	6	(ff_check_interrupt (c -> interrupt_callback ))
cond	63:16	63:56	7	ff_check_interrupt (c -> interrupt_callback )
call	63:16	63:56	8	ff_check_interrupt
arg	63:35	63:56	9	c->interrupt_callback
water	63:35	0:0	10	c
op	63:36	0:0	10	->
water	63:38	0:0	10	interrupt_callback
stmts	64:16	64:35	7	
return	64:16	64:35	8	AVERROR_EXIT
water	64:23	0:0	9	AVERROR_EXIT
call	65:12	66:27	6	av_log
arg	65:19	65:28	7	v->parent
water	65:19	0:0	8	v
op	65:20	0:0	8	->
water	65:22	0:0	8	parent
arg	65:30	65:44	7	AV_LOG_WARNING
water	65:30	0:0	8	AV_LOG_WARNING
arg	65:46	65:87	7	"Failed to open segment of playlist %d\n"
water	65:46	0:0	8	"Failed to open segment of playlist %d\n"
arg	66:19	66:27	7	v->index
water	66:19	0:0	8	v
op	66:20	0:0	8	->
water	66:22	0:0	8	index
water	66:28	0:0	6	;
water	67:12	0:0	6	v
op	67:13	0:0	6	->
water	67:15	0:0	6	cur_seq_no
op	67:26	0:0	6	+=
water	67:29	0:0	6	1
water	67:30	0:0	6	;
goto	68:12	68:23	6	reload
water	68:17	0:0	7	reload
water	69:8	0:0	6	}
water	70:8	0:0	4	just_opened
op	70:20	0:0	4	=
water	70:22	0:0	4	1
water	70:23	0:0	4	;
water	71:4	0:0	4	}
water	72:4	0:0	2	ret
op	72:8	0:0	2	=
call	72:10	72:53	2	read_from_url
arg	72:24	72:25	3	v
water	72:24	0:0	4	v
arg	72:27	72:30	3	buf
water	72:27	0:0	4	buf
arg	72:32	72:40	3	buf_size
water	72:32	0:0	4	buf_size
arg	72:42	72:53	3	READ_NORMAL
water	72:42	0:0	4	READ_NORMAL
water	72:54	0:0	2	;
if	73:4	80:4	2	(ret > 0)
cond	73:8	73:14	3	ret > 0
water	73:8	0:0	4	ret
op	73:12	0:0	4	>
water	73:14	0:0	4	0
stmts	73:17	80:4	3	
water	73:17	0:0	4	{
if	74:8	78:8	4	(just_opened && v -> is_id3_timestamped != 0)
cond	74:12	74:52	5	just_opened && v -> is_id3_timestamped != 0
water	74:12	0:0	6	just_opened
op	74:24	0:0	6	&&
water	74:27	0:0	6	v
op	74:28	0:0	6	->
water	74:30	0:0	6	is_id3_timestamped
op	74:49	0:0	6	!=
water	74:52	0:0	6	0
stmts	74:55	78:8	5	
water	74:55	0:0	6	{
call	77:12	77:48	6	intercept_id3
arg	77:26	77:27	7	v
water	77:26	0:0	8	v
arg	77:29	77:32	7	buf
water	77:29	0:0	8	buf
arg	77:34	77:42	7	buf_size
water	77:34	0:0	8	buf_size
arg	77:44	77:48	7	&ret
op	77:44	0:0	8	&
water	77:45	0:0	8	ret
water	77:49	0:0	6	;
water	78:8	0:0	6	}
return	79:8	79:18	4	ret
water	79:15	0:0	5	ret
water	80:4	0:0	4	}
call	81:4	81:24	2	ffurl_close
arg	81:16	81:24	3	v->input
water	81:16	0:0	4	v
op	81:17	0:0	4	->
water	81:19	0:0	4	input
water	81:25	0:0	2	;
water	82:4	0:0	2	v
op	82:5	0:0	2	->
water	82:7	0:0	2	input
op	82:13	0:0	2	=
water	82:15	0:0	2	NULL
water	82:19	0:0	2	;
water	83:4	0:0	2	v
op	83:5	0:0	2	->
water	83:7	0:0	2	cur_seq_no
op	83:17	0:0	2	++
water	83:19	0:0	2	;
water	84:4	0:0	2	c
op	84:5	0:0	2	->
water	84:7	0:0	2	cur_seq_no
op	84:18	0:0	2	=
water	84:20	0:0	2	v
op	84:21	0:0	2	->
water	84:23	0:0	2	cur_seq_no
water	84:33	0:0	2	;
goto	85:4	85:16	2	restart
water	85:9	0:0	3	restart
