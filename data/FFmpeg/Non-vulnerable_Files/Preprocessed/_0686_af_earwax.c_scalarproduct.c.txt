func	2:0	15:0	0	static inline int16_t *	scalarproduct
params	2:36	0:0	1	
param	2:37	2:54	2	const int16_t *	in
param	2:56	2:76	2	const int16_t *	endin
param	2:78	2:90	2	int16_t *	out
stmnts	0:0	14:14	1	
decl	4:4	4:18	2	int32_t	sample
decl	5:4	5:13	2	int16_t	j
while	6:4	13:4	2	(in < endin)
cond	6:11	6:16	3	in < endin
water	6:11	0:0	4	in
op	6:14	0:0	4	<
water	6:16	0:0	4	endin
stmts	6:23	13:4	3	
water	6:23	0:0	4	{
water	7:8	0:0	4	sample
op	7:15	0:0	4	=
water	7:17	0:0	4	0
water	7:18	0:0	4	;
for	8:8	9:37	4	(j = 0 ;j < NUMTAPS;j ++)
forinit	8:13	8:18	5	j = 0 ;
water	8:13	0:0	6	j
op	8:15	0:0	6	=
water	8:17	0:0	6	0
water	8:18	0:0	6	;
cond	8:20	8:24	5	j < NUMTAPS
water	8:20	0:0	6	j
op	8:22	0:0	6	<
water	8:24	0:0	6	NUMTAPS
forexpr	8:33	8:34	5	j ++
water	8:33	0:0	6	j
op	8:34	0:0	6	++
stmts	9:12	9:37	5	
water	9:12	0:0	6	sample
op	9:19	0:0	6	+=
water	9:22	0:0	6	in
op	9:24	0:0	6	[
water	9:25	0:0	6	j
op	9:26	0:0	6	]
op	9:28	0:0	6	*
water	9:30	0:0	6	filt
op	9:34	0:0	6	[
water	9:35	0:0	6	j
op	9:36	0:0	6	]
water	9:37	0:0	6	;
op	10:8	0:0	4	*
water	10:9	0:0	4	out
op	10:13	0:0	4	=
call	10:15	10:40	4	av_clip_int16
arg	10:29	10:40	5	sample>>6
water	10:29	0:0	6	sample
op	10:36	0:0	6	>>
water	10:39	0:0	6	6
water	10:41	0:0	4	;
water	11:8	0:0	4	out
op	11:11	0:0	4	++
water	11:13	0:0	4	;
water	12:8	0:0	4	in
op	12:10	0:0	4	++
water	12:12	0:0	4	;
water	13:4	0:0	4	}
return	14:4	14:14	2	out
water	14:11	0:0	3	out
