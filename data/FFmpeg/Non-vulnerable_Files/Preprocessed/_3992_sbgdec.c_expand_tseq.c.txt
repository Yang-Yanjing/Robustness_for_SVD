func	1:0	44:0	0	static int	expand_tseq
params	1:22	0:0	1	
param	1:23	1:32	2	void *	log
param	1:34	1:54	2	struct sbg_script *	s
param	1:56	1:70	2	int *	nb_ev_max
param	2:23	2:33	2	int64_t	t0
param	2:35	2:63	2	struct sbg_script_tseq *	tseq
stmnts	0:0	43:12	1	
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	r
decl	5:4	5:37	2	struct sbg_script_definition	*def
decl	6:4	6:30	2	struct sbg_script_tseq	*be
decl	7:4	7:31	2	struct sbg_script_event	*ev
if	8:4	12:4	2	(tseq -> lock ++)
cond	8:8	8:18	3	tseq -> lock ++
water	8:8	0:0	4	tseq
op	8:12	0:0	4	->
water	8:14	0:0	4	lock
op	8:18	0:0	4	++
stmts	8:22	12:4	3	
water	8:22	0:0	4	{
call	9:8	10:41	4	av_log
arg	9:15	9:18	5	log
water	9:15	0:0	6	log
arg	9:20	9:32	5	AV_LOG_ERROR
water	9:20	0:0	6	AV_LOG_ERROR
arg	9:34	9:64	5	"Recursion loop on \"%.*s\"\n"
water	9:34	0:0	6	"Recursion loop on \"%.*s\"\n"
arg	10:15	10:29	5	tseq->name_len
water	10:15	0:0	6	tseq
op	10:19	0:0	6	->
water	10:21	0:0	6	name_len
arg	10:31	10:41	5	tseq->name
water	10:31	0:0	6	tseq
op	10:35	0:0	6	->
water	10:37	0:0	6	name
water	10:42	0:0	4	;
return	11:8	11:30	4	AVERROR(EINVAL)
call	11:15	11:29	5	AVERROR
arg	11:23	11:29	6	EINVAL
water	11:23	0:0	7	EINVAL
water	12:4	0:0	4	}
water	13:4	0:0	2	t0
op	13:7	0:0	2	+=
water	13:10	0:0	2	tseq
op	13:14	0:0	2	->
water	13:16	0:0	2	ts
op	13:18	0:0	2	.
water	13:19	0:0	2	t
water	13:20	0:0	2	;
for	14:4	18:4	2	(i = 0 ;i < s -> nb_def;i ++)
forinit	14:9	14:14	3	i = 0 ;
water	14:9	0:0	4	i
op	14:11	0:0	4	=
water	14:13	0:0	4	0
water	14:14	0:0	4	;
cond	14:16	14:23	3	i < s -> nb_def
water	14:16	0:0	4	i
op	14:18	0:0	4	<
water	14:20	0:0	4	s
op	14:21	0:0	4	->
water	14:23	0:0	4	nb_def
forexpr	14:31	14:32	3	i ++
water	14:31	0:0	4	i
op	14:32	0:0	4	++
stmts	14:36	18:4	3	
water	14:36	0:0	4	{
if	15:8	17:17	4	(s -> def [ i ] . name_len == tseq -> name_len && !memcmp (s -> def [ i ] . name ,tseq -> name ,tseq -> name_len ))
cond	15:12	16:62	5	s -> def [ i ] . name_len == tseq -> name_len && !memcmp (s -> def [ i ] . name ,tseq -> name ,tseq -> name_len )
water	15:12	0:0	6	s
op	15:13	0:0	6	->
water	15:15	0:0	6	def
op	15:18	0:0	6	[
water	15:19	0:0	6	i
op	15:20	0:0	6	]
op	15:21	0:0	6	.
water	15:22	0:0	6	name_len
op	15:31	0:0	6	==
water	15:34	0:0	6	tseq
op	15:38	0:0	6	->
water	15:40	0:0	6	name_len
op	15:49	0:0	6	&&
op	16:12	0:0	6	!
call	16:13	16:62	6	memcmp
arg	16:20	16:34	7	s->def[i].name
water	16:20	0:0	8	s
op	16:21	0:0	8	->
water	16:23	0:0	8	def
op	16:26	0:0	8	[
water	16:27	0:0	8	i
op	16:28	0:0	8	]
op	16:29	0:0	8	.
water	16:30	0:0	8	name
arg	16:36	16:46	7	tseq->name
water	16:36	0:0	8	tseq
op	16:40	0:0	8	->
water	16:42	0:0	8	name
arg	16:48	16:62	7	tseq->name_len
water	16:48	0:0	8	tseq
op	16:52	0:0	8	->
water	16:54	0:0	8	name_len
stmts	17:12	17:17	5	
break	17:12	17:17	6	
water	18:4	0:0	4	}
if	19:4	23:4	2	(i >= s -> nb_def)
cond	19:8	19:16	3	i >= s -> nb_def
water	19:8	0:0	4	i
op	19:10	0:0	4	>=
water	19:13	0:0	4	s
op	19:14	0:0	4	->
water	19:16	0:0	4	nb_def
stmts	19:24	23:4	3	
water	19:24	0:0	4	{
call	20:8	21:41	4	av_log
arg	20:15	20:18	5	log
water	20:15	0:0	6	log
arg	20:20	20:32	5	AV_LOG_ERROR
water	20:20	0:0	6	AV_LOG_ERROR
arg	20:34	20:67	5	"Tone-set \"%.*s\" not defined\n"
water	20:34	0:0	6	"Tone-set \"%.*s\" not defined\n"
arg	21:15	21:29	5	tseq->name_len
water	21:15	0:0	6	tseq
op	21:19	0:0	6	->
water	21:21	0:0	6	name_len
arg	21:31	21:41	5	tseq->name
water	21:31	0:0	6	tseq
op	21:35	0:0	6	->
water	21:37	0:0	6	name
water	21:42	0:0	4	;
return	22:8	22:30	4	AVERROR(EINVAL)
call	22:15	22:29	5	AVERROR
arg	22:23	22:29	6	EINVAL
water	22:23	0:0	7	EINVAL
water	23:4	0:0	4	}
water	24:4	0:0	2	def
op	24:8	0:0	2	=
op	24:10	0:0	2	&
water	24:11	0:0	2	s
op	24:12	0:0	2	->
water	24:14	0:0	2	def
op	24:17	0:0	2	[
water	24:18	0:0	2	i
op	24:19	0:0	2	]
water	24:20	0:0	2	;
if	25:4	32:4	2	(def -> type == 'B')
cond	25:8	25:21	3	def -> type == 'B'
water	25:8	0:0	4	def
op	25:11	0:0	4	->
water	25:13	0:0	4	type
op	25:18	0:0	4	==
water	25:21	0:0	4	'B'
stmts	25:26	32:4	3	
water	25:26	0:0	4	{
water	26:8	0:0	4	be
op	26:11	0:0	4	=
water	26:13	0:0	4	s
op	26:14	0:0	4	->
water	26:16	0:0	4	block_tseq
op	26:27	0:0	4	+
water	26:29	0:0	4	def
op	26:32	0:0	4	->
water	26:34	0:0	4	elements
water	26:42	0:0	4	;
for	27:8	31:8	4	(i = 0 ;i < def -> nb_elements;i ++)
forinit	27:13	27:18	5	i = 0 ;
water	27:13	0:0	6	i
op	27:15	0:0	6	=
water	27:17	0:0	6	0
water	27:18	0:0	6	;
cond	27:20	27:29	5	i < def -> nb_elements
water	27:20	0:0	6	i
op	27:22	0:0	6	<
water	27:24	0:0	6	def
op	27:27	0:0	6	->
water	27:29	0:0	6	nb_elements
forexpr	27:42	27:43	5	i ++
water	27:42	0:0	6	i
op	27:43	0:0	6	++
stmts	27:47	31:8	5	
water	27:47	0:0	6	{
water	28:12	0:0	6	r
op	28:14	0:0	6	=
call	28:16	28:57	6	expand_tseq
arg	28:28	28:31	7	log
water	28:28	0:0	8	log
arg	28:33	28:34	7	s
water	28:33	0:0	8	s
arg	28:36	28:45	7	nb_ev_max
water	28:36	0:0	8	nb_ev_max
arg	28:47	28:49	7	t0
water	28:47	0:0	8	t0
arg	28:51	28:57	7	&be[i]
op	28:51	0:0	8	&
water	28:52	0:0	8	be
op	28:54	0:0	8	[
water	28:55	0:0	8	i
op	28:56	0:0	8	]
water	28:58	0:0	6	;
if	29:12	30:24	6	(r < 0)
cond	29:16	29:20	7	r < 0
water	29:16	0:0	8	r
op	29:18	0:0	8	<
water	29:20	0:0	8	0
stmts	30:16	30:24	7	
return	30:16	30:24	8	r
water	30:23	0:0	9	r
water	31:8	0:0	6	}
water	32:4	0:0	4	}
else	32:6	41:4	2
stmts	32:11	41:4	3	
water	32:11	0:0	4	{
water	33:8	0:0	4	ev
op	33:11	0:0	4	=
call	33:13	34:54	4	alloc_array_elem
arg	33:30	33:49	5	(void**)&s->events
water	33:30	0:0	6	(
water	33:31	0:0	6	void
op	33:36	0:0	6	*
op	33:37	0:0	6	*
water	33:38	0:0	6	)
op	33:39	0:0	6	&
water	33:40	0:0	6	s
op	33:41	0:0	6	->
water	33:43	0:0	6	events
arg	33:51	33:62	5	sizeof(*ev)
op	33:51	0:0	6	sizeof
water	33:57	0:0	6	(
op	33:58	0:0	6	*
water	33:59	0:0	6	ev
water	33:61	0:0	6	)
arg	34:30	34:43	5	&s->nb_events
op	34:30	0:0	6	&
water	34:31	0:0	6	s
op	34:32	0:0	6	->
water	34:34	0:0	6	nb_events
arg	34:45	34:54	5	nb_ev_max
water	34:45	0:0	6	nb_ev_max
water	34:55	0:0	4	;
if	35:8	36:34	4	(! ev)
cond	35:12	35:13	5	! ev
op	35:12	0:0	6	!
water	35:13	0:0	6	ev
stmts	36:12	36:34	5	
return	36:12	36:34	6	AVERROR(ENOMEM)
call	36:19	36:33	7	AVERROR
arg	36:27	36:33	8	ENOMEM
water	36:27	0:0	9	ENOMEM
water	37:8	0:0	4	ev
op	37:10	0:0	4	->
water	37:12	0:0	4	ts
op	37:24	0:0	4	=
water	37:26	0:0	4	tseq
op	37:30	0:0	4	->
water	37:32	0:0	4	ts
op	37:34	0:0	4	.
water	37:35	0:0	4	t
water	37:36	0:0	4	;
water	38:8	0:0	4	ev
op	38:10	0:0	4	->
water	38:12	0:0	4	elements
op	38:24	0:0	4	=
water	38:26	0:0	4	def
op	38:29	0:0	4	->
water	38:31	0:0	4	elements
water	38:39	0:0	4	;
water	39:8	0:0	4	ev
op	39:10	0:0	4	->
water	39:12	0:0	4	nb_elements
op	39:24	0:0	4	=
water	39:26	0:0	4	def
op	39:29	0:0	4	->
water	39:31	0:0	4	nb_elements
water	39:42	0:0	4	;
water	40:8	0:0	4	ev
op	40:10	0:0	4	->
water	40:12	0:0	4	fade
op	40:24	0:0	4	=
water	40:26	0:0	4	tseq
op	40:30	0:0	4	->
water	40:32	0:0	4	fade
water	40:36	0:0	4	;
water	41:4	0:0	4	}
water	42:4	0:0	2	tseq
op	42:8	0:0	2	->
water	42:10	0:0	2	lock
op	42:14	0:0	2	--
water	42:16	0:0	2	;
return	43:4	43:12	2	0
water	43:11	0:0	3	0
