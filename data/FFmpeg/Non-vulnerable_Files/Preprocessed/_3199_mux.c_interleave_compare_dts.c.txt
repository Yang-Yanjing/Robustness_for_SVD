func	1:0	21:0	0	static int	interleave_compare_dts
params	1:33	0:0	1	
param	1:34	1:52	2	AVFormatContext *	s
param	1:54	1:68	2	AVPacket *	next
param	2:34	2:47	2	AVPacket *	pkt
stmnts	0:0	20:19	1	
decl	4:4	4:49	2	AVStream	*st
op	4:18	0:0	2	=
water	4:20	0:0	2	s
op	4:21	0:0	2	->
water	4:23	0:0	2	streams
op	4:30	0:0	2	[
water	4:31	0:0	2	pkt
op	4:34	0:0	2	->
water	4:36	0:0	2	stream_index
op	4:48	0:0	2	]
decl	5:4	5:50	2	AVStream	*st2
op	5:18	0:0	2	=
water	5:20	0:0	2	s
op	5:21	0:0	2	->
water	5:23	0:0	2	streams
op	5:30	0:0	2	[
water	5:31	0:0	2	next
op	5:35	0:0	2	->
water	5:37	0:0	2	stream_index
op	5:49	0:0	2	]
decl	6:4	7:48	2	int	comp
op	6:18	0:0	2	=
call	6:20	7:47	3	av_compare_ts
arg	6:34	6:43	4	next->dts
water	6:34	0:0	5	next
op	6:38	0:0	5	->
water	6:40	0:0	5	dts
arg	6:45	6:59	4	st2->time_base
water	6:45	0:0	5	st2
op	6:48	0:0	5	->
water	6:50	0:0	5	time_base
arg	6:61	6:69	4	pkt->dts
water	6:61	0:0	5	pkt
op	6:64	0:0	5	->
water	6:66	0:0	5	dts
arg	7:34	7:47	4	st->time_base
water	7:34	0:0	5	st
op	7:36	0:0	5	->
water	7:38	0:0	5	time_base
if	8:4	17:4	2	(s -> audio_preload && ( ( st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO ) != ( st2 -> codec -> codec_type == AVMEDIA_TYPE_AUDIO ) ))
cond	8:8	8:124	3	s -> audio_preload && ( ( st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO ) != ( st2 -> codec -> codec_type == AVMEDIA_TYPE_AUDIO ) )
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	audio_preload
op	8:25	0:0	4	&&
water	8:28	0:0	4	(
water	8:29	0:0	4	(
water	8:30	0:0	4	st
op	8:32	0:0	4	->
water	8:34	0:0	4	codec
op	8:39	0:0	4	->
water	8:41	0:0	4	codec_type
op	8:52	0:0	4	==
water	8:55	0:0	4	AVMEDIA_TYPE_AUDIO
water	8:73	0:0	4	)
op	8:75	0:0	4	!=
water	8:78	0:0	4	(
water	8:79	0:0	4	st2
op	8:82	0:0	4	->
water	8:84	0:0	4	codec
op	8:89	0:0	4	->
water	8:91	0:0	4	codec_type
op	8:102	0:0	4	==
water	8:105	0:0	4	AVMEDIA_TYPE_AUDIO
water	8:123	0:0	4	)
water	8:124	0:0	4	)
stmts	8:127	17:4	3	
water	8:127	0:0	4	{
decl	9:8	9:142	4	int64_t	ts
op	9:19	0:0	4	=
call	9:21	9:75	5	av_rescale_q
arg	9:34	9:43	6	pkt->dts
water	9:34	0:0	7	pkt
op	9:38	0:0	7	->
water	9:40	0:0	7	dts
arg	9:45	9:59	6	st->time_base
water	9:45	0:0	7	st
op	9:48	0:0	7	->
water	9:50	0:0	7	time_base
arg	9:61	9:75	6	AV_TIME_BASE_Q
water	9:61	0:0	7	AV_TIME_BASE_Q
op	9:77	0:0	4	-
water	9:79	0:0	4	s
op	9:80	0:0	4	->
water	9:82	0:0	4	audio_preload
op	9:95	0:0	4	*
water	9:96	0:0	4	(
water	9:97	0:0	4	st
op	9:100	0:0	4	->
water	9:102	0:0	4	codec
op	9:107	0:0	4	->
water	9:109	0:0	4	codec_type
op	9:120	0:0	4	==
water	9:123	0:0	4	AVMEDIA_TYPE_AUDIO
water	9:141	0:0	4	)
decl	10:8	10:142	4	int64_t	ts2
op	10:19	0:0	4	=
call	10:21	10:75	5	av_rescale_q
arg	10:34	10:43	6	next->dts
water	10:34	0:0	7	next
op	10:38	0:0	7	->
water	10:40	0:0	7	dts
arg	10:45	10:59	6	st2->time_base
water	10:45	0:0	7	st2
op	10:48	0:0	7	->
water	10:50	0:0	7	time_base
arg	10:61	10:75	6	AV_TIME_BASE_Q
water	10:61	0:0	7	AV_TIME_BASE_Q
op	10:77	0:0	4	-
water	10:79	0:0	4	s
op	10:80	0:0	4	->
water	10:82	0:0	4	audio_preload
op	10:95	0:0	4	*
water	10:96	0:0	4	(
water	10:97	0:0	4	st2
op	10:100	0:0	4	->
water	10:102	0:0	4	codec
op	10:107	0:0	4	->
water	10:109	0:0	4	codec_type
op	10:120	0:0	4	==
water	10:123	0:0	4	AVMEDIA_TYPE_AUDIO
water	10:141	0:0	4	)
if	11:8	15:8	4	(ts == ts2)
cond	11:12	11:18	5	ts == ts2
water	11:12	0:0	6	ts
op	11:15	0:0	6	==
water	11:18	0:0	6	ts2
stmts	11:23	15:8	5	
water	11:23	0:0	6	{
water	12:12	0:0	6	ts
op	12:14	0:0	6	=
water	12:16	0:0	6	(
water	12:18	0:0	6	pkt
op	12:22	0:0	6	->
water	12:24	0:0	6	dts
op	12:27	0:0	6	*
water	12:29	0:0	6	st
op	12:31	0:0	6	->
water	12:33	0:0	6	time_base
op	12:42	0:0	6	.
water	12:43	0:0	6	num
op	12:46	0:0	6	*
water	12:47	0:0	6	AV_TIME_BASE
op	12:60	0:0	6	-
water	12:62	0:0	6	s
op	12:63	0:0	6	->
water	12:65	0:0	6	audio_preload
call	12:78	12:133	6	*(int64_t)
arg	12:89	12:133	7	st->codec->codec_type==AVMEDIA_TYPE_AUDIO
water	12:89	0:0	8	st
op	12:92	0:0	8	->
water	12:94	0:0	8	codec
op	12:99	0:0	8	->
water	12:101	0:0	8	codec_type
op	12:112	0:0	8	==
water	12:115	0:0	8	AVMEDIA_TYPE_AUDIO
op	12:134	0:0	6	*
water	12:136	0:0	6	st
op	12:138	0:0	6	->
water	12:140	0:0	6	time_base
op	12:149	0:0	6	.
water	12:150	0:0	6	den
water	12:153	0:0	6	)
op	12:154	0:0	6	*
water	12:155	0:0	6	st2
op	12:158	0:0	6	->
water	12:160	0:0	6	time_base
op	12:169	0:0	6	.
water	12:170	0:0	6	den
op	13:15	0:0	6	-
water	13:16	0:0	6	(
water	13:18	0:0	6	next
op	13:22	0:0	6	->
water	13:24	0:0	6	dts
op	13:27	0:0	6	*
water	13:28	0:0	6	st2
op	13:31	0:0	6	->
water	13:33	0:0	6	time_base
op	13:42	0:0	6	.
water	13:43	0:0	6	num
op	13:46	0:0	6	*
water	13:47	0:0	6	AV_TIME_BASE
op	13:60	0:0	6	-
water	13:62	0:0	6	s
op	13:63	0:0	6	->
water	13:65	0:0	6	audio_preload
call	13:78	13:133	6	*(int64_t)
arg	13:89	13:133	7	st2->codec->codec_type==AVMEDIA_TYPE_AUDIO
water	13:89	0:0	8	st2
op	13:92	0:0	8	->
water	13:94	0:0	8	codec
op	13:99	0:0	8	->
water	13:101	0:0	8	codec_type
op	13:112	0:0	8	==
water	13:115	0:0	8	AVMEDIA_TYPE_AUDIO
op	13:134	0:0	6	*
water	13:135	0:0	6	st2
op	13:138	0:0	6	->
water	13:140	0:0	6	time_base
op	13:149	0:0	6	.
water	13:150	0:0	6	den
water	13:153	0:0	6	)
op	13:154	0:0	6	*
water	13:156	0:0	6	st
op	13:158	0:0	6	->
water	13:160	0:0	6	time_base
op	13:169	0:0	6	.
water	13:170	0:0	6	den
water	13:173	0:0	6	;
water	14:12	0:0	6	ts2
op	14:15	0:0	6	=
water	14:16	0:0	6	0
water	14:17	0:0	6	;
water	15:8	0:0	6	}
water	16:8	0:0	4	comp
op	16:12	0:0	4	=
water	16:14	0:0	4	(
water	16:15	0:0	4	ts
op	16:17	0:0	4	>
water	16:18	0:0	4	ts2
water	16:21	0:0	4	)
op	16:23	0:0	4	-
water	16:25	0:0	4	(
water	16:26	0:0	4	ts
op	16:28	0:0	4	<
water	16:29	0:0	4	ts2
water	16:32	0:0	4	)
water	16:33	0:0	4	;
water	17:4	0:0	4	}
if	18:4	19:53	2	(comp == 0)
cond	18:8	18:16	3	comp == 0
water	18:8	0:0	4	comp
op	18:13	0:0	4	==
water	18:16	0:0	4	0
stmts	19:8	19:53	3	
return	19:8	19:53	4	pkt->stream_index<next->stream_index
water	19:15	0:0	5	pkt
op	19:18	0:0	5	->
water	19:20	0:0	5	stream_index
op	19:33	0:0	5	<
water	19:35	0:0	5	next
op	19:39	0:0	5	->
water	19:41	0:0	5	stream_index
return	20:4	20:19	2	comp>0
water	20:11	0:0	3	comp
op	20:16	0:0	3	>
water	20:18	0:0	3	0
