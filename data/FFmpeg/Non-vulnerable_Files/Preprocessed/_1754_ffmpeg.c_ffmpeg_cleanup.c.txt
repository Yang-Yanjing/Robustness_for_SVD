func	1:0	132:0	0	static void	ffmpeg_cleanup
params	1:26	0:0	1	
param	1:27	1:34	2	int	ret
stmnts	0:0	131:21	1	
decl	3:4	3:12	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:12	2	int	j
if	4:4	7:4	2	(do_benchmark)
cond	4:8	4:8	3	do_benchmark
water	4:8	0:0	4	do_benchmark
stmts	4:22	7:4	3	
water	4:22	0:0	4	{
decl	5:8	5:39	4	int	maxrss
op	5:19	0:0	4	=
call	5:21	5:31	5	getmaxrss
op	5:33	0:0	4	/
water	5:35	0:0	4	1024
call	6:8	6:64	4	av_log
arg	6:15	6:19	5	NULL
water	6:15	0:0	6	NULL
arg	6:21	6:32	5	AV_LOG_INFO
water	6:21	0:0	6	AV_LOG_INFO
arg	6:34	6:56	5	"bench: maxrss=%ikB\n"
water	6:34	0:0	6	"bench: maxrss=%ikB\n"
arg	6:58	6:64	5	maxrss
water	6:58	0:0	6	maxrss
water	6:65	0:0	4	;
water	7:4	0:0	4	}
for	8:4	43:4	2	(i = 0 ;i < nb_filtergraphs;i ++)
forinit	8:9	8:14	3	i = 0 ;
water	8:9	0:0	4	i
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:20	3	i < nb_filtergraphs
water	8:16	0:0	4	i
op	8:18	0:0	4	<
water	8:20	0:0	4	nb_filtergraphs
forexpr	8:37	8:38	3	i ++
water	8:37	0:0	4	i
op	8:38	0:0	4	++
stmts	8:42	43:4	3	
water	8:42	0:0	4	{
decl	9:8	9:41	4	FilterGraph	*fg
op	9:24	0:0	4	=
water	9:26	0:0	4	filtergraphs
op	9:38	0:0	4	[
water	9:39	0:0	4	i
op	9:40	0:0	4	]
call	10:8	10:38	4	avfilter_graph_free
arg	10:28	10:38	5	&fg->graph
op	10:28	0:0	6	&
water	10:29	0:0	6	fg
op	10:31	0:0	6	->
water	10:33	0:0	6	graph
water	10:39	0:0	4	;
for	11:8	31:8	4	(j = 0 ;j < fg -> nb_inputs;j ++)
forinit	11:13	11:18	5	j = 0 ;
water	11:13	0:0	6	j
op	11:15	0:0	6	=
water	11:17	0:0	6	0
water	11:18	0:0	6	;
cond	11:20	11:28	5	j < fg -> nb_inputs
water	11:20	0:0	6	j
op	11:22	0:0	6	<
water	11:24	0:0	6	fg
op	11:26	0:0	6	->
water	11:28	0:0	6	nb_inputs
forexpr	11:39	11:40	5	j ++
water	11:39	0:0	6	j
op	11:40	0:0	6	++
stmts	11:44	31:8	5	
water	11:44	0:0	6	{
while	12:12	17:12	6	(av_fifo_size (fg -> inputs [ j ] -> frame_queue ))
cond	12:19	12:58	7	av_fifo_size (fg -> inputs [ j ] -> frame_queue )
call	12:19	12:58	8	av_fifo_size
arg	12:32	12:58	9	fg->inputs[j]->frame_queue
water	12:32	0:0	10	fg
op	12:34	0:0	10	->
water	12:36	0:0	10	inputs
op	12:42	0:0	10	[
water	12:43	0:0	10	j
op	12:44	0:0	10	]
op	12:45	0:0	10	->
water	12:47	0:0	10	frame_queue
stmts	12:61	17:12	7	
water	12:61	0:0	8	{
decl	13:16	13:30	8	AVFrame	*frame
call	14:16	15:56	8	av_fifo_generic_read
arg	14:37	14:63	9	fg->inputs[j]->frame_queue
water	14:37	0:0	10	fg
op	14:39	0:0	10	->
water	14:41	0:0	10	inputs
op	14:47	0:0	10	[
water	14:48	0:0	10	j
op	14:49	0:0	10	]
op	14:50	0:0	10	->
water	14:52	0:0	10	frame_queue
arg	14:65	14:71	9	&frame
op	14:65	0:0	10	&
water	14:66	0:0	10	frame
arg	15:37	15:50	9	sizeof(frame)
op	15:37	0:0	10	sizeof
water	15:43	0:0	10	(
water	15:44	0:0	10	frame
water	15:49	0:0	10	)
arg	15:52	15:56	9	NULL
water	15:52	0:0	10	NULL
water	15:57	0:0	8	;
call	16:16	16:36	8	av_frame_free
arg	16:30	16:36	9	&frame
op	16:30	0:0	10	&
water	16:31	0:0	10	frame
water	16:37	0:0	8	;
water	17:12	0:0	8	}
call	18:12	18:51	6	av_fifo_free
arg	18:25	18:51	7	fg->inputs[j]->frame_queue
water	18:25	0:0	8	fg
op	18:27	0:0	8	->
water	18:29	0:0	8	inputs
op	18:35	0:0	8	[
water	18:36	0:0	8	j
op	18:37	0:0	8	]
op	18:38	0:0	8	->
water	18:40	0:0	8	frame_queue
water	18:52	0:0	6	;
if	19:12	27:12	6	(fg -> inputs [ j ] -> ist -> sub2video . sub_queue)
cond	19:16	19:46	7	fg -> inputs [ j ] -> ist -> sub2video . sub_queue
water	19:16	0:0	8	fg
op	19:18	0:0	8	->
water	19:20	0:0	8	inputs
op	19:26	0:0	8	[
water	19:27	0:0	8	j
op	19:28	0:0	8	]
op	19:29	0:0	8	->
water	19:31	0:0	8	ist
op	19:34	0:0	8	->
water	19:36	0:0	8	sub2video
op	19:45	0:0	8	.
water	19:46	0:0	8	sub_queue
stmts	19:57	27:12	7	
water	19:57	0:0	8	{
while	20:16	25:16	8	(av_fifo_size (fg -> inputs [ j ] -> ist -> sub2video . sub_queue ))
cond	20:23	20:75	9	av_fifo_size (fg -> inputs [ j ] -> ist -> sub2video . sub_queue )
call	20:23	20:75	10	av_fifo_size
arg	20:36	20:75	11	fg->inputs[j]->ist->sub2video.sub_queue
water	20:36	0:0	12	fg
op	20:38	0:0	12	->
water	20:40	0:0	12	inputs
op	20:46	0:0	12	[
water	20:47	0:0	12	j
op	20:48	0:0	12	]
op	20:49	0:0	12	->
water	20:51	0:0	12	ist
op	20:54	0:0	12	->
water	20:56	0:0	12	sub2video
op	20:65	0:0	12	.
water	20:66	0:0	12	sub_queue
stmts	20:78	25:16	9	
water	20:78	0:0	10	{
decl	21:20	21:34	10	AVSubtitle	sub
call	22:20	23:64	10	av_fifo_generic_read
arg	22:41	22:80	11	fg->inputs[j]->ist->sub2video.sub_queue
water	22:41	0:0	12	fg
op	22:43	0:0	12	->
water	22:45	0:0	12	inputs
op	22:51	0:0	12	[
water	22:52	0:0	12	j
op	22:53	0:0	12	]
op	22:54	0:0	12	->
water	22:56	0:0	12	ist
op	22:59	0:0	12	->
water	22:61	0:0	12	sub2video
op	22:70	0:0	12	.
water	22:71	0:0	12	sub_queue
arg	23:41	23:45	11	&sub
op	23:41	0:0	12	&
water	23:42	0:0	12	sub
arg	23:47	23:58	11	sizeof(sub)
op	23:47	0:0	12	sizeof
water	23:53	0:0	12	(
water	23:54	0:0	12	sub
water	23:57	0:0	12	)
arg	23:60	23:64	11	NULL
water	23:60	0:0	12	NULL
water	23:65	0:0	10	;
call	24:20	24:40	10	avsubtitle_free
arg	24:36	24:40	11	&sub
op	24:36	0:0	12	&
water	24:37	0:0	12	sub
water	24:41	0:0	10	;
water	25:16	0:0	10	}
call	26:16	26:68	8	av_fifo_free
arg	26:29	26:68	9	fg->inputs[j]->ist->sub2video.sub_queue
water	26:29	0:0	10	fg
op	26:31	0:0	10	->
water	26:33	0:0	10	inputs
op	26:39	0:0	10	[
water	26:40	0:0	10	j
op	26:41	0:0	10	]
op	26:42	0:0	10	->
water	26:44	0:0	10	ist
op	26:47	0:0	10	->
water	26:49	0:0	10	sub2video
op	26:58	0:0	10	.
water	26:59	0:0	10	sub_queue
water	26:69	0:0	8	;
water	27:12	0:0	8	}
call	28:12	28:57	6	av_buffer_unref
arg	28:28	28:57	7	&fg->inputs[j]->hw_frames_ctx
op	28:28	0:0	8	&
water	28:29	0:0	8	fg
op	28:31	0:0	8	->
water	28:33	0:0	8	inputs
op	28:39	0:0	8	[
water	28:40	0:0	8	j
op	28:41	0:0	8	]
op	28:42	0:0	8	->
water	28:44	0:0	8	hw_frames_ctx
water	28:58	0:0	6	;
call	29:12	29:41	6	av_freep
arg	29:21	29:41	7	&fg->inputs[j]->name
op	29:21	0:0	8	&
water	29:22	0:0	8	fg
op	29:24	0:0	8	->
water	29:26	0:0	8	inputs
op	29:32	0:0	8	[
water	29:33	0:0	8	j
op	29:34	0:0	8	]
op	29:35	0:0	8	->
water	29:37	0:0	8	name
water	29:42	0:0	6	;
call	30:12	30:35	6	av_freep
arg	30:21	30:35	7	&fg->inputs[j]
op	30:21	0:0	8	&
water	30:22	0:0	8	fg
op	30:24	0:0	8	->
water	30:26	0:0	8	inputs
op	30:32	0:0	8	[
water	30:33	0:0	8	j
op	30:34	0:0	8	]
water	30:36	0:0	6	;
water	31:8	0:0	6	}
call	32:8	32:28	4	av_freep
arg	32:17	32:28	5	&fg->inputs
op	32:17	0:0	6	&
water	32:18	0:0	6	fg
op	32:20	0:0	6	->
water	32:22	0:0	6	inputs
water	32:29	0:0	4	;
for	33:8	39:8	4	(j = 0 ;j < fg -> nb_outputs;j ++)
forinit	33:13	33:18	5	j = 0 ;
water	33:13	0:0	6	j
op	33:15	0:0	6	=
water	33:17	0:0	6	0
water	33:18	0:0	6	;
cond	33:20	33:28	5	j < fg -> nb_outputs
water	33:20	0:0	6	j
op	33:22	0:0	6	<
water	33:24	0:0	6	fg
op	33:26	0:0	6	->
water	33:28	0:0	6	nb_outputs
forexpr	33:40	33:41	5	j ++
water	33:40	0:0	6	j
op	33:41	0:0	6	++
stmts	33:45	39:8	5	
water	33:45	0:0	6	{
call	34:12	34:42	6	av_freep
arg	34:21	34:42	7	&fg->outputs[j]->name
op	34:21	0:0	8	&
water	34:22	0:0	8	fg
op	34:24	0:0	8	->
water	34:26	0:0	8	outputs
op	34:33	0:0	8	[
water	34:34	0:0	8	j
op	34:35	0:0	8	]
op	34:36	0:0	8	->
water	34:38	0:0	8	name
water	34:43	0:0	6	;
call	35:12	35:45	6	av_freep
arg	35:21	35:45	7	&fg->outputs[j]->formats
op	35:21	0:0	8	&
water	35:22	0:0	8	fg
op	35:24	0:0	8	->
water	35:26	0:0	8	outputs
op	35:33	0:0	8	[
water	35:34	0:0	8	j
op	35:35	0:0	8	]
op	35:36	0:0	8	->
water	35:38	0:0	8	formats
water	35:46	0:0	6	;
call	36:12	36:53	6	av_freep
arg	36:21	36:53	7	&fg->outputs[j]->channel_layouts
op	36:21	0:0	8	&
water	36:22	0:0	8	fg
op	36:24	0:0	8	->
water	36:26	0:0	8	outputs
op	36:33	0:0	8	[
water	36:34	0:0	8	j
op	36:35	0:0	8	]
op	36:36	0:0	8	->
water	36:38	0:0	8	channel_layouts
water	36:54	0:0	6	;
call	37:12	37:50	6	av_freep
arg	37:21	37:50	7	&fg->outputs[j]->sample_rates
op	37:21	0:0	8	&
water	37:22	0:0	8	fg
op	37:24	0:0	8	->
water	37:26	0:0	8	outputs
op	37:33	0:0	8	[
water	37:34	0:0	8	j
op	37:35	0:0	8	]
op	37:36	0:0	8	->
water	37:38	0:0	8	sample_rates
water	37:51	0:0	6	;
call	38:12	38:36	6	av_freep
arg	38:21	38:36	7	&fg->outputs[j]
op	38:21	0:0	8	&
water	38:22	0:0	8	fg
op	38:24	0:0	8	->
water	38:26	0:0	8	outputs
op	38:33	0:0	8	[
water	38:34	0:0	8	j
op	38:35	0:0	8	]
water	38:37	0:0	6	;
water	39:8	0:0	6	}
call	40:8	40:29	4	av_freep
arg	40:17	40:29	5	&fg->outputs
op	40:17	0:0	6	&
water	40:18	0:0	6	fg
op	40:20	0:0	6	->
water	40:22	0:0	6	outputs
water	40:30	0:0	4	;
call	41:8	41:32	4	av_freep
arg	41:17	41:32	5	&fg->graph_desc
op	41:17	0:0	6	&
water	41:18	0:0	6	fg
op	41:20	0:0	6	->
water	41:22	0:0	6	graph_desc
water	41:33	0:0	4	;
call	42:8	42:33	4	av_freep
arg	42:17	42:33	5	&filtergraphs[i]
op	42:17	0:0	6	&
water	42:18	0:0	6	filtergraphs
op	42:30	0:0	6	[
water	42:31	0:0	6	i
op	42:32	0:0	6	]
water	42:34	0:0	4	;
water	43:4	0:0	4	}
call	44:4	44:26	2	av_freep
arg	44:13	44:26	3	&filtergraphs
op	44:13	0:0	4	&
water	44:14	0:0	4	filtergraphs
water	44:27	0:0	2	;
call	45:4	45:26	2	av_freep
arg	45:13	45:26	3	&subtitle_out
op	45:13	0:0	4	&
water	45:14	0:0	4	subtitle_out
water	45:27	0:0	2	;
for	47:4	58:4	2	(i = 0 ;i < nb_output_files;i ++)
forinit	47:9	47:14	3	i = 0 ;
water	47:9	0:0	4	i
op	47:11	0:0	4	=
water	47:13	0:0	4	0
water	47:14	0:0	4	;
cond	47:16	47:20	3	i < nb_output_files
water	47:16	0:0	4	i
op	47:18	0:0	4	<
water	47:20	0:0	4	nb_output_files
forexpr	47:37	47:38	3	i ++
water	47:37	0:0	4	i
op	47:38	0:0	4	++
stmts	47:42	58:4	3	
water	47:42	0:0	4	{
decl	48:8	48:40	4	OutputFile	*of
op	48:23	0:0	4	=
water	48:25	0:0	4	output_files
op	48:37	0:0	4	[
water	48:38	0:0	4	i
op	48:39	0:0	4	]
decl	49:8	49:26	4	AVFormatContext	*s
if	50:8	51:20	4	(! of)
cond	50:12	50:13	5	! of
op	50:12	0:0	6	!
water	50:13	0:0	6	of
stmts	51:12	51:20	5	
continue	51:12	51:20	6	
water	52:8	0:0	4	s
op	52:10	0:0	4	=
water	52:12	0:0	4	of
op	52:14	0:0	4	->
water	52:16	0:0	4	ctx
water	52:19	0:0	4	;
if	53:8	54:31	4	(s && s -> oformat && ! ( s -> oformat -> flags & AVFMT_NOFILE ))
cond	53:12	53:65	5	s && s -> oformat && ! ( s -> oformat -> flags & AVFMT_NOFILE )
water	53:12	0:0	6	s
op	53:14	0:0	6	&&
water	53:17	0:0	6	s
op	53:18	0:0	6	->
water	53:20	0:0	6	oformat
op	53:28	0:0	6	&&
op	53:31	0:0	6	!
water	53:32	0:0	6	(
water	53:33	0:0	6	s
op	53:34	0:0	6	->
water	53:36	0:0	6	oformat
op	53:43	0:0	6	->
water	53:45	0:0	6	flags
op	53:51	0:0	6	&
water	53:53	0:0	6	AVFMT_NOFILE
water	53:65	0:0	6	)
stmts	54:12	54:31	5	
call	54:12	54:30	6	avio_closep
arg	54:24	54:30	7	&s->pb
op	54:24	0:0	8	&
water	54:25	0:0	8	s
op	54:26	0:0	8	->
water	54:28	0:0	8	pb
water	54:31	0:0	6	;
call	55:8	55:31	4	avformat_free_context
arg	55:30	55:31	5	s
water	55:30	0:0	6	s
water	55:32	0:0	4	;
call	56:8	56:30	4	av_dict_free
arg	56:21	56:30	5	&of->opts
op	56:21	0:0	6	&
water	56:22	0:0	6	of
op	56:24	0:0	6	->
water	56:26	0:0	6	opts
water	56:31	0:0	4	;
call	57:8	57:33	4	av_freep
arg	57:17	57:33	5	&output_files[i]
op	57:17	0:0	6	&
water	57:18	0:0	6	output_files
op	57:30	0:0	6	[
water	57:31	0:0	6	i
op	57:32	0:0	6	]
water	57:34	0:0	4	;
water	58:4	0:0	4	}
for	59:4	90:4	2	(i = 0 ;i < nb_output_streams;i ++)
forinit	59:9	59:14	3	i = 0 ;
water	59:9	0:0	4	i
op	59:11	0:0	4	=
water	59:13	0:0	4	0
water	59:14	0:0	4	;
cond	59:16	59:20	3	i < nb_output_streams
water	59:16	0:0	4	i
op	59:18	0:0	4	<
water	59:20	0:0	4	nb_output_streams
forexpr	59:39	59:40	3	i ++
water	59:39	0:0	4	i
op	59:40	0:0	4	++
stmts	59:44	90:4	3	
water	59:44	0:0	4	{
decl	60:8	60:45	4	OutputStream	*ost
op	60:26	0:0	4	=
water	60:28	0:0	4	output_streams
op	60:42	0:0	4	[
water	60:43	0:0	4	i
op	60:44	0:0	4	]
if	61:8	62:20	4	(! ost)
cond	61:12	61:13	5	! ost
op	61:12	0:0	6	!
water	61:13	0:0	6	ost
stmts	62:12	62:20	5	
continue	62:12	62:20	6	
for	63:8	64:41	4	(j = 0 ;j < ost -> nb_bitstream_filters;j ++)
forinit	63:13	63:18	5	j = 0 ;
water	63:13	0:0	6	j
op	63:15	0:0	6	=
water	63:17	0:0	6	0
water	63:18	0:0	6	;
cond	63:20	63:29	5	j < ost -> nb_bitstream_filters
water	63:20	0:0	6	j
op	63:22	0:0	6	<
water	63:24	0:0	6	ost
op	63:27	0:0	6	->
water	63:29	0:0	6	nb_bitstream_filters
forexpr	63:51	63:52	5	j ++
water	63:51	0:0	6	j
op	63:52	0:0	6	++
stmts	64:12	64:41	5	
call	64:12	64:40	6	av_bsf_free
arg	64:24	64:40	7	&ost->bsf_ctx[j]
op	64:24	0:0	8	&
water	64:25	0:0	8	ost
op	64:28	0:0	8	->
water	64:30	0:0	8	bsf_ctx
op	64:37	0:0	8	[
water	64:38	0:0	8	j
op	64:39	0:0	8	]
water	64:41	0:0	6	;
call	65:8	65:30	4	av_freep
arg	65:17	65:30	5	&ost->bsf_ctx
op	65:17	0:0	6	&
water	65:18	0:0	6	ost
op	65:21	0:0	6	->
water	65:23	0:0	6	bsf_ctx
water	65:31	0:0	4	;
call	66:8	66:44	4	av_freep
arg	66:17	66:44	5	&ost->bsf_extradata_updated
op	66:17	0:0	6	&
water	66:18	0:0	6	ost
op	66:21	0:0	6	->
water	66:23	0:0	6	bsf_extradata_updated
water	66:45	0:0	4	;
call	67:8	67:42	4	av_frame_free
arg	67:22	67:42	5	&ost->filtered_frame
op	67:22	0:0	6	&
water	67:23	0:0	6	ost
op	67:26	0:0	6	->
water	67:28	0:0	6	filtered_frame
water	67:43	0:0	4	;
call	68:8	68:38	4	av_frame_free
arg	68:22	68:38	5	&ost->last_frame
op	68:22	0:0	6	&
water	68:23	0:0	6	ost
op	68:26	0:0	6	->
water	68:28	0:0	6	last_frame
water	68:39	0:0	4	;
call	69:8	69:39	4	av_dict_free
arg	69:21	69:39	5	&ost->encoder_opts
op	69:21	0:0	6	&
water	69:22	0:0	6	ost
op	69:25	0:0	6	->
water	69:27	0:0	6	encoder_opts
water	69:40	0:0	4	;
call	70:8	70:35	4	av_parser_close
arg	70:24	70:35	5	ost->parser
water	70:24	0:0	6	ost
op	70:27	0:0	6	->
water	70:29	0:0	6	parser
water	70:36	0:0	4	;
call	71:8	71:47	4	avcodec_free_context
arg	71:29	71:47	5	&ost->parser_avctx
op	71:29	0:0	6	&
water	71:30	0:0	6	ost
op	71:33	0:0	6	->
water	71:35	0:0	6	parser_avctx
water	71:48	0:0	4	;
call	72:8	72:39	4	av_freep
arg	72:17	72:39	5	&ost->forced_keyframes
op	72:17	0:0	6	&
water	72:18	0:0	6	ost
op	72:21	0:0	6	->
water	72:23	0:0	6	forced_keyframes
water	72:40	0:0	4	;
call	73:8	73:48	4	av_expr_free
arg	73:21	73:48	5	ost->forced_keyframes_pexpr
water	73:21	0:0	6	ost
op	73:24	0:0	6	->
water	73:26	0:0	6	forced_keyframes_pexpr
water	73:49	0:0	4	;
call	74:8	74:31	4	av_freep
arg	74:17	74:31	5	&ost->avfilter
op	74:17	0:0	6	&
water	74:18	0:0	6	ost
op	74:21	0:0	6	->
water	74:23	0:0	6	avfilter
water	74:32	0:0	4	;
call	75:8	75:37	4	av_freep
arg	75:17	75:37	5	&ost->logfile_prefix
op	75:17	0:0	6	&
water	75:18	0:0	6	ost
op	75:21	0:0	6	->
water	75:23	0:0	6	logfile_prefix
water	75:38	0:0	4	;
call	76:8	76:41	4	av_freep
arg	76:17	76:41	5	&ost->audio_channels_map
op	76:17	0:0	6	&
water	76:18	0:0	6	ost
op	76:21	0:0	6	->
water	76:23	0:0	6	audio_channels_map
water	76:42	0:0	4	;
water	77:8	0:0	4	ost
op	77:11	0:0	4	->
water	77:13	0:0	4	audio_channels_mapped
op	77:35	0:0	4	=
water	77:37	0:0	4	0
water	77:38	0:0	4	;
call	78:8	78:35	4	av_dict_free
arg	78:21	78:35	5	&ost->sws_dict
op	78:21	0:0	6	&
water	78:22	0:0	6	ost
op	78:25	0:0	6	->
water	78:27	0:0	6	sws_dict
water	78:36	0:0	4	;
call	79:8	79:42	4	avcodec_free_context
arg	79:29	79:42	5	&ost->enc_ctx
op	79:29	0:0	6	&
water	79:30	0:0	6	ost
op	79:33	0:0	6	->
water	79:35	0:0	6	enc_ctx
water	79:43	0:0	4	;
call	80:8	80:45	4	avcodec_parameters_free
arg	80:32	80:45	5	&ost->ref_par
op	80:32	0:0	6	&
water	80:33	0:0	6	ost
op	80:36	0:0	6	->
water	80:38	0:0	6	ref_par
water	80:46	0:0	4	;
if	81:8	88:8	4	(ost -> muxing_queue)
cond	81:12	81:17	5	ost -> muxing_queue
water	81:12	0:0	6	ost
op	81:15	0:0	6	->
water	81:17	0:0	6	muxing_queue
stmts	81:31	88:8	5	
water	81:31	0:0	6	{
while	82:12	86:12	6	(av_fifo_size (ost -> muxing_queue ))
cond	82:19	82:49	7	av_fifo_size (ost -> muxing_queue )
call	82:19	82:49	8	av_fifo_size
arg	82:32	82:49	9	ost->muxing_queue
water	82:32	0:0	10	ost
op	82:35	0:0	10	->
water	82:37	0:0	10	muxing_queue
stmts	82:52	86:12	7	
water	82:52	0:0	8	{
decl	83:16	83:28	8	AVPacket	pkt
call	84:16	84:79	8	av_fifo_generic_read
arg	84:37	84:54	9	ost->muxing_queue
water	84:37	0:0	10	ost
op	84:40	0:0	10	->
water	84:42	0:0	10	muxing_queue
arg	84:56	84:60	9	&pkt
op	84:56	0:0	10	&
water	84:57	0:0	10	pkt
arg	84:62	84:73	9	sizeof(pkt)
op	84:62	0:0	10	sizeof
water	84:68	0:0	10	(
water	84:69	0:0	10	pkt
water	84:72	0:0	10	)
arg	84:75	84:79	9	NULL
water	84:75	0:0	10	NULL
water	84:80	0:0	8	;
call	85:16	85:36	8	av_packet_unref
arg	85:32	85:36	9	&pkt
op	85:32	0:0	10	&
water	85:33	0:0	10	pkt
water	85:37	0:0	8	;
water	86:12	0:0	8	}
call	87:12	87:44	6	av_fifo_freep
arg	87:26	87:44	7	&ost->muxing_queue
op	87:26	0:0	8	&
water	87:27	0:0	8	ost
op	87:30	0:0	8	->
water	87:32	0:0	8	muxing_queue
water	87:45	0:0	6	;
water	88:8	0:0	6	}
call	89:8	89:35	4	av_freep
arg	89:17	89:35	5	&output_streams[i]
op	89:17	0:0	6	&
water	89:18	0:0	6	output_streams
op	89:32	0:0	6	[
water	89:33	0:0	6	i
op	89:34	0:0	6	]
water	89:36	0:0	4	;
water	90:4	0:0	4	}
call	92:4	92:23	2	free_input_threads
water	92:24	0:0	2	;
for	94:4	97:4	2	(i = 0 ;i < nb_input_files;i ++)
forinit	94:9	94:14	3	i = 0 ;
water	94:9	0:0	4	i
op	94:11	0:0	4	=
water	94:13	0:0	4	0
water	94:14	0:0	4	;
cond	94:16	94:20	3	i < nb_input_files
water	94:16	0:0	4	i
op	94:18	0:0	4	<
water	94:20	0:0	4	nb_input_files
forexpr	94:36	94:37	3	i ++
water	94:36	0:0	4	i
op	94:37	0:0	4	++
stmts	94:41	97:4	3	
water	94:41	0:0	4	{
call	95:8	95:49	4	avformat_close_input
arg	95:29	95:49	5	&input_files[i]->ctx
op	95:29	0:0	6	&
water	95:30	0:0	6	input_files
op	95:41	0:0	6	[
water	95:42	0:0	6	i
op	95:43	0:0	6	]
op	95:44	0:0	6	->
water	95:46	0:0	6	ctx
water	95:50	0:0	4	;
call	96:8	96:32	4	av_freep
arg	96:17	96:32	5	&input_files[i]
op	96:17	0:0	6	&
water	96:18	0:0	6	input_files
op	96:29	0:0	6	[
water	96:30	0:0	6	i
op	96:31	0:0	6	]
water	96:33	0:0	4	;
water	97:4	0:0	4	}
for	98:4	110:4	2	(i = 0 ;i < nb_input_streams;i ++)
forinit	98:9	98:14	3	i = 0 ;
water	98:9	0:0	4	i
op	98:11	0:0	4	=
water	98:13	0:0	4	0
water	98:14	0:0	4	;
cond	98:16	98:20	3	i < nb_input_streams
water	98:16	0:0	4	i
op	98:18	0:0	4	<
water	98:20	0:0	4	nb_input_streams
forexpr	98:38	98:39	3	i ++
water	98:38	0:0	4	i
op	98:39	0:0	4	++
stmts	98:43	110:4	3	
water	98:43	0:0	4	{
decl	99:8	99:43	4	InputStream	*ist
op	99:25	0:0	4	=
water	99:27	0:0	4	input_streams
op	99:40	0:0	4	[
water	99:41	0:0	4	i
op	99:42	0:0	4	]
call	100:8	100:41	4	av_frame_free
arg	100:22	100:41	5	&ist->decoded_frame
op	100:22	0:0	6	&
water	100:23	0:0	6	ist
op	100:26	0:0	6	->
water	100:28	0:0	6	decoded_frame
water	100:42	0:0	4	;
call	101:8	101:40	4	av_frame_free
arg	101:22	101:40	5	&ist->filter_frame
op	101:22	0:0	6	&
water	101:23	0:0	6	ist
op	101:26	0:0	6	->
water	101:28	0:0	6	filter_frame
water	101:41	0:0	4	;
call	102:8	102:39	4	av_dict_free
arg	102:21	102:39	5	&ist->decoder_opts
op	102:21	0:0	6	&
water	102:22	0:0	6	ist
op	102:25	0:0	6	->
water	102:27	0:0	6	decoder_opts
water	102:40	0:0	4	;
call	103:8	103:47	4	avsubtitle_free
arg	103:24	103:47	5	&ist->prev_sub.subtitle
op	103:24	0:0	6	&
water	103:25	0:0	6	ist
op	103:28	0:0	6	->
water	103:30	0:0	6	prev_sub
op	103:38	0:0	6	.
water	103:39	0:0	6	subtitle
water	103:48	0:0	4	;
call	104:8	104:43	4	av_frame_free
arg	104:22	104:43	5	&ist->sub2video.frame
op	104:22	0:0	6	&
water	104:23	0:0	6	ist
op	104:26	0:0	6	->
water	104:28	0:0	6	sub2video
op	104:37	0:0	6	.
water	104:38	0:0	6	frame
water	104:44	0:0	4	;
call	105:8	105:30	4	av_freep
arg	105:17	105:30	5	&ist->filters
op	105:17	0:0	6	&
water	105:18	0:0	6	ist
op	105:21	0:0	6	->
water	105:23	0:0	6	filters
water	105:31	0:0	4	;
call	106:8	106:37	4	av_freep
arg	106:17	106:37	5	&ist->hwaccel_device
op	106:17	0:0	6	&
water	106:18	0:0	6	ist
op	106:21	0:0	6	->
water	106:23	0:0	6	hwaccel_device
water	106:38	0:0	4	;
call	107:8	107:33	4	av_freep
arg	107:17	107:33	5	&ist->dts_buffer
op	107:17	0:0	6	&
water	107:18	0:0	6	ist
op	107:21	0:0	6	->
water	107:23	0:0	6	dts_buffer
water	107:34	0:0	4	;
call	108:8	108:42	4	avcodec_free_context
arg	108:29	108:42	5	&ist->dec_ctx
op	108:29	0:0	6	&
water	108:30	0:0	6	ist
op	108:33	0:0	6	->
water	108:35	0:0	6	dec_ctx
water	108:43	0:0	4	;
call	109:8	109:34	4	av_freep
arg	109:17	109:34	5	&input_streams[i]
op	109:17	0:0	6	&
water	109:18	0:0	6	input_streams
op	109:31	0:0	6	[
water	109:32	0:0	6	i
op	109:33	0:0	6	]
water	109:35	0:0	4	;
water	110:4	0:0	4	}
if	111:4	116:4	2	(vstats_file)
cond	111:8	111:8	3	vstats_file
water	111:8	0:0	4	vstats_file
stmts	111:21	116:4	3	
water	111:21	0:0	4	{
if	112:8	115:46	4	(fclose (vstats_file ))
cond	112:12	112:30	5	fclose (vstats_file )
call	112:12	112:30	6	fclose
arg	112:19	112:30	7	vstats_file
water	112:19	0:0	8	vstats_file
stmts	113:12	115:46	5	
call	113:12	115:45	6	av_log
arg	113:19	113:23	7	NULL
water	113:19	0:0	8	NULL
arg	113:25	113:37	7	AV_LOG_ERROR
water	113:25	0:0	8	AV_LOG_ERROR
arg	114:19	114:82	7	"Error closing vstats file, loss of information possible: %s\n"
water	114:19	0:0	8	"Error closing vstats file, loss of information possible: %s\n"
arg	115:19	115:45	7	av_err2str(AVERROR(errno))
call	115:19	115:44	8	av_err2str
arg	115:30	115:44	9	AVERROR(errno)
call	115:30	115:43	10	AVERROR
arg	115:38	115:43	11	errno
water	115:38	0:0	12	errno
water	115:46	0:0	6	;
water	116:4	0:0	4	}
call	117:4	117:29	2	av_freep
arg	117:13	117:29	3	&vstats_filename
op	117:13	0:0	4	&
water	117:14	0:0	4	vstats_filename
water	117:30	0:0	2	;
call	118:4	118:27	2	av_freep
arg	118:13	118:27	3	&input_streams
op	118:13	0:0	4	&
water	118:14	0:0	4	input_streams
water	118:28	0:0	2	;
call	119:4	119:25	2	av_freep
arg	119:13	119:25	3	&input_files
op	119:13	0:0	4	&
water	119:14	0:0	4	input_files
water	119:26	0:0	2	;
call	120:4	120:28	2	av_freep
arg	120:13	120:28	3	&output_streams
op	120:13	0:0	4	&
water	120:14	0:0	4	output_streams
water	120:29	0:0	2	;
call	121:4	121:26	2	av_freep
arg	121:13	121:26	3	&output_files
op	121:13	0:0	4	&
water	121:14	0:0	4	output_files
water	121:27	0:0	2	;
call	122:4	122:16	2	uninit_opts
water	122:17	0:0	2	;
call	123:4	123:28	2	avformat_network_deinit
water	123:29	0:0	2	;
if	124:4	127:4	2	(received_sigterm)
cond	124:8	124:8	3	received_sigterm
water	124:8	0:0	4	received_sigterm
stmts	124:26	127:4	3	
water	124:26	0:0	4	{
call	125:8	126:37	4	av_log
arg	125:15	125:19	5	NULL
water	125:15	0:0	6	NULL
arg	125:21	125:32	5	AV_LOG_INFO
water	125:21	0:0	6	AV_LOG_INFO
arg	125:34	125:75	5	"Exiting normally, received signal %d.\n"
water	125:34	0:0	6	"Exiting normally, received signal %d.\n"
arg	126:15	126:37	5	(int)received_sigterm
water	126:15	0:0	6	(
water	126:16	0:0	6	int
water	126:19	0:0	6	)
water	126:21	0:0	6	received_sigterm
water	126:38	0:0	4	;
water	127:4	0:0	4	}
else	127:6	129:4	2
stmts	127:11	129:4	3	
if	127:11	129:4	4	(ret &&atomic_load (& transcode_init_done ))
cond	127:15	127:54	5	ret &&atomic_load (& transcode_init_done )
water	127:15	0:0	6	ret
op	127:19	0:0	6	&&
call	127:22	127:54	6	atomic_load
arg	127:34	127:54	7	&transcode_init_done
op	127:34	0:0	8	&
water	127:35	0:0	8	transcode_init_done
stmts	127:57	129:4	5	
water	127:57	0:0	6	{
call	128:8	128:56	6	av_log
arg	128:15	128:19	7	NULL
water	128:15	0:0	8	NULL
arg	128:21	128:32	7	AV_LOG_INFO
water	128:21	0:0	8	AV_LOG_INFO
arg	128:34	128:56	7	"Conversion failed!\n"
water	128:34	0:0	8	"Conversion failed!\n"
water	128:57	0:0	6	;
water	129:4	0:0	6	}
call	130:4	130:14	2	term_exit
water	130:15	0:0	2	;
water	131:4	0:0	2	ffmpeg_exited
op	131:18	0:0	2	=
water	131:20	0:0	2	1
water	131:21	0:0	2	;
