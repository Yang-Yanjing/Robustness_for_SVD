func	1:0	37:0	0	static void	do_video_stats
params	1:26	0:0	1	
param	1:27	1:44	2	OutputStream *	ost
param	1:46	1:60	2	int	frame_size
stmnts	0:0	36:4	1	
decl	3:4	3:23	2	AVCodecContext	*enc
decl	4:4	4:20	2	int	frame_number
decl	5:4	5:36	2	double	ti1
water	5:14	0:0	2	,
decl	5:4	5:36	2	double	bitrate
water	5:23	0:0	2	,
decl	5:4	5:36	2	double	avg_bitrate
if	7:4	13:4	2	(! vstats_file)
cond	7:8	7:9	3	! vstats_file
op	7:8	0:0	4	!
water	7:9	0:0	4	vstats_file
stmts	7:22	13:4	3	
water	7:22	0:0	4	{
water	8:8	0:0	4	vstats_file
op	8:20	0:0	4	=
call	8:22	8:48	4	fopen
arg	8:28	8:43	5	vstats_filename
water	8:28	0:0	6	vstats_filename
arg	8:45	8:48	5	"w"
water	8:45	0:0	6	"w"
water	8:49	0:0	4	;
if	9:8	12:8	4	(! vstats_file)
cond	9:12	9:13	5	! vstats_file
op	9:12	0:0	6	!
water	9:13	0:0	6	vstats_file
stmts	9:26	12:8	5	
water	9:26	0:0	6	{
call	10:12	10:26	6	perror
arg	10:19	10:26	7	"fopen"
water	10:19	0:0	8	"fopen"
water	10:27	0:0	6	;
call	11:12	11:26	6	exit_program
arg	11:25	11:26	7	1
water	11:25	0:0	8	1
water	11:27	0:0	6	;
water	12:8	0:0	6	}
water	13:4	0:0	4	}
water	14:4	0:0	2	enc
op	14:8	0:0	2	=
water	14:10	0:0	2	ost
op	14:13	0:0	2	->
water	14:15	0:0	2	enc_ctx
water	14:22	0:0	2	;
if	15:4	36:4	2	(enc -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	15:8	15:27	3	enc -> codec_type == AVMEDIA_TYPE_VIDEO
water	15:8	0:0	4	enc
op	15:11	0:0	4	->
water	15:13	0:0	4	codec_type
op	15:24	0:0	4	==
water	15:27	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	15:47	36:4	3	
water	15:47	0:0	4	{
water	16:8	0:0	4	frame_number
op	16:21	0:0	4	=
water	16:23	0:0	4	ost
op	16:26	0:0	4	->
water	16:28	0:0	4	st
op	16:30	0:0	4	->
water	16:32	0:0	4	nb_frames
water	16:41	0:0	4	;
if	17:8	20:8	4	(vstats_version <= 1)
cond	17:12	17:30	5	vstats_version <= 1
water	17:12	0:0	6	vstats_version
op	17:27	0:0	6	<=
water	17:30	0:0	6	1
stmts	17:33	20:8	5	
water	17:33	0:0	6	{
call	18:12	19:54	6	fprintf
arg	18:20	18:31	7	vstats_file
water	18:20	0:0	8	vstats_file
arg	18:33	18:55	7	"frame= %5d q= %2.1f "
water	18:33	0:0	8	"frame= %5d q= %2.1f "
arg	18:57	18:69	7	frame_number
water	18:57	0:0	8	frame_number
arg	19:20	19:54	7	ost->quality/(float)FF_QP2LAMBDA
water	19:20	0:0	8	ost
op	19:23	0:0	8	->
water	19:25	0:0	8	quality
op	19:33	0:0	8	/
water	19:35	0:0	8	(
water	19:36	0:0	8	float
water	19:41	0:0	8	)
water	19:42	0:0	8	FF_QP2LAMBDA
water	19:55	0:0	6	;
water	20:8	0:0	6	}
else	20:10	23:8	4
stmts	20:16	23:8	5	
water	20:16	0:0	6	{
call	21:12	22:54	6	fprintf
arg	21:20	21:31	7	vstats_file
water	21:20	0:0	8	vstats_file
arg	21:33	21:72	7	"out= %2d st= %2d frame= %5d q= %2.1f "
water	21:33	0:0	8	"out= %2d st= %2d frame= %5d q= %2.1f "
arg	21:74	21:89	7	ost->file_index
water	21:74	0:0	8	ost
op	21:77	0:0	8	->
water	21:79	0:0	8	file_index
arg	21:91	21:101	7	ost->index
water	21:91	0:0	8	ost
op	21:94	0:0	8	->
water	21:96	0:0	8	index
arg	21:103	21:115	7	frame_number
water	21:103	0:0	8	frame_number
arg	22:20	22:54	7	ost->quality/(float)FF_QP2LAMBDA
water	22:20	0:0	8	ost
op	22:23	0:0	8	->
water	22:25	0:0	8	quality
op	22:33	0:0	8	/
water	22:35	0:0	8	(
water	22:36	0:0	8	float
water	22:41	0:0	8	)
water	22:42	0:0	8	FF_QP2LAMBDA
water	22:55	0:0	6	;
water	23:8	0:0	6	}
if	24:8	25:114	4	(ost -> error [ 0 ] >= 0 && ( enc -> flags & AV_CODEC_FLAG_PSNR ))
cond	24:12	24:64	5	ost -> error [ 0 ] >= 0 && ( enc -> flags & AV_CODEC_FLAG_PSNR )
water	24:12	0:0	6	ost
op	24:15	0:0	6	->
water	24:17	0:0	6	error
op	24:22	0:0	6	[
water	24:23	0:0	6	0
op	24:24	0:0	6	]
op	24:25	0:0	6	>=
water	24:27	0:0	6	0
op	24:29	0:0	6	&&
water	24:32	0:0	6	(
water	24:33	0:0	6	enc
op	24:36	0:0	6	->
water	24:38	0:0	6	flags
op	24:44	0:0	6	&
water	24:46	0:0	6	AV_CODEC_FLAG_PSNR
water	24:64	0:0	6	)
stmts	25:12	25:114	5	
call	25:12	25:113	6	fprintf
arg	25:20	25:31	7	vstats_file
water	25:20	0:0	8	vstats_file
arg	25:33	25:47	7	"PSNR= %6.2f "
water	25:33	0:0	8	"PSNR= %6.2f "
arg	25:49	25:113	7	psnr(ost->error[0]/(enc->width*enc->height*255.0*255.0))
call	25:49	25:112	8	psnr
arg	25:54	25:112	9	ost->error[0]/(enc->width*enc->height*255.0*255.0)
water	25:54	0:0	10	ost
op	25:57	0:0	10	->
water	25:59	0:0	10	error
op	25:64	0:0	10	[
water	25:65	0:0	10	0
op	25:66	0:0	10	]
op	25:68	0:0	10	/
water	25:70	0:0	10	(
water	25:71	0:0	10	enc
op	25:74	0:0	10	->
water	25:76	0:0	10	width
op	25:82	0:0	10	*
water	25:84	0:0	10	enc
op	25:87	0:0	10	->
water	25:89	0:0	10	height
op	25:96	0:0	10	*
water	25:98	0:0	10	255
op	25:101	0:0	10	.
water	25:102	0:0	10	0
op	25:104	0:0	10	*
water	25:106	0:0	10	255
op	25:109	0:0	10	.
water	25:110	0:0	10	0
water	25:111	0:0	10	)
water	25:114	0:0	6	;
call	26:8	26:54	4	fprintf
arg	26:16	26:27	5	vstats_file
water	26:16	0:0	6	vstats_file
arg	26:28	26:42	5	"f_size= %6d "
water	26:28	0:0	6	"f_size= %6d "
arg	26:44	26:54	5	frame_size
water	26:44	0:0	6	frame_size
water	26:55	0:0	4	;
water	28:8	0:0	4	ti1
op	28:12	0:0	4	=
call	28:14	28:43	4	av_stream_get_end_pts
arg	28:36	28:43	5	ost->st
water	28:36	0:0	6	ost
op	28:39	0:0	6	->
water	28:41	0:0	6	st
call	28:45	28:72	4	*av_q2d
arg	28:54	28:72	5	ost->st->time_base
water	28:54	0:0	6	ost
op	28:57	0:0	6	->
water	28:59	0:0	6	st
op	28:61	0:0	6	->
water	28:63	0:0	6	time_base
water	28:73	0:0	4	;
if	29:8	30:22	4	(ti1 < 0 . 01)
cond	29:12	29:20	5	ti1 < 0 . 01
water	29:12	0:0	6	ti1
op	29:16	0:0	6	<
water	29:18	0:0	6	0
op	29:19	0:0	6	.
water	29:20	0:0	6	01
stmts	30:12	30:22	5	
water	30:12	0:0	6	ti1
op	30:16	0:0	6	=
water	30:18	0:0	6	0
op	30:19	0:0	6	.
water	30:20	0:0	6	01
water	30:22	0:0	6	;
water	31:8	0:0	4	bitrate
op	31:20	0:0	4	=
water	31:22	0:0	4	(
water	31:23	0:0	4	frame_size
op	31:34	0:0	4	*
water	31:36	0:0	4	8
water	31:37	0:0	4	)
op	31:39	0:0	4	/
call	31:41	31:62	4	av_q2d
arg	31:48	31:62	5	enc->time_base
water	31:48	0:0	6	enc
op	31:51	0:0	6	->
water	31:53	0:0	6	time_base
op	31:64	0:0	4	/
water	31:66	0:0	4	1000
op	31:70	0:0	4	.
water	31:71	0:0	4	0
water	31:72	0:0	4	;
water	32:8	0:0	4	avg_bitrate
op	32:20	0:0	4	=
call	32:22	32:49	4	(double)
arg	32:31	32:49	5	ost->data_size*8
water	32:31	0:0	6	ost
op	32:34	0:0	6	->
water	32:36	0:0	6	data_size
op	32:46	0:0	6	*
water	32:48	0:0	6	8
op	32:51	0:0	4	/
water	32:53	0:0	4	ti1
op	32:57	0:0	4	/
water	32:59	0:0	4	1000
op	32:63	0:0	4	.
water	32:64	0:0	4	0
water	32:65	0:0	4	;
call	33:8	34:71	4	fprintf
arg	33:16	33:27	5	vstats_file
water	33:16	0:0	6	vstats_file
arg	33:29	33:97	5	"s_size= %8.0fkB time= %0.3f br= %7.1fkbits/s avg_br= %7.1fkbits/s "
water	33:29	0:0	6	"s_size= %8.0fkB time= %0.3f br= %7.1fkbits/s avg_br= %7.1fkbits/s "
arg	34:15	34:44	5	(double)ost->data_size/1024
water	34:15	0:0	6	(
water	34:16	0:0	6	double
water	34:22	0:0	6	)
water	34:23	0:0	6	ost
op	34:26	0:0	6	->
water	34:28	0:0	6	data_size
op	34:38	0:0	6	/
water	34:40	0:0	6	1024
arg	34:46	34:49	5	ti1
water	34:46	0:0	6	ti1
arg	34:51	34:58	5	bitrate
water	34:51	0:0	6	bitrate
arg	34:60	34:71	5	avg_bitrate
water	34:60	0:0	6	avg_bitrate
water	34:72	0:0	4	;
call	35:8	35:83	4	fprintf
arg	35:16	35:27	5	vstats_file
water	35:16	0:0	6	vstats_file
arg	35:29	35:41	5	"type= %c\n"
water	35:29	0:0	6	"type= %c\n"
arg	35:43	35:83	5	av_get_picture_type_char(ost->pict_type)
call	35:43	35:82	6	av_get_picture_type_char
arg	35:68	35:82	7	ost->pict_type
water	35:68	0:0	8	ost
op	35:71	0:0	8	->
water	35:73	0:0	8	pict_type
water	35:84	0:0	4	;
water	36:4	0:0	4	}
