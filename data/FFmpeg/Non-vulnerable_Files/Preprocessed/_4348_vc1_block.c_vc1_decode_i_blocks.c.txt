func	1:0	129:0	0	static void	vc1_decode_i_blocks
params	1:31	0:0	1	
param	1:32	1:45	2	VC1Context *	v
stmnts	0:0	128:79	1	
decl	3:4	3:12	2	int	k
water	3:9	0:0	2	,
decl	3:4	3:12	2	int	j
decl	4:4	4:29	2	MpegEncContext	*s
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	v
op	4:26	0:0	2	->
water	4:28	0:0	2	s
decl	5:4	5:16	2	int	cbp
water	5:11	0:0	2	,
decl	5:4	5:16	2	int	val
decl	6:4	6:22	2	uint8_t	*coded_val
decl	7:4	7:14	2	int	mb_pos
switch	9:4	19:4	2	(v -> y_ac_table_index)
cond	9:12	9:15	3	v -> y_ac_table_index
water	9:12	0:0	4	v
op	9:13	0:0	4	->
water	9:15	0:0	4	y_ac_table_index
stmts	9:33	19:4	3	
water	9:33	0:0	4	{
label	10:4	10:10	4	case 0 :
water	11:8	0:0	4	v
op	11:9	0:0	4	->
water	11:11	0:0	4	codingset
op	11:21	0:0	4	=
water	11:23	0:0	4	(
water	11:24	0:0	4	v
op	11:25	0:0	4	->
water	11:27	0:0	4	pqindex
op	11:35	0:0	4	<=
water	11:38	0:0	4	8
water	11:39	0:0	4	)
water	11:41	0:0	4	?
water	11:43	0:0	4	CS_HIGH_RATE_INTRA
water	11:62	0:0	4	:
water	11:64	0:0	4	CS_LOW_MOT_INTRA
water	11:80	0:0	4	;
break	12:8	12:13	4	
label	13:4	13:10	4	case 1 :
water	14:8	0:0	4	v
op	14:9	0:0	4	->
water	14:11	0:0	4	codingset
op	14:21	0:0	4	=
water	14:23	0:0	4	CS_HIGH_MOT_INTRA
water	14:40	0:0	4	;
break	15:8	15:13	4	
label	16:4	16:10	4	case 2 :
water	17:8	0:0	4	v
op	17:9	0:0	4	->
water	17:11	0:0	4	codingset
op	17:21	0:0	4	=
water	17:23	0:0	4	CS_MID_RATE_INTRA
water	17:40	0:0	4	;
break	18:8	18:13	4	
water	19:4	0:0	4	}
switch	20:4	30:4	2	(v -> c_ac_table_index)
cond	20:12	20:15	3	v -> c_ac_table_index
water	20:12	0:0	4	v
op	20:13	0:0	4	->
water	20:15	0:0	4	c_ac_table_index
stmts	20:33	30:4	3	
water	20:33	0:0	4	{
label	21:4	21:10	4	case 0 :
water	22:8	0:0	4	v
op	22:9	0:0	4	->
water	22:11	0:0	4	codingset2
op	22:22	0:0	4	=
water	22:24	0:0	4	(
water	22:25	0:0	4	v
op	22:26	0:0	4	->
water	22:28	0:0	4	pqindex
op	22:36	0:0	4	<=
water	22:39	0:0	4	8
water	22:40	0:0	4	)
water	22:42	0:0	4	?
water	22:44	0:0	4	CS_HIGH_RATE_INTER
water	22:63	0:0	4	:
water	22:65	0:0	4	CS_LOW_MOT_INTER
water	22:81	0:0	4	;
break	23:8	23:13	4	
label	24:4	24:10	4	case 1 :
water	25:8	0:0	4	v
op	25:9	0:0	4	->
water	25:11	0:0	4	codingset2
op	25:22	0:0	4	=
water	25:24	0:0	4	CS_HIGH_MOT_INTER
water	25:41	0:0	4	;
break	26:8	26:13	4	
label	27:4	27:10	4	case 2 :
water	28:8	0:0	4	v
op	28:9	0:0	4	->
water	28:11	0:0	4	codingset2
op	28:22	0:0	4	=
water	28:24	0:0	4	CS_MID_RATE_INTER
water	28:41	0:0	4	;
break	29:8	29:13	4	
water	30:4	0:0	4	}
water	32:4	0:0	2	s
op	32:5	0:0	2	->
water	32:7	0:0	2	y_dc_scale
op	32:18	0:0	2	=
water	32:20	0:0	2	s
op	32:21	0:0	2	->
water	32:23	0:0	2	y_dc_scale_table
op	32:39	0:0	2	[
water	32:40	0:0	2	v
op	32:41	0:0	2	->
water	32:43	0:0	2	pq
op	32:45	0:0	2	]
water	32:46	0:0	2	;
water	33:4	0:0	2	s
op	33:5	0:0	2	->
water	33:7	0:0	2	c_dc_scale
op	33:18	0:0	2	=
water	33:20	0:0	2	s
op	33:21	0:0	2	->
water	33:23	0:0	2	c_dc_scale_table
op	33:39	0:0	2	[
water	33:40	0:0	2	v
op	33:41	0:0	2	->
water	33:43	0:0	2	pq
op	33:45	0:0	2	]
water	33:46	0:0	2	;
water	35:4	0:0	2	s
op	35:5	0:0	2	->
water	35:7	0:0	2	mb_x
op	35:12	0:0	2	=
water	35:14	0:0	2	s
op	35:15	0:0	2	->
water	35:17	0:0	2	mb_y
op	35:22	0:0	2	=
water	35:24	0:0	2	0
water	35:25	0:0	2	;
water	36:4	0:0	2	s
op	36:5	0:0	2	->
water	36:7	0:0	2	mb_intra
op	36:24	0:0	2	=
water	36:26	0:0	2	1
water	36:27	0:0	2	;
water	37:4	0:0	2	s
op	37:5	0:0	2	->
water	37:7	0:0	2	first_slice_line
op	37:24	0:0	2	=
water	37:26	0:0	2	1
water	37:27	0:0	2	;
for	38:4	123:4	2	(s -> mb_y = 0 ;s -> mb_y < s -> end_mb_y;s -> mb_y ++)
forinit	38:9	38:20	3	s -> mb_y = 0 ;
water	38:9	0:0	4	s
op	38:10	0:0	4	->
water	38:12	0:0	4	mb_y
op	38:17	0:0	4	=
water	38:19	0:0	4	0
water	38:20	0:0	4	;
cond	38:22	38:35	3	s -> mb_y < s -> end_mb_y
water	38:22	0:0	4	s
op	38:23	0:0	4	->
water	38:25	0:0	4	mb_y
op	38:30	0:0	4	<
water	38:32	0:0	4	s
op	38:33	0:0	4	->
water	38:35	0:0	4	end_mb_y
forexpr	38:45	38:52	3	s -> mb_y ++
water	38:45	0:0	4	s
op	38:46	0:0	4	->
water	38:48	0:0	4	mb_y
op	38:52	0:0	4	++
stmts	38:56	123:4	3	
water	38:56	0:0	4	{
water	39:8	0:0	4	s
op	39:9	0:0	4	->
water	39:11	0:0	4	mb_x
op	39:16	0:0	4	=
water	39:18	0:0	4	0
water	39:19	0:0	4	;
call	40:8	40:26	4	init_block_index
arg	40:25	40:26	5	v
water	40:25	0:0	6	v
water	40:27	0:0	4	;
for	41:8	117:8	4	(;s -> mb_x < v -> end_mb_x;s -> mb_x ++)
forinit	41:13	41:13	5	;
water	41:13	0:0	6	;
cond	41:15	41:28	5	s -> mb_x < v -> end_mb_x
water	41:15	0:0	6	s
op	41:16	0:0	6	->
water	41:18	0:0	6	mb_x
op	41:23	0:0	6	<
water	41:25	0:0	6	v
op	41:26	0:0	6	->
water	41:28	0:0	6	end_mb_x
forexpr	41:38	41:45	5	s -> mb_x ++
water	41:38	0:0	6	s
op	41:39	0:0	6	->
water	41:41	0:0	6	mb_x
op	41:45	0:0	6	++
stmts	41:49	117:8	5	
water	41:49	0:0	6	{
decl	42:12	42:27	6	uint8_t	*dst[6]
call	43:12	43:35	6	ff_update_block_index
arg	43:34	43:35	7	s
water	43:34	0:0	8	s
water	43:36	0:0	6	;
water	44:12	0:0	6	dst
op	44:15	0:0	6	[
water	44:16	0:0	6	0
op	44:17	0:0	6	]
op	44:19	0:0	6	=
water	44:21	0:0	6	s
op	44:22	0:0	6	->
water	44:24	0:0	6	dest
op	44:28	0:0	6	[
water	44:29	0:0	6	0
op	44:30	0:0	6	]
water	44:31	0:0	6	;
water	45:12	0:0	6	dst
op	45:15	0:0	6	[
water	45:16	0:0	6	1
op	45:17	0:0	6	]
op	45:19	0:0	6	=
water	45:21	0:0	6	dst
op	45:24	0:0	6	[
water	45:25	0:0	6	0
op	45:26	0:0	6	]
op	45:28	0:0	6	+
water	45:30	0:0	6	8
water	45:31	0:0	6	;
water	46:12	0:0	6	dst
op	46:15	0:0	6	[
water	46:16	0:0	6	2
op	46:17	0:0	6	]
op	46:19	0:0	6	=
water	46:21	0:0	6	s
op	46:22	0:0	6	->
water	46:24	0:0	6	dest
op	46:28	0:0	6	[
water	46:29	0:0	6	0
op	46:30	0:0	6	]
op	46:32	0:0	6	+
water	46:34	0:0	6	s
op	46:35	0:0	6	->
water	46:37	0:0	6	linesize
op	46:46	0:0	6	*
water	46:48	0:0	6	8
water	46:49	0:0	6	;
water	47:12	0:0	6	dst
op	47:15	0:0	6	[
water	47:16	0:0	6	3
op	47:17	0:0	6	]
op	47:19	0:0	6	=
water	47:21	0:0	6	dst
op	47:24	0:0	6	[
water	47:25	0:0	6	2
op	47:26	0:0	6	]
op	47:28	0:0	6	+
water	47:30	0:0	6	8
water	47:31	0:0	6	;
water	48:12	0:0	6	dst
op	48:15	0:0	6	[
water	48:16	0:0	6	4
op	48:17	0:0	6	]
op	48:19	0:0	6	=
water	48:21	0:0	6	s
op	48:22	0:0	6	->
water	48:24	0:0	6	dest
op	48:28	0:0	6	[
water	48:29	0:0	6	1
op	48:30	0:0	6	]
water	48:31	0:0	6	;
water	49:12	0:0	6	dst
op	49:15	0:0	6	[
water	49:16	0:0	6	5
op	49:17	0:0	6	]
op	49:19	0:0	6	=
water	49:21	0:0	6	s
op	49:22	0:0	6	->
water	49:24	0:0	6	dest
op	49:28	0:0	6	[
water	49:29	0:0	6	2
op	49:30	0:0	6	]
water	49:31	0:0	6	;
call	50:12	50:44	6	s->bdsp.clear_blocks
arg	50:33	50:44	7	s->block[0]
water	50:33	0:0	8	s
op	50:34	0:0	8	->
water	50:36	0:0	8	block
op	50:41	0:0	8	[
water	50:42	0:0	8	0
op	50:43	0:0	8	]
water	50:45	0:0	6	;
water	51:12	0:0	6	mb_pos
op	51:19	0:0	6	=
water	51:21	0:0	6	s
op	51:22	0:0	6	->
water	51:24	0:0	6	mb_x
op	51:29	0:0	6	+
water	51:31	0:0	6	s
op	51:32	0:0	6	->
water	51:34	0:0	6	mb_y
op	51:39	0:0	6	*
water	51:41	0:0	6	s
op	51:42	0:0	6	->
water	51:44	0:0	6	mb_width
water	51:52	0:0	6	;
water	52:12	0:0	6	s
op	52:13	0:0	6	->
water	52:15	0:0	6	current_picture
op	52:30	0:0	6	.
water	52:31	0:0	6	mb_type
op	52:38	0:0	6	[
water	52:39	0:0	6	mb_pos
op	52:45	0:0	6	]
op	52:67	0:0	6	=
water	52:69	0:0	6	MB_TYPE_INTRA
water	52:82	0:0	6	;
water	53:12	0:0	6	s
op	53:13	0:0	6	->
water	53:15	0:0	6	current_picture
op	53:30	0:0	6	.
water	53:31	0:0	6	qscale_table
op	53:43	0:0	6	[
water	53:44	0:0	6	mb_pos
op	53:50	0:0	6	]
op	53:67	0:0	6	=
water	53:69	0:0	6	v
op	53:70	0:0	6	->
water	53:72	0:0	6	pq
water	53:74	0:0	6	;
water	54:12	0:0	6	s
op	54:13	0:0	6	->
water	54:15	0:0	6	current_picture
op	54:30	0:0	6	.
water	54:31	0:0	6	motion_val
op	54:41	0:0	6	[
water	54:42	0:0	6	1
op	54:43	0:0	6	]
op	54:44	0:0	6	[
water	54:45	0:0	6	s
op	54:46	0:0	6	->
water	54:48	0:0	6	block_index
op	54:59	0:0	6	[
water	54:60	0:0	6	0
op	54:61	0:0	6	]
op	54:62	0:0	6	]
op	54:63	0:0	6	[
water	54:64	0:0	6	0
op	54:65	0:0	6	]
op	54:67	0:0	6	=
water	54:69	0:0	6	0
water	54:70	0:0	6	;
water	55:12	0:0	6	s
op	55:13	0:0	6	->
water	55:15	0:0	6	current_picture
op	55:30	0:0	6	.
water	55:31	0:0	6	motion_val
op	55:41	0:0	6	[
water	55:42	0:0	6	1
op	55:43	0:0	6	]
op	55:44	0:0	6	[
water	55:45	0:0	6	s
op	55:46	0:0	6	->
water	55:48	0:0	6	block_index
op	55:59	0:0	6	[
water	55:60	0:0	6	0
op	55:61	0:0	6	]
op	55:62	0:0	6	]
op	55:63	0:0	6	[
water	55:64	0:0	6	1
op	55:65	0:0	6	]
op	55:67	0:0	6	=
water	55:69	0:0	6	0
water	55:70	0:0	6	;
water	57:12	0:0	6	cbp
op	57:16	0:0	6	=
call	57:18	57:82	6	get_vlc2
arg	57:27	57:35	7	&v->s.gb
op	57:27	0:0	8	&
water	57:28	0:0	8	v
op	57:29	0:0	8	->
water	57:31	0:0	8	s
op	57:32	0:0	8	.
water	57:33	0:0	8	gb
arg	57:37	57:60	7	ff_msmp4_mb_i_vlc.table
water	57:37	0:0	8	ff_msmp4_mb_i_vlc
op	57:54	0:0	8	.
water	57:55	0:0	8	table
arg	57:62	57:79	7	MB_INTRA_VLC_BITS
water	57:62	0:0	8	MB_INTRA_VLC_BITS
arg	57:81	57:82	7	2
water	57:81	0:0	8	2
water	57:83	0:0	6	;
water	58:12	0:0	6	v
op	58:13	0:0	6	->
water	58:15	0:0	6	s
op	58:16	0:0	6	.
water	58:17	0:0	6	ac_pred
op	58:25	0:0	6	=
call	58:27	58:45	6	get_bits1
arg	58:37	58:45	7	&v->s.gb
op	58:37	0:0	8	&
water	58:38	0:0	8	v
op	58:39	0:0	8	->
water	58:41	0:0	8	s
op	58:42	0:0	8	.
water	58:43	0:0	8	gb
water	58:46	0:0	6	;
for	59:12	86:12	6	(k = 0 ;k < 6;k ++)
forinit	59:17	59:22	7	k = 0 ;
water	59:17	0:0	8	k
op	59:19	0:0	8	=
water	59:21	0:0	8	0
water	59:22	0:0	8	;
cond	59:24	59:28	7	k < 6
water	59:24	0:0	8	k
op	59:26	0:0	8	<
water	59:28	0:0	8	6
forexpr	59:31	59:32	7	k ++
water	59:31	0:0	8	k
op	59:32	0:0	8	++
stmts	59:36	86:12	7	
water	59:36	0:0	8	{
water	60:16	0:0	8	val
op	60:20	0:0	8	=
water	60:22	0:0	8	(
water	60:23	0:0	8	(
water	60:24	0:0	8	cbp
op	60:28	0:0	8	>>
water	60:31	0:0	8	(
water	60:32	0:0	8	5
op	60:34	0:0	8	-
water	60:36	0:0	8	k
water	60:37	0:0	8	)
water	60:38	0:0	8	)
op	60:40	0:0	8	&
water	60:42	0:0	8	1
water	60:43	0:0	8	)
water	60:44	0:0	8	;
if	61:16	65:16	8	(k < 4)
cond	61:20	61:24	9	k < 4
water	61:20	0:0	10	k
op	61:22	0:0	10	<
water	61:24	0:0	10	4
stmts	61:27	65:16	9	
water	61:27	0:0	10	{
decl	62:20	62:75	10	int	pred
op	62:31	0:0	10	=
call	62:33	62:74	11	vc1_coded_block_pred
arg	62:54	62:59	12	&v->s
op	62:54	0:0	13	&
water	62:55	0:0	13	v
op	62:56	0:0	13	->
water	62:58	0:0	13	s
arg	62:61	62:62	12	k
water	62:61	0:0	13	k
arg	62:64	62:74	12	&coded_val
op	62:64	0:0	13	&
water	62:65	0:0	13	coded_val
water	63:20	0:0	10	val
op	63:31	0:0	10	=
water	63:33	0:0	10	val
op	63:37	0:0	10	^
water	63:39	0:0	10	pred
water	63:43	0:0	10	;
op	64:20	0:0	10	*
water	64:21	0:0	10	coded_val
op	64:31	0:0	10	=
water	64:33	0:0	10	val
water	64:36	0:0	10	;
water	65:16	0:0	10	}
water	66:16	0:0	8	cbp
op	66:20	0:0	8	|=
water	66:23	0:0	8	val
op	66:27	0:0	8	<<
water	66:30	0:0	8	(
water	66:31	0:0	8	5
op	66:33	0:0	8	-
water	66:35	0:0	8	k
water	66:36	0:0	8	)
water	66:37	0:0	8	;
call	67:16	67:97	8	vc1_decode_i_block
arg	67:35	67:36	9	v
water	67:35	0:0	10	v
arg	67:38	67:49	9	s->block[k]
water	67:38	0:0	10	s
op	67:39	0:0	10	->
water	67:41	0:0	10	block
op	67:46	0:0	10	[
water	67:47	0:0	10	k
op	67:48	0:0	10	]
arg	67:51	67:52	9	k
water	67:51	0:0	10	k
arg	67:54	67:57	9	val
water	67:54	0:0	10	val
arg	67:59	67:97	9	(k<4)?v->codingset:v->codingset2
water	67:59	0:0	10	(
water	67:60	0:0	10	k
op	67:62	0:0	10	<
water	67:64	0:0	10	4
water	67:65	0:0	10	)
water	67:67	0:0	10	?
water	67:69	0:0	10	v
op	67:70	0:0	10	->
water	67:72	0:0	10	codingset
water	67:82	0:0	10	:
water	67:84	0:0	10	v
op	67:85	0:0	10	->
water	67:87	0:0	10	codingset2
water	67:98	0:0	8	;
if	68:16	69:28	8	(CONFIG_GRAY && k > 3 && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	68:20	68:81	9	CONFIG_GRAY && k > 3 && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
water	68:20	0:0	10	CONFIG_GRAY
op	68:32	0:0	10	&&
water	68:35	0:0	10	k
op	68:37	0:0	10	>
water	68:39	0:0	10	3
op	68:41	0:0	10	&&
water	68:44	0:0	10	(
water	68:45	0:0	10	s
op	68:46	0:0	10	->
water	68:48	0:0	10	avctx
op	68:53	0:0	10	->
water	68:55	0:0	10	flags
op	68:61	0:0	10	&
water	68:63	0:0	10	AV_CODEC_FLAG_GRAY
water	68:81	0:0	10	)
stmts	69:20	69:28	9	
continue	69:20	69:28	10	
call	70:16	70:55	8	v->vc1dsp.vc1_inv_trans_8x8
arg	70:44	70:55	9	s->block[k]
water	70:44	0:0	10	s
op	70:45	0:0	10	->
water	70:47	0:0	10	block
op	70:52	0:0	10	[
water	70:53	0:0	10	k
op	70:54	0:0	10	]
water	70:56	0:0	8	;
if	71:16	78:16	8	(v -> pq >= 9 && v -> overlap)
cond	71:20	71:37	9	v -> pq >= 9 && v -> overlap
water	71:20	0:0	10	v
op	71:21	0:0	10	->
water	71:23	0:0	10	pq
op	71:26	0:0	10	>=
water	71:29	0:0	10	9
op	71:31	0:0	10	&&
water	71:34	0:0	10	v
op	71:35	0:0	10	->
water	71:37	0:0	10	overlap
stmts	71:46	78:16	9	
water	71:46	0:0	10	{
if	72:20	74:48	10	(v -> rangeredfrm)
cond	72:24	72:27	11	v -> rangeredfrm
water	72:24	0:0	12	v
op	72:25	0:0	12	->
water	72:27	0:0	12	rangeredfrm
stmts	73:24	74:48	11	
for	73:24	74:48	12	(j = 0 ;j < 64;j ++)
forinit	73:29	73:34	13	j = 0 ;
water	73:29	0:0	14	j
op	73:31	0:0	14	=
water	73:33	0:0	14	0
water	73:34	0:0	14	;
cond	73:36	73:40	13	j < 64
water	73:36	0:0	14	j
op	73:38	0:0	14	<
water	73:40	0:0	14	64
forexpr	73:44	73:45	13	j ++
water	73:44	0:0	14	j
op	73:45	0:0	14	++
stmts	74:28	74:48	13	
water	74:28	0:0	14	s
op	74:29	0:0	14	->
water	74:31	0:0	14	block
op	74:36	0:0	14	[
water	74:37	0:0	14	k
op	74:38	0:0	14	]
op	74:39	0:0	14	[
water	74:40	0:0	14	j
op	74:41	0:0	14	]
op	74:43	0:0	14	<<=
water	74:47	0:0	14	1
water	74:48	0:0	14	;
call	75:20	77:73	10	s->idsp.put_signed_pixels_clamped
arg	75:54	75:65	11	s->block[k]
water	75:54	0:0	12	s
op	75:55	0:0	12	->
water	75:57	0:0	12	block
op	75:62	0:0	12	[
water	75:63	0:0	12	k
op	75:64	0:0	12	]
arg	75:67	75:73	11	dst[k]
water	75:67	0:0	12	dst
op	75:70	0:0	12	[
water	75:71	0:0	12	k
op	75:72	0:0	12	]
arg	76:54	77:73	11	k&4?s->uvlinesize:s->linesize
water	76:54	0:0	12	k
op	76:56	0:0	12	&
water	76:58	0:0	12	4
water	76:60	0:0	12	?
water	76:62	0:0	12	s
op	76:63	0:0	12	->
water	76:65	0:0	12	uvlinesize
water	77:60	0:0	12	:
water	77:62	0:0	12	s
op	77:63	0:0	12	->
water	77:65	0:0	12	linesize
water	77:74	0:0	10	;
water	78:16	0:0	10	}
else	78:18	85:16	8
stmts	78:23	85:16	9	
water	78:23	0:0	10	{
if	79:20	81:71	10	(v -> rangeredfrm)
cond	79:24	79:27	11	v -> rangeredfrm
water	79:24	0:0	12	v
op	79:25	0:0	12	->
water	79:27	0:0	12	rangeredfrm
stmts	80:24	81:71	11	
for	80:24	81:71	12	(j = 0 ;j < 64;j ++)
forinit	80:29	80:34	13	j = 0 ;
water	80:29	0:0	14	j
op	80:31	0:0	14	=
water	80:33	0:0	14	0
water	80:34	0:0	14	;
cond	80:36	80:40	13	j < 64
water	80:36	0:0	14	j
op	80:38	0:0	14	<
water	80:40	0:0	14	64
forexpr	80:44	80:45	13	j ++
water	80:44	0:0	14	j
op	80:45	0:0	14	++
stmts	81:28	81:71	13	
water	81:28	0:0	14	s
op	81:29	0:0	14	->
water	81:31	0:0	14	block
op	81:36	0:0	14	[
water	81:37	0:0	14	k
op	81:38	0:0	14	]
op	81:39	0:0	14	[
water	81:40	0:0	14	j
op	81:41	0:0	14	]
op	81:43	0:0	14	=
water	81:45	0:0	14	(
water	81:46	0:0	14	s
op	81:47	0:0	14	->
water	81:49	0:0	14	block
op	81:54	0:0	14	[
water	81:55	0:0	14	k
op	81:56	0:0	14	]
op	81:57	0:0	14	[
water	81:58	0:0	14	j
op	81:59	0:0	14	]
op	81:61	0:0	14	-
water	81:63	0:0	14	64
water	81:65	0:0	14	)
op	81:67	0:0	14	<<
water	81:70	0:0	14	1
water	81:71	0:0	14	;
call	82:20	84:66	10	s->idsp.put_pixels_clamped
arg	82:47	82:58	11	s->block[k]
water	82:47	0:0	12	s
op	82:48	0:0	12	->
water	82:50	0:0	12	block
op	82:55	0:0	12	[
water	82:56	0:0	12	k
op	82:57	0:0	12	]
arg	82:60	82:66	11	dst[k]
water	82:60	0:0	12	dst
op	82:63	0:0	12	[
water	82:64	0:0	12	k
op	82:65	0:0	12	]
arg	83:47	84:66	11	k&4?s->uvlinesize:s->linesize
water	83:47	0:0	12	k
op	83:49	0:0	12	&
water	83:51	0:0	12	4
water	83:53	0:0	12	?
water	83:55	0:0	12	s
op	83:56	0:0	12	->
water	83:58	0:0	12	uvlinesize
water	84:53	0:0	12	:
water	84:55	0:0	12	s
op	84:56	0:0	12	->
water	84:58	0:0	12	linesize
water	84:67	0:0	10	;
water	85:16	0:0	10	}
water	86:12	0:0	8	}
if	87:12	108:12	6	(v -> pq >= 9 && v -> overlap)
cond	87:16	87:33	7	v -> pq >= 9 && v -> overlap
water	87:16	0:0	8	v
op	87:17	0:0	8	->
water	87:19	0:0	8	pq
op	87:22	0:0	8	>=
water	87:25	0:0	8	9
op	87:27	0:0	8	&&
water	87:30	0:0	8	v
op	87:31	0:0	8	->
water	87:33	0:0	8	overlap
stmts	87:42	108:12	7	
water	87:42	0:0	8	{
if	88:16	95:16	8	(s -> mb_x)
cond	88:20	88:23	9	s -> mb_x
water	88:20	0:0	10	s
op	88:21	0:0	10	->
water	88:23	0:0	10	mb_x
stmts	88:29	95:16	9	
water	88:29	0:0	10	{
call	89:20	89:67	10	v->vc1dsp.vc1_h_overlap
arg	89:44	89:54	11	s->dest[0]
water	89:44	0:0	12	s
op	89:45	0:0	12	->
water	89:47	0:0	12	dest
op	89:51	0:0	12	[
water	89:52	0:0	12	0
op	89:53	0:0	12	]
arg	89:56	89:67	11	s->linesize
water	89:56	0:0	12	s
op	89:57	0:0	12	->
water	89:59	0:0	12	linesize
water	89:68	0:0	10	;
call	90:20	90:85	10	v->vc1dsp.vc1_h_overlap
arg	90:44	90:72	11	s->dest[0]+8*s->linesize
water	90:44	0:0	12	s
op	90:45	0:0	12	->
water	90:47	0:0	12	dest
op	90:51	0:0	12	[
water	90:52	0:0	12	0
op	90:53	0:0	12	]
op	90:55	0:0	12	+
water	90:57	0:0	12	8
op	90:59	0:0	12	*
water	90:61	0:0	12	s
op	90:62	0:0	12	->
water	90:64	0:0	12	linesize
arg	90:74	90:85	11	s->linesize
water	90:74	0:0	12	s
op	90:75	0:0	12	->
water	90:77	0:0	12	linesize
water	90:86	0:0	10	;
if	91:20	94:20	10	(! CONFIG_GRAY || ! ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	91:24	91:78	11	! CONFIG_GRAY || ! ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
op	91:24	0:0	12	!
water	91:25	0:0	12	CONFIG_GRAY
op	91:37	0:0	12	||
op	91:40	0:0	12	!
water	91:41	0:0	12	(
water	91:42	0:0	12	s
op	91:43	0:0	12	->
water	91:45	0:0	12	avctx
op	91:50	0:0	12	->
water	91:52	0:0	12	flags
op	91:58	0:0	12	&
water	91:60	0:0	12	AV_CODEC_FLAG_GRAY
water	91:78	0:0	12	)
stmts	91:81	94:20	11	
water	91:81	0:0	12	{
call	92:24	92:73	12	v->vc1dsp.vc1_h_overlap
arg	92:48	92:58	13	s->dest[1]
water	92:48	0:0	14	s
op	92:49	0:0	14	->
water	92:51	0:0	14	dest
op	92:55	0:0	14	[
water	92:56	0:0	14	1
op	92:57	0:0	14	]
arg	92:60	92:73	13	s->uvlinesize
water	92:60	0:0	14	s
op	92:61	0:0	14	->
water	92:63	0:0	14	uvlinesize
water	92:74	0:0	12	;
call	93:24	93:73	12	v->vc1dsp.vc1_h_overlap
arg	93:48	93:58	13	s->dest[2]
water	93:48	0:0	14	s
op	93:49	0:0	14	->
water	93:51	0:0	14	dest
op	93:55	0:0	14	[
water	93:56	0:0	14	2
op	93:57	0:0	14	]
arg	93:60	93:73	13	s->uvlinesize
water	93:60	0:0	14	s
op	93:61	0:0	14	->
water	93:63	0:0	14	uvlinesize
water	93:74	0:0	12	;
water	94:20	0:0	12	}
water	95:16	0:0	10	}
call	96:16	96:67	8	v->vc1dsp.vc1_h_overlap
arg	96:40	96:54	9	s->dest[0]+8
water	96:40	0:0	10	s
op	96:41	0:0	10	->
water	96:43	0:0	10	dest
op	96:47	0:0	10	[
water	96:48	0:0	10	0
op	96:49	0:0	10	]
op	96:51	0:0	10	+
water	96:53	0:0	10	8
arg	96:56	96:67	9	s->linesize
water	96:56	0:0	10	s
op	96:57	0:0	10	->
water	96:59	0:0	10	linesize
water	96:68	0:0	8	;
call	97:16	97:85	8	v->vc1dsp.vc1_h_overlap
arg	97:40	97:72	9	s->dest[0]+8*s->linesize+8
water	97:40	0:0	10	s
op	97:41	0:0	10	->
water	97:43	0:0	10	dest
op	97:47	0:0	10	[
water	97:48	0:0	10	0
op	97:49	0:0	10	]
op	97:51	0:0	10	+
water	97:53	0:0	10	8
op	97:55	0:0	10	*
water	97:57	0:0	10	s
op	97:58	0:0	10	->
water	97:60	0:0	10	linesize
op	97:69	0:0	10	+
water	97:71	0:0	10	8
arg	97:74	97:85	9	s->linesize
water	97:74	0:0	10	s
op	97:75	0:0	10	->
water	97:77	0:0	10	linesize
water	97:86	0:0	8	;
if	98:16	105:16	8	(! s -> first_slice_line)
cond	98:20	98:24	9	! s -> first_slice_line
op	98:20	0:0	10	!
water	98:21	0:0	10	s
op	98:22	0:0	10	->
water	98:24	0:0	10	first_slice_line
stmts	98:42	105:16	9	
water	98:42	0:0	10	{
call	99:20	99:67	10	v->vc1dsp.vc1_v_overlap
arg	99:44	99:54	11	s->dest[0]
water	99:44	0:0	12	s
op	99:45	0:0	12	->
water	99:47	0:0	12	dest
op	99:51	0:0	12	[
water	99:52	0:0	12	0
op	99:53	0:0	12	]
arg	99:56	99:67	11	s->linesize
water	99:56	0:0	12	s
op	99:57	0:0	12	->
water	99:59	0:0	12	linesize
water	99:68	0:0	10	;
call	100:20	100:71	10	v->vc1dsp.vc1_v_overlap
arg	100:44	100:58	11	s->dest[0]+8
water	100:44	0:0	12	s
op	100:45	0:0	12	->
water	100:47	0:0	12	dest
op	100:51	0:0	12	[
water	100:52	0:0	12	0
op	100:53	0:0	12	]
op	100:55	0:0	12	+
water	100:57	0:0	12	8
arg	100:60	100:71	11	s->linesize
water	100:60	0:0	12	s
op	100:61	0:0	12	->
water	100:63	0:0	12	linesize
water	100:72	0:0	10	;
if	101:20	104:20	10	(! CONFIG_GRAY || ! ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	101:24	101:78	11	! CONFIG_GRAY || ! ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
op	101:24	0:0	12	!
water	101:25	0:0	12	CONFIG_GRAY
op	101:37	0:0	12	||
op	101:40	0:0	12	!
water	101:41	0:0	12	(
water	101:42	0:0	12	s
op	101:43	0:0	12	->
water	101:45	0:0	12	avctx
op	101:50	0:0	12	->
water	101:52	0:0	12	flags
op	101:58	0:0	12	&
water	101:60	0:0	12	AV_CODEC_FLAG_GRAY
water	101:78	0:0	12	)
stmts	101:81	104:20	11	
water	101:81	0:0	12	{
call	102:24	102:73	12	v->vc1dsp.vc1_v_overlap
arg	102:48	102:58	13	s->dest[1]
water	102:48	0:0	14	s
op	102:49	0:0	14	->
water	102:51	0:0	14	dest
op	102:55	0:0	14	[
water	102:56	0:0	14	1
op	102:57	0:0	14	]
arg	102:60	102:73	13	s->uvlinesize
water	102:60	0:0	14	s
op	102:61	0:0	14	->
water	102:63	0:0	14	uvlinesize
water	102:74	0:0	12	;
call	103:24	103:73	12	v->vc1dsp.vc1_v_overlap
arg	103:48	103:58	13	s->dest[2]
water	103:48	0:0	14	s
op	103:49	0:0	14	->
water	103:51	0:0	14	dest
op	103:55	0:0	14	[
water	103:56	0:0	14	2
op	103:57	0:0	14	]
arg	103:60	103:73	13	s->uvlinesize
water	103:60	0:0	14	s
op	103:61	0:0	14	->
water	103:63	0:0	14	uvlinesize
water	103:74	0:0	12	;
water	104:20	0:0	12	}
water	105:16	0:0	10	}
call	106:16	106:81	8	v->vc1dsp.vc1_v_overlap
arg	106:40	106:68	9	s->dest[0]+8*s->linesize
water	106:40	0:0	10	s
op	106:41	0:0	10	->
water	106:43	0:0	10	dest
op	106:47	0:0	10	[
water	106:48	0:0	10	0
op	106:49	0:0	10	]
op	106:51	0:0	10	+
water	106:53	0:0	10	8
op	106:55	0:0	10	*
water	106:57	0:0	10	s
op	106:58	0:0	10	->
water	106:60	0:0	10	linesize
arg	106:70	106:81	9	s->linesize
water	106:70	0:0	10	s
op	106:71	0:0	10	->
water	106:73	0:0	10	linesize
water	106:82	0:0	8	;
call	107:16	107:85	8	v->vc1dsp.vc1_v_overlap
arg	107:40	107:72	9	s->dest[0]+8*s->linesize+8
water	107:40	0:0	10	s
op	107:41	0:0	10	->
water	107:43	0:0	10	dest
op	107:47	0:0	10	[
water	107:48	0:0	10	0
op	107:49	0:0	10	]
op	107:51	0:0	10	+
water	107:53	0:0	10	8
op	107:55	0:0	10	*
water	107:57	0:0	10	s
op	107:58	0:0	10	->
water	107:60	0:0	10	linesize
op	107:69	0:0	10	+
water	107:71	0:0	10	8
arg	107:74	107:85	9	s->linesize
water	107:74	0:0	10	s
op	107:75	0:0	10	->
water	107:77	0:0	10	linesize
water	107:86	0:0	8	;
water	108:12	0:0	8	}
if	109:12	110:49	6	(v -> s . loop_filter)
cond	109:16	109:21	7	v -> s . loop_filter
water	109:16	0:0	8	v
op	109:17	0:0	8	->
water	109:19	0:0	8	s
op	109:20	0:0	8	.
water	109:21	0:0	8	loop_filter
stmts	110:16	110:49	7	
call	110:16	110:48	8	ff_vc1_loop_filter_iblk
arg	110:40	110:41	9	v
water	110:40	0:0	10	v
arg	110:43	110:48	9	v->pq
water	110:43	0:0	10	v
op	110:44	0:0	10	->
water	110:46	0:0	10	pq
water	110:49	0:0	8	;
if	111:12	116:12	6	(get_bits_count (& s -> gb ) > v -> bits)
cond	111:16	111:44	7	get_bits_count (& s -> gb ) > v -> bits
call	111:16	111:37	8	get_bits_count
arg	111:31	111:37	9	&s->gb
op	111:31	0:0	10	&
water	111:32	0:0	10	s
op	111:33	0:0	10	->
water	111:35	0:0	10	gb
op	111:39	0:0	8	>
water	111:41	0:0	8	v
op	111:42	0:0	8	->
water	111:44	0:0	8	bits
stmts	111:50	116:12	7	
water	111:50	0:0	8	{
call	112:16	112:75	8	ff_er_add_slice
arg	112:32	112:38	9	&s->er
op	112:32	0:0	10	&
water	112:33	0:0	10	s
op	112:34	0:0	10	->
water	112:36	0:0	10	er
arg	112:40	112:41	9	0
water	112:40	0:0	10	0
arg	112:43	112:44	9	0
water	112:43	0:0	10	0
arg	112:46	112:53	9	s->mb_x
water	112:46	0:0	10	s
op	112:47	0:0	10	->
water	112:49	0:0	10	mb_x
arg	112:55	112:62	9	s->mb_y
water	112:55	0:0	10	s
op	112:56	0:0	10	->
water	112:58	0:0	10	mb_y
arg	112:64	112:75	9	ER_MB_ERROR
water	112:64	0:0	10	ER_MB_ERROR
water	112:76	0:0	8	;
call	113:16	114:54	8	av_log
arg	113:23	113:31	9	s->avctx
water	113:23	0:0	10	s
op	113:24	0:0	10	->
water	113:26	0:0	10	avctx
arg	113:33	113:45	9	AV_LOG_ERROR
water	113:33	0:0	10	AV_LOG_ERROR
arg	113:47	113:80	9	"Bits overconsumption: %i > %i\n"
water	113:47	0:0	10	"Bits overconsumption: %i > %i\n"
arg	114:23	114:45	9	get_bits_count(&s->gb)
call	114:23	114:44	10	get_bits_count
arg	114:38	114:44	11	&s->gb
op	114:38	0:0	12	&
water	114:39	0:0	12	s
op	114:40	0:0	12	->
water	114:42	0:0	12	gb
arg	114:47	114:54	9	v->bits
water	114:47	0:0	10	v
op	114:48	0:0	10	->
water	114:50	0:0	10	bits
water	114:55	0:0	8	;
return	115:16	115:22	8	
water	116:12	0:0	8	}
water	117:8	0:0	6	}
if	118:8	119:56	4	(! v -> s . loop_filter)
cond	118:12	118:18	5	! v -> s . loop_filter
op	118:12	0:0	6	!
water	118:13	0:0	6	v
op	118:14	0:0	6	->
water	118:16	0:0	6	s
op	118:17	0:0	6	.
water	118:18	0:0	6	loop_filter
stmts	119:12	119:56	5	
call	119:12	119:55	6	ff_mpeg_draw_horiz_band
arg	119:36	119:37	7	s
water	119:36	0:0	8	s
arg	119:39	119:51	7	s->mb_y*16
water	119:39	0:0	8	s
op	119:40	0:0	8	->
water	119:42	0:0	8	mb_y
op	119:47	0:0	8	*
water	119:49	0:0	8	16
arg	119:53	119:55	7	16
water	119:53	0:0	8	16
water	119:56	0:0	6	;
else	120:8	121:62	4
stmts	120:13	121:62	5	
if	120:13	121:62	6	(s -> mb_y)
cond	120:17	120:20	7	s -> mb_y
water	120:17	0:0	8	s
op	120:18	0:0	8	->
water	120:20	0:0	8	mb_y
stmts	121:12	121:62	7	
call	121:12	121:61	8	ff_mpeg_draw_horiz_band
arg	121:36	121:37	9	s
water	121:36	0:0	10	s
arg	121:39	121:57	9	(s->mb_y-1)*16
water	121:39	0:0	10	(
water	121:40	0:0	10	s
op	121:41	0:0	10	->
water	121:43	0:0	10	mb_y
op	121:48	0:0	10	-
water	121:50	0:0	10	1
water	121:51	0:0	10	)
op	121:53	0:0	10	*
water	121:55	0:0	10	16
arg	121:59	121:61	9	16
water	121:59	0:0	10	16
water	121:62	0:0	8	;
water	122:8	0:0	4	s
op	122:9	0:0	4	->
water	122:11	0:0	4	first_slice_line
op	122:28	0:0	4	=
water	122:30	0:0	4	0
water	122:31	0:0	4	;
water	123:4	0:0	4	}
if	124:4	125:62	2	(v -> s . loop_filter)
cond	124:8	124:13	3	v -> s . loop_filter
water	124:8	0:0	4	v
op	124:9	0:0	4	->
water	124:11	0:0	4	s
op	124:12	0:0	4	.
water	124:13	0:0	4	loop_filter
stmts	125:8	125:62	3	
call	125:8	125:61	4	ff_mpeg_draw_horiz_band
arg	125:32	125:33	5	s
water	125:32	0:0	6	s
arg	125:35	125:57	5	(s->end_mb_y-1)*16
water	125:35	0:0	6	(
water	125:36	0:0	6	s
op	125:37	0:0	6	->
water	125:39	0:0	6	end_mb_y
op	125:48	0:0	6	-
water	125:50	0:0	6	1
water	125:51	0:0	6	)
op	125:53	0:0	6	*
water	125:55	0:0	6	16
arg	125:59	125:61	5	16
water	125:59	0:0	6	16
water	125:62	0:0	4	;
call	128:4	128:78	2	ff_er_add_slice
arg	128:20	128:26	3	&s->er
op	128:20	0:0	4	&
water	128:21	0:0	4	s
op	128:22	0:0	4	->
water	128:24	0:0	4	er
arg	128:28	128:29	3	0
water	128:28	0:0	4	0
arg	128:31	128:32	3	0
water	128:31	0:0	4	0
arg	128:34	128:49	3	s->mb_width-1
water	128:34	0:0	4	s
op	128:35	0:0	4	->
water	128:37	0:0	4	mb_width
op	128:46	0:0	4	-
water	128:48	0:0	4	1
arg	128:51	128:67	3	s->mb_height-1
water	128:51	0:0	4	s
op	128:52	0:0	4	->
water	128:54	0:0	4	mb_height
op	128:64	0:0	4	-
water	128:66	0:0	4	1
arg	128:69	128:78	3	ER_MB_END
water	128:69	0:0	4	ER_MB_END
water	128:79	0:0	2	;
