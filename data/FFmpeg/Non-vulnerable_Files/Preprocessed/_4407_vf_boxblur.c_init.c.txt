func	1:15	24:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	23:12	1	
decl	3:4	3:33	2	BoxBlurContext	*s
op	3:22	0:0	2	=
water	3:24	0:0	2	ctx
op	3:27	0:0	2	->
water	3:29	0:0	2	priv
if	4:4	7:4	2	(! s -> luma_param . radius_expr)
cond	4:8	4:23	3	! s -> luma_param . radius_expr
op	4:8	0:0	4	!
water	4:9	0:0	4	s
op	4:10	0:0	4	->
water	4:12	0:0	4	luma_param
op	4:22	0:0	4	.
water	4:23	0:0	4	radius_expr
stmts	4:36	7:4	3	
water	4:36	0:0	4	{
call	5:8	5:72	4	av_log
arg	5:15	5:18	5	ctx
water	5:15	0:0	6	ctx
arg	5:20	5:32	5	AV_LOG_ERROR
water	5:20	0:0	6	AV_LOG_ERROR
arg	5:34	5:72	5	"Luma radius expression is not set.\n"
water	5:34	0:0	6	"Luma radius expression is not set.\n"
water	5:73	0:0	4	;
return	6:8	6:30	4	AVERROR(EINVAL)
call	6:15	6:29	5	AVERROR
arg	6:23	6:29	6	EINVAL
water	6:23	0:0	7	EINVAL
water	7:4	0:0	4	}
if	9:4	13:4	2	(! s -> chroma_param . radius_expr)
cond	9:8	9:25	3	! s -> chroma_param . radius_expr
op	9:8	0:0	4	!
water	9:9	0:0	4	s
op	9:10	0:0	4	->
water	9:12	0:0	4	chroma_param
op	9:24	0:0	4	.
water	9:25	0:0	4	radius_expr
stmts	9:38	13:4	3	
water	9:38	0:0	4	{
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	chroma_param
op	10:23	0:0	4	.
water	10:24	0:0	4	radius_expr
op	10:36	0:0	4	=
call	10:38	10:73	4	av_strdup
arg	10:48	10:73	5	s->luma_param.radius_expr
water	10:48	0:0	6	s
op	10:49	0:0	6	->
water	10:51	0:0	6	luma_param
op	10:61	0:0	6	.
water	10:62	0:0	6	radius_expr
water	10:74	0:0	4	;
if	11:8	12:34	4	(! s -> chroma_param . radius_expr)
cond	11:12	11:29	5	! s -> chroma_param . radius_expr
op	11:12	0:0	6	!
water	11:13	0:0	6	s
op	11:14	0:0	6	->
water	11:16	0:0	6	chroma_param
op	11:28	0:0	6	.
water	11:29	0:0	6	radius_expr
stmts	12:12	12:34	5	
return	12:12	12:34	6	AVERROR(ENOMEM)
call	12:19	12:33	7	AVERROR
arg	12:27	12:33	8	ENOMEM
water	12:27	0:0	9	ENOMEM
water	13:4	0:0	4	}
if	14:4	15:51	2	(s -> chroma_param . power < 0)
cond	14:8	14:32	3	s -> chroma_param . power < 0
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	chroma_param
op	14:23	0:0	4	.
water	14:24	0:0	4	power
op	14:30	0:0	4	<
water	14:32	0:0	4	0
stmts	15:8	15:51	3	
water	15:8	0:0	4	s
op	15:9	0:0	4	->
water	15:11	0:0	4	chroma_param
op	15:23	0:0	4	.
water	15:24	0:0	4	power
op	15:30	0:0	4	=
water	15:32	0:0	4	s
op	15:33	0:0	4	->
water	15:35	0:0	4	luma_param
op	15:45	0:0	4	.
water	15:46	0:0	4	power
water	15:51	0:0	4	;
if	16:4	20:4	2	(! s -> alpha_param . radius_expr)
cond	16:8	16:24	3	! s -> alpha_param . radius_expr
op	16:8	0:0	4	!
water	16:9	0:0	4	s
op	16:10	0:0	4	->
water	16:12	0:0	4	alpha_param
op	16:23	0:0	4	.
water	16:24	0:0	4	radius_expr
stmts	16:37	20:4	3	
water	16:37	0:0	4	{
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	alpha_param
op	17:22	0:0	4	.
water	17:23	0:0	4	radius_expr
op	17:35	0:0	4	=
call	17:37	17:72	4	av_strdup
arg	17:47	17:72	5	s->luma_param.radius_expr
water	17:47	0:0	6	s
op	17:48	0:0	6	->
water	17:50	0:0	6	luma_param
op	17:60	0:0	6	.
water	17:61	0:0	6	radius_expr
water	17:73	0:0	4	;
if	18:8	19:34	4	(! s -> alpha_param . radius_expr)
cond	18:12	18:28	5	! s -> alpha_param . radius_expr
op	18:12	0:0	6	!
water	18:13	0:0	6	s
op	18:14	0:0	6	->
water	18:16	0:0	6	alpha_param
op	18:27	0:0	6	.
water	18:28	0:0	6	radius_expr
stmts	19:12	19:34	5	
return	19:12	19:34	6	AVERROR(ENOMEM)
call	19:19	19:33	7	AVERROR
arg	19:27	19:33	8	ENOMEM
water	19:27	0:0	9	ENOMEM
water	20:4	0:0	4	}
if	21:4	22:50	2	(s -> alpha_param . power < 0)
cond	21:8	21:31	3	s -> alpha_param . power < 0
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	alpha_param
op	21:22	0:0	4	.
water	21:23	0:0	4	power
op	21:29	0:0	4	<
water	21:31	0:0	4	0
stmts	22:8	22:50	3	
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	alpha_param
op	22:22	0:0	4	.
water	22:23	0:0	4	power
op	22:29	0:0	4	=
water	22:31	0:0	4	s
op	22:32	0:0	4	->
water	22:34	0:0	4	luma_param
op	22:44	0:0	4	.
water	22:45	0:0	4	power
water	22:50	0:0	4	;
return	23:4	23:12	2	0
water	23:11	0:0	3	0
