func	1:0	130:0	0	static void	video_audio_display
params	1:31	0:0	1	
param	1:32	1:45	2	VideoState *	s
stmnts	0:0	129:4	1	
decl	3:4	3:63	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:63	2	int	i_start
water	3:18	0:0	2	,
decl	3:4	3:63	2	int	x
water	3:21	0:0	2	,
decl	3:4	3:63	2	int	y1
water	3:25	0:0	2	,
decl	3:4	3:63	2	int	y
water	3:28	0:0	2	,
decl	3:4	3:63	2	int	ys
water	3:32	0:0	2	,
decl	3:4	3:63	2	int	delay
water	3:39	0:0	2	,
decl	3:4	3:63	2	int	n
water	3:42	0:0	2	,
decl	3:4	3:63	2	int	nb_display_channels
decl	4:4	4:27	2	int	ch
water	4:10	0:0	2	,
decl	4:4	4:27	2	int	channels
water	4:20	0:0	2	,
decl	4:4	4:27	2	int	h
water	4:23	0:0	2	,
decl	4:4	4:27	2	int	h2
decl	5:4	5:21	2	int64_t	time_diff
decl	6:4	6:26	2	int	rdft_bits
water	6:17	0:0	2	,
decl	6:4	6:26	2	int	nb_freq
for	7:4	8:8	2	(rdft_bits = 1 ;( 1 << rdft_bits ) < 2 * s -> height;rdft_bits ++)
forinit	7:9	7:22	3	rdft_bits = 1 ;
water	7:9	0:0	4	rdft_bits
op	7:19	0:0	4	=
water	7:21	0:0	4	1
water	7:22	0:0	4	;
cond	7:24	7:50	3	( 1 << rdft_bits ) < 2 * s -> height
water	7:24	0:0	4	(
water	7:25	0:0	4	1
op	7:27	0:0	4	<<
water	7:30	0:0	4	rdft_bits
water	7:39	0:0	4	)
op	7:41	0:0	4	<
water	7:43	0:0	4	2
op	7:45	0:0	4	*
water	7:47	0:0	4	s
op	7:48	0:0	4	->
water	7:50	0:0	4	height
forexpr	7:58	7:67	3	rdft_bits ++
water	7:58	0:0	4	rdft_bits
op	7:67	0:0	4	++
stmts	8:8	8:8	3	
water	8:8	0:0	4	;
water	9:4	0:0	2	nb_freq
op	9:12	0:0	2	=
water	9:14	0:0	2	1
op	9:16	0:0	2	<<
water	9:19	0:0	2	(
water	9:20	0:0	2	rdft_bits
op	9:30	0:0	2	-
water	9:32	0:0	2	1
water	9:33	0:0	2	)
water	9:34	0:0	2	;
water	11:4	0:0	2	channels
op	11:13	0:0	2	=
water	11:15	0:0	2	s
op	11:16	0:0	2	->
water	11:18	0:0	2	audio_tgt
op	11:27	0:0	2	.
water	11:28	0:0	2	channels
water	11:36	0:0	2	;
water	12:4	0:0	2	nb_display_channels
op	12:24	0:0	2	=
water	12:26	0:0	2	channels
water	12:34	0:0	2	;
if	13:4	44:4	2	(! s -> paused)
cond	13:8	13:12	3	! s -> paused
op	13:8	0:0	4	!
water	13:9	0:0	4	s
op	13:10	0:0	4	->
water	13:12	0:0	4	paused
stmts	13:20	44:4	3	
water	13:20	0:0	4	{
decl	14:8	14:79	4	int	data_used
op	14:21	0:0	4	=
water	14:23	0:0	4	s
op	14:24	0:0	4	->
water	14:26	0:0	4	show_mode
op	14:36	0:0	4	==
water	14:39	0:0	4	SHOW_MODE_WAVES
water	14:55	0:0	4	?
water	14:57	0:0	4	s
op	14:58	0:0	4	->
water	14:60	0:0	4	width
water	14:66	0:0	4	:
water	14:68	0:0	4	(
water	14:69	0:0	4	2
op	14:70	0:0	4	*
water	14:71	0:0	4	nb_freq
water	14:78	0:0	4	)
water	15:8	0:0	4	n
op	15:10	0:0	4	=
water	15:12	0:0	4	2
op	15:14	0:0	4	*
water	15:16	0:0	4	channels
water	15:24	0:0	4	;
water	16:8	0:0	4	delay
op	16:14	0:0	4	=
water	16:16	0:0	4	s
op	16:17	0:0	4	->
water	16:19	0:0	4	audio_write_buf_size
water	16:39	0:0	4	;
water	17:8	0:0	4	delay
op	17:14	0:0	4	/=
water	17:17	0:0	4	n
water	17:18	0:0	4	;
if	20:8	23:8	4	(audio_callback_time)
cond	20:12	20:12	5	audio_callback_time
water	20:12	0:0	6	audio_callback_time
stmts	20:33	23:8	5	
water	20:33	0:0	6	{
water	21:12	0:0	6	time_diff
op	21:22	0:0	6	=
call	21:24	21:44	6	av_gettime_relative
op	21:46	0:0	6	-
water	21:48	0:0	6	audio_callback_time
water	21:67	0:0	6	;
water	22:12	0:0	6	delay
op	22:18	0:0	6	-=
water	22:21	0:0	6	(
water	22:22	0:0	6	time_diff
op	22:32	0:0	6	*
water	22:34	0:0	6	s
op	22:35	0:0	6	->
water	22:37	0:0	6	audio_tgt
op	22:46	0:0	6	.
water	22:47	0:0	6	freq
water	22:51	0:0	6	)
op	22:53	0:0	6	/
water	22:55	0:0	6	1000000
water	22:62	0:0	6	;
water	23:8	0:0	6	}
water	24:8	0:0	4	delay
op	24:14	0:0	4	+=
water	24:17	0:0	4	2
op	24:19	0:0	4	*
water	24:21	0:0	4	data_used
water	24:30	0:0	4	;
if	25:8	26:29	4	(delay < data_used)
cond	25:12	25:20	5	delay < data_used
water	25:12	0:0	6	delay
op	25:18	0:0	6	<
water	25:20	0:0	6	data_used
stmts	26:12	26:29	5	
water	26:12	0:0	6	delay
op	26:18	0:0	6	=
water	26:20	0:0	6	data_used
water	26:29	0:0	6	;
water	27:8	0:0	4	i_start
op	27:15	0:0	4	=
water	27:17	0:0	4	x
op	27:19	0:0	4	=
call	27:21	27:92	4	compute_mod
arg	27:33	27:73	5	s->sample_array_index-delay*channels
water	27:33	0:0	6	s
op	27:34	0:0	6	->
water	27:36	0:0	6	sample_array_index
op	27:55	0:0	6	-
water	27:57	0:0	6	delay
op	27:63	0:0	6	*
water	27:65	0:0	6	channels
arg	27:75	27:92	5	SAMPLE_ARRAY_SIZE
water	27:75	0:0	6	SAMPLE_ARRAY_SIZE
water	27:93	0:0	4	;
if	28:8	42:8	4	(s -> show_mode == SHOW_MODE_WAVES)
cond	28:12	28:28	5	s -> show_mode == SHOW_MODE_WAVES
water	28:12	0:0	6	s
op	28:13	0:0	6	->
water	28:15	0:0	6	show_mode
op	28:25	0:0	6	==
water	28:28	0:0	6	SHOW_MODE_WAVES
stmts	28:45	42:8	5	
water	28:45	0:0	6	{
water	29:12	0:0	6	h
op	29:14	0:0	6	=
water	29:16	0:0	6	INT_MIN
water	29:23	0:0	6	;
for	30:12	41:12	6	(i = 0 ;i < 1000;i += channels)
forinit	30:17	30:22	7	i = 0 ;
water	30:17	0:0	8	i
op	30:19	0:0	8	=
water	30:21	0:0	8	0
water	30:22	0:0	8	;
cond	30:24	30:28	7	i < 1000
water	30:24	0:0	8	i
op	30:26	0:0	8	<
water	30:28	0:0	8	1000
forexpr	30:34	30:39	7	i += channels
water	30:34	0:0	8	i
op	30:36	0:0	8	+=
water	30:39	0:0	8	channels
stmts	30:49	41:12	7	
water	30:49	0:0	8	{
decl	31:16	31:73	8	int	idx
op	31:24	0:0	8	=
water	31:26	0:0	8	(
water	31:27	0:0	8	SAMPLE_ARRAY_SIZE
op	31:45	0:0	8	+
water	31:47	0:0	8	x
op	31:49	0:0	8	-
water	31:51	0:0	8	i
water	31:52	0:0	8	)
op	31:54	0:0	8	%
water	31:56	0:0	8	SAMPLE_ARRAY_SIZE
decl	32:16	32:44	8	int	a
op	32:22	0:0	8	=
water	32:24	0:0	8	s
op	32:25	0:0	8	->
water	32:27	0:0	8	sample_array
op	32:39	0:0	8	[
water	32:40	0:0	8	idx
op	32:43	0:0	8	]
decl	33:16	33:81	8	int	b
op	33:22	0:0	8	=
water	33:24	0:0	8	s
op	33:25	0:0	8	->
water	33:27	0:0	8	sample_array
op	33:39	0:0	8	[
water	33:40	0:0	8	(
water	33:41	0:0	8	idx
op	33:45	0:0	8	+
water	33:47	0:0	8	4
op	33:49	0:0	8	*
water	33:51	0:0	8	channels
water	33:59	0:0	8	)
op	33:61	0:0	8	%
water	33:63	0:0	8	SAMPLE_ARRAY_SIZE
op	33:80	0:0	8	]
decl	34:16	34:81	8	int	c
op	34:22	0:0	8	=
water	34:24	0:0	8	s
op	34:25	0:0	8	->
water	34:27	0:0	8	sample_array
op	34:39	0:0	8	[
water	34:40	0:0	8	(
water	34:41	0:0	8	idx
op	34:45	0:0	8	+
water	34:47	0:0	8	5
op	34:49	0:0	8	*
water	34:51	0:0	8	channels
water	34:59	0:0	8	)
op	34:61	0:0	8	%
water	34:63	0:0	8	SAMPLE_ARRAY_SIZE
op	34:80	0:0	8	]
decl	35:16	35:81	8	int	d
op	35:22	0:0	8	=
water	35:24	0:0	8	s
op	35:25	0:0	8	->
water	35:27	0:0	8	sample_array
op	35:39	0:0	8	[
water	35:40	0:0	8	(
water	35:41	0:0	8	idx
op	35:45	0:0	8	+
water	35:47	0:0	8	9
op	35:49	0:0	8	*
water	35:51	0:0	8	channels
water	35:59	0:0	8	)
op	35:61	0:0	8	%
water	35:63	0:0	8	SAMPLE_ARRAY_SIZE
op	35:80	0:0	8	]
decl	36:16	36:33	8	int	score
op	36:26	0:0	8	=
water	36:28	0:0	8	a
op	36:30	0:0	8	-
water	36:32	0:0	8	d
if	37:16	40:16	8	(h < score && ( b ^ c ) < 0)
cond	37:20	37:43	9	h < score && ( b ^ c ) < 0
water	37:20	0:0	10	h
op	37:22	0:0	10	<
water	37:24	0:0	10	score
op	37:30	0:0	10	&&
water	37:33	0:0	10	(
water	37:34	0:0	10	b
op	37:36	0:0	10	^
water	37:38	0:0	10	c
water	37:39	0:0	10	)
op	37:41	0:0	10	<
water	37:43	0:0	10	0
stmts	37:46	40:16	9	
water	37:46	0:0	10	{
water	38:20	0:0	10	h
op	38:22	0:0	10	=
water	38:24	0:0	10	score
water	38:29	0:0	10	;
water	39:20	0:0	10	i_start
op	39:28	0:0	10	=
water	39:30	0:0	10	idx
water	39:33	0:0	10	;
water	40:16	0:0	10	}
water	41:12	0:0	8	}
water	42:8	0:0	6	}
water	43:8	0:0	4	s
op	43:9	0:0	4	->
water	43:11	0:0	4	last_i_start
op	43:24	0:0	4	=
water	43:26	0:0	4	i_start
water	43:33	0:0	4	;
water	44:4	0:0	4	}
else	44:6	46:4	2
stmts	44:11	46:4	3	
water	44:11	0:0	4	{
water	45:8	0:0	4	i_start
op	45:16	0:0	4	=
water	45:18	0:0	4	s
op	45:19	0:0	4	->
water	45:21	0:0	4	last_i_start
water	45:33	0:0	4	;
water	46:4	0:0	4	}
if	47:4	75:4	2	(s -> show_mode == SHOW_MODE_WAVES)
cond	47:8	47:24	3	s -> show_mode == SHOW_MODE_WAVES
water	47:8	0:0	4	s
op	47:9	0:0	4	->
water	47:11	0:0	4	show_mode
op	47:21	0:0	4	==
water	47:24	0:0	4	SHOW_MODE_WAVES
stmts	47:41	75:4	3	
water	47:41	0:0	4	{
call	48:8	48:59	4	SDL_SetRenderDrawColor
arg	48:31	48:39	5	renderer
water	48:31	0:0	6	renderer
arg	48:41	48:44	5	255
water	48:41	0:0	6	255
arg	48:46	48:49	5	255
water	48:46	0:0	6	255
arg	48:51	48:54	5	255
water	48:51	0:0	6	255
arg	48:56	48:59	5	255
water	48:56	0:0	6	255
water	48:60	0:0	4	;
water	50:8	0:0	4	h
op	50:10	0:0	4	=
water	50:12	0:0	4	s
op	50:13	0:0	4	->
water	50:15	0:0	4	height
op	50:22	0:0	4	/
water	50:24	0:0	4	nb_display_channels
water	50:43	0:0	4	;
water	52:8	0:0	4	h2
op	52:11	0:0	4	=
water	52:13	0:0	4	(
water	52:14	0:0	4	h
op	52:16	0:0	4	*
water	52:18	0:0	4	9
water	52:19	0:0	4	)
op	52:21	0:0	4	/
water	52:23	0:0	4	20
water	52:25	0:0	4	;
for	53:8	69:8	4	(ch = 0 ;ch < nb_display_channels;ch ++)
forinit	53:13	53:19	5	ch = 0 ;
water	53:13	0:0	6	ch
op	53:16	0:0	6	=
water	53:18	0:0	6	0
water	53:19	0:0	6	;
cond	53:21	53:26	5	ch < nb_display_channels
water	53:21	0:0	6	ch
op	53:24	0:0	6	<
water	53:26	0:0	6	nb_display_channels
forexpr	53:47	53:49	5	ch ++
water	53:47	0:0	6	ch
op	53:49	0:0	6	++
stmts	53:53	69:8	5	
water	53:53	0:0	6	{
water	54:12	0:0	6	i
op	54:14	0:0	6	=
water	54:16	0:0	6	i_start
op	54:24	0:0	6	+
water	54:26	0:0	6	ch
water	54:28	0:0	6	;
water	55:12	0:0	6	y1
op	55:15	0:0	6	=
water	55:17	0:0	6	s
op	55:18	0:0	6	->
water	55:20	0:0	6	ytop
op	55:25	0:0	6	+
water	55:27	0:0	6	ch
op	55:30	0:0	6	*
water	55:32	0:0	6	h
op	55:34	0:0	6	+
water	55:36	0:0	6	(
water	55:37	0:0	6	h
op	55:39	0:0	6	/
water	55:41	0:0	6	2
water	55:42	0:0	6	)
water	55:43	0:0	6	;
for	56:12	68:12	6	(x = 0 ;x < s -> width;x ++)
forinit	56:17	56:22	7	x = 0 ;
water	56:17	0:0	8	x
op	56:19	0:0	8	=
water	56:21	0:0	8	0
water	56:22	0:0	8	;
cond	56:24	56:31	7	x < s -> width
water	56:24	0:0	8	x
op	56:26	0:0	8	<
water	56:28	0:0	8	s
op	56:29	0:0	8	->
water	56:31	0:0	8	width
forexpr	56:38	56:39	7	x ++
water	56:38	0:0	8	x
op	56:39	0:0	8	++
stmts	56:43	68:12	7	
water	56:43	0:0	8	{
water	57:16	0:0	8	y
op	57:18	0:0	8	=
water	57:20	0:0	8	(
water	57:21	0:0	8	s
op	57:22	0:0	8	->
water	57:24	0:0	8	sample_array
op	57:36	0:0	8	[
water	57:37	0:0	8	i
op	57:38	0:0	8	]
op	57:40	0:0	8	*
water	57:42	0:0	8	h2
water	57:44	0:0	8	)
op	57:46	0:0	8	>>
water	57:49	0:0	8	15
water	57:51	0:0	8	;
if	58:16	61:16	8	(y < 0)
cond	58:20	58:24	9	y < 0
water	58:20	0:0	10	y
op	58:22	0:0	10	<
water	58:24	0:0	10	0
stmts	58:27	61:16	9	
water	58:27	0:0	10	{
water	59:20	0:0	10	y
op	59:22	0:0	10	=
op	59:24	0:0	10	-
water	59:25	0:0	10	y
water	59:26	0:0	10	;
water	60:20	0:0	10	ys
op	60:23	0:0	10	=
water	60:25	0:0	10	y1
op	60:28	0:0	10	-
water	60:30	0:0	10	y
water	60:31	0:0	10	;
water	61:16	0:0	10	}
else	61:18	63:16	8
stmts	61:23	63:16	9	
water	61:23	0:0	10	{
water	62:20	0:0	10	ys
op	62:23	0:0	10	=
water	62:25	0:0	10	y1
water	62:27	0:0	10	;
water	63:16	0:0	10	}
call	64:16	64:53	8	fill_rectangle
arg	64:31	64:43	9	s->xleft+x
water	64:31	0:0	10	s
op	64:32	0:0	10	->
water	64:34	0:0	10	xleft
op	64:40	0:0	10	+
water	64:42	0:0	10	x
arg	64:45	64:47	9	ys
water	64:45	0:0	10	ys
arg	64:49	64:50	9	1
water	64:49	0:0	10	1
arg	64:52	64:53	9	y
water	64:52	0:0	10	y
water	64:54	0:0	8	;
water	65:16	0:0	8	i
op	65:18	0:0	8	+=
water	65:21	0:0	8	channels
water	65:29	0:0	8	;
if	66:16	67:42	8	(i >= SAMPLE_ARRAY_SIZE)
cond	66:20	66:25	9	i >= SAMPLE_ARRAY_SIZE
water	66:20	0:0	10	i
op	66:22	0:0	10	>=
water	66:25	0:0	10	SAMPLE_ARRAY_SIZE
stmts	67:20	67:42	9	
water	67:20	0:0	10	i
op	67:22	0:0	10	-=
water	67:25	0:0	10	SAMPLE_ARRAY_SIZE
water	67:42	0:0	10	;
water	68:12	0:0	8	}
water	69:8	0:0	6	}
call	70:8	70:55	4	SDL_SetRenderDrawColor
arg	70:31	70:39	5	renderer
water	70:31	0:0	6	renderer
arg	70:41	70:42	5	0
water	70:41	0:0	6	0
arg	70:44	70:45	5	0
water	70:44	0:0	6	0
arg	70:47	70:50	5	255
water	70:47	0:0	6	255
arg	70:52	70:55	5	255
water	70:52	0:0	6	255
water	70:56	0:0	4	;
for	71:8	74:8	4	(ch = 1 ;ch < nb_display_channels;ch ++)
forinit	71:13	71:19	5	ch = 1 ;
water	71:13	0:0	6	ch
op	71:16	0:0	6	=
water	71:18	0:0	6	1
water	71:19	0:0	6	;
cond	71:21	71:26	5	ch < nb_display_channels
water	71:21	0:0	6	ch
op	71:24	0:0	6	<
water	71:26	0:0	6	nb_display_channels
forexpr	71:47	71:49	5	ch ++
water	71:47	0:0	6	ch
op	71:49	0:0	6	++
stmts	71:53	74:8	5	
water	71:53	0:0	6	{
water	72:12	0:0	6	y
op	72:14	0:0	6	=
water	72:16	0:0	6	s
op	72:17	0:0	6	->
water	72:19	0:0	6	ytop
op	72:24	0:0	6	+
water	72:26	0:0	6	ch
op	72:29	0:0	6	*
water	72:31	0:0	6	h
water	72:32	0:0	6	;
call	73:12	73:51	6	fill_rectangle
arg	73:27	73:35	7	s->xleft
water	73:27	0:0	8	s
op	73:28	0:0	8	->
water	73:30	0:0	8	xleft
arg	73:37	73:38	7	y
water	73:37	0:0	8	y
arg	73:40	73:48	7	s->width
water	73:40	0:0	8	s
op	73:41	0:0	8	->
water	73:43	0:0	8	width
arg	73:50	73:51	7	1
water	73:50	0:0	8	1
water	73:52	0:0	6	;
water	74:8	0:0	6	}
water	75:4	0:0	4	}
else	75:6	129:4	2
stmts	75:11	129:4	3	
water	75:11	0:0	4	{
if	76:8	77:18	4	(realloc_texture (& s -> vis_texture ,SDL_PIXELFORMAT_ARGB8888 ,s -> width ,s -> height ,SDL_BLENDMODE_NONE ,1 ) < 0)
cond	76:12	76:117	5	realloc_texture (& s -> vis_texture ,SDL_PIXELFORMAT_ARGB8888 ,s -> width ,s -> height ,SDL_BLENDMODE_NONE ,1 ) < 0
call	76:12	76:113	6	realloc_texture
arg	76:28	76:43	7	&s->vis_texture
op	76:28	0:0	8	&
water	76:29	0:0	8	s
op	76:30	0:0	8	->
water	76:32	0:0	8	vis_texture
arg	76:45	76:69	7	SDL_PIXELFORMAT_ARGB8888
water	76:45	0:0	8	SDL_PIXELFORMAT_ARGB8888
arg	76:71	76:79	7	s->width
water	76:71	0:0	8	s
op	76:72	0:0	8	->
water	76:74	0:0	8	width
arg	76:81	76:90	7	s->height
water	76:81	0:0	8	s
op	76:82	0:0	8	->
water	76:84	0:0	8	height
arg	76:92	76:110	7	SDL_BLENDMODE_NONE
water	76:92	0:0	8	SDL_BLENDMODE_NONE
arg	76:112	76:113	7	1
water	76:112	0:0	8	1
op	76:115	0:0	6	<
water	76:117	0:0	6	0
stmts	77:12	77:18	5	
return	77:12	77:18	6	
water	78:8	0:0	4	nb_display_channels
op	78:27	0:0	4	=
call	78:29	78:57	4	FFMIN
arg	78:35	78:54	5	nb_display_channels
water	78:35	0:0	6	nb_display_channels
arg	78:56	78:57	5	2
water	78:56	0:0	6	2
water	78:58	0:0	4	;
if	79:8	85:8	4	(rdft_bits != s -> rdft_bits)
cond	79:12	79:28	5	rdft_bits != s -> rdft_bits
water	79:12	0:0	6	rdft_bits
op	79:22	0:0	6	!=
water	79:25	0:0	6	s
op	79:26	0:0	6	->
water	79:28	0:0	6	rdft_bits
stmts	79:39	85:8	5	
water	79:39	0:0	6	{
call	80:12	80:31	6	av_rdft_end
arg	80:24	80:31	7	s->rdft
water	80:24	0:0	8	s
op	80:25	0:0	8	->
water	80:27	0:0	8	rdft
water	80:32	0:0	6	;
call	81:12	81:32	6	av_free
arg	81:20	81:32	7	s->rdft_data
water	81:20	0:0	8	s
op	81:21	0:0	8	->
water	81:23	0:0	8	rdft_data
water	81:33	0:0	6	;
water	82:12	0:0	6	s
op	82:13	0:0	6	->
water	82:15	0:0	6	rdft
op	82:20	0:0	6	=
call	82:22	82:53	6	av_rdft_init
arg	82:35	82:44	7	rdft_bits
water	82:35	0:0	8	rdft_bits
arg	82:46	82:53	7	DFT_R2C
water	82:46	0:0	8	DFT_R2C
water	82:54	0:0	6	;
water	83:12	0:0	6	s
op	83:13	0:0	6	->
water	83:15	0:0	6	rdft_bits
op	83:25	0:0	6	=
water	83:27	0:0	6	rdft_bits
water	83:36	0:0	6	;
water	84:12	0:0	6	s
op	84:13	0:0	6	->
water	84:15	0:0	6	rdft_data
op	84:25	0:0	6	=
call	84:27	84:76	6	av_malloc_array
arg	84:43	84:50	7	nb_freq
water	84:43	0:0	8	nb_freq
arg	84:52	84:76	7	4*sizeof(*s->rdft_data)
water	84:52	0:0	8	4
op	84:54	0:0	8	*
op	84:55	0:0	8	sizeof
water	84:61	0:0	8	(
op	84:62	0:0	8	*
water	84:63	0:0	8	s
op	84:64	0:0	8	->
water	84:66	0:0	8	rdft_data
water	84:75	0:0	8	)
water	84:77	0:0	6	;
water	85:8	0:0	6	}
if	86:8	89:8	4	(! s -> rdft || ! s -> rdft_data)
cond	86:12	86:28	5	! s -> rdft || ! s -> rdft_data
op	86:12	0:0	6	!
water	86:13	0:0	6	s
op	86:14	0:0	6	->
water	86:16	0:0	6	rdft
op	86:21	0:0	6	||
op	86:24	0:0	6	!
water	86:25	0:0	6	s
op	86:26	0:0	6	->
water	86:28	0:0	6	rdft_data
stmts	86:38	89:8	5	
water	86:38	0:0	6	{
call	87:12	87:106	6	av_log
arg	87:19	87:23	7	NULL
water	87:19	0:0	8	NULL
arg	87:25	87:37	7	AV_LOG_ERROR
water	87:25	0:0	8	AV_LOG_ERROR
arg	87:39	87:106	7	"Failed to allocate buffers for RDFT, switching to waves display\n"
water	87:39	0:0	8	"Failed to allocate buffers for RDFT, switching to waves display\n"
water	87:107	0:0	6	;
water	88:12	0:0	6	s
op	88:13	0:0	6	->
water	88:15	0:0	6	show_mode
op	88:25	0:0	6	=
water	88:27	0:0	6	SHOW_MODE_WAVES
water	88:42	0:0	6	;
water	89:8	0:0	6	}
else	89:10	124:8	4
stmts	89:15	124:8	5	
water	89:15	0:0	6	{
decl	90:12	90:30	6	FFTSample	*data[2]
decl	91:12	91:74	6	SDL_Rect	rect
op	91:26	0:0	6	=
water	91:28	0:0	6	{
op	91:29	0:0	6	.
water	91:30	0:0	6	x
op	91:32	0:0	6	=
water	91:34	0:0	6	s
op	91:35	0:0	6	->
water	91:37	0:0	6	xpos
water	91:41	0:0	6	,
op	91:43	0:0	6	.
water	91:44	0:0	6	y
op	91:46	0:0	6	=
water	91:48	0:0	6	0
water	91:49	0:0	6	,
op	91:51	0:0	6	.
water	91:52	0:0	6	w
op	91:54	0:0	6	=
water	91:56	0:0	6	1
water	91:57	0:0	6	,
op	91:59	0:0	6	.
water	91:60	0:0	6	h
op	91:62	0:0	6	=
water	91:64	0:0	6	s
op	91:65	0:0	6	->
water	91:67	0:0	6	height
water	91:73	0:0	6	}
decl	92:12	92:28	6	uint32_t	*pixels
decl	93:12	93:21	6	int	pitch
for	94:12	105:12	6	(ch = 0 ;ch < nb_display_channels;ch ++)
forinit	94:17	94:23	7	ch = 0 ;
water	94:17	0:0	8	ch
op	94:20	0:0	8	=
water	94:22	0:0	8	0
water	94:23	0:0	8	;
cond	94:25	94:30	7	ch < nb_display_channels
water	94:25	0:0	8	ch
op	94:28	0:0	8	<
water	94:30	0:0	8	nb_display_channels
forexpr	94:51	94:53	7	ch ++
water	94:51	0:0	8	ch
op	94:53	0:0	8	++
stmts	94:57	105:12	7	
water	94:57	0:0	8	{
water	95:16	0:0	8	data
op	95:20	0:0	8	[
water	95:21	0:0	8	ch
op	95:23	0:0	8	]
op	95:25	0:0	8	=
water	95:27	0:0	8	s
op	95:28	0:0	8	->
water	95:30	0:0	8	rdft_data
op	95:40	0:0	8	+
water	95:42	0:0	8	2
op	95:44	0:0	8	*
water	95:46	0:0	8	nb_freq
op	95:54	0:0	8	*
water	95:56	0:0	8	ch
water	95:58	0:0	8	;
water	96:16	0:0	8	i
op	96:18	0:0	8	=
water	96:20	0:0	8	i_start
op	96:28	0:0	8	+
water	96:30	0:0	8	ch
water	96:32	0:0	8	;
for	97:16	103:16	8	(x = 0 ;x < 2 * nb_freq;x ++)
forinit	97:21	97:26	9	x = 0 ;
water	97:21	0:0	10	x
op	97:23	0:0	10	=
water	97:25	0:0	10	0
water	97:26	0:0	10	;
cond	97:28	97:36	9	x < 2 * nb_freq
water	97:28	0:0	10	x
op	97:30	0:0	10	<
water	97:32	0:0	10	2
op	97:34	0:0	10	*
water	97:36	0:0	10	nb_freq
forexpr	97:45	97:46	9	x ++
water	97:45	0:0	10	x
op	97:46	0:0	10	++
stmts	97:50	103:16	9	
water	97:50	0:0	10	{
decl	98:20	98:60	10	double	w
op	98:29	0:0	10	=
water	98:31	0:0	10	(
water	98:32	0:0	10	x
op	98:33	0:0	10	-
water	98:34	0:0	10	nb_freq
water	98:41	0:0	10	)
op	98:43	0:0	10	*
water	98:45	0:0	10	(
water	98:46	0:0	10	1
op	98:47	0:0	10	.
water	98:48	0:0	10	0
op	98:50	0:0	10	/
water	98:52	0:0	10	nb_freq
water	98:59	0:0	10	)
water	99:20	0:0	10	data
op	99:24	0:0	10	[
water	99:25	0:0	10	ch
op	99:27	0:0	10	]
op	99:28	0:0	10	[
water	99:29	0:0	10	x
op	99:30	0:0	10	]
op	99:32	0:0	10	=
water	99:34	0:0	10	s
op	99:35	0:0	10	->
water	99:37	0:0	10	sample_array
op	99:49	0:0	10	[
water	99:50	0:0	10	i
op	99:51	0:0	10	]
op	99:53	0:0	10	*
water	99:55	0:0	10	(
water	99:56	0:0	10	1
op	99:57	0:0	10	.
water	99:58	0:0	10	0
op	99:60	0:0	10	-
water	99:62	0:0	10	w
op	99:64	0:0	10	*
water	99:66	0:0	10	w
water	99:67	0:0	10	)
water	99:68	0:0	10	;
water	100:20	0:0	10	i
op	100:22	0:0	10	+=
water	100:25	0:0	10	channels
water	100:33	0:0	10	;
if	101:20	102:46	10	(i >= SAMPLE_ARRAY_SIZE)
cond	101:24	101:29	11	i >= SAMPLE_ARRAY_SIZE
water	101:24	0:0	12	i
op	101:26	0:0	12	>=
water	101:29	0:0	12	SAMPLE_ARRAY_SIZE
stmts	102:24	102:46	11	
water	102:24	0:0	12	i
op	102:26	0:0	12	-=
water	102:29	0:0	12	SAMPLE_ARRAY_SIZE
water	102:46	0:0	12	;
water	103:16	0:0	10	}
call	104:16	104:46	8	av_rdft_calc
arg	104:29	104:36	9	s->rdft
water	104:29	0:0	10	s
op	104:30	0:0	10	->
water	104:32	0:0	10	rdft
arg	104:38	104:46	9	data[ch]
water	104:38	0:0	10	data
op	104:42	0:0	10	[
water	104:43	0:0	10	ch
op	104:45	0:0	10	]
water	104:47	0:0	8	;
water	105:12	0:0	8	}
if	108:12	122:12	6	(!SDL_LockTexture (s -> vis_texture ,& rect ,( void * * ) & pixels ,& pitch ))
cond	108:16	108:80	7	!SDL_LockTexture (s -> vis_texture ,& rect ,( void * * ) & pixels ,& pitch )
op	108:16	0:0	8	!
call	108:17	108:80	8	SDL_LockTexture
arg	108:33	108:47	9	s->vis_texture
water	108:33	0:0	10	s
op	108:34	0:0	10	->
water	108:36	0:0	10	vis_texture
arg	108:49	108:54	9	&rect
op	108:49	0:0	10	&
water	108:50	0:0	10	rect
arg	108:56	108:72	9	(void**)&pixels
water	108:56	0:0	10	(
water	108:57	0:0	10	void
op	108:62	0:0	10	*
op	108:63	0:0	10	*
water	108:64	0:0	10	)
op	108:65	0:0	10	&
water	108:66	0:0	10	pixels
arg	108:74	108:80	9	&pitch
op	108:74	0:0	10	&
water	108:75	0:0	10	pitch
stmts	108:83	122:12	7	
water	108:83	0:0	8	{
water	109:16	0:0	8	pitch
op	109:22	0:0	8	>>=
water	109:26	0:0	8	2
water	109:27	0:0	8	;
water	110:16	0:0	8	pixels
op	110:23	0:0	8	+=
water	110:26	0:0	8	pitch
op	110:32	0:0	8	*
water	110:34	0:0	8	s
op	110:35	0:0	8	->
water	110:37	0:0	8	height
water	110:43	0:0	8	;
for	111:16	120:16	8	(y = 0 ;y < s -> height;y ++)
forinit	111:21	111:26	9	y = 0 ;
water	111:21	0:0	10	y
op	111:23	0:0	10	=
water	111:25	0:0	10	0
water	111:26	0:0	10	;
cond	111:28	111:35	9	y < s -> height
water	111:28	0:0	10	y
op	111:30	0:0	10	<
water	111:32	0:0	10	s
op	111:33	0:0	10	->
water	111:35	0:0	10	height
forexpr	111:43	111:44	9	y ++
water	111:43	0:0	10	y
op	111:44	0:0	10	++
stmts	111:48	120:16	9	
water	111:48	0:0	10	{
decl	112:20	112:48	10	double	w
op	112:29	0:0	10	=
water	112:31	0:0	10	1
op	112:33	0:0	10	/
call	112:35	112:47	11	sqrt
arg	112:40	112:47	12	nb_freq
water	112:40	0:0	13	nb_freq
decl	113:20	113:125	10	int	a
op	113:26	0:0	10	=
call	113:28	113:124	11	sqrt
arg	113:33	113:124	12	w*sqrt(data[0][2*y+0]*data[0][2*y+0]+data[0][2*y+1]*data[0][2*y+1])
water	113:33	0:0	13	w
call	113:35	113:123	13	*sqrt
arg	113:42	113:123	14	data[0][2*y+0]*data[0][2*y+0]+data[0][2*y+1]*data[0][2*y+1]
water	113:42	0:0	15	data
op	113:46	0:0	15	[
water	113:47	0:0	15	0
op	113:48	0:0	15	]
op	113:49	0:0	15	[
water	113:50	0:0	15	2
op	113:52	0:0	15	*
water	113:54	0:0	15	y
op	113:56	0:0	15	+
water	113:58	0:0	15	0
op	113:59	0:0	15	]
op	113:61	0:0	15	*
water	113:63	0:0	15	data
op	113:67	0:0	15	[
water	113:68	0:0	15	0
op	113:69	0:0	15	]
op	113:70	0:0	15	[
water	113:71	0:0	15	2
op	113:73	0:0	15	*
water	113:75	0:0	15	y
op	113:77	0:0	15	+
water	113:79	0:0	15	0
op	113:80	0:0	15	]
op	113:82	0:0	15	+
water	113:84	0:0	15	data
op	113:88	0:0	15	[
water	113:89	0:0	15	0
op	113:90	0:0	15	]
op	113:91	0:0	15	[
water	113:92	0:0	15	2
op	113:94	0:0	15	*
water	113:96	0:0	15	y
op	113:98	0:0	15	+
water	113:100	0:0	15	1
op	113:101	0:0	15	]
op	113:103	0:0	15	*
water	113:105	0:0	15	data
op	113:109	0:0	15	[
water	113:110	0:0	15	0
op	113:111	0:0	15	]
op	113:112	0:0	15	[
water	113:113	0:0	15	2
op	113:115	0:0	15	*
water	113:117	0:0	15	y
op	113:119	0:0	15	+
water	113:121	0:0	15	1
op	113:122	0:0	15	]
decl	114:20	115:59	10	int	b
op	114:26	0:0	10	=
water	114:28	0:0	10	(
water	114:29	0:0	10	nb_display_channels
op	114:49	0:0	10	==
water	114:52	0:0	10	2
water	114:54	0:0	10	)
water	114:56	0:0	10	?
call	114:58	114:112	11	sqrt
arg	114:63	114:112	12	w*hypot(data[1][2*y+0],data[1][2*y+1])
water	114:63	0:0	13	w
call	114:65	114:111	13	*hypot
arg	114:73	114:91	14	data[1][2*y+0]
water	114:73	0:0	15	data
op	114:77	0:0	15	[
water	114:78	0:0	15	1
op	114:79	0:0	15	]
op	114:80	0:0	15	[
water	114:81	0:0	15	2
op	114:83	0:0	15	*
water	114:85	0:0	15	y
op	114:87	0:0	15	+
water	114:89	0:0	15	0
op	114:90	0:0	15	]
arg	114:93	114:111	14	data[1][2*y+1]
water	114:93	0:0	15	data
op	114:97	0:0	15	[
water	114:98	0:0	15	1
op	114:99	0:0	15	]
op	114:100	0:0	15	[
water	114:101	0:0	15	2
op	114:103	0:0	15	*
water	114:105	0:0	15	y
op	114:107	0:0	15	+
water	114:109	0:0	15	1
op	114:110	0:0	15	]
water	115:56	0:0	10	:
water	115:58	0:0	10	a
water	116:20	0:0	10	a
op	116:22	0:0	10	=
call	116:24	116:36	10	FFMIN
arg	116:30	116:31	11	a
water	116:30	0:0	12	a
arg	116:33	116:36	11	255
water	116:33	0:0	12	255
water	116:37	0:0	10	;
water	117:20	0:0	10	b
op	117:22	0:0	10	=
call	117:24	117:36	10	FFMIN
arg	117:30	117:31	11	b
water	117:30	0:0	12	b
arg	117:33	117:36	11	255
water	117:33	0:0	12	255
water	117:37	0:0	10	;
water	118:20	0:0	10	pixels
op	118:27	0:0	10	-=
water	118:30	0:0	10	pitch
water	118:35	0:0	10	;
op	119:20	0:0	10	*
water	119:21	0:0	10	pixels
op	119:28	0:0	10	=
water	119:30	0:0	10	(
water	119:31	0:0	10	a
op	119:33	0:0	10	<<
water	119:36	0:0	10	16
water	119:38	0:0	10	)
op	119:40	0:0	10	+
water	119:42	0:0	10	(
water	119:43	0:0	10	b
op	119:45	0:0	10	<<
water	119:48	0:0	10	8
water	119:49	0:0	10	)
op	119:51	0:0	10	+
water	119:53	0:0	10	(
water	119:54	0:0	10	(
water	119:55	0:0	10	a
op	119:56	0:0	10	+
water	119:57	0:0	10	b
water	119:58	0:0	10	)
op	119:60	0:0	10	>>
water	119:63	0:0	10	1
water	119:64	0:0	10	)
water	119:65	0:0	10	;
water	120:16	0:0	10	}
call	121:16	121:48	8	SDL_UnlockTexture
arg	121:34	121:48	9	s->vis_texture
water	121:34	0:0	10	s
op	121:35	0:0	10	->
water	121:37	0:0	10	vis_texture
water	121:49	0:0	8	;
water	122:12	0:0	8	}
call	123:12	123:63	6	SDL_RenderCopy
arg	123:27	123:35	7	renderer
water	123:27	0:0	8	renderer
arg	123:37	123:51	7	s->vis_texture
water	123:37	0:0	8	s
op	123:38	0:0	8	->
water	123:40	0:0	8	vis_texture
arg	123:53	123:57	7	NULL
water	123:53	0:0	8	NULL
arg	123:59	123:63	7	NULL
water	123:59	0:0	8	NULL
water	123:64	0:0	6	;
water	124:8	0:0	6	}
if	125:8	126:21	4	(! s -> paused)
cond	125:12	125:16	5	! s -> paused
op	125:12	0:0	6	!
water	125:13	0:0	6	s
op	125:14	0:0	6	->
water	125:16	0:0	6	paused
stmts	126:12	126:21	5	
water	126:12	0:0	6	s
op	126:13	0:0	6	->
water	126:15	0:0	6	xpos
op	126:19	0:0	6	++
water	126:21	0:0	6	;
if	127:8	128:29	4	(s -> xpos >= s -> width)
cond	127:12	127:26	5	s -> xpos >= s -> width
water	127:12	0:0	6	s
op	127:13	0:0	6	->
water	127:15	0:0	6	xpos
op	127:20	0:0	6	>=
water	127:23	0:0	6	s
op	127:24	0:0	6	->
water	127:26	0:0	6	width
stmts	128:12	128:29	5	
water	128:12	0:0	6	s
op	128:13	0:0	6	->
water	128:15	0:0	6	xpos
op	128:19	0:0	6	=
water	128:21	0:0	6	s
op	128:22	0:0	6	->
water	128:24	0:0	6	xleft
water	128:29	0:0	6	;
water	129:4	0:0	4	}
