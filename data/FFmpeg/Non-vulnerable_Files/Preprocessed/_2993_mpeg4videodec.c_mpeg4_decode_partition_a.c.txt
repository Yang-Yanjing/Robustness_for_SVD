func	1:0	166:0	0	static int	mpeg4_decode_partition_a
params	1:35	0:0	1	
param	1:36	1:56	2	Mpeg4DecContext *	ctx
stmnts	0:0	165:17	1	
decl	3:4	3:31	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	m
decl	4:4	4:18	2	int	mb_num
op	4:15	0:0	2	=
water	4:17	0:0	2	0
water	5:4	0:0	2	static
water	5:11	0:0	2	const
water	5:17	0:0	2	int8_t
water	5:24	0:0	2	quant_tab
op	5:33	0:0	2	[
water	5:34	0:0	2	4
op	5:35	0:0	2	]
op	5:37	0:0	2	=
water	5:39	0:0	2	{
op	5:41	0:0	2	-
water	5:42	0:0	2	1
water	5:43	0:0	2	,
op	5:45	0:0	2	-
water	5:46	0:0	2	2
water	5:47	0:0	2	,
water	5:49	0:0	2	1
water	5:50	0:0	2	,
water	5:52	0:0	2	2
water	5:54	0:0	2	}
water	5:55	0:0	2	;
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	first_slice_line
op	7:24	0:0	2	=
water	7:26	0:0	2	1
water	7:27	0:0	2	;
for	8:4	164:4	2	(;s -> mb_y < s -> mb_height;s -> mb_y ++)
forinit	8:9	8:9	3	;
water	8:9	0:0	4	;
cond	8:11	8:24	3	s -> mb_y < s -> mb_height
water	8:11	0:0	4	s
op	8:12	0:0	4	->
water	8:14	0:0	4	mb_y
op	8:19	0:0	4	<
water	8:21	0:0	4	s
op	8:22	0:0	4	->
water	8:24	0:0	4	mb_height
forexpr	8:35	8:42	3	s -> mb_y ++
water	8:35	0:0	4	s
op	8:36	0:0	4	->
water	8:38	0:0	4	mb_y
op	8:42	0:0	4	++
stmts	8:46	164:4	3	
water	8:46	0:0	4	{
call	9:8	9:29	4	ff_init_block_index
arg	9:28	9:29	5	s
water	9:28	0:0	6	s
water	9:30	0:0	4	;
for	10:8	162:8	4	(;s -> mb_x < s -> mb_width;s -> mb_x ++)
forinit	10:13	10:13	5	;
water	10:13	0:0	6	;
cond	10:15	10:28	5	s -> mb_x < s -> mb_width
water	10:15	0:0	6	s
op	10:16	0:0	6	->
water	10:18	0:0	6	mb_x
op	10:23	0:0	6	<
water	10:25	0:0	6	s
op	10:26	0:0	6	->
water	10:28	0:0	6	mb_width
forexpr	10:38	10:45	5	s -> mb_x ++
water	10:38	0:0	6	s
op	10:39	0:0	6	->
water	10:41	0:0	6	mb_x
op	10:45	0:0	6	++
stmts	10:49	162:8	5	
water	10:49	0:0	6	{
decl	11:12	11:59	6	const int	xy
op	11:25	0:0	6	=
water	11:27	0:0	6	s
op	11:28	0:0	6	->
water	11:30	0:0	6	mb_x
op	11:35	0:0	6	+
water	11:37	0:0	6	s
op	11:38	0:0	6	->
water	11:40	0:0	6	mb_y
op	11:45	0:0	6	*
water	11:47	0:0	6	s
op	11:48	0:0	6	->
water	11:50	0:0	6	mb_stride
decl	12:12	12:20	6	int	cbpc
decl	13:12	13:23	6	int	dir
op	13:20	0:0	6	=
water	13:22	0:0	6	0
water	14:12	0:0	6	mb_num
op	14:18	0:0	6	++
water	14:20	0:0	6	;
call	15:12	15:35	6	ff_update_block_index
arg	15:34	15:35	7	s
water	15:34	0:0	8	s
water	15:36	0:0	6	;
if	16:12	17:39	6	(s -> mb_x == s -> resync_mb_x && s -> mb_y == s -> resync_mb_y + 1)
cond	16:16	16:73	7	s -> mb_x == s -> resync_mb_x && s -> mb_y == s -> resync_mb_y + 1
water	16:16	0:0	8	s
op	16:17	0:0	8	->
water	16:19	0:0	8	mb_x
op	16:24	0:0	8	==
water	16:27	0:0	8	s
op	16:28	0:0	8	->
water	16:30	0:0	8	resync_mb_x
op	16:42	0:0	8	&&
water	16:45	0:0	8	s
op	16:46	0:0	8	->
water	16:48	0:0	8	mb_y
op	16:53	0:0	8	==
water	16:56	0:0	8	s
op	16:57	0:0	8	->
water	16:59	0:0	8	resync_mb_y
op	16:71	0:0	8	+
water	16:73	0:0	8	1
stmts	17:16	17:39	7	
water	17:16	0:0	8	s
op	17:17	0:0	8	->
water	17:19	0:0	8	first_slice_line
op	17:36	0:0	8	=
water	17:38	0:0	8	0
water	17:39	0:0	8	;
if	18:12	50:12	6	(s -> pict_type == AV_PICTURE_TYPE_I)
cond	18:16	18:32	7	s -> pict_type == AV_PICTURE_TYPE_I
water	18:16	0:0	8	s
op	18:17	0:0	8	->
water	18:19	0:0	8	pict_type
op	18:29	0:0	8	==
water	18:32	0:0	8	AV_PICTURE_TYPE_I
stmts	18:51	50:12	7	
water	18:51	0:0	8	{
decl	19:16	19:21	8	int	i
do	20:16	29:16	8	(cbpc == 8)
cond	29:25	29:33	9	cbpc == 8
water	29:25	0:0	10	cbpc
op	29:30	0:0	10	==
water	29:33	0:0	10	8
stmts	20:19	29:16	9	
water	20:19	0:0	10	{
if	21:20	22:41	10	(show_bits_long (& s -> gb ,19 ) == DC_MARKER)
cond	21:24	21:54	11	show_bits_long (& s -> gb ,19 ) == DC_MARKER
call	21:24	21:49	12	show_bits_long
arg	21:39	21:45	13	&s->gb
op	21:39	0:0	14	&
water	21:40	0:0	14	s
op	21:41	0:0	14	->
water	21:43	0:0	14	gb
arg	21:47	21:49	13	19
water	21:47	0:0	14	19
op	21:51	0:0	12	==
water	21:54	0:0	12	DC_MARKER
stmts	22:24	22:41	11	
return	22:24	22:41	12	mb_num-1
water	22:31	0:0	13	mb_num
op	22:38	0:0	13	-
water	22:40	0:0	13	1
water	23:20	0:0	10	cbpc
op	23:25	0:0	10	=
call	23:27	23:98	10	get_vlc2
arg	23:36	23:42	11	&s->gb
op	23:36	0:0	12	&
water	23:37	0:0	12	s
op	23:38	0:0	12	->
water	23:40	0:0	12	gb
arg	23:44	23:73	11	ff_h263_intra_MCBPC_vlc.table
water	23:44	0:0	12	ff_h263_intra_MCBPC_vlc
op	23:67	0:0	12	.
water	23:68	0:0	12	table
arg	23:75	23:95	11	INTRA_MCBPC_VLC_BITS
water	23:75	0:0	12	INTRA_MCBPC_VLC_BITS
arg	23:97	23:98	11	2
water	23:97	0:0	12	2
water	23:99	0:0	10	;
if	24:20	28:20	10	(cbpc < 0)
cond	24:24	24:31	11	cbpc < 0
water	24:24	0:0	12	cbpc
op	24:29	0:0	12	<
water	24:31	0:0	12	0
stmts	24:34	28:20	11	
water	24:34	0:0	12	{
call	25:24	26:77	12	av_log
arg	25:31	25:39	13	s->avctx
water	25:31	0:0	14	s
op	25:32	0:0	14	->
water	25:34	0:0	14	avctx
arg	25:41	25:53	13	AV_LOG_ERROR
water	25:41	0:0	14	AV_LOG_ERROR
arg	26:31	26:59	13	"mcbpc corrupted at %d %d\n"
water	26:31	0:0	14	"mcbpc corrupted at %d %d\n"
arg	26:61	26:68	13	s->mb_x
water	26:61	0:0	14	s
op	26:62	0:0	14	->
water	26:64	0:0	14	mb_x
arg	26:70	26:77	13	s->mb_y
water	26:70	0:0	14	s
op	26:71	0:0	14	->
water	26:73	0:0	14	mb_y
water	26:78	0:0	12	;
return	27:24	27:33	12	-1
op	27:31	0:0	13	-
water	27:32	0:0	13	1
water	28:20	0:0	12	}
water	29:16	0:0	10	}
water	29:35	0:0	8	;
water	30:16	0:0	8	s
op	30:17	0:0	8	->
water	30:19	0:0	8	cbp_table
op	30:28	0:0	8	[
water	30:29	0:0	8	xy
op	30:31	0:0	8	]
op	30:47	0:0	8	=
water	30:49	0:0	8	cbpc
op	30:54	0:0	8	&
water	30:56	0:0	8	3
water	30:57	0:0	8	;
water	31:16	0:0	8	s
op	31:17	0:0	8	->
water	31:19	0:0	8	current_picture
op	31:34	0:0	8	.
water	31:35	0:0	8	mb_type
op	31:42	0:0	8	[
water	31:43	0:0	8	xy
op	31:45	0:0	8	]
op	31:47	0:0	8	=
water	31:49	0:0	8	MB_TYPE_INTRA
water	31:62	0:0	8	;
water	32:16	0:0	8	s
op	32:17	0:0	8	->
water	32:19	0:0	8	mb_intra
op	32:47	0:0	8	=
water	32:49	0:0	8	1
water	32:50	0:0	8	;
if	33:16	34:80	8	(cbpc & 4)
cond	33:20	33:27	9	cbpc & 4
water	33:20	0:0	10	cbpc
op	33:25	0:0	10	&
water	33:27	0:0	10	4
stmts	34:20	34:80	9	
call	34:20	34:79	10	ff_set_qscale
arg	34:34	34:35	11	s
water	34:34	0:0	12	s
arg	34:37	34:79	11	s->qscale+quant_tab[get_bits(&s->gb,2)]
water	34:37	0:0	12	s
op	34:38	0:0	12	->
water	34:40	0:0	12	qscale
op	34:47	0:0	12	+
water	34:49	0:0	12	quant_tab
op	34:58	0:0	12	[
call	34:59	34:77	12	get_bits
arg	34:68	34:74	13	&s->gb
op	34:68	0:0	14	&
water	34:69	0:0	14	s
op	34:70	0:0	14	->
water	34:72	0:0	14	gb
arg	34:76	34:77	13	2
water	34:76	0:0	14	2
op	34:78	0:0	12	]
water	34:80	0:0	10	;
water	35:16	0:0	8	s
op	35:17	0:0	8	->
water	35:19	0:0	8	current_picture
op	35:34	0:0	8	.
water	35:35	0:0	8	qscale_table
op	35:47	0:0	8	[
water	35:48	0:0	8	xy
op	35:50	0:0	8	]
op	35:52	0:0	8	=
water	35:54	0:0	8	s
op	35:55	0:0	8	->
water	35:57	0:0	8	qscale
water	35:63	0:0	8	;
water	36:16	0:0	8	s
op	36:17	0:0	8	->
water	36:19	0:0	8	mbintra_table
op	36:32	0:0	8	[
water	36:33	0:0	8	xy
op	36:35	0:0	8	]
op	36:37	0:0	8	=
water	36:39	0:0	8	1
water	36:40	0:0	8	;
for	37:16	48:16	8	(i = 0 ;i < 6;i ++)
forinit	37:21	37:26	9	i = 0 ;
water	37:21	0:0	10	i
op	37:23	0:0	10	=
water	37:25	0:0	10	0
water	37:26	0:0	10	;
cond	37:28	37:32	9	i < 6
water	37:28	0:0	10	i
op	37:30	0:0	10	<
water	37:32	0:0	10	6
forexpr	37:35	37:36	9	i ++
water	37:35	0:0	10	i
op	37:36	0:0	10	++
stmts	37:40	48:16	9	
water	37:40	0:0	10	{
decl	38:20	38:35	10	int	dc_pred_dir
decl	39:20	39:64	10	int	dc
op	39:27	0:0	10	=
call	39:29	39:63	11	mpeg4_decode_dc
arg	39:45	39:46	12	s
water	39:45	0:0	13	s
arg	39:48	39:49	12	i
water	39:48	0:0	13	i
arg	39:51	39:63	12	&dc_pred_dir
op	39:51	0:0	13	&
water	39:52	0:0	13	dc_pred_dir
if	40:20	44:20	10	(dc < 0)
cond	40:24	40:29	11	dc < 0
water	40:24	0:0	12	dc
op	40:27	0:0	12	<
water	40:29	0:0	12	0
stmts	40:32	44:20	11	
water	40:32	0:0	12	{
call	41:24	42:74	12	av_log
arg	41:31	41:39	13	s->avctx
water	41:31	0:0	14	s
op	41:32	0:0	14	->
water	41:34	0:0	14	avctx
arg	41:41	41:53	13	AV_LOG_ERROR
water	41:41	0:0	14	AV_LOG_ERROR
arg	42:31	42:56	13	"DC corrupted at %d %d\n"
water	42:31	0:0	14	"DC corrupted at %d %d\n"
arg	42:58	42:65	13	s->mb_x
water	42:58	0:0	14	s
op	42:59	0:0	14	->
water	42:61	0:0	14	mb_x
arg	42:67	42:74	13	s->mb_y
water	42:67	0:0	14	s
op	42:68	0:0	14	->
water	42:70	0:0	14	mb_y
water	42:75	0:0	12	;
return	43:24	43:33	12	-1
op	43:31	0:0	13	-
water	43:32	0:0	13	1
water	44:20	0:0	12	}
water	45:20	0:0	10	dir
op	45:24	0:0	10	<<=
water	45:28	0:0	10	1
water	45:29	0:0	10	;
if	46:20	47:32	10	(dc_pred_dir)
cond	46:24	46:24	11	dc_pred_dir
water	46:24	0:0	12	dc_pred_dir
stmts	47:24	47:32	11	
water	47:24	0:0	12	dir
op	47:28	0:0	12	|=
water	47:31	0:0	12	1
water	47:32	0:0	12	;
water	48:16	0:0	10	}
water	49:16	0:0	8	s
op	49:17	0:0	8	->
water	49:19	0:0	8	pred_dir_table
op	49:33	0:0	8	[
water	49:34	0:0	8	xy
op	49:36	0:0	8	]
op	49:38	0:0	8	=
water	49:40	0:0	8	dir
water	49:43	0:0	8	;
water	50:12	0:0	8	}
else	50:14	161:12	6
stmts	50:19	161:12	7	
water	50:19	0:0	8	{
decl	51:16	51:48	8	int	mx
water	51:22	0:0	8	,
decl	51:16	51:48	8	int	my
water	51:26	0:0	8	,
decl	51:16	51:48	8	int	pred_x
water	51:34	0:0	8	,
decl	51:16	51:48	8	int	pred_y
water	51:42	0:0	8	,
decl	51:16	51:48	8	int	bits
water	52:16	0:0	8	int16_t
op	52:24	0:0	8	*
water	52:25	0:0	8	const
water	52:31	0:0	8	mot_val
op	52:39	0:0	8	=
water	52:41	0:0	8	s
op	52:42	0:0	8	->
water	52:44	0:0	8	current_picture
op	52:59	0:0	8	.
water	52:60	0:0	8	motion_val
op	52:70	0:0	8	[
water	52:71	0:0	8	0
op	52:72	0:0	8	]
op	52:73	0:0	8	[
water	52:74	0:0	8	s
op	52:75	0:0	8	->
water	52:77	0:0	8	block_index
op	52:88	0:0	8	[
water	52:89	0:0	8	0
op	52:90	0:0	8	]
op	52:91	0:0	8	]
water	52:92	0:0	8	;
decl	53:16	53:57	8	const int	stride
op	53:39	0:0	8	=
water	53:41	0:0	8	s
op	53:42	0:0	8	->
water	53:44	0:0	8	b8_stride
op	53:54	0:0	8	*
water	53:56	0:0	8	2
label	54:0	54:9	8	try_again :
water	55:16	0:0	8	bits
op	55:21	0:0	8	=
call	55:23	55:43	8	show_bits
arg	55:33	55:39	9	&s->gb
op	55:33	0:0	10	&
water	55:34	0:0	10	s
op	55:35	0:0	10	->
water	55:37	0:0	10	gb
arg	55:41	55:43	9	17
water	55:41	0:0	10	17
water	55:44	0:0	8	;
if	56:16	57:37	8	(bits == MOTION_MARKER)
cond	56:20	56:28	9	bits == MOTION_MARKER
water	56:20	0:0	10	bits
op	56:25	0:0	10	==
water	56:28	0:0	10	MOTION_MARKER
stmts	57:20	57:37	9	
return	57:20	57:37	10	mb_num-1
water	57:27	0:0	11	mb_num
op	57:34	0:0	11	-
water	57:36	0:0	11	1
call	58:16	58:33	8	skip_bits1
arg	58:27	58:33	9	&s->gb
op	58:27	0:0	10	&
water	58:28	0:0	10	s
op	58:29	0:0	10	->
water	58:31	0:0	10	gb
water	58:34	0:0	8	;
if	59:16	86:16	8	(bits & 0 x10000)
cond	59:20	59:28	9	bits & 0 x10000
water	59:20	0:0	10	bits
op	59:25	0:0	10	&
water	59:27	0:0	10	0
water	59:28	0:0	10	x10000
stmts	59:36	86:16	9	
water	59:36	0:0	10	{
if	61:20	69:20	10	(s -> pict_type == AV_PICTURE_TYPE_S && ctx -> vol_sprite_usage == GMC_SPRITE)
cond	61:24	62:49	11	s -> pict_type == AV_PICTURE_TYPE_S && ctx -> vol_sprite_usage == GMC_SPRITE
water	61:24	0:0	12	s
op	61:25	0:0	12	->
water	61:27	0:0	12	pict_type
op	61:37	0:0	12	==
water	61:40	0:0	12	AV_PICTURE_TYPE_S
op	61:58	0:0	12	&&
water	62:24	0:0	12	ctx
op	62:27	0:0	12	->
water	62:29	0:0	12	vol_sprite_usage
op	62:46	0:0	12	==
water	62:49	0:0	12	GMC_SPRITE
stmts	62:61	69:20	11	
water	62:61	0:0	12	{
water	63:24	0:0	12	s
op	63:25	0:0	12	->
water	63:27	0:0	12	current_picture
op	63:42	0:0	12	.
water	63:43	0:0	12	mb_type
op	63:50	0:0	12	[
water	63:51	0:0	12	xy
op	63:53	0:0	12	]
op	63:55	0:0	12	=
water	63:57	0:0	12	MB_TYPE_SKIP
op	63:71	0:0	12	|
water	64:57	0:0	12	MB_TYPE_16x16
op	64:71	0:0	12	|
water	65:57	0:0	12	MB_TYPE_GMC
op	65:71	0:0	12	|
water	66:57	0:0	12	MB_TYPE_L0
water	66:67	0:0	12	;
water	67:24	0:0	12	mx
op	67:27	0:0	12	=
call	67:29	67:43	12	get_amv
arg	67:37	67:40	13	ctx
water	67:37	0:0	14	ctx
arg	67:42	67:43	13	0
water	67:42	0:0	14	0
water	67:44	0:0	12	;
water	68:24	0:0	12	my
op	68:27	0:0	12	=
call	68:29	68:43	12	get_amv
arg	68:37	68:40	13	ctx
water	68:37	0:0	14	ctx
arg	68:42	68:43	13	1
water	68:42	0:0	14	1
water	68:44	0:0	12	;
water	69:20	0:0	12	}
else	69:22	74:20	10
stmts	69:27	74:20	11	
water	69:27	0:0	12	{
water	70:24	0:0	12	s
op	70:25	0:0	12	->
water	70:27	0:0	12	current_picture
op	70:42	0:0	12	.
water	70:43	0:0	12	mb_type
op	70:50	0:0	12	[
water	70:51	0:0	12	xy
op	70:53	0:0	12	]
op	70:55	0:0	12	=
water	70:57	0:0	12	MB_TYPE_SKIP
op	70:71	0:0	12	|
water	71:57	0:0	12	MB_TYPE_16x16
op	71:71	0:0	12	|
water	72:57	0:0	12	MB_TYPE_L0
water	72:67	0:0	12	;
water	73:24	0:0	12	mx
op	73:27	0:0	12	=
water	73:29	0:0	12	my
op	73:32	0:0	12	=
water	73:34	0:0	12	0
water	73:35	0:0	12	;
water	74:20	0:0	12	}
water	75:20	0:0	10	mot_val
op	75:27	0:0	10	[
water	75:28	0:0	10	0
op	75:29	0:0	10	]
op	75:40	0:0	10	=
water	76:20	0:0	10	mot_val
op	76:27	0:0	10	[
water	76:28	0:0	10	2
op	76:29	0:0	10	]
op	76:40	0:0	10	=
water	77:20	0:0	10	mot_val
op	77:27	0:0	10	[
water	77:28	0:0	10	0
op	77:30	0:0	10	+
water	77:32	0:0	10	stride
op	77:38	0:0	10	]
op	77:40	0:0	10	=
water	78:20	0:0	10	mot_val
op	78:27	0:0	10	[
water	78:28	0:0	10	2
op	78:30	0:0	10	+
water	78:32	0:0	10	stride
op	78:38	0:0	10	]
op	78:40	0:0	10	=
water	78:42	0:0	10	mx
water	78:44	0:0	10	;
water	79:20	0:0	10	mot_val
op	79:27	0:0	10	[
water	79:28	0:0	10	1
op	79:29	0:0	10	]
op	79:40	0:0	10	=
water	80:20	0:0	10	mot_val
op	80:27	0:0	10	[
water	80:28	0:0	10	3
op	80:29	0:0	10	]
op	80:40	0:0	10	=
water	81:20	0:0	10	mot_val
op	81:27	0:0	10	[
water	81:28	0:0	10	1
op	81:30	0:0	10	+
water	81:32	0:0	10	stride
op	81:38	0:0	10	]
op	81:40	0:0	10	=
water	82:20	0:0	10	mot_val
op	82:27	0:0	10	[
water	82:28	0:0	10	3
op	82:30	0:0	10	+
water	82:32	0:0	10	stride
op	82:38	0:0	10	]
op	82:40	0:0	10	=
water	82:42	0:0	10	my
water	82:44	0:0	10	;
if	83:20	84:55	10	(s -> mbintra_table [ xy ])
cond	83:24	83:43	11	s -> mbintra_table [ xy ]
water	83:24	0:0	12	s
op	83:25	0:0	12	->
water	83:27	0:0	12	mbintra_table
op	83:40	0:0	12	[
water	83:41	0:0	12	xy
op	83:43	0:0	12	]
stmts	84:24	84:55	11	
call	84:24	84:54	12	ff_clean_intra_table_entries
arg	84:53	84:54	13	s
water	84:53	0:0	14	s
water	84:55	0:0	12	;
continue	85:20	85:28	10	
water	86:16	0:0	10	}
water	87:16	0:0	8	cbpc
op	87:21	0:0	8	=
call	87:23	87:94	8	get_vlc2
arg	87:32	87:38	9	&s->gb
op	87:32	0:0	10	&
water	87:33	0:0	10	s
op	87:34	0:0	10	->
water	87:36	0:0	10	gb
arg	87:40	87:69	9	ff_h263_inter_MCBPC_vlc.table
water	87:40	0:0	10	ff_h263_inter_MCBPC_vlc
op	87:63	0:0	10	.
water	87:64	0:0	10	table
arg	87:71	87:91	9	INTER_MCBPC_VLC_BITS
water	87:71	0:0	10	INTER_MCBPC_VLC_BITS
arg	87:93	87:94	9	2
water	87:93	0:0	10	2
water	87:95	0:0	8	;
if	88:16	92:16	8	(cbpc < 0)
cond	88:20	88:27	9	cbpc < 0
water	88:20	0:0	10	cbpc
op	88:25	0:0	10	<
water	88:27	0:0	10	0
stmts	88:30	92:16	9	
water	88:30	0:0	10	{
call	89:20	90:73	10	av_log
arg	89:27	89:35	11	s->avctx
water	89:27	0:0	12	s
op	89:28	0:0	12	->
water	89:30	0:0	12	avctx
arg	89:37	89:49	11	AV_LOG_ERROR
water	89:37	0:0	12	AV_LOG_ERROR
arg	90:27	90:55	11	"mcbpc corrupted at %d %d\n"
water	90:27	0:0	12	"mcbpc corrupted at %d %d\n"
arg	90:57	90:64	11	s->mb_x
water	90:57	0:0	12	s
op	90:58	0:0	12	->
water	90:60	0:0	12	mb_x
arg	90:66	90:73	11	s->mb_y
water	90:66	0:0	12	s
op	90:67	0:0	12	->
water	90:69	0:0	12	mb_y
water	90:74	0:0	10	;
return	91:20	91:29	10	-1
op	91:27	0:0	11	-
water	91:28	0:0	11	1
water	92:16	0:0	10	}
if	93:16	94:34	8	(cbpc == 20)
cond	93:20	93:28	9	cbpc == 20
water	93:20	0:0	10	cbpc
op	93:25	0:0	10	==
water	93:28	0:0	10	20
stmts	94:20	94:34	9	
goto	94:20	94:34	10	try_again
water	94:25	0:0	11	try_again
water	95:16	0:0	8	s
op	95:17	0:0	8	->
water	95:19	0:0	8	cbp_table
op	95:28	0:0	8	[
water	95:29	0:0	8	xy
op	95:31	0:0	8	]
op	95:33	0:0	8	=
water	95:35	0:0	8	cbpc
op	95:40	0:0	8	&
water	95:42	0:0	8	(
water	95:43	0:0	8	8
op	95:45	0:0	8	+
water	95:47	0:0	8	3
water	95:48	0:0	8	)
water	95:49	0:0	8	;
water	96:16	0:0	8	s
op	96:17	0:0	8	->
water	96:19	0:0	8	mb_intra
op	96:28	0:0	8	=
water	96:30	0:0	8	(
water	96:31	0:0	8	(
water	96:32	0:0	8	cbpc
op	96:37	0:0	8	&
water	96:39	0:0	8	4
water	96:40	0:0	8	)
op	96:42	0:0	8	!=
water	96:45	0:0	8	0
water	96:46	0:0	8	)
water	96:47	0:0	8	;
if	97:16	108:16	8	(s -> mb_intra)
cond	97:20	97:23	9	s -> mb_intra
water	97:20	0:0	10	s
op	97:21	0:0	10	->
water	97:23	0:0	10	mb_intra
stmts	97:33	108:16	9	
water	97:33	0:0	10	{
water	98:20	0:0	10	s
op	98:21	0:0	10	->
water	98:23	0:0	10	current_picture
op	98:38	0:0	10	.
water	98:39	0:0	10	mb_type
op	98:46	0:0	10	[
water	98:47	0:0	10	xy
op	98:49	0:0	10	]
op	98:51	0:0	10	=
water	98:53	0:0	10	MB_TYPE_INTRA
water	98:66	0:0	10	;
water	99:20	0:0	10	s
op	99:21	0:0	10	->
water	99:23	0:0	10	mbintra_table
op	99:36	0:0	10	[
water	99:37	0:0	10	xy
op	99:39	0:0	10	]
op	99:41	0:0	10	=
water	99:43	0:0	10	1
water	99:44	0:0	10	;
water	100:20	0:0	10	mot_val
op	100:27	0:0	10	[
water	100:28	0:0	10	0
op	100:29	0:0	10	]
op	100:40	0:0	10	=
water	101:20	0:0	10	mot_val
op	101:27	0:0	10	[
water	101:28	0:0	10	2
op	101:29	0:0	10	]
op	101:40	0:0	10	=
water	102:20	0:0	10	mot_val
op	102:27	0:0	10	[
water	102:28	0:0	10	0
op	102:30	0:0	10	+
water	102:32	0:0	10	stride
op	102:38	0:0	10	]
op	102:40	0:0	10	=
water	103:20	0:0	10	mot_val
op	103:27	0:0	10	[
water	103:28	0:0	10	2
op	103:30	0:0	10	+
water	103:32	0:0	10	stride
op	103:38	0:0	10	]
op	103:40	0:0	10	=
water	103:42	0:0	10	0
water	103:43	0:0	10	;
water	104:20	0:0	10	mot_val
op	104:27	0:0	10	[
water	104:28	0:0	10	1
op	104:29	0:0	10	]
op	104:40	0:0	10	=
water	105:20	0:0	10	mot_val
op	105:27	0:0	10	[
water	105:28	0:0	10	3
op	105:29	0:0	10	]
op	105:40	0:0	10	=
water	106:20	0:0	10	mot_val
op	106:27	0:0	10	[
water	106:28	0:0	10	1
op	106:30	0:0	10	+
water	106:32	0:0	10	stride
op	106:38	0:0	10	]
op	106:40	0:0	10	=
water	107:20	0:0	10	mot_val
op	107:27	0:0	10	[
water	107:28	0:0	10	3
op	107:30	0:0	10	+
water	107:32	0:0	10	stride
op	107:38	0:0	10	]
op	107:40	0:0	10	=
water	107:42	0:0	10	0
water	107:43	0:0	10	;
water	108:16	0:0	10	}
else	108:18	160:16	8
stmts	108:23	160:16	9	
water	108:23	0:0	10	{
if	109:20	110:55	10	(s -> mbintra_table [ xy ])
cond	109:24	109:43	11	s -> mbintra_table [ xy ]
water	109:24	0:0	12	s
op	109:25	0:0	12	->
water	109:27	0:0	12	mbintra_table
op	109:40	0:0	12	[
water	109:41	0:0	12	xy
op	109:43	0:0	12	]
stmts	110:24	110:55	11	
call	110:24	110:54	12	ff_clean_intra_table_entries
arg	110:53	110:54	13	s
water	110:53	0:0	14	s
water	110:55	0:0	12	;
if	111:20	114:52	10	(s -> pict_type == AV_PICTURE_TYPE_S && ctx -> vol_sprite_usage == GMC_SPRITE && ( cbpc & 16 ) == 0)
cond	111:24	113:39	11	s -> pict_type == AV_PICTURE_TYPE_S && ctx -> vol_sprite_usage == GMC_SPRITE && ( cbpc & 16 ) == 0
water	111:24	0:0	12	s
op	111:25	0:0	12	->
water	111:27	0:0	12	pict_type
op	111:37	0:0	12	==
water	111:40	0:0	12	AV_PICTURE_TYPE_S
op	111:58	0:0	12	&&
water	112:24	0:0	12	ctx
op	112:27	0:0	12	->
water	112:29	0:0	12	vol_sprite_usage
op	112:46	0:0	12	==
water	112:49	0:0	12	GMC_SPRITE
op	112:60	0:0	12	&&
water	113:24	0:0	12	(
water	113:25	0:0	12	cbpc
op	113:30	0:0	12	&
water	113:32	0:0	12	16
water	113:34	0:0	12	)
op	113:36	0:0	12	==
water	113:39	0:0	12	0
stmts	114:24	114:52	11	
water	114:24	0:0	12	s
op	114:25	0:0	12	->
water	114:27	0:0	12	mcsel
op	114:33	0:0	12	=
call	114:35	114:51	12	get_bits1
arg	114:45	114:51	13	&s->gb
op	114:45	0:0	14	&
water	114:46	0:0	14	s
op	114:47	0:0	14	->
water	114:49	0:0	14	gb
water	114:52	0:0	12	;
else	115:20	116:36	10
stmts	116:24	116:36	11	
water	116:24	0:0	12	s
op	116:25	0:0	12	->
water	116:27	0:0	12	mcsel
op	116:33	0:0	12	=
water	116:35	0:0	12	0
water	116:36	0:0	12	;
if	117:20	144:20	10	(( cbpc & 16 ) == 0)
cond	117:24	117:39	11	( cbpc & 16 ) == 0
water	117:24	0:0	12	(
water	117:25	0:0	12	cbpc
op	117:30	0:0	12	&
water	117:32	0:0	12	16
water	117:34	0:0	12	)
op	117:36	0:0	12	==
water	117:39	0:0	12	0
stmts	117:42	144:20	11	
water	117:42	0:0	12	{
call	119:24	119:69	12	ff_h263_pred_motion
arg	119:44	119:45	13	s
water	119:44	0:0	14	s
arg	119:47	119:48	13	0
water	119:47	0:0	14	0
arg	119:50	119:51	13	0
water	119:50	0:0	14	0
arg	119:53	119:60	13	&pred_x
op	119:53	0:0	14	&
water	119:54	0:0	14	pred_x
arg	119:62	119:69	13	&pred_y
op	119:62	0:0	14	&
water	119:63	0:0	14	pred_y
water	119:70	0:0	12	;
if	120:24	129:24	12	(! s -> mcsel)
cond	120:28	120:32	13	! s -> mcsel
op	120:28	0:0	14	!
water	120:29	0:0	14	s
op	120:30	0:0	14	->
water	120:32	0:0	14	mcsel
stmts	120:39	129:24	13	
water	120:39	0:0	14	{
water	121:28	0:0	14	mx
op	121:31	0:0	14	=
call	121:33	121:75	14	ff_h263_decode_motion
arg	121:55	121:56	15	s
water	121:55	0:0	16	s
arg	121:58	121:64	15	pred_x
water	121:58	0:0	16	pred_x
arg	121:66	121:75	15	s->f_code
water	121:66	0:0	16	s
op	121:67	0:0	16	->
water	121:69	0:0	16	f_code
water	121:76	0:0	14	;
if	122:28	123:41	14	(mx >= 0 xffff)
cond	122:32	122:39	15	mx >= 0 xffff
water	122:32	0:0	16	mx
op	122:35	0:0	16	>=
water	122:38	0:0	16	0
water	122:39	0:0	16	xffff
stmts	123:32	123:41	15	
return	123:32	123:41	16	-1
op	123:39	0:0	17	-
water	123:40	0:0	17	1
water	124:28	0:0	14	my
op	124:31	0:0	14	=
call	124:33	124:75	14	ff_h263_decode_motion
arg	124:55	124:56	15	s
water	124:55	0:0	16	s
arg	124:58	124:64	15	pred_y
water	124:58	0:0	16	pred_y
arg	124:66	124:75	15	s->f_code
water	124:66	0:0	16	s
op	124:67	0:0	16	->
water	124:69	0:0	16	f_code
water	124:76	0:0	14	;
if	125:28	126:41	14	(my >= 0 xffff)
cond	125:32	125:39	15	my >= 0 xffff
water	125:32	0:0	16	my
op	125:35	0:0	16	>=
water	125:38	0:0	16	0
water	125:39	0:0	16	xffff
stmts	126:32	126:41	15	
return	126:32	126:41	16	-1
op	126:39	0:0	17	-
water	126:40	0:0	17	1
water	127:28	0:0	14	s
op	127:29	0:0	14	->
water	127:31	0:0	14	current_picture
op	127:46	0:0	14	.
water	127:47	0:0	14	mb_type
op	127:54	0:0	14	[
water	127:55	0:0	14	xy
op	127:57	0:0	14	]
op	127:59	0:0	14	=
water	127:61	0:0	14	MB_TYPE_16x16
op	127:75	0:0	14	|
water	128:61	0:0	14	MB_TYPE_L0
water	128:71	0:0	14	;
water	129:24	0:0	14	}
else	129:26	135:24	12
stmts	129:31	135:24	13	
water	129:31	0:0	14	{
water	130:28	0:0	14	mx
op	130:31	0:0	14	=
call	130:33	130:47	14	get_amv
arg	130:41	130:44	15	ctx
water	130:41	0:0	16	ctx
arg	130:46	130:47	15	0
water	130:46	0:0	16	0
water	130:48	0:0	14	;
water	131:28	0:0	14	my
op	131:31	0:0	14	=
call	131:33	131:47	14	get_amv
arg	131:41	131:44	15	ctx
water	131:41	0:0	16	ctx
arg	131:46	131:47	15	1
water	131:46	0:0	16	1
water	131:48	0:0	14	;
water	132:28	0:0	14	s
op	132:29	0:0	14	->
water	132:31	0:0	14	current_picture
op	132:46	0:0	14	.
water	132:47	0:0	14	mb_type
op	132:54	0:0	14	[
water	132:55	0:0	14	xy
op	132:57	0:0	14	]
op	132:59	0:0	14	=
water	132:61	0:0	14	MB_TYPE_16x16
op	132:75	0:0	14	|
water	133:61	0:0	14	MB_TYPE_GMC
op	133:75	0:0	14	|
water	134:61	0:0	14	MB_TYPE_L0
water	134:71	0:0	14	;
water	135:24	0:0	14	}
water	136:24	0:0	12	mot_val
op	136:31	0:0	12	[
water	136:32	0:0	12	0
op	136:33	0:0	12	]
op	136:44	0:0	12	=
water	137:24	0:0	12	mot_val
op	137:31	0:0	12	[
water	137:32	0:0	12	2
op	137:33	0:0	12	]
op	137:44	0:0	12	=
water	138:24	0:0	12	mot_val
op	138:31	0:0	12	[
water	138:32	0:0	12	0
op	138:34	0:0	12	+
water	138:36	0:0	12	stride
op	138:42	0:0	12	]
op	138:44	0:0	12	=
water	139:24	0:0	12	mot_val
op	139:31	0:0	12	[
water	139:32	0:0	12	2
op	139:34	0:0	12	+
water	139:36	0:0	12	stride
op	139:42	0:0	12	]
op	139:44	0:0	12	=
water	139:46	0:0	12	mx
water	139:48	0:0	12	;
water	140:24	0:0	12	mot_val
op	140:31	0:0	12	[
water	140:32	0:0	12	1
op	140:33	0:0	12	]
op	140:44	0:0	12	=
water	141:24	0:0	12	mot_val
op	141:31	0:0	12	[
water	141:32	0:0	12	3
op	141:33	0:0	12	]
op	141:44	0:0	12	=
water	142:24	0:0	12	mot_val
op	142:31	0:0	12	[
water	142:32	0:0	12	1
op	142:34	0:0	12	+
water	142:36	0:0	12	stride
op	142:42	0:0	12	]
op	142:44	0:0	12	=
water	143:24	0:0	12	mot_val
op	143:31	0:0	12	[
water	143:32	0:0	12	3
op	143:34	0:0	12	+
water	143:36	0:0	12	stride
op	143:42	0:0	12	]
op	143:44	0:0	12	=
water	143:46	0:0	12	my
water	143:48	0:0	12	;
water	144:20	0:0	12	}
else	144:22	159:20	10
stmts	144:27	159:20	11	
water	144:27	0:0	12	{
decl	145:24	145:29	12	int	i
water	146:24	0:0	12	s
op	146:25	0:0	12	->
water	146:27	0:0	12	current_picture
op	146:42	0:0	12	.
water	146:43	0:0	12	mb_type
op	146:50	0:0	12	[
water	146:51	0:0	12	xy
op	146:53	0:0	12	]
op	146:55	0:0	12	=
water	146:57	0:0	12	MB_TYPE_8x8
op	146:69	0:0	12	|
water	147:57	0:0	12	MB_TYPE_L0
water	147:67	0:0	12	;
for	148:24	158:24	12	(i = 0 ;i < 4;i ++)
forinit	148:29	148:34	13	i = 0 ;
water	148:29	0:0	14	i
op	148:31	0:0	14	=
water	148:33	0:0	14	0
water	148:34	0:0	14	;
cond	148:36	148:40	13	i < 4
water	148:36	0:0	14	i
op	148:38	0:0	14	<
water	148:40	0:0	14	4
forexpr	148:43	148:44	13	i ++
water	148:43	0:0	14	i
op	148:44	0:0	14	++
stmts	148:48	158:24	13	
water	148:48	0:0	14	{
decl	149:28	149:93	14	int16_t	*mot_val
op	149:45	0:0	14	=
call	149:47	149:92	15	ff_h263_pred_motion
arg	149:67	149:68	16	s
water	149:67	0:0	17	s
arg	149:70	149:71	16	i
water	149:70	0:0	17	i
arg	149:73	149:74	16	0
water	149:73	0:0	17	0
arg	149:76	149:83	16	&pred_x
op	149:76	0:0	17	&
water	149:77	0:0	17	pred_x
arg	149:85	149:92	16	&pred_y
op	149:85	0:0	17	&
water	149:86	0:0	17	pred_y
water	150:28	0:0	14	mx
op	150:31	0:0	14	=
call	150:33	150:75	14	ff_h263_decode_motion
arg	150:55	150:56	15	s
water	150:55	0:0	16	s
arg	150:58	150:64	15	pred_x
water	150:58	0:0	16	pred_x
arg	150:66	150:75	15	s->f_code
water	150:66	0:0	16	s
op	150:67	0:0	16	->
water	150:69	0:0	16	f_code
water	150:76	0:0	14	;
if	151:28	152:41	14	(mx >= 0 xffff)
cond	151:32	151:39	15	mx >= 0 xffff
water	151:32	0:0	16	mx
op	151:35	0:0	16	>=
water	151:38	0:0	16	0
water	151:39	0:0	16	xffff
stmts	152:32	152:41	15	
return	152:32	152:41	16	-1
op	152:39	0:0	17	-
water	152:40	0:0	17	1
water	153:28	0:0	14	my
op	153:31	0:0	14	=
call	153:33	153:75	14	ff_h263_decode_motion
arg	153:55	153:56	15	s
water	153:55	0:0	16	s
arg	153:58	153:64	15	pred_y
water	153:58	0:0	16	pred_y
arg	153:66	153:75	15	s->f_code
water	153:66	0:0	16	s
op	153:67	0:0	16	->
water	153:69	0:0	16	f_code
water	153:76	0:0	14	;
if	154:28	155:41	14	(my >= 0 xffff)
cond	154:32	154:39	15	my >= 0 xffff
water	154:32	0:0	16	my
op	154:35	0:0	16	>=
water	154:38	0:0	16	0
water	154:39	0:0	16	xffff
stmts	155:32	155:41	15	
return	155:32	155:41	16	-1
op	155:39	0:0	17	-
water	155:40	0:0	17	1
water	156:28	0:0	14	mot_val
op	156:35	0:0	14	[
water	156:36	0:0	14	0
op	156:37	0:0	14	]
op	156:39	0:0	14	=
water	156:41	0:0	14	mx
water	156:43	0:0	14	;
water	157:28	0:0	14	mot_val
op	157:35	0:0	14	[
water	157:36	0:0	14	1
op	157:37	0:0	14	]
op	157:39	0:0	14	=
water	157:41	0:0	14	my
water	157:43	0:0	14	;
water	158:24	0:0	14	}
water	159:20	0:0	12	}
water	160:16	0:0	10	}
water	161:12	0:0	8	}
water	162:8	0:0	6	}
water	163:8	0:0	4	s
op	163:9	0:0	4	->
water	163:11	0:0	4	mb_x
op	163:16	0:0	4	=
water	163:18	0:0	4	0
water	163:19	0:0	4	;
water	164:4	0:0	4	}
return	165:4	165:17	2	mb_num
water	165:11	0:0	3	mb_num
