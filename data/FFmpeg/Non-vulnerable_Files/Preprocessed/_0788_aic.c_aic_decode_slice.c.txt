func	1:0	57:0	0	static int	aic_decode_slice
params	1:27	0:0	1	
param	1:28	1:43	2	AICContext *	ctx
param	1:45	1:53	2	int	mb_x
param	1:55	1:63	2	int	mb_y
param	2:28	2:46	2	const uint8_t *	src
param	2:48	2:60	2	int	src_size
stmnts	0:0	56:12	1	
decl	4:4	4:20	2	GetBitContext	gb
decl	5:4	5:23	2	int	ret
water	5:11	0:0	2	,
decl	5:4	5:23	2	int	i
water	5:14	0:0	2	,
decl	5:4	5:23	2	int	mb
water	5:18	0:0	2	,
decl	5:4	5:23	2	int	blk
decl	6:4	6:67	2	int	slice_width
op	6:20	0:0	2	=
call	6:22	6:66	3	FFMIN
arg	6:28	6:44	4	ctx->slice_width
water	6:28	0:0	5	ctx
op	6:31	0:0	5	->
water	6:33	0:0	5	slice_width
arg	6:46	6:66	4	ctx->mb_width-mb_x
water	6:46	0:0	5	ctx
op	6:49	0:0	5	->
water	6:51	0:0	5	mb_width
op	6:60	0:0	5	-
water	6:62	0:0	5	mb_x
decl	7:4	7:21	2	uint8_t	*Y
water	7:14	0:0	2	,
decl	7:4	7:21	2	uint8_t	*C[2]
decl	8:4	8:16	2	uint8_t	*dst
decl	9:4	9:47	2	int16_t	*base_y
op	9:20	0:0	2	=
water	9:22	0:0	2	ctx
op	9:25	0:0	2	->
water	9:27	0:0	2	data_ptr
op	9:35	0:0	2	[
water	9:36	0:0	2	COEFF_LUMA
op	9:46	0:0	2	]
decl	10:4	10:49	2	int16_t	*base_c
op	10:20	0:0	2	=
water	10:22	0:0	2	ctx
op	10:25	0:0	2	->
water	10:27	0:0	2	data_ptr
op	10:35	0:0	2	[
water	10:36	0:0	2	COEFF_CHROMA
op	10:48	0:0	2	]
decl	11:4	11:51	2	int16_t	*ext_y
op	11:20	0:0	2	=
water	11:22	0:0	2	ctx
op	11:25	0:0	2	->
water	11:27	0:0	2	data_ptr
op	11:35	0:0	2	[
water	11:36	0:0	2	COEFF_LUMA_EXT
op	11:50	0:0	2	]
decl	12:4	12:53	2	int16_t	*ext_c
op	12:20	0:0	2	=
water	12:22	0:0	2	ctx
op	12:25	0:0	2	->
water	12:27	0:0	2	data_ptr
op	12:35	0:0	2	[
water	12:36	0:0	2	COEFF_CHROMA_EXT
op	12:52	0:0	2	]
decl	13:4	13:47	2	const int	ystride
op	13:22	0:0	2	=
water	13:24	0:0	2	ctx
op	13:27	0:0	2	->
water	13:29	0:0	2	frame
op	13:34	0:0	2	->
water	13:36	0:0	2	linesize
op	13:44	0:0	2	[
water	13:45	0:0	2	0
op	13:46	0:0	2	]
water	14:4	0:0	2	Y
op	14:6	0:0	2	=
water	14:8	0:0	2	ctx
op	14:11	0:0	2	->
water	14:13	0:0	2	frame
op	14:18	0:0	2	->
water	14:20	0:0	2	data
op	14:24	0:0	2	[
water	14:25	0:0	2	0
op	14:26	0:0	2	]
op	14:28	0:0	2	+
water	14:30	0:0	2	mb_x
op	14:35	0:0	2	*
water	14:37	0:0	2	16
op	14:40	0:0	2	+
water	14:42	0:0	2	mb_y
op	14:47	0:0	2	*
water	14:49	0:0	2	16
op	14:52	0:0	2	*
water	14:54	0:0	2	ystride
water	14:61	0:0	2	;
for	15:4	17:55	2	(i = 0 ;i < 2;i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:20	3	i < 2
water	15:16	0:0	4	i
op	15:18	0:0	4	<
water	15:20	0:0	4	2
forexpr	15:23	15:24	3	i ++
water	15:23	0:0	4	i
op	15:24	0:0	4	++
stmts	16:8	17:55	3	
water	16:8	0:0	4	C
op	16:9	0:0	4	[
water	16:10	0:0	4	i
op	16:11	0:0	4	]
op	16:13	0:0	4	=
water	16:15	0:0	4	ctx
op	16:18	0:0	4	->
water	16:20	0:0	4	frame
op	16:25	0:0	4	->
water	16:27	0:0	4	data
op	16:31	0:0	4	[
water	16:32	0:0	4	i
op	16:34	0:0	4	+
water	16:36	0:0	4	1
op	16:37	0:0	4	]
op	16:39	0:0	4	+
water	16:41	0:0	4	mb_x
op	16:46	0:0	4	*
water	16:48	0:0	4	8
op	17:15	0:0	4	+
water	17:17	0:0	4	mb_y
op	17:22	0:0	4	*
water	17:24	0:0	4	8
op	17:26	0:0	4	*
water	17:28	0:0	4	ctx
op	17:31	0:0	4	->
water	17:33	0:0	4	frame
op	17:38	0:0	4	->
water	17:40	0:0	4	linesize
op	17:48	0:0	4	[
water	17:49	0:0	4	i
op	17:51	0:0	4	+
water	17:53	0:0	4	1
op	17:54	0:0	4	]
water	17:55	0:0	4	;
call	18:4	18:40	2	init_get_bits
arg	18:18	18:21	3	&gb
op	18:18	0:0	4	&
water	18:19	0:0	4	gb
arg	18:23	18:26	3	src
water	18:23	0:0	4	src
arg	18:28	18:40	3	src_size*8
water	18:28	0:0	4	src_size
op	18:37	0:0	4	*
water	18:39	0:0	4	8
water	18:41	0:0	2	;
call	19:4	20:67	2	memset
arg	19:11	19:26	3	ctx->slice_data
water	19:11	0:0	4	ctx
op	19:14	0:0	4	->
water	19:16	0:0	4	slice_data
arg	19:28	19:29	3	0
water	19:28	0:0	4	0
arg	20:11	20:67	3	sizeof(*ctx->slice_data)*slice_width*AIC_BAND_COEFFS
op	20:11	0:0	4	sizeof
water	20:17	0:0	4	(
op	20:18	0:0	4	*
water	20:19	0:0	4	ctx
op	20:22	0:0	4	->
water	20:24	0:0	4	slice_data
water	20:34	0:0	4	)
op	20:36	0:0	4	*
water	20:38	0:0	4	slice_width
op	20:50	0:0	4	*
water	20:52	0:0	4	AIC_BAND_COEFFS
water	20:68	0:0	2	;
for	21:4	25:22	2	(i = 0 ;i < NUM_BANDS;i ++)
forinit	21:9	21:14	3	i = 0 ;
water	21:9	0:0	4	i
op	21:11	0:0	4	=
water	21:13	0:0	4	0
water	21:14	0:0	4	;
cond	21:16	21:20	3	i < NUM_BANDS
water	21:16	0:0	4	i
op	21:18	0:0	4	<
water	21:20	0:0	4	NUM_BANDS
forexpr	21:31	21:32	3	i ++
water	21:31	0:0	4	i
op	21:32	0:0	4	++
stmts	22:8	25:22	3	
if	22:8	25:22	4	(( ret =aic_decode_coeffs (& gb ,ctx -> data_ptr [ i ] ,i ,slice_width ,! ctx -> interlaced ) ) < 0)
cond	22:12	24:58	5	( ret =aic_decode_coeffs (& gb ,ctx -> data_ptr [ i ] ,i ,slice_width ,! ctx -> interlaced ) ) < 0
water	22:12	0:0	6	(
water	22:13	0:0	6	ret
op	22:17	0:0	6	=
call	22:19	24:53	6	aic_decode_coeffs
arg	22:37	22:40	7	&gb
op	22:37	0:0	8	&
water	22:38	0:0	8	gb
arg	22:42	22:58	7	ctx->data_ptr[i]
water	22:42	0:0	8	ctx
op	22:45	0:0	8	->
water	22:47	0:0	8	data_ptr
op	22:55	0:0	8	[
water	22:56	0:0	8	i
op	22:57	0:0	8	]
arg	23:37	23:38	7	i
water	23:37	0:0	8	i
arg	23:40	23:51	7	slice_width
water	23:40	0:0	8	slice_width
arg	24:37	24:53	7	!ctx->interlaced
op	24:37	0:0	8	!
water	24:38	0:0	8	ctx
op	24:41	0:0	8	->
water	24:43	0:0	8	interlaced
water	24:54	0:0	6	)
op	24:56	0:0	6	<
water	24:58	0:0	6	0
stmts	25:12	25:22	5	
return	25:12	25:22	6	ret
water	25:19	0:0	7	ret
for	26:4	55:4	2	(mb = 0 ;mb < slice_width;mb ++)
forinit	26:9	26:15	3	mb = 0 ;
water	26:9	0:0	4	mb
op	26:12	0:0	4	=
water	26:14	0:0	4	0
water	26:15	0:0	4	;
cond	26:17	26:22	3	mb < slice_width
water	26:17	0:0	4	mb
op	26:20	0:0	4	<
water	26:22	0:0	4	slice_width
forexpr	26:35	26:37	3	mb ++
water	26:35	0:0	4	mb
op	26:37	0:0	4	++
stmts	26:41	55:4	3	
water	26:41	0:0	4	{
for	27:8	44:8	4	(blk = 0 ;blk < 4;blk ++)
forinit	27:13	27:20	5	blk = 0 ;
water	27:13	0:0	6	blk
op	27:17	0:0	6	=
water	27:19	0:0	6	0
water	27:20	0:0	6	;
cond	27:22	27:28	5	blk < 4
water	27:22	0:0	6	blk
op	27:26	0:0	6	<
water	27:28	0:0	6	4
forexpr	27:31	27:34	5	blk ++
water	27:31	0:0	6	blk
op	27:34	0:0	6	++
stmts	27:38	44:8	5	
water	27:38	0:0	6	{
if	28:12	30:48	6	(! ctx -> interlaced)
cond	28:16	28:22	7	! ctx -> interlaced
op	28:16	0:0	8	!
water	28:17	0:0	8	ctx
op	28:20	0:0	8	->
water	28:22	0:0	8	interlaced
stmts	29:16	30:48	7	
call	29:16	30:47	8	recombine_block
arg	29:32	29:42	9	ctx->block
water	29:32	0:0	10	ctx
op	29:35	0:0	10	->
water	29:37	0:0	10	block
arg	29:44	29:69	9	ctx->scantable.permutated
water	29:44	0:0	10	ctx
op	29:47	0:0	10	->
water	29:49	0:0	10	scantable
op	29:58	0:0	10	.
water	29:59	0:0	10	permutated
arg	30:32	30:39	9	&base_y
op	30:32	0:0	10	&
water	30:33	0:0	10	base_y
arg	30:41	30:47	9	&ext_y
op	30:41	0:0	10	&
water	30:42	0:0	10	ext_y
water	30:48	0:0	8	;
else	31:12	33:56	6
stmts	32:16	33:56	7	
call	32:16	33:55	8	recombine_block_il
arg	32:35	32:45	9	ctx->block
water	32:35	0:0	10	ctx
op	32:38	0:0	10	->
water	32:40	0:0	10	block
arg	32:47	32:72	9	ctx->scantable.permutated
water	32:47	0:0	10	ctx
op	32:50	0:0	10	->
water	32:52	0:0	10	scantable
op	32:61	0:0	10	.
water	32:62	0:0	10	permutated
arg	33:35	33:42	9	&base_y
op	33:35	0:0	10	&
water	33:36	0:0	10	base_y
arg	33:44	33:50	9	&ext_y
op	33:44	0:0	10	&
water	33:45	0:0	10	ext_y
arg	33:52	33:55	9	blk
water	33:52	0:0	10	blk
water	33:56	0:0	8	;
call	34:12	34:67	6	unquant_block
arg	34:26	34:36	7	ctx->block
water	34:26	0:0	8	ctx
op	34:29	0:0	8	->
water	34:31	0:0	8	block
arg	34:38	34:48	7	ctx->quant
water	34:38	0:0	8	ctx
op	34:41	0:0	8	->
water	34:43	0:0	8	quant
arg	34:50	34:67	7	ctx->quant_matrix
water	34:50	0:0	8	ctx
op	34:53	0:0	8	->
water	34:55	0:0	8	quant_matrix
water	34:68	0:0	6	;
call	35:12	35:37	6	ctx->idsp.idct
arg	35:27	35:37	7	ctx->block
water	35:27	0:0	8	ctx
op	35:30	0:0	8	->
water	35:32	0:0	8	block
water	35:38	0:0	6	;
if	36:12	39:12	6	(! ctx -> interlaced)
cond	36:16	36:22	7	! ctx -> interlaced
op	36:16	0:0	8	!
water	36:17	0:0	8	ctx
op	36:20	0:0	8	->
water	36:22	0:0	8	interlaced
stmts	36:34	39:12	7	
water	36:34	0:0	8	{
water	37:16	0:0	8	dst
op	37:20	0:0	8	=
water	37:22	0:0	8	Y
op	37:24	0:0	8	+
water	37:26	0:0	8	(
water	37:27	0:0	8	blk
op	37:31	0:0	8	>>
water	37:34	0:0	8	1
water	37:35	0:0	8	)
op	37:37	0:0	8	*
water	37:39	0:0	8	8
op	37:41	0:0	8	*
water	37:43	0:0	8	ystride
op	37:51	0:0	8	+
water	37:53	0:0	8	(
water	37:54	0:0	8	blk
op	37:58	0:0	8	&
water	37:60	0:0	8	1
water	37:61	0:0	8	)
op	37:63	0:0	8	*
water	37:65	0:0	8	8
water	37:66	0:0	8	;
call	38:16	38:76	8	ctx->idsp.put_signed_pixels_clamped
arg	38:52	38:62	9	ctx->block
water	38:52	0:0	10	ctx
op	38:55	0:0	10	->
water	38:57	0:0	10	block
arg	38:64	38:67	9	dst
water	38:64	0:0	10	dst
arg	38:69	38:76	9	ystride
water	38:69	0:0	10	ystride
water	38:77	0:0	8	;
water	39:12	0:0	8	}
else	39:14	43:12	6
stmts	39:19	43:12	7	
water	39:19	0:0	8	{
water	40:16	0:0	8	dst
op	40:20	0:0	8	=
water	40:22	0:0	8	Y
op	40:24	0:0	8	+
water	40:26	0:0	8	(
water	40:27	0:0	8	blk
op	40:31	0:0	8	&
water	40:33	0:0	8	1
water	40:34	0:0	8	)
op	40:36	0:0	8	*
water	40:38	0:0	8	8
op	40:40	0:0	8	+
water	40:42	0:0	8	(
water	40:43	0:0	8	blk
op	40:47	0:0	8	>>
water	40:50	0:0	8	1
water	40:51	0:0	8	)
op	40:53	0:0	8	*
water	40:55	0:0	8	ystride
water	40:62	0:0	8	;
call	41:16	42:63	8	ctx->idsp.put_signed_pixels_clamped
arg	41:52	41:62	9	ctx->block
water	41:52	0:0	10	ctx
op	41:55	0:0	10	->
water	41:57	0:0	10	block
arg	41:64	41:67	9	dst
water	41:64	0:0	10	dst
arg	42:52	42:63	9	ystride*2
water	42:52	0:0	10	ystride
op	42:60	0:0	10	*
water	42:62	0:0	10	2
water	42:64	0:0	8	;
water	43:12	0:0	8	}
water	44:8	0:0	6	}
water	45:8	0:0	4	Y
op	45:10	0:0	4	+=
water	45:13	0:0	4	16
water	45:15	0:0	4	;
for	46:8	54:8	4	(blk = 0 ;blk < 2;blk ++)
forinit	46:13	46:20	5	blk = 0 ;
water	46:13	0:0	6	blk
op	46:17	0:0	6	=
water	46:19	0:0	6	0
water	46:20	0:0	6	;
cond	46:22	46:28	5	blk < 2
water	46:22	0:0	6	blk
op	46:26	0:0	6	<
water	46:28	0:0	6	2
forexpr	46:31	46:34	5	blk ++
water	46:31	0:0	6	blk
op	46:34	0:0	6	++
stmts	46:38	54:8	5	
water	46:38	0:0	6	{
call	47:12	48:43	6	recombine_block
arg	47:28	47:38	7	ctx->block
water	47:28	0:0	8	ctx
op	47:31	0:0	8	->
water	47:33	0:0	8	block
arg	47:40	47:65	7	ctx->scantable.permutated
water	47:40	0:0	8	ctx
op	47:43	0:0	8	->
water	47:45	0:0	8	scantable
op	47:54	0:0	8	.
water	47:55	0:0	8	permutated
arg	48:28	48:35	7	&base_c
op	48:28	0:0	8	&
water	48:29	0:0	8	base_c
arg	48:37	48:43	7	&ext_c
op	48:37	0:0	8	&
water	48:38	0:0	8	ext_c
water	48:44	0:0	6	;
call	49:12	49:67	6	unquant_block
arg	49:26	49:36	7	ctx->block
water	49:26	0:0	8	ctx
op	49:29	0:0	8	->
water	49:31	0:0	8	block
arg	49:38	49:48	7	ctx->quant
water	49:38	0:0	8	ctx
op	49:41	0:0	8	->
water	49:43	0:0	8	quant
arg	49:50	49:67	7	ctx->quant_matrix
water	49:50	0:0	8	ctx
op	49:53	0:0	8	->
water	49:55	0:0	8	quant_matrix
water	49:68	0:0	6	;
call	50:12	50:37	6	ctx->idsp.idct
arg	50:27	50:37	7	ctx->block
water	50:27	0:0	8	ctx
op	50:30	0:0	8	->
water	50:32	0:0	8	block
water	50:38	0:0	6	;
call	51:12	52:77	6	ctx->idsp.put_signed_pixels_clamped
arg	51:48	51:58	7	ctx->block
water	51:48	0:0	8	ctx
op	51:51	0:0	8	->
water	51:53	0:0	8	block
arg	51:60	51:66	7	C[blk]
water	51:60	0:0	8	C
op	51:61	0:0	8	[
water	51:62	0:0	8	blk
op	51:65	0:0	8	]
arg	52:48	52:77	7	ctx->frame->linesize[blk+1]
water	52:48	0:0	8	ctx
op	52:51	0:0	8	->
water	52:53	0:0	8	frame
op	52:58	0:0	8	->
water	52:60	0:0	8	linesize
op	52:68	0:0	8	[
water	52:69	0:0	8	blk
op	52:73	0:0	8	+
water	52:75	0:0	8	1
op	52:76	0:0	8	]
water	52:78	0:0	6	;
water	53:12	0:0	6	C
op	53:13	0:0	6	[
water	53:14	0:0	6	blk
op	53:17	0:0	6	]
op	53:19	0:0	6	+=
water	53:22	0:0	6	8
water	53:23	0:0	6	;
water	54:8	0:0	6	}
water	55:4	0:0	4	}
return	56:4	56:12	2	0
water	56:11	0:0	3	0
