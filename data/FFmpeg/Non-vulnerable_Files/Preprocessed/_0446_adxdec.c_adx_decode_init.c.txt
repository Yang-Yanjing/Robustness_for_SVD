func	1:15	17:0	0	int	adx_decode_init
params	1:34	0:0	1	
param	1:35	1:56	2	AVCodecContext *	avctx
stmnts	0:0	16:12	1	
decl	3:4	3:36	2	ADXContext	*c
op	3:18	0:0	2	=
water	3:20	0:0	2	avctx
op	3:25	0:0	2	->
water	3:27	0:0	2	priv_data
decl	4:4	4:24	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:24	2	int	header_size
if	5:4	14:4	2	(avctx -> extradata_size >= 24)
cond	5:8	5:33	3	avctx -> extradata_size >= 24
water	5:8	0:0	4	avctx
op	5:13	0:0	4	->
water	5:15	0:0	4	extradata_size
op	5:30	0:0	4	>=
water	5:33	0:0	4	24
stmts	5:37	14:4	3	
water	5:37	0:0	4	{
if	6:8	11:8	4	(( ret =ff_adx_decode_header (avctx ,avctx -> extradata ,avctx -> extradata_size ,& header_size ,c -> coeff ) ) < 0)
cond	6:12	8:53	5	( ret =ff_adx_decode_header (avctx ,avctx -> extradata ,avctx -> extradata_size ,& header_size ,c -> coeff ) ) < 0
water	6:12	0:0	6	(
water	6:13	0:0	6	ret
op	6:17	0:0	6	=
call	6:19	8:48	6	ff_adx_decode_header
arg	6:40	6:45	7	avctx
water	6:40	0:0	8	avctx
arg	6:47	6:63	7	avctx->extradata
water	6:47	0:0	8	avctx
op	6:52	0:0	8	->
water	6:54	0:0	8	extradata
arg	7:40	7:61	7	avctx->extradata_size
water	7:40	0:0	8	avctx
op	7:45	0:0	8	->
water	7:47	0:0	8	extradata_size
arg	7:63	7:75	7	&header_size
op	7:63	0:0	8	&
water	7:64	0:0	8	header_size
arg	8:40	8:48	7	c->coeff
water	8:40	0:0	8	c
op	8:41	0:0	8	->
water	8:43	0:0	8	coeff
water	8:49	0:0	6	)
op	8:51	0:0	6	<
water	8:53	0:0	6	0
stmts	8:56	11:8	5	
water	8:56	0:0	6	{
call	9:12	9:68	6	av_log
arg	9:19	9:24	7	avctx
water	9:19	0:0	8	avctx
arg	9:26	9:38	7	AV_LOG_ERROR
water	9:26	0:0	8	AV_LOG_ERROR
arg	9:40	9:68	7	"error parsing ADX header\n"
water	9:40	0:0	8	"error parsing ADX header\n"
water	9:69	0:0	6	;
return	10:12	10:38	6	AVERROR_INVALIDDATA
water	10:19	0:0	7	AVERROR_INVALIDDATA
water	11:8	0:0	6	}
water	12:8	0:0	4	c
op	12:9	0:0	4	->
water	12:11	0:0	4	channels
op	12:25	0:0	4	=
water	12:27	0:0	4	avctx
op	12:32	0:0	4	->
water	12:34	0:0	4	channels
water	12:42	0:0	4	;
water	13:8	0:0	4	c
op	13:9	0:0	4	->
water	13:11	0:0	4	header_parsed
op	13:25	0:0	4	=
water	13:27	0:0	4	1
water	13:28	0:0	4	;
water	14:4	0:0	4	}
water	15:4	0:0	2	avctx
op	15:9	0:0	2	->
water	15:11	0:0	2	sample_fmt
op	15:22	0:0	2	=
water	15:24	0:0	2	AV_SAMPLE_FMT_S16P
water	15:42	0:0	2	;
return	16:4	16:12	2	0
water	16:11	0:0	3	0
