func	1:0	174:0	0	static int	config_props
params	1:23	0:0	1	
param	1:24	1:45	2	AVFilterLink *	outlink
stmnts	0:0	173:14	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:51	2	AVFilterLink	*inlink0
op	4:26	0:0	2	=
water	4:28	0:0	2	outlink
op	4:35	0:0	2	->
water	4:37	0:0	2	src
op	4:40	0:0	2	->
water	4:42	0:0	2	inputs
op	4:48	0:0	2	[
water	4:49	0:0	2	0
op	4:50	0:0	2	]
decl	5:4	7:51	2	AVFilterLink	*inlink
op	5:26	0:0	2	=
water	5:28	0:0	2	ctx
op	5:31	0:0	2	->
water	5:33	0:0	2	filter
op	5:40	0:0	2	==
op	5:43	0:0	2	&
water	5:44	0:0	2	ff_vf_scale2ref
water	5:60	0:0	2	?
water	6:28	0:0	2	outlink
op	6:35	0:0	2	->
water	6:37	0:0	2	src
op	6:40	0:0	2	->
water	6:42	0:0	2	inputs
op	6:48	0:0	2	[
water	6:49	0:0	2	1
op	6:50	0:0	2	]
water	6:52	0:0	2	:
water	7:28	0:0	2	outlink
op	7:35	0:0	2	->
water	7:37	0:0	2	src
op	7:40	0:0	2	->
water	7:42	0:0	2	inputs
op	7:48	0:0	2	[
water	7:49	0:0	2	0
op	7:50	0:0	2	]
decl	8:4	8:47	2	enum AVPixelFormat	outfmt
op	8:30	0:0	2	=
water	8:32	0:0	2	outlink
op	8:39	0:0	2	->
water	8:41	0:0	2	format
decl	9:4	9:35	2	ScaleContext	*scale
op	9:24	0:0	2	=
water	9:26	0:0	2	ctx
op	9:29	0:0	2	->
water	9:31	0:0	2	priv
decl	10:4	10:72	2	const AVPixFmtDescriptor	*desc
op	10:35	0:0	2	=
call	10:37	10:71	3	av_pix_fmt_desc_get
arg	10:57	10:71	4	inlink->format
water	10:57	0:0	5	inlink
op	10:63	0:0	5	->
water	10:65	0:0	5	format
decl	11:4	11:77	2	const AVPixFmtDescriptor	*out_desc
op	11:39	0:0	2	=
call	11:41	11:76	3	av_pix_fmt_desc_get
arg	11:61	11:76	4	outlink->format
water	11:61	0:0	5	outlink
op	11:68	0:0	5	->
water	11:70	0:0	5	format
decl	12:4	12:16	2	int64_t	w
water	12:13	0:0	2	,
decl	12:4	12:16	2	int64_t	h
decl	13:4	13:35	2	double	var_values[VARS_NB]
water	13:30	0:0	2	,
decl	13:4	13:35	2	double	res
decl	14:4	14:14	2	char	*expr
decl	15:4	15:11	2	int	ret
decl	16:4	16:26	2	int	factor_w
water	16:16	0:0	2	,
decl	16:4	16:26	2	int	factor_h
water	17:4	0:0	2	var_values
op	17:14	0:0	2	[
water	17:15	0:0	2	VAR_IN_W
op	17:23	0:0	2	]
op	17:26	0:0	2	=
water	17:28	0:0	2	var_values
op	17:38	0:0	2	[
water	17:39	0:0	2	VAR_IW
op	17:45	0:0	2	]
op	17:47	0:0	2	=
water	17:49	0:0	2	inlink
op	17:55	0:0	2	->
water	17:57	0:0	2	w
water	17:58	0:0	2	;
water	18:4	0:0	2	var_values
op	18:14	0:0	2	[
water	18:15	0:0	2	VAR_IN_H
op	18:23	0:0	2	]
op	18:26	0:0	2	=
water	18:28	0:0	2	var_values
op	18:38	0:0	2	[
water	18:39	0:0	2	VAR_IH
op	18:45	0:0	2	]
op	18:47	0:0	2	=
water	18:49	0:0	2	inlink
op	18:55	0:0	2	->
water	18:57	0:0	2	h
water	18:58	0:0	2	;
water	19:4	0:0	2	var_values
op	19:14	0:0	2	[
water	19:15	0:0	2	VAR_OUT_W
op	19:24	0:0	2	]
op	19:26	0:0	2	=
water	19:28	0:0	2	var_values
op	19:38	0:0	2	[
water	19:39	0:0	2	VAR_OW
op	19:45	0:0	2	]
op	19:47	0:0	2	=
water	19:49	0:0	2	NAN
water	19:52	0:0	2	;
water	20:4	0:0	2	var_values
op	20:14	0:0	2	[
water	20:15	0:0	2	VAR_OUT_H
op	20:24	0:0	2	]
op	20:26	0:0	2	=
water	20:28	0:0	2	var_values
op	20:38	0:0	2	[
water	20:39	0:0	2	VAR_OH
op	20:45	0:0	2	]
op	20:47	0:0	2	=
water	20:49	0:0	2	NAN
water	20:52	0:0	2	;
water	21:4	0:0	2	var_values
op	21:14	0:0	2	[
water	21:15	0:0	2	VAR_A
op	21:20	0:0	2	]
op	21:26	0:0	2	=
water	21:28	0:0	2	(
water	21:29	0:0	2	double
water	21:35	0:0	2	)
water	21:37	0:0	2	inlink
op	21:43	0:0	2	->
water	21:45	0:0	2	w
op	21:47	0:0	2	/
water	21:49	0:0	2	inlink
op	21:55	0:0	2	->
water	21:57	0:0	2	h
water	21:58	0:0	2	;
water	22:4	0:0	2	var_values
op	22:14	0:0	2	[
water	22:15	0:0	2	VAR_SAR
op	22:22	0:0	2	]
op	22:26	0:0	2	=
water	22:28	0:0	2	inlink
op	22:34	0:0	2	->
water	22:36	0:0	2	sample_aspect_ratio
op	22:55	0:0	2	.
water	22:56	0:0	2	num
water	22:60	0:0	2	?
water	23:8	0:0	2	(
water	23:9	0:0	2	double
water	23:15	0:0	2	)
water	23:17	0:0	2	inlink
op	23:23	0:0	2	->
water	23:25	0:0	2	sample_aspect_ratio
op	23:44	0:0	2	.
water	23:45	0:0	2	num
op	23:49	0:0	2	/
water	23:51	0:0	2	inlink
op	23:57	0:0	2	->
water	23:59	0:0	2	sample_aspect_ratio
op	23:78	0:0	2	.
water	23:79	0:0	2	den
water	23:83	0:0	2	:
water	23:85	0:0	2	1
water	23:86	0:0	2	;
water	24:4	0:0	2	var_values
op	24:14	0:0	2	[
water	24:15	0:0	2	VAR_DAR
op	24:22	0:0	2	]
op	24:26	0:0	2	=
water	24:28	0:0	2	var_values
op	24:38	0:0	2	[
water	24:39	0:0	2	VAR_A
op	24:44	0:0	2	]
op	24:46	0:0	2	*
water	24:48	0:0	2	var_values
op	24:58	0:0	2	[
water	24:59	0:0	2	VAR_SAR
op	24:66	0:0	2	]
water	24:67	0:0	2	;
water	25:4	0:0	2	var_values
op	25:14	0:0	2	[
water	25:15	0:0	2	VAR_HSUB
op	25:23	0:0	2	]
op	25:26	0:0	2	=
water	25:28	0:0	2	1
op	25:30	0:0	2	<<
water	25:33	0:0	2	desc
op	25:37	0:0	2	->
water	25:39	0:0	2	log2_chroma_w
water	25:52	0:0	2	;
water	26:4	0:0	2	var_values
op	26:14	0:0	2	[
water	26:15	0:0	2	VAR_VSUB
op	26:23	0:0	2	]
op	26:26	0:0	2	=
water	26:28	0:0	2	1
op	26:30	0:0	2	<<
water	26:33	0:0	2	desc
op	26:37	0:0	2	->
water	26:39	0:0	2	log2_chroma_h
water	26:52	0:0	2	;
water	27:4	0:0	2	var_values
op	27:14	0:0	2	[
water	27:15	0:0	2	VAR_OHSUB
op	27:24	0:0	2	]
op	27:26	0:0	2	=
water	27:28	0:0	2	1
op	27:30	0:0	2	<<
water	27:33	0:0	2	out_desc
op	27:41	0:0	2	->
water	27:43	0:0	2	log2_chroma_w
water	27:56	0:0	2	;
water	28:4	0:0	2	var_values
op	28:14	0:0	2	[
water	28:15	0:0	2	VAR_OVSUB
op	28:24	0:0	2	]
op	28:26	0:0	2	=
water	28:28	0:0	2	1
op	28:30	0:0	2	<<
water	28:33	0:0	2	out_desc
op	28:41	0:0	2	->
water	28:43	0:0	2	log2_chroma_h
water	28:56	0:0	2	;
call	30:4	32:63	2	av_expr_parse_and_eval
arg	30:27	30:31	3	&res
op	30:27	0:0	4	&
water	30:28	0:0	4	res
arg	30:33	30:55	3	(expr=scale->w_expr)
water	30:33	0:0	4	(
water	30:34	0:0	4	expr
op	30:39	0:0	4	=
water	30:41	0:0	4	scale
op	30:46	0:0	4	->
water	30:48	0:0	4	w_expr
water	30:54	0:0	4	)
arg	31:27	31:36	3	var_names
water	31:27	0:0	4	var_names
arg	31:38	31:48	3	var_values
water	31:38	0:0	4	var_values
arg	32:27	32:31	3	NULL
water	32:27	0:0	4	NULL
arg	32:33	32:37	3	NULL
water	32:33	0:0	4	NULL
arg	32:39	32:43	3	NULL
water	32:39	0:0	4	NULL
arg	32:45	32:49	3	NULL
water	32:45	0:0	4	NULL
arg	32:51	32:55	3	NULL
water	32:51	0:0	4	NULL
arg	32:57	32:58	3	0
water	32:57	0:0	4	0
arg	32:60	32:63	3	ctx
water	32:60	0:0	4	ctx
water	32:64	0:0	2	;
water	33:4	0:0	2	scale
op	33:9	0:0	2	->
water	33:11	0:0	2	w
op	33:13	0:0	2	=
water	33:15	0:0	2	var_values
op	33:25	0:0	2	[
water	33:26	0:0	2	VAR_OUT_W
op	33:35	0:0	2	]
op	33:37	0:0	2	=
water	33:39	0:0	2	var_values
op	33:49	0:0	2	[
water	33:50	0:0	2	VAR_OW
op	33:56	0:0	2	]
op	33:58	0:0	2	=
water	33:60	0:0	2	res
water	33:63	0:0	2	;
if	34:4	37:17	2	(( ret =av_expr_parse_and_eval (& res ,( expr = scale -> h_expr ) ,var_names ,var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0)
cond	34:8	36:79	3	( ret =av_expr_parse_and_eval (& res ,( expr = scale -> h_expr ) ,var_names ,var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0
water	34:8	0:0	4	(
water	34:9	0:0	4	ret
op	34:13	0:0	4	=
call	34:15	36:74	4	av_expr_parse_and_eval
arg	34:38	34:42	5	&res
op	34:38	0:0	6	&
water	34:39	0:0	6	res
arg	34:44	34:66	5	(expr=scale->h_expr)
water	34:44	0:0	6	(
water	34:45	0:0	6	expr
op	34:50	0:0	6	=
water	34:52	0:0	6	scale
op	34:57	0:0	6	->
water	34:59	0:0	6	h_expr
water	34:65	0:0	6	)
arg	35:38	35:47	5	var_names
water	35:38	0:0	6	var_names
arg	35:49	35:59	5	var_values
water	35:49	0:0	6	var_values
arg	36:38	36:42	5	NULL
water	36:38	0:0	6	NULL
arg	36:44	36:48	5	NULL
water	36:44	0:0	6	NULL
arg	36:50	36:54	5	NULL
water	36:50	0:0	6	NULL
arg	36:56	36:60	5	NULL
water	36:56	0:0	6	NULL
arg	36:62	36:66	5	NULL
water	36:62	0:0	6	NULL
arg	36:68	36:69	5	0
water	36:68	0:0	6	0
arg	36:71	36:74	5	ctx
water	36:71	0:0	6	ctx
water	36:75	0:0	4	)
op	36:77	0:0	4	<
water	36:79	0:0	4	0
stmts	37:8	37:17	3	
goto	37:8	37:17	4	fail
water	37:13	0:0	5	fail
water	38:4	0:0	2	scale
op	38:9	0:0	2	->
water	38:11	0:0	2	h
op	38:13	0:0	2	=
water	38:15	0:0	2	var_values
op	38:25	0:0	2	[
water	38:26	0:0	2	VAR_OUT_H
op	38:35	0:0	2	]
op	38:37	0:0	2	=
water	38:39	0:0	2	var_values
op	38:49	0:0	2	[
water	38:50	0:0	2	VAR_OH
op	38:56	0:0	2	]
op	38:58	0:0	2	=
water	38:60	0:0	2	res
water	38:63	0:0	2	;
if	40:4	43:17	2	(( ret =av_expr_parse_and_eval (& res ,( expr = scale -> w_expr ) ,var_names ,var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0)
cond	40:8	42:79	3	( ret =av_expr_parse_and_eval (& res ,( expr = scale -> w_expr ) ,var_names ,var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0
water	40:8	0:0	4	(
water	40:9	0:0	4	ret
op	40:13	0:0	4	=
call	40:15	42:74	4	av_expr_parse_and_eval
arg	40:38	40:42	5	&res
op	40:38	0:0	6	&
water	40:39	0:0	6	res
arg	40:44	40:66	5	(expr=scale->w_expr)
water	40:44	0:0	6	(
water	40:45	0:0	6	expr
op	40:50	0:0	6	=
water	40:52	0:0	6	scale
op	40:57	0:0	6	->
water	40:59	0:0	6	w_expr
water	40:65	0:0	6	)
arg	41:38	41:47	5	var_names
water	41:38	0:0	6	var_names
arg	41:49	41:59	5	var_values
water	41:49	0:0	6	var_values
arg	42:38	42:42	5	NULL
water	42:38	0:0	6	NULL
arg	42:44	42:48	5	NULL
water	42:44	0:0	6	NULL
arg	42:50	42:54	5	NULL
water	42:50	0:0	6	NULL
arg	42:56	42:60	5	NULL
water	42:56	0:0	6	NULL
arg	42:62	42:66	5	NULL
water	42:62	0:0	6	NULL
arg	42:68	42:69	5	0
water	42:68	0:0	6	0
arg	42:71	42:74	5	ctx
water	42:71	0:0	6	ctx
water	42:75	0:0	4	)
op	42:77	0:0	4	<
water	42:79	0:0	4	0
stmts	43:8	43:17	3	
goto	43:8	43:17	4	fail
water	43:13	0:0	5	fail
water	44:4	0:0	2	scale
op	44:9	0:0	2	->
water	44:11	0:0	2	w
op	44:13	0:0	2	=
water	44:15	0:0	2	res
water	44:18	0:0	2	;
water	45:4	0:0	2	w
op	45:6	0:0	2	=
water	45:8	0:0	2	scale
op	45:13	0:0	2	->
water	45:15	0:0	2	w
water	45:16	0:0	2	;
water	46:4	0:0	2	h
op	46:6	0:0	2	=
water	46:8	0:0	2	scale
op	46:13	0:0	2	->
water	46:15	0:0	2	h
water	46:16	0:0	2	;
water	49:4	0:0	2	factor_w
op	49:13	0:0	2	=
water	49:15	0:0	2	1
water	49:16	0:0	2	;
water	50:4	0:0	2	factor_h
op	50:13	0:0	2	=
water	50:15	0:0	2	1
water	50:16	0:0	2	;
if	51:4	53:4	2	(w < - 1)
cond	51:8	51:13	3	w < - 1
water	51:8	0:0	4	w
op	51:10	0:0	4	<
op	51:12	0:0	4	-
water	51:13	0:0	4	1
stmts	51:16	53:4	3	
water	51:16	0:0	4	{
water	52:8	0:0	4	factor_w
op	52:17	0:0	4	=
op	52:19	0:0	4	-
water	52:20	0:0	4	w
water	52:21	0:0	4	;
water	53:4	0:0	4	}
if	54:4	56:4	2	(h < - 1)
cond	54:8	54:13	3	h < - 1
water	54:8	0:0	4	h
op	54:10	0:0	4	<
op	54:12	0:0	4	-
water	54:13	0:0	4	1
stmts	54:16	56:4	3	
water	54:16	0:0	4	{
water	55:8	0:0	4	factor_h
op	55:17	0:0	4	=
op	55:19	0:0	4	-
water	55:20	0:0	4	h
water	55:21	0:0	4	;
water	56:4	0:0	4	}
if	57:4	58:31	2	(w < 0 && h < 0)
cond	57:8	57:21	3	w < 0 && h < 0
water	57:8	0:0	4	w
op	57:10	0:0	4	<
water	57:12	0:0	4	0
op	57:14	0:0	4	&&
water	57:17	0:0	4	h
op	57:19	0:0	4	<
water	57:21	0:0	4	0
stmts	58:8	58:31	3	
water	58:8	0:0	4	scale
op	58:13	0:0	4	->
water	58:15	0:0	4	w
op	58:17	0:0	4	=
water	58:19	0:0	4	scale
op	58:24	0:0	4	->
water	58:26	0:0	4	h
op	58:28	0:0	4	=
water	58:30	0:0	4	0
water	58:31	0:0	4	;
if	59:4	60:21	2	(! ( w = scale -> w ))
cond	59:8	59:22	3	! ( w = scale -> w )
op	59:8	0:0	4	!
water	59:9	0:0	4	(
water	59:10	0:0	4	w
op	59:12	0:0	4	=
water	59:14	0:0	4	scale
op	59:19	0:0	4	->
water	59:21	0:0	4	w
water	59:22	0:0	4	)
stmts	60:8	60:21	3	
water	60:8	0:0	4	w
op	60:10	0:0	4	=
water	60:12	0:0	4	inlink
op	60:18	0:0	4	->
water	60:20	0:0	4	w
water	60:21	0:0	4	;
if	61:4	62:21	2	(! ( h = scale -> h ))
cond	61:8	61:22	3	! ( h = scale -> h )
op	61:8	0:0	4	!
water	61:9	0:0	4	(
water	61:10	0:0	4	h
op	61:12	0:0	4	=
water	61:14	0:0	4	scale
op	61:19	0:0	4	->
water	61:21	0:0	4	h
water	61:22	0:0	4	)
stmts	62:8	62:21	3	
water	62:8	0:0	4	h
op	62:10	0:0	4	=
water	62:12	0:0	4	inlink
op	62:18	0:0	4	->
water	62:20	0:0	4	h
water	62:21	0:0	4	;
if	66:4	67:69	2	(w < 0)
cond	66:8	66:12	3	w < 0
water	66:8	0:0	4	w
op	66:10	0:0	4	<
water	66:12	0:0	4	0
stmts	67:8	67:69	3	
water	67:8	0:0	4	w
op	67:10	0:0	4	=
call	67:12	67:57	4	av_rescale
arg	67:23	67:24	5	h
water	67:23	0:0	6	h
arg	67:26	67:35	5	inlink->w
water	67:26	0:0	6	inlink
op	67:32	0:0	6	->
water	67:34	0:0	6	w
arg	67:37	67:57	5	inlink->h*factor_w
water	67:37	0:0	6	inlink
op	67:43	0:0	6	->
water	67:45	0:0	6	h
op	67:47	0:0	6	*
water	67:49	0:0	6	factor_w
op	67:59	0:0	4	*
water	67:61	0:0	4	factor_w
water	67:69	0:0	4	;
if	68:4	69:69	2	(h < 0)
cond	68:8	68:12	3	h < 0
water	68:8	0:0	4	h
op	68:10	0:0	4	<
water	68:12	0:0	4	0
stmts	69:8	69:69	3	
water	69:8	0:0	4	h
op	69:10	0:0	4	=
call	69:12	69:57	4	av_rescale
arg	69:23	69:24	5	w
water	69:23	0:0	6	w
arg	69:26	69:35	5	inlink->h
water	69:26	0:0	6	inlink
op	69:32	0:0	6	->
water	69:34	0:0	6	h
arg	69:37	69:57	5	inlink->w*factor_h
water	69:37	0:0	6	inlink
op	69:43	0:0	6	->
water	69:45	0:0	6	w
op	69:47	0:0	6	*
water	69:49	0:0	6	factor_h
op	69:59	0:0	4	*
water	69:61	0:0	4	factor_h
water	69:69	0:0	4	;
if	72:4	82:4	2	(scale -> force_original_aspect_ratio)
cond	72:8	72:15	3	scale -> force_original_aspect_ratio
water	72:8	0:0	4	scale
op	72:13	0:0	4	->
water	72:15	0:0	4	force_original_aspect_ratio
stmts	72:44	82:4	3	
water	72:44	0:0	4	{
decl	73:8	73:55	4	int	tmp_w
op	73:18	0:0	4	=
call	73:20	73:54	5	av_rescale
arg	73:31	73:32	6	h
water	73:31	0:0	7	h
arg	73:34	73:43	6	inlink->w
water	73:34	0:0	7	inlink
op	73:40	0:0	7	->
water	73:42	0:0	7	w
arg	73:45	73:54	6	inlink->h
water	73:45	0:0	7	inlink
op	73:51	0:0	7	->
water	73:53	0:0	7	h
decl	74:8	74:55	4	int	tmp_h
op	74:18	0:0	4	=
call	74:20	74:54	5	av_rescale
arg	74:31	74:32	6	w
water	74:31	0:0	7	w
arg	74:34	74:43	6	inlink->h
water	74:34	0:0	7	inlink
op	74:40	0:0	7	->
water	74:42	0:0	7	h
arg	74:45	74:54	6	inlink->w
water	74:45	0:0	7	inlink
op	74:51	0:0	7	->
water	74:53	0:0	7	w
if	75:8	78:8	4	(scale -> force_original_aspect_ratio == 1)
cond	75:12	75:50	5	scale -> force_original_aspect_ratio == 1
water	75:12	0:0	6	scale
op	75:17	0:0	6	->
water	75:19	0:0	6	force_original_aspect_ratio
op	75:47	0:0	6	==
water	75:50	0:0	6	1
stmts	75:53	78:8	5	
water	75:53	0:0	6	{
water	76:13	0:0	6	w
op	76:15	0:0	6	=
call	76:17	76:31	6	FFMIN
arg	76:23	76:28	7	tmp_w
water	76:23	0:0	8	tmp_w
arg	76:30	76:31	7	w
water	76:30	0:0	8	w
water	76:32	0:0	6	;
water	77:13	0:0	6	h
op	77:15	0:0	6	=
call	77:17	77:31	6	FFMIN
arg	77:23	77:28	7	tmp_h
water	77:23	0:0	8	tmp_h
arg	77:30	77:31	7	h
water	77:30	0:0	8	h
water	77:32	0:0	6	;
water	78:8	0:0	6	}
else	78:10	81:8	4
stmts	78:15	81:8	5	
water	78:15	0:0	6	{
water	79:13	0:0	6	w
op	79:15	0:0	6	=
call	79:17	79:31	6	FFMAX
arg	79:23	79:28	7	tmp_w
water	79:23	0:0	8	tmp_w
arg	79:30	79:31	7	w
water	79:30	0:0	8	w
water	79:32	0:0	6	;
water	80:13	0:0	6	h
op	80:15	0:0	6	=
call	80:17	80:31	6	FFMAX
arg	80:23	80:28	7	tmp_h
water	80:23	0:0	8	tmp_h
arg	80:30	80:31	7	h
water	80:30	0:0	8	h
water	80:32	0:0	6	;
water	81:8	0:0	6	}
water	82:4	0:0	4	}
if	83:4	86:85	2	(w > INT_MAX || h > INT_MAX || ( h * inlink -> w ) > INT_MAX || ( w * inlink -> h ) > INT_MAX)
cond	83:8	85:26	3	w > INT_MAX || h > INT_MAX || ( h * inlink -> w ) > INT_MAX || ( w * inlink -> h ) > INT_MAX
water	83:8	0:0	4	w
op	83:10	0:0	4	>
water	83:12	0:0	4	INT_MAX
op	83:20	0:0	4	||
water	83:23	0:0	4	h
op	83:25	0:0	4	>
water	83:27	0:0	4	INT_MAX
op	83:35	0:0	4	||
water	84:8	0:0	4	(
water	84:9	0:0	4	h
op	84:11	0:0	4	*
water	84:13	0:0	4	inlink
op	84:19	0:0	4	->
water	84:21	0:0	4	w
water	84:22	0:0	4	)
op	84:24	0:0	4	>
water	84:26	0:0	4	INT_MAX
op	84:35	0:0	4	||
water	85:8	0:0	4	(
water	85:9	0:0	4	w
op	85:11	0:0	4	*
water	85:13	0:0	4	inlink
op	85:19	0:0	4	->
water	85:21	0:0	4	h
water	85:22	0:0	4	)
op	85:24	0:0	4	>
water	85:26	0:0	4	INT_MAX
stmts	86:8	86:85	3	
call	86:8	86:84	4	av_log
arg	86:15	86:18	5	ctx
water	86:15	0:0	6	ctx
arg	86:20	86:32	5	AV_LOG_ERROR
water	86:20	0:0	6	AV_LOG_ERROR
arg	86:34	86:84	5	"Rescaled value for width or height is too big.\n"
water	86:34	0:0	6	"Rescaled value for width or height is too big.\n"
water	86:85	0:0	4	;
water	87:4	0:0	2	outlink
op	87:11	0:0	2	->
water	87:13	0:0	2	w
op	87:15	0:0	2	=
water	87:17	0:0	2	w
water	87:18	0:0	2	;
water	88:4	0:0	2	outlink
op	88:11	0:0	2	->
water	88:13	0:0	2	h
op	88:15	0:0	2	=
water	88:17	0:0	2	h
water	88:18	0:0	2	;
water	90:4	0:0	2	scale
op	90:9	0:0	2	->
water	90:11	0:0	2	input_is_pal
op	90:24	0:0	2	=
water	90:26	0:0	2	desc
op	90:30	0:0	2	->
water	90:32	0:0	2	flags
op	90:38	0:0	2	&
water	90:40	0:0	2	AV_PIX_FMT_FLAG_PAL
op	90:60	0:0	2	||
water	91:26	0:0	2	desc
op	91:30	0:0	2	->
water	91:32	0:0	2	flags
op	91:38	0:0	2	&
water	91:40	0:0	2	AV_PIX_FMT_FLAG_PSEUDOPAL
water	91:65	0:0	2	;
if	92:4	92:59	2	(outfmt == AV_PIX_FMT_PAL8)
cond	92:8	92:18	3	outfmt == AV_PIX_FMT_PAL8
water	92:8	0:0	4	outfmt
op	92:15	0:0	4	==
water	92:18	0:0	4	AV_PIX_FMT_PAL8
stmts	92:35	92:59	3	
water	92:35	0:0	4	outfmt
op	92:42	0:0	4	=
water	92:44	0:0	4	AV_PIX_FMT_BGR8
water	92:59	0:0	4	;
water	93:4	0:0	2	scale
op	93:9	0:0	2	->
water	93:11	0:0	2	output_is_pal
op	93:25	0:0	2	=
call	93:27	93:53	2	av_pix_fmt_desc_get
arg	93:47	93:53	3	outfmt
water	93:47	0:0	4	outfmt
op	93:54	0:0	2	->
water	93:56	0:0	2	flags
op	93:62	0:0	2	&
water	93:64	0:0	2	AV_PIX_FMT_FLAG_PAL
op	93:84	0:0	2	||
call	94:27	94:53	2	av_pix_fmt_desc_get
arg	94:47	94:53	3	outfmt
water	94:47	0:0	4	outfmt
op	94:54	0:0	2	->
water	94:56	0:0	2	flags
op	94:62	0:0	2	&
water	94:64	0:0	2	AV_PIX_FMT_FLAG_PSEUDOPAL
water	94:89	0:0	2	;
if	95:4	96:35	2	(scale -> sws)
cond	95:8	95:15	3	scale -> sws
water	95:8	0:0	4	scale
op	95:13	0:0	4	->
water	95:15	0:0	4	sws
stmts	96:8	96:35	3	
call	96:8	96:34	4	sws_freeContext
arg	96:24	96:34	5	scale->sws
water	96:24	0:0	6	scale
op	96:29	0:0	6	->
water	96:31	0:0	6	sws
water	96:35	0:0	4	;
if	97:4	98:39	2	(scale -> isws [ 0 ])
cond	97:8	97:21	3	scale -> isws [ 0 ]
water	97:8	0:0	4	scale
op	97:13	0:0	4	->
water	97:15	0:0	4	isws
op	97:19	0:0	4	[
water	97:20	0:0	4	0
op	97:21	0:0	4	]
stmts	98:8	98:39	3	
call	98:8	98:38	4	sws_freeContext
arg	98:24	98:38	5	scale->isws[0]
water	98:24	0:0	6	scale
op	98:29	0:0	6	->
water	98:31	0:0	6	isws
op	98:35	0:0	6	[
water	98:36	0:0	6	0
op	98:37	0:0	6	]
water	98:39	0:0	4	;
if	99:4	100:39	2	(scale -> isws [ 1 ])
cond	99:8	99:21	3	scale -> isws [ 1 ]
water	99:8	0:0	4	scale
op	99:13	0:0	4	->
water	99:15	0:0	4	isws
op	99:19	0:0	4	[
water	99:20	0:0	4	1
op	99:21	0:0	4	]
stmts	100:8	100:39	3	
call	100:8	100:38	4	sws_freeContext
arg	100:24	100:38	5	scale->isws[1]
water	100:24	0:0	6	scale
op	100:29	0:0	6	->
water	100:31	0:0	6	isws
op	100:35	0:0	6	[
water	100:36	0:0	6	1
op	100:37	0:0	6	]
water	100:39	0:0	4	;
water	101:4	0:0	2	scale
op	101:9	0:0	2	->
water	101:11	0:0	2	isws
op	101:15	0:0	2	[
water	101:16	0:0	2	0
op	101:17	0:0	2	]
op	101:19	0:0	2	=
water	101:21	0:0	2	scale
op	101:26	0:0	2	->
water	101:28	0:0	2	isws
op	101:32	0:0	2	[
water	101:33	0:0	2	1
op	101:34	0:0	2	]
op	101:36	0:0	2	=
water	101:38	0:0	2	scale
op	101:43	0:0	2	->
water	101:45	0:0	2	sws
op	101:49	0:0	2	=
water	101:51	0:0	2	NULL
water	101:55	0:0	2	;
if	102:4	107:8	2	(inlink0 -> w == outlink -> w && inlink0 -> h == outlink -> h && ! scale -> out_color_matrix && scale -> in_range == scale -> out_range && inlink0 -> format == outlink -> format)
cond	102:8	106:36	3	inlink0 -> w == outlink -> w && inlink0 -> h == outlink -> h && ! scale -> out_color_matrix && scale -> in_range == scale -> out_range && inlink0 -> format == outlink -> format
water	102:8	0:0	4	inlink0
op	102:15	0:0	4	->
water	102:17	0:0	4	w
op	102:19	0:0	4	==
water	102:22	0:0	4	outlink
op	102:29	0:0	4	->
water	102:31	0:0	4	w
op	102:33	0:0	4	&&
water	103:8	0:0	4	inlink0
op	103:15	0:0	4	->
water	103:17	0:0	4	h
op	103:19	0:0	4	==
water	103:22	0:0	4	outlink
op	103:29	0:0	4	->
water	103:31	0:0	4	h
op	103:33	0:0	4	&&
op	104:8	0:0	4	!
water	104:9	0:0	4	scale
op	104:14	0:0	4	->
water	104:16	0:0	4	out_color_matrix
op	104:33	0:0	4	&&
water	105:8	0:0	4	scale
op	105:13	0:0	4	->
water	105:15	0:0	4	in_range
op	105:24	0:0	4	==
water	105:27	0:0	4	scale
op	105:32	0:0	4	->
water	105:34	0:0	4	out_range
op	105:44	0:0	4	&&
water	106:8	0:0	4	inlink0
op	106:15	0:0	4	->
water	106:17	0:0	4	format
op	106:24	0:0	4	==
water	106:27	0:0	4	outlink
op	106:34	0:0	4	->
water	106:36	0:0	4	format
stmts	107:8	107:8	3	
water	107:8	0:0	4	;
else	108:4	156:4	2
stmts	108:9	156:4	3	
water	108:9	0:0	4	{
decl	109:8	109:86	4	struct SwsContext	**swscs[3]
op	109:37	0:0	4	=
water	109:39	0:0	4	{
op	109:40	0:0	4	&
water	109:41	0:0	4	scale
op	109:46	0:0	4	->
water	109:48	0:0	4	sws
water	109:51	0:0	4	,
op	109:53	0:0	4	&
water	109:54	0:0	4	scale
op	109:59	0:0	4	->
water	109:61	0:0	4	isws
op	109:65	0:0	4	[
water	109:66	0:0	4	0
op	109:67	0:0	4	]
water	109:68	0:0	4	,
op	109:70	0:0	4	&
water	109:71	0:0	4	scale
op	109:76	0:0	4	->
water	109:78	0:0	4	isws
op	109:82	0:0	4	[
water	109:83	0:0	4	1
op	109:84	0:0	4	]
water	109:85	0:0	4	}
decl	110:8	110:13	4	int	i
for	111:8	155:8	4	(i = 0 ;i < 3;i ++)
forinit	111:13	111:18	5	i = 0 ;
water	111:13	0:0	6	i
op	111:15	0:0	6	=
water	111:17	0:0	6	0
water	111:18	0:0	6	;
cond	111:20	111:24	5	i < 3
water	111:20	0:0	6	i
op	111:22	0:0	6	<
water	111:24	0:0	6	3
forexpr	111:27	111:28	5	i ++
water	111:27	0:0	6	i
op	111:28	0:0	6	++
stmts	111:32	155:8	5	
water	111:32	0:0	6	{
decl	112:12	112:44	6	struct SwsContext	**s
op	112:34	0:0	6	=
water	112:36	0:0	6	swscs
op	112:41	0:0	6	[
water	112:42	0:0	6	i
op	112:43	0:0	6	]
op	113:12	0:0	6	*
water	113:13	0:0	6	s
op	113:15	0:0	6	=
call	113:17	113:35	6	sws_alloc_context
water	113:36	0:0	6	;
if	114:12	115:38	6	(! * s)
cond	114:16	114:18	7	! * s
op	114:16	0:0	8	!
op	114:17	0:0	8	*
water	114:18	0:0	8	s
stmts	115:16	115:38	7	
return	115:16	115:38	8	AVERROR(ENOMEM)
call	115:23	115:37	9	AVERROR
arg	115:31	115:37	10	ENOMEM
water	115:31	0:0	11	ENOMEM
call	116:12	116:53	6	av_opt_set_int
arg	116:27	116:29	7	*s
op	116:27	0:0	8	*
water	116:28	0:0	8	s
arg	116:31	116:37	7	"srcw"
water	116:31	0:0	8	"srcw"
arg	116:39	116:50	7	inlink0->w
water	116:39	0:0	8	inlink0
op	116:47	0:0	8	->
water	116:49	0:0	8	w
arg	116:52	116:53	7	0
water	116:52	0:0	8	0
water	116:54	0:0	6	;
call	117:12	117:60	6	av_opt_set_int
arg	117:27	117:29	7	*s
op	117:27	0:0	8	*
water	117:28	0:0	8	s
arg	117:31	117:37	7	"srch"
water	117:31	0:0	8	"srch"
arg	117:39	117:57	7	inlink0->h>>!!i
water	117:39	0:0	8	inlink0
op	117:47	0:0	8	->
water	117:49	0:0	8	h
op	117:51	0:0	8	>>
op	117:54	0:0	8	!
op	117:55	0:0	8	!
water	117:56	0:0	8	i
arg	117:59	117:60	7	0
water	117:59	0:0	8	0
water	117:61	0:0	6	;
call	118:12	118:63	6	av_opt_set_int
arg	118:27	118:29	7	*s
op	118:27	0:0	8	*
water	118:28	0:0	8	s
arg	118:31	118:43	7	"src_format"
water	118:31	0:0	8	"src_format"
arg	118:45	118:60	7	inlink0->format
water	118:45	0:0	8	inlink0
op	118:52	0:0	8	->
water	118:54	0:0	8	format
arg	118:62	118:63	7	0
water	118:62	0:0	8	0
water	118:64	0:0	6	;
call	119:12	119:52	6	av_opt_set_int
arg	119:27	119:29	7	*s
op	119:27	0:0	8	*
water	119:28	0:0	8	s
arg	119:31	119:37	7	"dstw"
water	119:31	0:0	8	"dstw"
arg	119:39	119:49	7	outlink->w
water	119:39	0:0	8	outlink
op	119:46	0:0	8	->
water	119:48	0:0	8	w
arg	119:51	119:52	7	0
water	119:51	0:0	8	0
water	119:53	0:0	6	;
call	120:12	120:59	6	av_opt_set_int
arg	120:27	120:29	7	*s
op	120:27	0:0	8	*
water	120:28	0:0	8	s
arg	120:31	120:37	7	"dsth"
water	120:31	0:0	8	"dsth"
arg	120:39	120:56	7	outlink->h>>!!i
water	120:39	0:0	8	outlink
op	120:46	0:0	8	->
water	120:48	0:0	8	h
op	120:50	0:0	8	>>
op	120:53	0:0	8	!
op	120:54	0:0	8	!
water	120:55	0:0	8	i
arg	120:58	120:59	7	0
water	120:58	0:0	8	0
water	120:60	0:0	6	;
call	121:12	121:54	6	av_opt_set_int
arg	121:27	121:29	7	*s
op	121:27	0:0	8	*
water	121:28	0:0	8	s
arg	121:31	121:43	7	"dst_format"
water	121:31	0:0	8	"dst_format"
arg	121:45	121:51	7	outfmt
water	121:45	0:0	8	outfmt
arg	121:53	121:54	7	0
water	121:53	0:0	8	0
water	121:55	0:0	6	;
call	122:12	122:59	6	av_opt_set_int
arg	122:27	122:29	7	*s
op	122:27	0:0	8	*
water	122:28	0:0	8	s
arg	122:31	122:42	7	"sws_flags"
water	122:31	0:0	8	"sws_flags"
arg	122:44	122:56	7	scale->flags
water	122:44	0:0	8	scale
op	122:49	0:0	8	->
water	122:51	0:0	8	flags
arg	122:58	122:59	7	0
water	122:58	0:0	8	0
water	122:60	0:0	6	;
call	123:12	123:59	6	av_opt_set_int
arg	123:27	123:29	7	*s
op	123:27	0:0	8	*
water	123:28	0:0	8	s
arg	123:31	123:39	7	"param0"
water	123:31	0:0	8	"param0"
arg	123:41	123:56	7	scale->param[0]
water	123:41	0:0	8	scale
op	123:46	0:0	8	->
water	123:48	0:0	8	param
op	123:53	0:0	8	[
water	123:54	0:0	8	0
op	123:55	0:0	8	]
arg	123:58	123:59	7	0
water	123:58	0:0	8	0
water	123:60	0:0	6	;
call	124:12	124:59	6	av_opt_set_int
arg	124:27	124:29	7	*s
op	124:27	0:0	8	*
water	124:28	0:0	8	s
arg	124:31	124:39	7	"param1"
water	124:31	0:0	8	"param1"
arg	124:41	124:56	7	scale->param[1]
water	124:41	0:0	8	scale
op	124:46	0:0	8	->
water	124:48	0:0	8	param
op	124:53	0:0	8	[
water	124:54	0:0	8	1
op	124:55	0:0	8	]
arg	124:58	124:59	7	0
water	124:58	0:0	8	0
water	124:60	0:0	6	;
if	125:12	127:70	6	(scale -> in_range != AVCOL_RANGE_UNSPECIFIED)
cond	125:16	125:35	7	scale -> in_range != AVCOL_RANGE_UNSPECIFIED
water	125:16	0:0	8	scale
op	125:21	0:0	8	->
water	125:23	0:0	8	in_range
op	125:32	0:0	8	!=
water	125:35	0:0	8	AVCOL_RANGE_UNSPECIFIED
stmts	126:16	127:70	7	
call	126:16	127:69	8	av_opt_set_int
arg	126:31	126:33	9	*s
op	126:31	0:0	10	*
water	126:32	0:0	10	s
arg	126:35	126:46	9	"src_range"
water	126:35	0:0	10	"src_range"
arg	127:31	127:66	9	scale->in_range==AVCOL_RANGE_JPEG
water	127:31	0:0	10	scale
op	127:36	0:0	10	->
water	127:38	0:0	10	in_range
op	127:47	0:0	10	==
water	127:50	0:0	10	AVCOL_RANGE_JPEG
arg	127:68	127:69	9	0
water	127:68	0:0	10	0
water	127:70	0:0	8	;
if	128:12	130:71	6	(scale -> out_range != AVCOL_RANGE_UNSPECIFIED)
cond	128:16	128:36	7	scale -> out_range != AVCOL_RANGE_UNSPECIFIED
water	128:16	0:0	8	scale
op	128:21	0:0	8	->
water	128:23	0:0	8	out_range
op	128:33	0:0	8	!=
water	128:36	0:0	8	AVCOL_RANGE_UNSPECIFIED
stmts	129:16	130:71	7	
call	129:16	130:70	8	av_opt_set_int
arg	129:31	129:33	9	*s
op	129:31	0:0	10	*
water	129:32	0:0	10	s
arg	129:35	129:46	9	"dst_range"
water	129:35	0:0	10	"dst_range"
arg	130:31	130:67	9	scale->out_range==AVCOL_RANGE_JPEG
water	130:31	0:0	10	scale
op	130:36	0:0	10	->
water	130:38	0:0	10	out_range
op	130:48	0:0	10	==
water	130:51	0:0	10	AVCOL_RANGE_JPEG
arg	130:69	130:70	9	0
water	130:69	0:0	10	0
water	130:71	0:0	8	;
if	131:12	137:12	6	(scale -> opts)
cond	131:16	131:23	7	scale -> opts
water	131:16	0:0	8	scale
op	131:21	0:0	8	->
water	131:23	0:0	8	opts
stmts	131:29	137:12	7	
water	131:29	0:0	8	{
decl	132:16	132:43	8	AVDictionaryEntry	*e
op	132:37	0:0	8	=
water	132:39	0:0	8	NULL
while	133:16	136:16	8	(( e =av_dict_get (scale -> opts ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) ))
cond	133:23	133:82	9	( e =av_dict_get (scale -> opts ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) )
water	133:23	0:0	10	(
water	133:24	0:0	10	e
op	133:26	0:0	10	=
call	133:28	133:81	10	av_dict_get
arg	133:40	133:51	11	scale->opts
water	133:40	0:0	12	scale
op	133:45	0:0	12	->
water	133:47	0:0	12	opts
arg	133:53	133:55	11	""
water	133:53	0:0	12	""
arg	133:57	133:58	11	e
water	133:57	0:0	12	e
arg	133:60	133:81	11	AV_DICT_IGNORE_SUFFIX
water	133:60	0:0	12	AV_DICT_IGNORE_SUFFIX
water	133:82	0:0	10	)
stmts	133:85	136:16	9	
water	133:85	0:0	10	{
if	134:20	135:34	10	(( ret =av_opt_set (* s ,e -> key ,e -> value ,0 ) ) < 0)
cond	134:24	134:70	11	( ret =av_opt_set (* s ,e -> key ,e -> value ,0 ) ) < 0
water	134:24	0:0	12	(
water	134:25	0:0	12	ret
op	134:29	0:0	12	=
call	134:31	134:65	12	av_opt_set
arg	134:42	134:44	13	*s
op	134:42	0:0	14	*
water	134:43	0:0	14	s
arg	134:46	134:52	13	e->key
water	134:46	0:0	14	e
op	134:47	0:0	14	->
water	134:49	0:0	14	key
arg	134:54	134:62	13	e->value
water	134:54	0:0	14	e
op	134:55	0:0	14	->
water	134:57	0:0	14	value
arg	134:64	134:65	13	0
water	134:64	0:0	14	0
water	134:66	0:0	12	)
op	134:68	0:0	12	<
water	134:70	0:0	12	0
stmts	135:24	135:34	11	
return	135:24	135:34	12	ret
water	135:31	0:0	13	ret
water	136:16	0:0	10	}
water	137:12	0:0	8	}
if	141:12	143:12	6	(inlink0 -> format == AV_PIX_FMT_YUV420P)
cond	141:16	141:35	7	inlink0 -> format == AV_PIX_FMT_YUV420P
water	141:16	0:0	8	inlink0
op	141:23	0:0	8	->
water	141:25	0:0	8	format
op	141:32	0:0	8	==
water	141:35	0:0	8	AV_PIX_FMT_YUV420P
stmts	141:55	143:12	7	
water	141:55	0:0	8	{
water	142:16	0:0	8	scale
op	142:21	0:0	8	->
water	142:23	0:0	8	in_v_chr_pos
op	142:36	0:0	8	=
water	142:38	0:0	8	(
water	142:39	0:0	8	i
op	142:41	0:0	8	==
water	142:44	0:0	8	0
water	142:45	0:0	8	)
water	142:47	0:0	8	?
water	142:49	0:0	8	128
water	142:53	0:0	8	:
water	142:55	0:0	8	(
water	142:56	0:0	8	i
op	142:58	0:0	8	==
water	142:61	0:0	8	1
water	142:62	0:0	8	)
water	142:64	0:0	8	?
water	142:66	0:0	8	64
water	142:69	0:0	8	:
water	142:71	0:0	8	192
water	142:74	0:0	8	;
water	143:12	0:0	8	}
if	144:12	146:12	6	(outlink -> format == AV_PIX_FMT_YUV420P)
cond	144:16	144:35	7	outlink -> format == AV_PIX_FMT_YUV420P
water	144:16	0:0	8	outlink
op	144:23	0:0	8	->
water	144:25	0:0	8	format
op	144:32	0:0	8	==
water	144:35	0:0	8	AV_PIX_FMT_YUV420P
stmts	144:55	146:12	7	
water	144:55	0:0	8	{
water	145:16	0:0	8	scale
op	145:21	0:0	8	->
water	145:23	0:0	8	out_v_chr_pos
op	145:37	0:0	8	=
water	145:39	0:0	8	(
water	145:40	0:0	8	i
op	145:42	0:0	8	==
water	145:45	0:0	8	0
water	145:46	0:0	8	)
water	145:48	0:0	8	?
water	145:50	0:0	8	128
water	145:54	0:0	8	:
water	145:56	0:0	8	(
water	145:57	0:0	8	i
op	145:59	0:0	8	==
water	145:62	0:0	8	1
water	145:63	0:0	8	)
water	145:65	0:0	8	?
water	145:67	0:0	8	64
water	145:70	0:0	8	:
water	145:72	0:0	8	192
water	145:75	0:0	8	;
water	146:12	0:0	8	}
call	147:12	147:70	6	av_opt_set_int
arg	147:27	147:29	7	*s
op	147:27	0:0	8	*
water	147:28	0:0	8	s
arg	147:31	147:46	7	"src_h_chr_pos"
water	147:31	0:0	8	"src_h_chr_pos"
arg	147:48	147:67	7	scale->in_h_chr_pos
water	147:48	0:0	8	scale
op	147:53	0:0	8	->
water	147:55	0:0	8	in_h_chr_pos
arg	147:69	147:70	7	0
water	147:69	0:0	8	0
water	147:71	0:0	6	;
call	148:12	148:70	6	av_opt_set_int
arg	148:27	148:29	7	*s
op	148:27	0:0	8	*
water	148:28	0:0	8	s
arg	148:31	148:46	7	"src_v_chr_pos"
water	148:31	0:0	8	"src_v_chr_pos"
arg	148:48	148:67	7	scale->in_v_chr_pos
water	148:48	0:0	8	scale
op	148:53	0:0	8	->
water	148:55	0:0	8	in_v_chr_pos
arg	148:69	148:70	7	0
water	148:69	0:0	8	0
water	148:71	0:0	6	;
call	149:12	149:71	6	av_opt_set_int
arg	149:27	149:29	7	*s
op	149:27	0:0	8	*
water	149:28	0:0	8	s
arg	149:31	149:46	7	"dst_h_chr_pos"
water	149:31	0:0	8	"dst_h_chr_pos"
arg	149:48	149:68	7	scale->out_h_chr_pos
water	149:48	0:0	8	scale
op	149:53	0:0	8	->
water	149:55	0:0	8	out_h_chr_pos
arg	149:70	149:71	7	0
water	149:70	0:0	8	0
water	149:72	0:0	6	;
call	150:12	150:71	6	av_opt_set_int
arg	150:27	150:29	7	*s
op	150:27	0:0	8	*
water	150:28	0:0	8	s
arg	150:31	150:46	7	"dst_v_chr_pos"
water	150:31	0:0	8	"dst_v_chr_pos"
arg	150:48	150:68	7	scale->out_v_chr_pos
water	150:48	0:0	8	scale
op	150:53	0:0	8	->
water	150:55	0:0	8	out_v_chr_pos
arg	150:70	150:71	7	0
water	150:70	0:0	8	0
water	150:72	0:0	6	;
if	151:12	152:26	6	(( ret =sws_init_context (* s ,NULL ,NULL ) ) < 0)
cond	151:16	151:59	7	( ret =sws_init_context (* s ,NULL ,NULL ) ) < 0
water	151:16	0:0	8	(
water	151:17	0:0	8	ret
op	151:21	0:0	8	=
call	151:23	151:54	8	sws_init_context
arg	151:40	151:42	9	*s
op	151:40	0:0	10	*
water	151:41	0:0	10	s
arg	151:44	151:48	9	NULL
water	151:44	0:0	10	NULL
arg	151:50	151:54	9	NULL
water	151:50	0:0	10	NULL
water	151:55	0:0	8	)
op	151:57	0:0	8	<
water	151:59	0:0	8	0
stmts	152:16	152:26	7	
return	152:16	152:26	8	ret
water	152:23	0:0	9	ret
if	153:12	154:21	6	(! scale -> interlaced)
cond	153:16	153:24	7	! scale -> interlaced
op	153:16	0:0	8	!
water	153:17	0:0	8	scale
op	153:22	0:0	8	->
water	153:24	0:0	8	interlaced
stmts	154:16	154:21	7	
break	154:16	154:21	8	
water	155:8	0:0	6	}
water	156:4	0:0	4	}
if	157:4	159:4	2	(inlink -> sample_aspect_ratio . num)
cond	157:8	157:36	3	inlink -> sample_aspect_ratio . num
water	157:8	0:0	4	inlink
op	157:14	0:0	4	->
water	157:16	0:0	4	sample_aspect_ratio
op	157:35	0:0	4	.
water	157:36	0:0	4	num
stmts	157:40	159:4	3	
water	157:40	0:0	4	{
water	158:8	0:0	4	outlink
op	158:15	0:0	4	->
water	158:17	0:0	4	sample_aspect_ratio
op	158:37	0:0	4	=
call	158:39	158:137	4	av_mul_q
arg	158:48	158:108	5	(AVRational){outlink->h*inlink->w,outlink->w*inlink->h}
water	158:48	0:0	6	(
water	158:49	0:0	6	AVRational
water	158:59	0:0	6	)
water	158:60	0:0	6	{
water	158:61	0:0	6	outlink
op	158:68	0:0	6	->
water	158:70	0:0	6	h
op	158:72	0:0	6	*
water	158:74	0:0	6	inlink
op	158:80	0:0	6	->
water	158:82	0:0	6	w
water	158:83	0:0	6	,
water	158:85	0:0	6	outlink
op	158:92	0:0	6	->
water	158:94	0:0	6	w
op	158:96	0:0	6	*
water	158:98	0:0	6	inlink
op	158:104	0:0	6	->
water	158:106	0:0	6	h
water	158:107	0:0	6	}
arg	158:110	158:137	5	inlink->sample_aspect_ratio
water	158:110	0:0	6	inlink
op	158:116	0:0	6	->
water	158:118	0:0	6	sample_aspect_ratio
water	158:138	0:0	4	;
water	159:4	0:0	4	}
else	159:6	160:66	2
stmts	160:8	160:66	3	
water	160:8	0:0	4	outlink
op	160:15	0:0	4	->
water	160:17	0:0	4	sample_aspect_ratio
op	160:37	0:0	4	=
water	160:39	0:0	4	inlink
op	160:45	0:0	4	->
water	160:47	0:0	4	sample_aspect_ratio
water	160:66	0:0	4	;
call	161:4	166:23	2	av_log
arg	161:11	161:14	3	ctx
water	161:11	0:0	4	ctx
arg	161:16	161:30	3	AV_LOG_VERBOSE
water	161:16	0:0	4	AV_LOG_VERBOSE
arg	161:32	161:104	3	"w:%d h:%d fmt:%s sar:%d/%d -> w:%d h:%d fmt:%s sar:%d/%d flags:0x%0x\n"
water	161:32	0:0	4	"w:%d h:%d fmt:%s sar:%d/%d -> w:%d h:%d fmt:%s sar:%d/%d flags:0x%0x\n"
arg	162:11	162:21	3	inlink->w
water	162:11	0:0	4	inlink
op	162:18	0:0	4	->
water	162:20	0:0	4	w
arg	162:23	162:33	3	inlink->h
water	162:23	0:0	4	inlink
op	162:30	0:0	4	->
water	162:32	0:0	4	h
arg	162:35	162:71	3	av_get_pix_fmt_name(inlink->format)
call	162:35	162:70	4	av_get_pix_fmt_name
arg	162:56	162:70	5	inlink->format
water	162:56	0:0	6	inlink
op	162:62	0:0	6	->
water	162:64	0:0	6	format
arg	163:11	163:42	3	inlink->sample_aspect_ratio.num
water	163:11	0:0	4	inlink
op	163:17	0:0	4	->
water	163:19	0:0	4	sample_aspect_ratio
op	163:38	0:0	4	.
water	163:39	0:0	4	num
arg	163:44	163:75	3	inlink->sample_aspect_ratio.den
water	163:44	0:0	4	inlink
op	163:50	0:0	4	->
water	163:52	0:0	4	sample_aspect_ratio
op	163:71	0:0	4	.
water	163:72	0:0	4	den
arg	164:11	164:21	3	outlink->w
water	164:11	0:0	4	outlink
op	164:18	0:0	4	->
water	164:20	0:0	4	w
arg	164:23	164:33	3	outlink->h
water	164:23	0:0	4	outlink
op	164:30	0:0	4	->
water	164:32	0:0	4	h
arg	164:35	164:71	3	av_get_pix_fmt_name(outlink->format)
call	164:35	164:70	4	av_get_pix_fmt_name
arg	164:55	164:70	5	outlink->format
water	164:55	0:0	6	outlink
op	164:62	0:0	6	->
water	164:64	0:0	6	format
arg	165:11	165:43	3	outlink->sample_aspect_ratio.num
water	165:11	0:0	4	outlink
op	165:18	0:0	4	->
water	165:20	0:0	4	sample_aspect_ratio
op	165:39	0:0	4	.
water	165:40	0:0	4	num
arg	165:45	165:77	3	outlink->sample_aspect_ratio.den
water	165:45	0:0	4	outlink
op	165:52	0:0	4	->
water	165:54	0:0	4	sample_aspect_ratio
op	165:73	0:0	4	.
water	165:74	0:0	4	den
arg	166:11	166:23	3	scale->flags
water	166:11	0:0	4	scale
op	166:16	0:0	4	->
water	166:18	0:0	4	flags
water	166:24	0:0	2	;
return	167:4	167:12	2	0
water	167:11	0:0	3	0
label	168:0	168:4	2	fail :
call	169:4	172:45	2	av_log
arg	169:11	169:15	3	NULL
water	169:11	0:0	4	NULL
arg	169:17	169:29	3	AV_LOG_ERROR
water	169:17	0:0	4	AV_LOG_ERROR
arg	170:11	171:89	3	"Error when evaluating the expression '%s'.\n""Maybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n"
water	170:11	0:0	4	"Error when evaluating the expression '%s'.\n"
water	171:11	0:0	4	"Maybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n"
arg	172:11	172:15	3	expr
water	172:11	0:0	4	expr
arg	172:17	172:30	3	scale->w_expr
water	172:17	0:0	4	scale
op	172:22	0:0	4	->
water	172:24	0:0	4	w_expr
arg	172:32	172:45	3	scale->h_expr
water	172:32	0:0	4	scale
op	172:37	0:0	4	->
water	172:39	0:0	4	h_expr
water	172:46	0:0	2	;
return	173:4	173:14	2	ret
water	173:11	0:0	3	ret
