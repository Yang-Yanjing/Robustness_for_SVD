func	1:0	54:0	0	static int	parse_interval
params	1:25	0:0	1	
param	1:26	1:44	2	Interval *	interval
param	1:46	1:64	2	int	interval_count
param	2:26	2:42	2	const char * *	buf
param	2:44	2:57	2	void *	log_ctx
stmnts	0:0	53:14	1	
decl	4:4	4:21	2	char	*intervalstr
decl	5:4	5:11	2	int	ret
op	6:4	0:0	2	*
water	6:5	0:0	2	buf
op	6:9	0:0	2	+=
call	6:12	6:31	2	strspn
arg	6:19	6:23	3	*buf
op	6:19	0:0	4	*
water	6:20	0:0	4	buf
arg	6:25	6:31	3	SPACES
water	6:25	0:0	4	SPACES
water	6:32	0:0	2	;
if	7:4	8:16	2	(! * * buf)
cond	7:8	7:11	3	! * * buf
op	7:8	0:0	4	!
op	7:9	0:0	4	*
op	7:10	0:0	4	*
water	7:11	0:0	4	buf
stmts	8:8	8:16	3	
return	8:8	8:16	4	0
water	8:15	0:0	5	0
call	10:4	10:40	2	memset
arg	10:11	10:19	3	interval
water	10:11	0:0	4	interval
arg	10:21	10:22	3	0
water	10:21	0:0	4	0
arg	10:24	10:40	3	sizeof(Interval)
op	10:24	0:0	4	sizeof
water	10:30	0:0	4	(
water	10:31	0:0	4	Interval
water	10:39	0:0	4	)
water	10:41	0:0	2	;
water	11:4	0:0	2	interval
op	11:12	0:0	2	->
water	11:14	0:0	2	index
op	11:20	0:0	2	=
water	11:22	0:0	2	interval_count
water	11:36	0:0	2	;
water	14:4	0:0	2	intervalstr
op	14:16	0:0	2	=
call	14:18	14:42	2	av_get_token
arg	14:31	14:34	3	buf
water	14:31	0:0	4	buf
arg	14:36	14:42	3	DELIMS
water	14:36	0:0	4	DELIMS
water	14:43	0:0	2	;
if	15:4	42:4	2	(intervalstr && intervalstr [ 0 ])
cond	15:8	15:36	3	intervalstr && intervalstr [ 0 ]
water	15:8	0:0	4	intervalstr
op	15:20	0:0	4	&&
water	15:23	0:0	4	intervalstr
op	15:34	0:0	4	[
water	15:35	0:0	4	0
op	15:36	0:0	4	]
stmts	15:39	42:4	3	
water	15:39	0:0	4	{
decl	16:8	16:25	4	char	*start
water	16:19	0:0	4	,
decl	16:8	16:25	4	char	*end
water	17:8	0:0	4	start
op	17:14	0:0	4	=
call	17:16	17:48	4	av_strtok
arg	17:26	17:37	5	intervalstr
water	17:26	0:0	6	intervalstr
arg	17:39	17:42	5	"-"
water	17:39	0:0	6	"-"
arg	17:44	17:48	5	&end
op	17:44	0:0	6	&
water	17:45	0:0	6	end
water	17:49	0:0	4	;
if	18:8	23:8	4	(( ret =av_parse_time (& interval -> start_ts ,start ,1 ) ) < 0)
cond	18:12	18:67	5	( ret =av_parse_time (& interval -> start_ts ,start ,1 ) ) < 0
water	18:12	0:0	6	(
water	18:13	0:0	6	ret
op	18:17	0:0	6	=
call	18:19	18:62	6	av_parse_time
arg	18:33	18:52	7	&interval->start_ts
op	18:33	0:0	8	&
water	18:34	0:0	8	interval
op	18:42	0:0	8	->
water	18:44	0:0	8	start_ts
arg	18:54	18:59	7	start
water	18:54	0:0	8	start
arg	18:61	18:62	7	1
water	18:61	0:0	8	1
water	18:63	0:0	6	)
op	18:65	0:0	6	<
water	18:67	0:0	6	0
stmts	18:70	23:8	5	
water	18:70	0:0	6	{
call	19:12	21:40	6	av_log
arg	19:19	19:26	7	log_ctx
water	19:19	0:0	8	log_ctx
arg	19:28	19:40	7	AV_LOG_ERROR
water	19:28	0:0	8	AV_LOG_ERROR
arg	20:19	20:76	7	"Invalid start time specification '%s' in interval #%d\n"
water	20:19	0:0	8	"Invalid start time specification '%s' in interval #%d\n"
arg	21:19	21:24	7	start
water	21:19	0:0	8	start
arg	21:26	21:40	7	interval_count
water	21:26	0:0	8	interval_count
water	21:41	0:0	6	;
goto	22:12	22:20	6	end
water	22:17	0:0	7	end
water	23:8	0:0	6	}
if	24:8	31:8	4	(end)
cond	24:12	24:12	5	end
water	24:12	0:0	6	end
stmts	24:17	31:8	5	
water	24:17	0:0	6	{
if	25:12	30:12	6	(( ret =av_parse_time (& interval -> end_ts ,end ,1 ) ) < 0)
cond	25:16	25:67	7	( ret =av_parse_time (& interval -> end_ts ,end ,1 ) ) < 0
water	25:16	0:0	8	(
water	25:17	0:0	8	ret
op	25:21	0:0	8	=
call	25:23	25:62	8	av_parse_time
arg	25:37	25:54	9	&interval->end_ts
op	25:37	0:0	10	&
water	25:38	0:0	10	interval
op	25:46	0:0	10	->
water	25:48	0:0	10	end_ts
arg	25:56	25:59	9	end
water	25:56	0:0	10	end
arg	25:61	25:62	9	1
water	25:61	0:0	10	1
water	25:63	0:0	8	)
op	25:65	0:0	8	<
water	25:67	0:0	8	0
stmts	25:70	30:12	7	
water	25:70	0:0	8	{
call	26:16	28:42	8	av_log
arg	26:23	26:30	9	log_ctx
water	26:23	0:0	10	log_ctx
arg	26:32	26:44	9	AV_LOG_ERROR
water	26:32	0:0	10	AV_LOG_ERROR
arg	27:23	27:78	9	"Invalid end time specification '%s' in interval #%d\n"
water	27:23	0:0	10	"Invalid end time specification '%s' in interval #%d\n"
arg	28:23	28:26	9	end
water	28:23	0:0	10	end
arg	28:28	28:42	9	interval_count
water	28:28	0:0	10	interval_count
water	28:43	0:0	8	;
goto	29:16	29:24	8	end
water	29:21	0:0	9	end
water	30:12	0:0	8	}
water	31:8	0:0	6	}
else	31:10	33:8	4
stmts	31:15	33:8	5	
water	31:15	0:0	6	{
water	32:12	0:0	6	interval
op	32:20	0:0	6	->
water	32:22	0:0	6	end_ts
op	32:29	0:0	6	=
water	32:31	0:0	6	INT64_MAX
water	32:40	0:0	6	;
water	33:8	0:0	6	}
if	34:8	41:8	4	(interval -> end_ts < interval -> start_ts)
cond	34:12	34:41	5	interval -> end_ts < interval -> start_ts
water	34:12	0:0	6	interval
op	34:20	0:0	6	->
water	34:22	0:0	6	end_ts
op	34:29	0:0	6	<
water	34:31	0:0	6	interval
op	34:39	0:0	6	->
water	34:41	0:0	6	start_ts
stmts	34:51	41:8	5	
water	34:51	0:0	6	{
call	35:12	38:45	6	av_log
arg	35:19	35:26	7	log_ctx
water	35:19	0:0	8	log_ctx
arg	35:28	35:40	7	AV_LOG_ERROR
water	35:28	0:0	8	AV_LOG_ERROR
arg	36:19	37:60	7	"Invalid end time '%s' in interval #%d: ""cannot be lesser than start time '%s'\n"
water	36:19	0:0	8	"Invalid end time '%s' in interval #%d: "
water	37:19	0:0	8	"cannot be lesser than start time '%s'\n"
arg	38:19	38:22	7	end
water	38:19	0:0	8	end
arg	38:24	38:38	7	interval_count
water	38:24	0:0	8	interval_count
arg	38:40	38:45	7	start
water	38:40	0:0	8	start
water	38:46	0:0	6	;
water	39:12	0:0	6	ret
op	39:16	0:0	6	=
call	39:18	39:32	6	AVERROR
arg	39:26	39:32	7	EINVAL
water	39:26	0:0	8	EINVAL
water	39:33	0:0	6	;
goto	40:12	40:20	6	end
water	40:17	0:0	7	end
water	41:8	0:0	6	}
water	42:4	0:0	4	}
else	42:6	47:4	2
stmts	42:11	47:4	3	
water	42:11	0:0	4	{
call	43:8	44:73	4	av_log
arg	43:15	43:22	5	log_ctx
water	43:15	0:0	6	log_ctx
arg	43:24	43:36	5	AV_LOG_ERROR
water	43:24	0:0	6	AV_LOG_ERROR
arg	44:15	44:57	5	"No interval specified for interval #%d\n"
water	44:15	0:0	6	"No interval specified for interval #%d\n"
arg	44:59	44:73	5	interval_count
water	44:59	0:0	6	interval_count
water	44:74	0:0	4	;
water	45:8	0:0	4	ret
op	45:12	0:0	4	=
call	45:14	45:28	4	AVERROR
arg	45:22	45:28	5	EINVAL
water	45:22	0:0	6	EINVAL
water	45:29	0:0	4	;
goto	46:8	46:16	4	end
water	46:13	0:0	5	end
water	47:4	0:0	4	}
water	49:4	0:0	2	ret
op	49:8	0:0	2	=
call	49:10	50:53	2	parse_commands
arg	49:25	49:44	3	&interval->commands
op	49:25	0:0	4	&
water	49:26	0:0	4	interval
op	49:34	0:0	4	->
water	49:36	0:0	4	commands
arg	49:46	49:68	3	&interval->nb_commands
op	49:46	0:0	4	&
water	49:47	0:0	4	interval
op	49:55	0:0	4	->
water	49:57	0:0	4	nb_commands
arg	50:25	50:39	3	interval_count
water	50:25	0:0	4	interval_count
arg	50:41	50:44	3	buf
water	50:41	0:0	4	buf
arg	50:46	50:53	3	log_ctx
water	50:46	0:0	4	log_ctx
water	50:54	0:0	2	;
label	51:0	51:3	2	end :
call	52:4	52:23	2	av_free
arg	52:12	52:23	3	intervalstr
water	52:12	0:0	4	intervalstr
water	52:24	0:0	2	;
return	53:4	53:14	2	ret
water	53:11	0:0	3	ret
