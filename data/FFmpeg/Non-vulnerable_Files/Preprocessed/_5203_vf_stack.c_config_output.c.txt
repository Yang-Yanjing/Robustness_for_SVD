func	1:0	49:0	0	static int	config_output
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	48:41	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:31	2	StackContext	*s
op	4:20	0:0	2	=
water	4:22	0:0	2	ctx
op	4:25	0:0	2	->
water	4:27	0:0	2	priv
decl	5:4	5:52	2	AVRational	time_base
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	inputs
op	5:38	0:0	2	[
water	5:39	0:0	2	0
op	5:40	0:0	2	]
op	5:41	0:0	2	->
water	5:43	0:0	2	time_base
decl	6:4	6:54	2	AVRational	frame_rate
op	6:26	0:0	2	=
water	6:28	0:0	2	ctx
op	6:31	0:0	2	->
water	6:33	0:0	2	inputs
op	6:39	0:0	2	[
water	6:40	0:0	2	0
op	6:41	0:0	2	]
op	6:42	0:0	2	->
water	6:44	0:0	2	frame_rate
decl	7:4	7:34	2	int	height
op	7:15	0:0	2	=
water	7:17	0:0	2	ctx
op	7:20	0:0	2	->
water	7:22	0:0	2	inputs
op	7:28	0:0	2	[
water	7:29	0:0	2	0
op	7:30	0:0	2	]
op	7:31	0:0	2	->
water	7:33	0:0	2	h
decl	8:4	8:33	2	int	width
op	8:14	0:0	2	=
water	8:16	0:0	2	ctx
op	8:19	0:0	2	->
water	8:21	0:0	2	inputs
op	8:27	0:0	2	[
water	8:28	0:0	2	0
op	8:29	0:0	2	]
op	8:30	0:0	2	->
water	8:32	0:0	2	w
decl	9:4	9:21	2	FFFrameSyncIn	*in
decl	10:4	10:14	2	int	i
water	10:9	0:0	2	,
decl	10:4	10:14	2	int	ret
if	11:4	19:4	2	(s -> is_vertical)
cond	11:8	11:11	3	s -> is_vertical
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	is_vertical
stmts	11:24	19:4	3	
water	11:24	0:0	4	{
for	12:8	18:8	4	(i = 1 ;i < s -> nb_inputs;i ++)
forinit	12:13	12:18	5	i = 1 ;
water	12:13	0:0	6	i
op	12:15	0:0	6	=
water	12:17	0:0	6	1
water	12:18	0:0	6	;
cond	12:20	12:27	5	i < s -> nb_inputs
water	12:20	0:0	6	i
op	12:22	0:0	6	<
water	12:24	0:0	6	s
op	12:25	0:0	6	->
water	12:27	0:0	6	nb_inputs
forexpr	12:38	12:39	5	i ++
water	12:38	0:0	6	i
op	12:39	0:0	6	++
stmts	12:43	18:8	5	
water	12:43	0:0	6	{
if	13:12	16:12	6	(ctx -> inputs [ i ] -> w != width)
cond	13:16	13:37	7	ctx -> inputs [ i ] -> w != width
water	13:16	0:0	8	ctx
op	13:19	0:0	8	->
water	13:21	0:0	8	inputs
op	13:27	0:0	8	[
water	13:28	0:0	8	i
op	13:29	0:0	8	]
op	13:30	0:0	8	->
water	13:32	0:0	8	w
op	13:34	0:0	8	!=
water	13:37	0:0	8	width
stmts	13:44	16:12	7	
water	13:44	0:0	8	{
call	14:16	14:129	8	av_log
arg	14:23	14:26	9	ctx
water	14:23	0:0	10	ctx
arg	14:28	14:40	9	AV_LOG_ERROR
water	14:28	0:0	10	AV_LOG_ERROR
arg	14:42	14:97	9	"Input %d width %d does not match input %d width %d.\n"
water	14:42	0:0	10	"Input %d width %d does not match input %d width %d.\n"
arg	14:99	14:100	9	i
water	14:99	0:0	10	i
arg	14:102	14:119	9	ctx->inputs[i]->w
water	14:102	0:0	10	ctx
op	14:105	0:0	10	->
water	14:107	0:0	10	inputs
op	14:113	0:0	10	[
water	14:114	0:0	10	i
op	14:115	0:0	10	]
op	14:116	0:0	10	->
water	14:118	0:0	10	w
arg	14:121	14:122	9	0
water	14:121	0:0	10	0
arg	14:124	14:129	9	width
water	14:124	0:0	10	width
water	14:130	0:0	8	;
return	15:16	15:38	8	AVERROR(EINVAL)
call	15:23	15:37	9	AVERROR
arg	15:31	15:37	10	EINVAL
water	15:31	0:0	11	EINVAL
water	16:12	0:0	8	}
water	17:12	0:0	6	height
op	17:19	0:0	6	+=
water	17:22	0:0	6	ctx
op	17:25	0:0	6	->
water	17:27	0:0	6	inputs
op	17:33	0:0	6	[
water	17:34	0:0	6	i
op	17:35	0:0	6	]
op	17:36	0:0	6	->
water	17:38	0:0	6	h
water	17:39	0:0	6	;
water	18:8	0:0	6	}
water	19:4	0:0	4	}
else	19:6	27:4	2
stmts	19:11	27:4	3	
water	19:11	0:0	4	{
for	20:8	26:8	4	(i = 1 ;i < s -> nb_inputs;i ++)
forinit	20:13	20:18	5	i = 1 ;
water	20:13	0:0	6	i
op	20:15	0:0	6	=
water	20:17	0:0	6	1
water	20:18	0:0	6	;
cond	20:20	20:27	5	i < s -> nb_inputs
water	20:20	0:0	6	i
op	20:22	0:0	6	<
water	20:24	0:0	6	s
op	20:25	0:0	6	->
water	20:27	0:0	6	nb_inputs
forexpr	20:38	20:39	5	i ++
water	20:38	0:0	6	i
op	20:39	0:0	6	++
stmts	20:43	26:8	5	
water	20:43	0:0	6	{
if	21:12	24:12	6	(ctx -> inputs [ i ] -> h != height)
cond	21:16	21:37	7	ctx -> inputs [ i ] -> h != height
water	21:16	0:0	8	ctx
op	21:19	0:0	8	->
water	21:21	0:0	8	inputs
op	21:27	0:0	8	[
water	21:28	0:0	8	i
op	21:29	0:0	8	]
op	21:30	0:0	8	->
water	21:32	0:0	8	h
op	21:34	0:0	8	!=
water	21:37	0:0	8	height
stmts	21:45	24:12	7	
water	21:45	0:0	8	{
call	22:16	22:132	8	av_log
arg	22:23	22:26	9	ctx
water	22:23	0:0	10	ctx
arg	22:28	22:40	9	AV_LOG_ERROR
water	22:28	0:0	10	AV_LOG_ERROR
arg	22:42	22:99	9	"Input %d height %d does not match input %d height %d.\n"
water	22:42	0:0	10	"Input %d height %d does not match input %d height %d.\n"
arg	22:101	22:102	9	i
water	22:101	0:0	10	i
arg	22:104	22:121	9	ctx->inputs[i]->h
water	22:104	0:0	10	ctx
op	22:107	0:0	10	->
water	22:109	0:0	10	inputs
op	22:115	0:0	10	[
water	22:116	0:0	10	i
op	22:117	0:0	10	]
op	22:118	0:0	10	->
water	22:120	0:0	10	h
arg	22:123	22:124	9	0
water	22:123	0:0	10	0
arg	22:126	22:132	9	height
water	22:126	0:0	10	height
water	22:133	0:0	8	;
return	23:16	23:38	8	AVERROR(EINVAL)
call	23:23	23:37	9	AVERROR
arg	23:31	23:37	10	EINVAL
water	23:31	0:0	11	EINVAL
water	24:12	0:0	8	}
water	25:12	0:0	6	width
op	25:18	0:0	6	+=
water	25:21	0:0	6	ctx
op	25:24	0:0	6	->
water	25:26	0:0	6	inputs
op	25:32	0:0	6	[
water	25:33	0:0	6	i
op	25:34	0:0	6	]
op	25:35	0:0	6	->
water	25:37	0:0	6	w
water	25:38	0:0	6	;
water	26:8	0:0	6	}
water	27:4	0:0	4	}
water	28:4	0:0	2	s
op	28:5	0:0	2	->
water	28:7	0:0	2	desc
op	28:12	0:0	2	=
call	28:14	28:49	2	av_pix_fmt_desc_get
arg	28:34	28:49	3	outlink->format
water	28:34	0:0	4	outlink
op	28:41	0:0	4	->
water	28:43	0:0	4	format
water	28:50	0:0	2	;
if	29:4	30:26	2	(! s -> desc)
cond	29:8	29:12	3	! s -> desc
op	29:8	0:0	4	!
water	29:9	0:0	4	s
op	29:10	0:0	4	->
water	29:12	0:0	4	desc
stmts	30:8	30:26	3	
return	30:8	30:26	4	AVERROR_BUG
water	30:15	0:0	5	AVERROR_BUG
water	31:4	0:0	2	s
op	31:5	0:0	2	->
water	31:7	0:0	2	nb_planes
op	31:17	0:0	2	=
call	31:19	31:58	2	av_pix_fmt_count_planes
arg	31:43	31:58	3	outlink->format
water	31:43	0:0	4	outlink
op	31:50	0:0	4	->
water	31:52	0:0	4	format
water	31:59	0:0	2	;
water	32:4	0:0	2	outlink
op	32:11	0:0	2	->
water	32:13	0:0	2	w
op	32:24	0:0	2	=
water	32:26	0:0	2	width
water	32:31	0:0	2	;
water	33:4	0:0	2	outlink
op	33:11	0:0	2	->
water	33:13	0:0	2	h
op	33:24	0:0	2	=
water	33:26	0:0	2	height
water	33:32	0:0	2	;
water	34:4	0:0	2	outlink
op	34:11	0:0	2	->
water	34:13	0:0	2	time_base
op	34:24	0:0	2	=
water	34:26	0:0	2	time_base
water	34:35	0:0	2	;
water	35:4	0:0	2	outlink
op	35:11	0:0	2	->
water	35:13	0:0	2	frame_rate
op	35:24	0:0	2	=
water	35:26	0:0	2	frame_rate
water	35:36	0:0	2	;
if	36:4	37:18	2	(( ret =ff_framesync_init (& s -> fs ,ctx ,s -> nb_inputs ) ) < 0)
cond	36:8	36:63	3	( ret =ff_framesync_init (& s -> fs ,ctx ,s -> nb_inputs ) ) < 0
water	36:8	0:0	4	(
water	36:9	0:0	4	ret
op	36:13	0:0	4	=
call	36:15	36:58	4	ff_framesync_init
arg	36:33	36:39	5	&s->fs
op	36:33	0:0	6	&
water	36:34	0:0	6	s
op	36:35	0:0	6	->
water	36:37	0:0	6	fs
arg	36:41	36:44	5	ctx
water	36:41	0:0	6	ctx
arg	36:46	36:58	5	s->nb_inputs
water	36:46	0:0	6	s
op	36:47	0:0	6	->
water	36:49	0:0	6	nb_inputs
water	36:59	0:0	4	)
op	36:61	0:0	4	<
water	36:63	0:0	4	0
stmts	37:8	37:18	3	
return	37:8	37:18	4	ret
water	37:15	0:0	5	ret
water	38:4	0:0	2	in
op	38:7	0:0	2	=
water	38:9	0:0	2	s
op	38:10	0:0	2	->
water	38:12	0:0	2	fs
op	38:14	0:0	2	.
water	38:15	0:0	2	in
water	38:17	0:0	2	;
water	39:4	0:0	2	s
op	39:5	0:0	2	->
water	39:7	0:0	2	fs
op	39:9	0:0	2	.
water	39:10	0:0	2	opaque
op	39:17	0:0	2	=
water	39:19	0:0	2	s
water	39:20	0:0	2	;
water	40:4	0:0	2	s
op	40:5	0:0	2	->
water	40:7	0:0	2	fs
op	40:9	0:0	2	.
water	40:10	0:0	2	on_event
op	40:19	0:0	2	=
water	40:21	0:0	2	process_frame
water	40:34	0:0	2	;
for	41:4	47:4	2	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	41:9	41:14	3	i = 0 ;
water	41:9	0:0	4	i
op	41:11	0:0	4	=
water	41:13	0:0	4	0
water	41:14	0:0	4	;
cond	41:16	41:23	3	i < s -> nb_inputs
water	41:16	0:0	4	i
op	41:18	0:0	4	<
water	41:20	0:0	4	s
op	41:21	0:0	4	->
water	41:23	0:0	4	nb_inputs
forexpr	41:34	41:35	3	i ++
water	41:34	0:0	4	i
op	41:35	0:0	4	++
stmts	41:39	47:4	3	
water	41:39	0:0	4	{
decl	42:8	42:45	4	AVFilterLink	*inlink
op	42:29	0:0	4	=
water	42:31	0:0	4	ctx
op	42:34	0:0	4	->
water	42:36	0:0	4	inputs
op	42:42	0:0	4	[
water	42:43	0:0	4	i
op	42:44	0:0	4	]
water	43:8	0:0	4	in
op	43:10	0:0	4	[
water	43:11	0:0	4	i
op	43:12	0:0	4	]
op	43:13	0:0	4	.
water	43:14	0:0	4	time_base
op	43:24	0:0	4	=
water	43:26	0:0	4	inlink
op	43:32	0:0	4	->
water	43:34	0:0	4	time_base
water	43:43	0:0	4	;
water	44:8	0:0	4	in
op	44:10	0:0	4	[
water	44:11	0:0	4	i
op	44:12	0:0	4	]
op	44:13	0:0	4	.
water	44:14	0:0	4	sync
op	44:21	0:0	4	=
water	44:23	0:0	4	1
water	44:24	0:0	4	;
water	45:8	0:0	4	in
op	45:10	0:0	4	[
water	45:11	0:0	4	i
op	45:12	0:0	4	]
op	45:13	0:0	4	.
water	45:14	0:0	4	before
op	45:21	0:0	4	=
water	45:23	0:0	4	EXT_STOP
water	45:31	0:0	4	;
water	46:8	0:0	4	in
op	46:10	0:0	4	[
water	46:11	0:0	4	i
op	46:12	0:0	4	]
op	46:13	0:0	4	.
water	46:14	0:0	4	after
op	46:21	0:0	4	=
water	46:23	0:0	4	EXT_INFINITY
water	46:35	0:0	4	;
water	47:4	0:0	4	}
return	48:4	48:41	2	ff_framesync_configure(&s->fs)
call	48:11	48:40	3	ff_framesync_configure
arg	48:34	48:40	4	&s->fs
op	48:34	0:0	5	&
water	48:35	0:0	5	s
op	48:36	0:0	5	->
water	48:38	0:0	5	fs
