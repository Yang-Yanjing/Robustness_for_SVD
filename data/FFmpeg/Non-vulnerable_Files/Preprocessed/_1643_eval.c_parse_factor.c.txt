func	1:0	25:0	0	static int	parse_factor
params	1:23	0:0	1	
param	1:24	1:34	2	AVExpr * *	e
param	1:36	1:45	2	Parser *	p
stmnts	0:0	24:12	1	
decl	3:4	3:24	2	int	sign
water	3:12	0:0	2	,
decl	3:4	3:24	2	int	sign2
water	3:19	0:0	2	,
decl	3:4	3:24	2	int	ret
decl	4:4	4:24	2	AVExpr	*e0
water	4:14	0:0	2	,
decl	4:4	4:24	2	AVExpr	*e1
water	4:19	0:0	2	,
decl	4:4	4:24	2	AVExpr	*e2
if	5:4	6:18	2	(( ret =parse_dB (& e0 ,p ,& sign ) ) < 0)
cond	5:8	5:42	3	( ret =parse_dB (& e0 ,p ,& sign ) ) < 0
water	5:8	0:0	4	(
water	5:9	0:0	4	ret
op	5:13	0:0	4	=
call	5:15	5:37	4	parse_dB
arg	5:24	5:27	5	&e0
op	5:24	0:0	6	&
water	5:25	0:0	6	e0
arg	5:29	5:30	5	p
water	5:29	0:0	6	p
arg	5:32	5:37	5	&sign
op	5:32	0:0	6	&
water	5:33	0:0	6	sign
water	5:38	0:0	4	)
op	5:40	0:0	4	<
water	5:42	0:0	4	0
stmts	6:8	6:18	3	
return	6:8	6:18	4	ret
water	6:15	0:0	5	ret
while	7:4	21:4	2	(p -> s [ 0 ] == '^')
cond	7:10	7:19	3	p -> s [ 0 ] == '^'
water	7:10	0:0	4	p
op	7:11	0:0	4	->
water	7:13	0:0	4	s
op	7:14	0:0	4	[
water	7:15	0:0	4	0
op	7:16	0:0	4	]
op	7:17	0:0	4	==
water	7:19	0:0	4	'^'
stmts	7:23	21:4	3	
water	7:23	0:0	4	{
water	8:8	0:0	4	e1
op	8:11	0:0	4	=
water	8:13	0:0	4	e0
water	8:15	0:0	4	;
water	9:8	0:0	4	p
op	9:9	0:0	4	->
water	9:11	0:0	4	s
op	9:12	0:0	4	++
water	9:14	0:0	4	;
if	10:8	13:8	4	(( ret =parse_dB (& e2 ,p ,& sign2 ) ) < 0)
cond	10:12	10:47	5	( ret =parse_dB (& e2 ,p ,& sign2 ) ) < 0
water	10:12	0:0	6	(
water	10:13	0:0	6	ret
op	10:17	0:0	6	=
call	10:19	10:42	6	parse_dB
arg	10:28	10:31	7	&e2
op	10:28	0:0	8	&
water	10:29	0:0	8	e2
arg	10:33	10:34	7	p
water	10:33	0:0	8	p
arg	10:36	10:42	7	&sign2
op	10:36	0:0	8	&
water	10:37	0:0	8	sign2
water	10:43	0:0	6	)
op	10:45	0:0	6	<
water	10:47	0:0	6	0
stmts	10:50	13:8	5	
water	10:50	0:0	6	{
call	11:12	11:27	6	av_expr_free
arg	11:25	11:27	7	e1
water	11:25	0:0	8	e1
water	11:28	0:0	6	;
return	12:12	12:22	6	ret
water	12:19	0:0	7	ret
water	13:8	0:0	6	}
water	14:8	0:0	4	e0
op	14:11	0:0	4	=
call	14:13	14:44	4	make_eval_expr
arg	14:28	14:33	5	e_pow
water	14:28	0:0	6	e_pow
arg	14:35	14:36	5	1
water	14:35	0:0	6	1
arg	14:38	14:40	5	e1
water	14:38	0:0	6	e1
arg	14:42	14:44	5	e2
water	14:42	0:0	6	e2
water	14:45	0:0	4	;
if	15:8	19:8	4	(! e0)
cond	15:12	15:13	5	! e0
op	15:12	0:0	6	!
water	15:13	0:0	6	e0
stmts	15:17	19:8	5	
water	15:17	0:0	6	{
call	16:12	16:27	6	av_expr_free
arg	16:25	16:27	7	e1
water	16:25	0:0	8	e1
water	16:28	0:0	6	;
call	17:12	17:27	6	av_expr_free
arg	17:25	17:27	7	e2
water	17:25	0:0	8	e2
water	17:28	0:0	6	;
return	18:12	18:34	6	AVERROR(ENOMEM)
call	18:19	18:33	7	AVERROR
arg	18:27	18:33	8	ENOMEM
water	18:27	0:0	9	ENOMEM
water	19:8	0:0	6	}
if	20:8	20:58	4	(e0 -> param [ 1 ])
cond	20:12	20:23	5	e0 -> param [ 1 ]
water	20:12	0:0	6	e0
op	20:14	0:0	6	->
water	20:16	0:0	6	param
op	20:21	0:0	6	[
water	20:22	0:0	6	1
op	20:23	0:0	6	]
stmts	20:26	20:58	5	
water	20:26	0:0	6	e0
op	20:28	0:0	6	->
water	20:30	0:0	6	param
op	20:35	0:0	6	[
water	20:36	0:0	6	1
op	20:37	0:0	6	]
op	20:38	0:0	6	->
water	20:40	0:0	6	value
op	20:46	0:0	6	*=
water	20:49	0:0	6	(
water	20:50	0:0	6	sign2
op	20:55	0:0	6	|
water	20:56	0:0	6	1
water	20:57	0:0	6	)
water	20:58	0:0	6	;
water	21:4	0:0	4	}
if	22:4	22:33	2	(e0)
cond	22:8	22:8	3	e0
water	22:8	0:0	4	e0
stmts	22:12	22:33	3	
water	22:12	0:0	4	e0
op	22:14	0:0	4	->
water	22:16	0:0	4	value
op	22:22	0:0	4	*=
water	22:25	0:0	4	(
water	22:26	0:0	4	sign
op	22:30	0:0	4	|
water	22:31	0:0	4	1
water	22:32	0:0	4	)
water	22:33	0:0	4	;
op	23:4	0:0	2	*
water	23:5	0:0	2	e
op	23:7	0:0	2	=
water	23:9	0:0	2	e0
water	23:11	0:0	2	;
return	24:4	24:12	2	0
water	24:11	0:0	3	0
