func	1:0	28:0	0	static int	acrossfade_request_frame
params	1:35	0:0	1	
param	1:36	1:57	2	AVFilterLink *	outlink
stmnts	0:0	27:14	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:35	2	AudioFadeContext	*s
op	4:24	0:0	2	=
water	4:26	0:0	2	ctx
op	4:29	0:0	2	->
water	4:31	0:0	2	priv
decl	5:4	5:15	2	int	ret
op	5:12	0:0	2	=
water	5:14	0:0	2	0
if	6:4	15:4	2	(! s -> cf0_eof)
cond	6:8	6:12	3	! s -> cf0_eof
op	6:8	0:0	4	!
water	6:9	0:0	4	s
op	6:10	0:0	4	->
water	6:12	0:0	4	cf0_eof
stmts	6:21	15:4	3	
water	6:21	0:0	4	{
decl	7:8	7:42	4	AVFilterLink	*cf0
op	7:26	0:0	4	=
water	7:28	0:0	4	ctx
op	7:31	0:0	4	->
water	7:33	0:0	4	inputs
op	7:39	0:0	4	[
water	7:40	0:0	4	0
op	7:41	0:0	4	]
water	8:8	0:0	4	ret
op	8:12	0:0	4	=
call	8:14	8:34	4	ff_request_frame
arg	8:31	8:34	5	cf0
water	8:31	0:0	6	cf0
water	8:35	0:0	4	;
if	9:8	10:22	4	(ret < 0 && ret != AVERROR_EOF)
cond	9:12	9:30	5	ret < 0 && ret != AVERROR_EOF
water	9:12	0:0	6	ret
op	9:16	0:0	6	<
water	9:18	0:0	6	0
op	9:20	0:0	6	&&
water	9:23	0:0	6	ret
op	9:27	0:0	6	!=
water	9:30	0:0	6	AVERROR_EOF
stmts	10:12	10:22	5	
return	10:12	10:22	6	ret
water	10:19	0:0	7	ret
if	11:8	14:8	4	(ret == AVERROR_EOF)
cond	11:12	11:19	5	ret == AVERROR_EOF
water	11:12	0:0	6	ret
op	11:16	0:0	6	==
water	11:19	0:0	6	AVERROR_EOF
stmts	11:32	14:8	5	
water	11:32	0:0	6	{
water	12:12	0:0	6	s
op	12:13	0:0	6	->
water	12:15	0:0	6	cf0_eof
op	12:23	0:0	6	=
water	12:25	0:0	6	1
water	12:26	0:0	6	;
water	13:12	0:0	6	ret
op	13:16	0:0	6	=
water	13:18	0:0	6	0
water	13:19	0:0	6	;
water	14:8	0:0	6	}
water	15:4	0:0	4	}
else	15:6	26:4	2
stmts	15:11	26:4	3	
water	15:11	0:0	4	{
decl	16:8	16:42	4	AVFilterLink	*cf1
op	16:26	0:0	4	=
water	16:28	0:0	4	ctx
op	16:31	0:0	4	->
water	16:33	0:0	4	inputs
op	16:39	0:0	4	[
water	16:40	0:0	4	1
op	16:41	0:0	4	]
decl	17:8	17:55	4	int	nb_samples
op	17:23	0:0	4	=
call	17:25	17:54	5	av_audio_fifo_size
arg	17:44	17:54	6	s->fifo[1]
water	17:44	0:0	7	s
op	17:45	0:0	7	->
water	17:47	0:0	7	fifo
op	17:51	0:0	7	[
water	17:52	0:0	7	1
op	17:53	0:0	7	]
water	18:8	0:0	4	ret
op	18:12	0:0	4	=
call	18:14	18:34	4	ff_request_frame
arg	18:31	18:34	5	cf1
water	18:31	0:0	6	cf1
water	18:35	0:0	4	;
if	19:8	25:8	4	(ret == AVERROR_EOF && nb_samples > 0)
cond	19:12	19:47	5	ret == AVERROR_EOF && nb_samples > 0
water	19:12	0:0	6	ret
op	19:16	0:0	6	==
water	19:19	0:0	6	AVERROR_EOF
op	19:31	0:0	6	&&
water	19:34	0:0	6	nb_samples
op	19:45	0:0	6	>
water	19:47	0:0	6	0
stmts	19:50	25:8	5	
water	19:50	0:0	6	{
decl	20:12	20:67	6	AVFrame	*out
op	20:25	0:0	6	=
call	20:27	20:66	7	ff_get_audio_buffer
arg	20:47	20:54	8	outlink
water	20:47	0:0	9	outlink
arg	20:56	20:66	8	nb_samples
water	20:56	0:0	9	nb_samples
if	21:12	22:38	6	(! out)
cond	21:16	21:17	7	! out
op	21:16	0:0	8	!
water	21:17	0:0	8	out
stmts	22:16	22:38	7	
return	22:16	22:38	8	AVERROR(ENOMEM)
call	22:23	22:37	9	AVERROR
arg	22:31	22:37	10	ENOMEM
water	22:31	0:0	11	ENOMEM
call	23:12	23:82	6	av_audio_fifo_read
arg	23:31	23:41	7	s->fifo[1]
water	23:31	0:0	8	s
op	23:32	0:0	8	->
water	23:34	0:0	8	fifo
op	23:38	0:0	8	[
water	23:39	0:0	8	1
op	23:40	0:0	8	]
arg	23:43	23:70	7	(void**)out->extended_data
water	23:43	0:0	8	(
water	23:44	0:0	8	void
op	23:49	0:0	8	*
op	23:50	0:0	8	*
water	23:51	0:0	8	)
water	23:52	0:0	8	out
op	23:55	0:0	8	->
water	23:57	0:0	8	extended_data
arg	23:72	23:82	7	nb_samples
water	23:72	0:0	8	nb_samples
water	23:83	0:0	6	;
water	24:12	0:0	6	ret
op	24:16	0:0	6	=
call	24:18	24:46	6	ff_filter_frame
arg	24:34	24:41	7	outlink
water	24:34	0:0	8	outlink
arg	24:43	24:46	7	out
water	24:43	0:0	8	out
water	24:47	0:0	6	;
water	25:8	0:0	6	}
water	26:4	0:0	4	}
return	27:4	27:14	2	ret
water	27:11	0:0	3	ret
