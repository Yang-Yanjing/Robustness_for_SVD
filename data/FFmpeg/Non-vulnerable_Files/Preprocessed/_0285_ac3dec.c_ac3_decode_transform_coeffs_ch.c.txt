func	1:0	74:0	0	static void	ac3_decode_transform_coeffs_ch
params	1:42	0:0	1	
param	1:43	1:62	2	AC3DecodeContext *	s
param	1:64	1:76	2	int	ch_index
param	1:78	1:92	2	mant_groups *	m
stmnts	0:0	73:4	1	
decl	3:4	3:44	2	int	start_freq
op	3:19	0:0	2	=
water	3:21	0:0	2	s
op	3:22	0:0	2	->
water	3:24	0:0	2	start_freq
op	3:34	0:0	2	[
water	3:35	0:0	2	ch_index
op	3:43	0:0	2	]
decl	4:4	4:42	2	int	end_freq
op	4:19	0:0	2	=
water	4:21	0:0	2	s
op	4:22	0:0	2	->
water	4:24	0:0	2	end_freq
op	4:32	0:0	2	[
water	4:33	0:0	2	ch_index
op	4:41	0:0	2	]
decl	5:4	5:37	2	uint8_t	*baps
op	5:19	0:0	2	=
water	5:21	0:0	2	s
op	5:22	0:0	2	->
water	5:24	0:0	2	bap
op	5:27	0:0	2	[
water	5:28	0:0	2	ch_index
op	5:36	0:0	2	]
decl	6:4	6:39	2	int8_t	*exps
op	6:19	0:0	2	=
water	6:21	0:0	2	s
op	6:22	0:0	2	->
water	6:24	0:0	2	dexps
op	6:29	0:0	2	[
water	6:30	0:0	2	ch_index
op	6:38	0:0	2	]
decl	7:4	7:47	2	int32_t	*coeffs
op	7:20	0:0	2	=
water	7:22	0:0	2	s
op	7:23	0:0	2	->
water	7:25	0:0	2	fixed_coeffs
op	7:37	0:0	2	[
water	7:38	0:0	2	ch_index
op	7:46	0:0	2	]
decl	8:4	8:69	2	int	dither
op	8:19	0:0	2	=
water	8:21	0:0	2	(
water	8:22	0:0	2	ch_index
op	8:31	0:0	2	==
water	8:34	0:0	2	CPL_CH
water	8:40	0:0	2	)
op	8:42	0:0	2	||
water	8:45	0:0	2	s
op	8:46	0:0	2	->
water	8:48	0:0	2	dither_flag
op	8:59	0:0	2	[
water	8:60	0:0	2	ch_index
op	8:68	0:0	2	]
decl	9:4	9:32	2	GetBitContext	*gbc
op	9:23	0:0	2	=
op	9:25	0:0	2	&
water	9:26	0:0	2	s
op	9:27	0:0	2	->
water	9:29	0:0	2	gbc
decl	10:4	10:12	2	int	freq
for	11:4	73:4	2	(freq = start_freq ;freq < end_freq;freq ++)
forinit	11:9	11:26	3	freq = start_freq ;
water	11:9	0:0	4	freq
op	11:14	0:0	4	=
water	11:16	0:0	4	start_freq
water	11:26	0:0	4	;
cond	11:28	11:35	3	freq < end_freq
water	11:28	0:0	4	freq
op	11:33	0:0	4	<
water	11:35	0:0	4	end_freq
forexpr	11:45	11:49	3	freq ++
water	11:45	0:0	4	freq
op	11:49	0:0	4	++
stmts	11:53	73:4	3	
water	11:53	0:0	4	{
decl	12:8	12:28	4	int	bap
op	12:16	0:0	4	=
water	12:18	0:0	4	baps
op	12:22	0:0	4	[
water	12:23	0:0	4	freq
op	12:27	0:0	4	]
decl	13:8	13:20	4	int	mantissa
switch	14:8	71:8	4	(bap)
cond	14:16	14:16	5	bap
water	14:16	0:0	6	bap
stmts	14:21	71:8	5	
water	14:21	0:0	6	{
label	15:8	15:14	6	case 0 :
if	17:12	18:79	6	(dither)
cond	17:16	17:16	7	dither
water	17:16	0:0	8	dither
stmts	18:16	18:79	7	
water	18:16	0:0	8	mantissa
op	18:25	0:0	8	=
water	18:27	0:0	8	(
water	18:28	0:0	8	(
water	18:29	0:0	8	(
call	18:30	18:55	8	av_lfg_get
arg	18:41	18:55	9	&s->dith_state
op	18:41	0:0	10	&
water	18:42	0:0	10	s
op	18:43	0:0	10	->
water	18:45	0:0	10	dith_state
op	18:56	0:0	8	>>
water	18:58	0:0	8	8
water	18:59	0:0	8	)
op	18:60	0:0	8	*
water	18:61	0:0	8	181
water	18:64	0:0	8	)
op	18:65	0:0	8	>>
water	18:67	0:0	8	8
water	18:68	0:0	8	)
op	18:70	0:0	8	-
water	18:72	0:0	8	5931008
water	18:79	0:0	8	;
else	19:12	20:28	6
stmts	20:16	20:28	7	
water	20:16	0:0	8	mantissa
op	20:25	0:0	8	=
water	20:27	0:0	8	0
water	20:28	0:0	8	;
break	21:12	21:17	6	
label	22:8	22:14	6	case 1 :
if	23:12	26:12	6	(m -> b1)
cond	23:16	23:19	7	m -> b1
water	23:16	0:0	8	m
op	23:17	0:0	8	->
water	23:19	0:0	8	b1
stmts	23:23	26:12	7	
water	23:23	0:0	8	{
water	24:16	0:0	8	m
op	24:17	0:0	8	->
water	24:19	0:0	8	b1
op	24:21	0:0	8	--
water	24:23	0:0	8	;
water	25:16	0:0	8	mantissa
op	25:25	0:0	8	=
water	25:27	0:0	8	m
op	25:28	0:0	8	->
water	25:30	0:0	8	b1_mant
op	25:37	0:0	8	[
water	25:38	0:0	8	m
op	25:39	0:0	8	->
water	25:41	0:0	8	b1
op	25:43	0:0	8	]
water	25:44	0:0	8	;
water	26:12	0:0	8	}
else	26:14	32:12	6
stmts	26:19	32:12	7	
water	26:19	0:0	8	{
decl	27:16	27:48	8	int	bits
op	27:30	0:0	8	=
call	27:32	27:47	9	get_bits
arg	27:41	27:44	10	gbc
water	27:41	0:0	11	gbc
arg	27:46	27:47	10	5
water	27:46	0:0	11	5
water	28:16	0:0	8	mantissa
op	28:30	0:0	8	=
water	28:32	0:0	8	b1_mantissas
op	28:44	0:0	8	[
water	28:45	0:0	8	bits
op	28:49	0:0	8	]
op	28:50	0:0	8	[
water	28:51	0:0	8	0
op	28:52	0:0	8	]
water	28:53	0:0	8	;
water	29:16	0:0	8	m
op	29:17	0:0	8	->
water	29:19	0:0	8	b1_mant
op	29:26	0:0	8	[
water	29:27	0:0	8	1
op	29:28	0:0	8	]
op	29:30	0:0	8	=
water	29:32	0:0	8	b1_mantissas
op	29:44	0:0	8	[
water	29:45	0:0	8	bits
op	29:49	0:0	8	]
op	29:50	0:0	8	[
water	29:51	0:0	8	1
op	29:52	0:0	8	]
water	29:53	0:0	8	;
water	30:16	0:0	8	m
op	30:17	0:0	8	->
water	30:19	0:0	8	b1_mant
op	30:26	0:0	8	[
water	30:27	0:0	8	0
op	30:28	0:0	8	]
op	30:30	0:0	8	=
water	30:32	0:0	8	b1_mantissas
op	30:44	0:0	8	[
water	30:45	0:0	8	bits
op	30:49	0:0	8	]
op	30:50	0:0	8	[
water	30:51	0:0	8	2
op	30:52	0:0	8	]
water	30:53	0:0	8	;
water	31:16	0:0	8	m
op	31:17	0:0	8	->
water	31:19	0:0	8	b1
op	31:30	0:0	8	=
water	31:32	0:0	8	2
water	31:33	0:0	8	;
water	32:12	0:0	8	}
break	33:12	33:17	6	
label	34:8	34:14	6	case 2 :
if	35:12	38:12	6	(m -> b2)
cond	35:16	35:19	7	m -> b2
water	35:16	0:0	8	m
op	35:17	0:0	8	->
water	35:19	0:0	8	b2
stmts	35:23	38:12	7	
water	35:23	0:0	8	{
water	36:16	0:0	8	m
op	36:17	0:0	8	->
water	36:19	0:0	8	b2
op	36:21	0:0	8	--
water	36:23	0:0	8	;
water	37:16	0:0	8	mantissa
op	37:25	0:0	8	=
water	37:27	0:0	8	m
op	37:28	0:0	8	->
water	37:30	0:0	8	b2_mant
op	37:37	0:0	8	[
water	37:38	0:0	8	m
op	37:39	0:0	8	->
water	37:41	0:0	8	b2
op	37:43	0:0	8	]
water	37:44	0:0	8	;
water	38:12	0:0	8	}
else	38:14	44:12	6
stmts	38:19	44:12	7	
water	38:19	0:0	8	{
decl	39:16	39:48	8	int	bits
op	39:30	0:0	8	=
call	39:32	39:47	9	get_bits
arg	39:41	39:44	10	gbc
water	39:41	0:0	11	gbc
arg	39:46	39:47	10	7
water	39:46	0:0	11	7
water	40:16	0:0	8	mantissa
op	40:30	0:0	8	=
water	40:32	0:0	8	b2_mantissas
op	40:44	0:0	8	[
water	40:45	0:0	8	bits
op	40:49	0:0	8	]
op	40:50	0:0	8	[
water	40:51	0:0	8	0
op	40:52	0:0	8	]
water	40:53	0:0	8	;
water	41:16	0:0	8	m
op	41:17	0:0	8	->
water	41:19	0:0	8	b2_mant
op	41:26	0:0	8	[
water	41:27	0:0	8	1
op	41:28	0:0	8	]
op	41:30	0:0	8	=
water	41:32	0:0	8	b2_mantissas
op	41:44	0:0	8	[
water	41:45	0:0	8	bits
op	41:49	0:0	8	]
op	41:50	0:0	8	[
water	41:51	0:0	8	1
op	41:52	0:0	8	]
water	41:53	0:0	8	;
water	42:16	0:0	8	m
op	42:17	0:0	8	->
water	42:19	0:0	8	b2_mant
op	42:26	0:0	8	[
water	42:27	0:0	8	0
op	42:28	0:0	8	]
op	42:30	0:0	8	=
water	42:32	0:0	8	b2_mantissas
op	42:44	0:0	8	[
water	42:45	0:0	8	bits
op	42:49	0:0	8	]
op	42:50	0:0	8	[
water	42:51	0:0	8	2
op	42:52	0:0	8	]
water	42:53	0:0	8	;
water	43:16	0:0	8	m
op	43:17	0:0	8	->
water	43:19	0:0	8	b2
op	43:30	0:0	8	=
water	43:32	0:0	8	2
water	43:33	0:0	8	;
water	44:12	0:0	8	}
break	45:12	45:17	6	
label	46:8	46:14	6	case 3 :
water	47:12	0:0	6	mantissa
op	47:21	0:0	6	=
water	47:23	0:0	6	b3_mantissas
op	47:35	0:0	6	[
call	47:36	47:51	6	get_bits
arg	47:45	47:48	7	gbc
water	47:45	0:0	8	gbc
arg	47:50	47:51	7	3
water	47:50	0:0	8	3
op	47:52	0:0	6	]
water	47:53	0:0	6	;
break	48:12	48:17	6	
label	49:8	49:14	6	case 4 :
if	50:12	53:12	6	(m -> b4)
cond	50:16	50:19	7	m -> b4
water	50:16	0:0	8	m
op	50:17	0:0	8	->
water	50:19	0:0	8	b4
stmts	50:23	53:12	7	
water	50:23	0:0	8	{
water	51:16	0:0	8	m
op	51:17	0:0	8	->
water	51:19	0:0	8	b4
op	51:22	0:0	8	=
water	51:24	0:0	8	0
water	51:25	0:0	8	;
water	52:16	0:0	8	mantissa
op	52:25	0:0	8	=
water	52:27	0:0	8	m
op	52:28	0:0	8	->
water	52:30	0:0	8	b4_mant
water	52:37	0:0	8	;
water	53:12	0:0	8	}
else	53:14	58:12	6
stmts	53:19	58:12	7	
water	53:19	0:0	8	{
decl	54:16	54:45	8	int	bits
op	54:27	0:0	8	=
call	54:29	54:44	9	get_bits
arg	54:38	54:41	10	gbc
water	54:38	0:0	11	gbc
arg	54:43	54:44	10	7
water	54:43	0:0	11	7
water	55:16	0:0	8	mantissa
op	55:27	0:0	8	=
water	55:29	0:0	8	b4_mantissas
op	55:41	0:0	8	[
water	55:42	0:0	8	bits
op	55:46	0:0	8	]
op	55:47	0:0	8	[
water	55:48	0:0	8	0
op	55:49	0:0	8	]
water	55:50	0:0	8	;
water	56:16	0:0	8	m
op	56:17	0:0	8	->
water	56:19	0:0	8	b4_mant
op	56:27	0:0	8	=
water	56:29	0:0	8	b4_mantissas
op	56:41	0:0	8	[
water	56:42	0:0	8	bits
op	56:46	0:0	8	]
op	56:47	0:0	8	[
water	56:48	0:0	8	1
op	56:49	0:0	8	]
water	56:50	0:0	8	;
water	57:16	0:0	8	m
op	57:17	0:0	8	->
water	57:19	0:0	8	b4
op	57:27	0:0	8	=
water	57:29	0:0	8	1
water	57:30	0:0	8	;
water	58:12	0:0	8	}
break	59:12	59:17	6	
label	60:8	60:14	6	case 5 :
water	61:12	0:0	6	mantissa
op	61:21	0:0	6	=
water	61:23	0:0	6	b5_mantissas
op	61:35	0:0	6	[
call	61:36	61:51	6	get_bits
arg	61:45	61:48	7	gbc
water	61:45	0:0	8	gbc
arg	61:50	61:51	7	4
water	61:50	0:0	8	4
op	61:52	0:0	6	]
water	61:53	0:0	6	;
break	62:12	62:17	6	
label	63:8	63:15	6	default :
if	65:12	68:12	6	(bap > 15)
cond	65:16	65:22	7	bap > 15
water	65:16	0:0	8	bap
op	65:20	0:0	8	>
water	65:22	0:0	8	15
stmts	65:26	68:12	7	
water	65:26	0:0	8	{
call	66:16	66:87	8	av_log
arg	66:23	66:31	9	s->avctx
water	66:23	0:0	10	s
op	66:24	0:0	10	->
water	66:26	0:0	10	avctx
arg	66:33	66:45	9	AV_LOG_ERROR
water	66:33	0:0	10	AV_LOG_ERROR
arg	66:47	66:82	9	"bap %d is invalid in plain AC-3\n"
water	66:47	0:0	10	"bap %d is invalid in plain AC-3\n"
arg	66:84	66:87	9	bap
water	66:84	0:0	10	bap
water	66:88	0:0	8	;
water	67:16	0:0	8	bap
op	67:20	0:0	8	=
water	67:22	0:0	8	15
water	67:24	0:0	8	;
water	68:12	0:0	8	}
water	69:12	0:0	6	mantissa
op	69:21	0:0	6	=
water	69:23	0:0	6	(
water	69:24	0:0	6	unsigned
water	69:32	0:0	6	)
call	69:33	69:69	6	get_sbits
arg	69:43	69:46	7	gbc
water	69:43	0:0	8	gbc
arg	69:48	69:69	7	quantization_tab[bap]
water	69:48	0:0	8	quantization_tab
op	69:64	0:0	8	[
water	69:65	0:0	8	bap
op	69:68	0:0	8	]
op	69:71	0:0	6	<<
water	69:74	0:0	6	(
water	69:75	0:0	6	24
op	69:78	0:0	6	-
water	69:80	0:0	6	quantization_tab
op	69:96	0:0	6	[
water	69:97	0:0	6	bap
op	69:100	0:0	6	]
water	69:101	0:0	6	)
water	69:102	0:0	6	;
break	70:12	70:17	6	
water	71:8	0:0	6	}
water	72:8	0:0	4	coeffs
op	72:14	0:0	4	[
water	72:15	0:0	4	freq
op	72:19	0:0	4	]
op	72:21	0:0	4	=
water	72:23	0:0	4	mantissa
op	72:32	0:0	4	>>
water	72:35	0:0	4	exps
op	72:39	0:0	4	[
water	72:40	0:0	4	freq
op	72:44	0:0	4	]
water	72:45	0:0	4	;
water	73:4	0:0	4	}
