func	1:0	41:0	0	static int	config_props
params	1:23	0:0	1	
param	1:24	1:45	2	AVFilterLink *	outlink
stmnts	0:0	40:4	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:31	2	RotContext	*rot
op	4:20	0:0	2	=
water	4:22	0:0	2	ctx
op	4:25	0:0	2	->
water	4:27	0:0	2	priv
decl	5:4	5:41	2	AVFilterLink	*inlink
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	inputs
op	5:38	0:0	2	[
water	5:39	0:0	2	0
op	5:40	0:0	2	]
decl	6:4	6:75	2	const AVPixFmtDescriptor	*pixdesc
op	6:38	0:0	2	=
call	6:40	6:74	3	av_pix_fmt_desc_get
arg	6:60	6:74	4	inlink->format
water	6:60	0:0	5	inlink
op	6:66	0:0	5	->
water	6:68	0:0	5	format
decl	7:4	7:11	2	int	ret
decl	8:4	8:14	2	double	res
decl	9:4	9:14	2	char	*expr
call	10:4	10:46	2	ff_draw_init
arg	10:17	10:27	3	&rot->draw
op	10:17	0:0	4	&
water	10:18	0:0	4	rot
op	10:21	0:0	4	->
water	10:23	0:0	4	draw
arg	10:29	10:43	3	inlink->format
water	10:29	0:0	4	inlink
op	10:35	0:0	4	->
water	10:37	0:0	4	format
arg	10:45	10:46	3	0
water	10:45	0:0	4	0
water	10:47	0:0	2	;
call	11:4	11:57	2	ff_draw_color
arg	11:18	11:28	3	&rot->draw
op	11:18	0:0	4	&
water	11:19	0:0	4	rot
op	11:22	0:0	4	->
water	11:24	0:0	4	draw
arg	11:30	11:41	3	&rot->color
op	11:30	0:0	4	&
water	11:31	0:0	4	rot
op	11:34	0:0	4	->
water	11:36	0:0	4	color
arg	11:43	11:57	3	rot->fillcolor
water	11:43	0:0	4	rot
op	11:46	0:0	4	->
water	11:48	0:0	4	fillcolor
water	11:58	0:0	2	;
water	12:4	0:0	2	rot
op	12:7	0:0	2	->
water	12:9	0:0	2	hsub
op	12:14	0:0	2	=
water	12:16	0:0	2	pixdesc
op	12:23	0:0	2	->
water	12:25	0:0	2	log2_chroma_w
water	12:38	0:0	2	;
water	13:4	0:0	2	rot
op	13:7	0:0	2	->
water	13:9	0:0	2	vsub
op	13:14	0:0	2	=
water	13:16	0:0	2	pixdesc
op	13:23	0:0	2	->
water	13:25	0:0	2	log2_chroma_h
water	13:38	0:0	2	;
water	14:4	0:0	2	rot
op	14:7	0:0	2	->
water	14:9	0:0	2	var_values
op	14:19	0:0	2	[
water	14:20	0:0	2	VAR_IN_W
op	14:28	0:0	2	]
op	14:30	0:0	2	=
water	14:32	0:0	2	rot
op	14:35	0:0	2	->
water	14:37	0:0	2	var_values
op	14:47	0:0	2	[
water	14:48	0:0	2	VAR_IW
op	14:54	0:0	2	]
op	14:56	0:0	2	=
water	14:58	0:0	2	inlink
op	14:64	0:0	2	->
water	14:66	0:0	2	w
water	14:67	0:0	2	;
water	15:4	0:0	2	rot
op	15:7	0:0	2	->
water	15:9	0:0	2	var_values
op	15:19	0:0	2	[
water	15:20	0:0	2	VAR_IN_H
op	15:28	0:0	2	]
op	15:30	0:0	2	=
water	15:32	0:0	2	rot
op	15:35	0:0	2	->
water	15:37	0:0	2	var_values
op	15:47	0:0	2	[
water	15:48	0:0	2	VAR_IH
op	15:54	0:0	2	]
op	15:56	0:0	2	=
water	15:58	0:0	2	inlink
op	15:64	0:0	2	->
water	15:66	0:0	2	h
water	15:67	0:0	2	;
water	16:4	0:0	2	rot
op	16:7	0:0	2	->
water	16:9	0:0	2	var_values
op	16:19	0:0	2	[
water	16:20	0:0	2	VAR_HSUB
op	16:28	0:0	2	]
op	16:30	0:0	2	=
water	16:32	0:0	2	1
op	16:33	0:0	2	<<
water	16:35	0:0	2	rot
op	16:38	0:0	2	->
water	16:40	0:0	2	hsub
water	16:44	0:0	2	;
water	17:4	0:0	2	rot
op	17:7	0:0	2	->
water	17:9	0:0	2	var_values
op	17:19	0:0	2	[
water	17:20	0:0	2	VAR_VSUB
op	17:28	0:0	2	]
op	17:30	0:0	2	=
water	17:32	0:0	2	1
op	17:33	0:0	2	<<
water	17:35	0:0	2	rot
op	17:38	0:0	2	->
water	17:40	0:0	2	vsub
water	17:44	0:0	2	;
water	18:4	0:0	2	rot
op	18:7	0:0	2	->
water	18:9	0:0	2	var_values
op	18:19	0:0	2	[
water	18:20	0:0	2	VAR_N
op	18:25	0:0	2	]
op	18:27	0:0	2	=
water	18:29	0:0	2	NAN
water	18:32	0:0	2	;
water	19:4	0:0	2	rot
op	19:7	0:0	2	->
water	19:9	0:0	2	var_values
op	19:19	0:0	2	[
water	19:20	0:0	2	VAR_T
op	19:25	0:0	2	]
op	19:27	0:0	2	=
water	19:29	0:0	2	NAN
water	19:32	0:0	2	;
water	20:4	0:0	2	rot
op	20:7	0:0	2	->
water	20:9	0:0	2	var_values
op	20:19	0:0	2	[
water	20:20	0:0	2	VAR_OUT_W
op	20:29	0:0	2	]
op	20:31	0:0	2	=
water	20:33	0:0	2	rot
op	20:36	0:0	2	->
water	20:38	0:0	2	var_values
op	20:48	0:0	2	[
water	20:49	0:0	2	VAR_OW
op	20:55	0:0	2	]
op	20:57	0:0	2	=
water	20:59	0:0	2	NAN
water	20:62	0:0	2	;
water	21:4	0:0	2	rot
op	21:7	0:0	2	->
water	21:9	0:0	2	var_values
op	21:19	0:0	2	[
water	21:20	0:0	2	VAR_OUT_H
op	21:29	0:0	2	]
op	21:31	0:0	2	=
water	21:33	0:0	2	rot
op	21:36	0:0	2	->
water	21:38	0:0	2	var_values
op	21:48	0:0	2	[
water	21:49	0:0	2	VAR_OH
op	21:55	0:0	2	]
op	21:57	0:0	2	=
water	21:59	0:0	2	NAN
water	21:62	0:0	2	;
call	22:4	22:32	2	av_expr_free
arg	22:17	22:32	3	rot->angle_expr
water	22:17	0:0	4	rot
op	22:20	0:0	4	->
water	22:22	0:0	4	angle_expr
water	22:33	0:0	2	;
water	23:4	0:0	2	rot
op	23:7	0:0	2	->
water	23:9	0:0	2	angle_expr
op	23:20	0:0	2	=
water	23:22	0:0	2	NULL
water	23:26	0:0	2	;
if	24:4	29:4	2	(( ret =av_expr_parse (& rot -> angle_expr ,expr = rot -> angle_expr_str ,var_names ,func1_names ,func1 ,NULL ,NULL ,0 ,ctx ) ) < 0)
cond	24:8	25:72	3	( ret =av_expr_parse (& rot -> angle_expr ,expr = rot -> angle_expr_str ,var_names ,func1_names ,func1 ,NULL ,NULL ,0 ,ctx ) ) < 0
water	24:8	0:0	4	(
water	24:9	0:0	4	ret
op	24:13	0:0	4	=
call	24:15	25:67	4	av_expr_parse
arg	24:29	24:45	5	&rot->angle_expr
op	24:29	0:0	6	&
water	24:30	0:0	6	rot
op	24:33	0:0	6	->
water	24:35	0:0	6	angle_expr
arg	24:47	24:73	5	expr=rot->angle_expr_str
water	24:47	0:0	6	expr
op	24:52	0:0	6	=
water	24:54	0:0	6	rot
op	24:57	0:0	6	->
water	24:59	0:0	6	angle_expr_str
arg	24:75	24:84	5	var_names
water	24:75	0:0	6	var_names
arg	25:29	25:40	5	func1_names
water	25:29	0:0	6	func1_names
arg	25:42	25:47	5	func1
water	25:42	0:0	6	func1
arg	25:49	25:53	5	NULL
water	25:49	0:0	6	NULL
arg	25:55	25:59	5	NULL
water	25:55	0:0	6	NULL
arg	25:61	25:62	5	0
water	25:61	0:0	6	0
arg	25:64	25:67	5	ctx
water	25:64	0:0	6	ctx
water	25:68	0:0	4	)
op	25:70	0:0	4	<
water	25:72	0:0	4	0
stmts	25:75	29:4	3	
water	25:75	0:0	4	{
call	26:8	27:84	4	av_log
arg	26:15	26:18	5	ctx
water	26:15	0:0	6	ctx
arg	26:20	26:32	5	AV_LOG_ERROR
water	26:20	0:0	6	AV_LOG_ERROR
arg	27:15	27:63	5	"Error occurred parsing angle expression '%s'\n"
water	27:15	0:0	6	"Error occurred parsing angle expression '%s'\n"
arg	27:65	27:84	5	rot->angle_expr_str
water	27:65	0:0	6	rot
op	27:68	0:0	6	->
water	27:70	0:0	6	angle_expr_str
water	27:85	0:0	4	;
return	28:8	28:18	4	ret
water	28:15	0:0	5	ret
water	29:4	0:0	4	}
water	31:4	0:0	2	ret
op	31:8	0:0	2	=
call	31:10	33:76	2	av_expr_parse_and_eval
arg	31:33	31:37	3	&res
op	31:33	0:0	4	&
water	31:34	0:0	4	res
arg	31:39	32:42	3	expr=rot->namevar_names
water	31:39	0:0	4	expr
op	31:44	0:0	4	=
water	31:46	0:0	4	rot
op	31:49	0:0	4	->
water	31:51	0:0	4	name
water	32:33	0:0	4	var_names
arg	32:44	32:59	3	rot->var_values
water	32:44	0:0	4	rot
op	32:47	0:0	4	->
water	32:49	0:0	4	var_values
arg	33:33	33:44	3	func1_names
water	33:33	0:0	4	func1_names
arg	33:46	33:51	3	func1
water	33:46	0:0	4	func1
arg	33:53	33:57	3	NULL
water	33:53	0:0	4	NULL
arg	33:59	33:63	3	NULL
water	33:59	0:0	4	NULL
arg	33:65	33:68	3	rot
water	33:65	0:0	4	rot
arg	33:70	33:71	3	0
water	33:70	0:0	4	0
arg	33:73	33:76	3	ctx
water	33:73	0:0	4	ctx
water	33:77	0:0	2	;
if	34:4	40:4	2	(ret < 0 ||isnan (res ) ||isinf (res ) || res <= 0)
cond	34:8	34:54	3	ret < 0 ||isnan (res ) ||isinf (res ) || res <= 0
water	34:8	0:0	4	ret
op	34:12	0:0	4	<
water	34:14	0:0	4	0
op	34:16	0:0	4	||
call	34:19	34:28	4	isnan
arg	34:25	34:28	5	res
water	34:25	0:0	6	res
op	34:30	0:0	4	||
call	34:33	34:42	4	isinf
arg	34:39	34:42	5	res
water	34:39	0:0	6	res
op	34:44	0:0	4	||
water	34:47	0:0	4	res
op	34:51	0:0	4	<=
water	34:54	0:0	4	0
stmts	34:57	40:4	3	
water	34:57	0:0	4	{
call	35:8	38:34	4	av_log
arg	35:15	35:18	5	ctx
water	35:15	0:0	6	ctx
arg	35:20	35:32	5	AV_LOG_ERROR
water	35:20	0:0	6	AV_LOG_ERROR
arg	36:15	37:81	5	"Error parsing or evaluating expression for option %s: ""invalid expression '%s' or non-positive or indefinite value %f\n"
water	36:15	0:0	6	"Error parsing or evaluating expression for option %s: "
water	37:15	0:0	6	"invalid expression '%s' or non-positive or indefinite value %f\n"
arg	38:15	38:23	5	opt_name
water	38:15	0:0	6	opt_name
arg	38:25	38:29	5	expr
water	38:25	0:0	6	expr
arg	38:31	38:34	5	res
water	38:31	0:0	6	res
water	38:35	0:0	4	;
return	39:8	39:18	4	ret
water	39:15	0:0	5	ret
water	40:4	0:0	4	}
