func	1:0	40:0	0	static inline int	get_amv
params	1:25	0:0	1	
param	1:26	1:46	2	Mpeg4DecContext *	ctx
param	1:48	1:53	2	int	n
stmnts	0:0	39:14	1	
decl	3:4	3:31	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	m
decl	4:4	4:38	2	int	x
water	4:9	0:0	2	,
decl	4:4	4:38	2	int	y
water	4:12	0:0	2	,
decl	4:4	4:38	2	int	mb_v
water	4:18	0:0	2	,
decl	4:4	4:38	2	int	sum
water	4:23	0:0	2	,
decl	4:4	4:38	2	int	dx
water	4:27	0:0	2	,
decl	4:4	4:38	2	int	dy
water	4:31	0:0	2	,
decl	4:4	4:38	2	int	shift
decl	5:4	5:38	2	int	len
op	5:16	0:0	2	=
water	5:18	0:0	2	1
op	5:20	0:0	2	<<
water	5:23	0:0	2	(
water	5:24	0:0	2	s
op	5:25	0:0	2	->
water	5:27	0:0	2	f_code
op	5:34	0:0	2	+
water	5:36	0:0	2	4
water	5:37	0:0	2	)
decl	6:4	6:44	2	const int	a
op	6:16	0:0	2	=
water	6:18	0:0	2	s
op	6:19	0:0	2	->
water	6:21	0:0	2	sprite_warping_accuracy
if	7:4	8:33	2	(s -> workaround_bugs & FF_BUG_AMV)
cond	7:8	7:29	3	s -> workaround_bugs & FF_BUG_AMV
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	workaround_bugs
op	7:27	0:0	4	&
water	7:29	0:0	4	FF_BUG_AMV
stmts	8:8	8:33	3	
water	8:8	0:0	4	len
op	8:12	0:0	4	>>=
water	8:16	0:0	4	s
op	8:17	0:0	4	->
water	8:19	0:0	4	quarter_sample
water	8:33	0:0	4	;
if	9:4	14:4	2	(s -> real_sprite_warping_points == 1)
cond	9:8	9:41	3	s -> real_sprite_warping_points == 1
water	9:8	0:0	4	s
op	9:9	0:0	4	->
water	9:11	0:0	4	real_sprite_warping_points
op	9:38	0:0	4	==
water	9:41	0:0	4	1
stmts	9:44	14:4	3	
water	9:44	0:0	4	{
if	10:8	11:73	4	(ctx -> divx_version == 500 && ctx -> divx_build == 413)
cond	10:12	10:59	5	ctx -> divx_version == 500 && ctx -> divx_build == 413
water	10:12	0:0	6	ctx
op	10:15	0:0	6	->
water	10:17	0:0	6	divx_version
op	10:30	0:0	6	==
water	10:33	0:0	6	500
op	10:37	0:0	6	&&
water	10:40	0:0	6	ctx
op	10:43	0:0	6	->
water	10:45	0:0	6	divx_build
op	10:56	0:0	6	==
water	10:59	0:0	6	413
stmts	11:12	11:73	5	
water	11:12	0:0	6	sum
op	11:16	0:0	6	=
water	11:18	0:0	6	s
op	11:19	0:0	6	->
water	11:21	0:0	6	sprite_offset
op	11:34	0:0	6	[
water	11:35	0:0	6	0
op	11:36	0:0	6	]
op	11:37	0:0	6	[
water	11:38	0:0	6	n
op	11:39	0:0	6	]
op	11:41	0:0	6	/
water	11:43	0:0	6	(
water	11:44	0:0	6	1
op	11:46	0:0	6	<<
water	11:49	0:0	6	(
water	11:50	0:0	6	a
op	11:52	0:0	6	-
water	11:54	0:0	6	s
op	11:55	0:0	6	->
water	11:57	0:0	6	quarter_sample
water	11:71	0:0	6	)
water	11:72	0:0	6	)
water	11:73	0:0	6	;
else	12:8	13:72	4
stmts	13:12	13:72	5	
water	13:12	0:0	6	sum
op	13:16	0:0	6	=
call	13:18	13:71	6	RSHIFT
arg	13:25	13:68	7	s->sprite_offset[0][n]<<s->quarter_sample
water	13:25	0:0	8	s
op	13:26	0:0	8	->
water	13:28	0:0	8	sprite_offset
op	13:41	0:0	8	[
water	13:42	0:0	8	0
op	13:43	0:0	8	]
op	13:44	0:0	8	[
water	13:45	0:0	8	n
op	13:46	0:0	8	]
op	13:48	0:0	8	<<
water	13:51	0:0	8	s
op	13:52	0:0	8	->
water	13:54	0:0	8	quarter_sample
arg	13:70	13:71	7	a
water	13:70	0:0	8	a
water	13:72	0:0	6	;
water	14:4	0:0	4	}
else	14:6	34:4	2
stmts	14:11	34:4	3	
water	14:11	0:0	4	{
water	15:8	0:0	4	dx
op	15:14	0:0	4	=
water	15:16	0:0	4	s
op	15:17	0:0	4	->
water	15:19	0:0	4	sprite_delta
op	15:31	0:0	4	[
water	15:32	0:0	4	n
op	15:33	0:0	4	]
op	15:34	0:0	4	[
water	15:35	0:0	4	0
op	15:36	0:0	4	]
water	15:37	0:0	4	;
water	16:8	0:0	4	dy
op	16:14	0:0	4	=
water	16:16	0:0	4	s
op	16:17	0:0	4	->
water	16:19	0:0	4	sprite_delta
op	16:31	0:0	4	[
water	16:32	0:0	4	n
op	16:33	0:0	4	]
op	16:34	0:0	4	[
water	16:35	0:0	4	1
op	16:36	0:0	4	]
water	16:37	0:0	4	;
water	17:8	0:0	4	shift
op	17:14	0:0	4	=
water	17:16	0:0	4	ctx
op	17:19	0:0	4	->
water	17:21	0:0	4	sprite_shift
op	17:33	0:0	4	[
water	17:34	0:0	4	0
op	17:35	0:0	4	]
water	17:36	0:0	4	;
if	18:8	19:38	4	(n)
cond	18:12	18:12	5	n
water	18:12	0:0	6	n
stmts	19:12	19:38	5	
water	19:12	0:0	6	dy
op	19:15	0:0	6	-=
water	19:18	0:0	6	1
op	19:20	0:0	6	<<
water	19:23	0:0	6	(
water	19:24	0:0	6	shift
op	19:30	0:0	6	+
water	19:32	0:0	6	a
op	19:34	0:0	6	+
water	19:36	0:0	6	1
water	19:37	0:0	6	)
water	19:38	0:0	6	;
else	20:8	21:38	4
stmts	21:12	21:38	5	
water	21:12	0:0	6	dx
op	21:15	0:0	6	-=
water	21:18	0:0	6	1
op	21:20	0:0	6	<<
water	21:23	0:0	6	(
water	21:24	0:0	6	shift
op	21:30	0:0	6	+
water	21:32	0:0	6	a
op	21:34	0:0	6	+
water	21:36	0:0	6	1
water	21:37	0:0	6	)
water	21:38	0:0	6	;
water	22:8	0:0	4	mb_v
op	22:13	0:0	4	=
water	22:15	0:0	4	s
op	22:16	0:0	4	->
water	22:18	0:0	4	sprite_offset
op	22:31	0:0	4	[
water	22:32	0:0	4	0
op	22:33	0:0	4	]
op	22:34	0:0	4	[
water	22:35	0:0	4	n
op	22:36	0:0	4	]
op	22:38	0:0	4	+
water	22:40	0:0	4	dx
op	22:43	0:0	4	*
water	22:45	0:0	4	s
op	22:46	0:0	4	->
water	22:48	0:0	4	mb_x
op	22:53	0:0	4	*
water	22:55	0:0	4	16
op	22:58	0:0	4	+
water	22:60	0:0	4	dy
op	22:63	0:0	4	*
water	22:65	0:0	4	s
op	22:66	0:0	4	->
water	22:68	0:0	4	mb_y
op	22:73	0:0	4	*
water	22:75	0:0	4	16
water	22:77	0:0	4	;
water	23:8	0:0	4	sum
op	23:12	0:0	4	=
water	23:14	0:0	4	0
water	23:15	0:0	4	;
for	24:8	32:8	4	(y = 0 ;y < 16;y ++)
forinit	24:13	24:18	5	y = 0 ;
water	24:13	0:0	6	y
op	24:15	0:0	6	=
water	24:17	0:0	6	0
water	24:18	0:0	6	;
cond	24:20	24:24	5	y < 16
water	24:20	0:0	6	y
op	24:22	0:0	6	<
water	24:24	0:0	6	16
forexpr	24:28	24:29	5	y ++
water	24:28	0:0	6	y
op	24:29	0:0	6	++
stmts	24:33	32:8	5	
water	24:33	0:0	6	{
decl	25:12	25:17	6	int	v
water	26:12	0:0	6	v
op	26:14	0:0	6	=
water	26:16	0:0	6	mb_v
op	26:21	0:0	6	+
water	26:23	0:0	6	dy
op	26:26	0:0	6	*
water	26:28	0:0	6	y
water	26:29	0:0	6	;
for	28:12	31:12	6	(x = 0 ;x < 16;x ++)
forinit	28:17	28:22	7	x = 0 ;
water	28:17	0:0	8	x
op	28:19	0:0	8	=
water	28:21	0:0	8	0
water	28:22	0:0	8	;
cond	28:24	28:28	7	x < 16
water	28:24	0:0	8	x
op	28:26	0:0	8	<
water	28:28	0:0	8	16
forexpr	28:32	28:33	7	x ++
water	28:32	0:0	8	x
op	28:33	0:0	8	++
stmts	28:37	31:12	7	
water	28:37	0:0	8	{
water	29:16	0:0	8	sum
op	29:20	0:0	8	+=
water	29:23	0:0	8	v
op	29:25	0:0	8	>>
water	29:28	0:0	8	shift
water	29:33	0:0	8	;
water	30:16	0:0	8	v
op	30:20	0:0	8	+=
water	30:23	0:0	8	dx
water	30:25	0:0	8	;
water	31:12	0:0	8	}
water	32:8	0:0	6	}
water	33:8	0:0	4	sum
op	33:12	0:0	4	=
call	33:14	33:51	4	RSHIFT
arg	33:21	33:24	5	sum
water	33:21	0:0	6	sum
arg	33:26	33:51	5	a+8-s->quarter_sample
water	33:26	0:0	6	a
op	33:28	0:0	6	+
water	33:30	0:0	6	8
op	33:32	0:0	6	-
water	33:34	0:0	6	s
op	33:35	0:0	6	->
water	33:37	0:0	6	quarter_sample
water	33:52	0:0	4	;
water	34:4	0:0	4	}
if	35:4	36:18	2	(sum < - len)
cond	35:8	35:15	3	sum < - len
water	35:8	0:0	4	sum
op	35:12	0:0	4	<
op	35:14	0:0	4	-
water	35:15	0:0	4	len
stmts	36:8	36:18	3	
water	36:8	0:0	4	sum
op	36:12	0:0	4	=
op	36:14	0:0	4	-
water	36:15	0:0	4	len
water	36:18	0:0	4	;
else	37:4	38:21	2
stmts	37:9	38:21	3	
if	37:9	38:21	4	(sum >= len)
cond	37:13	37:20	5	sum >= len
water	37:13	0:0	6	sum
op	37:17	0:0	6	>=
water	37:20	0:0	6	len
stmts	38:8	38:21	5	
water	38:8	0:0	6	sum
op	38:12	0:0	6	=
water	38:14	0:0	6	len
op	38:18	0:0	6	-
water	38:20	0:0	6	1
water	38:21	0:0	6	;
return	39:4	39:14	2	sum
water	39:11	0:0	3	sum
