func	1:0	104:0	0	static void	test_fill_picture
params	1:29	0:0	1	
param	1:30	1:50	2	AVFilterContext *	ctx
param	1:52	1:66	2	AVFrame *	frame
stmnts	0:0	103:4	1	
decl	3:4	3:39	2	TestSourceContext	*test
op	3:28	0:0	2	=
water	3:30	0:0	2	ctx
op	3:33	0:0	2	->
water	3:35	0:0	2	priv
decl	4:4	4:19	2	uint8_t	*p
water	4:14	0:0	2	,
decl	4:4	4:19	2	uint8_t	*p0
decl	5:4	5:12	2	int	x
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	y
decl	6:4	6:25	2	int	color
water	6:13	0:0	2	,
decl	6:4	6:25	2	int	color_rest
decl	7:4	7:14	2	int	icolor
decl	8:4	8:14	2	int	radius
decl	9:4	9:19	2	int	quad0
water	9:13	0:0	2	,
decl	9:4	9:19	2	int	quad
decl	10:4	10:24	2	int	dquad_x
water	10:15	0:0	2	,
decl	10:4	10:24	2	int	dquad_y
decl	11:4	11:34	2	int	grad
water	11:12	0:0	2	,
decl	11:4	11:34	2	int	dgrad
water	11:19	0:0	2	,
decl	11:4	11:34	2	int	rgrad
water	11:26	0:0	2	,
decl	11:4	11:34	2	int	drgrad
decl	12:4	12:16	2	int	seg_size
decl	13:4	13:14	2	int	second
decl	14:4	14:9	2	int	i
decl	15:4	15:34	2	uint8_t	*data
op	15:18	0:0	2	=
water	15:20	0:0	2	frame
op	15:25	0:0	2	->
water	15:27	0:0	2	data
op	15:31	0:0	2	[
water	15:32	0:0	2	0
op	15:33	0:0	2	]
decl	16:4	16:29	2	int	width
op	16:15	0:0	2	=
water	16:17	0:0	2	frame
op	16:22	0:0	2	->
water	16:24	0:0	2	width
decl	17:4	17:30	2	int	height
op	17:15	0:0	2	=
water	17:17	0:0	2	frame
op	17:22	0:0	2	->
water	17:24	0:0	2	height
water	19:4	0:0	2	radius
op	19:11	0:0	2	=
water	19:13	0:0	2	(
water	19:14	0:0	2	width
op	19:20	0:0	2	+
water	19:22	0:0	2	height
water	19:28	0:0	2	)
op	19:30	0:0	2	/
water	19:32	0:0	2	4
water	19:33	0:0	2	;
water	20:4	0:0	2	quad0
op	20:10	0:0	2	=
water	20:12	0:0	2	width
op	20:18	0:0	2	*
water	20:20	0:0	2	width
op	20:26	0:0	2	/
water	20:28	0:0	2	4
op	20:30	0:0	2	+
water	20:32	0:0	2	height
op	20:39	0:0	2	*
water	20:41	0:0	2	height
op	20:48	0:0	2	/
water	20:50	0:0	2	4
op	20:52	0:0	2	-
water	20:54	0:0	2	radius
op	20:61	0:0	2	*
water	20:63	0:0	2	radius
water	20:69	0:0	2	;
water	21:4	0:0	2	dquad_y
op	21:12	0:0	2	=
water	21:14	0:0	2	1
op	21:16	0:0	2	-
water	21:18	0:0	2	height
water	21:24	0:0	2	;
water	22:4	0:0	2	p0
op	22:7	0:0	2	=
water	22:9	0:0	2	data
water	22:13	0:0	2	;
for	23:4	47:4	2	(y = 0 ;y < height;y ++)
forinit	23:9	23:14	3	y = 0 ;
water	23:9	0:0	4	y
op	23:11	0:0	4	=
water	23:13	0:0	4	0
water	23:14	0:0	4	;
cond	23:16	23:20	3	y < height
water	23:16	0:0	4	y
op	23:18	0:0	4	<
water	23:20	0:0	4	height
forexpr	23:28	23:29	3	y ++
water	23:28	0:0	4	y
op	23:29	0:0	4	++
stmts	23:33	47:4	3	
water	23:33	0:0	4	{
water	24:8	0:0	4	p
op	24:10	0:0	4	=
water	24:12	0:0	4	p0
water	24:14	0:0	4	;
water	25:8	0:0	4	color
op	25:14	0:0	4	=
water	25:16	0:0	4	0
water	25:17	0:0	4	;
water	26:8	0:0	4	color_rest
op	26:19	0:0	4	=
water	26:21	0:0	4	0
water	26:22	0:0	4	;
water	27:8	0:0	4	quad
op	27:13	0:0	4	=
water	27:15	0:0	4	quad0
water	27:20	0:0	4	;
water	28:8	0:0	4	dquad_x
op	28:16	0:0	4	=
water	28:18	0:0	4	1
op	28:20	0:0	4	-
water	28:22	0:0	4	width
water	28:27	0:0	4	;
for	29:8	43:8	4	(x = 0 ;x < width;x ++)
forinit	29:13	29:18	5	x = 0 ;
water	29:13	0:0	6	x
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:24	5	x < width
water	29:20	0:0	6	x
op	29:22	0:0	6	<
water	29:24	0:0	6	width
forexpr	29:31	29:32	5	x ++
water	29:31	0:0	6	x
op	29:32	0:0	6	++
stmts	29:36	43:8	5	
water	29:36	0:0	6	{
water	30:12	0:0	6	icolor
op	30:19	0:0	6	=
water	30:21	0:0	6	color
water	30:26	0:0	6	;
if	31:12	32:27	6	(quad < 0)
cond	31:16	31:23	7	quad < 0
water	31:16	0:0	8	quad
op	31:21	0:0	8	<
water	31:23	0:0	8	0
stmts	32:16	32:27	7	
water	32:16	0:0	8	icolor
op	32:23	0:0	8	^=
water	32:26	0:0	8	7
water	32:27	0:0	8	;
water	33:12	0:0	6	quad
op	33:17	0:0	6	+=
water	33:20	0:0	6	dquad_x
water	33:27	0:0	6	;
water	34:12	0:0	6	dquad_x
op	34:20	0:0	6	+=
water	34:23	0:0	6	2
water	34:24	0:0	6	;
op	35:12	0:0	6	*
water	35:13	0:0	6	(
water	35:14	0:0	6	p
op	35:15	0:0	6	++
water	35:17	0:0	6	)
op	35:19	0:0	6	=
water	35:21	0:0	6	icolor
op	35:28	0:0	6	&
water	35:30	0:0	6	1
water	35:32	0:0	6	?
water	35:34	0:0	6	255
water	35:38	0:0	6	:
water	35:40	0:0	6	0
water	35:41	0:0	6	;
op	36:12	0:0	6	*
water	36:13	0:0	6	(
water	36:14	0:0	6	p
op	36:15	0:0	6	++
water	36:17	0:0	6	)
op	36:19	0:0	6	=
water	36:21	0:0	6	icolor
op	36:28	0:0	6	&
water	36:30	0:0	6	2
water	36:32	0:0	6	?
water	36:34	0:0	6	255
water	36:38	0:0	6	:
water	36:40	0:0	6	0
water	36:41	0:0	6	;
op	37:12	0:0	6	*
water	37:13	0:0	6	(
water	37:14	0:0	6	p
op	37:15	0:0	6	++
water	37:17	0:0	6	)
op	37:19	0:0	6	=
water	37:21	0:0	6	icolor
op	37:28	0:0	6	&
water	37:30	0:0	6	4
water	37:32	0:0	6	?
water	37:34	0:0	6	255
water	37:38	0:0	6	:
water	37:40	0:0	6	0
water	37:41	0:0	6	;
water	38:12	0:0	6	color_rest
op	38:23	0:0	6	+=
water	38:26	0:0	6	8
water	38:27	0:0	6	;
if	39:12	42:12	6	(color_rest >= width)
cond	39:16	39:30	7	color_rest >= width
water	39:16	0:0	8	color_rest
op	39:27	0:0	8	>=
water	39:30	0:0	8	width
stmts	39:37	42:12	7	
water	39:37	0:0	8	{
water	40:16	0:0	8	color_rest
op	40:27	0:0	8	-=
water	40:30	0:0	8	width
water	40:35	0:0	8	;
water	41:16	0:0	8	color
op	41:21	0:0	8	++
water	41:23	0:0	8	;
water	42:12	0:0	8	}
water	43:8	0:0	6	}
water	44:8	0:0	4	quad0
op	44:14	0:0	4	+=
water	44:17	0:0	4	dquad_y
water	44:24	0:0	4	;
water	45:8	0:0	4	dquad_y
op	45:16	0:0	4	+=
water	45:19	0:0	4	2
water	45:20	0:0	4	;
water	46:8	0:0	4	p0
op	46:11	0:0	4	+=
water	46:14	0:0	4	frame
op	46:19	0:0	4	->
water	46:21	0:0	4	linesize
op	46:29	0:0	4	[
water	46:30	0:0	4	0
op	46:31	0:0	4	]
water	46:32	0:0	4	;
water	47:4	0:0	4	}
water	49:4	0:0	2	p0
op	49:7	0:0	2	=
water	49:9	0:0	2	p
op	49:11	0:0	2	=
water	49:13	0:0	2	data
op	49:18	0:0	2	+
water	49:20	0:0	2	frame
op	49:25	0:0	2	->
water	49:27	0:0	2	linesize
op	49:35	0:0	2	[
water	49:36	0:0	2	0
op	49:37	0:0	2	]
op	49:39	0:0	2	*
water	49:41	0:0	2	(
water	49:42	0:0	2	height
op	49:49	0:0	2	*
water	49:51	0:0	2	3
op	49:52	0:0	2	/
water	49:53	0:0	2	4
water	49:54	0:0	2	)
water	49:55	0:0	2	;
water	50:4	0:0	2	grad
op	50:9	0:0	2	=
water	50:11	0:0	2	(
water	50:12	0:0	2	256
op	50:16	0:0	2	*
water	50:18	0:0	2	test
op	50:22	0:0	2	->
water	50:24	0:0	2	nb_frame
op	50:33	0:0	2	*
water	50:35	0:0	2	test
op	50:39	0:0	2	->
water	50:41	0:0	2	time_base
op	50:50	0:0	2	.
water	50:51	0:0	2	num
op	50:55	0:0	2	/
water	50:57	0:0	2	test
op	50:61	0:0	2	->
water	50:63	0:0	2	time_base
op	50:72	0:0	2	.
water	50:73	0:0	2	den
water	50:76	0:0	2	)
op	50:78	0:0	2	%
water	51:8	0:0	2	GRADIENT_SIZE
water	51:21	0:0	2	;
water	52:4	0:0	2	rgrad
op	52:10	0:0	2	=
water	52:12	0:0	2	0
water	52:13	0:0	2	;
water	53:4	0:0	2	dgrad
op	53:10	0:0	2	=
water	53:12	0:0	2	GRADIENT_SIZE
op	53:26	0:0	2	/
water	53:28	0:0	2	width
water	53:33	0:0	2	;
water	54:4	0:0	2	drgrad
op	54:11	0:0	2	=
water	54:13	0:0	2	GRADIENT_SIZE
op	54:27	0:0	2	%
water	54:29	0:0	2	width
water	54:34	0:0	2	;
for	55:4	76:4	2	(x = 0 ;x < width;x ++)
forinit	55:9	55:14	3	x = 0 ;
water	55:9	0:0	4	x
op	55:11	0:0	4	=
water	55:13	0:0	4	0
water	55:14	0:0	4	;
cond	55:16	55:20	3	x < width
water	55:16	0:0	4	x
op	55:18	0:0	4	<
water	55:20	0:0	4	width
forexpr	55:27	55:28	3	x ++
water	55:27	0:0	4	x
op	55:28	0:0	4	++
stmts	55:32	76:4	3	
water	55:32	0:0	4	{
op	56:8	0:0	4	*
water	56:9	0:0	4	(
water	56:10	0:0	4	p
op	56:11	0:0	4	++
water	56:13	0:0	4	)
op	56:15	0:0	4	=
water	57:12	0:0	4	grad
op	57:17	0:0	4	<
water	57:19	0:0	4	256
op	57:23	0:0	4	||
water	57:26	0:0	4	grad
op	57:31	0:0	4	>=
water	57:34	0:0	4	5
op	57:36	0:0	4	*
water	57:38	0:0	4	256
water	57:42	0:0	4	?
water	57:44	0:0	4	255
water	57:48	0:0	4	:
water	58:12	0:0	4	grad
op	58:17	0:0	4	>=
water	58:20	0:0	4	2
op	58:22	0:0	4	*
water	58:24	0:0	4	256
op	58:28	0:0	4	&&
water	58:31	0:0	4	grad
op	58:36	0:0	4	<
water	58:38	0:0	4	4
op	58:40	0:0	4	*
water	58:42	0:0	4	256
water	58:46	0:0	4	?
water	58:48	0:0	4	0
water	58:50	0:0	4	:
water	59:12	0:0	4	grad
op	59:17	0:0	4	<
water	59:19	0:0	4	2
op	59:21	0:0	4	*
water	59:23	0:0	4	256
water	59:27	0:0	4	?
water	59:29	0:0	4	2
op	59:31	0:0	4	*
water	59:33	0:0	4	256
op	59:37	0:0	4	-
water	59:39	0:0	4	1
op	59:41	0:0	4	-
water	59:43	0:0	4	grad
water	59:48	0:0	4	:
water	59:50	0:0	4	grad
op	59:55	0:0	4	-
water	59:57	0:0	4	4
op	59:59	0:0	4	*
water	59:61	0:0	4	256
water	59:64	0:0	4	;
op	60:8	0:0	4	*
water	60:9	0:0	4	(
water	60:10	0:0	4	p
op	60:11	0:0	4	++
water	60:13	0:0	4	)
op	60:15	0:0	4	=
water	61:12	0:0	4	grad
op	61:17	0:0	4	>=
water	61:20	0:0	4	4
op	61:22	0:0	4	*
water	61:24	0:0	4	256
water	61:28	0:0	4	?
water	61:30	0:0	4	0
water	61:32	0:0	4	:
water	62:12	0:0	4	grad
op	62:17	0:0	4	>=
water	62:20	0:0	4	1
op	62:22	0:0	4	*
water	62:24	0:0	4	256
op	62:28	0:0	4	&&
water	62:31	0:0	4	grad
op	62:36	0:0	4	<
water	62:38	0:0	4	3
op	62:40	0:0	4	*
water	62:42	0:0	4	256
water	62:46	0:0	4	?
water	62:48	0:0	4	255
water	62:52	0:0	4	:
water	63:12	0:0	4	grad
op	63:17	0:0	4	<
water	63:19	0:0	4	1
op	63:21	0:0	4	*
water	63:23	0:0	4	256
water	63:27	0:0	4	?
water	63:29	0:0	4	grad
water	63:34	0:0	4	:
water	63:36	0:0	4	4
op	63:38	0:0	4	*
water	63:40	0:0	4	256
op	63:44	0:0	4	-
water	63:46	0:0	4	1
op	63:48	0:0	4	-
water	63:50	0:0	4	grad
water	63:54	0:0	4	;
op	64:8	0:0	4	*
water	64:9	0:0	4	(
water	64:10	0:0	4	p
op	64:11	0:0	4	++
water	64:13	0:0	4	)
op	64:15	0:0	4	=
water	65:12	0:0	4	grad
op	65:17	0:0	4	<
water	65:19	0:0	4	2
op	65:21	0:0	4	*
water	65:23	0:0	4	256
water	65:27	0:0	4	?
water	65:29	0:0	4	0
water	65:31	0:0	4	:
water	66:12	0:0	4	grad
op	66:17	0:0	4	>=
water	66:20	0:0	4	3
op	66:22	0:0	4	*
water	66:24	0:0	4	256
op	66:28	0:0	4	&&
water	66:31	0:0	4	grad
op	66:36	0:0	4	<
water	66:38	0:0	4	5
op	66:40	0:0	4	*
water	66:42	0:0	4	256
water	66:46	0:0	4	?
water	66:48	0:0	4	255
water	66:52	0:0	4	:
water	67:12	0:0	4	grad
op	67:17	0:0	4	<
water	67:19	0:0	4	3
op	67:21	0:0	4	*
water	67:23	0:0	4	256
water	67:27	0:0	4	?
water	67:29	0:0	4	grad
op	67:34	0:0	4	-
water	67:36	0:0	4	2
op	67:38	0:0	4	*
water	67:40	0:0	4	256
water	67:44	0:0	4	:
water	67:46	0:0	4	6
op	67:48	0:0	4	*
water	67:50	0:0	4	256
op	67:54	0:0	4	-
water	67:56	0:0	4	1
op	67:58	0:0	4	-
water	67:60	0:0	4	grad
water	67:64	0:0	4	;
water	68:8	0:0	4	grad
op	68:13	0:0	4	+=
water	68:16	0:0	4	dgrad
water	68:21	0:0	4	;
water	69:8	0:0	4	rgrad
op	69:14	0:0	4	+=
water	69:17	0:0	4	drgrad
water	69:23	0:0	4	;
if	70:8	73:8	4	(rgrad >= GRADIENT_SIZE)
cond	70:12	70:21	5	rgrad >= GRADIENT_SIZE
water	70:12	0:0	6	rgrad
op	70:18	0:0	6	>=
water	70:21	0:0	6	GRADIENT_SIZE
stmts	70:36	73:8	5	
water	70:36	0:0	6	{
water	71:12	0:0	6	grad
op	71:16	0:0	6	++
water	71:18	0:0	6	;
water	72:12	0:0	6	rgrad
op	72:18	0:0	6	-=
water	72:21	0:0	6	GRADIENT_SIZE
water	72:34	0:0	6	;
water	73:8	0:0	6	}
if	74:8	75:33	4	(grad >= GRADIENT_SIZE)
cond	74:12	74:20	5	grad >= GRADIENT_SIZE
water	74:12	0:0	6	grad
op	74:17	0:0	6	>=
water	74:20	0:0	6	GRADIENT_SIZE
stmts	75:12	75:33	5	
water	75:12	0:0	6	grad
op	75:17	0:0	6	-=
water	75:20	0:0	6	GRADIENT_SIZE
water	75:33	0:0	6	;
water	76:4	0:0	4	}
water	77:4	0:0	2	p
op	77:6	0:0	2	=
water	77:8	0:0	2	p0
water	77:10	0:0	2	;
for	78:4	81:4	2	(y = height / 8 ;y > 0;y --)
forinit	78:9	78:23	3	y = height / 8 ;
water	78:9	0:0	4	y
op	78:11	0:0	4	=
water	78:13	0:0	4	height
op	78:20	0:0	4	/
water	78:22	0:0	4	8
water	78:23	0:0	4	;
cond	78:25	78:29	3	y > 0
water	78:25	0:0	4	y
op	78:27	0:0	4	>
water	78:29	0:0	4	0
forexpr	78:32	78:33	3	y --
water	78:32	0:0	4	y
op	78:33	0:0	4	--
stmts	78:37	81:4	3	
water	78:37	0:0	4	{
call	79:8	79:49	4	memcpy
arg	79:15	79:35	5	p+frame->linesize[0]
water	79:15	0:0	6	p
op	79:16	0:0	6	+
water	79:17	0:0	6	frame
op	79:22	0:0	6	->
water	79:24	0:0	6	linesize
op	79:32	0:0	6	[
water	79:33	0:0	6	0
op	79:34	0:0	6	]
arg	79:37	79:38	5	p
water	79:37	0:0	6	p
arg	79:40	79:49	5	3*width
water	79:40	0:0	6	3
op	79:42	0:0	6	*
water	79:44	0:0	6	width
water	79:50	0:0	4	;
water	80:8	0:0	4	p
op	80:10	0:0	4	+=
water	80:13	0:0	4	frame
op	80:18	0:0	4	->
water	80:20	0:0	4	linesize
op	80:28	0:0	4	[
water	80:29	0:0	4	0
op	80:30	0:0	4	]
water	80:31	0:0	4	;
water	81:4	0:0	4	}
water	83:4	0:0	2	seg_size
op	83:13	0:0	2	=
water	83:15	0:0	2	width
op	83:21	0:0	2	/
water	83:23	0:0	2	80
water	83:25	0:0	2	;
if	84:4	103:4	2	(seg_size >= 1 && height >= 13 * seg_size)
cond	84:8	84:40	3	seg_size >= 1 && height >= 13 * seg_size
water	84:8	0:0	4	seg_size
op	84:17	0:0	4	>=
water	84:20	0:0	4	1
op	84:22	0:0	4	&&
water	84:25	0:0	4	height
op	84:32	0:0	4	>=
water	84:35	0:0	4	13
op	84:38	0:0	4	*
water	84:40	0:0	4	seg_size
stmts	84:50	103:4	3	
water	84:50	0:0	4	{
decl	85:8	85:31	4	int64_t	p10decimals
op	85:28	0:0	4	=
water	85:30	0:0	4	1
decl	86:8	87:48	4	double	time
op	86:20	0:0	4	=
call	86:22	86:44	5	av_q2d
arg	86:29	86:44	6	test->time_base
water	86:29	0:0	7	test
op	86:33	0:0	7	->
water	86:35	0:0	7	time_base
op	86:46	0:0	4	*
water	86:48	0:0	4	test
op	86:52	0:0	4	->
water	86:54	0:0	4	nb_frame
call	86:63	87:47	5	*pow
arg	87:26	87:28	6	10
water	87:26	0:0	7	10
arg	87:30	87:47	6	test->nb_decimals
water	87:30	0:0	7	test
op	87:34	0:0	7	->
water	87:36	0:0	7	nb_decimals
if	88:8	89:18	4	(time >= INT_MAX)
cond	88:12	88:20	5	time >= INT_MAX
water	88:12	0:0	6	time
op	88:17	0:0	6	>=
water	88:20	0:0	6	INT_MAX
stmts	89:12	89:18	5	
return	89:12	89:18	6	
for	90:8	91:29	4	(x = 0 ;x < test -> nb_decimals;x ++)
forinit	90:13	90:18	5	x = 0 ;
water	90:13	0:0	6	x
op	90:15	0:0	6	=
water	90:17	0:0	6	0
water	90:18	0:0	6	;
cond	90:20	90:30	5	x < test -> nb_decimals
water	90:20	0:0	6	x
op	90:22	0:0	6	<
water	90:24	0:0	6	test
op	90:28	0:0	6	->
water	90:30	0:0	6	nb_decimals
forexpr	90:43	90:44	5	x ++
water	90:43	0:0	6	x
op	90:44	0:0	6	++
stmts	91:12	91:29	5	
water	91:12	0:0	6	p10decimals
op	91:24	0:0	6	*=
water	91:27	0:0	6	10
water	91:29	0:0	6	;
water	92:8	0:0	4	second
op	92:15	0:0	4	=
call	92:17	92:117	4	av_rescale_rnd
arg	92:32	92:68	5	test->nb_frame*test->time_base.num
water	92:32	0:0	6	test
op	92:36	0:0	6	->
water	92:38	0:0	6	nb_frame
op	92:47	0:0	6	*
water	92:49	0:0	6	test
op	92:53	0:0	6	->
water	92:55	0:0	6	time_base
op	92:64	0:0	6	.
water	92:65	0:0	6	num
arg	92:70	92:81	5	p10decimals
water	92:70	0:0	6	p10decimals
arg	92:83	92:102	5	test->time_base.den
water	92:83	0:0	6	test
op	92:87	0:0	6	->
water	92:89	0:0	6	time_base
op	92:98	0:0	6	.
water	92:99	0:0	6	den
arg	92:104	92:117	5	AV_ROUND_ZERO
water	92:104	0:0	6	AV_ROUND_ZERO
water	92:118	0:0	4	;
water	93:8	0:0	4	x
op	93:10	0:0	4	=
water	93:12	0:0	4	width
op	93:18	0:0	4	-
water	93:20	0:0	4	(
water	93:21	0:0	4	width
op	93:27	0:0	4	-
water	93:29	0:0	4	seg_size
op	93:38	0:0	4	*
water	93:40	0:0	4	64
water	93:42	0:0	4	)
op	93:44	0:0	4	/
water	93:46	0:0	4	2
water	93:47	0:0	4	;
water	94:8	0:0	4	y
op	94:10	0:0	4	=
water	94:12	0:0	4	(
water	94:13	0:0	4	height
op	94:20	0:0	4	-
water	94:22	0:0	4	seg_size
op	94:31	0:0	4	*
water	94:33	0:0	4	13
water	94:35	0:0	4	)
op	94:37	0:0	4	/
water	94:39	0:0	4	2
water	94:40	0:0	4	;
water	95:8	0:0	4	p
op	95:10	0:0	4	=
water	95:12	0:0	4	data
op	95:17	0:0	4	+
water	95:19	0:0	4	(
water	95:20	0:0	4	x
op	95:21	0:0	4	*
water	95:22	0:0	4	3
op	95:24	0:0	4	+
water	95:26	0:0	4	y
op	95:28	0:0	4	*
water	95:30	0:0	4	frame
op	95:35	0:0	4	->
water	95:37	0:0	4	linesize
op	95:45	0:0	4	[
water	95:46	0:0	4	0
op	95:47	0:0	4	]
water	95:48	0:0	4	)
water	95:49	0:0	4	;
for	96:8	102:8	4	(i = 0 ;i < 8;i ++)
forinit	96:13	96:18	5	i = 0 ;
water	96:13	0:0	6	i
op	96:15	0:0	6	=
water	96:17	0:0	6	0
water	96:18	0:0	6	;
cond	96:20	96:24	5	i < 8
water	96:20	0:0	6	i
op	96:22	0:0	6	<
water	96:24	0:0	6	8
forexpr	96:27	96:28	5	i ++
water	96:27	0:0	6	i
op	96:28	0:0	6	++
stmts	96:32	102:8	5	
water	96:32	0:0	6	{
water	97:12	0:0	6	p
op	97:14	0:0	6	-=
water	97:17	0:0	6	3
op	97:19	0:0	6	*
water	97:21	0:0	6	8
op	97:23	0:0	6	*
water	97:25	0:0	6	seg_size
water	97:33	0:0	6	;
call	98:12	98:67	6	draw_digit
arg	98:23	98:34	7	second%10
water	98:23	0:0	8	second
op	98:30	0:0	8	%
water	98:32	0:0	8	10
arg	98:36	98:37	7	p
water	98:36	0:0	8	p
arg	98:39	98:57	7	frame->linesize[0]
water	98:39	0:0	8	frame
op	98:44	0:0	8	->
water	98:46	0:0	8	linesize
op	98:54	0:0	8	[
water	98:55	0:0	8	0
op	98:56	0:0	8	]
arg	98:59	98:67	7	seg_size
water	98:59	0:0	8	seg_size
water	98:68	0:0	6	;
water	99:12	0:0	6	second
op	99:19	0:0	6	/=
water	99:22	0:0	6	10
water	99:24	0:0	6	;
if	100:12	101:21	6	(second == 0)
cond	100:16	100:26	7	second == 0
water	100:16	0:0	8	second
op	100:23	0:0	8	==
water	100:26	0:0	8	0
stmts	101:16	101:21	7	
break	101:16	101:21	8	
water	102:8	0:0	6	}
water	103:4	0:0	4	}
