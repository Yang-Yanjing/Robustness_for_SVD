func	1:0	139:0	0	static void	search_for_quantizers_twoloop
params	1:41	0:0	1	
param	1:42	1:63	2	AVCodecContext *	avctx
param	2:42	2:58	2	AACEncContext *	s
param	3:42	3:67	2	SingleChannelElement *	sce
param	4:42	4:60	2	const float	lambda
stmnts	0:0	138:31	1	
decl	6:4	6:30	2	int	start
op	6:14	0:0	2	=
water	6:16	0:0	2	0
water	6:17	0:0	2	,
decl	6:4	6:30	2	int	i
water	6:20	0:0	2	,
decl	6:4	6:30	2	int	w
water	6:23	0:0	2	,
decl	6:4	6:30	2	int	w2
water	6:27	0:0	2	,
decl	6:4	6:30	2	int	g
decl	7:4	7:101	2	int	destbits
op	7:17	0:0	2	=
water	7:19	0:0	2	avctx
op	7:24	0:0	2	->
water	7:26	0:0	2	bit_rate
op	7:35	0:0	2	*
water	7:37	0:0	2	1024
op	7:41	0:0	2	.
water	7:42	0:0	2	0
op	7:44	0:0	2	/
water	7:46	0:0	2	avctx
op	7:51	0:0	2	->
water	7:53	0:0	2	sample_rate
op	7:65	0:0	2	/
water	7:67	0:0	2	avctx
op	7:72	0:0	2	->
water	7:74	0:0	2	channels
op	7:83	0:0	2	*
water	7:85	0:0	2	(
water	7:86	0:0	2	lambda
op	7:93	0:0	2	/
water	7:95	0:0	2	120
op	7:98	0:0	2	.
water	7:99	0:0	2	f
water	7:100	0:0	2	)
decl	8:4	8:49	2	float	dists[128]
op	8:21	0:0	2	=
water	8:23	0:0	2	{
water	8:25	0:0	2	0
water	8:27	0:0	2	}
water	8:28	0:0	2	,
decl	8:4	8:49	2	float	uplims[128]
op	8:42	0:0	2	=
water	8:44	0:0	2	{
water	8:46	0:0	2	0
water	8:48	0:0	2	}
decl	9:4	9:22	2	float	maxvals[128]
decl	10:4	10:24	2	int	fflag
water	10:13	0:0	2	,
decl	10:4	10:24	2	int	minscaler
decl	11:4	11:16	2	int	its
op	11:13	0:0	2	=
water	11:15	0:0	2	0
decl	12:4	12:16	2	int	allz
op	12:13	0:0	2	=
water	12:15	0:0	2	0
decl	13:4	13:27	2	float	minthr
op	13:17	0:0	2	=
water	13:19	0:0	2	INFINITY
water	16:4	0:0	2	destbits
op	16:13	0:0	2	=
call	16:15	16:35	2	FFMIN
arg	16:21	16:29	3	destbits
water	16:21	0:0	4	destbits
arg	16:31	16:35	3	5800
water	16:31	0:0	4	5800
water	16:36	0:0	2	;
for	19:4	39:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	19:9	19:14	3	w = 0 ;
water	19:9	0:0	4	w
op	19:11	0:0	4	=
water	19:13	0:0	4	0
water	19:14	0:0	4	;
cond	19:16	19:29	3	w < sce -> ics . num_windows
water	19:16	0:0	4	w
op	19:18	0:0	4	<
water	19:20	0:0	4	sce
op	19:23	0:0	4	->
water	19:25	0:0	4	ics
op	19:28	0:0	4	.
water	19:29	0:0	4	num_windows
forexpr	19:42	19:67	3	w += sce -> ics . group_len [ w ]
water	19:42	0:0	4	w
op	19:44	0:0	4	+=
water	19:47	0:0	4	sce
op	19:50	0:0	4	->
water	19:52	0:0	4	ics
op	19:55	0:0	4	.
water	19:56	0:0	4	group_len
op	19:65	0:0	4	[
water	19:66	0:0	4	w
op	19:67	0:0	4	]
stmts	19:70	39:4	3	
water	19:70	0:0	4	{
for	20:8	38:8	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	20:13	20:18	5	g = 0 ;
water	20:13	0:0	6	g
op	20:15	0:0	6	=
water	20:17	0:0	6	0
water	20:18	0:0	6	;
cond	20:21	20:34	5	g < sce -> ics . num_swb
water	20:21	0:0	6	g
op	20:23	0:0	6	<
water	20:25	0:0	6	sce
op	20:28	0:0	6	->
water	20:30	0:0	6	ics
op	20:33	0:0	6	.
water	20:34	0:0	6	num_swb
forexpr	20:43	20:44	5	g ++
water	20:43	0:0	6	g
op	20:44	0:0	6	++
stmts	20:48	38:8	5	
water	20:48	0:0	6	{
decl	21:12	21:22	6	int	nz
op	21:19	0:0	6	=
water	21:21	0:0	6	0
decl	22:12	22:45	6	float	uplim
op	22:24	0:0	6	=
water	22:26	0:0	6	0
op	22:27	0:0	6	.
water	22:28	0:0	6	0
water	22:29	0:0	6	f
water	22:30	0:0	6	,
decl	22:12	22:45	6	float	energy
op	22:39	0:0	6	=
water	22:41	0:0	6	0
op	22:42	0:0	6	.
water	22:43	0:0	6	0
water	22:44	0:0	6	f
for	23:12	32:12	6	(w2 = 0 ;w2 < sce -> ics . group_len [ w ];w2 ++)
forinit	23:17	23:23	7	w2 = 0 ;
water	23:17	0:0	8	w2
op	23:20	0:0	8	=
water	23:22	0:0	8	0
water	23:23	0:0	8	;
cond	23:25	23:50	7	w2 < sce -> ics . group_len [ w ]
water	23:25	0:0	8	w2
op	23:28	0:0	8	<
water	23:30	0:0	8	sce
op	23:33	0:0	8	->
water	23:35	0:0	8	ics
op	23:38	0:0	8	.
water	23:39	0:0	8	group_len
op	23:48	0:0	8	[
water	23:49	0:0	8	w
op	23:50	0:0	8	]
forexpr	23:53	23:55	7	w2 ++
water	23:53	0:0	8	w2
op	23:55	0:0	8	++
stmts	23:59	32:12	7	
water	23:59	0:0	8	{
decl	24:16	24:83	8	FFPsyBand	*band
op	24:32	0:0	8	=
op	24:34	0:0	8	&
water	24:35	0:0	8	s
op	24:36	0:0	8	->
water	24:38	0:0	8	psy
op	24:41	0:0	8	.
water	24:42	0:0	8	ch
op	24:44	0:0	8	[
water	24:45	0:0	8	s
op	24:46	0:0	8	->
water	24:48	0:0	8	cur_channel
op	24:59	0:0	8	]
op	24:60	0:0	8	.
water	24:61	0:0	8	psy_bands
op	24:70	0:0	8	[
water	24:71	0:0	8	(
water	24:72	0:0	8	w
op	24:73	0:0	8	+
water	24:74	0:0	8	w2
water	24:76	0:0	8	)
op	24:77	0:0	8	*
water	24:78	0:0	8	16
op	24:80	0:0	8	+
water	24:81	0:0	8	g
op	24:82	0:0	8	]
water	25:16	0:0	8	uplim
op	25:23	0:0	8	+=
water	25:26	0:0	8	band
op	25:30	0:0	8	->
water	25:32	0:0	8	threshold
water	25:41	0:0	8	;
water	26:16	0:0	8	energy
op	26:23	0:0	8	+=
water	26:26	0:0	8	band
op	26:30	0:0	8	->
water	26:32	0:0	8	energy
water	26:38	0:0	8	;
if	27:16	30:16	8	(band -> energy <= band -> threshold || band -> threshold == 0 . 0 f)
cond	27:20	27:77	9	band -> energy <= band -> threshold || band -> threshold == 0 . 0 f
water	27:20	0:0	10	band
op	27:24	0:0	10	->
water	27:26	0:0	10	energy
op	27:33	0:0	10	<=
water	27:36	0:0	10	band
op	27:40	0:0	10	->
water	27:42	0:0	10	threshold
op	27:52	0:0	10	||
water	27:55	0:0	10	band
op	27:59	0:0	10	->
water	27:61	0:0	10	threshold
op	27:71	0:0	10	==
water	27:74	0:0	10	0
op	27:75	0:0	10	.
water	27:76	0:0	10	0
water	27:77	0:0	10	f
stmts	27:80	30:16	9	
water	27:80	0:0	10	{
water	28:20	0:0	10	sce
op	28:23	0:0	10	->
water	28:25	0:0	10	zeroes
op	28:31	0:0	10	[
water	28:32	0:0	10	(
water	28:33	0:0	10	w
op	28:34	0:0	10	+
water	28:35	0:0	10	w2
water	28:37	0:0	10	)
op	28:38	0:0	10	*
water	28:39	0:0	10	16
op	28:41	0:0	10	+
water	28:42	0:0	10	g
op	28:43	0:0	10	]
op	28:45	0:0	10	=
water	28:47	0:0	10	1
water	28:48	0:0	10	;
continue	29:20	29:28	10	
water	30:16	0:0	10	}
water	31:16	0:0	8	nz
op	31:19	0:0	8	=
water	31:21	0:0	8	1
water	31:22	0:0	8	;
water	32:12	0:0	8	}
water	33:12	0:0	6	uplims
op	33:18	0:0	6	[
water	33:19	0:0	6	w
op	33:20	0:0	6	*
water	33:21	0:0	6	16
op	33:23	0:0	6	+
water	33:24	0:0	6	g
op	33:25	0:0	6	]
op	33:27	0:0	6	=
water	33:29	0:0	6	uplim
op	33:35	0:0	6	*
water	33:36	0:0	6	512
water	33:39	0:0	6	;
water	34:12	0:0	6	sce
op	34:15	0:0	6	->
water	34:17	0:0	6	zeroes
op	34:23	0:0	6	[
water	34:24	0:0	6	w
op	34:25	0:0	6	*
water	34:26	0:0	6	16
op	34:28	0:0	6	+
water	34:29	0:0	6	g
op	34:30	0:0	6	]
op	34:32	0:0	6	=
op	34:34	0:0	6	!
water	34:35	0:0	6	nz
water	34:37	0:0	6	;
if	35:12	36:45	6	(nz)
cond	35:16	35:16	7	nz
water	35:16	0:0	8	nz
stmts	36:16	36:45	7	
water	36:16	0:0	8	minthr
op	36:23	0:0	8	=
call	36:25	36:44	8	FFMIN
arg	36:31	36:37	9	minthr
water	36:31	0:0	10	minthr
arg	36:39	36:44	9	uplim
water	36:39	0:0	10	uplim
water	36:45	0:0	8	;
water	37:12	0:0	6	allz
op	37:17	0:0	6	|=
water	37:20	0:0	6	nz
water	37:22	0:0	6	;
water	38:8	0:0	6	}
water	39:4	0:0	4	}
for	40:4	48:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	40:9	40:14	3	w = 0 ;
water	40:9	0:0	4	w
op	40:11	0:0	4	=
water	40:13	0:0	4	0
water	40:14	0:0	4	;
cond	40:16	40:29	3	w < sce -> ics . num_windows
water	40:16	0:0	4	w
op	40:18	0:0	4	<
water	40:20	0:0	4	sce
op	40:23	0:0	4	->
water	40:25	0:0	4	ics
op	40:28	0:0	4	.
water	40:29	0:0	4	num_windows
forexpr	40:42	40:67	3	w += sce -> ics . group_len [ w ]
water	40:42	0:0	4	w
op	40:44	0:0	4	+=
water	40:47	0:0	4	sce
op	40:50	0:0	4	->
water	40:52	0:0	4	ics
op	40:55	0:0	4	.
water	40:56	0:0	4	group_len
op	40:65	0:0	4	[
water	40:66	0:0	4	w
op	40:67	0:0	4	]
stmts	40:70	48:4	3	
water	40:70	0:0	4	{
for	41:8	47:8	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	41:13	41:18	5	g = 0 ;
water	41:13	0:0	6	g
op	41:15	0:0	6	=
water	41:17	0:0	6	0
water	41:18	0:0	6	;
cond	41:21	41:34	5	g < sce -> ics . num_swb
water	41:21	0:0	6	g
op	41:23	0:0	6	<
water	41:25	0:0	6	sce
op	41:28	0:0	6	->
water	41:30	0:0	6	ics
op	41:33	0:0	6	.
water	41:34	0:0	6	num_swb
forexpr	41:43	41:44	5	g ++
water	41:43	0:0	6	g
op	41:44	0:0	6	++
stmts	41:48	47:8	5	
water	41:48	0:0	6	{
if	42:12	45:12	6	(sce -> zeroes [ w * 16 + g ])
cond	42:16	42:34	7	sce -> zeroes [ w * 16 + g ]
water	42:16	0:0	8	sce
op	42:19	0:0	8	->
water	42:21	0:0	8	zeroes
op	42:27	0:0	8	[
water	42:28	0:0	8	w
op	42:29	0:0	8	*
water	42:30	0:0	8	16
op	42:32	0:0	8	+
water	42:33	0:0	8	g
op	42:34	0:0	8	]
stmts	42:37	45:12	7	
water	42:37	0:0	8	{
water	43:16	0:0	8	sce
op	43:19	0:0	8	->
water	43:21	0:0	8	sf_idx
op	43:27	0:0	8	[
water	43:28	0:0	8	w
op	43:29	0:0	8	*
water	43:30	0:0	8	16
op	43:32	0:0	8	+
water	43:33	0:0	8	g
op	43:34	0:0	8	]
op	43:36	0:0	8	=
water	43:38	0:0	8	SCALE_ONE_POS
water	43:51	0:0	8	;
continue	44:16	44:24	8	
water	45:12	0:0	8	}
water	46:12	0:0	6	sce
op	46:15	0:0	6	->
water	46:17	0:0	6	sf_idx
op	46:23	0:0	6	[
water	46:24	0:0	6	w
op	46:25	0:0	6	*
water	46:26	0:0	6	16
op	46:28	0:0	6	+
water	46:29	0:0	6	g
op	46:30	0:0	6	]
op	46:32	0:0	6	=
water	46:34	0:0	6	SCALE_ONE_POS
op	46:48	0:0	6	+
call	46:50	46:89	6	FFMIN
arg	46:56	46:86	7	log2f(uplims[w*16+g]/minthr)*4
call	46:56	46:83	8	log2f
arg	46:62	46:83	9	uplims[w*16+g]/minthr
water	46:62	0:0	10	uplims
op	46:68	0:0	10	[
water	46:69	0:0	10	w
op	46:70	0:0	10	*
water	46:71	0:0	10	16
op	46:73	0:0	10	+
water	46:74	0:0	10	g
op	46:75	0:0	10	]
op	46:76	0:0	10	/
water	46:77	0:0	10	minthr
op	46:84	0:0	8	*
water	46:85	0:0	8	4
arg	46:87	46:89	7	59
water	46:87	0:0	8	59
water	46:90	0:0	6	;
water	47:8	0:0	6	}
water	48:4	0:0	4	}
if	49:4	50:14	2	(! allz)
cond	49:8	49:9	3	! allz
op	49:8	0:0	4	!
water	49:9	0:0	4	allz
stmts	50:8	50:14	3	
return	50:8	50:14	4	
call	51:4	51:44	2	abs_pow34_v
arg	51:16	51:25	3	s->scoefs
water	51:16	0:0	4	s
op	51:17	0:0	4	->
water	51:19	0:0	4	scoefs
arg	51:27	51:38	3	sce->coeffs
water	51:27	0:0	4	sce
op	51:30	0:0	4	->
water	51:32	0:0	4	coeffs
arg	51:40	51:44	3	1024
water	51:40	0:0	4	1024
water	51:45	0:0	2	;
for	52:4	59:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	52:9	52:14	3	w = 0 ;
water	52:9	0:0	4	w
op	52:11	0:0	4	=
water	52:13	0:0	4	0
water	52:14	0:0	4	;
cond	52:16	52:29	3	w < sce -> ics . num_windows
water	52:16	0:0	4	w
op	52:18	0:0	4	<
water	52:20	0:0	4	sce
op	52:23	0:0	4	->
water	52:25	0:0	4	ics
op	52:28	0:0	4	.
water	52:29	0:0	4	num_windows
forexpr	52:42	52:67	3	w += sce -> ics . group_len [ w ]
water	52:42	0:0	4	w
op	52:44	0:0	4	+=
water	52:47	0:0	4	sce
op	52:50	0:0	4	->
water	52:52	0:0	4	ics
op	52:55	0:0	4	.
water	52:56	0:0	4	group_len
op	52:65	0:0	4	[
water	52:66	0:0	4	w
op	52:67	0:0	4	]
stmts	52:70	59:4	3	
water	52:70	0:0	4	{
water	53:8	0:0	4	start
op	53:14	0:0	4	=
water	53:16	0:0	4	w
op	53:17	0:0	4	*
water	53:18	0:0	4	128
water	53:21	0:0	4	;
for	54:8	58:8	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	54:13	54:18	5	g = 0 ;
water	54:13	0:0	6	g
op	54:15	0:0	6	=
water	54:17	0:0	6	0
water	54:18	0:0	6	;
cond	54:21	54:34	5	g < sce -> ics . num_swb
water	54:21	0:0	6	g
op	54:23	0:0	6	<
water	54:25	0:0	6	sce
op	54:28	0:0	6	->
water	54:30	0:0	6	ics
op	54:33	0:0	6	.
water	54:34	0:0	6	num_swb
forexpr	54:43	54:44	5	g ++
water	54:43	0:0	6	g
op	54:44	0:0	6	++
stmts	54:48	58:8	5	
water	54:48	0:0	6	{
decl	55:12	55:51	6	const float	*scaled
op	55:32	0:0	6	=
water	55:34	0:0	6	s
op	55:35	0:0	6	->
water	55:37	0:0	6	scoefs
op	55:44	0:0	6	+
water	55:46	0:0	6	start
water	56:12	0:0	6	maxvals
op	56:19	0:0	6	[
water	56:20	0:0	6	w
op	56:21	0:0	6	*
water	56:22	0:0	6	16
op	56:24	0:0	6	+
water	56:25	0:0	6	g
op	56:26	0:0	6	]
op	56:28	0:0	6	=
call	56:30	56:95	6	find_max_val
arg	56:43	56:64	7	sce->ics.group_len[w]
water	56:43	0:0	8	sce
op	56:46	0:0	8	->
water	56:48	0:0	8	ics
op	56:51	0:0	8	.
water	56:52	0:0	8	group_len
op	56:61	0:0	8	[
water	56:62	0:0	8	w
op	56:63	0:0	8	]
arg	56:66	56:87	7	sce->ics.swb_sizes[g]
water	56:66	0:0	8	sce
op	56:69	0:0	8	->
water	56:71	0:0	8	ics
op	56:74	0:0	8	.
water	56:75	0:0	8	swb_sizes
op	56:84	0:0	8	[
water	56:85	0:0	8	g
op	56:86	0:0	8	]
arg	56:89	56:95	7	scaled
water	56:89	0:0	8	scaled
water	56:96	0:0	6	;
water	57:12	0:0	6	start
op	57:18	0:0	6	+=
water	57:21	0:0	6	sce
op	57:24	0:0	6	->
water	57:26	0:0	6	ics
op	57:29	0:0	6	.
water	57:30	0:0	6	swb_sizes
op	57:39	0:0	6	[
water	57:40	0:0	6	g
op	57:41	0:0	6	]
water	57:42	0:0	6	;
water	58:8	0:0	6	}
water	59:4	0:0	4	}
do	62:4	138:4	2	(fflag && its < 10)
cond	138:13	138:28	3	fflag && its < 10
water	138:13	0:0	4	fflag
op	138:19	0:0	4	&&
water	138:22	0:0	4	its
op	138:26	0:0	4	<
water	138:28	0:0	4	10
stmts	62:7	138:4	3	
water	62:7	0:0	4	{
decl	63:8	63:24	4	int	tbits
water	63:17	0:0	4	,
decl	63:8	63:24	4	int	qstep
water	64:8	0:0	4	minscaler
op	64:18	0:0	4	=
water	64:20	0:0	4	sce
op	64:23	0:0	4	->
water	64:25	0:0	4	sf_idx
op	64:31	0:0	4	[
water	64:32	0:0	4	0
op	64:33	0:0	4	]
water	64:34	0:0	4	;
water	66:8	0:0	4	qstep
op	66:14	0:0	4	=
water	66:16	0:0	4	its
water	66:20	0:0	4	?
water	66:22	0:0	4	1
water	66:24	0:0	4	:
water	66:26	0:0	4	32
water	66:28	0:0	4	;
do	67:8	118:8	4	(qstep)
cond	118:17	118:17	5	qstep
water	118:17	0:0	6	qstep
stmts	67:11	118:8	5	
water	67:11	0:0	6	{
decl	68:12	68:25	6	int	prev
op	68:21	0:0	6	=
op	68:23	0:0	6	-
water	68:24	0:0	6	1
water	69:12	0:0	6	tbits
op	69:18	0:0	6	=
water	69:20	0:0	6	0
water	69:21	0:0	6	;
for	70:12	105:12	6	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	70:17	70:22	7	w = 0 ;
water	70:17	0:0	8	w
op	70:19	0:0	8	=
water	70:21	0:0	8	0
water	70:22	0:0	8	;
cond	70:24	70:37	7	w < sce -> ics . num_windows
water	70:24	0:0	8	w
op	70:26	0:0	8	<
water	70:28	0:0	8	sce
op	70:31	0:0	8	->
water	70:33	0:0	8	ics
op	70:36	0:0	8	.
water	70:37	0:0	8	num_windows
forexpr	70:50	70:75	7	w += sce -> ics . group_len [ w ]
water	70:50	0:0	8	w
op	70:52	0:0	8	+=
water	70:55	0:0	8	sce
op	70:58	0:0	8	->
water	70:60	0:0	8	ics
op	70:63	0:0	8	.
water	70:64	0:0	8	group_len
op	70:73	0:0	8	[
water	70:74	0:0	8	w
op	70:75	0:0	8	]
stmts	70:78	105:12	7	
water	70:78	0:0	8	{
water	71:16	0:0	8	start
op	71:22	0:0	8	=
water	71:24	0:0	8	w
op	71:25	0:0	8	*
water	71:26	0:0	8	128
water	71:29	0:0	8	;
for	72:16	104:16	8	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	72:21	72:26	9	g = 0 ;
water	72:21	0:0	10	g
op	72:23	0:0	10	=
water	72:25	0:0	10	0
water	72:26	0:0	10	;
cond	72:29	72:42	9	g < sce -> ics . num_swb
water	72:29	0:0	10	g
op	72:31	0:0	10	<
water	72:33	0:0	10	sce
op	72:36	0:0	10	->
water	72:38	0:0	10	ics
op	72:41	0:0	10	.
water	72:42	0:0	10	num_swb
forexpr	72:51	72:52	9	g ++
water	72:51	0:0	10	g
op	72:52	0:0	10	++
stmts	72:56	104:16	9	
water	72:56	0:0	10	{
decl	73:20	73:60	10	const float	*coefs
op	73:39	0:0	10	=
op	73:41	0:0	10	&
water	73:42	0:0	10	sce
op	73:45	0:0	10	->
water	73:47	0:0	10	coeffs
op	73:53	0:0	10	[
water	73:54	0:0	10	start
op	73:59	0:0	10	]
decl	74:20	74:59	10	const float	*scaled
op	74:40	0:0	10	=
op	74:42	0:0	10	&
water	74:43	0:0	10	s
op	74:44	0:0	10	->
water	74:46	0:0	10	scoefs
op	74:52	0:0	10	[
water	74:53	0:0	10	start
op	74:58	0:0	10	]
decl	75:20	75:32	10	int	bits
op	75:29	0:0	10	=
water	75:31	0:0	10	0
decl	76:20	76:26	10	int	cb
decl	77:20	77:37	10	float	dist
op	77:31	0:0	10	=
water	77:33	0:0	10	0
op	77:34	0:0	10	.
water	77:35	0:0	10	0
water	77:36	0:0	10	f
if	78:20	81:20	10	(sce -> zeroes [ w * 16 + g ] || sce -> sf_idx [ w * 16 + g ] >= 218)
cond	78:24	78:70	11	sce -> zeroes [ w * 16 + g ] || sce -> sf_idx [ w * 16 + g ] >= 218
water	78:24	0:0	12	sce
op	78:27	0:0	12	->
water	78:29	0:0	12	zeroes
op	78:35	0:0	12	[
water	78:36	0:0	12	w
op	78:37	0:0	12	*
water	78:38	0:0	12	16
op	78:40	0:0	12	+
water	78:41	0:0	12	g
op	78:42	0:0	12	]
op	78:44	0:0	12	||
water	78:47	0:0	12	sce
op	78:50	0:0	12	->
water	78:52	0:0	12	sf_idx
op	78:58	0:0	12	[
water	78:59	0:0	12	w
op	78:60	0:0	12	*
water	78:61	0:0	12	16
op	78:63	0:0	12	+
water	78:64	0:0	12	g
op	78:65	0:0	12	]
op	78:67	0:0	12	>=
water	78:70	0:0	12	218
stmts	78:75	81:20	11	
water	78:75	0:0	12	{
water	79:24	0:0	12	start
op	79:30	0:0	12	+=
water	79:33	0:0	12	sce
op	79:36	0:0	12	->
water	79:38	0:0	12	ics
op	79:41	0:0	12	.
water	79:42	0:0	12	swb_sizes
op	79:51	0:0	12	[
water	79:52	0:0	12	g
op	79:53	0:0	12	]
water	79:54	0:0	12	;
continue	80:24	80:32	12	
water	81:20	0:0	12	}
water	82:20	0:0	10	minscaler
op	82:30	0:0	10	=
call	82:32	82:68	10	FFMIN
arg	82:38	82:47	11	minscaler
water	82:38	0:0	12	minscaler
arg	82:49	82:68	11	sce->sf_idx[w*16+g]
water	82:49	0:0	12	sce
op	82:52	0:0	12	->
water	82:54	0:0	12	sf_idx
op	82:60	0:0	12	[
water	82:61	0:0	12	w
op	82:62	0:0	12	*
water	82:63	0:0	12	16
op	82:65	0:0	12	+
water	82:66	0:0	12	g
op	82:67	0:0	12	]
water	82:69	0:0	10	;
water	83:20	0:0	10	cb
op	83:23	0:0	10	=
call	83:25	83:75	10	find_min_book
arg	83:39	83:54	11	maxvals[w*16+g]
water	83:39	0:0	12	maxvals
op	83:46	0:0	12	[
water	83:47	0:0	12	w
op	83:48	0:0	12	*
water	83:49	0:0	12	16
op	83:51	0:0	12	+
water	83:52	0:0	12	g
op	83:53	0:0	12	]
arg	83:56	83:75	11	sce->sf_idx[w*16+g]
water	83:56	0:0	12	sce
op	83:59	0:0	12	->
water	83:61	0:0	12	sf_idx
op	83:67	0:0	12	[
water	83:68	0:0	12	w
op	83:69	0:0	12	*
water	83:70	0:0	12	16
op	83:72	0:0	12	+
water	83:73	0:0	12	g
op	83:74	0:0	12	]
water	83:76	0:0	10	;
for	84:20	96:20	10	(w2 = 0 ;w2 < sce -> ics . group_len [ w ];w2 ++)
forinit	84:25	84:31	11	w2 = 0 ;
water	84:25	0:0	12	w2
op	84:28	0:0	12	=
water	84:30	0:0	12	0
water	84:31	0:0	12	;
cond	84:33	84:58	11	w2 < sce -> ics . group_len [ w ]
water	84:33	0:0	12	w2
op	84:36	0:0	12	<
water	84:38	0:0	12	sce
op	84:41	0:0	12	->
water	84:43	0:0	12	ics
op	84:46	0:0	12	.
water	84:47	0:0	12	group_len
op	84:56	0:0	12	[
water	84:57	0:0	12	w
op	84:58	0:0	12	]
forexpr	84:61	84:63	11	w2 ++
water	84:61	0:0	12	w2
op	84:63	0:0	12	++
stmts	84:67	96:20	11	
water	84:67	0:0	12	{
decl	85:24	85:29	12	int	b
water	86:24	0:0	12	dist
op	86:29	0:0	12	+=
call	86:32	94:52	12	quantize_band_cost
arg	86:51	86:52	13	s
water	86:51	0:0	14	s
arg	86:54	86:68	13	coefs+w2*128
water	86:54	0:0	14	coefs
op	86:60	0:0	14	+
water	86:62	0:0	14	w2
op	86:64	0:0	14	*
water	86:65	0:0	14	128
arg	87:51	87:66	13	scaled+w2*128
water	87:51	0:0	14	scaled
op	87:58	0:0	14	+
water	87:60	0:0	14	w2
op	87:62	0:0	14	*
water	87:63	0:0	14	128
arg	88:51	88:72	13	sce->ics.swb_sizes[g]
water	88:51	0:0	14	sce
op	88:54	0:0	14	->
water	88:56	0:0	14	ics
op	88:59	0:0	14	.
water	88:60	0:0	14	swb_sizes
op	88:69	0:0	14	[
water	88:70	0:0	14	g
op	88:71	0:0	14	]
arg	89:51	89:70	13	sce->sf_idx[w*16+g]
water	89:51	0:0	14	sce
op	89:54	0:0	14	->
water	89:56	0:0	14	sf_idx
op	89:62	0:0	14	[
water	89:63	0:0	14	w
op	89:64	0:0	14	*
water	89:65	0:0	14	16
op	89:67	0:0	14	+
water	89:68	0:0	14	g
op	89:69	0:0	14	]
arg	90:51	90:53	13	cb
water	90:51	0:0	14	cb
arg	91:51	91:55	13	1.0f
water	91:51	0:0	14	1
op	91:52	0:0	14	.
water	91:53	0:0	14	0
water	91:54	0:0	14	f
arg	92:51	92:59	13	INFINITY
water	92:51	0:0	14	INFINITY
arg	93:51	93:53	13	&b
op	93:51	0:0	14	&
water	93:52	0:0	14	b
arg	94:51	94:52	13	0
water	94:51	0:0	14	0
water	94:53	0:0	12	;
water	95:24	0:0	12	bits
op	95:29	0:0	12	+=
water	95:32	0:0	12	b
water	95:33	0:0	12	;
water	96:20	0:0	12	}
water	97:20	0:0	10	dists
op	97:25	0:0	10	[
water	97:26	0:0	10	w
op	97:27	0:0	10	*
water	97:28	0:0	10	16
op	97:30	0:0	10	+
water	97:31	0:0	10	g
op	97:32	0:0	10	]
op	97:34	0:0	10	=
water	97:36	0:0	10	dist
op	97:41	0:0	10	-
water	97:43	0:0	10	bits
water	97:47	0:0	10	;
if	98:20	100:20	10	(prev != - 1)
cond	98:24	98:33	11	prev != - 1
water	98:24	0:0	12	prev
op	98:29	0:0	12	!=
op	98:32	0:0	12	-
water	98:33	0:0	12	1
stmts	98:36	100:20	11	
water	98:36	0:0	12	{
water	99:24	0:0	12	bits
op	99:29	0:0	12	+=
water	99:32	0:0	12	ff_aac_scalefactor_bits
op	99:55	0:0	12	[
water	99:56	0:0	12	sce
op	99:59	0:0	12	->
water	99:61	0:0	12	sf_idx
op	99:67	0:0	12	[
water	99:68	0:0	12	w
op	99:69	0:0	12	*
water	99:70	0:0	12	16
op	99:72	0:0	12	+
water	99:73	0:0	12	g
op	99:74	0:0	12	]
op	99:76	0:0	12	-
water	99:78	0:0	12	prev
op	99:83	0:0	12	+
water	99:85	0:0	12	SCALE_DIFF_ZERO
op	99:100	0:0	12	]
water	99:101	0:0	12	;
water	100:20	0:0	12	}
water	101:20	0:0	10	tbits
op	101:26	0:0	10	+=
water	101:29	0:0	10	bits
water	101:33	0:0	10	;
water	102:20	0:0	10	start
op	102:26	0:0	10	+=
water	102:29	0:0	10	sce
op	102:32	0:0	10	->
water	102:34	0:0	10	ics
op	102:37	0:0	10	.
water	102:38	0:0	10	swb_sizes
op	102:47	0:0	10	[
water	102:48	0:0	10	g
op	102:49	0:0	10	]
water	102:50	0:0	10	;
water	103:20	0:0	10	prev
op	103:25	0:0	10	=
water	103:27	0:0	10	sce
op	103:30	0:0	10	->
water	103:32	0:0	10	sf_idx
op	103:38	0:0	10	[
water	103:39	0:0	10	w
op	103:40	0:0	10	*
water	103:41	0:0	10	16
op	103:43	0:0	10	+
water	103:44	0:0	10	g
op	103:45	0:0	10	]
water	103:46	0:0	10	;
water	104:16	0:0	10	}
water	105:12	0:0	8	}
if	106:12	110:12	6	(tbits > destbits)
cond	106:16	106:24	7	tbits > destbits
water	106:16	0:0	8	tbits
op	106:22	0:0	8	>
water	106:24	0:0	8	destbits
stmts	106:34	110:12	7	
water	106:34	0:0	8	{
for	107:16	109:47	8	(i = 0 ;i < 128;i ++)
forinit	107:21	107:26	9	i = 0 ;
water	107:21	0:0	10	i
op	107:23	0:0	10	=
water	107:25	0:0	10	0
water	107:26	0:0	10	;
cond	107:28	107:32	9	i < 128
water	107:28	0:0	10	i
op	107:30	0:0	10	<
water	107:32	0:0	10	128
forexpr	107:37	107:38	9	i ++
water	107:37	0:0	10	i
op	107:38	0:0	10	++
stmts	108:20	109:47	9	
if	108:20	109:47	10	(sce -> sf_idx [ i ] < 218 - qstep)
cond	108:24	108:47	11	sce -> sf_idx [ i ] < 218 - qstep
water	108:24	0:0	12	sce
op	108:27	0:0	12	->
water	108:29	0:0	12	sf_idx
op	108:35	0:0	12	[
water	108:36	0:0	12	i
op	108:37	0:0	12	]
op	108:39	0:0	12	<
water	108:41	0:0	12	218
op	108:45	0:0	12	-
water	108:47	0:0	12	qstep
stmts	109:24	109:47	11	
water	109:24	0:0	12	sce
op	109:27	0:0	12	->
water	109:29	0:0	12	sf_idx
op	109:35	0:0	12	[
water	109:36	0:0	12	i
op	109:37	0:0	12	]
op	109:39	0:0	12	+=
water	109:42	0:0	12	qstep
water	109:47	0:0	12	;
water	110:12	0:0	8	}
else	110:14	114:12	6
stmts	110:19	114:12	7	
water	110:19	0:0	8	{
for	111:16	113:47	8	(i = 0 ;i < 128;i ++)
forinit	111:21	111:26	9	i = 0 ;
water	111:21	0:0	10	i
op	111:23	0:0	10	=
water	111:25	0:0	10	0
water	111:26	0:0	10	;
cond	111:28	111:32	9	i < 128
water	111:28	0:0	10	i
op	111:30	0:0	10	<
water	111:32	0:0	10	128
forexpr	111:37	111:38	9	i ++
water	111:37	0:0	10	i
op	111:38	0:0	10	++
stmts	112:20	113:47	9	
if	112:20	113:47	10	(sce -> sf_idx [ i ] > 60 - qstep)
cond	112:24	112:46	11	sce -> sf_idx [ i ] > 60 - qstep
water	112:24	0:0	12	sce
op	112:27	0:0	12	->
water	112:29	0:0	12	sf_idx
op	112:35	0:0	12	[
water	112:36	0:0	12	i
op	112:37	0:0	12	]
op	112:39	0:0	12	>
water	112:41	0:0	12	60
op	112:44	0:0	12	-
water	112:46	0:0	12	qstep
stmts	113:24	113:47	11	
water	113:24	0:0	12	sce
op	113:27	0:0	12	->
water	113:29	0:0	12	sf_idx
op	113:35	0:0	12	[
water	113:36	0:0	12	i
op	113:37	0:0	12	]
op	113:39	0:0	12	-=
water	113:42	0:0	12	qstep
water	113:47	0:0	12	;
water	114:12	0:0	8	}
water	115:12	0:0	6	qstep
op	115:18	0:0	6	>>=
water	115:22	0:0	6	1
water	115:23	0:0	6	;
if	116:12	117:25	6	(! qstep && tbits > destbits * 1 . 02 && sce -> sf_idx [ 0 ] < 217)
cond	116:16	116:68	7	! qstep && tbits > destbits * 1 . 02 && sce -> sf_idx [ 0 ] < 217
op	116:16	0:0	8	!
water	116:17	0:0	8	qstep
op	116:23	0:0	8	&&
water	116:26	0:0	8	tbits
op	116:32	0:0	8	>
water	116:34	0:0	8	destbits
op	116:42	0:0	8	*
water	116:43	0:0	8	1
op	116:44	0:0	8	.
water	116:45	0:0	8	02
op	116:48	0:0	8	&&
water	116:51	0:0	8	sce
op	116:54	0:0	8	->
water	116:56	0:0	8	sf_idx
op	116:62	0:0	8	[
water	116:63	0:0	8	0
op	116:64	0:0	8	]
op	116:66	0:0	8	<
water	116:68	0:0	8	217
stmts	117:16	117:25	7	
water	117:16	0:0	8	qstep
op	117:22	0:0	8	=
water	117:24	0:0	8	1
water	117:25	0:0	8	;
water	118:8	0:0	6	}
water	118:23	0:0	4	;
water	119:8	0:0	4	fflag
op	119:14	0:0	4	=
water	119:16	0:0	4	0
water	119:17	0:0	4	;
water	120:8	0:0	4	minscaler
op	120:18	0:0	4	=
call	120:20	120:63	4	av_clip
arg	120:28	120:37	5	minscaler
water	120:28	0:0	6	minscaler
arg	120:39	120:41	5	60
water	120:39	0:0	6	60
arg	120:43	120:63	5	255-SCALE_MAX_DIFF
water	120:43	0:0	6	255
op	120:47	0:0	6	-
water	120:49	0:0	6	SCALE_MAX_DIFF
water	120:64	0:0	4	;
for	121:8	136:8	4	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	121:13	121:18	5	w = 0 ;
water	121:13	0:0	6	w
op	121:15	0:0	6	=
water	121:17	0:0	6	0
water	121:18	0:0	6	;
cond	121:20	121:33	5	w < sce -> ics . num_windows
water	121:20	0:0	6	w
op	121:22	0:0	6	<
water	121:24	0:0	6	sce
op	121:27	0:0	6	->
water	121:29	0:0	6	ics
op	121:32	0:0	6	.
water	121:33	0:0	6	num_windows
forexpr	121:46	121:71	5	w += sce -> ics . group_len [ w ]
water	121:46	0:0	6	w
op	121:48	0:0	6	+=
water	121:51	0:0	6	sce
op	121:54	0:0	6	->
water	121:56	0:0	6	ics
op	121:59	0:0	6	.
water	121:60	0:0	6	group_len
op	121:69	0:0	6	[
water	121:70	0:0	6	w
op	121:71	0:0	6	]
stmts	121:74	136:8	5	
water	121:74	0:0	6	{
for	122:12	135:12	6	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	122:17	122:22	7	g = 0 ;
water	122:17	0:0	8	g
op	122:19	0:0	8	=
water	122:21	0:0	8	0
water	122:22	0:0	8	;
cond	122:24	122:37	7	g < sce -> ics . num_swb
water	122:24	0:0	8	g
op	122:26	0:0	8	<
water	122:28	0:0	8	sce
op	122:31	0:0	8	->
water	122:33	0:0	8	ics
op	122:36	0:0	8	.
water	122:37	0:0	8	num_swb
forexpr	122:46	122:47	7	g ++
water	122:46	0:0	8	g
op	122:47	0:0	8	++
stmts	122:51	135:12	7	
water	122:51	0:0	8	{
decl	123:16	123:48	8	int	prevsc
op	123:27	0:0	8	=
water	123:29	0:0	8	sce
op	123:32	0:0	8	->
water	123:34	0:0	8	sf_idx
op	123:40	0:0	8	[
water	123:41	0:0	8	w
op	123:42	0:0	8	*
water	123:43	0:0	8	16
op	123:45	0:0	8	+
water	123:46	0:0	8	g
op	123:47	0:0	8	]
if	124:16	129:16	8	(dists [ w * 16 + g ] > uplims [ w * 16 + g ] && sce -> sf_idx [ w * 16 + g ] > 60)
cond	124:20	124:76	9	dists [ w * 16 + g ] > uplims [ w * 16 + g ] && sce -> sf_idx [ w * 16 + g ] > 60
water	124:20	0:0	10	dists
op	124:25	0:0	10	[
water	124:26	0:0	10	w
op	124:27	0:0	10	*
water	124:28	0:0	10	16
op	124:30	0:0	10	+
water	124:31	0:0	10	g
op	124:32	0:0	10	]
op	124:34	0:0	10	>
water	124:36	0:0	10	uplims
op	124:42	0:0	10	[
water	124:43	0:0	10	w
op	124:44	0:0	10	*
water	124:45	0:0	10	16
op	124:47	0:0	10	+
water	124:48	0:0	10	g
op	124:49	0:0	10	]
op	124:51	0:0	10	&&
water	124:54	0:0	10	sce
op	124:57	0:0	10	->
water	124:59	0:0	10	sf_idx
op	124:65	0:0	10	[
water	124:66	0:0	10	w
op	124:67	0:0	10	*
water	124:68	0:0	10	16
op	124:70	0:0	10	+
water	124:71	0:0	10	g
op	124:72	0:0	10	]
op	124:74	0:0	10	>
water	124:76	0:0	10	60
stmts	124:80	129:16	9	
water	124:80	0:0	10	{
if	125:20	126:45	10	(find_min_book (maxvals [ w * 16 + g ] ,sce -> sf_idx [ w * 16 + g ] - 1 ))
cond	125:24	125:76	11	find_min_book (maxvals [ w * 16 + g ] ,sce -> sf_idx [ w * 16 + g ] - 1 )
call	125:24	125:76	12	find_min_book
arg	125:38	125:53	13	maxvals[w*16+g]
water	125:38	0:0	14	maxvals
op	125:45	0:0	14	[
water	125:46	0:0	14	w
op	125:47	0:0	14	*
water	125:48	0:0	14	16
op	125:50	0:0	14	+
water	125:51	0:0	14	g
op	125:52	0:0	14	]
arg	125:55	125:76	13	sce->sf_idx[w*16+g]-1
water	125:55	0:0	14	sce
op	125:58	0:0	14	->
water	125:60	0:0	14	sf_idx
op	125:66	0:0	14	[
water	125:67	0:0	14	w
op	125:68	0:0	14	*
water	125:69	0:0	14	16
op	125:71	0:0	14	+
water	125:72	0:0	14	g
op	125:73	0:0	14	]
op	125:74	0:0	14	-
water	125:75	0:0	14	1
stmts	126:24	126:45	11	
water	126:24	0:0	12	sce
op	126:27	0:0	12	->
water	126:29	0:0	12	sf_idx
op	126:35	0:0	12	[
water	126:36	0:0	12	w
op	126:37	0:0	12	*
water	126:38	0:0	12	16
op	126:40	0:0	12	+
water	126:41	0:0	12	g
op	126:42	0:0	12	]
op	126:43	0:0	12	--
water	126:45	0:0	12	;
else	127:20	128:46	10
stmts	128:24	128:46	11	
water	128:24	0:0	12	sce
op	128:27	0:0	12	->
water	128:29	0:0	12	sf_idx
op	128:35	0:0	12	[
water	128:36	0:0	12	w
op	128:37	0:0	12	*
water	128:38	0:0	12	16
op	128:40	0:0	12	+
water	128:41	0:0	12	g
op	128:42	0:0	12	]
op	128:43	0:0	12	-=
water	128:45	0:0	12	2
water	128:46	0:0	12	;
water	129:16	0:0	10	}
water	130:16	0:0	8	sce
op	130:19	0:0	8	->
water	130:21	0:0	8	sf_idx
op	130:27	0:0	8	[
water	130:28	0:0	8	w
op	130:29	0:0	8	*
water	130:30	0:0	8	16
op	130:32	0:0	8	+
water	130:33	0:0	8	g
op	130:34	0:0	8	]
op	130:36	0:0	8	=
call	130:38	130:104	8	av_clip
arg	130:46	130:65	9	sce->sf_idx[w*16+g]
water	130:46	0:0	10	sce
op	130:49	0:0	10	->
water	130:51	0:0	10	sf_idx
op	130:57	0:0	10	[
water	130:58	0:0	10	w
op	130:59	0:0	10	*
water	130:60	0:0	10	16
op	130:62	0:0	10	+
water	130:63	0:0	10	g
op	130:64	0:0	10	]
arg	130:67	130:76	9	minscaler
water	130:67	0:0	10	minscaler
arg	130:78	130:104	9	minscaler+SCALE_MAX_DIFF
water	130:78	0:0	10	minscaler
op	130:88	0:0	10	+
water	130:90	0:0	10	SCALE_MAX_DIFF
water	130:105	0:0	8	;
water	131:16	0:0	8	sce
op	131:19	0:0	8	->
water	131:21	0:0	8	sf_idx
op	131:27	0:0	8	[
water	131:28	0:0	8	w
op	131:29	0:0	8	*
water	131:30	0:0	8	16
op	131:32	0:0	8	+
water	131:33	0:0	8	g
op	131:34	0:0	8	]
op	131:36	0:0	8	=
call	131:38	131:68	8	FFMIN
arg	131:44	131:63	9	sce->sf_idx[w*16+g]
water	131:44	0:0	10	sce
op	131:47	0:0	10	->
water	131:49	0:0	10	sf_idx
op	131:55	0:0	10	[
water	131:56	0:0	10	w
op	131:57	0:0	10	*
water	131:58	0:0	10	16
op	131:60	0:0	10	+
water	131:61	0:0	10	g
op	131:62	0:0	10	]
arg	131:65	131:68	9	219
water	131:65	0:0	10	219
water	131:69	0:0	8	;
if	132:16	133:29	8	(sce -> sf_idx [ w * 16 + g ] != prevsc)
cond	132:20	132:43	9	sce -> sf_idx [ w * 16 + g ] != prevsc
water	132:20	0:0	10	sce
op	132:23	0:0	10	->
water	132:25	0:0	10	sf_idx
op	132:31	0:0	10	[
water	132:32	0:0	10	w
op	132:33	0:0	10	*
water	132:34	0:0	10	16
op	132:36	0:0	10	+
water	132:37	0:0	10	g
op	132:38	0:0	10	]
op	132:40	0:0	10	!=
water	132:43	0:0	10	prevsc
stmts	133:20	133:29	9	
water	133:20	0:0	10	fflag
op	133:26	0:0	10	=
water	133:28	0:0	10	1
water	133:29	0:0	10	;
water	134:16	0:0	8	sce
op	134:19	0:0	8	->
water	134:21	0:0	8	band_type
op	134:30	0:0	8	[
water	134:31	0:0	8	w
op	134:32	0:0	8	*
water	134:33	0:0	8	16
op	134:35	0:0	8	+
water	134:36	0:0	8	g
op	134:37	0:0	8	]
op	134:39	0:0	8	=
call	134:41	134:91	8	find_min_book
arg	134:55	134:70	9	maxvals[w*16+g]
water	134:55	0:0	10	maxvals
op	134:62	0:0	10	[
water	134:63	0:0	10	w
op	134:64	0:0	10	*
water	134:65	0:0	10	16
op	134:67	0:0	10	+
water	134:68	0:0	10	g
op	134:69	0:0	10	]
arg	134:72	134:91	9	sce->sf_idx[w*16+g]
water	134:72	0:0	10	sce
op	134:75	0:0	10	->
water	134:77	0:0	10	sf_idx
op	134:83	0:0	10	[
water	134:84	0:0	10	w
op	134:85	0:0	10	*
water	134:86	0:0	10	16
op	134:88	0:0	10	+
water	134:89	0:0	10	g
op	134:90	0:0	10	]
water	134:92	0:0	8	;
water	135:12	0:0	8	}
water	136:8	0:0	6	}
water	137:8	0:0	4	its
op	137:11	0:0	4	++
water	137:13	0:0	4	;
water	138:4	0:0	4	}
water	138:31	0:0	2	;
decl	146:4	146:30	0	int	start
op	146:14	0:0	0	=
water	146:16	0:0	0	0
water	146:17	0:0	0	,
decl	146:4	146:30	0	int	i
water	146:20	0:0	0	,
decl	146:4	146:30	0	int	w
water	146:23	0:0	0	,
decl	146:4	146:30	0	int	w2
water	146:27	0:0	0	,
decl	146:4	146:30	0	int	g
decl	147:4	147:101	0	int	destbits
op	147:17	0:0	0	=
water	147:19	0:0	0	avctx
op	147:24	0:0	0	->
water	147:26	0:0	0	bit_rate
op	147:35	0:0	0	*
water	147:37	0:0	0	1024
op	147:41	0:0	0	.
water	147:42	0:0	0	0
op	147:44	0:0	0	/
water	147:46	0:0	0	avctx
op	147:51	0:0	0	->
water	147:53	0:0	0	sample_rate
op	147:65	0:0	0	/
water	147:67	0:0	0	avctx
op	147:72	0:0	0	->
water	147:74	0:0	0	channels
op	147:83	0:0	0	*
water	147:85	0:0	0	(
water	147:86	0:0	0	lambda
op	147:93	0:0	0	/
water	147:95	0:0	0	120
op	147:98	0:0	0	.
water	147:99	0:0	0	f
water	147:100	0:0	0	)
decl	148:4	148:49	0	float	dists[128]
op	148:21	0:0	0	=
water	148:23	0:0	0	{
water	148:25	0:0	0	0
water	148:27	0:0	0	}
water	148:28	0:0	0	,
decl	148:4	148:49	0	float	uplims[128]
op	148:42	0:0	0	=
water	148:44	0:0	0	{
water	148:46	0:0	0	0
water	148:48	0:0	0	}
