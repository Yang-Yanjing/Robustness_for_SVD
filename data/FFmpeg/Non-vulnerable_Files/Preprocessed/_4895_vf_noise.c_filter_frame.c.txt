func	1:0	34:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:63	2	AVFrame *	inpicref
stmnts	0:0	33:40	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:43	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	outputs
op	4:40	0:0	2	[
water	4:41	0:0	2	0
op	4:42	0:0	2	]
decl	5:4	5:31	2	NoiseContext	*n
op	5:20	0:0	2	=
water	5:22	0:0	2	ctx
op	5:25	0:0	2	->
water	5:27	0:0	2	priv
decl	6:4	6:17	2	ThreadData	td
decl	7:4	7:16	2	AVFrame	*out
decl	8:4	8:15	2	int	comp
water	8:12	0:0	2	,
decl	8:4	8:15	2	int	i
if	9:4	11:4	2	(av_frame_is_writable (inpicref ))
cond	9:8	9:37	3	av_frame_is_writable (inpicref )
call	9:8	9:37	4	av_frame_is_writable
arg	9:29	9:37	5	inpicref
water	9:29	0:0	6	inpicref
stmts	9:40	11:4	3	
water	9:40	0:0	4	{
water	10:8	0:0	4	out
op	10:12	0:0	4	=
water	10:14	0:0	4	inpicref
water	10:22	0:0	4	;
water	11:4	0:0	4	}
else	11:6	18:4	2
stmts	11:11	18:4	3	
water	11:11	0:0	4	{
water	12:8	0:0	4	out
op	12:12	0:0	4	=
call	12:14	12:65	4	ff_get_video_buffer
arg	12:34	12:41	5	outlink
water	12:34	0:0	6	outlink
arg	12:43	12:53	5	outlink->w
water	12:43	0:0	6	outlink
op	12:50	0:0	6	->
water	12:52	0:0	6	w
arg	12:55	12:65	5	outlink->h
water	12:55	0:0	6	outlink
op	12:62	0:0	6	->
water	12:64	0:0	6	h
water	12:66	0:0	4	;
if	13:8	16:8	4	(! out)
cond	13:12	13:13	5	! out
op	13:12	0:0	6	!
water	13:13	0:0	6	out
stmts	13:18	16:8	5	
water	13:18	0:0	6	{
call	14:12	14:35	6	av_frame_free
arg	14:26	14:35	7	&inpicref
op	14:26	0:0	8	&
water	14:27	0:0	8	inpicref
water	14:36	0:0	6	;
return	15:12	15:34	6	AVERROR(ENOMEM)
call	15:19	15:33	7	AVERROR
arg	15:27	15:33	8	ENOMEM
water	15:27	0:0	9	ENOMEM
water	16:8	0:0	6	}
call	17:8	17:41	4	av_frame_copy_props
arg	17:28	17:31	5	out
water	17:28	0:0	6	out
arg	17:33	17:41	5	inpicref
water	17:33	0:0	6	inpicref
water	17:42	0:0	4	;
water	18:4	0:0	4	}
for	19:4	27:4	2	(comp = 0 ;comp < 4;comp ++)
forinit	19:9	19:17	3	comp = 0 ;
water	19:9	0:0	4	comp
op	19:14	0:0	4	=
water	19:16	0:0	4	0
water	19:17	0:0	4	;
cond	19:19	19:26	3	comp < 4
water	19:19	0:0	4	comp
op	19:24	0:0	4	<
water	19:26	0:0	4	4
forexpr	19:29	19:33	3	comp ++
water	19:29	0:0	4	comp
op	19:33	0:0	4	++
stmts	19:37	27:4	3	
water	19:37	0:0	4	{
decl	20:8	20:42	4	FilterParams	*fp
op	20:25	0:0	4	=
op	20:27	0:0	4	&
water	20:28	0:0	4	n
op	20:29	0:0	4	->
water	20:31	0:0	4	param
op	20:36	0:0	4	[
water	20:37	0:0	4	comp
op	20:41	0:0	4	]
if	21:8	26:8	4	(( ! fp -> rand_shift_init || ( fp -> flags & NOISE_TEMPORAL ) ) && fp -> strength)
cond	21:12	21:74	5	( ! fp -> rand_shift_init || ( fp -> flags & NOISE_TEMPORAL ) ) && fp -> strength
water	21:12	0:0	6	(
op	21:13	0:0	6	!
water	21:14	0:0	6	fp
op	21:16	0:0	6	->
water	21:18	0:0	6	rand_shift_init
op	21:34	0:0	6	||
water	21:37	0:0	6	(
water	21:38	0:0	6	fp
op	21:40	0:0	6	->
water	21:42	0:0	6	flags
op	21:48	0:0	6	&
water	21:50	0:0	6	NOISE_TEMPORAL
water	21:64	0:0	6	)
water	21:65	0:0	6	)
op	21:67	0:0	6	&&
water	21:70	0:0	6	fp
op	21:72	0:0	6	->
water	21:74	0:0	6	strength
stmts	21:84	26:8	5	
water	21:84	0:0	6	{
for	22:12	24:12	6	(i = 0 ;i < MAX_RES;i ++)
forinit	22:17	22:22	7	i = 0 ;
water	22:17	0:0	8	i
op	22:19	0:0	8	=
water	22:21	0:0	8	0
water	22:22	0:0	8	;
cond	22:24	22:28	7	i < MAX_RES
water	22:24	0:0	8	i
op	22:26	0:0	8	<
water	22:28	0:0	8	MAX_RES
forexpr	22:37	22:38	7	i ++
water	22:37	0:0	8	i
op	22:38	0:0	8	++
stmts	22:42	24:12	7	
water	22:42	0:0	8	{
water	23:16	0:0	8	fp
op	23:18	0:0	8	->
water	23:20	0:0	8	rand_shift
op	23:30	0:0	8	[
water	23:31	0:0	8	i
op	23:32	0:0	8	]
op	23:34	0:0	8	=
call	23:36	23:55	8	av_lfg_get
arg	23:47	23:55	9	&fp->lfg
op	23:47	0:0	10	&
water	23:48	0:0	10	fp
op	23:50	0:0	10	->
water	23:52	0:0	10	lfg
op	23:57	0:0	8	&
water	23:59	0:0	8	(
water	23:60	0:0	8	MAX_SHIFT
op	23:70	0:0	8	-
water	23:72	0:0	8	1
water	23:73	0:0	8	)
water	23:74	0:0	8	;
water	24:12	0:0	8	}
water	25:12	0:0	6	fp
op	25:14	0:0	6	->
water	25:16	0:0	6	rand_shift_init
op	25:32	0:0	6	=
water	25:34	0:0	6	1
water	25:35	0:0	6	;
water	26:8	0:0	6	}
water	27:4	0:0	4	}
water	28:4	0:0	2	td
op	28:6	0:0	2	.
water	28:7	0:0	2	in
op	28:10	0:0	2	=
water	28:12	0:0	2	inpicref
water	28:20	0:0	2	;
water	28:22	0:0	2	td
op	28:24	0:0	2	.
water	28:25	0:0	2	out
op	28:29	0:0	2	=
water	28:31	0:0	2	out
water	28:34	0:0	2	;
call	29:4	29:100	2	ctx->internal->execute
arg	29:27	29:30	3	ctx
water	29:27	0:0	4	ctx
arg	29:32	29:44	3	filter_slice
water	29:32	0:0	4	filter_slice
arg	29:46	29:49	3	&td
op	29:46	0:0	4	&
water	29:47	0:0	4	td
arg	29:51	29:55	3	NULL
water	29:51	0:0	4	NULL
arg	29:57	29:100	3	FFMIN(n->height[0],ctx->graph->nb_threads)
call	29:57	29:99	4	FFMIN
arg	29:63	29:75	5	n->height[0]
water	29:63	0:0	6	n
op	29:64	0:0	6	->
water	29:66	0:0	6	height
op	29:72	0:0	6	[
water	29:73	0:0	6	0
op	29:74	0:0	6	]
arg	29:77	29:99	5	ctx->graph->nb_threads
water	29:77	0:0	6	ctx
op	29:80	0:0	6	->
water	29:82	0:0	6	graph
op	29:87	0:0	6	->
water	29:89	0:0	6	nb_threads
water	29:101	0:0	2	;
call	30:4	30:11	2	emms_c
water	30:12	0:0	2	;
if	31:4	32:32	2	(inpicref != out)
cond	31:8	31:20	3	inpicref != out
water	31:8	0:0	4	inpicref
op	31:17	0:0	4	!=
water	31:20	0:0	4	out
stmts	32:8	32:32	3	
call	32:8	32:31	4	av_frame_free
arg	32:22	32:31	5	&inpicref
op	32:22	0:0	6	&
water	32:23	0:0	6	inpicref
water	32:32	0:0	4	;
return	33:4	33:40	2	ff_filter_frame(outlink,out)
call	33:11	33:39	3	ff_filter_frame
arg	33:27	33:34	4	outlink
water	33:27	0:0	5	outlink
arg	33:36	33:39	4	out
water	33:36	0:0	5	out
