func	1:0	71:0	0	static int	decode_scalefactors
params	1:30	0:0	1	
param	1:31	1:45	2	AACContext *	ac
param	1:47	1:63	2	INTFLOAT	sf[120]
param	1:65	1:82	2	GetBitContext *	gb
param	2:31	2:55	2	unsigned int	global_gain
param	3:31	3:59	2	IndividualChannelStream *	ics
param	4:31	4:59	2	enum BandType	band_type[120]
param	5:31	5:57	2	int	band_type_run_end[120]
stmnts	0:0	70:12	1	
decl	7:4	7:21	2	int	g
water	7:9	0:0	2	,
decl	7:4	7:21	2	int	i
water	7:12	0:0	2	,
decl	7:4	7:21	2	int	idx
op	7:18	0:0	2	=
water	7:20	0:0	2	0
decl	8:4	8:66	2	int	offset[3]
op	8:18	0:0	2	=
water	8:20	0:0	2	{
water	8:22	0:0	2	global_gain
water	8:33	0:0	2	,
water	8:35	0:0	2	global_gain
op	8:47	0:0	2	-
water	8:49	0:0	2	NOISE_OFFSET
water	8:61	0:0	2	,
water	8:63	0:0	2	0
water	8:65	0:0	2	}
decl	9:4	9:22	2	int	clipped_offset
decl	10:4	10:22	2	int	noise_flag
op	10:19	0:0	2	=
water	10:21	0:0	2	1
for	11:4	69:4	2	(g = 0 ;g < ics -> num_window_groups;g ++)
forinit	11:9	11:14	3	g = 0 ;
water	11:9	0:0	4	g
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:25	3	g < ics -> num_window_groups
water	11:16	0:0	4	g
op	11:18	0:0	4	<
water	11:20	0:0	4	ics
op	11:23	0:0	4	->
water	11:25	0:0	4	num_window_groups
forexpr	11:44	11:45	3	g ++
water	11:44	0:0	4	g
op	11:45	0:0	4	++
stmts	11:49	69:4	3	
water	11:49	0:0	4	{
for	12:8	68:8	4	(i = 0 ;i < ics -> max_sfb;)
forinit	12:13	12:18	5	i = 0 ;
water	12:13	0:0	6	i
op	12:15	0:0	6	=
water	12:17	0:0	6	0
water	12:18	0:0	6	;
cond	12:20	12:29	5	i < ics -> max_sfb
water	12:20	0:0	6	i
op	12:22	0:0	6	<
water	12:24	0:0	6	ics
op	12:27	0:0	6	->
water	12:29	0:0	6	max_sfb
forexpr	0:0	0:0	5	
stmts	12:39	68:8	5	
water	12:39	0:0	6	{
decl	13:12	13:48	6	int	run_end
op	13:24	0:0	6	=
water	13:26	0:0	6	band_type_run_end
op	13:43	0:0	6	[
water	13:44	0:0	6	idx
op	13:47	0:0	6	]
if	14:12	17:12	6	(band_type [ idx ] == ZERO_BT)
cond	14:16	14:34	7	band_type [ idx ] == ZERO_BT
water	14:16	0:0	8	band_type
op	14:25	0:0	8	[
water	14:26	0:0	8	idx
op	14:29	0:0	8	]
op	14:31	0:0	8	==
water	14:34	0:0	8	ZERO_BT
stmts	14:43	17:12	7	
water	14:43	0:0	8	{
for	15:16	16:38	8	(;i < run_end;i ++ , idx ++)
forinit	15:21	15:21	9	;
water	15:21	0:0	10	;
cond	15:23	15:27	9	i < run_end
water	15:23	0:0	10	i
op	15:25	0:0	10	<
water	15:27	0:0	10	run_end
forexpr	15:36	15:44	9	i ++ , idx ++
water	15:36	0:0	10	i
op	15:37	0:0	10	++
water	15:39	0:0	10	,
water	15:41	0:0	10	idx
op	15:44	0:0	10	++
stmts	16:20	16:38	9	
water	16:20	0:0	10	sf
op	16:22	0:0	10	[
water	16:23	0:0	10	idx
op	16:26	0:0	10	]
op	16:28	0:0	10	=
call	16:30	16:37	10	FIXR
arg	16:35	16:37	11	0.
water	16:35	0:0	12	0
op	16:36	0:0	12	.
water	16:38	0:0	10	;
water	17:12	0:0	8	}
else	17:14	34:12	6
stmts	17:19	34:12	7	
if	17:19	34:12	8	(( band_type [ idx ] == INTENSITY_BT ) || ( band_type [ idx ] == INTENSITY_BT2 ))
cond	17:23	18:55	9	( band_type [ idx ] == INTENSITY_BT ) || ( band_type [ idx ] == INTENSITY_BT2 )
water	17:23	0:0	10	(
water	17:24	0:0	10	band_type
op	17:33	0:0	10	[
water	17:34	0:0	10	idx
op	17:37	0:0	10	]
op	17:39	0:0	10	==
water	17:42	0:0	10	INTENSITY_BT
water	17:54	0:0	10	)
op	17:56	0:0	10	||
water	18:23	0:0	10	(
water	18:24	0:0	10	band_type
op	18:33	0:0	10	[
water	18:34	0:0	10	idx
op	18:37	0:0	10	]
op	18:39	0:0	10	==
water	18:42	0:0	10	INTENSITY_BT2
water	18:55	0:0	10	)
stmts	18:58	34:12	9	
water	18:58	0:0	10	{
for	19:16	33:16	10	(;i < run_end;i ++ , idx ++)
forinit	19:21	19:21	11	;
water	19:21	0:0	12	;
cond	19:23	19:27	11	i < run_end
water	19:23	0:0	12	i
op	19:25	0:0	12	<
water	19:27	0:0	12	run_end
forexpr	19:36	19:44	11	i ++ , idx ++
water	19:36	0:0	12	i
op	19:37	0:0	12	++
water	19:39	0:0	12	,
water	19:41	0:0	12	idx
op	19:44	0:0	12	++
stmts	19:48	33:16	11	
water	19:48	0:0	12	{
water	20:20	0:0	12	offset
op	20:26	0:0	12	[
water	20:27	0:0	12	2
op	20:28	0:0	12	]
op	20:30	0:0	12	+=
call	20:33	20:74	12	get_vlc2
arg	20:42	20:44	13	gb
water	20:42	0:0	14	gb
arg	20:46	20:68	13	vlc_scalefactors.table
water	20:46	0:0	14	vlc_scalefactors
op	20:62	0:0	14	.
water	20:63	0:0	14	table
arg	20:70	20:71	13	7
water	20:70	0:0	14	7
arg	20:73	20:74	13	3
water	20:73	0:0	14	3
op	20:76	0:0	12	-
water	20:78	0:0	12	SCALE_DIFF_ZERO
water	20:93	0:0	12	;
water	21:20	0:0	12	clipped_offset
op	21:35	0:0	12	=
call	21:37	21:65	12	av_clip
arg	21:45	21:54	13	offset[2]
water	21:45	0:0	14	offset
op	21:51	0:0	14	[
water	21:52	0:0	14	2
op	21:53	0:0	14	]
arg	21:56	21:60	13	-155
op	21:56	0:0	14	-
water	21:57	0:0	14	155
arg	21:62	21:65	13	100
water	21:62	0:0	14	100
water	21:66	0:0	12	;
if	22:20	27:20	12	(offset [ 2 ] != clipped_offset)
cond	22:24	22:37	13	offset [ 2 ] != clipped_offset
water	22:24	0:0	14	offset
op	22:30	0:0	14	[
water	22:31	0:0	14	2
op	22:32	0:0	14	]
op	22:34	0:0	14	!=
water	22:37	0:0	14	clipped_offset
stmts	22:53	27:20	13	
water	22:53	0:0	14	{
call	23:24	26:71	14	avpriv_request_sample
arg	23:46	23:55	15	ac->avctx
water	23:46	0:0	16	ac
op	23:48	0:0	16	->
water	23:50	0:0	16	avctx
arg	24:46	25:92	15	"If you heard an audible artifact, there may be a bug in the decoder. ""Clipped intensity stereo position (%d -> %d)"
water	24:46	0:0	16	"If you heard an audible artifact, there may be a bug in the decoder. "
water	25:46	0:0	16	"Clipped intensity stereo position (%d -> %d)"
arg	26:46	26:55	15	offset[2]
water	26:46	0:0	16	offset
op	26:52	0:0	16	[
water	26:53	0:0	16	2
op	26:54	0:0	16	]
arg	26:57	26:71	15	clipped_offset
water	26:57	0:0	16	clipped_offset
water	26:72	0:0	14	;
water	27:20	0:0	14	}
water	29:20	0:0	12	sf
op	29:22	0:0	12	[
water	29:23	0:0	12	idx
op	29:26	0:0	12	]
op	29:28	0:0	12	=
water	29:30	0:0	12	100
op	29:34	0:0	12	-
water	29:36	0:0	12	clipped_offset
water	29:50	0:0	12	;
water	31:20	0:0	12	sf
op	31:22	0:0	12	[
water	31:23	0:0	12	idx
op	31:26	0:0	12	]
op	31:28	0:0	12	=
water	31:30	0:0	12	ff_aac_pow2sf_tab
op	31:47	0:0	12	[
op	31:48	0:0	12	-
water	31:49	0:0	12	clipped_offset
op	31:64	0:0	12	+
water	31:66	0:0	12	POW_SF2_ZERO
op	31:78	0:0	12	]
water	31:79	0:0	12	;
water	33:16	0:0	12	}
water	34:12	0:0	10	}
else	34:14	53:12	6
stmts	34:19	53:12	7	
if	34:19	53:12	8	(band_type [ idx ] == NOISE_BT)
cond	34:23	34:41	9	band_type [ idx ] == NOISE_BT
water	34:23	0:0	10	band_type
op	34:32	0:0	10	[
water	34:33	0:0	10	idx
op	34:36	0:0	10	]
op	34:38	0:0	10	==
water	34:41	0:0	10	NOISE_BT
stmts	34:51	53:12	9	
water	34:51	0:0	10	{
for	35:16	52:16	10	(;i < run_end;i ++ , idx ++)
forinit	35:21	35:21	11	;
water	35:21	0:0	12	;
cond	35:23	35:27	11	i < run_end
water	35:23	0:0	12	i
op	35:25	0:0	12	<
water	35:27	0:0	12	run_end
forexpr	35:36	35:44	11	i ++ , idx ++
water	35:36	0:0	12	i
op	35:37	0:0	12	++
water	35:39	0:0	12	,
water	35:41	0:0	12	idx
op	35:44	0:0	12	++
stmts	35:48	52:16	11	
water	35:48	0:0	12	{
if	36:20	37:77	12	(noise_flag -- > 0)
cond	36:24	36:39	13	noise_flag -- > 0
water	36:24	0:0	14	noise_flag
op	36:34	0:0	14	--
op	36:37	0:0	14	>
water	36:39	0:0	14	0
stmts	37:24	37:77	13	
water	37:24	0:0	14	offset
op	37:30	0:0	14	[
water	37:31	0:0	14	1
op	37:32	0:0	14	]
op	37:34	0:0	14	+=
call	37:37	37:64	14	get_bits
arg	37:46	37:48	15	gb
water	37:46	0:0	16	gb
arg	37:50	37:64	15	NOISE_PRE_BITS
water	37:50	0:0	16	NOISE_PRE_BITS
op	37:66	0:0	14	-
water	37:68	0:0	14	NOISE_PRE
water	37:77	0:0	14	;
else	38:20	39:97	12
stmts	39:24	39:97	13	
water	39:24	0:0	14	offset
op	39:30	0:0	14	[
water	39:31	0:0	14	1
op	39:32	0:0	14	]
op	39:34	0:0	14	+=
call	39:37	39:78	14	get_vlc2
arg	39:46	39:48	15	gb
water	39:46	0:0	16	gb
arg	39:50	39:72	15	vlc_scalefactors.table
water	39:50	0:0	16	vlc_scalefactors
op	39:66	0:0	16	.
water	39:67	0:0	16	table
arg	39:74	39:75	15	7
water	39:74	0:0	16	7
arg	39:77	39:78	15	3
water	39:77	0:0	16	3
op	39:80	0:0	14	-
water	39:82	0:0	14	SCALE_DIFF_ZERO
water	39:97	0:0	14	;
water	40:20	0:0	12	clipped_offset
op	40:35	0:0	12	=
call	40:37	40:65	12	av_clip
arg	40:45	40:54	13	offset[1]
water	40:45	0:0	14	offset
op	40:51	0:0	14	[
water	40:52	0:0	14	1
op	40:53	0:0	14	]
arg	40:56	40:60	13	-100
op	40:56	0:0	14	-
water	40:57	0:0	14	100
arg	40:62	40:65	13	155
water	40:62	0:0	14	155
water	40:66	0:0	12	;
if	41:20	46:20	12	(offset [ 1 ] != clipped_offset)
cond	41:24	41:37	13	offset [ 1 ] != clipped_offset
water	41:24	0:0	14	offset
op	41:30	0:0	14	[
water	41:31	0:0	14	1
op	41:32	0:0	14	]
op	41:34	0:0	14	!=
water	41:37	0:0	14	clipped_offset
stmts	41:53	46:20	13	
water	41:53	0:0	14	{
call	42:24	45:71	14	avpriv_request_sample
arg	42:46	42:55	15	ac->avctx
water	42:46	0:0	16	ac
op	42:48	0:0	16	->
water	42:50	0:0	16	avctx
arg	43:46	44:77	15	"If you heard an audible artifact, there may be a bug in the decoder. ""Clipped noise gain (%d -> %d)"
water	43:46	0:0	16	"If you heard an audible artifact, there may be a bug in the decoder. "
water	44:46	0:0	16	"Clipped noise gain (%d -> %d)"
arg	45:46	45:55	15	offset[1]
water	45:46	0:0	16	offset
op	45:52	0:0	16	[
water	45:53	0:0	16	1
op	45:54	0:0	16	]
arg	45:57	45:71	15	clipped_offset
water	45:57	0:0	16	clipped_offset
water	45:72	0:0	14	;
water	46:20	0:0	14	}
water	48:20	0:0	12	sf
op	48:22	0:0	12	[
water	48:23	0:0	12	idx
op	48:26	0:0	12	]
op	48:28	0:0	12	=
op	48:30	0:0	12	-
water	48:31	0:0	12	(
water	48:32	0:0	12	100
op	48:36	0:0	12	+
water	48:38	0:0	12	clipped_offset
water	48:52	0:0	12	)
water	48:53	0:0	12	;
water	50:20	0:0	12	sf
op	50:22	0:0	12	[
water	50:23	0:0	12	idx
op	50:26	0:0	12	]
op	50:28	0:0	12	=
op	50:30	0:0	12	-
water	50:31	0:0	12	ff_aac_pow2sf_tab
op	50:48	0:0	12	[
water	50:49	0:0	12	clipped_offset
op	50:64	0:0	12	+
water	50:66	0:0	12	POW_SF2_ZERO
op	50:78	0:0	12	]
water	50:79	0:0	12	;
water	52:16	0:0	12	}
water	53:12	0:0	10	}
else	53:14	67:12	6
stmts	53:19	67:12	7	
water	53:19	0:0	8	{
for	54:16	66:16	8	(;i < run_end;i ++ , idx ++)
forinit	54:21	54:21	9	;
water	54:21	0:0	10	;
cond	54:23	54:27	9	i < run_end
water	54:23	0:0	10	i
op	54:25	0:0	10	<
water	54:27	0:0	10	run_end
forexpr	54:36	54:44	9	i ++ , idx ++
water	54:36	0:0	10	i
op	54:37	0:0	10	++
water	54:39	0:0	10	,
water	54:41	0:0	10	idx
op	54:44	0:0	10	++
stmts	54:48	66:16	9	
water	54:48	0:0	10	{
water	55:20	0:0	10	offset
op	55:26	0:0	10	[
water	55:27	0:0	10	0
op	55:28	0:0	10	]
op	55:30	0:0	10	+=
call	55:33	55:74	10	get_vlc2
arg	55:42	55:44	11	gb
water	55:42	0:0	12	gb
arg	55:46	55:68	11	vlc_scalefactors.table
water	55:46	0:0	12	vlc_scalefactors
op	55:62	0:0	12	.
water	55:63	0:0	12	table
arg	55:70	55:71	11	7
water	55:70	0:0	12	7
arg	55:73	55:74	11	3
water	55:73	0:0	12	3
op	55:76	0:0	10	-
water	55:78	0:0	10	SCALE_DIFF_ZERO
water	55:93	0:0	10	;
if	56:20	60:20	10	(offset [ 0 ] > 255 U)
cond	56:24	56:39	11	offset [ 0 ] > 255 U
water	56:24	0:0	12	offset
op	56:30	0:0	12	[
water	56:31	0:0	12	0
op	56:32	0:0	12	]
op	56:34	0:0	12	>
water	56:36	0:0	12	255
water	56:39	0:0	12	U
stmts	56:42	60:20	11	
water	56:42	0:0	12	{
call	57:24	58:76	12	av_log
arg	57:31	57:40	13	ac->avctx
water	57:31	0:0	14	ac
op	57:33	0:0	14	->
water	57:35	0:0	14	avctx
arg	57:42	57:54	13	AV_LOG_ERROR
water	57:42	0:0	14	AV_LOG_ERROR
arg	58:31	58:65	13	"Scalefactor (%d) out of range.\n"
water	58:31	0:0	14	"Scalefactor (%d) out of range.\n"
arg	58:67	58:76	13	offset[0]
water	58:67	0:0	14	offset
op	58:73	0:0	14	[
water	58:74	0:0	14	0
op	58:75	0:0	14	]
water	58:77	0:0	12	;
return	59:24	59:50	12	AVERROR_INVALIDDATA
water	59:31	0:0	13	AVERROR_INVALIDDATA
water	60:20	0:0	12	}
water	62:20	0:0	10	sf
op	62:22	0:0	10	[
water	62:23	0:0	10	idx
op	62:26	0:0	10	]
op	62:28	0:0	10	=
op	62:30	0:0	10	-
water	62:31	0:0	10	offset
op	62:37	0:0	10	[
water	62:38	0:0	10	0
op	62:39	0:0	10	]
water	62:40	0:0	10	;
water	64:20	0:0	10	sf
op	64:22	0:0	10	[
water	64:23	0:0	10	idx
op	64:26	0:0	10	]
op	64:28	0:0	10	=
op	64:30	0:0	10	-
water	64:31	0:0	10	ff_aac_pow2sf_tab
op	64:48	0:0	10	[
water	64:49	0:0	10	offset
op	64:55	0:0	10	[
water	64:56	0:0	10	0
op	64:57	0:0	10	]
op	64:59	0:0	10	-
water	64:61	0:0	10	100
op	64:65	0:0	10	+
water	64:67	0:0	10	POW_SF2_ZERO
op	64:79	0:0	10	]
water	64:80	0:0	10	;
water	66:16	0:0	10	}
water	67:12	0:0	8	}
water	68:8	0:0	6	}
water	69:4	0:0	4	}
return	70:4	70:12	2	0
water	70:11	0:0	3	0
