func	1:15	37:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	36:12	1	
decl	3:4	3:34	2	ConcatContext	*cat
op	3:23	0:0	2	=
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	priv
water	4:4	0:0	2	unsigned
water	4:13	0:0	2	seg
water	4:16	0:0	2	,
water	4:18	0:0	2	type
water	4:22	0:0	2	,
water	4:24	0:0	2	str
water	4:27	0:0	2	;
for	6:4	19:4	2	(seg = 0 ;seg < cat -> nb_segments;seg ++)
forinit	6:9	6:16	3	seg = 0 ;
water	6:9	0:0	4	seg
op	6:13	0:0	4	=
water	6:15	0:0	4	0
water	6:16	0:0	4	;
cond	6:18	6:29	3	seg < cat -> nb_segments
water	6:18	0:0	4	seg
op	6:22	0:0	4	<
water	6:24	0:0	4	cat
op	6:27	0:0	4	->
water	6:29	0:0	4	nb_segments
forexpr	6:42	6:45	3	seg ++
water	6:42	0:0	4	seg
op	6:45	0:0	4	++
stmts	6:49	19:4	3	
water	6:49	0:0	4	{
for	7:8	18:8	4	(type = 0 ;type < TYPE_ALL;type ++)
forinit	7:13	7:21	5	type = 0 ;
water	7:13	0:0	6	type
op	7:18	0:0	6	=
water	7:20	0:0	6	0
water	7:21	0:0	6	;
cond	7:23	7:30	5	type < TYPE_ALL
water	7:23	0:0	6	type
op	7:28	0:0	6	<
water	7:30	0:0	6	TYPE_ALL
forexpr	7:40	7:44	5	type ++
water	7:40	0:0	6	type
op	7:44	0:0	6	++
stmts	7:48	18:8	5	
water	7:48	0:0	6	{
for	8:12	17:12	6	(str = 0 ;str < cat -> nb_streams [ type ];str ++)
forinit	8:17	8:24	7	str = 0 ;
water	8:17	0:0	8	str
op	8:21	0:0	8	=
water	8:23	0:0	8	0
water	8:24	0:0	8	;
cond	8:26	8:52	7	str < cat -> nb_streams [ type ]
water	8:26	0:0	8	str
op	8:30	0:0	8	<
water	8:32	0:0	8	cat
op	8:35	0:0	8	->
water	8:37	0:0	8	nb_streams
op	8:47	0:0	8	[
water	8:48	0:0	8	type
op	8:52	0:0	8	]
forexpr	8:55	8:58	7	str ++
water	8:55	0:0	8	str
op	8:58	0:0	8	++
stmts	8:62	17:12	7	
water	8:62	0:0	8	{
decl	9:16	14:17	8	AVFilterPad	pad
op	9:32	0:0	8	=
water	9:34	0:0	8	{
op	10:20	0:0	8	.
water	10:21	0:0	8	type
op	10:38	0:0	8	=
water	10:40	0:0	8	type
water	10:44	0:0	8	,
op	11:20	0:0	8	.
water	11:21	0:0	8	get_video_buffer
op	11:38	0:0	8	=
water	11:40	0:0	8	get_video_buffer
water	11:56	0:0	8	,
op	12:20	0:0	8	.
water	12:21	0:0	8	get_audio_buffer
op	12:38	0:0	8	=
water	12:40	0:0	8	get_audio_buffer
water	12:56	0:0	8	,
op	13:20	0:0	8	.
water	13:21	0:0	8	filter_frame
op	13:38	0:0	8	=
water	13:40	0:0	8	filter_frame
water	13:52	0:0	8	,
water	14:16	0:0	8	}
water	15:16	0:0	8	pad
op	15:19	0:0	8	.
water	15:20	0:0	8	name
op	15:25	0:0	8	=
call	15:27	15:72	8	av_asprintf
arg	15:39	15:50	9	"in%d:%c%d"
water	15:39	0:0	10	"in%d:%c%d"
arg	15:52	15:55	9	seg
water	15:52	0:0	10	seg
arg	15:57	15:67	9	"va"[type]
water	15:57	0:0	10	"va"
op	15:61	0:0	10	[
water	15:62	0:0	10	type
op	15:66	0:0	10	]
arg	15:69	15:72	9	str
water	15:69	0:0	10	str
water	15:73	0:0	8	;
call	16:16	16:57	8	ff_insert_inpad
arg	16:32	16:35	9	ctx
water	16:32	0:0	10	ctx
arg	16:37	16:51	9	ctx->nb_inputs
water	16:37	0:0	10	ctx
op	16:40	0:0	10	->
water	16:42	0:0	10	nb_inputs
arg	16:53	16:57	9	&pad
op	16:53	0:0	10	&
water	16:54	0:0	10	pad
water	16:58	0:0	8	;
water	17:12	0:0	8	}
water	18:8	0:0	6	}
water	19:4	0:0	4	}
for	21:4	31:4	2	(type = 0 ;type < TYPE_ALL;type ++)
forinit	21:9	21:17	3	type = 0 ;
water	21:9	0:0	4	type
op	21:14	0:0	4	=
water	21:16	0:0	4	0
water	21:17	0:0	4	;
cond	21:19	21:26	3	type < TYPE_ALL
water	21:19	0:0	4	type
op	21:24	0:0	4	<
water	21:26	0:0	4	TYPE_ALL
forexpr	21:36	21:40	3	type ++
water	21:36	0:0	4	type
op	21:40	0:0	4	++
stmts	21:44	31:4	3	
water	21:44	0:0	4	{
for	22:8	30:8	4	(str = 0 ;str < cat -> nb_streams [ type ];str ++)
forinit	22:13	22:20	5	str = 0 ;
water	22:13	0:0	6	str
op	22:17	0:0	6	=
water	22:19	0:0	6	0
water	22:20	0:0	6	;
cond	22:22	22:48	5	str < cat -> nb_streams [ type ]
water	22:22	0:0	6	str
op	22:26	0:0	6	<
water	22:28	0:0	6	cat
op	22:31	0:0	6	->
water	22:33	0:0	6	nb_streams
op	22:43	0:0	6	[
water	22:44	0:0	6	type
op	22:48	0:0	6	]
forexpr	22:51	22:54	5	str ++
water	22:51	0:0	6	str
op	22:54	0:0	6	++
stmts	22:58	30:8	5	
water	22:58	0:0	6	{
decl	23:12	27:13	6	AVFilterPad	pad
op	23:28	0:0	6	=
water	23:30	0:0	6	{
op	24:16	0:0	6	.
water	24:17	0:0	6	type
op	24:31	0:0	6	=
water	24:33	0:0	6	type
water	24:37	0:0	6	,
op	25:16	0:0	6	.
water	25:17	0:0	6	config_props
op	25:31	0:0	6	=
water	25:33	0:0	6	config_output
water	25:46	0:0	6	,
op	26:16	0:0	6	.
water	26:17	0:0	6	request_frame
op	26:31	0:0	6	=
water	26:33	0:0	6	request_frame
water	26:46	0:0	6	,
water	27:12	0:0	6	}
water	28:12	0:0	6	pad
op	28:15	0:0	6	.
water	28:16	0:0	6	name
op	28:21	0:0	6	=
call	28:23	28:62	6	av_asprintf
arg	28:35	28:45	7	"out:%c%d"
water	28:35	0:0	8	"out:%c%d"
arg	28:47	28:57	7	"va"[type]
water	28:47	0:0	8	"va"
op	28:51	0:0	8	[
water	28:52	0:0	8	type
op	28:56	0:0	8	]
arg	28:59	28:62	7	str
water	28:59	0:0	8	str
water	28:63	0:0	6	;
call	29:12	29:55	6	ff_insert_outpad
arg	29:29	29:32	7	ctx
water	29:29	0:0	8	ctx
arg	29:34	29:49	7	ctx->nb_outputs
water	29:34	0:0	8	ctx
op	29:37	0:0	8	->
water	29:39	0:0	8	nb_outputs
arg	29:51	29:55	7	&pad
op	29:51	0:0	8	&
water	29:52	0:0	8	pad
water	29:56	0:0	6	;
water	30:8	0:0	6	}
water	31:4	0:0	4	}
water	32:4	0:0	2	cat
op	32:7	0:0	2	->
water	32:9	0:0	2	in
op	32:12	0:0	2	=
call	32:14	32:56	2	av_calloc
arg	32:24	32:38	3	ctx->nb_inputs
water	32:24	0:0	4	ctx
op	32:27	0:0	4	->
water	32:29	0:0	4	nb_inputs
arg	32:40	32:56	3	sizeof(*cat->in)
op	32:40	0:0	4	sizeof
water	32:46	0:0	4	(
op	32:47	0:0	4	*
water	32:48	0:0	4	cat
op	32:51	0:0	4	->
water	32:53	0:0	4	in
water	32:55	0:0	4	)
water	32:57	0:0	2	;
if	33:4	34:30	2	(! cat -> in)
cond	33:8	33:14	3	! cat -> in
op	33:8	0:0	4	!
water	33:9	0:0	4	cat
op	33:12	0:0	4	->
water	33:14	0:0	4	in
stmts	34:8	34:30	3	
return	34:8	34:30	4	AVERROR(ENOMEM)
call	34:15	34:29	5	AVERROR
arg	34:23	34:29	6	ENOMEM
water	34:23	0:0	7	ENOMEM
water	35:4	0:0	2	cat
op	35:7	0:0	2	->
water	35:9	0:0	2	nb_in_active
op	35:22	0:0	2	=
water	35:24	0:0	2	ctx
op	35:27	0:0	2	->
water	35:29	0:0	2	nb_outputs
water	35:39	0:0	2	;
return	36:4	36:12	2	0
water	36:11	0:0	3	0
