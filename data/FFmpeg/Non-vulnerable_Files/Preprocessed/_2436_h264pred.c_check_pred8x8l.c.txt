func	1:0	25:0	0	static void	check_pred8x8l
params	1:26	0:0	1	
param	1:27	1:45	2	H264PredContext *	h
param	1:47	1:60	2	uint8_t *	buf0
param	1:62	1:75	2	uint8_t *	buf1
param	2:27	2:36	2	int	codec
param	2:38	2:55	2	int	chroma_format
param	2:57	2:70	2	int	bit_depth
stmnts	4:4	24:4	1	
if	4:4	24:4	2	(chroma_format == 1 && codec_ids [ codec ] == AV_CODEC_ID_H264)
cond	4:8	4:50	3	chroma_format == 1 && codec_ids [ codec ] == AV_CODEC_ID_H264
water	4:8	0:0	4	chroma_format
op	4:22	0:0	4	==
water	4:25	0:0	4	1
op	4:27	0:0	4	&&
water	4:30	0:0	4	codec_ids
op	4:39	0:0	4	[
water	4:40	0:0	4	codec
op	4:45	0:0	4	]
op	4:47	0:0	4	==
water	4:50	0:0	4	AV_CODEC_ID_H264
stmts	4:68	24:4	3	
water	4:68	0:0	4	{
decl	5:8	5:21	4	int	pred_mode
call	6:8	6:84	4	declare_func
arg	6:21	6:25	5	void
water	6:21	0:0	6	void
arg	6:27	6:39	5	uint8_t*src
water	6:27	0:0	6	uint8_t
op	6:35	0:0	6	*
water	6:36	0:0	6	src
arg	6:41	6:52	5	inttopleft
water	6:41	0:0	6	int
water	6:45	0:0	6	topleft
arg	6:54	6:66	5	inttopright
water	6:54	0:0	6	int
water	6:58	0:0	6	topright
arg	6:68	6:84	5	ptrdiff_tstride
water	6:68	0:0	6	ptrdiff_t
water	6:78	0:0	6	stride
water	6:85	0:0	4	;
for	7:8	23:8	4	(pred_mode = 0 ;pred_mode < 12;pred_mode ++)
forinit	7:13	7:26	5	pred_mode = 0 ;
water	7:13	0:0	6	pred_mode
op	7:23	0:0	6	=
water	7:25	0:0	6	0
water	7:26	0:0	6	;
cond	7:28	7:40	5	pred_mode < 12
water	7:28	0:0	6	pred_mode
op	7:38	0:0	6	<
water	7:40	0:0	6	12
forexpr	7:44	7:53	5	pred_mode ++
water	7:44	0:0	6	pred_mode
op	7:53	0:0	6	++
stmts	7:57	23:8	5	
water	7:57	0:0	6	{
if	8:12	22:12	6	(check_pred_func (h -> pred8x8l [ pred_mode ] ,"8x8l" ,pred4x4_modes [ codec ] [ pred_mode ] ))
cond	8:16	8:95	7	check_pred_func (h -> pred8x8l [ pred_mode ] ,"8x8l" ,pred4x4_modes [ codec ] [ pred_mode ] )
call	8:16	8:95	8	check_pred_func
arg	8:32	8:54	9	h->pred8x8l[pred_mode]
water	8:32	0:0	10	h
op	8:33	0:0	10	->
water	8:35	0:0	10	pred8x8l
op	8:43	0:0	10	[
water	8:44	0:0	10	pred_mode
op	8:53	0:0	10	]
arg	8:56	8:62	9	"8x8l"
water	8:56	0:0	10	"8x8l"
arg	8:64	8:95	9	pred4x4_modes[codec][pred_mode]
water	8:64	0:0	10	pred4x4_modes
op	8:77	0:0	10	[
water	8:78	0:0	10	codec
op	8:83	0:0	10	]
op	8:84	0:0	10	[
water	8:85	0:0	10	pred_mode
op	8:94	0:0	10	]
stmts	8:98	22:12	7	
water	8:98	0:0	8	{
decl	9:16	9:29	8	int	neighbors
for	10:16	21:16	8	(neighbors = 0 ;neighbors <= 0 xc000;neighbors += 0 x4000)
forinit	10:21	10:34	9	neighbors = 0 ;
water	10:21	0:0	10	neighbors
op	10:31	0:0	10	=
water	10:33	0:0	10	0
water	10:34	0:0	10	;
cond	10:36	10:50	9	neighbors <= 0 xc000
water	10:36	0:0	10	neighbors
op	10:46	0:0	10	<=
water	10:49	0:0	10	0
water	10:50	0:0	10	xc000
forexpr	10:57	10:71	9	neighbors += 0 x4000
water	10:57	0:0	10	neighbors
op	10:67	0:0	10	+=
water	10:70	0:0	10	0
water	10:71	0:0	10	x4000
stmts	10:78	21:16	9	
water	10:78	0:0	10	{
decl	11:20	11:57	10	int	has_topleft
op	11:37	0:0	10	=
water	11:39	0:0	10	neighbors
op	11:49	0:0	10	&
water	11:51	0:0	10	0
water	11:52	0:0	10	x8000
decl	12:20	12:57	10	int	has_topright
op	12:37	0:0	10	=
water	12:39	0:0	10	neighbors
op	12:49	0:0	10	&
water	12:51	0:0	10	0
water	12:52	0:0	10	x4000
if	13:20	14:32	10	(( pred_mode == DIAG_DOWN_RIGHT_PRED || pred_mode == VERT_RIGHT_PRED ) && ! has_topleft)
cond	13:24	13:96	11	( pred_mode == DIAG_DOWN_RIGHT_PRED || pred_mode == VERT_RIGHT_PRED ) && ! has_topleft
water	13:24	0:0	12	(
water	13:25	0:0	12	pred_mode
op	13:35	0:0	12	==
water	13:38	0:0	12	DIAG_DOWN_RIGHT_PRED
op	13:59	0:0	12	||
water	13:62	0:0	12	pred_mode
op	13:72	0:0	12	==
water	13:75	0:0	12	VERT_RIGHT_PRED
water	13:90	0:0	12	)
op	13:92	0:0	12	&&
op	13:95	0:0	12	!
water	13:96	0:0	12	has_topleft
stmts	14:24	14:32	11	
continue	14:24	14:32	12	
call	15:20	15:38	10	randomize_buffers
water	15:39	0:0	10	;
call	16:20	16:77	10	call_ref
arg	16:29	16:33	11	src0
water	16:29	0:0	12	src0
arg	16:35	16:46	11	has_topleft
water	16:35	0:0	12	has_topleft
arg	16:48	16:60	11	has_topright
water	16:48	0:0	12	has_topright
arg	16:62	16:77	11	24*SIZEOF_PIXEL
water	16:62	0:0	12	24
op	16:64	0:0	12	*
water	16:65	0:0	12	SIZEOF_PIXEL
water	16:78	0:0	10	;
call	17:20	17:77	10	call_new
arg	17:29	17:33	11	src1
water	17:29	0:0	12	src1
arg	17:35	17:46	11	has_topleft
water	17:35	0:0	12	has_topleft
arg	17:48	17:60	11	has_topright
water	17:48	0:0	12	has_topright
arg	17:62	17:77	11	24*SIZEOF_PIXEL
water	17:62	0:0	12	24
op	17:64	0:0	12	*
water	17:65	0:0	12	SIZEOF_PIXEL
water	17:78	0:0	10	;
if	18:20	19:30	10	(memcmp (buf0 ,buf1 ,BUF_SIZE ))
cond	18:24	18:51	11	memcmp (buf0 ,buf1 ,BUF_SIZE )
call	18:24	18:51	12	memcmp
arg	18:31	18:35	13	buf0
water	18:31	0:0	14	buf0
arg	18:37	18:41	13	buf1
water	18:37	0:0	14	buf1
arg	18:43	18:51	13	BUF_SIZE
water	18:43	0:0	14	BUF_SIZE
stmts	19:24	19:30	11	
call	19:24	19:29	12	fail
water	19:30	0:0	12	;
call	20:20	20:78	10	bench_new
arg	20:30	20:34	11	src1
water	20:30	0:0	12	src1
arg	20:36	20:47	11	has_topleft
water	20:36	0:0	12	has_topleft
arg	20:49	20:61	11	has_topright
water	20:49	0:0	12	has_topright
arg	20:63	20:78	11	24*SIZEOF_PIXEL
water	20:63	0:0	12	24
op	20:65	0:0	12	*
water	20:66	0:0	12	SIZEOF_PIXEL
water	20:79	0:0	10	;
water	21:16	0:0	10	}
water	22:12	0:0	8	}
water	23:8	0:0	6	}
water	24:4	0:0	4	}
