func	1:0	263:0	0	static int	decode_spectrum_and_dequant
params	1:38	0:0	1	
param	1:39	1:53	2	AACContext *	ac
param	1:55	1:74	2	INTFLOAT	coef[1024]
param	2:39	2:56	2	GetBitContext *	gb
param	2:58	2:80	2	const INTFLOAT	sf[120]
param	3:39	3:56	2	int	pulse_present
param	3:58	3:76	2	const Pulse *	pulse
param	4:39	4:73	2	const IndividualChannelStream *	ics
param	5:39	5:67	2	enum BandType	band_type[120]
stmnts	0:0	262:12	1	
decl	7:4	7:24	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:24	2	int	k
water	7:12	0:0	2	,
decl	7:4	7:24	2	int	g
water	7:15	0:0	2	,
decl	7:4	7:24	2	int	idx
op	7:21	0:0	2	=
water	7:23	0:0	2	0
decl	8:4	8:41	2	const int	c
op	8:16	0:0	2	=
water	8:18	0:0	2	1024
op	8:23	0:0	2	/
water	8:25	0:0	2	ics
op	8:28	0:0	2	->
water	8:30	0:0	2	num_windows
decl	9:4	9:45	2	const uint16_t	*offsets
op	9:28	0:0	2	=
water	9:30	0:0	2	ics
op	9:33	0:0	2	->
water	9:35	0:0	2	swb_offset
decl	10:4	10:30	2	INTFLOAT	*coef_base
op	10:24	0:0	2	=
water	10:26	0:0	2	coef
for	11:4	13:62	2	(g = 0 ;g < ics -> num_windows;g ++)
forinit	11:9	11:14	3	g = 0 ;
water	11:9	0:0	4	g
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:25	3	g < ics -> num_windows
water	11:16	0:0	4	g
op	11:18	0:0	4	<
water	11:20	0:0	4	ics
op	11:23	0:0	4	->
water	11:25	0:0	4	num_windows
forexpr	11:38	11:39	3	g ++
water	11:38	0:0	4	g
op	11:39	0:0	4	++
stmts	12:8	13:62	3	
call	12:8	13:61	4	memset
arg	12:15	12:53	5	coef+g*128+offsets[ics->max_sfb]
water	12:15	0:0	6	coef
op	12:20	0:0	6	+
water	12:22	0:0	6	g
op	12:24	0:0	6	*
water	12:26	0:0	6	128
op	12:30	0:0	6	+
water	12:32	0:0	6	offsets
op	12:39	0:0	6	[
water	12:40	0:0	6	ics
op	12:43	0:0	6	->
water	12:45	0:0	6	max_sfb
op	12:52	0:0	6	]
arg	12:55	12:56	5	0
water	12:55	0:0	6	0
arg	13:15	13:61	5	sizeof(INTFLOAT)*(c-offsets[ics->max_sfb])
op	13:15	0:0	6	sizeof
water	13:21	0:0	6	(
water	13:22	0:0	6	INTFLOAT
water	13:30	0:0	6	)
op	13:32	0:0	6	*
water	13:34	0:0	6	(
water	13:35	0:0	6	c
op	13:37	0:0	6	-
water	13:39	0:0	6	offsets
op	13:46	0:0	6	[
water	13:47	0:0	6	ics
op	13:50	0:0	6	->
water	13:52	0:0	6	max_sfb
op	13:59	0:0	6	]
water	13:60	0:0	6	)
water	13:62	0:0	4	;
for	14:4	218:4	2	(g = 0 ;g < ics -> num_window_groups;g ++)
forinit	14:9	14:14	3	g = 0 ;
water	14:9	0:0	4	g
op	14:11	0:0	4	=
water	14:13	0:0	4	0
water	14:14	0:0	4	;
cond	14:16	14:25	3	g < ics -> num_window_groups
water	14:16	0:0	4	g
op	14:18	0:0	4	<
water	14:20	0:0	4	ics
op	14:23	0:0	4	->
water	14:25	0:0	4	num_window_groups
forexpr	14:44	14:45	3	g ++
water	14:44	0:0	4	g
op	14:45	0:0	4	++
stmts	14:49	218:4	3	
water	14:49	0:0	4	{
water	15:8	0:0	4	unsigned
water	15:17	0:0	4	g_len
op	15:23	0:0	4	=
water	15:25	0:0	4	ics
op	15:28	0:0	4	->
water	15:30	0:0	4	group_len
op	15:39	0:0	4	[
water	15:40	0:0	4	g
op	15:41	0:0	4	]
water	15:42	0:0	4	;
for	16:8	216:8	4	(i = 0 ;i < ics -> max_sfb;i ++ , idx ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:29	5	i < ics -> max_sfb
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	ics
op	16:27	0:0	6	->
water	16:29	0:0	6	max_sfb
forexpr	16:38	16:46	5	i ++ , idx ++
water	16:38	0:0	6	i
op	16:39	0:0	6	++
water	16:41	0:0	6	,
water	16:43	0:0	6	idx
op	16:46	0:0	6	++
stmts	16:50	216:8	5	
water	16:50	0:0	6	{
water	17:12	0:0	6	const
water	17:18	0:0	6	unsigned
water	17:27	0:0	6	cbt_m1
op	17:34	0:0	6	=
water	17:36	0:0	6	band_type
op	17:45	0:0	6	[
water	17:46	0:0	6	idx
op	17:49	0:0	6	]
op	17:51	0:0	6	-
water	17:53	0:0	6	1
water	17:54	0:0	6	;
decl	18:12	18:45	6	INTFLOAT	*cfo
op	18:26	0:0	6	=
water	18:28	0:0	6	coef
op	18:33	0:0	6	+
water	18:35	0:0	6	offsets
op	18:42	0:0	6	[
water	18:43	0:0	6	i
op	18:44	0:0	6	]
decl	19:12	19:53	6	int	off_len
op	19:24	0:0	6	=
water	19:26	0:0	6	offsets
op	19:33	0:0	6	[
water	19:34	0:0	6	i
op	19:36	0:0	6	+
water	19:38	0:0	6	1
op	19:39	0:0	6	]
op	19:41	0:0	6	-
water	19:43	0:0	6	offsets
op	19:50	0:0	6	[
water	19:51	0:0	6	i
op	19:52	0:0	6	]
decl	20:12	20:21	6	int	group
if	21:12	25:12	6	(cbt_m1 >= INTENSITY_BT2 - 1)
cond	21:16	21:42	7	cbt_m1 >= INTENSITY_BT2 - 1
water	21:16	0:0	8	cbt_m1
op	21:23	0:0	8	>=
water	21:26	0:0	8	INTENSITY_BT2
op	21:40	0:0	8	-
water	21:42	0:0	8	1
stmts	21:45	25:12	7	
water	21:45	0:0	8	{
for	22:16	24:16	8	(group = 0 ;group < ( AAC_SIGNE ) g_len;group ++ , cfo += 128)
forinit	22:21	22:30	9	group = 0 ;
water	22:21	0:0	10	group
op	22:27	0:0	10	=
water	22:29	0:0	10	0
water	22:30	0:0	10	;
cond	22:32	22:51	9	group < ( AAC_SIGNE ) g_len
water	22:32	0:0	10	group
op	22:38	0:0	10	<
water	22:40	0:0	10	(
water	22:41	0:0	10	AAC_SIGNE
water	22:50	0:0	10	)
water	22:51	0:0	10	g_len
forexpr	22:58	22:72	9	group ++ , cfo += 128
water	22:58	0:0	10	group
op	22:63	0:0	10	++
water	22:65	0:0	10	,
water	22:67	0:0	10	cfo
op	22:70	0:0	10	+=
water	22:72	0:0	10	128
stmts	22:77	24:16	9	
water	22:77	0:0	10	{
call	23:20	23:57	10	memset
arg	23:27	23:30	11	cfo
water	23:27	0:0	12	cfo
arg	23:32	23:33	11	0
water	23:32	0:0	12	0
arg	23:35	23:57	11	off_len*sizeof(*cfo)
water	23:35	0:0	12	off_len
op	23:43	0:0	12	*
op	23:45	0:0	12	sizeof
water	23:51	0:0	12	(
op	23:52	0:0	12	*
water	23:53	0:0	12	cfo
water	23:56	0:0	12	)
water	23:58	0:0	10	;
water	24:16	0:0	10	}
water	25:12	0:0	8	}
else	25:14	49:12	6
stmts	25:19	49:12	7	
if	25:19	49:12	8	(cbt_m1 == NOISE_BT - 1)
cond	25:23	25:44	9	cbt_m1 == NOISE_BT - 1
water	25:23	0:0	10	cbt_m1
op	25:30	0:0	10	==
water	25:33	0:0	10	NOISE_BT
op	25:42	0:0	10	-
water	25:44	0:0	10	1
stmts	25:47	49:12	9	
water	25:47	0:0	10	{
for	26:16	48:16	10	(group = 0 ;group < ( AAC_SIGNE ) g_len;group ++ , cfo += 128)
forinit	26:21	26:30	11	group = 0 ;
water	26:21	0:0	12	group
op	26:27	0:0	12	=
water	26:29	0:0	12	0
water	26:30	0:0	12	;
cond	26:32	26:51	11	group < ( AAC_SIGNE ) g_len
water	26:32	0:0	12	group
op	26:38	0:0	12	<
water	26:40	0:0	12	(
water	26:41	0:0	12	AAC_SIGNE
water	26:50	0:0	12	)
water	26:51	0:0	12	g_len
forexpr	26:58	26:72	11	group ++ , cfo += 128
water	26:58	0:0	12	group
op	26:63	0:0	12	++
water	26:65	0:0	12	,
water	26:67	0:0	12	cfo
op	26:70	0:0	12	+=
water	26:72	0:0	12	128
stmts	26:77	48:16	11	
water	26:77	0:0	12	{
decl	28:20	28:31	12	float	scale
decl	30:20	30:40	12	INTFLOAT	band_energy
for	31:20	38:20	12	(k = 0 ;k < off_len;k ++)
forinit	31:25	31:30	13	k = 0 ;
water	31:25	0:0	14	k
op	31:27	0:0	14	=
water	31:29	0:0	14	0
water	31:30	0:0	14	;
cond	31:32	31:36	13	k < off_len
water	31:32	0:0	14	k
op	31:34	0:0	14	<
water	31:36	0:0	14	off_len
forexpr	31:45	31:46	13	k ++
water	31:45	0:0	14	k
op	31:46	0:0	14	++
stmts	31:50	38:20	13	
water	31:50	0:0	14	{
water	32:24	0:0	14	ac
op	32:26	0:0	14	->
water	32:28	0:0	14	random_state
op	32:42	0:0	14	=
call	32:44	32:71	14	lcg_random
arg	32:55	32:71	15	ac->random_state
water	32:55	0:0	16	ac
op	32:57	0:0	16	->
water	32:59	0:0	16	random_state
water	32:72	0:0	14	;
water	34:24	0:0	14	cfo
op	34:27	0:0	14	[
water	34:28	0:0	14	k
op	34:29	0:0	14	]
op	34:31	0:0	14	=
water	34:33	0:0	14	ac
op	34:35	0:0	14	->
water	34:37	0:0	14	random_state
op	34:50	0:0	14	>>
water	34:53	0:0	14	3
water	34:54	0:0	14	;
water	36:24	0:0	14	cfo
op	36:27	0:0	14	[
water	36:28	0:0	14	k
op	36:29	0:0	14	]
op	36:31	0:0	14	=
water	36:33	0:0	14	ac
op	36:35	0:0	14	->
water	36:37	0:0	14	random_state
water	36:49	0:0	14	;
water	38:20	0:0	14	}
water	40:20	0:0	12	band_energy
op	40:32	0:0	12	=
call	40:34	40:81	12	ac->fdsp->scalarproduct_fixed
arg	40:64	40:67	13	cfo
water	40:64	0:0	14	cfo
arg	40:69	40:72	13	cfo
water	40:69	0:0	14	cfo
arg	40:74	40:81	13	off_len
water	40:74	0:0	14	off_len
water	40:82	0:0	12	;
water	41:20	0:0	12	band_energy
op	41:32	0:0	12	=
call	41:34	41:60	12	fixed_sqrt
arg	41:45	41:56	13	band_energy
water	41:45	0:0	14	band_energy
arg	41:58	41:60	13	31
water	41:58	0:0	14	31
water	41:61	0:0	12	;
call	42:20	42:66	12	noise_scale
arg	42:32	42:35	13	cfo
water	42:32	0:0	14	cfo
arg	42:37	42:44	13	sf[idx]
water	42:37	0:0	14	sf
op	42:39	0:0	14	[
water	42:40	0:0	14	idx
op	42:43	0:0	14	]
arg	42:46	42:57	13	band_energy
water	42:46	0:0	14	band_energy
arg	42:59	42:66	13	off_len
water	42:59	0:0	14	off_len
water	42:67	0:0	12	;
water	44:20	0:0	12	band_energy
op	44:32	0:0	12	=
call	44:34	44:81	12	ac->fdsp->scalarproduct_float
arg	44:64	44:67	13	cfo
water	44:64	0:0	14	cfo
arg	44:69	44:72	13	cfo
water	44:69	0:0	14	cfo
arg	44:74	44:81	13	off_len
water	44:74	0:0	14	off_len
water	44:82	0:0	12	;
water	45:20	0:0	12	scale
op	45:26	0:0	12	=
water	45:28	0:0	12	sf
op	45:30	0:0	12	[
water	45:31	0:0	12	idx
op	45:34	0:0	12	]
op	45:36	0:0	12	/
call	45:38	45:55	12	sqrtf
arg	45:44	45:55	13	band_energy
water	45:44	0:0	14	band_energy
water	45:56	0:0	12	;
call	46:20	46:73	12	ac->fdsp->vector_fmul_scalar
arg	46:49	46:52	13	cfo
water	46:49	0:0	14	cfo
arg	46:54	46:57	13	cfo
water	46:54	0:0	14	cfo
arg	46:59	46:64	13	scale
water	46:59	0:0	14	scale
arg	46:66	46:73	13	off_len
water	46:66	0:0	14	off_len
water	46:74	0:0	12	;
water	48:16	0:0	12	}
water	49:12	0:0	10	}
else	49:14	215:12	6
stmts	49:19	215:12	7	
water	49:19	0:0	8	{
decl	51:16	51:69	8	const float	*vq
op	51:32	0:0	8	=
water	51:34	0:0	8	ff_aac_codebook_vector_vals
op	51:61	0:0	8	[
water	51:62	0:0	8	cbt_m1
op	51:68	0:0	8	]
decl	53:16	53:82	8	const uint16_t	*cb_vector_idx
op	53:46	0:0	8	=
water	53:48	0:0	8	ff_aac_codebook_vector_idx
op	53:74	0:0	8	[
water	53:75	0:0	8	cbt_m1
op	53:81	0:0	8	]
call	54:16	54:34	8	VLC_TYPE
arg	54:26	54:34	9	*vlc_tab
op	54:26	0:0	10	*
water	54:27	0:0	10	vlc_tab
op	54:35	0:0	8	[
water	54:36	0:0	8	2
op	54:37	0:0	8	]
op	54:39	0:0	8	=
water	54:41	0:0	8	vlc_spectral
op	54:53	0:0	8	[
water	54:54	0:0	8	cbt_m1
op	54:60	0:0	8	]
op	54:61	0:0	8	.
water	54:62	0:0	8	table
water	54:67	0:0	8	;
call	55:16	55:34	8	OPEN_READER
arg	55:28	55:30	9	re
water	55:28	0:0	10	re
arg	55:32	55:34	9	gb
water	55:32	0:0	10	gb
water	55:35	0:0	8	;
switch	56:16	213:16	8	(cbt_m1 >> 1)
cond	56:24	56:34	9	cbt_m1 >> 1
water	56:24	0:0	10	cbt_m1
op	56:31	0:0	10	>>
water	56:34	0:0	10	1
stmts	56:37	213:16	9	
water	56:37	0:0	10	{
label	57:16	57:22	10	case 0 :
for	58:20	73:20	10	(group = 0 ;group < ( AAC_SIGNE ) g_len;group ++ , cfo += 128)
forinit	58:25	58:34	11	group = 0 ;
water	58:25	0:0	12	group
op	58:31	0:0	12	=
water	58:33	0:0	12	0
water	58:34	0:0	12	;
cond	58:36	58:55	11	group < ( AAC_SIGNE ) g_len
water	58:36	0:0	12	group
op	58:42	0:0	12	<
water	58:44	0:0	12	(
water	58:45	0:0	12	AAC_SIGNE
water	58:54	0:0	12	)
water	58:55	0:0	12	g_len
forexpr	58:62	58:76	11	group ++ , cfo += 128
water	58:62	0:0	12	group
op	58:67	0:0	12	++
water	58:69	0:0	12	,
water	58:71	0:0	12	cfo
op	58:74	0:0	12	+=
water	58:76	0:0	12	128
stmts	58:81	73:20	11	
water	58:81	0:0	12	{
decl	59:24	59:42	12	INTFLOAT	*cf
op	59:37	0:0	12	=
water	59:39	0:0	12	cfo
decl	60:24	60:41	12	int	len
op	60:32	0:0	12	=
water	60:34	0:0	12	off_len
do	61:24	72:24	12	(len -= 4)
cond	72:33	72:40	13	len -= 4
water	72:33	0:0	14	len
op	72:37	0:0	14	-=
water	72:40	0:0	14	4
stmts	61:27	72:24	13	
water	61:27	0:0	14	{
decl	62:28	62:36	14	int	code
water	63:28	0:0	14	unsigned
water	63:37	0:0	14	cb_idx
water	63:43	0:0	14	;
call	64:28	64:47	14	UPDATE_CACHE
arg	64:41	64:43	15	re
water	64:41	0:0	16	re
arg	64:45	64:47	15	gb
water	64:45	0:0	16	gb
water	64:48	0:0	14	;
call	65:28	65:63	14	GET_VLC
arg	65:36	65:40	15	code
water	65:36	0:0	16	code
arg	65:42	65:44	15	re
water	65:42	0:0	16	re
arg	65:46	65:48	15	gb
water	65:46	0:0	16	gb
arg	65:50	65:57	15	vlc_tab
water	65:50	0:0	16	vlc_tab
arg	65:59	65:60	15	8
water	65:59	0:0	16	8
arg	65:62	65:63	15	2
water	65:62	0:0	16	2
water	65:64	0:0	14	;
water	66:28	0:0	14	cb_idx
op	66:35	0:0	14	=
water	66:37	0:0	14	cb_vector_idx
op	66:50	0:0	14	[
water	66:51	0:0	14	code
op	66:55	0:0	14	]
water	66:56	0:0	14	;
water	68:28	0:0	14	cf
op	68:31	0:0	14	=
call	68:33	68:53	14	DEC_SQUAD
arg	68:43	68:45	15	cf
water	68:43	0:0	16	cf
arg	68:47	68:53	15	cb_idx
water	68:47	0:0	16	cb_idx
water	68:54	0:0	14	;
water	70:28	0:0	14	cf
op	70:31	0:0	14	=
call	70:33	70:63	14	VMUL4
arg	70:39	70:41	15	cf
water	70:39	0:0	16	cf
arg	70:43	70:45	15	vq
water	70:43	0:0	16	vq
arg	70:47	70:53	15	cb_idx
water	70:47	0:0	16	cb_idx
arg	70:55	70:63	15	sf+idx
water	70:55	0:0	16	sf
op	70:58	0:0	16	+
water	70:60	0:0	16	idx
water	70:64	0:0	14	;
water	72:24	0:0	14	}
water	72:42	0:0	12	;
water	73:20	0:0	12	}
break	74:20	74:25	10	
label	75:16	75:22	10	case 1 :
for	76:20	96:20	10	(group = 0 ;group < ( AAC_SIGNE ) g_len;group ++ , cfo += 128)
forinit	76:25	76:34	11	group = 0 ;
water	76:25	0:0	12	group
op	76:31	0:0	12	=
water	76:33	0:0	12	0
water	76:34	0:0	12	;
cond	76:36	76:55	11	group < ( AAC_SIGNE ) g_len
water	76:36	0:0	12	group
op	76:42	0:0	12	<
water	76:44	0:0	12	(
water	76:45	0:0	12	AAC_SIGNE
water	76:54	0:0	12	)
water	76:55	0:0	12	g_len
forexpr	76:62	76:76	11	group ++ , cfo += 128
water	76:62	0:0	12	group
op	76:67	0:0	12	++
water	76:69	0:0	12	,
water	76:71	0:0	12	cfo
op	76:74	0:0	12	+=
water	76:76	0:0	12	128
stmts	76:81	96:20	11	
water	76:81	0:0	12	{
decl	77:24	77:42	12	INTFLOAT	*cf
op	77:37	0:0	12	=
water	77:39	0:0	12	cfo
decl	78:24	78:41	12	int	len
op	78:32	0:0	12	=
water	78:34	0:0	12	off_len
do	79:24	95:24	12	(len -= 4)
cond	95:33	95:40	13	len -= 4
water	95:33	0:0	14	len
op	95:37	0:0	14	-=
water	95:40	0:0	14	4
stmts	79:27	95:24	13	
water	79:27	0:0	14	{
decl	80:28	80:36	14	int	code
water	81:28	0:0	14	unsigned
water	81:37	0:0	14	nnz
water	81:40	0:0	14	;
water	82:28	0:0	14	unsigned
water	82:37	0:0	14	cb_idx
water	82:43	0:0	14	;
decl	83:28	83:41	14	uint32_t	bits
call	84:28	84:47	14	UPDATE_CACHE
arg	84:41	84:43	15	re
water	84:41	0:0	16	re
arg	84:45	84:47	15	gb
water	84:45	0:0	16	gb
water	84:48	0:0	14	;
call	85:28	85:63	14	GET_VLC
arg	85:36	85:40	15	code
water	85:36	0:0	16	code
arg	85:42	85:44	15	re
water	85:42	0:0	16	re
arg	85:46	85:48	15	gb
water	85:46	0:0	16	gb
arg	85:50	85:57	15	vlc_tab
water	85:50	0:0	16	vlc_tab
arg	85:59	85:60	15	8
water	85:59	0:0	16	8
arg	85:62	85:63	15	2
water	85:62	0:0	16	2
water	85:64	0:0	14	;
water	86:28	0:0	14	cb_idx
op	86:35	0:0	14	=
water	86:37	0:0	14	cb_vector_idx
op	86:50	0:0	14	[
water	86:51	0:0	14	code
op	86:55	0:0	14	]
water	86:56	0:0	14	;
water	87:28	0:0	14	nnz
op	87:32	0:0	14	=
water	87:34	0:0	14	cb_idx
op	87:41	0:0	14	>>
water	87:44	0:0	14	8
op	87:46	0:0	14	&
water	87:48	0:0	14	15
water	87:50	0:0	14	;
water	88:28	0:0	14	bits
op	88:33	0:0	14	=
water	88:35	0:0	14	nnz
water	88:39	0:0	14	?
call	88:41	88:57	14	GET_CACHE
arg	88:51	88:53	15	re
water	88:51	0:0	16	re
arg	88:55	88:57	15	gb
water	88:55	0:0	16	gb
water	88:59	0:0	14	:
water	88:61	0:0	14	0
water	88:62	0:0	14	;
call	89:28	89:54	14	LAST_SKIP_BITS
arg	89:43	89:45	15	re
water	89:43	0:0	16	re
arg	89:47	89:49	15	gb
water	89:47	0:0	16	gb
arg	89:51	89:54	15	nnz
water	89:51	0:0	16	nnz
water	89:55	0:0	14	;
water	91:28	0:0	14	cf
op	91:31	0:0	14	=
call	91:33	91:59	14	DEC_UQUAD
arg	91:43	91:45	15	cf
water	91:43	0:0	16	cf
arg	91:47	91:53	15	cb_idx
water	91:47	0:0	16	cb_idx
arg	91:55	91:59	15	bits
water	91:55	0:0	16	bits
water	91:60	0:0	14	;
water	93:28	0:0	14	cf
op	93:31	0:0	14	=
call	93:33	93:70	14	VMUL4S
arg	93:40	93:42	15	cf
water	93:40	0:0	16	cf
arg	93:44	93:46	15	vq
water	93:44	0:0	16	vq
arg	93:48	93:54	15	cb_idx
water	93:48	0:0	16	cb_idx
arg	93:56	93:60	15	bits
water	93:56	0:0	16	bits
arg	93:62	93:70	15	sf+idx
water	93:62	0:0	16	sf
op	93:65	0:0	16	+
water	93:67	0:0	16	idx
water	93:71	0:0	14	;
water	95:24	0:0	14	}
water	95:42	0:0	12	;
water	96:20	0:0	12	}
break	97:20	97:25	10	
label	98:16	98:22	10	case 2 :
for	99:20	114:20	10	(group = 0 ;group < ( AAC_SIGNE ) g_len;group ++ , cfo += 128)
forinit	99:25	99:34	11	group = 0 ;
water	99:25	0:0	12	group
op	99:31	0:0	12	=
water	99:33	0:0	12	0
water	99:34	0:0	12	;
cond	99:36	99:55	11	group < ( AAC_SIGNE ) g_len
water	99:36	0:0	12	group
op	99:42	0:0	12	<
water	99:44	0:0	12	(
water	99:45	0:0	12	AAC_SIGNE
water	99:54	0:0	12	)
water	99:55	0:0	12	g_len
forexpr	99:62	99:76	11	group ++ , cfo += 128
water	99:62	0:0	12	group
op	99:67	0:0	12	++
water	99:69	0:0	12	,
water	99:71	0:0	12	cfo
op	99:74	0:0	12	+=
water	99:76	0:0	12	128
stmts	99:81	114:20	11	
water	99:81	0:0	12	{
decl	100:24	100:42	12	INTFLOAT	*cf
op	100:37	0:0	12	=
water	100:39	0:0	12	cfo
decl	101:24	101:41	12	int	len
op	101:32	0:0	12	=
water	101:34	0:0	12	off_len
do	102:24	113:24	12	(len -= 2)
cond	113:33	113:40	13	len -= 2
water	113:33	0:0	14	len
op	113:37	0:0	14	-=
water	113:40	0:0	14	2
stmts	102:27	113:24	13	
water	102:27	0:0	14	{
decl	103:28	103:36	14	int	code
water	104:28	0:0	14	unsigned
water	104:37	0:0	14	cb_idx
water	104:43	0:0	14	;
call	105:28	105:47	14	UPDATE_CACHE
arg	105:41	105:43	15	re
water	105:41	0:0	16	re
arg	105:45	105:47	15	gb
water	105:45	0:0	16	gb
water	105:48	0:0	14	;
call	106:28	106:63	14	GET_VLC
arg	106:36	106:40	15	code
water	106:36	0:0	16	code
arg	106:42	106:44	15	re
water	106:42	0:0	16	re
arg	106:46	106:48	15	gb
water	106:46	0:0	16	gb
arg	106:50	106:57	15	vlc_tab
water	106:50	0:0	16	vlc_tab
arg	106:59	106:60	15	8
water	106:59	0:0	16	8
arg	106:62	106:63	15	2
water	106:62	0:0	16	2
water	106:64	0:0	14	;
water	107:28	0:0	14	cb_idx
op	107:35	0:0	14	=
water	107:37	0:0	14	cb_vector_idx
op	107:50	0:0	14	[
water	107:51	0:0	14	code
op	107:55	0:0	14	]
water	107:56	0:0	14	;
water	109:28	0:0	14	cf
op	109:31	0:0	14	=
call	109:33	109:53	14	DEC_SPAIR
arg	109:43	109:45	15	cf
water	109:43	0:0	16	cf
arg	109:47	109:53	15	cb_idx
water	109:47	0:0	16	cb_idx
water	109:54	0:0	14	;
water	111:28	0:0	14	cf
op	111:31	0:0	14	=
call	111:33	111:63	14	VMUL2
arg	111:39	111:41	15	cf
water	111:39	0:0	16	cf
arg	111:43	111:45	15	vq
water	111:43	0:0	16	vq
arg	111:47	111:53	15	cb_idx
water	111:47	0:0	16	cb_idx
arg	111:55	111:63	15	sf+idx
water	111:55	0:0	16	sf
op	111:58	0:0	16	+
water	111:60	0:0	16	idx
water	111:64	0:0	14	;
water	113:24	0:0	14	}
water	113:42	0:0	12	;
water	114:20	0:0	12	}
break	115:20	115:25	10	
label	116:16	116:22	10	case 3 :
label	117:16	117:22	10	case 4 :
for	118:20	138:20	10	(group = 0 ;group < ( AAC_SIGNE ) g_len;group ++ , cfo += 128)
forinit	118:25	118:34	11	group = 0 ;
water	118:25	0:0	12	group
op	118:31	0:0	12	=
water	118:33	0:0	12	0
water	118:34	0:0	12	;
cond	118:36	118:55	11	group < ( AAC_SIGNE ) g_len
water	118:36	0:0	12	group
op	118:42	0:0	12	<
water	118:44	0:0	12	(
water	118:45	0:0	12	AAC_SIGNE
water	118:54	0:0	12	)
water	118:55	0:0	12	g_len
forexpr	118:62	118:76	11	group ++ , cfo += 128
water	118:62	0:0	12	group
op	118:67	0:0	12	++
water	118:69	0:0	12	,
water	118:71	0:0	12	cfo
op	118:74	0:0	12	+=
water	118:76	0:0	12	128
stmts	118:81	138:20	11	
water	118:81	0:0	12	{
decl	119:24	119:42	12	INTFLOAT	*cf
op	119:37	0:0	12	=
water	119:39	0:0	12	cfo
decl	120:24	120:41	12	int	len
op	120:32	0:0	12	=
water	120:34	0:0	12	off_len
do	121:24	137:24	12	(len -= 2)
cond	137:33	137:40	13	len -= 2
water	137:33	0:0	14	len
op	137:37	0:0	14	-=
water	137:40	0:0	14	2
stmts	121:27	137:24	13	
water	121:27	0:0	14	{
decl	122:28	122:36	14	int	code
water	123:28	0:0	14	unsigned
water	123:37	0:0	14	nnz
water	123:40	0:0	14	;
water	124:28	0:0	14	unsigned
water	124:37	0:0	14	cb_idx
water	124:43	0:0	14	;
water	125:28	0:0	14	unsigned
water	125:37	0:0	14	sign
water	125:41	0:0	14	;
call	126:28	126:47	14	UPDATE_CACHE
arg	126:41	126:43	15	re
water	126:41	0:0	16	re
arg	126:45	126:47	15	gb
water	126:45	0:0	16	gb
water	126:48	0:0	14	;
call	127:28	127:63	14	GET_VLC
arg	127:36	127:40	15	code
water	127:36	0:0	16	code
arg	127:42	127:44	15	re
water	127:42	0:0	16	re
arg	127:46	127:48	15	gb
water	127:46	0:0	16	gb
arg	127:50	127:57	15	vlc_tab
water	127:50	0:0	16	vlc_tab
arg	127:59	127:60	15	8
water	127:59	0:0	16	8
arg	127:62	127:63	15	2
water	127:62	0:0	16	2
water	127:64	0:0	14	;
water	128:28	0:0	14	cb_idx
op	128:35	0:0	14	=
water	128:37	0:0	14	cb_vector_idx
op	128:50	0:0	14	[
water	128:51	0:0	14	code
op	128:55	0:0	14	]
water	128:56	0:0	14	;
water	129:28	0:0	14	nnz
op	129:32	0:0	14	=
water	129:34	0:0	14	cb_idx
op	129:41	0:0	14	>>
water	129:44	0:0	14	8
op	129:46	0:0	14	&
water	129:48	0:0	14	15
water	129:50	0:0	14	;
water	130:28	0:0	14	sign
op	130:33	0:0	14	=
water	130:35	0:0	14	nnz
water	130:39	0:0	14	?
call	130:41	130:63	14	SHOW_UBITS
arg	130:52	130:54	15	re
water	130:52	0:0	16	re
arg	130:56	130:58	15	gb
water	130:56	0:0	16	gb
arg	130:60	130:63	15	nnz
water	130:60	0:0	16	nnz
op	130:65	0:0	14	<<
water	130:68	0:0	14	(
water	130:69	0:0	14	cb_idx
op	130:76	0:0	14	>>
water	130:79	0:0	14	12
water	130:81	0:0	14	)
water	130:83	0:0	14	:
water	130:85	0:0	14	0
water	130:86	0:0	14	;
call	131:28	131:54	14	LAST_SKIP_BITS
arg	131:43	131:45	15	re
water	131:43	0:0	16	re
arg	131:47	131:49	15	gb
water	131:47	0:0	16	gb
arg	131:51	131:54	15	nnz
water	131:51	0:0	16	nnz
water	131:55	0:0	14	;
water	133:28	0:0	14	cf
op	133:31	0:0	14	=
call	133:33	133:59	14	DEC_UPAIR
arg	133:43	133:45	15	cf
water	133:43	0:0	16	cf
arg	133:47	133:53	15	cb_idx
water	133:47	0:0	16	cb_idx
arg	133:55	133:59	15	sign
water	133:55	0:0	16	sign
water	133:60	0:0	14	;
water	135:28	0:0	14	cf
op	135:31	0:0	14	=
call	135:33	135:70	14	VMUL2S
arg	135:40	135:42	15	cf
water	135:40	0:0	16	cf
arg	135:44	135:46	15	vq
water	135:44	0:0	16	vq
arg	135:48	135:54	15	cb_idx
water	135:48	0:0	16	cb_idx
arg	135:56	135:60	15	sign
water	135:56	0:0	16	sign
arg	135:62	135:70	15	sf+idx
water	135:62	0:0	16	sf
op	135:65	0:0	16	+
water	135:67	0:0	16	idx
water	135:71	0:0	14	;
water	137:24	0:0	14	}
water	137:42	0:0	12	;
water	138:20	0:0	12	}
break	139:20	139:25	10	
label	140:16	140:23	10	default :
for	141:20	212:20	10	(group = 0 ;group < ( AAC_SIGNE ) g_len;group ++ , cfo += 128)
forinit	141:25	141:34	11	group = 0 ;
water	141:25	0:0	12	group
op	141:31	0:0	12	=
water	141:33	0:0	12	0
water	141:34	0:0	12	;
cond	141:36	141:55	11	group < ( AAC_SIGNE ) g_len
water	141:36	0:0	12	group
op	141:42	0:0	12	<
water	141:44	0:0	12	(
water	141:45	0:0	12	AAC_SIGNE
water	141:54	0:0	12	)
water	141:55	0:0	12	g_len
forexpr	141:62	141:76	11	group ++ , cfo += 128
water	141:62	0:0	12	group
op	141:67	0:0	12	++
water	141:69	0:0	12	,
water	141:71	0:0	12	cfo
op	141:74	0:0	12	+=
water	141:76	0:0	12	128
stmts	141:81	212:20	11	
water	141:81	0:0	12	{
decl	143:24	143:38	12	int	*icf
op	143:33	0:0	12	=
water	143:35	0:0	12	cfo
decl	144:24	144:29	12	int	v
decl	146:24	146:39	12	float	*cf
op	146:34	0:0	12	=
water	146:36	0:0	12	cfo
decl	147:24	147:55	12	uint32_t	*icf
op	147:38	0:0	12	=
water	147:40	0:0	12	(
water	147:41	0:0	12	uint32_t
op	147:50	0:0	12	*
water	147:51	0:0	12	)
water	147:53	0:0	12	cf
decl	149:24	149:41	12	int	len
op	149:32	0:0	12	=
water	149:34	0:0	12	off_len
do	150:24	208:24	12	(len -= 2)
cond	208:33	208:40	13	len -= 2
water	208:33	0:0	14	len
op	208:37	0:0	14	-=
water	208:40	0:0	14	2
stmts	150:27	208:24	13	
water	150:27	0:0	14	{
decl	151:28	151:36	14	int	code
water	152:28	0:0	14	unsigned
water	152:37	0:0	14	nzt
water	152:40	0:0	14	,
water	152:42	0:0	14	nnz
water	152:45	0:0	14	;
water	153:28	0:0	14	unsigned
water	153:37	0:0	14	cb_idx
water	153:43	0:0	14	;
decl	154:28	154:41	14	uint32_t	bits
decl	155:28	155:33	14	int	j
call	156:28	156:47	14	UPDATE_CACHE
arg	156:41	156:43	15	re
water	156:41	0:0	16	re
arg	156:45	156:47	15	gb
water	156:45	0:0	16	gb
water	156:48	0:0	14	;
call	157:28	157:63	14	GET_VLC
arg	157:36	157:40	15	code
water	157:36	0:0	16	code
arg	157:42	157:44	15	re
water	157:42	0:0	16	re
arg	157:46	157:48	15	gb
water	157:46	0:0	16	gb
arg	157:50	157:57	15	vlc_tab
water	157:50	0:0	16	vlc_tab
arg	157:59	157:60	15	8
water	157:59	0:0	16	8
arg	157:62	157:63	15	2
water	157:62	0:0	16	2
water	157:64	0:0	14	;
if	158:28	162:28	14	(! code)
cond	158:32	158:33	15	! code
op	158:32	0:0	16	!
water	158:33	0:0	16	code
stmts	158:39	162:28	15	
water	158:39	0:0	16	{
op	159:32	0:0	16	*
water	159:33	0:0	16	icf
op	159:36	0:0	16	++
op	159:39	0:0	16	=
water	159:41	0:0	16	0
water	159:42	0:0	16	;
op	160:32	0:0	16	*
water	160:33	0:0	16	icf
op	160:36	0:0	16	++
op	160:39	0:0	16	=
water	160:41	0:0	16	0
water	160:42	0:0	16	;
continue	161:32	161:40	16	
water	162:28	0:0	16	}
water	163:28	0:0	14	cb_idx
op	163:35	0:0	14	=
water	163:37	0:0	14	cb_vector_idx
op	163:50	0:0	14	[
water	163:51	0:0	14	code
op	163:55	0:0	14	]
water	163:56	0:0	14	;
water	164:28	0:0	14	nnz
op	164:32	0:0	14	=
water	164:34	0:0	14	cb_idx
op	164:41	0:0	14	>>
water	164:44	0:0	14	12
water	164:46	0:0	14	;
water	165:28	0:0	14	nzt
op	165:32	0:0	14	=
water	165:34	0:0	14	cb_idx
op	165:41	0:0	14	>>
water	165:44	0:0	14	8
water	165:45	0:0	14	;
water	166:28	0:0	14	bits
op	166:33	0:0	14	=
call	166:35	166:57	14	SHOW_UBITS
arg	166:46	166:48	15	re
water	166:46	0:0	16	re
arg	166:50	166:52	15	gb
water	166:50	0:0	16	gb
arg	166:54	166:57	15	nnz
water	166:54	0:0	16	nnz
op	166:59	0:0	14	<<
water	166:62	0:0	14	(
water	166:63	0:0	14	32
op	166:65	0:0	14	-
water	166:66	0:0	14	nnz
water	166:69	0:0	14	)
water	166:70	0:0	14	;
call	167:28	167:54	14	LAST_SKIP_BITS
arg	167:43	167:45	15	re
water	167:43	0:0	16	re
arg	167:47	167:49	15	gb
water	167:47	0:0	16	gb
arg	167:51	167:54	15	nnz
water	167:51	0:0	16	nnz
water	167:55	0:0	14	;
for	168:28	207:28	14	(j = 0 ;j < 2;j ++)
forinit	168:33	168:38	15	j = 0 ;
water	168:33	0:0	16	j
op	168:35	0:0	16	=
water	168:37	0:0	16	0
water	168:38	0:0	16	;
cond	168:40	168:44	15	j < 2
water	168:40	0:0	16	j
op	168:42	0:0	16	<
water	168:44	0:0	16	2
forexpr	168:47	168:48	15	j ++
water	168:47	0:0	16	j
op	168:48	0:0	16	++
stmts	168:52	207:28	15	
water	168:52	0:0	16	{
if	169:32	194:32	16	(nzt & 1 << j)
cond	169:36	169:45	17	nzt & 1 << j
water	169:36	0:0	18	nzt
op	169:40	0:0	18	&
water	169:42	0:0	18	1
op	169:43	0:0	18	<<
water	169:45	0:0	18	j
stmts	169:48	194:32	17	
water	169:48	0:0	18	{
decl	170:36	170:46	18	uint32_t	b
decl	171:36	171:41	18	int	n
call	174:36	174:55	18	UPDATE_CACHE
arg	174:49	174:51	19	re
water	174:49	0:0	20	re
arg	174:53	174:55	19	gb
water	174:53	0:0	20	gb
water	174:56	0:0	18	;
water	175:36	0:0	18	b
op	175:38	0:0	18	=
call	175:40	175:56	18	GET_CACHE
arg	175:50	175:52	19	re
water	175:50	0:0	20	re
arg	175:54	175:56	19	gb
water	175:54	0:0	20	gb
water	175:57	0:0	18	;
water	176:36	0:0	18	b
op	176:38	0:0	18	=
water	176:40	0:0	18	31
op	176:43	0:0	18	-
call	176:45	176:55	18	av_log2
arg	176:53	176:55	19	~b
water	176:53	0:0	20	~b
water	176:56	0:0	18	;
if	177:36	180:36	18	(b > 8)
cond	177:40	177:44	19	b > 8
water	177:40	0:0	20	b
op	177:42	0:0	20	>
water	177:44	0:0	20	8
stmts	177:47	180:36	19	
water	177:47	0:0	20	{
call	178:40	178:112	20	av_log
arg	178:47	178:56	21	ac->avctx
water	178:47	0:0	22	ac
op	178:49	0:0	22	->
water	178:51	0:0	22	avctx
arg	178:58	178:70	21	AV_LOG_ERROR
water	178:58	0:0	22	AV_LOG_ERROR
arg	178:72	178:112	21	"error in spectral data, ESC overflow\n"
water	178:72	0:0	22	"error in spectral data, ESC overflow\n"
water	178:113	0:0	20	;
return	179:40	179:66	20	AVERROR_INVALIDDATA
water	179:47	0:0	21	AVERROR_INVALIDDATA
water	180:36	0:0	20	}
call	181:36	181:59	18	SKIP_BITS
arg	181:46	181:48	19	re
water	181:46	0:0	20	re
arg	181:50	181:52	19	gb
water	181:50	0:0	20	gb
arg	181:54	181:59	19	b+1
water	181:54	0:0	20	b
op	181:56	0:0	20	+
water	181:58	0:0	20	1
water	181:60	0:0	18	;
water	182:36	0:0	18	b
op	182:38	0:0	18	+=
water	182:41	0:0	18	4
water	182:42	0:0	18	;
water	183:36	0:0	18	n
op	183:38	0:0	18	=
water	183:40	0:0	18	(
water	183:41	0:0	18	1
op	183:43	0:0	18	<<
water	183:46	0:0	18	b
water	183:47	0:0	18	)
op	183:49	0:0	18	+
call	183:51	183:71	18	SHOW_UBITS
arg	183:62	183:64	19	re
water	183:62	0:0	20	re
arg	183:66	183:68	19	gb
water	183:66	0:0	20	gb
arg	183:70	183:71	19	b
water	183:70	0:0	20	b
water	183:72	0:0	18	;
call	184:36	184:60	18	LAST_SKIP_BITS
arg	184:51	184:53	19	re
water	184:51	0:0	20	re
arg	184:55	184:57	19	gb
water	184:55	0:0	20	gb
arg	184:59	184:60	19	b
water	184:59	0:0	20	b
water	184:61	0:0	18	;
water	186:36	0:0	18	v
op	186:38	0:0	18	=
water	186:40	0:0	18	n
water	186:41	0:0	18	;
if	187:36	188:46	18	(bits & 1 U << 31)
cond	187:40	187:51	19	bits & 1 U << 31
water	187:40	0:0	20	bits
op	187:45	0:0	20	&
water	187:47	0:0	20	1
water	187:48	0:0	20	U
op	187:49	0:0	20	<<
water	187:51	0:0	20	31
stmts	188:40	188:46	19	
water	188:40	0:0	20	v
op	188:42	0:0	20	=
op	188:44	0:0	20	-
water	188:45	0:0	20	v
water	188:46	0:0	20	;
op	189:36	0:0	18	*
water	189:37	0:0	18	icf
op	189:40	0:0	18	++
op	189:43	0:0	18	=
water	189:45	0:0	18	v
water	189:46	0:0	18	;
op	191:36	0:0	18	*
water	191:37	0:0	18	icf
op	191:40	0:0	18	++
op	191:43	0:0	18	=
water	191:45	0:0	18	cbrt_tab
op	191:53	0:0	18	[
water	191:54	0:0	18	n
op	191:55	0:0	18	]
op	191:57	0:0	18	|
water	191:59	0:0	18	(
water	191:60	0:0	18	bits
op	191:65	0:0	18	&
water	191:67	0:0	18	1
water	191:68	0:0	18	U
op	191:69	0:0	18	<<
water	191:71	0:0	18	31
water	191:73	0:0	18	)
water	191:74	0:0	18	;
water	193:36	0:0	18	bits
op	193:41	0:0	18	<<=
water	193:45	0:0	18	1
water	193:46	0:0	18	;
water	194:32	0:0	18	}
else	194:34	205:32	16
stmts	194:39	205:32	17	
water	194:39	0:0	18	{
water	196:36	0:0	18	v
op	196:38	0:0	18	=
water	196:40	0:0	18	cb_idx
op	196:47	0:0	18	&
water	196:49	0:0	18	15
water	196:51	0:0	18	;
if	197:36	198:46	18	(bits & 1 U << 31)
cond	197:40	197:51	19	bits & 1 U << 31
water	197:40	0:0	20	bits
op	197:45	0:0	20	&
water	197:47	0:0	20	1
water	197:48	0:0	20	U
op	197:49	0:0	20	<<
water	197:51	0:0	20	31
stmts	198:40	198:46	19	
water	198:40	0:0	20	v
op	198:42	0:0	20	=
op	198:44	0:0	20	-
water	198:45	0:0	20	v
water	198:46	0:0	20	;
op	199:36	0:0	18	*
water	199:37	0:0	18	icf
op	199:40	0:0	18	++
op	199:43	0:0	18	=
water	199:45	0:0	18	v
water	199:46	0:0	18	;
water	201:36	0:0	18	unsigned
water	201:45	0:0	18	v
op	201:47	0:0	18	=
water	201:49	0:0	18	(
water	201:50	0:0	18	(
water	201:51	0:0	18	const
water	201:57	0:0	18	uint32_t
op	201:65	0:0	18	*
water	201:66	0:0	18	)
water	201:67	0:0	18	vq
water	201:69	0:0	18	)
op	201:70	0:0	18	[
water	201:71	0:0	18	cb_idx
op	201:78	0:0	18	&
water	201:80	0:0	18	15
op	201:82	0:0	18	]
water	201:83	0:0	18	;
op	202:36	0:0	18	*
water	202:37	0:0	18	icf
op	202:40	0:0	18	++
op	202:43	0:0	18	=
water	202:45	0:0	18	(
water	202:46	0:0	18	bits
op	202:51	0:0	18	&
water	202:53	0:0	18	1
water	202:54	0:0	18	U
op	202:55	0:0	18	<<
water	202:57	0:0	18	31
water	202:59	0:0	18	)
op	202:61	0:0	18	|
water	202:63	0:0	18	v
water	202:64	0:0	18	;
water	204:36	0:0	18	bits
op	204:41	0:0	18	<<=
op	204:45	0:0	18	!
op	204:46	0:0	18	!
water	204:47	0:0	18	v
water	204:48	0:0	18	;
water	205:32	0:0	18	}
water	206:32	0:0	16	cb_idx
op	206:39	0:0	16	>>=
water	206:43	0:0	16	4
water	206:44	0:0	16	;
water	207:28	0:0	16	}
water	208:24	0:0	14	}
water	208:42	0:0	12	;
call	210:24	210:79	12	ac->fdsp->vector_fmul_scalar
arg	210:53	210:56	13	cfo
water	210:53	0:0	14	cfo
arg	210:58	210:61	13	cfo
water	210:58	0:0	14	cfo
arg	210:63	210:70	13	sf[idx]
water	210:63	0:0	14	sf
op	210:65	0:0	14	[
water	210:66	0:0	14	idx
op	210:69	0:0	14	]
arg	210:72	210:79	13	off_len
water	210:72	0:0	14	off_len
water	210:80	0:0	12	;
water	212:20	0:0	12	}
water	213:16	0:0	10	}
call	214:16	214:35	8	CLOSE_READER
arg	214:29	214:31	9	re
water	214:29	0:0	10	re
arg	214:33	214:35	9	gb
water	214:33	0:0	10	gb
water	214:36	0:0	8	;
water	215:12	0:0	8	}
water	216:8	0:0	6	}
water	217:8	0:0	4	coef
op	217:13	0:0	4	+=
water	217:16	0:0	4	g_len
op	217:22	0:0	4	<<
water	217:25	0:0	4	7
water	217:26	0:0	4	;
water	218:4	0:0	4	}
if	219:4	241:4	2	(pulse_present)
cond	219:8	219:8	3	pulse_present
water	219:8	0:0	4	pulse_present
stmts	219:23	241:4	3	
water	219:23	0:0	4	{
water	220:8	0:0	4	idx
op	220:12	0:0	4	=
water	220:14	0:0	4	0
water	220:15	0:0	4	;
for	221:8	240:8	4	(i = 0 ;i < pulse -> num_pulse;i ++)
forinit	221:13	221:18	5	i = 0 ;
water	221:13	0:0	6	i
op	221:15	0:0	6	=
water	221:17	0:0	6	0
water	221:18	0:0	6	;
cond	221:20	221:31	5	i < pulse -> num_pulse
water	221:20	0:0	6	i
op	221:22	0:0	6	<
water	221:24	0:0	6	pulse
op	221:29	0:0	6	->
water	221:31	0:0	6	num_pulse
forexpr	221:42	221:43	5	i ++
water	221:42	0:0	6	i
op	221:43	0:0	6	++
stmts	221:47	240:8	5	
water	221:47	0:0	6	{
decl	222:12	222:52	6	INTFLOAT	co
op	222:24	0:0	6	=
water	222:26	0:0	6	coef_base
op	222:35	0:0	6	[
water	222:37	0:0	6	pulse
op	222:42	0:0	6	->
water	222:44	0:0	6	pos
op	222:47	0:0	6	[
water	222:48	0:0	6	i
op	222:49	0:0	6	]
op	222:51	0:0	6	]
while	223:12	224:21	6	(offsets [ idx + 1 ] <= pulse -> pos [ i ])
cond	223:19	223:51	7	offsets [ idx + 1 ] <= pulse -> pos [ i ]
water	223:19	0:0	8	offsets
op	223:26	0:0	8	[
water	223:27	0:0	8	idx
op	223:31	0:0	8	+
water	223:33	0:0	8	1
op	223:34	0:0	8	]
op	223:36	0:0	8	<=
water	223:39	0:0	8	pulse
op	223:44	0:0	8	->
water	223:46	0:0	8	pos
op	223:49	0:0	8	[
water	223:50	0:0	8	i
op	223:51	0:0	8	]
stmts	224:16	224:21	7	
water	224:16	0:0	8	idx
op	224:19	0:0	8	++
water	224:21	0:0	8	;
if	225:12	239:12	6	(band_type [ idx ] != NOISE_BT && sf [ idx ])
cond	225:16	225:52	7	band_type [ idx ] != NOISE_BT && sf [ idx ]
water	225:16	0:0	8	band_type
op	225:25	0:0	8	[
water	225:26	0:0	8	idx
op	225:29	0:0	8	]
op	225:31	0:0	8	!=
water	225:34	0:0	8	NOISE_BT
op	225:43	0:0	8	&&
water	225:46	0:0	8	sf
op	225:48	0:0	8	[
water	225:49	0:0	8	idx
op	225:52	0:0	8	]
stmts	225:55	239:12	7	
water	225:55	0:0	8	{
decl	226:16	226:45	8	INTFLOAT	ico
op	226:29	0:0	8	=
op	226:31	0:0	8	-
water	226:32	0:0	8	pulse
op	226:37	0:0	8	->
water	226:39	0:0	8	amp
op	226:42	0:0	8	[
water	226:43	0:0	8	i
op	226:44	0:0	8	]
if	228:16	230:16	8	(co)
cond	228:20	228:20	9	co
water	228:20	0:0	10	co
stmts	228:24	230:16	9	
water	228:24	0:0	10	{
water	229:20	0:0	10	ico
op	229:24	0:0	10	=
water	229:26	0:0	10	co
op	229:29	0:0	10	+
water	229:31	0:0	10	(
water	229:32	0:0	10	co
op	229:35	0:0	10	>
water	229:37	0:0	10	0
water	229:39	0:0	10	?
op	229:41	0:0	10	-
water	229:42	0:0	10	ico
water	229:46	0:0	10	:
water	229:48	0:0	10	ico
water	229:51	0:0	10	)
water	229:52	0:0	10	;
water	230:16	0:0	10	}
water	231:16	0:0	8	coef_base
op	231:25	0:0	8	[
water	231:27	0:0	8	pulse
op	231:32	0:0	8	->
water	231:34	0:0	8	pos
op	231:37	0:0	8	[
water	231:38	0:0	8	i
op	231:39	0:0	8	]
op	231:41	0:0	8	]
op	231:43	0:0	8	=
water	231:45	0:0	8	ico
water	231:48	0:0	8	;
if	233:16	236:16	8	(co)
cond	233:20	233:20	9	co
water	233:20	0:0	10	co
stmts	233:24	236:16	9	
water	233:24	0:0	10	{
water	234:20	0:0	10	co
op	234:23	0:0	10	/=
water	234:26	0:0	10	sf
op	234:28	0:0	10	[
water	234:29	0:0	10	idx
op	234:32	0:0	10	]
water	234:33	0:0	10	;
water	235:20	0:0	10	ico
op	235:24	0:0	10	=
water	235:26	0:0	10	co
op	235:29	0:0	10	/
call	235:31	235:53	10	sqrtf
arg	235:37	235:53	11	sqrtf(fabsf(co))
call	235:37	235:52	12	sqrtf
arg	235:43	235:52	13	fabsf(co)
call	235:43	235:51	14	fabsf
arg	235:49	235:51	15	co
water	235:49	0:0	16	co
op	235:55	0:0	10	+
water	235:57	0:0	10	(
water	235:58	0:0	10	co
op	235:61	0:0	10	>
water	235:63	0:0	10	0
water	235:65	0:0	10	?
op	235:67	0:0	10	-
water	235:68	0:0	10	ico
water	235:72	0:0	10	:
water	235:74	0:0	10	ico
water	235:77	0:0	10	)
water	235:78	0:0	10	;
water	236:16	0:0	10	}
water	237:16	0:0	8	coef_base
op	237:25	0:0	8	[
water	237:27	0:0	8	pulse
op	237:32	0:0	8	->
water	237:34	0:0	8	pos
op	237:37	0:0	8	[
water	237:38	0:0	8	i
op	237:39	0:0	8	]
op	237:41	0:0	8	]
op	237:43	0:0	8	=
call	237:45	237:61	8	cbrtf
arg	237:51	237:61	9	fabsf(ico)
call	237:51	237:60	10	fabsf
arg	237:57	237:60	11	ico
water	237:57	0:0	12	ico
op	237:63	0:0	8	*
water	237:65	0:0	8	ico
op	237:69	0:0	8	*
water	237:71	0:0	8	sf
op	237:73	0:0	8	[
water	237:74	0:0	8	idx
op	237:77	0:0	8	]
water	237:78	0:0	8	;
water	239:12	0:0	8	}
water	240:8	0:0	6	}
water	241:4	0:0	4	}
water	243:4	0:0	2	coef
op	243:9	0:0	2	=
water	243:11	0:0	2	coef_base
water	243:20	0:0	2	;
water	244:4	0:0	2	idx
op	244:8	0:0	2	=
water	244:10	0:0	2	0
water	244:11	0:0	2	;
for	245:4	260:4	2	(g = 0 ;g < ics -> num_window_groups;g ++)
forinit	245:9	245:14	3	g = 0 ;
water	245:9	0:0	4	g
op	245:11	0:0	4	=
water	245:13	0:0	4	0
water	245:14	0:0	4	;
cond	245:16	245:25	3	g < ics -> num_window_groups
water	245:16	0:0	4	g
op	245:18	0:0	4	<
water	245:20	0:0	4	ics
op	245:23	0:0	4	->
water	245:25	0:0	4	num_window_groups
forexpr	245:44	245:45	3	g ++
water	245:44	0:0	4	g
op	245:45	0:0	4	++
stmts	245:49	260:4	3	
water	245:49	0:0	4	{
water	246:8	0:0	4	unsigned
water	246:17	0:0	4	g_len
op	246:23	0:0	4	=
water	246:25	0:0	4	ics
op	246:28	0:0	4	->
water	246:30	0:0	4	group_len
op	246:39	0:0	4	[
water	246:40	0:0	4	g
op	246:41	0:0	4	]
water	246:42	0:0	4	;
for	247:8	258:8	4	(i = 0 ;i < ics -> max_sfb;i ++ , idx ++)
forinit	247:13	247:18	5	i = 0 ;
water	247:13	0:0	6	i
op	247:15	0:0	6	=
water	247:17	0:0	6	0
water	247:18	0:0	6	;
cond	247:20	247:29	5	i < ics -> max_sfb
water	247:20	0:0	6	i
op	247:22	0:0	6	<
water	247:24	0:0	6	ics
op	247:27	0:0	6	->
water	247:29	0:0	6	max_sfb
forexpr	247:38	247:46	5	i ++ , idx ++
water	247:38	0:0	6	i
op	247:39	0:0	6	++
water	247:41	0:0	6	,
water	247:43	0:0	6	idx
op	247:46	0:0	6	++
stmts	247:50	258:8	5	
water	247:50	0:0	6	{
water	248:12	0:0	6	const
water	248:18	0:0	6	unsigned
water	248:27	0:0	6	cbt_m1
op	248:34	0:0	6	=
water	248:36	0:0	6	band_type
op	248:45	0:0	6	[
water	248:46	0:0	6	idx
op	248:49	0:0	6	]
op	248:51	0:0	6	-
water	248:53	0:0	6	1
water	248:54	0:0	6	;
decl	249:12	249:40	6	int	*cfo
op	249:21	0:0	6	=
water	249:23	0:0	6	coef
op	249:28	0:0	6	+
water	249:30	0:0	6	offsets
op	249:37	0:0	6	[
water	249:38	0:0	6	i
op	249:39	0:0	6	]
decl	250:12	250:53	6	int	off_len
op	250:24	0:0	6	=
water	250:26	0:0	6	offsets
op	250:33	0:0	6	[
water	250:34	0:0	6	i
op	250:36	0:0	6	+
water	250:38	0:0	6	1
op	250:39	0:0	6	]
op	250:41	0:0	6	-
water	250:43	0:0	6	offsets
op	250:50	0:0	6	[
water	250:51	0:0	6	i
op	250:52	0:0	6	]
decl	251:12	251:21	6	int	group
if	252:12	257:12	6	(cbt_m1 < NOISE_BT - 1)
cond	252:16	252:36	7	cbt_m1 < NOISE_BT - 1
water	252:16	0:0	8	cbt_m1
op	252:23	0:0	8	<
water	252:25	0:0	8	NOISE_BT
op	252:34	0:0	8	-
water	252:36	0:0	8	1
stmts	252:39	257:12	7	
water	252:39	0:0	8	{
for	253:16	256:16	8	(group = 0 ;group < ( int ) g_len;group ++ , cfo += 128)
forinit	253:21	253:30	9	group = 0 ;
water	253:21	0:0	10	group
op	253:27	0:0	10	=
water	253:29	0:0	10	0
water	253:30	0:0	10	;
cond	253:32	253:45	9	group < ( int ) g_len
water	253:32	0:0	10	group
op	253:38	0:0	10	<
water	253:40	0:0	10	(
water	253:41	0:0	10	int
water	253:44	0:0	10	)
water	253:45	0:0	10	g_len
forexpr	253:52	253:66	9	group ++ , cfo += 128
water	253:52	0:0	10	group
op	253:57	0:0	10	++
water	253:59	0:0	10	,
water	253:61	0:0	10	cfo
op	253:64	0:0	10	+=
water	253:66	0:0	10	128
stmts	253:71	256:16	9	
water	253:71	0:0	10	{
call	254:20	254:49	10	ac->vector_pow43
arg	254:37	254:40	11	cfo
water	254:37	0:0	12	cfo
arg	254:42	254:49	11	off_len
water	254:42	0:0	12	off_len
water	254:50	0:0	10	;
call	255:20	255:68	10	ac->subband_scale
arg	255:38	255:41	11	cfo
water	255:38	0:0	12	cfo
arg	255:43	255:46	11	cfo
water	255:43	0:0	12	cfo
arg	255:48	255:55	11	sf[idx]
water	255:48	0:0	12	sf
op	255:50	0:0	12	[
water	255:51	0:0	12	idx
op	255:54	0:0	12	]
arg	255:57	255:59	11	34
water	255:57	0:0	12	34
arg	255:61	255:68	11	off_len
water	255:61	0:0	12	off_len
water	255:69	0:0	10	;
water	256:16	0:0	10	}
water	257:12	0:0	8	}
water	258:8	0:0	6	}
water	259:8	0:0	4	coef
op	259:13	0:0	4	+=
water	259:16	0:0	4	g_len
op	259:22	0:0	4	<<
water	259:25	0:0	4	7
water	259:26	0:0	4	;
water	260:4	0:0	4	}
return	262:4	262:12	2	0
water	262:11	0:0	3	0
