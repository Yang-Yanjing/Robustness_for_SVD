func	1:0	83:0	0	static int	read_header
params	1:22	0:0	1	
param	1:23	1:41	2	AVFormatContext *	s
stmnts	0:0	82:12	1	
decl	3:4	3:34	2	WtvContext	*wtv
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:30	2	int	root_sector
water	4:19	0:0	2	,
decl	4:4	4:30	2	int	root_size
decl	5:4	5:33	2	uint8_t	root[WTV_SECTOR_SIZE]
decl	6:4	6:19	2	AVIOContext	*pb
decl	7:4	7:24	2	int64_t	timeline_pos
decl	8:4	8:15	2	int64_t	ret
water	9:4	0:0	2	wtv
op	9:7	0:0	2	->
water	9:9	0:0	2	epoch
op	9:24	0:0	2	=
water	10:4	0:0	2	wtv
op	10:7	0:0	2	->
water	10:9	0:0	2	pts
op	10:24	0:0	2	=
water	11:4	0:0	2	wtv
op	11:7	0:0	2	->
water	11:9	0:0	2	last_valid_pts
op	11:24	0:0	2	=
water	11:26	0:0	2	AV_NOPTS_VALUE
water	11:40	0:0	2	;
call	13:4	13:25	2	avio_skip
arg	13:14	13:19	3	s->pb
water	13:14	0:0	4	s
op	13:15	0:0	4	->
water	13:17	0:0	4	pb
arg	13:21	13:25	3	0x30
water	13:21	0:0	4	0
water	13:22	0:0	4	x30
water	13:26	0:0	2	;
water	14:4	0:0	2	root_size
op	14:14	0:0	2	=
call	14:16	14:31	2	avio_rl32
arg	14:26	14:31	3	s->pb
water	14:26	0:0	4	s
op	14:27	0:0	4	->
water	14:29	0:0	4	pb
water	14:32	0:0	2	;
if	15:4	18:4	2	(root_size > sizeof ( root ))
cond	15:8	15:31	3	root_size > sizeof ( root )
water	15:8	0:0	4	root_size
op	15:18	0:0	4	>
op	15:20	0:0	4	sizeof
water	15:26	0:0	4	(
water	15:27	0:0	4	root
water	15:31	0:0	4	)
stmts	15:34	18:4	3	
water	15:34	0:0	4	{
call	16:8	16:75	4	av_log
arg	16:15	16:16	5	s
water	16:15	0:0	6	s
arg	16:18	16:30	5	AV_LOG_ERROR
water	16:18	0:0	6	AV_LOG_ERROR
arg	16:32	16:75	5	"root directory size exceeds sector size\n"
water	16:32	0:0	6	"root directory size exceeds sector size\n"
water	16:76	0:0	4	;
return	17:8	17:34	4	AVERROR_INVALIDDATA
water	17:15	0:0	5	AVERROR_INVALIDDATA
water	18:4	0:0	4	}
call	19:4	19:22	2	avio_skip
arg	19:14	19:19	3	s->pb
water	19:14	0:0	4	s
op	19:15	0:0	4	->
water	19:17	0:0	4	pb
arg	19:21	19:22	3	4
water	19:21	0:0	4	4
water	19:23	0:0	2	;
water	20:4	0:0	2	root_sector
op	20:16	0:0	2	=
call	20:18	20:33	2	avio_rl32
arg	20:28	20:33	3	s->pb
water	20:28	0:0	4	s
op	20:29	0:0	4	->
water	20:31	0:0	4	pb
water	20:34	0:0	2	;
water	21:4	0:0	2	ret
op	21:8	0:0	2	=
call	21:10	21:46	2	seek_by_sector
arg	21:25	21:30	3	s->pb
water	21:25	0:0	4	s
op	21:26	0:0	4	->
water	21:28	0:0	4	pb
arg	21:32	21:43	3	root_sector
water	21:32	0:0	4	root_sector
arg	21:45	21:46	3	0
water	21:45	0:0	4	0
water	21:47	0:0	2	;
if	22:4	23:18	2	(ret < 0)
cond	22:8	22:14	3	ret < 0
water	22:8	0:0	4	ret
op	22:12	0:0	4	<
water	22:14	0:0	4	0
stmts	23:8	23:18	3	
return	23:8	23:18	4	ret
water	23:15	0:0	5	ret
water	24:4	0:0	2	root_size
op	24:14	0:0	2	=
call	24:16	24:48	2	avio_read
arg	24:26	24:31	3	s->pb
water	24:26	0:0	4	s
op	24:27	0:0	4	->
water	24:29	0:0	4	pb
arg	24:33	24:37	3	root
water	24:33	0:0	4	root
arg	24:39	24:48	3	root_size
water	24:39	0:0	4	root_size
water	24:49	0:0	2	;
if	25:4	26:34	2	(root_size < 0)
cond	25:8	25:20	3	root_size < 0
water	25:8	0:0	4	root_size
op	25:18	0:0	4	<
water	25:20	0:0	4	0
stmts	26:8	26:34	3	
return	26:8	26:34	4	AVERROR_INVALIDDATA
water	26:15	0:0	5	AVERROR_INVALIDDATA
water	28:4	0:0	2	wtv
op	28:7	0:0	2	->
water	28:9	0:0	2	pb
op	28:12	0:0	2	=
call	28:14	28:63	2	wtvfile_open
arg	28:27	28:28	3	s
water	28:27	0:0	4	s
arg	28:30	28:34	3	root
water	28:30	0:0	4	root
arg	28:36	28:45	3	root_size
water	28:36	0:0	4	root_size
arg	28:47	28:63	3	ff_timeline_le16
water	28:47	0:0	4	ff_timeline_le16
water	28:64	0:0	2	;
if	29:4	32:4	2	(! wtv -> pb)
cond	29:8	29:14	3	! wtv -> pb
op	29:8	0:0	4	!
water	29:9	0:0	4	wtv
op	29:12	0:0	4	->
water	29:14	0:0	4	pb
stmts	29:18	32:4	3	
water	29:18	0:0	4	{
call	30:8	30:57	4	av_log
arg	30:15	30:16	5	s
water	30:15	0:0	6	s
arg	30:18	30:30	5	AV_LOG_ERROR
water	30:18	0:0	6	AV_LOG_ERROR
arg	30:32	30:57	5	"timeline data missing\n"
water	30:32	0:0	6	"timeline data missing\n"
water	30:58	0:0	4	;
return	31:8	31:34	4	AVERROR_INVALIDDATA
water	31:15	0:0	5	AVERROR_INVALIDDATA
water	32:4	0:0	4	}
water	33:4	0:0	2	ret
op	33:8	0:0	2	=
call	33:10	33:44	2	parse_chunks
arg	33:23	33:24	3	s
water	33:23	0:0	4	s
arg	33:26	33:38	3	SEEK_TO_DATA
water	33:26	0:0	4	SEEK_TO_DATA
arg	33:40	33:41	3	0
water	33:40	0:0	4	0
arg	33:43	33:44	3	0
water	33:43	0:0	4	0
water	33:45	0:0	2	;
if	34:4	35:18	2	(ret < 0)
cond	34:8	34:14	3	ret < 0
water	34:8	0:0	4	ret
op	34:12	0:0	4	<
water	34:14	0:0	4	0
stmts	35:8	35:18	3	
return	35:8	35:18	4	ret
water	35:15	0:0	5	ret
call	36:4	36:36	2	avio_seek
arg	36:14	36:21	3	wtv->pb
water	36:14	0:0	4	wtv
op	36:17	0:0	4	->
water	36:19	0:0	4	pb
arg	36:23	36:26	3	-32
op	36:23	0:0	4	-
water	36:24	0:0	4	32
arg	36:28	36:36	3	SEEK_CUR
water	36:28	0:0	4	SEEK_CUR
water	36:37	0:0	2	;
water	37:4	0:0	2	timeline_pos
op	37:17	0:0	2	=
call	37:19	37:34	2	avio_tell
arg	37:29	37:34	3	s->pb
water	37:29	0:0	4	s
op	37:30	0:0	4	->
water	37:32	0:0	4	pb
water	37:35	0:0	2	;
water	39:4	0:0	2	pb
op	39:7	0:0	2	=
call	39:9	39:79	2	wtvfile_open
arg	39:22	39:23	3	s
water	39:22	0:0	4	s
arg	39:25	39:29	3	root
water	39:25	0:0	4	root
arg	39:31	39:40	3	root_size
water	39:31	0:0	4	root_size
arg	39:42	39:79	3	ff_table_0_entries_legacy_attrib_le16
water	39:42	0:0	4	ff_table_0_entries_legacy_attrib_le16
water	39:80	0:0	2	;
if	40:4	43:4	2	(pb)
cond	40:8	40:8	3	pb
water	40:8	0:0	4	pb
stmts	40:12	43:4	3	
water	40:12	0:0	4	{
call	41:8	41:33	4	parse_legacy_attrib
arg	41:28	41:29	5	s
water	41:28	0:0	6	s
arg	41:31	41:33	5	pb
water	41:31	0:0	6	pb
water	41:34	0:0	4	;
call	42:8	42:24	4	wtvfile_close
arg	42:22	42:24	5	pb
water	42:22	0:0	6	pb
water	42:25	0:0	4	;
water	43:4	0:0	4	}
if	45:4	80:4	2	(s -> nb_streams)
cond	45:8	45:11	3	s -> nb_streams
water	45:8	0:0	4	s
op	45:9	0:0	4	->
water	45:11	0:0	4	nb_streams
stmts	45:23	80:4	3	
water	45:23	0:0	4	{
decl	46:8	46:36	4	AVStream	*st
op	46:21	0:0	4	=
water	46:23	0:0	4	s
op	46:24	0:0	4	->
water	46:26	0:0	4	streams
op	46:33	0:0	4	[
water	46:34	0:0	4	0
op	46:35	0:0	4	]
water	47:8	0:0	4	pb
op	47:11	0:0	4	=
call	47:13	47:74	4	wtvfile_open
arg	47:26	47:27	5	s
water	47:26	0:0	6	s
arg	47:29	47:33	5	root
water	47:29	0:0	6	root
arg	47:35	47:44	5	root_size
water	47:35	0:0	6	root_size
arg	47:46	47:74	5	ff_table_0_entries_time_le16
water	47:46	0:0	6	ff_table_0_entries_time_le16
water	47:75	0:0	4	;
if	48:8	79:8	4	(pb)
cond	48:12	48:12	5	pb
water	48:12	0:0	6	pb
stmts	48:16	79:8	5	
water	48:16	0:0	6	{
while	49:12	56:12	6	(1)
cond	49:18	49:18	7	1
water	49:18	0:0	8	1
stmts	49:21	56:12	7	
water	49:21	0:0	8	{
decl	50:16	50:50	8	uint64_t	timestamp
op	50:35	0:0	8	=
call	50:37	50:49	9	avio_rl64
arg	50:47	50:49	10	pb
water	50:47	0:0	11	pb
decl	51:16	51:50	8	uint64_t	frame_nb
op	51:35	0:0	8	=
call	51:37	51:49	9	avio_rl64
arg	51:47	51:49	10	pb
water	51:47	0:0	11	pb
if	52:16	53:25	8	(avio_feof (pb ))
cond	52:20	52:32	9	avio_feof (pb )
call	52:20	52:32	10	avio_feof
arg	52:30	52:32	11	pb
water	52:30	0:0	12	pb
stmts	53:20	53:25	9	
break	53:20	53:25	10	
call	54:16	55:78	8	ff_add_index_entry
arg	54:35	54:54	9	&wtv->index_entries
op	54:35	0:0	10	&
water	54:36	0:0	10	wtv
op	54:39	0:0	10	->
water	54:41	0:0	10	index_entries
arg	54:56	54:78	9	&wtv->nb_index_entries
op	54:56	0:0	10	&
water	54:57	0:0	10	wtv
op	54:60	0:0	10	->
water	54:62	0:0	10	nb_index_entries
arg	54:80	54:114	9	&wtv->index_entries_allocated_size
op	54:80	0:0	10	&
water	54:81	0:0	10	wtv
op	54:84	0:0	10	->
water	54:86	0:0	10	index_entries_allocated_size
arg	55:35	55:36	9	0
water	55:35	0:0	10	0
arg	55:38	55:47	9	timestamp
water	55:38	0:0	10	timestamp
arg	55:49	55:57	9	frame_nb
water	55:49	0:0	10	frame_nb
arg	55:59	55:60	9	0
water	55:59	0:0	10	0
arg	55:62	55:78	9	AVINDEX_KEYFRAME
water	55:62	0:0	10	AVINDEX_KEYFRAME
water	55:79	0:0	8	;
water	56:12	0:0	8	}
call	57:12	57:28	6	wtvfile_close
arg	57:26	57:28	7	pb
water	57:26	0:0	8	pb
water	57:29	0:0	6	;
if	58:12	78:12	6	(wtv -> nb_index_entries)
cond	58:16	58:21	7	wtv -> nb_index_entries
water	58:16	0:0	8	wtv
op	58:19	0:0	8	->
water	58:21	0:0	8	nb_index_entries
stmts	58:39	78:12	7	
water	58:39	0:0	8	{
water	59:16	0:0	8	pb
op	59:19	0:0	8	=
call	59:21	59:93	8	wtvfile_open
arg	59:34	59:35	9	s
water	59:34	0:0	10	s
arg	59:37	59:41	9	root
water	59:37	0:0	10	root
arg	59:43	59:52	9	root_size
water	59:43	0:0	10	root_size
arg	59:54	59:93	9	ff_timeline_table_0_entries_Events_le16
water	59:54	0:0	10	ff_timeline_table_0_entries_Events_le16
water	59:94	0:0	8	;
if	60:16	77:16	8	(pb)
cond	60:20	60:20	9	pb
water	60:20	0:0	10	pb
stmts	60:24	77:16	9	
water	60:24	0:0	10	{
decl	61:20	61:25	10	int	i
while	62:20	74:20	10	(1)
cond	62:27	62:27	11	1
water	62:27	0:0	12	1
stmts	62:30	74:20	11	
water	62:30	0:0	12	{
decl	63:24	63:57	12	uint64_t	frame_nb
op	63:42	0:0	12	=
call	63:44	63:56	13	avio_rl64
arg	63:54	63:56	14	pb
water	63:54	0:0	15	pb
decl	64:24	64:57	12	uint64_t	position
op	64:42	0:0	12	=
call	64:44	64:56	13	avio_rl64
arg	64:54	64:56	14	pb
water	64:54	0:0	15	pb
if	65:24	66:33	12	(avio_feof (pb ))
cond	65:28	65:40	13	avio_feof (pb )
call	65:28	65:40	14	avio_feof
arg	65:38	65:40	15	pb
water	65:38	0:0	16	pb
stmts	66:28	66:33	13	
break	66:28	66:33	14	
for	67:24	73:24	12	(i = wtv -> nb_index_entries - 1 ;i >= 0;i --)
forinit	67:29	67:58	13	i = wtv -> nb_index_entries - 1 ;
water	67:29	0:0	14	i
op	67:31	0:0	14	=
water	67:33	0:0	14	wtv
op	67:36	0:0	14	->
water	67:38	0:0	14	nb_index_entries
op	67:55	0:0	14	-
water	67:57	0:0	14	1
water	67:58	0:0	14	;
cond	67:60	67:65	13	i >= 0
water	67:60	0:0	14	i
op	67:62	0:0	14	>=
water	67:65	0:0	14	0
forexpr	67:68	67:69	13	i --
water	67:68	0:0	14	i
op	67:69	0:0	14	--
stmts	67:73	73:24	13	
water	67:73	0:0	14	{
decl	68:28	68:68	14	AVIndexEntry	*e
op	68:44	0:0	14	=
water	68:46	0:0	14	wtv
op	68:49	0:0	14	->
water	68:51	0:0	14	index_entries
op	68:65	0:0	14	+
water	68:67	0:0	14	i
if	69:28	70:37	14	(frame_nb > e -> size)
cond	69:32	69:46	15	frame_nb > e -> size
water	69:32	0:0	16	frame_nb
op	69:41	0:0	16	>
water	69:43	0:0	16	e
op	69:44	0:0	16	->
water	69:46	0:0	16	size
stmts	70:32	70:37	15	
break	70:32	70:37	16	
if	71:28	72:49	14	(position > e -> pos)
cond	71:32	71:46	15	position > e -> pos
water	71:32	0:0	16	position
op	71:41	0:0	16	>
water	71:43	0:0	16	e
op	71:44	0:0	16	->
water	71:46	0:0	16	pos
stmts	72:32	72:49	15	
water	72:32	0:0	16	e
op	72:33	0:0	16	->
water	72:35	0:0	16	pos
op	72:39	0:0	16	=
water	72:41	0:0	16	position
water	72:49	0:0	16	;
water	73:24	0:0	14	}
water	74:20	0:0	12	}
call	75:20	75:36	10	wtvfile_close
arg	75:34	75:36	11	pb
water	75:34	0:0	12	pb
water	75:37	0:0	10	;
water	76:20	0:0	10	st
op	76:22	0:0	10	->
water	76:24	0:0	10	duration
op	76:33	0:0	10	=
water	76:35	0:0	10	wtv
op	76:38	0:0	10	->
water	76:40	0:0	10	index_entries
op	76:53	0:0	10	[
water	76:54	0:0	10	wtv
op	76:57	0:0	10	->
water	76:59	0:0	10	nb_index_entries
op	76:76	0:0	10	-
water	76:78	0:0	10	1
op	76:79	0:0	10	]
op	76:80	0:0	10	.
water	76:81	0:0	10	timestamp
water	76:90	0:0	10	;
water	77:16	0:0	10	}
water	78:12	0:0	8	}
water	79:8	0:0	6	}
water	80:4	0:0	4	}
call	81:4	81:43	2	avio_seek
arg	81:14	81:19	3	s->pb
water	81:14	0:0	4	s
op	81:15	0:0	4	->
water	81:17	0:0	4	pb
arg	81:21	81:33	3	timeline_pos
water	81:21	0:0	4	timeline_pos
arg	81:35	81:43	3	SEEK_SET
water	81:35	0:0	4	SEEK_SET
water	81:44	0:0	2	;
return	82:4	82:12	2	0
water	82:11	0:0	3	0
