func	1:0	154:0	0	static int	draw_text
params	1:20	0:0	1	
param	1:21	1:41	2	AVFilterContext *	ctx
param	1:43	1:57	2	AVFrame *	frame
param	2:21	2:30	2	int	width
param	2:32	2:42	2	int	height
stmnts	0:0	153:12	1	
decl	4:4	4:34	2	DrawTextContext	*s
op	4:23	0:0	2	=
water	4:25	0:0	2	ctx
op	4:28	0:0	2	->
water	4:30	0:0	2	priv
decl	5:4	5:41	2	AVFilterLink	*inlink
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	inputs
op	5:38	0:0	2	[
water	5:39	0:0	2	0
op	5:40	0:0	2	]
decl	6:4	6:36	2	uint32_t	code
op	6:18	0:0	2	=
water	6:20	0:0	2	0
water	6:21	0:0	2	,
decl	6:4	6:36	2	uint32_t	prev_code
op	6:33	0:0	2	=
water	6:35	0:0	2	0
decl	7:4	7:32	2	int	x
op	7:10	0:0	2	=
water	7:12	0:0	2	0
water	7:13	0:0	2	,
decl	7:4	7:32	2	int	y
op	7:17	0:0	2	=
water	7:19	0:0	2	0
water	7:20	0:0	2	,
decl	7:4	7:32	2	int	i
op	7:24	0:0	2	=
water	7:26	0:0	2	0
water	7:27	0:0	2	,
decl	7:4	7:32	2	int	ret
decl	8:4	8:32	2	int	max_text_line_w
op	8:24	0:0	2	=
water	8:26	0:0	2	0
water	8:27	0:0	2	,
decl	8:4	8:32	2	int	len
decl	9:4	9:20	2	int	box_w
water	9:13	0:0	2	,
decl	9:4	9:20	2	int	box_h
decl	10:4	10:14	2	char	*text
decl	11:4	11:14	2	uint8_t	*p
decl	12:4	12:37	2	int	y_min
op	12:14	0:0	2	=
water	12:16	0:0	2	32000
water	12:21	0:0	2	,
decl	12:4	12:37	2	int	y_max
op	12:29	0:0	2	=
op	12:31	0:0	2	-
water	12:32	0:0	2	32000
decl	13:4	13:37	2	int	x_min
op	13:14	0:0	2	=
water	13:16	0:0	2	32000
water	13:21	0:0	2	,
decl	13:4	13:37	2	int	x_max
op	13:29	0:0	2	=
op	13:31	0:0	2	-
water	13:32	0:0	2	32000
decl	14:4	14:19	2	FT_Vector	delta
decl	15:4	15:43	2	Glyph	*glyph
op	15:17	0:0	2	=
water	15:19	0:0	2	NULL
water	15:23	0:0	2	,
decl	15:4	15:43	2	Glyph	*prev_glyph
op	15:37	0:0	2	=
water	15:39	0:0	2	NULL
decl	16:4	16:23	2	Glyph	dummy
op	16:16	0:0	2	=
water	16:18	0:0	2	{
water	16:20	0:0	2	0
water	16:22	0:0	2	}
decl	17:4	17:24	2	time_t	now
op	17:15	0:0	2	=
call	17:17	17:23	3	time
arg	17:22	17:23	4	0
water	17:22	0:0	5	0
decl	18:4	18:19	2	struct tm	ltime
decl	19:4	19:36	2	AVBPrint	*bp
op	19:17	0:0	2	=
op	19:19	0:0	2	&
water	19:20	0:0	2	s
op	19:21	0:0	2	->
water	19:23	0:0	2	expanded_text
decl	20:4	20:25	2	FFDrawColor	fontcolor
decl	21:4	21:27	2	FFDrawColor	shadowcolor
decl	22:4	22:27	2	FFDrawColor	bordercolor
decl	23:4	23:24	2	FFDrawColor	boxcolor
call	24:4	24:22	2	av_bprint_clear
arg	24:20	24:22	3	bp
water	24:20	0:0	4	bp
water	24:23	0:0	2	;
if	25:4	26:79	2	(s -> basetime != AV_NOPTS_VALUE)
cond	25:7	25:22	3	s -> basetime != AV_NOPTS_VALUE
water	25:7	0:0	4	s
op	25:8	0:0	4	->
water	25:10	0:0	4	basetime
op	25:19	0:0	4	!=
water	25:22	0:0	4	AV_NOPTS_VALUE
stmts	26:8	26:79	3	
water	26:8	0:0	4	now
op	26:11	0:0	4	=
water	26:13	0:0	4	frame
op	26:18	0:0	4	->
water	26:20	0:0	4	pts
call	26:23	26:56	4	*av_q2d
arg	26:31	26:56	5	ctx->inputs[0]->time_base
water	26:31	0:0	6	ctx
op	26:34	0:0	6	->
water	26:36	0:0	6	inputs
op	26:42	0:0	6	[
water	26:43	0:0	6	0
op	26:44	0:0	6	]
op	26:45	0:0	6	->
water	26:47	0:0	6	time_base
op	26:58	0:0	4	+
water	26:60	0:0	4	s
op	26:61	0:0	4	->
water	26:63	0:0	4	basetime
op	26:71	0:0	4	/
water	26:72	0:0	4	1000000
water	26:79	0:0	4	;
switch	27:4	39:4	2	(s -> exp_mode)
cond	27:12	27:15	3	s -> exp_mode
water	27:12	0:0	4	s
op	27:13	0:0	4	->
water	27:15	0:0	4	exp_mode
stmts	27:25	39:4	3	
water	27:25	0:0	4	{
label	28:4	28:17	4	case EXP_NONE :
call	29:8	29:36	4	av_bprintf
arg	29:19	29:21	5	bp
water	29:19	0:0	6	bp
arg	29:23	29:27	5	"%s"
water	29:23	0:0	6	"%s"
arg	29:29	29:36	5	s->text
water	29:29	0:0	6	s
op	29:30	0:0	6	->
water	29:32	0:0	6	text
water	29:37	0:0	4	;
break	30:8	30:13	4	
label	31:4	31:19	4	case EXP_NORMAL :
if	32:8	33:22	4	(( ret =expand_text (ctx ,s -> text ,& s -> expanded_text ) ) < 0)
cond	32:12	32:67	5	( ret =expand_text (ctx ,s -> text ,& s -> expanded_text ) ) < 0
water	32:12	0:0	6	(
water	32:13	0:0	6	ret
op	32:17	0:0	6	=
call	32:19	32:62	6	expand_text
arg	32:31	32:34	7	ctx
water	32:31	0:0	8	ctx
arg	32:36	32:43	7	s->text
water	32:36	0:0	8	s
op	32:37	0:0	8	->
water	32:39	0:0	8	text
arg	32:45	32:62	7	&s->expanded_text
op	32:45	0:0	8	&
water	32:46	0:0	8	s
op	32:47	0:0	8	->
water	32:49	0:0	8	expanded_text
water	32:63	0:0	6	)
op	32:65	0:0	6	<
water	32:67	0:0	6	0
stmts	33:12	33:22	5	
return	33:12	33:22	6	ret
water	33:19	0:0	7	ret
break	34:8	34:13	4	
label	35:4	35:21	4	case EXP_STRFTIME :
call	36:8	36:32	4	localtime_r
arg	36:20	36:24	5	&now
op	36:20	0:0	6	&
water	36:21	0:0	6	now
arg	36:26	36:32	5	&ltime
op	36:26	0:0	6	&
water	36:27	0:0	6	ltime
water	36:33	0:0	4	;
call	37:8	37:46	4	av_bprint_strftime
arg	37:27	37:29	5	bp
water	37:27	0:0	6	bp
arg	37:31	37:38	5	s->text
water	37:31	0:0	6	s
op	37:32	0:0	6	->
water	37:34	0:0	6	text
arg	37:40	37:46	5	&ltime
op	37:40	0:0	6	&
water	37:41	0:0	6	ltime
water	37:47	0:0	4	;
break	38:8	38:13	4	
water	39:4	0:0	4	}
if	40:4	45:4	2	(s -> tc_opt_string)
cond	40:8	40:11	3	s -> tc_opt_string
water	40:8	0:0	4	s
op	40:9	0:0	4	->
water	40:11	0:0	4	tc_opt_string
stmts	40:26	45:4	3	
water	40:26	0:0	4	{
decl	41:8	41:40	4	char	tcbuf[AV_TIMECODE_STR_SIZE]
call	42:8	42:66	4	av_timecode_make_string
arg	42:32	42:38	5	&s->tc
op	42:32	0:0	6	&
water	42:33	0:0	6	s
op	42:34	0:0	6	->
water	42:36	0:0	6	tc
arg	42:40	42:45	5	tcbuf
water	42:40	0:0	6	tcbuf
arg	42:47	42:66	5	inlink->frame_count
water	42:47	0:0	6	inlink
op	42:53	0:0	6	->
water	42:55	0:0	6	frame_count
water	42:67	0:0	4	;
call	43:8	43:26	4	av_bprint_clear
arg	43:24	43:26	5	bp
water	43:24	0:0	6	bp
water	43:27	0:0	4	;
call	44:8	44:45	4	av_bprintf
arg	44:19	44:21	5	bp
water	44:19	0:0	6	bp
arg	44:23	44:29	5	"%s%s"
water	44:23	0:0	6	"%s%s"
arg	44:31	44:38	5	s->text
water	44:31	0:0	6	s
op	44:32	0:0	6	->
water	44:34	0:0	6	text
arg	44:40	44:45	5	tcbuf
water	44:40	0:0	6	tcbuf
water	44:46	0:0	4	;
water	45:4	0:0	4	}
if	46:4	47:30	2	(!av_bprint_is_complete (bp ))
cond	46:8	46:33	3	!av_bprint_is_complete (bp )
op	46:8	0:0	4	!
call	46:9	46:33	4	av_bprint_is_complete
arg	46:31	46:33	5	bp
water	46:31	0:0	6	bp
stmts	47:8	47:30	3	
return	47:8	47:30	4	AVERROR(ENOMEM)
call	47:15	47:29	5	AVERROR
arg	47:23	47:29	6	ENOMEM
water	47:23	0:0	7	ENOMEM
water	48:4	0:0	2	text
op	48:9	0:0	2	=
water	48:11	0:0	2	s
op	48:12	0:0	2	->
water	48:14	0:0	2	expanded_text
op	48:27	0:0	2	.
water	48:28	0:0	2	str
water	48:31	0:0	2	;
if	49:4	54:4	2	(( len = s -> expanded_text . len ) > s -> nb_positions)
cond	49:8	49:42	3	( len = s -> expanded_text . len ) > s -> nb_positions
water	49:8	0:0	4	(
water	49:9	0:0	4	len
op	49:13	0:0	4	=
water	49:15	0:0	4	s
op	49:16	0:0	4	->
water	49:18	0:0	4	expanded_text
op	49:31	0:0	4	.
water	49:32	0:0	4	len
water	49:35	0:0	4	)
op	49:37	0:0	4	>
water	49:39	0:0	4	s
op	49:40	0:0	4	->
water	49:42	0:0	4	nb_positions
stmts	49:56	54:4	3	
water	49:56	0:0	4	{
if	50:8	52:34	4	(! ( s -> positions =av_realloc (s -> positions ,len * sizeof ( * s -> positions ) ) ))
cond	50:12	51:65	5	! ( s -> positions =av_realloc (s -> positions ,len * sizeof ( * s -> positions ) ) )
op	50:12	0:0	6	!
water	50:13	0:0	6	(
water	50:14	0:0	6	s
op	50:15	0:0	6	->
water	50:17	0:0	6	positions
op	50:27	0:0	6	=
call	51:14	51:64	6	av_realloc
arg	51:25	51:37	7	s->positions
water	51:25	0:0	8	s
op	51:26	0:0	8	->
water	51:28	0:0	8	positions
arg	51:39	51:64	7	len*sizeof(*s->positions)
water	51:39	0:0	8	len
op	51:42	0:0	8	*
op	51:43	0:0	8	sizeof
water	51:49	0:0	8	(
op	51:50	0:0	8	*
water	51:51	0:0	8	s
op	51:52	0:0	8	->
water	51:54	0:0	8	positions
water	51:63	0:0	8	)
water	51:65	0:0	6	)
stmts	52:12	52:34	5	
return	52:12	52:34	6	AVERROR(ENOMEM)
call	52:19	52:33	7	AVERROR
arg	52:27	52:33	8	ENOMEM
water	52:27	0:0	9	ENOMEM
water	53:8	0:0	4	s
op	53:9	0:0	4	->
water	53:11	0:0	4	nb_positions
op	53:24	0:0	4	=
water	53:26	0:0	4	len
water	53:29	0:0	4	;
water	54:4	0:0	4	}
if	55:4	67:4	2	(s -> fontcolor_expr [ 0 ])
cond	55:8	55:27	3	s -> fontcolor_expr [ 0 ]
water	55:8	0:0	4	s
op	55:9	0:0	4	->
water	55:11	0:0	4	fontcolor_expr
op	55:25	0:0	4	[
water	55:26	0:0	4	0
op	55:27	0:0	4	]
stmts	55:30	67:4	3	
water	55:30	0:0	4	{
call	57:8	57:46	4	av_bprint_clear
arg	57:24	57:46	5	&s->expanded_fontcolor
op	57:24	0:0	6	&
water	57:25	0:0	6	s
op	57:26	0:0	6	->
water	57:28	0:0	6	expanded_fontcolor
water	57:47	0:0	4	;
if	58:8	59:22	4	(( ret =expand_text (ctx ,s -> fontcolor_expr ,& s -> expanded_fontcolor ) ) < 0)
cond	58:12	58:82	5	( ret =expand_text (ctx ,s -> fontcolor_expr ,& s -> expanded_fontcolor ) ) < 0
water	58:12	0:0	6	(
water	58:13	0:0	6	ret
op	58:17	0:0	6	=
call	58:19	58:77	6	expand_text
arg	58:31	58:34	7	ctx
water	58:31	0:0	8	ctx
arg	58:36	58:53	7	s->fontcolor_expr
water	58:36	0:0	8	s
op	58:37	0:0	8	->
water	58:39	0:0	8	fontcolor_expr
arg	58:55	58:77	7	&s->expanded_fontcolor
op	58:55	0:0	8	&
water	58:56	0:0	8	s
op	58:57	0:0	8	->
water	58:59	0:0	8	expanded_fontcolor
water	58:78	0:0	6	)
op	58:80	0:0	6	<
water	58:82	0:0	6	0
stmts	59:12	59:22	5	
return	59:12	59:22	6	ret
water	59:19	0:0	7	ret
if	60:8	61:34	4	(!av_bprint_is_complete (& s -> expanded_fontcolor ))
cond	60:12	60:57	5	!av_bprint_is_complete (& s -> expanded_fontcolor )
op	60:12	0:0	6	!
call	60:13	60:57	6	av_bprint_is_complete
arg	60:35	60:57	7	&s->expanded_fontcolor
op	60:35	0:0	8	&
water	60:36	0:0	8	s
op	60:37	0:0	8	->
water	60:39	0:0	8	expanded_fontcolor
stmts	61:12	61:34	5	
return	61:12	61:34	6	AVERROR(ENOMEM)
call	61:19	61:33	7	AVERROR
arg	61:27	61:33	8	ENOMEM
water	61:27	0:0	9	ENOMEM
call	62:8	62:90	4	av_log
arg	62:15	62:16	5	s
water	62:15	0:0	6	s
arg	62:18	62:30	5	AV_LOG_DEBUG
water	62:18	0:0	6	AV_LOG_DEBUG
arg	62:32	62:63	5	"Evaluated fontcolor is '%s'\n"
water	62:32	0:0	6	"Evaluated fontcolor is '%s'\n"
arg	62:65	62:90	5	s->expanded_fontcolor.str
water	62:65	0:0	6	s
op	62:66	0:0	6	->
water	62:68	0:0	6	expanded_fontcolor
op	62:86	0:0	6	.
water	62:87	0:0	6	str
water	62:91	0:0	4	;
water	63:8	0:0	4	ret
op	63:12	0:0	4	=
call	63:14	63:80	4	av_parse_color
arg	63:29	63:46	5	s->fontcolor.rgba
water	63:29	0:0	6	s
op	63:30	0:0	6	->
water	63:32	0:0	6	fontcolor
op	63:41	0:0	6	.
water	63:42	0:0	6	rgba
arg	63:48	63:73	5	s->expanded_fontcolor.str
water	63:48	0:0	6	s
op	63:49	0:0	6	->
water	63:51	0:0	6	expanded_fontcolor
op	63:69	0:0	6	.
water	63:70	0:0	6	str
arg	63:75	63:77	5	-1
op	63:75	0:0	6	-
water	63:76	0:0	6	1
arg	63:79	63:80	5	s
water	63:79	0:0	6	s
water	63:81	0:0	4	;
if	64:8	65:22	4	(ret)
cond	64:12	64:12	5	ret
water	64:12	0:0	6	ret
stmts	65:12	65:22	5	
return	65:12	65:22	6	ret
water	65:19	0:0	7	ret
call	66:8	66:62	4	ff_draw_color
arg	66:22	66:28	5	&s->dc
op	66:22	0:0	6	&
water	66:23	0:0	6	s
op	66:24	0:0	6	->
water	66:26	0:0	6	dc
arg	66:30	66:43	5	&s->fontcolor
op	66:30	0:0	6	&
water	66:31	0:0	6	s
op	66:32	0:0	6	->
water	66:34	0:0	6	fontcolor
arg	66:45	66:62	5	s->fontcolor.rgba
water	66:45	0:0	6	s
op	66:46	0:0	6	->
water	66:48	0:0	6	fontcolor
op	66:57	0:0	6	.
water	66:58	0:0	6	rgba
water	66:63	0:0	4	;
water	67:4	0:0	4	}
water	68:4	0:0	2	x
op	68:6	0:0	2	=
water	68:8	0:0	2	0
water	68:9	0:0	2	;
water	69:4	0:0	2	y
op	69:6	0:0	2	=
water	69:8	0:0	2	0
water	69:9	0:0	2	;
for	71:4	83:4	2	(i = 0 , p = text ;* p;i ++)
forinit	71:9	71:24	3	i = 0 , p = text ;
water	71:9	0:0	4	i
op	71:11	0:0	4	=
water	71:13	0:0	4	0
water	71:14	0:0	4	,
water	71:16	0:0	4	p
op	71:18	0:0	4	=
water	71:20	0:0	4	text
water	71:24	0:0	4	;
cond	71:26	71:27	3	* p
op	71:26	0:0	4	*
water	71:27	0:0	4	p
forexpr	71:30	71:31	3	i ++
water	71:30	0:0	4	i
op	71:31	0:0	4	++
stmts	71:35	83:4	3	
water	71:35	0:0	4	{
water	72:8	0:0	4	GET_UTF8
water	72:16	0:0	4	(
water	72:17	0:0	4	code
water	72:21	0:0	4	,
op	72:23	0:0	4	*
water	72:24	0:0	4	p
op	72:25	0:0	4	++
water	72:27	0:0	4	,
water	72:29	0:0	4	continue
water	72:37	0:0	4	;
water	72:38	0:0	4	)
water	72:39	0:0	4	;
water	74:8	0:0	4	dummy
op	74:13	0:0	4	.
water	74:14	0:0	4	code
op	74:19	0:0	4	=
water	74:21	0:0	4	code
water	74:25	0:0	4	;
water	75:8	0:0	4	glyph
op	75:14	0:0	4	=
call	75:16	75:63	4	av_tree_find
arg	75:29	75:38	5	s->glyphs
water	75:29	0:0	6	s
op	75:30	0:0	6	->
water	75:32	0:0	6	glyphs
arg	75:40	75:46	5	&dummy
op	75:40	0:0	6	&
water	75:41	0:0	6	dummy
arg	75:48	75:57	5	glyph_cmp
water	75:48	0:0	6	glyph_cmp
arg	75:59	75:63	5	NULL
water	75:59	0:0	6	NULL
water	75:64	0:0	4	;
if	76:8	78:8	4	(! glyph)
cond	76:12	76:13	5	! glyph
op	76:12	0:0	6	!
water	76:13	0:0	6	glyph
stmts	76:20	78:8	5	
water	76:20	0:0	6	{
call	77:12	77:40	6	load_glyph
arg	77:23	77:26	7	ctx
water	77:23	0:0	8	ctx
arg	77:28	77:34	7	&glyph
op	77:28	0:0	8	&
water	77:29	0:0	8	glyph
arg	77:36	77:40	7	code
water	77:36	0:0	8	code
water	77:41	0:0	6	;
water	78:8	0:0	6	}
water	79:8	0:0	4	y_min
op	79:14	0:0	4	=
call	79:16	79:45	4	FFMIN
arg	79:22	79:38	5	glyph->bbox.yMin
water	79:22	0:0	6	glyph
op	79:27	0:0	6	->
water	79:29	0:0	6	bbox
op	79:33	0:0	6	.
water	79:34	0:0	6	yMin
arg	79:40	79:45	5	y_min
water	79:40	0:0	6	y_min
water	79:46	0:0	4	;
water	80:8	0:0	4	y_max
op	80:14	0:0	4	=
call	80:16	80:45	4	FFMAX
arg	80:22	80:38	5	glyph->bbox.yMax
water	80:22	0:0	6	glyph
op	80:27	0:0	6	->
water	80:29	0:0	6	bbox
op	80:33	0:0	6	.
water	80:34	0:0	6	yMax
arg	80:40	80:45	5	y_max
water	80:40	0:0	6	y_max
water	80:46	0:0	4	;
water	81:8	0:0	4	x_min
op	81:14	0:0	4	=
call	81:16	81:45	4	FFMIN
arg	81:22	81:38	5	glyph->bbox.xMin
water	81:22	0:0	6	glyph
op	81:27	0:0	6	->
water	81:29	0:0	6	bbox
op	81:33	0:0	6	.
water	81:34	0:0	6	xMin
arg	81:40	81:45	5	x_min
water	81:40	0:0	6	x_min
water	81:46	0:0	4	;
water	82:8	0:0	4	x_max
op	82:14	0:0	4	=
call	82:16	82:45	4	FFMAX
arg	82:22	82:38	5	glyph->bbox.xMax
water	82:22	0:0	6	glyph
op	82:27	0:0	6	->
water	82:29	0:0	6	bbox
op	82:33	0:0	6	.
water	82:34	0:0	6	xMax
arg	82:40	82:45	5	x_max
water	82:40	0:0	6	x_max
water	82:46	0:0	4	;
water	83:4	0:0	4	}
water	84:4	0:0	2	s
op	84:5	0:0	2	->
water	84:7	0:0	2	max_glyph_h
op	84:19	0:0	2	=
water	84:21	0:0	2	y_max
op	84:27	0:0	2	-
water	84:29	0:0	2	y_min
water	84:34	0:0	2	;
water	85:4	0:0	2	s
op	85:5	0:0	2	->
water	85:7	0:0	2	max_glyph_w
op	85:19	0:0	2	=
water	85:21	0:0	2	x_max
op	85:27	0:0	2	-
water	85:29	0:0	2	x_min
water	85:34	0:0	2	;
water	87:4	0:0	2	glyph
op	87:10	0:0	2	=
water	87:12	0:0	2	NULL
water	87:16	0:0	2	;
for	88:4	115:4	2	(i = 0 , p = text ;* p;i ++)
forinit	88:9	88:24	3	i = 0 , p = text ;
water	88:9	0:0	4	i
op	88:11	0:0	4	=
water	88:13	0:0	4	0
water	88:14	0:0	4	,
water	88:16	0:0	4	p
op	88:18	0:0	4	=
water	88:20	0:0	4	text
water	88:24	0:0	4	;
cond	88:26	88:27	3	* p
op	88:26	0:0	4	*
water	88:27	0:0	4	p
forexpr	88:30	88:31	3	i ++
water	88:30	0:0	4	i
op	88:31	0:0	4	++
stmts	88:35	115:4	3	
water	88:35	0:0	4	{
water	89:8	0:0	4	GET_UTF8
water	89:16	0:0	4	(
water	89:17	0:0	4	code
water	89:21	0:0	4	,
op	89:23	0:0	4	*
water	89:24	0:0	4	p
op	89:25	0:0	4	++
water	89:27	0:0	4	,
water	89:29	0:0	4	continue
water	89:37	0:0	4	;
water	89:38	0:0	4	)
water	89:39	0:0	4	;
if	91:8	92:20	4	(prev_code == '\r' && code == '\n')
cond	91:12	91:41	5	prev_code == '\r' && code == '\n'
water	91:12	0:0	6	prev_code
op	91:22	0:0	6	==
water	91:25	0:0	6	'\r'
op	91:30	0:0	6	&&
water	91:33	0:0	6	code
op	91:38	0:0	6	==
water	91:41	0:0	6	'\n'
stmts	92:12	92:20	5	
continue	92:12	92:20	6	
water	93:8	0:0	4	prev_code
op	93:18	0:0	4	=
water	93:20	0:0	4	code
water	93:24	0:0	4	;
if	94:8	99:8	4	(is_newline (code ))
cond	94:12	94:27	5	is_newline (code )
call	94:12	94:27	6	is_newline
arg	94:23	94:27	7	code
water	94:23	0:0	8	code
stmts	94:30	99:8	5	
water	94:30	0:0	6	{
water	95:12	0:0	6	max_text_line_w
op	95:28	0:0	6	=
call	95:30	95:54	6	FFMAX
arg	95:36	95:51	7	max_text_line_w
water	95:36	0:0	8	max_text_line_w
arg	95:53	95:54	7	x
water	95:53	0:0	8	x
water	95:55	0:0	6	;
water	96:12	0:0	6	y
op	96:14	0:0	6	+=
water	96:17	0:0	6	s
op	96:18	0:0	6	->
water	96:20	0:0	6	max_glyph_h
water	96:31	0:0	6	;
water	97:12	0:0	6	x
op	97:14	0:0	6	=
water	97:16	0:0	6	0
water	97:17	0:0	6	;
continue	98:12	98:20	6	
water	99:8	0:0	6	}
water	101:8	0:0	4	prev_glyph
op	101:19	0:0	4	=
water	101:21	0:0	4	glyph
water	101:26	0:0	4	;
water	102:8	0:0	4	dummy
op	102:13	0:0	4	.
water	102:14	0:0	4	code
op	102:19	0:0	4	=
water	102:21	0:0	4	code
water	102:25	0:0	4	;
water	103:8	0:0	4	glyph
op	103:14	0:0	4	=
call	103:16	103:63	4	av_tree_find
arg	103:29	103:38	5	s->glyphs
water	103:29	0:0	6	s
op	103:30	0:0	6	->
water	103:32	0:0	6	glyphs
arg	103:40	103:46	5	&dummy
op	103:40	0:0	6	&
water	103:41	0:0	6	dummy
arg	103:48	103:57	5	glyph_cmp
water	103:48	0:0	6	glyph_cmp
arg	103:59	103:63	5	NULL
water	103:59	0:0	6	NULL
water	103:64	0:0	4	;
if	105:8	109:8	4	(s -> use_kerning && prev_glyph && glyph -> code)
cond	105:12	105:51	5	s -> use_kerning && prev_glyph && glyph -> code
water	105:12	0:0	6	s
op	105:13	0:0	6	->
water	105:15	0:0	6	use_kerning
op	105:27	0:0	6	&&
water	105:30	0:0	6	prev_glyph
op	105:41	0:0	6	&&
water	105:44	0:0	6	glyph
op	105:49	0:0	6	->
water	105:51	0:0	6	code
stmts	105:57	109:8	5	
water	105:57	0:0	6	{
call	106:12	107:53	6	FT_Get_Kerning
arg	106:27	106:34	7	s->face
water	106:27	0:0	8	s
op	106:28	0:0	8	->
water	106:30	0:0	8	face
arg	106:36	106:52	7	prev_glyph->code
water	106:36	0:0	8	prev_glyph
op	106:46	0:0	8	->
water	106:48	0:0	8	code
arg	106:54	106:65	7	glyph->code
water	106:54	0:0	8	glyph
op	106:59	0:0	8	->
water	106:61	0:0	8	code
arg	107:27	107:45	7	ft_kerning_default
water	107:27	0:0	8	ft_kerning_default
arg	107:47	107:53	7	&delta
op	107:47	0:0	8	&
water	107:48	0:0	8	delta
water	107:54	0:0	6	;
water	108:12	0:0	6	x
op	108:14	0:0	6	+=
water	108:17	0:0	6	delta
op	108:22	0:0	6	.
water	108:23	0:0	6	x
op	108:25	0:0	6	>>
water	108:28	0:0	6	6
water	108:29	0:0	6	;
water	109:8	0:0	6	}
water	111:8	0:0	4	s
op	111:9	0:0	4	->
water	111:11	0:0	4	positions
op	111:20	0:0	4	[
water	111:21	0:0	4	i
op	111:22	0:0	4	]
op	111:23	0:0	4	.
water	111:24	0:0	4	x
op	111:26	0:0	4	=
water	111:28	0:0	4	x
op	111:30	0:0	4	+
water	111:32	0:0	4	glyph
op	111:37	0:0	4	->
water	111:39	0:0	4	bitmap_left
water	111:50	0:0	4	;
water	112:8	0:0	4	s
op	112:9	0:0	4	->
water	112:11	0:0	4	positions
op	112:20	0:0	4	[
water	112:21	0:0	4	i
op	112:22	0:0	4	]
op	112:23	0:0	4	.
water	112:24	0:0	4	y
op	112:26	0:0	4	=
water	112:28	0:0	4	y
op	112:30	0:0	4	-
water	112:32	0:0	4	glyph
op	112:37	0:0	4	->
water	112:39	0:0	4	bitmap_top
op	112:50	0:0	4	+
water	112:52	0:0	4	y_max
water	112:57	0:0	4	;
if	113:8	113:62	4	(code == '\t')
cond	113:12	113:20	5	code == '\t'
water	113:12	0:0	6	code
op	113:17	0:0	6	==
water	113:20	0:0	6	'\t'
stmts	113:26	113:62	5	
water	113:26	0:0	6	x
op	113:29	0:0	6	=
water	113:31	0:0	6	(
water	113:32	0:0	6	x
op	113:34	0:0	6	/
water	113:36	0:0	6	s
op	113:37	0:0	6	->
water	113:39	0:0	6	tabsize
op	113:47	0:0	6	+
water	113:49	0:0	6	1
water	113:50	0:0	6	)
op	113:51	0:0	6	*
water	113:52	0:0	6	s
op	113:53	0:0	6	->
water	113:55	0:0	6	tabsize
water	113:62	0:0	6	;
else	114:8	114:45	4
stmts	114:26	114:45	5	
water	114:26	0:0	6	x
op	114:28	0:0	6	+=
water	114:31	0:0	6	glyph
op	114:36	0:0	6	->
water	114:38	0:0	6	advance
water	114:45	0:0	6	;
water	115:4	0:0	4	}
water	116:4	0:0	2	max_text_line_w
op	116:20	0:0	2	=
call	116:22	116:46	2	FFMAX
arg	116:28	116:29	3	x
water	116:28	0:0	4	x
arg	116:31	116:46	3	max_text_line_w
water	116:31	0:0	4	max_text_line_w
water	116:47	0:0	2	;
water	117:4	0:0	2	s
op	117:5	0:0	2	->
water	117:7	0:0	2	var_values
op	117:17	0:0	2	[
water	117:18	0:0	2	VAR_TW
op	117:24	0:0	2	]
op	117:26	0:0	2	=
water	117:28	0:0	2	s
op	117:29	0:0	2	->
water	117:31	0:0	2	var_values
op	117:41	0:0	2	[
water	117:42	0:0	2	VAR_TEXT_W
op	117:52	0:0	2	]
op	117:54	0:0	2	=
water	117:56	0:0	2	max_text_line_w
water	117:71	0:0	2	;
water	118:4	0:0	2	s
op	118:5	0:0	2	->
water	118:7	0:0	2	var_values
op	118:17	0:0	2	[
water	118:18	0:0	2	VAR_TH
op	118:24	0:0	2	]
op	118:26	0:0	2	=
water	118:28	0:0	2	s
op	118:29	0:0	2	->
water	118:31	0:0	2	var_values
op	118:41	0:0	2	[
water	118:42	0:0	2	VAR_TEXT_H
op	118:52	0:0	2	]
op	118:54	0:0	2	=
water	118:56	0:0	2	y
op	118:58	0:0	2	+
water	118:60	0:0	2	s
op	118:61	0:0	2	->
water	118:63	0:0	2	max_glyph_h
water	118:74	0:0	2	;
water	119:4	0:0	2	s
op	119:5	0:0	2	->
water	119:7	0:0	2	var_values
op	119:17	0:0	2	[
water	119:18	0:0	2	VAR_MAX_GLYPH_W
op	119:33	0:0	2	]
op	119:35	0:0	2	=
water	119:37	0:0	2	s
op	119:38	0:0	2	->
water	119:40	0:0	2	max_glyph_w
water	119:51	0:0	2	;
water	120:4	0:0	2	s
op	120:5	0:0	2	->
water	120:7	0:0	2	var_values
op	120:17	0:0	2	[
water	120:18	0:0	2	VAR_MAX_GLYPH_H
op	120:33	0:0	2	]
op	120:35	0:0	2	=
water	120:37	0:0	2	s
op	120:38	0:0	2	->
water	120:40	0:0	2	max_glyph_h
water	120:51	0:0	2	;
water	121:4	0:0	2	s
op	121:5	0:0	2	->
water	121:7	0:0	2	var_values
op	121:17	0:0	2	[
water	121:18	0:0	2	VAR_MAX_GLYPH_A
op	121:33	0:0	2	]
op	121:35	0:0	2	=
water	121:37	0:0	2	s
op	121:38	0:0	2	->
water	121:40	0:0	2	var_values
op	121:50	0:0	2	[
water	121:51	0:0	2	VAR_ASCENT
op	121:62	0:0	2	]
op	121:64	0:0	2	=
water	121:66	0:0	2	y_max
water	121:71	0:0	2	;
water	122:4	0:0	2	s
op	122:5	0:0	2	->
water	122:7	0:0	2	var_values
op	122:17	0:0	2	[
water	122:18	0:0	2	VAR_MAX_GLYPH_D
op	122:33	0:0	2	]
op	122:35	0:0	2	=
water	122:37	0:0	2	s
op	122:38	0:0	2	->
water	122:40	0:0	2	var_values
op	122:50	0:0	2	[
water	122:51	0:0	2	VAR_DESCENT
op	122:62	0:0	2	]
op	122:64	0:0	2	=
water	122:66	0:0	2	y_min
water	122:71	0:0	2	;
water	123:4	0:0	2	s
op	123:5	0:0	2	->
water	123:7	0:0	2	var_values
op	123:17	0:0	2	[
water	123:18	0:0	2	VAR_LINE_H
op	123:28	0:0	2	]
op	123:30	0:0	2	=
water	123:32	0:0	2	s
op	123:33	0:0	2	->
water	123:35	0:0	2	var_values
op	123:45	0:0	2	[
water	123:46	0:0	2	VAR_LH
op	123:52	0:0	2	]
op	123:54	0:0	2	=
water	123:56	0:0	2	s
op	123:57	0:0	2	->
water	123:59	0:0	2	max_glyph_h
water	123:70	0:0	2	;
water	124:4	0:0	2	s
op	124:5	0:0	2	->
water	124:7	0:0	2	x
op	124:9	0:0	2	=
water	124:11	0:0	2	s
op	124:12	0:0	2	->
water	124:14	0:0	2	var_values
op	124:24	0:0	2	[
water	124:25	0:0	2	VAR_X
op	124:30	0:0	2	]
op	124:32	0:0	2	=
call	124:34	124:82	2	av_expr_eval
arg	124:47	124:57	3	s->x_pexpr
water	124:47	0:0	4	s
op	124:48	0:0	4	->
water	124:50	0:0	4	x_pexpr
arg	124:59	124:72	3	s->var_values
water	124:59	0:0	4	s
op	124:60	0:0	4	->
water	124:62	0:0	4	var_values
arg	124:74	124:82	3	&s->prng
op	124:74	0:0	4	&
water	124:75	0:0	4	s
op	124:76	0:0	4	->
water	124:78	0:0	4	prng
water	124:83	0:0	2	;
water	125:4	0:0	2	s
op	125:5	0:0	2	->
water	125:7	0:0	2	y
op	125:9	0:0	2	=
water	125:11	0:0	2	s
op	125:12	0:0	2	->
water	125:14	0:0	2	var_values
op	125:24	0:0	2	[
water	125:25	0:0	2	VAR_Y
op	125:30	0:0	2	]
op	125:32	0:0	2	=
call	125:34	125:82	2	av_expr_eval
arg	125:47	125:57	3	s->y_pexpr
water	125:47	0:0	4	s
op	125:48	0:0	4	->
water	125:50	0:0	4	y_pexpr
arg	125:59	125:72	3	s->var_values
water	125:59	0:0	4	s
op	125:60	0:0	4	->
water	125:62	0:0	4	var_values
arg	125:74	125:82	3	&s->prng
op	125:74	0:0	4	&
water	125:75	0:0	4	s
op	125:76	0:0	4	->
water	125:78	0:0	4	prng
water	125:83	0:0	2	;
water	126:4	0:0	2	s
op	126:5	0:0	2	->
water	126:7	0:0	2	x
op	126:9	0:0	2	=
water	126:11	0:0	2	s
op	126:12	0:0	2	->
water	126:14	0:0	2	var_values
op	126:24	0:0	2	[
water	126:25	0:0	2	VAR_X
op	126:30	0:0	2	]
op	126:32	0:0	2	=
call	126:34	126:82	2	av_expr_eval
arg	126:47	126:57	3	s->x_pexpr
water	126:47	0:0	4	s
op	126:48	0:0	4	->
water	126:50	0:0	4	x_pexpr
arg	126:59	126:72	3	s->var_values
water	126:59	0:0	4	s
op	126:60	0:0	4	->
water	126:62	0:0	4	var_values
arg	126:74	126:82	3	&s->prng
op	126:74	0:0	4	&
water	126:75	0:0	4	s
op	126:76	0:0	4	->
water	126:78	0:0	4	prng
water	126:83	0:0	2	;
call	127:4	127:18	2	update_alpha
arg	127:17	127:18	3	s
water	127:17	0:0	4	s
water	127:19	0:0	2	;
call	128:4	128:59	2	update_color_with_alpha
arg	128:28	128:29	3	s
water	128:28	0:0	4	s
arg	128:31	128:43	3	&fontcolor
op	128:31	0:0	4	&
water	128:32	0:0	4	fontcolor
arg	128:45	128:59	3	s->fontcolor
water	128:45	0:0	4	s
op	128:46	0:0	4	->
water	128:48	0:0	4	fontcolor
water	128:60	0:0	2	;
call	129:4	129:59	2	update_color_with_alpha
arg	129:28	129:29	3	s
water	129:28	0:0	4	s
arg	129:31	129:43	3	&shadowcolor
op	129:31	0:0	4	&
water	129:32	0:0	4	shadowcolor
arg	129:45	129:59	3	s->shadowcolor
water	129:45	0:0	4	s
op	129:46	0:0	4	->
water	129:48	0:0	4	shadowcolor
water	129:60	0:0	2	;
call	130:4	130:59	2	update_color_with_alpha
arg	130:28	130:29	3	s
water	130:28	0:0	4	s
arg	130:31	130:43	3	&bordercolor
op	130:31	0:0	4	&
water	130:32	0:0	4	bordercolor
arg	130:45	130:59	3	s->bordercolor
water	130:45	0:0	4	s
op	130:46	0:0	4	->
water	130:48	0:0	4	bordercolor
water	130:60	0:0	2	;
call	131:4	131:59	2	update_color_with_alpha
arg	131:28	131:29	3	s
water	131:28	0:0	4	s
arg	131:31	131:43	3	&boxcolor
op	131:31	0:0	4	&
water	131:32	0:0	4	boxcolor
arg	131:45	131:59	3	s->boxcolor
water	131:45	0:0	4	s
op	131:46	0:0	4	->
water	131:48	0:0	4	boxcolor
water	131:60	0:0	2	;
water	132:4	0:0	2	box_w
op	132:10	0:0	2	=
call	132:12	132:45	2	FFMIN
arg	132:18	132:28	3	width-1
water	132:18	0:0	4	width
op	132:24	0:0	4	-
water	132:26	0:0	4	1
arg	132:30	132:45	3	max_text_line_w
water	132:30	0:0	4	max_text_line_w
water	132:46	0:0	2	;
water	133:4	0:0	2	box_h
op	133:10	0:0	2	=
call	133:12	133:48	2	FFMIN
arg	133:18	133:28	3	height-1
water	133:18	0:0	4	height
op	133:25	0:0	4	-
water	133:27	0:0	4	1
arg	133:30	133:48	3	y+s->max_glyph_h
water	133:30	0:0	4	y
op	133:32	0:0	4	+
water	133:34	0:0	4	s
op	133:35	0:0	4	->
water	133:37	0:0	4	max_glyph_h
water	133:49	0:0	2	;
if	135:4	139:80	2	(s -> draw_box)
cond	135:8	135:11	3	s -> draw_box
water	135:8	0:0	4	s
op	135:9	0:0	4	->
water	135:11	0:0	4	draw_box
stmts	136:8	139:80	3	
call	136:8	139:79	4	ff_blend_rectangle
arg	136:27	136:33	5	&s->dc
op	136:27	0:0	6	&
water	136:28	0:0	6	s
op	136:29	0:0	6	->
water	136:31	0:0	6	dc
arg	136:35	136:44	5	&boxcolor
op	136:35	0:0	6	&
water	136:36	0:0	6	boxcolor
arg	137:27	137:38	5	frame->data
water	137:27	0:0	6	frame
op	137:32	0:0	6	->
water	137:34	0:0	6	data
arg	137:40	137:55	5	frame->linesize
water	137:40	0:0	6	frame
op	137:45	0:0	6	->
water	137:47	0:0	6	linesize
arg	137:57	137:62	5	width
water	137:57	0:0	6	width
arg	137:64	137:70	5	height
water	137:64	0:0	6	height
arg	138:27	138:47	5	s->x-s->boxborderw
water	138:27	0:0	6	s
op	138:28	0:0	6	->
water	138:30	0:0	6	x
op	138:32	0:0	6	-
water	138:34	0:0	6	s
op	138:35	0:0	6	->
water	138:37	0:0	6	boxborderw
arg	138:49	138:69	5	s->y-s->boxborderw
water	138:49	0:0	6	s
op	138:50	0:0	6	->
water	138:52	0:0	6	y
op	138:54	0:0	6	-
water	138:56	0:0	6	s
op	138:57	0:0	6	->
water	138:59	0:0	6	boxborderw
arg	139:27	139:52	5	box_w+s->boxborderw*2
water	139:27	0:0	6	box_w
op	139:33	0:0	6	+
water	139:35	0:0	6	s
op	139:36	0:0	6	->
water	139:38	0:0	6	boxborderw
op	139:49	0:0	6	*
water	139:51	0:0	6	2
arg	139:54	139:79	5	box_h+s->boxborderw*2
water	139:54	0:0	6	box_h
op	139:60	0:0	6	+
water	139:62	0:0	6	s
op	139:63	0:0	6	->
water	139:65	0:0	6	boxborderw
op	139:76	0:0	6	*
water	139:78	0:0	6	2
water	139:80	0:0	4	;
if	140:4	144:4	2	(s -> shadowx || s -> shadowy)
cond	140:8	140:25	3	s -> shadowx || s -> shadowy
water	140:8	0:0	4	s
op	140:9	0:0	4	->
water	140:11	0:0	4	shadowx
op	140:19	0:0	4	||
water	140:22	0:0	4	s
op	140:23	0:0	4	->
water	140:25	0:0	4	shadowy
stmts	140:34	144:4	3	
water	140:34	0:0	4	{
if	141:8	143:22	4	(( ret =draw_glyphs (s ,frame ,width ,height ,& shadowcolor ,s -> shadowx ,s -> shadowy ,0 ) ) < 0)
cond	141:12	142:75	5	( ret =draw_glyphs (s ,frame ,width ,height ,& shadowcolor ,s -> shadowx ,s -> shadowy ,0 ) ) < 0
water	141:12	0:0	6	(
water	141:13	0:0	6	ret
op	141:17	0:0	6	=
call	141:19	142:70	6	draw_glyphs
arg	141:31	141:32	7	s
water	141:31	0:0	8	s
arg	141:34	141:39	7	frame
water	141:34	0:0	8	frame
arg	141:41	141:46	7	width
water	141:41	0:0	8	width
arg	141:48	141:54	7	height
water	141:48	0:0	8	height
arg	142:31	142:43	7	&shadowcolor
op	142:31	0:0	8	&
water	142:32	0:0	8	shadowcolor
arg	142:45	142:55	7	s->shadowx
water	142:45	0:0	8	s
op	142:46	0:0	8	->
water	142:48	0:0	8	shadowx
arg	142:57	142:67	7	s->shadowy
water	142:57	0:0	8	s
op	142:58	0:0	8	->
water	142:60	0:0	8	shadowy
arg	142:69	142:70	7	0
water	142:69	0:0	8	0
water	142:71	0:0	6	)
op	142:73	0:0	6	<
water	142:75	0:0	6	0
stmts	143:12	143:22	5	
return	143:12	143:22	6	ret
water	143:19	0:0	7	ret
water	144:4	0:0	4	}
if	145:4	149:4	2	(s -> borderw)
cond	145:8	145:11	3	s -> borderw
water	145:8	0:0	4	s
op	145:9	0:0	4	->
water	145:11	0:0	4	borderw
stmts	145:20	149:4	3	
water	145:20	0:0	4	{
if	146:8	148:22	4	(( ret =draw_glyphs (s ,frame ,width ,height ,& bordercolor ,0 ,0 ,s -> borderw ) ) < 0)
cond	146:12	147:66	5	( ret =draw_glyphs (s ,frame ,width ,height ,& bordercolor ,0 ,0 ,s -> borderw ) ) < 0
water	146:12	0:0	6	(
water	146:13	0:0	6	ret
op	146:17	0:0	6	=
call	146:19	147:61	6	draw_glyphs
arg	146:31	146:32	7	s
water	146:31	0:0	8	s
arg	146:34	146:39	7	frame
water	146:34	0:0	8	frame
arg	146:41	146:46	7	width
water	146:41	0:0	8	width
arg	146:48	146:54	7	height
water	146:48	0:0	8	height
arg	147:31	147:43	7	&bordercolor
op	147:31	0:0	8	&
water	147:32	0:0	8	bordercolor
arg	147:45	147:46	7	0
water	147:45	0:0	8	0
arg	147:48	147:49	7	0
water	147:48	0:0	8	0
arg	147:51	147:61	7	s->borderw
water	147:51	0:0	8	s
op	147:52	0:0	8	->
water	147:54	0:0	8	borderw
water	147:62	0:0	6	)
op	147:64	0:0	6	<
water	147:66	0:0	6	0
stmts	148:12	148:22	5	
return	148:12	148:22	6	ret
water	148:19	0:0	7	ret
water	149:4	0:0	4	}
if	150:4	152:18	2	(( ret =draw_glyphs (s ,frame ,width ,height ,& fontcolor ,0 ,0 ,0 ) ) < 0)
cond	150:8	151:51	3	( ret =draw_glyphs (s ,frame ,width ,height ,& fontcolor ,0 ,0 ,0 ) ) < 0
water	150:8	0:0	4	(
water	150:9	0:0	4	ret
op	150:13	0:0	4	=
call	150:15	151:46	4	draw_glyphs
arg	150:27	150:28	5	s
water	150:27	0:0	6	s
arg	150:30	150:35	5	frame
water	150:30	0:0	6	frame
arg	150:37	150:42	5	width
water	150:37	0:0	6	width
arg	150:44	150:50	5	height
water	150:44	0:0	6	height
arg	151:27	151:37	5	&fontcolor
op	151:27	0:0	6	&
water	151:28	0:0	6	fontcolor
arg	151:39	151:40	5	0
water	151:39	0:0	6	0
arg	151:42	151:43	5	0
water	151:42	0:0	6	0
arg	151:45	151:46	5	0
water	151:45	0:0	6	0
water	151:47	0:0	4	)
op	151:49	0:0	4	<
water	151:51	0:0	4	0
stmts	152:8	152:18	3	
return	152:8	152:18	4	ret
water	152:15	0:0	5	ret
return	153:4	153:12	2	0
water	153:11	0:0	3	0
