func	1:0	93:0	0	static int	config_output
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	92:12	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:41	2	AVFilterLink	*inlink
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	inputs
op	4:38	0:0	2	[
water	4:39	0:0	2	0
op	4:40	0:0	2	]
decl	5:4	5:38	2	ShowSpectrumContext	*s
op	5:27	0:0	2	=
water	5:29	0:0	2	ctx
op	5:32	0:0	2	->
water	5:34	0:0	2	priv
decl	6:4	6:33	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:33	2	int	rdft_bits
water	6:20	0:0	2	,
decl	6:4	6:33	2	int	win_size
water	6:30	0:0	2	,
decl	6:4	6:33	2	int	h
water	7:4	0:0	2	outlink
op	7:11	0:0	2	->
water	7:13	0:0	2	w
op	7:15	0:0	2	=
water	7:17	0:0	2	s
op	7:18	0:0	2	->
water	7:20	0:0	2	w
water	7:21	0:0	2	;
water	8:4	0:0	2	outlink
op	8:11	0:0	2	->
water	8:13	0:0	2	h
op	8:15	0:0	2	=
water	8:17	0:0	2	s
op	8:18	0:0	2	->
water	8:20	0:0	2	h
water	8:21	0:0	2	;
water	9:4	0:0	2	h
op	9:6	0:0	2	=
water	9:8	0:0	2	(
water	9:9	0:0	2	s
op	9:10	0:0	2	->
water	9:12	0:0	2	mode
op	9:17	0:0	2	==
water	9:20	0:0	2	COMBINED
water	9:28	0:0	2	)
water	9:30	0:0	2	?
water	9:32	0:0	2	outlink
op	9:39	0:0	2	->
water	9:41	0:0	2	h
water	9:43	0:0	2	:
water	9:45	0:0	2	outlink
op	9:52	0:0	2	->
water	9:54	0:0	2	h
op	9:56	0:0	2	/
water	9:58	0:0	2	inlink
op	9:64	0:0	2	->
water	9:66	0:0	2	channels
water	9:74	0:0	2	;
water	10:4	0:0	2	s
op	10:5	0:0	2	->
water	10:7	0:0	2	channel_height
op	10:22	0:0	2	=
water	10:24	0:0	2	h
water	10:25	0:0	2	;
for	12:4	12:60	2	(rdft_bits = 1 ;1 << rdft_bits < 2 * h;rdft_bits ++)
forinit	12:9	12:22	3	rdft_bits = 1 ;
water	12:9	0:0	4	rdft_bits
op	12:19	0:0	4	=
water	12:21	0:0	4	1
water	12:22	0:0	4	;
cond	12:24	12:45	3	1 << rdft_bits < 2 * h
water	12:24	0:0	4	1
op	12:26	0:0	4	<<
water	12:29	0:0	4	rdft_bits
op	12:39	0:0	4	<
water	12:41	0:0	4	2
op	12:43	0:0	4	*
water	12:45	0:0	4	h
forexpr	12:48	12:57	3	rdft_bits ++
water	12:48	0:0	4	rdft_bits
op	12:57	0:0	4	++
stmts	12:60	12:60	3	
water	12:60	0:0	4	;
water	13:4	0:0	2	win_size
op	13:13	0:0	2	=
water	13:15	0:0	2	1
op	13:17	0:0	2	<<
water	13:20	0:0	2	rdft_bits
water	13:29	0:0	2	;
if	15:4	79:4	2	(rdft_bits != s -> rdft_bits)
cond	15:8	15:24	3	rdft_bits != s -> rdft_bits
water	15:8	0:0	4	rdft_bits
op	15:18	0:0	4	!=
water	15:21	0:0	4	s
op	15:22	0:0	4	->
water	15:24	0:0	4	rdft_bits
stmts	15:35	79:4	3	
water	15:35	0:0	4	{
decl	16:8	16:26	4	AVFrame	*outpicref
call	17:8	17:27	4	av_rdft_end
arg	17:20	17:27	5	s->rdft
water	17:20	0:0	6	s
op	17:21	0:0	6	->
water	17:23	0:0	6	rdft
water	17:28	0:0	4	;
water	18:8	0:0	4	s
op	18:9	0:0	4	->
water	18:11	0:0	4	rdft
op	18:16	0:0	4	=
call	18:18	18:49	4	av_rdft_init
arg	18:31	18:40	5	rdft_bits
water	18:31	0:0	6	rdft_bits
arg	18:42	18:49	5	DFT_R2C
water	18:42	0:0	6	DFT_R2C
water	18:50	0:0	4	;
if	19:8	23:8	4	(! s -> rdft)
cond	19:12	19:16	5	! s -> rdft
op	19:12	0:0	6	!
water	19:13	0:0	6	s
op	19:14	0:0	6	->
water	19:16	0:0	6	rdft
stmts	19:22	23:8	5	
water	19:22	0:0	6	{
call	20:12	21:57	6	av_log
arg	20:19	20:22	7	ctx
water	20:19	0:0	8	ctx
arg	20:24	20:36	7	AV_LOG_ERROR
water	20:24	0:0	8	AV_LOG_ERROR
arg	20:38	21:57	7	"Unable to create RDFT context. ""The window size might be too high.\n"
water	20:38	0:0	8	"Unable to create RDFT context. "
water	21:19	0:0	8	"The window size might be too high.\n"
water	21:58	0:0	6	;
return	22:12	22:34	6	AVERROR(EINVAL)
call	22:19	22:33	7	AVERROR
arg	22:27	22:33	8	EINVAL
water	22:27	0:0	9	EINVAL
water	23:8	0:0	6	}
water	24:8	0:0	4	s
op	24:9	0:0	4	->
water	24:11	0:0	4	rdft_bits
op	24:21	0:0	4	=
water	24:23	0:0	4	rdft_bits
water	24:32	0:0	4	;
for	28:8	29:38	4	(i = 0 ;i < s -> nb_display_channels;i ++)
forinit	28:13	28:18	5	i = 0 ;
water	28:13	0:0	6	i
op	28:15	0:0	6	=
water	28:17	0:0	6	0
water	28:18	0:0	6	;
cond	28:20	28:27	5	i < s -> nb_display_channels
water	28:20	0:0	6	i
op	28:22	0:0	6	<
water	28:24	0:0	6	s
op	28:25	0:0	6	->
water	28:27	0:0	6	nb_display_channels
forexpr	28:48	28:49	5	i ++
water	28:48	0:0	6	i
op	28:49	0:0	6	++
stmts	29:12	29:38	5	
call	29:12	29:37	6	av_freep
arg	29:21	29:37	7	&s->rdft_data[i]
op	29:21	0:0	8	&
water	29:22	0:0	8	s
op	29:23	0:0	8	->
water	29:25	0:0	8	rdft_data
op	29:34	0:0	8	[
water	29:35	0:0	8	i
op	29:36	0:0	8	]
water	29:38	0:0	6	;
call	30:8	30:30	4	av_freep
arg	30:17	30:30	5	&s->rdft_data
op	30:17	0:0	6	&
water	30:18	0:0	6	s
op	30:19	0:0	6	->
water	30:21	0:0	6	rdft_data
water	30:31	0:0	4	;
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	nb_display_channels
op	31:31	0:0	4	=
water	31:33	0:0	4	inlink
op	31:39	0:0	4	->
water	31:41	0:0	4	channels
water	31:49	0:0	4	;
water	32:8	0:0	4	s
op	32:9	0:0	4	->
water	32:11	0:0	4	rdft_data
op	32:21	0:0	4	=
call	32:23	32:78	4	av_calloc
arg	32:33	32:55	5	s->nb_display_channels
water	32:33	0:0	6	s
op	32:34	0:0	6	->
water	32:36	0:0	6	nb_display_channels
arg	32:57	32:78	5	sizeof(*s->rdft_data)
op	32:57	0:0	6	sizeof
water	32:63	0:0	6	(
op	32:64	0:0	6	*
water	32:65	0:0	6	s
op	32:66	0:0	6	->
water	32:68	0:0	6	rdft_data
water	32:77	0:0	6	)
water	32:79	0:0	4	;
if	33:8	34:34	4	(! s -> rdft_data)
cond	33:12	33:16	5	! s -> rdft_data
op	33:12	0:0	6	!
water	33:13	0:0	6	s
op	33:14	0:0	6	->
water	33:16	0:0	6	rdft_data
stmts	34:12	34:34	5	
return	34:12	34:34	6	AVERROR(ENOMEM)
call	34:19	34:33	7	AVERROR
arg	34:27	34:33	8	ENOMEM
water	34:27	0:0	9	ENOMEM
for	35:8	39:8	4	(i = 0 ;i < s -> nb_display_channels;i ++)
forinit	35:13	35:18	5	i = 0 ;
water	35:13	0:0	6	i
op	35:15	0:0	6	=
water	35:17	0:0	6	0
water	35:18	0:0	6	;
cond	35:20	35:27	5	i < s -> nb_display_channels
water	35:20	0:0	6	i
op	35:22	0:0	6	<
water	35:24	0:0	6	s
op	35:25	0:0	6	->
water	35:27	0:0	6	nb_display_channels
forexpr	35:48	35:49	5	i ++
water	35:48	0:0	6	i
op	35:49	0:0	6	++
stmts	35:53	39:8	5	
water	35:53	0:0	6	{
water	36:12	0:0	6	s
op	36:13	0:0	6	->
water	36:15	0:0	6	rdft_data
op	36:24	0:0	6	[
water	36:25	0:0	6	i
op	36:26	0:0	6	]
op	36:28	0:0	6	=
call	36:30	36:72	6	av_calloc
arg	36:40	36:48	7	win_size
water	36:40	0:0	8	win_size
arg	36:50	36:72	7	sizeof(**s->rdft_data)
op	36:50	0:0	8	sizeof
water	36:56	0:0	8	(
op	36:57	0:0	8	*
op	36:58	0:0	8	*
water	36:59	0:0	8	s
op	36:60	0:0	8	->
water	36:62	0:0	8	rdft_data
water	36:71	0:0	8	)
water	36:73	0:0	6	;
if	37:12	38:38	6	(! s -> rdft_data [ i ])
cond	37:16	37:31	7	! s -> rdft_data [ i ]
op	37:16	0:0	8	!
water	37:17	0:0	8	s
op	37:18	0:0	8	->
water	37:20	0:0	8	rdft_data
op	37:29	0:0	8	[
water	37:30	0:0	8	i
op	37:31	0:0	8	]
stmts	38:16	38:38	7	
return	38:16	38:38	8	AVERROR(ENOMEM)
call	38:23	38:37	9	AVERROR
arg	38:31	38:37	10	ENOMEM
water	38:31	0:0	11	ENOMEM
water	39:8	0:0	6	}
water	41:8	0:0	4	s
op	41:9	0:0	4	->
water	41:11	0:0	4	window_func_lut
op	41:27	0:0	4	=
call	42:12	43:52	4	av_realloc_f
arg	42:25	42:43	5	s->window_func_lut
water	42:25	0:0	6	s
op	42:26	0:0	6	->
water	42:28	0:0	6	window_func_lut
arg	42:45	42:53	5	win_size
water	42:45	0:0	6	win_size
arg	43:25	43:52	5	sizeof(*s->window_func_lut)
op	43:25	0:0	6	sizeof
water	43:31	0:0	6	(
op	43:32	0:0	6	*
water	43:33	0:0	6	s
op	43:34	0:0	6	->
water	43:36	0:0	6	window_func_lut
water	43:51	0:0	6	)
water	43:53	0:0	4	;
if	44:8	45:34	4	(! s -> window_func_lut)
cond	44:12	44:16	5	! s -> window_func_lut
op	44:12	0:0	6	!
water	44:13	0:0	6	s
op	44:14	0:0	6	->
water	44:16	0:0	6	window_func_lut
stmts	45:12	45:34	5	
return	45:12	45:34	6	AVERROR(ENOMEM)
call	45:19	45:33	7	AVERROR
arg	45:27	45:33	8	ENOMEM
water	45:27	0:0	9	ENOMEM
switch	46:8	66:8	4	(s -> win_func)
cond	46:16	46:19	5	s -> win_func
water	46:16	0:0	6	s
op	46:17	0:0	6	->
water	46:19	0:0	6	win_func
stmts	46:29	66:8	5	
water	46:29	0:0	6	{
label	47:8	47:23	6	case WFUNC_NONE :
for	48:12	49:42	6	(i = 0 ;i < win_size;i ++)
forinit	48:17	48:22	7	i = 0 ;
water	48:17	0:0	8	i
op	48:19	0:0	8	=
water	48:21	0:0	8	0
water	48:22	0:0	8	;
cond	48:24	48:28	7	i < win_size
water	48:24	0:0	8	i
op	48:26	0:0	8	<
water	48:28	0:0	8	win_size
forexpr	48:38	48:39	7	i ++
water	48:38	0:0	8	i
op	48:39	0:0	8	++
stmts	49:16	49:42	7	
water	49:16	0:0	8	s
op	49:17	0:0	8	->
water	49:19	0:0	8	window_func_lut
op	49:34	0:0	8	[
water	49:35	0:0	8	i
op	49:36	0:0	8	]
op	49:38	0:0	8	=
water	49:40	0:0	8	1
op	49:41	0:0	8	.
water	49:42	0:0	8	;
break	50:12	50:17	6	
label	51:8	51:23	6	case WFUNC_HANN :
for	52:12	53:80	6	(i = 0 ;i < win_size;i ++)
forinit	52:17	52:22	7	i = 0 ;
water	52:17	0:0	8	i
op	52:19	0:0	8	=
water	52:21	0:0	8	0
water	52:22	0:0	8	;
cond	52:24	52:28	7	i < win_size
water	52:24	0:0	8	i
op	52:26	0:0	8	<
water	52:28	0:0	8	win_size
forexpr	52:38	52:39	7	i ++
water	52:38	0:0	8	i
op	52:39	0:0	8	++
stmts	53:16	53:80	7	
water	53:16	0:0	8	s
op	53:17	0:0	8	->
water	53:19	0:0	8	window_func_lut
op	53:34	0:0	8	[
water	53:35	0:0	8	i
op	53:36	0:0	8	]
op	53:38	0:0	8	=
op	53:40	0:0	8	.
water	53:41	0:0	8	5
water	53:42	0:0	8	f
op	53:44	0:0	8	*
water	53:46	0:0	8	(
water	53:47	0:0	8	1
op	53:49	0:0	8	-
call	53:51	53:78	8	cos
arg	53:55	53:78	9	2*M_PI*i/(win_size-1)
water	53:55	0:0	10	2
op	53:56	0:0	10	*
water	53:57	0:0	10	M_PI
op	53:61	0:0	10	*
water	53:62	0:0	10	i
op	53:64	0:0	10	/
water	53:66	0:0	10	(
water	53:67	0:0	10	win_size
op	53:75	0:0	10	-
water	53:76	0:0	10	1
water	53:77	0:0	10	)
water	53:79	0:0	8	)
water	53:80	0:0	8	;
break	54:12	54:17	6	
label	55:8	55:26	6	case WFUNC_HAMMING :
for	56:12	57:82	6	(i = 0 ;i < win_size;i ++)
forinit	56:17	56:22	7	i = 0 ;
water	56:17	0:0	8	i
op	56:19	0:0	8	=
water	56:21	0:0	8	0
water	56:22	0:0	8	;
cond	56:24	56:28	7	i < win_size
water	56:24	0:0	8	i
op	56:26	0:0	8	<
water	56:28	0:0	8	win_size
forexpr	56:38	56:39	7	i ++
water	56:38	0:0	8	i
op	56:39	0:0	8	++
stmts	57:16	57:82	7	
water	57:16	0:0	8	s
op	57:17	0:0	8	->
water	57:19	0:0	8	window_func_lut
op	57:34	0:0	8	[
water	57:35	0:0	8	i
op	57:36	0:0	8	]
op	57:38	0:0	8	=
op	57:40	0:0	8	.
water	57:41	0:0	8	54
water	57:43	0:0	8	f
op	57:45	0:0	8	-
op	57:47	0:0	8	.
water	57:48	0:0	8	46
water	57:50	0:0	8	f
call	57:52	57:81	8	*cos
arg	57:58	57:81	9	2*M_PI*i/(win_size-1)
water	57:58	0:0	10	2
op	57:59	0:0	10	*
water	57:60	0:0	10	M_PI
op	57:64	0:0	10	*
water	57:65	0:0	10	i
op	57:67	0:0	10	/
water	57:69	0:0	10	(
water	57:70	0:0	10	win_size
op	57:78	0:0	10	-
water	57:79	0:0	10	1
water	57:80	0:0	10	)
water	57:82	0:0	8	;
break	58:12	58:17	6	
label	59:8	59:27	6	case WFUNC_BLACKMAN :
water	59:29	0:0	6	{
for	60:12	61:115	6	(i = 0 ;i < win_size;i ++)
forinit	60:17	60:22	7	i = 0 ;
water	60:17	0:0	8	i
op	60:19	0:0	8	=
water	60:21	0:0	8	0
water	60:22	0:0	8	;
cond	60:24	60:28	7	i < win_size
water	60:24	0:0	8	i
op	60:26	0:0	8	<
water	60:28	0:0	8	win_size
forexpr	60:38	60:39	7	i ++
water	60:38	0:0	8	i
op	60:39	0:0	8	++
stmts	61:16	61:115	7	
water	61:16	0:0	8	s
op	61:17	0:0	8	->
water	61:19	0:0	8	window_func_lut
op	61:34	0:0	8	[
water	61:35	0:0	8	i
op	61:36	0:0	8	]
op	61:38	0:0	8	=
op	61:40	0:0	8	.
water	61:41	0:0	8	42
water	61:43	0:0	8	f
op	61:45	0:0	8	-
op	61:47	0:0	8	.
water	61:48	0:0	8	5
water	61:49	0:0	8	f
call	61:50	61:78	8	*cos
arg	61:55	61:78	9	2*M_PI*i/(win_size-1)
water	61:55	0:0	10	2
op	61:56	0:0	10	*
water	61:57	0:0	10	M_PI
op	61:61	0:0	10	*
water	61:62	0:0	10	i
op	61:64	0:0	10	/
water	61:66	0:0	10	(
water	61:67	0:0	10	win_size
op	61:75	0:0	10	-
water	61:76	0:0	10	1
water	61:77	0:0	10	)
op	61:80	0:0	8	+
op	61:82	0:0	8	.
water	61:83	0:0	8	08
water	61:85	0:0	8	f
call	61:86	61:114	8	*cos
arg	61:91	61:114	9	4*M_PI*i/(win_size-1)
water	61:91	0:0	10	4
op	61:92	0:0	10	*
water	61:93	0:0	10	M_PI
op	61:97	0:0	10	*
water	61:98	0:0	10	i
op	61:100	0:0	10	/
water	61:102	0:0	10	(
water	61:103	0:0	10	win_size
op	61:111	0:0	10	-
water	61:112	0:0	10	1
water	61:113	0:0	10	)
water	61:115	0:0	8	;
break	62:12	62:17	6	
water	63:8	0:0	6	}
label	64:8	64:15	6	default :
call	65:12	65:24	6	av_assert0
arg	65:23	65:24	7	0
water	65:23	0:0	8	0
water	65:25	0:0	6	;
water	66:8	0:0	6	}
call	68:8	68:35	4	av_frame_free
arg	68:22	68:35	5	&s->outpicref
op	68:22	0:0	6	&
water	68:23	0:0	6	s
op	68:24	0:0	6	->
water	68:26	0:0	6	outpicref
water	68:36	0:0	4	;
water	69:8	0:0	4	s
op	69:9	0:0	4	->
water	69:11	0:0	4	outpicref
op	69:21	0:0	4	=
water	69:23	0:0	4	outpicref
op	69:33	0:0	4	=
call	70:12	70:63	4	ff_get_video_buffer
arg	70:32	70:39	5	outlink
water	70:32	0:0	6	outlink
arg	70:41	70:51	5	outlink->w
water	70:41	0:0	6	outlink
op	70:48	0:0	6	->
water	70:50	0:0	6	w
arg	70:53	70:63	5	outlink->h
water	70:53	0:0	6	outlink
op	70:60	0:0	6	->
water	70:62	0:0	6	h
water	70:64	0:0	4	;
if	71:8	72:34	4	(! outpicref)
cond	71:12	71:13	5	! outpicref
op	71:12	0:0	6	!
water	71:13	0:0	6	outpicref
stmts	72:12	72:34	5	
return	72:12	72:34	6	AVERROR(ENOMEM)
call	72:19	72:33	7	AVERROR
arg	72:27	72:33	8	ENOMEM
water	72:27	0:0	9	ENOMEM
water	73:8	0:0	4	outlink
op	73:15	0:0	4	->
water	73:17	0:0	4	sample_aspect_ratio
op	73:37	0:0	4	=
water	73:39	0:0	4	(
water	73:40	0:0	4	AVRational
water	73:50	0:0	4	)
water	73:51	0:0	4	{
water	73:52	0:0	4	1
water	73:53	0:0	4	,
water	73:54	0:0	4	1
water	73:55	0:0	4	}
water	73:56	0:0	4	;
for	74:8	78:8	4	(i = 0 ;i < outlink -> h;i ++)
forinit	74:13	74:18	5	i = 0 ;
water	74:13	0:0	6	i
op	74:15	0:0	6	=
water	74:17	0:0	6	0
water	74:18	0:0	6	;
cond	74:20	74:33	5	i < outlink -> h
water	74:20	0:0	6	i
op	74:22	0:0	6	<
water	74:24	0:0	6	outlink
op	74:31	0:0	6	->
water	74:33	0:0	6	h
forexpr	74:36	74:37	5	i ++
water	74:36	0:0	6	i
op	74:37	0:0	6	++
stmts	74:41	78:8	5	
water	74:41	0:0	6	{
call	75:12	75:83	6	memset
arg	75:19	75:66	7	outpicref->data[0]+i*outpicref->linesize[0]
water	75:19	0:0	8	outpicref
op	75:28	0:0	8	->
water	75:30	0:0	8	data
op	75:34	0:0	8	[
water	75:35	0:0	8	0
op	75:36	0:0	8	]
op	75:38	0:0	8	+
water	75:40	0:0	8	i
op	75:42	0:0	8	*
water	75:44	0:0	8	outpicref
op	75:53	0:0	8	->
water	75:55	0:0	8	linesize
op	75:63	0:0	8	[
water	75:64	0:0	8	0
op	75:65	0:0	8	]
arg	75:70	75:71	7	0
water	75:70	0:0	8	0
arg	75:73	75:83	7	outlink->w
water	75:73	0:0	8	outlink
op	75:80	0:0	8	->
water	75:82	0:0	8	w
water	75:84	0:0	6	;
call	76:12	76:83	6	memset
arg	76:19	76:66	7	outpicref->data[1]+i*outpicref->linesize[1]
water	76:19	0:0	8	outpicref
op	76:28	0:0	8	->
water	76:30	0:0	8	data
op	76:34	0:0	8	[
water	76:35	0:0	8	1
op	76:36	0:0	8	]
op	76:38	0:0	8	+
water	76:40	0:0	8	i
op	76:42	0:0	8	*
water	76:44	0:0	8	outpicref
op	76:53	0:0	8	->
water	76:55	0:0	8	linesize
op	76:63	0:0	8	[
water	76:64	0:0	8	1
op	76:65	0:0	8	]
arg	76:68	76:71	7	128
water	76:68	0:0	8	128
arg	76:73	76:83	7	outlink->w
water	76:73	0:0	8	outlink
op	76:80	0:0	8	->
water	76:82	0:0	8	w
water	76:84	0:0	6	;
call	77:12	77:83	6	memset
arg	77:19	77:66	7	outpicref->data[2]+i*outpicref->linesize[2]
water	77:19	0:0	8	outpicref
op	77:28	0:0	8	->
water	77:30	0:0	8	data
op	77:34	0:0	8	[
water	77:35	0:0	8	2
op	77:36	0:0	8	]
op	77:38	0:0	8	+
water	77:40	0:0	8	i
op	77:42	0:0	8	*
water	77:44	0:0	8	outpicref
op	77:53	0:0	8	->
water	77:55	0:0	8	linesize
op	77:63	0:0	8	[
water	77:64	0:0	8	2
op	77:65	0:0	8	]
arg	77:68	77:71	7	128
water	77:68	0:0	8	128
arg	77:73	77:83	7	outlink->w
water	77:73	0:0	8	outlink
op	77:80	0:0	8	->
water	77:82	0:0	8	w
water	77:84	0:0	6	;
water	78:8	0:0	6	}
water	79:4	0:0	4	}
if	80:4	81:19	2	(s -> xpos >= outlink -> w)
cond	80:8	80:28	3	s -> xpos >= outlink -> w
water	80:8	0:0	4	s
op	80:9	0:0	4	->
water	80:11	0:0	4	xpos
op	80:16	0:0	4	>=
water	80:19	0:0	4	outlink
op	80:26	0:0	4	->
water	80:28	0:0	4	w
stmts	81:8	81:19	3	
water	81:8	0:0	4	s
op	81:9	0:0	4	->
water	81:11	0:0	4	xpos
op	81:16	0:0	4	=
water	81:18	0:0	4	0
water	81:19	0:0	4	;
water	82:4	0:0	2	outlink
op	82:11	0:0	2	->
water	82:13	0:0	2	frame_rate
op	82:24	0:0	2	=
call	82:26	82:65	2	av_make_q
arg	82:36	82:55	3	inlink->sample_rate
water	82:36	0:0	4	inlink
op	82:42	0:0	4	->
water	82:44	0:0	4	sample_rate
arg	82:57	82:65	3	win_size
water	82:57	0:0	4	win_size
water	82:66	0:0	2	;
if	83:4	84:45	2	(s -> sliding == FULLFRAME)
cond	83:8	83:22	3	s -> sliding == FULLFRAME
water	83:8	0:0	4	s
op	83:9	0:0	4	->
water	83:11	0:0	4	sliding
op	83:19	0:0	4	==
water	83:22	0:0	4	FULLFRAME
stmts	84:8	84:45	3	
water	84:8	0:0	4	outlink
op	84:15	0:0	4	->
water	84:17	0:0	4	frame_rate
op	84:27	0:0	4	.
water	84:28	0:0	4	den
op	84:32	0:0	4	*=
water	84:35	0:0	4	outlink
op	84:42	0:0	4	->
water	84:44	0:0	4	w
water	84:45	0:0	4	;
water	85:4	0:0	2	inlink
op	85:10	0:0	2	->
water	85:12	0:0	2	min_samples
op	85:24	0:0	2	=
water	85:26	0:0	2	inlink
op	85:32	0:0	2	->
water	85:34	0:0	2	max_samples
op	85:46	0:0	2	=
water	85:48	0:0	2	inlink
op	85:54	0:0	2	->
water	85:56	0:0	2	partial_buf_size
op	85:73	0:0	2	=
water	86:8	0:0	2	win_size
water	86:16	0:0	2	;
water	87:4	0:0	2	s
op	87:5	0:0	2	->
water	87:7	0:0	2	combine_buffer
op	87:22	0:0	2	=
call	88:8	89:47	2	av_realloc_f
arg	88:21	88:38	3	s->combine_buffer
water	88:21	0:0	4	s
op	88:22	0:0	4	->
water	88:24	0:0	4	combine_buffer
arg	88:40	88:54	3	outlink->h*3
water	88:40	0:0	4	outlink
op	88:47	0:0	4	->
water	88:49	0:0	4	h
op	88:51	0:0	4	*
water	88:53	0:0	4	3
arg	89:21	89:47	3	sizeof(*s->combine_buffer)
op	89:21	0:0	4	sizeof
water	89:27	0:0	4	(
op	89:28	0:0	4	*
water	89:29	0:0	4	s
op	89:30	0:0	4	->
water	89:32	0:0	4	combine_buffer
water	89:46	0:0	4	)
water	89:48	0:0	2	;
call	90:4	91:31	2	av_log
arg	90:11	90:14	3	ctx
water	90:11	0:0	4	ctx
arg	90:16	90:30	3	AV_LOG_VERBOSE
water	90:16	0:0	4	AV_LOG_VERBOSE
arg	90:32	90:63	3	"s:%dx%d RDFT window size:%d\n"
water	90:32	0:0	4	"s:%dx%d RDFT window size:%d\n"
arg	91:11	91:15	3	s->w
water	91:11	0:0	4	s
op	91:12	0:0	4	->
water	91:14	0:0	4	w
arg	91:17	91:21	3	s->h
water	91:17	0:0	4	s
op	91:18	0:0	4	->
water	91:20	0:0	4	h
arg	91:23	91:31	3	win_size
water	91:23	0:0	4	win_size
water	91:32	0:0	2	;
return	92:4	92:12	2	0
water	92:11	0:0	3	0
