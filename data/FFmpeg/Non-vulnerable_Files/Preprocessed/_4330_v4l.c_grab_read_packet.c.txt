func	1:0	34:0	0	static int	grab_read_packet
params	1:27	0:0	1	
param	1:28	1:47	2	AVFormatContext *	s1
param	1:49	1:62	2	AVPacket *	pkt
stmnts	0:0	33:4	1	
decl	3:4	3:32	2	VideoData	*s
op	3:17	0:0	2	=
water	3:19	0:0	2	s1
op	3:21	0:0	2	->
water	3:23	0:0	2	priv_data
decl	4:4	4:26	2	int64_t	curtime
water	4:19	0:0	2	,
decl	4:4	4:26	2	int64_t	delay
decl	5:4	5:22	2	struct timespec	ts
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	time_frame
op	7:18	0:0	2	+=
call	7:21	7:36	2	INT64_C
arg	7:29	7:36	3	1000000
water	7:29	0:0	4	1000000
water	7:37	0:0	2	;
for	9:4	22:4	2	(;;)
forinit	9:8	9:8	3	;
water	9:8	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	9:12	22:4	3	
water	9:12	0:0	4	{
water	10:8	0:0	4	curtime
op	10:16	0:0	4	=
call	10:18	10:29	4	av_gettime
water	10:30	0:0	4	;
water	11:8	0:0	4	delay
op	11:14	0:0	4	=
water	11:16	0:0	4	s
op	11:17	0:0	4	->
water	11:19	0:0	4	time_frame
op	11:30	0:0	4	*
water	11:32	0:0	4	s
op	11:33	0:0	4	->
water	11:35	0:0	4	time_base
op	11:44	0:0	4	.
water	11:45	0:0	4	num
op	11:49	0:0	4	/
water	11:51	0:0	4	s
op	11:52	0:0	4	->
water	11:54	0:0	4	time_base
op	11:63	0:0	4	.
water	11:64	0:0	4	den
op	11:68	0:0	4	-
water	11:70	0:0	4	curtime
water	11:77	0:0	4	;
if	12:8	18:8	4	(delay <= 0)
cond	12:12	12:21	5	delay <= 0
water	12:12	0:0	6	delay
op	12:18	0:0	6	<=
water	12:21	0:0	6	0
stmts	12:24	18:8	5	
water	12:24	0:0	6	{
if	13:12	16:12	6	(delay <INT64_C (- 1000000 ) * s -> time_base . num / s -> time_base . den)
cond	13:16	13:76	7	delay <INT64_C (- 1000000 ) * s -> time_base . num / s -> time_base . den
water	13:16	0:0	8	delay
op	13:22	0:0	8	<
call	13:24	13:40	8	INT64_C
arg	13:32	13:40	9	-1000000
op	13:32	0:0	10	-
water	13:33	0:0	10	1000000
op	13:42	0:0	8	*
water	13:44	0:0	8	s
op	13:45	0:0	8	->
water	13:47	0:0	8	time_base
op	13:56	0:0	8	.
water	13:57	0:0	8	num
op	13:61	0:0	8	/
water	13:63	0:0	8	s
op	13:64	0:0	8	->
water	13:66	0:0	8	time_base
op	13:75	0:0	8	.
water	13:76	0:0	8	den
stmts	13:81	16:12	7	
water	13:81	0:0	8	{
water	15:16	0:0	8	s
op	15:17	0:0	8	->
water	15:19	0:0	8	time_frame
op	15:30	0:0	8	+=
call	15:33	15:48	8	INT64_C
arg	15:41	15:48	9	1000000
water	15:41	0:0	10	1000000
water	15:49	0:0	8	;
water	16:12	0:0	8	}
break	17:12	17:17	6	
water	18:8	0:0	6	}
water	19:8	0:0	4	ts
op	19:10	0:0	4	.
water	19:11	0:0	4	tv_sec
op	19:18	0:0	4	=
water	19:20	0:0	4	delay
op	19:26	0:0	4	/
water	19:28	0:0	4	1000000
water	19:35	0:0	4	;
water	20:8	0:0	4	ts
op	20:10	0:0	4	.
water	20:11	0:0	4	tv_nsec
op	20:19	0:0	4	=
water	20:21	0:0	4	(
water	20:22	0:0	4	delay
op	20:28	0:0	4	%
water	20:30	0:0	4	1000000
water	20:37	0:0	4	)
op	20:39	0:0	4	*
water	20:41	0:0	4	1000
water	20:45	0:0	4	;
call	21:8	21:27	4	nanosleep
arg	21:18	21:21	5	&ts
op	21:18	0:0	6	&
water	21:19	0:0	6	ts
arg	21:23	21:27	5	NULL
water	21:23	0:0	6	NULL
water	21:28	0:0	4	;
water	22:4	0:0	4	}
if	23:4	24:27	2	(av_new_packet (pkt ,s -> frame_size ) < 0)
cond	23:8	23:44	3	av_new_packet (pkt ,s -> frame_size ) < 0
call	23:8	23:40	4	av_new_packet
arg	23:22	23:25	5	pkt
water	23:22	0:0	6	pkt
arg	23:27	23:40	5	s->frame_size
water	23:27	0:0	6	s
op	23:28	0:0	6	->
water	23:30	0:0	6	frame_size
op	23:42	0:0	4	<
water	23:44	0:0	4	0
stmts	24:8	24:27	3	
return	24:8	24:27	4	AVERROR(EIO)
call	24:15	24:26	5	AVERROR
arg	24:23	24:26	6	EIO
water	24:23	0:0	7	EIO
water	25:4	0:0	2	pkt
op	25:7	0:0	2	->
water	25:9	0:0	2	pts
op	25:13	0:0	2	=
water	25:15	0:0	2	curtime
water	25:22	0:0	2	;
if	27:4	29:4	2	(s -> use_mmap)
cond	27:8	27:11	3	s -> use_mmap
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	use_mmap
stmts	27:21	29:4	3	
water	27:21	0:0	4	{
return	28:8	28:48	4	v4l_mm_read_picture(s,pkt->data)
call	28:15	28:47	5	v4l_mm_read_picture
arg	28:35	28:36	6	s
water	28:35	0:0	7	s
arg	28:38	28:47	6	pkt->data
water	28:38	0:0	7	pkt
op	28:41	0:0	7	->
water	28:43	0:0	7	data
water	29:4	0:0	4	}
else	29:6	33:4	2
stmts	29:11	33:4	3	
water	29:11	0:0	4	{
if	30:8	31:31	4	(read (s -> fd ,pkt -> data ,pkt -> size ) != pkt -> size)
cond	30:12	30:54	5	read (s -> fd ,pkt -> data ,pkt -> size ) != pkt -> size
call	30:12	30:44	6	read
arg	30:17	30:22	7	s->fd
water	30:17	0:0	8	s
op	30:18	0:0	8	->
water	30:20	0:0	8	fd
arg	30:24	30:33	7	pkt->data
water	30:24	0:0	8	pkt
op	30:27	0:0	8	->
water	30:29	0:0	8	data
arg	30:35	30:44	7	pkt->size
water	30:35	0:0	8	pkt
op	30:38	0:0	8	->
water	30:40	0:0	8	size
op	30:46	0:0	6	!=
water	30:49	0:0	6	pkt
op	30:52	0:0	6	->
water	30:54	0:0	6	size
stmts	31:12	31:31	5	
return	31:12	31:31	6	AVERROR(EIO)
call	31:19	31:30	7	AVERROR
arg	31:27	31:30	8	EIO
water	31:27	0:0	9	EIO
return	32:8	32:28	4	s->frame_size
water	32:15	0:0	5	s
op	32:16	0:0	5	->
water	32:18	0:0	5	frame_size
water	33:4	0:0	4	}
