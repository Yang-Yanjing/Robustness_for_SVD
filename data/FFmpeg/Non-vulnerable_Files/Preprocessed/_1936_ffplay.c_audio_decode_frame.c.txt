func	1:0	104:0	0	static int	audio_decode_frame
params	1:29	0:0	1	
param	1:30	1:44	2	VideoState *	is
stmnts	0:0	103:30	1	
decl	3:4	3:38	2	int	data_size
water	3:17	0:0	2	,
decl	3:4	3:38	2	int	resampled_data_size
decl	4:4	4:30	2	int64_t	dec_channel_layout
water	5:4	0:0	2	av_unused
water	5:14	0:0	2	double
water	5:21	0:0	2	audio_clock0
water	5:33	0:0	2	;
decl	6:4	6:25	2	int	wanted_nb_samples
decl	7:4	7:13	2	Frame	*af
if	8:4	9:17	2	(is -> paused)
cond	8:8	8:12	3	is -> paused
water	8:8	0:0	4	is
op	8:10	0:0	4	->
water	8:12	0:0	4	paused
stmts	9:8	9:17	3	
return	9:8	9:17	4	-1
op	9:15	0:0	5	-
water	9:16	0:0	5	1
do	10:4	21:4	2	(af -> serial != is -> audioq . serial)
cond	21:13	21:38	3	af -> serial != is -> audioq . serial
water	21:13	0:0	4	af
op	21:15	0:0	4	->
water	21:17	0:0	4	serial
op	21:24	0:0	4	!=
water	21:27	0:0	4	is
op	21:29	0:0	4	->
water	21:31	0:0	4	audioq
op	21:37	0:0	4	.
water	21:38	0:0	4	serial
stmts	10:7	21:4	3	
water	10:7	0:0	4	{
while	12:8	16:8	4	(frame_queue_nb_remaining (& is -> sampq ) == 0)
cond	12:15	12:55	5	frame_queue_nb_remaining (& is -> sampq ) == 0
call	12:15	12:50	6	frame_queue_nb_remaining
arg	12:40	12:50	7	&is->sampq
op	12:40	0:0	8	&
water	12:41	0:0	8	is
op	12:43	0:0	8	->
water	12:45	0:0	8	sampq
op	12:52	0:0	6	==
water	12:55	0:0	6	0
stmts	12:58	16:8	5	
water	12:58	0:0	6	{
if	13:12	14:25	6	((av_gettime_relative ( ) - audio_callback_time ) > 1000000 LL * is -> audio_hw_buf_size / is -> audio_tgt . bytes_per_sec / 2)
cond	13:16	13:130	7	(av_gettime_relative ( ) - audio_callback_time ) > 1000000 LL * is -> audio_hw_buf_size / is -> audio_tgt . bytes_per_sec / 2
water	13:16	0:0	8	(
call	13:17	13:37	8	av_gettime_relative
op	13:39	0:0	8	-
water	13:41	0:0	8	audio_callback_time
water	13:60	0:0	8	)
op	13:62	0:0	8	>
water	13:64	0:0	8	1000000
water	13:71	0:0	8	LL
op	13:74	0:0	8	*
water	13:76	0:0	8	is
op	13:78	0:0	8	->
water	13:80	0:0	8	audio_hw_buf_size
op	13:98	0:0	8	/
water	13:100	0:0	8	is
op	13:102	0:0	8	->
water	13:104	0:0	8	audio_tgt
op	13:113	0:0	8	.
water	13:114	0:0	8	bytes_per_sec
op	13:128	0:0	8	/
water	13:130	0:0	8	2
stmts	14:16	14:25	7	
return	14:16	14:25	8	-1
op	14:23	0:0	9	-
water	14:24	0:0	9	1
call	15:12	15:27	6	av_usleep
arg	15:23	15:27	7	1000
water	15:23	0:0	8	1000
water	15:28	0:0	6	;
water	16:8	0:0	6	}
if	18:8	19:21	4	(! ( af =frame_queue_peek_readable (& is -> sampq ) ))
cond	18:12	18:56	5	! ( af =frame_queue_peek_readable (& is -> sampq ) )
op	18:12	0:0	6	!
water	18:13	0:0	6	(
water	18:14	0:0	6	af
op	18:17	0:0	6	=
call	18:19	18:55	6	frame_queue_peek_readable
arg	18:45	18:55	7	&is->sampq
op	18:45	0:0	8	&
water	18:46	0:0	8	is
op	18:48	0:0	8	->
water	18:50	0:0	8	sampq
water	18:56	0:0	6	)
stmts	19:12	19:21	5	
return	19:12	19:21	6	-1
op	19:19	0:0	7	-
water	19:20	0:0	7	1
call	20:8	20:35	4	frame_queue_next
arg	20:25	20:35	5	&is->sampq
op	20:25	0:0	6	&
water	20:26	0:0	6	is
op	20:28	0:0	6	->
water	20:30	0:0	6	sampq
water	20:36	0:0	4	;
water	21:4	0:0	4	}
water	21:45	0:0	2	;
water	22:4	0:0	2	data_size
op	22:14	0:0	2	=
call	22:16	24:63	2	av_samples_get_buffer_size
arg	22:43	22:47	3	NULL
water	22:43	0:0	4	NULL
arg	22:49	22:81	3	av_frame_get_channels(af->frame)
call	22:49	22:80	4	av_frame_get_channels
arg	22:71	22:80	5	af->frame
water	22:71	0:0	6	af
op	22:73	0:0	6	->
water	22:75	0:0	6	frame
arg	23:43	23:64	3	af->frame->nb_samples
water	23:43	0:0	4	af
op	23:45	0:0	4	->
water	23:47	0:0	4	frame
op	23:52	0:0	4	->
water	23:54	0:0	4	nb_samples
arg	24:43	24:60	3	af->frame->format
water	24:43	0:0	4	af
op	24:45	0:0	4	->
water	24:47	0:0	4	frame
op	24:52	0:0	4	->
water	24:54	0:0	4	format
arg	24:62	24:63	3	1
water	24:62	0:0	4	1
water	24:64	0:0	2	;
water	25:4	0:0	2	dec_channel_layout
op	25:23	0:0	2	=
water	26:8	0:0	2	(
water	26:9	0:0	2	af
op	26:11	0:0	2	->
water	26:13	0:0	2	frame
op	26:18	0:0	2	->
water	26:20	0:0	2	channel_layout
op	26:35	0:0	2	&&
call	26:38	26:69	2	av_frame_get_channels
arg	26:60	26:69	3	af->frame
water	26:60	0:0	4	af
op	26:62	0:0	4	->
water	26:64	0:0	4	frame
op	26:71	0:0	2	==
call	26:74	26:133	2	av_get_channel_layout_nb_channels
arg	26:108	26:133	3	af->frame->channel_layout
water	26:108	0:0	4	af
op	26:110	0:0	4	->
water	26:112	0:0	4	frame
op	26:117	0:0	4	->
water	26:119	0:0	4	channel_layout
water	26:134	0:0	2	)
water	26:136	0:0	2	?
water	27:8	0:0	2	af
op	27:10	0:0	2	->
water	27:12	0:0	2	frame
op	27:17	0:0	2	->
water	27:19	0:0	2	channel_layout
water	27:34	0:0	2	:
call	27:36	27:98	2	av_get_default_channel_layout
arg	27:66	27:98	3	av_frame_get_channels(af->frame)
call	27:66	27:97	4	av_frame_get_channels
arg	27:88	27:97	5	af->frame
water	27:88	0:0	6	af
op	27:90	0:0	6	->
water	27:92	0:0	6	frame
water	27:99	0:0	2	;
water	28:4	0:0	2	wanted_nb_samples
op	28:22	0:0	2	=
call	28:24	28:67	2	synchronize_audio
arg	28:42	28:44	3	is
water	28:42	0:0	4	is
arg	28:46	28:67	3	af->frame->nb_samples
water	28:46	0:0	4	af
op	28:48	0:0	4	->
water	28:50	0:0	4	frame
op	28:55	0:0	4	->
water	28:57	0:0	4	nb_samples
water	28:68	0:0	2	;
if	29:4	50:4	2	(af -> frame -> format != is -> audio_src . fmt || dec_channel_layout != is -> audio_src . channel_layout || af -> frame -> sample_rate != is -> audio_src . freq || ( wanted_nb_samples != af -> frame -> nb_samples && ! is -> swr_ctx ))
cond	29:8	32:73	3	af -> frame -> format != is -> audio_src . fmt || dec_channel_layout != is -> audio_src . channel_layout || af -> frame -> sample_rate != is -> audio_src . freq || ( wanted_nb_samples != af -> frame -> nb_samples && ! is -> swr_ctx )
water	29:8	0:0	4	af
op	29:10	0:0	4	->
water	29:12	0:0	4	frame
op	29:17	0:0	4	->
water	29:19	0:0	4	format
op	29:33	0:0	4	!=
water	29:36	0:0	4	is
op	29:38	0:0	4	->
water	29:40	0:0	4	audio_src
op	29:49	0:0	4	.
water	29:50	0:0	4	fmt
op	29:65	0:0	4	||
water	30:8	0:0	4	dec_channel_layout
op	30:33	0:0	4	!=
water	30:36	0:0	4	is
op	30:38	0:0	4	->
water	30:40	0:0	4	audio_src
op	30:49	0:0	4	.
water	30:50	0:0	4	channel_layout
op	30:65	0:0	4	||
water	31:8	0:0	4	af
op	31:10	0:0	4	->
water	31:12	0:0	4	frame
op	31:17	0:0	4	->
water	31:19	0:0	4	sample_rate
op	31:33	0:0	4	!=
water	31:36	0:0	4	is
op	31:38	0:0	4	->
water	31:40	0:0	4	audio_src
op	31:49	0:0	4	.
water	31:50	0:0	4	freq
op	31:65	0:0	4	||
water	32:8	0:0	4	(
water	32:9	0:0	4	wanted_nb_samples
op	32:33	0:0	4	!=
water	32:36	0:0	4	af
op	32:38	0:0	4	->
water	32:40	0:0	4	frame
op	32:45	0:0	4	->
water	32:47	0:0	4	nb_samples
op	32:58	0:0	4	&&
op	32:61	0:0	4	!
water	32:62	0:0	4	is
op	32:64	0:0	4	->
water	32:66	0:0	4	swr_ctx
water	32:73	0:0	4	)
stmts	32:76	50:4	3	
water	32:76	0:0	4	{
call	33:8	33:29	4	swr_free
arg	33:17	33:29	5	&is->swr_ctx
op	33:17	0:0	6	&
water	33:18	0:0	6	is
op	33:20	0:0	6	->
water	33:22	0:0	6	swr_ctx
water	33:30	0:0	4	;
water	34:8	0:0	4	is
op	34:10	0:0	4	->
water	34:12	0:0	4	swr_ctx
op	34:20	0:0	4	=
call	34:22	37:48	4	swr_alloc_set_opts
arg	34:41	34:45	5	NULL
water	34:41	0:0	6	NULL
arg	35:41	35:69	5	is->audio_tgt.channel_layout
water	35:41	0:0	6	is
op	35:43	0:0	6	->
water	35:45	0:0	6	audio_tgt
op	35:54	0:0	6	.
water	35:55	0:0	6	channel_layout
arg	35:71	35:88	5	is->audio_tgt.fmt
water	35:71	0:0	6	is
op	35:73	0:0	6	->
water	35:75	0:0	6	audio_tgt
op	35:84	0:0	6	.
water	35:85	0:0	6	fmt
arg	35:90	35:108	5	is->audio_tgt.freq
water	35:90	0:0	6	is
op	35:92	0:0	6	->
water	35:94	0:0	6	audio_tgt
op	35:103	0:0	6	.
water	35:104	0:0	6	freq
arg	36:41	36:59	5	dec_channel_layout
water	36:41	0:0	6	dec_channel_layout
arg	36:71	36:88	5	af->frame->format
water	36:71	0:0	6	af
op	36:73	0:0	6	->
water	36:75	0:0	6	frame
op	36:80	0:0	6	->
water	36:82	0:0	6	format
arg	36:90	36:112	5	af->frame->sample_rate
water	36:90	0:0	6	af
op	36:92	0:0	6	->
water	36:94	0:0	6	frame
op	36:99	0:0	6	->
water	36:101	0:0	6	sample_rate
arg	37:41	37:42	5	0
water	37:41	0:0	6	0
arg	37:44	37:48	5	NULL
water	37:44	0:0	6	NULL
water	37:49	0:0	4	;
if	38:8	45:8	4	(! is -> swr_ctx ||swr_init (is -> swr_ctx ) < 0)
cond	38:12	38:52	5	! is -> swr_ctx ||swr_init (is -> swr_ctx ) < 0
op	38:12	0:0	6	!
water	38:13	0:0	6	is
op	38:15	0:0	6	->
water	38:17	0:0	6	swr_ctx
op	38:25	0:0	6	||
call	38:28	38:48	6	swr_init
arg	38:37	38:48	7	is->swr_ctx
water	38:37	0:0	8	is
op	38:39	0:0	8	->
water	38:41	0:0	8	swr_ctx
op	38:50	0:0	6	<
water	38:52	0:0	6	0
stmts	38:55	45:8	5	
water	38:55	0:0	6	{
call	39:12	42:105	6	av_log
arg	39:19	39:23	7	NULL
water	39:19	0:0	8	NULL
arg	39:25	39:37	7	AV_LOG_ERROR
water	39:25	0:0	8	AV_LOG_ERROR
arg	40:19	40:122	7	"Cannot create sample rate converter for conversion of %d Hz %s %d channels to %d Hz %s %d channels!\n"
water	40:19	0:0	8	"Cannot create sample rate converter for conversion of %d Hz %s %d channels to %d Hz %s %d channels!\n"
arg	41:20	41:42	7	af->frame->sample_rate
water	41:20	0:0	8	af
op	41:22	0:0	8	->
water	41:24	0:0	8	frame
op	41:29	0:0	8	->
water	41:31	0:0	8	sample_rate
arg	41:44	41:85	7	av_get_sample_fmt_name(af->frame->format)
call	41:44	41:84	8	av_get_sample_fmt_name
arg	41:67	41:84	9	af->frame->format
water	41:67	0:0	10	af
op	41:69	0:0	10	->
water	41:71	0:0	10	frame
op	41:76	0:0	10	->
water	41:78	0:0	10	format
arg	41:87	41:119	7	av_frame_get_channels(af->frame)
call	41:87	41:118	8	av_frame_get_channels
arg	41:109	41:118	9	af->frame
water	41:109	0:0	10	af
op	41:111	0:0	10	->
water	41:113	0:0	10	frame
arg	42:20	42:38	7	is->audio_tgt.freq
water	42:20	0:0	8	is
op	42:22	0:0	8	->
water	42:24	0:0	8	audio_tgt
op	42:33	0:0	8	.
water	42:34	0:0	8	freq
arg	42:40	42:81	7	av_get_sample_fmt_name(is->audio_tgt.fmt)
call	42:40	42:80	8	av_get_sample_fmt_name
arg	42:63	42:80	9	is->audio_tgt.fmt
water	42:63	0:0	10	is
op	42:65	0:0	10	->
water	42:67	0:0	10	audio_tgt
op	42:76	0:0	10	.
water	42:77	0:0	10	fmt
arg	42:83	42:105	7	is->audio_tgt.channels
water	42:83	0:0	8	is
op	42:85	0:0	8	->
water	42:87	0:0	8	audio_tgt
op	42:96	0:0	8	.
water	42:97	0:0	8	channels
water	42:106	0:0	6	;
call	43:12	43:33	6	swr_free
arg	43:21	43:33	7	&is->swr_ctx
op	43:21	0:0	8	&
water	43:22	0:0	8	is
op	43:24	0:0	8	->
water	43:26	0:0	8	swr_ctx
water	43:34	0:0	6	;
return	44:12	44:21	6	-1
op	44:19	0:0	7	-
water	44:20	0:0	7	1
water	45:8	0:0	6	}
water	46:8	0:0	4	is
op	46:10	0:0	4	->
water	46:12	0:0	4	audio_src
op	46:21	0:0	4	.
water	46:22	0:0	4	channel_layout
op	46:37	0:0	4	=
water	46:39	0:0	4	dec_channel_layout
water	46:57	0:0	4	;
water	47:8	0:0	4	is
op	47:10	0:0	4	->
water	47:12	0:0	4	audio_src
op	47:21	0:0	4	.
water	47:22	0:0	4	channels
op	47:37	0:0	4	=
call	47:39	47:70	4	av_frame_get_channels
arg	47:61	47:70	5	af->frame
water	47:61	0:0	6	af
op	47:63	0:0	6	->
water	47:65	0:0	6	frame
water	47:71	0:0	4	;
water	48:8	0:0	4	is
op	48:10	0:0	4	->
water	48:12	0:0	4	audio_src
op	48:21	0:0	4	.
water	48:22	0:0	4	freq
op	48:27	0:0	4	=
water	48:29	0:0	4	af
op	48:31	0:0	4	->
water	48:33	0:0	4	frame
op	48:38	0:0	4	->
water	48:40	0:0	4	sample_rate
water	48:51	0:0	4	;
water	49:8	0:0	4	is
op	49:10	0:0	4	->
water	49:12	0:0	4	audio_src
op	49:21	0:0	4	.
water	49:22	0:0	4	fmt
op	49:26	0:0	4	=
water	49:28	0:0	4	af
op	49:30	0:0	4	->
water	49:32	0:0	4	frame
op	49:37	0:0	4	->
water	49:39	0:0	4	format
water	49:45	0:0	4	;
water	50:4	0:0	4	}
if	51:4	83:4	2	(is -> swr_ctx)
cond	51:8	51:12	3	is -> swr_ctx
water	51:8	0:0	4	is
op	51:10	0:0	4	->
water	51:12	0:0	4	swr_ctx
stmts	51:21	83:4	3	
water	51:21	0:0	4	{
decl	52:8	52:71	4	const uint8_t	**in
op	52:27	0:0	4	=
water	52:29	0:0	4	(
water	52:30	0:0	4	const
water	52:36	0:0	4	uint8_t
op	52:44	0:0	4	*
op	52:45	0:0	4	*
water	52:46	0:0	4	)
water	52:47	0:0	4	af
op	52:49	0:0	4	->
water	52:51	0:0	4	frame
op	52:56	0:0	4	->
water	52:58	0:0	4	extended_data
decl	53:8	53:39	4	uint8_t	**out
op	53:22	0:0	4	=
op	53:24	0:0	4	&
water	53:25	0:0	4	is
op	53:27	0:0	4	->
water	53:29	0:0	4	audio_buf1
decl	54:8	54:102	4	int	out_count
op	54:22	0:0	4	=
water	54:24	0:0	4	(
water	54:25	0:0	4	int64_t
water	54:32	0:0	4	)
water	54:33	0:0	4	wanted_nb_samples
op	54:51	0:0	4	*
water	54:53	0:0	4	is
op	54:55	0:0	4	->
water	54:57	0:0	4	audio_tgt
op	54:66	0:0	4	.
water	54:67	0:0	4	freq
op	54:72	0:0	4	/
water	54:74	0:0	4	af
op	54:76	0:0	4	->
water	54:78	0:0	4	frame
op	54:83	0:0	4	->
water	54:85	0:0	4	sample_rate
op	54:97	0:0	4	+
water	54:99	0:0	4	256
decl	55:8	55:113	4	int	out_size
op	55:22	0:0	4	=
call	55:24	55:112	5	av_samples_get_buffer_size
arg	55:51	55:55	6	NULL
water	55:51	0:0	7	NULL
arg	55:57	55:79	6	is->audio_tgt.channels
water	55:57	0:0	7	is
op	55:59	0:0	7	->
water	55:61	0:0	7	audio_tgt
op	55:70	0:0	7	.
water	55:71	0:0	7	channels
arg	55:81	55:90	6	out_count
water	55:81	0:0	7	out_count
arg	55:92	55:109	6	is->audio_tgt.fmt
water	55:92	0:0	7	is
op	55:94	0:0	7	->
water	55:96	0:0	7	audio_tgt
op	55:105	0:0	7	.
water	55:106	0:0	7	fmt
arg	55:111	55:112	6	0
water	55:111	0:0	7	0
decl	56:8	56:16	4	int	len2
if	57:8	60:8	4	(out_size < 0)
cond	57:12	57:23	5	out_size < 0
water	57:12	0:0	6	out_size
op	57:21	0:0	6	<
water	57:23	0:0	6	0
stmts	57:26	60:8	5	
water	57:26	0:0	6	{
call	58:12	58:78	6	av_log
arg	58:19	58:23	7	NULL
water	58:19	0:0	8	NULL
arg	58:25	58:37	7	AV_LOG_ERROR
water	58:25	0:0	8	AV_LOG_ERROR
arg	58:39	58:78	7	"av_samples_get_buffer_size() failed\n"
water	58:39	0:0	8	"av_samples_get_buffer_size() failed\n"
water	58:79	0:0	6	;
return	59:12	59:21	6	-1
op	59:19	0:0	7	-
water	59:20	0:0	7	1
water	60:8	0:0	6	}
if	61:8	67:8	4	(wanted_nb_samples != af -> frame -> nb_samples)
cond	61:12	61:44	5	wanted_nb_samples != af -> frame -> nb_samples
water	61:12	0:0	6	wanted_nb_samples
op	61:30	0:0	6	!=
water	61:33	0:0	6	af
op	61:35	0:0	6	->
water	61:37	0:0	6	frame
op	61:42	0:0	6	->
water	61:44	0:0	6	nb_samples
stmts	61:56	67:8	5	
water	61:56	0:0	6	{
if	62:12	66:12	6	(swr_set_compensation (is -> swr_ctx ,( wanted_nb_samples - af -> frame -> nb_samples ) * is -> audio_tgt . freq / af -> frame -> sample_rate ,wanted_nb_samples * is -> audio_tgt . freq / af -> frame -> sample_rate ) < 0)
cond	62:16	63:107	7	swr_set_compensation (is -> swr_ctx ,( wanted_nb_samples - af -> frame -> nb_samples ) * is -> audio_tgt . freq / af -> frame -> sample_rate ,wanted_nb_samples * is -> audio_tgt . freq / af -> frame -> sample_rate ) < 0
call	62:16	63:103	8	swr_set_compensation
arg	62:37	62:48	9	is->swr_ctx
water	62:37	0:0	10	is
op	62:39	0:0	10	->
water	62:41	0:0	10	swr_ctx
arg	62:50	62:139	9	(wanted_nb_samples-af->frame->nb_samples)*is->audio_tgt.freq/af->frame->sample_rate
water	62:50	0:0	10	(
water	62:51	0:0	10	wanted_nb_samples
op	62:69	0:0	10	-
water	62:71	0:0	10	af
op	62:73	0:0	10	->
water	62:75	0:0	10	frame
op	62:80	0:0	10	->
water	62:82	0:0	10	nb_samples
water	62:92	0:0	10	)
op	62:94	0:0	10	*
water	62:96	0:0	10	is
op	62:98	0:0	10	->
water	62:100	0:0	10	audio_tgt
op	62:109	0:0	10	.
water	62:110	0:0	10	freq
op	62:115	0:0	10	/
water	62:117	0:0	10	af
op	62:119	0:0	10	->
water	62:121	0:0	10	frame
op	62:126	0:0	10	->
water	62:128	0:0	10	sample_rate
arg	63:40	63:103	9	wanted_nb_samples*is->audio_tgt.freq/af->frame->sample_rate
water	63:40	0:0	10	wanted_nb_samples
op	63:58	0:0	10	*
water	63:60	0:0	10	is
op	63:62	0:0	10	->
water	63:64	0:0	10	audio_tgt
op	63:73	0:0	10	.
water	63:74	0:0	10	freq
op	63:79	0:0	10	/
water	63:81	0:0	10	af
op	63:83	0:0	10	->
water	63:85	0:0	10	frame
op	63:90	0:0	10	->
water	63:92	0:0	10	sample_rate
op	63:105	0:0	8	<
water	63:107	0:0	8	0
stmts	63:110	66:12	7	
water	63:110	0:0	8	{
call	64:16	64:76	8	av_log
arg	64:23	64:27	9	NULL
water	64:23	0:0	10	NULL
arg	64:29	64:41	9	AV_LOG_ERROR
water	64:29	0:0	10	AV_LOG_ERROR
arg	64:43	64:76	9	"swr_set_compensation() failed\n"
water	64:43	0:0	10	"swr_set_compensation() failed\n"
water	64:77	0:0	8	;
return	65:16	65:25	8	-1
op	65:23	0:0	9	-
water	65:24	0:0	9	1
water	66:12	0:0	8	}
water	67:8	0:0	6	}
call	68:8	68:70	4	av_fast_malloc
arg	68:23	68:38	5	&is->audio_buf1
op	68:23	0:0	6	&
water	68:24	0:0	6	is
op	68:26	0:0	6	->
water	68:28	0:0	6	audio_buf1
arg	68:40	68:60	5	&is->audio_buf1_size
op	68:40	0:0	6	&
water	68:41	0:0	6	is
op	68:43	0:0	6	->
water	68:45	0:0	6	audio_buf1_size
arg	68:62	68:70	5	out_size
water	68:62	0:0	6	out_size
water	68:71	0:0	4	;
if	69:8	70:34	4	(! is -> audio_buf1)
cond	69:12	69:17	5	! is -> audio_buf1
op	69:12	0:0	6	!
water	69:13	0:0	6	is
op	69:15	0:0	6	->
water	69:17	0:0	6	audio_buf1
stmts	70:12	70:34	5	
return	70:12	70:34	6	AVERROR(ENOMEM)
call	70:19	70:33	7	AVERROR
arg	70:27	70:33	8	ENOMEM
water	70:27	0:0	9	ENOMEM
water	71:8	0:0	4	len2
op	71:13	0:0	4	=
call	71:15	71:81	4	swr_convert
arg	71:27	71:38	5	is->swr_ctx
water	71:27	0:0	6	is
op	71:29	0:0	6	->
water	71:31	0:0	6	swr_ctx
arg	71:40	71:43	5	out
water	71:40	0:0	6	out
arg	71:45	71:54	5	out_count
water	71:45	0:0	6	out_count
arg	71:56	71:58	5	in
water	71:56	0:0	6	in
arg	71:60	71:81	5	af->frame->nb_samples
water	71:60	0:0	6	af
op	71:62	0:0	6	->
water	71:64	0:0	6	frame
op	71:69	0:0	6	->
water	71:71	0:0	6	nb_samples
water	71:82	0:0	4	;
if	72:8	75:8	4	(len2 < 0)
cond	72:12	72:19	5	len2 < 0
water	72:12	0:0	6	len2
op	72:17	0:0	6	<
water	72:19	0:0	6	0
stmts	72:22	75:8	5	
water	72:22	0:0	6	{
call	73:12	73:63	6	av_log
arg	73:19	73:23	7	NULL
water	73:19	0:0	8	NULL
arg	73:25	73:37	7	AV_LOG_ERROR
water	73:25	0:0	8	AV_LOG_ERROR
arg	73:39	73:63	7	"swr_convert() failed\n"
water	73:39	0:0	8	"swr_convert() failed\n"
water	73:64	0:0	6	;
return	74:12	74:21	6	-1
op	74:19	0:0	7	-
water	74:20	0:0	7	1
water	75:8	0:0	6	}
if	76:8	80:8	4	(len2 == out_count)
cond	76:12	76:20	5	len2 == out_count
water	76:12	0:0	6	len2
op	76:17	0:0	6	==
water	76:20	0:0	6	out_count
stmts	76:31	80:8	5	
water	76:31	0:0	6	{
call	77:12	77:79	6	av_log
arg	77:19	77:23	7	NULL
water	77:19	0:0	8	NULL
arg	77:25	77:39	7	AV_LOG_WARNING
water	77:25	0:0	8	AV_LOG_WARNING
arg	77:41	77:79	7	"audio buffer is probably too small\n"
water	77:41	0:0	8	"audio buffer is probably too small\n"
water	77:80	0:0	6	;
if	78:12	79:38	6	(swr_init (is -> swr_ctx ) < 0)
cond	78:16	78:40	7	swr_init (is -> swr_ctx ) < 0
call	78:16	78:36	8	swr_init
arg	78:25	78:36	9	is->swr_ctx
water	78:25	0:0	10	is
op	78:27	0:0	10	->
water	78:29	0:0	10	swr_ctx
op	78:38	0:0	8	<
water	78:40	0:0	8	0
stmts	79:16	79:38	7	
call	79:16	79:37	8	swr_free
arg	79:25	79:37	9	&is->swr_ctx
op	79:25	0:0	10	&
water	79:26	0:0	10	is
op	79:28	0:0	10	->
water	79:30	0:0	10	swr_ctx
water	79:38	0:0	8	;
water	80:8	0:0	6	}
water	81:8	0:0	4	is
op	81:10	0:0	4	->
water	81:12	0:0	4	audio_buf
op	81:22	0:0	4	=
water	81:24	0:0	4	is
op	81:26	0:0	4	->
water	81:28	0:0	4	audio_buf1
water	81:38	0:0	4	;
water	82:8	0:0	4	resampled_data_size
op	82:28	0:0	4	=
water	82:30	0:0	4	len2
op	82:35	0:0	4	*
water	82:37	0:0	4	is
op	82:39	0:0	4	->
water	82:41	0:0	4	audio_tgt
op	82:50	0:0	4	.
water	82:51	0:0	4	channels
call	82:60	82:103	4	*av_get_bytes_per_sample
arg	82:86	82:103	5	is->audio_tgt.fmt
water	82:86	0:0	6	is
op	82:88	0:0	6	->
water	82:90	0:0	6	audio_tgt
op	82:99	0:0	6	.
water	82:100	0:0	6	fmt
water	82:104	0:0	4	;
water	83:4	0:0	4	}
else	83:6	86:4	2
stmts	83:11	86:4	3	
water	83:11	0:0	4	{
water	84:8	0:0	4	is
op	84:10	0:0	4	->
water	84:12	0:0	4	audio_buf
op	84:22	0:0	4	=
water	84:24	0:0	4	af
op	84:26	0:0	4	->
water	84:28	0:0	4	frame
op	84:33	0:0	4	->
water	84:35	0:0	4	data
op	84:39	0:0	4	[
water	84:40	0:0	4	0
op	84:41	0:0	4	]
water	84:42	0:0	4	;
water	85:8	0:0	4	resampled_data_size
op	85:28	0:0	4	=
water	85:30	0:0	4	data_size
water	85:39	0:0	4	;
water	86:4	0:0	4	}
water	87:4	0:0	2	audio_clock0
op	87:17	0:0	2	=
water	87:19	0:0	2	is
op	87:21	0:0	2	->
water	87:23	0:0	2	audio_clock
water	87:34	0:0	2	;
if	89:4	90:91	2	(!isnan (af -> pts ))
cond	89:8	89:22	3	!isnan (af -> pts )
op	89:8	0:0	4	!
call	89:9	89:22	4	isnan
arg	89:15	89:22	5	af->pts
water	89:15	0:0	6	af
op	89:17	0:0	6	->
water	89:19	0:0	6	pts
stmts	90:8	90:91	3	
water	90:8	0:0	4	is
op	90:10	0:0	4	->
water	90:12	0:0	4	audio_clock
op	90:24	0:0	4	=
water	90:26	0:0	4	af
op	90:28	0:0	4	->
water	90:30	0:0	4	pts
op	90:34	0:0	4	+
water	90:36	0:0	4	(
water	90:37	0:0	4	double
water	90:43	0:0	4	)
water	90:45	0:0	4	af
op	90:47	0:0	4	->
water	90:49	0:0	4	frame
op	90:54	0:0	4	->
water	90:56	0:0	4	nb_samples
op	90:67	0:0	4	/
water	90:69	0:0	4	af
op	90:71	0:0	4	->
water	90:73	0:0	4	frame
op	90:78	0:0	4	->
water	90:80	0:0	4	sample_rate
water	90:91	0:0	4	;
else	91:4	92:29	2
stmts	92:8	92:29	3	
water	92:8	0:0	4	is
op	92:10	0:0	4	->
water	92:12	0:0	4	audio_clock
op	92:24	0:0	4	=
water	92:26	0:0	4	NAN
water	92:29	0:0	4	;
water	93:4	0:0	2	is
op	93:6	0:0	2	->
water	93:8	0:0	2	audio_clock_serial
op	93:27	0:0	2	=
water	93:29	0:0	2	af
op	93:31	0:0	2	->
water	93:33	0:0	2	serial
water	93:39	0:0	2	;
water	95:4	0:0	2	{
water	96:8	0:0	2	static
water	96:15	0:0	2	double
water	96:22	0:0	2	last_clock
water	96:32	0:0	2	;
call	97:8	99:44	2	printf
arg	97:15	97:62	3	"audio: delay=%0.3f clock=%0.3f clock0=%0.3f\n"
water	97:15	0:0	4	"audio: delay=%0.3f clock=%0.3f clock0=%0.3f\n"
arg	98:15	98:43	3	is->audio_clock-last_clock
water	98:15	0:0	4	is
op	98:17	0:0	4	->
water	98:19	0:0	4	audio_clock
op	98:31	0:0	4	-
water	98:33	0:0	4	last_clock
arg	99:15	99:30	3	is->audio_clock
water	99:15	0:0	4	is
op	99:17	0:0	4	->
water	99:19	0:0	4	audio_clock
arg	99:32	99:44	3	audio_clock0
water	99:32	0:0	4	audio_clock0
water	99:45	0:0	2	;
water	100:8	0:0	2	last_clock
op	100:19	0:0	2	=
water	100:21	0:0	2	is
op	100:23	0:0	2	->
water	100:25	0:0	2	audio_clock
water	100:36	0:0	2	;
water	101:4	0:0	2	}
return	103:4	103:30	2	resampled_data_size
water	103:11	0:0	3	resampled_data_size
