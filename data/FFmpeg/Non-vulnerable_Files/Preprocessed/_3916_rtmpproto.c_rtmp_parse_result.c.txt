func	1:0	42:0	0	static int	rtmp_parse_result
params	1:28	0:0	1	
param	1:29	1:42	2	URLContext *	s
param	1:44	1:59	2	RTMPContext *	rt
param	1:61	1:76	2	RTMPPacket *	pkt
stmnts	0:0	41:12	1	
decl	3:4	3:11	2	int	ret
call	5:4	5:30	2	ff_rtmp_packet_dump
arg	5:24	5:25	3	s
water	5:24	0:0	4	s
arg	5:27	5:30	3	pkt
water	5:27	0:0	4	pkt
water	5:31	0:0	2	;
switch	7:4	40:4	2	(pkt -> type)
cond	7:12	7:17	3	pkt -> type
water	7:12	0:0	4	pkt
op	7:15	0:0	4	->
water	7:17	0:0	4	type
stmts	7:23	40:4	3	
water	7:23	0:0	4	{
label	8:4	8:27	4	case RTMP_PT_BYTES_READ :
call	9:8	9:62	4	av_log
arg	9:15	9:16	5	s
water	9:15	0:0	6	s
arg	9:18	9:30	5	AV_LOG_TRACE
water	9:18	0:0	6	AV_LOG_TRACE
arg	9:32	9:62	5	"received bytes read report\n"
water	9:32	0:0	6	"received bytes read report\n"
water	9:63	0:0	4	;
break	10:8	10:13	4	
label	11:4	11:27	4	case RTMP_PT_CHUNK_SIZE :
if	12:8	13:22	4	(( ret =handle_chunk_size (s ,pkt ) ) < 0)
cond	12:12	12:48	5	( ret =handle_chunk_size (s ,pkt ) ) < 0
water	12:12	0:0	6	(
water	12:13	0:0	6	ret
op	12:17	0:0	6	=
call	12:19	12:43	6	handle_chunk_size
arg	12:37	12:38	7	s
water	12:37	0:0	8	s
arg	12:40	12:43	7	pkt
water	12:40	0:0	8	pkt
water	12:44	0:0	6	)
op	12:46	0:0	6	<
water	12:48	0:0	6	0
stmts	13:12	13:22	5	
return	13:12	13:22	6	ret
water	13:19	0:0	7	ret
break	14:8	14:13	4	
label	15:4	15:21	4	case RTMP_PT_PING :
if	16:8	17:22	4	(( ret =handle_ping (s ,pkt ) ) < 0)
cond	16:12	16:42	5	( ret =handle_ping (s ,pkt ) ) < 0
water	16:12	0:0	6	(
water	16:13	0:0	6	ret
op	16:17	0:0	6	=
call	16:19	16:37	6	handle_ping
arg	16:31	16:32	7	s
water	16:31	0:0	8	s
arg	16:34	16:37	7	pkt
water	16:34	0:0	8	pkt
water	16:38	0:0	6	)
op	16:40	0:0	6	<
water	16:42	0:0	6	0
stmts	17:12	17:22	5	
return	17:12	17:22	6	ret
water	17:19	0:0	7	ret
break	18:8	18:13	4	
label	19:4	19:26	4	case RTMP_PT_CLIENT_BW :
if	20:8	21:22	4	(( ret =handle_client_bw (s ,pkt ) ) < 0)
cond	20:12	20:47	5	( ret =handle_client_bw (s ,pkt ) ) < 0
water	20:12	0:0	6	(
water	20:13	0:0	6	ret
op	20:17	0:0	6	=
call	20:19	20:42	6	handle_client_bw
arg	20:36	20:37	7	s
water	20:36	0:0	8	s
arg	20:39	20:42	7	pkt
water	20:39	0:0	8	pkt
water	20:43	0:0	6	)
op	20:45	0:0	6	<
water	20:47	0:0	6	0
stmts	21:12	21:22	5	
return	21:12	21:22	6	ret
water	21:19	0:0	7	ret
break	22:8	22:13	4	
label	23:4	23:26	4	case RTMP_PT_SERVER_BW :
if	24:8	25:22	4	(( ret =handle_server_bw (s ,pkt ) ) < 0)
cond	24:12	24:47	5	( ret =handle_server_bw (s ,pkt ) ) < 0
water	24:12	0:0	6	(
water	24:13	0:0	6	ret
op	24:17	0:0	6	=
call	24:19	24:42	6	handle_server_bw
arg	24:36	24:37	7	s
water	24:36	0:0	8	s
arg	24:39	24:42	7	pkt
water	24:39	0:0	8	pkt
water	24:43	0:0	6	)
op	24:45	0:0	6	<
water	24:47	0:0	6	0
stmts	25:12	25:22	5	
return	25:12	25:22	6	ret
water	25:19	0:0	7	ret
break	26:8	26:13	4	
label	27:4	27:23	4	case RTMP_PT_INVOKE :
if	28:8	29:22	4	(( ret =handle_invoke (s ,pkt ) ) < 0)
cond	28:12	28:44	5	( ret =handle_invoke (s ,pkt ) ) < 0
water	28:12	0:0	6	(
water	28:13	0:0	6	ret
op	28:17	0:0	6	=
call	28:19	28:39	6	handle_invoke
arg	28:33	28:34	7	s
water	28:33	0:0	8	s
arg	28:36	28:39	7	pkt
water	28:36	0:0	8	pkt
water	28:40	0:0	6	)
op	28:42	0:0	6	<
water	28:44	0:0	6	0
stmts	29:12	29:22	5	
return	29:12	29:22	6	ret
water	29:19	0:0	7	ret
break	30:8	30:13	4	
label	31:4	31:22	4	case RTMP_PT_VIDEO :
label	32:4	32:22	4	case RTMP_PT_AUDIO :
label	33:4	33:25	4	case RTMP_PT_METADATA :
label	34:4	34:23	4	case RTMP_PT_NOTIFY :
break	36:8	36:13	4	
label	37:4	37:11	4	default :
call	38:8	38:84	4	av_log
arg	38:15	38:16	5	s
water	38:15	0:0	6	s
arg	38:18	38:32	5	AV_LOG_VERBOSE
water	38:18	0:0	6	AV_LOG_VERBOSE
arg	38:34	38:73	5	"Unknown packet type received 0x%02X\n"
water	38:34	0:0	6	"Unknown packet type received 0x%02X\n"
arg	38:75	38:84	5	pkt->type
water	38:75	0:0	6	pkt
op	38:78	0:0	6	->
water	38:80	0:0	6	type
water	38:85	0:0	4	;
break	39:8	39:13	4	
water	40:4	0:0	4	}
return	41:4	41:12	2	0
water	41:11	0:0	3	0
