func	1:0	112:0	0	static int	check_keyboard_interaction
params	1:37	0:0	1	
param	1:38	1:54	2	int64_t	cur_time
stmnts	0:0	111:12	1	
decl	3:4	3:19	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:19	2	int	ret
water	3:14	0:0	2	,
decl	3:4	3:19	2	int	key
water	4:4	0:0	2	static
water	4:11	0:0	2	int64_t
water	4:19	0:0	2	last_time
water	4:28	0:0	2	;
if	5:4	6:27	2	(received_nb_signals)
cond	5:8	5:8	3	received_nb_signals
water	5:8	0:0	4	received_nb_signals
stmts	6:8	6:27	3	
return	6:8	6:27	4	AVERROR_EXIT
water	6:15	0:0	5	AVERROR_EXIT
if	8:4	11:4	2	(cur_time - last_time >= 100000 && ! run_as_daemon)
cond	8:7	8:42	3	cur_time - last_time >= 100000 && ! run_as_daemon
water	8:7	0:0	4	cur_time
op	8:16	0:0	4	-
water	8:18	0:0	4	last_time
op	8:28	0:0	4	>=
water	8:31	0:0	4	100000
op	8:38	0:0	4	&&
op	8:41	0:0	4	!
water	8:42	0:0	4	run_as_daemon
stmts	8:56	11:4	3	
water	8:56	0:0	4	{
water	9:8	0:0	4	key
op	9:12	0:0	4	=
call	9:15	9:24	4	read_key
water	9:25	0:0	4	;
water	10:8	0:0	4	last_time
op	10:18	0:0	4	=
water	10:20	0:0	4	cur_time
water	10:28	0:0	4	;
water	11:4	0:0	4	}
else	11:5	12:16	2
stmts	12:8	12:16	3	
water	12:8	0:0	4	key
op	12:12	0:0	4	=
op	12:14	0:0	4	-
water	12:15	0:0	4	1
water	12:16	0:0	4	;
if	13:4	14:27	2	(key == 'q')
cond	13:8	13:15	3	key == 'q'
water	13:8	0:0	4	key
op	13:12	0:0	4	==
water	13:15	0:0	4	'q'
stmts	14:8	14:27	3	
return	14:8	14:27	4	AVERROR_EXIT
water	14:15	0:0	5	AVERROR_EXIT
if	15:4	15:59	2	(key == '+')
cond	15:8	15:15	3	key == '+'
water	15:8	0:0	4	key
op	15:12	0:0	4	==
water	15:15	0:0	4	'+'
stmts	15:20	15:59	3	
call	15:20	15:58	4	av_log_set_level
arg	15:37	15:58	5	av_log_get_level()+10
call	15:37	15:54	6	av_log_get_level
op	15:55	0:0	6	+
water	15:56	0:0	6	10
water	15:59	0:0	4	;
if	16:4	16:59	2	(key == '-')
cond	16:8	16:15	3	key == '-'
water	16:8	0:0	4	key
op	16:12	0:0	4	==
water	16:15	0:0	4	'-'
stmts	16:20	16:59	3	
call	16:20	16:58	4	av_log_set_level
arg	16:37	16:58	5	av_log_get_level()-10
call	16:37	16:54	6	av_log_get_level
op	16:55	0:0	6	-
water	16:56	0:0	6	10
water	16:59	0:0	4	;
if	17:4	17:36	2	(key == 's')
cond	17:8	17:15	3	key == 's'
water	17:8	0:0	4	key
op	17:12	0:0	4	==
water	17:15	0:0	4	's'
stmts	17:20	17:36	3	
water	17:20	0:0	4	qp_hist
op	17:32	0:0	4	^=
water	17:35	0:0	4	1
water	17:36	0:0	4	;
if	18:4	26:4	2	(key == 'h')
cond	18:8	18:15	3	key == 'h'
water	18:8	0:0	4	key
op	18:12	0:0	4	==
water	18:15	0:0	4	'h'
stmts	18:19	26:4	3	
water	18:19	0:0	4	{
if	19:8	21:8	4	(do_hex_dump)
cond	19:12	19:12	5	do_hex_dump
water	19:12	0:0	6	do_hex_dump
stmts	19:24	21:8	5	
water	19:24	0:0	6	{
water	20:12	0:0	6	do_hex_dump
op	20:24	0:0	6	=
water	20:26	0:0	6	do_pkt_dump
op	20:38	0:0	6	=
water	20:40	0:0	6	0
water	20:41	0:0	6	;
water	21:8	0:0	6	}
else	21:10	23:8	4
stmts	21:15	23:8	5	
if	21:15	23:8	6	(do_pkt_dump)
cond	21:18	21:18	7	do_pkt_dump
water	21:18	0:0	8	do_pkt_dump
stmts	21:30	23:8	7	
water	21:30	0:0	8	{
water	22:12	0:0	8	do_hex_dump
op	22:24	0:0	8	=
water	22:26	0:0	8	1
water	22:27	0:0	8	;
water	23:8	0:0	8	}
else	23:10	24:27	4
stmts	24:12	24:27	5	
water	24:12	0:0	6	do_pkt_dump
op	24:24	0:0	6	=
water	24:26	0:0	6	1
water	24:27	0:0	6	;
call	25:8	25:37	4	av_log_set_level
arg	25:25	25:37	5	AV_LOG_DEBUG
water	25:25	0:0	6	AV_LOG_DEBUG
water	25:38	0:0	4	;
water	26:4	0:0	4	}
if	27:4	66:4	2	(key == 'c' || key == 'C')
cond	27:8	27:29	3	key == 'c' || key == 'C'
water	27:8	0:0	4	key
op	27:12	0:0	4	==
water	27:15	0:0	4	'c'
op	27:19	0:0	4	||
water	27:22	0:0	4	key
op	27:26	0:0	4	==
water	27:29	0:0	4	'C'
stmts	27:33	66:4	3	
water	27:33	0:0	4	{
decl	28:8	28:64	4	char	buf[4096]
water	28:22	0:0	4	,
decl	28:8	28:64	4	char	target[64]
water	28:34	0:0	4	,
decl	28:8	28:64	4	char	command[256]
water	28:48	0:0	4	,
decl	28:8	28:64	4	char	arg[256]
op	28:59	0:0	4	=
water	28:61	0:0	4	{
water	28:62	0:0	4	0
water	28:63	0:0	4	}
decl	29:8	29:19	4	double	time
decl	30:8	30:20	4	int	k
water	30:13	0:0	4	,
decl	30:8	30:20	4	int	n
op	30:17	0:0	4	=
water	30:19	0:0	4	0
call	31:8	31:90	4	fprintf
arg	31:16	31:22	5	stderr
water	31:16	0:0	6	stderr
arg	31:24	31:90	5	"\nEnter command: <target>|all <time>|-1 <command>[ <argument>]\n"
water	31:24	0:0	6	"\nEnter command: <target>|all <time>|-1 <command>[ <argument>]\n"
water	31:91	0:0	4	;
water	32:8	0:0	4	i
op	32:10	0:0	4	=
water	32:12	0:0	4	0
water	32:13	0:0	4	;
call	33:8	33:22	4	set_tty_echo
arg	33:21	33:22	5	1
water	33:21	0:0	6	1
water	33:23	0:0	4	;
while	34:8	36:28	4	(( k =read_key ( ) ) != '\n' && k != '\r' && i < sizeof ( buf ) - 1)
cond	34:15	34:72	5	( k =read_key ( ) ) != '\n' && k != '\r' && i < sizeof ( buf ) - 1
water	34:15	0:0	6	(
water	34:16	0:0	6	k
op	34:18	0:0	6	=
call	34:20	34:29	6	read_key
water	34:30	0:0	6	)
op	34:32	0:0	6	!=
water	34:35	0:0	6	'\n'
op	34:40	0:0	6	&&
water	34:43	0:0	6	k
op	34:45	0:0	6	!=
water	34:48	0:0	6	'\r'
op	34:53	0:0	6	&&
water	34:56	0:0	6	i
op	34:58	0:0	6	<
op	34:60	0:0	6	sizeof
water	34:66	0:0	6	(
water	34:67	0:0	6	buf
water	34:70	0:0	6	)
op	34:71	0:0	6	-
water	34:72	0:0	6	1
stmts	35:12	36:28	5	
if	35:12	36:28	6	(k > 0)
cond	35:16	35:20	7	k > 0
water	35:16	0:0	8	k
op	35:18	0:0	8	>
water	35:20	0:0	8	0
stmts	36:16	36:28	7	
water	36:16	0:0	8	buf
op	36:19	0:0	8	[
water	36:20	0:0	8	i
op	36:21	0:0	8	++
op	36:23	0:0	8	]
op	36:25	0:0	8	=
water	36:27	0:0	8	k
water	36:28	0:0	8	;
water	37:8	0:0	4	buf
op	37:11	0:0	4	[
water	37:12	0:0	4	i
op	37:13	0:0	4	]
op	37:15	0:0	4	=
water	37:17	0:0	4	0
water	37:18	0:0	4	;
call	38:8	38:22	4	set_tty_echo
arg	38:21	38:22	5	0
water	38:21	0:0	6	0
water	38:23	0:0	4	;
call	39:8	39:28	4	fprintf
arg	39:16	39:22	5	stderr
water	39:16	0:0	6	stderr
arg	39:24	39:28	5	"\n"
water	39:24	0:0	6	"\n"
water	39:29	0:0	4	;
if	40:8	61:8	4	(k > 0 && ( n =sscanf (buf ,"%63[^ ] %lf %255[^ ] %255[^\n]" ,target ,& time ,command ,arg ) ) >= 3)
cond	40:12	41:96	5	k > 0 && ( n =sscanf (buf ,"%63[^ ] %lf %255[^ ] %255[^\n]" ,target ,& time ,command ,arg ) ) >= 3
water	40:12	0:0	6	k
op	40:14	0:0	6	>
water	40:16	0:0	6	0
op	40:18	0:0	6	&&
water	41:12	0:0	6	(
water	41:13	0:0	6	n
op	41:15	0:0	6	=
call	41:17	41:90	6	sscanf
arg	41:24	41:27	7	buf
water	41:24	0:0	8	buf
arg	41:29	41:61	7	"%63[^ ] %lf %255[^ ] %255[^\n]"
water	41:29	0:0	8	"%63[^ ] %lf %255[^ ] %255[^\n]"
arg	41:63	41:69	7	target
water	41:63	0:0	8	target
arg	41:71	41:76	7	&time
op	41:71	0:0	8	&
water	41:72	0:0	8	time
arg	41:78	41:85	7	command
water	41:78	0:0	8	command
arg	41:87	41:90	7	arg
water	41:87	0:0	8	arg
water	41:91	0:0	6	)
op	41:93	0:0	6	>=
water	41:96	0:0	6	3
stmts	41:99	61:8	5	
water	41:99	0:0	6	{
call	42:12	43:45	6	av_log
arg	42:19	42:23	7	NULL
water	42:19	0:0	8	NULL
arg	42:25	42:37	7	AV_LOG_DEBUG
water	42:25	0:0	8	AV_LOG_DEBUG
arg	42:39	42:95	7	"Processing command target:%s time:%f command:%s arg:%s"
water	42:39	0:0	8	"Processing command target:%s time:%f command:%s arg:%s"
arg	43:19	43:25	7	target
water	43:19	0:0	8	target
arg	43:27	43:31	7	time
water	43:27	0:0	8	time
arg	43:33	43:40	7	command
water	43:33	0:0	8	command
arg	43:42	43:45	7	arg
water	43:42	0:0	8	arg
water	43:46	0:0	6	;
for	44:12	60:12	6	(i = 0 ;i < nb_filtergraphs;i ++)
forinit	44:17	44:22	7	i = 0 ;
water	44:17	0:0	8	i
op	44:19	0:0	8	=
water	44:21	0:0	8	0
water	44:22	0:0	8	;
cond	44:24	44:28	7	i < nb_filtergraphs
water	44:24	0:0	8	i
op	44:26	0:0	8	<
water	44:28	0:0	8	nb_filtergraphs
forexpr	44:45	44:46	7	i ++
water	44:45	0:0	8	i
op	44:46	0:0	8	++
stmts	44:50	60:12	7	
water	44:50	0:0	8	{
decl	45:16	45:49	8	FilterGraph	*fg
op	45:32	0:0	8	=
water	45:34	0:0	8	filtergraphs
op	45:46	0:0	8	[
water	45:47	0:0	8	i
op	45:48	0:0	8	]
if	46:16	59:16	8	(fg -> graph)
cond	46:20	46:24	9	fg -> graph
water	46:20	0:0	10	fg
op	46:22	0:0	10	->
water	46:24	0:0	10	graph
stmts	46:31	59:16	9	
water	46:31	0:0	10	{
if	47:20	51:20	10	(time < 0)
cond	47:24	47:31	11	time < 0
water	47:24	0:0	12	time
op	47:29	0:0	12	<
water	47:31	0:0	12	0
stmts	47:34	51:20	11	
water	47:34	0:0	12	{
water	48:24	0:0	12	ret
op	48:28	0:0	12	=
call	48:30	49:96	12	avfilter_graph_send_command
arg	48:58	48:67	13	fg->graph
water	48:58	0:0	14	fg
op	48:60	0:0	14	->
water	48:62	0:0	14	graph
arg	48:69	48:75	13	target
water	48:69	0:0	14	target
arg	48:77	48:84	13	command
water	48:77	0:0	14	command
arg	48:86	48:89	13	arg
water	48:86	0:0	14	arg
arg	48:91	48:94	13	buf
water	48:91	0:0	14	buf
arg	48:96	48:107	13	sizeof(buf)
op	48:96	0:0	14	sizeof
water	48:102	0:0	14	(
water	48:103	0:0	14	buf
water	48:106	0:0	14	)
arg	49:58	49:96	13	key=='c'?AVFILTER_CMD_FLAG_ONE:0
water	49:58	0:0	14	key
op	49:62	0:0	14	==
water	49:65	0:0	14	'c'
water	49:69	0:0	14	?
water	49:71	0:0	14	AVFILTER_CMD_FLAG_ONE
water	49:93	0:0	14	:
water	49:95	0:0	14	0
water	49:97	0:0	12	;
call	50:24	50:99	12	fprintf
arg	50:32	50:38	13	stderr
water	50:32	0:0	14	stderr
arg	50:40	50:86	13	"Command reply for stream %d: ret:%d res:\n%s"
water	50:40	0:0	14	"Command reply for stream %d: ret:%d res:\n%s"
arg	50:88	50:89	13	i
water	50:88	0:0	14	i
arg	50:91	50:94	13	ret
water	50:91	0:0	14	ret
arg	50:96	50:99	13	buf
water	50:96	0:0	14	buf
water	50:100	0:0	12	;
water	51:20	0:0	12	}
else	51:22	54:20	10
stmts	51:27	54:20	11	
if	51:27	54:20	12	(key == 'c')
cond	51:31	51:38	13	key == 'c'
water	51:31	0:0	14	key
op	51:35	0:0	14	==
water	51:38	0:0	14	'c'
stmts	51:43	54:20	13	
water	51:43	0:0	14	{
call	52:24	52:123	14	fprintf
arg	52:32	52:38	15	stderr
water	52:32	0:0	16	stderr
arg	52:40	52:123	15	"Queuing commands only on filters supporting the specific command is unsupported\n"
water	52:40	0:0	16	"Queuing commands only on filters supporting the specific command is unsupported\n"
water	52:124	0:0	14	;
water	53:24	0:0	14	ret
op	53:28	0:0	14	=
water	53:30	0:0	14	AVERROR_PATCHWELCOME
water	53:50	0:0	14	;
water	54:20	0:0	14	}
else	54:22	58:20	10
stmts	54:27	58:20	11	
water	54:27	0:0	12	{
water	55:24	0:0	12	ret
op	55:28	0:0	12	=
call	55:30	55:99	12	avfilter_graph_queue_command
arg	55:59	55:68	13	fg->graph
water	55:59	0:0	14	fg
op	55:61	0:0	14	->
water	55:63	0:0	14	graph
arg	55:70	55:76	13	target
water	55:70	0:0	14	target
arg	55:78	55:85	13	command
water	55:78	0:0	14	command
arg	55:87	55:90	13	arg
water	55:87	0:0	14	arg
arg	55:92	55:93	13	0
water	55:92	0:0	14	0
arg	55:95	55:99	13	time
water	55:95	0:0	14	time
water	55:100	0:0	12	;
if	56:24	57:102	12	(ret < 0)
cond	56:28	56:34	13	ret < 0
water	56:28	0:0	14	ret
op	56:32	0:0	14	<
water	56:34	0:0	14	0
stmts	57:28	57:102	13	
call	57:28	57:101	14	fprintf
arg	57:36	57:42	15	stderr
water	57:36	0:0	16	stderr
arg	57:44	57:84	15	"Queuing command failed with error %s\n"
water	57:44	0:0	16	"Queuing command failed with error %s\n"
arg	57:86	57:101	15	av_err2str(ret)
call	57:86	57:100	16	av_err2str
arg	57:97	57:100	17	ret
water	57:97	0:0	18	ret
water	57:102	0:0	14	;
water	58:20	0:0	12	}
water	59:16	0:0	10	}
water	60:12	0:0	8	}
water	61:8	0:0	6	}
else	61:10	65:8	4
stmts	61:15	65:8	5	
water	61:15	0:0	6	{
call	62:12	64:59	6	av_log
arg	62:19	62:23	7	NULL
water	62:19	0:0	8	NULL
arg	62:25	62:37	7	AV_LOG_ERROR
water	62:25	0:0	8	AV_LOG_ERROR
arg	63:19	64:51	7	"Parse error, at least 3 arguments were expected, ""only %d given in string '%s'\n"
water	63:19	0:0	8	"Parse error, at least 3 arguments were expected, "
water	64:19	0:0	8	"only %d given in string '%s'\n"
arg	64:53	64:54	7	n
water	64:53	0:0	8	n
arg	64:56	64:59	7	buf
water	64:56	0:0	8	buf
water	64:60	0:0	6	;
water	65:8	0:0	6	}
water	66:4	0:0	4	}
if	67:4	97:4	2	(key == 'd' || key == 'D')
cond	67:8	67:29	3	key == 'd' || key == 'D'
water	67:8	0:0	4	key
op	67:12	0:0	4	==
water	67:15	0:0	4	'd'
op	67:19	0:0	4	||
water	67:22	0:0	4	key
op	67:26	0:0	4	==
water	67:29	0:0	4	'D'
stmts	67:33	97:4	3	
water	67:33	0:0	4	{
decl	68:8	68:19	4	int	debug
op	68:17	0:0	4	=
water	68:18	0:0	4	0
if	69:8	74:8	4	(key == 'D')
cond	69:11	69:18	5	key == 'D'
water	69:11	0:0	6	key
op	69:15	0:0	6	==
water	69:18	0:0	6	'D'
stmts	69:23	74:8	5	
water	69:23	0:0	6	{
water	70:12	0:0	6	debug
op	70:18	0:0	6	=
water	70:20	0:0	6	input_streams
op	70:33	0:0	6	[
water	70:34	0:0	6	0
op	70:35	0:0	6	]
op	70:36	0:0	6	->
water	70:38	0:0	6	st
op	70:40	0:0	6	->
water	70:42	0:0	6	codec
op	70:47	0:0	6	->
water	70:49	0:0	6	debug
op	70:54	0:0	6	<<
water	70:56	0:0	6	1
water	70:57	0:0	6	;
if	71:12	71:32	6	(! debug)
cond	71:15	71:16	7	! debug
op	71:15	0:0	8	!
water	71:16	0:0	8	debug
stmts	71:23	71:32	7	
water	71:23	0:0	8	debug
op	71:29	0:0	8	=
water	71:31	0:0	8	1
water	71:32	0:0	8	;
while	72:12	73:30	6	(debug & ( FF_DEBUG_DCT_COEFF | FF_DEBUG_VIS_QP | FF_DEBUG_VIS_MB_TYPE ))
cond	72:18	72:82	7	debug & ( FF_DEBUG_DCT_COEFF | FF_DEBUG_VIS_QP | FF_DEBUG_VIS_MB_TYPE )
water	72:18	0:0	8	debug
op	72:24	0:0	8	&
water	72:26	0:0	8	(
water	72:27	0:0	8	FF_DEBUG_DCT_COEFF
op	72:45	0:0	8	|
water	72:46	0:0	8	FF_DEBUG_VIS_QP
op	72:61	0:0	8	|
water	72:62	0:0	8	FF_DEBUG_VIS_MB_TYPE
water	72:82	0:0	8	)
stmts	73:16	73:30	7	
water	73:16	0:0	8	debug
op	73:22	0:0	8	+=
water	73:25	0:0	8	debug
water	73:30	0:0	8	;
water	74:8	0:0	6	}
else	74:9	87:8	4
stmts	74:13	87:8	5	
water	74:13	0:0	6	{
decl	75:12	75:24	6	char	buf[32]
decl	76:12	76:21	6	int	k
op	76:18	0:0	6	=
water	76:20	0:0	6	0
water	77:12	0:0	6	i
op	77:14	0:0	6	=
water	77:16	0:0	6	0
water	77:17	0:0	6	;
call	78:12	78:26	6	set_tty_echo
arg	78:25	78:26	7	1
water	78:25	0:0	8	1
water	78:27	0:0	6	;
while	79:12	81:32	6	(( k =read_key ( ) ) != '\n' && k != '\r' && i < sizeof ( buf ) - 1)
cond	79:19	79:76	7	( k =read_key ( ) ) != '\n' && k != '\r' && i < sizeof ( buf ) - 1
water	79:19	0:0	8	(
water	79:20	0:0	8	k
op	79:22	0:0	8	=
call	79:24	79:33	8	read_key
water	79:34	0:0	8	)
op	79:36	0:0	8	!=
water	79:39	0:0	8	'\n'
op	79:44	0:0	8	&&
water	79:47	0:0	8	k
op	79:49	0:0	8	!=
water	79:52	0:0	8	'\r'
op	79:57	0:0	8	&&
water	79:60	0:0	8	i
op	79:62	0:0	8	<
op	79:64	0:0	8	sizeof
water	79:70	0:0	8	(
water	79:71	0:0	8	buf
water	79:74	0:0	8	)
op	79:75	0:0	8	-
water	79:76	0:0	8	1
stmts	80:16	81:32	7	
if	80:16	81:32	8	(k > 0)
cond	80:20	80:24	9	k > 0
water	80:20	0:0	10	k
op	80:22	0:0	10	>
water	80:24	0:0	10	0
stmts	81:20	81:32	9	
water	81:20	0:0	10	buf
op	81:23	0:0	10	[
water	81:24	0:0	10	i
op	81:25	0:0	10	++
op	81:27	0:0	10	]
op	81:29	0:0	10	=
water	81:31	0:0	10	k
water	81:32	0:0	10	;
water	82:12	0:0	6	buf
op	82:15	0:0	6	[
water	82:16	0:0	6	i
op	82:17	0:0	6	]
op	82:19	0:0	6	=
water	82:21	0:0	6	0
water	82:22	0:0	6	;
call	83:12	83:26	6	set_tty_echo
arg	83:25	83:26	7	0
water	83:25	0:0	8	0
water	83:27	0:0	6	;
call	84:12	84:32	6	fprintf
arg	84:20	84:26	7	stderr
water	84:20	0:0	8	stderr
arg	84:28	84:32	7	"\n"
water	84:28	0:0	8	"\n"
water	84:33	0:0	6	;
if	85:12	86:61	6	(k <= 0 ||sscanf (buf ,"%d" ,& debug ) != 1)
cond	85:16	85:53	7	k <= 0 ||sscanf (buf ,"%d" ,& debug ) != 1
water	85:16	0:0	8	k
op	85:18	0:0	8	<=
water	85:21	0:0	8	0
op	85:23	0:0	8	||
call	85:26	85:50	8	sscanf
arg	85:33	85:36	9	buf
water	85:33	0:0	10	buf
arg	85:38	85:42	9	"%d"
water	85:38	0:0	10	"%d"
arg	85:44	85:50	9	&debug
op	85:44	0:0	10	&
water	85:45	0:0	10	debug
op	85:51	0:0	8	!=
water	85:53	0:0	8	1
stmts	86:16	86:61	7	
call	86:16	86:60	8	fprintf
arg	86:24	86:30	9	stderr
water	86:24	0:0	10	stderr
arg	86:31	86:60	9	"error parsing debug value\n"
water	86:31	0:0	10	"error parsing debug value\n"
water	86:61	0:0	8	;
water	87:8	0:0	6	}
for	88:8	90:8	4	(i = 0 ;i < nb_input_streams;i ++)
forinit	88:12	88:15	5	i = 0 ;
water	88:12	0:0	6	i
op	88:13	0:0	6	=
water	88:14	0:0	6	0
water	88:15	0:0	6	;
cond	88:16	88:18	5	i < nb_input_streams
water	88:16	0:0	6	i
op	88:17	0:0	6	<
water	88:18	0:0	6	nb_input_streams
forexpr	88:35	88:36	5	i ++
water	88:35	0:0	6	i
op	88:36	0:0	6	++
stmts	88:40	90:8	5	
water	88:40	0:0	6	{
water	89:12	0:0	6	input_streams
op	89:25	0:0	6	[
water	89:26	0:0	6	i
op	89:27	0:0	6	]
op	89:28	0:0	6	->
water	89:30	0:0	6	st
op	89:32	0:0	6	->
water	89:34	0:0	6	codec
op	89:39	0:0	6	->
water	89:41	0:0	6	debug
op	89:47	0:0	6	=
water	89:49	0:0	6	debug
water	89:54	0:0	6	;
water	90:8	0:0	6	}
for	91:8	94:8	4	(i = 0 ;i < nb_output_streams;i ++)
forinit	91:12	91:15	5	i = 0 ;
water	91:12	0:0	6	i
op	91:13	0:0	6	=
water	91:14	0:0	6	0
water	91:15	0:0	6	;
cond	91:16	91:18	5	i < nb_output_streams
water	91:16	0:0	6	i
op	91:17	0:0	6	<
water	91:18	0:0	6	nb_output_streams
forexpr	91:36	91:37	5	i ++
water	91:36	0:0	6	i
op	91:37	0:0	6	++
stmts	91:41	94:8	5	
water	91:41	0:0	6	{
decl	92:12	92:49	6	OutputStream	*ost
op	92:30	0:0	6	=
water	92:32	0:0	6	output_streams
op	92:46	0:0	6	[
water	92:47	0:0	6	i
op	92:48	0:0	6	]
water	93:12	0:0	6	ost
op	93:15	0:0	6	->
water	93:17	0:0	6	enc_ctx
op	93:24	0:0	6	->
water	93:26	0:0	6	debug
op	93:32	0:0	6	=
water	93:34	0:0	6	debug
water	93:39	0:0	6	;
water	94:8	0:0	6	}
if	95:8	95:48	4	(debug)
cond	95:11	95:11	5	debug
water	95:11	0:0	6	debug
stmts	95:18	95:48	5	
call	95:18	95:47	6	av_log_set_level
arg	95:35	95:47	7	AV_LOG_DEBUG
water	95:35	0:0	8	AV_LOG_DEBUG
water	95:48	0:0	6	;
call	96:8	96:42	4	fprintf
arg	96:16	96:22	5	stderr
water	96:16	0:0	6	stderr
arg	96:23	96:35	5	"debug=%d\n"
water	96:23	0:0	6	"debug=%d\n"
arg	96:37	96:42	5	debug
water	96:37	0:0	6	debug
water	96:43	0:0	4	;
water	97:4	0:0	4	}
if	98:4	110:4	2	(key == '?')
cond	98:8	98:15	3	key == '?'
water	98:8	0:0	4	key
op	98:12	0:0	4	==
water	98:15	0:0	4	'?'
stmts	98:19	110:4	3	
water	98:19	0:0	4	{
call	99:8	109:8	4	fprintf
arg	99:16	99:22	5	stderr
water	99:16	0:0	6	stderr
arg	99:24	109:8	5	"key    function\n""?      show this help\n""+      increase verbosity\n""-      decrease verbosity\n""c      Send command to first matching filter supporting it\n""C      Send/Queue command to all matching filters\n""D      cycle through available debug modes\n""h      dump packets/hex press to cycle through the 3 states\n""q      quit\n""s      Show QP histogram\n"
water	99:24	0:0	6	"key    function\n"
water	100:24	0:0	6	"?      show this help\n"
water	101:24	0:0	6	"+      increase verbosity\n"
water	102:24	0:0	6	"-      decrease verbosity\n"
water	103:24	0:0	6	"c      Send command to first matching filter supporting it\n"
water	104:24	0:0	6	"C      Send/Queue command to all matching filters\n"
water	105:24	0:0	6	"D      cycle through available debug modes\n"
water	106:24	0:0	6	"h      dump packets/hex press to cycle through the 3 states\n"
water	107:24	0:0	6	"q      quit\n"
water	108:24	0:0	6	"s      Show QP histogram\n"
water	109:9	0:0	4	;
water	110:4	0:0	4	}
return	111:4	111:12	2	0
water	111:11	0:0	3	0
