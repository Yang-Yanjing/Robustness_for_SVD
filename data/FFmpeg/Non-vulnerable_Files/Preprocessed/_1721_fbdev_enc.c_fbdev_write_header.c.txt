func	1:15	48:0	0	int	fbdev_write_header
params	1:37	0:0	1	
param	1:38	1:56	2	AVFormatContext *	h
stmnts	0:0	47:14	1	
decl	3:4	3:38	2	FBDevContext	*fbdev
op	3:24	0:0	2	=
water	3:26	0:0	2	h
op	3:27	0:0	2	->
water	3:29	0:0	2	priv_data
decl	4:4	4:30	2	enum AVPixelFormat	pix_fmt
decl	5:4	5:27	2	int	ret
water	5:11	0:0	2	,
decl	5:4	5:27	2	int	flags
op	5:19	0:0	2	=
water	5:21	0:0	2	O_RDWR
decl	6:4	6:22	2	const char	*device
if	7:4	10:4	2	(h -> nb_streams != 1 || h -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_VIDEO)
cond	7:8	7:66	3	h -> nb_streams != 1 || h -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_VIDEO
water	7:8	0:0	4	h
op	7:9	0:0	4	->
water	7:11	0:0	4	nb_streams
op	7:22	0:0	4	!=
water	7:25	0:0	4	1
op	7:27	0:0	4	||
water	7:30	0:0	4	h
op	7:31	0:0	4	->
water	7:33	0:0	4	streams
op	7:40	0:0	4	[
water	7:41	0:0	4	0
op	7:42	0:0	4	]
op	7:43	0:0	4	->
water	7:45	0:0	4	codec
op	7:50	0:0	4	->
water	7:52	0:0	4	codec_type
op	7:63	0:0	4	!=
water	7:66	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	7:86	10:4	3	
water	7:86	0:0	4	{
call	8:8	8:80	4	av_log
arg	8:15	8:20	5	fbdev
water	8:15	0:0	6	fbdev
arg	8:22	8:34	5	AV_LOG_ERROR
water	8:22	0:0	6	AV_LOG_ERROR
arg	8:36	8:80	5	"Only a single video stream is supported.\n"
water	8:36	0:0	6	"Only a single video stream is supported.\n"
water	8:81	0:0	4	;
return	9:8	9:30	4	AVERROR(EINVAL)
call	9:15	9:29	5	AVERROR
arg	9:23	9:29	6	EINVAL
water	9:23	0:0	7	EINVAL
water	10:4	0:0	4	}
if	11:4	12:28	2	(h -> filename [ 0 ])
cond	11:8	11:21	3	h -> filename [ 0 ]
water	11:8	0:0	4	h
op	11:9	0:0	4	->
water	11:11	0:0	4	filename
op	11:19	0:0	4	[
water	11:20	0:0	4	0
op	11:21	0:0	4	]
stmts	12:8	12:28	3	
water	12:8	0:0	4	device
op	12:15	0:0	4	=
water	12:17	0:0	4	h
op	12:18	0:0	4	->
water	12:20	0:0	4	filename
water	12:28	0:0	4	;
else	13:4	14:42	2
stmts	14:8	14:42	3	
water	14:8	0:0	4	device
op	14:15	0:0	4	=
call	14:17	14:41	4	ff_fbdev_default_device
water	14:42	0:0	4	;
if	15:4	21:4	2	(( fbdev -> fd =avpriv_open (device ,flags ) ) == - 1)
cond	15:8	15:53	3	( fbdev -> fd =avpriv_open (device ,flags ) ) == - 1
water	15:8	0:0	4	(
water	15:9	0:0	4	fbdev
op	15:14	0:0	4	->
water	15:16	0:0	4	fd
op	15:19	0:0	4	=
call	15:21	15:46	4	avpriv_open
arg	15:33	15:39	5	device
water	15:33	0:0	6	device
arg	15:41	15:46	5	flags
water	15:41	0:0	6	flags
water	15:47	0:0	4	)
op	15:49	0:0	4	==
op	15:52	0:0	4	-
water	15:53	0:0	4	1
stmts	15:56	21:4	3	
water	15:56	0:0	4	{
water	16:8	0:0	4	ret
op	16:12	0:0	4	=
call	16:14	16:27	4	AVERROR
arg	16:22	16:27	5	errno
water	16:22	0:0	6	errno
water	16:28	0:0	4	;
call	17:8	19:38	4	av_log
arg	17:15	17:16	5	h
water	17:15	0:0	6	h
arg	17:18	17:30	5	AV_LOG_ERROR
water	17:18	0:0	6	AV_LOG_ERROR
arg	18:15	18:61	5	"Could not open framebuffer device '%s': %s\n"
water	18:15	0:0	6	"Could not open framebuffer device '%s': %s\n"
arg	19:15	19:21	5	device
water	19:15	0:0	6	device
arg	19:23	19:38	5	av_err2str(ret)
call	19:23	19:37	6	av_err2str
arg	19:34	19:37	7	ret
water	19:34	0:0	8	ret
water	19:39	0:0	4	;
return	20:8	20:18	4	ret
water	20:15	0:0	5	ret
water	21:4	0:0	4	}
if	22:4	26:4	2	(ioctl (fbdev -> fd ,FBIOGET_VSCREENINFO ,& fbdev -> varinfo ) < 0)
cond	22:8	22:65	3	ioctl (fbdev -> fd ,FBIOGET_VSCREENINFO ,& fbdev -> varinfo ) < 0
call	22:8	22:61	4	ioctl
arg	22:14	22:23	5	fbdev->fd
water	22:14	0:0	6	fbdev
op	22:19	0:0	6	->
water	22:21	0:0	6	fd
arg	22:25	22:44	5	FBIOGET_VSCREENINFO
water	22:25	0:0	6	FBIOGET_VSCREENINFO
arg	22:46	22:61	5	&fbdev->varinfo
op	22:46	0:0	6	&
water	22:47	0:0	6	fbdev
op	22:52	0:0	6	->
water	22:54	0:0	6	varinfo
op	22:63	0:0	4	<
water	22:65	0:0	4	0
stmts	22:68	26:4	3	
water	22:68	0:0	4	{
water	23:8	0:0	4	ret
op	23:12	0:0	4	=
call	23:14	23:27	4	AVERROR
arg	23:22	23:27	5	errno
water	23:22	0:0	6	errno
water	23:28	0:0	4	;
call	24:8	24:76	4	av_log
arg	24:15	24:16	5	h
water	24:15	0:0	6	h
arg	24:18	24:30	5	AV_LOG_ERROR
water	24:18	0:0	6	AV_LOG_ERROR
arg	24:32	24:59	5	"FBIOGET_VSCREENINFO: %s\n"
water	24:32	0:0	6	"FBIOGET_VSCREENINFO: %s\n"
arg	24:61	24:76	5	av_err2str(ret)
call	24:61	24:75	6	av_err2str
arg	24:72	24:75	7	ret
water	24:72	0:0	8	ret
water	24:77	0:0	4	;
goto	25:8	25:17	4	fail
water	25:13	0:0	5	fail
water	26:4	0:0	4	}
if	27:4	31:4	2	(ioctl (fbdev -> fd ,FBIOGET_FSCREENINFO ,& fbdev -> fixinfo ) < 0)
cond	27:8	27:65	3	ioctl (fbdev -> fd ,FBIOGET_FSCREENINFO ,& fbdev -> fixinfo ) < 0
call	27:8	27:61	4	ioctl
arg	27:14	27:23	5	fbdev->fd
water	27:14	0:0	6	fbdev
op	27:19	0:0	6	->
water	27:21	0:0	6	fd
arg	27:25	27:44	5	FBIOGET_FSCREENINFO
water	27:25	0:0	6	FBIOGET_FSCREENINFO
arg	27:46	27:61	5	&fbdev->fixinfo
op	27:46	0:0	6	&
water	27:47	0:0	6	fbdev
op	27:52	0:0	6	->
water	27:54	0:0	6	fixinfo
op	27:63	0:0	4	<
water	27:65	0:0	4	0
stmts	27:68	31:4	3	
water	27:68	0:0	4	{
water	28:8	0:0	4	ret
op	28:12	0:0	4	=
call	28:14	28:27	4	AVERROR
arg	28:22	28:27	5	errno
water	28:22	0:0	6	errno
water	28:28	0:0	4	;
call	29:8	29:76	4	av_log
arg	29:15	29:16	5	h
water	29:15	0:0	6	h
arg	29:18	29:30	5	AV_LOG_ERROR
water	29:18	0:0	6	AV_LOG_ERROR
arg	29:32	29:59	5	"FBIOGET_FSCREENINFO: %s\n"
water	29:32	0:0	6	"FBIOGET_FSCREENINFO: %s\n"
arg	29:61	29:76	5	av_err2str(ret)
call	29:61	29:75	6	av_err2str
arg	29:72	29:75	7	ret
water	29:72	0:0	8	ret
water	29:77	0:0	4	;
goto	30:8	30:17	4	fail
water	30:13	0:0	5	fail
water	31:4	0:0	4	}
water	32:4	0:0	2	pix_fmt
op	32:12	0:0	2	=
call	32:14	32:59	2	ff_get_pixfmt_from_fb_varinfo
arg	32:44	32:59	3	&fbdev->varinfo
op	32:44	0:0	4	&
water	32:45	0:0	4	fbdev
op	32:50	0:0	4	->
water	32:52	0:0	4	varinfo
water	32:60	0:0	2	;
if	33:4	37:4	2	(pix_fmt == AV_PIX_FMT_NONE)
cond	33:8	33:19	3	pix_fmt == AV_PIX_FMT_NONE
water	33:8	0:0	4	pix_fmt
op	33:16	0:0	4	==
water	33:19	0:0	4	AV_PIX_FMT_NONE
stmts	33:36	37:4	3	
water	33:36	0:0	4	{
water	34:8	0:0	4	ret
op	34:12	0:0	4	=
call	34:14	34:28	4	AVERROR
arg	34:22	34:28	5	EINVAL
water	34:22	0:0	6	EINVAL
water	34:29	0:0	4	;
call	35:8	35:75	4	av_log
arg	35:15	35:16	5	h
water	35:15	0:0	6	h
arg	35:18	35:30	5	AV_LOG_ERROR
water	35:18	0:0	6	AV_LOG_ERROR
arg	35:32	35:75	5	"Framebuffer pixel format not supported.\n"
water	35:32	0:0	6	"Framebuffer pixel format not supported.\n"
water	35:76	0:0	4	;
goto	36:8	36:17	4	fail
water	36:13	0:0	5	fail
water	37:4	0:0	4	}
water	38:4	0:0	2	fbdev
op	38:9	0:0	2	->
water	38:11	0:0	2	data
op	38:16	0:0	2	=
call	38:18	38:90	2	mmap
arg	38:23	38:27	3	NULL
water	38:23	0:0	4	NULL
arg	38:29	38:52	3	fbdev->fixinfo.smem_len
water	38:29	0:0	4	fbdev
op	38:34	0:0	4	->
water	38:36	0:0	4	fixinfo
op	38:43	0:0	4	.
water	38:44	0:0	4	smem_len
arg	38:54	38:64	3	PROT_WRITE
water	38:54	0:0	4	PROT_WRITE
arg	38:66	38:76	3	MAP_SHARED
water	38:66	0:0	4	MAP_SHARED
arg	38:78	38:87	3	fbdev->fd
water	38:78	0:0	4	fbdev
op	38:83	0:0	4	->
water	38:85	0:0	4	fd
arg	38:89	38:90	3	0
water	38:89	0:0	4	0
water	38:91	0:0	2	;
if	39:4	43:4	2	(fbdev -> data == MAP_FAILED)
cond	39:8	39:23	3	fbdev -> data == MAP_FAILED
water	39:8	0:0	4	fbdev
op	39:13	0:0	4	->
water	39:15	0:0	4	data
op	39:20	0:0	4	==
water	39:23	0:0	4	MAP_FAILED
stmts	39:35	43:4	3	
water	39:35	0:0	4	{
water	40:8	0:0	4	ret
op	40:12	0:0	4	=
call	40:14	40:27	4	AVERROR
arg	40:22	40:27	5	errno
water	40:22	0:0	6	errno
water	40:28	0:0	4	;
call	41:8	41:72	4	av_log
arg	41:15	41:16	5	h
water	41:15	0:0	6	h
arg	41:18	41:30	5	AV_LOG_ERROR
water	41:18	0:0	6	AV_LOG_ERROR
arg	41:32	41:55	5	"Error in mmap(): %s\n"
water	41:32	0:0	6	"Error in mmap(): %s\n"
arg	41:57	41:72	5	av_err2str(ret)
call	41:57	41:71	6	av_err2str
arg	41:68	41:71	7	ret
water	41:68	0:0	8	ret
water	41:73	0:0	4	;
goto	42:8	42:17	4	fail
water	42:13	0:0	5	fail
water	43:4	0:0	4	}
return	44:4	44:12	2	0
water	44:11	0:0	3	0
label	45:2	45:6	2	fail :
call	46:4	46:19	2	close
arg	46:10	46:19	3	fbdev->fd
water	46:10	0:0	4	fbdev
op	46:15	0:0	4	->
water	46:17	0:0	4	fd
water	46:20	0:0	2	;
return	47:4	47:14	2	ret
water	47:11	0:0	3	ret
