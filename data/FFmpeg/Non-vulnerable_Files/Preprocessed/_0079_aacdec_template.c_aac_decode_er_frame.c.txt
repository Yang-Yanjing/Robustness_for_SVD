func	1:0	57:0	0	static int	aac_decode_er_frame
params	1:30	0:0	1	
param	1:31	1:52	2	AVCodecContext *	avctx
param	1:54	1:64	2	void *	data
param	2:31	2:49	2	int *	got_frame_ptr
param	2:51	2:68	2	GetBitContext *	gb
stmnts	0:0	56:12	1	
decl	4:4	4:37	2	AACContext	*ac
op	4:19	0:0	2	=
water	4:21	0:0	2	avctx
op	4:26	0:0	2	->
water	4:28	0:0	2	priv_data
water	5:4	0:0	2	const
water	5:10	0:0	2	MPEG4AudioConfig
op	5:27	0:0	2	*
water	5:28	0:0	2	const
water	5:34	0:0	2	m4ac
op	5:39	0:0	2	=
op	5:41	0:0	2	&
water	5:42	0:0	2	ac
op	5:44	0:0	2	->
water	5:46	0:0	2	oc
op	5:48	0:0	2	[
water	5:49	0:0	2	1
op	5:50	0:0	2	]
op	5:51	0:0	2	.
water	5:52	0:0	2	m4ac
water	5:56	0:0	2	;
decl	6:4	6:23	2	ChannelElement	*che
decl	7:4	7:14	2	int	err
water	7:11	0:0	2	,
decl	7:4	7:14	2	int	i
decl	8:4	8:55	2	int	samples
op	8:16	0:0	2	=
water	8:18	0:0	2	m4ac
op	8:22	0:0	2	->
water	8:24	0:0	2	frame_length_short
water	8:43	0:0	2	?
water	8:45	0:0	2	960
water	8:49	0:0	2	:
water	8:51	0:0	2	1024
decl	9:4	9:39	2	int	chan_config
op	9:20	0:0	2	=
water	9:22	0:0	2	m4ac
op	9:26	0:0	2	->
water	9:28	0:0	2	chan_config
decl	10:4	10:31	2	int	aot
op	10:12	0:0	2	=
water	10:14	0:0	2	m4ac
op	10:18	0:0	2	->
water	10:20	0:0	2	object_type
if	11:4	12:21	2	(aot == AOT_ER_AAC_LD || aot == AOT_ER_AAC_ELD)
cond	11:8	11:39	3	aot == AOT_ER_AAC_LD || aot == AOT_ER_AAC_ELD
water	11:8	0:0	4	aot
op	11:12	0:0	4	==
water	11:15	0:0	4	AOT_ER_AAC_LD
op	11:29	0:0	4	||
water	11:32	0:0	4	aot
op	11:36	0:0	4	==
water	11:39	0:0	4	AOT_ER_AAC_ELD
stmts	12:8	12:21	3	
water	12:8	0:0	4	samples
op	12:16	0:0	4	>>=
water	12:20	0:0	4	1
water	12:21	0:0	4	;
water	13:4	0:0	2	ac
op	13:6	0:0	2	->
water	13:8	0:0	2	frame
op	13:14	0:0	2	=
water	13:16	0:0	2	data
water	13:20	0:0	2	;
if	14:4	15:18	2	(( err =frame_configure_elements (avctx ) ) < 0)
cond	14:8	14:50	3	( err =frame_configure_elements (avctx ) ) < 0
water	14:8	0:0	4	(
water	14:9	0:0	4	err
op	14:13	0:0	4	=
call	14:15	14:45	4	frame_configure_elements
arg	14:40	14:45	5	avctx
water	14:40	0:0	6	avctx
water	14:46	0:0	4	)
op	14:48	0:0	4	<
water	14:50	0:0	4	0
stmts	15:8	15:18	3	
return	15:8	15:18	4	err
water	15:15	0:0	5	err
water	18:4	0:0	2	ac
op	18:6	0:0	2	->
water	18:8	0:0	2	avctx
op	18:13	0:0	2	->
water	18:15	0:0	2	profile
op	18:23	0:0	2	=
water	18:25	0:0	2	aot
op	18:29	0:0	2	-
water	18:31	0:0	2	1
water	18:32	0:0	2	;
water	19:4	0:0	2	ac
op	19:6	0:0	2	->
water	19:8	0:0	2	tags_mapped
op	19:20	0:0	2	=
water	19:22	0:0	2	0
water	19:23	0:0	2	;
if	20:4	24:4	2	(chan_config < 0 || ( chan_config >= 8 && chan_config < 11 ) || chan_config >= 13)
cond	20:8	20:84	3	chan_config < 0 || ( chan_config >= 8 && chan_config < 11 ) || chan_config >= 13
water	20:8	0:0	4	chan_config
op	20:20	0:0	4	<
water	20:22	0:0	4	0
op	20:24	0:0	4	||
water	20:27	0:0	4	(
water	20:28	0:0	4	chan_config
op	20:40	0:0	4	>=
water	20:43	0:0	4	8
op	20:45	0:0	4	&&
water	20:48	0:0	4	chan_config
op	20:60	0:0	4	<
water	20:62	0:0	4	11
water	20:64	0:0	4	)
op	20:66	0:0	4	||
water	20:69	0:0	4	chan_config
op	20:81	0:0	4	>=
water	20:84	0:0	4	13
stmts	20:88	24:4	3	
water	20:88	0:0	4	{
call	21:8	22:41	4	avpriv_request_sample
arg	21:30	21:35	5	avctx
water	21:30	0:0	6	avctx
arg	21:37	21:74	5	"Unknown ER channel configuration %d"
water	21:37	0:0	6	"Unknown ER channel configuration %d"
arg	22:30	22:41	5	chan_config
water	22:30	0:0	6	chan_config
water	22:42	0:0	4	;
return	23:8	23:34	4	AVERROR_INVALIDDATA
water	23:15	0:0	5	AVERROR_INVALIDDATA
water	24:4	0:0	4	}
for	25:4	50:4	2	(i = 0 ;i < tags_per_config [ chan_config ];i ++)
forinit	25:9	25:14	3	i = 0 ;
water	25:9	0:0	4	i
op	25:11	0:0	4	=
water	25:13	0:0	4	0
water	25:14	0:0	4	;
cond	25:16	25:47	3	i < tags_per_config [ chan_config ]
water	25:16	0:0	4	i
op	25:18	0:0	4	<
water	25:20	0:0	4	tags_per_config
op	25:35	0:0	4	[
water	25:36	0:0	4	chan_config
op	25:47	0:0	4	]
forexpr	25:50	25:51	3	i ++
water	25:50	0:0	4	i
op	25:51	0:0	4	++
stmts	25:55	50:4	3	
water	25:55	0:0	4	{
decl	26:8	26:73	4	const int	elem_type
op	26:28	0:0	4	=
water	26:30	0:0	4	aac_channel_layout_map
op	26:52	0:0	4	[
water	26:53	0:0	4	chan_config
op	26:64	0:0	4	-
water	26:65	0:0	4	1
op	26:66	0:0	4	]
op	26:67	0:0	4	[
water	26:68	0:0	4	i
op	26:69	0:0	4	]
op	26:70	0:0	4	[
water	26:71	0:0	4	0
op	26:72	0:0	4	]
decl	27:8	27:73	4	const int	elem_id
op	27:28	0:0	4	=
water	27:30	0:0	4	aac_channel_layout_map
op	27:52	0:0	4	[
water	27:53	0:0	4	chan_config
op	27:64	0:0	4	-
water	27:65	0:0	4	1
op	27:66	0:0	4	]
op	27:67	0:0	4	[
water	27:68	0:0	4	i
op	27:69	0:0	4	]
op	27:70	0:0	4	[
water	27:71	0:0	4	1
op	27:72	0:0	4	]
if	28:8	33:8	4	(! ( che =get_che (ac ,elem_type ,elem_id ) ))
cond	28:12	28:49	5	! ( che =get_che (ac ,elem_type ,elem_id ) )
op	28:12	0:0	6	!
water	28:13	0:0	6	(
water	28:14	0:0	6	che
op	28:17	0:0	6	=
call	28:18	28:48	6	get_che
arg	28:26	28:28	7	ac
water	28:26	0:0	8	ac
arg	28:30	28:39	7	elem_type
water	28:30	0:0	8	elem_type
arg	28:41	28:48	7	elem_id
water	28:41	0:0	8	elem_id
water	28:49	0:0	6	)
stmts	28:52	33:8	5	
water	28:52	0:0	6	{
call	29:12	31:37	6	av_log
arg	29:19	29:28	7	ac->avctx
water	29:19	0:0	8	ac
op	29:21	0:0	8	->
water	29:23	0:0	8	avctx
arg	29:30	29:42	7	AV_LOG_ERROR
water	29:30	0:0	8	AV_LOG_ERROR
arg	30:19	30:61	7	"channel element %d.%d is not allocated\n"
water	30:19	0:0	8	"channel element %d.%d is not allocated\n"
arg	31:19	31:28	7	elem_type
water	31:19	0:0	8	elem_type
arg	31:30	31:37	7	elem_id
water	31:30	0:0	8	elem_id
water	31:38	0:0	6	;
return	32:12	32:38	6	AVERROR_INVALIDDATA
water	32:19	0:0	7	AVERROR_INVALIDDATA
water	33:8	0:0	6	}
water	34:8	0:0	4	che
op	34:11	0:0	4	->
water	34:13	0:0	4	present
op	34:21	0:0	4	=
water	34:23	0:0	4	1
water	34:24	0:0	4	;
if	35:8	36:28	4	(aot != AOT_ER_AAC_ELD)
cond	35:12	35:19	5	aot != AOT_ER_AAC_ELD
water	35:12	0:0	6	aot
op	35:16	0:0	6	!=
water	35:19	0:0	6	AOT_ER_AAC_ELD
stmts	36:12	36:28	5	
call	36:12	36:27	6	skip_bits
arg	36:22	36:24	7	gb
water	36:22	0:0	8	gb
arg	36:26	36:27	7	4
water	36:26	0:0	8	4
water	36:28	0:0	6	;
switch	37:8	47:8	4	(elem_type)
cond	37:16	37:16	5	elem_type
water	37:16	0:0	6	elem_type
stmts	37:27	47:8	5	
water	37:27	0:0	6	{
label	38:8	38:21	6	case TYPE_SCE :
water	39:12	0:0	6	err
op	39:16	0:0	6	=
call	39:18	39:54	6	decode_ics
arg	39:29	39:31	7	ac
water	39:29	0:0	8	ac
arg	39:33	39:44	7	&che->ch[0]
op	39:33	0:0	8	&
water	39:34	0:0	8	che
op	39:37	0:0	8	->
water	39:39	0:0	8	ch
op	39:41	0:0	8	[
water	39:42	0:0	8	0
op	39:43	0:0	8	]
arg	39:46	39:48	7	gb
water	39:46	0:0	8	gb
arg	39:50	39:51	7	0
water	39:50	0:0	8	0
arg	39:53	39:54	7	0
water	39:53	0:0	8	0
water	39:55	0:0	6	;
break	40:12	40:17	6	
label	41:8	41:21	6	case TYPE_CPE :
water	42:12	0:0	6	err
op	42:16	0:0	6	=
call	42:18	42:40	6	decode_cpe
arg	42:29	42:31	7	ac
water	42:29	0:0	8	ac
arg	42:33	42:35	7	gb
water	42:33	0:0	8	gb
arg	42:37	42:40	7	che
water	42:37	0:0	8	che
water	42:41	0:0	6	;
break	43:12	43:17	6	
label	44:8	44:21	6	case TYPE_LFE :
water	45:12	0:0	6	err
op	45:16	0:0	6	=
call	45:18	45:54	6	decode_ics
arg	45:29	45:31	7	ac
water	45:29	0:0	8	ac
arg	45:33	45:44	7	&che->ch[0]
op	45:33	0:0	8	&
water	45:34	0:0	8	che
op	45:37	0:0	8	->
water	45:39	0:0	8	ch
op	45:41	0:0	8	[
water	45:42	0:0	8	0
op	45:43	0:0	8	]
arg	45:46	45:48	7	gb
water	45:46	0:0	8	gb
arg	45:50	45:51	7	0
water	45:50	0:0	8	0
arg	45:53	45:54	7	0
water	45:53	0:0	8	0
water	45:55	0:0	6	;
break	46:12	46:17	6	
water	47:8	0:0	6	}
if	48:8	49:22	4	(err < 0)
cond	48:12	48:18	5	err < 0
water	48:12	0:0	6	err
op	48:16	0:0	6	<
water	48:18	0:0	6	0
stmts	49:12	49:22	5	
return	49:12	49:22	6	err
water	49:19	0:0	7	err
water	50:4	0:0	4	}
call	51:4	51:34	2	spectral_to_sample
arg	51:23	51:25	3	ac
water	51:23	0:0	4	ac
arg	51:27	51:34	3	samples
water	51:27	0:0	4	samples
water	51:35	0:0	2	;
water	52:4	0:0	2	ac
op	52:6	0:0	2	->
water	52:8	0:0	2	frame
op	52:13	0:0	2	->
water	52:15	0:0	2	nb_samples
op	52:26	0:0	2	=
water	52:28	0:0	2	samples
water	52:35	0:0	2	;
water	53:4	0:0	2	ac
op	53:6	0:0	2	->
water	53:8	0:0	2	frame
op	53:13	0:0	2	->
water	53:15	0:0	2	sample_rate
op	53:27	0:0	2	=
water	53:29	0:0	2	avctx
op	53:34	0:0	2	->
water	53:36	0:0	2	sample_rate
water	53:47	0:0	2	;
op	54:4	0:0	2	*
water	54:5	0:0	2	got_frame_ptr
op	54:19	0:0	2	=
water	54:21	0:0	2	1
water	54:22	0:0	2	;
call	55:4	55:40	2	skip_bits_long
arg	55:19	55:21	3	gb
water	55:19	0:0	4	gb
arg	55:23	55:40	3	get_bits_left(gb)
call	55:23	55:39	4	get_bits_left
arg	55:37	55:39	5	gb
water	55:37	0:0	6	gb
water	55:41	0:0	2	;
return	56:4	56:12	2	0
water	56:11	0:0	3	0
