func	2:0	141:0	0	static int	doTest
params	2:17	0:0	1	
param	2:18	2:33	2	uint8_t *	ref[4]
param	2:35	2:51	2	int	refStride[4]
param	2:53	2:58	2	int	w
param	2:60	2:65	2	int	h
param	3:18	3:46	2	enum AVPixelFormat	srcFormat
param	3:48	3:76	2	enum AVPixelFormat	dstFormat
param	4:18	4:26	2	int	srcW
param	4:28	4:36	2	int	srcH
param	4:38	4:46	2	int	dstW
param	4:48	4:56	2	int	dstH
param	4:58	4:67	2	int	flags
param	5:18	5:35	2	struct Results *	r
stmnts	0:0	140:14	1	
decl	7:4	7:86	2	const AVPixFmtDescriptor	*desc_yuva420p
op	7:44	0:0	2	=
call	7:46	7:85	3	av_pix_fmt_desc_get
arg	7:66	7:85	4	AV_PIX_FMT_YUVA420P
water	7:66	0:0	5	AV_PIX_FMT_YUVA420P
decl	8:4	8:76	2	const AVPixFmtDescriptor	*desc_src
op	8:44	0:0	2	=
call	8:46	8:75	3	av_pix_fmt_desc_get
arg	8:66	8:75	4	srcFormat
water	8:66	0:0	5	srcFormat
decl	9:4	9:76	2	const AVPixFmtDescriptor	*desc_dst
op	9:44	0:0	2	=
call	9:46	9:75	3	av_pix_fmt_desc_get
arg	9:66	9:75	4	dstFormat
water	9:66	0:0	5	dstFormat
water	10:4	0:0	2	static
water	10:11	0:0	2	enum
water	10:16	0:0	2	AVPixelFormat
water	10:30	0:0	2	cur_srcFormat
water	10:43	0:0	2	;
water	11:4	0:0	2	static
water	11:11	0:0	2	int
water	11:15	0:0	2	cur_srcW
water	11:23	0:0	2	,
water	11:25	0:0	2	cur_srcH
water	11:33	0:0	2	;
water	12:4	0:0	2	static
water	12:11	0:0	2	uint8_t
op	12:19	0:0	2	*
water	12:20	0:0	2	src
op	12:23	0:0	2	[
water	12:24	0:0	2	4
op	12:25	0:0	2	]
water	12:26	0:0	2	;
water	13:4	0:0	2	static
water	13:11	0:0	2	int
water	13:15	0:0	2	srcStride
op	13:24	0:0	2	[
water	13:25	0:0	2	4
op	13:26	0:0	2	]
water	13:27	0:0	2	;
decl	14:4	14:27	2	uint8_t	*dst[4]
op	14:20	0:0	2	=
water	14:22	0:0	2	{
water	14:24	0:0	2	0
water	14:26	0:0	2	}
decl	15:4	15:27	2	uint8_t	*out[4]
op	15:20	0:0	2	=
water	15:22	0:0	2	{
water	15:24	0:0	2	0
water	15:26	0:0	2	}
decl	16:4	16:26	2	int	dstStride[4]
op	16:21	0:0	2	=
water	16:23	0:0	2	{
water	16:24	0:0	2	0
water	16:25	0:0	2	}
decl	17:4	17:9	2	int	i
decl	18:4	18:47	2	uint64_t	ssdY
water	18:17	0:0	2	,
decl	18:4	18:47	2	uint64_t	ssdU
op	18:24	0:0	2	=
water	18:26	0:0	2	0
water	18:27	0:0	2	,
decl	18:4	18:47	2	uint64_t	ssdV
op	18:34	0:0	2	=
water	18:36	0:0	2	0
water	18:37	0:0	2	,
decl	18:4	18:47	2	uint64_t	ssdA
op	18:44	0:0	2	=
water	18:46	0:0	2	0
decl	19:4	19:60	2	struct SwsContext	*dstContext
op	19:34	0:0	2	=
water	19:36	0:0	2	NULL
water	19:40	0:0	2	,
decl	19:4	19:60	2	struct SwsContext	*outContext
op	19:54	0:0	2	=
water	19:56	0:0	2	NULL
decl	20:4	20:20	2	uint32_t	crc
op	20:17	0:0	2	=
water	20:19	0:0	2	0
decl	21:4	21:20	2	int	res
op	21:17	0:0	2	=
water	21:19	0:0	2	0
if	22:4	52:4	2	(cur_srcFormat != srcFormat || cur_srcW != srcW || cur_srcH != srcH)
cond	22:8	22:70	3	cur_srcFormat != srcFormat || cur_srcW != srcW || cur_srcH != srcH
water	22:8	0:0	4	cur_srcFormat
op	22:22	0:0	4	!=
water	22:25	0:0	4	srcFormat
op	22:35	0:0	4	||
water	22:38	0:0	4	cur_srcW
op	22:47	0:0	4	!=
water	22:50	0:0	4	srcW
op	22:55	0:0	4	||
water	22:58	0:0	4	cur_srcH
op	22:67	0:0	4	!=
water	22:70	0:0	4	srcH
stmts	22:76	52:4	3	
water	22:76	0:0	4	{
decl	23:8	23:44	4	struct SwsContext	*srcContext
op	23:38	0:0	4	=
water	23:40	0:0	4	NULL
decl	24:8	24:13	4	int	p
for	25:8	26:29	4	(p = 0 ;p < 4;p ++)
forinit	25:13	25:18	5	p = 0 ;
water	25:13	0:0	6	p
op	25:15	0:0	6	=
water	25:17	0:0	6	0
water	25:18	0:0	6	;
cond	25:20	25:24	5	p < 4
water	25:20	0:0	6	p
op	25:22	0:0	6	<
water	25:24	0:0	6	4
forexpr	25:27	25:28	5	p ++
water	25:27	0:0	6	p
op	25:28	0:0	6	++
stmts	26:12	26:29	5	
call	26:12	26:28	6	av_freep
arg	26:21	26:28	7	&src[p]
op	26:21	0:0	8	&
water	26:22	0:0	8	src
op	26:25	0:0	8	[
water	26:26	0:0	8	p
op	26:27	0:0	8	]
water	26:29	0:0	6	;
call	27:8	27:58	4	av_image_fill_linesizes
arg	27:32	27:41	5	srcStride
water	27:32	0:0	6	srcStride
arg	27:43	27:52	5	srcFormat
water	27:43	0:0	6	srcFormat
arg	27:54	27:58	5	srcW
water	27:54	0:0	6	srcW
water	27:59	0:0	4	;
for	28:8	37:8	4	(p = 0 ;p < 4;p ++)
forinit	28:13	28:18	5	p = 0 ;
water	28:13	0:0	6	p
op	28:15	0:0	6	=
water	28:17	0:0	6	0
water	28:18	0:0	6	;
cond	28:20	28:24	5	p < 4
water	28:20	0:0	6	p
op	28:22	0:0	6	<
water	28:24	0:0	6	4
forexpr	28:27	28:28	5	p ++
water	28:27	0:0	6	p
op	28:28	0:0	6	++
stmts	28:32	37:8	5	
water	28:32	0:0	6	{
water	29:12	0:0	6	srcStride
op	29:21	0:0	6	[
water	29:22	0:0	6	p
op	29:23	0:0	6	]
op	29:25	0:0	6	=
call	29:27	29:51	6	FFALIGN
arg	29:35	29:47	7	srcStride[p]
water	29:35	0:0	8	srcStride
op	29:44	0:0	8	[
water	29:45	0:0	8	p
op	29:46	0:0	8	]
arg	29:49	29:51	7	16
water	29:49	0:0	8	16
water	29:52	0:0	6	;
if	30:12	31:61	6	(srcStride [ p ])
cond	30:16	30:27	7	srcStride [ p ]
water	30:16	0:0	8	srcStride
op	30:25	0:0	8	[
water	30:26	0:0	8	p
op	30:27	0:0	8	]
stmts	31:16	31:61	7	
water	31:16	0:0	8	src
op	31:19	0:0	8	[
water	31:20	0:0	8	p
op	31:21	0:0	8	]
op	31:23	0:0	8	=
call	31:25	31:60	8	av_mallocz
arg	31:36	31:60	9	srcStride[p]*srcH+16
water	31:36	0:0	10	srcStride
op	31:45	0:0	10	[
water	31:46	0:0	10	p
op	31:47	0:0	10	]
op	31:49	0:0	10	*
water	31:51	0:0	10	srcH
op	31:56	0:0	10	+
water	31:58	0:0	10	16
water	31:61	0:0	8	;
if	32:12	36:12	6	(srcStride [ p ] && ! src [ p ])
cond	32:16	32:38	7	srcStride [ p ] && ! src [ p ]
water	32:16	0:0	8	srcStride
op	32:25	0:0	8	[
water	32:26	0:0	8	p
op	32:27	0:0	8	]
op	32:29	0:0	8	&&
op	32:32	0:0	8	!
water	32:33	0:0	8	src
op	32:36	0:0	8	[
water	32:37	0:0	8	p
op	32:38	0:0	8	]
stmts	32:41	36:12	7	
water	32:41	0:0	8	{
call	33:16	33:31	8	perror
arg	33:23	33:31	9	"Malloc"
water	33:23	0:0	10	"Malloc"
water	33:32	0:0	8	;
water	34:16	0:0	8	res
op	34:20	0:0	8	=
op	34:22	0:0	8	-
water	34:23	0:0	8	1
water	34:24	0:0	8	;
goto	35:16	35:24	8	end
water	35:21	0:0	9	end
water	36:12	0:0	8	}
water	37:8	0:0	6	}
water	38:8	0:0	4	srcContext
op	38:19	0:0	4	=
call	38:21	39:77	4	sws_getContext
arg	38:36	38:37	5	w
water	38:36	0:0	6	w
arg	38:39	38:40	5	h
water	38:39	0:0	6	h
arg	38:42	38:61	5	AV_PIX_FMT_YUVA420P
water	38:42	0:0	6	AV_PIX_FMT_YUVA420P
arg	38:63	38:67	5	srcW
water	38:63	0:0	6	srcW
arg	38:69	38:73	5	srcH
water	38:69	0:0	6	srcH
arg	39:36	39:45	5	srcFormat
water	39:36	0:0	6	srcFormat
arg	39:47	39:59	5	SWS_BILINEAR
water	39:47	0:0	6	SWS_BILINEAR
arg	39:61	39:65	5	NULL
water	39:61	0:0	6	NULL
arg	39:67	39:71	5	NULL
water	39:67	0:0	6	NULL
arg	39:73	39:77	5	NULL
water	39:73	0:0	6	NULL
water	39:78	0:0	4	;
if	40:8	46:8	4	(! srcContext)
cond	40:12	40:13	5	! srcContext
op	40:12	0:0	6	!
water	40:13	0:0	6	srcContext
stmts	40:25	46:8	5	
water	40:25	0:0	6	{
call	41:12	43:34	6	fprintf
arg	41:20	41:26	7	stderr
water	41:20	0:0	8	stderr
arg	41:28	41:56	7	"Failed to get %s ---> %s\n"
water	41:28	0:0	8	"Failed to get %s ---> %s\n"
arg	42:20	42:39	7	desc_yuva420p->name
water	42:20	0:0	8	desc_yuva420p
op	42:33	0:0	8	->
water	42:35	0:0	8	name
arg	43:20	43:34	7	desc_src->name
water	43:20	0:0	8	desc_src
op	43:28	0:0	8	->
water	43:30	0:0	8	name
water	43:35	0:0	6	;
water	44:12	0:0	6	res
op	44:16	0:0	6	=
op	44:18	0:0	6	-
water	44:19	0:0	6	1
water	44:20	0:0	6	;
goto	45:12	45:20	6	end
water	45:17	0:0	7	end
water	46:8	0:0	6	}
call	47:8	47:90	4	sws_scale
arg	47:18	47:28	5	srcContext
water	47:18	0:0	6	srcContext
arg	47:30	47:57	5	(constuint8_t*const*)ref
water	47:30	0:0	6	(
water	47:31	0:0	6	const
water	47:37	0:0	6	uint8_t
op	47:45	0:0	6	*
water	47:47	0:0	6	const
op	47:52	0:0	6	*
water	47:53	0:0	6	)
water	47:54	0:0	6	ref
arg	47:59	47:68	5	refStride
water	47:59	0:0	6	refStride
arg	47:70	47:71	5	0
water	47:70	0:0	6	0
arg	47:73	47:74	5	h
water	47:73	0:0	6	h
arg	47:76	47:79	5	src
water	47:76	0:0	6	src
arg	47:81	47:90	5	srcStride
water	47:81	0:0	6	srcStride
water	47:91	0:0	4	;
call	48:8	48:34	4	sws_freeContext
arg	48:24	48:34	5	srcContext
water	48:24	0:0	6	srcContext
water	48:35	0:0	4	;
water	49:8	0:0	4	cur_srcFormat
op	49:22	0:0	4	=
water	49:24	0:0	4	srcFormat
water	49:33	0:0	4	;
water	50:8	0:0	4	cur_srcW
op	50:22	0:0	4	=
water	50:24	0:0	4	srcW
water	50:28	0:0	4	;
water	51:8	0:0	4	cur_srcH
op	51:22	0:0	4	=
water	51:24	0:0	4	srcH
water	51:28	0:0	4	;
water	52:4	0:0	4	}
call	53:4	53:54	2	av_image_fill_linesizes
arg	53:28	53:37	3	dstStride
water	53:28	0:0	4	dstStride
arg	53:39	53:48	3	dstFormat
water	53:39	0:0	4	dstFormat
arg	53:50	53:54	3	dstW
water	53:50	0:0	4	dstW
water	53:55	0:0	2	;
for	54:4	69:4	2	(i = 0 ;i < 4;i ++)
forinit	54:9	54:14	3	i = 0 ;
water	54:9	0:0	4	i
op	54:11	0:0	4	=
water	54:13	0:0	4	0
water	54:14	0:0	4	;
cond	54:16	54:20	3	i < 4
water	54:16	0:0	4	i
op	54:18	0:0	4	<
water	54:20	0:0	4	4
forexpr	54:23	54:24	3	i ++
water	54:23	0:0	4	i
op	54:24	0:0	4	++
stmts	54:28	69:4	3	
water	54:28	0:0	4	{
water	61:8	0:0	4	dstStride
op	61:17	0:0	4	[
water	61:18	0:0	4	i
op	61:19	0:0	4	]
op	61:21	0:0	4	=
call	61:23	61:47	4	FFALIGN
arg	61:31	61:43	5	dstStride[i]
water	61:31	0:0	6	dstStride
op	61:40	0:0	6	[
water	61:41	0:0	6	i
op	61:42	0:0	6	]
arg	61:45	61:47	5	16
water	61:45	0:0	6	16
water	61:48	0:0	4	;
if	62:8	63:57	4	(dstStride [ i ])
cond	62:12	62:23	5	dstStride [ i ]
water	62:12	0:0	6	dstStride
op	62:21	0:0	6	[
water	62:22	0:0	6	i
op	62:23	0:0	6	]
stmts	63:12	63:57	5	
water	63:12	0:0	6	dst
op	63:15	0:0	6	[
water	63:16	0:0	6	i
op	63:17	0:0	6	]
op	63:19	0:0	6	=
call	63:21	63:56	6	av_mallocz
arg	63:32	63:56	7	dstStride[i]*dstH+16
water	63:32	0:0	8	dstStride
op	63:41	0:0	8	[
water	63:42	0:0	8	i
op	63:43	0:0	8	]
op	63:45	0:0	8	*
water	63:47	0:0	8	dstH
op	63:52	0:0	8	+
water	63:54	0:0	8	16
water	63:57	0:0	6	;
if	64:8	68:8	4	(dstStride [ i ] && ! dst [ i ])
cond	64:12	64:34	5	dstStride [ i ] && ! dst [ i ]
water	64:12	0:0	6	dstStride
op	64:21	0:0	6	[
water	64:22	0:0	6	i
op	64:23	0:0	6	]
op	64:25	0:0	6	&&
op	64:28	0:0	6	!
water	64:29	0:0	6	dst
op	64:32	0:0	6	[
water	64:33	0:0	6	i
op	64:34	0:0	6	]
stmts	64:37	68:8	5	
water	64:37	0:0	6	{
call	65:12	65:27	6	perror
arg	65:19	65:27	7	"Malloc"
water	65:19	0:0	8	"Malloc"
water	65:28	0:0	6	;
water	66:12	0:0	6	res
op	66:16	0:0	6	=
op	66:18	0:0	6	-
water	66:19	0:0	6	1
water	66:20	0:0	6	;
goto	67:12	67:20	6	end
water	67:17	0:0	7	end
water	68:8	0:0	6	}
water	69:4	0:0	4	}
water	70:4	0:0	2	dstContext
op	70:15	0:0	2	=
call	70:17	71:55	2	sws_getContext
arg	70:32	70:36	3	srcW
water	70:32	0:0	4	srcW
arg	70:38	70:42	3	srcH
water	70:38	0:0	4	srcH
arg	70:44	70:53	3	srcFormat
water	70:44	0:0	4	srcFormat
arg	70:55	70:59	3	dstW
water	70:55	0:0	4	dstW
arg	70:61	70:65	3	dstH
water	70:61	0:0	4	dstH
arg	70:67	70:76	3	dstFormat
water	70:67	0:0	4	dstFormat
arg	71:32	71:37	3	flags
water	71:32	0:0	4	flags
arg	71:39	71:43	3	NULL
water	71:39	0:0	4	NULL
arg	71:45	71:49	3	NULL
water	71:45	0:0	4	NULL
arg	71:51	71:55	3	NULL
water	71:51	0:0	4	NULL
water	71:56	0:0	2	;
if	72:4	77:4	2	(! dstContext)
cond	72:8	72:9	3	! dstContext
op	72:8	0:0	4	!
water	72:9	0:0	4	dstContext
stmts	72:21	77:4	3	
water	72:21	0:0	4	{
call	73:8	74:46	4	fprintf
arg	73:16	73:22	5	stderr
water	73:16	0:0	6	stderr
arg	73:24	73:52	5	"Failed to get %s ---> %s\n"
water	73:24	0:0	6	"Failed to get %s ---> %s\n"
arg	74:16	74:30	5	desc_src->name
water	74:16	0:0	6	desc_src
op	74:24	0:0	6	->
water	74:26	0:0	6	name
arg	74:32	74:46	5	desc_dst->name
water	74:32	0:0	6	desc_dst
op	74:40	0:0	6	->
water	74:42	0:0	6	name
water	74:47	0:0	4	;
water	75:8	0:0	4	res
op	75:12	0:0	4	=
op	75:14	0:0	4	-
water	75:15	0:0	4	1
water	75:16	0:0	4	;
goto	76:8	76:16	4	end
water	76:13	0:0	5	end
water	77:4	0:0	4	}
call	78:4	81:16	2	printf
arg	78:11	78:46	3	" %s %dx%d -> %s %3dx%3d flags=%2d"
water	78:11	0:0	4	" %s %dx%d -> %s %3dx%3d flags=%2d"
arg	79:11	79:25	3	desc_src->name
water	79:11	0:0	4	desc_src
op	79:19	0:0	4	->
water	79:21	0:0	4	name
arg	79:27	79:31	3	srcW
water	79:27	0:0	4	srcW
arg	79:33	79:37	3	srcH
water	79:33	0:0	4	srcH
arg	80:11	80:25	3	desc_dst->name
water	80:11	0:0	4	desc_dst
op	80:19	0:0	4	->
water	80:21	0:0	4	name
arg	80:27	80:31	3	dstW
water	80:27	0:0	4	dstW
arg	80:33	80:37	3	dstH
water	80:33	0:0	4	dstH
arg	81:11	81:16	3	flags
water	81:11	0:0	4	flags
water	81:17	0:0	2	;
call	82:4	82:17	2	fflush
arg	82:11	82:17	3	stdout
water	82:11	0:0	4	stdout
water	82:18	0:0	2	;
call	83:4	83:89	2	sws_scale
arg	83:14	83:24	3	dstContext
water	83:14	0:0	4	dstContext
arg	83:26	83:53	3	(constuint8_t*const*)src
water	83:26	0:0	4	(
water	83:27	0:0	4	const
water	83:33	0:0	4	uint8_t
op	83:41	0:0	4	*
water	83:43	0:0	4	const
op	83:48	0:0	4	*
water	83:49	0:0	4	)
water	83:50	0:0	4	src
arg	83:55	83:64	3	srcStride
water	83:55	0:0	4	srcStride
arg	83:66	83:67	3	0
water	83:66	0:0	4	0
arg	83:69	83:73	3	srcH
water	83:69	0:0	4	srcH
arg	83:75	83:78	3	dst
water	83:75	0:0	4	dst
arg	83:80	83:89	3	dstStride
water	83:80	0:0	4	dstStride
water	83:90	0:0	2	;
for	84:4	86:41	2	(i = 0 ;i < 4 && dstStride [ i ];i ++)
forinit	84:9	84:14	3	i = 0 ;
water	84:9	0:0	4	i
op	84:11	0:0	4	=
water	84:13	0:0	4	0
water	84:14	0:0	4	;
cond	84:16	84:36	3	i < 4 && dstStride [ i ]
water	84:16	0:0	4	i
op	84:18	0:0	4	<
water	84:20	0:0	4	4
op	84:22	0:0	4	&&
water	84:25	0:0	4	dstStride
op	84:34	0:0	4	[
water	84:35	0:0	4	i
op	84:36	0:0	4	]
forexpr	84:39	84:40	3	i ++
water	84:39	0:0	4	i
op	84:40	0:0	4	++
stmts	85:8	86:41	3	
water	85:8	0:0	4	crc
op	85:12	0:0	4	=
call	85:14	86:40	4	av_crc
arg	85:21	85:53	5	av_crc_get_table(AV_CRC_32_IEEE)
call	85:21	85:52	6	av_crc_get_table
arg	85:38	85:52	7	AV_CRC_32_IEEE
water	85:38	0:0	8	AV_CRC_32_IEEE
arg	85:55	85:58	5	crc
water	85:55	0:0	6	crc
arg	85:60	85:66	5	dst[i]
water	85:60	0:0	6	dst
op	85:63	0:0	6	[
water	85:64	0:0	6	i
op	85:65	0:0	6	]
arg	86:21	86:40	5	dstStride[i]*dstH
water	86:21	0:0	6	dstStride
op	86:30	0:0	6	[
water	86:31	0:0	6	i
op	86:32	0:0	6	]
op	86:34	0:0	6	*
water	86:36	0:0	6	dstH
water	86:41	0:0	4	;
if	87:4	92:4	2	(r && crc == r -> crc)
cond	87:8	87:23	3	r && crc == r -> crc
water	87:8	0:0	4	r
op	87:10	0:0	4	&&
water	87:13	0:0	4	crc
op	87:17	0:0	4	==
water	87:20	0:0	4	r
op	87:21	0:0	4	->
water	87:23	0:0	4	crc
stmts	87:28	92:4	3	
water	87:28	0:0	4	{
water	88:8	0:0	4	ssdY
op	88:13	0:0	4	=
water	88:15	0:0	4	r
op	88:16	0:0	4	->
water	88:18	0:0	4	ssdY
water	88:22	0:0	4	;
water	89:8	0:0	4	ssdU
op	89:13	0:0	4	=
water	89:15	0:0	4	r
op	89:16	0:0	4	->
water	89:18	0:0	4	ssdU
water	89:22	0:0	4	;
water	90:8	0:0	4	ssdV
op	90:13	0:0	4	=
water	90:15	0:0	4	r
op	90:16	0:0	4	->
water	90:18	0:0	4	ssdV
water	90:22	0:0	4	;
water	91:8	0:0	4	ssdA
op	91:13	0:0	4	=
water	91:15	0:0	4	r
op	91:16	0:0	4	->
water	91:18	0:0	4	ssdA
water	91:22	0:0	4	;
water	92:4	0:0	4	}
else	92:6	132:4	2
stmts	92:11	132:4	3	
water	92:11	0:0	4	{
for	93:8	102:8	4	(i = 0 ;i < 4;i ++)
forinit	93:13	93:18	5	i = 0 ;
water	93:13	0:0	6	i
op	93:15	0:0	6	=
water	93:17	0:0	6	0
water	93:18	0:0	6	;
cond	93:20	93:24	5	i < 4
water	93:20	0:0	6	i
op	93:22	0:0	6	<
water	93:24	0:0	6	4
forexpr	93:27	93:28	5	i ++
water	93:27	0:0	6	i
op	93:28	0:0	6	++
stmts	93:32	102:8	5	
water	93:32	0:0	6	{
water	94:12	0:0	6	refStride
op	94:21	0:0	6	[
water	94:22	0:0	6	i
op	94:23	0:0	6	]
op	94:25	0:0	6	=
call	94:27	94:51	6	FFALIGN
arg	94:35	94:47	7	refStride[i]
water	94:35	0:0	8	refStride
op	94:44	0:0	8	[
water	94:45	0:0	8	i
op	94:46	0:0	8	]
arg	94:49	94:51	7	16
water	94:49	0:0	8	16
water	94:52	0:0	6	;
if	95:12	96:53	6	(refStride [ i ])
cond	95:16	95:27	7	refStride [ i ]
water	95:16	0:0	8	refStride
op	95:25	0:0	8	[
water	95:26	0:0	8	i
op	95:27	0:0	8	]
stmts	96:16	96:53	7	
water	96:16	0:0	8	out
op	96:19	0:0	8	[
water	96:20	0:0	8	i
op	96:21	0:0	8	]
op	96:23	0:0	8	=
call	96:25	96:52	8	av_mallocz
arg	96:36	96:52	9	refStride[i]*h
water	96:36	0:0	10	refStride
op	96:45	0:0	10	[
water	96:46	0:0	10	i
op	96:47	0:0	10	]
op	96:49	0:0	10	*
water	96:51	0:0	10	h
water	96:53	0:0	8	;
if	97:12	101:12	6	(refStride [ i ] && ! out [ i ])
cond	97:16	97:38	7	refStride [ i ] && ! out [ i ]
water	97:16	0:0	8	refStride
op	97:25	0:0	8	[
water	97:26	0:0	8	i
op	97:27	0:0	8	]
op	97:29	0:0	8	&&
op	97:32	0:0	8	!
water	97:33	0:0	8	out
op	97:36	0:0	8	[
water	97:37	0:0	8	i
op	97:38	0:0	8	]
stmts	97:41	101:12	7	
water	97:41	0:0	8	{
call	98:16	98:31	8	perror
arg	98:23	98:31	9	"Malloc"
water	98:23	0:0	10	"Malloc"
water	98:32	0:0	8	;
water	99:16	0:0	8	res
op	99:20	0:0	8	=
op	99:22	0:0	8	-
water	99:23	0:0	8	1
water	99:24	0:0	8	;
goto	100:16	100:24	8	end
water	100:21	0:0	9	end
water	101:12	0:0	8	}
water	102:8	0:0	6	}
water	103:8	0:0	4	outContext
op	103:19	0:0	4	=
call	103:21	105:52	4	sws_getContext
arg	103:36	103:40	5	dstW
water	103:36	0:0	6	dstW
arg	103:42	103:46	5	dstH
water	103:42	0:0	6	dstH
arg	103:48	103:57	5	dstFormat
water	103:48	0:0	6	dstFormat
arg	103:59	103:60	5	w
water	103:59	0:0	6	w
arg	103:62	103:63	5	h
water	103:62	0:0	6	h
arg	104:36	104:55	5	AV_PIX_FMT_YUVA420P
water	104:36	0:0	6	AV_PIX_FMT_YUVA420P
arg	104:57	104:69	5	SWS_BILINEAR
water	104:57	0:0	6	SWS_BILINEAR
arg	105:36	105:40	5	NULL
water	105:36	0:0	6	NULL
arg	105:42	105:46	5	NULL
water	105:42	0:0	6	NULL
arg	105:48	105:52	5	NULL
water	105:48	0:0	6	NULL
water	105:53	0:0	4	;
if	106:8	112:8	4	(! outContext)
cond	106:12	106:13	5	! outContext
op	106:12	0:0	6	!
water	106:13	0:0	6	outContext
stmts	106:25	112:8	5	
water	106:25	0:0	6	{
call	107:12	109:39	6	fprintf
arg	107:20	107:26	7	stderr
water	107:20	0:0	8	stderr
arg	107:28	107:56	7	"Failed to get %s ---> %s\n"
water	107:28	0:0	8	"Failed to get %s ---> %s\n"
arg	108:20	108:34	7	desc_dst->name
water	108:20	0:0	8	desc_dst
op	108:28	0:0	8	->
water	108:30	0:0	8	name
arg	109:20	109:39	7	desc_yuva420p->name
water	109:20	0:0	8	desc_yuva420p
op	109:33	0:0	8	->
water	109:35	0:0	8	name
water	109:40	0:0	6	;
water	110:12	0:0	6	res
op	110:16	0:0	6	=
op	110:18	0:0	6	-
water	110:19	0:0	6	1
water	110:20	0:0	6	;
goto	111:12	111:20	6	end
water	111:17	0:0	7	end
water	112:8	0:0	6	}
call	113:8	113:93	4	sws_scale
arg	113:18	113:28	5	outContext
water	113:18	0:0	6	outContext
arg	113:30	113:57	5	(constuint8_t*const*)dst
water	113:30	0:0	6	(
water	113:31	0:0	6	const
water	113:37	0:0	6	uint8_t
op	113:45	0:0	6	*
water	113:47	0:0	6	const
op	113:52	0:0	6	*
water	113:53	0:0	6	)
water	113:54	0:0	6	dst
arg	113:59	113:68	5	dstStride
water	113:59	0:0	6	dstStride
arg	113:70	113:71	5	0
water	113:70	0:0	6	0
arg	113:73	113:77	5	dstH
water	113:73	0:0	6	dstH
arg	113:79	113:82	5	out
water	113:79	0:0	6	out
arg	113:84	113:93	5	refStride
water	113:84	0:0	6	refStride
water	113:94	0:0	4	;
water	114:8	0:0	4	ssdY
op	114:13	0:0	4	=
call	114:15	114:70	4	getSSD
arg	114:22	114:28	5	ref[0]
water	114:22	0:0	6	ref
op	114:25	0:0	6	[
water	114:26	0:0	6	0
op	114:27	0:0	6	]
arg	114:30	114:36	5	out[0]
water	114:30	0:0	6	out
op	114:33	0:0	6	[
water	114:34	0:0	6	0
op	114:35	0:0	6	]
arg	114:38	114:50	5	refStride[0]
water	114:38	0:0	6	refStride
op	114:47	0:0	6	[
water	114:48	0:0	6	0
op	114:49	0:0	6	]
arg	114:52	114:64	5	refStride[0]
water	114:52	0:0	6	refStride
op	114:61	0:0	6	[
water	114:62	0:0	6	0
op	114:63	0:0	6	]
arg	114:66	114:67	5	w
water	114:66	0:0	6	w
arg	114:69	114:70	5	h
water	114:69	0:0	6	h
water	114:71	0:0	4	;
if	115:8	121:8	4	(hasChroma (srcFormat ) &&hasChroma (dstFormat ))
cond	115:12	115:55	5	hasChroma (srcFormat ) &&hasChroma (dstFormat )
call	115:12	115:31	6	hasChroma
arg	115:22	115:31	7	srcFormat
water	115:22	0:0	8	srcFormat
op	115:33	0:0	6	&&
call	115:36	115:55	6	hasChroma
arg	115:46	115:55	7	dstFormat
water	115:46	0:0	8	dstFormat
stmts	115:58	121:8	5	
water	115:58	0:0	6	{
water	117:12	0:0	6	ssdU
op	117:17	0:0	6	=
call	117:19	118:52	6	getSSD
arg	117:26	117:32	7	ref[1]
water	117:26	0:0	8	ref
op	117:29	0:0	8	[
water	117:30	0:0	8	1
op	117:31	0:0	8	]
arg	117:34	117:40	7	out[1]
water	117:34	0:0	8	out
op	117:37	0:0	8	[
water	117:38	0:0	8	1
op	117:39	0:0	8	]
arg	117:42	117:54	7	refStride[1]
water	117:42	0:0	8	refStride
op	117:51	0:0	8	[
water	117:52	0:0	8	1
op	117:53	0:0	8	]
arg	117:56	117:68	7	refStride[1]
water	117:56	0:0	8	refStride
op	117:65	0:0	8	[
water	117:66	0:0	8	1
op	117:67	0:0	8	]
arg	118:26	118:38	7	(w+1)>>1
water	118:26	0:0	8	(
water	118:27	0:0	8	w
op	118:29	0:0	8	+
water	118:31	0:0	8	1
water	118:32	0:0	8	)
op	118:34	0:0	8	>>
water	118:37	0:0	8	1
arg	118:40	118:52	7	(h+1)>>1
water	118:40	0:0	8	(
water	118:41	0:0	8	h
op	118:43	0:0	8	+
water	118:45	0:0	8	1
water	118:46	0:0	8	)
op	118:48	0:0	8	>>
water	118:51	0:0	8	1
water	118:53	0:0	6	;
water	119:12	0:0	6	ssdV
op	119:17	0:0	6	=
call	119:19	120:52	6	getSSD
arg	119:26	119:32	7	ref[2]
water	119:26	0:0	8	ref
op	119:29	0:0	8	[
water	119:30	0:0	8	2
op	119:31	0:0	8	]
arg	119:34	119:40	7	out[2]
water	119:34	0:0	8	out
op	119:37	0:0	8	[
water	119:38	0:0	8	2
op	119:39	0:0	8	]
arg	119:42	119:54	7	refStride[2]
water	119:42	0:0	8	refStride
op	119:51	0:0	8	[
water	119:52	0:0	8	2
op	119:53	0:0	8	]
arg	119:56	119:68	7	refStride[2]
water	119:56	0:0	8	refStride
op	119:65	0:0	8	[
water	119:66	0:0	8	2
op	119:67	0:0	8	]
arg	120:26	120:38	7	(w+1)>>1
water	120:26	0:0	8	(
water	120:27	0:0	8	w
op	120:29	0:0	8	+
water	120:31	0:0	8	1
water	120:32	0:0	8	)
op	120:34	0:0	8	>>
water	120:37	0:0	8	1
arg	120:40	120:52	7	(h+1)>>1
water	120:40	0:0	8	(
water	120:41	0:0	8	h
op	120:43	0:0	8	+
water	120:45	0:0	8	1
water	120:46	0:0	8	)
op	120:48	0:0	8	>>
water	120:51	0:0	8	1
water	120:53	0:0	6	;
water	121:8	0:0	6	}
if	122:8	123:75	4	(isALPHA (srcFormat ) &&isALPHA (dstFormat ))
cond	122:12	122:51	5	isALPHA (srcFormat ) &&isALPHA (dstFormat )
call	122:12	122:29	6	isALPHA
arg	122:20	122:29	7	srcFormat
water	122:20	0:0	8	srcFormat
op	122:31	0:0	6	&&
call	122:34	122:51	6	isALPHA
arg	122:42	122:51	7	dstFormat
water	122:42	0:0	8	dstFormat
stmts	123:12	123:75	5	
water	123:12	0:0	6	ssdA
op	123:17	0:0	6	=
call	123:19	123:74	6	getSSD
arg	123:26	123:32	7	ref[3]
water	123:26	0:0	8	ref
op	123:29	0:0	8	[
water	123:30	0:0	8	3
op	123:31	0:0	8	]
arg	123:34	123:40	7	out[3]
water	123:34	0:0	8	out
op	123:37	0:0	8	[
water	123:38	0:0	8	3
op	123:39	0:0	8	]
arg	123:42	123:54	7	refStride[3]
water	123:42	0:0	8	refStride
op	123:51	0:0	8	[
water	123:52	0:0	8	3
op	123:53	0:0	8	]
arg	123:56	123:68	7	refStride[3]
water	123:56	0:0	8	refStride
op	123:65	0:0	8	[
water	123:66	0:0	8	3
op	123:67	0:0	8	]
arg	123:70	123:71	7	w
water	123:70	0:0	8	w
arg	123:73	123:74	7	h
water	123:73	0:0	8	h
water	123:75	0:0	6	;
water	124:8	0:0	4	ssdY
op	124:13	0:0	4	/=
water	124:16	0:0	4	w
op	124:18	0:0	4	*
water	124:20	0:0	4	h
water	124:21	0:0	4	;
water	125:8	0:0	4	ssdU
op	125:13	0:0	4	/=
water	125:16	0:0	4	w
op	125:18	0:0	4	*
water	125:20	0:0	4	h
op	125:22	0:0	4	/
water	125:24	0:0	4	4
water	125:25	0:0	4	;
water	126:8	0:0	4	ssdV
op	126:13	0:0	4	/=
water	126:16	0:0	4	w
op	126:18	0:0	4	*
water	126:20	0:0	4	h
op	126:22	0:0	4	/
water	126:24	0:0	4	4
water	126:25	0:0	4	;
water	127:8	0:0	4	ssdA
op	127:13	0:0	4	/=
water	127:16	0:0	4	w
op	127:18	0:0	4	*
water	127:20	0:0	4	h
water	127:21	0:0	4	;
call	128:8	128:34	4	sws_freeContext
arg	128:24	128:34	5	outContext
water	128:24	0:0	6	outContext
water	128:35	0:0	4	;
for	129:8	131:31	4	(i = 0 ;i < 4;i ++)
forinit	129:13	129:18	5	i = 0 ;
water	129:13	0:0	6	i
op	129:15	0:0	6	=
water	129:17	0:0	6	0
water	129:18	0:0	6	;
cond	129:20	129:24	5	i < 4
water	129:20	0:0	6	i
op	129:22	0:0	6	<
water	129:24	0:0	6	4
forexpr	129:27	129:28	5	i ++
water	129:27	0:0	6	i
op	129:28	0:0	6	++
stmts	130:12	131:31	5	
if	130:12	131:31	6	(refStride [ i ])
cond	130:16	130:27	7	refStride [ i ]
water	130:16	0:0	8	refStride
op	130:25	0:0	8	[
water	130:26	0:0	8	i
op	130:27	0:0	8	]
stmts	131:16	131:31	7	
call	131:16	131:30	8	av_free
arg	131:24	131:30	9	out[i]
water	131:24	0:0	10	out
op	131:27	0:0	10	[
water	131:28	0:0	10	i
op	131:29	0:0	10	]
water	131:31	0:0	8	;
water	132:4	0:0	4	}
call	133:4	134:38	2	printf
arg	133:11	133:76	3	" CRC=%08x SSD=%5"PRId64",%5"PRId64",%5"PRId64",%5"PRId64"\n"
water	133:11	0:0	4	" CRC=%08x SSD=%5"
water	133:29	0:0	4	PRId64
water	133:36	0:0	4	",%5"
water	133:41	0:0	4	PRId64
water	133:48	0:0	4	",%5"
water	133:53	0:0	4	PRId64
water	133:60	0:0	4	",%5"
water	133:65	0:0	4	PRId64
water	133:72	0:0	4	"\n"
arg	134:11	134:14	3	crc
water	134:11	0:0	4	crc
arg	134:16	134:20	3	ssdY
water	134:16	0:0	4	ssdY
arg	134:22	134:26	3	ssdU
water	134:22	0:0	4	ssdU
arg	134:28	134:32	3	ssdV
water	134:28	0:0	4	ssdV
arg	134:34	134:38	3	ssdA
water	134:34	0:0	4	ssdA
water	134:39	0:0	2	;
label	135:0	135:3	2	end :
call	136:4	136:30	2	sws_freeContext
arg	136:20	136:30	3	dstContext
water	136:20	0:0	4	dstContext
water	136:31	0:0	2	;
for	137:4	139:27	2	(i = 0 ;i < 4;i ++)
forinit	137:9	137:14	3	i = 0 ;
water	137:9	0:0	4	i
op	137:11	0:0	4	=
water	137:13	0:0	4	0
water	137:14	0:0	4	;
cond	137:16	137:20	3	i < 4
water	137:16	0:0	4	i
op	137:18	0:0	4	<
water	137:20	0:0	4	4
forexpr	137:23	137:24	3	i ++
water	137:23	0:0	4	i
op	137:24	0:0	4	++
stmts	138:8	139:27	3	
if	138:8	139:27	4	(dstStride [ i ])
cond	138:12	138:23	5	dstStride [ i ]
water	138:12	0:0	6	dstStride
op	138:21	0:0	6	[
water	138:22	0:0	6	i
op	138:23	0:0	6	]
stmts	139:12	139:27	5	
call	139:12	139:26	6	av_free
arg	139:20	139:26	7	dst[i]
water	139:20	0:0	8	dst
op	139:23	0:0	8	[
water	139:24	0:0	8	i
op	139:25	0:0	8	]
water	139:27	0:0	6	;
return	140:4	140:14	2	res
water	140:11	0:0	3	res
