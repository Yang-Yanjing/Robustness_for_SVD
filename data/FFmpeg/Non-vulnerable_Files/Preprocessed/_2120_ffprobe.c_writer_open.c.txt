func	1:0	72:0	0	static int	writer_open
params	1:22	0:0	1	
param	1:23	1:43	2	WriterContext * *	wctx
param	1:45	1:65	2	const Writer *	writer
param	1:67	1:83	2	const char *	args
param	2:23	2:53	2	const struct section *	sections
param	2:55	2:70	2	int	nb_sections
stmnts	0:0	71:14	1	
decl	4:4	4:18	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:18	2	int	ret
op	4:15	0:0	2	=
water	4:17	0:0	2	0
if	5:4	8:4	2	(! ( * wctx =av_mallocz (sizeof ( WriterContext ) ) ))
cond	5:8	5:51	3	! ( * wctx =av_mallocz (sizeof ( WriterContext ) ) )
op	5:8	0:0	4	!
water	5:9	0:0	4	(
op	5:10	0:0	4	*
water	5:11	0:0	4	wctx
op	5:16	0:0	4	=
call	5:18	5:50	4	av_mallocz
arg	5:29	5:50	5	sizeof(WriterContext)
op	5:29	0:0	6	sizeof
water	5:35	0:0	6	(
water	5:36	0:0	6	WriterContext
water	5:49	0:0	6	)
water	5:51	0:0	4	)
stmts	5:54	8:4	3	
water	5:54	0:0	4	{
water	6:8	0:0	4	ret
op	6:12	0:0	4	=
call	6:14	6:28	4	AVERROR
arg	6:22	6:28	5	ENOMEM
water	6:22	0:0	6	ENOMEM
water	6:29	0:0	4	;
goto	7:8	7:17	4	fail
water	7:13	0:0	5	fail
water	8:4	0:0	4	}
if	9:4	12:4	2	(! ( ( * wctx ) -> priv =av_mallocz (writer -> priv_size ) ))
cond	9:8	9:55	3	! ( ( * wctx ) -> priv =av_mallocz (writer -> priv_size ) )
op	9:8	0:0	4	!
water	9:9	0:0	4	(
water	9:10	0:0	4	(
op	9:11	0:0	4	*
water	9:12	0:0	4	wctx
water	9:16	0:0	4	)
op	9:17	0:0	4	->
water	9:19	0:0	4	priv
op	9:24	0:0	4	=
call	9:26	9:54	4	av_mallocz
arg	9:37	9:54	5	writer->priv_size
water	9:37	0:0	6	writer
op	9:43	0:0	6	->
water	9:45	0:0	6	priv_size
water	9:55	0:0	4	)
stmts	9:58	12:4	3	
water	9:58	0:0	4	{
water	10:8	0:0	4	ret
op	10:12	0:0	4	=
call	10:14	10:28	4	AVERROR
arg	10:22	10:28	5	ENOMEM
water	10:22	0:0	6	ENOMEM
water	10:29	0:0	4	;
goto	11:8	11:17	4	fail
water	11:13	0:0	5	fail
water	12:4	0:0	4	}
water	13:4	0:0	2	(
op	13:5	0:0	2	*
water	13:6	0:0	2	wctx
water	13:10	0:0	2	)
op	13:11	0:0	2	->
water	13:13	0:0	2	class
op	13:19	0:0	2	=
op	13:21	0:0	2	&
water	13:22	0:0	2	writer_class
water	13:34	0:0	2	;
water	14:4	0:0	2	(
op	14:5	0:0	2	*
water	14:6	0:0	2	wctx
water	14:10	0:0	2	)
op	14:11	0:0	2	->
water	14:13	0:0	2	writer
op	14:20	0:0	2	=
water	14:22	0:0	2	writer
water	14:28	0:0	2	;
water	15:4	0:0	2	(
op	15:5	0:0	2	*
water	15:6	0:0	2	wctx
water	15:10	0:0	2	)
op	15:11	0:0	2	->
water	15:13	0:0	2	level
op	15:19	0:0	2	=
op	15:21	0:0	2	-
water	15:22	0:0	2	1
water	15:23	0:0	2	;
water	16:4	0:0	2	(
op	16:5	0:0	2	*
water	16:6	0:0	2	wctx
water	16:10	0:0	2	)
op	16:11	0:0	2	->
water	16:13	0:0	2	sections
op	16:22	0:0	2	=
water	16:24	0:0	2	sections
water	16:32	0:0	2	;
water	17:4	0:0	2	(
op	17:5	0:0	2	*
water	17:6	0:0	2	wctx
water	17:10	0:0	2	)
op	17:11	0:0	2	->
water	17:13	0:0	2	nb_sections
op	17:25	0:0	2	=
water	17:27	0:0	2	nb_sections
water	17:38	0:0	2	;
call	18:4	18:29	2	av_opt_set_defaults
arg	18:24	18:29	3	*wctx
op	18:24	0:0	4	*
water	18:25	0:0	4	wctx
water	18:30	0:0	2	;
if	19:4	23:4	2	(writer -> priv_class)
cond	19:8	19:16	3	writer -> priv_class
water	19:8	0:0	4	writer
op	19:14	0:0	4	->
water	19:16	0:0	4	priv_class
stmts	19:28	23:4	3	
water	19:28	0:0	4	{
decl	20:8	20:38	4	void	*priv_ctx
op	20:23	0:0	4	=
water	20:25	0:0	4	(
op	20:26	0:0	4	*
water	20:27	0:0	4	wctx
water	20:31	0:0	4	)
op	20:32	0:0	4	->
water	20:34	0:0	4	priv
op	21:8	0:0	4	*
water	21:9	0:0	4	(
water	21:10	0:0	4	(
water	21:11	0:0	4	const
water	21:17	0:0	4	AVClass
op	21:25	0:0	4	*
op	21:26	0:0	4	*
water	21:27	0:0	4	)
water	21:28	0:0	4	priv_ctx
water	21:36	0:0	4	)
op	21:38	0:0	4	=
water	21:40	0:0	4	writer
op	21:46	0:0	4	->
water	21:48	0:0	4	priv_class
water	21:58	0:0	4	;
call	22:8	22:36	4	av_opt_set_defaults
arg	22:28	22:36	5	priv_ctx
water	22:28	0:0	6	priv_ctx
water	22:37	0:0	4	;
water	23:4	0:0	4	}
if	25:4	42:4	2	(args)
cond	25:8	25:8	3	args
water	25:8	0:0	4	args
stmts	25:14	42:4	3	
water	25:14	0:0	4	{
decl	26:8	26:33	4	AVDictionary	*opts
op	26:27	0:0	4	=
water	26:29	0:0	4	NULL
decl	27:8	27:37	4	AVDictionaryEntry	*opt
op	27:31	0:0	4	=
water	27:33	0:0	4	NULL
if	28:8	32:8	4	(( ret =av_dict_parse_string (& opts ,args ,"=" ,":" ,0 ) ) < 0)
cond	28:12	28:69	5	( ret =av_dict_parse_string (& opts ,args ,"=" ,":" ,0 ) ) < 0
water	28:12	0:0	6	(
water	28:13	0:0	6	ret
op	28:17	0:0	6	=
call	28:19	28:64	6	av_dict_parse_string
arg	28:40	28:45	7	&opts
op	28:40	0:0	8	&
water	28:41	0:0	8	opts
arg	28:47	28:51	7	args
water	28:47	0:0	8	args
arg	28:53	28:56	7	"="
water	28:53	0:0	8	"="
arg	28:58	28:61	7	":"
water	28:58	0:0	8	":"
arg	28:63	28:64	7	0
water	28:63	0:0	8	0
water	28:65	0:0	6	)
op	28:67	0:0	6	<
water	28:69	0:0	6	0
stmts	28:72	32:8	5	
water	28:72	0:0	6	{
call	29:12	29:111	6	av_log
arg	29:19	29:24	7	*wctx
op	29:19	0:0	8	*
water	29:20	0:0	8	wctx
arg	29:26	29:38	7	AV_LOG_ERROR
water	29:26	0:0	8	AV_LOG_ERROR
arg	29:40	29:105	7	"Failed to parse option string '%s' provided to writer context\n"
water	29:40	0:0	8	"Failed to parse option string '%s' provided to writer context\n"
arg	29:107	29:111	7	args
water	29:107	0:0	8	args
water	29:112	0:0	6	;
call	30:12	30:30	6	av_dict_free
arg	30:25	30:30	7	&opts
op	30:25	0:0	8	&
water	30:26	0:0	8	opts
water	30:31	0:0	6	;
goto	31:12	31:21	6	fail
water	31:17	0:0	7	fail
water	32:8	0:0	6	}
while	33:8	40:8	4	(( opt =av_dict_get (opts ,"" ,opt ,AV_DICT_IGNORE_SUFFIX ) ))
cond	33:15	33:71	5	( opt =av_dict_get (opts ,"" ,opt ,AV_DICT_IGNORE_SUFFIX ) )
water	33:15	0:0	6	(
water	33:16	0:0	6	opt
op	33:20	0:0	6	=
call	33:22	33:70	6	av_dict_get
arg	33:34	33:38	7	opts
water	33:34	0:0	8	opts
arg	33:40	33:42	7	""
water	33:40	0:0	8	""
arg	33:44	33:47	7	opt
water	33:44	0:0	8	opt
arg	33:49	33:70	7	AV_DICT_IGNORE_SUFFIX
water	33:49	0:0	8	AV_DICT_IGNORE_SUFFIX
water	33:71	0:0	6	)
stmts	33:74	40:8	5	
water	33:74	0:0	6	{
if	34:12	39:12	6	(( ret =av_opt_set (* wctx ,opt -> key ,opt -> value ,AV_OPT_SEARCH_CHILDREN ) ) < 0)
cond	34:16	34:90	7	( ret =av_opt_set (* wctx ,opt -> key ,opt -> value ,AV_OPT_SEARCH_CHILDREN ) ) < 0
water	34:16	0:0	8	(
water	34:17	0:0	8	ret
op	34:21	0:0	8	=
call	34:23	34:85	8	av_opt_set
arg	34:34	34:39	9	*wctx
op	34:34	0:0	10	*
water	34:35	0:0	10	wctx
arg	34:41	34:49	9	opt->key
water	34:41	0:0	10	opt
op	34:44	0:0	10	->
water	34:46	0:0	10	key
arg	34:51	34:61	9	opt->value
water	34:51	0:0	10	opt
op	34:54	0:0	10	->
water	34:56	0:0	10	value
arg	34:63	34:85	9	AV_OPT_SEARCH_CHILDREN
water	34:63	0:0	10	AV_OPT_SEARCH_CHILDREN
water	34:86	0:0	8	)
op	34:88	0:0	8	<
water	34:90	0:0	8	0
stmts	34:93	39:12	7	
water	34:93	0:0	8	{
call	35:16	36:43	8	av_log
arg	35:23	35:28	9	*wctx
op	35:23	0:0	10	*
water	35:24	0:0	10	wctx
arg	35:30	35:42	9	AV_LOG_ERROR
water	35:30	0:0	10	AV_LOG_ERROR
arg	35:44	35:116	9	"Failed to set option '%s' with value '%s' provided to writer context\n"
water	35:44	0:0	10	"Failed to set option '%s' with value '%s' provided to writer context\n"
arg	36:23	36:31	9	opt->key
water	36:23	0:0	10	opt
op	36:26	0:0	10	->
water	36:28	0:0	10	key
arg	36:33	36:43	9	opt->value
water	36:33	0:0	10	opt
op	36:36	0:0	10	->
water	36:38	0:0	10	value
water	36:44	0:0	8	;
call	37:16	37:34	8	av_dict_free
arg	37:29	37:34	9	&opts
op	37:29	0:0	10	&
water	37:30	0:0	10	opts
water	37:35	0:0	8	;
goto	38:16	38:25	8	fail
water	38:21	0:0	9	fail
water	39:12	0:0	8	}
water	40:8	0:0	6	}
call	41:8	41:26	4	av_dict_free
arg	41:21	41:26	5	&opts
op	41:21	0:0	6	&
water	41:22	0:0	6	opts
water	41:27	0:0	4	;
water	42:4	0:0	4	}
water	44:4	0:0	2	{
decl	45:8	45:65	2	const uint8_t	*p
op	45:25	0:0	2	=
water	45:27	0:0	2	(
op	45:28	0:0	2	*
water	45:29	0:0	2	wctx
water	45:33	0:0	2	)
op	45:34	0:0	2	->
water	45:36	0:0	2	string_validation_replacement
decl	46:8	46:43	2	const uint8_t	*endp
op	46:28	0:0	2	=
water	46:30	0:0	2	p
op	46:32	0:0	2	+
call	46:34	46:42	3	strlen
arg	46:41	46:42	4	p
water	46:41	0:0	5	p
while	47:8	60:8	2	(* p)
cond	47:15	47:16	3	* p
op	47:15	0:0	4	*
water	47:16	0:0	4	p
stmts	47:19	60:8	3	
water	47:19	0:0	4	{
decl	48:12	48:33	4	const uint8_t	*p0
op	48:30	0:0	4	=
water	48:32	0:0	4	p
decl	49:12	49:24	4	int32_t	code
water	50:12	0:0	4	ret
op	50:16	0:0	4	=
call	50:18	50:87	4	av_utf8_decode
arg	50:33	50:38	5	&code
op	50:33	0:0	6	&
water	50:34	0:0	6	code
arg	50:40	50:42	5	&p
op	50:40	0:0	6	&
water	50:41	0:0	6	p
arg	50:44	50:48	5	endp
water	50:44	0:0	6	endp
arg	50:50	50:87	5	(*wctx)->string_validation_utf8_flags
water	50:50	0:0	6	(
op	50:51	0:0	6	*
water	50:52	0:0	6	wctx
water	50:56	0:0	6	)
op	50:57	0:0	6	->
water	50:59	0:0	6	string_validation_utf8_flags
water	50:88	0:0	4	;
if	51:12	59:12	4	(ret < 0)
cond	51:16	51:22	5	ret < 0
water	51:16	0:0	6	ret
op	51:20	0:0	6	<
water	51:22	0:0	6	0
stmts	51:25	59:12	5	
water	51:25	0:0	6	{
decl	52:16	52:27	6	AVBPrint	bp
call	53:16	53:63	6	av_bprint_init
arg	53:31	53:34	7	&bp
op	53:31	0:0	8	&
water	53:32	0:0	8	bp
arg	53:36	53:37	7	0
water	53:36	0:0	8	0
arg	53:39	53:63	7	AV_BPRINT_SIZE_AUTOMATIC
water	53:39	0:0	8	AV_BPRINT_SIZE_AUTOMATIC
water	53:64	0:0	6	;
call	54:16	54:42	6	bprint_bytes
arg	54:29	54:32	7	&bp
op	54:29	0:0	8	&
water	54:30	0:0	8	bp
arg	54:34	54:36	7	p0
water	54:34	0:0	8	p0
arg	54:38	54:42	7	p-p0
water	54:38	0:0	8	p
op	54:39	0:0	8	-
water	54:40	0:0	8	p0
water	54:43	0:0	6	,
call	55:20	57:73	6	av_log
arg	55:27	55:31	7	wctx
water	55:27	0:0	8	wctx
arg	55:33	55:45	7	AV_LOG_ERROR
water	55:33	0:0	8	AV_LOG_ERROR
arg	56:27	56:95	7	"Invalid UTF8 sequence %s found in string validation replace '%s'\n"
water	56:27	0:0	8	"Invalid UTF8 sequence %s found in string validation replace '%s'\n"
arg	57:27	57:33	7	bp.str
water	57:27	0:0	8	bp
op	57:29	0:0	8	.
water	57:30	0:0	8	str
arg	57:35	57:73	7	(*wctx)->string_validation_replacement
water	57:35	0:0	8	(
op	57:36	0:0	8	*
water	57:37	0:0	8	wctx
water	57:41	0:0	8	)
op	57:42	0:0	8	->
water	57:44	0:0	8	string_validation_replacement
water	57:74	0:0	6	;
return	58:16	58:26	6	ret
water	58:23	0:0	7	ret
water	59:12	0:0	6	}
water	60:8	0:0	4	}
water	61:4	0:0	2	}
for	62:4	63:78	2	(i = 0 ;i < SECTION_MAX_NB_LEVELS;i ++)
forinit	62:9	62:14	3	i = 0 ;
water	62:9	0:0	4	i
op	62:11	0:0	4	=
water	62:13	0:0	4	0
water	62:14	0:0	4	;
cond	62:16	62:20	3	i < SECTION_MAX_NB_LEVELS
water	62:16	0:0	4	i
op	62:18	0:0	4	<
water	62:20	0:0	4	SECTION_MAX_NB_LEVELS
forexpr	62:43	62:44	3	i ++
water	62:43	0:0	4	i
op	62:44	0:0	4	++
stmts	63:8	63:78	3	
call	63:8	63:77	4	av_bprint_init
arg	63:23	63:48	5	&(*wctx)->section_pbuf[i]
op	63:23	0:0	6	&
water	63:24	0:0	6	(
op	63:25	0:0	6	*
water	63:26	0:0	6	wctx
water	63:30	0:0	6	)
op	63:31	0:0	6	->
water	63:33	0:0	6	section_pbuf
op	63:45	0:0	6	[
water	63:46	0:0	6	i
op	63:47	0:0	6	]
arg	63:50	63:51	5	1
water	63:50	0:0	6	1
arg	63:53	63:77	5	AV_BPRINT_SIZE_UNLIMITED
water	63:53	0:0	6	AV_BPRINT_SIZE_UNLIMITED
water	63:78	0:0	4	;
if	64:4	65:42	2	(( * wctx ) -> writer -> init)
cond	64:8	64:25	3	( * wctx ) -> writer -> init
water	64:8	0:0	4	(
op	64:9	0:0	4	*
water	64:10	0:0	4	wctx
water	64:14	0:0	4	)
op	64:15	0:0	4	->
water	64:17	0:0	4	writer
op	64:23	0:0	4	->
water	64:25	0:0	4	init
stmts	65:8	65:42	3	
water	65:8	0:0	4	ret
op	65:12	0:0	4	=
water	65:14	0:0	4	(
op	65:15	0:0	4	*
water	65:16	0:0	4	wctx
water	65:20	0:0	4	)
op	65:21	0:0	4	->
call	65:23	65:41	4	writer->init
arg	65:36	65:41	5	*wctx
op	65:36	0:0	6	*
water	65:37	0:0	6	wctx
water	65:42	0:0	4	;
if	66:4	67:17	2	(ret < 0)
cond	66:8	66:14	3	ret < 0
water	66:8	0:0	4	ret
op	66:12	0:0	4	<
water	66:14	0:0	4	0
stmts	67:8	67:17	3	
goto	67:8	67:17	4	fail
water	67:13	0:0	5	fail
return	68:4	68:12	2	0
water	68:11	0:0	3	0
label	69:0	69:4	2	fail :
call	70:4	70:21	2	writer_close
arg	70:17	70:21	3	wctx
water	70:17	0:0	4	wctx
water	70:22	0:0	2	;
return	71:4	71:14	2	ret
water	71:11	0:0	3	ret
