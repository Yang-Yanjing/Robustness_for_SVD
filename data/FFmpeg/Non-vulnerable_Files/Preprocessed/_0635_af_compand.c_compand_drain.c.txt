func	1:0	31:0	0	static int	compand_drain
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	30:42	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:36	2	CompandContext	*s
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	priv
decl	5:4	5:44	2	const int	channels
op	5:25	0:0	2	=
water	5:27	0:0	2	outlink
op	5:34	0:0	2	->
water	5:36	0:0	2	channels
decl	6:4	6:31	2	AVFrame	*frame
op	6:25	0:0	2	=
water	6:27	0:0	2	NULL
decl	7:4	7:23	2	int	chan
water	7:12	0:0	2	,
decl	7:4	7:23	2	int	i
water	7:15	0:0	2	,
decl	7:4	7:23	2	int	dindex
water	9:4	0:0	2	frame
op	9:10	0:0	2	=
call	9:12	9:68	2	ff_get_audio_buffer
arg	9:32	9:39	3	outlink
water	9:32	0:0	4	outlink
arg	9:41	9:68	3	FFMIN(2048,s->delay_count)
call	9:41	9:67	4	FFMIN
arg	9:47	9:51	5	2048
water	9:47	0:0	6	2048
arg	9:53	9:67	5	s->delay_count
water	9:53	0:0	6	s
op	9:54	0:0	6	->
water	9:56	0:0	6	delay_count
water	9:69	0:0	2	;
if	10:4	11:30	2	(! frame)
cond	10:8	10:9	3	! frame
op	10:8	0:0	4	!
water	10:9	0:0	4	frame
stmts	11:8	11:30	3	
return	11:8	11:30	4	AVERROR(ENOMEM)
call	11:15	11:29	5	AVERROR
arg	11:23	11:29	6	ENOMEM
water	11:23	0:0	7	ENOMEM
water	12:4	0:0	2	frame
op	12:9	0:0	2	->
water	12:11	0:0	2	pts
op	12:15	0:0	2	=
water	12:17	0:0	2	s
op	12:18	0:0	2	->
water	12:20	0:0	2	pts
water	12:23	0:0	2	;
water	13:4	0:0	2	s
op	13:5	0:0	2	->
water	13:7	0:0	2	pts
op	13:11	0:0	2	+=
call	13:14	14:71	2	av_rescale_q
arg	13:27	13:44	3	frame->nb_samples
water	13:27	0:0	4	frame
op	13:32	0:0	4	->
water	13:34	0:0	4	nb_samples
arg	14:12	14:51	3	(AVRational){1,outlink->sample_rate}
water	14:12	0:0	4	(
water	14:13	0:0	4	AVRational
water	14:23	0:0	4	)
water	14:24	0:0	4	{
water	14:26	0:0	4	1
water	14:27	0:0	4	,
water	14:29	0:0	4	outlink
op	14:36	0:0	4	->
water	14:38	0:0	4	sample_rate
water	14:50	0:0	4	}
arg	14:53	14:71	3	outlink->time_base
water	14:53	0:0	4	outlink
op	14:60	0:0	4	->
water	14:62	0:0	4	time_base
water	14:72	0:0	2	;
call	15:4	15:27	2	av_assert0
arg	15:15	15:27	3	channels>0
water	15:15	0:0	4	channels
op	15:24	0:0	4	>
water	15:26	0:0	4	0
water	15:28	0:0	2	;
for	16:4	27:4	2	(chan = 0 ;chan < channels;chan ++)
forinit	16:9	16:17	3	chan = 0 ;
water	16:9	0:0	4	chan
op	16:14	0:0	4	=
water	16:16	0:0	4	0
water	16:17	0:0	4	;
cond	16:19	16:26	3	chan < channels
water	16:19	0:0	4	chan
op	16:24	0:0	4	<
water	16:26	0:0	4	channels
forexpr	16:36	16:40	3	chan ++
water	16:36	0:0	4	chan
op	16:40	0:0	4	++
stmts	16:44	27:4	3	
water	16:44	0:0	4	{
decl	17:8	17:45	4	AVFrame	*delay_frame
op	17:29	0:0	4	=
water	17:31	0:0	4	s
op	17:32	0:0	4	->
water	17:34	0:0	4	delay_frame
decl	18:8	18:65	4	double	*dbuf
op	18:21	0:0	4	=
water	18:23	0:0	4	(
water	18:24	0:0	4	double
op	18:31	0:0	4	*
water	18:32	0:0	4	)
water	18:33	0:0	4	delay_frame
op	18:44	0:0	4	->
water	18:46	0:0	4	extended_data
op	18:59	0:0	4	[
water	18:60	0:0	4	chan
op	18:64	0:0	4	]
decl	19:8	19:58	4	double	*dst
op	19:20	0:0	4	=
water	19:22	0:0	4	(
water	19:23	0:0	4	double
op	19:30	0:0	4	*
water	19:31	0:0	4	)
water	19:32	0:0	4	frame
op	19:37	0:0	4	->
water	19:39	0:0	4	extended_data
op	19:52	0:0	4	[
water	19:53	0:0	4	chan
op	19:57	0:0	4	]
decl	20:8	20:42	4	ChanParam	*cp
op	20:22	0:0	4	=
op	20:24	0:0	4	&
water	20:25	0:0	4	s
op	20:26	0:0	4	->
water	20:28	0:0	4	channels
op	20:36	0:0	4	[
water	20:37	0:0	4	chan
op	20:41	0:0	4	]
water	21:8	0:0	4	dindex
op	21:15	0:0	4	=
water	21:17	0:0	4	s
op	21:18	0:0	4	->
water	21:20	0:0	4	delay_index
water	21:31	0:0	4	;
for	22:8	26:8	4	(i = 0 ;i < frame -> nb_samples;i ++)
forinit	22:13	22:18	5	i = 0 ;
water	22:13	0:0	6	i
op	22:15	0:0	6	=
water	22:17	0:0	6	0
water	22:18	0:0	6	;
cond	22:20	22:31	5	i < frame -> nb_samples
water	22:20	0:0	6	i
op	22:22	0:0	6	<
water	22:24	0:0	6	frame
op	22:29	0:0	6	->
water	22:31	0:0	6	nb_samples
forexpr	22:43	22:44	5	i ++
water	22:43	0:0	6	i
op	22:44	0:0	6	++
stmts	22:48	26:8	5	
water	22:48	0:0	6	{
water	23:12	0:0	6	dst
op	23:15	0:0	6	[
water	23:16	0:0	6	i
op	23:17	0:0	6	]
op	23:19	0:0	6	=
call	23:21	24:25	6	av_clipd
arg	23:30	23:70	7	dbuf[dindex]*get_volume(s,cp->volume)
water	23:30	0:0	8	dbuf
op	23:34	0:0	8	[
water	23:35	0:0	8	dindex
op	23:41	0:0	8	]
call	23:43	23:69	8	*get_volume
arg	23:56	23:57	9	s
water	23:56	0:0	10	s
arg	23:59	23:69	9	cp->volume
water	23:59	0:0	10	cp
op	23:61	0:0	10	->
water	23:63	0:0	10	volume
arg	24:20	24:22	7	-1
op	24:20	0:0	8	-
water	24:21	0:0	8	1
arg	24:24	24:25	7	1
water	24:24	0:0	8	1
water	24:26	0:0	6	;
water	25:12	0:0	6	dindex
op	25:19	0:0	6	=
call	25:21	25:53	6	MOD
arg	25:25	25:35	7	dindex+1
water	25:25	0:0	8	dindex
op	25:32	0:0	8	+
water	25:34	0:0	8	1
arg	25:37	25:53	7	s->delay_samples
water	25:37	0:0	8	s
op	25:38	0:0	8	->
water	25:40	0:0	8	delay_samples
water	25:54	0:0	6	;
water	26:8	0:0	6	}
water	27:4	0:0	4	}
water	28:4	0:0	2	s
op	28:5	0:0	2	->
water	28:7	0:0	2	delay_count
op	28:19	0:0	2	-=
water	28:22	0:0	2	frame
op	28:27	0:0	2	->
water	28:29	0:0	2	nb_samples
water	28:39	0:0	2	;
water	29:4	0:0	2	s
op	29:5	0:0	2	->
water	29:7	0:0	2	delay_index
op	29:19	0:0	2	=
water	29:21	0:0	2	dindex
water	29:27	0:0	2	;
return	30:4	30:42	2	ff_filter_frame(outlink,frame)
call	30:11	30:41	3	ff_filter_frame
arg	30:27	30:34	4	outlink
water	30:27	0:0	5	outlink
arg	30:36	30:41	4	frame
water	30:36	0:0	5	frame
