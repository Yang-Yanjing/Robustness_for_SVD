func	1:0	111:0	0	static void	flush_encoders
params	1:26	0:0	1	
param	1:27	1:31	2	void
stmnts	0:0	110:4	1	
decl	3:4	3:14	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:14	2	int	ret
for	4:4	110:4	2	(i = 0 ;i < nb_output_streams;i ++)
forinit	4:9	4:14	3	i = 0 ;
water	4:9	0:0	4	i
op	4:11	0:0	4	=
water	4:13	0:0	4	0
water	4:14	0:0	4	;
cond	4:16	4:20	3	i < nb_output_streams
water	4:16	0:0	4	i
op	4:18	0:0	4	<
water	4:20	0:0	4	nb_output_streams
forexpr	4:39	4:40	3	i ++
water	4:39	0:0	4	i
op	4:40	0:0	4	++
stmts	4:44	110:4	3	
water	4:44	0:0	4	{
decl	5:8	5:47	4	OutputStream	*ost
op	5:28	0:0	4	=
water	5:30	0:0	4	output_streams
op	5:44	0:0	4	[
water	5:45	0:0	4	i
op	5:46	0:0	4	]
decl	6:8	6:42	4	AVCodecContext	*enc
op	6:28	0:0	4	=
water	6:30	0:0	4	ost
op	6:33	0:0	4	->
water	6:35	0:0	4	enc_ctx
decl	7:8	7:59	4	OutputFile	*of
op	7:28	0:0	4	=
water	7:30	0:0	4	output_files
op	7:42	0:0	4	[
water	7:43	0:0	4	ost
op	7:46	0:0	4	->
water	7:48	0:0	4	file_index
op	7:58	0:0	4	]
if	8:8	9:20	4	(! ost -> encoding_needed)
cond	8:12	8:18	5	! ost -> encoding_needed
op	8:12	0:0	6	!
water	8:13	0:0	6	ost
op	8:16	0:0	6	->
water	8:18	0:0	6	encoding_needed
stmts	9:12	9:20	5	
continue	9:12	9:20	6	
if	12:8	50:8	4	(! ost -> initialized)
cond	12:12	12:18	5	! ost -> initialized
op	12:12	0:0	6	!
water	12:13	0:0	6	ost
op	12:16	0:0	6	->
water	12:18	0:0	6	initialized
stmts	12:31	50:8	5	
water	12:31	0:0	6	{
decl	13:12	13:48	6	FilterGraph	*fg
op	13:28	0:0	6	=
water	13:30	0:0	6	ost
op	13:33	0:0	6	->
water	13:35	0:0	6	filter
op	13:41	0:0	6	->
water	13:43	0:0	6	graph
decl	14:12	14:33	6	char	error[1024]
op	14:29	0:0	6	=
water	14:31	0:0	6	""
call	15:12	17:50	6	av_log
arg	15:19	15:23	7	NULL
water	15:19	0:0	8	NULL
arg	15:25	15:39	7	AV_LOG_WARNING
water	15:25	0:0	8	AV_LOG_WARNING
arg	16:19	16:77	7	"Finishing stream %d:%d without any data written to it.\n"
water	16:19	0:0	8	"Finishing stream %d:%d without any data written to it.\n"
arg	17:19	17:34	7	ost->file_index
water	17:19	0:0	8	ost
op	17:22	0:0	8	->
water	17:24	0:0	8	file_index
arg	17:36	17:50	7	ost->st->index
water	17:36	0:0	8	ost
op	17:39	0:0	8	->
water	17:41	0:0	8	st
op	17:43	0:0	8	->
water	17:45	0:0	8	index
water	17:51	0:0	6	;
if	18:12	43:12	6	(ost -> filter && ! fg -> graph)
cond	18:16	18:36	7	ost -> filter && ! fg -> graph
water	18:16	0:0	8	ost
op	18:19	0:0	8	->
water	18:21	0:0	8	filter
op	18:28	0:0	8	&&
op	18:31	0:0	8	!
water	18:32	0:0	8	fg
op	18:34	0:0	8	->
water	18:36	0:0	8	graph
stmts	18:43	43:12	7	
water	18:43	0:0	8	{
decl	19:16	19:21	8	int	x
for	20:16	34:16	8	(x = 0 ;x < fg -> nb_inputs;x ++)
forinit	20:21	20:26	9	x = 0 ;
water	20:21	0:0	10	x
op	20:23	0:0	10	=
water	20:25	0:0	10	0
water	20:26	0:0	10	;
cond	20:28	20:36	9	x < fg -> nb_inputs
water	20:28	0:0	10	x
op	20:30	0:0	10	<
water	20:32	0:0	10	fg
op	20:34	0:0	10	->
water	20:36	0:0	10	nb_inputs
forexpr	20:47	20:48	9	x ++
water	20:47	0:0	10	x
op	20:48	0:0	10	++
stmts	20:52	34:16	9	
water	20:52	0:0	10	{
decl	21:20	21:56	10	InputFilter	*ifilter
op	21:41	0:0	10	=
water	21:43	0:0	10	fg
op	21:45	0:0	10	->
water	21:47	0:0	10	inputs
op	21:53	0:0	10	[
water	21:54	0:0	10	x
op	21:55	0:0	10	]
if	22:20	33:20	10	(ifilter -> format < 0)
cond	22:24	22:42	11	ifilter -> format < 0
water	22:24	0:0	12	ifilter
op	22:31	0:0	12	->
water	22:33	0:0	12	format
op	22:40	0:0	12	<
water	22:42	0:0	12	0
stmts	22:45	33:20	11	
water	22:45	0:0	12	{
decl	23:24	23:75	12	AVCodecParameters	*par
op	23:47	0:0	12	=
water	23:49	0:0	12	ifilter
op	23:56	0:0	12	->
water	23:58	0:0	12	ist
op	23:61	0:0	12	->
water	23:63	0:0	12	st
op	23:65	0:0	12	->
water	23:67	0:0	12	codecpar
water	26:24	0:0	12	ifilter
op	26:31	0:0	12	->
water	26:33	0:0	12	format
op	26:56	0:0	12	=
water	26:58	0:0	12	par
op	26:61	0:0	12	->
water	26:63	0:0	12	format
water	26:69	0:0	12	;
water	27:24	0:0	12	ifilter
op	27:31	0:0	12	->
water	27:33	0:0	12	sample_rate
op	27:56	0:0	12	=
water	27:58	0:0	12	par
op	27:61	0:0	12	->
water	27:63	0:0	12	sample_rate
water	27:74	0:0	12	;
water	28:24	0:0	12	ifilter
op	28:31	0:0	12	->
water	28:33	0:0	12	channels
op	28:56	0:0	12	=
water	28:58	0:0	12	par
op	28:61	0:0	12	->
water	28:63	0:0	12	channels
water	28:71	0:0	12	;
water	29:24	0:0	12	ifilter
op	29:31	0:0	12	->
water	29:33	0:0	12	channel_layout
op	29:56	0:0	12	=
water	29:58	0:0	12	par
op	29:61	0:0	12	->
water	29:63	0:0	12	channel_layout
water	29:77	0:0	12	;
water	30:24	0:0	12	ifilter
op	30:31	0:0	12	->
water	30:33	0:0	12	width
op	30:56	0:0	12	=
water	30:58	0:0	12	par
op	30:61	0:0	12	->
water	30:63	0:0	12	width
water	30:68	0:0	12	;
water	31:24	0:0	12	ifilter
op	31:31	0:0	12	->
water	31:33	0:0	12	height
op	31:56	0:0	12	=
water	31:58	0:0	12	par
op	31:61	0:0	12	->
water	31:63	0:0	12	height
water	31:69	0:0	12	;
water	32:24	0:0	12	ifilter
op	32:31	0:0	12	->
water	32:33	0:0	12	sample_aspect_ratio
op	32:56	0:0	12	=
water	32:58	0:0	12	par
op	32:61	0:0	12	->
water	32:63	0:0	12	sample_aspect_ratio
water	32:82	0:0	12	;
water	33:20	0:0	12	}
water	34:16	0:0	10	}
if	35:16	36:28	8	(!ifilter_has_all_input_formats (fg ))
cond	35:20	35:53	9	!ifilter_has_all_input_formats (fg )
op	35:20	0:0	10	!
call	35:21	35:53	10	ifilter_has_all_input_formats
arg	35:51	35:53	11	fg
water	35:51	0:0	12	fg
stmts	36:20	36:28	9	
continue	36:20	36:28	10	
water	37:16	0:0	8	ret
op	37:20	0:0	8	=
call	37:22	37:46	8	configure_filtergraph
arg	37:44	37:46	9	fg
water	37:44	0:0	10	fg
water	37:47	0:0	8	;
if	38:16	41:16	8	(ret < 0)
cond	38:20	38:26	9	ret < 0
water	38:20	0:0	10	ret
op	38:24	0:0	10	<
water	38:26	0:0	10	0
stmts	38:29	41:16	9	
water	38:29	0:0	10	{
call	39:20	39:81	10	av_log
arg	39:27	39:31	11	NULL
water	39:27	0:0	12	NULL
arg	39:33	39:45	11	AV_LOG_ERROR
water	39:33	0:0	12	AV_LOG_ERROR
arg	39:47	39:81	11	"Error configuring filter graph\n"
water	39:47	0:0	12	"Error configuring filter graph\n"
water	39:82	0:0	10	;
call	40:20	40:34	10	exit_program
arg	40:33	40:34	11	1
water	40:33	0:0	12	1
water	40:35	0:0	10	;
water	41:16	0:0	10	}
call	42:16	42:40	8	finish_output_stream
arg	42:37	42:40	9	ost
water	42:37	0:0	10	ost
water	42:41	0:0	8	;
water	43:12	0:0	8	}
water	44:12	0:0	6	ret
op	44:16	0:0	6	=
call	44:18	44:62	6	init_output_stream
arg	44:37	44:40	7	ost
water	44:37	0:0	8	ost
arg	44:42	44:47	7	error
water	44:42	0:0	8	error
arg	44:49	44:62	7	sizeof(error)
op	44:49	0:0	8	sizeof
water	44:55	0:0	8	(
water	44:56	0:0	8	error
water	44:61	0:0	8	)
water	44:63	0:0	6	;
if	45:12	49:12	6	(ret < 0)
cond	45:16	45:22	7	ret < 0
water	45:16	0:0	8	ret
op	45:20	0:0	8	<
water	45:22	0:0	8	0
stmts	45:25	49:12	7	
water	45:25	0:0	8	{
call	46:16	47:57	8	av_log
arg	46:23	46:27	9	NULL
water	46:23	0:0	10	NULL
arg	46:29	46:41	9	AV_LOG_ERROR
water	46:29	0:0	10	AV_LOG_ERROR
arg	46:43	46:91	9	"Error initializing output stream %d:%d -- %s\n"
water	46:43	0:0	10	"Error initializing output stream %d:%d -- %s\n"
arg	47:23	47:38	9	ost->file_index
water	47:23	0:0	10	ost
op	47:26	0:0	10	->
water	47:28	0:0	10	file_index
arg	47:40	47:50	9	ost->index
water	47:40	0:0	10	ost
op	47:43	0:0	10	->
water	47:45	0:0	10	index
arg	47:52	47:57	9	error
water	47:52	0:0	10	error
water	47:58	0:0	8	;
call	48:16	48:30	8	exit_program
arg	48:29	48:30	9	1
water	48:29	0:0	10	1
water	48:31	0:0	8	;
water	49:12	0:0	8	}
water	50:8	0:0	6	}
if	51:8	52:20	4	(enc -> codec_type == AVMEDIA_TYPE_AUDIO && enc -> frame_size <= 1)
cond	51:12	51:72	5	enc -> codec_type == AVMEDIA_TYPE_AUDIO && enc -> frame_size <= 1
water	51:12	0:0	6	enc
op	51:15	0:0	6	->
water	51:17	0:0	6	codec_type
op	51:28	0:0	6	==
water	51:31	0:0	6	AVMEDIA_TYPE_AUDIO
op	51:50	0:0	6	&&
water	51:53	0:0	6	enc
op	51:56	0:0	6	->
water	51:58	0:0	6	frame_size
op	51:69	0:0	6	<=
water	51:72	0:0	6	1
stmts	52:12	52:20	5	
continue	52:12	52:20	6	
if	54:8	55:20	4	(enc -> codec_type == AVMEDIA_TYPE_VIDEO && ( of -> ctx -> oformat -> flags & AVFMT_RAWPICTURE ) && enc -> codec -> id == AV_CODEC_ID_RAWVIDEO)
cond	54:12	54:119	5	enc -> codec_type == AVMEDIA_TYPE_VIDEO && ( of -> ctx -> oformat -> flags & AVFMT_RAWPICTURE ) && enc -> codec -> id == AV_CODEC_ID_RAWVIDEO
water	54:12	0:0	6	enc
op	54:15	0:0	6	->
water	54:17	0:0	6	codec_type
op	54:28	0:0	6	==
water	54:31	0:0	6	AVMEDIA_TYPE_VIDEO
op	54:50	0:0	6	&&
water	54:53	0:0	6	(
water	54:54	0:0	6	of
op	54:56	0:0	6	->
water	54:58	0:0	6	ctx
op	54:61	0:0	6	->
water	54:63	0:0	6	oformat
op	54:70	0:0	6	->
water	54:72	0:0	6	flags
op	54:78	0:0	6	&
water	54:80	0:0	6	AVFMT_RAWPICTURE
water	54:96	0:0	6	)
op	54:98	0:0	6	&&
water	54:101	0:0	6	enc
op	54:104	0:0	6	->
water	54:106	0:0	6	codec
op	54:111	0:0	6	->
water	54:113	0:0	6	id
op	54:116	0:0	6	==
water	54:119	0:0	6	AV_CODEC_ID_RAWVIDEO
stmts	55:12	55:20	5	
continue	55:12	55:20	6	
if	57:8	58:20	4	(enc -> codec_type != AVMEDIA_TYPE_VIDEO && enc -> codec_type != AVMEDIA_TYPE_AUDIO)
cond	57:12	57:72	5	enc -> codec_type != AVMEDIA_TYPE_VIDEO && enc -> codec_type != AVMEDIA_TYPE_AUDIO
water	57:12	0:0	6	enc
op	57:15	0:0	6	->
water	57:17	0:0	6	codec_type
op	57:28	0:0	6	!=
water	57:31	0:0	6	AVMEDIA_TYPE_VIDEO
op	57:50	0:0	6	&&
water	57:53	0:0	6	enc
op	57:56	0:0	6	->
water	57:58	0:0	6	codec_type
op	57:69	0:0	6	!=
water	57:72	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	58:12	58:20	5	
continue	58:12	58:20	6	
for	59:8	109:8	4	(;;)
forinit	59:13	59:13	5	;
water	59:13	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	59:17	109:8	5	
water	59:17	0:0	6	{
decl	60:12	60:35	6	const char	*desc
op	60:29	0:0	6	=
water	60:31	0:0	6	NULL
decl	61:12	61:24	6	AVPacket	pkt
decl	62:12	62:24	6	int	pkt_size
switch	63:12	72:12	6	(enc -> codec_type)
cond	63:20	63:25	7	enc -> codec_type
water	63:20	0:0	8	enc
op	63:23	0:0	8	->
water	63:25	0:0	8	codec_type
stmts	63:37	72:12	7	
water	63:37	0:0	8	{
label	64:12	64:35	8	case AVMEDIA_TYPE_AUDIO :
water	65:16	0:0	8	desc
op	65:23	0:0	8	=
water	65:25	0:0	8	"audio"
water	65:32	0:0	8	;
break	66:16	66:21	8	
label	67:12	67:35	8	case AVMEDIA_TYPE_VIDEO :
water	68:16	0:0	8	desc
op	68:23	0:0	8	=
water	68:25	0:0	8	"video"
water	68:32	0:0	8	;
break	69:16	69:21	8	
label	70:12	70:19	8	default :
call	71:16	71:28	8	av_assert0
arg	71:27	71:28	9	0
water	71:27	0:0	10	0
water	71:29	0:0	8	;
water	72:12	0:0	8	}
call	73:16	73:35	6	av_init_packet
arg	73:31	73:35	7	&pkt
op	73:31	0:0	8	&
water	73:32	0:0	8	pkt
water	73:36	0:0	6	;
water	74:16	0:0	6	pkt
op	74:19	0:0	6	.
water	74:20	0:0	6	data
op	74:25	0:0	6	=
water	74:27	0:0	6	NULL
water	74:31	0:0	6	;
water	75:16	0:0	6	pkt
op	75:19	0:0	6	.
water	75:20	0:0	6	size
op	75:25	0:0	6	=
water	75:27	0:0	6	0
water	75:28	0:0	6	;
call	76:16	76:37	6	update_benchmark
arg	76:33	76:37	7	NULL
water	76:33	0:0	8	NULL
water	76:38	0:0	6	;
while	77:16	85:16	6	(( ret =avcodec_receive_packet (enc ,& pkt ) ) ==AVERROR (EAGAIN ))
cond	77:23	77:82	7	( ret =avcodec_receive_packet (enc ,& pkt ) ) ==AVERROR (EAGAIN )
water	77:23	0:0	8	(
water	77:24	0:0	8	ret
op	77:28	0:0	8	=
call	77:30	77:62	8	avcodec_receive_packet
arg	77:53	77:56	9	enc
water	77:53	0:0	10	enc
arg	77:58	77:62	9	&pkt
op	77:58	0:0	10	&
water	77:59	0:0	10	pkt
water	77:63	0:0	8	)
op	77:65	0:0	8	==
call	77:68	77:82	8	AVERROR
arg	77:76	77:82	9	EAGAIN
water	77:76	0:0	10	EAGAIN
stmts	77:85	85:16	7	
water	77:85	0:0	8	{
water	78:20	0:0	8	ret
op	78:24	0:0	8	=
call	78:26	78:54	8	avcodec_send_frame
arg	78:45	78:48	9	enc
water	78:45	0:0	10	enc
arg	78:50	78:54	9	NULL
water	78:50	0:0	10	NULL
water	78:55	0:0	8	;
if	79:20	84:20	8	(ret < 0)
cond	79:24	79:30	9	ret < 0
water	79:24	0:0	10	ret
op	79:28	0:0	10	<
water	79:30	0:0	10	0
stmts	79:33	84:20	9	
water	79:33	0:0	10	{
call	80:24	82:46	10	av_log
arg	80:31	80:35	11	NULL
water	80:31	0:0	12	NULL
arg	80:37	80:49	11	AV_LOG_FATAL
water	80:37	0:0	12	AV_LOG_FATAL
arg	80:51	80:77	11	"%s encoding failed: %s\n"
water	80:51	0:0	12	"%s encoding failed: %s\n"
arg	81:31	81:35	11	desc
water	81:31	0:0	12	desc
arg	82:31	82:46	11	av_err2str(ret)
call	82:31	82:45	12	av_err2str
arg	82:42	82:45	13	ret
water	82:42	0:0	14	ret
water	82:47	0:0	10	;
call	83:24	83:38	10	exit_program
arg	83:37	83:38	11	1
water	83:37	0:0	12	1
water	83:39	0:0	10	;
water	84:20	0:0	10	}
water	85:16	0:0	8	}
call	86:16	86:84	6	update_benchmark
arg	86:33	86:49	7	"flush_%s %d.%d"
water	86:33	0:0	8	"flush_%s %d.%d"
arg	86:51	86:55	7	desc
water	86:51	0:0	8	desc
arg	86:57	86:72	7	ost->file_index
water	86:57	0:0	8	ost
op	86:60	0:0	8	->
water	86:62	0:0	8	file_index
arg	86:74	86:84	7	ost->index
water	86:74	0:0	8	ost
op	86:77	0:0	8	->
water	86:79	0:0	8	index
water	86:85	0:0	6	;
if	87:16	92:16	6	(ret < 0 && ret != AVERROR_EOF)
cond	87:20	87:38	7	ret < 0 && ret != AVERROR_EOF
water	87:20	0:0	8	ret
op	87:24	0:0	8	<
water	87:26	0:0	8	0
op	87:28	0:0	8	&&
water	87:31	0:0	8	ret
op	87:35	0:0	8	!=
water	87:38	0:0	8	AVERROR_EOF
stmts	87:51	92:16	7	
water	87:51	0:0	8	{
call	88:20	90:42	8	av_log
arg	88:27	88:31	9	NULL
water	88:27	0:0	10	NULL
arg	88:33	88:45	9	AV_LOG_FATAL
water	88:33	0:0	10	AV_LOG_FATAL
arg	88:47	88:73	9	"%s encoding failed: %s\n"
water	88:47	0:0	10	"%s encoding failed: %s\n"
arg	89:27	89:31	9	desc
water	89:27	0:0	10	desc
arg	90:27	90:42	9	av_err2str(ret)
call	90:27	90:41	10	av_err2str
arg	90:38	90:41	11	ret
water	90:38	0:0	12	ret
water	90:43	0:0	8	;
call	91:20	91:34	8	exit_program
arg	91:33	91:34	9	1
water	91:33	0:0	10	1
water	91:35	0:0	8	;
water	92:16	0:0	8	}
if	93:16	95:16	6	(ost -> logfile && enc -> stats_out)
cond	93:20	93:41	7	ost -> logfile && enc -> stats_out
water	93:20	0:0	8	ost
op	93:23	0:0	8	->
water	93:25	0:0	8	logfile
op	93:33	0:0	8	&&
water	93:36	0:0	8	enc
op	93:39	0:0	8	->
water	93:41	0:0	8	stats_out
stmts	93:52	95:16	7	
water	93:52	0:0	8	{
call	94:20	94:62	8	fprintf
arg	94:28	94:40	9	ost->logfile
water	94:28	0:0	10	ost
op	94:31	0:0	10	->
water	94:33	0:0	10	logfile
arg	94:42	94:46	9	"%s"
water	94:42	0:0	10	"%s"
arg	94:48	94:62	9	enc->stats_out
water	94:48	0:0	10	enc
op	94:51	0:0	10	->
water	94:53	0:0	10	stats_out
water	94:63	0:0	8	;
water	95:16	0:0	8	}
if	96:16	98:16	6	(ret == AVERROR_EOF)
cond	96:20	96:27	7	ret == AVERROR_EOF
water	96:20	0:0	8	ret
op	96:24	0:0	8	==
water	96:27	0:0	8	AVERROR_EOF
stmts	96:40	98:16	7	
water	96:40	0:0	8	{
break	97:20	97:25	8	
water	98:16	0:0	8	}
if	99:16	102:16	6	(ost -> finished & MUXER_FINISHED)
cond	99:20	99:36	7	ost -> finished & MUXER_FINISHED
water	99:20	0:0	8	ost
op	99:23	0:0	8	->
water	99:25	0:0	8	finished
op	99:34	0:0	8	&
water	99:36	0:0	8	MUXER_FINISHED
stmts	99:52	102:16	7	
water	99:52	0:0	8	{
call	100:20	100:40	8	av_packet_unref
arg	100:36	100:40	9	&pkt
op	100:36	0:0	10	&
water	100:37	0:0	10	pkt
water	100:41	0:0	8	;
continue	101:20	101:28	8	
water	102:16	0:0	8	}
call	103:16	103:76	6	av_packet_rescale_ts
arg	103:37	103:41	7	&pkt
op	103:37	0:0	8	&
water	103:38	0:0	8	pkt
arg	103:43	103:57	7	enc->time_base
water	103:43	0:0	8	enc
op	103:46	0:0	8	->
water	103:48	0:0	8	time_base
arg	103:59	103:76	7	ost->mux_timebase
water	103:59	0:0	8	ost
op	103:62	0:0	8	->
water	103:64	0:0	8	mux_timebase
water	103:77	0:0	6	;
water	104:16	0:0	6	pkt_size
op	104:25	0:0	6	=
water	104:27	0:0	6	pkt
op	104:30	0:0	6	.
water	104:31	0:0	6	size
water	104:35	0:0	6	;
call	105:16	105:43	6	output_packet
arg	105:30	105:32	7	of
water	105:30	0:0	8	of
arg	105:34	105:38	7	&pkt
op	105:34	0:0	8	&
water	105:35	0:0	8	pkt
arg	105:40	105:43	7	ost
water	105:40	0:0	8	ost
water	105:44	0:0	6	;
if	106:16	108:16	6	(ost -> enc_ctx -> codec_type == AVMEDIA_TYPE_VIDEO && vstats_filename)
cond	106:20	106:70	7	ost -> enc_ctx -> codec_type == AVMEDIA_TYPE_VIDEO && vstats_filename
water	106:20	0:0	8	ost
op	106:23	0:0	8	->
water	106:25	0:0	8	enc_ctx
op	106:32	0:0	8	->
water	106:34	0:0	8	codec_type
op	106:45	0:0	8	==
water	106:48	0:0	8	AVMEDIA_TYPE_VIDEO
op	106:67	0:0	8	&&
water	106:70	0:0	8	vstats_filename
stmts	106:87	108:16	7	
water	106:87	0:0	8	{
call	107:20	107:48	8	do_video_stats
arg	107:35	107:38	9	ost
water	107:35	0:0	10	ost
arg	107:40	107:48	9	pkt_size
water	107:40	0:0	10	pkt_size
water	107:49	0:0	8	;
water	108:16	0:0	8	}
water	109:8	0:0	6	}
water	110:4	0:0	4	}
