func	1:15	47:0	0	int	write_header
params	1:31	0:0	1	
param	1:32	1:51	2	AVFormatContext *	s1
stmnts	0:0	46:14	1	
decl	3:4	3:31	2	int	res
op	3:12	0:0	2	=
water	3:14	0:0	2	0
water	3:15	0:0	2	,
decl	3:4	3:31	2	int	flags
op	3:23	0:0	2	=
water	3:25	0:0	2	O_RDWR
decl	4:4	6:5	2	struct v4l2_format	fmt
op	4:27	0:0	2	=
water	4:29	0:0	2	{
op	5:8	0:0	2	.
water	5:9	0:0	2	type
op	5:14	0:0	2	=
water	5:16	0:0	2	V4L2_BUF_TYPE_VIDEO_OUTPUT
water	6:4	0:0	2	}
decl	7:4	7:34	2	V4L2Context	*s
op	7:19	0:0	2	=
water	7:21	0:0	2	s1
op	7:23	0:0	2	->
water	7:25	0:0	2	priv_data
decl	8:4	8:27	2	AVCodecContext	*enc_ctx
decl	9:4	9:24	2	uint32_t	v4l2_pixfmt
if	10:4	11:27	2	(s1 -> flags & AVFMT_FLAG_NONBLOCK)
cond	10:8	10:20	3	s1 -> flags & AVFMT_FLAG_NONBLOCK
water	10:8	0:0	4	s1
op	10:10	0:0	4	->
water	10:12	0:0	4	flags
op	10:18	0:0	4	&
water	10:20	0:0	4	AVFMT_FLAG_NONBLOCK
stmts	11:8	11:27	3	
water	11:8	0:0	4	flags
op	11:14	0:0	4	|=
water	11:17	0:0	4	O_NONBLOCK
water	11:27	0:0	4	;
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	fd
op	12:10	0:0	2	=
call	12:12	12:36	2	open
arg	12:17	12:29	3	s1->filename
water	12:17	0:0	4	s1
op	12:19	0:0	4	->
water	12:21	0:0	4	filename
arg	12:31	12:36	3	flags
water	12:31	0:0	4	flags
water	12:37	0:0	2	;
if	13:4	17:4	2	(s -> fd < 0)
cond	13:8	13:16	3	s -> fd < 0
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	fd
op	13:14	0:0	4	<
water	13:16	0:0	4	0
stmts	13:19	17:4	3	
water	13:19	0:0	4	{
water	14:8	0:0	4	res
op	14:12	0:0	4	=
call	14:14	14:27	4	AVERROR
arg	14:22	14:27	5	errno
water	14:22	0:0	6	errno
water	14:28	0:0	4	;
call	15:8	15:82	4	av_log
arg	15:15	15:17	5	s1
water	15:15	0:0	6	s1
arg	15:19	15:31	5	AV_LOG_ERROR
water	15:19	0:0	6	AV_LOG_ERROR
arg	15:33	15:68	5	"Unable to open V4L2 device '%s'\n"
water	15:33	0:0	6	"Unable to open V4L2 device '%s'\n"
arg	15:70	15:82	5	s1->filename
water	15:70	0:0	6	s1
op	15:72	0:0	6	->
water	15:74	0:0	6	filename
water	15:83	0:0	4	;
return	16:8	16:18	4	res
water	16:15	0:0	5	res
water	17:4	0:0	4	}
if	18:4	24:4	2	(s1 -> nb_streams != 1 || s1 -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_VIDEO || s1 -> streams [ 0 ] -> codec -> codec_id != AV_CODEC_ID_RAWVIDEO)
cond	18:8	20:45	3	s1 -> nb_streams != 1 || s1 -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_VIDEO || s1 -> streams [ 0 ] -> codec -> codec_id != AV_CODEC_ID_RAWVIDEO
water	18:8	0:0	4	s1
op	18:10	0:0	4	->
water	18:12	0:0	4	nb_streams
op	18:23	0:0	4	!=
water	18:26	0:0	4	1
op	18:28	0:0	4	||
water	19:8	0:0	4	s1
op	19:10	0:0	4	->
water	19:12	0:0	4	streams
op	19:19	0:0	4	[
water	19:20	0:0	4	0
op	19:21	0:0	4	]
op	19:22	0:0	4	->
water	19:24	0:0	4	codec
op	19:29	0:0	4	->
water	19:31	0:0	4	codec_type
op	19:42	0:0	4	!=
water	19:45	0:0	4	AVMEDIA_TYPE_VIDEO
op	19:64	0:0	4	||
water	20:8	0:0	4	s1
op	20:10	0:0	4	->
water	20:12	0:0	4	streams
op	20:19	0:0	4	[
water	20:20	0:0	4	0
op	20:21	0:0	4	]
op	20:22	0:0	4	->
water	20:24	0:0	4	codec
op	20:29	0:0	4	->
water	20:31	0:0	4	codec_id
op	20:42	0:0	4	!=
water	20:45	0:0	4	AV_CODEC_ID_RAWVIDEO
stmts	20:67	24:4	3	
water	20:67	0:0	4	{
call	21:8	22:77	4	av_log
arg	21:15	21:17	5	s1
water	21:15	0:0	6	s1
arg	21:19	21:31	5	AV_LOG_ERROR
water	21:19	0:0	6	AV_LOG_ERROR
arg	22:15	22:77	5	"V4L2 output device supports only a single raw video stream\n"
water	22:15	0:0	6	"V4L2 output device supports only a single raw video stream\n"
water	22:78	0:0	4	;
return	23:8	23:30	4	AVERROR(EINVAL)
call	23:15	23:29	5	AVERROR
arg	23:23	23:29	6	EINVAL
water	23:23	0:0	7	EINVAL
water	24:4	0:0	4	}
water	25:4	0:0	2	enc_ctx
op	25:12	0:0	2	=
water	25:14	0:0	2	s1
op	25:16	0:0	2	->
water	25:18	0:0	2	streams
op	25:25	0:0	2	[
water	25:26	0:0	2	0
op	25:27	0:0	2	]
op	25:28	0:0	2	->
water	25:30	0:0	2	codec
water	25:35	0:0	2	;
water	26:4	0:0	2	v4l2_pixfmt
op	26:16	0:0	2	=
call	26:18	26:70	2	ff_fmt_ff2v4l
arg	26:32	26:48	3	enc_ctx->pix_fmt
water	26:32	0:0	4	enc_ctx
op	26:39	0:0	4	->
water	26:41	0:0	4	pix_fmt
arg	26:50	26:70	3	AV_CODEC_ID_RAWVIDEO
water	26:50	0:0	4	AV_CODEC_ID_RAWVIDEO
water	26:71	0:0	2	;
if	27:4	31:4	2	(! v4l2_pixfmt)
cond	27:8	27:9	3	! v4l2_pixfmt
op	27:8	0:0	4	!
water	27:9	0:0	4	v4l2_pixfmt
stmts	27:22	31:4	3	
water	27:22	0:0	4	{
call	28:8	29:52	4	av_log
arg	28:15	28:17	5	s1
water	28:15	0:0	6	s1
arg	28:19	28:31	5	AV_LOG_ERROR
water	28:19	0:0	6	AV_LOG_ERROR
arg	28:33	28:80	5	"Unknown V4L2 pixel format equivalent for %s\n"
water	28:33	0:0	6	"Unknown V4L2 pixel format equivalent for %s\n"
arg	29:15	29:52	5	av_get_pix_fmt_name(enc_ctx->pix_fmt)
call	29:15	29:51	6	av_get_pix_fmt_name
arg	29:35	29:51	7	enc_ctx->pix_fmt
water	29:35	0:0	8	enc_ctx
op	29:42	0:0	8	->
water	29:44	0:0	8	pix_fmt
water	29:53	0:0	4	;
return	30:8	30:30	4	AVERROR(EINVAL)
call	30:15	30:29	5	AVERROR
arg	30:23	30:29	6	EINVAL
water	30:23	0:0	7	EINVAL
water	31:4	0:0	4	}
if	32:4	36:4	2	(ioctl (s -> fd ,VIDIOC_G_FMT ,& fmt ) < 0)
cond	32:8	32:43	3	ioctl (s -> fd ,VIDIOC_G_FMT ,& fmt ) < 0
call	32:8	32:39	4	ioctl
arg	32:14	32:19	5	s->fd
water	32:14	0:0	6	s
op	32:15	0:0	6	->
water	32:17	0:0	6	fd
arg	32:21	32:33	5	VIDIOC_G_FMT
water	32:21	0:0	6	VIDIOC_G_FMT
arg	32:35	32:39	5	&fmt
op	32:35	0:0	6	&
water	32:36	0:0	6	fmt
op	32:41	0:0	4	<
water	32:43	0:0	4	0
stmts	32:46	36:4	3	
water	32:46	0:0	4	{
water	33:8	0:0	4	res
op	33:12	0:0	4	=
call	33:14	33:27	4	AVERROR
arg	33:22	33:27	5	errno
water	33:22	0:0	6	errno
water	33:28	0:0	4	;
call	34:8	34:77	4	av_log
arg	34:15	34:17	5	s1
water	34:15	0:0	6	s1
arg	34:19	34:31	5	AV_LOG_ERROR
water	34:19	0:0	6	AV_LOG_ERROR
arg	34:33	34:60	5	"ioctl(VIDIOC_G_FMT): %s\n"
water	34:33	0:0	6	"ioctl(VIDIOC_G_FMT): %s\n"
arg	34:62	34:77	5	av_err2str(res)
call	34:62	34:76	6	av_err2str
arg	34:73	34:76	7	res
water	34:73	0:0	8	res
water	34:78	0:0	4	;
return	35:8	35:18	4	res
water	35:15	0:0	5	res
water	36:4	0:0	4	}
water	37:4	0:0	2	fmt
op	37:7	0:0	2	.
water	37:8	0:0	2	fmt
op	37:11	0:0	2	.
water	37:12	0:0	2	pix
op	37:15	0:0	2	.
water	37:16	0:0	2	width
op	37:28	0:0	2	=
water	37:30	0:0	2	enc_ctx
op	37:37	0:0	2	->
water	37:39	0:0	2	width
water	37:44	0:0	2	;
water	38:4	0:0	2	fmt
op	38:7	0:0	2	.
water	38:8	0:0	2	fmt
op	38:11	0:0	2	.
water	38:12	0:0	2	pix
op	38:15	0:0	2	.
water	38:16	0:0	2	height
op	38:28	0:0	2	=
water	38:30	0:0	2	enc_ctx
op	38:37	0:0	2	->
water	38:39	0:0	2	height
water	38:45	0:0	2	;
water	39:4	0:0	2	fmt
op	39:7	0:0	2	.
water	39:8	0:0	2	fmt
op	39:11	0:0	2	.
water	39:12	0:0	2	pix
op	39:15	0:0	2	.
water	39:16	0:0	2	pixelformat
op	39:28	0:0	2	=
water	39:30	0:0	2	v4l2_pixfmt
water	39:41	0:0	2	;
water	40:4	0:0	2	fmt
op	40:7	0:0	2	.
water	40:8	0:0	2	fmt
op	40:11	0:0	2	.
water	40:12	0:0	2	pix
op	40:15	0:0	2	.
water	40:16	0:0	2	sizeimage
op	40:28	0:0	2	=
call	40:30	40:107	2	av_image_get_buffer_size
arg	40:55	40:71	3	enc_ctx->pix_fmt
water	40:55	0:0	4	enc_ctx
op	40:62	0:0	4	->
water	40:64	0:0	4	pix_fmt
arg	40:73	40:87	3	enc_ctx->width
water	40:73	0:0	4	enc_ctx
op	40:80	0:0	4	->
water	40:82	0:0	4	width
arg	40:89	40:104	3	enc_ctx->height
water	40:89	0:0	4	enc_ctx
op	40:96	0:0	4	->
water	40:98	0:0	4	height
arg	40:106	40:107	3	1
water	40:106	0:0	4	1
water	40:108	0:0	2	;
if	41:4	45:4	2	(ioctl (s -> fd ,VIDIOC_S_FMT ,& fmt ) < 0)
cond	41:8	41:43	3	ioctl (s -> fd ,VIDIOC_S_FMT ,& fmt ) < 0
call	41:8	41:39	4	ioctl
arg	41:14	41:19	5	s->fd
water	41:14	0:0	6	s
op	41:15	0:0	6	->
water	41:17	0:0	6	fd
arg	41:21	41:33	5	VIDIOC_S_FMT
water	41:21	0:0	6	VIDIOC_S_FMT
arg	41:35	41:39	5	&fmt
op	41:35	0:0	6	&
water	41:36	0:0	6	fmt
op	41:41	0:0	4	<
water	41:43	0:0	4	0
stmts	41:46	45:4	3	
water	41:46	0:0	4	{
water	42:8	0:0	4	res
op	42:12	0:0	4	=
call	42:14	42:27	4	AVERROR
arg	42:22	42:27	5	errno
water	42:22	0:0	6	errno
water	42:28	0:0	4	;
call	43:8	43:77	4	av_log
arg	43:15	43:17	5	s1
water	43:15	0:0	6	s1
arg	43:19	43:31	5	AV_LOG_ERROR
water	43:19	0:0	6	AV_LOG_ERROR
arg	43:33	43:60	5	"ioctl(VIDIOC_S_FMT): %s\n"
water	43:33	0:0	6	"ioctl(VIDIOC_S_FMT): %s\n"
arg	43:62	43:77	5	av_err2str(res)
call	43:62	43:76	6	av_err2str
arg	43:73	43:76	7	res
water	43:73	0:0	8	res
water	43:78	0:0	4	;
return	44:8	44:18	4	res
water	44:15	0:0	5	res
water	45:4	0:0	4	}
return	46:4	46:14	2	res
water	46:11	0:0	3	res
