func	1:0	139:0	0	static int	read_connect
params	1:23	0:0	1	
param	1:24	1:37	2	URLContext *	s
param	1:39	1:54	2	RTMPContext *	rt
stmnts	0:0	138:14	1	
decl	3:4	3:26	2	RTMPPacket	pkt
op	3:19	0:0	2	=
water	3:21	0:0	2	{
water	3:23	0:0	2	0
water	3:25	0:0	2	}
decl	4:4	4:14	2	uint8_t	*p
decl	5:4	5:21	2	const uint8_t	*cp
decl	6:4	6:11	2	int	ret
decl	7:4	7:20	2	char	command[64]
decl	8:4	8:17	2	int	stringlen
decl	9:4	9:17	2	double	seqnum
decl	10:4	10:23	2	uint8_t	tmpstr[256]
decl	11:4	11:22	2	GetByteContext	gbc
if	12:4	14:18	2	(( ret =ff_rtmp_packet_read (rt -> stream ,& pkt ,rt -> in_chunk_size ,& rt -> prev_pkt [ 0 ] ,& rt -> nb_prev_pkt [ 0 ] ) ) < 0)
cond	12:8	13:77	3	( ret =ff_rtmp_packet_read (rt -> stream ,& pkt ,rt -> in_chunk_size ,& rt -> prev_pkt [ 0 ] ,& rt -> nb_prev_pkt [ 0 ] ) ) < 0
water	12:8	0:0	4	(
water	12:9	0:0	4	ret
op	12:13	0:0	4	=
call	12:15	13:72	4	ff_rtmp_packet_read
arg	12:35	12:45	5	rt->stream
water	12:35	0:0	6	rt
op	12:37	0:0	6	->
water	12:39	0:0	6	stream
arg	12:47	12:51	5	&pkt
op	12:47	0:0	6	&
water	12:48	0:0	6	pkt
arg	12:53	12:70	5	rt->in_chunk_size
water	12:53	0:0	6	rt
op	12:55	0:0	6	->
water	12:57	0:0	6	in_chunk_size
arg	13:35	13:51	5	&rt->prev_pkt[0]
op	13:35	0:0	6	&
water	13:36	0:0	6	rt
op	13:38	0:0	6	->
water	13:40	0:0	6	prev_pkt
op	13:48	0:0	6	[
water	13:49	0:0	6	0
op	13:50	0:0	6	]
arg	13:53	13:72	5	&rt->nb_prev_pkt[0]
op	13:53	0:0	6	&
water	13:54	0:0	6	rt
op	13:56	0:0	6	->
water	13:58	0:0	6	nb_prev_pkt
op	13:69	0:0	6	[
water	13:70	0:0	6	0
op	13:71	0:0	6	]
water	13:73	0:0	4	)
op	13:75	0:0	4	<
water	13:77	0:0	4	0
stmts	14:8	14:18	3	
return	14:8	14:18	4	ret
water	14:15	0:0	5	ret
if	15:4	22:4	2	(pkt . type == RTMP_PT_CHUNK_SIZE)
cond	15:8	15:20	3	pkt . type == RTMP_PT_CHUNK_SIZE
water	15:8	0:0	4	pkt
op	15:11	0:0	4	.
water	15:12	0:0	4	type
op	15:17	0:0	4	==
water	15:20	0:0	4	RTMP_PT_CHUNK_SIZE
stmts	15:40	22:4	3	
water	15:40	0:0	4	{
if	16:8	17:22	4	(( ret =handle_chunk_size (s ,& pkt ) ) < 0)
cond	16:12	16:49	5	( ret =handle_chunk_size (s ,& pkt ) ) < 0
water	16:12	0:0	6	(
water	16:13	0:0	6	ret
op	16:17	0:0	6	=
call	16:19	16:44	6	handle_chunk_size
arg	16:37	16:38	7	s
water	16:37	0:0	8	s
arg	16:40	16:44	7	&pkt
op	16:40	0:0	8	&
water	16:41	0:0	8	pkt
water	16:45	0:0	6	)
op	16:47	0:0	6	<
water	16:49	0:0	6	0
stmts	17:12	17:22	5	
return	17:12	17:22	6	ret
water	17:19	0:0	7	ret
call	18:8	18:35	4	ff_rtmp_packet_destroy
arg	18:31	18:35	5	&pkt
op	18:31	0:0	6	&
water	18:32	0:0	6	pkt
water	18:36	0:0	4	;
if	19:8	21:22	4	(( ret =ff_rtmp_packet_read (rt -> stream ,& pkt ,rt -> in_chunk_size ,& rt -> prev_pkt [ 0 ] ,& rt -> nb_prev_pkt [ 0 ] ) ) < 0)
cond	19:12	20:81	5	( ret =ff_rtmp_packet_read (rt -> stream ,& pkt ,rt -> in_chunk_size ,& rt -> prev_pkt [ 0 ] ,& rt -> nb_prev_pkt [ 0 ] ) ) < 0
water	19:12	0:0	6	(
water	19:13	0:0	6	ret
op	19:17	0:0	6	=
call	19:19	20:76	6	ff_rtmp_packet_read
arg	19:39	19:49	7	rt->stream
water	19:39	0:0	8	rt
op	19:41	0:0	8	->
water	19:43	0:0	8	stream
arg	19:51	19:55	7	&pkt
op	19:51	0:0	8	&
water	19:52	0:0	8	pkt
arg	19:57	19:74	7	rt->in_chunk_size
water	19:57	0:0	8	rt
op	19:59	0:0	8	->
water	19:61	0:0	8	in_chunk_size
arg	20:39	20:55	7	&rt->prev_pkt[0]
op	20:39	0:0	8	&
water	20:40	0:0	8	rt
op	20:42	0:0	8	->
water	20:44	0:0	8	prev_pkt
op	20:52	0:0	8	[
water	20:53	0:0	8	0
op	20:54	0:0	8	]
arg	20:57	20:76	7	&rt->nb_prev_pkt[0]
op	20:57	0:0	8	&
water	20:58	0:0	8	rt
op	20:60	0:0	8	->
water	20:62	0:0	8	nb_prev_pkt
op	20:73	0:0	8	[
water	20:74	0:0	8	0
op	20:75	0:0	8	]
water	20:77	0:0	6	)
op	20:79	0:0	6	<
water	20:81	0:0	6	0
stmts	21:12	21:22	5	
return	21:12	21:22	6	ret
water	21:19	0:0	7	ret
water	22:4	0:0	4	}
water	23:4	0:0	2	cp
op	23:7	0:0	2	=
water	23:9	0:0	2	pkt
op	23:12	0:0	2	.
water	23:13	0:0	2	data
water	23:17	0:0	2	;
call	24:4	24:39	2	bytestream2_init
arg	24:21	24:25	3	&gbc
op	24:21	0:0	4	&
water	24:22	0:0	4	gbc
arg	24:27	24:29	3	cp
water	24:27	0:0	4	cp
arg	24:31	24:39	3	pkt.size
water	24:31	0:0	4	pkt
op	24:34	0:0	4	.
water	24:35	0:0	4	size
water	24:40	0:0	2	;
if	25:4	29:4	2	(ff_amf_read_string (& gbc ,command ,sizeof ( command ) ,& stringlen ))
cond	25:8	25:69	3	ff_amf_read_string (& gbc ,command ,sizeof ( command ) ,& stringlen )
call	25:8	25:69	4	ff_amf_read_string
arg	25:27	25:31	5	&gbc
op	25:27	0:0	6	&
water	25:28	0:0	6	gbc
arg	25:33	25:40	5	command
water	25:33	0:0	6	command
arg	25:42	25:57	5	sizeof(command)
op	25:42	0:0	6	sizeof
water	25:48	0:0	6	(
water	25:49	0:0	6	command
water	25:56	0:0	6	)
arg	25:59	25:69	5	&stringlen
op	25:59	0:0	6	&
water	25:60	0:0	6	stringlen
stmts	25:72	29:4	3	
water	25:72	0:0	4	{
call	26:8	26:65	4	av_log
arg	26:15	26:16	5	s
water	26:15	0:0	6	s
arg	26:18	26:30	5	AV_LOG_ERROR
water	26:18	0:0	6	AV_LOG_ERROR
arg	26:32	26:65	5	"Unable to read command string\n"
water	26:32	0:0	6	"Unable to read command string\n"
water	26:66	0:0	4	;
call	27:8	27:35	4	ff_rtmp_packet_destroy
arg	27:31	27:35	5	&pkt
op	27:31	0:0	6	&
water	27:32	0:0	6	pkt
water	27:36	0:0	4	;
return	28:8	28:34	4	AVERROR_INVALIDDATA
water	28:15	0:0	5	AVERROR_INVALIDDATA
water	29:4	0:0	4	}
if	30:4	34:4	2	(strcmp (command ,"connect" ))
cond	30:8	30:33	3	strcmp (command ,"connect" )
call	30:8	30:33	4	strcmp
arg	30:15	30:22	5	command
water	30:15	0:0	6	command
arg	30:24	30:33	5	"connect"
water	30:24	0:0	6	"connect"
stmts	30:36	34:4	3	
water	30:36	0:0	4	{
call	31:8	31:70	4	av_log
arg	31:15	31:16	5	s
water	31:15	0:0	6	s
arg	31:18	31:30	5	AV_LOG_ERROR
water	31:18	0:0	6	AV_LOG_ERROR
arg	31:32	31:61	5	"Expecting connect, got %s\n"
water	31:32	0:0	6	"Expecting connect, got %s\n"
arg	31:63	31:70	5	command
water	31:63	0:0	6	command
water	31:71	0:0	4	;
call	32:8	32:35	4	ff_rtmp_packet_destroy
arg	32:31	32:35	5	&pkt
op	32:31	0:0	6	&
water	32:32	0:0	6	pkt
water	32:36	0:0	4	;
return	33:8	33:34	4	AVERROR_INVALIDDATA
water	33:15	0:0	5	AVERROR_INVALIDDATA
water	34:4	0:0	4	}
water	35:4	0:0	2	ret
op	35:8	0:0	2	=
call	35:10	35:42	2	ff_amf_read_number
arg	35:29	35:33	3	&gbc
op	35:29	0:0	4	&
water	35:30	0:0	4	gbc
arg	35:35	35:42	3	&seqnum
op	35:35	0:0	4	&
water	35:36	0:0	4	seqnum
water	35:43	0:0	2	;
if	36:4	37:55	2	(ret)
cond	36:8	36:8	3	ret
water	36:8	0:0	4	ret
stmts	37:8	37:55	3	
call	37:8	37:54	4	av_log
arg	37:15	37:16	5	s
water	37:15	0:0	6	s
arg	37:18	37:32	5	AV_LOG_WARNING
water	37:18	0:0	6	AV_LOG_WARNING
arg	37:34	37:54	5	"SeqNum not found\n"
water	37:34	0:0	6	"SeqNum not found\n"
water	37:55	0:0	4	;
water	39:4	0:0	2	ret
op	39:8	0:0	2	=
call	39:10	41:62	2	ff_amf_get_field_value
arg	39:33	39:43	3	gbc.buffer
water	39:33	0:0	4	gbc
op	39:36	0:0	4	.
water	39:37	0:0	4	buffer
arg	40:33	40:78	3	gbc.buffer+bytestream2_get_bytes_left(&gbc)
water	40:33	0:0	4	gbc
op	40:36	0:0	4	.
water	40:37	0:0	4	buffer
op	40:44	0:0	4	+
call	40:46	40:77	4	bytestream2_get_bytes_left
arg	40:73	40:77	5	&gbc
op	40:73	0:0	6	&
water	40:74	0:0	6	gbc
arg	41:33	41:38	3	"app"
water	41:33	0:0	4	"app"
arg	41:40	41:46	3	tmpstr
water	41:40	0:0	4	tmpstr
arg	41:48	41:62	3	sizeof(tmpstr)
op	41:48	0:0	4	sizeof
water	41:54	0:0	4	(
water	41:55	0:0	4	tmpstr
water	41:61	0:0	4	)
water	41:63	0:0	2	;
if	42:4	43:69	2	(ret)
cond	42:8	42:8	3	ret
water	42:8	0:0	4	ret
stmts	43:8	43:69	3	
call	43:8	43:68	4	av_log
arg	43:15	43:16	5	s
water	43:15	0:0	6	s
arg	43:18	43:32	5	AV_LOG_WARNING
water	43:18	0:0	6	AV_LOG_WARNING
arg	43:34	43:68	5	"App field not found in connect\n"
water	43:34	0:0	6	"App field not found in connect\n"
water	43:69	0:0	4	;
if	44:4	46:31	2	(! ret &&strcmp (tmpstr ,rt -> app ))
cond	44:8	44:38	3	! ret &&strcmp (tmpstr ,rt -> app )
op	44:8	0:0	4	!
water	44:9	0:0	4	ret
op	44:13	0:0	4	&&
call	44:16	44:38	4	strcmp
arg	44:23	44:29	5	tmpstr
water	44:23	0:0	6	tmpstr
arg	44:31	44:38	5	rt->app
water	44:31	0:0	6	rt
op	44:33	0:0	6	->
water	44:35	0:0	6	app
stmts	45:8	46:31	3	
call	45:8	46:30	4	av_log
arg	45:15	45:16	5	s
water	45:15	0:0	6	s
arg	45:18	45:32	5	AV_LOG_WARNING
water	45:18	0:0	6	AV_LOG_WARNING
arg	45:34	45:73	5	"App field don't match up: %s <-> %s\n"
water	45:34	0:0	6	"App field don't match up: %s <-> %s\n"
arg	46:15	46:21	5	tmpstr
water	46:15	0:0	6	tmpstr
arg	46:23	46:30	5	rt->app
water	46:23	0:0	6	rt
op	46:25	0:0	6	->
water	46:27	0:0	6	app
water	46:31	0:0	4	;
call	47:4	47:31	2	ff_rtmp_packet_destroy
arg	47:27	47:31	3	&pkt
op	47:27	0:0	4	&
water	47:28	0:0	4	pkt
water	47:32	0:0	2	;
if	49:4	51:18	2	(( ret =ff_rtmp_packet_create (& pkt ,RTMP_NETWORK_CHANNEL ,RTMP_PT_SERVER_BW ,0 ,4 ) ) < 0)
cond	49:8	50:65	3	( ret =ff_rtmp_packet_create (& pkt ,RTMP_NETWORK_CHANNEL ,RTMP_PT_SERVER_BW ,0 ,4 ) ) < 0
water	49:8	0:0	4	(
water	49:9	0:0	4	ret
op	49:13	0:0	4	=
call	49:15	50:60	4	ff_rtmp_packet_create
arg	49:37	49:41	5	&pkt
op	49:37	0:0	6	&
water	49:38	0:0	6	pkt
arg	49:43	49:63	5	RTMP_NETWORK_CHANNEL
water	49:43	0:0	6	RTMP_NETWORK_CHANNEL
arg	50:37	50:54	5	RTMP_PT_SERVER_BW
water	50:37	0:0	6	RTMP_PT_SERVER_BW
arg	50:56	50:57	5	0
water	50:56	0:0	6	0
arg	50:59	50:60	5	4
water	50:59	0:0	6	4
water	50:61	0:0	4	)
op	50:63	0:0	4	<
water	50:65	0:0	4	0
stmts	51:8	51:18	3	
return	51:8	51:18	4	ret
water	51:15	0:0	5	ret
water	52:4	0:0	2	p
op	52:6	0:0	2	=
water	52:8	0:0	2	pkt
op	52:11	0:0	2	.
water	52:12	0:0	2	data
water	52:16	0:0	2	;
call	53:4	53:41	2	bytestream_put_be32
arg	53:24	53:26	3	&p
op	53:24	0:0	4	&
water	53:25	0:0	4	p
arg	53:28	53:41	3	rt->server_bw
water	53:28	0:0	4	rt
op	53:30	0:0	4	->
water	53:32	0:0	4	server_bw
water	53:42	0:0	2	;
water	54:4	0:0	2	pkt
op	54:7	0:0	2	.
water	54:8	0:0	2	size
op	54:13	0:0	2	=
water	54:15	0:0	2	p
op	54:17	0:0	2	-
water	54:19	0:0	2	pkt
op	54:22	0:0	2	.
water	54:23	0:0	2	data
water	54:27	0:0	2	;
water	55:4	0:0	2	ret
op	55:8	0:0	2	=
call	55:10	56:68	2	ff_rtmp_packet_write
arg	55:31	55:41	3	rt->stream
water	55:31	0:0	4	rt
op	55:33	0:0	4	->
water	55:35	0:0	4	stream
arg	55:43	55:47	3	&pkt
op	55:43	0:0	4	&
water	55:44	0:0	4	pkt
arg	55:49	55:67	3	rt->out_chunk_size
water	55:49	0:0	4	rt
op	55:51	0:0	4	->
water	55:53	0:0	4	out_chunk_size
arg	56:31	56:47	3	&rt->prev_pkt[1]
op	56:31	0:0	4	&
water	56:32	0:0	4	rt
op	56:34	0:0	4	->
water	56:36	0:0	4	prev_pkt
op	56:44	0:0	4	[
water	56:45	0:0	4	1
op	56:46	0:0	4	]
arg	56:49	56:68	3	&rt->nb_prev_pkt[1]
op	56:49	0:0	4	&
water	56:50	0:0	4	rt
op	56:52	0:0	4	->
water	56:54	0:0	4	nb_prev_pkt
op	56:65	0:0	4	[
water	56:66	0:0	4	1
op	56:67	0:0	4	]
water	56:69	0:0	2	;
call	57:4	57:31	2	ff_rtmp_packet_destroy
arg	57:27	57:31	3	&pkt
op	57:27	0:0	4	&
water	57:28	0:0	4	pkt
water	57:32	0:0	2	;
if	58:4	59:18	2	(ret < 0)
cond	58:8	58:14	3	ret < 0
water	58:8	0:0	4	ret
op	58:12	0:0	4	<
water	58:14	0:0	4	0
stmts	59:8	59:18	3	
return	59:8	59:18	4	ret
water	59:15	0:0	5	ret
if	61:4	63:18	2	(( ret =ff_rtmp_packet_create (& pkt ,RTMP_NETWORK_CHANNEL ,RTMP_PT_CLIENT_BW ,0 ,5 ) ) < 0)
cond	61:8	62:65	3	( ret =ff_rtmp_packet_create (& pkt ,RTMP_NETWORK_CHANNEL ,RTMP_PT_CLIENT_BW ,0 ,5 ) ) < 0
water	61:8	0:0	4	(
water	61:9	0:0	4	ret
op	61:13	0:0	4	=
call	61:15	62:60	4	ff_rtmp_packet_create
arg	61:37	61:41	5	&pkt
op	61:37	0:0	6	&
water	61:38	0:0	6	pkt
arg	61:43	61:63	5	RTMP_NETWORK_CHANNEL
water	61:43	0:0	6	RTMP_NETWORK_CHANNEL
arg	62:37	62:54	5	RTMP_PT_CLIENT_BW
water	62:37	0:0	6	RTMP_PT_CLIENT_BW
arg	62:56	62:57	5	0
water	62:56	0:0	6	0
arg	62:59	62:60	5	5
water	62:59	0:0	6	5
water	62:61	0:0	4	)
op	62:63	0:0	4	<
water	62:65	0:0	4	0
stmts	63:8	63:18	3	
return	63:8	63:18	4	ret
water	63:15	0:0	5	ret
water	64:4	0:0	2	p
op	64:6	0:0	2	=
water	64:8	0:0	2	pkt
op	64:11	0:0	2	.
water	64:12	0:0	2	data
water	64:16	0:0	2	;
call	65:4	65:41	2	bytestream_put_be32
arg	65:24	65:26	3	&p
op	65:24	0:0	4	&
water	65:25	0:0	4	p
arg	65:28	65:41	3	rt->server_bw
water	65:28	0:0	4	rt
op	65:30	0:0	4	->
water	65:32	0:0	4	server_bw
water	65:42	0:0	2	;
call	66:4	66:29	2	bytestream_put_byte
arg	66:24	66:26	3	&p
op	66:24	0:0	4	&
water	66:25	0:0	4	p
arg	66:28	66:29	3	2
water	66:28	0:0	4	2
water	66:30	0:0	2	;
water	67:4	0:0	2	pkt
op	67:7	0:0	2	.
water	67:8	0:0	2	size
op	67:13	0:0	2	=
water	67:15	0:0	2	p
op	67:17	0:0	2	-
water	67:19	0:0	2	pkt
op	67:22	0:0	2	.
water	67:23	0:0	2	data
water	67:27	0:0	2	;
water	68:4	0:0	2	ret
op	68:8	0:0	2	=
call	68:10	69:68	2	ff_rtmp_packet_write
arg	68:31	68:41	3	rt->stream
water	68:31	0:0	4	rt
op	68:33	0:0	4	->
water	68:35	0:0	4	stream
arg	68:43	68:47	3	&pkt
op	68:43	0:0	4	&
water	68:44	0:0	4	pkt
arg	68:49	68:67	3	rt->out_chunk_size
water	68:49	0:0	4	rt
op	68:51	0:0	4	->
water	68:53	0:0	4	out_chunk_size
arg	69:31	69:47	3	&rt->prev_pkt[1]
op	69:31	0:0	4	&
water	69:32	0:0	4	rt
op	69:34	0:0	4	->
water	69:36	0:0	4	prev_pkt
op	69:44	0:0	4	[
water	69:45	0:0	4	1
op	69:46	0:0	4	]
arg	69:49	69:68	3	&rt->nb_prev_pkt[1]
op	69:49	0:0	4	&
water	69:50	0:0	4	rt
op	69:52	0:0	4	->
water	69:54	0:0	4	nb_prev_pkt
op	69:65	0:0	4	[
water	69:66	0:0	4	1
op	69:67	0:0	4	]
water	69:69	0:0	2	;
call	70:4	70:31	2	ff_rtmp_packet_destroy
arg	70:27	70:31	3	&pkt
op	70:27	0:0	4	&
water	70:28	0:0	4	pkt
water	70:32	0:0	2	;
if	71:4	72:18	2	(ret < 0)
cond	71:8	71:14	3	ret < 0
water	71:8	0:0	4	ret
op	71:12	0:0	4	<
water	71:14	0:0	4	0
stmts	72:8	72:18	3	
return	72:8	72:18	4	ret
water	72:15	0:0	5	ret
if	74:4	76:18	2	(( ret =ff_rtmp_packet_create (& pkt ,RTMP_NETWORK_CHANNEL ,RTMP_PT_PING ,0 ,6 ) ) < 0)
cond	74:8	75:60	3	( ret =ff_rtmp_packet_create (& pkt ,RTMP_NETWORK_CHANNEL ,RTMP_PT_PING ,0 ,6 ) ) < 0
water	74:8	0:0	4	(
water	74:9	0:0	4	ret
op	74:13	0:0	4	=
call	74:15	75:55	4	ff_rtmp_packet_create
arg	74:37	74:41	5	&pkt
op	74:37	0:0	6	&
water	74:38	0:0	6	pkt
arg	74:43	74:63	5	RTMP_NETWORK_CHANNEL
water	74:43	0:0	6	RTMP_NETWORK_CHANNEL
arg	75:37	75:49	5	RTMP_PT_PING
water	75:37	0:0	6	RTMP_PT_PING
arg	75:51	75:52	5	0
water	75:51	0:0	6	0
arg	75:54	75:55	5	6
water	75:54	0:0	6	6
water	75:56	0:0	4	)
op	75:58	0:0	4	<
water	75:60	0:0	4	0
stmts	76:8	76:18	3	
return	76:8	76:18	4	ret
water	76:15	0:0	5	ret
water	77:4	0:0	2	p
op	77:6	0:0	2	=
water	77:8	0:0	2	pkt
op	77:11	0:0	2	.
water	77:12	0:0	2	data
water	77:16	0:0	2	;
call	78:4	78:29	2	bytestream_put_be16
arg	78:24	78:26	3	&p
op	78:24	0:0	4	&
water	78:25	0:0	4	p
arg	78:28	78:29	3	0
water	78:28	0:0	4	0
water	78:30	0:0	2	;
call	79:4	79:29	2	bytestream_put_be32
arg	79:24	79:26	3	&p
op	79:24	0:0	4	&
water	79:25	0:0	4	p
arg	79:28	79:29	3	0
water	79:28	0:0	4	0
water	79:30	0:0	2	;
water	80:4	0:0	2	ret
op	80:8	0:0	2	=
call	80:10	81:68	2	ff_rtmp_packet_write
arg	80:31	80:41	3	rt->stream
water	80:31	0:0	4	rt
op	80:33	0:0	4	->
water	80:35	0:0	4	stream
arg	80:43	80:47	3	&pkt
op	80:43	0:0	4	&
water	80:44	0:0	4	pkt
arg	80:49	80:67	3	rt->out_chunk_size
water	80:49	0:0	4	rt
op	80:51	0:0	4	->
water	80:53	0:0	4	out_chunk_size
arg	81:31	81:47	3	&rt->prev_pkt[1]
op	81:31	0:0	4	&
water	81:32	0:0	4	rt
op	81:34	0:0	4	->
water	81:36	0:0	4	prev_pkt
op	81:44	0:0	4	[
water	81:45	0:0	4	1
op	81:46	0:0	4	]
arg	81:49	81:68	3	&rt->nb_prev_pkt[1]
op	81:49	0:0	4	&
water	81:50	0:0	4	rt
op	81:52	0:0	4	->
water	81:54	0:0	4	nb_prev_pkt
op	81:65	0:0	4	[
water	81:66	0:0	4	1
op	81:67	0:0	4	]
water	81:69	0:0	2	;
call	82:4	82:31	2	ff_rtmp_packet_destroy
arg	82:27	82:31	3	&pkt
op	82:27	0:0	4	&
water	82:28	0:0	4	pkt
water	82:32	0:0	2	;
if	83:4	84:18	2	(ret < 0)
cond	83:8	83:14	3	ret < 0
water	83:8	0:0	4	ret
op	83:12	0:0	4	<
water	83:14	0:0	4	0
stmts	84:8	84:18	3	
return	84:8	84:18	4	ret
water	84:15	0:0	5	ret
if	86:4	88:18	2	(( ret =ff_rtmp_packet_create (& pkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_CHUNK_SIZE ,0 ,4 ) ) < 0)
cond	86:8	87:66	3	( ret =ff_rtmp_packet_create (& pkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_CHUNK_SIZE ,0 ,4 ) ) < 0
water	86:8	0:0	4	(
water	86:9	0:0	4	ret
op	86:13	0:0	4	=
call	86:15	87:61	4	ff_rtmp_packet_create
arg	86:37	86:41	5	&pkt
op	86:37	0:0	6	&
water	86:38	0:0	6	pkt
arg	86:43	86:62	5	RTMP_SYSTEM_CHANNEL
water	86:43	0:0	6	RTMP_SYSTEM_CHANNEL
arg	87:37	87:55	5	RTMP_PT_CHUNK_SIZE
water	87:37	0:0	6	RTMP_PT_CHUNK_SIZE
arg	87:57	87:58	5	0
water	87:57	0:0	6	0
arg	87:60	87:61	5	4
water	87:60	0:0	6	4
water	87:62	0:0	4	)
op	87:64	0:0	4	<
water	87:66	0:0	4	0
stmts	88:8	88:18	3	
return	88:8	88:18	4	ret
water	88:15	0:0	5	ret
water	89:4	0:0	2	p
op	89:6	0:0	2	=
water	89:8	0:0	2	pkt
op	89:11	0:0	2	.
water	89:12	0:0	2	data
water	89:16	0:0	2	;
call	90:4	90:46	2	bytestream_put_be32
arg	90:24	90:26	3	&p
op	90:24	0:0	4	&
water	90:25	0:0	4	p
arg	90:28	90:46	3	rt->out_chunk_size
water	90:28	0:0	4	rt
op	90:30	0:0	4	->
water	90:32	0:0	4	out_chunk_size
water	90:47	0:0	2	;
water	91:4	0:0	2	ret
op	91:8	0:0	2	=
call	91:10	92:68	2	ff_rtmp_packet_write
arg	91:31	91:41	3	rt->stream
water	91:31	0:0	4	rt
op	91:33	0:0	4	->
water	91:35	0:0	4	stream
arg	91:43	91:47	3	&pkt
op	91:43	0:0	4	&
water	91:44	0:0	4	pkt
arg	91:49	91:67	3	rt->out_chunk_size
water	91:49	0:0	4	rt
op	91:51	0:0	4	->
water	91:53	0:0	4	out_chunk_size
arg	92:31	92:47	3	&rt->prev_pkt[1]
op	92:31	0:0	4	&
water	92:32	0:0	4	rt
op	92:34	0:0	4	->
water	92:36	0:0	4	prev_pkt
op	92:44	0:0	4	[
water	92:45	0:0	4	1
op	92:46	0:0	4	]
arg	92:49	92:68	3	&rt->nb_prev_pkt[1]
op	92:49	0:0	4	&
water	92:50	0:0	4	rt
op	92:52	0:0	4	->
water	92:54	0:0	4	nb_prev_pkt
op	92:65	0:0	4	[
water	92:66	0:0	4	1
op	92:67	0:0	4	]
water	92:69	0:0	2	;
call	93:4	93:31	2	ff_rtmp_packet_destroy
arg	93:27	93:31	3	&pkt
op	93:27	0:0	4	&
water	93:28	0:0	4	pkt
water	93:32	0:0	2	;
if	94:4	95:18	2	(ret < 0)
cond	94:8	94:14	3	ret < 0
water	94:8	0:0	4	ret
op	94:12	0:0	4	<
water	94:14	0:0	4	0
stmts	95:8	95:18	3	
return	95:8	95:18	4	ret
water	95:15	0:0	5	ret
if	97:4	100:18	2	(( ret =ff_rtmp_packet_create (& pkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,RTMP_PKTDATA_DEFAULT_SIZE ) ) < 0)
cond	97:8	99:67	3	( ret =ff_rtmp_packet_create (& pkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,RTMP_PKTDATA_DEFAULT_SIZE ) ) < 0
water	97:8	0:0	4	(
water	97:9	0:0	4	ret
op	97:13	0:0	4	=
call	97:15	99:62	4	ff_rtmp_packet_create
arg	97:37	97:41	5	&pkt
op	97:37	0:0	6	&
water	97:38	0:0	6	pkt
arg	97:43	97:62	5	RTMP_SYSTEM_CHANNEL
water	97:43	0:0	6	RTMP_SYSTEM_CHANNEL
arg	98:37	98:51	5	RTMP_PT_INVOKE
water	98:37	0:0	6	RTMP_PT_INVOKE
arg	98:53	98:54	5	0
water	98:53	0:0	6	0
arg	99:37	99:62	5	RTMP_PKTDATA_DEFAULT_SIZE
water	99:37	0:0	6	RTMP_PKTDATA_DEFAULT_SIZE
water	99:63	0:0	4	)
op	99:65	0:0	4	<
water	99:67	0:0	4	0
stmts	100:8	100:18	3	
return	100:8	100:18	4	ret
water	100:15	0:0	5	ret
water	101:4	0:0	2	p
op	101:6	0:0	2	=
water	101:8	0:0	2	pkt
op	101:11	0:0	2	.
water	101:12	0:0	2	data
water	101:16	0:0	2	;
call	102:4	102:37	2	ff_amf_write_string
arg	102:24	102:26	3	&p
op	102:24	0:0	4	&
water	102:25	0:0	4	p
arg	102:28	102:37	3	"_result"
water	102:28	0:0	4	"_result"
water	102:38	0:0	2	;
call	103:4	103:34	2	ff_amf_write_number
arg	103:24	103:26	3	&p
op	103:24	0:0	4	&
water	103:25	0:0	4	p
arg	103:28	103:34	3	seqnum
water	103:28	0:0	4	seqnum
water	103:35	0:0	2	;
call	104:4	104:32	2	ff_amf_write_object_start
arg	104:30	104:32	3	&p
op	104:30	0:0	4	&
water	104:31	0:0	4	p
water	104:33	0:0	2	;
call	105:4	105:40	2	ff_amf_write_field_name
arg	105:28	105:30	3	&p
op	105:28	0:0	4	&
water	105:29	0:0	4	p
arg	105:32	105:40	3	"fmsVer"
water	105:32	0:0	4	"fmsVer"
water	105:41	0:0	2	;
call	106:4	106:43	2	ff_amf_write_string
arg	106:24	106:26	3	&p
op	106:24	0:0	4	&
water	106:25	0:0	4	p
arg	106:28	106:43	3	"FMS/3,0,1,123"
water	106:28	0:0	4	"FMS/3,0,1,123"
water	106:44	0:0	2	;
call	107:4	107:46	2	ff_amf_write_field_name
arg	107:28	107:30	3	&p
op	107:28	0:0	4	&
water	107:29	0:0	4	p
arg	107:32	107:46	3	"capabilities"
water	107:32	0:0	4	"capabilities"
water	107:47	0:0	2	;
call	108:4	108:30	2	ff_amf_write_number
arg	108:24	108:26	3	&p
op	108:24	0:0	4	&
water	108:25	0:0	4	p
arg	108:28	108:30	3	31
water	108:28	0:0	4	31
water	108:31	0:0	2	;
call	109:4	109:30	2	ff_amf_write_object_end
arg	109:28	109:30	3	&p
op	109:28	0:0	4	&
water	109:29	0:0	4	p
water	109:31	0:0	2	;
call	110:4	110:32	2	ff_amf_write_object_start
arg	110:30	110:32	3	&p
op	110:30	0:0	4	&
water	110:31	0:0	4	p
water	110:33	0:0	2	;
call	111:4	111:39	2	ff_amf_write_field_name
arg	111:28	111:30	3	&p
op	111:28	0:0	4	&
water	111:29	0:0	4	p
arg	111:32	111:39	3	"level"
water	111:32	0:0	4	"level"
water	111:40	0:0	2	;
call	112:4	112:36	2	ff_amf_write_string
arg	112:24	112:26	3	&p
op	112:24	0:0	4	&
water	112:25	0:0	4	p
arg	112:28	112:36	3	"status"
water	112:28	0:0	4	"status"
water	112:37	0:0	2	;
call	113:4	113:38	2	ff_amf_write_field_name
arg	113:28	113:30	3	&p
op	113:28	0:0	4	&
water	113:29	0:0	4	p
arg	113:32	113:38	3	"code"
water	113:32	0:0	4	"code"
water	113:39	0:0	2	;
call	114:4	114:59	2	ff_amf_write_string
arg	114:24	114:26	3	&p
op	114:24	0:0	4	&
water	114:25	0:0	4	p
arg	114:28	114:59	3	"NetConnection.Connect.Success"
water	114:28	0:0	4	"NetConnection.Connect.Success"
water	114:60	0:0	2	;
call	115:4	115:45	2	ff_amf_write_field_name
arg	115:28	115:30	3	&p
op	115:28	0:0	4	&
water	115:29	0:0	4	p
arg	115:32	115:45	3	"description"
water	115:32	0:0	4	"description"
water	115:46	0:0	2	;
call	116:4	116:51	2	ff_amf_write_string
arg	116:24	116:26	3	&p
op	116:24	0:0	4	&
water	116:25	0:0	4	p
arg	116:28	116:51	3	"Connection succeeded."
water	116:28	0:0	4	"Connection succeeded."
water	116:52	0:0	2	;
call	117:4	117:48	2	ff_amf_write_field_name
arg	117:28	117:30	3	&p
op	117:28	0:0	4	&
water	117:29	0:0	4	p
arg	117:32	117:48	3	"objectEncoding"
water	117:32	0:0	4	"objectEncoding"
water	117:49	0:0	2	;
call	118:4	118:29	2	ff_amf_write_number
arg	118:24	118:26	3	&p
op	118:24	0:0	4	&
water	118:25	0:0	4	p
arg	118:28	118:29	3	0
water	118:28	0:0	4	0
water	118:30	0:0	2	;
call	119:4	119:30	2	ff_amf_write_object_end
arg	119:28	119:30	3	&p
op	119:28	0:0	4	&
water	119:29	0:0	4	p
water	119:31	0:0	2	;
water	120:4	0:0	2	pkt
op	120:7	0:0	2	.
water	120:8	0:0	2	size
op	120:13	0:0	2	=
water	120:15	0:0	2	p
op	120:17	0:0	2	-
water	120:19	0:0	2	pkt
op	120:22	0:0	2	.
water	120:23	0:0	2	data
water	120:27	0:0	2	;
water	121:4	0:0	2	ret
op	121:8	0:0	2	=
call	121:10	122:68	2	ff_rtmp_packet_write
arg	121:31	121:41	3	rt->stream
water	121:31	0:0	4	rt
op	121:33	0:0	4	->
water	121:35	0:0	4	stream
arg	121:43	121:47	3	&pkt
op	121:43	0:0	4	&
water	121:44	0:0	4	pkt
arg	121:49	121:67	3	rt->out_chunk_size
water	121:49	0:0	4	rt
op	121:51	0:0	4	->
water	121:53	0:0	4	out_chunk_size
arg	122:31	122:47	3	&rt->prev_pkt[1]
op	122:31	0:0	4	&
water	122:32	0:0	4	rt
op	122:34	0:0	4	->
water	122:36	0:0	4	prev_pkt
op	122:44	0:0	4	[
water	122:45	0:0	4	1
op	122:46	0:0	4	]
arg	122:49	122:68	3	&rt->nb_prev_pkt[1]
op	122:49	0:0	4	&
water	122:50	0:0	4	rt
op	122:52	0:0	4	->
water	122:54	0:0	4	nb_prev_pkt
op	122:65	0:0	4	[
water	122:66	0:0	4	1
op	122:67	0:0	4	]
water	122:69	0:0	2	;
call	123:4	123:31	2	ff_rtmp_packet_destroy
arg	123:27	123:31	3	&pkt
op	123:27	0:0	4	&
water	123:28	0:0	4	pkt
water	123:32	0:0	2	;
if	124:4	125:18	2	(ret < 0)
cond	124:8	124:14	3	ret < 0
water	124:8	0:0	4	ret
op	124:12	0:0	4	<
water	124:14	0:0	4	0
stmts	125:8	125:18	3	
return	125:8	125:18	4	ret
water	125:15	0:0	5	ret
if	126:4	128:18	2	(( ret =ff_rtmp_packet_create (& pkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,30 ) ) < 0)
cond	126:8	127:63	3	( ret =ff_rtmp_packet_create (& pkt ,RTMP_SYSTEM_CHANNEL ,RTMP_PT_INVOKE ,0 ,30 ) ) < 0
water	126:8	0:0	4	(
water	126:9	0:0	4	ret
op	126:13	0:0	4	=
call	126:15	127:58	4	ff_rtmp_packet_create
arg	126:37	126:41	5	&pkt
op	126:37	0:0	6	&
water	126:38	0:0	6	pkt
arg	126:43	126:62	5	RTMP_SYSTEM_CHANNEL
water	126:43	0:0	6	RTMP_SYSTEM_CHANNEL
arg	127:37	127:51	5	RTMP_PT_INVOKE
water	127:37	0:0	6	RTMP_PT_INVOKE
arg	127:53	127:54	5	0
water	127:53	0:0	6	0
arg	127:56	127:58	5	30
water	127:56	0:0	6	30
water	127:59	0:0	4	)
op	127:61	0:0	4	<
water	127:63	0:0	4	0
stmts	128:8	128:18	3	
return	128:8	128:18	4	ret
water	128:15	0:0	5	ret
water	129:4	0:0	2	p
op	129:6	0:0	2	=
water	129:8	0:0	2	pkt
op	129:11	0:0	2	.
water	129:12	0:0	2	data
water	129:16	0:0	2	;
call	130:4	130:38	2	ff_amf_write_string
arg	130:24	130:26	3	&p
op	130:24	0:0	4	&
water	130:25	0:0	4	p
arg	130:28	130:38	3	"onBWDone"
water	130:28	0:0	4	"onBWDone"
water	130:39	0:0	2	;
call	131:4	131:29	2	ff_amf_write_number
arg	131:24	131:26	3	&p
op	131:24	0:0	4	&
water	131:25	0:0	4	p
arg	131:28	131:29	3	0
water	131:28	0:0	4	0
water	131:30	0:0	2	;
call	132:4	132:24	2	ff_amf_write_null
arg	132:22	132:24	3	&p
op	132:22	0:0	4	&
water	132:23	0:0	4	p
water	132:25	0:0	2	;
call	133:4	133:32	2	ff_amf_write_number
arg	133:24	133:26	3	&p
op	133:24	0:0	4	&
water	133:25	0:0	4	p
arg	133:28	133:32	3	8192
water	133:28	0:0	4	8192
water	133:33	0:0	2	;
water	134:4	0:0	2	pkt
op	134:7	0:0	2	.
water	134:8	0:0	2	size
op	134:13	0:0	2	=
water	134:15	0:0	2	p
op	134:17	0:0	2	-
water	134:19	0:0	2	pkt
op	134:22	0:0	2	.
water	134:23	0:0	2	data
water	134:27	0:0	2	;
water	135:4	0:0	2	ret
op	135:8	0:0	2	=
call	135:10	136:68	2	ff_rtmp_packet_write
arg	135:31	135:41	3	rt->stream
water	135:31	0:0	4	rt
op	135:33	0:0	4	->
water	135:35	0:0	4	stream
arg	135:43	135:47	3	&pkt
op	135:43	0:0	4	&
water	135:44	0:0	4	pkt
arg	135:49	135:67	3	rt->out_chunk_size
water	135:49	0:0	4	rt
op	135:51	0:0	4	->
water	135:53	0:0	4	out_chunk_size
arg	136:31	136:47	3	&rt->prev_pkt[1]
op	136:31	0:0	4	&
water	136:32	0:0	4	rt
op	136:34	0:0	4	->
water	136:36	0:0	4	prev_pkt
op	136:44	0:0	4	[
water	136:45	0:0	4	1
op	136:46	0:0	4	]
arg	136:49	136:68	3	&rt->nb_prev_pkt[1]
op	136:49	0:0	4	&
water	136:50	0:0	4	rt
op	136:52	0:0	4	->
water	136:54	0:0	4	nb_prev_pkt
op	136:65	0:0	4	[
water	136:66	0:0	4	1
op	136:67	0:0	4	]
water	136:69	0:0	2	;
call	137:4	137:31	2	ff_rtmp_packet_destroy
arg	137:27	137:31	3	&pkt
op	137:27	0:0	4	&
water	137:28	0:0	4	pkt
water	137:32	0:0	2	;
return	138:4	138:14	2	ret
water	138:11	0:0	3	ret
