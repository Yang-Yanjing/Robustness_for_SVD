func	1:0	20:0	0	static int	request_frame
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	19:14	1	
decl	3:4	3:42	2	FifoContext	*fifo
op	3:22	0:0	2	=
water	3:24	0:0	2	outlink
op	3:31	0:0	2	->
water	3:33	0:0	2	src
op	3:36	0:0	2	->
water	3:38	0:0	2	priv
decl	4:4	4:15	2	int	ret
op	4:12	0:0	2	=
water	4:14	0:0	2	0
if	5:4	12:4	2	(! fifo -> root . next)
cond	5:8	5:20	3	! fifo -> root . next
op	5:8	0:0	4	!
water	5:9	0:0	4	fifo
op	5:13	0:0	4	->
water	5:15	0:0	4	root
op	5:19	0:0	4	.
water	5:20	0:0	4	next
stmts	5:26	12:4	3	
water	5:26	0:0	4	{
if	6:8	10:8	4	(( ret =ff_request_frame (outlink -> src -> inputs [ 0 ] ) ) < 0)
cond	6:12	6:64	5	( ret =ff_request_frame (outlink -> src -> inputs [ 0 ] ) ) < 0
water	6:12	0:0	6	(
water	6:13	0:0	6	ret
op	6:17	0:0	6	=
call	6:19	6:59	6	ff_request_frame
arg	6:36	6:59	7	outlink->src->inputs[0]
water	6:36	0:0	8	outlink
op	6:43	0:0	8	->
water	6:45	0:0	8	src
op	6:48	0:0	8	->
water	6:50	0:0	8	inputs
op	6:56	0:0	8	[
water	6:57	0:0	8	0
op	6:58	0:0	8	]
water	6:60	0:0	6	)
op	6:62	0:0	6	<
water	6:64	0:0	6	0
stmts	6:67	10:8	5	
water	6:67	0:0	6	{
if	7:12	8:55	6	(ret == AVERROR_EOF && outlink -> request_samples)
cond	7:16	7:47	7	ret == AVERROR_EOF && outlink -> request_samples
water	7:16	0:0	8	ret
op	7:20	0:0	8	==
water	7:23	0:0	8	AVERROR_EOF
op	7:35	0:0	8	&&
water	7:38	0:0	8	outlink
op	7:45	0:0	8	->
water	7:47	0:0	8	request_samples
stmts	8:16	8:55	7	
return	8:16	8:55	8	return_audio_frame(outlink->src)
call	8:23	8:54	9	return_audio_frame
arg	8:42	8:54	10	outlink->src
water	8:42	0:0	11	outlink
op	8:49	0:0	11	->
water	8:51	0:0	11	src
return	9:12	9:22	6	ret
water	9:19	0:0	7	ret
water	10:8	0:0	6	}
call	11:8	11:34	4	av_assert0
arg	11:19	11:34	5	fifo->root.next
water	11:19	0:0	6	fifo
op	11:23	0:0	6	->
water	11:25	0:0	6	root
op	11:29	0:0	6	.
water	11:30	0:0	6	next
water	11:35	0:0	4	;
water	12:4	0:0	4	}
if	13:4	15:4	2	(outlink -> request_samples)
cond	13:8	13:17	3	outlink -> request_samples
water	13:8	0:0	4	outlink
op	13:15	0:0	4	->
water	13:17	0:0	4	request_samples
stmts	13:34	15:4	3	
water	13:34	0:0	4	{
return	14:8	14:47	4	return_audio_frame(outlink->src)
call	14:15	14:46	5	return_audio_frame
arg	14:34	14:46	6	outlink->src
water	14:34	0:0	7	outlink
op	14:41	0:0	7	->
water	14:43	0:0	7	src
water	15:4	0:0	4	}
else	15:6	18:4	2
stmts	15:11	18:4	3	
water	15:11	0:0	4	{
water	16:8	0:0	4	ret
op	16:12	0:0	4	=
call	16:14	16:61	4	ff_filter_frame
arg	16:30	16:37	5	outlink
water	16:30	0:0	6	outlink
arg	16:39	16:61	5	fifo->root.next->frame
water	16:39	0:0	6	fifo
op	16:43	0:0	6	->
water	16:45	0:0	6	root
op	16:49	0:0	6	.
water	16:50	0:0	6	next
op	16:54	0:0	6	->
water	16:56	0:0	6	frame
water	16:62	0:0	4	;
call	17:8	17:22	4	queue_pop
arg	17:18	17:22	5	fifo
water	17:18	0:0	6	fifo
water	17:23	0:0	4	;
water	18:4	0:0	4	}
return	19:4	19:14	2	ret
water	19:11	0:0	3	ret
