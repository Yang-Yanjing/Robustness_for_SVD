func	1:0	28:0	0	static void	update_clut
params	1:23	0:0	1	
param	1:24	1:43	2	LUT3DContext *	lut3d
param	1:45	1:65	2	const AVFrame *	frame
stmnts	0:0	27:4	1	
decl	3:4	3:40	2	const uint8_t	*data
op	3:24	0:0	2	=
water	3:26	0:0	2	frame
op	3:31	0:0	2	->
water	3:33	0:0	2	data
op	3:37	0:0	2	[
water	3:38	0:0	2	0
op	3:39	0:0	2	]
decl	4:4	4:44	2	const int	linesize
op	4:24	0:0	2	=
water	4:26	0:0	2	frame
op	4:31	0:0	2	->
water	4:33	0:0	2	linesize
op	4:41	0:0	2	[
water	4:42	0:0	2	0
op	4:43	0:0	2	]
decl	5:4	5:35	2	const int	w
op	5:16	0:0	2	=
water	5:18	0:0	2	lut3d
op	5:23	0:0	2	->
water	5:25	0:0	2	clut_width
decl	6:4	6:37	2	const int	step
op	6:19	0:0	2	=
water	6:21	0:0	2	lut3d
op	6:26	0:0	2	->
water	6:28	0:0	2	clut_step
decl	7:4	7:50	2	const uint8_t	*rgba_map
op	7:28	0:0	2	=
water	7:30	0:0	2	lut3d
op	7:35	0:0	2	->
water	7:37	0:0	2	clut_rgba_map
decl	8:4	8:36	2	const int	level
op	8:20	0:0	2	=
water	8:22	0:0	2	lut3d
op	8:27	0:0	2	->
water	8:29	0:0	2	lutsize
decl	10:4	10:29	2	int	i
water	10:9	0:0	2	,
decl	10:4	10:29	2	int	j
water	10:12	0:0	2	,
decl	10:4	10:29	2	int	k
water	10:15	0:0	2	,
decl	10:4	10:29	2	int	x
op	10:19	0:0	2	=
water	10:21	0:0	2	0
water	10:22	0:0	2	,
decl	10:4	10:29	2	int	y
op	10:26	0:0	2	=
water	10:28	0:0	2	0
for	12:4	27:4	2	(k = 0 ;k < level;k ++)
forinit	12:9	12:14	3	k = 0 ;
water	12:9	0:0	4	k
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:20	3	k < level
water	12:16	0:0	4	k
op	12:18	0:0	4	<
water	12:20	0:0	4	level
forexpr	12:27	12:28	3	k ++
water	12:27	0:0	4	k
op	12:28	0:0	4	++
stmts	12:32	27:4	3	
water	12:32	0:0	4	{
for	13:8	26:8	4	(j = 0 ;j < level;j ++)
forinit	13:13	13:18	5	j = 0 ;
water	13:13	0:0	6	j
op	13:15	0:0	6	=
water	13:17	0:0	6	0
water	13:18	0:0	6	;
cond	13:20	13:24	5	j < level
water	13:20	0:0	6	j
op	13:22	0:0	6	<
water	13:24	0:0	6	level
forexpr	13:31	13:32	5	j ++
water	13:31	0:0	6	j
op	13:32	0:0	6	++
stmts	13:36	26:8	5	
water	13:36	0:0	6	{
for	14:12	25:12	6	(i = 0 ;i < level;i ++)
forinit	14:17	14:22	7	i = 0 ;
water	14:17	0:0	8	i
op	14:19	0:0	8	=
water	14:21	0:0	8	0
water	14:22	0:0	8	;
cond	14:24	14:28	7	i < level
water	14:24	0:0	8	i
op	14:26	0:0	8	<
water	14:28	0:0	8	level
forexpr	14:35	14:36	7	i ++
water	14:35	0:0	8	i
op	14:36	0:0	8	++
stmts	14:40	25:12	7	
water	14:40	0:0	8	{
water	15:16	0:0	8	const
call	15:22	16:47	8	uint
arg	16:21	16:47	9	data+y*linesize+x*step
water	16:21	0:0	10	data
op	16:26	0:0	10	+
water	16:28	0:0	10	y
op	16:29	0:0	10	*
water	16:30	0:0	10	linesize
op	16:39	0:0	10	+
water	16:41	0:0	10	x
op	16:42	0:0	10	*
water	16:43	0:0	10	step
water	16:48	0:0	8	;
decl	17:16	17:57	8	struct rgbvec	*vec
op	17:35	0:0	8	=
op	17:37	0:0	8	&
water	17:38	0:0	8	lut3d
op	17:43	0:0	8	->
water	17:45	0:0	8	lut
op	17:48	0:0	8	[
water	17:49	0:0	8	i
op	17:50	0:0	8	]
op	17:51	0:0	8	[
water	17:52	0:0	8	j
op	17:53	0:0	8	]
op	17:54	0:0	8	[
water	17:55	0:0	8	k
op	17:56	0:0	8	]
water	18:16	0:0	8	vec
op	18:19	0:0	8	->
water	18:21	0:0	8	r
op	18:23	0:0	8	=
water	18:25	0:0	8	src
op	18:28	0:0	8	[
water	18:29	0:0	8	rgba_map
op	18:37	0:0	8	[
water	18:38	0:0	8	0
op	18:39	0:0	8	]
op	18:40	0:0	8	]
op	18:42	0:0	8	/
call	18:44	18:68	8	(float)
arg	18:52	18:68	9	(1<<(nbits))-1
water	18:52	0:0	10	(
water	18:53	0:0	10	1
op	18:54	0:0	10	<<
water	18:56	0:0	10	(
water	18:57	0:0	10	nbits
water	18:62	0:0	10	)
water	18:63	0:0	10	)
op	18:65	0:0	10	-
water	18:67	0:0	10	1
water	18:69	0:0	8	;
water	19:16	0:0	8	vec
op	19:19	0:0	8	->
water	19:21	0:0	8	g
op	19:23	0:0	8	=
water	19:25	0:0	8	src
op	19:28	0:0	8	[
water	19:29	0:0	8	rgba_map
op	19:37	0:0	8	[
water	19:38	0:0	8	1
op	19:39	0:0	8	]
op	19:40	0:0	8	]
op	19:42	0:0	8	/
call	19:44	19:68	8	(float)
arg	19:52	19:68	9	(1<<(nbits))-1
water	19:52	0:0	10	(
water	19:53	0:0	10	1
op	19:54	0:0	10	<<
water	19:56	0:0	10	(
water	19:57	0:0	10	nbits
water	19:62	0:0	10	)
water	19:63	0:0	10	)
op	19:65	0:0	10	-
water	19:67	0:0	10	1
water	19:69	0:0	8	;
water	20:16	0:0	8	vec
op	20:19	0:0	8	->
water	20:21	0:0	8	b
op	20:23	0:0	8	=
water	20:25	0:0	8	src
op	20:28	0:0	8	[
water	20:29	0:0	8	rgba_map
op	20:37	0:0	8	[
water	20:38	0:0	8	2
op	20:39	0:0	8	]
op	20:40	0:0	8	]
op	20:42	0:0	8	/
call	20:44	20:68	8	(float)
arg	20:52	20:68	9	(1<<(nbits))-1
water	20:52	0:0	10	(
water	20:53	0:0	10	1
op	20:54	0:0	10	<<
water	20:56	0:0	10	(
water	20:57	0:0	10	nbits
water	20:62	0:0	10	)
water	20:63	0:0	10	)
op	20:65	0:0	10	-
water	20:67	0:0	10	1
water	20:69	0:0	8	;
if	21:16	24:16	8	(++ x == w)
cond	21:20	21:27	9	++ x == w
op	21:20	0:0	10	++
water	21:22	0:0	10	x
op	21:24	0:0	10	==
water	21:27	0:0	10	w
stmts	21:30	24:16	9	
water	21:30	0:0	10	{
water	22:20	0:0	10	x
op	22:22	0:0	10	=
water	22:24	0:0	10	0
water	22:25	0:0	10	;
water	23:20	0:0	10	y
op	23:21	0:0	10	++
water	23:23	0:0	10	;
water	24:16	0:0	10	}
water	25:12	0:0	8	}
water	26:8	0:0	6	}
water	27:4	0:0	4	}
