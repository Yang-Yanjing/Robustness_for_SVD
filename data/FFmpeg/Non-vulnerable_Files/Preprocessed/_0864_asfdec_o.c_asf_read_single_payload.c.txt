func	1:0	48:0	0	static int	asf_read_single_payload
params	1:34	0:0	1	
param	1:35	1:53	2	AVFormatContext *	s
param	1:55	1:68	2	AVPacket *	pkt
param	2:31	2:49	2	ASFPacket *	asf_pkt
stmnts	0:0	47:12	1	
decl	4:4	4:34	2	ASFContext	*asf
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	priv_data
decl	5:4	5:27	2	AVIOContext	*pb
op	5:20	0:0	2	=
water	5:22	0:0	2	s
op	5:23	0:0	2	->
water	5:25	0:0	2	pb
decl	6:4	6:19	2	int64_t	offset
decl	7:4	7:17	2	uint64_t	size
decl	8:4	8:20	2	unsigned char	*p
decl	9:4	9:11	2	int	ret
if	10:4	16:4	2	(! asf_pkt -> data_size)
cond	10:8	10:18	3	! asf_pkt -> data_size
op	10:8	0:0	4	!
water	10:9	0:0	4	asf_pkt
op	10:16	0:0	4	->
water	10:18	0:0	4	data_size
stmts	10:29	16:4	3	
water	10:29	0:0	4	{
water	11:8	0:0	4	asf_pkt
op	11:15	0:0	4	->
water	11:17	0:0	4	data_size
op	11:27	0:0	4	=
water	11:29	0:0	4	asf_pkt
op	11:36	0:0	4	->
water	11:38	0:0	4	size_left
op	11:48	0:0	4	=
call	11:50	11:62	4	avio_rl32
arg	11:60	11:62	5	pb
water	11:60	0:0	6	pb
water	11:63	0:0	4	;
if	12:8	13:30	4	(asf_pkt -> data_size <= 0)
cond	12:12	12:34	5	asf_pkt -> data_size <= 0
water	12:12	0:0	6	asf_pkt
op	12:19	0:0	6	->
water	12:21	0:0	6	data_size
op	12:31	0:0	6	<=
water	12:34	0:0	6	0
stmts	13:12	13:30	5	
return	13:12	13:30	6	AVERROR_EOF
water	13:19	0:0	7	AVERROR_EOF
if	14:8	15:22	4	(( ret =av_new_packet (& asf_pkt -> avpkt ,asf_pkt -> data_size ) ) < 0)
cond	14:12	14:73	5	( ret =av_new_packet (& asf_pkt -> avpkt ,asf_pkt -> data_size ) ) < 0
water	14:12	0:0	6	(
water	14:13	0:0	6	ret
op	14:17	0:0	6	=
call	14:19	14:68	6	av_new_packet
arg	14:33	14:48	7	&asf_pkt->avpkt
op	14:33	0:0	8	&
water	14:34	0:0	8	asf_pkt
op	14:41	0:0	8	->
water	14:43	0:0	8	avpkt
arg	14:50	14:68	7	asf_pkt->data_size
water	14:50	0:0	8	asf_pkt
op	14:57	0:0	8	->
water	14:59	0:0	8	data_size
water	14:69	0:0	6	)
op	14:71	0:0	6	<
water	14:73	0:0	6	0
stmts	15:12	15:22	5	
return	15:12	15:22	6	ret
water	15:19	0:0	7	ret
water	16:4	0:0	4	}
else	16:6	17:24	2
stmts	17:8	17:24	3	
call	17:8	17:23	4	avio_skip
arg	17:18	17:20	5	pb
water	17:18	0:0	6	pb
arg	17:22	17:23	5	4
water	17:22	0:0	6	4
water	17:24	0:0	4	;
water	18:4	0:0	2	asf_pkt
op	18:11	0:0	2	->
water	18:13	0:0	2	dts
op	18:17	0:0	2	=
call	18:19	18:31	2	avio_rl32
arg	18:29	18:31	3	pb
water	18:29	0:0	4	pb
water	18:32	0:0	2	;
if	19:4	20:44	2	(asf -> rep_data_len >= 8)
cond	19:8	19:29	3	asf -> rep_data_len >= 8
water	19:8	0:0	4	asf
op	19:11	0:0	4	->
water	19:13	0:0	4	rep_data_len
op	19:26	0:0	4	>=
water	19:29	0:0	4	8
stmts	20:8	20:44	3	
call	20:8	20:43	4	avio_skip
arg	20:18	20:20	5	pb
water	20:18	0:0	6	pb
arg	20:22	20:43	5	asf->rep_data_len-8
water	20:22	0:0	6	asf
op	20:25	0:0	6	->
water	20:27	0:0	6	rep_data_len
op	20:40	0:0	6	-
water	20:42	0:0	6	8
water	20:44	0:0	4	;
water	21:4	0:0	2	offset
op	21:11	0:0	2	=
call	21:13	21:25	2	avio_tell
arg	21:23	21:25	3	pb
water	21:23	0:0	4	pb
water	21:26	0:0	2	;
if	23:4	24:85	2	(asf -> packet_size_internal)
cond	23:8	23:13	3	asf -> packet_size_internal
water	23:8	0:0	4	asf
op	23:11	0:0	4	->
water	23:13	0:0	4	packet_size_internal
stmts	24:8	24:85	3	
water	24:8	0:0	4	size
op	24:13	0:0	4	=
water	24:15	0:0	4	asf
op	24:18	0:0	4	->
water	24:20	0:0	4	packet_size_internal
op	24:41	0:0	4	-
water	24:43	0:0	4	offset
op	24:50	0:0	4	+
water	24:52	0:0	4	asf
op	24:55	0:0	4	->
water	24:57	0:0	4	packet_offset
op	24:71	0:0	4	-
water	24:73	0:0	4	asf
op	24:76	0:0	4	->
water	24:78	0:0	4	pad_len
water	24:85	0:0	4	;
else	25:4	26:76	2
stmts	26:8	26:76	3	
water	26:8	0:0	4	size
op	26:13	0:0	4	=
water	26:15	0:0	4	asf
op	26:18	0:0	4	->
water	26:20	0:0	4	packet_size
op	26:32	0:0	4	-
water	26:34	0:0	4	offset
op	26:41	0:0	4	+
water	26:43	0:0	4	asf
op	26:46	0:0	4	->
water	26:48	0:0	4	packet_offset
op	26:62	0:0	4	-
water	26:64	0:0	4	asf
op	26:67	0:0	4	->
water	26:69	0:0	4	pad_len
water	26:76	0:0	4	;
if	27:4	32:4	2	(size > asf -> packet_size)
cond	27:8	27:20	3	size > asf -> packet_size
water	27:8	0:0	4	size
op	27:13	0:0	4	>
water	27:15	0:0	4	asf
op	27:18	0:0	4	->
water	27:20	0:0	4	packet_size
stmts	27:33	32:4	3	
water	27:33	0:0	4	{
call	28:8	30:28	4	av_log
arg	28:15	28:16	5	s
water	28:15	0:0	6	s
arg	28:18	28:30	5	AV_LOG_ERROR
water	28:18	0:0	6	AV_LOG_ERROR
arg	29:15	29:69	5	"Error: invalid data packet size, offset %"PRId64".\n"
water	29:15	0:0	6	"Error: invalid data packet size, offset %"
water	29:58	0:0	6	PRId64
water	29:64	0:0	6	".\n"
arg	30:15	30:28	5	avio_tell(pb)
call	30:15	30:27	6	avio_tell
arg	30:25	30:27	7	pb
water	30:25	0:0	8	pb
water	30:29	0:0	4	;
return	31:8	31:34	4	AVERROR_INVALIDDATA
water	31:15	0:0	5	AVERROR_INVALIDDATA
water	32:4	0:0	4	}
water	33:4	0:0	2	p
op	33:6	0:0	2	=
water	33:8	0:0	2	asf_pkt
op	33:15	0:0	2	->
water	33:17	0:0	2	avpkt
op	33:22	0:0	2	.
water	33:23	0:0	2	data
op	33:28	0:0	2	+
water	33:30	0:0	2	asf_pkt
op	33:37	0:0	2	->
water	33:39	0:0	2	data_size
op	33:49	0:0	2	-
water	33:51	0:0	2	asf_pkt
op	33:58	0:0	2	->
water	33:60	0:0	2	size_left
water	33:69	0:0	2	;
if	34:4	35:34	2	(size > asf_pkt -> size_left)
cond	34:8	34:24	3	size > asf_pkt -> size_left
water	34:8	0:0	4	size
op	34:13	0:0	4	>
water	34:15	0:0	4	asf_pkt
op	34:22	0:0	4	->
water	34:24	0:0	4	size_left
stmts	35:8	35:34	3	
return	35:8	35:34	4	AVERROR_INVALIDDATA
water	35:15	0:0	5	AVERROR_INVALIDDATA
if	36:4	37:34	2	(asf_pkt -> size_left > size)
cond	36:8	36:29	3	asf_pkt -> size_left > size
water	36:8	0:0	4	asf_pkt
op	36:15	0:0	4	->
water	36:17	0:0	4	size_left
op	36:27	0:0	4	>
water	36:29	0:0	4	size
stmts	37:8	37:34	3	
water	37:8	0:0	4	asf_pkt
op	37:15	0:0	4	->
water	37:17	0:0	4	size_left
op	37:27	0:0	4	-=
water	37:30	0:0	4	size
water	37:34	0:0	4	;
else	38:4	39:30	2
stmts	39:8	39:30	3	
water	39:8	0:0	4	asf_pkt
op	39:15	0:0	4	->
water	39:17	0:0	4	size_left
op	39:27	0:0	4	=
water	39:29	0:0	4	0
water	39:30	0:0	4	;
if	40:4	41:18	2	(( ret =avio_read (pb ,p ,size ) ) < 0)
cond	40:8	40:41	3	( ret =avio_read (pb ,p ,size ) ) < 0
water	40:8	0:0	4	(
water	40:9	0:0	4	ret
op	40:13	0:0	4	=
call	40:15	40:36	4	avio_read
arg	40:25	40:27	5	pb
water	40:25	0:0	6	pb
arg	40:29	40:30	5	p
water	40:29	0:0	6	p
arg	40:32	40:36	5	size
water	40:32	0:0	6	size
water	40:37	0:0	4	)
op	40:39	0:0	4	<
water	40:41	0:0	4	0
stmts	41:8	41:18	3	
return	41:8	41:18	4	ret
water	41:15	0:0	5	ret
if	42:4	43:43	2	(s -> key && s -> keylen == 20)
cond	42:8	42:31	3	s -> key && s -> keylen == 20
water	42:8	0:0	4	s
op	42:9	0:0	4	->
water	42:11	0:0	4	key
op	42:15	0:0	4	&&
water	42:18	0:0	4	s
op	42:19	0:0	4	->
water	42:21	0:0	4	keylen
op	42:28	0:0	4	==
water	42:31	0:0	4	20
stmts	43:12	43:43	3	
call	43:12	43:42	4	ff_asfcrypt_dec
arg	43:28	43:34	5	s->key
water	43:28	0:0	6	s
op	43:29	0:0	6	->
water	43:31	0:0	6	key
arg	43:36	43:37	5	p
water	43:36	0:0	6	p
arg	43:39	43:42	5	ret
water	43:39	0:0	6	ret
water	43:43	0:0	4	;
if	44:4	45:67	2	(asf -> packet_size_internal)
cond	44:8	44:13	3	asf -> packet_size_internal
water	44:8	0:0	4	asf
op	44:11	0:0	4	->
water	44:13	0:0	4	packet_size_internal
stmts	45:8	45:67	3	
call	45:8	45:66	4	avio_skip
arg	45:18	45:20	5	pb
water	45:18	0:0	6	pb
arg	45:22	45:66	5	asf->packet_size-asf->packet_size_internal
water	45:22	0:0	6	asf
op	45:25	0:0	6	->
water	45:27	0:0	6	packet_size
op	45:39	0:0	6	-
water	45:41	0:0	6	asf
op	45:44	0:0	6	->
water	45:46	0:0	6	packet_size_internal
water	45:67	0:0	4	;
call	46:4	46:30	2	avio_skip
arg	46:14	46:16	3	pb
water	46:14	0:0	4	pb
arg	46:18	46:30	3	asf->pad_len
water	46:18	0:0	4	asf
op	46:21	0:0	4	->
water	46:23	0:0	4	pad_len
water	46:31	0:0	2	;
return	47:4	47:12	2	0
water	47:11	0:0	3	0
