func	1:0	76:0	0	static int64_t	webm_dash_manifest_compute_bandwidth
params	1:51	0:0	1	
param	1:52	1:70	2	AVFormatContext *	s
param	1:72	1:90	2	int64_t	cues_start
stmnts	0:0	75:29	1	
decl	3:4	3:49	2	MatroskaDemuxContext	*matroska
op	3:35	0:0	2	=
water	3:37	0:0	2	s
op	3:38	0:0	2	->
water	3:40	0:0	2	priv_data
decl	4:4	4:32	2	AVStream	*st
op	4:17	0:0	2	=
water	4:19	0:0	2	s
op	4:20	0:0	2	->
water	4:22	0:0	2	streams
op	4:29	0:0	2	[
water	4:30	0:0	2	0
op	4:31	0:0	2	]
decl	5:4	5:26	2	double	bandwidth
op	5:21	0:0	2	=
water	5:23	0:0	2	0
op	5:24	0:0	2	.
water	5:25	0:0	2	0
decl	6:4	6:9	2	int	i
for	7:4	74:4	2	(i = 0 ;i < st -> nb_index_entries;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:24	3	i < st -> nb_index_entries
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	st
op	7:22	0:0	4	->
water	7:24	0:0	4	nb_index_entries
forexpr	7:42	7:43	3	i ++
water	7:42	0:0	4	i
op	7:43	0:0	4	++
stmts	7:47	74:4	3	
water	7:47	0:0	4	{
decl	8:8	8:41	4	int64_t	prebuffer_ns
op	8:29	0:0	4	=
water	8:31	0:0	4	1000000000
decl	9:8	9:79	4	int64_t	time_ns
op	9:24	0:0	4	=
water	9:26	0:0	4	st
op	9:28	0:0	4	->
water	9:30	0:0	4	index_entries
op	9:43	0:0	4	[
water	9:44	0:0	4	i
op	9:45	0:0	4	]
op	9:46	0:0	4	.
water	9:47	0:0	4	timestamp
op	9:57	0:0	4	*
water	9:59	0:0	4	matroska
op	9:67	0:0	4	->
water	9:69	0:0	4	time_scale
decl	10:8	10:53	4	double	nano_seconds_per_second
op	10:39	0:0	4	=
water	10:41	0:0	4	1000000000
op	10:51	0:0	4	.
water	10:52	0:0	4	0
decl	11:8	11:55	4	int64_t	prebuffered_ns
op	11:31	0:0	4	=
water	11:33	0:0	4	time_ns
op	11:41	0:0	4	+
water	11:43	0:0	4	prebuffer_ns
decl	12:8	12:36	4	double	prebuffer_bytes
op	12:31	0:0	4	=
water	12:33	0:0	4	0
op	12:34	0:0	4	.
water	12:35	0:0	4	0
decl	13:8	13:48	4	int64_t	temp_prebuffer_ns
op	13:34	0:0	4	=
water	13:36	0:0	4	prebuffer_ns
decl	14:8	14:33	4	int64_t	pre_bytes
water	14:25	0:0	4	,
decl	14:8	14:33	4	int64_t	pre_ns
decl	15:8	15:50	4	double	pre_sec
water	15:22	0:0	4	,
decl	15:8	15:50	4	double	prebuffer
water	15:33	0:0	4	,
decl	15:8	15:50	4	double	bits_per_second
decl	16:8	16:63	4	CueDesc	desc_beg
op	16:25	0:0	4	=
call	16:27	16:62	5	get_cue_desc
arg	16:40	16:41	6	s
water	16:40	0:0	7	s
arg	16:43	16:50	6	time_ns
water	16:43	0:0	7	time_ns
arg	16:52	16:62	6	cues_start
water	16:52	0:0	7	cues_start
decl	18:8	18:35	4	CueDesc	desc_end
op	18:25	0:0	4	=
water	18:27	0:0	4	desc_beg
while	21:8	26:8	4	(desc_end . start_time_ns != - 1 && desc_end . end_time_ns < prebuffered_ns)
cond	21:15	21:70	5	desc_end . start_time_ns != - 1 && desc_end . end_time_ns < prebuffered_ns
water	21:15	0:0	6	desc_end
op	21:23	0:0	6	.
water	21:24	0:0	6	start_time_ns
op	21:38	0:0	6	!=
op	21:41	0:0	6	-
water	21:42	0:0	6	1
op	21:44	0:0	6	&&
water	21:47	0:0	6	desc_end
op	21:55	0:0	6	.
water	21:56	0:0	6	end_time_ns
op	21:68	0:0	6	<
water	21:70	0:0	6	prebuffered_ns
stmts	21:86	26:8	5	
water	21:86	0:0	6	{
water	23:12	0:0	6	prebuffer_bytes
op	23:28	0:0	6	+=
water	23:31	0:0	6	desc_end
op	23:39	0:0	6	.
water	23:40	0:0	6	end_offset
op	23:51	0:0	6	-
water	23:53	0:0	6	desc_end
op	23:61	0:0	6	.
water	23:62	0:0	6	start_offset
water	23:74	0:0	6	;
water	24:12	0:0	6	temp_prebuffer_ns
op	24:30	0:0	6	-=
water	24:33	0:0	6	desc_end
op	24:41	0:0	6	.
water	24:42	0:0	6	end_time_ns
op	24:54	0:0	6	-
water	24:56	0:0	6	desc_end
op	24:64	0:0	6	.
water	24:65	0:0	6	start_time_ns
water	24:78	0:0	6	;
water	25:12	0:0	6	desc_end
op	25:21	0:0	6	=
call	25:23	25:71	6	get_cue_desc
arg	25:36	25:37	7	s
water	25:36	0:0	8	s
arg	25:39	25:59	7	desc_end.end_time_ns
water	25:39	0:0	8	desc_end
op	25:47	0:0	8	.
water	25:48	0:0	8	end_time_ns
arg	25:61	25:71	7	cues_start
water	25:61	0:0	8	cues_start
water	25:72	0:0	6	;
water	26:8	0:0	6	}
if	27:8	32:8	4	(desc_end . start_time_ns == - 1)
cond	27:12	27:39	5	desc_end . start_time_ns == - 1
water	27:12	0:0	6	desc_end
op	27:20	0:0	6	.
water	27:21	0:0	6	start_time_ns
op	27:35	0:0	6	==
op	27:38	0:0	6	-
water	27:39	0:0	6	1
stmts	27:42	32:8	5	
water	27:42	0:0	6	{
if	29:12	30:23	6	(matroska -> duration * matroska -> time_scale >= prebuffered_ns)
cond	29:16	29:61	7	matroska -> duration * matroska -> time_scale >= prebuffered_ns
water	29:16	0:0	8	matroska
op	29:24	0:0	8	->
water	29:26	0:0	8	duration
op	29:35	0:0	8	*
water	29:37	0:0	8	matroska
op	29:45	0:0	8	->
water	29:47	0:0	8	time_scale
op	29:58	0:0	8	>=
water	29:61	0:0	8	prebuffered_ns
stmts	30:14	30:23	7	
return	30:14	30:23	8	-1
op	30:21	0:0	9	-
water	30:22	0:0	9	1
water	31:12	0:0	6	bits_per_second
op	31:28	0:0	6	=
water	31:30	0:0	6	0
op	31:31	0:0	6	.
water	31:32	0:0	6	0
water	31:33	0:0	6	;
water	32:8	0:0	6	}
else	32:10	72:8	4
stmts	32:15	72:8	5	
water	32:15	0:0	6	{
water	35:12	0:0	6	pre_bytes
op	35:22	0:0	6	=
water	35:24	0:0	6	desc_end
op	35:32	0:0	6	.
water	35:33	0:0	6	end_offset
op	35:44	0:0	6	-
water	35:46	0:0	6	desc_end
op	35:54	0:0	6	.
water	35:55	0:0	6	start_offset
water	35:67	0:0	6	;
water	36:12	0:0	6	pre_ns
op	36:19	0:0	6	=
water	36:21	0:0	6	desc_end
op	36:29	0:0	6	.
water	36:30	0:0	6	end_time_ns
op	36:42	0:0	6	-
water	36:44	0:0	6	desc_end
op	36:52	0:0	6	.
water	36:53	0:0	6	start_time_ns
water	36:66	0:0	6	;
water	37:12	0:0	6	pre_sec
op	37:20	0:0	6	=
water	37:22	0:0	6	pre_ns
op	37:29	0:0	6	/
water	37:31	0:0	6	nano_seconds_per_second
water	37:54	0:0	6	;
water	38:12	0:0	6	prebuffer_bytes
op	38:28	0:0	6	+=
water	39:16	0:0	6	pre_bytes
op	39:26	0:0	6	*
water	39:28	0:0	6	(
water	39:29	0:0	6	(
water	39:30	0:0	6	temp_prebuffer_ns
op	39:48	0:0	6	/
water	39:50	0:0	6	nano_seconds_per_second
water	39:73	0:0	6	)
op	39:75	0:0	6	/
water	39:77	0:0	6	pre_sec
water	39:84	0:0	6	)
water	39:85	0:0	6	;
water	40:12	0:0	6	prebuffer
op	40:22	0:0	6	=
water	40:24	0:0	6	prebuffer_ns
op	40:37	0:0	6	/
water	40:39	0:0	6	nano_seconds_per_second
water	40:62	0:0	6	;
water	42:12	0:0	6	bits_per_second
op	42:28	0:0	6	=
water	42:30	0:0	6	0
op	42:31	0:0	6	.
water	42:32	0:0	6	0
water	42:33	0:0	6	;
do	43:12	71:12	6	(desc_end . start_time_ns != - 1)
cond	71:21	71:48	7	desc_end . start_time_ns != - 1
water	71:21	0:0	8	desc_end
op	71:29	0:0	8	.
water	71:30	0:0	8	start_time_ns
op	71:44	0:0	8	!=
op	71:47	0:0	8	-
water	71:48	0:0	8	1
stmts	43:15	71:12	7	
water	43:15	0:0	8	{
decl	44:16	44:80	8	int64_t	desc_bytes
op	44:35	0:0	8	=
water	44:37	0:0	8	desc_end
op	44:45	0:0	8	.
water	44:46	0:0	8	end_offset
op	44:57	0:0	8	-
water	44:59	0:0	8	desc_beg
op	44:67	0:0	8	.
water	44:68	0:0	8	start_offset
decl	45:16	45:79	8	int64_t	desc_ns
op	45:32	0:0	8	=
water	45:34	0:0	8	desc_end
op	45:42	0:0	8	.
water	45:43	0:0	8	end_time_ns
op	45:55	0:0	8	-
water	45:57	0:0	8	desc_beg
op	45:65	0:0	8	.
water	45:66	0:0	8	start_time_ns
decl	46:16	46:67	8	double	desc_sec
op	46:32	0:0	8	=
water	46:34	0:0	8	desc_ns
op	46:42	0:0	8	/
water	46:44	0:0	8	nano_seconds_per_second
decl	47:16	47:73	8	double	calc_bits_per_second
op	47:44	0:0	8	=
water	47:46	0:0	8	(
water	47:47	0:0	8	desc_bytes
op	47:58	0:0	8	*
water	47:60	0:0	8	8
water	47:61	0:0	8	)
op	47:63	0:0	8	/
water	47:65	0:0	8	desc_sec
decl	49:16	49:76	8	double	percent
op	49:31	0:0	8	=
water	49:33	0:0	8	(
water	49:34	0:0	8	desc_bytes
op	49:45	0:0	8	-
water	49:47	0:0	8	prebuffer_bytes
water	49:62	0:0	8	)
op	49:64	0:0	8	/
water	49:66	0:0	8	desc_bytes
decl	50:16	50:75	8	double	mod_bits_per_second
op	50:43	0:0	8	=
water	50:45	0:0	8	calc_bits_per_second
op	50:66	0:0	8	*
water	50:68	0:0	8	percent
if	51:16	69:16	8	(prebuffer < desc_sec)
cond	51:20	51:32	9	prebuffer < desc_sec
water	51:20	0:0	10	prebuffer
op	51:30	0:0	10	<
water	51:32	0:0	10	desc_sec
stmts	51:42	69:16	9	
water	51:42	0:0	10	{
decl	52:20	53:101	10	double	search_sec
op	52:38	0:0	10	=
call	53:24	53:74	11	(double)
arg	53:33	53:74	12	matroska->duration*matroska->time_scale
water	53:33	0:0	13	matroska
op	53:41	0:0	13	->
water	53:43	0:0	13	duration
op	53:52	0:0	13	*
water	53:54	0:0	13	matroska
op	53:62	0:0	13	->
water	53:64	0:0	13	time_scale
op	53:76	0:0	10	/
water	53:78	0:0	10	nano_seconds_per_second
decl	56:20	56:68	10	int64_t	bps
op	56:32	0:0	10	=
call	56:34	56:63	11	(int64_t)
arg	56:44	56:63	12	mod_bits_per_second
water	56:44	0:0	13	mod_bits_per_second
op	56:65	0:0	10	+
water	56:67	0:0	10	1
decl	57:20	57:49	10	const double	min_buffer
op	57:44	0:0	10	=
water	57:46	0:0	10	0
op	57:47	0:0	10	.
water	57:48	0:0	10	0
decl	58:20	58:45	10	double	buffer
op	58:34	0:0	10	=
water	58:36	0:0	10	prebuffer
decl	59:20	59:48	10	double	sec_to_download
op	59:43	0:0	10	=
water	59:45	0:0	10	0
op	59:46	0:0	10	.
water	59:47	0:0	10	0
decl	60:20	62:77	10	int	rv
op	60:27	0:0	10	=
call	60:29	62:76	11	buffer_size_after_time_downloaded
arg	60:63	60:77	12	prebuffered_ns
water	60:63	0:0	13	prebuffered_ns
arg	60:79	60:89	12	search_sec
water	60:79	0:0	13	search_sec
arg	60:91	60:94	12	bps
water	60:91	0:0	13	bps
arg	61:63	61:73	12	min_buffer
water	61:63	0:0	13	min_buffer
arg	61:75	61:82	12	&buffer
op	61:75	0:0	13	&
water	61:76	0:0	13	buffer
arg	61:84	61:100	12	&sec_to_download
op	61:84	0:0	13	&
water	61:85	0:0	13	sec_to_download
arg	62:63	62:64	12	s
water	62:63	0:0	13	s
arg	62:66	62:76	12	cues_start
water	62:66	0:0	13	cues_start
if	63:20	65:20	10	(rv < 0)
cond	63:24	63:29	11	rv < 0
water	63:24	0:0	12	rv
op	63:27	0:0	12	<
water	63:29	0:0	12	0
stmts	63:32	65:20	11	
water	63:32	0:0	12	{
return	64:24	64:33	12	-1
op	64:31	0:0	13	-
water	64:32	0:0	13	1
water	65:20	0:0	12	}
else	65:22	68:20	10
stmts	65:27	68:20	11	
if	65:27	68:20	12	(rv == 0)
cond	65:31	65:37	13	rv == 0
water	65:31	0:0	14	rv
op	65:34	0:0	14	==
water	65:37	0:0	14	0
stmts	65:40	68:20	13	
water	65:40	0:0	14	{
water	66:24	0:0	14	bits_per_second
op	66:40	0:0	14	=
call	66:42	66:54	14	(double)
arg	66:51	66:54	15	bps
water	66:51	0:0	16	bps
water	66:55	0:0	14	;
break	67:24	67:29	14	
water	68:20	0:0	14	}
water	69:16	0:0	10	}
water	70:16	0:0	8	desc_end
op	70:25	0:0	8	=
call	70:27	70:75	8	get_cue_desc
arg	70:40	70:41	9	s
water	70:40	0:0	10	s
arg	70:43	70:63	9	desc_end.end_time_ns
water	70:43	0:0	10	desc_end
op	70:51	0:0	10	.
water	70:52	0:0	10	end_time_ns
arg	70:65	70:75	9	cues_start
water	70:65	0:0	10	cues_start
water	70:76	0:0	8	;
water	71:12	0:0	8	}
water	71:50	0:0	6	;
water	72:8	0:0	6	}
if	73:8	73:68	4	(bandwidth < bits_per_second)
cond	73:12	73:24	5	bandwidth < bits_per_second
water	73:12	0:0	6	bandwidth
op	73:22	0:0	6	<
water	73:24	0:0	6	bits_per_second
stmts	73:41	73:68	5	
water	73:41	0:0	6	bandwidth
op	73:51	0:0	6	=
water	73:53	0:0	6	bits_per_second
water	73:68	0:0	6	;
water	74:4	0:0	4	}
return	75:4	75:29	2	(int64_t)bandwidth
water	75:11	0:0	3	(
water	75:12	0:0	3	int64_t
water	75:19	0:0	3	)
water	75:20	0:0	3	bandwidth
