func	1:0	99:0	0	static int	matroska_parse_laces
params	1:31	0:0	1	
param	1:32	1:62	2	MatroskaDemuxContext *	matroska
param	1:64	1:77	2	uint8_t * *	buf
param	2:32	2:45	2	int *	buf_size
param	2:47	2:55	2	int	type
param	3:32	3:51	2	uint32_t * *	lace_buf
param	3:53	3:63	2	int *	laces
stmnts	0:0	98:14	1	
decl	5:4	5:36	2	int	res
op	5:12	0:0	2	=
water	5:14	0:0	2	0
water	5:15	0:0	2	,
decl	5:4	5:36	2	int	n
water	5:18	0:0	2	,
decl	5:4	5:36	2	int	size
op	5:25	0:0	2	=
op	5:27	0:0	2	*
water	5:28	0:0	2	buf_size
decl	6:4	6:24	2	uint8_t	*data
op	6:18	0:0	2	=
op	6:20	0:0	2	*
water	6:21	0:0	2	buf
decl	7:4	7:23	2	uint32_t	*lace_size
if	8:4	15:4	2	(! type)
cond	8:8	8:9	3	! type
op	8:8	0:0	4	!
water	8:9	0:0	4	type
stmts	8:15	15:4	3	
water	8:15	0:0	4	{
op	9:8	0:0	4	*
water	9:9	0:0	4	laces
op	9:18	0:0	4	=
water	9:20	0:0	4	1
water	9:21	0:0	4	;
op	10:8	0:0	4	*
water	10:9	0:0	4	lace_buf
op	10:18	0:0	4	=
call	10:20	10:42	4	av_mallocz
arg	10:31	10:42	5	sizeof(int)
op	10:31	0:0	6	sizeof
water	10:37	0:0	6	(
water	10:38	0:0	6	int
water	10:41	0:0	6	)
water	10:43	0:0	4	;
if	11:8	12:34	4	(! * lace_buf)
cond	11:12	11:14	5	! * lace_buf
op	11:12	0:0	6	!
op	11:13	0:0	6	*
water	11:14	0:0	6	lace_buf
stmts	12:12	12:34	5	
return	12:12	12:34	6	AVERROR(ENOMEM)
call	12:19	12:33	7	AVERROR
arg	12:27	12:33	8	ENOMEM
water	12:27	0:0	9	ENOMEM
op	13:8	0:0	4	*
water	13:9	0:0	4	lace_buf
op	13:17	0:0	4	[
water	13:18	0:0	4	0
op	13:19	0:0	4	]
op	13:21	0:0	4	=
water	13:23	0:0	4	size
water	13:27	0:0	4	;
return	14:8	14:16	4	0
water	14:15	0:0	5	0
water	15:4	0:0	4	}
call	16:4	16:23	2	av_assert0
arg	16:15	16:23	3	size>0
water	16:15	0:0	4	size
op	16:20	0:0	4	>
water	16:22	0:0	4	0
water	16:24	0:0	2	;
op	17:4	0:0	2	*
water	17:5	0:0	2	laces
op	17:14	0:0	2	=
op	17:16	0:0	2	*
water	17:17	0:0	2	data
op	17:22	0:0	2	+
water	17:24	0:0	2	1
water	17:25	0:0	2	;
water	18:4	0:0	2	data
op	18:13	0:0	2	+=
water	18:16	0:0	2	1
water	18:17	0:0	2	;
water	19:4	0:0	2	size
op	19:13	0:0	2	-=
water	19:16	0:0	2	1
water	19:17	0:0	2	;
water	20:4	0:0	2	lace_size
op	20:14	0:0	2	=
call	20:16	20:47	2	av_mallocz
arg	20:27	20:47	3	*laces*sizeof(int)
op	20:27	0:0	4	*
water	20:28	0:0	4	laces
op	20:34	0:0	4	*
op	20:36	0:0	4	sizeof
water	20:42	0:0	4	(
water	20:43	0:0	4	int
water	20:46	0:0	4	)
water	20:48	0:0	2	;
if	21:4	22:30	2	(! lace_size)
cond	21:8	21:9	3	! lace_size
op	21:8	0:0	4	!
water	21:9	0:0	4	lace_size
stmts	22:8	22:30	3	
return	22:8	22:30	4	AVERROR(ENOMEM)
call	22:15	22:29	5	AVERROR
arg	22:23	22:29	6	ENOMEM
water	22:23	0:0	7	ENOMEM
switch	23:4	94:4	2	(type)
cond	23:12	23:12	3	type
water	23:12	0:0	4	type
stmts	23:18	94:4	3	
water	23:18	0:0	4	{
label	24:4	24:12	4	case 0 x1 :
water	25:4	0:0	4	{
decl	26:8	26:20	4	uint8_t	temp
decl	27:8	27:26	4	uint32_t	total
op	27:23	0:0	4	=
water	27:25	0:0	4	0
for	28:8	42:8	4	(n = 0 ;res == 0 && n < * laces - 1;n ++)
forinit	28:13	28:18	5	n = 0 ;
water	28:13	0:0	6	n
op	28:15	0:0	6	=
water	28:17	0:0	6	0
water	28:18	0:0	6	;
cond	28:20	28:45	5	res == 0 && n < * laces - 1
water	28:20	0:0	6	res
op	28:24	0:0	6	==
water	28:27	0:0	6	0
op	28:29	0:0	6	&&
water	28:32	0:0	6	n
op	28:34	0:0	6	<
op	28:36	0:0	6	*
water	28:37	0:0	6	laces
op	28:43	0:0	6	-
water	28:45	0:0	6	1
forexpr	28:48	28:49	5	n ++
water	28:48	0:0	6	n
op	28:49	0:0	6	++
stmts	28:53	42:8	5	
water	28:53	0:0	6	{
while	29:12	41:12	6	(1)
cond	29:19	29:19	7	1
water	29:19	0:0	8	1
stmts	29:22	41:12	7	
water	29:22	0:0	8	{
if	30:16	33:16	8	(size <= total)
cond	30:20	30:28	9	size <= total
water	30:20	0:0	10	size
op	30:25	0:0	10	<=
water	30:28	0:0	10	total
stmts	30:35	33:16	9	
water	30:35	0:0	10	{
water	31:20	0:0	10	res
op	31:24	0:0	10	=
water	31:26	0:0	10	AVERROR_INVALIDDATA
water	31:45	0:0	10	;
break	32:20	32:25	10	
water	33:16	0:0	10	}
water	34:16	0:0	8	temp
op	34:30	0:0	8	=
op	34:32	0:0	8	*
water	34:33	0:0	8	data
water	34:37	0:0	8	;
water	35:16	0:0	8	total
op	35:29	0:0	8	+=
water	35:32	0:0	8	temp
water	35:36	0:0	8	;
water	36:16	0:0	8	lace_size
op	36:25	0:0	8	[
water	36:26	0:0	8	n
op	36:27	0:0	8	]
op	36:29	0:0	8	+=
water	36:32	0:0	8	temp
water	36:36	0:0	8	;
water	37:16	0:0	8	data
op	37:29	0:0	8	+=
water	37:32	0:0	8	1
water	37:33	0:0	8	;
water	38:16	0:0	8	size
op	38:29	0:0	8	-=
water	38:32	0:0	8	1
water	38:33	0:0	8	;
if	39:16	40:25	8	(temp != 0 xff)
cond	39:20	39:29	9	temp != 0 xff
water	39:20	0:0	10	temp
op	39:25	0:0	10	!=
water	39:28	0:0	10	0
water	39:29	0:0	10	xff
stmts	40:20	40:25	9	
break	40:20	40:25	10	
water	41:12	0:0	8	}
water	42:8	0:0	6	}
if	43:8	46:8	4	(size <= total)
cond	43:12	43:20	5	size <= total
water	43:12	0:0	6	size
op	43:17	0:0	6	<=
water	43:20	0:0	6	total
stmts	43:27	46:8	5	
water	43:27	0:0	6	{
water	44:12	0:0	6	res
op	44:16	0:0	6	=
water	44:18	0:0	6	AVERROR_INVALIDDATA
water	44:37	0:0	6	;
break	45:12	45:17	6	
water	46:8	0:0	6	}
water	47:8	0:0	4	lace_size
op	47:17	0:0	4	[
water	47:18	0:0	4	n
op	47:19	0:0	4	]
op	47:21	0:0	4	=
water	47:23	0:0	4	size
op	47:28	0:0	4	-
water	47:30	0:0	4	total
water	47:35	0:0	4	;
break	48:8	48:13	4	
water	49:4	0:0	4	}
label	50:4	50:12	4	case 0 x2 :
if	51:8	54:8	4	(size % ( * laces ))
cond	51:12	51:26	5	size % ( * laces )
water	51:12	0:0	6	size
op	51:17	0:0	6	%
water	51:19	0:0	6	(
op	51:20	0:0	6	*
water	51:21	0:0	6	laces
water	51:26	0:0	6	)
stmts	51:29	54:8	5	
water	51:29	0:0	6	{
water	52:12	0:0	6	res
op	52:16	0:0	6	=
water	52:18	0:0	6	AVERROR_INVALIDDATA
water	52:37	0:0	6	;
break	53:12	53:17	6	
water	54:8	0:0	6	}
for	55:8	56:40	4	(n = 0 ;n < * laces;n ++)
forinit	55:13	55:18	5	n = 0 ;
water	55:13	0:0	6	n
op	55:15	0:0	6	=
water	55:17	0:0	6	0
water	55:18	0:0	6	;
cond	55:20	55:25	5	n < * laces
water	55:20	0:0	6	n
op	55:22	0:0	6	<
op	55:24	0:0	6	*
water	55:25	0:0	6	laces
forexpr	55:32	55:33	5	n ++
water	55:32	0:0	6	n
op	55:33	0:0	6	++
stmts	56:12	56:40	5	
water	56:12	0:0	6	lace_size
op	56:21	0:0	6	[
water	56:22	0:0	6	n
op	56:23	0:0	6	]
op	56:25	0:0	6	=
water	56:27	0:0	6	size
op	56:32	0:0	6	/
op	56:34	0:0	6	*
water	56:35	0:0	6	laces
water	56:40	0:0	6	;
break	57:8	57:13	4	
label	58:4	58:12	4	case 0 x3 :
water	59:4	0:0	4	{
decl	60:8	60:20	4	uint64_t	num
decl	61:8	61:22	4	uint64_t	total
water	62:8	0:0	4	n
op	62:10	0:0	4	=
call	62:12	62:60	4	matroska_ebmlnum_uint
arg	62:34	62:42	5	matroska
water	62:34	0:0	6	matroska
arg	62:44	62:48	5	data
water	62:44	0:0	6	data
arg	62:50	62:54	5	size
water	62:50	0:0	6	size
arg	62:56	62:60	5	&num
op	62:56	0:0	6	&
water	62:57	0:0	6	num
water	62:61	0:0	4	;
if	63:8	68:8	4	(n < 0 || num > INT_MAX)
cond	63:12	63:27	5	n < 0 || num > INT_MAX
water	63:12	0:0	6	n
op	63:14	0:0	6	<
water	63:16	0:0	6	0
op	63:18	0:0	6	||
water	63:21	0:0	6	num
op	63:25	0:0	6	>
water	63:27	0:0	6	INT_MAX
stmts	63:36	68:8	5	
water	63:36	0:0	6	{
call	64:12	65:44	6	av_log
arg	64:19	64:32	7	matroska->ctx
water	64:19	0:0	8	matroska
op	64:27	0:0	8	->
water	64:29	0:0	8	ctx
arg	64:34	64:45	7	AV_LOG_INFO
water	64:34	0:0	8	AV_LOG_INFO
arg	65:19	65:44	7	"EBML block data error\n"
water	65:19	0:0	8	"EBML block data error\n"
water	65:45	0:0	6	;
water	66:12	0:0	6	res
op	66:16	0:0	6	=
water	66:18	0:0	6	n
op	66:19	0:0	6	<
water	66:20	0:0	6	0
water	66:22	0:0	6	?
water	66:24	0:0	6	n
water	66:26	0:0	6	:
water	66:28	0:0	6	AVERROR_INVALIDDATA
water	66:47	0:0	6	;
break	67:12	67:17	6	
water	68:8	0:0	6	}
water	69:8	0:0	4	data
op	69:13	0:0	4	+=
water	69:16	0:0	4	n
water	69:17	0:0	4	;
water	70:8	0:0	4	size
op	70:13	0:0	4	-=
water	70:16	0:0	4	n
water	70:17	0:0	4	;
water	71:8	0:0	4	total
op	71:14	0:0	4	=
water	71:16	0:0	4	lace_size
op	71:25	0:0	4	[
water	71:26	0:0	4	0
op	71:27	0:0	4	]
op	71:29	0:0	4	=
water	71:31	0:0	4	num
water	71:34	0:0	4	;
for	72:8	86:8	4	(n = 1 ;res == 0 && n < * laces - 1;n ++)
forinit	72:13	72:18	5	n = 1 ;
water	72:13	0:0	6	n
op	72:15	0:0	6	=
water	72:17	0:0	6	1
water	72:18	0:0	6	;
cond	72:20	72:45	5	res == 0 && n < * laces - 1
water	72:20	0:0	6	res
op	72:24	0:0	6	==
water	72:27	0:0	6	0
op	72:29	0:0	6	&&
water	72:32	0:0	6	n
op	72:34	0:0	6	<
op	72:36	0:0	6	*
water	72:37	0:0	6	laces
op	72:43	0:0	6	-
water	72:45	0:0	6	1
forexpr	72:48	72:49	5	n ++
water	72:48	0:0	6	n
op	72:49	0:0	6	++
stmts	72:53	86:8	5	
water	72:53	0:0	6	{
decl	73:12	73:24	6	int64_t	snum
decl	74:12	74:17	6	int	r
water	75:12	0:0	6	r
op	75:14	0:0	6	=
call	75:16	75:65	6	matroska_ebmlnum_sint
arg	75:38	75:46	7	matroska
water	75:38	0:0	8	matroska
arg	75:48	75:52	7	data
water	75:48	0:0	8	data
arg	75:54	75:58	7	size
water	75:54	0:0	8	size
arg	75:60	75:65	7	&snum
op	75:60	0:0	8	&
water	75:61	0:0	8	snum
water	75:66	0:0	6	;
if	76:12	81:12	6	(r< 0 || lace_size [ n - 1 ] + snum >(uint64_t ) INT_MAX)
cond	76:16	76:61	7	r< 0 || lace_size [ n - 1 ] + snum >(uint64_t ) INT_MAX
call	76:16	76:60	8	r
arg	76:52	76:60	9	uint64_t
water	76:52	0:0	10	uint64_t
water	76:61	0:0	8	INT_MAX
stmts	76:70	81:12	7	
water	76:70	0:0	8	{
call	77:16	78:48	8	av_log
arg	77:23	77:36	9	matroska->ctx
water	77:23	0:0	10	matroska
op	77:31	0:0	10	->
water	77:33	0:0	10	ctx
arg	77:38	77:49	9	AV_LOG_INFO
water	77:38	0:0	10	AV_LOG_INFO
arg	78:23	78:48	9	"EBML block data error\n"
water	78:23	0:0	10	"EBML block data error\n"
water	78:49	0:0	8	;
water	79:16	0:0	8	res
op	79:20	0:0	8	=
water	79:22	0:0	8	r
op	79:23	0:0	8	<
water	79:24	0:0	8	0
water	79:26	0:0	8	?
water	79:28	0:0	8	r
water	79:30	0:0	8	:
water	79:32	0:0	8	AVERROR_INVALIDDATA
water	79:51	0:0	8	;
break	80:16	80:21	8	
water	81:12	0:0	8	}
water	82:12	0:0	6	data
op	82:24	0:0	6	+=
water	82:27	0:0	6	r
water	82:28	0:0	6	;
water	83:12	0:0	6	size
op	83:24	0:0	6	-=
water	83:27	0:0	6	r
water	83:28	0:0	6	;
water	84:12	0:0	6	lace_size
op	84:21	0:0	6	[
water	84:22	0:0	6	n
op	84:23	0:0	6	]
op	84:25	0:0	6	=
water	84:27	0:0	6	lace_size
op	84:36	0:0	6	[
water	84:37	0:0	6	n
op	84:39	0:0	6	-
water	84:41	0:0	6	1
op	84:42	0:0	6	]
op	84:44	0:0	6	+
water	84:46	0:0	6	snum
water	84:50	0:0	6	;
water	85:12	0:0	6	total
op	85:24	0:0	6	+=
water	85:27	0:0	6	lace_size
op	85:36	0:0	6	[
water	85:37	0:0	6	n
op	85:38	0:0	6	]
water	85:39	0:0	6	;
water	86:8	0:0	6	}
if	87:8	90:8	4	(size <= total)
cond	87:12	87:20	5	size <= total
water	87:12	0:0	6	size
op	87:17	0:0	6	<=
water	87:20	0:0	6	total
stmts	87:27	90:8	5	
water	87:27	0:0	6	{
water	88:12	0:0	6	res
op	88:16	0:0	6	=
water	88:18	0:0	6	AVERROR_INVALIDDATA
water	88:37	0:0	6	;
break	89:12	89:17	6	
water	90:8	0:0	6	}
water	91:8	0:0	4	lace_size
op	91:17	0:0	4	[
op	91:18	0:0	4	*
water	91:19	0:0	4	laces
op	91:25	0:0	4	-
water	91:27	0:0	4	1
op	91:28	0:0	4	]
op	91:30	0:0	4	=
water	91:32	0:0	4	size
op	91:37	0:0	4	-
water	91:39	0:0	4	total
water	91:44	0:0	4	;
break	92:8	92:13	4	
water	93:4	0:0	4	}
water	94:4	0:0	4	}
op	95:4	0:0	2	*
water	95:5	0:0	2	buf
op	95:14	0:0	2	=
water	95:16	0:0	2	data
water	95:20	0:0	2	;
op	96:4	0:0	2	*
water	96:5	0:0	2	lace_buf
op	96:14	0:0	2	=
water	96:16	0:0	2	lace_size
water	96:25	0:0	2	;
op	97:4	0:0	2	*
water	97:5	0:0	2	buf_size
op	97:14	0:0	2	=
water	97:16	0:0	2	size
water	97:20	0:0	2	;
return	98:4	98:14	2	res
water	98:11	0:0	3	res
