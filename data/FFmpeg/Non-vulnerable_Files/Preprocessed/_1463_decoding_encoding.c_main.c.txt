func	1:0	31:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	30:12	1	
decl	3:4	3:27	2	const char	*output_type
call	5:4	5:25	2	avcodec_register_all
water	5:26	0:0	2	;
if	6:4	15:4	2	(argc < 2)
cond	6:8	6:15	3	argc < 2
water	6:8	0:0	4	argc
op	6:13	0:0	4	<
water	6:15	0:0	4	2
stmts	6:18	15:4	3	
water	6:18	0:0	4	{
call	7:8	13:22	4	printf
arg	7:15	12:75	5	"usage: %s output_type\n""API example program to decode/encode a media stream with libavcodec.\n""This program generates a synthetic stream and encodes it to a file\n""named test.h264, test.mp2 or test.mpg depending on output_type.\n""The encoded stream is then decoded and written to a raw data output.\n""output_type must be chosen between 'h264', 'mp2', 'mpg'.\n"
water	7:15	0:0	6	"usage: %s output_type\n"
water	8:15	0:0	6	"API example program to decode/encode a media stream with libavcodec.\n"
water	9:15	0:0	6	"This program generates a synthetic stream and encodes it to a file\n"
water	10:15	0:0	6	"named test.h264, test.mp2 or test.mpg depending on output_type.\n"
water	11:15	0:0	6	"The encoded stream is then decoded and written to a raw data output.\n"
water	12:15	0:0	6	"output_type must be chosen between 'h264', 'mp2', 'mpg'.\n"
arg	13:15	13:22	5	argv[0]
water	13:15	0:0	6	argv
op	13:19	0:0	6	[
water	13:20	0:0	6	0
op	13:21	0:0	6	]
water	13:23	0:0	4	;
return	14:8	14:16	4	1
water	14:15	0:0	5	1
water	15:4	0:0	4	}
water	16:4	0:0	2	output_type
op	16:16	0:0	2	=
water	16:18	0:0	2	argv
op	16:22	0:0	2	[
water	16:23	0:0	2	1
op	16:24	0:0	2	]
water	16:25	0:0	2	;
if	17:4	19:4	2	(!strcmp (output_type ,"h264" ))
cond	17:8	17:35	3	!strcmp (output_type ,"h264" )
op	17:8	0:0	4	!
call	17:9	17:35	4	strcmp
arg	17:16	17:27	5	output_type
water	17:16	0:0	6	output_type
arg	17:29	17:35	5	"h264"
water	17:29	0:0	6	"h264"
stmts	17:38	19:4	3	
water	17:38	0:0	4	{
call	18:8	18:58	4	video_encode_example
arg	18:29	18:40	5	"test.h264"
water	18:29	0:0	6	"test.h264"
arg	18:42	18:58	5	AV_CODEC_ID_H264
water	18:42	0:0	6	AV_CODEC_ID_H264
water	18:59	0:0	4	;
water	19:4	0:0	4	}
else	19:6	22:4	2
stmts	19:11	22:4	3	
if	19:11	22:4	4	(!strcmp (output_type ,"mp2" ))
cond	19:15	19:41	5	!strcmp (output_type ,"mp2" )
op	19:15	0:0	6	!
call	19:16	19:41	6	strcmp
arg	19:23	19:34	7	output_type
water	19:23	0:0	8	output_type
arg	19:36	19:41	7	"mp2"
water	19:36	0:0	8	"mp2"
stmts	19:44	22:4	5	
water	19:44	0:0	6	{
call	20:8	20:39	6	audio_encode_example
arg	20:29	20:39	7	"test.mp2"
water	20:29	0:0	8	"test.mp2"
water	20:40	0:0	6	;
call	21:8	21:51	6	audio_decode_example
arg	21:29	21:39	7	"test.pcm"
water	21:29	0:0	8	"test.pcm"
arg	21:41	21:51	7	"test.mp2"
water	21:41	0:0	8	"test.mp2"
water	21:52	0:0	6	;
water	22:4	0:0	6	}
else	22:6	25:4	2
stmts	22:11	25:4	3	
if	22:11	25:4	4	(!strcmp (output_type ,"mpg" ))
cond	22:15	22:41	5	!strcmp (output_type ,"mpg" )
op	22:15	0:0	6	!
call	22:16	22:41	6	strcmp
arg	22:23	22:34	7	output_type
water	22:23	0:0	8	output_type
arg	22:36	22:41	7	"mpg"
water	22:36	0:0	8	"mpg"
stmts	22:44	25:4	5	
water	22:44	0:0	6	{
call	23:8	23:63	6	video_encode_example
arg	23:29	23:39	7	"test.mpg"
water	23:29	0:0	8	"test.mpg"
arg	23:41	23:63	7	AV_CODEC_ID_MPEG1VIDEO
water	23:41	0:0	8	AV_CODEC_ID_MPEG1VIDEO
water	23:64	0:0	6	;
call	24:8	24:55	6	video_decode_example
arg	24:29	24:43	7	"test%02d.pgm"
water	24:29	0:0	8	"test%02d.pgm"
arg	24:45	24:55	7	"test.mpg"
water	24:45	0:0	8	"test.mpg"
water	24:56	0:0	6	;
water	25:4	0:0	6	}
else	25:6	29:4	2
stmts	25:11	29:4	3	
water	25:11	0:0	4	{
call	26:8	27:27	4	fprintf
arg	26:16	26:22	5	stderr
water	26:16	0:0	6	stderr
arg	26:24	26:92	5	"Invalid output type '%s', choose between 'h264', 'mp2', or 'mpg'\n"
water	26:24	0:0	6	"Invalid output type '%s', choose between 'h264', 'mp2', or 'mpg'\n"
arg	27:16	27:27	5	output_type
water	27:16	0:0	6	output_type
water	27:28	0:0	4	;
return	28:8	28:16	4	1
water	28:15	0:0	5	1
water	29:4	0:0	4	}
return	30:4	30:12	2	0
water	30:11	0:0	3	0
