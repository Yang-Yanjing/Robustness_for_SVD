func	1:0	21:0	0	static void	apply_mdct
params	1:22	0:0	1	
param	1:23	1:42	2	AC3EncodeContext *	s
stmnts	0:0	20:4	1	
decl	3:4	3:15	2	int	blk
water	3:11	0:0	2	,
decl	3:4	3:15	2	int	ch
for	4:4	20:4	2	(ch = 0 ;ch < s -> channels;ch ++)
forinit	4:9	4:15	3	ch = 0 ;
water	4:9	0:0	4	ch
op	4:12	0:0	4	=
water	4:14	0:0	4	0
water	4:15	0:0	4	;
cond	4:17	4:25	3	ch < s -> channels
water	4:17	0:0	4	ch
op	4:20	0:0	4	<
water	4:22	0:0	4	s
op	4:23	0:0	4	->
water	4:25	0:0	4	channels
forexpr	4:35	4:37	3	ch ++
water	4:35	0:0	4	ch
op	4:37	0:0	4	++
stmts	4:41	20:4	3	
water	4:41	0:0	4	{
for	5:8	19:8	4	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	5:13	5:20	5	blk = 0 ;
water	5:13	0:0	6	blk
op	5:17	0:0	6	=
water	5:19	0:0	6	0
water	5:20	0:0	6	;
cond	5:22	5:31	5	blk < s -> num_blocks
water	5:22	0:0	6	blk
op	5:26	0:0	6	<
water	5:28	0:0	6	s
op	5:29	0:0	6	->
water	5:31	0:0	6	num_blocks
forexpr	5:43	5:46	5	blk ++
water	5:43	0:0	6	blk
op	5:46	0:0	6	++
stmts	5:50	19:8	5	
water	5:50	0:0	6	{
decl	6:12	6:45	6	AC3Block	*block
op	6:28	0:0	6	=
op	6:30	0:0	6	&
water	6:31	0:0	6	s
op	6:32	0:0	6	->
water	6:34	0:0	6	blocks
op	6:40	0:0	6	[
water	6:41	0:0	6	blk
op	6:44	0:0	6	]
decl	7:12	7:90	6	const SampleType	*input_samples
op	7:44	0:0	6	=
op	7:46	0:0	6	&
water	7:47	0:0	6	s
op	7:48	0:0	6	->
water	7:50	0:0	6	planar_samples
op	7:64	0:0	6	[
water	7:65	0:0	6	ch
op	7:67	0:0	6	]
op	7:68	0:0	6	[
water	7:69	0:0	6	blk
op	7:73	0:0	6	*
water	7:75	0:0	6	AC3_BLOCK_SIZE
op	7:89	0:0	6	]
call	9:12	10:63	6	s->fdsp->vector_fmul
arg	9:33	9:52	7	s->windowed_samples
water	9:33	0:0	8	s
op	9:34	0:0	8	->
water	9:36	0:0	8	windowed_samples
arg	9:54	9:67	7	input_samples
water	9:54	0:0	8	input_samples
arg	10:32	10:46	7	s->mdct_window
water	10:32	0:0	8	s
op	10:33	0:0	8	->
water	10:35	0:0	8	mdct_window
arg	10:48	10:63	7	AC3_WINDOW_SIZE
water	10:48	0:0	8	AC3_WINDOW_SIZE
water	10:64	0:0	6	;
call	12:12	13:72	6	s->ac3dsp.apply_window_int16
arg	12:41	12:60	7	s->windowed_samples
water	12:41	0:0	8	s
op	12:42	0:0	8	->
water	12:44	0:0	8	windowed_samples
arg	12:62	12:75	7	input_samples
water	12:62	0:0	8	input_samples
arg	13:41	13:55	7	s->mdct_window
water	13:41	0:0	8	s
op	13:42	0:0	8	->
water	13:44	0:0	8	mdct_window
arg	13:57	13:72	7	AC3_WINDOW_SIZE
water	13:57	0:0	8	AC3_WINDOW_SIZE
water	13:73	0:0	6	;
if	15:12	16:63	6	(s -> fixed_point)
cond	15:16	15:19	7	s -> fixed_point
water	15:16	0:0	8	s
op	15:17	0:0	8	->
water	15:19	0:0	8	fixed_point
stmts	16:16	16:63	7	
water	16:16	0:0	8	block
op	16:21	0:0	8	->
water	16:23	0:0	8	coeff_shift
op	16:34	0:0	8	[
water	16:35	0:0	8	ch
op	16:37	0:0	8	+
water	16:38	0:0	8	1
op	16:39	0:0	8	]
op	16:41	0:0	8	=
call	16:43	16:62	8	normalize_samples
arg	16:61	16:62	9	s
water	16:61	0:0	10	s
water	16:63	0:0	8	;
call	17:12	18:50	6	s->mdct.mdct_calcw
arg	17:31	17:39	7	&s->mdct
op	17:31	0:0	8	&
water	17:32	0:0	8	s
op	17:33	0:0	8	->
water	17:35	0:0	8	mdct
arg	17:41	17:63	7	block->mdct_coef[ch+1]
water	17:41	0:0	8	block
op	17:46	0:0	8	->
water	17:48	0:0	8	mdct_coef
op	17:57	0:0	8	[
water	17:58	0:0	8	ch
op	17:60	0:0	8	+
water	17:61	0:0	8	1
op	17:62	0:0	8	]
arg	18:31	18:50	7	s->windowed_samples
water	18:31	0:0	8	s
op	18:32	0:0	8	->
water	18:34	0:0	8	windowed_samples
water	18:51	0:0	6	;
water	19:8	0:0	6	}
water	20:4	0:0	4	}
