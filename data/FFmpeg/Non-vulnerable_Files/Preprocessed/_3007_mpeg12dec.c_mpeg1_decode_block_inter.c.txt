func	1:0	76:0	0	static inline int	mpeg1_decode_block_inter
params	1:42	0:0	1	
param	1:43	1:60	2	MpegEncContext *	s
param	2:43	2:57	2	int16_t *	block
param	2:59	2:64	2	int	n
stmnts	0:0	75:12	1	
decl	4:4	4:24	2	int	level
water	4:13	0:0	2	,
decl	4:4	4:24	2	int	i
water	4:16	0:0	2	,
decl	4:4	4:24	2	int	j
water	4:19	0:0	2	,
decl	4:4	4:24	2	int	run
decl	5:4	5:47	2	RLTable	*rl
op	5:33	0:0	2	=
op	5:35	0:0	2	&
water	5:36	0:0	2	ff_rl_mpeg1
water	6:4	0:0	2	uint8_t
op	6:12	0:0	2	*
water	6:13	0:0	2	const
water	6:19	0:0	2	scantable
op	6:33	0:0	2	=
water	6:35	0:0	2	s
op	6:36	0:0	2	->
water	6:38	0:0	2	intra_scantable
op	6:53	0:0	2	.
water	6:54	0:0	2	permutated
water	6:64	0:0	2	;
decl	7:4	7:50	2	const uint16_t	*quant_matrix
op	7:33	0:0	2	=
water	7:35	0:0	2	s
op	7:36	0:0	2	->
water	7:38	0:0	2	inter_matrix
decl	8:4	8:44	2	const int	qscale
op	8:33	0:0	2	=
water	8:35	0:0	2	s
op	8:36	0:0	2	->
water	8:38	0:0	2	qscale
water	9:4	0:0	2	{
call	10:8	10:30	2	OPEN_READER
arg	10:20	10:22	3	re
water	10:20	0:0	4	re
arg	10:24	10:30	3	&s->gb
op	10:24	0:0	4	&
water	10:25	0:0	4	s
op	10:26	0:0	4	->
water	10:28	0:0	4	gb
water	10:31	0:0	2	;
water	11:8	0:0	2	i
op	11:10	0:0	2	=
op	11:12	0:0	2	-
water	11:13	0:0	2	1
water	11:14	0:0	2	;
call	13:8	13:31	2	UPDATE_CACHE
arg	13:21	13:23	3	re
water	13:21	0:0	4	re
arg	13:25	13:31	3	&s->gb
op	13:25	0:0	4	&
water	13:26	0:0	4	s
op	13:27	0:0	4	->
water	13:29	0:0	4	gb
water	13:32	0:0	2	;
if	14:8	24:8	2	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) < 0)
cond	14:12	14:48	3	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) < 0
water	14:12	0:0	4	(
water	14:13	0:0	4	(
water	14:14	0:0	4	int32_t
water	14:21	0:0	4	)
call	14:23	14:43	4	GET_CACHE
arg	14:33	14:35	5	re
water	14:33	0:0	6	re
arg	14:37	14:43	5	&s->gb
op	14:37	0:0	6	&
water	14:38	0:0	6	s
op	14:39	0:0	6	->
water	14:41	0:0	6	gb
water	14:44	0:0	4	)
op	14:46	0:0	4	<
water	14:48	0:0	4	0
stmts	14:51	24:8	3	
water	14:51	0:0	4	{
water	15:12	0:0	4	level
op	15:18	0:0	4	=
water	15:20	0:0	4	(
water	15:21	0:0	4	3
op	15:23	0:0	4	*
water	15:25	0:0	4	qscale
op	15:32	0:0	4	*
water	15:34	0:0	4	quant_matrix
op	15:46	0:0	4	[
water	15:47	0:0	4	0
op	15:48	0:0	4	]
water	15:49	0:0	4	)
op	15:51	0:0	4	>>
water	15:54	0:0	4	5
water	15:55	0:0	4	;
water	16:12	0:0	4	level
op	16:18	0:0	4	=
water	16:20	0:0	4	(
water	16:21	0:0	4	level
op	16:27	0:0	4	-
water	16:29	0:0	4	1
water	16:30	0:0	4	)
op	16:32	0:0	4	|
water	16:34	0:0	4	1
water	16:35	0:0	4	;
if	17:12	18:30	4	(GET_CACHE (re ,& s -> gb ) & 0 x40000000)
cond	17:16	17:41	5	GET_CACHE (re ,& s -> gb ) & 0 x40000000
call	17:16	17:36	6	GET_CACHE
arg	17:26	17:28	7	re
water	17:26	0:0	8	re
arg	17:30	17:36	7	&s->gb
op	17:30	0:0	8	&
water	17:31	0:0	8	s
op	17:32	0:0	8	->
water	17:34	0:0	8	gb
op	17:38	0:0	6	&
water	17:40	0:0	6	0
water	17:41	0:0	6	x40000000
stmts	18:16	18:30	5	
water	18:16	0:0	6	level
op	18:22	0:0	6	=
op	18:24	0:0	6	-
water	18:25	0:0	6	level
water	18:30	0:0	6	;
water	19:12	0:0	4	block
op	19:17	0:0	4	[
water	19:18	0:0	4	0
op	19:19	0:0	4	]
op	19:21	0:0	4	=
water	19:23	0:0	4	level
water	19:28	0:0	4	;
water	20:12	0:0	4	i
op	20:13	0:0	4	++
water	20:15	0:0	4	;
call	21:12	21:35	4	SKIP_BITS
arg	21:22	21:24	5	re
water	21:22	0:0	6	re
arg	21:26	21:32	5	&s->gb
op	21:26	0:0	6	&
water	21:27	0:0	6	s
op	21:28	0:0	6	->
water	21:30	0:0	6	gb
arg	21:34	21:35	5	2
water	21:34	0:0	6	2
water	21:36	0:0	4	;
if	22:12	23:24	4	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF)
cond	22:16	22:64	5	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF
water	22:16	0:0	6	(
water	22:17	0:0	6	(
water	22:18	0:0	6	int32_t
water	22:25	0:0	6	)
call	22:27	22:47	6	GET_CACHE
arg	22:37	22:39	7	re
water	22:37	0:0	8	re
arg	22:41	22:47	7	&s->gb
op	22:41	0:0	8	&
water	22:42	0:0	8	s
op	22:43	0:0	8	->
water	22:45	0:0	8	gb
water	22:48	0:0	6	)
op	22:50	0:0	6	<=
water	22:53	0:0	6	(
water	22:54	0:0	6	int32_t
water	22:61	0:0	6	)
water	22:63	0:0	6	0
water	22:64	0:0	6	xBFFFFFFF
stmts	23:16	23:24	5	
goto	23:16	23:24	6	end
water	23:21	0:0	7	end
water	24:8	0:0	4	}
for	26:8	69:8	2	(;;)
forinit	26:13	26:13	3	;
water	26:13	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	26:17	69:8	3	
water	26:17	0:0	4	{
call	27:12	28:41	4	GET_RL_VLC
arg	27:23	27:28	5	level
water	27:23	0:0	6	level
arg	27:30	27:33	5	run
water	27:30	0:0	6	run
arg	27:35	27:37	5	re
water	27:35	0:0	6	re
arg	27:39	27:45	5	&s->gb
op	27:39	0:0	6	&
water	27:40	0:0	6	s
op	27:41	0:0	6	->
water	27:43	0:0	6	gb
arg	27:47	27:60	5	rl->rl_vlc[0]
water	27:47	0:0	6	rl
op	27:49	0:0	6	->
water	27:51	0:0	6	rl_vlc
op	27:57	0:0	6	[
water	27:58	0:0	6	0
op	27:59	0:0	6	]
arg	28:23	28:35	5	TEX_VLC_BITS
water	28:23	0:0	6	TEX_VLC_BITS
arg	28:37	28:38	5	2
water	28:37	0:0	6	2
arg	28:40	28:41	5	0
water	28:40	0:0	6	0
water	28:42	0:0	4	;
if	29:12	38:12	4	(level != 0)
cond	29:16	29:25	5	level != 0
water	29:16	0:0	6	level
op	29:22	0:0	6	!=
water	29:25	0:0	6	0
stmts	29:28	38:12	5	
water	29:28	0:0	6	{
water	30:16	0:0	6	i
op	30:18	0:0	6	+=
water	30:21	0:0	6	run
water	30:24	0:0	6	;
call	31:16	31:42	6	check_scantable_index
arg	31:38	31:39	7	s
water	31:38	0:0	8	s
arg	31:41	31:42	7	i
water	31:41	0:0	8	i
water	31:43	0:0	6	;
water	32:16	0:0	6	j
op	32:18	0:0	6	=
water	32:20	0:0	6	scantable
op	32:29	0:0	6	[
water	32:30	0:0	6	i
op	32:31	0:0	6	]
water	32:32	0:0	6	;
water	33:16	0:0	6	level
op	33:22	0:0	6	=
water	33:24	0:0	6	(
water	33:25	0:0	6	(
water	33:26	0:0	6	level
op	33:32	0:0	6	*
water	33:34	0:0	6	2
op	33:36	0:0	6	+
water	33:38	0:0	6	1
water	33:39	0:0	6	)
op	33:41	0:0	6	*
water	33:43	0:0	6	qscale
op	33:50	0:0	6	*
water	33:52	0:0	6	quant_matrix
op	33:64	0:0	6	[
water	33:65	0:0	6	j
op	33:66	0:0	6	]
water	33:67	0:0	6	)
op	33:69	0:0	6	>>
water	33:72	0:0	6	5
water	33:73	0:0	6	;
water	34:16	0:0	6	level
op	34:22	0:0	6	=
water	34:24	0:0	6	(
water	34:25	0:0	6	level
op	34:31	0:0	6	-
water	34:33	0:0	6	1
water	34:34	0:0	6	)
op	34:36	0:0	6	|
water	34:38	0:0	6	1
water	34:39	0:0	6	;
water	35:16	0:0	6	level
op	35:22	0:0	6	=
water	35:24	0:0	6	(
water	35:25	0:0	6	level
op	35:31	0:0	6	^
call	35:33	35:57	6	SHOW_SBITS
arg	35:44	35:46	7	re
water	35:44	0:0	8	re
arg	35:48	35:54	7	&s->gb
op	35:48	0:0	8	&
water	35:49	0:0	8	s
op	35:50	0:0	8	->
water	35:52	0:0	8	gb
arg	35:56	35:57	7	1
water	35:56	0:0	8	1
water	35:58	0:0	6	)
op	35:60	0:0	6	-
call	36:24	36:48	6	SHOW_SBITS
arg	36:35	36:37	7	re
water	36:35	0:0	8	re
arg	36:39	36:45	7	&s->gb
op	36:39	0:0	8	&
water	36:40	0:0	8	s
op	36:41	0:0	8	->
water	36:43	0:0	8	gb
arg	36:47	36:48	7	1
water	36:47	0:0	8	1
water	36:49	0:0	6	;
call	37:16	37:39	6	SKIP_BITS
arg	37:26	37:28	7	re
water	37:26	0:0	8	re
arg	37:30	37:36	7	&s->gb
op	37:30	0:0	8	&
water	37:31	0:0	8	s
op	37:32	0:0	8	->
water	37:34	0:0	8	gb
arg	37:38	37:39	7	1
water	37:38	0:0	8	1
water	37:40	0:0	6	;
water	38:12	0:0	6	}
else	38:14	64:12	4
stmts	38:19	64:12	5	
water	38:19	0:0	6	{
water	40:16	0:0	6	run
op	40:20	0:0	6	=
call	40:22	40:46	6	SHOW_UBITS
arg	40:33	40:35	7	re
water	40:33	0:0	8	re
arg	40:37	40:43	7	&s->gb
op	40:37	0:0	8	&
water	40:38	0:0	8	s
op	40:39	0:0	8	->
water	40:41	0:0	8	gb
arg	40:45	40:46	7	6
water	40:45	0:0	8	6
op	40:48	0:0	6	+
water	40:50	0:0	6	1
water	40:51	0:0	6	;
call	41:16	41:44	6	LAST_SKIP_BITS
arg	41:31	41:33	7	re
water	41:31	0:0	8	re
arg	41:35	41:41	7	&s->gb
op	41:35	0:0	8	&
water	41:36	0:0	8	s
op	41:37	0:0	8	->
water	41:39	0:0	8	gb
arg	41:43	41:44	7	6
water	41:43	0:0	8	6
water	41:45	0:0	6	;
call	42:16	42:39	6	UPDATE_CACHE
arg	42:29	42:31	7	re
water	42:29	0:0	8	re
arg	42:33	42:39	7	&s->gb
op	42:33	0:0	8	&
water	42:34	0:0	8	s
op	42:35	0:0	8	->
water	42:37	0:0	8	gb
water	42:40	0:0	6	;
water	43:16	0:0	6	level
op	43:22	0:0	6	=
call	43:24	43:48	6	SHOW_SBITS
arg	43:35	43:37	7	re
water	43:35	0:0	8	re
arg	43:39	43:45	7	&s->gb
op	43:39	0:0	8	&
water	43:40	0:0	8	s
op	43:41	0:0	8	->
water	43:43	0:0	8	gb
arg	43:47	43:48	7	8
water	43:47	0:0	8	8
water	43:49	0:0	6	;
call	44:16	44:39	6	SKIP_BITS
arg	44:26	44:28	7	re
water	44:26	0:0	8	re
arg	44:30	44:36	7	&s->gb
op	44:30	0:0	8	&
water	44:31	0:0	8	s
op	44:32	0:0	8	->
water	44:34	0:0	8	gb
arg	44:38	44:39	7	8
water	44:38	0:0	8	8
water	44:40	0:0	6	;
if	45:16	48:16	6	(level == - 128)
cond	45:20	45:30	7	level == - 128
water	45:20	0:0	8	level
op	45:26	0:0	8	==
op	45:29	0:0	8	-
water	45:30	0:0	8	128
stmts	45:35	48:16	7	
water	45:35	0:0	8	{
water	46:20	0:0	8	level
op	46:26	0:0	8	=
call	46:28	46:52	8	SHOW_UBITS
arg	46:39	46:41	9	re
water	46:39	0:0	10	re
arg	46:43	46:49	9	&s->gb
op	46:43	0:0	10	&
water	46:44	0:0	10	s
op	46:45	0:0	10	->
water	46:47	0:0	10	gb
arg	46:51	46:52	9	8
water	46:51	0:0	10	8
op	46:54	0:0	8	-
water	46:56	0:0	8	256
water	46:59	0:0	8	;
call	47:20	47:43	8	SKIP_BITS
arg	47:30	47:32	9	re
water	47:30	0:0	10	re
arg	47:34	47:40	9	&s->gb
op	47:34	0:0	10	&
water	47:35	0:0	10	s
op	47:36	0:0	10	->
water	47:38	0:0	10	gb
arg	47:42	47:43	9	8
water	47:42	0:0	10	8
water	47:44	0:0	8	;
water	48:16	0:0	8	}
else	48:18	51:16	6
stmts	48:23	51:16	7	
if	48:23	51:16	8	(level == 0)
cond	48:27	48:36	9	level == 0
water	48:27	0:0	10	level
op	48:33	0:0	10	==
water	48:36	0:0	10	0
stmts	48:39	51:16	9	
water	48:39	0:0	10	{
water	49:20	0:0	10	level
op	49:26	0:0	10	=
call	49:28	49:52	10	SHOW_UBITS
arg	49:39	49:41	11	re
water	49:39	0:0	12	re
arg	49:43	49:49	11	&s->gb
op	49:43	0:0	12	&
water	49:44	0:0	12	s
op	49:45	0:0	12	->
water	49:47	0:0	12	gb
arg	49:51	49:52	11	8
water	49:51	0:0	12	8
water	49:53	0:0	10	;
call	50:20	50:43	10	SKIP_BITS
arg	50:30	50:32	11	re
water	50:30	0:0	12	re
arg	50:34	50:40	11	&s->gb
op	50:34	0:0	12	&
water	50:35	0:0	12	s
op	50:36	0:0	12	->
water	50:38	0:0	12	gb
arg	50:42	50:43	11	8
water	50:42	0:0	12	8
water	50:44	0:0	10	;
water	51:16	0:0	10	}
water	52:16	0:0	6	i
op	52:18	0:0	6	+=
water	52:21	0:0	6	run
water	52:24	0:0	6	;
call	53:16	53:42	6	check_scantable_index
arg	53:38	53:39	7	s
water	53:38	0:0	8	s
arg	53:41	53:42	7	i
water	53:41	0:0	8	i
water	53:43	0:0	6	;
water	54:16	0:0	6	j
op	54:18	0:0	6	=
water	54:20	0:0	6	scantable
op	54:29	0:0	6	[
water	54:30	0:0	6	i
op	54:31	0:0	6	]
water	54:32	0:0	6	;
if	55:16	60:16	6	(level < 0)
cond	55:20	55:28	7	level < 0
water	55:20	0:0	8	level
op	55:26	0:0	8	<
water	55:28	0:0	8	0
stmts	55:31	60:16	7	
water	55:31	0:0	8	{
water	56:20	0:0	8	level
op	56:26	0:0	8	=
op	56:28	0:0	8	-
water	56:29	0:0	8	level
water	56:34	0:0	8	;
water	57:20	0:0	8	level
op	57:26	0:0	8	=
water	57:28	0:0	8	(
water	57:29	0:0	8	(
water	57:30	0:0	8	level
op	57:36	0:0	8	*
water	57:38	0:0	8	2
op	57:40	0:0	8	+
water	57:42	0:0	8	1
water	57:43	0:0	8	)
op	57:45	0:0	8	*
water	57:47	0:0	8	qscale
op	57:54	0:0	8	*
water	57:56	0:0	8	quant_matrix
op	57:68	0:0	8	[
water	57:69	0:0	8	j
op	57:70	0:0	8	]
water	57:71	0:0	8	)
op	57:73	0:0	8	>>
water	57:76	0:0	8	5
water	57:77	0:0	8	;
water	58:20	0:0	8	level
op	58:26	0:0	8	=
water	58:28	0:0	8	(
water	58:29	0:0	8	level
op	58:35	0:0	8	-
water	58:37	0:0	8	1
water	58:38	0:0	8	)
op	58:40	0:0	8	|
water	58:42	0:0	8	1
water	58:43	0:0	8	;
water	59:20	0:0	8	level
op	59:26	0:0	8	=
op	59:28	0:0	8	-
water	59:29	0:0	8	level
water	59:34	0:0	8	;
water	60:16	0:0	8	}
else	60:18	63:16	6
stmts	60:23	63:16	7	
water	60:23	0:0	8	{
water	61:20	0:0	8	level
op	61:26	0:0	8	=
water	61:28	0:0	8	(
water	61:29	0:0	8	(
water	61:30	0:0	8	level
op	61:36	0:0	8	*
water	61:38	0:0	8	2
op	61:40	0:0	8	+
water	61:42	0:0	8	1
water	61:43	0:0	8	)
op	61:45	0:0	8	*
water	61:47	0:0	8	qscale
op	61:54	0:0	8	*
water	61:56	0:0	8	quant_matrix
op	61:68	0:0	8	[
water	61:69	0:0	8	j
op	61:70	0:0	8	]
water	61:71	0:0	8	)
op	61:73	0:0	8	>>
water	61:76	0:0	8	5
water	61:77	0:0	8	;
water	62:20	0:0	8	level
op	62:26	0:0	8	=
water	62:28	0:0	8	(
water	62:29	0:0	8	level
op	62:35	0:0	8	-
water	62:37	0:0	8	1
water	62:38	0:0	8	)
op	62:40	0:0	8	|
water	62:42	0:0	8	1
water	62:43	0:0	8	;
water	63:16	0:0	8	}
water	64:12	0:0	6	}
water	65:12	0:0	4	block
op	65:17	0:0	4	[
water	65:18	0:0	4	j
op	65:19	0:0	4	]
op	65:21	0:0	4	=
water	65:23	0:0	4	level
water	65:28	0:0	4	;
if	66:12	67:21	4	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF)
cond	66:16	66:64	5	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF
water	66:16	0:0	6	(
water	66:17	0:0	6	(
water	66:18	0:0	6	int32_t
water	66:25	0:0	6	)
call	66:27	66:47	6	GET_CACHE
arg	66:37	66:39	7	re
water	66:37	0:0	8	re
arg	66:41	66:47	7	&s->gb
op	66:41	0:0	8	&
water	66:42	0:0	8	s
op	66:43	0:0	8	->
water	66:45	0:0	8	gb
water	66:48	0:0	6	)
op	66:50	0:0	6	<=
water	66:53	0:0	6	(
water	66:54	0:0	6	int32_t
water	66:61	0:0	6	)
water	66:63	0:0	6	0
water	66:64	0:0	6	xBFFFFFFF
stmts	67:16	67:21	5	
break	67:16	67:21	6	
call	68:12	68:35	4	UPDATE_CACHE
arg	68:25	68:27	5	re
water	68:25	0:0	6	re
arg	68:29	68:35	5	&s->gb
op	68:29	0:0	6	&
water	68:30	0:0	6	s
op	68:31	0:0	6	->
water	68:33	0:0	6	gb
water	68:36	0:0	4	;
water	69:8	0:0	4	}
label	70:0	70:3	2	end :
call	71:8	71:36	2	LAST_SKIP_BITS
arg	71:23	71:25	3	re
water	71:23	0:0	4	re
arg	71:27	71:33	3	&s->gb
op	71:27	0:0	4	&
water	71:28	0:0	4	s
op	71:29	0:0	4	->
water	71:31	0:0	4	gb
arg	71:35	71:36	3	2
water	71:35	0:0	4	2
water	71:37	0:0	2	;
call	72:8	72:31	2	CLOSE_READER
arg	72:21	72:23	3	re
water	72:21	0:0	4	re
arg	72:25	72:31	3	&s->gb
op	72:25	0:0	4	&
water	72:26	0:0	4	s
op	72:27	0:0	4	->
water	72:29	0:0	4	gb
water	72:32	0:0	2	;
water	73:4	0:0	2	}
water	74:4	0:0	2	s
op	74:5	0:0	2	->
water	74:7	0:0	2	block_last_index
op	74:23	0:0	2	[
water	74:24	0:0	2	n
op	74:25	0:0	2	]
op	74:27	0:0	2	=
water	74:29	0:0	2	i
water	74:30	0:0	2	;
return	75:4	75:12	2	0
water	75:11	0:0	3	0
