func	1:0	62:0	0	static int	frame_start
params	1:22	0:0	1	
param	1:23	1:40	2	MpegEncContext *	s
stmnts	0:0	61:12	1	
decl	3:4	3:11	2	int	ret
if	5:4	9:4	2	(s -> pict_type != AV_PICTURE_TYPE_B && s -> last_picture_ptr && s -> last_picture_ptr != s -> next_picture_ptr && s -> last_picture_ptr -> f -> buf [ 0 ])
cond	5:8	7:37	3	s -> pict_type != AV_PICTURE_TYPE_B && s -> last_picture_ptr && s -> last_picture_ptr != s -> next_picture_ptr && s -> last_picture_ptr -> f -> buf [ 0 ]
water	5:8	0:0	4	s
op	5:9	0:0	4	->
water	5:11	0:0	4	pict_type
op	5:21	0:0	4	!=
water	5:24	0:0	4	AV_PICTURE_TYPE_B
op	5:42	0:0	4	&&
water	5:45	0:0	4	s
op	5:46	0:0	4	->
water	5:48	0:0	4	last_picture_ptr
op	5:65	0:0	4	&&
water	6:8	0:0	4	s
op	6:9	0:0	4	->
water	6:11	0:0	4	last_picture_ptr
op	6:28	0:0	4	!=
water	6:31	0:0	4	s
op	6:32	0:0	4	->
water	6:34	0:0	4	next_picture_ptr
op	6:51	0:0	4	&&
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	last_picture_ptr
op	7:27	0:0	4	->
water	7:29	0:0	4	f
op	7:30	0:0	4	->
water	7:32	0:0	4	buf
op	7:35	0:0	4	[
water	7:36	0:0	4	0
op	7:37	0:0	4	]
stmts	7:40	9:4	3	
water	7:40	0:0	4	{
call	8:8	8:59	4	ff_mpeg_unref_picture
arg	8:30	8:38	5	s->avctx
water	8:30	0:0	6	s
op	8:31	0:0	6	->
water	8:33	0:0	6	avctx
arg	8:40	8:59	5	s->last_picture_ptr
water	8:40	0:0	6	s
op	8:41	0:0	6	->
water	8:43	0:0	6	last_picture_ptr
water	8:60	0:0	4	;
water	9:4	0:0	4	}
water	10:4	0:0	2	s
op	10:5	0:0	2	->
water	10:7	0:0	2	current_picture_ptr
op	10:26	0:0	2	->
water	10:28	0:0	2	f
op	10:29	0:0	2	->
water	10:31	0:0	2	pict_type
op	10:41	0:0	2	=
water	10:43	0:0	2	s
op	10:44	0:0	2	->
water	10:46	0:0	2	pict_type
water	10:55	0:0	2	;
water	11:4	0:0	2	s
op	11:5	0:0	2	->
water	11:7	0:0	2	current_picture_ptr
op	11:26	0:0	2	->
water	11:28	0:0	2	f
op	11:29	0:0	2	->
water	11:31	0:0	2	key_frame
op	11:41	0:0	2	=
water	11:43	0:0	2	s
op	11:44	0:0	2	->
water	11:46	0:0	2	pict_type
op	11:56	0:0	2	==
water	11:59	0:0	2	AV_PICTURE_TYPE_I
water	11:76	0:0	2	;
call	12:4	12:55	2	ff_mpeg_unref_picture
arg	12:26	12:34	3	s->avctx
water	12:26	0:0	4	s
op	12:27	0:0	4	->
water	12:29	0:0	4	avctx
arg	12:36	12:55	3	&s->current_picture
op	12:36	0:0	4	&
water	12:37	0:0	4	s
op	12:38	0:0	4	->
water	12:40	0:0	4	current_picture
water	12:56	0:0	2	;
if	13:4	15:18	2	(( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> current_picture ,s -> current_picture_ptr ) ) < 0)
cond	13:8	14:62	3	( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> current_picture ,s -> current_picture_ptr ) ) < 0
water	13:8	0:0	4	(
water	13:9	0:0	4	ret
op	13:13	0:0	4	=
call	13:15	14:57	4	ff_mpeg_ref_picture
arg	13:35	13:43	5	s->avctx
water	13:35	0:0	6	s
op	13:36	0:0	6	->
water	13:38	0:0	6	avctx
arg	13:45	13:64	5	&s->current_picture
op	13:45	0:0	6	&
water	13:46	0:0	6	s
op	13:47	0:0	6	->
water	13:49	0:0	6	current_picture
arg	14:35	14:57	5	s->current_picture_ptr
water	14:35	0:0	6	s
op	14:36	0:0	6	->
water	14:38	0:0	6	current_picture_ptr
water	14:58	0:0	4	)
op	14:60	0:0	4	<
water	14:62	0:0	4	0
stmts	15:8	15:18	3	
return	15:8	15:18	4	ret
water	15:15	0:0	5	ret
if	16:4	20:4	2	(s -> pict_type != AV_PICTURE_TYPE_B)
cond	16:8	16:24	3	s -> pict_type != AV_PICTURE_TYPE_B
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	pict_type
op	16:21	0:0	4	!=
water	16:24	0:0	4	AV_PICTURE_TYPE_B
stmts	16:43	20:4	3	
water	16:43	0:0	4	{
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	last_picture_ptr
op	17:28	0:0	4	=
water	17:30	0:0	4	s
op	17:31	0:0	4	->
water	17:33	0:0	4	next_picture_ptr
water	17:49	0:0	4	;
if	18:8	19:56	4	(! s -> droppable)
cond	18:12	18:16	5	! s -> droppable
op	18:12	0:0	6	!
water	18:13	0:0	6	s
op	18:14	0:0	6	->
water	18:16	0:0	6	droppable
stmts	19:12	19:56	5	
water	19:12	0:0	6	s
op	19:13	0:0	6	->
water	19:15	0:0	6	next_picture_ptr
op	19:32	0:0	6	=
water	19:34	0:0	6	s
op	19:35	0:0	6	->
water	19:37	0:0	6	current_picture_ptr
water	19:56	0:0	6	;
water	20:4	0:0	4	}
if	21:4	27:4	2	(s -> last_picture_ptr)
cond	21:8	21:11	3	s -> last_picture_ptr
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	last_picture_ptr
stmts	21:29	27:4	3	
water	21:29	0:0	4	{
call	22:8	22:56	4	ff_mpeg_unref_picture
arg	22:30	22:38	5	s->avctx
water	22:30	0:0	6	s
op	22:31	0:0	6	->
water	22:33	0:0	6	avctx
arg	22:40	22:56	5	&s->last_picture
op	22:40	0:0	6	&
water	22:41	0:0	6	s
op	22:42	0:0	6	->
water	22:44	0:0	6	last_picture
water	22:57	0:0	4	;
if	23:8	26:22	4	(s -> last_picture_ptr -> f -> buf [ 0 ] && ( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> last_picture ,s -> last_picture_ptr ) ) < 0)
cond	23:12	25:63	5	s -> last_picture_ptr -> f -> buf [ 0 ] && ( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> last_picture ,s -> last_picture_ptr ) ) < 0
water	23:12	0:0	6	s
op	23:13	0:0	6	->
water	23:15	0:0	6	last_picture_ptr
op	23:31	0:0	6	->
water	23:33	0:0	6	f
op	23:34	0:0	6	->
water	23:36	0:0	6	buf
op	23:39	0:0	6	[
water	23:40	0:0	6	0
op	23:41	0:0	6	]
op	23:43	0:0	6	&&
water	24:12	0:0	6	(
water	24:13	0:0	6	ret
op	24:17	0:0	6	=
call	24:19	25:58	6	ff_mpeg_ref_picture
arg	24:39	24:47	7	s->avctx
water	24:39	0:0	8	s
op	24:40	0:0	8	->
water	24:42	0:0	8	avctx
arg	24:49	24:65	7	&s->last_picture
op	24:49	0:0	8	&
water	24:50	0:0	8	s
op	24:51	0:0	8	->
water	24:53	0:0	8	last_picture
arg	25:39	25:58	7	s->last_picture_ptr
water	25:39	0:0	8	s
op	25:40	0:0	8	->
water	25:42	0:0	8	last_picture_ptr
water	25:59	0:0	6	)
op	25:61	0:0	6	<
water	25:63	0:0	6	0
stmts	26:12	26:22	5	
return	26:12	26:22	6	ret
water	26:19	0:0	7	ret
water	27:4	0:0	4	}
if	28:4	34:4	2	(s -> next_picture_ptr)
cond	28:8	28:11	3	s -> next_picture_ptr
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	next_picture_ptr
stmts	28:29	34:4	3	
water	28:29	0:0	4	{
call	29:8	29:56	4	ff_mpeg_unref_picture
arg	29:30	29:38	5	s->avctx
water	29:30	0:0	6	s
op	29:31	0:0	6	->
water	29:33	0:0	6	avctx
arg	29:40	29:56	5	&s->next_picture
op	29:40	0:0	6	&
water	29:41	0:0	6	s
op	29:42	0:0	6	->
water	29:44	0:0	6	next_picture
water	29:57	0:0	4	;
if	30:8	33:22	4	(s -> next_picture_ptr -> f -> buf [ 0 ] && ( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> next_picture ,s -> next_picture_ptr ) ) < 0)
cond	30:12	32:63	5	s -> next_picture_ptr -> f -> buf [ 0 ] && ( ret =ff_mpeg_ref_picture (s -> avctx ,& s -> next_picture ,s -> next_picture_ptr ) ) < 0
water	30:12	0:0	6	s
op	30:13	0:0	6	->
water	30:15	0:0	6	next_picture_ptr
op	30:31	0:0	6	->
water	30:33	0:0	6	f
op	30:34	0:0	6	->
water	30:36	0:0	6	buf
op	30:39	0:0	6	[
water	30:40	0:0	6	0
op	30:41	0:0	6	]
op	30:43	0:0	6	&&
water	31:12	0:0	6	(
water	31:13	0:0	6	ret
op	31:17	0:0	6	=
call	31:19	32:58	6	ff_mpeg_ref_picture
arg	31:39	31:47	7	s->avctx
water	31:39	0:0	8	s
op	31:40	0:0	8	->
water	31:42	0:0	8	avctx
arg	31:49	31:65	7	&s->next_picture
op	31:49	0:0	8	&
water	31:50	0:0	8	s
op	31:51	0:0	8	->
water	31:53	0:0	8	next_picture
arg	32:39	32:58	7	s->next_picture_ptr
water	32:39	0:0	8	s
op	32:40	0:0	8	->
water	32:42	0:0	8	next_picture_ptr
water	32:59	0:0	6	)
op	32:61	0:0	6	<
water	32:63	0:0	6	0
stmts	33:12	33:22	5	
return	33:12	33:22	6	ret
water	33:19	0:0	7	ret
water	34:4	0:0	4	}
if	35:4	46:4	2	(s -> picture_structure != PICT_FRAME)
cond	35:8	35:31	3	s -> picture_structure != PICT_FRAME
water	35:8	0:0	4	s
op	35:9	0:0	4	->
water	35:11	0:0	4	picture_structure
op	35:28	0:0	4	!=
water	35:31	0:0	4	PICT_FRAME
stmts	35:43	46:4	3	
water	35:43	0:0	4	{
decl	36:8	36:13	4	int	i
for	37:8	45:8	4	(i = 0 ;i < 4;i ++)
forinit	37:13	37:18	5	i = 0 ;
water	37:13	0:0	6	i
op	37:15	0:0	6	=
water	37:17	0:0	6	0
water	37:18	0:0	6	;
cond	37:20	37:24	5	i < 4
water	37:20	0:0	6	i
op	37:22	0:0	6	<
water	37:24	0:0	6	4
forexpr	37:27	37:28	5	i ++
water	37:27	0:0	6	i
op	37:28	0:0	6	++
stmts	37:32	45:8	5	
water	37:32	0:0	6	{
if	38:12	41:12	6	(s -> picture_structure == PICT_BOTTOM_FIELD)
cond	38:16	38:40	7	s -> picture_structure == PICT_BOTTOM_FIELD
water	38:16	0:0	8	s
op	38:17	0:0	8	->
water	38:19	0:0	8	picture_structure
op	38:37	0:0	8	==
water	38:40	0:0	8	PICT_BOTTOM_FIELD
stmts	38:59	41:12	7	
water	38:59	0:0	8	{
water	39:16	0:0	8	s
op	39:17	0:0	8	->
water	39:19	0:0	8	current_picture
op	39:34	0:0	8	.
water	39:35	0:0	8	f
op	39:36	0:0	8	->
water	39:38	0:0	8	data
op	39:42	0:0	8	[
water	39:43	0:0	8	i
op	39:44	0:0	8	]
op	39:46	0:0	8	+=
water	40:20	0:0	8	s
op	40:21	0:0	8	->
water	40:23	0:0	8	current_picture
op	40:38	0:0	8	.
water	40:39	0:0	8	f
op	40:40	0:0	8	->
water	40:42	0:0	8	linesize
op	40:50	0:0	8	[
water	40:51	0:0	8	i
op	40:52	0:0	8	]
water	40:53	0:0	8	;
water	41:12	0:0	8	}
water	42:12	0:0	6	s
op	42:13	0:0	6	->
water	42:15	0:0	6	current_picture
op	42:30	0:0	6	.
water	42:31	0:0	6	f
op	42:32	0:0	6	->
water	42:34	0:0	6	linesize
op	42:42	0:0	6	[
water	42:43	0:0	6	i
op	42:44	0:0	6	]
op	42:46	0:0	6	*=
water	42:49	0:0	6	2
water	42:50	0:0	6	;
water	43:12	0:0	6	s
op	43:13	0:0	6	->
water	43:15	0:0	6	last_picture
op	43:27	0:0	6	.
water	43:28	0:0	6	f
op	43:29	0:0	6	->
water	43:31	0:0	6	linesize
op	43:39	0:0	6	[
water	43:40	0:0	6	i
op	43:41	0:0	6	]
op	43:46	0:0	6	*=
water	43:49	0:0	6	2
water	43:50	0:0	6	;
water	44:12	0:0	6	s
op	44:13	0:0	6	->
water	44:15	0:0	6	next_picture
op	44:27	0:0	6	.
water	44:28	0:0	6	f
op	44:29	0:0	6	->
water	44:31	0:0	6	linesize
op	44:39	0:0	6	[
water	44:40	0:0	6	i
op	44:41	0:0	6	]
op	44:46	0:0	6	*=
water	44:49	0:0	6	2
water	44:50	0:0	6	;
water	45:8	0:0	6	}
water	46:4	0:0	4	}
if	47:4	50:4	2	(s -> mpeg_quant || s -> codec_id == AV_CODEC_ID_MPEG2VIDEO)
cond	47:8	47:40	3	s -> mpeg_quant || s -> codec_id == AV_CODEC_ID_MPEG2VIDEO
water	47:8	0:0	4	s
op	47:9	0:0	4	->
water	47:11	0:0	4	mpeg_quant
op	47:22	0:0	4	||
water	47:25	0:0	4	s
op	47:26	0:0	4	->
water	47:28	0:0	4	codec_id
op	47:37	0:0	4	==
water	47:40	0:0	4	AV_CODEC_ID_MPEG2VIDEO
stmts	47:64	50:4	3	
water	47:64	0:0	4	{
water	48:8	0:0	4	s
op	48:9	0:0	4	->
water	48:11	0:0	4	dct_unquantize_intra
op	48:32	0:0	4	=
water	48:34	0:0	4	s
op	48:35	0:0	4	->
water	48:37	0:0	4	dct_unquantize_mpeg2_intra
water	48:63	0:0	4	;
water	49:8	0:0	4	s
op	49:9	0:0	4	->
water	49:11	0:0	4	dct_unquantize_inter
op	49:32	0:0	4	=
water	49:34	0:0	4	s
op	49:35	0:0	4	->
water	49:37	0:0	4	dct_unquantize_mpeg2_inter
water	49:63	0:0	4	;
water	50:4	0:0	4	}
else	50:6	53:4	2
stmts	50:11	53:4	3	
if	50:11	53:4	4	(s -> out_format == FMT_H263 || s -> out_format == FMT_H261)
cond	50:15	50:61	5	s -> out_format == FMT_H263 || s -> out_format == FMT_H261
water	50:15	0:0	6	s
op	50:16	0:0	6	->
water	50:18	0:0	6	out_format
op	50:29	0:0	6	==
water	50:32	0:0	6	FMT_H263
op	50:41	0:0	6	||
water	50:44	0:0	6	s
op	50:45	0:0	6	->
water	50:47	0:0	6	out_format
op	50:58	0:0	6	==
water	50:61	0:0	6	FMT_H261
stmts	50:71	53:4	5	
water	50:71	0:0	6	{
water	51:8	0:0	6	s
op	51:9	0:0	6	->
water	51:11	0:0	6	dct_unquantize_intra
op	51:32	0:0	6	=
water	51:34	0:0	6	s
op	51:35	0:0	6	->
water	51:37	0:0	6	dct_unquantize_h263_intra
water	51:62	0:0	6	;
water	52:8	0:0	6	s
op	52:9	0:0	6	->
water	52:11	0:0	6	dct_unquantize_inter
op	52:32	0:0	6	=
water	52:34	0:0	6	s
op	52:35	0:0	6	->
water	52:37	0:0	6	dct_unquantize_h263_inter
water	52:62	0:0	6	;
water	53:4	0:0	6	}
else	53:6	56:4	2
stmts	53:11	56:4	3	
water	53:11	0:0	4	{
water	54:8	0:0	4	s
op	54:9	0:0	4	->
water	54:11	0:0	4	dct_unquantize_intra
op	54:32	0:0	4	=
water	54:34	0:0	4	s
op	54:35	0:0	4	->
water	54:37	0:0	4	dct_unquantize_mpeg1_intra
water	54:63	0:0	4	;
water	55:8	0:0	4	s
op	55:9	0:0	4	->
water	55:11	0:0	4	dct_unquantize_inter
op	55:32	0:0	4	=
water	55:34	0:0	4	s
op	55:35	0:0	4	->
water	55:37	0:0	4	dct_unquantize_mpeg1_inter
water	55:63	0:0	4	;
water	56:4	0:0	4	}
if	57:4	60:4	2	(s -> dct_error_sum)
cond	57:8	57:11	3	s -> dct_error_sum
water	57:8	0:0	4	s
op	57:9	0:0	4	->
water	57:11	0:0	4	dct_error_sum
stmts	57:26	60:4	3	
water	57:26	0:0	4	{
call	58:8	58:59	4	av_assert2
arg	58:19	58:59	5	s->avctx->noise_reduction&&s->encoding
water	58:19	0:0	6	s
op	58:20	0:0	6	->
water	58:22	0:0	6	avctx
op	58:27	0:0	6	->
water	58:29	0:0	6	noise_reduction
op	58:45	0:0	6	&&
water	58:48	0:0	6	s
op	58:49	0:0	6	->
water	58:51	0:0	6	encoding
water	58:60	0:0	4	;
call	59:8	59:32	4	update_noise_reduction
arg	59:31	59:32	5	s
water	59:31	0:0	6	s
water	59:33	0:0	4	;
water	60:4	0:0	4	}
return	61:4	61:12	2	0
water	61:11	0:0	3	0
