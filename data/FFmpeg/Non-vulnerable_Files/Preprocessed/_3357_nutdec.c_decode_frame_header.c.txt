func	1:0	75:0	0	static int	decode_frame_header
params	1:30	0:0	1	
param	1:31	1:46	2	NUTContext *	nut
param	1:48	1:60	2	int64_t *	pts
param	1:62	1:76	2	int *	stream_id
param	2:31	2:50	2	uint8_t *	header_idx
param	2:52	2:66	2	int	frame_code
stmnts	0:0	74:14	1	
decl	4:4	4:33	2	AVFormatContext	*s
op	4:23	0:0	2	=
water	4:25	0:0	2	nut
op	4:28	0:0	2	->
water	4:30	0:0	2	avf
decl	5:4	5:30	2	AVIOContext	*bc
op	5:23	0:0	2	=
water	5:25	0:0	2	s
op	5:26	0:0	2	->
water	5:28	0:0	2	pb
decl	6:4	6:22	2	StreamContext	*stc
decl	7:4	7:64	2	int	size
water	7:12	0:0	2	,
decl	7:4	7:64	2	int	flags
water	7:19	0:0	2	,
decl	7:4	7:64	2	int	size_mul
water	7:29	0:0	2	,
decl	7:4	7:64	2	int	pts_delta
water	7:40	0:0	2	,
decl	7:4	7:64	2	int	i
water	7:43	0:0	2	,
decl	7:4	7:64	2	int	reserved_count
water	7:59	0:0	2	,
decl	7:4	7:64	2	int	ret
decl	8:4	8:16	2	uint64_t	tmp
if	9:4	15:4	2	(! ( nut -> flags & NUT_PIPE ) &&avio_tell (bc ) > nut -> last_syncpoint_pos + nut -> max_distance)
cond	9:8	10:55	3	! ( nut -> flags & NUT_PIPE ) &&avio_tell (bc ) > nut -> last_syncpoint_pos + nut -> max_distance
op	9:8	0:0	4	!
water	9:9	0:0	4	(
water	9:10	0:0	4	nut
op	9:13	0:0	4	->
water	9:15	0:0	4	flags
op	9:21	0:0	4	&
water	9:23	0:0	4	NUT_PIPE
water	9:31	0:0	4	)
op	9:33	0:0	4	&&
call	10:8	10:20	4	avio_tell
arg	10:18	10:20	5	bc
water	10:18	0:0	6	bc
op	10:22	0:0	4	>
water	10:24	0:0	4	nut
op	10:27	0:0	4	->
water	10:29	0:0	4	last_syncpoint_pos
op	10:48	0:0	4	+
water	10:50	0:0	4	nut
op	10:53	0:0	4	->
water	10:55	0:0	4	max_distance
stmts	10:69	15:4	3	
water	10:69	0:0	4	{
call	11:8	13:72	4	av_log
arg	11:15	11:16	5	s
water	11:15	0:0	6	s
arg	11:18	11:30	5	AV_LOG_ERROR
water	11:18	0:0	6	AV_LOG_ERROR
arg	12:15	12:79	5	"Last frame must have been damaged %"PRId64" > %"PRId64" + %d\n"
water	12:15	0:0	6	"Last frame must have been damaged %"
water	12:52	0:0	6	PRId64
water	12:58	0:0	6	" > %"
water	12:64	0:0	6	PRId64
water	12:70	0:0	6	" + %d\n"
arg	13:15	13:28	5	avio_tell(bc)
call	13:15	13:27	6	avio_tell
arg	13:25	13:27	7	bc
water	13:25	0:0	8	bc
arg	13:30	13:53	5	nut->last_syncpoint_pos
water	13:30	0:0	6	nut
op	13:33	0:0	6	->
water	13:35	0:0	6	last_syncpoint_pos
arg	13:55	13:72	5	nut->max_distance
water	13:55	0:0	6	nut
op	13:58	0:0	6	->
water	13:60	0:0	6	max_distance
water	13:73	0:0	4	;
return	14:8	14:34	4	AVERROR_INVALIDDATA
water	14:15	0:0	5	AVERROR_INVALIDDATA
water	15:4	0:0	4	}
water	16:4	0:0	2	flags
op	16:19	0:0	2	=
water	16:21	0:0	2	nut
op	16:24	0:0	2	->
water	16:26	0:0	2	frame_code
op	16:36	0:0	2	[
water	16:37	0:0	2	frame_code
op	16:47	0:0	2	]
op	16:48	0:0	2	.
water	16:49	0:0	2	flags
water	16:54	0:0	2	;
water	17:4	0:0	2	size_mul
op	17:19	0:0	2	=
water	17:21	0:0	2	nut
op	17:24	0:0	2	->
water	17:26	0:0	2	frame_code
op	17:36	0:0	2	[
water	17:37	0:0	2	frame_code
op	17:47	0:0	2	]
op	17:48	0:0	2	.
water	17:49	0:0	2	size_mul
water	17:57	0:0	2	;
water	18:4	0:0	2	size
op	18:19	0:0	2	=
water	18:21	0:0	2	nut
op	18:24	0:0	2	->
water	18:26	0:0	2	frame_code
op	18:36	0:0	2	[
water	18:37	0:0	2	frame_code
op	18:47	0:0	2	]
op	18:48	0:0	2	.
water	18:49	0:0	2	size_lsb
water	18:57	0:0	2	;
op	19:4	0:0	2	*
water	19:5	0:0	2	stream_id
op	19:19	0:0	2	=
water	19:21	0:0	2	nut
op	19:24	0:0	2	->
water	19:26	0:0	2	frame_code
op	19:36	0:0	2	[
water	19:37	0:0	2	frame_code
op	19:47	0:0	2	]
op	19:48	0:0	2	.
water	19:49	0:0	2	stream_id
water	19:58	0:0	2	;
water	20:4	0:0	2	pts_delta
op	20:19	0:0	2	=
water	20:21	0:0	2	nut
op	20:24	0:0	2	->
water	20:26	0:0	2	frame_code
op	20:36	0:0	2	[
water	20:37	0:0	2	frame_code
op	20:47	0:0	2	]
op	20:48	0:0	2	.
water	20:49	0:0	2	pts_delta
water	20:58	0:0	2	;
water	21:4	0:0	2	reserved_count
op	21:19	0:0	2	=
water	21:21	0:0	2	nut
op	21:24	0:0	2	->
water	21:26	0:0	2	frame_code
op	21:36	0:0	2	[
water	21:37	0:0	2	frame_code
op	21:47	0:0	2	]
op	21:48	0:0	2	.
water	21:49	0:0	2	reserved_count
water	21:63	0:0	2	;
op	22:4	0:0	2	*
water	22:5	0:0	2	header_idx
op	22:19	0:0	2	=
water	22:21	0:0	2	nut
op	22:24	0:0	2	->
water	22:26	0:0	2	frame_code
op	22:36	0:0	2	[
water	22:37	0:0	2	frame_code
op	22:47	0:0	2	]
op	22:48	0:0	2	.
water	22:49	0:0	2	header_idx
water	22:59	0:0	2	;
if	23:4	24:34	2	(flags & FLAG_INVALID)
cond	23:8	23:16	3	flags & FLAG_INVALID
water	23:8	0:0	4	flags
op	23:14	0:0	4	&
water	23:16	0:0	4	FLAG_INVALID
stmts	24:8	24:34	3	
return	24:8	24:34	4	AVERROR_INVALIDDATA
water	24:15	0:0	5	AVERROR_INVALIDDATA
if	25:4	26:37	2	(flags & FLAG_CODED)
cond	25:8	25:16	3	flags & FLAG_CODED
water	25:8	0:0	4	flags
op	25:14	0:0	4	&
water	25:16	0:0	4	FLAG_CODED
stmts	26:8	26:37	3	
water	26:8	0:0	4	flags
op	26:14	0:0	4	^=
call	26:17	26:36	4	ffio_read_varlen
arg	26:34	26:36	5	bc
water	26:34	0:0	6	bc
water	26:37	0:0	4	;
if	27:4	29:4	2	(flags & FLAG_STREAM_ID)
cond	27:8	27:16	3	flags & FLAG_STREAM_ID
water	27:8	0:0	4	flags
op	27:14	0:0	4	&
water	27:16	0:0	4	FLAG_STREAM_ID
stmts	27:32	29:4	3	
water	27:32	0:0	4	{
call	28:8	28:45	4	GET_V
arg	28:14	28:24	5	*stream_id
op	28:14	0:0	6	*
water	28:15	0:0	6	stream_id
arg	28:26	28:45	5	tmp<s->nb_streams
water	28:26	0:0	6	tmp
op	28:30	0:0	6	<
water	28:32	0:0	6	s
op	28:33	0:0	6	->
water	28:35	0:0	6	nb_streams
water	28:46	0:0	4	;
water	29:4	0:0	4	}
water	30:4	0:0	2	stc
op	30:8	0:0	2	=
op	30:10	0:0	2	&
water	30:11	0:0	2	nut
op	30:14	0:0	2	->
water	30:16	0:0	2	stream
op	30:22	0:0	2	[
op	30:23	0:0	2	*
water	30:24	0:0	2	stream_id
op	30:33	0:0	2	]
water	30:34	0:0	2	;
if	31:4	38:4	2	(flags & FLAG_CODED_PTS)
cond	31:8	31:16	3	flags & FLAG_CODED_PTS
water	31:8	0:0	4	flags
op	31:14	0:0	4	&
water	31:16	0:0	4	FLAG_CODED_PTS
stmts	31:32	38:4	3	
water	31:32	0:0	4	{
decl	32:8	32:44	4	int	coded_pts
op	32:22	0:0	4	=
call	32:24	32:43	5	ffio_read_varlen
arg	32:41	32:43	6	bc
water	32:41	0:0	7	bc
if	34:8	36:8	4	(coded_pts < ( 1 << stc -> msb_pts_shift ))
cond	34:12	34:48	5	coded_pts < ( 1 << stc -> msb_pts_shift )
water	34:12	0:0	6	coded_pts
op	34:22	0:0	6	<
water	34:24	0:0	6	(
water	34:25	0:0	6	1
op	34:27	0:0	6	<<
water	34:30	0:0	6	stc
op	34:33	0:0	6	->
water	34:35	0:0	6	msb_pts_shift
water	34:48	0:0	6	)
stmts	34:51	36:8	5	
water	34:51	0:0	6	{
op	35:12	0:0	6	*
water	35:13	0:0	6	pts
op	35:17	0:0	6	=
call	35:19	35:45	6	ff_lsb2full
arg	35:31	35:34	7	stc
water	35:31	0:0	8	stc
arg	35:36	35:45	7	coded_pts
water	35:36	0:0	8	coded_pts
water	35:46	0:0	6	;
water	36:8	0:0	6	}
else	36:10	37:58	4
stmts	37:12	37:58	5	
op	37:12	0:0	6	*
water	37:13	0:0	6	pts
op	37:17	0:0	6	=
water	37:19	0:0	6	coded_pts
op	37:29	0:0	6	-
water	37:31	0:0	6	(
water	37:32	0:0	6	1
water	37:33	0:0	6	LL
op	37:36	0:0	6	<<
water	37:39	0:0	6	stc
op	37:42	0:0	6	->
water	37:44	0:0	6	msb_pts_shift
water	37:57	0:0	6	)
water	37:58	0:0	6	;
water	38:4	0:0	4	}
else	38:6	39:40	2
stmts	39:8	39:40	3	
op	39:8	0:0	4	*
water	39:9	0:0	4	pts
op	39:13	0:0	4	=
water	39:15	0:0	4	stc
op	39:18	0:0	4	->
water	39:20	0:0	4	last_pts
op	39:29	0:0	4	+
water	39:31	0:0	4	pts_delta
water	39:40	0:0	4	;
if	40:4	41:47	2	(flags & FLAG_SIZE_MSB)
cond	40:8	40:16	3	flags & FLAG_SIZE_MSB
water	40:8	0:0	4	flags
op	40:14	0:0	4	&
water	40:16	0:0	4	FLAG_SIZE_MSB
stmts	41:8	41:47	3	
water	41:8	0:0	4	size
op	41:13	0:0	4	+=
water	41:16	0:0	4	size_mul
call	41:25	41:46	4	*ffio_read_varlen
arg	41:44	41:46	5	bc
water	41:44	0:0	6	bc
water	41:47	0:0	4	;
if	42:4	43:17	2	(flags & FLAG_MATCH_TIME)
cond	42:8	42:16	3	flags & FLAG_MATCH_TIME
water	42:8	0:0	4	flags
op	42:14	0:0	4	&
water	42:16	0:0	4	FLAG_MATCH_TIME
stmts	43:8	43:17	3	
call	43:8	43:16	4	get_s
arg	43:14	43:16	5	bc
water	43:14	0:0	6	bc
water	43:17	0:0	4	;
if	44:4	45:42	2	(flags & FLAG_HEADER_IDX)
cond	44:8	44:16	3	flags & FLAG_HEADER_IDX
water	44:8	0:0	4	flags
op	44:14	0:0	4	&
water	44:16	0:0	4	FLAG_HEADER_IDX
stmts	45:8	45:42	3	
op	45:8	0:0	4	*
water	45:9	0:0	4	header_idx
op	45:20	0:0	4	=
call	45:22	45:41	4	ffio_read_varlen
arg	45:39	45:41	5	bc
water	45:39	0:0	6	bc
water	45:42	0:0	4	;
if	46:4	47:45	2	(flags & FLAG_RESERVED)
cond	46:8	46:16	3	flags & FLAG_RESERVED
water	46:8	0:0	4	flags
op	46:14	0:0	4	&
water	46:16	0:0	4	FLAG_RESERVED
stmts	47:8	47:45	3	
water	47:8	0:0	4	reserved_count
op	47:23	0:0	4	=
call	47:25	47:44	4	ffio_read_varlen
arg	47:42	47:44	5	bc
water	47:42	0:0	6	bc
water	47:45	0:0	4	;
for	48:4	54:4	2	(i = 0 ;i < reserved_count;i ++)
forinit	48:9	48:14	3	i = 0 ;
water	48:9	0:0	4	i
op	48:11	0:0	4	=
water	48:13	0:0	4	0
water	48:14	0:0	4	;
cond	48:16	48:20	3	i < reserved_count
water	48:16	0:0	4	i
op	48:18	0:0	4	<
water	48:20	0:0	4	reserved_count
forexpr	48:36	48:37	3	i ++
water	48:36	0:0	4	i
op	48:37	0:0	4	++
stmts	48:41	54:4	3	
water	48:41	0:0	4	{
if	49:8	52:8	4	(bc -> eof_reached)
cond	49:12	49:16	5	bc -> eof_reached
water	49:12	0:0	6	bc
op	49:14	0:0	6	->
water	49:16	0:0	6	eof_reached
stmts	49:29	52:8	5	
water	49:29	0:0	6	{
call	50:12	50:79	6	av_log
arg	50:19	50:20	7	s
water	50:19	0:0	8	s
arg	50:22	50:34	7	AV_LOG_ERROR
water	50:22	0:0	8	AV_LOG_ERROR
arg	50:36	50:79	7	"reached EOF while decoding frame header\n"
water	50:36	0:0	8	"reached EOF while decoding frame header\n"
water	50:80	0:0	6	;
return	51:12	51:38	6	AVERROR_INVALIDDATA
water	51:19	0:0	7	AVERROR_INVALIDDATA
water	52:8	0:0	6	}
call	53:8	53:27	4	ffio_read_varlen
arg	53:25	53:27	5	bc
water	53:25	0:0	6	bc
water	53:28	0:0	4	;
water	54:4	0:0	4	}
if	55:4	58:4	2	(* header_idx >= ( unsigned ) nut -> header_count)
cond	55:8	55:38	3	* header_idx >= ( unsigned ) nut -> header_count
op	55:8	0:0	4	*
water	55:9	0:0	4	header_idx
op	55:20	0:0	4	>=
water	55:23	0:0	4	(
water	55:24	0:0	4	unsigned
water	55:32	0:0	4	)
water	55:33	0:0	4	nut
op	55:36	0:0	4	->
water	55:38	0:0	4	header_count
stmts	55:52	58:4	3	
water	55:52	0:0	4	{
call	56:8	56:54	4	av_log
arg	56:15	56:16	5	s
water	56:15	0:0	6	s
arg	56:18	56:30	5	AV_LOG_ERROR
water	56:18	0:0	6	AV_LOG_ERROR
arg	56:32	56:54	5	"header_idx invalid\n"
water	56:32	0:0	6	"header_idx invalid\n"
water	56:55	0:0	4	;
return	57:8	57:34	4	AVERROR_INVALIDDATA
water	57:15	0:0	5	AVERROR_INVALIDDATA
water	58:4	0:0	4	}
if	59:4	60:23	2	(size > 4096)
cond	59:8	59:15	3	size > 4096
water	59:8	0:0	4	size
op	59:13	0:0	4	>
water	59:15	0:0	4	4096
stmts	60:8	60:23	3	
op	60:8	0:0	4	*
water	60:9	0:0	4	header_idx
op	60:20	0:0	4	=
water	60:22	0:0	4	0
water	60:23	0:0	4	;
water	61:4	0:0	2	size
op	61:9	0:0	2	-=
water	61:12	0:0	2	nut
op	61:15	0:0	2	->
water	61:17	0:0	2	header_len
op	61:27	0:0	2	[
op	61:28	0:0	2	*
water	61:29	0:0	2	header_idx
op	61:39	0:0	2	]
water	61:40	0:0	2	;
if	62:4	64:4	2	(flags & FLAG_CHECKSUM)
cond	62:8	62:16	3	flags & FLAG_CHECKSUM
water	62:8	0:0	4	flags
op	62:14	0:0	4	&
water	62:16	0:0	4	FLAG_CHECKSUM
stmts	62:31	64:4	3	
water	62:31	0:0	4	{
call	63:8	63:20	4	avio_rb32
arg	63:18	63:20	5	bc
water	63:18	0:0	6	bc
water	63:21	0:0	4	;
water	64:4	0:0	4	}
else	64:6	69:4	2
stmts	64:11	69:4	3	
if	64:11	69:4	4	(! ( nut -> flags & NUT_PIPE ) && size > 2 * nut -> max_distance ||FFABS (stc -> last_pts - * pts ) > stc -> max_pts_distance)
cond	64:15	66:50	5	! ( nut -> flags & NUT_PIPE ) && size > 2 * nut -> max_distance ||FFABS (stc -> last_pts - * pts ) > stc -> max_pts_distance
op	64:15	0:0	6	!
water	64:16	0:0	6	(
water	64:17	0:0	6	nut
op	64:20	0:0	6	->
water	64:22	0:0	6	flags
op	64:28	0:0	6	&
water	64:30	0:0	6	NUT_PIPE
water	64:38	0:0	6	)
op	64:40	0:0	6	&&
water	65:15	0:0	6	size
op	65:20	0:0	6	>
water	65:22	0:0	6	2
op	65:24	0:0	6	*
water	65:26	0:0	6	nut
op	65:29	0:0	6	->
water	65:31	0:0	6	max_distance
op	65:44	0:0	6	||
call	66:15	66:41	6	FFABS
arg	66:21	66:41	7	stc->last_pts-*pts
water	66:21	0:0	8	stc
op	66:24	0:0	8	->
water	66:26	0:0	8	last_pts
op	66:35	0:0	8	-
op	66:37	0:0	8	*
water	66:38	0:0	8	pts
op	66:43	0:0	6	>
water	66:45	0:0	6	stc
op	66:48	0:0	6	->
water	66:50	0:0	6	max_pts_distance
stmts	66:68	69:4	5	
water	66:68	0:0	6	{
call	67:8	67:78	6	av_log
arg	67:15	67:16	7	s
water	67:15	0:0	8	s
arg	67:18	67:30	7	AV_LOG_ERROR
water	67:18	0:0	8	AV_LOG_ERROR
arg	67:32	67:78	7	"frame size > 2max_distance and no checksum\n"
water	67:32	0:0	8	"frame size > 2max_distance and no checksum\n"
water	67:79	0:0	6	;
return	68:8	68:34	6	AVERROR_INVALIDDATA
water	68:15	0:0	7	AVERROR_INVALIDDATA
water	69:4	0:0	6	}
water	70:4	0:0	2	stc
op	70:7	0:0	2	->
water	70:9	0:0	2	last_pts
op	70:20	0:0	2	=
op	70:22	0:0	2	*
water	70:23	0:0	2	pts
water	70:26	0:0	2	;
water	71:4	0:0	2	stc
op	71:7	0:0	2	->
water	71:9	0:0	2	last_flags
op	71:20	0:0	2	=
water	71:22	0:0	2	flags
water	71:27	0:0	2	;
return	72:4	72:15	2	size
water	72:11	0:0	3	size
label	73:0	73:4	2	fail :
return	74:4	74:14	2	ret
water	74:11	0:0	3	ret
