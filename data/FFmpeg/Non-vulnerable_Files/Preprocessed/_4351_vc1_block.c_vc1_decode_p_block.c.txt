func	1:0	153:0	0	static int	vc1_decode_p_block
params	1:29	0:0	1	
param	1:30	1:43	2	VC1Context *	v
param	1:45	1:62	2	int16_t	block[64]
param	1:64	1:69	2	int	n
param	2:30	2:40	2	int	mquant
param	2:42	2:50	2	int	ttmb
param	2:52	2:67	2	int	first_block
param	3:30	3:42	2	uint8_t *	dst
param	3:44	3:56	2	int	linesize
param	3:58	3:72	2	int	skip_block
param	4:30	4:43	2	int *	ttmb_out
stmnts	0:0	152:14	1	
decl	6:4	6:29	2	MpegEncContext	*s
op	6:22	0:0	2	=
op	6:24	0:0	2	&
water	6:25	0:0	2	v
op	6:26	0:0	2	->
water	6:28	0:0	2	s
decl	7:4	7:30	2	GetBitContext	*gb
op	7:22	0:0	2	=
op	7:24	0:0	2	&
water	7:25	0:0	2	s
op	7:26	0:0	2	->
water	7:28	0:0	2	gb
decl	8:4	8:12	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:12	2	int	j
decl	9:4	9:21	2	int	subblkpat
op	9:18	0:0	2	=
water	9:20	0:0	2	0
decl	10:4	10:42	2	int	scale
water	10:13	0:0	2	,
decl	10:4	10:42	2	int	off
water	10:18	0:0	2	,
decl	10:4	10:42	2	int	idx
water	10:23	0:0	2	,
decl	10:4	10:42	2	int	last
water	10:29	0:0	2	,
decl	10:4	10:42	2	int	skip
water	10:35	0:0	2	,
decl	10:4	10:42	2	int	value
decl	11:4	11:24	2	int	ttblk
op	11:14	0:0	2	=
water	11:16	0:0	2	ttmb
op	11:21	0:0	2	&
water	11:23	0:0	2	7
decl	12:4	12:15	2	int	pat
op	12:12	0:0	2	=
water	12:14	0:0	2	0
call	13:4	13:29	2	s->bdsp.clear_block
arg	13:24	13:29	3	block
water	13:24	0:0	4	block
water	13:30	0:0	2	;
if	14:4	16:4	2	(ttmb == - 1)
cond	14:8	14:17	3	ttmb == - 1
water	14:8	0:0	4	ttmb
op	14:13	0:0	4	==
op	14:16	0:0	4	-
water	14:17	0:0	4	1
stmts	14:20	16:4	3	
water	14:20	0:0	4	{
water	15:8	0:0	4	ttblk
op	15:14	0:0	4	=
water	15:16	0:0	4	ff_vc1_ttblk_to_tt
op	15:34	0:0	4	[
water	15:35	0:0	4	v
op	15:36	0:0	4	->
water	15:38	0:0	4	tt_index
op	15:46	0:0	4	]
op	15:47	0:0	4	[
call	15:48	15:119	4	get_vlc2
arg	15:57	15:59	5	gb
water	15:57	0:0	6	gb
arg	15:61	15:96	5	ff_vc1_ttblk_vlc[v->tt_index].table
water	15:61	0:0	6	ff_vc1_ttblk_vlc
op	15:77	0:0	6	[
water	15:78	0:0	6	v
op	15:79	0:0	6	->
water	15:81	0:0	6	tt_index
op	15:89	0:0	6	]
op	15:90	0:0	6	.
water	15:91	0:0	6	table
arg	15:98	15:116	5	VC1_TTBLK_VLC_BITS
water	15:98	0:0	6	VC1_TTBLK_VLC_BITS
arg	15:118	15:119	5	1
water	15:118	0:0	6	1
op	15:120	0:0	4	]
water	15:121	0:0	4	;
water	16:4	0:0	4	}
if	17:4	19:4	2	(ttblk == TT_4X4)
cond	17:8	17:17	3	ttblk == TT_4X4
water	17:8	0:0	4	ttblk
op	17:14	0:0	4	==
water	17:17	0:0	4	TT_4X4
stmts	17:25	19:4	3	
water	17:25	0:0	4	{
water	18:8	0:0	4	subblkpat
op	18:18	0:0	4	=
op	18:20	0:0	4	~
water	18:21	0:0	4	(
call	18:22	18:101	4	get_vlc2
arg	18:31	18:33	5	gb
water	18:31	0:0	6	gb
arg	18:35	18:74	5	ff_vc1_subblkpat_vlc[v->tt_index].table
water	18:35	0:0	6	ff_vc1_subblkpat_vlc
op	18:55	0:0	6	[
water	18:56	0:0	6	v
op	18:57	0:0	6	->
water	18:59	0:0	6	tt_index
op	18:67	0:0	6	]
op	18:68	0:0	6	.
water	18:69	0:0	6	table
arg	18:76	18:98	5	VC1_SUBBLKPAT_VLC_BITS
water	18:76	0:0	6	VC1_SUBBLKPAT_VLC_BITS
arg	18:100	18:101	5	1
water	18:100	0:0	6	1
op	18:103	0:0	4	+
water	18:105	0:0	4	1
water	18:106	0:0	4	)
water	18:107	0:0	4	;
water	19:4	0:0	4	}
if	20:4	30:4	2	(( ttblk != TT_8X8 && ttblk != TT_4X4 ) && ( ( v -> ttmbf || ( ttmb != - 1 && ( ttmb & 8 ) && ! first_block ) ) || ( ! v -> res_rtm_flag && ! first_block ) ))
cond	20:8	22:49	3	( ttblk != TT_8X8 && ttblk != TT_4X4 ) && ( ( v -> ttmbf || ( ttmb != - 1 && ( ttmb & 8 ) && ! first_block ) ) || ( ! v -> res_rtm_flag && ! first_block ) )
water	20:8	0:0	4	(
water	20:9	0:0	4	ttblk
op	20:15	0:0	4	!=
water	20:18	0:0	4	TT_8X8
op	20:25	0:0	4	&&
water	20:28	0:0	4	ttblk
op	20:34	0:0	4	!=
water	20:37	0:0	4	TT_4X4
water	20:43	0:0	4	)
op	21:8	0:0	4	&&
water	21:11	0:0	4	(
water	21:12	0:0	4	(
water	21:13	0:0	4	v
op	21:14	0:0	4	->
water	21:16	0:0	4	ttmbf
op	21:22	0:0	4	||
water	21:25	0:0	4	(
water	21:26	0:0	4	ttmb
op	21:31	0:0	4	!=
op	21:34	0:0	4	-
water	21:35	0:0	4	1
op	21:37	0:0	4	&&
water	21:40	0:0	4	(
water	21:41	0:0	4	ttmb
op	21:46	0:0	4	&
water	21:48	0:0	4	8
water	21:49	0:0	4	)
op	21:51	0:0	4	&&
op	21:54	0:0	4	!
water	21:55	0:0	4	first_block
water	21:66	0:0	4	)
water	21:67	0:0	4	)
op	22:12	0:0	4	||
water	22:15	0:0	4	(
op	22:16	0:0	4	!
water	22:17	0:0	4	v
op	22:18	0:0	4	->
water	22:20	0:0	4	res_rtm_flag
op	22:33	0:0	4	&&
op	22:36	0:0	4	!
water	22:37	0:0	4	first_block
water	22:48	0:0	4	)
water	22:49	0:0	4	)
stmts	22:52	30:4	3	
water	22:52	0:0	4	{
water	23:8	0:0	4	subblkpat
op	23:18	0:0	4	=
call	23:20	23:32	4	decode012
arg	23:30	23:32	5	gb
water	23:30	0:0	6	gb
water	23:33	0:0	4	;
if	24:8	25:26	4	(subblkpat)
cond	24:12	24:12	5	subblkpat
water	24:12	0:0	6	subblkpat
stmts	25:12	25:26	5	
water	25:12	0:0	6	subblkpat
op	25:22	0:0	6	^=
water	25:25	0:0	6	3
water	25:26	0:0	6	;
if	26:8	27:26	4	(ttblk == TT_8X4_TOP || ttblk == TT_8X4_BOTTOM)
cond	26:12	26:44	5	ttblk == TT_8X4_TOP || ttblk == TT_8X4_BOTTOM
water	26:12	0:0	6	ttblk
op	26:18	0:0	6	==
water	26:21	0:0	6	TT_8X4_TOP
op	26:32	0:0	6	||
water	26:35	0:0	6	ttblk
op	26:41	0:0	6	==
water	26:44	0:0	6	TT_8X4_BOTTOM
stmts	27:12	27:26	5	
water	27:12	0:0	6	ttblk
op	27:18	0:0	6	=
water	27:20	0:0	6	TT_8X4
water	27:26	0:0	6	;
if	28:8	29:26	4	(ttblk == TT_4X8_RIGHT || ttblk == TT_4X8_LEFT)
cond	28:12	28:46	5	ttblk == TT_4X8_RIGHT || ttblk == TT_4X8_LEFT
water	28:12	0:0	6	ttblk
op	28:18	0:0	6	==
water	28:21	0:0	6	TT_4X8_RIGHT
op	28:34	0:0	6	||
water	28:37	0:0	6	ttblk
op	28:43	0:0	6	==
water	28:46	0:0	6	TT_4X8_LEFT
stmts	29:12	29:26	5	
water	29:12	0:0	6	ttblk
op	29:18	0:0	6	=
water	29:20	0:0	6	TT_4X8
water	29:26	0:0	6	;
water	30:4	0:0	4	}
water	31:4	0:0	2	scale
op	31:10	0:0	2	=
water	31:12	0:0	2	2
op	31:14	0:0	2	*
water	31:16	0:0	2	mquant
op	31:23	0:0	2	+
water	31:25	0:0	2	(
water	31:26	0:0	2	(
water	31:27	0:0	2	v
op	31:28	0:0	2	->
water	31:30	0:0	2	pq
op	31:33	0:0	2	==
water	31:36	0:0	2	mquant
water	31:42	0:0	2	)
water	31:44	0:0	2	?
water	31:46	0:0	2	v
op	31:47	0:0	2	->
water	31:49	0:0	2	halfpq
water	31:56	0:0	2	:
water	31:58	0:0	2	0
water	31:59	0:0	2	)
water	31:60	0:0	2	;
if	33:4	36:4	2	(ttblk == TT_8X4_TOP || ttblk == TT_8X4_BOTTOM)
cond	33:8	33:40	3	ttblk == TT_8X4_TOP || ttblk == TT_8X4_BOTTOM
water	33:8	0:0	4	ttblk
op	33:14	0:0	4	==
water	33:17	0:0	4	TT_8X4_TOP
op	33:28	0:0	4	||
water	33:31	0:0	4	ttblk
op	33:37	0:0	4	==
water	33:40	0:0	4	TT_8X4_BOTTOM
stmts	33:55	36:4	3	
water	33:55	0:0	4	{
water	34:8	0:0	4	subblkpat
op	34:18	0:0	4	=
water	34:20	0:0	4	2
op	34:22	0:0	4	-
water	34:24	0:0	4	(
water	34:25	0:0	4	ttblk
op	34:31	0:0	4	==
water	34:34	0:0	4	TT_8X4_TOP
water	34:44	0:0	4	)
water	34:45	0:0	4	;
water	35:8	0:0	4	ttblk
op	35:18	0:0	4	=
water	35:20	0:0	4	TT_8X4
water	35:26	0:0	4	;
water	36:4	0:0	4	}
if	37:4	40:4	2	(ttblk == TT_4X8_RIGHT || ttblk == TT_4X8_LEFT)
cond	37:8	37:42	3	ttblk == TT_4X8_RIGHT || ttblk == TT_4X8_LEFT
water	37:8	0:0	4	ttblk
op	37:14	0:0	4	==
water	37:17	0:0	4	TT_4X8_RIGHT
op	37:30	0:0	4	||
water	37:33	0:0	4	ttblk
op	37:39	0:0	4	==
water	37:42	0:0	4	TT_4X8_LEFT
stmts	37:55	40:4	3	
water	37:55	0:0	4	{
water	38:8	0:0	4	subblkpat
op	38:18	0:0	4	=
water	38:20	0:0	4	2
op	38:22	0:0	4	-
water	38:24	0:0	4	(
water	38:25	0:0	4	ttblk
op	38:31	0:0	4	==
water	38:34	0:0	4	TT_4X8_LEFT
water	38:45	0:0	4	)
water	38:46	0:0	4	;
water	39:8	0:0	4	ttblk
op	39:18	0:0	4	=
water	39:20	0:0	4	TT_4X8
water	39:26	0:0	4	;
water	40:4	0:0	4	}
switch	41:4	149:4	2	(ttblk)
cond	41:12	41:12	3	ttblk
water	41:12	0:0	4	ttblk
stmts	41:19	149:4	3	
water	41:19	0:0	4	{
label	42:4	42:15	4	case TT_8X8 :
water	43:8	0:0	4	pat
op	43:13	0:0	4	=
water	43:15	0:0	4	0
water	43:16	0:0	4	xF
water	43:18	0:0	4	;
water	44:8	0:0	4	i
op	44:13	0:0	4	=
water	44:15	0:0	4	0
water	44:16	0:0	4	;
water	45:8	0:0	4	last
op	45:13	0:0	4	=
water	45:15	0:0	4	0
water	45:16	0:0	4	;
while	46:8	58:8	4	(! last)
cond	46:15	46:16	5	! last
op	46:15	0:0	6	!
water	46:16	0:0	6	last
stmts	46:22	58:8	5	
water	46:22	0:0	6	{
call	47:12	47:70	6	vc1_decode_ac_coeff
arg	47:32	47:33	7	v
water	47:32	0:0	8	v
arg	47:35	47:40	7	&last
op	47:35	0:0	8	&
water	47:36	0:0	8	last
arg	47:42	47:47	7	&skip
op	47:42	0:0	8	&
water	47:43	0:0	8	skip
arg	47:49	47:55	7	&value
op	47:49	0:0	8	&
water	47:50	0:0	8	value
arg	47:57	47:70	7	v->codingset2
water	47:57	0:0	8	v
op	47:58	0:0	8	->
water	47:60	0:0	8	codingset2
water	47:71	0:0	6	;
water	48:12	0:0	6	i
op	48:14	0:0	6	+=
water	48:17	0:0	6	skip
water	48:21	0:0	6	;
if	49:12	50:21	6	(i > 63)
cond	49:16	49:20	7	i > 63
water	49:16	0:0	8	i
op	49:18	0:0	8	>
water	49:20	0:0	8	63
stmts	50:16	50:21	7	
break	50:16	50:21	8	
if	51:12	52:39	6	(! v -> fcm)
cond	51:16	51:20	7	! v -> fcm
op	51:16	0:0	8	!
water	51:17	0:0	8	v
op	51:18	0:0	8	->
water	51:20	0:0	8	fcm
stmts	52:16	52:39	7	
water	52:16	0:0	8	idx
op	52:20	0:0	8	=
water	52:22	0:0	8	v
op	52:23	0:0	8	->
water	52:25	0:0	8	zz_8x8
op	52:31	0:0	8	[
water	52:32	0:0	8	0
op	52:33	0:0	8	]
op	52:34	0:0	8	[
water	52:35	0:0	8	i
op	52:36	0:0	8	++
op	52:38	0:0	8	]
water	52:39	0:0	8	;
else	53:12	54:37	6
stmts	54:16	54:37	7	
water	54:16	0:0	8	idx
op	54:20	0:0	8	=
water	54:22	0:0	8	v
op	54:23	0:0	8	->
water	54:25	0:0	8	zzi_8x8
op	54:32	0:0	8	[
water	54:33	0:0	8	i
op	54:34	0:0	8	++
op	54:36	0:0	8	]
water	54:37	0:0	8	;
water	55:12	0:0	6	block
op	55:17	0:0	6	[
water	55:18	0:0	6	idx
op	55:21	0:0	6	]
op	55:23	0:0	6	=
water	55:25	0:0	6	value
op	55:31	0:0	6	*
water	55:33	0:0	6	scale
water	55:38	0:0	6	;
if	56:12	57:65	6	(! v -> pquantizer)
cond	56:16	56:20	7	! v -> pquantizer
op	56:16	0:0	8	!
water	56:17	0:0	8	v
op	56:18	0:0	8	->
water	56:20	0:0	8	pquantizer
stmts	57:16	57:65	7	
water	57:16	0:0	8	block
op	57:21	0:0	8	[
water	57:22	0:0	8	idx
op	57:25	0:0	8	]
op	57:27	0:0	8	+=
water	57:30	0:0	8	(
water	57:31	0:0	8	block
op	57:36	0:0	8	[
water	57:37	0:0	8	idx
op	57:40	0:0	8	]
op	57:42	0:0	8	<
water	57:44	0:0	8	0
water	57:45	0:0	8	)
water	57:47	0:0	8	?
op	57:49	0:0	8	-
water	57:50	0:0	8	mquant
water	57:57	0:0	8	:
water	57:59	0:0	8	mquant
water	57:65	0:0	8	;
water	58:8	0:0	6	}
if	59:8	66:8	4	(! skip_block)
cond	59:12	59:13	5	! skip_block
op	59:12	0:0	6	!
water	59:13	0:0	6	skip_block
stmts	59:25	66:8	5	
water	59:25	0:0	6	{
if	60:12	61:68	6	(i == 1)
cond	60:16	60:21	7	i == 1
water	60:16	0:0	8	i
op	60:18	0:0	8	==
water	60:21	0:0	8	1
stmts	61:16	61:68	7	
call	61:16	61:67	8	v->vc1dsp.vc1_inv_trans_8x8_dc
arg	61:47	61:50	9	dst
water	61:47	0:0	10	dst
arg	61:52	61:60	9	linesize
water	61:52	0:0	10	linesize
arg	61:62	61:67	9	block
water	61:62	0:0	10	block
water	61:68	0:0	8	;
else	62:12	65:12	6
stmts	62:17	65:12	7	
water	62:17	0:0	8	{
call	63:16	63:49	8	v->vc1dsp.vc1_inv_trans_8x8
arg	63:44	63:49	9	block
water	63:44	0:0	10	block
water	63:50	0:0	8	;
call	64:16	64:63	8	s->idsp.add_pixels_clamped
arg	64:43	64:48	9	block
water	64:43	0:0	10	block
arg	64:50	64:53	9	dst
water	64:50	0:0	10	dst
arg	64:55	64:63	9	linesize
water	64:55	0:0	10	linesize
water	64:64	0:0	8	;
water	65:12	0:0	8	}
water	66:8	0:0	6	}
break	67:8	67:13	4	
label	68:4	68:15	4	case TT_4X4 :
water	69:8	0:0	4	pat
op	69:12	0:0	4	=
water	69:14	0:0	4	~subblkpat
op	69:25	0:0	4	&
water	69:27	0:0	4	0
water	69:28	0:0	4	xF
water	69:30	0:0	4	;
for	70:8	93:8	4	(j = 0 ;j < 4;j ++)
forinit	70:13	70:18	5	j = 0 ;
water	70:13	0:0	6	j
op	70:15	0:0	6	=
water	70:17	0:0	6	0
water	70:18	0:0	6	;
cond	70:20	70:24	5	j < 4
water	70:20	0:0	6	j
op	70:22	0:0	6	<
water	70:24	0:0	6	4
forexpr	70:27	70:28	5	j ++
water	70:27	0:0	6	j
op	70:28	0:0	6	++
stmts	70:32	93:8	5	
water	70:32	0:0	6	{
water	71:12	0:0	6	last
op	71:17	0:0	6	=
water	71:19	0:0	6	subblkpat
op	71:29	0:0	6	&
water	71:31	0:0	6	(
water	71:32	0:0	6	1
op	71:34	0:0	6	<<
water	71:37	0:0	6	(
water	71:38	0:0	6	3
op	71:40	0:0	6	-
water	71:42	0:0	6	j
water	71:43	0:0	6	)
water	71:44	0:0	6	)
water	71:45	0:0	6	;
water	72:12	0:0	6	i
op	72:17	0:0	6	=
water	72:19	0:0	6	0
water	72:20	0:0	6	;
water	73:12	0:0	6	off
op	73:17	0:0	6	=
water	73:19	0:0	6	(
water	73:20	0:0	6	j
op	73:22	0:0	6	&
water	73:24	0:0	6	1
water	73:25	0:0	6	)
op	73:27	0:0	6	*
water	73:29	0:0	6	4
op	73:31	0:0	6	+
water	73:33	0:0	6	(
water	73:34	0:0	6	j
op	73:36	0:0	6	&
water	73:38	0:0	6	2
water	73:39	0:0	6	)
op	73:41	0:0	6	*
water	73:43	0:0	6	16
water	73:45	0:0	6	;
while	74:12	86:12	6	(! last)
cond	74:19	74:20	7	! last
op	74:19	0:0	8	!
water	74:20	0:0	8	last
stmts	74:26	86:12	7	
water	74:26	0:0	8	{
call	75:16	75:74	8	vc1_decode_ac_coeff
arg	75:36	75:37	9	v
water	75:36	0:0	10	v
arg	75:39	75:44	9	&last
op	75:39	0:0	10	&
water	75:40	0:0	10	last
arg	75:46	75:51	9	&skip
op	75:46	0:0	10	&
water	75:47	0:0	10	skip
arg	75:53	75:59	9	&value
op	75:53	0:0	10	&
water	75:54	0:0	10	value
arg	75:61	75:74	9	v->codingset2
water	75:61	0:0	10	v
op	75:62	0:0	10	->
water	75:64	0:0	10	codingset2
water	75:75	0:0	8	;
water	76:16	0:0	8	i
op	76:18	0:0	8	+=
water	76:21	0:0	8	skip
water	76:25	0:0	8	;
if	77:16	78:25	8	(i > 15)
cond	77:20	77:24	9	i > 15
water	77:20	0:0	10	i
op	77:22	0:0	10	>
water	77:24	0:0	10	15
stmts	78:20	78:25	9	
break	78:20	78:25	10	
if	79:16	80:63	8	(! v -> fcm)
cond	79:20	79:24	9	! v -> fcm
op	79:20	0:0	10	!
water	79:21	0:0	10	v
op	79:22	0:0	10	->
water	79:24	0:0	10	fcm
stmts	80:20	80:63	9	
water	80:20	0:0	10	idx
op	80:24	0:0	10	=
water	80:26	0:0	10	ff_vc1_simple_progressive_4x4_zz
op	80:58	0:0	10	[
water	80:59	0:0	10	i
op	80:60	0:0	10	++
op	80:62	0:0	10	]
water	80:63	0:0	10	;
else	81:16	82:59	8
stmts	82:20	82:59	9	
water	82:20	0:0	10	idx
op	82:24	0:0	10	=
water	82:26	0:0	10	ff_vc1_adv_interlaced_4x4_zz
op	82:54	0:0	10	[
water	82:55	0:0	10	i
op	82:56	0:0	10	++
op	82:58	0:0	10	]
water	82:59	0:0	10	;
water	83:16	0:0	8	block
op	83:21	0:0	8	[
water	83:22	0:0	8	idx
op	83:26	0:0	8	+
water	83:28	0:0	8	off
op	83:31	0:0	8	]
op	83:33	0:0	8	=
water	83:35	0:0	8	value
op	83:41	0:0	8	*
water	83:43	0:0	8	scale
water	83:48	0:0	8	;
if	84:16	85:81	8	(! v -> pquantizer)
cond	84:20	84:24	9	! v -> pquantizer
op	84:20	0:0	10	!
water	84:21	0:0	10	v
op	84:22	0:0	10	->
water	84:24	0:0	10	pquantizer
stmts	85:20	85:81	9	
water	85:20	0:0	10	block
op	85:25	0:0	10	[
water	85:26	0:0	10	idx
op	85:30	0:0	10	+
water	85:32	0:0	10	off
op	85:35	0:0	10	]
op	85:37	0:0	10	+=
water	85:40	0:0	10	(
water	85:41	0:0	10	block
op	85:46	0:0	10	[
water	85:47	0:0	10	idx
op	85:51	0:0	10	+
water	85:53	0:0	10	off
op	85:56	0:0	10	]
op	85:58	0:0	10	<
water	85:60	0:0	10	0
water	85:61	0:0	10	)
water	85:63	0:0	10	?
op	85:65	0:0	10	-
water	85:66	0:0	10	mquant
water	85:73	0:0	10	:
water	85:75	0:0	10	mquant
water	85:81	0:0	10	;
water	86:12	0:0	8	}
if	87:12	92:12	6	(! ( subblkpat & ( 1 << ( 3 - j ) ) ) && ! skip_block)
cond	87:16	87:50	7	! ( subblkpat & ( 1 << ( 3 - j ) ) ) && ! skip_block
op	87:16	0:0	8	!
water	87:17	0:0	8	(
water	87:18	0:0	8	subblkpat
op	87:28	0:0	8	&
water	87:30	0:0	8	(
water	87:31	0:0	8	1
op	87:33	0:0	8	<<
water	87:36	0:0	8	(
water	87:37	0:0	8	3
op	87:39	0:0	8	-
water	87:41	0:0	8	j
water	87:42	0:0	8	)
water	87:43	0:0	8	)
water	87:44	0:0	8	)
op	87:46	0:0	8	&&
op	87:49	0:0	8	!
water	87:50	0:0	8	skip_block
stmts	87:62	92:12	7	
water	87:62	0:0	8	{
if	88:16	89:117	8	(i == 1)
cond	88:20	88:25	9	i == 1
water	88:20	0:0	10	i
op	88:22	0:0	10	==
water	88:25	0:0	10	1
stmts	89:20	89:117	9	
call	89:20	89:116	10	v->vc1dsp.vc1_inv_trans_4x4_dc
arg	89:51	89:93	11	dst+(j&1)*4+(j&2)*2*linesize
water	89:51	0:0	12	dst
op	89:55	0:0	12	+
water	89:57	0:0	12	(
water	89:58	0:0	12	j
op	89:60	0:0	12	&
water	89:62	0:0	12	1
water	89:63	0:0	12	)
op	89:65	0:0	12	*
water	89:67	0:0	12	4
op	89:69	0:0	12	+
water	89:71	0:0	12	(
water	89:72	0:0	12	j
op	89:74	0:0	12	&
water	89:76	0:0	12	2
water	89:77	0:0	12	)
op	89:79	0:0	12	*
water	89:81	0:0	12	2
op	89:83	0:0	12	*
water	89:85	0:0	12	linesize
arg	89:95	89:103	11	linesize
water	89:95	0:0	12	linesize
arg	89:105	89:116	11	block+off
water	89:105	0:0	12	block
op	89:111	0:0	12	+
water	89:113	0:0	12	off
water	89:117	0:0	10	;
else	90:16	91:115	8
stmts	91:20	91:115	9	
call	91:20	91:114	10	v->vc1dsp.vc1_inv_trans_4x4
arg	91:48	91:91	11	dst+(j&1)*4+(j&2)*2*linesize
water	91:48	0:0	12	dst
op	91:52	0:0	12	+
water	91:54	0:0	12	(
water	91:55	0:0	12	j
op	91:57	0:0	12	&
water	91:59	0:0	12	1
water	91:60	0:0	12	)
op	91:62	0:0	12	*
water	91:64	0:0	12	4
op	91:66	0:0	12	+
water	91:68	0:0	12	(
water	91:69	0:0	12	j
op	91:71	0:0	12	&
water	91:73	0:0	12	2
water	91:74	0:0	12	)
op	91:76	0:0	12	*
water	91:79	0:0	12	2
op	91:81	0:0	12	*
water	91:83	0:0	12	linesize
arg	91:93	91:101	11	linesize
water	91:93	0:0	12	linesize
arg	91:103	91:114	11	block+off
water	91:103	0:0	12	block
op	91:109	0:0	12	+
water	91:111	0:0	12	off
water	91:115	0:0	10	;
water	92:12	0:0	8	}
water	93:8	0:0	6	}
break	94:8	94:13	4	
label	95:4	95:15	4	case TT_8X4 :
water	96:8	0:0	4	pat
op	96:12	0:0	4	=
op	96:14	0:0	4	~
water	96:15	0:0	4	(
water	96:16	0:0	4	(
water	96:17	0:0	4	subblkpat
op	96:27	0:0	4	&
water	96:29	0:0	4	2
water	96:30	0:0	4	)
op	96:32	0:0	4	*
water	96:34	0:0	4	6
op	96:36	0:0	4	+
water	96:38	0:0	4	(
water	96:39	0:0	4	subblkpat
op	96:49	0:0	4	&
water	96:51	0:0	4	1
water	96:52	0:0	4	)
op	96:54	0:0	4	*
water	96:56	0:0	4	3
water	96:57	0:0	4	)
op	96:59	0:0	4	&
water	96:61	0:0	4	0
water	96:62	0:0	4	xF
water	96:64	0:0	4	;
for	97:8	120:8	4	(j = 0 ;j < 2;j ++)
forinit	97:13	97:18	5	j = 0 ;
water	97:13	0:0	6	j
op	97:15	0:0	6	=
water	97:17	0:0	6	0
water	97:18	0:0	6	;
cond	97:20	97:24	5	j < 2
water	97:20	0:0	6	j
op	97:22	0:0	6	<
water	97:24	0:0	6	2
forexpr	97:27	97:28	5	j ++
water	97:27	0:0	6	j
op	97:28	0:0	6	++
stmts	97:32	120:8	5	
water	97:32	0:0	6	{
water	98:12	0:0	6	last
op	98:17	0:0	6	=
water	98:19	0:0	6	subblkpat
op	98:29	0:0	6	&
water	98:31	0:0	6	(
water	98:32	0:0	6	1
op	98:34	0:0	6	<<
water	98:37	0:0	6	(
water	98:38	0:0	6	1
op	98:40	0:0	6	-
water	98:42	0:0	6	j
water	98:43	0:0	6	)
water	98:44	0:0	6	)
water	98:45	0:0	6	;
water	99:12	0:0	6	i
op	99:17	0:0	6	=
water	99:19	0:0	6	0
water	99:20	0:0	6	;
water	100:12	0:0	6	off
op	100:17	0:0	6	=
water	100:19	0:0	6	j
op	100:21	0:0	6	*
water	100:23	0:0	6	32
water	100:25	0:0	6	;
while	101:12	113:12	6	(! last)
cond	101:19	101:20	7	! last
op	101:19	0:0	8	!
water	101:20	0:0	8	last
stmts	101:26	113:12	7	
water	101:26	0:0	8	{
call	102:16	102:74	8	vc1_decode_ac_coeff
arg	102:36	102:37	9	v
water	102:36	0:0	10	v
arg	102:39	102:44	9	&last
op	102:39	0:0	10	&
water	102:40	0:0	10	last
arg	102:46	102:51	9	&skip
op	102:46	0:0	10	&
water	102:47	0:0	10	skip
arg	102:53	102:59	9	&value
op	102:53	0:0	10	&
water	102:54	0:0	10	value
arg	102:61	102:74	9	v->codingset2
water	102:61	0:0	10	v
op	102:62	0:0	10	->
water	102:64	0:0	10	codingset2
water	102:75	0:0	8	;
water	103:16	0:0	8	i
op	103:18	0:0	8	+=
water	103:21	0:0	8	skip
water	103:25	0:0	8	;
if	104:16	105:25	8	(i > 31)
cond	104:20	104:24	9	i > 31
water	104:20	0:0	10	i
op	104:22	0:0	10	>
water	104:24	0:0	10	31
stmts	105:20	105:25	9	
break	105:20	105:25	10	
if	106:16	107:46	8	(! v -> fcm)
cond	106:20	106:24	9	! v -> fcm
op	106:20	0:0	10	!
water	106:21	0:0	10	v
op	106:22	0:0	10	->
water	106:24	0:0	10	fcm
stmts	107:20	107:46	9	
water	107:20	0:0	10	idx
op	107:24	0:0	10	=
water	107:26	0:0	10	v
op	107:27	0:0	10	->
water	107:29	0:0	10	zz_8x4
op	107:35	0:0	10	[
water	107:36	0:0	10	i
op	107:37	0:0	10	++
op	107:39	0:0	10	]
op	107:41	0:0	10	+
water	107:43	0:0	10	off
water	107:46	0:0	10	;
else	108:16	109:65	8
stmts	109:20	109:65	9	
water	109:20	0:0	10	idx
op	109:24	0:0	10	=
water	109:26	0:0	10	ff_vc1_adv_interlaced_8x4_zz
op	109:54	0:0	10	[
water	109:55	0:0	10	i
op	109:56	0:0	10	++
op	109:58	0:0	10	]
op	109:60	0:0	10	+
water	109:62	0:0	10	off
water	109:65	0:0	10	;
water	110:16	0:0	8	block
op	110:21	0:0	8	[
water	110:22	0:0	8	idx
op	110:25	0:0	8	]
op	110:27	0:0	8	=
water	110:29	0:0	8	value
op	110:35	0:0	8	*
water	110:37	0:0	8	scale
water	110:42	0:0	8	;
if	111:16	112:69	8	(! v -> pquantizer)
cond	111:20	111:24	9	! v -> pquantizer
op	111:20	0:0	10	!
water	111:21	0:0	10	v
op	111:22	0:0	10	->
water	111:24	0:0	10	pquantizer
stmts	112:20	112:69	9	
water	112:20	0:0	10	block
op	112:25	0:0	10	[
water	112:26	0:0	10	idx
op	112:29	0:0	10	]
op	112:31	0:0	10	+=
water	112:34	0:0	10	(
water	112:35	0:0	10	block
op	112:40	0:0	10	[
water	112:41	0:0	10	idx
op	112:44	0:0	10	]
op	112:46	0:0	10	<
water	112:48	0:0	10	0
water	112:49	0:0	10	)
water	112:51	0:0	10	?
op	112:53	0:0	10	-
water	112:54	0:0	10	mquant
water	112:61	0:0	10	:
water	112:63	0:0	10	mquant
water	112:69	0:0	10	;
water	113:12	0:0	8	}
if	114:12	119:12	6	(! ( subblkpat & ( 1 << ( 1 - j ) ) ) && ! skip_block)
cond	114:16	114:50	7	! ( subblkpat & ( 1 << ( 1 - j ) ) ) && ! skip_block
op	114:16	0:0	8	!
water	114:17	0:0	8	(
water	114:18	0:0	8	subblkpat
op	114:28	0:0	8	&
water	114:30	0:0	8	(
water	114:31	0:0	8	1
op	114:33	0:0	8	<<
water	114:36	0:0	8	(
water	114:37	0:0	8	1
op	114:39	0:0	8	-
water	114:41	0:0	8	j
water	114:42	0:0	8	)
water	114:43	0:0	8	)
water	114:44	0:0	8	)
op	114:46	0:0	8	&&
op	114:49	0:0	8	!
water	114:50	0:0	8	skip_block
stmts	114:62	119:12	7	
water	114:62	0:0	8	{
if	115:16	116:97	8	(i == 1)
cond	115:20	115:25	9	i == 1
water	115:20	0:0	10	i
op	115:22	0:0	10	==
water	115:25	0:0	10	1
stmts	116:20	116:97	9	
call	116:20	116:96	10	v->vc1dsp.vc1_inv_trans_8x4_dc
arg	116:51	116:73	11	dst+j*4*linesize
water	116:51	0:0	12	dst
op	116:55	0:0	12	+
water	116:57	0:0	12	j
op	116:59	0:0	12	*
water	116:61	0:0	12	4
op	116:63	0:0	12	*
water	116:65	0:0	12	linesize
arg	116:75	116:83	11	linesize
water	116:75	0:0	12	linesize
arg	116:85	116:96	11	block+off
water	116:85	0:0	12	block
op	116:91	0:0	12	+
water	116:93	0:0	12	off
water	116:97	0:0	10	;
else	117:16	118:94	8
stmts	118:20	118:94	9	
call	118:20	118:93	10	v->vc1dsp.vc1_inv_trans_8x4
arg	118:48	118:70	11	dst+j*4*linesize
water	118:48	0:0	12	dst
op	118:52	0:0	12	+
water	118:54	0:0	12	j
op	118:56	0:0	12	*
water	118:58	0:0	12	4
op	118:60	0:0	12	*
water	118:62	0:0	12	linesize
arg	118:72	118:80	11	linesize
water	118:72	0:0	12	linesize
arg	118:82	118:93	11	block+off
water	118:82	0:0	12	block
op	118:88	0:0	12	+
water	118:90	0:0	12	off
water	118:94	0:0	10	;
water	119:12	0:0	8	}
water	120:8	0:0	6	}
break	121:8	121:13	4	
label	122:4	122:15	4	case TT_4X8 :
water	123:8	0:0	4	pat
op	123:12	0:0	4	=
op	123:14	0:0	4	~
water	123:15	0:0	4	(
water	123:16	0:0	4	subblkpat
op	123:26	0:0	4	*
water	123:28	0:0	4	5
water	123:29	0:0	4	)
op	123:31	0:0	4	&
water	123:33	0:0	4	0
water	123:34	0:0	4	xF
water	123:36	0:0	4	;
for	124:8	147:8	4	(j = 0 ;j < 2;j ++)
forinit	124:13	124:18	5	j = 0 ;
water	124:13	0:0	6	j
op	124:15	0:0	6	=
water	124:17	0:0	6	0
water	124:18	0:0	6	;
cond	124:20	124:24	5	j < 2
water	124:20	0:0	6	j
op	124:22	0:0	6	<
water	124:24	0:0	6	2
forexpr	124:27	124:28	5	j ++
water	124:27	0:0	6	j
op	124:28	0:0	6	++
stmts	124:32	147:8	5	
water	124:32	0:0	6	{
water	125:12	0:0	6	last
op	125:17	0:0	6	=
water	125:19	0:0	6	subblkpat
op	125:29	0:0	6	&
water	125:31	0:0	6	(
water	125:32	0:0	6	1
op	125:34	0:0	6	<<
water	125:37	0:0	6	(
water	125:38	0:0	6	1
op	125:40	0:0	6	-
water	125:42	0:0	6	j
water	125:43	0:0	6	)
water	125:44	0:0	6	)
water	125:45	0:0	6	;
water	126:12	0:0	6	i
op	126:17	0:0	6	=
water	126:19	0:0	6	0
water	126:20	0:0	6	;
water	127:12	0:0	6	off
op	127:17	0:0	6	=
water	127:19	0:0	6	j
op	127:21	0:0	6	*
water	127:23	0:0	6	4
water	127:24	0:0	6	;
while	128:12	140:12	6	(! last)
cond	128:19	128:20	7	! last
op	128:19	0:0	8	!
water	128:20	0:0	8	last
stmts	128:26	140:12	7	
water	128:26	0:0	8	{
call	129:16	129:74	8	vc1_decode_ac_coeff
arg	129:36	129:37	9	v
water	129:36	0:0	10	v
arg	129:39	129:44	9	&last
op	129:39	0:0	10	&
water	129:40	0:0	10	last
arg	129:46	129:51	9	&skip
op	129:46	0:0	10	&
water	129:47	0:0	10	skip
arg	129:53	129:59	9	&value
op	129:53	0:0	10	&
water	129:54	0:0	10	value
arg	129:61	129:74	9	v->codingset2
water	129:61	0:0	10	v
op	129:62	0:0	10	->
water	129:64	0:0	10	codingset2
water	129:75	0:0	8	;
water	130:16	0:0	8	i
op	130:18	0:0	8	+=
water	130:21	0:0	8	skip
water	130:25	0:0	8	;
if	131:16	132:25	8	(i > 31)
cond	131:20	131:24	9	i > 31
water	131:20	0:0	10	i
op	131:22	0:0	10	>
water	131:24	0:0	10	31
stmts	132:20	132:25	9	
break	132:20	132:25	10	
if	133:16	134:46	8	(! v -> fcm)
cond	133:20	133:24	9	! v -> fcm
op	133:20	0:0	10	!
water	133:21	0:0	10	v
op	133:22	0:0	10	->
water	133:24	0:0	10	fcm
stmts	134:20	134:46	9	
water	134:20	0:0	10	idx
op	134:24	0:0	10	=
water	134:26	0:0	10	v
op	134:27	0:0	10	->
water	134:29	0:0	10	zz_4x8
op	134:35	0:0	10	[
water	134:36	0:0	10	i
op	134:37	0:0	10	++
op	134:39	0:0	10	]
op	134:41	0:0	10	+
water	134:43	0:0	10	off
water	134:46	0:0	10	;
else	135:16	136:65	8
stmts	136:20	136:65	9	
water	136:20	0:0	10	idx
op	136:24	0:0	10	=
water	136:26	0:0	10	ff_vc1_adv_interlaced_4x8_zz
op	136:54	0:0	10	[
water	136:55	0:0	10	i
op	136:56	0:0	10	++
op	136:58	0:0	10	]
op	136:60	0:0	10	+
water	136:62	0:0	10	off
water	136:65	0:0	10	;
water	137:16	0:0	8	block
op	137:21	0:0	8	[
water	137:22	0:0	8	idx
op	137:25	0:0	8	]
op	137:27	0:0	8	=
water	137:29	0:0	8	value
op	137:35	0:0	8	*
water	137:37	0:0	8	scale
water	137:42	0:0	8	;
if	138:16	139:69	8	(! v -> pquantizer)
cond	138:20	138:24	9	! v -> pquantizer
op	138:20	0:0	10	!
water	138:21	0:0	10	v
op	138:22	0:0	10	->
water	138:24	0:0	10	pquantizer
stmts	139:20	139:69	9	
water	139:20	0:0	10	block
op	139:25	0:0	10	[
water	139:26	0:0	10	idx
op	139:29	0:0	10	]
op	139:31	0:0	10	+=
water	139:34	0:0	10	(
water	139:35	0:0	10	block
op	139:40	0:0	10	[
water	139:41	0:0	10	idx
op	139:44	0:0	10	]
op	139:46	0:0	10	<
water	139:48	0:0	10	0
water	139:49	0:0	10	)
water	139:51	0:0	10	?
op	139:53	0:0	10	-
water	139:54	0:0	10	mquant
water	139:61	0:0	10	:
water	139:63	0:0	10	mquant
water	139:69	0:0	10	;
water	140:12	0:0	8	}
if	141:12	146:12	6	(! ( subblkpat & ( 1 << ( 1 - j ) ) ) && ! skip_block)
cond	141:16	141:50	7	! ( subblkpat & ( 1 << ( 1 - j ) ) ) && ! skip_block
op	141:16	0:0	8	!
water	141:17	0:0	8	(
water	141:18	0:0	8	subblkpat
op	141:28	0:0	8	&
water	141:30	0:0	8	(
water	141:31	0:0	8	1
op	141:33	0:0	8	<<
water	141:36	0:0	8	(
water	141:37	0:0	8	1
op	141:39	0:0	8	-
water	141:41	0:0	8	j
water	141:42	0:0	8	)
water	141:43	0:0	8	)
water	141:44	0:0	8	)
op	141:46	0:0	8	&&
op	141:49	0:0	8	!
water	141:50	0:0	8	skip_block
stmts	141:62	146:12	7	
water	141:62	0:0	8	{
if	142:16	143:86	8	(i == 1)
cond	142:20	142:25	9	i == 1
water	142:20	0:0	10	i
op	142:22	0:0	10	==
water	142:25	0:0	10	1
stmts	143:20	143:86	9	
call	143:20	143:85	10	v->vc1dsp.vc1_inv_trans_4x8_dc
arg	143:51	143:62	11	dst+j*4
water	143:51	0:0	12	dst
op	143:55	0:0	12	+
water	143:57	0:0	12	j
op	143:59	0:0	12	*
water	143:61	0:0	12	4
arg	143:64	143:72	11	linesize
water	143:64	0:0	12	linesize
arg	143:74	143:85	11	block+off
water	143:74	0:0	12	block
op	143:80	0:0	12	+
water	143:82	0:0	12	off
water	143:86	0:0	10	;
else	144:16	145:81	8
stmts	145:20	145:81	9	
call	145:20	145:80	10	v->vc1dsp.vc1_inv_trans_4x8
arg	145:48	145:57	11	dst+j*4
water	145:48	0:0	12	dst
op	145:52	0:0	12	+
water	145:54	0:0	12	j
op	145:55	0:0	12	*
water	145:56	0:0	12	4
arg	145:59	145:67	11	linesize
water	145:59	0:0	12	linesize
arg	145:69	145:80	11	block+off
water	145:69	0:0	12	block
op	145:75	0:0	12	+
water	145:77	0:0	12	off
water	145:81	0:0	10	;
water	146:12	0:0	8	}
water	147:8	0:0	6	}
break	148:8	148:13	4	
water	149:4	0:0	4	}
if	150:4	151:37	2	(ttmb_out)
cond	150:8	150:8	3	ttmb_out
water	150:8	0:0	4	ttmb_out
stmts	151:8	151:37	3	
op	151:8	0:0	4	*
water	151:9	0:0	4	ttmb_out
op	151:18	0:0	4	|=
water	151:21	0:0	4	ttblk
op	151:27	0:0	4	<<
water	151:30	0:0	4	(
water	151:31	0:0	4	n
op	151:33	0:0	4	*
water	151:35	0:0	4	4
water	151:36	0:0	4	)
water	151:37	0:0	4	;
return	152:4	152:14	2	pat
water	152:11	0:0	3	pat
