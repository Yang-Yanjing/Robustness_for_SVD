func	1:0	128:0	0	int	ff_rtsp_read_reply
params	1:22	0:0	1	
param	1:23	1:41	2	AVFormatContext *	s
param	1:43	1:67	2	RTSPMessageHeader *	reply
param	2:23	2:50	2	unsigned char * *	content_ptr
param	3:23	3:53	2	int	return_on_interleaved_data
param	3:55	3:73	2	const char *	method
stmnts	0:0	127:12	1	
decl	5:4	5:32	2	RTSPState	*rt
op	5:18	0:0	2	=
water	5:20	0:0	2	s
op	5:21	0:0	2	->
water	5:23	0:0	2	priv_data
decl	6:4	6:34	2	char	buf[4096]
water	6:18	0:0	2	,
decl	6:4	6:34	2	char	buf1[1024]
water	6:30	0:0	2	,
decl	6:4	6:34	2	char	*q
decl	7:4	7:20	2	unsigned char	ch
decl	8:4	8:17	2	const char	*p
decl	9:4	9:56	2	int	ret
water	9:11	0:0	2	,
decl	9:4	9:56	2	int	content_length
water	9:27	0:0	2	,
decl	9:4	9:56	2	int	line_count
op	9:40	0:0	2	=
water	9:42	0:0	2	0
water	9:43	0:0	2	,
decl	9:4	9:56	2	int	request
op	9:53	0:0	2	=
water	9:55	0:0	2	0
decl	10:4	10:22	2	int	first_line
op	10:19	0:0	2	=
water	10:21	0:0	2	1
decl	11:4	11:33	2	unsigned char	*content
op	11:27	0:0	2	=
water	11:29	0:0	2	NULL
label	12:0	12:5	2	start :
water	13:4	0:0	2	line_count
op	13:15	0:0	2	=
water	13:17	0:0	2	0
water	13:18	0:0	2	;
water	14:4	0:0	2	request
op	14:12	0:0	2	=
water	14:14	0:0	2	0
water	14:15	0:0	2	;
water	15:4	0:0	2	content
op	15:12	0:0	2	=
water	15:14	0:0	2	NULL
water	15:18	0:0	2	;
call	16:4	16:35	2	memset
arg	16:11	16:16	3	reply
water	16:11	0:0	4	reply
arg	16:18	16:19	3	0
water	16:18	0:0	4	0
arg	16:21	16:35	3	sizeof(*reply)
op	16:21	0:0	4	sizeof
water	16:27	0:0	4	(
op	16:28	0:0	4	*
water	16:29	0:0	4	reply
water	16:34	0:0	4	)
water	16:36	0:0	2	;
water	18:4	0:0	2	rt
op	18:6	0:0	2	->
water	18:8	0:0	2	last_reply
op	18:18	0:0	2	[
water	18:19	0:0	2	0
op	18:20	0:0	2	]
op	18:22	0:0	2	=
water	18:24	0:0	2	'\0'
water	18:28	0:0	2	;
for	19:4	63:4	2	(;;)
forinit	19:9	19:9	3	;
water	19:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	19:13	63:4	3	
water	19:13	0:0	4	{
water	20:8	0:0	4	q
op	20:10	0:0	4	=
water	20:12	0:0	4	buf
water	20:15	0:0	4	;
for	21:8	37:8	4	(;;)
forinit	21:13	21:13	5	;
water	21:13	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	21:17	37:8	5	
water	21:17	0:0	6	{
water	22:12	0:0	6	ret
op	22:16	0:0	6	=
call	22:18	22:57	6	ffurl_read_complete
arg	22:38	22:49	7	rt->rtsp_hd
water	22:38	0:0	8	rt
op	22:40	0:0	8	->
water	22:42	0:0	8	rtsp_hd
arg	22:51	22:54	7	&ch
op	22:51	0:0	8	&
water	22:52	0:0	8	ch
arg	22:56	22:57	7	1
water	22:56	0:0	8	1
water	22:58	0:0	6	;
call	23:12	23:71	6	av_log
arg	23:19	23:20	7	s
water	23:19	0:0	8	s
arg	23:22	23:34	7	AV_LOG_TRACE
water	23:22	0:0	8	AV_LOG_TRACE
arg	23:36	23:58	7	"ret=%d c=%02x [%c]\n"
water	23:36	0:0	8	"ret=%d c=%02x [%c]\n"
arg	23:60	23:63	7	ret
water	23:60	0:0	8	ret
arg	23:65	23:67	7	ch
water	23:65	0:0	8	ch
arg	23:69	23:71	7	ch
water	23:69	0:0	8	ch
water	23:72	0:0	6	;
if	24:12	25:34	6	(ret != 1)
cond	24:16	24:23	7	ret != 1
water	24:16	0:0	8	ret
op	24:20	0:0	8	!=
water	24:23	0:0	8	1
stmts	25:16	25:34	7	
return	25:16	25:34	8	AVERROR_EOF
water	25:23	0:0	9	AVERROR_EOF
if	26:12	27:21	6	(ch == '\n')
cond	26:16	26:22	7	ch == '\n'
water	26:16	0:0	8	ch
op	26:19	0:0	8	==
water	26:22	0:0	8	'\n'
stmts	27:16	27:21	7	
break	27:16	27:21	8	
if	28:12	33:12	6	(ch == '$' && first_line && q == buf)
cond	28:16	28:48	7	ch == '$' && first_line && q == buf
water	28:16	0:0	8	ch
op	28:19	0:0	8	==
water	28:22	0:0	8	'$'
op	28:26	0:0	8	&&
water	28:29	0:0	8	first_line
op	28:40	0:0	8	&&
water	28:43	0:0	8	q
op	28:45	0:0	8	==
water	28:48	0:0	8	buf
stmts	28:53	33:12	7	
water	28:53	0:0	8	{
if	29:16	31:16	8	(return_on_interleaved_data)
cond	29:20	29:20	9	return_on_interleaved_data
water	29:20	0:0	10	return_on_interleaved_data
stmts	29:48	31:16	9	
water	29:48	0:0	10	{
return	30:20	30:28	10	1
water	30:27	0:0	11	1
water	31:16	0:0	10	}
else	31:18	32:42	8
stmts	32:20	32:42	9	
call	32:20	32:41	10	ff_rtsp_skip_packet
arg	32:40	32:41	11	s
water	32:40	0:0	12	s
water	32:42	0:0	10	;
water	33:12	0:0	8	}
else	33:14	36:12	6
stmts	33:19	36:12	7	
if	33:19	36:12	8	(ch != '\r')
cond	33:23	33:29	9	ch != '\r'
water	33:23	0:0	10	ch
op	33:26	0:0	10	!=
water	33:29	0:0	10	'\r'
stmts	33:35	36:12	9	
water	33:35	0:0	10	{
if	34:16	35:29	10	(( q - buf ) < sizeof ( buf ) - 1)
cond	34:20	34:46	11	( q - buf ) < sizeof ( buf ) - 1
water	34:20	0:0	12	(
water	34:21	0:0	12	q
op	34:23	0:0	12	-
water	34:25	0:0	12	buf
water	34:28	0:0	12	)
op	34:30	0:0	12	<
op	34:32	0:0	12	sizeof
water	34:38	0:0	12	(
water	34:39	0:0	12	buf
water	34:42	0:0	12	)
op	34:44	0:0	12	-
water	34:46	0:0	12	1
stmts	35:20	35:29	11	
op	35:20	0:0	12	*
water	35:21	0:0	12	q
op	35:22	0:0	12	++
op	35:25	0:0	12	=
water	35:27	0:0	12	ch
water	35:29	0:0	12	;
water	36:12	0:0	10	}
water	37:8	0:0	6	}
op	38:8	0:0	4	*
water	38:9	0:0	4	q
op	38:11	0:0	4	=
water	38:13	0:0	4	'\0'
water	38:17	0:0	4	;
water	39:8	0:0	4	first_line
op	39:19	0:0	4	=
water	39:21	0:0	4	0
water	39:22	0:0	4	;
call	40:8	40:50	4	av_log
arg	40:15	40:16	5	s
water	40:15	0:0	6	s
arg	40:18	40:30	5	AV_LOG_TRACE
water	40:18	0:0	6	AV_LOG_TRACE
arg	40:32	40:45	5	"line='%s'\n"
water	40:32	0:0	6	"line='%s'\n"
arg	40:47	40:50	5	buf
water	40:47	0:0	6	buf
water	40:51	0:0	4	;
if	42:8	43:17	4	(buf [ 0 ] == '\0')
cond	42:12	42:22	5	buf [ 0 ] == '\0'
water	42:12	0:0	6	buf
op	42:15	0:0	6	[
water	42:16	0:0	6	0
op	42:17	0:0	6	]
op	42:19	0:0	6	==
water	42:22	0:0	6	'\0'
stmts	43:12	43:17	5	
break	43:12	43:17	6	
water	44:8	0:0	4	p
op	44:10	0:0	4	=
water	44:12	0:0	4	buf
water	44:15	0:0	4	;
if	45:8	57:8	4	(line_count == 0)
cond	45:12	45:26	5	line_count == 0
water	45:12	0:0	6	line_count
op	45:23	0:0	6	==
water	45:26	0:0	6	0
stmts	45:29	57:8	5	
water	45:29	0:0	6	{
call	47:12	47:43	6	get_word
arg	47:21	47:25	7	buf1
water	47:21	0:0	8	buf1
arg	47:27	47:39	7	sizeof(buf1)
op	47:27	0:0	8	sizeof
water	47:33	0:0	8	(
water	47:34	0:0	8	buf1
water	47:38	0:0	8	)
arg	47:41	47:43	7	&p
op	47:41	0:0	8	&
water	47:42	0:0	8	p
water	47:44	0:0	6	;
if	48:12	52:12	6	(!strncmp (buf1 ,"RTSP/" ,5 ))
cond	48:16	48:41	7	!strncmp (buf1 ,"RTSP/" ,5 )
op	48:16	0:0	8	!
call	48:17	48:41	8	strncmp
arg	48:25	48:29	9	buf1
water	48:25	0:0	10	buf1
arg	48:31	48:38	9	"RTSP/"
water	48:31	0:0	10	"RTSP/"
arg	48:40	48:41	9	5
water	48:40	0:0	10	5
stmts	48:44	52:12	7	
water	48:44	0:0	8	{
call	49:16	49:47	8	get_word
arg	49:25	49:29	9	buf1
water	49:25	0:0	10	buf1
arg	49:31	49:43	9	sizeof(buf1)
op	49:31	0:0	10	sizeof
water	49:37	0:0	10	(
water	49:38	0:0	10	buf1
water	49:42	0:0	10	)
arg	49:45	49:47	9	&p
op	49:45	0:0	10	&
water	49:46	0:0	10	p
water	49:48	0:0	8	;
water	50:16	0:0	8	reply
op	50:21	0:0	8	->
water	50:23	0:0	8	status_code
op	50:35	0:0	8	=
call	50:37	50:46	8	atoi
arg	50:42	50:46	9	buf1
water	50:42	0:0	10	buf1
water	50:47	0:0	8	;
call	51:16	51:66	8	av_strlcpy
arg	51:27	51:40	9	reply->reason
water	51:27	0:0	10	reply
op	51:32	0:0	10	->
water	51:34	0:0	10	reason
arg	51:42	51:43	9	p
water	51:42	0:0	10	p
arg	51:45	51:66	9	sizeof(reply->reason)
op	51:45	0:0	10	sizeof
water	51:51	0:0	10	(
water	51:52	0:0	10	reply
op	51:57	0:0	10	->
water	51:59	0:0	10	reason
water	51:65	0:0	10	)
water	51:67	0:0	8	;
water	52:12	0:0	8	}
else	52:14	56:12	6
stmts	52:19	56:12	7	
water	52:19	0:0	8	{
call	53:16	53:69	8	av_strlcpy
arg	53:27	53:40	9	reply->reason
water	53:27	0:0	10	reply
op	53:32	0:0	10	->
water	53:34	0:0	10	reason
arg	53:42	53:46	9	buf1
water	53:42	0:0	10	buf1
arg	53:48	53:69	9	sizeof(reply->reason)
op	53:48	0:0	10	sizeof
water	53:54	0:0	10	(
water	53:55	0:0	10	reply
op	53:60	0:0	10	->
water	53:62	0:0	10	reason
water	53:68	0:0	10	)
water	53:70	0:0	8	;
call	54:16	54:47	8	get_word
arg	54:25	54:29	9	buf1
water	54:25	0:0	10	buf1
arg	54:31	54:43	9	sizeof(buf1)
op	54:31	0:0	10	sizeof
water	54:37	0:0	10	(
water	54:38	0:0	10	buf1
water	54:42	0:0	10	)
arg	54:45	54:47	9	&p
op	54:45	0:0	10	&
water	54:46	0:0	10	p
water	54:48	0:0	8	;
water	55:16	0:0	8	request
op	55:24	0:0	8	=
water	55:26	0:0	8	1
water	55:27	0:0	8	;
water	56:12	0:0	8	}
water	57:8	0:0	6	}
else	57:10	61:8	4
stmts	57:15	61:8	5	
water	57:15	0:0	6	{
call	58:12	58:51	6	ff_rtsp_parse_line
arg	58:31	58:36	7	reply
water	58:31	0:0	8	reply
arg	58:38	58:39	7	p
water	58:38	0:0	8	p
arg	58:41	58:43	7	rt
water	58:41	0:0	8	rt
arg	58:45	58:51	7	method
water	58:45	0:0	8	method
water	58:52	0:0	6	;
call	59:12	59:67	6	av_strlcat
arg	59:23	59:37	7	rt->last_reply
water	59:23	0:0	8	rt
op	59:25	0:0	8	->
water	59:27	0:0	8	last_reply
arg	59:39	59:40	7	p
water	59:39	0:0	8	p
arg	59:45	59:67	7	sizeof(rt->last_reply)
op	59:45	0:0	8	sizeof
water	59:51	0:0	8	(
water	59:52	0:0	8	rt
op	59:54	0:0	8	->
water	59:56	0:0	8	last_reply
water	59:66	0:0	8	)
water	59:68	0:0	6	;
call	60:12	60:67	6	av_strlcat
arg	60:23	60:37	7	rt->last_reply
water	60:23	0:0	8	rt
op	60:25	0:0	8	->
water	60:27	0:0	8	last_reply
arg	60:39	60:43	7	"\n"
water	60:39	0:0	8	"\n"
arg	60:45	60:67	7	sizeof(rt->last_reply)
op	60:45	0:0	8	sizeof
water	60:51	0:0	8	(
water	60:52	0:0	8	rt
op	60:54	0:0	8	->
water	60:56	0:0	8	last_reply
water	60:66	0:0	8	)
water	60:68	0:0	6	;
water	61:8	0:0	6	}
water	62:8	0:0	4	line_count
op	62:18	0:0	4	++
water	62:20	0:0	4	;
water	63:4	0:0	4	}
if	64:4	65:77	2	(rt -> session_id [ 0 ] == '\0' && reply -> session_id [ 0 ] != '\0' && ! request)
cond	64:8	64:70	3	rt -> session_id [ 0 ] == '\0' && reply -> session_id [ 0 ] != '\0' && ! request
water	64:8	0:0	4	rt
op	64:10	0:0	4	->
water	64:12	0:0	4	session_id
op	64:22	0:0	4	[
water	64:23	0:0	4	0
op	64:24	0:0	4	]
op	64:26	0:0	4	==
water	64:29	0:0	4	'\0'
op	64:34	0:0	4	&&
water	64:37	0:0	4	reply
op	64:42	0:0	4	->
water	64:44	0:0	4	session_id
op	64:54	0:0	4	[
water	64:55	0:0	4	0
op	64:56	0:0	4	]
op	64:58	0:0	4	!=
water	64:61	0:0	4	'\0'
op	64:66	0:0	4	&&
op	64:69	0:0	4	!
water	64:70	0:0	4	request
stmts	65:8	65:77	3	
call	65:8	65:76	4	av_strlcpy
arg	65:19	65:33	5	rt->session_id
water	65:19	0:0	6	rt
op	65:21	0:0	6	->
water	65:23	0:0	6	session_id
arg	65:35	65:52	5	reply->session_id
water	65:35	0:0	6	reply
op	65:40	0:0	6	->
water	65:42	0:0	6	session_id
arg	65:54	65:76	5	sizeof(rt->session_id)
op	65:54	0:0	6	sizeof
water	65:60	0:0	6	(
water	65:61	0:0	6	rt
op	65:63	0:0	6	->
water	65:65	0:0	6	session_id
water	65:75	0:0	6	)
water	65:77	0:0	4	;
water	66:4	0:0	2	content_length
op	66:19	0:0	2	=
water	66:21	0:0	2	reply
op	66:26	0:0	2	->
water	66:28	0:0	2	content_length
water	66:42	0:0	2	;
if	67:4	74:4	2	(content_length > 0)
cond	67:8	67:25	3	content_length > 0
water	67:8	0:0	4	content_length
op	67:23	0:0	4	>
water	67:25	0:0	4	0
stmts	67:28	74:4	3	
water	67:28	0:0	4	{
water	69:8	0:0	4	content
op	69:16	0:0	4	=
call	69:18	69:46	4	av_malloc
arg	69:28	69:46	5	content_length+1
water	69:28	0:0	6	content_length
op	69:43	0:0	6	+
water	69:45	0:0	6	1
water	69:47	0:0	4	;
if	70:8	71:34	4	(! content)
cond	70:12	70:13	5	! content
op	70:12	0:0	6	!
water	70:13	0:0	6	content
stmts	71:12	71:34	5	
return	71:12	71:34	6	AVERROR(ENOMEM)
call	71:19	71:33	7	AVERROR
arg	71:27	71:33	8	ENOMEM
water	71:27	0:0	9	ENOMEM
call	72:8	72:64	4	ffurl_read_complete
arg	72:28	72:39	5	rt->rtsp_hd
water	72:28	0:0	6	rt
op	72:30	0:0	6	->
water	72:32	0:0	6	rtsp_hd
arg	72:41	72:48	5	content
water	72:41	0:0	6	content
arg	72:50	72:64	5	content_length
water	72:50	0:0	6	content_length
water	72:65	0:0	4	;
water	73:8	0:0	4	content
op	73:15	0:0	4	[
water	73:16	0:0	4	content_length
op	73:30	0:0	4	]
op	73:32	0:0	4	=
water	73:34	0:0	4	'\0'
water	73:38	0:0	4	;
water	74:4	0:0	4	}
if	75:4	76:30	2	(content_ptr)
cond	75:8	75:8	3	content_ptr
water	75:8	0:0	4	content_ptr
stmts	76:8	76:30	3	
op	76:8	0:0	4	*
water	76:9	0:0	4	content_ptr
op	76:21	0:0	4	=
water	76:23	0:0	4	content
water	76:30	0:0	4	;
else	77:4	78:26	2
stmts	78:8	78:26	3	
call	78:8	78:25	4	av_freep
arg	78:17	78:25	5	&content
op	78:17	0:0	6	&
water	78:18	0:0	6	content
water	78:26	0:0	4	;
if	79:4	112:4	2	(request)
cond	79:8	79:8	3	request
water	79:8	0:0	4	request
stmts	79:17	112:4	3	
water	79:17	0:0	4	{
decl	80:8	80:22	4	char	buf[1024]
decl	81:8	81:51	4	char	base64buf[AV_BASE64_SIZE(sizeof(buf))]
decl	82:8	82:29	4	const char	*ptr
op	82:24	0:0	4	=
water	82:26	0:0	4	buf
if	83:8	90:8	4	(!strcmp (reply -> reason ,"OPTIONS" ))
cond	83:12	83:44	5	!strcmp (reply -> reason ,"OPTIONS" )
op	83:12	0:0	6	!
call	83:13	83:44	6	strcmp
arg	83:20	83:33	7	reply->reason
water	83:20	0:0	8	reply
op	83:25	0:0	8	->
water	83:27	0:0	8	reason
arg	83:35	83:44	7	"OPTIONS"
water	83:35	0:0	8	"OPTIONS"
stmts	83:47	90:8	5	
water	83:47	0:0	6	{
call	84:12	84:60	6	snprintf
arg	84:21	84:24	7	buf
water	84:21	0:0	8	buf
arg	84:26	84:37	7	sizeof(buf)
op	84:26	0:0	8	sizeof
water	84:32	0:0	8	(
water	84:33	0:0	8	buf
water	84:36	0:0	8	)
arg	84:39	84:60	7	"RTSP/1.0 200 OK\r\n"
water	84:39	0:0	8	"RTSP/1.0 200 OK\r\n"
water	84:61	0:0	6	;
if	85:12	86:73	6	(reply -> seq)
cond	85:16	85:23	7	reply -> seq
water	85:16	0:0	8	reply
op	85:21	0:0	8	->
water	85:23	0:0	8	seq
stmts	86:16	86:73	7	
call	86:16	86:72	8	av_strlcatf
arg	86:28	86:31	9	buf
water	86:28	0:0	10	buf
arg	86:33	86:44	9	sizeof(buf)
op	86:33	0:0	10	sizeof
water	86:39	0:0	10	(
water	86:40	0:0	10	buf
water	86:43	0:0	10	)
arg	86:46	86:60	9	"CSeq: %d\r\n"
water	86:46	0:0	10	"CSeq: %d\r\n"
arg	86:62	86:72	9	reply->seq
water	86:62	0:0	10	reply
op	86:67	0:0	10	->
water	86:69	0:0	10	seq
water	86:73	0:0	8	;
if	87:12	89:64	6	(reply -> session_id [ 0 ])
cond	87:16	87:35	7	reply -> session_id [ 0 ]
water	87:16	0:0	8	reply
op	87:21	0:0	8	->
water	87:23	0:0	8	session_id
op	87:33	0:0	8	[
water	87:34	0:0	8	0
op	87:35	0:0	8	]
stmts	88:16	89:64	7	
call	88:16	89:63	8	av_strlcatf
arg	88:28	88:31	9	buf
water	88:28	0:0	10	buf
arg	88:33	88:44	9	sizeof(buf)
op	88:33	0:0	10	sizeof
water	88:39	0:0	10	(
water	88:40	0:0	10	buf
water	88:43	0:0	10	)
arg	88:46	88:63	9	"Session: %s\r\n"
water	88:46	0:0	10	"Session: %s\r\n"
arg	89:46	89:63	9	reply->session_id
water	89:46	0:0	10	reply
op	89:51	0:0	10	->
water	89:53	0:0	10	session_id
water	89:64	0:0	8	;
water	90:8	0:0	6	}
else	90:10	92:8	4
stmts	90:15	92:8	5	
water	90:15	0:0	6	{
call	91:12	91:73	6	snprintf
arg	91:21	91:24	7	buf
water	91:21	0:0	8	buf
arg	91:26	91:37	7	sizeof(buf)
op	91:26	0:0	8	sizeof
water	91:32	0:0	8	(
water	91:33	0:0	8	buf
water	91:36	0:0	8	)
arg	91:39	91:73	7	"RTSP/1.0 501 Not Implemented\r\n"
water	91:39	0:0	8	"RTSP/1.0 501 Not Implemented\r\n"
water	91:74	0:0	6	;
water	92:8	0:0	6	}
call	93:8	93:43	4	av_strlcat
arg	93:19	93:22	5	buf
water	93:19	0:0	6	buf
arg	93:24	93:30	5	"\r\n"
water	93:24	0:0	6	"\r\n"
arg	93:32	93:43	5	sizeof(buf)
op	93:32	0:0	6	sizeof
water	93:38	0:0	6	(
water	93:39	0:0	6	buf
water	93:42	0:0	6	)
water	93:44	0:0	4	;
if	94:8	97:8	4	(rt -> control_transport == RTSP_MODE_TUNNEL)
cond	94:12	94:37	5	rt -> control_transport == RTSP_MODE_TUNNEL
water	94:12	0:0	6	rt
op	94:14	0:0	6	->
water	94:16	0:0	6	control_transport
op	94:34	0:0	6	==
water	94:37	0:0	6	RTSP_MODE_TUNNEL
stmts	94:55	97:8	5	
water	94:55	0:0	6	{
call	95:12	95:75	6	av_base64_encode
arg	95:29	95:38	7	base64buf
water	95:29	0:0	8	base64buf
arg	95:40	95:57	7	sizeof(base64buf)
op	95:40	0:0	8	sizeof
water	95:46	0:0	8	(
water	95:47	0:0	8	base64buf
water	95:56	0:0	8	)
arg	95:59	95:62	7	buf
water	95:59	0:0	8	buf
arg	95:64	95:75	7	strlen(buf)
call	95:64	95:74	8	strlen
arg	95:71	95:74	9	buf
water	95:71	0:0	10	buf
water	95:76	0:0	6	;
water	96:12	0:0	6	ptr
op	96:16	0:0	6	=
water	96:18	0:0	6	base64buf
water	96:27	0:0	6	;
water	97:8	0:0	6	}
call	98:8	98:53	4	ffurl_write
arg	98:20	98:35	5	rt->rtsp_hd_out
water	98:20	0:0	6	rt
op	98:22	0:0	6	->
water	98:24	0:0	6	rtsp_hd_out
arg	98:37	98:40	5	ptr
water	98:37	0:0	6	ptr
arg	98:42	98:53	5	strlen(ptr)
call	98:42	98:52	6	strlen
arg	98:49	98:52	7	ptr
water	98:49	0:0	8	ptr
water	98:54	0:0	4	;
water	99:8	0:0	4	rt
op	99:10	0:0	4	->
water	99:12	0:0	4	last_cmd_time
op	99:26	0:0	4	=
call	99:28	99:48	4	av_gettime_relative
water	99:49	0:0	4	;
if	103:8	104:33	4	(content_ptr)
cond	103:12	103:12	5	content_ptr
water	103:12	0:0	6	content_ptr
stmts	104:12	104:33	5	
call	104:12	104:32	6	av_freep
arg	104:21	104:32	7	content_ptr
water	104:21	0:0	8	content_ptr
water	104:33	0:0	6	;
if	109:8	110:22	4	(method)
cond	109:12	109:12	5	method
water	109:12	0:0	6	method
stmts	110:12	110:22	5	
goto	110:12	110:22	6	start
water	110:17	0:0	7	start
return	111:8	111:16	4	0
water	111:15	0:0	5	0
water	112:4	0:0	4	}
if	113:4	116:4	2	(rt -> seq != reply -> seq)
cond	113:8	113:26	3	rt -> seq != reply -> seq
water	113:8	0:0	4	rt
op	113:10	0:0	4	->
water	113:12	0:0	4	seq
op	113:16	0:0	4	!=
water	113:19	0:0	4	reply
op	113:24	0:0	4	->
water	113:26	0:0	4	seq
stmts	113:31	116:4	3	
water	113:31	0:0	4	{
call	114:8	115:31	4	av_log
arg	114:15	114:16	5	s
water	114:15	0:0	6	s
arg	114:18	114:32	5	AV_LOG_WARNING
water	114:18	0:0	6	AV_LOG_WARNING
arg	114:34	114:68	5	"CSeq %d expected, %d received.\n"
water	114:34	0:0	6	"CSeq %d expected, %d received.\n"
arg	115:12	115:19	5	rt->seq
water	115:12	0:0	6	rt
op	115:14	0:0	6	->
water	115:16	0:0	6	seq
arg	115:21	115:31	5	reply->seq
water	115:21	0:0	6	reply
op	115:26	0:0	6	->
water	115:28	0:0	6	seq
water	115:32	0:0	4	;
water	116:4	0:0	4	}
if	118:4	122:4	2	(reply -> notice == 2101 || reply -> notice == 2104 || reply -> notice == 2306)
cond	118:8	120:25	3	reply -> notice == 2101 || reply -> notice == 2104 || reply -> notice == 2306
water	118:8	0:0	4	reply
op	118:13	0:0	4	->
water	118:15	0:0	4	notice
op	118:22	0:0	4	==
water	118:25	0:0	4	2101
op	118:36	0:0	4	||
water	119:8	0:0	4	reply
op	119:13	0:0	4	->
water	119:15	0:0	4	notice
op	119:22	0:0	4	==
water	119:25	0:0	4	2104
op	119:34	0:0	4	||
water	120:8	0:0	4	reply
op	120:13	0:0	4	->
water	120:15	0:0	4	notice
op	120:22	0:0	4	==
water	120:25	0:0	4	2306
stmts	120:32	122:4	3	
water	120:32	0:0	4	{
water	121:8	0:0	4	rt
op	121:10	0:0	4	->
water	121:12	0:0	4	state
op	121:18	0:0	4	=
water	121:20	0:0	4	RTSP_STATE_IDLE
water	121:35	0:0	4	;
water	122:4	0:0	4	}
else	122:6	124:4	2
stmts	122:11	124:4	3	
if	122:11	124:4	4	(reply -> notice >= 4400 && reply -> notice < 5500)
cond	122:15	122:56	5	reply -> notice >= 4400 && reply -> notice < 5500
water	122:15	0:0	6	reply
op	122:20	0:0	6	->
water	122:22	0:0	6	notice
op	122:29	0:0	6	>=
water	122:32	0:0	6	4400
op	122:37	0:0	6	&&
water	122:40	0:0	6	reply
op	122:45	0:0	6	->
water	122:47	0:0	6	notice
op	122:54	0:0	6	<
water	122:56	0:0	6	5500
stmts	122:62	124:4	5	
water	122:62	0:0	6	{
return	123:8	123:27	6	AVERROR(EIO)
call	123:15	123:26	7	AVERROR
arg	123:23	123:26	8	EIO
water	123:23	0:0	9	EIO
water	124:4	0:0	6	}
else	124:6	126:29	2
stmts	124:11	126:29	3	
if	124:11	126:29	4	(reply -> notice == 2401 || ( reply -> notice >= 5500 && reply -> notice < 5600 ))
cond	124:15	125:59	5	reply -> notice == 2401 || ( reply -> notice >= 5500 && reply -> notice < 5600 )
water	124:15	0:0	6	reply
op	124:20	0:0	6	->
water	124:22	0:0	6	notice
op	124:29	0:0	6	==
water	124:32	0:0	6	2401
op	124:38	0:0	6	||
water	125:13	0:0	6	(
water	125:14	0:0	6	reply
op	125:19	0:0	6	->
water	125:21	0:0	6	notice
op	125:28	0:0	6	>=
water	125:31	0:0	6	5500
op	125:36	0:0	6	&&
water	125:39	0:0	6	reply
op	125:44	0:0	6	->
water	125:46	0:0	6	notice
op	125:53	0:0	6	<
water	125:55	0:0	6	5600
water	125:59	0:0	6	)
stmts	126:8	126:29	5	
return	126:8	126:29	6	AVERROR(EPERM)
call	126:15	126:28	7	AVERROR
arg	126:23	126:28	8	EPERM
water	126:23	0:0	9	EPERM
return	127:4	127:12	2	0
water	127:11	0:0	3	0
