func	1:0	24:0	0	static int	write_picture
params	1:24	0:0	1	
param	1:25	1:43	2	AVFormatContext *	s
param	1:45	1:60	2	AVPicture *	pict
stmnts	0:0	23:24	1	
decl	3:4	3:32	2	XVContext	*xv
op	3:18	0:0	2	=
water	3:20	0:0	2	s
op	3:21	0:0	2	->
water	3:23	0:0	2	priv_data
decl	4:4	4:32	2	XvImage	*img
op	4:17	0:0	2	=
water	4:19	0:0	2	xv
op	4:21	0:0	2	->
water	4:23	0:0	2	yuv_image
decl	5:4	9:5	2	uint8_t	*data[3]
op	5:21	0:0	2	=
water	5:23	0:0	2	{
water	6:8	0:0	2	img
op	6:11	0:0	2	->
water	6:13	0:0	2	data
op	6:18	0:0	2	+
water	6:20	0:0	2	img
op	6:23	0:0	2	->
water	6:25	0:0	2	offsets
op	6:32	0:0	2	[
water	6:33	0:0	2	0
op	6:34	0:0	2	]
water	6:35	0:0	2	,
water	7:8	0:0	2	img
op	7:11	0:0	2	->
water	7:13	0:0	2	data
op	7:18	0:0	2	+
water	7:20	0:0	2	img
op	7:23	0:0	2	->
water	7:25	0:0	2	offsets
op	7:32	0:0	2	[
water	7:33	0:0	2	1
op	7:34	0:0	2	]
water	7:35	0:0	2	,
water	8:8	0:0	2	img
op	8:11	0:0	2	->
water	8:13	0:0	2	data
op	8:18	0:0	2	+
water	8:20	0:0	2	img
op	8:23	0:0	2	->
water	8:25	0:0	2	offsets
op	8:32	0:0	2	[
water	8:33	0:0	2	2
op	8:34	0:0	2	]
water	9:4	0:0	2	}
if	11:4	20:4	2	(! xv -> window_id)
cond	11:8	11:13	3	! xv -> window_id
op	11:8	0:0	4	!
water	11:9	0:0	4	xv
op	11:11	0:0	4	->
water	11:13	0:0	4	window_id
stmts	11:24	20:4	3	
water	11:24	0:0	4	{
decl	12:8	12:20	4	XEvent	event
while	13:8	19:8	4	(XPending (xv -> display ))
cond	13:15	13:35	5	XPending (xv -> display )
call	13:15	13:35	6	XPending
arg	13:24	13:35	7	xv->display
water	13:24	0:0	8	xv
op	13:26	0:0	8	->
water	13:28	0:0	8	display
stmts	13:38	19:8	5	
water	13:38	0:0	6	{
call	14:12	14:42	6	XNextEvent
arg	14:23	14:34	7	xv->display
water	14:23	0:0	8	xv
op	14:25	0:0	8	->
water	14:27	0:0	8	display
arg	14:36	14:42	7	&event
op	14:36	0:0	8	&
water	14:37	0:0	8	event
water	14:43	0:0	6	;
if	15:12	18:12	6	(event . type == ClientMessage && event . xclient . data . l [ 0 ] == xv -> wm_delete_message)
cond	15:16	15:78	7	event . type == ClientMessage && event . xclient . data . l [ 0 ] == xv -> wm_delete_message
water	15:16	0:0	8	event
op	15:21	0:0	8	.
water	15:22	0:0	8	type
op	15:27	0:0	8	==
water	15:30	0:0	8	ClientMessage
op	15:44	0:0	8	&&
water	15:47	0:0	8	event
op	15:52	0:0	8	.
water	15:53	0:0	8	xclient
op	15:60	0:0	8	.
water	15:61	0:0	8	data
op	15:65	0:0	8	.
water	15:66	0:0	8	l
op	15:67	0:0	8	[
water	15:68	0:0	8	0
op	15:69	0:0	8	]
op	15:71	0:0	8	==
water	15:74	0:0	8	xv
op	15:76	0:0	8	->
water	15:78	0:0	8	wm_delete_message
stmts	15:97	18:12	7	
water	15:97	0:0	8	{
call	16:16	16:64	8	av_log
arg	16:23	16:25	9	xv
water	16:23	0:0	10	xv
arg	16:27	16:39	9	AV_LOG_DEBUG
water	16:27	0:0	10	AV_LOG_DEBUG
arg	16:41	16:64	9	"Window close event.\n"
water	16:41	0:0	10	"Window close event.\n"
water	16:65	0:0	8	;
return	17:16	17:37	8	AVERROR(EPIPE)
call	17:23	17:36	9	AVERROR
arg	17:31	17:36	10	EPIPE
water	17:31	0:0	11	EPIPE
water	18:12	0:0	8	}
water	19:8	0:0	6	}
water	20:4	0:0	4	}
call	21:4	22:59	2	av_image_copy
arg	21:18	21:22	3	data
water	21:18	0:0	4	data
arg	21:24	21:36	3	img->pitches
water	21:24	0:0	4	img
op	21:27	0:0	4	->
water	21:29	0:0	4	pitches
arg	21:38	21:66	3	(constuint8_t**)pict->data
water	21:38	0:0	4	(
water	21:39	0:0	4	const
water	21:45	0:0	4	uint8_t
op	21:53	0:0	4	*
op	21:54	0:0	4	*
water	21:55	0:0	4	)
water	21:56	0:0	4	pict
op	21:60	0:0	4	->
water	21:62	0:0	4	data
arg	21:68	21:82	3	pict->linesize
water	21:68	0:0	4	pict
op	21:72	0:0	4	->
water	21:74	0:0	4	linesize
arg	22:18	22:34	3	xv->image_format
water	22:18	0:0	4	xv
op	22:20	0:0	4	->
water	22:22	0:0	4	image_format
arg	22:36	22:46	3	img->width
water	22:36	0:0	4	img
op	22:39	0:0	4	->
water	22:41	0:0	4	width
arg	22:48	22:59	3	img->height
water	22:48	0:0	4	img
op	22:51	0:0	4	->
water	22:53	0:0	4	height
water	22:60	0:0	2	;
return	23:4	23:24	2	xv_repaint(s)
call	23:11	23:23	3	xv_repaint
arg	23:22	23:23	4	s
water	23:22	0:0	5	s
