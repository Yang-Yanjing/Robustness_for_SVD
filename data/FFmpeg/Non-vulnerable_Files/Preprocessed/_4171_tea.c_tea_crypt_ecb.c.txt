func	1:0	37:0	0	static void	tea_crypt_ecb
params	1:25	0:0	1	
param	1:26	1:36	2	AVTEA *	ctx
param	1:38	1:50	2	uint8_t *	dst
param	1:52	1:70	2	const uint8_t *	src
param	2:26	2:37	2	int	decrypt
param	2:39	2:50	2	uint8_t *	iv
stmnts	0:0	36:24	1	
decl	4:4	4:19	2	uint32_t	v0
water	4:15	0:0	2	,
decl	4:4	4:19	2	uint32_t	v1
decl	5:4	5:28	2	int	rounds
op	5:15	0:0	2	=
water	5:17	0:0	2	ctx
op	5:20	0:0	2	->
water	5:22	0:0	2	rounds
decl	6:4	6:27	2	uint32_t	k0
water	6:15	0:0	2	,
decl	6:4	6:27	2	uint32_t	k1
water	6:19	0:0	2	,
decl	6:4	6:27	2	uint32_t	k2
water	6:23	0:0	2	,
decl	6:4	6:27	2	uint32_t	k3
water	7:4	0:0	2	k0
op	7:7	0:0	2	=
water	7:9	0:0	2	ctx
op	7:12	0:0	2	->
water	7:14	0:0	2	key
op	7:17	0:0	2	[
water	7:18	0:0	2	0
op	7:19	0:0	2	]
water	7:20	0:0	2	;
water	8:4	0:0	2	k1
op	8:7	0:0	2	=
water	8:9	0:0	2	ctx
op	8:12	0:0	2	->
water	8:14	0:0	2	key
op	8:17	0:0	2	[
water	8:18	0:0	2	1
op	8:19	0:0	2	]
water	8:20	0:0	2	;
water	9:4	0:0	2	k2
op	9:7	0:0	2	=
water	9:9	0:0	2	ctx
op	9:12	0:0	2	->
water	9:14	0:0	2	key
op	9:17	0:0	2	[
water	9:18	0:0	2	2
op	9:19	0:0	2	]
water	9:20	0:0	2	;
water	10:4	0:0	2	k3
op	10:7	0:0	2	=
water	10:9	0:0	2	ctx
op	10:12	0:0	2	->
water	10:14	0:0	2	key
op	10:17	0:0	2	[
water	10:18	0:0	2	3
op	10:19	0:0	2	]
water	10:20	0:0	2	;
water	11:4	0:0	2	v0
op	11:7	0:0	2	=
call	11:9	11:20	2	AV_RB32
arg	11:17	11:20	3	src
water	11:17	0:0	4	src
water	11:21	0:0	2	;
water	12:4	0:0	2	v1
op	12:7	0:0	2	=
call	12:9	12:24	2	AV_RB32
arg	12:17	12:24	3	src+4
water	12:17	0:0	4	src
op	12:21	0:0	4	+
water	12:23	0:0	4	4
water	12:25	0:0	2	;
if	13:4	26:4	2	(decrypt)
cond	13:8	13:8	3	decrypt
water	13:8	0:0	4	decrypt
stmts	13:17	26:4	3	
water	13:17	0:0	4	{
decl	14:8	14:13	4	int	i
decl	15:8	15:64	4	uint32_t	delta
op	15:23	0:0	4	=
water	15:25	0:0	4	0
water	15:26	0:0	4	x9E3779B9U
water	15:36	0:0	4	,
decl	15:8	15:64	4	uint32_t	sum
op	15:42	0:0	4	=
water	15:44	0:0	4	delta
op	15:50	0:0	4	*
water	15:52	0:0	4	(
water	15:53	0:0	4	rounds
op	15:60	0:0	4	/
water	15:62	0:0	4	2
water	15:63	0:0	4	)
for	16:8	20:8	4	(i = 0 ;i < rounds / 2;i ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:33	5	i < rounds / 2
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	rounds
op	16:31	0:0	6	/
water	16:33	0:0	6	2
forexpr	16:36	16:37	5	i ++
water	16:36	0:0	6	i
op	16:37	0:0	6	++
stmts	16:41	20:8	5	
water	16:41	0:0	6	{
water	17:12	0:0	6	v1
op	17:15	0:0	6	-=
water	17:18	0:0	6	(
water	17:19	0:0	6	(
water	17:20	0:0	6	v0
op	17:23	0:0	6	<<
water	17:26	0:0	6	4
water	17:27	0:0	6	)
op	17:29	0:0	6	+
water	17:31	0:0	6	k2
water	17:33	0:0	6	)
op	17:35	0:0	6	^
water	17:37	0:0	6	(
water	17:38	0:0	6	v0
op	17:41	0:0	6	+
water	17:43	0:0	6	sum
water	17:46	0:0	6	)
op	17:48	0:0	6	^
water	17:50	0:0	6	(
water	17:51	0:0	6	(
water	17:52	0:0	6	v0
op	17:55	0:0	6	>>
water	17:58	0:0	6	5
water	17:59	0:0	6	)
op	17:61	0:0	6	+
water	17:63	0:0	6	k3
water	17:65	0:0	6	)
water	17:66	0:0	6	;
water	18:12	0:0	6	v0
op	18:15	0:0	6	-=
water	18:18	0:0	6	(
water	18:19	0:0	6	(
water	18:20	0:0	6	v1
op	18:23	0:0	6	<<
water	18:26	0:0	6	4
water	18:27	0:0	6	)
op	18:29	0:0	6	+
water	18:31	0:0	6	k0
water	18:33	0:0	6	)
op	18:35	0:0	6	^
water	18:37	0:0	6	(
water	18:38	0:0	6	v1
op	18:41	0:0	6	+
water	18:43	0:0	6	sum
water	18:46	0:0	6	)
op	18:48	0:0	6	^
water	18:50	0:0	6	(
water	18:51	0:0	6	(
water	18:52	0:0	6	v1
op	18:55	0:0	6	>>
water	18:58	0:0	6	5
water	18:59	0:0	6	)
op	18:61	0:0	6	+
water	18:63	0:0	6	k1
water	18:65	0:0	6	)
water	18:66	0:0	6	;
water	19:12	0:0	6	sum
op	19:16	0:0	6	-=
water	19:19	0:0	6	delta
water	19:24	0:0	6	;
water	20:8	0:0	6	}
if	21:8	25:8	4	(iv)
cond	21:12	21:12	5	iv
water	21:12	0:0	6	iv
stmts	21:16	25:8	5	
water	21:16	0:0	6	{
water	22:12	0:0	6	v0
op	22:15	0:0	6	^=
call	22:18	22:28	6	AV_RB32
arg	22:26	22:28	7	iv
water	22:26	0:0	8	iv
water	22:29	0:0	6	;
water	23:12	0:0	6	v1
op	23:15	0:0	6	^=
call	23:18	23:32	6	AV_RB32
arg	23:26	23:32	7	iv+4
water	23:26	0:0	8	iv
op	23:29	0:0	8	+
water	23:31	0:0	8	4
water	23:33	0:0	6	;
call	24:12	24:29	6	memcpy
arg	24:19	24:21	7	iv
water	24:19	0:0	8	iv
arg	24:23	24:26	7	src
water	24:23	0:0	8	src
arg	24:28	24:29	7	8
water	24:28	0:0	8	8
water	24:30	0:0	6	;
water	25:8	0:0	6	}
water	26:4	0:0	4	}
else	26:6	34:4	2
stmts	26:11	34:4	3	
water	26:11	0:0	4	{
decl	27:8	27:13	4	int	i
decl	28:8	28:45	4	uint32_t	sum
op	28:21	0:0	4	=
water	28:23	0:0	4	0
water	28:24	0:0	4	,
decl	28:8	28:45	4	uint32_t	delta
op	28:32	0:0	4	=
water	28:34	0:0	4	0
water	28:35	0:0	4	x9E3779B9U
for	29:8	33:8	4	(i = 0 ;i < rounds / 2;i ++)
forinit	29:13	29:18	5	i = 0 ;
water	29:13	0:0	6	i
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:33	5	i < rounds / 2
water	29:20	0:0	6	i
op	29:22	0:0	6	<
water	29:24	0:0	6	rounds
op	29:31	0:0	6	/
water	29:33	0:0	6	2
forexpr	29:36	29:37	5	i ++
water	29:36	0:0	6	i
op	29:37	0:0	6	++
stmts	29:41	33:8	5	
water	29:41	0:0	6	{
water	30:12	0:0	6	sum
op	30:16	0:0	6	+=
water	30:19	0:0	6	delta
water	30:24	0:0	6	;
water	31:12	0:0	6	v0
op	31:15	0:0	6	+=
water	31:18	0:0	6	(
water	31:19	0:0	6	(
water	31:20	0:0	6	v1
op	31:23	0:0	6	<<
water	31:26	0:0	6	4
water	31:27	0:0	6	)
op	31:29	0:0	6	+
water	31:31	0:0	6	k0
water	31:33	0:0	6	)
op	31:35	0:0	6	^
water	31:37	0:0	6	(
water	31:38	0:0	6	v1
op	31:41	0:0	6	+
water	31:43	0:0	6	sum
water	31:46	0:0	6	)
op	31:48	0:0	6	^
water	31:50	0:0	6	(
water	31:51	0:0	6	(
water	31:52	0:0	6	v1
op	31:55	0:0	6	>>
water	31:58	0:0	6	5
water	31:59	0:0	6	)
op	31:61	0:0	6	+
water	31:63	0:0	6	k1
water	31:65	0:0	6	)
water	31:66	0:0	6	;
water	32:12	0:0	6	v1
op	32:15	0:0	6	+=
water	32:18	0:0	6	(
water	32:19	0:0	6	(
water	32:20	0:0	6	v0
op	32:23	0:0	6	<<
water	32:26	0:0	6	4
water	32:27	0:0	6	)
op	32:29	0:0	6	+
water	32:31	0:0	6	k2
water	32:33	0:0	6	)
op	32:35	0:0	6	^
water	32:37	0:0	6	(
water	32:38	0:0	6	v0
op	32:41	0:0	6	+
water	32:43	0:0	6	sum
water	32:46	0:0	6	)
op	32:48	0:0	6	^
water	32:50	0:0	6	(
water	32:51	0:0	6	(
water	32:52	0:0	6	v0
op	32:55	0:0	6	>>
water	32:58	0:0	6	5
water	32:59	0:0	6	)
op	32:61	0:0	6	+
water	32:63	0:0	6	k3
water	32:65	0:0	6	)
water	32:66	0:0	6	;
water	33:8	0:0	6	}
water	34:4	0:0	4	}
call	35:4	35:19	2	AV_WB32
arg	35:12	35:15	3	dst
water	35:12	0:0	4	dst
arg	35:17	35:19	3	v0
water	35:17	0:0	4	v0
water	35:20	0:0	2	;
call	36:4	36:23	2	AV_WB32
arg	36:12	36:19	3	dst+4
water	36:12	0:0	4	dst
op	36:16	0:0	4	+
water	36:18	0:0	4	4
arg	36:21	36:23	3	v1
water	36:21	0:0	4	v1
water	36:24	0:0	2	;
