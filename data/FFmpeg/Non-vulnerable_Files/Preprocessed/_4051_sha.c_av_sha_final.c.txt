func	1:0	11:0	0	void	av_sha_final
params	1:17	0:0	1	
param	1:18	1:28	2	AVSHA *	ctx
param	1:30	1:45	2	uint8_t *	digest
stmnts	0:0	10:44	1	
decl	3:4	3:9	2	int	i
decl	4:4	4:53	2	uint64_t	finalcount
op	4:24	0:0	2	=
call	4:26	4:52	3	av_be2ne64
arg	4:37	4:52	4	ctx->count<<3
water	4:37	0:0	5	ctx
op	4:40	0:0	5	->
water	4:42	0:0	5	count
op	4:48	0:0	5	<<
water	4:51	0:0	5	3
call	5:4	5:32	2	av_sha_update
arg	5:18	5:21	3	ctx
water	5:18	0:0	4	ctx
arg	5:23	5:29	3	"\200"
water	5:23	0:0	4	"\200"
arg	5:31	5:32	3	1
water	5:31	0:0	4	1
water	5:33	0:0	2	;
while	6:4	7:33	2	(( ctx -> count & 63 ) != 56)
cond	6:11	6:32	3	( ctx -> count & 63 ) != 56
water	6:11	0:0	4	(
water	6:12	0:0	4	ctx
op	6:15	0:0	4	->
water	6:17	0:0	4	count
op	6:23	0:0	4	&
water	6:25	0:0	4	63
water	6:27	0:0	4	)
op	6:29	0:0	4	!=
water	6:32	0:0	4	56
stmts	7:8	7:33	3	
call	7:8	7:32	4	av_sha_update
arg	7:22	7:25	5	ctx
water	7:22	0:0	6	ctx
arg	7:27	7:29	5	""
water	7:27	0:0	6	""
arg	7:31	7:32	5	1
water	7:31	0:0	6	1
water	7:33	0:0	4	;
call	8:4	8:48	2	av_sha_update
arg	8:18	8:21	3	ctx
water	8:18	0:0	4	ctx
arg	8:23	8:45	3	(uint8_t*)&finalcount
water	8:23	0:0	4	(
water	8:24	0:0	4	uint8_t
op	8:32	0:0	4	*
water	8:33	0:0	4	)
op	8:34	0:0	4	&
water	8:35	0:0	4	finalcount
arg	8:47	8:48	3	8
water	8:47	0:0	4	8
water	8:49	0:0	2	;
for	9:4	10:44	2	(i = 0 ;i < ctx -> digest_len;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:25	3	i < ctx -> digest_len
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	ctx
op	9:23	0:0	4	->
water	9:25	0:0	4	digest_len
forexpr	9:37	9:38	3	i ++
water	9:37	0:0	4	i
op	9:38	0:0	4	++
stmts	10:8	10:44	3	
call	10:8	10:43	4	AV_WB32
arg	10:16	10:28	5	digest+i*4
water	10:16	0:0	6	digest
op	10:23	0:0	6	+
water	10:25	0:0	6	i
op	10:26	0:0	6	*
water	10:27	0:0	6	4
arg	10:30	10:43	5	ctx->state[i]
water	10:30	0:0	6	ctx
op	10:33	0:0	6	->
water	10:35	0:0	6	state
op	10:40	0:0	6	[
water	10:41	0:0	6	i
op	10:42	0:0	6	]
water	10:44	0:0	4	;
