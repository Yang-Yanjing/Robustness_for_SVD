func	1:0	52:0	0	static int	write_headers
params	1:24	0:0	1	
param	1:25	1:47	2	AVFormatContext *	avctx
param	1:49	1:64	2	AVIOContext *	bc
stmnts	0:0	51:12	1	
decl	3:4	3:38	2	NUTContext	*nut
op	3:20	0:0	2	=
water	3:22	0:0	2	avctx
op	3:27	0:0	2	->
water	3:29	0:0	2	priv_data
decl	4:4	4:23	2	AVIOContext	*dyn_bc
decl	5:4	5:14	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:14	2	int	ret
call	6:4	6:58	2	ff_metadata_conv_ctx
arg	6:25	6:30	3	avctx
water	6:25	0:0	4	avctx
arg	6:32	6:52	3	ff_nut_metadata_conv
water	6:32	0:0	4	ff_nut_metadata_conv
arg	6:54	6:58	3	NULL
water	6:54	0:0	4	NULL
water	6:59	0:0	2	;
water	7:4	0:0	2	ret
op	7:8	0:0	2	=
call	7:10	7:35	2	avio_open_dyn_buf
arg	7:28	7:35	3	&dyn_bc
op	7:28	0:0	4	&
water	7:29	0:0	4	dyn_bc
water	7:36	0:0	2	;
if	8:4	9:18	2	(ret < 0)
cond	8:8	8:14	3	ret < 0
water	8:8	0:0	4	ret
op	8:12	0:0	4	<
water	8:14	0:0	4	0
stmts	9:8	9:18	3	
return	9:8	9:18	4	ret
water	9:15	0:0	5	ret
call	10:4	10:32	2	write_mainheader
arg	10:21	10:24	3	nut
water	10:21	0:0	4	nut
arg	10:26	10:32	3	dyn_bc
water	10:26	0:0	4	dyn_bc
water	10:33	0:0	2	;
call	11:4	11:49	2	put_packet
arg	11:15	11:18	3	nut
water	11:15	0:0	4	nut
arg	11:20	11:22	3	bc
water	11:20	0:0	4	bc
arg	11:24	11:30	3	dyn_bc
water	11:24	0:0	4	dyn_bc
arg	11:32	11:33	3	1
water	11:32	0:0	4	1
arg	11:35	11:49	3	MAIN_STARTCODE
water	11:35	0:0	4	MAIN_STARTCODE
water	11:50	0:0	2	;
for	12:4	20:4	2	(i = 0 ;i < nut -> avf -> nb_streams;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:30	3	i < nut -> avf -> nb_streams
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	nut
op	12:23	0:0	4	->
water	12:25	0:0	4	avf
op	12:28	0:0	4	->
water	12:30	0:0	4	nb_streams
forexpr	12:42	12:43	3	i ++
water	12:42	0:0	4	i
op	12:43	0:0	4	++
stmts	12:47	20:4	3	
water	12:47	0:0	4	{
water	13:8	0:0	4	ret
op	13:12	0:0	4	=
call	13:14	13:39	4	avio_open_dyn_buf
arg	13:32	13:39	5	&dyn_bc
op	13:32	0:0	6	&
water	13:33	0:0	6	dyn_bc
water	13:40	0:0	4	;
if	14:8	15:22	4	(ret < 0)
cond	14:12	14:18	5	ret < 0
water	14:12	0:0	6	ret
op	14:16	0:0	6	<
water	14:18	0:0	6	0
stmts	15:12	15:22	5	
return	15:12	15:22	6	ret
water	15:19	0:0	7	ret
water	16:8	0:0	4	ret
op	16:12	0:0	4	=
call	16:14	16:71	4	write_streamheader
arg	16:33	16:38	5	avctx
water	16:33	0:0	6	avctx
arg	16:40	16:46	5	dyn_bc
water	16:40	0:0	6	dyn_bc
arg	16:48	16:68	5	nut->avf->streams[i]
water	16:48	0:0	6	nut
op	16:51	0:0	6	->
water	16:53	0:0	6	avf
op	16:56	0:0	6	->
water	16:58	0:0	6	streams
op	16:65	0:0	6	[
water	16:66	0:0	6	i
op	16:67	0:0	6	]
arg	16:70	16:71	5	i
water	16:70	0:0	6	i
water	16:72	0:0	4	;
if	17:8	18:22	4	(ret < 0)
cond	17:12	17:18	5	ret < 0
water	17:12	0:0	6	ret
op	17:16	0:0	6	<
water	17:18	0:0	6	0
stmts	18:12	18:22	5	
return	18:12	18:22	6	ret
water	18:19	0:0	7	ret
call	19:8	19:55	4	put_packet
arg	19:19	19:22	5	nut
water	19:19	0:0	6	nut
arg	19:24	19:26	5	bc
water	19:24	0:0	6	bc
arg	19:28	19:34	5	dyn_bc
water	19:28	0:0	6	dyn_bc
arg	19:36	19:37	5	1
water	19:36	0:0	6	1
arg	19:39	19:55	5	STREAM_STARTCODE
water	19:39	0:0	6	STREAM_STARTCODE
water	19:56	0:0	4	;
water	20:4	0:0	4	}
water	21:4	0:0	2	ret
op	21:8	0:0	2	=
call	21:10	21:35	2	avio_open_dyn_buf
arg	21:28	21:35	3	&dyn_bc
op	21:28	0:0	4	&
water	21:29	0:0	4	dyn_bc
water	21:36	0:0	2	;
if	22:4	23:18	2	(ret < 0)
cond	22:8	22:14	3	ret < 0
water	22:8	0:0	4	ret
op	22:12	0:0	4	<
water	22:14	0:0	4	0
stmts	23:8	23:18	3	
return	23:8	23:18	4	ret
water	23:15	0:0	5	ret
call	24:4	24:32	2	write_globalinfo
arg	24:21	24:24	3	nut
water	24:21	0:0	4	nut
arg	24:26	24:32	3	dyn_bc
water	24:26	0:0	4	dyn_bc
water	24:33	0:0	2	;
call	25:4	25:49	2	put_packet
arg	25:15	25:18	3	nut
water	25:15	0:0	4	nut
arg	25:20	25:22	3	bc
water	25:20	0:0	4	bc
arg	25:24	25:30	3	dyn_bc
water	25:24	0:0	4	dyn_bc
arg	25:32	25:33	3	1
water	25:32	0:0	4	1
arg	25:35	25:49	3	INFO_STARTCODE
water	25:35	0:0	4	INFO_STARTCODE
water	25:50	0:0	2	;
for	26:4	37:4	2	(i = 0 ;i < nut -> avf -> nb_streams;i ++)
forinit	26:9	26:14	3	i = 0 ;
water	26:9	0:0	4	i
op	26:11	0:0	4	=
water	26:13	0:0	4	0
water	26:14	0:0	4	;
cond	26:16	26:30	3	i < nut -> avf -> nb_streams
water	26:16	0:0	4	i
op	26:18	0:0	4	<
water	26:20	0:0	4	nut
op	26:23	0:0	4	->
water	26:25	0:0	4	avf
op	26:28	0:0	4	->
water	26:30	0:0	4	nb_streams
forexpr	26:42	26:43	3	i ++
water	26:42	0:0	4	i
op	26:43	0:0	4	++
stmts	26:47	37:4	3	
water	26:47	0:0	4	{
water	27:8	0:0	4	ret
op	27:12	0:0	4	=
call	27:14	27:39	4	avio_open_dyn_buf
arg	27:32	27:39	5	&dyn_bc
op	27:32	0:0	6	&
water	27:33	0:0	6	dyn_bc
water	27:40	0:0	4	;
if	28:8	29:22	4	(ret < 0)
cond	28:12	28:18	5	ret < 0
water	28:12	0:0	6	ret
op	28:16	0:0	6	<
water	28:18	0:0	6	0
stmts	29:12	29:22	5	
return	29:12	29:22	6	ret
water	29:19	0:0	7	ret
water	30:8	0:0	4	ret
op	30:12	0:0	4	=
call	30:14	30:45	4	write_streaminfo
arg	30:31	30:34	5	nut
water	30:31	0:0	6	nut
arg	30:36	30:42	5	dyn_bc
water	30:36	0:0	6	dyn_bc
arg	30:44	30:45	5	i
water	30:44	0:0	6	i
water	30:46	0:0	4	;
if	31:8	32:22	4	(ret < 0)
cond	31:12	31:18	5	ret < 0
water	31:12	0:0	6	ret
op	31:16	0:0	6	<
water	31:18	0:0	6	0
stmts	32:12	32:22	5	
return	32:12	32:22	6	ret
water	32:19	0:0	7	ret
if	33:8	34:58	4	(ret > 0)
cond	33:12	33:18	5	ret > 0
water	33:12	0:0	6	ret
op	33:16	0:0	6	>
water	33:18	0:0	6	0
stmts	34:12	34:58	5	
call	34:12	34:57	6	put_packet
arg	34:23	34:26	7	nut
water	34:23	0:0	8	nut
arg	34:28	34:30	7	bc
water	34:28	0:0	8	bc
arg	34:32	34:38	7	dyn_bc
water	34:32	0:0	8	dyn_bc
arg	34:40	34:41	7	1
water	34:40	0:0	8	1
arg	34:43	34:57	7	INFO_STARTCODE
water	34:43	0:0	8	INFO_STARTCODE
water	34:58	0:0	6	;
else	35:8	36:38	4
stmts	36:12	36:38	5	
call	36:12	36:37	6	ffio_free_dyn_buf
arg	36:30	36:37	7	&dyn_bc
op	36:30	0:0	8	&
water	36:31	0:0	8	dyn_bc
water	36:38	0:0	6	;
water	37:4	0:0	4	}
for	38:4	48:4	2	(i = 0 ;i < nut -> avf -> nb_chapters;i ++)
forinit	38:9	38:14	3	i = 0 ;
water	38:9	0:0	4	i
op	38:11	0:0	4	=
water	38:13	0:0	4	0
water	38:14	0:0	4	;
cond	38:16	38:30	3	i < nut -> avf -> nb_chapters
water	38:16	0:0	4	i
op	38:18	0:0	4	<
water	38:20	0:0	4	nut
op	38:23	0:0	4	->
water	38:25	0:0	4	avf
op	38:28	0:0	4	->
water	38:30	0:0	4	nb_chapters
forexpr	38:43	38:44	3	i ++
water	38:43	0:0	4	i
op	38:44	0:0	4	++
stmts	38:48	48:4	3	
water	38:48	0:0	4	{
water	39:8	0:0	4	ret
op	39:12	0:0	4	=
call	39:14	39:39	4	avio_open_dyn_buf
arg	39:32	39:39	5	&dyn_bc
op	39:32	0:0	6	&
water	39:33	0:0	6	dyn_bc
water	39:40	0:0	4	;
if	40:8	41:22	4	(ret < 0)
cond	40:12	40:18	5	ret < 0
water	40:12	0:0	6	ret
op	40:16	0:0	6	<
water	40:18	0:0	6	0
stmts	41:12	41:22	5	
return	41:12	41:22	6	ret
water	41:19	0:0	7	ret
water	42:8	0:0	4	ret
op	42:12	0:0	4	=
call	42:14	42:42	4	write_chapter
arg	42:28	42:31	5	nut
water	42:28	0:0	6	nut
arg	42:33	42:39	5	dyn_bc
water	42:33	0:0	6	dyn_bc
arg	42:41	42:42	5	i
water	42:41	0:0	6	i
water	42:43	0:0	4	;
if	43:8	46:8	4	(ret < 0)
cond	43:12	43:18	5	ret < 0
water	43:12	0:0	6	ret
op	43:16	0:0	6	<
water	43:18	0:0	6	0
stmts	43:21	46:8	5	
water	43:21	0:0	6	{
call	44:12	44:37	6	ffio_free_dyn_buf
arg	44:30	44:37	7	&dyn_bc
op	44:30	0:0	8	&
water	44:31	0:0	8	dyn_bc
water	44:38	0:0	6	;
return	45:12	45:22	6	ret
water	45:19	0:0	7	ret
water	46:8	0:0	6	}
call	47:8	47:53	4	put_packet
arg	47:19	47:22	5	nut
water	47:19	0:0	6	nut
arg	47:24	47:26	5	bc
water	47:24	0:0	6	bc
arg	47:28	47:34	5	dyn_bc
water	47:28	0:0	6	dyn_bc
arg	47:36	47:37	5	1
water	47:36	0:0	6	1
arg	47:39	47:53	5	INFO_STARTCODE
water	47:39	0:0	6	INFO_STARTCODE
water	47:54	0:0	4	;
water	48:4	0:0	4	}
water	49:4	0:0	2	nut
op	49:7	0:0	2	->
water	49:9	0:0	2	last_syncpoint_pos
op	49:28	0:0	2	=
water	49:30	0:0	2	INT_MIN
water	49:37	0:0	2	;
water	50:4	0:0	2	nut
op	50:7	0:0	2	->
water	50:9	0:0	2	header_count
op	50:21	0:0	2	++
water	50:23	0:0	2	;
return	51:4	51:12	2	0
water	51:11	0:0	3	0
