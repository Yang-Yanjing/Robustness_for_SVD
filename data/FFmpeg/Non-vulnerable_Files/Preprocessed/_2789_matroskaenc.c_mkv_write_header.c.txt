func	1:0	151:0	0	static int	mkv_write_header
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
stmnts	0:0	150:14	1	
decl	3:4	3:42	2	MatroskaMuxContext	*mkv
op	3:28	0:0	2	=
water	3:30	0:0	2	s
op	3:31	0:0	2	->
water	3:33	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:41	2	ebml_master	ebml_header
water	5:27	0:0	2	,
decl	5:4	5:41	2	ebml_master	segment_info
decl	6:4	6:26	2	AVDictionaryEntry	*tag
decl	7:4	7:27	2	int	ret
water	7:11	0:0	2	,
decl	7:4	7:27	2	int	i
water	7:14	0:0	2	,
decl	7:4	7:27	2	int	version
op	7:24	0:0	2	=
water	7:26	0:0	2	2
if	8:4	9:29	2	(!strcmp (s -> oformat -> name ,"webm" ))
cond	8:8	8:40	3	!strcmp (s -> oformat -> name ,"webm" )
op	8:8	0:0	4	!
call	8:9	8:40	4	strcmp
arg	8:16	8:32	5	s->oformat->name
water	8:16	0:0	6	s
op	8:17	0:0	6	->
water	8:19	0:0	6	oformat
op	8:26	0:0	6	->
water	8:28	0:0	6	name
arg	8:34	8:40	5	"webm"
water	8:34	0:0	6	"webm"
stmts	9:8	9:29	3	
water	9:8	0:0	4	mkv
op	9:11	0:0	4	->
water	9:13	0:0	4	mode
op	9:18	0:0	4	=
water	9:20	0:0	4	MODE_WEBM
water	9:29	0:0	4	;
else	10:4	11:35	2
stmts	11:8	11:35	3	
water	11:8	0:0	4	mkv
op	11:11	0:0	4	->
water	11:13	0:0	4	mode
op	11:18	0:0	4	=
water	11:20	0:0	4	MODE_MATROSKAv2
water	11:35	0:0	4	;
if	12:4	15:4	2	(s -> avoid_negative_ts < 0)
cond	12:8	12:31	3	s -> avoid_negative_ts < 0
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	avoid_negative_ts
op	12:29	0:0	4	<
water	12:31	0:0	4	0
stmts	12:34	15:4	3	
water	12:34	0:0	4	{
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	avoid_negative_ts
op	13:29	0:0	4	=
water	13:31	0:0	4	1
water	13:32	0:0	4	;
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	internal
op	14:19	0:0	4	->
water	14:21	0:0	4	avoid_negative_ts_use_pts
op	14:47	0:0	4	=
water	14:49	0:0	4	1
water	14:50	0:0	4	;
water	15:4	0:0	4	}
if	16:4	19:19	2	(mkv -> mode != MODE_WEBM ||av_dict_get (s -> metadata ,"stereo_mode" ,NULL ,0 ) ||av_dict_get (s -> metadata ,"alpha_mode" ,NULL ,0 ))
cond	16:8	18:54	3	mkv -> mode != MODE_WEBM ||av_dict_get (s -> metadata ,"stereo_mode" ,NULL ,0 ) ||av_dict_get (s -> metadata ,"alpha_mode" ,NULL ,0 )
water	16:8	0:0	4	mkv
op	16:11	0:0	4	->
water	16:13	0:0	4	mode
op	16:18	0:0	4	!=
water	16:21	0:0	4	MODE_WEBM
op	16:31	0:0	4	||
call	17:8	17:55	4	av_dict_get
arg	17:20	17:31	5	s->metadata
water	17:20	0:0	6	s
op	17:21	0:0	6	->
water	17:23	0:0	6	metadata
arg	17:33	17:46	5	"stereo_mode"
water	17:33	0:0	6	"stereo_mode"
arg	17:48	17:52	5	NULL
water	17:48	0:0	6	NULL
arg	17:54	17:55	5	0
water	17:54	0:0	6	0
op	17:57	0:0	4	||
call	18:8	18:54	4	av_dict_get
arg	18:20	18:31	5	s->metadata
water	18:20	0:0	6	s
op	18:21	0:0	6	->
water	18:23	0:0	6	metadata
arg	18:33	18:45	5	"alpha_mode"
water	18:33	0:0	6	"alpha_mode"
arg	18:47	18:51	5	NULL
water	18:47	0:0	6	NULL
arg	18:53	18:54	5	0
water	18:53	0:0	6	0
stmts	19:8	19:19	3	
water	19:8	0:0	4	version
op	19:16	0:0	4	=
water	19:18	0:0	4	4
water	19:19	0:0	4	;
for	20:4	36:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	20:9	20:14	3	i = 0 ;
water	20:9	0:0	4	i
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:23	3	i < s -> nb_streams
water	20:16	0:0	4	i
op	20:18	0:0	4	<
water	20:20	0:0	4	s
op	20:21	0:0	4	->
water	20:23	0:0	4	nb_streams
forexpr	20:35	20:36	3	i ++
water	20:35	0:0	4	i
op	20:36	0:0	4	++
stmts	20:40	36:4	3	
water	20:40	0:0	4	{
if	21:8	31:8	4	(s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_ATRAC3 || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_COOK || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_RA_288 || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_SIPR || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_RV10 || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_RV20)
cond	21:12	26:46	5	s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_ATRAC3 || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_COOK || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_RA_288 || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_SIPR || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_RV10 || s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_RV20
water	21:12	0:0	6	s
op	21:13	0:0	6	->
water	21:15	0:0	6	streams
op	21:22	0:0	6	[
water	21:23	0:0	6	i
op	21:24	0:0	6	]
op	21:25	0:0	6	->
water	21:27	0:0	6	codec
op	21:32	0:0	6	->
water	21:34	0:0	6	codec_id
op	21:43	0:0	6	==
water	21:46	0:0	6	AV_CODEC_ID_ATRAC3
op	21:65	0:0	6	||
water	22:12	0:0	6	s
op	22:13	0:0	6	->
water	22:15	0:0	6	streams
op	22:22	0:0	6	[
water	22:23	0:0	6	i
op	22:24	0:0	6	]
op	22:25	0:0	6	->
water	22:27	0:0	6	codec
op	22:32	0:0	6	->
water	22:34	0:0	6	codec_id
op	22:43	0:0	6	==
water	22:46	0:0	6	AV_CODEC_ID_COOK
op	22:63	0:0	6	||
water	23:12	0:0	6	s
op	23:13	0:0	6	->
water	23:15	0:0	6	streams
op	23:22	0:0	6	[
water	23:23	0:0	6	i
op	23:24	0:0	6	]
op	23:25	0:0	6	->
water	23:27	0:0	6	codec
op	23:32	0:0	6	->
water	23:34	0:0	6	codec_id
op	23:43	0:0	6	==
water	23:46	0:0	6	AV_CODEC_ID_RA_288
op	23:65	0:0	6	||
water	24:12	0:0	6	s
op	24:13	0:0	6	->
water	24:15	0:0	6	streams
op	24:22	0:0	6	[
water	24:23	0:0	6	i
op	24:24	0:0	6	]
op	24:25	0:0	6	->
water	24:27	0:0	6	codec
op	24:32	0:0	6	->
water	24:34	0:0	6	codec_id
op	24:43	0:0	6	==
water	24:46	0:0	6	AV_CODEC_ID_SIPR
op	24:63	0:0	6	||
water	25:12	0:0	6	s
op	25:13	0:0	6	->
water	25:15	0:0	6	streams
op	25:22	0:0	6	[
water	25:23	0:0	6	i
op	25:24	0:0	6	]
op	25:25	0:0	6	->
water	25:27	0:0	6	codec
op	25:32	0:0	6	->
water	25:34	0:0	6	codec_id
op	25:43	0:0	6	==
water	25:46	0:0	6	AV_CODEC_ID_RV10
op	25:63	0:0	6	||
water	26:12	0:0	6	s
op	26:13	0:0	6	->
water	26:15	0:0	6	streams
op	26:22	0:0	6	[
water	26:23	0:0	6	i
op	26:24	0:0	6	]
op	26:25	0:0	6	->
water	26:27	0:0	6	codec
op	26:32	0:0	6	->
water	26:34	0:0	6	codec_id
op	26:43	0:0	6	==
water	26:46	0:0	6	AV_CODEC_ID_RV20
stmts	26:64	31:8	5	
water	26:64	0:0	6	{
call	27:12	29:67	6	av_log
arg	27:19	27:20	7	s
water	27:19	0:0	8	s
arg	27:22	27:34	7	AV_LOG_ERROR
water	27:22	0:0	8	AV_LOG_ERROR
arg	28:19	28:72	7	"The Matroska muxer does not yet support muxing %s\n"
water	28:19	0:0	8	"The Matroska muxer does not yet support muxing %s\n"
arg	29:19	29:67	7	avcodec_get_name(s->streams[i]->codec->codec_id)
call	29:19	29:66	8	avcodec_get_name
arg	29:36	29:66	9	s->streams[i]->codec->codec_id
water	29:36	0:0	10	s
op	29:37	0:0	10	->
water	29:39	0:0	10	streams
op	29:46	0:0	10	[
water	29:47	0:0	10	i
op	29:48	0:0	10	]
op	29:49	0:0	10	->
water	29:51	0:0	10	codec
op	29:56	0:0	10	->
water	29:58	0:0	10	codec_id
water	29:68	0:0	6	;
return	30:12	30:39	6	AVERROR_PATCHWELCOME
water	30:19	0:0	7	AVERROR_PATCHWELCOME
water	31:8	0:0	6	}
if	32:8	35:23	4	(s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_OPUS ||av_dict_get (s -> streams [ i ] -> metadata ,"stereo_mode" ,NULL ,0 ) ||av_dict_get (s -> streams [ i ] -> metadata ,"alpha_mode" ,NULL ,0 ))
cond	32:12	34:70	5	s -> streams [ i ] -> codec -> codec_id == AV_CODEC_ID_OPUS ||av_dict_get (s -> streams [ i ] -> metadata ,"stereo_mode" ,NULL ,0 ) ||av_dict_get (s -> streams [ i ] -> metadata ,"alpha_mode" ,NULL ,0 )
water	32:12	0:0	6	s
op	32:13	0:0	6	->
water	32:15	0:0	6	streams
op	32:22	0:0	6	[
water	32:23	0:0	6	i
op	32:24	0:0	6	]
op	32:25	0:0	6	->
water	32:27	0:0	6	codec
op	32:32	0:0	6	->
water	32:34	0:0	6	codec_id
op	32:43	0:0	6	==
water	32:46	0:0	6	AV_CODEC_ID_OPUS
op	32:63	0:0	6	||
call	33:12	33:71	6	av_dict_get
arg	33:24	33:47	7	s->streams[i]->metadata
water	33:24	0:0	8	s
op	33:25	0:0	8	->
water	33:27	0:0	8	streams
op	33:34	0:0	8	[
water	33:35	0:0	8	i
op	33:36	0:0	8	]
op	33:37	0:0	8	->
water	33:39	0:0	8	metadata
arg	33:49	33:62	7	"stereo_mode"
water	33:49	0:0	8	"stereo_mode"
arg	33:64	33:68	7	NULL
water	33:64	0:0	8	NULL
arg	33:70	33:71	7	0
water	33:70	0:0	8	0
op	33:73	0:0	6	||
call	34:12	34:70	6	av_dict_get
arg	34:24	34:47	7	s->streams[i]->metadata
water	34:24	0:0	8	s
op	34:25	0:0	8	->
water	34:27	0:0	8	streams
op	34:34	0:0	8	[
water	34:35	0:0	8	i
op	34:36	0:0	8	]
op	34:37	0:0	8	->
water	34:39	0:0	8	metadata
arg	34:49	34:61	7	"alpha_mode"
water	34:49	0:0	8	"alpha_mode"
arg	34:63	34:67	7	NULL
water	34:63	0:0	8	NULL
arg	34:69	34:70	7	0
water	34:69	0:0	8	0
stmts	35:12	35:23	5	
water	35:12	0:0	6	version
op	35:20	0:0	6	=
water	35:22	0:0	6	4
water	35:23	0:0	6	;
water	36:4	0:0	4	}
water	37:4	0:0	2	mkv
op	37:7	0:0	2	->
water	37:9	0:0	2	tracks
op	37:16	0:0	2	=
call	37:18	37:70	2	av_mallocz_array
arg	37:35	37:48	3	s->nb_streams
water	37:35	0:0	4	s
op	37:36	0:0	4	->
water	37:38	0:0	4	nb_streams
arg	37:50	37:70	3	sizeof(*mkv->tracks)
op	37:50	0:0	4	sizeof
water	37:56	0:0	4	(
op	37:57	0:0	4	*
water	37:58	0:0	4	mkv
op	37:61	0:0	4	->
water	37:63	0:0	4	tracks
water	37:69	0:0	4	)
water	37:71	0:0	2	;
if	38:4	41:4	2	(! mkv -> tracks)
cond	38:8	38:14	3	! mkv -> tracks
op	38:8	0:0	4	!
water	38:9	0:0	4	mkv
op	38:12	0:0	4	->
water	38:14	0:0	4	tracks
stmts	38:22	41:4	3	
water	38:22	0:0	4	{
water	39:8	0:0	4	ret
op	39:12	0:0	4	=
call	39:14	39:28	4	AVERROR
arg	39:22	39:28	5	ENOMEM
water	39:22	0:0	6	ENOMEM
water	39:29	0:0	4	;
goto	40:8	40:17	4	fail
water	40:13	0:0	5	fail
water	41:4	0:0	4	}
water	42:4	0:0	2	ebml_header
op	42:16	0:0	2	=
call	42:18	42:57	2	start_ebml_master
arg	42:36	42:38	3	pb
water	42:36	0:0	4	pb
arg	42:40	42:54	3	EBML_ID_HEADER
water	42:40	0:0	4	EBML_ID_HEADER
arg	42:56	42:57	3	0
water	42:56	0:0	4	0
water	42:58	0:0	2	;
call	43:4	43:65	2	put_ebml_uint
arg	43:21	43:23	3	pb
water	43:21	0:0	4	pb
arg	43:25	43:52	3	EBML_ID_EBMLVERSION
water	43:25	0:0	4	EBML_ID_EBMLVERSION
arg	43:64	43:65	3	1
water	43:64	0:0	4	1
water	43:66	0:0	2	;
call	44:4	44:65	2	put_ebml_uint
arg	44:21	44:23	3	pb
water	44:21	0:0	4	pb
arg	44:25	44:52	3	EBML_ID_EBMLREADVERSION
water	44:25	0:0	4	EBML_ID_EBMLREADVERSION
arg	44:64	44:65	3	1
water	44:64	0:0	4	1
water	44:66	0:0	2	;
call	45:4	45:65	2	put_ebml_uint
arg	45:21	45:23	3	pb
water	45:21	0:0	4	pb
arg	45:25	45:52	3	EBML_ID_EBMLMAXIDLENGTH
water	45:25	0:0	4	EBML_ID_EBMLMAXIDLENGTH
arg	45:64	45:65	3	4
water	45:64	0:0	4	4
water	45:66	0:0	2	;
call	46:4	46:65	2	put_ebml_uint
arg	46:21	46:23	3	pb
water	46:21	0:0	4	pb
arg	46:25	46:52	3	EBML_ID_EBMLMAXSIZELENGTH
water	46:25	0:0	4	EBML_ID_EBMLMAXSIZELENGTH
arg	46:64	46:65	3	8
water	46:64	0:0	4	8
water	46:66	0:0	2	;
call	47:4	47:70	2	put_ebml_string
arg	47:21	47:23	3	pb
water	47:21	0:0	4	pb
arg	47:25	47:52	3	EBML_ID_DOCTYPE
water	47:25	0:0	4	EBML_ID_DOCTYPE
arg	47:54	47:70	3	s->oformat->name
water	47:54	0:0	4	s
op	47:55	0:0	4	->
water	47:57	0:0	4	oformat
op	47:64	0:0	4	->
water	47:66	0:0	4	name
water	47:71	0:0	2	;
call	48:4	48:65	2	put_ebml_uint
arg	48:21	48:23	3	pb
water	48:21	0:0	4	pb
arg	48:25	48:52	3	EBML_ID_DOCTYPEVERSION
water	48:25	0:0	4	EBML_ID_DOCTYPEVERSION
arg	48:58	48:65	3	version
water	48:58	0:0	4	version
water	48:66	0:0	2	;
call	49:4	49:65	2	put_ebml_uint
arg	49:21	49:23	3	pb
water	49:21	0:0	4	pb
arg	49:25	49:52	3	EBML_ID_DOCTYPEREADVERSION
water	49:25	0:0	4	EBML_ID_DOCTYPEREADVERSION
arg	49:64	49:65	3	2
water	49:64	0:0	4	2
water	49:66	0:0	2	;
call	50:4	50:35	2	end_ebml_master
arg	50:20	50:22	3	pb
water	50:20	0:0	4	pb
arg	50:24	50:35	3	ebml_header
water	50:24	0:0	4	ebml_header
water	50:36	0:0	2	;
water	51:4	0:0	2	mkv
op	51:7	0:0	2	->
water	51:9	0:0	2	segment
op	51:17	0:0	2	=
call	51:19	51:63	2	start_ebml_master
arg	51:37	51:39	3	pb
water	51:37	0:0	4	pb
arg	51:41	51:60	3	MATROSKA_ID_SEGMENT
water	51:41	0:0	4	MATROSKA_ID_SEGMENT
arg	51:62	51:63	3	0
water	51:62	0:0	4	0
water	51:64	0:0	2	;
water	52:4	0:0	2	mkv
op	52:7	0:0	2	->
water	52:9	0:0	2	segment_offset
op	52:24	0:0	2	=
call	52:26	52:38	2	avio_tell
arg	52:36	52:38	3	pb
water	52:36	0:0	4	pb
water	52:39	0:0	2	;
water	58:4	0:0	2	mkv
op	58:7	0:0	2	->
water	58:9	0:0	2	main_seekhead
op	58:26	0:0	2	=
call	58:28	58:74	2	mkv_start_seekhead
arg	58:47	58:49	3	pb
water	58:47	0:0	4	pb
arg	58:51	58:70	3	mkv->segment_offset
water	58:51	0:0	4	mkv
op	58:54	0:0	4	->
water	58:56	0:0	4	segment_offset
arg	58:72	58:74	3	10
water	58:72	0:0	4	10
water	58:75	0:0	2	;
if	59:4	62:4	2	(! mkv -> main_seekhead)
cond	59:8	59:14	3	! mkv -> main_seekhead
op	59:8	0:0	4	!
water	59:9	0:0	4	mkv
op	59:12	0:0	4	->
water	59:14	0:0	4	main_seekhead
stmts	59:29	62:4	3	
water	59:29	0:0	4	{
water	60:8	0:0	4	ret
op	60:12	0:0	4	=
call	60:14	60:28	4	AVERROR
arg	60:22	60:28	5	ENOMEM
water	60:22	0:0	6	ENOMEM
water	60:29	0:0	4	;
goto	61:8	61:17	4	fail
water	61:13	0:0	5	fail
water	62:4	0:0	4	}
water	63:4	0:0	2	ret
op	63:8	0:0	2	=
call	63:10	63:84	2	mkv_add_seekhead_entry
arg	63:33	63:51	3	mkv->main_seekhead
water	63:33	0:0	4	mkv
op	63:36	0:0	4	->
water	63:38	0:0	4	main_seekhead
arg	63:53	63:69	3	MATROSKA_ID_INFO
water	63:53	0:0	4	MATROSKA_ID_INFO
arg	63:71	63:84	3	avio_tell(pb)
call	63:71	63:83	4	avio_tell
arg	63:81	63:83	5	pb
water	63:81	0:0	6	pb
water	63:85	0:0	2	;
if	64:4	64:26	2	(ret < 0)
cond	64:8	64:14	3	ret < 0
water	64:8	0:0	4	ret
op	64:12	0:0	4	<
water	64:14	0:0	4	0
stmts	64:17	64:26	3	
goto	64:17	64:26	4	fail
water	64:22	0:0	5	fail
water	65:4	0:0	2	segment_info
op	65:17	0:0	2	=
call	65:19	65:60	2	start_ebml_master
arg	65:37	65:39	3	pb
water	65:37	0:0	4	pb
arg	65:41	65:57	3	MATROSKA_ID_INFO
water	65:41	0:0	4	MATROSKA_ID_INFO
arg	65:59	65:60	3	0
water	65:59	0:0	4	0
water	65:61	0:0	2	;
call	66:4	66:56	2	put_ebml_uint
arg	66:18	66:20	3	pb
water	66:18	0:0	4	pb
arg	66:22	66:47	3	MATROSKA_ID_TIMECODESCALE
water	66:22	0:0	4	MATROSKA_ID_TIMECODESCALE
arg	66:49	66:56	3	1000000
water	66:49	0:0	4	1000000
water	66:57	0:0	2	;
if	67:4	68:58	2	(( tag =av_dict_get (s -> metadata ,"title" ,NULL ,0 ) ))
cond	67:8	67:57	3	( tag =av_dict_get (s -> metadata ,"title" ,NULL ,0 ) )
water	67:8	0:0	4	(
water	67:9	0:0	4	tag
op	67:13	0:0	4	=
call	67:15	67:56	4	av_dict_get
arg	67:27	67:38	5	s->metadata
water	67:27	0:0	6	s
op	67:28	0:0	6	->
water	67:30	0:0	6	metadata
arg	67:40	67:47	5	"title"
water	67:40	0:0	6	"title"
arg	67:49	67:53	5	NULL
water	67:49	0:0	6	NULL
arg	67:55	67:56	5	0
water	67:55	0:0	6	0
water	67:57	0:0	4	)
stmts	68:8	68:58	3	
call	68:8	68:57	4	put_ebml_string
arg	68:24	68:26	5	pb
water	68:24	0:0	6	pb
arg	68:28	68:45	5	MATROSKA_ID_TITLE
water	68:28	0:0	6	MATROSKA_ID_TITLE
arg	68:47	68:57	5	tag->value
water	68:47	0:0	6	tag
op	68:50	0:0	6	->
water	68:52	0:0	6	value
water	68:58	0:0	4	;
if	69:4	81:4	2	(! ( s -> flags & AVFMT_FLAG_BITEXACT ))
cond	69:8	69:40	3	! ( s -> flags & AVFMT_FLAG_BITEXACT )
op	69:8	0:0	4	!
water	69:9	0:0	4	(
water	69:10	0:0	4	s
op	69:11	0:0	4	->
water	69:13	0:0	4	flags
op	69:19	0:0	4	&
water	69:21	0:0	4	AVFMT_FLAG_BITEXACT
water	69:40	0:0	4	)
stmts	69:43	81:4	3	
water	69:43	0:0	4	{
decl	70:8	70:31	4	uint32_t	segment_uid[4]
decl	71:8	71:17	4	AVLFG	lfg
call	72:8	72:46	4	av_lfg_init
arg	72:20	72:24	5	&lfg
op	72:20	0:0	6	&
water	72:21	0:0	6	lfg
arg	72:26	72:46	5	av_get_random_seed()
call	72:26	72:45	6	av_get_random_seed
water	72:47	0:0	4	;
for	73:8	74:45	4	(i = 0 ;i < 4;i ++)
forinit	73:13	73:18	5	i = 0 ;
water	73:13	0:0	6	i
op	73:15	0:0	6	=
water	73:17	0:0	6	0
water	73:18	0:0	6	;
cond	73:20	73:24	5	i < 4
water	73:20	0:0	6	i
op	73:22	0:0	6	<
water	73:24	0:0	6	4
forexpr	73:27	73:28	5	i ++
water	73:27	0:0	6	i
op	73:28	0:0	6	++
stmts	74:12	74:45	5	
water	74:12	0:0	6	segment_uid
op	74:23	0:0	6	[
water	74:24	0:0	6	i
op	74:25	0:0	6	]
op	74:27	0:0	6	=
call	74:29	74:44	6	av_lfg_get
arg	74:40	74:44	7	&lfg
op	74:40	0:0	8	&
water	74:41	0:0	8	lfg
water	74:45	0:0	6	;
call	75:8	75:68	4	put_ebml_string
arg	75:24	75:26	5	pb
water	75:24	0:0	6	pb
arg	75:28	75:49	5	MATROSKA_ID_MUXINGAPP
water	75:28	0:0	6	MATROSKA_ID_MUXINGAPP
arg	75:51	75:68	5	LIBAVFORMAT_IDENT
water	75:51	0:0	6	LIBAVFORMAT_IDENT
water	75:69	0:0	4	;
if	76:8	77:67	4	(( tag =av_dict_get (s -> metadata ,"encoding_tool" ,NULL ,0 ) ))
cond	76:12	76:69	5	( tag =av_dict_get (s -> metadata ,"encoding_tool" ,NULL ,0 ) )
water	76:12	0:0	6	(
water	76:13	0:0	6	tag
op	76:17	0:0	6	=
call	76:19	76:68	6	av_dict_get
arg	76:31	76:42	7	s->metadata
water	76:31	0:0	8	s
op	76:32	0:0	8	->
water	76:34	0:0	8	metadata
arg	76:44	76:59	7	"encoding_tool"
water	76:44	0:0	8	"encoding_tool"
arg	76:61	76:65	7	NULL
water	76:61	0:0	8	NULL
arg	76:67	76:68	7	0
water	76:67	0:0	8	0
water	76:69	0:0	6	)
stmts	77:12	77:67	5	
call	77:12	77:66	6	put_ebml_string
arg	77:28	77:30	7	pb
water	77:28	0:0	8	pb
arg	77:32	77:54	7	MATROSKA_ID_WRITINGAPP
water	77:32	0:0	8	MATROSKA_ID_WRITINGAPP
arg	77:56	77:66	7	tag->value
water	77:56	0:0	8	tag
op	77:59	0:0	8	->
water	77:61	0:0	8	value
water	77:67	0:0	6	;
else	78:8	79:74	4
stmts	79:12	79:74	5	
call	79:12	79:73	6	put_ebml_string
arg	79:28	79:30	7	pb
water	79:28	0:0	8	pb
arg	79:32	79:54	7	MATROSKA_ID_WRITINGAPP
water	79:32	0:0	8	MATROSKA_ID_WRITINGAPP
arg	79:56	79:73	7	LIBAVFORMAT_IDENT
water	79:56	0:0	8	LIBAVFORMAT_IDENT
water	79:74	0:0	6	;
call	80:8	80:67	4	put_ebml_binary
arg	80:24	80:26	5	pb
water	80:24	0:0	6	pb
arg	80:28	80:50	5	MATROSKA_ID_SEGMENTUID
water	80:28	0:0	6	MATROSKA_ID_SEGMENTUID
arg	80:52	80:63	5	segment_uid
water	80:52	0:0	6	segment_uid
arg	80:65	80:67	5	16
water	80:65	0:0	6	16
water	80:68	0:0	4	;
water	81:4	0:0	4	}
else	81:6	85:4	2
stmts	81:11	85:4	3	
water	81:11	0:0	4	{
decl	82:8	82:34	4	const char	*ident
op	82:26	0:0	4	=
water	82:28	0:0	4	"Lavf"
call	83:8	83:57	4	put_ebml_string
arg	83:24	83:26	5	pb
water	83:24	0:0	6	pb
arg	83:28	83:50	5	MATROSKA_ID_MUXINGAPP
water	83:28	0:0	6	MATROSKA_ID_MUXINGAPP
arg	83:52	83:57	5	ident
water	83:52	0:0	6	ident
water	83:58	0:0	4	;
call	84:8	84:57	4	put_ebml_string
arg	84:24	84:26	5	pb
water	84:24	0:0	6	pb
arg	84:28	84:50	5	MATROSKA_ID_WRITINGAPP
water	84:28	0:0	6	MATROSKA_ID_WRITINGAPP
arg	84:52	84:57	5	ident
water	84:52	0:0	6	ident
water	84:58	0:0	4	;
water	85:4	0:0	4	}
if	86:4	92:4	2	(tag =av_dict_get (s -> metadata ,"creation_time" ,NULL ,0 ))
cond	86:8	86:63	3	tag =av_dict_get (s -> metadata ,"creation_time" ,NULL ,0 )
water	86:8	0:0	4	tag
op	86:12	0:0	4	=
call	86:14	86:63	4	av_dict_get
arg	86:26	86:37	5	s->metadata
water	86:26	0:0	6	s
op	86:27	0:0	6	->
water	86:29	0:0	6	metadata
arg	86:39	86:54	5	"creation_time"
water	86:39	0:0	6	"creation_time"
arg	86:56	86:60	5	NULL
water	86:56	0:0	6	NULL
arg	86:62	86:63	5	0
water	86:62	0:0	6	0
stmts	86:66	92:4	3	
water	86:66	0:0	4	{
decl	88:8	88:89	4	int64_t	date_utc
op	88:25	0:0	4	=
water	88:27	0:0	4	(
call	88:28	88:62	5	ff_iso8601_to_unix_time
arg	88:52	88:62	6	tag->value
water	88:52	0:0	7	tag
op	88:55	0:0	7	->
water	88:57	0:0	7	value
op	88:64	0:0	4	-
water	88:66	0:0	4	978307200
water	88:75	0:0	4	)
op	88:77	0:0	4	*
water	88:79	0:0	4	1000000000
decl	89:8	89:31	4	uint8_t	date_utc_buf[8]
call	90:8	90:38	4	AV_WB64
arg	90:16	90:28	5	date_utc_buf
water	90:16	0:0	6	date_utc_buf
arg	90:30	90:38	5	date_utc
water	90:30	0:0	6	date_utc
water	90:39	0:0	4	;
call	91:8	91:64	4	put_ebml_binary
arg	91:24	91:26	5	pb
water	91:24	0:0	6	pb
arg	91:28	91:47	5	MATROSKA_ID_DATEUTC
water	91:28	0:0	6	MATROSKA_ID_DATEUTC
arg	91:49	91:61	5	date_utc_buf
water	91:49	0:0	6	date_utc_buf
arg	91:63	91:64	5	8
water	91:63	0:0	6	8
water	91:65	0:0	4	;
water	92:4	0:0	4	}
water	94:4	0:0	2	mkv
op	94:7	0:0	2	->
water	94:9	0:0	2	duration
op	94:18	0:0	2	=
water	94:20	0:0	2	0
water	94:21	0:0	2	;
water	95:4	0:0	2	mkv
op	95:7	0:0	2	->
water	95:9	0:0	2	duration_offset
op	95:25	0:0	2	=
call	95:27	95:39	2	avio_tell
arg	95:37	95:39	3	pb
water	95:37	0:0	4	pb
water	95:40	0:0	2	;
if	96:4	98:4	2	(! mkv -> is_live)
cond	96:8	96:14	3	! mkv -> is_live
op	96:8	0:0	4	!
water	96:9	0:0	4	mkv
op	96:12	0:0	4	->
water	96:14	0:0	4	is_live
stmts	96:23	98:4	3	
water	96:23	0:0	4	{
call	97:8	97:28	4	put_ebml_void
arg	97:22	97:24	5	pb
water	97:22	0:0	6	pb
arg	97:26	97:28	5	11
water	97:26	0:0	6	11
water	97:29	0:0	4	;
water	98:4	0:0	4	}
call	99:4	99:36	2	end_ebml_master
arg	99:20	99:22	3	pb
water	99:20	0:0	4	pb
arg	99:24	99:36	3	segment_info
water	99:24	0:0	4	segment_info
water	99:37	0:0	2	;
water	101:4	0:0	2	mkv
op	101:7	0:0	2	->
water	101:9	0:0	2	stream_durations
op	101:26	0:0	2	=
call	101:28	101:70	2	av_mallocz
arg	101:39	101:70	3	s->nb_streams*sizeof(int64_t)
water	101:39	0:0	4	s
op	101:40	0:0	4	->
water	101:42	0:0	4	nb_streams
op	101:53	0:0	4	*
op	101:55	0:0	4	sizeof
water	101:61	0:0	4	(
water	101:62	0:0	4	int64_t
water	101:69	0:0	4	)
water	101:71	0:0	2	;
water	102:4	0:0	2	mkv
op	102:7	0:0	2	->
water	102:9	0:0	2	stream_duration_offsets
op	102:33	0:0	2	=
call	102:35	102:77	2	av_mallocz
arg	102:46	102:77	3	s->nb_streams*sizeof(int64_t)
water	102:46	0:0	4	s
op	102:47	0:0	4	->
water	102:49	0:0	4	nb_streams
op	102:60	0:0	4	*
op	102:62	0:0	4	sizeof
water	102:68	0:0	4	(
water	102:69	0:0	4	int64_t
water	102:76	0:0	4	)
water	102:78	0:0	2	;
water	103:4	0:0	2	ret
op	103:8	0:0	2	=
call	103:10	103:28	2	mkv_write_tracks
arg	103:27	103:28	3	s
water	103:27	0:0	4	s
water	103:29	0:0	2	;
if	104:4	105:17	2	(ret < 0)
cond	104:8	104:14	3	ret < 0
water	104:8	0:0	4	ret
op	104:12	0:0	4	<
water	104:14	0:0	4	0
stmts	105:8	105:17	3	
goto	105:8	105:17	4	fail
water	105:13	0:0	5	fail
for	106:4	107:88	2	(i = 0 ;i < s -> nb_chapters;i ++)
forinit	106:9	106:14	3	i = 0 ;
water	106:9	0:0	4	i
op	106:11	0:0	4	=
water	106:13	0:0	4	0
water	106:14	0:0	4	;
cond	106:16	106:23	3	i < s -> nb_chapters
water	106:16	0:0	4	i
op	106:18	0:0	4	<
water	106:20	0:0	4	s
op	106:21	0:0	4	->
water	106:23	0:0	4	nb_chapters
forexpr	106:36	106:37	3	i ++
water	106:36	0:0	4	i
op	106:37	0:0	4	++
stmts	107:8	107:88	3	
water	107:8	0:0	4	mkv
op	107:11	0:0	4	->
water	107:13	0:0	4	chapter_id_offset
op	107:31	0:0	4	=
call	107:33	107:87	4	FFMAX
arg	107:39	107:61	5	mkv->chapter_id_offset
water	107:39	0:0	6	mkv
op	107:42	0:0	6	->
water	107:44	0:0	6	chapter_id_offset
arg	107:63	107:87	5	1LL-s->chapters[i]->id
water	107:63	0:0	6	1
water	107:64	0:0	6	LL
op	107:67	0:0	6	-
water	107:69	0:0	6	s
op	107:70	0:0	6	->
water	107:72	0:0	6	chapters
op	107:80	0:0	6	[
water	107:81	0:0	6	i
op	107:82	0:0	6	]
op	107:83	0:0	6	->
water	107:85	0:0	6	id
water	107:88	0:0	4	;
if	108:4	118:4	2	(mkv -> mode != MODE_WEBM)
cond	108:8	108:21	3	mkv -> mode != MODE_WEBM
water	108:8	0:0	4	mkv
op	108:11	0:0	4	->
water	108:13	0:0	4	mode
op	108:18	0:0	4	!=
water	108:21	0:0	4	MODE_WEBM
stmts	108:32	118:4	3	
water	108:32	0:0	4	{
water	109:8	0:0	4	ret
op	109:12	0:0	4	=
call	109:14	109:34	4	mkv_write_chapters
arg	109:33	109:34	5	s
water	109:33	0:0	6	s
water	109:35	0:0	4	;
if	110:8	111:21	4	(ret < 0)
cond	110:12	110:18	5	ret < 0
water	110:12	0:0	6	ret
op	110:16	0:0	6	<
water	110:18	0:0	6	0
stmts	111:12	111:21	5	
goto	111:12	111:21	6	fail
water	111:17	0:0	7	fail
water	112:8	0:0	4	ret
op	112:12	0:0	4	=
call	112:14	112:30	4	mkv_write_tags
arg	112:29	112:30	5	s
water	112:29	0:0	6	s
water	112:31	0:0	4	;
if	113:8	114:21	4	(ret < 0)
cond	113:12	113:18	5	ret < 0
water	113:12	0:0	6	ret
op	113:16	0:0	6	<
water	113:18	0:0	6	0
stmts	114:12	114:21	5	
goto	114:12	114:21	6	fail
water	114:17	0:0	7	fail
water	115:8	0:0	4	ret
op	115:12	0:0	4	=
call	115:14	115:37	4	mkv_write_attachments
arg	115:36	115:37	5	s
water	115:36	0:0	6	s
water	115:38	0:0	4	;
if	116:8	117:21	4	(ret < 0)
cond	116:12	116:18	5	ret < 0
water	116:12	0:0	6	ret
op	116:16	0:0	6	<
water	116:18	0:0	6	0
stmts	117:12	117:21	5	
goto	117:12	117:21	6	fail
water	117:17	0:0	7	fail
water	118:4	0:0	4	}
if	119:4	120:35	2	(! s -> pb -> seekable && ! mkv -> is_live)
cond	119:8	119:34	3	! s -> pb -> seekable && ! mkv -> is_live
op	119:8	0:0	4	!
water	119:9	0:0	4	s
op	119:10	0:0	4	->
water	119:12	0:0	4	pb
op	119:14	0:0	4	->
water	119:16	0:0	4	seekable
op	119:25	0:0	4	&&
op	119:28	0:0	4	!
water	119:29	0:0	4	mkv
op	119:32	0:0	4	->
water	119:34	0:0	4	is_live
stmts	120:8	120:35	3	
call	120:8	120:34	4	mkv_write_seekhead
arg	120:27	120:29	5	pb
water	120:27	0:0	6	pb
arg	120:31	120:34	5	mkv
water	120:31	0:0	6	mkv
water	120:35	0:0	4	;
water	121:4	0:0	2	mkv
op	121:7	0:0	2	->
water	121:9	0:0	2	cues
op	121:14	0:0	2	=
call	121:16	121:50	2	mkv_start_cues
arg	121:31	121:50	3	mkv->segment_offset
water	121:31	0:0	4	mkv
op	121:34	0:0	4	->
water	121:36	0:0	4	segment_offset
water	121:51	0:0	2	;
if	122:4	125:4	2	(! mkv -> cues)
cond	122:8	122:14	3	! mkv -> cues
op	122:8	0:0	4	!
water	122:9	0:0	4	mkv
op	122:12	0:0	4	->
water	122:14	0:0	4	cues
stmts	122:20	125:4	3	
water	122:20	0:0	4	{
water	123:8	0:0	4	ret
op	123:12	0:0	4	=
call	123:14	123:28	4	AVERROR
arg	123:22	123:28	5	ENOMEM
water	123:22	0:0	6	ENOMEM
water	123:29	0:0	4	;
goto	124:8	124:17	4	fail
water	124:13	0:0	5	fail
water	125:4	0:0	4	}
if	126:4	129:4	2	(pb -> seekable && mkv -> reserve_cues_space)
cond	126:8	126:29	3	pb -> seekable && mkv -> reserve_cues_space
water	126:8	0:0	4	pb
op	126:10	0:0	4	->
water	126:12	0:0	4	seekable
op	126:21	0:0	4	&&
water	126:24	0:0	4	mkv
op	126:27	0:0	4	->
water	126:29	0:0	4	reserve_cues_space
stmts	126:49	129:4	3	
water	126:49	0:0	4	{
water	127:8	0:0	4	mkv
op	127:11	0:0	4	->
water	127:13	0:0	4	cues_pos
op	127:22	0:0	4	=
call	127:24	127:36	4	avio_tell
arg	127:34	127:36	5	pb
water	127:34	0:0	6	pb
water	127:37	0:0	4	;
call	128:8	128:49	4	put_ebml_void
arg	128:22	128:24	5	pb
water	128:22	0:0	6	pb
arg	128:26	128:49	5	mkv->reserve_cues_space
water	128:26	0:0	6	mkv
op	128:29	0:0	6	->
water	128:31	0:0	6	reserve_cues_space
water	128:50	0:0	4	;
water	129:4	0:0	4	}
call	130:4	130:38	2	av_init_packet
arg	130:19	130:38	3	&mkv->cur_audio_pkt
op	130:19	0:0	4	&
water	130:20	0:0	4	mkv
op	130:23	0:0	4	->
water	130:25	0:0	4	cur_audio_pkt
water	130:39	0:0	2	;
water	131:4	0:0	2	mkv
op	131:7	0:0	2	->
water	131:9	0:0	2	cur_audio_pkt
op	131:22	0:0	2	.
water	131:23	0:0	2	size
op	131:28	0:0	2	=
water	131:30	0:0	2	0
water	131:31	0:0	2	;
water	132:4	0:0	2	mkv
op	132:7	0:0	2	->
water	132:9	0:0	2	cluster_pos
op	132:21	0:0	2	=
op	132:23	0:0	2	-
water	132:24	0:0	2	1
water	132:25	0:0	2	;
call	133:4	133:17	2	avio_flush
arg	133:15	133:17	3	pb
water	133:15	0:0	4	pb
water	133:18	0:0	2	;
if	136:4	141:4	2	(pb -> seekable)
cond	136:8	136:12	3	pb -> seekable
water	136:8	0:0	4	pb
op	136:10	0:0	4	->
water	136:12	0:0	4	seekable
stmts	136:22	141:4	3	
water	136:22	0:0	4	{
if	137:8	138:42	4	(mkv -> cluster_time_limit < 0)
cond	137:12	137:38	5	mkv -> cluster_time_limit < 0
water	137:12	0:0	6	mkv
op	137:15	0:0	6	->
water	137:17	0:0	6	cluster_time_limit
op	137:36	0:0	6	<
water	137:38	0:0	6	0
stmts	138:12	138:42	5	
water	138:12	0:0	6	mkv
op	138:15	0:0	6	->
water	138:17	0:0	6	cluster_time_limit
op	138:36	0:0	6	=
water	138:38	0:0	6	5000
water	138:42	0:0	6	;
if	139:8	140:53	4	(mkv -> cluster_size_limit < 0)
cond	139:12	139:38	5	mkv -> cluster_size_limit < 0
water	139:12	0:0	6	mkv
op	139:15	0:0	6	->
water	139:17	0:0	6	cluster_size_limit
op	139:36	0:0	6	<
water	139:38	0:0	6	0
stmts	140:12	140:53	5	
water	140:12	0:0	6	mkv
op	140:15	0:0	6	->
water	140:17	0:0	6	cluster_size_limit
op	140:36	0:0	6	=
water	140:38	0:0	6	5
op	140:40	0:0	6	*
water	140:42	0:0	6	1024
op	140:47	0:0	6	*
water	140:49	0:0	6	1024
water	140:53	0:0	6	;
water	141:4	0:0	4	}
else	141:6	146:4	2
stmts	141:11	146:4	3	
water	141:11	0:0	4	{
if	142:8	143:42	4	(mkv -> cluster_time_limit < 0)
cond	142:12	142:38	5	mkv -> cluster_time_limit < 0
water	142:12	0:0	6	mkv
op	142:15	0:0	6	->
water	142:17	0:0	6	cluster_time_limit
op	142:36	0:0	6	<
water	142:38	0:0	6	0
stmts	143:12	143:42	5	
water	143:12	0:0	6	mkv
op	143:15	0:0	6	->
water	143:17	0:0	6	cluster_time_limit
op	143:36	0:0	6	=
water	143:38	0:0	6	1000
water	143:42	0:0	6	;
if	144:8	145:47	4	(mkv -> cluster_size_limit < 0)
cond	144:12	144:38	5	mkv -> cluster_size_limit < 0
water	144:12	0:0	6	mkv
op	144:15	0:0	6	->
water	144:17	0:0	6	cluster_size_limit
op	144:36	0:0	6	<
water	144:38	0:0	6	0
stmts	145:12	145:47	5	
water	145:12	0:0	6	mkv
op	145:15	0:0	6	->
water	145:17	0:0	6	cluster_size_limit
op	145:36	0:0	6	=
water	145:38	0:0	6	32
op	145:41	0:0	6	*
water	145:43	0:0	6	1024
water	145:47	0:0	6	;
water	146:4	0:0	4	}
return	147:4	147:12	2	0
water	147:11	0:0	3	0
label	148:0	148:4	2	fail :
call	149:4	149:16	2	mkv_free
arg	149:13	149:16	3	mkv
water	149:13	0:0	4	mkv
water	149:17	0:0	2	;
return	150:4	150:14	2	ret
water	150:11	0:0	3	ret
