func	1:0	22:0	0	static int	mov_get_dv_codec_tag
params	1:31	0:0	1	
param	1:32	1:50	2	AVFormatContext *	s
param	1:52	1:67	2	MOVTrack *	track
stmnts	0:0	21:14	1	
decl	3:4	3:11	2	int	tag
if	4:4	11:4	2	(track -> enc -> width == 720)
cond	4:8	4:29	3	track -> enc -> width == 720
water	4:8	0:0	4	track
op	4:13	0:0	4	->
water	4:15	0:0	4	enc
op	4:18	0:0	4	->
water	4:20	0:0	4	width
op	4:26	0:0	4	==
water	4:29	0:0	4	720
stmts	4:34	11:4	3	
water	4:34	0:0	4	{
if	5:8	8:7	4	(track -> enc -> height == 480)
cond	5:12	5:34	5	track -> enc -> height == 480
water	5:12	0:0	6	track
op	5:17	0:0	6	->
water	5:19	0:0	6	enc
op	5:22	0:0	6	->
water	5:24	0:0	6	height
op	5:31	0:0	6	==
water	5:34	0:0	6	480
stmts	5:39	8:7	5	
water	5:39	0:0	6	{
if	6:12	6:88	6	(track -> enc -> pix_fmt == AV_PIX_FMT_YUV422P)
cond	6:17	6:40	7	track -> enc -> pix_fmt == AV_PIX_FMT_YUV422P
water	6:17	0:0	8	track
op	6:22	0:0	8	->
water	6:24	0:0	8	enc
op	6:27	0:0	8	->
water	6:29	0:0	8	pix_fmt
op	6:37	0:0	8	==
water	6:40	0:0	8	AV_PIX_FMT_YUV422P
stmts	6:60	6:88	7	
water	6:60	0:0	8	tag
op	6:64	0:0	8	=
call	6:66	6:87	8	MKTAG
arg	6:72	6:75	9	'd'
water	6:72	0:0	10	'd'
arg	6:76	6:79	9	'v'
water	6:76	0:0	10	'v'
arg	6:80	6:83	9	'5'
water	6:80	0:0	10	'5'
arg	6:84	6:87	9	'n'
water	6:84	0:0	10	'n'
water	6:88	0:0	8	;
else	7:12	7:88	6
stmts	7:60	7:88	7	
water	7:60	0:0	8	tag
op	7:64	0:0	8	=
call	7:66	7:87	8	MKTAG
arg	7:72	7:75	9	'd'
water	7:72	0:0	10	'd'
arg	7:76	7:79	9	'v'
water	7:76	0:0	10	'v'
arg	7:80	7:83	9	'c'
water	7:80	0:0	10	'c'
arg	7:84	7:87	9	' '
water	7:84	0:0	10	' '
water	7:88	0:0	8	;
water	8:7	0:0	6	}
else	8:8	8:88	4
stmts	8:13	8:88	5	
if	8:13	8:88	6	(track -> enc -> pix_fmt == AV_PIX_FMT_YUV422P)
cond	8:17	8:40	7	track -> enc -> pix_fmt == AV_PIX_FMT_YUV422P
water	8:17	0:0	8	track
op	8:22	0:0	8	->
water	8:24	0:0	8	enc
op	8:27	0:0	8	->
water	8:29	0:0	8	pix_fmt
op	8:37	0:0	8	==
water	8:40	0:0	8	AV_PIX_FMT_YUV422P
stmts	8:60	8:88	7	
water	8:60	0:0	8	tag
op	8:64	0:0	8	=
call	8:66	8:87	8	MKTAG
arg	8:72	8:75	9	'd'
water	8:72	0:0	10	'd'
arg	8:76	8:79	9	'v'
water	8:76	0:0	10	'v'
arg	8:80	8:83	9	'5'
water	8:80	0:0	10	'5'
arg	8:84	8:87	9	'p'
water	8:84	0:0	10	'p'
water	8:88	0:0	8	;
else	9:8	9:88	4
stmts	9:13	9:88	5	
if	9:13	9:88	6	(track -> enc -> pix_fmt == AV_PIX_FMT_YUV420P)
cond	9:17	9:40	7	track -> enc -> pix_fmt == AV_PIX_FMT_YUV420P
water	9:17	0:0	8	track
op	9:22	0:0	8	->
water	9:24	0:0	8	enc
op	9:27	0:0	8	->
water	9:29	0:0	8	pix_fmt
op	9:37	0:0	8	==
water	9:40	0:0	8	AV_PIX_FMT_YUV420P
stmts	9:60	9:88	7	
water	9:60	0:0	8	tag
op	9:64	0:0	8	=
call	9:66	9:87	8	MKTAG
arg	9:72	9:75	9	'd'
water	9:72	0:0	10	'd'
arg	9:76	9:79	9	'v'
water	9:76	0:0	10	'v'
arg	9:80	9:83	9	'c'
water	9:80	0:0	10	'c'
arg	9:84	9:87	9	'p'
water	9:84	0:0	10	'p'
water	9:88	0:0	8	;
else	10:8	10:88	4
stmts	10:60	10:88	5	
water	10:60	0:0	6	tag
op	10:64	0:0	6	=
call	10:66	10:87	6	MKTAG
arg	10:72	10:75	7	'd'
water	10:72	0:0	8	'd'
arg	10:76	10:79	7	'v'
water	10:76	0:0	8	'v'
arg	10:80	10:83	7	'p'
water	10:80	0:0	8	'p'
arg	10:84	10:87	7	'p'
water	10:84	0:0	8	'p'
water	10:88	0:0	6	;
water	11:4	0:0	4	}
else	11:6	14:4	2
stmts	11:11	14:4	3	
if	11:11	14:4	4	(track -> enc -> height == 720)
cond	11:15	11:37	5	track -> enc -> height == 720
water	11:15	0:0	6	track
op	11:20	0:0	6	->
water	11:22	0:0	6	enc
op	11:25	0:0	6	->
water	11:27	0:0	6	height
op	11:34	0:0	6	==
water	11:37	0:0	6	720
stmts	11:42	14:4	5	
water	11:42	0:0	6	{
if	12:8	12:88	6	(track -> st -> time_base . den == 50)
cond	12:13	12:41	7	track -> st -> time_base . den == 50
water	12:13	0:0	8	track
op	12:18	0:0	8	->
water	12:20	0:0	8	st
op	12:22	0:0	8	->
water	12:24	0:0	8	time_base
op	12:33	0:0	8	.
water	12:34	0:0	8	den
op	12:38	0:0	8	==
water	12:41	0:0	8	50
stmts	12:60	12:88	7	
water	12:60	0:0	8	tag
op	12:64	0:0	8	=
call	12:66	12:87	8	MKTAG
arg	12:72	12:75	9	'd'
water	12:72	0:0	10	'd'
arg	12:76	12:79	9	'v'
water	12:76	0:0	10	'v'
arg	12:80	12:83	9	'h'
water	12:80	0:0	10	'h'
arg	12:84	12:87	9	'q'
water	12:84	0:0	10	'q'
water	12:88	0:0	8	;
else	13:8	13:88	6
stmts	13:60	13:88	7	
water	13:60	0:0	8	tag
op	13:64	0:0	8	=
call	13:66	13:87	8	MKTAG
arg	13:72	13:75	9	'd'
water	13:72	0:0	10	'd'
arg	13:76	13:79	9	'v'
water	13:76	0:0	10	'v'
arg	13:80	13:83	9	'h'
water	13:80	0:0	10	'h'
arg	13:84	13:87	9	'p'
water	13:84	0:0	10	'p'
water	13:88	0:0	8	;
water	14:4	0:0	6	}
else	14:6	17:4	2
stmts	14:11	17:4	3	
if	14:11	17:4	4	(track -> enc -> height == 1080)
cond	14:15	14:37	5	track -> enc -> height == 1080
water	14:15	0:0	6	track
op	14:20	0:0	6	->
water	14:22	0:0	6	enc
op	14:25	0:0	6	->
water	14:27	0:0	6	height
op	14:34	0:0	6	==
water	14:37	0:0	6	1080
stmts	14:43	17:4	5	
water	14:43	0:0	6	{
if	15:8	15:88	6	(track -> st -> time_base . den == 25)
cond	15:13	15:41	7	track -> st -> time_base . den == 25
water	15:13	0:0	8	track
op	15:18	0:0	8	->
water	15:20	0:0	8	st
op	15:22	0:0	8	->
water	15:24	0:0	8	time_base
op	15:33	0:0	8	.
water	15:34	0:0	8	den
op	15:38	0:0	8	==
water	15:41	0:0	8	25
stmts	15:60	15:88	7	
water	15:60	0:0	8	tag
op	15:64	0:0	8	=
call	15:66	15:87	8	MKTAG
arg	15:72	15:75	9	'd'
water	15:72	0:0	10	'd'
arg	15:76	15:79	9	'v'
water	15:76	0:0	10	'v'
arg	15:80	15:83	9	'h'
water	15:80	0:0	10	'h'
arg	15:84	15:87	9	'5'
water	15:84	0:0	10	'5'
water	15:88	0:0	8	;
else	16:8	16:88	6
stmts	16:60	16:88	7	
water	16:60	0:0	8	tag
op	16:64	0:0	8	=
call	16:66	16:87	8	MKTAG
arg	16:72	16:75	9	'd'
water	16:72	0:0	10	'd'
arg	16:76	16:79	9	'v'
water	16:76	0:0	10	'v'
arg	16:80	16:83	9	'h'
water	16:80	0:0	10	'h'
arg	16:84	16:87	9	'6'
water	16:84	0:0	10	'6'
water	16:88	0:0	8	;
water	17:4	0:0	6	}
else	17:6	20:4	2
stmts	17:11	20:4	3	
water	17:11	0:0	4	{
call	18:8	18:67	4	av_log
arg	18:15	18:16	5	s
water	18:15	0:0	6	s
arg	18:18	18:30	5	AV_LOG_ERROR
water	18:18	0:0	6	AV_LOG_ERROR
arg	18:32	18:67	5	"unsupported height for dv codec\n"
water	18:32	0:0	6	"unsupported height for dv codec\n"
water	18:68	0:0	4	;
return	19:8	19:16	4	0
water	19:15	0:0	5	0
water	20:4	0:0	4	}
return	21:4	21:14	2	tag
water	21:11	0:0	3	tag
