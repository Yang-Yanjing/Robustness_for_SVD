func	1:0	28:0	0	static void	display_frame
params	1:25	0:0	1	
param	1:26	1:46	2	const AVFrame *	frame
param	1:48	1:68	2	AVRational	time_base
stmnts	0:0	27:18	1	
decl	3:4	3:12	2	int	x
water	3:9	0:0	2	,
decl	3:4	3:12	2	int	y
decl	4:4	4:19	2	uint8_t	*p0
water	4:15	0:0	2	,
decl	4:4	4:19	2	uint8_t	*p
decl	5:4	5:17	2	int64_t	delay
if	6:4	16:4	2	(frame -> pts != AV_NOPTS_VALUE)
cond	6:8	6:22	3	frame -> pts != AV_NOPTS_VALUE
water	6:8	0:0	4	frame
op	6:13	0:0	4	->
water	6:15	0:0	4	pts
op	6:19	0:0	4	!=
water	6:22	0:0	4	AV_NOPTS_VALUE
stmts	6:38	16:4	3	
water	6:38	0:0	4	{
if	7:8	14:8	4	(last_pts != AV_NOPTS_VALUE)
cond	7:12	7:24	5	last_pts != AV_NOPTS_VALUE
water	7:12	0:0	6	last_pts
op	7:21	0:0	6	!=
water	7:24	0:0	6	AV_NOPTS_VALUE
stmts	7:40	14:8	5	
water	7:40	0:0	6	{
water	10:12	0:0	6	delay
op	10:18	0:0	6	=
call	10:20	11:58	6	av_rescale_q
arg	10:33	10:54	7	frame->pts-last_pts
water	10:33	0:0	8	frame
op	10:38	0:0	8	->
water	10:40	0:0	8	pts
op	10:44	0:0	8	-
water	10:46	0:0	8	last_pts
arg	11:33	11:42	7	time_base
water	11:33	0:0	8	time_base
arg	11:44	11:58	7	AV_TIME_BASE_Q
water	11:44	0:0	8	AV_TIME_BASE_Q
water	11:59	0:0	6	;
if	12:12	13:29	6	(delay > 0 && delay < 1000000)
cond	12:16	12:37	7	delay > 0 && delay < 1000000
water	12:16	0:0	8	delay
op	12:22	0:0	8	>
water	12:24	0:0	8	0
op	12:26	0:0	8	&&
water	12:29	0:0	8	delay
op	12:35	0:0	8	<
water	12:37	0:0	8	1000000
stmts	13:16	13:29	7	
call	13:16	13:28	8	usleep
arg	13:23	13:28	9	delay
water	13:23	0:0	10	delay
water	13:29	0:0	8	;
water	14:8	0:0	6	}
water	15:8	0:0	4	last_pts
op	15:17	0:0	4	=
water	15:19	0:0	4	frame
op	15:24	0:0	4	->
water	15:26	0:0	4	pts
water	15:29	0:0	4	;
water	16:4	0:0	4	}
water	18:4	0:0	2	p0
op	18:7	0:0	2	=
water	18:9	0:0	2	frame
op	18:14	0:0	2	->
water	18:16	0:0	2	data
op	18:20	0:0	2	[
water	18:21	0:0	2	0
op	18:22	0:0	2	]
water	18:23	0:0	2	;
call	19:4	19:16	2	puts
arg	19:9	19:16	3	"\033c"
water	19:9	0:0	4	"\033c"
water	19:17	0:0	2	;
for	20:4	26:4	2	(y = 0 ;y < frame -> height;y ++)
forinit	20:9	20:14	3	y = 0 ;
water	20:9	0:0	4	y
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:27	3	y < frame -> height
water	20:16	0:0	4	y
op	20:18	0:0	4	<
water	20:20	0:0	4	frame
op	20:25	0:0	4	->
water	20:27	0:0	4	height
forexpr	20:35	20:36	3	y ++
water	20:35	0:0	4	y
op	20:36	0:0	4	++
stmts	20:40	26:4	3	
water	20:40	0:0	4	{
water	21:8	0:0	4	p
op	21:10	0:0	4	=
water	21:12	0:0	4	p0
water	21:14	0:0	4	;
for	22:8	23:41	4	(x = 0 ;x < frame -> width;x ++)
forinit	22:13	22:18	5	x = 0 ;
water	22:13	0:0	6	x
op	22:15	0:0	6	=
water	22:17	0:0	6	0
water	22:18	0:0	6	;
cond	22:20	22:31	5	x < frame -> width
water	22:20	0:0	6	x
op	22:22	0:0	6	<
water	22:24	0:0	6	frame
op	22:29	0:0	6	->
water	22:31	0:0	6	width
forexpr	22:38	22:39	5	x ++
water	22:38	0:0	6	x
op	22:39	0:0	6	++
stmts	23:12	23:41	5	
call	23:12	23:40	6	putchar
arg	23:20	23:40	7	" .-+#"[*(p++)/52]
water	23:20	0:0	8	" .-+#"
op	23:27	0:0	8	[
op	23:28	0:0	8	*
water	23:29	0:0	8	(
water	23:30	0:0	8	p
op	23:31	0:0	8	++
water	23:33	0:0	8	)
op	23:35	0:0	8	/
water	23:37	0:0	8	52
op	23:39	0:0	8	]
water	23:41	0:0	6	;
call	24:8	24:20	4	putchar
arg	24:16	24:20	5	'\n'
water	24:16	0:0	6	'\n'
water	24:21	0:0	4	;
water	25:8	0:0	4	p0
op	25:11	0:0	4	+=
water	25:14	0:0	4	frame
op	25:19	0:0	4	->
water	25:21	0:0	4	linesize
op	25:29	0:0	4	[
water	25:30	0:0	4	0
op	25:31	0:0	4	]
water	25:32	0:0	4	;
water	26:4	0:0	4	}
call	27:4	27:17	2	fflush
arg	27:11	27:17	3	stdout
water	27:11	0:0	4	stdout
water	27:18	0:0	2	;
