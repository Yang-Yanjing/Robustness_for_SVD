func	1:0	23:0	0	static AVFrame *	alloc_audio_frame
params	1:33	0:0	1	
param	1:34	1:64	2	enum AVSampleFormat	sample_fmt
param	2:34	2:57	2	uint64_t	channel_layout
param	3:34	3:49	2	int	sample_rate
param	3:51	3:65	2	int	nb_samples
stmnts	0:0	22:16	1	
decl	5:4	5:37	2	AVFrame	*frame
op	5:19	0:0	2	=
call	5:21	5:36	3	av_frame_alloc
decl	6:4	6:11	2	int	ret
if	7:4	10:4	2	(! frame)
cond	7:8	7:9	3	! frame
op	7:8	0:0	4	!
water	7:9	0:0	4	frame
stmts	7:16	10:4	3	
water	7:16	0:0	4	{
call	8:8	8:59	4	fprintf
arg	8:16	8:22	5	stderr
water	8:16	0:0	6	stderr
arg	8:24	8:59	5	"Error allocating an audio frame\n"
water	8:24	0:0	6	"Error allocating an audio frame\n"
water	8:60	0:0	4	;
call	9:8	9:14	4	exit
arg	9:13	9:14	5	1
water	9:13	0:0	6	1
water	9:15	0:0	4	;
water	10:4	0:0	4	}
water	11:4	0:0	2	frame
op	11:9	0:0	2	->
water	11:11	0:0	2	format
op	11:18	0:0	2	=
water	11:20	0:0	2	sample_fmt
water	11:30	0:0	2	;
water	12:4	0:0	2	frame
op	12:9	0:0	2	->
water	12:11	0:0	2	channel_layout
op	12:26	0:0	2	=
water	12:28	0:0	2	channel_layout
water	12:42	0:0	2	;
water	13:4	0:0	2	frame
op	13:9	0:0	2	->
water	13:11	0:0	2	sample_rate
op	13:23	0:0	2	=
water	13:25	0:0	2	sample_rate
water	13:36	0:0	2	;
water	14:4	0:0	2	frame
op	14:9	0:0	2	->
water	14:11	0:0	2	nb_samples
op	14:22	0:0	2	=
water	14:24	0:0	2	nb_samples
water	14:34	0:0	2	;
if	15:4	21:4	2	(nb_samples)
cond	15:8	15:8	3	nb_samples
water	15:8	0:0	4	nb_samples
stmts	15:20	21:4	3	
water	15:20	0:0	4	{
water	16:8	0:0	4	ret
op	16:12	0:0	4	=
call	16:14	16:42	4	av_frame_get_buffer
arg	16:34	16:39	5	frame
water	16:34	0:0	6	frame
arg	16:41	16:42	5	0
water	16:41	0:0	6	0
water	16:43	0:0	4	;
if	17:8	20:8	4	(ret < 0)
cond	17:12	17:18	5	ret < 0
water	17:12	0:0	6	ret
op	17:16	0:0	6	<
water	17:18	0:0	6	0
stmts	17:21	20:8	5	
water	17:21	0:0	6	{
call	18:12	18:64	6	fprintf
arg	18:20	18:26	7	stderr
water	18:20	0:0	8	stderr
arg	18:28	18:64	7	"Error allocating an audio buffer\n"
water	18:28	0:0	8	"Error allocating an audio buffer\n"
water	18:65	0:0	6	;
call	19:12	19:18	6	exit
arg	19:17	19:18	7	1
water	19:17	0:0	8	1
water	19:19	0:0	6	;
water	20:8	0:0	6	}
water	21:4	0:0	4	}
return	22:4	22:16	2	frame
water	22:11	0:0	3	frame
