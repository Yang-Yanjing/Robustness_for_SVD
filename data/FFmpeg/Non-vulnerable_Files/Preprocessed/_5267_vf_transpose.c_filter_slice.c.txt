func	1:0	78:0	0	static int	filter_slice
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
param	1:46	1:55	2	void *	arg
param	1:57	1:66	2	int	jobnr
param	2:24	2:35	2	int	nb_jobs
stmnts	0:0	77:12	1	
decl	4:4	4:35	2	TransContext	*trans
op	4:24	0:0	2	=
water	4:26	0:0	2	ctx
op	4:29	0:0	2	->
water	4:31	0:0	2	priv
decl	5:4	5:24	2	ThreadData	*td
op	5:19	0:0	2	=
water	5:21	0:0	2	arg
decl	6:4	6:26	2	AVFrame	*out
op	6:17	0:0	2	=
water	6:19	0:0	2	td
op	6:21	0:0	2	->
water	6:23	0:0	2	out
decl	7:4	7:24	2	AVFrame	*in
op	7:16	0:0	2	=
water	7:18	0:0	2	td
op	7:20	0:0	2	->
water	7:22	0:0	2	in
decl	8:4	8:13	2	int	plane
for	9:4	76:4	2	(plane = 0 ;out -> data [ plane ];plane ++)
forinit	9:9	9:18	3	plane = 0 ;
water	9:9	0:0	4	plane
op	9:15	0:0	4	=
water	9:17	0:0	4	0
water	9:18	0:0	4	;
cond	9:20	9:35	3	out -> data [ plane ]
water	9:20	0:0	4	out
op	9:23	0:0	4	->
water	9:25	0:0	4	data
op	9:29	0:0	4	[
water	9:30	0:0	4	plane
op	9:35	0:0	4	]
forexpr	9:38	9:43	3	plane ++
water	9:38	0:0	4	plane
op	9:43	0:0	4	++
stmts	9:47	76:4	3	
water	9:47	0:0	4	{
decl	10:8	10:64	4	int	hsub
op	10:20	0:0	4	=
water	10:22	0:0	4	plane
op	10:28	0:0	4	==
water	10:31	0:0	4	1
op	10:33	0:0	4	||
water	10:36	0:0	4	plane
op	10:42	0:0	4	==
water	10:45	0:0	4	2
water	10:47	0:0	4	?
water	10:49	0:0	4	trans
op	10:54	0:0	4	->
water	10:56	0:0	4	hsub
water	10:61	0:0	4	:
water	10:63	0:0	4	0
decl	11:8	11:64	4	int	vsub
op	11:20	0:0	4	=
water	11:22	0:0	4	plane
op	11:28	0:0	4	==
water	11:31	0:0	4	1
op	11:33	0:0	4	||
water	11:36	0:0	4	plane
op	11:42	0:0	4	==
water	11:45	0:0	4	2
water	11:47	0:0	4	?
water	11:49	0:0	4	trans
op	11:54	0:0	4	->
water	11:56	0:0	4	vsub
water	11:61	0:0	4	:
water	11:63	0:0	4	0
decl	12:8	12:44	4	int	pixstep
op	12:20	0:0	4	=
water	12:22	0:0	4	trans
op	12:27	0:0	4	->
water	12:29	0:0	4	pixsteps
op	12:37	0:0	4	[
water	12:38	0:0	4	plane
op	12:43	0:0	4	]
decl	13:8	13:54	4	int	inh
op	13:20	0:0	4	=
call	13:22	13:53	5	FF_CEIL_RSHIFT
arg	13:37	13:47	6	in->height
water	13:37	0:0	7	in
op	13:39	0:0	7	->
water	13:41	0:0	7	height
arg	13:49	13:53	6	vsub
water	13:49	0:0	7	vsub
decl	14:8	14:55	4	int	outw
op	14:20	0:0	4	=
call	14:22	14:54	5	FF_CEIL_RSHIFT
arg	14:37	14:47	6	out->width
water	14:37	0:0	7	out
op	14:40	0:0	7	->
water	14:42	0:0	7	width
arg	14:50	14:54	6	hsub
water	14:50	0:0	7	hsub
decl	15:8	15:55	4	int	outh
op	15:20	0:0	4	=
call	15:22	15:54	5	FF_CEIL_RSHIFT
arg	15:37	15:48	6	out->height
water	15:37	0:0	7	out
op	15:40	0:0	7	->
water	15:42	0:0	7	height
arg	15:50	15:54	6	vsub
water	15:50	0:0	7	vsub
decl	16:8	16:50	4	int	start
op	16:20	0:0	4	=
water	16:22	0:0	4	(
water	16:23	0:0	4	outh
op	16:28	0:0	4	*
water	16:31	0:0	4	jobnr
water	16:39	0:0	4	)
op	16:41	0:0	4	/
water	16:43	0:0	4	nb_jobs
decl	17:8	17:50	4	int	end
op	17:20	0:0	4	=
water	17:22	0:0	4	(
water	17:23	0:0	4	outh
op	17:28	0:0	4	*
water	17:30	0:0	4	(
water	17:31	0:0	4	jobnr
op	17:36	0:0	4	+
water	17:37	0:0	4	1
water	17:38	0:0	4	)
water	17:39	0:0	4	)
op	17:41	0:0	4	/
water	17:43	0:0	4	nb_jobs
decl	18:8	18:26	4	uint8_t	*dst
water	18:20	0:0	4	,
decl	18:8	18:26	4	uint8_t	*src
decl	19:8	19:36	4	int	dstlinesize
water	19:23	0:0	4	,
decl	19:8	19:36	4	int	srclinesize
decl	20:8	20:16	4	int	x
water	20:13	0:0	4	,
decl	20:8	20:16	4	int	y
water	21:8	0:0	4	dstlinesize
op	21:20	0:0	4	=
water	21:22	0:0	4	out
op	21:25	0:0	4	->
water	21:27	0:0	4	linesize
op	21:35	0:0	4	[
water	21:36	0:0	4	plane
op	21:41	0:0	4	]
water	21:42	0:0	4	;
water	22:8	0:0	4	dst
op	22:20	0:0	4	=
water	22:22	0:0	4	out
op	22:25	0:0	4	->
water	22:27	0:0	4	data
op	22:31	0:0	4	[
water	22:32	0:0	4	plane
op	22:37	0:0	4	]
op	22:39	0:0	4	+
water	22:41	0:0	4	start
op	22:47	0:0	4	*
water	22:49	0:0	4	dstlinesize
water	22:60	0:0	4	;
water	23:8	0:0	4	src
op	23:20	0:0	4	=
water	23:22	0:0	4	in
op	23:24	0:0	4	->
water	23:26	0:0	4	data
op	23:30	0:0	4	[
water	23:31	0:0	4	plane
op	23:36	0:0	4	]
water	23:37	0:0	4	;
water	24:8	0:0	4	srclinesize
op	24:20	0:0	4	=
water	24:22	0:0	4	in
op	24:24	0:0	4	->
water	24:26	0:0	4	linesize
op	24:34	0:0	4	[
water	24:35	0:0	4	plane
op	24:40	0:0	4	]
water	24:41	0:0	4	;
if	25:8	28:8	4	(trans -> dir & 1)
cond	25:12	25:25	5	trans -> dir & 1
water	25:12	0:0	6	trans
op	25:17	0:0	6	->
water	25:19	0:0	6	dir
op	25:23	0:0	6	&
water	25:25	0:0	6	1
stmts	25:28	28:8	5	
water	25:28	0:0	6	{
water	26:12	0:0	6	src
op	26:24	0:0	6	+=
water	26:27	0:0	6	in
op	26:29	0:0	6	->
water	26:31	0:0	6	linesize
op	26:39	0:0	6	[
water	26:40	0:0	6	plane
op	26:45	0:0	6	]
op	26:47	0:0	6	*
water	26:49	0:0	6	(
water	26:50	0:0	6	inh
op	26:54	0:0	6	-
water	26:56	0:0	6	1
water	26:57	0:0	6	)
water	26:58	0:0	6	;
water	27:12	0:0	6	srclinesize
op	27:24	0:0	6	*=
op	27:27	0:0	6	-
water	27:28	0:0	6	1
water	27:29	0:0	6	;
water	28:8	0:0	6	}
if	29:8	32:8	4	(trans -> dir & 2)
cond	29:12	29:25	5	trans -> dir & 2
water	29:12	0:0	6	trans
op	29:17	0:0	6	->
water	29:19	0:0	6	dir
op	29:23	0:0	6	&
water	29:25	0:0	6	2
stmts	29:28	32:8	5	
water	29:28	0:0	6	{
water	30:12	0:0	6	dst
op	30:25	0:0	6	=
water	30:27	0:0	6	out
op	30:30	0:0	6	->
water	30:32	0:0	6	data
op	30:36	0:0	6	[
water	30:37	0:0	6	plane
op	30:42	0:0	6	]
op	30:44	0:0	6	+
water	30:46	0:0	6	dstlinesize
op	30:58	0:0	6	*
water	30:60	0:0	6	(
water	30:61	0:0	6	outh
op	30:66	0:0	6	-
water	30:68	0:0	6	start
op	30:74	0:0	6	-
water	30:76	0:0	6	1
water	30:77	0:0	6	)
water	30:78	0:0	6	;
water	31:12	0:0	6	dstlinesize
op	31:24	0:0	6	*=
op	31:27	0:0	6	-
water	31:28	0:0	6	1
water	31:29	0:0	6	;
water	32:8	0:0	6	}
switch	33:8	75:8	4	(pixstep)
cond	33:16	33:16	5	pixstep
water	33:16	0:0	6	pixstep
stmts	33:25	75:8	5	
water	33:25	0:0	6	{
label	34:8	34:14	6	case 1 :
for	35:12	37:53	6	(y = start ;y < end;y ++ , dst += dstlinesize)
forinit	35:17	35:26	7	y = start ;
water	35:17	0:0	8	y
op	35:19	0:0	8	=
water	35:21	0:0	8	start
water	35:26	0:0	8	;
cond	35:28	35:32	7	y < end
water	35:28	0:0	8	y
op	35:30	0:0	8	<
water	35:32	0:0	8	end
forexpr	35:37	35:49	7	y ++ , dst += dstlinesize
water	35:37	0:0	8	y
op	35:38	0:0	8	++
water	35:40	0:0	8	,
water	35:42	0:0	8	dst
op	35:46	0:0	8	+=
water	35:49	0:0	8	dstlinesize
stmts	36:16	37:53	7	
for	36:16	37:53	8	(x = 0 ;x < outw;x ++)
forinit	36:21	36:26	9	x = 0 ;
water	36:21	0:0	10	x
op	36:23	0:0	10	=
water	36:25	0:0	10	0
water	36:26	0:0	10	;
cond	36:28	36:32	9	x < outw
water	36:28	0:0	10	x
op	36:30	0:0	10	<
water	36:32	0:0	10	outw
forexpr	36:38	36:39	9	x ++
water	36:38	0:0	10	x
op	36:39	0:0	10	++
stmts	37:20	37:53	9	
water	37:20	0:0	10	dst
op	37:23	0:0	10	[
water	37:24	0:0	10	x
op	37:25	0:0	10	]
op	37:27	0:0	10	=
water	37:29	0:0	10	src
op	37:32	0:0	10	[
water	37:33	0:0	10	x
op	37:35	0:0	10	*
water	37:37	0:0	10	srclinesize
op	37:49	0:0	10	+
water	37:51	0:0	10	y
op	37:52	0:0	10	]
water	37:53	0:0	10	;
break	38:12	38:17	6	
label	39:8	39:14	6	case 2 :
for	40:12	44:12	6	(y = start ;y < end;y ++ , dst += dstlinesize)
forinit	40:17	40:26	7	y = start ;
water	40:17	0:0	8	y
op	40:19	0:0	8	=
water	40:21	0:0	8	start
water	40:26	0:0	8	;
cond	40:28	40:32	7	y < end
water	40:28	0:0	8	y
op	40:30	0:0	8	<
water	40:32	0:0	8	end
forexpr	40:37	40:49	7	y ++ , dst += dstlinesize
water	40:37	0:0	8	y
op	40:38	0:0	8	++
water	40:40	0:0	8	,
water	40:42	0:0	8	dst
op	40:46	0:0	8	+=
water	40:49	0:0	8	dstlinesize
stmts	40:62	44:12	7	
water	40:62	0:0	8	{
for	41:16	43:70	8	(x = 0 ;x < outw;x ++)
forinit	41:21	41:26	9	x = 0 ;
water	41:21	0:0	10	x
op	41:23	0:0	10	=
water	41:25	0:0	10	0
water	41:26	0:0	10	;
cond	41:28	41:32	9	x < outw
water	41:28	0:0	10	x
op	41:30	0:0	10	<
water	41:32	0:0	10	outw
forexpr	41:38	41:39	9	x ++
water	41:38	0:0	10	x
op	41:39	0:0	10	++
stmts	42:20	43:70	9	
op	42:20	0:0	10	*
water	42:21	0:0	10	(
call	42:22	42:46	10	(uint16_t*)
arg	42:35	42:46	11	dst+2*x
water	42:35	0:0	12	dst
op	42:39	0:0	12	+
water	42:41	0:0	12	2
op	42:43	0:0	12	*
water	42:45	0:0	12	x
water	42:47	0:0	10	)
op	42:49	0:0	10	=
op	43:24	0:0	10	*
water	43:25	0:0	10	(
call	43:26	43:68	10	(uint16_t*)
arg	43:39	43:68	11	src+x*srclinesize+y*2
water	43:39	0:0	12	src
op	43:43	0:0	12	+
water	43:45	0:0	12	x
op	43:47	0:0	12	*
water	43:49	0:0	12	srclinesize
op	43:61	0:0	12	+
water	43:63	0:0	12	y
op	43:65	0:0	12	*
water	43:67	0:0	12	2
water	43:69	0:0	10	)
water	43:70	0:0	10	;
water	44:12	0:0	8	}
break	45:12	45:17	6	
label	46:8	46:14	6	case 3 :
for	47:12	52:12	6	(y = start ;y < end;y ++ , dst += dstlinesize)
forinit	47:17	47:26	7	y = start ;
water	47:17	0:0	8	y
op	47:19	0:0	8	=
water	47:21	0:0	8	start
water	47:26	0:0	8	;
cond	47:28	47:32	7	y < end
water	47:28	0:0	8	y
op	47:30	0:0	8	<
water	47:32	0:0	8	end
forexpr	47:37	47:49	7	y ++ , dst += dstlinesize
water	47:37	0:0	8	y
op	47:38	0:0	8	++
water	47:40	0:0	8	,
water	47:42	0:0	8	dst
op	47:46	0:0	8	+=
water	47:49	0:0	8	dstlinesize
stmts	47:62	52:12	7	
water	47:62	0:0	8	{
for	48:16	51:16	8	(x = 0 ;x < outw;x ++)
forinit	48:21	48:26	9	x = 0 ;
water	48:21	0:0	10	x
op	48:23	0:0	10	=
water	48:25	0:0	10	0
water	48:26	0:0	10	;
cond	48:28	48:32	9	x < outw
water	48:28	0:0	10	x
op	48:30	0:0	10	<
water	48:32	0:0	10	outw
forexpr	48:38	48:39	9	x ++
water	48:38	0:0	10	x
op	48:39	0:0	10	++
stmts	48:43	51:16	9	
water	48:43	0:0	10	{
decl	49:20	49:70	10	int32_t	v
op	49:30	0:0	10	=
call	49:32	49:69	11	AV_RB24
arg	49:40	49:69	12	src+x*srclinesize+y*3
water	49:40	0:0	13	src
op	49:44	0:0	13	+
water	49:46	0:0	13	x
op	49:48	0:0	13	*
water	49:50	0:0	13	srclinesize
op	49:62	0:0	13	+
water	49:64	0:0	13	y
op	49:66	0:0	13	*
water	49:68	0:0	13	3
call	50:20	50:42	10	AV_WB24
arg	50:28	50:39	11	dst+3*x
water	50:28	0:0	12	dst
op	50:32	0:0	12	+
water	50:34	0:0	12	3
op	50:36	0:0	12	*
water	50:38	0:0	12	x
arg	50:41	50:42	11	v
water	50:41	0:0	12	v
water	50:43	0:0	10	;
water	51:16	0:0	10	}
water	52:12	0:0	8	}
break	53:12	53:17	6	
label	54:8	54:14	6	case 4 :
for	55:12	59:12	6	(y = start ;y < end;y ++ , dst += dstlinesize)
forinit	55:17	55:26	7	y = start ;
water	55:17	0:0	8	y
op	55:19	0:0	8	=
water	55:21	0:0	8	start
water	55:26	0:0	8	;
cond	55:28	55:32	7	y < end
water	55:28	0:0	8	y
op	55:30	0:0	8	<
water	55:32	0:0	8	end
forexpr	55:37	55:49	7	y ++ , dst += dstlinesize
water	55:37	0:0	8	y
op	55:38	0:0	8	++
water	55:40	0:0	8	,
water	55:42	0:0	8	dst
op	55:46	0:0	8	+=
water	55:49	0:0	8	dstlinesize
stmts	55:62	59:12	7	
water	55:62	0:0	8	{
for	56:16	58:70	8	(x = 0 ;x < outw;x ++)
forinit	56:21	56:26	9	x = 0 ;
water	56:21	0:0	10	x
op	56:23	0:0	10	=
water	56:25	0:0	10	0
water	56:26	0:0	10	;
cond	56:28	56:32	9	x < outw
water	56:28	0:0	10	x
op	56:30	0:0	10	<
water	56:32	0:0	10	outw
forexpr	56:38	56:39	9	x ++
water	56:38	0:0	10	x
op	56:39	0:0	10	++
stmts	57:20	58:70	9	
op	57:20	0:0	10	*
water	57:21	0:0	10	(
call	57:22	57:46	10	(uint32_t*)
arg	57:35	57:46	11	dst+4*x
water	57:35	0:0	12	dst
op	57:39	0:0	12	+
water	57:41	0:0	12	4
op	57:43	0:0	12	*
water	57:45	0:0	12	x
water	57:47	0:0	10	)
op	57:49	0:0	10	=
op	58:24	0:0	10	*
water	58:25	0:0	10	(
call	58:26	58:68	10	(uint32_t*)
arg	58:39	58:68	11	src+x*srclinesize+y*4
water	58:39	0:0	12	src
op	58:43	0:0	12	+
water	58:45	0:0	12	x
op	58:47	0:0	12	*
water	58:49	0:0	12	srclinesize
op	58:61	0:0	12	+
water	58:63	0:0	12	y
op	58:65	0:0	12	*
water	58:67	0:0	12	4
water	58:69	0:0	10	)
water	58:70	0:0	10	;
water	59:12	0:0	8	}
break	60:12	60:17	6	
label	61:8	61:14	6	case 6 :
for	62:12	67:12	6	(y = start ;y < end;y ++ , dst += dstlinesize)
forinit	62:17	62:26	7	y = start ;
water	62:17	0:0	8	y
op	62:19	0:0	8	=
water	62:21	0:0	8	start
water	62:26	0:0	8	;
cond	62:28	62:32	7	y < end
water	62:28	0:0	8	y
op	62:30	0:0	8	<
water	62:32	0:0	8	end
forexpr	62:37	62:49	7	y ++ , dst += dstlinesize
water	62:37	0:0	8	y
op	62:38	0:0	8	++
water	62:40	0:0	8	,
water	62:42	0:0	8	dst
op	62:46	0:0	8	+=
water	62:49	0:0	8	dstlinesize
stmts	62:62	67:12	7	
water	62:62	0:0	8	{
for	63:16	66:16	8	(x = 0 ;x < outw;x ++)
forinit	63:21	63:26	9	x = 0 ;
water	63:21	0:0	10	x
op	63:23	0:0	10	=
water	63:25	0:0	10	0
water	63:26	0:0	10	;
cond	63:28	63:32	9	x < outw
water	63:28	0:0	10	x
op	63:30	0:0	10	<
water	63:32	0:0	10	outw
forexpr	63:38	63:39	9	x ++
water	63:38	0:0	10	x
op	63:39	0:0	10	++
stmts	63:43	66:16	9	
water	63:43	0:0	10	{
decl	64:20	64:68	10	int64_t	v
op	64:30	0:0	10	=
call	64:32	64:67	11	AV_RB48
arg	64:40	64:67	12	src+x*srclinesize+y*6
water	64:40	0:0	13	src
op	64:44	0:0	13	+
water	64:46	0:0	13	x
op	64:48	0:0	13	*
water	64:50	0:0	13	srclinesize
op	64:62	0:0	13	+
water	64:64	0:0	13	y
op	64:65	0:0	13	*
water	64:66	0:0	13	6
call	65:20	65:40	10	AV_WB48
arg	65:28	65:37	11	dst+6*x
water	65:28	0:0	12	dst
op	65:32	0:0	12	+
water	65:34	0:0	12	6
op	65:35	0:0	12	*
water	65:36	0:0	12	x
arg	65:39	65:40	11	v
water	65:39	0:0	12	v
water	65:41	0:0	10	;
water	66:16	0:0	10	}
water	67:12	0:0	8	}
break	68:12	68:17	6	
label	69:8	69:14	6	case 8 :
for	70:12	73:12	6	(y = start ;y < end;y ++ , dst += dstlinesize)
forinit	70:17	70:26	7	y = start ;
water	70:17	0:0	8	y
op	70:19	0:0	8	=
water	70:21	0:0	8	start
water	70:26	0:0	8	;
cond	70:28	70:32	7	y < end
water	70:28	0:0	8	y
op	70:30	0:0	8	<
water	70:32	0:0	8	end
forexpr	70:37	70:49	7	y ++ , dst += dstlinesize
water	70:37	0:0	8	y
op	70:38	0:0	8	++
water	70:40	0:0	8	,
water	70:42	0:0	8	dst
op	70:46	0:0	8	+=
water	70:49	0:0	8	dstlinesize
stmts	70:62	73:12	7	
water	70:62	0:0	8	{
for	71:16	72:93	8	(x = 0 ;x < outw;x ++)
forinit	71:21	71:26	9	x = 0 ;
water	71:21	0:0	10	x
op	71:23	0:0	10	=
water	71:25	0:0	10	0
water	71:26	0:0	10	;
cond	71:28	71:32	9	x < outw
water	71:28	0:0	10	x
op	71:30	0:0	10	<
water	71:32	0:0	10	outw
forexpr	71:38	71:39	9	x ++
water	71:38	0:0	10	x
op	71:39	0:0	10	++
stmts	72:20	72:93	9	
op	72:20	0:0	10	*
water	72:21	0:0	10	(
call	72:22	72:44	10	(uint64_t*)
arg	72:35	72:44	11	dst+8*x
water	72:35	0:0	12	dst
op	72:39	0:0	12	+
water	72:41	0:0	12	8
op	72:42	0:0	12	*
water	72:43	0:0	12	x
water	72:45	0:0	10	)
op	72:47	0:0	10	=
op	72:49	0:0	10	*
water	72:50	0:0	10	(
call	72:51	72:91	10	(uint64_t*)
arg	72:64	72:91	11	src+x*srclinesize+y*8
water	72:64	0:0	12	src
op	72:68	0:0	12	+
water	72:70	0:0	12	x
op	72:72	0:0	12	*
water	72:74	0:0	12	srclinesize
op	72:86	0:0	12	+
water	72:88	0:0	12	y
op	72:89	0:0	12	*
water	72:90	0:0	12	8
water	72:92	0:0	10	)
water	72:93	0:0	10	;
water	73:12	0:0	8	}
break	74:12	74:17	6	
water	75:8	0:0	6	}
water	76:4	0:0	4	}
return	77:4	77:12	2	0
water	77:11	0:0	3	0
