func	1:0	21:0	0	static int	request_samples
params	1:26	0:0	1	
param	1:27	1:47	2	AVFilterContext *	ctx
param	1:49	1:64	2	int	min_samples
stmnts	0:0	20:12	1	
decl	3:4	3:29	2	MixContext	*s
op	3:18	0:0	2	=
water	3:20	0:0	2	ctx
op	3:23	0:0	2	->
water	3:25	0:0	2	priv
decl	4:4	4:14	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:14	2	int	ret
call	5:4	5:31	2	av_assert0
arg	5:15	5:31	3	s->nb_inputs>1
water	5:15	0:0	4	s
op	5:16	0:0	4	->
water	5:18	0:0	4	nb_inputs
op	5:28	0:0	4	>
water	5:30	0:0	4	1
water	5:32	0:0	2	;
for	6:4	19:4	2	(i = 1 ;i < s -> nb_inputs;i ++)
forinit	6:9	6:14	3	i = 1 ;
water	6:9	0:0	4	i
op	6:11	0:0	4	=
water	6:13	0:0	4	1
water	6:14	0:0	4	;
cond	6:16	6:23	3	i < s -> nb_inputs
water	6:16	0:0	4	i
op	6:18	0:0	4	<
water	6:20	0:0	4	s
op	6:21	0:0	4	->
water	6:23	0:0	4	nb_inputs
forexpr	6:34	6:35	3	i ++
water	6:34	0:0	4	i
op	6:35	0:0	4	++
stmts	6:39	19:4	3	
water	6:39	0:0	4	{
water	7:8	0:0	4	ret
op	7:12	0:0	4	=
water	7:14	0:0	4	0
water	7:15	0:0	4	;
if	8:8	9:20	4	(s -> input_state [ i ] == INPUT_OFF)
cond	8:12	8:33	5	s -> input_state [ i ] == INPUT_OFF
water	8:12	0:0	6	s
op	8:13	0:0	6	->
water	8:15	0:0	6	input_state
op	8:26	0:0	6	[
water	8:27	0:0	6	i
op	8:28	0:0	6	]
op	8:30	0:0	6	==
water	8:33	0:0	6	INPUT_OFF
stmts	9:12	9:20	5	
continue	9:12	9:20	6	
while	10:8	11:50	4	(! ret &&av_audio_fifo_size (s -> fifos [ i ] ) < min_samples)
cond	10:15	10:57	5	! ret &&av_audio_fifo_size (s -> fifos [ i ] ) < min_samples
op	10:15	0:0	6	!
water	10:16	0:0	6	ret
op	10:20	0:0	6	&&
call	10:23	10:53	6	av_audio_fifo_size
arg	10:42	10:53	7	s->fifos[i]
water	10:42	0:0	8	s
op	10:43	0:0	8	->
water	10:45	0:0	8	fifos
op	10:50	0:0	8	[
water	10:51	0:0	8	i
op	10:52	0:0	8	]
op	10:55	0:0	6	<
water	10:57	0:0	6	min_samples
stmts	11:12	11:50	5	
water	11:12	0:0	6	ret
op	11:16	0:0	6	=
call	11:18	11:49	6	ff_request_frame
arg	11:35	11:49	7	ctx->inputs[i]
water	11:35	0:0	8	ctx
op	11:38	0:0	8	->
water	11:40	0:0	8	inputs
op	11:46	0:0	8	[
water	11:47	0:0	8	i
op	11:48	0:0	8	]
water	11:50	0:0	6	;
if	12:8	17:8	4	(ret == AVERROR_EOF)
cond	12:12	12:19	5	ret == AVERROR_EOF
water	12:12	0:0	6	ret
op	12:16	0:0	6	==
water	12:19	0:0	6	AVERROR_EOF
stmts	12:32	17:8	5	
water	12:32	0:0	6	{
if	13:12	16:12	6	(av_audio_fifo_size (s -> fifos [ i ] ) == 0)
cond	13:16	13:51	7	av_audio_fifo_size (s -> fifos [ i ] ) == 0
call	13:16	13:46	8	av_audio_fifo_size
arg	13:35	13:46	9	s->fifos[i]
water	13:35	0:0	10	s
op	13:36	0:0	10	->
water	13:38	0:0	10	fifos
op	13:43	0:0	10	[
water	13:44	0:0	10	i
op	13:45	0:0	10	]
op	13:48	0:0	8	==
water	13:51	0:0	8	0
stmts	13:54	16:12	7	
water	13:54	0:0	8	{
water	14:16	0:0	8	s
op	14:17	0:0	8	->
water	14:19	0:0	8	input_state
op	14:30	0:0	8	[
water	14:31	0:0	8	i
op	14:32	0:0	8	]
op	14:34	0:0	8	=
water	14:36	0:0	8	INPUT_OFF
water	14:45	0:0	8	;
continue	15:16	15:24	8	
water	16:12	0:0	8	}
water	17:8	0:0	6	}
else	17:10	18:22	4
stmts	17:15	18:22	5	
if	17:15	18:22	6	(ret < 0)
cond	17:19	17:25	7	ret < 0
water	17:19	0:0	8	ret
op	17:23	0:0	8	<
water	17:25	0:0	8	0
stmts	18:12	18:22	7	
return	18:12	18:22	8	ret
water	18:19	0:0	9	ret
water	19:4	0:0	4	}
return	20:4	20:12	2	0
water	20:11	0:0	3	0
