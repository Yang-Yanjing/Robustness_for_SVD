func	1:0	46:0	0	static int	parse_cube
params	1:21	0:0	1	
param	1:22	1:42	2	AVFilterContext *	ctx
param	1:44	1:51	2	FILE *	f
stmnts	0:0	45:12	1	
decl	3:4	3:35	2	LUT3DContext	*lut3d
op	3:24	0:0	2	=
water	3:26	0:0	2	ctx
op	3:29	0:0	2	->
water	3:31	0:0	2	priv
decl	4:4	4:28	2	char	line[MAX_LINE_SIZE]
decl	5:4	5:34	2	float	min[3]
op	5:17	0:0	2	=
water	5:19	0:0	2	{
water	5:20	0:0	2	0
op	5:21	0:0	2	.
water	5:22	0:0	2	0
water	5:23	0:0	2	,
water	5:25	0:0	2	0
op	5:26	0:0	2	.
water	5:27	0:0	2	0
water	5:28	0:0	2	,
water	5:30	0:0	2	0
op	5:31	0:0	2	.
water	5:32	0:0	2	0
water	5:33	0:0	2	}
decl	6:4	6:34	2	float	max[3]
op	6:17	0:0	2	=
water	6:19	0:0	2	{
water	6:20	0:0	2	1
op	6:21	0:0	2	.
water	6:22	0:0	2	0
water	6:23	0:0	2	,
water	6:25	0:0	2	1
op	6:26	0:0	2	.
water	6:27	0:0	2	0
water	6:28	0:0	2	,
water	6:30	0:0	2	1
op	6:31	0:0	2	.
water	6:32	0:0	2	0
water	6:33	0:0	2	}
while	7:4	44:4	2	(fgets (line ,sizeof ( line ) ,f ))
cond	7:11	7:38	3	fgets (line ,sizeof ( line ) ,f )
call	7:11	7:38	4	fgets
arg	7:17	7:21	5	line
water	7:17	0:0	6	line
arg	7:23	7:35	5	sizeof(line)
op	7:23	0:0	6	sizeof
water	7:29	0:0	6	(
water	7:30	0:0	6	line
water	7:34	0:0	6	)
arg	7:37	7:38	5	f
water	7:37	0:0	6	f
stmts	7:41	44:4	3	
water	7:41	0:0	4	{
if	8:8	43:8	4	(!strncmp (line ,"LUT_3D_SIZE " ,12 ))
cond	8:12	8:45	5	!strncmp (line ,"LUT_3D_SIZE " ,12 )
op	8:12	0:0	6	!
call	8:13	8:45	6	strncmp
arg	8:21	8:25	7	line
water	8:21	0:0	8	line
arg	8:27	8:41	7	"LUT_3D_SIZE "
water	8:27	0:0	8	"LUT_3D_SIZE "
arg	8:43	8:45	7	12
water	8:43	0:0	8	12
stmts	8:48	43:8	5	
water	8:48	0:0	6	{
decl	9:12	9:23	6	int	i
water	9:17	0:0	6	,
decl	9:12	9:23	6	int	j
water	9:20	0:0	6	,
decl	9:12	9:23	6	int	k
decl	10:12	10:55	6	const int	size
op	10:27	0:0	6	=
call	10:29	10:54	7	strtol
arg	10:36	10:45	8	line+12
water	10:36	0:0	9	line
op	10:41	0:0	9	+
water	10:43	0:0	9	12
arg	10:47	10:51	8	NULL
water	10:47	0:0	9	NULL
arg	10:53	10:54	8	0
water	10:53	0:0	9	0
if	11:12	14:12	6	(size < 2 || size > MAX_LEVEL)
cond	11:16	11:35	7	size < 2 || size > MAX_LEVEL
water	11:16	0:0	8	size
op	11:21	0:0	8	<
water	11:23	0:0	8	2
op	11:25	0:0	8	||
water	11:28	0:0	8	size
op	11:33	0:0	8	>
water	11:35	0:0	8	MAX_LEVEL
stmts	11:46	14:12	7	
water	11:46	0:0	8	{
call	12:16	12:78	8	av_log
arg	12:23	12:26	9	ctx
water	12:23	0:0	10	ctx
arg	12:28	12:40	9	AV_LOG_ERROR
water	12:28	0:0	10	AV_LOG_ERROR
arg	12:42	12:78	9	"Too large or invalid 3D LUT size\n"
water	12:42	0:0	10	"Too large or invalid 3D LUT size\n"
water	12:79	0:0	8	;
return	13:16	13:38	8	AVERROR(EINVAL)
call	13:23	13:37	9	AVERROR
arg	13:31	13:37	10	EINVAL
water	13:31	0:0	11	EINVAL
water	14:12	0:0	8	}
water	15:12	0:0	6	lut3d
op	15:17	0:0	6	->
water	15:19	0:0	6	lutsize
op	15:27	0:0	6	=
water	15:29	0:0	6	size
water	15:33	0:0	6	;
for	16:12	41:12	6	(k = 0 ;k < size;k ++)
forinit	16:17	16:22	7	k = 0 ;
water	16:17	0:0	8	k
op	16:19	0:0	8	=
water	16:21	0:0	8	0
water	16:22	0:0	8	;
cond	16:24	16:28	7	k < size
water	16:24	0:0	8	k
op	16:26	0:0	8	<
water	16:28	0:0	8	size
forexpr	16:34	16:35	7	k ++
water	16:34	0:0	8	k
op	16:35	0:0	8	++
stmts	16:39	41:12	7	
water	16:39	0:0	8	{
for	17:16	40:16	8	(j = 0 ;j < size;j ++)
forinit	17:21	17:26	9	j = 0 ;
water	17:21	0:0	10	j
op	17:23	0:0	10	=
water	17:25	0:0	10	0
water	17:26	0:0	10	;
cond	17:28	17:32	9	j < size
water	17:28	0:0	10	j
op	17:30	0:0	10	<
water	17:32	0:0	10	size
forexpr	17:38	17:39	9	j ++
water	17:38	0:0	10	j
op	17:39	0:0	10	++
stmts	17:43	40:16	9	
water	17:43	0:0	10	{
for	18:20	39:20	10	(i = 0 ;i < size;i ++)
forinit	18:25	18:30	11	i = 0 ;
water	18:25	0:0	12	i
op	18:27	0:0	12	=
water	18:29	0:0	12	0
water	18:30	0:0	12	;
cond	18:32	18:36	11	i < size
water	18:32	0:0	12	i
op	18:34	0:0	12	<
water	18:36	0:0	12	size
forexpr	18:42	18:43	11	i ++
water	18:42	0:0	12	i
op	18:43	0:0	12	++
stmts	18:47	39:20	11	
water	18:47	0:0	12	{
decl	19:24	19:65	12	struct rgbvec	*vec
op	19:43	0:0	12	=
op	19:45	0:0	12	&
water	19:46	0:0	12	lut3d
op	19:51	0:0	12	->
water	19:53	0:0	12	lut
op	19:56	0:0	12	[
water	19:57	0:0	12	i
op	19:58	0:0	12	]
op	19:59	0:0	12	[
water	19:60	0:0	12	j
op	19:61	0:0	12	]
op	19:62	0:0	12	[
water	19:63	0:0	12	k
op	19:64	0:0	12	]
do	20:24	33:24	12	(skip_line (line ))
cond	33:33	33:47	13	skip_line (line )
call	33:33	33:47	14	skip_line
arg	33:43	33:47	15	line
water	33:43	0:0	16	line
stmts	20:27	33:24	13	
water	20:27	0:0	14	{
call	21:28	21:39	14	NEXT_LINE
arg	21:38	21:39	15	0
water	21:38	0:0	16	0
water	21:40	0:0	14	;
if	22:28	32:28	14	(!strncmp (line ,"DOMAIN_" ,7 ))
cond	22:32	22:59	15	!strncmp (line ,"DOMAIN_" ,7 )
op	22:32	0:0	16	!
call	22:33	22:59	16	strncmp
arg	22:41	22:45	17	line
water	22:41	0:0	18	line
arg	22:47	22:56	17	"DOMAIN_"
water	22:47	0:0	18	"DOMAIN_"
arg	22:58	22:59	17	7
water	22:58	0:0	18	7
stmts	22:62	32:28	15	
water	22:62	0:0	16	{
decl	23:32	23:50	16	float	*vals
op	23:44	0:0	16	=
water	23:46	0:0	16	NULL
if	24:32	24:82	16	(!strncmp (line + 7 ,"MIN " ,4 ))
cond	24:41	24:69	17	!strncmp (line + 7 ,"MIN " ,4 )
op	24:41	0:0	18	!
call	24:42	24:69	18	strncmp
arg	24:50	24:58	19	line+7
water	24:50	0:0	20	line
op	24:55	0:0	20	+
water	24:57	0:0	20	7
arg	24:60	24:66	19	"MIN "
water	24:60	0:0	20	"MIN "
arg	24:68	24:69	19	4
water	24:68	0:0	20	4
stmts	24:72	24:82	17	
water	24:72	0:0	18	vals
op	24:77	0:0	18	=
water	24:79	0:0	18	min
water	24:82	0:0	18	;
else	25:32	25:82	16
stmts	25:37	25:82	17	
if	25:37	25:82	18	(!strncmp (line + 7 ,"MAX " ,4 ))
cond	25:41	25:69	19	!strncmp (line + 7 ,"MAX " ,4 )
op	25:41	0:0	20	!
call	25:42	25:69	20	strncmp
arg	25:50	25:58	21	line+7
water	25:50	0:0	22	line
op	25:55	0:0	22	+
water	25:57	0:0	22	7
arg	25:60	25:66	21	"MAX "
water	25:60	0:0	22	"MAX "
arg	25:68	25:69	21	4
water	25:68	0:0	22	4
stmts	25:72	25:82	19	
water	25:72	0:0	20	vals
op	25:77	0:0	20	=
water	25:79	0:0	20	max
water	25:82	0:0	20	;
if	26:32	27:62	16	(! vals)
cond	26:36	26:37	17	! vals
op	26:36	0:0	18	!
water	26:37	0:0	18	vals
stmts	27:36	27:62	17	
return	27:36	27:62	18	AVERROR_INVALIDDATA
water	27:43	0:0	19	AVERROR_INVALIDDATA
call	28:32	28:86	16	sscanf
arg	28:39	28:48	17	line+11
water	28:39	0:0	18	line
op	28:44	0:0	18	+
water	28:46	0:0	18	11
arg	28:50	28:60	17	"%f %f %f"
water	28:50	0:0	18	"%f %f %f"
arg	28:62	28:66	17	vals
water	28:62	0:0	18	vals
arg	28:68	28:76	17	vals+1
water	28:68	0:0	18	vals
op	28:73	0:0	18	+
water	28:75	0:0	18	1
arg	28:78	28:86	17	vals+2
water	28:78	0:0	18	vals
op	28:83	0:0	18	+
water	28:85	0:0	18	2
water	28:87	0:0	16	;
call	29:32	30:85	16	av_log
arg	29:39	29:42	17	ctx
water	29:39	0:0	18	ctx
arg	29:44	29:56	17	AV_LOG_DEBUG
water	29:44	0:0	18	AV_LOG_DEBUG
arg	29:58	29:91	17	"min: %f %f %f | max: %f %f %f\n"
water	29:58	0:0	18	"min: %f %f %f | max: %f %f %f\n"
arg	30:39	30:45	17	min[0]
water	30:39	0:0	18	min
op	30:42	0:0	18	[
water	30:43	0:0	18	0
op	30:44	0:0	18	]
arg	30:47	30:53	17	min[1]
water	30:47	0:0	18	min
op	30:50	0:0	18	[
water	30:51	0:0	18	1
op	30:52	0:0	18	]
arg	30:55	30:61	17	min[2]
water	30:55	0:0	18	min
op	30:58	0:0	18	[
water	30:59	0:0	18	2
op	30:60	0:0	18	]
arg	30:63	30:69	17	max[0]
water	30:63	0:0	18	max
op	30:66	0:0	18	[
water	30:67	0:0	18	0
op	30:68	0:0	18	]
arg	30:71	30:77	17	max[1]
water	30:71	0:0	18	max
op	30:74	0:0	18	[
water	30:75	0:0	18	1
op	30:76	0:0	18	]
arg	30:79	30:85	17	max[2]
water	30:79	0:0	18	max
op	30:82	0:0	18	[
water	30:83	0:0	18	2
op	30:84	0:0	18	]
water	30:86	0:0	16	;
continue	31:32	31:40	16	
water	32:28	0:0	16	}
water	33:24	0:0	14	}
water	33:49	0:0	12	;
if	34:24	35:54	12	(sscanf (line ,"%f %f %f" ,& vec -> r ,& vec -> g ,& vec -> b ) != 3)
cond	34:28	34:83	13	sscanf (line ,"%f %f %f" ,& vec -> r ,& vec -> g ,& vec -> b ) != 3
call	34:28	34:78	14	sscanf
arg	34:35	34:39	15	line
water	34:35	0:0	16	line
arg	34:41	34:51	15	"%f %f %f"
water	34:41	0:0	16	"%f %f %f"
arg	34:53	34:60	15	&vec->r
op	34:53	0:0	16	&
water	34:54	0:0	16	vec
op	34:57	0:0	16	->
water	34:59	0:0	16	r
arg	34:62	34:69	15	&vec->g
op	34:62	0:0	16	&
water	34:63	0:0	16	vec
op	34:66	0:0	16	->
water	34:68	0:0	16	g
arg	34:71	34:78	15	&vec->b
op	34:71	0:0	16	&
water	34:72	0:0	16	vec
op	34:75	0:0	16	->
water	34:77	0:0	16	b
op	34:80	0:0	14	!=
water	34:83	0:0	14	3
stmts	35:28	35:54	13	
return	35:28	35:54	14	AVERROR_INVALIDDATA
water	35:35	0:0	15	AVERROR_INVALIDDATA
water	36:24	0:0	12	vec
op	36:27	0:0	12	->
water	36:29	0:0	12	r
op	36:31	0:0	12	*=
water	36:34	0:0	12	max
op	36:37	0:0	12	[
water	36:38	0:0	12	0
op	36:39	0:0	12	]
op	36:41	0:0	12	-
water	36:43	0:0	12	min
op	36:46	0:0	12	[
water	36:47	0:0	12	0
op	36:48	0:0	12	]
water	36:49	0:0	12	;
water	37:24	0:0	12	vec
op	37:27	0:0	12	->
water	37:29	0:0	12	g
op	37:31	0:0	12	*=
water	37:34	0:0	12	max
op	37:37	0:0	12	[
water	37:38	0:0	12	1
op	37:39	0:0	12	]
op	37:41	0:0	12	-
water	37:43	0:0	12	min
op	37:46	0:0	12	[
water	37:47	0:0	12	1
op	37:48	0:0	12	]
water	37:49	0:0	12	;
water	38:24	0:0	12	vec
op	38:27	0:0	12	->
water	38:29	0:0	12	b
op	38:31	0:0	12	*=
water	38:34	0:0	12	max
op	38:37	0:0	12	[
water	38:38	0:0	12	2
op	38:39	0:0	12	]
op	38:41	0:0	12	-
water	38:43	0:0	12	min
op	38:46	0:0	12	[
water	38:47	0:0	12	2
op	38:48	0:0	12	]
water	38:49	0:0	12	;
water	39:20	0:0	12	}
water	40:16	0:0	10	}
water	41:12	0:0	8	}
break	42:12	42:17	6	
water	43:8	0:0	6	}
water	44:4	0:0	4	}
return	45:4	45:12	2	0
water	45:11	0:0	3	0
