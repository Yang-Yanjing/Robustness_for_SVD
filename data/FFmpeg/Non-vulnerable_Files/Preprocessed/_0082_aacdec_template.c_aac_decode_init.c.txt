decl	1:7	1:39	0	void	aacdec_init
water	1:23	0:0	0	(
water	1:24	0:0	0	AACContext
op	1:35	0:0	0	*
water	1:36	0:0	0	ac
water	1:38	0:0	0	)
func	2:15	98:0	0	int	aac_decode_init
params	2:34	0:0	1	
param	2:35	2:56	2	AVCodecContext *	avctx
stmnts	0:0	97:12	1	
decl	4:4	4:37	2	AACContext	*ac
op	4:19	0:0	2	=
water	4:21	0:0	2	avctx
op	4:26	0:0	2	->
water	4:28	0:0	2	priv_data
decl	5:4	5:11	2	int	ret
water	6:4	0:0	2	ac
op	6:6	0:0	2	->
water	6:8	0:0	2	avctx
op	6:14	0:0	2	=
water	6:16	0:0	2	avctx
water	6:21	0:0	2	;
water	7:4	0:0	2	ac
op	7:6	0:0	2	->
water	7:8	0:0	2	oc
op	7:10	0:0	2	[
water	7:11	0:0	2	1
op	7:12	0:0	2	]
op	7:13	0:0	2	.
water	7:14	0:0	2	m4ac
op	7:18	0:0	2	.
water	7:19	0:0	2	sample_rate
op	7:31	0:0	2	=
water	7:33	0:0	2	avctx
op	7:38	0:0	2	->
water	7:40	0:0	2	sample_rate
water	7:51	0:0	2	;
call	8:4	8:18	2	aacdec_init
arg	8:16	8:18	3	ac
water	8:16	0:0	4	ac
water	8:19	0:0	2	;
water	10:4	0:0	2	avctx
op	10:9	0:0	2	->
water	10:11	0:0	2	sample_fmt
op	10:22	0:0	2	=
water	10:24	0:0	2	AV_SAMPLE_FMT_S32P
water	10:42	0:0	2	;
water	12:4	0:0	2	avctx
op	12:9	0:0	2	->
water	12:11	0:0	2	sample_fmt
op	12:22	0:0	2	=
water	12:24	0:0	2	AV_SAMPLE_FMT_FLTP
water	12:42	0:0	2	;
if	14:4	20:4	2	(avctx -> extradata_size > 0)
cond	14:8	14:32	3	avctx -> extradata_size > 0
water	14:8	0:0	4	avctx
op	14:13	0:0	4	->
water	14:15	0:0	4	extradata_size
op	14:30	0:0	4	>
water	14:32	0:0	4	0
stmts	14:35	20:4	3	
water	14:35	0:0	4	{
if	15:8	19:22	4	(( ret =decode_audio_specific_config (ac ,ac -> avctx ,& ac -> oc [ 1 ] . m4ac ,avctx -> extradata ,avctx -> extradata_size * 8 LL ,1 ) ) < 0)
cond	15:12	18:54	5	( ret =decode_audio_specific_config (ac ,ac -> avctx ,& ac -> oc [ 1 ] . m4ac ,avctx -> extradata ,avctx -> extradata_size * 8 LL ,1 ) ) < 0
water	15:12	0:0	6	(
water	15:13	0:0	6	ret
op	15:17	0:0	6	=
call	15:19	18:49	6	decode_audio_specific_config
arg	15:48	15:50	7	ac
water	15:48	0:0	8	ac
arg	15:52	15:61	7	ac->avctx
water	15:52	0:0	8	ac
op	15:54	0:0	8	->
water	15:56	0:0	8	avctx
arg	15:63	15:78	7	&ac->oc[1].m4ac
op	15:63	0:0	8	&
water	15:64	0:0	8	ac
op	15:66	0:0	8	->
water	15:68	0:0	8	oc
op	15:70	0:0	8	[
water	15:71	0:0	8	1
op	15:72	0:0	8	]
op	15:73	0:0	8	.
water	15:74	0:0	8	m4ac
arg	16:48	16:64	7	avctx->extradata
water	16:48	0:0	8	avctx
op	16:53	0:0	8	->
water	16:55	0:0	8	extradata
arg	17:48	17:75	7	avctx->extradata_size*8LL
water	17:48	0:0	8	avctx
op	17:53	0:0	8	->
water	17:55	0:0	8	extradata_size
op	17:70	0:0	8	*
water	17:72	0:0	8	8
water	17:73	0:0	8	LL
arg	18:48	18:49	7	1
water	18:48	0:0	8	1
water	18:50	0:0	6	)
op	18:52	0:0	6	<
water	18:54	0:0	6	0
stmts	19:12	19:22	5	
return	19:12	19:22	6	ret
water	19:19	0:0	7	ret
water	20:4	0:0	4	}
else	20:6	45:4	2
stmts	20:11	45:4	3	
water	20:11	0:0	4	{
decl	21:8	21:17	4	int	sr
water	21:14	0:0	4	,
decl	21:8	21:17	4	int	i
water	22:8	0:0	4	uint8_t
water	22:16	0:0	4	layout_map
op	22:26	0:0	4	[
water	22:27	0:0	4	MAX_ELEM_ID
op	22:38	0:0	4	*
water	22:39	0:0	4	4
op	22:40	0:0	4	]
op	22:41	0:0	4	[
water	22:42	0:0	4	3
op	22:43	0:0	4	]
water	22:44	0:0	4	;
decl	23:8	23:27	4	int	layout_map_tags
water	24:8	0:0	4	sr
op	24:11	0:0	4	=
call	24:13	24:47	4	sample_rate_idx
arg	24:29	24:47	5	avctx->sample_rate
water	24:29	0:0	6	avctx
op	24:34	0:0	6	->
water	24:36	0:0	6	sample_rate
water	24:48	0:0	4	;
water	25:8	0:0	4	ac
op	25:10	0:0	4	->
water	25:12	0:0	4	oc
op	25:14	0:0	4	[
water	25:15	0:0	4	1
op	25:16	0:0	4	]
op	25:17	0:0	4	.
water	25:18	0:0	4	m4ac
op	25:22	0:0	4	.
water	25:23	0:0	4	sampling_index
op	25:38	0:0	4	=
water	25:40	0:0	4	sr
water	25:42	0:0	4	;
water	26:8	0:0	4	ac
op	26:10	0:0	4	->
water	26:12	0:0	4	oc
op	26:14	0:0	4	[
water	26:15	0:0	4	1
op	26:16	0:0	4	]
op	26:17	0:0	4	.
water	26:18	0:0	4	m4ac
op	26:22	0:0	4	.
water	26:23	0:0	4	channels
op	26:32	0:0	4	=
water	26:34	0:0	4	avctx
op	26:39	0:0	4	->
water	26:41	0:0	4	channels
water	26:49	0:0	4	;
water	27:8	0:0	4	ac
op	27:10	0:0	4	->
water	27:12	0:0	4	oc
op	27:14	0:0	4	[
water	27:15	0:0	4	1
op	27:16	0:0	4	]
op	27:17	0:0	4	.
water	27:18	0:0	4	m4ac
op	27:22	0:0	4	.
water	27:23	0:0	4	sbr
op	27:27	0:0	4	=
op	27:29	0:0	4	-
water	27:30	0:0	4	1
water	27:31	0:0	4	;
water	28:8	0:0	4	ac
op	28:10	0:0	4	->
water	28:12	0:0	4	oc
op	28:14	0:0	4	[
water	28:15	0:0	4	1
op	28:16	0:0	4	]
op	28:17	0:0	4	.
water	28:18	0:0	4	m4ac
op	28:22	0:0	4	.
water	28:23	0:0	4	ps
op	28:26	0:0	4	=
op	28:28	0:0	4	-
water	28:29	0:0	4	1
water	28:30	0:0	4	;
for	29:8	31:21	4	(i = 0 ;i <FF_ARRAY_ELEMS (ff_mpeg4audio_channels );i ++)
forinit	29:13	29:18	5	i = 0 ;
water	29:13	0:0	6	i
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:61	5	i <FF_ARRAY_ELEMS (ff_mpeg4audio_channels )
water	29:20	0:0	6	i
op	29:22	0:0	6	<
call	29:24	29:61	6	FF_ARRAY_ELEMS
arg	29:39	29:61	7	ff_mpeg4audio_channels
water	29:39	0:0	8	ff_mpeg4audio_channels
forexpr	29:64	29:65	5	i ++
water	29:64	0:0	6	i
op	29:65	0:0	6	++
stmts	30:12	31:21	5	
if	30:12	31:21	6	(ff_mpeg4audio_channels [ i ] == avctx -> channels)
cond	30:16	30:52	7	ff_mpeg4audio_channels [ i ] == avctx -> channels
water	30:16	0:0	8	ff_mpeg4audio_channels
op	30:38	0:0	8	[
water	30:39	0:0	8	i
op	30:40	0:0	8	]
op	30:42	0:0	8	==
water	30:45	0:0	8	avctx
op	30:50	0:0	8	->
water	30:52	0:0	8	channels
stmts	31:16	31:21	7	
break	31:16	31:21	8	
if	32:8	34:8	4	(i ==FF_ARRAY_ELEMS (ff_mpeg4audio_channels ))
cond	32:12	32:54	5	i ==FF_ARRAY_ELEMS (ff_mpeg4audio_channels )
water	32:12	0:0	6	i
op	32:14	0:0	6	==
call	32:17	32:54	6	FF_ARRAY_ELEMS
arg	32:32	32:54	7	ff_mpeg4audio_channels
water	32:32	0:0	8	ff_mpeg4audio_channels
stmts	32:57	34:8	5	
water	32:57	0:0	6	{
water	33:12	0:0	6	i
op	33:14	0:0	6	=
water	33:16	0:0	6	0
water	33:17	0:0	6	;
water	34:8	0:0	6	}
water	35:8	0:0	4	ac
op	35:10	0:0	4	->
water	35:12	0:0	4	oc
op	35:14	0:0	4	[
water	35:15	0:0	4	1
op	35:16	0:0	4	]
op	35:17	0:0	4	.
water	35:18	0:0	4	m4ac
op	35:22	0:0	4	.
water	35:23	0:0	4	chan_config
op	35:35	0:0	4	=
water	35:37	0:0	4	i
water	35:38	0:0	4	;
if	36:8	44:8	4	(ac -> oc [ 1 ] . m4ac . chan_config)
cond	36:12	36:27	5	ac -> oc [ 1 ] . m4ac . chan_config
water	36:12	0:0	6	ac
op	36:14	0:0	6	->
water	36:16	0:0	6	oc
op	36:18	0:0	6	[
water	36:19	0:0	6	1
op	36:20	0:0	6	]
op	36:21	0:0	6	.
water	36:22	0:0	6	m4ac
op	36:26	0:0	6	.
water	36:27	0:0	6	chan_config
stmts	36:40	44:8	5	
water	36:40	0:0	6	{
decl	37:12	38:61	6	int	ret
op	37:20	0:0	6	=
call	37:22	38:60	7	set_default_channel_config
arg	37:49	37:54	8	avctx
water	37:49	0:0	9	avctx
arg	37:56	37:66	8	layout_map
water	37:56	0:0	9	layout_map
arg	38:16	38:32	8	&layout_map_tags
op	38:16	0:0	9	&
water	38:17	0:0	9	layout_map_tags
arg	38:34	38:60	8	ac->oc[1].m4ac.chan_config
water	38:34	0:0	9	ac
op	38:36	0:0	9	->
water	38:38	0:0	9	oc
op	38:40	0:0	9	[
water	38:41	0:0	9	1
op	38:42	0:0	9	]
op	38:43	0:0	9	.
water	38:44	0:0	9	m4ac
op	38:48	0:0	9	.
water	38:49	0:0	9	chan_config
if	39:12	41:50	6	(! ret)
cond	39:16	39:17	7	! ret
op	39:16	0:0	8	!
water	39:17	0:0	8	ret
stmts	40:16	41:50	7	
call	40:16	41:49	8	output_configure
arg	40:33	40:35	9	ac
water	40:33	0:0	10	ac
arg	40:37	40:47	9	layout_map
water	40:37	0:0	10	layout_map
arg	40:49	40:64	9	layout_map_tags
water	40:49	0:0	10	layout_map_tags
arg	41:33	41:46	9	OC_GLOBAL_HDR
water	41:33	0:0	10	OC_GLOBAL_HDR
arg	41:48	41:49	9	0
water	41:48	0:0	10	0
water	41:50	0:0	8	;
else	42:12	43:42	6
stmts	42:17	43:42	7	
if	42:17	43:42	8	(avctx -> err_recognition & AV_EF_EXPLODE)
cond	42:21	42:46	9	avctx -> err_recognition & AV_EF_EXPLODE
water	42:21	0:0	10	avctx
op	42:26	0:0	10	->
water	42:28	0:0	10	err_recognition
op	42:44	0:0	10	&
water	42:46	0:0	10	AV_EF_EXPLODE
stmts	43:16	43:42	9	
return	43:16	43:42	10	AVERROR_INVALIDDATA
water	43:23	0:0	11	AVERROR_INVALIDDATA
water	44:8	0:0	6	}
water	45:4	0:0	4	}
if	46:4	49:4	2	(avctx -> channels > MAX_CHANNELS)
cond	46:8	46:26	3	avctx -> channels > MAX_CHANNELS
water	46:8	0:0	4	avctx
op	46:13	0:0	4	->
water	46:15	0:0	4	channels
op	46:24	0:0	4	>
water	46:26	0:0	4	MAX_CHANNELS
stmts	46:40	49:4	3	
water	46:40	0:0	4	{
call	47:8	47:57	4	av_log
arg	47:15	47:20	5	avctx
water	47:15	0:0	6	avctx
arg	47:22	47:34	5	AV_LOG_ERROR
water	47:22	0:0	6	AV_LOG_ERROR
arg	47:36	47:57	5	"Too many channels\n"
water	47:36	0:0	6	"Too many channels\n"
water	47:58	0:0	4	;
return	48:8	48:34	4	AVERROR_INVALIDDATA
water	48:15	0:0	5	AVERROR_INVALIDDATA
water	49:4	0:0	4	}
call	50:4	50:31	2	AAC_INIT_VLC_STATIC
arg	50:25	50:26	3	0
water	50:25	0:0	4	0
arg	50:28	50:31	3	304
water	50:28	0:0	4	304
water	50:32	0:0	2	;
call	51:4	51:31	2	AAC_INIT_VLC_STATIC
arg	51:25	51:26	3	1
water	51:25	0:0	4	1
arg	51:28	51:31	3	270
water	51:28	0:0	4	270
water	51:32	0:0	2	;
call	52:4	52:31	2	AAC_INIT_VLC_STATIC
arg	52:25	52:26	3	2
water	52:25	0:0	4	2
arg	52:28	52:31	3	550
water	52:28	0:0	4	550
water	52:32	0:0	2	;
call	53:4	53:31	2	AAC_INIT_VLC_STATIC
arg	53:25	53:26	3	3
water	53:25	0:0	4	3
arg	53:28	53:31	3	300
water	53:28	0:0	4	300
water	53:32	0:0	2	;
call	54:4	54:31	2	AAC_INIT_VLC_STATIC
arg	54:25	54:26	3	4
water	54:25	0:0	4	4
arg	54:28	54:31	3	328
water	54:28	0:0	4	328
water	54:32	0:0	2	;
call	55:4	55:31	2	AAC_INIT_VLC_STATIC
arg	55:25	55:26	3	5
water	55:25	0:0	4	5
arg	55:28	55:31	3	294
water	55:28	0:0	4	294
water	55:32	0:0	2	;
call	56:4	56:31	2	AAC_INIT_VLC_STATIC
arg	56:25	56:26	3	6
water	56:25	0:0	4	6
arg	56:28	56:31	3	306
water	56:28	0:0	4	306
water	56:32	0:0	2	;
call	57:4	57:31	2	AAC_INIT_VLC_STATIC
arg	57:25	57:26	3	7
water	57:25	0:0	4	7
arg	57:28	57:31	3	268
water	57:28	0:0	4	268
water	57:32	0:0	2	;
call	58:4	58:31	2	AAC_INIT_VLC_STATIC
arg	58:25	58:26	3	8
water	58:25	0:0	4	8
arg	58:28	58:31	3	510
water	58:28	0:0	4	510
water	58:32	0:0	2	;
call	59:4	59:31	2	AAC_INIT_VLC_STATIC
arg	59:25	59:26	3	9
water	59:25	0:0	4	9
arg	59:28	59:31	3	366
water	59:28	0:0	4	366
water	59:32	0:0	2	;
call	60:4	60:31	2	AAC_INIT_VLC_STATIC
arg	60:24	60:26	3	10
water	60:24	0:0	4	10
arg	60:28	60:31	3	462
water	60:28	0:0	4	462
water	60:32	0:0	2	;
call	61:4	61:30	2	AAC_RENAME
arg	61:15	61:30	3	ff_aac_sbr_init
water	61:15	0:0	4	ff_aac_sbr_init
water	61:31	0:0	2	(
water	61:32	0:0	2	)
water	61:33	0:0	2	;
water	63:4	0:0	2	ac
op	63:6	0:0	2	->
water	63:8	0:0	2	fdsp
op	63:13	0:0	2	=
call	63:15	63:75	2	avpriv_alloc_fixed_dsp
arg	63:38	63:75	3	avctx->flags&AV_CODEC_FLAG_BITEXACT
water	63:38	0:0	4	avctx
op	63:43	0:0	4	->
water	63:45	0:0	4	flags
op	63:51	0:0	4	&
water	63:53	0:0	4	AV_CODEC_FLAG_BITEXACT
water	63:76	0:0	2	;
water	65:4	0:0	2	ac
op	65:6	0:0	2	->
water	65:8	0:0	2	fdsp
op	65:13	0:0	2	=
call	65:15	65:75	2	avpriv_float_dsp_alloc
arg	65:38	65:75	3	avctx->flags&AV_CODEC_FLAG_BITEXACT
water	65:38	0:0	4	avctx
op	65:43	0:0	4	->
water	65:45	0:0	4	flags
op	65:51	0:0	4	&
water	65:53	0:0	4	AV_CODEC_FLAG_BITEXACT
water	65:76	0:0	2	;
if	67:4	69:4	2	(! ac -> fdsp)
cond	67:8	67:13	3	! ac -> fdsp
op	67:8	0:0	4	!
water	67:9	0:0	4	ac
op	67:11	0:0	4	->
water	67:13	0:0	4	fdsp
stmts	67:19	69:4	3	
water	67:19	0:0	4	{
return	68:8	68:30	4	AVERROR(ENOMEM)
call	68:15	68:29	5	AVERROR
arg	68:23	68:29	6	ENOMEM
water	68:23	0:0	7	ENOMEM
water	69:4	0:0	4	}
water	70:4	0:0	2	ac
op	70:6	0:0	2	->
water	70:8	0:0	2	random_state
op	70:21	0:0	2	=
water	70:23	0:0	2	0
water	70:24	0:0	2	x1f2e3d4c
water	70:33	0:0	2	;
call	71:4	71:21	2	ff_aac_tableinit
water	71:22	0:0	2	;
call	72:4	80:23	2	INIT_VLC_STATIC
arg	72:20	72:37	3	&vlc_scalefactors
op	72:20	0:0	4	&
water	72:21	0:0	4	vlc_scalefactors
arg	72:39	72:40	3	7
water	72:39	0:0	4	7
arg	73:20	73:59	3	FF_ARRAY_ELEMS(ff_aac_scalefactor_code)
call	73:20	73:58	4	FF_ARRAY_ELEMS
arg	73:35	73:58	5	ff_aac_scalefactor_code
water	73:35	0:0	6	ff_aac_scalefactor_code
arg	74:20	74:43	3	ff_aac_scalefactor_bits
water	74:20	0:0	4	ff_aac_scalefactor_bits
arg	75:20	75:54	3	sizeof(ff_aac_scalefactor_bits[0])
op	75:20	0:0	4	sizeof
water	75:26	0:0	4	(
water	75:27	0:0	4	ff_aac_scalefactor_bits
op	75:50	0:0	4	[
water	75:51	0:0	4	0
op	75:52	0:0	4	]
water	75:53	0:0	4	)
arg	76:20	76:54	3	sizeof(ff_aac_scalefactor_bits[0])
op	76:20	0:0	4	sizeof
water	76:26	0:0	4	(
water	76:27	0:0	4	ff_aac_scalefactor_bits
op	76:50	0:0	4	[
water	76:51	0:0	4	0
op	76:52	0:0	4	]
water	76:53	0:0	4	)
arg	77:20	77:43	3	ff_aac_scalefactor_code
water	77:20	0:0	4	ff_aac_scalefactor_code
arg	78:20	78:54	3	sizeof(ff_aac_scalefactor_code[0])
op	78:20	0:0	4	sizeof
water	78:26	0:0	4	(
water	78:27	0:0	4	ff_aac_scalefactor_code
op	78:50	0:0	4	[
water	78:51	0:0	4	0
op	78:52	0:0	4	]
water	78:53	0:0	4	)
arg	79:20	79:54	3	sizeof(ff_aac_scalefactor_code[0])
op	79:20	0:0	4	sizeof
water	79:26	0:0	4	(
water	79:27	0:0	4	ff_aac_scalefactor_code
op	79:50	0:0	4	[
water	79:51	0:0	4	0
op	79:52	0:0	4	]
water	79:53	0:0	4	)
arg	80:20	80:23	3	352
water	80:20	0:0	4	352
water	80:24	0:0	2	;
call	81:4	81:30	2	AAC_RENAME_32
arg	81:18	81:30	3	ff_mdct_init
water	81:18	0:0	4	ff_mdct_init
water	81:31	0:0	2	(
op	81:32	0:0	2	&
water	81:33	0:0	2	ac
op	81:35	0:0	2	->
water	81:37	0:0	2	mdct
water	81:41	0:0	2	,
water	81:49	0:0	2	11
water	81:51	0:0	2	,
water	81:53	0:0	2	1
water	81:54	0:0	2	,
water	81:56	0:0	2	1
op	81:57	0:0	2	.
water	81:58	0:0	2	0
op	81:60	0:0	2	/
call	81:62	81:76	2	RANGE15
arg	81:70	81:76	3	1024.0
water	81:70	0:0	4	1024
op	81:74	0:0	4	.
water	81:75	0:0	4	0
water	81:77	0:0	2	)
water	81:78	0:0	2	;
call	82:4	82:30	2	AAC_RENAME_32
arg	82:18	82:30	3	ff_mdct_init
water	82:18	0:0	4	ff_mdct_init
water	82:31	0:0	2	(
op	82:32	0:0	2	&
water	82:33	0:0	2	ac
op	82:35	0:0	2	->
water	82:37	0:0	2	mdct_ld
water	82:44	0:0	2	,
water	82:49	0:0	2	10
water	82:51	0:0	2	,
water	82:53	0:0	2	1
water	82:54	0:0	2	,
water	82:56	0:0	2	1
op	82:57	0:0	2	.
water	82:58	0:0	2	0
op	82:60	0:0	2	/
call	82:62	82:75	2	RANGE15
arg	82:70	82:75	3	512.0
water	82:70	0:0	4	512
op	82:73	0:0	4	.
water	82:74	0:0	4	0
water	82:76	0:0	2	)
water	82:77	0:0	2	;
call	83:4	83:30	2	AAC_RENAME_32
arg	83:18	83:30	3	ff_mdct_init
water	83:18	0:0	4	ff_mdct_init
water	83:31	0:0	2	(
op	83:32	0:0	2	&
water	83:33	0:0	2	ac
op	83:35	0:0	2	->
water	83:37	0:0	2	mdct_small
water	83:47	0:0	2	,
water	83:50	0:0	2	8
water	83:51	0:0	2	,
water	83:53	0:0	2	1
water	83:54	0:0	2	,
water	83:56	0:0	2	1
op	83:57	0:0	2	.
water	83:58	0:0	2	0
op	83:60	0:0	2	/
call	83:62	83:75	2	RANGE15
arg	83:70	83:75	3	128.0
water	83:70	0:0	4	128
op	83:73	0:0	4	.
water	83:74	0:0	4	0
water	83:76	0:0	2	)
water	83:77	0:0	2	;
call	84:4	84:30	2	AAC_RENAME_32
arg	84:18	84:30	3	ff_mdct_init
water	84:18	0:0	4	ff_mdct_init
water	84:31	0:0	2	(
op	84:32	0:0	2	&
water	84:33	0:0	2	ac
op	84:35	0:0	2	->
water	84:37	0:0	2	mdct_ltp
water	84:45	0:0	2	,
water	84:49	0:0	2	11
water	84:51	0:0	2	,
water	84:53	0:0	2	0
water	84:54	0:0	2	,
call	84:56	84:68	2	RANGE15
arg	84:64	84:68	3	-2.0
op	84:64	0:0	4	-
water	84:65	0:0	4	2
op	84:66	0:0	4	.
water	84:67	0:0	4	0
water	84:69	0:0	2	)
water	84:70	0:0	2	;
water	86:4	0:0	2	ret
op	86:8	0:0	2	=
call	86:10	86:41	2	ff_imdct15_init
arg	86:26	86:38	3	&ac->mdct480
op	86:26	0:0	4	&
water	86:27	0:0	4	ac
op	86:29	0:0	4	->
water	86:31	0:0	4	mdct480
arg	86:40	86:41	3	5
water	86:40	0:0	4	5
water	86:42	0:0	2	;
if	87:4	88:18	2	(ret < 0)
cond	87:8	87:14	3	ret < 0
water	87:8	0:0	4	ret
op	87:12	0:0	4	<
water	87:14	0:0	4	0
stmts	88:8	88:18	3	
return	88:8	88:18	4	ret
water	88:15	0:0	5	ret
call	91:4	91:33	2	AAC_RENAME
arg	91:15	91:33	3	ff_kbd_window_init
water	91:15	0:0	4	ff_kbd_window_init
water	91:34	0:0	2	(
call	91:35	91:66	2	AAC_RENAME
arg	91:46	91:66	3	ff_aac_kbd_long_1024
water	91:46	0:0	4	ff_aac_kbd_long_1024
water	91:67	0:0	2	,
water	91:69	0:0	2	4
op	91:70	0:0	2	.
water	91:71	0:0	2	0
water	91:72	0:0	2	,
water	91:74	0:0	2	1024
water	91:78	0:0	2	)
water	91:79	0:0	2	;
call	92:4	92:33	2	AAC_RENAME
arg	92:15	92:33	3	ff_kbd_window_init
water	92:15	0:0	4	ff_kbd_window_init
water	92:34	0:0	2	(
call	92:35	92:66	2	AAC_RENAME
arg	92:46	92:66	3	ff_aac_kbd_short_128
water	92:46	0:0	4	ff_aac_kbd_short_128
water	92:67	0:0	2	,
water	92:69	0:0	2	6
op	92:70	0:0	2	.
water	92:71	0:0	2	0
water	92:72	0:0	2	,
water	92:74	0:0	2	128
water	92:77	0:0	2	)
water	92:78	0:0	2	;
call	93:4	93:38	2	AAC_RENAME
arg	93:15	93:38	3	ff_init_ff_sine_windows
water	93:15	0:0	4	ff_init_ff_sine_windows
water	93:39	0:0	2	(
water	93:40	0:0	2	10
water	93:42	0:0	2	)
water	93:43	0:0	2	;
call	94:4	94:38	2	AAC_RENAME
arg	94:15	94:38	3	ff_init_ff_sine_windows
water	94:15	0:0	4	ff_init_ff_sine_windows
water	94:39	0:0	2	(
water	94:41	0:0	2	9
water	94:42	0:0	2	)
water	94:43	0:0	2	;
call	95:4	95:38	2	AAC_RENAME
arg	95:15	95:38	3	ff_init_ff_sine_windows
water	95:15	0:0	4	ff_init_ff_sine_windows
water	95:39	0:0	2	(
water	95:41	0:0	2	7
water	95:42	0:0	2	)
water	95:43	0:0	2	;
call	96:4	96:29	2	AAC_RENAME
arg	96:15	96:29	3	cbrt_tableinit
water	96:15	0:0	4	cbrt_tableinit
water	96:30	0:0	2	(
water	96:31	0:0	2	)
water	96:32	0:0	2	;
return	97:4	97:12	2	0
water	97:11	0:0	3	0
