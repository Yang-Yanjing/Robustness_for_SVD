func	1:0	73:0	0	static void	stream_cycle_channel
params	1:32	0:0	1	
param	1:33	1:47	2	VideoState *	is
param	1:49	1:63	2	int	codec_type
stmnts	0:0	72:43	1	
decl	3:4	3:32	2	AVFormatContext	*ic
op	3:24	0:0	2	=
water	3:26	0:0	2	is
op	3:28	0:0	2	->
water	3:30	0:0	2	ic
decl	4:4	4:33	2	int	start_index
water	4:19	0:0	2	,
decl	4:4	4:33	2	int	stream_index
decl	5:4	5:17	2	int	old_index
decl	6:4	6:16	2	AVStream	*st
decl	7:4	7:23	2	AVProgram	*p
op	7:17	0:0	2	=
water	7:19	0:0	2	NULL
decl	8:4	8:39	2	int	nb_streams
op	8:19	0:0	2	=
water	8:21	0:0	2	is
op	8:23	0:0	2	->
water	8:25	0:0	2	ic
op	8:27	0:0	2	->
water	8:29	0:0	2	nb_streams
if	9:4	12:4	2	(codec_type == AVMEDIA_TYPE_VIDEO)
cond	9:8	9:22	3	codec_type == AVMEDIA_TYPE_VIDEO
water	9:8	0:0	4	codec_type
op	9:19	0:0	4	==
water	9:22	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	9:42	12:4	3	
water	9:42	0:0	4	{
water	10:8	0:0	4	start_index
op	10:20	0:0	4	=
water	10:22	0:0	4	is
op	10:24	0:0	4	->
water	10:26	0:0	4	last_video_stream
water	10:43	0:0	4	;
water	11:8	0:0	4	old_index
op	11:18	0:0	4	=
water	11:20	0:0	4	is
op	11:22	0:0	4	->
water	11:24	0:0	4	video_stream
water	11:36	0:0	4	;
water	12:4	0:0	4	}
else	12:6	15:4	2
stmts	12:11	15:4	3	
if	12:11	15:4	4	(codec_type == AVMEDIA_TYPE_AUDIO)
cond	12:15	12:29	5	codec_type == AVMEDIA_TYPE_AUDIO
water	12:15	0:0	6	codec_type
op	12:26	0:0	6	==
water	12:29	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	12:49	15:4	5	
water	12:49	0:0	6	{
water	13:8	0:0	6	start_index
op	13:20	0:0	6	=
water	13:22	0:0	6	is
op	13:24	0:0	6	->
water	13:26	0:0	6	last_audio_stream
water	13:43	0:0	6	;
water	14:8	0:0	6	old_index
op	14:18	0:0	6	=
water	14:20	0:0	6	is
op	14:22	0:0	6	->
water	14:24	0:0	6	audio_stream
water	14:36	0:0	6	;
water	15:4	0:0	6	}
else	15:6	18:4	2
stmts	15:11	18:4	3	
water	15:11	0:0	4	{
water	16:8	0:0	4	start_index
op	16:20	0:0	4	=
water	16:22	0:0	4	is
op	16:24	0:0	4	->
water	16:26	0:0	4	last_subtitle_stream
water	16:46	0:0	4	;
water	17:8	0:0	4	old_index
op	17:18	0:0	4	=
water	17:20	0:0	4	is
op	17:22	0:0	4	->
water	17:24	0:0	4	subtitle_stream
water	17:39	0:0	4	;
water	18:4	0:0	4	}
water	19:4	0:0	2	stream_index
op	19:17	0:0	2	=
water	19:19	0:0	2	start_index
water	19:30	0:0	2	;
if	20:4	31:4	2	(codec_type != AVMEDIA_TYPE_VIDEO && is -> video_stream != - 1)
cond	20:8	20:65	3	codec_type != AVMEDIA_TYPE_VIDEO && is -> video_stream != - 1
water	20:8	0:0	4	codec_type
op	20:19	0:0	4	!=
water	20:22	0:0	4	AVMEDIA_TYPE_VIDEO
op	20:41	0:0	4	&&
water	20:44	0:0	4	is
op	20:46	0:0	4	->
water	20:48	0:0	4	video_stream
op	20:61	0:0	4	!=
op	20:64	0:0	4	-
water	20:65	0:0	4	1
stmts	20:68	31:4	3	
water	20:68	0:0	4	{
water	21:8	0:0	4	p
op	21:10	0:0	4	=
call	21:12	21:66	4	av_find_program_from_stream
arg	21:40	21:42	5	ic
water	21:40	0:0	6	ic
arg	21:44	21:48	5	NULL
water	21:44	0:0	6	NULL
arg	21:50	21:66	5	is->video_stream
water	21:50	0:0	6	is
op	21:52	0:0	6	->
water	21:54	0:0	6	video_stream
water	21:67	0:0	4	;
if	22:8	30:8	4	(p)
cond	22:12	22:12	5	p
water	22:12	0:0	6	p
stmts	22:15	30:8	5	
water	22:15	0:0	6	{
water	23:12	0:0	6	nb_streams
op	23:23	0:0	6	=
water	23:25	0:0	6	p
op	23:26	0:0	6	->
water	23:28	0:0	6	nb_stream_indexes
water	23:45	0:0	6	;
for	24:12	26:25	6	(start_index = 0 ;start_index < nb_streams;start_index ++)
forinit	24:17	24:32	7	start_index = 0 ;
water	24:17	0:0	8	start_index
op	24:29	0:0	8	=
water	24:31	0:0	8	0
water	24:32	0:0	8	;
cond	24:34	24:48	7	start_index < nb_streams
water	24:34	0:0	8	start_index
op	24:46	0:0	8	<
water	24:48	0:0	8	nb_streams
forexpr	24:60	24:71	7	start_index ++
water	24:60	0:0	8	start_index
op	24:71	0:0	8	++
stmts	25:16	26:25	7	
if	25:16	26:25	8	(p -> stream_index [ start_index ] == stream_index)
cond	25:20	25:52	9	p -> stream_index [ start_index ] == stream_index
water	25:20	0:0	10	p
op	25:21	0:0	10	->
water	25:23	0:0	10	stream_index
op	25:35	0:0	10	[
water	25:36	0:0	10	start_index
op	25:47	0:0	10	]
op	25:49	0:0	10	==
water	25:52	0:0	10	stream_index
stmts	26:20	26:25	9	
break	26:20	26:25	10	
if	27:12	28:32	6	(start_index == nb_streams)
cond	27:16	27:31	7	start_index == nb_streams
water	27:16	0:0	8	start_index
op	27:28	0:0	8	==
water	27:31	0:0	8	nb_streams
stmts	28:16	28:32	7	
water	28:16	0:0	8	start_index
op	28:28	0:0	8	=
op	28:30	0:0	8	-
water	28:31	0:0	8	1
water	28:32	0:0	8	;
water	29:12	0:0	6	stream_index
op	29:25	0:0	6	=
water	29:27	0:0	6	start_index
water	29:38	0:0	6	;
water	30:8	0:0	6	}
water	31:4	0:0	4	}
for	32:4	63:4	2	(;;)
forinit	32:9	32:9	3	;
water	32:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	32:13	63:4	3	
water	32:13	0:0	4	{
if	33:8	44:8	4	(++ stream_index >= nb_streams)
cond	33:12	33:30	5	++ stream_index >= nb_streams
op	33:12	0:0	6	++
water	33:14	0:0	6	stream_index
op	33:27	0:0	6	>=
water	33:30	0:0	6	nb_streams
stmts	34:8	44:8	5	
water	34:8	0:0	6	{
if	35:12	40:12	6	(codec_type == AVMEDIA_TYPE_SUBTITLE)
cond	35:16	35:30	7	codec_type == AVMEDIA_TYPE_SUBTITLE
water	35:16	0:0	8	codec_type
op	35:27	0:0	8	==
water	35:30	0:0	8	AVMEDIA_TYPE_SUBTITLE
stmts	36:12	40:12	7	
water	36:12	0:0	8	{
water	37:16	0:0	8	stream_index
op	37:29	0:0	8	=
op	37:31	0:0	8	-
water	37:32	0:0	8	1
water	37:33	0:0	8	;
water	38:16	0:0	8	is
op	38:18	0:0	8	->
water	38:20	0:0	8	last_subtitle_stream
op	38:41	0:0	8	=
op	38:43	0:0	8	-
water	38:44	0:0	8	1
water	38:45	0:0	8	;
goto	39:16	39:28	8	the_end
water	39:21	0:0	9	the_end
water	40:12	0:0	8	}
if	41:12	42:22	6	(start_index == - 1)
cond	41:16	41:32	7	start_index == - 1
water	41:16	0:0	8	start_index
op	41:28	0:0	8	==
op	41:31	0:0	8	-
water	41:32	0:0	8	1
stmts	42:16	42:22	7	
return	42:16	42:22	8	
water	43:12	0:0	6	stream_index
op	43:25	0:0	6	=
water	43:27	0:0	6	0
water	43:28	0:0	6	;
water	44:8	0:0	6	}
if	45:8	46:18	4	(stream_index == start_index)
cond	45:12	45:28	5	stream_index == start_index
water	45:12	0:0	6	stream_index
op	45:25	0:0	6	==
water	45:28	0:0	6	start_index
stmts	46:12	46:18	5	
return	46:12	46:18	6	
water	47:8	0:0	4	st
op	47:11	0:0	4	=
water	47:13	0:0	4	is
op	47:15	0:0	4	->
water	47:17	0:0	4	ic
op	47:19	0:0	4	->
water	47:21	0:0	4	streams
op	47:28	0:0	4	[
water	47:29	0:0	4	p
water	47:31	0:0	4	?
water	47:33	0:0	4	p
op	47:34	0:0	4	->
water	47:36	0:0	4	stream_index
op	47:48	0:0	4	[
water	47:49	0:0	4	stream_index
op	47:61	0:0	4	]
water	47:63	0:0	4	:
water	47:65	0:0	4	stream_index
op	47:77	0:0	4	]
water	47:78	0:0	4	;
if	48:8	62:8	4	(st -> codecpar -> codec_type == codec_type)
cond	48:12	48:40	5	st -> codecpar -> codec_type == codec_type
water	48:12	0:0	6	st
op	48:14	0:0	6	->
water	48:16	0:0	6	codecpar
op	48:24	0:0	6	->
water	48:26	0:0	6	codec_type
op	48:37	0:0	6	==
water	48:40	0:0	6	codec_type
stmts	48:52	62:8	5	
water	48:52	0:0	6	{
switch	50:12	61:12	6	(codec_type)
cond	50:20	50:20	7	codec_type
water	50:20	0:0	8	codec_type
stmts	50:32	61:12	7	
water	50:32	0:0	8	{
label	51:12	51:35	8	case AVMEDIA_TYPE_AUDIO :
if	52:16	54:32	8	(st -> codecpar -> sample_rate != 0 && st -> codecpar -> channels != 0)
cond	52:20	53:46	9	st -> codecpar -> sample_rate != 0 && st -> codecpar -> channels != 0
water	52:20	0:0	10	st
op	52:22	0:0	10	->
water	52:24	0:0	10	codecpar
op	52:32	0:0	10	->
water	52:34	0:0	10	sample_rate
op	52:46	0:0	10	!=
water	52:49	0:0	10	0
op	52:51	0:0	10	&&
water	53:20	0:0	10	st
op	53:22	0:0	10	->
water	53:24	0:0	10	codecpar
op	53:32	0:0	10	->
water	53:34	0:0	10	channels
op	53:43	0:0	10	!=
water	53:46	0:0	10	0
stmts	54:20	54:32	9	
goto	54:20	54:32	10	the_end
water	54:25	0:0	11	the_end
break	55:16	55:21	8	
label	56:12	56:35	8	case AVMEDIA_TYPE_VIDEO :
label	57:12	57:38	8	case AVMEDIA_TYPE_SUBTITLE :
goto	58:16	58:28	8	the_end
water	58:21	0:0	9	the_end
label	59:12	59:19	8	default :
break	60:16	60:21	8	
water	61:12	0:0	8	}
water	62:8	0:0	6	}
water	63:4	0:0	4	}
label	64:1	64:8	2	the_end :
if	65:4	66:52	2	(p && stream_index != - 1)
cond	65:8	65:30	3	p && stream_index != - 1
water	65:8	0:0	4	p
op	65:10	0:0	4	&&
water	65:13	0:0	4	stream_index
op	65:26	0:0	4	!=
op	65:29	0:0	4	-
water	65:30	0:0	4	1
stmts	66:8	66:52	3	
water	66:8	0:0	4	stream_index
op	66:21	0:0	4	=
water	66:23	0:0	4	p
op	66:24	0:0	4	->
water	66:26	0:0	4	stream_index
op	66:38	0:0	4	[
water	66:39	0:0	4	stream_index
op	66:51	0:0	4	]
water	66:52	0:0	4	;
call	67:4	70:23	2	av_log
arg	67:11	67:15	3	NULL
water	67:11	0:0	4	NULL
arg	67:17	67:28	3	AV_LOG_INFO
water	67:17	0:0	4	AV_LOG_INFO
arg	67:30	67:66	3	"Switch %s stream from #%d to #%d\n"
water	67:30	0:0	4	"Switch %s stream from #%d to #%d\n"
arg	68:11	68:47	3	av_get_media_type_string(codec_type)
call	68:11	68:46	4	av_get_media_type_string
arg	68:36	68:46	5	codec_type
water	68:36	0:0	6	codec_type
arg	69:11	69:20	3	old_index
water	69:11	0:0	4	old_index
arg	70:11	70:23	3	stream_index
water	70:11	0:0	4	stream_index
water	70:24	0:0	2	;
call	71:4	71:40	2	stream_component_close
arg	71:27	71:29	3	is
water	71:27	0:0	4	is
arg	71:31	71:40	3	old_index
water	71:31	0:0	4	old_index
water	71:41	0:0	2	;
call	72:4	72:42	2	stream_component_open
arg	72:26	72:28	3	is
water	72:26	0:0	4	is
arg	72:30	72:42	3	stream_index
water	72:30	0:0	4	stream_index
water	72:43	0:0	2	;
