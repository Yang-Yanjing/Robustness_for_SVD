func	1:0	19:0	0	static int	mov_write_stsd_tag
params	1:29	0:0	1	
param	1:30	1:45	2	AVIOContext *	pb
param	1:47	1:65	2	MOVMuxContext *	mov
param	1:67	1:82	2	MOVTrack *	track
stmnts	0:0	18:31	1	
decl	3:4	3:31	2	int64_t	pos
op	3:16	0:0	2	=
call	3:18	3:30	3	avio_tell
arg	3:28	3:30	4	pb
water	3:28	0:0	5	pb
call	4:4	4:19	2	avio_wb32
arg	4:14	4:16	3	pb
water	4:14	0:0	4	pb
arg	4:18	4:19	3	0
water	4:18	0:0	4	0
water	4:20	0:0	2	;
call	5:4	5:27	2	ffio_wfourcc
arg	5:17	5:19	3	pb
water	5:17	0:0	4	pb
arg	5:21	5:27	3	"stsd"
water	5:21	0:0	4	"stsd"
water	5:28	0:0	2	;
call	6:4	6:19	2	avio_wb32
arg	6:14	6:16	3	pb
water	6:14	0:0	4	pb
arg	6:18	6:19	3	0
water	6:18	0:0	4	0
water	6:20	0:0	2	;
call	7:4	7:19	2	avio_wb32
arg	7:14	7:16	3	pb
water	7:14	0:0	4	pb
arg	7:18	7:19	3	1
water	7:18	0:0	4	1
water	7:20	0:0	2	;
if	8:4	9:44	2	(track -> enc -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	8:8	8:34	3	track -> enc -> codec_type == AVMEDIA_TYPE_VIDEO
water	8:8	0:0	4	track
op	8:13	0:0	4	->
water	8:15	0:0	4	enc
op	8:18	0:0	4	->
water	8:20	0:0	4	codec_type
op	8:31	0:0	4	==
water	8:34	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	9:8	9:44	3	
call	9:8	9:43	4	mov_write_video_tag
arg	9:28	9:30	5	pb
water	9:28	0:0	6	pb
arg	9:32	9:35	5	mov
water	9:32	0:0	6	mov
arg	9:38	9:43	5	track
water	9:38	0:0	6	track
water	9:44	0:0	4	;
else	10:4	11:38	2
stmts	10:9	11:38	3	
if	10:9	11:38	4	(track -> enc -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	10:13	10:39	5	track -> enc -> codec_type == AVMEDIA_TYPE_AUDIO
water	10:13	0:0	6	track
op	10:18	0:0	6	->
water	10:20	0:0	6	enc
op	10:23	0:0	6	->
water	10:25	0:0	6	codec_type
op	10:36	0:0	6	==
water	10:39	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	11:8	11:38	5	
call	11:8	11:37	6	mov_write_audio_tag
arg	11:28	11:30	7	pb
water	11:28	0:0	8	pb
arg	11:32	11:37	7	track
water	11:32	0:0	8	track
water	11:38	0:0	6	;
else	12:4	13:41	2
stmts	12:9	13:41	3	
if	12:9	13:41	4	(track -> enc -> codec_type == AVMEDIA_TYPE_SUBTITLE)
cond	12:13	12:39	5	track -> enc -> codec_type == AVMEDIA_TYPE_SUBTITLE
water	12:13	0:0	6	track
op	12:18	0:0	6	->
water	12:20	0:0	6	enc
op	12:23	0:0	6	->
water	12:25	0:0	6	codec_type
op	12:36	0:0	6	==
water	12:39	0:0	6	AVMEDIA_TYPE_SUBTITLE
stmts	13:8	13:41	5	
call	13:8	13:40	6	mov_write_subtitle_tag
arg	13:31	13:33	7	pb
water	13:31	0:0	8	pb
arg	13:35	13:40	7	track
water	13:35	0:0	8	track
water	13:41	0:0	6	;
else	14:4	15:36	2
stmts	14:9	15:36	3	
if	14:9	15:36	4	(track -> enc -> codec_tag ==MKTAG ('r' ,'t' ,'p' ,' ' ))
cond	14:13	14:59	5	track -> enc -> codec_tag ==MKTAG ('r' ,'t' ,'p' ,' ' )
water	14:13	0:0	6	track
op	14:18	0:0	6	->
water	14:20	0:0	6	enc
op	14:23	0:0	6	->
water	14:25	0:0	6	codec_tag
op	14:35	0:0	6	==
call	14:38	14:59	6	MKTAG
arg	14:44	14:47	7	'r'
water	14:44	0:0	8	'r'
arg	14:48	14:51	7	't'
water	14:48	0:0	8	't'
arg	14:52	14:55	7	'p'
water	14:52	0:0	8	'p'
arg	14:56	14:59	7	' '
water	14:56	0:0	8	' '
stmts	15:8	15:36	5	
call	15:8	15:35	6	mov_write_rtp_tag
arg	15:26	15:28	7	pb
water	15:26	0:0	8	pb
arg	15:30	15:35	7	track
water	15:30	0:0	8	track
water	15:36	0:0	6	;
else	16:4	17:37	2
stmts	16:9	17:37	3	
if	16:9	17:37	4	(track -> enc -> codec_tag ==MKTAG ('t' ,'m' ,'c' ,'d' ))
cond	16:13	16:59	5	track -> enc -> codec_tag ==MKTAG ('t' ,'m' ,'c' ,'d' )
water	16:13	0:0	6	track
op	16:18	0:0	6	->
water	16:20	0:0	6	enc
op	16:23	0:0	6	->
water	16:25	0:0	6	codec_tag
op	16:35	0:0	6	==
call	16:38	16:59	6	MKTAG
arg	16:44	16:47	7	't'
water	16:44	0:0	8	't'
arg	16:48	16:51	7	'm'
water	16:48	0:0	8	'm'
arg	16:52	16:55	7	'c'
water	16:52	0:0	8	'c'
arg	16:56	16:59	7	'd'
water	16:56	0:0	8	'd'
stmts	17:8	17:37	5	
call	17:8	17:36	6	mov_write_tmcd_tag
arg	17:27	17:29	7	pb
water	17:27	0:0	8	pb
arg	17:31	17:36	7	track
water	17:31	0:0	8	track
water	17:37	0:0	6	;
return	18:4	18:31	2	update_size(pb,pos)
call	18:11	18:30	3	update_size
arg	18:23	18:25	4	pb
water	18:23	0:0	5	pb
arg	18:27	18:30	4	pos
water	18:27	0:0	5	pos
