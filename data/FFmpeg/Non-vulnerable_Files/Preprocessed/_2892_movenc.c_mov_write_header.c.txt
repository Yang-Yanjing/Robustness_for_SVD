func	1:0	329:0	0	static int	mov_write_header
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
stmnts	0:0	328:14	1	
decl	3:4	3:27	2	AVIOContext	*pb
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	pb
decl	4:4	4:37	2	MOVMuxContext	*mov
op	4:23	0:0	2	=
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	priv_data
decl	5:4	5:85	2	AVDictionaryEntry	*t
water	5:24	0:0	2	,
decl	5:4	5:85	2	AVDictionaryEntry	*global_tcr
op	5:38	0:0	2	=
call	5:40	5:84	3	av_dict_get
arg	5:52	5:63	4	s->metadata
water	5:52	0:0	5	s
op	5:53	0:0	5	->
water	5:55	0:0	5	metadata
arg	5:65	5:75	4	"timecode"
water	5:65	0:0	5	"timecode"
arg	5:77	5:81	4	NULL
water	5:77	0:0	5	NULL
arg	5:83	5:84	4	0
water	5:83	0:0	5	0
decl	6:4	6:46	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:46	2	int	ret
water	6:14	0:0	2	,
decl	6:4	6:46	2	int	hint_track
op	6:27	0:0	2	=
water	6:29	0:0	2	0
water	6:30	0:0	2	,
decl	6:4	6:46	2	int	tmcd_track
op	6:43	0:0	2	=
water	6:45	0:0	2	0
water	7:4	0:0	2	mov
op	7:7	0:0	2	->
water	7:9	0:0	2	fc
op	7:12	0:0	2	=
water	7:14	0:0	2	s
water	7:15	0:0	2	;
water	9:4	0:0	2	mov
op	9:7	0:0	2	->
water	9:9	0:0	2	mode
op	9:14	0:0	2	=
water	9:16	0:0	2	MODE_MP4
water	9:24	0:0	2	;
if	10:4	18:4	2	(s -> oformat)
cond	10:8	10:11	3	s -> oformat
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	oformat
stmts	10:20	18:4	3	
water	10:20	0:0	4	{
if	11:8	11:66	4	(!strcmp ("3gp" ,s -> oformat -> name ))
cond	11:12	11:43	5	!strcmp ("3gp" ,s -> oformat -> name )
op	11:12	0:0	6	!
call	11:13	11:43	6	strcmp
arg	11:20	11:25	7	"3gp"
water	11:20	0:0	8	"3gp"
arg	11:27	11:43	7	s->oformat->name
water	11:27	0:0	8	s
op	11:28	0:0	8	->
water	11:30	0:0	8	oformat
op	11:37	0:0	8	->
water	11:39	0:0	8	name
stmts	11:46	11:66	5	
water	11:46	0:0	6	mov
op	11:49	0:0	6	->
water	11:51	0:0	6	mode
op	11:56	0:0	6	=
water	11:58	0:0	6	MODE_3GP
water	11:66	0:0	6	;
else	12:8	12:80	4
stmts	12:13	12:80	5	
if	12:13	12:80	6	(!strcmp ("3g2" ,s -> oformat -> name ))
cond	12:17	12:48	7	!strcmp ("3g2" ,s -> oformat -> name )
op	12:17	0:0	8	!
call	12:18	12:48	8	strcmp
arg	12:25	12:30	9	"3g2"
water	12:25	0:0	10	"3g2"
arg	12:32	12:48	9	s->oformat->name
water	12:32	0:0	10	s
op	12:33	0:0	10	->
water	12:35	0:0	10	oformat
op	12:42	0:0	10	->
water	12:44	0:0	10	name
stmts	12:51	12:80	7	
water	12:51	0:0	8	mov
op	12:54	0:0	8	->
water	12:56	0:0	8	mode
op	12:61	0:0	8	=
water	12:63	0:0	8	MODE_3GP
op	12:71	0:0	8	|
water	12:72	0:0	8	MODE_3G2
water	12:80	0:0	8	;
else	13:8	13:71	4
stmts	13:13	13:71	5	
if	13:13	13:71	6	(!strcmp ("mov" ,s -> oformat -> name ))
cond	13:17	13:48	7	!strcmp ("mov" ,s -> oformat -> name )
op	13:17	0:0	8	!
call	13:18	13:48	8	strcmp
arg	13:25	13:30	9	"mov"
water	13:25	0:0	10	"mov"
arg	13:32	13:48	9	s->oformat->name
water	13:32	0:0	10	s
op	13:33	0:0	10	->
water	13:35	0:0	10	oformat
op	13:42	0:0	10	->
water	13:44	0:0	10	name
stmts	13:51	13:71	7	
water	13:51	0:0	8	mov
op	13:54	0:0	8	->
water	13:56	0:0	8	mode
op	13:61	0:0	8	=
water	13:63	0:0	8	MODE_MOV
water	13:71	0:0	8	;
else	14:8	14:71	4
stmts	14:13	14:71	5	
if	14:13	14:71	6	(!strcmp ("psp" ,s -> oformat -> name ))
cond	14:17	14:48	7	!strcmp ("psp" ,s -> oformat -> name )
op	14:17	0:0	8	!
call	14:18	14:48	8	strcmp
arg	14:25	14:30	9	"psp"
water	14:25	0:0	10	"psp"
arg	14:32	14:48	9	s->oformat->name
water	14:32	0:0	10	s
op	14:33	0:0	10	->
water	14:35	0:0	10	oformat
op	14:42	0:0	10	->
water	14:44	0:0	10	name
stmts	14:51	14:71	7	
water	14:51	0:0	8	mov
op	14:54	0:0	8	->
water	14:56	0:0	8	mode
op	14:61	0:0	8	=
water	14:63	0:0	8	MODE_PSP
water	14:71	0:0	8	;
else	15:8	15:72	4
stmts	15:13	15:72	5	
if	15:13	15:72	6	(!strcmp ("ipod" ,s -> oformat -> name ))
cond	15:17	15:48	7	!strcmp ("ipod" ,s -> oformat -> name )
op	15:17	0:0	8	!
call	15:18	15:48	8	strcmp
arg	15:25	15:31	9	"ipod"
water	15:25	0:0	10	"ipod"
arg	15:32	15:48	9	s->oformat->name
water	15:32	0:0	10	s
op	15:33	0:0	10	->
water	15:35	0:0	10	oformat
op	15:42	0:0	10	->
water	15:44	0:0	10	name
stmts	15:51	15:72	7	
water	15:51	0:0	8	mov
op	15:54	0:0	8	->
water	15:56	0:0	8	mode
op	15:61	0:0	8	=
water	15:63	0:0	8	MODE_IPOD
water	15:72	0:0	8	;
else	16:8	16:71	4
stmts	16:13	16:71	5	
if	16:13	16:71	6	(!strcmp ("ismv" ,s -> oformat -> name ))
cond	16:17	16:48	7	!strcmp ("ismv" ,s -> oformat -> name )
op	16:17	0:0	8	!
call	16:18	16:48	8	strcmp
arg	16:25	16:31	9	"ismv"
water	16:25	0:0	10	"ismv"
arg	16:32	16:48	9	s->oformat->name
water	16:32	0:0	10	s
op	16:33	0:0	10	->
water	16:35	0:0	10	oformat
op	16:42	0:0	10	->
water	16:44	0:0	10	name
stmts	16:51	16:71	7	
water	16:51	0:0	8	mov
op	16:54	0:0	8	->
water	16:56	0:0	8	mode
op	16:61	0:0	8	=
water	16:63	0:0	8	MODE_ISM
water	16:71	0:0	8	;
else	17:8	17:71	4
stmts	17:13	17:71	5	
if	17:13	17:71	6	(!strcmp ("f4v" ,s -> oformat -> name ))
cond	17:17	17:48	7	!strcmp ("f4v" ,s -> oformat -> name )
op	17:17	0:0	8	!
call	17:18	17:48	8	strcmp
arg	17:25	17:30	9	"f4v"
water	17:25	0:0	10	"f4v"
arg	17:32	17:48	9	s->oformat->name
water	17:32	0:0	10	s
op	17:33	0:0	10	->
water	17:35	0:0	10	oformat
op	17:42	0:0	10	->
water	17:44	0:0	10	name
stmts	17:51	17:71	7	
water	17:51	0:0	8	mov
op	17:54	0:0	8	->
water	17:56	0:0	8	mode
op	17:61	0:0	8	=
water	17:63	0:0	8	MODE_F4V
water	17:71	0:0	8	;
water	18:4	0:0	4	}
if	19:4	20:44	2	(mov -> flags & FF_MOV_FLAG_DELAY_MOOV)
cond	19:8	19:21	3	mov -> flags & FF_MOV_FLAG_DELAY_MOOV
water	19:8	0:0	4	mov
op	19:11	0:0	4	->
water	19:13	0:0	4	flags
op	19:19	0:0	4	&
water	19:21	0:0	4	FF_MOV_FLAG_DELAY_MOOV
stmts	20:8	20:44	3	
water	20:8	0:0	4	mov
op	20:11	0:0	4	->
water	20:13	0:0	4	flags
op	20:19	0:0	4	|=
water	20:22	0:0	4	FF_MOV_FLAG_EMPTY_MOOV
water	20:44	0:0	4	;
if	23:4	27:42	2	(mov -> max_fragment_duration || mov -> max_fragment_size || mov -> flags & ( FF_MOV_FLAG_EMPTY_MOOV | FF_MOV_FLAG_FRAG_KEYFRAME | FF_MOV_FLAG_FRAG_CUSTOM ))
cond	23:8	26:45	3	mov -> max_fragment_duration || mov -> max_fragment_size || mov -> flags & ( FF_MOV_FLAG_EMPTY_MOOV | FF_MOV_FLAG_FRAG_KEYFRAME | FF_MOV_FLAG_FRAG_CUSTOM )
water	23:8	0:0	4	mov
op	23:11	0:0	4	->
water	23:13	0:0	4	max_fragment_duration
op	23:35	0:0	4	||
water	23:38	0:0	4	mov
op	23:41	0:0	4	->
water	23:43	0:0	4	max_fragment_size
op	23:61	0:0	4	||
water	24:8	0:0	4	mov
op	24:11	0:0	4	->
water	24:13	0:0	4	flags
op	24:19	0:0	4	&
water	24:21	0:0	4	(
water	24:22	0:0	4	FF_MOV_FLAG_EMPTY_MOOV
op	24:45	0:0	4	|
water	25:22	0:0	4	FF_MOV_FLAG_FRAG_KEYFRAME
op	25:48	0:0	4	|
water	26:22	0:0	4	FF_MOV_FLAG_FRAG_CUSTOM
water	26:45	0:0	4	)
stmts	27:8	27:42	3	
water	27:8	0:0	4	mov
op	27:11	0:0	4	->
water	27:13	0:0	4	flags
op	27:19	0:0	4	|=
water	27:22	0:0	4	FF_MOV_FLAG_FRAGMENT
water	27:42	0:0	4	;
if	29:4	31:42	2	(mov -> mode == MODE_ISM)
cond	29:8	29:21	3	mov -> mode == MODE_ISM
water	29:8	0:0	4	mov
op	29:11	0:0	4	->
water	29:13	0:0	4	mode
op	29:18	0:0	4	==
water	29:21	0:0	4	MODE_ISM
stmts	30:8	31:42	3	
water	30:8	0:0	4	mov
op	30:11	0:0	4	->
water	30:13	0:0	4	flags
op	30:19	0:0	4	|=
water	30:22	0:0	4	FF_MOV_FLAG_EMPTY_MOOV
op	30:45	0:0	4	|
water	30:47	0:0	4	FF_MOV_FLAG_SEPARATE_MOOF
op	30:73	0:0	4	|
water	31:22	0:0	4	FF_MOV_FLAG_FRAGMENT
water	31:42	0:0	4	;
if	32:4	34:51	2	(mov -> flags & FF_MOV_FLAG_DASH)
cond	32:8	32:21	3	mov -> flags & FF_MOV_FLAG_DASH
water	32:8	0:0	4	mov
op	32:11	0:0	4	->
water	32:13	0:0	4	flags
op	32:19	0:0	4	&
water	32:21	0:0	4	FF_MOV_FLAG_DASH
stmts	33:8	34:51	3	
water	33:8	0:0	4	mov
op	33:11	0:0	4	->
water	33:13	0:0	4	flags
op	33:19	0:0	4	|=
water	33:22	0:0	4	FF_MOV_FLAG_FRAGMENT
op	33:43	0:0	4	|
water	33:45	0:0	4	FF_MOV_FLAG_EMPTY_MOOV
op	33:68	0:0	4	|
water	34:22	0:0	4	FF_MOV_FLAG_DEFAULT_BASE_MOOF
water	34:51	0:0	4	;
if	35:4	37:4	2	(mov -> flags & FF_MOV_FLAG_FASTSTART)
cond	35:8	35:21	3	mov -> flags & FF_MOV_FLAG_FASTSTART
water	35:8	0:0	4	mov
op	35:11	0:0	4	->
water	35:13	0:0	4	flags
op	35:19	0:0	4	&
water	35:21	0:0	4	FF_MOV_FLAG_FASTSTART
stmts	35:44	37:4	3	
water	35:44	0:0	4	{
water	36:8	0:0	4	mov
op	36:11	0:0	4	->
water	36:13	0:0	4	reserved_moov_size
op	36:32	0:0	4	=
op	36:34	0:0	4	-
water	36:35	0:0	4	1
water	36:36	0:0	4	;
water	37:4	0:0	4	}
if	38:4	49:4	2	(mov -> use_editlist < 0)
cond	38:8	38:28	3	mov -> use_editlist < 0
water	38:8	0:0	4	mov
op	38:11	0:0	4	->
water	38:13	0:0	4	use_editlist
op	38:26	0:0	4	<
water	38:28	0:0	4	0
stmts	38:31	49:4	3	
water	38:31	0:0	4	{
water	39:8	0:0	4	mov
op	39:11	0:0	4	->
water	39:13	0:0	4	use_editlist
op	39:26	0:0	4	=
water	39:28	0:0	4	1
water	39:29	0:0	4	;
if	40:8	48:8	4	(mov -> flags & FF_MOV_FLAG_FRAGMENT && ! ( mov -> flags & FF_MOV_FLAG_DELAY_MOOV ))
cond	40:12	41:49	5	mov -> flags & FF_MOV_FLAG_FRAGMENT && ! ( mov -> flags & FF_MOV_FLAG_DELAY_MOOV )
water	40:12	0:0	6	mov
op	40:15	0:0	6	->
water	40:17	0:0	6	flags
op	40:23	0:0	6	&
water	40:25	0:0	6	FF_MOV_FLAG_FRAGMENT
op	40:46	0:0	6	&&
op	41:12	0:0	6	!
water	41:13	0:0	6	(
water	41:14	0:0	6	mov
op	41:17	0:0	6	->
water	41:19	0:0	6	flags
op	41:25	0:0	6	&
water	41:27	0:0	6	FF_MOV_FLAG_DELAY_MOOV
water	41:49	0:0	6	)
stmts	41:52	48:8	5	
water	41:52	0:0	6	{
if	45:12	47:37	6	(s -> avoid_negative_ts == AVFMT_AVOID_NEG_TS_AUTO || s -> avoid_negative_ts == AVFMT_AVOID_NEG_TS_MAKE_ZERO)
cond	45:16	46:40	7	s -> avoid_negative_ts == AVFMT_AVOID_NEG_TS_AUTO || s -> avoid_negative_ts == AVFMT_AVOID_NEG_TS_MAKE_ZERO
water	45:16	0:0	8	s
op	45:17	0:0	8	->
water	45:19	0:0	8	avoid_negative_ts
op	45:37	0:0	8	==
water	45:40	0:0	8	AVFMT_AVOID_NEG_TS_AUTO
op	45:64	0:0	8	||
water	46:16	0:0	8	s
op	46:17	0:0	8	->
water	46:19	0:0	8	avoid_negative_ts
op	46:37	0:0	8	==
water	46:40	0:0	8	AVFMT_AVOID_NEG_TS_MAKE_ZERO
stmts	47:16	47:37	7	
water	47:16	0:0	8	mov
op	47:19	0:0	8	->
water	47:21	0:0	8	use_editlist
op	47:34	0:0	8	=
water	47:36	0:0	8	0
water	47:37	0:0	8	;
water	48:8	0:0	6	}
water	49:4	0:0	4	}
if	50:4	52:119	2	(mov -> flags & FF_MOV_FLAG_EMPTY_MOOV && ! ( mov -> flags & FF_MOV_FLAG_DELAY_MOOV ) && mov -> use_editlist)
cond	50:8	51:55	3	mov -> flags & FF_MOV_FLAG_EMPTY_MOOV && ! ( mov -> flags & FF_MOV_FLAG_DELAY_MOOV ) && mov -> use_editlist
water	50:8	0:0	4	mov
op	50:11	0:0	4	->
water	50:13	0:0	4	flags
op	50:19	0:0	4	&
water	50:21	0:0	4	FF_MOV_FLAG_EMPTY_MOOV
op	50:44	0:0	4	&&
op	51:8	0:0	4	!
water	51:9	0:0	4	(
water	51:10	0:0	4	mov
op	51:13	0:0	4	->
water	51:15	0:0	4	flags
op	51:21	0:0	4	&
water	51:23	0:0	4	FF_MOV_FLAG_DELAY_MOOV
water	51:45	0:0	4	)
op	51:47	0:0	4	&&
water	51:50	0:0	4	mov
op	51:53	0:0	4	->
water	51:55	0:0	4	use_editlist
stmts	52:8	52:119	3	
call	52:8	52:118	4	av_log
arg	52:15	52:16	5	s
water	52:15	0:0	6	s
arg	52:18	52:32	5	AV_LOG_WARNING
water	52:18	0:0	6	AV_LOG_WARNING
arg	52:34	52:118	5	"No meaningful edit list will be written when using empty_moov without delay_moov\n"
water	52:34	0:0	6	"No meaningful edit list will be written when using empty_moov without delay_moov\n"
water	52:119	0:0	4	;
if	53:4	54:59	2	(! mov -> use_editlist && s -> avoid_negative_ts == AVFMT_AVOID_NEG_TS_AUTO)
cond	53:8	53:54	3	! mov -> use_editlist && s -> avoid_negative_ts == AVFMT_AVOID_NEG_TS_AUTO
op	53:8	0:0	4	!
water	53:9	0:0	4	mov
op	53:12	0:0	4	->
water	53:14	0:0	4	use_editlist
op	53:27	0:0	4	&&
water	53:30	0:0	4	s
op	53:31	0:0	4	->
water	53:33	0:0	4	avoid_negative_ts
op	53:51	0:0	4	==
water	53:54	0:0	4	AVFMT_AVOID_NEG_TS_AUTO
stmts	54:8	54:59	3	
water	54:8	0:0	4	s
op	54:9	0:0	4	->
water	54:11	0:0	4	avoid_negative_ts
op	54:29	0:0	4	=
water	54:31	0:0	4	AVFMT_AVOID_NEG_TS_MAKE_ZERO
water	54:59	0:0	4	;
if	58:4	60:51	2	(mov -> flags & FF_MOV_FLAG_OMIT_TFHD_OFFSET && mov -> flags & FF_MOV_FLAG_DEFAULT_BASE_MOOF)
cond	58:8	59:21	3	mov -> flags & FF_MOV_FLAG_OMIT_TFHD_OFFSET && mov -> flags & FF_MOV_FLAG_DEFAULT_BASE_MOOF
water	58:8	0:0	4	mov
op	58:11	0:0	4	->
water	58:13	0:0	4	flags
op	58:19	0:0	4	&
water	58:21	0:0	4	FF_MOV_FLAG_OMIT_TFHD_OFFSET
op	58:50	0:0	4	&&
water	59:8	0:0	4	mov
op	59:11	0:0	4	->
water	59:13	0:0	4	flags
op	59:19	0:0	4	&
water	59:21	0:0	4	FF_MOV_FLAG_DEFAULT_BASE_MOOF
stmts	60:8	60:51	3	
water	60:8	0:0	4	mov
op	60:11	0:0	4	->
water	60:13	0:0	4	flags
op	60:19	0:0	4	&=
water	60:22	0:0	4	~FF_MOV_FLAG_OMIT_TFHD_OFFSET
water	60:51	0:0	4	;
if	61:4	67:4	2	(mov -> frag_interleave && mov -> flags & ( FF_MOV_FLAG_OMIT_TFHD_OFFSET | FF_MOV_FLAG_SEPARATE_MOOF ))
cond	61:8	62:78	3	mov -> frag_interleave && mov -> flags & ( FF_MOV_FLAG_OMIT_TFHD_OFFSET | FF_MOV_FLAG_SEPARATE_MOOF )
water	61:8	0:0	4	mov
op	61:11	0:0	4	->
water	61:13	0:0	4	frag_interleave
op	61:29	0:0	4	&&
water	62:8	0:0	4	mov
op	62:11	0:0	4	->
water	62:13	0:0	4	flags
op	62:19	0:0	4	&
water	62:21	0:0	4	(
water	62:22	0:0	4	FF_MOV_FLAG_OMIT_TFHD_OFFSET
op	62:51	0:0	4	|
water	62:53	0:0	4	FF_MOV_FLAG_SEPARATE_MOOF
water	62:78	0:0	4	)
stmts	62:81	67:4	3	
water	62:81	0:0	4	{
call	63:8	65:53	4	av_log
arg	63:15	63:16	5	s
water	63:15	0:0	6	s
arg	63:18	63:30	5	AV_LOG_ERROR
water	63:18	0:0	6	AV_LOG_ERROR
arg	64:15	65:53	5	"Sample interleaving in fragments is mutually exclusive with ""omit_tfhd_offset and separate_moof\n"
water	64:15	0:0	6	"Sample interleaving in fragments is mutually exclusive with "
water	65:15	0:0	6	"omit_tfhd_offset and separate_moof\n"
water	65:54	0:0	4	;
return	66:8	66:30	4	AVERROR(EINVAL)
call	66:15	66:29	5	AVERROR
arg	66:23	66:29	6	EINVAL
water	66:23	0:0	7	EINVAL
water	67:4	0:0	4	}
if	70:4	74:4	2	(! s -> pb -> seekable && ( ! ( mov -> flags & FF_MOV_FLAG_FRAGMENT ) || mov -> ism_lookahead ))
cond	70:8	71:67	3	! s -> pb -> seekable && ( ! ( mov -> flags & FF_MOV_FLAG_FRAGMENT ) || mov -> ism_lookahead )
op	70:8	0:0	4	!
water	70:9	0:0	4	s
op	70:10	0:0	4	->
water	70:12	0:0	4	pb
op	70:14	0:0	4	->
water	70:16	0:0	4	seekable
op	70:25	0:0	4	&&
water	71:8	0:0	4	(
op	71:9	0:0	4	!
water	71:10	0:0	4	(
water	71:11	0:0	4	mov
op	71:14	0:0	4	->
water	71:16	0:0	4	flags
op	71:22	0:0	4	&
water	71:24	0:0	4	FF_MOV_FLAG_FRAGMENT
water	71:44	0:0	4	)
op	71:46	0:0	4	||
water	71:49	0:0	4	mov
op	71:52	0:0	4	->
water	71:54	0:0	4	ism_lookahead
water	71:67	0:0	4	)
stmts	71:70	74:4	3	
water	71:70	0:0	4	{
call	72:8	72:78	4	av_log
arg	72:15	72:16	5	s
water	72:15	0:0	6	s
arg	72:18	72:30	5	AV_LOG_ERROR
water	72:18	0:0	6	AV_LOG_ERROR
arg	72:32	72:78	5	"muxer does not support non seekable output\n"
water	72:32	0:0	6	"muxer does not support non seekable output\n"
water	72:79	0:0	4	;
return	73:8	73:30	4	AVERROR(EINVAL)
call	73:15	73:29	5	AVERROR
arg	73:23	73:29	6	EINVAL
water	73:23	0:0	7	EINVAL
water	74:4	0:0	4	}
if	75:4	78:4	2	(! ( mov -> flags & FF_MOV_FLAG_DELAY_MOOV ))
cond	75:8	75:45	3	! ( mov -> flags & FF_MOV_FLAG_DELAY_MOOV )
op	75:8	0:0	4	!
water	75:9	0:0	4	(
water	75:10	0:0	4	mov
op	75:13	0:0	4	->
water	75:15	0:0	4	flags
op	75:21	0:0	4	&
water	75:23	0:0	4	FF_MOV_FLAG_DELAY_MOOV
water	75:45	0:0	4	)
stmts	75:48	78:4	3	
water	75:48	0:0	4	{
if	76:8	77:22	4	(( ret =mov_write_identification (pb ,s ) ) < 0)
cond	76:12	76:54	5	( ret =mov_write_identification (pb ,s ) ) < 0
water	76:12	0:0	6	(
water	76:13	0:0	6	ret
op	76:17	0:0	6	=
call	76:19	76:49	6	mov_write_identification
arg	76:44	76:46	7	pb
water	76:44	0:0	8	pb
arg	76:48	76:49	7	s
water	76:48	0:0	8	s
water	76:50	0:0	6	)
op	76:52	0:0	6	<
water	76:54	0:0	6	0
stmts	77:12	77:22	5	
return	77:12	77:22	6	ret
water	77:19	0:0	7	ret
water	78:4	0:0	4	}
water	79:4	0:0	2	mov
op	79:7	0:0	2	->
water	79:9	0:0	2	nb_streams
op	79:20	0:0	2	=
water	79:22	0:0	2	s
op	79:23	0:0	2	->
water	79:25	0:0	2	nb_streams
water	79:35	0:0	2	;
if	80:4	81:46	2	(mov -> mode & ( MODE_MP4 | MODE_MOV | MODE_IPOD ) && s -> nb_chapters)
cond	80:8	80:56	3	mov -> mode & ( MODE_MP4 | MODE_MOV | MODE_IPOD ) && s -> nb_chapters
water	80:8	0:0	4	mov
op	80:11	0:0	4	->
water	80:13	0:0	4	mode
op	80:18	0:0	4	&
water	80:20	0:0	4	(
water	80:21	0:0	4	MODE_MP4
op	80:29	0:0	4	|
water	80:30	0:0	4	MODE_MOV
op	80:38	0:0	4	|
water	80:39	0:0	4	MODE_IPOD
water	80:48	0:0	4	)
op	80:50	0:0	4	&&
water	80:53	0:0	4	s
op	80:54	0:0	4	->
water	80:56	0:0	4	nb_chapters
stmts	81:8	81:46	3	
water	81:8	0:0	4	mov
op	81:11	0:0	4	->
water	81:13	0:0	4	chapter_track
op	81:27	0:0	4	=
water	81:29	0:0	4	mov
op	81:32	0:0	4	->
water	81:34	0:0	4	nb_streams
op	81:44	0:0	4	++
water	81:46	0:0	4	;
if	82:4	92:4	2	(mov -> flags & FF_MOV_FLAG_RTP_HINT)
cond	82:8	82:21	3	mov -> flags & FF_MOV_FLAG_RTP_HINT
water	82:8	0:0	4	mov
op	82:11	0:0	4	->
water	82:13	0:0	4	flags
op	82:19	0:0	4	&
water	82:21	0:0	4	FF_MOV_FLAG_RTP_HINT
stmts	82:43	92:4	3	
water	82:43	0:0	4	{
water	84:8	0:0	4	hint_track
op	84:19	0:0	4	=
water	84:21	0:0	4	mov
op	84:24	0:0	4	->
water	84:26	0:0	4	nb_streams
water	84:36	0:0	4	;
for	85:8	91:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	85:13	85:18	5	i = 0 ;
water	85:13	0:0	6	i
op	85:15	0:0	6	=
water	85:17	0:0	6	0
water	85:18	0:0	6	;
cond	85:20	85:27	5	i < s -> nb_streams
water	85:20	0:0	6	i
op	85:22	0:0	6	<
water	85:24	0:0	6	s
op	85:25	0:0	6	->
water	85:27	0:0	6	nb_streams
forexpr	85:39	85:40	5	i ++
water	85:39	0:0	6	i
op	85:40	0:0	6	++
stmts	85:44	91:8	5	
water	85:44	0:0	6	{
decl	86:12	86:40	6	AVStream	*st
op	86:25	0:0	6	=
water	86:27	0:0	6	s
op	86:28	0:0	6	->
water	86:30	0:0	6	streams
op	86:37	0:0	6	[
water	86:38	0:0	6	i
op	86:39	0:0	6	]
if	87:12	90:12	6	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO || st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	87:16	88:41	7	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO || st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	87:16	0:0	8	st
op	87:18	0:0	8	->
water	87:20	0:0	8	codec
op	87:25	0:0	8	->
water	87:27	0:0	8	codec_type
op	87:38	0:0	8	==
water	87:41	0:0	8	AVMEDIA_TYPE_VIDEO
op	87:60	0:0	8	||
water	88:16	0:0	8	st
op	88:18	0:0	8	->
water	88:20	0:0	8	codec
op	88:25	0:0	8	->
water	88:27	0:0	8	codec_type
op	88:38	0:0	8	==
water	88:41	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	88:61	90:12	7	
water	88:61	0:0	8	{
water	89:16	0:0	8	mov
op	89:19	0:0	8	->
water	89:21	0:0	8	nb_streams
op	89:31	0:0	8	++
water	89:33	0:0	8	;
water	90:12	0:0	8	}
water	91:8	0:0	6	}
water	92:4	0:0	4	}
if	93:4	114:4	2	(mov -> mode == MODE_MOV)
cond	93:8	93:21	3	mov -> mode == MODE_MOV
water	93:8	0:0	4	mov
op	93:11	0:0	4	->
water	93:13	0:0	4	mode
op	93:18	0:0	4	==
water	93:21	0:0	4	MODE_MOV
stmts	93:31	114:4	3	
water	93:31	0:0	4	{
water	94:8	0:0	4	tmcd_track
op	94:19	0:0	4	=
water	94:21	0:0	4	mov
op	94:24	0:0	4	->
water	94:26	0:0	4	nb_streams
water	94:36	0:0	4	;
for	96:8	101:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	96:13	96:18	5	i = 0 ;
water	96:13	0:0	6	i
op	96:15	0:0	6	=
water	96:17	0:0	6	0
water	96:18	0:0	6	;
cond	96:20	96:27	5	i < s -> nb_streams
water	96:20	0:0	6	i
op	96:22	0:0	6	<
water	96:24	0:0	6	s
op	96:25	0:0	6	->
water	96:27	0:0	6	nb_streams
forexpr	96:39	96:40	5	i ++
water	96:39	0:0	6	i
op	96:40	0:0	6	++
stmts	96:44	101:8	5	
water	96:44	0:0	6	{
decl	97:12	97:40	6	AVStream	*st
op	97:25	0:0	6	=
water	97:27	0:0	6	s
op	97:28	0:0	6	->
water	97:30	0:0	6	streams
op	97:37	0:0	6	[
water	97:38	0:0	6	i
op	97:39	0:0	6	]
if	98:12	100:35	6	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO && ( global_tcr ||av_dict_get (st -> metadata ,"timecode" ,NULL ,0 ) ))
cond	98:16	99:77	7	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO && ( global_tcr ||av_dict_get (st -> metadata ,"timecode" ,NULL ,0 ) )
water	98:16	0:0	8	st
op	98:18	0:0	8	->
water	98:20	0:0	8	codec
op	98:25	0:0	8	->
water	98:27	0:0	8	codec_type
op	98:38	0:0	8	==
water	98:41	0:0	8	AVMEDIA_TYPE_VIDEO
op	98:60	0:0	8	&&
water	99:16	0:0	8	(
water	99:17	0:0	8	global_tcr
op	99:28	0:0	8	||
call	99:31	99:76	8	av_dict_get
arg	99:43	99:55	9	st->metadata
water	99:43	0:0	10	st
op	99:45	0:0	10	->
water	99:47	0:0	10	metadata
arg	99:57	99:67	9	"timecode"
water	99:57	0:0	10	"timecode"
arg	99:69	99:73	9	NULL
water	99:69	0:0	10	NULL
arg	99:75	99:76	9	0
water	99:75	0:0	10	0
water	99:77	0:0	8	)
stmts	100:16	100:35	7	
water	100:16	0:0	8	mov
op	100:19	0:0	8	->
water	100:21	0:0	8	nb_meta_tmcd
op	100:33	0:0	8	++
water	100:35	0:0	8	;
water	101:8	0:0	6	}
if	103:8	112:8	4	(mov -> nb_meta_tmcd)
cond	103:12	103:17	5	mov -> nb_meta_tmcd
water	103:12	0:0	6	mov
op	103:15	0:0	6	->
water	103:17	0:0	6	nb_meta_tmcd
stmts	103:31	112:8	5	
water	103:31	0:0	6	{
for	104:12	111:12	6	(i = 0 ;i < s -> nb_streams;i ++)
forinit	104:17	104:22	7	i = 0 ;
water	104:17	0:0	8	i
op	104:19	0:0	8	=
water	104:21	0:0	8	0
water	104:22	0:0	8	;
cond	104:24	104:31	7	i < s -> nb_streams
water	104:24	0:0	8	i
op	104:26	0:0	8	<
water	104:28	0:0	8	s
op	104:29	0:0	8	->
water	104:31	0:0	8	nb_streams
forexpr	104:43	104:44	7	i ++
water	104:43	0:0	8	i
op	104:44	0:0	8	++
stmts	104:48	111:12	7	
water	104:48	0:0	8	{
decl	105:16	105:44	8	AVStream	*st
op	105:29	0:0	8	=
water	105:31	0:0	8	s
op	105:32	0:0	8	->
water	105:34	0:0	8	streams
op	105:41	0:0	8	[
water	105:42	0:0	8	i
op	105:43	0:0	8	]
if	106:16	110:16	8	(st -> codec -> codec_tag ==MKTAG ('t' ,'m' ,'c' ,'d' ))
cond	106:20	106:65	9	st -> codec -> codec_tag ==MKTAG ('t' ,'m' ,'c' ,'d' )
water	106:20	0:0	10	st
op	106:22	0:0	10	->
water	106:24	0:0	10	codec
op	106:29	0:0	10	->
water	106:31	0:0	10	codec_tag
op	106:41	0:0	10	==
call	106:44	106:65	10	MKTAG
arg	106:50	106:53	11	't'
water	106:50	0:0	12	't'
arg	106:54	106:57	11	'm'
water	106:54	0:0	12	'm'
arg	106:58	106:61	11	'c'
water	106:58	0:0	12	'c'
arg	106:62	106:65	11	'd'
water	106:62	0:0	12	'd'
stmts	106:68	110:16	9	
water	106:68	0:0	10	{
call	107:20	108:67	10	av_log
arg	107:27	107:28	11	s
water	107:27	0:0	12	s
arg	107:30	107:44	11	AV_LOG_WARNING
water	107:30	0:0	12	AV_LOG_WARNING
arg	107:46	108:67	11	"You requested a copy of the original timecode track ""so timecode metadata are now ignored\n"
water	107:46	0:0	12	"You requested a copy of the original timecode track "
water	108:27	0:0	12	"so timecode metadata are now ignored\n"
water	108:68	0:0	10	;
water	109:20	0:0	10	mov
op	109:23	0:0	10	->
water	109:25	0:0	10	nb_meta_tmcd
op	109:38	0:0	10	=
water	109:40	0:0	10	0
water	109:41	0:0	10	;
water	110:16	0:0	10	}
water	111:12	0:0	8	}
water	112:8	0:0	6	}
water	113:8	0:0	4	mov
op	113:11	0:0	4	->
water	113:13	0:0	4	nb_streams
op	113:24	0:0	4	+=
water	113:27	0:0	4	mov
op	113:30	0:0	4	->
water	113:32	0:0	4	nb_meta_tmcd
water	113:44	0:0	4	;
water	114:4	0:0	4	}
water	117:4	0:0	2	mov
op	117:7	0:0	2	->
water	117:9	0:0	2	tracks
op	117:16	0:0	2	=
call	117:18	117:78	2	av_mallocz_array
arg	117:35	117:56	3	(mov->nb_streams+1)
water	117:35	0:0	4	(
water	117:36	0:0	4	mov
op	117:39	0:0	4	->
water	117:41	0:0	4	nb_streams
op	117:52	0:0	4	+
water	117:54	0:0	4	1
water	117:55	0:0	4	)
arg	117:58	117:78	3	sizeof(*mov->tracks)
op	117:58	0:0	4	sizeof
water	117:64	0:0	4	(
op	117:65	0:0	4	*
water	117:66	0:0	4	mov
op	117:69	0:0	4	->
water	117:71	0:0	4	tracks
water	117:77	0:0	4	)
water	117:79	0:0	2	;
if	118:4	119:30	2	(! mov -> tracks)
cond	118:8	118:14	3	! mov -> tracks
op	118:8	0:0	4	!
water	118:9	0:0	4	mov
op	118:12	0:0	4	->
water	118:14	0:0	4	tracks
stmts	119:8	119:30	3	
return	119:8	119:30	4	AVERROR(ENOMEM)
call	119:15	119:29	5	AVERROR
arg	119:23	119:29	6	ENOMEM
water	119:23	0:0	7	ENOMEM
for	120:4	235:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	120:9	120:14	3	i = 0 ;
water	120:9	0:0	4	i
op	120:11	0:0	4	=
water	120:13	0:0	4	0
water	120:14	0:0	4	;
cond	120:16	120:23	3	i < s -> nb_streams
water	120:16	0:0	4	i
op	120:18	0:0	4	<
water	120:20	0:0	4	s
op	120:21	0:0	4	->
water	120:23	0:0	4	nb_streams
forexpr	120:35	120:36	3	i ++
water	120:35	0:0	4	i
op	120:36	0:0	4	++
stmts	120:40	235:4	3	
water	120:40	0:0	4	{
decl	121:8	121:35	4	AVStream	*st
op	121:20	0:0	4	=
water	121:22	0:0	4	s
op	121:23	0:0	4	->
water	121:25	0:0	4	streams
op	121:32	0:0	4	[
water	121:33	0:0	4	i
op	121:34	0:0	4	]
decl	122:8	122:40	4	MOVTrack	*track
op	122:23	0:0	4	=
op	122:25	0:0	4	&
water	122:26	0:0	4	mov
op	122:29	0:0	4	->
water	122:31	0:0	4	tracks
op	122:37	0:0	4	[
water	122:38	0:0	4	i
op	122:39	0:0	4	]
decl	123:8	123:79	4	AVDictionaryEntry	*lang
op	123:32	0:0	4	=
call	123:34	123:78	5	av_dict_get
arg	123:46	123:58	6	st->metadata
water	123:46	0:0	7	st
op	123:48	0:0	7	->
water	123:50	0:0	7	metadata
arg	123:60	123:70	6	"language"
water	123:60	0:0	7	"language"
arg	123:72	123:76	6	NULL
water	123:72	0:0	7	NULL
arg	123:77	123:78	6	0
water	123:77	0:0	7	0
water	124:8	0:0	4	track
op	124:13	0:0	4	->
water	124:15	0:0	4	st
op	124:19	0:0	4	=
water	124:21	0:0	4	st
water	124:23	0:0	4	;
water	125:8	0:0	4	track
op	125:13	0:0	4	->
water	125:15	0:0	4	enc
op	125:19	0:0	4	=
water	125:21	0:0	4	st
op	125:23	0:0	4	->
water	125:25	0:0	4	codec
water	125:30	0:0	4	;
water	126:8	0:0	4	track
op	126:13	0:0	4	->
water	126:15	0:0	4	language
op	126:24	0:0	4	=
call	126:26	126:91	4	ff_mov_iso639_to_lang
arg	126:48	126:70	5	lang?lang->value:"und"
water	126:48	0:0	6	lang
water	126:52	0:0	6	?
water	126:53	0:0	6	lang
op	126:57	0:0	6	->
water	126:59	0:0	6	value
water	126:64	0:0	6	:
water	126:65	0:0	6	"und"
arg	126:72	126:91	5	mov->mode!=MODE_MOV
water	126:72	0:0	6	mov
op	126:75	0:0	6	->
water	126:77	0:0	6	mode
op	126:81	0:0	6	!=
water	126:83	0:0	6	MODE_MOV
water	126:92	0:0	4	;
if	127:8	128:31	4	(track -> language < 0)
cond	127:12	127:30	5	track -> language < 0
water	127:12	0:0	6	track
op	127:17	0:0	6	->
water	127:19	0:0	6	language
op	127:28	0:0	6	<
water	127:30	0:0	6	0
stmts	128:12	128:31	5	
water	128:12	0:0	6	track
op	128:17	0:0	6	->
water	128:19	0:0	6	language
op	128:28	0:0	6	=
water	128:30	0:0	6	0
water	128:31	0:0	6	;
water	129:8	0:0	4	track
op	129:13	0:0	4	->
water	129:15	0:0	4	mode
op	129:20	0:0	4	=
water	129:22	0:0	4	mov
op	129:25	0:0	4	->
water	129:27	0:0	4	mode
water	129:31	0:0	4	;
water	130:8	0:0	4	track
op	130:13	0:0	4	->
water	130:15	0:0	4	tag
op	130:20	0:0	4	=
call	130:22	130:49	4	mov_find_codec_tag
arg	130:41	130:42	5	s
water	130:41	0:0	6	s
arg	130:44	130:49	5	track
water	130:44	0:0	6	track
water	130:50	0:0	4	;
if	131:8	137:8	4	(! track -> tag)
cond	131:12	131:20	5	! track -> tag
op	131:12	0:0	6	!
water	131:13	0:0	6	track
op	131:18	0:0	6	->
water	131:20	0:0	6	tag
stmts	131:25	137:8	5	
water	131:25	0:0	6	{
call	132:12	134:59	6	av_log
arg	132:19	132:20	7	s
water	132:19	0:0	8	s
arg	132:22	132:34	7	AV_LOG_ERROR
water	132:22	0:0	8	AV_LOG_ERROR
arg	132:36	133:65	7	"Could not find tag for codec %s in stream #%d, ""codec not currently supported in container\n"
water	132:36	0:0	8	"Could not find tag for codec %s in stream #%d, "
water	133:19	0:0	8	"codec not currently supported in container\n"
arg	134:19	134:56	7	avcodec_get_name(st->codec->codec_id)
call	134:19	134:55	8	avcodec_get_name
arg	134:36	134:55	9	st->codec->codec_id
water	134:36	0:0	10	st
op	134:38	0:0	10	->
water	134:40	0:0	10	codec
op	134:45	0:0	10	->
water	134:47	0:0	10	codec_id
arg	134:58	134:59	7	i
water	134:58	0:0	8	i
water	134:60	0:0	6	;
water	135:12	0:0	6	ret
op	135:16	0:0	6	=
call	135:18	135:32	6	AVERROR
arg	135:26	135:32	7	EINVAL
water	135:26	0:0	8	EINVAL
water	135:33	0:0	6	;
goto	136:12	136:22	6	error
water	136:17	0:0	7	error
water	137:8	0:0	6	}
water	140:8	0:0	4	track
op	140:13	0:0	4	->
water	140:15	0:0	4	hint_track
op	140:26	0:0	4	=
op	140:28	0:0	4	-
water	140:29	0:0	4	1
water	140:30	0:0	4	;
water	141:8	0:0	4	track
op	141:13	0:0	4	->
water	141:15	0:0	4	start_dts
op	141:26	0:0	4	=
water	141:28	0:0	4	AV_NOPTS_VALUE
water	141:42	0:0	4	;
water	142:8	0:0	4	track
op	142:13	0:0	4	->
water	142:15	0:0	4	start_cts
op	142:26	0:0	4	=
water	142:28	0:0	4	AV_NOPTS_VALUE
water	142:42	0:0	4	;
water	143:8	0:0	4	track
op	143:13	0:0	4	->
water	143:15	0:0	4	end_pts
op	143:26	0:0	4	=
water	143:28	0:0	4	AV_NOPTS_VALUE
water	143:42	0:0	4	;
if	144:8	172:8	4	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	144:12	144:37	5	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	144:12	0:0	6	st
op	144:14	0:0	6	->
water	144:16	0:0	6	codec
op	144:21	0:0	6	->
water	144:23	0:0	6	codec_type
op	144:34	0:0	6	==
water	144:37	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	144:57	172:8	5	
water	144:57	0:0	6	{
if	145:12	154:12	6	(track -> tag ==MKTAG ('m' ,'x' ,'3' ,'p' ) || track -> tag ==MKTAG ('m' ,'x' ,'3' ,'n' ) || track -> tag ==MKTAG ('m' ,'x' ,'4' ,'p' ) || track -> tag ==MKTAG ('m' ,'x' ,'4' ,'n' ) || track -> tag ==MKTAG ('m' ,'x' ,'5' ,'p' ) || track -> tag ==MKTAG ('m' ,'x' ,'5' ,'n' ))
cond	145:16	147:91	7	track -> tag ==MKTAG ('m' ,'x' ,'3' ,'p' ) || track -> tag ==MKTAG ('m' ,'x' ,'3' ,'n' ) || track -> tag ==MKTAG ('m' ,'x' ,'4' ,'p' ) || track -> tag ==MKTAG ('m' ,'x' ,'4' ,'n' ) || track -> tag ==MKTAG ('m' ,'x' ,'5' ,'p' ) || track -> tag ==MKTAG ('m' ,'x' ,'5' ,'n' )
water	145:16	0:0	8	track
op	145:21	0:0	8	->
water	145:23	0:0	8	tag
op	145:27	0:0	8	==
call	145:30	145:51	8	MKTAG
arg	145:36	145:39	9	'm'
water	145:36	0:0	10	'm'
arg	145:40	145:43	9	'x'
water	145:40	0:0	10	'x'
arg	145:44	145:47	9	'3'
water	145:44	0:0	10	'3'
arg	145:48	145:51	9	'p'
water	145:48	0:0	10	'p'
op	145:53	0:0	8	||
water	145:56	0:0	8	track
op	145:61	0:0	8	->
water	145:63	0:0	8	tag
op	145:67	0:0	8	==
call	145:70	145:91	8	MKTAG
arg	145:76	145:79	9	'm'
water	145:76	0:0	10	'm'
arg	145:80	145:83	9	'x'
water	145:80	0:0	10	'x'
arg	145:84	145:87	9	'3'
water	145:84	0:0	10	'3'
arg	145:88	145:91	9	'n'
water	145:88	0:0	10	'n'
op	145:93	0:0	8	||
water	146:16	0:0	8	track
op	146:21	0:0	8	->
water	146:23	0:0	8	tag
op	146:27	0:0	8	==
call	146:30	146:51	8	MKTAG
arg	146:36	146:39	9	'm'
water	146:36	0:0	10	'm'
arg	146:40	146:43	9	'x'
water	146:40	0:0	10	'x'
arg	146:44	146:47	9	'4'
water	146:44	0:0	10	'4'
arg	146:48	146:51	9	'p'
water	146:48	0:0	10	'p'
op	146:53	0:0	8	||
water	146:56	0:0	8	track
op	146:61	0:0	8	->
water	146:63	0:0	8	tag
op	146:67	0:0	8	==
call	146:70	146:91	8	MKTAG
arg	146:76	146:79	9	'm'
water	146:76	0:0	10	'm'
arg	146:80	146:83	9	'x'
water	146:80	0:0	10	'x'
arg	146:84	146:87	9	'4'
water	146:84	0:0	10	'4'
arg	146:88	146:91	9	'n'
water	146:88	0:0	10	'n'
op	146:93	0:0	8	||
water	147:16	0:0	8	track
op	147:21	0:0	8	->
water	147:23	0:0	8	tag
op	147:27	0:0	8	==
call	147:30	147:51	8	MKTAG
arg	147:36	147:39	9	'm'
water	147:36	0:0	10	'm'
arg	147:40	147:43	9	'x'
water	147:40	0:0	10	'x'
arg	147:44	147:47	9	'5'
water	147:44	0:0	10	'5'
arg	147:48	147:51	9	'p'
water	147:48	0:0	10	'p'
op	147:53	0:0	8	||
water	147:56	0:0	8	track
op	147:61	0:0	8	->
water	147:63	0:0	8	tag
op	147:67	0:0	8	==
call	147:70	147:91	8	MKTAG
arg	147:76	147:79	9	'm'
water	147:76	0:0	10	'm'
arg	147:80	147:83	9	'x'
water	147:80	0:0	10	'x'
arg	147:84	147:87	9	'5'
water	147:84	0:0	10	'5'
arg	147:88	147:91	9	'n'
water	147:88	0:0	10	'n'
stmts	147:94	154:12	7	
water	147:94	0:0	8	{
if	148:16	152:16	8	(st -> codec -> width != 720 || ( st -> codec -> height != 608 && st -> codec -> height != 512 ))
cond	148:20	148:100	9	st -> codec -> width != 720 || ( st -> codec -> height != 608 && st -> codec -> height != 512 )
water	148:20	0:0	10	st
op	148:22	0:0	10	->
water	148:24	0:0	10	codec
op	148:29	0:0	10	->
water	148:31	0:0	10	width
op	148:37	0:0	10	!=
water	148:40	0:0	10	720
op	148:44	0:0	10	||
water	148:47	0:0	10	(
water	148:48	0:0	10	st
op	148:50	0:0	10	->
water	148:52	0:0	10	codec
op	148:57	0:0	10	->
water	148:59	0:0	10	height
op	148:66	0:0	10	!=
water	148:69	0:0	10	608
op	148:73	0:0	10	&&
water	148:76	0:0	10	st
op	148:78	0:0	10	->
water	148:80	0:0	10	codec
op	148:85	0:0	10	->
water	148:87	0:0	10	height
op	148:94	0:0	10	!=
water	148:97	0:0	10	512
water	148:100	0:0	10	)
stmts	148:103	152:16	9	
water	148:103	0:0	10	{
call	149:20	149:101	10	av_log
arg	149:27	149:28	11	s
water	149:27	0:0	12	s
arg	149:30	149:42	11	AV_LOG_ERROR
water	149:30	0:0	12	AV_LOG_ERROR
arg	149:44	149:101	11	"D-10/IMX must use 720x608 or 720x512 video resolution\n"
water	149:44	0:0	12	"D-10/IMX must use 720x608 or 720x512 video resolution\n"
water	149:102	0:0	10	;
water	150:20	0:0	10	ret
op	150:24	0:0	10	=
call	150:26	150:40	10	AVERROR
arg	150:34	150:40	11	EINVAL
water	150:34	0:0	12	EINVAL
water	150:41	0:0	10	;
goto	151:20	151:30	10	error
water	151:25	0:0	11	error
water	152:16	0:0	10	}
water	153:16	0:0	8	track
op	153:21	0:0	8	->
water	153:23	0:0	8	height
op	153:30	0:0	8	=
water	153:32	0:0	8	track
op	153:37	0:0	8	->
water	153:39	0:0	8	tag
op	153:43	0:0	8	>>
water	153:46	0:0	8	24
op	153:49	0:0	8	==
water	153:52	0:0	8	'n'
water	153:56	0:0	8	?
water	153:58	0:0	8	486
water	153:62	0:0	8	:
water	153:64	0:0	8	576
water	153:67	0:0	8	;
water	154:12	0:0	8	}
if	155:12	157:12	6	(mov -> video_track_timescale)
cond	155:16	155:21	7	mov -> video_track_timescale
water	155:16	0:0	8	mov
op	155:19	0:0	8	->
water	155:21	0:0	8	video_track_timescale
stmts	155:44	157:12	7	
water	155:44	0:0	8	{
water	156:16	0:0	8	track
op	156:21	0:0	8	->
water	156:23	0:0	8	timescale
op	156:33	0:0	8	=
water	156:35	0:0	8	mov
op	156:38	0:0	8	->
water	156:40	0:0	8	video_track_timescale
water	156:61	0:0	8	;
water	157:12	0:0	8	}
else	157:14	161:12	6
stmts	157:19	161:12	7	
water	157:19	0:0	8	{
water	158:16	0:0	8	track
op	158:21	0:0	8	->
water	158:23	0:0	8	timescale
op	158:33	0:0	8	=
water	158:35	0:0	8	st
op	158:37	0:0	8	->
water	158:39	0:0	8	time_base
op	158:48	0:0	8	.
water	158:49	0:0	8	den
water	158:52	0:0	8	;
while	159:16	160:41	8	(track -> timescale < 10000)
cond	159:22	159:41	9	track -> timescale < 10000
water	159:22	0:0	10	track
op	159:27	0:0	10	->
water	159:29	0:0	10	timescale
op	159:39	0:0	10	<
water	159:41	0:0	10	10000
stmts	160:20	160:41	9	
water	160:20	0:0	10	track
op	160:25	0:0	10	->
water	160:27	0:0	10	timescale
op	160:37	0:0	10	*=
water	160:40	0:0	10	2
water	160:41	0:0	10	;
water	161:12	0:0	8	}
if	162:12	166:12	6	(st -> codec -> width > 65535 || st -> codec -> height > 65535)
cond	162:16	162:64	7	st -> codec -> width > 65535 || st -> codec -> height > 65535
water	162:16	0:0	8	st
op	162:18	0:0	8	->
water	162:20	0:0	8	codec
op	162:25	0:0	8	->
water	162:27	0:0	8	width
op	162:33	0:0	8	>
water	162:35	0:0	8	65535
op	162:41	0:0	8	||
water	162:44	0:0	8	st
op	162:46	0:0	8	->
water	162:48	0:0	8	codec
op	162:53	0:0	8	->
water	162:55	0:0	8	height
op	162:62	0:0	8	>
water	162:64	0:0	8	65535
stmts	162:71	166:12	7	
water	162:71	0:0	8	{
call	163:16	163:119	8	av_log
arg	163:23	163:24	9	s
water	163:23	0:0	10	s
arg	163:26	163:38	9	AV_LOG_ERROR
water	163:26	0:0	10	AV_LOG_ERROR
arg	163:40	163:82	9	"Resolution %dx%d too large for mov/mp4\n"
water	163:40	0:0	10	"Resolution %dx%d too large for mov/mp4\n"
arg	163:84	163:100	9	st->codec->width
water	163:84	0:0	10	st
op	163:86	0:0	10	->
water	163:88	0:0	10	codec
op	163:93	0:0	10	->
water	163:95	0:0	10	width
arg	163:102	163:119	9	st->codec->height
water	163:102	0:0	10	st
op	163:104	0:0	10	->
water	163:106	0:0	10	codec
op	163:111	0:0	10	->
water	163:113	0:0	10	height
water	163:120	0:0	8	;
water	164:16	0:0	8	ret
op	164:20	0:0	8	=
call	164:22	164:36	8	AVERROR
arg	164:30	164:36	9	EINVAL
water	164:30	0:0	10	EINVAL
water	164:37	0:0	8	;
goto	165:16	165:26	8	error
water	165:21	0:0	9	error
water	166:12	0:0	8	}
if	167:12	171:58	6	(track -> mode == MODE_MOV && track -> timescale > 100000)
cond	167:16	167:62	7	track -> mode == MODE_MOV && track -> timescale > 100000
water	167:16	0:0	8	track
op	167:21	0:0	8	->
water	167:23	0:0	8	mode
op	167:28	0:0	8	==
water	167:31	0:0	8	MODE_MOV
op	167:40	0:0	8	&&
water	167:43	0:0	8	track
op	167:48	0:0	8	->
water	167:50	0:0	8	timescale
op	167:60	0:0	8	>
water	167:62	0:0	8	100000
stmts	168:16	171:58	7	
call	168:16	171:57	8	av_log
arg	168:23	168:24	9	s
water	168:23	0:0	10	s
arg	168:26	168:40	9	AV_LOG_WARNING
water	168:26	0:0	10	AV_LOG_WARNING
arg	169:23	171:57	9	"WARNING codec timebase is very high. If duration is too long,\n""file may not be playable by quicktime. Specify a shorter timebase\n""or choose different container.\n"
water	169:23	0:0	10	"WARNING codec timebase is very high. If duration is too long,\n"
water	170:23	0:0	10	"file may not be playable by quicktime. Specify a shorter timebase\n"
water	171:23	0:0	10	"or choose different container.\n"
water	171:58	0:0	8	;
water	172:8	0:0	6	}
else	172:10	207:8	4
stmts	172:15	207:8	5	
if	172:15	207:8	6	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	172:19	172:44	7	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	172:19	0:0	8	st
op	172:21	0:0	8	->
water	172:23	0:0	8	codec
op	172:28	0:0	8	->
water	172:30	0:0	8	codec_type
op	172:41	0:0	8	==
water	172:44	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	172:64	207:8	7	
water	172:64	0:0	8	{
water	173:12	0:0	8	track
op	173:17	0:0	8	->
water	173:19	0:0	8	timescale
op	173:29	0:0	8	=
water	173:31	0:0	8	st
op	173:33	0:0	8	->
water	173:35	0:0	8	codec
op	173:40	0:0	8	->
water	173:42	0:0	8	sample_rate
water	173:53	0:0	8	;
if	174:12	177:12	8	(! st -> codec -> frame_size && !av_get_bits_per_sample (st -> codec -> codec_id ))
cond	174:16	174:85	9	! st -> codec -> frame_size && !av_get_bits_per_sample (st -> codec -> codec_id )
op	174:16	0:0	10	!
water	174:17	0:0	10	st
op	174:19	0:0	10	->
water	174:21	0:0	10	codec
op	174:26	0:0	10	->
water	174:28	0:0	10	frame_size
op	174:39	0:0	10	&&
op	174:42	0:0	10	!
call	174:43	174:85	10	av_get_bits_per_sample
arg	174:66	174:85	11	st->codec->codec_id
water	174:66	0:0	12	st
op	174:68	0:0	12	->
water	174:70	0:0	12	codec
op	174:75	0:0	12	->
water	174:77	0:0	12	codec_id
stmts	174:88	177:12	9	
water	174:88	0:0	10	{
call	175:16	175:86	10	av_log
arg	175:23	175:24	11	s
water	175:23	0:0	12	s
arg	175:26	175:40	11	AV_LOG_WARNING
water	175:26	0:0	12	AV_LOG_WARNING
arg	175:42	175:83	11	"track %d: codec frame size is not set\n"
water	175:42	0:0	12	"track %d: codec frame size is not set\n"
arg	175:85	175:86	11	i
water	175:85	0:0	12	i
water	175:87	0:0	10	;
water	176:16	0:0	10	track
op	176:21	0:0	10	->
water	176:23	0:0	10	audio_vbr
op	176:33	0:0	10	=
water	176:35	0:0	10	1
water	176:36	0:0	10	;
water	177:12	0:0	10	}
else	177:13	186:12	8
stmts	177:18	186:12	9	
if	177:18	186:12	10	(st -> codec -> codec_id == AV_CODEC_ID_ADPCM_MS || st -> codec -> codec_id == AV_CODEC_ID_ADPCM_IMA_WAV || st -> codec -> codec_id == AV_CODEC_ID_ILBC)
cond	177:22	179:44	11	st -> codec -> codec_id == AV_CODEC_ID_ADPCM_MS || st -> codec -> codec_id == AV_CODEC_ID_ADPCM_IMA_WAV || st -> codec -> codec_id == AV_CODEC_ID_ILBC
water	177:22	0:0	12	st
op	177:24	0:0	12	->
water	177:26	0:0	12	codec
op	177:31	0:0	12	->
water	177:33	0:0	12	codec_id
op	177:42	0:0	12	==
water	177:45	0:0	12	AV_CODEC_ID_ADPCM_MS
op	177:66	0:0	12	||
water	178:21	0:0	12	st
op	178:23	0:0	12	->
water	178:25	0:0	12	codec
op	178:30	0:0	12	->
water	178:32	0:0	12	codec_id
op	178:41	0:0	12	==
water	178:44	0:0	12	AV_CODEC_ID_ADPCM_IMA_WAV
op	178:70	0:0	12	||
water	179:21	0:0	12	st
op	179:23	0:0	12	->
water	179:25	0:0	12	codec
op	179:30	0:0	12	->
water	179:32	0:0	12	codec_id
op	179:41	0:0	12	==
water	179:44	0:0	12	AV_CODEC_ID_ILBC
stmts	179:61	186:12	11	
water	179:61	0:0	12	{
if	180:16	184:16	12	(! st -> codec -> block_align)
cond	180:20	180:32	13	! st -> codec -> block_align
op	180:20	0:0	14	!
water	180:21	0:0	14	st
op	180:23	0:0	14	->
water	180:25	0:0	14	codec
op	180:30	0:0	14	->
water	180:32	0:0	14	block_align
stmts	180:45	184:16	13	
water	180:45	0:0	14	{
call	181:20	181:99	14	av_log
arg	181:27	181:28	15	s
water	181:27	0:0	16	s
arg	181:30	181:42	15	AV_LOG_ERROR
water	181:30	0:0	16	AV_LOG_ERROR
arg	181:44	181:96	15	"track %d: codec block align is not set for adpcm\n"
water	181:44	0:0	16	"track %d: codec block align is not set for adpcm\n"
arg	181:98	181:99	15	i
water	181:98	0:0	16	i
water	181:100	0:0	14	;
water	182:20	0:0	14	ret
op	182:24	0:0	14	=
call	182:26	182:40	14	AVERROR
arg	182:34	182:40	15	EINVAL
water	182:34	0:0	16	EINVAL
water	182:41	0:0	14	;
goto	183:20	183:30	14	error
water	183:25	0:0	15	error
water	184:16	0:0	14	}
water	185:16	0:0	12	track
op	185:21	0:0	12	->
water	185:23	0:0	12	sample_size
op	185:35	0:0	12	=
water	185:37	0:0	12	st
op	185:39	0:0	12	->
water	185:41	0:0	12	codec
op	185:46	0:0	12	->
water	185:48	0:0	12	block_align
water	185:59	0:0	12	;
water	186:12	0:0	12	}
else	186:13	188:12	8
stmts	186:18	188:12	9	
if	186:18	188:12	10	(st -> codec -> frame_size > 1)
cond	186:22	186:46	11	st -> codec -> frame_size > 1
water	186:22	0:0	12	st
op	186:24	0:0	12	->
water	186:26	0:0	12	codec
op	186:31	0:0	12	->
water	186:33	0:0	12	frame_size
op	186:44	0:0	12	>
water	186:46	0:0	12	1
stmts	186:48	188:12	11	
water	186:48	0:0	12	{
water	187:16	0:0	12	track
op	187:21	0:0	12	->
water	187:23	0:0	12	audio_vbr
op	187:33	0:0	12	=
water	187:35	0:0	12	1
water	187:36	0:0	12	;
water	188:12	0:0	12	}
else	188:13	190:12	8
stmts	188:17	190:12	9	
water	188:17	0:0	10	{
water	189:16	0:0	10	track
op	189:21	0:0	10	->
water	189:23	0:0	10	sample_size
op	189:35	0:0	10	=
water	189:37	0:0	10	(
call	189:38	189:80	10	av_get_bits_per_sample
arg	189:61	189:80	11	st->codec->codec_id
water	189:61	0:0	12	st
op	189:63	0:0	12	->
water	189:65	0:0	12	codec
op	189:70	0:0	12	->
water	189:72	0:0	12	codec_id
op	189:82	0:0	10	>>
water	189:85	0:0	10	3
water	189:86	0:0	10	)
op	189:88	0:0	10	*
water	189:90	0:0	10	st
op	189:92	0:0	10	->
water	189:94	0:0	10	codec
op	189:99	0:0	10	->
water	189:101	0:0	10	channels
water	189:109	0:0	10	;
water	190:12	0:0	10	}
if	191:12	194:12	8	(st -> codec -> codec_id == AV_CODEC_ID_ILBC || st -> codec -> codec_id == AV_CODEC_ID_ADPCM_IMA_QT)
cond	191:16	192:39	9	st -> codec -> codec_id == AV_CODEC_ID_ILBC || st -> codec -> codec_id == AV_CODEC_ID_ADPCM_IMA_QT
water	191:16	0:0	10	st
op	191:18	0:0	10	->
water	191:20	0:0	10	codec
op	191:25	0:0	10	->
water	191:27	0:0	10	codec_id
op	191:36	0:0	10	==
water	191:39	0:0	10	AV_CODEC_ID_ILBC
op	191:56	0:0	10	||
water	192:16	0:0	10	st
op	192:18	0:0	10	->
water	192:20	0:0	10	codec
op	192:25	0:0	10	->
water	192:27	0:0	10	codec_id
op	192:36	0:0	10	==
water	192:39	0:0	10	AV_CODEC_ID_ADPCM_IMA_QT
stmts	192:65	194:12	9	
water	192:65	0:0	10	{
water	193:16	0:0	10	track
op	193:21	0:0	10	->
water	193:23	0:0	10	audio_vbr
op	193:33	0:0	10	=
water	193:35	0:0	10	1
water	193:36	0:0	10	;
water	194:12	0:0	10	}
if	195:12	206:12	8	(track -> mode != MODE_MOV && track -> enc -> codec_id == AV_CODEC_ID_MP3 && track -> timescale < 16000)
cond	195:16	196:78	9	track -> mode != MODE_MOV && track -> enc -> codec_id == AV_CODEC_ID_MP3 && track -> timescale < 16000
water	195:16	0:0	10	track
op	195:21	0:0	10	->
water	195:23	0:0	10	mode
op	195:28	0:0	10	!=
water	195:31	0:0	10	MODE_MOV
op	195:40	0:0	10	&&
water	196:16	0:0	10	track
op	196:21	0:0	10	->
water	196:23	0:0	10	enc
op	196:26	0:0	10	->
water	196:28	0:0	10	codec_id
op	196:37	0:0	10	==
water	196:40	0:0	10	AV_CODEC_ID_MP3
op	196:56	0:0	10	&&
water	196:59	0:0	10	track
op	196:64	0:0	10	->
water	196:66	0:0	10	timescale
op	196:76	0:0	10	<
water	196:78	0:0	10	16000
stmts	196:85	206:12	9	
water	196:85	0:0	10	{
if	197:16	202:16	10	(track -> enc -> strict_std_compliance >= FF_COMPLIANCE_NORMAL)
cond	197:20	197:57	11	track -> enc -> strict_std_compliance >= FF_COMPLIANCE_NORMAL
water	197:20	0:0	12	track
op	197:25	0:0	12	->
water	197:27	0:0	12	enc
op	197:30	0:0	12	->
water	197:32	0:0	12	strict_std_compliance
op	197:54	0:0	12	>=
water	197:57	0:0	12	FF_COMPLIANCE_NORMAL
stmts	197:79	202:16	11	
water	197:79	0:0	12	{
call	198:20	199:50	12	av_log
arg	198:27	198:28	13	s
water	198:27	0:0	14	s
arg	198:30	198:42	13	AV_LOG_ERROR
water	198:30	0:0	14	AV_LOG_ERROR
arg	198:44	198:124	13	"track %d: muxing mp3 at %dhz is not standard, to mux anyway set strict to -1\n"
water	198:44	0:0	14	"track %d: muxing mp3 at %dhz is not standard, to mux anyway set strict to -1\n"
arg	199:24	199:25	13	i
water	199:24	0:0	14	i
arg	199:27	199:50	13	track->enc->sample_rate
water	199:27	0:0	14	track
op	199:32	0:0	14	->
water	199:34	0:0	14	enc
op	199:37	0:0	14	->
water	199:39	0:0	14	sample_rate
water	199:51	0:0	12	;
water	200:20	0:0	12	ret
op	200:24	0:0	12	=
call	200:26	200:40	12	AVERROR
arg	200:34	200:40	13	EINVAL
water	200:34	0:0	14	EINVAL
water	200:41	0:0	12	;
goto	201:20	201:30	12	error
water	201:25	0:0	13	error
water	202:16	0:0	12	}
else	202:18	205:16	10
stmts	202:23	205:16	11	
water	202:23	0:0	12	{
call	203:20	204:53	12	av_log
arg	203:27	203:28	13	s
water	203:27	0:0	14	s
arg	203:30	203:44	13	AV_LOG_WARNING
water	203:30	0:0	14	AV_LOG_WARNING
arg	203:46	203:101	13	"track %d: muxing mp3 at %dhz is not standard in MP4\n"
water	203:46	0:0	14	"track %d: muxing mp3 at %dhz is not standard in MP4\n"
arg	204:27	204:28	13	i
water	204:27	0:0	14	i
arg	204:30	204:53	13	track->enc->sample_rate
water	204:30	0:0	14	track
op	204:35	0:0	14	->
water	204:37	0:0	14	enc
op	204:40	0:0	14	->
water	204:42	0:0	14	sample_rate
water	204:54	0:0	12	;
water	205:16	0:0	12	}
water	206:12	0:0	10	}
water	207:8	0:0	8	}
else	207:10	209:8	4
stmts	207:15	209:8	5	
if	207:15	209:8	6	(st -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE)
cond	207:19	207:44	7	st -> codec -> codec_type == AVMEDIA_TYPE_SUBTITLE
water	207:19	0:0	8	st
op	207:21	0:0	8	->
water	207:23	0:0	8	codec
op	207:28	0:0	8	->
water	207:30	0:0	8	codec_type
op	207:41	0:0	8	==
water	207:44	0:0	8	AVMEDIA_TYPE_SUBTITLE
stmts	207:67	209:8	7	
water	207:67	0:0	8	{
water	208:12	0:0	8	track
op	208:17	0:0	8	->
water	208:19	0:0	8	timescale
op	208:29	0:0	8	=
water	208:31	0:0	8	st
op	208:33	0:0	8	->
water	208:35	0:0	8	time_base
op	208:44	0:0	8	.
water	208:45	0:0	8	den
water	208:48	0:0	8	;
water	209:8	0:0	8	}
else	209:10	211:8	4
stmts	209:15	211:8	5	
if	209:15	211:8	6	(st -> codec -> codec_type == AVMEDIA_TYPE_DATA)
cond	209:19	209:44	7	st -> codec -> codec_type == AVMEDIA_TYPE_DATA
water	209:19	0:0	8	st
op	209:21	0:0	8	->
water	209:23	0:0	8	codec
op	209:28	0:0	8	->
water	209:30	0:0	8	codec_type
op	209:41	0:0	8	==
water	209:44	0:0	8	AVMEDIA_TYPE_DATA
stmts	209:63	211:8	7	
water	209:63	0:0	8	{
water	210:12	0:0	8	track
op	210:17	0:0	8	->
water	210:19	0:0	8	timescale
op	210:29	0:0	8	=
water	210:31	0:0	8	st
op	210:33	0:0	8	->
water	210:35	0:0	8	time_base
op	210:44	0:0	8	.
water	210:45	0:0	8	den
water	210:48	0:0	8	;
water	211:8	0:0	8	}
else	211:10	213:8	4
stmts	211:15	213:8	5	
water	211:15	0:0	6	{
water	212:12	0:0	6	track
op	212:17	0:0	6	->
water	212:19	0:0	6	timescale
op	212:29	0:0	6	=
water	212:31	0:0	6	MOV_TIMESCALE
water	212:44	0:0	6	;
water	213:8	0:0	6	}
if	214:8	215:45	4	(! track -> height)
cond	214:12	214:20	5	! track -> height
op	214:12	0:0	6	!
water	214:13	0:0	6	track
op	214:18	0:0	6	->
water	214:20	0:0	6	height
stmts	215:12	215:45	5	
water	215:12	0:0	6	track
op	215:17	0:0	6	->
water	215:19	0:0	6	height
op	215:26	0:0	6	=
water	215:28	0:0	6	st
op	215:30	0:0	6	->
water	215:32	0:0	6	codec
op	215:37	0:0	6	->
water	215:39	0:0	6	height
water	215:45	0:0	6	;
if	218:8	219:39	4	(mov -> mode == MODE_ISM)
cond	218:12	218:25	5	mov -> mode == MODE_ISM
water	218:12	0:0	6	mov
op	218:15	0:0	6	->
water	218:17	0:0	6	mode
op	218:22	0:0	6	==
water	218:25	0:0	6	MODE_ISM
stmts	219:12	219:39	5	
water	219:12	0:0	6	track
op	219:17	0:0	6	->
water	219:19	0:0	6	timescale
op	219:29	0:0	6	=
water	219:31	0:0	6	10000000
water	219:39	0:0	6	;
call	220:8	220:55	4	avpriv_set_pts_info
arg	220:28	220:30	5	st
water	220:28	0:0	6	st
arg	220:32	220:34	5	64
water	220:32	0:0	6	64
arg	220:36	220:37	5	1
water	220:36	0:0	6	1
arg	220:39	220:55	5	track->timescale
water	220:39	0:0	6	track
op	220:44	0:0	6	->
water	220:46	0:0	6	timescale
water	220:56	0:0	4	;
if	222:8	234:8	4	(st -> codec -> extradata_size)
cond	222:12	222:23	5	st -> codec -> extradata_size
water	222:12	0:0	6	st
op	222:14	0:0	6	->
water	222:16	0:0	6	codec
op	222:21	0:0	6	->
water	222:23	0:0	6	extradata_size
stmts	222:39	234:8	5	
water	222:39	0:0	6	{
if	223:12	224:67	6	(st -> codec -> codec_id == AV_CODEC_ID_DVD_SUBTITLE)
cond	223:16	223:39	7	st -> codec -> codec_id == AV_CODEC_ID_DVD_SUBTITLE
water	223:16	0:0	8	st
op	223:18	0:0	8	->
water	223:20	0:0	8	codec
op	223:25	0:0	8	->
water	223:27	0:0	8	codec_id
op	223:36	0:0	8	==
water	223:39	0:0	8	AV_CODEC_ID_DVD_SUBTITLE
stmts	224:16	224:67	7	
call	224:16	224:66	8	mov_create_dvd_sub_decoder_specific_info
arg	224:57	224:62	9	track
water	224:57	0:0	10	track
arg	224:64	224:66	9	st
water	224:64	0:0	10	st
water	224:67	0:0	8	;
else	225:12	233:12	6
stmts	225:17	233:12	7	
if	225:17	233:12	8	(!TAG_IS_AVCI (track -> tag ) && st -> codec -> codec_id != AV_CODEC_ID_DNXHD)
cond	225:21	225:72	9	!TAG_IS_AVCI (track -> tag ) && st -> codec -> codec_id != AV_CODEC_ID_DNXHD
op	225:21	0:0	10	!
call	225:22	225:44	10	TAG_IS_AVCI
arg	225:34	225:44	11	track->tag
water	225:34	0:0	12	track
op	225:39	0:0	12	->
water	225:41	0:0	12	tag
op	225:46	0:0	10	&&
water	225:49	0:0	10	st
op	225:51	0:0	10	->
water	225:53	0:0	10	codec
op	225:58	0:0	10	->
water	225:60	0:0	10	codec_id
op	225:69	0:0	10	!=
water	225:72	0:0	10	AV_CODEC_ID_DNXHD
stmts	225:91	233:12	9	
water	225:91	0:0	10	{
water	226:16	0:0	10	track
op	226:21	0:0	10	->
water	226:23	0:0	10	vos_len
op	226:32	0:0	10	=
water	226:34	0:0	10	st
op	226:36	0:0	10	->
water	226:38	0:0	10	codec
op	226:43	0:0	10	->
water	226:45	0:0	10	extradata_size
water	226:59	0:0	10	;
water	227:16	0:0	10	track
op	227:21	0:0	10	->
water	227:23	0:0	10	vos_data
op	227:32	0:0	10	=
call	227:34	227:58	10	av_malloc
arg	227:44	227:58	11	track->vos_len
water	227:44	0:0	12	track
op	227:49	0:0	12	->
water	227:51	0:0	12	vos_len
water	227:59	0:0	10	;
if	228:16	231:16	10	(! track -> vos_data)
cond	228:20	228:28	11	! track -> vos_data
op	228:20	0:0	12	!
water	228:21	0:0	12	track
op	228:26	0:0	12	->
water	228:28	0:0	12	vos_data
stmts	228:38	231:16	11	
water	228:38	0:0	12	{
water	229:20	0:0	12	ret
op	229:24	0:0	12	=
call	229:26	229:40	12	AVERROR
arg	229:34	229:40	13	ENOMEM
water	229:34	0:0	14	ENOMEM
water	229:41	0:0	12	;
goto	230:20	230:30	12	error
water	230:25	0:0	13	error
water	231:16	0:0	12	}
call	232:16	232:76	10	memcpy
arg	232:23	232:38	11	track->vos_data
water	232:23	0:0	12	track
op	232:28	0:0	12	->
water	232:30	0:0	12	vos_data
arg	232:40	232:60	11	st->codec->extradata
water	232:40	0:0	12	st
op	232:42	0:0	12	->
water	232:44	0:0	12	codec
op	232:49	0:0	12	->
water	232:51	0:0	12	extradata
arg	232:62	232:76	11	track->vos_len
water	232:62	0:0	12	track
op	232:67	0:0	12	->
water	232:69	0:0	12	vos_len
water	232:77	0:0	10	;
water	233:12	0:0	10	}
water	234:8	0:0	6	}
water	235:4	0:0	4	}
for	236:4	256:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	236:9	236:14	3	i = 0 ;
water	236:9	0:0	4	i
op	236:11	0:0	4	=
water	236:13	0:0	4	0
water	236:14	0:0	4	;
cond	236:16	236:23	3	i < s -> nb_streams
water	236:16	0:0	4	i
op	236:18	0:0	4	<
water	236:20	0:0	4	s
op	236:21	0:0	4	->
water	236:23	0:0	4	nb_streams
forexpr	236:35	236:36	3	i ++
water	236:35	0:0	4	i
op	236:36	0:0	4	++
stmts	236:40	256:4	3	
water	236:40	0:0	4	{
decl	237:8	237:13	4	int	j
decl	238:8	238:35	4	AVStream	*st
op	238:20	0:0	4	=
water	238:22	0:0	4	s
op	238:23	0:0	4	->
water	238:25	0:0	4	streams
op	238:32	0:0	4	[
water	238:33	0:0	4	i
op	238:34	0:0	4	]
decl	239:8	239:40	4	MOVTrack	*track
op	239:23	0:0	4	=
op	239:25	0:0	4	&
water	239:26	0:0	4	mov
op	239:29	0:0	4	->
water	239:31	0:0	4	tracks
op	239:37	0:0	4	[
water	239:38	0:0	4	i
op	239:39	0:0	4	]
if	240:8	242:20	4	(st -> codec -> codec_type != AVMEDIA_TYPE_AUDIO || track -> enc -> channel_layout != AV_CH_LAYOUT_MONO)
cond	240:12	241:42	5	st -> codec -> codec_type != AVMEDIA_TYPE_AUDIO || track -> enc -> channel_layout != AV_CH_LAYOUT_MONO
water	240:12	0:0	6	st
op	240:14	0:0	6	->
water	240:16	0:0	6	codec
op	240:21	0:0	6	->
water	240:23	0:0	6	codec_type
op	240:34	0:0	6	!=
water	240:37	0:0	6	AVMEDIA_TYPE_AUDIO
op	240:56	0:0	6	||
water	241:12	0:0	6	track
op	241:17	0:0	6	->
water	241:19	0:0	6	enc
op	241:22	0:0	6	->
water	241:24	0:0	6	channel_layout
op	241:39	0:0	6	!=
water	241:42	0:0	6	AV_CH_LAYOUT_MONO
stmts	242:12	242:20	5	
continue	242:12	242:20	6	
for	243:8	255:8	4	(j = 0 ;j < s -> nb_streams;j ++)
forinit	243:13	243:18	5	j = 0 ;
water	243:13	0:0	6	j
op	243:15	0:0	6	=
water	243:17	0:0	6	0
water	243:18	0:0	6	;
cond	243:20	243:27	5	j < s -> nb_streams
water	243:20	0:0	6	j
op	243:22	0:0	6	<
water	243:24	0:0	6	s
op	243:25	0:0	6	->
water	243:27	0:0	6	nb_streams
forexpr	243:39	243:40	5	j ++
water	243:39	0:0	6	j
op	243:40	0:0	6	++
stmts	243:44	255:8	5	
water	243:44	0:0	6	{
decl	244:12	244:40	6	AVStream	*stj
op	244:25	0:0	6	=
water	244:27	0:0	6	s
op	244:28	0:0	6	->
water	244:30	0:0	6	streams
op	244:37	0:0	6	[
water	244:38	0:0	6	j
op	244:39	0:0	6	]
decl	245:12	245:45	6	MOVTrack	*trackj
op	245:28	0:0	6	=
op	245:30	0:0	6	&
water	245:31	0:0	6	mov
op	245:34	0:0	6	->
water	245:36	0:0	6	tracks
op	245:42	0:0	6	[
water	245:43	0:0	6	j
op	245:44	0:0	6	]
if	246:12	247:24	6	(j == i)
cond	246:16	246:21	7	j == i
water	246:16	0:0	8	j
op	246:18	0:0	8	==
water	246:21	0:0	8	i
stmts	247:16	247:24	7	
continue	247:16	247:24	8	
if	248:12	253:24	6	(stj -> codec -> codec_type != AVMEDIA_TYPE_AUDIO || trackj -> enc -> channel_layout != AV_CH_LAYOUT_MONO || trackj -> language != track -> language || trackj -> tag != track -> tag)
cond	248:16	251:38	7	stj -> codec -> codec_type != AVMEDIA_TYPE_AUDIO || trackj -> enc -> channel_layout != AV_CH_LAYOUT_MONO || trackj -> language != track -> language || trackj -> tag != track -> tag
water	248:16	0:0	8	stj
op	248:19	0:0	8	->
water	248:21	0:0	8	codec
op	248:26	0:0	8	->
water	248:28	0:0	8	codec_type
op	248:39	0:0	8	!=
water	248:42	0:0	8	AVMEDIA_TYPE_AUDIO
op	248:61	0:0	8	||
water	249:16	0:0	8	trackj
op	249:22	0:0	8	->
water	249:24	0:0	8	enc
op	249:27	0:0	8	->
water	249:29	0:0	8	channel_layout
op	249:44	0:0	8	!=
water	249:47	0:0	8	AV_CH_LAYOUT_MONO
op	249:65	0:0	8	||
water	250:16	0:0	8	trackj
op	250:22	0:0	8	->
water	250:24	0:0	8	language
op	250:33	0:0	8	!=
water	250:36	0:0	8	track
op	250:41	0:0	8	->
water	250:43	0:0	8	language
op	250:52	0:0	8	||
water	251:16	0:0	8	trackj
op	251:22	0:0	8	->
water	251:24	0:0	8	tag
op	251:28	0:0	8	!=
water	251:31	0:0	8	track
op	251:36	0:0	8	->
water	251:38	0:0	8	tag
stmts	253:16	253:24	7	
continue	253:16	253:24	8	
water	254:12	0:0	6	track
op	254:17	0:0	6	->
water	254:19	0:0	6	multichannel_as_mono
op	254:39	0:0	6	++
water	254:41	0:0	6	;
water	255:8	0:0	6	}
water	256:4	0:0	4	}
call	257:4	257:19	2	enable_tracks
arg	257:18	257:19	3	s
water	257:18	0:0	4	s
water	257:20	0:0	2	;
if	258:4	262:4	2	(mov -> reserved_moov_size)
cond	258:8	258:13	3	mov -> reserved_moov_size
water	258:8	0:0	4	mov
op	258:11	0:0	4	->
water	258:13	0:0	4	reserved_moov_size
stmts	258:32	262:4	3	
water	258:32	0:0	4	{
water	259:8	0:0	4	mov
op	259:11	0:0	4	->
water	259:13	0:0	4	reserved_header_pos
op	259:33	0:0	4	=
call	259:35	259:47	4	avio_tell
arg	259:45	259:47	5	pb
water	259:45	0:0	6	pb
water	259:48	0:0	4	;
if	260:8	261:50	4	(mov -> reserved_moov_size > 0)
cond	260:12	260:38	5	mov -> reserved_moov_size > 0
water	260:12	0:0	6	mov
op	260:15	0:0	6	->
water	260:17	0:0	6	reserved_moov_size
op	260:36	0:0	6	>
water	260:38	0:0	6	0
stmts	261:12	261:50	5	
call	261:12	261:49	6	avio_skip
arg	261:22	261:24	7	pb
water	261:22	0:0	8	pb
arg	261:26	261:49	7	mov->reserved_moov_size
water	261:26	0:0	8	mov
op	261:29	0:0	8	->
water	261:31	0:0	8	reserved_moov_size
water	261:50	0:0	6	;
water	262:4	0:0	4	}
if	263:4	269:4	2	(mov -> flags & FF_MOV_FLAG_FRAGMENT)
cond	263:8	263:21	3	mov -> flags & FF_MOV_FLAG_FRAGMENT
water	263:8	0:0	4	mov
op	263:11	0:0	4	->
water	263:13	0:0	4	flags
op	263:19	0:0	4	&
water	263:21	0:0	4	FF_MOV_FLAG_FRAGMENT
stmts	263:43	269:4	3	
water	263:43	0:0	4	{
if	265:8	268:51	4	(! ( mov -> flags & ( FF_MOV_FLAG_FRAG_KEYFRAME | FF_MOV_FLAG_FRAG_CUSTOM ) ) && ! mov -> max_fragment_duration && ! mov -> max_fragment_size)
cond	265:12	267:49	5	! ( mov -> flags & ( FF_MOV_FLAG_FRAG_KEYFRAME | FF_MOV_FLAG_FRAG_CUSTOM ) ) && ! mov -> max_fragment_duration && ! mov -> max_fragment_size
op	265:12	0:0	6	!
water	265:13	0:0	6	(
water	265:14	0:0	6	mov
op	265:17	0:0	6	->
water	265:19	0:0	6	flags
op	265:25	0:0	6	&
water	265:27	0:0	6	(
water	265:28	0:0	6	FF_MOV_FLAG_FRAG_KEYFRAME
op	265:54	0:0	6	|
water	266:28	0:0	6	FF_MOV_FLAG_FRAG_CUSTOM
water	266:51	0:0	6	)
water	266:52	0:0	6	)
op	266:54	0:0	6	&&
op	267:12	0:0	6	!
water	267:13	0:0	6	mov
op	267:16	0:0	6	->
water	267:18	0:0	6	max_fragment_duration
op	267:40	0:0	6	&&
op	267:43	0:0	6	!
water	267:44	0:0	6	mov
op	267:47	0:0	6	->
water	267:49	0:0	6	max_fragment_size
stmts	268:12	268:51	5	
water	268:12	0:0	6	mov
op	268:15	0:0	6	->
water	268:17	0:0	6	flags
op	268:23	0:0	6	|=
water	268:26	0:0	6	FF_MOV_FLAG_FRAG_KEYFRAME
water	268:51	0:0	6	;
water	269:4	0:0	4	}
else	269:6	273:4	2
stmts	269:11	273:4	3	
water	269:11	0:0	4	{
if	270:8	271:52	4	(mov -> flags & FF_MOV_FLAG_FASTSTART)
cond	270:12	270:25	5	mov -> flags & FF_MOV_FLAG_FASTSTART
water	270:12	0:0	6	mov
op	270:15	0:0	6	->
water	270:17	0:0	6	flags
op	270:23	0:0	6	&
water	270:25	0:0	6	FF_MOV_FLAG_FASTSTART
stmts	271:12	271:52	5	
water	271:12	0:0	6	mov
op	271:15	0:0	6	->
water	271:17	0:0	6	reserved_header_pos
op	271:37	0:0	6	=
call	271:39	271:51	6	avio_tell
arg	271:49	271:51	7	pb
water	271:49	0:0	8	pb
water	271:52	0:0	6	;
call	272:8	272:34	4	mov_write_mdat_tag
arg	272:27	272:29	5	pb
water	272:27	0:0	6	pb
arg	272:31	272:34	5	mov
water	272:31	0:0	6	mov
water	272:35	0:0	4	;
water	273:4	0:0	4	}
if	274:4	280:4	2	(t =av_dict_get (s -> metadata ,"creation_time" ,NULL ,0 ))
cond	274:8	274:61	3	t =av_dict_get (s -> metadata ,"creation_time" ,NULL ,0 )
water	274:8	0:0	4	t
op	274:10	0:0	4	=
call	274:12	274:61	4	av_dict_get
arg	274:24	274:35	5	s->metadata
water	274:24	0:0	6	s
op	274:25	0:0	6	->
water	274:27	0:0	6	metadata
arg	274:37	274:52	5	"creation_time"
water	274:37	0:0	6	"creation_time"
arg	274:54	274:58	5	NULL
water	274:54	0:0	6	NULL
arg	274:60	274:61	5	0
water	274:60	0:0	6	0
stmts	274:64	280:4	3	
water	274:64	0:0	4	{
water	275:8	0:0	4	mov
op	275:11	0:0	4	->
water	275:13	0:0	4	time
op	275:18	0:0	4	=
call	275:20	275:52	4	ff_iso8601_to_unix_time
arg	275:44	275:52	5	t->value
water	275:44	0:0	6	t
op	275:45	0:0	6	->
water	275:47	0:0	6	value
water	275:53	0:0	4	;
if	276:8	279:8	4	(mov -> time < 0)
cond	276:12	276:24	5	mov -> time < 0
water	276:12	0:0	6	mov
op	276:15	0:0	6	->
water	276:17	0:0	6	time
op	276:22	0:0	6	<
water	276:24	0:0	6	0
stmts	276:27	279:8	5	
water	276:27	0:0	6	{
call	277:12	277:84	6	av_log
arg	277:19	277:20	7	s
water	277:19	0:0	8	s
arg	277:22	277:36	7	AV_LOG_WARNING
water	277:22	0:0	8	AV_LOG_WARNING
arg	277:38	277:74	7	"Failed to parse creation_time %s\n"
water	277:38	0:0	8	"Failed to parse creation_time %s\n"
arg	277:76	277:84	7	t->value
water	277:76	0:0	8	t
op	277:77	0:0	8	->
water	277:79	0:0	8	value
water	277:85	0:0	6	;
water	278:12	0:0	6	mov
op	278:15	0:0	6	->
water	278:17	0:0	6	time
op	278:22	0:0	6	=
water	278:24	0:0	6	0
water	278:25	0:0	6	;
water	279:8	0:0	6	}
water	280:4	0:0	4	}
if	281:4	282:31	2	(mov -> time)
cond	281:8	281:13	3	mov -> time
water	281:8	0:0	4	mov
op	281:11	0:0	4	->
water	281:13	0:0	4	time
stmts	282:8	282:31	3	
water	282:8	0:0	4	mov
op	282:11	0:0	4	->
water	282:13	0:0	4	time
op	282:18	0:0	4	+=
water	282:21	0:0	4	0
water	282:22	0:0	4	x7C25B080
water	282:31	0:0	4	;
if	283:4	285:22	2	(mov -> chapter_track)
cond	283:8	283:13	3	mov -> chapter_track
water	283:8	0:0	4	mov
op	283:11	0:0	4	->
water	283:13	0:0	4	chapter_track
stmts	284:8	285:22	3	
if	284:8	285:22	4	(( ret =mov_create_chapter_track (s ,mov -> chapter_track ) ) < 0)
cond	284:12	284:70	5	( ret =mov_create_chapter_track (s ,mov -> chapter_track ) ) < 0
water	284:12	0:0	6	(
water	284:13	0:0	6	ret
op	284:17	0:0	6	=
call	284:19	284:65	6	mov_create_chapter_track
arg	284:44	284:45	7	s
water	284:44	0:0	8	s
arg	284:47	284:65	7	mov->chapter_track
water	284:47	0:0	8	mov
op	284:50	0:0	8	->
water	284:52	0:0	8	chapter_track
water	284:66	0:0	6	)
op	284:68	0:0	6	<
water	284:70	0:0	6	0
stmts	285:12	285:22	5	
goto	285:12	285:22	6	error
water	285:17	0:0	7	error
if	286:4	297:4	2	(mov -> flags & FF_MOV_FLAG_RTP_HINT)
cond	286:8	286:21	3	mov -> flags & FF_MOV_FLAG_RTP_HINT
water	286:8	0:0	4	mov
op	286:11	0:0	4	->
water	286:13	0:0	4	flags
op	286:19	0:0	4	&
water	286:21	0:0	4	FF_MOV_FLAG_RTP_HINT
stmts	286:43	297:4	3	
water	286:43	0:0	4	{
for	288:8	296:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	288:13	288:18	5	i = 0 ;
water	288:13	0:0	6	i
op	288:15	0:0	6	=
water	288:17	0:0	6	0
water	288:18	0:0	6	;
cond	288:20	288:27	5	i < s -> nb_streams
water	288:20	0:0	6	i
op	288:22	0:0	6	<
water	288:24	0:0	6	s
op	288:25	0:0	6	->
water	288:27	0:0	6	nb_streams
forexpr	288:39	288:40	5	i ++
water	288:39	0:0	6	i
op	288:40	0:0	6	++
stmts	288:44	296:8	5	
water	288:44	0:0	6	{
decl	289:12	289:40	6	AVStream	*st
op	289:25	0:0	6	=
water	289:27	0:0	6	s
op	289:28	0:0	6	->
water	289:30	0:0	6	streams
op	289:37	0:0	6	[
water	289:38	0:0	6	i
op	289:39	0:0	6	]
if	290:12	295:12	6	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO || st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	290:16	291:41	7	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO || st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	290:16	0:0	8	st
op	290:18	0:0	8	->
water	290:20	0:0	8	codec
op	290:25	0:0	8	->
water	290:27	0:0	8	codec_type
op	290:38	0:0	8	==
water	290:41	0:0	8	AVMEDIA_TYPE_VIDEO
op	290:60	0:0	8	||
water	291:16	0:0	8	st
op	291:18	0:0	8	->
water	291:20	0:0	8	codec
op	291:25	0:0	8	->
water	291:27	0:0	8	codec_type
op	291:38	0:0	8	==
water	291:41	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	291:61	295:12	7	
water	291:61	0:0	8	{
if	292:16	293:30	8	(( ret =ff_mov_init_hinting (s ,hint_track ,i ) ) < 0)
cond	292:20	292:68	9	( ret =ff_mov_init_hinting (s ,hint_track ,i ) ) < 0
water	292:20	0:0	10	(
water	292:21	0:0	10	ret
op	292:25	0:0	10	=
call	292:27	292:63	10	ff_mov_init_hinting
arg	292:47	292:48	11	s
water	292:47	0:0	12	s
arg	292:50	292:60	11	hint_track
water	292:50	0:0	12	hint_track
arg	292:62	292:63	11	i
water	292:62	0:0	12	i
water	292:64	0:0	10	)
op	292:66	0:0	10	<
water	292:68	0:0	10	0
stmts	293:20	293:30	9	
goto	293:20	293:30	10	error
water	293:25	0:0	11	error
water	294:16	0:0	8	hint_track
op	294:26	0:0	8	++
water	294:28	0:0	8	;
water	295:12	0:0	8	}
water	296:8	0:0	6	}
water	297:4	0:0	4	}
if	298:4	313:4	2	(mov -> nb_meta_tmcd)
cond	298:8	298:13	3	mov -> nb_meta_tmcd
water	298:8	0:0	4	mov
op	298:11	0:0	4	->
water	298:13	0:0	4	nb_meta_tmcd
stmts	298:27	313:4	3	
water	298:27	0:0	4	{
for	300:8	312:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	300:13	300:18	5	i = 0 ;
water	300:13	0:0	6	i
op	300:15	0:0	6	=
water	300:17	0:0	6	0
water	300:18	0:0	6	;
cond	300:20	300:27	5	i < s -> nb_streams
water	300:20	0:0	6	i
op	300:22	0:0	6	<
water	300:24	0:0	6	s
op	300:25	0:0	6	->
water	300:27	0:0	6	nb_streams
forexpr	300:39	300:40	5	i ++
water	300:39	0:0	6	i
op	300:40	0:0	6	++
stmts	300:44	312:8	5	
water	300:44	0:0	6	{
decl	301:12	301:40	6	AVStream	*st
op	301:25	0:0	6	=
water	301:27	0:0	6	s
op	301:28	0:0	6	->
water	301:30	0:0	6	streams
op	301:37	0:0	6	[
water	301:38	0:0	6	i
op	301:39	0:0	6	]
water	302:12	0:0	6	t
op	302:14	0:0	6	=
water	302:16	0:0	6	global_tcr
water	302:26	0:0	6	;
if	303:12	311:12	6	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	303:16	303:41	7	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	303:16	0:0	8	st
op	303:18	0:0	8	->
water	303:20	0:0	8	codec
op	303:25	0:0	8	->
water	303:27	0:0	8	codec_type
op	303:38	0:0	8	==
water	303:41	0:0	8	AVMEDIA_TYPE_VIDEO
stmts	303:61	311:12	7	
water	303:61	0:0	8	{
if	304:16	305:70	8	(! t)
cond	304:20	304:21	9	! t
op	304:20	0:0	10	!
water	304:21	0:0	10	t
stmts	305:20	305:70	9	
water	305:20	0:0	10	t
op	305:22	0:0	10	=
call	305:24	305:69	10	av_dict_get
arg	305:36	305:48	11	st->metadata
water	305:36	0:0	12	st
op	305:38	0:0	12	->
water	305:40	0:0	12	metadata
arg	305:50	305:60	11	"timecode"
water	305:50	0:0	12	"timecode"
arg	305:62	305:66	11	NULL
water	305:62	0:0	12	NULL
arg	305:68	305:69	11	0
water	305:68	0:0	12	0
water	305:70	0:0	10	;
if	306:16	307:28	8	(! t)
cond	306:20	306:21	9	! t
op	306:20	0:0	10	!
water	306:21	0:0	10	t
stmts	307:20	307:28	9	
continue	307:20	307:28	10	
if	308:16	309:30	8	(( ret =mov_create_timecode_track (s ,tmcd_track ,i ,t -> value ) ) < 0)
cond	308:20	308:84	9	( ret =mov_create_timecode_track (s ,tmcd_track ,i ,t -> value ) ) < 0
water	308:20	0:0	10	(
water	308:21	0:0	10	ret
op	308:25	0:0	10	=
call	308:27	308:79	10	mov_create_timecode_track
arg	308:53	308:54	11	s
water	308:53	0:0	12	s
arg	308:56	308:66	11	tmcd_track
water	308:56	0:0	12	tmcd_track
arg	308:68	308:69	11	i
water	308:68	0:0	12	i
arg	308:71	308:79	11	t->value
water	308:71	0:0	12	t
op	308:72	0:0	12	->
water	308:74	0:0	12	value
water	308:80	0:0	10	)
op	308:82	0:0	10	<
water	308:84	0:0	10	0
stmts	309:20	309:30	9	
goto	309:20	309:30	10	error
water	309:25	0:0	11	error
water	310:16	0:0	8	tmcd_track
op	310:26	0:0	8	++
water	310:28	0:0	8	;
water	311:12	0:0	8	}
water	312:8	0:0	6	}
water	313:4	0:0	4	}
call	314:4	314:17	2	avio_flush
arg	314:15	314:17	3	pb
water	314:15	0:0	4	pb
water	314:18	0:0	2	;
if	315:4	316:40	2	(mov -> flags & FF_MOV_FLAG_ISML)
cond	315:8	315:21	3	mov -> flags & FF_MOV_FLAG_ISML
water	315:8	0:0	4	mov
op	315:11	0:0	4	->
water	315:13	0:0	4	flags
op	315:19	0:0	4	&
water	315:21	0:0	4	FF_MOV_FLAG_ISML
stmts	316:8	316:40	3	
call	316:8	316:39	4	mov_write_isml_manifest
arg	316:32	316:34	5	pb
water	316:32	0:0	6	pb
arg	316:36	316:39	5	mov
water	316:36	0:0	6	mov
water	316:40	0:0	4	;
if	317:4	324:4	2	(mov -> flags & FF_MOV_FLAG_EMPTY_MOOV && ! ( mov -> flags & FF_MOV_FLAG_DELAY_MOOV ))
cond	317:8	318:45	3	mov -> flags & FF_MOV_FLAG_EMPTY_MOOV && ! ( mov -> flags & FF_MOV_FLAG_DELAY_MOOV )
water	317:8	0:0	4	mov
op	317:11	0:0	4	->
water	317:13	0:0	4	flags
op	317:19	0:0	4	&
water	317:21	0:0	4	FF_MOV_FLAG_EMPTY_MOOV
op	317:44	0:0	4	&&
op	318:8	0:0	4	!
water	318:9	0:0	4	(
water	318:10	0:0	4	mov
op	318:13	0:0	4	->
water	318:15	0:0	4	flags
op	318:21	0:0	4	&
water	318:23	0:0	4	FF_MOV_FLAG_DELAY_MOOV
water	318:45	0:0	4	)
stmts	318:48	324:4	3	
water	318:48	0:0	4	{
if	319:8	320:22	4	(( ret =mov_write_moov_tag (pb ,mov ,s ) ) < 0)
cond	319:12	319:53	5	( ret =mov_write_moov_tag (pb ,mov ,s ) ) < 0
water	319:12	0:0	6	(
water	319:13	0:0	6	ret
op	319:17	0:0	6	=
call	319:19	319:48	6	mov_write_moov_tag
arg	319:38	319:40	7	pb
water	319:38	0:0	8	pb
arg	319:42	319:45	7	mov
water	319:42	0:0	8	mov
arg	319:47	319:48	7	s
water	319:47	0:0	8	s
water	319:49	0:0	6	)
op	319:51	0:0	6	<
water	319:53	0:0	6	0
stmts	320:12	320:22	5	
return	320:12	320:22	6	ret
water	320:19	0:0	7	ret
water	321:8	0:0	4	mov
op	321:11	0:0	4	->
water	321:13	0:0	4	moov_written
op	321:26	0:0	4	=
water	321:28	0:0	4	1
water	321:29	0:0	4	;
if	322:8	323:52	4	(mov -> flags & FF_MOV_FLAG_GLOBAL_SIDX)
cond	322:12	322:25	5	mov -> flags & FF_MOV_FLAG_GLOBAL_SIDX
water	322:12	0:0	6	mov
op	322:15	0:0	6	->
water	322:17	0:0	6	flags
op	322:23	0:0	6	&
water	322:25	0:0	6	FF_MOV_FLAG_GLOBAL_SIDX
stmts	323:12	323:52	5	
water	323:12	0:0	6	mov
op	323:15	0:0	6	->
water	323:17	0:0	6	reserved_header_pos
op	323:37	0:0	6	=
call	323:39	323:51	6	avio_tell
arg	323:49	323:51	7	pb
water	323:49	0:0	8	pb
water	323:52	0:0	6	;
water	324:4	0:0	4	}
return	325:4	325:12	2	0
water	325:11	0:0	3	0
label	326:1	326:6	2	error :
call	327:4	327:14	2	mov_free
arg	327:13	327:14	3	s
water	327:13	0:0	4	s
water	327:15	0:0	2	;
return	328:4	328:14	2	ret
water	328:11	0:0	3	ret
