func	1:0	40:0	0	static inline void	encode_mb_hq
params	1:31	0:0	1	
param	1:32	1:49	2	MpegEncContext *	s
param	1:51	1:73	2	MpegEncContext *	backup
param	1:75	1:95	2	MpegEncContext *	best
param	1:97	1:105	2	int	type
param	2:27	2:46	2	PutBitContext	pb[2]
param	2:48	2:68	2	PutBitContext	pb2[2]
param	2:70	2:93	2	PutBitContext	tex_pb[2]
param	3:27	3:36	2	int *	dmin
param	3:38	3:53	2	int *	next_block
param	3:55	3:67	2	int	motion_x
param	3:69	3:81	2	int	motion_y
stmnts	0:0	39:4	1	
decl	5:4	5:13	2	int	score
decl	6:4	6:27	2	uint8_t	*dest_backup[3]
call	7:4	7:46	2	copy_context_before_encode
arg	7:31	7:32	3	s
water	7:31	0:0	4	s
arg	7:34	7:40	3	backup
water	7:34	0:0	4	backup
arg	7:42	7:46	3	type
water	7:42	0:0	4	type
water	7:47	0:0	2	;
water	8:4	0:0	2	s
op	8:5	0:0	2	->
water	8:7	0:0	2	block
op	8:12	0:0	2	=
water	8:14	0:0	2	s
op	8:15	0:0	2	->
water	8:17	0:0	2	blocks
op	8:23	0:0	2	[
op	8:24	0:0	2	*
water	8:25	0:0	2	next_block
op	8:35	0:0	2	]
water	8:36	0:0	2	;
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	pb
op	9:9	0:0	2	=
water	9:11	0:0	2	pb
op	9:13	0:0	2	[
op	9:14	0:0	2	*
water	9:15	0:0	2	next_block
op	9:25	0:0	2	]
water	9:26	0:0	2	;
if	10:4	13:4	2	(s -> data_partitioning)
cond	10:7	10:10	3	s -> data_partitioning
water	10:7	0:0	4	s
op	10:8	0:0	4	->
water	10:10	0:0	4	data_partitioning
stmts	10:28	13:4	3	
water	10:28	0:0	4	{
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	pb2
op	11:17	0:0	4	=
water	11:19	0:0	4	pb2
op	11:25	0:0	4	[
op	11:26	0:0	4	*
water	11:27	0:0	4	next_block
op	11:37	0:0	4	]
water	11:38	0:0	4	;
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	tex_pb
op	12:17	0:0	4	=
water	12:19	0:0	4	tex_pb
op	12:25	0:0	4	[
op	12:26	0:0	4	*
water	12:27	0:0	4	next_block
op	12:37	0:0	4	]
water	12:38	0:0	4	;
water	13:4	0:0	4	}
if	14:4	20:4	2	(* next_block)
cond	14:7	14:8	3	* next_block
op	14:7	0:0	4	*
water	14:8	0:0	4	next_block
stmts	14:19	20:4	3	
water	14:19	0:0	4	{
call	15:8	15:52	4	memcpy
arg	15:15	15:26	5	dest_backup
water	15:15	0:0	6	dest_backup
arg	15:28	15:35	5	s->dest
water	15:28	0:0	6	s
op	15:29	0:0	6	->
water	15:31	0:0	6	dest
arg	15:37	15:52	5	sizeof(s->dest)
op	15:37	0:0	6	sizeof
water	15:43	0:0	6	(
water	15:44	0:0	6	s
op	15:45	0:0	6	->
water	15:47	0:0	6	dest
water	15:51	0:0	6	)
water	15:53	0:0	4	;
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	dest
op	16:15	0:0	4	[
water	16:16	0:0	4	0
op	16:17	0:0	4	]
op	16:19	0:0	4	=
water	16:21	0:0	4	s
op	16:22	0:0	4	->
water	16:24	0:0	4	sc
op	16:26	0:0	4	.
water	16:27	0:0	4	rd_scratchpad
water	16:40	0:0	4	;
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	dest
op	17:15	0:0	4	[
water	17:16	0:0	4	1
op	17:17	0:0	4	]
op	17:19	0:0	4	=
water	17:21	0:0	4	s
op	17:22	0:0	4	->
water	17:24	0:0	4	sc
op	17:26	0:0	4	.
water	17:27	0:0	4	rd_scratchpad
op	17:41	0:0	4	+
water	17:43	0:0	4	16
op	17:45	0:0	4	*
water	17:46	0:0	4	s
op	17:47	0:0	4	->
water	17:49	0:0	4	linesize
water	17:57	0:0	4	;
water	18:8	0:0	4	s
op	18:9	0:0	4	->
water	18:11	0:0	4	dest
op	18:15	0:0	4	[
water	18:16	0:0	4	2
op	18:17	0:0	4	]
op	18:19	0:0	4	=
water	18:21	0:0	4	s
op	18:22	0:0	4	->
water	18:24	0:0	4	sc
op	18:26	0:0	4	.
water	18:27	0:0	4	rd_scratchpad
op	18:41	0:0	4	+
water	18:43	0:0	4	16
op	18:45	0:0	4	*
water	18:46	0:0	4	s
op	18:47	0:0	4	->
water	18:49	0:0	4	linesize
op	18:58	0:0	4	+
water	18:60	0:0	4	8
water	18:61	0:0	4	;
call	19:8	19:36	4	av_assert0
arg	19:19	19:36	5	s->linesize>=32
water	19:19	0:0	6	s
op	19:20	0:0	6	->
water	19:22	0:0	6	linesize
op	19:31	0:0	6	>=
water	19:34	0:0	6	32
water	19:37	0:0	4	;
water	20:4	0:0	4	}
call	21:4	21:35	2	encode_mb
arg	21:14	21:15	3	s
water	21:14	0:0	4	s
arg	21:17	21:25	3	motion_x
water	21:17	0:0	4	motion_x
arg	21:27	21:35	3	motion_y
water	21:27	0:0	4	motion_y
water	21:36	0:0	2	;
water	22:4	0:0	2	score
op	22:9	0:0	2	=
call	22:11	22:32	2	put_bits_count
arg	22:26	22:32	3	&s->pb
op	22:26	0:0	4	&
water	22:27	0:0	4	s
op	22:28	0:0	4	->
water	22:30	0:0	4	pb
water	22:33	0:0	2	;
if	23:4	26:4	2	(s -> data_partitioning)
cond	23:7	23:10	3	s -> data_partitioning
water	23:7	0:0	4	s
op	23:8	0:0	4	->
water	23:10	0:0	4	data_partitioning
stmts	23:28	26:4	3	
water	23:28	0:0	4	{
water	24:8	0:0	4	score
op	24:13	0:0	4	+=
call	24:16	24:38	4	put_bits_count
arg	24:31	24:38	5	&s->pb2
op	24:31	0:0	6	&
water	24:32	0:0	6	s
op	24:33	0:0	6	->
water	24:35	0:0	6	pb2
water	24:39	0:0	4	;
water	25:8	0:0	4	score
op	25:13	0:0	4	+=
call	25:16	25:41	4	put_bits_count
arg	25:31	25:41	5	&s->tex_pb
op	25:31	0:0	6	&
water	25:32	0:0	6	s
op	25:33	0:0	6	->
water	25:35	0:0	6	tex_pb
water	25:42	0:0	4	;
water	26:4	0:0	4	}
if	27:4	31:4	2	(s -> avctx -> mb_decision == FF_MB_DECISION_RD)
cond	27:7	27:32	3	s -> avctx -> mb_decision == FF_MB_DECISION_RD
water	27:7	0:0	4	s
op	27:8	0:0	4	->
water	27:10	0:0	4	avctx
op	27:15	0:0	4	->
water	27:17	0:0	4	mb_decision
op	27:29	0:0	4	==
water	27:32	0:0	4	FF_MB_DECISION_RD
stmts	27:50	31:4	3	
water	27:50	0:0	4	{
call	28:8	28:36	4	ff_mpv_decode_mb
arg	28:25	28:26	5	s
water	28:25	0:0	6	s
arg	28:28	28:36	5	s->block
water	28:28	0:0	6	s
op	28:29	0:0	6	->
water	28:31	0:0	6	block
water	28:37	0:0	4	;
water	29:8	0:0	4	score
op	29:14	0:0	4	*=
water	29:17	0:0	4	s
op	29:18	0:0	4	->
water	29:20	0:0	4	lambda2
water	29:27	0:0	4	;
water	30:8	0:0	4	score
op	30:14	0:0	4	+=
call	30:17	30:25	4	sse_mb
arg	30:24	30:25	5	s
water	30:24	0:0	6	s
op	30:27	0:0	4	<<
water	30:30	0:0	4	FF_LAMBDA_SHIFT
water	30:45	0:0	4	;
water	31:4	0:0	4	}
if	32:4	34:4	2	(* next_block)
cond	32:7	32:8	3	* next_block
op	32:7	0:0	4	*
water	32:8	0:0	4	next_block
stmts	32:19	34:4	3	
water	32:19	0:0	4	{
call	33:8	33:52	4	memcpy
arg	33:15	33:22	5	s->dest
water	33:15	0:0	6	s
op	33:16	0:0	6	->
water	33:18	0:0	6	dest
arg	33:24	33:35	5	dest_backup
water	33:24	0:0	6	dest_backup
arg	33:37	33:52	5	sizeof(s->dest)
op	33:37	0:0	6	sizeof
water	33:43	0:0	6	(
water	33:44	0:0	6	s
op	33:45	0:0	6	->
water	33:47	0:0	6	dest
water	33:51	0:0	6	)
water	33:53	0:0	4	;
water	34:4	0:0	4	}
if	35:4	39:4	2	(score < * dmin)
cond	35:7	35:14	3	score < * dmin
water	35:7	0:0	4	score
op	35:12	0:0	4	<
op	35:13	0:0	4	*
water	35:14	0:0	4	dmin
stmts	35:19	39:4	3	
water	35:19	0:0	4	{
op	36:8	0:0	4	*
water	36:9	0:0	4	dmin
op	36:13	0:0	4	=
water	36:15	0:0	4	score
water	36:20	0:0	4	;
op	37:8	0:0	4	*
water	37:9	0:0	4	next_block
op	37:19	0:0	4	^=
water	37:21	0:0	4	1
water	37:22	0:0	4	;
call	38:8	38:47	4	copy_context_after_encode
arg	38:34	38:38	5	best
water	38:34	0:0	6	best
arg	38:40	38:41	5	s
water	38:40	0:0	6	s
arg	38:43	38:47	5	type
water	38:43	0:0	6	type
water	38:48	0:0	4	;
water	39:4	0:0	4	}
