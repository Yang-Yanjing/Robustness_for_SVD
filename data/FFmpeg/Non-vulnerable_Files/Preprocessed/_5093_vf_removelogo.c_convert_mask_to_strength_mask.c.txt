func	1:0	65:0	0	static void	convert_mask_to_strength_mask
params	1:41	0:0	1	
param	1:42	1:55	2	uint8_t *	data
param	1:57	1:69	2	int	linesize
param	2:42	2:47	2	int	w
param	2:49	2:54	2	int	h
param	2:56	2:67	2	int	min_val
param	3:42	3:60	2	int *	max_mask_size
stmnts	0:0	64:62	1	
decl	5:4	5:12	2	int	x
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	y
decl	8:4	8:24	2	int	current_pass
op	8:21	0:0	2	=
water	8:23	0:0	2	0
for	10:4	12:65	2	(y = 0 ;y < h;y ++)
forinit	10:9	10:14	3	y = 0 ;
water	10:9	0:0	4	y
op	10:11	0:0	4	=
water	10:13	0:0	4	0
water	10:14	0:0	4	;
cond	10:16	10:20	3	y < h
water	10:16	0:0	4	y
op	10:18	0:0	4	<
water	10:20	0:0	4	h
forexpr	10:23	10:24	3	y ++
water	10:23	0:0	4	y
op	10:24	0:0	4	++
stmts	11:8	12:65	3	
for	11:8	12:65	4	(x = 0 ;x < w;x ++)
forinit	11:13	11:18	5	x = 0 ;
water	11:13	0:0	6	x
op	11:15	0:0	6	=
water	11:17	0:0	6	0
water	11:18	0:0	6	;
cond	11:20	11:24	5	x < w
water	11:20	0:0	6	x
op	11:22	0:0	6	<
water	11:24	0:0	6	w
forexpr	11:27	11:28	5	x ++
water	11:27	0:0	6	x
op	11:28	0:0	6	++
stmts	12:12	12:65	5	
water	12:12	0:0	6	data
op	12:16	0:0	6	[
water	12:17	0:0	6	y
op	12:18	0:0	6	*
water	12:19	0:0	6	linesize
op	12:28	0:0	6	+
water	12:30	0:0	6	x
op	12:31	0:0	6	]
op	12:33	0:0	6	=
water	12:35	0:0	6	data
op	12:39	0:0	6	[
water	12:40	0:0	6	y
op	12:41	0:0	6	*
water	12:42	0:0	6	linesize
op	12:51	0:0	6	+
water	12:53	0:0	6	x
op	12:54	0:0	6	]
op	12:56	0:0	6	>
water	12:58	0:0	6	min_val
water	12:65	0:0	6	;
while	19:4	54:4	2	(1)
cond	19:11	19:11	3	1
water	19:11	0:0	4	1
stmts	19:14	54:4	3	
water	19:14	0:0	4	{
decl	21:8	21:36	4	int	has_anything_changed
op	21:33	0:0	4	=
water	21:35	0:0	4	0
decl	22:8	22:69	4	uint8_t	*current_pixel0
op	22:32	0:0	4	=
water	22:34	0:0	4	data
op	22:39	0:0	4	+
water	22:41	0:0	4	1
op	22:43	0:0	4	+
water	22:45	0:0	4	linesize
water	22:53	0:0	4	,
decl	22:8	22:69	4	uint8_t	*current_pixel
water	23:8	0:0	4	current_pass
op	23:20	0:0	4	++
water	23:22	0:0	4	;
for	24:8	51:8	4	(y = 1 ;y < h - 1;y ++)
forinit	24:13	24:18	5	y = 1 ;
water	24:13	0:0	6	y
op	24:15	0:0	6	=
water	24:17	0:0	6	1
water	24:18	0:0	6	;
cond	24:20	24:26	5	y < h - 1
water	24:20	0:0	6	y
op	24:22	0:0	6	<
water	24:24	0:0	6	h
op	24:25	0:0	6	-
water	24:26	0:0	6	1
forexpr	24:29	24:30	5	y ++
water	24:29	0:0	6	y
op	24:30	0:0	6	++
stmts	24:34	51:8	5	
water	24:34	0:0	6	{
water	25:12	0:0	6	current_pixel
op	25:26	0:0	6	=
water	25:28	0:0	6	current_pixel0
water	25:42	0:0	6	;
for	26:12	49:12	6	(x = 1 ;x < w - 1;x ++)
forinit	26:17	26:22	7	x = 1 ;
water	26:17	0:0	8	x
op	26:19	0:0	8	=
water	26:21	0:0	8	1
water	26:22	0:0	8	;
cond	26:24	26:30	7	x < w - 1
water	26:24	0:0	8	x
op	26:26	0:0	8	<
water	26:28	0:0	8	w
op	26:29	0:0	8	-
water	26:30	0:0	8	1
forexpr	26:33	26:34	7	x ++
water	26:33	0:0	8	x
op	26:34	0:0	8	++
stmts	26:38	49:12	7	
water	26:38	0:0	8	{
if	37:16	47:16	8	(* current_pixel >= current_pass && * ( current_pixel + 1 ) >= current_pass && * ( current_pixel - 1 ) >= current_pass && * ( current_pixel + linesize ) >= current_pass && * ( current_pixel - linesize ) >= current_pass)
cond	37:21	41:51	9	* current_pixel >= current_pass && * ( current_pixel + 1 ) >= current_pass && * ( current_pixel - 1 ) >= current_pass && * ( current_pixel + linesize ) >= current_pass && * ( current_pixel - linesize ) >= current_pass
op	37:21	0:0	10	*
water	37:22	0:0	10	current_pixel
op	37:41	0:0	10	>=
water	37:44	0:0	10	current_pass
op	37:57	0:0	10	&&
op	38:20	0:0	10	*
water	38:21	0:0	10	(
water	38:22	0:0	10	current_pixel
op	38:36	0:0	10	+
water	38:38	0:0	10	1
water	38:39	0:0	10	)
op	38:41	0:0	10	>=
water	38:44	0:0	10	current_pass
op	38:57	0:0	10	&&
op	39:20	0:0	10	*
water	39:21	0:0	10	(
water	39:22	0:0	10	current_pixel
op	39:36	0:0	10	-
water	39:38	0:0	10	1
water	39:39	0:0	10	)
op	39:41	0:0	10	>=
water	39:44	0:0	10	current_pass
op	39:57	0:0	10	&&
op	40:20	0:0	10	*
water	40:21	0:0	10	(
water	40:22	0:0	10	current_pixel
op	40:36	0:0	10	+
water	40:38	0:0	10	linesize
water	40:46	0:0	10	)
op	40:48	0:0	10	>=
water	40:51	0:0	10	current_pass
op	40:64	0:0	10	&&
op	41:20	0:0	10	*
water	41:21	0:0	10	(
water	41:22	0:0	10	current_pixel
op	41:36	0:0	10	-
water	41:38	0:0	10	linesize
water	41:46	0:0	10	)
op	41:48	0:0	10	>=
water	41:51	0:0	10	current_pass
stmts	41:65	47:16	9	
water	41:65	0:0	10	{
water	45:20	0:0	10	(
op	45:21	0:0	10	*
water	45:22	0:0	10	current_pixel
water	45:35	0:0	10	)
op	45:36	0:0	10	++
water	45:38	0:0	10	;
water	46:20	0:0	10	has_anything_changed
op	46:41	0:0	10	=
water	46:43	0:0	10	1
water	46:44	0:0	10	;
water	47:16	0:0	10	}
water	48:16	0:0	8	current_pixel
op	48:29	0:0	8	++
water	48:31	0:0	8	;
water	49:12	0:0	8	}
water	50:12	0:0	6	current_pixel0
op	50:27	0:0	6	+=
water	50:30	0:0	6	linesize
water	50:38	0:0	6	;
water	51:8	0:0	6	}
if	52:8	53:17	4	(! has_anything_changed)
cond	52:12	52:13	5	! has_anything_changed
op	52:12	0:0	6	!
water	52:13	0:0	6	has_anything_changed
stmts	53:12	53:17	5	
break	53:12	53:17	6	
water	54:4	0:0	4	}
for	57:4	59:88	2	(y = 1 ;y < h - 1;y ++)
forinit	57:9	57:14	3	y = 1 ;
water	57:9	0:0	4	y
op	57:11	0:0	4	=
water	57:13	0:0	4	1
water	57:14	0:0	4	;
cond	57:16	57:24	3	y < h - 1
water	57:16	0:0	4	y
op	57:18	0:0	4	<
water	57:20	0:0	4	h
op	57:22	0:0	4	-
water	57:24	0:0	4	1
forexpr	57:27	57:28	3	y ++
water	57:27	0:0	4	y
op	57:28	0:0	4	++
stmts	58:8	59:88	3	
for	58:8	59:88	4	(x = 1 ;x < w - 1;x ++)
forinit	58:13	58:18	5	x = 1 ;
water	58:13	0:0	6	x
op	58:15	0:0	6	=
water	58:17	0:0	6	1
water	58:18	0:0	6	;
cond	58:20	58:28	5	x < w - 1
water	58:20	0:0	6	x
op	58:22	0:0	6	<
water	58:24	0:0	6	w
op	58:26	0:0	6	-
water	58:28	0:0	6	1
forexpr	58:31	58:32	5	x ++
water	58:31	0:0	6	x
op	58:32	0:0	6	++
stmts	59:12	59:88	5	
water	59:12	0:0	6	data
op	59:16	0:0	6	[
water	59:17	0:0	6	(
water	59:18	0:0	6	y
op	59:20	0:0	6	*
water	59:22	0:0	6	linesize
water	59:30	0:0	6	)
op	59:32	0:0	6	+
water	59:34	0:0	6	x
op	59:35	0:0	6	]
op	59:37	0:0	6	=
call	59:39	59:87	6	apply_mask_fudge_factor
arg	59:63	59:87	7	data[(y*linesize)+x]
water	59:63	0:0	8	data
op	59:67	0:0	8	[
water	59:68	0:0	8	(
water	59:69	0:0	8	y
op	59:71	0:0	8	*
water	59:73	0:0	8	linesize
water	59:81	0:0	8	)
op	59:83	0:0	8	+
water	59:85	0:0	8	x
op	59:86	0:0	8	]
water	59:88	0:0	6	;
op	64:4	0:0	2	*
water	64:5	0:0	2	max_mask_size
op	64:19	0:0	2	=
call	64:21	64:61	2	apply_mask_fudge_factor
arg	64:45	64:61	3	current_pass+1
water	64:45	0:0	4	current_pass
op	64:58	0:0	4	+
water	64:60	0:0	4	1
water	64:62	0:0	2	;
