func	1:0	91:0	0	static void	read_sbr_envelope
params	1:29	0:0	1	
param	1:30	1:58	2	SpectralBandReplication *	sbr
param	1:60	1:77	2	GetBitContext *	gb
param	2:30	2:46	2	SBRData *	ch_data
param	2:48	2:54	2	int	ch
stmnts	0:0	90:40	1	
decl	4:4	4:12	2	int	bits
decl	5:4	5:15	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:15	2	int	j
water	5:12	0:0	2	,
decl	5:4	5:15	2	int	k
call	6:4	6:21	2	VLC_TYPE
arg	6:14	6:21	3	*t_huff
op	6:14	0:0	4	*
water	6:15	0:0	4	t_huff
op	6:22	0:0	2	[
water	6:23	0:0	2	2
op	6:24	0:0	2	]
water	6:25	0:0	2	,
water	6:27	0:0	2	(
op	6:28	0:0	2	*
water	6:29	0:0	2	f_huff
water	6:35	0:0	2	)
op	6:36	0:0	2	[
water	6:37	0:0	2	2
op	6:38	0:0	2	]
water	6:39	0:0	2	;
decl	7:4	7:20	2	int	t_lav
water	7:13	0:0	2	,
decl	7:4	7:20	2	int	f_lav
decl	8:4	8:60	2	const int	delta
op	8:20	0:0	2	=
water	8:22	0:0	2	(
water	8:23	0:0	2	ch
op	8:26	0:0	2	==
water	8:29	0:0	2	1
op	8:31	0:0	2	&&
water	8:34	0:0	2	sbr
op	8:37	0:0	2	->
water	8:39	0:0	2	bs_coupling
op	8:51	0:0	2	==
water	8:54	0:0	2	1
water	8:55	0:0	2	)
op	8:57	0:0	2	+
water	8:59	0:0	2	1
decl	9:4	9:33	2	const int	odd
op	9:18	0:0	2	=
water	9:20	0:0	2	sbr
op	9:23	0:0	2	->
water	9:25	0:0	2	n
op	9:26	0:0	2	[
water	9:27	0:0	2	1
op	9:28	0:0	2	]
op	9:30	0:0	2	&
water	9:32	0:0	2	1
if	10:4	24:4	2	(sbr -> bs_coupling && ch)
cond	10:8	10:28	3	sbr -> bs_coupling && ch
water	10:8	0:0	4	sbr
op	10:11	0:0	4	->
water	10:13	0:0	4	bs_coupling
op	10:25	0:0	4	&&
water	10:28	0:0	4	ch
stmts	10:32	24:4	3	
water	10:32	0:0	4	{
if	11:8	17:8	4	(ch_data -> bs_amp_res)
cond	11:12	11:21	5	ch_data -> bs_amp_res
water	11:12	0:0	6	ch_data
op	11:19	0:0	6	->
water	11:21	0:0	6	bs_amp_res
stmts	11:33	17:8	5	
water	11:33	0:0	6	{
water	12:12	0:0	6	bits
op	12:19	0:0	6	=
water	12:21	0:0	6	5
water	12:22	0:0	6	;
water	13:12	0:0	6	t_huff
op	13:19	0:0	6	=
water	13:21	0:0	6	vlc_sbr
op	13:28	0:0	6	[
water	13:29	0:0	6	T_HUFFMAN_ENV_BAL_3_0DB
op	13:52	0:0	6	]
op	13:53	0:0	6	.
water	13:54	0:0	6	table
water	13:59	0:0	6	;
water	14:12	0:0	6	t_lav
op	14:19	0:0	6	=
water	14:21	0:0	6	vlc_sbr_lav
op	14:32	0:0	6	[
water	14:33	0:0	6	T_HUFFMAN_ENV_BAL_3_0DB
op	14:56	0:0	6	]
water	14:57	0:0	6	;
water	15:12	0:0	6	f_huff
op	15:19	0:0	6	=
water	15:21	0:0	6	vlc_sbr
op	15:28	0:0	6	[
water	15:29	0:0	6	F_HUFFMAN_ENV_BAL_3_0DB
op	15:52	0:0	6	]
op	15:53	0:0	6	.
water	15:54	0:0	6	table
water	15:59	0:0	6	;
water	16:12	0:0	6	f_lav
op	16:19	0:0	6	=
water	16:21	0:0	6	vlc_sbr_lav
op	16:32	0:0	6	[
water	16:33	0:0	6	F_HUFFMAN_ENV_BAL_3_0DB
op	16:56	0:0	6	]
water	16:57	0:0	6	;
water	17:8	0:0	6	}
else	17:10	23:8	4
stmts	17:15	23:8	5	
water	17:15	0:0	6	{
water	18:12	0:0	6	bits
op	18:19	0:0	6	=
water	18:21	0:0	6	6
water	18:22	0:0	6	;
water	19:12	0:0	6	t_huff
op	19:19	0:0	6	=
water	19:21	0:0	6	vlc_sbr
op	19:28	0:0	6	[
water	19:29	0:0	6	T_HUFFMAN_ENV_BAL_1_5DB
op	19:52	0:0	6	]
op	19:53	0:0	6	.
water	19:54	0:0	6	table
water	19:59	0:0	6	;
water	20:12	0:0	6	t_lav
op	20:19	0:0	6	=
water	20:21	0:0	6	vlc_sbr_lav
op	20:32	0:0	6	[
water	20:33	0:0	6	T_HUFFMAN_ENV_BAL_1_5DB
op	20:56	0:0	6	]
water	20:57	0:0	6	;
water	21:12	0:0	6	f_huff
op	21:19	0:0	6	=
water	21:21	0:0	6	vlc_sbr
op	21:28	0:0	6	[
water	21:29	0:0	6	F_HUFFMAN_ENV_BAL_1_5DB
op	21:52	0:0	6	]
op	21:53	0:0	6	.
water	21:54	0:0	6	table
water	21:59	0:0	6	;
water	22:12	0:0	6	f_lav
op	22:19	0:0	6	=
water	22:21	0:0	6	vlc_sbr_lav
op	22:32	0:0	6	[
water	22:33	0:0	6	F_HUFFMAN_ENV_BAL_1_5DB
op	22:56	0:0	6	]
water	22:57	0:0	6	;
water	23:8	0:0	6	}
water	24:4	0:0	4	}
else	24:6	38:4	2
stmts	24:11	38:4	3	
water	24:11	0:0	4	{
if	25:8	31:8	4	(ch_data -> bs_amp_res)
cond	25:12	25:21	5	ch_data -> bs_amp_res
water	25:12	0:0	6	ch_data
op	25:19	0:0	6	->
water	25:21	0:0	6	bs_amp_res
stmts	25:33	31:8	5	
water	25:33	0:0	6	{
water	26:12	0:0	6	bits
op	26:19	0:0	6	=
water	26:21	0:0	6	6
water	26:22	0:0	6	;
water	27:12	0:0	6	t_huff
op	27:19	0:0	6	=
water	27:21	0:0	6	vlc_sbr
op	27:28	0:0	6	[
water	27:29	0:0	6	T_HUFFMAN_ENV_3_0DB
op	27:48	0:0	6	]
op	27:49	0:0	6	.
water	27:50	0:0	6	table
water	27:55	0:0	6	;
water	28:12	0:0	6	t_lav
op	28:19	0:0	6	=
water	28:21	0:0	6	vlc_sbr_lav
op	28:32	0:0	6	[
water	28:33	0:0	6	T_HUFFMAN_ENV_3_0DB
op	28:52	0:0	6	]
water	28:53	0:0	6	;
water	29:12	0:0	6	f_huff
op	29:19	0:0	6	=
water	29:21	0:0	6	vlc_sbr
op	29:28	0:0	6	[
water	29:29	0:0	6	F_HUFFMAN_ENV_3_0DB
op	29:48	0:0	6	]
op	29:49	0:0	6	.
water	29:50	0:0	6	table
water	29:55	0:0	6	;
water	30:12	0:0	6	f_lav
op	30:19	0:0	6	=
water	30:21	0:0	6	vlc_sbr_lav
op	30:32	0:0	6	[
water	30:33	0:0	6	F_HUFFMAN_ENV_3_0DB
op	30:52	0:0	6	]
water	30:53	0:0	6	;
water	31:8	0:0	6	}
else	31:10	37:8	4
stmts	31:15	37:8	5	
water	31:15	0:0	6	{
water	32:12	0:0	6	bits
op	32:19	0:0	6	=
water	32:21	0:0	6	7
water	32:22	0:0	6	;
water	33:12	0:0	6	t_huff
op	33:19	0:0	6	=
water	33:21	0:0	6	vlc_sbr
op	33:28	0:0	6	[
water	33:29	0:0	6	T_HUFFMAN_ENV_1_5DB
op	33:48	0:0	6	]
op	33:49	0:0	6	.
water	33:50	0:0	6	table
water	33:55	0:0	6	;
water	34:12	0:0	6	t_lav
op	34:19	0:0	6	=
water	34:21	0:0	6	vlc_sbr_lav
op	34:32	0:0	6	[
water	34:33	0:0	6	T_HUFFMAN_ENV_1_5DB
op	34:52	0:0	6	]
water	34:53	0:0	6	;
water	35:12	0:0	6	f_huff
op	35:19	0:0	6	=
water	35:21	0:0	6	vlc_sbr
op	35:28	0:0	6	[
water	35:29	0:0	6	F_HUFFMAN_ENV_1_5DB
op	35:48	0:0	6	]
op	35:49	0:0	6	.
water	35:50	0:0	6	table
water	35:55	0:0	6	;
water	36:12	0:0	6	f_lav
op	36:19	0:0	6	=
water	36:21	0:0	6	vlc_sbr_lav
op	36:32	0:0	6	[
water	36:33	0:0	6	F_HUFFMAN_ENV_1_5DB
op	36:52	0:0	6	]
water	36:53	0:0	6	;
water	37:8	0:0	6	}
water	38:4	0:0	4	}
for	40:4	62:4	2	(i = 0 ;i < ch_data -> bs_num_env;i ++)
forinit	40:9	40:14	3	i = 0 ;
water	40:9	0:0	4	i
op	40:11	0:0	4	=
water	40:13	0:0	4	0
water	40:14	0:0	4	;
cond	40:16	40:29	3	i < ch_data -> bs_num_env
water	40:16	0:0	4	i
op	40:18	0:0	4	<
water	40:20	0:0	4	ch_data
op	40:27	0:0	4	->
water	40:29	0:0	4	bs_num_env
forexpr	40:41	40:42	3	i ++
water	40:41	0:0	4	i
op	40:42	0:0	4	++
stmts	40:46	62:4	3	
water	40:46	0:0	4	{
if	41:8	57:8	4	(ch_data -> bs_df_env [ i ])
cond	41:12	41:32	5	ch_data -> bs_df_env [ i ]
water	41:12	0:0	6	ch_data
op	41:19	0:0	6	->
water	41:21	0:0	6	bs_df_env
op	41:30	0:0	6	[
water	41:31	0:0	6	i
op	41:32	0:0	6	]
stmts	41:35	57:8	5	
water	41:35	0:0	6	{
if	43:12	46:12	6	(ch_data -> bs_freq_res [ i + 1 ] == ch_data -> bs_freq_res [ i ])
cond	43:16	43:69	7	ch_data -> bs_freq_res [ i + 1 ] == ch_data -> bs_freq_res [ i ]
water	43:16	0:0	8	ch_data
op	43:23	0:0	8	->
water	43:25	0:0	8	bs_freq_res
op	43:36	0:0	8	[
water	43:37	0:0	8	i
op	43:39	0:0	8	+
water	43:41	0:0	8	1
op	43:42	0:0	8	]
op	43:44	0:0	8	==
water	43:47	0:0	8	ch_data
op	43:54	0:0	8	->
water	43:56	0:0	8	bs_freq_res
op	43:67	0:0	8	[
water	43:68	0:0	8	i
op	43:69	0:0	8	]
stmts	43:72	46:12	7	
water	43:72	0:0	8	{
for	44:16	45:130	8	(j = 0 ;j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ];j ++)
forinit	44:21	44:26	9	j = 0 ;
water	44:21	0:0	10	j
op	44:23	0:0	10	=
water	44:25	0:0	10	0
water	44:26	0:0	10	;
cond	44:28	44:66	9	j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ]
water	44:28	0:0	10	j
op	44:30	0:0	10	<
water	44:32	0:0	10	sbr
op	44:35	0:0	10	->
water	44:37	0:0	10	n
op	44:38	0:0	10	[
water	44:39	0:0	10	ch_data
op	44:46	0:0	10	->
water	44:48	0:0	10	bs_freq_res
op	44:59	0:0	10	[
water	44:60	0:0	10	i
op	44:62	0:0	10	+
water	44:64	0:0	10	1
op	44:65	0:0	10	]
op	44:66	0:0	10	]
forexpr	44:69	44:70	9	j ++
water	44:69	0:0	10	j
op	44:70	0:0	10	++
stmts	45:20	45:130	9	
water	45:20	0:0	10	ch_data
op	45:27	0:0	10	->
water	45:29	0:0	10	env_facs
op	45:37	0:0	10	[
water	45:38	0:0	10	i
op	45:40	0:0	10	+
water	45:42	0:0	10	1
op	45:43	0:0	10	]
op	45:44	0:0	10	[
water	45:45	0:0	10	j
op	45:46	0:0	10	]
op	45:47	0:0	10	.
water	45:48	0:0	10	mant
op	45:53	0:0	10	=
water	45:55	0:0	10	ch_data
op	45:62	0:0	10	->
water	45:64	0:0	10	env_facs
op	45:72	0:0	10	[
water	45:73	0:0	10	i
op	45:74	0:0	10	]
op	45:75	0:0	10	[
water	45:76	0:0	10	j
op	45:77	0:0	10	]
op	45:78	0:0	10	.
water	45:79	0:0	10	mant
op	45:84	0:0	10	+
water	45:86	0:0	10	delta
op	45:92	0:0	10	*
water	45:94	0:0	10	(
call	45:95	45:120	10	get_vlc2
arg	45:104	45:106	11	gb
water	45:104	0:0	12	gb
arg	45:108	45:114	11	t_huff
water	45:108	0:0	12	t_huff
arg	45:116	45:117	11	9
water	45:116	0:0	12	9
arg	45:119	45:120	11	3
water	45:119	0:0	12	3
op	45:122	0:0	10	-
water	45:124	0:0	10	t_lav
water	45:129	0:0	10	)
water	45:130	0:0	10	;
water	46:12	0:0	8	}
else	46:14	51:12	6
stmts	46:19	51:12	7	
if	46:19	51:12	8	(ch_data -> bs_freq_res [ i + 1 ])
cond	46:23	46:49	9	ch_data -> bs_freq_res [ i + 1 ]
water	46:23	0:0	10	ch_data
op	46:30	0:0	10	->
water	46:32	0:0	10	bs_freq_res
op	46:43	0:0	10	[
water	46:44	0:0	10	i
op	46:46	0:0	10	+
water	46:48	0:0	10	1
op	46:49	0:0	10	]
stmts	46:52	51:12	9	
water	46:52	0:0	10	{
for	47:16	50:16	10	(j = 0 ;j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ];j ++)
forinit	47:21	47:26	11	j = 0 ;
water	47:21	0:0	12	j
op	47:23	0:0	12	=
water	47:25	0:0	12	0
water	47:26	0:0	12	;
cond	47:28	47:66	11	j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ]
water	47:28	0:0	12	j
op	47:30	0:0	12	<
water	47:32	0:0	12	sbr
op	47:35	0:0	12	->
water	47:37	0:0	12	n
op	47:38	0:0	12	[
water	47:39	0:0	12	ch_data
op	47:46	0:0	12	->
water	47:48	0:0	12	bs_freq_res
op	47:59	0:0	12	[
water	47:60	0:0	12	i
op	47:62	0:0	12	+
water	47:64	0:0	12	1
op	47:65	0:0	12	]
op	47:66	0:0	12	]
forexpr	47:69	47:70	11	j ++
water	47:69	0:0	12	j
op	47:70	0:0	12	++
stmts	47:74	50:16	11	
water	47:74	0:0	12	{
water	48:20	0:0	12	k
op	48:22	0:0	12	=
water	48:24	0:0	12	(
water	48:25	0:0	12	j
op	48:27	0:0	12	+
water	48:29	0:0	12	odd
water	48:32	0:0	12	)
op	48:34	0:0	12	>>
water	48:37	0:0	12	1
water	48:38	0:0	12	;
water	49:20	0:0	12	ch_data
op	49:27	0:0	12	->
water	49:29	0:0	12	env_facs
op	49:37	0:0	12	[
water	49:38	0:0	12	i
op	49:40	0:0	12	+
water	49:42	0:0	12	1
op	49:43	0:0	12	]
op	49:44	0:0	12	[
water	49:45	0:0	12	j
op	49:46	0:0	12	]
op	49:47	0:0	12	.
water	49:48	0:0	12	mant
op	49:53	0:0	12	=
water	49:55	0:0	12	ch_data
op	49:62	0:0	12	->
water	49:64	0:0	12	env_facs
op	49:72	0:0	12	[
water	49:73	0:0	12	i
op	49:74	0:0	12	]
op	49:75	0:0	12	[
water	49:76	0:0	12	k
op	49:77	0:0	12	]
op	49:78	0:0	12	.
water	49:79	0:0	12	mant
op	49:84	0:0	12	+
water	49:86	0:0	12	delta
op	49:92	0:0	12	*
water	49:94	0:0	12	(
call	49:95	49:120	12	get_vlc2
arg	49:104	49:106	13	gb
water	49:104	0:0	14	gb
arg	49:108	49:114	13	t_huff
water	49:108	0:0	14	t_huff
arg	49:116	49:117	13	9
water	49:116	0:0	14	9
arg	49:119	49:120	13	3
water	49:119	0:0	14	3
op	49:122	0:0	12	-
water	49:124	0:0	12	t_lav
water	49:129	0:0	12	)
water	49:130	0:0	12	;
water	50:16	0:0	12	}
water	51:12	0:0	10	}
else	51:14	56:12	6
stmts	51:19	56:12	7	
water	51:19	0:0	8	{
for	52:16	55:16	8	(j = 0 ;j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ];j ++)
forinit	52:21	52:26	9	j = 0 ;
water	52:21	0:0	10	j
op	52:23	0:0	10	=
water	52:25	0:0	10	0
water	52:26	0:0	10	;
cond	52:28	52:66	9	j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ]
water	52:28	0:0	10	j
op	52:30	0:0	10	<
water	52:32	0:0	10	sbr
op	52:35	0:0	10	->
water	52:37	0:0	10	n
op	52:38	0:0	10	[
water	52:39	0:0	10	ch_data
op	52:46	0:0	10	->
water	52:48	0:0	10	bs_freq_res
op	52:59	0:0	10	[
water	52:60	0:0	10	i
op	52:62	0:0	10	+
water	52:64	0:0	10	1
op	52:65	0:0	10	]
op	52:66	0:0	10	]
forexpr	52:69	52:70	9	j ++
water	52:69	0:0	10	j
op	52:70	0:0	10	++
stmts	52:74	55:16	9	
water	52:74	0:0	10	{
water	53:20	0:0	10	k
op	53:22	0:0	10	=
water	53:24	0:0	10	j
water	53:26	0:0	10	?
water	53:28	0:0	10	2
op	53:29	0:0	10	*
water	53:30	0:0	10	j
op	53:32	0:0	10	-
water	53:34	0:0	10	odd
water	53:38	0:0	10	:
water	53:40	0:0	10	0
water	53:41	0:0	10	;
water	54:20	0:0	10	ch_data
op	54:27	0:0	10	->
water	54:29	0:0	10	env_facs
op	54:37	0:0	10	[
water	54:38	0:0	10	i
op	54:40	0:0	10	+
water	54:42	0:0	10	1
op	54:43	0:0	10	]
op	54:44	0:0	10	[
water	54:45	0:0	10	j
op	54:46	0:0	10	]
op	54:47	0:0	10	.
water	54:48	0:0	10	mant
op	54:53	0:0	10	=
water	54:55	0:0	10	ch_data
op	54:62	0:0	10	->
water	54:64	0:0	10	env_facs
op	54:72	0:0	10	[
water	54:73	0:0	10	i
op	54:74	0:0	10	]
op	54:75	0:0	10	[
water	54:76	0:0	10	k
op	54:77	0:0	10	]
op	54:78	0:0	10	.
water	54:79	0:0	10	mant
op	54:84	0:0	10	+
water	54:86	0:0	10	delta
op	54:92	0:0	10	*
water	54:94	0:0	10	(
call	54:95	54:120	10	get_vlc2
arg	54:104	54:106	11	gb
water	54:104	0:0	12	gb
arg	54:108	54:114	11	t_huff
water	54:108	0:0	12	t_huff
arg	54:116	54:117	11	9
water	54:116	0:0	12	9
arg	54:119	54:120	11	3
water	54:119	0:0	12	3
op	54:122	0:0	10	-
water	54:124	0:0	10	t_lav
water	54:129	0:0	10	)
water	54:130	0:0	10	;
water	55:16	0:0	10	}
water	56:12	0:0	8	}
water	57:8	0:0	6	}
else	57:10	61:8	4
stmts	57:15	61:8	5	
water	57:15	0:0	6	{
water	58:12	0:0	6	ch_data
op	58:19	0:0	6	->
water	58:21	0:0	6	env_facs
op	58:29	0:0	6	[
water	58:30	0:0	6	i
op	58:32	0:0	6	+
water	58:34	0:0	6	1
op	58:35	0:0	6	]
op	58:36	0:0	6	[
water	58:37	0:0	6	0
op	58:38	0:0	6	]
op	58:39	0:0	6	.
water	58:40	0:0	6	mant
op	58:45	0:0	6	=
water	58:47	0:0	6	delta
call	58:53	58:72	6	*get_bits
arg	58:64	58:66	7	gb
water	58:64	0:0	8	gb
arg	58:68	58:72	7	bits
water	58:68	0:0	8	bits
water	58:73	0:0	6	;
for	59:12	60:134	6	(j = 1 ;j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ];j ++)
forinit	59:17	59:22	7	j = 1 ;
water	59:17	0:0	8	j
op	59:19	0:0	8	=
water	59:21	0:0	8	1
water	59:22	0:0	8	;
cond	59:24	59:62	7	j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ]
water	59:24	0:0	8	j
op	59:26	0:0	8	<
water	59:28	0:0	8	sbr
op	59:31	0:0	8	->
water	59:33	0:0	8	n
op	59:34	0:0	8	[
water	59:35	0:0	8	ch_data
op	59:42	0:0	8	->
water	59:44	0:0	8	bs_freq_res
op	59:55	0:0	8	[
water	59:56	0:0	8	i
op	59:58	0:0	8	+
water	59:60	0:0	8	1
op	59:61	0:0	8	]
op	59:62	0:0	8	]
forexpr	59:65	59:66	7	j ++
water	59:65	0:0	8	j
op	59:66	0:0	8	++
stmts	60:16	60:134	7	
water	60:16	0:0	8	ch_data
op	60:23	0:0	8	->
water	60:25	0:0	8	env_facs
op	60:33	0:0	8	[
water	60:34	0:0	8	i
op	60:36	0:0	8	+
water	60:38	0:0	8	1
op	60:39	0:0	8	]
op	60:40	0:0	8	[
water	60:41	0:0	8	j
op	60:42	0:0	8	]
op	60:43	0:0	8	.
water	60:44	0:0	8	mant
op	60:49	0:0	8	=
water	60:51	0:0	8	ch_data
op	60:58	0:0	8	->
water	60:60	0:0	8	env_facs
op	60:68	0:0	8	[
water	60:69	0:0	8	i
op	60:71	0:0	8	+
water	60:73	0:0	8	1
op	60:74	0:0	8	]
op	60:75	0:0	8	[
water	60:76	0:0	8	j
op	60:78	0:0	8	-
water	60:80	0:0	8	1
op	60:81	0:0	8	]
op	60:82	0:0	8	.
water	60:83	0:0	8	mant
op	60:88	0:0	8	+
water	60:90	0:0	8	delta
op	60:96	0:0	8	*
water	60:98	0:0	8	(
call	60:99	60:124	8	get_vlc2
arg	60:108	60:110	9	gb
water	60:108	0:0	10	gb
arg	60:112	60:118	9	f_huff
water	60:112	0:0	10	f_huff
arg	60:120	60:121	9	9
water	60:120	0:0	10	9
arg	60:123	60:124	9	3
water	60:123	0:0	10	3
op	60:126	0:0	8	-
water	60:128	0:0	8	f_lav
water	60:133	0:0	8	)
water	60:134	0:0	8	;
water	61:8	0:0	6	}
water	62:4	0:0	4	}
for	64:4	86:4	2	(i = 0 ;i < ch_data -> bs_num_env;i ++)
forinit	64:9	64:14	3	i = 0 ;
water	64:9	0:0	4	i
op	64:11	0:0	4	=
water	64:13	0:0	4	0
water	64:14	0:0	4	;
cond	64:16	64:29	3	i < ch_data -> bs_num_env
water	64:16	0:0	4	i
op	64:18	0:0	4	<
water	64:20	0:0	4	ch_data
op	64:27	0:0	4	->
water	64:29	0:0	4	bs_num_env
forexpr	64:41	64:42	3	i ++
water	64:41	0:0	4	i
op	64:42	0:0	4	++
stmts	64:46	86:4	3	
water	64:46	0:0	4	{
if	65:8	81:8	4	(ch_data -> bs_df_env [ i ])
cond	65:12	65:32	5	ch_data -> bs_df_env [ i ]
water	65:12	0:0	6	ch_data
op	65:19	0:0	6	->
water	65:21	0:0	6	bs_df_env
op	65:30	0:0	6	[
water	65:31	0:0	6	i
op	65:32	0:0	6	]
stmts	65:35	81:8	5	
water	65:35	0:0	6	{
if	67:12	70:12	6	(ch_data -> bs_freq_res [ i + 1 ] == ch_data -> bs_freq_res [ i ])
cond	67:16	67:69	7	ch_data -> bs_freq_res [ i + 1 ] == ch_data -> bs_freq_res [ i ]
water	67:16	0:0	8	ch_data
op	67:23	0:0	8	->
water	67:25	0:0	8	bs_freq_res
op	67:36	0:0	8	[
water	67:37	0:0	8	i
op	67:39	0:0	8	+
water	67:41	0:0	8	1
op	67:42	0:0	8	]
op	67:44	0:0	8	==
water	67:47	0:0	8	ch_data
op	67:54	0:0	8	->
water	67:56	0:0	8	bs_freq_res
op	67:67	0:0	8	[
water	67:68	0:0	8	i
op	67:69	0:0	8	]
stmts	67:72	70:12	7	
water	67:72	0:0	8	{
for	68:16	69:120	8	(j = 0 ;j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ];j ++)
forinit	68:21	68:26	9	j = 0 ;
water	68:21	0:0	10	j
op	68:23	0:0	10	=
water	68:25	0:0	10	0
water	68:26	0:0	10	;
cond	68:28	68:66	9	j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ]
water	68:28	0:0	10	j
op	68:30	0:0	10	<
water	68:32	0:0	10	sbr
op	68:35	0:0	10	->
water	68:37	0:0	10	n
op	68:38	0:0	10	[
water	68:39	0:0	10	ch_data
op	68:46	0:0	10	->
water	68:48	0:0	10	bs_freq_res
op	68:59	0:0	10	[
water	68:60	0:0	10	i
op	68:62	0:0	10	+
water	68:64	0:0	10	1
op	68:65	0:0	10	]
op	68:66	0:0	10	]
forexpr	68:69	68:70	9	j ++
water	68:69	0:0	10	j
op	68:70	0:0	10	++
stmts	69:20	69:120	9	
water	69:20	0:0	10	ch_data
op	69:27	0:0	10	->
water	69:29	0:0	10	env_facs
op	69:37	0:0	10	[
water	69:38	0:0	10	i
op	69:40	0:0	10	+
water	69:42	0:0	10	1
op	69:43	0:0	10	]
op	69:44	0:0	10	[
water	69:45	0:0	10	j
op	69:46	0:0	10	]
op	69:48	0:0	10	=
water	69:50	0:0	10	ch_data
op	69:57	0:0	10	->
water	69:59	0:0	10	env_facs
op	69:67	0:0	10	[
water	69:68	0:0	10	i
op	69:69	0:0	10	]
op	69:70	0:0	10	[
water	69:71	0:0	10	j
op	69:72	0:0	10	]
op	69:74	0:0	10	+
water	69:76	0:0	10	delta
op	69:82	0:0	10	*
water	69:84	0:0	10	(
call	69:85	69:110	10	get_vlc2
arg	69:94	69:96	11	gb
water	69:94	0:0	12	gb
arg	69:98	69:104	11	t_huff
water	69:98	0:0	12	t_huff
arg	69:106	69:107	11	9
water	69:106	0:0	12	9
arg	69:109	69:110	11	3
water	69:109	0:0	12	3
op	69:112	0:0	10	-
water	69:114	0:0	10	t_lav
water	69:119	0:0	10	)
water	69:120	0:0	10	;
water	70:12	0:0	8	}
else	70:14	75:12	6
stmts	70:19	75:12	7	
if	70:19	75:12	8	(ch_data -> bs_freq_res [ i + 1 ])
cond	70:23	70:49	9	ch_data -> bs_freq_res [ i + 1 ]
water	70:23	0:0	10	ch_data
op	70:30	0:0	10	->
water	70:32	0:0	10	bs_freq_res
op	70:43	0:0	10	[
water	70:44	0:0	10	i
op	70:46	0:0	10	+
water	70:48	0:0	10	1
op	70:49	0:0	10	]
stmts	70:52	75:12	9	
water	70:52	0:0	10	{
for	71:16	74:16	10	(j = 0 ;j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ];j ++)
forinit	71:21	71:26	11	j = 0 ;
water	71:21	0:0	12	j
op	71:23	0:0	12	=
water	71:25	0:0	12	0
water	71:26	0:0	12	;
cond	71:28	71:66	11	j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ]
water	71:28	0:0	12	j
op	71:30	0:0	12	<
water	71:32	0:0	12	sbr
op	71:35	0:0	12	->
water	71:37	0:0	12	n
op	71:38	0:0	12	[
water	71:39	0:0	12	ch_data
op	71:46	0:0	12	->
water	71:48	0:0	12	bs_freq_res
op	71:59	0:0	12	[
water	71:60	0:0	12	i
op	71:62	0:0	12	+
water	71:64	0:0	12	1
op	71:65	0:0	12	]
op	71:66	0:0	12	]
forexpr	71:69	71:70	11	j ++
water	71:69	0:0	12	j
op	71:70	0:0	12	++
stmts	71:74	74:16	11	
water	71:74	0:0	12	{
water	72:20	0:0	12	k
op	72:22	0:0	12	=
water	72:24	0:0	12	(
water	72:25	0:0	12	j
op	72:27	0:0	12	+
water	72:29	0:0	12	odd
water	72:32	0:0	12	)
op	72:34	0:0	12	>>
water	72:37	0:0	12	1
water	72:38	0:0	12	;
water	73:20	0:0	12	ch_data
op	73:27	0:0	12	->
water	73:29	0:0	12	env_facs
op	73:37	0:0	12	[
water	73:38	0:0	12	i
op	73:40	0:0	12	+
water	73:42	0:0	12	1
op	73:43	0:0	12	]
op	73:44	0:0	12	[
water	73:45	0:0	12	j
op	73:46	0:0	12	]
op	73:48	0:0	12	=
water	73:50	0:0	12	ch_data
op	73:57	0:0	12	->
water	73:59	0:0	12	env_facs
op	73:67	0:0	12	[
water	73:68	0:0	12	i
op	73:69	0:0	12	]
op	73:70	0:0	12	[
water	73:71	0:0	12	k
op	73:72	0:0	12	]
op	73:74	0:0	12	+
water	73:76	0:0	12	delta
op	73:82	0:0	12	*
water	73:84	0:0	12	(
call	73:85	73:110	12	get_vlc2
arg	73:94	73:96	13	gb
water	73:94	0:0	14	gb
arg	73:98	73:104	13	t_huff
water	73:98	0:0	14	t_huff
arg	73:106	73:107	13	9
water	73:106	0:0	14	9
arg	73:109	73:110	13	3
water	73:109	0:0	14	3
op	73:112	0:0	12	-
water	73:114	0:0	12	t_lav
water	73:119	0:0	12	)
water	73:120	0:0	12	;
water	74:16	0:0	12	}
water	75:12	0:0	10	}
else	75:14	80:12	6
stmts	75:19	80:12	7	
water	75:19	0:0	8	{
for	76:16	79:16	8	(j = 0 ;j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ];j ++)
forinit	76:21	76:26	9	j = 0 ;
water	76:21	0:0	10	j
op	76:23	0:0	10	=
water	76:25	0:0	10	0
water	76:26	0:0	10	;
cond	76:28	76:66	9	j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ]
water	76:28	0:0	10	j
op	76:30	0:0	10	<
water	76:32	0:0	10	sbr
op	76:35	0:0	10	->
water	76:37	0:0	10	n
op	76:38	0:0	10	[
water	76:39	0:0	10	ch_data
op	76:46	0:0	10	->
water	76:48	0:0	10	bs_freq_res
op	76:59	0:0	10	[
water	76:60	0:0	10	i
op	76:62	0:0	10	+
water	76:64	0:0	10	1
op	76:65	0:0	10	]
op	76:66	0:0	10	]
forexpr	76:69	76:70	9	j ++
water	76:69	0:0	10	j
op	76:70	0:0	10	++
stmts	76:74	79:16	9	
water	76:74	0:0	10	{
water	77:20	0:0	10	k
op	77:22	0:0	10	=
water	77:24	0:0	10	j
water	77:26	0:0	10	?
water	77:28	0:0	10	2
op	77:29	0:0	10	*
water	77:30	0:0	10	j
op	77:32	0:0	10	-
water	77:34	0:0	10	odd
water	77:38	0:0	10	:
water	77:40	0:0	10	0
water	77:41	0:0	10	;
water	78:20	0:0	10	ch_data
op	78:27	0:0	10	->
water	78:29	0:0	10	env_facs
op	78:37	0:0	10	[
water	78:38	0:0	10	i
op	78:40	0:0	10	+
water	78:42	0:0	10	1
op	78:43	0:0	10	]
op	78:44	0:0	10	[
water	78:45	0:0	10	j
op	78:46	0:0	10	]
op	78:48	0:0	10	=
water	78:50	0:0	10	ch_data
op	78:57	0:0	10	->
water	78:59	0:0	10	env_facs
op	78:67	0:0	10	[
water	78:68	0:0	10	i
op	78:69	0:0	10	]
op	78:70	0:0	10	[
water	78:71	0:0	10	k
op	78:72	0:0	10	]
op	78:74	0:0	10	+
water	78:76	0:0	10	delta
op	78:82	0:0	10	*
water	78:84	0:0	10	(
call	78:85	78:110	10	get_vlc2
arg	78:94	78:96	11	gb
water	78:94	0:0	12	gb
arg	78:98	78:104	11	t_huff
water	78:98	0:0	12	t_huff
arg	78:106	78:107	11	9
water	78:106	0:0	12	9
arg	78:109	78:110	11	3
water	78:109	0:0	12	3
op	78:112	0:0	10	-
water	78:114	0:0	10	t_lav
water	78:119	0:0	10	)
water	78:120	0:0	10	;
water	79:16	0:0	10	}
water	80:12	0:0	8	}
water	81:8	0:0	6	}
else	81:10	85:8	4
stmts	81:15	85:8	5	
water	81:15	0:0	6	{
water	82:12	0:0	6	ch_data
op	82:19	0:0	6	->
water	82:21	0:0	6	env_facs
op	82:29	0:0	6	[
water	82:30	0:0	6	i
op	82:32	0:0	6	+
water	82:34	0:0	6	1
op	82:35	0:0	6	]
op	82:36	0:0	6	[
water	82:37	0:0	6	0
op	82:38	0:0	6	]
op	82:40	0:0	6	=
water	82:42	0:0	6	delta
call	82:48	82:67	6	*get_bits
arg	82:59	82:61	7	gb
water	82:59	0:0	8	gb
arg	82:63	82:67	7	bits
water	82:63	0:0	8	bits
water	82:68	0:0	6	;
for	83:12	84:124	6	(j = 1 ;j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ];j ++)
forinit	83:17	83:22	7	j = 1 ;
water	83:17	0:0	8	j
op	83:19	0:0	8	=
water	83:21	0:0	8	1
water	83:22	0:0	8	;
cond	83:24	83:62	7	j < sbr -> n [ ch_data -> bs_freq_res [ i + 1 ] ]
water	83:24	0:0	8	j
op	83:26	0:0	8	<
water	83:28	0:0	8	sbr
op	83:31	0:0	8	->
water	83:33	0:0	8	n
op	83:34	0:0	8	[
water	83:35	0:0	8	ch_data
op	83:42	0:0	8	->
water	83:44	0:0	8	bs_freq_res
op	83:55	0:0	8	[
water	83:56	0:0	8	i
op	83:58	0:0	8	+
water	83:60	0:0	8	1
op	83:61	0:0	8	]
op	83:62	0:0	8	]
forexpr	83:65	83:66	7	j ++
water	83:65	0:0	8	j
op	83:66	0:0	8	++
stmts	84:16	84:124	7	
water	84:16	0:0	8	ch_data
op	84:23	0:0	8	->
water	84:25	0:0	8	env_facs
op	84:33	0:0	8	[
water	84:34	0:0	8	i
op	84:36	0:0	8	+
water	84:38	0:0	8	1
op	84:39	0:0	8	]
op	84:40	0:0	8	[
water	84:41	0:0	8	j
op	84:42	0:0	8	]
op	84:44	0:0	8	=
water	84:46	0:0	8	ch_data
op	84:53	0:0	8	->
water	84:55	0:0	8	env_facs
op	84:63	0:0	8	[
water	84:64	0:0	8	i
op	84:66	0:0	8	+
water	84:68	0:0	8	1
op	84:69	0:0	8	]
op	84:70	0:0	8	[
water	84:71	0:0	8	j
op	84:73	0:0	8	-
water	84:75	0:0	8	1
op	84:76	0:0	8	]
op	84:78	0:0	8	+
water	84:80	0:0	8	delta
op	84:86	0:0	8	*
water	84:88	0:0	8	(
call	84:89	84:114	8	get_vlc2
arg	84:98	84:100	9	gb
water	84:98	0:0	10	gb
arg	84:102	84:108	9	f_huff
water	84:102	0:0	10	f_huff
arg	84:110	84:111	9	9
water	84:110	0:0	10	9
arg	84:113	84:114	9	3
water	84:113	0:0	10	3
op	84:116	0:0	8	-
water	84:118	0:0	8	f_lav
water	84:123	0:0	8	)
water	84:124	0:0	8	;
water	85:8	0:0	6	}
water	86:4	0:0	4	}
call	89:4	90:39	2	memcpy
arg	89:11	89:31	3	ch_data->env_facs[0]
water	89:11	0:0	4	ch_data
op	89:18	0:0	4	->
water	89:20	0:0	4	env_facs
op	89:28	0:0	4	[
water	89:29	0:0	4	0
op	89:30	0:0	4	]
arg	89:33	89:71	3	ch_data->env_facs[ch_data->bs_num_env]
water	89:33	0:0	4	ch_data
op	89:40	0:0	4	->
water	89:42	0:0	4	env_facs
op	89:50	0:0	4	[
water	89:51	0:0	4	ch_data
op	89:58	0:0	4	->
water	89:60	0:0	4	bs_num_env
op	89:70	0:0	4	]
arg	90:11	90:39	3	sizeof(ch_data->env_facs[0])
op	90:11	0:0	4	sizeof
water	90:17	0:0	4	(
water	90:18	0:0	4	ch_data
op	90:25	0:0	4	->
water	90:27	0:0	4	env_facs
op	90:35	0:0	4	[
water	90:36	0:0	4	0
op	90:37	0:0	4	]
water	90:38	0:0	4	)
water	90:40	0:0	2	;
