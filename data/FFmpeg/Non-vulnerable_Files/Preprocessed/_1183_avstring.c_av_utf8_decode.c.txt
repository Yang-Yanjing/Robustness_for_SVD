func	1:0	65:0	0	int	av_utf8_decode
params	1:18	0:0	1	
param	1:19	1:33	2	int32_t *	codep
param	1:35	1:55	2	const uint8_t * *	bufp
param	1:57	1:79	2	const uint8_t *	buf_end
param	2:19	2:37	2	unsigned int	flags
stmnts	0:0	64:14	1	
decl	4:4	4:28	2	const uint8_t	*p
op	4:21	0:0	2	=
op	4:23	0:0	2	*
water	4:24	0:0	2	bufp
decl	5:4	5:16	2	uint32_t	top
decl	6:4	6:17	2	uint64_t	code
decl	7:4	7:25	2	int	ret
op	7:12	0:0	2	=
water	7:14	0:0	2	0
water	7:15	0:0	2	,
decl	7:4	7:25	2	int	tail_len
decl	8:4	10:5	2	uint32_t	overlong_encoding_mins[6]
op	8:39	0:0	2	=
water	8:41	0:0	2	{
water	9:8	0:0	2	0
water	9:9	0:0	2	x00000000
water	9:18	0:0	2	,
water	9:20	0:0	2	0
water	9:21	0:0	2	x00000080
water	9:30	0:0	2	,
water	9:32	0:0	2	0
water	9:33	0:0	2	x00000800
water	9:42	0:0	2	,
water	9:44	0:0	2	0
water	9:45	0:0	2	x00010000
water	9:54	0:0	2	,
water	9:56	0:0	2	0
water	9:57	0:0	2	x00200000
water	9:66	0:0	2	,
water	9:68	0:0	2	0
water	9:69	0:0	2	x04000000
water	9:78	0:0	2	,
water	10:4	0:0	2	}
if	11:4	12:16	2	(p >= buf_end)
cond	11:8	11:13	3	p >= buf_end
water	11:8	0:0	4	p
op	11:10	0:0	4	>=
water	11:13	0:0	4	buf_end
stmts	12:8	12:16	3	
return	12:8	12:16	4	0
water	12:15	0:0	5	0
water	13:4	0:0	2	code
op	13:9	0:0	2	=
op	13:11	0:0	2	*
water	13:12	0:0	2	p
op	13:13	0:0	2	++
water	13:15	0:0	2	;
if	16:4	19:4	2	(( code & 0 xc0 ) == 0 x80 || code >= 0 xFE)
cond	16:8	16:42	3	( code & 0 xc0 ) == 0 x80 || code >= 0 xFE
water	16:8	0:0	4	(
water	16:9	0:0	4	code
op	16:14	0:0	4	&
water	16:16	0:0	4	0
water	16:17	0:0	4	xc0
water	16:20	0:0	4	)
op	16:22	0:0	4	==
water	16:25	0:0	4	0
water	16:26	0:0	4	x80
op	16:30	0:0	4	||
water	16:33	0:0	4	code
op	16:38	0:0	4	>=
water	16:41	0:0	4	0
water	16:42	0:0	4	xFE
stmts	16:47	19:4	3	
water	16:47	0:0	4	{
water	17:8	0:0	4	ret
op	17:12	0:0	4	=
call	17:14	17:28	4	AVERROR
arg	17:22	17:28	5	EILSEQ
water	17:22	0:0	6	EILSEQ
water	17:29	0:0	4	;
goto	18:8	18:16	4	end
water	18:13	0:0	5	end
water	19:4	0:0	4	}
water	20:4	0:0	2	top
op	20:8	0:0	2	=
water	20:10	0:0	2	(
water	20:11	0:0	2	code
op	20:16	0:0	2	&
water	20:18	0:0	2	128
water	20:21	0:0	2	)
op	20:23	0:0	2	>>
water	20:26	0:0	2	1
water	20:27	0:0	2	;
water	21:4	0:0	2	tail_len
op	21:13	0:0	2	=
water	21:15	0:0	2	0
water	21:16	0:0	2	;
while	22:4	37:4	2	(code & top)
cond	22:11	22:18	3	code & top
water	22:11	0:0	4	code
op	22:16	0:0	4	&
water	22:18	0:0	4	top
stmts	22:23	37:4	3	
water	22:23	0:0	4	{
decl	23:8	23:15	4	int	tmp
water	24:8	0:0	4	tail_len
op	24:16	0:0	4	++
water	24:18	0:0	4	;
if	25:8	28:8	4	(p >= buf_end)
cond	25:12	25:17	5	p >= buf_end
water	25:12	0:0	6	p
op	25:14	0:0	6	>=
water	25:17	0:0	6	buf_end
stmts	25:26	28:8	5	
water	25:26	0:0	6	{
water	26:12	0:0	6	(
op	26:13	0:0	6	*
water	26:14	0:0	6	bufp
water	26:18	0:0	6	)
op	26:20	0:0	6	++
water	26:22	0:0	6	;
return	27:12	27:34	6	AVERROR(EILSEQ)
call	27:19	27:33	7	AVERROR
arg	27:27	27:33	8	EILSEQ
water	27:27	0:0	9	EILSEQ
water	28:8	0:0	6	}
water	30:8	0:0	4	tmp
op	30:12	0:0	4	=
op	30:14	0:0	4	*
water	30:15	0:0	4	p
op	30:16	0:0	4	++
op	30:19	0:0	4	-
water	30:21	0:0	4	128
water	30:24	0:0	4	;
if	31:8	34:8	4	(tmp >> 6)
cond	31:12	31:17	5	tmp >> 6
water	31:12	0:0	6	tmp
op	31:15	0:0	6	>>
water	31:17	0:0	6	6
stmts	31:20	34:8	5	
water	31:20	0:0	6	{
water	32:12	0:0	6	(
op	32:13	0:0	6	*
water	32:14	0:0	6	bufp
water	32:18	0:0	6	)
op	32:20	0:0	6	++
water	32:22	0:0	6	;
return	33:12	33:34	6	AVERROR(EILSEQ)
call	33:19	33:33	7	AVERROR
arg	33:27	33:33	8	EILSEQ
water	33:27	0:0	9	EILSEQ
water	34:8	0:0	6	}
water	35:8	0:0	4	code
op	35:13	0:0	4	=
water	35:15	0:0	4	(
water	35:16	0:0	4	code
op	35:20	0:0	4	<<
water	35:22	0:0	4	6
water	35:23	0:0	4	)
op	35:25	0:0	4	+
water	35:27	0:0	4	tmp
water	35:30	0:0	4	;
water	36:8	0:0	4	top
op	36:12	0:0	4	<<=
water	36:16	0:0	4	5
water	36:17	0:0	4	;
water	37:4	0:0	4	}
water	38:4	0:0	2	code
op	38:9	0:0	2	&=
water	38:12	0:0	2	(
water	38:13	0:0	2	top
op	38:17	0:0	2	<<
water	38:20	0:0	2	1
water	38:21	0:0	2	)
op	38:23	0:0	2	-
water	38:25	0:0	2	1
water	38:26	0:0	2	;
call	40:4	40:28	2	av_assert0
arg	40:15	40:28	3	tail_len<=5
water	40:15	0:0	4	tail_len
op	40:24	0:0	4	<=
water	40:27	0:0	4	5
water	40:29	0:0	2	;
if	41:4	44:4	2	(code < overlong_encoding_mins [ tail_len ])
cond	41:8	41:46	3	code < overlong_encoding_mins [ tail_len ]
water	41:8	0:0	4	code
op	41:13	0:0	4	<
water	41:15	0:0	4	overlong_encoding_mins
op	41:37	0:0	4	[
water	41:38	0:0	4	tail_len
op	41:46	0:0	4	]
stmts	41:49	44:4	3	
water	41:49	0:0	4	{
water	42:8	0:0	4	ret
op	42:12	0:0	4	=
call	42:14	42:28	4	AVERROR
arg	42:22	42:28	5	EILSEQ
water	42:22	0:0	6	EILSEQ
water	42:29	0:0	4	;
goto	43:8	43:16	4	end
water	43:13	0:0	5	end
water	44:4	0:0	4	}
if	45:4	48:4	2	(code >= 1 U << 31)
cond	45:8	45:20	3	code >= 1 U << 31
water	45:8	0:0	4	code
op	45:13	0:0	4	>=
water	45:16	0:0	4	1
water	45:17	0:0	4	U
op	45:18	0:0	4	<<
water	45:20	0:0	4	31
stmts	45:24	48:4	3	
water	45:24	0:0	4	{
water	46:8	0:0	4	ret
op	46:12	0:0	4	=
call	46:14	46:28	4	AVERROR
arg	46:22	46:28	5	EILSEQ
water	46:22	0:0	6	EILSEQ
water	46:29	0:0	4	;
goto	47:8	47:16	4	end
water	47:13	0:0	5	end
water	48:4	0:0	4	}
op	49:4	0:0	2	*
water	49:5	0:0	2	codep
op	49:11	0:0	2	=
water	49:13	0:0	2	code
water	49:17	0:0	2	;
if	50:4	52:29	2	(code > 0 x10FFFF && ! ( flags & AV_UTF8_FLAG_ACCEPT_INVALID_BIG_CODES ))
cond	50:8	51:55	3	code > 0 x10FFFF && ! ( flags & AV_UTF8_FLAG_ACCEPT_INVALID_BIG_CODES )
water	50:8	0:0	4	code
op	50:13	0:0	4	>
water	50:15	0:0	4	0
water	50:16	0:0	4	x10FFFF
op	50:24	0:0	4	&&
op	51:8	0:0	4	!
water	51:9	0:0	4	(
water	51:10	0:0	4	flags
op	51:16	0:0	4	&
water	51:18	0:0	4	AV_UTF8_FLAG_ACCEPT_INVALID_BIG_CODES
water	51:55	0:0	4	)
stmts	52:8	52:29	3	
water	52:8	0:0	4	ret
op	52:12	0:0	4	=
call	52:14	52:28	4	AVERROR
arg	52:22	52:28	5	EILSEQ
water	52:22	0:0	6	EILSEQ
water	52:29	0:0	4	;
if	53:4	55:29	2	(code < 0 x20 && code != 0 x9 && code != 0 xA && code != 0 xD && flags & AV_UTF8_FLAG_EXCLUDE_XML_INVALID_CONTROL_CODES)
cond	53:8	54:16	3	code < 0 x20 && code != 0 x9 && code != 0 xA && code != 0 xD && flags & AV_UTF8_FLAG_EXCLUDE_XML_INVALID_CONTROL_CODES
water	53:8	0:0	4	code
op	53:13	0:0	4	<
water	53:15	0:0	4	0
water	53:16	0:0	4	x20
op	53:20	0:0	4	&&
water	53:23	0:0	4	code
op	53:28	0:0	4	!=
water	53:31	0:0	4	0
water	53:32	0:0	4	x9
op	53:35	0:0	4	&&
water	53:38	0:0	4	code
op	53:43	0:0	4	!=
water	53:46	0:0	4	0
water	53:47	0:0	4	xA
op	53:50	0:0	4	&&
water	53:53	0:0	4	code
op	53:58	0:0	4	!=
water	53:61	0:0	4	0
water	53:62	0:0	4	xD
op	53:65	0:0	4	&&
water	54:8	0:0	4	flags
op	54:14	0:0	4	&
water	54:16	0:0	4	AV_UTF8_FLAG_EXCLUDE_XML_INVALID_CONTROL_CODES
stmts	55:8	55:29	3	
water	55:8	0:0	4	ret
op	55:12	0:0	4	=
call	55:14	55:28	4	AVERROR
arg	55:22	55:28	5	EILSEQ
water	55:22	0:0	6	EILSEQ
water	55:29	0:0	4	;
if	56:4	58:29	2	(code >= 0 xD800 && code <= 0 xDFFF && ! ( flags & AV_UTF8_FLAG_ACCEPT_SURROGATES ))
cond	56:8	57:48	3	code >= 0 xD800 && code <= 0 xDFFF && ! ( flags & AV_UTF8_FLAG_ACCEPT_SURROGATES )
water	56:8	0:0	4	code
op	56:13	0:0	4	>=
water	56:16	0:0	4	0
water	56:17	0:0	4	xD800
op	56:23	0:0	4	&&
water	56:26	0:0	4	code
op	56:31	0:0	4	<=
water	56:34	0:0	4	0
water	56:35	0:0	4	xDFFF
op	56:41	0:0	4	&&
op	57:8	0:0	4	!
water	57:9	0:0	4	(
water	57:10	0:0	4	flags
op	57:16	0:0	4	&
water	57:18	0:0	4	AV_UTF8_FLAG_ACCEPT_SURROGATES
water	57:48	0:0	4	)
stmts	58:8	58:29	3	
water	58:8	0:0	4	ret
op	58:12	0:0	4	=
call	58:14	58:28	4	AVERROR
arg	58:22	58:28	5	EILSEQ
water	58:22	0:0	6	EILSEQ
water	58:29	0:0	4	;
if	59:4	61:29	2	(( code == 0 xFFFE || code == 0 xFFFF ) && ! ( flags & AV_UTF8_FLAG_ACCEPT_NON_CHARACTERS ))
cond	59:8	60:52	3	( code == 0 xFFFE || code == 0 xFFFF ) && ! ( flags & AV_UTF8_FLAG_ACCEPT_NON_CHARACTERS )
water	59:8	0:0	4	(
water	59:9	0:0	4	code
op	59:14	0:0	4	==
water	59:17	0:0	4	0
water	59:18	0:0	4	xFFFE
op	59:24	0:0	4	||
water	59:27	0:0	4	code
op	59:32	0:0	4	==
water	59:35	0:0	4	0
water	59:36	0:0	4	xFFFF
water	59:41	0:0	4	)
op	59:43	0:0	4	&&
op	60:8	0:0	4	!
water	60:9	0:0	4	(
water	60:10	0:0	4	flags
op	60:16	0:0	4	&
water	60:18	0:0	4	AV_UTF8_FLAG_ACCEPT_NON_CHARACTERS
water	60:52	0:0	4	)
stmts	61:8	61:29	3	
water	61:8	0:0	4	ret
op	61:12	0:0	4	=
call	61:14	61:28	4	AVERROR
arg	61:22	61:28	5	EILSEQ
water	61:22	0:0	6	EILSEQ
water	61:29	0:0	4	;
label	62:0	62:3	2	end :
op	63:4	0:0	2	*
water	63:5	0:0	2	bufp
op	63:10	0:0	2	=
water	63:12	0:0	2	p
water	63:13	0:0	2	;
return	64:4	64:14	2	ret
water	64:11	0:0	3	ret
