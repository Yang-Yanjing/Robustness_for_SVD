func	1:0	92:0	0	static int	dshow_cycle_devices
params	2:19	0:0	1	
param	2:20	2:42	2	AVFormatContext *	avctx
param	2:44	2:67	2	ICreateDevEnum *	devenum
param	3:20	3:48	2	enum dshowDeviceType	devtype
param	3:50	3:87	2	enum dshowSourceFilterType	sourcetype
param	3:89	3:110	2	IBaseFilter * *	pfilter
stmnts	0:0	91:12	1	
decl	5:4	5:44	2	struct dshow_ctx	*ctx
op	5:26	0:0	2	=
water	5:28	0:0	2	avctx
op	5:33	0:0	2	->
water	5:35	0:0	2	priv_data
decl	6:4	6:37	2	IBaseFilter	*device_filter
op	6:31	0:0	2	=
water	6:33	0:0	2	NULL
decl	7:4	7:34	2	IEnumMoniker	*classenum
op	7:28	0:0	2	=
water	7:30	0:0	2	NULL
decl	8:4	8:22	2	IMoniker	*m
op	8:16	0:0	2	=
water	8:18	0:0	2	NULL
decl	9:4	9:55	2	const char	*device_name
op	9:28	0:0	2	=
water	9:30	0:0	2	ctx
op	9:33	0:0	2	->
water	9:35	0:0	2	device_name
op	9:46	0:0	2	[
water	9:47	0:0	2	devtype
op	9:54	0:0	2	]
decl	10:4	11:66	2	int	skip
op	10:13	0:0	2	=
water	10:15	0:0	2	(
water	10:16	0:0	2	devtype
op	10:24	0:0	2	==
water	10:27	0:0	2	VideoDevice
water	10:38	0:0	2	)
water	10:40	0:0	2	?
water	10:42	0:0	2	ctx
op	10:45	0:0	2	->
water	10:47	0:0	2	video_device_number
water	11:40	0:0	2	:
water	11:42	0:0	2	ctx
op	11:45	0:0	2	->
water	11:47	0:0	2	audio_device_number
decl	12:4	12:9	2	int	r
decl	13:4	14:68	2	const GUID	*device_guid[2]
op	13:31	0:0	2	=
water	13:33	0:0	2	{
op	13:35	0:0	2	&
water	13:36	0:0	2	CLSID_VideoInputDeviceCategory
water	13:66	0:0	2	,
op	14:35	0:0	2	&
water	14:36	0:0	2	CLSID_AudioInputDeviceCategory
water	14:67	0:0	2	}
decl	15:4	15:79	2	const char	*devtypename
op	15:28	0:0	2	=
water	15:30	0:0	2	(
water	15:31	0:0	2	devtype
op	15:39	0:0	2	==
water	15:42	0:0	2	VideoDevice
water	15:53	0:0	2	)
water	15:55	0:0	2	?
water	15:57	0:0	2	"video"
water	15:65	0:0	2	:
water	15:67	0:0	2	"audio only"
decl	16:4	16:86	2	const char	*sourcetypename
op	16:31	0:0	2	=
water	16:33	0:0	2	(
water	16:34	0:0	2	sourcetype
op	16:45	0:0	2	==
water	16:48	0:0	2	VideoSourceDevice
water	16:65	0:0	2	)
water	16:67	0:0	2	?
water	16:69	0:0	2	"video"
water	16:77	0:0	2	:
water	16:79	0:0	2	"audio"
water	17:4	0:0	2	r
op	17:6	0:0	2	=
call	17:8	18:76	2	ICreateDevEnum_CreateClassEnumerator
arg	17:45	17:52	3	devenum
water	17:45	0:0	4	devenum
arg	17:54	17:77	3	device_guid[sourcetype]
water	17:54	0:0	4	device_guid
op	17:65	0:0	4	[
water	17:66	0:0	4	sourcetype
op	17:76	0:0	4	]
arg	18:45	18:73	3	(IEnumMoniker**)&classenum
water	18:45	0:0	4	(
water	18:46	0:0	4	IEnumMoniker
op	18:59	0:0	4	*
op	18:60	0:0	4	*
water	18:61	0:0	4	)
op	18:63	0:0	4	&
water	18:64	0:0	4	classenum
arg	18:75	18:76	3	0
water	18:75	0:0	4	0
water	18:77	0:0	2	;
if	19:4	23:4	2	(r != S_OK)
cond	19:8	19:13	3	r != S_OK
water	19:8	0:0	4	r
op	19:10	0:0	4	!=
water	19:13	0:0	4	S_OK
stmts	19:19	23:4	3	
water	19:19	0:0	4	{
call	20:8	21:26	4	av_log
arg	20:15	20:20	5	avctx
water	20:15	0:0	6	avctx
arg	20:22	20:34	5	AV_LOG_ERROR
water	20:22	0:0	6	AV_LOG_ERROR
arg	20:36	20:87	5	"Could not enumerate %s devices (or none found).\n"
water	20:36	0:0	6	"Could not enumerate %s devices (or none found).\n"
arg	21:15	21:26	5	devtypename
water	21:15	0:0	6	devtypename
water	21:27	0:0	4	;
return	22:8	22:27	4	AVERROR(EIO)
call	22:15	22:26	5	AVERROR
arg	22:23	22:26	6	EIO
water	22:23	0:0	7	EIO
water	23:4	0:0	4	}
while	24:4	81:4	2	(! device_filter &&IEnumMoniker_Next (classenum ,1 ,& m ,NULL ) == S_OK)
cond	24:11	24:74	3	! device_filter &&IEnumMoniker_Next (classenum ,1 ,& m ,NULL ) == S_OK
op	24:11	0:0	4	!
water	24:12	0:0	4	device_filter
op	24:26	0:0	4	&&
call	24:29	24:69	4	IEnumMoniker_Next
arg	24:47	24:56	5	classenum
water	24:47	0:0	6	classenum
arg	24:58	24:59	5	1
water	24:58	0:0	6	1
arg	24:61	24:63	5	&m
op	24:61	0:0	6	&
water	24:62	0:0	6	m
arg	24:65	24:69	5	NULL
water	24:65	0:0	6	NULL
op	24:71	0:0	4	==
water	24:74	0:0	4	S_OK
stmts	24:80	81:4	3	
water	24:80	0:0	4	{
decl	25:8	25:32	4	IPropertyBag	*bag
op	25:26	0:0	4	=
water	25:28	0:0	4	NULL
decl	26:8	26:34	4	char	*friendly_name
op	26:28	0:0	4	=
water	26:30	0:0	4	NULL
decl	27:8	27:32	4	char	*unique_name
op	27:26	0:0	4	=
water	27:28	0:0	4	NULL
decl	28:8	28:19	4	VARIANT	var
decl	29:8	29:33	4	IBindCtx	*bind_ctx
op	29:27	0:0	4	=
water	29:29	0:0	4	NULL
decl	30:8	30:30	4	LPOLESTR	olestr
op	30:24	0:0	4	=
water	30:26	0:0	4	NULL
decl	31:8	31:33	4	LPMALLOC	co_malloc
op	31:27	0:0	4	=
water	31:29	0:0	4	NULL
decl	32:8	32:13	4	int	i
water	33:8	0:0	4	r
op	33:10	0:0	4	=
call	33:12	33:37	4	CoGetMalloc
arg	33:24	33:25	5	1
water	33:24	0:0	6	1
arg	33:27	33:37	5	&co_malloc
op	33:27	0:0	6	&
water	33:28	0:0	6	co_malloc
water	33:38	0:0	4	;
if	34:8	35:22	4	(r = S_OK)
cond	34:12	34:16	5	r = S_OK
water	34:12	0:0	6	r
op	34:14	0:0	6	=
water	34:16	0:0	6	S_OK
stmts	35:12	35:22	5	
goto	35:12	35:22	6	fail1
water	35:17	0:0	7	fail1
water	36:8	0:0	4	r
op	36:10	0:0	4	=
call	36:12	36:38	4	CreateBindCtx
arg	36:26	36:27	5	0
water	36:26	0:0	6	0
arg	36:29	36:38	5	&bind_ctx
op	36:29	0:0	6	&
water	36:30	0:0	6	bind_ctx
water	36:39	0:0	4	;
if	37:8	38:22	4	(r != S_OK)
cond	37:12	37:17	5	r != S_OK
water	37:12	0:0	6	r
op	37:14	0:0	6	!=
water	37:17	0:0	6	S_OK
stmts	38:12	38:22	5	
goto	38:12	38:22	6	fail1
water	38:17	0:0	7	fail1
water	40:8	0:0	4	r
op	40:10	0:0	4	=
call	40:12	40:62	4	IMoniker_GetDisplayName
arg	40:36	40:37	5	m
water	40:36	0:0	6	m
arg	40:39	40:47	5	bind_ctx
water	40:39	0:0	6	bind_ctx
arg	40:49	40:53	5	NULL
water	40:49	0:0	6	NULL
arg	40:55	40:62	5	&olestr
op	40:55	0:0	6	&
water	40:56	0:0	6	olestr
water	40:63	0:0	4	;
if	41:8	42:22	4	(r != S_OK)
cond	41:12	41:17	5	r != S_OK
water	41:12	0:0	6	r
op	41:14	0:0	6	!=
water	41:17	0:0	6	S_OK
stmts	42:12	42:22	5	
goto	42:12	42:22	6	fail1
water	42:17	0:0	7	fail1
water	43:8	0:0	4	unique_name
op	43:20	0:0	4	=
call	43:22	43:46	4	dup_wchar_to_utf8
arg	43:40	43:46	5	olestr
water	43:40	0:0	6	olestr
water	43:47	0:0	4	;
for	45:8	48:8	4	(i = 0 ;i <strlen (unique_name );i ++)
forinit	45:13	45:18	5	i = 0 ;
water	45:13	0:0	6	i
op	45:15	0:0	6	=
water	45:17	0:0	6	0
water	45:18	0:0	6	;
cond	45:20	45:42	5	i <strlen (unique_name )
water	45:20	0:0	6	i
op	45:22	0:0	6	<
call	45:24	45:42	6	strlen
arg	45:31	45:42	7	unique_name
water	45:31	0:0	8	unique_name
forexpr	45:45	45:46	5	i ++
water	45:45	0:0	6	i
op	45:46	0:0	6	++
stmts	45:50	48:8	5	
water	45:50	0:0	6	{
if	46:12	47:36	6	(unique_name [ i ] == ':')
cond	46:16	46:34	7	unique_name [ i ] == ':'
water	46:16	0:0	8	unique_name
op	46:27	0:0	8	[
water	46:28	0:0	8	i
op	46:29	0:0	8	]
op	46:31	0:0	8	==
water	46:34	0:0	8	':'
stmts	47:16	47:36	7	
water	47:16	0:0	8	unique_name
op	47:27	0:0	8	[
water	47:28	0:0	8	i
op	47:29	0:0	8	]
op	47:31	0:0	8	=
water	47:33	0:0	8	'_'
water	47:36	0:0	8	;
water	48:8	0:0	6	}
water	49:8	0:0	4	r
op	49:10	0:0	4	=
call	49:12	49:76	4	IMoniker_BindToStorage
arg	49:35	49:36	5	m
water	49:35	0:0	6	m
arg	49:38	49:39	5	0
water	49:38	0:0	6	0
arg	49:41	49:42	5	0
water	49:41	0:0	6	0
arg	49:44	49:61	5	&IID_IPropertyBag
op	49:44	0:0	6	&
water	49:45	0:0	6	IID_IPropertyBag
arg	49:63	49:76	5	(void*)&bag
water	49:63	0:0	6	(
water	49:64	0:0	6	void
op	49:69	0:0	6	*
water	49:70	0:0	6	)
op	49:72	0:0	6	&
water	49:73	0:0	6	bag
water	49:77	0:0	4	;
if	50:8	51:22	4	(r != S_OK)
cond	50:12	50:17	5	r != S_OK
water	50:12	0:0	6	r
op	50:14	0:0	6	!=
water	50:17	0:0	6	S_OK
stmts	51:12	51:22	5	
goto	51:12	51:22	6	fail1
water	51:17	0:0	7	fail1
water	52:8	0:0	4	var
op	52:11	0:0	4	.
water	52:12	0:0	4	vt
op	52:15	0:0	4	=
water	52:17	0:0	4	VT_BSTR
water	52:24	0:0	4	;
water	53:8	0:0	4	r
op	53:10	0:0	4	=
call	53:12	53:62	4	IPropertyBag_Read
arg	53:30	53:33	5	bag
water	53:30	0:0	6	bag
arg	53:35	53:50	5	L"FriendlyName"
water	53:35	0:0	6	L
water	53:36	0:0	6	"FriendlyName"
arg	53:52	53:56	5	&var
op	53:52	0:0	6	&
water	53:53	0:0	6	var
arg	53:58	53:62	5	NULL
water	53:58	0:0	6	NULL
water	53:63	0:0	4	;
if	54:8	55:22	4	(r != S_OK)
cond	54:12	54:17	5	r != S_OK
water	54:12	0:0	6	r
op	54:14	0:0	6	!=
water	54:17	0:0	6	S_OK
stmts	55:12	55:22	5	
goto	55:12	55:22	6	fail1
water	55:17	0:0	7	fail1
water	56:8	0:0	4	friendly_name
op	56:22	0:0	4	=
call	56:24	56:53	4	dup_wchar_to_utf8
arg	56:42	56:53	5	var.bstrVal
water	56:42	0:0	6	var
op	56:45	0:0	6	.
water	56:46	0:0	6	bstrVal
water	56:54	0:0	4	;
if	57:8	67:8	4	(pfilter)
cond	57:12	57:12	5	pfilter
water	57:12	0:0	6	pfilter
stmts	57:21	67:8	5	
water	57:21	0:0	6	{
if	58:12	59:26	6	(strcmp (device_name ,friendly_name ) &&strcmp (device_name ,unique_name ))
cond	58:16	58:85	7	strcmp (device_name ,friendly_name ) &&strcmp (device_name ,unique_name )
call	58:16	58:49	8	strcmp
arg	58:23	58:34	9	device_name
water	58:23	0:0	10	device_name
arg	58:36	58:49	9	friendly_name
water	58:36	0:0	10	friendly_name
op	58:51	0:0	8	&&
call	58:54	58:85	8	strcmp
arg	58:61	58:72	9	device_name
water	58:61	0:0	10	device_name
arg	58:74	58:85	9	unique_name
water	58:74	0:0	10	unique_name
stmts	59:16	59:26	7	
goto	59:16	59:26	8	fail1
water	59:21	0:0	9	fail1
if	60:12	66:12	6	(! skip --)
cond	60:16	60:21	7	! skip --
op	60:16	0:0	8	!
water	60:17	0:0	8	skip
op	60:21	0:0	8	--
stmts	60:25	66:12	7	
water	60:25	0:0	8	{
water	61:16	0:0	8	r
op	61:18	0:0	8	=
call	61:20	61:92	8	IMoniker_BindToObject
arg	61:42	61:43	9	m
water	61:42	0:0	10	m
arg	61:45	61:46	9	0
water	61:45	0:0	10	0
arg	61:48	61:49	9	0
water	61:48	0:0	10	0
arg	61:51	61:67	9	&IID_IBaseFilter
op	61:51	0:0	10	&
water	61:52	0:0	10	IID_IBaseFilter
arg	61:69	61:92	9	(void*)&device_filter
water	61:69	0:0	10	(
water	61:70	0:0	10	void
op	61:75	0:0	10	*
water	61:76	0:0	10	)
op	61:78	0:0	10	&
water	61:79	0:0	10	device_filter
water	61:93	0:0	8	;
if	62:16	65:16	8	(r != S_OK)
cond	62:20	62:25	9	r != S_OK
water	62:20	0:0	10	r
op	62:22	0:0	10	!=
water	62:25	0:0	10	S_OK
stmts	62:31	65:16	9	
water	62:31	0:0	10	{
call	63:20	63:94	10	av_log
arg	63:27	63:32	11	avctx
water	63:27	0:0	12	avctx
arg	63:34	63:46	11	AV_LOG_ERROR
water	63:34	0:0	12	AV_LOG_ERROR
arg	63:48	63:81	11	"Unable to BindToObject for %s\n"
water	63:48	0:0	12	"Unable to BindToObject for %s\n"
arg	63:83	63:94	11	device_name
water	63:83	0:0	12	device_name
water	63:95	0:0	10	;
goto	64:20	64:30	10	fail1
water	64:25	0:0	11	fail1
water	65:16	0:0	10	}
water	66:12	0:0	8	}
water	67:8	0:0	6	}
else	67:10	70:8	4
stmts	67:15	70:8	5	
water	67:15	0:0	6	{
call	68:12	68:65	6	av_log
arg	68:19	68:24	7	avctx
water	68:19	0:0	8	avctx
arg	68:26	68:37	7	AV_LOG_INFO
water	68:26	0:0	8	AV_LOG_INFO
arg	68:39	68:50	7	" \"%s\"\n"
water	68:39	0:0	8	" \"%s\"\n"
arg	68:52	68:65	7	friendly_name
water	68:52	0:0	8	friendly_name
water	68:66	0:0	6	;
call	69:12	69:83	6	av_log
arg	69:19	69:24	7	avctx
water	69:19	0:0	8	avctx
arg	69:26	69:37	7	AV_LOG_INFO
water	69:26	0:0	8	AV_LOG_INFO
arg	69:39	69:70	7	"    Alternative name \"%s\"\n"
water	69:39	0:0	8	"    Alternative name \"%s\"\n"
arg	69:72	69:83	7	unique_name
water	69:72	0:0	8	unique_name
water	69:84	0:0	6	;
water	70:8	0:0	6	}
label	71:0	71:5	4	fail1 :
if	72:8	73:43	4	(olestr && co_malloc)
cond	72:12	72:22	5	olestr && co_malloc
water	72:12	0:0	6	olestr
op	72:19	0:0	6	&&
water	72:22	0:0	6	co_malloc
stmts	73:12	73:43	5	
call	73:12	73:42	6	IMalloc_Free
arg	73:25	73:34	7	co_malloc
water	73:25	0:0	8	co_malloc
arg	73:36	73:42	7	olestr
water	73:36	0:0	8	olestr
water	73:43	0:0	6	;
if	74:8	75:38	4	(bind_ctx)
cond	74:12	74:12	5	bind_ctx
water	74:12	0:0	6	bind_ctx
stmts	75:12	75:38	5	
call	75:12	75:37	6	IBindCtx_Release
arg	75:29	75:37	7	bind_ctx
water	75:29	0:0	8	bind_ctx
water	75:38	0:0	6	;
call	76:8	76:29	4	av_free
arg	76:16	76:29	5	friendly_name
water	76:16	0:0	6	friendly_name
water	76:30	0:0	4	;
call	77:8	77:27	4	av_free
arg	77:16	77:27	5	unique_name
water	77:16	0:0	6	unique_name
water	77:28	0:0	4	;
if	78:8	79:37	4	(bag)
cond	78:12	78:12	5	bag
water	78:12	0:0	6	bag
stmts	79:12	79:37	5	
call	79:12	79:36	6	IPropertyBag_Release
arg	79:33	79:36	7	bag
water	79:33	0:0	8	bag
water	79:37	0:0	6	;
call	80:8	80:26	4	IMoniker_Release
arg	80:25	80:26	5	m
water	80:25	0:0	6	m
water	80:27	0:0	4	;
water	81:4	0:0	4	}
call	82:4	82:34	2	IEnumMoniker_Release
arg	82:25	82:34	3	classenum
water	82:25	0:0	4	classenum
water	82:35	0:0	2	;
if	83:4	90:4	2	(pfilter)
cond	83:8	83:8	3	pfilter
water	83:8	0:0	4	pfilter
stmts	83:17	90:4	3	
water	83:17	0:0	4	{
if	84:8	88:8	4	(! device_filter)
cond	84:12	84:13	5	! device_filter
op	84:12	0:0	6	!
water	84:13	0:0	6	device_filter
stmts	84:28	88:8	5	
water	84:28	0:0	6	{
call	85:12	86:59	6	av_log
arg	85:19	85:24	7	avctx
water	85:19	0:0	8	avctx
arg	85:26	85:38	7	AV_LOG_ERROR
water	85:26	0:0	8	AV_LOG_ERROR
arg	85:40	85:116	7	"Could not find %s device with name [%s] among source devices of type %s.\n"
water	85:40	0:0	8	"Could not find %s device with name [%s] among source devices of type %s.\n"
arg	86:19	86:30	7	devtypename
water	86:19	0:0	8	devtypename
arg	86:32	86:43	7	device_name
water	86:32	0:0	8	device_name
arg	86:45	86:59	7	sourcetypename
water	86:45	0:0	8	sourcetypename
water	86:60	0:0	6	;
return	87:12	87:31	6	AVERROR(EIO)
call	87:19	87:30	7	AVERROR
arg	87:27	87:30	8	EIO
water	87:27	0:0	9	EIO
water	88:8	0:0	6	}
op	89:8	0:0	4	*
water	89:9	0:0	4	pfilter
op	89:17	0:0	4	=
water	89:19	0:0	4	device_filter
water	89:32	0:0	4	;
water	90:4	0:0	4	}
return	91:4	91:12	2	0
water	91:11	0:0	3	0
