func	1:0	19:0	0	AVInteger	av_mod_i
params	1:18	0:0	1	
param	1:19	1:34	2	AVInteger *	quot
param	1:36	1:47	2	AVInteger	a
param	1:49	1:60	2	AVInteger	b
stmnts	0:0	18:12	1	
decl	2:4	2:38	2	int	i
op	2:9	0:0	2	=
call	2:11	2:22	3	av_log2_i
arg	2:21	2:22	4	a
water	2:21	0:0	5	a
op	2:24	0:0	2	-
call	2:26	2:37	3	av_log2_i
arg	2:36	2:37	4	b
water	2:36	0:0	5	b
decl	3:4	3:23	2	AVInteger	quot_temp
if	4:4	4:31	2	(! quot)
cond	4:7	4:8	3	! quot
op	4:7	0:0	4	!
water	4:8	0:0	4	quot
stmts	4:14	4:31	3	
water	4:14	0:0	4	quot
op	4:19	0:0	4	=
op	4:21	0:0	4	&
water	4:22	0:0	4	quot_temp
water	4:31	0:0	4	;
call	5:4	5:91	2	av_assert2
arg	5:15	5:91	3	(int16_t)a.v[AV_INTEGER_SIZE-1]>=0&&(int16_t)b.v[AV_INTEGER_SIZE-1]>=0
water	5:15	0:0	4	(
water	5:16	0:0	4	int16_t
water	5:23	0:0	4	)
water	5:24	0:0	4	a
op	5:25	0:0	4	.
water	5:26	0:0	4	v
op	5:27	0:0	4	[
water	5:28	0:0	4	AV_INTEGER_SIZE
op	5:43	0:0	4	-
water	5:44	0:0	4	1
op	5:45	0:0	4	]
op	5:47	0:0	4	>=
water	5:50	0:0	4	0
op	5:52	0:0	4	&&
water	5:55	0:0	4	(
water	5:56	0:0	4	int16_t
water	5:63	0:0	4	)
water	5:64	0:0	4	b
op	5:65	0:0	4	.
water	5:66	0:0	4	v
op	5:67	0:0	4	[
water	5:68	0:0	4	AV_INTEGER_SIZE
op	5:83	0:0	4	-
water	5:84	0:0	4	1
op	5:85	0:0	4	]
op	5:87	0:0	4	>=
water	5:90	0:0	4	0
water	5:92	0:0	2	;
call	6:4	6:30	2	av_assert2
arg	6:15	6:30	3	av_log2_i(b)>=0
call	6:15	6:26	4	av_log2_i
arg	6:25	6:26	5	b
water	6:25	0:0	6	b
op	6:27	0:0	4	>=
water	6:29	0:0	4	0
water	6:31	0:0	2	;
if	7:4	8:26	2	(i > 0)
cond	7:7	7:11	3	i > 0
water	7:7	0:0	4	i
op	7:9	0:0	4	>
water	7:11	0:0	4	0
stmts	8:8	8:26	3	
water	8:8	0:0	4	b
op	8:9	0:0	4	=
call	8:11	8:25	4	av_shr_i
arg	8:20	8:21	5	b
water	8:20	0:0	6	b
arg	8:23	8:25	5	-i
op	8:23	0:0	6	-
water	8:24	0:0	6	i
water	8:26	0:0	4	;
call	9:4	9:37	2	memset
arg	9:11	9:15	3	quot
water	9:11	0:0	4	quot
arg	9:17	9:18	3	0
water	9:17	0:0	4	0
arg	9:20	9:37	3	sizeof(AVInteger)
op	9:20	0:0	4	sizeof
water	9:26	0:0	4	(
water	9:27	0:0	4	AVInteger
water	9:36	0:0	4	)
water	9:38	0:0	2	;
while	10:4	17:4	2	(i -- >= 0)
cond	10:10	10:17	3	i -- >= 0
water	10:10	0:0	4	i
op	10:11	0:0	4	--
op	10:14	0:0	4	>=
water	10:17	0:0	4	0
stmts	10:19	17:4	3	
water	10:19	0:0	4	{
op	11:8	0:0	4	*
water	11:9	0:0	4	quot
op	11:13	0:0	4	=
call	11:15	11:33	4	av_shr_i
arg	11:24	11:29	5	*quot
op	11:24	0:0	6	*
water	11:25	0:0	6	quot
arg	11:31	11:33	5	-1
op	11:31	0:0	6	-
water	11:32	0:0	6	1
water	11:34	0:0	4	;
if	12:8	15:8	4	(av_cmp_i (a ,b ) >= 0)
cond	12:11	12:29	5	av_cmp_i (a ,b ) >= 0
call	12:11	12:24	6	av_cmp_i
arg	12:20	12:21	7	a
water	12:20	0:0	8	a
arg	12:23	12:24	7	b
water	12:23	0:0	8	b
op	12:26	0:0	6	>=
water	12:29	0:0	6	0
stmts	12:31	15:8	5	
water	12:31	0:0	6	{
water	13:12	0:0	6	a
op	13:13	0:0	6	=
call	13:15	13:28	6	av_sub_i
arg	13:24	13:25	7	a
water	13:24	0:0	8	a
arg	13:27	13:28	7	b
water	13:27	0:0	8	b
water	13:29	0:0	6	;
water	14:12	0:0	6	quot
op	14:16	0:0	6	->
water	14:18	0:0	6	v
op	14:19	0:0	6	[
water	14:20	0:0	6	0
op	14:21	0:0	6	]
op	14:23	0:0	6	+=
water	14:26	0:0	6	1
water	14:27	0:0	6	;
water	15:8	0:0	6	}
water	16:8	0:0	4	b
op	16:9	0:0	4	=
call	16:11	16:24	4	av_shr_i
arg	16:20	16:21	5	b
water	16:20	0:0	6	b
arg	16:23	16:24	5	1
water	16:23	0:0	6	1
water	16:25	0:0	4	;
water	17:4	0:0	4	}
return	18:4	18:12	2	a
water	18:11	0:0	3	a
