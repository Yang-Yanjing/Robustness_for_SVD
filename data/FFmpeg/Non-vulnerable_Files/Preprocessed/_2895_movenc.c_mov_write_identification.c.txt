func	1:0	24:0	0	static int	mov_write_identification
params	1:35	0:0	1	
param	1:36	1:51	2	AVIOContext *	pb
param	1:53	1:71	2	AVFormatContext *	s
stmnts	0:0	23:12	1	
decl	3:4	3:37	2	MOVMuxContext	*mov
op	3:23	0:0	2	=
water	3:25	0:0	2	s
op	3:26	0:0	2	->
water	3:28	0:0	2	priv_data
decl	4:4	4:9	2	int	i
call	5:4	5:27	2	mov_write_ftyp_tag
arg	5:23	5:25	3	pb
water	5:23	0:0	4	pb
arg	5:26	5:27	3	s
water	5:26	0:0	4	s
water	5:28	0:0	2	;
if	6:4	22:4	2	(mov -> mode == MODE_PSP)
cond	6:8	6:21	3	mov -> mode == MODE_PSP
water	6:8	0:0	4	mov
op	6:11	0:0	4	->
water	6:13	0:0	4	mode
op	6:18	0:0	4	==
water	6:21	0:0	4	MODE_PSP
stmts	6:31	22:4	3	
water	6:31	0:0	4	{
decl	7:8	7:76	4	int	video_streams_nb
op	7:29	0:0	4	=
water	7:31	0:0	4	0
water	7:32	0:0	4	,
decl	7:8	7:76	4	int	audio_streams_nb
op	7:51	0:0	4	=
water	7:53	0:0	4	0
water	7:54	0:0	4	,
decl	7:8	7:76	4	int	other_streams_nb
op	7:73	0:0	4	=
water	7:75	0:0	4	0
for	8:8	16:12	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	8:13	8:18	5	i = 0 ;
water	8:13	0:0	6	i
op	8:15	0:0	6	=
water	8:17	0:0	6	0
water	8:18	0:0	6	;
cond	8:20	8:27	5	i < s -> nb_streams
water	8:20	0:0	6	i
op	8:22	0:0	6	<
water	8:24	0:0	6	s
op	8:25	0:0	6	->
water	8:27	0:0	6	nb_streams
forexpr	8:39	8:40	5	i ++
water	8:39	0:0	6	i
op	8:40	0:0	6	++
stmts	8:44	16:12	5	
water	8:44	0:0	6	{
decl	9:12	9:40	6	AVStream	*st
op	9:25	0:0	6	=
water	9:27	0:0	6	s
op	9:28	0:0	6	->
water	9:30	0:0	6	streams
op	9:37	0:0	6	[
water	9:38	0:0	6	i
op	9:39	0:0	6	]
if	10:12	11:34	6	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	10:16	10:41	7	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	10:16	0:0	8	st
op	10:18	0:0	8	->
water	10:20	0:0	8	codec
op	10:25	0:0	8	->
water	10:27	0:0	8	codec_type
op	10:38	0:0	8	==
water	10:41	0:0	8	AVMEDIA_TYPE_VIDEO
stmts	11:16	11:34	7	
water	11:16	0:0	8	video_streams_nb
op	11:32	0:0	8	++
water	11:34	0:0	8	;
else	12:12	13:34	6
stmts	12:17	13:34	7	
if	12:17	13:34	8	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	12:21	12:46	9	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	12:21	0:0	10	st
op	12:23	0:0	10	->
water	12:25	0:0	10	codec
op	12:30	0:0	10	->
water	12:32	0:0	10	codec_type
op	12:43	0:0	10	==
water	12:46	0:0	10	AVMEDIA_TYPE_AUDIO
stmts	13:16	13:34	9	
water	13:16	0:0	10	audio_streams_nb
op	13:32	0:0	10	++
water	13:34	0:0	10	;
else	14:12	15:34	6
stmts	15:16	15:34	7	
water	15:16	0:0	8	other_streams_nb
op	15:32	0:0	8	++
water	15:34	0:0	8	;
water	16:12	0:0	6	}
if	17:8	20:8	4	(video_streams_nb != 1 || audio_streams_nb != 1 || other_streams_nb)
cond	17:12	17:62	5	video_streams_nb != 1 || audio_streams_nb != 1 || other_streams_nb
water	17:12	0:0	6	video_streams_nb
op	17:29	0:0	6	!=
water	17:32	0:0	6	1
op	17:34	0:0	6	||
water	17:37	0:0	6	audio_streams_nb
op	17:54	0:0	6	!=
water	17:57	0:0	6	1
op	17:59	0:0	6	||
water	17:62	0:0	6	other_streams_nb
stmts	17:80	20:8	5	
water	17:80	0:0	6	{
call	18:12	18:84	6	av_log
arg	18:19	18:20	7	s
water	18:19	0:0	8	s
arg	18:22	18:34	7	AV_LOG_ERROR
water	18:22	0:0	8	AV_LOG_ERROR
arg	18:36	18:84	7	"PSP mode need one video and one audio stream\n"
water	18:36	0:0	8	"PSP mode need one video and one audio stream\n"
water	18:85	0:0	6	;
return	19:12	19:34	6	AVERROR(EINVAL)
call	19:19	19:33	7	AVERROR
arg	19:27	19:33	8	EINVAL
water	19:27	0:0	9	EINVAL
water	20:8	0:0	6	}
call	21:8	21:36	4	mov_write_uuidprof_tag
arg	21:31	21:33	5	pb
water	21:31	0:0	6	pb
arg	21:35	21:36	5	s
water	21:35	0:0	6	s
water	21:37	0:0	4	;
water	22:4	0:0	4	}
return	23:4	23:12	2	0
water	23:11	0:0	3	0
