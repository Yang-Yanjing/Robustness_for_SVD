func	1:15	38:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	37:12	1	
decl	3:4	3:37	2	MergePlanesContext	*s
op	3:26	0:0	2	=
water	3:28	0:0	2	ctx
op	3:31	0:0	2	->
water	3:33	0:0	2	priv
decl	4:4	4:26	2	int64_t	m
op	4:14	0:0	2	=
water	4:16	0:0	2	s
op	4:17	0:0	2	->
water	4:19	0:0	2	mapping
decl	5:4	5:14	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:14	2	int	ret
water	6:4	0:0	2	s
op	6:5	0:0	2	->
water	6:7	0:0	2	outdesc
op	6:15	0:0	2	=
call	6:17	6:47	2	av_pix_fmt_desc_get
arg	6:37	6:47	3	s->out_fmt
water	6:37	0:0	4	s
op	6:38	0:0	4	->
water	6:40	0:0	4	out_fmt
water	6:48	0:0	2	;
if	7:4	11:4	2	(! ( s -> outdesc -> flags & AV_PIX_FMT_FLAG_PLANAR ) || s -> outdesc -> nb_components < 2)
cond	7:8	8:36	3	! ( s -> outdesc -> flags & AV_PIX_FMT_FLAG_PLANAR ) || s -> outdesc -> nb_components < 2
op	7:8	0:0	4	!
water	7:9	0:0	4	(
water	7:10	0:0	4	s
op	7:11	0:0	4	->
water	7:13	0:0	4	outdesc
op	7:20	0:0	4	->
water	7:22	0:0	4	flags
op	7:28	0:0	4	&
water	7:30	0:0	4	AV_PIX_FMT_FLAG_PLANAR
water	7:52	0:0	4	)
op	7:54	0:0	4	||
water	8:8	0:0	4	s
op	8:9	0:0	4	->
water	8:11	0:0	4	outdesc
op	8:18	0:0	4	->
water	8:20	0:0	4	nb_components
op	8:34	0:0	4	<
water	8:36	0:0	4	2
stmts	8:39	11:4	3	
water	8:39	0:0	4	{
call	9:8	9:101	4	av_log
arg	9:15	9:18	5	ctx
water	9:15	0:0	6	ctx
arg	9:20	9:32	5	AV_LOG_ERROR
water	9:20	0:0	6	AV_LOG_ERROR
arg	9:34	9:101	5	"Only planar formats with more than one component are supported.\n"
water	9:34	0:0	6	"Only planar formats with more than one component are supported.\n"
water	9:102	0:0	4	;
return	10:8	10:30	4	AVERROR(EINVAL)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	EINVAL
water	10:23	0:0	7	EINVAL
water	11:4	0:0	4	}
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	nb_planes
op	12:17	0:0	2	=
call	12:19	12:53	2	av_pix_fmt_count_planes
arg	12:43	12:53	3	s->out_fmt
water	12:43	0:0	4	s
op	12:44	0:0	4	->
water	12:46	0:0	4	out_fmt
water	12:54	0:0	2	;
for	13:4	23:4	2	(i = s -> nb_planes - 1 ;i >= 0;i --)
forinit	13:9	13:29	3	i = s -> nb_planes - 1 ;
water	13:9	0:0	4	i
op	13:11	0:0	4	=
water	13:13	0:0	4	s
op	13:14	0:0	4	->
water	13:16	0:0	4	nb_planes
op	13:26	0:0	4	-
water	13:28	0:0	4	1
water	13:29	0:0	4	;
cond	13:31	13:36	3	i >= 0
water	13:31	0:0	4	i
op	13:33	0:0	4	>=
water	13:36	0:0	4	0
forexpr	13:39	13:40	3	i --
water	13:39	0:0	4	i
op	13:40	0:0	4	--
stmts	13:44	23:4	3	
water	13:44	0:0	4	{
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	map
op	14:14	0:0	4	[
water	14:15	0:0	4	i
op	14:16	0:0	4	]
op	14:17	0:0	4	[
water	14:18	0:0	4	0
op	14:19	0:0	4	]
op	14:21	0:0	4	=
water	14:23	0:0	4	m
op	14:25	0:0	4	&
water	14:27	0:0	4	0
water	14:28	0:0	4	xf
water	14:30	0:0	4	;
water	15:8	0:0	4	m
op	15:10	0:0	4	>>=
water	15:14	0:0	4	4
water	15:15	0:0	4	;
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	map
op	16:14	0:0	4	[
water	16:15	0:0	4	i
op	16:16	0:0	4	]
op	16:17	0:0	4	[
water	16:18	0:0	4	1
op	16:19	0:0	4	]
op	16:21	0:0	4	=
water	16:23	0:0	4	m
op	16:25	0:0	4	&
water	16:27	0:0	4	0
water	16:28	0:0	4	xf
water	16:30	0:0	4	;
water	17:8	0:0	4	m
op	17:10	0:0	4	>>=
water	17:14	0:0	4	4
water	17:15	0:0	4	;
if	18:8	21:8	4	(s -> map [ i ] [ 0 ] > 3 || s -> map [ i ] [ 1 ] > 3)
cond	18:12	18:47	5	s -> map [ i ] [ 0 ] > 3 || s -> map [ i ] [ 1 ] > 3
water	18:12	0:0	6	s
op	18:13	0:0	6	->
water	18:15	0:0	6	map
op	18:18	0:0	6	[
water	18:19	0:0	6	i
op	18:20	0:0	6	]
op	18:21	0:0	6	[
water	18:22	0:0	6	0
op	18:23	0:0	6	]
op	18:25	0:0	6	>
water	18:27	0:0	6	3
op	18:29	0:0	6	||
water	18:32	0:0	6	s
op	18:33	0:0	6	->
water	18:35	0:0	6	map
op	18:38	0:0	6	[
water	18:39	0:0	6	i
op	18:40	0:0	6	]
op	18:41	0:0	6	[
water	18:42	0:0	6	1
op	18:43	0:0	6	]
op	18:45	0:0	6	>
water	18:47	0:0	6	3
stmts	18:50	21:8	5	
water	18:50	0:0	6	{
call	19:12	19:94	6	av_log
arg	19:19	19:22	7	ctx
water	19:19	0:0	8	ctx
arg	19:24	19:36	7	AV_LOG_ERROR
water	19:24	0:0	8	AV_LOG_ERROR
arg	19:38	19:94	7	"Mapping with out of range input and/or plane number.\n"
water	19:38	0:0	8	"Mapping with out of range input and/or plane number.\n"
water	19:95	0:0	6	;
return	20:12	20:34	6	AVERROR(EINVAL)
call	20:19	20:33	7	AVERROR
arg	20:27	20:33	8	EINVAL
water	20:27	0:0	9	EINVAL
water	21:8	0:0	6	}
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	nb_inputs
op	22:21	0:0	4	=
call	22:23	22:59	4	FFMAX
arg	22:29	22:41	5	s->nb_inputs
water	22:29	0:0	6	s
op	22:30	0:0	6	->
water	22:32	0:0	6	nb_inputs
arg	22:43	22:59	5	s->map[i][1]+1
water	22:43	0:0	6	s
op	22:44	0:0	6	->
water	22:46	0:0	6	map
op	22:49	0:0	6	[
water	22:50	0:0	6	i
op	22:51	0:0	6	]
op	22:52	0:0	6	[
water	22:53	0:0	6	1
op	22:54	0:0	6	]
op	22:56	0:0	6	+
water	22:58	0:0	6	1
water	22:60	0:0	4	;
water	23:4	0:0	4	}
call	24:4	24:48	2	av_assert0
arg	24:15	24:48	3	s->nb_inputs&&s->nb_inputs<=4
water	24:15	0:0	4	s
op	24:16	0:0	4	->
water	24:18	0:0	4	nb_inputs
op	24:28	0:0	4	&&
water	24:31	0:0	4	s
op	24:32	0:0	4	->
water	24:34	0:0	4	nb_inputs
op	24:44	0:0	4	<=
water	24:47	0:0	4	4
water	24:49	0:0	2	;
for	25:4	36:4	2	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	25:9	25:14	3	i = 0 ;
water	25:9	0:0	4	i
op	25:11	0:0	4	=
water	25:13	0:0	4	0
water	25:14	0:0	4	;
cond	25:16	25:23	3	i < s -> nb_inputs
water	25:16	0:0	4	i
op	25:18	0:0	4	<
water	25:20	0:0	4	s
op	25:21	0:0	4	->
water	25:23	0:0	4	nb_inputs
forexpr	25:34	25:35	3	i ++
water	25:34	0:0	4	i
op	25:35	0:0	4	++
stmts	25:39	36:4	3	
water	25:39	0:0	4	{
decl	26:8	26:31	4	AVFilterPad	pad
op	26:24	0:0	4	=
water	26:26	0:0	4	{
water	26:28	0:0	4	0
water	26:30	0:0	4	}
water	27:8	0:0	4	pad
op	27:11	0:0	4	.
water	27:12	0:0	4	type
op	27:17	0:0	4	=
water	27:19	0:0	4	AVMEDIA_TYPE_VIDEO
water	27:37	0:0	4	;
water	28:8	0:0	4	pad
op	28:11	0:0	4	.
water	28:12	0:0	4	name
op	28:17	0:0	4	=
call	28:19	28:40	4	av_asprintf
arg	28:31	28:37	5	"in%d"
water	28:31	0:0	6	"in%d"
arg	28:39	28:40	5	i
water	28:39	0:0	6	i
water	28:41	0:0	4	;
if	29:8	30:34	4	(! pad . name)
cond	29:12	29:17	5	! pad . name
op	29:12	0:0	6	!
water	29:13	0:0	6	pad
op	29:16	0:0	6	.
water	29:17	0:0	6	name
stmts	30:12	30:34	5	
return	30:12	30:34	6	AVERROR(ENOMEM)
call	30:19	30:33	7	AVERROR
arg	30:27	30:33	8	ENOMEM
water	30:27	0:0	9	ENOMEM
water	31:8	0:0	4	pad
op	31:11	0:0	4	.
water	31:12	0:0	4	filter_frame
op	31:25	0:0	4	=
water	31:27	0:0	4	filter_frame
water	31:39	0:0	4	;
if	32:8	35:8	4	(( ret =ff_insert_inpad (ctx ,i ,& pad ) ) < 0)
cond	32:12	32:52	5	( ret =ff_insert_inpad (ctx ,i ,& pad ) ) < 0
water	32:12	0:0	6	(
water	32:13	0:0	6	ret
op	32:17	0:0	6	=
call	32:19	32:47	6	ff_insert_inpad
arg	32:35	32:38	7	ctx
water	32:35	0:0	8	ctx
arg	32:40	32:41	7	i
water	32:40	0:0	8	i
arg	32:43	32:47	7	&pad
op	32:43	0:0	8	&
water	32:44	0:0	8	pad
water	32:48	0:0	6	)
op	32:50	0:0	6	<
water	32:52	0:0	6	0
stmts	32:54	35:8	5	
water	32:54	0:0	6	{
call	33:12	33:30	6	av_freep
arg	33:21	33:30	7	&pad.name
op	33:21	0:0	8	&
water	33:22	0:0	8	pad
op	33:25	0:0	8	.
water	33:26	0:0	8	name
water	33:31	0:0	6	;
return	34:12	34:22	6	ret
water	34:19	0:0	7	ret
water	35:8	0:0	6	}
water	36:4	0:0	4	}
return	37:4	37:12	2	0
water	37:11	0:0	3	0
