func	1:15	50:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	49:12	1	
decl	3:4	3:39	2	SendCmdContext	*sendcmd
op	3:28	0:0	2	=
water	3:30	0:0	2	ctx
op	3:33	0:0	2	->
water	3:35	0:0	2	priv
decl	4:4	4:17	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:17	2	int	i
water	4:14	0:0	2	,
decl	4:4	4:17	2	int	j
if	5:4	9:4	2	(( ! ! sendcmd -> commands_filename + ! ! sendcmd -> commands_str ) != 1)
cond	5:8	5:68	3	( ! ! sendcmd -> commands_filename + ! ! sendcmd -> commands_str ) != 1
water	5:8	0:0	4	(
op	5:9	0:0	4	!
op	5:10	0:0	4	!
water	5:11	0:0	4	sendcmd
op	5:18	0:0	4	->
water	5:20	0:0	4	commands_filename
op	5:38	0:0	4	+
op	5:40	0:0	4	!
op	5:41	0:0	4	!
water	5:42	0:0	4	sendcmd
op	5:49	0:0	4	->
water	5:51	0:0	4	commands_str
water	5:63	0:0	4	)
op	5:65	0:0	4	!=
water	5:68	0:0	4	1
stmts	5:71	9:4	3	
water	5:71	0:0	4	{
call	6:8	7:89	4	av_log
arg	6:15	6:18	5	ctx
water	6:15	0:0	6	ctx
arg	6:20	6:32	5	AV_LOG_ERROR
water	6:20	0:0	6	AV_LOG_ERROR
arg	7:15	7:89	5	"One and only one of the filename or commands options must be specified\n"
water	7:15	0:0	6	"One and only one of the filename or commands options must be specified\n"
water	7:90	0:0	4	;
return	8:8	8:30	4	AVERROR(EINVAL)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	EINVAL
water	8:23	0:0	7	EINVAL
water	9:4	0:0	4	}
if	10:4	27:4	2	(sendcmd -> commands_filename)
cond	10:8	10:17	3	sendcmd -> commands_filename
water	10:8	0:0	4	sendcmd
op	10:15	0:0	4	->
water	10:17	0:0	4	commands_filename
stmts	10:36	27:4	3	
water	10:36	0:0	4	{
decl	11:8	11:31	4	uint8_t	*file_buf
water	11:25	0:0	4	,
decl	11:8	11:31	4	uint8_t	*buf
decl	12:8	12:27	4	size_t	file_bufsize
water	13:8	0:0	4	ret
op	13:12	0:0	4	=
call	13:14	14:58	4	av_file_map
arg	13:26	13:52	5	sendcmd->commands_filename
water	13:26	0:0	6	sendcmd
op	13:33	0:0	6	->
water	13:35	0:0	6	commands_filename
arg	14:26	14:35	5	&file_buf
op	14:26	0:0	6	&
water	14:27	0:0	6	file_buf
arg	14:37	14:50	5	&file_bufsize
op	14:37	0:0	6	&
water	14:38	0:0	6	file_bufsize
arg	14:52	14:53	5	0
water	14:52	0:0	6	0
arg	14:55	14:58	5	ctx
water	14:55	0:0	6	ctx
water	14:59	0:0	4	;
if	15:8	16:22	4	(ret < 0)
cond	15:12	15:18	5	ret < 0
water	15:12	0:0	6	ret
op	15:16	0:0	6	<
water	15:18	0:0	6	0
stmts	16:12	16:22	5	
return	16:12	16:22	6	ret
water	16:19	0:0	7	ret
water	18:8	0:0	4	buf
op	18:12	0:0	4	=
call	18:14	18:40	4	av_malloc
arg	18:24	18:40	5	file_bufsize+1
water	18:24	0:0	6	file_bufsize
op	18:37	0:0	6	+
water	18:39	0:0	6	1
water	18:41	0:0	4	;
if	19:8	22:8	4	(! buf)
cond	19:12	19:13	5	! buf
op	19:12	0:0	6	!
water	19:13	0:0	6	buf
stmts	19:18	22:8	5	
water	19:18	0:0	6	{
call	20:12	20:48	6	av_file_unmap
arg	20:26	20:34	7	file_buf
water	20:26	0:0	8	file_buf
arg	20:36	20:48	7	file_bufsize
water	20:36	0:0	8	file_bufsize
water	20:49	0:0	6	;
return	21:12	21:34	6	AVERROR(ENOMEM)
call	21:19	21:33	7	AVERROR
arg	21:27	21:33	8	ENOMEM
water	21:27	0:0	9	ENOMEM
water	22:8	0:0	6	}
call	23:8	23:42	4	memcpy
arg	23:15	23:18	5	buf
water	23:15	0:0	6	buf
arg	23:20	23:28	5	file_buf
water	23:20	0:0	6	file_buf
arg	23:30	23:42	5	file_bufsize
water	23:30	0:0	6	file_bufsize
water	23:43	0:0	4	;
water	24:8	0:0	4	buf
op	24:11	0:0	4	[
water	24:12	0:0	4	file_bufsize
op	24:24	0:0	4	]
op	24:26	0:0	4	=
water	24:28	0:0	4	0
water	24:29	0:0	4	;
call	25:8	25:44	4	av_file_unmap
arg	25:22	25:30	5	file_buf
water	25:22	0:0	6	file_buf
arg	25:32	25:44	5	file_bufsize
water	25:32	0:0	6	file_bufsize
water	25:45	0:0	4	;
water	26:8	0:0	4	sendcmd
op	26:15	0:0	4	->
water	26:17	0:0	4	commands_str
op	26:30	0:0	4	=
water	26:32	0:0	4	buf
water	26:35	0:0	4	;
water	27:4	0:0	4	}
if	28:4	30:18	2	(( ret =parse_intervals (& sendcmd -> intervals ,& sendcmd -> nb_intervals ,sendcmd -> commands_str ,ctx ) ) < 0)
cond	28:8	29:62	3	( ret =parse_intervals (& sendcmd -> intervals ,& sendcmd -> nb_intervals ,sendcmd -> commands_str ,ctx ) ) < 0
water	28:8	0:0	4	(
water	28:9	0:0	4	ret
op	28:13	0:0	4	=
call	28:15	29:57	4	parse_intervals
arg	28:31	28:50	5	&sendcmd->intervals
op	28:31	0:0	6	&
water	28:32	0:0	6	sendcmd
op	28:39	0:0	6	->
water	28:41	0:0	6	intervals
arg	28:52	28:74	5	&sendcmd->nb_intervals
op	28:52	0:0	6	&
water	28:53	0:0	6	sendcmd
op	28:60	0:0	6	->
water	28:62	0:0	6	nb_intervals
arg	29:31	29:52	5	sendcmd->commands_str
water	29:31	0:0	6	sendcmd
op	29:38	0:0	6	->
water	29:40	0:0	6	commands_str
arg	29:54	29:57	5	ctx
water	29:54	0:0	6	ctx
water	29:58	0:0	4	)
op	29:60	0:0	4	<
water	29:62	0:0	4	0
stmts	30:8	30:18	3	
return	30:8	30:18	4	ret
water	30:15	0:0	5	ret
if	31:4	34:4	2	(sendcmd -> nb_intervals == 0)
cond	31:8	31:33	3	sendcmd -> nb_intervals == 0
water	31:8	0:0	4	sendcmd
op	31:15	0:0	4	->
water	31:17	0:0	4	nb_intervals
op	31:30	0:0	4	==
water	31:33	0:0	4	0
stmts	31:36	34:4	3	
water	31:36	0:0	4	{
call	32:8	32:64	4	av_log
arg	32:15	32:18	5	ctx
water	32:15	0:0	6	ctx
arg	32:20	32:32	5	AV_LOG_ERROR
water	32:20	0:0	6	AV_LOG_ERROR
arg	32:34	32:64	5	"No commands were specified\n"
water	32:34	0:0	6	"No commands were specified\n"
water	32:65	0:0	4	;
return	33:8	33:30	4	AVERROR(EINVAL)
call	33:15	33:29	5	AVERROR
arg	33:23	33:29	6	EINVAL
water	33:23	0:0	7	EINVAL
water	34:4	0:0	4	}
call	35:4	35:84	2	qsort
arg	35:10	35:28	3	sendcmd->intervals
water	35:10	0:0	4	sendcmd
op	35:17	0:0	4	->
water	35:19	0:0	4	intervals
arg	35:30	35:51	3	sendcmd->nb_intervals
water	35:30	0:0	4	sendcmd
op	35:37	0:0	4	->
water	35:39	0:0	4	nb_intervals
arg	35:53	35:69	3	sizeof(Interval)
op	35:53	0:0	4	sizeof
water	35:59	0:0	4	(
water	35:60	0:0	4	Interval
water	35:68	0:0	4	)
arg	35:71	35:84	3	cmp_intervals
water	35:71	0:0	4	cmp_intervals
water	35:85	0:0	2	;
call	36:4	36:50	2	av_log
arg	36:11	36:14	3	ctx
water	36:11	0:0	4	ctx
arg	36:16	36:28	3	AV_LOG_DEBUG
water	36:16	0:0	4	AV_LOG_DEBUG
arg	36:30	36:50	3	"Parsed commands:\n"
water	36:30	0:0	4	"Parsed commands:\n"
water	36:51	0:0	2	;
for	37:4	48:4	2	(i = 0 ;i < sendcmd -> nb_intervals;i ++)
forinit	37:9	37:14	3	i = 0 ;
water	37:9	0:0	4	i
op	37:11	0:0	4	=
water	37:13	0:0	4	0
water	37:14	0:0	4	;
cond	37:16	37:29	3	i < sendcmd -> nb_intervals
water	37:16	0:0	4	i
op	37:18	0:0	4	<
water	37:20	0:0	4	sendcmd
op	37:27	0:0	4	->
water	37:29	0:0	4	nb_intervals
forexpr	37:43	37:44	3	i ++
water	37:43	0:0	4	i
op	37:44	0:0	4	++
stmts	37:48	48:4	3	
water	37:48	0:0	4	{
decl	38:8	38:21	4	AVBPrint	pbuf
decl	39:8	39:51	4	Interval	*interval
op	39:27	0:0	4	=
op	39:29	0:0	4	&
water	39:30	0:0	4	sendcmd
op	39:37	0:0	4	->
water	39:39	0:0	4	intervals
op	39:48	0:0	4	[
water	39:49	0:0	4	i
op	39:50	0:0	4	]
call	40:8	41:100	4	av_log
arg	40:15	40:18	5	ctx
water	40:15	0:0	6	ctx
arg	40:20	40:34	5	AV_LOG_VERBOSE
water	40:20	0:0	6	AV_LOG_VERBOSE
arg	40:36	40:74	5	"start_time:%f end_time:%f index:%d\n"
water	40:36	0:0	6	"start_time:%f end_time:%f index:%d\n"
arg	41:15	41:49	5	(double)interval->start_ts/1000000
water	41:15	0:0	6	(
water	41:16	0:0	6	double
water	41:22	0:0	6	)
water	41:23	0:0	6	interval
op	41:31	0:0	6	->
water	41:33	0:0	6	start_ts
op	41:41	0:0	6	/
water	41:42	0:0	6	1000000
arg	41:51	41:83	5	(double)interval->end_ts/1000000
water	41:51	0:0	6	(
water	41:52	0:0	6	double
water	41:58	0:0	6	)
water	41:59	0:0	6	interval
op	41:67	0:0	6	->
water	41:69	0:0	6	end_ts
op	41:75	0:0	6	/
water	41:76	0:0	6	1000000
arg	41:85	41:100	5	interval->index
water	41:85	0:0	6	interval
op	41:93	0:0	6	->
water	41:95	0:0	6	index
water	41:101	0:0	4	;
for	42:8	47:8	4	(j = 0 ;j < interval -> nb_commands;j ++)
forinit	42:13	42:18	5	j = 0 ;
water	42:13	0:0	6	j
op	42:15	0:0	6	=
water	42:17	0:0	6	0
water	42:18	0:0	6	;
cond	42:20	42:34	5	j < interval -> nb_commands
water	42:20	0:0	6	j
op	42:22	0:0	6	<
water	42:24	0:0	6	interval
op	42:32	0:0	6	->
water	42:34	0:0	6	nb_commands
forexpr	42:47	42:48	5	j ++
water	42:47	0:0	6	j
op	42:48	0:0	6	++
stmts	42:52	47:8	5	
water	42:52	0:0	6	{
decl	43:12	43:49	6	Command	*cmd
op	43:25	0:0	6	=
op	43:27	0:0	6	&
water	43:28	0:0	6	interval
op	43:36	0:0	6	->
water	43:38	0:0	6	commands
op	43:46	0:0	6	[
water	43:47	0:0	6	j
op	43:48	0:0	6	]
call	44:12	46:109	6	av_log
arg	44:19	44:22	7	ctx
water	44:19	0:0	8	ctx
arg	44:24	44:38	7	AV_LOG_VERBOSE
water	44:24	0:0	8	AV_LOG_VERBOSE
arg	45:19	45:68	7	"    [%s] target:%s command:%s arg:%s index:%d\n"
water	45:19	0:0	8	"    [%s] target:%s command:%s arg:%s index:%d\n"
arg	46:19	46:60	7	make_command_flags_str(&pbuf,cmd->flags)
call	46:19	46:59	8	make_command_flags_str
arg	46:42	46:47	9	&pbuf
op	46:42	0:0	10	&
water	46:43	0:0	10	pbuf
arg	46:49	46:59	9	cmd->flags
water	46:49	0:0	10	cmd
op	46:52	0:0	10	->
water	46:54	0:0	10	flags
arg	46:62	46:73	7	cmd->target
water	46:62	0:0	8	cmd
op	46:65	0:0	8	->
water	46:67	0:0	8	target
arg	46:75	46:87	7	cmd->command
water	46:75	0:0	8	cmd
op	46:78	0:0	8	->
water	46:80	0:0	8	command
arg	46:89	46:97	7	cmd->arg
water	46:89	0:0	8	cmd
op	46:92	0:0	8	->
water	46:94	0:0	8	arg
arg	46:99	46:109	7	cmd->index
water	46:99	0:0	8	cmd
op	46:102	0:0	8	->
water	46:104	0:0	8	index
water	46:110	0:0	6	;
water	47:8	0:0	6	}
water	48:4	0:0	4	}
return	49:4	49:12	2	0
water	49:11	0:0	3	0
