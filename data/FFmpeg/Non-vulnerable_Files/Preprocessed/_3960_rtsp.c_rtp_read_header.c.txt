func	1:0	75:0	0	static int	rtp_read_header
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
stmnts	0:0	74:14	1	
decl	3:4	3:42	2	uint8_t	recvbuf[RTP_MAX_PACKET_LENGTH]
decl	4:4	4:28	2	char	host[500]
water	4:18	0:0	2	,
decl	4:4	4:28	2	char	sdp[500]
decl	5:4	5:17	2	int	ret
water	5:11	0:0	2	,
decl	5:4	5:17	2	int	port
decl	6:4	6:25	2	URLContext	*in
op	6:19	0:0	2	=
water	6:21	0:0	2	NULL
decl	7:4	7:20	2	int	payload_type
decl	8:4	8:32	2	AVCodecContext	codec
op	8:25	0:0	2	=
water	8:27	0:0	2	{
water	8:29	0:0	2	0
water	8:31	0:0	2	}
decl	9:4	9:32	2	struct sockaddr_storage	addr
decl	10:4	10:18	2	AVIOContext	pb
decl	11:4	11:36	2	socklen_t	addrlen
op	11:22	0:0	2	=
op	11:24	0:0	2	sizeof
water	11:30	0:0	2	(
water	11:31	0:0	2	addr
water	11:35	0:0	2	)
decl	12:4	12:32	2	RTSPState	*rt
op	12:18	0:0	2	=
water	12:20	0:0	2	s
op	12:21	0:0	2	->
water	12:23	0:0	2	priv_data
if	13:4	14:27	2	(!ff_network_init ( ))
cond	13:8	13:25	3	!ff_network_init ( )
op	13:8	0:0	4	!
call	13:9	13:25	4	ff_network_init
stmts	14:8	14:27	3	
return	14:8	14:27	4	AVERROR(EIO)
call	14:15	14:26	5	AVERROR
arg	14:23	14:26	6	EIO
water	14:23	0:0	7	EIO
water	15:4	0:0	2	ret
op	15:8	0:0	2	=
call	15:10	16:49	2	ffurl_open
arg	15:21	15:24	3	&in
op	15:21	0:0	4	&
water	15:22	0:0	4	in
arg	15:26	15:37	3	s->filename
water	15:26	0:0	4	s
op	15:27	0:0	4	->
water	15:29	0:0	4	filename
arg	15:39	15:53	3	AVIO_FLAG_READ
water	15:39	0:0	4	AVIO_FLAG_READ
arg	16:21	16:43	3	&s->interrupt_callback
op	16:21	0:0	4	&
water	16:22	0:0	4	s
op	16:23	0:0	4	->
water	16:25	0:0	4	interrupt_callback
arg	16:45	16:49	3	NULL
water	16:45	0:0	4	NULL
water	16:50	0:0	2	;
if	17:4	18:17	2	(ret)
cond	17:8	17:8	3	ret
water	17:8	0:0	4	ret
stmts	18:8	18:17	3	
goto	18:8	18:17	4	fail
water	18:13	0:0	5	fail
while	19:4	38:4	2	(1)
cond	19:11	19:11	3	1
water	19:11	0:0	4	1
stmts	19:14	38:4	3	
water	19:14	0:0	4	{
water	20:8	0:0	4	ret
op	20:12	0:0	4	=
call	20:14	20:53	4	ffurl_read
arg	20:25	20:27	5	in
water	20:25	0:0	6	in
arg	20:29	20:36	5	recvbuf
water	20:29	0:0	6	recvbuf
arg	20:38	20:53	5	sizeof(recvbuf)
op	20:38	0:0	6	sizeof
water	20:44	0:0	6	(
water	20:45	0:0	6	recvbuf
water	20:52	0:0	6	)
water	20:54	0:0	4	;
if	21:8	22:20	4	(ret ==AVERROR (EAGAIN ))
cond	21:12	21:33	5	ret ==AVERROR (EAGAIN )
water	21:12	0:0	6	ret
op	21:16	0:0	6	==
call	21:19	21:33	6	AVERROR
arg	21:27	21:33	7	EAGAIN
water	21:27	0:0	8	EAGAIN
stmts	22:12	22:20	5	
continue	22:12	22:20	6	
if	23:8	24:21	4	(ret < 0)
cond	23:12	23:18	5	ret < 0
water	23:12	0:0	6	ret
op	23:16	0:0	6	<
water	23:18	0:0	6	0
stmts	24:12	24:21	5	
goto	24:12	24:21	6	fail
water	24:17	0:0	7	fail
if	25:8	28:8	4	(ret < 12)
cond	25:12	25:18	5	ret < 12
water	25:12	0:0	6	ret
op	25:16	0:0	6	<
water	25:18	0:0	6	12
stmts	25:22	28:8	5	
water	25:22	0:0	6	{
call	26:12	26:67	6	av_log
arg	26:19	26:20	7	s
water	26:19	0:0	8	s
arg	26:22	26:36	7	AV_LOG_WARNING
water	26:22	0:0	8	AV_LOG_WARNING
arg	26:38	26:67	7	"Received too short packet\n"
water	26:38	0:0	8	"Received too short packet\n"
water	26:68	0:0	6	;
continue	27:12	27:20	6	
water	28:8	0:0	6	}
if	29:8	33:8	4	(( recvbuf [ 0 ] & 0 xc0 ) != 0 x80)
cond	29:12	29:36	5	( recvbuf [ 0 ] & 0 xc0 ) != 0 x80
water	29:12	0:0	6	(
water	29:13	0:0	6	recvbuf
op	29:20	0:0	6	[
water	29:21	0:0	6	0
op	29:22	0:0	6	]
op	29:24	0:0	6	&
water	29:26	0:0	6	0
water	29:27	0:0	6	xc0
water	29:30	0:0	6	)
op	29:32	0:0	6	!=
water	29:35	0:0	6	0
water	29:36	0:0	6	x80
stmts	29:41	33:8	5	
water	29:41	0:0	6	{
call	30:12	31:50	6	av_log
arg	30:19	30:20	7	s
water	30:19	0:0	8	s
arg	30:22	30:36	7	AV_LOG_WARNING
water	30:22	0:0	8	AV_LOG_WARNING
arg	30:38	31:50	7	"Unsupported RTP version packet ""received\n"
water	30:38	0:0	8	"Unsupported RTP version packet "
water	31:38	0:0	8	"received\n"
water	31:51	0:0	6	;
continue	32:12	32:20	6	
water	33:8	0:0	6	}
if	34:8	35:20	4	(RTP_PT_IS_RTCP (recvbuf [ 1 ] ))
cond	34:12	34:37	5	RTP_PT_IS_RTCP (recvbuf [ 1 ] )
call	34:12	34:37	6	RTP_PT_IS_RTCP
arg	34:27	34:37	7	recvbuf[1]
water	34:27	0:0	8	recvbuf
op	34:34	0:0	8	[
water	34:35	0:0	8	1
op	34:36	0:0	8	]
stmts	35:12	35:20	5	
continue	35:12	35:20	6	
water	36:8	0:0	4	payload_type
op	36:21	0:0	4	=
water	36:23	0:0	4	recvbuf
op	36:30	0:0	4	[
water	36:31	0:0	4	1
op	36:32	0:0	4	]
op	36:34	0:0	4	&
water	36:36	0:0	4	0
water	36:37	0:0	4	x7f
water	36:40	0:0	4	;
break	37:8	37:13	4	
water	38:4	0:0	4	}
call	39:4	39:77	2	getsockname
arg	39:16	39:41	3	ffurl_get_file_handle(in)
call	39:16	39:40	4	ffurl_get_file_handle
arg	39:38	39:40	5	in
water	39:38	0:0	6	in
arg	39:43	39:67	3	(structsockaddr*)&addr
water	39:43	0:0	4	(
water	39:44	0:0	4	struct
water	39:51	0:0	4	sockaddr
op	39:59	0:0	4	*
water	39:60	0:0	4	)
op	39:62	0:0	4	&
water	39:63	0:0	4	addr
arg	39:69	39:77	3	&addrlen
op	39:69	0:0	4	&
water	39:70	0:0	4	addrlen
water	39:78	0:0	2	;
call	40:4	40:18	2	ffurl_close
arg	40:16	40:18	3	in
water	40:16	0:0	4	in
water	40:19	0:0	2	;
water	41:4	0:0	2	in
op	41:7	0:0	2	=
water	41:9	0:0	2	NULL
water	41:13	0:0	2	;
if	42:4	47:4	2	(ff_rtp_get_codec_info (& codec ,payload_type ))
cond	42:8	42:50	3	ff_rtp_get_codec_info (& codec ,payload_type )
call	42:8	42:50	4	ff_rtp_get_codec_info
arg	42:30	42:36	5	&codec
op	42:30	0:0	6	&
water	42:31	0:0	6	codec
arg	42:38	42:50	5	payload_type
water	42:38	0:0	6	payload_type
stmts	42:53	47:4	3	
water	42:53	0:0	4	{
call	43:8	45:45	4	av_log
arg	43:15	43:16	5	s
water	43:15	0:0	6	s
arg	43:18	43:30	5	AV_LOG_ERROR
water	43:18	0:0	6	AV_LOG_ERROR
arg	43:32	44:69	5	"Unable to receive RTP payload type %d ""without an SDP file describing it\n"
water	43:32	0:0	6	"Unable to receive RTP payload type %d "
water	44:32	0:0	6	"without an SDP file describing it\n"
arg	45:33	45:45	5	payload_type
water	45:33	0:0	6	payload_type
water	45:46	0:0	4	;
goto	46:8	46:17	4	fail
water	46:13	0:0	5	fail
water	47:4	0:0	4	}
if	48:4	52:4	2	(codec . codec_type != AVMEDIA_TYPE_DATA)
cond	48:8	48:28	3	codec . codec_type != AVMEDIA_TYPE_DATA
water	48:8	0:0	4	codec
op	48:13	0:0	4	.
water	48:14	0:0	4	codec_type
op	48:25	0:0	4	!=
water	48:28	0:0	4	AVMEDIA_TYPE_DATA
stmts	48:47	52:4	3	
water	48:47	0:0	4	{
call	49:8	51:51	4	av_log
arg	49:15	49:16	5	s
water	49:15	0:0	6	s
arg	49:18	49:32	5	AV_LOG_WARNING
water	49:18	0:0	6	AV_LOG_WARNING
arg	49:34	51:51	5	"Guessing on RTP content - if not received ""properly you need an SDP file ""describing it\n"
water	49:34	0:0	6	"Guessing on RTP content - if not received "
water	50:34	0:0	6	"properly you need an SDP file "
water	51:34	0:0	6	"describing it\n"
water	51:52	0:0	4	;
water	52:4	0:0	4	}
call	53:4	54:37	2	av_url_split
arg	53:17	53:21	3	NULL
water	53:17	0:0	4	NULL
arg	53:23	53:24	3	0
water	53:23	0:0	4	0
arg	53:26	53:30	3	NULL
water	53:26	0:0	4	NULL
arg	53:32	53:33	3	0
water	53:32	0:0	4	0
arg	53:35	53:39	3	host
water	53:35	0:0	4	host
arg	53:41	53:53	3	sizeof(host)
op	53:41	0:0	4	sizeof
water	53:47	0:0	4	(
water	53:48	0:0	4	host
water	53:52	0:0	4	)
arg	53:55	53:60	3	&port
op	53:55	0:0	4	&
water	53:56	0:0	4	port
arg	54:17	54:21	3	NULL
water	54:17	0:0	4	NULL
arg	54:23	54:24	3	0
water	54:23	0:0	4	0
arg	54:26	54:37	3	s->filename
water	54:26	0:0	4	s
op	54:27	0:0	4	->
water	54:29	0:0	4	filename
water	54:38	0:0	2	;
call	55:4	60:31	2	snprintf
arg	55:13	55:16	3	sdp
water	55:13	0:0	4	sdp
arg	55:18	55:29	3	sizeof(sdp)
op	55:18	0:0	4	sizeof
water	55:24	0:0	4	(
water	55:25	0:0	4	sdp
water	55:28	0:0	4	)
arg	56:13	56:60	3	"v=0\r\nc=IN IP%d %s\r\nm=%s %d RTP/AVP %d\r\n"
water	56:13	0:0	4	"v=0\r\nc=IN IP%d %s\r\nm=%s %d RTP/AVP %d\r\n"
arg	57:13	57:46	3	addr.ss_family==AF_INET?4:6
water	57:13	0:0	4	addr
op	57:17	0:0	4	.
water	57:18	0:0	4	ss_family
op	57:28	0:0	4	==
water	57:31	0:0	4	AF_INET
water	57:39	0:0	4	?
water	57:41	0:0	4	4
water	57:43	0:0	4	:
water	57:45	0:0	4	6
arg	57:48	57:52	3	host
water	57:48	0:0	4	host
arg	58:13	59:71	3	codec.codec_type==AVMEDIA_TYPE_DATA?"application":codec.codec_type==AVMEDIA_TYPE_VIDEO?"video":"audio"
water	58:13	0:0	4	codec
op	58:18	0:0	4	.
water	58:19	0:0	4	codec_type
op	58:30	0:0	4	==
water	58:33	0:0	4	AVMEDIA_TYPE_DATA
water	58:52	0:0	4	?
water	58:54	0:0	4	"application"
water	58:68	0:0	4	:
water	59:13	0:0	4	codec
op	59:18	0:0	4	.
water	59:19	0:0	4	codec_type
op	59:30	0:0	4	==
water	59:33	0:0	4	AVMEDIA_TYPE_VIDEO
water	59:52	0:0	4	?
water	59:54	0:0	4	"video"
water	59:62	0:0	4	:
water	59:64	0:0	4	"audio"
arg	60:13	60:17	3	port
water	60:13	0:0	4	port
arg	60:19	60:31	3	payload_type
water	60:19	0:0	4	payload_type
water	60:32	0:0	2	;
call	61:4	61:47	2	av_log
arg	61:11	61:12	3	s
water	61:11	0:0	4	s
arg	61:14	61:28	3	AV_LOG_VERBOSE
water	61:14	0:0	4	AV_LOG_VERBOSE
arg	61:30	61:42	3	"SDP:\n%s\n"
water	61:30	0:0	4	"SDP:\n%s\n"
arg	61:44	61:47	3	sdp
water	61:44	0:0	4	sdp
water	61:48	0:0	2	;
call	62:4	62:70	2	ffio_init_context
arg	62:22	62:25	3	&pb
op	62:22	0:0	4	&
water	62:23	0:0	4	pb
arg	62:27	62:30	3	sdp
water	62:27	0:0	4	sdp
arg	62:32	62:43	3	strlen(sdp)
call	62:32	62:42	4	strlen
arg	62:39	62:42	5	sdp
water	62:39	0:0	6	sdp
arg	62:45	62:46	3	0
water	62:45	0:0	4	0
arg	62:48	62:52	3	NULL
water	62:48	0:0	4	NULL
arg	62:54	62:58	3	NULL
water	62:54	0:0	4	NULL
arg	62:60	62:64	3	NULL
water	62:60	0:0	4	NULL
arg	62:66	62:70	3	NULL
water	62:66	0:0	4	NULL
water	62:71	0:0	2	;
water	63:4	0:0	2	s
op	63:5	0:0	2	->
water	63:7	0:0	2	pb
op	63:10	0:0	2	=
op	63:12	0:0	2	&
water	63:13	0:0	2	pb
water	63:15	0:0	2	;
call	65:4	65:21	2	ff_network_close
water	65:22	0:0	2	;
water	66:4	0:0	2	rt
op	66:6	0:0	2	->
water	66:8	0:0	2	media_type_mask
op	66:24	0:0	2	=
water	66:26	0:0	2	(
water	66:27	0:0	2	1
op	66:29	0:0	2	<<
water	66:32	0:0	2	(
water	66:33	0:0	2	AVMEDIA_TYPE_SUBTITLE
op	66:54	0:0	2	+
water	66:55	0:0	2	1
water	66:56	0:0	2	)
water	66:57	0:0	2	)
op	66:59	0:0	2	-
water	66:61	0:0	2	1
water	66:62	0:0	2	;
water	67:4	0:0	2	ret
op	67:8	0:0	2	=
call	67:10	67:27	2	sdp_read_header
arg	67:26	67:27	3	s
water	67:26	0:0	4	s
water	67:28	0:0	2	;
water	68:4	0:0	2	s
op	68:5	0:0	2	->
water	68:7	0:0	2	pb
op	68:10	0:0	2	=
water	68:12	0:0	2	NULL
water	68:16	0:0	2	;
return	69:4	69:14	2	ret
water	69:11	0:0	3	ret
label	70:0	70:4	2	fail :
if	71:4	72:23	2	(in)
cond	71:8	71:8	3	in
water	71:8	0:0	4	in
stmts	72:8	72:23	3	
call	72:8	72:22	4	ffurl_close
arg	72:20	72:22	5	in
water	72:20	0:0	6	in
water	72:23	0:0	4	;
call	73:4	73:21	2	ff_network_close
water	73:22	0:0	2	;
return	74:4	74:14	2	ret
water	74:11	0:0	3	ret
