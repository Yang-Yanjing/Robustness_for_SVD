func	1:0	70:0	0	static int	decode_ga_specific_config
params	1:36	0:0	1	
param	1:37	1:51	2	AACContext *	ac
param	1:53	1:74	2	AVCodecContext *	avctx
param	2:37	2:54	2	GetBitContext *	gb
param	3:37	3:59	2	MPEG4AudioConfig *	m4ac
param	4:37	4:55	2	int	channel_config
stmnts	0:0	69:12	1	
decl	6:4	6:49	2	int	extension_flag
water	6:22	0:0	2	,
decl	6:4	6:49	2	int	ret
water	6:27	0:0	2	,
decl	6:4	6:49	2	int	ep_config
water	6:38	0:0	2	,
decl	6:4	6:49	2	int	res_flags
water	7:4	0:0	2	uint8_t
water	7:12	0:0	2	layout_map
op	7:22	0:0	2	[
water	7:23	0:0	2	MAX_ELEM_ID
op	7:34	0:0	2	*
water	7:35	0:0	2	4
op	7:36	0:0	2	]
op	7:37	0:0	2	[
water	7:38	0:0	2	3
op	7:39	0:0	2	]
water	7:40	0:0	2	;
decl	8:4	8:16	2	int	tags
op	8:13	0:0	2	=
water	8:15	0:0	2	0
if	9:4	12:4	2	(get_bits1 (gb ))
cond	9:8	9:20	3	get_bits1 (gb )
call	9:8	9:20	4	get_bits1
arg	9:18	9:20	5	gb
water	9:18	0:0	6	gb
stmts	9:23	12:4	3	
water	9:23	0:0	4	{
call	10:8	10:58	4	avpriv_request_sample
arg	10:30	10:35	5	avctx
water	10:30	0:0	6	avctx
arg	10:37	10:58	5	"960/120 MDCT window"
water	10:37	0:0	6	"960/120 MDCT window"
water	10:59	0:0	4	;
return	11:8	11:35	4	AVERROR_PATCHWELCOME
water	11:15	0:0	5	AVERROR_PATCHWELCOME
water	12:4	0:0	4	}
water	13:4	0:0	2	m4ac
op	13:8	0:0	2	->
water	13:10	0:0	2	frame_length_short
op	13:29	0:0	2	=
water	13:31	0:0	2	0
water	13:32	0:0	2	;
if	14:4	15:25	2	(get_bits1 (gb ))
cond	14:8	14:20	3	get_bits1 (gb )
call	14:8	14:20	4	get_bits1
arg	14:18	14:20	5	gb
water	14:18	0:0	6	gb
stmts	15:8	15:25	3	
call	15:8	15:24	4	skip_bits
arg	15:18	15:20	5	gb
water	15:18	0:0	6	gb
arg	15:22	15:24	5	14
water	15:22	0:0	6	14
water	15:25	0:0	4	;
water	16:4	0:0	2	extension_flag
op	16:19	0:0	2	=
call	16:21	16:33	2	get_bits1
arg	16:31	16:33	3	gb
water	16:31	0:0	4	gb
water	16:34	0:0	2	;
if	17:4	19:24	2	(m4ac -> object_type == AOT_AAC_SCALABLE || m4ac -> object_type == AOT_ER_AAC_SCALABLE)
cond	17:8	18:29	3	m4ac -> object_type == AOT_AAC_SCALABLE || m4ac -> object_type == AOT_ER_AAC_SCALABLE
water	17:8	0:0	4	m4ac
op	17:12	0:0	4	->
water	17:14	0:0	4	object_type
op	17:26	0:0	4	==
water	17:29	0:0	4	AOT_AAC_SCALABLE
op	17:46	0:0	4	||
water	18:8	0:0	4	m4ac
op	18:12	0:0	4	->
water	18:14	0:0	4	object_type
op	18:26	0:0	4	==
water	18:29	0:0	4	AOT_ER_AAC_SCALABLE
stmts	19:8	19:24	3	
call	19:8	19:23	4	skip_bits
arg	19:18	19:20	5	gb
water	19:18	0:0	6	gb
arg	19:22	19:23	5	3
water	19:22	0:0	6	3
water	19:24	0:0	4	;
if	20:4	25:4	2	(channel_config == 0)
cond	20:8	20:26	3	channel_config == 0
water	20:8	0:0	4	channel_config
op	20:23	0:0	4	==
water	20:26	0:0	4	0
stmts	20:29	25:4	3	
water	20:29	0:0	4	{
call	21:8	21:23	4	skip_bits
arg	21:18	21:20	5	gb
water	21:18	0:0	6	gb
arg	21:22	21:23	5	4
water	21:22	0:0	6	4
water	21:24	0:0	4	;
water	22:8	0:0	4	tags
op	22:13	0:0	4	=
call	22:15	22:53	4	decode_pce
arg	22:26	22:31	5	avctx
water	22:26	0:0	6	avctx
arg	22:33	22:37	5	m4ac
water	22:33	0:0	6	m4ac
arg	22:39	22:49	5	layout_map
water	22:39	0:0	6	layout_map
arg	22:51	22:53	5	gb
water	22:51	0:0	6	gb
water	22:54	0:0	4	;
if	23:8	24:23	4	(tags < 0)
cond	23:12	23:19	5	tags < 0
water	23:12	0:0	6	tags
op	23:17	0:0	6	<
water	23:19	0:0	6	0
stmts	24:12	24:23	5	
return	24:12	24:23	6	tags
water	24:19	0:0	7	tags
water	25:4	0:0	4	}
else	25:6	29:4	2
stmts	25:11	29:4	3	
water	25:11	0:0	4	{
if	26:8	28:22	4	(( ret =set_default_channel_config (avctx ,layout_map ,& tags ,channel_config ) ))
cond	26:12	27:68	5	( ret =set_default_channel_config (avctx ,layout_map ,& tags ,channel_config ) )
water	26:12	0:0	6	(
water	26:13	0:0	6	ret
op	26:17	0:0	6	=
call	26:19	27:67	6	set_default_channel_config
arg	26:46	26:51	7	avctx
water	26:46	0:0	8	avctx
arg	26:53	26:63	7	layout_map
water	26:53	0:0	8	layout_map
arg	27:46	27:51	7	&tags
op	27:46	0:0	8	&
water	27:47	0:0	8	tags
arg	27:53	27:67	7	channel_config
water	27:53	0:0	8	channel_config
water	27:68	0:0	6	)
stmts	28:12	28:22	5	
return	28:12	28:22	6	ret
water	28:19	0:0	7	ret
water	29:4	0:0	4	}
if	30:4	32:4	2	(count_channels (layout_map ,tags ) > 1)
cond	30:8	30:43	3	count_channels (layout_map ,tags ) > 1
call	30:8	30:39	4	count_channels
arg	30:23	30:33	5	layout_map
water	30:23	0:0	6	layout_map
arg	30:35	30:39	5	tags
water	30:35	0:0	6	tags
op	30:41	0:0	4	>
water	30:43	0:0	4	1
stmts	30:46	32:4	3	
water	30:46	0:0	4	{
water	31:8	0:0	4	m4ac
op	31:12	0:0	4	->
water	31:14	0:0	4	ps
op	31:17	0:0	4	=
water	31:19	0:0	4	0
water	31:20	0:0	4	;
water	32:4	0:0	4	}
else	32:6	33:20	2
stmts	32:11	33:20	3	
if	32:11	33:20	4	(m4ac -> sbr == 1 && m4ac -> ps == - 1)
cond	32:15	32:46	5	m4ac -> sbr == 1 && m4ac -> ps == - 1
water	32:15	0:0	6	m4ac
op	32:19	0:0	6	->
water	32:21	0:0	6	sbr
op	32:25	0:0	6	==
water	32:28	0:0	6	1
op	32:30	0:0	6	&&
water	32:33	0:0	6	m4ac
op	32:37	0:0	6	->
water	32:39	0:0	6	ps
op	32:42	0:0	6	==
op	32:45	0:0	6	-
water	32:46	0:0	6	1
stmts	33:8	33:20	5	
water	33:8	0:0	6	m4ac
op	33:12	0:0	6	->
water	33:14	0:0	6	ps
op	33:17	0:0	6	=
water	33:19	0:0	6	1
water	33:20	0:0	6	;
if	34:4	35:18	2	(ac && ( ret =output_configure (ac ,layout_map ,tags ,OC_GLOBAL_HDR ,0 ) ))
cond	34:8	34:77	3	ac && ( ret =output_configure (ac ,layout_map ,tags ,OC_GLOBAL_HDR ,0 ) )
water	34:8	0:0	4	ac
op	34:11	0:0	4	&&
water	34:14	0:0	4	(
water	34:15	0:0	4	ret
op	34:19	0:0	4	=
call	34:21	34:76	4	output_configure
arg	34:38	34:40	5	ac
water	34:38	0:0	6	ac
arg	34:42	34:52	5	layout_map
water	34:42	0:0	6	layout_map
arg	34:54	34:58	5	tags
water	34:54	0:0	6	tags
arg	34:60	34:73	5	OC_GLOBAL_HDR
water	34:60	0:0	6	OC_GLOBAL_HDR
arg	34:75	34:76	5	0
water	34:75	0:0	6	0
water	34:77	0:0	4	)
stmts	35:8	35:18	3	
return	35:8	35:18	4	ret
water	35:15	0:0	5	ret
if	36:4	56:4	2	(extension_flag)
cond	36:8	36:8	3	extension_flag
water	36:8	0:0	4	extension_flag
stmts	36:24	56:4	3	
water	36:24	0:0	4	{
switch	37:8	54:8	4	(m4ac -> object_type)
cond	37:16	37:22	5	m4ac -> object_type
water	37:16	0:0	6	m4ac
op	37:20	0:0	6	->
water	37:22	0:0	6	object_type
stmts	37:35	54:8	5	
water	37:35	0:0	6	{
label	38:8	38:24	6	case AOT_ER_BSAC :
call	39:12	39:27	6	skip_bits
arg	39:22	39:24	7	gb
water	39:22	0:0	8	gb
arg	39:26	39:27	7	5
water	39:26	0:0	8	5
water	39:28	0:0	6	;
call	40:12	40:28	6	skip_bits
arg	40:22	40:24	7	gb
water	40:22	0:0	8	gb
arg	40:26	40:28	7	11
water	40:26	0:0	8	11
water	40:29	0:0	6	;
break	41:12	41:17	6	
label	42:8	42:26	6	case AOT_ER_AAC_LC :
label	43:8	43:27	6	case AOT_ER_AAC_LTP :
label	44:8	44:32	6	case AOT_ER_AAC_SCALABLE :
label	45:8	45:26	6	case AOT_ER_AAC_LD :
water	46:12	0:0	6	res_flags
op	46:22	0:0	6	=
call	46:24	46:38	6	get_bits
arg	46:33	46:35	7	gb
water	46:33	0:0	8	gb
arg	46:37	46:38	7	3
water	46:37	0:0	8	3
water	46:39	0:0	6	;
if	47:12	52:12	6	(res_flags)
cond	47:16	47:16	7	res_flags
water	47:16	0:0	8	res_flags
stmts	47:27	52:12	7	
water	47:27	0:0	8	{
call	48:16	50:55	8	avpriv_report_missing_feature
arg	48:46	48:51	9	avctx
water	48:46	0:0	10	avctx
arg	49:46	49:78	9	"AAC data resilience (flags %x)"
water	49:46	0:0	10	"AAC data resilience (flags %x)"
arg	50:46	50:55	9	res_flags
water	50:46	0:0	10	res_flags
water	50:56	0:0	8	;
return	51:16	51:43	8	AVERROR_PATCHWELCOME
water	51:23	0:0	9	AVERROR_PATCHWELCOME
water	52:12	0:0	8	}
break	53:12	53:17	6	
water	54:8	0:0	6	}
call	55:8	55:21	4	skip_bits1
arg	55:19	55:21	5	gb
water	55:19	0:0	6	gb
water	55:22	0:0	4	;
water	56:4	0:0	4	}
switch	57:4	68:4	2	(m4ac -> object_type)
cond	57:12	57:18	3	m4ac -> object_type
water	57:12	0:0	4	m4ac
op	57:16	0:0	4	->
water	57:18	0:0	4	object_type
stmts	57:31	68:4	3	
water	57:31	0:0	4	{
label	58:4	58:22	4	case AOT_ER_AAC_LC :
label	59:4	59:23	4	case AOT_ER_AAC_LTP :
label	60:4	60:28	4	case AOT_ER_AAC_SCALABLE :
label	61:4	61:22	4	case AOT_ER_AAC_LD :
water	62:8	0:0	4	ep_config
op	62:18	0:0	4	=
call	62:20	62:34	4	get_bits
arg	62:29	62:31	5	gb
water	62:29	0:0	6	gb
arg	62:33	62:34	5	2
water	62:33	0:0	6	2
water	62:35	0:0	4	;
if	63:8	67:8	4	(ep_config)
cond	63:12	63:12	5	ep_config
water	63:12	0:0	6	ep_config
stmts	63:23	67:8	5	
water	63:23	0:0	6	{
call	64:12	65:66	6	avpriv_report_missing_feature
arg	64:42	64:47	7	avctx
water	64:42	0:0	8	avctx
arg	65:42	65:55	7	"epConfig %d"
water	65:42	0:0	8	"epConfig %d"
arg	65:57	65:66	7	ep_config
water	65:57	0:0	8	ep_config
water	65:67	0:0	6	;
return	66:12	66:39	6	AVERROR_PATCHWELCOME
water	66:19	0:0	7	AVERROR_PATCHWELCOME
water	67:8	0:0	6	}
water	68:4	0:0	4	}
return	69:4	69:12	2	0
water	69:11	0:0	3	0
