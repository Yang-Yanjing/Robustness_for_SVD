func	1:0	19:0	0	static void	vc1_decode_skip_blocks
params	1:34	0:0	1	
param	1:35	1:48	2	VC1Context *	v
stmnts	0:0	18:36	1	
decl	3:4	3:29	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	v
op	3:26	0:0	2	->
water	3:28	0:0	2	s
if	4:4	5:14	2	(! v -> s . last_picture . f -> data [ 0 ])
cond	4:8	4:36	3	! v -> s . last_picture . f -> data [ 0 ]
op	4:8	0:0	4	!
water	4:9	0:0	4	v
op	4:10	0:0	4	->
water	4:12	0:0	4	s
op	4:13	0:0	4	.
water	4:14	0:0	4	last_picture
op	4:26	0:0	4	.
water	4:27	0:0	4	f
op	4:28	0:0	4	->
water	4:30	0:0	4	data
op	4:34	0:0	4	[
water	4:35	0:0	4	0
op	4:36	0:0	4	]
stmts	5:8	5:14	3	
return	5:8	5:14	4	
call	6:4	6:89	2	ff_er_add_slice
arg	6:20	6:26	3	&s->er
op	6:20	0:0	4	&
water	6:21	0:0	4	s
op	6:22	0:0	4	->
water	6:24	0:0	4	er
arg	6:28	6:29	3	0
water	6:28	0:0	4	0
arg	6:31	6:44	3	s->start_mb_y
water	6:31	0:0	4	s
op	6:32	0:0	4	->
water	6:34	0:0	4	start_mb_y
arg	6:46	6:61	3	s->mb_width-1
water	6:46	0:0	4	s
op	6:47	0:0	4	->
water	6:49	0:0	4	mb_width
op	6:58	0:0	4	-
water	6:60	0:0	4	1
arg	6:63	6:78	3	s->end_mb_y-1
water	6:63	0:0	4	s
op	6:64	0:0	4	->
water	6:66	0:0	4	end_mb_y
op	6:75	0:0	4	-
water	6:77	0:0	4	1
arg	6:80	6:89	3	ER_MB_END
water	6:80	0:0	4	ER_MB_END
water	6:90	0:0	2	;
water	7:4	0:0	2	s
op	7:5	0:0	2	->
water	7:7	0:0	2	first_slice_line
op	7:24	0:0	2	=
water	7:26	0:0	2	1
water	7:27	0:0	2	;
for	8:4	17:4	2	(s -> mb_y = s -> start_mb_y ;s -> mb_y < s -> end_mb_y;s -> mb_y ++)
forinit	8:9	8:32	3	s -> mb_y = s -> start_mb_y ;
water	8:9	0:0	4	s
op	8:10	0:0	4	->
water	8:12	0:0	4	mb_y
op	8:17	0:0	4	=
water	8:19	0:0	4	s
op	8:20	0:0	4	->
water	8:22	0:0	4	start_mb_y
water	8:32	0:0	4	;
cond	8:34	8:47	3	s -> mb_y < s -> end_mb_y
water	8:34	0:0	4	s
op	8:35	0:0	4	->
water	8:37	0:0	4	mb_y
op	8:42	0:0	4	<
water	8:44	0:0	4	s
op	8:45	0:0	4	->
water	8:47	0:0	4	end_mb_y
forexpr	8:57	8:64	3	s -> mb_y ++
water	8:57	0:0	4	s
op	8:58	0:0	4	->
water	8:60	0:0	4	mb_y
op	8:64	0:0	4	++
stmts	8:68	17:4	3	
water	8:68	0:0	4	{
water	9:8	0:0	4	s
op	9:9	0:0	4	->
water	9:11	0:0	4	mb_x
op	9:16	0:0	4	=
water	9:18	0:0	4	0
water	9:19	0:0	4	;
call	10:8	10:26	4	init_block_index
arg	10:25	10:26	5	v
water	10:25	0:0	6	v
water	10:27	0:0	4	;
call	11:8	11:31	4	ff_update_block_index
arg	11:30	11:31	5	s
water	11:30	0:0	6	s
water	11:32	0:0	4	;
call	12:8	12:104	4	memcpy
arg	12:15	12:25	5	s->dest[0]
water	12:15	0:0	6	s
op	12:16	0:0	6	->
water	12:18	0:0	6	dest
op	12:22	0:0	6	[
water	12:23	0:0	6	0
op	12:24	0:0	6	]
arg	12:27	12:82	5	s->last_picture.f->data[0]+s->mb_y*16*s->linesize
water	12:27	0:0	6	s
op	12:28	0:0	6	->
water	12:30	0:0	6	last_picture
op	12:42	0:0	6	.
water	12:43	0:0	6	f
op	12:44	0:0	6	->
water	12:46	0:0	6	data
op	12:50	0:0	6	[
water	12:51	0:0	6	0
op	12:52	0:0	6	]
op	12:54	0:0	6	+
water	12:56	0:0	6	s
op	12:57	0:0	6	->
water	12:59	0:0	6	mb_y
op	12:64	0:0	6	*
water	12:66	0:0	6	16
op	12:69	0:0	6	*
water	12:71	0:0	6	s
op	12:72	0:0	6	->
water	12:74	0:0	6	linesize
arg	12:86	12:104	5	s->linesize*16
water	12:86	0:0	6	s
op	12:87	0:0	6	->
water	12:89	0:0	6	linesize
op	12:100	0:0	6	*
water	12:102	0:0	6	16
water	12:105	0:0	4	;
call	13:8	13:104	4	memcpy
arg	13:15	13:25	5	s->dest[1]
water	13:15	0:0	6	s
op	13:16	0:0	6	->
water	13:18	0:0	6	dest
op	13:22	0:0	6	[
water	13:23	0:0	6	1
op	13:24	0:0	6	]
arg	13:27	13:84	5	s->last_picture.f->data[1]+s->mb_y*8*s->uvlinesize
water	13:27	0:0	6	s
op	13:28	0:0	6	->
water	13:30	0:0	6	last_picture
op	13:42	0:0	6	.
water	13:43	0:0	6	f
op	13:44	0:0	6	->
water	13:46	0:0	6	data
op	13:50	0:0	6	[
water	13:51	0:0	6	1
op	13:52	0:0	6	]
op	13:54	0:0	6	+
water	13:56	0:0	6	s
op	13:57	0:0	6	->
water	13:59	0:0	6	mb_y
op	13:64	0:0	6	*
water	13:67	0:0	6	8
op	13:69	0:0	6	*
water	13:71	0:0	6	s
op	13:72	0:0	6	->
water	13:74	0:0	6	uvlinesize
arg	13:86	13:104	5	s->uvlinesize*8
water	13:86	0:0	6	s
op	13:87	0:0	6	->
water	13:89	0:0	6	uvlinesize
op	13:100	0:0	6	*
water	13:103	0:0	6	8
water	13:105	0:0	4	;
call	14:8	14:104	4	memcpy
arg	14:15	14:25	5	s->dest[2]
water	14:15	0:0	6	s
op	14:16	0:0	6	->
water	14:18	0:0	6	dest
op	14:22	0:0	6	[
water	14:23	0:0	6	2
op	14:24	0:0	6	]
arg	14:27	14:84	5	s->last_picture.f->data[2]+s->mb_y*8*s->uvlinesize
water	14:27	0:0	6	s
op	14:28	0:0	6	->
water	14:30	0:0	6	last_picture
op	14:42	0:0	6	.
water	14:43	0:0	6	f
op	14:44	0:0	6	->
water	14:46	0:0	6	data
op	14:50	0:0	6	[
water	14:51	0:0	6	2
op	14:52	0:0	6	]
op	14:54	0:0	6	+
water	14:56	0:0	6	s
op	14:57	0:0	6	->
water	14:59	0:0	6	mb_y
op	14:64	0:0	6	*
water	14:67	0:0	6	8
op	14:69	0:0	6	*
water	14:71	0:0	6	s
op	14:72	0:0	6	->
water	14:74	0:0	6	uvlinesize
arg	14:86	14:104	5	s->uvlinesize*8
water	14:86	0:0	6	s
op	14:87	0:0	6	->
water	14:89	0:0	6	uvlinesize
op	14:100	0:0	6	*
water	14:103	0:0	6	8
water	14:105	0:0	4	;
call	15:8	15:51	4	ff_mpeg_draw_horiz_band
arg	15:32	15:33	5	s
water	15:32	0:0	6	s
arg	15:35	15:47	5	s->mb_y*16
water	15:35	0:0	6	s
op	15:36	0:0	6	->
water	15:38	0:0	6	mb_y
op	15:43	0:0	6	*
water	15:45	0:0	6	16
arg	15:49	15:51	5	16
water	15:49	0:0	6	16
water	15:52	0:0	4	;
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	first_slice_line
op	16:28	0:0	4	=
water	16:30	0:0	4	0
water	16:31	0:0	4	;
water	17:4	0:0	4	}
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	pict_type
op	18:17	0:0	2	=
water	18:19	0:0	2	AV_PICTURE_TYPE_P
water	18:36	0:0	2	;
