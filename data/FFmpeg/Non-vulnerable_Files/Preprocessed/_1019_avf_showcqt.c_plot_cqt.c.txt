func	1:0	190:0	0	static int	plot_cqt
params	1:19	0:0	1	
param	1:20	1:40	2	AVFilterLink *	inlink
stmnts	0:0	189:14	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:33	2	ShowCQTContext	*s
op	4:22	0:0	2	=
water	4:24	0:0	2	ctx
op	4:27	0:0	2	->
water	4:29	0:0	2	priv
decl	5:4	5:43	2	AVFilterLink	*outlink
op	5:26	0:0	2	=
water	5:28	0:0	2	ctx
op	5:31	0:0	2	->
water	5:33	0:0	2	outputs
op	5:40	0:0	2	[
water	5:41	0:0	2	0
op	5:42	0:0	2	]
decl	6:4	6:34	2	int	fft_len
op	6:16	0:0	2	=
water	6:18	0:0	2	1
op	6:20	0:0	2	<<
water	6:23	0:0	2	s
op	6:24	0:0	2	->
water	6:26	0:0	2	fft_bits
water	7:4	0:0	2	FFTSample
water	7:14	0:0	2	result
op	7:20	0:0	2	[
water	7:21	0:0	2	VIDEO_WIDTH
op	7:32	0:0	2	]
op	7:33	0:0	2	[
water	7:34	0:0	2	4
op	7:35	0:0	2	]
water	7:36	0:0	2	;
decl	8:4	8:21	2	int	x
water	8:9	0:0	2	,
decl	8:4	8:21	2	int	y
water	8:12	0:0	2	,
decl	8:4	8:21	2	int	ret
op	8:18	0:0	2	=
water	8:20	0:0	2	0
decl	9:4	9:44	2	int	linesize
op	9:17	0:0	2	=
water	9:19	0:0	2	s
op	9:20	0:0	2	->
water	9:22	0:0	2	outpicref
op	9:31	0:0	2	->
water	9:33	0:0	2	linesize
op	9:41	0:0	2	[
water	9:42	0:0	2	0
op	9:43	0:0	2	]
decl	10:4	10:39	2	int	video_scale
op	10:20	0:0	2	=
water	10:22	0:0	2	s
op	10:23	0:0	2	->
water	10:25	0:0	2	fullhd
water	10:32	0:0	2	?
water	10:34	0:0	2	2
water	10:36	0:0	2	:
water	10:38	0:0	2	1
decl	11:4	11:51	2	int	video_width
op	11:20	0:0	2	=
water	11:22	0:0	2	(
water	11:23	0:0	2	VIDEO_WIDTH
op	11:34	0:0	2	/
water	11:35	0:0	2	2
water	11:36	0:0	2	)
op	11:38	0:0	2	*
water	11:40	0:0	2	video_scale
decl	12:4	12:63	2	int	spectogram_height
op	12:26	0:0	2	=
water	12:28	0:0	2	(
water	12:29	0:0	2	SPECTOGRAM_HEIGHT
op	12:46	0:0	2	/
water	12:47	0:0	2	2
water	12:48	0:0	2	)
op	12:50	0:0	2	*
water	12:52	0:0	2	video_scale
decl	13:4	13:61	2	int	spectogram_start
op	13:25	0:0	2	=
water	13:27	0:0	2	(
water	13:28	0:0	2	SPECTOGRAM_START
op	13:44	0:0	2	/
water	13:45	0:0	2	2
water	13:46	0:0	2	)
op	13:48	0:0	2	*
water	13:50	0:0	2	video_scale
decl	14:4	14:51	2	int	font_height
op	14:20	0:0	2	=
water	14:22	0:0	2	(
water	14:23	0:0	2	FONT_HEIGHT
op	14:34	0:0	2	/
water	14:35	0:0	2	2
water	14:36	0:0	2	)
op	14:38	0:0	2	*
water	14:40	0:0	2	video_scale
call	16:4	16:74	2	memcpy
arg	16:11	16:29	3	s->fft_result_left
water	16:11	0:0	4	s
op	16:12	0:0	4	->
water	16:14	0:0	4	fft_result_left
arg	16:31	16:42	3	s->fft_data
water	16:31	0:0	4	s
op	16:32	0:0	4	->
water	16:34	0:0	4	fft_data
arg	16:44	16:74	3	fft_len*sizeof(*s->fft_data)
water	16:44	0:0	4	fft_len
op	16:52	0:0	4	*
op	16:54	0:0	4	sizeof
water	16:60	0:0	4	(
op	16:61	0:0	4	*
water	16:62	0:0	4	s
op	16:63	0:0	4	->
water	16:65	0:0	4	fft_data
water	16:73	0:0	4	)
water	16:75	0:0	2	;
call	17:4	17:53	2	av_fft_permute
arg	17:19	17:33	3	s->fft_context
water	17:19	0:0	4	s
op	17:20	0:0	4	->
water	17:22	0:0	4	fft_context
arg	17:35	17:53	3	s->fft_result_left
water	17:35	0:0	4	s
op	17:36	0:0	4	->
water	17:38	0:0	4	fft_result_left
water	17:54	0:0	2	;
call	18:4	18:50	2	av_fft_calc
arg	18:16	18:30	3	s->fft_context
water	18:16	0:0	4	s
op	18:17	0:0	4	->
water	18:19	0:0	4	fft_context
arg	18:32	18:50	3	s->fft_result_left
water	18:32	0:0	4	s
op	18:33	0:0	4	->
water	18:35	0:0	4	fft_result_left
water	18:51	0:0	2	;
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	fft_result_right
op	20:23	0:0	2	[
water	20:24	0:0	2	0
op	20:25	0:0	2	]
op	20:26	0:0	2	.
water	20:27	0:0	2	re
op	20:30	0:0	2	=
water	20:32	0:0	2	2
op	20:33	0:0	2	.
water	20:34	0:0	2	0
water	20:35	0:0	2	f
op	20:37	0:0	2	*
water	20:39	0:0	2	s
op	20:40	0:0	2	->
water	20:42	0:0	2	fft_result_left
op	20:57	0:0	2	[
water	20:58	0:0	2	0
op	20:59	0:0	2	]
op	20:60	0:0	2	.
water	20:61	0:0	2	im
water	20:63	0:0	2	;
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	fft_result_right
op	21:23	0:0	2	[
water	21:24	0:0	2	0
op	21:25	0:0	2	]
op	21:26	0:0	2	.
water	21:27	0:0	2	im
op	21:30	0:0	2	=
water	21:32	0:0	2	0
water	21:33	0:0	2	;
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	fft_result_left
op	22:22	0:0	2	[
water	22:23	0:0	2	0
op	22:24	0:0	2	]
op	22:25	0:0	2	.
water	22:26	0:0	2	re
op	22:29	0:0	2	=
water	22:31	0:0	2	2
op	22:32	0:0	2	.
water	22:33	0:0	2	0
water	22:34	0:0	2	f
op	22:36	0:0	2	*
water	22:38	0:0	2	s
op	22:39	0:0	2	->
water	22:41	0:0	2	fft_result_left
op	22:56	0:0	2	[
water	22:57	0:0	2	0
op	22:58	0:0	2	]
op	22:59	0:0	2	.
water	22:60	0:0	2	re
water	22:62	0:0	2	;
water	23:4	0:0	2	s
op	23:5	0:0	2	->
water	23:7	0:0	2	fft_result_left
op	23:22	0:0	2	[
water	23:23	0:0	2	0
op	23:24	0:0	2	]
op	23:25	0:0	2	.
water	23:26	0:0	2	im
op	23:29	0:0	2	=
water	23:31	0:0	2	0
water	23:32	0:0	2	;
for	24:4	34:4	2	(x = 1 ;x <= fft_len >> 1;x ++)
forinit	24:9	24:14	3	x = 1 ;
water	24:9	0:0	4	x
op	24:11	0:0	4	=
water	24:13	0:0	4	1
water	24:14	0:0	4	;
cond	24:16	24:32	3	x <= fft_len >> 1
water	24:16	0:0	4	x
op	24:18	0:0	4	<=
water	24:21	0:0	4	fft_len
op	24:29	0:0	4	>>
water	24:32	0:0	4	1
forexpr	24:35	24:36	3	x ++
water	24:35	0:0	4	x
op	24:36	0:0	4	++
stmts	24:40	34:4	3	
water	24:40	0:0	4	{
decl	25:8	25:84	4	FFTSample	tmpy
op	25:23	0:0	4	=
water	25:25	0:0	4	s
op	25:26	0:0	4	->
water	25:28	0:0	4	fft_result_left
op	25:43	0:0	4	[
water	25:44	0:0	4	fft_len
op	25:51	0:0	4	-
water	25:52	0:0	4	x
op	25:53	0:0	4	]
op	25:54	0:0	4	.
water	25:55	0:0	4	im
op	25:58	0:0	4	-
water	25:60	0:0	4	s
op	25:61	0:0	4	->
water	25:63	0:0	4	fft_result_left
op	25:78	0:0	4	[
water	25:79	0:0	4	x
op	25:80	0:0	4	]
op	25:81	0:0	4	.
water	25:82	0:0	4	im
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	fft_result_right
op	26:27	0:0	4	[
water	26:28	0:0	4	x
op	26:29	0:0	4	]
op	26:30	0:0	4	.
water	26:31	0:0	4	re
op	26:34	0:0	4	=
water	26:36	0:0	4	s
op	26:37	0:0	4	->
water	26:39	0:0	4	fft_result_left
op	26:54	0:0	4	[
water	26:55	0:0	4	x
op	26:56	0:0	4	]
op	26:57	0:0	4	.
water	26:58	0:0	4	im
op	26:61	0:0	4	+
water	26:63	0:0	4	s
op	26:64	0:0	4	->
water	26:66	0:0	4	fft_result_left
op	26:81	0:0	4	[
water	26:82	0:0	4	fft_len
op	26:89	0:0	4	-
water	26:90	0:0	4	x
op	26:91	0:0	4	]
op	26:92	0:0	4	.
water	26:93	0:0	4	im
water	26:95	0:0	4	;
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	fft_result_right
op	27:27	0:0	4	[
water	27:28	0:0	4	x
op	27:29	0:0	4	]
op	27:30	0:0	4	.
water	27:31	0:0	4	im
op	27:34	0:0	4	=
water	27:36	0:0	4	s
op	27:37	0:0	4	->
water	27:39	0:0	4	fft_result_left
op	27:54	0:0	4	[
water	27:55	0:0	4	x
op	27:56	0:0	4	]
op	27:57	0:0	4	.
water	27:58	0:0	4	re
op	27:61	0:0	4	-
water	27:63	0:0	4	s
op	27:64	0:0	4	->
water	27:66	0:0	4	fft_result_left
op	27:81	0:0	4	[
water	27:82	0:0	4	fft_len
op	27:89	0:0	4	-
water	27:90	0:0	4	x
op	27:91	0:0	4	]
op	27:92	0:0	4	.
water	27:93	0:0	4	re
water	27:95	0:0	4	;
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	fft_result_right
op	28:27	0:0	4	[
water	28:28	0:0	4	fft_len
op	28:35	0:0	4	-
water	28:36	0:0	4	x
op	28:37	0:0	4	]
op	28:38	0:0	4	.
water	28:39	0:0	4	re
op	28:42	0:0	4	=
water	28:44	0:0	4	s
op	28:45	0:0	4	->
water	28:47	0:0	4	fft_result_right
op	28:63	0:0	4	[
water	28:64	0:0	4	x
op	28:65	0:0	4	]
op	28:66	0:0	4	.
water	28:67	0:0	4	re
water	28:69	0:0	4	;
water	29:8	0:0	4	s
op	29:9	0:0	4	->
water	29:11	0:0	4	fft_result_right
op	29:27	0:0	4	[
water	29:28	0:0	4	fft_len
op	29:35	0:0	4	-
water	29:36	0:0	4	x
op	29:37	0:0	4	]
op	29:38	0:0	4	.
water	29:39	0:0	4	im
op	29:42	0:0	4	=
op	29:44	0:0	4	-
water	29:45	0:0	4	s
op	29:46	0:0	4	->
water	29:48	0:0	4	fft_result_right
op	29:64	0:0	4	[
water	29:65	0:0	4	x
op	29:66	0:0	4	]
op	29:67	0:0	4	.
water	29:68	0:0	4	im
water	29:70	0:0	4	;
water	30:8	0:0	4	s
op	30:9	0:0	4	->
water	30:11	0:0	4	fft_result_left
op	30:26	0:0	4	[
water	30:27	0:0	4	x
op	30:28	0:0	4	]
op	30:29	0:0	4	.
water	30:30	0:0	4	re
op	30:33	0:0	4	=
water	30:35	0:0	4	s
op	30:36	0:0	4	->
water	30:38	0:0	4	fft_result_left
op	30:53	0:0	4	[
water	30:54	0:0	4	x
op	30:55	0:0	4	]
op	30:56	0:0	4	.
water	30:57	0:0	4	re
op	30:60	0:0	4	+
water	30:62	0:0	4	s
op	30:63	0:0	4	->
water	30:65	0:0	4	fft_result_left
op	30:80	0:0	4	[
water	30:81	0:0	4	fft_len
op	30:88	0:0	4	-
water	30:89	0:0	4	x
op	30:90	0:0	4	]
op	30:91	0:0	4	.
water	30:92	0:0	4	re
water	30:94	0:0	4	;
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	fft_result_left
op	31:26	0:0	4	[
water	31:27	0:0	4	x
op	31:28	0:0	4	]
op	31:29	0:0	4	.
water	31:30	0:0	4	im
op	31:33	0:0	4	=
water	31:35	0:0	4	tmpy
water	31:39	0:0	4	;
water	32:8	0:0	4	s
op	32:9	0:0	4	->
water	32:11	0:0	4	fft_result_left
op	32:26	0:0	4	[
water	32:27	0:0	4	fft_len
op	32:34	0:0	4	-
water	32:35	0:0	4	x
op	32:36	0:0	4	]
op	32:37	0:0	4	.
water	32:38	0:0	4	re
op	32:41	0:0	4	=
water	32:43	0:0	4	s
op	32:44	0:0	4	->
water	32:46	0:0	4	fft_result_left
op	32:61	0:0	4	[
water	32:62	0:0	4	x
op	32:63	0:0	4	]
op	32:64	0:0	4	.
water	32:65	0:0	4	re
water	32:67	0:0	4	;
water	33:8	0:0	4	s
op	33:9	0:0	4	->
water	33:11	0:0	4	fft_result_left
op	33:26	0:0	4	[
water	33:27	0:0	4	fft_len
op	33:34	0:0	4	-
water	33:35	0:0	4	x
op	33:36	0:0	4	]
op	33:37	0:0	4	.
water	33:38	0:0	4	im
op	33:41	0:0	4	=
op	33:43	0:0	4	-
water	33:44	0:0	4	s
op	33:45	0:0	4	->
water	33:47	0:0	4	fft_result_left
op	33:62	0:0	4	[
water	33:63	0:0	4	x
op	33:64	0:0	4	]
op	33:65	0:0	4	.
water	33:66	0:0	4	im
water	33:68	0:0	4	;
water	34:4	0:0	4	}
for	36:4	86:4	2	(x = 0 ;x < VIDEO_WIDTH;x ++)
forinit	36:9	36:14	3	x = 0 ;
water	36:9	0:0	4	x
op	36:11	0:0	4	=
water	36:13	0:0	4	0
water	36:14	0:0	4	;
cond	36:16	36:20	3	x < VIDEO_WIDTH
water	36:16	0:0	4	x
op	36:18	0:0	4	<
water	36:20	0:0	4	VIDEO_WIDTH
forexpr	36:33	36:34	3	x ++
water	36:33	0:0	4	x
op	36:34	0:0	4	++
stmts	36:38	86:4	3	
water	36:38	0:0	4	{
decl	37:8	37:13	4	int	u
decl	38:8	38:28	4	FFTComplex	l
op	38:21	0:0	4	=
water	38:23	0:0	4	{
water	38:24	0:0	4	0
water	38:25	0:0	4	,
water	38:26	0:0	4	0
water	38:27	0:0	4	}
decl	39:8	39:28	4	FFTComplex	r
op	39:21	0:0	4	=
water	39:23	0:0	4	{
water	39:24	0:0	4	0
water	39:25	0:0	4	,
water	39:26	0:0	4	0
water	39:27	0:0	4	}
for	40:8	47:8	4	(u = 0 ;u < s -> coeffs_len [ x ];u ++)
forinit	40:13	40:18	5	u = 0 ;
water	40:13	0:0	6	u
op	40:15	0:0	6	=
water	40:17	0:0	6	0
water	40:18	0:0	6	;
cond	40:20	40:39	5	u < s -> coeffs_len [ x ]
water	40:20	0:0	6	u
op	40:22	0:0	6	<
water	40:24	0:0	6	s
op	40:25	0:0	6	->
water	40:27	0:0	6	coeffs_len
op	40:37	0:0	6	[
water	40:38	0:0	6	x
op	40:39	0:0	6	]
forexpr	40:42	40:43	5	u ++
water	40:42	0:0	6	u
op	40:43	0:0	6	++
stmts	40:47	47:8	5	
water	40:47	0:0	6	{
decl	41:12	41:51	6	FFTSample	value
op	41:28	0:0	6	=
water	41:30	0:0	6	s
op	41:31	0:0	6	->
water	41:33	0:0	6	coeffs
op	41:39	0:0	6	[
water	41:40	0:0	6	x
op	41:41	0:0	6	]
op	41:42	0:0	6	[
water	41:43	0:0	6	u
op	41:44	0:0	6	]
op	41:45	0:0	6	.
water	41:46	0:0	6	value
decl	42:12	42:45	6	int	index
op	42:22	0:0	6	=
water	42:24	0:0	6	s
op	42:25	0:0	6	->
water	42:27	0:0	6	coeffs
op	42:33	0:0	6	[
water	42:34	0:0	6	x
op	42:35	0:0	6	]
op	42:36	0:0	6	[
water	42:37	0:0	6	u
op	42:38	0:0	6	]
op	42:39	0:0	6	.
water	42:40	0:0	6	index
water	43:12	0:0	6	l
op	43:13	0:0	6	.
water	43:14	0:0	6	re
op	43:17	0:0	6	+=
water	43:20	0:0	6	value
op	43:26	0:0	6	*
water	43:28	0:0	6	s
op	43:29	0:0	6	->
water	43:31	0:0	6	fft_result_left
op	43:46	0:0	6	[
water	43:47	0:0	6	index
op	43:52	0:0	6	]
op	43:53	0:0	6	.
water	43:54	0:0	6	re
water	43:56	0:0	6	;
water	44:12	0:0	6	l
op	44:13	0:0	6	.
water	44:14	0:0	6	im
op	44:17	0:0	6	+=
water	44:20	0:0	6	value
op	44:26	0:0	6	*
water	44:28	0:0	6	s
op	44:29	0:0	6	->
water	44:31	0:0	6	fft_result_left
op	44:46	0:0	6	[
water	44:47	0:0	6	index
op	44:52	0:0	6	]
op	44:53	0:0	6	.
water	44:54	0:0	6	im
water	44:56	0:0	6	;
water	45:12	0:0	6	r
op	45:13	0:0	6	.
water	45:14	0:0	6	re
op	45:17	0:0	6	+=
water	45:20	0:0	6	value
op	45:26	0:0	6	*
water	45:28	0:0	6	s
op	45:29	0:0	6	->
water	45:31	0:0	6	fft_result_right
op	45:47	0:0	6	[
water	45:48	0:0	6	index
op	45:53	0:0	6	]
op	45:54	0:0	6	.
water	45:55	0:0	6	re
water	45:57	0:0	6	;
water	46:12	0:0	6	r
op	46:13	0:0	6	.
water	46:14	0:0	6	im
op	46:17	0:0	6	+=
water	46:20	0:0	6	value
op	46:26	0:0	6	*
water	46:28	0:0	6	s
op	46:29	0:0	6	->
water	46:31	0:0	6	fft_result_right
op	46:47	0:0	6	[
water	46:48	0:0	6	index
op	46:53	0:0	6	]
op	46:54	0:0	6	.
water	46:55	0:0	6	im
water	46:57	0:0	6	;
water	47:8	0:0	6	}
water	49:8	0:0	4	result
op	49:14	0:0	4	[
water	49:15	0:0	4	x
op	49:16	0:0	4	]
op	49:17	0:0	4	[
water	49:18	0:0	4	0
op	49:19	0:0	4	]
op	49:21	0:0	4	=
water	49:23	0:0	4	l
op	49:24	0:0	4	.
water	49:25	0:0	4	re
op	49:28	0:0	4	*
water	49:30	0:0	4	l
op	49:31	0:0	4	.
water	49:32	0:0	4	re
op	49:35	0:0	4	+
water	49:37	0:0	4	l
op	49:38	0:0	4	.
water	49:39	0:0	4	im
op	49:42	0:0	4	*
water	49:44	0:0	4	l
op	49:45	0:0	4	.
water	49:46	0:0	4	im
water	49:48	0:0	4	;
water	50:8	0:0	4	result
op	50:14	0:0	4	[
water	50:15	0:0	4	x
op	50:16	0:0	4	]
op	50:17	0:0	4	[
water	50:18	0:0	4	2
op	50:19	0:0	4	]
op	50:21	0:0	4	=
water	50:23	0:0	4	r
op	50:24	0:0	4	.
water	50:25	0:0	4	re
op	50:28	0:0	4	*
water	50:30	0:0	4	r
op	50:31	0:0	4	.
water	50:32	0:0	4	re
op	50:35	0:0	4	+
water	50:37	0:0	4	r
op	50:38	0:0	4	.
water	50:39	0:0	4	im
op	50:42	0:0	4	*
water	50:44	0:0	4	r
op	50:45	0:0	4	.
water	50:46	0:0	4	im
water	50:48	0:0	4	;
water	51:8	0:0	4	result
op	51:14	0:0	4	[
water	51:15	0:0	4	x
op	51:16	0:0	4	]
op	51:17	0:0	4	[
water	51:18	0:0	4	1
op	51:19	0:0	4	]
op	51:21	0:0	4	=
water	51:23	0:0	4	0
op	51:24	0:0	4	.
water	51:25	0:0	4	5
water	51:26	0:0	4	f
op	51:28	0:0	4	*
water	51:30	0:0	4	(
water	51:31	0:0	4	result
op	51:37	0:0	4	[
water	51:38	0:0	4	x
op	51:39	0:0	4	]
op	51:40	0:0	4	[
water	51:41	0:0	4	0
op	51:42	0:0	4	]
op	51:44	0:0	4	+
water	51:46	0:0	4	result
op	51:52	0:0	4	[
water	51:53	0:0	4	x
op	51:54	0:0	4	]
op	51:55	0:0	4	[
water	51:56	0:0	4	2
op	51:57	0:0	4	]
water	51:58	0:0	4	)
water	51:59	0:0	4	;
if	52:8	53:39	4	(s -> gamma2 == 1 . 0 f)
cond	52:12	52:28	5	s -> gamma2 == 1 . 0 f
water	52:12	0:0	6	s
op	52:13	0:0	6	->
water	52:15	0:0	6	gamma2
op	52:22	0:0	6	==
water	52:25	0:0	6	1
op	52:26	0:0	6	.
water	52:27	0:0	6	0
water	52:28	0:0	6	f
stmts	53:12	53:39	5	
water	53:12	0:0	6	result
op	53:18	0:0	6	[
water	53:19	0:0	6	x
op	53:20	0:0	6	]
op	53:21	0:0	6	[
water	53:22	0:0	6	3
op	53:23	0:0	6	]
op	53:25	0:0	6	=
water	53:27	0:0	6	result
op	53:33	0:0	6	[
water	53:34	0:0	6	x
op	53:35	0:0	6	]
op	53:36	0:0	6	[
water	53:37	0:0	6	1
op	53:38	0:0	6	]
water	53:39	0:0	6	;
else	54:8	55:46	4
stmts	54:13	55:46	5	
if	54:13	55:46	6	(s -> gamma2 == 2 . 0 f)
cond	54:17	54:33	7	s -> gamma2 == 2 . 0 f
water	54:17	0:0	8	s
op	54:18	0:0	8	->
water	54:20	0:0	8	gamma2
op	54:27	0:0	8	==
water	54:30	0:0	8	2
op	54:31	0:0	8	.
water	54:32	0:0	8	0
water	54:33	0:0	8	f
stmts	55:12	55:46	7	
water	55:12	0:0	8	result
op	55:18	0:0	8	[
water	55:19	0:0	8	x
op	55:20	0:0	8	]
op	55:21	0:0	8	[
water	55:22	0:0	8	3
op	55:23	0:0	8	]
op	55:25	0:0	8	=
call	55:27	55:45	8	sqrtf
arg	55:33	55:45	9	result[x][1]
water	55:33	0:0	10	result
op	55:39	0:0	10	[
water	55:40	0:0	10	x
op	55:41	0:0	10	]
op	55:42	0:0	10	[
water	55:43	0:0	10	1
op	55:44	0:0	10	]
water	55:46	0:0	8	;
else	56:8	57:46	4
stmts	56:13	57:46	5	
if	56:13	57:46	6	(s -> gamma2 == 3 . 0 f)
cond	56:17	56:33	7	s -> gamma2 == 3 . 0 f
water	56:17	0:0	8	s
op	56:18	0:0	8	->
water	56:20	0:0	8	gamma2
op	56:27	0:0	8	==
water	56:30	0:0	8	3
op	56:31	0:0	8	.
water	56:32	0:0	8	0
water	56:33	0:0	8	f
stmts	57:12	57:46	7	
water	57:12	0:0	8	result
op	57:18	0:0	8	[
water	57:19	0:0	8	x
op	57:20	0:0	8	]
op	57:21	0:0	8	[
water	57:22	0:0	8	3
op	57:23	0:0	8	]
op	57:25	0:0	8	=
call	57:27	57:45	8	cbrtf
arg	57:33	57:45	9	result[x][1]
water	57:33	0:0	10	result
op	57:39	0:0	10	[
water	57:40	0:0	10	x
op	57:41	0:0	10	]
op	57:42	0:0	10	[
water	57:43	0:0	10	1
op	57:44	0:0	10	]
water	57:46	0:0	8	;
else	58:8	59:53	4
stmts	58:13	59:53	5	
if	58:13	59:53	6	(s -> gamma2 == 4 . 0 f)
cond	58:17	58:33	7	s -> gamma2 == 4 . 0 f
water	58:17	0:0	8	s
op	58:18	0:0	8	->
water	58:20	0:0	8	gamma2
op	58:27	0:0	8	==
water	58:30	0:0	8	4
op	58:31	0:0	8	.
water	58:32	0:0	8	0
water	58:33	0:0	8	f
stmts	59:12	59:53	7	
water	59:12	0:0	8	result
op	59:18	0:0	8	[
water	59:19	0:0	8	x
op	59:20	0:0	8	]
op	59:21	0:0	8	[
water	59:22	0:0	8	3
op	59:23	0:0	8	]
op	59:25	0:0	8	=
call	59:27	59:52	8	sqrtf
arg	59:33	59:52	9	sqrtf(result[x][1])
call	59:33	59:51	10	sqrtf
arg	59:39	59:51	11	result[x][1]
water	59:39	0:0	12	result
op	59:45	0:0	12	[
water	59:46	0:0	12	x
op	59:47	0:0	12	]
op	59:48	0:0	12	[
water	59:49	0:0	12	1
op	59:50	0:0	12	]
water	59:53	0:0	8	;
else	60:8	61:72	4
stmts	61:12	61:72	5	
water	61:12	0:0	6	result
op	61:18	0:0	6	[
water	61:19	0:0	6	x
op	61:20	0:0	6	]
op	61:21	0:0	6	[
water	61:22	0:0	6	3
op	61:23	0:0	6	]
op	61:25	0:0	6	=
call	61:27	61:71	6	expf
arg	61:32	61:71	7	logf(result[x][1])*(1.0f/s->gamma2)
call	61:32	61:49	8	logf
arg	61:37	61:49	9	result[x][1]
water	61:37	0:0	10	result
op	61:43	0:0	10	[
water	61:44	0:0	10	x
op	61:45	0:0	10	]
op	61:46	0:0	10	[
water	61:47	0:0	10	1
op	61:48	0:0	10	]
op	61:51	0:0	8	*
water	61:53	0:0	8	(
water	61:54	0:0	8	1
op	61:55	0:0	8	.
water	61:56	0:0	8	0
water	61:57	0:0	8	f
op	61:59	0:0	8	/
water	61:61	0:0	8	s
op	61:62	0:0	8	->
water	61:64	0:0	8	gamma2
water	61:70	0:0	8	)
water	61:72	0:0	6	;
water	62:8	0:0	4	result
op	62:14	0:0	4	[
water	62:15	0:0	4	x
op	62:16	0:0	4	]
op	62:17	0:0	4	[
water	62:18	0:0	4	0
op	62:19	0:0	4	]
op	62:21	0:0	4	=
call	62:23	62:47	4	FFMIN
arg	62:29	62:33	5	1.0f
water	62:29	0:0	6	1
op	62:30	0:0	6	.
water	62:31	0:0	6	0
water	62:32	0:0	6	f
arg	62:35	62:47	5	result[x][0]
water	62:35	0:0	6	result
op	62:41	0:0	6	[
water	62:42	0:0	6	x
op	62:43	0:0	6	]
op	62:44	0:0	6	[
water	62:45	0:0	6	0
op	62:46	0:0	6	]
water	62:48	0:0	4	;
water	63:8	0:0	4	result
op	63:14	0:0	4	[
water	63:15	0:0	4	x
op	63:16	0:0	4	]
op	63:17	0:0	4	[
water	63:18	0:0	4	1
op	63:19	0:0	4	]
op	63:21	0:0	4	=
call	63:23	63:47	4	FFMIN
arg	63:29	63:33	5	1.0f
water	63:29	0:0	6	1
op	63:30	0:0	6	.
water	63:31	0:0	6	0
water	63:32	0:0	6	f
arg	63:35	63:47	5	result[x][1]
water	63:35	0:0	6	result
op	63:41	0:0	6	[
water	63:42	0:0	6	x
op	63:43	0:0	6	]
op	63:44	0:0	6	[
water	63:45	0:0	6	1
op	63:46	0:0	6	]
water	63:48	0:0	4	;
water	64:8	0:0	4	result
op	64:14	0:0	4	[
water	64:15	0:0	4	x
op	64:16	0:0	4	]
op	64:17	0:0	4	[
water	64:18	0:0	4	2
op	64:19	0:0	4	]
op	64:21	0:0	4	=
call	64:23	64:47	4	FFMIN
arg	64:29	64:33	5	1.0f
water	64:29	0:0	6	1
op	64:30	0:0	6	.
water	64:31	0:0	6	0
water	64:32	0:0	6	f
arg	64:35	64:47	5	result[x][2]
water	64:35	0:0	6	result
op	64:41	0:0	6	[
water	64:42	0:0	6	x
op	64:43	0:0	6	]
op	64:44	0:0	6	[
water	64:45	0:0	6	2
op	64:46	0:0	6	]
water	64:48	0:0	4	;
if	65:8	69:8	4	(s -> gamma == 1 . 0 f)
cond	65:12	65:27	5	s -> gamma == 1 . 0 f
water	65:12	0:0	6	s
op	65:13	0:0	6	->
water	65:15	0:0	6	gamma
op	65:21	0:0	6	==
water	65:24	0:0	6	1
op	65:25	0:0	6	.
water	65:26	0:0	6	0
water	65:27	0:0	6	f
stmts	65:30	69:8	5	
water	65:30	0:0	6	{
water	66:12	0:0	6	result
op	66:18	0:0	6	[
water	66:19	0:0	6	x
op	66:20	0:0	6	]
op	66:21	0:0	6	[
water	66:22	0:0	6	0
op	66:23	0:0	6	]
op	66:25	0:0	6	=
water	66:27	0:0	6	255
op	66:30	0:0	6	.
water	66:31	0:0	6	0
water	66:32	0:0	6	f
op	66:34	0:0	6	*
water	66:36	0:0	6	result
op	66:42	0:0	6	[
water	66:43	0:0	6	x
op	66:44	0:0	6	]
op	66:45	0:0	6	[
water	66:46	0:0	6	0
op	66:47	0:0	6	]
water	66:48	0:0	6	;
water	67:12	0:0	6	result
op	67:18	0:0	6	[
water	67:19	0:0	6	x
op	67:20	0:0	6	]
op	67:21	0:0	6	[
water	67:22	0:0	6	1
op	67:23	0:0	6	]
op	67:25	0:0	6	=
water	67:27	0:0	6	255
op	67:30	0:0	6	.
water	67:31	0:0	6	0
water	67:32	0:0	6	f
op	67:34	0:0	6	*
water	67:36	0:0	6	result
op	67:42	0:0	6	[
water	67:43	0:0	6	x
op	67:44	0:0	6	]
op	67:45	0:0	6	[
water	67:46	0:0	6	1
op	67:47	0:0	6	]
water	67:48	0:0	6	;
water	68:12	0:0	6	result
op	68:18	0:0	6	[
water	68:19	0:0	6	x
op	68:20	0:0	6	]
op	68:21	0:0	6	[
water	68:22	0:0	6	2
op	68:23	0:0	6	]
op	68:25	0:0	6	=
water	68:27	0:0	6	255
op	68:30	0:0	6	.
water	68:31	0:0	6	0
water	68:32	0:0	6	f
op	68:34	0:0	6	*
water	68:36	0:0	6	result
op	68:42	0:0	6	[
water	68:43	0:0	6	x
op	68:44	0:0	6	]
op	68:45	0:0	6	[
water	68:46	0:0	6	2
op	68:47	0:0	6	]
water	68:48	0:0	6	;
water	69:8	0:0	6	}
else	69:10	73:8	4
stmts	69:15	73:8	5	
if	69:15	73:8	6	(s -> gamma == 2 . 0 f)
cond	69:19	69:34	7	s -> gamma == 2 . 0 f
water	69:19	0:0	8	s
op	69:20	0:0	8	->
water	69:22	0:0	8	gamma
op	69:28	0:0	8	==
water	69:31	0:0	8	2
op	69:32	0:0	8	.
water	69:33	0:0	8	0
water	69:34	0:0	8	f
stmts	69:37	73:8	7	
water	69:37	0:0	8	{
water	70:12	0:0	8	result
op	70:18	0:0	8	[
water	70:19	0:0	8	x
op	70:20	0:0	8	]
op	70:21	0:0	8	[
water	70:22	0:0	8	0
op	70:23	0:0	8	]
op	70:25	0:0	8	=
water	70:27	0:0	8	255
op	70:30	0:0	8	.
water	70:31	0:0	8	0
water	70:32	0:0	8	f
call	70:34	70:54	8	*sqrtf
arg	70:42	70:54	9	result[x][0]
water	70:42	0:0	10	result
op	70:48	0:0	10	[
water	70:49	0:0	10	x
op	70:50	0:0	10	]
op	70:51	0:0	10	[
water	70:52	0:0	10	0
op	70:53	0:0	10	]
water	70:55	0:0	8	;
water	71:12	0:0	8	result
op	71:18	0:0	8	[
water	71:19	0:0	8	x
op	71:20	0:0	8	]
op	71:21	0:0	8	[
water	71:22	0:0	8	1
op	71:23	0:0	8	]
op	71:25	0:0	8	=
water	71:27	0:0	8	255
op	71:30	0:0	8	.
water	71:31	0:0	8	0
water	71:32	0:0	8	f
call	71:34	71:54	8	*sqrtf
arg	71:42	71:54	9	result[x][1]
water	71:42	0:0	10	result
op	71:48	0:0	10	[
water	71:49	0:0	10	x
op	71:50	0:0	10	]
op	71:51	0:0	10	[
water	71:52	0:0	10	1
op	71:53	0:0	10	]
water	71:55	0:0	8	;
water	72:12	0:0	8	result
op	72:18	0:0	8	[
water	72:19	0:0	8	x
op	72:20	0:0	8	]
op	72:21	0:0	8	[
water	72:22	0:0	8	2
op	72:23	0:0	8	]
op	72:25	0:0	8	=
water	72:27	0:0	8	255
op	72:30	0:0	8	.
water	72:31	0:0	8	0
water	72:32	0:0	8	f
call	72:34	72:54	8	*sqrtf
arg	72:42	72:54	9	result[x][2]
water	72:42	0:0	10	result
op	72:48	0:0	10	[
water	72:49	0:0	10	x
op	72:50	0:0	10	]
op	72:51	0:0	10	[
water	72:52	0:0	10	2
op	72:53	0:0	10	]
water	72:55	0:0	8	;
water	73:8	0:0	8	}
else	73:10	77:8	4
stmts	73:15	77:8	5	
if	73:15	77:8	6	(s -> gamma == 3 . 0 f)
cond	73:19	73:34	7	s -> gamma == 3 . 0 f
water	73:19	0:0	8	s
op	73:20	0:0	8	->
water	73:22	0:0	8	gamma
op	73:28	0:0	8	==
water	73:31	0:0	8	3
op	73:32	0:0	8	.
water	73:33	0:0	8	0
water	73:34	0:0	8	f
stmts	73:37	77:8	7	
water	73:37	0:0	8	{
water	74:12	0:0	8	result
op	74:18	0:0	8	[
water	74:19	0:0	8	x
op	74:20	0:0	8	]
op	74:21	0:0	8	[
water	74:22	0:0	8	0
op	74:23	0:0	8	]
op	74:25	0:0	8	=
water	74:27	0:0	8	255
op	74:30	0:0	8	.
water	74:31	0:0	8	0
water	74:32	0:0	8	f
call	74:34	74:54	8	*cbrtf
arg	74:42	74:54	9	result[x][0]
water	74:42	0:0	10	result
op	74:48	0:0	10	[
water	74:49	0:0	10	x
op	74:50	0:0	10	]
op	74:51	0:0	10	[
water	74:52	0:0	10	0
op	74:53	0:0	10	]
water	74:55	0:0	8	;
water	75:12	0:0	8	result
op	75:18	0:0	8	[
water	75:19	0:0	8	x
op	75:20	0:0	8	]
op	75:21	0:0	8	[
water	75:22	0:0	8	1
op	75:23	0:0	8	]
op	75:25	0:0	8	=
water	75:27	0:0	8	255
op	75:30	0:0	8	.
water	75:31	0:0	8	0
water	75:32	0:0	8	f
call	75:34	75:54	8	*cbrtf
arg	75:42	75:54	9	result[x][1]
water	75:42	0:0	10	result
op	75:48	0:0	10	[
water	75:49	0:0	10	x
op	75:50	0:0	10	]
op	75:51	0:0	10	[
water	75:52	0:0	10	1
op	75:53	0:0	10	]
water	75:55	0:0	8	;
water	76:12	0:0	8	result
op	76:18	0:0	8	[
water	76:19	0:0	8	x
op	76:20	0:0	8	]
op	76:21	0:0	8	[
water	76:22	0:0	8	2
op	76:23	0:0	8	]
op	76:25	0:0	8	=
water	76:27	0:0	8	255
op	76:30	0:0	8	.
water	76:31	0:0	8	0
water	76:32	0:0	8	f
call	76:34	76:54	8	*cbrtf
arg	76:42	76:54	9	result[x][2]
water	76:42	0:0	10	result
op	76:48	0:0	10	[
water	76:49	0:0	10	x
op	76:50	0:0	10	]
op	76:51	0:0	10	[
water	76:52	0:0	10	2
op	76:53	0:0	10	]
water	76:55	0:0	8	;
water	77:8	0:0	8	}
else	77:10	81:8	4
stmts	77:15	81:8	5	
if	77:15	81:8	6	(s -> gamma == 4 . 0 f)
cond	77:19	77:34	7	s -> gamma == 4 . 0 f
water	77:19	0:0	8	s
op	77:20	0:0	8	->
water	77:22	0:0	8	gamma
op	77:28	0:0	8	==
water	77:31	0:0	8	4
op	77:32	0:0	8	.
water	77:33	0:0	8	0
water	77:34	0:0	8	f
stmts	77:37	81:8	7	
water	77:37	0:0	8	{
water	78:12	0:0	8	result
op	78:18	0:0	8	[
water	78:19	0:0	8	x
op	78:20	0:0	8	]
op	78:21	0:0	8	[
water	78:22	0:0	8	0
op	78:23	0:0	8	]
op	78:25	0:0	8	=
water	78:27	0:0	8	255
op	78:30	0:0	8	.
water	78:31	0:0	8	0
water	78:32	0:0	8	f
call	78:34	78:61	8	*sqrtf
arg	78:42	78:61	9	sqrtf(result[x][0])
call	78:42	78:60	10	sqrtf
arg	78:48	78:60	11	result[x][0]
water	78:48	0:0	12	result
op	78:54	0:0	12	[
water	78:55	0:0	12	x
op	78:56	0:0	12	]
op	78:57	0:0	12	[
water	78:58	0:0	12	0
op	78:59	0:0	12	]
water	78:62	0:0	8	;
water	79:12	0:0	8	result
op	79:18	0:0	8	[
water	79:19	0:0	8	x
op	79:20	0:0	8	]
op	79:21	0:0	8	[
water	79:22	0:0	8	1
op	79:23	0:0	8	]
op	79:25	0:0	8	=
water	79:27	0:0	8	255
op	79:30	0:0	8	.
water	79:31	0:0	8	0
water	79:32	0:0	8	f
call	79:34	79:61	8	*sqrtf
arg	79:42	79:61	9	sqrtf(result[x][1])
call	79:42	79:60	10	sqrtf
arg	79:48	79:60	11	result[x][1]
water	79:48	0:0	12	result
op	79:54	0:0	12	[
water	79:55	0:0	12	x
op	79:56	0:0	12	]
op	79:57	0:0	12	[
water	79:58	0:0	12	1
op	79:59	0:0	12	]
water	79:62	0:0	8	;
water	80:12	0:0	8	result
op	80:18	0:0	8	[
water	80:19	0:0	8	x
op	80:20	0:0	8	]
op	80:21	0:0	8	[
water	80:22	0:0	8	2
op	80:23	0:0	8	]
op	80:25	0:0	8	=
water	80:27	0:0	8	255
op	80:30	0:0	8	.
water	80:31	0:0	8	0
water	80:32	0:0	8	f
call	80:34	80:61	8	*sqrtf
arg	80:42	80:61	9	sqrtf(result[x][2])
call	80:42	80:60	10	sqrtf
arg	80:48	80:60	11	result[x][2]
water	80:48	0:0	12	result
op	80:54	0:0	12	[
water	80:55	0:0	12	x
op	80:56	0:0	12	]
op	80:57	0:0	12	[
water	80:58	0:0	12	2
op	80:59	0:0	12	]
water	80:62	0:0	8	;
water	81:8	0:0	8	}
else	81:10	85:8	4
stmts	81:15	85:8	5	
water	81:15	0:0	6	{
water	82:12	0:0	6	result
op	82:18	0:0	6	[
water	82:19	0:0	6	x
op	82:20	0:0	6	]
op	82:21	0:0	6	[
water	82:22	0:0	6	0
op	82:23	0:0	6	]
op	82:25	0:0	6	=
water	82:27	0:0	6	255
op	82:30	0:0	6	.
water	82:31	0:0	6	0
water	82:32	0:0	6	f
call	82:34	82:79	6	*expf
arg	82:41	82:79	7	logf(result[x][0])*(1.0f/s->gamma)
call	82:41	82:58	8	logf
arg	82:46	82:58	9	result[x][0]
water	82:46	0:0	10	result
op	82:52	0:0	10	[
water	82:53	0:0	10	x
op	82:54	0:0	10	]
op	82:55	0:0	10	[
water	82:56	0:0	10	0
op	82:57	0:0	10	]
op	82:60	0:0	8	*
water	82:62	0:0	8	(
water	82:63	0:0	8	1
op	82:64	0:0	8	.
water	82:65	0:0	8	0
water	82:66	0:0	8	f
op	82:68	0:0	8	/
water	82:70	0:0	8	s
op	82:71	0:0	8	->
water	82:73	0:0	8	gamma
water	82:78	0:0	8	)
water	82:80	0:0	6	;
water	83:12	0:0	6	result
op	83:18	0:0	6	[
water	83:19	0:0	6	x
op	83:20	0:0	6	]
op	83:21	0:0	6	[
water	83:22	0:0	6	1
op	83:23	0:0	6	]
op	83:25	0:0	6	=
water	83:27	0:0	6	255
op	83:30	0:0	6	.
water	83:31	0:0	6	0
water	83:32	0:0	6	f
call	83:34	83:79	6	*expf
arg	83:41	83:79	7	logf(result[x][1])*(1.0f/s->gamma)
call	83:41	83:58	8	logf
arg	83:46	83:58	9	result[x][1]
water	83:46	0:0	10	result
op	83:52	0:0	10	[
water	83:53	0:0	10	x
op	83:54	0:0	10	]
op	83:55	0:0	10	[
water	83:56	0:0	10	1
op	83:57	0:0	10	]
op	83:60	0:0	8	*
water	83:62	0:0	8	(
water	83:63	0:0	8	1
op	83:64	0:0	8	.
water	83:65	0:0	8	0
water	83:66	0:0	8	f
op	83:68	0:0	8	/
water	83:70	0:0	8	s
op	83:71	0:0	8	->
water	83:73	0:0	8	gamma
water	83:78	0:0	8	)
water	83:80	0:0	6	;
water	84:12	0:0	6	result
op	84:18	0:0	6	[
water	84:19	0:0	6	x
op	84:20	0:0	6	]
op	84:21	0:0	6	[
water	84:22	0:0	6	2
op	84:23	0:0	6	]
op	84:25	0:0	6	=
water	84:27	0:0	6	255
op	84:30	0:0	6	.
water	84:31	0:0	6	0
water	84:32	0:0	6	f
call	84:34	84:79	6	*expf
arg	84:41	84:79	7	logf(result[x][2])*(1.0f/s->gamma)
call	84:41	84:58	8	logf
arg	84:46	84:58	9	result[x][2]
water	84:46	0:0	10	result
op	84:52	0:0	10	[
water	84:53	0:0	10	x
op	84:54	0:0	10	]
op	84:55	0:0	10	[
water	84:56	0:0	10	2
op	84:57	0:0	10	]
op	84:60	0:0	8	*
water	84:62	0:0	8	(
water	84:63	0:0	8	1
op	84:64	0:0	8	.
water	84:65	0:0	8	0
water	84:66	0:0	8	f
op	84:68	0:0	8	/
water	84:70	0:0	8	s
op	84:71	0:0	8	->
water	84:73	0:0	8	gamma
water	84:78	0:0	8	)
water	84:80	0:0	6	;
water	85:8	0:0	6	}
water	86:4	0:0	4	}
if	87:4	94:4	2	(! s -> fullhd)
cond	87:8	87:12	3	! s -> fullhd
op	87:8	0:0	4	!
water	87:9	0:0	4	s
op	87:10	0:0	4	->
water	87:12	0:0	4	fullhd
stmts	87:20	94:4	3	
water	87:20	0:0	4	{
for	88:8	93:8	4	(x = 0 ;x < video_width;x ++)
forinit	88:13	88:18	5	x = 0 ;
water	88:13	0:0	6	x
op	88:15	0:0	6	=
water	88:17	0:0	6	0
water	88:18	0:0	6	;
cond	88:20	88:24	5	x < video_width
water	88:20	0:0	6	x
op	88:22	0:0	6	<
water	88:24	0:0	6	video_width
forexpr	88:37	88:38	5	x ++
water	88:37	0:0	6	x
op	88:38	0:0	6	++
stmts	88:42	93:8	5	
water	88:42	0:0	6	{
water	89:12	0:0	6	result
op	89:18	0:0	6	[
water	89:19	0:0	6	x
op	89:20	0:0	6	]
op	89:21	0:0	6	[
water	89:22	0:0	6	0
op	89:23	0:0	6	]
op	89:25	0:0	6	=
water	89:27	0:0	6	0
op	89:28	0:0	6	.
water	89:29	0:0	6	5
water	89:30	0:0	6	f
op	89:32	0:0	6	*
water	89:34	0:0	6	(
water	89:35	0:0	6	result
op	89:41	0:0	6	[
water	89:42	0:0	6	2
op	89:43	0:0	6	*
water	89:44	0:0	6	x
op	89:45	0:0	6	]
op	89:46	0:0	6	[
water	89:47	0:0	6	0
op	89:48	0:0	6	]
op	89:50	0:0	6	+
water	89:52	0:0	6	result
op	89:58	0:0	6	[
water	89:59	0:0	6	2
op	89:60	0:0	6	*
water	89:61	0:0	6	x
op	89:62	0:0	6	+
water	89:63	0:0	6	1
op	89:64	0:0	6	]
op	89:65	0:0	6	[
water	89:66	0:0	6	0
op	89:67	0:0	6	]
water	89:68	0:0	6	)
water	89:69	0:0	6	;
water	90:12	0:0	6	result
op	90:18	0:0	6	[
water	90:19	0:0	6	x
op	90:20	0:0	6	]
op	90:21	0:0	6	[
water	90:22	0:0	6	1
op	90:23	0:0	6	]
op	90:25	0:0	6	=
water	90:27	0:0	6	0
op	90:28	0:0	6	.
water	90:29	0:0	6	5
water	90:30	0:0	6	f
op	90:32	0:0	6	*
water	90:34	0:0	6	(
water	90:35	0:0	6	result
op	90:41	0:0	6	[
water	90:42	0:0	6	2
op	90:43	0:0	6	*
water	90:44	0:0	6	x
op	90:45	0:0	6	]
op	90:46	0:0	6	[
water	90:47	0:0	6	1
op	90:48	0:0	6	]
op	90:50	0:0	6	+
water	90:52	0:0	6	result
op	90:58	0:0	6	[
water	90:59	0:0	6	2
op	90:60	0:0	6	*
water	90:61	0:0	6	x
op	90:62	0:0	6	+
water	90:63	0:0	6	1
op	90:64	0:0	6	]
op	90:65	0:0	6	[
water	90:66	0:0	6	1
op	90:67	0:0	6	]
water	90:68	0:0	6	)
water	90:69	0:0	6	;
water	91:12	0:0	6	result
op	91:18	0:0	6	[
water	91:19	0:0	6	x
op	91:20	0:0	6	]
op	91:21	0:0	6	[
water	91:22	0:0	6	2
op	91:23	0:0	6	]
op	91:25	0:0	6	=
water	91:27	0:0	6	0
op	91:28	0:0	6	.
water	91:29	0:0	6	5
water	91:30	0:0	6	f
op	91:32	0:0	6	*
water	91:34	0:0	6	(
water	91:35	0:0	6	result
op	91:41	0:0	6	[
water	91:42	0:0	6	2
op	91:43	0:0	6	*
water	91:44	0:0	6	x
op	91:45	0:0	6	]
op	91:46	0:0	6	[
water	91:47	0:0	6	2
op	91:48	0:0	6	]
op	91:50	0:0	6	+
water	91:52	0:0	6	result
op	91:58	0:0	6	[
water	91:59	0:0	6	2
op	91:60	0:0	6	*
water	91:61	0:0	6	x
op	91:62	0:0	6	+
water	91:63	0:0	6	1
op	91:64	0:0	6	]
op	91:65	0:0	6	[
water	91:66	0:0	6	2
op	91:67	0:0	6	]
water	91:68	0:0	6	)
water	91:69	0:0	6	;
water	92:12	0:0	6	result
op	92:18	0:0	6	[
water	92:19	0:0	6	x
op	92:20	0:0	6	]
op	92:21	0:0	6	[
water	92:22	0:0	6	3
op	92:23	0:0	6	]
op	92:25	0:0	6	=
water	92:27	0:0	6	0
op	92:28	0:0	6	.
water	92:29	0:0	6	5
water	92:30	0:0	6	f
op	92:32	0:0	6	*
water	92:34	0:0	6	(
water	92:35	0:0	6	result
op	92:41	0:0	6	[
water	92:42	0:0	6	2
op	92:43	0:0	6	*
water	92:44	0:0	6	x
op	92:45	0:0	6	]
op	92:46	0:0	6	[
water	92:47	0:0	6	3
op	92:48	0:0	6	]
op	92:50	0:0	6	+
water	92:52	0:0	6	result
op	92:58	0:0	6	[
water	92:59	0:0	6	2
op	92:60	0:0	6	*
water	92:61	0:0	6	x
op	92:62	0:0	6	+
water	92:63	0:0	6	1
op	92:64	0:0	6	]
op	92:65	0:0	6	[
water	92:66	0:0	6	3
op	92:67	0:0	6	]
water	92:68	0:0	6	)
water	92:69	0:0	6	;
water	93:8	0:0	6	}
water	94:4	0:0	4	}
for	95:4	99:4	2	(x = 0 ;x < video_width;x ++)
forinit	95:9	95:14	3	x = 0 ;
water	95:9	0:0	4	x
op	95:11	0:0	4	=
water	95:13	0:0	4	0
water	95:14	0:0	4	;
cond	95:16	95:20	3	x < video_width
water	95:16	0:0	4	x
op	95:18	0:0	4	<
water	95:20	0:0	4	video_width
forexpr	95:33	95:34	3	x ++
water	95:33	0:0	4	x
op	95:34	0:0	4	++
stmts	95:38	99:4	3	
water	95:38	0:0	4	{
water	96:8	0:0	4	s
op	96:9	0:0	4	->
water	96:11	0:0	4	spectogram
op	96:21	0:0	4	[
water	96:22	0:0	4	s
op	96:23	0:0	4	->
water	96:25	0:0	4	spectogram_index
op	96:41	0:0	4	*
water	96:42	0:0	4	linesize
op	96:51	0:0	4	+
water	96:53	0:0	4	3
op	96:54	0:0	4	*
water	96:55	0:0	4	x
op	96:56	0:0	4	]
op	96:58	0:0	4	=
water	96:60	0:0	4	result
op	96:66	0:0	4	[
water	96:67	0:0	4	x
op	96:68	0:0	4	]
op	96:69	0:0	4	[
water	96:70	0:0	4	0
op	96:71	0:0	4	]
op	96:73	0:0	4	+
water	96:75	0:0	4	0
op	96:76	0:0	4	.
water	96:77	0:0	4	5
water	96:78	0:0	4	f
water	96:79	0:0	4	;
water	97:8	0:0	4	s
op	97:9	0:0	4	->
water	97:11	0:0	4	spectogram
op	97:21	0:0	4	[
water	97:22	0:0	4	s
op	97:23	0:0	4	->
water	97:25	0:0	4	spectogram_index
op	97:41	0:0	4	*
water	97:42	0:0	4	linesize
op	97:51	0:0	4	+
water	97:53	0:0	4	3
op	97:54	0:0	4	*
water	97:55	0:0	4	x
op	97:57	0:0	4	+
water	97:59	0:0	4	1
op	97:60	0:0	4	]
op	97:62	0:0	4	=
water	97:64	0:0	4	result
op	97:70	0:0	4	[
water	97:71	0:0	4	x
op	97:72	0:0	4	]
op	97:73	0:0	4	[
water	97:74	0:0	4	1
op	97:75	0:0	4	]
op	97:77	0:0	4	+
water	97:79	0:0	4	0
op	97:80	0:0	4	.
water	97:81	0:0	4	5
water	97:82	0:0	4	f
water	97:83	0:0	4	;
water	98:8	0:0	4	s
op	98:9	0:0	4	->
water	98:11	0:0	4	spectogram
op	98:21	0:0	4	[
water	98:22	0:0	4	s
op	98:23	0:0	4	->
water	98:25	0:0	4	spectogram_index
op	98:41	0:0	4	*
water	98:42	0:0	4	linesize
op	98:51	0:0	4	+
water	98:53	0:0	4	3
op	98:54	0:0	4	*
water	98:55	0:0	4	x
op	98:57	0:0	4	+
water	98:59	0:0	4	2
op	98:60	0:0	4	]
op	98:62	0:0	4	=
water	98:64	0:0	4	result
op	98:70	0:0	4	[
water	98:71	0:0	4	x
op	98:72	0:0	4	]
op	98:73	0:0	4	[
water	98:74	0:0	4	2
op	98:75	0:0	4	]
op	98:77	0:0	4	+
water	98:79	0:0	4	0
op	98:80	0:0	4	.
water	98:81	0:0	4	5
water	98:82	0:0	4	f
water	98:83	0:0	4	;
water	99:4	0:0	4	}
if	101:4	186:4	2	(! s -> spectogram_count)
cond	101:8	101:12	3	! s -> spectogram_count
op	101:8	0:0	4	!
water	101:9	0:0	4	s
op	101:10	0:0	4	->
water	101:12	0:0	4	spectogram_count
stmts	101:30	186:4	3	
water	101:30	0:0	4	{
decl	102:8	102:56	4	uint8_t	*data
op	102:22	0:0	4	=
water	102:24	0:0	4	(
water	102:25	0:0	4	uint8_t
op	102:32	0:0	4	*
water	102:33	0:0	4	)
water	102:35	0:0	4	s
op	102:36	0:0	4	->
water	102:38	0:0	4	outpicref
op	102:47	0:0	4	->
water	102:49	0:0	4	data
op	102:53	0:0	4	[
water	102:54	0:0	4	0
op	102:55	0:0	4	]
decl	103:8	103:37	4	float	rcp_result[VIDEO_WIDTH]
decl	104:8	104:55	4	int	total_length
op	104:25	0:0	4	=
water	104:27	0:0	4	linesize
op	104:36	0:0	4	*
water	104:38	0:0	4	spectogram_height
decl	105:8	105:56	4	int	back_length
op	105:24	0:0	4	=
water	105:26	0:0	4	linesize
op	105:35	0:0	4	*
water	105:37	0:0	4	s
op	105:38	0:0	4	->
water	105:40	0:0	4	spectogram_index
for	106:8	107:57	4	(x = 0 ;x < video_width;x ++)
forinit	106:13	106:18	5	x = 0 ;
water	106:13	0:0	6	x
op	106:15	0:0	6	=
water	106:17	0:0	6	0
water	106:18	0:0	6	;
cond	106:20	106:24	5	x < video_width
water	106:20	0:0	6	x
op	106:22	0:0	6	<
water	106:24	0:0	6	video_width
forexpr	106:37	106:38	5	x ++
water	106:37	0:0	6	x
op	106:38	0:0	6	++
stmts	107:12	107:57	5	
water	107:12	0:0	6	rcp_result
op	107:22	0:0	6	[
water	107:23	0:0	6	x
op	107:24	0:0	6	]
op	107:26	0:0	6	=
water	107:28	0:0	6	1
op	107:29	0:0	6	.
water	107:30	0:0	6	0
water	107:31	0:0	6	f
op	107:33	0:0	6	/
water	107:35	0:0	6	(
water	107:36	0:0	6	result
op	107:42	0:0	6	[
water	107:43	0:0	6	x
op	107:44	0:0	6	]
op	107:45	0:0	6	[
water	107:46	0:0	6	3
op	107:47	0:0	6	]
op	107:48	0:0	6	+
water	107:49	0:0	6	0
op	107:50	0:0	6	.
water	107:51	0:0	6	0001
water	107:55	0:0	6	f
water	107:56	0:0	6	)
water	107:57	0:0	6	;
for	109:8	125:8	4	(y = 0 ;y < spectogram_height;y ++)
forinit	109:13	109:18	5	y = 0 ;
water	109:13	0:0	6	y
op	109:15	0:0	6	=
water	109:17	0:0	6	0
water	109:18	0:0	6	;
cond	109:20	109:24	5	y < spectogram_height
water	109:20	0:0	6	y
op	109:22	0:0	6	<
water	109:24	0:0	6	spectogram_height
forexpr	109:43	109:44	5	y ++
water	109:43	0:0	6	y
op	109:44	0:0	6	++
stmts	109:48	125:8	5	
water	109:48	0:0	6	{
decl	110:12	110:77	6	float	height
op	110:25	0:0	6	=
water	110:27	0:0	6	(
water	110:28	0:0	6	spectogram_height
op	110:46	0:0	6	-
water	110:48	0:0	6	y
water	110:49	0:0	6	)
op	110:51	0:0	6	*
water	110:53	0:0	6	(
water	110:54	0:0	6	1
op	110:55	0:0	6	.
water	110:56	0:0	6	0
water	110:57	0:0	6	f
op	110:58	0:0	6	/
water	110:59	0:0	6	spectogram_height
water	110:76	0:0	6	)
decl	111:12	111:50	6	uint8_t	*lineptr
op	111:29	0:0	6	=
water	111:31	0:0	6	data
op	111:36	0:0	6	+
water	111:38	0:0	6	y
op	111:40	0:0	6	*
water	111:42	0:0	6	linesize
for	112:12	124:12	6	(x = 0 ;x < video_width;x ++)
forinit	112:17	112:22	7	x = 0 ;
water	112:17	0:0	8	x
op	112:19	0:0	8	=
water	112:21	0:0	8	0
water	112:22	0:0	8	;
cond	112:24	112:28	7	x < video_width
water	112:24	0:0	8	x
op	112:26	0:0	8	<
water	112:28	0:0	8	video_width
forexpr	112:41	112:42	7	x ++
water	112:41	0:0	8	x
op	112:42	0:0	8	++
stmts	112:46	124:12	7	
water	112:46	0:0	8	{
decl	113:16	113:25	8	float	mul
if	114:16	118:16	8	(result [ x ] [ 3 ] <= height)
cond	114:20	114:36	9	result [ x ] [ 3 ] <= height
water	114:20	0:0	10	result
op	114:26	0:0	10	[
water	114:27	0:0	10	x
op	114:28	0:0	10	]
op	114:29	0:0	10	[
water	114:30	0:0	10	3
op	114:31	0:0	10	]
op	114:33	0:0	10	<=
water	114:36	0:0	10	height
stmts	114:44	118:16	9	
water	114:44	0:0	10	{
op	115:20	0:0	10	*
water	115:21	0:0	10	lineptr
op	115:28	0:0	10	++
op	115:31	0:0	10	=
water	115:33	0:0	10	0
water	115:34	0:0	10	;
op	116:20	0:0	10	*
water	116:21	0:0	10	lineptr
op	116:28	0:0	10	++
op	116:31	0:0	10	=
water	116:33	0:0	10	0
water	116:34	0:0	10	;
op	117:20	0:0	10	*
water	117:21	0:0	10	lineptr
op	117:28	0:0	10	++
op	117:31	0:0	10	=
water	117:33	0:0	10	0
water	117:34	0:0	10	;
water	118:16	0:0	10	}
else	118:18	123:16	8
stmts	118:23	123:16	9	
water	118:23	0:0	10	{
water	119:20	0:0	10	mul
op	119:24	0:0	10	=
water	119:26	0:0	10	(
water	119:27	0:0	10	result
op	119:33	0:0	10	[
water	119:34	0:0	10	x
op	119:35	0:0	10	]
op	119:36	0:0	10	[
water	119:37	0:0	10	3
op	119:38	0:0	10	]
op	119:40	0:0	10	-
water	119:42	0:0	10	height
water	119:48	0:0	10	)
op	119:50	0:0	10	*
water	119:52	0:0	10	rcp_result
op	119:62	0:0	10	[
water	119:63	0:0	10	x
op	119:64	0:0	10	]
water	119:65	0:0	10	;
op	120:20	0:0	10	*
water	120:21	0:0	10	lineptr
op	120:28	0:0	10	++
op	120:31	0:0	10	=
water	120:33	0:0	10	mul
op	120:37	0:0	10	*
water	120:39	0:0	10	result
op	120:45	0:0	10	[
water	120:46	0:0	10	x
op	120:47	0:0	10	]
op	120:48	0:0	10	[
water	120:49	0:0	10	0
op	120:50	0:0	10	]
op	120:52	0:0	10	+
water	120:54	0:0	10	0
op	120:55	0:0	10	.
water	120:56	0:0	10	5
water	120:57	0:0	10	f
water	120:58	0:0	10	;
op	121:20	0:0	10	*
water	121:21	0:0	10	lineptr
op	121:28	0:0	10	++
op	121:31	0:0	10	=
water	121:33	0:0	10	mul
op	121:37	0:0	10	*
water	121:39	0:0	10	result
op	121:45	0:0	10	[
water	121:46	0:0	10	x
op	121:47	0:0	10	]
op	121:48	0:0	10	[
water	121:49	0:0	10	1
op	121:50	0:0	10	]
op	121:52	0:0	10	+
water	121:54	0:0	10	0
op	121:55	0:0	10	.
water	121:56	0:0	10	5
water	121:57	0:0	10	f
water	121:58	0:0	10	;
op	122:20	0:0	10	*
water	122:21	0:0	10	lineptr
op	122:28	0:0	10	++
op	122:31	0:0	10	=
water	122:33	0:0	10	mul
op	122:37	0:0	10	*
water	122:39	0:0	10	result
op	122:45	0:0	10	[
water	122:46	0:0	10	x
op	122:47	0:0	10	]
op	122:48	0:0	10	[
water	122:49	0:0	10	2
op	122:50	0:0	10	]
op	122:52	0:0	10	+
water	122:54	0:0	10	0
op	122:55	0:0	10	.
water	122:56	0:0	10	5
water	122:57	0:0	10	f
water	122:58	0:0	10	;
water	123:16	0:0	10	}
water	124:12	0:0	8	}
water	125:8	0:0	6	}
if	127:8	140:8	4	(s -> font_alpha)
cond	127:12	127:15	5	s -> font_alpha
water	127:12	0:0	6	s
op	127:13	0:0	6	->
water	127:15	0:0	6	font_alpha
stmts	127:27	140:8	5	
water	127:27	0:0	6	{
for	128:12	139:12	6	(y = 0 ;y < font_height;y ++)
forinit	128:17	128:22	7	y = 0 ;
water	128:17	0:0	8	y
op	128:19	0:0	8	=
water	128:21	0:0	8	0
water	128:22	0:0	8	;
cond	128:24	128:28	7	y < font_height
water	128:24	0:0	8	y
op	128:26	0:0	8	<
water	128:28	0:0	8	font_height
forexpr	128:41	128:42	7	y ++
water	128:41	0:0	8	y
op	128:42	0:0	8	++
stmts	128:46	139:12	7	
water	128:46	0:0	8	{
decl	129:16	129:76	8	uint8_t	*lineptr
op	129:33	0:0	8	=
water	129:35	0:0	8	data
op	129:40	0:0	8	+
water	129:42	0:0	8	(
water	129:43	0:0	8	spectogram_height
op	129:61	0:0	8	+
water	129:63	0:0	8	y
water	129:64	0:0	8	)
op	129:66	0:0	8	*
water	129:68	0:0	8	linesize
decl	130:16	130:88	8	uint8_t	*spectogram_src
op	130:40	0:0	8	=
water	130:42	0:0	8	s
op	130:43	0:0	8	->
water	130:45	0:0	8	spectogram
op	130:56	0:0	8	+
water	130:58	0:0	8	s
op	130:59	0:0	8	->
water	130:61	0:0	8	spectogram_index
op	130:78	0:0	8	*
water	130:80	0:0	8	linesize
decl	131:16	131:61	8	uint8_t	*fontcolor_value
op	131:41	0:0	8	=
water	131:43	0:0	8	s
op	131:44	0:0	8	->
water	131:46	0:0	8	fontcolor_value
for	132:16	138:16	8	(x = 0 ;x < video_width;x ++)
forinit	132:21	132:26	9	x = 0 ;
water	132:21	0:0	10	x
op	132:23	0:0	10	=
water	132:25	0:0	10	0
water	132:26	0:0	10	;
cond	132:28	132:32	9	x < video_width
water	132:28	0:0	10	x
op	132:30	0:0	10	<
water	132:32	0:0	10	video_width
forexpr	132:45	132:46	9	x ++
water	132:45	0:0	10	x
op	132:46	0:0	10	++
stmts	132:50	138:16	9	
water	132:50	0:0	10	{
decl	133:20	133:66	10	uint8_t	alpha
op	133:34	0:0	10	=
water	133:36	0:0	10	s
op	133:37	0:0	10	->
water	133:39	0:0	10	font_alpha
op	133:49	0:0	10	[
water	133:50	0:0	10	y
op	133:51	0:0	10	*
water	133:52	0:0	10	video_width
op	133:63	0:0	10	+
water	133:64	0:0	10	x
op	133:65	0:0	10	]
water	134:20	0:0	10	lineptr
op	134:27	0:0	10	[
water	134:28	0:0	10	3
op	134:29	0:0	10	*
water	134:30	0:0	10	x
op	134:31	0:0	10	]
op	134:33	0:0	10	=
water	134:35	0:0	10	(
water	134:36	0:0	10	spectogram_src
op	134:50	0:0	10	[
water	134:51	0:0	10	3
op	134:52	0:0	10	*
water	134:53	0:0	10	x
op	134:54	0:0	10	]
op	134:56	0:0	10	*
water	134:58	0:0	10	(
water	134:59	0:0	10	255
op	134:62	0:0	10	-
water	134:63	0:0	10	alpha
water	134:68	0:0	10	)
op	134:70	0:0	10	+
water	134:72	0:0	10	fontcolor_value
op	134:87	0:0	10	[
water	134:88	0:0	10	0
op	134:89	0:0	10	]
op	134:91	0:0	10	*
water	134:93	0:0	10	alpha
op	134:99	0:0	10	+
water	134:101	0:0	10	255
water	134:104	0:0	10	)
op	134:106	0:0	10	>>
water	134:109	0:0	10	8
water	134:110	0:0	10	;
water	135:20	0:0	10	lineptr
op	135:27	0:0	10	[
water	135:28	0:0	10	3
op	135:29	0:0	10	*
water	135:30	0:0	10	x
op	135:31	0:0	10	+
water	135:32	0:0	10	1
op	135:33	0:0	10	]
op	135:35	0:0	10	=
water	135:37	0:0	10	(
water	135:38	0:0	10	spectogram_src
op	135:52	0:0	10	[
water	135:53	0:0	10	3
op	135:54	0:0	10	*
water	135:55	0:0	10	x
op	135:56	0:0	10	+
water	135:57	0:0	10	1
op	135:58	0:0	10	]
op	135:60	0:0	10	*
water	135:62	0:0	10	(
water	135:63	0:0	10	255
op	135:66	0:0	10	-
water	135:67	0:0	10	alpha
water	135:72	0:0	10	)
op	135:74	0:0	10	+
water	135:76	0:0	10	fontcolor_value
op	135:91	0:0	10	[
water	135:92	0:0	10	1
op	135:93	0:0	10	]
op	135:95	0:0	10	*
water	135:97	0:0	10	alpha
op	135:103	0:0	10	+
water	135:105	0:0	10	255
water	135:108	0:0	10	)
op	135:110	0:0	10	>>
water	135:113	0:0	10	8
water	135:114	0:0	10	;
water	136:20	0:0	10	lineptr
op	136:27	0:0	10	[
water	136:28	0:0	10	3
op	136:29	0:0	10	*
water	136:30	0:0	10	x
op	136:31	0:0	10	+
water	136:32	0:0	10	2
op	136:33	0:0	10	]
op	136:35	0:0	10	=
water	136:37	0:0	10	(
water	136:38	0:0	10	spectogram_src
op	136:52	0:0	10	[
water	136:53	0:0	10	3
op	136:54	0:0	10	*
water	136:55	0:0	10	x
op	136:56	0:0	10	+
water	136:57	0:0	10	2
op	136:58	0:0	10	]
op	136:60	0:0	10	*
water	136:62	0:0	10	(
water	136:63	0:0	10	255
op	136:66	0:0	10	-
water	136:67	0:0	10	alpha
water	136:72	0:0	10	)
op	136:74	0:0	10	+
water	136:76	0:0	10	fontcolor_value
op	136:91	0:0	10	[
water	136:92	0:0	10	2
op	136:93	0:0	10	]
op	136:95	0:0	10	*
water	136:97	0:0	10	alpha
op	136:103	0:0	10	+
water	136:105	0:0	10	255
water	136:108	0:0	10	)
op	136:110	0:0	10	>>
water	136:113	0:0	10	8
water	136:114	0:0	10	;
water	137:20	0:0	10	fontcolor_value
op	137:36	0:0	10	+=
water	137:39	0:0	10	3
water	137:40	0:0	10	;
water	138:16	0:0	10	}
water	139:12	0:0	8	}
water	140:8	0:0	6	}
else	140:10	175:8	4
stmts	140:15	175:8	5	
water	140:15	0:0	6	{
for	141:12	144:12	6	(y = 0 ;y < font_height;y ++)
forinit	141:17	141:22	7	y = 0 ;
water	141:17	0:0	8	y
op	141:19	0:0	8	=
water	141:21	0:0	8	0
water	141:22	0:0	8	;
cond	141:24	141:28	7	y < font_height
water	141:24	0:0	8	y
op	141:26	0:0	8	<
water	141:28	0:0	8	font_height
forexpr	141:41	141:42	7	y ++
water	141:41	0:0	8	y
op	141:42	0:0	8	++
stmts	141:46	144:12	7	
water	141:46	0:0	8	{
decl	142:16	142:76	8	uint8_t	*lineptr
op	142:33	0:0	8	=
water	142:35	0:0	8	data
op	142:40	0:0	8	+
water	142:42	0:0	8	(
water	142:43	0:0	8	spectogram_height
op	142:61	0:0	8	+
water	142:63	0:0	8	y
water	142:64	0:0	8	)
op	142:66	0:0	8	*
water	142:68	0:0	8	linesize
call	143:16	143:93	8	memcpy
arg	143:23	143:30	9	lineptr
water	143:23	0:0	10	lineptr
arg	143:32	143:78	9	s->spectogram+s->spectogram_index*linesize
water	143:32	0:0	10	s
op	143:33	0:0	10	->
water	143:35	0:0	10	spectogram
op	143:46	0:0	10	+
water	143:48	0:0	10	s
op	143:49	0:0	10	->
water	143:51	0:0	10	spectogram_index
op	143:68	0:0	10	*
water	143:70	0:0	10	linesize
arg	143:80	143:93	9	video_width*3
water	143:80	0:0	10	video_width
op	143:91	0:0	10	*
water	143:92	0:0	10	3
water	143:94	0:0	8	;
water	144:12	0:0	8	}
for	145:12	174:12	6	(x = 0 ;x < video_width;x += video_width / 10)
forinit	145:17	145:22	7	x = 0 ;
water	145:17	0:0	8	x
op	145:19	0:0	8	=
water	145:21	0:0	8	0
water	145:22	0:0	8	;
cond	145:24	145:28	7	x < video_width
water	145:24	0:0	8	x
op	145:26	0:0	8	<
water	145:28	0:0	8	video_width
forexpr	145:41	145:58	7	x += video_width / 10
water	145:41	0:0	8	x
op	145:43	0:0	8	+=
water	145:46	0:0	8	video_width
op	145:57	0:0	8	/
water	145:58	0:0	8	10
stmts	145:62	174:12	7	
water	145:62	0:0	8	{
decl	146:16	146:21	8	int	u
water	147:16	0:0	8	static
water	147:23	0:0	8	const
water	147:29	0:0	8	char
water	147:34	0:0	8	str
op	147:37	0:0	8	[
op	147:38	0:0	8	]
op	147:40	0:0	8	=
water	147:42	0:0	8	"EF G A BC D "
water	147:56	0:0	8	;
decl	148:16	148:79	8	uint8_t	*startptr
op	148:34	0:0	8	=
water	148:36	0:0	8	data
op	148:41	0:0	8	+
water	148:43	0:0	8	spectogram_height
op	148:61	0:0	8	*
water	148:63	0:0	8	linesize
op	148:72	0:0	8	+
water	148:74	0:0	8	x
op	148:76	0:0	8	*
water	148:78	0:0	8	3
for	149:16	173:16	8	(u = 0 ;str [ u ];u ++)
forinit	149:21	149:26	9	u = 0 ;
water	149:21	0:0	10	u
op	149:23	0:0	10	=
water	149:25	0:0	10	0
water	149:26	0:0	10	;
cond	149:28	149:33	9	str [ u ]
water	149:28	0:0	10	str
op	149:31	0:0	10	[
water	149:32	0:0	10	u
op	149:33	0:0	10	]
forexpr	149:36	149:37	9	u ++
water	149:36	0:0	10	u
op	149:37	0:0	10	++
stmts	149:41	173:16	9	
water	149:41	0:0	10	{
decl	150:20	150:25	10	int	v
for	151:20	172:20	10	(v = 0 ;v < 16;v ++)
forinit	151:25	151:30	11	v = 0 ;
water	151:25	0:0	12	v
op	151:27	0:0	12	=
water	151:29	0:0	12	0
water	151:30	0:0	12	;
cond	151:32	151:36	11	v < 16
water	151:32	0:0	12	v
op	151:34	0:0	12	<
water	151:36	0:0	12	16
forexpr	151:40	151:41	11	v ++
water	151:40	0:0	12	v
op	151:41	0:0	12	++
stmts	151:45	172:20	11	
water	151:45	0:0	12	{
decl	152:24	152:100	12	uint8_t	*p
op	152:35	0:0	12	=
water	152:37	0:0	12	startptr
op	152:46	0:0	12	+
water	152:48	0:0	12	v
op	152:50	0:0	12	*
water	152:52	0:0	12	linesize
op	152:61	0:0	12	*
water	152:63	0:0	12	video_scale
op	152:75	0:0	12	+
water	152:77	0:0	12	8
op	152:79	0:0	12	*
water	152:81	0:0	12	3
op	152:83	0:0	12	*
water	152:85	0:0	12	u
op	152:87	0:0	12	*
water	152:89	0:0	12	video_scale
decl	153:24	153:56	12	int	ux
op	153:31	0:0	12	=
water	153:33	0:0	12	x
op	153:35	0:0	12	+
water	153:37	0:0	12	8
op	153:39	0:0	12	*
water	153:41	0:0	12	u
op	153:43	0:0	12	*
water	153:45	0:0	12	video_scale
decl	154:24	154:32	12	int	mask
for	155:24	171:24	12	(mask = 0 x80 ;mask;mask >>= 1)
forinit	155:29	155:40	13	mask = 0 x80 ;
water	155:29	0:0	14	mask
op	155:34	0:0	14	=
water	155:36	0:0	14	0
water	155:37	0:0	14	x80
water	155:40	0:0	14	;
cond	155:42	155:42	13	mask
water	155:42	0:0	14	mask
forexpr	155:48	155:57	13	mask >>= 1
water	155:48	0:0	14	mask
op	155:53	0:0	14	>>=
water	155:57	0:0	14	1
stmts	155:60	171:24	13	
water	155:60	0:0	14	{
if	156:28	168:28	14	(mask & avpriv_vga16_font [ str [ u ] * 16 + v ])
cond	156:32	156:72	15	mask & avpriv_vga16_font [ str [ u ] * 16 + v ]
water	156:32	0:0	16	mask
op	156:37	0:0	16	&
water	156:39	0:0	16	avpriv_vga16_font
op	156:56	0:0	16	[
water	156:57	0:0	16	str
op	156:60	0:0	16	[
water	156:61	0:0	16	u
op	156:62	0:0	16	]
op	156:64	0:0	16	*
water	156:66	0:0	16	16
op	156:69	0:0	16	+
water	156:71	0:0	16	v
op	156:72	0:0	16	]
stmts	156:75	168:28	15	
water	156:75	0:0	16	{
water	157:32	0:0	16	p
op	157:33	0:0	16	[
water	157:34	0:0	16	0
op	157:35	0:0	16	]
op	157:37	0:0	16	=
water	157:39	0:0	16	s
op	157:40	0:0	16	->
water	157:42	0:0	16	fontcolor_value
op	157:57	0:0	16	[
water	157:58	0:0	16	3
op	157:59	0:0	16	*
water	157:60	0:0	16	ux
op	157:62	0:0	16	]
water	157:63	0:0	16	;
water	158:32	0:0	16	p
op	158:33	0:0	16	[
water	158:34	0:0	16	1
op	158:35	0:0	16	]
op	158:37	0:0	16	=
water	158:39	0:0	16	s
op	158:40	0:0	16	->
water	158:42	0:0	16	fontcolor_value
op	158:57	0:0	16	[
water	158:58	0:0	16	3
op	158:59	0:0	16	*
water	158:60	0:0	16	ux
op	158:62	0:0	16	+
water	158:63	0:0	16	1
op	158:64	0:0	16	]
water	158:65	0:0	16	;
water	159:32	0:0	16	p
op	159:33	0:0	16	[
water	159:34	0:0	16	2
op	159:35	0:0	16	]
op	159:37	0:0	16	=
water	159:39	0:0	16	s
op	159:40	0:0	16	->
water	159:42	0:0	16	fontcolor_value
op	159:57	0:0	16	[
water	159:58	0:0	16	3
op	159:59	0:0	16	*
water	159:60	0:0	16	ux
op	159:62	0:0	16	+
water	159:63	0:0	16	2
op	159:64	0:0	16	]
water	159:65	0:0	16	;
if	160:32	167:32	16	(video_scale == 2)
cond	160:36	160:51	17	video_scale == 2
water	160:36	0:0	18	video_scale
op	160:48	0:0	18	==
water	160:51	0:0	18	2
stmts	160:54	167:32	17	
water	160:54	0:0	18	{
water	161:36	0:0	18	p
op	161:37	0:0	18	[
water	161:38	0:0	18	linesize
op	161:46	0:0	18	]
op	161:48	0:0	18	=
water	161:50	0:0	18	p
op	161:51	0:0	18	[
water	161:52	0:0	18	0
op	161:53	0:0	18	]
water	161:54	0:0	18	;
water	162:36	0:0	18	p
op	162:37	0:0	18	[
water	162:38	0:0	18	linesize
op	162:46	0:0	18	+
water	162:47	0:0	18	1
op	162:48	0:0	18	]
op	162:50	0:0	18	=
water	162:52	0:0	18	p
op	162:53	0:0	18	[
water	162:54	0:0	18	1
op	162:55	0:0	18	]
water	162:56	0:0	18	;
water	163:36	0:0	18	p
op	163:37	0:0	18	[
water	163:38	0:0	18	linesize
op	163:46	0:0	18	+
water	163:47	0:0	18	2
op	163:48	0:0	18	]
op	163:50	0:0	18	=
water	163:52	0:0	18	p
op	163:53	0:0	18	[
water	163:54	0:0	18	2
op	163:55	0:0	18	]
water	163:56	0:0	18	;
water	164:36	0:0	18	p
op	164:37	0:0	18	[
water	164:38	0:0	18	3
op	164:39	0:0	18	]
op	164:41	0:0	18	=
water	164:43	0:0	18	p
op	164:44	0:0	18	[
water	164:45	0:0	18	linesize
op	164:53	0:0	18	+
water	164:54	0:0	18	3
op	164:55	0:0	18	]
op	164:57	0:0	18	=
water	164:59	0:0	18	s
op	164:60	0:0	18	->
water	164:62	0:0	18	fontcolor_value
op	164:77	0:0	18	[
water	164:78	0:0	18	3
op	164:79	0:0	18	*
water	164:80	0:0	18	ux
op	164:82	0:0	18	+
water	164:83	0:0	18	3
op	164:84	0:0	18	]
water	164:85	0:0	18	;
water	165:36	0:0	18	p
op	165:37	0:0	18	[
water	165:38	0:0	18	4
op	165:39	0:0	18	]
op	165:41	0:0	18	=
water	165:43	0:0	18	p
op	165:44	0:0	18	[
water	165:45	0:0	18	linesize
op	165:53	0:0	18	+
water	165:54	0:0	18	4
op	165:55	0:0	18	]
op	165:57	0:0	18	=
water	165:59	0:0	18	s
op	165:60	0:0	18	->
water	165:62	0:0	18	fontcolor_value
op	165:77	0:0	18	[
water	165:78	0:0	18	3
op	165:79	0:0	18	*
water	165:80	0:0	18	ux
op	165:82	0:0	18	+
water	165:83	0:0	18	4
op	165:84	0:0	18	]
water	165:85	0:0	18	;
water	166:36	0:0	18	p
op	166:37	0:0	18	[
water	166:38	0:0	18	5
op	166:39	0:0	18	]
op	166:41	0:0	18	=
water	166:43	0:0	18	p
op	166:44	0:0	18	[
water	166:45	0:0	18	linesize
op	166:53	0:0	18	+
water	166:54	0:0	18	5
op	166:55	0:0	18	]
op	166:57	0:0	18	=
water	166:59	0:0	18	s
op	166:60	0:0	18	->
water	166:62	0:0	18	fontcolor_value
op	166:77	0:0	18	[
water	166:78	0:0	18	3
op	166:79	0:0	18	*
water	166:80	0:0	18	ux
op	166:82	0:0	18	+
water	166:83	0:0	18	5
op	166:84	0:0	18	]
water	166:85	0:0	18	;
water	167:32	0:0	18	}
water	168:28	0:0	16	}
water	169:28	0:0	14	p
op	169:31	0:0	14	+=
water	169:34	0:0	14	3
op	169:36	0:0	14	*
water	169:38	0:0	14	video_scale
water	169:49	0:0	14	;
water	170:28	0:0	14	ux
op	170:31	0:0	14	+=
water	170:34	0:0	14	video_scale
water	170:45	0:0	14	;
water	171:24	0:0	14	}
water	172:20	0:0	12	}
water	173:16	0:0	10	}
water	174:12	0:0	8	}
water	175:8	0:0	6	}
water	177:8	0:0	4	data
op	177:13	0:0	4	+=
water	177:16	0:0	4	spectogram_start
op	177:33	0:0	4	*
water	177:35	0:0	4	linesize
water	177:43	0:0	4	;
call	178:8	178:93	4	memcpy
arg	178:15	178:19	5	data
water	178:15	0:0	6	data
arg	178:21	178:65	5	s->spectogram+s->spectogram_index*linesize
water	178:21	0:0	6	s
op	178:22	0:0	6	->
water	178:24	0:0	6	spectogram
op	178:35	0:0	6	+
water	178:37	0:0	6	s
op	178:38	0:0	6	->
water	178:40	0:0	6	spectogram_index
op	178:56	0:0	6	*
water	178:57	0:0	6	linesize
arg	178:67	178:93	5	total_length-back_length
water	178:67	0:0	6	total_length
op	178:80	0:0	6	-
water	178:82	0:0	6	back_length
water	178:94	0:0	4	;
water	179:8	0:0	4	data
op	179:13	0:0	4	+=
water	179:16	0:0	4	total_length
op	179:29	0:0	4	-
water	179:31	0:0	4	back_length
water	179:42	0:0	4	;
if	180:8	181:52	4	(back_length)
cond	180:12	180:12	5	back_length
water	180:12	0:0	6	back_length
stmts	181:12	181:52	5	
call	181:12	181:51	6	memcpy
arg	181:19	181:23	7	data
water	181:19	0:0	8	data
arg	181:25	181:38	7	s->spectogram
water	181:25	0:0	8	s
op	181:26	0:0	8	->
water	181:28	0:0	8	spectogram
arg	181:40	181:51	7	back_length
water	181:40	0:0	8	back_length
water	181:52	0:0	6	;
water	182:8	0:0	4	s
op	182:9	0:0	4	->
water	182:11	0:0	4	outpicref
op	182:20	0:0	4	->
water	182:22	0:0	4	pts
op	182:26	0:0	4	=
water	182:28	0:0	4	s
op	182:29	0:0	4	->
water	182:31	0:0	4	frame_count
water	182:42	0:0	4	;
water	183:8	0:0	4	ret
op	183:12	0:0	4	=
call	183:14	183:67	4	ff_filter_frame
arg	183:30	183:37	5	outlink
water	183:30	0:0	6	outlink
arg	183:39	183:67	5	av_frame_clone(s->outpicref)
call	183:39	183:66	6	av_frame_clone
arg	183:54	183:66	7	s->outpicref
water	183:54	0:0	8	s
op	183:55	0:0	8	->
water	183:57	0:0	8	outpicref
water	183:68	0:0	4	;
water	184:8	0:0	4	s
op	184:9	0:0	4	->
water	184:11	0:0	4	req_fullfilled
op	184:26	0:0	4	=
water	184:28	0:0	4	1
water	184:29	0:0	4	;
water	185:8	0:0	4	s
op	185:9	0:0	4	->
water	185:11	0:0	4	frame_count
op	185:22	0:0	4	++
water	185:24	0:0	4	;
water	186:4	0:0	4	}
water	187:4	0:0	2	s
op	187:5	0:0	2	->
water	187:7	0:0	2	spectogram_count
op	187:24	0:0	2	=
water	187:26	0:0	2	(
water	187:27	0:0	2	s
op	187:28	0:0	2	->
water	187:30	0:0	2	spectogram_count
op	187:47	0:0	2	+
water	187:49	0:0	2	1
water	187:50	0:0	2	)
op	187:52	0:0	2	%
water	187:54	0:0	2	s
op	187:55	0:0	2	->
water	187:57	0:0	2	count
water	187:62	0:0	2	;
water	188:4	0:0	2	s
op	188:5	0:0	2	->
water	188:7	0:0	2	spectogram_index
op	188:24	0:0	2	=
water	188:26	0:0	2	(
water	188:27	0:0	2	s
op	188:28	0:0	2	->
water	188:30	0:0	2	spectogram_index
op	188:47	0:0	2	+
water	188:49	0:0	2	spectogram_height
op	188:67	0:0	2	-
water	188:69	0:0	2	1
water	188:70	0:0	2	)
op	188:72	0:0	2	%
water	188:74	0:0	2	spectogram_height
water	188:91	0:0	2	;
return	189:4	189:14	2	ret
water	189:11	0:0	3	ret
