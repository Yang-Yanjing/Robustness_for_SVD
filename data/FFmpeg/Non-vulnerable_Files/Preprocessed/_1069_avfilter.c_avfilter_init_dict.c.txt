func	1:0	31:0	0	int	avfilter_init_dict
params	1:22	0:0	1	
param	1:23	1:43	2	AVFilterContext *	ctx
param	1:45	1:67	2	AVDictionary * *	options
stmnts	0:0	30:14	1	
decl	3:4	3:15	2	int	ret
op	3:12	0:0	2	=
water	3:14	0:0	2	0
water	4:4	0:0	2	ret
op	4:8	0:0	2	=
call	4:10	4:38	2	av_opt_set_dict
arg	4:26	4:29	3	ctx
water	4:26	0:0	4	ctx
arg	4:31	4:38	3	options
water	4:31	0:0	4	options
water	4:39	0:0	2	;
if	5:4	8:4	2	(ret < 0)
cond	5:8	5:14	3	ret < 0
water	5:8	0:0	4	ret
op	5:12	0:0	4	<
water	5:14	0:0	4	0
stmts	5:17	8:4	3	
water	5:17	0:0	4	{
call	6:8	6:76	4	av_log
arg	6:15	6:18	5	ctx
water	6:15	0:0	6	ctx
arg	6:20	6:32	5	AV_LOG_ERROR
water	6:20	0:0	6	AV_LOG_ERROR
arg	6:34	6:76	5	"Error applying generic filter options.\n"
water	6:34	0:0	6	"Error applying generic filter options.\n"
water	6:77	0:0	4	;
return	7:8	7:18	4	ret
water	7:15	0:0	5	ret
water	8:4	0:0	4	}
if	9:4	14:4	2	(ctx -> filter -> flags & AVFILTER_FLAG_SLICE_THREADS && ctx -> thread_type & ctx -> graph -> thread_type & AVFILTER_THREAD_SLICE && ctx -> graph -> internal -> thread_execute)
cond	9:8	11:30	3	ctx -> filter -> flags & AVFILTER_FLAG_SLICE_THREADS && ctx -> thread_type & ctx -> graph -> thread_type & AVFILTER_THREAD_SLICE && ctx -> graph -> internal -> thread_execute
water	9:8	0:0	4	ctx
op	9:11	0:0	4	->
water	9:13	0:0	4	filter
op	9:19	0:0	4	->
water	9:21	0:0	4	flags
op	9:27	0:0	4	&
water	9:29	0:0	4	AVFILTER_FLAG_SLICE_THREADS
op	9:57	0:0	4	&&
water	10:8	0:0	4	ctx
op	10:11	0:0	4	->
water	10:13	0:0	4	thread_type
op	10:25	0:0	4	&
water	10:27	0:0	4	ctx
op	10:30	0:0	4	->
water	10:32	0:0	4	graph
op	10:37	0:0	4	->
water	10:39	0:0	4	thread_type
op	10:51	0:0	4	&
water	10:53	0:0	4	AVFILTER_THREAD_SLICE
op	10:75	0:0	4	&&
water	11:8	0:0	4	ctx
op	11:11	0:0	4	->
water	11:13	0:0	4	graph
op	11:18	0:0	4	->
water	11:20	0:0	4	internal
op	11:28	0:0	4	->
water	11:30	0:0	4	thread_execute
stmts	11:46	14:4	3	
water	11:46	0:0	4	{
water	12:8	0:0	4	ctx
op	12:11	0:0	4	->
water	12:13	0:0	4	thread_type
op	12:31	0:0	4	=
water	12:33	0:0	4	AVFILTER_THREAD_SLICE
water	12:54	0:0	4	;
water	13:8	0:0	4	ctx
op	13:11	0:0	4	->
water	13:13	0:0	4	internal
op	13:21	0:0	4	->
water	13:23	0:0	4	execute
op	13:31	0:0	4	=
water	13:33	0:0	4	ctx
op	13:36	0:0	4	->
water	13:38	0:0	4	graph
op	13:43	0:0	4	->
water	13:45	0:0	4	internal
op	13:53	0:0	4	->
water	13:55	0:0	4	thread_execute
water	13:69	0:0	4	;
water	14:4	0:0	4	}
else	14:6	16:4	2
stmts	14:11	16:4	3	
water	14:11	0:0	4	{
water	15:8	0:0	4	ctx
op	15:11	0:0	4	->
water	15:13	0:0	4	thread_type
op	15:25	0:0	4	=
water	15:27	0:0	4	0
water	15:28	0:0	4	;
water	16:4	0:0	4	}
if	17:4	23:4	2	(ctx -> filter -> priv_class)
cond	17:8	17:21	3	ctx -> filter -> priv_class
water	17:8	0:0	4	ctx
op	17:11	0:0	4	->
water	17:13	0:0	4	filter
op	17:19	0:0	4	->
water	17:21	0:0	4	priv_class
stmts	17:33	23:4	3	
water	17:33	0:0	4	{
water	18:8	0:0	4	ret
op	18:12	0:0	4	=
call	18:14	18:48	4	av_opt_set_dict
arg	18:30	18:39	5	ctx->priv
water	18:30	0:0	6	ctx
op	18:33	0:0	6	->
water	18:35	0:0	6	priv
arg	18:41	18:48	5	options
water	18:41	0:0	6	options
water	18:49	0:0	4	;
if	19:8	22:8	4	(ret < 0)
cond	19:12	19:18	5	ret < 0
water	19:12	0:0	6	ret
op	19:16	0:0	6	<
water	19:18	0:0	6	0
stmts	19:21	22:8	5	
water	19:21	0:0	6	{
call	20:12	20:79	6	av_log
arg	20:19	20:22	7	ctx
water	20:19	0:0	8	ctx
arg	20:24	20:36	7	AV_LOG_ERROR
water	20:24	0:0	8	AV_LOG_ERROR
arg	20:38	20:79	7	"Error applying options to the filter.\n"
water	20:38	0:0	8	"Error applying options to the filter.\n"
water	20:80	0:0	6	;
return	21:12	21:22	6	ret
water	21:19	0:0	7	ret
water	22:8	0:0	6	}
water	23:4	0:0	4	}
if	24:4	25:49	2	(ctx -> filter -> init_opaque)
cond	24:8	24:21	3	ctx -> filter -> init_opaque
water	24:8	0:0	4	ctx
op	24:11	0:0	4	->
water	24:13	0:0	4	filter
op	24:19	0:0	4	->
water	24:21	0:0	4	init_opaque
stmts	25:8	25:49	3	
water	25:8	0:0	4	ret
op	25:12	0:0	4	=
call	25:14	25:48	4	ctx->filter->init_opaque
arg	25:39	25:42	5	ctx
water	25:39	0:0	6	ctx
arg	25:44	25:48	5	NULL
water	25:44	0:0	6	NULL
water	25:49	0:0	4	;
else	26:4	27:36	2
stmts	26:9	27:36	3	
if	26:9	27:36	4	(ctx -> filter -> init)
cond	26:13	26:26	5	ctx -> filter -> init
water	26:13	0:0	6	ctx
op	26:16	0:0	6	->
water	26:18	0:0	6	filter
op	26:24	0:0	6	->
water	26:26	0:0	6	init
stmts	27:8	27:36	5	
water	27:8	0:0	6	ret
op	27:12	0:0	6	=
call	27:14	27:35	6	ctx->filter->init
arg	27:32	27:35	7	ctx
water	27:32	0:0	8	ctx
water	27:36	0:0	6	;
else	28:4	29:50	2
stmts	28:9	29:50	3	
if	28:9	29:50	4	(ctx -> filter -> init_dict)
cond	28:13	28:26	5	ctx -> filter -> init_dict
water	28:13	0:0	6	ctx
op	28:16	0:0	6	->
water	28:18	0:0	6	filter
op	28:24	0:0	6	->
water	28:26	0:0	6	init_dict
stmts	29:8	29:50	5	
water	29:8	0:0	6	ret
op	29:12	0:0	6	=
call	29:14	29:49	6	ctx->filter->init_dict
arg	29:37	29:40	7	ctx
water	29:37	0:0	8	ctx
arg	29:42	29:49	7	options
water	29:42	0:0	8	options
water	29:50	0:0	6	;
return	30:4	30:14	2	ret
water	30:11	0:0	3	ret
