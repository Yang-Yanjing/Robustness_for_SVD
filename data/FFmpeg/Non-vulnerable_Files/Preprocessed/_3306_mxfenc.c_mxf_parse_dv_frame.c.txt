func	1:0	64:0	0	static int	mxf_parse_dv_frame
params	1:29	0:0	1	
param	1:30	1:48	2	AVFormatContext *	s
param	1:50	1:62	2	AVStream *	st
param	1:64	1:77	2	AVPacket *	pkt
stmnts	0:0	63:12	1	
decl	3:4	3:34	2	MXFContext	*mxf
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:40	2	MXFStreamContext	*sc
op	4:25	0:0	2	=
water	4:27	0:0	2	st
op	4:29	0:0	2	->
water	4:31	0:0	2	priv_data
decl	5:4	5:31	2	uint8_t	*vs_pack
water	5:20	0:0	2	,
decl	5:4	5:31	2	uint8_t	*vsc_pack
decl	6:4	6:43	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:43	2	int	ul_index
water	6:19	0:0	2	,
decl	6:4	6:43	2	int	frame_size
water	6:31	0:0	2	,
decl	6:4	6:43	2	int	stype
water	6:38	0:0	2	,
decl	6:4	6:43	2	int	pal
if	7:4	8:16	2	(mxf -> header_written)
cond	7:8	7:13	3	mxf -> header_written
water	7:8	0:0	4	mxf
op	7:11	0:0	4	->
water	7:13	0:0	4	header_written
stmts	8:8	8:16	3	
return	8:8	8:16	4	1
water	8:15	0:0	5	1
if	10:4	11:17	2	(pkt -> size < 120000)
cond	10:8	10:20	3	pkt -> size < 120000
water	10:8	0:0	4	pkt
op	10:11	0:0	4	->
water	10:13	0:0	4	size
op	10:18	0:0	4	<
water	10:20	0:0	4	120000
stmts	11:8	11:17	3	
return	11:8	11:17	4	-1
op	11:15	0:0	5	-
water	11:16	0:0	5	1
water	12:4	0:0	2	vs_pack
op	12:13	0:0	2	=
water	12:15	0:0	2	pkt
op	12:18	0:0	2	->
water	12:20	0:0	2	data
op	12:25	0:0	2	+
water	12:27	0:0	2	80
op	12:29	0:0	2	*
water	12:30	0:0	2	5
op	12:32	0:0	2	+
water	12:34	0:0	2	48
water	12:36	0:0	2	;
water	13:4	0:0	2	vsc_pack
op	13:13	0:0	2	=
water	13:15	0:0	2	pkt
op	13:18	0:0	2	->
water	13:20	0:0	2	data
op	13:25	0:0	2	+
water	13:27	0:0	2	80
op	13:29	0:0	2	*
water	13:30	0:0	2	5
op	13:32	0:0	2	+
water	13:34	0:0	2	53
water	13:36	0:0	2	;
water	14:4	0:0	2	stype
op	14:13	0:0	2	=
water	14:15	0:0	2	vs_pack
op	14:22	0:0	2	[
water	14:23	0:0	2	3
op	14:24	0:0	2	]
op	14:26	0:0	2	&
water	14:28	0:0	2	0
water	14:29	0:0	2	x1f
water	14:32	0:0	2	;
water	15:4	0:0	2	pal
op	15:13	0:0	2	=
water	15:15	0:0	2	(
water	15:16	0:0	2	vs_pack
op	15:23	0:0	2	[
water	15:24	0:0	2	3
op	15:25	0:0	2	]
op	15:27	0:0	2	>>
water	15:30	0:0	2	5
water	15:31	0:0	2	)
op	15:33	0:0	2	&
water	15:35	0:0	2	0
water	15:36	0:0	2	x1
water	15:38	0:0	2	;
if	16:4	17:48	2	(( vs_pack [ 2 ] & 0 x07 ) == 0 x02)
cond	16:8	16:32	3	( vs_pack [ 2 ] & 0 x07 ) == 0 x02
water	16:8	0:0	4	(
water	16:9	0:0	4	vs_pack
op	16:16	0:0	4	[
water	16:17	0:0	4	2
op	16:18	0:0	4	]
op	16:20	0:0	4	&
water	16:22	0:0	4	0
water	16:23	0:0	4	x07
water	16:26	0:0	4	)
op	16:28	0:0	4	==
water	16:31	0:0	4	0
water	16:32	0:0	4	x02
stmts	17:8	17:48	3	
water	17:8	0:0	4	sc
op	17:10	0:0	4	->
water	17:12	0:0	4	aspect_ratio
op	17:25	0:0	4	=
water	17:27	0:0	4	(
water	17:28	0:0	4	AVRational
water	17:38	0:0	4	)
water	17:39	0:0	4	{
water	17:41	0:0	4	16
water	17:43	0:0	4	,
water	17:45	0:0	4	9
water	17:47	0:0	4	}
water	17:48	0:0	4	;
else	18:4	19:47	2
stmts	19:8	19:47	3	
water	19:8	0:0	4	sc
op	19:10	0:0	4	->
water	19:12	0:0	4	aspect_ratio
op	19:25	0:0	4	=
water	19:27	0:0	4	(
water	19:28	0:0	4	AVRational
water	19:38	0:0	4	)
water	19:39	0:0	4	{
water	19:41	0:0	4	4
water	19:42	0:0	4	,
water	19:44	0:0	4	3
water	19:46	0:0	4	}
water	19:47	0:0	4	;
water	20:4	0:0	2	sc
op	20:6	0:0	2	->
water	20:8	0:0	2	interlaced
op	20:19	0:0	2	=
water	20:21	0:0	2	(
water	20:22	0:0	2	vsc_pack
op	20:30	0:0	2	[
water	20:31	0:0	2	3
op	20:32	0:0	2	]
op	20:34	0:0	2	>>
water	20:37	0:0	2	4
water	20:38	0:0	2	)
op	20:40	0:0	2	&
water	20:42	0:0	2	0
water	20:43	0:0	2	x01
water	20:46	0:0	2	;
switch	24:4	44:4	2	(stype)
cond	24:12	24:12	3	stype
water	24:12	0:0	4	stype
stmts	24:19	44:4	3	
water	24:19	0:0	4	{
label	25:4	25:13	4	case 0 x18 :
water	26:8	0:0	4	ul_index
op	26:17	0:0	4	=
water	26:19	0:0	4	6
op	26:21	0:0	4	+
water	26:23	0:0	4	pal
water	26:26	0:0	4	;
water	27:8	0:0	4	frame_size
op	27:19	0:0	4	=
water	27:21	0:0	4	pal
water	27:25	0:0	4	?
water	27:27	0:0	4	288000
water	27:34	0:0	4	:
water	27:36	0:0	4	240000
water	27:42	0:0	4	;
if	28:8	31:8	4	(sc -> interlaced)
cond	28:12	28:16	5	sc -> interlaced
water	28:12	0:0	6	sc
op	28:14	0:0	6	->
water	28:16	0:0	6	interlaced
stmts	28:28	31:8	5	
water	28:28	0:0	6	{
call	29:12	29:100	6	av_log
arg	29:19	29:20	7	s
water	29:19	0:0	8	s
arg	29:22	29:34	7	AV_LOG_ERROR
water	29:22	0:0	8	AV_LOG_ERROR
arg	29:36	29:100	7	"source marked as interlaced but codec profile is progressive\n"
water	29:36	0:0	8	"source marked as interlaced but codec profile is progressive\n"
water	29:101	0:0	6	;
water	30:12	0:0	6	sc
op	30:14	0:0	6	->
water	30:16	0:0	6	interlaced
op	30:27	0:0	6	=
water	30:29	0:0	6	0
water	30:30	0:0	6	;
water	31:8	0:0	6	}
break	32:8	32:13	4	
label	33:4	33:13	4	case 0 x14 :
water	34:8	0:0	4	ul_index
op	34:17	0:0	4	=
water	34:19	0:0	4	4
op	34:21	0:0	4	+
water	34:23	0:0	4	pal
water	34:26	0:0	4	;
water	35:8	0:0	4	frame_size
op	35:19	0:0	4	=
water	35:21	0:0	4	pal
water	35:25	0:0	4	?
water	35:27	0:0	4	576000
water	35:34	0:0	4	:
water	35:36	0:0	4	480000
water	35:42	0:0	4	;
break	36:8	36:13	4	
label	37:4	37:13	4	case 0 x04 :
water	38:8	0:0	4	ul_index
op	38:17	0:0	4	=
water	38:19	0:0	4	2
op	38:21	0:0	4	+
water	38:23	0:0	4	pal
water	38:26	0:0	4	;
water	39:8	0:0	4	frame_size
op	39:19	0:0	4	=
water	39:21	0:0	4	pal
water	39:25	0:0	4	?
water	39:27	0:0	4	288000
water	39:34	0:0	4	:
water	39:36	0:0	4	240000
water	39:42	0:0	4	;
break	40:8	40:13	4	
label	41:4	41:11	4	default :
water	42:8	0:0	4	ul_index
op	42:17	0:0	4	=
water	42:19	0:0	4	0
op	42:21	0:0	4	+
water	42:23	0:0	4	pal
water	42:26	0:0	4	;
water	43:8	0:0	4	frame_size
op	43:19	0:0	4	=
water	43:21	0:0	4	pal
water	43:25	0:0	4	?
water	43:27	0:0	4	144000
water	43:34	0:0	4	:
water	43:36	0:0	4	120000
water	43:42	0:0	4	;
water	44:4	0:0	4	}
water	45:4	0:0	2	sc
op	45:6	0:0	2	->
water	45:8	0:0	2	index
op	45:14	0:0	2	=
water	45:16	0:0	2	ul_index
op	45:25	0:0	2	+
water	45:27	0:0	2	16
water	45:29	0:0	2	;
water	46:4	0:0	2	sc
op	46:6	0:0	2	->
water	46:8	0:0	2	codec_ul
op	46:17	0:0	2	=
op	46:20	0:0	2	&
water	46:21	0:0	2	mxf_essence_container_uls
op	46:46	0:0	2	[
water	46:47	0:0	2	sc
op	46:49	0:0	2	->
water	46:51	0:0	2	index
op	46:56	0:0	2	]
op	46:57	0:0	2	.
water	46:58	0:0	2	codec_ul
water	46:66	0:0	2	;
if	47:4	50:4	2	(s -> oformat == & ff_mxf_opatom_muxer)
cond	47:7	47:22	3	s -> oformat == & ff_mxf_opatom_muxer
water	47:7	0:0	4	s
op	47:8	0:0	4	->
water	47:10	0:0	4	oformat
op	47:18	0:0	4	==
op	47:21	0:0	4	&
water	47:22	0:0	4	ff_mxf_opatom_muxer
stmts	47:43	50:4	3	
water	47:43	0:0	4	{
water	48:8	0:0	4	mxf
op	48:11	0:0	4	->
water	48:13	0:0	4	edit_unit_byte_count
op	48:34	0:0	4	=
water	48:36	0:0	4	frame_size
water	48:46	0:0	4	;
return	49:8	49:16	4	1
water	49:15	0:0	5	1
water	50:4	0:0	4	}
water	51:4	0:0	2	mxf
op	51:7	0:0	2	->
water	51:9	0:0	2	edit_unit_byte_count
op	51:30	0:0	2	=
water	51:32	0:0	2	KAG_SIZE
water	51:40	0:0	2	;
for	52:4	62:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	52:9	52:14	3	i = 0 ;
water	52:9	0:0	4	i
op	52:11	0:0	4	=
water	52:13	0:0	4	0
water	52:14	0:0	4	;
cond	52:16	52:23	3	i < s -> nb_streams
water	52:16	0:0	4	i
op	52:18	0:0	4	<
water	52:20	0:0	4	s
op	52:21	0:0	4	->
water	52:23	0:0	4	nb_streams
forexpr	52:35	52:36	3	i ++
water	52:35	0:0	4	i
op	52:36	0:0	4	++
stmts	52:40	62:4	3	
water	52:40	0:0	4	{
decl	53:8	53:36	4	AVStream	*st
op	53:21	0:0	4	=
water	53:23	0:0	4	s
op	53:24	0:0	4	->
water	53:26	0:0	4	streams
op	53:33	0:0	4	[
water	53:34	0:0	4	i
op	53:35	0:0	4	]
decl	54:8	54:44	4	MXFStreamContext	*sc
op	54:29	0:0	4	=
water	54:31	0:0	4	st
op	54:33	0:0	4	->
water	54:35	0:0	4	priv_data
if	55:8	58:8	4	(st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	55:12	55:37	5	st -> codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	55:12	0:0	6	st
op	55:14	0:0	6	->
water	55:16	0:0	6	codec
op	55:21	0:0	6	->
water	55:23	0:0	6	codec_type
op	55:34	0:0	6	==
water	55:37	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	55:57	58:8	5	
water	55:57	0:0	6	{
water	56:12	0:0	6	mxf
op	56:15	0:0	6	->
water	56:17	0:0	6	edit_unit_byte_count
op	56:38	0:0	6	+=
water	56:41	0:0	6	16
op	56:44	0:0	6	+
water	56:46	0:0	6	4
op	56:48	0:0	6	+
water	56:50	0:0	6	sc
op	56:52	0:0	6	->
water	56:54	0:0	6	aic
op	56:57	0:0	6	.
water	56:58	0:0	6	samples
op	56:65	0:0	6	[
water	56:66	0:0	6	0
op	56:67	0:0	6	]
op	56:68	0:0	6	*
water	56:69	0:0	6	sc
op	56:71	0:0	6	->
water	56:73	0:0	6	aic
op	56:76	0:0	6	.
water	56:77	0:0	6	sample_size
water	56:88	0:0	6	;
water	57:12	0:0	6	mxf
op	57:15	0:0	6	->
water	57:17	0:0	6	edit_unit_byte_count
op	57:38	0:0	6	+=
call	57:41	57:80	6	klv_fill_size
arg	57:55	57:80	7	mxf->edit_unit_byte_count
water	57:55	0:0	8	mxf
op	57:58	0:0	8	->
water	57:60	0:0	8	edit_unit_byte_count
water	57:81	0:0	6	;
water	58:8	0:0	6	}
else	58:10	61:8	4
stmts	58:15	61:8	5	
if	58:15	61:8	6	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	58:19	58:44	7	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	58:19	0:0	8	st
op	58:21	0:0	8	->
water	58:23	0:0	8	codec
op	58:28	0:0	8	->
water	58:30	0:0	8	codec_type
op	58:41	0:0	8	==
water	58:44	0:0	8	AVMEDIA_TYPE_VIDEO
stmts	58:64	61:8	7	
water	58:64	0:0	8	{
water	59:12	0:0	8	mxf
op	59:15	0:0	8	->
water	59:17	0:0	8	edit_unit_byte_count
op	59:38	0:0	8	+=
water	59:41	0:0	8	16
op	59:44	0:0	8	+
water	59:46	0:0	8	4
op	59:48	0:0	8	+
water	59:50	0:0	8	frame_size
water	59:60	0:0	8	;
water	60:12	0:0	8	mxf
op	60:15	0:0	8	->
water	60:17	0:0	8	edit_unit_byte_count
op	60:38	0:0	8	+=
call	60:41	60:80	8	klv_fill_size
arg	60:55	60:80	9	mxf->edit_unit_byte_count
water	60:55	0:0	10	mxf
op	60:58	0:0	10	->
water	60:60	0:0	10	edit_unit_byte_count
water	60:81	0:0	8	;
water	61:8	0:0	8	}
water	62:4	0:0	4	}
return	63:4	63:12	2	1
water	63:11	0:0	3	1
