func	1:8	115:0	0	int	ff_alsa_open
params	1:24	0:0	1	
param	1:25	1:45	2	AVFormatContext *	ctx
param	1:47	1:68	2	snd_pcm_stream_t	mode
param	2:25	2:50	2	unsigned int *	sample_rate
param	3:25	3:37	2	int	channels
param	3:39	3:63	2	enum AVCodecID *	codec_id
stmnts	0:0	114:23	1	
decl	5:4	5:32	2	AlsaData	*s
op	5:16	0:0	2	=
water	5:18	0:0	2	ctx
op	5:21	0:0	2	->
water	5:23	0:0	2	priv_data
decl	6:4	6:28	2	const char	*audio_device
decl	7:4	7:22	2	int	res
water	7:11	0:0	2	,
decl	7:4	7:22	2	int	flags
op	7:19	0:0	2	=
water	7:21	0:0	2	0
decl	8:4	8:27	2	snd_pcm_format_t	format
decl	9:4	9:16	2	snd_pcm_t	*h
decl	10:4	10:34	2	snd_pcm_hw_params_t	*hw_params
decl	11:4	11:46	2	snd_pcm_uframes_t	buffer_size
water	11:33	0:0	2	,
decl	11:4	11:46	2	snd_pcm_uframes_t	period_size
decl	12:4	12:60	2	uint64_t	layout
op	12:20	0:0	2	=
water	12:22	0:0	2	ctx
op	12:25	0:0	2	->
water	12:27	0:0	2	streams
op	12:34	0:0	2	[
water	12:35	0:0	2	0
op	12:36	0:0	2	]
op	12:37	0:0	2	->
water	12:39	0:0	2	codec
op	12:44	0:0	2	->
water	12:46	0:0	2	channel_layout
if	13:4	13:55	2	(ctx -> filename [ 0 ] == 0)
cond	13:8	13:28	3	ctx -> filename [ 0 ] == 0
water	13:8	0:0	4	ctx
op	13:11	0:0	4	->
water	13:13	0:0	4	filename
op	13:21	0:0	4	[
water	13:22	0:0	4	0
op	13:23	0:0	4	]
op	13:25	0:0	4	==
water	13:28	0:0	4	0
stmts	13:31	13:55	3	
water	13:31	0:0	4	audio_device
op	13:44	0:0	4	=
water	13:46	0:0	4	"default"
water	13:55	0:0	4	;
else	14:4	14:59	2
stmts	14:31	14:59	3	
water	14:31	0:0	4	audio_device
op	14:44	0:0	4	=
water	14:46	0:0	4	ctx
op	14:49	0:0	4	->
water	14:51	0:0	4	filename
water	14:59	0:0	4	;
if	15:4	16:36	2	(* codec_id == AV_CODEC_ID_NONE)
cond	15:8	15:21	3	* codec_id == AV_CODEC_ID_NONE
op	15:8	0:0	4	*
water	15:9	0:0	4	codec_id
op	15:18	0:0	4	==
water	15:21	0:0	4	AV_CODEC_ID_NONE
stmts	16:8	16:36	3	
op	16:8	0:0	4	*
water	16:9	0:0	4	codec_id
op	16:18	0:0	4	=
water	16:20	0:0	4	DEFAULT_CODEC_ID
water	16:36	0:0	4	;
water	17:4	0:0	2	format
op	17:11	0:0	2	=
call	17:13	17:45	2	codec_id_to_pcm_format
arg	17:36	17:45	3	*codec_id
op	17:36	0:0	4	*
water	17:37	0:0	4	codec_id
water	17:46	0:0	2	;
if	18:4	21:4	2	(format == SND_PCM_FORMAT_UNKNOWN)
cond	18:8	18:18	3	format == SND_PCM_FORMAT_UNKNOWN
water	18:8	0:0	4	format
op	18:15	0:0	4	==
water	18:18	0:0	4	SND_PCM_FORMAT_UNKNOWN
stmts	18:42	21:4	3	
water	18:42	0:0	4	{
call	19:8	19:86	4	av_log
arg	19:15	19:18	5	ctx
water	19:15	0:0	6	ctx
arg	19:20	19:32	5	AV_LOG_ERROR
water	19:20	0:0	6	AV_LOG_ERROR
arg	19:34	19:75	5	"sample format 0x%04x is not supported\n"
water	19:34	0:0	6	"sample format 0x%04x is not supported\n"
arg	19:77	19:86	5	*codec_id
op	19:77	0:0	6	*
water	19:78	0:0	6	codec_id
water	19:87	0:0	4	;
return	20:8	20:30	4	AVERROR(ENOSYS)
call	20:15	20:29	5	AVERROR
arg	20:23	20:29	6	ENOSYS
water	20:23	0:0	7	ENOSYS
water	21:4	0:0	4	}
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	frame_size
op	22:18	0:0	2	=
call	22:20	22:52	2	av_get_bits_per_sample
arg	22:43	22:52	3	*codec_id
op	22:43	0:0	4	*
water	22:44	0:0	4	codec_id
op	22:54	0:0	2	/
water	22:56	0:0	2	8
op	22:58	0:0	2	*
water	22:60	0:0	2	channels
water	22:68	0:0	2	;
if	23:4	25:4	2	(ctx -> flags & AVFMT_FLAG_NONBLOCK)
cond	23:8	23:21	3	ctx -> flags & AVFMT_FLAG_NONBLOCK
water	23:8	0:0	4	ctx
op	23:11	0:0	4	->
water	23:13	0:0	4	flags
op	23:19	0:0	4	&
water	23:21	0:0	4	AVFMT_FLAG_NONBLOCK
stmts	23:42	25:4	3	
water	23:42	0:0	4	{
water	24:8	0:0	4	flags
op	24:14	0:0	4	=
water	24:16	0:0	4	SND_PCM_NONBLOCK
water	24:32	0:0	4	;
water	25:4	0:0	4	}
water	26:4	0:0	2	res
op	26:8	0:0	2	=
call	26:10	26:52	2	snd_pcm_open
arg	26:23	26:25	3	&h
op	26:23	0:0	4	&
water	26:24	0:0	4	h
arg	26:27	26:39	3	audio_device
water	26:27	0:0	4	audio_device
arg	26:41	26:45	3	mode
water	26:41	0:0	4	mode
arg	26:47	26:52	3	flags
water	26:47	0:0	4	flags
water	26:53	0:0	2	;
if	27:4	31:4	2	(res < 0)
cond	27:8	27:14	3	res < 0
water	27:8	0:0	4	res
op	27:12	0:0	4	<
water	27:14	0:0	4	0
stmts	27:17	31:4	3	
water	27:17	0:0	4	{
call	28:8	29:46	4	av_log
arg	28:15	28:18	5	ctx
water	28:15	0:0	6	ctx
arg	28:20	28:32	5	AV_LOG_ERROR
water	28:20	0:0	6	AV_LOG_ERROR
arg	28:34	28:70	5	"cannot open audio device %s (%s)\n"
water	28:34	0:0	6	"cannot open audio device %s (%s)\n"
arg	29:15	29:27	5	audio_device
water	29:15	0:0	6	audio_device
arg	29:29	29:46	5	snd_strerror(res)
call	29:29	29:45	6	snd_strerror
arg	29:42	29:45	7	res
water	29:42	0:0	8	res
water	29:47	0:0	4	;
return	30:8	30:27	4	AVERROR(EIO)
call	30:15	30:26	5	AVERROR
arg	30:23	30:26	6	EIO
water	30:23	0:0	7	EIO
water	31:4	0:0	4	}
water	32:4	0:0	2	res
op	32:8	0:0	2	=
call	32:10	32:45	2	snd_pcm_hw_params_malloc
arg	32:35	32:45	3	&hw_params
op	32:35	0:0	4	&
water	32:36	0:0	4	hw_params
water	32:46	0:0	2	;
if	33:4	37:4	2	(res < 0)
cond	33:8	33:14	3	res < 0
water	33:8	0:0	4	res
op	33:12	0:0	4	<
water	33:14	0:0	4	0
stmts	33:17	37:4	3	
water	33:17	0:0	4	{
call	34:8	35:32	4	av_log
arg	34:15	34:18	5	ctx
water	34:15	0:0	6	ctx
arg	34:20	34:32	5	AV_LOG_ERROR
water	34:20	0:0	6	AV_LOG_ERROR
arg	34:34	34:87	5	"cannot allocate hardware parameter structure (%s)\n"
water	34:34	0:0	6	"cannot allocate hardware parameter structure (%s)\n"
arg	35:15	35:32	5	snd_strerror(res)
call	35:15	35:31	6	snd_strerror
arg	35:28	35:31	7	res
water	35:28	0:0	8	res
water	35:33	0:0	4	;
goto	36:8	36:18	4	fail1
water	36:13	0:0	5	fail1
water	37:4	0:0	4	}
water	38:4	0:0	2	res
op	38:8	0:0	2	=
call	38:10	38:44	2	snd_pcm_hw_params_any
arg	38:32	38:33	3	h
water	38:32	0:0	4	h
arg	38:35	38:44	3	hw_params
water	38:35	0:0	4	hw_params
water	38:45	0:0	2	;
if	39:4	43:4	2	(res < 0)
cond	39:8	39:14	3	res < 0
water	39:8	0:0	4	res
op	39:12	0:0	4	<
water	39:14	0:0	4	0
stmts	39:17	43:4	3	
water	39:17	0:0	4	{
call	40:8	41:32	4	av_log
arg	40:15	40:18	5	ctx
water	40:15	0:0	6	ctx
arg	40:20	40:32	5	AV_LOG_ERROR
water	40:20	0:0	6	AV_LOG_ERROR
arg	40:34	40:89	5	"cannot initialize hardware parameter structure (%s)\n"
water	40:34	0:0	6	"cannot initialize hardware parameter structure (%s)\n"
arg	41:15	41:32	5	snd_strerror(res)
call	41:15	41:31	6	snd_strerror
arg	41:28	41:31	7	res
water	41:28	0:0	8	res
water	41:33	0:0	4	;
goto	42:8	42:17	4	fail
water	42:13	0:0	5	fail
water	43:4	0:0	4	}
water	44:4	0:0	2	res
op	44:8	0:0	2	=
call	44:10	44:82	2	snd_pcm_hw_params_set_access
arg	44:39	44:40	3	h
water	44:39	0:0	4	h
arg	44:42	44:51	3	hw_params
water	44:42	0:0	4	hw_params
arg	44:53	44:82	3	SND_PCM_ACCESS_RW_INTERLEAVED
water	44:53	0:0	4	SND_PCM_ACCESS_RW_INTERLEAVED
water	44:83	0:0	2	;
if	45:4	49:4	2	(res < 0)
cond	45:8	45:14	3	res < 0
water	45:8	0:0	4	res
op	45:12	0:0	4	<
water	45:14	0:0	4	0
stmts	45:17	49:4	3	
water	45:17	0:0	4	{
call	46:8	47:32	4	av_log
arg	46:15	46:18	5	ctx
water	46:15	0:0	6	ctx
arg	46:20	46:32	5	AV_LOG_ERROR
water	46:20	0:0	6	AV_LOG_ERROR
arg	46:34	46:65	5	"cannot set access type (%s)\n"
water	46:34	0:0	6	"cannot set access type (%s)\n"
arg	47:15	47:32	5	snd_strerror(res)
call	47:15	47:31	6	snd_strerror
arg	47:28	47:31	7	res
water	47:28	0:0	8	res
water	47:33	0:0	4	;
goto	48:8	48:17	4	fail
water	48:13	0:0	5	fail
water	49:4	0:0	4	}
water	50:4	0:0	2	res
op	50:8	0:0	2	=
call	50:10	50:59	2	snd_pcm_hw_params_set_format
arg	50:39	50:40	3	h
water	50:39	0:0	4	h
arg	50:42	50:51	3	hw_params
water	50:42	0:0	4	hw_params
arg	50:53	50:59	3	format
water	50:53	0:0	4	format
water	50:60	0:0	2	;
if	51:4	55:4	2	(res < 0)
cond	51:8	51:14	3	res < 0
water	51:8	0:0	4	res
op	51:12	0:0	4	<
water	51:14	0:0	4	0
stmts	51:17	55:4	3	
water	51:17	0:0	4	{
call	52:8	53:51	4	av_log
arg	52:15	52:18	5	ctx
water	52:15	0:0	6	ctx
arg	52:20	52:32	5	AV_LOG_ERROR
water	52:20	0:0	6	AV_LOG_ERROR
arg	52:34	52:77	5	"cannot set sample format 0x%04x %d (%s)\n"
water	52:34	0:0	6	"cannot set sample format 0x%04x %d (%s)\n"
arg	53:15	53:24	5	*codec_id
op	53:15	0:0	6	*
water	53:16	0:0	6	codec_id
arg	53:26	53:32	5	format
water	53:26	0:0	6	format
arg	53:34	53:51	5	snd_strerror(res)
call	53:34	53:50	6	snd_strerror
arg	53:47	53:50	7	res
water	53:47	0:0	8	res
water	53:52	0:0	4	;
goto	54:8	54:17	4	fail
water	54:13	0:0	5	fail
water	55:4	0:0	4	}
water	56:4	0:0	2	res
op	56:8	0:0	2	=
call	56:10	56:70	2	snd_pcm_hw_params_set_rate_near
arg	56:42	56:43	3	h
water	56:42	0:0	4	h
arg	56:45	56:54	3	hw_params
water	56:45	0:0	4	hw_params
arg	56:56	56:67	3	sample_rate
water	56:56	0:0	4	sample_rate
arg	56:69	56:70	3	0
water	56:69	0:0	4	0
water	56:71	0:0	2	;
if	57:4	61:4	2	(res < 0)
cond	57:8	57:14	3	res < 0
water	57:8	0:0	4	res
op	57:12	0:0	4	<
water	57:14	0:0	4	0
stmts	57:17	61:4	3	
water	57:17	0:0	4	{
call	58:8	59:32	4	av_log
arg	58:15	58:18	5	ctx
water	58:15	0:0	6	ctx
arg	58:20	58:32	5	AV_LOG_ERROR
water	58:20	0:0	6	AV_LOG_ERROR
arg	58:34	58:65	5	"cannot set sample rate (%s)\n"
water	58:34	0:0	6	"cannot set sample rate (%s)\n"
arg	59:15	59:32	5	snd_strerror(res)
call	59:15	59:31	6	snd_strerror
arg	59:28	59:31	7	res
water	59:28	0:0	8	res
water	59:33	0:0	4	;
goto	60:8	60:17	4	fail
water	60:13	0:0	5	fail
water	61:4	0:0	4	}
water	62:4	0:0	2	res
op	62:8	0:0	2	=
call	62:10	62:63	2	snd_pcm_hw_params_set_channels
arg	62:41	62:42	3	h
water	62:41	0:0	4	h
arg	62:44	62:53	3	hw_params
water	62:44	0:0	4	hw_params
arg	62:55	62:63	3	channels
water	62:55	0:0	4	channels
water	62:64	0:0	2	;
if	63:4	67:4	2	(res < 0)
cond	63:8	63:14	3	res < 0
water	63:8	0:0	4	res
op	63:12	0:0	4	<
water	63:14	0:0	4	0
stmts	63:17	67:4	3	
water	63:17	0:0	4	{
call	64:8	65:42	4	av_log
arg	64:15	64:18	5	ctx
water	64:15	0:0	6	ctx
arg	64:20	64:32	5	AV_LOG_ERROR
water	64:20	0:0	6	AV_LOG_ERROR
arg	64:34	64:73	5	"cannot set channel count to %d (%s)\n"
water	64:34	0:0	6	"cannot set channel count to %d (%s)\n"
arg	65:15	65:23	5	channels
water	65:15	0:0	6	channels
arg	65:25	65:42	5	snd_strerror(res)
call	65:25	65:41	6	snd_strerror
arg	65:38	65:41	7	res
water	65:38	0:0	8	res
water	65:43	0:0	4	;
goto	66:8	66:17	4	fail
water	66:13	0:0	5	fail
water	67:4	0:0	4	}
call	68:4	68:65	2	snd_pcm_hw_params_get_buffer_size_max
arg	68:42	68:51	3	hw_params
water	68:42	0:0	4	hw_params
arg	68:53	68:65	3	&buffer_size
op	68:53	0:0	4	&
water	68:54	0:0	4	buffer_size
water	68:66	0:0	2	;
water	69:4	0:0	2	buffer_size
op	69:16	0:0	2	=
call	69:18	69:57	2	FFMIN
arg	69:24	69:35	3	buffer_size
water	69:24	0:0	4	buffer_size
arg	69:37	69:57	3	ALSA_BUFFER_SIZE_MAX
water	69:37	0:0	4	ALSA_BUFFER_SIZE_MAX
water	69:58	0:0	2	;
water	71:4	0:0	2	res
op	71:8	0:0	2	=
call	71:10	71:75	2	snd_pcm_hw_params_set_buffer_size_near
arg	71:49	71:50	3	h
water	71:49	0:0	4	h
arg	71:52	71:61	3	hw_params
water	71:52	0:0	4	hw_params
arg	71:63	71:75	3	&buffer_size
op	71:63	0:0	4	&
water	71:64	0:0	4	buffer_size
water	71:76	0:0	2	;
if	72:4	76:4	2	(res < 0)
cond	72:8	72:14	3	res < 0
water	72:8	0:0	4	res
op	72:12	0:0	4	<
water	72:14	0:0	4	0
stmts	72:17	76:4	3	
water	72:17	0:0	4	{
call	73:8	74:32	4	av_log
arg	73:15	73:18	5	ctx
water	73:15	0:0	6	ctx
arg	73:20	73:32	5	AV_LOG_ERROR
water	73:20	0:0	6	AV_LOG_ERROR
arg	73:34	73:70	5	"cannot set ALSA buffer size (%s)\n"
water	73:34	0:0	6	"cannot set ALSA buffer size (%s)\n"
arg	74:15	74:32	5	snd_strerror(res)
call	74:15	74:31	6	snd_strerror
arg	74:28	74:31	7	res
water	74:28	0:0	8	res
water	74:33	0:0	4	;
goto	75:8	75:17	4	fail
water	75:13	0:0	5	fail
water	76:4	0:0	4	}
call	77:4	77:71	2	snd_pcm_hw_params_get_period_size_min
arg	77:42	77:51	3	hw_params
water	77:42	0:0	4	hw_params
arg	77:53	77:65	3	&period_size
op	77:53	0:0	4	&
water	77:54	0:0	4	period_size
arg	77:67	77:71	3	NULL
water	77:67	0:0	4	NULL
water	77:72	0:0	2	;
if	78:4	79:37	2	(! period_size)
cond	78:8	78:9	3	! period_size
op	78:8	0:0	4	!
water	78:9	0:0	4	period_size
stmts	79:8	79:37	3	
water	79:8	0:0	4	period_size
op	79:20	0:0	4	=
water	79:22	0:0	4	buffer_size
op	79:34	0:0	4	/
water	79:36	0:0	4	4
water	79:37	0:0	4	;
water	80:4	0:0	2	res
op	80:8	0:0	2	=
call	80:10	80:81	2	snd_pcm_hw_params_set_period_size_near
arg	80:49	80:50	3	h
water	80:49	0:0	4	h
arg	80:52	80:61	3	hw_params
water	80:52	0:0	4	hw_params
arg	80:63	80:75	3	&period_size
op	80:63	0:0	4	&
water	80:64	0:0	4	period_size
arg	80:77	80:81	3	NULL
water	80:77	0:0	4	NULL
water	80:82	0:0	2	;
if	81:4	85:4	2	(res < 0)
cond	81:8	81:14	3	res < 0
water	81:8	0:0	4	res
op	81:12	0:0	4	<
water	81:14	0:0	4	0
stmts	81:17	85:4	3	
water	81:17	0:0	4	{
call	82:8	83:32	4	av_log
arg	82:15	82:18	5	ctx
water	82:15	0:0	6	ctx
arg	82:20	82:32	5	AV_LOG_ERROR
water	82:20	0:0	6	AV_LOG_ERROR
arg	82:34	82:70	5	"cannot set ALSA period size (%s)\n"
water	82:34	0:0	6	"cannot set ALSA period size (%s)\n"
arg	83:15	83:32	5	snd_strerror(res)
call	83:15	83:31	6	snd_strerror
arg	83:28	83:31	7	res
water	83:28	0:0	8	res
water	83:33	0:0	4	;
goto	84:8	84:17	4	fail
water	84:13	0:0	5	fail
water	85:4	0:0	4	}
water	86:4	0:0	2	s
op	86:5	0:0	2	->
water	86:7	0:0	2	period_size
op	86:19	0:0	2	=
water	86:21	0:0	2	period_size
water	86:32	0:0	2	;
water	87:4	0:0	2	res
op	87:8	0:0	2	=
call	87:10	87:40	2	snd_pcm_hw_params
arg	87:28	87:29	3	h
water	87:28	0:0	4	h
arg	87:31	87:40	3	hw_params
water	87:31	0:0	4	hw_params
water	87:41	0:0	2	;
if	88:4	92:4	2	(res < 0)
cond	88:8	88:14	3	res < 0
water	88:8	0:0	4	res
op	88:12	0:0	4	<
water	88:14	0:0	4	0
stmts	88:17	92:4	3	
water	88:17	0:0	4	{
call	89:8	90:32	4	av_log
arg	89:15	89:18	5	ctx
water	89:15	0:0	6	ctx
arg	89:20	89:32	5	AV_LOG_ERROR
water	89:20	0:0	6	AV_LOG_ERROR
arg	89:34	89:64	5	"cannot set parameters (%s)\n"
water	89:34	0:0	6	"cannot set parameters (%s)\n"
arg	90:15	90:32	5	snd_strerror(res)
call	90:15	90:31	6	snd_strerror
arg	90:28	90:31	7	res
water	90:28	0:0	8	res
water	90:33	0:0	4	;
goto	91:8	91:17	4	fail
water	91:13	0:0	5	fail
water	92:4	0:0	4	}
call	93:4	93:36	2	snd_pcm_hw_params_free
arg	93:27	93:36	3	hw_params
water	93:27	0:0	4	hw_params
water	93:37	0:0	2	;
if	94:4	107:4	2	(channels > 2 && layout)
cond	94:8	94:24	3	channels > 2 && layout
water	94:8	0:0	4	channels
op	94:17	0:0	4	>
water	94:19	0:0	4	2
op	94:21	0:0	4	&&
water	94:24	0:0	4	layout
stmts	94:32	107:4	3	
water	94:32	0:0	4	{
if	95:8	100:8	4	(find_reorder_func (s ,* codec_id ,layout ,mode == SND_PCM_STREAM_PLAYBACK ) < 0)
cond	95:12	95:87	5	find_reorder_func (s ,* codec_id ,layout ,mode == SND_PCM_STREAM_PLAYBACK ) < 0
call	95:12	95:83	6	find_reorder_func
arg	95:30	95:31	7	s
water	95:30	0:0	8	s
arg	95:33	95:42	7	*codec_id
op	95:33	0:0	8	*
water	95:34	0:0	8	codec_id
arg	95:44	95:50	7	layout
water	95:44	0:0	8	layout
arg	95:52	95:83	7	mode==SND_PCM_STREAM_PLAYBACK
water	95:52	0:0	8	mode
op	95:57	0:0	8	==
water	95:60	0:0	8	SND_PCM_STREAM_PLAYBACK
op	95:85	0:0	6	<
water	95:87	0:0	6	0
stmts	95:90	100:8	5	
water	95:90	0:0	6	{
decl	96:12	96:26	6	char	name[128]
call	97:12	97:77	6	av_get_channel_layout_string
arg	97:41	97:45	7	name
water	97:41	0:0	8	name
arg	97:47	97:59	7	sizeof(name)
op	97:47	0:0	8	sizeof
water	97:53	0:0	8	(
water	97:54	0:0	8	name
water	97:58	0:0	8	)
arg	97:61	97:69	7	channels
water	97:61	0:0	8	channels
arg	97:71	97:77	7	layout
water	97:71	0:0	8	layout
water	97:78	0:0	6	;
call	98:12	99:81	6	av_log
arg	98:19	98:22	7	ctx
water	98:19	0:0	8	ctx
arg	98:24	98:38	7	AV_LOG_WARNING
water	98:24	0:0	8	AV_LOG_WARNING
arg	98:40	98:99	7	"ALSA channel layout unknown or unimplemented for %s %s.\n"
water	98:40	0:0	8	"ALSA channel layout unknown or unimplemented for %s %s.\n"
arg	99:19	99:23	7	name
water	99:19	0:0	8	name
arg	99:25	99:81	7	mode==SND_PCM_STREAM_PLAYBACK?"playback":"capture"
water	99:25	0:0	8	mode
op	99:30	0:0	8	==
water	99:33	0:0	8	SND_PCM_STREAM_PLAYBACK
water	99:57	0:0	8	?
water	99:59	0:0	8	"playback"
water	99:70	0:0	8	:
water	99:72	0:0	8	"capture"
water	99:82	0:0	6	;
water	100:8	0:0	6	}
if	101:8	106:8	4	(s -> reorder_func)
cond	101:12	101:15	5	s -> reorder_func
water	101:12	0:0	6	s
op	101:13	0:0	6	->
water	101:15	0:0	6	reorder_func
stmts	101:29	106:8	5	
water	101:29	0:0	6	{
water	102:12	0:0	6	s
op	102:13	0:0	6	->
water	102:15	0:0	6	reorder_buf_size
op	102:32	0:0	6	=
water	102:34	0:0	6	buffer_size
water	102:45	0:0	6	;
water	103:12	0:0	6	s
op	103:13	0:0	6	->
water	103:15	0:0	6	reorder_buf
op	103:27	0:0	6	=
call	103:29	103:79	6	av_malloc_array
arg	103:45	103:64	7	s->reorder_buf_size
water	103:45	0:0	8	s
op	103:46	0:0	8	->
water	103:48	0:0	8	reorder_buf_size
arg	103:66	103:79	7	s->frame_size
water	103:66	0:0	8	s
op	103:67	0:0	8	->
water	103:69	0:0	8	frame_size
water	103:80	0:0	6	;
if	104:12	105:26	6	(! s -> reorder_buf)
cond	104:16	104:20	7	! s -> reorder_buf
op	104:16	0:0	8	!
water	104:17	0:0	8	s
op	104:18	0:0	8	->
water	104:20	0:0	8	reorder_buf
stmts	105:16	105:26	7	
goto	105:16	105:26	8	fail1
water	105:21	0:0	9	fail1
water	106:8	0:0	6	}
water	107:4	0:0	4	}
water	108:4	0:0	2	s
op	108:5	0:0	2	->
water	108:7	0:0	2	h
op	108:9	0:0	2	=
water	108:11	0:0	2	h
water	108:12	0:0	2	;
return	109:4	109:12	2	0
water	109:11	0:0	3	0
label	110:0	110:4	2	fail :
call	111:4	111:36	2	snd_pcm_hw_params_free
arg	111:27	111:36	3	hw_params
water	111:27	0:0	4	hw_params
water	111:37	0:0	2	;
label	112:0	112:5	2	fail1 :
call	113:4	113:19	2	snd_pcm_close
arg	113:18	113:19	3	h
water	113:18	0:0	4	h
water	113:20	0:0	2	;
return	114:4	114:23	2	AVERROR(EIO)
call	114:11	114:22	3	AVERROR
arg	114:19	114:22	4	EIO
water	114:19	0:0	5	EIO
