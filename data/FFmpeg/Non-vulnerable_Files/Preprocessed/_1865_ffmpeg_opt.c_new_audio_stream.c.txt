func	1:0	57:0	0	static OutputStream *	new_audio_stream
params	1:37	0:0	1	
param	1:38	1:55	2	OptionsContext *	o
param	1:57	1:76	2	AVFormatContext *	oc
param	1:78	1:94	2	int	source_index
stmnts	0:0	56:14	1	
decl	3:4	3:9	2	int	n
decl	4:4	4:16	2	AVStream	*st
decl	5:4	5:21	2	OutputStream	*ost
decl	6:4	6:29	2	AVCodecContext	*audio_enc
water	7:4	0:0	2	ost
op	7:8	0:0	2	=
call	7:10	7:67	2	new_output_stream
arg	7:28	7:29	3	o
water	7:28	0:0	4	o
arg	7:31	7:33	3	oc
water	7:31	0:0	4	oc
arg	7:35	7:53	3	AVMEDIA_TYPE_AUDIO
water	7:35	0:0	4	AVMEDIA_TYPE_AUDIO
arg	7:55	7:67	3	source_index
water	7:55	0:0	4	source_index
water	7:68	0:0	2	;
water	8:4	0:0	2	st
op	8:8	0:0	2	=
water	8:10	0:0	2	ost
op	8:13	0:0	2	->
water	8:15	0:0	2	st
water	8:17	0:0	2	;
water	9:4	0:0	2	audio_enc
op	9:14	0:0	2	=
water	9:16	0:0	2	ost
op	9:19	0:0	2	->
water	9:21	0:0	2	enc_ctx
water	9:28	0:0	2	;
water	10:4	0:0	2	audio_enc
op	10:13	0:0	2	->
water	10:15	0:0	2	codec_type
op	10:26	0:0	2	=
water	10:28	0:0	2	AVMEDIA_TYPE_AUDIO
water	10:46	0:0	2	;
call	11:4	11:73	2	MATCH_PER_STREAM_OPT
arg	11:25	11:39	3	filter_scripts
water	11:25	0:0	4	filter_scripts
arg	11:41	11:44	3	str
water	11:41	0:0	4	str
arg	11:46	11:65	3	ost->filters_script
water	11:46	0:0	4	ost
op	11:49	0:0	4	->
water	11:51	0:0	4	filters_script
arg	11:67	11:69	3	oc
water	11:67	0:0	4	oc
arg	11:71	11:73	3	st
water	11:71	0:0	4	st
water	11:74	0:0	2	;
call	12:4	12:73	2	MATCH_PER_STREAM_OPT
arg	12:25	12:32	3	filters
water	12:25	0:0	4	filters
arg	12:41	12:44	3	str
water	12:41	0:0	4	str
arg	12:46	12:58	3	ost->filters
water	12:46	0:0	4	ost
op	12:49	0:0	4	->
water	12:51	0:0	4	filters
arg	12:67	12:69	3	oc
water	12:67	0:0	4	oc
arg	12:71	12:73	3	st
water	12:71	0:0	4	st
water	12:74	0:0	2	;
if	13:4	53:4	2	(! ost -> stream_copy)
cond	13:8	13:14	3	! ost -> stream_copy
op	13:8	0:0	4	!
water	13:9	0:0	4	ost
op	13:12	0:0	4	->
water	13:14	0:0	4	stream_copy
stmts	13:27	53:4	3	
water	13:27	0:0	4	{
decl	14:8	14:31	4	char	*sample_fmt
op	14:25	0:0	4	=
water	14:27	0:0	4	NULL
call	15:8	15:75	4	MATCH_PER_STREAM_OPT
arg	15:29	15:43	5	audio_channels
water	15:29	0:0	6	audio_channels
arg	15:45	15:46	5	i
water	15:45	0:0	6	i
arg	15:48	15:67	5	audio_enc->channels
water	15:48	0:0	6	audio_enc
op	15:57	0:0	6	->
water	15:59	0:0	6	channels
arg	15:69	15:71	5	oc
water	15:69	0:0	6	oc
arg	15:73	15:75	5	st
water	15:73	0:0	6	st
water	15:76	0:0	4	;
call	16:8	16:65	4	MATCH_PER_STREAM_OPT
arg	16:29	16:40	5	sample_fmts
water	16:29	0:0	6	sample_fmts
arg	16:42	16:45	5	str
water	16:42	0:0	6	str
arg	16:47	16:57	5	sample_fmt
water	16:47	0:0	6	sample_fmt
arg	16:59	16:61	5	oc
water	16:59	0:0	6	oc
arg	16:63	16:65	5	st
water	16:63	0:0	6	st
water	16:66	0:0	4	;
if	17:8	21:8	4	(sample_fmt && ( audio_enc -> sample_fmt =av_get_sample_fmt (sample_fmt ) ) == AV_SAMPLE_FMT_NONE)
cond	17:12	18:71	5	sample_fmt && ( audio_enc -> sample_fmt =av_get_sample_fmt (sample_fmt ) ) == AV_SAMPLE_FMT_NONE
water	17:12	0:0	6	sample_fmt
op	17:23	0:0	6	&&
water	18:12	0:0	6	(
water	18:13	0:0	6	audio_enc
op	18:22	0:0	6	->
water	18:24	0:0	6	sample_fmt
op	18:35	0:0	6	=
call	18:37	18:65	6	av_get_sample_fmt
arg	18:55	18:65	7	sample_fmt
water	18:55	0:0	8	sample_fmt
water	18:66	0:0	6	)
op	18:68	0:0	6	==
water	18:71	0:0	6	AV_SAMPLE_FMT_NONE
stmts	18:91	21:8	5	
water	18:91	0:0	6	{
call	19:12	19:81	6	av_log
arg	19:19	19:23	7	NULL
water	19:19	0:0	8	NULL
arg	19:25	19:37	7	AV_LOG_FATAL
water	19:25	0:0	8	AV_LOG_FATAL
arg	19:39	19:69	7	"Invalid sample format '%s'\n"
water	19:39	0:0	8	"Invalid sample format '%s'\n"
arg	19:71	19:81	7	sample_fmt
water	19:71	0:0	8	sample_fmt
water	19:82	0:0	6	;
call	20:12	20:26	6	exit_program
arg	20:25	20:26	7	1
water	20:25	0:0	8	1
water	20:27	0:0	6	;
water	21:8	0:0	6	}
call	22:8	22:81	4	MATCH_PER_STREAM_OPT
arg	22:29	22:46	5	audio_sample_rate
water	22:29	0:0	6	audio_sample_rate
arg	22:48	22:49	5	i
water	22:48	0:0	6	i
arg	22:51	22:73	5	audio_enc->sample_rate
water	22:51	0:0	6	audio_enc
op	22:60	0:0	6	->
water	22:62	0:0	6	sample_rate
arg	22:75	22:77	5	oc
water	22:75	0:0	6	oc
arg	22:79	22:81	5	st
water	22:79	0:0	6	st
water	22:82	0:0	4	;
call	23:8	23:57	4	MATCH_PER_STREAM_OPT
arg	23:29	23:33	5	apad
water	23:29	0:0	6	apad
arg	23:35	23:38	5	str
water	23:35	0:0	6	str
arg	23:40	23:49	5	ost->apad
water	23:40	0:0	6	ost
op	23:43	0:0	6	->
water	23:45	0:0	6	apad
arg	23:51	23:53	5	oc
water	23:51	0:0	6	oc
arg	23:55	23:57	5	st
water	23:55	0:0	6	st
water	23:58	0:0	4	;
water	24:8	0:0	4	ost
op	24:11	0:0	4	->
water	24:13	0:0	4	apad
op	24:18	0:0	4	=
call	24:20	24:39	4	av_strdup
arg	24:30	24:39	5	ost->apad
water	24:30	0:0	6	ost
op	24:33	0:0	6	->
water	24:35	0:0	6	apad
water	24:40	0:0	4	;
water	25:8	0:0	4	ost
op	25:11	0:0	4	->
water	25:13	0:0	4	avfilter
op	25:22	0:0	4	=
call	25:24	25:50	4	get_ost_filters
arg	25:40	25:41	5	o
water	25:40	0:0	6	o
arg	25:43	25:45	5	oc
water	25:43	0:0	6	oc
arg	25:47	25:50	5	ost
water	25:47	0:0	6	ost
water	25:51	0:0	4	;
if	26:8	27:27	4	(! ost -> avfilter)
cond	26:12	26:18	5	! ost -> avfilter
op	26:12	0:0	6	!
water	26:13	0:0	6	ost
op	26:16	0:0	6	->
water	26:18	0:0	6	avfilter
stmts	27:12	27:27	5	
call	27:12	27:26	6	exit_program
arg	27:25	27:26	7	1
water	27:25	0:0	8	1
water	27:27	0:0	6	;
for	29:8	52:8	4	(n = 0 ;n < o -> nb_audio_channel_maps;n ++)
forinit	29:13	29:18	5	n = 0 ;
water	29:13	0:0	6	n
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:27	5	n < o -> nb_audio_channel_maps
water	29:20	0:0	6	n
op	29:22	0:0	6	<
water	29:24	0:0	6	o
op	29:25	0:0	6	->
water	29:27	0:0	6	nb_audio_channel_maps
forexpr	29:50	29:51	5	n ++
water	29:50	0:0	6	n
op	29:51	0:0	6	++
stmts	29:55	52:8	5	
water	29:55	0:0	6	{
decl	30:12	30:60	6	AudioChannelMap	*map
op	30:33	0:0	6	=
op	30:35	0:0	6	&
water	30:36	0:0	6	o
op	30:37	0:0	6	->
water	30:39	0:0	6	audio_channel_maps
op	30:57	0:0	6	[
water	30:58	0:0	6	n
op	30:59	0:0	6	]
if	31:12	51:12	6	(( map -> ofile_idx == - 1 || ost -> file_index == map -> ofile_idx ) && ( map -> ostream_idx == - 1 || ost -> st -> index == map -> ostream_idx ))
cond	31:16	32:78	7	( map -> ofile_idx == - 1 || ost -> file_index == map -> ofile_idx ) && ( map -> ostream_idx == - 1 || ost -> st -> index == map -> ostream_idx )
water	31:16	0:0	8	(
water	31:17	0:0	8	map
op	31:20	0:0	8	->
water	31:22	0:0	8	ofile_idx
op	31:34	0:0	8	==
op	31:37	0:0	8	-
water	31:38	0:0	8	1
op	31:40	0:0	8	||
water	31:43	0:0	8	ost
op	31:46	0:0	8	->
water	31:48	0:0	8	file_index
op	31:59	0:0	8	==
water	31:62	0:0	8	map
op	31:65	0:0	8	->
water	31:67	0:0	8	ofile_idx
water	31:76	0:0	8	)
op	31:78	0:0	8	&&
water	32:16	0:0	8	(
water	32:17	0:0	8	map
op	32:20	0:0	8	->
water	32:22	0:0	8	ostream_idx
op	32:34	0:0	8	==
op	32:37	0:0	8	-
water	32:38	0:0	8	1
op	32:40	0:0	8	||
water	32:43	0:0	8	ost
op	32:46	0:0	8	->
water	32:48	0:0	8	st
op	32:50	0:0	8	->
water	32:52	0:0	8	index
op	32:59	0:0	8	==
water	32:62	0:0	8	map
op	32:65	0:0	8	->
water	32:67	0:0	8	ostream_idx
water	32:78	0:0	8	)
stmts	32:81	51:12	7	
water	32:81	0:0	8	{
decl	33:16	33:32	8	InputStream	*ist
if	34:16	36:16	8	(map -> channel_idx == - 1)
cond	34:20	34:41	9	map -> channel_idx == - 1
water	34:20	0:0	10	map
op	34:23	0:0	10	->
water	34:25	0:0	10	channel_idx
op	34:37	0:0	10	==
op	34:40	0:0	10	-
water	34:41	0:0	10	1
stmts	34:44	36:16	9	
water	34:44	0:0	10	{
water	35:20	0:0	10	ist
op	35:24	0:0	10	=
water	35:26	0:0	10	NULL
water	35:30	0:0	10	;
water	36:16	0:0	10	}
else	36:18	40:16	8
stmts	36:23	40:16	9	
if	36:23	40:16	10	(ost -> source_index < 0)
cond	36:27	36:47	11	ost -> source_index < 0
water	36:27	0:0	12	ost
op	36:30	0:0	12	->
water	36:32	0:0	12	source_index
op	36:45	0:0	12	<
water	36:47	0:0	12	0
stmts	36:50	40:16	11	
water	36:50	0:0	12	{
call	37:20	38:58	12	av_log
arg	37:27	37:31	13	NULL
water	37:27	0:0	14	NULL
arg	37:33	37:45	13	AV_LOG_FATAL
water	37:33	0:0	14	AV_LOG_FATAL
arg	37:47	37:106	13	"Cannot determine input stream for channel mapping %d.%d\n"
water	37:47	0:0	14	"Cannot determine input stream for channel mapping %d.%d\n"
arg	38:27	38:42	13	ost->file_index
water	38:27	0:0	14	ost
op	38:30	0:0	14	->
water	38:32	0:0	14	file_index
arg	38:44	38:58	13	ost->st->index
water	38:44	0:0	14	ost
op	38:47	0:0	14	->
water	38:49	0:0	14	st
op	38:51	0:0	14	->
water	38:53	0:0	14	index
water	38:59	0:0	12	;
continue	39:20	39:28	12	
water	40:16	0:0	12	}
else	40:18	42:16	8
stmts	40:23	42:16	9	
water	40:23	0:0	10	{
water	41:20	0:0	10	ist
op	41:24	0:0	10	=
water	41:26	0:0	10	input_streams
op	41:39	0:0	10	[
water	41:40	0:0	10	ost
op	41:43	0:0	10	->
water	41:45	0:0	10	source_index
op	41:57	0:0	10	]
water	41:58	0:0	10	;
water	42:16	0:0	10	}
if	43:16	50:16	8	(! ist || ( ist -> file_index == map -> file_idx && ist -> st -> index == map -> stream_idx ))
cond	43:20	43:98	9	! ist || ( ist -> file_index == map -> file_idx && ist -> st -> index == map -> stream_idx )
op	43:20	0:0	10	!
water	43:21	0:0	10	ist
op	43:25	0:0	10	||
water	43:28	0:0	10	(
water	43:29	0:0	10	ist
op	43:32	0:0	10	->
water	43:34	0:0	10	file_index
op	43:45	0:0	10	==
water	43:48	0:0	10	map
op	43:51	0:0	10	->
water	43:53	0:0	10	file_idx
op	43:62	0:0	10	&&
water	43:65	0:0	10	ist
op	43:68	0:0	10	->
water	43:70	0:0	10	st
op	43:72	0:0	10	->
water	43:74	0:0	10	index
op	43:80	0:0	10	==
water	43:83	0:0	10	map
op	43:86	0:0	10	->
water	43:88	0:0	10	stream_idx
water	43:98	0:0	10	)
stmts	43:101	50:16	9	
water	43:101	0:0	10	{
if	44:20	48:39	10	(av_reallocp_array (& ost -> audio_channels_map ,ost -> audio_channels_mapped + 1 ,sizeof ( * ost -> audio_channels_map ) ) < 0)
cond	44:24	47:46	11	av_reallocp_array (& ost -> audio_channels_map ,ost -> audio_channels_mapped + 1 ,sizeof ( * ost -> audio_channels_map ) ) < 0
call	44:24	47:42	12	av_reallocp_array
arg	44:42	44:66	13	&ost->audio_channels_map
op	44:42	0:0	14	&
water	44:43	0:0	14	ost
op	44:46	0:0	14	->
water	44:48	0:0	14	audio_channels_map
arg	45:42	45:72	13	ost->audio_channels_mapped+1
water	45:42	0:0	14	ost
op	45:45	0:0	14	->
water	45:47	0:0	14	audio_channels_mapped
op	45:69	0:0	14	+
water	45:71	0:0	14	1
arg	46:42	47:42	13	sizeof(*ost->audio_channels_map)
op	46:42	0:0	14	sizeof
water	46:48	0:0	14	(
op	46:49	0:0	14	*
water	46:50	0:0	14	ost
op	46:53	0:0	14	->
water	46:55	0:0	14	audio_channels_map
water	46:73	0:0	14	)
op	47:44	0:0	12	<
water	47:46	0:0	12	0
stmts	48:24	48:39	11	
call	48:24	48:38	12	exit_program
arg	48:37	48:38	13	1
water	48:37	0:0	14	1
water	48:39	0:0	12	;
water	49:20	0:0	10	ost
op	49:23	0:0	10	->
water	49:25	0:0	10	audio_channels_map
op	49:43	0:0	10	[
water	49:44	0:0	10	ost
op	49:47	0:0	10	->
water	49:49	0:0	10	audio_channels_mapped
op	49:70	0:0	10	++
op	49:72	0:0	10	]
op	49:74	0:0	10	=
water	49:76	0:0	10	map
op	49:79	0:0	10	->
water	49:81	0:0	10	channel_idx
water	49:92	0:0	10	;
water	50:16	0:0	10	}
water	51:12	0:0	8	}
water	52:8	0:0	6	}
water	53:4	0:0	4	}
if	54:4	55:64	2	(ost -> stream_copy)
cond	54:8	54:13	3	ost -> stream_copy
water	54:8	0:0	4	ost
op	54:11	0:0	4	->
water	54:13	0:0	4	stream_copy
stmts	55:8	55:64	3	
call	55:8	55:63	4	check_streamcopy_filters
arg	55:33	55:34	5	o
water	55:33	0:0	6	o
arg	55:36	55:38	5	oc
water	55:36	0:0	6	oc
arg	55:40	55:43	5	ost
water	55:40	0:0	6	ost
arg	55:45	55:63	5	AVMEDIA_TYPE_AUDIO
water	55:45	0:0	6	AVMEDIA_TYPE_AUDIO
water	55:64	0:0	4	;
return	56:4	56:14	2	ost
water	56:11	0:0	3	ost
