func	1:0	140:0	0	static void	draw_mandelbrot
params	1:27	0:0	1	
param	1:28	1:48	2	AVFilterContext *	ctx
param	1:50	1:65	2	uint32_t *	color
param	1:67	1:79	2	int	linesize
param	1:81	1:92	2	int64_t	pts
stmnts	0:0	139:68	1	
decl	3:4	3:29	2	MBContext	*mb
op	3:18	0:0	2	=
water	3:20	0:0	2	ctx
op	3:23	0:0	2	->
water	3:25	0:0	2	priv
decl	4:4	4:47	2	int	x
water	4:9	0:0	2	,
decl	4:4	4:47	2	int	y
water	4:11	0:0	2	,
decl	4:4	4:47	2	int	i
water	4:13	0:0	2	,
decl	4:4	4:47	2	int	in_cidx
op	4:22	0:0	2	=
water	4:23	0:0	2	0
water	4:24	0:0	2	,
decl	4:4	4:47	2	int	next_cidx
op	4:35	0:0	2	=
water	4:36	0:0	2	0
water	4:37	0:0	2	,
decl	4:4	4:47	2	int	tmp_cidx
decl	5:4	5:85	2	double	scale
op	5:16	0:0	2	=
water	5:18	0:0	2	mb
op	5:20	0:0	2	->
water	5:22	0:0	2	start_scale
call	5:33	5:84	3	*pow
arg	5:38	5:67	4	mb->end_scale/mb->start_scale
water	5:38	0:0	5	mb
op	5:40	0:0	5	->
water	5:42	0:0	5	end_scale
op	5:51	0:0	5	/
water	5:52	0:0	5	mb
op	5:54	0:0	5	->
water	5:56	0:0	5	start_scale
arg	5:69	5:84	4	pts/mb->end_pts
water	5:69	0:0	5	pts
op	5:72	0:0	5	/
water	5:73	0:0	5	mb
op	5:75	0:0	5	->
water	5:77	0:0	5	end_pts
decl	6:4	6:20	2	int	use_zyklus
op	6:18	0:0	2	=
water	6:19	0:0	2	0
call	7:4	7:86	2	fill_from_cache
arg	7:20	7:23	3	ctx
water	7:20	0:0	4	ctx
arg	7:25	7:29	3	NULL
water	7:25	0:0	4	NULL
arg	7:31	7:39	3	&in_cidx
op	7:31	0:0	4	&
water	7:32	0:0	4	in_cidx
arg	7:41	7:45	3	NULL
water	7:41	0:0	4	NULL
arg	7:47	7:79	3	mb->start_y+scale*(-mb->h/2-0.5)
water	7:47	0:0	4	mb
op	7:49	0:0	4	->
water	7:51	0:0	4	start_y
op	7:58	0:0	4	+
water	7:59	0:0	4	scale
op	7:64	0:0	4	*
water	7:65	0:0	4	(
op	7:66	0:0	4	-
water	7:67	0:0	4	mb
op	7:69	0:0	4	->
water	7:71	0:0	4	h
op	7:72	0:0	4	/
water	7:73	0:0	4	2
op	7:74	0:0	4	-
water	7:75	0:0	4	0
op	7:76	0:0	4	.
water	7:77	0:0	4	5
water	7:78	0:0	4	)
arg	7:81	7:86	3	scale
water	7:81	0:0	4	scale
water	7:87	0:0	2	;
water	8:4	0:0	2	tmp_cidx
op	8:12	0:0	2	=
water	8:14	0:0	2	in_cidx
water	8:21	0:0	2	;
call	9:4	9:41	2	memset
arg	9:11	9:16	3	color
water	9:11	0:0	4	color
arg	9:18	9:19	3	0
water	9:18	0:0	4	0
arg	9:21	9:41	3	sizeof(*color)*mb->w
op	9:21	0:0	4	sizeof
water	9:27	0:0	4	(
op	9:28	0:0	4	*
water	9:29	0:0	4	color
water	9:34	0:0	4	)
op	9:35	0:0	4	*
water	9:36	0:0	4	mb
op	9:38	0:0	4	->
water	9:40	0:0	4	w
water	9:42	0:0	2	;
for	10:4	135:4	2	(y = 0 ;y < mb -> h;y ++)
forinit	10:8	10:11	3	y = 0 ;
water	10:8	0:0	4	y
op	10:9	0:0	4	=
water	10:10	0:0	4	0
water	10:11	0:0	4	;
cond	10:13	10:19	3	y < mb -> h
water	10:13	0:0	4	y
op	10:14	0:0	4	<
water	10:15	0:0	4	mb
op	10:17	0:0	4	->
water	10:19	0:0	4	h
forexpr	10:22	10:23	3	y ++
water	10:22	0:0	4	y
op	10:23	0:0	4	++
stmts	10:26	135:4	3	
water	10:26	0:0	4	{
decl	11:8	11:19	4	int	y1
op	11:14	0:0	4	=
water	11:16	0:0	4	y
op	11:17	0:0	4	+
water	11:18	0:0	4	1
decl	12:8	12:53	4	const double	ci
op	12:23	0:0	4	=
water	12:24	0:0	4	mb
op	12:26	0:0	4	->
water	12:28	0:0	4	start_y
op	12:35	0:0	4	+
water	12:36	0:0	4	scale
op	12:41	0:0	4	*
water	12:42	0:0	4	(
water	12:43	0:0	4	y
op	12:44	0:0	4	-
water	12:45	0:0	4	mb
op	12:47	0:0	4	->
water	12:49	0:0	4	h
op	12:50	0:0	4	/
water	12:51	0:0	4	2
water	12:52	0:0	4	)
call	13:8	13:66	4	fill_from_cache
arg	13:24	13:27	5	ctx
water	13:24	0:0	6	ctx
arg	13:29	13:33	5	NULL
water	13:29	0:0	6	NULL
arg	13:35	13:43	5	&in_cidx
op	13:35	0:0	6	&
water	13:36	0:0	6	in_cidx
arg	13:45	13:55	5	&next_cidx
op	13:45	0:0	6	&
water	13:46	0:0	6	next_cidx
arg	13:57	13:59	5	ci
water	13:57	0:0	6	ci
arg	13:61	13:66	5	scale
water	13:61	0:0	6	scale
water	13:67	0:0	4	;
if	14:8	17:8	4	(y1 < mb -> h)
cond	14:11	14:18	5	y1 < mb -> h
water	14:11	0:0	6	y1
op	14:13	0:0	6	<
water	14:14	0:0	6	mb
op	14:16	0:0	6	->
water	14:18	0:0	6	h
stmts	14:20	17:8	5	
water	14:20	0:0	6	{
call	15:12	15:61	6	memset
arg	15:19	15:36	7	color+linesize*y1
water	15:19	0:0	8	color
op	15:24	0:0	8	+
water	15:25	0:0	8	linesize
op	15:33	0:0	8	*
water	15:34	0:0	8	y1
arg	15:38	15:39	7	0
water	15:38	0:0	8	0
arg	15:41	15:61	7	sizeof(*color)*mb->w
op	15:41	0:0	8	sizeof
water	15:47	0:0	8	(
op	15:48	0:0	8	*
water	15:49	0:0	8	color
water	15:54	0:0	8	)
op	15:55	0:0	8	*
water	15:56	0:0	8	mb
op	15:58	0:0	8	->
water	15:60	0:0	8	w
water	15:62	0:0	6	;
call	16:12	16:90	6	fill_from_cache
arg	16:28	16:31	7	ctx
water	16:28	0:0	8	ctx
arg	16:33	16:50	7	color+linesize*y1
water	16:33	0:0	8	color
op	16:38	0:0	8	+
water	16:39	0:0	8	linesize
op	16:47	0:0	8	*
water	16:48	0:0	8	y1
arg	16:52	16:61	7	&tmp_cidx
op	16:52	0:0	8	&
water	16:53	0:0	8	tmp_cidx
arg	16:63	16:67	7	NULL
water	16:63	0:0	8	NULL
arg	16:69	16:83	7	ci+3*scale/2
water	16:69	0:0	8	ci
op	16:72	0:0	8	+
water	16:74	0:0	8	3
op	16:75	0:0	8	*
water	16:76	0:0	8	scale
op	16:81	0:0	8	/
water	16:82	0:0	8	2
arg	16:85	16:90	7	scale
water	16:85	0:0	8	scale
water	16:91	0:0	6	;
water	17:8	0:0	6	}
for	18:8	133:8	4	(x = 0 ;x < mb -> w;x ++)
forinit	18:12	18:15	5	x = 0 ;
water	18:12	0:0	6	x
op	18:13	0:0	6	=
water	18:14	0:0	6	0
water	18:15	0:0	6	;
cond	18:17	18:23	5	x < mb -> w
water	18:17	0:0	6	x
op	18:18	0:0	6	<
water	18:19	0:0	6	mb
op	18:21	0:0	6	->
water	18:23	0:0	6	w
forexpr	18:26	18:27	5	x ++
water	18:26	0:0	6	x
op	18:27	0:0	6	++
stmts	18:30	133:8	5	
water	18:30	0:0	6	{
decl	19:12	19:36	6	float	av_uninit
water	19:27	0:0	6	(
water	19:28	0:0	6	epsilon
water	19:35	0:0	6	)
decl	20:12	20:57	6	const double	cr
op	20:27	0:0	6	=
water	20:28	0:0	6	mb
op	20:30	0:0	6	->
water	20:32	0:0	6	start_x
op	20:39	0:0	6	+
water	20:40	0:0	6	scale
op	20:45	0:0	6	*
water	20:46	0:0	6	(
water	20:47	0:0	6	x
op	20:48	0:0	6	-
water	20:49	0:0	6	mb
op	20:51	0:0	6	->
water	20:53	0:0	6	w
op	20:54	0:0	6	/
water	20:55	0:0	6	2
water	20:56	0:0	6	)
decl	21:12	21:24	6	double	zr
op	21:21	0:0	6	=
water	21:22	0:0	6	cr
decl	22:12	22:24	6	double	zi
op	22:21	0:0	6	=
water	22:22	0:0	6	ci
decl	23:12	23:24	6	uint32_t	c
op	23:22	0:0	6	=
water	23:23	0:0	6	0
decl	24:12	24:53	6	double	dv
op	24:21	0:0	6	=
water	24:23	0:0	6	mb
op	24:25	0:0	6	->
water	24:27	0:0	6	dither
op	24:34	0:0	6	/
call	24:36	24:52	7	(double)
arg	24:45	24:52	8	1LL<<32
water	24:45	0:0	9	1
water	24:46	0:0	9	LL
op	24:48	0:0	9	<<
water	24:50	0:0	9	32
water	25:12	0:0	6	mb
op	25:14	0:0	6	->
water	25:16	0:0	6	dither
op	25:22	0:0	6	=
water	25:24	0:0	6	mb
op	25:26	0:0	6	->
water	25:28	0:0	6	dither
op	25:34	0:0	6	*
water	25:35	0:0	6	1664525
op	25:42	0:0	6	+
water	25:43	0:0	6	1013904223
water	25:53	0:0	6	;
if	26:12	27:24	6	(color [ x + y * linesize ] & 0 xFF000000)
cond	26:15	26:40	7	color [ x + y * linesize ] & 0 xFF000000
water	26:15	0:0	8	color
op	26:20	0:0	8	[
water	26:21	0:0	8	x
op	26:23	0:0	8	+
water	26:25	0:0	8	y
op	26:26	0:0	8	*
water	26:27	0:0	8	linesize
op	26:35	0:0	8	]
op	26:37	0:0	8	&
water	26:39	0:0	8	0
water	26:40	0:0	8	xFF000000
stmts	27:16	27:24	7	
continue	27:16	27:24	8	
if	28:12	37:12	6	(! mb -> morphamp)
cond	28:15	28:20	7	! mb -> morphamp
op	28:15	0:0	8	!
water	28:16	0:0	8	mb
op	28:18	0:0	8	->
water	28:20	0:0	8	morphamp
stmts	28:29	37:12	7	
water	28:29	0:0	8	{
if	29:16	36:16	8	(interpol (mb ,color ,x ,y ,linesize ))
cond	29:19	29:53	9	interpol (mb ,color ,x ,y ,linesize )
call	29:19	29:53	10	interpol
arg	29:28	29:30	11	mb
water	29:28	0:0	12	mb
arg	29:32	29:37	11	color
water	29:32	0:0	12	color
arg	29:39	29:40	11	x
water	29:39	0:0	12	x
arg	29:42	29:43	11	y
water	29:42	0:0	12	y
arg	29:45	29:53	11	linesize
water	29:45	0:0	12	linesize
stmts	29:55	36:16	9	
water	29:55	0:0	10	{
if	30:20	34:20	10	(next_cidx < mb -> cache_allocated)
cond	30:23	30:39	11	next_cidx < mb -> cache_allocated
water	30:23	0:0	12	next_cidx
op	30:33	0:0	12	<
water	30:35	0:0	12	mb
op	30:37	0:0	12	->
water	30:39	0:0	12	cache_allocated
stmts	30:55	34:20	11	
water	30:55	0:0	12	{
water	31:24	0:0	12	mb
op	31:26	0:0	12	->
water	31:28	0:0	12	next_cache
op	31:38	0:0	12	[
water	31:39	0:0	12	next_cidx
op	31:50	0:0	12	]
op	31:51	0:0	12	.
water	31:52	0:0	12	p
op	31:53	0:0	12	[
water	31:54	0:0	12	0
op	31:55	0:0	12	]
op	31:56	0:0	12	=
water	31:58	0:0	12	cr
water	31:60	0:0	12	;
water	32:24	0:0	12	mb
op	32:26	0:0	12	->
water	32:28	0:0	12	next_cache
op	32:38	0:0	12	[
water	32:39	0:0	12	next_cidx
op	32:50	0:0	12	]
op	32:51	0:0	12	.
water	32:52	0:0	12	p
op	32:53	0:0	12	[
water	32:54	0:0	12	1
op	32:55	0:0	12	]
op	32:56	0:0	12	=
water	32:58	0:0	12	ci
water	32:60	0:0	12	;
water	33:24	0:0	12	mb
op	33:26	0:0	12	->
water	33:28	0:0	12	next_cache
op	33:38	0:0	12	[
water	33:39	0:0	12	next_cidx
op	33:48	0:0	12	++
op	33:50	0:0	12	]
op	33:51	0:0	12	.
water	33:52	0:0	12	val
op	33:56	0:0	12	=
water	33:58	0:0	12	color
op	33:63	0:0	12	[
water	33:64	0:0	12	x
op	33:66	0:0	12	+
water	33:68	0:0	12	y
op	33:69	0:0	12	*
water	33:70	0:0	12	linesize
op	33:78	0:0	12	]
water	33:79	0:0	12	;
water	34:20	0:0	12	}
continue	35:20	35:28	10	
water	36:16	0:0	10	}
water	37:12	0:0	8	}
else	37:13	40:12	6
stmts	37:17	40:12	7	
water	37:17	0:0	8	{
water	38:16	0:0	8	zr
op	38:19	0:0	8	+=
call	38:22	38:43	8	cos
arg	38:26	38:43	9	pts*mb->morphxf
water	38:26	0:0	10	pts
op	38:30	0:0	10	*
water	38:32	0:0	10	mb
op	38:34	0:0	10	->
water	38:36	0:0	10	morphxf
op	38:45	0:0	8	*
water	38:47	0:0	8	mb
op	38:49	0:0	8	->
water	38:51	0:0	8	morphamp
water	38:59	0:0	8	;
water	39:16	0:0	8	zi
op	39:19	0:0	8	+=
call	39:22	39:43	8	sin
arg	39:26	39:43	9	pts*mb->morphyf
water	39:26	0:0	10	pts
op	39:30	0:0	10	*
water	39:32	0:0	10	mb
op	39:34	0:0	10	->
water	39:36	0:0	10	morphyf
op	39:45	0:0	8	*
water	39:47	0:0	8	mb
op	39:49	0:0	8	->
water	39:51	0:0	8	morphamp
water	39:59	0:0	8	;
water	40:12	0:0	8	}
water	41:12	0:0	6	use_zyklus
op	41:22	0:0	6	=
water	41:24	0:0	6	(
water	41:25	0:0	6	x
op	41:26	0:0	6	==
water	41:28	0:0	6	0
op	41:30	0:0	6	||
water	41:33	0:0	6	mb
op	41:35	0:0	6	->
water	41:37	0:0	6	inner
op	41:42	0:0	6	!=
water	41:44	0:0	6	BLACK
op	41:50	0:0	6	||
water	41:52	0:0	6	color
op	41:57	0:0	6	[
water	41:58	0:0	6	x
op	41:59	0:0	6	-
water	41:60	0:0	6	1
op	41:62	0:0	6	+
water	41:64	0:0	6	y
op	41:65	0:0	6	*
water	41:66	0:0	6	linesize
op	41:74	0:0	6	]
op	41:76	0:0	6	==
water	41:79	0:0	6	0
water	41:80	0:0	6	xFF000000
water	41:89	0:0	6	)
water	41:90	0:0	6	;
if	42:12	43:76	6	(use_zyklus)
cond	42:15	42:15	7	use_zyklus
water	42:15	0:0	8	use_zyklus
stmts	43:16	43:76	7	
water	43:16	0:0	8	epsilon
op	43:23	0:0	8	=
water	43:25	0:0	8	scale
op	43:30	0:0	8	*
water	43:31	0:0	8	1
call	43:32	43:69	8	*sqrt
arg	43:38	43:69	9	SQR(x-mb->w/2)+SQR(y-mb->h/2)
call	43:38	43:51	10	SQR
arg	43:42	43:51	11	x-mb->w/2
water	43:42	0:0	12	x
op	43:43	0:0	12	-
water	43:44	0:0	12	mb
op	43:46	0:0	12	->
water	43:48	0:0	12	w
op	43:49	0:0	12	/
water	43:50	0:0	12	2
op	43:53	0:0	10	+
call	43:55	43:68	10	SQR
arg	43:59	43:68	11	y-mb->h/2
water	43:59	0:0	12	y
op	43:60	0:0	12	-
water	43:61	0:0	12	mb
op	43:63	0:0	12	->
water	43:65	0:0	12	h
op	43:66	0:0	12	/
water	43:67	0:0	12	2
op	43:70	0:0	8	/
water	43:71	0:0	8	mb
op	43:73	0:0	8	->
water	43:75	0:0	8	w
water	43:76	0:0	8	;
water	45:12	0:0	6	outr
op	45:16	0:0	6	=
water	45:18	0:0	6	inr
op	45:21	0:0	6	*
water	45:22	0:0	6	inr
op	45:26	0:0	6	-
water	45:28	0:0	6	ini
op	45:31	0:0	6	*
water	45:32	0:0	6	ini
op	45:36	0:0	6	+
water	45:38	0:0	6	cr
water	45:40	0:0	6	;
water	46:12	0:0	6	outi
op	46:16	0:0	6	=
water	46:18	0:0	6	2
op	46:19	0:0	6	*
water	46:20	0:0	6	inr
op	46:23	0:0	6	*
water	46:24	0:0	6	ini
op	46:28	0:0	6	+
water	46:30	0:0	6	ci
water	46:32	0:0	6	;
call	48:12	48:36	6	Z_Z2_C
arg	48:19	48:23	7	outr
water	48:19	0:0	8	outr
arg	48:24	48:28	7	outi
water	48:24	0:0	8	outi
arg	48:29	48:32	7	inr
water	48:29	0:0	8	inr
arg	48:33	48:36	7	ini
water	48:33	0:0	8	ini
water	49:12	0:0	6	if
water	49:14	0:0	6	(
water	49:15	0:0	6	use_zyklus
water	49:25	0:0	6	)
water	49:26	0:0	6	{
water	50:16	0:0	6	if
water	50:18	0:0	6	(
water	50:19	0:0	6	Z
op	50:21	0:0	6	&&
call	50:24	50:53	6	fabs
arg	50:29	50:53	7	mb->zyklus[i>>1][0]-outr
water	50:29	0:0	8	mb
op	50:31	0:0	8	->
water	50:33	0:0	8	zyklus
op	50:39	0:0	8	[
water	50:40	0:0	8	i
op	50:41	0:0	8	>>
water	50:43	0:0	8	1
op	50:44	0:0	8	]
op	50:45	0:0	8	[
water	50:46	0:0	8	0
op	50:47	0:0	8	]
op	50:48	0:0	8	-
water	50:49	0:0	8	outr
op	50:54	0:0	6	+
call	50:55	50:84	6	fabs
arg	50:60	50:84	7	mb->zyklus[i>>1][1]-outi
water	50:60	0:0	8	mb
op	50:62	0:0	8	->
water	50:64	0:0	8	zyklus
op	50:70	0:0	8	[
water	50:71	0:0	8	i
op	50:72	0:0	8	>>
water	50:74	0:0	8	1
op	50:75	0:0	8	]
op	50:76	0:0	8	[
water	50:77	0:0	8	1
op	50:78	0:0	8	]
op	50:79	0:0	8	-
water	50:80	0:0	8	outi
op	50:86	0:0	6	<=
water	50:89	0:0	6	epsilon
water	50:96	0:0	6	)
water	51:20	0:0	6	break
water	51:25	0:0	6	;
water	52:12	0:0	6	}
water	53:12	0:0	6	mb
op	53:14	0:0	6	->
water	53:16	0:0	6	zyklus
op	53:22	0:0	6	[
water	53:23	0:0	6	i
op	53:24	0:0	6	]
op	53:25	0:0	6	[
water	53:26	0:0	6	0
op	53:27	0:0	6	]
op	53:28	0:0	6	=
water	53:30	0:0	6	outr
water	53:34	0:0	6	;
water	54:12	0:0	6	mb
op	54:14	0:0	6	->
water	54:16	0:0	6	zyklus
op	54:22	0:0	6	[
water	54:23	0:0	6	i
op	54:24	0:0	6	]
op	54:25	0:0	6	[
water	54:26	0:0	6	1
op	54:27	0:0	6	]
op	54:28	0:0	6	=
water	54:30	0:0	6	outi
water	54:34	0:0	6	;
for	55:12	100:12	6	(i = 0 ;i < mb -> maxiter - 8;i ++)
forinit	55:16	55:19	7	i = 0 ;
water	55:16	0:0	8	i
op	55:17	0:0	8	=
water	55:18	0:0	8	0
water	55:19	0:0	8	;
cond	55:21	55:35	7	i < mb -> maxiter - 8
water	55:21	0:0	8	i
op	55:22	0:0	8	<
water	55:23	0:0	8	mb
op	55:25	0:0	8	->
water	55:27	0:0	8	maxiter
op	55:34	0:0	8	-
water	55:35	0:0	8	8
forexpr	55:38	55:39	7	i ++
water	55:38	0:0	8	i
op	55:39	0:0	8	++
stmts	55:42	100:12	7	
water	55:42	0:0	8	{
decl	56:16	56:24	8	double	t
call	57:16	57:46	8	Z_Z2_C_ZYKLUS
arg	57:30	57:31	9	t
water	57:30	0:0	10	t
arg	57:33	57:35	9	zi
water	57:33	0:0	10	zi
arg	57:37	57:39	9	zr
water	57:37	0:0	10	zr
arg	57:41	57:43	9	zi
water	57:41	0:0	10	zi
arg	57:45	57:46	9	0
water	57:45	0:0	10	0
water	58:16	0:0	8	i
op	58:17	0:0	8	++
water	58:19	0:0	8	;
call	59:16	59:46	8	Z_Z2_C_ZYKLUS
arg	59:30	59:32	9	zr
water	59:30	0:0	10	zr
arg	59:34	59:36	9	zi
water	59:34	0:0	10	zi
arg	59:38	59:39	9	t
water	59:38	0:0	10	t
arg	59:41	59:43	9	zi
water	59:41	0:0	10	zi
arg	59:45	59:46	9	1
water	59:45	0:0	10	1
water	60:16	0:0	8	i
op	60:17	0:0	8	++
water	60:19	0:0	8	;
call	61:16	61:46	8	Z_Z2_C_ZYKLUS
arg	61:30	61:31	9	t
water	61:30	0:0	10	t
arg	61:33	61:35	9	zi
water	61:33	0:0	10	zi
arg	61:37	61:39	9	zr
water	61:37	0:0	10	zr
arg	61:41	61:43	9	zi
water	61:41	0:0	10	zi
arg	61:45	61:46	9	0
water	61:45	0:0	10	0
water	62:16	0:0	8	i
op	62:17	0:0	8	++
water	62:19	0:0	8	;
call	63:16	63:46	8	Z_Z2_C_ZYKLUS
arg	63:30	63:32	9	zr
water	63:30	0:0	10	zr
arg	63:34	63:36	9	zi
water	63:34	0:0	10	zi
arg	63:38	63:39	9	t
water	63:38	0:0	10	t
arg	63:41	63:43	9	zi
water	63:41	0:0	10	zi
arg	63:45	63:46	9	1
water	63:45	0:0	10	1
water	64:16	0:0	8	i
op	64:17	0:0	8	++
water	64:19	0:0	8	;
call	65:16	65:46	8	Z_Z2_C_ZYKLUS
arg	65:30	65:31	9	t
water	65:30	0:0	10	t
arg	65:33	65:35	9	zi
water	65:33	0:0	10	zi
arg	65:37	65:39	9	zr
water	65:37	0:0	10	zr
arg	65:41	65:43	9	zi
water	65:41	0:0	10	zi
arg	65:45	65:46	9	0
water	65:45	0:0	10	0
water	66:16	0:0	8	i
op	66:17	0:0	8	++
water	66:19	0:0	8	;
call	67:16	67:46	8	Z_Z2_C_ZYKLUS
arg	67:30	67:32	9	zr
water	67:30	0:0	10	zr
arg	67:34	67:36	9	zi
water	67:34	0:0	10	zi
arg	67:38	67:39	9	t
water	67:38	0:0	10	t
arg	67:41	67:43	9	zi
water	67:41	0:0	10	zi
arg	67:45	67:46	9	1
water	67:45	0:0	10	1
water	68:16	0:0	8	i
op	68:17	0:0	8	++
water	68:19	0:0	8	;
call	69:16	69:46	8	Z_Z2_C_ZYKLUS
arg	69:30	69:31	9	t
water	69:30	0:0	10	t
arg	69:33	69:35	9	zi
water	69:33	0:0	10	zi
arg	69:37	69:39	9	zr
water	69:37	0:0	10	zr
arg	69:41	69:43	9	zi
water	69:41	0:0	10	zi
arg	69:45	69:46	9	0
water	69:45	0:0	10	0
water	70:16	0:0	8	i
op	70:17	0:0	8	++
water	70:19	0:0	8	;
water	71:16	0:0	8	Z_Z2_C_ZYKLUS
water	71:29	0:0	8	(
water	71:30	0:0	8	zr
water	71:32	0:0	8	,
water	71:34	0:0	8	zi
water	71:36	0:0	8	,
water	71:38	0:0	8	t
water	71:39	0:0	8	,
water	71:41	0:0	8	zi
water	71:43	0:0	8	,
water	71:45	0:0	8	1
water	71:46	0:0	8	)
if	72:16	99:16	8	(zr * zr + zi * zi > mb -> bailout)
cond	72:19	72:39	9	zr * zr + zi * zi > mb -> bailout
water	72:19	0:0	10	zr
op	72:21	0:0	10	*
water	72:22	0:0	10	zr
op	72:25	0:0	10	+
water	72:27	0:0	10	zi
op	72:29	0:0	10	*
water	72:30	0:0	10	zi
op	72:33	0:0	10	>
water	72:35	0:0	10	mb
op	72:37	0:0	10	->
water	72:39	0:0	10	bailout
stmts	72:47	99:16	9	
water	72:47	0:0	10	{
water	73:20	0:0	10	i
op	73:21	0:0	10	-=
call	73:24	73:34	10	FFMIN
arg	73:30	73:31	11	7
water	73:30	0:0	12	7
arg	73:33	73:34	11	i
water	73:33	0:0	12	i
water	73:35	0:0	10	;
for	74:20	97:20	10	(;i < mb -> maxiter;i ++)
forinit	74:24	74:24	11	;
water	74:24	0:0	12	;
cond	74:26	74:32	11	i < mb -> maxiter
water	74:26	0:0	12	i
op	74:27	0:0	12	<
water	74:28	0:0	12	mb
op	74:30	0:0	12	->
water	74:32	0:0	12	maxiter
forexpr	74:41	74:42	11	i ++
water	74:41	0:0	12	i
op	74:42	0:0	12	++
stmts	74:45	97:20	11	
water	74:45	0:0	12	{
water	75:24	0:0	12	zr
op	75:26	0:0	12	=
water	75:28	0:0	12	mb
op	75:30	0:0	12	->
water	75:32	0:0	12	zyklus
op	75:38	0:0	12	[
water	75:39	0:0	12	i
op	75:40	0:0	12	]
op	75:41	0:0	12	[
water	75:42	0:0	12	0
op	75:43	0:0	12	]
water	75:44	0:0	12	;
water	76:24	0:0	12	zi
op	76:26	0:0	12	=
water	76:28	0:0	12	mb
op	76:30	0:0	12	->
water	76:32	0:0	12	zyklus
op	76:38	0:0	12	[
water	76:39	0:0	12	i
op	76:40	0:0	12	]
op	76:41	0:0	12	[
water	76:42	0:0	12	1
op	76:43	0:0	12	]
water	76:44	0:0	12	;
if	77:24	96:24	12	(zr * zr + zi * zi > mb -> bailout)
cond	77:27	77:47	13	zr * zr + zi * zi > mb -> bailout
water	77:27	0:0	14	zr
op	77:29	0:0	14	*
water	77:30	0:0	14	zr
op	77:33	0:0	14	+
water	77:35	0:0	14	zi
op	77:37	0:0	14	*
water	77:38	0:0	14	zi
op	77:41	0:0	14	>
water	77:43	0:0	14	mb
op	77:45	0:0	14	->
water	77:47	0:0	14	bailout
stmts	77:55	96:24	13	
water	77:55	0:0	14	{
switch	78:28	94:28	14	(mb -> outer)
cond	78:35	78:39	15	mb -> outer
water	78:35	0:0	16	mb
op	78:37	0:0	16	->
water	78:39	0:0	16	outer
stmts	78:45	94:28	15	
water	78:45	0:0	16	{
label	79:28	79:59	16	case ITERATION_COUNT :
water	80:32	0:0	16	zr
op	80:35	0:0	16	=
water	80:37	0:0	16	i
water	80:38	0:0	16	;
water	81:32	0:0	16	c
op	81:34	0:0	16	=
call	81:36	81:58	16	lrintf
arg	81:43	81:58	17	(sin(zr)+1)*127
water	81:43	0:0	18	(
call	81:44	81:50	18	sin
arg	81:48	81:50	19	zr
water	81:48	0:0	20	zr
op	81:51	0:0	18	+
water	81:52	0:0	18	1
water	81:53	0:0	18	)
op	81:54	0:0	18	*
water	81:55	0:0	18	127
op	81:60	0:0	16	+
call	81:62	81:90	16	lrintf
arg	81:69	81:90	17	(sin(zr/1.234)+1)*127
water	81:69	0:0	18	(
call	81:70	81:82	18	sin
arg	81:74	81:82	19	zr/1.234
water	81:74	0:0	20	zr
op	81:76	0:0	20	/
water	81:77	0:0	20	1
op	81:78	0:0	20	.
water	81:79	0:0	20	234
op	81:83	0:0	18	+
water	81:84	0:0	18	1
water	81:85	0:0	18	)
op	81:86	0:0	18	*
water	81:87	0:0	18	127
op	81:91	0:0	16	*
water	81:92	0:0	16	256
op	81:95	0:0	16	*
water	81:96	0:0	16	256
op	81:100	0:0	16	+
call	81:102	81:128	16	lrintf
arg	81:109	81:128	17	(sin(zr/100)+1)*127
water	81:109	0:0	18	(
call	81:110	81:120	18	sin
arg	81:114	81:120	19	zr/100
water	81:114	0:0	20	zr
op	81:116	0:0	20	/
water	81:117	0:0	20	100
op	81:121	0:0	18	+
water	81:122	0:0	18	1
water	81:123	0:0	18	)
op	81:124	0:0	18	*
water	81:125	0:0	18	127
op	81:129	0:0	16	*
water	81:130	0:0	16	256
water	81:133	0:0	16	;
break	82:32	82:37	16	
label	83:28	83:59	16	case NORMALIZED_ITERATION_COUNT :
water	84:32	0:0	16	zr
op	84:35	0:0	16	=
water	84:37	0:0	16	i
op	84:39	0:0	16	+
call	84:41	84:83	16	log2
arg	84:46	84:83	17	log(mb->bailout)/log(zr*zr+zi*zi)
call	84:46	84:61	18	log
arg	84:50	84:61	19	mb->bailout
water	84:50	0:0	20	mb
op	84:52	0:0	20	->
water	84:54	0:0	20	bailout
op	84:63	0:0	18	/
call	84:65	84:82	18	log
arg	84:69	84:82	19	zr*zr+zi*zi
water	84:69	0:0	20	zr
op	84:71	0:0	20	*
water	84:72	0:0	20	zr
op	84:75	0:0	20	+
water	84:77	0:0	20	zi
op	84:79	0:0	20	*
water	84:80	0:0	20	zi
water	84:84	0:0	16	;
water	85:32	0:0	16	c
op	85:34	0:0	16	=
call	85:36	85:58	16	lrintf
arg	85:43	85:58	17	(sin(zr)+1)*127
water	85:43	0:0	18	(
call	85:44	85:50	18	sin
arg	85:48	85:50	19	zr
water	85:48	0:0	20	zr
op	85:51	0:0	18	+
water	85:52	0:0	18	1
water	85:53	0:0	18	)
op	85:54	0:0	18	*
water	85:55	0:0	18	127
op	85:60	0:0	16	+
call	85:62	85:90	16	lrintf
arg	85:69	85:90	17	(sin(zr/1.234)+1)*127
water	85:69	0:0	18	(
call	85:70	85:82	18	sin
arg	85:74	85:82	19	zr/1.234
water	85:74	0:0	20	zr
op	85:76	0:0	20	/
water	85:77	0:0	20	1
op	85:78	0:0	20	.
water	85:79	0:0	20	234
op	85:83	0:0	18	+
water	85:84	0:0	18	1
water	85:85	0:0	18	)
op	85:86	0:0	18	*
water	85:87	0:0	18	127
op	85:91	0:0	16	*
water	85:92	0:0	16	256
op	85:95	0:0	16	*
water	85:96	0:0	16	256
op	85:100	0:0	16	+
call	85:102	85:128	16	lrintf
arg	85:109	85:128	17	(sin(zr/100)+1)*127
water	85:109	0:0	18	(
call	85:110	85:120	18	sin
arg	85:114	85:120	19	zr/100
water	85:114	0:0	20	zr
op	85:116	0:0	20	/
water	85:117	0:0	20	100
op	85:121	0:0	18	+
water	85:122	0:0	18	1
water	85:123	0:0	18	)
op	85:124	0:0	18	*
water	85:125	0:0	18	127
op	85:129	0:0	16	*
water	85:130	0:0	16	256
water	85:133	0:0	16	;
break	86:32	86:37	16	
label	87:28	87:59	16	case WHITE :
water	88:32	0:0	16	c
op	88:34	0:0	16	=
water	88:36	0:0	16	0
water	88:37	0:0	16	xFFFFFF
water	88:44	0:0	16	;
break	89:32	89:37	16	
label	90:28	90:58	16	case OUTZ :
water	91:32	0:0	16	zr
op	91:35	0:0	16	/=
water	91:38	0:0	16	mb
op	91:40	0:0	16	->
water	91:42	0:0	16	bailout
water	91:49	0:0	16	;
water	92:32	0:0	16	zi
op	92:35	0:0	16	/=
water	92:38	0:0	16	mb
op	92:40	0:0	16	->
water	92:42	0:0	16	bailout
water	92:49	0:0	16	;
water	93:32	0:0	16	c
op	93:34	0:0	16	=
water	93:36	0:0	16	(
water	93:37	0:0	16	(
call	93:38	93:54	16	(int)
arg	93:44	93:54	17	zr*128+128
water	93:44	0:0	18	zr
op	93:46	0:0	18	*
water	93:47	0:0	18	128
op	93:50	0:0	18	+
water	93:51	0:0	18	128
water	93:55	0:0	16	)
op	93:56	0:0	16	&
water	93:57	0:0	16	0
water	93:58	0:0	16	xFF
water	93:61	0:0	16	)
op	93:62	0:0	16	*
water	93:63	0:0	16	256
op	93:67	0:0	16	+
water	93:69	0:0	16	(
water	93:70	0:0	16	(
call	93:71	93:87	16	(int)
arg	93:77	93:87	17	zi*128+128
water	93:77	0:0	18	zi
op	93:79	0:0	18	*
water	93:80	0:0	18	128
op	93:83	0:0	18	+
water	93:84	0:0	18	128
water	93:88	0:0	16	)
op	93:89	0:0	16	&
water	93:90	0:0	16	0
water	93:91	0:0	16	xFF
water	93:94	0:0	16	)
water	93:95	0:0	16	;
water	94:28	0:0	16	}
break	95:28	95:33	14	
water	96:24	0:0	14	}
water	97:20	0:0	12	}
break	98:20	98:25	10	
water	99:16	0:0	10	}
water	100:12	0:0	8	}
if	101:12	125:12	6	(! c)
cond	101:15	101:16	7	! c
op	101:15	0:0	8	!
water	101:16	0:0	8	c
stmts	101:18	125:12	7	
water	101:18	0:0	8	{
if	102:16	111:16	8	(mb -> inner == PERIOD)
cond	102:19	102:30	9	mb -> inner == PERIOD
water	102:19	0:0	10	mb
op	102:21	0:0	10	->
water	102:23	0:0	10	inner
op	102:28	0:0	10	==
water	102:30	0:0	10	PERIOD
stmts	102:37	111:16	9	
water	102:37	0:0	10	{
decl	103:20	103:25	10	int	j
for	104:20	106:33	10	(j = i - 1 ;j;j --)
forinit	104:24	104:29	11	j = i - 1 ;
water	104:24	0:0	12	j
op	104:25	0:0	12	=
water	104:26	0:0	12	i
op	104:27	0:0	12	-
water	104:28	0:0	12	1
water	104:29	0:0	12	;
cond	104:31	104:31	11	j
water	104:31	0:0	12	j
forexpr	104:34	104:35	11	j --
water	104:34	0:0	12	j
op	104:35	0:0	12	--
stmts	105:24	106:33	11	
if	105:24	106:33	12	(SQR (mb -> zyklus [ j ] [ 0 ] - zr ) +SQR (mb -> zyklus [ j ] [ 1 ] - zi ) < epsilon * epsilon * 10)
cond	105:27	105:97	13	SQR (mb -> zyklus [ j ] [ 0 ] - zr ) +SQR (mb -> zyklus [ j ] [ 1 ] - zi ) < epsilon * epsilon * 10
call	105:27	105:50	14	SQR
arg	105:31	105:50	15	mb->zyklus[j][0]-zr
water	105:31	0:0	16	mb
op	105:33	0:0	16	->
water	105:35	0:0	16	zyklus
op	105:41	0:0	16	[
water	105:42	0:0	16	j
op	105:43	0:0	16	]
op	105:44	0:0	16	[
water	105:45	0:0	16	0
op	105:46	0:0	16	]
op	105:47	0:0	16	-
water	105:48	0:0	16	zr
op	105:52	0:0	14	+
call	105:54	105:77	14	SQR
arg	105:58	105:77	15	mb->zyklus[j][1]-zi
water	105:58	0:0	16	mb
op	105:60	0:0	16	->
water	105:62	0:0	16	zyklus
op	105:68	0:0	16	[
water	105:69	0:0	16	j
op	105:70	0:0	16	]
op	105:71	0:0	16	[
water	105:72	0:0	16	1
op	105:73	0:0	16	]
op	105:74	0:0	16	-
water	105:75	0:0	16	zi
op	105:79	0:0	14	<
water	105:81	0:0	14	epsilon
op	105:88	0:0	14	*
water	105:89	0:0	14	epsilon
op	105:96	0:0	14	*
water	105:97	0:0	14	10
stmts	106:28	106:33	13	
break	106:28	106:33	14	
if	107:20	110:20	10	(j)
cond	107:23	107:23	11	j
water	107:23	0:0	12	j
stmts	107:25	110:20	11	
water	107:25	0:0	12	{
water	108:24	0:0	12	c
op	108:25	0:0	12	=
water	108:27	0:0	12	i
op	108:28	0:0	12	-
water	108:29	0:0	12	j
water	108:30	0:0	12	;
water	109:24	0:0	12	c
op	109:25	0:0	12	=
water	109:27	0:0	12	(
water	109:28	0:0	12	(
water	109:29	0:0	12	c
op	109:30	0:0	12	<<
water	109:32	0:0	12	5
water	109:33	0:0	12	)
op	109:34	0:0	12	&
water	109:35	0:0	12	0
water	109:36	0:0	12	xE0
water	109:39	0:0	12	)
op	109:41	0:0	12	+
water	109:43	0:0	12	(
water	109:44	0:0	12	(
water	109:45	0:0	12	c
op	109:46	0:0	12	<<
water	109:48	0:0	12	10
water	109:50	0:0	12	)
op	109:51	0:0	12	&
water	109:52	0:0	12	0
water	109:53	0:0	12	xE000
water	109:58	0:0	12	)
op	109:60	0:0	12	+
water	109:62	0:0	12	(
water	109:63	0:0	12	(
water	109:64	0:0	12	c
op	109:65	0:0	12	<<
water	109:67	0:0	12	15
water	109:69	0:0	12	)
op	109:70	0:0	12	&
water	109:71	0:0	12	0
water	109:72	0:0	12	xE00000
water	109:79	0:0	12	)
water	109:80	0:0	12	;
water	110:20	0:0	12	}
water	111:16	0:0	10	}
else	111:17	113:16	8
stmts	111:22	113:16	9	
if	111:22	113:16	10	(mb -> inner == CONVTIME)
cond	111:25	111:36	11	mb -> inner == CONVTIME
water	111:25	0:0	12	mb
op	111:27	0:0	12	->
water	111:29	0:0	12	inner
op	111:34	0:0	12	==
water	111:36	0:0	12	CONVTIME
stmts	111:45	113:16	11	
water	111:45	0:0	12	{
water	112:20	0:0	12	c
op	112:21	0:0	12	=
call	112:23	112:51	12	floor
arg	112:29	112:51	13	i*255.0/mb->maxiter+dv
water	112:29	0:0	14	i
op	112:30	0:0	14	*
water	112:31	0:0	14	255
op	112:34	0:0	14	.
water	112:35	0:0	14	0
op	112:36	0:0	14	/
water	112:37	0:0	14	mb
op	112:39	0:0	14	->
water	112:41	0:0	14	maxiter
op	112:48	0:0	14	+
water	112:49	0:0	14	dv
op	112:52	0:0	12	*
water	112:53	0:0	12	0
water	112:54	0:0	12	x010101
water	112:61	0:0	12	;
water	113:16	0:0	12	}
else	113:18	124:16	8
stmts	113:23	124:16	9	
if	113:23	124:16	10	(mb -> inner == MINCOL)
cond	113:26	113:37	11	mb -> inner == MINCOL
water	113:26	0:0	12	mb
op	113:28	0:0	12	->
water	113:30	0:0	12	inner
op	113:35	0:0	12	==
water	113:37	0:0	12	MINCOL
stmts	113:44	124:16	11	
water	113:44	0:0	12	{
decl	114:20	114:25	12	int	j
decl	115:20	115:39	12	double	closest
op	115:34	0:0	12	=
water	115:35	0:0	12	9999
decl	116:20	116:39	12	int	closest_index
op	116:37	0:0	12	=
water	116:38	0:0	12	0
for	117:20	121:24	12	(j = i - 1 ;j >= 0;j --)
forinit	117:24	117:29	13	j = i - 1 ;
water	117:24	0:0	14	j
op	117:25	0:0	14	=
water	117:26	0:0	14	i
op	117:27	0:0	14	-
water	117:28	0:0	14	1
water	117:29	0:0	14	;
cond	117:31	117:34	13	j >= 0
water	117:31	0:0	14	j
op	117:32	0:0	14	>=
water	117:34	0:0	14	0
forexpr	117:37	117:38	13	j --
water	117:37	0:0	14	j
op	117:38	0:0	14	--
stmts	118:24	121:24	13	
if	118:24	121:24	14	(SQR (mb -> zyklus [ j ] [ 0 ] ) +SQR (mb -> zyklus [ j ] [ 1 ] ) < closest)
cond	118:27	118:75	15	SQR (mb -> zyklus [ j ] [ 0 ] ) +SQR (mb -> zyklus [ j ] [ 1 ] ) < closest
call	118:27	118:47	16	SQR
arg	118:31	118:47	17	mb->zyklus[j][0]
water	118:31	0:0	18	mb
op	118:33	0:0	18	->
water	118:35	0:0	18	zyklus
op	118:41	0:0	18	[
water	118:42	0:0	18	j
op	118:43	0:0	18	]
op	118:44	0:0	18	[
water	118:45	0:0	18	0
op	118:46	0:0	18	]
op	118:49	0:0	16	+
call	118:51	118:71	16	SQR
arg	118:55	118:71	17	mb->zyklus[j][1]
water	118:55	0:0	18	mb
op	118:57	0:0	18	->
water	118:59	0:0	18	zyklus
op	118:65	0:0	18	[
water	118:66	0:0	18	j
op	118:67	0:0	18	]
op	118:68	0:0	18	[
water	118:69	0:0	18	1
op	118:70	0:0	18	]
op	118:73	0:0	16	<
water	118:75	0:0	16	closest
stmts	118:83	121:24	15	
water	118:83	0:0	16	{
water	119:28	0:0	16	closest
op	119:35	0:0	16	=
call	119:37	119:57	16	SQR
arg	119:41	119:57	17	mb->zyklus[j][0]
water	119:41	0:0	18	mb
op	119:43	0:0	18	->
water	119:45	0:0	18	zyklus
op	119:51	0:0	18	[
water	119:52	0:0	18	j
op	119:53	0:0	18	]
op	119:54	0:0	18	[
water	119:55	0:0	18	0
op	119:56	0:0	18	]
op	119:59	0:0	16	+
call	119:61	119:81	16	SQR
arg	119:65	119:81	17	mb->zyklus[j][1]
water	119:65	0:0	18	mb
op	119:67	0:0	18	->
water	119:69	0:0	18	zyklus
op	119:75	0:0	18	[
water	119:76	0:0	18	j
op	119:77	0:0	18	]
op	119:78	0:0	18	[
water	119:79	0:0	18	1
op	119:80	0:0	18	]
water	119:82	0:0	16	;
water	120:28	0:0	16	closest_index
op	120:41	0:0	16	=
water	120:43	0:0	16	j
water	120:44	0:0	16	;
water	121:24	0:0	16	}
water	122:20	0:0	12	closest
op	122:28	0:0	12	=
call	122:30	122:42	12	sqrt
arg	122:35	122:42	13	closest
water	122:35	0:0	14	closest
water	122:43	0:0	12	;
water	123:20	0:0	12	c
op	123:21	0:0	12	=
call	123:23	123:77	12	lrintf
arg	123:30	123:77	13	(mb->zyklus[closest_index][0]/closest+1)*127+dv
water	123:30	0:0	14	(
water	123:31	0:0	14	mb
op	123:33	0:0	14	->
water	123:35	0:0	14	zyklus
op	123:41	0:0	14	[
water	123:42	0:0	14	closest_index
op	123:55	0:0	14	]
op	123:56	0:0	14	[
water	123:57	0:0	14	0
op	123:58	0:0	14	]
op	123:59	0:0	14	/
water	123:60	0:0	14	closest
op	123:67	0:0	14	+
water	123:68	0:0	14	1
water	123:69	0:0	14	)
op	123:70	0:0	14	*
water	123:71	0:0	14	127
op	123:74	0:0	14	+
water	123:75	0:0	14	dv
op	123:79	0:0	12	+
call	123:81	123:135	12	lrintf
arg	123:88	123:135	13	(mb->zyklus[closest_index][1]/closest+1)*127+dv
water	123:88	0:0	14	(
water	123:89	0:0	14	mb
op	123:91	0:0	14	->
water	123:93	0:0	14	zyklus
op	123:99	0:0	14	[
water	123:100	0:0	14	closest_index
op	123:113	0:0	14	]
op	123:114	0:0	14	[
water	123:115	0:0	14	1
op	123:116	0:0	14	]
op	123:117	0:0	14	/
water	123:118	0:0	14	closest
op	123:125	0:0	14	+
water	123:126	0:0	14	1
water	123:127	0:0	14	)
op	123:128	0:0	14	*
water	123:129	0:0	14	127
op	123:132	0:0	14	+
water	123:133	0:0	14	dv
op	123:136	0:0	12	*
water	123:137	0:0	12	256
water	123:140	0:0	12	;
water	124:16	0:0	12	}
water	125:12	0:0	8	}
water	126:12	0:0	6	c
op	126:14	0:0	6	|=
water	126:17	0:0	6	0
water	126:18	0:0	6	xFF000000
water	126:27	0:0	6	;
water	127:12	0:0	6	color
op	127:17	0:0	6	[
water	127:18	0:0	6	x
op	127:20	0:0	6	+
water	127:22	0:0	6	y
op	127:23	0:0	6	*
water	127:24	0:0	6	linesize
op	127:32	0:0	6	]
op	127:33	0:0	6	=
water	127:35	0:0	6	c
water	127:36	0:0	6	;
if	128:12	132:12	6	(next_cidx < mb -> cache_allocated)
cond	128:15	128:31	7	next_cidx < mb -> cache_allocated
water	128:15	0:0	8	next_cidx
op	128:25	0:0	8	<
water	128:27	0:0	8	mb
op	128:29	0:0	8	->
water	128:31	0:0	8	cache_allocated
stmts	128:47	132:12	7	
water	128:47	0:0	8	{
water	129:16	0:0	8	mb
op	129:18	0:0	8	->
water	129:20	0:0	8	next_cache
op	129:30	0:0	8	[
water	129:31	0:0	8	next_cidx
op	129:42	0:0	8	]
op	129:43	0:0	8	.
water	129:44	0:0	8	p
op	129:45	0:0	8	[
water	129:46	0:0	8	0
op	129:47	0:0	8	]
op	129:48	0:0	8	=
water	129:50	0:0	8	cr
water	129:52	0:0	8	;
water	130:16	0:0	8	mb
op	130:18	0:0	8	->
water	130:20	0:0	8	next_cache
op	130:30	0:0	8	[
water	130:31	0:0	8	next_cidx
op	130:42	0:0	8	]
op	130:43	0:0	8	.
water	130:44	0:0	8	p
op	130:45	0:0	8	[
water	130:46	0:0	8	1
op	130:47	0:0	8	]
op	130:48	0:0	8	=
water	130:50	0:0	8	ci
water	130:52	0:0	8	;
water	131:16	0:0	8	mb
op	131:18	0:0	8	->
water	131:20	0:0	8	next_cache
op	131:30	0:0	8	[
water	131:31	0:0	8	next_cidx
op	131:40	0:0	8	++
op	131:42	0:0	8	]
op	131:43	0:0	8	.
water	131:44	0:0	8	val
op	131:48	0:0	8	=
water	131:50	0:0	8	c
water	131:51	0:0	8	;
water	132:12	0:0	8	}
water	133:8	0:0	6	}
call	134:8	134:76	4	fill_from_cache
arg	134:24	134:27	5	ctx
water	134:24	0:0	6	ctx
arg	134:29	134:33	5	NULL
water	134:29	0:0	6	NULL
arg	134:35	134:43	5	&in_cidx
op	134:35	0:0	6	&
water	134:36	0:0	6	in_cidx
arg	134:45	134:55	5	&next_cidx
op	134:45	0:0	6	&
water	134:46	0:0	6	next_cidx
arg	134:57	134:69	5	ci+scale/2
water	134:57	0:0	6	ci
op	134:60	0:0	6	+
water	134:62	0:0	6	scale
op	134:67	0:0	6	/
water	134:68	0:0	6	2
arg	134:71	134:76	5	scale
water	134:71	0:0	6	scale
water	134:77	0:0	4	;
water	135:4	0:0	4	}
call	136:4	136:49	2	FFSWAP
arg	136:11	136:16	3	void*
water	136:11	0:0	4	void
op	136:15	0:0	4	*
arg	136:18	136:32	3	mb->next_cache
water	136:18	0:0	4	mb
op	136:20	0:0	4	->
water	136:22	0:0	4	next_cache
arg	136:34	136:49	3	mb->point_cache
water	136:34	0:0	4	mb
op	136:36	0:0	4	->
water	136:38	0:0	4	point_cache
water	136:50	0:0	2	;
water	137:4	0:0	2	mb
op	137:6	0:0	2	->
water	137:8	0:0	2	cache_used
op	137:19	0:0	2	=
water	137:21	0:0	2	next_cidx
water	137:30	0:0	2	;
if	138:4	139:68	2	(mb -> cache_used == mb -> cache_allocated)
cond	138:7	138:29	3	mb -> cache_used == mb -> cache_allocated
water	138:7	0:0	4	mb
op	138:9	0:0	4	->
water	138:11	0:0	4	cache_used
op	138:22	0:0	4	==
water	138:25	0:0	4	mb
op	138:27	0:0	4	->
water	138:29	0:0	4	cache_allocated
stmts	139:8	139:68	3	
call	139:8	139:67	4	av_log
arg	139:15	139:18	5	ctx
water	139:15	0:0	6	ctx
arg	139:20	139:31	5	AV_LOG_INFO
water	139:20	0:0	6	AV_LOG_INFO
arg	139:33	139:67	5	"Mandelbrot cache is too small!\n"
water	139:33	0:0	6	"Mandelbrot cache is too small!\n"
water	139:68	0:0	4	;
