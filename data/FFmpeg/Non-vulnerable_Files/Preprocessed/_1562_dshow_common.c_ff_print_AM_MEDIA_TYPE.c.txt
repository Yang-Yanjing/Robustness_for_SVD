func	1:0	56:0	0	void	ff_print_AM_MEDIA_TYPE
params	1:27	0:0	1	
param	1:28	1:53	2	const AM_MEDIA_TYPE *	type
stmnts	4:4	54:4	1	
call	4:4	4:32	2	dshowdebug
arg	4:15	4:32	3	"    majortype\t"
water	4:15	0:0	4	"    majortype\t"
water	4:33	0:0	2	;
call	5:4	5:33	2	ff_printGUID
arg	5:17	5:33	3	&type->majortype
op	5:17	0:0	4	&
water	5:18	0:0	4	type
op	5:22	0:0	4	->
water	5:24	0:0	4	majortype
water	5:34	0:0	2	;
call	6:4	6:19	2	dshowdebug
arg	6:15	6:19	3	"\n"
water	6:15	0:0	4	"\n"
water	6:20	0:0	2	;
call	7:4	7:30	2	dshowdebug
arg	7:15	7:30	3	"    subtype\t"
water	7:15	0:0	4	"    subtype\t"
water	7:31	0:0	2	;
call	8:4	8:31	2	ff_printGUID
arg	8:17	8:31	3	&type->subtype
op	8:17	0:0	4	&
water	8:18	0:0	4	type
op	8:22	0:0	4	->
water	8:24	0:0	4	subtype
water	8:32	0:0	2	;
call	9:4	9:19	2	dshowdebug
arg	9:15	9:19	3	"\n"
water	9:15	0:0	4	"\n"
water	9:20	0:0	2	;
call	10:4	10:69	2	dshowdebug
arg	10:15	10:44	3	"    bFixedSizeSamples\t%d\n"
water	10:15	0:0	4	"    bFixedSizeSamples\t%d\n"
arg	10:46	10:69	3	type->bFixedSizeSamples
water	10:46	0:0	4	type
op	10:50	0:0	4	->
water	10:52	0:0	4	bFixedSizeSamples
water	10:70	0:0	2	;
call	11:4	11:75	2	dshowdebug
arg	11:15	11:47	3	"    bTemporalCompression\t%d\n"
water	11:15	0:0	4	"    bTemporalCompression\t%d\n"
arg	11:49	11:75	3	type->bTemporalCompression
water	11:49	0:0	4	type
op	11:53	0:0	4	->
water	11:55	0:0	4	bTemporalCompression
water	11:76	0:0	2	;
call	12:4	12:58	2	dshowdebug
arg	12:15	12:39	3	"    lSampleSize\t%lu\n"
water	12:15	0:0	4	"    lSampleSize\t%lu\n"
arg	12:41	12:58	3	type->lSampleSize
water	12:41	0:0	4	type
op	12:45	0:0	4	->
water	12:47	0:0	4	lSampleSize
water	12:59	0:0	2	;
call	13:4	13:33	2	dshowdebug
arg	13:15	13:33	3	"    formattype\t"
water	13:15	0:0	4	"    formattype\t"
water	13:34	0:0	2	;
call	14:4	14:34	2	ff_printGUID
arg	14:17	14:34	3	&type->formattype
op	14:17	0:0	4	&
water	14:18	0:0	4	type
op	14:22	0:0	4	->
water	14:24	0:0	4	formattype
water	14:35	0:0	2	;
call	15:4	15:19	2	dshowdebug
arg	15:15	15:19	3	"\n"
water	15:15	0:0	4	"\n"
water	15:20	0:0	2	;
call	16:4	16:43	2	dshowdebug
arg	16:15	16:31	3	"    pUnk\t%p\n"
water	16:15	0:0	4	"    pUnk\t%p\n"
arg	16:33	16:43	3	type->pUnk
water	16:33	0:0	4	type
op	16:37	0:0	4	->
water	16:39	0:0	4	pUnk
water	16:44	0:0	2	;
call	17:4	17:52	2	dshowdebug
arg	17:15	17:36	3	"    cbFormat\t%lu\n"
water	17:15	0:0	4	"    cbFormat\t%lu\n"
arg	17:38	17:52	3	type->cbFormat
water	17:38	0:0	4	type
op	17:42	0:0	4	->
water	17:44	0:0	4	cbFormat
water	17:53	0:0	2	;
call	18:4	18:51	2	dshowdebug
arg	18:15	18:35	3	"    pbFormat\t%p\n"
water	18:15	0:0	4	"    pbFormat\t%p\n"
arg	18:37	18:51	3	type->pbFormat
water	18:37	0:0	4	type
op	18:41	0:0	4	->
water	18:43	0:0	4	pbFormat
water	18:52	0:0	2	;
if	19:4	29:4	2	(IsEqualGUID (& type -> formattype ,& FORMAT_VideoInfo ))
cond	19:8	19:56	3	IsEqualGUID (& type -> formattype ,& FORMAT_VideoInfo )
call	19:8	19:56	4	IsEqualGUID
arg	19:20	19:37	5	&type->formattype
op	19:20	0:0	6	&
water	19:21	0:0	6	type
op	19:25	0:0	6	->
water	19:27	0:0	6	formattype
arg	19:39	19:56	5	&FORMAT_VideoInfo
op	19:39	0:0	6	&
water	19:40	0:0	6	FORMAT_VideoInfo
stmts	19:59	29:4	3	
water	19:59	0:0	4	{
decl	20:8	20:52	4	VIDEOINFOHEADER	*v
op	20:27	0:0	4	=
water	20:29	0:0	4	(
water	20:30	0:0	4	void
op	20:35	0:0	4	*
water	20:36	0:0	4	)
water	20:38	0:0	4	type
op	20:42	0:0	4	->
water	20:44	0:0	4	pbFormat
call	21:8	22:91	4	dshowdebug
arg	21:19	21:76	5	"      rcSource: left %ld top %ld right %ld bottom %ld\n"
water	21:19	0:0	6	"      rcSource: left %ld top %ld right %ld bottom %ld\n"
arg	22:19	22:35	5	v->rcSource.left
water	22:19	0:0	6	v
op	22:20	0:0	6	->
water	22:22	0:0	6	rcSource
op	22:30	0:0	6	.
water	22:31	0:0	6	left
arg	22:37	22:52	5	v->rcSource.top
water	22:37	0:0	6	v
op	22:38	0:0	6	->
water	22:40	0:0	6	rcSource
op	22:48	0:0	6	.
water	22:49	0:0	6	top
arg	22:54	22:71	5	v->rcSource.right
water	22:54	0:0	6	v
op	22:55	0:0	6	->
water	22:57	0:0	6	rcSource
op	22:65	0:0	6	.
water	22:66	0:0	6	right
arg	22:73	22:91	5	v->rcSource.bottom
water	22:73	0:0	6	v
op	22:74	0:0	6	->
water	22:76	0:0	6	rcSource
op	22:84	0:0	6	.
water	22:85	0:0	6	bottom
water	22:92	0:0	4	;
call	23:8	24:91	4	dshowdebug
arg	23:19	23:76	5	"      rcTarget: left %ld top %ld right %ld bottom %ld\n"
water	23:19	0:0	6	"      rcTarget: left %ld top %ld right %ld bottom %ld\n"
arg	24:19	24:35	5	v->rcTarget.left
water	24:19	0:0	6	v
op	24:20	0:0	6	->
water	24:22	0:0	6	rcTarget
op	24:30	0:0	6	.
water	24:31	0:0	6	left
arg	24:37	24:52	5	v->rcTarget.top
water	24:37	0:0	6	v
op	24:38	0:0	6	->
water	24:40	0:0	6	rcTarget
op	24:48	0:0	6	.
water	24:49	0:0	6	top
arg	24:54	24:71	5	v->rcTarget.right
water	24:54	0:0	6	v
op	24:55	0:0	6	->
water	24:57	0:0	6	rcTarget
op	24:65	0:0	6	.
water	24:66	0:0	6	right
arg	24:73	24:91	5	v->rcTarget.bottom
water	24:73	0:0	6	v
op	24:74	0:0	6	->
water	24:76	0:0	6	rcTarget
op	24:84	0:0	6	.
water	24:85	0:0	6	bottom
water	24:92	0:0	4	;
call	25:8	25:57	4	dshowdebug
arg	25:19	25:43	5	"      dwBitRate: %lu\n"
water	25:19	0:0	6	"      dwBitRate: %lu\n"
arg	25:45	25:57	5	v->dwBitRate
water	25:45	0:0	6	v
op	25:46	0:0	6	->
water	25:48	0:0	6	dwBitRate
water	25:58	0:0	4	;
call	26:8	26:67	4	dshowdebug
arg	26:19	26:48	5	"      dwBitErrorRate: %lu\n"
water	26:19	0:0	6	"      dwBitErrorRate: %lu\n"
arg	26:50	26:67	5	v->dwBitErrorRate
water	26:50	0:0	6	v
op	26:51	0:0	6	->
water	26:53	0:0	6	dwBitErrorRate
water	26:68	0:0	4	;
call	27:8	27:75	4	dshowdebug
arg	27:19	27:55	5	"      AvgTimePerFrame: %"PRId64"\n"
water	27:19	0:0	6	"      AvgTimePerFrame: %"
water	27:45	0:0	6	PRId64
water	27:51	0:0	6	"\n"
arg	27:57	27:75	5	v->AvgTimePerFrame
water	27:57	0:0	6	v
op	27:58	0:0	6	->
water	27:60	0:0	6	AvgTimePerFrame
water	27:76	0:0	4	;
call	28:8	28:36	4	dump_bih
arg	28:17	28:21	5	NULL
water	28:17	0:0	6	NULL
arg	28:23	28:36	5	&v->bmiHeader
op	28:23	0:0	6	&
water	28:24	0:0	6	v
op	28:25	0:0	6	->
water	28:27	0:0	6	bmiHeader
water	28:37	0:0	4	;
water	29:4	0:0	4	}
else	29:6	45:4	2
stmts	29:11	45:4	3	
if	29:11	45:4	4	(IsEqualGUID (& type -> formattype ,& FORMAT_VideoInfo2 ))
cond	29:15	29:64	5	IsEqualGUID (& type -> formattype ,& FORMAT_VideoInfo2 )
call	29:15	29:64	6	IsEqualGUID
arg	29:27	29:44	7	&type->formattype
op	29:27	0:0	8	&
water	29:28	0:0	8	type
op	29:32	0:0	8	->
water	29:34	0:0	8	formattype
arg	29:46	29:64	7	&FORMAT_VideoInfo2
op	29:46	0:0	8	&
water	29:47	0:0	8	FORMAT_VideoInfo2
stmts	29:67	45:4	5	
water	29:67	0:0	6	{
decl	30:8	30:53	6	VIDEOINFOHEADER2	*v
op	30:28	0:0	6	=
water	30:30	0:0	6	(
water	30:31	0:0	6	void
op	30:36	0:0	6	*
water	30:37	0:0	6	)
water	30:39	0:0	6	type
op	30:43	0:0	6	->
water	30:45	0:0	6	pbFormat
call	31:8	32:91	6	dshowdebug
arg	31:19	31:76	7	"      rcSource: left %ld top %ld right %ld bottom %ld\n"
water	31:19	0:0	8	"      rcSource: left %ld top %ld right %ld bottom %ld\n"
arg	32:19	32:35	7	v->rcSource.left
water	32:19	0:0	8	v
op	32:20	0:0	8	->
water	32:22	0:0	8	rcSource
op	32:30	0:0	8	.
water	32:31	0:0	8	left
arg	32:37	32:52	7	v->rcSource.top
water	32:37	0:0	8	v
op	32:38	0:0	8	->
water	32:40	0:0	8	rcSource
op	32:48	0:0	8	.
water	32:49	0:0	8	top
arg	32:54	32:71	7	v->rcSource.right
water	32:54	0:0	8	v
op	32:55	0:0	8	->
water	32:57	0:0	8	rcSource
op	32:65	0:0	8	.
water	32:66	0:0	8	right
arg	32:73	32:91	7	v->rcSource.bottom
water	32:73	0:0	8	v
op	32:74	0:0	8	->
water	32:76	0:0	8	rcSource
op	32:84	0:0	8	.
water	32:85	0:0	8	bottom
water	32:92	0:0	6	;
call	33:8	34:91	6	dshowdebug
arg	33:19	33:76	7	"      rcTarget: left %ld top %ld right %ld bottom %ld\n"
water	33:19	0:0	8	"      rcTarget: left %ld top %ld right %ld bottom %ld\n"
arg	34:19	34:35	7	v->rcTarget.left
water	34:19	0:0	8	v
op	34:20	0:0	8	->
water	34:22	0:0	8	rcTarget
op	34:30	0:0	8	.
water	34:31	0:0	8	left
arg	34:37	34:52	7	v->rcTarget.top
water	34:37	0:0	8	v
op	34:38	0:0	8	->
water	34:40	0:0	8	rcTarget
op	34:48	0:0	8	.
water	34:49	0:0	8	top
arg	34:54	34:71	7	v->rcTarget.right
water	34:54	0:0	8	v
op	34:55	0:0	8	->
water	34:57	0:0	8	rcTarget
op	34:65	0:0	8	.
water	34:66	0:0	8	right
arg	34:73	34:91	7	v->rcTarget.bottom
water	34:73	0:0	8	v
op	34:74	0:0	8	->
water	34:76	0:0	8	rcTarget
op	34:84	0:0	8	.
water	34:85	0:0	8	bottom
water	34:92	0:0	6	;
call	35:8	35:57	6	dshowdebug
arg	35:19	35:43	7	"      dwBitRate: %lu\n"
water	35:19	0:0	8	"      dwBitRate: %lu\n"
arg	35:45	35:57	7	v->dwBitRate
water	35:45	0:0	8	v
op	35:46	0:0	8	->
water	35:48	0:0	8	dwBitRate
water	35:58	0:0	6	;
call	36:8	36:67	6	dshowdebug
arg	36:19	36:48	7	"      dwBitErrorRate: %lu\n"
water	36:19	0:0	8	"      dwBitErrorRate: %lu\n"
arg	36:50	36:67	7	v->dwBitErrorRate
water	36:50	0:0	8	v
op	36:51	0:0	8	->
water	36:53	0:0	8	dwBitErrorRate
water	36:68	0:0	6	;
call	37:8	37:75	6	dshowdebug
arg	37:19	37:55	7	"      AvgTimePerFrame: %"PRId64"\n"
water	37:19	0:0	8	"      AvgTimePerFrame: %"
water	37:45	0:0	8	PRId64
water	37:51	0:0	8	"\n"
arg	37:57	37:75	7	v->AvgTimePerFrame
water	37:57	0:0	8	v
op	37:58	0:0	8	->
water	37:60	0:0	8	AvgTimePerFrame
water	37:76	0:0	6	;
call	38:8	38:71	6	dshowdebug
arg	38:19	38:50	7	"      dwInterlaceFlags: %lu\n"
water	38:19	0:0	8	"      dwInterlaceFlags: %lu\n"
arg	38:52	38:71	7	v->dwInterlaceFlags
water	38:52	0:0	8	v
op	38:53	0:0	8	->
water	38:55	0:0	8	dwInterlaceFlags
water	38:72	0:0	6	;
call	39:8	39:75	6	dshowdebug
arg	39:19	39:52	7	"      dwCopyProtectFlags: %lu\n"
water	39:19	0:0	8	"      dwCopyProtectFlags: %lu\n"
arg	39:54	39:75	7	v->dwCopyProtectFlags
water	39:54	0:0	8	v
op	39:55	0:0	8	->
water	39:57	0:0	8	dwCopyProtectFlags
water	39:76	0:0	6	;
call	40:8	40:75	6	dshowdebug
arg	40:19	40:52	7	"      dwPictAspectRatioX: %lu\n"
water	40:19	0:0	8	"      dwPictAspectRatioX: %lu\n"
arg	40:54	40:75	7	v->dwPictAspectRatioX
water	40:54	0:0	8	v
op	40:55	0:0	8	->
water	40:57	0:0	8	dwPictAspectRatioX
water	40:76	0:0	6	;
call	41:8	41:75	6	dshowdebug
arg	41:19	41:52	7	"      dwPictAspectRatioY: %lu\n"
water	41:19	0:0	8	"      dwPictAspectRatioY: %lu\n"
arg	41:54	41:75	7	v->dwPictAspectRatioY
water	41:54	0:0	8	v
op	41:55	0:0	8	->
water	41:57	0:0	8	dwPictAspectRatioY
water	41:76	0:0	6	;
call	43:8	43:61	6	dshowdebug
arg	43:19	43:45	7	"      dwReserved2: %lu\n"
water	43:19	0:0	8	"      dwReserved2: %lu\n"
arg	43:47	43:61	7	v->dwReserved2
water	43:47	0:0	8	v
op	43:48	0:0	8	->
water	43:50	0:0	8	dwReserved2
water	43:62	0:0	6	;
call	44:8	44:36	6	dump_bih
arg	44:17	44:21	7	NULL
water	44:17	0:0	8	NULL
arg	44:23	44:36	7	&v->bmiHeader
op	44:23	0:0	8	&
water	44:24	0:0	8	v
op	44:25	0:0	8	->
water	44:27	0:0	8	bmiHeader
water	44:37	0:0	6	;
water	45:4	0:0	6	}
else	45:6	54:4	2
stmts	45:11	54:4	3	
if	45:11	54:4	4	(IsEqualGUID (& type -> formattype ,& FORMAT_WaveFormatEx ))
cond	45:15	45:66	5	IsEqualGUID (& type -> formattype ,& FORMAT_WaveFormatEx )
call	45:15	45:66	6	IsEqualGUID
arg	45:27	45:44	7	&type->formattype
op	45:27	0:0	8	&
water	45:28	0:0	8	type
op	45:32	0:0	8	->
water	45:34	0:0	8	formattype
arg	45:46	45:66	7	&FORMAT_WaveFormatEx
op	45:46	0:0	8	&
water	45:47	0:0	8	FORMAT_WaveFormatEx
stmts	45:69	54:4	5	
water	45:69	0:0	6	{
decl	46:8	46:50	6	WAVEFORMATEX	*fx
op	46:25	0:0	6	=
water	46:27	0:0	6	(
water	46:28	0:0	6	void
op	46:33	0:0	6	*
water	46:34	0:0	6	)
water	46:36	0:0	6	type
op	46:40	0:0	6	->
water	46:42	0:0	6	pbFormat
call	47:8	47:59	6	dshowdebug
arg	47:19	47:43	7	"      wFormatTag: %u\n"
water	47:19	0:0	8	"      wFormatTag: %u\n"
arg	47:45	47:59	7	fx->wFormatTag
water	47:45	0:0	8	fx
op	47:47	0:0	8	->
water	47:49	0:0	8	wFormatTag
water	47:60	0:0	6	;
call	48:8	48:57	6	dshowdebug
arg	48:19	48:42	7	"      nChannels: %u\n"
water	48:19	0:0	8	"      nChannels: %u\n"
arg	48:44	48:57	7	fx->nChannels
water	48:44	0:0	8	fx
op	48:46	0:0	8	->
water	48:48	0:0	8	nChannels
water	48:58	0:0	6	;
call	49:8	49:68	6	dshowdebug
arg	49:19	49:48	7	"      nSamplesPerSec: %lu\n"
water	49:19	0:0	8	"      nSamplesPerSec: %lu\n"
arg	49:50	49:68	7	fx->nSamplesPerSec
water	49:50	0:0	8	fx
op	49:52	0:0	8	->
water	49:54	0:0	8	nSamplesPerSec
water	49:69	0:0	6	;
call	50:8	50:70	6	dshowdebug
arg	50:19	50:49	7	"      nAvgBytesPerSec: %lu\n"
water	50:19	0:0	8	"      nAvgBytesPerSec: %lu\n"
arg	50:51	50:70	7	fx->nAvgBytesPerSec
water	50:51	0:0	8	fx
op	50:53	0:0	8	->
water	50:55	0:0	8	nAvgBytesPerSec
water	50:71	0:0	6	;
call	51:8	51:61	6	dshowdebug
arg	51:19	51:44	7	"      nBlockAlign: %u\n"
water	51:19	0:0	8	"      nBlockAlign: %u\n"
arg	51:46	51:61	7	fx->nBlockAlign
water	51:46	0:0	8	fx
op	51:48	0:0	8	->
water	51:50	0:0	8	nBlockAlign
water	51:62	0:0	6	;
call	52:8	52:67	6	dshowdebug
arg	52:19	52:47	7	"      wBitsPerSample: %u\n"
water	52:19	0:0	8	"      wBitsPerSample: %u\n"
arg	52:49	52:67	7	fx->wBitsPerSample
water	52:49	0:0	8	fx
op	52:51	0:0	8	->
water	52:53	0:0	8	wBitsPerSample
water	52:68	0:0	6	;
call	53:8	53:51	6	dshowdebug
arg	53:19	53:39	7	"      cbSize: %u\n"
water	53:19	0:0	8	"      cbSize: %u\n"
arg	53:41	53:51	7	fx->cbSize
water	53:41	0:0	8	fx
op	53:43	0:0	8	->
water	53:45	0:0	8	cbSize
water	53:52	0:0	6	;
water	54:4	0:0	6	}
