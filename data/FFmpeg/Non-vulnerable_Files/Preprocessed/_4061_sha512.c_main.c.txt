func	1:0	55:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	0:0	54:12	1	
decl	3:4	3:15	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:15	2	int	j
water	3:12	0:0	2	,
decl	3:4	3:15	2	int	k
decl	4:4	4:16	2	AVSHA512	ctx
decl	5:4	5:28	2	unsigned char	digest[64]
water	6:4	0:0	2	static
water	6:11	0:0	2	const
water	6:17	0:0	2	int
water	6:21	0:0	2	lengths
op	6:28	0:0	2	[
water	6:29	0:0	2	4
op	6:30	0:0	2	]
op	6:32	0:0	2	=
water	6:34	0:0	2	{
water	6:36	0:0	2	224
water	6:39	0:0	2	,
water	6:41	0:0	2	256
water	6:44	0:0	2	,
water	6:46	0:0	2	384
water	6:49	0:0	2	,
water	6:51	0:0	2	512
water	6:55	0:0	2	}
water	6:56	0:0	2	;
for	7:4	53:4	2	(j = 0 ;j < 4;j ++)
forinit	7:9	7:14	3	j = 0 ;
water	7:9	0:0	4	j
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:20	3	j < 4
water	7:16	0:0	4	j
op	7:18	0:0	4	<
water	7:20	0:0	4	4
forexpr	7:23	7:24	3	j ++
water	7:23	0:0	4	j
op	7:24	0:0	4	++
stmts	7:28	53:4	3	
water	7:28	0:0	4	{
if	8:8	8:61	4	(j < 2)
cond	8:12	8:16	5	j < 2
water	8:12	0:0	6	j
op	8:14	0:0	6	<
water	8:16	0:0	6	2
stmts	8:19	8:61	5	
call	8:19	8:60	6	printf
arg	8:26	8:48	7	"Testing SHA-512/%d\n"
water	8:26	0:0	8	"Testing SHA-512/%d\n"
arg	8:50	8:60	7	lengths[j]
water	8:50	0:0	8	lengths
op	8:57	0:0	8	[
water	8:58	0:0	8	j
op	8:59	0:0	8	]
water	8:61	0:0	6	;
else	9:8	9:57	4
stmts	9:19	9:57	5	
call	9:19	9:56	6	printf
arg	9:26	9:44	7	"Testing SHA-%d\n"
water	9:26	0:0	8	"Testing SHA-%d\n"
arg	9:46	9:56	7	lengths[j]
water	9:46	0:0	8	lengths
op	9:53	0:0	8	[
water	9:54	0:0	8	j
op	9:55	0:0	8	]
water	9:57	0:0	6	;
for	10:8	24:8	4	(k = 0 ;k < 3;k ++)
forinit	10:13	10:18	5	k = 0 ;
water	10:13	0:0	6	k
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:20	10:24	5	k < 3
water	10:20	0:0	6	k
op	10:22	0:0	6	<
water	10:24	0:0	6	3
forexpr	10:27	10:28	5	k ++
water	10:27	0:0	6	k
op	10:28	0:0	6	++
stmts	10:32	24:8	5	
water	10:32	0:0	6	{
call	11:12	11:43	6	av_sha512_init
arg	11:27	11:31	7	&ctx
op	11:27	0:0	8	&
water	11:28	0:0	8	ctx
arg	11:33	11:43	7	lengths[j]
water	11:33	0:0	8	lengths
op	11:40	0:0	8	[
water	11:41	0:0	8	j
op	11:42	0:0	8	]
water	11:44	0:0	6	;
if	12:12	13:48	6	(k == 0)
cond	12:16	12:21	7	k == 0
water	12:16	0:0	8	k
op	12:18	0:0	8	==
water	12:21	0:0	8	0
stmts	13:16	13:48	7	
call	13:16	13:47	8	av_sha512_update
arg	13:33	13:37	9	&ctx
op	13:33	0:0	10	&
water	13:34	0:0	10	ctx
arg	13:39	13:44	9	"abc"
water	13:39	0:0	10	"abc"
arg	13:46	13:47	9	3
water	13:46	0:0	10	3
water	13:48	0:0	8	;
else	14:12	16:103	6
stmts	14:17	16:103	7	
if	14:17	16:103	8	(k == 1)
cond	14:21	14:26	9	k == 1
water	14:21	0:0	10	k
op	14:23	0:0	10	==
water	14:26	0:0	10	1
stmts	15:16	16:103	9	
call	15:16	16:102	10	av_sha512_update
arg	15:33	15:37	11	&ctx
op	15:33	0:0	12	&
water	15:34	0:0	12	ctx
arg	15:39	16:97	11	"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn""hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"
water	15:39	0:0	12	"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
water	16:39	0:0	12	"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"
arg	16:99	16:102	11	112
water	16:99	0:0	12	112
water	16:103	0:0	10	;
else	17:12	19:50	6
stmts	18:16	19:50	7	
for	18:16	19:50	8	(i = 0 ;i < 1000 * 1000;i ++)
forinit	18:21	18:26	9	i = 0 ;
water	18:21	0:0	10	i
op	18:23	0:0	10	=
water	18:25	0:0	10	0
water	18:26	0:0	10	;
cond	18:28	18:37	9	i < 1000 * 1000
water	18:28	0:0	10	i
op	18:30	0:0	10	<
water	18:32	0:0	10	1000
op	18:36	0:0	10	*
water	18:37	0:0	10	1000
forexpr	18:43	18:44	9	i ++
water	18:43	0:0	10	i
op	18:44	0:0	10	++
stmts	19:20	19:50	9	
call	19:20	19:49	10	av_sha512_update
arg	19:37	19:41	11	&ctx
op	19:37	0:0	12	&
water	19:38	0:0	12	ctx
arg	19:43	19:46	11	"a"
water	19:43	0:0	12	"a"
arg	19:48	19:49	11	1
water	19:48	0:0	12	1
water	19:50	0:0	10	;
call	20:12	20:40	6	av_sha512_final
arg	20:28	20:32	7	&ctx
op	20:28	0:0	8	&
water	20:29	0:0	8	ctx
arg	20:34	20:40	7	digest
water	20:34	0:0	8	digest
water	20:41	0:0	6	;
for	21:12	22:41	6	(i = 0 ;i < lengths [ j ] >> 3;i ++)
forinit	21:17	21:22	7	i = 0 ;
water	21:17	0:0	8	i
op	21:19	0:0	8	=
water	21:21	0:0	8	0
water	21:22	0:0	8	;
cond	21:24	21:42	7	i < lengths [ j ] >> 3
water	21:24	0:0	8	i
op	21:26	0:0	8	<
water	21:28	0:0	8	lengths
op	21:35	0:0	8	[
water	21:36	0:0	8	j
op	21:37	0:0	8	]
op	21:39	0:0	8	>>
water	21:42	0:0	8	3
forexpr	21:45	21:46	7	i ++
water	21:45	0:0	8	i
op	21:46	0:0	8	++
stmts	22:16	22:41	7	
call	22:16	22:40	8	printf
arg	22:23	22:29	9	"%02X"
water	22:23	0:0	10	"%02X"
arg	22:31	22:40	9	digest[i]
water	22:31	0:0	10	digest
op	22:37	0:0	10	[
water	22:38	0:0	10	i
op	22:39	0:0	10	]
water	22:41	0:0	8	;
call	23:12	23:24	6	putchar
arg	23:20	23:24	7	'\n'
water	23:20	0:0	8	'\n'
water	23:25	0:0	6	;
water	24:8	0:0	6	}
switch	25:8	52:8	4	(j)
cond	25:16	25:16	5	j
water	25:16	0:0	6	j
stmts	25:19	52:8	5	
water	25:19	0:0	6	{
label	26:8	26:14	6	case 0 :
call	27:12	29:85	6	printf
arg	27:19	29:85	7	"4634270f 707b6a54 daae7530 460842e2 0e37ed26 5ceee9a4 3e8924aa\n""23fec5bb 94d60b23 30819264 0b0c4533 35d66473 4fe40e72 68674af9\n""37ab331d 76f0d36d e422bd0e deb22a28 accd487b 7a8453ae 965dd287\n"
water	27:19	0:0	8	"4634270f 707b6a54 daae7530 460842e2 0e37ed26 5ceee9a4 3e8924aa\n"
water	28:19	0:0	8	"23fec5bb 94d60b23 30819264 0b0c4533 35d66473 4fe40e72 68674af9\n"
water	29:19	0:0	8	"37ab331d 76f0d36d e422bd0e deb22a28 accd487b 7a8453ae 965dd287\n"
water	29:86	0:0	6	;
break	30:12	30:17	6	
label	31:8	31:14	6	case 1 :
call	32:12	34:94	6	printf
arg	32:19	34:94	7	"53048e26 81941ef9 9b2e29b7 6b4c7dab e4c2d0c6 34fc6d46 e0e2f131 07e7af23\n""3928e184 fb8690f8 40da3988 121d31be 65cb9d3e f83ee614 6feac861 e19b563a\n""9a59a052 930187a9 7038cae6 92f30708 aa649192 3ef51943 94dc68d5 6c74fb21\n"
water	32:19	0:0	8	"53048e26 81941ef9 9b2e29b7 6b4c7dab e4c2d0c6 34fc6d46 e0e2f131 07e7af23\n"
water	33:19	0:0	8	"3928e184 fb8690f8 40da3988 121d31be 65cb9d3e f83ee614 6feac861 e19b563a\n"
water	34:19	0:0	8	"9a59a052 930187a9 7038cae6 92f30708 aa649192 3ef51943 94dc68d5 6c74fb21\n"
water	34:95	0:0	6	;
break	35:12	35:17	6	
label	36:8	36:14	6	case 2 :
call	37:12	42:76	6	printf
arg	37:19	42:76	7	"cb00753f 45a35e8b b5a03d69 9ac65007 272c32ab 0eded163 ""1a8b605a 43ff5bed 8086072b a1e7cc23 58baeca1 34c825a7\n""09330c33 f71147e8 3d192fc7 82cd1b47 53111b17 3b3b05d2 ""2fa08086 e3b0f712 fcc7c71a 557e2db9 66c3e9fa 91746039\n""9d0e1809 716474cb 086e834e 310a4a1c ed149e9c 00f24852 ""7972cec5 704c2a5b 07b8b3dc 38ecc4eb ae97ddd8 7f3d8985\n"
water	37:19	0:0	8	"cb00753f 45a35e8b b5a03d69 9ac65007 272c32ab 0eded163 "
water	38:19	0:0	8	"1a8b605a 43ff5bed 8086072b a1e7cc23 58baeca1 34c825a7\n"
water	39:19	0:0	8	"09330c33 f71147e8 3d192fc7 82cd1b47 53111b17 3b3b05d2 "
water	40:19	0:0	8	"2fa08086 e3b0f712 fcc7c71a 557e2db9 66c3e9fa 91746039\n"
water	41:19	0:0	8	"9d0e1809 716474cb 086e834e 310a4a1c ed149e9c 00f24852 "
water	42:19	0:0	8	"7972cec5 704c2a5b 07b8b3dc 38ecc4eb ae97ddd8 7f3d8985\n"
water	42:77	0:0	6	;
break	43:12	43:17	6	
label	44:8	44:14	6	case 3 :
call	45:12	50:94	6	printf
arg	45:19	50:94	7	"ddaf35a1 93617aba cc417349 ae204131 12e6fa4e 89a97ea2 0a9eeee6 4b55d39a ""2192992a 274fc1a8 36ba3c23 a3feebbd 454d4423 643ce80e 2a9ac94f a54ca49f\n""8e959b75 dae313da 8cf4f728 14fc143f 8f7779c6 eb9f7fa1 7299aead b6889018 ""501d289e 4900f7e4 331b99de c4b5433a c7d329ee b6dd2654 5e96e55b 874be909\n""e718483d 0ce76964 4e2e42c7 bc15b463 8e1f98b1 3b204428 5632a803 afa973eb ""de0ff244 877ea60a 4cb0432c e577c31b eb009c5c 2c49aa2e 4eadb217 ad8cc09b\n"
water	45:19	0:0	8	"ddaf35a1 93617aba cc417349 ae204131 12e6fa4e 89a97ea2 0a9eeee6 4b55d39a "
water	46:19	0:0	8	"2192992a 274fc1a8 36ba3c23 a3feebbd 454d4423 643ce80e 2a9ac94f a54ca49f\n"
water	47:19	0:0	8	"8e959b75 dae313da 8cf4f728 14fc143f 8f7779c6 eb9f7fa1 7299aead b6889018 "
water	48:19	0:0	8	"501d289e 4900f7e4 331b99de c4b5433a c7d329ee b6dd2654 5e96e55b 874be909\n"
water	49:19	0:0	8	"e718483d 0ce76964 4e2e42c7 bc15b463 8e1f98b1 3b204428 5632a803 afa973eb "
water	50:19	0:0	8	"de0ff244 877ea60a 4cb0432c e577c31b eb009c5c 2c49aa2e 4eadb217 ad8cc09b\n"
water	50:95	0:0	6	;
break	51:12	51:17	6	
water	52:8	0:0	6	}
water	53:4	0:0	4	}
return	54:4	54:12	2	0
water	54:11	0:0	3	0
