func	1:0	45:0	0	static int	mxf_handle_missing_index_segment
params	1:43	0:0	1	
param	1:44	1:59	2	MXFContext *	mxf
stmnts	0:0	44:12	1	
decl	3:4	3:32	2	AVFormatContext	*s
op	3:23	0:0	2	=
water	3:25	0:0	2	mxf
op	3:28	0:0	2	->
water	3:30	0:0	2	fc
decl	4:4	4:23	2	AVStream	*st
op	4:17	0:0	2	=
water	4:19	0:0	2	NULL
decl	5:4	5:40	2	MXFIndexTableSegment	*segment
op	5:34	0:0	2	=
water	5:36	0:0	2	NULL
decl	6:4	6:26	2	MXFPartition	*p
op	6:20	0:0	2	=
water	6:22	0:0	2	NULL
decl	7:4	7:35	2	int	essence_partition_count
op	7:32	0:0	2	=
water	7:34	0:0	2	0
decl	8:4	8:14	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:14	2	int	ret
if	9:4	10:16	2	(mxf -> op != OPAtom)
cond	9:8	9:19	3	mxf -> op != OPAtom
water	9:8	0:0	4	mxf
op	9:11	0:0	4	->
water	9:13	0:0	4	op
op	9:16	0:0	4	!=
water	9:19	0:0	4	OPAtom
stmts	10:8	10:16	3	
return	10:8	10:16	4	0
water	10:15	0:0	5	0
if	12:4	13:16	2	(s -> nb_streams != 1 || s -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_AUDIO || !is_pcm (s -> streams [ 0 ] -> codec -> codec_id ))
cond	12:8	12:126	3	s -> nb_streams != 1 || s -> streams [ 0 ] -> codec -> codec_type != AVMEDIA_TYPE_AUDIO || !is_pcm (s -> streams [ 0 ] -> codec -> codec_id )
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	nb_streams
op	12:22	0:0	4	!=
water	12:25	0:0	4	1
op	12:27	0:0	4	||
water	12:30	0:0	4	s
op	12:31	0:0	4	->
water	12:33	0:0	4	streams
op	12:40	0:0	4	[
water	12:41	0:0	4	0
op	12:42	0:0	4	]
op	12:43	0:0	4	->
water	12:45	0:0	4	codec
op	12:50	0:0	4	->
water	12:52	0:0	4	codec_type
op	12:63	0:0	4	!=
water	12:66	0:0	4	AVMEDIA_TYPE_AUDIO
op	12:85	0:0	4	||
op	12:88	0:0	4	!
call	12:89	12:126	4	is_pcm
arg	12:96	12:126	5	s->streams[0]->codec->codec_id
water	12:96	0:0	6	s
op	12:97	0:0	6	->
water	12:99	0:0	6	streams
op	12:106	0:0	6	[
water	12:107	0:0	6	0
op	12:108	0:0	6	]
op	12:109	0:0	6	->
water	12:111	0:0	6	codec
op	12:116	0:0	6	->
water	12:118	0:0	6	codec_id
stmts	13:8	13:16	3	
return	13:8	13:16	4	0
water	13:15	0:0	5	0
for	15:4	18:4	2	(i = 0 ;i < mxf -> metadata_sets_count;i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:25	3	i < mxf -> metadata_sets_count
water	15:16	0:0	4	i
op	15:18	0:0	4	<
water	15:20	0:0	4	mxf
op	15:23	0:0	4	->
water	15:25	0:0	4	metadata_sets_count
forexpr	15:46	15:47	3	i ++
water	15:46	0:0	4	i
op	15:47	0:0	4	++
stmts	15:51	18:4	3	
water	15:51	0:0	4	{
if	16:8	17:20	4	(mxf -> metadata_sets [ i ] -> type == IndexTableSegment)
cond	16:12	16:43	5	mxf -> metadata_sets [ i ] -> type == IndexTableSegment
water	16:12	0:0	6	mxf
op	16:15	0:0	6	->
water	16:17	0:0	6	metadata_sets
op	16:30	0:0	6	[
water	16:31	0:0	6	i
op	16:32	0:0	6	]
op	16:33	0:0	6	->
water	16:35	0:0	6	type
op	16:40	0:0	6	==
water	16:43	0:0	6	IndexTableSegment
stmts	17:12	17:20	5	
return	17:12	17:20	6	0
water	17:19	0:0	7	0
water	18:4	0:0	4	}
for	20:4	26:4	2	(i = 0 ;i < mxf -> partitions_count;i ++)
forinit	20:9	20:14	3	i = 0 ;
water	20:9	0:0	4	i
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:25	3	i < mxf -> partitions_count
water	20:16	0:0	4	i
op	20:18	0:0	4	<
water	20:20	0:0	4	mxf
op	20:23	0:0	4	->
water	20:25	0:0	4	partitions_count
forexpr	20:43	20:44	3	i ++
water	20:43	0:0	4	i
op	20:44	0:0	4	++
stmts	20:48	26:4	3	
water	20:48	0:0	4	{
if	22:8	23:20	4	(! mxf -> partitions [ i ] . body_sid)
cond	22:12	22:32	5	! mxf -> partitions [ i ] . body_sid
op	22:12	0:0	6	!
water	22:13	0:0	6	mxf
op	22:16	0:0	6	->
water	22:18	0:0	6	partitions
op	22:28	0:0	6	[
water	22:29	0:0	6	i
op	22:30	0:0	6	]
op	22:31	0:0	6	.
water	22:32	0:0	6	body_sid
stmts	23:12	23:20	5	
continue	23:12	23:20	6	
water	24:8	0:0	4	p
op	24:10	0:0	4	=
op	24:12	0:0	4	&
water	24:13	0:0	4	mxf
op	24:16	0:0	4	->
water	24:18	0:0	4	partitions
op	24:28	0:0	4	[
water	24:29	0:0	4	i
op	24:30	0:0	4	]
water	24:31	0:0	4	;
water	25:8	0:0	4	essence_partition_count
op	25:31	0:0	4	++
water	25:33	0:0	4	;
water	26:4	0:0	4	}
if	28:4	29:16	2	(essence_partition_count != 1)
cond	28:8	28:35	3	essence_partition_count != 1
water	28:8	0:0	4	essence_partition_count
op	28:32	0:0	4	!=
water	28:35	0:0	4	1
stmts	29:8	29:16	3	
return	29:8	29:16	4	0
water	29:15	0:0	5	0
if	30:4	31:30	2	(! ( segment =av_mallocz (sizeof ( * segment ) ) ))
cond	30:8	30:48	3	! ( segment =av_mallocz (sizeof ( * segment ) ) )
op	30:8	0:0	4	!
water	30:9	0:0	4	(
water	30:10	0:0	4	segment
op	30:18	0:0	4	=
call	30:20	30:47	4	av_mallocz
arg	30:31	30:47	5	sizeof(*segment)
op	30:31	0:0	6	sizeof
water	30:37	0:0	6	(
op	30:38	0:0	6	*
water	30:39	0:0	6	segment
water	30:46	0:0	6	)
water	30:48	0:0	4	)
stmts	31:8	31:30	3	
return	31:8	31:30	4	AVERROR(ENOMEM)
call	31:15	31:29	5	AVERROR
arg	31:23	31:29	6	ENOMEM
water	31:23	0:0	7	ENOMEM
if	32:4	35:4	2	(( ret =mxf_add_metadata_set (mxf ,segment ) ))
cond	32:8	32:49	3	( ret =mxf_add_metadata_set (mxf ,segment ) )
water	32:8	0:0	4	(
water	32:9	0:0	4	ret
op	32:13	0:0	4	=
call	32:15	32:48	4	mxf_add_metadata_set
arg	32:36	32:39	5	mxf
water	32:36	0:0	6	mxf
arg	32:41	32:48	5	segment
water	32:41	0:0	6	segment
water	32:49	0:0	4	)
stmts	32:52	35:4	3	
water	32:52	0:0	4	{
call	33:8	33:58	4	mxf_free_metadataset
arg	33:29	33:55	5	(MXFMetadataSet**)&segment
water	33:29	0:0	6	(
water	33:30	0:0	6	MXFMetadataSet
op	33:44	0:0	6	*
op	33:45	0:0	6	*
water	33:46	0:0	6	)
op	33:47	0:0	6	&
water	33:48	0:0	6	segment
arg	33:57	33:58	5	1
water	33:57	0:0	6	1
water	33:59	0:0	4	;
return	34:8	34:18	4	ret
water	34:15	0:0	5	ret
water	35:4	0:0	4	}
water	36:4	0:0	2	st
op	36:7	0:0	2	=
water	36:9	0:0	2	s
op	36:10	0:0	2	->
water	36:12	0:0	2	streams
op	36:19	0:0	2	[
water	36:20	0:0	2	0
op	36:21	0:0	2	]
water	36:22	0:0	2	;
water	37:4	0:0	2	segment
op	37:11	0:0	2	->
water	37:13	0:0	2	type
op	37:18	0:0	2	=
water	37:20	0:0	2	IndexTableSegment
water	37:37	0:0	2	;
water	39:4	0:0	2	segment
op	39:11	0:0	2	->
water	39:13	0:0	2	edit_unit_byte_count
op	39:34	0:0	2	=
water	39:36	0:0	2	(
call	39:37	39:79	2	av_get_bits_per_sample
arg	39:60	39:79	3	st->codec->codec_id
water	39:60	0:0	4	st
op	39:62	0:0	4	->
water	39:64	0:0	4	codec
op	39:69	0:0	4	->
water	39:71	0:0	4	codec_id
op	39:81	0:0	2	*
water	39:83	0:0	2	st
op	39:85	0:0	2	->
water	39:87	0:0	2	codec
op	39:92	0:0	2	->
water	39:94	0:0	2	channels
water	39:102	0:0	2	)
op	39:104	0:0	2	>>
water	39:107	0:0	2	3
water	39:108	0:0	2	;
water	40:4	0:0	2	segment
op	40:11	0:0	2	->
water	40:13	0:0	2	index_start_position
op	40:34	0:0	2	=
water	40:36	0:0	2	0
water	40:37	0:0	2	;
water	41:4	0:0	2	segment
op	41:11	0:0	2	->
water	41:13	0:0	2	index_duration
op	41:28	0:0	2	=
water	41:30	0:0	2	s
op	41:31	0:0	2	->
water	41:33	0:0	2	streams
op	41:40	0:0	2	[
water	41:41	0:0	2	0
op	41:42	0:0	2	]
op	41:43	0:0	2	->
water	41:45	0:0	2	duration
water	41:53	0:0	2	;
water	42:4	0:0	2	segment
op	42:11	0:0	2	->
water	42:13	0:0	2	index_sid
op	42:23	0:0	2	=
water	42:25	0:0	2	p
op	42:26	0:0	2	->
water	42:28	0:0	2	index_sid
water	42:37	0:0	2	;
water	43:4	0:0	2	segment
op	43:11	0:0	2	->
water	43:13	0:0	2	body_sid
op	43:22	0:0	2	=
water	43:24	0:0	2	p
op	43:25	0:0	2	->
water	43:27	0:0	2	body_sid
water	43:35	0:0	2	;
return	44:4	44:12	2	0
water	44:11	0:0	3	0
