func	1:0	34:0	0	static int	draw_glyphs
params	1:22	0:0	1	
param	1:23	1:41	2	DrawTextContext *	s
param	1:43	1:57	2	AVFrame *	frame
param	2:23	2:32	2	int	width
param	2:34	2:44	2	int	height
param	3:23	3:41	2	FFDrawColor *	color
param	4:23	4:28	2	int	x
param	4:30	4:35	2	int	y
param	4:37	4:48	2	int	borderw
stmnts	0:0	33:12	1	
decl	6:4	6:37	2	char	*text
op	6:15	0:0	2	=
water	6:17	0:0	2	s
op	6:18	0:0	2	->
water	6:20	0:0	2	expanded_text
op	6:33	0:0	2	.
water	6:34	0:0	2	str
decl	7:4	7:21	2	uint32_t	code
op	7:18	0:0	2	=
water	7:20	0:0	2	0
decl	8:4	8:17	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:17	2	int	x1
water	8:13	0:0	2	,
decl	8:4	8:17	2	int	y1
decl	9:4	9:14	2	uint8_t	*p
decl	10:4	10:23	2	Glyph	*glyph
op	10:17	0:0	2	=
water	10:19	0:0	2	NULL
for	11:4	32:4	2	(i = 0 , p = text ;* p;i ++)
forinit	11:9	11:24	3	i = 0 , p = text ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	,
water	11:16	0:0	4	p
op	11:18	0:0	4	=
water	11:20	0:0	4	text
water	11:24	0:0	4	;
cond	11:26	11:27	3	* p
op	11:26	0:0	4	*
water	11:27	0:0	4	p
forexpr	11:30	11:31	3	i ++
water	11:30	0:0	4	i
op	11:31	0:0	4	++
stmts	11:35	32:4	3	
water	11:35	0:0	4	{
decl	12:8	12:24	4	FT_Bitmap	bitmap
decl	13:8	13:27	4	Glyph	dummy
op	13:20	0:0	4	=
water	13:22	0:0	4	{
water	13:24	0:0	4	0
water	13:26	0:0	4	}
water	14:8	0:0	4	GET_UTF8
water	14:16	0:0	4	(
water	14:17	0:0	4	code
water	14:21	0:0	4	,
op	14:23	0:0	4	*
water	14:24	0:0	4	p
op	14:25	0:0	4	++
water	14:27	0:0	4	,
water	14:29	0:0	4	continue
water	14:37	0:0	4	;
water	14:38	0:0	4	)
water	14:39	0:0	4	;
if	16:8	17:20	4	(code == '\n' || code == '\r' || code == '\t')
cond	16:12	16:52	5	code == '\n' || code == '\r' || code == '\t'
water	16:12	0:0	6	code
op	16:17	0:0	6	==
water	16:20	0:0	6	'\n'
op	16:25	0:0	6	||
water	16:28	0:0	6	code
op	16:33	0:0	6	==
water	16:36	0:0	6	'\r'
op	16:41	0:0	6	||
water	16:44	0:0	6	code
op	16:49	0:0	6	==
water	16:52	0:0	6	'\t'
stmts	17:12	17:20	5	
continue	17:12	17:20	6	
water	18:8	0:0	4	dummy
op	18:13	0:0	4	.
water	18:14	0:0	4	code
op	18:19	0:0	4	=
water	18:21	0:0	4	code
water	18:25	0:0	4	;
water	19:8	0:0	4	glyph
op	19:14	0:0	4	=
call	19:16	19:71	4	av_tree_find
arg	19:29	19:38	5	s->glyphs
water	19:29	0:0	6	s
op	19:30	0:0	6	->
water	19:32	0:0	6	glyphs
arg	19:40	19:46	5	&dummy
op	19:40	0:0	6	&
water	19:41	0:0	6	dummy
arg	19:48	19:65	5	(void*)glyph_cmp
water	19:48	0:0	6	(
water	19:49	0:0	6	void
op	19:54	0:0	6	*
water	19:55	0:0	6	)
water	19:56	0:0	6	glyph_cmp
arg	19:67	19:71	5	NULL
water	19:67	0:0	6	NULL
water	19:72	0:0	4	;
water	20:8	0:0	4	bitmap
op	20:15	0:0	4	=
water	20:17	0:0	4	borderw
water	20:25	0:0	4	?
water	20:27	0:0	4	glyph
op	20:32	0:0	4	->
water	20:34	0:0	4	border_bitmap
water	20:48	0:0	4	:
water	20:50	0:0	4	glyph
op	20:55	0:0	4	->
water	20:57	0:0	4	bitmap
water	20:63	0:0	4	;
if	21:8	23:34	4	(glyph -> bitmap . pixel_mode != FT_PIXEL_MODE_MONO && glyph -> bitmap . pixel_mode != FT_PIXEL_MODE_GRAY)
cond	21:12	22:40	5	glyph -> bitmap . pixel_mode != FT_PIXEL_MODE_MONO && glyph -> bitmap . pixel_mode != FT_PIXEL_MODE_GRAY
water	21:12	0:0	6	glyph
op	21:17	0:0	6	->
water	21:19	0:0	6	bitmap
op	21:25	0:0	6	.
water	21:26	0:0	6	pixel_mode
op	21:37	0:0	6	!=
water	21:40	0:0	6	FT_PIXEL_MODE_MONO
op	21:59	0:0	6	&&
water	22:12	0:0	6	glyph
op	22:17	0:0	6	->
water	22:19	0:0	6	bitmap
op	22:25	0:0	6	.
water	22:26	0:0	6	pixel_mode
op	22:37	0:0	6	!=
water	22:40	0:0	6	FT_PIXEL_MODE_GRAY
stmts	23:12	23:34	5	
return	23:12	23:34	6	AVERROR(EINVAL)
call	23:19	23:33	7	AVERROR
arg	23:27	23:33	8	EINVAL
water	23:27	0:0	9	EINVAL
water	24:8	0:0	4	x1
op	24:11	0:0	4	=
water	24:13	0:0	4	s
op	24:14	0:0	4	->
water	24:16	0:0	4	positions
op	24:25	0:0	4	[
water	24:26	0:0	4	i
op	24:27	0:0	4	]
op	24:28	0:0	4	.
water	24:29	0:0	4	x
op	24:30	0:0	4	+
water	24:31	0:0	4	s
op	24:32	0:0	4	->
water	24:34	0:0	4	x
op	24:35	0:0	4	+
water	24:36	0:0	4	x
op	24:38	0:0	4	-
water	24:40	0:0	4	borderw
water	24:47	0:0	4	;
water	25:8	0:0	4	y1
op	25:11	0:0	4	=
water	25:13	0:0	4	s
op	25:14	0:0	4	->
water	25:16	0:0	4	positions
op	25:25	0:0	4	[
water	25:26	0:0	4	i
op	25:27	0:0	4	]
op	25:28	0:0	4	.
water	25:29	0:0	4	y
op	25:30	0:0	4	+
water	25:31	0:0	4	s
op	25:32	0:0	4	->
water	25:34	0:0	4	y
op	25:35	0:0	4	+
water	25:36	0:0	4	y
op	25:38	0:0	4	-
water	25:40	0:0	4	borderw
water	25:47	0:0	4	;
call	26:8	31:31	4	ff_blend_mask
arg	26:22	26:28	5	&s->dc
op	26:22	0:0	6	&
water	26:23	0:0	6	s
op	26:24	0:0	6	->
water	26:26	0:0	6	dc
arg	26:30	26:35	5	color
water	26:30	0:0	6	color
arg	27:22	27:33	5	frame->data
water	27:22	0:0	6	frame
op	27:27	0:0	6	->
water	27:29	0:0	6	data
arg	27:35	27:50	5	frame->linesize
water	27:35	0:0	6	frame
op	27:40	0:0	6	->
water	27:42	0:0	6	linesize
arg	27:52	27:57	5	width
water	27:52	0:0	6	width
arg	27:59	27:65	5	height
water	27:59	0:0	6	height
arg	28:22	28:35	5	bitmap.buffer
water	28:22	0:0	6	bitmap
op	28:28	0:0	6	.
water	28:29	0:0	6	buffer
arg	28:37	28:49	5	bitmap.pitch
water	28:37	0:0	6	bitmap
op	28:43	0:0	6	.
water	28:44	0:0	6	pitch
arg	29:22	29:34	5	bitmap.width
water	29:22	0:0	6	bitmap
op	29:28	0:0	6	.
water	29:29	0:0	6	width
arg	29:36	29:47	5	bitmap.rows
water	29:36	0:0	6	bitmap
op	29:42	0:0	6	.
water	29:43	0:0	6	rows
arg	30:22	30:69	5	bitmap.pixel_mode==FT_PIXEL_MODE_MONO?0:3
water	30:22	0:0	6	bitmap
op	30:28	0:0	6	.
water	30:29	0:0	6	pixel_mode
op	30:40	0:0	6	==
water	30:43	0:0	6	FT_PIXEL_MODE_MONO
water	30:62	0:0	6	?
water	30:64	0:0	6	0
water	30:66	0:0	6	:
water	30:68	0:0	6	3
arg	31:22	31:23	5	0
water	31:22	0:0	6	0
arg	31:25	31:27	5	x1
water	31:25	0:0	6	x1
arg	31:29	31:31	5	y1
water	31:29	0:0	6	y1
water	31:32	0:0	4	;
water	32:4	0:0	4	}
return	33:4	33:12	2	0
water	33:11	0:0	3	0
