func	1:0	82:0	0	static void	set_processing_window
params	1:33	0:0	1	
param	1:34	1:58	2	enum diff_mode	diff_mode
param	2:34	2:56	2	const AVFrame *	prv_src
param	2:58	2:80	2	const AVFrame *	cur_src
param	3:34	3:56	2	const AVFrame *	prv_dst
param	3:64	3:80	2	AVFrame *	cur_dst
param	4:34	4:41	2	int *	xp
param	4:43	4:50	2	int *	yp
param	4:52	4:59	2	int *	wp
param	4:61	4:68	2	int *	hp
stmnts	0:0	81:16	1	
decl	6:4	6:32	2	int	x_start
op	6:16	0:0	2	=
water	6:18	0:0	2	0
water	6:19	0:0	2	,
decl	6:4	6:32	2	int	y_start
op	6:29	0:0	2	=
water	6:31	0:0	2	0
decl	7:4	7:31	2	int	width
op	7:15	0:0	2	=
water	7:17	0:0	2	cur_src
op	7:24	0:0	2	->
water	7:26	0:0	2	width
decl	8:4	8:32	2	int	height
op	8:15	0:0	2	=
water	8:17	0:0	2	cur_src
op	8:24	0:0	2	->
water	8:26	0:0	2	height
if	9:4	77:4	2	(prv_src && diff_mode == DIFF_MODE_RECTANGLE)
cond	9:8	9:32	3	prv_src && diff_mode == DIFF_MODE_RECTANGLE
water	9:8	0:0	4	prv_src
op	9:16	0:0	4	&&
water	9:19	0:0	4	diff_mode
op	9:29	0:0	4	==
water	9:32	0:0	4	DIFF_MODE_RECTANGLE
stmts	9:53	77:4	3	
water	9:53	0:0	4	{
decl	10:8	10:13	4	int	y
decl	11:8	12:39	4	int	x_end
op	11:18	0:0	4	=
water	11:20	0:0	4	cur_src
op	11:27	0:0	4	->
water	11:29	0:0	4	width
op	11:36	0:0	4	-
water	11:38	0:0	4	1
water	11:39	0:0	4	,
decl	11:8	12:39	4	int	y_end
op	12:18	0:0	4	=
water	12:20	0:0	4	cur_src
op	12:27	0:0	4	->
water	12:29	0:0	4	height
op	12:36	0:0	4	-
water	12:38	0:0	4	1
decl	13:8	13:69	4	const uint32_t	*prv_srcp
op	13:33	0:0	4	=
water	13:35	0:0	4	(
water	13:36	0:0	4	const
water	13:42	0:0	4	uint32_t
op	13:51	0:0	4	*
water	13:52	0:0	4	)
water	13:53	0:0	4	prv_src
op	13:60	0:0	4	->
water	13:62	0:0	4	data
op	13:66	0:0	4	[
water	13:67	0:0	4	0
op	13:68	0:0	4	]
decl	14:8	14:69	4	const uint32_t	*cur_srcp
op	14:33	0:0	4	=
water	14:35	0:0	4	(
water	14:36	0:0	4	const
water	14:42	0:0	4	uint32_t
op	14:51	0:0	4	*
water	14:52	0:0	4	)
water	14:53	0:0	4	cur_src
op	14:60	0:0	4	->
water	14:62	0:0	4	data
op	14:66	0:0	4	[
water	14:67	0:0	4	0
op	14:68	0:0	4	]
decl	15:8	15:51	4	const uint8_t	*prv_dstp
op	15:33	0:0	4	=
water	15:35	0:0	4	prv_dst
op	15:42	0:0	4	->
water	15:44	0:0	4	data
op	15:48	0:0	4	[
water	15:49	0:0	4	0
op	15:50	0:0	4	]
decl	16:8	16:51	4	uint8_t	*cur_dstp
op	16:33	0:0	4	=
water	16:35	0:0	4	cur_dst
op	16:42	0:0	4	->
water	16:44	0:0	4	data
op	16:48	0:0	4	[
water	16:49	0:0	4	0
op	16:50	0:0	4	]
decl	17:8	17:62	4	const int	prv_src_linesize
op	17:35	0:0	4	=
water	17:37	0:0	4	prv_src
op	17:44	0:0	4	->
water	17:46	0:0	4	linesize
op	17:54	0:0	4	[
water	17:55	0:0	4	0
op	17:56	0:0	4	]
op	17:58	0:0	4	>>
water	17:61	0:0	4	2
decl	18:8	18:62	4	const int	cur_src_linesize
op	18:35	0:0	4	=
water	18:37	0:0	4	cur_src
op	18:44	0:0	4	->
water	18:46	0:0	4	linesize
op	18:54	0:0	4	[
water	18:55	0:0	4	0
op	18:56	0:0	4	]
op	18:58	0:0	4	>>
water	18:61	0:0	4	2
decl	19:8	19:57	4	const int	prv_dst_linesize
op	19:35	0:0	4	=
water	19:37	0:0	4	prv_dst
op	19:44	0:0	4	->
water	19:46	0:0	4	linesize
op	19:54	0:0	4	[
water	19:55	0:0	4	0
op	19:56	0:0	4	]
decl	20:8	20:57	4	const int	cur_dst_linesize
op	20:35	0:0	4	=
water	20:37	0:0	4	cur_dst
op	20:44	0:0	4	->
water	20:46	0:0	4	linesize
op	20:54	0:0	4	[
water	20:55	0:0	4	0
op	20:56	0:0	4	]
while	22:8	29:8	4	(y_start < y_end && !memcmp (prv_srcp + y_start * prv_src_linesize ,cur_srcp + y_start * cur_src_linesize ,cur_src -> width * 4 ))
cond	22:15	24:60	5	y_start < y_end && !memcmp (prv_srcp + y_start * prv_src_linesize ,cur_srcp + y_start * cur_src_linesize ,cur_src -> width * 4 )
water	22:15	0:0	6	y_start
op	22:23	0:0	6	<
water	22:25	0:0	6	y_end
op	22:31	0:0	6	&&
op	22:34	0:0	6	!
call	22:35	24:60	6	memcmp
arg	22:42	22:77	7	prv_srcp+y_start*prv_src_linesize
water	22:42	0:0	8	prv_srcp
op	22:51	0:0	8	+
water	22:53	0:0	8	y_start
op	22:60	0:0	8	*
water	22:61	0:0	8	prv_src_linesize
arg	23:42	23:77	7	cur_srcp+y_start*cur_src_linesize
water	23:42	0:0	8	cur_srcp
op	23:51	0:0	8	+
water	23:53	0:0	8	y_start
op	23:60	0:0	8	*
water	23:61	0:0	8	cur_src_linesize
arg	24:42	24:60	7	cur_src->width*4
water	24:42	0:0	8	cur_src
op	24:49	0:0	8	->
water	24:51	0:0	8	width
op	24:57	0:0	8	*
water	24:59	0:0	8	4
stmts	24:63	29:8	5	
water	24:63	0:0	6	{
call	25:12	27:33	6	memcpy
arg	25:19	25:54	7	cur_dstp+y_start*cur_dst_linesize
water	25:19	0:0	8	cur_dstp
op	25:28	0:0	8	+
water	25:30	0:0	8	y_start
op	25:37	0:0	8	*
water	25:38	0:0	8	cur_dst_linesize
arg	26:19	26:54	7	prv_dstp+y_start*prv_dst_linesize
water	26:19	0:0	8	prv_dstp
op	26:28	0:0	8	+
water	26:30	0:0	8	y_start
op	26:37	0:0	8	*
water	26:38	0:0	8	prv_dst_linesize
arg	27:19	27:33	7	cur_dst->width
water	27:19	0:0	8	cur_dst
op	27:26	0:0	8	->
water	27:28	0:0	8	width
water	27:34	0:0	6	;
water	28:12	0:0	6	y_start
op	28:19	0:0	6	++
water	28:21	0:0	6	;
water	29:8	0:0	6	}
while	30:8	37:8	4	(y_end > y_start && !memcmp (prv_srcp + y_end * prv_src_linesize ,cur_srcp + y_end * cur_src_linesize ,cur_src -> width * 4 ))
cond	30:15	32:60	5	y_end > y_start && !memcmp (prv_srcp + y_end * prv_src_linesize ,cur_srcp + y_end * cur_src_linesize ,cur_src -> width * 4 )
water	30:15	0:0	6	y_end
op	30:21	0:0	6	>
water	30:23	0:0	6	y_start
op	30:31	0:0	6	&&
op	30:34	0:0	6	!
call	30:35	32:60	6	memcmp
arg	30:42	30:75	7	prv_srcp+y_end*prv_src_linesize
water	30:42	0:0	8	prv_srcp
op	30:51	0:0	8	+
water	30:53	0:0	8	y_end
op	30:58	0:0	8	*
water	30:59	0:0	8	prv_src_linesize
arg	31:42	31:75	7	cur_srcp+y_end*cur_src_linesize
water	31:42	0:0	8	cur_srcp
op	31:51	0:0	8	+
water	31:53	0:0	8	y_end
op	31:58	0:0	8	*
water	31:59	0:0	8	cur_src_linesize
arg	32:42	32:60	7	cur_src->width*4
water	32:42	0:0	8	cur_src
op	32:49	0:0	8	->
water	32:51	0:0	8	width
op	32:57	0:0	8	*
water	32:59	0:0	8	4
stmts	32:63	37:8	5	
water	32:63	0:0	6	{
call	33:12	35:33	6	memcpy
arg	33:19	33:52	7	cur_dstp+y_end*cur_dst_linesize
water	33:19	0:0	8	cur_dstp
op	33:28	0:0	8	+
water	33:30	0:0	8	y_end
op	33:35	0:0	8	*
water	33:36	0:0	8	cur_dst_linesize
arg	34:19	34:52	7	prv_dstp+y_end*prv_dst_linesize
water	34:19	0:0	8	prv_dstp
op	34:28	0:0	8	+
water	34:30	0:0	8	y_end
op	34:35	0:0	8	*
water	34:36	0:0	8	prv_dst_linesize
arg	35:19	35:33	7	cur_dst->width
water	35:19	0:0	8	cur_dst
op	35:26	0:0	8	->
water	35:28	0:0	8	width
water	35:34	0:0	6	;
water	36:12	0:0	6	y_end
op	36:17	0:0	6	--
water	36:19	0:0	6	;
water	37:8	0:0	6	}
water	38:8	0:0	4	height
op	38:15	0:0	4	=
water	38:17	0:0	4	y_end
op	38:23	0:0	4	+
water	38:25	0:0	4	1
op	38:27	0:0	4	-
water	38:29	0:0	4	y_start
water	38:36	0:0	4	;
while	40:8	51:8	4	(x_start < x_end)
cond	40:15	40:25	5	x_start < x_end
water	40:15	0:0	6	x_start
op	40:23	0:0	6	<
water	40:25	0:0	6	x_end
stmts	40:32	51:8	5	
water	40:32	0:0	6	{
decl	41:12	41:31	6	int	same_column
op	41:28	0:0	6	=
water	41:30	0:0	6	1
for	42:12	47:12	6	(y = y_start ;y <= y_end;y ++)
forinit	42:17	42:28	7	y = y_start ;
water	42:17	0:0	8	y
op	42:19	0:0	8	=
water	42:21	0:0	8	y_start
water	42:28	0:0	8	;
cond	42:30	42:35	7	y <= y_end
water	42:30	0:0	8	y
op	42:32	0:0	8	<=
water	42:35	0:0	8	y_end
forexpr	42:42	42:43	7	y ++
water	42:42	0:0	8	y
op	42:43	0:0	8	++
stmts	42:47	47:12	7	
water	42:47	0:0	8	{
if	43:16	46:16	8	(prv_srcp [ y * prv_src_linesize + x_start ] != cur_srcp [ y * cur_src_linesize + x_start ])
cond	43:20	43:99	9	prv_srcp [ y * prv_src_linesize + x_start ] != cur_srcp [ y * cur_src_linesize + x_start ]
water	43:20	0:0	10	prv_srcp
op	43:28	0:0	10	[
water	43:29	0:0	10	y
op	43:30	0:0	10	*
water	43:31	0:0	10	prv_src_linesize
op	43:48	0:0	10	+
water	43:50	0:0	10	x_start
op	43:57	0:0	10	]
op	43:59	0:0	10	!=
water	43:62	0:0	10	cur_srcp
op	43:70	0:0	10	[
water	43:71	0:0	10	y
op	43:72	0:0	10	*
water	43:73	0:0	10	cur_src_linesize
op	43:90	0:0	10	+
water	43:92	0:0	10	x_start
op	43:99	0:0	10	]
stmts	43:102	46:16	9	
water	43:102	0:0	10	{
water	44:20	0:0	10	same_column
op	44:32	0:0	10	=
water	44:34	0:0	10	0
water	44:35	0:0	10	;
break	45:20	45:25	10	
water	46:16	0:0	10	}
water	47:12	0:0	8	}
if	48:12	49:21	6	(! same_column)
cond	48:16	48:17	7	! same_column
op	48:16	0:0	8	!
water	48:17	0:0	8	same_column
stmts	49:16	49:21	7	
break	49:16	49:21	8	
water	50:12	0:0	6	x_start
op	50:19	0:0	6	++
water	50:21	0:0	6	;
water	51:8	0:0	6	}
while	52:8	63:8	4	(x_end > x_start)
cond	52:15	52:23	5	x_end > x_start
water	52:15	0:0	6	x_end
op	52:21	0:0	6	>
water	52:23	0:0	6	x_start
stmts	52:32	63:8	5	
water	52:32	0:0	6	{
decl	53:12	53:31	6	int	same_column
op	53:28	0:0	6	=
water	53:30	0:0	6	1
for	54:12	59:12	6	(y = y_start ;y <= y_end;y ++)
forinit	54:17	54:28	7	y = y_start ;
water	54:17	0:0	8	y
op	54:19	0:0	8	=
water	54:21	0:0	8	y_start
water	54:28	0:0	8	;
cond	54:30	54:35	7	y <= y_end
water	54:30	0:0	8	y
op	54:32	0:0	8	<=
water	54:35	0:0	8	y_end
forexpr	54:42	54:43	7	y ++
water	54:42	0:0	8	y
op	54:43	0:0	8	++
stmts	54:47	59:12	7	
water	54:47	0:0	8	{
if	55:16	58:16	8	(prv_srcp [ y * prv_src_linesize + x_end ] != cur_srcp [ y * cur_src_linesize + x_end ])
cond	55:20	55:95	9	prv_srcp [ y * prv_src_linesize + x_end ] != cur_srcp [ y * cur_src_linesize + x_end ]
water	55:20	0:0	10	prv_srcp
op	55:28	0:0	10	[
water	55:29	0:0	10	y
op	55:30	0:0	10	*
water	55:31	0:0	10	prv_src_linesize
op	55:48	0:0	10	+
water	55:50	0:0	10	x_end
op	55:55	0:0	10	]
op	55:57	0:0	10	!=
water	55:60	0:0	10	cur_srcp
op	55:68	0:0	10	[
water	55:69	0:0	10	y
op	55:70	0:0	10	*
water	55:71	0:0	10	cur_src_linesize
op	55:88	0:0	10	+
water	55:90	0:0	10	x_end
op	55:95	0:0	10	]
stmts	55:98	58:16	9	
water	55:98	0:0	10	{
water	56:20	0:0	10	same_column
op	56:32	0:0	10	=
water	56:34	0:0	10	0
water	56:35	0:0	10	;
break	57:20	57:25	10	
water	58:16	0:0	10	}
water	59:12	0:0	8	}
if	60:12	61:21	6	(! same_column)
cond	60:16	60:17	7	! same_column
op	60:16	0:0	8	!
water	60:17	0:0	8	same_column
stmts	61:16	61:21	7	
break	61:16	61:21	8	
water	62:12	0:0	6	x_end
op	62:17	0:0	6	--
water	62:19	0:0	6	;
water	63:8	0:0	6	}
water	64:8	0:0	4	width
op	64:14	0:0	4	=
water	64:16	0:0	4	x_end
op	64:22	0:0	4	+
water	64:24	0:0	4	1
op	64:26	0:0	4	-
water	64:28	0:0	4	x_start
water	64:35	0:0	4	;
if	65:8	69:8	4	(x_start)
cond	65:12	65:12	5	x_start
water	65:12	0:0	6	x_start
stmts	65:21	69:8	5	
water	65:21	0:0	6	{
for	66:12	68:62	6	(y = y_start ;y <= y_end;y ++)
forinit	66:17	66:28	7	y = y_start ;
water	66:17	0:0	8	y
op	66:19	0:0	8	=
water	66:21	0:0	8	y_start
water	66:28	0:0	8	;
cond	66:30	66:35	7	y <= y_end
water	66:30	0:0	8	y
op	66:32	0:0	8	<=
water	66:35	0:0	8	y_end
forexpr	66:42	66:43	7	y ++
water	66:42	0:0	8	y
op	66:43	0:0	8	++
stmts	67:16	68:62	7	
call	67:16	68:61	8	memcpy
arg	67:23	67:52	9	cur_dstp+y*cur_dst_linesize
water	67:23	0:0	10	cur_dstp
op	67:32	0:0	10	+
water	67:34	0:0	10	y
op	67:35	0:0	10	*
water	67:36	0:0	10	cur_dst_linesize
arg	68:23	68:52	9	prv_dstp+y*prv_dst_linesize
water	68:23	0:0	10	prv_dstp
op	68:32	0:0	10	+
water	68:34	0:0	10	y
op	68:35	0:0	10	*
water	68:36	0:0	10	prv_dst_linesize
arg	68:54	68:61	9	x_start
water	68:54	0:0	10	x_start
water	68:62	0:0	8	;
water	69:8	0:0	6	}
if	70:8	76:8	4	(x_end != cur_src -> width - 1)
cond	70:12	70:38	5	x_end != cur_src -> width - 1
water	70:12	0:0	6	x_end
op	70:18	0:0	6	!=
water	70:21	0:0	6	cur_src
op	70:28	0:0	6	->
water	70:30	0:0	6	width
op	70:36	0:0	6	-
water	70:38	0:0	6	1
stmts	70:41	76:8	5	
water	70:41	0:0	6	{
decl	71:12	71:59	6	const int	copy_len
op	71:31	0:0	6	=
water	71:33	0:0	6	cur_src
op	71:40	0:0	6	->
water	71:42	0:0	6	width
op	71:48	0:0	6	-
water	71:50	0:0	6	1
op	71:52	0:0	6	-
water	71:54	0:0	6	x_end
for	72:12	75:32	6	(y = y_start ;y <= y_end;y ++)
forinit	72:17	72:28	7	y = y_start ;
water	72:17	0:0	8	y
op	72:19	0:0	8	=
water	72:21	0:0	8	y_start
water	72:28	0:0	8	;
cond	72:30	72:35	7	y <= y_end
water	72:30	0:0	8	y
op	72:32	0:0	8	<=
water	72:35	0:0	8	y_end
forexpr	72:42	72:43	7	y ++
water	72:42	0:0	8	y
op	72:43	0:0	8	++
stmts	73:16	75:32	7	
call	73:16	75:31	8	memcpy
arg	73:23	73:64	9	cur_dstp+y*cur_dst_linesize+x_end+1
water	73:23	0:0	10	cur_dstp
op	73:32	0:0	10	+
water	73:34	0:0	10	y
op	73:35	0:0	10	*
water	73:36	0:0	10	cur_dst_linesize
op	73:53	0:0	10	+
water	73:55	0:0	10	x_end
op	73:61	0:0	10	+
water	73:63	0:0	10	1
arg	74:23	74:64	9	prv_dstp+y*prv_dst_linesize+x_end+1
water	74:23	0:0	10	prv_dstp
op	74:32	0:0	10	+
water	74:34	0:0	10	y
op	74:35	0:0	10	*
water	74:36	0:0	10	prv_dst_linesize
op	74:53	0:0	10	+
water	74:55	0:0	10	x_end
op	74:61	0:0	10	+
water	74:63	0:0	10	1
arg	75:23	75:31	9	copy_len
water	75:23	0:0	10	copy_len
water	75:32	0:0	8	;
water	76:8	0:0	6	}
water	77:4	0:0	4	}
op	78:4	0:0	2	*
water	78:5	0:0	2	xp
op	78:8	0:0	2	=
water	78:10	0:0	2	x_start
water	78:17	0:0	2	;
op	79:4	0:0	2	*
water	79:5	0:0	2	yp
op	79:8	0:0	2	=
water	79:10	0:0	2	y_start
water	79:17	0:0	2	;
op	80:4	0:0	2	*
water	80:5	0:0	2	wp
op	80:8	0:0	2	=
water	80:10	0:0	2	width
water	80:15	0:0	2	;
op	81:4	0:0	2	*
water	81:5	0:0	2	hp
op	81:8	0:0	2	=
water	81:10	0:0	2	height
water	81:16	0:0	2	;
