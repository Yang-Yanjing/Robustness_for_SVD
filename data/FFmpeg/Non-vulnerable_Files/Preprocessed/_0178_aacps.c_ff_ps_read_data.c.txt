func	1:4	138:0	0	AAC_RENAME	(ff_ps_read_data)
params	1:31	0:0	1	
param	1:32	1:53	2	AVCodecContext *	avctx
param	1:55	1:77	2	GetBitContext *	gb_host
param	1:79	1:92	2	PSContext *	ps
param	1:94	1:107	2	int	bits_left
stmnts	0:0	137:20	1	
decl	3:4	3:9	2	int	e
decl	4:4	4:49	2	int	bit_count_start
op	4:24	0:0	2	=
call	4:26	4:48	3	get_bits_count
arg	4:41	4:48	4	gb_host
water	4:41	0:0	5	gb_host
decl	5:4	5:14	2	int	header
decl	6:4	6:21	2	int	bits_consumed
decl	7:4	7:44	2	GetBitContext	gbc
op	7:22	0:0	2	=
op	7:24	0:0	2	*
water	7:25	0:0	2	gb_host
water	7:32	0:0	2	,
decl	7:4	7:44	2	GetBitContext	*gb
op	7:38	0:0	2	=
op	7:40	0:0	2	&
water	7:41	0:0	2	gbc
water	8:4	0:0	2	header
op	8:11	0:0	2	=
call	8:13	8:25	2	get_bits1
arg	8:23	8:25	3	gb
water	8:23	0:0	4	gb
water	8:26	0:0	2	;
if	9:4	33:4	2	(header)
cond	9:8	9:8	3	header
water	9:8	0:0	4	header
stmts	9:16	33:4	3	
water	9:16	0:0	4	{
water	10:8	0:0	4	ps
op	10:10	0:0	4	->
water	10:12	0:0	4	enable_iid
op	10:23	0:0	4	=
call	10:25	10:37	4	get_bits1
arg	10:35	10:37	5	gb
water	10:35	0:0	6	gb
water	10:38	0:0	4	;
if	11:8	21:8	4	(ps -> enable_iid)
cond	11:12	11:16	5	ps -> enable_iid
water	11:12	0:0	6	ps
op	11:14	0:0	6	->
water	11:16	0:0	6	enable_iid
stmts	11:28	21:8	5	
water	11:28	0:0	6	{
decl	12:12	12:42	6	int	iid_mode
op	12:25	0:0	6	=
call	12:27	12:41	7	get_bits
arg	12:36	12:38	8	gb
water	12:36	0:0	9	gb
arg	12:40	12:41	8	3
water	12:40	0:0	9	3
if	13:12	17:12	6	(iid_mode > 5)
cond	13:16	13:27	7	iid_mode > 5
water	13:16	0:0	8	iid_mode
op	13:25	0:0	8	>
water	13:27	0:0	8	5
stmts	13:30	17:12	7	
water	13:30	0:0	8	{
call	14:16	15:31	8	av_log
arg	14:23	14:28	9	avctx
water	14:23	0:0	10	avctx
arg	14:30	14:42	9	AV_LOG_ERROR
water	14:30	0:0	10	AV_LOG_ERROR
arg	14:44	14:72	9	"iid_mode %d is reserved.\n"
water	14:44	0:0	10	"iid_mode %d is reserved.\n"
arg	15:23	15:31	9	iid_mode
water	15:23	0:0	10	iid_mode
water	15:32	0:0	8	;
goto	16:16	16:24	8	err
water	16:21	0:0	9	err
water	17:12	0:0	8	}
water	18:12	0:0	6	ps
op	18:14	0:0	6	->
water	18:16	0:0	6	nr_iid_par
op	18:30	0:0	6	=
water	18:32	0:0	6	nr_iidicc_par_tab
op	18:49	0:0	6	[
water	18:50	0:0	6	iid_mode
op	18:58	0:0	6	]
water	18:59	0:0	6	;
water	19:12	0:0	6	ps
op	19:14	0:0	6	->
water	19:16	0:0	6	iid_quant
op	19:30	0:0	6	=
water	19:32	0:0	6	iid_mode
op	19:41	0:0	6	>
water	19:43	0:0	6	2
water	19:44	0:0	6	;
water	20:12	0:0	6	ps
op	20:14	0:0	6	->
water	20:16	0:0	6	nr_ipdopd_par
op	20:30	0:0	6	=
water	20:32	0:0	6	nr_iidopd_par_tab
op	20:49	0:0	6	[
water	20:50	0:0	6	iid_mode
op	20:58	0:0	6	]
water	20:59	0:0	6	;
water	21:8	0:0	6	}
water	22:8	0:0	4	ps
op	22:10	0:0	4	->
water	22:12	0:0	4	enable_icc
op	22:23	0:0	4	=
call	22:25	22:37	4	get_bits1
arg	22:35	22:37	5	gb
water	22:35	0:0	6	gb
water	22:38	0:0	4	;
if	23:8	31:8	4	(ps -> enable_icc)
cond	23:12	23:16	5	ps -> enable_icc
water	23:12	0:0	6	ps
op	23:14	0:0	6	->
water	23:16	0:0	6	enable_icc
stmts	23:28	31:8	5	
water	23:28	0:0	6	{
water	24:12	0:0	6	ps
op	24:14	0:0	6	->
water	24:16	0:0	6	icc_mode
op	24:25	0:0	6	=
call	24:27	24:41	6	get_bits
arg	24:36	24:38	7	gb
water	24:36	0:0	8	gb
arg	24:40	24:41	7	3
water	24:40	0:0	8	3
water	24:42	0:0	6	;
if	25:12	29:12	6	(ps -> icc_mode > 5)
cond	25:16	25:31	7	ps -> icc_mode > 5
water	25:16	0:0	8	ps
op	25:18	0:0	8	->
water	25:20	0:0	8	icc_mode
op	25:29	0:0	8	>
water	25:31	0:0	8	5
stmts	25:34	29:12	7	
water	25:34	0:0	8	{
call	26:16	27:35	8	av_log
arg	26:23	26:28	9	avctx
water	26:23	0:0	10	avctx
arg	26:30	26:42	9	AV_LOG_ERROR
water	26:30	0:0	10	AV_LOG_ERROR
arg	26:44	26:72	9	"icc_mode %d is reserved.\n"
water	26:44	0:0	10	"icc_mode %d is reserved.\n"
arg	27:23	27:35	9	ps->icc_mode
water	27:23	0:0	10	ps
op	27:25	0:0	10	->
water	27:27	0:0	10	icc_mode
water	27:36	0:0	8	;
goto	28:16	28:24	8	err
water	28:21	0:0	9	err
water	29:12	0:0	8	}
water	30:12	0:0	6	ps
op	30:14	0:0	6	->
water	30:16	0:0	6	nr_icc_par
op	30:27	0:0	6	=
water	30:29	0:0	6	nr_iidicc_par_tab
op	30:46	0:0	6	[
water	30:47	0:0	6	ps
op	30:49	0:0	6	->
water	30:51	0:0	6	icc_mode
op	30:59	0:0	6	]
water	30:60	0:0	6	;
water	31:8	0:0	6	}
water	32:8	0:0	4	ps
op	32:10	0:0	4	->
water	32:12	0:0	4	enable_ext
op	32:23	0:0	4	=
call	32:25	32:37	4	get_bits1
arg	32:35	32:37	5	gb
water	32:35	0:0	6	gb
water	32:38	0:0	4	;
water	33:4	0:0	4	}
water	34:4	0:0	2	ps
op	34:6	0:0	2	->
water	34:8	0:0	2	frame_class
op	34:20	0:0	2	=
call	34:22	34:34	2	get_bits1
arg	34:32	34:34	3	gb
water	34:32	0:0	4	gb
water	34:35	0:0	2	;
water	35:4	0:0	2	ps
op	35:6	0:0	2	->
water	35:8	0:0	2	num_env_old
op	35:20	0:0	2	=
water	35:22	0:0	2	ps
op	35:24	0:0	2	->
water	35:26	0:0	2	num_env
water	35:33	0:0	2	;
water	36:4	0:0	2	ps
op	36:6	0:0	2	->
water	36:8	0:0	2	num_env
op	36:20	0:0	2	=
water	36:22	0:0	2	num_env_tab
op	36:33	0:0	2	[
water	36:34	0:0	2	ps
op	36:36	0:0	2	->
water	36:38	0:0	2	frame_class
op	36:49	0:0	2	]
op	36:50	0:0	2	[
call	36:51	36:65	2	get_bits
arg	36:60	36:62	3	gb
water	36:60	0:0	4	gb
arg	36:64	36:65	3	2
water	36:64	0:0	4	2
op	36:66	0:0	2	]
water	36:67	0:0	2	;
water	37:4	0:0	2	ps
op	37:6	0:0	2	->
water	37:8	0:0	2	border_position
op	37:23	0:0	2	[
water	37:24	0:0	2	0
op	37:25	0:0	2	]
op	37:27	0:0	2	=
op	37:29	0:0	2	-
water	37:30	0:0	2	1
water	37:31	0:0	2	;
if	38:4	41:4	2	(ps -> frame_class)
cond	38:8	38:12	3	ps -> frame_class
water	38:8	0:0	4	ps
op	38:10	0:0	4	->
water	38:12	0:0	4	frame_class
stmts	38:25	41:4	3	
water	38:25	0:0	4	{
for	39:8	40:52	4	(e = 1 ;e <= ps -> num_env;e ++)
forinit	39:13	39:18	5	e = 1 ;
water	39:13	0:0	6	e
op	39:15	0:0	6	=
water	39:17	0:0	6	1
water	39:18	0:0	6	;
cond	39:20	39:29	5	e <= ps -> num_env
water	39:20	0:0	6	e
op	39:22	0:0	6	<=
water	39:25	0:0	6	ps
op	39:27	0:0	6	->
water	39:29	0:0	6	num_env
forexpr	39:38	39:39	5	e ++
water	39:38	0:0	6	e
op	39:39	0:0	6	++
stmts	40:12	40:52	5	
water	40:12	0:0	6	ps
op	40:14	0:0	6	->
water	40:16	0:0	6	border_position
op	40:31	0:0	6	[
water	40:32	0:0	6	e
op	40:33	0:0	6	]
op	40:35	0:0	6	=
call	40:37	40:51	6	get_bits
arg	40:46	40:48	7	gb
water	40:46	0:0	8	gb
arg	40:50	40:51	7	5
water	40:50	0:0	8	5
water	40:52	0:0	6	;
water	41:4	0:0	4	}
else	41:6	43:86	2
stmts	42:8	43:86	3	
for	42:8	43:86	4	(e = 1 ;e <= ps -> num_env;e ++)
forinit	42:13	42:18	5	e = 1 ;
water	42:13	0:0	6	e
op	42:15	0:0	6	=
water	42:17	0:0	6	1
water	42:18	0:0	6	;
cond	42:20	42:29	5	e <= ps -> num_env
water	42:20	0:0	6	e
op	42:22	0:0	6	<=
water	42:25	0:0	6	ps
op	42:27	0:0	6	->
water	42:29	0:0	6	num_env
forexpr	42:38	42:39	5	e ++
water	42:38	0:0	6	e
op	42:39	0:0	6	++
stmts	43:12	43:86	5	
water	43:12	0:0	6	ps
op	43:14	0:0	6	->
water	43:16	0:0	6	border_position
op	43:31	0:0	6	[
water	43:32	0:0	6	e
op	43:33	0:0	6	]
op	43:35	0:0	6	=
water	43:37	0:0	6	(
water	43:38	0:0	6	e
op	43:40	0:0	6	*
water	43:42	0:0	6	numQMFSlots
op	43:54	0:0	6	>>
water	43:57	0:0	6	ff_log2_tab
op	43:68	0:0	6	[
water	43:69	0:0	6	ps
op	43:71	0:0	6	->
water	43:73	0:0	6	num_env
op	43:80	0:0	6	]
water	43:81	0:0	6	)
op	43:83	0:0	6	-
water	43:85	0:0	6	1
water	43:86	0:0	6	;
if	44:4	50:4	2	(ps -> enable_iid)
cond	44:8	44:12	3	ps -> enable_iid
water	44:8	0:0	4	ps
op	44:10	0:0	4	->
water	44:12	0:0	4	enable_iid
stmts	44:24	50:4	3	
water	44:24	0:0	4	{
for	45:8	49:8	4	(e = 0 ;e < ps -> num_env;e ++)
forinit	45:13	45:18	5	e = 0 ;
water	45:13	0:0	6	e
op	45:15	0:0	6	=
water	45:17	0:0	6	0
water	45:18	0:0	6	;
cond	45:20	45:28	5	e < ps -> num_env
water	45:20	0:0	6	e
op	45:22	0:0	6	<
water	45:24	0:0	6	ps
op	45:26	0:0	6	->
water	45:28	0:0	6	num_env
forexpr	45:37	45:38	5	e ++
water	45:37	0:0	6	e
op	45:38	0:0	6	++
stmts	45:42	49:8	5	
water	45:42	0:0	6	{
decl	46:12	46:34	6	int	dt
op	46:19	0:0	6	=
call	46:21	46:33	7	get_bits1
arg	46:31	46:33	8	gb
water	46:31	0:0	9	gb
if	47:12	48:24	6	(read_iid_data (avctx ,gb ,ps ,ps -> iid_par ,huff_iid [ 2 * dt + ps -> iid_quant ] ,e ,dt ))
cond	47:16	47:93	7	read_iid_data (avctx ,gb ,ps ,ps -> iid_par ,huff_iid [ 2 * dt + ps -> iid_quant ] ,e ,dt )
call	47:16	47:93	8	read_iid_data
arg	47:30	47:35	9	avctx
water	47:30	0:0	10	avctx
arg	47:37	47:39	9	gb
water	47:37	0:0	10	gb
arg	47:41	47:43	9	ps
water	47:41	0:0	10	ps
arg	47:45	47:56	9	ps->iid_par
water	47:45	0:0	10	ps
op	47:47	0:0	10	->
water	47:49	0:0	10	iid_par
arg	47:58	47:86	9	huff_iid[2*dt+ps->iid_quant]
water	47:58	0:0	10	huff_iid
op	47:66	0:0	10	[
water	47:67	0:0	10	2
op	47:68	0:0	10	*
water	47:69	0:0	10	dt
op	47:71	0:0	10	+
water	47:72	0:0	10	ps
op	47:74	0:0	10	->
water	47:76	0:0	10	iid_quant
op	47:85	0:0	10	]
arg	47:88	47:89	9	e
water	47:88	0:0	10	e
arg	47:91	47:93	9	dt
water	47:91	0:0	10	dt
stmts	48:16	48:24	7	
goto	48:16	48:24	8	err
water	48:21	0:0	9	err
water	49:8	0:0	6	}
water	50:4	0:0	4	}
else	50:6	51:51	2
stmts	51:8	51:51	3	
call	51:8	51:50	4	memset
arg	51:15	51:26	5	ps->iid_par
water	51:15	0:0	6	ps
op	51:17	0:0	6	->
water	51:19	0:0	6	iid_par
arg	51:28	51:29	5	0
water	51:28	0:0	6	0
arg	51:31	51:50	5	sizeof(ps->iid_par)
op	51:31	0:0	6	sizeof
water	51:37	0:0	6	(
water	51:38	0:0	6	ps
op	51:40	0:0	6	->
water	51:42	0:0	6	iid_par
water	51:49	0:0	6	)
water	51:51	0:0	4	;
if	52:4	57:8	2	(ps -> enable_icc)
cond	52:8	52:12	3	ps -> enable_icc
water	52:8	0:0	4	ps
op	52:10	0:0	4	->
water	52:12	0:0	4	enable_icc
stmts	53:8	57:8	3	
for	53:8	57:8	4	(e = 0 ;e < ps -> num_env;e ++)
forinit	53:13	53:18	5	e = 0 ;
water	53:13	0:0	6	e
op	53:15	0:0	6	=
water	53:17	0:0	6	0
water	53:18	0:0	6	;
cond	53:20	53:28	5	e < ps -> num_env
water	53:20	0:0	6	e
op	53:22	0:0	6	<
water	53:24	0:0	6	ps
op	53:26	0:0	6	->
water	53:28	0:0	6	num_env
forexpr	53:37	53:38	5	e ++
water	53:37	0:0	6	e
op	53:38	0:0	6	++
stmts	53:42	57:8	5	
water	53:42	0:0	6	{
decl	54:12	54:34	6	int	dt
op	54:19	0:0	6	=
call	54:21	54:33	7	get_bits1
arg	54:31	54:33	8	gb
water	54:31	0:0	9	gb
if	55:12	56:24	6	(read_icc_data (avctx ,gb ,ps ,ps -> icc_par ,dt ? huff_icc_dt : huff_icc_df ,e ,dt ))
cond	55:16	55:95	7	read_icc_data (avctx ,gb ,ps ,ps -> icc_par ,dt ? huff_icc_dt : huff_icc_df ,e ,dt )
call	55:16	55:95	8	read_icc_data
arg	55:30	55:35	9	avctx
water	55:30	0:0	10	avctx
arg	55:37	55:39	9	gb
water	55:37	0:0	10	gb
arg	55:41	55:43	9	ps
water	55:41	0:0	10	ps
arg	55:45	55:56	9	ps->icc_par
water	55:45	0:0	10	ps
op	55:47	0:0	10	->
water	55:49	0:0	10	icc_par
arg	55:58	55:88	9	dt?huff_icc_dt:huff_icc_df
water	55:58	0:0	10	dt
water	55:61	0:0	10	?
water	55:63	0:0	10	huff_icc_dt
water	55:75	0:0	10	:
water	55:77	0:0	10	huff_icc_df
arg	55:90	55:91	9	e
water	55:90	0:0	10	e
arg	55:93	55:95	9	dt
water	55:93	0:0	10	dt
stmts	56:16	56:24	7	
goto	56:16	56:24	8	err
water	56:21	0:0	9	err
water	57:8	0:0	6	}
else	58:4	59:51	2
stmts	59:8	59:51	3	
call	59:8	59:50	4	memset
arg	59:15	59:26	5	ps->icc_par
water	59:15	0:0	6	ps
op	59:17	0:0	6	->
water	59:19	0:0	6	icc_par
arg	59:28	59:29	5	0
water	59:28	0:0	6	0
arg	59:31	59:50	5	sizeof(ps->icc_par)
op	59:31	0:0	6	sizeof
water	59:37	0:0	6	(
water	59:38	0:0	6	ps
op	59:40	0:0	6	->
water	59:42	0:0	6	icc_par
water	59:49	0:0	6	)
water	59:51	0:0	4	;
if	60:4	75:4	2	(ps -> enable_ext)
cond	60:8	60:12	3	ps -> enable_ext
water	60:8	0:0	4	ps
op	60:10	0:0	4	->
water	60:12	0:0	4	enable_ext
stmts	60:24	75:4	3	
water	60:24	0:0	4	{
decl	61:8	61:33	4	int	cnt
op	61:16	0:0	4	=
call	61:18	61:32	5	get_bits
arg	61:27	61:29	6	gb
water	61:27	0:0	7	gb
arg	61:31	61:32	6	4
water	61:31	0:0	7	4
if	62:8	64:8	4	(cnt == 15)
cond	62:12	62:19	5	cnt == 15
water	62:12	0:0	6	cnt
op	62:16	0:0	6	==
water	62:19	0:0	6	15
stmts	62:23	64:8	5	
water	62:23	0:0	6	{
water	63:12	0:0	6	cnt
op	63:16	0:0	6	+=
call	63:19	63:33	6	get_bits
arg	63:28	63:30	7	gb
water	63:28	0:0	8	gb
arg	63:32	63:33	7	8
water	63:32	0:0	8	8
water	63:34	0:0	6	;
water	64:8	0:0	6	}
water	65:8	0:0	4	cnt
op	65:12	0:0	4	*=
water	65:15	0:0	4	8
water	65:16	0:0	4	;
while	66:8	69:8	4	(cnt > 7)
cond	66:15	66:21	5	cnt > 7
water	66:15	0:0	6	cnt
op	66:19	0:0	6	>
water	66:21	0:0	6	7
stmts	66:24	69:8	5	
water	66:24	0:0	6	{
decl	67:12	67:49	6	int	ps_extension_id
op	67:32	0:0	6	=
call	67:34	67:48	7	get_bits
arg	67:43	67:45	8	gb
water	67:43	0:0	9	gb
arg	67:47	67:48	8	2
water	67:47	0:0	9	2
water	68:12	0:0	6	cnt
op	68:16	0:0	6	-=
water	68:19	0:0	6	2
op	68:21	0:0	6	+
call	68:23	68:69	6	ps_read_extension_data
arg	68:46	68:48	7	gb
water	68:46	0:0	8	gb
arg	68:50	68:52	7	ps
water	68:50	0:0	8	ps
arg	68:54	68:69	7	ps_extension_id
water	68:54	0:0	8	ps_extension_id
water	68:70	0:0	6	;
water	69:8	0:0	6	}
if	70:8	73:8	4	(cnt < 0)
cond	70:12	70:18	5	cnt < 0
water	70:12	0:0	6	cnt
op	70:16	0:0	6	<
water	70:18	0:0	6	0
stmts	70:21	73:8	5	
water	70:21	0:0	6	{
call	71:12	71:73	6	av_log
arg	71:19	71:24	7	avctx
water	71:19	0:0	8	avctx
arg	71:26	71:38	7	AV_LOG_ERROR
water	71:26	0:0	8	AV_LOG_ERROR
arg	71:40	71:68	7	"ps extension overflow %d\n"
water	71:40	0:0	8	"ps extension overflow %d\n"
arg	71:70	71:73	7	cnt
water	71:70	0:0	8	cnt
water	71:74	0:0	6	;
goto	72:12	72:20	6	err
water	72:17	0:0	7	err
water	73:8	0:0	6	}
call	74:8	74:25	4	skip_bits
arg	74:18	74:20	5	gb
water	74:18	0:0	6	gb
arg	74:22	74:25	5	cnt
water	74:22	0:0	6	cnt
water	74:26	0:0	4	;
water	75:4	0:0	4	}
water	76:4	0:0	2	ps
op	76:6	0:0	2	->
water	76:8	0:0	2	enable_ipdopd
op	76:22	0:0	2	&=
op	76:25	0:0	2	!
water	76:26	0:0	2	PS_BASELINE
water	76:37	0:0	2	;
if	78:4	112:4	2	(! ps -> num_env || ps -> border_position [ ps -> num_env ] < numQMFSlots - 1)
cond	78:8	78:73	3	! ps -> num_env || ps -> border_position [ ps -> num_env ] < numQMFSlots - 1
op	78:8	0:0	4	!
water	78:9	0:0	4	ps
op	78:11	0:0	4	->
water	78:13	0:0	4	num_env
op	78:21	0:0	4	||
water	78:24	0:0	4	ps
op	78:26	0:0	4	->
water	78:28	0:0	4	border_position
op	78:43	0:0	4	[
water	78:44	0:0	4	ps
op	78:46	0:0	4	->
water	78:48	0:0	4	num_env
op	78:55	0:0	4	]
op	78:57	0:0	4	<
water	78:59	0:0	4	numQMFSlots
op	78:71	0:0	4	-
water	78:73	0:0	4	1
stmts	78:76	112:4	3	
water	78:76	0:0	4	{
decl	80:8	80:72	4	int	source
op	80:19	0:0	4	=
water	80:21	0:0	4	ps
op	80:23	0:0	4	->
water	80:25	0:0	4	num_env
water	80:33	0:0	4	?
water	80:35	0:0	4	ps
op	80:37	0:0	4	->
water	80:39	0:0	4	num_env
op	80:47	0:0	4	-
water	80:49	0:0	4	1
water	80:51	0:0	4	:
water	80:53	0:0	4	ps
op	80:55	0:0	4	->
water	80:57	0:0	4	num_env_old
op	80:69	0:0	4	-
water	80:71	0:0	4	1
decl	81:8	81:13	4	int	b
if	82:8	93:8	4	(source >= 0 && source != ps -> num_env)
cond	82:12	82:41	5	source >= 0 && source != ps -> num_env
water	82:12	0:0	6	source
op	82:19	0:0	6	>=
water	82:22	0:0	6	0
op	82:24	0:0	6	&&
water	82:27	0:0	6	source
op	82:34	0:0	6	!=
water	82:37	0:0	6	ps
op	82:39	0:0	6	->
water	82:41	0:0	6	num_env
stmts	82:50	93:8	5	
water	82:50	0:0	6	{
if	83:12	85:12	6	(ps -> enable_iid)
cond	83:16	83:20	7	ps -> enable_iid
water	83:16	0:0	8	ps
op	83:18	0:0	8	->
water	83:20	0:0	8	enable_iid
stmts	83:32	85:12	7	
water	83:32	0:0	8	{
call	84:16	84:90	8	memcpy
arg	84:23	84:46	9	ps->iid_par+ps->num_env
water	84:23	0:0	10	ps
op	84:25	0:0	10	->
water	84:27	0:0	10	iid_par
op	84:34	0:0	10	+
water	84:35	0:0	10	ps
op	84:37	0:0	10	->
water	84:39	0:0	10	num_env
arg	84:48	84:66	9	ps->iid_par+source
water	84:48	0:0	10	ps
op	84:50	0:0	10	->
water	84:52	0:0	10	iid_par
op	84:59	0:0	10	+
water	84:60	0:0	10	source
arg	84:68	84:90	9	sizeof(ps->iid_par[0])
op	84:68	0:0	10	sizeof
water	84:74	0:0	10	(
water	84:75	0:0	10	ps
op	84:77	0:0	10	->
water	84:79	0:0	10	iid_par
op	84:86	0:0	10	[
water	84:87	0:0	10	0
op	84:88	0:0	10	]
water	84:89	0:0	10	)
water	84:91	0:0	8	;
water	85:12	0:0	8	}
if	86:12	88:12	6	(ps -> enable_icc)
cond	86:16	86:20	7	ps -> enable_icc
water	86:16	0:0	8	ps
op	86:18	0:0	8	->
water	86:20	0:0	8	enable_icc
stmts	86:32	88:12	7	
water	86:32	0:0	8	{
call	87:16	87:90	8	memcpy
arg	87:23	87:46	9	ps->icc_par+ps->num_env
water	87:23	0:0	10	ps
op	87:25	0:0	10	->
water	87:27	0:0	10	icc_par
op	87:34	0:0	10	+
water	87:35	0:0	10	ps
op	87:37	0:0	10	->
water	87:39	0:0	10	num_env
arg	87:48	87:66	9	ps->icc_par+source
water	87:48	0:0	10	ps
op	87:50	0:0	10	->
water	87:52	0:0	10	icc_par
op	87:59	0:0	10	+
water	87:60	0:0	10	source
arg	87:68	87:90	9	sizeof(ps->icc_par[0])
op	87:68	0:0	10	sizeof
water	87:74	0:0	10	(
water	87:75	0:0	10	ps
op	87:77	0:0	10	->
water	87:79	0:0	10	icc_par
op	87:86	0:0	10	[
water	87:87	0:0	10	0
op	87:88	0:0	10	]
water	87:89	0:0	10	)
water	87:91	0:0	8	;
water	88:12	0:0	8	}
if	89:12	92:12	6	(ps -> enable_ipdopd)
cond	89:16	89:20	7	ps -> enable_ipdopd
water	89:16	0:0	8	ps
op	89:18	0:0	8	->
water	89:20	0:0	8	enable_ipdopd
stmts	89:35	92:12	7	
water	89:35	0:0	8	{
call	90:16	90:90	8	memcpy
arg	90:23	90:46	9	ps->ipd_par+ps->num_env
water	90:23	0:0	10	ps
op	90:25	0:0	10	->
water	90:27	0:0	10	ipd_par
op	90:34	0:0	10	+
water	90:35	0:0	10	ps
op	90:37	0:0	10	->
water	90:39	0:0	10	num_env
arg	90:48	90:66	9	ps->ipd_par+source
water	90:48	0:0	10	ps
op	90:50	0:0	10	->
water	90:52	0:0	10	ipd_par
op	90:59	0:0	10	+
water	90:60	0:0	10	source
arg	90:68	90:90	9	sizeof(ps->ipd_par[0])
op	90:68	0:0	10	sizeof
water	90:74	0:0	10	(
water	90:75	0:0	10	ps
op	90:77	0:0	10	->
water	90:79	0:0	10	ipd_par
op	90:86	0:0	10	[
water	90:87	0:0	10	0
op	90:88	0:0	10	]
water	90:89	0:0	10	)
water	90:91	0:0	8	;
call	91:16	91:90	8	memcpy
arg	91:23	91:46	9	ps->opd_par+ps->num_env
water	91:23	0:0	10	ps
op	91:25	0:0	10	->
water	91:27	0:0	10	opd_par
op	91:34	0:0	10	+
water	91:35	0:0	10	ps
op	91:37	0:0	10	->
water	91:39	0:0	10	num_env
arg	91:48	91:66	9	ps->opd_par+source
water	91:48	0:0	10	ps
op	91:50	0:0	10	->
water	91:52	0:0	10	opd_par
op	91:59	0:0	10	+
water	91:60	0:0	10	source
arg	91:68	91:90	9	sizeof(ps->opd_par[0])
op	91:68	0:0	10	sizeof
water	91:74	0:0	10	(
water	91:75	0:0	10	ps
op	91:77	0:0	10	->
water	91:79	0:0	10	opd_par
op	91:86	0:0	10	[
water	91:87	0:0	10	0
op	91:88	0:0	10	]
water	91:89	0:0	10	)
water	91:91	0:0	8	;
water	92:12	0:0	8	}
water	93:8	0:0	6	}
if	94:8	101:8	4	(ps -> enable_iid)
cond	94:12	94:16	5	ps -> enable_iid
water	94:12	0:0	6	ps
op	94:14	0:0	6	->
water	94:16	0:0	6	enable_iid
stmts	94:27	101:8	5	
water	94:27	0:0	6	{
for	95:12	100:12	6	(b = 0 ;b < ps -> nr_iid_par;b ++)
forinit	95:17	95:22	7	b = 0 ;
water	95:17	0:0	8	b
op	95:19	0:0	8	=
water	95:21	0:0	8	0
water	95:22	0:0	8	;
cond	95:24	95:32	7	b < ps -> nr_iid_par
water	95:24	0:0	8	b
op	95:26	0:0	8	<
water	95:28	0:0	8	ps
op	95:30	0:0	8	->
water	95:32	0:0	8	nr_iid_par
forexpr	95:44	95:45	7	b ++
water	95:44	0:0	8	b
op	95:45	0:0	8	++
stmts	95:49	100:12	7	
water	95:49	0:0	8	{
if	96:16	99:16	8	(FFABS (ps -> iid_par [ ps -> num_env ] [ b ] ) > 7 + 8 * ps -> iid_quant)
cond	96:20	96:69	9	FFABS (ps -> iid_par [ ps -> num_env ] [ b ] ) > 7 + 8 * ps -> iid_quant
call	96:20	96:53	10	FFABS
arg	96:26	96:53	11	ps->iid_par[ps->num_env][b]
water	96:26	0:0	12	ps
op	96:28	0:0	12	->
water	96:30	0:0	12	iid_par
op	96:37	0:0	12	[
water	96:38	0:0	12	ps
op	96:40	0:0	12	->
water	96:42	0:0	12	num_env
op	96:49	0:0	12	]
op	96:50	0:0	12	[
water	96:51	0:0	12	b
op	96:52	0:0	12	]
op	96:55	0:0	10	>
water	96:57	0:0	10	7
op	96:59	0:0	10	+
water	96:61	0:0	10	8
op	96:63	0:0	10	*
water	96:65	0:0	10	ps
op	96:67	0:0	10	->
water	96:69	0:0	10	iid_quant
stmts	96:80	99:16	9	
water	96:80	0:0	10	{
call	97:20	97:67	10	av_log
arg	97:27	97:32	11	avctx
water	97:27	0:0	12	avctx
arg	97:34	97:46	11	AV_LOG_ERROR
water	97:34	0:0	12	AV_LOG_ERROR
arg	97:48	97:67	11	"iid_par invalid\n"
water	97:48	0:0	12	"iid_par invalid\n"
water	97:68	0:0	10	;
goto	98:20	98:28	10	err
water	98:25	0:0	11	err
water	99:16	0:0	10	}
water	100:12	0:0	8	}
water	101:8	0:0	6	}
if	102:8	109:8	4	(ps -> enable_icc)
cond	102:12	102:16	5	ps -> enable_icc
water	102:12	0:0	6	ps
op	102:14	0:0	6	->
water	102:16	0:0	6	enable_icc
stmts	102:27	109:8	5	
water	102:27	0:0	6	{
for	103:12	108:12	6	(b = 0 ;b < ps -> nr_iid_par;b ++)
forinit	103:17	103:22	7	b = 0 ;
water	103:17	0:0	8	b
op	103:19	0:0	8	=
water	103:21	0:0	8	0
water	103:22	0:0	8	;
cond	103:24	103:32	7	b < ps -> nr_iid_par
water	103:24	0:0	8	b
op	103:26	0:0	8	<
water	103:28	0:0	8	ps
op	103:30	0:0	8	->
water	103:32	0:0	8	nr_iid_par
forexpr	103:44	103:45	7	b ++
water	103:44	0:0	8	b
op	103:45	0:0	8	++
stmts	103:49	108:12	7	
water	103:49	0:0	8	{
if	104:16	107:16	8	(ps -> icc_par [ ps -> num_env ] [ b ] > 7 U)
cond	104:20	104:51	9	ps -> icc_par [ ps -> num_env ] [ b ] > 7 U
water	104:20	0:0	10	ps
op	104:22	0:0	10	->
water	104:24	0:0	10	icc_par
op	104:31	0:0	10	[
water	104:32	0:0	10	ps
op	104:34	0:0	10	->
water	104:36	0:0	10	num_env
op	104:43	0:0	10	]
op	104:44	0:0	10	[
water	104:45	0:0	10	b
op	104:46	0:0	10	]
op	104:48	0:0	10	>
water	104:50	0:0	10	7
water	104:51	0:0	10	U
stmts	104:54	107:16	9	
water	104:54	0:0	10	{
call	105:20	105:67	10	av_log
arg	105:27	105:32	11	avctx
water	105:27	0:0	12	avctx
arg	105:34	105:46	11	AV_LOG_ERROR
water	105:34	0:0	12	AV_LOG_ERROR
arg	105:48	105:67	11	"icc_par invalid\n"
water	105:48	0:0	12	"icc_par invalid\n"
water	105:68	0:0	10	;
goto	106:20	106:28	10	err
water	106:25	0:0	11	err
water	107:16	0:0	10	}
water	108:12	0:0	8	}
water	109:8	0:0	6	}
water	110:8	0:0	4	ps
op	110:10	0:0	4	->
water	110:12	0:0	4	num_env
op	110:19	0:0	4	++
water	110:21	0:0	4	;
water	111:8	0:0	4	ps
op	111:10	0:0	4	->
water	111:12	0:0	4	border_position
op	111:27	0:0	4	[
water	111:28	0:0	4	ps
op	111:30	0:0	4	->
water	111:32	0:0	4	num_env
op	111:39	0:0	4	]
op	111:41	0:0	4	=
water	111:43	0:0	4	numQMFSlots
op	111:55	0:0	4	-
water	111:57	0:0	4	1
water	111:58	0:0	4	;
water	112:4	0:0	4	}
water	113:4	0:0	2	ps
op	113:6	0:0	2	->
water	113:8	0:0	2	is34bands_old
op	113:22	0:0	2	=
water	113:24	0:0	2	ps
op	113:26	0:0	2	->
water	113:28	0:0	2	is34bands
water	113:37	0:0	2	;
if	114:4	116:64	2	(! PS_BASELINE && ( ps -> enable_iid || ps -> enable_icc ))
cond	114:8	114:57	3	! PS_BASELINE && ( ps -> enable_iid || ps -> enable_icc )
op	114:8	0:0	4	!
water	114:9	0:0	4	PS_BASELINE
op	114:21	0:0	4	&&
water	114:24	0:0	4	(
water	114:25	0:0	4	ps
op	114:27	0:0	4	->
water	114:29	0:0	4	enable_iid
op	114:40	0:0	4	||
water	114:43	0:0	4	ps
op	114:45	0:0	4	->
water	114:47	0:0	4	enable_icc
water	114:57	0:0	4	)
stmts	115:8	116:64	3	
water	115:8	0:0	4	ps
op	115:10	0:0	4	->
water	115:12	0:0	4	is34bands
op	115:22	0:0	4	=
water	115:24	0:0	4	(
water	115:25	0:0	4	ps
op	115:27	0:0	4	->
water	115:29	0:0	4	enable_iid
op	115:40	0:0	4	&&
water	115:43	0:0	4	ps
op	115:45	0:0	4	->
water	115:47	0:0	4	nr_iid_par
op	115:58	0:0	4	==
water	115:61	0:0	4	34
water	115:63	0:0	4	)
op	115:65	0:0	4	||
water	116:24	0:0	4	(
water	116:25	0:0	4	ps
op	116:27	0:0	4	->
water	116:29	0:0	4	enable_icc
op	116:40	0:0	4	&&
water	116:43	0:0	4	ps
op	116:45	0:0	4	->
water	116:47	0:0	4	nr_icc_par
op	116:58	0:0	4	==
water	116:61	0:0	4	34
water	116:63	0:0	4	)
water	116:64	0:0	4	;
if	118:4	121:4	2	(! ps -> enable_ipdopd)
cond	118:8	118:13	3	! ps -> enable_ipdopd
op	118:8	0:0	4	!
water	118:9	0:0	4	ps
op	118:11	0:0	4	->
water	118:13	0:0	4	enable_ipdopd
stmts	118:28	121:4	3	
water	118:28	0:0	4	{
call	119:8	119:50	4	memset
arg	119:15	119:26	5	ps->ipd_par
water	119:15	0:0	6	ps
op	119:17	0:0	6	->
water	119:19	0:0	6	ipd_par
arg	119:28	119:29	5	0
water	119:28	0:0	6	0
arg	119:31	119:50	5	sizeof(ps->ipd_par)
op	119:31	0:0	6	sizeof
water	119:37	0:0	6	(
water	119:38	0:0	6	ps
op	119:40	0:0	6	->
water	119:42	0:0	6	ipd_par
water	119:49	0:0	6	)
water	119:51	0:0	4	;
call	120:8	120:50	4	memset
arg	120:15	120:26	5	ps->opd_par
water	120:15	0:0	6	ps
op	120:17	0:0	6	->
water	120:19	0:0	6	opd_par
arg	120:28	120:29	5	0
water	120:28	0:0	6	0
arg	120:31	120:50	5	sizeof(ps->opd_par)
op	120:31	0:0	6	sizeof
water	120:37	0:0	6	(
water	120:38	0:0	6	ps
op	120:40	0:0	6	->
water	120:42	0:0	6	opd_par
water	120:49	0:0	6	)
water	120:51	0:0	4	;
water	121:4	0:0	4	}
if	122:4	123:21	2	(header)
cond	122:8	122:8	3	header
water	122:8	0:0	4	header
stmts	123:8	123:21	3	
water	123:8	0:0	4	ps
op	123:10	0:0	4	->
water	123:12	0:0	4	start
op	123:18	0:0	4	=
water	123:20	0:0	4	1
water	123:21	0:0	4	;
water	124:4	0:0	2	bits_consumed
op	124:18	0:0	2	=
call	124:20	124:37	2	get_bits_count
arg	124:35	124:37	3	gb
water	124:35	0:0	4	gb
op	124:39	0:0	2	-
water	124:41	0:0	2	bit_count_start
water	124:56	0:0	2	;
if	125:4	128:4	2	(bits_consumed <= bits_left)
cond	125:8	125:25	3	bits_consumed <= bits_left
water	125:8	0:0	4	bits_consumed
op	125:22	0:0	4	<=
water	125:25	0:0	4	bits_left
stmts	125:36	128:4	3	
water	125:36	0:0	4	{
call	126:8	126:45	4	skip_bits_long
arg	126:23	126:30	5	gb_host
water	126:23	0:0	6	gb_host
arg	126:32	126:45	5	bits_consumed
water	126:32	0:0	6	bits_consumed
water	126:46	0:0	4	;
return	127:8	127:28	4	bits_consumed
water	127:15	0:0	5	bits_consumed
water	128:4	0:0	4	}
call	129:4	129:107	2	av_log
arg	129:11	129:16	3	avctx
water	129:11	0:0	4	avctx
arg	129:18	129:30	3	AV_LOG_ERROR
water	129:18	0:0	4	AV_LOG_ERROR
arg	129:32	129:81	3	"Expected to read %d PS bits actually read %d.\n"
water	129:32	0:0	4	"Expected to read %d PS bits actually read %d.\n"
arg	129:83	129:92	3	bits_left
water	129:83	0:0	4	bits_left
arg	129:94	129:107	3	bits_consumed
water	129:94	0:0	4	bits_consumed
water	129:108	0:0	2	;
label	130:0	130:3	2	err :
water	131:4	0:0	2	ps
op	131:6	0:0	2	->
water	131:8	0:0	2	start
op	131:14	0:0	2	=
water	131:16	0:0	2	0
water	131:17	0:0	2	;
call	132:4	132:37	2	skip_bits_long
arg	132:19	132:26	3	gb_host
water	132:19	0:0	4	gb_host
arg	132:28	132:37	3	bits_left
water	132:28	0:0	4	bits_left
water	132:38	0:0	2	;
call	133:4	133:46	2	memset
arg	133:11	133:22	3	ps->iid_par
water	133:11	0:0	4	ps
op	133:13	0:0	4	->
water	133:15	0:0	4	iid_par
arg	133:24	133:25	3	0
water	133:24	0:0	4	0
arg	133:27	133:46	3	sizeof(ps->iid_par)
op	133:27	0:0	4	sizeof
water	133:33	0:0	4	(
water	133:34	0:0	4	ps
op	133:36	0:0	4	->
water	133:38	0:0	4	iid_par
water	133:45	0:0	4	)
water	133:47	0:0	2	;
call	134:4	134:46	2	memset
arg	134:11	134:22	3	ps->icc_par
water	134:11	0:0	4	ps
op	134:13	0:0	4	->
water	134:15	0:0	4	icc_par
arg	134:24	134:25	3	0
water	134:24	0:0	4	0
arg	134:27	134:46	3	sizeof(ps->icc_par)
op	134:27	0:0	4	sizeof
water	134:33	0:0	4	(
water	134:34	0:0	4	ps
op	134:36	0:0	4	->
water	134:38	0:0	4	icc_par
water	134:45	0:0	4	)
water	134:47	0:0	2	;
call	135:4	135:46	2	memset
arg	135:11	135:22	3	ps->ipd_par
water	135:11	0:0	4	ps
op	135:13	0:0	4	->
water	135:15	0:0	4	ipd_par
arg	135:24	135:25	3	0
water	135:24	0:0	4	0
arg	135:27	135:46	3	sizeof(ps->ipd_par)
op	135:27	0:0	4	sizeof
water	135:33	0:0	4	(
water	135:34	0:0	4	ps
op	135:36	0:0	4	->
water	135:38	0:0	4	ipd_par
water	135:45	0:0	4	)
water	135:47	0:0	2	;
call	136:4	136:46	2	memset
arg	136:11	136:22	3	ps->opd_par
water	136:11	0:0	4	ps
op	136:13	0:0	4	->
water	136:15	0:0	4	opd_par
arg	136:24	136:25	3	0
water	136:24	0:0	4	0
arg	136:27	136:46	3	sizeof(ps->opd_par)
op	136:27	0:0	4	sizeof
water	136:33	0:0	4	(
water	136:34	0:0	4	ps
op	136:36	0:0	4	->
water	136:38	0:0	4	opd_par
water	136:45	0:0	4	)
water	136:47	0:0	2	;
return	137:4	137:20	2	bits_left
water	137:11	0:0	3	bits_left
