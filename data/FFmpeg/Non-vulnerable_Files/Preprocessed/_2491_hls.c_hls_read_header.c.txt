func	1:0	164:0	0	static int	hls_read_header
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
stmnts	0:0	163:14	1	
decl	3:4	3:76	2	URLContext	*u
op	3:18	0:0	2	=
water	3:20	0:0	2	(
water	3:21	0:0	2	s
op	3:22	0:0	2	->
water	3:24	0:0	2	flags
op	3:30	0:0	2	&
water	3:32	0:0	2	AVFMT_FLAG_CUSTOM_IO
water	3:52	0:0	2	)
water	3:54	0:0	2	?
water	3:56	0:0	2	NULL
water	3:61	0:0	2	:
water	3:63	0:0	2	s
op	3:64	0:0	2	->
water	3:66	0:0	2	pb
op	3:68	0:0	2	->
water	3:70	0:0	2	opaque
decl	4:4	4:32	2	HLSContext	*c
op	4:18	0:0	2	=
water	4:20	0:0	2	s
op	4:21	0:0	2	->
water	4:23	0:0	2	priv_data
decl	5:4	5:40	2	int	ret
op	5:12	0:0	2	=
water	5:14	0:0	2	0
water	5:15	0:0	2	,
decl	5:4	5:40	2	int	i
water	5:18	0:0	2	,
decl	5:4	5:40	2	int	j
water	5:21	0:0	2	,
decl	5:4	5:40	2	int	stream_offset
op	5:37	0:0	2	=
water	5:39	0:0	2	0
water	6:4	0:0	2	c
op	6:5	0:0	2	->
water	6:7	0:0	2	interrupt_callback
op	6:26	0:0	2	=
op	6:28	0:0	2	&
water	6:29	0:0	2	s
op	6:30	0:0	2	->
water	6:32	0:0	2	interrupt_callback
water	6:50	0:0	2	;
water	7:4	0:0	2	c
op	7:5	0:0	2	->
water	7:7	0:0	2	first_packet
op	7:20	0:0	2	=
water	7:22	0:0	2	1
water	7:23	0:0	2	;
water	8:4	0:0	2	c
op	8:5	0:0	2	->
water	8:7	0:0	2	first_timestamp
op	8:23	0:0	2	=
water	8:25	0:0	2	AV_NOPTS_VALUE
water	8:39	0:0	2	;
water	9:4	0:0	2	c
op	9:5	0:0	2	->
water	9:7	0:0	2	cur_timestamp
op	9:21	0:0	2	=
water	9:23	0:0	2	AV_NOPTS_VALUE
water	9:37	0:0	2	;
if	11:4	18:4	2	(u && u -> prot -> priv_data_class)
cond	11:8	11:22	3	u && u -> prot -> priv_data_class
water	11:8	0:0	4	u
op	11:10	0:0	4	&&
water	11:13	0:0	4	u
op	11:14	0:0	4	->
water	11:16	0:0	4	prot
op	11:20	0:0	4	->
water	11:22	0:0	4	priv_data_class
stmts	11:39	18:4	3	
water	11:39	0:0	4	{
call	13:8	13:65	4	update_options
arg	13:23	13:37	5	&c->user_agent
op	13:23	0:0	6	&
water	13:24	0:0	6	c
op	13:25	0:0	6	->
water	13:27	0:0	6	user_agent
arg	13:39	13:51	5	"user-agent"
water	13:39	0:0	6	"user-agent"
arg	13:53	13:65	5	u->priv_data
water	13:53	0:0	6	u
op	13:54	0:0	6	->
water	13:56	0:0	6	priv_data
water	13:66	0:0	4	;
call	15:8	15:59	4	update_options
arg	15:23	15:34	5	&c->cookies
op	15:23	0:0	6	&
water	15:24	0:0	6	c
op	15:25	0:0	6	->
water	15:27	0:0	6	cookies
arg	15:36	15:45	5	"cookies"
water	15:36	0:0	6	"cookies"
arg	15:47	15:59	5	u->priv_data
water	15:47	0:0	6	u
op	15:48	0:0	6	->
water	15:50	0:0	6	priv_data
water	15:60	0:0	4	;
call	17:8	17:59	4	update_options
arg	17:23	17:34	5	&c->headers
op	17:23	0:0	6	&
water	17:24	0:0	6	c
op	17:25	0:0	6	->
water	17:27	0:0	6	headers
arg	17:36	17:45	5	"headers"
water	17:36	0:0	6	"headers"
arg	17:47	17:59	5	u->priv_data
water	17:47	0:0	6	u
op	17:48	0:0	6	->
water	17:50	0:0	6	priv_data
water	17:60	0:0	4	;
water	18:4	0:0	4	}
if	19:4	20:17	2	(( ret =parse_playlist (c ,s -> filename ,NULL ,s -> pb ) ) < 0)
cond	19:8	19:62	3	( ret =parse_playlist (c ,s -> filename ,NULL ,s -> pb ) ) < 0
water	19:8	0:0	4	(
water	19:9	0:0	4	ret
op	19:13	0:0	4	=
call	19:15	19:57	4	parse_playlist
arg	19:30	19:31	5	c
water	19:30	0:0	6	c
arg	19:33	19:44	5	s->filename
water	19:33	0:0	6	s
op	19:34	0:0	6	->
water	19:36	0:0	6	filename
arg	19:46	19:50	5	NULL
water	19:46	0:0	6	NULL
arg	19:52	19:57	5	s->pb
water	19:52	0:0	6	s
op	19:53	0:0	6	->
water	19:55	0:0	6	pb
water	19:58	0:0	4	)
op	19:60	0:0	4	<
water	19:62	0:0	4	0
stmts	20:8	20:17	3	
goto	20:8	20:17	4	fail
water	20:13	0:0	5	fail
if	21:4	22:17	2	(( ret =save_avio_options (s ) ) < 0)
cond	21:8	21:39	3	( ret =save_avio_options (s ) ) < 0
water	21:8	0:0	4	(
water	21:9	0:0	4	ret
op	21:13	0:0	4	=
call	21:15	21:34	4	save_avio_options
arg	21:33	21:34	5	s
water	21:33	0:0	6	s
water	21:35	0:0	4	)
op	21:37	0:0	4	<
water	21:39	0:0	4	0
stmts	22:8	22:17	3	
goto	22:8	22:17	4	fail
water	22:13	0:0	5	fail
call	24:4	24:49	2	av_dict_set
arg	24:16	24:29	3	&c->avio_opts
op	24:16	0:0	4	&
water	24:17	0:0	4	c
op	24:18	0:0	4	->
water	24:20	0:0	4	avio_opts
arg	24:31	24:41	3	"seekable"
water	24:31	0:0	4	"seekable"
arg	24:43	24:46	3	"0"
water	24:43	0:0	4	"0"
arg	24:48	24:49	3	0
water	24:48	0:0	4	0
water	24:50	0:0	2	;
if	25:4	29:4	2	(c -> n_variants == 0)
cond	25:8	25:25	3	c -> n_variants == 0
water	25:8	0:0	4	c
op	25:9	0:0	4	->
water	25:11	0:0	4	n_variants
op	25:22	0:0	4	==
water	25:25	0:0	4	0
stmts	25:28	29:4	3	
water	25:28	0:0	4	{
call	26:8	26:55	4	av_log
arg	26:15	26:19	5	NULL
water	26:15	0:0	6	NULL
arg	26:21	26:35	5	AV_LOG_WARNING
water	26:21	0:0	6	AV_LOG_WARNING
arg	26:37	26:55	5	"Empty playlist\n"
water	26:37	0:0	6	"Empty playlist\n"
water	26:56	0:0	4	;
water	27:8	0:0	4	ret
op	27:12	0:0	4	=
water	27:14	0:0	4	AVERROR_EOF
water	27:25	0:0	4	;
goto	28:8	28:17	4	fail
water	28:13	0:0	5	fail
water	29:4	0:0	4	}
if	32:4	38:4	2	(c -> n_playlists > 1 || c -> playlists [ 0 ] -> n_segments == 0)
cond	32:8	32:61	3	c -> n_playlists > 1 || c -> playlists [ 0 ] -> n_segments == 0
water	32:8	0:0	4	c
op	32:9	0:0	4	->
water	32:11	0:0	4	n_playlists
op	32:23	0:0	4	>
water	32:25	0:0	4	1
op	32:27	0:0	4	||
water	32:30	0:0	4	c
op	32:31	0:0	4	->
water	32:33	0:0	4	playlists
op	32:42	0:0	4	[
water	32:43	0:0	4	0
op	32:44	0:0	4	]
op	32:45	0:0	4	->
water	32:47	0:0	4	n_segments
op	32:58	0:0	4	==
water	32:61	0:0	4	0
stmts	32:64	38:4	3	
water	32:64	0:0	4	{
for	33:8	37:8	4	(i = 0 ;i < c -> n_playlists;i ++)
forinit	33:13	33:18	5	i = 0 ;
water	33:13	0:0	6	i
op	33:15	0:0	6	=
water	33:17	0:0	6	0
water	33:18	0:0	6	;
cond	33:20	33:27	5	i < c -> n_playlists
water	33:20	0:0	6	i
op	33:22	0:0	6	<
water	33:24	0:0	6	c
op	33:25	0:0	6	->
water	33:27	0:0	6	n_playlists
forexpr	33:40	33:41	5	i ++
water	33:40	0:0	6	i
op	33:41	0:0	6	++
stmts	33:45	37:8	5	
water	33:45	0:0	6	{
decl	34:12	34:50	6	struct playlist	*pls
op	34:33	0:0	6	=
water	34:35	0:0	6	c
op	34:36	0:0	6	->
water	34:38	0:0	6	playlists
op	34:47	0:0	6	[
water	34:48	0:0	6	i
op	34:49	0:0	6	]
if	35:12	36:25	6	(( ret =parse_playlist (c ,pls -> url ,pls ,NULL ) ) < 0)
cond	35:16	35:65	7	( ret =parse_playlist (c ,pls -> url ,pls ,NULL ) ) < 0
water	35:16	0:0	8	(
water	35:17	0:0	8	ret
op	35:21	0:0	8	=
call	35:23	35:60	8	parse_playlist
arg	35:38	35:39	9	c
water	35:38	0:0	10	c
arg	35:41	35:49	9	pls->url
water	35:41	0:0	10	pls
op	35:44	0:0	10	->
water	35:46	0:0	10	url
arg	35:51	35:54	9	pls
water	35:51	0:0	10	pls
arg	35:56	35:60	9	NULL
water	35:56	0:0	10	NULL
water	35:61	0:0	8	)
op	35:63	0:0	8	<
water	35:65	0:0	8	0
stmts	36:16	36:25	7	
goto	36:16	36:25	8	fail
water	36:21	0:0	9	fail
water	37:8	0:0	6	}
water	38:4	0:0	4	}
if	39:4	43:4	2	(c -> variants [ 0 ] -> playlists [ 0 ] -> n_segments == 0)
cond	39:8	39:52	3	c -> variants [ 0 ] -> playlists [ 0 ] -> n_segments == 0
water	39:8	0:0	4	c
op	39:9	0:0	4	->
water	39:11	0:0	4	variants
op	39:19	0:0	4	[
water	39:20	0:0	4	0
op	39:21	0:0	4	]
op	39:22	0:0	4	->
water	39:24	0:0	4	playlists
op	39:33	0:0	4	[
water	39:34	0:0	4	0
op	39:35	0:0	4	]
op	39:36	0:0	4	->
water	39:38	0:0	4	n_segments
op	39:49	0:0	4	==
water	39:52	0:0	4	0
stmts	39:55	43:4	3	
water	39:55	0:0	4	{
call	40:8	40:55	4	av_log
arg	40:15	40:19	5	NULL
water	40:15	0:0	6	NULL
arg	40:21	40:35	5	AV_LOG_WARNING
water	40:21	0:0	6	AV_LOG_WARNING
arg	40:37	40:55	5	"Empty playlist\n"
water	40:37	0:0	6	"Empty playlist\n"
water	40:56	0:0	4	;
water	41:8	0:0	4	ret
op	41:12	0:0	4	=
water	41:14	0:0	4	AVERROR_EOF
water	41:25	0:0	4	;
goto	42:8	42:17	4	fail
water	42:13	0:0	5	fail
water	43:4	0:0	4	}
if	46:4	51:4	2	(c -> variants [ 0 ] -> playlists [ 0 ] -> finished)
cond	46:8	46:38	3	c -> variants [ 0 ] -> playlists [ 0 ] -> finished
water	46:8	0:0	4	c
op	46:9	0:0	4	->
water	46:11	0:0	4	variants
op	46:19	0:0	4	[
water	46:20	0:0	4	0
op	46:21	0:0	4	]
op	46:22	0:0	4	->
water	46:24	0:0	4	playlists
op	46:33	0:0	4	[
water	46:34	0:0	4	0
op	46:35	0:0	4	]
op	46:36	0:0	4	->
water	46:38	0:0	4	finished
stmts	46:48	51:4	3	
water	46:48	0:0	4	{
decl	47:8	47:28	4	int64_t	duration
op	47:25	0:0	4	=
water	47:27	0:0	4	0
for	48:8	49:75	4	(i = 0 ;i < c -> variants [ 0 ] -> playlists [ 0 ] -> n_segments;i ++)
forinit	48:13	48:18	5	i = 0 ;
water	48:13	0:0	6	i
op	48:15	0:0	6	=
water	48:17	0:0	6	0
water	48:18	0:0	6	;
cond	48:20	48:54	5	i < c -> variants [ 0 ] -> playlists [ 0 ] -> n_segments
water	48:20	0:0	6	i
op	48:22	0:0	6	<
water	48:24	0:0	6	c
op	48:25	0:0	6	->
water	48:27	0:0	6	variants
op	48:35	0:0	6	[
water	48:36	0:0	6	0
op	48:37	0:0	6	]
op	48:38	0:0	6	->
water	48:40	0:0	6	playlists
op	48:49	0:0	6	[
water	48:50	0:0	6	0
op	48:51	0:0	6	]
op	48:52	0:0	6	->
water	48:54	0:0	6	n_segments
forexpr	48:66	48:67	5	i ++
water	48:66	0:0	6	i
op	48:67	0:0	6	++
stmts	49:12	49:75	5	
water	49:12	0:0	6	duration
op	49:21	0:0	6	+=
water	49:24	0:0	6	c
op	49:25	0:0	6	->
water	49:27	0:0	6	variants
op	49:35	0:0	6	[
water	49:36	0:0	6	0
op	49:37	0:0	6	]
op	49:38	0:0	6	->
water	49:40	0:0	6	playlists
op	49:49	0:0	6	[
water	49:50	0:0	6	0
op	49:51	0:0	6	]
op	49:52	0:0	6	->
water	49:54	0:0	6	segments
op	49:62	0:0	6	[
water	49:63	0:0	6	i
op	49:64	0:0	6	]
op	49:65	0:0	6	->
water	49:67	0:0	6	duration
water	49:75	0:0	6	;
water	50:8	0:0	4	s
op	50:9	0:0	4	->
water	50:11	0:0	4	duration
op	50:20	0:0	4	=
water	50:22	0:0	4	duration
water	50:30	0:0	4	;
water	51:4	0:0	4	}
for	53:4	61:4	2	(i = 0 ;i < c -> n_variants;i ++)
forinit	53:9	53:14	3	i = 0 ;
water	53:9	0:0	4	i
op	53:11	0:0	4	=
water	53:13	0:0	4	0
water	53:14	0:0	4	;
cond	53:16	53:23	3	i < c -> n_variants
water	53:16	0:0	4	i
op	53:18	0:0	4	<
water	53:20	0:0	4	c
op	53:21	0:0	4	->
water	53:23	0:0	4	n_variants
forexpr	53:35	53:36	3	i ++
water	53:35	0:0	4	i
op	53:36	0:0	4	++
stmts	53:40	61:4	3	
water	53:40	0:0	4	{
decl	54:8	54:44	4	struct variant	*var
op	54:28	0:0	4	=
water	54:30	0:0	4	c
op	54:31	0:0	4	->
water	54:33	0:0	4	variants
op	54:41	0:0	4	[
water	54:42	0:0	4	i
op	54:43	0:0	4	]
if	55:8	56:83	4	(var -> audio_group [ 0 ])
cond	55:12	55:30	5	var -> audio_group [ 0 ]
water	55:12	0:0	6	var
op	55:15	0:0	6	->
water	55:17	0:0	6	audio_group
op	55:28	0:0	6	[
water	55:29	0:0	6	0
op	55:30	0:0	6	]
stmts	56:12	56:83	5	
call	56:12	56:82	6	add_renditions_to_variant
arg	56:38	56:39	7	c
water	56:38	0:0	8	c
arg	56:41	56:44	7	var
water	56:41	0:0	8	var
arg	56:46	56:64	7	AVMEDIA_TYPE_AUDIO
water	56:46	0:0	8	AVMEDIA_TYPE_AUDIO
arg	56:66	56:82	7	var->audio_group
water	56:66	0:0	8	var
op	56:69	0:0	8	->
water	56:71	0:0	8	audio_group
water	56:83	0:0	6	;
if	57:8	58:83	4	(var -> video_group [ 0 ])
cond	57:12	57:30	5	var -> video_group [ 0 ]
water	57:12	0:0	6	var
op	57:15	0:0	6	->
water	57:17	0:0	6	video_group
op	57:28	0:0	6	[
water	57:29	0:0	6	0
op	57:30	0:0	6	]
stmts	58:12	58:83	5	
call	58:12	58:82	6	add_renditions_to_variant
arg	58:38	58:39	7	c
water	58:38	0:0	8	c
arg	58:41	58:44	7	var
water	58:41	0:0	8	var
arg	58:46	58:64	7	AVMEDIA_TYPE_VIDEO
water	58:46	0:0	8	AVMEDIA_TYPE_VIDEO
arg	58:66	58:82	7	var->video_group
water	58:66	0:0	8	var
op	58:69	0:0	8	->
water	58:71	0:0	8	video_group
water	58:83	0:0	6	;
if	59:8	60:90	4	(var -> subtitles_group [ 0 ])
cond	59:12	59:34	5	var -> subtitles_group [ 0 ]
water	59:12	0:0	6	var
op	59:15	0:0	6	->
water	59:17	0:0	6	subtitles_group
op	59:32	0:0	6	[
water	59:33	0:0	6	0
op	59:34	0:0	6	]
stmts	60:12	60:90	5	
call	60:12	60:89	6	add_renditions_to_variant
arg	60:38	60:39	7	c
water	60:38	0:0	8	c
arg	60:41	60:44	7	var
water	60:41	0:0	8	var
arg	60:46	60:67	7	AVMEDIA_TYPE_SUBTITLE
water	60:46	0:0	8	AVMEDIA_TYPE_SUBTITLE
arg	60:69	60:89	7	var->subtitles_group
water	60:69	0:0	8	var
op	60:72	0:0	8	->
water	60:74	0:0	8	subtitles_group
water	60:90	0:0	6	;
water	61:4	0:0	4	}
for	63:4	136:4	2	(i = 0 ;i < c -> n_playlists;i ++)
forinit	63:9	63:14	3	i = 0 ;
water	63:9	0:0	4	i
op	63:11	0:0	4	=
water	63:13	0:0	4	0
water	63:14	0:0	4	;
cond	63:16	63:23	3	i < c -> n_playlists
water	63:16	0:0	4	i
op	63:18	0:0	4	<
water	63:20	0:0	4	c
op	63:21	0:0	4	->
water	63:23	0:0	4	n_playlists
forexpr	63:36	63:37	3	i ++
water	63:36	0:0	4	i
op	63:37	0:0	4	++
stmts	63:41	136:4	3	
water	63:41	0:0	4	{
decl	64:8	64:46	4	struct playlist	*pls
op	64:29	0:0	4	=
water	64:31	0:0	4	c
op	64:32	0:0	4	->
water	64:34	0:0	4	playlists
op	64:43	0:0	4	[
water	64:44	0:0	4	i
op	64:45	0:0	4	]
decl	65:8	65:36	4	AVInputFormat	*in_fmt
op	65:30	0:0	4	=
water	65:32	0:0	4	NULL
if	66:8	69:8	4	(! ( pls -> ctx =avformat_alloc_context ( ) ))
cond	66:12	66:49	5	! ( pls -> ctx =avformat_alloc_context ( ) )
op	66:12	0:0	6	!
water	66:13	0:0	6	(
water	66:14	0:0	6	pls
op	66:17	0:0	6	->
water	66:19	0:0	6	ctx
op	66:23	0:0	6	=
call	66:25	66:48	6	avformat_alloc_context
water	66:49	0:0	6	)
stmts	66:52	69:8	5	
water	66:52	0:0	6	{
water	67:12	0:0	6	ret
op	67:16	0:0	6	=
call	67:18	67:32	6	AVERROR
arg	67:26	67:32	7	ENOMEM
water	67:26	0:0	8	ENOMEM
water	67:33	0:0	6	;
goto	68:12	68:21	6	fail
water	68:17	0:0	7	fail
water	69:8	0:0	6	}
if	70:8	71:20	4	(pls -> n_segments == 0)
cond	70:12	70:31	5	pls -> n_segments == 0
water	70:12	0:0	6	pls
op	70:15	0:0	6	->
water	70:17	0:0	6	n_segments
op	70:28	0:0	6	==
water	70:31	0:0	6	0
stmts	71:12	71:20	5	
continue	71:12	71:20	6	
water	72:8	0:0	4	pls
op	72:11	0:0	4	->
water	72:13	0:0	4	index
op	72:20	0:0	4	=
water	72:22	0:0	4	i
water	72:23	0:0	4	;
water	73:8	0:0	4	pls
op	73:11	0:0	4	->
water	73:13	0:0	4	needed
op	73:20	0:0	4	=
water	73:22	0:0	4	1
water	73:23	0:0	4	;
water	74:8	0:0	4	pls
op	74:11	0:0	4	->
water	74:13	0:0	4	parent
op	74:20	0:0	4	=
water	74:22	0:0	4	s
water	74:23	0:0	4	;
water	75:8	0:0	4	pls
op	75:11	0:0	4	->
water	75:13	0:0	4	cur_seq_no
op	75:24	0:0	4	=
call	75:26	75:50	4	select_cur_seq_no
arg	75:44	75:45	5	c
water	75:44	0:0	6	c
arg	75:47	75:50	5	pls
water	75:47	0:0	6	pls
water	75:51	0:0	4	;
water	76:8	0:0	4	pls
op	76:11	0:0	4	->
water	76:13	0:0	4	read_buffer
op	76:25	0:0	4	=
call	76:27	76:56	4	av_malloc
arg	76:37	76:56	5	INITIAL_BUFFER_SIZE
water	76:37	0:0	6	INITIAL_BUFFER_SIZE
water	76:57	0:0	4	;
if	77:8	82:8	4	(! pls -> read_buffer)
cond	77:12	77:18	5	! pls -> read_buffer
op	77:12	0:0	6	!
water	77:13	0:0	6	pls
op	77:16	0:0	6	->
water	77:18	0:0	6	read_buffer
stmts	77:30	82:8	5	
water	77:30	0:0	6	{
water	78:12	0:0	6	ret
op	78:16	0:0	6	=
call	78:18	78:32	6	AVERROR
arg	78:26	78:32	7	ENOMEM
water	78:26	0:0	8	ENOMEM
water	78:33	0:0	6	;
call	79:12	79:42	6	avformat_free_context
arg	79:34	79:42	7	pls->ctx
water	79:34	0:0	8	pls
op	79:37	0:0	8	->
water	79:39	0:0	8	ctx
water	79:43	0:0	6	;
water	80:12	0:0	6	pls
op	80:15	0:0	6	->
water	80:17	0:0	6	ctx
op	80:21	0:0	6	=
water	80:23	0:0	6	NULL
water	80:27	0:0	6	;
goto	81:12	81:21	6	fail
water	81:17	0:0	7	fail
water	82:8	0:0	6	}
call	83:8	84:47	4	ffio_init_context
arg	83:26	83:34	5	&pls->pb
op	83:26	0:0	6	&
water	83:27	0:0	6	pls
op	83:30	0:0	6	->
water	83:32	0:0	6	pb
arg	83:36	83:52	5	pls->read_buffer
water	83:36	0:0	6	pls
op	83:39	0:0	6	->
water	83:41	0:0	6	read_buffer
arg	83:54	83:73	5	INITIAL_BUFFER_SIZE
water	83:54	0:0	6	INITIAL_BUFFER_SIZE
arg	83:75	83:76	5	0
water	83:75	0:0	6	0
arg	83:78	83:81	5	pls
water	83:78	0:0	6	pls
arg	84:26	84:35	5	read_data
water	84:26	0:0	6	read_data
arg	84:37	84:41	5	NULL
water	84:37	0:0	6	NULL
arg	84:43	84:47	5	NULL
water	84:43	0:0	6	NULL
water	84:48	0:0	4	;
water	85:8	0:0	4	pls
op	85:11	0:0	4	->
water	85:13	0:0	4	pb
op	85:15	0:0	4	.
water	85:16	0:0	4	seekable
op	85:25	0:0	4	=
water	85:27	0:0	4	0
water	85:28	0:0	4	;
water	86:8	0:0	4	ret
op	86:12	0:0	4	=
call	86:14	87:46	4	av_probe_input_buffer
arg	86:36	86:44	5	&pls->pb
op	86:36	0:0	6	&
water	86:37	0:0	6	pls
op	86:40	0:0	6	->
water	86:42	0:0	6	pb
arg	86:46	86:53	5	&in_fmt
op	86:46	0:0	6	&
water	86:47	0:0	6	in_fmt
arg	86:55	86:76	5	pls->segments[0]->url
water	86:55	0:0	6	pls
op	86:58	0:0	6	->
water	86:60	0:0	6	segments
op	86:68	0:0	6	[
water	86:69	0:0	6	0
op	86:70	0:0	6	]
op	86:71	0:0	6	->
water	86:73	0:0	6	url
arg	87:36	87:40	5	NULL
water	87:36	0:0	6	NULL
arg	87:42	87:43	5	0
water	87:42	0:0	6	0
arg	87:45	87:46	5	0
water	87:45	0:0	6	0
water	87:47	0:0	4	;
if	88:8	97:8	4	(ret < 0)
cond	88:12	88:18	5	ret < 0
water	88:12	0:0	6	ret
op	88:16	0:0	6	<
water	88:18	0:0	6	0
stmts	88:21	97:8	5	
water	88:21	0:0	6	{
call	93:12	93:100	6	av_log
arg	93:19	93:20	7	s
water	93:19	0:0	8	s
arg	93:22	93:34	7	AV_LOG_ERROR
water	93:22	0:0	8	AV_LOG_ERROR
arg	93:36	93:77	7	"Error when loading first segment '%s'\n"
water	93:36	0:0	8	"Error when loading first segment '%s'\n"
arg	93:79	93:100	7	pls->segments[0]->url
water	93:79	0:0	8	pls
op	93:82	0:0	8	->
water	93:84	0:0	8	segments
op	93:92	0:0	8	[
water	93:93	0:0	8	0
op	93:94	0:0	8	]
op	93:95	0:0	8	->
water	93:97	0:0	8	url
water	93:101	0:0	6	;
call	94:12	94:42	6	avformat_free_context
arg	94:34	94:42	7	pls->ctx
water	94:34	0:0	8	pls
op	94:37	0:0	8	->
water	94:39	0:0	8	ctx
water	94:43	0:0	6	;
water	95:12	0:0	6	pls
op	95:15	0:0	6	->
water	95:17	0:0	6	ctx
op	95:21	0:0	6	=
water	95:23	0:0	6	NULL
water	95:27	0:0	6	;
goto	96:12	96:21	6	fail
water	96:17	0:0	7	fail
water	97:8	0:0	6	}
water	98:8	0:0	4	pls
op	98:11	0:0	4	->
water	98:13	0:0	4	ctx
op	98:16	0:0	4	->
water	98:18	0:0	4	pb
op	98:27	0:0	4	=
op	98:29	0:0	4	&
water	98:30	0:0	4	pls
op	98:33	0:0	4	->
water	98:35	0:0	4	pb
water	98:37	0:0	4	;
water	99:8	0:0	4	pls
op	99:11	0:0	4	->
water	99:13	0:0	4	stream_offset
op	99:27	0:0	4	=
water	99:29	0:0	4	stream_offset
water	99:42	0:0	4	;
if	100:8	101:21	4	(( ret =ff_copy_whitelists (pls -> ctx ,s ) ) < 0)
cond	100:12	100:54	5	( ret =ff_copy_whitelists (pls -> ctx ,s ) ) < 0
water	100:12	0:0	6	(
water	100:13	0:0	6	ret
op	100:17	0:0	6	=
call	100:19	100:49	6	ff_copy_whitelists
arg	100:38	100:46	7	pls->ctx
water	100:38	0:0	8	pls
op	100:41	0:0	8	->
water	100:43	0:0	8	ctx
arg	100:48	100:49	7	s
water	100:48	0:0	8	s
water	100:50	0:0	6	)
op	100:52	0:0	6	<
water	100:54	0:0	6	0
stmts	101:12	101:21	5	
goto	101:12	101:21	6	fail
water	101:17	0:0	7	fail
water	102:8	0:0	4	ret
op	102:12	0:0	4	=
call	102:14	102:80	4	avformat_open_input
arg	102:34	102:43	5	&pls->ctx
op	102:34	0:0	6	&
water	102:35	0:0	6	pls
op	102:38	0:0	6	->
water	102:40	0:0	6	ctx
arg	102:45	102:66	5	pls->segments[0]->url
water	102:45	0:0	6	pls
op	102:48	0:0	6	->
water	102:50	0:0	6	segments
op	102:58	0:0	6	[
water	102:59	0:0	6	0
op	102:60	0:0	6	]
op	102:61	0:0	6	->
water	102:63	0:0	6	url
arg	102:68	102:74	5	in_fmt
water	102:68	0:0	6	in_fmt
arg	102:76	102:80	5	NULL
water	102:76	0:0	6	NULL
water	102:81	0:0	4	;
if	103:8	104:21	4	(ret < 0)
cond	103:12	103:18	5	ret < 0
water	103:12	0:0	6	ret
op	103:16	0:0	6	<
water	103:18	0:0	6	0
stmts	104:12	104:21	5	
goto	104:12	104:21	6	fail
water	104:17	0:0	7	fail
if	105:8	110:8	4	(pls -> id3_deferred_extra && pls -> ctx -> nb_streams == 1)
cond	105:12	105:63	5	pls -> id3_deferred_extra && pls -> ctx -> nb_streams == 1
water	105:12	0:0	6	pls
op	105:15	0:0	6	->
water	105:17	0:0	6	id3_deferred_extra
op	105:36	0:0	6	&&
water	105:39	0:0	6	pls
op	105:42	0:0	6	->
water	105:44	0:0	6	ctx
op	105:47	0:0	6	->
water	105:49	0:0	6	nb_streams
op	105:60	0:0	6	==
water	105:63	0:0	6	1
stmts	105:66	110:8	5	
water	105:66	0:0	6	{
call	106:12	106:66	6	ff_id3v2_parse_apic
arg	106:32	106:40	7	pls->ctx
water	106:32	0:0	8	pls
op	106:35	0:0	8	->
water	106:37	0:0	8	ctx
arg	106:42	106:66	7	&pls->id3_deferred_extra
op	106:42	0:0	8	&
water	106:43	0:0	8	pls
op	106:46	0:0	8	->
water	106:48	0:0	8	id3_deferred_extra
water	106:67	0:0	6	;
call	107:12	107:53	6	avformat_queue_attached_pictures
arg	107:45	107:53	7	pls->ctx
water	107:45	0:0	8	pls
op	107:48	0:0	8	->
water	107:50	0:0	8	ctx
water	107:54	0:0	6	;
call	108:12	108:61	6	ff_id3v2_free_extra_meta
arg	108:37	108:61	7	&pls->id3_deferred_extra
op	108:37	0:0	8	&
water	108:38	0:0	8	pls
op	108:41	0:0	8	->
water	108:43	0:0	8	id3_deferred_extra
water	108:62	0:0	6	;
water	109:12	0:0	6	pls
op	109:15	0:0	6	->
water	109:17	0:0	6	id3_deferred_extra
op	109:36	0:0	6	=
water	109:38	0:0	6	NULL
water	109:42	0:0	6	;
water	110:8	0:0	6	}
water	111:8	0:0	4	pls
op	111:11	0:0	4	->
water	111:13	0:0	4	ctx
op	111:16	0:0	4	->
water	111:18	0:0	4	ctx_flags
op	111:28	0:0	4	&=
water	111:31	0:0	4	~AVFMTCTX_NOHEADER
water	111:49	0:0	4	;
water	112:8	0:0	4	ret
op	112:12	0:0	4	=
call	112:14	112:54	4	avformat_find_stream_info
arg	112:40	112:48	5	pls->ctx
water	112:40	0:0	6	pls
op	112:43	0:0	6	->
water	112:45	0:0	6	ctx
arg	112:50	112:54	5	NULL
water	112:50	0:0	6	NULL
water	112:55	0:0	4	;
if	113:8	114:21	4	(ret < 0)
cond	113:12	113:18	5	ret < 0
water	113:12	0:0	6	ret
op	113:16	0:0	6	<
water	113:18	0:0	6	0
stmts	114:12	114:21	5	
goto	114:12	114:21	6	fail
water	114:17	0:0	7	fail
if	115:8	116:83	4	(pls -> is_id3_timestamped == - 1)
cond	115:12	115:40	5	pls -> is_id3_timestamped == - 1
water	115:12	0:0	6	pls
op	115:15	0:0	6	->
water	115:17	0:0	6	is_id3_timestamped
op	115:36	0:0	6	==
op	115:39	0:0	6	-
water	115:40	0:0	6	1
stmts	116:12	116:83	5	
call	116:12	116:82	6	av_log
arg	116:19	116:20	7	s
water	116:19	0:0	8	s
arg	116:22	116:36	7	AV_LOG_WARNING
water	116:22	0:0	8	AV_LOG_WARNING
arg	116:38	116:82	7	"No expected HTTP requests have been made\n"
water	116:38	0:0	8	"No expected HTTP requests have been made\n"
water	116:83	0:0	6	;
for	118:8	131:8	4	(j = 0 ;j < pls -> ctx -> nb_streams;j ++)
forinit	118:13	118:18	5	j = 0 ;
water	118:13	0:0	6	j
op	118:15	0:0	6	=
water	118:17	0:0	6	0
water	118:18	0:0	6	;
cond	118:20	118:34	5	j < pls -> ctx -> nb_streams
water	118:20	0:0	6	j
op	118:22	0:0	6	<
water	118:24	0:0	6	pls
op	118:27	0:0	6	->
water	118:29	0:0	6	ctx
op	118:32	0:0	6	->
water	118:34	0:0	6	nb_streams
forexpr	118:46	118:47	5	j ++
water	118:46	0:0	6	j
op	118:47	0:0	6	++
stmts	118:51	131:8	5	
water	118:51	0:0	6	{
decl	119:12	119:55	6	AVStream	*st
op	119:25	0:0	6	=
call	119:27	119:54	7	avformat_new_stream
arg	119:47	119:48	8	s
water	119:47	0:0	9	s
arg	119:50	119:54	8	NULL
water	119:50	0:0	9	NULL
decl	120:12	120:48	6	AVStream	*ist
op	120:26	0:0	6	=
water	120:28	0:0	6	pls
op	120:31	0:0	6	->
water	120:33	0:0	6	ctx
op	120:36	0:0	6	->
water	120:38	0:0	6	streams
op	120:45	0:0	6	[
water	120:46	0:0	6	j
op	120:47	0:0	6	]
if	121:12	124:12	6	(! st)
cond	121:16	121:17	7	! st
op	121:16	0:0	8	!
water	121:17	0:0	8	st
stmts	121:21	124:12	7	
water	121:21	0:0	8	{
water	122:16	0:0	8	ret
op	122:20	0:0	8	=
call	122:22	122:36	8	AVERROR
arg	122:30	122:36	9	ENOMEM
water	122:30	0:0	10	ENOMEM
water	122:37	0:0	8	;
goto	123:16	123:25	8	fail
water	123:21	0:0	9	fail
water	124:12	0:0	8	}
water	125:12	0:0	6	st
op	125:14	0:0	6	->
water	125:16	0:0	6	id
op	125:19	0:0	6	=
water	125:21	0:0	6	i
water	125:22	0:0	6	;
call	126:12	126:71	6	avcodec_copy_context
arg	126:33	126:42	7	st->codec
water	126:33	0:0	8	st
op	126:35	0:0	8	->
water	126:37	0:0	8	codec
arg	126:44	126:71	7	pls->ctx->streams[j]->codec
water	126:44	0:0	8	pls
op	126:47	0:0	8	->
water	126:49	0:0	8	ctx
op	126:52	0:0	8	->
water	126:54	0:0	8	streams
op	126:61	0:0	8	[
water	126:62	0:0	8	j
op	126:63	0:0	8	]
op	126:64	0:0	8	->
water	126:66	0:0	8	codec
water	126:72	0:0	6	;
if	127:12	128:62	6	(pls -> is_id3_timestamped)
cond	127:16	127:21	7	pls -> is_id3_timestamped
water	127:16	0:0	8	pls
op	127:19	0:0	8	->
water	127:21	0:0	8	is_id3_timestamped
stmts	128:16	128:62	7	
call	128:16	128:61	8	avpriv_set_pts_info
arg	128:36	128:38	9	st
water	128:36	0:0	10	st
arg	128:40	128:42	9	33
water	128:40	0:0	10	33
arg	128:44	128:45	9	1
water	128:44	0:0	10	1
arg	128:47	128:61	9	MPEG_TIME_BASE
water	128:47	0:0	10	MPEG_TIME_BASE
water	128:62	0:0	8	;
else	129:12	130:99	6
stmts	130:16	130:99	7	
call	130:16	130:98	8	avpriv_set_pts_info
arg	130:36	130:38	9	st
water	130:36	0:0	10	st
arg	130:40	130:58	9	ist->pts_wrap_bits
water	130:40	0:0	10	ist
op	130:43	0:0	10	->
water	130:45	0:0	10	pts_wrap_bits
arg	130:60	130:78	9	ist->time_base.num
water	130:60	0:0	10	ist
op	130:63	0:0	10	->
water	130:65	0:0	10	time_base
op	130:74	0:0	10	.
water	130:75	0:0	10	num
arg	130:80	130:98	9	ist->time_base.den
water	130:80	0:0	10	ist
op	130:83	0:0	10	->
water	130:85	0:0	10	time_base
op	130:94	0:0	10	.
water	130:95	0:0	10	den
water	130:99	0:0	8	;
water	131:8	0:0	6	}
call	132:8	132:63	4	add_metadata_from_renditions
arg	132:37	132:38	5	s
water	132:37	0:0	6	s
arg	132:40	132:43	5	pls
water	132:40	0:0	6	pls
arg	132:45	132:63	5	AVMEDIA_TYPE_AUDIO
water	132:45	0:0	6	AVMEDIA_TYPE_AUDIO
water	132:64	0:0	4	;
call	133:8	133:63	4	add_metadata_from_renditions
arg	133:37	133:38	5	s
water	133:37	0:0	6	s
arg	133:40	133:43	5	pls
water	133:40	0:0	6	pls
arg	133:45	133:63	5	AVMEDIA_TYPE_VIDEO
water	133:45	0:0	6	AVMEDIA_TYPE_VIDEO
water	133:64	0:0	4	;
call	134:8	134:66	4	add_metadata_from_renditions
arg	134:37	134:38	5	s
water	134:37	0:0	6	s
arg	134:40	134:43	5	pls
water	134:40	0:0	6	pls
arg	134:45	134:66	5	AVMEDIA_TYPE_SUBTITLE
water	134:45	0:0	6	AVMEDIA_TYPE_SUBTITLE
water	134:67	0:0	4	;
water	135:8	0:0	4	stream_offset
op	135:22	0:0	4	+=
water	135:25	0:0	4	pls
op	135:28	0:0	4	->
water	135:30	0:0	4	ctx
op	135:33	0:0	4	->
water	135:35	0:0	4	nb_streams
water	135:45	0:0	4	;
water	136:4	0:0	4	}
for	138:4	157:4	2	(i = 0 ;i < c -> n_variants;i ++)
forinit	138:9	138:14	3	i = 0 ;
water	138:9	0:0	4	i
op	138:11	0:0	4	=
water	138:13	0:0	4	0
water	138:14	0:0	4	;
cond	138:16	138:23	3	i < c -> n_variants
water	138:16	0:0	4	i
op	138:18	0:0	4	<
water	138:20	0:0	4	c
op	138:21	0:0	4	->
water	138:23	0:0	4	n_variants
forexpr	138:35	138:36	3	i ++
water	138:35	0:0	4	i
op	138:36	0:0	4	++
stmts	138:40	157:4	3	
water	138:40	0:0	4	{
decl	139:8	139:42	4	struct variant	*v
op	139:26	0:0	4	=
water	139:28	0:0	4	c
op	139:29	0:0	4	->
water	139:31	0:0	4	variants
op	139:39	0:0	4	[
water	139:40	0:0	4	i
op	139:41	0:0	4	]
decl	140:8	140:26	4	AVProgram	*program
water	141:8	0:0	4	program
op	141:16	0:0	4	=
call	141:18	141:37	4	av_new_program
arg	141:33	141:34	5	s
water	141:33	0:0	6	s
arg	141:36	141:37	5	i
water	141:36	0:0	6	i
water	141:38	0:0	4	;
if	142:8	143:21	4	(! program)
cond	142:12	142:13	5	! program
op	142:12	0:0	6	!
water	142:13	0:0	6	program
stmts	143:12	143:21	5	
goto	143:12	143:21	6	fail
water	143:17	0:0	7	fail
call	144:8	144:78	4	av_dict_set_int
arg	144:24	144:42	5	&program->metadata
op	144:24	0:0	6	&
water	144:25	0:0	6	program
op	144:32	0:0	6	->
water	144:34	0:0	6	metadata
arg	144:44	144:61	5	"variant_bitrate"
water	144:44	0:0	6	"variant_bitrate"
arg	144:63	144:75	5	v->bandwidth
water	144:63	0:0	6	v
op	144:64	0:0	6	->
water	144:66	0:0	6	bandwidth
arg	144:77	144:78	5	0
water	144:77	0:0	6	0
water	144:79	0:0	4	;
for	145:8	156:8	4	(j = 0 ;j < v -> n_playlists;j ++)
forinit	145:13	145:18	5	j = 0 ;
water	145:13	0:0	6	j
op	145:15	0:0	6	=
water	145:17	0:0	6	0
water	145:18	0:0	6	;
cond	145:20	145:27	5	j < v -> n_playlists
water	145:20	0:0	6	j
op	145:22	0:0	6	<
water	145:24	0:0	6	v
op	145:25	0:0	6	->
water	145:27	0:0	6	n_playlists
forexpr	145:40	145:41	5	j ++
water	145:40	0:0	6	j
op	145:41	0:0	6	++
stmts	145:45	156:8	5	
water	145:45	0:0	6	{
decl	146:12	146:50	6	struct playlist	*pls
op	146:33	0:0	6	=
water	146:35	0:0	6	v
op	146:36	0:0	6	->
water	146:38	0:0	6	playlists
op	146:47	0:0	6	[
water	146:48	0:0	6	j
op	146:49	0:0	6	]
decl	147:12	147:65	6	int	is_shared
op	147:26	0:0	6	=
call	147:28	147:64	7	playlist_in_multiple_variants
arg	147:58	147:59	8	c
water	147:58	0:0	9	c
arg	147:61	147:64	8	pls
water	147:61	0:0	9	pls
decl	148:12	148:17	6	int	k
for	149:12	155:12	6	(k = 0 ;k < pls -> ctx -> nb_streams;k ++)
forinit	149:17	149:22	7	k = 0 ;
water	149:17	0:0	8	k
op	149:19	0:0	8	=
water	149:21	0:0	8	0
water	149:22	0:0	8	;
cond	149:24	149:38	7	k < pls -> ctx -> nb_streams
water	149:24	0:0	8	k
op	149:26	0:0	8	<
water	149:28	0:0	8	pls
op	149:31	0:0	8	->
water	149:33	0:0	8	ctx
op	149:36	0:0	8	->
water	149:38	0:0	8	nb_streams
forexpr	149:50	149:51	7	k ++
water	149:50	0:0	8	k
op	149:51	0:0	8	++
stmts	149:55	155:12	7	
water	149:55	0:0	8	{
decl	150:16	150:72	8	struct AVStream	*st
op	150:36	0:0	8	=
water	150:38	0:0	8	s
op	150:39	0:0	8	->
water	150:41	0:0	8	streams
op	150:48	0:0	8	[
water	150:49	0:0	8	pls
op	150:52	0:0	8	->
water	150:54	0:0	8	stream_offset
op	150:68	0:0	8	+
water	150:70	0:0	8	k
op	150:71	0:0	8	]
call	151:16	151:72	8	ff_program_add_stream_index
arg	151:44	151:45	9	s
water	151:44	0:0	10	s
arg	151:47	151:48	9	i
water	151:47	0:0	10	i
arg	151:50	151:72	9	pls->stream_offset+k
water	151:50	0:0	10	pls
op	151:53	0:0	10	->
water	151:55	0:0	10	stream_offset
op	151:69	0:0	10	+
water	151:71	0:0	10	k
water	151:73	0:0	8	;
if	153:16	154:86	8	(! is_shared && v -> bandwidth)
cond	153:20	153:37	9	! is_shared && v -> bandwidth
op	153:20	0:0	10	!
water	153:21	0:0	10	is_shared
op	153:31	0:0	10	&&
water	153:34	0:0	10	v
op	153:35	0:0	10	->
water	153:37	0:0	10	bandwidth
stmts	154:20	154:86	9	
call	154:20	154:85	10	av_dict_set_int
arg	154:36	154:49	11	&st->metadata
op	154:36	0:0	12	&
water	154:37	0:0	12	st
op	154:39	0:0	12	->
water	154:41	0:0	12	metadata
arg	154:51	154:68	11	"variant_bitrate"
water	154:51	0:0	12	"variant_bitrate"
arg	154:70	154:82	11	v->bandwidth
water	154:70	0:0	12	v
op	154:71	0:0	12	->
water	154:73	0:0	12	bandwidth
arg	154:84	154:85	11	0
water	154:84	0:0	12	0
water	154:86	0:0	10	;
water	155:12	0:0	8	}
water	156:8	0:0	6	}
water	157:4	0:0	4	}
return	158:4	158:12	2	0
water	158:11	0:0	3	0
label	159:0	159:4	2	fail :
call	160:4	160:24	2	free_playlist_list
arg	160:23	160:24	3	c
water	160:23	0:0	4	c
water	160:25	0:0	2	;
call	161:4	161:23	2	free_variant_list
arg	161:22	161:23	3	c
water	161:22	0:0	4	c
water	161:24	0:0	2	;
call	162:4	162:25	2	free_rendition_list
arg	162:24	162:25	3	c
water	162:24	0:0	4	c
water	162:26	0:0	2	;
return	163:4	163:14	2	ret
water	163:11	0:0	3	ret
