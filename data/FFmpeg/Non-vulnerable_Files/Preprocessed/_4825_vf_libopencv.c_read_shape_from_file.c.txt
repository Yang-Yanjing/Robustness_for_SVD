func	1:0	61:0	0	static int	read_shape_from_file
params	1:31	0:0	1	
param	1:32	1:41	2	int *	cols
param	1:43	1:52	2	int *	rows
param	1:54	1:66	2	int * *	values
param	1:68	1:88	2	const char *	filename
param	2:32	2:45	2	void *	log_ctx
stmnts	0:0	60:12	1	
decl	4:4	4:27	2	uint8_t	*buf
water	4:16	0:0	2	,
decl	4:4	4:27	2	uint8_t	*p
water	4:20	0:0	2	,
decl	4:4	4:27	2	uint8_t	*pend
decl	5:4	5:15	2	size_t	size
decl	6:4	6:20	2	int	ret
water	6:11	0:0	2	,
decl	6:4	6:20	2	int	i
water	6:14	0:0	2	,
decl	6:4	6:20	2	int	j
water	6:17	0:0	2	,
decl	6:4	6:20	2	int	w
if	7:4	8:18	2	(( ret =av_file_map (filename ,& buf ,& size ,0 ,log_ctx ) ) < 0)
cond	7:8	7:65	3	( ret =av_file_map (filename ,& buf ,& size ,0 ,log_ctx ) ) < 0
water	7:8	0:0	4	(
water	7:9	0:0	4	ret
op	7:13	0:0	4	=
call	7:15	7:60	4	av_file_map
arg	7:27	7:35	5	filename
water	7:27	0:0	6	filename
arg	7:37	7:41	5	&buf
op	7:37	0:0	6	&
water	7:38	0:0	6	buf
arg	7:43	7:48	5	&size
op	7:43	0:0	6	&
water	7:44	0:0	6	size
arg	7:50	7:51	5	0
water	7:50	0:0	6	0
arg	7:53	7:60	5	log_ctx
water	7:53	0:0	6	log_ctx
water	7:61	0:0	4	)
op	7:63	0:0	4	<
water	7:65	0:0	4	0
stmts	8:8	8:18	3	
return	8:8	8:18	4	ret
water	8:15	0:0	5	ret
water	10:4	0:0	2	w
op	10:6	0:0	2	=
water	10:8	0:0	2	0
water	10:9	0:0	2	;
for	11:4	25:4	2	(i = 0 ;i < size;i ++)
forinit	11:9	11:14	3	i = 0 ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:20	3	i < size
water	11:16	0:0	4	i
op	11:18	0:0	4	<
water	11:20	0:0	4	size
forexpr	11:26	11:27	3	i ++
water	11:26	0:0	4	i
op	11:27	0:0	4	++
stmts	11:31	25:4	3	
water	11:31	0:0	4	{
if	12:8	20:8	4	(buf [ i ] == '\n')
cond	12:12	12:22	5	buf [ i ] == '\n'
water	12:12	0:0	6	buf
op	12:15	0:0	6	[
water	12:16	0:0	6	i
op	12:17	0:0	6	]
op	12:19	0:0	6	==
water	12:22	0:0	6	'\n'
stmts	12:28	20:8	5	
water	12:28	0:0	6	{
if	13:12	16:12	6	(* rows == INT_MAX)
cond	13:16	13:25	7	* rows == INT_MAX
op	13:16	0:0	8	*
water	13:17	0:0	8	rows
op	13:22	0:0	8	==
water	13:25	0:0	8	INT_MAX
stmts	13:34	16:12	7	
water	13:34	0:0	8	{
call	14:16	14:92	8	av_log
arg	14:23	14:30	9	log_ctx
water	14:23	0:0	10	log_ctx
arg	14:32	14:44	9	AV_LOG_ERROR
water	14:32	0:0	10	AV_LOG_ERROR
arg	14:46	14:92	9	"Overflow on the number of rows in the file\n"
water	14:46	0:0	10	"Overflow on the number of rows in the file\n"
water	14:93	0:0	8	;
return	15:16	15:42	8	AVERROR_INVALIDDATA
water	15:23	0:0	9	AVERROR_INVALIDDATA
water	16:12	0:0	8	}
op	17:12	0:0	6	++
water	17:14	0:0	6	(
op	17:15	0:0	6	*
water	17:16	0:0	6	rows
water	17:20	0:0	6	)
water	17:21	0:0	6	;
op	18:12	0:0	6	*
water	18:13	0:0	6	cols
op	18:18	0:0	6	=
call	18:20	18:34	6	FFMAX
arg	18:26	18:31	7	*cols
op	18:26	0:0	8	*
water	18:27	0:0	8	cols
arg	18:33	18:34	7	w
water	18:33	0:0	8	w
water	18:35	0:0	6	;
water	19:12	0:0	6	w
op	19:14	0:0	6	=
water	19:16	0:0	6	0
water	19:17	0:0	6	;
water	20:8	0:0	6	}
else	20:10	23:8	4
stmts	20:15	23:8	5	
if	20:15	23:8	6	(w == INT_MAX)
cond	20:19	20:24	7	w == INT_MAX
water	20:19	0:0	8	w
op	20:21	0:0	8	==
water	20:24	0:0	8	INT_MAX
stmts	20:33	23:8	7	
water	20:33	0:0	8	{
call	21:12	21:91	8	av_log
arg	21:19	21:26	9	log_ctx
water	21:19	0:0	10	log_ctx
arg	21:28	21:40	9	AV_LOG_ERROR
water	21:28	0:0	10	AV_LOG_ERROR
arg	21:42	21:91	9	"Overflow on the number of columns in the file\n"
water	21:42	0:0	10	"Overflow on the number of columns in the file\n"
water	21:92	0:0	8	;
return	22:12	22:38	8	AVERROR_INVALIDDATA
water	22:19	0:0	9	AVERROR_INVALIDDATA
water	23:8	0:0	8	}
water	24:8	0:0	4	w
op	24:9	0:0	4	++
water	24:11	0:0	4	;
water	25:4	0:0	4	}
if	26:4	30:4	2	(* rows > ( SIZE_MAX / sizeof ( int ) / * cols ))
cond	26:8	26:47	3	* rows > ( SIZE_MAX / sizeof ( int ) / * cols )
op	26:8	0:0	4	*
water	26:9	0:0	4	rows
op	26:14	0:0	4	>
water	26:16	0:0	4	(
water	26:17	0:0	4	SIZE_MAX
op	26:26	0:0	4	/
op	26:28	0:0	4	sizeof
water	26:34	0:0	4	(
water	26:35	0:0	4	int
water	26:38	0:0	4	)
op	26:40	0:0	4	/
op	26:42	0:0	4	*
water	26:43	0:0	4	cols
water	26:47	0:0	4	)
stmts	26:50	30:4	3	
water	26:50	0:0	4	{
call	27:8	28:27	4	av_log
arg	27:15	27:22	5	log_ctx
water	27:15	0:0	6	log_ctx
arg	27:24	27:36	5	AV_LOG_ERROR
water	27:24	0:0	6	AV_LOG_ERROR
arg	27:38	27:73	5	"File with size %dx%d is too big\n"
water	27:38	0:0	6	"File with size %dx%d is too big\n"
arg	28:15	28:20	5	*rows
op	28:15	0:0	6	*
water	28:16	0:0	6	rows
arg	28:22	28:27	5	*cols
op	28:22	0:0	6	*
water	28:23	0:0	6	cols
water	28:28	0:0	4	;
return	29:8	29:34	4	AVERROR_INVALIDDATA
water	29:15	0:0	5	AVERROR_INVALIDDATA
water	30:4	0:0	4	}
if	31:4	32:30	2	(! ( * values =av_mallocz_array (sizeof ( int ) * * rows ,* cols ) ))
cond	31:8	31:64	3	! ( * values =av_mallocz_array (sizeof ( int ) * * rows ,* cols ) )
op	31:8	0:0	4	!
water	31:9	0:0	4	(
op	31:10	0:0	4	*
water	31:11	0:0	4	values
op	31:18	0:0	4	=
call	31:20	31:63	4	av_mallocz_array
arg	31:37	31:56	5	sizeof(int)**rows
op	31:37	0:0	6	sizeof
water	31:43	0:0	6	(
water	31:44	0:0	6	int
water	31:47	0:0	6	)
op	31:49	0:0	6	*
op	31:51	0:0	6	*
water	31:52	0:0	6	rows
arg	31:58	31:63	5	*cols
op	31:58	0:0	6	*
water	31:59	0:0	6	cols
water	31:64	0:0	4	)
stmts	32:8	32:30	3	
return	32:8	32:30	4	AVERROR(ENOMEM)
call	32:15	32:29	5	AVERROR
arg	32:23	32:29	6	ENOMEM
water	32:23	0:0	7	ENOMEM
water	34:4	0:0	2	p
op	34:9	0:0	2	=
water	34:11	0:0	2	buf
water	34:14	0:0	2	;
water	35:4	0:0	2	pend
op	35:9	0:0	2	=
water	35:11	0:0	2	buf
op	35:15	0:0	2	+
water	35:17	0:0	2	size
op	35:21	0:0	2	-
water	35:22	0:0	2	1
water	35:23	0:0	2	;
for	36:4	44:4	2	(i = 0 ;i < * rows;i ++)
forinit	36:9	36:14	3	i = 0 ;
water	36:9	0:0	4	i
op	36:11	0:0	4	=
water	36:13	0:0	4	0
water	36:14	0:0	4	;
cond	36:16	36:21	3	i < * rows
water	36:16	0:0	4	i
op	36:18	0:0	4	<
op	36:20	0:0	4	*
water	36:21	0:0	4	rows
forexpr	36:27	36:28	3	i ++
water	36:27	0:0	4	i
op	36:28	0:0	4	++
stmts	36:32	44:4	3	
water	36:32	0:0	4	{
for	37:8	43:8	4	(j = 0 ;;j ++)
forinit	37:13	37:18	5	j = 0 ;
water	37:13	0:0	6	j
op	37:15	0:0	6	=
water	37:17	0:0	6	0
water	37:18	0:0	6	;
cond	0:0	0:0	5	
forexpr	37:21	37:22	5	j ++
water	37:21	0:0	6	j
op	37:22	0:0	6	++
stmts	37:26	43:8	5	
water	37:26	0:0	6	{
if	38:12	41:12	6	(p > pend || * p == '\n')
cond	38:16	38:34	7	p > pend || * p == '\n'
water	38:16	0:0	8	p
op	38:18	0:0	8	>
water	38:20	0:0	8	pend
op	38:25	0:0	8	||
op	38:28	0:0	8	*
water	38:29	0:0	8	p
op	38:31	0:0	8	==
water	38:34	0:0	8	'\n'
stmts	38:40	41:12	7	
water	38:40	0:0	8	{
water	39:16	0:0	8	p
op	39:17	0:0	8	++
water	39:19	0:0	8	;
break	40:16	40:21	8	
water	41:12	0:0	8	}
else	41:14	42:61	6
stmts	42:16	42:61	7	
water	42:16	0:0	8	(
op	42:17	0:0	8	*
water	42:18	0:0	8	values
water	42:24	0:0	8	)
op	42:25	0:0	8	[
op	42:26	0:0	8	*
water	42:27	0:0	8	cols
op	42:31	0:0	8	*
water	42:32	0:0	8	i
op	42:34	0:0	8	+
water	42:36	0:0	8	j
op	42:37	0:0	8	]
op	42:39	0:0	8	=
op	42:41	0:0	8	!
op	42:42	0:0	8	!
call	42:43	42:60	8	av_isgraph
arg	42:54	42:60	9	*(p++)
op	42:54	0:0	10	*
water	42:55	0:0	10	(
water	42:56	0:0	10	p
op	42:57	0:0	10	++
water	42:59	0:0	10	)
water	42:61	0:0	8	;
water	43:8	0:0	6	}
water	44:4	0:0	4	}
call	45:4	45:27	2	av_file_unmap
arg	45:18	45:21	3	buf
water	45:18	0:0	4	buf
arg	45:23	45:27	3	size
water	45:23	0:0	4	size
water	45:28	0:0	2	;
water	47:4	0:0	2	{
decl	48:8	48:18	2	char	*line
if	49:8	50:34	2	(! ( line =av_malloc (* cols + 1 ) ))
cond	49:12	49:41	3	! ( line =av_malloc (* cols + 1 ) )
op	49:12	0:0	4	!
water	49:13	0:0	4	(
water	49:14	0:0	4	line
op	49:19	0:0	4	=
call	49:21	49:40	4	av_malloc
arg	49:31	49:40	5	*cols+1
op	49:31	0:0	6	*
water	49:32	0:0	6	cols
op	49:37	0:0	6	+
water	49:39	0:0	6	1
water	49:41	0:0	4	)
stmts	50:12	50:34	3	
return	50:12	50:34	4	AVERROR(ENOMEM)
call	50:19	50:33	5	AVERROR
arg	50:27	50:33	6	ENOMEM
water	50:27	0:0	7	ENOMEM
for	51:8	56:8	2	(i = 0 ;i < * rows;i ++)
forinit	51:13	51:18	3	i = 0 ;
water	51:13	0:0	4	i
op	51:15	0:0	4	=
water	51:17	0:0	4	0
water	51:18	0:0	4	;
cond	51:20	51:25	3	i < * rows
water	51:20	0:0	4	i
op	51:22	0:0	4	<
op	51:24	0:0	4	*
water	51:25	0:0	4	rows
forexpr	51:31	51:32	3	i ++
water	51:31	0:0	4	i
op	51:32	0:0	4	++
stmts	51:36	56:8	3	
water	51:36	0:0	4	{
for	52:12	53:62	4	(j = 0 ;j < * cols;j ++)
forinit	52:17	52:22	5	j = 0 ;
water	52:17	0:0	6	j
op	52:19	0:0	6	=
water	52:21	0:0	6	0
water	52:22	0:0	6	;
cond	52:24	52:29	5	j < * cols
water	52:24	0:0	6	j
op	52:26	0:0	6	<
op	52:28	0:0	6	*
water	52:29	0:0	6	cols
forexpr	52:35	52:36	5	j ++
water	52:35	0:0	6	j
op	52:36	0:0	6	++
stmts	53:16	53:62	5	
water	53:16	0:0	6	line
op	53:20	0:0	6	[
water	53:21	0:0	6	j
op	53:22	0:0	6	]
op	53:24	0:0	6	=
water	53:26	0:0	6	(
op	53:27	0:0	6	*
water	53:28	0:0	6	values
water	53:34	0:0	6	)
op	53:35	0:0	6	[
water	53:36	0:0	6	i
op	53:38	0:0	6	*
op	53:40	0:0	6	*
water	53:41	0:0	6	cols
op	53:46	0:0	6	+
water	53:48	0:0	6	j
op	53:49	0:0	6	]
water	53:51	0:0	6	?
water	53:53	0:0	6	'@'
water	53:57	0:0	6	:
water	53:59	0:0	6	' '
water	53:62	0:0	6	;
water	54:12	0:0	4	line
op	54:16	0:0	4	[
water	54:17	0:0	4	j
op	54:18	0:0	4	]
op	54:20	0:0	4	=
water	54:22	0:0	4	0
water	54:23	0:0	4	;
call	55:12	55:62	4	av_log
arg	55:19	55:26	5	log_ctx
water	55:19	0:0	6	log_ctx
arg	55:28	55:40	5	AV_LOG_DEBUG
water	55:28	0:0	6	AV_LOG_DEBUG
arg	55:42	55:53	5	"%3d: %s\n"
water	55:42	0:0	6	"%3d: %s\n"
arg	55:55	55:56	5	i
water	55:55	0:0	6	i
arg	55:58	55:62	5	line
water	55:58	0:0	6	line
water	55:63	0:0	4	;
water	56:8	0:0	4	}
call	57:8	57:20	2	av_free
arg	57:16	57:20	3	line
water	57:16	0:0	4	line
water	57:21	0:0	2	;
water	58:4	0:0	2	}
return	60:4	60:12	2	0
water	60:11	0:0	3	0
