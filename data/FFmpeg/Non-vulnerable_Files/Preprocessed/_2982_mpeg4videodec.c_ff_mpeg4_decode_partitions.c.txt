func	1:0	52:0	0	int	ff_mpeg4_decode_partitions
params	1:30	0:0	1	
param	1:31	1:51	2	Mpeg4DecContext *	ctx
stmnts	0:0	51:12	1	
decl	3:4	3:31	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	m
decl	4:4	4:14	2	int	mb_num
decl	5:4	5:106	2	const int	part_a_error
op	5:27	0:0	2	=
water	5:29	0:0	2	s
op	5:30	0:0	2	->
water	5:32	0:0	2	pict_type
op	5:42	0:0	2	==
water	5:45	0:0	2	AV_PICTURE_TYPE_I
water	5:63	0:0	2	?
water	5:65	0:0	2	(
water	5:66	0:0	2	ER_DC_ERROR
op	5:78	0:0	2	|
water	5:80	0:0	2	ER_MV_ERROR
water	5:91	0:0	2	)
water	5:93	0:0	2	:
water	5:95	0:0	2	ER_MV_ERROR
decl	6:4	6:104	2	const int	part_a_end
op	6:27	0:0	2	=
water	6:29	0:0	2	s
op	6:30	0:0	2	->
water	6:32	0:0	2	pict_type
op	6:42	0:0	2	==
water	6:45	0:0	2	AV_PICTURE_TYPE_I
water	6:63	0:0	2	?
water	6:65	0:0	2	(
water	6:66	0:0	2	ER_DC_END
op	6:78	0:0	2	|
water	6:80	0:0	2	ER_MV_END
water	6:89	0:0	2	)
water	6:93	0:0	2	:
water	6:95	0:0	2	ER_MV_END
water	7:4	0:0	2	mb_num
op	7:11	0:0	2	=
call	7:13	7:41	2	mpeg4_decode_partition_a
arg	7:38	7:41	3	ctx
water	7:38	0:0	4	ctx
water	7:42	0:0	2	;
if	8:4	12:4	2	(mb_num < 0)
cond	8:8	8:17	3	mb_num < 0
water	8:8	0:0	4	mb_num
op	8:15	0:0	4	<
water	8:17	0:0	4	0
stmts	8:20	12:4	3	
water	8:20	0:0	4	{
call	9:8	10:54	4	ff_er_add_slice
arg	9:24	9:30	5	&s->er
op	9:24	0:0	6	&
water	9:25	0:0	6	s
op	9:26	0:0	6	->
water	9:28	0:0	6	er
arg	9:32	9:46	5	s->resync_mb_x
water	9:32	0:0	6	s
op	9:33	0:0	6	->
water	9:35	0:0	6	resync_mb_x
arg	9:48	9:62	5	s->resync_mb_y
water	9:48	0:0	6	s
op	9:49	0:0	6	->
water	9:51	0:0	6	resync_mb_y
arg	10:24	10:31	5	s->mb_x
water	10:24	0:0	6	s
op	10:25	0:0	6	->
water	10:27	0:0	6	mb_x
arg	10:33	10:40	5	s->mb_y
water	10:33	0:0	6	s
op	10:34	0:0	6	->
water	10:36	0:0	6	mb_y
arg	10:42	10:54	5	part_a_error
water	10:42	0:0	6	part_a_error
water	10:55	0:0	4	;
return	11:8	11:17	4	-1
op	11:15	0:0	5	-
water	11:16	0:0	5	1
water	12:4	0:0	4	}
if	13:4	18:4	2	(s -> resync_mb_x + s -> resync_mb_y * s -> mb_width + mb_num > s -> mb_num)
cond	13:8	13:68	3	s -> resync_mb_x + s -> resync_mb_y * s -> mb_width + mb_num > s -> mb_num
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	resync_mb_x
op	13:23	0:0	4	+
water	13:25	0:0	4	s
op	13:26	0:0	4	->
water	13:28	0:0	4	resync_mb_y
op	13:40	0:0	4	*
water	13:42	0:0	4	s
op	13:43	0:0	4	->
water	13:45	0:0	4	mb_width
op	13:54	0:0	4	+
water	13:56	0:0	4	mb_num
op	13:63	0:0	4	>
water	13:65	0:0	4	s
op	13:66	0:0	4	->
water	13:68	0:0	4	mb_num
stmts	13:76	18:4	3	
water	13:76	0:0	4	{
call	14:8	14:66	4	av_log
arg	14:15	14:23	5	s->avctx
water	14:15	0:0	6	s
op	14:16	0:0	6	->
water	14:18	0:0	6	avctx
arg	14:25	14:37	5	AV_LOG_ERROR
water	14:25	0:0	6	AV_LOG_ERROR
arg	14:39	14:66	5	"slice below monitor ...\n"
water	14:39	0:0	6	"slice below monitor ...\n"
water	14:67	0:0	4	;
call	15:8	16:54	4	ff_er_add_slice
arg	15:24	15:30	5	&s->er
op	15:24	0:0	6	&
water	15:25	0:0	6	s
op	15:26	0:0	6	->
water	15:28	0:0	6	er
arg	15:32	15:46	5	s->resync_mb_x
water	15:32	0:0	6	s
op	15:33	0:0	6	->
water	15:35	0:0	6	resync_mb_x
arg	15:48	15:62	5	s->resync_mb_y
water	15:48	0:0	6	s
op	15:49	0:0	6	->
water	15:51	0:0	6	resync_mb_y
arg	16:24	16:31	5	s->mb_x
water	16:24	0:0	6	s
op	16:25	0:0	6	->
water	16:27	0:0	6	mb_x
arg	16:33	16:40	5	s->mb_y
water	16:33	0:0	6	s
op	16:34	0:0	6	->
water	16:36	0:0	6	mb_y
arg	16:42	16:54	5	part_a_error
water	16:42	0:0	6	part_a_error
water	16:55	0:0	4	;
return	17:8	17:17	4	-1
op	17:15	0:0	5	-
water	17:16	0:0	5	1
water	18:4	0:0	4	}
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	mb_num_left
op	19:19	0:0	2	=
water	19:21	0:0	2	mb_num
water	19:27	0:0	2	;
if	20:4	29:4	2	(s -> pict_type == AV_PICTURE_TYPE_I)
cond	20:8	20:24	3	s -> pict_type == AV_PICTURE_TYPE_I
water	20:8	0:0	4	s
op	20:9	0:0	4	->
water	20:11	0:0	4	pict_type
op	20:21	0:0	4	==
water	20:24	0:0	4	AV_PICTURE_TYPE_I
stmts	20:43	29:4	3	
water	20:43	0:0	4	{
while	21:8	22:32	4	(show_bits (& s -> gb ,9 ) == 1)
cond	21:15	21:39	5	show_bits (& s -> gb ,9 ) == 1
call	21:15	21:34	6	show_bits
arg	21:25	21:31	7	&s->gb
op	21:25	0:0	8	&
water	21:26	0:0	8	s
op	21:27	0:0	8	->
water	21:29	0:0	8	gb
arg	21:33	21:34	7	9
water	21:33	0:0	8	9
op	21:36	0:0	6	==
water	21:39	0:0	6	1
stmts	22:12	22:32	5	
call	22:12	22:31	6	skip_bits
arg	22:22	22:28	7	&s->gb
op	22:22	0:0	8	&
water	22:23	0:0	8	s
op	22:24	0:0	8	->
water	22:26	0:0	8	gb
arg	22:30	22:31	7	9
water	22:30	0:0	8	9
water	22:32	0:0	6	;
if	23:8	28:8	4	(get_bits_long (& s -> gb ,19 ) != DC_MARKER)
cond	23:12	23:41	5	get_bits_long (& s -> gb ,19 ) != DC_MARKER
call	23:12	23:36	6	get_bits_long
arg	23:26	23:32	7	&s->gb
op	23:26	0:0	8	&
water	23:27	0:0	8	s
op	23:28	0:0	8	->
water	23:30	0:0	8	gb
arg	23:34	23:36	7	19
water	23:34	0:0	8	19
op	23:38	0:0	6	!=
water	23:41	0:0	6	DC_MARKER
stmts	23:52	28:8	5	
water	23:52	0:0	6	{
call	24:12	26:35	6	av_log
arg	24:19	24:27	7	s->avctx
water	24:19	0:0	8	s
op	24:20	0:0	8	->
water	24:22	0:0	8	avctx
arg	24:29	24:41	7	AV_LOG_ERROR
water	24:29	0:0	8	AV_LOG_ERROR
arg	25:19	25:70	7	"marker missing after first I partition at %d %d\n"
water	25:19	0:0	8	"marker missing after first I partition at %d %d\n"
arg	26:19	26:26	7	s->mb_x
water	26:19	0:0	8	s
op	26:20	0:0	8	->
water	26:22	0:0	8	mb_x
arg	26:28	26:35	7	s->mb_y
water	26:28	0:0	8	s
op	26:29	0:0	8	->
water	26:31	0:0	8	mb_y
water	26:36	0:0	6	;
return	27:12	27:21	6	-1
op	27:19	0:0	7	-
water	27:20	0:0	7	1
water	28:8	0:0	6	}
water	29:4	0:0	4	}
else	29:6	38:4	2
stmts	29:11	38:4	3	
water	29:11	0:0	4	{
while	30:8	31:33	4	(show_bits (& s -> gb ,10 ) == 1)
cond	30:15	30:40	5	show_bits (& s -> gb ,10 ) == 1
call	30:15	30:35	6	show_bits
arg	30:25	30:31	7	&s->gb
op	30:25	0:0	8	&
water	30:26	0:0	8	s
op	30:27	0:0	8	->
water	30:29	0:0	8	gb
arg	30:33	30:35	7	10
water	30:33	0:0	8	10
op	30:37	0:0	6	==
water	30:40	0:0	6	1
stmts	31:12	31:33	5	
call	31:12	31:32	6	skip_bits
arg	31:22	31:28	7	&s->gb
op	31:22	0:0	8	&
water	31:23	0:0	8	s
op	31:24	0:0	8	->
water	31:26	0:0	8	gb
arg	31:30	31:32	7	10
water	31:30	0:0	8	10
water	31:33	0:0	6	;
if	32:8	37:8	4	(get_bits (& s -> gb ,17 ) != MOTION_MARKER)
cond	32:12	32:36	5	get_bits (& s -> gb ,17 ) != MOTION_MARKER
call	32:12	32:31	6	get_bits
arg	32:21	32:27	7	&s->gb
op	32:21	0:0	8	&
water	32:22	0:0	8	s
op	32:23	0:0	8	->
water	32:25	0:0	8	gb
arg	32:29	32:31	7	17
water	32:29	0:0	8	17
op	32:33	0:0	6	!=
water	32:36	0:0	6	MOTION_MARKER
stmts	32:51	37:8	5	
water	32:51	0:0	6	{
call	33:12	35:35	6	av_log
arg	33:19	33:27	7	s->avctx
water	33:19	0:0	8	s
op	33:20	0:0	8	->
water	33:22	0:0	8	avctx
arg	33:29	33:41	7	AV_LOG_ERROR
water	33:29	0:0	8	AV_LOG_ERROR
arg	34:19	34:70	7	"marker missing after first P partition at %d %d\n"
water	34:19	0:0	8	"marker missing after first P partition at %d %d\n"
arg	35:19	35:26	7	s->mb_x
water	35:19	0:0	8	s
op	35:20	0:0	8	->
water	35:22	0:0	8	mb_x
arg	35:28	35:35	7	s->mb_y
water	35:28	0:0	8	s
op	35:29	0:0	8	->
water	35:31	0:0	8	mb_y
water	35:36	0:0	6	;
return	36:12	36:21	6	-1
op	36:19	0:0	7	-
water	36:20	0:0	7	1
water	37:8	0:0	6	}
water	38:4	0:0	4	}
call	39:4	40:52	2	ff_er_add_slice
arg	39:20	39:26	3	&s->er
op	39:20	0:0	4	&
water	39:21	0:0	4	s
op	39:22	0:0	4	->
water	39:24	0:0	4	er
arg	39:28	39:42	3	s->resync_mb_x
water	39:28	0:0	4	s
op	39:29	0:0	4	->
water	39:31	0:0	4	resync_mb_x
arg	39:44	39:58	3	s->resync_mb_y
water	39:44	0:0	4	s
op	39:45	0:0	4	->
water	39:47	0:0	4	resync_mb_y
arg	40:20	40:31	3	s->mb_x-1
water	40:20	0:0	4	s
op	40:21	0:0	4	->
water	40:23	0:0	4	mb_x
op	40:28	0:0	4	-
water	40:30	0:0	4	1
arg	40:33	40:40	3	s->mb_y
water	40:33	0:0	4	s
op	40:34	0:0	4	->
water	40:36	0:0	4	mb_y
arg	40:42	40:52	3	part_a_end
water	40:42	0:0	4	part_a_end
water	40:53	0:0	2	;
if	41:4	46:4	2	(mpeg4_decode_partition_b (s ,mb_num ) < 0)
cond	41:8	41:46	3	mpeg4_decode_partition_b (s ,mb_num ) < 0
call	41:8	41:42	4	mpeg4_decode_partition_b
arg	41:33	41:34	5	s
water	41:33	0:0	6	s
arg	41:36	41:42	5	mb_num
water	41:36	0:0	6	mb_num
op	41:44	0:0	4	<
water	41:46	0:0	4	0
stmts	41:49	46:4	3	
water	41:49	0:0	4	{
if	42:8	44:58	4	(s -> pict_type == AV_PICTURE_TYPE_P)
cond	42:12	42:28	5	s -> pict_type == AV_PICTURE_TYPE_P
water	42:12	0:0	6	s
op	42:13	0:0	6	->
water	42:15	0:0	6	pict_type
op	42:25	0:0	6	==
water	42:28	0:0	6	AV_PICTURE_TYPE_P
stmts	43:12	44:58	5	
call	43:12	44:57	6	ff_er_add_slice
arg	43:28	43:34	7	&s->er
op	43:28	0:0	8	&
water	43:29	0:0	8	s
op	43:30	0:0	8	->
water	43:32	0:0	8	er
arg	43:36	43:50	7	s->resync_mb_x
water	43:36	0:0	8	s
op	43:37	0:0	8	->
water	43:39	0:0	8	resync_mb_x
arg	43:52	43:66	7	s->resync_mb_y
water	43:52	0:0	8	s
op	43:53	0:0	8	->
water	43:55	0:0	8	resync_mb_y
arg	44:28	44:35	7	s->mb_x
water	44:28	0:0	8	s
op	44:29	0:0	8	->
water	44:31	0:0	8	mb_x
arg	44:37	44:44	7	s->mb_y
water	44:37	0:0	8	s
op	44:38	0:0	8	->
water	44:40	0:0	8	mb_y
arg	44:46	44:57	7	ER_DC_ERROR
water	44:46	0:0	8	ER_DC_ERROR
water	44:58	0:0	6	;
return	45:8	45:17	4	-1
op	45:15	0:0	5	-
water	45:16	0:0	5	1
water	46:4	0:0	4	}
else	46:6	50:4	2
stmts	46:11	50:4	3	
water	46:11	0:0	4	{
if	47:8	49:60	4	(s -> pict_type == AV_PICTURE_TYPE_P)
cond	47:12	47:28	5	s -> pict_type == AV_PICTURE_TYPE_P
water	47:12	0:0	6	s
op	47:13	0:0	6	->
water	47:15	0:0	6	pict_type
op	47:25	0:0	6	==
water	47:28	0:0	6	AV_PICTURE_TYPE_P
stmts	48:12	49:60	5	
call	48:12	49:59	6	ff_er_add_slice
arg	48:28	48:34	7	&s->er
op	48:28	0:0	8	&
water	48:29	0:0	8	s
op	48:30	0:0	8	->
water	48:32	0:0	8	er
arg	48:36	48:50	7	s->resync_mb_x
water	48:36	0:0	8	s
op	48:37	0:0	8	->
water	48:39	0:0	8	resync_mb_x
arg	48:52	48:66	7	s->resync_mb_y
water	48:52	0:0	8	s
op	48:53	0:0	8	->
water	48:55	0:0	8	resync_mb_y
arg	49:28	49:39	7	s->mb_x-1
water	49:28	0:0	8	s
op	49:29	0:0	8	->
water	49:31	0:0	8	mb_x
op	49:36	0:0	8	-
water	49:38	0:0	8	1
arg	49:41	49:48	7	s->mb_y
water	49:41	0:0	8	s
op	49:42	0:0	8	->
water	49:44	0:0	8	mb_y
arg	49:50	49:59	7	ER_DC_END
water	49:50	0:0	8	ER_DC_END
water	49:60	0:0	6	;
water	50:4	0:0	4	}
return	51:4	51:12	2	0
water	51:11	0:0	3	0
