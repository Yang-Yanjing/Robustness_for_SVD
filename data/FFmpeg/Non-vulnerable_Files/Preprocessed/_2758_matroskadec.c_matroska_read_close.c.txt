func	1:0	13:0	0	static int	matroska_read_close
params	1:30	0:0	1	
param	1:31	1:49	2	AVFormatContext *	s
stmnts	0:0	12:12	1	
decl	3:4	3:49	2	MatroskaDemuxContext	*matroska
op	3:35	0:0	2	=
water	3:37	0:0	2	s
op	3:38	0:0	2	->
water	3:40	0:0	2	priv_data
decl	4:4	4:49	2	MatroskaTrack	*tracks
op	4:26	0:0	2	=
water	4:28	0:0	2	matroska
op	4:36	0:0	2	->
water	4:38	0:0	2	tracks
op	4:44	0:0	2	.
water	4:45	0:0	2	elem
decl	5:4	5:9	2	int	n
call	6:4	6:33	2	matroska_clear_queue
arg	6:25	6:33	3	matroska
water	6:25	0:0	4	matroska
water	6:34	0:0	2	;
for	7:4	9:42	2	(n = 0 ;n < matroska -> tracks . nb_elem;n ++)
forinit	7:9	7:14	3	n = 0 ;
water	7:9	0:0	4	n
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:37	3	n < matroska -> tracks . nb_elem
water	7:16	0:0	4	n
op	7:18	0:0	4	<
water	7:20	0:0	4	matroska
op	7:28	0:0	4	->
water	7:30	0:0	4	tracks
op	7:36	0:0	4	.
water	7:37	0:0	4	nb_elem
forexpr	7:46	7:47	3	n ++
water	7:46	0:0	4	n
op	7:47	0:0	4	++
stmts	8:8	9:42	3	
if	8:8	9:42	4	(tracks [ n ] . type == MATROSKA_TRACK_TYPE_AUDIO)
cond	8:12	8:30	5	tracks [ n ] . type == MATROSKA_TRACK_TYPE_AUDIO
water	8:12	0:0	6	tracks
op	8:18	0:0	6	[
water	8:19	0:0	6	n
op	8:20	0:0	6	]
op	8:21	0:0	6	.
water	8:22	0:0	6	type
op	8:27	0:0	6	==
water	8:30	0:0	6	MATROSKA_TRACK_TYPE_AUDIO
stmts	9:12	9:42	5	
call	9:12	9:41	6	av_freep
arg	9:21	9:41	7	&tracks[n].audio.buf
op	9:21	0:0	8	&
water	9:22	0:0	8	tracks
op	9:28	0:0	8	[
water	9:29	0:0	8	n
op	9:30	0:0	8	]
op	9:31	0:0	8	.
water	9:32	0:0	8	audio
op	9:37	0:0	8	.
water	9:38	0:0	8	buf
water	9:42	0:0	6	;
call	10:4	10:58	2	ebml_free
arg	10:14	10:30	3	matroska_cluster
water	10:14	0:0	4	matroska_cluster
arg	10:32	10:58	3	&matroska->current_cluster
op	10:32	0:0	4	&
water	10:33	0:0	4	matroska
op	10:41	0:0	4	->
water	10:43	0:0	4	current_cluster
water	10:59	0:0	2	;
call	11:4	11:40	2	ebml_free
arg	11:14	11:30	3	matroska_segment
water	11:14	0:0	4	matroska_segment
arg	11:32	11:40	3	matroska
water	11:32	0:0	4	matroska
water	11:41	0:0	2	;
return	12:4	12:12	2	0
water	12:11	0:0	3	0
