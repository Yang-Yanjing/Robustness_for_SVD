func	1:15	49:0	0	int	opengl_init_context
params	1:38	0:0	1	
param	1:39	1:60	2	OpenGLContext *	opengl
stmnts	0:0	48:14	1	
decl	3:4	3:14	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:14	2	int	ret
decl	4:4	4:34	2	const AVPixFmtDescriptor	*desc
if	5:4	6:17	2	(( ret =opengl_compile_shaders (opengl ,opengl -> pix_fmt ) ) < 0)
cond	5:8	5:66	3	( ret =opengl_compile_shaders (opengl ,opengl -> pix_fmt ) ) < 0
water	5:8	0:0	4	(
water	5:9	0:0	4	ret
op	5:13	0:0	4	=
call	5:15	5:61	4	opengl_compile_shaders
arg	5:38	5:44	5	opengl
water	5:38	0:0	6	opengl
arg	5:46	5:61	5	opengl->pix_fmt
water	5:46	0:0	6	opengl
op	5:52	0:0	6	->
water	5:54	0:0	6	pix_fmt
water	5:62	0:0	4	)
op	5:64	0:0	4	<
water	5:66	0:0	4	0
stmts	6:8	6:17	3	
goto	6:8	6:17	4	fail
water	6:13	0:0	5	fail
water	7:4	0:0	2	desc
op	7:9	0:0	2	=
call	7:11	7:46	2	av_pix_fmt_desc_get
arg	7:31	7:46	3	opengl->pix_fmt
water	7:31	0:0	4	opengl
op	7:37	0:0	4	->
water	7:39	0:0	4	pix_fmt
water	7:47	0:0	2	;
call	8:4	8:66	2	av_assert0
arg	8:15	8:66	3	desc->nb_components>0&&desc->nb_components<=4
water	8:15	0:0	4	desc
op	8:19	0:0	4	->
water	8:21	0:0	4	nb_components
op	8:35	0:0	4	>
water	8:37	0:0	4	0
op	8:39	0:0	4	&&
water	8:42	0:0	4	desc
op	8:46	0:0	4	->
water	8:48	0:0	4	nb_components
op	8:62	0:0	4	<=
water	8:65	0:0	4	4
water	8:67	0:0	2	;
call	9:4	9:59	2	glGenTextures
arg	9:18	9:37	3	desc->nb_components
water	9:18	0:0	4	desc
op	9:22	0:0	4	->
water	9:24	0:0	4	nb_components
arg	9:39	9:59	3	opengl->texture_name
water	9:39	0:0	4	opengl
op	9:45	0:0	4	->
water	9:47	0:0	4	texture_name
water	9:60	0:0	2	;
call	10:4	10:57	2	opengl->glprocs.glGenBuffers
arg	10:33	10:34	3	2
water	10:33	0:0	4	2
arg	10:36	10:57	3	&opengl->index_buffer
op	10:36	0:0	4	&
water	10:37	0:0	4	opengl
op	10:43	0:0	4	->
water	10:45	0:0	4	index_buffer
water	10:58	0:0	2	;
if	11:4	15:4	2	(! opengl -> index_buffer || ! opengl -> vertex_buffer)
cond	11:8	11:42	3	! opengl -> index_buffer || ! opengl -> vertex_buffer
op	11:8	0:0	4	!
water	11:9	0:0	4	opengl
op	11:15	0:0	4	->
water	11:17	0:0	4	index_buffer
op	11:30	0:0	4	||
op	11:33	0:0	4	!
water	11:34	0:0	4	opengl
op	11:40	0:0	4	->
water	11:42	0:0	4	vertex_buffer
stmts	11:57	15:4	3	
water	11:57	0:0	4	{
call	12:8	12:66	4	av_log
arg	12:15	12:21	5	opengl
water	12:15	0:0	6	opengl
arg	12:23	12:35	5	AV_LOG_ERROR
water	12:23	0:0	6	AV_LOG_ERROR
arg	12:37	12:66	5	"Buffer generation failed.\n"
water	12:37	0:0	6	"Buffer generation failed.\n"
water	12:67	0:0	4	;
water	13:8	0:0	4	ret
op	13:12	0:0	4	=
water	13:14	0:0	4	AVERROR_EXTERNAL
water	13:30	0:0	4	;
goto	14:8	14:17	4	fail
water	14:13	0:0	5	fail
water	15:4	0:0	4	}
call	16:4	16:91	2	opengl_configure_texture
arg	16:29	16:35	3	opengl
water	16:29	0:0	4	opengl
arg	16:37	16:60	3	opengl->texture_name[0]
water	16:37	0:0	4	opengl
op	16:43	0:0	4	->
water	16:45	0:0	4	texture_name
op	16:57	0:0	4	[
water	16:58	0:0	4	0
op	16:59	0:0	4	]
arg	16:62	16:75	3	opengl->width
water	16:62	0:0	4	opengl
op	16:68	0:0	4	->
water	16:70	0:0	4	width
arg	16:77	16:91	3	opengl->height
water	16:77	0:0	4	opengl
op	16:83	0:0	4	->
water	16:85	0:0	4	height
water	16:92	0:0	2	;
if	17:4	36:4	2	(desc -> nb_components > 1)
cond	17:8	17:30	3	desc -> nb_components > 1
water	17:8	0:0	4	desc
op	17:12	0:0	4	->
water	17:14	0:0	4	nb_components
op	17:28	0:0	4	>
water	17:30	0:0	4	1
stmts	17:33	36:4	3	
water	17:33	0:0	4	{
decl	18:8	18:59	4	int	has_alpha
op	18:22	0:0	4	=
water	18:24	0:0	4	desc
op	18:28	0:0	4	->
water	18:30	0:0	4	flags
op	18:36	0:0	4	&
water	18:38	0:0	4	AV_PIX_FMT_FLAG_ALPHA
decl	19:8	19:66	4	int	num_planes
op	19:23	0:0	4	=
water	19:25	0:0	4	desc
op	19:29	0:0	4	->
water	19:31	0:0	4	nb_components
op	19:45	0:0	4	-
water	19:47	0:0	4	(
water	19:48	0:0	4	has_alpha
water	19:58	0:0	4	?
water	19:60	0:0	4	1
water	19:62	0:0	4	:
water	19:64	0:0	4	0
water	19:65	0:0	4	)
if	20:8	23:8	4	(opengl -> non_pow_2_textures)
cond	20:12	20:20	5	opengl -> non_pow_2_textures
water	20:12	0:0	6	opengl
op	20:18	0:0	6	->
water	20:20	0:0	6	non_pow_2_textures
stmts	20:40	23:8	5	
water	20:40	0:0	6	{
water	21:12	0:0	6	opengl
op	21:18	0:0	6	->
water	21:20	0:0	6	chroma_div_w
op	21:33	0:0	6	=
water	21:35	0:0	6	1
op	21:36	0:0	6	.
water	21:37	0:0	6	0
water	21:38	0:0	6	f
water	21:39	0:0	6	;
water	22:12	0:0	6	opengl
op	22:18	0:0	6	->
water	22:20	0:0	6	chroma_div_h
op	22:33	0:0	6	=
water	22:35	0:0	6	1
op	22:36	0:0	6	.
water	22:37	0:0	6	0
water	22:38	0:0	6	f
water	22:39	0:0	6	;
water	23:8	0:0	6	}
else	23:10	26:8	4
stmts	23:15	26:8	5	
water	23:15	0:0	6	{
water	24:12	0:0	6	opengl
op	24:18	0:0	6	->
water	24:20	0:0	6	chroma_div_w
op	24:33	0:0	6	=
water	24:35	0:0	6	1
op	24:37	0:0	6	<<
water	24:40	0:0	6	desc
op	24:44	0:0	6	->
water	24:46	0:0	6	log2_chroma_w
water	24:59	0:0	6	;
water	25:12	0:0	6	opengl
op	25:18	0:0	6	->
water	25:20	0:0	6	chroma_div_h
op	25:33	0:0	6	=
water	25:35	0:0	6	1
op	25:37	0:0	6	<<
water	25:40	0:0	6	desc
op	25:44	0:0	6	->
water	25:46	0:0	6	log2_chroma_h
water	25:59	0:0	6	;
water	26:8	0:0	6	}
for	27:8	31:76	4	(i = 1 ;i < num_planes;i ++)
forinit	27:13	27:18	5	i = 1 ;
water	27:13	0:0	6	i
op	27:15	0:0	6	=
water	27:17	0:0	6	1
water	27:18	0:0	6	;
cond	27:20	27:24	5	i < num_planes
water	27:20	0:0	6	i
op	27:22	0:0	6	<
water	27:24	0:0	6	num_planes
forexpr	27:36	27:37	5	i ++
water	27:36	0:0	6	i
op	27:37	0:0	6	++
stmts	28:12	31:76	5	
if	28:12	31:76	6	(opengl -> non_pow_2_textures)
cond	28:16	28:24	7	opengl -> non_pow_2_textures
water	28:16	0:0	8	opengl
op	28:22	0:0	8	->
water	28:24	0:0	8	non_pow_2_textures
stmts	29:16	31:76	7	
call	29:16	31:75	8	opengl_configure_texture
arg	29:41	29:47	9	opengl
water	29:41	0:0	10	opengl
arg	29:49	29:72	9	opengl->texture_name[i]
water	29:49	0:0	10	opengl
op	29:55	0:0	10	->
water	29:57	0:0	10	texture_name
op	29:69	0:0	10	[
water	29:70	0:0	10	i
op	29:71	0:0	10	]
arg	30:24	30:74	9	FF_CEIL_RSHIFT(opengl->width,desc->log2_chroma_w)
call	30:24	30:73	10	FF_CEIL_RSHIFT
arg	30:39	30:52	11	opengl->width
water	30:39	0:0	12	opengl
op	30:45	0:0	12	->
water	30:47	0:0	12	width
arg	30:54	30:73	11	desc->log2_chroma_w
water	30:54	0:0	12	desc
op	30:58	0:0	12	->
water	30:60	0:0	12	log2_chroma_w
arg	31:24	31:75	9	FF_CEIL_RSHIFT(opengl->height,desc->log2_chroma_h)
call	31:24	31:74	10	FF_CEIL_RSHIFT
arg	31:39	31:53	11	opengl->height
water	31:39	0:0	12	opengl
op	31:45	0:0	12	->
water	31:47	0:0	12	height
arg	31:55	31:74	11	desc->log2_chroma_h
water	31:55	0:0	12	desc
op	31:59	0:0	12	->
water	31:61	0:0	12	log2_chroma_h
water	31:76	0:0	8	;
else	32:12	33:104	4
stmts	33:16	33:104	5	
call	33:16	33:103	6	opengl_configure_texture
arg	33:41	33:47	7	opengl
water	33:41	0:0	8	opengl
arg	33:49	33:72	7	opengl->texture_name[i]
water	33:49	0:0	8	opengl
op	33:55	0:0	8	->
water	33:57	0:0	8	texture_name
op	33:69	0:0	8	[
water	33:70	0:0	8	i
op	33:71	0:0	8	]
arg	33:74	33:87	7	opengl->width
water	33:74	0:0	8	opengl
op	33:80	0:0	8	->
water	33:82	0:0	8	width
arg	33:89	33:103	7	opengl->height
water	33:89	0:0	8	opengl
op	33:95	0:0	8	->
water	33:97	0:0	8	height
water	33:104	0:0	6	;
if	34:8	35:100	4	(has_alpha)
cond	34:12	34:12	5	has_alpha
water	34:12	0:0	6	has_alpha
stmts	35:12	35:100	5	
call	35:12	35:99	6	opengl_configure_texture
arg	35:37	35:43	7	opengl
water	35:37	0:0	8	opengl
arg	35:45	35:68	7	opengl->texture_name[3]
water	35:45	0:0	8	opengl
op	35:51	0:0	8	->
water	35:53	0:0	8	texture_name
op	35:65	0:0	8	[
water	35:66	0:0	8	3
op	35:67	0:0	8	]
arg	35:70	35:83	7	opengl->width
water	35:70	0:0	8	opengl
op	35:76	0:0	8	->
water	35:78	0:0	8	width
arg	35:85	35:99	7	opengl->height
water	35:85	0:0	8	opengl
op	35:91	0:0	8	->
water	35:93	0:0	8	height
water	35:100	0:0	6	;
water	36:4	0:0	4	}
call	37:4	37:81	2	opengl->glprocs.glBindBuffer
arg	37:33	37:59	3	FF_GL_ELEMENT_ARRAY_BUFFER
water	37:33	0:0	4	FF_GL_ELEMENT_ARRAY_BUFFER
arg	37:61	37:81	3	opengl->index_buffer
water	37:61	0:0	4	opengl
op	37:67	0:0	4	->
water	37:69	0:0	4	index_buffer
water	37:82	0:0	2	;
call	38:4	38:104	2	opengl->glprocs.glBufferData
arg	38:33	38:59	3	FF_GL_ELEMENT_ARRAY_BUFFER
water	38:33	0:0	4	FF_GL_ELEMENT_ARRAY_BUFFER
arg	38:61	38:76	3	sizeof(g_index)
op	38:61	0:0	4	sizeof
water	38:67	0:0	4	(
water	38:68	0:0	4	g_index
water	38:75	0:0	4	)
arg	38:78	38:85	3	g_index
water	38:78	0:0	4	g_index
arg	38:87	38:104	3	FF_GL_STATIC_DRAW
water	38:87	0:0	4	FF_GL_STATIC_DRAW
water	38:105	0:0	2	;
call	39:4	39:62	2	opengl->glprocs.glBindBuffer
arg	39:33	39:59	3	FF_GL_ELEMENT_ARRAY_BUFFER
water	39:33	0:0	4	FF_GL_ELEMENT_ARRAY_BUFFER
arg	39:61	39:62	3	0
water	39:61	0:0	4	0
water	39:63	0:0	2	;
call	40:4	40:21	2	glEnable
arg	40:13	40:21	3	GL_BLEND
water	40:13	0:0	4	GL_BLEND
water	40:22	0:0	2	;
call	41:4	41:52	2	glBlendFunc
arg	41:16	41:28	3	GL_SRC_ALPHA
water	41:16	0:0	4	GL_SRC_ALPHA
arg	41:30	41:52	3	GL_ONE_MINUS_SRC_ALPHA
water	41:30	0:0	4	GL_ONE_MINUS_SRC_ALPHA
water	41:53	0:0	2	;
call	42:4	43:60	2	glClearColor
arg	42:17	42:54	3	(float)opengl->background[0]/255.0f
water	42:17	0:0	4	(
water	42:18	0:0	4	float
water	42:23	0:0	4	)
water	42:24	0:0	4	opengl
op	42:30	0:0	4	->
water	42:32	0:0	4	background
op	42:42	0:0	4	[
water	42:43	0:0	4	0
op	42:44	0:0	4	]
op	42:46	0:0	4	/
water	42:48	0:0	4	255
op	42:51	0:0	4	.
water	42:52	0:0	4	0
water	42:53	0:0	4	f
arg	42:56	42:93	3	(float)opengl->background[1]/255.0f
water	42:56	0:0	4	(
water	42:57	0:0	4	float
water	42:62	0:0	4	)
water	42:63	0:0	4	opengl
op	42:69	0:0	4	->
water	42:71	0:0	4	background
op	42:81	0:0	4	[
water	42:82	0:0	4	1
op	42:83	0:0	4	]
op	42:85	0:0	4	/
water	42:87	0:0	4	255
op	42:90	0:0	4	.
water	42:91	0:0	4	0
water	42:92	0:0	4	f
arg	43:17	43:54	3	(float)opengl->background[2]/255.0f
water	43:17	0:0	4	(
water	43:18	0:0	4	float
water	43:23	0:0	4	)
water	43:24	0:0	4	opengl
op	43:30	0:0	4	->
water	43:32	0:0	4	background
op	43:42	0:0	4	[
water	43:43	0:0	4	2
op	43:44	0:0	4	]
op	43:46	0:0	4	/
water	43:48	0:0	4	255
op	43:51	0:0	4	.
water	43:52	0:0	4	0
water	43:53	0:0	4	f
arg	43:56	43:60	3	1.0f
water	43:56	0:0	4	1
op	43:57	0:0	4	.
water	43:58	0:0	4	0
water	43:59	0:0	4	f
water	43:61	0:0	2	;
water	44:4	0:0	2	ret
op	44:8	0:0	2	=
water	44:10	0:0	2	AVERROR_EXTERNAL
water	44:26	0:0	2	;
call	45:4	45:29	2	OPENGL_ERROR_CHECK
arg	45:23	45:29	3	opengl
water	45:23	0:0	4	opengl
water	45:30	0:0	2	;
return	46:4	46:12	2	0
water	46:11	0:0	3	0
label	47:2	47:6	2	fail :
return	48:4	48:14	2	ret
water	48:11	0:0	3	ret
