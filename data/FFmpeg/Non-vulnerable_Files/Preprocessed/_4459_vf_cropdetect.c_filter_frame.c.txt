func	2:0	70:0	0	static int	filter_frame
params	2:23	0:0	1	
param	2:24	2:44	2	AVFilterLink *	inlink
param	2:46	2:60	2	AVFrame *	frame
stmnts	0:0	69:58	1	
decl	4:4	4:38	2	AVFilterContext	*ctx
op	4:25	0:0	2	=
water	4:27	0:0	2	inlink
op	4:33	0:0	2	->
water	4:35	0:0	2	dst
decl	5:4	5:36	2	CropDetectContext	*s
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	priv
decl	6:4	6:32	2	int	bpp
op	6:12	0:0	2	=
water	6:14	0:0	2	s
op	6:15	0:0	2	->
water	6:17	0:0	2	max_pixsteps
op	6:29	0:0	2	[
water	6:30	0:0	2	0
op	6:31	0:0	2	]
decl	7:4	7:29	2	int	w
water	7:9	0:0	2	,
decl	7:4	7:29	2	int	h
water	7:12	0:0	2	,
decl	7:4	7:29	2	int	x
water	7:15	0:0	2	,
decl	7:4	7:29	2	int	y
water	7:18	0:0	2	,
decl	7:4	7:29	2	int	shrink_by
decl	8:4	8:27	2	AVDictionary	**metadata
decl	9:4	9:24	2	int	outliers
water	9:16	0:0	2	,
decl	9:4	9:24	2	int	last_y
decl	10:4	10:31	2	int	limit
op	10:14	0:0	2	=
call	10:16	10:30	3	round
arg	10:22	10:30	4	s->limit
water	10:22	0:0	5	s
op	10:23	0:0	5	->
water	10:25	0:0	5	limit
if	12:4	68:4	2	(++ s -> frame_nb > 0)
cond	12:8	12:24	3	++ s -> frame_nb > 0
op	12:8	0:0	4	++
water	12:10	0:0	4	s
op	12:11	0:0	4	->
water	12:13	0:0	4	frame_nb
op	12:22	0:0	4	>
water	12:24	0:0	4	0
stmts	12:27	68:4	3	
water	12:27	0:0	4	{
water	13:8	0:0	4	metadata
op	13:17	0:0	4	=
call	13:19	13:51	4	avpriv_frame_get_metadatap
arg	13:46	13:51	5	frame
water	13:46	0:0	6	frame
water	13:52	0:0	4	;
if	15:8	21:8	4	(s -> reset_count > 0 && s -> frame_nb > s -> reset_count)
cond	15:12	15:51	5	s -> reset_count > 0 && s -> frame_nb > s -> reset_count
water	15:12	0:0	6	s
op	15:13	0:0	6	->
water	15:15	0:0	6	reset_count
op	15:27	0:0	6	>
water	15:29	0:0	6	0
op	15:31	0:0	6	&&
water	15:34	0:0	6	s
op	15:35	0:0	6	->
water	15:37	0:0	6	frame_nb
op	15:46	0:0	6	>
water	15:48	0:0	6	s
op	15:49	0:0	6	->
water	15:51	0:0	6	reset_count
stmts	15:64	21:8	5	
water	15:64	0:0	6	{
water	16:12	0:0	6	s
op	16:13	0:0	6	->
water	16:15	0:0	6	x1
op	16:18	0:0	6	=
water	16:20	0:0	6	frame
op	16:25	0:0	6	->
water	16:27	0:0	6	width
op	16:34	0:0	6	-
water	16:36	0:0	6	1
water	16:37	0:0	6	;
water	17:12	0:0	6	s
op	17:13	0:0	6	->
water	17:15	0:0	6	y1
op	17:18	0:0	6	=
water	17:20	0:0	6	frame
op	17:25	0:0	6	->
water	17:27	0:0	6	height
op	17:34	0:0	6	-
water	17:36	0:0	6	1
water	17:37	0:0	6	;
water	18:12	0:0	6	s
op	18:13	0:0	6	->
water	18:15	0:0	6	x2
op	18:18	0:0	6	=
water	18:20	0:0	6	0
water	18:21	0:0	6	;
water	19:12	0:0	6	s
op	19:13	0:0	6	->
water	19:15	0:0	6	y2
op	19:18	0:0	6	=
water	19:20	0:0	6	0
water	19:21	0:0	6	;
water	20:12	0:0	6	s
op	20:13	0:0	6	->
water	20:15	0:0	6	frame_nb
op	20:24	0:0	6	=
water	20:26	0:0	6	1
water	20:27	0:0	6	;
water	21:8	0:0	6	}
water	23:8	0:0	4	outliers
op	23:17	0:0	4	=
water	23:19	0:0	4	0
water	23:20	0:0	4	;
for	24:8	32:8	4	(last_y = y = FROM ;NOEND;y = y INC)
forinit	24:13	24:30	5	last_y = y = FROM ;
water	24:13	0:0	6	last_y
op	24:20	0:0	6	=
water	24:22	0:0	6	y
op	24:24	0:0	6	=
water	24:26	0:0	6	FROM
water	24:30	0:0	6	;
cond	24:32	24:32	5	NOEND
water	24:32	0:0	6	NOEND
forexpr	24:39	24:45	5	y = y INC
water	24:39	0:0	6	y
op	24:41	0:0	6	=
water	24:43	0:0	6	y
water	24:45	0:0	6	INC
stmts	24:50	32:8	5	
water	24:50	0:0	6	{
if	25:12	30:12	6	(checkline (ctx ,frame -> data [ 0 ] + STEP0 * y ,STEP1 ,LEN ,bpp ) > limit)
cond	25:16	25:78	7	checkline (ctx ,frame -> data [ 0 ] + STEP0 * y ,STEP1 ,LEN ,bpp ) > limit
call	25:16	25:74	8	checkline
arg	25:26	25:29	9	ctx
water	25:26	0:0	10	ctx
arg	25:31	25:57	9	frame->data[0]+STEP0*y
water	25:31	0:0	10	frame
op	25:36	0:0	10	->
water	25:38	0:0	10	data
op	25:42	0:0	10	[
water	25:43	0:0	10	0
op	25:44	0:0	10	]
op	25:46	0:0	10	+
water	25:48	0:0	10	STEP0
op	25:54	0:0	10	*
water	25:56	0:0	10	y
arg	25:59	25:64	9	STEP1
water	25:59	0:0	10	STEP1
arg	25:66	25:69	9	LEN
water	25:66	0:0	10	LEN
arg	25:71	25:74	9	bpp
water	25:71	0:0	10	bpp
op	25:76	0:0	8	>
water	25:78	0:0	8	limit
stmts	25:85	30:12	7	
water	25:85	0:0	8	{
if	26:16	29:16	8	(++ outliers > s -> max_outliers)
cond	26:20	26:36	9	++ outliers > s -> max_outliers
op	26:20	0:0	10	++
water	26:22	0:0	10	outliers
op	26:31	0:0	10	>
water	26:33	0:0	10	s
op	26:34	0:0	10	->
water	26:36	0:0	10	max_outliers
stmts	26:50	29:16	9	
water	26:50	0:0	10	{
water	27:20	0:0	10	DST
op	27:24	0:0	10	=
water	27:26	0:0	10	last_y
water	27:32	0:0	10	;
break	28:20	28:25	10	
water	29:16	0:0	10	}
water	30:12	0:0	8	}
else	30:14	31:30	6
stmts	31:16	31:30	7	
water	31:16	0:0	8	last_y
op	31:23	0:0	8	=
water	31:25	0:0	8	y
water	31:27	0:0	8	INC
water	31:30	0:0	8	;
water	32:8	0:0	6	}
call	33:8	33:105	4	FIND
arg	33:13	33:18	5	s->y1
water	33:13	0:0	6	s
op	33:14	0:0	6	->
water	33:16	0:0	6	y1
arg	33:36	33:37	5	0
water	33:36	0:0	6	0
arg	33:53	33:62	5	y<s->y1
water	33:53	0:0	6	y
op	33:55	0:0	6	<
water	33:57	0:0	6	s
op	33:58	0:0	6	->
water	33:60	0:0	6	y1
arg	33:64	33:66	5	+1
op	33:64	0:0	6	+
water	33:65	0:0	6	1
arg	33:68	33:86	5	frame->linesize[0]
water	33:68	0:0	6	frame
op	33:73	0:0	6	->
water	33:75	0:0	6	linesize
op	33:83	0:0	6	[
water	33:84	0:0	6	0
op	33:85	0:0	6	]
arg	33:88	33:91	5	bpp
water	33:88	0:0	6	bpp
arg	33:93	33:105	5	frame->width
water	33:93	0:0	6	frame
op	33:98	0:0	6	->
water	33:100	0:0	6	width
water	33:106	0:0	4	;
call	34:8	34:105	4	FIND
arg	34:13	34:18	5	s->y2
water	34:13	0:0	6	s
op	34:14	0:0	6	->
water	34:16	0:0	6	y2
arg	34:20	34:37	5	frame->height-1
water	34:20	0:0	6	frame
op	34:25	0:0	6	->
water	34:27	0:0	6	height
op	34:34	0:0	6	-
water	34:36	0:0	6	1
arg	34:39	34:62	5	y>FFMAX(s->y2,s->y1)
water	34:39	0:0	6	y
op	34:41	0:0	6	>
call	34:43	34:61	6	FFMAX
arg	34:49	34:54	7	s->y2
water	34:49	0:0	8	s
op	34:50	0:0	8	->
water	34:52	0:0	8	y2
arg	34:56	34:61	7	s->y1
water	34:56	0:0	8	s
op	34:57	0:0	8	->
water	34:59	0:0	8	y1
arg	34:64	34:66	5	-1
op	34:64	0:0	6	-
water	34:65	0:0	6	1
arg	34:68	34:86	5	frame->linesize[0]
water	34:68	0:0	6	frame
op	34:73	0:0	6	->
water	34:75	0:0	6	linesize
op	34:83	0:0	6	[
water	34:84	0:0	6	0
op	34:85	0:0	6	]
arg	34:88	34:91	5	bpp
water	34:88	0:0	6	bpp
arg	34:93	34:105	5	frame->width
water	34:93	0:0	6	frame
op	34:98	0:0	6	->
water	34:100	0:0	6	width
water	34:106	0:0	4	;
call	35:8	35:106	4	FIND
arg	35:13	35:18	5	s->x1
water	35:13	0:0	6	s
op	35:14	0:0	6	->
water	35:16	0:0	6	x1
arg	35:36	35:37	5	0
water	35:36	0:0	6	0
arg	35:53	35:62	5	y<s->x1
water	35:53	0:0	6	y
op	35:55	0:0	6	<
water	35:57	0:0	6	s
op	35:58	0:0	6	->
water	35:60	0:0	6	x1
arg	35:64	35:66	5	+1
op	35:64	0:0	6	+
water	35:65	0:0	6	1
arg	35:68	35:71	5	bpp
water	35:68	0:0	6	bpp
arg	35:73	35:91	5	frame->linesize[0]
water	35:73	0:0	6	frame
op	35:78	0:0	6	->
water	35:80	0:0	6	linesize
op	35:88	0:0	6	[
water	35:89	0:0	6	0
op	35:90	0:0	6	]
arg	35:93	35:106	5	frame->height
water	35:93	0:0	6	frame
op	35:98	0:0	6	->
water	35:100	0:0	6	height
water	35:107	0:0	4	;
call	36:8	36:106	4	FIND
arg	36:13	36:18	5	s->x2
water	36:13	0:0	6	s
op	36:14	0:0	6	->
water	36:16	0:0	6	x2
arg	36:21	36:37	5	frame->width-1
water	36:21	0:0	6	frame
op	36:26	0:0	6	->
water	36:28	0:0	6	width
op	36:34	0:0	6	-
water	36:36	0:0	6	1
arg	36:39	36:62	5	y>FFMAX(s->x2,s->x1)
water	36:39	0:0	6	y
op	36:41	0:0	6	>
call	36:43	36:61	6	FFMAX
arg	36:49	36:54	7	s->x2
water	36:49	0:0	8	s
op	36:50	0:0	8	->
water	36:52	0:0	8	x2
arg	36:56	36:61	7	s->x1
water	36:56	0:0	8	s
op	36:57	0:0	8	->
water	36:59	0:0	8	x1
arg	36:64	36:66	5	-1
op	36:64	0:0	6	-
water	36:65	0:0	6	1
arg	36:68	36:71	5	bpp
water	36:68	0:0	6	bpp
arg	36:73	36:91	5	frame->linesize[0]
water	36:73	0:0	6	frame
op	36:78	0:0	6	->
water	36:80	0:0	6	linesize
op	36:88	0:0	6	[
water	36:89	0:0	6	0
op	36:90	0:0	6	]
arg	36:93	36:106	5	frame->height
water	36:93	0:0	6	frame
op	36:98	0:0	6	->
water	36:100	0:0	6	height
water	36:107	0:0	4	;
water	39:8	0:0	4	x
op	39:10	0:0	4	=
water	39:12	0:0	4	(
water	39:13	0:0	4	s
op	39:14	0:0	4	->
water	39:16	0:0	4	x1
op	39:18	0:0	4	+
water	39:19	0:0	4	1
water	39:20	0:0	4	)
op	39:22	0:0	4	&
water	39:24	0:0	4	~1
water	39:26	0:0	4	;
water	40:8	0:0	4	y
op	40:10	0:0	4	=
water	40:12	0:0	4	(
water	40:13	0:0	4	s
op	40:14	0:0	4	->
water	40:16	0:0	4	y1
op	40:18	0:0	4	+
water	40:19	0:0	4	1
water	40:20	0:0	4	)
op	40:22	0:0	4	&
water	40:24	0:0	4	~1
water	40:26	0:0	4	;
water	41:8	0:0	4	w
op	41:10	0:0	4	=
water	41:12	0:0	4	s
op	41:13	0:0	4	->
water	41:15	0:0	4	x2
op	41:18	0:0	4	-
water	41:20	0:0	4	x
op	41:22	0:0	4	+
water	41:24	0:0	4	1
water	41:25	0:0	4	;
water	42:8	0:0	4	h
op	42:10	0:0	4	=
water	42:12	0:0	4	s
op	42:13	0:0	4	->
water	42:15	0:0	4	y2
op	42:18	0:0	4	-
water	42:20	0:0	4	y
op	42:22	0:0	4	+
water	42:24	0:0	4	1
water	42:25	0:0	4	;
if	45:8	46:25	4	(s -> round <= 1)
cond	45:12	45:24	5	s -> round <= 1
water	45:12	0:0	6	s
op	45:13	0:0	6	->
water	45:15	0:0	6	round
op	45:21	0:0	6	<=
water	45:24	0:0	6	1
stmts	46:12	46:25	5	
water	46:12	0:0	6	s
op	46:13	0:0	6	->
water	46:15	0:0	6	round
op	46:21	0:0	6	=
water	46:23	0:0	6	16
water	46:25	0:0	6	;
if	47:8	48:25	4	(s -> round % 2)
cond	47:12	47:23	5	s -> round % 2
water	47:12	0:0	6	s
op	47:13	0:0	6	->
water	47:15	0:0	6	round
op	47:21	0:0	6	%
water	47:23	0:0	6	2
stmts	48:12	48:25	5	
water	48:12	0:0	6	s
op	48:13	0:0	6	->
water	48:15	0:0	6	round
op	48:21	0:0	6	*=
water	48:24	0:0	6	2
water	48:25	0:0	6	;
water	49:8	0:0	4	shrink_by
op	49:18	0:0	4	=
water	49:20	0:0	4	w
op	49:22	0:0	4	%
water	49:24	0:0	4	s
op	49:25	0:0	4	->
water	49:27	0:0	4	round
water	49:32	0:0	4	;
water	50:8	0:0	4	w
op	50:10	0:0	4	-=
water	50:13	0:0	4	shrink_by
water	50:22	0:0	4	;
water	51:8	0:0	4	x
op	51:10	0:0	4	+=
water	51:13	0:0	4	(
water	51:14	0:0	4	shrink_by
op	51:23	0:0	4	/
water	51:24	0:0	4	2
op	51:26	0:0	4	+
water	51:28	0:0	4	1
water	51:29	0:0	4	)
op	51:31	0:0	4	&
water	51:33	0:0	4	~1
water	51:35	0:0	4	;
water	52:8	0:0	4	shrink_by
op	52:18	0:0	4	=
water	52:20	0:0	4	h
op	52:22	0:0	4	%
water	52:24	0:0	4	s
op	52:25	0:0	4	->
water	52:27	0:0	4	round
water	52:32	0:0	4	;
water	53:8	0:0	4	h
op	53:10	0:0	4	-=
water	53:13	0:0	4	shrink_by
water	53:22	0:0	4	;
water	54:8	0:0	4	y
op	54:10	0:0	4	+=
water	54:13	0:0	4	(
water	54:14	0:0	4	shrink_by
op	54:23	0:0	4	/
water	54:24	0:0	4	2
op	54:26	0:0	4	+
water	54:28	0:0	4	1
water	54:29	0:0	4	)
op	54:31	0:0	4	&
water	54:33	0:0	4	~1
water	54:35	0:0	4	;
call	55:8	55:45	4	SET_META
arg	55:17	55:38	5	"lavfi.cropdetect.x1"
water	55:17	0:0	6	"lavfi.cropdetect.x1"
arg	55:40	55:45	5	s->x1
water	55:40	0:0	6	s
op	55:41	0:0	6	->
water	55:43	0:0	6	x1
water	55:46	0:0	4	;
call	56:8	56:45	4	SET_META
arg	56:17	56:38	5	"lavfi.cropdetect.x2"
water	56:17	0:0	6	"lavfi.cropdetect.x2"
arg	56:40	56:45	5	s->x2
water	56:40	0:0	6	s
op	56:41	0:0	6	->
water	56:43	0:0	6	x2
water	56:46	0:0	4	;
call	57:8	57:45	4	SET_META
arg	57:17	57:38	5	"lavfi.cropdetect.y1"
water	57:17	0:0	6	"lavfi.cropdetect.y1"
arg	57:40	57:45	5	s->y1
water	57:40	0:0	6	s
op	57:41	0:0	6	->
water	57:43	0:0	6	y1
water	57:46	0:0	4	;
call	58:8	58:45	4	SET_META
arg	58:17	58:38	5	"lavfi.cropdetect.y2"
water	58:17	0:0	6	"lavfi.cropdetect.y2"
arg	58:40	58:45	5	s->y2
water	58:40	0:0	6	s
op	58:41	0:0	6	->
water	58:43	0:0	6	y2
water	58:46	0:0	4	;
call	59:8	59:41	4	SET_META
arg	59:17	59:37	5	"lavfi.cropdetect.w"
water	59:17	0:0	6	"lavfi.cropdetect.w"
arg	59:40	59:41	5	w
water	59:40	0:0	6	w
water	59:42	0:0	4	;
call	60:8	60:41	4	SET_META
arg	60:17	60:37	5	"lavfi.cropdetect.h"
water	60:17	0:0	6	"lavfi.cropdetect.h"
arg	60:40	60:41	5	h
water	60:40	0:0	6	h
water	60:42	0:0	4	;
call	61:8	61:41	4	SET_META
arg	61:17	61:37	5	"lavfi.cropdetect.x"
water	61:17	0:0	6	"lavfi.cropdetect.x"
arg	61:40	61:41	5	x
water	61:40	0:0	6	x
water	61:42	0:0	4	;
call	62:8	62:41	4	SET_META
arg	62:17	62:37	5	"lavfi.cropdetect.y"
water	62:17	0:0	6	"lavfi.cropdetect.y"
arg	62:40	62:41	5	y
water	62:40	0:0	6	y
water	62:42	0:0	4	;
call	63:8	67:25	4	av_log
arg	63:15	63:18	5	ctx
water	63:15	0:0	6	ctx
arg	63:20	63:31	5	AV_LOG_INFO
water	63:20	0:0	6	AV_LOG_INFO
arg	64:15	64:98	5	"x1:%d x2:%d y1:%d y2:%d w:%d h:%d x:%d y:%d pts:%"PRId64" t:%f crop=%d:%d:%d:%d\n"
water	64:15	0:0	6	"x1:%d x2:%d y1:%d y2:%d w:%d h:%d x:%d y:%d pts:%"
water	64:66	0:0	6	PRId64
water	64:72	0:0	6	" t:%f crop=%d:%d:%d:%d\n"
arg	65:15	65:20	5	s->x1
water	65:15	0:0	6	s
op	65:16	0:0	6	->
water	65:18	0:0	6	x1
arg	65:22	65:27	5	s->x2
water	65:22	0:0	6	s
op	65:23	0:0	6	->
water	65:25	0:0	6	x2
arg	65:29	65:34	5	s->y1
water	65:29	0:0	6	s
op	65:30	0:0	6	->
water	65:32	0:0	6	y1
arg	65:36	65:41	5	s->y2
water	65:36	0:0	6	s
op	65:37	0:0	6	->
water	65:39	0:0	6	y2
arg	65:43	65:44	5	w
water	65:43	0:0	6	w
arg	65:46	65:47	5	h
water	65:46	0:0	6	h
arg	65:49	65:50	5	x
water	65:49	0:0	6	x
arg	65:52	65:53	5	y
water	65:52	0:0	6	y
arg	65:55	65:65	5	frame->pts
water	65:55	0:0	6	frame
op	65:60	0:0	6	->
water	65:62	0:0	6	pts
arg	66:15	66:89	5	frame->pts==AV_NOPTS_VALUE?-1:frame->pts*av_q2d(inlink->time_base)
water	66:15	0:0	6	frame
op	66:20	0:0	6	->
water	66:22	0:0	6	pts
op	66:26	0:0	6	==
water	66:29	0:0	6	AV_NOPTS_VALUE
water	66:44	0:0	6	?
op	66:46	0:0	6	-
water	66:47	0:0	6	1
water	66:49	0:0	6	:
water	66:51	0:0	6	frame
op	66:56	0:0	6	->
water	66:58	0:0	6	pts
call	66:62	66:88	6	*av_q2d
arg	66:71	66:88	7	inlink->time_base
water	66:71	0:0	8	inlink
op	66:77	0:0	8	->
water	66:79	0:0	8	time_base
arg	67:15	67:16	5	w
water	67:15	0:0	6	w
arg	67:18	67:19	5	h
water	67:18	0:0	6	h
arg	67:21	67:22	5	x
water	67:21	0:0	6	x
arg	67:24	67:25	5	y
water	67:24	0:0	6	y
water	67:26	0:0	4	;
water	68:4	0:0	4	}
return	69:4	69:58	2	ff_filter_frame(inlink->dst->outputs[0],frame)
call	69:11	69:57	3	ff_filter_frame
arg	69:27	69:50	4	inlink->dst->outputs[0]
water	69:27	0:0	5	inlink
op	69:33	0:0	5	->
water	69:35	0:0	5	dst
op	69:38	0:0	5	->
water	69:40	0:0	5	outputs
op	69:47	0:0	5	[
water	69:48	0:0	5	0
op	69:49	0:0	5	]
arg	69:52	69:57	4	frame
water	69:52	0:0	5	frame
