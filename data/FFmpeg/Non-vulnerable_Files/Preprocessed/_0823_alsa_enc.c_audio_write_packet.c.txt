func	1:0	29:0	0	static int	audio_write_packet
params	1:29	0:0	1	
param	1:30	1:49	2	AVFormatContext *	s1
param	1:51	1:64	2	AVPacket *	pkt
stmnts	0:0	28:12	1	
decl	3:4	3:31	2	AlsaData	*s
op	3:16	0:0	2	=
water	3:18	0:0	2	s1
op	3:20	0:0	2	->
water	3:22	0:0	2	priv_data
decl	4:4	4:11	2	int	res
decl	5:4	5:28	2	int	size
op	5:17	0:0	2	=
water	5:19	0:0	2	pkt
op	5:22	0:0	2	->
water	5:24	0:0	2	size
decl	6:4	6:28	2	uint8_t	*buf
op	6:17	0:0	2	=
water	6:19	0:0	2	pkt
op	6:22	0:0	2	->
water	6:24	0:0	2	data
water	7:4	0:0	2	size
op	7:9	0:0	2	/=
water	7:12	0:0	2	s
op	7:13	0:0	2	->
water	7:15	0:0	2	frame_size
water	7:25	0:0	2	;
if	8:4	9:31	2	(pkt -> dts != AV_NOPTS_VALUE)
cond	8:8	8:20	3	pkt -> dts != AV_NOPTS_VALUE
water	8:8	0:0	4	pkt
op	8:11	0:0	4	->
water	8:13	0:0	4	dts
op	8:17	0:0	4	!=
water	8:20	0:0	4	AV_NOPTS_VALUE
stmts	9:8	9:31	3	
water	9:8	0:0	4	s
op	9:9	0:0	4	->
water	9:11	0:0	4	timestamp
op	9:21	0:0	4	=
water	9:23	0:0	4	pkt
op	9:26	0:0	4	->
water	9:28	0:0	4	dts
water	9:31	0:0	4	;
water	10:4	0:0	2	s
op	10:5	0:0	2	->
water	10:7	0:0	2	timestamp
op	10:17	0:0	2	+=
water	10:20	0:0	2	pkt
op	10:23	0:0	2	->
water	10:25	0:0	2	duration
water	10:34	0:0	2	?
water	10:36	0:0	2	pkt
op	10:39	0:0	2	->
water	10:41	0:0	2	duration
water	10:50	0:0	2	:
water	10:52	0:0	2	size
water	10:56	0:0	2	;
if	11:4	17:4	2	(s -> reorder_func)
cond	11:8	11:11	3	s -> reorder_func
water	11:8	0:0	4	s
op	11:9	0:0	4	->
water	11:11	0:0	4	reorder_func
stmts	11:25	17:4	3	
water	11:25	0:0	4	{
if	12:8	14:38	4	(size > s -> reorder_buf_size)
cond	12:12	12:22	5	size > s -> reorder_buf_size
water	12:12	0:0	6	size
op	12:17	0:0	6	>
water	12:19	0:0	6	s
op	12:20	0:0	6	->
water	12:22	0:0	6	reorder_buf_size
stmts	13:12	14:38	5	
if	13:12	14:38	6	(ff_alsa_extend_reorder_buf (s ,size ))
cond	13:16	13:50	7	ff_alsa_extend_reorder_buf (s ,size )
call	13:16	13:50	8	ff_alsa_extend_reorder_buf
arg	13:43	13:44	9	s
water	13:43	0:0	10	s
arg	13:46	13:50	9	size
water	13:46	0:0	10	size
stmts	14:16	14:38	7	
return	14:16	14:38	8	AVERROR(ENOMEM)
call	14:23	14:37	9	AVERROR
arg	14:31	14:37	10	ENOMEM
water	14:31	0:0	11	ENOMEM
call	15:8	15:49	4	s->reorder_func
arg	15:24	15:27	5	buf
water	15:24	0:0	6	buf
arg	15:29	15:43	5	s->reorder_buf
water	15:29	0:0	6	s
op	15:30	0:0	6	->
water	15:32	0:0	6	reorder_buf
arg	15:45	15:49	5	size
water	15:45	0:0	6	size
water	15:50	0:0	4	;
water	16:8	0:0	4	buf
op	16:12	0:0	4	=
water	16:14	0:0	4	s
op	16:15	0:0	4	->
water	16:17	0:0	4	reorder_buf
water	16:28	0:0	4	;
water	17:4	0:0	4	}
while	18:4	27:4	2	(( res =snd_pcm_writei (s -> h ,buf ,size ) ) < 0)
cond	18:11	18:53	3	( res =snd_pcm_writei (s -> h ,buf ,size ) ) < 0
water	18:11	0:0	4	(
water	18:12	0:0	4	res
op	18:16	0:0	4	=
call	18:18	18:48	4	snd_pcm_writei
arg	18:33	18:37	5	s->h
water	18:33	0:0	6	s
op	18:34	0:0	6	->
water	18:36	0:0	6	h
arg	18:39	18:42	5	buf
water	18:39	0:0	6	buf
arg	18:44	18:48	5	size
water	18:44	0:0	6	size
water	18:49	0:0	4	)
op	18:51	0:0	4	<
water	18:53	0:0	4	0
stmts	18:56	27:4	3	
water	18:56	0:0	4	{
if	19:8	21:8	4	(res == - EAGAIN)
cond	19:12	19:20	5	res == - EAGAIN
water	19:12	0:0	6	res
op	19:16	0:0	6	==
op	19:19	0:0	6	-
water	19:20	0:0	6	EAGAIN
stmts	19:28	21:8	5	
water	19:28	0:0	6	{
return	20:12	20:34	6	AVERROR(EAGAIN)
call	20:19	20:33	7	AVERROR
arg	20:27	20:33	8	EAGAIN
water	20:27	0:0	9	EAGAIN
water	21:8	0:0	6	}
if	22:8	26:8	4	(ff_alsa_xrun_recover (s1 ,res ) < 0)
cond	22:12	22:44	5	ff_alsa_xrun_recover (s1 ,res ) < 0
call	22:12	22:40	6	ff_alsa_xrun_recover
arg	22:33	22:35	7	s1
water	22:33	0:0	8	s1
arg	22:37	22:40	7	res
water	22:37	0:0	8	res
op	22:42	0:0	6	<
water	22:44	0:0	6	0
stmts	22:47	26:8	5	
water	22:47	0:0	6	{
call	23:12	24:36	6	av_log
arg	23:19	23:21	7	s1
water	23:19	0:0	8	s1
arg	23:23	23:35	7	AV_LOG_ERROR
water	23:23	0:0	8	AV_LOG_ERROR
arg	23:37	23:61	7	"ALSA write error: %s\n"
water	23:37	0:0	8	"ALSA write error: %s\n"
arg	24:19	24:36	7	snd_strerror(res)
call	24:19	24:35	8	snd_strerror
arg	24:32	24:35	9	res
water	24:32	0:0	10	res
water	24:37	0:0	6	;
return	25:12	25:31	6	AVERROR(EIO)
call	25:19	25:30	7	AVERROR
arg	25:27	25:30	8	EIO
water	25:27	0:0	9	EIO
water	26:8	0:0	6	}
water	27:4	0:0	4	}
return	28:4	28:12	2	0
water	28:11	0:0	3	0
