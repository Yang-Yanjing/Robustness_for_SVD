func	1:0	27:0	0	static void	sub2video_heartbeat
params	1:31	0:0	1	
param	1:32	1:48	2	InputStream *	ist
param	1:50	1:61	2	int64_t	pts
stmnts	0:0	26:4	1	
decl	3:4	3:52	2	InputFile	*infile
op	3:22	0:0	2	=
water	3:24	0:0	2	input_files
op	3:35	0:0	2	[
water	3:36	0:0	2	ist
op	3:39	0:0	2	->
water	3:41	0:0	2	file_index
op	3:51	0:0	2	]
decl	4:4	4:21	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:21	2	int	j
water	4:12	0:0	2	,
decl	4:4	4:21	2	int	nb_reqs
decl	5:4	5:16	2	int64_t	pts2
for	10:4	26:4	2	(i = 0 ;i < infile -> nb_streams;i ++)
forinit	10:9	10:14	3	i = 0 ;
water	10:9	0:0	4	i
op	10:11	0:0	4	=
water	10:13	0:0	4	0
water	10:14	0:0	4	;
cond	10:16	10:28	3	i < infile -> nb_streams
water	10:16	0:0	4	i
op	10:18	0:0	4	<
water	10:20	0:0	4	infile
op	10:26	0:0	4	->
water	10:28	0:0	4	nb_streams
forexpr	10:40	10:41	3	i ++
water	10:40	0:0	4	i
op	10:41	0:0	4	++
stmts	10:45	26:4	3	
water	10:45	0:0	4	{
decl	11:8	11:64	4	InputStream	*ist2
op	11:26	0:0	4	=
water	11:28	0:0	4	input_streams
op	11:41	0:0	4	[
water	11:42	0:0	4	infile
op	11:48	0:0	4	->
water	11:50	0:0	4	ist_index
op	11:60	0:0	4	+
water	11:62	0:0	4	i
op	11:63	0:0	4	]
if	12:8	13:20	4	(! ist2 -> sub2video . frame)
cond	12:12	12:29	5	! ist2 -> sub2video . frame
op	12:12	0:0	6	!
water	12:13	0:0	6	ist2
op	12:17	0:0	6	->
water	12:19	0:0	6	sub2video
op	12:28	0:0	6	.
water	12:29	0:0	6	frame
stmts	13:12	13:20	5	
continue	13:12	13:20	6	
water	16:8	0:0	4	pts2
op	16:13	0:0	4	=
call	16:15	16:72	4	av_rescale_q
arg	16:28	16:31	5	pts
water	16:28	0:0	6	pts
arg	16:33	16:51	5	ist->st->time_base
water	16:33	0:0	6	ist
op	16:36	0:0	6	->
water	16:38	0:0	6	st
op	16:40	0:0	6	->
water	16:42	0:0	6	time_base
arg	16:53	16:72	5	ist2->st->time_base
water	16:53	0:0	6	ist2
op	16:57	0:0	6	->
water	16:59	0:0	6	st
op	16:61	0:0	6	->
water	16:63	0:0	6	time_base
op	16:74	0:0	4	-
water	16:76	0:0	4	1
water	16:77	0:0	4	;
if	18:8	19:20	4	(pts2 <= ist2 -> sub2video . last_pts)
cond	18:12	18:36	5	pts2 <= ist2 -> sub2video . last_pts
water	18:12	0:0	6	pts2
op	18:17	0:0	6	<=
water	18:20	0:0	6	ist2
op	18:24	0:0	6	->
water	18:26	0:0	6	sub2video
op	18:35	0:0	6	.
water	18:36	0:0	6	last_pts
stmts	19:12	19:20	5	
continue	19:12	19:20	6	
if	20:8	21:40	4	(pts2 >= ist2 -> sub2video . end_pts || ! ist2 -> sub2video . frame -> data [ 0 ])
cond	20:12	20:77	5	pts2 >= ist2 -> sub2video . end_pts || ! ist2 -> sub2video . frame -> data [ 0 ]
water	20:12	0:0	6	pts2
op	20:17	0:0	6	>=
water	20:20	0:0	6	ist2
op	20:24	0:0	6	->
water	20:26	0:0	6	sub2video
op	20:35	0:0	6	.
water	20:36	0:0	6	end_pts
op	20:44	0:0	6	||
op	20:47	0:0	6	!
water	20:48	0:0	6	ist2
op	20:52	0:0	6	->
water	20:54	0:0	6	sub2video
op	20:63	0:0	6	.
water	20:64	0:0	6	frame
op	20:69	0:0	6	->
water	20:71	0:0	6	data
op	20:75	0:0	6	[
water	20:76	0:0	6	0
op	20:77	0:0	6	]
stmts	21:12	21:40	5	
call	21:12	21:39	6	sub2video_update
arg	21:29	21:33	7	ist2
water	21:29	0:0	8	ist2
arg	21:35	21:39	7	NULL
water	21:35	0:0	8	NULL
water	21:40	0:0	6	;
for	22:8	23:84	4	(j = 0 , nb_reqs = 0 ;j < ist2 -> nb_filters;j ++)
forinit	22:13	22:31	5	j = 0 , nb_reqs = 0 ;
water	22:13	0:0	6	j
op	22:15	0:0	6	=
water	22:17	0:0	6	0
water	22:18	0:0	6	,
water	22:20	0:0	6	nb_reqs
op	22:28	0:0	6	=
water	22:30	0:0	6	0
water	22:31	0:0	6	;
cond	22:33	22:43	5	j < ist2 -> nb_filters
water	22:33	0:0	6	j
op	22:35	0:0	6	<
water	22:37	0:0	6	ist2
op	22:41	0:0	6	->
water	22:43	0:0	6	nb_filters
forexpr	22:55	22:56	5	j ++
water	22:55	0:0	6	j
op	22:56	0:0	6	++
stmts	23:12	23:84	5	
water	23:12	0:0	6	nb_reqs
op	23:20	0:0	6	+=
call	23:23	23:83	6	av_buffersrc_get_nb_failed_requests
arg	23:59	23:83	7	ist2->filters[j]->filter
water	23:59	0:0	8	ist2
op	23:63	0:0	8	->
water	23:65	0:0	8	filters
op	23:72	0:0	8	[
water	23:73	0:0	8	j
op	23:74	0:0	8	]
op	23:75	0:0	8	->
water	23:77	0:0	8	filter
water	23:84	0:0	6	;
if	24:8	25:42	4	(nb_reqs)
cond	24:12	24:12	5	nb_reqs
water	24:12	0:0	6	nb_reqs
stmts	25:12	25:42	5	
call	25:12	25:41	6	sub2video_push_ref
arg	25:31	25:35	7	ist2
water	25:31	0:0	8	ist2
arg	25:37	25:41	7	pts2
water	25:37	0:0	8	pts2
water	25:42	0:0	6	;
water	26:4	0:0	4	}
