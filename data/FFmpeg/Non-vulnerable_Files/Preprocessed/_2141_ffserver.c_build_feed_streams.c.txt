func	1:0	134:0	0	static int	build_feed_streams
params	1:29	0:0	1	
param	1:30	1:34	2	void
stmnts	0:0	133:13	1	
decl	3:4	3:33	2	FFServerStream	*stream
water	3:26	0:0	2	,
decl	3:4	3:33	2	FFServerStream	*feed
decl	4:4	4:13	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:13	2	int	fd
for	6:4	18:4	2	(stream = config . first_stream ;stream;stream = stream -> next)
forinit	6:8	6:36	3	stream = config . first_stream ;
water	6:8	0:0	4	stream
op	6:15	0:0	4	=
water	6:17	0:0	4	config
op	6:23	0:0	4	.
water	6:24	0:0	4	first_stream
water	6:36	0:0	4	;
cond	6:38	6:38	3	stream
water	6:38	0:0	4	stream
forexpr	6:46	6:63	3	stream = stream -> next
water	6:46	0:0	4	stream
op	6:53	0:0	4	=
water	6:55	0:0	4	stream
op	6:61	0:0	4	->
water	6:63	0:0	4	next
stmts	6:69	18:4	3	
water	6:69	0:0	4	{
water	7:8	0:0	4	feed
op	7:13	0:0	4	=
water	7:15	0:0	4	stream
op	7:21	0:0	4	->
water	7:23	0:0	4	feed
water	7:27	0:0	4	;
if	8:8	9:20	4	(! feed)
cond	8:12	8:13	5	! feed
op	8:12	0:0	6	!
water	8:13	0:0	6	feed
stmts	9:12	9:20	5	
continue	9:12	9:20	6	
if	10:8	14:8	4	(stream -> is_feed)
cond	10:12	10:20	5	stream -> is_feed
water	10:12	0:0	6	stream
op	10:18	0:0	6	->
water	10:20	0:0	6	is_feed
stmts	10:29	14:8	5	
water	10:29	0:0	6	{
for	11:12	12:43	6	(i = 0 ;i < stream -> nb_streams;i ++)
forinit	11:16	11:19	7	i = 0 ;
water	11:16	0:0	8	i
op	11:17	0:0	8	=
water	11:18	0:0	8	0
water	11:19	0:0	8	;
cond	11:20	11:30	7	i < stream -> nb_streams
water	11:20	0:0	8	i
op	11:21	0:0	8	<
water	11:22	0:0	8	stream
op	11:28	0:0	8	->
water	11:30	0:0	8	nb_streams
forexpr	11:41	11:42	7	i ++
water	11:41	0:0	8	i
op	11:42	0:0	8	++
stmts	12:16	12:43	7	
water	12:16	0:0	8	stream
op	12:22	0:0	8	->
water	12:24	0:0	8	feed_streams
op	12:36	0:0	8	[
water	12:37	0:0	8	i
op	12:38	0:0	8	]
op	12:40	0:0	8	=
water	12:42	0:0	8	i
water	12:43	0:0	8	;
continue	13:12	13:20	6	
water	14:8	0:0	6	}
for	16:8	17:77	4	(i = 0 ;i < stream -> nb_streams;i ++)
forinit	16:12	16:15	5	i = 0 ;
water	16:12	0:0	6	i
op	16:13	0:0	6	=
water	16:14	0:0	6	0
water	16:15	0:0	6	;
cond	16:16	16:26	5	i < stream -> nb_streams
water	16:16	0:0	6	i
op	16:17	0:0	6	<
water	16:18	0:0	6	stream
op	16:24	0:0	6	->
water	16:26	0:0	6	nb_streams
forexpr	16:37	16:38	5	i ++
water	16:37	0:0	6	i
op	16:38	0:0	6	++
stmts	17:12	17:77	5	
water	17:12	0:0	6	stream
op	17:18	0:0	6	->
water	17:20	0:0	6	feed_streams
op	17:32	0:0	6	[
water	17:33	0:0	6	i
op	17:34	0:0	6	]
op	17:36	0:0	6	=
call	17:38	17:76	6	add_av_stream
arg	17:52	17:56	7	feed
water	17:52	0:0	8	feed
arg	17:58	17:76	7	stream->streams[i]
water	17:58	0:0	8	stream
op	17:64	0:0	8	->
water	17:66	0:0	8	streams
op	17:73	0:0	8	[
water	17:74	0:0	8	i
op	17:75	0:0	8	]
water	17:77	0:0	6	;
water	18:4	0:0	4	}
for	20:4	130:4	2	(feed = config . first_feed ;feed;feed = feed -> next_feed)
forinit	20:8	20:32	3	feed = config . first_feed ;
water	20:8	0:0	4	feed
op	20:13	0:0	4	=
water	20:15	0:0	4	config
op	20:21	0:0	4	.
water	20:22	0:0	4	first_feed
water	20:32	0:0	4	;
cond	20:34	20:34	3	feed
water	20:34	0:0	4	feed
forexpr	20:40	20:53	3	feed = feed -> next_feed
water	20:40	0:0	4	feed
op	20:45	0:0	4	=
water	20:47	0:0	4	feed
op	20:51	0:0	4	->
water	20:53	0:0	4	next_feed
stmts	20:64	130:4	3	
water	20:64	0:0	4	{
if	21:8	71:8	4	(avio_check (feed -> feed_filename ,AVIO_FLAG_READ ) > 0)
cond	21:12	21:62	5	avio_check (feed -> feed_filename ,AVIO_FLAG_READ ) > 0
call	21:12	21:58	6	avio_check
arg	21:23	21:42	7	feed->feed_filename
water	21:23	0:0	8	feed
op	21:27	0:0	8	->
water	21:29	0:0	8	feed_filename
arg	21:44	21:58	7	AVIO_FLAG_READ
water	21:44	0:0	8	AVIO_FLAG_READ
op	21:60	0:0	6	>
water	21:62	0:0	6	0
stmts	21:65	71:8	5	
water	21:65	0:0	6	{
decl	22:12	22:37	6	AVFormatContext	*s
op	22:31	0:0	6	=
water	22:33	0:0	6	NULL
decl	23:12	23:27	6	int	matches
op	23:24	0:0	6	=
water	23:26	0:0	6	0
if	25:12	30:12	6	(avformat_open_input (& s ,feed -> feed_filename ,NULL ,NULL ) < 0)
cond	25:16	25:75	7	avformat_open_input (& s ,feed -> feed_filename ,NULL ,NULL ) < 0
call	25:16	25:71	8	avformat_open_input
arg	25:36	25:38	9	&s
op	25:36	0:0	10	&
water	25:37	0:0	10	s
arg	25:40	25:59	9	feed->feed_filename
water	25:40	0:0	10	feed
op	25:44	0:0	10	->
water	25:46	0:0	10	feed_filename
arg	25:61	25:65	9	NULL
water	25:61	0:0	10	NULL
arg	25:67	25:71	9	NULL
water	25:67	0:0	10	NULL
op	25:73	0:0	8	<
water	25:75	0:0	8	0
stmts	25:78	30:12	7	
water	25:78	0:0	8	{
call	26:16	28:44	8	http_log
arg	26:25	27:45	9	"Deleting feed file '%s' as it appears ""to be corrupt\n"
water	26:25	0:0	10	"Deleting feed file '%s' as it appears "
water	27:28	0:0	10	"to be corrupt\n"
arg	28:25	28:44	9	feed->feed_filename
water	28:25	0:0	10	feed
op	28:29	0:0	10	->
water	28:31	0:0	10	feed_filename
water	28:45	0:0	8	;
goto	29:16	29:25	8	drop
water	29:21	0:0	9	drop
water	30:12	0:0	8	}
if	32:12	36:12	6	(ffio_set_buf_size (s -> pb ,FFM_PACKET_SIZE ) < 0)
cond	32:16	32:60	7	ffio_set_buf_size (s -> pb ,FFM_PACKET_SIZE ) < 0
call	32:16	32:56	8	ffio_set_buf_size
arg	32:34	32:39	9	s->pb
water	32:34	0:0	10	s
op	32:35	0:0	10	->
water	32:37	0:0	10	pb
arg	32:41	32:56	9	FFM_PACKET_SIZE
water	32:41	0:0	10	FFM_PACKET_SIZE
op	32:58	0:0	8	<
water	32:60	0:0	8	0
stmts	32:63	36:12	7	
water	32:63	0:0	8	{
call	33:16	33:54	8	http_log
arg	33:25	33:54	9	"Failed to set buffer size\n"
water	33:25	0:0	10	"Failed to set buffer size\n"
water	33:55	0:0	8	;
call	34:16	34:39	8	avformat_close_input
arg	34:37	34:39	9	&s
op	34:37	0:0	10	&
water	34:38	0:0	10	s
water	34:40	0:0	8	;
goto	35:16	35:25	8	bail
water	35:21	0:0	9	bail
water	36:12	0:0	8	}
if	38:12	43:12	6	(s -> nb_streams != feed -> nb_streams)
cond	38:16	38:39	7	s -> nb_streams != feed -> nb_streams
water	38:16	0:0	8	s
op	38:17	0:0	8	->
water	38:19	0:0	8	nb_streams
op	38:30	0:0	8	!=
water	38:33	0:0	8	feed
op	38:37	0:0	8	->
water	38:39	0:0	8	nb_streams
stmts	38:51	43:12	7	
water	38:51	0:0	8	{
call	39:16	41:77	8	http_log
arg	39:25	40:49	9	"Deleting feed file '%s' as stream counts ""differ (%d != %d)\n"
water	39:25	0:0	10	"Deleting feed file '%s' as stream counts "
water	40:28	0:0	10	"differ (%d != %d)\n"
arg	41:25	41:44	9	feed->feed_filename
water	41:25	0:0	10	feed
op	41:29	0:0	10	->
water	41:31	0:0	10	feed_filename
arg	41:46	41:59	9	s->nb_streams
water	41:46	0:0	10	s
op	41:47	0:0	10	->
water	41:49	0:0	10	nb_streams
arg	41:61	41:77	9	feed->nb_streams
water	41:61	0:0	10	feed
op	41:65	0:0	10	->
water	41:67	0:0	10	nb_streams
water	41:78	0:0	8	;
goto	42:16	42:25	8	drop
water	42:21	0:0	9	drop
water	43:12	0:0	8	}
water	44:12	0:0	6	matches
op	44:20	0:0	6	=
water	44:22	0:0	6	1
water	44:23	0:0	6	;
for	45:12	59:12	6	(i = 0 ;i < s -> nb_streams;i ++)
forinit	45:16	45:19	7	i = 0 ;
water	45:16	0:0	8	i
op	45:17	0:0	8	=
water	45:18	0:0	8	0
water	45:19	0:0	8	;
cond	45:20	45:25	7	i < s -> nb_streams
water	45:20	0:0	8	i
op	45:21	0:0	8	<
water	45:22	0:0	8	s
op	45:23	0:0	8	->
water	45:25	0:0	8	nb_streams
forexpr	45:36	45:37	7	i ++
water	45:36	0:0	8	i
op	45:37	0:0	8	++
stmts	45:41	59:12	7	
water	45:41	0:0	8	{
decl	46:16	46:28	8	AVStream	*ss
decl	47:16	47:35	8	LayeredAVStream	*sf
water	48:16	0:0	8	sf
op	48:19	0:0	8	=
water	48:21	0:0	8	feed
op	48:25	0:0	8	->
water	48:27	0:0	8	streams
op	48:34	0:0	8	[
water	48:35	0:0	8	i
op	48:36	0:0	8	]
water	48:37	0:0	8	;
water	49:16	0:0	8	ss
op	49:19	0:0	8	=
water	49:21	0:0	8	s
op	49:22	0:0	8	->
water	49:24	0:0	8	streams
op	49:31	0:0	8	[
water	49:32	0:0	8	i
op	49:33	0:0	8	]
water	49:34	0:0	8	;
if	50:16	55:16	8	(sf -> index != ss -> index || sf -> id != ss -> id)
cond	50:20	50:60	9	sf -> index != ss -> index || sf -> id != ss -> id
water	50:20	0:0	10	sf
op	50:22	0:0	10	->
water	50:24	0:0	10	index
op	50:30	0:0	10	!=
water	50:33	0:0	10	ss
op	50:35	0:0	10	->
water	50:37	0:0	10	index
op	50:43	0:0	10	||
water	50:46	0:0	10	sf
op	50:48	0:0	10	->
water	50:50	0:0	10	id
op	50:53	0:0	10	!=
water	50:56	0:0	10	ss
op	50:58	0:0	10	->
water	50:60	0:0	10	id
stmts	50:64	55:16	9	
water	50:64	0:0	10	{
call	51:20	52:51	10	http_log
arg	51:29	51:75	11	"Index & Id do not match for stream %d (%s)\n"
water	51:29	0:0	12	"Index & Id do not match for stream %d (%s)\n"
arg	52:29	52:30	11	i
water	52:29	0:0	12	i
arg	52:32	52:51	11	feed->feed_filename
water	52:32	0:0	12	feed
op	52:36	0:0	12	->
water	52:38	0:0	12	feed_filename
water	52:52	0:0	10	;
water	53:20	0:0	10	matches
op	53:28	0:0	10	=
water	53:30	0:0	10	0
water	53:31	0:0	10	;
break	54:20	54:25	10	
water	55:16	0:0	10	}
water	56:16	0:0	8	matches
op	56:24	0:0	8	=
call	56:26	56:54	8	check_codec_match
arg	56:45	56:47	9	sf
water	56:45	0:0	10	sf
arg	56:49	56:51	9	ss
water	56:49	0:0	10	ss
arg	56:53	56:54	9	i
water	56:53	0:0	10	i
water	56:55	0:0	8	;
if	57:16	58:25	8	(! matches)
cond	57:20	57:21	9	! matches
op	57:20	0:0	10	!
water	57:21	0:0	10	matches
stmts	58:20	58:25	9	
break	58:20	58:25	10	
water	59:12	0:0	8	}
label	60:0	60:4	6	drop :
if	61:12	62:40	6	(s)
cond	61:16	61:16	7	s
water	61:16	0:0	8	s
stmts	62:16	62:40	7	
call	62:16	62:39	8	avformat_close_input
arg	62:37	62:39	9	&s
op	62:37	0:0	10	&
water	62:38	0:0	10	s
water	62:40	0:0	8	;
if	63:12	70:12	6	(! matches)
cond	63:16	63:17	7	! matches
op	63:16	0:0	8	!
water	63:17	0:0	8	matches
stmts	63:26	70:12	7	
water	63:26	0:0	8	{
if	64:16	68:16	8	(feed -> readonly)
cond	64:20	64:26	9	feed -> readonly
water	64:20	0:0	10	feed
op	64:24	0:0	10	->
water	64:26	0:0	10	readonly
stmts	64:36	68:16	9	
water	64:36	0:0	10	{
call	65:20	66:48	10	http_log
arg	65:29	65:74	11	"Unable to delete read-only feed file '%s'\n"
water	65:29	0:0	12	"Unable to delete read-only feed file '%s'\n"
arg	66:29	66:48	11	feed->feed_filename
water	66:29	0:0	12	feed
op	66:33	0:0	12	->
water	66:35	0:0	12	feed_filename
water	66:49	0:0	10	;
goto	67:20	67:29	10	bail
water	67:25	0:0	11	bail
water	68:16	0:0	10	}
call	69:16	69:42	8	unlink
arg	69:23	69:42	9	feed->feed_filename
water	69:23	0:0	10	feed
op	69:27	0:0	10	->
water	69:29	0:0	10	feed_filename
water	69:43	0:0	8	;
water	70:12	0:0	8	}
water	71:8	0:0	6	}
if	72:8	115:8	4	(avio_check (feed -> feed_filename ,AVIO_FLAG_WRITE ) <= 0)
cond	72:12	72:64	5	avio_check (feed -> feed_filename ,AVIO_FLAG_WRITE ) <= 0
call	72:12	72:59	6	avio_check
arg	72:23	72:42	7	feed->feed_filename
water	72:23	0:0	8	feed
op	72:27	0:0	8	->
water	72:29	0:0	8	feed_filename
arg	72:44	72:59	7	AVIO_FLAG_WRITE
water	72:44	0:0	8	AVIO_FLAG_WRITE
op	72:61	0:0	6	<=
water	72:64	0:0	6	0
stmts	72:67	115:8	5	
water	72:67	0:0	6	{
decl	73:12	73:57	6	AVFormatContext	*s
op	73:31	0:0	6	=
call	73:33	73:56	7	avformat_alloc_context
if	74:12	77:12	6	(! s)
cond	74:16	74:17	7	! s
op	74:16	0:0	8	!
water	74:17	0:0	8	s
stmts	74:20	77:12	7	
water	74:20	0:0	8	{
call	75:16	75:55	8	http_log
arg	75:25	75:55	9	"Failed to allocate context\n"
water	75:25	0:0	10	"Failed to allocate context\n"
water	75:56	0:0	8	;
goto	76:16	76:25	8	bail
water	76:21	0:0	9	bail
water	77:12	0:0	8	}
if	78:12	84:12	6	(feed -> readonly)
cond	78:16	78:22	7	feed -> readonly
water	78:16	0:0	8	feed
op	78:20	0:0	8	->
water	78:22	0:0	8	readonly
stmts	78:32	84:12	7	
water	78:32	0:0	8	{
call	79:16	81:44	8	http_log
arg	79:25	80:47	9	"Unable to create feed file '%s' as it is ""marked readonly\n"
water	79:25	0:0	10	"Unable to create feed file '%s' as it is "
water	80:28	0:0	10	"marked readonly\n"
arg	81:25	81:44	9	feed->feed_filename
water	81:25	0:0	10	feed
op	81:29	0:0	10	->
water	81:31	0:0	10	feed_filename
water	81:45	0:0	8	;
call	82:16	82:39	8	avformat_free_context
arg	82:38	82:39	9	s
water	82:38	0:0	10	s
water	82:40	0:0	8	;
goto	83:16	83:25	8	bail
water	83:21	0:0	9	bail
water	84:12	0:0	8	}
if	86:12	91:12	6	(avio_open (& s -> pb ,feed -> feed_filename ,AVIO_FLAG_WRITE ) < 0)
cond	86:16	86:74	7	avio_open (& s -> pb ,feed -> feed_filename ,AVIO_FLAG_WRITE ) < 0
call	86:16	86:70	8	avio_open
arg	86:26	86:32	9	&s->pb
op	86:26	0:0	10	&
water	86:27	0:0	10	s
op	86:28	0:0	10	->
water	86:30	0:0	10	pb
arg	86:34	86:53	9	feed->feed_filename
water	86:34	0:0	10	feed
op	86:38	0:0	10	->
water	86:40	0:0	10	feed_filename
arg	86:55	86:70	9	AVIO_FLAG_WRITE
water	86:55	0:0	10	AVIO_FLAG_WRITE
op	86:72	0:0	8	<
water	86:74	0:0	8	0
stmts	86:77	91:12	7	
water	86:77	0:0	8	{
call	87:16	88:44	8	http_log
arg	87:25	87:65	9	"Could not open output feed file '%s'\n"
water	87:25	0:0	10	"Could not open output feed file '%s'\n"
arg	88:25	88:44	9	feed->feed_filename
water	88:25	0:0	10	feed
op	88:29	0:0	10	->
water	88:31	0:0	10	feed_filename
water	88:45	0:0	8	;
call	89:16	89:39	8	avformat_free_context
arg	89:38	89:39	9	s
water	89:38	0:0	10	s
water	89:40	0:0	8	;
goto	90:16	90:25	8	bail
water	90:21	0:0	9	bail
water	91:12	0:0	8	}
water	92:12	0:0	6	s
op	92:13	0:0	6	->
water	92:15	0:0	6	oformat
op	92:23	0:0	6	=
water	92:25	0:0	6	feed
op	92:29	0:0	6	->
water	92:31	0:0	6	fmt
water	92:34	0:0	6	;
for	93:12	100:12	6	(i = 0 ;i < feed -> nb_streams;i ++)
forinit	93:17	93:22	7	i = 0 ;
water	93:17	0:0	8	i
op	93:19	0:0	8	=
water	93:21	0:0	8	0
water	93:22	0:0	8	;
cond	93:24	93:32	7	i < feed -> nb_streams
water	93:24	0:0	8	i
op	93:25	0:0	8	<
water	93:26	0:0	8	feed
op	93:30	0:0	8	->
water	93:32	0:0	8	nb_streams
forexpr	93:44	93:45	7	i ++
water	93:44	0:0	8	i
op	93:45	0:0	8	++
stmts	93:49	100:12	7	
water	93:49	0:0	8	{
decl	94:16	94:59	8	AVStream	*st
op	94:29	0:0	8	=
call	94:31	94:58	9	avformat_new_stream
arg	94:51	94:52	10	s
water	94:51	0:0	11	s
arg	94:54	94:58	10	NULL
water	94:54	0:0	11	NULL
if	95:16	98:16	8	(! st)
cond	95:20	95:21	9	! st
op	95:20	0:0	10	!
water	95:21	0:0	10	st
stmts	95:25	98:16	9	
water	95:25	0:0	10	{
call	96:20	96:58	10	http_log
arg	96:29	96:58	11	"Failed to allocate stream\n"
water	96:29	0:0	12	"Failed to allocate stream\n"
water	96:59	0:0	10	;
goto	97:20	97:29	10	bail
water	97:25	0:0	11	bail
water	98:16	0:0	10	}
call	99:16	99:51	8	unlayer_stream
arg	99:31	99:33	9	st
water	99:31	0:0	10	st
arg	99:35	99:51	9	feed->streams[i]
water	99:35	0:0	10	feed
op	99:39	0:0	10	->
water	99:41	0:0	10	streams
op	99:48	0:0	10	[
water	99:49	0:0	10	i
op	99:50	0:0	10	]
water	99:52	0:0	8	;
water	100:12	0:0	8	}
if	101:12	108:12	6	(avformat_write_header (s ,NULL ) < 0)
cond	101:16	101:49	7	avformat_write_header (s ,NULL ) < 0
call	101:16	101:45	8	avformat_write_header
arg	101:38	101:39	9	s
water	101:38	0:0	10	s
arg	101:41	101:45	9	NULL
water	101:41	0:0	10	NULL
op	101:47	0:0	8	<
water	101:49	0:0	8	0
stmts	101:52	108:12	7	
water	101:52	0:0	8	{
call	102:16	102:78	8	http_log
arg	102:25	102:78	9	"Container doesn't support the required parameters\n"
water	102:25	0:0	10	"Container doesn't support the required parameters\n"
water	102:79	0:0	8	;
call	103:16	103:34	8	avio_closep
arg	103:28	103:34	9	&s->pb
op	103:28	0:0	10	&
water	103:29	0:0	10	s
op	103:30	0:0	10	->
water	103:32	0:0	10	pb
water	103:35	0:0	8	;
water	104:16	0:0	8	s
op	104:17	0:0	8	->
water	104:19	0:0	8	streams
op	104:27	0:0	8	=
water	104:29	0:0	8	NULL
water	104:33	0:0	8	;
water	105:16	0:0	8	s
op	105:17	0:0	8	->
water	105:19	0:0	8	nb_streams
op	105:30	0:0	8	=
water	105:32	0:0	8	0
water	105:33	0:0	8	;
call	106:16	106:39	8	avformat_free_context
arg	106:38	106:39	9	s
water	106:38	0:0	10	s
water	106:40	0:0	8	;
goto	107:16	107:25	8	bail
water	107:21	0:0	9	bail
water	108:12	0:0	8	}
call	110:12	110:34	6	av_freep
arg	110:21	110:34	7	&s->priv_data
op	110:21	0:0	8	&
water	110:22	0:0	8	s
op	110:23	0:0	8	->
water	110:25	0:0	8	priv_data
water	110:35	0:0	6	;
call	111:12	111:30	6	avio_closep
arg	111:24	111:30	7	&s->pb
op	111:24	0:0	8	&
water	111:25	0:0	8	s
op	111:26	0:0	8	->
water	111:28	0:0	8	pb
water	111:31	0:0	6	;
water	112:12	0:0	6	s
op	112:13	0:0	6	->
water	112:15	0:0	6	streams
op	112:23	0:0	6	=
water	112:25	0:0	6	NULL
water	112:29	0:0	6	;
water	113:12	0:0	6	s
op	113:13	0:0	6	->
water	113:15	0:0	6	nb_streams
op	113:26	0:0	6	=
water	113:28	0:0	6	0
water	113:29	0:0	6	;
call	114:12	114:35	6	avformat_free_context
arg	114:34	114:35	7	s
water	114:34	0:0	8	s
water	114:36	0:0	6	;
water	115:8	0:0	6	}
water	117:8	0:0	4	fd
op	117:11	0:0	4	=
call	117:13	117:47	4	open
arg	117:18	117:37	5	feed->feed_filename
water	117:18	0:0	6	feed
op	117:22	0:0	6	->
water	117:24	0:0	6	feed_filename
arg	117:39	117:47	5	O_RDONLY
water	117:39	0:0	6	O_RDONLY
water	117:48	0:0	4	;
if	118:8	122:8	4	(fd < 0)
cond	118:12	118:17	5	fd < 0
water	118:12	0:0	6	fd
op	118:15	0:0	6	<
water	118:17	0:0	6	0
stmts	118:20	122:8	5	
water	118:20	0:0	6	{
call	119:12	120:39	6	http_log
arg	119:21	119:61	7	"Could not open output feed file '%s'\n"
water	119:21	0:0	8	"Could not open output feed file '%s'\n"
arg	120:20	120:39	7	feed->feed_filename
water	120:20	0:0	8	feed
op	120:24	0:0	8	->
water	120:26	0:0	8	feed_filename
water	120:40	0:0	6	;
goto	121:12	121:21	6	bail
water	121:17	0:0	7	bail
water	122:8	0:0	6	}
water	123:8	0:0	4	feed
op	123:12	0:0	4	->
water	123:14	0:0	4	feed_write_index
op	123:31	0:0	4	=
call	123:33	124:54	4	FFMAX
arg	123:39	123:63	5	ffm_read_write_index(fd)
call	123:39	123:62	6	ffm_read_write_index
arg	123:60	123:62	7	fd
water	123:60	0:0	8	fd
arg	124:39	124:54	5	FFM_PACKET_SIZE
water	124:39	0:0	6	FFM_PACKET_SIZE
water	124:55	0:0	4	;
water	125:8	0:0	4	feed
op	125:12	0:0	4	->
water	125:14	0:0	4	feed_size
op	125:24	0:0	4	=
call	125:26	125:47	4	lseek
arg	125:32	125:34	5	fd
water	125:32	0:0	6	fd
arg	125:36	125:37	5	0
water	125:36	0:0	6	0
arg	125:39	125:47	5	SEEK_END
water	125:39	0:0	6	SEEK_END
water	125:48	0:0	4	;
if	127:8	128:49	4	(feed -> feed_max_size && feed -> feed_max_size < feed -> feed_size)
cond	127:12	127:63	5	feed -> feed_max_size && feed -> feed_max_size < feed -> feed_size
water	127:12	0:0	6	feed
op	127:16	0:0	6	->
water	127:18	0:0	6	feed_max_size
op	127:32	0:0	6	&&
water	127:35	0:0	6	feed
op	127:39	0:0	6	->
water	127:41	0:0	6	feed_max_size
op	127:55	0:0	6	<
water	127:57	0:0	6	feed
op	127:61	0:0	6	->
water	127:63	0:0	6	feed_size
stmts	128:12	128:49	5	
water	128:12	0:0	6	feed
op	128:16	0:0	6	->
water	128:18	0:0	6	feed_max_size
op	128:32	0:0	6	=
water	128:34	0:0	6	feed
op	128:38	0:0	6	->
water	128:40	0:0	6	feed_size
water	128:49	0:0	6	;
call	129:8	129:16	4	close
arg	129:14	129:16	5	fd
water	129:14	0:0	6	fd
water	129:17	0:0	4	;
water	130:4	0:0	4	}
return	131:4	131:12	2	0
water	131:11	0:0	3	0
label	132:0	132:4	2	bail :
return	133:4	133:13	2	-1
op	133:11	0:0	3	-
water	133:12	0:0	3	1
