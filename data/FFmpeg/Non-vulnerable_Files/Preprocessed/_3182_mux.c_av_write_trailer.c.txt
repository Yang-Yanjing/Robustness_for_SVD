func	1:0	39:0	0	int	av_write_trailer
params	1:20	0:0	1	
param	1:21	1:39	2	AVFormatContext *	s
stmnts	0:0	38:14	1	
decl	3:4	3:14	2	int	ret
water	3:11	0:0	2	,
decl	3:4	3:14	2	int	i
for	4:4	19:4	2	(;;)
forinit	4:9	4:9	3	;
water	4:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	4:14	19:4	3	
water	4:14	0:0	4	{
decl	5:8	5:20	4	AVPacket	pkt
water	6:8	0:0	4	ret
op	6:12	0:0	4	=
call	6:14	6:48	4	interleave_packet
arg	6:32	6:33	5	s
water	6:32	0:0	6	s
arg	6:35	6:39	5	&pkt
op	6:35	0:0	6	&
water	6:36	0:0	6	pkt
arg	6:41	6:45	5	NULL
water	6:41	0:0	6	NULL
arg	6:47	6:48	5	1
water	6:47	0:0	6	1
water	6:49	0:0	4	;
if	7:8	8:21	4	(ret < 0)
cond	7:12	7:18	5	ret < 0
water	7:12	0:0	6	ret
op	7:16	0:0	6	<
water	7:18	0:0	6	0
stmts	8:12	8:21	5	
goto	8:12	8:21	6	fail
water	8:17	0:0	7	fail
if	9:8	10:17	4	(! ret)
cond	9:12	9:13	5	! ret
op	9:12	0:0	6	!
water	9:13	0:0	6	ret
stmts	10:12	10:17	5	
break	10:12	10:17	6	
water	11:8	0:0	4	ret
op	11:12	0:0	4	=
call	11:14	11:34	4	write_packet
arg	11:27	11:28	5	s
water	11:27	0:0	6	s
arg	11:30	11:34	5	&pkt
op	11:30	0:0	6	&
water	11:31	0:0	6	pkt
water	11:35	0:0	4	;
if	12:8	13:53	4	(ret >= 0)
cond	12:12	12:19	5	ret >= 0
water	12:12	0:0	6	ret
op	12:16	0:0	6	>=
water	12:19	0:0	6	0
stmts	13:12	13:53	5	
water	13:12	0:0	6	s
op	13:13	0:0	6	->
water	13:15	0:0	6	streams
op	13:22	0:0	6	[
water	13:23	0:0	6	pkt
op	13:26	0:0	6	.
water	13:27	0:0	6	stream_index
op	13:39	0:0	6	]
op	13:40	0:0	6	->
water	13:42	0:0	6	nb_frames
op	13:51	0:0	6	++
water	13:53	0:0	6	;
call	14:8	14:27	4	av_free_packet
arg	14:23	14:27	5	&pkt
op	14:23	0:0	6	&
water	14:24	0:0	6	pkt
water	14:28	0:0	4	;
if	15:8	16:21	4	(ret < 0)
cond	15:12	15:18	5	ret < 0
water	15:12	0:0	6	ret
op	15:16	0:0	6	<
water	15:18	0:0	6	0
stmts	16:12	16:21	5	
goto	16:12	16:21	6	fail
water	16:17	0:0	7	fail
if	17:8	18:21	4	(s -> pb && s -> pb -> error)
cond	17:11	17:27	5	s -> pb && s -> pb -> error
water	17:11	0:0	6	s
op	17:12	0:0	6	->
water	17:14	0:0	6	pb
op	17:17	0:0	6	&&
water	17:20	0:0	6	s
op	17:21	0:0	6	->
water	17:23	0:0	6	pb
op	17:25	0:0	6	->
water	17:27	0:0	6	error
stmts	18:12	18:21	5	
goto	18:12	18:21	6	fail
water	18:17	0:0	7	fail
water	19:4	0:0	4	}
label	20:0	20:4	2	fail :
if	21:4	24:8	2	(s -> oformat -> write_trailer)
cond	21:8	21:20	3	s -> oformat -> write_trailer
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	oformat
op	21:18	0:0	4	->
water	21:20	0:0	4	write_trailer
stmts	22:8	24:8	3	
if	22:8	24:8	4	(ret >= 0)
cond	22:12	22:19	5	ret >= 0
water	22:12	0:0	6	ret
op	22:16	0:0	6	>=
water	22:19	0:0	6	0
stmts	22:22	24:8	5	
water	22:22	0:0	6	{
water	23:8	0:0	6	ret
op	23:12	0:0	6	=
call	23:14	23:41	6	s->oformat->write_trailer
arg	23:40	23:41	7	s
water	23:40	0:0	8	s
water	23:42	0:0	6	;
water	24:8	0:0	6	}
else	24:10	26:8	2
stmts	24:15	26:8	3	
water	24:15	0:0	4	{
call	25:12	25:39	4	s->oformat->write_trailer
arg	25:38	25:39	5	s
water	25:38	0:0	6	s
water	25:40	0:0	4	;
water	26:8	0:0	4	}
if	27:4	28:24	2	(s -> pb)
cond	27:8	27:11	3	s -> pb
water	27:8	0:0	4	s
op	27:9	0:0	4	->
water	27:11	0:0	4	pb
stmts	28:7	28:24	3	
call	28:7	28:23	4	avio_flush
arg	28:18	28:23	5	s->pb
water	28:18	0:0	6	s
op	28:19	0:0	6	->
water	28:21	0:0	6	pb
water	28:24	0:0	4	;
if	29:4	30:37	2	(ret == 0)
cond	29:8	29:15	3	ret == 0
water	29:8	0:0	4	ret
op	29:12	0:0	4	==
water	29:15	0:0	4	0
stmts	30:7	30:37	3	
water	30:7	0:0	4	ret
op	30:11	0:0	4	=
water	30:13	0:0	4	s
op	30:14	0:0	4	->
water	30:16	0:0	4	pb
water	30:19	0:0	4	?
water	30:21	0:0	4	s
op	30:22	0:0	4	->
water	30:24	0:0	4	pb
op	30:26	0:0	4	->
water	30:28	0:0	4	error
water	30:34	0:0	4	:
water	30:36	0:0	4	0
water	30:37	0:0	4	;
for	31:4	34:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	31:9	31:14	3	i = 0 ;
water	31:9	0:0	4	i
op	31:11	0:0	4	=
water	31:13	0:0	4	0
water	31:14	0:0	4	;
cond	31:16	31:23	3	i < s -> nb_streams
water	31:16	0:0	4	i
op	31:18	0:0	4	<
water	31:20	0:0	4	s
op	31:21	0:0	4	->
water	31:23	0:0	4	nb_streams
forexpr	31:35	31:36	3	i ++
water	31:35	0:0	4	i
op	31:36	0:0	4	++
stmts	31:40	34:4	3	
water	31:40	0:0	4	{
call	32:8	32:42	4	av_freep
arg	32:17	32:42	5	&s->streams[i]->priv_data
op	32:17	0:0	6	&
water	32:18	0:0	6	s
op	32:19	0:0	6	->
water	32:21	0:0	6	streams
op	32:28	0:0	6	[
water	32:29	0:0	6	i
op	32:30	0:0	6	]
op	32:31	0:0	6	->
water	32:33	0:0	6	priv_data
water	32:43	0:0	4	;
call	33:8	33:46	4	av_freep
arg	33:17	33:46	5	&s->streams[i]->index_entries
op	33:17	0:0	6	&
water	33:18	0:0	6	s
op	33:19	0:0	6	->
water	33:21	0:0	6	streams
op	33:28	0:0	6	[
water	33:29	0:0	6	i
op	33:30	0:0	6	]
op	33:31	0:0	6	->
water	33:33	0:0	6	index_entries
water	33:47	0:0	4	;
water	34:4	0:0	4	}
if	35:4	36:33	2	(s -> oformat -> priv_class)
cond	35:8	35:20	3	s -> oformat -> priv_class
water	35:8	0:0	4	s
op	35:9	0:0	4	->
water	35:11	0:0	4	oformat
op	35:18	0:0	4	->
water	35:20	0:0	4	priv_class
stmts	36:8	36:33	3	
call	36:8	36:32	4	av_opt_free
arg	36:20	36:32	5	s->priv_data
water	36:20	0:0	6	s
op	36:21	0:0	6	->
water	36:23	0:0	6	priv_data
water	36:33	0:0	4	;
call	37:4	37:26	2	av_freep
arg	37:13	37:26	3	&s->priv_data
op	37:13	0:0	4	&
water	37:14	0:0	4	s
op	37:15	0:0	4	->
water	37:17	0:0	4	priv_data
water	37:27	0:0	2	;
return	38:4	38:14	2	ret
water	38:11	0:0	3	ret
