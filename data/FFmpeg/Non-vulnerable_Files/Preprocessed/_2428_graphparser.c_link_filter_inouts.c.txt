func	1:0	41:0	0	static int	link_filter_inouts
params	1:29	0:0	1	
param	1:30	1:55	2	AVFilterContext *	filt_ctx
param	2:30	2:57	2	AVFilterInOut * *	curr_inputs
param	3:30	3:57	2	AVFilterInOut * *	open_inputs
param	3:59	3:72	2	void *	log_ctx
stmnts	0:0	40:12	1	
decl	5:4	5:16	2	int	pad
water	5:11	0:0	2	,
decl	5:4	5:16	2	int	ret
for	6:4	24:4	2	(pad = 0 ;pad < filt_ctx -> nb_inputs;pad ++)
forinit	6:9	6:16	3	pad = 0 ;
water	6:9	0:0	4	pad
op	6:13	0:0	4	=
water	6:15	0:0	4	0
water	6:16	0:0	4	;
cond	6:18	6:34	3	pad < filt_ctx -> nb_inputs
water	6:18	0:0	4	pad
op	6:22	0:0	4	<
water	6:24	0:0	4	filt_ctx
op	6:32	0:0	4	->
water	6:34	0:0	4	nb_inputs
forexpr	6:45	6:48	3	pad ++
water	6:45	0:0	4	pad
op	6:48	0:0	4	++
stmts	6:52	24:4	3	
water	6:52	0:0	4	{
decl	7:8	7:39	4	AVFilterInOut	*p
op	7:25	0:0	4	=
op	7:27	0:0	4	*
water	7:28	0:0	4	curr_inputs
if	8:8	11:8	4	(p)
cond	8:12	8:12	5	p
water	8:12	0:0	6	p
stmts	8:15	11:8	5	
water	8:15	0:0	6	{
op	9:12	0:0	6	*
water	9:13	0:0	6	curr_inputs
op	9:25	0:0	6	=
water	9:27	0:0	6	(
op	9:28	0:0	6	*
water	9:29	0:0	6	curr_inputs
water	9:40	0:0	6	)
op	9:41	0:0	6	->
water	9:43	0:0	6	next
water	9:47	0:0	6	;
water	10:12	0:0	6	p
op	10:13	0:0	6	->
water	10:15	0:0	6	next
op	10:20	0:0	6	=
water	10:22	0:0	6	NULL
water	10:26	0:0	6	;
water	11:8	0:0	6	}
else	11:10	12:34	4
stmts	11:15	12:34	5	
if	11:15	12:34	6	(! ( p =av_mallocz (sizeof ( * p ) ) ))
cond	11:19	11:47	7	! ( p =av_mallocz (sizeof ( * p ) ) )
op	11:19	0:0	8	!
water	11:20	0:0	8	(
water	11:21	0:0	8	p
op	11:23	0:0	8	=
call	11:25	11:46	8	av_mallocz
arg	11:36	11:46	9	sizeof(*p)
op	11:36	0:0	10	sizeof
water	11:42	0:0	10	(
op	11:43	0:0	10	*
water	11:44	0:0	10	p
water	11:45	0:0	10	)
water	11:47	0:0	8	)
stmts	12:12	12:34	7	
return	12:12	12:34	8	AVERROR(ENOMEM)
call	12:19	12:33	9	AVERROR
arg	12:27	12:33	10	ENOMEM
water	12:27	0:0	11	ENOMEM
if	13:8	19:8	4	(p -> filter_ctx)
cond	13:12	13:15	5	p -> filter_ctx
water	13:12	0:0	6	p
op	13:13	0:0	6	->
water	13:15	0:0	6	filter_ctx
stmts	13:27	19:8	5	
water	13:27	0:0	6	{
water	14:12	0:0	6	ret
op	14:16	0:0	6	=
call	14:18	14:79	6	link_filter
arg	14:30	14:43	7	p->filter_ctx
water	14:30	0:0	8	p
op	14:31	0:0	8	->
water	14:33	0:0	8	filter_ctx
arg	14:45	14:55	7	p->pad_idx
water	14:45	0:0	8	p
op	14:46	0:0	8	->
water	14:48	0:0	8	pad_idx
arg	14:57	14:65	7	filt_ctx
water	14:57	0:0	8	filt_ctx
arg	14:67	14:70	7	pad
water	14:67	0:0	8	pad
arg	14:72	14:79	7	log_ctx
water	14:72	0:0	8	log_ctx
water	14:80	0:0	6	;
call	15:12	15:29	6	av_freep
arg	15:21	15:29	7	&p->name
op	15:21	0:0	8	&
water	15:22	0:0	8	p
op	15:23	0:0	8	->
water	15:25	0:0	8	name
water	15:30	0:0	6	;
call	16:12	16:23	6	av_freep
arg	16:21	16:23	7	&p
op	16:21	0:0	8	&
water	16:22	0:0	8	p
water	16:24	0:0	6	;
if	17:12	18:26	6	(ret < 0)
cond	17:16	17:22	7	ret < 0
water	17:16	0:0	8	ret
op	17:20	0:0	8	<
water	17:22	0:0	8	0
stmts	18:16	18:26	7	
return	18:16	18:26	8	ret
water	18:23	0:0	9	ret
water	19:8	0:0	6	}
else	19:10	23:8	4
stmts	19:15	23:8	5	
water	19:15	0:0	6	{
water	20:12	0:0	6	p
op	20:13	0:0	6	->
water	20:15	0:0	6	filter_ctx
op	20:26	0:0	6	=
water	20:28	0:0	6	filt_ctx
water	20:36	0:0	6	;
water	21:12	0:0	6	p
op	21:13	0:0	6	->
water	21:15	0:0	6	pad_idx
op	21:23	0:0	6	=
water	21:25	0:0	6	pad
water	21:28	0:0	6	;
call	22:12	22:40	6	append_inout
arg	22:25	22:36	7	open_inputs
water	22:25	0:0	8	open_inputs
arg	22:38	22:40	7	&p
op	22:38	0:0	8	&
water	22:39	0:0	8	p
water	22:41	0:0	6	;
water	23:8	0:0	6	}
water	24:4	0:0	4	}
if	25:4	30:4	2	(* curr_inputs)
cond	25:8	25:9	3	* curr_inputs
op	25:8	0:0	4	*
water	25:9	0:0	4	curr_inputs
stmts	25:22	30:4	3	
water	25:22	0:0	4	{
call	26:8	28:37	4	av_log
arg	26:15	26:22	5	log_ctx
water	26:15	0:0	6	log_ctx
arg	26:24	26:36	5	AV_LOG_ERROR
water	26:24	0:0	6	AV_LOG_ERROR
arg	27:15	27:67	5	"Too many inputs specified for the \"%s\" filter.\n"
water	27:15	0:0	6	"Too many inputs specified for the \"%s\" filter.\n"
arg	28:15	28:37	5	filt_ctx->filter->name
water	28:15	0:0	6	filt_ctx
op	28:23	0:0	6	->
water	28:25	0:0	6	filter
op	28:31	0:0	6	->
water	28:33	0:0	6	name
water	28:38	0:0	4	;
return	29:8	29:30	4	AVERROR(EINVAL)
call	29:15	29:29	5	AVERROR
arg	29:23	29:29	6	EINVAL
water	29:23	0:0	7	EINVAL
water	30:4	0:0	4	}
water	31:4	0:0	2	pad
op	31:8	0:0	2	=
water	31:10	0:0	2	filt_ctx
op	31:18	0:0	2	->
water	31:20	0:0	2	nb_outputs
water	31:30	0:0	2	;
while	32:4	39:4	2	(pad --)
cond	32:11	32:14	3	pad --
water	32:11	0:0	4	pad
op	32:14	0:0	4	--
stmts	32:18	39:4	3	
water	32:18	0:0	4	{
decl	33:8	33:68	4	AVFilterInOut	*currlinkn
op	33:33	0:0	4	=
call	33:35	33:67	5	av_mallocz
arg	33:46	33:67	6	sizeof(AVFilterInOut)
op	33:46	0:0	7	sizeof
water	33:52	0:0	7	(
water	33:53	0:0	7	AVFilterInOut
water	33:66	0:0	7	)
if	34:8	35:34	4	(! currlinkn)
cond	34:12	34:13	5	! currlinkn
op	34:12	0:0	6	!
water	34:13	0:0	6	currlinkn
stmts	35:12	35:34	5	
return	35:12	35:34	6	AVERROR(ENOMEM)
call	35:19	35:33	7	AVERROR
arg	35:27	35:33	8	ENOMEM
water	35:27	0:0	9	ENOMEM
water	36:8	0:0	4	currlinkn
op	36:17	0:0	4	->
water	36:19	0:0	4	filter_ctx
op	36:31	0:0	4	=
water	36:33	0:0	4	filt_ctx
water	36:41	0:0	4	;
water	37:8	0:0	4	currlinkn
op	37:17	0:0	4	->
water	37:19	0:0	4	pad_idx
op	37:27	0:0	4	=
water	37:29	0:0	4	pad
water	37:32	0:0	4	;
call	38:8	38:43	4	insert_inout
arg	38:21	38:32	5	curr_inputs
water	38:21	0:0	6	curr_inputs
arg	38:34	38:43	5	currlinkn
water	38:34	0:0	6	currlinkn
water	38:44	0:0	4	;
water	39:4	0:0	4	}
return	40:4	40:12	2	0
water	40:11	0:0	3	0
