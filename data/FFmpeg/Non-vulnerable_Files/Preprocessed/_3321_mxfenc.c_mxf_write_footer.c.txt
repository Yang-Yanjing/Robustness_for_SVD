func	1:0	52:0	0	static int	mxf_write_footer
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
stmnts	0:0	51:28	1	
decl	3:4	3:34	2	MXFContext	*mxf
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:15	2	int	err
op	5:12	0:0	2	=
water	5:14	0:0	2	0
if	6:4	11:4	2	(! mxf -> header_written || ( s -> oformat == & ff_mxf_opatom_muxer && ! mxf -> body_partition_offset ))
cond	6:8	7:74	3	! mxf -> header_written || ( s -> oformat == & ff_mxf_opatom_muxer && ! mxf -> body_partition_offset )
op	6:8	0:0	4	!
water	6:9	0:0	4	mxf
op	6:12	0:0	4	->
water	6:14	0:0	4	header_written
op	6:29	0:0	4	||
water	7:8	0:0	4	(
water	7:9	0:0	4	s
op	7:10	0:0	4	->
water	7:12	0:0	4	oformat
op	7:20	0:0	4	==
op	7:23	0:0	4	&
water	7:24	0:0	4	ff_mxf_opatom_muxer
op	7:44	0:0	4	&&
op	7:47	0:0	4	!
water	7:48	0:0	4	mxf
op	7:51	0:0	4	->
water	7:53	0:0	4	body_partition_offset
water	7:74	0:0	4	)
stmts	7:77	11:4	3	
water	7:77	0:0	4	{
water	9:8	0:0	4	err
op	9:12	0:0	4	=
water	9:14	0:0	4	AVERROR_UNKNOWN
water	9:29	0:0	4	;
goto	10:8	10:16	4	end
water	10:13	0:0	5	end
water	11:4	0:0	4	}
water	12:4	0:0	2	mxf
op	12:7	0:0	2	->
water	12:9	0:0	2	duration
op	12:18	0:0	2	=
water	12:20	0:0	2	mxf
op	12:23	0:0	2	->
water	12:25	0:0	2	last_indexed_edit_unit
op	12:48	0:0	2	+
water	12:50	0:0	2	mxf
op	12:53	0:0	2	->
water	12:55	0:0	2	edit_units_count
water	12:71	0:0	2	;
call	13:4	13:24	2	mxf_write_klv_fill
arg	13:23	13:24	3	s
water	13:23	0:0	4	s
water	13:25	0:0	2	;
water	14:4	0:0	2	mxf
op	14:7	0:0	2	->
water	14:9	0:0	2	footer_partition_offset
op	14:33	0:0	2	=
call	14:35	14:47	2	avio_tell
arg	14:45	14:47	3	pb
water	14:45	0:0	4	pb
water	14:48	0:0	2	;
if	15:4	18:4	2	(mxf -> edit_unit_byte_count && s -> oformat != & ff_mxf_opatom_muxer)
cond	15:8	15:52	3	mxf -> edit_unit_byte_count && s -> oformat != & ff_mxf_opatom_muxer
water	15:8	0:0	4	mxf
op	15:11	0:0	4	->
water	15:13	0:0	4	edit_unit_byte_count
op	15:34	0:0	4	&&
water	15:37	0:0	4	s
op	15:38	0:0	4	->
water	15:40	0:0	4	oformat
op	15:48	0:0	4	!=
op	15:51	0:0	4	&
water	15:52	0:0	4	ff_mxf_opatom_muxer
stmts	15:73	18:4	3	
water	15:73	0:0	4	{
if	16:8	17:20	4	(( err =mxf_write_partition (s ,0 ,0 ,footer_partition_key ,0 ) ) < 0)
cond	16:12	16:76	5	( err =mxf_write_partition (s ,0 ,0 ,footer_partition_key ,0 ) ) < 0
water	16:12	0:0	6	(
water	16:13	0:0	6	err
op	16:17	0:0	6	=
call	16:19	16:71	6	mxf_write_partition
arg	16:39	16:40	7	s
water	16:39	0:0	8	s
arg	16:42	16:43	7	0
water	16:42	0:0	8	0
arg	16:45	16:46	7	0
water	16:45	0:0	8	0
arg	16:48	16:68	7	footer_partition_key
water	16:48	0:0	8	footer_partition_key
arg	16:70	16:71	7	0
water	16:70	0:0	8	0
water	16:72	0:0	6	)
op	16:74	0:0	6	<
water	16:76	0:0	6	0
stmts	17:12	17:20	5	
goto	17:12	17:20	6	end
water	17:17	0:0	7	end
water	18:4	0:0	4	}
else	18:6	23:4	2
stmts	18:11	23:4	3	
water	18:11	0:0	4	{
if	19:8	20:20	4	(( err =mxf_write_partition (s ,0 ,2 ,footer_partition_key ,0 ) ) < 0)
cond	19:12	19:76	5	( err =mxf_write_partition (s ,0 ,2 ,footer_partition_key ,0 ) ) < 0
water	19:12	0:0	6	(
water	19:13	0:0	6	err
op	19:17	0:0	6	=
call	19:19	19:71	6	mxf_write_partition
arg	19:39	19:40	7	s
water	19:39	0:0	8	s
arg	19:42	19:43	7	0
water	19:42	0:0	8	0
arg	19:45	19:46	7	2
water	19:45	0:0	8	2
arg	19:48	19:68	7	footer_partition_key
water	19:48	0:0	8	footer_partition_key
arg	19:70	19:71	7	0
water	19:70	0:0	8	0
water	19:72	0:0	6	)
op	19:74	0:0	6	<
water	19:76	0:0	6	0
stmts	20:12	20:20	5	
goto	20:12	20:20	6	end
water	20:17	0:0	7	end
call	21:8	21:28	4	mxf_write_klv_fill
arg	21:27	21:28	5	s
water	21:27	0:0	6	s
water	21:29	0:0	4	;
call	22:8	22:39	4	mxf_write_index_table_segment
arg	22:38	22:39	5	s
water	22:38	0:0	6	s
water	22:40	0:0	4	;
water	23:4	0:0	4	}
call	24:4	24:24	2	mxf_write_klv_fill
arg	24:23	24:24	3	s
water	24:23	0:0	4	s
water	24:25	0:0	2	;
call	25:4	25:33	2	mxf_write_random_index_pack
arg	25:32	25:33	3	s
water	25:32	0:0	4	s
water	25:34	0:0	2	;
if	26:4	43:4	2	(s -> pb -> seekable)
cond	26:8	26:15	3	s -> pb -> seekable
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	pb
op	26:13	0:0	4	->
water	26:15	0:0	4	seekable
stmts	26:25	43:4	3	
water	26:25	0:0	4	{
if	27:8	32:8	4	(s -> oformat == & ff_mxf_opatom_muxer)
cond	27:12	27:27	5	s -> oformat == & ff_mxf_opatom_muxer
water	27:12	0:0	6	s
op	27:13	0:0	6	->
water	27:15	0:0	6	oformat
op	27:23	0:0	6	==
op	27:26	0:0	6	&
water	27:27	0:0	6	ff_mxf_opatom_muxer
stmts	27:47	32:8	5	
water	27:47	0:0	6	{
call	29:12	29:65	6	avio_seek
arg	29:22	29:24	7	pb
water	29:22	0:0	8	pb
arg	29:26	29:55	7	mxf->body_partition_offset[0]
water	29:26	0:0	8	mxf
op	29:29	0:0	8	->
water	29:31	0:0	8	body_partition_offset
op	29:52	0:0	8	[
water	29:53	0:0	8	0
op	29:54	0:0	8	]
arg	29:57	29:65	7	SEEK_SET
water	29:57	0:0	8	SEEK_SET
water	29:66	0:0	6	;
if	30:12	31:24	6	(( err =mxf_write_opatom_body_partition (s ) ) < 0)
cond	30:16	30:61	7	( err =mxf_write_opatom_body_partition (s ) ) < 0
water	30:16	0:0	8	(
water	30:17	0:0	8	err
op	30:21	0:0	8	=
call	30:23	30:56	8	mxf_write_opatom_body_partition
arg	30:55	30:56	9	s
water	30:55	0:0	10	s
water	30:57	0:0	8	)
op	30:59	0:0	8	<
water	30:61	0:0	8	0
stmts	31:16	31:24	7	
goto	31:16	31:24	8	end
water	31:21	0:0	9	end
water	32:8	0:0	6	}
call	33:8	33:33	4	avio_seek
arg	33:18	33:20	5	pb
water	33:18	0:0	6	pb
arg	33:22	33:23	5	0
water	33:22	0:0	6	0
arg	33:25	33:33	5	SEEK_SET
water	33:25	0:0	6	SEEK_SET
water	33:34	0:0	4	;
if	34:8	39:8	4	(mxf -> edit_unit_byte_count && s -> oformat != & ff_mxf_opatom_muxer)
cond	34:12	34:56	5	mxf -> edit_unit_byte_count && s -> oformat != & ff_mxf_opatom_muxer
water	34:12	0:0	6	mxf
op	34:15	0:0	6	->
water	34:17	0:0	6	edit_unit_byte_count
op	34:38	0:0	6	&&
water	34:41	0:0	6	s
op	34:42	0:0	6	->
water	34:44	0:0	6	oformat
op	34:52	0:0	6	!=
op	34:55	0:0	6	&
water	34:56	0:0	6	ff_mxf_opatom_muxer
stmts	34:77	39:8	5	
water	34:77	0:0	6	{
if	35:12	36:24	6	(( err =mxf_write_partition (s ,1 ,2 ,header_closed_partition_key ,1 ) ) < 0)
cond	35:16	35:87	7	( err =mxf_write_partition (s ,1 ,2 ,header_closed_partition_key ,1 ) ) < 0
water	35:16	0:0	8	(
water	35:17	0:0	8	err
op	35:21	0:0	8	=
call	35:23	35:82	8	mxf_write_partition
arg	35:43	35:44	9	s
water	35:43	0:0	10	s
arg	35:46	35:47	9	1
water	35:46	0:0	10	1
arg	35:49	35:50	9	2
water	35:49	0:0	10	2
arg	35:52	35:79	9	header_closed_partition_key
water	35:52	0:0	10	header_closed_partition_key
arg	35:81	35:82	9	1
water	35:81	0:0	10	1
water	35:83	0:0	8	)
op	35:85	0:0	8	<
water	35:87	0:0	8	0
stmts	36:16	36:24	7	
goto	36:16	36:24	8	end
water	36:21	0:0	9	end
call	37:12	37:32	6	mxf_write_klv_fill
arg	37:31	37:32	7	s
water	37:31	0:0	8	s
water	37:33	0:0	6	;
call	38:12	38:43	6	mxf_write_index_table_segment
arg	38:42	38:43	7	s
water	38:42	0:0	8	s
water	38:44	0:0	6	;
water	39:8	0:0	6	}
else	39:10	42:8	4
stmts	39:15	42:8	5	
water	39:15	0:0	6	{
if	40:12	41:24	6	(( err =mxf_write_partition (s ,0 ,0 ,header_closed_partition_key ,1 ) ) < 0)
cond	40:16	40:87	7	( err =mxf_write_partition (s ,0 ,0 ,header_closed_partition_key ,1 ) ) < 0
water	40:16	0:0	8	(
water	40:17	0:0	8	err
op	40:21	0:0	8	=
call	40:23	40:82	8	mxf_write_partition
arg	40:43	40:44	9	s
water	40:43	0:0	10	s
arg	40:46	40:47	9	0
water	40:46	0:0	10	0
arg	40:49	40:50	9	0
water	40:49	0:0	10	0
arg	40:52	40:79	9	header_closed_partition_key
water	40:52	0:0	10	header_closed_partition_key
arg	40:81	40:82	9	1
water	40:81	0:0	10	1
water	40:83	0:0	8	)
op	40:85	0:0	8	<
water	40:87	0:0	8	0
stmts	41:16	41:24	7	
goto	41:16	41:24	8	end
water	41:21	0:0	9	end
water	42:8	0:0	6	}
water	43:4	0:0	4	}
label	44:0	44:3	2	end :
call	45:4	45:31	2	ff_audio_interleave_close
arg	45:30	45:31	3	s
water	45:30	0:0	4	s
water	45:32	0:0	2	;
call	46:4	46:32	2	av_freep
arg	46:13	46:32	3	&mxf->index_entries
op	46:13	0:0	4	&
water	46:14	0:0	4	mxf
op	46:17	0:0	4	->
water	46:19	0:0	4	index_entries
water	46:33	0:0	2	;
call	47:4	47:40	2	av_freep
arg	47:13	47:40	3	&mxf->body_partition_offset
op	47:13	0:0	4	&
water	47:14	0:0	4	mxf
op	47:17	0:0	4	->
water	47:19	0:0	4	body_partition_offset
water	47:41	0:0	2	;
call	48:4	48:44	2	av_freep
arg	48:13	48:44	3	&mxf->timecode_track->priv_data
op	48:13	0:0	4	&
water	48:14	0:0	4	mxf
op	48:17	0:0	4	->
water	48:19	0:0	4	timecode_track
op	48:33	0:0	4	->
water	48:35	0:0	4	priv_data
water	48:45	0:0	2	;
call	49:4	49:33	2	av_freep
arg	49:13	49:33	3	&mxf->timecode_track
op	49:13	0:0	4	&
water	49:14	0:0	4	mxf
op	49:17	0:0	4	->
water	49:19	0:0	4	timecode_track
water	49:34	0:0	2	;
call	50:4	50:14	2	mxf_free
arg	50:13	50:14	3	s
water	50:13	0:0	4	s
water	50:15	0:0	2	;
return	51:4	51:28	2	err<0?err:0
water	51:11	0:0	3	err
op	51:15	0:0	3	<
water	51:17	0:0	3	0
water	51:19	0:0	3	?
water	51:21	0:0	3	err
water	51:25	0:0	3	:
water	51:27	0:0	3	0
