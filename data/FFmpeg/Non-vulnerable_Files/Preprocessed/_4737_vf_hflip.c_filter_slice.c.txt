func	1:0	58:0	0	static int	filter_slice
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
param	1:46	1:55	2	void *	arg
param	1:57	1:64	2	int	job
param	1:66	1:77	2	int	nb_jobs
stmnts	0:0	57:12	1	
decl	3:4	3:30	2	FlipContext	*s
op	3:19	0:0	2	=
water	3:21	0:0	2	ctx
op	3:24	0:0	2	->
water	3:26	0:0	2	priv
decl	4:4	4:24	2	ThreadData	*td
op	4:19	0:0	2	=
water	4:21	0:0	2	arg
decl	5:4	5:24	2	AVFrame	*in
op	5:16	0:0	2	=
water	5:18	0:0	2	td
op	5:20	0:0	2	->
water	5:22	0:0	2	in
decl	6:4	6:26	2	AVFrame	*out
op	6:17	0:0	2	=
water	6:19	0:0	2	td
op	6:21	0:0	2	->
water	6:23	0:0	2	out
decl	7:4	7:27	2	uint8_t	*inrow
water	7:18	0:0	2	,
decl	7:4	7:27	2	uint8_t	*outrow
decl	8:4	8:25	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:25	2	int	j
water	8:12	0:0	2	,
decl	8:4	8:25	2	int	plane
water	8:19	0:0	2	,
decl	8:4	8:25	2	int	step
for	9:4	56:4	2	(plane = 0 ;plane < 4 && in -> data [ plane ] && in -> linesize [ plane ];plane ++)
forinit	9:9	9:18	3	plane = 0 ;
water	9:9	0:0	4	plane
op	9:15	0:0	4	=
water	9:17	0:0	4	0
water	9:18	0:0	4	;
cond	9:20	9:70	3	plane < 4 && in -> data [ plane ] && in -> linesize [ plane ]
water	9:20	0:0	4	plane
op	9:26	0:0	4	<
water	9:28	0:0	4	4
op	9:30	0:0	4	&&
water	9:33	0:0	4	in
op	9:35	0:0	4	->
water	9:37	0:0	4	data
op	9:41	0:0	4	[
water	9:42	0:0	4	plane
op	9:47	0:0	4	]
op	9:49	0:0	4	&&
water	9:52	0:0	4	in
op	9:54	0:0	4	->
water	9:56	0:0	4	linesize
op	9:64	0:0	4	[
water	9:65	0:0	4	plane
op	9:70	0:0	4	]
forexpr	9:73	9:78	3	plane ++
water	9:73	0:0	4	plane
op	9:78	0:0	4	++
stmts	9:82	56:4	3	
water	9:82	0:0	4	{
decl	10:8	10:47	4	const int	width
op	10:25	0:0	4	=
water	10:27	0:0	4	s
op	10:28	0:0	4	->
water	10:30	0:0	4	planewidth
op	10:40	0:0	4	[
water	10:41	0:0	4	plane
op	10:46	0:0	4	]
decl	11:8	11:48	4	const int	height
op	11:25	0:0	4	=
water	11:27	0:0	4	s
op	11:28	0:0	4	->
water	11:30	0:0	4	planeheight
op	11:41	0:0	4	[
water	11:42	0:0	4	plane
op	11:47	0:0	4	]
decl	12:8	12:54	4	const int	start
op	12:24	0:0	4	=
water	12:26	0:0	4	(
water	12:27	0:0	4	height
op	12:34	0:0	4	*
water	12:37	0:0	4	job
water	12:43	0:0	4	)
op	12:45	0:0	4	/
water	12:47	0:0	4	nb_jobs
decl	13:8	13:54	4	const int	end
op	13:24	0:0	4	=
water	13:26	0:0	4	(
water	13:27	0:0	4	height
op	13:34	0:0	4	*
water	13:36	0:0	4	(
water	13:37	0:0	4	job
op	13:40	0:0	4	+
water	13:41	0:0	4	1
water	13:42	0:0	4	)
water	13:43	0:0	4	)
op	13:45	0:0	4	/
water	13:47	0:0	4	nb_jobs
water	14:8	0:0	4	step
op	14:13	0:0	4	=
water	14:15	0:0	4	s
op	14:16	0:0	4	->
water	14:18	0:0	4	max_step
op	14:26	0:0	4	[
water	14:27	0:0	4	plane
op	14:32	0:0	4	]
water	14:33	0:0	4	;
water	15:8	0:0	4	outrow
op	15:15	0:0	4	=
water	15:17	0:0	4	out
op	15:20	0:0	4	->
water	15:22	0:0	4	data
op	15:26	0:0	4	[
water	15:27	0:0	4	plane
op	15:32	0:0	4	]
op	15:34	0:0	4	+
water	15:36	0:0	4	start
op	15:42	0:0	4	*
water	15:44	0:0	4	out
op	15:47	0:0	4	->
water	15:49	0:0	4	linesize
op	15:57	0:0	4	[
water	15:58	0:0	4	plane
op	15:63	0:0	4	]
water	15:64	0:0	4	;
water	16:8	0:0	4	inrow
op	16:15	0:0	4	=
water	16:17	0:0	4	in
op	16:20	0:0	4	->
water	16:22	0:0	4	data
op	16:26	0:0	4	[
water	16:27	0:0	4	plane
op	16:32	0:0	4	]
op	16:34	0:0	4	+
water	16:36	0:0	4	start
op	16:42	0:0	4	*
water	16:44	0:0	4	in
op	16:46	0:0	4	->
water	16:48	0:0	4	linesize
op	16:56	0:0	4	[
water	16:57	0:0	4	plane
op	16:62	0:0	4	]
op	16:64	0:0	4	+
water	16:66	0:0	4	(
water	16:67	0:0	4	width
op	16:73	0:0	4	-
water	16:75	0:0	4	1
water	16:76	0:0	4	)
op	16:78	0:0	4	*
water	16:80	0:0	4	step
water	16:84	0:0	4	;
for	17:8	55:8	4	(i = start ;i < end;i ++)
forinit	17:13	17:22	5	i = start ;
water	17:13	0:0	6	i
op	17:15	0:0	6	=
water	17:17	0:0	6	start
water	17:22	0:0	6	;
cond	17:24	17:28	5	i < end
water	17:24	0:0	6	i
op	17:26	0:0	6	<
water	17:28	0:0	6	end
forexpr	17:33	17:34	5	i ++
water	17:33	0:0	6	i
op	17:34	0:0	6	++
stmts	17:38	55:8	5	
water	17:38	0:0	6	{
switch	18:12	52:12	6	(step)
cond	18:20	18:20	7	step
water	18:20	0:0	8	step
stmts	18:26	52:12	7	
water	18:26	0:0	8	{
label	19:12	19:18	8	case 1 :
for	20:16	21:41	8	(j = 0 ;j < width;j ++)
forinit	20:21	20:26	9	j = 0 ;
water	20:21	0:0	10	j
op	20:23	0:0	10	=
water	20:25	0:0	10	0
water	20:26	0:0	10	;
cond	20:28	20:32	9	j < width
water	20:28	0:0	10	j
op	20:30	0:0	10	<
water	20:32	0:0	10	width
forexpr	20:39	20:40	9	j ++
water	20:39	0:0	10	j
op	20:40	0:0	10	++
stmts	21:20	21:41	9	
water	21:20	0:0	10	outrow
op	21:26	0:0	10	[
water	21:27	0:0	10	j
op	21:28	0:0	10	]
op	21:30	0:0	10	=
water	21:32	0:0	10	inrow
op	21:37	0:0	10	[
op	21:38	0:0	10	-
water	21:39	0:0	10	j
op	21:40	0:0	10	]
water	21:41	0:0	10	;
break	22:12	22:17	8	
label	23:12	23:18	8	case 2 :
water	24:12	0:0	8	{
decl	25:16	25:55	8	uint16_t	*outrow16
op	25:35	0:0	8	=
water	25:37	0:0	8	(
water	25:38	0:0	8	uint16_t
op	25:47	0:0	8	*
water	25:48	0:0	8	)
water	25:49	0:0	8	outrow
decl	26:16	26:55	8	uint16_t	*inrow16
op	26:35	0:0	8	=
water	26:37	0:0	8	(
water	26:38	0:0	8	uint16_t
op	26:47	0:0	8	*
water	26:48	0:0	8	)
water	26:50	0:0	8	inrow
for	27:16	28:45	8	(j = 0 ;j < width;j ++)
forinit	27:21	27:26	9	j = 0 ;
water	27:21	0:0	10	j
op	27:23	0:0	10	=
water	27:25	0:0	10	0
water	27:26	0:0	10	;
cond	27:28	27:32	9	j < width
water	27:28	0:0	10	j
op	27:30	0:0	10	<
water	27:32	0:0	10	width
forexpr	27:39	27:40	9	j ++
water	27:39	0:0	10	j
op	27:40	0:0	10	++
stmts	28:20	28:45	9	
water	28:20	0:0	10	outrow16
op	28:28	0:0	10	[
water	28:29	0:0	10	j
op	28:30	0:0	10	]
op	28:32	0:0	10	=
water	28:34	0:0	10	inrow16
op	28:41	0:0	10	[
op	28:42	0:0	10	-
water	28:43	0:0	10	j
op	28:44	0:0	10	]
water	28:45	0:0	10	;
water	29:12	0:0	8	}
break	30:12	30:17	8	
label	31:12	31:18	8	case 3 :
water	32:12	0:0	8	{
decl	33:16	33:37	8	uint8_t	*in
op	33:29	0:0	8	=
water	33:32	0:0	8	inrow
decl	34:16	34:37	8	uint8_t	*out
op	34:29	0:0	8	=
water	34:31	0:0	8	outrow
for	35:16	38:16	8	(j = 0 ;j < width;j ++ , out += 3 , in -= 3)
forinit	35:21	35:26	9	j = 0 ;
water	35:21	0:0	10	j
op	35:23	0:0	10	=
water	35:25	0:0	10	0
water	35:26	0:0	10	;
cond	35:28	35:32	9	j < width
water	35:28	0:0	10	j
op	35:30	0:0	10	<
water	35:32	0:0	10	width
forexpr	35:39	35:60	9	j ++ , out += 3 , in -= 3
water	35:39	0:0	10	j
op	35:40	0:0	10	++
water	35:42	0:0	10	,
water	35:44	0:0	10	out
op	35:48	0:0	10	+=
water	35:51	0:0	10	3
water	35:52	0:0	10	,
water	35:54	0:0	10	in
op	35:57	0:0	10	-=
water	35:60	0:0	10	3
stmts	35:63	38:16	9	
water	35:63	0:0	10	{
decl	36:20	36:43	10	int32_t	v
op	36:30	0:0	10	=
call	36:32	36:42	11	AV_RB24
arg	36:40	36:42	12	in
water	36:40	0:0	13	in
call	37:20	37:34	10	AV_WB24
arg	37:28	37:31	11	out
water	37:28	0:0	12	out
arg	37:33	37:34	11	v
water	37:33	0:0	12	v
water	37:35	0:0	10	;
water	38:16	0:0	10	}
water	39:12	0:0	8	}
break	40:12	40:17	8	
label	41:12	41:18	8	case 4 :
water	42:12	0:0	8	{
decl	43:16	43:55	8	uint32_t	*outrow32
op	43:35	0:0	8	=
water	43:37	0:0	8	(
water	43:38	0:0	8	uint32_t
op	43:47	0:0	8	*
water	43:48	0:0	8	)
water	43:49	0:0	8	outrow
decl	44:16	44:55	8	uint32_t	*inrow32
op	44:35	0:0	8	=
water	44:37	0:0	8	(
water	44:38	0:0	8	uint32_t
op	44:47	0:0	8	*
water	44:48	0:0	8	)
water	44:50	0:0	8	inrow
for	45:16	46:45	8	(j = 0 ;j < width;j ++)
forinit	45:21	45:26	9	j = 0 ;
water	45:21	0:0	10	j
op	45:23	0:0	10	=
water	45:25	0:0	10	0
water	45:26	0:0	10	;
cond	45:28	45:32	9	j < width
water	45:28	0:0	10	j
op	45:30	0:0	10	<
water	45:32	0:0	10	width
forexpr	45:39	45:40	9	j ++
water	45:39	0:0	10	j
op	45:40	0:0	10	++
stmts	46:20	46:45	9	
water	46:20	0:0	10	outrow32
op	46:28	0:0	10	[
water	46:29	0:0	10	j
op	46:30	0:0	10	]
op	46:32	0:0	10	=
water	46:34	0:0	10	inrow32
op	46:41	0:0	10	[
op	46:42	0:0	10	-
water	46:43	0:0	10	j
op	46:44	0:0	10	]
water	46:45	0:0	10	;
water	47:12	0:0	8	}
break	48:12	48:17	8	
label	49:12	49:19	8	default :
for	50:16	51:65	8	(j = 0 ;j < width;j ++)
forinit	50:21	50:26	9	j = 0 ;
water	50:21	0:0	10	j
op	50:23	0:0	10	=
water	50:25	0:0	10	0
water	50:26	0:0	10	;
cond	50:28	50:32	9	j < width
water	50:28	0:0	10	j
op	50:30	0:0	10	<
water	50:32	0:0	10	width
forexpr	50:39	50:40	9	j ++
water	50:39	0:0	10	j
op	50:40	0:0	10	++
stmts	51:20	51:65	9	
call	51:20	51:64	10	memcpy
arg	51:27	51:42	11	outrow+j*step
water	51:27	0:0	12	outrow
op	51:34	0:0	12	+
water	51:36	0:0	12	j
op	51:37	0:0	12	*
water	51:38	0:0	12	step
arg	51:44	51:58	11	inrow-j*step
water	51:44	0:0	12	inrow
op	51:50	0:0	12	-
water	51:52	0:0	12	j
op	51:53	0:0	12	*
water	51:54	0:0	12	step
arg	51:60	51:64	11	step
water	51:60	0:0	12	step
water	51:65	0:0	10	;
water	52:12	0:0	8	}
water	53:12	0:0	6	inrow
op	53:19	0:0	6	+=
water	53:22	0:0	6	in
op	53:25	0:0	6	->
water	53:27	0:0	6	linesize
op	53:35	0:0	6	[
water	53:36	0:0	6	plane
op	53:41	0:0	6	]
water	53:42	0:0	6	;
water	54:12	0:0	6	outrow
op	54:19	0:0	6	+=
water	54:22	0:0	6	out
op	54:25	0:0	6	->
water	54:27	0:0	6	linesize
op	54:35	0:0	6	[
water	54:36	0:0	6	plane
op	54:41	0:0	6	]
water	54:42	0:0	6	;
water	55:8	0:0	6	}
water	56:4	0:0	4	}
return	57:4	57:12	2	0
water	57:11	0:0	3	0
