func	1:0	111:0	0	static int	parse_options
params	1:24	0:0	1	
param	1:25	1:45	2	struct sbg_parser *	p
stmnts	0:0	110:22	1	
decl	3:4	3:32	2	struct sbg_string	ostr
water	3:26	0:0	2	,
decl	3:4	3:32	2	struct sbg_string	oarg
decl	4:4	4:17	2	char	mode
op	4:14	0:0	2	=
water	4:16	0:0	2	0
decl	5:4	5:9	2	int	r
decl	6:4	6:14	2	char	*tptr
decl	7:4	7:12	2	double	v
if	8:4	9:16	2	(p -> cursor == p -> end || * p -> cursor != '-')
cond	8:8	8:45	3	p -> cursor == p -> end || * p -> cursor != '-'
water	8:8	0:0	4	p
op	8:9	0:0	4	->
water	8:11	0:0	4	cursor
op	8:18	0:0	4	==
water	8:21	0:0	4	p
op	8:22	0:0	4	->
water	8:24	0:0	4	end
op	8:28	0:0	4	||
op	8:31	0:0	4	*
water	8:32	0:0	4	p
op	8:33	0:0	4	->
water	8:35	0:0	4	cursor
op	8:42	0:0	4	!=
water	8:45	0:0	4	'-'
stmts	9:8	9:16	3	
return	9:8	9:16	4	0
water	9:15	0:0	5	0
while	10:4	99:4	2	(lex_char (p ,'-' ) &&lex_wsword (p ,& ostr ))
cond	10:11	10:50	3	lex_char (p ,'-' ) &&lex_wsword (p ,& ostr )
call	10:11	10:26	4	lex_char
arg	10:20	10:21	5	p
water	10:20	0:0	6	p
arg	10:23	10:26	5	'-'
water	10:23	0:0	6	'-'
op	10:28	0:0	4	&&
call	10:31	10:50	4	lex_wsword
arg	10:42	10:43	5	p
water	10:42	0:0	6	p
arg	10:45	10:50	5	&ostr
op	10:45	0:0	6	&
water	10:46	0:0	6	ostr
stmts	10:53	99:4	3	
water	10:53	0:0	4	{
for	11:8	98:8	4	(;ostr . s < ostr . e;ostr . s ++)
forinit	11:13	11:13	5	;
water	11:13	0:0	6	;
cond	11:15	11:29	5	ostr . s < ostr . e
water	11:15	0:0	6	ostr
op	11:19	0:0	6	.
water	11:20	0:0	6	s
op	11:22	0:0	6	<
water	11:24	0:0	6	ostr
op	11:28	0:0	6	.
water	11:29	0:0	6	e
forexpr	11:32	11:38	5	ostr . s ++
water	11:32	0:0	6	ostr
op	11:36	0:0	6	.
water	11:37	0:0	6	s
op	11:38	0:0	6	++
stmts	11:42	98:8	5	
water	11:42	0:0	6	{
decl	12:12	12:30	6	char	opt
op	12:21	0:0	6	=
op	12:23	0:0	6	*
water	12:24	0:0	6	ostr
op	12:28	0:0	6	.
water	12:29	0:0	6	s
switch	13:12	97:12	6	(opt)
cond	13:20	13:20	7	opt
water	13:20	0:0	8	opt
stmts	13:25	97:12	7	
water	13:25	0:0	8	{
water	14:16	0:0	8	case
water	14:21	0:0	8	'S'
water	14:24	0:0	8	:
water	15:20	0:0	8	p
op	15:21	0:0	8	->
water	15:23	0:0	8	scs
op	15:26	0:0	8	.
water	15:27	0:0	8	opt_start_at_first
op	15:46	0:0	8	=
water	15:48	0:0	8	1
water	15:49	0:0	8	;
break	16:20	16:25	8	
water	17:16	0:0	8	case
water	17:21	0:0	8	'E'
water	17:24	0:0	8	:
water	18:20	0:0	8	p
op	18:21	0:0	8	->
water	18:23	0:0	8	scs
op	18:26	0:0	8	.
water	18:27	0:0	8	opt_end_at_last
op	18:43	0:0	8	=
water	18:45	0:0	8	1
water	18:46	0:0	8	;
break	19:20	19:25	8	
water	20:16	0:0	8	case
water	20:21	0:0	8	'i'
water	20:24	0:0	8	:
water	21:20	0:0	8	mode
op	21:25	0:0	8	=
water	21:27	0:0	8	'i'
water	21:30	0:0	8	;
break	22:20	22:25	8	
water	23:16	0:0	8	case
water	23:21	0:0	8	'p'
water	23:24	0:0	8	:
water	24:20	0:0	8	mode
op	24:25	0:0	8	=
water	24:27	0:0	8	'p'
water	24:30	0:0	8	;
break	25:20	25:25	8	
water	26:16	0:0	8	case
water	26:21	0:0	8	'F'
water	26:24	0:0	8	:
call	27:20	27:61	8	FORWARD_ERROR
arg	27:34	27:61	9	parse_optarg(p,opt,&oarg)
call	27:34	27:60	10	parse_optarg
arg	27:47	27:48	11	p
water	27:47	0:0	12	p
arg	27:50	27:53	11	opt
water	27:50	0:0	12	opt
arg	27:55	27:60	11	&oarg
op	27:55	0:0	12	&
water	27:56	0:0	12	oarg
water	27:62	0:0	8	;
water	28:20	0:0	8	v
op	28:22	0:0	8	=
call	28:24	28:44	8	strtod
arg	28:31	28:37	9	oarg.s
water	28:31	0:0	10	oarg
op	28:35	0:0	10	.
water	28:36	0:0	10	s
arg	28:39	28:44	9	&tptr
op	28:39	0:0	10	&
water	28:40	0:0	10	tptr
water	28:45	0:0	8	;
if	29:20	33:20	8	(oarg . e != tptr)
cond	29:24	29:34	9	oarg . e != tptr
water	29:24	0:0	10	oarg
op	29:28	0:0	10	.
water	29:29	0:0	10	e
op	29:31	0:0	10	!=
water	29:34	0:0	10	tptr
stmts	29:40	33:20	9	
water	29:40	0:0	10	{
call	30:24	31:61	10	snprintf
arg	30:33	30:43	11	p->err_msg
water	30:33	0:0	12	p
op	30:34	0:0	12	->
water	30:36	0:0	12	err_msg
arg	30:45	30:63	11	sizeof(p->err_msg)
op	30:45	0:0	12	sizeof
water	30:51	0:0	12	(
water	30:52	0:0	12	p
op	30:53	0:0	12	->
water	30:55	0:0	12	err_msg
water	30:62	0:0	12	)
arg	31:33	31:61	11	"syntax error for option -F"
water	31:33	0:0	12	"syntax error for option -F"
water	31:62	0:0	10	;
return	32:24	32:50	10	AVERROR_INVALIDDATA
water	32:31	0:0	11	AVERROR_INVALIDDATA
water	33:20	0:0	10	}
water	34:20	0:0	8	p
op	34:21	0:0	8	->
water	34:23	0:0	8	scs
op	34:26	0:0	8	.
water	34:27	0:0	8	opt_fade_time
op	34:41	0:0	8	=
water	34:43	0:0	8	v
op	34:45	0:0	8	*
water	34:47	0:0	8	AV_TIME_BASE
op	34:60	0:0	8	/
water	34:62	0:0	8	1000
water	34:66	0:0	8	;
break	35:20	35:25	8	
water	36:16	0:0	8	case
water	36:21	0:0	8	'L'
water	36:24	0:0	8	:
call	37:20	37:61	8	FORWARD_ERROR
arg	37:34	37:61	9	parse_optarg(p,opt,&oarg)
call	37:34	37:60	10	parse_optarg
arg	37:47	37:48	11	p
water	37:47	0:0	12	p
arg	37:50	37:53	11	opt
water	37:50	0:0	12	opt
arg	37:55	37:60	11	&oarg
op	37:55	0:0	12	&
water	37:56	0:0	12	oarg
water	37:62	0:0	8	;
water	38:20	0:0	8	r
op	38:22	0:0	8	=
call	38:24	38:64	8	str_to_time
arg	38:36	38:42	9	oarg.s
water	38:36	0:0	10	oarg
op	38:40	0:0	10	.
water	38:41	0:0	10	s
arg	38:44	38:64	9	&p->scs.opt_duration
op	38:44	0:0	10	&
water	38:45	0:0	10	p
op	38:46	0:0	10	->
water	38:48	0:0	10	scs
op	38:51	0:0	10	.
water	38:52	0:0	10	opt_duration
water	38:65	0:0	8	;
if	39:20	43:20	8	(oarg . e != oarg . s + r)
cond	39:24	39:43	9	oarg . e != oarg . s + r
water	39:24	0:0	10	oarg
op	39:28	0:0	10	.
water	39:29	0:0	10	e
op	39:31	0:0	10	!=
water	39:34	0:0	10	oarg
op	39:38	0:0	10	.
water	39:39	0:0	10	s
op	39:41	0:0	10	+
water	39:43	0:0	10	r
stmts	39:46	43:20	9	
water	39:46	0:0	10	{
call	40:24	41:61	10	snprintf
arg	40:33	40:43	11	p->err_msg
water	40:33	0:0	12	p
op	40:34	0:0	12	->
water	40:36	0:0	12	err_msg
arg	40:45	40:63	11	sizeof(p->err_msg)
op	40:45	0:0	12	sizeof
water	40:51	0:0	12	(
water	40:52	0:0	12	p
op	40:53	0:0	12	->
water	40:55	0:0	12	err_msg
water	40:62	0:0	12	)
arg	41:33	41:61	11	"syntax error for option -L"
water	41:33	0:0	12	"syntax error for option -L"
water	41:62	0:0	10	;
return	42:24	42:50	10	AVERROR_INVALIDDATA
water	42:31	0:0	11	AVERROR_INVALIDDATA
water	43:20	0:0	10	}
break	44:20	44:25	8	
water	45:16	0:0	8	case
water	45:21	0:0	8	'T'
water	45:24	0:0	8	:
call	46:20	46:61	8	FORWARD_ERROR
arg	46:34	46:61	9	parse_optarg(p,opt,&oarg)
call	46:34	46:60	10	parse_optarg
arg	46:47	46:48	11	p
water	46:47	0:0	12	p
arg	46:50	46:53	11	opt
water	46:50	0:0	12	opt
arg	46:55	46:60	11	&oarg
op	46:55	0:0	12	&
water	46:56	0:0	12	oarg
water	46:62	0:0	8	;
water	47:20	0:0	8	r
op	47:22	0:0	8	=
call	47:24	47:60	8	str_to_time
arg	47:36	47:42	9	oarg.s
water	47:36	0:0	10	oarg
op	47:40	0:0	10	.
water	47:41	0:0	10	s
arg	47:44	47:60	9	&p->scs.start_ts
op	47:44	0:0	10	&
water	47:45	0:0	10	p
op	47:46	0:0	10	->
water	47:48	0:0	10	scs
op	47:51	0:0	10	.
water	47:52	0:0	10	start_ts
water	47:61	0:0	8	;
if	48:20	52:20	8	(oarg . e != oarg . s + r)
cond	48:24	48:43	9	oarg . e != oarg . s + r
water	48:24	0:0	10	oarg
op	48:28	0:0	10	.
water	48:29	0:0	10	e
op	48:31	0:0	10	!=
water	48:34	0:0	10	oarg
op	48:38	0:0	10	.
water	48:39	0:0	10	s
op	48:41	0:0	10	+
water	48:43	0:0	10	r
stmts	48:46	52:20	9	
water	48:46	0:0	10	{
call	49:24	50:61	10	snprintf
arg	49:33	49:43	11	p->err_msg
water	49:33	0:0	12	p
op	49:34	0:0	12	->
water	49:36	0:0	12	err_msg
arg	49:45	49:63	11	sizeof(p->err_msg)
op	49:45	0:0	12	sizeof
water	49:51	0:0	12	(
water	49:52	0:0	12	p
op	49:53	0:0	12	->
water	49:55	0:0	12	err_msg
water	49:62	0:0	12	)
arg	50:33	50:61	11	"syntax error for option -T"
water	50:33	0:0	12	"syntax error for option -T"
water	50:62	0:0	10	;
return	51:24	51:50	10	AVERROR_INVALIDDATA
water	51:31	0:0	11	AVERROR_INVALIDDATA
water	52:20	0:0	10	}
break	53:20	53:25	8	
water	54:16	0:0	8	case
water	54:21	0:0	8	'm'
water	54:24	0:0	8	:
call	55:20	55:61	8	FORWARD_ERROR
arg	55:34	55:61	9	parse_optarg(p,opt,&oarg)
call	55:34	55:60	10	parse_optarg
arg	55:47	55:48	11	p
water	55:47	0:0	12	p
arg	55:50	55:53	11	opt
water	55:50	0:0	12	opt
arg	55:55	55:60	11	&oarg
op	55:55	0:0	12	&
water	55:56	0:0	12	oarg
water	55:62	0:0	8	;
water	56:20	0:0	8	tptr
op	56:25	0:0	8	=
call	56:27	56:56	8	av_malloc
arg	56:37	56:56	9	oarg.e-oarg.s+1
water	56:37	0:0	10	oarg
op	56:41	0:0	10	.
water	56:42	0:0	10	e
op	56:44	0:0	10	-
water	56:46	0:0	10	oarg
op	56:50	0:0	10	.
water	56:51	0:0	10	s
op	56:53	0:0	10	+
water	56:55	0:0	10	1
water	56:57	0:0	8	;
if	57:20	58:46	8	(! tptr)
cond	57:24	57:25	9	! tptr
op	57:24	0:0	10	!
water	57:25	0:0	10	tptr
stmts	58:24	58:46	9	
return	58:24	58:46	10	AVERROR(ENOMEM)
call	58:31	58:45	11	AVERROR
arg	58:39	58:45	12	ENOMEM
water	58:39	0:0	13	ENOMEM
call	59:20	59:56	8	memcpy
arg	59:27	59:31	9	tptr
water	59:27	0:0	10	tptr
arg	59:33	59:39	9	oarg.s
water	59:33	0:0	10	oarg
op	59:37	0:0	10	.
water	59:38	0:0	10	s
arg	59:41	59:56	9	oarg.e-oarg.s
water	59:41	0:0	10	oarg
op	59:45	0:0	10	.
water	59:46	0:0	10	e
op	59:48	0:0	10	-
water	59:50	0:0	10	oarg
op	59:54	0:0	10	.
water	59:55	0:0	10	s
water	59:57	0:0	8	;
water	60:20	0:0	8	tptr
op	60:24	0:0	8	[
water	60:25	0:0	8	oarg
op	60:29	0:0	8	.
water	60:30	0:0	8	e
op	60:32	0:0	8	-
water	60:34	0:0	8	oarg
op	60:38	0:0	8	.
water	60:39	0:0	8	s
op	60:40	0:0	8	]
op	60:42	0:0	8	=
water	60:44	0:0	8	0
water	60:45	0:0	8	;
call	61:20	61:42	8	av_free
arg	61:28	61:42	9	p->scs.opt_mix
water	61:28	0:0	10	p
op	61:29	0:0	10	->
water	61:31	0:0	10	scs
op	61:34	0:0	10	.
water	61:35	0:0	10	opt_mix
water	61:43	0:0	8	;
water	62:20	0:0	8	p
op	62:21	0:0	8	->
water	62:23	0:0	8	scs
op	62:26	0:0	8	.
water	62:27	0:0	8	opt_mix
op	62:35	0:0	8	=
water	62:37	0:0	8	tptr
water	62:41	0:0	8	;
break	63:20	63:25	8	
water	64:16	0:0	8	case
water	64:21	0:0	8	'q'
water	64:24	0:0	8	:
call	65:20	65:61	8	FORWARD_ERROR
arg	65:34	65:61	9	parse_optarg(p,opt,&oarg)
call	65:34	65:60	10	parse_optarg
arg	65:47	65:48	11	p
water	65:47	0:0	12	p
arg	65:50	65:53	11	opt
water	65:50	0:0	12	opt
arg	65:55	65:60	11	&oarg
op	65:55	0:0	12	&
water	65:56	0:0	12	oarg
water	65:62	0:0	8	;
water	66:20	0:0	8	v
op	66:22	0:0	8	=
call	66:24	66:44	8	strtod
arg	66:31	66:37	9	oarg.s
water	66:31	0:0	10	oarg
op	66:35	0:0	10	.
water	66:36	0:0	10	s
arg	66:39	66:44	9	&tptr
op	66:39	0:0	10	&
water	66:40	0:0	10	tptr
water	66:45	0:0	8	;
if	67:20	71:20	8	(oarg . e != tptr)
cond	67:24	67:34	9	oarg . e != tptr
water	67:24	0:0	10	oarg
op	67:28	0:0	10	.
water	67:29	0:0	10	e
op	67:31	0:0	10	!=
water	67:34	0:0	10	tptr
stmts	67:40	71:20	9	
water	67:40	0:0	10	{
call	68:24	69:61	10	snprintf
arg	68:33	68:43	11	p->err_msg
water	68:33	0:0	12	p
op	68:34	0:0	12	->
water	68:36	0:0	12	err_msg
arg	68:45	68:63	11	sizeof(p->err_msg)
op	68:45	0:0	12	sizeof
water	68:51	0:0	12	(
water	68:52	0:0	12	p
op	68:53	0:0	12	->
water	68:55	0:0	12	err_msg
water	68:62	0:0	12	)
arg	69:33	69:61	11	"syntax error for option -q"
water	69:33	0:0	12	"syntax error for option -q"
water	69:62	0:0	10	;
return	70:24	70:50	10	AVERROR_INVALIDDATA
water	70:31	0:0	11	AVERROR_INVALIDDATA
water	71:20	0:0	10	}
if	72:20	76:20	8	(v != 1)
cond	72:24	72:29	9	v != 1
water	72:24	0:0	10	v
op	72:26	0:0	10	!=
water	72:29	0:0	10	1
stmts	72:32	76:20	9	
water	72:32	0:0	10	{
call	73:24	74:74	10	snprintf
arg	73:33	73:43	11	p->err_msg
water	73:33	0:0	12	p
op	73:34	0:0	12	->
water	73:36	0:0	12	err_msg
arg	73:45	73:63	11	sizeof(p->err_msg)
op	73:45	0:0	12	sizeof
water	73:51	0:0	12	(
water	73:52	0:0	12	p
op	73:53	0:0	12	->
water	73:55	0:0	12	err_msg
water	73:62	0:0	12	)
arg	74:33	74:74	11	"speed factor other than 1 not supported"
water	74:33	0:0	12	"speed factor other than 1 not supported"
water	74:75	0:0	10	;
return	75:24	75:51	10	AVERROR_PATCHWELCOME
water	75:31	0:0	11	AVERROR_PATCHWELCOME
water	76:20	0:0	10	}
break	77:20	77:25	8	
water	78:16	0:0	8	case
water	78:21	0:0	8	'r'
water	78:24	0:0	8	:
call	79:20	79:61	8	FORWARD_ERROR
arg	79:34	79:61	9	parse_optarg(p,opt,&oarg)
call	79:34	79:60	10	parse_optarg
arg	79:47	79:48	11	p
water	79:47	0:0	12	p
arg	79:50	79:53	11	opt
water	79:50	0:0	12	opt
arg	79:55	79:60	11	&oarg
op	79:55	0:0	12	&
water	79:56	0:0	12	oarg
water	79:62	0:0	8	;
water	80:20	0:0	8	r
op	80:22	0:0	8	=
call	80:24	80:48	8	strtol
arg	80:31	80:37	9	oarg.s
water	80:31	0:0	10	oarg
op	80:35	0:0	10	.
water	80:36	0:0	10	s
arg	80:39	80:44	9	&tptr
op	80:39	0:0	10	&
water	80:40	0:0	10	tptr
arg	80:46	80:48	9	10
water	80:46	0:0	10	10
water	80:49	0:0	8	;
if	81:20	85:20	8	(oarg . e != tptr)
cond	81:24	81:34	9	oarg . e != tptr
water	81:24	0:0	10	oarg
op	81:28	0:0	10	.
water	81:29	0:0	10	e
op	81:31	0:0	10	!=
water	81:34	0:0	10	tptr
stmts	81:40	85:20	9	
water	81:40	0:0	10	{
call	82:24	83:61	10	snprintf
arg	82:33	82:43	11	p->err_msg
water	82:33	0:0	12	p
op	82:34	0:0	12	->
water	82:36	0:0	12	err_msg
arg	82:45	82:63	11	sizeof(p->err_msg)
op	82:45	0:0	12	sizeof
water	82:51	0:0	12	(
water	82:52	0:0	12	p
op	82:53	0:0	12	->
water	82:55	0:0	12	err_msg
water	82:62	0:0	12	)
arg	83:33	83:61	11	"syntax error for option -r"
water	83:33	0:0	12	"syntax error for option -r"
water	83:62	0:0	10	;
return	84:24	84:50	10	AVERROR_INVALIDDATA
water	84:31	0:0	11	AVERROR_INVALIDDATA
water	85:20	0:0	10	}
if	86:20	90:20	8	(r < 40)
cond	86:24	86:28	9	r < 40
water	86:24	0:0	10	r
op	86:26	0:0	10	<
water	86:28	0:0	10	40
stmts	86:32	90:20	9	
water	86:32	0:0	10	{
call	87:24	88:54	10	snprintf
arg	87:33	87:43	11	p->err_msg
water	87:33	0:0	12	p
op	87:34	0:0	12	->
water	87:36	0:0	12	err_msg
arg	87:45	87:63	11	sizeof(p->err_msg)
op	87:45	0:0	12	sizeof
water	87:51	0:0	12	(
water	87:52	0:0	12	p
op	87:53	0:0	12	->
water	87:55	0:0	12	err_msg
water	87:62	0:0	12	)
arg	88:33	88:54	11	"invalid sample rate"
water	88:33	0:0	12	"invalid sample rate"
water	88:55	0:0	10	;
return	89:24	89:51	10	AVERROR_PATCHWELCOME
water	89:31	0:0	11	AVERROR_PATCHWELCOME
water	90:20	0:0	10	}
water	91:20	0:0	8	p
op	91:21	0:0	8	->
water	91:23	0:0	8	scs
op	91:26	0:0	8	.
water	91:27	0:0	8	sample_rate
op	91:39	0:0	8	=
water	91:41	0:0	8	r
water	91:42	0:0	8	;
break	92:20	92:25	8	
label	93:16	93:23	8	default :
call	94:20	95:60	8	snprintf
arg	94:29	94:39	9	p->err_msg
water	94:29	0:0	10	p
op	94:30	0:0	10	->
water	94:32	0:0	10	err_msg
arg	94:41	94:59	9	sizeof(p->err_msg)
op	94:41	0:0	10	sizeof
water	94:47	0:0	10	(
water	94:48	0:0	10	p
op	94:49	0:0	10	->
water	94:51	0:0	10	err_msg
water	94:58	0:0	10	)
arg	95:29	95:51	9	"unknown option: '%c'"
water	95:29	0:0	10	"unknown option: '%c'"
arg	95:53	95:60	9	*ostr.s
op	95:53	0:0	10	*
water	95:54	0:0	10	ostr
op	95:58	0:0	10	.
water	95:59	0:0	10	s
water	95:61	0:0	8	;
return	96:20	96:46	8	AVERROR_INVALIDDATA
water	96:27	0:0	9	AVERROR_INVALIDDATA
water	97:12	0:0	8	}
water	98:8	0:0	6	}
water	99:4	0:0	4	}
switch	100:4	109:4	2	(mode)
cond	100:12	100:12	3	mode
water	100:12	0:0	4	mode
stmts	100:18	109:4	3	
water	100:18	0:0	4	{
water	101:8	0:0	4	case
water	101:13	0:0	4	'i'
water	101:16	0:0	4	:
water	102:12	0:0	4	return
call	102:19	102:36	4	parse_immediate
arg	102:35	102:36	5	p
water	102:35	0:0	6	p
water	102:37	0:0	4	;
water	103:8	0:0	4	case
water	103:13	0:0	4	'p'
water	103:16	0:0	4	:
water	104:12	0:0	4	return
call	104:19	104:40	4	parse_preprogrammed
arg	104:39	104:40	5	p
water	104:39	0:0	6	p
water	104:41	0:0	4	;
label	105:8	105:14	4	case 0 :
if	106:12	107:42	4	(!lex_line_end (p ))
cond	106:16	106:31	5	!lex_line_end (p )
op	106:16	0:0	6	!
call	106:17	106:31	6	lex_line_end
arg	106:30	106:31	7	p
water	106:30	0:0	8	p
stmts	107:16	107:42	5	
return	107:16	107:42	6	AVERROR_INVALIDDATA
water	107:23	0:0	7	AVERROR_INVALIDDATA
return	108:12	108:20	4	1
water	108:19	0:0	5	1
water	109:4	0:0	4	}
return	110:4	110:22	2	AVERROR_BUG
water	110:11	0:0	3	AVERROR_BUG
