func	1:15	52:0	0	int	read_header
params	1:30	0:0	1	
param	1:31	1:51	2	AVFormatContext *	ctx
stmnts	0:0	51:12	1	
decl	3:4	3:35	2	CDIOContext	*s
op	3:19	0:0	2	=
water	3:21	0:0	2	ctx
op	3:24	0:0	2	->
water	3:26	0:0	2	priv_data
decl	4:4	4:16	2	AVStream	*st
decl	5:4	5:14	2	int	ret
water	5:11	0:0	2	,
decl	5:4	5:14	2	int	i
decl	6:4	6:20	2	char	*err
op	6:14	0:0	2	=
water	6:16	0:0	2	NULL
if	7:4	8:30	2	(! ( st =avformat_new_stream (ctx ,NULL ) ))
cond	7:8	7:45	3	! ( st =avformat_new_stream (ctx ,NULL ) )
op	7:8	0:0	4	!
water	7:9	0:0	4	(
water	7:10	0:0	4	st
op	7:13	0:0	4	=
call	7:15	7:44	4	avformat_new_stream
arg	7:35	7:38	5	ctx
water	7:35	0:0	6	ctx
arg	7:40	7:44	5	NULL
water	7:40	0:0	6	NULL
water	7:45	0:0	4	)
stmts	8:8	8:30	3	
return	8:8	8:30	4	AVERROR(ENOMEM)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	ENOMEM
water	8:23	0:0	7	ENOMEM
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	drive
op	9:13	0:0	2	=
call	9:15	9:74	2	cdio_cddap_identify
arg	9:35	9:48	3	ctx->filename
water	9:35	0:0	4	ctx
op	9:38	0:0	4	->
water	9:40	0:0	4	filename
arg	9:50	9:68	3	CDDA_MESSAGE_LOGIT
water	9:50	0:0	4	CDDA_MESSAGE_LOGIT
arg	9:70	9:74	3	&err
op	9:70	0:0	4	&
water	9:71	0:0	4	err
water	9:75	0:0	2	;
if	10:4	13:4	2	(! s -> drive)
cond	10:8	10:12	3	! s -> drive
op	10:8	0:0	4	!
water	10:9	0:0	4	s
op	10:10	0:0	4	->
water	10:12	0:0	4	drive
stmts	10:19	13:4	3	
water	10:19	0:0	4	{
call	11:8	11:77	4	av_log
arg	11:15	11:18	5	ctx
water	11:15	0:0	6	ctx
arg	11:20	11:32	5	AV_LOG_ERROR
water	11:20	0:0	6	AV_LOG_ERROR
arg	11:34	11:62	5	"Could not open drive %s.\n"
water	11:34	0:0	6	"Could not open drive %s.\n"
arg	11:64	11:77	5	ctx->filename
water	11:64	0:0	6	ctx
op	11:67	0:0	6	->
water	11:69	0:0	6	filename
water	11:78	0:0	4	;
return	12:8	12:30	4	AVERROR(EINVAL)
call	12:15	12:29	5	AVERROR
arg	12:23	12:29	6	EINVAL
water	12:23	0:0	7	EINVAL
water	13:4	0:0	4	}
if	14:4	17:4	2	(err)
cond	14:8	14:8	3	err
water	14:8	0:0	4	err
stmts	14:13	17:4	3	
water	14:13	0:0	4	{
call	15:8	15:47	4	av_log
arg	15:15	15:18	5	ctx
water	15:15	0:0	6	ctx
arg	15:20	15:34	5	AV_LOG_VERBOSE
water	15:20	0:0	6	AV_LOG_VERBOSE
arg	15:36	15:42	5	"%s\n"
water	15:36	0:0	6	"%s\n"
arg	15:44	15:47	5	err
water	15:44	0:0	6	err
water	15:48	0:0	4	;
call	16:8	16:16	4	free
arg	16:13	16:16	5	err
water	16:13	0:0	6	err
water	16:17	0:0	4	;
water	17:4	0:0	4	}
if	18:4	21:4	2	(( ret =cdio_cddap_open (s -> drive ) ) < 0 || ! s -> drive -> opened)
cond	18:8	18:60	3	( ret =cdio_cddap_open (s -> drive ) ) < 0 || ! s -> drive -> opened
water	18:8	0:0	4	(
water	18:9	0:0	4	ret
op	18:13	0:0	4	=
call	18:15	18:39	4	cdio_cddap_open
arg	18:31	18:39	5	s->drive
water	18:31	0:0	6	s
op	18:32	0:0	6	->
water	18:34	0:0	6	drive
water	18:40	0:0	4	)
op	18:42	0:0	4	<
water	18:44	0:0	4	0
op	18:46	0:0	4	||
op	18:49	0:0	4	!
water	18:50	0:0	4	s
op	18:51	0:0	4	->
water	18:53	0:0	4	drive
op	18:58	0:0	4	->
water	18:60	0:0	4	opened
stmts	18:68	21:4	3	
water	18:68	0:0	4	{
call	19:8	19:85	4	av_log
arg	19:15	19:18	5	ctx
water	19:15	0:0	6	ctx
arg	19:20	19:32	5	AV_LOG_ERROR
water	19:20	0:0	6	AV_LOG_ERROR
arg	19:34	19:70	5	"Could not open disk in drive %s.\n"
water	19:34	0:0	6	"Could not open disk in drive %s.\n"
arg	19:72	19:85	5	ctx->filename
water	19:72	0:0	6	ctx
op	19:75	0:0	6	->
water	19:77	0:0	6	filename
water	19:86	0:0	4	;
return	20:8	20:30	4	AVERROR(EINVAL)
call	20:15	20:29	5	AVERROR
arg	20:23	20:29	6	EINVAL
water	20:23	0:0	7	EINVAL
water	21:4	0:0	4	}
call	22:4	22:75	2	cdio_cddap_verbose_set
arg	22:27	22:35	3	s->drive
water	22:27	0:0	4	s
op	22:28	0:0	4	->
water	22:30	0:0	4	drive
arg	22:37	22:55	3	CDDA_MESSAGE_LOGIT
water	22:37	0:0	4	CDDA_MESSAGE_LOGIT
arg	22:57	22:75	3	CDDA_MESSAGE_LOGIT
water	22:57	0:0	4	CDDA_MESSAGE_LOGIT
water	22:76	0:0	2	;
if	23:4	24:48	2	(s -> speed)
cond	23:8	23:11	3	s -> speed
water	23:8	0:0	4	s
op	23:9	0:0	4	->
water	23:11	0:0	4	speed
stmts	24:8	24:48	3	
call	24:8	24:47	4	cdio_cddap_speed_set
arg	24:29	24:37	5	s->drive
water	24:29	0:0	6	s
op	24:30	0:0	6	->
water	24:32	0:0	6	drive
arg	24:39	24:47	5	s->speed
water	24:39	0:0	6	s
op	24:40	0:0	6	->
water	24:42	0:0	6	speed
water	24:48	0:0	4	;
water	25:4	0:0	2	s
op	25:5	0:0	2	->
water	25:7	0:0	2	paranoia
op	25:16	0:0	2	=
call	25:18	25:45	2	cdio_paranoia_init
arg	25:37	25:45	3	s->drive
water	25:37	0:0	4	s
op	25:38	0:0	4	->
water	25:40	0:0	4	drive
water	25:46	0:0	2	;
if	26:4	29:4	2	(! s -> paranoia)
cond	26:8	26:12	3	! s -> paranoia
op	26:8	0:0	4	!
water	26:9	0:0	4	s
op	26:10	0:0	4	->
water	26:12	0:0	4	paranoia
stmts	26:22	29:4	3	
water	26:22	0:0	4	{
call	27:8	27:62	4	av_log
arg	27:15	27:18	5	ctx
water	27:15	0:0	6	ctx
arg	27:20	27:32	5	AV_LOG_ERROR
water	27:20	0:0	6	AV_LOG_ERROR
arg	27:34	27:62	5	"Could not init paranoia.\n"
water	27:34	0:0	6	"Could not init paranoia.\n"
water	27:63	0:0	4	;
return	28:8	28:30	4	AVERROR(EINVAL)
call	28:15	28:29	5	AVERROR
arg	28:23	28:29	6	EINVAL
water	28:23	0:0	7	EINVAL
water	29:4	0:0	4	}
call	30:4	30:55	2	cdio_paranoia_modeset
arg	30:26	30:37	3	s->paranoia
water	30:26	0:0	4	s
op	30:27	0:0	4	->
water	30:29	0:0	4	paranoia
arg	30:39	30:55	3	s->paranoia_mode
water	30:39	0:0	4	s
op	30:40	0:0	4	->
water	30:42	0:0	4	paranoia_mode
water	30:56	0:0	2	;
water	31:4	0:0	2	st
op	31:6	0:0	2	->
water	31:8	0:0	2	codec
op	31:13	0:0	2	->
water	31:15	0:0	2	codec_type
op	31:31	0:0	2	=
water	31:33	0:0	2	AVMEDIA_TYPE_AUDIO
water	31:51	0:0	2	;
if	32:4	33:54	2	(s -> drive -> bigendianp)
cond	32:8	32:18	3	s -> drive -> bigendianp
water	32:8	0:0	4	s
op	32:9	0:0	4	->
water	32:11	0:0	4	drive
op	32:16	0:0	4	->
water	32:18	0:0	4	bigendianp
stmts	33:8	33:54	3	
water	33:8	0:0	4	st
op	33:10	0:0	4	->
water	33:12	0:0	4	codec
op	33:17	0:0	4	->
water	33:19	0:0	4	codec_id
op	33:31	0:0	4	=
water	33:33	0:0	4	AV_CODEC_ID_PCM_S16BE
water	33:54	0:0	4	;
else	34:4	35:54	2
stmts	35:8	35:54	3	
water	35:8	0:0	4	st
op	35:10	0:0	4	->
water	35:12	0:0	4	codec
op	35:17	0:0	4	->
water	35:19	0:0	4	codec_id
op	35:31	0:0	4	=
water	35:33	0:0	4	AV_CODEC_ID_PCM_S16LE
water	35:54	0:0	4	;
water	36:4	0:0	2	st
op	36:6	0:0	2	->
water	36:8	0:0	2	codec
op	36:13	0:0	2	->
water	36:15	0:0	2	sample_rate
op	36:31	0:0	2	=
water	36:33	0:0	2	44100
water	36:38	0:0	2	;
water	37:4	0:0	2	st
op	37:6	0:0	2	->
water	37:8	0:0	2	codec
op	37:13	0:0	2	->
water	37:15	0:0	2	channels
op	37:31	0:0	2	=
water	37:33	0:0	2	2
water	37:34	0:0	2	;
if	38:4	40:91	2	(s -> drive -> audio_last_sector != CDIO_INVALID_LSN && s -> drive -> audio_first_sector != CDIO_INVALID_LSN)
cond	38:8	39:40	3	s -> drive -> audio_last_sector != CDIO_INVALID_LSN && s -> drive -> audio_first_sector != CDIO_INVALID_LSN
water	38:8	0:0	4	s
op	38:9	0:0	4	->
water	38:11	0:0	4	drive
op	38:16	0:0	4	->
water	38:18	0:0	4	audio_last_sector
op	38:36	0:0	4	!=
water	38:39	0:0	4	CDIO_INVALID_LSN
op	38:56	0:0	4	&&
water	39:8	0:0	4	s
op	39:9	0:0	4	->
water	39:11	0:0	4	drive
op	39:16	0:0	4	->
water	39:18	0:0	4	audio_first_sector
op	39:37	0:0	4	!=
water	39:40	0:0	4	CDIO_INVALID_LSN
stmts	40:8	40:91	3	
water	40:8	0:0	4	st
op	40:10	0:0	4	->
water	40:12	0:0	4	duration
op	40:31	0:0	4	=
water	40:33	0:0	4	s
op	40:34	0:0	4	->
water	40:36	0:0	4	drive
op	40:41	0:0	4	->
water	40:43	0:0	4	audio_last_sector
op	40:61	0:0	4	-
water	40:63	0:0	4	s
op	40:64	0:0	4	->
water	40:66	0:0	4	drive
op	40:71	0:0	4	->
water	40:73	0:0	4	audio_first_sector
water	40:91	0:0	4	;
else	41:4	42:73	2
stmts	41:9	42:73	3	
if	41:9	42:73	4	(s -> drive -> tracks)
cond	41:13	41:23	5	s -> drive -> tracks
water	41:13	0:0	6	s
op	41:14	0:0	6	->
water	41:16	0:0	6	drive
op	41:21	0:0	6	->
water	41:23	0:0	6	tracks
stmts	42:8	42:73	5	
water	42:8	0:0	6	st
op	42:10	0:0	6	->
water	42:12	0:0	6	duration
op	42:21	0:0	6	=
water	42:23	0:0	6	s
op	42:24	0:0	6	->
water	42:26	0:0	6	drive
op	42:31	0:0	6	->
water	42:33	0:0	6	disc_toc
op	42:41	0:0	6	[
water	42:42	0:0	6	s
op	42:43	0:0	6	->
water	42:45	0:0	6	drive
op	42:50	0:0	6	->
water	42:52	0:0	6	tracks
op	42:58	0:0	6	]
op	42:59	0:0	6	.
water	42:60	0:0	6	dwStartSector
water	42:73	0:0	6	;
call	43:4	43:99	2	avpriv_set_pts_info
arg	43:24	43:26	3	st
water	43:24	0:0	4	st
arg	43:28	43:30	3	64
water	43:28	0:0	4	64
arg	43:32	43:53	3	CDIO_CD_FRAMESIZE_RAW
water	43:32	0:0	4	CDIO_CD_FRAMESIZE_RAW
arg	43:55	43:99	3	2*st->codec->channels*st->codec->sample_rate
water	43:55	0:0	4	2
op	43:56	0:0	4	*
water	43:57	0:0	4	st
op	43:59	0:0	4	->
water	43:61	0:0	4	codec
op	43:66	0:0	4	->
water	43:68	0:0	4	channels
op	43:76	0:0	4	*
water	43:77	0:0	4	st
op	43:79	0:0	4	->
water	43:81	0:0	4	codec
op	43:86	0:0	4	->
water	43:88	0:0	4	sample_rate
water	43:100	0:0	2	;
for	44:4	49:4	2	(i = 0 ;i < s -> drive -> tracks;i ++)
forinit	44:9	44:14	3	i = 0 ;
water	44:9	0:0	4	i
op	44:11	0:0	4	=
water	44:13	0:0	4	0
water	44:14	0:0	4	;
cond	44:16	44:30	3	i < s -> drive -> tracks
water	44:16	0:0	4	i
op	44:18	0:0	4	<
water	44:20	0:0	4	s
op	44:21	0:0	4	->
water	44:23	0:0	4	drive
op	44:28	0:0	4	->
water	44:30	0:0	4	tracks
forexpr	44:38	44:39	3	i ++
water	44:38	0:0	4	i
op	44:39	0:0	4	++
stmts	44:43	49:4	3	
water	44:43	0:0	4	{
decl	45:8	45:22	4	char	title[16]
call	46:8	46:81	4	snprintf
arg	46:17	46:22	5	title
water	46:17	0:0	6	title
arg	46:24	46:37	5	sizeof(title)
op	46:24	0:0	6	sizeof
water	46:30	0:0	6	(
water	46:31	0:0	6	title
water	46:36	0:0	6	)
arg	46:39	46:51	5	"track %02d"
water	46:39	0:0	6	"track %02d"
arg	46:53	46:81	5	s->drive->disc_toc[i].bTrack
water	46:53	0:0	6	s
op	46:54	0:0	6	->
water	46:56	0:0	6	drive
op	46:61	0:0	6	->
water	46:63	0:0	6	disc_toc
op	46:71	0:0	6	[
water	46:72	0:0	6	i
op	46:73	0:0	6	]
op	46:74	0:0	6	.
water	46:75	0:0	6	bTrack
water	46:82	0:0	4	;
call	47:8	48:67	4	avpriv_new_chapter
arg	47:27	47:30	5	ctx
water	47:27	0:0	6	ctx
arg	47:32	47:33	5	i
water	47:32	0:0	6	i
arg	47:35	47:48	5	st->time_base
water	47:35	0:0	6	st
op	47:37	0:0	6	->
water	47:39	0:0	6	time_base
arg	47:50	47:85	5	s->drive->disc_toc[i].dwStartSector
water	47:50	0:0	6	s
op	47:51	0:0	6	->
water	47:53	0:0	6	drive
op	47:58	0:0	6	->
water	47:60	0:0	6	disc_toc
op	47:68	0:0	6	[
water	47:69	0:0	6	i
op	47:70	0:0	6	]
op	47:71	0:0	6	.
water	47:72	0:0	6	dwStartSector
arg	48:23	48:60	5	s->drive->disc_toc[i+1].dwStartSector
water	48:23	0:0	6	s
op	48:24	0:0	6	->
water	48:26	0:0	6	drive
op	48:31	0:0	6	->
water	48:33	0:0	6	disc_toc
op	48:41	0:0	6	[
water	48:42	0:0	6	i
op	48:43	0:0	6	+
water	48:44	0:0	6	1
op	48:45	0:0	6	]
op	48:46	0:0	6	.
water	48:47	0:0	6	dwStartSector
arg	48:62	48:67	5	title
water	48:62	0:0	6	title
water	48:68	0:0	4	;
water	49:4	0:0	4	}
water	50:4	0:0	2	s
op	50:5	0:0	2	->
water	50:7	0:0	2	last_sector
op	50:19	0:0	2	=
call	50:21	50:56	2	cdio_cddap_disc_lastsector
arg	50:48	50:56	3	s->drive
water	50:48	0:0	4	s
op	50:49	0:0	4	->
water	50:51	0:0	4	drive
water	50:57	0:0	2	;
return	51:4	51:12	2	0
water	51:11	0:0	3	0
