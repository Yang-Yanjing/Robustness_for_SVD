func	1:0	62:0	0	void	av_opt_set_defaults2
params	1:25	0:0	1	
param	1:26	1:33	2	void *	s
param	1:35	1:43	2	int	mask
param	1:45	1:54	2	int	flags
stmnts	0:0	61:4	1	
decl	3:4	3:30	2	const AVOption	*opt
op	3:24	0:0	2	=
water	3:26	0:0	2	NULL
while	4:4	61:4	2	(( opt =av_opt_next (s ,opt ) ))
cond	4:11	4:37	3	( opt =av_opt_next (s ,opt ) )
water	4:11	0:0	4	(
water	4:12	0:0	4	opt
op	4:16	0:0	4	=
call	4:18	4:36	4	av_opt_next
arg	4:30	4:31	5	s
water	4:30	0:0	6	s
arg	4:33	4:36	5	opt
water	4:33	0:0	6	opt
water	4:37	0:0	4	)
stmts	4:40	61:4	3	
water	4:40	0:0	4	{
decl	5:8	5:47	4	void	*dst
op	5:18	0:0	4	=
water	5:20	0:0	4	(
water	5:21	0:0	4	(
water	5:22	0:0	4	uint8_t
op	5:29	0:0	4	*
water	5:30	0:0	4	)
water	5:31	0:0	4	s
water	5:32	0:0	4	)
op	5:34	0:0	4	+
water	5:36	0:0	4	opt
op	5:39	0:0	4	->
water	5:41	0:0	4	offset
if	6:8	7:20	4	(( opt -> flags & mask ) != flags)
cond	6:12	6:35	5	( opt -> flags & mask ) != flags
water	6:12	0:0	6	(
water	6:13	0:0	6	opt
op	6:16	0:0	6	->
water	6:18	0:0	6	flags
op	6:24	0:0	6	&
water	6:26	0:0	6	mask
water	6:30	0:0	6	)
op	6:32	0:0	6	!=
water	6:35	0:0	6	flags
stmts	7:12	7:20	5	
continue	7:12	7:20	6	
if	8:8	9:20	4	(opt -> flags & AV_OPT_FLAG_READONLY)
cond	8:12	8:25	5	opt -> flags & AV_OPT_FLAG_READONLY
water	8:12	0:0	6	opt
op	8:15	0:0	6	->
water	8:17	0:0	6	flags
op	8:23	0:0	6	&
water	8:25	0:0	6	AV_OPT_FLAG_READONLY
stmts	9:12	9:20	5	
continue	9:12	9:20	6	
switch	10:8	60:8	4	(opt -> type)
cond	10:16	10:21	5	opt -> type
water	10:16	0:0	6	opt
op	10:19	0:0	6	->
water	10:21	0:0	6	type
stmts	10:27	60:8	5	
water	10:27	0:0	6	{
label	11:12	11:34	6	case AV_OPT_TYPE_CONST :
break	13:12	13:17	6	
label	14:12	14:34	6	case AV_OPT_TYPE_FLAGS :
label	15:12	15:32	6	case AV_OPT_TYPE_INT :
label	16:12	16:34	6	case AV_OPT_TYPE_INT64 :
label	17:12	17:37	6	case AV_OPT_TYPE_DURATION :
label	18:12	18:43	6	case AV_OPT_TYPE_CHANNEL_LAYOUT :
call	19:16	19:68	6	write_number
arg	19:29	19:30	7	s
water	19:29	0:0	8	s
arg	19:32	19:35	7	opt
water	19:32	0:0	8	opt
arg	19:37	19:40	7	dst
water	19:37	0:0	8	dst
arg	19:42	19:43	7	1
water	19:42	0:0	8	1
arg	19:45	19:46	7	1
water	19:45	0:0	8	1
arg	19:48	19:68	7	opt->default_val.i64
water	19:48	0:0	8	opt
op	19:51	0:0	8	->
water	19:53	0:0	8	default_val
op	19:64	0:0	8	.
water	19:65	0:0	8	i64
water	19:69	0:0	6	;
break	20:12	20:17	6	
label	21:12	21:35	6	case AV_OPT_TYPE_DOUBLE :
label	22:12	22:34	6	case AV_OPT_TYPE_FLOAT :
water	22:36	0:0	6	{
decl	23:16	23:26	6	double	val
water	24:16	0:0	6	val
op	24:20	0:0	6	=
water	24:22	0:0	6	opt
op	24:25	0:0	6	->
water	24:27	0:0	6	default_val
op	24:38	0:0	6	.
water	24:39	0:0	6	dbl
water	24:42	0:0	6	;
call	25:16	25:51	6	write_number
arg	25:29	25:30	7	s
water	25:29	0:0	8	s
arg	25:32	25:35	7	opt
water	25:32	0:0	8	opt
arg	25:37	25:40	7	dst
water	25:37	0:0	8	dst
arg	25:42	25:45	7	val
water	25:42	0:0	8	val
arg	25:47	25:48	7	1
water	25:47	0:0	8	1
arg	25:50	25:51	7	1
water	25:50	0:0	8	1
water	25:52	0:0	6	;
water	26:12	0:0	6	}
break	27:12	27:17	6	
label	28:12	28:37	6	case AV_OPT_TYPE_RATIONAL :
water	28:39	0:0	6	{
decl	29:16	29:30	6	AVRational	val
water	30:16	0:0	6	val
op	30:20	0:0	6	=
call	30:22	30:58	6	av_d2q
arg	30:29	30:49	7	opt->default_val.dbl
water	30:29	0:0	8	opt
op	30:32	0:0	8	->
water	30:34	0:0	8	default_val
op	30:45	0:0	8	.
water	30:46	0:0	8	dbl
arg	30:51	30:58	7	INT_MAX
water	30:51	0:0	8	INT_MAX
water	30:59	0:0	6	;
call	31:16	31:61	6	write_number
arg	31:29	31:30	7	s
water	31:29	0:0	8	s
arg	31:32	31:35	7	opt
water	31:32	0:0	8	opt
arg	31:37	31:40	7	dst
water	31:37	0:0	8	dst
arg	31:42	31:43	7	1
water	31:42	0:0	8	1
arg	31:45	31:52	7	val.den
water	31:45	0:0	8	val
op	31:48	0:0	8	.
water	31:49	0:0	8	den
arg	31:54	31:61	7	val.num
water	31:54	0:0	8	val
op	31:57	0:0	8	.
water	31:58	0:0	8	num
water	31:62	0:0	6	;
water	32:12	0:0	6	}
break	33:12	33:17	6	
label	34:12	34:34	6	case AV_OPT_TYPE_COLOR :
call	35:16	35:66	6	set_string_color
arg	35:33	35:34	7	s
water	35:33	0:0	8	s
arg	35:36	35:39	7	opt
water	35:36	0:0	8	opt
arg	35:41	35:61	7	opt->default_val.str
water	35:41	0:0	8	opt
op	35:44	0:0	8	->
water	35:46	0:0	8	default_val
op	35:57	0:0	8	.
water	35:58	0:0	8	str
arg	35:63	35:66	7	dst
water	35:63	0:0	8	dst
water	35:67	0:0	6	;
break	36:16	36:21	6	
label	37:12	37:35	6	case AV_OPT_TYPE_STRING :
call	38:16	38:60	6	set_string
arg	38:27	38:28	7	s
water	38:27	0:0	8	s
arg	38:30	38:33	7	opt
water	38:30	0:0	8	opt
arg	38:35	38:55	7	opt->default_val.str
water	38:35	0:0	8	opt
op	38:38	0:0	8	->
water	38:40	0:0	8	default_val
op	38:51	0:0	8	.
water	38:52	0:0	8	str
arg	38:57	38:60	7	dst
water	38:57	0:0	8	dst
water	38:61	0:0	6	;
break	39:16	39:21	6	
label	40:12	40:39	6	case AV_OPT_TYPE_IMAGE_SIZE :
call	41:16	41:71	6	set_string_image_size
arg	41:38	41:39	7	s
water	41:38	0:0	8	s
arg	41:41	41:44	7	opt
water	41:41	0:0	8	opt
arg	41:46	41:66	7	opt->default_val.str
water	41:46	0:0	8	opt
op	41:49	0:0	8	->
water	41:51	0:0	8	default_val
op	41:62	0:0	8	.
water	41:63	0:0	8	str
arg	41:68	41:71	7	dst
water	41:68	0:0	8	dst
water	41:72	0:0	6	;
break	42:16	42:21	6	
label	43:12	43:39	6	case AV_OPT_TYPE_VIDEO_RATE :
call	44:16	44:71	6	set_string_video_rate
arg	44:38	44:39	7	s
water	44:38	0:0	8	s
arg	44:41	44:44	7	opt
water	44:41	0:0	8	opt
arg	44:46	44:66	7	opt->default_val.str
water	44:46	0:0	8	opt
op	44:49	0:0	8	->
water	44:51	0:0	8	default_val
op	44:62	0:0	8	.
water	44:63	0:0	8	str
arg	44:68	44:71	7	dst
water	44:68	0:0	8	dst
water	44:72	0:0	6	;
break	45:16	45:21	6	
label	46:12	46:38	6	case AV_OPT_TYPE_PIXEL_FMT :
call	47:16	47:68	6	write_number
arg	47:29	47:30	7	s
water	47:29	0:0	8	s
arg	47:32	47:35	7	opt
water	47:32	0:0	8	opt
arg	47:37	47:40	7	dst
water	47:37	0:0	8	dst
arg	47:42	47:43	7	1
water	47:42	0:0	8	1
arg	47:45	47:46	7	1
water	47:45	0:0	8	1
arg	47:48	47:68	7	opt->default_val.i64
water	47:48	0:0	8	opt
op	47:51	0:0	8	->
water	47:53	0:0	8	default_val
op	47:64	0:0	8	.
water	47:65	0:0	8	i64
water	47:69	0:0	6	;
break	48:16	48:21	6	
label	49:12	49:39	6	case AV_OPT_TYPE_SAMPLE_FMT :
call	50:16	50:68	6	write_number
arg	50:29	50:30	7	s
water	50:29	0:0	8	s
arg	50:32	50:35	7	opt
water	50:32	0:0	8	opt
arg	50:37	50:40	7	dst
water	50:37	0:0	8	dst
arg	50:42	50:43	7	1
water	50:42	0:0	8	1
arg	50:45	50:46	7	1
water	50:45	0:0	8	1
arg	50:48	50:68	7	opt->default_val.i64
water	50:48	0:0	8	opt
op	50:51	0:0	8	->
water	50:53	0:0	8	default_val
op	50:64	0:0	8	.
water	50:65	0:0	8	i64
water	50:69	0:0	6	;
break	51:16	51:21	6	
label	52:12	52:35	6	case AV_OPT_TYPE_BINARY :
call	53:16	53:67	6	set_string_binary
arg	53:34	53:35	7	s
water	53:34	0:0	8	s
arg	53:37	53:40	7	opt
water	53:37	0:0	8	opt
arg	53:42	53:62	7	opt->default_val.str
water	53:42	0:0	8	opt
op	53:45	0:0	8	->
water	53:47	0:0	8	default_val
op	53:58	0:0	8	.
water	53:59	0:0	8	str
arg	53:64	53:67	7	dst
water	53:64	0:0	8	dst
water	53:68	0:0	6	;
break	54:16	54:21	6	
label	55:12	55:33	6	case AV_OPT_TYPE_DICT :
break	57:12	57:17	6	
label	58:12	58:19	6	default :
call	59:16	59:115	6	av_log
arg	59:23	59:24	7	s
water	59:23	0:0	8	s
arg	59:26	59:38	7	AV_LOG_DEBUG
water	59:26	0:0	8	AV_LOG_DEBUG
arg	59:40	59:93	7	"AVOption type %d of option %s not implemented yet\n"
water	59:40	0:0	8	"AVOption type %d of option %s not implemented yet\n"
arg	59:95	59:104	7	opt->type
water	59:95	0:0	8	opt
op	59:98	0:0	8	->
water	59:100	0:0	8	type
arg	59:106	59:115	7	opt->name
water	59:106	0:0	8	opt
op	59:109	0:0	8	->
water	59:111	0:0	8	name
water	59:116	0:0	6	;
water	60:8	0:0	6	}
water	61:4	0:0	4	}
