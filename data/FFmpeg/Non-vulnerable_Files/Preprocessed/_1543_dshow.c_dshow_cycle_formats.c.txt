func	1:0	138:0	0	static void	dshow_cycle_formats
params	2:19	0:0	1	
param	2:20	2:42	2	AVFormatContext *	avctx
param	2:44	2:72	2	enum dshowDeviceType	devtype
param	3:20	3:29	2	IPin *	pin
param	3:31	3:47	2	int *	pformat_set
stmnts	0:0	137:33	1	
decl	5:4	5:44	2	struct dshow_ctx	*ctx
op	5:26	0:0	2	=
water	5:28	0:0	2	avctx
op	5:33	0:0	2	->
water	5:35	0:0	2	priv_data
decl	6:4	6:34	2	IAMStreamConfig	*config
op	6:28	0:0	2	=
water	6:30	0:0	2	NULL
decl	7:4	7:30	2	AM_MEDIA_TYPE	*type
op	7:24	0:0	2	=
water	7:26	0:0	2	NULL
decl	8:4	8:22	2	int	format_set
op	8:19	0:0	2	=
water	8:21	0:0	2	0
decl	9:4	9:21	2	void	*caps
op	9:15	0:0	2	=
water	9:17	0:0	2	NULL
decl	10:4	10:21	2	int	i
water	10:9	0:0	2	,
decl	10:4	10:21	2	int	n
water	10:12	0:0	2	,
decl	10:4	10:21	2	int	size
water	10:18	0:0	2	,
decl	10:4	10:21	2	int	r
if	11:4	12:14	2	(IPin_QueryInterface (pin ,& IID_IAMStreamConfig ,( void * * ) & config ) != S_OK)
cond	11:8	11:77	3	IPin_QueryInterface (pin ,& IID_IAMStreamConfig ,( void * * ) & config ) != S_OK
call	11:8	11:72	4	IPin_QueryInterface
arg	11:28	11:31	5	pin
water	11:28	0:0	6	pin
arg	11:33	11:53	5	&IID_IAMStreamConfig
op	11:33	0:0	6	&
water	11:34	0:0	6	IID_IAMStreamConfig
arg	11:55	11:72	5	(void**)&config
water	11:55	0:0	6	(
water	11:56	0:0	6	void
op	11:61	0:0	6	*
op	11:62	0:0	6	*
water	11:63	0:0	6	)
op	11:65	0:0	6	&
water	11:66	0:0	6	config
op	11:74	0:0	4	!=
water	11:77	0:0	4	S_OK
stmts	12:8	12:14	3	
return	12:8	12:14	4	
if	13:4	14:16	2	(IAMStreamConfig_GetNumberOfCapabilities (config ,& n ,& size ) != S_OK)
cond	13:8	13:70	3	IAMStreamConfig_GetNumberOfCapabilities (config ,& n ,& size ) != S_OK
call	13:8	13:65	4	IAMStreamConfig_GetNumberOfCapabilities
arg	13:48	13:54	5	config
water	13:48	0:0	6	config
arg	13:56	13:58	5	&n
op	13:56	0:0	6	&
water	13:57	0:0	6	n
arg	13:60	13:65	5	&size
op	13:60	0:0	6	&
water	13:61	0:0	6	size
op	13:67	0:0	4	!=
water	13:70	0:0	4	S_OK
stmts	14:8	14:16	3	
goto	14:8	14:16	4	end
water	14:13	0:0	5	end
water	15:4	0:0	2	caps
op	15:9	0:0	2	=
call	15:11	15:25	2	av_malloc
arg	15:21	15:25	3	size
water	15:21	0:0	4	size
water	15:26	0:0	2	;
if	16:4	17:16	2	(! caps)
cond	16:8	16:9	3	! caps
op	16:8	0:0	4	!
water	16:9	0:0	4	caps
stmts	17:8	17:16	3	
goto	17:8	17:16	4	end
water	17:13	0:0	5	end
for	18:4	132:4	2	(i = 0 ;i < n && ! format_set;i ++)
forinit	18:9	18:14	3	i = 0 ;
water	18:9	0:0	4	i
op	18:11	0:0	4	=
water	18:13	0:0	4	0
water	18:14	0:0	4	;
cond	18:16	18:26	3	i < n && ! format_set
water	18:16	0:0	4	i
op	18:18	0:0	4	<
water	18:20	0:0	4	n
op	18:22	0:0	4	&&
op	18:25	0:0	4	!
water	18:26	0:0	4	format_set
forexpr	18:38	18:39	3	i ++
water	18:38	0:0	4	i
op	18:39	0:0	4	++
stmts	18:43	132:4	3	
water	18:43	0:0	4	{
water	19:8	0:0	4	r
op	19:10	0:0	4	=
call	19:12	19:73	4	IAMStreamConfig_GetStreamCaps
arg	19:42	19:48	5	config
water	19:42	0:0	6	config
arg	19:50	19:51	5	i
water	19:50	0:0	6	i
arg	19:53	19:58	5	&type
op	19:53	0:0	6	&
water	19:54	0:0	6	type
arg	19:60	19:73	5	(void*)caps
water	19:60	0:0	6	(
water	19:61	0:0	6	void
op	19:66	0:0	6	*
water	19:67	0:0	6	)
water	19:69	0:0	6	caps
water	19:74	0:0	4	;
if	20:8	21:21	4	(r != S_OK)
cond	20:12	20:17	5	r != S_OK
water	20:12	0:0	6	r
op	20:14	0:0	6	!=
water	20:17	0:0	6	S_OK
stmts	21:12	21:21	5	
goto	21:12	21:21	6	next
water	21:17	0:0	7	next
call	23:8	23:35	4	ff_print_AM_MEDIA_TYPE
arg	23:31	23:35	5	type
water	23:31	0:0	6	type
water	23:36	0:0	4	;
if	25:8	89:8	4	(devtype == VideoDevice)
cond	25:12	25:23	5	devtype == VideoDevice
water	25:12	0:0	6	devtype
op	25:20	0:0	6	==
water	25:23	0:0	6	VideoDevice
stmts	25:36	89:8	5	
water	25:36	0:0	6	{
decl	26:12	26:50	6	VIDEO_STREAM_CONFIG_CAPS	*vcaps
op	26:44	0:0	6	=
water	26:46	0:0	6	caps
decl	27:12	27:33	6	BITMAPINFOHEADER	*bih
decl	28:12	28:23	6	int64_t	*fr
water	29:12	0:0	6	const
water	29:18	0:0	6	AVCodecTag
op	29:29	0:0	6	*
water	29:30	0:0	6	const
water	29:36	0:0	6	tags
op	29:40	0:0	6	[
op	29:41	0:0	6	]
op	29:43	0:0	6	=
water	29:45	0:0	6	{
call	29:47	29:76	6	avformat_get_riff_video_tags
water	29:77	0:0	6	,
water	29:79	0:0	6	NULL
water	29:84	0:0	6	}
water	29:85	0:0	6	;
call	31:12	31:51	6	ff_print_VIDEO_STREAM_CONFIG_CAPS
arg	31:46	31:51	7	vcaps
water	31:46	0:0	8	vcaps
water	31:52	0:0	6	;
if	33:12	37:12	6	(IsEqualGUID (& type -> formattype ,& FORMAT_VideoInfo ))
cond	33:16	33:64	7	IsEqualGUID (& type -> formattype ,& FORMAT_VideoInfo )
call	33:16	33:64	8	IsEqualGUID
arg	33:28	33:45	9	&type->formattype
op	33:28	0:0	10	&
water	33:29	0:0	10	type
op	33:33	0:0	10	->
water	33:35	0:0	10	formattype
arg	33:47	33:64	9	&FORMAT_VideoInfo
op	33:47	0:0	10	&
water	33:48	0:0	10	FORMAT_VideoInfo
stmts	33:67	37:12	7	
water	33:67	0:0	8	{
decl	34:16	34:60	8	VIDEOINFOHEADER	*v
op	34:35	0:0	8	=
water	34:37	0:0	8	(
water	34:38	0:0	8	void
op	34:43	0:0	8	*
water	34:44	0:0	8	)
water	34:46	0:0	8	type
op	34:50	0:0	8	->
water	34:52	0:0	8	pbFormat
water	35:16	0:0	8	fr
op	35:19	0:0	8	=
op	35:21	0:0	8	&
water	35:22	0:0	8	v
op	35:23	0:0	8	->
water	35:25	0:0	8	AvgTimePerFrame
water	35:40	0:0	8	;
water	36:16	0:0	8	bih
op	36:20	0:0	8	=
op	36:22	0:0	8	&
water	36:23	0:0	8	v
op	36:24	0:0	8	->
water	36:26	0:0	8	bmiHeader
water	36:35	0:0	8	;
water	37:12	0:0	8	}
else	37:14	41:12	6
stmts	37:19	41:12	7	
if	37:19	41:12	8	(IsEqualGUID (& type -> formattype ,& FORMAT_VideoInfo2 ))
cond	37:23	37:72	9	IsEqualGUID (& type -> formattype ,& FORMAT_VideoInfo2 )
call	37:23	37:72	10	IsEqualGUID
arg	37:35	37:52	11	&type->formattype
op	37:35	0:0	12	&
water	37:36	0:0	12	type
op	37:40	0:0	12	->
water	37:42	0:0	12	formattype
arg	37:54	37:72	11	&FORMAT_VideoInfo2
op	37:54	0:0	12	&
water	37:55	0:0	12	FORMAT_VideoInfo2
stmts	37:75	41:12	9	
water	37:75	0:0	10	{
decl	38:16	38:61	10	VIDEOINFOHEADER2	*v
op	38:36	0:0	10	=
water	38:38	0:0	10	(
water	38:39	0:0	10	void
op	38:44	0:0	10	*
water	38:45	0:0	10	)
water	38:47	0:0	10	type
op	38:51	0:0	10	->
water	38:53	0:0	10	pbFormat
water	39:16	0:0	10	fr
op	39:19	0:0	10	=
op	39:21	0:0	10	&
water	39:22	0:0	10	v
op	39:23	0:0	10	->
water	39:25	0:0	10	AvgTimePerFrame
water	39:40	0:0	10	;
water	40:16	0:0	10	bih
op	40:20	0:0	10	=
op	40:22	0:0	10	&
water	40:23	0:0	10	v
op	40:24	0:0	10	->
water	40:26	0:0	10	bmiHeader
water	40:35	0:0	10	;
water	41:12	0:0	10	}
else	41:14	43:12	6
stmts	41:19	43:12	7	
water	41:19	0:0	8	{
goto	42:16	42:25	8	next
water	42:21	0:0	9	next
water	43:12	0:0	8	}
if	44:12	63:12	6	(! pformat_set)
cond	44:16	44:17	7	! pformat_set
op	44:16	0:0	8	!
water	44:17	0:0	8	pformat_set
stmts	44:30	63:12	7	
water	44:30	0:0	8	{
decl	45:16	45:94	8	enum AVPixelFormat	pix_fmt
op	45:43	0:0	8	=
call	45:45	45:93	9	dshow_pixfmt
arg	45:58	45:76	10	bih->biCompression
water	45:58	0:0	11	bih
op	45:61	0:0	11	->
water	45:63	0:0	11	biCompression
arg	45:78	45:93	10	bih->biBitCount
water	45:78	0:0	11	bih
op	45:81	0:0	11	->
water	45:83	0:0	11	biBitCount
if	46:16	54:16	8	(pix_fmt == AV_PIX_FMT_NONE)
cond	46:20	46:31	9	pix_fmt == AV_PIX_FMT_NONE
water	46:20	0:0	10	pix_fmt
op	46:28	0:0	10	==
water	46:31	0:0	10	AV_PIX_FMT_NONE
stmts	46:48	54:16	9	
water	46:48	0:0	10	{
decl	47:20	47:87	10	enum AVCodecID	codec_id
op	47:44	0:0	10	=
call	47:46	47:86	11	av_codec_get_id
arg	47:62	47:66	12	tags
water	47:62	0:0	13	tags
arg	47:68	47:86	12	bih->biCompression
water	47:68	0:0	13	bih
op	47:71	0:0	13	->
water	47:73	0:0	13	biCompression
decl	48:20	48:67	10	AVCodec	*codec
op	48:35	0:0	10	=
call	48:37	48:66	11	avcodec_find_decoder
arg	48:58	48:66	12	codec_id
water	48:58	0:0	13	codec_id
if	49:20	51:20	10	(codec_id == AV_CODEC_ID_NONE || ! codec)
cond	49:24	49:57	11	codec_id == AV_CODEC_ID_NONE || ! codec
water	49:24	0:0	12	codec_id
op	49:33	0:0	12	==
water	49:36	0:0	12	AV_CODEC_ID_NONE
op	49:53	0:0	12	||
op	49:56	0:0	12	!
water	49:57	0:0	12	codec
stmts	49:64	51:20	11	
water	49:64	0:0	12	{
call	50:24	50:110	12	av_log
arg	50:31	50:36	13	avctx
water	50:31	0:0	14	avctx
arg	50:38	50:49	13	AV_LOG_INFO
water	50:38	0:0	14	AV_LOG_INFO
arg	50:51	50:84	13	"  unknown compression type 0x%X"
water	50:51	0:0	14	"  unknown compression type 0x%X"
arg	50:86	50:110	13	(int)bih->biCompression
water	50:86	0:0	14	(
water	50:87	0:0	14	int
water	50:90	0:0	14	)
water	50:92	0:0	14	bih
op	50:95	0:0	14	->
water	50:97	0:0	14	biCompression
water	50:111	0:0	12	;
water	51:20	0:0	12	}
else	51:22	53:20	10
stmts	51:27	53:20	11	
water	51:27	0:0	12	{
call	52:24	52:77	12	av_log
arg	52:31	52:36	13	avctx
water	52:31	0:0	14	avctx
arg	52:38	52:49	13	AV_LOG_INFO
water	52:38	0:0	14	AV_LOG_INFO
arg	52:51	52:64	13	"  vcodec=%s"
water	52:51	0:0	14	"  vcodec=%s"
arg	52:66	52:77	13	codec->name
water	52:66	0:0	14	codec
op	52:71	0:0	14	->
water	52:73	0:0	14	name
water	52:78	0:0	12	;
water	53:20	0:0	12	}
water	54:16	0:0	10	}
else	54:18	56:16	8
stmts	54:23	56:16	9	
water	54:23	0:0	10	{
call	55:20	55:96	10	av_log
arg	55:27	55:32	11	avctx
water	55:27	0:0	12	avctx
arg	55:34	55:45	11	AV_LOG_INFO
water	55:34	0:0	12	AV_LOG_INFO
arg	55:47	55:66	11	"  pixel_format=%s"
water	55:47	0:0	12	"  pixel_format=%s"
arg	55:68	55:96	11	av_get_pix_fmt_name(pix_fmt)
call	55:68	55:95	12	av_get_pix_fmt_name
arg	55:88	55:95	13	pix_fmt
water	55:88	0:0	14	pix_fmt
water	55:97	0:0	10	;
water	56:16	0:0	10	}
call	57:16	61:52	8	av_log
arg	57:23	57:28	9	avctx
water	57:23	0:0	10	avctx
arg	57:30	57:41	9	AV_LOG_INFO
water	57:30	0:0	10	AV_LOG_INFO
arg	57:43	57:90	9	"  min s=%ldx%ld fps=%g max s=%ldx%ld fps=%g\n"
water	57:43	0:0	10	"  min s=%ldx%ld fps=%g max s=%ldx%ld fps=%g\n"
arg	58:23	58:46	9	vcaps->MinOutputSize.cx
water	58:23	0:0	10	vcaps
op	58:28	0:0	10	->
water	58:30	0:0	10	MinOutputSize
op	58:43	0:0	10	.
water	58:44	0:0	10	cx
arg	58:48	58:71	9	vcaps->MinOutputSize.cy
water	58:48	0:0	10	vcaps
op	58:53	0:0	10	->
water	58:55	0:0	10	MinOutputSize
op	58:68	0:0	10	.
water	58:69	0:0	10	cy
arg	59:23	59:52	9	1e7/vcaps->MaxFrameInterval
water	59:23	0:0	10	1
water	59:24	0:0	10	e7
op	59:27	0:0	10	/
water	59:29	0:0	10	vcaps
op	59:34	0:0	10	->
water	59:36	0:0	10	MaxFrameInterval
arg	60:23	60:46	9	vcaps->MaxOutputSize.cx
water	60:23	0:0	10	vcaps
op	60:28	0:0	10	->
water	60:30	0:0	10	MaxOutputSize
op	60:43	0:0	10	.
water	60:44	0:0	10	cx
arg	60:48	60:71	9	vcaps->MaxOutputSize.cy
water	60:48	0:0	10	vcaps
op	60:53	0:0	10	->
water	60:55	0:0	10	MaxOutputSize
op	60:68	0:0	10	.
water	60:69	0:0	10	cy
arg	61:23	61:52	9	1e7/vcaps->MinFrameInterval
water	61:23	0:0	10	1
water	61:24	0:0	10	e7
op	61:27	0:0	10	/
water	61:29	0:0	10	vcaps
op	61:34	0:0	10	->
water	61:36	0:0	10	MinFrameInterval
water	61:53	0:0	8	;
continue	62:16	62:24	8	
water	63:12	0:0	8	}
if	64:12	67:12	6	(ctx -> video_codec_id != AV_CODEC_ID_RAWVIDEO)
cond	64:16	64:39	7	ctx -> video_codec_id != AV_CODEC_ID_RAWVIDEO
water	64:16	0:0	8	ctx
op	64:19	0:0	8	->
water	64:21	0:0	8	video_codec_id
op	64:36	0:0	8	!=
water	64:39	0:0	8	AV_CODEC_ID_RAWVIDEO
stmts	64:61	67:12	7	
water	64:61	0:0	8	{
if	65:16	66:29	8	(ctx -> video_codec_id !=av_codec_get_id (tags ,bih -> biCompression ))
cond	65:20	65:83	9	ctx -> video_codec_id !=av_codec_get_id (tags ,bih -> biCompression )
water	65:20	0:0	10	ctx
op	65:23	0:0	10	->
water	65:25	0:0	10	video_codec_id
op	65:40	0:0	10	!=
call	65:43	65:83	10	av_codec_get_id
arg	65:59	65:63	11	tags
water	65:59	0:0	12	tags
arg	65:65	65:83	11	bih->biCompression
water	65:65	0:0	12	bih
op	65:68	0:0	12	->
water	65:70	0:0	12	biCompression
stmts	66:20	66:29	9	
goto	66:20	66:29	10	next
water	66:25	0:0	11	next
water	67:12	0:0	8	}
if	68:12	71:12	6	(ctx -> pixel_format != AV_PIX_FMT_NONE && ctx -> pixel_format !=dshow_pixfmt (bih -> biCompression ,bih -> biBitCount ))
cond	68:16	69:85	7	ctx -> pixel_format != AV_PIX_FMT_NONE && ctx -> pixel_format !=dshow_pixfmt (bih -> biCompression ,bih -> biBitCount )
water	68:16	0:0	8	ctx
op	68:19	0:0	8	->
water	68:21	0:0	8	pixel_format
op	68:34	0:0	8	!=
water	68:37	0:0	8	AV_PIX_FMT_NONE
op	68:53	0:0	8	&&
water	69:16	0:0	8	ctx
op	69:19	0:0	8	->
water	69:21	0:0	8	pixel_format
op	69:34	0:0	8	!=
call	69:37	69:85	8	dshow_pixfmt
arg	69:50	69:68	9	bih->biCompression
water	69:50	0:0	10	bih
op	69:53	0:0	10	->
water	69:55	0:0	10	biCompression
arg	69:70	69:85	9	bih->biBitCount
water	69:70	0:0	10	bih
op	69:73	0:0	10	->
water	69:75	0:0	10	biBitCount
stmts	69:88	71:12	7	
water	69:88	0:0	8	{
goto	70:16	70:25	8	next
water	70:21	0:0	9	next
water	71:12	0:0	8	}
if	72:12	79:12	6	(ctx -> framerate)
cond	72:16	72:21	7	ctx -> framerate
water	72:16	0:0	8	ctx
op	72:19	0:0	8	->
water	72:21	0:0	8	framerate
stmts	72:32	79:12	7	
water	72:32	0:0	8	{
decl	73:16	74:75	8	int64_t	framerate
op	73:34	0:0	8	=
water	73:36	0:0	8	(
water	73:37	0:0	8	(
water	73:38	0:0	8	int64_t
water	73:45	0:0	8	)
water	73:47	0:0	8	ctx
op	73:50	0:0	8	->
water	73:52	0:0	8	requested_framerate
op	73:71	0:0	8	.
water	73:72	0:0	8	den
op	73:75	0:0	8	*
water	73:76	0:0	8	10000000
water	73:84	0:0	8	)
op	74:44	0:0	8	/
water	74:47	0:0	8	ctx
op	74:50	0:0	8	->
water	74:52	0:0	8	requested_framerate
op	74:71	0:0	8	.
water	74:72	0:0	8	num
if	75:16	77:29	8	(framerate > vcaps -> MaxFrameInterval || framerate < vcaps -> MinFrameInterval)
cond	75:20	76:39	9	framerate > vcaps -> MaxFrameInterval || framerate < vcaps -> MinFrameInterval
water	75:20	0:0	10	framerate
op	75:30	0:0	10	>
water	75:32	0:0	10	vcaps
op	75:37	0:0	10	->
water	75:39	0:0	10	MaxFrameInterval
op	75:56	0:0	10	||
water	76:20	0:0	10	framerate
op	76:30	0:0	10	<
water	76:32	0:0	10	vcaps
op	76:37	0:0	10	->
water	76:39	0:0	10	MinFrameInterval
stmts	77:20	77:29	9	
goto	77:20	77:29	10	next
water	77:25	0:0	11	next
op	78:16	0:0	8	*
water	78:17	0:0	8	fr
op	78:20	0:0	8	=
water	78:22	0:0	8	framerate
water	78:31	0:0	8	;
water	79:12	0:0	8	}
if	80:12	88:12	6	(ctx -> requested_width && ctx -> requested_height)
cond	80:16	80:45	7	ctx -> requested_width && ctx -> requested_height
water	80:16	0:0	8	ctx
op	80:19	0:0	8	->
water	80:21	0:0	8	requested_width
op	80:37	0:0	8	&&
water	80:40	0:0	8	ctx
op	80:43	0:0	8	->
water	80:45	0:0	8	requested_height
stmts	80:63	88:12	7	
water	80:63	0:0	8	{
if	81:16	85:29	8	(ctx -> requested_width > vcaps -> MaxOutputSize . cx || ctx -> requested_width < vcaps -> MinOutputSize . cx || ctx -> requested_height > vcaps -> MaxOutputSize . cy || ctx -> requested_height < vcaps -> MinOutputSize . cy)
cond	81:20	84:65	9	ctx -> requested_width > vcaps -> MaxOutputSize . cx || ctx -> requested_width < vcaps -> MinOutputSize . cx || ctx -> requested_height > vcaps -> MaxOutputSize . cy || ctx -> requested_height < vcaps -> MinOutputSize . cy
water	81:20	0:0	10	ctx
op	81:23	0:0	10	->
water	81:25	0:0	10	requested_width
op	81:42	0:0	10	>
water	81:44	0:0	10	vcaps
op	81:49	0:0	10	->
water	81:51	0:0	10	MaxOutputSize
op	81:64	0:0	10	.
water	81:65	0:0	10	cx
op	81:68	0:0	10	||
water	82:20	0:0	10	ctx
op	82:23	0:0	10	->
water	82:25	0:0	10	requested_width
op	82:42	0:0	10	<
water	82:44	0:0	10	vcaps
op	82:49	0:0	10	->
water	82:51	0:0	10	MinOutputSize
op	82:64	0:0	10	.
water	82:65	0:0	10	cx
op	82:68	0:0	10	||
water	83:20	0:0	10	ctx
op	83:23	0:0	10	->
water	83:25	0:0	10	requested_height
op	83:42	0:0	10	>
water	83:44	0:0	10	vcaps
op	83:49	0:0	10	->
water	83:51	0:0	10	MaxOutputSize
op	83:64	0:0	10	.
water	83:65	0:0	10	cy
op	83:68	0:0	10	||
water	84:20	0:0	10	ctx
op	84:23	0:0	10	->
water	84:25	0:0	10	requested_height
op	84:42	0:0	10	<
water	84:44	0:0	10	vcaps
op	84:49	0:0	10	->
water	84:51	0:0	10	MinOutputSize
op	84:64	0:0	10	.
water	84:65	0:0	10	cy
stmts	85:20	85:29	9	
goto	85:20	85:29	10	next
water	85:25	0:0	11	next
water	86:16	0:0	8	bih
op	86:19	0:0	8	->
water	86:21	0:0	8	biWidth
op	86:30	0:0	8	=
water	86:32	0:0	8	ctx
op	86:35	0:0	8	->
water	86:37	0:0	8	requested_width
water	86:52	0:0	8	;
water	87:16	0:0	8	bih
op	87:19	0:0	8	->
water	87:21	0:0	8	biHeight
op	87:30	0:0	8	=
water	87:32	0:0	8	ctx
op	87:35	0:0	8	->
water	87:37	0:0	8	requested_height
water	87:53	0:0	8	;
water	88:12	0:0	8	}
water	89:8	0:0	6	}
else	89:10	124:8	4
stmts	89:15	124:8	5	
water	89:15	0:0	6	{
decl	90:12	90:50	6	AUDIO_STREAM_CONFIG_CAPS	*acaps
op	90:44	0:0	6	=
water	90:46	0:0	6	caps
decl	91:12	91:28	6	WAVEFORMATEX	*fx
call	93:12	93:51	6	ff_print_AUDIO_STREAM_CONFIG_CAPS
arg	93:46	93:51	7	acaps
water	93:46	0:0	8	acaps
water	93:52	0:0	6	;
if	95:12	97:12	6	(IsEqualGUID (& type -> formattype ,& FORMAT_WaveFormatEx ))
cond	95:16	95:67	7	IsEqualGUID (& type -> formattype ,& FORMAT_WaveFormatEx )
call	95:16	95:67	8	IsEqualGUID
arg	95:28	95:45	9	&type->formattype
op	95:28	0:0	10	&
water	95:29	0:0	10	type
op	95:33	0:0	10	->
water	95:35	0:0	10	formattype
arg	95:47	95:67	9	&FORMAT_WaveFormatEx
op	95:47	0:0	10	&
water	95:48	0:0	10	FORMAT_WaveFormatEx
stmts	95:70	97:12	7	
water	95:70	0:0	8	{
water	96:16	0:0	8	fx
op	96:19	0:0	8	=
water	96:21	0:0	8	(
water	96:22	0:0	8	void
op	96:27	0:0	8	*
water	96:28	0:0	8	)
water	96:30	0:0	8	type
op	96:34	0:0	8	->
water	96:36	0:0	8	pbFormat
water	96:44	0:0	8	;
water	97:12	0:0	8	}
else	97:14	99:12	6
stmts	97:19	99:12	7	
water	97:19	0:0	8	{
goto	98:16	98:25	8	next
water	98:21	0:0	9	next
water	99:12	0:0	8	}
if	100:12	105:12	6	(! pformat_set)
cond	100:16	100:17	7	! pformat_set
op	100:16	0:0	8	!
water	100:17	0:0	8	pformat_set
stmts	100:30	105:12	7	
water	100:30	0:0	8	{
call	101:16	103:105	8	av_log
arg	101:23	101:28	9	avctx
water	101:23	0:0	10	avctx
arg	101:30	101:41	9	AV_LOG_INFO
water	101:30	0:0	10	AV_LOG_INFO
arg	101:43	101:108	9	"  min ch=%lu bits=%lu rate=%6lu max ch=%lu bits=%lu rate=%6lu\n"
water	101:43	0:0	10	"  min ch=%lu bits=%lu rate=%6lu max ch=%lu bits=%lu rate=%6lu\n"
arg	102:23	102:45	9	acaps->MinimumChannels
water	102:23	0:0	10	acaps
op	102:28	0:0	10	->
water	102:30	0:0	10	MinimumChannels
arg	102:47	102:74	9	acaps->MinimumBitsPerSample
water	102:47	0:0	10	acaps
op	102:52	0:0	10	->
water	102:54	0:0	10	MinimumBitsPerSample
arg	102:76	102:105	9	acaps->MinimumSampleFrequency
water	102:76	0:0	10	acaps
op	102:81	0:0	10	->
water	102:83	0:0	10	MinimumSampleFrequency
arg	103:23	103:45	9	acaps->MaximumChannels
water	103:23	0:0	10	acaps
op	103:28	0:0	10	->
water	103:30	0:0	10	MaximumChannels
arg	103:47	103:74	9	acaps->MaximumBitsPerSample
water	103:47	0:0	10	acaps
op	103:52	0:0	10	->
water	103:54	0:0	10	MaximumBitsPerSample
arg	103:76	103:105	9	acaps->MaximumSampleFrequency
water	103:76	0:0	10	acaps
op	103:81	0:0	10	->
water	103:83	0:0	10	MaximumSampleFrequency
water	103:106	0:0	8	;
continue	104:16	104:24	8	
water	105:12	0:0	8	}
if	106:12	111:12	6	(ctx -> sample_rate)
cond	106:16	106:21	7	ctx -> sample_rate
water	106:16	0:0	8	ctx
op	106:19	0:0	8	->
water	106:21	0:0	8	sample_rate
stmts	106:34	111:12	7	
water	106:34	0:0	8	{
if	107:16	109:29	8	(ctx -> sample_rate > acaps -> MaximumSampleFrequency || ctx -> sample_rate < acaps -> MinimumSampleFrequency)
cond	107:20	108:46	9	ctx -> sample_rate > acaps -> MaximumSampleFrequency || ctx -> sample_rate < acaps -> MinimumSampleFrequency
water	107:20	0:0	10	ctx
op	107:23	0:0	10	->
water	107:25	0:0	10	sample_rate
op	107:37	0:0	10	>
water	107:39	0:0	10	acaps
op	107:44	0:0	10	->
water	107:46	0:0	10	MaximumSampleFrequency
op	107:69	0:0	10	||
water	108:20	0:0	10	ctx
op	108:23	0:0	10	->
water	108:25	0:0	10	sample_rate
op	108:37	0:0	10	<
water	108:39	0:0	10	acaps
op	108:44	0:0	10	->
water	108:46	0:0	10	MinimumSampleFrequency
stmts	109:20	109:29	9	
goto	109:20	109:29	10	next
water	109:25	0:0	11	next
water	110:16	0:0	8	fx
op	110:18	0:0	8	->
water	110:20	0:0	8	nSamplesPerSec
op	110:35	0:0	8	=
water	110:37	0:0	8	ctx
op	110:40	0:0	8	->
water	110:42	0:0	8	sample_rate
water	110:53	0:0	8	;
water	111:12	0:0	8	}
if	112:12	117:12	6	(ctx -> sample_size)
cond	112:16	112:21	7	ctx -> sample_size
water	112:16	0:0	8	ctx
op	112:19	0:0	8	->
water	112:21	0:0	8	sample_size
stmts	112:34	117:12	7	
water	112:34	0:0	8	{
if	113:16	115:29	8	(ctx -> sample_size > acaps -> MaximumBitsPerSample || ctx -> sample_size < acaps -> MinimumBitsPerSample)
cond	113:20	114:46	9	ctx -> sample_size > acaps -> MaximumBitsPerSample || ctx -> sample_size < acaps -> MinimumBitsPerSample
water	113:20	0:0	10	ctx
op	113:23	0:0	10	->
water	113:25	0:0	10	sample_size
op	113:37	0:0	10	>
water	113:39	0:0	10	acaps
op	113:44	0:0	10	->
water	113:46	0:0	10	MaximumBitsPerSample
op	113:67	0:0	10	||
water	114:20	0:0	10	ctx
op	114:23	0:0	10	->
water	114:25	0:0	10	sample_size
op	114:37	0:0	10	<
water	114:39	0:0	10	acaps
op	114:44	0:0	10	->
water	114:46	0:0	10	MinimumBitsPerSample
stmts	115:20	115:29	9	
goto	115:20	115:29	10	next
water	115:25	0:0	11	next
water	116:16	0:0	8	fx
op	116:18	0:0	8	->
water	116:20	0:0	8	wBitsPerSample
op	116:35	0:0	8	=
water	116:37	0:0	8	ctx
op	116:40	0:0	8	->
water	116:42	0:0	8	sample_size
water	116:53	0:0	8	;
water	117:12	0:0	8	}
if	118:12	123:12	6	(ctx -> channels)
cond	118:16	118:21	7	ctx -> channels
water	118:16	0:0	8	ctx
op	118:19	0:0	8	->
water	118:21	0:0	8	channels
stmts	118:31	123:12	7	
water	118:31	0:0	8	{
if	119:16	121:29	8	(ctx -> channels > acaps -> MaximumChannels || ctx -> channels < acaps -> MinimumChannels)
cond	119:20	120:43	9	ctx -> channels > acaps -> MaximumChannels || ctx -> channels < acaps -> MinimumChannels
water	119:20	0:0	10	ctx
op	119:23	0:0	10	->
water	119:25	0:0	10	channels
op	119:34	0:0	10	>
water	119:36	0:0	10	acaps
op	119:41	0:0	10	->
water	119:43	0:0	10	MaximumChannels
op	119:59	0:0	10	||
water	120:20	0:0	10	ctx
op	120:23	0:0	10	->
water	120:25	0:0	10	channels
op	120:34	0:0	10	<
water	120:36	0:0	10	acaps
op	120:41	0:0	10	->
water	120:43	0:0	10	MinimumChannels
stmts	121:20	121:29	9	
goto	121:20	121:29	10	next
water	121:25	0:0	11	next
water	122:16	0:0	8	fx
op	122:18	0:0	8	->
water	122:20	0:0	8	nChannels
op	122:30	0:0	8	=
water	122:32	0:0	8	ctx
op	122:35	0:0	8	->
water	122:37	0:0	8	channels
water	122:45	0:0	8	;
water	123:12	0:0	8	}
water	124:8	0:0	6	}
if	125:8	126:21	4	(IAMStreamConfig_SetFormat (config ,type ) != S_OK)
cond	125:12	125:55	5	IAMStreamConfig_SetFormat (config ,type ) != S_OK
call	125:12	125:50	6	IAMStreamConfig_SetFormat
arg	125:38	125:44	7	config
water	125:38	0:0	8	config
arg	125:46	125:50	7	type
water	125:46	0:0	8	type
op	125:52	0:0	6	!=
water	125:55	0:0	6	S_OK
stmts	126:12	126:21	5	
goto	126:12	126:21	6	next
water	126:17	0:0	7	next
water	127:8	0:0	4	format_set
op	127:19	0:0	4	=
water	127:21	0:0	4	1
water	127:22	0:0	4	;
label	128:0	128:4	4	next :
if	129:8	130:41	4	(type -> pbFormat)
cond	129:12	129:18	5	type -> pbFormat
water	129:12	0:0	6	type
op	129:16	0:0	6	->
water	129:18	0:0	6	pbFormat
stmts	130:12	130:41	5	
call	130:12	130:40	6	CoTaskMemFree
arg	130:26	130:40	7	type->pbFormat
water	130:26	0:0	8	type
op	130:30	0:0	8	->
water	130:32	0:0	8	pbFormat
water	130:41	0:0	6	;
call	131:8	131:26	4	CoTaskMemFree
arg	131:22	131:26	5	type
water	131:22	0:0	6	type
water	131:27	0:0	4	;
water	132:4	0:0	4	}
label	133:0	133:3	2	end :
call	134:4	134:34	2	IAMStreamConfig_Release
arg	134:28	134:34	3	config
water	134:28	0:0	4	config
water	134:35	0:0	2	;
call	135:4	135:16	2	av_free
arg	135:12	135:16	3	caps
water	135:12	0:0	4	caps
water	135:17	0:0	2	;
if	136:4	137:33	2	(pformat_set)
cond	136:8	136:8	3	pformat_set
water	136:8	0:0	4	pformat_set
stmts	137:8	137:33	3	
op	137:8	0:0	4	*
water	137:9	0:0	4	pformat_set
op	137:21	0:0	4	=
water	137:23	0:0	4	format_set
water	137:33	0:0	4	;
