func	1:0	31:0	0	int	ff_filter_frame
params	1:19	0:0	1	
param	1:20	1:38	2	AVFilterLink *	link
param	1:40	1:54	2	AVFrame *	frame
stmnts	3:4	30:4	1	
call	3:4	3:39	2	FF_TPRINTF_START
arg	3:21	3:25	3	NULL
water	3:21	0:0	4	NULL
arg	3:27	3:39	3	filter_frame
water	3:27	0:0	4	filter_frame
water	3:40	0:0	2	;
call	3:42	3:68	2	ff_tlog_link
arg	3:55	3:59	3	NULL
water	3:55	0:0	4	NULL
arg	3:61	3:65	3	link
water	3:61	0:0	4	link
arg	3:67	3:68	3	1
water	3:67	0:0	4	1
water	3:69	0:0	2	;
call	3:71	3:88	2	ff_tlog
arg	3:79	3:83	3	NULL
water	3:79	0:0	4	NULL
arg	3:85	3:88	3	" "
water	3:85	0:0	4	" "
water	3:89	0:0	2	;
call	3:91	3:117	2	ff_tlog_ref
arg	3:103	3:107	3	NULL
water	3:103	0:0	4	NULL
arg	3:109	3:114	3	frame
water	3:109	0:0	4	frame
arg	3:116	3:117	3	1
water	3:116	0:0	4	1
water	3:118	0:0	2	;
if	5:4	15:4	2	(link -> type == AVMEDIA_TYPE_VIDEO)
cond	5:8	5:22	3	link -> type == AVMEDIA_TYPE_VIDEO
water	5:8	0:0	4	link
op	5:12	0:0	4	->
water	5:14	0:0	4	type
op	5:19	0:0	4	==
water	5:22	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	5:42	15:4	3	
water	5:42	0:0	4	{
if	6:8	14:8	4	(strcmp (link -> dst -> filter -> name ,"buffersink" ) &&strcmp (link -> dst -> filter -> name ,"format" ) &&strcmp (link -> dst -> filter -> name ,"idet" ) &&strcmp (link -> dst -> filter -> name ,"null" ) &&strcmp (link -> dst -> filter -> name ,"scale" ))
cond	6:12	10:51	5	strcmp (link -> dst -> filter -> name ,"buffersink" ) &&strcmp (link -> dst -> filter -> name ,"format" ) &&strcmp (link -> dst -> filter -> name ,"idet" ) &&strcmp (link -> dst -> filter -> name ,"null" ) &&strcmp (link -> dst -> filter -> name ,"scale" )
call	6:12	6:56	6	strcmp
arg	6:19	6:42	7	link->dst->filter->name
water	6:19	0:0	8	link
op	6:23	0:0	8	->
water	6:25	0:0	8	dst
op	6:28	0:0	8	->
water	6:30	0:0	8	filter
op	6:36	0:0	8	->
water	6:38	0:0	8	name
arg	6:44	6:56	7	"buffersink"
water	6:44	0:0	8	"buffersink"
op	6:58	0:0	6	&&
call	7:12	7:52	6	strcmp
arg	7:19	7:42	7	link->dst->filter->name
water	7:19	0:0	8	link
op	7:23	0:0	8	->
water	7:25	0:0	8	dst
op	7:28	0:0	8	->
water	7:30	0:0	8	filter
op	7:36	0:0	8	->
water	7:38	0:0	8	name
arg	7:44	7:52	7	"format"
water	7:44	0:0	8	"format"
op	7:54	0:0	6	&&
call	8:12	8:50	6	strcmp
arg	8:19	8:42	7	link->dst->filter->name
water	8:19	0:0	8	link
op	8:23	0:0	8	->
water	8:25	0:0	8	dst
op	8:28	0:0	8	->
water	8:30	0:0	8	filter
op	8:36	0:0	8	->
water	8:38	0:0	8	name
arg	8:44	8:50	7	"idet"
water	8:44	0:0	8	"idet"
op	8:52	0:0	6	&&
call	9:12	9:50	6	strcmp
arg	9:19	9:42	7	link->dst->filter->name
water	9:19	0:0	8	link
op	9:23	0:0	8	->
water	9:25	0:0	8	dst
op	9:28	0:0	8	->
water	9:30	0:0	8	filter
op	9:36	0:0	8	->
water	9:38	0:0	8	name
arg	9:44	9:50	7	"null"
water	9:44	0:0	8	"null"
op	9:52	0:0	6	&&
call	10:12	10:51	6	strcmp
arg	10:19	10:42	7	link->dst->filter->name
water	10:19	0:0	8	link
op	10:23	0:0	8	->
water	10:25	0:0	8	dst
op	10:28	0:0	8	->
water	10:30	0:0	8	filter
op	10:36	0:0	8	->
water	10:38	0:0	8	name
arg	10:44	10:51	7	"scale"
water	10:44	0:0	8	"scale"
stmts	10:54	14:8	5	
water	10:54	0:0	6	{
call	11:12	11:68	6	av_assert1
arg	11:23	11:68	7	frame->format==link->format
water	11:23	0:0	8	frame
op	11:28	0:0	8	->
water	11:30	0:0	8	format
op	11:53	0:0	8	==
water	11:56	0:0	8	link
op	11:60	0:0	8	->
water	11:62	0:0	8	format
water	11:69	0:0	6	;
call	12:12	12:60	6	av_assert1
arg	12:23	12:60	7	frame->width==link->w
water	12:23	0:0	8	frame
op	12:28	0:0	8	->
water	12:30	0:0	8	width
op	12:50	0:0	8	==
water	12:53	0:0	8	link
op	12:57	0:0	8	->
water	12:59	0:0	8	w
water	12:61	0:0	6	;
call	13:12	13:61	6	av_assert1
arg	13:23	13:61	7	frame->height==link->h
water	13:23	0:0	8	frame
op	13:28	0:0	8	->
water	13:30	0:0	8	height
op	13:51	0:0	8	==
water	13:54	0:0	8	link
op	13:58	0:0	8	->
water	13:60	0:0	8	h
water	13:62	0:0	6	;
water	14:8	0:0	6	}
water	15:4	0:0	4	}
else	15:6	20:4	2
stmts	15:11	20:4	3	
water	15:11	0:0	4	{
call	16:8	16:63	4	av_assert1
arg	16:19	16:63	5	frame->format==link->format
water	16:19	0:0	6	frame
op	16:24	0:0	6	->
water	16:26	0:0	6	format
op	16:48	0:0	6	==
water	16:51	0:0	6	link
op	16:55	0:0	6	->
water	16:57	0:0	6	format
water	16:64	0:0	4	;
call	17:8	17:65	4	av_assert1
arg	17:19	17:65	5	av_frame_get_channels(frame)==link->channels
call	17:19	17:46	6	av_frame_get_channels
arg	17:41	17:46	7	frame
water	17:41	0:0	8	frame
op	17:48	0:0	6	==
water	17:51	0:0	6	link
op	17:55	0:0	6	->
water	17:57	0:0	6	channels
water	17:66	0:0	4	;
call	18:8	18:71	4	av_assert1
arg	18:19	18:71	5	frame->channel_layout==link->channel_layout
water	18:19	0:0	6	frame
op	18:24	0:0	6	->
water	18:26	0:0	6	channel_layout
op	18:48	0:0	6	==
water	18:51	0:0	6	link
op	18:55	0:0	6	->
water	18:57	0:0	6	channel_layout
water	18:72	0:0	4	;
call	19:8	19:68	4	av_assert1
arg	19:19	19:68	5	frame->sample_rate==link->sample_rate
water	19:19	0:0	6	frame
op	19:24	0:0	6	->
water	19:26	0:0	6	sample_rate
op	19:48	0:0	6	==
water	19:51	0:0	6	link
op	19:55	0:0	6	->
water	19:57	0:0	6	sample_rate
water	19:69	0:0	4	;
water	20:4	0:0	4	}
if	22:4	28:4	2	(link -> type == AVMEDIA_TYPE_AUDIO && link -> min_samples && ( link -> partial_buf || frame -> nb_samples < link -> min_samples || frame -> nb_samples > link -> max_samples ))
cond	22:8	26:46	3	link -> type == AVMEDIA_TYPE_AUDIO && link -> min_samples && ( link -> partial_buf || frame -> nb_samples < link -> min_samples || frame -> nb_samples > link -> max_samples )
water	22:8	0:0	4	link
op	22:12	0:0	4	->
water	22:14	0:0	4	type
op	22:19	0:0	4	==
water	22:22	0:0	4	AVMEDIA_TYPE_AUDIO
op	22:41	0:0	4	&&
water	23:8	0:0	4	link
op	23:12	0:0	4	->
water	23:14	0:0	4	min_samples
op	23:26	0:0	4	&&
water	24:8	0:0	4	(
water	24:9	0:0	4	link
op	24:13	0:0	4	->
water	24:15	0:0	4	partial_buf
op	24:27	0:0	4	||
water	25:9	0:0	4	frame
op	25:14	0:0	4	->
water	25:16	0:0	4	nb_samples
op	25:27	0:0	4	<
water	25:29	0:0	4	link
op	25:33	0:0	4	->
water	25:35	0:0	4	min_samples
op	25:47	0:0	4	||
water	26:9	0:0	4	frame
op	26:14	0:0	4	->
water	26:16	0:0	4	nb_samples
op	26:27	0:0	4	>
water	26:29	0:0	4	link
op	26:33	0:0	4	->
water	26:35	0:0	4	max_samples
water	26:46	0:0	4	)
stmts	26:49	28:4	3	
water	26:49	0:0	4	{
return	27:8	27:57	4	ff_filter_frame_needs_framing(link,frame)
call	27:15	27:56	5	ff_filter_frame_needs_framing
arg	27:45	27:49	6	link
water	27:45	0:0	7	link
arg	27:51	27:56	6	frame
water	27:51	0:0	7	frame
water	28:4	0:0	4	}
else	28:6	30:4	2
stmts	28:11	30:4	3	
water	28:11	0:0	4	{
return	29:8	29:50	4	ff_filter_frame_framed(link,frame)
call	29:15	29:49	5	ff_filter_frame_framed
arg	29:38	29:42	6	link
water	29:38	0:0	7	link
arg	29:44	29:49	6	frame
water	29:44	0:0	7	frame
water	30:4	0:0	4	}
