func	1:0	165:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:13	2	void
stmnts	3:4	164:12	1	
call	3:4	3:44	2	printf
arg	3:11	3:44	3	"Testing av_parse_video_rate()\n"
water	3:11	0:0	4	"Testing av_parse_video_rate()\n"
water	3:45	0:0	2	;
water	4:4	0:0	2	{
decl	5:8	5:13	2	int	i
water	6:8	0:0	2	static
water	6:15	0:0	2	const
water	6:21	0:0	2	char
op	6:26	0:0	2	*
water	6:27	0:0	2	const
water	6:33	0:0	2	rates
op	6:38	0:0	2	[
op	6:39	0:0	2	]
op	6:41	0:0	2	=
water	6:43	0:0	2	{
water	7:12	0:0	2	"-inf"
water	7:18	0:0	2	,
water	8:12	0:0	2	"inf"
water	8:17	0:0	2	,
water	9:12	0:0	2	"nan"
water	9:17	0:0	2	,
water	10:12	0:0	2	"123/0"
water	10:19	0:0	2	,
water	11:12	0:0	2	"-123 / 0"
water	11:22	0:0	2	,
water	12:12	0:0	2	""
water	12:14	0:0	2	,
water	13:12	0:0	2	"/"
water	13:15	0:0	2	,
water	14:12	0:0	2	" 123  /  321"
water	14:26	0:0	2	,
water	15:12	0:0	2	"foo/foo"
water	15:21	0:0	2	,
water	16:12	0:0	2	"foo/1"
water	16:19	0:0	2	,
water	17:12	0:0	2	"1/foo"
water	17:19	0:0	2	,
water	18:12	0:0	2	"0/0"
water	18:17	0:0	2	,
water	19:12	0:0	2	"/0"
water	19:16	0:0	2	,
water	20:12	0:0	2	"1/"
water	20:16	0:0	2	,
water	21:12	0:0	2	"1"
water	21:15	0:0	2	,
water	22:12	0:0	2	"0"
water	22:15	0:0	2	,
water	23:12	0:0	2	"-123/123"
water	23:22	0:0	2	,
water	24:12	0:0	2	"-foo"
water	24:18	0:0	2	,
water	25:12	0:0	2	"123.23"
water	25:20	0:0	2	,
water	26:12	0:0	2	".23"
water	26:17	0:0	2	,
water	27:12	0:0	2	"-.23"
water	27:18	0:0	2	,
water	28:12	0:0	2	"-0.234"
water	28:20	0:0	2	,
water	29:12	0:0	2	"-0.0000001"
water	29:24	0:0	2	,
water	30:12	0:0	2	"  21332.2324   "
water	30:29	0:0	2	,
water	31:12	0:0	2	" -21332.2324   "
water	31:29	0:0	2	,
water	32:8	0:0	2	}
water	32:9	0:0	2	;
for	33:8	39:8	2	(i = 0 ;i <FF_ARRAY_ELEMS (rates );i ++)
forinit	33:13	33:18	3	i = 0 ;
water	33:13	0:0	4	i
op	33:15	0:0	4	=
water	33:17	0:0	4	0
water	33:18	0:0	4	;
cond	33:20	33:44	3	i <FF_ARRAY_ELEMS (rates )
water	33:20	0:0	4	i
op	33:22	0:0	4	<
call	33:24	33:44	4	FF_ARRAY_ELEMS
arg	33:39	33:44	5	rates
water	33:39	0:0	6	rates
forexpr	33:47	33:48	3	i ++
water	33:47	0:0	4	i
op	33:48	0:0	4	++
stmts	33:52	39:8	3	
water	33:52	0:0	4	{
decl	34:12	34:19	4	int	ret
decl	35:12	35:35	4	AVRational	q
op	35:25	0:0	4	=
water	35:27	0:0	4	{
water	35:29	0:0	4	0
water	35:30	0:0	4	,
water	35:32	0:0	4	0
water	35:34	0:0	4	}
water	36:12	0:0	4	ret
op	36:16	0:0	4	=
call	36:18	36:50	4	av_parse_video_rate
arg	36:38	36:40	5	&q
op	36:38	0:0	6	&
water	36:39	0:0	6	q
arg	36:42	36:50	5	rates[i]
water	36:42	0:0	6	rates
op	36:47	0:0	6	[
water	36:48	0:0	6	i
op	36:49	0:0	6	]
water	36:51	0:0	4	;
call	37:12	38:63	4	printf
arg	37:19	37:39	5	"'%s' -> %d/%d %s\n"
water	37:19	0:0	6	"'%s' -> %d/%d %s\n"
arg	38:19	38:27	5	rates[i]
water	38:19	0:0	6	rates
op	38:24	0:0	6	[
water	38:25	0:0	6	i
op	38:26	0:0	6	]
arg	38:29	38:34	5	q.num
water	38:29	0:0	6	q
op	38:30	0:0	6	.
water	38:31	0:0	6	num
arg	38:36	38:41	5	q.den
water	38:36	0:0	6	q
op	38:37	0:0	6	.
water	38:38	0:0	6	den
arg	38:43	38:63	5	ret?"ERROR":"OK"
water	38:43	0:0	6	ret
water	38:47	0:0	6	?
water	38:49	0:0	6	"ERROR"
water	38:57	0:0	6	:
water	38:59	0:0	6	"OK"
water	38:64	0:0	4	;
water	39:8	0:0	4	}
water	40:4	0:0	2	}
call	41:4	41:41	2	printf
arg	41:11	41:41	3	"\nTesting av_parse_color()\n"
water	41:11	0:0	4	"\nTesting av_parse_color()\n"
water	41:42	0:0	2	;
water	42:4	0:0	2	{
decl	43:8	43:13	2	int	i
decl	44:8	44:23	2	uint8_t	rgba[4]
water	45:8	0:0	2	static
water	45:15	0:0	2	const
water	45:21	0:0	2	char
op	45:26	0:0	2	*
water	45:27	0:0	2	const
water	45:33	0:0	2	color_names
op	45:44	0:0	2	[
op	45:45	0:0	2	]
op	45:47	0:0	2	=
water	45:49	0:0	2	{
water	46:12	0:0	2	"bikeshed"
water	46:22	0:0	2	,
water	47:12	0:0	2	"RaNdOm"
water	47:20	0:0	2	,
water	48:12	0:0	2	"foo"
water	48:17	0:0	2	,
water	49:12	0:0	2	"red"
water	49:17	0:0	2	,
water	50:12	0:0	2	"Red "
water	50:18	0:0	2	,
water	51:12	0:0	2	"RED"
water	51:17	0:0	2	,
water	52:12	0:0	2	"Violet"
water	52:20	0:0	2	,
water	53:12	0:0	2	"Yellow"
water	53:20	0:0	2	,
water	54:12	0:0	2	"Red"
water	54:17	0:0	2	,
water	55:12	0:0	2	"0x000000"
water	55:22	0:0	2	,
water	56:12	0:0	2	"0x0000000"
water	56:23	0:0	2	,
water	57:12	0:0	2	"0xff000000"
water	57:24	0:0	2	,
water	58:12	0:0	2	"0x3e34ff"
water	58:22	0:0	2	,
water	59:12	0:0	2	"0x3e34ffaa"
water	59:24	0:0	2	,
water	60:12	0:0	2	"0xffXXee"
water	60:22	0:0	2	,
water	61:12	0:0	2	"0xfoobar"
water	61:22	0:0	2	,
water	62:12	0:0	2	"0xffffeeeeeeee"
water	62:28	0:0	2	,
water	63:12	0:0	2	"#ff0000"
water	63:21	0:0	2	,
water	64:12	0:0	2	"#ffXX00"
water	64:21	0:0	2	,
water	65:12	0:0	2	"ff0000"
water	65:20	0:0	2	,
water	66:12	0:0	2	"ffXX00"
water	66:20	0:0	2	,
water	67:12	0:0	2	"red@foo"
water	67:21	0:0	2	,
water	68:12	0:0	2	"random@10"
water	68:23	0:0	2	,
water	69:12	0:0	2	"0xff0000@1.0"
water	69:26	0:0	2	,
water	70:12	0:0	2	"red@"
water	70:18	0:0	2	,
water	71:12	0:0	2	"red@0xfff"
water	71:23	0:0	2	,
water	72:12	0:0	2	"red@0xf"
water	72:21	0:0	2	,
water	73:12	0:0	2	"red@2"
water	73:19	0:0	2	,
water	74:12	0:0	2	"red@0.1"
water	74:21	0:0	2	,
water	75:12	0:0	2	"red@-1"
water	75:20	0:0	2	,
water	76:12	0:0	2	"red@0.5"
water	76:21	0:0	2	,
water	77:12	0:0	2	"red@1.0"
water	77:21	0:0	2	,
water	78:12	0:0	2	"red@256"
water	78:21	0:0	2	,
water	79:12	0:0	2	"red@10foo"
water	79:23	0:0	2	,
water	80:12	0:0	2	"red@-1.0"
water	80:22	0:0	2	,
water	81:12	0:0	2	"red@-0.0"
water	81:22	0:0	2	,
water	82:8	0:0	2	}
water	82:9	0:0	2	;
call	83:8	83:37	2	av_log_set_level
arg	83:25	83:37	3	AV_LOG_DEBUG
water	83:25	0:0	4	AV_LOG_DEBUG
water	83:38	0:0	2	;
for	84:8	90:8	2	(i = 0 ;i <FF_ARRAY_ELEMS (color_names );i ++)
forinit	84:13	84:18	3	i = 0 ;
water	84:13	0:0	4	i
op	84:15	0:0	4	=
water	84:17	0:0	4	0
water	84:18	0:0	4	;
cond	84:21	84:51	3	i <FF_ARRAY_ELEMS (color_names )
water	84:21	0:0	4	i
op	84:23	0:0	4	<
call	84:25	84:51	4	FF_ARRAY_ELEMS
arg	84:40	84:51	5	color_names
water	84:40	0:0	6	color_names
forexpr	84:54	84:55	3	i ++
water	84:54	0:0	4	i
op	84:55	0:0	4	++
stmts	84:59	90:8	3	
water	84:59	0:0	4	{
if	85:12	87:74	4	(av_parse_color (rgba ,color_names [ i ] ,- 1 ,NULL ) >= 0)
cond	85:16	85:66	5	av_parse_color (rgba ,color_names [ i ] ,- 1 ,NULL ) >= 0
call	85:16	85:61	6	av_parse_color
arg	85:31	85:35	7	rgba
water	85:31	0:0	8	rgba
arg	85:37	85:51	7	color_names[i]
water	85:37	0:0	8	color_names
op	85:48	0:0	8	[
water	85:49	0:0	8	i
op	85:50	0:0	8	]
arg	85:53	85:55	7	-1
op	85:53	0:0	8	-
water	85:54	0:0	8	1
arg	85:57	85:61	7	NULL
water	85:57	0:0	8	NULL
op	85:63	0:0	6	>=
water	85:66	0:0	6	0
stmts	86:16	87:74	5	
call	86:16	87:73	6	printf
arg	86:23	86:56	7	"%s -> R(%d) G(%d) B(%d) A(%d)\n"
water	86:23	0:0	8	"%s -> R(%d) G(%d) B(%d) A(%d)\n"
arg	87:23	87:37	7	color_names[i]
water	87:23	0:0	8	color_names
op	87:34	0:0	8	[
water	87:35	0:0	8	i
op	87:36	0:0	8	]
arg	87:39	87:46	7	rgba[0]
water	87:39	0:0	8	rgba
op	87:43	0:0	8	[
water	87:44	0:0	8	0
op	87:45	0:0	8	]
arg	87:48	87:55	7	rgba[1]
water	87:48	0:0	8	rgba
op	87:52	0:0	8	[
water	87:53	0:0	8	1
op	87:54	0:0	8	]
arg	87:57	87:64	7	rgba[2]
water	87:57	0:0	8	rgba
op	87:61	0:0	8	[
water	87:62	0:0	8	2
op	87:63	0:0	8	]
arg	87:66	87:73	7	rgba[3]
water	87:66	0:0	8	rgba
op	87:70	0:0	8	[
water	87:71	0:0	8	3
op	87:72	0:0	8	]
water	87:74	0:0	6	;
else	88:12	89:55	4
stmts	89:16	89:55	5	
call	89:16	89:54	6	printf
arg	89:23	89:38	7	"%s -> error\n"
water	89:23	0:0	8	"%s -> error\n"
arg	89:40	89:54	7	color_names[i]
water	89:40	0:0	8	color_names
op	89:51	0:0	8	[
water	89:52	0:0	8	i
op	89:53	0:0	8	]
water	89:55	0:0	6	;
water	90:8	0:0	4	}
water	91:4	0:0	2	}
call	92:4	92:44	2	printf
arg	92:11	92:44	3	"\nTesting av_small_strptime()\n"
water	92:11	0:0	4	"\nTesting av_small_strptime()\n"
water	92:45	0:0	2	;
water	93:4	0:0	2	{
decl	94:8	94:13	2	int	i
decl	95:8	95:28	2	struct tm	tm
op	95:21	0:0	2	=
water	95:23	0:0	2	{
water	95:25	0:0	2	0
water	95:27	0:0	2	}
struct	96:8	98:8	2	fmt_timespec_entry
decl	97:12	97:38	3	const char	*fmt
water	97:27	0:0	3	,
decl	97:12	97:38	3	const char	*timespec
decl	96:8	103:9	2	fmt_timespec_entry	fmt_timespec_entries[]
op	98:33	0:0	2	=
water	98:35	0:0	2	{
water	99:12	0:0	2	{
water	99:14	0:0	2	"%Y-%m-%d"
water	99:24	0:0	2	,
water	99:45	0:0	2	"2012-12-21"
water	99:58	0:0	2	}
water	99:59	0:0	2	,
water	100:12	0:0	2	{
water	100:14	0:0	2	"%Y - %m - %d"
water	100:28	0:0	2	,
water	100:45	0:0	2	"2012-12-21"
water	100:58	0:0	2	}
water	100:59	0:0	2	,
water	101:12	0:0	2	{
water	101:14	0:0	2	"%Y-%m-%d %H:%M:%S"
water	101:33	0:0	2	,
water	101:45	0:0	2	"2012-12-21 20:12:21"
water	101:67	0:0	2	}
water	101:68	0:0	2	,
water	102:12	0:0	2	{
water	102:14	0:0	2	"  %Y - %m - %d %H : %M : %S"
water	102:43	0:0	2	,
water	102:45	0:0	2	"   2012 - 12 -  21   20 : 12 : 21"
water	102:81	0:0	2	}
water	102:82	0:0	2	,
water	103:8	0:0	2	}
call	104:8	104:37	2	av_log_set_level
arg	104:25	104:37	3	AV_LOG_DEBUG
water	104:25	0:0	4	AV_LOG_DEBUG
water	104:38	0:0	2	;
for	105:8	117:8	2	(i = 0 ;i <FF_ARRAY_ELEMS (fmt_timespec_entries );i ++)
forinit	105:13	105:18	3	i = 0 ;
water	105:13	0:0	4	i
op	105:15	0:0	4	=
water	105:17	0:0	4	0
water	105:18	0:0	4	;
cond	105:21	105:60	3	i <FF_ARRAY_ELEMS (fmt_timespec_entries )
water	105:21	0:0	4	i
op	105:23	0:0	4	<
call	105:25	105:60	4	FF_ARRAY_ELEMS
arg	105:40	105:60	5	fmt_timespec_entries
water	105:40	0:0	6	fmt_timespec_entries
forexpr	105:63	105:64	3	i ++
water	105:63	0:0	4	i
op	105:64	0:0	4	++
stmts	105:68	117:8	3	
water	105:68	0:0	4	{
decl	106:12	106:19	4	char	*p
decl	107:12	107:67	4	struct fmt_timespec_entry	*e
op	107:41	0:0	4	=
op	107:43	0:0	4	&
water	107:44	0:0	4	fmt_timespec_entries
op	107:64	0:0	4	[
water	107:65	0:0	4	i
op	107:66	0:0	4	]
call	108:12	108:64	4	printf
arg	108:19	108:43	5	"fmt:'%s' spec:'%s' -> "
water	108:19	0:0	6	"fmt:'%s' spec:'%s' -> "
arg	108:45	108:51	5	e->fmt
water	108:45	0:0	6	e
op	108:46	0:0	6	->
water	108:48	0:0	6	fmt
arg	108:53	108:64	5	e->timespec
water	108:53	0:0	6	e
op	108:54	0:0	6	->
water	108:56	0:0	6	timespec
water	108:65	0:0	4	;
water	109:12	0:0	4	p
op	109:14	0:0	4	=
call	109:16	109:58	4	av_small_strptime
arg	109:34	109:45	5	e->timespec
water	109:34	0:0	6	e
op	109:35	0:0	6	->
water	109:37	0:0	6	timespec
arg	109:47	109:53	5	e->fmt
water	109:47	0:0	6	e
op	109:48	0:0	6	->
water	109:50	0:0	6	fmt
arg	109:55	109:58	5	&tm
op	109:55	0:0	6	&
water	109:56	0:0	6	tm
water	109:59	0:0	4	;
if	110:12	114:12	4	(p)
cond	110:16	110:16	5	p
water	110:16	0:0	6	p
stmts	110:19	114:12	5	
water	110:19	0:0	6	{
call	111:16	113:55	6	printf
arg	111:23	111:55	7	"%04d-%02d-%2d %02d:%02d:%02d\n"
water	111:23	0:0	8	"%04d-%02d-%2d %02d:%02d:%02d\n"
arg	112:23	112:38	7	1900+tm.tm_year
water	112:23	0:0	8	1900
op	112:27	0:0	8	+
water	112:28	0:0	8	tm
op	112:30	0:0	8	.
water	112:31	0:0	8	tm_year
arg	112:40	112:51	7	tm.tm_mon+1
water	112:40	0:0	8	tm
op	112:42	0:0	8	.
water	112:43	0:0	8	tm_mon
op	112:49	0:0	8	+
water	112:50	0:0	8	1
arg	112:53	112:63	7	tm.tm_mday
water	112:53	0:0	8	tm
op	112:55	0:0	8	.
water	112:56	0:0	8	tm_mday
arg	113:23	113:33	7	tm.tm_hour
water	113:23	0:0	8	tm
op	113:25	0:0	8	.
water	113:26	0:0	8	tm_hour
arg	113:35	113:44	7	tm.tm_min
water	113:35	0:0	8	tm
op	113:37	0:0	8	.
water	113:38	0:0	8	tm_min
arg	113:46	113:55	7	tm.tm_sec
water	113:46	0:0	8	tm
op	113:48	0:0	8	.
water	113:49	0:0	8	tm_sec
water	113:56	0:0	6	;
water	114:12	0:0	6	}
else	114:14	116:12	4
stmts	114:19	116:12	5	
water	114:19	0:0	6	{
call	115:16	115:32	6	printf
arg	115:23	115:32	7	"error\n"
water	115:23	0:0	8	"error\n"
water	115:33	0:0	6	;
water	116:12	0:0	6	}
water	117:8	0:0	4	}
water	118:4	0:0	2	}
call	119:4	119:40	2	printf
arg	119:11	119:40	3	"\nTesting av_parse_time()\n"
water	119:11	0:0	4	"\nTesting av_parse_time()\n"
water	119:41	0:0	2	;
water	120:4	0:0	2	{
decl	121:8	121:13	2	int	i
decl	122:8	122:18	2	int64_t	tv
decl	123:8	123:18	2	time_t	tvi
decl	124:8	124:21	2	struct tm	*tm
water	125:8	0:0	2	static
water	125:15	0:0	2	char
water	125:20	0:0	2	tzstr
op	125:25	0:0	2	[
op	125:26	0:0	2	]
op	125:28	0:0	2	=
water	125:30	0:0	2	"TZ=CET-1"
water	125:40	0:0	2	;
water	126:8	0:0	2	static
water	126:15	0:0	2	const
water	126:21	0:0	2	char
op	126:26	0:0	2	*
water	126:28	0:0	2	const
water	126:34	0:0	2	time_string
op	126:45	0:0	2	[
op	126:46	0:0	2	]
op	126:48	0:0	2	=
water	126:50	0:0	2	{
water	127:12	0:0	2	"now"
water	127:17	0:0	2	,
water	128:12	0:0	2	"12:35:46"
water	128:22	0:0	2	,
water	129:12	0:0	2	"2000-12-20 0:02:47.5z"
water	129:35	0:0	2	,
water	130:12	0:0	2	"2000-12-20T010247.6"
water	130:33	0:0	2	,
water	131:8	0:0	2	}
water	131:9	0:0	2	;
water	132:8	0:0	2	static
water	132:15	0:0	2	const
water	132:21	0:0	2	char
op	132:26	0:0	2	*
water	132:28	0:0	2	const
water	132:34	0:0	2	duration_string
op	132:49	0:0	2	[
op	132:50	0:0	2	]
op	132:52	0:0	2	=
water	132:54	0:0	2	{
water	133:12	0:0	2	"2:34:56.79"
water	133:24	0:0	2	,
water	134:12	0:0	2	"-1:23:45.67"
water	134:25	0:0	2	,
water	135:12	0:0	2	"42.1729"
water	135:21	0:0	2	,
water	136:12	0:0	2	"-1729.42"
water	136:22	0:0	2	,
water	137:12	0:0	2	"12:34"
water	137:19	0:0	2	,
water	138:8	0:0	2	}
water	138:9	0:0	2	;
call	139:8	139:37	2	av_log_set_level
arg	139:25	139:37	3	AV_LOG_DEBUG
water	139:25	0:0	4	AV_LOG_DEBUG
water	139:38	0:0	2	;
call	140:8	140:20	2	putenv
arg	140:15	140:20	3	tzstr
water	140:15	0:0	4	tzstr
water	140:21	0:0	2	;
call	141:8	141:74	2	printf
arg	141:15	141:74	3	"(now is 2012-03-17 09:14:13 +0100, local time is UTC+1)\n"
water	141:15	0:0	4	"(now is 2012-03-17 09:14:13 +0100, local time is UTC+1)\n"
water	141:75	0:0	2	;
for	142:8	154:8	2	(i = 0 ;i <FF_ARRAY_ELEMS (time_string );i ++)
forinit	142:13	142:18	3	i = 0 ;
water	142:13	0:0	4	i
op	142:15	0:0	4	=
water	142:17	0:0	4	0
water	142:18	0:0	4	;
cond	142:21	142:51	3	i <FF_ARRAY_ELEMS (time_string )
water	142:21	0:0	4	i
op	142:23	0:0	4	<
call	142:25	142:51	4	FF_ARRAY_ELEMS
arg	142:40	142:51	5	time_string
water	142:40	0:0	6	time_string
forexpr	142:54	142:55	3	i ++
water	142:54	0:0	4	i
op	142:55	0:0	4	++
stmts	142:59	154:8	3	
water	142:59	0:0	4	{
call	143:12	143:46	4	printf
arg	143:19	143:30	5	"%-24s -> "
water	143:19	0:0	6	"%-24s -> "
arg	143:32	143:46	5	time_string[i]
water	143:32	0:0	6	time_string
op	143:43	0:0	6	[
water	143:44	0:0	6	i
op	143:45	0:0	6	]
water	143:47	0:0	4	;
if	144:12	146:12	4	(av_parse_time (& tv ,time_string [ i ] ,0 ))
cond	144:16	144:52	5	av_parse_time (& tv ,time_string [ i ] ,0 )
call	144:16	144:52	6	av_parse_time
arg	144:30	144:33	7	&tv
op	144:30	0:0	8	&
water	144:31	0:0	8	tv
arg	144:35	144:49	7	time_string[i]
water	144:35	0:0	8	time_string
op	144:46	0:0	8	[
water	144:47	0:0	8	i
op	144:48	0:0	8	]
arg	144:51	144:52	7	0
water	144:51	0:0	8	0
stmts	144:55	146:12	5	
water	144:55	0:0	6	{
call	145:16	145:32	6	printf
arg	145:23	145:32	7	"error\n"
water	145:23	0:0	8	"error\n"
water	145:33	0:0	6	;
water	146:12	0:0	6	}
else	146:14	153:12	4
stmts	146:19	153:12	5	
water	146:19	0:0	6	{
water	147:16	0:0	6	tvi
op	147:20	0:0	6	=
water	147:22	0:0	6	tv
op	147:25	0:0	6	/
water	147:27	0:0	6	1000000
water	147:34	0:0	6	;
water	148:16	0:0	6	tm
op	148:19	0:0	6	=
call	148:21	148:32	6	gmtime
arg	148:28	148:32	7	&tvi
op	148:28	0:0	8	&
water	148:29	0:0	8	tvi
water	148:33	0:0	6	;
call	149:16	152:58	6	printf
arg	149:23	149:76	7	"%14"PRIi64".%06d = %04d-%02d-%02dT%02d:%02d:%02dZ\n"
water	149:23	0:0	8	"%14"
water	149:28	0:0	8	PRIi64
water	149:34	0:0	8	".%06d = %04d-%02d-%02dT%02d:%02d:%02dZ\n"
arg	150:23	150:35	7	tv/1000000
water	150:23	0:0	8	tv
op	150:26	0:0	8	/
water	150:28	0:0	8	1000000
arg	150:37	150:56	7	(int)(tv%1000000)
call	150:37	150:55	8	(int)
arg	150:43	150:55	9	tv%1000000
water	150:43	0:0	10	tv
op	150:46	0:0	10	%
water	150:48	0:0	10	1000000
arg	151:23	151:41	7	tm->tm_year+1900
water	151:23	0:0	8	tm
op	151:25	0:0	8	->
water	151:27	0:0	8	tm_year
op	151:35	0:0	8	+
water	151:37	0:0	8	1900
arg	151:43	151:57	7	tm->tm_mon+1
water	151:43	0:0	8	tm
op	151:45	0:0	8	->
water	151:47	0:0	8	tm_mon
op	151:54	0:0	8	+
water	151:56	0:0	8	1
arg	151:59	151:70	7	tm->tm_mday
water	151:59	0:0	8	tm
op	151:61	0:0	8	->
water	151:63	0:0	8	tm_mday
arg	152:23	152:34	7	tm->tm_hour
water	152:23	0:0	8	tm
op	152:25	0:0	8	->
water	152:27	0:0	8	tm_hour
arg	152:36	152:46	7	tm->tm_min
water	152:36	0:0	8	tm
op	152:38	0:0	8	->
water	152:40	0:0	8	tm_min
arg	152:48	152:58	7	tm->tm_sec
water	152:48	0:0	8	tm
op	152:50	0:0	8	->
water	152:52	0:0	8	tm_sec
water	152:59	0:0	6	;
water	153:12	0:0	6	}
water	154:8	0:0	4	}
for	155:8	162:8	2	(i = 0 ;i <FF_ARRAY_ELEMS (duration_string );i ++)
forinit	155:13	155:18	3	i = 0 ;
water	155:13	0:0	4	i
op	155:15	0:0	4	=
water	155:17	0:0	4	0
water	155:18	0:0	4	;
cond	155:21	155:55	3	i <FF_ARRAY_ELEMS (duration_string )
water	155:21	0:0	4	i
op	155:23	0:0	4	<
call	155:25	155:55	4	FF_ARRAY_ELEMS
arg	155:40	155:55	5	duration_string
water	155:40	0:0	6	duration_string
forexpr	155:58	155:59	3	i ++
water	155:58	0:0	4	i
op	155:59	0:0	4	++
stmts	155:63	162:8	3	
water	155:63	0:0	4	{
call	156:12	156:50	4	printf
arg	156:19	156:30	5	"%-24s -> "
water	156:19	0:0	6	"%-24s -> "
arg	156:32	156:50	5	duration_string[i]
water	156:32	0:0	6	duration_string
op	156:47	0:0	6	[
water	156:48	0:0	6	i
op	156:49	0:0	6	]
water	156:51	0:0	4	;
if	157:12	159:12	4	(av_parse_time (& tv ,duration_string [ i ] ,1 ))
cond	157:16	157:56	5	av_parse_time (& tv ,duration_string [ i ] ,1 )
call	157:16	157:56	6	av_parse_time
arg	157:30	157:33	7	&tv
op	157:30	0:0	8	&
water	157:31	0:0	8	tv
arg	157:35	157:53	7	duration_string[i]
water	157:35	0:0	8	duration_string
op	157:50	0:0	8	[
water	157:51	0:0	8	i
op	157:52	0:0	8	]
arg	157:55	157:56	7	1
water	157:55	0:0	8	1
stmts	157:59	159:12	5	
water	157:59	0:0	6	{
call	158:16	158:32	6	printf
arg	158:23	158:32	7	"error\n"
water	158:23	0:0	8	"error\n"
water	158:33	0:0	6	;
water	159:12	0:0	6	}
else	159:14	161:12	4
stmts	159:19	161:12	5	
water	159:19	0:0	6	{
call	160:16	160:43	6	printf
arg	160:23	160:39	7	"%+21"PRIi64"\n"
water	160:23	0:0	8	"%+21"
water	160:29	0:0	8	PRIi64
water	160:35	0:0	8	"\n"
arg	160:41	160:43	7	tv
water	160:41	0:0	8	tv
water	160:44	0:0	6	;
water	161:12	0:0	6	}
water	162:8	0:0	4	}
water	163:4	0:0	2	}
return	164:4	164:12	2	0
water	164:11	0:0	3	0
