func	1:0	61:0	0	static int	mxf_decrypt_triplet
params	1:30	0:0	1	
param	1:31	1:49	2	AVFormatContext *	s
param	1:51	1:64	2	AVPacket *	pkt
param	1:66	1:80	2	KLVPacket *	klv
stmnts	3:4	60:12	1	
water	3:4	0:0	2	static
water	3:11	0:0	2	const
water	3:17	0:0	2	uint8_t
water	3:25	0:0	2	checkv
op	3:31	0:0	2	[
water	3:32	0:0	2	16
op	3:34	0:0	2	]
op	3:36	0:0	2	=
water	3:38	0:0	2	{
water	3:39	0:0	2	0
water	3:40	0:0	2	x43
water	3:43	0:0	2	,
water	3:45	0:0	2	0
water	3:46	0:0	2	x48
water	3:49	0:0	2	,
water	3:51	0:0	2	0
water	3:52	0:0	2	x55
water	3:55	0:0	2	,
water	3:57	0:0	2	0
water	3:58	0:0	2	x4b
water	3:61	0:0	2	,
water	3:63	0:0	2	0
water	3:64	0:0	2	x43
water	3:67	0:0	2	,
water	3:69	0:0	2	0
water	3:70	0:0	2	x48
water	3:73	0:0	2	,
water	3:75	0:0	2	0
water	3:76	0:0	2	x55
water	3:79	0:0	2	,
water	3:81	0:0	2	0
water	3:82	0:0	2	x4b
water	3:85	0:0	2	,
water	3:87	0:0	2	0
water	3:88	0:0	2	x43
water	3:91	0:0	2	,
water	3:93	0:0	2	0
water	3:94	0:0	2	x48
water	3:97	0:0	2	,
water	3:99	0:0	2	0
water	3:100	0:0	2	x55
water	3:103	0:0	2	,
water	3:105	0:0	2	0
water	3:106	0:0	2	x4b
water	3:109	0:0	2	,
water	3:111	0:0	2	0
water	3:112	0:0	2	x43
water	3:115	0:0	2	,
water	3:117	0:0	2	0
water	3:118	0:0	2	x48
water	3:121	0:0	2	,
water	3:123	0:0	2	0
water	3:124	0:0	2	x55
water	3:127	0:0	2	,
water	3:129	0:0	2	0
water	3:130	0:0	2	x4b
water	3:133	0:0	2	}
water	3:134	0:0	2	;
decl	4:4	4:34	2	MXFContext	*mxf
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	priv_data
decl	5:4	5:27	2	AVIOContext	*pb
op	5:20	0:0	2	=
water	5:22	0:0	2	s
op	5:23	0:0	2	->
water	5:25	0:0	2	pb
decl	6:4	6:45	2	int64_t	end
op	6:16	0:0	2	=
call	6:18	6:30	3	avio_tell
arg	6:28	6:30	4	pb
water	6:28	0:0	5	pb
op	6:32	0:0	2	+
water	6:34	0:0	2	klv
op	6:37	0:0	2	->
water	6:39	0:0	2	length
decl	7:4	7:16	2	int64_t	size
decl	8:4	8:22	2	uint64_t	orig_size
decl	9:4	9:27	2	uint64_t	plaintext_size
decl	10:4	10:20	2	uint8_t	ivec[16]
decl	11:4	11:22	2	uint8_t	tmpbuf[16]
decl	12:4	12:13	2	int	index
if	13:4	18:4	2	(! mxf -> aesc && s -> key && s -> keylen == 16)
cond	13:8	13:45	3	! mxf -> aesc && s -> key && s -> keylen == 16
op	13:8	0:0	4	!
water	13:9	0:0	4	mxf
op	13:12	0:0	4	->
water	13:14	0:0	4	aesc
op	13:19	0:0	4	&&
water	13:22	0:0	4	s
op	13:23	0:0	4	->
water	13:25	0:0	4	key
op	13:29	0:0	4	&&
water	13:32	0:0	4	s
op	13:33	0:0	4	->
water	13:35	0:0	4	keylen
op	13:42	0:0	4	==
water	13:45	0:0	4	16
stmts	13:49	18:4	3	
water	13:49	0:0	4	{
water	14:8	0:0	4	mxf
op	14:11	0:0	4	->
water	14:13	0:0	4	aesc
op	14:18	0:0	4	=
call	14:20	14:33	4	av_aes_alloc
water	14:34	0:0	4	;
if	15:8	16:34	4	(! mxf -> aesc)
cond	15:12	15:18	5	! mxf -> aesc
op	15:12	0:0	6	!
water	15:13	0:0	6	mxf
op	15:16	0:0	6	->
water	15:18	0:0	6	aesc
stmts	16:12	16:34	5	
return	16:12	16:34	6	AVERROR(ENOMEM)
call	16:19	16:33	7	AVERROR
arg	16:27	16:33	8	ENOMEM
water	16:27	0:0	9	ENOMEM
call	17:8	17:45	4	av_aes_init
arg	17:20	17:29	5	mxf->aesc
water	17:20	0:0	6	mxf
op	17:23	0:0	6	->
water	17:25	0:0	6	aesc
arg	17:31	17:37	5	s->key
water	17:31	0:0	6	s
op	17:32	0:0	6	->
water	17:34	0:0	6	key
arg	17:39	17:42	5	128
water	17:39	0:0	6	128
arg	17:44	17:45	5	1
water	17:44	0:0	6	1
water	17:46	0:0	4	;
water	18:4	0:0	4	}
call	20:4	20:43	2	avio_skip
arg	20:14	20:16	3	pb
water	20:14	0:0	4	pb
arg	20:18	20:43	3	klv_decode_ber_length(pb)
call	20:18	20:42	4	klv_decode_ber_length
arg	20:40	20:42	5	pb
water	20:40	0:0	6	pb
water	20:44	0:0	2	;
call	22:4	22:28	2	klv_decode_ber_length
arg	22:26	22:28	3	pb
water	22:26	0:0	4	pb
water	22:29	0:0	2	;
water	23:4	0:0	2	plaintext_size
op	23:19	0:0	2	=
call	23:21	23:33	2	avio_rb64
arg	23:31	23:33	3	pb
water	23:31	0:0	4	pb
water	23:34	0:0	2	;
call	25:4	25:28	2	klv_decode_ber_length
arg	25:26	25:28	3	pb
water	25:26	0:0	4	pb
water	25:29	0:0	2	;
call	26:4	26:30	2	avio_read
arg	26:14	26:16	3	pb
water	26:14	0:0	4	pb
arg	26:18	26:26	3	klv->key
water	26:18	0:0	4	klv
op	26:21	0:0	4	->
water	26:23	0:0	4	key
arg	26:28	26:30	3	16
water	26:28	0:0	4	16
water	26:31	0:0	2	;
if	27:4	28:34	2	(!IS_KLV_KEY (klv ,mxf_essence_element_key ))
cond	27:8	27:48	3	!IS_KLV_KEY (klv ,mxf_essence_element_key )
op	27:8	0:0	4	!
call	27:9	27:48	4	IS_KLV_KEY
arg	27:20	27:23	5	klv
water	27:20	0:0	6	klv
arg	27:25	27:48	5	mxf_essence_element_key
water	27:25	0:0	6	mxf_essence_element_key
stmts	28:8	28:34	3	
return	28:8	28:34	4	AVERROR_INVALIDDATA
water	28:15	0:0	5	AVERROR_INVALIDDATA
water	29:4	0:0	2	index
op	29:10	0:0	2	=
call	29:12	29:39	2	mxf_get_stream_index
arg	29:33	29:34	3	s
water	29:33	0:0	4	s
arg	29:36	29:39	3	klv
water	29:36	0:0	4	klv
water	29:40	0:0	2	;
if	30:4	31:34	2	(index < 0)
cond	30:8	30:16	3	index < 0
water	30:8	0:0	4	index
op	30:14	0:0	4	<
water	30:16	0:0	4	0
stmts	31:8	31:34	3	
return	31:8	31:34	4	AVERROR_INVALIDDATA
water	31:15	0:0	5	AVERROR_INVALIDDATA
call	33:4	33:28	2	klv_decode_ber_length
arg	33:26	33:28	3	pb
water	33:26	0:0	4	pb
water	33:29	0:0	2	;
water	34:4	0:0	2	orig_size
op	34:14	0:0	2	=
call	34:16	34:28	2	avio_rb64
arg	34:26	34:28	3	pb
water	34:26	0:0	4	pb
water	34:29	0:0	2	;
if	35:4	36:34	2	(orig_size < plaintext_size)
cond	35:8	35:20	3	orig_size < plaintext_size
water	35:8	0:0	4	orig_size
op	35:18	0:0	4	<
water	35:20	0:0	4	plaintext_size
stmts	36:8	36:34	3	
return	36:8	36:34	4	AVERROR_INVALIDDATA
water	36:15	0:0	5	AVERROR_INVALIDDATA
water	38:4	0:0	2	size
op	38:9	0:0	2	=
call	38:11	38:35	2	klv_decode_ber_length
arg	38:33	38:35	3	pb
water	38:33	0:0	4	pb
water	38:36	0:0	2	;
if	39:4	40:34	2	(size < 32 || size - 32 < orig_size)
cond	39:8	39:33	3	size < 32 || size - 32 < orig_size
water	39:8	0:0	4	size
op	39:13	0:0	4	<
water	39:15	0:0	4	32
op	39:18	0:0	4	||
water	39:21	0:0	4	size
op	39:26	0:0	4	-
water	39:28	0:0	4	32
op	39:31	0:0	4	<
water	39:33	0:0	4	orig_size
stmts	40:8	40:34	3	
return	40:8	40:34	4	AVERROR_INVALIDDATA
water	40:15	0:0	5	AVERROR_INVALIDDATA
call	41:4	41:26	2	avio_read
arg	41:14	41:16	3	pb
water	41:14	0:0	4	pb
arg	41:18	41:22	3	ivec
water	41:18	0:0	4	ivec
arg	41:24	41:26	3	16
water	41:24	0:0	4	16
water	41:27	0:0	2	;
call	42:4	42:28	2	avio_read
arg	42:14	42:16	3	pb
water	42:14	0:0	4	pb
arg	42:18	42:24	3	tmpbuf
water	42:18	0:0	4	tmpbuf
arg	42:26	42:28	3	16
water	42:26	0:0	4	16
water	42:29	0:0	2	;
if	43:4	44:59	2	(mxf -> aesc)
cond	43:8	43:13	3	mxf -> aesc
water	43:8	0:0	4	mxf
op	43:11	0:0	4	->
water	43:13	0:0	4	aesc
stmts	44:8	44:59	3	
call	44:8	44:58	4	av_aes_crypt
arg	44:21	44:30	5	mxf->aesc
water	44:21	0:0	6	mxf
op	44:24	0:0	6	->
water	44:26	0:0	6	aesc
arg	44:32	44:38	5	tmpbuf
water	44:32	0:0	6	tmpbuf
arg	44:40	44:46	5	tmpbuf
water	44:40	0:0	6	tmpbuf
arg	44:48	44:49	5	1
water	44:48	0:0	6	1
arg	44:51	44:55	5	ivec
water	44:51	0:0	6	ivec
arg	44:57	44:58	5	1
water	44:57	0:0	6	1
water	44:59	0:0	4	;
if	45:4	46:70	2	(memcmp (tmpbuf ,checkv ,16 ))
cond	45:8	45:33	3	memcmp (tmpbuf ,checkv ,16 )
call	45:8	45:33	4	memcmp
arg	45:15	45:21	5	tmpbuf
water	45:15	0:0	6	tmpbuf
arg	45:23	45:29	5	checkv
water	45:23	0:0	6	checkv
arg	45:31	45:33	5	16
water	45:31	0:0	6	16
stmts	46:8	46:70	3	
call	46:8	46:69	4	av_log
arg	46:15	46:16	5	s
water	46:15	0:0	6	s
arg	46:18	46:30	5	AV_LOG_ERROR
water	46:18	0:0	6	AV_LOG_ERROR
arg	46:32	46:69	5	"probably incorrect decryption key\n"
water	46:32	0:0	6	"probably incorrect decryption key\n"
water	46:70	0:0	4	;
water	47:4	0:0	2	size
op	47:9	0:0	2	-=
water	47:12	0:0	2	32
water	47:14	0:0	2	;
water	48:4	0:0	2	size
op	48:9	0:0	2	=
call	48:11	48:38	2	av_get_packet
arg	48:25	48:27	3	pb
water	48:25	0:0	4	pb
arg	48:29	48:32	3	pkt
water	48:29	0:0	4	pkt
arg	48:34	48:38	3	size
water	48:34	0:0	4	size
water	48:39	0:0	2	;
if	49:4	50:19	2	(size < 0)
cond	49:8	49:15	3	size < 0
water	49:8	0:0	4	size
op	49:13	0:0	4	<
water	49:15	0:0	4	0
stmts	50:8	50:19	3	
return	50:8	50:19	4	size
water	50:15	0:0	5	size
else	51:4	52:34	2
stmts	51:9	52:34	3	
if	51:9	52:34	4	(size < plaintext_size)
cond	51:13	51:20	5	size < plaintext_size
water	51:13	0:0	6	size
op	51:18	0:0	6	<
water	51:20	0:0	6	plaintext_size
stmts	52:8	52:34	5	
return	52:8	52:34	6	AVERROR_INVALIDDATA
water	52:15	0:0	7	AVERROR_INVALIDDATA
water	53:4	0:0	2	size
op	53:9	0:0	2	-=
water	53:12	0:0	2	plaintext_size
water	53:26	0:0	2	;
if	54:4	56:68	2	(mxf -> aesc)
cond	54:8	54:13	3	mxf -> aesc
water	54:8	0:0	4	mxf
op	54:11	0:0	4	->
water	54:13	0:0	4	aesc
stmts	55:8	56:68	3	
call	55:8	56:67	4	av_aes_crypt
arg	55:21	55:30	5	mxf->aesc
water	55:21	0:0	6	mxf
op	55:24	0:0	6	->
water	55:26	0:0	6	aesc
arg	55:32	55:58	5	&pkt->data[plaintext_size]
op	55:32	0:0	6	&
water	55:33	0:0	6	pkt
op	55:36	0:0	6	->
water	55:38	0:0	6	data
op	55:42	0:0	6	[
water	55:43	0:0	6	plaintext_size
op	55:57	0:0	6	]
arg	56:21	56:47	5	&pkt->data[plaintext_size]
op	56:21	0:0	6	&
water	56:22	0:0	6	pkt
op	56:25	0:0	6	->
water	56:27	0:0	6	data
op	56:31	0:0	6	[
water	56:32	0:0	6	plaintext_size
op	56:46	0:0	6	]
arg	56:49	56:58	5	size>>4
water	56:49	0:0	6	size
op	56:54	0:0	6	>>
water	56:57	0:0	6	4
arg	56:60	56:64	5	ivec
water	56:60	0:0	6	ivec
arg	56:66	56:67	5	1
water	56:66	0:0	6	1
water	56:68	0:0	4	;
call	57:4	57:35	2	av_shrink_packet
arg	57:21	57:24	3	pkt
water	57:21	0:0	4	pkt
arg	57:26	57:35	3	orig_size
water	57:26	0:0	4	orig_size
water	57:36	0:0	2	;
water	58:4	0:0	2	pkt
op	58:7	0:0	2	->
water	58:9	0:0	2	stream_index
op	58:22	0:0	2	=
water	58:24	0:0	2	index
water	58:29	0:0	2	;
call	59:4	59:37	2	avio_skip
arg	59:14	59:16	3	pb
water	59:14	0:0	4	pb
arg	59:18	59:37	3	end-avio_tell(pb)
water	59:18	0:0	4	end
op	59:22	0:0	4	-
call	59:24	59:36	4	avio_tell
arg	59:34	59:36	5	pb
water	59:34	0:0	6	pb
water	59:38	0:0	2	;
return	60:4	60:12	2	0
water	60:11	0:0	3	0
