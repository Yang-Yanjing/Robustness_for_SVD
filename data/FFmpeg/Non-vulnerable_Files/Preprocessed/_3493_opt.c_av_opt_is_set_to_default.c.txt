func	1:0	91:0	0	int	av_opt_is_set_to_default
params	1:28	0:0	1	
param	1:29	1:38	2	void *	obj
param	1:40	1:57	2	const AVOption *	o
stmnts	0:0	90:31	1	
decl	3:4	3:15	2	int64_t	i64
decl	4:4	4:16	2	double	d
water	4:12	0:0	2	,
decl	4:4	4:16	2	double	d2
decl	5:4	5:11	2	float	f
decl	6:4	6:16	2	AVRational	q
decl	7:4	7:17	2	int	ret
water	7:11	0:0	2	,
decl	7:4	7:17	2	int	w
water	7:14	0:0	2	,
decl	7:4	7:17	2	int	h
decl	8:4	8:13	2	char	*str
decl	9:4	9:13	2	void	*dst
if	10:4	11:30	2	(! o || ! obj)
cond	10:8	10:15	3	! o || ! obj
op	10:8	0:0	4	!
water	10:9	0:0	4	o
op	10:11	0:0	4	||
op	10:14	0:0	4	!
water	10:15	0:0	4	obj
stmts	11:8	11:30	3	
return	11:8	11:30	4	AVERROR(EINVAL)
call	11:15	11:29	5	AVERROR
arg	11:23	11:29	6	EINVAL
water	11:23	0:0	7	EINVAL
water	12:4	0:0	2	dst
op	12:8	0:0	2	=
water	12:10	0:0	2	(
water	12:11	0:0	2	(
water	12:12	0:0	2	uint8_t
op	12:19	0:0	2	*
water	12:20	0:0	2	)
water	12:21	0:0	2	obj
water	12:24	0:0	2	)
op	12:26	0:0	2	+
water	12:28	0:0	2	o
op	12:29	0:0	2	->
water	12:31	0:0	2	offset
water	12:37	0:0	2	;
switch	13:4	89:4	2	(o -> type)
cond	13:12	13:15	3	o -> type
water	13:12	0:0	4	o
op	13:13	0:0	4	->
water	13:15	0:0	4	type
stmts	13:21	89:4	3	
water	13:21	0:0	4	{
label	14:4	14:26	4	case AV_OPT_TYPE_CONST :
return	15:8	15:16	4	1
water	15:15	0:0	5	1
label	16:4	16:26	4	case AV_OPT_TYPE_FLAGS :
label	17:4	17:30	4	case AV_OPT_TYPE_PIXEL_FMT :
label	18:4	18:31	4	case AV_OPT_TYPE_SAMPLE_FMT :
label	19:4	19:24	4	case AV_OPT_TYPE_INT :
label	20:4	20:35	4	case AV_OPT_TYPE_CHANNEL_LAYOUT :
label	21:4	21:29	4	case AV_OPT_TYPE_DURATION :
label	22:4	22:26	4	case AV_OPT_TYPE_INT64 :
call	23:8	23:44	4	read_number
arg	23:20	23:21	5	o
water	23:20	0:0	6	o
arg	23:23	23:26	5	dst
water	23:23	0:0	6	dst
arg	23:28	23:32	5	NULL
water	23:28	0:0	6	NULL
arg	23:34	23:38	5	NULL
water	23:34	0:0	6	NULL
arg	23:40	23:44	5	&i64
op	23:40	0:0	6	&
water	23:41	0:0	6	i64
water	23:45	0:0	4	;
return	24:8	24:40	4	o->default_val.i64==i64
water	24:15	0:0	5	o
op	24:16	0:0	5	->
water	24:18	0:0	5	default_val
op	24:29	0:0	5	.
water	24:30	0:0	5	i64
op	24:34	0:0	5	==
water	24:37	0:0	5	i64
label	25:4	25:27	4	case AV_OPT_TYPE_STRING :
water	26:8	0:0	4	str
op	26:12	0:0	4	=
op	26:14	0:0	4	*
water	26:15	0:0	4	(
water	26:16	0:0	4	char
op	26:21	0:0	4	*
op	26:22	0:0	4	*
water	26:23	0:0	4	)
water	26:24	0:0	4	dst
water	26:27	0:0	4	;
if	27:8	28:20	4	(str == o -> default_val . str)
cond	27:12	27:34	5	str == o -> default_val . str
water	27:12	0:0	6	str
op	27:16	0:0	6	==
water	27:19	0:0	6	o
op	27:20	0:0	6	->
water	27:22	0:0	6	default_val
op	27:33	0:0	6	.
water	27:34	0:0	6	str
stmts	28:12	28:20	5	
return	28:12	28:20	6	1
water	28:19	0:0	7	1
if	29:8	30:20	4	(! str || ! o -> default_val . str)
cond	29:12	29:36	5	! str || ! o -> default_val . str
op	29:12	0:0	6	!
water	29:13	0:0	6	str
op	29:17	0:0	6	||
op	29:20	0:0	6	!
water	29:21	0:0	6	o
op	29:22	0:0	6	->
water	29:24	0:0	6	default_val
op	29:35	0:0	6	.
water	29:36	0:0	6	str
stmts	30:12	30:20	5	
return	30:12	30:20	6	0
water	30:19	0:0	7	0
return	31:8	31:47	4	!strcmp(str,o->default_val.str)
op	31:15	0:0	5	!
call	31:16	31:46	5	strcmp
arg	31:23	31:26	6	str
water	31:23	0:0	7	str
arg	31:28	31:46	6	o->default_val.str
water	31:28	0:0	7	o
op	31:29	0:0	7	->
water	31:31	0:0	7	default_val
op	31:42	0:0	7	.
water	31:43	0:0	7	str
label	32:4	32:27	4	case AV_OPT_TYPE_DOUBLE :
call	33:8	33:42	4	read_number
arg	33:20	33:21	5	o
water	33:20	0:0	6	o
arg	33:23	33:26	5	dst
water	33:23	0:0	6	dst
arg	33:28	33:30	5	&d
op	33:28	0:0	6	&
water	33:29	0:0	6	d
arg	33:32	33:36	5	NULL
water	33:32	0:0	6	NULL
arg	33:38	33:42	5	NULL
water	33:38	0:0	6	NULL
water	33:43	0:0	4	;
return	34:8	34:38	4	o->default_val.dbl==d
water	34:15	0:0	5	o
op	34:16	0:0	5	->
water	34:18	0:0	5	default_val
op	34:29	0:0	5	.
water	34:30	0:0	5	dbl
op	34:34	0:0	5	==
water	34:37	0:0	5	d
label	35:4	35:26	4	case AV_OPT_TYPE_FLOAT :
call	36:8	36:42	4	read_number
arg	36:20	36:21	5	o
water	36:20	0:0	6	o
arg	36:23	36:26	5	dst
water	36:23	0:0	6	dst
arg	36:28	36:30	5	&d
op	36:28	0:0	6	&
water	36:29	0:0	6	d
arg	36:32	36:36	5	NULL
water	36:32	0:0	6	NULL
arg	36:38	36:42	5	NULL
water	36:38	0:0	6	NULL
water	36:43	0:0	4	;
water	37:8	0:0	4	f
op	37:10	0:0	4	=
water	37:12	0:0	4	o
op	37:13	0:0	4	->
water	37:15	0:0	4	default_val
op	37:26	0:0	4	.
water	37:27	0:0	4	dbl
water	37:30	0:0	4	;
water	38:8	0:0	4	d2
op	38:11	0:0	4	=
water	38:13	0:0	4	f
water	38:14	0:0	4	;
return	39:8	39:22	4	d2==d
water	39:15	0:0	5	d2
op	39:18	0:0	5	==
water	39:21	0:0	5	d
label	40:4	40:29	4	case AV_OPT_TYPE_RATIONAL :
water	41:8	0:0	4	q
op	41:10	0:0	4	=
call	41:12	41:46	4	av_d2q
arg	41:19	41:37	5	o->default_val.dbl
water	41:19	0:0	6	o
op	41:20	0:0	6	->
water	41:22	0:0	6	default_val
op	41:33	0:0	6	.
water	41:34	0:0	6	dbl
arg	41:39	41:46	5	INT_MAX
water	41:39	0:0	6	INT_MAX
water	41:47	0:0	4	;
return	42:8	42:46	4	!av_cmp_q(*(AVRational*)dst,q)
op	42:15	0:0	5	!
call	42:16	42:45	5	av_cmp_q
arg	42:25	42:42	6	*(AVRational*)dst
op	42:25	0:0	7	*
water	42:26	0:0	7	(
water	42:27	0:0	7	AVRational
op	42:37	0:0	7	*
water	42:38	0:0	7	)
water	42:39	0:0	7	dst
arg	42:44	42:45	6	q
water	42:44	0:0	7	q
label	43:4	43:27	4	case AV_OPT_TYPE_BINARY :
water	43:29	0:0	4	{
struct	44:8	47:8	4	<anonymous_44:8>
decl	45:12	45:25	5	uint8_t	*data
decl	46:12	46:20	5	int	size
decl	44:8	47:19	4	<anonymous_44:8>	tmp
op	47:14	0:0	4	=
water	47:16	0:0	4	{
water	47:17	0:0	4	0
water	47:18	0:0	4	}
decl	48:8	48:49	4	int	opt_size
op	48:21	0:0	4	=
op	48:23	0:0	4	*
call	48:24	48:48	5	(int*)
arg	48:32	48:48	6	(void**)dst+1
water	48:32	0:0	7	(
water	48:33	0:0	7	void
op	48:38	0:0	7	*
op	48:39	0:0	7	*
water	48:40	0:0	7	)
water	48:41	0:0	7	dst
op	48:45	0:0	7	+
water	48:47	0:0	7	1
decl	49:8	49:37	4	void	*opt_ptr
op	49:22	0:0	4	=
op	49:24	0:0	4	*
water	49:25	0:0	4	(
water	49:26	0:0	4	void
op	49:31	0:0	4	*
op	49:32	0:0	4	*
water	49:33	0:0	4	)
water	49:34	0:0	4	dst
if	50:8	51:20	4	(! opt_size && ( ! o -> default_val . str || !strlen (o -> default_val . str ) ))
cond	50:12	50:76	5	! opt_size && ( ! o -> default_val . str || !strlen (o -> default_val . str ) )
op	50:12	0:0	6	!
water	50:13	0:0	6	opt_size
op	50:22	0:0	6	&&
water	50:25	0:0	6	(
op	50:26	0:0	6	!
water	50:27	0:0	6	o
op	50:28	0:0	6	->
water	50:30	0:0	6	default_val
op	50:41	0:0	6	.
water	50:42	0:0	6	str
op	50:46	0:0	6	||
op	50:49	0:0	6	!
call	50:50	50:75	6	strlen
arg	50:57	50:75	7	o->default_val.str
water	50:57	0:0	8	o
op	50:58	0:0	8	->
water	50:60	0:0	8	default_val
op	50:71	0:0	8	.
water	50:72	0:0	8	str
water	50:76	0:0	6	)
stmts	51:12	51:20	5	
return	51:12	51:20	6	1
water	51:19	0:0	7	1
if	52:8	53:20	4	(! opt_size || ! o -> default_val . str || !strlen (o -> default_val . str ))
cond	52:12	52:76	5	! opt_size || ! o -> default_val . str || !strlen (o -> default_val . str )
op	52:12	0:0	6	!
water	52:13	0:0	6	opt_size
op	52:22	0:0	6	||
op	52:26	0:0	6	!
water	52:27	0:0	6	o
op	52:28	0:0	6	->
water	52:30	0:0	6	default_val
op	52:41	0:0	6	.
water	52:42	0:0	6	str
op	52:46	0:0	6	||
op	52:49	0:0	6	!
call	52:50	52:76	6	strlen
arg	52:57	52:76	7	o->default_val.str
water	52:57	0:0	8	o
op	52:58	0:0	8	->
water	52:60	0:0	8	default_val
op	52:71	0:0	8	.
water	52:72	0:0	8	str
stmts	53:12	53:20	5	
return	53:12	53:20	6	0
water	53:19	0:0	7	0
if	54:8	55:20	4	(opt_size !=strlen (o -> default_val . str ) / 2)
cond	54:12	54:53	5	opt_size !=strlen (o -> default_val . str ) / 2
water	54:12	0:0	6	opt_size
op	54:21	0:0	6	!=
call	54:24	54:49	6	strlen
arg	54:31	54:49	7	o->default_val.str
water	54:31	0:0	8	o
op	54:32	0:0	8	->
water	54:34	0:0	8	default_val
op	54:45	0:0	8	.
water	54:46	0:0	8	str
op	54:51	0:0	6	/
water	54:53	0:0	6	2
stmts	55:12	55:20	5	
return	55:12	55:20	6	0
water	55:19	0:0	7	0
water	56:8	0:0	4	ret
op	56:12	0:0	4	=
call	56:14	56:73	4	set_string_binary
arg	56:32	56:36	5	NULL
water	56:32	0:0	6	NULL
arg	56:38	56:42	5	NULL
water	56:38	0:0	6	NULL
arg	56:44	56:62	5	o->default_val.str
water	56:44	0:0	6	o
op	56:45	0:0	6	->
water	56:47	0:0	6	default_val
op	56:58	0:0	6	.
water	56:59	0:0	6	str
arg	56:64	56:73	5	&tmp.data
op	56:64	0:0	6	&
water	56:65	0:0	6	tmp
op	56:68	0:0	6	.
water	56:69	0:0	6	data
water	56:74	0:0	4	;
if	57:8	58:54	4	(! ret)
cond	57:12	57:13	5	! ret
op	57:12	0:0	6	!
water	57:13	0:0	6	ret
stmts	58:12	58:54	5	
water	58:12	0:0	6	ret
op	58:16	0:0	6	=
op	58:18	0:0	6	!
call	58:19	58:53	6	memcmp
arg	58:26	58:33	7	opt_ptr
water	58:26	0:0	8	opt_ptr
arg	58:35	58:43	7	tmp.data
water	58:35	0:0	8	tmp
op	58:38	0:0	8	.
water	58:39	0:0	8	data
arg	58:45	58:53	7	tmp.size
water	58:45	0:0	8	tmp
op	58:48	0:0	8	.
water	58:49	0:0	8	size
water	58:54	0:0	6	;
call	59:8	59:24	4	av_free
arg	59:16	59:24	5	tmp.data
water	59:16	0:0	6	tmp
op	59:19	0:0	6	.
water	59:20	0:0	6	data
water	59:25	0:0	4	;
return	60:8	60:18	4	ret
water	60:15	0:0	5	ret
water	61:4	0:0	4	}
label	62:4	62:25	4	case AV_OPT_TYPE_DICT :
return	64:8	64:32	4	!!(*(void**)dst)
op	64:15	0:0	5	!
op	64:16	0:0	5	!
water	64:17	0:0	5	(
op	64:18	0:0	5	*
water	64:19	0:0	5	(
water	64:20	0:0	5	void
op	64:25	0:0	5	*
op	64:26	0:0	5	*
water	64:27	0:0	5	)
water	64:28	0:0	5	dst
water	64:31	0:0	5	)
label	65:4	65:31	4	case AV_OPT_TYPE_IMAGE_SIZE :
if	66:8	67:21	4	(! o -> default_val . str || !strcmp (o -> default_val . str ,"none" ))
cond	66:12	66:69	5	! o -> default_val . str || !strcmp (o -> default_val . str ,"none" )
op	66:12	0:0	6	!
water	66:13	0:0	6	o
op	66:14	0:0	6	->
water	66:16	0:0	6	default_val
op	66:27	0:0	6	.
water	66:28	0:0	6	str
op	66:32	0:0	6	||
op	66:35	0:0	6	!
call	66:36	66:69	6	strcmp
arg	66:43	66:61	7	o->default_val.str
water	66:43	0:0	8	o
op	66:44	0:0	8	->
water	66:46	0:0	8	default_val
op	66:57	0:0	8	.
water	66:58	0:0	8	str
arg	66:63	66:69	7	"none"
water	66:63	0:0	8	"none"
stmts	67:12	67:21	5	
water	67:12	0:0	6	w
op	67:14	0:0	6	=
water	67:16	0:0	6	h
op	67:18	0:0	6	=
water	67:20	0:0	6	0
water	67:21	0:0	6	;
else	68:8	69:22	4
stmts	68:13	69:22	5	
if	68:13	69:22	6	(( ret =av_parse_video_size (& w ,& h ,o -> default_val . str ) ) < 0)
cond	68:17	68:75	7	( ret =av_parse_video_size (& w ,& h ,o -> default_val . str ) ) < 0
water	68:17	0:0	8	(
water	68:18	0:0	8	ret
op	68:22	0:0	8	=
call	68:24	68:70	8	av_parse_video_size
arg	68:44	68:46	9	&w
op	68:44	0:0	10	&
water	68:45	0:0	10	w
arg	68:48	68:50	9	&h
op	68:48	0:0	10	&
water	68:49	0:0	10	h
arg	68:52	68:70	9	o->default_val.str
water	68:52	0:0	10	o
op	68:53	0:0	10	->
water	68:55	0:0	10	default_val
op	68:66	0:0	10	.
water	68:67	0:0	10	str
water	68:71	0:0	8	)
op	68:73	0:0	8	<
water	68:75	0:0	8	0
stmts	69:12	69:22	7	
return	69:12	69:22	8	ret
water	69:19	0:0	9	ret
return	70:8	70:59	4	(w==*(int*)dst)&&(h==*((int*)dst+1))
water	70:15	0:0	5	(
water	70:16	0:0	5	w
op	70:18	0:0	5	==
op	70:21	0:0	5	*
water	70:22	0:0	5	(
water	70:23	0:0	5	int
op	70:27	0:0	5	*
water	70:28	0:0	5	)
water	70:29	0:0	5	dst
water	70:32	0:0	5	)
op	70:34	0:0	5	&&
water	70:37	0:0	5	(
water	70:38	0:0	5	h
op	70:40	0:0	5	==
op	70:43	0:0	5	*
water	70:44	0:0	5	(
water	70:45	0:0	5	(
water	70:46	0:0	5	int
op	70:50	0:0	5	*
water	70:51	0:0	5	)
water	70:52	0:0	5	dst
op	70:55	0:0	5	+
water	70:56	0:0	5	1
water	70:57	0:0	5	)
water	70:58	0:0	5	)
label	71:4	71:31	4	case AV_OPT_TYPE_VIDEO_RATE :
water	72:8	0:0	4	q
op	72:10	0:0	4	=
water	72:12	0:0	4	(
water	72:13	0:0	4	AVRational
water	72:23	0:0	4	)
water	72:24	0:0	4	{
water	72:25	0:0	4	0
water	72:26	0:0	4	,
water	72:28	0:0	4	0
water	72:29	0:0	4	}
water	72:30	0:0	4	;
if	73:8	76:8	4	(o -> default_val . str)
cond	73:12	73:27	5	o -> default_val . str
water	73:12	0:0	6	o
op	73:13	0:0	6	->
water	73:15	0:0	6	default_val
op	73:26	0:0	6	.
water	73:27	0:0	6	str
stmts	73:32	76:8	5	
water	73:32	0:0	6	{
if	74:12	75:26	6	(( ret =av_parse_video_rate (& q ,o -> default_val . str ) ) < 0)
cond	74:16	74:70	7	( ret =av_parse_video_rate (& q ,o -> default_val . str ) ) < 0
water	74:16	0:0	8	(
water	74:17	0:0	8	ret
op	74:21	0:0	8	=
call	74:23	74:65	8	av_parse_video_rate
arg	74:43	74:45	9	&q
op	74:43	0:0	10	&
water	74:44	0:0	10	q
arg	74:47	74:65	9	o->default_val.str
water	74:47	0:0	10	o
op	74:48	0:0	10	->
water	74:50	0:0	10	default_val
op	74:61	0:0	10	.
water	74:62	0:0	10	str
water	74:66	0:0	8	)
op	74:68	0:0	8	<
water	74:70	0:0	8	0
stmts	75:16	75:26	7	
return	75:16	75:26	8	ret
water	75:23	0:0	9	ret
water	76:8	0:0	6	}
return	77:8	77:46	4	!av_cmp_q(*(AVRational*)dst,q)
op	77:15	0:0	5	!
call	77:16	77:45	5	av_cmp_q
arg	77:25	77:42	6	*(AVRational*)dst
op	77:25	0:0	7	*
water	77:26	0:0	7	(
water	77:27	0:0	7	AVRational
op	77:37	0:0	7	*
water	77:38	0:0	7	)
water	77:39	0:0	7	dst
arg	77:44	77:45	6	q
water	77:44	0:0	7	q
label	78:4	78:26	4	case AV_OPT_TYPE_COLOR :
water	78:28	0:0	4	{
decl	79:8	79:39	4	uint8_t	color[4]
op	79:25	0:0	4	=
water	79:27	0:0	4	{
water	79:28	0:0	4	0
water	79:29	0:0	4	,
water	79:31	0:0	4	0
water	79:32	0:0	4	,
water	79:34	0:0	4	0
water	79:35	0:0	4	,
water	79:37	0:0	4	0
water	79:38	0:0	4	}
if	80:8	83:8	4	(o -> default_val . str)
cond	80:12	80:27	5	o -> default_val . str
water	80:12	0:0	6	o
op	80:13	0:0	6	->
water	80:15	0:0	6	default_val
op	80:26	0:0	6	.
water	80:27	0:0	6	str
stmts	80:32	83:8	5	
water	80:32	0:0	6	{
if	81:12	82:26	6	(( ret =av_parse_color (color ,o -> default_val . str ,- 1 ,NULL ) ) < 0)
cond	81:16	81:78	7	( ret =av_parse_color (color ,o -> default_val . str ,- 1 ,NULL ) ) < 0
water	81:16	0:0	8	(
water	81:17	0:0	8	ret
op	81:21	0:0	8	=
call	81:23	81:73	8	av_parse_color
arg	81:38	81:43	9	color
water	81:38	0:0	10	color
arg	81:45	81:63	9	o->default_val.str
water	81:45	0:0	10	o
op	81:46	0:0	10	->
water	81:48	0:0	10	default_val
op	81:59	0:0	10	.
water	81:60	0:0	10	str
arg	81:65	81:67	9	-1
op	81:65	0:0	10	-
water	81:66	0:0	10	1
arg	81:69	81:73	9	NULL
water	81:69	0:0	10	NULL
water	81:74	0:0	8	)
op	81:76	0:0	8	<
water	81:78	0:0	8	0
stmts	82:16	82:26	7	
return	82:16	82:26	8	ret
water	82:23	0:0	9	ret
water	83:8	0:0	6	}
return	84:8	84:49	4	!memcmp(color,dst,sizeof(color))
op	84:15	0:0	5	!
call	84:16	84:48	5	memcmp
arg	84:23	84:28	6	color
water	84:23	0:0	7	color
arg	84:30	84:33	6	dst
water	84:30	0:0	7	dst
arg	84:35	84:48	6	sizeof(color)
op	84:35	0:0	7	sizeof
water	84:41	0:0	7	(
water	84:42	0:0	7	color
water	84:47	0:0	7	)
water	85:4	0:0	4	}
label	86:4	86:11	4	default :
call	87:8	87:104	4	av_log
arg	87:15	87:18	5	obj
water	87:15	0:0	6	obj
arg	87:20	87:34	5	AV_LOG_WARNING
water	87:20	0:0	6	AV_LOG_WARNING
arg	87:36	87:86	5	"Not supported option type: %d, option name: %s\n"
water	87:36	0:0	6	"Not supported option type: %d, option name: %s\n"
arg	87:88	87:95	5	o->type
water	87:88	0:0	6	o
op	87:89	0:0	6	->
water	87:91	0:0	6	type
arg	87:97	87:104	5	o->name
water	87:97	0:0	6	o
op	87:98	0:0	6	->
water	87:100	0:0	6	name
water	87:105	0:0	4	;
break	88:8	88:13	4	
water	89:4	0:0	4	}
return	90:4	90:31	2	AVERROR_PATCHWELCOME
water	90:11	0:0	3	AVERROR_PATCHWELCOME
