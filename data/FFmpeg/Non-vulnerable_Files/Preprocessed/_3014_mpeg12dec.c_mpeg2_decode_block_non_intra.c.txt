func	1:0	73:0	0	static inline int	mpeg2_decode_block_non_intra
params	1:46	0:0	1	
param	1:47	1:64	2	MpegEncContext *	s
param	2:47	2:61	2	int16_t *	block
param	2:63	2:68	2	int	n
stmnts	0:0	72:12	1	
decl	4:4	4:24	2	int	level
water	4:13	0:0	2	,
decl	4:4	4:24	2	int	i
water	4:16	0:0	2	,
decl	4:4	4:24	2	int	j
water	4:19	0:0	2	,
decl	4:4	4:24	2	int	run
decl	5:4	5:30	2	RLTable	*rl
op	5:16	0:0	2	=
op	5:18	0:0	2	&
water	5:19	0:0	2	ff_rl_mpeg1
water	6:4	0:0	2	uint8_t
op	6:12	0:0	2	*
water	6:13	0:0	2	const
water	6:19	0:0	2	scantable
op	6:29	0:0	2	=
water	6:31	0:0	2	s
op	6:32	0:0	2	->
water	6:34	0:0	2	intra_scantable
op	6:49	0:0	2	.
water	6:50	0:0	2	permutated
water	6:60	0:0	2	;
decl	7:4	7:32	2	const uint16_t	*quant_matrix
decl	8:4	8:32	2	const int	qscale
op	8:21	0:0	2	=
water	8:23	0:0	2	s
op	8:24	0:0	2	->
water	8:26	0:0	2	qscale
decl	9:4	9:16	2	int	mismatch
water	10:4	0:0	2	mismatch
op	10:13	0:0	2	=
water	10:15	0:0	2	1
water	10:16	0:0	2	;
water	11:4	0:0	2	{
call	12:8	12:30	2	OPEN_READER
arg	12:20	12:22	3	re
water	12:20	0:0	4	re
arg	12:24	12:30	3	&s->gb
op	12:24	0:0	4	&
water	12:25	0:0	4	s
op	12:26	0:0	4	->
water	12:28	0:0	4	gb
water	12:31	0:0	2	;
water	13:8	0:0	2	i
op	13:10	0:0	2	=
op	13:12	0:0	2	-
water	13:13	0:0	2	1
water	13:14	0:0	2	;
if	14:8	15:42	2	(n < 4)
cond	14:12	14:16	3	n < 4
water	14:12	0:0	4	n
op	14:14	0:0	4	<
water	14:16	0:0	4	4
stmts	15:12	15:42	3	
water	15:12	0:0	4	quant_matrix
op	15:25	0:0	4	=
water	15:27	0:0	4	s
op	15:28	0:0	4	->
water	15:30	0:0	4	inter_matrix
water	15:42	0:0	4	;
else	16:8	17:49	2
stmts	17:12	17:49	3	
water	17:12	0:0	4	quant_matrix
op	17:25	0:0	4	=
water	17:27	0:0	4	s
op	17:28	0:0	4	->
water	17:30	0:0	4	chroma_inter_matrix
water	17:49	0:0	4	;
call	19:8	19:31	2	UPDATE_CACHE
arg	19:21	19:23	3	re
water	19:21	0:0	4	re
arg	19:25	19:31	3	&s->gb
op	19:25	0:0	4	&
water	19:26	0:0	4	s
op	19:27	0:0	4	->
water	19:29	0:0	4	gb
water	19:32	0:0	2	;
if	20:8	30:8	2	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) < 0)
cond	20:12	20:48	3	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) < 0
water	20:12	0:0	4	(
water	20:13	0:0	4	(
water	20:14	0:0	4	int32_t
water	20:21	0:0	4	)
call	20:23	20:43	4	GET_CACHE
arg	20:33	20:35	5	re
water	20:33	0:0	6	re
arg	20:37	20:43	5	&s->gb
op	20:37	0:0	6	&
water	20:38	0:0	6	s
op	20:39	0:0	6	->
water	20:41	0:0	6	gb
water	20:44	0:0	4	)
op	20:46	0:0	4	<
water	20:48	0:0	4	0
stmts	20:51	30:8	3	
water	20:51	0:0	4	{
water	21:12	0:0	4	level
op	21:18	0:0	4	=
water	21:20	0:0	4	(
water	21:21	0:0	4	3
op	21:23	0:0	4	*
water	21:25	0:0	4	qscale
op	21:32	0:0	4	*
water	21:34	0:0	4	quant_matrix
op	21:46	0:0	4	[
water	21:47	0:0	4	0
op	21:48	0:0	4	]
water	21:49	0:0	4	)
op	21:51	0:0	4	>>
water	21:54	0:0	4	5
water	21:55	0:0	4	;
if	22:12	23:30	4	(GET_CACHE (re ,& s -> gb ) & 0 x40000000)
cond	22:16	22:41	5	GET_CACHE (re ,& s -> gb ) & 0 x40000000
call	22:16	22:36	6	GET_CACHE
arg	22:26	22:28	7	re
water	22:26	0:0	8	re
arg	22:30	22:36	7	&s->gb
op	22:30	0:0	8	&
water	22:31	0:0	8	s
op	22:32	0:0	8	->
water	22:34	0:0	8	gb
op	22:38	0:0	6	&
water	22:40	0:0	6	0
water	22:41	0:0	6	x40000000
stmts	23:16	23:30	5	
water	23:16	0:0	6	level
op	23:22	0:0	6	=
op	23:24	0:0	6	-
water	23:25	0:0	6	level
water	23:30	0:0	6	;
water	24:12	0:0	4	block
op	24:17	0:0	4	[
water	24:18	0:0	4	0
op	24:19	0:0	4	]
op	24:22	0:0	4	=
water	24:24	0:0	4	level
water	24:29	0:0	4	;
water	25:12	0:0	4	mismatch
op	25:21	0:0	4	^=
water	25:24	0:0	4	level
water	25:29	0:0	4	;
water	26:12	0:0	4	i
op	26:13	0:0	4	++
water	26:15	0:0	4	;
call	27:12	27:35	4	SKIP_BITS
arg	27:22	27:24	5	re
water	27:22	0:0	6	re
arg	27:26	27:32	5	&s->gb
op	27:26	0:0	6	&
water	27:27	0:0	6	s
op	27:28	0:0	6	->
water	27:30	0:0	6	gb
arg	27:34	27:35	5	2
water	27:34	0:0	6	2
water	27:36	0:0	4	;
if	28:12	29:24	4	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF)
cond	28:16	28:64	5	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF
water	28:16	0:0	6	(
water	28:17	0:0	6	(
water	28:18	0:0	6	int32_t
water	28:25	0:0	6	)
call	28:27	28:47	6	GET_CACHE
arg	28:37	28:39	7	re
water	28:37	0:0	8	re
arg	28:41	28:47	7	&s->gb
op	28:41	0:0	8	&
water	28:42	0:0	8	s
op	28:43	0:0	8	->
water	28:45	0:0	8	gb
water	28:48	0:0	6	)
op	28:50	0:0	6	<=
water	28:53	0:0	6	(
water	28:54	0:0	6	int32_t
water	28:61	0:0	6	)
water	28:63	0:0	6	0
water	28:64	0:0	6	xBFFFFFFF
stmts	29:16	29:24	5	
goto	29:16	29:24	6	end
water	29:21	0:0	7	end
water	30:8	0:0	4	}
for	32:8	65:8	2	(;;)
forinit	32:13	32:13	3	;
water	32:13	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	32:17	65:8	3	
water	32:17	0:0	4	{
call	33:12	34:41	4	GET_RL_VLC
arg	33:23	33:28	5	level
water	33:23	0:0	6	level
arg	33:30	33:33	5	run
water	33:30	0:0	6	run
arg	33:35	33:37	5	re
water	33:35	0:0	6	re
arg	33:39	33:45	5	&s->gb
op	33:39	0:0	6	&
water	33:40	0:0	6	s
op	33:41	0:0	6	->
water	33:43	0:0	6	gb
arg	33:47	33:60	5	rl->rl_vlc[0]
water	33:47	0:0	6	rl
op	33:49	0:0	6	->
water	33:51	0:0	6	rl_vlc
op	33:57	0:0	6	[
water	33:58	0:0	6	0
op	33:59	0:0	6	]
arg	34:23	34:35	5	TEX_VLC_BITS
water	34:23	0:0	6	TEX_VLC_BITS
arg	34:37	34:38	5	2
water	34:37	0:0	6	2
arg	34:40	34:41	5	0
water	34:40	0:0	6	0
water	34:42	0:0	4	;
if	35:12	43:12	4	(level != 0)
cond	35:16	35:25	5	level != 0
water	35:16	0:0	6	level
op	35:22	0:0	6	!=
water	35:25	0:0	6	0
stmts	35:28	43:12	5	
water	35:28	0:0	6	{
water	36:16	0:0	6	i
op	36:18	0:0	6	+=
water	36:21	0:0	6	run
water	36:24	0:0	6	;
call	37:16	37:42	6	check_scantable_index
arg	37:38	37:39	7	s
water	37:38	0:0	8	s
arg	37:41	37:42	7	i
water	37:41	0:0	8	i
water	37:43	0:0	6	;
water	38:16	0:0	6	j
op	38:18	0:0	6	=
water	38:20	0:0	6	scantable
op	38:29	0:0	6	[
water	38:30	0:0	6	i
op	38:31	0:0	6	]
water	38:32	0:0	6	;
water	39:16	0:0	6	level
op	39:22	0:0	6	=
water	39:24	0:0	6	(
water	39:25	0:0	6	(
water	39:26	0:0	6	level
op	39:32	0:0	6	*
water	39:34	0:0	6	2
op	39:36	0:0	6	+
water	39:38	0:0	6	1
water	39:39	0:0	6	)
op	39:41	0:0	6	*
water	39:43	0:0	6	qscale
op	39:50	0:0	6	*
water	39:52	0:0	6	quant_matrix
op	39:64	0:0	6	[
water	39:65	0:0	6	j
op	39:66	0:0	6	]
water	39:67	0:0	6	)
op	39:69	0:0	6	>>
water	39:72	0:0	6	5
water	39:73	0:0	6	;
water	40:16	0:0	6	level
op	40:22	0:0	6	=
water	40:24	0:0	6	(
water	40:25	0:0	6	level
op	40:31	0:0	6	^
call	40:33	40:57	6	SHOW_SBITS
arg	40:44	40:46	7	re
water	40:44	0:0	8	re
arg	40:48	40:54	7	&s->gb
op	40:48	0:0	8	&
water	40:49	0:0	8	s
op	40:50	0:0	8	->
water	40:52	0:0	8	gb
arg	40:56	40:57	7	1
water	40:56	0:0	8	1
water	40:58	0:0	6	)
op	40:60	0:0	6	-
call	41:24	41:48	6	SHOW_SBITS
arg	41:35	41:37	7	re
water	41:35	0:0	8	re
arg	41:39	41:45	7	&s->gb
op	41:39	0:0	8	&
water	41:40	0:0	8	s
op	41:41	0:0	8	->
water	41:43	0:0	8	gb
arg	41:47	41:48	7	1
water	41:47	0:0	8	1
water	41:49	0:0	6	;
call	42:16	42:39	6	SKIP_BITS
arg	42:26	42:28	7	re
water	42:26	0:0	8	re
arg	42:30	42:36	7	&s->gb
op	42:30	0:0	8	&
water	42:31	0:0	8	s
op	42:32	0:0	8	->
water	42:34	0:0	8	gb
arg	42:38	42:39	7	1
water	42:38	0:0	8	1
water	42:40	0:0	6	;
water	43:12	0:0	6	}
else	43:14	59:12	4
stmts	43:19	59:12	5	
water	43:19	0:0	6	{
water	45:16	0:0	6	run
op	45:20	0:0	6	=
call	45:22	45:46	6	SHOW_UBITS
arg	45:33	45:35	7	re
water	45:33	0:0	8	re
arg	45:37	45:43	7	&s->gb
op	45:37	0:0	8	&
water	45:38	0:0	8	s
op	45:39	0:0	8	->
water	45:41	0:0	8	gb
arg	45:45	45:46	7	6
water	45:45	0:0	8	6
op	45:48	0:0	6	+
water	45:50	0:0	6	1
water	45:51	0:0	6	;
call	46:16	46:44	6	LAST_SKIP_BITS
arg	46:31	46:33	7	re
water	46:31	0:0	8	re
arg	46:35	46:41	7	&s->gb
op	46:35	0:0	8	&
water	46:36	0:0	8	s
op	46:37	0:0	8	->
water	46:39	0:0	8	gb
arg	46:43	46:44	7	6
water	46:43	0:0	8	6
water	46:45	0:0	6	;
call	47:16	47:39	6	UPDATE_CACHE
arg	47:29	47:31	7	re
water	47:29	0:0	8	re
arg	47:33	47:39	7	&s->gb
op	47:33	0:0	8	&
water	47:34	0:0	8	s
op	47:35	0:0	8	->
water	47:37	0:0	8	gb
water	47:40	0:0	6	;
water	48:16	0:0	6	level
op	48:22	0:0	6	=
call	48:24	48:49	6	SHOW_SBITS
arg	48:35	48:37	7	re
water	48:35	0:0	8	re
arg	48:39	48:45	7	&s->gb
op	48:39	0:0	8	&
water	48:40	0:0	8	s
op	48:41	0:0	8	->
water	48:43	0:0	8	gb
arg	48:47	48:49	7	12
water	48:47	0:0	8	12
water	48:50	0:0	6	;
call	49:16	49:40	6	SKIP_BITS
arg	49:26	49:28	7	re
water	49:26	0:0	8	re
arg	49:30	49:36	7	&s->gb
op	49:30	0:0	8	&
water	49:31	0:0	8	s
op	49:32	0:0	8	->
water	49:34	0:0	8	gb
arg	49:38	49:40	7	12
water	49:38	0:0	8	12
water	49:41	0:0	6	;
water	50:16	0:0	6	i
op	50:18	0:0	6	+=
water	50:21	0:0	6	run
water	50:24	0:0	6	;
call	51:16	51:42	6	check_scantable_index
arg	51:38	51:39	7	s
water	51:38	0:0	8	s
arg	51:41	51:42	7	i
water	51:41	0:0	8	i
water	51:43	0:0	6	;
water	52:16	0:0	6	j
op	52:18	0:0	6	=
water	52:20	0:0	6	scantable
op	52:29	0:0	6	[
water	52:30	0:0	6	i
op	52:31	0:0	6	]
water	52:32	0:0	6	;
if	53:16	56:16	6	(level < 0)
cond	53:20	53:28	7	level < 0
water	53:20	0:0	8	level
op	53:26	0:0	8	<
water	53:28	0:0	8	0
stmts	53:31	56:16	7	
water	53:31	0:0	8	{
water	54:20	0:0	8	level
op	54:26	0:0	8	=
water	54:28	0:0	8	(
water	54:29	0:0	8	(
op	54:30	0:0	8	-
water	54:31	0:0	8	level
op	54:37	0:0	8	*
water	54:39	0:0	8	2
op	54:41	0:0	8	+
water	54:43	0:0	8	1
water	54:44	0:0	8	)
op	54:46	0:0	8	*
water	54:48	0:0	8	qscale
op	54:55	0:0	8	*
water	54:57	0:0	8	quant_matrix
op	54:69	0:0	8	[
water	54:70	0:0	8	j
op	54:71	0:0	8	]
water	54:72	0:0	8	)
op	54:74	0:0	8	>>
water	54:77	0:0	8	5
water	54:78	0:0	8	;
water	55:20	0:0	8	level
op	55:26	0:0	8	=
op	55:28	0:0	8	-
water	55:29	0:0	8	level
water	55:34	0:0	8	;
water	56:16	0:0	8	}
else	56:18	58:16	6
stmts	56:23	58:16	7	
water	56:23	0:0	8	{
water	57:20	0:0	8	level
op	57:26	0:0	8	=
water	57:28	0:0	8	(
water	57:29	0:0	8	(
water	57:30	0:0	8	level
op	57:36	0:0	8	*
water	57:38	0:0	8	2
op	57:40	0:0	8	+
water	57:42	0:0	8	1
water	57:43	0:0	8	)
op	57:45	0:0	8	*
water	57:47	0:0	8	qscale
op	57:54	0:0	8	*
water	57:56	0:0	8	quant_matrix
op	57:68	0:0	8	[
water	57:69	0:0	8	j
op	57:70	0:0	8	]
water	57:71	0:0	8	)
op	57:73	0:0	8	>>
water	57:76	0:0	8	5
water	57:77	0:0	8	;
water	58:16	0:0	8	}
water	59:12	0:0	6	}
water	60:12	0:0	4	mismatch
op	60:21	0:0	4	^=
water	60:24	0:0	4	level
water	60:29	0:0	4	;
water	61:12	0:0	4	block
op	61:17	0:0	4	[
water	61:18	0:0	4	j
op	61:19	0:0	4	]
op	61:22	0:0	4	=
water	61:24	0:0	4	level
water	61:29	0:0	4	;
if	62:12	63:21	4	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF)
cond	62:16	62:64	5	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF
water	62:16	0:0	6	(
water	62:17	0:0	6	(
water	62:18	0:0	6	int32_t
water	62:25	0:0	6	)
call	62:27	62:47	6	GET_CACHE
arg	62:37	62:39	7	re
water	62:37	0:0	8	re
arg	62:41	62:47	7	&s->gb
op	62:41	0:0	8	&
water	62:42	0:0	8	s
op	62:43	0:0	8	->
water	62:45	0:0	8	gb
water	62:48	0:0	6	)
op	62:50	0:0	6	<=
water	62:53	0:0	6	(
water	62:54	0:0	6	int32_t
water	62:61	0:0	6	)
water	62:63	0:0	6	0
water	62:64	0:0	6	xBFFFFFFF
stmts	63:16	63:21	5	
break	63:16	63:21	6	
call	64:12	64:35	4	UPDATE_CACHE
arg	64:25	64:27	5	re
water	64:25	0:0	6	re
arg	64:29	64:35	5	&s->gb
op	64:29	0:0	6	&
water	64:30	0:0	6	s
op	64:31	0:0	6	->
water	64:33	0:0	6	gb
water	64:36	0:0	4	;
water	65:8	0:0	4	}
label	66:0	66:3	2	end :
call	67:8	67:36	2	LAST_SKIP_BITS
arg	67:23	67:25	3	re
water	67:23	0:0	4	re
arg	67:27	67:33	3	&s->gb
op	67:27	0:0	4	&
water	67:28	0:0	4	s
op	67:29	0:0	4	->
water	67:31	0:0	4	gb
arg	67:35	67:36	3	2
water	67:35	0:0	4	2
water	67:37	0:0	2	;
call	68:8	68:31	2	CLOSE_READER
arg	68:21	68:23	3	re
water	68:21	0:0	4	re
arg	68:25	68:31	3	&s->gb
op	68:25	0:0	4	&
water	68:26	0:0	4	s
op	68:27	0:0	4	->
water	68:29	0:0	4	gb
water	68:32	0:0	2	;
water	69:4	0:0	2	}
water	70:4	0:0	2	block
op	70:9	0:0	2	[
water	70:10	0:0	2	63
op	70:12	0:0	2	]
op	70:14	0:0	2	^=
water	70:17	0:0	2	(
water	70:18	0:0	2	mismatch
op	70:27	0:0	2	&
water	70:29	0:0	2	1
water	70:30	0:0	2	)
water	70:31	0:0	2	;
water	71:4	0:0	2	s
op	71:5	0:0	2	->
water	71:7	0:0	2	block_last_index
op	71:23	0:0	2	[
water	71:24	0:0	2	n
op	71:25	0:0	2	]
op	71:27	0:0	2	=
water	71:29	0:0	2	i
water	71:30	0:0	2	;
return	72:4	72:12	2	0
water	72:11	0:0	3	0
