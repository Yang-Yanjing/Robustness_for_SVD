func	1:0	93:0	0	static int	config_output
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	92:12	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:44	2	AVFilterLink	*toplink
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	inputs
op	4:39	0:0	2	[
water	4:40	0:0	2	TOP
op	4:43	0:0	2	]
decl	5:4	5:31	2	BlendContext	*s
op	5:20	0:0	2	=
water	5:22	0:0	2	ctx
op	5:25	0:0	2	->
water	5:27	0:0	2	priv
decl	6:4	6:77	2	const AVPixFmtDescriptor	*pix_desc
op	6:39	0:0	2	=
call	6:41	6:76	3	av_pix_fmt_desc_get
arg	6:61	6:76	4	toplink->format
water	6:61	0:0	5	toplink
op	6:68	0:0	5	->
water	6:70	0:0	5	format
decl	7:4	7:28	2	int	ret
water	7:11	0:0	2	,
decl	7:4	7:28	2	int	plane
water	7:18	0:0	2	,
decl	7:4	7:28	2	int	is_16bit
if	8:4	29:4	2	(! s -> tblend)
cond	8:8	8:12	3	! s -> tblend
op	8:8	0:0	4	!
water	8:9	0:0	4	s
op	8:10	0:0	4	->
water	8:12	0:0	4	tblend
stmts	8:20	29:4	3	
water	8:20	0:0	4	{
decl	9:8	9:54	4	AVFilterLink	*bottomlink
op	9:33	0:0	4	=
water	9:35	0:0	4	ctx
op	9:38	0:0	4	->
water	9:40	0:0	4	inputs
op	9:46	0:0	4	[
water	9:47	0:0	4	BOTTOM
op	9:53	0:0	4	]
if	10:8	13:8	4	(toplink -> format != bottomlink -> format)
cond	10:12	10:43	5	toplink -> format != bottomlink -> format
water	10:12	0:0	6	toplink
op	10:19	0:0	6	->
water	10:21	0:0	6	format
op	10:28	0:0	6	!=
water	10:31	0:0	6	bottomlink
op	10:41	0:0	6	->
water	10:43	0:0	6	format
stmts	10:51	13:8	5	
water	10:51	0:0	6	{
call	11:12	11:77	6	av_log
arg	11:19	11:22	7	ctx
water	11:19	0:0	8	ctx
arg	11:24	11:36	7	AV_LOG_ERROR
water	11:24	0:0	8	AV_LOG_ERROR
arg	11:38	11:77	7	"inputs must be of same pixel format\n"
water	11:38	0:0	8	"inputs must be of same pixel format\n"
water	11:78	0:0	6	;
return	12:12	12:34	6	AVERROR(EINVAL)
call	12:19	12:33	7	AVERROR
arg	12:27	12:33	8	EINVAL
water	12:27	0:0	9	EINVAL
water	13:8	0:0	6	}
if	14:8	28:8	4	(toplink -> w != bottomlink -> w || toplink -> h != bottomlink -> h || toplink -> sample_aspect_ratio . num != bottomlink -> sample_aspect_ratio . num || toplink -> sample_aspect_ratio . den != bottomlink -> sample_aspect_ratio . den)
cond	14:12	17:80	5	toplink -> w != bottomlink -> w || toplink -> h != bottomlink -> h || toplink -> sample_aspect_ratio . num != bottomlink -> sample_aspect_ratio . num || toplink -> sample_aspect_ratio . den != bottomlink -> sample_aspect_ratio . den
water	14:12	0:0	6	toplink
op	14:19	0:0	6	->
water	14:21	0:0	6	w
op	14:45	0:0	6	!=
water	14:48	0:0	6	bottomlink
op	14:58	0:0	6	->
water	14:60	0:0	6	w
op	14:62	0:0	6	||
water	15:12	0:0	6	toplink
op	15:19	0:0	6	->
water	15:21	0:0	6	h
op	15:45	0:0	6	!=
water	15:48	0:0	6	bottomlink
op	15:58	0:0	6	->
water	15:60	0:0	6	h
op	15:62	0:0	6	||
water	16:12	0:0	6	toplink
op	16:19	0:0	6	->
water	16:21	0:0	6	sample_aspect_ratio
op	16:40	0:0	6	.
water	16:41	0:0	6	num
op	16:45	0:0	6	!=
water	16:48	0:0	6	bottomlink
op	16:58	0:0	6	->
water	16:60	0:0	6	sample_aspect_ratio
op	16:79	0:0	6	.
water	16:80	0:0	6	num
op	16:84	0:0	6	||
water	17:12	0:0	6	toplink
op	17:19	0:0	6	->
water	17:21	0:0	6	sample_aspect_ratio
op	17:40	0:0	6	.
water	17:41	0:0	6	den
op	17:45	0:0	6	!=
water	17:48	0:0	6	bottomlink
op	17:58	0:0	6	->
water	17:60	0:0	6	sample_aspect_ratio
op	17:79	0:0	6	.
water	17:80	0:0	6	den
stmts	17:85	28:8	5	
water	17:85	0:0	6	{
call	18:12	26:54	6	av_log
arg	18:19	18:22	7	ctx
water	18:19	0:0	8	ctx
arg	18:24	18:36	7	AV_LOG_ERROR
water	18:24	0:0	8	AV_LOG_ERROR
arg	18:38	20:73	7	"First input link %s parameters ""(size %dx%d, SAR %d:%d) do not match the corresponding ""second input link %s parameters (%dx%d, SAR %d:%d)\n"
water	18:38	0:0	8	"First input link %s parameters "
water	19:19	0:0	8	"(size %dx%d, SAR %d:%d) do not match the corresponding "
water	20:19	0:0	8	"second input link %s parameters (%dx%d, SAR %d:%d)\n"
arg	21:19	21:44	7	ctx->input_pads[TOP].name
water	21:19	0:0	8	ctx
op	21:22	0:0	8	->
water	21:24	0:0	8	input_pads
op	21:34	0:0	8	[
water	21:35	0:0	8	TOP
op	21:38	0:0	8	]
op	21:39	0:0	8	.
water	21:40	0:0	8	name
arg	21:46	21:56	7	toplink->w
water	21:46	0:0	8	toplink
op	21:53	0:0	8	->
water	21:55	0:0	8	w
arg	21:58	21:68	7	toplink->h
water	21:58	0:0	8	toplink
op	21:65	0:0	8	->
water	21:67	0:0	8	h
arg	22:19	22:51	7	toplink->sample_aspect_ratio.num
water	22:19	0:0	8	toplink
op	22:26	0:0	8	->
water	22:28	0:0	8	sample_aspect_ratio
op	22:47	0:0	8	.
water	22:48	0:0	8	num
arg	23:19	23:51	7	toplink->sample_aspect_ratio.den
water	23:19	0:0	8	toplink
op	23:26	0:0	8	->
water	23:28	0:0	8	sample_aspect_ratio
op	23:47	0:0	8	.
water	23:48	0:0	8	den
arg	24:19	24:47	7	ctx->input_pads[BOTTOM].name
water	24:19	0:0	8	ctx
op	24:22	0:0	8	->
water	24:24	0:0	8	input_pads
op	24:34	0:0	8	[
water	24:35	0:0	8	BOTTOM
op	24:41	0:0	8	]
op	24:42	0:0	8	.
water	24:43	0:0	8	name
arg	24:49	24:62	7	bottomlink->w
water	24:49	0:0	8	bottomlink
op	24:59	0:0	8	->
water	24:61	0:0	8	w
arg	24:64	24:77	7	bottomlink->h
water	24:64	0:0	8	bottomlink
op	24:74	0:0	8	->
water	24:76	0:0	8	h
arg	25:19	25:54	7	bottomlink->sample_aspect_ratio.num
water	25:19	0:0	8	bottomlink
op	25:29	0:0	8	->
water	25:31	0:0	8	sample_aspect_ratio
op	25:50	0:0	8	.
water	25:51	0:0	8	num
arg	26:19	26:54	7	bottomlink->sample_aspect_ratio.den
water	26:19	0:0	8	bottomlink
op	26:29	0:0	8	->
water	26:31	0:0	8	sample_aspect_ratio
op	26:50	0:0	8	.
water	26:51	0:0	8	den
water	26:55	0:0	6	;
return	27:12	27:34	6	AVERROR(EINVAL)
call	27:19	27:33	7	AVERROR
arg	27:27	27:33	8	EINVAL
water	27:27	0:0	9	EINVAL
water	28:8	0:0	6	}
water	29:4	0:0	4	}
water	30:4	0:0	2	outlink
op	30:11	0:0	2	->
water	30:13	0:0	2	w
op	30:15	0:0	2	=
water	30:17	0:0	2	toplink
op	30:24	0:0	2	->
water	30:26	0:0	2	w
water	30:27	0:0	2	;
water	31:4	0:0	2	outlink
op	31:11	0:0	2	->
water	31:13	0:0	2	h
op	31:15	0:0	2	=
water	31:17	0:0	2	toplink
op	31:24	0:0	2	->
water	31:26	0:0	2	h
water	31:27	0:0	2	;
water	32:4	0:0	2	outlink
op	32:11	0:0	2	->
water	32:13	0:0	2	time_base
op	32:23	0:0	2	=
water	32:25	0:0	2	toplink
op	32:32	0:0	2	->
water	32:34	0:0	2	time_base
water	32:43	0:0	2	;
water	33:4	0:0	2	outlink
op	33:11	0:0	2	->
water	33:13	0:0	2	sample_aspect_ratio
op	33:33	0:0	2	=
water	33:35	0:0	2	toplink
op	33:42	0:0	2	->
water	33:44	0:0	2	sample_aspect_ratio
water	33:63	0:0	2	;
water	34:4	0:0	2	outlink
op	34:11	0:0	2	->
water	34:13	0:0	2	frame_rate
op	34:24	0:0	2	=
water	34:26	0:0	2	toplink
op	34:33	0:0	2	->
water	34:35	0:0	2	frame_rate
water	34:45	0:0	2	;
water	35:4	0:0	2	s
op	35:5	0:0	2	->
water	35:7	0:0	2	hsub
op	35:12	0:0	2	=
water	35:14	0:0	2	pix_desc
op	35:22	0:0	2	->
water	35:24	0:0	2	log2_chroma_w
water	35:37	0:0	2	;
water	36:4	0:0	2	s
op	36:5	0:0	2	->
water	36:7	0:0	2	vsub
op	36:12	0:0	2	=
water	36:14	0:0	2	pix_desc
op	36:22	0:0	2	->
water	36:24	0:0	2	log2_chroma_h
water	36:37	0:0	2	;
water	37:4	0:0	2	is_16bit
op	37:13	0:0	2	=
water	37:15	0:0	2	pix_desc
op	37:23	0:0	2	->
water	37:25	0:0	2	comp
op	37:29	0:0	2	[
water	37:30	0:0	2	0
op	37:31	0:0	2	]
op	37:32	0:0	2	.
water	37:33	0:0	2	depth_minus1
op	37:46	0:0	2	==
water	37:49	0:0	2	15
water	37:51	0:0	2	;
water	38:4	0:0	2	s
op	38:5	0:0	2	->
water	38:7	0:0	2	nb_planes
op	38:17	0:0	2	=
call	38:19	38:58	2	av_pix_fmt_count_planes
arg	38:43	38:58	3	toplink->format
water	38:43	0:0	4	toplink
op	38:50	0:0	4	->
water	38:52	0:0	4	format
water	38:59	0:0	2	;
if	39:4	40:51	2	(s -> tblend)
cond	39:8	39:11	3	s -> tblend
water	39:8	0:0	4	s
op	39:9	0:0	4	->
water	39:11	0:0	4	tblend
stmts	40:8	40:51	3	
water	40:8	0:0	4	outlink
op	40:15	0:0	4	->
water	40:17	0:0	4	flags
op	40:23	0:0	4	|=
water	40:26	0:0	4	FF_LINK_FLAG_REQUEST_LOOP
water	40:51	0:0	4	;
else	41:4	42:22	2
stmts	41:9	42:22	3	
if	41:9	42:22	4	(( ret =ff_dualinput_init (ctx ,& s -> dinput ) ) < 0)
cond	41:13	41:58	5	( ret =ff_dualinput_init (ctx ,& s -> dinput ) ) < 0
water	41:13	0:0	6	(
water	41:14	0:0	6	ret
op	41:18	0:0	6	=
call	41:20	41:53	6	ff_dualinput_init
arg	41:38	41:41	7	ctx
water	41:38	0:0	8	ctx
arg	41:43	41:53	7	&s->dinput
op	41:43	0:0	8	&
water	41:44	0:0	8	s
op	41:45	0:0	8	->
water	41:47	0:0	8	dinput
water	41:54	0:0	6	)
op	41:56	0:0	6	<
water	41:58	0:0	6	0
stmts	42:12	42:22	5	
return	42:12	42:22	6	ret
water	42:19	0:0	7	ret
for	43:4	91:4	2	(plane = 0 ;plane <FF_ARRAY_ELEMS (s -> params );plane ++)
forinit	43:9	43:18	3	plane = 0 ;
water	43:9	0:0	4	plane
op	43:15	0:0	4	=
water	43:17	0:0	4	0
water	43:18	0:0	4	;
cond	43:20	43:52	3	plane <FF_ARRAY_ELEMS (s -> params )
water	43:20	0:0	4	plane
op	43:26	0:0	4	<
call	43:28	43:52	4	FF_ARRAY_ELEMS
arg	43:43	43:52	5	s->params
water	43:43	0:0	6	s
op	43:44	0:0	6	->
water	43:46	0:0	6	params
forexpr	43:55	43:60	3	plane ++
water	43:55	0:0	4	plane
op	43:60	0:0	4	++
stmts	43:64	91:4	3	
water	43:64	0:0	4	{
decl	44:8	44:47	4	FilterParams	*param
op	44:28	0:0	4	=
op	44:30	0:0	4	&
water	44:31	0:0	4	s
op	44:32	0:0	4	->
water	44:34	0:0	4	params
op	44:40	0:0	4	[
water	44:41	0:0	4	plane
op	44:46	0:0	4	]
if	45:8	46:37	4	(s -> all_mode >= 0)
cond	45:12	45:27	5	s -> all_mode >= 0
water	45:12	0:0	6	s
op	45:13	0:0	6	->
water	45:15	0:0	6	all_mode
op	45:24	0:0	6	>=
water	45:27	0:0	6	0
stmts	46:12	46:37	5	
water	46:12	0:0	6	param
op	46:17	0:0	6	->
water	46:19	0:0	6	mode
op	46:24	0:0	6	=
water	46:26	0:0	6	s
op	46:27	0:0	6	->
water	46:29	0:0	6	all_mode
water	46:37	0:0	6	;
if	47:8	48:43	4	(s -> all_opacity < 1)
cond	47:12	47:29	5	s -> all_opacity < 1
water	47:12	0:0	6	s
op	47:13	0:0	6	->
water	47:15	0:0	6	all_opacity
op	47:27	0:0	6	<
water	47:29	0:0	6	1
stmts	48:12	48:43	5	
water	48:12	0:0	6	param
op	48:17	0:0	6	->
water	48:19	0:0	6	opacity
op	48:27	0:0	6	=
water	48:29	0:0	6	s
op	48:30	0:0	6	->
water	48:32	0:0	6	all_opacity
water	48:43	0:0	6	;
switch	49:8	78:8	4	(param -> mode)
cond	49:16	49:23	5	param -> mode
water	49:16	0:0	6	param
op	49:21	0:0	6	->
water	49:23	0:0	6	mode
stmts	49:29	78:8	5	
water	49:29	0:0	6	{
label	50:8	50:27	6	case BLEND_ADDITION :
water	50:31	0:0	6	param
op	50:36	0:0	6	->
water	50:38	0:0	6	blend
op	50:44	0:0	6	=
water	50:46	0:0	6	is_16bit
water	50:55	0:0	6	?
water	50:57	0:0	6	blend_addition_16bit
water	50:80	0:0	6	:
water	50:82	0:0	6	blend_addition_8bit
water	50:101	0:0	6	;
break	50:105	50:110	6	
label	51:8	51:22	6	case BLEND_AND :
water	51:31	0:0	6	param
op	51:36	0:0	6	->
water	51:38	0:0	6	blend
op	51:44	0:0	6	=
water	51:46	0:0	6	is_16bit
water	51:55	0:0	6	?
water	51:57	0:0	6	blend_and_16bit
water	51:80	0:0	6	:
water	51:82	0:0	6	blend_and_8bit
water	51:96	0:0	6	;
break	51:105	51:110	6	
label	52:8	52:26	6	case BLEND_AVERAGE :
water	52:31	0:0	6	param
op	52:36	0:0	6	->
water	52:38	0:0	6	blend
op	52:44	0:0	6	=
water	52:46	0:0	6	is_16bit
water	52:55	0:0	6	?
water	52:57	0:0	6	blend_average_16bit
water	52:80	0:0	6	:
water	52:82	0:0	6	blend_average_8bit
water	52:100	0:0	6	;
break	52:105	52:110	6	
label	53:8	53:23	6	case BLEND_BURN :
water	53:31	0:0	6	param
op	53:36	0:0	6	->
water	53:38	0:0	6	blend
op	53:44	0:0	6	=
water	53:46	0:0	6	is_16bit
water	53:55	0:0	6	?
water	53:57	0:0	6	blend_burn_16bit
water	53:80	0:0	6	:
water	53:82	0:0	6	blend_burn_8bit
water	53:97	0:0	6	;
break	53:105	53:110	6	
label	54:8	54:25	6	case BLEND_DARKEN :
water	54:31	0:0	6	param
op	54:36	0:0	6	->
water	54:38	0:0	6	blend
op	54:44	0:0	6	=
water	54:46	0:0	6	is_16bit
water	54:55	0:0	6	?
water	54:57	0:0	6	blend_darken_16bit
water	54:80	0:0	6	:
water	54:82	0:0	6	blend_darken_8bit
water	54:99	0:0	6	;
break	54:105	54:110	6	
label	55:8	55:29	6	case BLEND_DIFFERENCE :
water	55:31	0:0	6	param
op	55:36	0:0	6	->
water	55:38	0:0	6	blend
op	55:44	0:0	6	=
water	55:46	0:0	6	is_16bit
water	55:55	0:0	6	?
water	55:57	0:0	6	blend_difference_16bit
water	55:80	0:0	6	:
water	55:82	0:0	6	blend_difference_8bit
water	55:103	0:0	6	;
break	55:105	55:110	6	
label	56:8	56:32	6	case BLEND_DIFFERENCE128 :
water	56:34	0:0	6	param
op	56:39	0:0	6	->
water	56:41	0:0	6	blend
op	56:47	0:0	6	=
water	56:49	0:0	6	is_16bit
water	56:58	0:0	6	?
water	56:60	0:0	6	blend_difference128_16bit
water	56:85	0:0	6	:
water	56:87	0:0	6	blend_difference128_8bit
water	56:111	0:0	6	;
break	56:113	56:118	6	
label	57:8	57:25	6	case BLEND_DIVIDE :
water	57:31	0:0	6	param
op	57:36	0:0	6	->
water	57:38	0:0	6	blend
op	57:44	0:0	6	=
water	57:46	0:0	6	is_16bit
water	57:55	0:0	6	?
water	57:57	0:0	6	blend_divide_16bit
water	57:80	0:0	6	:
water	57:82	0:0	6	blend_divide_8bit
water	57:99	0:0	6	;
break	57:105	57:110	6	
label	58:8	58:24	6	case BLEND_DODGE :
water	58:31	0:0	6	param
op	58:36	0:0	6	->
water	58:38	0:0	6	blend
op	58:44	0:0	6	=
water	58:46	0:0	6	is_16bit
water	58:55	0:0	6	?
water	58:57	0:0	6	blend_dodge_16bit
water	58:80	0:0	6	:
water	58:82	0:0	6	blend_dodge_8bit
water	58:98	0:0	6	;
break	58:105	58:110	6	
label	59:8	59:28	6	case BLEND_EXCLUSION :
water	59:31	0:0	6	param
op	59:36	0:0	6	->
water	59:38	0:0	6	blend
op	59:44	0:0	6	=
water	59:46	0:0	6	is_16bit
water	59:55	0:0	6	?
water	59:57	0:0	6	blend_exclusion_16bit
water	59:80	0:0	6	:
water	59:82	0:0	6	blend_exclusion_8bit
water	59:102	0:0	6	;
break	59:105	59:110	6	
label	60:8	60:23	6	case BLEND_GLOW :
water	60:31	0:0	6	param
op	60:36	0:0	6	->
water	60:38	0:0	6	blend
op	60:44	0:0	6	=
water	60:46	0:0	6	is_16bit
water	60:55	0:0	6	?
water	60:57	0:0	6	blend_glow_16bit
water	60:80	0:0	6	:
water	60:82	0:0	6	blend_glow_8bit
water	60:97	0:0	6	;
break	60:105	60:110	6	
label	61:8	61:28	6	case BLEND_HARDLIGHT :
water	61:31	0:0	6	param
op	61:36	0:0	6	->
water	61:38	0:0	6	blend
op	61:44	0:0	6	=
water	61:46	0:0	6	is_16bit
water	61:55	0:0	6	?
water	61:57	0:0	6	blend_hardlight_16bit
water	61:80	0:0	6	:
water	61:82	0:0	6	blend_hardlight_8bit
water	61:102	0:0	6	;
break	61:105	61:110	6	
label	62:8	62:26	6	case BLEND_HARDMIX :
water	62:31	0:0	6	param
op	62:36	0:0	6	->
water	62:38	0:0	6	blend
op	62:44	0:0	6	=
water	62:46	0:0	6	is_16bit
water	62:55	0:0	6	?
water	62:57	0:0	6	blend_hardmix_16bit
water	62:80	0:0	6	:
water	62:82	0:0	6	blend_hardmix_8bit
water	62:100	0:0	6	;
break	62:105	62:110	6	
label	63:8	63:26	6	case BLEND_LIGHTEN :
water	63:31	0:0	6	param
op	63:36	0:0	6	->
water	63:38	0:0	6	blend
op	63:44	0:0	6	=
water	63:46	0:0	6	is_16bit
water	63:55	0:0	6	?
water	63:57	0:0	6	blend_lighten_16bit
water	63:80	0:0	6	:
water	63:82	0:0	6	blend_lighten_8bit
water	63:100	0:0	6	;
break	63:105	63:110	6	
label	64:8	64:30	6	case BLEND_LINEARLIGHT :
water	64:31	0:0	6	param
op	64:36	0:0	6	->
water	64:38	0:0	6	blend
op	64:44	0:0	6	=
water	64:46	0:0	6	is_16bit
water	64:55	0:0	6	?
water	64:57	0:0	6	blend_linearlight_16bit
water	64:80	0:0	6	:
water	64:82	0:0	6	blend_linearlight_8bit
water	64:104	0:0	6	;
break	64:105	64:110	6	
label	65:8	65:27	6	case BLEND_MULTIPLY :
water	65:31	0:0	6	param
op	65:36	0:0	6	->
water	65:38	0:0	6	blend
op	65:44	0:0	6	=
water	65:46	0:0	6	is_16bit
water	65:55	0:0	6	?
water	65:57	0:0	6	blend_multiply_16bit
water	65:80	0:0	6	:
water	65:82	0:0	6	blend_multiply_8bit
water	65:101	0:0	6	;
break	65:105	65:110	6	
label	66:8	66:27	6	case BLEND_NEGATION :
water	66:31	0:0	6	param
op	66:36	0:0	6	->
water	66:38	0:0	6	blend
op	66:44	0:0	6	=
water	66:46	0:0	6	is_16bit
water	66:55	0:0	6	?
water	66:57	0:0	6	blend_negation_16bit
water	66:80	0:0	6	:
water	66:82	0:0	6	blend_negation_8bit
water	66:101	0:0	6	;
break	66:105	66:110	6	
label	67:8	67:25	6	case BLEND_NORMAL :
water	67:31	0:0	6	param
op	67:36	0:0	6	->
water	67:38	0:0	6	blend
op	67:44	0:0	6	=
water	67:46	0:0	6	blend_normal
water	67:58	0:0	6	;
break	67:105	67:110	6	
label	68:8	68:21	6	case BLEND_OR :
water	68:31	0:0	6	param
op	68:36	0:0	6	->
water	68:38	0:0	6	blend
op	68:44	0:0	6	=
water	68:46	0:0	6	is_16bit
water	68:55	0:0	6	?
water	68:57	0:0	6	blend_or_16bit
water	68:80	0:0	6	:
water	68:82	0:0	6	blend_or_8bit
water	68:95	0:0	6	;
break	68:105	68:110	6	
label	69:8	69:26	6	case BLEND_OVERLAY :
water	69:31	0:0	6	param
op	69:36	0:0	6	->
water	69:38	0:0	6	blend
op	69:44	0:0	6	=
water	69:46	0:0	6	is_16bit
water	69:55	0:0	6	?
water	69:57	0:0	6	blend_overlay_16bit
water	69:80	0:0	6	:
water	69:82	0:0	6	blend_overlay_8bit
water	69:100	0:0	6	;
break	69:105	69:110	6	
label	70:8	70:26	6	case BLEND_PHOENIX :
water	70:31	0:0	6	param
op	70:36	0:0	6	->
water	70:38	0:0	6	blend
op	70:44	0:0	6	=
water	70:46	0:0	6	is_16bit
water	70:55	0:0	6	?
water	70:57	0:0	6	blend_phoenix_16bit
water	70:80	0:0	6	:
water	70:82	0:0	6	blend_phoenix_8bit
water	70:100	0:0	6	;
break	70:105	70:110	6	
label	71:8	71:27	6	case BLEND_PINLIGHT :
water	71:31	0:0	6	param
op	71:36	0:0	6	->
water	71:38	0:0	6	blend
op	71:44	0:0	6	=
water	71:46	0:0	6	is_16bit
water	71:55	0:0	6	?
water	71:57	0:0	6	blend_pinlight_16bit
water	71:80	0:0	6	:
water	71:82	0:0	6	blend_pinlight_8bit
water	71:101	0:0	6	;
break	71:105	71:110	6	
label	72:8	72:26	6	case BLEND_REFLECT :
water	72:31	0:0	6	param
op	72:36	0:0	6	->
water	72:38	0:0	6	blend
op	72:44	0:0	6	=
water	72:46	0:0	6	is_16bit
water	72:55	0:0	6	?
water	72:57	0:0	6	blend_reflect_16bit
water	72:80	0:0	6	:
water	72:82	0:0	6	blend_reflect_8bit
water	72:100	0:0	6	;
break	72:105	72:110	6	
label	73:8	73:25	6	case BLEND_SCREEN :
water	73:31	0:0	6	param
op	73:36	0:0	6	->
water	73:38	0:0	6	blend
op	73:44	0:0	6	=
water	73:46	0:0	6	is_16bit
water	73:55	0:0	6	?
water	73:57	0:0	6	blend_screen_16bit
water	73:80	0:0	6	:
water	73:82	0:0	6	blend_screen_8bit
water	73:99	0:0	6	;
break	73:105	73:110	6	
label	74:8	74:28	6	case BLEND_SOFTLIGHT :
water	74:31	0:0	6	param
op	74:36	0:0	6	->
water	74:38	0:0	6	blend
op	74:44	0:0	6	=
water	74:46	0:0	6	is_16bit
water	74:55	0:0	6	?
water	74:57	0:0	6	blend_softlight_16bit
water	74:80	0:0	6	:
water	74:82	0:0	6	blend_softlight_8bit
water	74:102	0:0	6	;
break	74:105	74:110	6	
label	75:8	75:27	6	case BLEND_SUBTRACT :
water	75:31	0:0	6	param
op	75:36	0:0	6	->
water	75:38	0:0	6	blend
op	75:44	0:0	6	=
water	75:46	0:0	6	is_16bit
water	75:55	0:0	6	?
water	75:57	0:0	6	blend_subtract_16bit
water	75:80	0:0	6	:
water	75:82	0:0	6	blend_subtract_8bit
water	75:101	0:0	6	;
break	75:105	75:110	6	
label	76:8	76:29	6	case BLEND_VIVIDLIGHT :
water	76:31	0:0	6	param
op	76:36	0:0	6	->
water	76:38	0:0	6	blend
op	76:44	0:0	6	=
water	76:46	0:0	6	is_16bit
water	76:55	0:0	6	?
water	76:57	0:0	6	blend_vividlight_16bit
water	76:80	0:0	6	:
water	76:82	0:0	6	blend_vividlight_8bit
water	76:103	0:0	6	;
break	76:105	76:110	6	
label	77:8	77:22	6	case BLEND_XOR :
water	77:31	0:0	6	param
op	77:36	0:0	6	->
water	77:38	0:0	6	blend
op	77:44	0:0	6	=
water	77:46	0:0	6	is_16bit
water	77:55	0:0	6	?
water	77:57	0:0	6	blend_xor_16bit
water	77:80	0:0	6	:
water	77:82	0:0	6	blend_xor_8bit
water	77:96	0:0	6	;
break	77:105	77:110	6	
water	78:8	0:0	6	}
if	79:8	83:8	4	(s -> all_expr && ! param -> expr_str)
cond	79:12	79:35	5	s -> all_expr && ! param -> expr_str
water	79:12	0:0	6	s
op	79:13	0:0	6	->
water	79:15	0:0	6	all_expr
op	79:24	0:0	6	&&
op	79:27	0:0	6	!
water	79:28	0:0	6	param
op	79:33	0:0	6	->
water	79:35	0:0	6	expr_str
stmts	79:45	83:8	5	
water	79:45	0:0	6	{
water	80:12	0:0	6	param
op	80:17	0:0	6	->
water	80:19	0:0	6	expr_str
op	80:28	0:0	6	=
call	80:30	80:51	6	av_strdup
arg	80:40	80:51	7	s->all_expr
water	80:40	0:0	8	s
op	80:41	0:0	8	->
water	80:43	0:0	8	all_expr
water	80:52	0:0	6	;
if	81:12	82:38	6	(! param -> expr_str)
cond	81:16	81:24	7	! param -> expr_str
op	81:16	0:0	8	!
water	81:17	0:0	8	param
op	81:22	0:0	8	->
water	81:24	0:0	8	expr_str
stmts	82:16	82:38	7	
return	82:16	82:38	8	AVERROR(ENOMEM)
call	82:23	82:37	9	AVERROR
arg	82:31	82:37	10	ENOMEM
water	82:31	0:0	11	ENOMEM
water	83:8	0:0	6	}
if	84:8	90:8	4	(param -> expr_str)
cond	84:12	84:19	5	param -> expr_str
water	84:12	0:0	6	param
op	84:17	0:0	6	->
water	84:19	0:0	6	expr_str
stmts	84:29	90:8	5	
water	84:29	0:0	6	{
water	85:12	0:0	6	ret
op	85:16	0:0	6	=
call	85:18	86:62	6	av_expr_parse
arg	85:32	85:41	7	&param->e
op	85:32	0:0	8	&
water	85:33	0:0	8	param
op	85:38	0:0	8	->
water	85:40	0:0	8	e
arg	85:43	85:58	7	param->expr_str
water	85:43	0:0	8	param
op	85:48	0:0	8	->
water	85:50	0:0	8	expr_str
arg	85:60	85:69	7	var_names
water	85:60	0:0	8	var_names
arg	86:32	86:36	7	NULL
water	86:32	0:0	8	NULL
arg	86:38	86:42	7	NULL
water	86:38	0:0	8	NULL
arg	86:44	86:48	7	NULL
water	86:44	0:0	8	NULL
arg	86:50	86:54	7	NULL
water	86:50	0:0	8	NULL
arg	86:56	86:57	7	0
water	86:56	0:0	8	0
arg	86:59	86:62	7	ctx
water	86:59	0:0	8	ctx
water	86:63	0:0	6	;
if	87:12	88:26	6	(ret < 0)
cond	87:16	87:22	7	ret < 0
water	87:16	0:0	8	ret
op	87:20	0:0	8	<
water	87:22	0:0	8	0
stmts	88:16	88:26	7	
return	88:16	88:26	8	ret
water	88:23	0:0	9	ret
water	89:12	0:0	6	param
op	89:17	0:0	6	->
water	89:19	0:0	6	blend
op	89:25	0:0	6	=
water	89:27	0:0	6	is_16bit
water	89:35	0:0	6	?
water	89:37	0:0	6	blend_expr_16bit
water	89:54	0:0	6	:
water	89:56	0:0	6	blend_expr_8bit
water	89:71	0:0	6	;
water	90:8	0:0	6	}
water	91:4	0:0	4	}
return	92:4	92:12	2	0
water	92:11	0:0	3	0
