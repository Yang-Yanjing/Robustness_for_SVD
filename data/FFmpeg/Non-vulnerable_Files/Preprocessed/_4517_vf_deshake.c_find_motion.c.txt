func	1:0	69:0	0	static void	find_motion
params	1:23	0:0	1	
param	1:24	1:47	2	DeshakeContext *	deshake
param	1:49	1:62	2	uint8_t *	src1
param	1:64	1:77	2	uint8_t *	src2
param	2:24	2:33	2	int	width
param	2:35	2:45	2	int	height
param	2:47	2:57	2	int	stride
param	2:59	2:71	2	Transform *	t
stmnts	0:0	67:44	1	
decl	4:4	4:12	2	int	x
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	y
decl	5:4	5:31	2	IntMotionVector	mv
op	5:23	0:0	2	=
water	5:25	0:0	2	{
water	5:26	0:0	2	0
water	5:27	0:0	2	,
water	5:29	0:0	2	0
water	5:30	0:0	2	}
decl	6:4	6:27	2	int	count_max_value
op	6:24	0:0	2	=
water	6:26	0:0	2	0
decl	7:4	7:16	2	int	contrast
decl	8:4	8:11	2	int	pos
decl	9:4	9:34	2	int	center_x
op	9:17	0:0	2	=
water	9:19	0:0	2	0
water	9:20	0:0	2	,
decl	9:4	9:34	2	int	center_y
op	9:31	0:0	2	=
water	9:33	0:0	2	0
decl	10:4	10:19	2	double	p_x
water	10:14	0:0	2	,
decl	10:4	10:19	2	double	p_y
call	11:4	11:129	2	av_fast_malloc
arg	11:19	11:35	3	&deshake->angles
op	11:19	0:0	4	&
water	11:20	0:0	4	deshake
op	11:27	0:0	4	->
water	11:29	0:0	4	angles
arg	11:37	11:58	3	&deshake->angles_size
op	11:37	0:0	4	&
water	11:38	0:0	4	deshake
op	11:45	0:0	4	->
water	11:47	0:0	4	angles_size
arg	11:60	11:129	3	width*height/(16*deshake->blocksize)*sizeof(*deshake->angles)
water	11:60	0:0	4	width
op	11:66	0:0	4	*
water	11:68	0:0	4	height
op	11:75	0:0	4	/
water	11:77	0:0	4	(
water	11:78	0:0	4	16
op	11:81	0:0	4	*
water	11:83	0:0	4	deshake
op	11:90	0:0	4	->
water	11:92	0:0	4	blocksize
water	11:101	0:0	4	)
op	11:103	0:0	4	*
op	11:105	0:0	4	sizeof
water	11:111	0:0	4	(
op	11:112	0:0	4	*
water	11:113	0:0	4	deshake
op	11:120	0:0	4	->
water	11:122	0:0	4	angles
water	11:128	0:0	4	)
water	11:130	0:0	2	;
for	13:4	17:4	2	(x = 0 ;x < deshake -> rx * 2 + 1;x ++)
forinit	13:9	13:14	3	x = 0 ;
water	13:9	0:0	4	x
op	13:11	0:0	4	=
water	13:13	0:0	4	0
water	13:14	0:0	4	;
cond	13:16	13:38	3	x < deshake -> rx * 2 + 1
water	13:16	0:0	4	x
op	13:18	0:0	4	<
water	13:20	0:0	4	deshake
op	13:27	0:0	4	->
water	13:29	0:0	4	rx
op	13:32	0:0	4	*
water	13:34	0:0	4	2
op	13:36	0:0	4	+
water	13:38	0:0	4	1
forexpr	13:41	13:42	3	x ++
water	13:41	0:0	4	x
op	13:42	0:0	4	++
stmts	13:46	17:4	3	
water	13:46	0:0	4	{
for	14:8	16:8	4	(y = 0 ;y < deshake -> ry * 2 + 1;y ++)
forinit	14:13	14:18	5	y = 0 ;
water	14:13	0:0	6	y
op	14:15	0:0	6	=
water	14:17	0:0	6	0
water	14:18	0:0	6	;
cond	14:20	14:42	5	y < deshake -> ry * 2 + 1
water	14:20	0:0	6	y
op	14:22	0:0	6	<
water	14:24	0:0	6	deshake
op	14:31	0:0	6	->
water	14:33	0:0	6	ry
op	14:36	0:0	6	*
water	14:38	0:0	6	2
op	14:40	0:0	6	+
water	14:42	0:0	6	1
forexpr	14:45	14:46	5	y ++
water	14:45	0:0	6	y
op	14:46	0:0	6	++
stmts	14:50	16:8	5	
water	14:50	0:0	6	{
water	15:12	0:0	6	deshake
op	15:19	0:0	6	->
water	15:21	0:0	6	counts
op	15:27	0:0	6	[
water	15:28	0:0	6	x
op	15:29	0:0	6	]
op	15:30	0:0	6	[
water	15:31	0:0	6	y
op	15:32	0:0	6	]
op	15:34	0:0	6	=
water	15:36	0:0	6	0
water	15:37	0:0	6	;
water	16:8	0:0	6	}
water	17:4	0:0	4	}
water	18:4	0:0	2	pos
op	18:8	0:0	2	=
water	18:10	0:0	2	0
water	18:11	0:0	2	;
for	20:4	38:4	2	(y = deshake -> ry ;y < height - deshake -> ry - ( deshake -> blocksize * 2 );y += deshake -> blocksize * 2)
forinit	20:9	20:24	3	y = deshake -> ry ;
water	20:9	0:0	4	y
op	20:11	0:0	4	=
water	20:13	0:0	4	deshake
op	20:20	0:0	4	->
water	20:22	0:0	4	ry
water	20:24	0:0	4	;
cond	20:26	20:76	3	y < height - deshake -> ry - ( deshake -> blocksize * 2 )
water	20:26	0:0	4	y
op	20:28	0:0	4	<
water	20:30	0:0	4	height
op	20:37	0:0	4	-
water	20:39	0:0	4	deshake
op	20:46	0:0	4	->
water	20:48	0:0	4	ry
op	20:51	0:0	4	-
water	20:53	0:0	4	(
water	20:54	0:0	4	deshake
op	20:61	0:0	4	->
water	20:63	0:0	4	blocksize
op	20:73	0:0	4	*
water	20:75	0:0	4	2
water	20:76	0:0	4	)
forexpr	20:79	20:105	3	y += deshake -> blocksize * 2
water	20:79	0:0	4	y
op	20:81	0:0	4	+=
water	20:84	0:0	4	deshake
op	20:91	0:0	4	->
water	20:93	0:0	4	blocksize
op	20:103	0:0	4	*
water	20:105	0:0	4	2
stmts	20:108	38:4	3	
water	20:108	0:0	4	{
for	22:8	37:8	4	(x = deshake -> rx ;x < width - deshake -> rx - 16;x += 16)
forinit	22:13	22:28	5	x = deshake -> rx ;
water	22:13	0:0	6	x
op	22:15	0:0	6	=
water	22:17	0:0	6	deshake
op	22:24	0:0	6	->
water	22:26	0:0	6	rx
water	22:28	0:0	6	;
cond	22:30	22:56	5	x < width - deshake -> rx - 16
water	22:30	0:0	6	x
op	22:32	0:0	6	<
water	22:34	0:0	6	width
op	22:40	0:0	6	-
water	22:42	0:0	6	deshake
op	22:49	0:0	6	->
water	22:51	0:0	6	rx
op	22:54	0:0	6	-
water	22:56	0:0	6	16
forexpr	22:60	22:65	5	x += 16
water	22:60	0:0	6	x
op	22:62	0:0	6	+=
water	22:65	0:0	6	16
stmts	22:69	37:8	5	
water	22:69	0:0	6	{
water	25:12	0:0	6	contrast
op	25:21	0:0	6	=
call	25:23	25:76	6	block_contrast
arg	25:38	25:42	7	src2
water	25:38	0:0	8	src2
arg	25:44	25:45	7	x
water	25:44	0:0	8	x
arg	25:47	25:48	7	y
water	25:47	0:0	8	y
arg	25:50	25:56	7	stride
water	25:50	0:0	8	stride
arg	25:58	25:76	7	deshake->blocksize
water	25:58	0:0	8	deshake
op	25:65	0:0	8	->
water	25:67	0:0	8	blocksize
water	25:77	0:0	6	;
if	26:12	36:12	6	(contrast > deshake -> contrast)
cond	26:16	26:36	7	contrast > deshake -> contrast
water	26:16	0:0	8	contrast
op	26:25	0:0	8	>
water	26:27	0:0	8	deshake
op	26:34	0:0	8	->
water	26:36	0:0	8	contrast
stmts	26:46	36:12	7	
water	26:46	0:0	8	{
call	28:16	28:72	8	find_block_motion
arg	28:34	28:41	9	deshake
water	28:34	0:0	10	deshake
arg	28:43	28:47	9	src1
water	28:43	0:0	10	src1
arg	28:49	28:53	9	src2
water	28:49	0:0	10	src2
arg	28:55	28:56	9	x
water	28:55	0:0	10	x
arg	28:58	28:59	9	y
water	28:58	0:0	10	y
arg	28:61	28:67	9	stride
water	28:61	0:0	10	stride
arg	28:69	28:72	9	&mv
op	28:69	0:0	10	&
water	28:70	0:0	10	mv
water	28:73	0:0	8	;
if	29:16	35:16	8	(mv . x != - 1 && mv . y != - 1)
cond	29:20	29:43	9	mv . x != - 1 && mv . y != - 1
water	29:20	0:0	10	mv
op	29:22	0:0	10	.
water	29:23	0:0	10	x
op	29:25	0:0	10	!=
op	29:28	0:0	10	-
water	29:29	0:0	10	1
op	29:31	0:0	10	&&
water	29:34	0:0	10	mv
op	29:36	0:0	10	.
water	29:37	0:0	10	y
op	29:39	0:0	10	!=
op	29:42	0:0	10	-
water	29:43	0:0	10	1
stmts	29:46	35:16	9	
water	29:46	0:0	10	{
water	30:20	0:0	10	deshake
op	30:27	0:0	10	->
water	30:29	0:0	10	counts
op	30:35	0:0	10	[
water	30:36	0:0	10	mv
op	30:38	0:0	10	.
water	30:39	0:0	10	x
op	30:41	0:0	10	+
water	30:43	0:0	10	deshake
op	30:50	0:0	10	->
water	30:52	0:0	10	rx
op	30:54	0:0	10	]
op	30:55	0:0	10	[
water	30:56	0:0	10	mv
op	30:58	0:0	10	.
water	30:59	0:0	10	y
op	30:61	0:0	10	+
water	30:63	0:0	10	deshake
op	30:70	0:0	10	->
water	30:72	0:0	10	ry
op	30:74	0:0	10	]
op	30:76	0:0	10	+=
water	30:79	0:0	10	1
water	30:80	0:0	10	;
if	31:20	32:77	10	(x > deshake -> rx && y > deshake -> ry)
cond	31:24	31:56	11	x > deshake -> rx && y > deshake -> ry
water	31:24	0:0	12	x
op	31:26	0:0	12	>
water	31:28	0:0	12	deshake
op	31:35	0:0	12	->
water	31:37	0:0	12	rx
op	31:40	0:0	12	&&
water	31:43	0:0	12	y
op	31:45	0:0	12	>
water	31:47	0:0	12	deshake
op	31:54	0:0	12	->
water	31:56	0:0	12	ry
stmts	32:24	32:77	11	
water	32:24	0:0	12	deshake
op	32:31	0:0	12	->
water	32:33	0:0	12	angles
op	32:39	0:0	12	[
water	32:40	0:0	12	pos
op	32:43	0:0	12	++
op	32:45	0:0	12	]
op	32:47	0:0	12	=
call	32:49	32:76	12	block_angle
arg	32:61	32:62	13	x
water	32:61	0:0	14	x
arg	32:64	32:65	13	y
water	32:64	0:0	14	y
arg	32:67	32:68	13	0
water	32:67	0:0	14	0
arg	32:70	32:71	13	0
water	32:70	0:0	14	0
arg	32:73	32:76	13	&mv
op	32:73	0:0	14	&
water	32:74	0:0	14	mv
water	32:77	0:0	12	;
water	33:20	0:0	10	center_x
op	33:29	0:0	10	+=
water	33:32	0:0	10	mv
op	33:34	0:0	10	.
water	33:35	0:0	10	x
water	33:36	0:0	10	;
water	34:20	0:0	10	center_y
op	34:29	0:0	10	+=
water	34:32	0:0	10	mv
op	34:34	0:0	10	.
water	34:35	0:0	10	y
water	34:36	0:0	10	;
water	35:16	0:0	10	}
water	36:12	0:0	8	}
water	37:8	0:0	6	}
water	38:4	0:0	4	}
if	39:4	45:4	2	(pos)
cond	39:8	39:8	3	pos
water	39:8	0:0	4	pos
stmts	39:13	45:4	3	
water	39:13	0:0	4	{
water	40:9	0:0	4	center_x
op	40:18	0:0	4	/=
water	40:21	0:0	4	pos
water	40:24	0:0	4	;
water	41:9	0:0	4	center_y
op	41:18	0:0	4	/=
water	41:21	0:0	4	pos
water	41:24	0:0	4	;
water	42:9	0:0	4	t
op	42:10	0:0	4	->
water	42:12	0:0	4	angle
op	42:18	0:0	4	=
call	42:20	42:51	4	clean_mean
arg	42:31	42:46	5	deshake->angles
water	42:31	0:0	6	deshake
op	42:38	0:0	6	->
water	42:40	0:0	6	angles
arg	42:48	42:51	5	pos
water	42:48	0:0	6	pos
water	42:52	0:0	4	;
if	43:9	44:26	4	(t -> angle < 0 . 001)
cond	43:13	43:26	5	t -> angle < 0 . 001
water	43:13	0:0	6	t
op	43:14	0:0	6	->
water	43:16	0:0	6	angle
op	43:22	0:0	6	<
water	43:24	0:0	6	0
op	43:25	0:0	6	.
water	43:26	0:0	6	001
stmts	44:14	44:26	5	
water	44:14	0:0	6	t
op	44:15	0:0	6	->
water	44:17	0:0	6	angle
op	44:23	0:0	6	=
water	44:25	0:0	6	0
water	44:26	0:0	6	;
water	45:4	0:0	4	}
else	45:6	47:4	2
stmts	45:11	47:4	3	
water	45:11	0:0	4	{
water	46:9	0:0	4	t
op	46:10	0:0	4	->
water	46:12	0:0	4	angle
op	46:18	0:0	4	=
water	46:20	0:0	4	0
water	46:21	0:0	4	;
water	47:4	0:0	4	}
for	49:4	59:4	2	(y = deshake -> ry * 2 ;y >= 0;y --)
forinit	49:9	49:28	3	y = deshake -> ry * 2 ;
water	49:9	0:0	4	y
op	49:11	0:0	4	=
water	49:13	0:0	4	deshake
op	49:20	0:0	4	->
water	49:22	0:0	4	ry
op	49:25	0:0	4	*
water	49:27	0:0	4	2
water	49:28	0:0	4	;
cond	49:30	49:35	3	y >= 0
water	49:30	0:0	4	y
op	49:32	0:0	4	>=
water	49:35	0:0	4	0
forexpr	49:38	49:39	3	y --
water	49:38	0:0	4	y
op	49:39	0:0	4	--
stmts	49:43	59:4	3	
water	49:43	0:0	4	{
for	50:8	57:8	4	(x = 0 ;x < deshake -> rx * 2 + 1;x ++)
forinit	50:13	50:18	5	x = 0 ;
water	50:13	0:0	6	x
op	50:15	0:0	6	=
water	50:17	0:0	6	0
water	50:18	0:0	6	;
cond	50:20	50:42	5	x < deshake -> rx * 2 + 1
water	50:20	0:0	6	x
op	50:22	0:0	6	<
water	50:24	0:0	6	deshake
op	50:31	0:0	6	->
water	50:33	0:0	6	rx
op	50:36	0:0	6	*
water	50:38	0:0	6	2
op	50:40	0:0	6	+
water	50:42	0:0	6	1
forexpr	50:45	50:46	5	x ++
water	50:45	0:0	6	x
op	50:46	0:0	6	++
stmts	50:50	57:8	5	
water	50:50	0:0	6	{
if	52:12	56:12	6	(deshake -> counts [ x ] [ y ] > count_max_value)
cond	52:16	52:40	7	deshake -> counts [ x ] [ y ] > count_max_value
water	52:16	0:0	8	deshake
op	52:23	0:0	8	->
water	52:25	0:0	8	counts
op	52:31	0:0	8	[
water	52:32	0:0	8	x
op	52:33	0:0	8	]
op	52:34	0:0	8	[
water	52:35	0:0	8	y
op	52:36	0:0	8	]
op	52:38	0:0	8	>
water	52:40	0:0	8	count_max_value
stmts	52:57	56:12	7	
water	52:57	0:0	8	{
water	53:16	0:0	8	t
op	53:17	0:0	8	->
water	53:19	0:0	8	vec
op	53:22	0:0	8	.
water	53:23	0:0	8	x
op	53:25	0:0	8	=
water	53:27	0:0	8	x
op	53:29	0:0	8	-
water	53:31	0:0	8	deshake
op	53:38	0:0	8	->
water	53:40	0:0	8	rx
water	53:42	0:0	8	;
water	54:16	0:0	8	t
op	54:17	0:0	8	->
water	54:19	0:0	8	vec
op	54:22	0:0	8	.
water	54:23	0:0	8	y
op	54:25	0:0	8	=
water	54:27	0:0	8	y
op	54:29	0:0	8	-
water	54:31	0:0	8	deshake
op	54:38	0:0	8	->
water	54:40	0:0	8	ry
water	54:42	0:0	8	;
water	55:16	0:0	8	count_max_value
op	55:32	0:0	8	=
water	55:34	0:0	8	deshake
op	55:41	0:0	8	->
water	55:43	0:0	8	counts
op	55:49	0:0	8	[
water	55:50	0:0	8	x
op	55:51	0:0	8	]
op	55:52	0:0	8	[
water	55:53	0:0	8	y
op	55:54	0:0	8	]
water	55:55	0:0	8	;
water	56:12	0:0	8	}
water	57:8	0:0	6	}
water	59:4	0:0	4	}
water	60:4	0:0	2	p_x
op	60:8	0:0	2	=
water	60:10	0:0	2	(
water	60:11	0:0	2	center_x
op	60:20	0:0	2	-
water	60:22	0:0	2	width
op	60:28	0:0	2	/
water	60:30	0:0	2	2
op	60:31	0:0	2	.
water	60:32	0:0	2	0
water	60:33	0:0	2	)
water	60:34	0:0	2	;
water	61:4	0:0	2	p_y
op	61:8	0:0	2	=
water	61:10	0:0	2	(
water	61:11	0:0	2	center_y
op	61:20	0:0	2	-
water	61:22	0:0	2	height
op	61:29	0:0	2	/
water	61:31	0:0	2	2
op	61:32	0:0	2	.
water	61:33	0:0	2	0
water	61:34	0:0	2	)
water	61:35	0:0	2	;
water	62:4	0:0	2	t
op	62:5	0:0	2	->
water	62:7	0:0	2	vec
op	62:10	0:0	2	.
water	62:11	0:0	2	x
op	62:13	0:0	2	+=
water	62:16	0:0	2	(
call	62:17	62:29	2	cos
arg	62:21	62:29	3	t->angle
water	62:21	0:0	4	t
op	62:22	0:0	4	->
water	62:24	0:0	4	angle
op	62:30	0:0	2	-
water	62:31	0:0	2	1
water	62:32	0:0	2	)
op	62:33	0:0	2	*
water	62:34	0:0	2	p_x
op	62:39	0:0	2	-
call	62:41	62:53	2	sin
arg	62:45	62:53	3	t->angle
water	62:45	0:0	4	t
op	62:46	0:0	4	->
water	62:48	0:0	4	angle
op	62:54	0:0	2	*
water	62:55	0:0	2	p_y
water	62:58	0:0	2	;
water	63:4	0:0	2	t
op	63:5	0:0	2	->
water	63:7	0:0	2	vec
op	63:10	0:0	2	.
water	63:11	0:0	2	y
op	63:13	0:0	2	+=
call	63:16	63:28	2	sin
arg	63:20	63:28	3	t->angle
water	63:20	0:0	4	t
op	63:21	0:0	4	->
water	63:23	0:0	4	angle
op	63:29	0:0	2	*
water	63:30	0:0	2	p_x
op	63:35	0:0	2	+
water	63:37	0:0	2	(
call	63:38	63:50	2	cos
arg	63:42	63:50	3	t->angle
water	63:42	0:0	4	t
op	63:43	0:0	4	->
water	63:45	0:0	4	angle
op	63:51	0:0	2	-
water	63:52	0:0	2	1
water	63:53	0:0	2	)
op	63:54	0:0	2	*
water	63:55	0:0	2	p_y
water	63:58	0:0	2	;
water	65:4	0:0	2	t
op	65:5	0:0	2	->
water	65:7	0:0	2	vec
op	65:10	0:0	2	.
water	65:11	0:0	2	x
op	65:13	0:0	2	=
call	65:15	65:67	2	av_clipf
arg	65:24	65:32	3	t->vec.x
water	65:24	0:0	4	t
op	65:25	0:0	4	->
water	65:27	0:0	4	vec
op	65:30	0:0	4	.
water	65:31	0:0	4	x
arg	65:34	65:50	3	-deshake->rx*2
op	65:34	0:0	4	-
water	65:35	0:0	4	deshake
op	65:42	0:0	4	->
water	65:44	0:0	4	rx
op	65:47	0:0	4	*
water	65:49	0:0	4	2
arg	65:52	65:67	3	deshake->rx*2
water	65:52	0:0	4	deshake
op	65:59	0:0	4	->
water	65:61	0:0	4	rx
op	65:64	0:0	4	*
water	65:66	0:0	4	2
water	65:68	0:0	2	;
water	66:4	0:0	2	t
op	66:5	0:0	2	->
water	66:7	0:0	2	vec
op	66:10	0:0	2	.
water	66:11	0:0	2	y
op	66:13	0:0	2	=
call	66:15	66:67	2	av_clipf
arg	66:24	66:32	3	t->vec.y
water	66:24	0:0	4	t
op	66:25	0:0	4	->
water	66:27	0:0	4	vec
op	66:30	0:0	4	.
water	66:31	0:0	4	y
arg	66:34	66:50	3	-deshake->ry*2
op	66:34	0:0	4	-
water	66:35	0:0	4	deshake
op	66:42	0:0	4	->
water	66:44	0:0	4	ry
op	66:47	0:0	4	*
water	66:49	0:0	4	2
arg	66:52	66:67	3	deshake->ry*2
water	66:52	0:0	4	deshake
op	66:59	0:0	4	->
water	66:61	0:0	4	ry
op	66:64	0:0	4	*
water	66:66	0:0	4	2
water	66:68	0:0	2	;
water	67:4	0:0	2	t
op	67:5	0:0	2	->
water	67:7	0:0	2	angle
op	67:13	0:0	2	=
call	67:15	67:43	2	av_clipf
arg	67:24	67:32	3	t->angle
water	67:24	0:0	4	t
op	67:25	0:0	4	->
water	67:27	0:0	4	angle
arg	67:34	67:38	3	-0.1
op	67:34	0:0	4	-
water	67:35	0:0	4	0
op	67:36	0:0	4	.
water	67:37	0:0	4	1
arg	67:40	67:43	3	0.1
water	67:40	0:0	4	0
op	67:41	0:0	4	.
water	67:42	0:0	4	1
water	67:44	0:0	2	;
