func	1:0	68:0	0	static int	mov_write_hdlr_tag
params	1:29	0:0	1	
param	1:30	1:45	2	AVIOContext *	pb
param	1:47	1:62	2	MOVTrack *	track
stmnts	0:0	67:31	1	
decl	3:4	3:54	2	const char	*hdlr
water	3:20	0:0	2	,
decl	3:4	3:54	2	const char	*descr
op	3:29	0:0	2	=
water	3:31	0:0	2	NULL
water	3:35	0:0	2	,
decl	3:4	3:54	2	const char	*hdlr_type
op	3:48	0:0	2	=
water	3:50	0:0	2	NULL
decl	4:4	4:31	2	int64_t	pos
op	4:16	0:0	2	=
call	4:18	4:30	3	avio_tell
arg	4:28	4:30	4	pb
water	4:28	0:0	5	pb
water	5:4	0:0	2	hdlr
op	5:14	0:0	2	=
water	5:16	0:0	2	"dhlr"
water	5:22	0:0	2	;
water	6:4	0:0	2	hdlr_type
op	6:14	0:0	2	=
water	6:16	0:0	2	"url "
water	6:22	0:0	2	;
water	7:4	0:0	2	descr
op	7:14	0:0	2	=
water	7:16	0:0	2	"DataHandler"
water	7:29	0:0	2	;
if	8:4	53:4	2	(track)
cond	8:8	8:8	3	track
water	8:8	0:0	4	track
stmts	8:15	53:4	3	
water	8:15	0:0	4	{
water	9:8	0:0	4	hdlr
op	9:13	0:0	4	=
water	9:15	0:0	4	(
water	9:16	0:0	4	track
op	9:21	0:0	4	->
water	9:23	0:0	4	mode
op	9:28	0:0	4	==
water	9:31	0:0	4	MODE_MOV
water	9:39	0:0	4	)
water	9:41	0:0	4	?
water	9:43	0:0	4	"mhlr"
water	9:50	0:0	4	:
water	9:52	0:0	4	"\0\0\0\0"
water	9:62	0:0	4	;
if	10:8	13:8	4	(track -> enc -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	10:12	10:38	5	track -> enc -> codec_type == AVMEDIA_TYPE_VIDEO
water	10:12	0:0	6	track
op	10:17	0:0	6	->
water	10:19	0:0	6	enc
op	10:22	0:0	6	->
water	10:24	0:0	6	codec_type
op	10:35	0:0	6	==
water	10:38	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	10:58	13:8	5	
water	10:58	0:0	6	{
water	11:12	0:0	6	hdlr_type
op	11:22	0:0	6	=
water	11:24	0:0	6	"vide"
water	11:30	0:0	6	;
water	12:12	0:0	6	descr
op	12:22	0:0	6	=
water	12:24	0:0	6	"VideoHandler"
water	12:38	0:0	6	;
water	13:8	0:0	6	}
else	13:10	16:8	4
stmts	13:15	16:8	5	
if	13:15	16:8	6	(track -> enc -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	13:19	13:45	7	track -> enc -> codec_type == AVMEDIA_TYPE_AUDIO
water	13:19	0:0	8	track
op	13:24	0:0	8	->
water	13:26	0:0	8	enc
op	13:29	0:0	8	->
water	13:31	0:0	8	codec_type
op	13:42	0:0	8	==
water	13:45	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	13:65	16:8	7	
water	13:65	0:0	8	{
water	14:12	0:0	8	hdlr_type
op	14:22	0:0	8	=
water	14:24	0:0	8	"soun"
water	14:30	0:0	8	;
water	15:12	0:0	8	descr
op	15:22	0:0	8	=
water	15:24	0:0	8	"SoundHandler"
water	15:38	0:0	8	;
water	16:8	0:0	8	}
else	16:10	30:8	4
stmts	16:15	30:8	5	
if	16:15	30:8	6	(track -> enc -> codec_type == AVMEDIA_TYPE_SUBTITLE)
cond	16:19	16:45	7	track -> enc -> codec_type == AVMEDIA_TYPE_SUBTITLE
water	16:19	0:0	8	track
op	16:24	0:0	8	->
water	16:26	0:0	8	enc
op	16:29	0:0	8	->
water	16:31	0:0	8	codec_type
op	16:42	0:0	8	==
water	16:45	0:0	8	AVMEDIA_TYPE_SUBTITLE
stmts	16:68	30:8	7	
water	16:68	0:0	8	{
if	17:12	20:12	8	(is_clcp_track (track ))
cond	17:16	17:35	9	is_clcp_track (track )
call	17:16	17:35	10	is_clcp_track
arg	17:30	17:35	11	track
water	17:30	0:0	12	track
stmts	17:38	20:12	9	
water	17:38	0:0	10	{
water	18:16	0:0	10	hdlr_type
op	18:26	0:0	10	=
water	18:28	0:0	10	"clcp"
water	18:34	0:0	10	;
water	19:16	0:0	10	descr
op	19:22	0:0	10	=
water	19:24	0:0	10	"ClosedCaptionHandler"
water	19:46	0:0	10	;
water	20:12	0:0	10	}
else	20:14	29:12	8
stmts	20:19	29:12	9	
water	20:19	0:0	10	{
if	21:16	23:16	10	(track -> tag ==MKTAG ('t' ,'x' ,'3' ,'g' ))
cond	21:20	21:55	11	track -> tag ==MKTAG ('t' ,'x' ,'3' ,'g' )
water	21:20	0:0	12	track
op	21:25	0:0	12	->
water	21:27	0:0	12	tag
op	21:31	0:0	12	==
call	21:34	21:55	12	MKTAG
arg	21:40	21:43	13	't'
water	21:40	0:0	14	't'
arg	21:44	21:47	13	'x'
water	21:44	0:0	14	'x'
arg	21:48	21:51	13	'3'
water	21:48	0:0	14	'3'
arg	21:52	21:55	13	'g'
water	21:52	0:0	14	'g'
stmts	21:58	23:16	11	
water	21:58	0:0	12	{
water	22:20	0:0	12	hdlr_type
op	22:30	0:0	12	=
water	22:32	0:0	12	"sbtl"
water	22:38	0:0	12	;
water	23:16	0:0	12	}
else	23:18	25:16	10
stmts	23:23	25:16	11	
if	23:23	25:16	12	(track -> tag ==MKTAG ('m' ,'p' ,'4' ,'s' ))
cond	23:27	23:62	13	track -> tag ==MKTAG ('m' ,'p' ,'4' ,'s' )
water	23:27	0:0	14	track
op	23:32	0:0	14	->
water	23:34	0:0	14	tag
op	23:38	0:0	14	==
call	23:41	23:62	14	MKTAG
arg	23:47	23:50	15	'm'
water	23:47	0:0	16	'm'
arg	23:51	23:54	15	'p'
water	23:51	0:0	16	'p'
arg	23:55	23:58	15	'4'
water	23:55	0:0	16	'4'
arg	23:59	23:62	15	's'
water	23:59	0:0	16	's'
stmts	23:65	25:16	13	
water	23:65	0:0	14	{
water	24:20	0:0	14	hdlr_type
op	24:30	0:0	14	=
water	24:32	0:0	14	"subp"
water	24:38	0:0	14	;
water	25:16	0:0	14	}
else	25:18	27:16	10
stmts	25:23	27:16	11	
water	25:23	0:0	12	{
water	26:20	0:0	12	hdlr_type
op	26:30	0:0	12	=
water	26:32	0:0	12	"text"
water	26:38	0:0	12	;
water	27:16	0:0	12	}
water	28:12	0:0	10	descr
op	28:18	0:0	10	=
water	28:20	0:0	10	"SubtitleHandler"
water	28:37	0:0	10	;
water	29:12	0:0	10	}
water	30:8	0:0	8	}
else	30:10	33:8	4
stmts	30:15	33:8	5	
if	30:15	33:8	6	(track -> enc -> codec_tag ==MKTAG ('r' ,'t' ,'p' ,' ' ))
cond	30:19	30:65	7	track -> enc -> codec_tag ==MKTAG ('r' ,'t' ,'p' ,' ' )
water	30:19	0:0	8	track
op	30:24	0:0	8	->
water	30:26	0:0	8	enc
op	30:29	0:0	8	->
water	30:31	0:0	8	codec_tag
op	30:41	0:0	8	==
call	30:44	30:65	8	MKTAG
arg	30:50	30:53	9	'r'
water	30:50	0:0	10	'r'
arg	30:54	30:57	9	't'
water	30:54	0:0	10	't'
arg	30:58	30:61	9	'p'
water	30:58	0:0	10	'p'
arg	30:62	30:65	9	' '
water	30:62	0:0	10	' '
stmts	30:68	33:8	7	
water	30:68	0:0	8	{
water	31:12	0:0	8	hdlr_type
op	31:22	0:0	8	=
water	31:24	0:0	8	"hint"
water	31:30	0:0	8	;
water	32:12	0:0	8	descr
op	32:22	0:0	8	=
water	32:24	0:0	8	"HintHandler"
water	32:37	0:0	8	;
water	33:8	0:0	8	}
else	33:10	36:8	4
stmts	33:15	36:8	5	
if	33:15	36:8	6	(track -> enc -> codec_tag ==MKTAG ('t' ,'m' ,'c' ,'d' ))
cond	33:19	33:65	7	track -> enc -> codec_tag ==MKTAG ('t' ,'m' ,'c' ,'d' )
water	33:19	0:0	8	track
op	33:24	0:0	8	->
water	33:26	0:0	8	enc
op	33:29	0:0	8	->
water	33:31	0:0	8	codec_tag
op	33:41	0:0	8	==
call	33:44	33:65	8	MKTAG
arg	33:50	33:53	9	't'
water	33:50	0:0	10	't'
arg	33:54	33:57	9	'm'
water	33:54	0:0	10	'm'
arg	33:58	33:61	9	'c'
water	33:58	0:0	10	'c'
arg	33:62	33:65	9	'd'
water	33:62	0:0	10	'd'
stmts	33:68	36:8	7	
water	33:68	0:0	8	{
water	34:12	0:0	8	hdlr_type
op	34:22	0:0	8	=
water	34:24	0:0	8	"tmcd"
water	34:30	0:0	8	;
water	35:12	0:0	8	descr
op	35:18	0:0	8	=
water	35:20	0:0	8	"TimeCodeHandler"
water	35:37	0:0	8	;
water	36:8	0:0	8	}
else	36:10	43:8	4
stmts	36:15	43:8	5	
water	36:15	0:0	6	{
decl	37:12	37:28	6	char	tag_buf[32]
call	38:12	39:57	6	av_get_codec_tag_string
arg	38:36	38:43	7	tag_buf
water	38:36	0:0	8	tag_buf
arg	38:45	38:60	7	sizeof(tag_buf)
op	38:45	0:0	8	sizeof
water	38:51	0:0	8	(
water	38:52	0:0	8	tag_buf
water	38:59	0:0	8	)
arg	39:36	39:57	7	track->enc->codec_tag
water	39:36	0:0	8	track
op	39:41	0:0	8	->
water	39:43	0:0	8	enc
op	39:46	0:0	8	->
water	39:48	0:0	8	codec_tag
water	39:58	0:0	6	;
call	40:12	42:49	6	av_log
arg	40:19	40:29	7	track->enc
water	40:19	0:0	8	track
op	40:24	0:0	8	->
water	40:26	0:0	8	enc
arg	40:31	40:45	7	AV_LOG_WARNING
water	40:31	0:0	8	AV_LOG_WARNING
arg	41:19	41:78	7	"Unknown hldr_type for %s / 0x%04X, writing dummy values\n"
water	41:19	0:0	8	"Unknown hldr_type for %s / 0x%04X, writing dummy values\n"
arg	42:19	42:26	7	tag_buf
water	42:19	0:0	8	tag_buf
arg	42:28	42:49	7	track->enc->codec_tag
water	42:28	0:0	8	track
op	42:33	0:0	8	->
water	42:35	0:0	8	enc
op	42:38	0:0	8	->
water	42:40	0:0	8	codec_tag
water	42:50	0:0	6	;
water	43:8	0:0	6	}
if	44:8	52:8	4	(track -> st)
cond	44:12	44:19	5	track -> st
water	44:12	0:0	6	track
op	44:17	0:0	6	->
water	44:19	0:0	6	st
stmts	44:23	52:8	5	
water	44:23	0:0	6	{
decl	48:12	48:32	6	AVDictionaryEntry	*t
water	49:12	0:0	6	t
op	49:14	0:0	6	=
call	49:16	49:67	6	av_dict_get
arg	49:28	49:47	7	track->st->metadata
water	49:28	0:0	8	track
op	49:33	0:0	8	->
water	49:35	0:0	8	st
op	49:37	0:0	8	->
water	49:39	0:0	8	metadata
arg	49:49	49:58	7	"handler"
water	49:49	0:0	8	"handler"
arg	49:60	49:64	7	NULL
water	49:60	0:0	8	NULL
arg	49:66	49:67	7	0
water	49:66	0:0	8	0
water	49:68	0:0	6	;
if	50:12	51:32	6	(t &&utf8len (t -> value ))
cond	50:16	50:37	7	t &&utf8len (t -> value )
water	50:16	0:0	8	t
op	50:18	0:0	8	&&
call	50:21	50:37	8	utf8len
arg	50:29	50:37	9	t->value
water	50:29	0:0	10	t
op	50:30	0:0	10	->
water	50:32	0:0	10	value
stmts	51:16	51:32	7	
water	51:16	0:0	8	descr
op	51:22	0:0	8	=
water	51:24	0:0	8	t
op	51:25	0:0	8	->
water	51:27	0:0	8	value
water	51:32	0:0	8	;
water	52:8	0:0	6	}
water	53:4	0:0	4	}
call	54:4	54:19	2	avio_wb32
arg	54:14	54:16	3	pb
water	54:14	0:0	4	pb
arg	54:18	54:19	3	0
water	54:18	0:0	4	0
water	54:20	0:0	2	;
call	55:4	55:27	2	ffio_wfourcc
arg	55:17	55:19	3	pb
water	55:17	0:0	4	pb
arg	55:21	55:27	3	"hdlr"
water	55:21	0:0	4	"hdlr"
water	55:28	0:0	2	;
call	56:4	56:19	2	avio_wb32
arg	56:14	56:16	3	pb
water	56:14	0:0	4	pb
arg	56:18	56:19	3	0
water	56:18	0:0	4	0
water	56:20	0:0	2	;
call	57:4	57:26	2	avio_write
arg	57:15	57:17	3	pb
water	57:15	0:0	4	pb
arg	57:19	57:23	3	hdlr
water	57:19	0:0	4	hdlr
arg	57:25	57:26	3	4
water	57:25	0:0	4	4
water	57:27	0:0	2	;
call	58:4	58:30	2	ffio_wfourcc
arg	58:17	58:19	3	pb
water	58:17	0:0	4	pb
arg	58:21	58:30	3	hdlr_type
water	58:21	0:0	4	hdlr_type
water	58:31	0:0	2	;
call	59:4	59:19	2	avio_wb32
arg	59:14	59:16	3	pb
water	59:14	0:0	4	pb
arg	59:18	59:19	3	0
water	59:18	0:0	4	0
water	59:20	0:0	2	;
call	60:4	60:19	2	avio_wb32
arg	60:14	60:16	3	pb
water	60:14	0:0	4	pb
arg	60:18	60:19	3	0
water	60:18	0:0	4	0
water	60:20	0:0	2	;
call	61:4	61:19	2	avio_wb32
arg	61:14	61:16	3	pb
water	61:14	0:0	4	pb
arg	61:18	61:19	3	0
water	61:18	0:0	4	0
water	61:20	0:0	2	;
if	62:4	63:34	2	(! track || track -> mode == MODE_MOV)
cond	62:8	62:33	3	! track || track -> mode == MODE_MOV
op	62:8	0:0	4	!
water	62:9	0:0	4	track
op	62:15	0:0	4	||
water	62:18	0:0	4	track
op	62:23	0:0	4	->
water	62:25	0:0	4	mode
op	62:30	0:0	4	==
water	62:33	0:0	4	MODE_MOV
stmts	63:8	63:34	3	
call	63:8	63:33	4	avio_w8
arg	63:16	63:18	5	pb
water	63:16	0:0	6	pb
arg	63:20	63:33	5	strlen(descr)
call	63:20	63:32	6	strlen
arg	63:27	63:32	7	descr
water	63:27	0:0	8	descr
water	63:34	0:0	4	;
call	64:4	64:39	2	avio_write
arg	64:15	64:17	3	pb
water	64:15	0:0	4	pb
arg	64:19	64:24	3	descr
water	64:19	0:0	4	descr
arg	64:26	64:39	3	strlen(descr)
call	64:26	64:38	4	strlen
arg	64:33	64:38	5	descr
water	64:33	0:0	6	descr
water	64:40	0:0	2	;
if	65:4	66:22	2	(track && track -> mode != MODE_MOV)
cond	65:8	65:32	3	track && track -> mode != MODE_MOV
water	65:8	0:0	4	track
op	65:14	0:0	4	&&
water	65:17	0:0	4	track
op	65:22	0:0	4	->
water	65:24	0:0	4	mode
op	65:29	0:0	4	!=
water	65:32	0:0	4	MODE_MOV
stmts	66:8	66:22	3	
call	66:8	66:21	4	avio_w8
arg	66:16	66:18	5	pb
water	66:16	0:0	6	pb
arg	66:20	66:21	5	0
water	66:20	0:0	6	0
water	66:22	0:0	4	;
return	67:4	67:31	2	update_size(pb,pos)
call	67:11	67:30	3	update_size
arg	67:23	67:25	4	pb
water	67:23	0:0	5	pb
arg	67:27	67:30	4	pos
water	67:27	0:0	5	pos
