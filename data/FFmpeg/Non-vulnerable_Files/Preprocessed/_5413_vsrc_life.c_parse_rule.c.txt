func	2:0	38:0	0	static int	parse_rule
params	2:21	0:0	1	
param	2:22	2:41	2	uint16_t *	born_rule
param	2:43	2:62	2	uint16_t *	stay_rule
param	3:22	3:42	2	const char *	rule_str
param	3:44	3:57	2	void *	log_ctx
stmnts	0:0	37:26	1	
decl	5:4	5:14	2	char	*tail
decl	6:4	6:28	2	const char	*p
op	6:18	0:0	2	=
water	6:20	0:0	2	rule_str
op	7:4	0:0	2	*
water	7:5	0:0	2	born_rule
op	7:15	0:0	2	=
water	7:17	0:0	2	0
water	7:18	0:0	2	;
op	8:4	0:0	2	*
water	8:5	0:0	2	stay_rule
op	8:15	0:0	2	=
water	8:17	0:0	2	0
water	8:18	0:0	2	;
if	9:4	25:4	2	(strchr ("bBsS" ,* p ))
cond	9:8	9:25	3	strchr ("bBsS" ,* p )
call	9:8	9:25	4	strchr
arg	9:15	9:21	5	"bBsS"
water	9:15	0:0	6	"bBsS"
arg	9:23	9:25	5	*p
op	9:23	0:0	6	*
water	9:24	0:0	6	p
stmts	9:28	25:4	3	
water	9:28	0:0	4	{
do	12:8	22:8	4	(strchr ("bBsS" ,* p ))
cond	22:17	22:34	5	strchr ("bBsS" ,* p )
call	22:17	22:34	6	strchr
arg	22:24	22:30	7	"bBsS"
water	22:24	0:0	8	"bBsS"
arg	22:32	22:34	7	*p
op	22:32	0:0	8	*
water	22:33	0:0	8	p
stmts	12:11	22:8	5	
water	12:11	0:0	6	{
decl	13:12	13:77	6	uint16_t	*rule
op	13:27	0:0	6	=
water	13:29	0:0	6	(
op	13:30	0:0	6	*
water	13:31	0:0	6	p
op	13:33	0:0	6	==
water	13:36	0:0	6	'b'
op	13:40	0:0	6	||
op	13:43	0:0	6	*
water	13:44	0:0	6	p
op	13:46	0:0	6	==
water	13:49	0:0	6	'B'
water	13:52	0:0	6	)
water	13:54	0:0	6	?
water	13:56	0:0	6	born_rule
water	13:66	0:0	6	:
water	13:68	0:0	6	stay_rule
water	14:12	0:0	6	p
op	14:13	0:0	6	++
water	14:15	0:0	6	;
while	15:12	18:12	6	(* p >= '0' && * p <= '8')
cond	15:19	15:38	7	* p >= '0' && * p <= '8'
op	15:19	0:0	8	*
water	15:20	0:0	8	p
op	15:22	0:0	8	>=
water	15:25	0:0	8	'0'
op	15:29	0:0	8	&&
op	15:32	0:0	8	*
water	15:33	0:0	8	p
op	15:35	0:0	8	<=
water	15:38	0:0	8	'8'
stmts	15:43	18:12	7	
water	15:43	0:0	8	{
op	16:16	0:0	8	*
water	16:17	0:0	8	rule
op	16:22	0:0	8	+=
water	16:25	0:0	8	1
op	16:26	0:0	8	<<
water	16:28	0:0	8	(
op	16:29	0:0	8	*
water	16:30	0:0	8	p
op	16:32	0:0	8	-
water	16:34	0:0	8	'0'
water	16:37	0:0	8	)
water	16:38	0:0	8	;
water	17:16	0:0	8	p
op	17:17	0:0	8	++
water	17:19	0:0	8	;
water	18:12	0:0	8	}
if	19:12	20:21	6	(* p != '/')
cond	19:16	19:22	7	* p != '/'
op	19:16	0:0	8	*
water	19:17	0:0	8	p
op	19:19	0:0	8	!=
water	19:22	0:0	8	'/'
stmts	20:16	20:21	7	
break	20:16	20:21	8	
water	21:12	0:0	6	p
op	21:13	0:0	6	++
water	21:15	0:0	6	;
water	22:8	0:0	6	}
water	22:36	0:0	4	;
if	23:8	24:22	4	(* p)
cond	23:12	23:13	5	* p
op	23:12	0:0	6	*
water	23:13	0:0	6	p
stmts	24:12	24:22	5	
goto	24:12	24:22	6	error
water	24:17	0:0	7	error
water	25:4	0:0	4	}
else	25:6	33:4	2
stmts	25:11	33:4	3	
water	25:11	0:0	4	{
water	28:8	0:0	4	long
water	28:13	0:0	4	int
water	28:17	0:0	4	rule
op	28:22	0:0	4	=
call	28:24	28:50	4	strtol
arg	28:31	28:39	5	rule_str
water	28:31	0:0	6	rule_str
arg	28:41	28:46	5	&tail
op	28:41	0:0	6	&
water	28:42	0:0	6	tail
arg	28:48	28:50	5	10
water	28:48	0:0	6	10
water	28:51	0:0	4	;
if	29:8	30:22	4	(* tail)
cond	29:12	29:13	5	* tail
op	29:12	0:0	6	*
water	29:13	0:0	6	tail
stmts	30:12	30:22	5	
goto	30:12	30:22	6	error
water	30:17	0:0	7	error
op	31:8	0:0	4	*
water	31:9	0:0	4	born_rule
op	31:20	0:0	4	=
water	31:22	0:0	4	(
water	31:23	0:0	4	(
water	31:24	0:0	4	1
op	31:25	0:0	4	<<
water	31:27	0:0	4	9
water	31:28	0:0	4	)
op	31:29	0:0	4	-
water	31:30	0:0	4	1
water	31:31	0:0	4	)
op	31:33	0:0	4	&
water	31:35	0:0	4	rule
water	31:39	0:0	4	;
op	32:8	0:0	4	*
water	32:9	0:0	4	stay_rule
op	32:19	0:0	4	=
water	32:21	0:0	4	rule
op	32:26	0:0	4	>>
water	32:29	0:0	4	9
water	32:30	0:0	4	;
water	33:4	0:0	4	}
return	34:4	34:12	2	0
water	34:11	0:0	3	0
label	35:0	35:5	2	error :
call	36:4	36:79	2	av_log
arg	36:11	36:18	3	log_ctx
water	36:11	0:0	4	log_ctx
arg	36:20	36:32	3	AV_LOG_ERROR
water	36:20	0:0	4	AV_LOG_ERROR
arg	36:34	36:69	3	"Invalid rule code '%s' provided\n"
water	36:34	0:0	4	"Invalid rule code '%s' provided\n"
arg	36:71	36:79	3	rule_str
water	36:71	0:0	4	rule_str
water	36:80	0:0	2	;
return	37:4	37:26	2	AVERROR(EINVAL)
call	37:11	37:25	3	AVERROR
arg	37:19	37:25	4	EINVAL
water	37:19	0:0	5	EINVAL
