func	1:0	183:0	0	static void	apply_channel_coupling
params	1:34	0:0	1	
param	1:35	1:54	2	AC3EncodeContext *	s
stmnts	3:4	182:33	1	
call	3:4	3:88	2	LOCAL_ALIGNED_16
arg	3:21	3:29	3	CoefType
water	3:21	0:0	4	CoefType
arg	3:31	3:41	3	cpl_coords
water	3:31	0:0	4	cpl_coords
arg	3:48	3:64	3	[AC3_MAX_BLOCKS]
op	3:48	0:0	4	[
water	3:49	0:0	4	AC3_MAX_BLOCKS
op	3:63	0:0	4	]
arg	3:66	3:88	3	[AC3_MAX_CHANNELS][16]
op	3:66	0:0	4	[
water	3:67	0:0	4	AC3_MAX_CHANNELS
op	3:83	0:0	4	]
op	3:84	0:0	4	[
water	3:85	0:0	4	16
op	3:87	0:0	4	]
water	3:89	0:0	2	;
call	5:4	5:88	2	LOCAL_ALIGNED_16
arg	5:21	5:28	3	int32_t
water	5:21	0:0	4	int32_t
arg	5:30	5:46	3	fixed_cpl_coords
water	5:30	0:0	4	fixed_cpl_coords
arg	5:48	5:64	3	[AC3_MAX_BLOCKS]
op	5:48	0:0	4	[
water	5:49	0:0	4	AC3_MAX_BLOCKS
op	5:63	0:0	4	]
arg	5:66	5:88	3	[AC3_MAX_CHANNELS][16]
op	5:66	0:0	4	[
water	5:67	0:0	4	AC3_MAX_CHANNELS
op	5:83	0:0	4	]
op	5:84	0:0	4	[
water	5:85	0:0	4	16
op	5:87	0:0	4	]
water	5:89	0:0	2	;
call	7:4	7:30	2	int32_t
arg	7:13	7:30	3	*fixed_cpl_coords
op	7:13	0:0	4	*
water	7:14	0:0	4	fixed_cpl_coords
op	7:31	0:0	2	[
water	7:32	0:0	2	AC3_MAX_CHANNELS
op	7:48	0:0	2	]
op	7:49	0:0	2	[
water	7:50	0:0	2	16
op	7:52	0:0	2	]
op	7:54	0:0	2	=
water	7:56	0:0	2	cpl_coords
water	7:66	0:0	2	;
decl	9:4	9:37	2	int	av_uninit
water	9:17	0:0	2	(
water	9:18	0:0	2	blk
water	9:21	0:0	2	)
water	9:22	0:0	2	,
decl	9:4	9:37	2	int	ch
water	9:26	0:0	2	,
decl	9:4	9:37	2	int	bnd
water	9:31	0:0	2	,
decl	9:4	9:37	2	int	i
water	9:34	0:0	2	,
decl	9:4	9:37	2	int	j
water	10:4	0:0	2	CoefSumType
water	10:16	0:0	2	energy
op	10:22	0:0	2	[
water	10:23	0:0	2	AC3_MAX_BLOCKS
op	10:37	0:0	2	]
op	10:38	0:0	2	[
water	10:39	0:0	2	AC3_MAX_CHANNELS
op	10:55	0:0	2	]
op	10:56	0:0	2	[
water	10:57	0:0	2	16
op	10:59	0:0	2	]
op	10:61	0:0	2	=
water	10:63	0:0	2	{
water	10:64	0:0	2	{
water	10:65	0:0	2	{
water	10:66	0:0	2	0
water	10:67	0:0	2	}
water	10:68	0:0	2	}
water	10:69	0:0	2	}
water	10:70	0:0	2	;
decl	11:4	11:32	2	int	cpl_start
water	11:17	0:0	2	,
decl	11:4	11:32	2	int	num_cpl_coefs
call	12:4	12:68	2	memset
arg	12:11	12:21	3	cpl_coords
water	12:11	0:0	4	cpl_coords
arg	12:29	12:30	3	0
water	12:29	0:0	4	0
arg	12:32	12:68	3	AC3_MAX_BLOCKS*sizeof(*cpl_coords)
water	12:32	0:0	4	AC3_MAX_BLOCKS
op	12:47	0:0	4	*
op	12:49	0:0	4	sizeof
water	12:55	0:0	4	(
op	12:56	0:0	4	*
water	12:57	0:0	4	cpl_coords
water	12:67	0:0	4	)
water	12:69	0:0	2	;
call	14:4	14:68	2	memset
arg	14:11	14:27	3	fixed_cpl_coords
water	14:11	0:0	4	fixed_cpl_coords
arg	14:29	14:30	3	0
water	14:29	0:0	4	0
arg	14:32	14:68	3	AC3_MAX_BLOCKS*sizeof(*cpl_coords)
water	14:32	0:0	4	AC3_MAX_BLOCKS
op	14:47	0:0	4	*
op	14:49	0:0	4	sizeof
water	14:55	0:0	4	(
op	14:56	0:0	4	*
water	14:57	0:0	4	cpl_coords
water	14:67	0:0	4	)
water	14:69	0:0	2	;
water	18:4	0:0	2	cpl_start
op	18:18	0:0	2	=
water	18:20	0:0	2	s
op	18:21	0:0	2	->
water	18:23	0:0	2	start_freq
op	18:33	0:0	2	[
water	18:34	0:0	2	CPL_CH
op	18:40	0:0	2	]
op	18:42	0:0	2	-
water	18:44	0:0	2	1
water	18:45	0:0	2	;
water	19:4	0:0	2	num_cpl_coefs
op	19:18	0:0	2	=
call	19:20	19:60	2	FFALIGN
arg	19:28	19:56	3	s->num_cpl_subbands*12+1
water	19:28	0:0	4	s
op	19:29	0:0	4	->
water	19:31	0:0	4	num_cpl_subbands
op	19:48	0:0	4	*
water	19:50	0:0	4	12
op	19:53	0:0	4	+
water	19:55	0:0	4	1
arg	19:58	19:60	3	32
water	19:58	0:0	4	32
water	19:61	0:0	2	;
water	20:4	0:0	2	cpl_start
op	20:18	0:0	2	=
call	20:20	20:56	2	FFMIN
arg	20:26	20:29	3	256
water	20:26	0:0	4	256
arg	20:31	20:56	3	cpl_start+num_cpl_coefs
water	20:31	0:0	4	cpl_start
op	20:41	0:0	4	+
water	20:43	0:0	4	num_cpl_coefs
op	20:58	0:0	2	-
water	20:60	0:0	2	num_cpl_coefs
water	20:73	0:0	2	;
for	22:4	37:4	2	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	22:9	22:16	3	blk = 0 ;
water	22:9	0:0	4	blk
op	22:13	0:0	4	=
water	22:15	0:0	4	0
water	22:16	0:0	4	;
cond	22:18	22:27	3	blk < s -> num_blocks
water	22:18	0:0	4	blk
op	22:22	0:0	4	<
water	22:24	0:0	4	s
op	22:25	0:0	4	->
water	22:27	0:0	4	num_blocks
forexpr	22:39	22:42	3	blk ++
water	22:39	0:0	4	blk
op	22:42	0:0	4	++
stmts	22:46	37:4	3	
water	22:46	0:0	4	{
decl	23:8	23:41	4	AC3Block	*block
op	23:24	0:0	4	=
op	23:26	0:0	4	&
water	23:27	0:0	4	s
op	23:28	0:0	4	->
water	23:30	0:0	4	blocks
op	23:36	0:0	4	[
water	23:37	0:0	4	blk
op	23:40	0:0	4	]
decl	24:8	24:65	4	CoefType	*cpl_coef
op	24:27	0:0	4	=
op	24:29	0:0	4	&
water	24:30	0:0	4	block
op	24:35	0:0	4	->
water	24:37	0:0	4	mdct_coef
op	24:46	0:0	4	[
water	24:47	0:0	4	CPL_CH
op	24:53	0:0	4	]
op	24:54	0:0	4	[
water	24:55	0:0	4	cpl_start
op	24:64	0:0	4	]
if	25:8	26:20	4	(! block -> cpl_in_use)
cond	25:12	25:20	5	! block -> cpl_in_use
op	25:12	0:0	6	!
water	25:13	0:0	6	block
op	25:18	0:0	6	->
water	25:20	0:0	6	cpl_in_use
stmts	26:12	26:20	5	
continue	26:12	26:20	6	
call	27:8	27:61	4	memset
arg	27:15	27:23	5	cpl_coef
water	27:15	0:0	6	cpl_coef
arg	27:25	27:26	5	0
water	27:25	0:0	6	0
arg	27:28	27:61	5	num_cpl_coefs*sizeof(*cpl_coef)
water	27:28	0:0	6	num_cpl_coefs
op	27:42	0:0	6	*
op	27:44	0:0	6	sizeof
water	27:50	0:0	6	(
op	27:51	0:0	6	*
water	27:52	0:0	6	cpl_coef
water	27:60	0:0	6	)
water	27:62	0:0	4	;
for	28:8	34:8	4	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	28:13	28:19	5	ch = 1 ;
water	28:13	0:0	6	ch
op	28:16	0:0	6	=
water	28:18	0:0	6	1
water	28:19	0:0	6	;
cond	28:21	28:30	5	ch <= s -> fbw_channels
water	28:21	0:0	6	ch
op	28:24	0:0	6	<=
water	28:27	0:0	6	s
op	28:28	0:0	6	->
water	28:30	0:0	6	fbw_channels
forexpr	28:44	28:46	5	ch ++
water	28:44	0:0	6	ch
op	28:46	0:0	6	++
stmts	28:50	34:8	5	
water	28:50	0:0	6	{
decl	29:12	29:64	6	CoefType	*ch_coef
op	29:30	0:0	6	=
op	29:32	0:0	6	&
water	29:33	0:0	6	block
op	29:38	0:0	6	->
water	29:40	0:0	6	mdct_coef
op	29:49	0:0	6	[
water	29:50	0:0	6	ch
op	29:52	0:0	6	]
op	29:53	0:0	6	[
water	29:54	0:0	6	cpl_start
op	29:63	0:0	6	]
if	30:12	31:24	6	(! block -> channel_in_cpl [ ch ])
cond	30:16	30:41	7	! block -> channel_in_cpl [ ch ]
op	30:16	0:0	8	!
water	30:17	0:0	8	block
op	30:22	0:0	8	->
water	30:24	0:0	8	channel_in_cpl
op	30:38	0:0	8	[
water	30:39	0:0	8	ch
op	30:41	0:0	8	]
stmts	31:16	31:24	7	
continue	31:16	31:24	8	
for	32:12	33:41	6	(i = 0 ;i < num_cpl_coefs;i ++)
forinit	32:17	32:22	7	i = 0 ;
water	32:17	0:0	8	i
op	32:19	0:0	8	=
water	32:21	0:0	8	0
water	32:22	0:0	8	;
cond	32:24	32:28	7	i < num_cpl_coefs
water	32:24	0:0	8	i
op	32:26	0:0	8	<
water	32:28	0:0	8	num_cpl_coefs
forexpr	32:43	32:44	7	i ++
water	32:43	0:0	8	i
op	32:44	0:0	8	++
stmts	33:16	33:41	7	
water	33:16	0:0	8	cpl_coef
op	33:24	0:0	8	[
water	33:25	0:0	8	i
op	33:26	0:0	8	]
op	33:28	0:0	8	+=
water	33:31	0:0	8	ch_coef
op	33:38	0:0	8	[
water	33:39	0:0	8	i
op	33:40	0:0	8	]
water	33:41	0:0	8	;
water	34:8	0:0	6	}
call	36:8	36:59	4	clip_coefficients
arg	36:26	36:34	5	&s->adsp
op	36:26	0:0	6	&
water	36:27	0:0	6	s
op	36:28	0:0	6	->
water	36:30	0:0	6	adsp
arg	36:36	36:44	5	cpl_coef
water	36:36	0:0	6	cpl_coef
arg	36:46	36:59	5	num_cpl_coefs
water	36:46	0:0	6	num_cpl_coefs
water	36:60	0:0	4	;
water	37:4	0:0	4	}
water	40:4	0:0	2	bnd
op	40:8	0:0	2	=
water	40:10	0:0	2	0
water	40:11	0:0	2	;
water	41:4	0:0	2	i
op	41:6	0:0	2	=
water	41:8	0:0	2	s
op	41:9	0:0	2	->
water	41:11	0:0	2	start_freq
op	41:21	0:0	2	[
water	41:22	0:0	2	CPL_CH
op	41:28	0:0	2	]
water	41:29	0:0	2	;
while	42:4	57:4	2	(i < s -> cpl_end_freq)
cond	42:11	42:18	3	i < s -> cpl_end_freq
water	42:11	0:0	4	i
op	42:13	0:0	4	<
water	42:15	0:0	4	s
op	42:16	0:0	4	->
water	42:18	0:0	4	cpl_end_freq
stmts	42:32	57:4	3	
water	42:32	0:0	4	{
decl	43:8	43:46	4	int	band_size
op	43:22	0:0	4	=
water	43:24	0:0	4	s
op	43:25	0:0	4	->
water	43:27	0:0	4	cpl_band_sizes
op	43:41	0:0	4	[
water	43:42	0:0	4	bnd
op	43:45	0:0	4	]
for	44:8	54:8	4	(ch = CPL_CH ;ch <= s -> fbw_channels;ch ++)
forinit	44:13	44:24	5	ch = CPL_CH ;
water	44:13	0:0	6	ch
op	44:16	0:0	6	=
water	44:18	0:0	6	CPL_CH
water	44:24	0:0	6	;
cond	44:26	44:35	5	ch <= s -> fbw_channels
water	44:26	0:0	6	ch
op	44:29	0:0	6	<=
water	44:32	0:0	6	s
op	44:33	0:0	6	->
water	44:35	0:0	6	fbw_channels
forexpr	44:49	44:51	5	ch ++
water	44:49	0:0	6	ch
op	44:51	0:0	6	++
stmts	44:55	54:8	5	
water	44:55	0:0	6	{
for	45:12	53:12	6	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	45:17	45:24	7	blk = 0 ;
water	45:17	0:0	8	blk
op	45:21	0:0	8	=
water	45:23	0:0	8	0
water	45:24	0:0	8	;
cond	45:26	45:35	7	blk < s -> num_blocks
water	45:26	0:0	8	blk
op	45:30	0:0	8	<
water	45:32	0:0	8	s
op	45:33	0:0	8	->
water	45:35	0:0	8	num_blocks
forexpr	45:47	45:50	7	blk ++
water	45:47	0:0	8	blk
op	45:50	0:0	8	++
stmts	45:54	53:12	7	
water	45:54	0:0	8	{
decl	46:16	46:49	8	AC3Block	*block
op	46:32	0:0	8	=
op	46:34	0:0	8	&
water	46:35	0:0	8	s
op	46:36	0:0	8	->
water	46:38	0:0	8	blocks
op	46:44	0:0	8	[
water	46:45	0:0	8	blk
op	46:48	0:0	8	]
if	47:16	48:28	8	(! block -> cpl_in_use || ( ch > CPL_CH && ! block -> channel_in_cpl [ ch ] ))
cond	47:20	47:84	9	! block -> cpl_in_use || ( ch > CPL_CH && ! block -> channel_in_cpl [ ch ] )
op	47:20	0:0	10	!
water	47:21	0:0	10	block
op	47:26	0:0	10	->
water	47:28	0:0	10	cpl_in_use
op	47:39	0:0	10	||
water	47:42	0:0	10	(
water	47:43	0:0	10	ch
op	47:46	0:0	10	>
water	47:48	0:0	10	CPL_CH
op	47:55	0:0	10	&&
op	47:58	0:0	10	!
water	47:59	0:0	10	block
op	47:64	0:0	10	->
water	47:66	0:0	10	channel_in_cpl
op	47:80	0:0	10	[
water	47:81	0:0	10	ch
op	47:83	0:0	10	]
water	47:84	0:0	10	)
stmts	48:20	48:28	9	
continue	48:20	48:28	10	
for	49:16	52:16	8	(j = 0 ;j < band_size;j ++)
forinit	49:21	49:26	9	j = 0 ;
water	49:21	0:0	10	j
op	49:23	0:0	10	=
water	49:25	0:0	10	0
water	49:26	0:0	10	;
cond	49:28	49:32	9	j < band_size
water	49:28	0:0	10	j
op	49:30	0:0	10	<
water	49:32	0:0	10	band_size
forexpr	49:43	49:44	9	j ++
water	49:43	0:0	10	j
op	49:44	0:0	10	++
stmts	49:48	52:16	9	
water	49:48	0:0	10	{
decl	50:20	50:58	10	CoefType	v
op	50:31	0:0	10	=
water	50:33	0:0	10	block
op	50:38	0:0	10	->
water	50:40	0:0	10	mdct_coef
op	50:49	0:0	10	[
water	50:50	0:0	10	ch
op	50:52	0:0	10	]
op	50:53	0:0	10	[
water	50:54	0:0	10	i
op	50:55	0:0	10	+
water	50:56	0:0	10	j
op	50:57	0:0	10	]
call	51:20	51:55	10	MAC_COEF
arg	51:29	51:49	11	energy[blk][ch][bnd]
water	51:29	0:0	12	energy
op	51:35	0:0	12	[
water	51:36	0:0	12	blk
op	51:39	0:0	12	]
op	51:40	0:0	12	[
water	51:41	0:0	12	ch
op	51:43	0:0	12	]
op	51:44	0:0	12	[
water	51:45	0:0	12	bnd
op	51:48	0:0	12	]
arg	51:51	51:52	11	v
water	51:51	0:0	12	v
arg	51:54	51:55	11	v
water	51:54	0:0	12	v
water	51:56	0:0	10	;
water	52:16	0:0	10	}
water	53:12	0:0	8	}
water	54:8	0:0	6	}
water	55:8	0:0	4	i
op	55:10	0:0	4	+=
water	55:13	0:0	4	band_size
water	55:22	0:0	4	;
water	56:8	0:0	4	bnd
op	56:11	0:0	4	++
water	56:13	0:0	4	;
water	57:4	0:0	4	}
for	59:4	71:4	2	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	59:9	59:16	3	blk = 0 ;
water	59:9	0:0	4	blk
op	59:13	0:0	4	=
water	59:15	0:0	4	0
water	59:16	0:0	4	;
cond	59:18	59:27	3	blk < s -> num_blocks
water	59:18	0:0	4	blk
op	59:22	0:0	4	<
water	59:24	0:0	4	s
op	59:25	0:0	4	->
water	59:27	0:0	4	num_blocks
forexpr	59:39	59:42	3	blk ++
water	59:39	0:0	4	blk
op	59:42	0:0	4	++
stmts	59:46	71:4	3	
water	59:46	0:0	4	{
decl	60:8	60:42	4	AC3Block	*block
op	60:25	0:0	4	=
op	60:27	0:0	4	&
water	60:28	0:0	4	s
op	60:29	0:0	4	->
water	60:31	0:0	4	blocks
op	60:37	0:0	4	[
water	60:38	0:0	4	blk
op	60:41	0:0	4	]
if	61:8	62:20	4	(! block -> cpl_in_use)
cond	61:12	61:20	5	! block -> cpl_in_use
op	61:12	0:0	6	!
water	61:13	0:0	6	block
op	61:18	0:0	6	->
water	61:20	0:0	6	cpl_in_use
stmts	62:12	62:20	5	
continue	62:12	62:20	6	
for	63:8	70:8	4	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	63:13	63:19	5	ch = 1 ;
water	63:13	0:0	6	ch
op	63:16	0:0	6	=
water	63:18	0:0	6	1
water	63:19	0:0	6	;
cond	63:21	63:30	5	ch <= s -> fbw_channels
water	63:21	0:0	6	ch
op	63:24	0:0	6	<=
water	63:27	0:0	6	s
op	63:28	0:0	6	->
water	63:30	0:0	6	fbw_channels
forexpr	63:44	63:46	5	ch ++
water	63:44	0:0	6	ch
op	63:46	0:0	6	++
stmts	63:50	70:8	5	
water	63:50	0:0	6	{
if	64:12	65:24	6	(! block -> channel_in_cpl [ ch ])
cond	64:16	64:41	7	! block -> channel_in_cpl [ ch ]
op	64:16	0:0	8	!
water	64:17	0:0	8	block
op	64:22	0:0	8	->
water	64:24	0:0	8	channel_in_cpl
op	64:38	0:0	8	[
water	64:39	0:0	8	ch
op	64:41	0:0	8	]
stmts	65:16	65:24	7	
continue	65:16	65:24	8	
for	66:12	69:12	6	(bnd = 0 ;bnd < s -> num_cpl_bands;bnd ++)
forinit	66:17	66:24	7	bnd = 0 ;
water	66:17	0:0	8	bnd
op	66:21	0:0	8	=
water	66:23	0:0	8	0
water	66:24	0:0	8	;
cond	66:26	66:35	7	bnd < s -> num_cpl_bands
water	66:26	0:0	8	bnd
op	66:30	0:0	8	<
water	66:32	0:0	8	s
op	66:33	0:0	8	->
water	66:35	0:0	8	num_cpl_bands
forexpr	66:50	66:53	7	bnd ++
water	66:50	0:0	8	bnd
op	66:53	0:0	8	++
stmts	66:57	69:12	7	
water	66:57	0:0	8	{
water	67:16	0:0	8	cpl_coords
op	67:26	0:0	8	[
water	67:27	0:0	8	blk
op	67:30	0:0	8	]
op	67:31	0:0	8	[
water	67:32	0:0	8	ch
op	67:34	0:0	8	]
op	67:35	0:0	8	[
water	67:36	0:0	8	bnd
op	67:39	0:0	8	]
op	67:41	0:0	8	=
call	67:43	68:82	8	calc_cpl_coord
arg	67:58	67:78	9	energy[blk][ch][bnd]
water	67:58	0:0	10	energy
op	67:64	0:0	10	[
water	67:65	0:0	10	blk
op	67:68	0:0	10	]
op	67:69	0:0	10	[
water	67:70	0:0	10	ch
op	67:72	0:0	10	]
op	67:73	0:0	10	[
water	67:74	0:0	10	bnd
op	67:77	0:0	10	]
arg	68:58	68:82	9	energy[blk][CPL_CH][bnd]
water	68:58	0:0	10	energy
op	68:64	0:0	10	[
water	68:65	0:0	10	blk
op	68:68	0:0	10	]
op	68:69	0:0	10	[
water	68:70	0:0	10	CPL_CH
op	68:76	0:0	10	]
op	68:77	0:0	10	[
water	68:78	0:0	10	bnd
op	68:81	0:0	10	]
water	68:83	0:0	8	;
water	69:12	0:0	8	}
water	70:8	0:0	6	}
water	71:4	0:0	4	}
for	73:4	105:4	2	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	73:9	73:16	3	blk = 0 ;
water	73:9	0:0	4	blk
op	73:13	0:0	4	=
water	73:15	0:0	4	0
water	73:16	0:0	4	;
cond	73:18	73:27	3	blk < s -> num_blocks
water	73:18	0:0	4	blk
op	73:22	0:0	4	<
water	73:24	0:0	4	s
op	73:25	0:0	4	->
water	73:27	0:0	4	num_blocks
forexpr	73:39	73:42	3	blk ++
water	73:39	0:0	4	blk
op	73:42	0:0	4	++
stmts	73:46	105:4	3	
water	73:46	0:0	4	{
decl	74:8	74:42	4	AC3Block	*block
op	74:25	0:0	4	=
op	74:27	0:0	4	&
water	74:28	0:0	4	s
op	74:29	0:0	4	->
water	74:31	0:0	4	blocks
op	74:37	0:0	4	[
water	74:38	0:0	4	blk
op	74:41	0:0	4	]
decl	75:8	75:57	4	AC3Block	*block0
op	75:25	0:0	4	=
water	75:27	0:0	4	blk
water	75:31	0:0	4	?
op	75:33	0:0	4	&
water	75:34	0:0	4	s
op	75:35	0:0	4	->
water	75:37	0:0	4	blocks
op	75:43	0:0	4	[
water	75:44	0:0	4	blk
op	75:47	0:0	4	-
water	75:48	0:0	4	1
op	75:49	0:0	4	]
water	75:51	0:0	4	:
water	75:53	0:0	4	NULL
call	76:8	76:70	4	memset
arg	76:15	76:36	5	block->new_cpl_coords
water	76:15	0:0	6	block
op	76:20	0:0	6	->
water	76:22	0:0	6	new_cpl_coords
arg	76:38	76:39	5	0
water	76:38	0:0	6	0
arg	76:41	76:70	5	sizeof(block->new_cpl_coords)
op	76:41	0:0	6	sizeof
water	76:47	0:0	6	(
water	76:48	0:0	6	block
op	76:53	0:0	6	->
water	76:55	0:0	6	new_cpl_coords
water	76:69	0:0	6	)
water	76:71	0:0	4	;
if	77:8	104:8	4	(block -> cpl_in_use)
cond	77:12	77:19	5	block -> cpl_in_use
water	77:12	0:0	6	block
op	77:17	0:0	6	->
water	77:19	0:0	6	cpl_in_use
stmts	77:31	104:8	5	
water	77:31	0:0	6	{
if	83:12	86:12	6	(blk == 0 || ! block0 -> cpl_in_use)
cond	83:16	83:37	7	blk == 0 || ! block0 -> cpl_in_use
water	83:16	0:0	8	blk
op	83:20	0:0	8	==
water	83:23	0:0	8	0
op	83:25	0:0	8	||
op	83:28	0:0	8	!
water	83:29	0:0	8	block0
op	83:35	0:0	8	->
water	83:37	0:0	8	cpl_in_use
stmts	83:49	86:12	7	
water	83:49	0:0	8	{
for	84:16	85:49	8	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	84:21	84:27	9	ch = 1 ;
water	84:21	0:0	10	ch
op	84:24	0:0	10	=
water	84:26	0:0	10	1
water	84:27	0:0	10	;
cond	84:29	84:38	9	ch <= s -> fbw_channels
water	84:29	0:0	10	ch
op	84:32	0:0	10	<=
water	84:35	0:0	10	s
op	84:36	0:0	10	->
water	84:38	0:0	10	fbw_channels
forexpr	84:52	84:54	9	ch ++
water	84:52	0:0	10	ch
op	84:54	0:0	10	++
stmts	85:20	85:49	9	
water	85:20	0:0	10	block
op	85:25	0:0	10	->
water	85:27	0:0	10	new_cpl_coords
op	85:41	0:0	10	[
water	85:42	0:0	10	ch
op	85:44	0:0	10	]
op	85:46	0:0	10	=
water	85:48	0:0	10	1
water	85:49	0:0	10	;
water	86:12	0:0	8	}
else	86:14	103:12	6
stmts	86:19	103:12	7	
water	86:19	0:0	8	{
for	87:16	102:16	8	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	87:21	87:27	9	ch = 1 ;
water	87:21	0:0	10	ch
op	87:24	0:0	10	=
water	87:26	0:0	10	1
water	87:27	0:0	10	;
cond	87:29	87:38	9	ch <= s -> fbw_channels
water	87:29	0:0	10	ch
op	87:32	0:0	10	<=
water	87:35	0:0	10	s
op	87:36	0:0	10	->
water	87:38	0:0	10	fbw_channels
forexpr	87:52	87:54	9	ch ++
water	87:52	0:0	10	ch
op	87:54	0:0	10	++
stmts	87:58	102:16	9	
water	87:58	0:0	10	{
if	88:20	89:32	10	(! block -> channel_in_cpl [ ch ])
cond	88:24	88:49	11	! block -> channel_in_cpl [ ch ]
op	88:24	0:0	12	!
water	88:25	0:0	12	block
op	88:30	0:0	12	->
water	88:32	0:0	12	channel_in_cpl
op	88:46	0:0	12	[
water	88:47	0:0	12	ch
op	88:49	0:0	12	]
stmts	89:24	89:32	11	
continue	89:24	89:32	12	
if	90:20	92:20	10	(! block0 -> channel_in_cpl [ ch ])
cond	90:24	90:50	11	! block0 -> channel_in_cpl [ ch ]
op	90:24	0:0	12	!
water	90:25	0:0	12	block0
op	90:31	0:0	12	->
water	90:33	0:0	12	channel_in_cpl
op	90:47	0:0	12	[
water	90:48	0:0	12	ch
op	90:50	0:0	12	]
stmts	90:53	92:20	11	
water	90:53	0:0	12	{
water	91:24	0:0	12	block
op	91:29	0:0	12	->
water	91:31	0:0	12	new_cpl_coords
op	91:45	0:0	12	[
water	91:46	0:0	12	ch
op	91:48	0:0	12	]
op	91:50	0:0	12	=
water	91:52	0:0	12	1
water	91:53	0:0	12	;
water	92:20	0:0	12	}
else	92:22	101:20	10
stmts	92:27	101:20	11	
water	92:27	0:0	12	{
decl	93:24	93:50	12	CoefSumType	coord_diff
op	93:47	0:0	12	=
water	93:49	0:0	12	0
for	94:24	97:24	12	(bnd = 0 ;bnd < s -> num_cpl_bands;bnd ++)
forinit	94:29	94:36	13	bnd = 0 ;
water	94:29	0:0	14	bnd
op	94:33	0:0	14	=
water	94:35	0:0	14	0
water	94:36	0:0	14	;
cond	94:38	94:47	13	bnd < s -> num_cpl_bands
water	94:38	0:0	14	bnd
op	94:42	0:0	14	<
water	94:44	0:0	14	s
op	94:45	0:0	14	->
water	94:47	0:0	14	num_cpl_bands
forexpr	94:62	94:65	13	bnd ++
water	94:62	0:0	14	bnd
op	94:65	0:0	14	++
stmts	94:69	97:24	13	
water	94:69	0:0	14	{
water	95:28	0:0	14	coord_diff
op	95:39	0:0	14	+=
call	95:42	96:74	14	FFABS
arg	95:48	96:74	15	cpl_coords[blk-1][ch][bnd]-cpl_coords[blk][ch][bnd]
water	95:48	0:0	16	cpl_coords
op	95:58	0:0	16	[
water	95:59	0:0	16	blk
op	95:62	0:0	16	-
water	95:63	0:0	16	1
op	95:64	0:0	16	]
op	95:65	0:0	16	[
water	95:66	0:0	16	ch
op	95:68	0:0	16	]
op	95:69	0:0	16	[
water	95:70	0:0	16	bnd
op	95:73	0:0	16	]
op	95:75	0:0	16	-
water	96:48	0:0	16	cpl_coords
op	96:58	0:0	16	[
water	96:59	0:0	16	blk
op	96:64	0:0	16	]
op	96:65	0:0	16	[
water	96:66	0:0	16	ch
op	96:68	0:0	16	]
op	96:69	0:0	16	[
water	96:70	0:0	16	bnd
op	96:73	0:0	16	]
water	96:75	0:0	14	;
water	97:24	0:0	14	}
water	98:24	0:0	12	coord_diff
op	98:35	0:0	12	/=
water	98:38	0:0	12	s
op	98:39	0:0	12	->
water	98:41	0:0	12	num_cpl_bands
water	98:54	0:0	12	;
if	99:24	100:57	12	(coord_diff > NEW_CPL_COORD_THRESHOLD)
cond	99:28	99:41	13	coord_diff > NEW_CPL_COORD_THRESHOLD
water	99:28	0:0	14	coord_diff
op	99:39	0:0	14	>
water	99:41	0:0	14	NEW_CPL_COORD_THRESHOLD
stmts	100:28	100:57	13	
water	100:28	0:0	14	block
op	100:33	0:0	14	->
water	100:35	0:0	14	new_cpl_coords
op	100:49	0:0	14	[
water	100:50	0:0	14	ch
op	100:52	0:0	14	]
op	100:54	0:0	14	=
water	100:56	0:0	14	1
water	100:57	0:0	14	;
water	101:20	0:0	12	}
water	102:16	0:0	10	}
water	103:12	0:0	8	}
water	104:8	0:0	6	}
water	105:4	0:0	4	}
for	108:4	135:4	2	(bnd = 0 ;bnd < s -> num_cpl_bands;bnd ++)
forinit	108:9	108:16	3	bnd = 0 ;
water	108:9	0:0	4	bnd
op	108:13	0:0	4	=
water	108:15	0:0	4	0
water	108:16	0:0	4	;
cond	108:18	108:27	3	bnd < s -> num_cpl_bands
water	108:18	0:0	4	bnd
op	108:22	0:0	4	<
water	108:24	0:0	4	s
op	108:25	0:0	4	->
water	108:27	0:0	4	num_cpl_bands
forexpr	108:42	108:45	3	bnd ++
water	108:42	0:0	4	bnd
op	108:45	0:0	4	++
stmts	108:49	135:4	3	
water	108:49	0:0	4	{
water	109:8	0:0	4	blk
op	109:12	0:0	4	=
water	109:14	0:0	4	0
water	109:15	0:0	4	;
while	110:8	134:8	4	(blk < s -> num_blocks)
cond	110:15	110:24	5	blk < s -> num_blocks
water	110:15	0:0	6	blk
op	110:19	0:0	6	<
water	110:21	0:0	6	s
op	110:22	0:0	6	->
water	110:24	0:0	6	num_blocks
stmts	110:36	134:8	5	
water	110:36	0:0	6	{
decl	111:12	111:31	6	int	av_uninit
water	111:25	0:0	6	(
water	111:26	0:0	6	blk1
water	111:30	0:0	6	)
decl	112:12	112:46	6	AC3Block	*block
op	112:29	0:0	6	=
op	112:31	0:0	6	&
water	112:32	0:0	6	s
op	112:33	0:0	6	->
water	112:35	0:0	6	blocks
op	112:41	0:0	6	[
water	112:42	0:0	6	blk
op	112:45	0:0	6	]
if	113:12	116:12	6	(! block -> cpl_in_use)
cond	113:16	113:24	7	! block -> cpl_in_use
op	113:16	0:0	8	!
water	113:17	0:0	8	block
op	113:22	0:0	8	->
water	113:24	0:0	8	cpl_in_use
stmts	113:36	116:12	7	
water	113:36	0:0	8	{
water	114:16	0:0	8	blk
op	114:19	0:0	8	++
water	114:21	0:0	8	;
continue	115:16	115:24	8	
water	116:12	0:0	8	}
for	117:12	132:12	6	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	117:17	117:23	7	ch = 1 ;
water	117:17	0:0	8	ch
op	117:20	0:0	8	=
water	117:22	0:0	8	1
water	117:23	0:0	8	;
cond	117:25	117:34	7	ch <= s -> fbw_channels
water	117:25	0:0	8	ch
op	117:28	0:0	8	<=
water	117:31	0:0	8	s
op	117:32	0:0	8	->
water	117:34	0:0	8	fbw_channels
forexpr	117:48	117:50	7	ch ++
water	117:48	0:0	8	ch
op	117:50	0:0	8	++
stmts	117:54	132:12	7	
water	117:54	0:0	8	{
decl	118:16	118:49	8	CoefSumType	energy_ch
water	118:37	0:0	8	,
decl	118:16	118:49	8	CoefSumType	energy_cpl
if	119:16	120:28	8	(! block -> channel_in_cpl [ ch ])
cond	119:20	119:45	9	! block -> channel_in_cpl [ ch ]
op	119:20	0:0	10	!
water	119:21	0:0	10	block
op	119:26	0:0	10	->
water	119:28	0:0	10	channel_in_cpl
op	119:42	0:0	10	[
water	119:43	0:0	10	ch
op	119:45	0:0	10	]
stmts	120:20	120:28	9	
continue	120:20	120:28	10	
water	121:16	0:0	8	energy_cpl
op	121:27	0:0	8	=
water	121:29	0:0	8	energy
op	121:35	0:0	8	[
water	121:36	0:0	8	blk
op	121:39	0:0	8	]
op	121:40	0:0	8	[
water	121:41	0:0	8	CPL_CH
op	121:47	0:0	8	]
op	121:48	0:0	8	[
water	121:49	0:0	8	bnd
op	121:52	0:0	8	]
water	121:53	0:0	8	;
water	122:16	0:0	8	energy_ch
op	122:26	0:0	8	=
water	122:28	0:0	8	energy
op	122:34	0:0	8	[
water	122:35	0:0	8	blk
op	122:38	0:0	8	]
op	122:39	0:0	8	[
water	122:40	0:0	8	ch
op	122:42	0:0	8	]
op	122:43	0:0	8	[
water	122:44	0:0	8	bnd
op	122:47	0:0	8	]
water	122:48	0:0	8	;
water	123:16	0:0	8	blk1
op	123:21	0:0	8	=
water	123:23	0:0	8	blk
op	123:26	0:0	8	+
water	123:27	0:0	8	1
water	123:28	0:0	8	;
while	124:16	130:16	8	(blk1 < s -> num_blocks && ! s -> blocks [ blk1 ] . new_cpl_coords [ ch ])
cond	124:23	124:81	9	blk1 < s -> num_blocks && ! s -> blocks [ blk1 ] . new_cpl_coords [ ch ]
water	124:23	0:0	10	blk1
op	124:28	0:0	10	<
water	124:30	0:0	10	s
op	124:31	0:0	10	->
water	124:33	0:0	10	num_blocks
op	124:44	0:0	10	&&
op	124:47	0:0	10	!
water	124:48	0:0	10	s
op	124:49	0:0	10	->
water	124:51	0:0	10	blocks
op	124:57	0:0	10	[
water	124:58	0:0	10	blk1
op	124:62	0:0	10	]
op	124:63	0:0	10	.
water	124:64	0:0	10	new_cpl_coords
op	124:78	0:0	10	[
water	124:79	0:0	10	ch
op	124:81	0:0	10	]
stmts	124:84	130:16	9	
water	124:84	0:0	10	{
if	125:20	128:20	10	(s -> blocks [ blk1 ] . cpl_in_use)
cond	125:24	125:40	11	s -> blocks [ blk1 ] . cpl_in_use
water	125:24	0:0	12	s
op	125:25	0:0	12	->
water	125:27	0:0	12	blocks
op	125:33	0:0	12	[
water	125:34	0:0	12	blk1
op	125:38	0:0	12	]
op	125:39	0:0	12	.
water	125:40	0:0	12	cpl_in_use
stmts	125:52	128:20	11	
water	125:52	0:0	12	{
water	126:24	0:0	12	energy_cpl
op	126:35	0:0	12	+=
water	126:38	0:0	12	energy
op	126:44	0:0	12	[
water	126:45	0:0	12	blk1
op	126:49	0:0	12	]
op	126:50	0:0	12	[
water	126:51	0:0	12	CPL_CH
op	126:57	0:0	12	]
op	126:58	0:0	12	[
water	126:59	0:0	12	bnd
op	126:62	0:0	12	]
water	126:63	0:0	12	;
water	127:24	0:0	12	energy_ch
op	127:34	0:0	12	+=
water	127:37	0:0	12	energy
op	127:43	0:0	12	[
water	127:44	0:0	12	blk1
op	127:48	0:0	12	]
op	127:49	0:0	12	[
water	127:50	0:0	12	ch
op	127:52	0:0	12	]
op	127:53	0:0	12	[
water	127:54	0:0	12	bnd
op	127:57	0:0	12	]
water	127:58	0:0	12	;
water	128:20	0:0	12	}
water	129:20	0:0	10	blk1
op	129:24	0:0	10	++
water	129:26	0:0	10	;
water	130:16	0:0	10	}
water	131:16	0:0	8	cpl_coords
op	131:26	0:0	8	[
water	131:27	0:0	8	blk
op	131:30	0:0	8	]
op	131:31	0:0	8	[
water	131:32	0:0	8	ch
op	131:34	0:0	8	]
op	131:35	0:0	8	[
water	131:36	0:0	8	bnd
op	131:39	0:0	8	]
op	131:41	0:0	8	=
call	131:43	131:79	8	calc_cpl_coord
arg	131:58	131:67	9	energy_ch
water	131:58	0:0	10	energy_ch
arg	131:69	131:79	9	energy_cpl
water	131:69	0:0	10	energy_cpl
water	131:80	0:0	8	;
water	132:12	0:0	8	}
water	133:12	0:0	6	blk
op	133:16	0:0	6	=
water	133:18	0:0	6	blk1
water	133:22	0:0	6	;
water	134:8	0:0	6	}
water	135:4	0:0	4	}
for	137:4	180:4	2	(blk = 0 ;blk < s -> num_blocks;blk ++)
forinit	137:9	137:16	3	blk = 0 ;
water	137:9	0:0	4	blk
op	137:13	0:0	4	=
water	137:15	0:0	4	0
water	137:16	0:0	4	;
cond	137:18	137:27	3	blk < s -> num_blocks
water	137:18	0:0	4	blk
op	137:22	0:0	4	<
water	137:24	0:0	4	s
op	137:25	0:0	4	->
water	137:27	0:0	4	num_blocks
forexpr	137:39	137:42	3	blk ++
water	137:39	0:0	4	blk
op	137:42	0:0	4	++
stmts	137:46	180:4	3	
water	137:46	0:0	4	{
decl	138:8	138:41	4	AC3Block	*block
op	138:24	0:0	4	=
op	138:26	0:0	4	&
water	138:27	0:0	4	s
op	138:28	0:0	4	->
water	138:30	0:0	4	blocks
op	138:36	0:0	4	[
water	138:37	0:0	4	blk
op	138:40	0:0	4	]
if	139:8	140:20	4	(! block -> cpl_in_use)
cond	139:12	139:20	5	! block -> cpl_in_use
op	139:12	0:0	6	!
water	139:13	0:0	6	block
op	139:18	0:0	6	->
water	139:20	0:0	6	cpl_in_use
stmts	140:12	140:20	5	
continue	140:12	140:20	6	
call	142:8	144:55	4	s->ac3dsp.float_to_fixed24
arg	142:35	142:59	5	fixed_cpl_coords[blk][1]
water	142:35	0:0	6	fixed_cpl_coords
op	142:51	0:0	6	[
water	142:52	0:0	6	blk
op	142:55	0:0	6	]
op	142:56	0:0	6	[
water	142:57	0:0	6	1
op	142:58	0:0	6	]
arg	143:35	143:53	5	cpl_coords[blk][1]
water	143:35	0:0	6	cpl_coords
op	143:45	0:0	6	[
water	143:46	0:0	6	blk
op	143:49	0:0	6	]
op	143:50	0:0	6	[
water	143:51	0:0	6	1
op	143:52	0:0	6	]
arg	144:35	144:55	5	s->fbw_channels*16
water	144:35	0:0	6	s
op	144:36	0:0	6	->
water	144:38	0:0	6	fbw_channels
op	144:51	0:0	6	*
water	144:53	0:0	6	16
water	144:56	0:0	4	;
call	146:8	148:56	4	s->ac3dsp.extract_exponents
arg	146:36	146:59	5	block->cpl_coord_exp[1]
water	146:36	0:0	6	block
op	146:41	0:0	6	->
water	146:43	0:0	6	cpl_coord_exp
op	146:56	0:0	6	[
water	146:57	0:0	6	1
op	146:58	0:0	6	]
arg	147:36	147:60	5	fixed_cpl_coords[blk][1]
water	147:36	0:0	6	fixed_cpl_coords
op	147:52	0:0	6	[
water	147:53	0:0	6	blk
op	147:56	0:0	6	]
op	147:57	0:0	6	[
water	147:58	0:0	6	1
op	147:59	0:0	6	]
arg	148:36	148:56	5	s->fbw_channels*16
water	148:36	0:0	6	s
op	148:37	0:0	6	->
water	148:39	0:0	6	fbw_channels
op	148:52	0:0	6	*
water	148:54	0:0	6	16
water	148:57	0:0	4	;
for	149:8	179:8	4	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	149:13	149:19	5	ch = 1 ;
water	149:13	0:0	6	ch
op	149:16	0:0	6	=
water	149:18	0:0	6	1
water	149:19	0:0	6	;
cond	149:21	149:30	5	ch <= s -> fbw_channels
water	149:21	0:0	6	ch
op	149:24	0:0	6	<=
water	149:27	0:0	6	s
op	149:28	0:0	6	->
water	149:30	0:0	6	fbw_channels
forexpr	149:44	149:46	5	ch ++
water	149:44	0:0	6	ch
op	149:46	0:0	6	++
stmts	149:50	179:8	5	
water	149:50	0:0	6	{
decl	150:12	150:49	6	int	bnd
water	150:19	0:0	6	,
decl	150:12	150:49	6	int	min_exp
water	150:28	0:0	6	,
decl	150:12	150:49	6	int	max_exp
water	150:37	0:0	6	,
decl	150:12	150:49	6	int	master_exp
if	151:12	152:24	6	(! block -> new_cpl_coords [ ch ])
cond	151:16	151:41	7	! block -> new_cpl_coords [ ch ]
op	151:16	0:0	8	!
water	151:17	0:0	8	block
op	151:22	0:0	8	->
water	151:24	0:0	8	new_cpl_coords
op	151:38	0:0	8	[
water	151:39	0:0	8	ch
op	151:41	0:0	8	]
stmts	152:16	152:24	7	
continue	152:16	152:24	8	
water	154:12	0:0	6	min_exp
op	154:20	0:0	6	=
water	154:22	0:0	6	max_exp
op	154:30	0:0	6	=
water	154:32	0:0	6	block
op	154:37	0:0	6	->
water	154:39	0:0	6	cpl_coord_exp
op	154:52	0:0	6	[
water	154:53	0:0	6	ch
op	154:55	0:0	6	]
op	154:56	0:0	6	[
water	154:57	0:0	6	0
op	154:58	0:0	6	]
water	154:59	0:0	6	;
for	155:12	159:12	6	(bnd = 1 ;bnd < s -> num_cpl_bands;bnd ++)
forinit	155:17	155:24	7	bnd = 1 ;
water	155:17	0:0	8	bnd
op	155:21	0:0	8	=
water	155:23	0:0	8	1
water	155:24	0:0	8	;
cond	155:26	155:35	7	bnd < s -> num_cpl_bands
water	155:26	0:0	8	bnd
op	155:30	0:0	8	<
water	155:32	0:0	8	s
op	155:33	0:0	8	->
water	155:35	0:0	8	num_cpl_bands
forexpr	155:50	155:53	7	bnd ++
water	155:50	0:0	8	bnd
op	155:53	0:0	8	++
stmts	155:57	159:12	7	
water	155:57	0:0	8	{
decl	156:16	156:55	8	int	exp
op	156:24	0:0	8	=
water	156:26	0:0	8	block
op	156:31	0:0	8	->
water	156:33	0:0	8	cpl_coord_exp
op	156:46	0:0	8	[
water	156:47	0:0	8	ch
op	156:49	0:0	8	]
op	156:50	0:0	8	[
water	156:51	0:0	8	bnd
op	156:54	0:0	8	]
water	157:16	0:0	8	min_exp
op	157:24	0:0	8	=
call	157:26	157:44	8	FFMIN
arg	157:32	157:35	9	exp
water	157:32	0:0	10	exp
arg	157:37	157:44	9	min_exp
water	157:37	0:0	10	min_exp
water	157:45	0:0	8	;
water	158:16	0:0	8	max_exp
op	158:24	0:0	8	=
call	158:26	158:44	8	FFMAX
arg	158:32	158:35	9	exp
water	158:32	0:0	10	exp
arg	158:37	158:44	9	max_exp
water	158:37	0:0	10	max_exp
water	158:45	0:0	8	;
water	159:12	0:0	8	}
water	160:12	0:0	6	master_exp
op	160:23	0:0	6	=
water	160:25	0:0	6	(
water	160:26	0:0	6	(
water	160:27	0:0	6	max_exp
op	160:35	0:0	6	-
water	160:37	0:0	6	15
water	160:39	0:0	6	)
op	160:41	0:0	6	+
water	160:43	0:0	6	2
water	160:44	0:0	6	)
op	160:46	0:0	6	/
water	160:48	0:0	6	3
water	160:49	0:0	6	;
water	161:12	0:0	6	master_exp
op	161:23	0:0	6	=
call	161:25	161:44	6	FFMAX
arg	161:31	161:41	7	master_exp
water	161:31	0:0	8	master_exp
arg	161:43	161:44	7	0
water	161:43	0:0	8	0
water	161:45	0:0	6	;
while	162:12	163:28	6	(min_exp < master_exp * 3)
cond	162:19	162:42	7	min_exp < master_exp * 3
water	162:19	0:0	8	min_exp
op	162:27	0:0	8	<
water	162:29	0:0	8	master_exp
op	162:40	0:0	8	*
water	162:42	0:0	8	3
stmts	163:16	163:28	7	
water	163:16	0:0	8	master_exp
op	163:26	0:0	8	--
water	163:28	0:0	8	;
for	164:12	167:12	6	(bnd = 0 ;bnd < s -> num_cpl_bands;bnd ++)
forinit	164:17	164:24	7	bnd = 0 ;
water	164:17	0:0	8	bnd
op	164:21	0:0	8	=
water	164:23	0:0	8	0
water	164:24	0:0	8	;
cond	164:26	164:35	7	bnd < s -> num_cpl_bands
water	164:26	0:0	8	bnd
op	164:30	0:0	8	<
water	164:32	0:0	8	s
op	164:33	0:0	8	->
water	164:35	0:0	8	num_cpl_bands
forexpr	164:50	164:53	7	bnd ++
water	164:50	0:0	8	bnd
op	164:53	0:0	8	++
stmts	164:57	167:12	7	
water	164:57	0:0	8	{
water	165:16	0:0	8	block
op	165:21	0:0	8	->
water	165:23	0:0	8	cpl_coord_exp
op	165:36	0:0	8	[
water	165:37	0:0	8	ch
op	165:39	0:0	8	]
op	165:40	0:0	8	[
water	165:41	0:0	8	bnd
op	165:44	0:0	8	]
op	165:46	0:0	8	=
call	165:48	166:77	8	av_clip
arg	165:56	166:70	9	block->cpl_coord_exp[ch][bnd]-master_exp*3
water	165:56	0:0	10	block
op	165:61	0:0	10	->
water	165:63	0:0	10	cpl_coord_exp
op	165:76	0:0	10	[
water	165:77	0:0	10	ch
op	165:79	0:0	10	]
op	165:80	0:0	10	[
water	165:81	0:0	10	bnd
op	165:84	0:0	10	]
op	165:86	0:0	10	-
water	166:56	0:0	10	master_exp
op	166:67	0:0	10	*
water	166:69	0:0	10	3
arg	166:72	166:73	9	0
water	166:72	0:0	10	0
arg	166:75	166:77	9	15
water	166:75	0:0	10	15
water	166:78	0:0	8	;
water	167:12	0:0	8	}
water	168:12	0:0	6	block
op	168:17	0:0	6	->
water	168:19	0:0	6	cpl_master_exp
op	168:33	0:0	6	[
water	168:34	0:0	6	ch
op	168:36	0:0	6	]
op	168:38	0:0	6	=
water	168:40	0:0	6	master_exp
water	168:50	0:0	6	;
for	170:12	178:12	6	(bnd = 0 ;bnd < s -> num_cpl_bands;bnd ++)
forinit	170:17	170:24	7	bnd = 0 ;
water	170:17	0:0	8	bnd
op	170:21	0:0	8	=
water	170:23	0:0	8	0
water	170:24	0:0	8	;
cond	170:26	170:35	7	bnd < s -> num_cpl_bands
water	170:26	0:0	8	bnd
op	170:30	0:0	8	<
water	170:32	0:0	8	s
op	170:33	0:0	8	->
water	170:35	0:0	8	num_cpl_bands
forexpr	170:50	170:53	7	bnd ++
water	170:50	0:0	8	bnd
op	170:53	0:0	8	++
stmts	170:57	178:12	7	
water	170:57	0:0	8	{
decl	171:16	171:60	8	int	cpl_exp
op	171:29	0:0	8	=
water	171:31	0:0	8	block
op	171:36	0:0	8	->
water	171:38	0:0	8	cpl_coord_exp
op	171:51	0:0	8	[
water	171:52	0:0	8	ch
op	171:54	0:0	8	]
op	171:55	0:0	8	[
water	171:56	0:0	8	bnd
op	171:59	0:0	8	]
decl	172:16	172:103	8	int	cpl_mant
op	172:29	0:0	8	=
water	172:31	0:0	8	(
water	172:32	0:0	8	fixed_cpl_coords
op	172:48	0:0	8	[
water	172:49	0:0	8	blk
op	172:52	0:0	8	]
op	172:53	0:0	8	[
water	172:54	0:0	8	ch
op	172:56	0:0	8	]
op	172:57	0:0	8	[
water	172:58	0:0	8	bnd
op	172:61	0:0	8	]
op	172:63	0:0	8	<<
water	172:66	0:0	8	(
water	172:67	0:0	8	5
op	172:69	0:0	8	+
water	172:71	0:0	8	cpl_exp
op	172:79	0:0	8	+
water	172:81	0:0	8	master_exp
op	172:92	0:0	8	*
water	172:94	0:0	8	3
water	172:95	0:0	8	)
water	172:96	0:0	8	)
op	172:98	0:0	8	>>
water	172:101	0:0	8	24
if	173:16	174:34	8	(cpl_exp == 15)
cond	173:20	173:31	9	cpl_exp == 15
water	173:20	0:0	10	cpl_exp
op	173:28	0:0	10	==
water	173:31	0:0	10	15
stmts	174:20	174:34	9	
water	174:20	0:0	10	cpl_mant
op	174:29	0:0	10	>>=
water	174:33	0:0	10	1
water	174:34	0:0	10	;
else	175:16	176:34	8
stmts	176:20	176:34	9	
water	176:20	0:0	10	cpl_mant
op	176:29	0:0	10	-=
water	176:32	0:0	10	16
water	176:34	0:0	10	;
water	177:16	0:0	8	block
op	177:21	0:0	8	->
water	177:23	0:0	8	cpl_coord_mant
op	177:37	0:0	8	[
water	177:38	0:0	8	ch
op	177:40	0:0	8	]
op	177:41	0:0	8	[
water	177:42	0:0	8	bnd
op	177:45	0:0	8	]
op	177:47	0:0	8	=
water	177:49	0:0	8	cpl_mant
water	177:57	0:0	8	;
water	178:12	0:0	8	}
water	179:8	0:0	6	}
water	180:4	0:0	4	}
if	181:4	182:33	2	(CONFIG_EAC3_ENCODER && s -> eac3)
cond	181:8	181:34	3	CONFIG_EAC3_ENCODER && s -> eac3
water	181:8	0:0	4	CONFIG_EAC3_ENCODER
op	181:28	0:0	4	&&
water	181:31	0:0	4	s
op	181:32	0:0	4	->
water	181:34	0:0	4	eac3
stmts	182:8	182:33	3	
call	182:8	182:32	4	ff_eac3_set_cpl_states
arg	182:31	182:32	5	s
water	182:31	0:0	6	s
water	182:33	0:0	4	;
