func	1:0	150:0	0	static int	transcode_init
params	1:25	0:0	1	
param	1:26	1:30	2	void
stmnts	0:0	149:12	1	
decl	3:4	3:24	2	int	ret
op	3:12	0:0	2	=
water	3:14	0:0	2	0
water	3:15	0:0	2	,
decl	3:4	3:24	2	int	i
water	3:18	0:0	2	,
decl	3:4	3:24	2	int	j
water	3:21	0:0	2	,
decl	3:4	3:24	2	int	k
decl	4:4	4:23	2	AVFormatContext	*oc
decl	5:4	5:21	2	OutputStream	*ost
decl	6:4	6:20	2	InputStream	*ist
decl	7:4	7:26	2	char	error[1024]
op	7:21	0:0	2	=
water	7:23	0:0	2	{
water	7:24	0:0	2	0
water	7:25	0:0	2	}
for	8:4	21:4	2	(i = 0 ;i < nb_filtergraphs;i ++)
forinit	8:9	8:14	3	i = 0 ;
water	8:9	0:0	4	i
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:20	3	i < nb_filtergraphs
water	8:16	0:0	4	i
op	8:18	0:0	4	<
water	8:20	0:0	4	nb_filtergraphs
forexpr	8:37	8:38	3	i ++
water	8:37	0:0	4	i
op	8:38	0:0	4	++
stmts	8:42	21:4	3	
water	8:42	0:0	4	{
decl	9:8	9:41	4	FilterGraph	*fg
op	9:24	0:0	4	=
water	9:26	0:0	4	filtergraphs
op	9:38	0:0	4	[
water	9:39	0:0	4	i
op	9:40	0:0	4	]
for	10:8	20:8	4	(j = 0 ;j < fg -> nb_outputs;j ++)
forinit	10:13	10:18	5	j = 0 ;
water	10:13	0:0	6	j
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:20	10:28	5	j < fg -> nb_outputs
water	10:20	0:0	6	j
op	10:22	0:0	6	<
water	10:24	0:0	6	fg
op	10:26	0:0	6	->
water	10:28	0:0	6	nb_outputs
forexpr	10:40	10:41	5	j ++
water	10:40	0:0	6	j
op	10:41	0:0	6	++
stmts	10:45	20:8	5	
water	10:45	0:0	6	{
decl	11:12	11:50	6	OutputFilter	*ofilter
op	11:34	0:0	6	=
water	11:36	0:0	6	fg
op	11:38	0:0	6	->
water	11:40	0:0	6	outputs
op	11:47	0:0	6	[
water	11:48	0:0	6	j
op	11:49	0:0	6	]
if	12:12	13:24	6	(! ofilter -> ost || ofilter -> ost -> source_index >= 0)
cond	12:16	12:63	7	! ofilter -> ost || ofilter -> ost -> source_index >= 0
op	12:16	0:0	8	!
water	12:17	0:0	8	ofilter
op	12:24	0:0	8	->
water	12:26	0:0	8	ost
op	12:30	0:0	8	||
water	12:33	0:0	8	ofilter
op	12:40	0:0	8	->
water	12:42	0:0	8	ost
op	12:45	0:0	8	->
water	12:47	0:0	8	source_index
op	12:60	0:0	8	>=
water	12:63	0:0	8	0
stmts	13:16	13:24	7	
continue	13:16	13:24	8	
if	14:12	15:24	6	(fg -> nb_inputs != 1)
cond	14:16	14:33	7	fg -> nb_inputs != 1
water	14:16	0:0	8	fg
op	14:18	0:0	8	->
water	14:20	0:0	8	nb_inputs
op	14:30	0:0	8	!=
water	14:33	0:0	8	1
stmts	15:16	15:24	7	
continue	15:16	15:24	8	
for	16:12	18:25	6	(k = nb_input_streams - 1 ;k >= 0;k --)
forinit	16:17	16:39	7	k = nb_input_streams - 1 ;
water	16:17	0:0	8	k
op	16:19	0:0	8	=
water	16:21	0:0	8	nb_input_streams
op	16:37	0:0	8	-
water	16:38	0:0	8	1
water	16:39	0:0	8	;
cond	16:41	16:46	7	k >= 0
water	16:41	0:0	8	k
op	16:43	0:0	8	>=
water	16:46	0:0	8	0
forexpr	16:50	16:51	7	k --
water	16:50	0:0	8	k
op	16:51	0:0	8	--
stmts	17:16	18:25	7	
if	17:16	18:25	8	(fg -> inputs [ 0 ] -> ist == input_streams [ k ])
cond	17:20	17:57	9	fg -> inputs [ 0 ] -> ist == input_streams [ k ]
water	17:20	0:0	10	fg
op	17:22	0:0	10	->
water	17:24	0:0	10	inputs
op	17:30	0:0	10	[
water	17:31	0:0	10	0
op	17:32	0:0	10	]
op	17:33	0:0	10	->
water	17:35	0:0	10	ist
op	17:39	0:0	10	==
water	17:42	0:0	10	input_streams
op	17:55	0:0	10	[
water	17:56	0:0	10	k
op	17:57	0:0	10	]
stmts	18:20	18:25	9	
break	18:20	18:25	10	
water	19:12	0:0	6	ofilter
op	19:19	0:0	6	->
water	19:21	0:0	6	ost
op	19:24	0:0	6	->
water	19:26	0:0	6	source_index
op	19:39	0:0	6	=
water	19:41	0:0	6	k
water	19:42	0:0	6	;
water	20:8	0:0	6	}
water	21:4	0:0	4	}
for	23:4	28:4	2	(i = 0 ;i < nb_input_files;i ++)
forinit	23:9	23:14	3	i = 0 ;
water	23:9	0:0	4	i
op	23:11	0:0	4	=
water	23:13	0:0	4	0
water	23:14	0:0	4	;
cond	23:16	23:20	3	i < nb_input_files
water	23:16	0:0	4	i
op	23:18	0:0	4	<
water	23:20	0:0	4	nb_input_files
forexpr	23:36	23:37	3	i ++
water	23:36	0:0	4	i
op	23:37	0:0	4	++
stmts	23:41	28:4	3	
water	23:41	0:0	4	{
decl	24:8	24:41	4	InputFile	*ifile
op	24:25	0:0	4	=
water	24:27	0:0	4	input_files
op	24:38	0:0	4	[
water	24:39	0:0	4	i
op	24:40	0:0	4	]
if	25:8	27:82	4	(ifile -> rate_emu)
cond	25:12	25:19	5	ifile -> rate_emu
water	25:12	0:0	6	ifile
op	25:17	0:0	6	->
water	25:19	0:0	6	rate_emu
stmts	26:12	27:82	5	
for	26:12	27:82	6	(j = 0 ;j < ifile -> nb_streams;j ++)
forinit	26:17	26:22	7	j = 0 ;
water	26:17	0:0	8	j
op	26:19	0:0	8	=
water	26:21	0:0	8	0
water	26:22	0:0	8	;
cond	26:24	26:35	7	j < ifile -> nb_streams
water	26:24	0:0	8	j
op	26:26	0:0	8	<
water	26:28	0:0	8	ifile
op	26:33	0:0	8	->
water	26:35	0:0	8	nb_streams
forexpr	26:47	26:48	7	j ++
water	26:47	0:0	8	j
op	26:48	0:0	8	++
stmts	27:16	27:82	7	
water	27:16	0:0	8	input_streams
op	27:29	0:0	8	[
water	27:30	0:0	8	j
op	27:32	0:0	8	+
water	27:34	0:0	8	ifile
op	27:39	0:0	8	->
water	27:41	0:0	8	ist_index
op	27:50	0:0	8	]
op	27:51	0:0	8	->
water	27:53	0:0	8	start
op	27:59	0:0	8	=
call	27:61	27:81	8	av_gettime_relative
water	27:82	0:0	8	;
water	28:4	0:0	4	}
for	30:4	37:8	2	(i = 0 ;i < nb_input_streams;i ++)
forinit	30:9	30:14	3	i = 0 ;
water	30:9	0:0	4	i
op	30:11	0:0	4	=
water	30:13	0:0	4	0
water	30:14	0:0	4	;
cond	30:16	30:20	3	i < nb_input_streams
water	30:16	0:0	4	i
op	30:18	0:0	4	<
water	30:20	0:0	4	nb_input_streams
forexpr	30:38	30:39	3	i ++
water	30:38	0:0	4	i
op	30:39	0:0	4	++
stmts	31:8	37:8	3	
if	31:8	37:8	4	(( ret =init_input_stream (i ,error ,sizeof ( error ) ) ) < 0)
cond	31:12	31:65	5	( ret =init_input_stream (i ,error ,sizeof ( error ) ) ) < 0
water	31:12	0:0	6	(
water	31:13	0:0	6	ret
op	31:17	0:0	6	=
call	31:19	31:60	6	init_input_stream
arg	31:37	31:38	7	i
water	31:37	0:0	8	i
arg	31:40	31:45	7	error
water	31:40	0:0	8	error
arg	31:47	31:60	7	sizeof(error)
op	31:47	0:0	8	sizeof
water	31:53	0:0	8	(
water	31:54	0:0	8	error
water	31:59	0:0	8	)
water	31:61	0:0	6	)
op	31:63	0:0	6	<
water	31:65	0:0	6	0
stmts	31:68	37:8	5	
water	31:68	0:0	6	{
for	32:12	35:12	6	(i = 0 ;i < nb_output_streams;i ++)
forinit	32:17	32:22	7	i = 0 ;
water	32:17	0:0	8	i
op	32:19	0:0	8	=
water	32:21	0:0	8	0
water	32:22	0:0	8	;
cond	32:24	32:28	7	i < nb_output_streams
water	32:24	0:0	8	i
op	32:26	0:0	8	<
water	32:28	0:0	8	nb_output_streams
forexpr	32:47	32:48	7	i ++
water	32:47	0:0	8	i
op	32:48	0:0	8	++
stmts	32:52	35:12	7	
water	32:52	0:0	8	{
water	33:16	0:0	8	ost
op	33:20	0:0	8	=
water	33:22	0:0	8	output_streams
op	33:36	0:0	8	[
water	33:37	0:0	8	i
op	33:38	0:0	8	]
water	33:39	0:0	8	;
call	34:16	34:42	8	avcodec_close
arg	34:30	34:42	9	ost->enc_ctx
water	34:30	0:0	10	ost
op	34:33	0:0	10	->
water	34:35	0:0	10	enc_ctx
water	34:43	0:0	8	;
water	35:12	0:0	8	}
goto	36:12	36:28	6	dump_format
water	36:17	0:0	7	dump_format
water	37:8	0:0	6	}
for	39:4	46:4	2	(i = 0 ;i < nb_output_streams;i ++)
forinit	39:9	39:14	3	i = 0 ;
water	39:9	0:0	4	i
op	39:11	0:0	4	=
water	39:13	0:0	4	0
water	39:14	0:0	4	;
cond	39:16	39:20	3	i < nb_output_streams
water	39:16	0:0	4	i
op	39:18	0:0	4	<
water	39:20	0:0	4	nb_output_streams
forexpr	39:39	39:40	3	i ++
water	39:39	0:0	4	i
op	39:40	0:0	4	++
stmts	39:44	46:4	3	
water	39:44	0:0	4	{
if	41:8	42:20	4	(output_streams [ i ] -> filter)
cond	41:12	41:31	5	output_streams [ i ] -> filter
water	41:12	0:0	6	output_streams
op	41:26	0:0	6	[
water	41:27	0:0	6	i
op	41:28	0:0	6	]
op	41:29	0:0	6	->
water	41:31	0:0	6	filter
stmts	42:12	42:20	5	
continue	42:12	42:20	6	
water	43:8	0:0	4	ret
op	43:12	0:0	4	=
call	43:14	43:72	4	init_output_stream
arg	43:33	43:50	5	output_streams[i]
water	43:33	0:0	6	output_streams
op	43:47	0:0	6	[
water	43:48	0:0	6	i
op	43:49	0:0	6	]
arg	43:52	43:57	5	error
water	43:52	0:0	6	error
arg	43:59	43:72	5	sizeof(error)
op	43:59	0:0	6	sizeof
water	43:65	0:0	6	(
water	43:66	0:0	6	error
water	43:71	0:0	6	)
water	43:73	0:0	4	;
if	44:8	45:28	4	(ret < 0)
cond	44:12	44:18	5	ret < 0
water	44:12	0:0	6	ret
op	44:16	0:0	6	<
water	44:18	0:0	6	0
stmts	45:12	45:28	5	
goto	45:12	45:28	6	dump_format
water	45:17	0:0	7	dump_format
water	46:4	0:0	4	}
for	48:4	60:4	2	(i = 0 ;i < nb_input_files;i ++)
forinit	48:9	48:14	3	i = 0 ;
water	48:9	0:0	4	i
op	48:11	0:0	4	=
water	48:13	0:0	4	0
water	48:14	0:0	4	;
cond	48:16	48:20	3	i < nb_input_files
water	48:16	0:0	4	i
op	48:18	0:0	4	<
water	48:20	0:0	4	nb_input_files
forexpr	48:36	48:37	3	i ++
water	48:36	0:0	4	i
op	48:37	0:0	4	++
stmts	48:41	60:4	3	
water	48:41	0:0	4	{
decl	49:8	49:41	4	InputFile	*ifile
op	49:25	0:0	4	=
water	49:27	0:0	4	input_files
op	49:38	0:0	4	[
water	49:39	0:0	4	i
op	49:40	0:0	4	]
for	50:8	59:8	4	(j = 0 ;j < ifile -> ctx -> nb_programs;j ++)
forinit	50:13	50:18	5	j = 0 ;
water	50:13	0:0	6	j
op	50:15	0:0	6	=
water	50:17	0:0	6	0
water	50:18	0:0	6	;
cond	50:20	50:36	5	j < ifile -> ctx -> nb_programs
water	50:20	0:0	6	j
op	50:22	0:0	6	<
water	50:24	0:0	6	ifile
op	50:29	0:0	6	->
water	50:31	0:0	6	ctx
op	50:34	0:0	6	->
water	50:36	0:0	6	nb_programs
forexpr	50:49	50:50	5	j ++
water	50:49	0:0	6	j
op	50:50	0:0	6	++
stmts	50:54	59:8	5	
water	50:54	0:0	6	{
decl	51:12	51:50	6	AVProgram	*p
op	51:25	0:0	6	=
water	51:27	0:0	6	ifile
op	51:32	0:0	6	->
water	51:34	0:0	6	ctx
op	51:37	0:0	6	->
water	51:39	0:0	6	programs
op	51:47	0:0	6	[
water	51:48	0:0	6	j
op	51:49	0:0	6	]
decl	52:12	52:40	6	int	discard
op	52:25	0:0	6	=
water	52:27	0:0	6	AVDISCARD_ALL
for	53:12	57:16	6	(k = 0 ;k < p -> nb_stream_indexes;k ++)
forinit	53:17	53:22	7	k = 0 ;
water	53:17	0:0	8	k
op	53:19	0:0	8	=
water	53:21	0:0	8	0
water	53:22	0:0	8	;
cond	53:24	53:31	7	k < p -> nb_stream_indexes
water	53:24	0:0	8	k
op	53:26	0:0	8	<
water	53:28	0:0	8	p
op	53:29	0:0	8	->
water	53:31	0:0	8	nb_stream_indexes
forexpr	53:50	53:51	7	k ++
water	53:50	0:0	8	k
op	53:51	0:0	8	++
stmts	54:16	57:16	7	
if	54:16	57:16	8	(! input_streams [ ifile -> ist_index + p -> stream_index [ k ] ] -> discard)
cond	54:20	54:75	9	! input_streams [ ifile -> ist_index + p -> stream_index [ k ] ] -> discard
op	54:20	0:0	10	!
water	54:21	0:0	10	input_streams
op	54:34	0:0	10	[
water	54:35	0:0	10	ifile
op	54:40	0:0	10	->
water	54:42	0:0	10	ist_index
op	54:52	0:0	10	+
water	54:54	0:0	10	p
op	54:55	0:0	10	->
water	54:57	0:0	10	stream_index
op	54:69	0:0	10	[
water	54:70	0:0	10	k
op	54:71	0:0	10	]
op	54:72	0:0	10	]
op	54:73	0:0	10	->
water	54:75	0:0	10	discard
stmts	54:84	57:16	9	
water	54:84	0:0	10	{
water	55:20	0:0	10	discard
op	55:28	0:0	10	=
water	55:30	0:0	10	AVDISCARD_DEFAULT
water	55:47	0:0	10	;
break	56:20	56:25	10	
water	57:16	0:0	10	}
water	58:12	0:0	6	p
op	58:13	0:0	6	->
water	58:15	0:0	6	discard
op	58:23	0:0	6	=
water	58:25	0:0	6	discard
water	58:32	0:0	6	;
water	59:8	0:0	6	}
water	60:4	0:0	4	}
for	62:4	69:4	2	(i = 0 ;i < nb_output_files;i ++)
forinit	62:9	62:14	3	i = 0 ;
water	62:9	0:0	4	i
op	62:11	0:0	4	=
water	62:13	0:0	4	0
water	62:14	0:0	4	;
cond	62:16	62:20	3	i < nb_output_files
water	62:16	0:0	4	i
op	62:18	0:0	4	<
water	62:20	0:0	4	nb_output_files
forexpr	62:37	62:38	3	i ++
water	62:37	0:0	4	i
op	62:38	0:0	4	++
stmts	62:42	69:4	3	
water	62:42	0:0	4	{
water	63:8	0:0	4	oc
op	63:11	0:0	4	=
water	63:13	0:0	4	output_files
op	63:25	0:0	4	[
water	63:26	0:0	4	i
op	63:27	0:0	4	]
op	63:28	0:0	4	->
water	63:30	0:0	4	ctx
water	63:33	0:0	4	;
if	64:8	68:8	4	(oc -> oformat -> flags & AVFMT_NOSTREAMS && oc -> nb_streams == 0)
cond	64:12	64:70	5	oc -> oformat -> flags & AVFMT_NOSTREAMS && oc -> nb_streams == 0
water	64:12	0:0	6	oc
op	64:14	0:0	6	->
water	64:16	0:0	6	oformat
op	64:23	0:0	6	->
water	64:25	0:0	6	flags
op	64:31	0:0	6	&
water	64:33	0:0	6	AVFMT_NOSTREAMS
op	64:49	0:0	6	&&
water	64:52	0:0	6	oc
op	64:54	0:0	6	->
water	64:56	0:0	6	nb_streams
op	64:67	0:0	6	==
water	64:70	0:0	6	0
stmts	64:73	68:8	5	
water	64:73	0:0	6	{
water	65:12	0:0	6	ret
op	65:16	0:0	6	=
call	65:18	65:59	6	check_init_output_file
arg	65:41	65:56	7	output_files[i]
water	65:41	0:0	8	output_files
op	65:53	0:0	8	[
water	65:54	0:0	8	i
op	65:55	0:0	8	]
arg	65:58	65:59	7	i
water	65:58	0:0	8	i
water	65:60	0:0	6	;
if	66:12	67:32	6	(ret < 0)
cond	66:16	66:22	7	ret < 0
water	66:16	0:0	8	ret
op	66:20	0:0	8	<
water	66:22	0:0	8	0
stmts	67:16	67:32	7	
goto	67:16	67:32	8	dump_format
water	67:21	0:0	9	dump_format
water	68:8	0:0	6	}
water	69:4	0:0	4	}
label	70:1	70:12	2	dump_format :
call	72:4	72:49	2	av_log
arg	72:11	72:15	3	NULL
water	72:11	0:0	4	NULL
arg	72:17	72:28	3	AV_LOG_INFO
water	72:17	0:0	4	AV_LOG_INFO
arg	72:30	72:49	3	"Stream mapping:\n"
water	72:30	0:0	4	"Stream mapping:\n"
water	72:50	0:0	2	;
for	73:4	85:4	2	(i = 0 ;i < nb_input_streams;i ++)
forinit	73:9	73:14	3	i = 0 ;
water	73:9	0:0	4	i
op	73:11	0:0	4	=
water	73:13	0:0	4	0
water	73:14	0:0	4	;
cond	73:16	73:20	3	i < nb_input_streams
water	73:16	0:0	4	i
op	73:18	0:0	4	<
water	73:20	0:0	4	nb_input_streams
forexpr	73:38	73:39	3	i ++
water	73:38	0:0	4	i
op	73:39	0:0	4	++
stmts	73:43	85:4	3	
water	73:43	0:0	4	{
water	74:8	0:0	4	ist
op	74:12	0:0	4	=
water	74:14	0:0	4	input_streams
op	74:27	0:0	4	[
water	74:28	0:0	4	i
op	74:29	0:0	4	]
water	74:30	0:0	4	;
for	75:8	84:8	4	(j = 0 ;j < ist -> nb_filters;j ++)
forinit	75:13	75:18	5	j = 0 ;
water	75:13	0:0	6	j
op	75:15	0:0	6	=
water	75:17	0:0	6	0
water	75:18	0:0	6	;
cond	75:20	75:29	5	j < ist -> nb_filters
water	75:20	0:0	6	j
op	75:22	0:0	6	<
water	75:24	0:0	6	ist
op	75:27	0:0	6	->
water	75:29	0:0	6	nb_filters
forexpr	75:41	75:42	5	j ++
water	75:41	0:0	6	j
op	75:42	0:0	6	++
stmts	75:46	84:8	5	
water	75:46	0:0	6	{
if	76:12	83:12	6	(!filtergraph_is_simple (ist -> filters [ j ] -> graph ))
cond	76:16	76:61	7	!filtergraph_is_simple (ist -> filters [ j ] -> graph )
op	76:16	0:0	8	!
call	76:17	76:61	8	filtergraph_is_simple
arg	76:39	76:61	9	ist->filters[j]->graph
water	76:39	0:0	10	ist
op	76:42	0:0	10	->
water	76:44	0:0	10	filters
op	76:51	0:0	10	[
water	76:52	0:0	10	j
op	76:53	0:0	10	]
op	76:54	0:0	10	->
water	76:56	0:0	10	graph
stmts	76:64	83:12	7	
water	76:64	0:0	8	{
call	77:16	79:44	8	av_log
arg	77:23	77:27	9	NULL
water	77:23	0:0	10	NULL
arg	77:29	77:40	9	AV_LOG_INFO
water	77:29	0:0	10	AV_LOG_INFO
arg	77:42	77:70	9	"  Stream #%d:%d (%s) -> %s"
water	77:42	0:0	10	"  Stream #%d:%d (%s) -> %s"
arg	78:23	78:38	9	ist->file_index
water	78:23	0:0	10	ist
op	78:26	0:0	10	->
water	78:28	0:0	10	file_index
arg	78:40	78:54	9	ist->st->index
water	78:40	0:0	10	ist
op	78:43	0:0	10	->
water	78:45	0:0	10	st
op	78:47	0:0	10	->
water	78:49	0:0	10	index
arg	78:56	78:87	9	ist->dec?ist->dec->name:"?"
water	78:56	0:0	10	ist
op	78:59	0:0	10	->
water	78:61	0:0	10	dec
water	78:65	0:0	10	?
water	78:67	0:0	10	ist
op	78:70	0:0	10	->
water	78:72	0:0	10	dec
op	78:75	0:0	10	->
water	78:77	0:0	10	name
water	78:82	0:0	10	:
water	78:84	0:0	10	"?"
arg	79:23	79:44	9	ist->filters[j]->name
water	79:23	0:0	10	ist
op	79:26	0:0	10	->
water	79:28	0:0	10	filters
op	79:35	0:0	10	[
water	79:36	0:0	10	j
op	79:37	0:0	10	]
op	79:38	0:0	10	->
water	79:40	0:0	10	name
water	79:45	0:0	8	;
if	80:16	81:91	8	(nb_filtergraphs > 1)
cond	80:20	80:38	9	nb_filtergraphs > 1
water	80:20	0:0	10	nb_filtergraphs
op	80:36	0:0	10	>
water	80:38	0:0	10	1
stmts	81:20	81:91	9	
call	81:20	81:90	10	av_log
arg	81:27	81:31	11	NULL
water	81:27	0:0	12	NULL
arg	81:33	81:44	11	AV_LOG_INFO
water	81:33	0:0	12	AV_LOG_INFO
arg	81:46	81:59	11	" (graph %d)"
water	81:46	0:0	12	" (graph %d)"
arg	81:61	81:90	11	ist->filters[j]->graph->index
water	81:61	0:0	12	ist
op	81:64	0:0	12	->
water	81:66	0:0	12	filters
op	81:73	0:0	12	[
water	81:74	0:0	12	j
op	81:75	0:0	12	]
op	81:76	0:0	12	->
water	81:78	0:0	12	graph
op	81:83	0:0	12	->
water	81:85	0:0	12	index
water	81:91	0:0	10	;
call	82:16	82:46	8	av_log
arg	82:23	82:27	9	NULL
water	82:23	0:0	10	NULL
arg	82:29	82:40	9	AV_LOG_INFO
water	82:29	0:0	10	AV_LOG_INFO
arg	82:42	82:46	9	"\n"
water	82:42	0:0	10	"\n"
water	82:47	0:0	8	;
water	83:12	0:0	8	}
water	84:8	0:0	6	}
water	85:4	0:0	4	}
for	86:4	143:4	2	(i = 0 ;i < nb_output_streams;i ++)
forinit	86:9	86:14	3	i = 0 ;
water	86:9	0:0	4	i
op	86:11	0:0	4	=
water	86:13	0:0	4	0
water	86:14	0:0	4	;
cond	86:16	86:20	3	i < nb_output_streams
water	86:16	0:0	4	i
op	86:18	0:0	4	<
water	86:20	0:0	4	nb_output_streams
forexpr	86:39	86:40	3	i ++
water	86:39	0:0	4	i
op	86:40	0:0	4	++
stmts	86:44	143:4	3	
water	86:44	0:0	4	{
water	87:8	0:0	4	ost
op	87:12	0:0	4	=
water	87:14	0:0	4	output_streams
op	87:28	0:0	4	[
water	87:29	0:0	4	i
op	87:30	0:0	4	]
water	87:31	0:0	4	;
if	88:8	93:8	4	(ost -> attachment_filename)
cond	88:12	88:17	5	ost -> attachment_filename
water	88:12	0:0	6	ost
op	88:15	0:0	6	->
water	88:17	0:0	6	attachment_filename
stmts	88:38	93:8	5	
water	88:38	0:0	6	{
call	90:12	91:72	6	av_log
arg	90:19	90:23	7	NULL
water	90:19	0:0	8	NULL
arg	90:25	90:36	7	AV_LOG_INFO
water	90:25	0:0	8	AV_LOG_INFO
arg	90:38	90:68	7	"  File %s -> Stream #%d:%d\n"
water	90:38	0:0	8	"  File %s -> Stream #%d:%d\n"
arg	91:19	91:43	7	ost->attachment_filename
water	91:19	0:0	8	ost
op	91:22	0:0	8	->
water	91:24	0:0	8	attachment_filename
arg	91:45	91:60	7	ost->file_index
water	91:45	0:0	8	ost
op	91:48	0:0	8	->
water	91:50	0:0	8	file_index
arg	91:62	91:72	7	ost->index
water	91:62	0:0	8	ost
op	91:65	0:0	8	->
water	91:67	0:0	8	index
water	91:73	0:0	6	;
continue	92:12	92:20	6	
water	93:8	0:0	6	}
if	94:8	102:8	4	(ost -> filter && !filtergraph_is_simple (ost -> filter -> graph ))
cond	94:12	94:68	5	ost -> filter && !filtergraph_is_simple (ost -> filter -> graph )
water	94:12	0:0	6	ost
op	94:15	0:0	6	->
water	94:17	0:0	6	filter
op	94:24	0:0	6	&&
op	94:27	0:0	6	!
call	94:28	94:68	6	filtergraph_is_simple
arg	94:50	94:68	7	ost->filter->graph
water	94:50	0:0	8	ost
op	94:53	0:0	8	->
water	94:55	0:0	8	filter
op	94:61	0:0	8	->
water	94:63	0:0	8	graph
stmts	94:71	102:8	5	
water	94:71	0:0	6	{
call	96:12	96:63	6	av_log
arg	96:19	96:23	7	NULL
water	96:19	0:0	8	NULL
arg	96:25	96:36	7	AV_LOG_INFO
water	96:25	0:0	8	AV_LOG_INFO
arg	96:38	96:44	7	"  %s"
water	96:38	0:0	8	"  %s"
arg	96:46	96:63	7	ost->filter->name
water	96:46	0:0	8	ost
op	96:49	0:0	8	->
water	96:51	0:0	8	filter
op	96:57	0:0	8	->
water	96:59	0:0	8	name
water	96:64	0:0	6	;
if	97:12	98:83	6	(nb_filtergraphs > 1)
cond	97:16	97:34	7	nb_filtergraphs > 1
water	97:16	0:0	8	nb_filtergraphs
op	97:32	0:0	8	>
water	97:34	0:0	8	1
stmts	98:16	98:83	7	
call	98:16	98:82	8	av_log
arg	98:23	98:27	9	NULL
water	98:23	0:0	10	NULL
arg	98:29	98:40	9	AV_LOG_INFO
water	98:29	0:0	10	AV_LOG_INFO
arg	98:42	98:55	9	" (graph %d)"
water	98:42	0:0	10	" (graph %d)"
arg	98:57	98:82	9	ost->filter->graph->index
water	98:57	0:0	10	ost
op	98:60	0:0	10	->
water	98:62	0:0	10	filter
op	98:68	0:0	10	->
water	98:70	0:0	10	graph
op	98:75	0:0	10	->
water	98:77	0:0	10	index
water	98:83	0:0	8	;
call	99:12	100:62	6	av_log
arg	99:19	99:23	7	NULL
water	99:19	0:0	8	NULL
arg	99:25	99:36	7	AV_LOG_INFO
water	99:25	0:0	8	AV_LOG_INFO
arg	99:38	99:64	7	" -> Stream #%d:%d (%s)\n"
water	99:38	0:0	8	" -> Stream #%d:%d (%s)\n"
arg	99:66	99:81	7	ost->file_index
water	99:66	0:0	8	ost
op	99:69	0:0	8	->
water	99:71	0:0	8	file_index
arg	100:19	100:29	7	ost->index
water	100:19	0:0	8	ost
op	100:22	0:0	8	->
water	100:24	0:0	8	index
arg	100:31	100:62	7	ost->enc?ost->enc->name:"?"
water	100:31	0:0	8	ost
op	100:34	0:0	8	->
water	100:36	0:0	8	enc
water	100:40	0:0	8	?
water	100:42	0:0	8	ost
op	100:45	0:0	8	->
water	100:47	0:0	8	enc
op	100:50	0:0	8	->
water	100:52	0:0	8	name
water	100:57	0:0	8	:
water	100:59	0:0	8	"?"
water	100:63	0:0	6	;
continue	101:12	101:20	6	
water	102:8	0:0	6	}
call	103:8	107:25	4	av_log
arg	103:15	103:19	5	NULL
water	103:15	0:0	6	NULL
arg	103:21	103:32	5	AV_LOG_INFO
water	103:21	0:0	6	AV_LOG_INFO
arg	103:34	103:61	5	"  Stream #%d:%d -> #%d:%d"
water	103:34	0:0	6	"  Stream #%d:%d -> #%d:%d"
arg	104:15	104:59	5	input_streams[ost->source_index]->file_index
water	104:15	0:0	6	input_streams
op	104:28	0:0	6	[
water	104:29	0:0	6	ost
op	104:32	0:0	6	->
water	104:34	0:0	6	source_index
op	104:46	0:0	6	]
op	104:47	0:0	6	->
water	104:49	0:0	6	file_index
arg	105:15	105:58	5	input_streams[ost->source_index]->st->index
water	105:15	0:0	6	input_streams
op	105:28	0:0	6	[
water	105:29	0:0	6	ost
op	105:32	0:0	6	->
water	105:34	0:0	6	source_index
op	105:46	0:0	6	]
op	105:47	0:0	6	->
water	105:49	0:0	6	st
op	105:51	0:0	6	->
water	105:53	0:0	6	index
arg	106:15	106:30	5	ost->file_index
water	106:15	0:0	6	ost
op	106:18	0:0	6	->
water	106:20	0:0	6	file_index
arg	107:15	107:25	5	ost->index
water	107:15	0:0	6	ost
op	107:18	0:0	6	->
water	107:20	0:0	6	index
water	107:26	0:0	4	;
if	108:8	111:44	4	(ost -> sync_ist != input_streams [ ost -> source_index ])
cond	108:12	108:60	5	ost -> sync_ist != input_streams [ ost -> source_index ]
water	108:12	0:0	6	ost
op	108:15	0:0	6	->
water	108:17	0:0	6	sync_ist
op	108:26	0:0	6	!=
water	108:29	0:0	6	input_streams
op	108:42	0:0	6	[
water	108:43	0:0	6	ost
op	108:46	0:0	6	->
water	108:48	0:0	6	source_index
op	108:60	0:0	6	]
stmts	109:12	111:44	5	
call	109:12	111:43	6	av_log
arg	109:19	109:23	7	NULL
water	109:19	0:0	8	NULL
arg	109:25	109:36	7	AV_LOG_INFO
water	109:25	0:0	8	AV_LOG_INFO
arg	109:38	109:54	7	" [sync #%d:%d]"
water	109:38	0:0	8	" [sync #%d:%d]"
arg	110:19	110:44	7	ost->sync_ist->file_index
water	110:19	0:0	8	ost
op	110:22	0:0	8	->
water	110:24	0:0	8	sync_ist
op	110:32	0:0	8	->
water	110:34	0:0	8	file_index
arg	111:19	111:43	7	ost->sync_ist->st->index
water	111:19	0:0	8	ost
op	111:22	0:0	8	->
water	111:24	0:0	8	sync_ist
op	111:32	0:0	8	->
water	111:34	0:0	8	st
op	111:36	0:0	8	->
water	111:38	0:0	8	index
water	111:44	0:0	6	;
if	112:8	113:48	4	(ost -> stream_copy)
cond	112:12	112:17	5	ost -> stream_copy
water	112:12	0:0	6	ost
op	112:15	0:0	6	->
water	112:17	0:0	6	stream_copy
stmts	113:12	113:48	5	
call	113:12	113:47	6	av_log
arg	113:19	113:23	7	NULL
water	113:19	0:0	8	NULL
arg	113:25	113:36	7	AV_LOG_INFO
water	113:25	0:0	8	AV_LOG_INFO
arg	113:38	113:47	7	" (copy)"
water	113:38	0:0	8	" (copy)"
water	113:48	0:0	6	;
else	114:8	141:8	4
stmts	114:13	141:8	5	
water	114:13	0:0	6	{
decl	115:12	115:78	6	const AVCodec	*in_codec
op	115:39	0:0	6	=
water	115:41	0:0	6	input_streams
op	115:54	0:0	6	[
water	115:55	0:0	6	ost
op	115:58	0:0	6	->
water	115:60	0:0	6	source_index
op	115:72	0:0	6	]
op	115:73	0:0	6	->
water	115:75	0:0	6	dec
decl	116:12	116:49	6	const AVCodec	*out_codec
op	116:39	0:0	6	=
water	116:41	0:0	6	ost
op	116:44	0:0	6	->
water	116:46	0:0	6	enc
decl	117:12	117:44	6	const char	*decoder_name
op	117:39	0:0	6	=
water	117:41	0:0	6	"?"
decl	118:12	118:44	6	const char	*in_codec_name
op	118:39	0:0	6	=
water	118:41	0:0	6	"?"
decl	119:12	119:44	6	const char	*encoder_name
op	119:39	0:0	6	=
water	119:41	0:0	6	"?"
decl	120:12	120:44	6	const char	*out_codec_name
op	120:39	0:0	6	=
water	120:41	0:0	6	"?"
decl	121:12	121:41	6	const AVCodecDescriptor	*desc
if	122:12	129:12	6	(in_codec)
cond	122:16	122:16	7	in_codec
water	122:16	0:0	8	in_codec
stmts	122:26	129:12	7	
water	122:26	0:0	8	{
water	123:16	0:0	8	decoder_name
op	123:30	0:0	8	=
water	123:32	0:0	8	in_codec
op	123:40	0:0	8	->
water	123:42	0:0	8	name
water	123:46	0:0	8	;
water	124:16	0:0	8	desc
op	124:21	0:0	8	=
call	124:23	124:58	8	avcodec_descriptor_get
arg	124:46	124:58	9	in_codec->id
water	124:46	0:0	10	in_codec
op	124:54	0:0	10	->
water	124:56	0:0	10	id
water	124:59	0:0	8	;
if	125:16	126:46	8	(desc)
cond	125:20	125:20	9	desc
water	125:20	0:0	10	desc
stmts	126:20	126:46	9	
water	126:20	0:0	10	in_codec_name
op	126:34	0:0	10	=
water	126:36	0:0	10	desc
op	126:40	0:0	10	->
water	126:42	0:0	10	name
water	126:46	0:0	10	;
if	127:16	128:43	8	(!strcmp (decoder_name ,in_codec_name ))
cond	127:20	127:55	9	!strcmp (decoder_name ,in_codec_name )
op	127:20	0:0	10	!
call	127:21	127:55	10	strcmp
arg	127:28	127:40	11	decoder_name
water	127:28	0:0	12	decoder_name
arg	127:42	127:55	11	in_codec_name
water	127:42	0:0	12	in_codec_name
stmts	128:20	128:43	9	
water	128:20	0:0	10	decoder_name
op	128:33	0:0	10	=
water	128:35	0:0	10	"native"
water	128:43	0:0	10	;
water	129:12	0:0	8	}
if	130:12	137:12	6	(out_codec)
cond	130:16	130:16	7	out_codec
water	130:16	0:0	8	out_codec
stmts	130:27	137:12	7	
water	130:27	0:0	8	{
water	131:16	0:0	8	encoder_name
op	131:31	0:0	8	=
water	131:33	0:0	8	out_codec
op	131:42	0:0	8	->
water	131:44	0:0	8	name
water	131:48	0:0	8	;
water	132:16	0:0	8	desc
op	132:21	0:0	8	=
call	132:23	132:59	8	avcodec_descriptor_get
arg	132:46	132:59	9	out_codec->id
water	132:46	0:0	10	out_codec
op	132:55	0:0	10	->
water	132:57	0:0	10	id
water	132:60	0:0	8	;
if	133:16	134:47	8	(desc)
cond	133:20	133:20	9	desc
water	133:20	0:0	10	desc
stmts	134:20	134:47	9	
water	134:20	0:0	10	out_codec_name
op	134:35	0:0	10	=
water	134:37	0:0	10	desc
op	134:41	0:0	10	->
water	134:43	0:0	10	name
water	134:47	0:0	10	;
if	135:16	136:43	8	(!strcmp (encoder_name ,out_codec_name ))
cond	135:20	135:56	9	!strcmp (encoder_name ,out_codec_name )
op	135:20	0:0	10	!
call	135:21	135:56	10	strcmp
arg	135:28	135:40	11	encoder_name
water	135:28	0:0	12	encoder_name
arg	135:42	135:56	11	out_codec_name
water	135:42	0:0	12	out_codec_name
stmts	136:20	136:43	9	
water	136:20	0:0	10	encoder_name
op	136:33	0:0	10	=
water	136:35	0:0	10	"native"
water	136:43	0:0	10	;
water	137:12	0:0	8	}
call	138:12	140:47	6	av_log
arg	138:19	138:23	7	NULL
water	138:19	0:0	8	NULL
arg	138:25	138:36	7	AV_LOG_INFO
water	138:25	0:0	8	AV_LOG_INFO
arg	138:38	138:61	7	" (%s (%s) -> %s (%s))"
water	138:38	0:0	8	" (%s (%s) -> %s (%s))"
arg	139:19	139:32	7	in_codec_name
water	139:19	0:0	8	in_codec_name
arg	139:34	139:46	7	decoder_name
water	139:34	0:0	8	decoder_name
arg	140:19	140:33	7	out_codec_name
water	140:19	0:0	8	out_codec_name
arg	140:35	140:47	7	encoder_name
water	140:35	0:0	8	encoder_name
water	140:48	0:0	6	;
water	141:8	0:0	6	}
call	142:8	142:38	4	av_log
arg	142:15	142:19	5	NULL
water	142:15	0:0	6	NULL
arg	142:21	142:32	5	AV_LOG_INFO
water	142:21	0:0	6	AV_LOG_INFO
arg	142:34	142:38	5	"\n"
water	142:34	0:0	6	"\n"
water	142:39	0:0	4	;
water	143:4	0:0	4	}
if	144:4	147:4	2	(ret)
cond	144:8	144:8	3	ret
water	144:8	0:0	4	ret
stmts	144:13	147:4	3	
water	144:13	0:0	4	{
call	145:8	145:48	4	av_log
arg	145:15	145:19	5	NULL
water	145:15	0:0	6	NULL
arg	145:21	145:33	5	AV_LOG_ERROR
water	145:21	0:0	6	AV_LOG_ERROR
arg	145:35	145:41	5	"%s\n"
water	145:35	0:0	6	"%s\n"
arg	145:43	145:48	5	error
water	145:43	0:0	6	error
water	145:49	0:0	4	;
return	146:8	146:18	4	ret
water	146:15	0:0	5	ret
water	147:4	0:0	4	}
call	148:4	148:40	2	atomic_store
arg	148:17	148:37	3	&transcode_init_done
op	148:17	0:0	4	&
water	148:18	0:0	4	transcode_init_done
arg	148:39	148:40	3	1
water	148:39	0:0	4	1
water	148:41	0:0	2	;
return	149:4	149:12	2	0
water	149:11	0:0	3	0
