func	1:0	21:0	0	static double	compute_frame_rms
params	1:31	0:0	1	
param	1:32	1:46	2	AVFrame *	frame
param	1:48	1:59	2	int	channel
stmnts	0:0	20:46	1	
decl	3:4	3:26	2	double	rms_value
op	3:21	0:0	2	=
water	3:23	0:0	2	0
op	3:24	0:0	2	.
water	3:25	0:0	2	0
decl	4:4	4:12	2	int	c
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	i
if	5:4	13:4	2	(channel == - 1)
cond	5:8	5:20	3	channel == - 1
water	5:8	0:0	4	channel
op	5:16	0:0	4	==
op	5:19	0:0	4	-
water	5:20	0:0	4	1
stmts	5:23	13:4	3	
water	5:23	0:0	4	{
for	6:8	11:8	4	(c = 0 ;c <av_frame_get_channels (frame );c ++)
forinit	6:13	6:18	5	c = 0 ;
water	6:13	0:0	6	c
op	6:15	0:0	6	=
water	6:17	0:0	6	0
water	6:18	0:0	6	;
cond	6:20	6:51	5	c <av_frame_get_channels (frame )
water	6:20	0:0	6	c
op	6:22	0:0	6	<
call	6:24	6:51	6	av_frame_get_channels
arg	6:46	6:51	7	frame
water	6:46	0:0	8	frame
forexpr	6:54	6:55	5	c ++
water	6:54	0:0	6	c
op	6:55	0:0	6	++
stmts	6:59	11:8	5	
water	6:59	0:0	6	{
decl	7:12	7:70	6	const double	*data_ptr
op	7:35	0:0	6	=
water	7:37	0:0	6	(
water	7:38	0:0	6	double
op	7:45	0:0	6	*
water	7:46	0:0	6	)
water	7:47	0:0	6	frame
op	7:52	0:0	6	->
water	7:54	0:0	6	extended_data
op	7:67	0:0	6	[
water	7:68	0:0	6	c
op	7:69	0:0	6	]
for	8:12	10:12	6	(i = 0 ;i < frame -> nb_samples;i ++)
forinit	8:17	8:22	7	i = 0 ;
water	8:17	0:0	8	i
op	8:19	0:0	8	=
water	8:21	0:0	8	0
water	8:22	0:0	8	;
cond	8:24	8:35	7	i < frame -> nb_samples
water	8:24	0:0	8	i
op	8:26	0:0	8	<
water	8:28	0:0	8	frame
op	8:33	0:0	8	->
water	8:35	0:0	8	nb_samples
forexpr	8:47	8:48	7	i ++
water	8:47	0:0	8	i
op	8:48	0:0	8	++
stmts	8:52	10:12	7	
water	8:52	0:0	8	{
water	9:16	0:0	8	rms_value
op	9:26	0:0	8	+=
call	9:29	9:45	8	pow2
arg	9:34	9:45	9	data_ptr[i]
water	9:34	0:0	10	data_ptr
op	9:42	0:0	10	[
water	9:43	0:0	10	i
op	9:44	0:0	10	]
water	9:46	0:0	8	;
water	10:12	0:0	8	}
water	11:8	0:0	6	}
water	12:8	0:0	4	rms_value
op	12:18	0:0	4	/=
water	12:21	0:0	4	frame
op	12:26	0:0	4	->
water	12:28	0:0	4	nb_samples
call	12:39	12:68	4	*av_frame_get_channels
arg	12:63	12:68	5	frame
water	12:63	0:0	6	frame
water	12:69	0:0	4	;
water	13:4	0:0	4	}
else	13:6	19:4	2
stmts	13:11	19:4	3	
water	13:11	0:0	4	{
decl	14:8	14:72	4	const double	*data_ptr
op	14:31	0:0	4	=
water	14:33	0:0	4	(
water	14:34	0:0	4	double
op	14:41	0:0	4	*
water	14:42	0:0	4	)
water	14:43	0:0	4	frame
op	14:48	0:0	4	->
water	14:50	0:0	4	extended_data
op	14:63	0:0	4	[
water	14:64	0:0	4	channel
op	14:71	0:0	4	]
for	15:8	17:8	4	(i = 0 ;i < frame -> nb_samples;i ++)
forinit	15:13	15:18	5	i = 0 ;
water	15:13	0:0	6	i
op	15:15	0:0	6	=
water	15:17	0:0	6	0
water	15:18	0:0	6	;
cond	15:20	15:31	5	i < frame -> nb_samples
water	15:20	0:0	6	i
op	15:22	0:0	6	<
water	15:24	0:0	6	frame
op	15:29	0:0	6	->
water	15:31	0:0	6	nb_samples
forexpr	15:43	15:44	5	i ++
water	15:43	0:0	6	i
op	15:44	0:0	6	++
stmts	15:48	17:8	5	
water	15:48	0:0	6	{
water	16:12	0:0	6	rms_value
op	16:22	0:0	6	+=
call	16:25	16:41	6	pow2
arg	16:30	16:41	7	data_ptr[i]
water	16:30	0:0	8	data_ptr
op	16:38	0:0	8	[
water	16:39	0:0	8	i
op	16:40	0:0	8	]
water	16:42	0:0	6	;
water	17:8	0:0	6	}
water	18:8	0:0	4	rms_value
op	18:18	0:0	4	/=
water	18:21	0:0	4	frame
op	18:26	0:0	4	->
water	18:28	0:0	4	nb_samples
water	18:38	0:0	4	;
water	19:4	0:0	4	}
return	20:4	20:46	2	FFMAX(sqrt(rms_value),DBL_EPSILON)
call	20:11	20:45	3	FFMAX
arg	20:17	20:32	4	sqrt(rms_value)
call	20:17	20:31	5	sqrt
arg	20:22	20:31	6	rms_value
water	20:22	0:0	7	rms_value
arg	20:34	20:45	4	DBL_EPSILON
water	20:34	0:0	5	DBL_EPSILON
