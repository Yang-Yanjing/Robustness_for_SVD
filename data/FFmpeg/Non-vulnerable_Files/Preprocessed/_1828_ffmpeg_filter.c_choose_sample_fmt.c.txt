func	1:0	21:0	0	void	choose_sample_fmt
params	1:22	0:0	1	
param	1:23	1:35	2	AVStream *	st
param	1:37	1:51	2	AVCodec *	codec
stmnts	3:4	20:4	1	
if	3:4	20:4	2	(codec && codec -> sample_fmts)
cond	3:8	3:24	3	codec && codec -> sample_fmts
water	3:8	0:0	4	codec
op	3:14	0:0	4	&&
water	3:17	0:0	4	codec
op	3:22	0:0	4	->
water	3:24	0:0	4	sample_fmts
stmts	3:37	20:4	3	
water	3:37	0:0	4	{
decl	4:8	4:57	4	const enum AVSampleFormat	*p
op	4:37	0:0	4	=
water	4:39	0:0	4	codec
op	4:44	0:0	4	->
water	4:46	0:0	4	sample_fmts
for	5:8	8:8	4	(;* p != - 1;p ++)
forinit	5:13	5:13	5	;
water	5:13	0:0	6	;
cond	5:15	5:22	5	* p != - 1
op	5:15	0:0	6	*
water	5:16	0:0	6	p
op	5:18	0:0	6	!=
op	5:21	0:0	6	-
water	5:22	0:0	6	1
forexpr	5:25	5:26	5	p ++
water	5:25	0:0	6	p
op	5:26	0:0	6	++
stmts	5:30	8:8	5	
water	5:30	0:0	6	{
if	6:12	7:21	6	(* p == st -> codecpar -> format)
cond	6:16	6:36	7	* p == st -> codecpar -> format
op	6:16	0:0	8	*
water	6:17	0:0	8	p
op	6:19	0:0	8	==
water	6:22	0:0	8	st
op	6:24	0:0	8	->
water	6:26	0:0	8	codecpar
op	6:34	0:0	8	->
water	6:36	0:0	8	format
stmts	7:16	7:21	7	
break	7:16	7:21	8	
water	8:8	0:0	6	}
if	9:8	19:8	4	(* p == - 1)
cond	9:12	9:19	5	* p == - 1
op	9:12	0:0	6	*
water	9:13	0:0	6	p
op	9:15	0:0	6	==
op	9:18	0:0	6	-
water	9:19	0:0	6	1
stmts	9:22	19:8	5	
water	9:22	0:0	6	{
if	10:12	11:80	6	(( codec -> capabilities & AV_CODEC_CAP_LOSSLESS ) &&av_get_sample_fmt_name (st -> codecpar -> format ) >av_get_sample_fmt_name (codec -> sample_fmts [ 0 ] ))
cond	10:15	10:155	7	( codec -> capabilities & AV_CODEC_CAP_LOSSLESS ) &&av_get_sample_fmt_name (st -> codecpar -> format ) >av_get_sample_fmt_name (codec -> sample_fmts [ 0 ] )
water	10:15	0:0	8	(
water	10:16	0:0	8	codec
op	10:21	0:0	8	->
water	10:23	0:0	8	capabilities
op	10:36	0:0	8	&
water	10:38	0:0	8	AV_CODEC_CAP_LOSSLESS
water	10:59	0:0	8	)
op	10:61	0:0	8	&&
call	10:64	10:107	8	av_get_sample_fmt_name
arg	10:87	10:107	9	st->codecpar->format
water	10:87	0:0	10	st
op	10:89	0:0	10	->
water	10:91	0:0	10	codecpar
op	10:99	0:0	10	->
water	10:101	0:0	10	format
op	10:109	0:0	8	>
call	10:111	10:155	8	av_get_sample_fmt_name
arg	10:134	10:155	9	codec->sample_fmts[0]
water	10:134	0:0	10	codec
op	10:139	0:0	10	->
water	10:141	0:0	10	sample_fmts
op	10:152	0:0	10	[
water	10:153	0:0	10	0
op	10:154	0:0	10	]
stmts	11:16	11:80	7	
call	11:16	11:79	8	av_log
arg	11:23	11:27	9	NULL
water	11:23	0:0	10	NULL
arg	11:29	11:41	9	AV_LOG_ERROR
water	11:29	0:0	10	AV_LOG_ERROR
arg	11:43	11:79	9	"Conversion will not be lossless.\n"
water	11:43	0:0	10	"Conversion will not be lossless.\n"
water	11:80	0:0	8	;
if	12:12	17:65	6	(av_get_sample_fmt_name (st -> codecpar -> format ))
cond	12:15	12:58	7	av_get_sample_fmt_name (st -> codecpar -> format )
call	12:15	12:58	8	av_get_sample_fmt_name
arg	12:38	12:58	9	st->codecpar->format
water	12:38	0:0	10	st
op	12:40	0:0	10	->
water	12:42	0:0	10	codecpar
op	12:50	0:0	10	->
water	12:52	0:0	10	format
stmts	13:12	17:65	7	
call	13:12	17:64	8	av_log
arg	13:19	13:23	9	NULL
water	13:19	0:0	10	NULL
arg	13:25	13:39	9	AV_LOG_WARNING
water	13:25	0:0	10	AV_LOG_WARNING
arg	14:19	14:97	9	"Incompatible sample format '%s' for codec '%s', auto-selecting format '%s'\n"
water	14:19	0:0	10	"Incompatible sample format '%s' for codec '%s', auto-selecting format '%s'\n"
arg	15:19	15:63	9	av_get_sample_fmt_name(st->codecpar->format)
call	15:19	15:62	10	av_get_sample_fmt_name
arg	15:42	15:62	11	st->codecpar->format
water	15:42	0:0	12	st
op	15:44	0:0	12	->
water	15:46	0:0	12	codecpar
op	15:54	0:0	12	->
water	15:56	0:0	12	format
arg	16:19	16:30	9	codec->name
water	16:19	0:0	10	codec
op	16:24	0:0	10	->
water	16:26	0:0	10	name
arg	17:19	17:64	9	av_get_sample_fmt_name(codec->sample_fmts[0])
call	17:19	17:63	10	av_get_sample_fmt_name
arg	17:42	17:63	11	codec->sample_fmts[0]
water	17:42	0:0	12	codec
op	17:47	0:0	12	->
water	17:49	0:0	12	sample_fmts
op	17:60	0:0	12	[
water	17:61	0:0	12	0
op	17:62	0:0	12	]
water	17:65	0:0	8	;
water	18:12	0:0	6	st
op	18:14	0:0	6	->
water	18:16	0:0	6	codecpar
op	18:24	0:0	6	->
water	18:26	0:0	6	format
op	18:33	0:0	6	=
water	18:35	0:0	6	codec
op	18:40	0:0	6	->
water	18:42	0:0	6	sample_fmts
op	18:53	0:0	6	[
water	18:54	0:0	6	0
op	18:55	0:0	6	]
water	18:56	0:0	6	;
water	19:8	0:0	6	}
water	20:4	0:0	4	}
