func	1:0	43:0	0	static int	mov_write_stts_tag
params	1:29	0:0	1	
param	1:30	1:45	2	AVIOContext *	pb
param	1:47	1:62	2	MOVTrack *	track
stmnts	0:0	42:20	1	
decl	3:4	3:32	2	MOVStts	*stts_entries
op	3:26	0:0	2	=
water	3:28	0:0	2	NULL
decl	4:4	4:25	2	uint32_t	entries
op	4:21	0:0	2	=
op	4:23	0:0	2	-
water	4:24	0:0	2	1
decl	5:4	5:22	2	uint32_t	atom_size
decl	6:4	6:9	2	int	i
if	7:4	14:4	2	(track -> enc -> codec_type == AVMEDIA_TYPE_AUDIO && ! track -> audio_vbr)
cond	7:8	7:64	3	track -> enc -> codec_type == AVMEDIA_TYPE_AUDIO && ! track -> audio_vbr
water	7:8	0:0	4	track
op	7:13	0:0	4	->
water	7:15	0:0	4	enc
op	7:18	0:0	4	->
water	7:20	0:0	4	codec_type
op	7:31	0:0	4	==
water	7:34	0:0	4	AVMEDIA_TYPE_AUDIO
op	7:53	0:0	4	&&
op	7:56	0:0	4	!
water	7:57	0:0	4	track
op	7:62	0:0	4	->
water	7:64	0:0	4	audio_vbr
stmts	7:75	14:4	3	
water	7:75	0:0	4	{
water	8:8	0:0	4	stts_entries
op	8:21	0:0	4	=
call	8:23	8:54	4	av_malloc
arg	8:33	8:54	5	sizeof(*stts_entries)
op	8:33	0:0	6	sizeof
water	8:39	0:0	6	(
op	8:40	0:0	6	*
water	8:41	0:0	6	stts_entries
water	8:53	0:0	6	)
water	8:55	0:0	4	;
if	9:8	10:34	4	(! stts_entries)
cond	9:12	9:13	5	! stts_entries
op	9:12	0:0	6	!
water	9:13	0:0	6	stts_entries
stmts	10:12	10:34	5	
return	10:12	10:34	6	AVERROR(ENOMEM)
call	10:19	10:33	7	AVERROR
arg	10:27	10:33	8	ENOMEM
water	10:27	0:0	9	ENOMEM
water	11:8	0:0	4	stts_entries
op	11:20	0:0	4	[
water	11:21	0:0	4	0
op	11:22	0:0	4	]
op	11:23	0:0	4	.
water	11:24	0:0	4	count
op	11:30	0:0	4	=
water	11:32	0:0	4	track
op	11:37	0:0	4	->
water	11:39	0:0	4	sample_count
water	11:51	0:0	4	;
water	12:8	0:0	4	stts_entries
op	12:20	0:0	4	[
water	12:21	0:0	4	0
op	12:22	0:0	4	]
op	12:23	0:0	4	.
water	12:24	0:0	4	duration
op	12:33	0:0	4	=
water	12:35	0:0	4	1
water	12:36	0:0	4	;
water	13:8	0:0	4	entries
op	13:16	0:0	4	=
water	13:18	0:0	4	1
water	13:19	0:0	4	;
water	14:4	0:0	4	}
else	14:6	31:4	2
stmts	14:11	31:4	3	
water	14:11	0:0	4	{
if	15:8	19:8	4	(track -> entry)
cond	15:12	15:19	5	track -> entry
water	15:12	0:0	6	track
op	15:17	0:0	6	->
water	15:19	0:0	6	entry
stmts	15:26	19:8	5	
water	15:26	0:0	6	{
water	16:12	0:0	6	stts_entries
op	16:25	0:0	6	=
call	16:27	16:78	6	av_malloc_array
arg	16:43	16:55	7	track->entry
water	16:43	0:0	8	track
op	16:48	0:0	8	->
water	16:50	0:0	8	entry
arg	16:57	16:78	7	sizeof(*stts_entries)
op	16:57	0:0	8	sizeof
water	16:63	0:0	8	(
op	16:64	0:0	8	*
water	16:65	0:0	8	stts_entries
water	16:77	0:0	8	)
water	16:79	0:0	6	;
if	17:12	18:38	6	(! stts_entries)
cond	17:16	17:17	7	! stts_entries
op	17:16	0:0	8	!
water	17:17	0:0	8	stts_entries
stmts	18:16	18:38	7	
return	18:16	18:38	8	AVERROR(ENOMEM)
call	18:23	18:37	9	AVERROR
arg	18:31	18:37	10	ENOMEM
water	18:31	0:0	11	ENOMEM
water	19:8	0:0	6	}
for	20:8	29:8	4	(i = 0 ;i < track -> entry;i ++)
forinit	20:13	20:18	5	i = 0 ;
water	20:13	0:0	6	i
op	20:15	0:0	6	=
water	20:17	0:0	6	0
water	20:18	0:0	6	;
cond	20:20	20:31	5	i < track -> entry
water	20:20	0:0	6	i
op	20:22	0:0	6	<
water	20:24	0:0	6	track
op	20:29	0:0	6	->
water	20:31	0:0	6	entry
forexpr	20:38	20:39	5	i ++
water	20:38	0:0	6	i
op	20:39	0:0	6	++
stmts	20:43	29:8	5	
water	20:43	0:0	6	{
decl	21:12	21:57	6	int	duration
op	21:25	0:0	6	=
call	21:27	21:56	7	get_cluster_duration
arg	21:48	21:53	8	track
water	21:48	0:0	9	track
arg	21:55	21:56	8	i
water	21:55	0:0	9	i
if	22:12	24:12	6	(i && duration == stts_entries [ entries ] . duration)
cond	22:16	22:55	7	i && duration == stts_entries [ entries ] . duration
water	22:16	0:0	8	i
op	22:18	0:0	8	&&
water	22:21	0:0	8	duration
op	22:30	0:0	8	==
water	22:33	0:0	8	stts_entries
op	22:45	0:0	8	[
water	22:46	0:0	8	entries
op	22:53	0:0	8	]
op	22:54	0:0	8	.
water	22:55	0:0	8	duration
stmts	22:65	24:12	7	
water	22:65	0:0	8	{
water	23:16	0:0	8	stts_entries
op	23:28	0:0	8	[
water	23:29	0:0	8	entries
op	23:36	0:0	8	]
op	23:37	0:0	8	.
water	23:38	0:0	8	count
op	23:43	0:0	8	++
water	23:45	0:0	8	;
water	24:12	0:0	8	}
else	24:14	28:12	6
stmts	24:19	28:12	7	
water	24:19	0:0	8	{
water	25:16	0:0	8	entries
op	25:23	0:0	8	++
water	25:25	0:0	8	;
water	26:16	0:0	8	stts_entries
op	26:28	0:0	8	[
water	26:29	0:0	8	entries
op	26:36	0:0	8	]
op	26:37	0:0	8	.
water	26:38	0:0	8	duration
op	26:47	0:0	8	=
water	26:49	0:0	8	duration
water	26:57	0:0	8	;
water	27:16	0:0	8	stts_entries
op	27:28	0:0	8	[
water	27:29	0:0	8	entries
op	27:36	0:0	8	]
op	27:37	0:0	8	.
water	27:38	0:0	8	count
op	27:44	0:0	8	=
water	27:46	0:0	8	1
water	27:47	0:0	8	;
water	28:12	0:0	8	}
water	29:8	0:0	6	}
water	30:8	0:0	4	entries
op	30:15	0:0	4	++
water	30:17	0:0	4	;
water	31:4	0:0	4	}
water	32:4	0:0	2	atom_size
op	32:14	0:0	2	=
water	32:16	0:0	2	16
op	32:19	0:0	2	+
water	32:21	0:0	2	(
water	32:22	0:0	2	entries
op	32:30	0:0	2	*
water	32:32	0:0	2	8
water	32:33	0:0	2	)
water	32:34	0:0	2	;
call	33:4	33:27	2	avio_wb32
arg	33:14	33:16	3	pb
water	33:14	0:0	4	pb
arg	33:18	33:27	3	atom_size
water	33:18	0:0	4	atom_size
water	33:28	0:0	2	;
call	34:4	34:27	2	ffio_wfourcc
arg	34:17	34:19	3	pb
water	34:17	0:0	4	pb
arg	34:21	34:27	3	"stts"
water	34:21	0:0	4	"stts"
water	34:28	0:0	2	;
call	35:4	35:19	2	avio_wb32
arg	35:14	35:16	3	pb
water	35:14	0:0	4	pb
arg	35:18	35:19	3	0
water	35:18	0:0	4	0
water	35:20	0:0	2	;
call	36:4	36:25	2	avio_wb32
arg	36:14	36:16	3	pb
water	36:14	0:0	4	pb
arg	36:18	36:25	3	entries
water	36:18	0:0	4	entries
water	36:26	0:0	2	;
for	37:4	40:4	2	(i = 0 ;i < entries;i ++)
forinit	37:9	37:14	3	i = 0 ;
water	37:9	0:0	4	i
op	37:11	0:0	4	=
water	37:13	0:0	4	0
water	37:14	0:0	4	;
cond	37:16	37:20	3	i < entries
water	37:16	0:0	4	i
op	37:18	0:0	4	<
water	37:20	0:0	4	entries
forexpr	37:29	37:30	3	i ++
water	37:29	0:0	4	i
op	37:30	0:0	4	++
stmts	37:34	40:4	3	
water	37:34	0:0	4	{
call	38:8	38:43	4	avio_wb32
arg	38:18	38:20	5	pb
water	38:18	0:0	6	pb
arg	38:22	38:43	5	stts_entries[i].count
water	38:22	0:0	6	stts_entries
op	38:34	0:0	6	[
water	38:35	0:0	6	i
op	38:36	0:0	6	]
op	38:37	0:0	6	.
water	38:38	0:0	6	count
water	38:44	0:0	4	;
call	39:8	39:46	4	avio_wb32
arg	39:18	39:20	5	pb
water	39:18	0:0	6	pb
arg	39:22	39:46	5	stts_entries[i].duration
water	39:22	0:0	6	stts_entries
op	39:34	0:0	6	[
water	39:35	0:0	6	i
op	39:36	0:0	6	]
op	39:37	0:0	6	.
water	39:38	0:0	6	duration
water	39:47	0:0	4	;
water	40:4	0:0	4	}
call	41:4	41:24	2	av_free
arg	41:12	41:24	3	stts_entries
water	41:12	0:0	4	stts_entries
water	41:25	0:0	2	;
return	42:4	42:20	2	atom_size
water	42:11	0:0	3	atom_size
