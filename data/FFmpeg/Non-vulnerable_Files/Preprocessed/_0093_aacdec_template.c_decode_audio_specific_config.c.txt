func	1:0	64:0	0	static int	decode_audio_specific_config
params	1:39	0:0	1	
param	1:40	1:54	2	AACContext *	ac
param	2:40	2:61	2	AVCodecContext *	avctx
param	3:40	3:62	2	MPEG4AudioConfig *	m4ac
param	4:40	4:59	2	const uint8_t *	data
param	4:61	4:77	2	int64_t	bit_size
param	5:40	5:58	2	int	sync_extension
stmnts	0:0	63:30	1	
decl	7:4	7:20	2	GetBitContext	gb
decl	8:4	8:14	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:14	2	int	ret
if	9:4	12:4	2	(bit_size < 0 || bit_size > INT_MAX)
cond	9:8	9:35	3	bit_size < 0 || bit_size > INT_MAX
water	9:8	0:0	4	bit_size
op	9:17	0:0	4	<
water	9:19	0:0	4	0
op	9:21	0:0	4	||
water	9:24	0:0	4	bit_size
op	9:33	0:0	4	>
water	9:35	0:0	4	INT_MAX
stmts	9:44	12:4	3	
water	9:44	0:0	4	{
call	10:8	10:77	4	av_log
arg	10:15	10:20	5	avctx
water	10:15	0:0	6	avctx
arg	10:22	10:34	5	AV_LOG_ERROR
water	10:22	0:0	6	AV_LOG_ERROR
arg	10:36	10:77	5	"Audio specific config size is invalid\n"
water	10:36	0:0	6	"Audio specific config size is invalid\n"
water	10:78	0:0	4	;
return	11:8	11:34	4	AVERROR_INVALIDDATA
water	11:15	0:0	5	AVERROR_INVALIDDATA
water	12:4	0:0	4	}
call	13:4	13:72	2	ff_dlog
arg	13:12	13:17	3	avctx
water	13:12	0:0	4	avctx
arg	13:19	13:52	3	"audio specific config size %d\n"
water	13:19	0:0	4	"audio specific config size %d\n"
arg	13:54	13:72	3	(int)bit_size>>3
water	13:54	0:0	4	(
water	13:55	0:0	4	int
water	13:58	0:0	4	)
water	13:59	0:0	4	bit_size
op	13:68	0:0	4	>>
water	13:71	0:0	4	3
water	13:73	0:0	2	;
for	14:4	15:40	2	(i = 0 ;i < bit_size >> 3;i ++)
forinit	14:9	14:14	3	i = 0 ;
water	14:9	0:0	4	i
op	14:11	0:0	4	=
water	14:13	0:0	4	0
water	14:14	0:0	4	;
cond	14:16	14:32	3	i < bit_size >> 3
water	14:16	0:0	4	i
op	14:18	0:0	4	<
water	14:20	0:0	4	bit_size
op	14:29	0:0	4	>>
water	14:32	0:0	4	3
forexpr	14:35	14:36	3	i ++
water	14:35	0:0	4	i
op	14:36	0:0	4	++
stmts	15:8	15:40	3	
call	15:8	15:39	4	ff_dlog
arg	15:16	15:21	5	avctx
water	15:16	0:0	6	avctx
arg	15:23	15:30	5	"%02x "
water	15:23	0:0	6	"%02x "
arg	15:32	15:39	5	data[i]
water	15:32	0:0	6	data
op	15:36	0:0	6	[
water	15:37	0:0	6	i
op	15:38	0:0	6	]
water	15:40	0:0	4	;
call	16:4	16:23	2	ff_dlog
arg	16:12	16:17	3	avctx
water	16:12	0:0	4	avctx
arg	16:19	16:23	3	"\n"
water	16:19	0:0	4	"\n"
water	16:24	0:0	2	;
if	17:4	18:18	2	(( ret =init_get_bits (& gb ,data ,bit_size ) ) < 0)
cond	17:8	17:53	3	( ret =init_get_bits (& gb ,data ,bit_size ) ) < 0
water	17:8	0:0	4	(
water	17:9	0:0	4	ret
op	17:13	0:0	4	=
call	17:15	17:48	4	init_get_bits
arg	17:29	17:32	5	&gb
op	17:29	0:0	6	&
water	17:30	0:0	6	gb
arg	17:34	17:38	5	data
water	17:34	0:0	6	data
arg	17:40	17:48	5	bit_size
water	17:40	0:0	6	bit_size
water	17:49	0:0	4	)
op	17:51	0:0	4	<
water	17:53	0:0	4	0
stmts	18:8	18:18	3	
return	18:8	18:18	4	ret
water	18:15	0:0	5	ret
if	19:4	21:34	2	(( i =avpriv_mpeg4audio_get_config (m4ac ,data ,bit_size ,sync_extension ) ) < 0)
cond	19:8	20:61	3	( i =avpriv_mpeg4audio_get_config (m4ac ,data ,bit_size ,sync_extension ) ) < 0
water	19:8	0:0	4	(
water	19:9	0:0	4	i
op	19:11	0:0	4	=
call	19:13	20:56	4	avpriv_mpeg4audio_get_config
arg	19:42	19:46	5	m4ac
water	19:42	0:0	6	m4ac
arg	19:48	19:52	5	data
water	19:48	0:0	6	data
arg	19:54	19:62	5	bit_size
water	19:54	0:0	6	bit_size
arg	20:42	20:56	5	sync_extension
water	20:42	0:0	6	sync_extension
water	20:57	0:0	4	)
op	20:59	0:0	4	<
water	20:61	0:0	4	0
stmts	21:8	21:34	3	
return	21:8	21:34	4	AVERROR_INVALIDDATA
water	21:15	0:0	5	AVERROR_INVALIDDATA
if	22:4	27:4	2	(m4ac -> sampling_index > 12)
cond	22:8	22:31	3	m4ac -> sampling_index > 12
water	22:8	0:0	4	m4ac
op	22:12	0:0	4	->
water	22:14	0:0	4	sampling_index
op	22:29	0:0	4	>
water	22:31	0:0	4	12
stmts	22:35	27:4	3	
water	22:35	0:0	4	{
call	23:8	25:35	4	av_log
arg	23:15	23:20	5	avctx
water	23:15	0:0	6	avctx
arg	23:22	23:34	5	AV_LOG_ERROR
water	23:22	0:0	6	AV_LOG_ERROR
arg	24:15	24:49	5	"invalid sampling rate index %d\n"
water	24:15	0:0	6	"invalid sampling rate index %d\n"
arg	25:15	25:35	5	m4ac->sampling_index
water	25:15	0:0	6	m4ac
op	25:19	0:0	6	->
water	25:21	0:0	6	sampling_index
water	25:36	0:0	4	;
return	26:8	26:34	4	AVERROR_INVALIDDATA
water	26:15	0:0	5	AVERROR_INVALIDDATA
water	27:4	0:0	4	}
if	28:4	34:4	2	(m4ac -> object_type == AOT_ER_AAC_LD && ( m4ac -> sampling_index < 3 || m4ac -> sampling_index > 7 ))
cond	28:8	29:61	3	m4ac -> object_type == AOT_ER_AAC_LD && ( m4ac -> sampling_index < 3 || m4ac -> sampling_index > 7 )
water	28:8	0:0	4	m4ac
op	28:12	0:0	4	->
water	28:14	0:0	4	object_type
op	28:26	0:0	4	==
water	28:29	0:0	4	AOT_ER_AAC_LD
op	28:43	0:0	4	&&
water	29:8	0:0	4	(
water	29:9	0:0	4	m4ac
op	29:13	0:0	4	->
water	29:15	0:0	4	sampling_index
op	29:30	0:0	4	<
water	29:32	0:0	4	3
op	29:34	0:0	4	||
water	29:37	0:0	4	m4ac
op	29:41	0:0	4	->
water	29:43	0:0	4	sampling_index
op	29:58	0:0	4	>
water	29:60	0:0	4	7
water	29:61	0:0	4	)
stmts	29:64	34:4	3	
water	29:64	0:0	4	{
call	30:8	32:35	4	av_log
arg	30:15	30:20	5	avctx
water	30:15	0:0	6	avctx
arg	30:22	30:34	5	AV_LOG_ERROR
water	30:22	0:0	6	AV_LOG_ERROR
arg	31:15	31:59	5	"invalid low delay sampling rate index %d\n"
water	31:15	0:0	6	"invalid low delay sampling rate index %d\n"
arg	32:15	32:35	5	m4ac->sampling_index
water	32:15	0:0	6	m4ac
op	32:19	0:0	6	->
water	32:21	0:0	6	sampling_index
water	32:36	0:0	4	;
return	33:8	33:34	4	AVERROR_INVALIDDATA
water	33:15	0:0	5	AVERROR_INVALIDDATA
water	34:4	0:0	4	}
call	35:4	35:25	2	skip_bits_long
arg	35:19	35:22	3	&gb
op	35:19	0:0	4	&
water	35:20	0:0	4	gb
arg	35:24	35:25	3	i
water	35:24	0:0	4	i
water	35:26	0:0	2	;
switch	36:4	57:4	2	(m4ac -> object_type)
cond	36:12	36:18	3	m4ac -> object_type
water	36:12	0:0	4	m4ac
op	36:16	0:0	4	->
water	36:18	0:0	4	object_type
stmts	36:31	57:4	3	
water	36:31	0:0	4	{
label	37:4	37:21	4	case AOT_AAC_MAIN :
label	38:4	38:19	4	case AOT_AAC_LC :
label	39:4	39:20	4	case AOT_AAC_LTP :
label	40:4	40:22	4	case AOT_ER_AAC_LC :
label	41:4	41:22	4	case AOT_ER_AAC_LD :
if	42:8	44:22	4	(( ret =decode_ga_specific_config (ac ,avctx ,& gb ,m4ac ,m4ac -> chan_config ) ) < 0)
cond	42:12	43:72	5	( ret =decode_ga_specific_config (ac ,avctx ,& gb ,m4ac ,m4ac -> chan_config ) ) < 0
water	42:12	0:0	6	(
water	42:13	0:0	6	ret
op	42:17	0:0	6	=
call	42:19	43:67	6	decode_ga_specific_config
arg	42:45	42:47	7	ac
water	42:45	0:0	8	ac
arg	42:49	42:54	7	avctx
water	42:49	0:0	8	avctx
arg	42:56	42:59	7	&gb
op	42:56	0:0	8	&
water	42:57	0:0	8	gb
arg	43:44	43:48	7	m4ac
water	43:44	0:0	8	m4ac
arg	43:50	43:67	7	m4ac->chan_config
water	43:50	0:0	8	m4ac
op	43:54	0:0	8	->
water	43:56	0:0	8	chan_config
water	43:68	0:0	6	)
op	43:70	0:0	6	<
water	43:72	0:0	6	0
stmts	44:12	44:22	5	
return	44:12	44:22	6	ret
water	44:19	0:0	7	ret
break	45:8	45:13	4	
label	46:4	46:23	4	case AOT_ER_AAC_ELD :
if	47:8	49:22	4	(( ret =decode_eld_specific_config (ac ,avctx ,& gb ,m4ac ,m4ac -> chan_config ) ) < 0)
cond	47:12	48:74	5	( ret =decode_eld_specific_config (ac ,avctx ,& gb ,m4ac ,m4ac -> chan_config ) ) < 0
water	47:12	0:0	6	(
water	47:13	0:0	6	ret
op	47:17	0:0	6	=
call	47:19	48:69	6	decode_eld_specific_config
arg	47:46	47:48	7	ac
water	47:46	0:0	8	ac
arg	47:50	47:55	7	avctx
water	47:50	0:0	8	avctx
arg	47:57	47:60	7	&gb
op	47:57	0:0	8	&
water	47:58	0:0	8	gb
arg	48:46	48:50	7	m4ac
water	48:46	0:0	8	m4ac
arg	48:52	48:69	7	m4ac->chan_config
water	48:52	0:0	8	m4ac
op	48:56	0:0	8	->
water	48:58	0:0	8	chan_config
water	48:70	0:0	6	)
op	48:72	0:0	6	<
water	48:74	0:0	6	0
stmts	49:12	49:22	5	
return	49:12	49:22	6	ret
water	49:19	0:0	7	ret
break	50:8	50:13	4	
label	51:4	51:11	4	default :
call	52:8	55:55	4	avpriv_report_missing_feature
arg	52:38	52:43	5	avctx
water	52:38	0:0	6	avctx
arg	53:38	53:62	5	"Audio object type %s%d"
water	53:38	0:0	6	"Audio object type %s%d"
arg	54:38	54:66	5	m4ac->sbr==1?"SBR+":""
water	54:38	0:0	6	m4ac
op	54:42	0:0	6	->
water	54:44	0:0	6	sbr
op	54:48	0:0	6	==
water	54:51	0:0	6	1
water	54:53	0:0	6	?
water	54:55	0:0	6	"SBR+"
water	54:62	0:0	6	:
water	54:64	0:0	6	""
arg	55:38	55:55	5	m4ac->object_type
water	55:38	0:0	6	m4ac
op	55:42	0:0	6	->
water	55:44	0:0	6	object_type
water	55:56	0:0	4	;
return	56:8	56:30	4	AVERROR(ENOSYS)
call	56:15	56:29	5	AVERROR
arg	56:23	56:29	6	ENOSYS
water	56:23	0:0	7	ENOSYS
water	57:4	0:0	4	}
call	58:4	62:20	2	ff_dlog
arg	58:12	58:17	3	avctx
water	58:12	0:0	4	avctx
arg	59:12	59:73	3	"AOT %d chan config %d sampling index %d (%d) SBR %d PS %d\n"
water	59:12	0:0	4	"AOT %d chan config %d sampling index %d (%d) SBR %d PS %d\n"
arg	60:12	60:29	3	m4ac->object_type
water	60:12	0:0	4	m4ac
op	60:16	0:0	4	->
water	60:18	0:0	4	object_type
arg	60:31	60:48	3	m4ac->chan_config
water	60:31	0:0	4	m4ac
op	60:35	0:0	4	->
water	60:37	0:0	4	chan_config
arg	60:50	60:70	3	m4ac->sampling_index
water	60:50	0:0	4	m4ac
op	60:54	0:0	4	->
water	60:56	0:0	4	sampling_index
arg	61:12	61:29	3	m4ac->sample_rate
water	61:12	0:0	4	m4ac
op	61:16	0:0	4	->
water	61:18	0:0	4	sample_rate
arg	61:31	61:40	3	m4ac->sbr
water	61:31	0:0	4	m4ac
op	61:35	0:0	4	->
water	61:37	0:0	4	sbr
arg	62:12	62:20	3	m4ac->ps
water	62:12	0:0	4	m4ac
op	62:16	0:0	4	->
water	62:18	0:0	4	ps
water	62:21	0:0	2	;
return	63:4	63:30	2	get_bits_count(&gb)
call	63:11	63:29	3	get_bits_count
arg	63:26	63:29	4	&gb
op	63:26	0:0	5	&
water	63:27	0:0	5	gb
