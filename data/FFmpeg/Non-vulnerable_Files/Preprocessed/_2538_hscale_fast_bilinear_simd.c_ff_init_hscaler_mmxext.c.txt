func	1:8	137:0	0	int	ff_init_hscaler_mmxext
params	1:34	0:0	1	
param	1:35	1:43	2	int	dstW
param	1:45	1:53	2	int	xInc
param	1:55	1:74	2	uint8_t *	filterCode
param	2:39	2:54	2	int16_t *	filter
param	2:56	2:74	2	int32_t *	filterPos
param	3:39	3:52	2	int	numSplits
stmnts	0:0	136:26	1	
decl	5:4	5:22	2	uint8_t	*fragmentA
decl	6:4	6:26	2	x86_reg	imm8OfPShufW1A
decl	7:4	7:26	2	x86_reg	imm8OfPShufW2A
decl	8:4	8:27	2	x86_reg	fragmentLengthA
decl	9:4	9:22	2	uint8_t	*fragmentB
decl	10:4	10:26	2	x86_reg	imm8OfPShufW1B
decl	11:4	11:26	2	x86_reg	imm8OfPShufW2B
decl	12:4	12:27	2	x86_reg	fragmentLengthB
decl	13:4	13:19	2	int	fragmentPos
decl	14:4	14:15	2	int	xpos
water	14:12	0:0	2	,
decl	14:4	14:15	2	int	i
water	22:4	0:0	2	__asm__
water	22:12	0:0	2	volatile
water	22:21	0:0	2	(
water	23:8	0:0	2	"jmp                         9f                 \n\t"
water	25:8	0:0	2	"0:                                             \n\t"
water	26:8	0:0	2	"movq    (%%"
water	26:21	0:0	2	REG_d
water	26:26	0:0	2	", %%"
water	26:32	0:0	2	REG_a
water	26:37	0:0	2	"), %%mm3          \n\t"
water	27:8	0:0	2	"movd    (%%"
water	27:21	0:0	2	REG_c
water	27:26	0:0	2	", %%"
water	27:32	0:0	2	REG_S
water	27:37	0:0	2	"), %%mm0          \n\t"
water	28:8	0:0	2	"movd   1(%%"
water	28:21	0:0	2	REG_c
water	28:26	0:0	2	", %%"
water	28:32	0:0	2	REG_S
water	28:37	0:0	2	"), %%mm1          \n\t"
water	29:8	0:0	2	"punpcklbw                %%mm7, %%mm1          \n\t"
water	30:8	0:0	2	"punpcklbw                %%mm7, %%mm0          \n\t"
water	31:8	0:0	2	"pshufw                   $0xFF, %%mm1, %%mm1   \n\t"
water	32:8	0:0	2	"1:                                             \n\t"
water	33:8	0:0	2	"pshufw                   $0xFF, %%mm0, %%mm0   \n\t"
water	34:8	0:0	2	"2:                                             \n\t"
water	35:8	0:0	2	"psubw                    %%mm1, %%mm0          \n\t"
water	36:8	0:0	2	"movl   8(%%"
water	36:21	0:0	2	REG_b
water	36:26	0:0	2	", %%"
water	36:32	0:0	2	REG_a
water	36:37	0:0	2	"), %%esi          \n\t"
water	37:8	0:0	2	"pmullw                   %%mm3, %%mm0          \n\t"
water	38:8	0:0	2	"psllw                       $7, %%mm1          \n\t"
water	39:8	0:0	2	"paddw                    %%mm1, %%mm0          \n\t"
water	40:8	0:0	2	"movq                     %%mm0, (%%"
water	40:45	0:0	2	REG_D
water	40:50	0:0	2	", %%"
water	40:56	0:0	2	REG_a
water	40:61	0:0	2	") \n\t"
water	41:8	0:0	2	"add                         $8, %%"
water	41:44	0:0	2	REG_a
water	41:49	0:0	2	"      \n\t"
water	43:8	0:0	2	"9:                                             \n\t"
water	44:8	0:0	2	"lea       "
call	44:21	44:36	2	LOCAL_MANGLE
arg	44:34	44:36	3	0b
water	44:34	0:0	4	0
water	44:35	0:0	4	b
water	44:38	0:0	2	", %0             \n\t"
water	45:8	0:0	2	"lea       "
call	45:21	45:36	2	LOCAL_MANGLE
arg	45:34	45:36	3	1b
water	45:34	0:0	4	1
water	45:35	0:0	4	b
water	45:38	0:0	2	", %1             \n\t"
water	46:8	0:0	2	"lea       "
call	46:21	46:36	2	LOCAL_MANGLE
arg	46:34	46:36	3	2b
water	46:34	0:0	4	2
water	46:35	0:0	4	b
water	46:38	0:0	2	", %2             \n\t"
water	47:8	0:0	2	"dec                         %1                 \n\t"
water	48:8	0:0	2	"dec                         %2                 \n\t"
water	49:8	0:0	2	"sub                         %0, %1             \n\t"
water	50:8	0:0	2	"sub                         %0, %2             \n\t"
water	51:8	0:0	2	"lea       "
call	51:21	51:36	2	LOCAL_MANGLE
arg	51:34	51:36	3	9b
water	51:34	0:0	4	9
water	51:35	0:0	4	b
water	51:38	0:0	2	", %3             \n\t"
water	52:8	0:0	2	"sub                         %0, %3             \n\t"
water	53:8	0:0	2	:
water	53:10	0:0	2	"=r"
water	53:15	0:0	2	(
water	53:16	0:0	2	fragmentA
water	53:25	0:0	2	)
water	53:26	0:0	2	,
water	53:28	0:0	2	"=r"
water	53:33	0:0	2	(
water	53:34	0:0	2	imm8OfPShufW1A
water	53:48	0:0	2	)
water	53:49	0:0	2	,
water	53:51	0:0	2	"=r"
water	53:56	0:0	2	(
water	53:57	0:0	2	imm8OfPShufW2A
water	53:71	0:0	2	)
water	53:72	0:0	2	,
water	54:10	0:0	2	"=r"
water	54:15	0:0	2	(
water	54:16	0:0	2	fragmentLengthA
water	54:31	0:0	2	)
water	55:8	0:0	2	)
water	55:9	0:0	2	;
water	56:4	0:0	2	__asm__
water	56:12	0:0	2	volatile
water	56:21	0:0	2	(
water	57:8	0:0	2	"jmp                         9f                 \n\t"
water	59:8	0:0	2	"0:                                             \n\t"
water	60:8	0:0	2	"movq    (%%"
water	60:21	0:0	2	REG_d
water	60:26	0:0	2	", %%"
water	60:32	0:0	2	REG_a
water	60:37	0:0	2	"), %%mm3          \n\t"
water	61:8	0:0	2	"movd    (%%"
water	61:21	0:0	2	REG_c
water	61:26	0:0	2	", %%"
water	61:32	0:0	2	REG_S
water	61:37	0:0	2	"), %%mm0          \n\t"
water	62:8	0:0	2	"punpcklbw                %%mm7, %%mm0          \n\t"
water	63:8	0:0	2	"pshufw                   $0xFF, %%mm0, %%mm1   \n\t"
water	64:8	0:0	2	"1:                                             \n\t"
water	65:8	0:0	2	"pshufw                   $0xFF, %%mm0, %%mm0   \n\t"
water	66:8	0:0	2	"2:                                             \n\t"
water	67:8	0:0	2	"psubw                    %%mm1, %%mm0          \n\t"
water	68:8	0:0	2	"movl   8(%%"
water	68:21	0:0	2	REG_b
water	68:26	0:0	2	", %%"
water	68:32	0:0	2	REG_a
water	68:37	0:0	2	"), %%esi          \n\t"
water	69:8	0:0	2	"pmullw                   %%mm3, %%mm0          \n\t"
water	70:8	0:0	2	"psllw                       $7, %%mm1          \n\t"
water	71:8	0:0	2	"paddw                    %%mm1, %%mm0          \n\t"
water	72:8	0:0	2	"movq                     %%mm0, (%%"
water	72:45	0:0	2	REG_D
water	72:50	0:0	2	", %%"
water	72:56	0:0	2	REG_a
water	72:61	0:0	2	") \n\t"
water	73:8	0:0	2	"add                         $8, %%"
water	73:44	0:0	2	REG_a
water	73:49	0:0	2	"      \n\t"
water	75:8	0:0	2	"9:                                             \n\t"
water	76:8	0:0	2	"lea       "
call	76:21	76:36	2	LOCAL_MANGLE
arg	76:34	76:36	3	0b
water	76:34	0:0	4	0
water	76:35	0:0	4	b
water	76:38	0:0	2	", %0             \n\t"
water	77:8	0:0	2	"lea       "
call	77:21	77:36	2	LOCAL_MANGLE
arg	77:34	77:36	3	1b
water	77:34	0:0	4	1
water	77:35	0:0	4	b
water	77:38	0:0	2	", %1             \n\t"
water	78:8	0:0	2	"lea       "
call	78:21	78:36	2	LOCAL_MANGLE
arg	78:34	78:36	3	2b
water	78:34	0:0	4	2
water	78:35	0:0	4	b
water	78:38	0:0	2	", %2             \n\t"
water	79:8	0:0	2	"dec                         %1                 \n\t"
water	80:8	0:0	2	"dec                         %2                 \n\t"
water	81:8	0:0	2	"sub                         %0, %1             \n\t"
water	82:8	0:0	2	"sub                         %0, %2             \n\t"
water	83:8	0:0	2	"lea       "
call	83:21	83:36	2	LOCAL_MANGLE
arg	83:34	83:36	3	9b
water	83:34	0:0	4	9
water	83:35	0:0	4	b
water	83:38	0:0	2	", %3             \n\t"
water	84:8	0:0	2	"sub                         %0, %3             \n\t"
water	85:8	0:0	2	:
water	85:10	0:0	2	"=r"
water	85:15	0:0	2	(
water	85:16	0:0	2	fragmentB
water	85:25	0:0	2	)
water	85:26	0:0	2	,
water	85:28	0:0	2	"=r"
water	85:33	0:0	2	(
water	85:34	0:0	2	imm8OfPShufW1B
water	85:48	0:0	2	)
water	85:49	0:0	2	,
water	85:51	0:0	2	"=r"
water	85:56	0:0	2	(
water	85:57	0:0	2	imm8OfPShufW2B
water	85:71	0:0	2	)
water	85:72	0:0	2	,
water	86:10	0:0	2	"=r"
water	86:15	0:0	2	(
water	86:16	0:0	2	fragmentLengthB
water	86:31	0:0	2	)
water	87:8	0:0	2	)
water	87:9	0:0	2	;
water	88:4	0:0	2	xpos
op	88:16	0:0	2	=
water	88:18	0:0	2	0
water	88:19	0:0	2	;
water	89:4	0:0	2	fragmentPos
op	89:16	0:0	2	=
water	89:18	0:0	2	0
water	89:19	0:0	2	;
for	90:4	133:4	2	(i = 0 ;i < dstW / numSplits;i ++)
forinit	90:9	90:14	3	i = 0 ;
water	90:9	0:0	4	i
op	90:11	0:0	4	=
water	90:13	0:0	4	0
water	90:14	0:0	4	;
cond	90:16	90:27	3	i < dstW / numSplits
water	90:16	0:0	4	i
op	90:18	0:0	4	<
water	90:20	0:0	4	dstW
op	90:25	0:0	4	/
water	90:27	0:0	4	numSplits
forexpr	90:38	90:39	3	i ++
water	90:38	0:0	4	i
op	90:39	0:0	4	++
stmts	90:43	133:4	3	
water	90:43	0:0	4	{
decl	91:8	91:27	4	int	xx
op	91:15	0:0	4	=
water	91:17	0:0	4	xpos
op	91:22	0:0	4	>>
water	91:25	0:0	4	16
if	92:8	131:8	4	(( i & 3 ) == 0)
cond	92:12	92:23	5	( i & 3 ) == 0
water	92:12	0:0	6	(
water	92:13	0:0	6	i
op	92:15	0:0	6	&
water	92:17	0:0	6	3
water	92:18	0:0	6	)
op	92:20	0:0	6	==
water	92:23	0:0	6	0
stmts	92:26	131:8	5	
water	92:26	0:0	6	{
decl	93:12	93:38	6	int	a
op	93:35	0:0	6	=
water	93:37	0:0	6	0
decl	94:12	94:63	6	int	b
op	94:35	0:0	6	=
water	94:37	0:0	6	(
water	94:38	0:0	6	(
water	94:39	0:0	6	xpos
op	94:44	0:0	6	+
water	94:46	0:0	6	xInc
water	94:50	0:0	6	)
op	94:52	0:0	6	>>
water	94:55	0:0	6	16
water	94:57	0:0	6	)
op	94:59	0:0	6	-
water	94:61	0:0	6	xx
decl	95:12	95:67	6	int	c
op	95:35	0:0	6	=
water	95:37	0:0	6	(
water	95:38	0:0	6	(
water	95:39	0:0	6	xpos
op	95:44	0:0	6	+
water	95:46	0:0	6	xInc
op	95:51	0:0	6	*
water	95:53	0:0	6	2
water	95:54	0:0	6	)
op	95:56	0:0	6	>>
water	95:59	0:0	6	16
water	95:61	0:0	6	)
op	95:63	0:0	6	-
water	95:65	0:0	6	xx
decl	96:12	96:67	6	int	d
op	96:35	0:0	6	=
water	96:37	0:0	6	(
water	96:38	0:0	6	(
water	96:39	0:0	6	xpos
op	96:44	0:0	6	+
water	96:46	0:0	6	xInc
op	96:51	0:0	6	*
water	96:53	0:0	6	3
water	96:54	0:0	6	)
op	96:56	0:0	6	>>
water	96:59	0:0	6	16
water	96:61	0:0	6	)
op	96:63	0:0	6	-
water	96:65	0:0	6	xx
decl	97:12	97:48	6	int	inc
op	97:35	0:0	6	=
water	97:37	0:0	6	(
water	97:38	0:0	6	d
op	97:40	0:0	6	+
water	97:42	0:0	6	1
op	97:44	0:0	6	<
water	97:46	0:0	6	4
water	97:47	0:0	6	)
decl	98:12	98:64	6	uint8_t	*fragment
op	98:35	0:0	6	=
water	98:37	0:0	6	inc
water	98:41	0:0	6	?
water	98:43	0:0	6	fragmentB
water	98:53	0:0	6	:
water	98:55	0:0	6	fragmentA
decl	99:12	99:74	6	x86_reg	imm8OfPShufW1
op	99:35	0:0	6	=
water	99:37	0:0	6	inc
water	99:41	0:0	6	?
water	99:43	0:0	6	imm8OfPShufW1B
water	99:58	0:0	6	:
water	99:60	0:0	6	imm8OfPShufW1A
decl	100:12	100:74	6	x86_reg	imm8OfPShufW2
op	100:35	0:0	6	=
water	100:37	0:0	6	inc
water	100:41	0:0	6	?
water	100:43	0:0	6	imm8OfPShufW2B
water	100:58	0:0	6	:
water	100:60	0:0	6	imm8OfPShufW2A
decl	101:12	101:76	6	x86_reg	fragmentLength
op	101:35	0:0	6	=
water	101:37	0:0	6	inc
water	101:41	0:0	6	?
water	101:43	0:0	6	fragmentLengthB
water	101:59	0:0	6	:
water	101:61	0:0	6	fragmentLengthA
decl	102:12	102:50	6	int	maxShift
op	102:35	0:0	6	=
water	102:37	0:0	6	3
op	102:39	0:0	6	-
water	102:41	0:0	6	(
water	102:42	0:0	6	d
op	102:44	0:0	6	+
water	102:46	0:0	6	inc
water	102:49	0:0	6	)
decl	103:12	103:38	6	int	shift
op	103:35	0:0	6	=
water	103:37	0:0	6	0
if	104:12	127:12	6	(filterCode)
cond	104:16	104:16	7	filterCode
water	104:16	0:0	8	filterCode
stmts	104:28	127:12	7	
water	104:28	0:0	8	{
water	105:16	0:0	8	filter
op	105:22	0:0	8	[
water	105:23	0:0	8	i
op	105:24	0:0	8	]
op	105:33	0:0	8	=
water	105:35	0:0	8	(
water	105:36	0:0	8	(
water	105:37	0:0	8	xpos
op	105:55	0:0	8	&
water	105:57	0:0	8	0
water	105:58	0:0	8	xFFFF
water	105:63	0:0	8	)
op	105:65	0:0	8	^
water	105:67	0:0	8	0
water	105:68	0:0	8	xFFFF
water	105:73	0:0	8	)
op	105:75	0:0	8	>>
water	105:78	0:0	8	9
water	105:79	0:0	8	;
water	106:16	0:0	8	filter
op	106:22	0:0	8	[
water	106:23	0:0	8	i
op	106:25	0:0	8	+
water	106:27	0:0	8	1
op	106:28	0:0	8	]
op	106:33	0:0	8	=
water	106:35	0:0	8	(
water	106:36	0:0	8	(
water	106:37	0:0	8	(
water	106:38	0:0	8	xpos
op	106:43	0:0	8	+
water	106:45	0:0	8	xInc
water	106:49	0:0	8	)
op	106:55	0:0	8	&
water	106:57	0:0	8	0
water	106:58	0:0	8	xFFFF
water	106:63	0:0	8	)
op	106:65	0:0	8	^
water	106:67	0:0	8	0
water	106:68	0:0	8	xFFFF
water	106:73	0:0	8	)
op	106:75	0:0	8	>>
water	106:78	0:0	8	9
water	106:79	0:0	8	;
water	107:16	0:0	8	filter
op	107:22	0:0	8	[
water	107:23	0:0	8	i
op	107:25	0:0	8	+
water	107:27	0:0	8	2
op	107:28	0:0	8	]
op	107:33	0:0	8	=
water	107:35	0:0	8	(
water	107:36	0:0	8	(
water	107:37	0:0	8	(
water	107:38	0:0	8	xpos
op	107:43	0:0	8	+
water	107:45	0:0	8	xInc
op	107:50	0:0	8	*
water	107:52	0:0	8	2
water	107:53	0:0	8	)
op	107:55	0:0	8	&
water	107:57	0:0	8	0
water	107:58	0:0	8	xFFFF
water	107:63	0:0	8	)
op	107:65	0:0	8	^
water	107:67	0:0	8	0
water	107:68	0:0	8	xFFFF
water	107:73	0:0	8	)
op	107:75	0:0	8	>>
water	107:78	0:0	8	9
water	107:79	0:0	8	;
water	108:16	0:0	8	filter
op	108:22	0:0	8	[
water	108:23	0:0	8	i
op	108:25	0:0	8	+
water	108:27	0:0	8	3
op	108:28	0:0	8	]
op	108:33	0:0	8	=
water	108:35	0:0	8	(
water	108:36	0:0	8	(
water	108:37	0:0	8	(
water	108:38	0:0	8	xpos
op	108:43	0:0	8	+
water	108:45	0:0	8	xInc
op	108:50	0:0	8	*
water	108:52	0:0	8	3
water	108:53	0:0	8	)
op	108:55	0:0	8	&
water	108:57	0:0	8	0
water	108:58	0:0	8	xFFFF
water	108:63	0:0	8	)
op	108:65	0:0	8	^
water	108:67	0:0	8	0
water	108:68	0:0	8	xFFFF
water	108:73	0:0	8	)
op	108:75	0:0	8	>>
water	108:78	0:0	8	9
water	108:79	0:0	8	;
water	109:16	0:0	8	filterPos
op	109:25	0:0	8	[
water	109:26	0:0	8	i
op	109:28	0:0	8	/
water	109:30	0:0	8	2
op	109:31	0:0	8	]
op	109:33	0:0	8	=
water	109:35	0:0	8	xx
water	109:37	0:0	8	;
call	110:16	110:73	8	memcpy
arg	110:23	110:47	9	filterCode+fragmentPos
water	110:23	0:0	10	filterCode
op	110:34	0:0	10	+
water	110:36	0:0	10	fragmentPos
arg	110:49	110:57	9	fragment
water	110:49	0:0	10	fragment
arg	110:59	110:73	9	fragmentLength
water	110:59	0:0	10	fragmentLength
water	110:74	0:0	8	;
water	111:16	0:0	8	filterCode
op	111:26	0:0	8	[
water	111:27	0:0	8	fragmentPos
op	111:39	0:0	8	+
water	111:41	0:0	8	imm8OfPShufW1
op	111:54	0:0	8	]
op	111:56	0:0	8	=
water	111:59	0:0	8	(
water	111:60	0:0	8	a
op	111:62	0:0	8	+
water	111:64	0:0	8	inc
water	111:67	0:0	8	)
op	111:75	0:0	8	|
water	112:58	0:0	8	(
water	112:59	0:0	8	(
water	112:60	0:0	8	b
op	112:62	0:0	8	+
water	112:64	0:0	8	inc
water	112:67	0:0	8	)
op	112:69	0:0	8	<<
water	112:72	0:0	8	2
water	112:73	0:0	8	)
op	112:75	0:0	8	|
water	113:58	0:0	8	(
water	113:59	0:0	8	(
water	113:60	0:0	8	c
op	113:62	0:0	8	+
water	113:64	0:0	8	inc
water	113:67	0:0	8	)
op	113:69	0:0	8	<<
water	113:72	0:0	8	4
water	113:73	0:0	8	)
op	113:75	0:0	8	|
water	114:58	0:0	8	(
water	114:59	0:0	8	(
water	114:60	0:0	8	d
op	114:62	0:0	8	+
water	114:64	0:0	8	inc
water	114:67	0:0	8	)
op	114:69	0:0	8	<<
water	114:72	0:0	8	6
water	114:73	0:0	8	)
water	114:74	0:0	8	;
water	115:16	0:0	8	filterCode
op	115:26	0:0	8	[
water	115:27	0:0	8	fragmentPos
op	115:39	0:0	8	+
water	115:41	0:0	8	imm8OfPShufW2
op	115:54	0:0	8	]
op	115:56	0:0	8	=
water	115:59	0:0	8	a
op	115:61	0:0	8	|
water	115:63	0:0	8	(
water	115:64	0:0	8	b
op	115:66	0:0	8	<<
water	115:69	0:0	8	2
water	115:70	0:0	8	)
op	115:72	0:0	8	|
water	116:63	0:0	8	(
water	116:64	0:0	8	c
op	116:66	0:0	8	<<
water	116:69	0:0	8	4
water	116:70	0:0	8	)
op	116:72	0:0	8	|
water	117:63	0:0	8	(
water	117:64	0:0	8	d
op	117:66	0:0	8	<<
water	117:69	0:0	8	6
water	117:70	0:0	8	)
water	117:71	0:0	8	;
if	118:16	119:36	8	(i + 4 - inc >= dstW)
cond	118:20	118:35	9	i + 4 - inc >= dstW
water	118:20	0:0	10	i
op	118:22	0:0	10	+
water	118:24	0:0	10	4
op	118:26	0:0	10	-
water	118:28	0:0	10	inc
op	118:32	0:0	10	>=
water	118:35	0:0	10	dstW
stmts	119:20	119:36	9	
water	119:20	0:0	10	shift
op	119:26	0:0	10	=
water	119:28	0:0	10	maxShift
water	119:36	0:0	10	;
else	120:16	121:48	8
stmts	120:21	121:48	9	
if	120:21	121:48	10	(( filterPos [ i / 2 ] & 3 ) <= maxShift)
cond	120:25	120:51	11	( filterPos [ i / 2 ] & 3 ) <= maxShift
water	120:25	0:0	12	(
water	120:26	0:0	12	filterPos
op	120:35	0:0	12	[
water	120:36	0:0	12	i
op	120:38	0:0	12	/
water	120:40	0:0	12	2
op	120:41	0:0	12	]
op	120:43	0:0	12	&
water	120:45	0:0	12	3
water	120:46	0:0	12	)
op	120:48	0:0	12	<=
water	120:51	0:0	12	maxShift
stmts	121:20	121:48	11	
water	121:20	0:0	12	shift
op	121:26	0:0	12	=
water	121:28	0:0	12	filterPos
op	121:37	0:0	12	[
water	121:38	0:0	12	i
op	121:40	0:0	12	/
water	121:42	0:0	12	2
op	121:43	0:0	12	]
op	121:45	0:0	12	&
water	121:47	0:0	12	3
water	121:48	0:0	12	;
if	122:16	126:16	8	(shift && i >= shift)
cond	122:20	122:34	9	shift && i >= shift
water	122:20	0:0	10	shift
op	122:26	0:0	10	&&
water	122:29	0:0	10	i
op	122:31	0:0	10	>=
water	122:34	0:0	10	shift
stmts	122:41	126:16	9	
water	122:41	0:0	10	{
water	123:20	0:0	10	filterCode
op	123:30	0:0	10	[
water	123:31	0:0	10	fragmentPos
op	123:43	0:0	10	+
water	123:45	0:0	10	imm8OfPShufW1
op	123:58	0:0	10	]
op	123:60	0:0	10	+=
water	123:63	0:0	10	0
water	123:64	0:0	10	x55
op	123:68	0:0	10	*
water	123:70	0:0	10	shift
water	123:75	0:0	10	;
water	124:20	0:0	10	filterCode
op	124:30	0:0	10	[
water	124:31	0:0	10	fragmentPos
op	124:43	0:0	10	+
water	124:45	0:0	10	imm8OfPShufW2
op	124:58	0:0	10	]
op	124:60	0:0	10	+=
water	124:63	0:0	10	0
water	124:64	0:0	10	x55
op	124:68	0:0	10	*
water	124:70	0:0	10	shift
water	124:75	0:0	10	;
water	125:20	0:0	10	filterPos
op	125:29	0:0	10	[
water	125:30	0:0	10	i
op	125:32	0:0	10	/
water	125:34	0:0	10	2
op	125:35	0:0	10	]
op	125:60	0:0	10	-=
water	125:63	0:0	10	shift
water	125:68	0:0	10	;
water	126:16	0:0	10	}
water	127:12	0:0	8	}
water	128:12	0:0	6	fragmentPos
op	128:24	0:0	6	+=
water	128:27	0:0	6	fragmentLength
water	128:41	0:0	6	;
if	129:12	130:45	6	(filterCode)
cond	129:16	129:16	7	filterCode
water	129:16	0:0	8	filterCode
stmts	130:16	130:45	7	
water	130:16	0:0	8	filterCode
op	130:26	0:0	8	[
water	130:27	0:0	8	fragmentPos
op	130:38	0:0	8	]
op	130:40	0:0	8	=
water	130:42	0:0	8	RET
water	130:45	0:0	8	;
water	131:8	0:0	6	}
water	132:8	0:0	4	xpos
op	132:13	0:0	4	+=
water	132:16	0:0	4	xInc
water	132:20	0:0	4	;
water	133:4	0:0	4	}
if	134:4	135:52	2	(filterCode)
cond	134:8	134:8	3	filterCode
water	134:8	0:0	4	filterCode
stmts	135:8	135:52	3	
water	135:8	0:0	4	filterPos
op	135:17	0:0	4	[
water	135:18	0:0	4	(
water	135:19	0:0	4	(
water	135:20	0:0	4	i
op	135:22	0:0	4	/
water	135:24	0:0	4	2
water	135:25	0:0	4	)
op	135:27	0:0	4	+
water	135:29	0:0	4	1
water	135:30	0:0	4	)
op	135:32	0:0	4	&
water	135:34	0:0	4	(
water	135:35	0:0	4	~1
water	135:37	0:0	4	)
op	135:38	0:0	4	]
op	135:40	0:0	4	=
water	135:42	0:0	4	xpos
op	135:47	0:0	4	>>
water	135:50	0:0	4	16
water	135:52	0:0	4	;
return	136:4	136:26	2	fragmentPos+1
water	136:11	0:0	3	fragmentPos
op	136:23	0:0	3	+
water	136:25	0:0	3	1
