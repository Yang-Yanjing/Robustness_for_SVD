func	1:0	98:0	0	static int	write_manifest
params	1:25	0:0	1	
param	1:26	1:44	2	AVFormatContext *	s
param	1:46	1:55	2	int	final
stmnts	0:0	97:51	1	
decl	3:4	3:33	2	DASHContext	*c
op	3:19	0:0	2	=
water	3:21	0:0	2	s
op	3:22	0:0	2	->
water	3:24	0:0	2	priv_data
decl	4:4	4:20	2	AVIOContext	*out
decl	5:4	5:28	2	char	temp_filename[1024]
decl	6:4	6:14	2	int	ret
water	6:11	0:0	2	,
decl	6:4	6:14	2	int	i
decl	7:4	7:73	2	AVDictionaryEntry	*title
op	7:29	0:0	2	=
call	7:31	7:72	3	av_dict_get
arg	7:43	7:54	4	s->metadata
water	7:43	0:0	5	s
op	7:44	0:0	5	->
water	7:46	0:0	5	metadata
arg	7:56	7:63	4	"title"
water	7:56	0:0	5	"title"
arg	7:65	7:69	4	NULL
water	7:65	0:0	5	NULL
arg	7:71	7:72	4	0
water	7:71	0:0	5	0
call	8:4	8:72	2	snprintf
arg	8:13	8:26	3	temp_filename
water	8:13	0:0	4	temp_filename
arg	8:28	8:49	3	sizeof(temp_filename)
op	8:28	0:0	4	sizeof
water	8:34	0:0	4	(
water	8:35	0:0	4	temp_filename
water	8:48	0:0	4	)
arg	8:51	8:59	3	"%s.tmp"
water	8:51	0:0	4	"%s.tmp"
arg	8:61	8:72	3	s->filename
water	8:61	0:0	4	s
op	8:62	0:0	4	->
water	8:64	0:0	4	filename
water	8:73	0:0	2	;
water	9:4	0:0	2	ret
op	9:8	0:0	2	=
call	9:10	9:87	2	avio_open2
arg	9:21	9:25	3	&out
op	9:21	0:0	4	&
water	9:22	0:0	4	out
arg	9:27	9:40	3	temp_filename
water	9:27	0:0	4	temp_filename
arg	9:42	9:57	3	AVIO_FLAG_WRITE
water	9:42	0:0	4	AVIO_FLAG_WRITE
arg	9:59	9:81	3	&s->interrupt_callback
op	9:59	0:0	4	&
water	9:60	0:0	4	s
op	9:61	0:0	4	->
water	9:63	0:0	4	interrupt_callback
arg	9:83	9:87	3	NULL
water	9:83	0:0	4	NULL
water	9:88	0:0	2	;
if	10:4	13:4	2	(ret < 0)
cond	10:8	10:14	3	ret < 0
water	10:8	0:0	4	ret
op	10:12	0:0	4	<
water	10:14	0:0	4	0
stmts	10:17	13:4	3	
water	10:17	0:0	4	{
call	11:8	11:80	4	av_log
arg	11:15	11:16	5	s
water	11:15	0:0	6	s
arg	11:18	11:30	5	AV_LOG_ERROR
water	11:18	0:0	6	AV_LOG_ERROR
arg	11:32	11:65	5	"Unable to open %s for writing\n"
water	11:32	0:0	6	"Unable to open %s for writing\n"
arg	11:67	11:80	5	temp_filename
water	11:67	0:0	6	temp_filename
water	11:81	0:0	4	;
return	12:8	12:18	4	ret
water	12:15	0:0	5	ret
water	13:4	0:0	4	}
call	14:4	14:67	2	avio_printf
arg	14:16	14:19	3	out
water	14:16	0:0	4	out
arg	14:21	14:67	3	"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
water	14:21	0:0	4	"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
water	14:68	0:0	2	;
call	15:4	20:63	2	avio_printf
arg	15:16	15:19	3	out
water	15:16	0:0	4	out
arg	15:21	20:33	3	"<MPD xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n""\txmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n""\txmlns:xlink=\"http://www.w3.org/1999/xlink\"\n""\txsi:schemaLocation=\"urn:mpeg:DASH:schema:MPD:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n""\tprofiles=\"urn:mpeg:dash:profile:isoff-live:2011\"\n""\ttype=\"%s\"\n"
water	15:21	0:0	4	"<MPD xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
water	16:16	0:0	4	"\txmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n"
water	17:16	0:0	4	"\txmlns:xlink=\"http://www.w3.org/1999/xlink\"\n"
water	18:16	0:0	4	"\txsi:schemaLocation=\"urn:mpeg:DASH:schema:MPD:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n"
water	19:16	0:0	4	"\tprofiles=\"urn:mpeg:dash:profile:isoff-live:2011\"\n"
water	20:16	0:0	4	"\ttype=\"%s\"\n"
arg	20:35	20:63	3	final?"static":"dynamic"
water	20:35	0:0	4	final
water	20:41	0:0	4	?
water	20:43	0:0	4	"static"
water	20:52	0:0	4	:
water	20:54	0:0	4	"dynamic"
water	20:64	0:0	2	;
if	21:4	25:4	2	(final)
cond	21:8	21:8	3	final
water	21:8	0:0	4	final
stmts	21:15	25:4	3	
water	21:15	0:0	4	{
call	22:8	22:57	4	avio_printf
arg	22:20	22:23	5	out
water	22:20	0:0	6	out
arg	22:25	22:57	5	"\tmediaPresentationDuration=\""
water	22:25	0:0	6	"\tmediaPresentationDuration=\""
water	22:58	0:0	4	;
call	23:8	23:41	4	write_time
arg	23:19	23:22	5	out
water	23:19	0:0	6	out
arg	23:24	23:41	5	c->total_duration
water	23:24	0:0	6	c
op	23:25	0:0	6	->
water	23:27	0:0	6	total_duration
water	23:42	0:0	4	;
call	24:8	24:31	4	avio_printf
arg	24:20	24:23	5	out
water	24:20	0:0	6	out
arg	24:25	24:31	5	"\"\n"
water	24:25	0:0	6	"\"\n"
water	24:32	0:0	4	;
water	25:4	0:0	4	}
else	25:6	45:4	2
stmts	25:11	45:4	3	
water	25:11	0:0	4	{
decl	26:8	26:63	4	int64_t	update_period
op	26:30	0:0	4	=
water	26:32	0:0	4	c
op	26:33	0:0	4	->
water	26:35	0:0	4	last_duration
op	26:49	0:0	4	/
water	26:51	0:0	4	AV_TIME_BASE
decl	27:8	27:25	4	char	now_str[100]
if	28:8	29:31	4	(c -> use_template && ! c -> use_timeline)
cond	28:12	28:35	5	c -> use_template && ! c -> use_timeline
water	28:12	0:0	6	c
op	28:13	0:0	6	->
water	28:15	0:0	6	use_template
op	28:28	0:0	6	&&
op	28:31	0:0	6	!
water	28:32	0:0	6	c
op	28:33	0:0	6	->
water	28:35	0:0	6	use_timeline
stmts	29:12	29:31	5	
water	29:12	0:0	6	update_period
op	29:26	0:0	6	=
water	29:28	0:0	6	500
water	29:31	0:0	6	;
call	30:8	30:82	4	avio_printf
arg	30:20	30:23	5	out
water	30:20	0:0	6	out
arg	30:25	30:67	5	"\tminimumUpdatePeriod=\"PT%"PRId64"S\"\n"
water	30:25	0:0	6	"\tminimumUpdatePeriod=\"PT%"
water	30:54	0:0	6	PRId64
water	30:60	0:0	6	"S\"\n"
arg	30:69	30:82	5	update_period
water	30:69	0:0	6	update_period
water	30:83	0:0	4	;
call	31:8	31:107	4	avio_printf
arg	31:20	31:23	5	out
water	31:20	0:0	6	out
arg	31:25	31:74	5	"\tsuggestedPresentationDelay=\"PT%"PRId64"S\"\n"
water	31:25	0:0	6	"\tsuggestedPresentationDelay=\"PT%"
water	31:61	0:0	6	PRId64
water	31:67	0:0	6	"S\"\n"
arg	31:76	31:107	5	c->last_duration/AV_TIME_BASE
water	31:76	0:0	6	c
op	31:77	0:0	6	->
water	31:79	0:0	6	last_duration
op	31:93	0:0	6	/
water	31:95	0:0	6	AV_TIME_BASE
water	31:108	0:0	4	;
if	32:8	34:8	4	(! c -> availability_start_time [ 0 ] && s -> nb_streams > 0 && c -> streams [ 0 ] . nb_segments > 0)
cond	32:12	32:95	5	! c -> availability_start_time [ 0 ] && s -> nb_streams > 0 && c -> streams [ 0 ] . nb_segments > 0
op	32:12	0:0	6	!
water	32:13	0:0	6	c
op	32:14	0:0	6	->
water	32:16	0:0	6	availability_start_time
op	32:39	0:0	6	[
water	32:40	0:0	6	0
op	32:41	0:0	6	]
op	32:43	0:0	6	&&
water	32:46	0:0	6	s
op	32:47	0:0	6	->
water	32:49	0:0	6	nb_streams
op	32:60	0:0	6	>
water	32:62	0:0	6	0
op	32:64	0:0	6	&&
water	32:67	0:0	6	c
op	32:68	0:0	6	->
water	32:70	0:0	6	streams
op	32:77	0:0	6	[
water	32:78	0:0	6	0
op	32:79	0:0	6	]
op	32:80	0:0	6	.
water	32:81	0:0	6	nb_segments
op	32:93	0:0	6	>
water	32:95	0:0	6	0
stmts	32:98	34:8	5	
water	32:98	0:0	6	{
call	33:12	33:90	6	format_date_now
arg	33:28	33:54	7	c->availability_start_time
water	33:28	0:0	8	c
op	33:29	0:0	8	->
water	33:31	0:0	8	availability_start_time
arg	33:56	33:90	7	sizeof(c->availability_start_time)
op	33:56	0:0	8	sizeof
water	33:62	0:0	8	(
water	33:63	0:0	8	c
op	33:64	0:0	8	->
water	33:66	0:0	8	availability_start_time
water	33:89	0:0	8	)
water	33:91	0:0	6	;
water	34:8	0:0	6	}
if	35:8	36:92	4	(c -> availability_start_time [ 0 ])
cond	35:12	35:40	5	c -> availability_start_time [ 0 ]
water	35:12	0:0	6	c
op	35:13	0:0	6	->
water	35:15	0:0	6	availability_start_time
op	35:38	0:0	6	[
water	35:39	0:0	6	0
op	35:40	0:0	6	]
stmts	36:12	36:92	5	
call	36:12	36:91	6	avio_printf
arg	36:24	36:27	7	out
water	36:24	0:0	8	out
arg	36:29	36:63	7	"\tavailabilityStartTime=\"%s\"\n"
water	36:29	0:0	8	"\tavailabilityStartTime=\"%s\"\n"
arg	36:65	36:91	7	c->availability_start_time
water	36:65	0:0	8	c
op	36:66	0:0	8	->
water	36:68	0:0	8	availability_start_time
water	36:92	0:0	6	;
call	37:8	37:48	4	format_date_now
arg	37:24	37:31	5	now_str
water	37:24	0:0	6	now_str
arg	37:33	37:48	5	sizeof(now_str)
op	37:33	0:0	6	sizeof
water	37:39	0:0	6	(
water	37:40	0:0	6	now_str
water	37:47	0:0	6	)
water	37:49	0:0	4	;
if	38:8	39:63	4	(now_str [ 0 ])
cond	38:12	38:21	5	now_str [ 0 ]
water	38:12	0:0	6	now_str
op	38:19	0:0	6	[
water	38:20	0:0	6	0
op	38:21	0:0	6	]
stmts	39:12	39:63	5	
call	39:12	39:62	6	avio_printf
arg	39:24	39:27	7	out
water	39:24	0:0	8	out
arg	39:29	39:53	7	"\tpublishTime=\"%s\"\n"
water	39:29	0:0	8	"\tpublishTime=\"%s\"\n"
arg	39:55	39:62	7	now_str
water	39:55	0:0	8	now_str
water	39:63	0:0	6	;
if	40:8	44:8	4	(c -> window_size && c -> use_template)
cond	40:12	40:33	5	c -> window_size && c -> use_template
water	40:12	0:0	6	c
op	40:13	0:0	6	->
water	40:15	0:0	6	window_size
op	40:27	0:0	6	&&
water	40:30	0:0	6	c
op	40:31	0:0	6	->
water	40:33	0:0	6	use_template
stmts	40:47	44:8	5	
water	40:47	0:0	6	{
call	41:12	41:56	6	avio_printf
arg	41:24	41:27	7	out
water	41:24	0:0	8	out
arg	41:29	41:56	7	"\ttimeShiftBufferDepth=\""
water	41:29	0:0	8	"\ttimeShiftBufferDepth=\""
water	41:57	0:0	6	;
call	42:12	42:61	6	write_time
arg	42:23	42:26	7	out
water	42:23	0:0	8	out
arg	42:28	42:61	7	c->last_duration*c->window_size
water	42:28	0:0	8	c
op	42:29	0:0	8	->
water	42:31	0:0	8	last_duration
op	42:45	0:0	8	*
water	42:47	0:0	8	c
op	42:48	0:0	8	->
water	42:50	0:0	8	window_size
water	42:62	0:0	6	;
call	43:12	43:35	6	avio_printf
arg	43:24	43:27	7	out
water	43:24	0:0	8	out
arg	43:29	43:35	7	"\"\n"
water	43:29	0:0	8	"\"\n"
water	43:36	0:0	6	;
water	44:8	0:0	6	}
water	45:4	0:0	4	}
call	46:4	46:41	2	avio_printf
arg	46:16	46:19	3	out
water	46:16	0:0	4	out
arg	46:21	46:41	3	"\tminBufferTime=\""
water	46:21	0:0	4	"\tminBufferTime=\""
water	46:42	0:0	2	;
call	47:4	47:36	2	write_time
arg	47:15	47:18	3	out
water	47:15	0:0	4	out
arg	47:20	47:36	3	c->last_duration
water	47:20	0:0	4	c
op	47:21	0:0	4	->
water	47:23	0:0	4	last_duration
water	47:37	0:0	2	;
call	48:4	48:28	2	avio_printf
arg	48:16	48:19	3	out
water	48:16	0:0	4	out
arg	48:21	48:28	3	"\">\n"
water	48:21	0:0	4	"\">\n"
water	48:29	0:0	2	;
call	49:4	49:47	2	avio_printf
arg	49:16	49:19	3	out
water	49:16	0:0	4	out
arg	49:21	49:47	3	"\t<ProgramInformation>\n"
water	49:21	0:0	4	"\t<ProgramInformation>\n"
water	49:48	0:0	2	;
if	50:4	54:4	2	(title)
cond	50:8	50:8	3	title
water	50:8	0:0	4	title
stmts	50:15	54:4	3	
water	50:15	0:0	4	{
decl	51:8	51:47	4	char	*escaped
op	51:22	0:0	4	=
call	51:24	51:46	5	xmlescape
arg	51:34	51:46	6	title->value
water	51:34	0:0	7	title
op	51:39	0:0	7	->
water	51:41	0:0	7	value
call	52:8	52:59	4	avio_printf
arg	52:20	52:23	5	out
water	52:20	0:0	6	out
arg	52:25	52:50	5	"\t\t<Title>%s</Title>\n"
water	52:25	0:0	6	"\t\t<Title>%s</Title>\n"
arg	52:52	52:59	5	escaped
water	52:52	0:0	6	escaped
water	52:60	0:0	4	;
call	53:8	53:23	4	av_free
arg	53:16	53:23	5	escaped
water	53:16	0:0	6	escaped
water	53:24	0:0	4	;
water	54:4	0:0	4	}
call	55:4	55:48	2	avio_printf
arg	55:16	55:19	3	out
water	55:16	0:0	4	out
arg	55:21	55:48	3	"\t</ProgramInformation>\n"
water	55:21	0:0	4	"\t</ProgramInformation>\n"
water	55:49	0:0	2	;
if	56:4	63:4	2	(c -> window_size && s -> nb_streams > 0 && c -> streams [ 0 ] . nb_segments > 0 && ! c -> use_template)
cond	56:8	56:84	3	c -> window_size && s -> nb_streams > 0 && c -> streams [ 0 ] . nb_segments > 0 && ! c -> use_template
water	56:8	0:0	4	c
op	56:9	0:0	4	->
water	56:11	0:0	4	window_size
op	56:23	0:0	4	&&
water	56:26	0:0	4	s
op	56:27	0:0	4	->
water	56:29	0:0	4	nb_streams
op	56:40	0:0	4	>
water	56:42	0:0	4	0
op	56:44	0:0	4	&&
water	56:47	0:0	4	c
op	56:48	0:0	4	->
water	56:50	0:0	4	streams
op	56:57	0:0	4	[
water	56:58	0:0	4	0
op	56:59	0:0	4	]
op	56:60	0:0	4	.
water	56:61	0:0	4	nb_segments
op	56:73	0:0	4	>
water	56:75	0:0	4	0
op	56:77	0:0	4	&&
op	56:80	0:0	4	!
water	56:81	0:0	4	c
op	56:82	0:0	4	->
water	56:84	0:0	4	use_template
stmts	56:98	63:4	3	
water	56:98	0:0	4	{
decl	57:8	57:41	4	OutputStream	*os
op	57:25	0:0	4	=
op	57:27	0:0	4	&
water	57:28	0:0	4	c
op	57:29	0:0	4	->
water	57:31	0:0	4	streams
op	57:38	0:0	4	[
water	57:39	0:0	4	0
op	57:40	0:0	4	]
decl	58:8	58:68	4	int	start_index
op	58:24	0:0	4	=
call	58:26	58:67	5	FFMAX
arg	58:32	58:64	6	os->nb_segments-c->window_size
water	58:32	0:0	7	os
op	58:34	0:0	7	->
water	58:36	0:0	7	nb_segments
op	58:48	0:0	7	-
water	58:50	0:0	7	c
op	58:51	0:0	7	->
water	58:53	0:0	7	window_size
arg	58:66	58:67	6	0
water	58:66	0:0	7	0
decl	59:8	59:116	4	int64_t	start_time
op	59:27	0:0	4	=
call	59:29	59:115	5	av_rescale_q
arg	59:42	59:73	6	os->segments[start_index]->time
water	59:42	0:0	7	os
op	59:44	0:0	7	->
water	59:46	0:0	7	segments
op	59:54	0:0	7	[
water	59:55	0:0	7	start_index
op	59:66	0:0	7	]
op	59:67	0:0	7	->
water	59:69	0:0	7	time
arg	59:75	59:99	6	s->streams[0]->time_base
water	59:75	0:0	7	s
op	59:76	0:0	7	->
water	59:78	0:0	7	streams
op	59:85	0:0	7	[
water	59:86	0:0	7	0
op	59:87	0:0	7	]
op	59:88	0:0	7	->
water	59:90	0:0	7	time_base
arg	59:101	59:115	6	AV_TIME_BASE_Q
water	59:101	0:0	7	AV_TIME_BASE_Q
call	60:8	60:45	4	avio_printf
arg	60:20	60:23	5	out
water	60:20	0:0	6	out
arg	60:25	60:45	5	"\t<Period start=\""
water	60:25	0:0	6	"\t<Period start=\""
water	60:46	0:0	4	;
call	61:8	61:34	4	write_time
arg	61:19	61:22	5	out
water	61:19	0:0	6	out
arg	61:24	61:34	5	start_time
water	61:24	0:0	6	start_time
water	61:35	0:0	4	;
call	62:8	62:32	4	avio_printf
arg	62:20	62:23	5	out
water	62:20	0:0	6	out
arg	62:25	62:32	5	"\">\n"
water	62:25	0:0	6	"\">\n"
water	62:33	0:0	4	;
water	63:4	0:0	4	}
else	63:6	65:4	2
stmts	63:11	65:4	3	
water	63:11	0:0	4	{
call	64:8	64:56	4	avio_printf
arg	64:20	64:23	5	out
water	64:20	0:0	6	out
arg	64:25	64:56	5	"\t<Period start=\"PT0.0S\">\n"
water	64:25	0:0	6	"\t<Period start=\"PT0.0S\">\n"
water	64:57	0:0	4	;
water	65:4	0:0	4	}
if	66:4	78:4	2	(c -> has_video)
cond	66:8	66:11	3	c -> has_video
water	66:8	0:0	4	c
op	66:9	0:0	4	->
water	66:11	0:0	4	has_video
stmts	66:22	78:4	3	
water	66:22	0:0	4	{
call	67:8	67:124	4	avio_printf
arg	67:20	67:23	5	out
water	67:20	0:0	6	out
arg	67:25	67:124	5	"\t\t<AdaptationSet contentType=\"video\" segmentAlignment=\"true\" bitstreamSwitching=\"true\">\n"
water	67:25	0:0	6	"\t\t<AdaptationSet contentType=\"video\" segmentAlignment=\"true\" bitstreamSwitching=\"true\">\n"
water	67:125	0:0	4	;
for	68:8	76:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	68:13	68:18	5	i = 0 ;
water	68:13	0:0	6	i
op	68:15	0:0	6	=
water	68:17	0:0	6	0
water	68:18	0:0	6	;
cond	68:20	68:27	5	i < s -> nb_streams
water	68:20	0:0	6	i
op	68:22	0:0	6	<
water	68:24	0:0	6	s
op	68:25	0:0	6	->
water	68:27	0:0	6	nb_streams
forexpr	68:39	68:40	5	i ++
water	68:39	0:0	6	i
op	68:40	0:0	6	++
stmts	68:44	76:8	5	
water	68:44	0:0	6	{
decl	69:12	69:40	6	AVStream	*st
op	69:25	0:0	6	=
water	69:27	0:0	6	s
op	69:28	0:0	6	->
water	69:30	0:0	6	streams
op	69:37	0:0	6	[
water	69:38	0:0	6	i
op	69:39	0:0	6	]
decl	70:12	70:45	6	OutputStream	*os
op	70:29	0:0	6	=
op	70:31	0:0	6	&
water	70:32	0:0	6	c
op	70:33	0:0	6	->
water	70:35	0:0	6	streams
op	70:42	0:0	6	[
water	70:43	0:0	6	i
op	70:44	0:0	6	]
if	71:12	72:24	6	(st -> codec -> codec_type != AVMEDIA_TYPE_VIDEO)
cond	71:16	71:41	7	st -> codec -> codec_type != AVMEDIA_TYPE_VIDEO
water	71:16	0:0	8	st
op	71:18	0:0	8	->
water	71:20	0:0	8	codec
op	71:25	0:0	8	->
water	71:27	0:0	8	codec_type
op	71:38	0:0	8	!=
water	71:41	0:0	8	AVMEDIA_TYPE_VIDEO
stmts	72:16	72:24	7	
continue	72:16	72:24	8	
call	73:12	73:205	6	avio_printf
arg	73:24	73:27	7	out
water	73:24	0:0	8	out
arg	73:29	73:131	7	"\t\t\t<Representation id=\"%d\" mimeType=\"video/mp4\" codecs=\"%s\"%s width=\"%d\" height=\"%d\">\n"
water	73:29	0:0	8	"\t\t\t<Representation id=\"%d\" mimeType=\"video/mp4\" codecs=\"%s\"%s width=\"%d\" height=\"%d\">\n"
arg	73:133	73:134	7	i
water	73:133	0:0	8	i
arg	73:136	73:149	7	os->codec_str
water	73:136	0:0	8	os
op	73:138	0:0	8	->
water	73:140	0:0	8	codec_str
arg	73:151	73:168	7	os->bandwidth_str
water	73:151	0:0	8	os
op	73:153	0:0	8	->
water	73:155	0:0	8	bandwidth_str
arg	73:170	73:186	7	st->codec->width
water	73:170	0:0	8	st
op	73:172	0:0	8	->
water	73:174	0:0	8	codec
op	73:179	0:0	8	->
water	73:181	0:0	8	width
arg	73:188	73:205	7	st->codec->height
water	73:188	0:0	8	st
op	73:190	0:0	8	->
water	73:192	0:0	8	codec
op	73:197	0:0	8	->
water	73:199	0:0	8	height
water	73:206	0:0	6	;
call	74:12	74:54	6	output_segment_list
arg	74:32	74:46	7	&c->streams[i]
op	74:32	0:0	8	&
water	74:33	0:0	8	c
op	74:34	0:0	8	->
water	74:36	0:0	8	streams
op	74:43	0:0	8	[
water	74:44	0:0	8	i
op	74:45	0:0	8	]
arg	74:48	74:51	7	out
water	74:48	0:0	8	out
arg	74:53	74:54	7	c
water	74:53	0:0	8	c
water	74:55	0:0	6	;
call	75:12	75:56	6	avio_printf
arg	75:24	75:27	7	out
water	75:24	0:0	8	out
arg	75:29	75:56	7	"\t\t\t</Representation>\n"
water	75:29	0:0	8	"\t\t\t</Representation>\n"
water	75:57	0:0	6	;
water	76:8	0:0	6	}
call	77:8	77:49	4	avio_printf
arg	77:20	77:23	5	out
water	77:20	0:0	6	out
arg	77:25	77:49	5	"\t\t</AdaptationSet>\n"
water	77:25	0:0	6	"\t\t</AdaptationSet>\n"
water	77:50	0:0	4	;
water	78:4	0:0	4	}
if	79:4	92:4	2	(c -> has_audio)
cond	79:8	79:11	3	c -> has_audio
water	79:8	0:0	4	c
op	79:9	0:0	4	->
water	79:11	0:0	4	has_audio
stmts	79:22	92:4	3	
water	79:22	0:0	4	{
call	80:8	80:124	4	avio_printf
arg	80:20	80:23	5	out
water	80:20	0:0	6	out
arg	80:25	80:124	5	"\t\t<AdaptationSet contentType=\"audio\" segmentAlignment=\"true\" bitstreamSwitching=\"true\">\n"
water	80:25	0:0	6	"\t\t<AdaptationSet contentType=\"audio\" segmentAlignment=\"true\" bitstreamSwitching=\"true\">\n"
water	80:125	0:0	4	;
for	81:8	90:8	4	(i = 0 ;i < s -> nb_streams;i ++)
forinit	81:13	81:18	5	i = 0 ;
water	81:13	0:0	6	i
op	81:15	0:0	6	=
water	81:17	0:0	6	0
water	81:18	0:0	6	;
cond	81:20	81:27	5	i < s -> nb_streams
water	81:20	0:0	6	i
op	81:22	0:0	6	<
water	81:24	0:0	6	s
op	81:25	0:0	6	->
water	81:27	0:0	6	nb_streams
forexpr	81:39	81:40	5	i ++
water	81:39	0:0	6	i
op	81:40	0:0	6	++
stmts	81:44	90:8	5	
water	81:44	0:0	6	{
decl	82:12	82:40	6	AVStream	*st
op	82:25	0:0	6	=
water	82:27	0:0	6	s
op	82:28	0:0	6	->
water	82:30	0:0	6	streams
op	82:37	0:0	6	[
water	82:38	0:0	6	i
op	82:39	0:0	6	]
decl	83:12	83:45	6	OutputStream	*os
op	83:29	0:0	6	=
op	83:31	0:0	6	&
water	83:32	0:0	6	c
op	83:33	0:0	6	->
water	83:35	0:0	6	streams
op	83:42	0:0	6	[
water	83:43	0:0	6	i
op	83:44	0:0	6	]
if	84:12	85:24	6	(st -> codec -> codec_type != AVMEDIA_TYPE_AUDIO)
cond	84:16	84:41	7	st -> codec -> codec_type != AVMEDIA_TYPE_AUDIO
water	84:16	0:0	8	st
op	84:18	0:0	8	->
water	84:20	0:0	8	codec
op	84:25	0:0	8	->
water	84:27	0:0	8	codec_type
op	84:38	0:0	8	!=
water	84:41	0:0	8	AVMEDIA_TYPE_AUDIO
stmts	85:16	85:24	7	
continue	85:16	85:24	8	
call	86:12	86:190	6	avio_printf
arg	86:24	86:27	7	out
water	86:24	0:0	8	out
arg	86:29	86:129	7	"\t\t\t<Representation id=\"%d\" mimeType=\"audio/mp4\" codecs=\"%s\"%s audioSamplingRate=\"%d\">\n"
water	86:29	0:0	8	"\t\t\t<Representation id=\"%d\" mimeType=\"audio/mp4\" codecs=\"%s\"%s audioSamplingRate=\"%d\">\n"
arg	86:131	86:132	7	i
water	86:131	0:0	8	i
arg	86:134	86:147	7	os->codec_str
water	86:134	0:0	8	os
op	86:136	0:0	8	->
water	86:138	0:0	8	codec_str
arg	86:149	86:166	7	os->bandwidth_str
water	86:149	0:0	8	os
op	86:151	0:0	8	->
water	86:153	0:0	8	bandwidth_str
arg	86:168	86:190	7	st->codec->sample_rate
water	86:168	0:0	8	st
op	86:170	0:0	8	->
water	86:172	0:0	8	codec
op	86:177	0:0	8	->
water	86:179	0:0	8	sample_rate
water	86:191	0:0	6	;
call	87:12	87:175	6	avio_printf
arg	87:24	87:27	7	out
water	87:24	0:0	8	out
arg	87:29	87:154	7	"\t\t\t\t<AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"%d\" />\n"
water	87:29	0:0	8	"\t\t\t\t<AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"%d\" />\n"
arg	87:156	87:175	7	st->codec->channels
water	87:156	0:0	8	st
op	87:158	0:0	8	->
water	87:160	0:0	8	codec
op	87:165	0:0	8	->
water	87:167	0:0	8	channels
water	87:176	0:0	6	;
call	88:12	88:54	6	output_segment_list
arg	88:32	88:46	7	&c->streams[i]
op	88:32	0:0	8	&
water	88:33	0:0	8	c
op	88:34	0:0	8	->
water	88:36	0:0	8	streams
op	88:43	0:0	8	[
water	88:44	0:0	8	i
op	88:45	0:0	8	]
arg	88:48	88:51	7	out
water	88:48	0:0	8	out
arg	88:53	88:54	7	c
water	88:53	0:0	8	c
water	88:55	0:0	6	;
call	89:12	89:56	6	avio_printf
arg	89:24	89:27	7	out
water	89:24	0:0	8	out
arg	89:29	89:56	7	"\t\t\t</Representation>\n"
water	89:29	0:0	8	"\t\t\t</Representation>\n"
water	89:57	0:0	6	;
water	90:8	0:0	6	}
call	91:8	91:49	4	avio_printf
arg	91:20	91:23	5	out
water	91:20	0:0	6	out
arg	91:25	91:49	5	"\t\t</AdaptationSet>\n"
water	91:25	0:0	6	"\t\t</AdaptationSet>\n"
water	91:50	0:0	4	;
water	92:4	0:0	4	}
call	93:4	93:36	2	avio_printf
arg	93:16	93:19	3	out
water	93:16	0:0	4	out
arg	93:21	93:36	3	"\t</Period>\n"
water	93:21	0:0	4	"\t</Period>\n"
water	93:37	0:0	2	;
call	94:4	94:31	2	avio_printf
arg	94:16	94:19	3	out
water	94:16	0:0	4	out
arg	94:21	94:31	3	"</MPD>\n"
water	94:21	0:0	4	"</MPD>\n"
water	94:32	0:0	2	;
call	95:4	95:18	2	avio_flush
arg	95:15	95:18	3	out
water	95:15	0:0	4	out
water	95:19	0:0	2	;
call	96:4	96:18	2	avio_close
arg	96:15	96:18	3	out
water	96:15	0:0	4	out
water	96:19	0:0	2	;
return	97:4	97:51	2	ff_rename(temp_filename,s->filename,s)
call	97:11	97:50	3	ff_rename
arg	97:21	97:34	4	temp_filename
water	97:21	0:0	5	temp_filename
arg	97:36	97:47	4	s->filename
water	97:36	0:0	5	s
op	97:37	0:0	5	->
water	97:39	0:0	5	filename
arg	97:49	97:50	4	s
water	97:49	0:0	5	s
