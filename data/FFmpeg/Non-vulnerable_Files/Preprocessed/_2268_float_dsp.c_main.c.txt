func	1:0	62:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	61:14	1	
decl	3:4	3:27	2	int	ret
op	3:12	0:0	2	=
water	3:14	0:0	2	0
water	3:15	0:0	2	,
decl	3:4	3:27	2	int	seeded
op	3:24	0:0	2	=
water	3:26	0:0	2	0
decl	4:4	4:17	2	uint32_t	seed
decl	5:4	5:32	2	AVFloatDSPContext	fdsp
water	5:26	0:0	2	,
decl	5:4	5:32	2	AVFloatDSPContext	cdsp
decl	6:4	6:13	2	AVLFG	lfg
call	7:4	7:40	2	LOCAL_ALIGNED
arg	7:18	7:20	3	32
water	7:18	0:0	4	32
arg	7:22	7:27	3	float
water	7:22	0:0	4	float
arg	7:29	7:33	3	src0
water	7:29	0:0	4	src0
arg	7:35	7:40	3	[LEN]
op	7:35	0:0	4	[
water	7:36	0:0	4	LEN
op	7:39	0:0	4	]
water	7:41	0:0	2	;
call	8:4	8:40	2	LOCAL_ALIGNED
arg	8:18	8:20	3	32
water	8:18	0:0	4	32
arg	8:22	8:27	3	float
water	8:22	0:0	4	float
arg	8:29	8:33	3	src1
water	8:29	0:0	4	src1
arg	8:35	8:40	3	[LEN]
op	8:35	0:0	4	[
water	8:36	0:0	4	LEN
op	8:39	0:0	4	]
water	8:41	0:0	2	;
call	9:4	9:40	2	LOCAL_ALIGNED
arg	9:18	9:20	3	32
water	9:18	0:0	4	32
arg	9:22	9:27	3	float
water	9:22	0:0	4	float
arg	9:29	9:33	3	src2
water	9:29	0:0	4	src2
arg	9:35	9:40	3	[LEN]
op	9:35	0:0	4	[
water	9:36	0:0	4	LEN
op	9:39	0:0	4	]
water	9:41	0:0	2	;
call	10:4	10:45	2	LOCAL_ALIGNED
arg	10:18	10:20	3	32
water	10:18	0:0	4	32
arg	10:22	10:28	3	double
water	10:22	0:0	4	double
arg	10:30	10:38	3	dbl_src0
water	10:30	0:0	4	dbl_src0
arg	10:40	10:45	3	[LEN]
op	10:40	0:0	4	[
water	10:41	0:0	4	LEN
op	10:44	0:0	4	]
water	10:46	0:0	2	;
call	11:4	11:45	2	LOCAL_ALIGNED
arg	11:18	11:20	3	32
water	11:18	0:0	4	32
arg	11:22	11:28	3	double
water	11:22	0:0	4	double
arg	11:30	11:38	3	dbl_src1
water	11:30	0:0	4	dbl_src1
arg	11:40	11:45	3	[LEN]
op	11:40	0:0	4	[
water	11:41	0:0	4	LEN
op	11:44	0:0	4	]
water	11:46	0:0	2	;
for	12:4	30:4	2	(;;)
forinit	12:9	12:9	3	;
water	12:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	12:13	30:4	3	
water	12:13	0:0	4	{
decl	13:8	13:44	4	int	arg
op	13:16	0:0	4	=
call	13:18	13:43	5	getopt
arg	13:25	13:29	6	argc
water	13:25	0:0	7	argc
arg	13:31	13:35	6	argv
water	13:31	0:0	7	argv
arg	13:37	13:43	6	"s:c:"
water	13:37	0:0	7	"s:c:"
if	14:8	15:17	4	(arg == - 1)
cond	14:12	14:20	5	arg == - 1
water	14:12	0:0	6	arg
op	14:16	0:0	6	==
op	14:19	0:0	6	-
water	14:20	0:0	6	1
stmts	15:12	15:17	5	
break	15:12	15:17	6	
switch	16:8	29:8	4	(arg)
cond	16:16	16:16	5	arg
water	16:16	0:0	6	arg
stmts	16:21	29:8	5	
water	16:21	0:0	6	{
water	17:8	0:0	6	case
water	17:13	0:0	6	's'
water	17:16	0:0	6	:
water	18:12	0:0	6	seed
op	18:17	0:0	6	=
call	18:19	18:43	6	strtoul
arg	18:27	18:33	7	optarg
water	18:27	0:0	8	optarg
arg	18:35	18:39	7	NULL
water	18:35	0:0	8	NULL
arg	18:41	18:43	7	10
water	18:41	0:0	8	10
water	18:44	0:0	6	;
water	19:12	0:0	6	seeded
op	19:19	0:0	6	=
water	19:21	0:0	6	1
water	19:22	0:0	6	;
break	20:12	20:17	6	
water	21:8	0:0	6	case
water	21:13	0:0	6	'c'
water	21:16	0:0	6	:
water	22:8	0:0	6	{
decl	23:12	23:45	6	int	cpuflags
op	23:25	0:0	6	=
call	23:27	23:44	7	av_get_cpu_flags
if	24:12	25:24	6	(av_parse_cpu_caps (& cpuflags ,optarg ) < 0)
cond	24:16	24:55	7	av_parse_cpu_caps (& cpuflags ,optarg ) < 0
call	24:16	24:51	8	av_parse_cpu_caps
arg	24:34	24:43	9	&cpuflags
op	24:34	0:0	10	&
water	24:35	0:0	10	cpuflags
arg	24:45	24:51	9	optarg
water	24:45	0:0	10	optarg
op	24:53	0:0	8	<
water	24:55	0:0	8	0
stmts	25:16	25:24	7	
return	25:16	25:24	8	1
water	25:23	0:0	9	1
call	26:12	26:39	6	av_force_cpu_flags
arg	26:31	26:39	7	cpuflags
water	26:31	0:0	8	cpuflags
water	26:40	0:0	6	;
break	27:12	27:17	6	
water	28:8	0:0	6	}
water	29:8	0:0	6	}
water	30:4	0:0	4	}
if	31:4	32:35	2	(! seeded)
cond	31:8	31:9	3	! seeded
op	31:8	0:0	4	!
water	31:9	0:0	4	seeded
stmts	32:8	32:35	3	
water	32:8	0:0	4	seed
op	32:13	0:0	4	=
call	32:15	32:34	4	av_get_random_seed
water	32:35	0:0	4	;
call	33:4	33:94	2	av_log
arg	33:11	33:15	3	NULL
water	33:11	0:0	4	NULL
arg	33:17	33:28	3	AV_LOG_INFO
water	33:17	0:0	4	AV_LOG_INFO
arg	33:30	33:55	3	"float_dsp-test: %s %u\n"
water	33:30	0:0	4	"float_dsp-test: %s %u\n"
arg	33:57	33:88	3	seeded?"seed":"random seed"
water	33:57	0:0	4	seeded
water	33:64	0:0	4	?
water	33:66	0:0	4	"seed"
water	33:73	0:0	4	:
water	33:75	0:0	4	"random seed"
arg	33:90	33:94	3	seed
water	33:90	0:0	4	seed
water	33:95	0:0	2	;
call	34:4	34:26	2	av_lfg_init
arg	34:16	34:20	3	&lfg
op	34:16	0:0	4	&
water	34:17	0:0	4	lfg
arg	34:22	34:26	3	seed
water	34:22	0:0	4	seed
water	34:27	0:0	2	;
call	35:4	35:36	2	fill_float_array
arg	35:21	35:25	3	&lfg
op	35:21	0:0	4	&
water	35:22	0:0	4	lfg
arg	35:27	35:31	3	src0
water	35:27	0:0	4	src0
arg	35:33	35:36	3	LEN
water	35:33	0:0	4	LEN
water	35:37	0:0	2	;
call	36:4	36:36	2	fill_float_array
arg	36:21	36:25	3	&lfg
op	36:21	0:0	4	&
water	36:22	0:0	4	lfg
arg	36:27	36:31	3	src1
water	36:27	0:0	4	src1
arg	36:33	36:36	3	LEN
water	36:33	0:0	4	LEN
water	36:37	0:0	2	;
call	37:4	37:36	2	fill_float_array
arg	37:21	37:25	3	&lfg
op	37:21	0:0	4	&
water	37:22	0:0	4	lfg
arg	37:27	37:31	3	src2
water	37:27	0:0	4	src2
arg	37:33	37:36	3	LEN
water	37:33	0:0	4	LEN
water	37:37	0:0	2	;
call	38:4	38:41	2	fill_double_array
arg	38:22	38:26	3	&lfg
op	38:22	0:0	4	&
water	38:23	0:0	4	lfg
arg	38:28	38:36	3	dbl_src0
water	38:28	0:0	4	dbl_src0
arg	38:38	38:41	3	LEN
water	38:38	0:0	4	LEN
water	38:42	0:0	2	;
call	39:4	39:41	2	fill_double_array
arg	39:22	39:26	3	&lfg
op	39:22	0:0	4	&
water	39:23	0:0	4	lfg
arg	39:28	39:36	3	dbl_src1
water	39:28	0:0	4	dbl_src1
arg	39:38	39:41	3	LEN
water	39:38	0:0	4	LEN
water	39:42	0:0	2	;
call	40:4	40:34	2	avpriv_float_dsp_init
arg	40:26	40:31	3	&fdsp
op	40:26	0:0	4	&
water	40:27	0:0	4	fdsp
arg	40:33	40:34	3	1
water	40:33	0:0	4	1
water	40:35	0:0	2	;
call	41:4	41:24	2	av_force_cpu_flags
arg	41:23	41:24	3	0
water	41:23	0:0	4	0
water	41:25	0:0	2	;
call	42:4	42:34	2	avpriv_float_dsp_init
arg	42:26	42:31	3	&cdsp
op	42:26	0:0	4	&
water	42:27	0:0	4	cdsp
arg	42:33	42:34	3	1
water	42:33	0:0	4	1
water	42:35	0:0	2	;
if	43:4	44:21	2	(test_vector_fmul (& fdsp ,& cdsp ,src0 ,src1 ))
cond	43:8	43:49	3	test_vector_fmul (& fdsp ,& cdsp ,src0 ,src1 )
call	43:8	43:49	4	test_vector_fmul
arg	43:25	43:30	5	&fdsp
op	43:25	0:0	6	&
water	43:26	0:0	6	fdsp
arg	43:32	43:37	5	&cdsp
op	43:32	0:0	6	&
water	43:33	0:0	6	cdsp
arg	43:39	43:43	5	src0
water	43:39	0:0	6	src0
arg	43:45	43:49	5	src1
water	43:45	0:0	6	src1
stmts	44:8	44:21	3	
water	44:8	0:0	4	ret
op	44:12	0:0	4	-=
water	44:15	0:0	4	1
op	44:17	0:0	4	<<
water	44:20	0:0	4	0
water	44:21	0:0	4	;
if	45:4	46:21	2	(test_vector_fmac_scalar (& fdsp ,& cdsp ,src2 ,src0 ,src1 [ 0 ] ))
cond	45:8	45:65	3	test_vector_fmac_scalar (& fdsp ,& cdsp ,src2 ,src0 ,src1 [ 0 ] )
call	45:8	45:65	4	test_vector_fmac_scalar
arg	45:32	45:37	5	&fdsp
op	45:32	0:0	6	&
water	45:33	0:0	6	fdsp
arg	45:39	45:44	5	&cdsp
op	45:39	0:0	6	&
water	45:40	0:0	6	cdsp
arg	45:46	45:50	5	src2
water	45:46	0:0	6	src2
arg	45:52	45:56	5	src0
water	45:52	0:0	6	src0
arg	45:58	45:65	5	src1[0]
water	45:58	0:0	6	src1
op	45:62	0:0	6	[
water	45:63	0:0	6	0
op	45:64	0:0	6	]
stmts	46:8	46:21	3	
water	46:8	0:0	4	ret
op	46:12	0:0	4	-=
water	46:15	0:0	4	1
op	46:17	0:0	4	<<
water	46:20	0:0	4	1
water	46:21	0:0	4	;
if	47:4	48:21	2	(test_vector_fmul_scalar (& fdsp ,& cdsp ,src0 ,src1 [ 0 ] ))
cond	47:8	47:59	3	test_vector_fmul_scalar (& fdsp ,& cdsp ,src0 ,src1 [ 0 ] )
call	47:8	47:59	4	test_vector_fmul_scalar
arg	47:32	47:37	5	&fdsp
op	47:32	0:0	6	&
water	47:33	0:0	6	fdsp
arg	47:39	47:44	5	&cdsp
op	47:39	0:0	6	&
water	47:40	0:0	6	cdsp
arg	47:46	47:50	5	src0
water	47:46	0:0	6	src0
arg	47:52	47:59	5	src1[0]
water	47:52	0:0	6	src1
op	47:56	0:0	6	[
water	47:57	0:0	6	0
op	47:58	0:0	6	]
stmts	48:8	48:21	3	
water	48:8	0:0	4	ret
op	48:12	0:0	4	-=
water	48:15	0:0	4	1
op	48:17	0:0	4	<<
water	48:20	0:0	4	2
water	48:21	0:0	4	;
if	49:4	50:21	2	(test_vector_fmul_window (& fdsp ,& cdsp ,src0 ,src1 ,src2 ))
cond	49:8	49:62	3	test_vector_fmul_window (& fdsp ,& cdsp ,src0 ,src1 ,src2 )
call	49:8	49:62	4	test_vector_fmul_window
arg	49:32	49:37	5	&fdsp
op	49:32	0:0	6	&
water	49:33	0:0	6	fdsp
arg	49:39	49:44	5	&cdsp
op	49:39	0:0	6	&
water	49:40	0:0	6	cdsp
arg	49:46	49:50	5	src0
water	49:46	0:0	6	src0
arg	49:52	49:56	5	src1
water	49:52	0:0	6	src1
arg	49:58	49:62	5	src2
water	49:58	0:0	6	src2
stmts	50:8	50:21	3	
water	50:8	0:0	4	ret
op	50:12	0:0	4	-=
water	50:15	0:0	4	1
op	50:17	0:0	4	<<
water	50:20	0:0	4	3
water	50:21	0:0	4	;
if	51:4	52:21	2	(test_vector_fmul_add (& fdsp ,& cdsp ,src0 ,src1 ,src2 ))
cond	51:8	51:59	3	test_vector_fmul_add (& fdsp ,& cdsp ,src0 ,src1 ,src2 )
call	51:8	51:59	4	test_vector_fmul_add
arg	51:29	51:34	5	&fdsp
op	51:29	0:0	6	&
water	51:30	0:0	6	fdsp
arg	51:36	51:41	5	&cdsp
op	51:36	0:0	6	&
water	51:37	0:0	6	cdsp
arg	51:43	51:47	5	src0
water	51:43	0:0	6	src0
arg	51:49	51:53	5	src1
water	51:49	0:0	6	src1
arg	51:55	51:59	5	src2
water	51:55	0:0	6	src2
stmts	52:8	52:21	3	
water	52:8	0:0	4	ret
op	52:12	0:0	4	-=
water	52:15	0:0	4	1
op	52:17	0:0	4	<<
water	52:20	0:0	4	4
water	52:21	0:0	4	;
if	53:4	54:21	2	(test_vector_fmul_reverse (& fdsp ,& cdsp ,src0 ,src1 ))
cond	53:8	53:57	3	test_vector_fmul_reverse (& fdsp ,& cdsp ,src0 ,src1 )
call	53:8	53:57	4	test_vector_fmul_reverse
arg	53:33	53:38	5	&fdsp
op	53:33	0:0	6	&
water	53:34	0:0	6	fdsp
arg	53:40	53:45	5	&cdsp
op	53:40	0:0	6	&
water	53:41	0:0	6	cdsp
arg	53:47	53:51	5	src0
water	53:47	0:0	6	src0
arg	53:53	53:57	5	src1
water	53:53	0:0	6	src1
stmts	54:8	54:21	3	
water	54:8	0:0	4	ret
op	54:12	0:0	4	-=
water	54:15	0:0	4	1
op	54:17	0:0	4	<<
water	54:20	0:0	4	5
water	54:21	0:0	4	;
if	55:4	56:21	2	(test_butterflies_float (& fdsp ,& cdsp ,src0 ,src1 ))
cond	55:8	55:55	3	test_butterflies_float (& fdsp ,& cdsp ,src0 ,src1 )
call	55:8	55:55	4	test_butterflies_float
arg	55:31	55:36	5	&fdsp
op	55:31	0:0	6	&
water	55:32	0:0	6	fdsp
arg	55:38	55:43	5	&cdsp
op	55:38	0:0	6	&
water	55:39	0:0	6	cdsp
arg	55:45	55:49	5	src0
water	55:45	0:0	6	src0
arg	55:51	55:55	5	src1
water	55:51	0:0	6	src1
stmts	56:8	56:21	3	
water	56:8	0:0	4	ret
op	56:12	0:0	4	-=
water	56:15	0:0	4	1
op	56:17	0:0	4	<<
water	56:20	0:0	4	6
water	56:21	0:0	4	;
if	57:4	58:21	2	(test_scalarproduct_float (& fdsp ,& cdsp ,src0 ,src1 ))
cond	57:8	57:57	3	test_scalarproduct_float (& fdsp ,& cdsp ,src0 ,src1 )
call	57:8	57:57	4	test_scalarproduct_float
arg	57:33	57:38	5	&fdsp
op	57:33	0:0	6	&
water	57:34	0:0	6	fdsp
arg	57:40	57:45	5	&cdsp
op	57:40	0:0	6	&
water	57:41	0:0	6	cdsp
arg	57:47	57:51	5	src0
water	57:47	0:0	6	src0
arg	57:53	57:57	5	src1
water	57:53	0:0	6	src1
stmts	58:8	58:21	3	
water	58:8	0:0	4	ret
op	58:12	0:0	4	-=
water	58:15	0:0	4	1
op	58:17	0:0	4	<<
water	58:20	0:0	4	7
water	58:21	0:0	4	;
if	59:4	60:21	2	(test_vector_dmul_scalar (& fdsp ,& cdsp ,dbl_src0 ,dbl_src1 [ 0 ] ))
cond	59:8	59:67	3	test_vector_dmul_scalar (& fdsp ,& cdsp ,dbl_src0 ,dbl_src1 [ 0 ] )
call	59:8	59:67	4	test_vector_dmul_scalar
arg	59:32	59:37	5	&fdsp
op	59:32	0:0	6	&
water	59:33	0:0	6	fdsp
arg	59:39	59:44	5	&cdsp
op	59:39	0:0	6	&
water	59:40	0:0	6	cdsp
arg	59:46	59:54	5	dbl_src0
water	59:46	0:0	6	dbl_src0
arg	59:56	59:67	5	dbl_src1[0]
water	59:56	0:0	6	dbl_src1
op	59:64	0:0	6	[
water	59:65	0:0	6	0
op	59:66	0:0	6	]
stmts	60:8	60:21	3	
water	60:8	0:0	4	ret
op	60:12	0:0	4	-=
water	60:15	0:0	4	1
op	60:17	0:0	4	<<
water	60:20	0:0	4	8
water	60:21	0:0	4	;
return	61:4	61:14	2	ret
water	61:11	0:0	3	ret
