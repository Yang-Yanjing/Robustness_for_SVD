func	1:0	54:0	0	static int	pulse_read_packet
params	1:28	0:0	1	
param	1:29	1:47	2	AVFormatContext *	s
param	1:49	1:62	2	AVPacket *	pkt
stmnts	0:0	53:14	1	
decl	3:4	3:33	2	PulseData	*pd
op	3:19	0:0	2	=
water	3:21	0:0	2	s
op	3:22	0:0	2	->
water	3:24	0:0	2	priv_data
decl	4:4	4:11	2	int	ret
decl	5:4	5:22	2	size_t	read_length
decl	6:4	6:32	2	const void	*read_data
op	6:26	0:0	2	=
water	6:28	0:0	2	NULL
decl	7:4	7:15	2	int64_t	dts
decl	8:4	8:21	2	pa_usec_t	latency
decl	9:4	9:16	2	int	negative
call	10:4	10:42	2	pa_threaded_mainloop_lock
arg	10:30	10:42	3	pd->mainloop
water	10:30	0:0	4	pd
op	10:32	0:0	4	->
water	10:34	0:0	4	mainloop
water	10:43	0:0	2	;
call	11:4	11:44	2	CHECK_DEAD_GOTO
arg	11:20	11:22	3	pd
water	11:20	0:0	4	pd
arg	11:24	11:27	3	ret
water	11:24	0:0	4	ret
arg	11:29	11:44	3	unlock_and_fail
water	11:29	0:0	4	unlock_and_fail
water	11:45	0:0	2	;
while	12:4	25:4	2	(! read_data)
cond	12:11	12:12	3	! read_data
op	12:11	0:0	4	!
water	12:12	0:0	4	read_data
stmts	12:23	25:4	3	
water	12:23	0:0	4	{
decl	13:8	13:13	4	int	r
water	14:8	0:0	4	r
op	14:10	0:0	4	=
call	14:12	14:63	4	pa_stream_peek
arg	14:27	14:37	5	pd->stream
water	14:27	0:0	6	pd
op	14:29	0:0	6	->
water	14:31	0:0	6	stream
arg	14:39	14:49	5	&read_data
op	14:39	0:0	6	&
water	14:40	0:0	6	read_data
arg	14:51	14:63	5	&read_length
op	14:51	0:0	6	&
water	14:52	0:0	6	read_length
water	14:64	0:0	4	;
call	15:8	15:55	4	CHECK_SUCCESS_GOTO
arg	15:27	15:30	5	ret
water	15:27	0:0	6	ret
arg	15:32	15:38	5	r==0
water	15:32	0:0	6	r
op	15:34	0:0	6	==
water	15:37	0:0	6	0
arg	15:40	15:55	5	unlock_and_fail
water	15:40	0:0	6	unlock_and_fail
water	15:56	0:0	4	;
if	16:8	19:8	4	(read_length <= 0)
cond	16:12	16:27	5	read_length <= 0
water	16:12	0:0	6	read_length
op	16:24	0:0	6	<=
water	16:27	0:0	6	0
stmts	16:30	19:8	5	
water	16:30	0:0	6	{
call	17:12	17:50	6	pa_threaded_mainloop_wait
arg	17:38	17:50	7	pd->mainloop
water	17:38	0:0	8	pd
op	17:40	0:0	8	->
water	17:42	0:0	8	mainloop
water	17:51	0:0	6	;
call	18:12	18:52	6	CHECK_DEAD_GOTO
arg	18:28	18:30	7	pd
water	18:28	0:0	8	pd
arg	18:32	18:35	7	ret
water	18:32	0:0	8	ret
arg	18:37	18:52	7	unlock_and_fail
water	18:37	0:0	8	unlock_and_fail
water	18:53	0:0	6	;
water	19:8	0:0	6	}
else	19:10	24:8	4
stmts	19:15	24:8	5	
if	19:15	24:8	6	(! read_data)
cond	19:19	19:20	7	! read_data
op	19:19	0:0	8	!
water	19:20	0:0	8	read_data
stmts	19:31	24:8	7	
water	19:31	0:0	8	{
water	22:12	0:0	8	r
op	22:14	0:0	8	=
call	22:16	22:41	8	pa_stream_drop
arg	22:31	22:41	9	pd->stream
water	22:31	0:0	10	pd
op	22:33	0:0	10	->
water	22:35	0:0	10	stream
water	22:42	0:0	8	;
call	23:12	23:59	8	CHECK_SUCCESS_GOTO
arg	23:31	23:34	9	ret
water	23:31	0:0	10	ret
arg	23:36	23:42	9	r==0
water	23:36	0:0	10	r
op	23:38	0:0	10	==
water	23:41	0:0	10	0
arg	23:44	23:59	9	unlock_and_fail
water	23:44	0:0	10	unlock_and_fail
water	23:60	0:0	8	;
water	24:8	0:0	8	}
water	25:4	0:0	4	}
if	26:4	29:4	2	(av_new_packet (pkt ,read_length ) < 0)
cond	26:8	26:42	3	av_new_packet (pkt ,read_length ) < 0
call	26:8	26:38	4	av_new_packet
arg	26:22	26:25	5	pkt
water	26:22	0:0	6	pkt
arg	26:27	26:38	5	read_length
water	26:27	0:0	6	read_length
op	26:40	0:0	4	<
water	26:42	0:0	4	0
stmts	26:45	29:4	3	
water	26:45	0:0	4	{
water	27:8	0:0	4	ret
op	27:12	0:0	4	=
call	27:14	27:28	4	AVERROR
arg	27:22	27:28	5	ENOMEM
water	27:22	0:0	6	ENOMEM
water	27:29	0:0	4	;
goto	28:8	28:28	4	unlock_and_fail
water	28:13	0:0	5	unlock_and_fail
water	29:4	0:0	4	}
water	30:4	0:0	2	dts
op	30:8	0:0	2	=
call	30:10	30:21	2	av_gettime
water	30:22	0:0	2	;
call	31:4	31:75	2	pa_operation_unref
arg	31:23	31:75	3	pa_stream_update_timing_info(pd->stream,NULL,NULL)
call	31:23	31:74	4	pa_stream_update_timing_info
arg	31:52	31:62	5	pd->stream
water	31:52	0:0	6	pd
op	31:54	0:0	6	->
water	31:56	0:0	6	stream
arg	31:64	31:68	5	NULL
water	31:64	0:0	6	NULL
arg	31:70	31:74	5	NULL
water	31:70	0:0	6	NULL
water	31:76	0:0	2	;
if	32:4	44:4	2	(pa_stream_get_latency (pd -> stream ,& latency ,& negative ) >= 0)
cond	32:8	32:66	3	pa_stream_get_latency (pd -> stream ,& latency ,& negative ) >= 0
call	32:8	32:61	4	pa_stream_get_latency
arg	32:30	32:40	5	pd->stream
water	32:30	0:0	6	pd
op	32:32	0:0	6	->
water	32:34	0:0	6	stream
arg	32:42	32:50	5	&latency
op	32:42	0:0	6	&
water	32:43	0:0	6	latency
arg	32:52	32:61	5	&negative
op	32:52	0:0	6	&
water	32:53	0:0	6	negative
op	32:63	0:0	4	>=
water	32:66	0:0	4	0
stmts	32:69	44:4	3	
water	32:69	0:0	4	{
decl	33:8	34:88	4	enum AVCodecID	codec_id
op	33:32	0:0	4	=
water	34:12	0:0	4	s
op	34:13	0:0	4	->
water	34:15	0:0	4	audio_codec_id
op	34:30	0:0	4	==
water	34:33	0:0	4	AV_CODEC_ID_NONE
water	34:50	0:0	4	?
water	34:52	0:0	4	DEFAULT_CODEC_ID
water	34:69	0:0	4	:
water	34:71	0:0	4	s
op	34:72	0:0	4	->
water	34:74	0:0	4	audio_codec_id
decl	35:8	35:81	4	int	frame_size
op	35:23	0:0	4	=
water	35:25	0:0	4	(
water	35:26	0:0	4	(
call	35:27	35:58	5	av_get_bits_per_sample
arg	35:50	35:58	6	codec_id
water	35:50	0:0	7	codec_id
op	35:60	0:0	4	>>
water	35:63	0:0	4	3
water	35:64	0:0	4	)
op	35:66	0:0	4	*
water	35:68	0:0	4	pd
op	35:70	0:0	4	->
water	35:72	0:0	4	channels
water	35:80	0:0	4	)
decl	36:8	36:53	4	int	frame_duration
op	36:27	0:0	4	=
water	36:29	0:0	4	read_length
op	36:41	0:0	4	/
water	36:43	0:0	4	frame_size
if	37:8	39:8	4	(negative)
cond	37:12	37:12	5	negative
water	37:12	0:0	6	negative
stmts	37:22	39:8	5	
water	37:22	0:0	6	{
water	38:12	0:0	6	dts
op	38:16	0:0	6	+=
water	38:19	0:0	6	latency
water	38:26	0:0	6	;
water	39:8	0:0	6	}
else	39:10	40:26	4
stmts	40:12	40:26	5	
water	40:12	0:0	6	dts
op	40:16	0:0	6	-=
water	40:19	0:0	6	latency
water	40:26	0:0	6	;
if	41:8	42:81	4	(pd -> wallclock)
cond	41:12	41:16	5	pd -> wallclock
water	41:12	0:0	6	pd
op	41:14	0:0	6	->
water	41:16	0:0	6	wallclock
stmts	42:12	42:81	5	
water	42:12	0:0	6	pkt
op	42:15	0:0	6	->
water	42:17	0:0	6	pts
op	42:21	0:0	6	=
call	42:23	42:80	6	ff_timefilter_update
arg	42:44	42:58	7	pd->timefilter
water	42:44	0:0	8	pd
op	42:46	0:0	8	->
water	42:48	0:0	8	timefilter
arg	42:60	42:63	7	dts
water	42:60	0:0	8	dts
arg	42:65	42:80	7	pd->last_period
water	42:65	0:0	8	pd
op	42:67	0:0	8	->
water	42:69	0:0	8	last_period
water	42:81	0:0	6	;
water	43:8	0:0	4	pd
op	43:10	0:0	4	->
water	43:12	0:0	4	last_period
op	43:24	0:0	4	=
water	43:26	0:0	4	frame_duration
water	43:40	0:0	4	;
water	44:4	0:0	4	}
else	44:6	46:4	2
stmts	44:11	46:4	3	
water	44:11	0:0	4	{
call	45:8	45:68	4	av_log
arg	45:15	45:16	5	s
water	45:15	0:0	6	s
arg	45:18	45:32	5	AV_LOG_WARNING
water	45:18	0:0	6	AV_LOG_WARNING
arg	45:34	45:68	5	"pa_stream_get_latency() failed\n"
water	45:34	0:0	6	"pa_stream_get_latency() failed\n"
water	45:69	0:0	4	;
water	46:4	0:0	4	}
call	47:4	47:44	2	memcpy
arg	47:11	47:20	3	pkt->data
water	47:11	0:0	4	pkt
op	47:14	0:0	4	->
water	47:16	0:0	4	data
arg	47:22	47:31	3	read_data
water	47:22	0:0	4	read_data
arg	47:33	47:44	3	read_length
water	47:33	0:0	4	read_length
water	47:45	0:0	2	;
call	48:4	48:29	2	pa_stream_drop
arg	48:19	48:29	3	pd->stream
water	48:19	0:0	4	pd
op	48:21	0:0	4	->
water	48:23	0:0	4	stream
water	48:30	0:0	2	;
call	49:4	49:44	2	pa_threaded_mainloop_unlock
arg	49:32	49:44	3	pd->mainloop
water	49:32	0:0	4	pd
op	49:34	0:0	4	->
water	49:36	0:0	4	mainloop
water	49:45	0:0	2	;
return	50:4	50:12	2	0
water	50:11	0:0	3	0
label	51:0	51:15	2	unlock_and_fail :
call	52:4	52:44	2	pa_threaded_mainloop_unlock
arg	52:32	52:44	3	pd->mainloop
water	52:32	0:0	4	pd
op	52:34	0:0	4	->
water	52:36	0:0	4	mainloop
water	52:45	0:0	2	;
return	53:4	53:14	2	ret
water	53:11	0:0	3	ret
