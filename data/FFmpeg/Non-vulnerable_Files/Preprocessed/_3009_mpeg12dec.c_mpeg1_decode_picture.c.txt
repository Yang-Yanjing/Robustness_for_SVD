func	1:0	41:0	0	static int	mpeg1_decode_picture
params	1:31	0:0	1	
param	1:32	1:53	2	AVCodecContext *	avctx
param	1:55	1:73	2	const uint8_t *	buf
param	2:32	2:44	2	int	buf_size
stmnts	0:0	40:12	1	
decl	4:4	4:40	2	Mpeg1Context	*s1
op	4:22	0:0	2	=
water	4:24	0:0	2	avctx
op	4:29	0:0	2	->
water	4:31	0:0	2	priv_data
decl	5:4	5:41	2	MpegEncContext	*s
op	5:22	0:0	2	=
op	5:24	0:0	2	&
water	5:25	0:0	2	s1
op	5:27	0:0	2	->
water	5:29	0:0	2	mpeg_enc_ctx
decl	6:4	6:30	2	int	ref
water	6:11	0:0	2	,
decl	6:4	6:30	2	int	f_code
water	6:19	0:0	2	,
decl	6:4	6:30	2	int	vbv_delay
call	7:4	7:43	2	init_get_bits
arg	7:18	7:24	3	&s->gb
op	7:18	0:0	4	&
water	7:19	0:0	4	s
op	7:20	0:0	4	->
water	7:22	0:0	4	gb
arg	7:26	7:29	3	buf
water	7:26	0:0	4	buf
arg	7:31	7:43	3	buf_size*8
water	7:31	0:0	4	buf_size
op	7:40	0:0	4	*
water	7:42	0:0	4	8
water	7:44	0:0	2	;
water	8:4	0:0	2	ref
op	8:8	0:0	2	=
call	8:10	8:29	2	get_bits
arg	8:19	8:25	3	&s->gb
op	8:19	0:0	4	&
water	8:20	0:0	4	s
op	8:21	0:0	4	->
water	8:23	0:0	4	gb
arg	8:27	8:29	3	10
water	8:27	0:0	4	10
water	8:30	0:0	2	;
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	pict_type
op	9:17	0:0	2	=
call	9:19	9:37	2	get_bits
arg	9:28	9:34	3	&s->gb
op	9:28	0:0	4	&
water	9:29	0:0	4	s
op	9:30	0:0	4	->
water	9:32	0:0	4	gb
arg	9:36	9:37	3	3
water	9:36	0:0	4	3
water	9:38	0:0	2	;
if	10:4	11:34	2	(s -> pict_type == 0 || s -> pict_type > 3)
cond	10:8	10:44	3	s -> pict_type == 0 || s -> pict_type > 3
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	pict_type
op	10:21	0:0	4	==
water	10:24	0:0	4	0
op	10:26	0:0	4	||
water	10:29	0:0	4	s
op	10:30	0:0	4	->
water	10:32	0:0	4	pict_type
op	10:42	0:0	4	>
water	10:44	0:0	4	3
stmts	11:8	11:34	3	
return	11:8	11:34	4	AVERROR_INVALIDDATA
water	11:15	0:0	5	AVERROR_INVALIDDATA
water	12:4	0:0	2	vbv_delay
op	12:14	0:0	2	=
call	12:16	12:35	2	get_bits
arg	12:25	12:31	3	&s->gb
op	12:25	0:0	4	&
water	12:26	0:0	4	s
op	12:27	0:0	4	->
water	12:29	0:0	4	gb
arg	12:33	12:35	3	16
water	12:33	0:0	4	16
water	12:36	0:0	2	;
water	13:4	0:0	2	s
op	13:5	0:0	2	->
water	13:7	0:0	2	vbv_delay
op	13:17	0:0	2	=
water	13:19	0:0	2	vbv_delay
water	13:28	0:0	2	;
if	14:4	23:4	2	(s -> pict_type == AV_PICTURE_TYPE_P || s -> pict_type == AV_PICTURE_TYPE_B)
cond	14:8	15:24	3	s -> pict_type == AV_PICTURE_TYPE_P || s -> pict_type == AV_PICTURE_TYPE_B
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	pict_type
op	14:21	0:0	4	==
water	14:24	0:0	4	AV_PICTURE_TYPE_P
op	14:42	0:0	4	||
water	15:8	0:0	4	s
op	15:9	0:0	4	->
water	15:11	0:0	4	pict_type
op	15:21	0:0	4	==
water	15:24	0:0	4	AV_PICTURE_TYPE_B
stmts	15:43	23:4	3	
water	15:43	0:0	4	{
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	full_pel
op	16:19	0:0	4	[
water	16:20	0:0	4	0
op	16:21	0:0	4	]
op	16:23	0:0	4	=
call	16:25	16:41	4	get_bits1
arg	16:35	16:41	5	&s->gb
op	16:35	0:0	6	&
water	16:36	0:0	6	s
op	16:37	0:0	6	->
water	16:39	0:0	6	gb
water	16:42	0:0	4	;
water	17:8	0:0	4	f_code
op	17:15	0:0	4	=
call	17:17	17:35	4	get_bits
arg	17:26	17:32	5	&s->gb
op	17:26	0:0	6	&
water	17:27	0:0	6	s
op	17:28	0:0	6	->
water	17:30	0:0	6	gb
arg	17:34	17:35	5	3
water	17:34	0:0	6	3
water	17:36	0:0	4	;
if	18:8	19:38	4	(f_code == 0 && ( avctx -> err_recognition & ( AV_EF_BITSTREAM | AV_EF_COMPLIANT ) ))
cond	18:12	18:86	5	f_code == 0 && ( avctx -> err_recognition & ( AV_EF_BITSTREAM | AV_EF_COMPLIANT ) )
water	18:12	0:0	6	f_code
op	18:19	0:0	6	==
water	18:22	0:0	6	0
op	18:24	0:0	6	&&
water	18:27	0:0	6	(
water	18:28	0:0	6	avctx
op	18:33	0:0	6	->
water	18:35	0:0	6	err_recognition
op	18:51	0:0	6	&
water	18:53	0:0	6	(
water	18:54	0:0	6	AV_EF_BITSTREAM
op	18:69	0:0	6	|
water	18:70	0:0	6	AV_EF_COMPLIANT
water	18:85	0:0	6	)
water	18:86	0:0	6	)
stmts	19:12	19:38	5	
return	19:12	19:38	6	AVERROR_INVALIDDATA
water	19:19	0:0	7	AVERROR_INVALIDDATA
water	20:8	0:0	4	f_code
op	20:15	0:0	4	+=
op	20:18	0:0	4	!
water	20:19	0:0	4	f_code
water	20:25	0:0	4	;
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	mpeg_f_code
op	21:22	0:0	4	[
water	21:23	0:0	4	0
op	21:24	0:0	4	]
op	21:25	0:0	4	[
water	21:26	0:0	4	0
op	21:27	0:0	4	]
op	21:29	0:0	4	=
water	21:31	0:0	4	f_code
water	21:37	0:0	4	;
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	mpeg_f_code
op	22:22	0:0	4	[
water	22:23	0:0	4	0
op	22:24	0:0	4	]
op	22:25	0:0	4	[
water	22:26	0:0	4	1
op	22:27	0:0	4	]
op	22:29	0:0	4	=
water	22:31	0:0	4	f_code
water	22:37	0:0	4	;
water	23:4	0:0	4	}
if	24:4	32:4	2	(s -> pict_type == AV_PICTURE_TYPE_B)
cond	24:8	24:24	3	s -> pict_type == AV_PICTURE_TYPE_B
water	24:8	0:0	4	s
op	24:9	0:0	4	->
water	24:11	0:0	4	pict_type
op	24:21	0:0	4	==
water	24:24	0:0	4	AV_PICTURE_TYPE_B
stmts	24:43	32:4	3	
water	24:43	0:0	4	{
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	full_pel
op	25:19	0:0	4	[
water	25:20	0:0	4	1
op	25:21	0:0	4	]
op	25:23	0:0	4	=
call	25:25	25:41	4	get_bits1
arg	25:35	25:41	5	&s->gb
op	25:35	0:0	6	&
water	25:36	0:0	6	s
op	25:37	0:0	6	->
water	25:39	0:0	6	gb
water	25:42	0:0	4	;
water	26:8	0:0	4	f_code
op	26:15	0:0	4	=
call	26:17	26:35	4	get_bits
arg	26:26	26:32	5	&s->gb
op	26:26	0:0	6	&
water	26:27	0:0	6	s
op	26:28	0:0	6	->
water	26:30	0:0	6	gb
arg	26:34	26:35	5	3
water	26:34	0:0	6	3
water	26:36	0:0	4	;
if	27:8	28:38	4	(f_code == 0 && ( avctx -> err_recognition & ( AV_EF_BITSTREAM | AV_EF_COMPLIANT ) ))
cond	27:12	27:86	5	f_code == 0 && ( avctx -> err_recognition & ( AV_EF_BITSTREAM | AV_EF_COMPLIANT ) )
water	27:12	0:0	6	f_code
op	27:19	0:0	6	==
water	27:22	0:0	6	0
op	27:24	0:0	6	&&
water	27:27	0:0	6	(
water	27:28	0:0	6	avctx
op	27:33	0:0	6	->
water	27:35	0:0	6	err_recognition
op	27:51	0:0	6	&
water	27:53	0:0	6	(
water	27:54	0:0	6	AV_EF_BITSTREAM
op	27:69	0:0	6	|
water	27:70	0:0	6	AV_EF_COMPLIANT
water	27:85	0:0	6	)
water	27:86	0:0	6	)
stmts	28:12	28:38	5	
return	28:12	28:38	6	AVERROR_INVALIDDATA
water	28:19	0:0	7	AVERROR_INVALIDDATA
water	29:8	0:0	4	f_code
op	29:15	0:0	4	+=
op	29:18	0:0	4	!
water	29:19	0:0	4	f_code
water	29:25	0:0	4	;
water	30:8	0:0	4	s
op	30:9	0:0	4	->
water	30:11	0:0	4	mpeg_f_code
op	30:22	0:0	4	[
water	30:23	0:0	4	1
op	30:24	0:0	4	]
op	30:25	0:0	4	[
water	30:26	0:0	4	0
op	30:27	0:0	4	]
op	30:29	0:0	4	=
water	30:31	0:0	4	f_code
water	30:37	0:0	4	;
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	mpeg_f_code
op	31:22	0:0	4	[
water	31:23	0:0	4	1
op	31:24	0:0	4	]
op	31:25	0:0	4	[
water	31:26	0:0	4	1
op	31:27	0:0	4	]
op	31:29	0:0	4	=
water	31:31	0:0	4	f_code
water	31:37	0:0	4	;
water	32:4	0:0	4	}
water	33:4	0:0	2	s
op	33:5	0:0	2	->
water	33:7	0:0	2	current_picture
op	33:22	0:0	2	.
water	33:23	0:0	2	f
op	33:24	0:0	2	->
water	33:26	0:0	2	pict_type
op	33:36	0:0	2	=
water	33:38	0:0	2	s
op	33:39	0:0	2	->
water	33:41	0:0	2	pict_type
water	33:50	0:0	2	;
water	34:4	0:0	2	s
op	34:5	0:0	2	->
water	34:7	0:0	2	current_picture
op	34:22	0:0	2	.
water	34:23	0:0	2	f
op	34:24	0:0	2	->
water	34:26	0:0	2	key_frame
op	34:36	0:0	2	=
water	34:38	0:0	2	s
op	34:39	0:0	2	->
water	34:41	0:0	2	pict_type
op	34:51	0:0	2	==
water	34:54	0:0	2	AV_PICTURE_TYPE_I
water	34:71	0:0	2	;
if	35:4	37:78	2	(avctx -> debug & FF_DEBUG_PICT_INFO)
cond	35:8	35:23	3	avctx -> debug & FF_DEBUG_PICT_INFO
water	35:8	0:0	4	avctx
op	35:13	0:0	4	->
water	35:15	0:0	4	debug
op	35:21	0:0	4	&
water	35:23	0:0	4	FF_DEBUG_PICT_INFO
stmts	36:8	37:78	3	
call	36:8	37:77	4	av_log
arg	36:15	36:20	5	avctx
water	36:15	0:0	6	avctx
arg	36:22	36:34	5	AV_LOG_DEBUG
water	36:22	0:0	6	AV_LOG_DEBUG
arg	37:15	37:47	5	"vbv_delay %d, ref %d type:%d\n"
water	37:15	0:0	6	"vbv_delay %d, ref %d type:%d\n"
arg	37:49	37:58	5	vbv_delay
water	37:49	0:0	6	vbv_delay
arg	37:60	37:63	5	ref
water	37:60	0:0	6	ref
arg	37:65	37:77	5	s->pict_type
water	37:65	0:0	6	s
op	37:66	0:0	6	->
water	37:68	0:0	6	pict_type
water	37:78	0:0	4	;
water	38:4	0:0	2	s
op	38:5	0:0	2	->
water	38:7	0:0	2	y_dc_scale
op	38:18	0:0	2	=
water	38:20	0:0	2	8
water	38:21	0:0	2	;
water	39:4	0:0	2	s
op	39:5	0:0	2	->
water	39:7	0:0	2	c_dc_scale
op	39:18	0:0	2	=
water	39:20	0:0	2	8
water	39:21	0:0	2	;
return	40:4	40:12	2	0
water	40:11	0:0	3	0
