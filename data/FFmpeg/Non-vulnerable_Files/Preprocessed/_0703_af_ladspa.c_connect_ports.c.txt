func	1:0	26:0	0	static int	connect_ports
params	1:24	0:0	1	
param	1:25	1:45	2	AVFilterContext *	ctx
param	1:47	1:65	2	AVFilterLink *	link
stmnts	0:0	25:12	1	
decl	3:4	3:32	2	LADSPAContext	*s
op	3:21	0:0	2	=
water	3:23	0:0	2	ctx
op	3:26	0:0	2	->
water	3:28	0:0	2	priv
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	j
water	5:4	0:0	2	s
op	5:5	0:0	2	->
water	5:7	0:0	2	nb_handles
op	5:18	0:0	2	=
water	5:20	0:0	2	s
op	5:21	0:0	2	->
water	5:23	0:0	2	nb_inputs
op	5:33	0:0	2	==
water	5:36	0:0	2	1
op	5:38	0:0	2	&&
water	5:41	0:0	2	s
op	5:42	0:0	2	->
water	5:44	0:0	2	nb_outputs
op	5:55	0:0	2	==
water	5:58	0:0	2	1
water	5:60	0:0	2	?
water	5:62	0:0	2	link
op	5:66	0:0	2	->
water	5:68	0:0	2	channels
water	5:77	0:0	2	:
water	5:79	0:0	2	1
water	5:80	0:0	2	;
water	6:4	0:0	2	s
op	6:5	0:0	2	->
water	6:7	0:0	2	handles
op	6:18	0:0	2	=
call	6:20	6:64	2	av_calloc
arg	6:30	6:43	3	s->nb_handles
water	6:30	0:0	4	s
op	6:31	0:0	4	->
water	6:33	0:0	4	nb_handles
arg	6:45	6:64	3	sizeof(*s->handles)
op	6:45	0:0	4	sizeof
water	6:51	0:0	4	(
op	6:52	0:0	4	*
water	6:53	0:0	4	s
op	6:54	0:0	4	->
water	6:56	0:0	4	handles
water	6:63	0:0	4	)
water	6:65	0:0	2	;
if	7:4	8:30	2	(! s -> handles)
cond	7:8	7:12	3	! s -> handles
op	7:8	0:0	4	!
water	7:9	0:0	4	s
op	7:10	0:0	4	->
water	7:12	0:0	4	handles
stmts	8:8	8:30	3	
return	8:8	8:30	4	AVERROR(ENOMEM)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	ENOMEM
water	8:23	0:0	7	ENOMEM
for	9:4	23:4	2	(i = 0 ;i < s -> nb_handles;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:23	3	i < s -> nb_handles
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	s
op	9:21	0:0	4	->
water	9:23	0:0	4	nb_handles
forexpr	9:35	9:36	3	i ++
water	9:35	0:0	4	i
op	9:36	0:0	4	++
stmts	9:40	23:4	3	
water	9:40	0:0	4	{
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	handles
op	10:18	0:0	4	[
water	10:19	0:0	4	i
op	10:20	0:0	4	]
op	10:22	0:0	4	=
call	10:24	10:71	4	s->desc->instantiate
arg	10:45	10:52	5	s->desc
water	10:45	0:0	6	s
op	10:46	0:0	6	->
water	10:48	0:0	6	desc
arg	10:54	10:71	5	link->sample_rate
water	10:54	0:0	6	link
op	10:58	0:0	6	->
water	10:60	0:0	6	sample_rate
water	10:72	0:0	4	;
if	11:8	14:8	4	(! s -> handles [ i ])
cond	11:12	11:25	5	! s -> handles [ i ]
op	11:12	0:0	6	!
water	11:13	0:0	6	s
op	11:14	0:0	6	->
water	11:16	0:0	6	handles
op	11:23	0:0	6	[
water	11:24	0:0	6	i
op	11:25	0:0	6	]
stmts	11:28	14:8	5	
water	11:28	0:0	6	{
call	12:12	12:71	6	av_log
arg	12:19	12:22	7	ctx
water	12:19	0:0	8	ctx
arg	12:24	12:36	7	AV_LOG_ERROR
water	12:24	0:0	8	AV_LOG_ERROR
arg	12:38	12:71	7	"Could not instantiate plugin.\n"
water	12:38	0:0	8	"Could not instantiate plugin.\n"
water	12:72	0:0	6	;
return	13:12	13:35	6	AVERROR_EXTERNAL
water	13:19	0:0	7	AVERROR_EXTERNAL
water	14:8	0:0	6	}
for	16:8	17:75	4	(j = 0 ;j < s -> nb_inputcontrols;j ++)
forinit	16:13	16:18	5	j = 0 ;
water	16:13	0:0	6	j
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:27	5	j < s -> nb_inputcontrols
water	16:20	0:0	6	j
op	16:22	0:0	6	<
water	16:24	0:0	6	s
op	16:25	0:0	6	->
water	16:27	0:0	6	nb_inputcontrols
forexpr	16:45	16:46	5	j ++
water	16:45	0:0	6	j
op	16:46	0:0	6	++
stmts	17:12	17:75	5	
call	17:12	17:74	6	s->desc->connect_port
arg	17:34	17:47	7	s->handles[i]
water	17:34	0:0	8	s
op	17:35	0:0	8	->
water	17:37	0:0	8	handles
op	17:44	0:0	8	[
water	17:45	0:0	8	i
op	17:46	0:0	8	]
arg	17:49	17:60	7	s->icmap[j]
water	17:49	0:0	8	s
op	17:50	0:0	8	->
water	17:52	0:0	8	icmap
op	17:57	0:0	8	[
water	17:58	0:0	8	j
op	17:59	0:0	8	]
arg	17:62	17:74	7	s->ictlv+j
water	17:62	0:0	8	s
op	17:63	0:0	8	->
water	17:65	0:0	8	ictlv
op	17:71	0:0	8	+
water	17:73	0:0	8	j
water	17:75	0:0	6	;
for	19:8	20:75	4	(j = 0 ;j < s -> nb_outputcontrols;j ++)
forinit	19:13	19:18	5	j = 0 ;
water	19:13	0:0	6	j
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:27	5	j < s -> nb_outputcontrols
water	19:20	0:0	6	j
op	19:22	0:0	6	<
water	19:24	0:0	6	s
op	19:25	0:0	6	->
water	19:27	0:0	6	nb_outputcontrols
forexpr	19:46	19:47	5	j ++
water	19:46	0:0	6	j
op	19:47	0:0	6	++
stmts	20:12	20:75	5	
call	20:12	20:74	6	s->desc->connect_port
arg	20:34	20:47	7	s->handles[i]
water	20:34	0:0	8	s
op	20:35	0:0	8	->
water	20:37	0:0	8	handles
op	20:44	0:0	8	[
water	20:45	0:0	8	i
op	20:46	0:0	8	]
arg	20:49	20:60	7	s->ocmap[j]
water	20:49	0:0	8	s
op	20:50	0:0	8	->
water	20:52	0:0	8	ocmap
op	20:57	0:0	8	[
water	20:58	0:0	8	j
op	20:59	0:0	8	]
arg	20:62	20:74	7	&s->octlv[j]
op	20:62	0:0	8	&
water	20:63	0:0	8	s
op	20:64	0:0	8	->
water	20:66	0:0	8	octlv
op	20:71	0:0	8	[
water	20:72	0:0	8	j
op	20:73	0:0	8	]
water	20:75	0:0	6	;
if	21:8	22:44	4	(s -> desc -> activate)
cond	21:12	21:21	5	s -> desc -> activate
water	21:12	0:0	6	s
op	21:13	0:0	6	->
water	21:15	0:0	6	desc
op	21:19	0:0	6	->
water	21:21	0:0	6	activate
stmts	22:12	22:44	5	
call	22:12	22:43	6	s->desc->activate
arg	22:30	22:43	7	s->handles[i]
water	22:30	0:0	8	s
op	22:31	0:0	8	->
water	22:33	0:0	8	handles
op	22:40	0:0	8	[
water	22:41	0:0	8	i
op	22:42	0:0	8	]
water	22:44	0:0	6	;
water	23:4	0:0	4	}
call	24:4	24:60	2	av_log
arg	24:11	24:14	3	ctx
water	24:11	0:0	4	ctx
arg	24:16	24:28	3	AV_LOG_DEBUG
water	24:16	0:0	4	AV_LOG_DEBUG
arg	24:30	24:45	3	"handles: %d\n"
water	24:30	0:0	4	"handles: %d\n"
arg	24:47	24:60	3	s->nb_handles
water	24:47	0:0	4	s
op	24:48	0:0	4	->
water	24:50	0:0	4	nb_handles
water	24:61	0:0	2	;
return	25:4	25:12	2	0
water	25:11	0:0	3	0
