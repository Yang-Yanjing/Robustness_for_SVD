func	1:0	84:0	0	static int	open_input
params	1:21	0:0	1	
param	1:22	1:35	2	HLSContext *	c
param	1:37	1:57	2	struct playlist *	pls
stmnts	0:0	83:14	1	
decl	3:4	3:29	2	AVDictionary	*opts
op	3:23	0:0	2	=
water	3:25	0:0	2	NULL
decl	4:4	4:30	2	AVDictionary	*opts2
op	4:24	0:0	2	=
water	4:26	0:0	2	NULL
decl	5:4	5:11	2	int	ret
decl	6:4	6:76	2	struct segment	*seg
op	6:24	0:0	2	=
water	6:26	0:0	2	pls
op	6:29	0:0	2	->
water	6:31	0:0	2	segments
op	6:39	0:0	2	[
water	6:40	0:0	2	pls
op	6:43	0:0	2	->
water	6:45	0:0	2	cur_seq_no
op	6:56	0:0	2	-
water	6:58	0:0	2	pls
op	6:61	0:0	2	->
water	6:63	0:0	2	start_seq_no
op	6:75	0:0	2	]
call	8:4	8:53	2	av_dict_set
arg	8:16	8:21	3	&opts
op	8:16	0:0	4	&
water	8:17	0:0	4	opts
arg	8:23	8:35	3	"user-agent"
water	8:23	0:0	4	"user-agent"
arg	8:37	8:50	3	c->user_agent
water	8:37	0:0	4	c
op	8:38	0:0	4	->
water	8:40	0:0	4	user_agent
arg	8:52	8:53	3	0
water	8:52	0:0	4	0
water	8:54	0:0	2	;
call	9:4	9:47	2	av_dict_set
arg	9:16	9:21	3	&opts
op	9:16	0:0	4	&
water	9:17	0:0	4	opts
arg	9:23	9:32	3	"cookies"
water	9:23	0:0	4	"cookies"
arg	9:34	9:44	3	c->cookies
water	9:34	0:0	4	c
op	9:35	0:0	4	->
water	9:37	0:0	4	cookies
arg	9:46	9:47	3	0
water	9:46	0:0	4	0
water	9:48	0:0	2	;
call	10:4	10:47	2	av_dict_set
arg	10:16	10:21	3	&opts
op	10:16	0:0	4	&
water	10:17	0:0	4	opts
arg	10:23	10:32	3	"headers"
water	10:23	0:0	4	"headers"
arg	10:34	10:44	3	c->headers
water	10:34	0:0	4	c
op	10:35	0:0	4	->
water	10:37	0:0	4	headers
arg	10:46	10:47	3	0
water	10:46	0:0	4	0
water	10:48	0:0	2	;
call	11:4	11:41	2	av_dict_set
arg	11:16	11:21	3	&opts
op	11:16	0:0	4	&
water	11:17	0:0	4	opts
arg	11:23	11:33	3	"seekable"
water	11:23	0:0	4	"seekable"
arg	11:35	11:38	3	"0"
water	11:35	0:0	4	"0"
arg	11:40	11:41	3	0
water	11:40	0:0	4	0
water	11:42	0:0	2	;
call	13:4	13:32	2	av_dict_copy
arg	13:17	13:23	3	&opts2
op	13:17	0:0	4	&
water	13:18	0:0	4	opts2
arg	13:25	13:29	3	opts
water	13:25	0:0	4	opts
arg	13:31	13:32	3	0
water	13:31	0:0	4	0
water	13:33	0:0	2	;
if	14:4	19:4	2	(seg -> size >= 0)
cond	14:8	14:21	3	seg -> size >= 0
water	14:8	0:0	4	seg
op	14:11	0:0	4	->
water	14:13	0:0	4	size
op	14:18	0:0	4	>=
water	14:21	0:0	4	0
stmts	14:24	19:4	3	
water	14:24	0:0	4	{
call	17:8	17:59	4	av_dict_set_int
arg	17:24	17:29	5	&opts
op	17:24	0:0	6	&
water	17:25	0:0	6	opts
arg	17:31	17:39	5	"offset"
water	17:31	0:0	6	"offset"
arg	17:41	17:56	5	seg->url_offset
water	17:41	0:0	6	seg
op	17:44	0:0	6	->
water	17:46	0:0	6	url_offset
arg	17:58	17:59	5	0
water	17:58	0:0	6	0
water	17:60	0:0	4	;
call	18:8	18:75	4	av_dict_set_int
arg	18:24	18:29	5	&opts
op	18:24	0:0	6	&
water	18:25	0:0	6	opts
arg	18:31	18:43	5	"end_offset"
water	18:31	0:0	6	"end_offset"
arg	18:45	18:72	5	seg->url_offset+seg->size
water	18:45	0:0	6	seg
op	18:48	0:0	6	->
water	18:50	0:0	6	url_offset
op	18:61	0:0	6	+
water	18:63	0:0	6	seg
op	18:66	0:0	6	->
water	18:68	0:0	6	size
arg	18:74	18:75	5	0
water	18:74	0:0	6	0
water	18:76	0:0	4	;
water	19:4	0:0	4	}
call	20:4	21:48	2	av_log
arg	20:11	20:22	3	pls->parent
water	20:11	0:0	4	pls
op	20:14	0:0	4	->
water	20:16	0:0	4	parent
arg	20:24	20:38	3	AV_LOG_VERBOSE
water	20:24	0:0	4	AV_LOG_VERBOSE
arg	20:40	20:99	3	"HLS request for url '%s', offset %"PRId64", playlist %d\n"
water	20:40	0:0	4	"HLS request for url '%s', offset %"
water	20:76	0:0	4	PRId64
water	20:82	0:0	4	", playlist %d\n"
arg	21:11	21:19	3	seg->url
water	21:11	0:0	4	seg
op	21:14	0:0	4	->
water	21:16	0:0	4	url
arg	21:21	21:36	3	seg->url_offset
water	21:21	0:0	4	seg
op	21:24	0:0	4	->
water	21:26	0:0	4	url_offset
arg	21:38	21:48	3	pls->index
water	21:38	0:0	4	pls
op	21:41	0:0	4	->
water	21:43	0:0	4	index
water	21:49	0:0	2	;
if	22:4	24:4	2	(seg -> key_type == KEY_NONE)
cond	22:8	22:25	3	seg -> key_type == KEY_NONE
water	22:8	0:0	4	seg
op	22:11	0:0	4	->
water	22:13	0:0	4	key_type
op	22:22	0:0	4	==
water	22:25	0:0	4	KEY_NONE
stmts	22:35	24:4	3	
water	22:35	0:0	4	{
water	23:8	0:0	4	ret
op	23:12	0:0	4	=
call	23:14	23:74	4	open_url
arg	23:23	23:45	5	pls->parent->priv_data
water	23:23	0:0	6	pls
op	23:26	0:0	6	->
water	23:28	0:0	6	parent
op	23:34	0:0	6	->
water	23:36	0:0	6	priv_data
arg	23:47	23:58	5	&pls->input
op	23:47	0:0	6	&
water	23:48	0:0	6	pls
op	23:51	0:0	6	->
water	23:53	0:0	6	input
arg	23:60	23:68	5	seg->url
water	23:60	0:0	6	seg
op	23:63	0:0	6	->
water	23:65	0:0	6	url
arg	23:70	23:74	5	opts
water	23:70	0:0	6	opts
water	23:75	0:0	4	;
water	24:4	0:0	4	}
else	24:6	60:4	2
stmts	24:11	60:4	3	
if	24:11	60:4	4	(seg -> key_type == KEY_AES_128)
cond	24:15	24:32	5	seg -> key_type == KEY_AES_128
water	24:15	0:0	6	seg
op	24:18	0:0	6	->
water	24:20	0:0	6	key_type
op	24:29	0:0	6	==
water	24:32	0:0	6	KEY_AES_128
stmts	24:45	60:4	5	
water	24:45	0:0	6	{
decl	26:8	26:47	6	char	iv[33]
water	26:19	0:0	6	,
decl	26:8	26:47	6	char	key[33]
water	26:28	0:0	6	,
decl	26:8	26:47	6	char	url[MAX_URL_SIZE]
if	27:8	43:8	6	(strcmp (seg -> key ,pls -> key_url ))
cond	27:12	27:41	7	strcmp (seg -> key ,pls -> key_url )
call	27:12	27:41	8	strcmp
arg	27:19	27:27	9	seg->key
water	27:19	0:0	10	seg
op	27:22	0:0	10	->
water	27:24	0:0	10	key
arg	27:29	27:41	9	pls->key_url
water	27:29	0:0	10	pls
op	27:32	0:0	10	->
water	27:34	0:0	10	key_url
stmts	27:44	43:8	7	
water	27:44	0:0	8	{
decl	28:12	28:26	8	URLContext	*uc
if	29:12	38:12	8	(open_url (pls -> parent -> priv_data ,& uc ,seg -> key ,opts2 ) == 0)
cond	29:16	29:74	9	open_url (pls -> parent -> priv_data ,& uc ,seg -> key ,opts2 ) == 0
call	29:16	29:69	10	open_url
arg	29:25	29:47	11	pls->parent->priv_data
water	29:25	0:0	12	pls
op	29:28	0:0	12	->
water	29:30	0:0	12	parent
op	29:36	0:0	12	->
water	29:38	0:0	12	priv_data
arg	29:49	29:52	11	&uc
op	29:49	0:0	12	&
water	29:50	0:0	12	uc
arg	29:54	29:62	11	seg->key
water	29:54	0:0	12	seg
op	29:57	0:0	12	->
water	29:59	0:0	12	key
arg	29:64	29:69	11	opts2
water	29:64	0:0	12	opts2
op	29:71	0:0	10	==
water	29:74	0:0	10	0
stmts	29:77	38:12	9	
water	29:77	0:0	10	{
if	30:16	34:16	10	(ffurl_read_complete (uc ,pls -> key ,sizeof ( pls -> key ) ) != sizeof ( pls -> key ))
cond	30:20	31:38	11	ffurl_read_complete (uc ,pls -> key ,sizeof ( pls -> key ) ) != sizeof ( pls -> key )
call	30:20	30:70	12	ffurl_read_complete
arg	30:40	30:42	13	uc
water	30:40	0:0	14	uc
arg	30:44	30:52	13	pls->key
water	30:44	0:0	14	pls
op	30:47	0:0	14	->
water	30:49	0:0	14	key
arg	30:54	30:70	13	sizeof(pls->key)
op	30:54	0:0	14	sizeof
water	30:60	0:0	14	(
water	30:61	0:0	14	pls
op	30:64	0:0	14	->
water	30:66	0:0	14	key
water	30:69	0:0	14	)
op	31:20	0:0	12	!=
op	31:23	0:0	12	sizeof
water	31:29	0:0	12	(
water	31:30	0:0	12	pls
op	31:33	0:0	12	->
water	31:35	0:0	12	key
water	31:38	0:0	12	)
stmts	31:41	34:16	11	
water	31:41	0:0	12	{
call	32:20	33:35	12	av_log
arg	32:27	32:31	13	NULL
water	32:27	0:0	14	NULL
arg	32:33	32:45	13	AV_LOG_ERROR
water	32:33	0:0	14	AV_LOG_ERROR
arg	32:47	32:77	13	"Unable to read key file %s\n"
water	32:47	0:0	14	"Unable to read key file %s\n"
arg	33:27	33:35	13	seg->key
water	33:27	0:0	14	seg
op	33:30	0:0	14	->
water	33:32	0:0	14	key
water	33:36	0:0	12	;
water	34:16	0:0	12	}
call	35:16	35:68	10	update_options
arg	35:31	35:42	11	&c->cookies
op	35:31	0:0	12	&
water	35:32	0:0	12	c
op	35:33	0:0	12	->
water	35:35	0:0	12	cookies
arg	35:44	35:53	11	"cookies"
water	35:44	0:0	12	"cookies"
arg	35:55	35:68	11	uc->priv_data
water	35:55	0:0	12	uc
op	35:57	0:0	12	->
water	35:59	0:0	12	priv_data
water	35:69	0:0	10	;
call	36:16	36:59	10	av_dict_set
arg	36:28	36:33	11	&opts
op	36:28	0:0	12	&
water	36:29	0:0	12	opts
arg	36:35	36:44	11	"cookies"
water	36:35	0:0	12	"cookies"
arg	36:46	36:56	11	c->cookies
water	36:46	0:0	12	c
op	36:47	0:0	12	->
water	36:49	0:0	12	cookies
arg	36:58	36:59	11	0
water	36:58	0:0	12	0
water	36:60	0:0	10	;
call	37:16	37:30	10	ffurl_close
arg	37:28	37:30	11	uc
water	37:28	0:0	12	uc
water	37:31	0:0	10	;
water	38:12	0:0	10	}
else	38:14	41:12	8
stmts	38:19	41:12	9	
water	38:19	0:0	10	{
call	39:16	40:31	10	av_log
arg	39:23	39:27	11	NULL
water	39:23	0:0	12	NULL
arg	39:29	39:41	11	AV_LOG_ERROR
water	39:29	0:0	12	AV_LOG_ERROR
arg	39:43	39:73	11	"Unable to open key file %s\n"
water	39:43	0:0	12	"Unable to open key file %s\n"
arg	40:23	40:31	11	seg->key
water	40:23	0:0	12	seg
op	40:26	0:0	12	->
water	40:28	0:0	12	key
water	40:32	0:0	10	;
water	41:12	0:0	10	}
call	42:12	42:67	8	av_strlcpy
arg	42:23	42:35	9	pls->key_url
water	42:23	0:0	10	pls
op	42:26	0:0	10	->
water	42:28	0:0	10	key_url
arg	42:37	42:45	9	seg->key
water	42:37	0:0	10	seg
op	42:40	0:0	10	->
water	42:42	0:0	10	key
arg	42:47	42:67	9	sizeof(pls->key_url)
op	42:47	0:0	10	sizeof
water	42:53	0:0	10	(
water	42:54	0:0	10	pls
op	42:57	0:0	10	->
water	42:59	0:0	10	key_url
water	42:66	0:0	10	)
water	42:68	0:0	8	;
water	43:8	0:0	8	}
call	44:8	44:54	6	ff_data_to_hex
arg	44:23	44:25	7	iv
water	44:23	0:0	8	iv
arg	44:27	44:34	7	seg->iv
water	44:27	0:0	8	seg
op	44:30	0:0	8	->
water	44:32	0:0	8	iv
arg	44:36	44:51	7	sizeof(seg->iv)
op	44:36	0:0	8	sizeof
water	44:42	0:0	8	(
water	44:43	0:0	8	seg
op	44:46	0:0	8	->
water	44:48	0:0	8	iv
water	44:50	0:0	8	)
arg	44:53	44:54	7	0
water	44:53	0:0	8	0
water	44:55	0:0	6	;
call	45:8	45:57	6	ff_data_to_hex
arg	45:23	45:26	7	key
water	45:23	0:0	8	key
arg	45:28	45:36	7	pls->key
water	45:28	0:0	8	pls
op	45:31	0:0	8	->
water	45:33	0:0	8	key
arg	45:38	45:54	7	sizeof(pls->key)
op	45:38	0:0	8	sizeof
water	45:44	0:0	8	(
water	45:45	0:0	8	pls
op	45:48	0:0	8	->
water	45:50	0:0	8	key
water	45:53	0:0	8	)
arg	45:56	45:57	7	0
water	45:56	0:0	8	0
water	45:58	0:0	6	;
water	46:8	0:0	6	iv
op	46:10	0:0	6	[
water	46:11	0:0	6	32
op	46:13	0:0	6	]
op	46:15	0:0	6	=
water	46:17	0:0	6	key
op	46:20	0:0	6	[
water	46:21	0:0	6	32
op	46:23	0:0	6	]
op	46:25	0:0	6	=
water	46:27	0:0	6	'\0'
water	46:31	0:0	6	;
if	47:8	48:61	6	(strstr (seg -> url ,"://" ))
cond	47:12	47:34	7	strstr (seg -> url ,"://" )
call	47:12	47:34	8	strstr
arg	47:19	47:27	9	seg->url
water	47:19	0:0	10	seg
op	47:22	0:0	10	->
water	47:24	0:0	10	url
arg	47:29	47:34	9	"://"
water	47:29	0:0	10	"://"
stmts	48:12	48:61	7	
call	48:12	48:60	8	snprintf
arg	48:21	48:24	9	url
water	48:21	0:0	10	url
arg	48:26	48:37	9	sizeof(url)
op	48:26	0:0	10	sizeof
water	48:32	0:0	10	(
water	48:33	0:0	10	url
water	48:36	0:0	10	)
arg	48:39	48:50	9	"crypto+%s"
water	48:39	0:0	10	"crypto+%s"
arg	48:52	48:60	9	seg->url
water	48:52	0:0	10	seg
op	48:55	0:0	10	->
water	48:57	0:0	10	url
water	48:61	0:0	8	;
else	49:8	50:61	6
stmts	50:12	50:61	7	
call	50:12	50:60	8	snprintf
arg	50:21	50:24	9	url
water	50:21	0:0	10	url
arg	50:26	50:37	9	sizeof(url)
op	50:26	0:0	10	sizeof
water	50:32	0:0	10	(
water	50:33	0:0	10	url
water	50:36	0:0	10	)
arg	50:39	50:50	9	"crypto:%s"
water	50:39	0:0	10	"crypto:%s"
arg	50:52	50:60	9	seg->url
water	50:52	0:0	10	seg
op	50:55	0:0	10	->
water	50:57	0:0	10	url
water	50:61	0:0	8	;
if	51:8	53:24	6	(( ret =ffurl_alloc (& pls -> input ,url ,AVIO_FLAG_READ ,& pls -> parent -> interrupt_callback ) ) < 0)
cond	51:12	52:68	7	( ret =ffurl_alloc (& pls -> input ,url ,AVIO_FLAG_READ ,& pls -> parent -> interrupt_callback ) ) < 0
water	51:12	0:0	8	(
water	51:13	0:0	8	ret
op	51:17	0:0	8	=
call	51:19	52:63	8	ffurl_alloc
arg	51:31	51:42	9	&pls->input
op	51:31	0:0	10	&
water	51:32	0:0	10	pls
op	51:35	0:0	10	->
water	51:37	0:0	10	input
arg	51:44	51:47	9	url
water	51:44	0:0	10	url
arg	51:49	51:63	9	AVIO_FLAG_READ
water	51:49	0:0	10	AVIO_FLAG_READ
arg	52:31	52:63	9	&pls->parent->interrupt_callback
op	52:31	0:0	10	&
water	52:32	0:0	10	pls
op	52:35	0:0	10	->
water	52:37	0:0	10	parent
op	52:43	0:0	10	->
water	52:45	0:0	10	interrupt_callback
water	52:64	0:0	8	)
op	52:66	0:0	8	<
water	52:68	0:0	8	0
stmts	53:12	53:24	7	
goto	53:12	53:24	8	cleanup
water	53:17	0:0	9	cleanup
call	54:8	54:55	6	av_opt_set
arg	54:19	54:40	7	pls->input->priv_data
water	54:19	0:0	8	pls
op	54:22	0:0	8	->
water	54:24	0:0	8	input
op	54:29	0:0	8	->
water	54:31	0:0	8	priv_data
arg	54:42	54:47	7	"key"
water	54:42	0:0	8	"key"
arg	54:49	54:52	7	key
water	54:49	0:0	8	key
arg	54:54	54:55	7	0
water	54:54	0:0	8	0
water	54:56	0:0	6	;
call	55:8	55:53	6	av_opt_set
arg	55:19	55:40	7	pls->input->priv_data
water	55:19	0:0	8	pls
op	55:22	0:0	8	->
water	55:24	0:0	8	input
op	55:29	0:0	8	->
water	55:31	0:0	8	priv_data
arg	55:42	55:46	7	"iv"
water	55:42	0:0	8	"iv"
arg	55:48	55:50	7	iv
water	55:48	0:0	8	iv
arg	55:52	55:53	7	0
water	55:52	0:0	8	0
water	55:54	0:0	6	;
if	56:8	58:8	6	(( ret =url_connect (pls ,c -> avio_opts ,opts ) ) < 0)
cond	56:12	56:59	7	( ret =url_connect (pls ,c -> avio_opts ,opts ) ) < 0
water	56:12	0:0	8	(
water	56:13	0:0	8	ret
op	56:17	0:0	8	=
call	56:19	56:54	8	url_connect
arg	56:31	56:34	9	pls
water	56:31	0:0	10	pls
arg	56:36	56:48	9	c->avio_opts
water	56:36	0:0	10	c
op	56:37	0:0	10	->
water	56:39	0:0	10	avio_opts
arg	56:50	56:54	9	opts
water	56:50	0:0	10	opts
water	56:55	0:0	8	)
op	56:57	0:0	8	<
water	56:59	0:0	8	0
stmts	56:62	58:8	7	
water	56:62	0:0	8	{
goto	57:12	57:24	8	cleanup
water	57:17	0:0	9	cleanup
water	58:8	0:0	8	}
water	59:8	0:0	6	ret
op	59:12	0:0	6	=
water	59:14	0:0	6	0
water	59:15	0:0	6	;
water	60:4	0:0	6	}
else	60:6	64:4	2
stmts	60:11	64:4	3	
if	60:11	64:4	4	(seg -> key_type == KEY_SAMPLE_AES)
cond	60:15	60:32	5	seg -> key_type == KEY_SAMPLE_AES
water	60:15	0:0	6	seg
op	60:18	0:0	6	->
water	60:20	0:0	6	key_type
op	60:29	0:0	6	==
water	60:32	0:0	6	KEY_SAMPLE_AES
stmts	60:48	64:4	5	
water	60:48	0:0	6	{
call	61:8	62:61	6	av_log
arg	61:15	61:26	7	pls->parent
water	61:15	0:0	8	pls
op	61:18	0:0	8	->
water	61:20	0:0	8	parent
arg	61:28	61:40	7	AV_LOG_ERROR
water	61:28	0:0	8	AV_LOG_ERROR
arg	62:15	62:61	7	"SAMPLE-AES encryption is not supported yet\n"
water	62:15	0:0	8	"SAMPLE-AES encryption is not supported yet\n"
water	62:62	0:0	6	;
water	63:8	0:0	6	ret
op	63:12	0:0	6	=
water	63:14	0:0	6	AVERROR_PATCHWELCOME
water	63:34	0:0	6	;
water	64:4	0:0	6	}
else	65:4	66:27	2
stmts	66:6	66:27	3	
water	66:6	0:0	4	ret
op	66:10	0:0	4	=
call	66:12	66:26	4	AVERROR
arg	66:20	66:26	5	ENOSYS
water	66:20	0:0	6	ENOSYS
water	66:27	0:0	4	;
if	70:4	78:4	2	(ret == 0 && seg -> key_type == KEY_NONE)
cond	70:8	70:37	3	ret == 0 && seg -> key_type == KEY_NONE
water	70:8	0:0	4	ret
op	70:12	0:0	4	==
water	70:15	0:0	4	0
op	70:17	0:0	4	&&
water	70:20	0:0	4	seg
op	70:23	0:0	4	->
water	70:25	0:0	4	key_type
op	70:34	0:0	4	==
water	70:37	0:0	4	KEY_NONE
stmts	70:47	78:4	3	
water	70:47	0:0	4	{
decl	71:8	71:71	4	int	seekret
op	71:20	0:0	4	=
call	71:22	71:70	5	ffurl_seek
arg	71:33	71:43	6	pls->input
water	71:33	0:0	7	pls
op	71:36	0:0	7	->
water	71:38	0:0	7	input
arg	71:45	71:60	6	seg->url_offset
water	71:45	0:0	7	seg
op	71:48	0:0	7	->
water	71:50	0:0	7	url_offset
arg	71:62	71:70	6	SEEK_SET
water	71:62	0:0	7	SEEK_SET
if	72:8	77:8	4	(seekret < 0)
cond	72:12	72:22	5	seekret < 0
water	72:12	0:0	6	seekret
op	72:20	0:0	6	<
water	72:22	0:0	6	0
stmts	72:25	77:8	5	
water	72:25	0:0	6	{
call	73:12	73:131	6	av_log
arg	73:19	73:30	7	pls->parent
water	73:19	0:0	8	pls
op	73:22	0:0	8	->
water	73:24	0:0	8	parent
arg	73:32	73:44	7	AV_LOG_ERROR
water	73:32	0:0	8	AV_LOG_ERROR
arg	73:46	73:104	7	"Unable to seek to offset %"PRId64" of HLS segment '%s'\n"
water	73:46	0:0	8	"Unable to seek to offset %"
water	73:74	0:0	8	PRId64
water	73:80	0:0	8	" of HLS segment '%s'\n"
arg	73:106	73:121	7	seg->url_offset
water	73:106	0:0	8	seg
op	73:109	0:0	8	->
water	73:111	0:0	8	url_offset
arg	73:123	73:131	7	seg->url
water	73:123	0:0	8	seg
op	73:126	0:0	8	->
water	73:128	0:0	8	url
water	73:132	0:0	6	;
water	74:12	0:0	6	ret
op	74:16	0:0	6	=
water	74:18	0:0	6	seekret
water	74:25	0:0	6	;
call	75:12	75:34	6	ffurl_close
arg	75:24	75:34	7	pls->input
water	75:24	0:0	8	pls
op	75:27	0:0	8	->
water	75:29	0:0	8	input
water	75:35	0:0	6	;
water	76:12	0:0	6	pls
op	76:15	0:0	6	->
water	76:17	0:0	6	input
op	76:23	0:0	6	=
water	76:25	0:0	6	NULL
water	76:29	0:0	6	;
water	77:8	0:0	6	}
water	78:4	0:0	4	}
label	79:0	79:7	2	cleanup :
call	80:4	80:22	2	av_dict_free
arg	80:17	80:22	3	&opts
op	80:17	0:0	4	&
water	80:18	0:0	4	opts
water	80:23	0:0	2	;
call	81:4	81:23	2	av_dict_free
arg	81:17	81:23	3	&opts2
op	81:17	0:0	4	&
water	81:18	0:0	4	opts2
water	81:24	0:0	2	;
water	82:4	0:0	2	pls
op	82:7	0:0	2	->
water	82:9	0:0	2	cur_seg_offset
op	82:24	0:0	2	=
water	82:26	0:0	2	0
water	82:27	0:0	2	;
return	83:4	83:14	2	ret
water	83:11	0:0	3	ret
