func	1:0	32:0	0	static inline void	blur_power
params	1:29	0:0	1	
param	1:30	1:42	2	uint8_t *	dst
param	1:44	1:56	2	int	dst_step
param	1:58	1:76	2	const uint8_t *	src
param	1:78	1:90	2	int	src_step
param	2:30	2:37	2	int	len
param	2:39	2:49	2	int	radius
param	2:51	2:60	2	int	power
param	2:62	2:78	2	uint8_t *	temp[2]
param	2:80	2:91	2	int	pixsize
stmnts	0:0	31:4	1	
decl	4:4	4:38	2	uint8_t	*a
op	4:15	0:0	2	=
water	4:17	0:0	2	temp
op	4:21	0:0	2	[
water	4:22	0:0	2	0
op	4:23	0:0	2	]
water	4:24	0:0	2	,
decl	4:4	4:38	2	uint8_t	*b
op	4:29	0:0	2	=
water	4:31	0:0	2	temp
op	4:35	0:0	2	[
water	4:36	0:0	2	1
op	4:37	0:0	2	]
if	5:4	23:4	2	(radius && power)
cond	5:8	5:18	3	radius && power
water	5:8	0:0	4	radius
op	5:15	0:0	4	&&
water	5:18	0:0	4	power
stmts	5:25	23:4	3	
water	5:25	0:0	4	{
call	6:8	6:60	4	blur
arg	6:13	6:14	5	a
water	6:13	0:0	6	a
arg	6:16	6:23	5	pixsize
water	6:16	0:0	6	pixsize
arg	6:25	6:28	5	src
water	6:25	0:0	6	src
arg	6:30	6:38	5	src_step
water	6:30	0:0	6	src_step
arg	6:40	6:43	5	len
water	6:40	0:0	6	len
arg	6:45	6:51	5	radius
water	6:45	0:0	6	radius
arg	6:53	6:60	5	pixsize
water	6:53	0:0	6	pixsize
water	6:61	0:0	4	;
for	7:8	11:8	4	(;power > 2;power --)
forinit	7:13	7:13	5	;
water	7:13	0:0	6	;
cond	7:15	7:23	5	power > 2
water	7:15	0:0	6	power
op	7:21	0:0	6	>
water	7:23	0:0	6	2
forexpr	7:26	7:31	5	power --
water	7:26	0:0	6	power
op	7:31	0:0	6	--
stmts	7:35	11:8	5	
water	7:35	0:0	6	{
decl	8:12	8:22	6	uint8_t	*c
call	9:12	9:61	6	blur
arg	9:17	9:18	7	b
water	9:17	0:0	8	b
arg	9:20	9:27	7	pixsize
water	9:20	0:0	8	pixsize
arg	9:29	9:30	7	a
water	9:29	0:0	8	a
arg	9:32	9:39	7	pixsize
water	9:32	0:0	8	pixsize
arg	9:41	9:44	7	len
water	9:41	0:0	8	len
arg	9:46	9:52	7	radius
water	9:46	0:0	8	radius
arg	9:54	9:61	7	pixsize
water	9:54	0:0	8	pixsize
water	9:62	0:0	6	;
water	10:12	0:0	6	c
op	10:14	0:0	6	=
water	10:16	0:0	6	a
water	10:17	0:0	6	;
water	10:19	0:0	6	a
op	10:21	0:0	6	=
water	10:23	0:0	6	b
water	10:24	0:0	6	;
water	10:26	0:0	6	b
op	10:28	0:0	6	=
water	10:30	0:0	6	c
water	10:31	0:0	6	;
water	11:8	0:0	6	}
if	12:8	14:8	4	(power > 1)
cond	12:12	12:20	5	power > 1
water	12:12	0:0	6	power
op	12:18	0:0	6	>
water	12:20	0:0	6	1
stmts	12:23	14:8	5	
water	12:23	0:0	6	{
call	13:12	13:64	6	blur
arg	13:17	13:20	7	dst
water	13:17	0:0	8	dst
arg	13:22	13:30	7	dst_step
water	13:22	0:0	8	dst_step
arg	13:32	13:33	7	a
water	13:32	0:0	8	a
arg	13:35	13:42	7	pixsize
water	13:35	0:0	8	pixsize
arg	13:44	13:47	7	len
water	13:44	0:0	8	len
arg	13:49	13:55	7	radius
water	13:49	0:0	8	radius
arg	13:57	13:64	7	pixsize
water	13:57	0:0	8	pixsize
water	13:65	0:0	6	;
water	14:8	0:0	6	}
else	14:10	22:8	4
stmts	14:15	22:8	5	
water	14:15	0:0	6	{
decl	15:12	15:17	6	int	i
if	16:12	19:12	6	(pixsize == 1)
cond	16:16	16:27	7	pixsize == 1
water	16:16	0:0	8	pixsize
op	16:24	0:0	8	==
water	16:27	0:0	8	1
stmts	16:30	19:12	7	
water	16:30	0:0	8	{
for	17:16	18:42	8	(i = 0 ;i < len;i ++)
forinit	17:21	17:26	9	i = 0 ;
water	17:21	0:0	10	i
op	17:23	0:0	10	=
water	17:25	0:0	10	0
water	17:26	0:0	10	;
cond	17:28	17:32	9	i < len
water	17:28	0:0	10	i
op	17:30	0:0	10	<
water	17:32	0:0	10	len
forexpr	17:37	17:38	9	i ++
water	17:37	0:0	10	i
op	17:38	0:0	10	++
stmts	18:20	18:42	9	
water	18:20	0:0	10	dst
op	18:23	0:0	10	[
water	18:24	0:0	10	i
op	18:25	0:0	10	*
water	18:26	0:0	10	dst_step
op	18:34	0:0	10	]
op	18:36	0:0	10	=
water	18:38	0:0	10	a
op	18:39	0:0	10	[
water	18:40	0:0	10	i
op	18:41	0:0	10	]
water	18:42	0:0	10	;
water	19:12	0:0	8	}
else	19:14	21:70	6
stmts	20:16	21:70	7	
for	20:16	21:70	8	(i = 0 ;i < len;i ++)
forinit	20:21	20:26	9	i = 0 ;
water	20:21	0:0	10	i
op	20:23	0:0	10	=
water	20:25	0:0	10	0
water	20:26	0:0	10	;
cond	20:28	20:32	9	i < len
water	20:28	0:0	10	i
op	20:30	0:0	10	<
water	20:32	0:0	10	len
forexpr	20:37	20:38	9	i ++
water	20:37	0:0	10	i
op	20:38	0:0	10	++
stmts	21:20	21:70	9	
op	21:20	0:0	10	*
call	21:21	21:49	10	(uint16_t*)
arg	21:33	21:49	11	dst+i*dst_step
water	21:33	0:0	12	dst
op	21:37	0:0	12	+
water	21:39	0:0	12	i
op	21:40	0:0	12	*
water	21:41	0:0	12	dst_step
op	21:51	0:0	10	=
water	21:53	0:0	10	(
water	21:54	0:0	10	(
water	21:55	0:0	10	uint16_t
op	21:63	0:0	10	*
water	21:64	0:0	10	)
water	21:65	0:0	10	a
water	21:66	0:0	10	)
op	21:67	0:0	10	[
water	21:68	0:0	10	i
op	21:69	0:0	10	]
water	21:70	0:0	10	;
water	22:8	0:0	6	}
water	23:4	0:0	4	}
else	23:6	31:4	2
stmts	23:11	31:4	3	
water	23:11	0:0	4	{
decl	24:8	24:13	4	int	i
if	25:8	28:8	4	(pixsize == 1)
cond	25:12	25:23	5	pixsize == 1
water	25:12	0:0	6	pixsize
op	25:20	0:0	6	==
water	25:23	0:0	6	1
stmts	25:26	28:8	5	
water	25:26	0:0	6	{
for	26:12	27:49	6	(i = 0 ;i < len;i ++)
forinit	26:17	26:22	7	i = 0 ;
water	26:17	0:0	8	i
op	26:19	0:0	8	=
water	26:21	0:0	8	0
water	26:22	0:0	8	;
cond	26:24	26:28	7	i < len
water	26:24	0:0	8	i
op	26:26	0:0	8	<
water	26:28	0:0	8	len
forexpr	26:33	26:34	7	i ++
water	26:33	0:0	8	i
op	26:34	0:0	8	++
stmts	27:16	27:49	7	
water	27:16	0:0	8	dst
op	27:19	0:0	8	[
water	27:20	0:0	8	i
op	27:21	0:0	8	*
water	27:22	0:0	8	dst_step
op	27:30	0:0	8	]
op	27:32	0:0	8	=
water	27:34	0:0	8	src
op	27:37	0:0	8	[
water	27:38	0:0	8	i
op	27:39	0:0	8	*
water	27:40	0:0	8	src_step
op	27:48	0:0	8	]
water	27:49	0:0	8	;
water	28:8	0:0	6	}
else	28:10	30:79	4
stmts	29:12	30:79	5	
for	29:12	30:79	6	(i = 0 ;i < len;i ++)
forinit	29:17	29:22	7	i = 0 ;
water	29:17	0:0	8	i
op	29:19	0:0	8	=
water	29:21	0:0	8	0
water	29:22	0:0	8	;
cond	29:24	29:28	7	i < len
water	29:24	0:0	8	i
op	29:26	0:0	8	<
water	29:28	0:0	8	len
forexpr	29:33	29:34	7	i ++
water	29:33	0:0	8	i
op	29:34	0:0	8	++
stmts	30:16	30:79	7	
op	30:16	0:0	8	*
call	30:17	30:45	8	(uint16_t*)
arg	30:29	30:45	9	dst+i*dst_step
water	30:29	0:0	10	dst
op	30:33	0:0	10	+
water	30:35	0:0	10	i
op	30:36	0:0	10	*
water	30:37	0:0	10	dst_step
op	30:47	0:0	8	=
op	30:49	0:0	8	*
call	30:50	30:78	8	(uint16_t*)
arg	30:62	30:78	9	src+i*src_step
water	30:62	0:0	10	src
op	30:66	0:0	10	+
water	30:68	0:0	10	i
op	30:69	0:0	10	*
water	30:70	0:0	10	src_step
water	30:79	0:0	8	;
water	31:4	0:0	4	}
