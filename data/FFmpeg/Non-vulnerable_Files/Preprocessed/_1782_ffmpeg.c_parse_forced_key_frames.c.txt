func	1:0	50:0	0	static void	parse_forced_key_frames
params	1:35	0:0	1	
param	1:36	1:44	2	char *	kf
param	1:46	1:63	2	OutputStream *	ost
param	2:36	2:57	2	AVCodecContext *	avctx
stmnts	0:0	49:30	1	
decl	4:4	4:11	2	char	*p
decl	5:4	5:33	2	int	n
op	5:10	0:0	2	=
water	5:12	0:0	2	1
water	5:13	0:0	2	,
decl	5:4	5:33	2	int	i
water	5:16	0:0	2	,
decl	5:4	5:33	2	int	size
water	5:22	0:0	2	,
decl	5:4	5:33	2	int	index
op	5:30	0:0	2	=
water	5:32	0:0	2	0
decl	6:4	6:19	2	int64_t	t
water	6:13	0:0	2	,
decl	6:4	6:19	2	int64_t	*pts
for	7:4	9:15	2	(p = kf ;* p;p ++)
forinit	7:9	7:15	3	p = kf ;
water	7:9	0:0	4	p
op	7:11	0:0	4	=
water	7:13	0:0	4	kf
water	7:15	0:0	4	;
cond	7:17	7:18	3	* p
op	7:17	0:0	4	*
water	7:18	0:0	4	p
forexpr	7:21	7:22	3	p ++
water	7:21	0:0	4	p
op	7:22	0:0	4	++
stmts	8:8	9:15	3	
if	8:8	9:15	4	(* p == ',')
cond	8:12	8:18	5	* p == ','
op	8:12	0:0	6	*
water	8:13	0:0	6	p
op	8:15	0:0	6	==
water	8:18	0:0	6	','
stmts	9:12	9:15	5	
water	9:12	0:0	6	n
op	9:13	0:0	6	++
water	9:15	0:0	6	;
water	10:4	0:0	2	size
op	10:9	0:0	2	=
water	10:11	0:0	2	n
water	10:12	0:0	2	;
water	11:4	0:0	2	pts
op	11:8	0:0	2	=
call	11:10	11:44	2	av_malloc_array
arg	11:26	11:30	3	size
water	11:26	0:0	4	size
arg	11:32	11:44	3	sizeof(*pts)
op	11:32	0:0	4	sizeof
water	11:38	0:0	4	(
op	11:39	0:0	4	*
water	11:40	0:0	4	pts
water	11:43	0:0	4	)
water	11:45	0:0	2	;
if	12:4	15:4	2	(! pts)
cond	12:8	12:9	3	! pts
op	12:8	0:0	4	!
water	12:9	0:0	4	pts
stmts	12:14	15:4	3	
water	12:14	0:0	4	{
call	13:8	13:82	4	av_log
arg	13:15	13:19	5	NULL
water	13:15	0:0	6	NULL
arg	13:21	13:33	5	AV_LOG_FATAL
water	13:21	0:0	6	AV_LOG_FATAL
arg	13:35	13:82	5	"Could not allocate forced key frames array.\n"
water	13:35	0:0	6	"Could not allocate forced key frames array.\n"
water	13:83	0:0	4	;
call	14:8	14:22	4	exit_program
arg	14:21	14:22	5	1
water	14:21	0:0	6	1
water	14:23	0:0	4	;
water	15:4	0:0	4	}
water	16:4	0:0	2	p
op	16:6	0:0	2	=
water	16:8	0:0	2	kf
water	16:10	0:0	2	;
for	17:4	45:4	2	(i = 0 ;i < n;i ++)
forinit	17:9	17:14	3	i = 0 ;
water	17:9	0:0	4	i
op	17:11	0:0	4	=
water	17:13	0:0	4	0
water	17:14	0:0	4	;
cond	17:16	17:20	3	i < n
water	17:16	0:0	4	i
op	17:18	0:0	4	<
water	17:20	0:0	4	n
forexpr	17:23	17:24	3	i ++
water	17:23	0:0	4	i
op	17:24	0:0	4	++
stmts	17:28	45:4	3	
water	17:28	0:0	4	{
decl	18:8	18:35	4	char	*next
op	18:19	0:0	4	=
call	18:21	18:34	5	strchr
arg	18:28	18:29	6	p
water	18:28	0:0	7	p
arg	18:31	18:34	6	','
water	18:31	0:0	7	','
if	19:8	20:23	4	(next)
cond	19:12	19:12	5	next
water	19:12	0:0	6	next
stmts	20:12	20:23	5	
op	20:12	0:0	6	*
water	20:13	0:0	6	next
op	20:17	0:0	6	++
op	20:20	0:0	6	=
water	20:22	0:0	6	0
water	20:23	0:0	6	;
if	21:8	39:8	4	(!memcmp (p ,"chapters" ,8 ))
cond	21:12	21:36	5	!memcmp (p ,"chapters" ,8 )
op	21:12	0:0	6	!
call	21:13	21:36	6	memcmp
arg	21:20	21:21	7	p
water	21:20	0:0	8	p
arg	21:23	21:33	7	"chapters"
water	21:23	0:0	8	"chapters"
arg	21:35	21:36	7	8
water	21:35	0:0	8	8
stmts	21:39	39:8	5	
water	21:39	0:0	6	{
decl	22:12	22:69	6	AVFormatContext	*avf
op	22:33	0:0	6	=
water	22:35	0:0	6	output_files
op	22:47	0:0	6	[
water	22:48	0:0	6	ost
op	22:51	0:0	6	->
water	22:53	0:0	6	file_index
op	22:63	0:0	6	]
op	22:64	0:0	6	->
water	22:66	0:0	6	ctx
decl	23:12	23:17	6	int	j
if	24:12	30:12	6	(avf -> nb_chapters > INT_MAX - size || ! ( pts =av_realloc_f (pts ,size += avf -> nb_chapters - 1 ,sizeof ( * pts ) ) ))
cond	24:16	26:50	7	avf -> nb_chapters > INT_MAX - size || ! ( pts =av_realloc_f (pts ,size += avf -> nb_chapters - 1 ,sizeof ( * pts ) ) )
water	24:16	0:0	8	avf
op	24:19	0:0	8	->
water	24:21	0:0	8	nb_chapters
op	24:33	0:0	8	>
water	24:35	0:0	8	INT_MAX
op	24:43	0:0	8	-
water	24:45	0:0	8	size
op	24:50	0:0	8	||
op	25:16	0:0	8	!
water	25:17	0:0	8	(
water	25:18	0:0	8	pts
op	25:22	0:0	8	=
call	25:24	26:49	8	av_realloc_f
arg	25:37	25:40	9	pts
water	25:37	0:0	10	pts
arg	25:42	25:70	9	size+=avf->nb_chapters-1
water	25:42	0:0	10	size
op	25:47	0:0	10	+=
water	25:50	0:0	10	avf
op	25:53	0:0	10	->
water	25:55	0:0	10	nb_chapters
op	25:67	0:0	10	-
water	25:69	0:0	10	1
arg	26:37	26:49	9	sizeof(*pts)
op	26:37	0:0	10	sizeof
water	26:43	0:0	10	(
op	26:44	0:0	10	*
water	26:45	0:0	10	pts
water	26:48	0:0	10	)
water	26:50	0:0	8	)
stmts	26:53	30:12	7	
water	26:53	0:0	8	{
call	27:16	28:70	8	av_log
arg	27:23	27:27	9	NULL
water	27:23	0:0	10	NULL
arg	27:29	27:41	9	AV_LOG_FATAL
water	27:29	0:0	10	AV_LOG_FATAL
arg	28:23	28:70	9	"Could not allocate forced key frames array.\n"
water	28:23	0:0	10	"Could not allocate forced key frames array.\n"
water	28:71	0:0	8	;
call	29:16	29:30	8	exit_program
arg	29:29	29:30	9	1
water	29:29	0:0	10	1
water	29:31	0:0	8	;
water	30:12	0:0	8	}
water	31:12	0:0	6	t
op	31:14	0:0	6	=
water	31:16	0:0	6	p
op	31:17	0:0	6	[
water	31:18	0:0	6	8
op	31:19	0:0	6	]
water	31:21	0:0	6	?
call	31:23	31:69	6	parse_time_or_die
arg	31:41	31:59	7	"force_key_frames"
water	31:41	0:0	8	"force_key_frames"
arg	31:61	31:66	7	p+8
water	31:61	0:0	8	p
op	31:63	0:0	8	+
water	31:65	0:0	8	8
arg	31:68	31:69	7	1
water	31:68	0:0	8	1
water	31:71	0:0	6	:
water	31:73	0:0	6	0
water	31:74	0:0	6	;
water	32:12	0:0	6	t
op	32:14	0:0	6	=
call	32:16	32:64	6	av_rescale_q
arg	32:29	32:30	7	t
water	32:29	0:0	8	t
arg	32:32	32:46	7	AV_TIME_BASE_Q
water	32:32	0:0	8	AV_TIME_BASE_Q
arg	32:48	32:64	7	avctx->time_base
water	32:48	0:0	8	avctx
op	32:53	0:0	8	->
water	32:55	0:0	8	time_base
water	32:65	0:0	6	;
for	33:12	38:12	6	(j = 0 ;j < avf -> nb_chapters;j ++)
forinit	33:17	33:22	7	j = 0 ;
water	33:17	0:0	8	j
op	33:19	0:0	8	=
water	33:21	0:0	8	0
water	33:22	0:0	8	;
cond	33:24	33:33	7	j < avf -> nb_chapters
water	33:24	0:0	8	j
op	33:26	0:0	8	<
water	33:28	0:0	8	avf
op	33:31	0:0	8	->
water	33:33	0:0	8	nb_chapters
forexpr	33:46	33:47	7	j ++
water	33:46	0:0	8	j
op	33:47	0:0	8	++
stmts	33:51	38:12	7	
water	33:51	0:0	8	{
decl	34:16	34:47	8	AVChapter	*c
op	34:29	0:0	8	=
water	34:31	0:0	8	avf
op	34:34	0:0	8	->
water	34:36	0:0	8	chapters
op	34:44	0:0	8	[
water	34:45	0:0	8	j
op	34:46	0:0	8	]
call	35:16	35:39	8	av_assert1
arg	35:27	35:39	9	index<size
water	35:27	0:0	10	index
op	35:33	0:0	10	<
water	35:35	0:0	10	size
water	35:40	0:0	8	;
water	36:16	0:0	8	pts
op	36:19	0:0	8	[
water	36:20	0:0	8	index
op	36:25	0:0	8	++
op	36:27	0:0	8	]
op	36:29	0:0	8	=
call	36:31	37:60	8	av_rescale_q
arg	36:44	36:52	9	c->start
water	36:44	0:0	10	c
op	36:45	0:0	10	->
water	36:47	0:0	10	start
arg	36:54	36:66	9	c->time_base
water	36:54	0:0	10	c
op	36:55	0:0	10	->
water	36:57	0:0	10	time_base
arg	37:44	37:60	9	avctx->time_base
water	37:44	0:0	10	avctx
op	37:49	0:0	10	->
water	37:51	0:0	10	time_base
op	37:62	0:0	8	+
water	37:64	0:0	8	t
water	37:65	0:0	8	;
water	38:12	0:0	8	}
water	39:8	0:0	6	}
else	39:10	43:8	4
stmts	39:15	43:8	5	
water	39:15	0:0	6	{
water	40:12	0:0	6	t
op	40:14	0:0	6	=
call	40:16	40:58	6	parse_time_or_die
arg	40:34	40:52	7	"force_key_frames"
water	40:34	0:0	8	"force_key_frames"
arg	40:54	40:55	7	p
water	40:54	0:0	8	p
arg	40:57	40:58	7	1
water	40:57	0:0	8	1
water	40:59	0:0	6	;
call	41:12	41:35	6	av_assert1
arg	41:23	41:35	7	index<size
water	41:23	0:0	8	index
op	41:29	0:0	8	<
water	41:31	0:0	8	size
water	41:36	0:0	6	;
water	42:12	0:0	6	pts
op	42:15	0:0	6	[
water	42:16	0:0	6	index
op	42:21	0:0	6	++
op	42:23	0:0	6	]
op	42:25	0:0	6	=
call	42:27	42:75	6	av_rescale_q
arg	42:40	42:41	7	t
water	42:40	0:0	8	t
arg	42:43	42:57	7	AV_TIME_BASE_Q
water	42:43	0:0	8	AV_TIME_BASE_Q
arg	42:59	42:75	7	avctx->time_base
water	42:59	0:0	8	avctx
op	42:64	0:0	8	->
water	42:66	0:0	8	time_base
water	42:76	0:0	6	;
water	43:8	0:0	6	}
water	44:8	0:0	4	p
op	44:10	0:0	4	=
water	44:12	0:0	4	next
water	44:16	0:0	4	;
water	45:4	0:0	4	}
call	46:4	46:28	2	av_assert0
arg	46:15	46:28	3	index==size
water	46:15	0:0	4	index
op	46:21	0:0	4	==
water	46:24	0:0	4	size
water	46:29	0:0	2	;
call	47:4	47:48	2	qsort
arg	47:10	47:13	3	pts
water	47:10	0:0	4	pts
arg	47:15	47:19	3	size
water	47:15	0:0	4	size
arg	47:21	47:33	3	sizeof(*pts)
op	47:21	0:0	4	sizeof
water	47:27	0:0	4	(
op	47:28	0:0	4	*
water	47:29	0:0	4	pts
water	47:32	0:0	4	)
arg	47:35	47:48	3	compare_int64
water	47:35	0:0	4	compare_int64
water	47:49	0:0	2	;
water	48:4	0:0	2	ost
op	48:7	0:0	2	->
water	48:9	0:0	2	forced_kf_count
op	48:25	0:0	2	=
water	48:27	0:0	2	size
water	48:31	0:0	2	;
water	49:4	0:0	2	ost
op	49:7	0:0	2	->
water	49:9	0:0	2	forced_kf_pts
op	49:25	0:0	2	=
water	49:27	0:0	2	pts
water	49:30	0:0	2	;
