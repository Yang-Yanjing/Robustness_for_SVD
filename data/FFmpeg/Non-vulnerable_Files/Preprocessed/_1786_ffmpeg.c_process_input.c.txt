func	1:0	210:0	0	static int	process_input
params	1:24	0:0	1	
param	1:25	1:39	2	int	file_index
stmnts	0:0	209:12	1	
decl	3:4	3:46	2	InputFile	*ifile
op	3:21	0:0	2	=
water	3:23	0:0	2	input_files
op	3:34	0:0	2	[
water	3:35	0:0	2	file_index
op	3:45	0:0	2	]
decl	4:4	4:23	2	AVFormatContext	*is
decl	5:4	5:20	2	InputStream	*ist
decl	6:4	6:16	2	AVPacket	pkt
decl	7:4	7:17	2	int	ret
water	7:11	0:0	2	,
decl	7:4	7:17	2	int	i
water	7:14	0:0	2	,
decl	7:4	7:17	2	int	j
decl	8:4	8:20	2	int64_t	duration
decl	9:4	9:19	2	int64_t	pkt_dts
water	10:4	0:0	2	is
op	10:8	0:0	2	=
water	10:10	0:0	2	ifile
op	10:15	0:0	2	->
water	10:17	0:0	2	ctx
water	10:20	0:0	2	;
water	11:4	0:0	2	ret
op	11:8	0:0	2	=
call	11:10	11:38	2	get_input_packet
arg	11:27	11:32	3	ifile
water	11:27	0:0	4	ifile
arg	11:34	11:38	3	&pkt
op	11:34	0:0	4	&
water	11:35	0:0	4	pkt
water	11:39	0:0	2	;
if	12:4	15:4	2	(ret ==AVERROR (EAGAIN ))
cond	12:8	12:29	3	ret ==AVERROR (EAGAIN )
water	12:8	0:0	4	ret
op	12:12	0:0	4	==
call	12:15	12:29	4	AVERROR
arg	12:23	12:29	5	EAGAIN
water	12:23	0:0	6	EAGAIN
stmts	12:32	15:4	3	
water	12:32	0:0	4	{
water	13:8	0:0	4	ifile
op	13:13	0:0	4	->
water	13:15	0:0	4	eagain
op	13:22	0:0	4	=
water	13:24	0:0	4	1
water	13:25	0:0	4	;
return	14:8	14:18	4	ret
water	14:15	0:0	5	ret
water	15:4	0:0	4	}
if	16:4	24:4	2	(ret < 0 && ifile -> loop)
cond	16:8	16:26	3	ret < 0 && ifile -> loop
water	16:8	0:0	4	ret
op	16:12	0:0	4	<
water	16:14	0:0	4	0
op	16:16	0:0	4	&&
water	16:19	0:0	4	ifile
op	16:24	0:0	4	->
water	16:26	0:0	4	loop
stmts	16:32	24:4	3	
water	16:32	0:0	4	{
if	17:8	18:22	4	(( ret =seek_to_start (ifile ,is ) ) < 0)
cond	17:12	17:47	5	( ret =seek_to_start (ifile ,is ) ) < 0
water	17:12	0:0	6	(
water	17:13	0:0	6	ret
op	17:17	0:0	6	=
call	17:19	17:42	6	seek_to_start
arg	17:33	17:38	7	ifile
water	17:33	0:0	8	ifile
arg	17:40	17:42	7	is
water	17:40	0:0	8	is
water	17:43	0:0	6	)
op	17:45	0:0	6	<
water	17:47	0:0	6	0
stmts	18:12	18:22	5	
return	18:12	18:22	6	ret
water	18:19	0:0	7	ret
water	19:8	0:0	4	ret
op	19:12	0:0	4	=
call	19:14	19:42	4	get_input_packet
arg	19:31	19:36	5	ifile
water	19:31	0:0	6	ifile
arg	19:38	19:42	5	&pkt
op	19:38	0:0	6	&
water	19:39	0:0	6	pkt
water	19:43	0:0	4	;
if	20:8	23:8	4	(ret ==AVERROR (EAGAIN ))
cond	20:12	20:33	5	ret ==AVERROR (EAGAIN )
water	20:12	0:0	6	ret
op	20:16	0:0	6	==
call	20:19	20:33	6	AVERROR
arg	20:27	20:33	7	EAGAIN
water	20:27	0:0	8	EAGAIN
stmts	20:36	23:8	5	
water	20:36	0:0	6	{
water	21:12	0:0	6	ifile
op	21:17	0:0	6	->
water	21:19	0:0	6	eagain
op	21:26	0:0	6	=
water	21:28	0:0	6	1
water	21:29	0:0	6	;
return	22:12	22:22	6	ret
water	22:19	0:0	7	ret
water	23:8	0:0	6	}
water	24:4	0:0	4	}
if	25:4	48:4	2	(ret < 0)
cond	25:8	25:14	3	ret < 0
water	25:8	0:0	4	ret
op	25:12	0:0	4	<
water	25:14	0:0	4	0
stmts	25:17	48:4	3	
water	25:17	0:0	4	{
if	26:8	30:8	4	(ret != AVERROR_EOF)
cond	26:12	26:19	5	ret != AVERROR_EOF
water	26:12	0:0	6	ret
op	26:16	0:0	6	!=
water	26:19	0:0	6	AVERROR_EOF
stmts	26:32	30:8	5	
water	26:32	0:0	6	{
call	27:12	27:41	6	print_error
arg	27:24	27:36	7	is->filename
water	27:24	0:0	8	is
op	27:26	0:0	8	->
water	27:28	0:0	8	filename
arg	27:38	27:41	7	ret
water	27:38	0:0	8	ret
water	27:42	0:0	6	;
if	28:12	29:31	6	(exit_on_error)
cond	28:16	28:16	7	exit_on_error
water	28:16	0:0	8	exit_on_error
stmts	29:16	29:31	7	
call	29:16	29:30	8	exit_program
arg	29:29	29:30	9	1
water	29:29	0:0	10	1
water	29:31	0:0	8	;
water	30:8	0:0	6	}
for	31:8	45:8	4	(i = 0 ;i < ifile -> nb_streams;i ++)
forinit	31:13	31:18	5	i = 0 ;
water	31:13	0:0	6	i
op	31:15	0:0	6	=
water	31:17	0:0	6	0
water	31:18	0:0	6	;
cond	31:20	31:31	5	i < ifile -> nb_streams
water	31:20	0:0	6	i
op	31:22	0:0	6	<
water	31:24	0:0	6	ifile
op	31:29	0:0	6	->
water	31:31	0:0	6	nb_streams
forexpr	31:43	31:44	5	i ++
water	31:43	0:0	6	i
op	31:44	0:0	6	++
stmts	31:48	45:8	5	
water	31:48	0:0	6	{
water	32:12	0:0	6	ist
op	32:16	0:0	6	=
water	32:18	0:0	6	input_streams
op	32:31	0:0	6	[
water	32:32	0:0	6	ifile
op	32:37	0:0	6	->
water	32:39	0:0	6	ist_index
op	32:49	0:0	6	+
water	32:51	0:0	6	i
op	32:52	0:0	6	]
water	32:53	0:0	6	;
if	33:12	37:12	6	(ist -> decoding_needed)
cond	33:16	33:21	7	ist -> decoding_needed
water	33:16	0:0	8	ist
op	33:19	0:0	8	->
water	33:21	0:0	8	decoding_needed
stmts	33:38	37:12	7	
water	33:38	0:0	8	{
water	34:16	0:0	8	ret
op	34:20	0:0	8	=
call	34:22	34:55	8	process_input_packet
arg	34:43	34:46	9	ist
water	34:43	0:0	10	ist
arg	34:48	34:52	9	NULL
water	34:48	0:0	10	NULL
arg	34:54	34:55	9	0
water	34:54	0:0	10	0
water	34:56	0:0	8	;
if	35:16	36:28	8	(ret > 0)
cond	35:20	35:24	9	ret > 0
water	35:20	0:0	10	ret
op	35:23	0:0	10	>
water	35:24	0:0	10	0
stmts	36:20	36:28	9	
return	36:20	36:28	10	0
water	36:27	0:0	11	0
water	37:12	0:0	8	}
for	39:12	44:12	6	(j = 0 ;j < nb_output_streams;j ++)
forinit	39:17	39:22	7	j = 0 ;
water	39:17	0:0	8	j
op	39:19	0:0	8	=
water	39:21	0:0	8	0
water	39:22	0:0	8	;
cond	39:24	39:28	7	j < nb_output_streams
water	39:24	0:0	8	j
op	39:26	0:0	8	<
water	39:28	0:0	8	nb_output_streams
forexpr	39:47	39:48	7	j ++
water	39:47	0:0	8	j
op	39:48	0:0	8	++
stmts	39:52	44:12	7	
water	39:52	0:0	8	{
decl	40:16	40:53	8	OutputStream	*ost
op	40:34	0:0	8	=
water	40:36	0:0	8	output_streams
op	40:50	0:0	8	[
water	40:51	0:0	8	j
op	40:52	0:0	8	]
if	41:16	43:45	8	(ost -> source_index == ifile -> ist_index + i && ( ost -> stream_copy || ost -> enc -> type == AVMEDIA_TYPE_SUBTITLE ))
cond	41:20	42:80	9	ost -> source_index == ifile -> ist_index + i && ( ost -> stream_copy || ost -> enc -> type == AVMEDIA_TYPE_SUBTITLE )
water	41:20	0:0	10	ost
op	41:23	0:0	10	->
water	41:25	0:0	10	source_index
op	41:38	0:0	10	==
water	41:41	0:0	10	ifile
op	41:46	0:0	10	->
water	41:48	0:0	10	ist_index
op	41:58	0:0	10	+
water	41:60	0:0	10	i
op	41:62	0:0	10	&&
water	42:20	0:0	10	(
water	42:21	0:0	10	ost
op	42:24	0:0	10	->
water	42:26	0:0	10	stream_copy
op	42:38	0:0	10	||
water	42:41	0:0	10	ost
op	42:44	0:0	10	->
water	42:46	0:0	10	enc
op	42:49	0:0	10	->
water	42:51	0:0	10	type
op	42:56	0:0	10	==
water	42:59	0:0	10	AVMEDIA_TYPE_SUBTITLE
water	42:80	0:0	10	)
stmts	43:20	43:45	9	
call	43:20	43:44	10	finish_output_stream
arg	43:41	43:44	11	ost
water	43:41	0:0	12	ost
water	43:45	0:0	10	;
water	44:12	0:0	8	}
water	45:8	0:0	6	}
water	46:8	0:0	4	ifile
op	46:13	0:0	4	->
water	46:15	0:0	4	eof_reached
op	46:27	0:0	4	=
water	46:29	0:0	4	1
water	46:30	0:0	4	;
return	47:8	47:30	4	AVERROR(EAGAIN)
call	47:15	47:29	5	AVERROR
arg	47:23	47:29	6	EAGAIN
water	47:23	0:0	7	EAGAIN
water	48:4	0:0	4	}
call	49:4	49:17	2	reset_eagain
water	49:18	0:0	2	;
if	50:4	53:4	2	(do_pkt_dump)
cond	50:8	50:8	3	do_pkt_dump
water	50:8	0:0	4	do_pkt_dump
stmts	50:21	53:4	3	
water	50:21	0:0	4	{
call	51:8	52:54	4	av_pkt_dump_log2
arg	51:25	51:29	5	NULL
water	51:25	0:0	6	NULL
arg	51:31	51:42	5	AV_LOG_INFO
water	51:31	0:0	6	AV_LOG_INFO
arg	51:44	51:48	5	&pkt
op	51:44	0:0	6	&
water	51:45	0:0	6	pkt
arg	51:50	51:61	5	do_hex_dump
water	51:50	0:0	6	do_hex_dump
arg	52:25	52:54	5	is->streams[pkt.stream_index]
water	52:25	0:0	6	is
op	52:27	0:0	6	->
water	52:29	0:0	6	streams
op	52:36	0:0	6	[
water	52:37	0:0	6	pkt
op	52:40	0:0	6	.
water	52:41	0:0	6	stream_index
op	52:53	0:0	6	]
water	52:55	0:0	4	;
water	53:4	0:0	4	}
if	56:4	59:4	2	(pkt . stream_index >= ifile -> nb_streams)
cond	56:8	56:35	3	pkt . stream_index >= ifile -> nb_streams
water	56:8	0:0	4	pkt
op	56:11	0:0	4	.
water	56:12	0:0	4	stream_index
op	56:25	0:0	4	>=
water	56:28	0:0	4	ifile
op	56:33	0:0	4	->
water	56:35	0:0	4	nb_streams
stmts	56:47	59:4	3	
water	56:47	0:0	4	{
call	57:8	57:42	4	report_new_stream
arg	57:26	57:36	5	file_index
water	57:26	0:0	6	file_index
arg	57:38	57:42	5	&pkt
op	57:38	0:0	6	&
water	57:39	0:0	6	pkt
water	57:43	0:0	4	;
goto	58:8	58:27	4	discard_packet
water	58:13	0:0	5	discard_packet
water	59:4	0:0	4	}
water	60:4	0:0	2	ist
op	60:8	0:0	2	=
water	60:10	0:0	2	input_streams
op	60:23	0:0	2	[
water	60:24	0:0	2	ifile
op	60:29	0:0	2	->
water	60:31	0:0	2	ist_index
op	60:41	0:0	2	+
water	60:43	0:0	2	pkt
op	60:46	0:0	2	.
water	60:47	0:0	2	stream_index
op	60:59	0:0	2	]
water	60:60	0:0	2	;
water	61:4	0:0	2	ist
op	61:7	0:0	2	->
water	61:9	0:0	2	data_size
op	61:19	0:0	2	+=
water	61:22	0:0	2	pkt
op	61:25	0:0	2	.
water	61:26	0:0	2	size
water	61:30	0:0	2	;
water	62:4	0:0	2	ist
op	62:7	0:0	2	->
water	62:9	0:0	2	nb_packets
op	62:19	0:0	2	++
water	62:21	0:0	2	;
if	63:4	64:27	2	(ist -> discard)
cond	63:8	63:13	3	ist -> discard
water	63:8	0:0	4	ist
op	63:11	0:0	4	->
water	63:13	0:0	4	discard
stmts	64:8	64:27	3	
goto	64:8	64:27	4	discard_packet
water	64:13	0:0	5	discard_packet
if	65:4	68:4	2	(exit_on_error && ( pkt . flags & AV_PKT_FLAG_CORRUPT ))
cond	65:8	65:57	3	exit_on_error && ( pkt . flags & AV_PKT_FLAG_CORRUPT )
water	65:8	0:0	4	exit_on_error
op	65:22	0:0	4	&&
water	65:25	0:0	4	(
water	65:26	0:0	4	pkt
op	65:29	0:0	4	.
water	65:30	0:0	4	flags
op	65:36	0:0	4	&
water	65:38	0:0	4	AV_PKT_FLAG_CORRUPT
water	65:57	0:0	4	)
stmts	65:60	68:4	3	
water	65:60	0:0	4	{
call	66:8	66:108	4	av_log
arg	66:15	66:19	5	NULL
water	66:15	0:0	6	NULL
arg	66:21	66:33	5	AV_LOG_FATAL
water	66:21	0:0	6	AV_LOG_FATAL
arg	66:35	66:76	5	"%s: corrupt input packet in stream %d\n"
water	66:35	0:0	6	"%s: corrupt input packet in stream %d\n"
arg	66:78	66:90	5	is->filename
water	66:78	0:0	6	is
op	66:80	0:0	6	->
water	66:82	0:0	6	filename
arg	66:92	66:108	5	pkt.stream_index
water	66:92	0:0	6	pkt
op	66:95	0:0	6	.
water	66:96	0:0	6	stream_index
water	66:109	0:0	4	;
call	67:8	67:22	4	exit_program
arg	67:21	67:22	5	1
water	67:21	0:0	6	1
water	67:23	0:0	4	;
water	68:4	0:0	4	}
if	69:4	79:4	2	(debug_ts)
cond	69:8	69:8	3	debug_ts
water	69:8	0:0	4	debug_ts
stmts	69:18	79:4	3	
water	69:18	0:0	4	{
call	70:8	78:86	4	av_log
arg	70:15	70:19	5	NULL
water	70:15	0:0	6	NULL
arg	70:21	70:32	5	AV_LOG_INFO
water	70:21	0:0	6	AV_LOG_INFO
arg	70:34	71:149	5	"demuxer -> ist_index:%d type:%s ""next_dts:%s next_dts_time:%s next_pts:%s next_pts_time:%s pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s off:%s off_time:%s\n"
water	70:34	0:0	6	"demuxer -> ist_index:%d type:%s "
water	71:15	0:0	6	"next_dts:%s next_dts_time:%s next_pts:%s next_pts_time:%s pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s off:%s off_time:%s\n"
arg	72:15	72:50	5	ifile->ist_index+pkt.stream_index
water	72:15	0:0	6	ifile
op	72:20	0:0	6	->
water	72:22	0:0	6	ist_index
op	72:32	0:0	6	+
water	72:34	0:0	6	pkt
op	72:37	0:0	6	.
water	72:38	0:0	6	stream_index
arg	72:52	72:102	5	av_get_media_type_string(ist->dec_ctx->codec_type)
call	72:52	72:101	6	av_get_media_type_string
arg	72:77	72:101	7	ist->dec_ctx->codec_type
water	72:77	0:0	8	ist
op	72:80	0:0	8	->
water	72:82	0:0	8	dec_ctx
op	72:89	0:0	8	->
water	72:91	0:0	8	codec_type
arg	73:15	73:39	5	av_ts2str(ist->next_dts)
call	73:15	73:38	6	av_ts2str
arg	73:25	73:38	7	ist->next_dts
water	73:25	0:0	8	ist
op	73:28	0:0	8	->
water	73:30	0:0	8	next_dts
arg	73:41	73:86	5	av_ts2timestr(ist->next_dts,&AV_TIME_BASE_Q)
call	73:41	73:85	6	av_ts2timestr
arg	73:55	73:68	7	ist->next_dts
water	73:55	0:0	8	ist
op	73:58	0:0	8	->
water	73:60	0:0	8	next_dts
arg	73:70	73:85	7	&AV_TIME_BASE_Q
op	73:70	0:0	8	&
water	73:71	0:0	8	AV_TIME_BASE_Q
arg	74:15	74:39	5	av_ts2str(ist->next_pts)
call	74:15	74:38	6	av_ts2str
arg	74:25	74:38	7	ist->next_pts
water	74:25	0:0	8	ist
op	74:28	0:0	8	->
water	74:30	0:0	8	next_pts
arg	74:41	74:86	5	av_ts2timestr(ist->next_pts,&AV_TIME_BASE_Q)
call	74:41	74:85	6	av_ts2timestr
arg	74:55	74:68	7	ist->next_pts
water	74:55	0:0	8	ist
op	74:58	0:0	8	->
water	74:60	0:0	8	next_pts
arg	74:70	74:85	7	&AV_TIME_BASE_Q
op	74:70	0:0	8	&
water	74:71	0:0	8	AV_TIME_BASE_Q
arg	75:15	75:33	5	av_ts2str(pkt.pts)
call	75:15	75:32	6	av_ts2str
arg	75:25	75:32	7	pkt.pts
water	75:25	0:0	8	pkt
op	75:28	0:0	8	.
water	75:29	0:0	8	pts
arg	75:35	75:78	5	av_ts2timestr(pkt.pts,&ist->st->time_base)
call	75:35	75:77	6	av_ts2timestr
arg	75:49	75:56	7	pkt.pts
water	75:49	0:0	8	pkt
op	75:52	0:0	8	.
water	75:53	0:0	8	pts
arg	75:58	75:77	7	&ist->st->time_base
op	75:58	0:0	8	&
water	75:59	0:0	8	ist
op	75:62	0:0	8	->
water	75:64	0:0	8	st
op	75:66	0:0	8	->
water	75:68	0:0	8	time_base
arg	76:15	76:33	5	av_ts2str(pkt.dts)
call	76:15	76:32	6	av_ts2str
arg	76:25	76:32	7	pkt.dts
water	76:25	0:0	8	pkt
op	76:28	0:0	8	.
water	76:29	0:0	8	dts
arg	76:35	76:78	5	av_ts2timestr(pkt.dts,&ist->st->time_base)
call	76:35	76:77	6	av_ts2timestr
arg	76:49	76:56	7	pkt.dts
water	76:49	0:0	8	pkt
op	76:52	0:0	8	.
water	76:53	0:0	8	dts
arg	76:58	76:77	7	&ist->st->time_base
op	76:58	0:0	8	&
water	76:59	0:0	8	ist
op	76:62	0:0	8	->
water	76:64	0:0	8	st
op	76:66	0:0	8	->
water	76:68	0:0	8	time_base
arg	77:15	77:65	5	av_ts2str(input_files[ist->file_index]->ts_offset)
call	77:15	77:64	6	av_ts2str
arg	77:25	77:64	7	input_files[ist->file_index]->ts_offset
water	77:25	0:0	8	input_files
op	77:36	0:0	8	[
water	77:37	0:0	8	ist
op	77:40	0:0	8	->
water	77:42	0:0	8	file_index
op	77:52	0:0	8	]
op	77:53	0:0	8	->
water	77:55	0:0	8	ts_offset
arg	78:15	78:86	5	av_ts2timestr(input_files[ist->file_index]->ts_offset,&AV_TIME_BASE_Q)
call	78:15	78:85	6	av_ts2timestr
arg	78:29	78:68	7	input_files[ist->file_index]->ts_offset
water	78:29	0:0	8	input_files
op	78:40	0:0	8	[
water	78:41	0:0	8	ist
op	78:44	0:0	8	->
water	78:46	0:0	8	file_index
op	78:56	0:0	8	]
op	78:57	0:0	8	->
water	78:59	0:0	8	ts_offset
arg	78:70	78:85	7	&AV_TIME_BASE_Q
op	78:70	0:0	8	&
water	78:71	0:0	8	AV_TIME_BASE_Q
water	78:87	0:0	4	;
water	79:4	0:0	4	}
if	80:4	111:4	2	(! ist -> wrap_correction_done && is -> start_time != AV_NOPTS_VALUE && ist -> st -> pts_wrap_bits < 64)
cond	80:7	80:98	3	! ist -> wrap_correction_done && is -> start_time != AV_NOPTS_VALUE && ist -> st -> pts_wrap_bits < 64
op	80:7	0:0	4	!
water	80:8	0:0	4	ist
op	80:11	0:0	4	->
water	80:13	0:0	4	wrap_correction_done
op	80:34	0:0	4	&&
water	80:37	0:0	4	is
op	80:39	0:0	4	->
water	80:41	0:0	4	start_time
op	80:52	0:0	4	!=
water	80:55	0:0	4	AV_NOPTS_VALUE
op	80:70	0:0	4	&&
water	80:73	0:0	4	ist
op	80:76	0:0	4	->
water	80:78	0:0	4	st
op	80:80	0:0	4	->
water	80:82	0:0	4	pts_wrap_bits
op	80:96	0:0	4	<
water	80:98	0:0	4	64
stmts	80:101	111:4	3	
water	80:101	0:0	4	{
decl	81:8	81:29	4	int64_t	stime
water	81:21	0:0	4	,
decl	81:8	81:29	4	int64_t	stime2
if	85:8	99:8	4	(ist -> next_dts == AV_NOPTS_VALUE && ifile -> ts_offset == - is -> start_time && ( is -> iformat -> flags & AVFMT_TS_DISCONT ))
cond	85:15	87:53	5	ist -> next_dts == AV_NOPTS_VALUE && ifile -> ts_offset == - is -> start_time && ( is -> iformat -> flags & AVFMT_TS_DISCONT )
water	85:15	0:0	6	ist
op	85:18	0:0	6	->
water	85:20	0:0	6	next_dts
op	85:29	0:0	6	==
water	85:32	0:0	6	AV_NOPTS_VALUE
op	86:12	0:0	6	&&
water	86:15	0:0	6	ifile
op	86:20	0:0	6	->
water	86:22	0:0	6	ts_offset
op	86:32	0:0	6	==
op	86:35	0:0	6	-
water	86:36	0:0	6	is
op	86:38	0:0	6	->
water	86:40	0:0	6	start_time
op	87:12	0:0	6	&&
water	87:15	0:0	6	(
water	87:16	0:0	6	is
op	87:18	0:0	6	->
water	87:20	0:0	6	iformat
op	87:27	0:0	6	->
water	87:29	0:0	6	flags
op	87:35	0:0	6	&
water	87:37	0:0	6	AVFMT_TS_DISCONT
water	87:53	0:0	6	)
stmts	87:56	99:8	5	
water	87:56	0:0	6	{
decl	88:12	88:46	6	int64_t	new_start_time
op	88:35	0:0	6	=
water	88:37	0:0	6	INT64_MAX
for	89:12	94:12	6	(i = 0 ;i < is -> nb_streams;i ++)
forinit	89:17	89:20	7	i = 0 ;
water	89:17	0:0	8	i
op	89:18	0:0	8	=
water	89:19	0:0	8	0
water	89:20	0:0	8	;
cond	89:22	89:28	7	i < is -> nb_streams
water	89:22	0:0	8	i
op	89:23	0:0	8	<
water	89:24	0:0	8	is
op	89:26	0:0	8	->
water	89:28	0:0	8	nb_streams
forexpr	89:40	89:41	7	i ++
water	89:40	0:0	8	i
op	89:41	0:0	8	++
stmts	89:45	94:12	7	
water	89:45	0:0	8	{
decl	90:16	90:45	8	AVStream	*st
op	90:29	0:0	8	=
water	90:31	0:0	8	is
op	90:33	0:0	8	->
water	90:35	0:0	8	streams
op	90:42	0:0	8	[
water	90:43	0:0	8	i
op	90:44	0:0	8	]
if	91:16	92:28	8	(st -> discard == AVDISCARD_ALL || st -> start_time == AV_NOPTS_VALUE)
cond	91:19	91:69	9	st -> discard == AVDISCARD_ALL || st -> start_time == AV_NOPTS_VALUE
water	91:19	0:0	10	st
op	91:21	0:0	10	->
water	91:23	0:0	10	discard
op	91:31	0:0	10	==
water	91:34	0:0	10	AVDISCARD_ALL
op	91:48	0:0	10	||
water	91:51	0:0	10	st
op	91:53	0:0	10	->
water	91:55	0:0	10	start_time
op	91:66	0:0	10	==
water	91:69	0:0	10	AV_NOPTS_VALUE
stmts	92:20	92:28	9	
continue	92:20	92:28	10	
water	93:16	0:0	8	new_start_time
op	93:31	0:0	8	=
call	93:33	93:114	8	FFMIN
arg	93:39	93:53	9	new_start_time
water	93:39	0:0	10	new_start_time
arg	93:55	93:114	9	av_rescale_q(st->start_time,st->time_base,AV_TIME_BASE_Q)
call	93:55	93:113	10	av_rescale_q
arg	93:68	93:82	11	st->start_time
water	93:68	0:0	12	st
op	93:70	0:0	12	->
water	93:72	0:0	12	start_time
arg	93:84	93:97	11	st->time_base
water	93:84	0:0	12	st
op	93:86	0:0	12	->
water	93:88	0:0	12	time_base
arg	93:99	93:113	11	AV_TIME_BASE_Q
water	93:99	0:0	12	AV_TIME_BASE_Q
water	93:115	0:0	8	;
water	94:12	0:0	8	}
if	95:12	98:12	6	(new_start_time > is -> start_time)
cond	95:16	95:37	7	new_start_time > is -> start_time
water	95:16	0:0	8	new_start_time
op	95:31	0:0	8	>
water	95:33	0:0	8	is
op	95:35	0:0	8	->
water	95:37	0:0	8	start_time
stmts	95:49	98:12	7	
water	95:49	0:0	8	{
call	96:16	96:114	8	av_log
arg	96:23	96:25	9	is
water	96:23	0:0	10	is
arg	96:27	96:41	9	AV_LOG_VERBOSE
water	96:27	0:0	10	AV_LOG_VERBOSE
arg	96:43	96:81	9	"Correcting start time by %"PRId64"\n"
water	96:43	0:0	10	"Correcting start time by %"
water	96:71	0:0	10	PRId64
water	96:77	0:0	10	"\n"
arg	96:83	96:114	9	new_start_time-is->start_time
water	96:83	0:0	10	new_start_time
op	96:98	0:0	10	-
water	96:100	0:0	10	is
op	96:102	0:0	10	->
water	96:104	0:0	10	start_time
water	96:115	0:0	8	;
water	97:16	0:0	8	ifile
op	97:21	0:0	8	->
water	97:23	0:0	8	ts_offset
op	97:33	0:0	8	=
op	97:35	0:0	8	-
water	97:36	0:0	8	new_start_time
water	97:50	0:0	8	;
water	98:12	0:0	8	}
water	99:8	0:0	6	}
water	100:8	0:0	4	stime
op	100:14	0:0	4	=
call	100:16	100:79	4	av_rescale_q
arg	100:29	100:43	5	is->start_time
water	100:29	0:0	6	is
op	100:31	0:0	6	->
water	100:33	0:0	6	start_time
arg	100:45	100:59	5	AV_TIME_BASE_Q
water	100:45	0:0	6	AV_TIME_BASE_Q
arg	100:61	100:79	5	ist->st->time_base
water	100:61	0:0	6	ist
op	100:64	0:0	6	->
water	100:66	0:0	6	st
op	100:68	0:0	6	->
water	100:70	0:0	6	time_base
water	100:80	0:0	4	;
water	101:8	0:0	4	stime2
op	101:14	0:0	4	=
water	101:16	0:0	4	stime
op	101:22	0:0	4	+
water	101:24	0:0	4	(
water	101:25	0:0	4	1
water	101:26	0:0	4	ULL
op	101:29	0:0	4	<<
water	101:31	0:0	4	ist
op	101:34	0:0	4	->
water	101:36	0:0	4	st
op	101:38	0:0	4	->
water	101:40	0:0	4	pts_wrap_bits
water	101:53	0:0	4	)
water	101:54	0:0	4	;
water	102:8	0:0	4	ist
op	102:11	0:0	4	->
water	102:13	0:0	4	wrap_correction_done
op	102:34	0:0	4	=
water	102:36	0:0	4	1
water	102:37	0:0	4	;
if	103:8	106:8	4	(stime2 > stime && pkt . dts != AV_NOPTS_VALUE && pkt . dts > stime + ( 1 LL << ( ist -> st -> pts_wrap_bits - 1 ) ))
cond	103:11	103:108	5	stime2 > stime && pkt . dts != AV_NOPTS_VALUE && pkt . dts > stime + ( 1 LL << ( ist -> st -> pts_wrap_bits - 1 ) )
water	103:11	0:0	6	stime2
op	103:18	0:0	6	>
water	103:20	0:0	6	stime
op	103:26	0:0	6	&&
water	103:29	0:0	6	pkt
op	103:32	0:0	6	.
water	103:33	0:0	6	dts
op	103:37	0:0	6	!=
water	103:40	0:0	6	AV_NOPTS_VALUE
op	103:55	0:0	6	&&
water	103:58	0:0	6	pkt
op	103:61	0:0	6	.
water	103:62	0:0	6	dts
op	103:66	0:0	6	>
water	103:68	0:0	6	stime
op	103:74	0:0	6	+
water	103:76	0:0	6	(
water	103:77	0:0	6	1
water	103:78	0:0	6	LL
op	103:80	0:0	6	<<
water	103:82	0:0	6	(
water	103:83	0:0	6	ist
op	103:86	0:0	6	->
water	103:88	0:0	6	st
op	103:90	0:0	6	->
water	103:92	0:0	6	pts_wrap_bits
op	103:105	0:0	6	-
water	103:106	0:0	6	1
water	103:107	0:0	6	)
water	103:108	0:0	6	)
stmts	103:111	106:8	5	
water	103:111	0:0	6	{
water	104:12	0:0	6	pkt
op	104:15	0:0	6	.
water	104:16	0:0	6	dts
op	104:20	0:0	6	-=
water	104:23	0:0	6	1
water	104:24	0:0	6	ULL
op	104:27	0:0	6	<<
water	104:29	0:0	6	ist
op	104:32	0:0	6	->
water	104:34	0:0	6	st
op	104:36	0:0	6	->
water	104:38	0:0	6	pts_wrap_bits
water	104:51	0:0	6	;
water	105:12	0:0	6	ist
op	105:15	0:0	6	->
water	105:17	0:0	6	wrap_correction_done
op	105:38	0:0	6	=
water	105:40	0:0	6	0
water	105:41	0:0	6	;
water	106:8	0:0	6	}
if	107:8	110:8	4	(stime2 > stime && pkt . pts != AV_NOPTS_VALUE && pkt . pts > stime + ( 1 LL << ( ist -> st -> pts_wrap_bits - 1 ) ))
cond	107:11	107:108	5	stime2 > stime && pkt . pts != AV_NOPTS_VALUE && pkt . pts > stime + ( 1 LL << ( ist -> st -> pts_wrap_bits - 1 ) )
water	107:11	0:0	6	stime2
op	107:18	0:0	6	>
water	107:20	0:0	6	stime
op	107:26	0:0	6	&&
water	107:29	0:0	6	pkt
op	107:32	0:0	6	.
water	107:33	0:0	6	pts
op	107:37	0:0	6	!=
water	107:40	0:0	6	AV_NOPTS_VALUE
op	107:55	0:0	6	&&
water	107:58	0:0	6	pkt
op	107:61	0:0	6	.
water	107:62	0:0	6	pts
op	107:66	0:0	6	>
water	107:68	0:0	6	stime
op	107:74	0:0	6	+
water	107:76	0:0	6	(
water	107:77	0:0	6	1
water	107:78	0:0	6	LL
op	107:80	0:0	6	<<
water	107:82	0:0	6	(
water	107:83	0:0	6	ist
op	107:86	0:0	6	->
water	107:88	0:0	6	st
op	107:90	0:0	6	->
water	107:92	0:0	6	pts_wrap_bits
op	107:105	0:0	6	-
water	107:106	0:0	6	1
water	107:107	0:0	6	)
water	107:108	0:0	6	)
stmts	107:111	110:8	5	
water	107:111	0:0	6	{
water	108:12	0:0	6	pkt
op	108:15	0:0	6	.
water	108:16	0:0	6	pts
op	108:20	0:0	6	-=
water	108:23	0:0	6	1
water	108:24	0:0	6	ULL
op	108:27	0:0	6	<<
water	108:29	0:0	6	ist
op	108:32	0:0	6	->
water	108:34	0:0	6	st
op	108:36	0:0	6	->
water	108:38	0:0	6	pts_wrap_bits
water	108:51	0:0	6	;
water	109:12	0:0	6	ist
op	109:15	0:0	6	->
water	109:17	0:0	6	wrap_correction_done
op	109:38	0:0	6	=
water	109:40	0:0	6	0
water	109:41	0:0	6	;
water	110:8	0:0	6	}
water	111:4	0:0	4	}
if	113:4	126:4	2	(ist -> nb_packets == 1)
cond	113:8	113:27	3	ist -> nb_packets == 1
water	113:8	0:0	4	ist
op	113:11	0:0	4	->
water	113:13	0:0	4	nb_packets
op	113:24	0:0	4	==
water	113:27	0:0	4	1
stmts	113:30	126:4	3	
water	113:30	0:0	4	{
for	114:8	125:8	4	(i = 0 ;i < ist -> st -> nb_side_data;i ++)
forinit	114:13	114:18	5	i = 0 ;
water	114:13	0:0	6	i
op	114:15	0:0	6	=
water	114:17	0:0	6	0
water	114:18	0:0	6	;
cond	114:20	114:33	5	i < ist -> st -> nb_side_data
water	114:20	0:0	6	i
op	114:22	0:0	6	<
water	114:24	0:0	6	ist
op	114:27	0:0	6	->
water	114:29	0:0	6	st
op	114:31	0:0	6	->
water	114:33	0:0	6	nb_side_data
forexpr	114:47	114:48	5	i ++
water	114:47	0:0	6	i
op	114:48	0:0	6	++
stmts	114:52	125:8	5	
water	114:52	0:0	6	{
decl	115:12	115:61	6	AVPacketSideData	*src_sd
op	115:37	0:0	6	=
op	115:39	0:0	6	&
water	115:40	0:0	6	ist
op	115:43	0:0	6	->
water	115:45	0:0	6	st
op	115:47	0:0	6	->
water	115:49	0:0	6	side_data
op	115:58	0:0	6	[
water	115:59	0:0	6	i
op	115:60	0:0	6	]
decl	116:12	116:29	6	uint8_t	*dst_data
if	117:12	118:24	6	(src_sd -> type == AV_PKT_DATA_DISPLAYMATRIX)
cond	117:16	117:32	7	src_sd -> type == AV_PKT_DATA_DISPLAYMATRIX
water	117:16	0:0	8	src_sd
op	117:22	0:0	8	->
water	117:24	0:0	8	type
op	117:29	0:0	8	==
water	117:32	0:0	8	AV_PKT_DATA_DISPLAYMATRIX
stmts	118:16	118:24	7	
continue	118:16	118:24	8	
if	119:12	120:24	6	(av_packet_get_side_data (& pkt ,src_sd -> type ,NULL ))
cond	119:16	119:64	7	av_packet_get_side_data (& pkt ,src_sd -> type ,NULL )
call	119:16	119:64	8	av_packet_get_side_data
arg	119:40	119:44	9	&pkt
op	119:40	0:0	10	&
water	119:41	0:0	10	pkt
arg	119:46	119:58	9	src_sd->type
water	119:46	0:0	10	src_sd
op	119:52	0:0	10	->
water	119:54	0:0	10	type
arg	119:60	119:64	9	NULL
water	119:60	0:0	10	NULL
stmts	120:16	120:24	7	
continue	120:16	120:24	8	
water	121:12	0:0	6	dst_data
op	121:21	0:0	6	=
call	121:23	121:79	6	av_packet_new_side_data
arg	121:47	121:51	7	&pkt
op	121:47	0:0	8	&
water	121:48	0:0	8	pkt
arg	121:53	121:65	7	src_sd->type
water	121:53	0:0	8	src_sd
op	121:59	0:0	8	->
water	121:61	0:0	8	type
arg	121:67	121:79	7	src_sd->size
water	121:67	0:0	8	src_sd
op	121:73	0:0	8	->
water	121:75	0:0	8	size
water	121:80	0:0	6	;
if	122:12	123:31	6	(! dst_data)
cond	122:16	122:17	7	! dst_data
op	122:16	0:0	8	!
water	122:17	0:0	8	dst_data
stmts	123:16	123:31	7	
call	123:16	123:30	8	exit_program
arg	123:29	123:30	9	1
water	123:29	0:0	10	1
water	123:31	0:0	8	;
call	124:12	124:55	6	memcpy
arg	124:19	124:27	7	dst_data
water	124:19	0:0	8	dst_data
arg	124:29	124:41	7	src_sd->data
water	124:29	0:0	8	src_sd
op	124:35	0:0	8	->
water	124:37	0:0	8	data
arg	124:43	124:55	7	src_sd->size
water	124:43	0:0	8	src_sd
op	124:49	0:0	8	->
water	124:51	0:0	8	size
water	124:56	0:0	6	;
water	125:8	0:0	6	}
water	126:4	0:0	4	}
if	127:4	128:85	2	(pkt . dts != AV_NOPTS_VALUE)
cond	127:8	127:19	3	pkt . dts != AV_NOPTS_VALUE
water	127:8	0:0	4	pkt
op	127:11	0:0	4	.
water	127:12	0:0	4	dts
op	127:16	0:0	4	!=
water	127:19	0:0	4	AV_NOPTS_VALUE
stmts	128:8	128:85	3	
water	128:8	0:0	4	pkt
op	128:11	0:0	4	.
water	128:12	0:0	4	dts
op	128:16	0:0	4	+=
call	128:19	128:84	4	av_rescale_q
arg	128:32	128:48	5	ifile->ts_offset
water	128:32	0:0	6	ifile
op	128:37	0:0	6	->
water	128:39	0:0	6	ts_offset
arg	128:50	128:64	5	AV_TIME_BASE_Q
water	128:50	0:0	6	AV_TIME_BASE_Q
arg	128:66	128:84	5	ist->st->time_base
water	128:66	0:0	6	ist
op	128:69	0:0	6	->
water	128:71	0:0	6	st
op	128:73	0:0	6	->
water	128:75	0:0	6	time_base
water	128:85	0:0	4	;
if	129:4	130:85	2	(pkt . pts != AV_NOPTS_VALUE)
cond	129:8	129:19	3	pkt . pts != AV_NOPTS_VALUE
water	129:8	0:0	4	pkt
op	129:11	0:0	4	.
water	129:12	0:0	4	pts
op	129:16	0:0	4	!=
water	129:19	0:0	4	AV_NOPTS_VALUE
stmts	130:8	130:85	3	
water	130:8	0:0	4	pkt
op	130:11	0:0	4	.
water	130:12	0:0	4	pts
op	130:16	0:0	4	+=
call	130:19	130:84	4	av_rescale_q
arg	130:32	130:48	5	ifile->ts_offset
water	130:32	0:0	6	ifile
op	130:37	0:0	6	->
water	130:39	0:0	6	ts_offset
arg	130:50	130:64	5	AV_TIME_BASE_Q
water	130:50	0:0	6	AV_TIME_BASE_Q
arg	130:66	130:84	5	ist->st->time_base
water	130:66	0:0	6	ist
op	130:69	0:0	6	->
water	130:71	0:0	6	st
op	130:73	0:0	6	->
water	130:75	0:0	6	time_base
water	130:85	0:0	4	;
if	131:4	132:32	2	(pkt . pts != AV_NOPTS_VALUE)
cond	131:8	131:19	3	pkt . pts != AV_NOPTS_VALUE
water	131:8	0:0	4	pkt
op	131:11	0:0	4	.
water	131:12	0:0	4	pts
op	131:16	0:0	4	!=
water	131:19	0:0	4	AV_NOPTS_VALUE
stmts	132:8	132:32	3	
water	132:8	0:0	4	pkt
op	132:11	0:0	4	.
water	132:12	0:0	4	pts
op	132:16	0:0	4	*=
water	132:19	0:0	4	ist
op	132:22	0:0	4	->
water	132:24	0:0	4	ts_scale
water	132:32	0:0	4	;
if	133:4	134:32	2	(pkt . dts != AV_NOPTS_VALUE)
cond	133:8	133:19	3	pkt . dts != AV_NOPTS_VALUE
water	133:8	0:0	4	pkt
op	133:11	0:0	4	.
water	133:12	0:0	4	dts
op	133:16	0:0	4	!=
water	133:19	0:0	4	AV_NOPTS_VALUE
stmts	134:8	134:32	3	
water	134:8	0:0	4	pkt
op	134:11	0:0	4	.
water	134:12	0:0	4	dts
op	134:16	0:0	4	*=
water	134:19	0:0	4	ist
op	134:22	0:0	4	->
water	134:24	0:0	4	ts_scale
water	134:32	0:0	4	;
water	135:4	0:0	2	pkt_dts
op	135:12	0:0	2	=
call	135:14	135:114	2	av_rescale_q_rnd
arg	135:31	135:38	3	pkt.dts
water	135:31	0:0	4	pkt
op	135:34	0:0	4	.
water	135:35	0:0	4	dts
arg	135:40	135:58	3	ist->st->time_base
water	135:40	0:0	4	ist
op	135:43	0:0	4	->
water	135:45	0:0	4	st
op	135:47	0:0	4	->
water	135:49	0:0	4	time_base
arg	135:60	135:74	3	AV_TIME_BASE_Q
water	135:60	0:0	4	AV_TIME_BASE_Q
arg	135:76	135:114	3	AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX
water	135:76	0:0	4	AV_ROUND_NEAR_INF
op	135:93	0:0	4	|
water	135:94	0:0	4	AV_ROUND_PASS_MINMAX
water	135:115	0:0	2	;
if	136:4	151:4	2	(( ist -> dec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO || ist -> dec_ctx -> codec_type == AVMEDIA_TYPE_AUDIO ) && pkt_dts != AV_NOPTS_VALUE && ist -> next_dts == AV_NOPTS_VALUE && ! copy_ts && ( is -> iformat -> flags & AVFMT_TS_DISCONT ) && ifile -> last_ts != AV_NOPTS_VALUE)
cond	136:8	139:72	3	( ist -> dec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO || ist -> dec_ctx -> codec_type == AVMEDIA_TYPE_AUDIO ) && pkt_dts != AV_NOPTS_VALUE && ist -> next_dts == AV_NOPTS_VALUE && ! copy_ts && ( is -> iformat -> flags & AVFMT_TS_DISCONT ) && ifile -> last_ts != AV_NOPTS_VALUE
water	136:8	0:0	4	(
water	136:9	0:0	4	ist
op	136:12	0:0	4	->
water	136:14	0:0	4	dec_ctx
op	136:21	0:0	4	->
water	136:23	0:0	4	codec_type
op	136:34	0:0	4	==
water	136:37	0:0	4	AVMEDIA_TYPE_VIDEO
op	136:56	0:0	4	||
water	137:9	0:0	4	ist
op	137:12	0:0	4	->
water	137:14	0:0	4	dec_ctx
op	137:21	0:0	4	->
water	137:23	0:0	4	codec_type
op	137:34	0:0	4	==
water	137:37	0:0	4	AVMEDIA_TYPE_AUDIO
water	137:55	0:0	4	)
op	137:57	0:0	4	&&
water	138:8	0:0	4	pkt_dts
op	138:16	0:0	4	!=
water	138:19	0:0	4	AV_NOPTS_VALUE
op	138:34	0:0	4	&&
water	138:37	0:0	4	ist
op	138:40	0:0	4	->
water	138:42	0:0	4	next_dts
op	138:51	0:0	4	==
water	138:54	0:0	4	AV_NOPTS_VALUE
op	138:69	0:0	4	&&
op	138:72	0:0	4	!
water	138:73	0:0	4	copy_ts
op	139:8	0:0	4	&&
water	139:11	0:0	4	(
water	139:12	0:0	4	is
op	139:14	0:0	4	->
water	139:16	0:0	4	iformat
op	139:23	0:0	4	->
water	139:25	0:0	4	flags
op	139:31	0:0	4	&
water	139:33	0:0	4	AVFMT_TS_DISCONT
water	139:49	0:0	4	)
op	139:51	0:0	4	&&
water	139:54	0:0	4	ifile
op	139:59	0:0	4	->
water	139:61	0:0	4	last_ts
op	139:69	0:0	4	!=
water	139:72	0:0	4	AV_NOPTS_VALUE
stmts	139:88	151:4	3	
water	139:88	0:0	4	{
decl	140:8	140:50	4	int64_t	delta
op	140:24	0:0	4	=
water	140:26	0:0	4	pkt_dts
op	140:34	0:0	4	-
water	140:36	0:0	4	ifile
op	140:41	0:0	4	->
water	140:43	0:0	4	last_ts
if	141:8	150:8	4	(delta < - 1 LL * dts_delta_threshold * AV_TIME_BASE || delta > 1 LL * dts_delta_threshold * AV_TIME_BASE)
cond	141:12	142:45	5	delta < - 1 LL * dts_delta_threshold * AV_TIME_BASE || delta > 1 LL * dts_delta_threshold * AV_TIME_BASE
water	141:12	0:0	6	delta
op	141:18	0:0	6	<
op	141:20	0:0	6	-
water	141:21	0:0	6	1
water	141:22	0:0	6	LL
op	141:24	0:0	6	*
water	141:25	0:0	6	dts_delta_threshold
op	141:44	0:0	6	*
water	141:45	0:0	6	AV_TIME_BASE
op	141:58	0:0	6	||
water	142:12	0:0	6	delta
op	142:18	0:0	6	>
water	142:21	0:0	6	1
water	142:22	0:0	6	LL
op	142:24	0:0	6	*
water	142:25	0:0	6	dts_delta_threshold
op	142:44	0:0	6	*
water	142:45	0:0	6	AV_TIME_BASE
stmts	142:58	150:8	5	
water	142:58	0:0	6	{
water	143:12	0:0	6	ifile
op	143:17	0:0	6	->
water	143:19	0:0	6	ts_offset
op	143:29	0:0	6	-=
water	143:32	0:0	6	delta
water	143:37	0:0	6	;
call	144:12	146:42	6	av_log
arg	144:19	144:23	7	NULL
water	144:19	0:0	8	NULL
arg	144:25	144:37	7	AV_LOG_DEBUG
water	144:25	0:0	8	AV_LOG_DEBUG
arg	145:19	145:92	7	"Inter stream timestamp discontinuity %"PRId64", new offset= %"PRId64"\n"
water	145:19	0:0	8	"Inter stream timestamp discontinuity %"
water	145:59	0:0	8	PRId64
water	145:65	0:0	8	", new offset= %"
water	145:82	0:0	8	PRId64
water	145:88	0:0	8	"\n"
arg	146:19	146:24	7	delta
water	146:19	0:0	8	delta
arg	146:26	146:42	7	ifile->ts_offset
water	146:26	0:0	8	ifile
op	146:31	0:0	8	->
water	146:33	0:0	8	ts_offset
water	146:43	0:0	6	;
water	147:12	0:0	6	pkt
op	147:15	0:0	6	.
water	147:16	0:0	6	dts
op	147:20	0:0	6	-=
call	147:23	147:77	6	av_rescale_q
arg	147:36	147:41	7	delta
water	147:36	0:0	8	delta
arg	147:43	147:57	7	AV_TIME_BASE_Q
water	147:43	0:0	8	AV_TIME_BASE_Q
arg	147:59	147:77	7	ist->st->time_base
water	147:59	0:0	8	ist
op	147:62	0:0	8	->
water	147:64	0:0	8	st
op	147:66	0:0	8	->
water	147:68	0:0	8	time_base
water	147:78	0:0	6	;
if	148:12	149:82	6	(pkt . pts != AV_NOPTS_VALUE)
cond	148:16	148:27	7	pkt . pts != AV_NOPTS_VALUE
water	148:16	0:0	8	pkt
op	148:19	0:0	8	.
water	148:20	0:0	8	pts
op	148:24	0:0	8	!=
water	148:27	0:0	8	AV_NOPTS_VALUE
stmts	149:16	149:82	7	
water	149:16	0:0	8	pkt
op	149:19	0:0	8	.
water	149:20	0:0	8	pts
op	149:24	0:0	8	-=
call	149:27	149:81	8	av_rescale_q
arg	149:40	149:45	9	delta
water	149:40	0:0	10	delta
arg	149:47	149:61	9	AV_TIME_BASE_Q
water	149:47	0:0	10	AV_TIME_BASE_Q
arg	149:63	149:81	9	ist->st->time_base
water	149:63	0:0	10	ist
op	149:66	0:0	10	->
water	149:68	0:0	10	st
op	149:70	0:0	10	->
water	149:72	0:0	10	time_base
water	149:82	0:0	8	;
water	150:8	0:0	6	}
water	151:4	0:0	4	}
water	152:4	0:0	2	duration
op	152:13	0:0	2	=
call	152:15	152:81	2	av_rescale_q
arg	152:28	152:43	3	ifile->duration
water	152:28	0:0	4	ifile
op	152:33	0:0	4	->
water	152:35	0:0	4	duration
arg	152:45	152:61	3	ifile->time_base
water	152:45	0:0	4	ifile
op	152:50	0:0	4	->
water	152:52	0:0	4	time_base
arg	152:63	152:81	3	ist->st->time_base
water	152:63	0:0	4	ist
op	152:66	0:0	4	->
water	152:68	0:0	4	st
op	152:70	0:0	4	->
water	152:72	0:0	4	time_base
water	152:82	0:0	2	;
if	153:4	157:4	2	(pkt . pts != AV_NOPTS_VALUE)
cond	153:8	153:19	3	pkt . pts != AV_NOPTS_VALUE
water	153:8	0:0	4	pkt
op	153:11	0:0	4	.
water	153:12	0:0	4	pts
op	153:16	0:0	4	!=
water	153:19	0:0	4	AV_NOPTS_VALUE
stmts	153:35	157:4	3	
water	153:35	0:0	4	{
water	154:8	0:0	4	pkt
op	154:11	0:0	4	.
water	154:12	0:0	4	pts
op	154:16	0:0	4	+=
water	154:19	0:0	4	duration
water	154:27	0:0	4	;
water	155:8	0:0	4	ist
op	155:11	0:0	4	->
water	155:13	0:0	4	max_pts
op	155:21	0:0	4	=
call	155:23	155:50	4	FFMAX
arg	155:29	155:36	5	pkt.pts
water	155:29	0:0	6	pkt
op	155:32	0:0	6	.
water	155:33	0:0	6	pts
arg	155:38	155:50	5	ist->max_pts
water	155:38	0:0	6	ist
op	155:41	0:0	6	->
water	155:43	0:0	6	max_pts
water	155:51	0:0	4	;
water	156:8	0:0	4	ist
op	156:11	0:0	4	->
water	156:13	0:0	4	min_pts
op	156:21	0:0	4	=
call	156:23	156:50	4	FFMIN
arg	156:29	156:36	5	pkt.pts
water	156:29	0:0	6	pkt
op	156:32	0:0	6	.
water	156:33	0:0	6	pts
arg	156:38	156:50	5	ist->min_pts
water	156:38	0:0	6	ist
op	156:41	0:0	6	->
water	156:43	0:0	6	min_pts
water	156:51	0:0	4	;
water	157:4	0:0	4	}
if	158:4	159:27	2	(pkt . dts != AV_NOPTS_VALUE)
cond	158:8	158:19	3	pkt . dts != AV_NOPTS_VALUE
water	158:8	0:0	4	pkt
op	158:11	0:0	4	.
water	158:12	0:0	4	dts
op	158:16	0:0	4	!=
water	158:19	0:0	4	AV_NOPTS_VALUE
stmts	159:8	159:27	3	
water	159:8	0:0	4	pkt
op	159:11	0:0	4	.
water	159:12	0:0	4	dts
op	159:16	0:0	4	+=
water	159:19	0:0	4	duration
water	159:27	0:0	4	;
water	160:4	0:0	2	pkt_dts
op	160:12	0:0	2	=
call	160:14	160:114	2	av_rescale_q_rnd
arg	160:31	160:38	3	pkt.dts
water	160:31	0:0	4	pkt
op	160:34	0:0	4	.
water	160:35	0:0	4	dts
arg	160:40	160:58	3	ist->st->time_base
water	160:40	0:0	4	ist
op	160:43	0:0	4	->
water	160:45	0:0	4	st
op	160:47	0:0	4	->
water	160:49	0:0	4	time_base
arg	160:60	160:74	3	AV_TIME_BASE_Q
water	160:60	0:0	4	AV_TIME_BASE_Q
arg	160:76	160:114	3	AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX
water	160:76	0:0	4	AV_ROUND_NEAR_INF
op	160:93	0:0	4	|
water	160:94	0:0	4	AV_ROUND_PASS_MINMAX
water	160:115	0:0	2	;
if	161:4	194:4	2	(( ist -> dec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO || ist -> dec_ctx -> codec_type == AVMEDIA_TYPE_AUDIO ) && pkt_dts != AV_NOPTS_VALUE && ist -> next_dts != AV_NOPTS_VALUE && ! copy_ts)
cond	161:8	164:9	3	( ist -> dec_ctx -> codec_type == AVMEDIA_TYPE_VIDEO || ist -> dec_ctx -> codec_type == AVMEDIA_TYPE_AUDIO ) && pkt_dts != AV_NOPTS_VALUE && ist -> next_dts != AV_NOPTS_VALUE && ! copy_ts
water	161:8	0:0	4	(
water	161:9	0:0	4	ist
op	161:12	0:0	4	->
water	161:14	0:0	4	dec_ctx
op	161:21	0:0	4	->
water	161:23	0:0	4	codec_type
op	161:34	0:0	4	==
water	161:37	0:0	4	AVMEDIA_TYPE_VIDEO
op	161:56	0:0	4	||
water	162:9	0:0	4	ist
op	162:12	0:0	4	->
water	162:14	0:0	4	dec_ctx
op	162:21	0:0	4	->
water	162:23	0:0	4	codec_type
op	162:34	0:0	4	==
water	162:37	0:0	4	AVMEDIA_TYPE_AUDIO
water	162:55	0:0	4	)
op	162:57	0:0	4	&&
water	163:9	0:0	4	pkt_dts
op	163:17	0:0	4	!=
water	163:20	0:0	4	AV_NOPTS_VALUE
op	163:35	0:0	4	&&
water	163:38	0:0	4	ist
op	163:41	0:0	4	->
water	163:43	0:0	4	next_dts
op	163:52	0:0	4	!=
water	163:55	0:0	4	AV_NOPTS_VALUE
op	163:70	0:0	4	&&
op	164:8	0:0	4	!
water	164:9	0:0	4	copy_ts
stmts	164:18	194:4	3	
water	164:18	0:0	4	{
decl	165:8	165:49	4	int64_t	delta
op	165:24	0:0	4	=
water	165:26	0:0	4	pkt_dts
op	165:34	0:0	4	-
water	165:36	0:0	4	ist
op	165:39	0:0	4	->
water	165:41	0:0	4	next_dts
if	166:8	178:8	4	(is -> iformat -> flags & AVFMT_TS_DISCONT)
cond	166:12	166:33	5	is -> iformat -> flags & AVFMT_TS_DISCONT
water	166:12	0:0	6	is
op	166:14	0:0	6	->
water	166:16	0:0	6	iformat
op	166:23	0:0	6	->
water	166:25	0:0	6	flags
op	166:31	0:0	6	&
water	166:33	0:0	6	AVFMT_TS_DISCONT
stmts	166:51	178:8	5	
water	166:51	0:0	6	{
if	167:12	177:12	6	(delta < - 1 LL * dts_delta_threshold * AV_TIME_BASE || delta > 1 LL * dts_delta_threshold * AV_TIME_BASE || pkt_dts + AV_TIME_BASE / 10 <FFMAX (ist -> pts ,ist -> dts ))
cond	167:16	169:68	7	delta < - 1 LL * dts_delta_threshold * AV_TIME_BASE || delta > 1 LL * dts_delta_threshold * AV_TIME_BASE || pkt_dts + AV_TIME_BASE / 10 <FFMAX (ist -> pts ,ist -> dts )
water	167:16	0:0	8	delta
op	167:22	0:0	8	<
op	167:24	0:0	8	-
water	167:25	0:0	8	1
water	167:26	0:0	8	LL
op	167:28	0:0	8	*
water	167:29	0:0	8	dts_delta_threshold
op	167:48	0:0	8	*
water	167:49	0:0	8	AV_TIME_BASE
op	167:62	0:0	8	||
water	168:16	0:0	8	delta
op	168:22	0:0	8	>
water	168:25	0:0	8	1
water	168:26	0:0	8	LL
op	168:28	0:0	8	*
water	168:29	0:0	8	dts_delta_threshold
op	168:48	0:0	8	*
water	168:49	0:0	8	AV_TIME_BASE
op	168:62	0:0	8	||
water	169:16	0:0	8	pkt_dts
op	169:24	0:0	8	+
water	169:26	0:0	8	AV_TIME_BASE
op	169:38	0:0	8	/
water	169:39	0:0	8	10
op	169:42	0:0	8	<
call	169:44	169:68	8	FFMAX
arg	169:50	169:58	9	ist->pts
water	169:50	0:0	10	ist
op	169:53	0:0	10	->
water	169:55	0:0	10	pts
arg	169:60	169:68	9	ist->dts
water	169:60	0:0	10	ist
op	169:63	0:0	10	->
water	169:65	0:0	10	dts
stmts	169:71	177:12	7	
water	169:71	0:0	8	{
water	170:16	0:0	8	ifile
op	170:21	0:0	8	->
water	170:23	0:0	8	ts_offset
op	170:33	0:0	8	-=
water	170:36	0:0	8	delta
water	170:41	0:0	8	;
call	171:16	173:46	8	av_log
arg	171:23	171:27	9	NULL
water	171:23	0:0	10	NULL
arg	171:29	171:41	9	AV_LOG_DEBUG
water	171:29	0:0	10	AV_LOG_DEBUG
arg	172:23	172:83	9	"timestamp discontinuity %"PRId64", new offset= %"PRId64"\n"
water	172:23	0:0	10	"timestamp discontinuity %"
water	172:50	0:0	10	PRId64
water	172:56	0:0	10	", new offset= %"
water	172:73	0:0	10	PRId64
water	172:79	0:0	10	"\n"
arg	173:23	173:28	9	delta
water	173:23	0:0	10	delta
arg	173:30	173:46	9	ifile->ts_offset
water	173:30	0:0	10	ifile
op	173:35	0:0	10	->
water	173:37	0:0	10	ts_offset
water	173:47	0:0	8	;
water	174:16	0:0	8	pkt
op	174:19	0:0	8	.
water	174:20	0:0	8	dts
op	174:24	0:0	8	-=
call	174:27	174:81	8	av_rescale_q
arg	174:40	174:45	9	delta
water	174:40	0:0	10	delta
arg	174:47	174:61	9	AV_TIME_BASE_Q
water	174:47	0:0	10	AV_TIME_BASE_Q
arg	174:63	174:81	9	ist->st->time_base
water	174:63	0:0	10	ist
op	174:66	0:0	10	->
water	174:68	0:0	10	st
op	174:70	0:0	10	->
water	174:72	0:0	10	time_base
water	174:82	0:0	8	;
if	175:16	176:86	8	(pkt . pts != AV_NOPTS_VALUE)
cond	175:20	175:31	9	pkt . pts != AV_NOPTS_VALUE
water	175:20	0:0	10	pkt
op	175:23	0:0	10	.
water	175:24	0:0	10	pts
op	175:28	0:0	10	!=
water	175:31	0:0	10	AV_NOPTS_VALUE
stmts	176:20	176:86	9	
water	176:20	0:0	10	pkt
op	176:23	0:0	10	.
water	176:24	0:0	10	pts
op	176:28	0:0	10	-=
call	176:31	176:85	10	av_rescale_q
arg	176:44	176:49	11	delta
water	176:44	0:0	12	delta
arg	176:51	176:65	11	AV_TIME_BASE_Q
water	176:51	0:0	12	AV_TIME_BASE_Q
arg	176:67	176:85	11	ist->st->time_base
water	176:67	0:0	12	ist
op	176:70	0:0	12	->
water	176:72	0:0	12	st
op	176:74	0:0	12	->
water	176:76	0:0	12	time_base
water	176:86	0:0	10	;
water	177:12	0:0	8	}
water	178:8	0:0	6	}
else	178:10	193:8	4
stmts	178:15	193:8	5	
water	178:15	0:0	6	{
if	179:12	183:12	6	(delta < - 1 LL * dts_error_threshold * AV_TIME_BASE || delta > 1 LL * dts_error_threshold * AV_TIME_BASE)
cond	179:17	180:50	7	delta < - 1 LL * dts_error_threshold * AV_TIME_BASE || delta > 1 LL * dts_error_threshold * AV_TIME_BASE
water	179:17	0:0	8	delta
op	179:23	0:0	8	<
op	179:25	0:0	8	-
water	179:26	0:0	8	1
water	179:27	0:0	8	LL
op	179:29	0:0	8	*
water	179:30	0:0	8	dts_error_threshold
op	179:49	0:0	8	*
water	179:50	0:0	8	AV_TIME_BASE
op	179:63	0:0	8	||
water	180:17	0:0	8	delta
op	180:23	0:0	8	>
water	180:26	0:0	8	1
water	180:27	0:0	8	LL
op	180:29	0:0	8	*
water	180:30	0:0	8	dts_error_threshold
op	180:49	0:0	8	*
water	180:50	0:0	8	AV_TIME_BASE
stmts	180:64	183:12	7	
water	180:64	0:0	8	{
call	181:16	181:143	8	av_log
arg	181:23	181:27	9	NULL
water	181:23	0:0	10	NULL
arg	181:29	181:43	9	AV_LOG_WARNING
water	181:29	0:0	10	AV_LOG_WARNING
arg	181:45	181:101	9	"DTS %"PRId64", next:%"PRId64" st:%d invalid dropping\n"
water	181:45	0:0	10	"DTS %"
water	181:52	0:0	10	PRId64
water	181:58	0:0	10	", next:%"
water	181:68	0:0	10	PRId64
water	181:74	0:0	10	" st:%d invalid dropping\n"
arg	181:103	181:110	9	pkt.dts
water	181:103	0:0	10	pkt
op	181:106	0:0	10	.
water	181:107	0:0	10	dts
arg	181:112	181:125	9	ist->next_dts
water	181:112	0:0	10	ist
op	181:115	0:0	10	->
water	181:117	0:0	10	next_dts
arg	181:127	181:143	9	pkt.stream_index
water	181:127	0:0	10	pkt
op	181:130	0:0	10	.
water	181:131	0:0	10	stream_index
water	181:144	0:0	8	;
water	182:16	0:0	8	pkt
op	182:19	0:0	8	.
water	182:20	0:0	8	dts
op	182:24	0:0	8	=
water	182:26	0:0	8	AV_NOPTS_VALUE
water	182:40	0:0	8	;
water	183:12	0:0	8	}
if	184:12	192:12	6	(pkt . pts != AV_NOPTS_VALUE)
cond	184:16	184:27	7	pkt . pts != AV_NOPTS_VALUE
water	184:16	0:0	8	pkt
op	184:19	0:0	8	.
water	184:20	0:0	8	pts
op	184:24	0:0	8	!=
water	184:27	0:0	8	AV_NOPTS_VALUE
stmts	184:42	192:12	7	
water	184:42	0:0	8	{
decl	185:16	185:91	8	int64_t	pkt_pts
op	185:32	0:0	8	=
call	185:34	185:90	9	av_rescale_q
arg	185:47	185:54	10	pkt.pts
water	185:47	0:0	11	pkt
op	185:50	0:0	11	.
water	185:51	0:0	11	pts
arg	185:56	185:74	10	ist->st->time_base
water	185:56	0:0	11	ist
op	185:59	0:0	11	->
water	185:61	0:0	11	st
op	185:63	0:0	11	->
water	185:65	0:0	11	time_base
arg	185:76	185:90	10	AV_TIME_BASE_Q
water	185:76	0:0	11	AV_TIME_BASE_Q
water	186:16	0:0	8	delta
op	186:24	0:0	8	=
water	186:26	0:0	8	pkt_pts
op	186:34	0:0	8	-
water	186:36	0:0	8	ist
op	186:39	0:0	8	->
water	186:41	0:0	8	next_dts
water	186:49	0:0	8	;
if	187:16	191:16	8	(delta < - 1 LL * dts_error_threshold * AV_TIME_BASE || delta > 1 LL * dts_error_threshold * AV_TIME_BASE)
cond	187:21	188:54	9	delta < - 1 LL * dts_error_threshold * AV_TIME_BASE || delta > 1 LL * dts_error_threshold * AV_TIME_BASE
water	187:21	0:0	10	delta
op	187:27	0:0	10	<
op	187:29	0:0	10	-
water	187:30	0:0	10	1
water	187:31	0:0	10	LL
op	187:33	0:0	10	*
water	187:34	0:0	10	dts_error_threshold
op	187:53	0:0	10	*
water	187:54	0:0	10	AV_TIME_BASE
op	187:67	0:0	10	||
water	188:21	0:0	10	delta
op	188:27	0:0	10	>
water	188:30	0:0	10	1
water	188:31	0:0	10	LL
op	188:33	0:0	10	*
water	188:34	0:0	10	dts_error_threshold
op	188:53	0:0	10	*
water	188:54	0:0	10	AV_TIME_BASE
stmts	188:68	191:16	9	
water	188:68	0:0	10	{
call	189:20	189:147	10	av_log
arg	189:27	189:31	11	NULL
water	189:27	0:0	12	NULL
arg	189:33	189:47	11	AV_LOG_WARNING
water	189:33	0:0	12	AV_LOG_WARNING
arg	189:49	189:105	11	"PTS %"PRId64", next:%"PRId64" invalid dropping st:%d\n"
water	189:49	0:0	12	"PTS %"
water	189:56	0:0	12	PRId64
water	189:62	0:0	12	", next:%"
water	189:72	0:0	12	PRId64
water	189:78	0:0	12	" invalid dropping st:%d\n"
arg	189:107	189:114	11	pkt.pts
water	189:107	0:0	12	pkt
op	189:110	0:0	12	.
water	189:111	0:0	12	pts
arg	189:116	189:129	11	ist->next_dts
water	189:116	0:0	12	ist
op	189:119	0:0	12	->
water	189:121	0:0	12	next_dts
arg	189:131	189:147	11	pkt.stream_index
water	189:131	0:0	12	pkt
op	189:134	0:0	12	.
water	189:135	0:0	12	stream_index
water	189:148	0:0	10	;
water	190:20	0:0	10	pkt
op	190:23	0:0	10	.
water	190:24	0:0	10	pts
op	190:28	0:0	10	=
water	190:30	0:0	10	AV_NOPTS_VALUE
water	190:44	0:0	10	;
water	191:16	0:0	10	}
water	192:12	0:0	8	}
water	193:8	0:0	6	}
water	194:4	0:0	4	}
if	195:4	196:82	2	(pkt . dts != AV_NOPTS_VALUE)
cond	195:8	195:19	3	pkt . dts != AV_NOPTS_VALUE
water	195:8	0:0	4	pkt
op	195:11	0:0	4	.
water	195:12	0:0	4	dts
op	195:16	0:0	4	!=
water	195:19	0:0	4	AV_NOPTS_VALUE
stmts	196:8	196:82	3	
water	196:8	0:0	4	ifile
op	196:13	0:0	4	->
water	196:15	0:0	4	last_ts
op	196:23	0:0	4	=
call	196:25	196:81	4	av_rescale_q
arg	196:38	196:45	5	pkt.dts
water	196:38	0:0	6	pkt
op	196:41	0:0	6	.
water	196:42	0:0	6	dts
arg	196:47	196:65	5	ist->st->time_base
water	196:47	0:0	6	ist
op	196:50	0:0	6	->
water	196:52	0:0	6	st
op	196:54	0:0	6	->
water	196:56	0:0	6	time_base
arg	196:67	196:81	5	AV_TIME_BASE_Q
water	196:67	0:0	6	AV_TIME_BASE_Q
water	196:82	0:0	4	;
if	197:4	204:4	2	(debug_ts)
cond	197:8	197:8	3	debug_ts
water	197:8	0:0	4	debug_ts
stmts	197:18	204:4	3	
water	197:18	0:0	4	{
call	198:8	203:86	4	av_log
arg	198:15	198:19	5	NULL
water	198:15	0:0	6	NULL
arg	198:21	198:32	5	AV_LOG_INFO
water	198:21	0:0	6	AV_LOG_INFO
arg	198:34	198:149	5	"demuxer+ffmpeg -> ist_index:%d type:%s pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s off:%s off_time:%s\n"
water	198:34	0:0	6	"demuxer+ffmpeg -> ist_index:%d type:%s pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s off:%s off_time:%s\n"
arg	199:15	199:50	5	ifile->ist_index+pkt.stream_index
water	199:15	0:0	6	ifile
op	199:20	0:0	6	->
water	199:22	0:0	6	ist_index
op	199:32	0:0	6	+
water	199:34	0:0	6	pkt
op	199:37	0:0	6	.
water	199:38	0:0	6	stream_index
arg	199:52	199:102	5	av_get_media_type_string(ist->dec_ctx->codec_type)
call	199:52	199:101	6	av_get_media_type_string
arg	199:77	199:101	7	ist->dec_ctx->codec_type
water	199:77	0:0	8	ist
op	199:80	0:0	8	->
water	199:82	0:0	8	dec_ctx
op	199:89	0:0	8	->
water	199:91	0:0	8	codec_type
arg	200:15	200:33	5	av_ts2str(pkt.pts)
call	200:15	200:32	6	av_ts2str
arg	200:25	200:32	7	pkt.pts
water	200:25	0:0	8	pkt
op	200:28	0:0	8	.
water	200:29	0:0	8	pts
arg	200:35	200:78	5	av_ts2timestr(pkt.pts,&ist->st->time_base)
call	200:35	200:77	6	av_ts2timestr
arg	200:49	200:56	7	pkt.pts
water	200:49	0:0	8	pkt
op	200:52	0:0	8	.
water	200:53	0:0	8	pts
arg	200:58	200:77	7	&ist->st->time_base
op	200:58	0:0	8	&
water	200:59	0:0	8	ist
op	200:62	0:0	8	->
water	200:64	0:0	8	st
op	200:66	0:0	8	->
water	200:68	0:0	8	time_base
arg	201:15	201:33	5	av_ts2str(pkt.dts)
call	201:15	201:32	6	av_ts2str
arg	201:25	201:32	7	pkt.dts
water	201:25	0:0	8	pkt
op	201:28	0:0	8	.
water	201:29	0:0	8	dts
arg	201:35	201:78	5	av_ts2timestr(pkt.dts,&ist->st->time_base)
call	201:35	201:77	6	av_ts2timestr
arg	201:49	201:56	7	pkt.dts
water	201:49	0:0	8	pkt
op	201:52	0:0	8	.
water	201:53	0:0	8	dts
arg	201:58	201:77	7	&ist->st->time_base
op	201:58	0:0	8	&
water	201:59	0:0	8	ist
op	201:62	0:0	8	->
water	201:64	0:0	8	st
op	201:66	0:0	8	->
water	201:68	0:0	8	time_base
arg	202:15	202:65	5	av_ts2str(input_files[ist->file_index]->ts_offset)
call	202:15	202:64	6	av_ts2str
arg	202:25	202:64	7	input_files[ist->file_index]->ts_offset
water	202:25	0:0	8	input_files
op	202:36	0:0	8	[
water	202:37	0:0	8	ist
op	202:40	0:0	8	->
water	202:42	0:0	8	file_index
op	202:52	0:0	8	]
op	202:53	0:0	8	->
water	202:55	0:0	8	ts_offset
arg	203:15	203:86	5	av_ts2timestr(input_files[ist->file_index]->ts_offset,&AV_TIME_BASE_Q)
call	203:15	203:85	6	av_ts2timestr
arg	203:29	203:68	7	input_files[ist->file_index]->ts_offset
water	203:29	0:0	8	input_files
op	203:40	0:0	8	[
water	203:41	0:0	8	ist
op	203:44	0:0	8	->
water	203:46	0:0	8	file_index
op	203:56	0:0	8	]
op	203:57	0:0	8	->
water	203:59	0:0	8	ts_offset
arg	203:70	203:85	7	&AV_TIME_BASE_Q
op	203:70	0:0	8	&
water	203:71	0:0	8	AV_TIME_BASE_Q
water	203:87	0:0	4	;
water	204:4	0:0	4	}
call	205:4	205:36	2	sub2video_heartbeat
arg	205:24	205:27	3	ist
water	205:24	0:0	4	ist
arg	205:29	205:36	3	pkt.pts
water	205:29	0:0	4	pkt
op	205:32	0:0	4	.
water	205:33	0:0	4	pts
water	205:37	0:0	2	;
call	206:4	206:37	2	process_input_packet
arg	206:25	206:28	3	ist
water	206:25	0:0	4	ist
arg	206:30	206:34	3	&pkt
op	206:30	0:0	4	&
water	206:31	0:0	4	pkt
arg	206:36	206:37	3	0
water	206:36	0:0	4	0
water	206:38	0:0	2	;
label	207:0	207:14	2	discard_packet :
call	208:4	208:24	2	av_packet_unref
arg	208:20	208:24	3	&pkt
op	208:20	0:0	4	&
water	208:21	0:0	4	pkt
water	208:25	0:0	2	;
return	209:4	209:12	2	0
water	209:11	0:0	3	0
