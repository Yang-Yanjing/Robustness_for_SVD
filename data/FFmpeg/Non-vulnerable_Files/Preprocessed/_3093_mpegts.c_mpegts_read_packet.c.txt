func	1:0	25:0	0	static int	mpegts_read_packet
params	1:29	0:0	1	
param	1:30	1:48	2	AVFormatContext *	s
param	1:50	1:63	2	AVPacket *	pkt
stmnts	0:0	24:14	1	
decl	3:4	3:36	2	MpegTSContext	*ts
op	3:22	0:0	2	=
water	3:24	0:0	2	s
op	3:25	0:0	2	->
water	3:27	0:0	2	priv_data
decl	4:4	4:14	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:14	2	int	i
water	5:4	0:0	2	pkt
op	5:7	0:0	2	->
water	5:9	0:0	2	size
op	5:14	0:0	2	=
op	5:16	0:0	2	-
water	5:17	0:0	2	1
water	5:18	0:0	2	;
water	6:4	0:0	2	ts
op	6:6	0:0	2	->
water	6:8	0:0	2	pkt
op	6:12	0:0	2	=
water	6:14	0:0	2	pkt
water	6:17	0:0	2	;
water	7:4	0:0	2	ret
op	7:8	0:0	2	=
call	7:10	7:30	2	handle_packets
arg	7:25	7:27	3	ts
water	7:25	0:0	4	ts
arg	7:29	7:30	3	0
water	7:29	0:0	4	0
water	7:31	0:0	2	;
if	8:4	21:4	2	(ret < 0)
cond	8:8	8:14	3	ret < 0
water	8:8	0:0	4	ret
op	8:12	0:0	4	<
water	8:14	0:0	4	0
stmts	8:17	21:4	3	
water	8:17	0:0	4	{
call	9:8	9:30	4	av_free_packet
arg	9:23	9:30	5	ts->pkt
water	9:23	0:0	6	ts
op	9:25	0:0	6	->
water	9:27	0:0	6	pkt
water	9:31	0:0	4	;
for	11:8	20:12	4	(i = 0 ;i < NB_PID_MAX;i ++)
forinit	11:13	11:18	5	i = 0 ;
water	11:13	0:0	6	i
op	11:15	0:0	6	=
water	11:17	0:0	6	0
water	11:18	0:0	6	;
cond	11:20	11:24	5	i < NB_PID_MAX
water	11:20	0:0	6	i
op	11:22	0:0	6	<
water	11:24	0:0	6	NB_PID_MAX
forexpr	11:36	11:37	5	i ++
water	11:36	0:0	6	i
op	11:37	0:0	6	++
stmts	12:12	20:12	5	
if	12:12	20:12	6	(ts -> pids [ i ] && ts -> pids [ i ] -> type == MPEGTS_PES)
cond	12:16	12:52	7	ts -> pids [ i ] && ts -> pids [ i ] -> type == MPEGTS_PES
water	12:16	0:0	8	ts
op	12:18	0:0	8	->
water	12:20	0:0	8	pids
op	12:24	0:0	8	[
water	12:25	0:0	8	i
op	12:26	0:0	8	]
op	12:28	0:0	8	&&
water	12:31	0:0	8	ts
op	12:33	0:0	8	->
water	12:35	0:0	8	pids
op	12:39	0:0	8	[
water	12:40	0:0	8	i
op	12:41	0:0	8	]
op	12:42	0:0	8	->
water	12:44	0:0	8	type
op	12:49	0:0	8	==
water	12:52	0:0	8	MPEGTS_PES
stmts	12:64	20:12	7	
water	12:64	0:0	8	{
decl	13:16	13:66	8	PESContext	*pes
op	13:32	0:0	8	=
water	13:34	0:0	8	ts
op	13:36	0:0	8	->
water	13:38	0:0	8	pids
op	13:42	0:0	8	[
water	13:43	0:0	8	i
op	13:44	0:0	8	]
op	13:45	0:0	8	->
water	13:47	0:0	8	u
op	13:48	0:0	8	.
water	13:49	0:0	8	pes_filter
op	13:59	0:0	8	.
water	13:60	0:0	8	opaque
if	14:16	19:16	8	(pes -> state == MPEGTS_PAYLOAD && pes -> data_index > 0)
cond	14:20	14:70	9	pes -> state == MPEGTS_PAYLOAD && pes -> data_index > 0
water	14:20	0:0	10	pes
op	14:23	0:0	10	->
water	14:25	0:0	10	state
op	14:31	0:0	10	==
water	14:34	0:0	10	MPEGTS_PAYLOAD
op	14:49	0:0	10	&&
water	14:52	0:0	10	pes
op	14:55	0:0	10	->
water	14:57	0:0	10	data_index
op	14:68	0:0	10	>
water	14:70	0:0	10	0
stmts	14:73	19:16	9	
water	14:73	0:0	10	{
call	15:20	15:43	10	new_pes_packet
arg	15:35	15:38	11	pes
water	15:35	0:0	12	pes
arg	15:40	15:43	11	pkt
water	15:40	0:0	12	pkt
water	15:44	0:0	10	;
water	16:20	0:0	10	pes
op	16:23	0:0	10	->
water	16:25	0:0	10	state
op	16:31	0:0	10	=
water	16:33	0:0	10	MPEGTS_SKIP
water	16:44	0:0	10	;
water	17:20	0:0	10	ret
op	17:24	0:0	10	=
water	17:26	0:0	10	0
water	17:27	0:0	10	;
break	18:20	18:25	10	
water	19:16	0:0	10	}
water	20:12	0:0	8	}
water	21:4	0:0	4	}
if	22:4	23:28	2	(! ret && pkt -> size < 0)
cond	22:8	22:28	3	! ret && pkt -> size < 0
op	22:8	0:0	4	!
water	22:9	0:0	4	ret
op	22:13	0:0	4	&&
water	22:16	0:0	4	pkt
op	22:19	0:0	4	->
water	22:21	0:0	4	size
op	22:26	0:0	4	<
water	22:28	0:0	4	0
stmts	23:8	23:28	3	
water	23:8	0:0	4	ret
op	23:12	0:0	4	=
call	23:14	23:27	4	AVERROR
arg	23:22	23:27	5	EINTR
water	23:22	0:0	6	EINTR
water	23:28	0:0	4	;
return	24:4	24:14	2	ret
water	24:11	0:0	3	ret
