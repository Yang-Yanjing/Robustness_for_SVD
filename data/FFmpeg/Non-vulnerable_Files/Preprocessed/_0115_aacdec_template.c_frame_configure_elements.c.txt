func	1:0	28:0	0	static int	frame_configure_elements
params	1:35	0:0	1	
param	1:36	1:57	2	AVCodecContext *	avctx
stmnts	0:0	27:12	1	
decl	3:4	3:37	2	AACContext	*ac
op	3:19	0:0	2	=
water	3:21	0:0	2	avctx
op	3:26	0:0	2	->
water	3:28	0:0	2	priv_data
decl	4:4	4:25	2	int	type
water	4:12	0:0	2	,
decl	4:4	4:25	2	int	id
water	4:16	0:0	2	,
decl	4:4	4:25	2	int	ch
water	4:20	0:0	2	,
decl	4:4	4:25	2	int	ret
for	6:4	14:4	2	(type = 0 ;type < 4;type ++)
forinit	6:9	6:17	3	type = 0 ;
water	6:9	0:0	4	type
op	6:14	0:0	4	=
water	6:16	0:0	4	0
water	6:17	0:0	4	;
cond	6:19	6:26	3	type < 4
water	6:19	0:0	4	type
op	6:24	0:0	4	<
water	6:26	0:0	4	4
forexpr	6:29	6:33	3	type ++
water	6:29	0:0	4	type
op	6:33	0:0	4	++
stmts	6:37	14:4	3	
water	6:37	0:0	4	{
for	7:8	13:8	4	(id = 0 ;id < MAX_ELEM_ID;id ++)
forinit	7:13	7:19	5	id = 0 ;
water	7:13	0:0	6	id
op	7:16	0:0	6	=
water	7:18	0:0	6	0
water	7:19	0:0	6	;
cond	7:21	7:26	5	id < MAX_ELEM_ID
water	7:21	0:0	6	id
op	7:24	0:0	6	<
water	7:26	0:0	6	MAX_ELEM_ID
forexpr	7:39	7:41	5	id ++
water	7:39	0:0	6	id
op	7:41	0:0	6	++
stmts	7:45	13:8	5	
water	7:45	0:0	6	{
decl	8:12	8:51	6	ChannelElement	*che
op	8:32	0:0	6	=
water	8:34	0:0	6	ac
op	8:36	0:0	6	->
water	8:38	0:0	6	che
op	8:41	0:0	6	[
water	8:42	0:0	6	type
op	8:46	0:0	6	]
op	8:47	0:0	6	[
water	8:48	0:0	6	id
op	8:50	0:0	6	]
if	9:12	12:12	6	(che)
cond	9:16	9:16	7	che
water	9:16	0:0	8	che
stmts	9:21	12:12	7	
water	9:21	0:0	8	{
water	10:16	0:0	8	che
op	10:19	0:0	8	->
water	10:21	0:0	8	ch
op	10:23	0:0	8	[
water	10:24	0:0	8	0
op	10:25	0:0	8	]
op	10:26	0:0	8	.
water	10:27	0:0	8	ret
op	10:31	0:0	8	=
water	10:33	0:0	8	che
op	10:36	0:0	8	->
water	10:38	0:0	8	ch
op	10:40	0:0	8	[
water	10:41	0:0	8	0
op	10:42	0:0	8	]
op	10:43	0:0	8	.
water	10:44	0:0	8	ret_buf
water	10:51	0:0	8	;
water	11:16	0:0	8	che
op	11:19	0:0	8	->
water	11:21	0:0	8	ch
op	11:23	0:0	8	[
water	11:24	0:0	8	1
op	11:25	0:0	8	]
op	11:26	0:0	8	.
water	11:27	0:0	8	ret
op	11:31	0:0	8	=
water	11:33	0:0	8	che
op	11:36	0:0	8	->
water	11:38	0:0	8	ch
op	11:40	0:0	8	[
water	11:41	0:0	8	1
op	11:42	0:0	8	]
op	11:43	0:0	8	.
water	11:44	0:0	8	ret_buf
water	11:51	0:0	8	;
water	12:12	0:0	8	}
water	13:8	0:0	6	}
water	14:4	0:0	4	}
call	16:4	16:28	2	av_frame_unref
arg	16:19	16:28	3	ac->frame
water	16:19	0:0	4	ac
op	16:21	0:0	4	->
water	16:23	0:0	4	frame
water	16:29	0:0	2	;
if	17:4	18:16	2	(! avctx -> channels)
cond	17:8	17:16	3	! avctx -> channels
op	17:8	0:0	4	!
water	17:9	0:0	4	avctx
op	17:14	0:0	4	->
water	17:16	0:0	4	channels
stmts	18:8	18:16	3	
return	18:8	18:16	4	1
water	18:15	0:0	5	1
water	19:4	0:0	2	ac
op	19:6	0:0	2	->
water	19:8	0:0	2	frame
op	19:13	0:0	2	->
water	19:15	0:0	2	nb_samples
op	19:26	0:0	2	=
water	19:28	0:0	2	2048
water	19:32	0:0	2	;
if	20:4	21:18	2	(( ret =ff_get_buffer (avctx ,ac -> frame ,0 ) ) < 0)
cond	20:8	20:53	3	( ret =ff_get_buffer (avctx ,ac -> frame ,0 ) ) < 0
water	20:8	0:0	4	(
water	20:9	0:0	4	ret
op	20:13	0:0	4	=
call	20:15	20:48	4	ff_get_buffer
arg	20:29	20:34	5	avctx
water	20:29	0:0	6	avctx
arg	20:36	20:45	5	ac->frame
water	20:36	0:0	6	ac
op	20:38	0:0	6	->
water	20:40	0:0	6	frame
arg	20:47	20:48	5	0
water	20:47	0:0	6	0
water	20:49	0:0	4	)
op	20:51	0:0	4	<
water	20:53	0:0	4	0
stmts	21:8	21:18	3	
return	21:8	21:18	4	ret
water	21:15	0:0	5	ret
for	23:4	26:4	2	(ch = 0 ;ch < avctx -> channels;ch ++)
forinit	23:9	23:15	3	ch = 0 ;
water	23:9	0:0	4	ch
op	23:12	0:0	4	=
water	23:14	0:0	4	0
water	23:15	0:0	4	;
cond	23:17	23:29	3	ch < avctx -> channels
water	23:17	0:0	4	ch
op	23:20	0:0	4	<
water	23:22	0:0	4	avctx
op	23:27	0:0	4	->
water	23:29	0:0	4	channels
forexpr	23:39	23:41	3	ch ++
water	23:39	0:0	4	ch
op	23:41	0:0	4	++
stmts	23:45	26:4	3	
water	23:45	0:0	4	{
if	24:8	25:82	4	(ac -> output_element [ ch ])
cond	24:12	24:33	5	ac -> output_element [ ch ]
water	24:12	0:0	6	ac
op	24:14	0:0	6	->
water	24:16	0:0	6	output_element
op	24:30	0:0	6	[
water	24:31	0:0	6	ch
op	24:33	0:0	6	]
stmts	25:12	25:82	5	
water	25:12	0:0	6	ac
op	25:14	0:0	6	->
water	25:16	0:0	6	output_element
op	25:30	0:0	6	[
water	25:31	0:0	6	ch
op	25:33	0:0	6	]
op	25:34	0:0	6	->
water	25:36	0:0	6	ret
op	25:40	0:0	6	=
water	25:42	0:0	6	(
water	25:43	0:0	6	INTFLOAT
op	25:52	0:0	6	*
water	25:53	0:0	6	)
water	25:54	0:0	6	ac
op	25:56	0:0	6	->
water	25:58	0:0	6	frame
op	25:63	0:0	6	->
water	25:65	0:0	6	extended_data
op	25:78	0:0	6	[
water	25:79	0:0	6	ch
op	25:81	0:0	6	]
water	25:82	0:0	6	;
water	26:4	0:0	4	}
return	27:4	27:12	2	0
water	27:11	0:0	3	0
