func	1:0	33:0	0	void	ff_rtsp_close_streams
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
stmnts	0:0	32:26	1	
decl	3:4	3:32	2	RTSPState	*rt
op	3:18	0:0	2	=
water	3:20	0:0	2	s
op	3:21	0:0	2	->
water	3:23	0:0	2	priv_data
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	j
decl	5:4	5:23	2	RTSPStream	*rtsp_st
call	6:4	6:27	2	ff_rtsp_undo_setup
arg	6:23	6:24	3	s
water	6:23	0:0	4	s
arg	6:26	6:27	3	0
water	6:26	0:0	4	0
water	6:28	0:0	2	;
for	7:4	24:4	2	(i = 0 ;i < rt -> nb_rtsp_streams;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:24	3	i < rt -> nb_rtsp_streams
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	rt
op	7:22	0:0	4	->
water	7:24	0:0	4	nb_rtsp_streams
forexpr	7:41	7:42	3	i ++
water	7:41	0:0	4	i
op	7:42	0:0	4	++
stmts	7:46	24:4	3	
water	7:46	0:0	4	{
water	8:8	0:0	4	rtsp_st
op	8:16	0:0	4	=
water	8:18	0:0	4	rt
op	8:20	0:0	4	->
water	8:22	0:0	4	rtsp_streams
op	8:34	0:0	4	[
water	8:35	0:0	4	i
op	8:36	0:0	4	]
water	8:37	0:0	4	;
if	9:8	23:8	4	(rtsp_st)
cond	9:12	9:12	5	rtsp_st
water	9:12	0:0	6	rtsp_st
stmts	9:21	23:8	5	
water	9:21	0:0	6	{
if	10:12	15:12	6	(rtsp_st -> dynamic_handler && rtsp_st -> dynamic_protocol_context)
cond	10:16	10:53	7	rtsp_st -> dynamic_handler && rtsp_st -> dynamic_protocol_context
water	10:16	0:0	8	rtsp_st
op	10:23	0:0	8	->
water	10:25	0:0	8	dynamic_handler
op	10:41	0:0	8	&&
water	10:44	0:0	8	rtsp_st
op	10:51	0:0	8	->
water	10:53	0:0	8	dynamic_protocol_context
stmts	10:79	15:12	7	
water	10:79	0:0	8	{
if	11:16	13:58	8	(rtsp_st -> dynamic_handler -> close)
cond	11:20	11:46	9	rtsp_st -> dynamic_handler -> close
water	11:20	0:0	10	rtsp_st
op	11:27	0:0	10	->
water	11:29	0:0	10	dynamic_handler
op	11:44	0:0	10	->
water	11:46	0:0	10	close
stmts	12:20	13:58	9	
call	12:20	13:57	10	rtsp_st->dynamic_handler->close
arg	13:24	13:57	11	rtsp_st->dynamic_protocol_context
water	13:24	0:0	12	rtsp_st
op	13:31	0:0	12	->
water	13:33	0:0	12	dynamic_protocol_context
water	13:58	0:0	10	;
call	14:16	14:57	8	av_free
arg	14:24	14:57	9	rtsp_st->dynamic_protocol_context
water	14:24	0:0	10	rtsp_st
op	14:31	0:0	10	->
water	14:33	0:0	10	dynamic_protocol_context
water	14:58	0:0	8	;
water	15:12	0:0	8	}
for	16:12	17:59	6	(j = 0 ;j < rtsp_st -> nb_include_source_addrs;j ++)
forinit	16:17	16:22	7	j = 0 ;
water	16:17	0:0	8	j
op	16:19	0:0	8	=
water	16:21	0:0	8	0
water	16:22	0:0	8	;
cond	16:24	16:37	7	j < rtsp_st -> nb_include_source_addrs
water	16:24	0:0	8	j
op	16:26	0:0	8	<
water	16:28	0:0	8	rtsp_st
op	16:35	0:0	8	->
water	16:37	0:0	8	nb_include_source_addrs
forexpr	16:62	16:63	7	j ++
water	16:62	0:0	8	j
op	16:63	0:0	8	++
stmts	17:16	17:59	7	
call	17:16	17:58	8	av_freep
arg	17:25	17:58	9	&rtsp_st->include_source_addrs[j]
op	17:25	0:0	10	&
water	17:26	0:0	10	rtsp_st
op	17:33	0:0	10	->
water	17:35	0:0	10	include_source_addrs
op	17:55	0:0	10	[
water	17:56	0:0	10	j
op	17:57	0:0	10	]
water	17:59	0:0	8	;
call	18:12	18:51	6	av_freep
arg	18:21	18:51	7	&rtsp_st->include_source_addrs
op	18:21	0:0	8	&
water	18:22	0:0	8	rtsp_st
op	18:29	0:0	8	->
water	18:31	0:0	8	include_source_addrs
water	18:52	0:0	6	;
for	19:12	20:59	6	(j = 0 ;j < rtsp_st -> nb_exclude_source_addrs;j ++)
forinit	19:17	19:22	7	j = 0 ;
water	19:17	0:0	8	j
op	19:19	0:0	8	=
water	19:21	0:0	8	0
water	19:22	0:0	8	;
cond	19:24	19:37	7	j < rtsp_st -> nb_exclude_source_addrs
water	19:24	0:0	8	j
op	19:26	0:0	8	<
water	19:28	0:0	8	rtsp_st
op	19:35	0:0	8	->
water	19:37	0:0	8	nb_exclude_source_addrs
forexpr	19:62	19:63	7	j ++
water	19:62	0:0	8	j
op	19:63	0:0	8	++
stmts	20:16	20:59	7	
call	20:16	20:58	8	av_freep
arg	20:25	20:58	9	&rtsp_st->exclude_source_addrs[j]
op	20:25	0:0	10	&
water	20:26	0:0	10	rtsp_st
op	20:33	0:0	10	->
water	20:35	0:0	10	exclude_source_addrs
op	20:55	0:0	10	[
water	20:56	0:0	10	j
op	20:57	0:0	10	]
water	20:59	0:0	8	;
call	21:12	21:51	6	av_freep
arg	21:21	21:51	7	&rtsp_st->exclude_source_addrs
op	21:21	0:0	8	&
water	21:22	0:0	8	rtsp_st
op	21:29	0:0	8	->
water	21:31	0:0	8	exclude_source_addrs
water	21:52	0:0	6	;
call	22:12	22:29	6	av_freep
arg	22:21	22:29	7	&rtsp_st
op	22:21	0:0	8	&
water	22:22	0:0	8	rtsp_st
water	22:30	0:0	6	;
water	23:8	0:0	6	}
water	24:4	0:0	4	}
call	25:4	25:30	2	av_freep
arg	25:13	25:30	3	&rt->rtsp_streams
op	25:13	0:0	4	&
water	25:14	0:0	4	rt
op	25:16	0:0	4	->
water	25:18	0:0	4	rtsp_streams
water	25:31	0:0	2	;
if	26:4	28:4	2	(rt -> asf_ctx)
cond	26:8	26:12	3	rt -> asf_ctx
water	26:8	0:0	4	rt
op	26:10	0:0	4	->
water	26:12	0:0	4	asf_ctx
stmts	26:21	28:4	3	
water	26:21	0:0	4	{
call	27:8	27:41	4	avformat_close_input
arg	27:29	27:41	5	&rt->asf_ctx
op	27:29	0:0	6	&
water	27:30	0:0	6	rt
op	27:32	0:0	6	->
water	27:34	0:0	6	asf_ctx
water	27:42	0:0	4	;
water	28:4	0:0	4	}
if	29:4	30:41	2	(CONFIG_RTPDEC && rt -> ts)
cond	29:8	29:29	3	CONFIG_RTPDEC && rt -> ts
water	29:8	0:0	4	CONFIG_RTPDEC
op	29:22	0:0	4	&&
water	29:25	0:0	4	rt
op	29:27	0:0	4	->
water	29:29	0:0	4	ts
stmts	30:8	30:41	3	
call	30:8	30:40	4	avpriv_mpegts_parse_close
arg	30:34	30:40	5	rt->ts
water	30:34	0:0	6	rt
op	30:36	0:0	6	->
water	30:38	0:0	6	ts
water	30:41	0:0	4	;
call	31:4	31:19	2	av_freep
arg	31:13	31:19	3	&rt->p
op	31:13	0:0	4	&
water	31:14	0:0	4	rt
op	31:16	0:0	4	->
water	31:18	0:0	4	p
water	31:20	0:0	2	;
call	32:4	32:25	2	av_freep
arg	32:13	32:25	3	&rt->recvbuf
op	32:13	0:0	4	&
water	32:14	0:0	4	rt
op	32:16	0:0	4	->
water	32:18	0:0	4	recvbuf
water	32:26	0:0	2	;
