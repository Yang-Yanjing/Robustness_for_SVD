func	1:0	83:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:31	2	char *	argv[]
stmnts	0:0	82:12	1	
decl	3:4	3:21	2	struct AVMD5	*md5
decl	4:4	4:24	2	AVFilterGraph	*graph
decl	5:4	5:31	2	AVFilterContext	*src
water	5:24	0:0	2	,
decl	5:4	5:31	2	AVFilterContext	*sink
decl	6:4	6:18	2	AVFrame	*frame
decl	7:4	7:24	2	uint8_t	errstr[1024]
decl	8:4	8:18	2	float	duration
decl	9:4	9:25	2	int	err
water	9:11	0:0	2	,
decl	9:4	9:25	2	int	nb_frames
water	9:22	0:0	2	,
decl	9:4	9:25	2	int	i
if	10:4	13:4	2	(argc < 2)
cond	10:8	10:15	3	argc < 2
water	10:8	0:0	4	argc
op	10:13	0:0	4	<
water	10:15	0:0	4	2
stmts	10:18	13:4	3	
water	10:18	0:0	4	{
call	11:8	11:57	4	fprintf
arg	11:16	11:22	5	stderr
water	11:16	0:0	6	stderr
arg	11:24	11:48	5	"Usage: %s <duration>\n"
water	11:24	0:0	6	"Usage: %s <duration>\n"
arg	11:50	11:57	5	argv[0]
water	11:50	0:0	6	argv
op	11:54	0:0	6	[
water	11:55	0:0	6	0
op	11:56	0:0	6	]
water	11:58	0:0	4	;
return	12:8	12:16	4	1
water	12:15	0:0	5	1
water	13:4	0:0	4	}
water	14:4	0:0	2	duration
op	14:14	0:0	2	=
call	14:16	14:28	2	atof
arg	14:21	14:28	3	argv[1]
water	14:21	0:0	4	argv
op	14:25	0:0	4	[
water	14:26	0:0	4	1
op	14:27	0:0	4	]
water	14:29	0:0	2	;
water	15:4	0:0	2	nb_frames
op	15:14	0:0	2	=
water	15:16	0:0	2	duration
op	15:25	0:0	2	*
water	15:27	0:0	2	INPUT_SAMPLERATE
op	15:44	0:0	2	/
water	15:46	0:0	2	FRAME_SIZE
water	15:56	0:0	2	;
if	16:4	19:4	2	(nb_frames <= 0)
cond	16:8	16:21	3	nb_frames <= 0
water	16:8	0:0	4	nb_frames
op	16:18	0:0	4	<=
water	16:21	0:0	4	0
stmts	16:24	19:4	3	
water	16:24	0:0	4	{
call	17:8	17:57	4	fprintf
arg	17:16	17:22	5	stderr
water	17:16	0:0	6	stderr
arg	17:24	17:48	5	"Invalid duration: %s\n"
water	17:24	0:0	6	"Invalid duration: %s\n"
arg	17:50	17:57	5	argv[1]
water	17:50	0:0	6	argv
op	17:54	0:0	6	[
water	17:55	0:0	6	1
op	17:56	0:0	6	]
water	17:58	0:0	4	;
return	18:8	18:16	4	1
water	18:15	0:0	5	1
water	19:4	0:0	4	}
call	20:4	20:26	2	avfilter_register_all
water	20:27	0:0	2	;
water	22:4	0:0	2	frame
op	22:11	0:0	2	=
call	22:13	22:28	2	av_frame_alloc
water	22:29	0:0	2	;
if	23:4	26:4	2	(! frame)
cond	23:8	23:9	3	! frame
op	23:8	0:0	4	!
water	23:9	0:0	4	frame
stmts	23:16	26:4	3	
water	23:16	0:0	4	{
call	24:8	24:54	4	fprintf
arg	24:16	24:22	5	stderr
water	24:16	0:0	6	stderr
arg	24:24	24:54	5	"Error allocating the frame\n"
water	24:24	0:0	6	"Error allocating the frame\n"
water	24:55	0:0	4	;
return	25:8	25:16	4	1
water	25:15	0:0	5	1
water	26:4	0:0	4	}
water	27:4	0:0	2	md5
op	27:8	0:0	2	=
call	27:10	27:23	2	av_md5_alloc
water	27:24	0:0	2	;
if	28:4	31:4	2	(! md5)
cond	28:8	28:9	3	! md5
op	28:8	0:0	4	!
water	28:9	0:0	4	md5
stmts	28:14	31:4	3	
water	28:14	0:0	4	{
call	29:8	29:60	4	fprintf
arg	29:16	29:22	5	stderr
water	29:16	0:0	6	stderr
arg	29:24	29:60	5	"Error allocating the MD5 context\n"
water	29:24	0:0	6	"Error allocating the MD5 context\n"
water	29:61	0:0	4	;
return	30:8	30:16	4	1
water	30:15	0:0	5	1
water	31:4	0:0	4	}
water	33:4	0:0	2	err
op	33:8	0:0	2	=
call	33:10	33:47	2	init_filter_graph
arg	33:28	33:34	3	&graph
op	33:28	0:0	4	&
water	33:29	0:0	4	graph
arg	33:36	33:40	3	&src
op	33:36	0:0	4	&
water	33:37	0:0	4	src
arg	33:42	33:47	3	&sink
op	33:42	0:0	4	&
water	33:43	0:0	4	sink
water	33:48	0:0	2	;
if	34:4	37:4	2	(err < 0)
cond	34:8	34:14	3	err < 0
water	34:8	0:0	4	err
op	34:12	0:0	4	<
water	34:14	0:0	4	0
stmts	34:17	37:4	3	
water	34:17	0:0	4	{
call	35:8	35:54	4	fprintf
arg	35:16	35:22	5	stderr
water	35:16	0:0	6	stderr
arg	35:24	35:54	5	"Unable to init filter graph:"
water	35:24	0:0	6	"Unable to init filter graph:"
water	35:55	0:0	4	;
goto	36:8	36:17	4	fail
water	36:13	0:0	5	fail
water	37:4	0:0	4	}
for	39:4	74:4	2	(i = 0 ;i < nb_frames;i ++)
forinit	39:9	39:14	3	i = 0 ;
water	39:9	0:0	4	i
op	39:11	0:0	4	=
water	39:13	0:0	4	0
water	39:14	0:0	4	;
cond	39:16	39:20	3	i < nb_frames
water	39:16	0:0	4	i
op	39:18	0:0	4	<
water	39:20	0:0	4	nb_frames
forexpr	39:31	39:32	3	i ++
water	39:31	0:0	4	i
op	39:32	0:0	4	++
stmts	39:36	74:4	3	
water	39:36	0:0	4	{
water	41:8	0:0	4	err
op	41:12	0:0	4	=
call	41:14	41:32	4	get_input
arg	41:24	41:29	5	frame
water	41:24	0:0	6	frame
arg	41:31	41:32	5	i
water	41:31	0:0	6	i
water	41:33	0:0	4	;
if	42:8	45:8	4	(err < 0)
cond	42:12	42:18	5	err < 0
water	42:12	0:0	6	err
op	42:16	0:0	6	<
water	42:18	0:0	6	0
stmts	42:21	45:8	5	
water	42:21	0:0	6	{
call	43:12	43:59	6	fprintf
arg	43:20	43:26	7	stderr
water	43:20	0:0	8	stderr
arg	43:28	43:59	7	"Error generating input frame:"
water	43:28	0:0	8	"Error generating input frame:"
water	43:60	0:0	6	;
goto	44:12	44:21	6	fail
water	44:17	0:0	7	fail
water	45:8	0:0	6	}
water	47:8	0:0	4	err
op	47:12	0:0	4	=
call	47:14	47:47	4	av_buffersrc_add_frame
arg	47:37	47:40	5	src
water	47:37	0:0	6	src
arg	47:42	47:47	5	frame
water	47:42	0:0	6	frame
water	47:48	0:0	4	;
if	48:8	52:8	4	(err < 0)
cond	48:12	48:18	5	err < 0
water	48:12	0:0	6	err
op	48:16	0:0	6	<
water	48:18	0:0	6	0
stmts	48:21	52:8	5	
water	48:21	0:0	6	{
call	49:12	49:32	6	av_frame_unref
arg	49:27	49:32	7	frame
water	49:27	0:0	8	frame
water	49:33	0:0	6	;
call	50:12	50:76	6	fprintf
arg	50:20	50:26	7	stderr
water	50:20	0:0	8	stderr
arg	50:28	50:76	7	"Error submitting the frame to the filtergraph:"
water	50:28	0:0	8	"Error submitting the frame to the filtergraph:"
water	50:77	0:0	6	;
goto	51:12	51:21	6	fail
water	51:17	0:0	7	fail
water	52:8	0:0	6	}
while	54:8	62:8	4	(( err =av_buffersink_get_frame (sink ,frame ) ) >= 0)
cond	54:15	54:63	5	( err =av_buffersink_get_frame (sink ,frame ) ) >= 0
water	54:15	0:0	6	(
water	54:16	0:0	6	err
op	54:20	0:0	6	=
call	54:22	54:57	6	av_buffersink_get_frame
arg	54:46	54:50	7	sink
water	54:46	0:0	8	sink
arg	54:52	54:57	7	frame
water	54:52	0:0	8	frame
water	54:58	0:0	6	)
op	54:60	0:0	6	>=
water	54:63	0:0	6	0
stmts	54:66	62:8	5	
water	54:66	0:0	6	{
water	56:12	0:0	6	err
op	56:16	0:0	6	=
call	56:18	56:43	6	process_output
arg	56:33	56:36	7	md5
water	56:33	0:0	8	md5
arg	56:38	56:43	7	frame
water	56:38	0:0	8	frame
water	56:44	0:0	6	;
if	57:12	60:12	6	(err < 0)
cond	57:16	57:22	7	err < 0
water	57:16	0:0	8	err
op	57:20	0:0	8	<
water	57:22	0:0	8	0
stmts	57:25	60:12	7	
water	57:25	0:0	8	{
call	58:16	58:70	8	fprintf
arg	58:24	58:30	9	stderr
water	58:24	0:0	10	stderr
arg	58:32	58:70	9	"Error processing the filtered frame:"
water	58:32	0:0	10	"Error processing the filtered frame:"
water	58:71	0:0	8	;
goto	59:16	59:25	8	fail
water	59:21	0:0	9	fail
water	60:12	0:0	8	}
call	61:12	61:32	6	av_frame_unref
arg	61:27	61:32	7	frame
water	61:27	0:0	8	frame
water	61:33	0:0	6	;
water	62:8	0:0	6	}
if	63:8	66:8	4	(err ==AVERROR (EAGAIN ))
cond	63:12	63:33	5	err ==AVERROR (EAGAIN )
water	63:12	0:0	6	err
op	63:16	0:0	6	==
call	63:19	63:33	6	AVERROR
arg	63:27	63:33	7	EAGAIN
water	63:27	0:0	8	EAGAIN
stmts	63:36	66:8	5	
water	63:36	0:0	6	{
continue	65:12	65:20	6	
water	66:8	0:0	6	}
else	66:10	69:8	4
stmts	66:15	69:8	5	
if	66:15	69:8	6	(err == AVERROR_EOF)
cond	66:19	66:26	7	err == AVERROR_EOF
water	66:19	0:0	8	err
op	66:23	0:0	8	==
water	66:26	0:0	8	AVERROR_EOF
stmts	66:39	69:8	7	
water	66:39	0:0	8	{
break	68:12	68:17	8	
water	69:8	0:0	8	}
else	69:10	73:8	4
stmts	69:15	73:8	5	
if	69:15	73:8	6	(err < 0)
cond	69:19	69:25	7	err < 0
water	69:19	0:0	8	err
op	69:23	0:0	8	<
water	69:25	0:0	8	0
stmts	69:28	73:8	7	
water	69:28	0:0	8	{
call	71:12	71:55	8	fprintf
arg	71:20	71:26	9	stderr
water	71:20	0:0	10	stderr
arg	71:28	71:55	9	"Error filtering the data:"
water	71:28	0:0	10	"Error filtering the data:"
water	71:56	0:0	8	;
goto	72:12	72:21	8	fail
water	72:17	0:0	9	fail
water	73:8	0:0	8	}
water	74:4	0:0	4	}
call	75:4	75:30	2	avfilter_graph_free
arg	75:24	75:30	3	&graph
op	75:24	0:0	4	&
water	75:25	0:0	4	graph
water	75:31	0:0	2	;
call	76:4	76:24	2	av_frame_free
arg	76:18	76:24	3	&frame
op	76:18	0:0	4	&
water	76:19	0:0	4	frame
water	76:25	0:0	2	;
call	77:4	77:17	2	av_freep
arg	77:13	77:17	3	&md5
op	77:13	0:0	4	&
water	77:14	0:0	4	md5
water	77:18	0:0	2	;
return	78:4	78:12	2	0
water	78:11	0:0	3	0
label	79:0	79:4	2	fail :
call	80:4	80:43	2	av_strerror
arg	80:16	80:19	3	err
water	80:16	0:0	4	err
arg	80:21	80:27	3	errstr
water	80:21	0:0	4	errstr
arg	80:29	80:43	3	sizeof(errstr)
op	80:29	0:0	4	sizeof
water	80:35	0:0	4	(
water	80:36	0:0	4	errstr
water	80:42	0:0	4	)
water	80:44	0:0	2	;
call	81:4	81:34	2	fprintf
arg	81:12	81:18	3	stderr
water	81:12	0:0	4	stderr
arg	81:20	81:26	3	"%s\n"
water	81:20	0:0	4	"%s\n"
arg	81:28	81:34	3	errstr
water	81:28	0:0	4	errstr
water	81:35	0:0	2	;
return	82:4	82:12	2	1
water	82:11	0:0	3	1
