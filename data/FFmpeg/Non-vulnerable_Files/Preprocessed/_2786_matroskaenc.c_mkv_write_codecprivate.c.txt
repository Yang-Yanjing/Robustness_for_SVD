func	1:0	62:0	0	static int	mkv_write_codecprivate
params	1:33	0:0	1	
param	1:34	1:52	2	AVFormatContext *	s
param	1:54	1:69	2	AVIOContext *	pb
param	2:34	2:55	2	AVCodecContext *	codec
param	2:57	2:70	2	int	native_id
param	3:34	3:43	2	int	qt_id
stmnts	0:0	61:14	1	
decl	5:4	5:23	2	AVIOContext	*dyn_cp
decl	6:4	6:22	2	uint8_t	*codecpriv
decl	7:4	7:27	2	int	ret
water	7:11	0:0	2	,
decl	7:4	7:27	2	int	codecpriv_size
water	8:4	0:0	2	ret
op	8:8	0:0	2	=
call	8:10	8:35	2	avio_open_dyn_buf
arg	8:28	8:35	3	&dyn_cp
op	8:28	0:0	4	&
water	8:29	0:0	4	dyn_cp
water	8:36	0:0	2	;
if	9:4	10:18	2	(ret < 0)
cond	9:8	9:14	3	ret < 0
water	9:8	0:0	4	ret
op	9:12	0:0	4	<
water	9:14	0:0	4	0
stmts	10:8	10:18	3	
return	10:8	10:18	4	ret
water	10:15	0:0	5	ret
if	11:4	13:4	2	(native_id)
cond	11:8	11:8	3	native_id
water	11:8	0:0	4	native_id
stmts	11:19	13:4	3	
water	11:19	0:0	4	{
water	12:8	0:0	4	ret
op	12:12	0:0	4	=
call	12:14	12:60	4	mkv_write_native_codecprivate
arg	12:44	12:45	5	s
water	12:44	0:0	6	s
arg	12:47	12:52	5	codec
water	12:47	0:0	6	codec
arg	12:54	12:60	5	dyn_cp
water	12:54	0:0	6	dyn_cp
water	12:61	0:0	4	;
water	13:4	0:0	4	}
else	13:6	44:4	2
stmts	13:11	44:4	3	
if	13:11	44:4	4	(codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	13:15	13:36	5	codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	13:15	0:0	6	codec
op	13:20	0:0	6	->
water	13:22	0:0	6	codec_type
op	13:33	0:0	6	==
water	13:36	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	13:56	44:4	5	
water	13:56	0:0	6	{
if	14:8	30:8	6	(qt_id)
cond	14:12	14:12	7	qt_id
water	14:12	0:0	8	qt_id
stmts	14:19	30:8	7	
water	14:19	0:0	8	{
if	15:12	17:68	8	(! codec -> codec_tag)
cond	15:16	15:24	9	! codec -> codec_tag
op	15:16	0:0	10	!
water	15:17	0:0	10	codec
op	15:22	0:0	10	->
water	15:24	0:0	10	codec_tag
stmts	16:16	17:68	9	
water	16:16	0:0	10	codec
op	16:21	0:0	10	->
water	16:23	0:0	10	codec_tag
op	16:33	0:0	10	=
call	16:35	17:67	10	ff_codec_get_tag
arg	16:52	16:74	11	ff_codec_movvideo_tags
water	16:52	0:0	12	ff_codec_movvideo_tags
arg	17:52	17:67	11	codec->codec_id
water	17:52	0:0	12	codec
op	17:57	0:0	12	->
water	17:59	0:0	12	codec_id
water	17:68	0:0	10	;
if	18:12	29:12	8	(codec -> extradata_size)
cond	18:16	18:23	9	codec -> extradata_size
water	18:16	0:0	10	codec
op	18:21	0:0	10	->
water	18:23	0:0	10	extradata_size
stmts	18:39	29:12	9	
water	18:39	0:0	10	{
if	19:16	27:16	10	(ff_codec_get_id (ff_codec_movvideo_tags ,codec -> codec_tag ) == codec -> codec_id &&ff_codec_get_id (ff_codec_movvideo_tags ,AV_RL32 (codec -> extradata + 4 ) ) != codec -> codec_id)
cond	19:23	20:104	11	ff_codec_get_id (ff_codec_movvideo_tags ,codec -> codec_tag ) == codec -> codec_id &&ff_codec_get_id (ff_codec_movvideo_tags ,AV_RL32 (codec -> extradata + 4 ) ) != codec -> codec_id
call	19:23	19:79	12	ff_codec_get_id
arg	19:39	19:61	13	ff_codec_movvideo_tags
water	19:39	0:0	14	ff_codec_movvideo_tags
arg	19:63	19:79	13	codec->codec_tag
water	19:63	0:0	14	codec
op	19:68	0:0	14	->
water	19:70	0:0	14	codec_tag
op	19:81	0:0	12	==
water	19:84	0:0	12	codec
op	19:89	0:0	12	->
water	19:91	0:0	12	codec_id
op	20:20	0:0	12	&&
call	20:23	20:92	12	ff_codec_get_id
arg	20:39	20:61	13	ff_codec_movvideo_tags
water	20:39	0:0	14	ff_codec_movvideo_tags
arg	20:63	20:92	13	AV_RL32(codec->extradata+4)
call	20:63	20:91	14	AV_RL32
arg	20:71	20:91	15	codec->extradata+4
water	20:71	0:0	16	codec
op	20:76	0:0	16	->
water	20:78	0:0	16	extradata
op	20:88	0:0	16	+
water	20:90	0:0	16	4
op	20:94	0:0	12	!=
water	20:97	0:0	12	codec
op	20:102	0:0	12	->
water	20:104	0:0	12	codec_id
stmts	21:18	27:16	11	
water	21:18	0:0	12	{
decl	22:20	22:25	12	int	i
call	23:20	23:66	12	avio_wb32
arg	23:30	23:36	13	dyn_cp
water	23:30	0:0	14	dyn_cp
arg	23:38	23:66	13	0x5a+codec->extradata_size
water	23:38	0:0	14	0
water	23:39	0:0	14	x5a
op	23:43	0:0	14	+
water	23:45	0:0	14	codec
op	23:50	0:0	14	->
water	23:52	0:0	14	extradata_size
water	23:67	0:0	12	;
call	24:20	24:54	12	avio_wl32
arg	24:30	24:36	13	dyn_cp
water	24:30	0:0	14	dyn_cp
arg	24:38	24:54	13	codec->codec_tag
water	24:38	0:0	14	codec
op	24:43	0:0	14	->
water	24:45	0:0	14	codec_tag
water	24:55	0:0	12	;
for	25:20	26:42	12	(i = 0 ;i < 0 x5a - 8;i ++)
forinit	25:24	25:29	13	i = 0 ;
water	25:24	0:0	14	i
op	25:26	0:0	14	=
water	25:28	0:0	14	0
water	25:29	0:0	14	;
cond	25:31	25:42	13	i < 0 x5a - 8
water	25:31	0:0	14	i
op	25:33	0:0	14	<
water	25:35	0:0	14	0
water	25:36	0:0	14	x5a
op	25:40	0:0	14	-
water	25:42	0:0	14	8
forexpr	25:45	25:46	13	i ++
water	25:45	0:0	14	i
op	25:46	0:0	14	++
stmts	26:24	26:42	13	
call	26:24	26:41	14	avio_w8
arg	26:32	26:38	15	dyn_cp
water	26:32	0:0	16	dyn_cp
arg	26:40	26:41	15	0
water	26:40	0:0	16	0
water	26:42	0:0	14	;
water	27:16	0:0	12	}
call	28:16	28:74	10	avio_write
arg	28:27	28:33	11	dyn_cp
water	28:27	0:0	12	dyn_cp
arg	28:35	28:51	11	codec->extradata
water	28:35	0:0	12	codec
op	28:40	0:0	12	->
water	28:42	0:0	12	extradata
arg	28:53	28:74	11	codec->extradata_size
water	28:53	0:0	12	codec
op	28:58	0:0	12	->
water	28:60	0:0	12	extradata_size
water	28:75	0:0	10	;
water	29:12	0:0	10	}
water	30:8	0:0	8	}
else	30:10	43:8	6
stmts	30:15	43:8	7	
water	30:15	0:0	8	{
if	31:12	33:57	8	(!ff_codec_get_tag (ff_codec_bmp_tags ,codec -> codec_id ))
cond	31:16	31:68	9	!ff_codec_get_tag (ff_codec_bmp_tags ,codec -> codec_id )
op	31:16	0:0	10	!
call	31:17	31:68	10	ff_codec_get_tag
arg	31:34	31:51	11	ff_codec_bmp_tags
water	31:34	0:0	12	ff_codec_bmp_tags
arg	31:53	31:68	11	codec->codec_id
water	31:53	0:0	12	codec
op	31:58	0:0	12	->
water	31:60	0:0	12	codec_id
stmts	32:16	33:57	9	
call	32:16	33:56	10	av_log
arg	32:23	32:24	11	s
water	32:23	0:0	12	s
arg	32:26	32:40	11	AV_LOG_WARNING
water	32:26	0:0	12	AV_LOG_WARNING
arg	32:42	32:86	11	"codec %s is not supported by this format\n"
water	32:42	0:0	12	"codec %s is not supported by this format\n"
arg	33:23	33:56	11	avcodec_get_name(codec->codec_id)
call	33:23	33:55	12	avcodec_get_name
arg	33:40	33:55	13	codec->codec_id
water	33:40	0:0	14	codec
op	33:45	0:0	14	->
water	33:47	0:0	14	codec_id
water	33:57	0:0	10	;
if	34:12	36:68	8	(! codec -> codec_tag)
cond	34:16	34:24	9	! codec -> codec_tag
op	34:16	0:0	10	!
water	34:17	0:0	10	codec
op	34:22	0:0	10	->
water	34:24	0:0	10	codec_tag
stmts	35:16	36:68	9	
water	35:16	0:0	10	codec
op	35:21	0:0	10	->
water	35:23	0:0	10	codec_tag
op	35:33	0:0	10	=
call	35:35	36:67	10	ff_codec_get_tag
arg	35:52	35:69	11	ff_codec_bmp_tags
water	35:52	0:0	12	ff_codec_bmp_tags
arg	36:52	36:67	11	codec->codec_id
water	36:52	0:0	12	codec
op	36:57	0:0	12	->
water	36:59	0:0	12	codec_id
water	36:68	0:0	10	;
if	37:12	41:12	8	(! codec -> codec_tag && codec -> codec_id != AV_CODEC_ID_RAWVIDEO)
cond	37:16	37:56	9	! codec -> codec_tag && codec -> codec_id != AV_CODEC_ID_RAWVIDEO
op	37:16	0:0	10	!
water	37:17	0:0	10	codec
op	37:22	0:0	10	->
water	37:24	0:0	10	codec_tag
op	37:34	0:0	10	&&
water	37:37	0:0	10	codec
op	37:42	0:0	10	->
water	37:44	0:0	10	codec_id
op	37:53	0:0	10	!=
water	37:56	0:0	10	AV_CODEC_ID_RAWVIDEO
stmts	37:78	41:12	9	
water	37:78	0:0	10	{
call	38:16	39:56	10	av_log
arg	38:23	38:24	11	s
water	38:23	0:0	12	s
arg	38:26	38:38	11	AV_LOG_ERROR
water	38:26	0:0	12	AV_LOG_ERROR
arg	38:40	38:79	11	"No bmp codec tag found for codec %s\n"
water	38:40	0:0	12	"No bmp codec tag found for codec %s\n"
arg	39:23	39:56	11	avcodec_get_name(codec->codec_id)
call	39:23	39:55	12	avcodec_get_name
arg	39:40	39:55	13	codec->codec_id
water	39:40	0:0	14	codec
op	39:45	0:0	14	->
water	39:47	0:0	14	codec_id
water	39:57	0:0	10	;
water	40:16	0:0	10	ret
op	40:20	0:0	10	=
call	40:22	40:36	10	AVERROR
arg	40:30	40:36	11	EINVAL
water	40:30	0:0	12	EINVAL
water	40:37	0:0	10	;
water	41:12	0:0	10	}
call	42:12	42:68	8	ff_put_bmp_header
arg	42:30	42:36	9	dyn_cp
water	42:30	0:0	10	dyn_cp
arg	42:38	42:43	9	codec
water	42:38	0:0	10	codec
arg	42:45	42:62	9	ff_codec_bmp_tags
water	42:45	0:0	10	ff_codec_bmp_tags
arg	42:64	42:65	9	0
water	42:64	0:0	10	0
arg	42:67	42:68	9	0
water	42:67	0:0	10	0
water	42:69	0:0	8	;
water	43:8	0:0	8	}
water	44:4	0:0	6	}
else	44:6	55:4	2
stmts	44:11	55:4	3	
if	44:11	55:4	4	(codec -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	44:15	44:36	5	codec -> codec_type == AVMEDIA_TYPE_AUDIO
water	44:15	0:0	6	codec
op	44:20	0:0	6	->
water	44:22	0:0	6	codec_type
op	44:33	0:0	6	==
water	44:36	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	44:56	55:4	5	
water	44:56	0:0	6	{
decl	45:8	45:24	6	unsigned int	tag
water	46:8	0:0	6	tag
op	46:12	0:0	6	=
call	46:14	46:65	6	ff_codec_get_tag
arg	46:31	46:48	7	ff_codec_wav_tags
water	46:31	0:0	8	ff_codec_wav_tags
arg	46:50	46:65	7	codec->codec_id
water	46:50	0:0	8	codec
op	46:55	0:0	8	->
water	46:57	0:0	8	codec_id
water	46:66	0:0	6	;
if	47:8	51:8	6	(! tag)
cond	47:12	47:13	7	! tag
op	47:12	0:0	8	!
water	47:13	0:0	8	tag
stmts	47:18	51:8	7	
water	47:18	0:0	8	{
call	48:12	49:52	8	av_log
arg	48:19	48:20	9	s
water	48:19	0:0	10	s
arg	48:22	48:34	9	AV_LOG_ERROR
water	48:22	0:0	10	AV_LOG_ERROR
arg	48:36	48:75	9	"No wav codec tag found for codec %s\n"
water	48:36	0:0	10	"No wav codec tag found for codec %s\n"
arg	49:19	49:52	9	avcodec_get_name(codec->codec_id)
call	49:19	49:51	10	avcodec_get_name
arg	49:36	49:51	11	codec->codec_id
water	49:36	0:0	12	codec
op	49:41	0:0	12	->
water	49:43	0:0	12	codec_id
water	49:53	0:0	8	;
water	50:12	0:0	8	ret
op	50:16	0:0	8	=
call	50:18	50:32	8	AVERROR
arg	50:26	50:32	9	EINVAL
water	50:26	0:0	10	EINVAL
water	50:33	0:0	8	;
water	51:8	0:0	8	}
if	52:8	53:34	6	(! codec -> codec_tag)
cond	52:12	52:20	7	! codec -> codec_tag
op	52:12	0:0	8	!
water	52:13	0:0	8	codec
op	52:18	0:0	8	->
water	52:20	0:0	8	codec_tag
stmts	53:12	53:34	7	
water	53:12	0:0	8	codec
op	53:17	0:0	8	->
water	53:19	0:0	8	codec_tag
op	53:29	0:0	8	=
water	53:31	0:0	8	tag
water	53:34	0:0	8	;
call	54:8	54:77	6	ff_put_wav_header
arg	54:26	54:32	7	dyn_cp
water	54:26	0:0	8	dyn_cp
arg	54:34	54:39	7	codec
water	54:34	0:0	8	codec
arg	54:41	54:77	7	FF_PUT_WAV_HEADER_FORCE_WAVEFORMATEX
water	54:41	0:0	8	FF_PUT_WAV_HEADER_FORCE_WAVEFORMATEX
water	54:78	0:0	6	;
water	55:4	0:0	6	}
water	56:4	0:0	2	codecpriv_size
op	56:19	0:0	2	=
call	56:21	56:58	2	avio_close_dyn_buf
arg	56:40	56:46	3	dyn_cp
water	56:40	0:0	4	dyn_cp
arg	56:48	56:58	3	&codecpriv
op	56:48	0:0	4	&
water	56:49	0:0	4	codecpriv
water	56:59	0:0	2	;
if	57:4	59:39	2	(codecpriv_size)
cond	57:8	57:8	3	codecpriv_size
water	57:8	0:0	4	codecpriv_size
stmts	58:8	59:39	3	
call	58:8	59:38	4	put_ebml_binary
arg	58:24	58:26	5	pb
water	58:24	0:0	6	pb
arg	58:28	58:52	5	MATROSKA_ID_CODECPRIVATE
water	58:28	0:0	6	MATROSKA_ID_CODECPRIVATE
arg	58:54	58:63	5	codecpriv
water	58:54	0:0	6	codecpriv
arg	59:24	59:38	5	codecpriv_size
water	59:24	0:0	6	codecpriv_size
water	59:39	0:0	4	;
call	60:4	60:21	2	av_free
arg	60:12	60:21	3	codecpriv
water	60:12	0:0	4	codecpriv
water	60:22	0:0	2	;
return	61:4	61:14	2	ret
water	61:11	0:0	3	ret
