func	1:0	28:0	0	static int	graph_check_validity
params	1:31	0:0	1	
param	1:32	1:52	2	AVFilterGraph *	graph
param	1:54	1:70	2	AVClass *	log_ctx
stmnts	0:0	27:12	1	
decl	3:4	3:25	2	AVFilterContext	*filt
decl	4:4	4:12	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:12	2	int	j
for	5:4	26:4	2	(i = 0 ;i < graph -> nb_filters;i ++)
forinit	5:9	5:14	3	i = 0 ;
water	5:9	0:0	4	i
op	5:11	0:0	4	=
water	5:13	0:0	4	0
water	5:14	0:0	4	;
cond	5:16	5:27	3	i < graph -> nb_filters
water	5:16	0:0	4	i
op	5:18	0:0	4	<
water	5:20	0:0	4	graph
op	5:25	0:0	4	->
water	5:27	0:0	4	nb_filters
forexpr	5:39	5:40	3	i ++
water	5:39	0:0	4	i
op	5:40	0:0	4	++
stmts	5:44	26:4	3	
water	5:44	0:0	4	{
decl	6:8	6:30	4	const AVFilterPad	*pad
water	7:8	0:0	4	filt
op	7:13	0:0	4	=
water	7:15	0:0	4	graph
op	7:20	0:0	4	->
water	7:22	0:0	4	filters
op	7:29	0:0	4	[
water	7:30	0:0	4	i
op	7:31	0:0	4	]
water	7:32	0:0	4	;
for	8:8	16:8	4	(j = 0 ;j < filt -> nb_inputs;j ++)
forinit	8:13	8:18	5	j = 0 ;
water	8:13	0:0	6	j
op	8:15	0:0	6	=
water	8:17	0:0	6	0
water	8:18	0:0	6	;
cond	8:20	8:30	5	j < filt -> nb_inputs
water	8:20	0:0	6	j
op	8:22	0:0	6	<
water	8:24	0:0	6	filt
op	8:28	0:0	6	->
water	8:30	0:0	6	nb_inputs
forexpr	8:41	8:42	5	j ++
water	8:41	0:0	6	j
op	8:42	0:0	6	++
stmts	8:46	16:8	5	
water	8:46	0:0	6	{
if	9:12	15:12	6	(! filt -> inputs [ j ] || ! filt -> inputs [ j ] -> src)
cond	9:16	9:54	7	! filt -> inputs [ j ] || ! filt -> inputs [ j ] -> src
op	9:16	0:0	8	!
water	9:17	0:0	8	filt
op	9:21	0:0	8	->
water	9:23	0:0	8	inputs
op	9:29	0:0	8	[
water	9:30	0:0	8	j
op	9:31	0:0	8	]
op	9:33	0:0	8	||
op	9:36	0:0	8	!
water	9:37	0:0	8	filt
op	9:41	0:0	8	->
water	9:43	0:0	8	inputs
op	9:49	0:0	8	[
water	9:50	0:0	8	j
op	9:51	0:0	8	]
op	9:52	0:0	8	->
water	9:54	0:0	8	src
stmts	9:59	15:12	7	
water	9:59	0:0	8	{
water	10:16	0:0	8	pad
op	10:20	0:0	8	=
op	10:22	0:0	8	&
water	10:23	0:0	8	filt
op	10:27	0:0	8	->
water	10:29	0:0	8	input_pads
op	10:39	0:0	8	[
water	10:40	0:0	8	j
op	10:41	0:0	8	]
water	10:42	0:0	8	;
call	11:16	13:101	8	av_log
arg	11:23	11:30	9	log_ctx
water	11:23	0:0	10	log_ctx
arg	11:32	11:44	9	AV_LOG_ERROR
water	11:32	0:0	10	AV_LOG_ERROR
arg	12:23	12:120	9	"Input pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any source\n"
water	12:23	0:0	10	"Input pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any source\n"
arg	13:23	13:32	9	pad->name
water	13:23	0:0	10	pad
op	13:26	0:0	10	->
water	13:28	0:0	10	name
arg	13:34	13:69	9	av_get_media_type_string(pad->type)
call	13:34	13:68	10	av_get_media_type_string
arg	13:59	13:68	11	pad->type
water	13:59	0:0	12	pad
op	13:62	0:0	12	->
water	13:64	0:0	12	type
arg	13:71	13:81	9	filt->name
water	13:71	0:0	10	filt
op	13:75	0:0	10	->
water	13:77	0:0	10	name
arg	13:83	13:101	9	filt->filter->name
water	13:83	0:0	10	filt
op	13:87	0:0	10	->
water	13:89	0:0	10	filter
op	13:95	0:0	10	->
water	13:97	0:0	10	name
water	13:102	0:0	8	;
return	14:16	14:38	8	AVERROR(EINVAL)
call	14:23	14:37	9	AVERROR
arg	14:31	14:37	10	EINVAL
water	14:31	0:0	11	EINVAL
water	15:12	0:0	8	}
water	16:8	0:0	6	}
for	17:8	25:8	4	(j = 0 ;j < filt -> nb_outputs;j ++)
forinit	17:13	17:18	5	j = 0 ;
water	17:13	0:0	6	j
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:30	5	j < filt -> nb_outputs
water	17:20	0:0	6	j
op	17:22	0:0	6	<
water	17:24	0:0	6	filt
op	17:28	0:0	6	->
water	17:30	0:0	6	nb_outputs
forexpr	17:42	17:43	5	j ++
water	17:42	0:0	6	j
op	17:43	0:0	6	++
stmts	17:47	25:8	5	
water	17:47	0:0	6	{
if	18:12	24:12	6	(! filt -> outputs [ j ] || ! filt -> outputs [ j ] -> dst)
cond	18:16	18:56	7	! filt -> outputs [ j ] || ! filt -> outputs [ j ] -> dst
op	18:16	0:0	8	!
water	18:17	0:0	8	filt
op	18:21	0:0	8	->
water	18:23	0:0	8	outputs
op	18:30	0:0	8	[
water	18:31	0:0	8	j
op	18:32	0:0	8	]
op	18:34	0:0	8	||
op	18:37	0:0	8	!
water	18:38	0:0	8	filt
op	18:42	0:0	8	->
water	18:44	0:0	8	outputs
op	18:51	0:0	8	[
water	18:52	0:0	8	j
op	18:53	0:0	8	]
op	18:54	0:0	8	->
water	18:56	0:0	8	dst
stmts	18:61	24:12	7	
water	18:61	0:0	8	{
water	19:16	0:0	8	pad
op	19:20	0:0	8	=
op	19:22	0:0	8	&
water	19:23	0:0	8	filt
op	19:27	0:0	8	->
water	19:29	0:0	8	output_pads
op	19:40	0:0	8	[
water	19:41	0:0	8	j
op	19:42	0:0	8	]
water	19:43	0:0	8	;
call	20:16	22:101	8	av_log
arg	20:23	20:30	9	log_ctx
water	20:23	0:0	10	log_ctx
arg	20:32	20:44	9	AV_LOG_ERROR
water	20:32	0:0	10	AV_LOG_ERROR
arg	21:23	21:126	9	"Output pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any destination\n"
water	21:23	0:0	10	"Output pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any destination\n"
arg	22:23	22:32	9	pad->name
water	22:23	0:0	10	pad
op	22:26	0:0	10	->
water	22:28	0:0	10	name
arg	22:34	22:69	9	av_get_media_type_string(pad->type)
call	22:34	22:68	10	av_get_media_type_string
arg	22:59	22:68	11	pad->type
water	22:59	0:0	12	pad
op	22:62	0:0	12	->
water	22:64	0:0	12	type
arg	22:71	22:81	9	filt->name
water	22:71	0:0	10	filt
op	22:75	0:0	10	->
water	22:77	0:0	10	name
arg	22:83	22:101	9	filt->filter->name
water	22:83	0:0	10	filt
op	22:87	0:0	10	->
water	22:89	0:0	10	filter
op	22:95	0:0	10	->
water	22:97	0:0	10	name
water	22:102	0:0	8	;
return	23:16	23:38	8	AVERROR(EINVAL)
call	23:23	23:37	9	AVERROR
arg	23:31	23:37	10	EINVAL
water	23:31	0:0	11	EINVAL
water	24:12	0:0	8	}
water	25:8	0:0	6	}
water	26:4	0:0	4	}
return	27:4	27:12	2	0
water	27:11	0:0	3	0
