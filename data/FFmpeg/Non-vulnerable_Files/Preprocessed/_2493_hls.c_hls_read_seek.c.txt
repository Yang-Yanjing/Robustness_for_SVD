func	1:0	67:0	0	static int	hls_read_seek
params	1:24	0:0	1	
param	1:25	1:43	2	AVFormatContext *	s
param	1:45	1:61	2	int	stream_index
param	2:31	2:48	2	int64_t	timestamp
param	2:50	2:59	2	int	flags
stmnts	0:0	66:12	1	
decl	4:4	4:32	2	HLSContext	*c
op	4:18	0:0	2	=
water	4:20	0:0	2	s
op	4:21	0:0	2	->
water	4:23	0:0	2	priv_data
decl	5:4	5:36	2	struct playlist	*seek_pls
op	5:30	0:0	2	=
water	5:32	0:0	2	NULL
decl	6:4	6:17	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:17	2	int	seq_no
decl	7:4	7:53	2	int64_t	first_timestamp
water	7:27	0:0	2	,
decl	7:4	7:53	2	int64_t	seek_timestamp
water	7:43	0:0	2	,
decl	7:4	7:53	2	int64_t	duration
if	8:4	10:30	2	(( flags & AVSEEK_FLAG_BYTE ) || ! ( c -> variants [ 0 ] -> playlists [ 0 ] -> finished || c -> variants [ 0 ] -> playlists [ 0 ] -> type == PLS_TYPE_EVENT ))
cond	8:8	9:104	3	( flags & AVSEEK_FLAG_BYTE ) || ! ( c -> variants [ 0 ] -> playlists [ 0 ] -> finished || c -> variants [ 0 ] -> playlists [ 0 ] -> type == PLS_TYPE_EVENT )
water	8:8	0:0	4	(
water	8:9	0:0	4	flags
op	8:15	0:0	4	&
water	8:17	0:0	4	AVSEEK_FLAG_BYTE
water	8:33	0:0	4	)
op	8:35	0:0	4	||
op	9:8	0:0	4	!
water	9:9	0:0	4	(
water	9:10	0:0	4	c
op	9:11	0:0	4	->
water	9:13	0:0	4	variants
op	9:21	0:0	4	[
water	9:22	0:0	4	0
op	9:23	0:0	4	]
op	9:24	0:0	4	->
water	9:26	0:0	4	playlists
op	9:35	0:0	4	[
water	9:36	0:0	4	0
op	9:37	0:0	4	]
op	9:38	0:0	4	->
water	9:40	0:0	4	finished
op	9:49	0:0	4	||
water	9:52	0:0	4	c
op	9:53	0:0	4	->
water	9:55	0:0	4	variants
op	9:63	0:0	4	[
water	9:64	0:0	4	0
op	9:65	0:0	4	]
op	9:66	0:0	4	->
water	9:68	0:0	4	playlists
op	9:77	0:0	4	[
water	9:78	0:0	4	0
op	9:79	0:0	4	]
op	9:80	0:0	4	->
water	9:82	0:0	4	type
op	9:87	0:0	4	==
water	9:90	0:0	4	PLS_TYPE_EVENT
water	9:104	0:0	4	)
stmts	10:8	10:30	3	
return	10:8	10:30	4	AVERROR(ENOSYS)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	ENOSYS
water	10:23	0:0	7	ENOSYS
water	11:4	0:0	2	first_timestamp
op	11:20	0:0	2	=
water	11:22	0:0	2	c
op	11:23	0:0	2	->
water	11:25	0:0	2	first_timestamp
op	11:41	0:0	2	==
water	11:44	0:0	2	AV_NOPTS_VALUE
water	11:59	0:0	2	?
water	12:22	0:0	2	0
water	12:24	0:0	2	:
water	12:26	0:0	2	c
op	12:27	0:0	2	->
water	12:29	0:0	2	first_timestamp
water	12:44	0:0	2	;
water	13:4	0:0	2	seek_timestamp
op	13:19	0:0	2	=
call	13:21	16:63	2	av_rescale_rnd
arg	13:36	13:45	3	timestamp
water	13:36	0:0	4	timestamp
arg	13:47	13:59	3	AV_TIME_BASE
water	13:47	0:0	4	AV_TIME_BASE
arg	14:36	14:75	3	s->streams[stream_index]->time_base.den
water	14:36	0:0	4	s
op	14:37	0:0	4	->
water	14:39	0:0	4	streams
op	14:46	0:0	4	[
water	14:47	0:0	4	stream_index
op	14:59	0:0	4	]
op	14:60	0:0	4	->
water	14:62	0:0	4	time_base
op	14:71	0:0	4	.
water	14:72	0:0	4	den
arg	15:36	16:63	3	flags&AVSEEK_FLAG_BACKWARD?AV_ROUND_DOWN:AV_ROUND_UP
water	15:36	0:0	4	flags
op	15:42	0:0	4	&
water	15:44	0:0	4	AVSEEK_FLAG_BACKWARD
water	15:65	0:0	4	?
water	16:36	0:0	4	AV_ROUND_DOWN
water	16:50	0:0	4	:
water	16:52	0:0	4	AV_ROUND_UP
water	16:64	0:0	2	;
water	17:4	0:0	2	duration
op	17:13	0:0	2	=
water	17:15	0:0	2	s
op	17:16	0:0	2	->
water	17:18	0:0	2	duration
op	17:27	0:0	2	==
water	17:30	0:0	2	AV_NOPTS_VALUE
water	17:45	0:0	2	?
water	18:15	0:0	2	0
water	18:17	0:0	2	:
water	18:19	0:0	2	s
op	18:20	0:0	2	->
water	18:22	0:0	2	duration
water	18:30	0:0	2	;
if	19:4	20:27	2	(0 < duration && duration < seek_timestamp - first_timestamp)
cond	19:8	19:52	3	0 < duration && duration < seek_timestamp - first_timestamp
water	19:8	0:0	4	0
op	19:10	0:0	4	<
water	19:12	0:0	4	duration
op	19:21	0:0	4	&&
water	19:24	0:0	4	duration
op	19:33	0:0	4	<
water	19:35	0:0	4	seek_timestamp
op	19:50	0:0	4	-
water	19:52	0:0	4	first_timestamp
stmts	20:8	20:27	3	
return	20:8	20:27	4	AVERROR(EIO)
call	20:15	20:26	5	AVERROR
arg	20:23	20:26	6	EIO
water	20:23	0:0	7	EIO
for	22:4	29:4	2	(i = 0 ;i < c -> n_playlists;i ++)
forinit	22:9	22:14	3	i = 0 ;
water	22:9	0:0	4	i
op	22:11	0:0	4	=
water	22:13	0:0	4	0
water	22:14	0:0	4	;
cond	22:16	22:23	3	i < c -> n_playlists
water	22:16	0:0	4	i
op	22:18	0:0	4	<
water	22:20	0:0	4	c
op	22:21	0:0	4	->
water	22:23	0:0	4	n_playlists
forexpr	22:36	22:37	3	i ++
water	22:36	0:0	4	i
op	22:37	0:0	4	++
stmts	22:41	29:4	3	
water	22:41	0:0	4	{
decl	23:8	23:46	4	struct playlist	*pls
op	23:29	0:0	4	=
water	23:31	0:0	4	c
op	23:32	0:0	4	->
water	23:34	0:0	4	playlists
op	23:43	0:0	4	[
water	23:44	0:0	4	i
op	23:45	0:0	4	]
if	24:8	28:8	4	(stream_index >= pls -> stream_offset && stream_index - pls -> stream_offset < pls -> ctx -> nb_streams)
cond	24:12	25:58	5	stream_index >= pls -> stream_offset && stream_index - pls -> stream_offset < pls -> ctx -> nb_streams
water	24:12	0:0	6	stream_index
op	24:25	0:0	6	>=
water	24:28	0:0	6	pls
op	24:31	0:0	6	->
water	24:33	0:0	6	stream_offset
op	24:47	0:0	6	&&
water	25:12	0:0	6	stream_index
op	25:25	0:0	6	-
water	25:27	0:0	6	pls
op	25:30	0:0	6	->
water	25:32	0:0	6	stream_offset
op	25:46	0:0	6	<
water	25:48	0:0	6	pls
op	25:51	0:0	6	->
water	25:53	0:0	6	ctx
op	25:56	0:0	6	->
water	25:58	0:0	6	nb_streams
stmts	25:70	28:8	5	
water	25:70	0:0	6	{
water	26:12	0:0	6	seek_pls
op	26:21	0:0	6	=
water	26:23	0:0	6	pls
water	26:26	0:0	6	;
break	27:12	27:17	6	
water	28:8	0:0	6	}
water	29:4	0:0	4	}
if	32:4	33:27	2	(! seek_pls || !find_timestamp_in_playlist (c ,seek_pls ,seek_timestamp ,& seq_no ))
cond	32:8	32:85	3	! seek_pls || !find_timestamp_in_playlist (c ,seek_pls ,seek_timestamp ,& seq_no )
op	32:8	0:0	4	!
water	32:9	0:0	4	seek_pls
op	32:18	0:0	4	||
op	32:21	0:0	4	!
call	32:22	32:85	4	find_timestamp_in_playlist
arg	32:49	32:50	5	c
water	32:49	0:0	6	c
arg	32:52	32:60	5	seek_pls
water	32:52	0:0	6	seek_pls
arg	32:62	32:76	5	seek_timestamp
water	32:62	0:0	6	seek_timestamp
arg	32:78	32:85	5	&seq_no
op	32:78	0:0	6	&
water	32:79	0:0	6	seq_no
stmts	33:8	33:27	3	
return	33:8	33:27	4	AVERROR(EIO)
call	33:15	33:26	5	AVERROR
arg	33:23	33:26	6	EIO
water	33:23	0:0	7	EIO
water	35:4	0:0	2	seek_pls
op	35:12	0:0	2	->
water	35:14	0:0	2	cur_seq_no
op	35:25	0:0	2	=
water	35:27	0:0	2	seq_no
water	35:33	0:0	2	;
water	36:4	0:0	2	seek_pls
op	36:12	0:0	2	->
water	36:14	0:0	2	seek_stream_index
op	36:32	0:0	2	=
water	36:34	0:0	2	stream_index
op	36:47	0:0	2	-
water	36:49	0:0	2	seek_pls
op	36:57	0:0	2	->
water	36:59	0:0	2	stream_offset
water	36:72	0:0	2	;
for	37:4	64:4	2	(i = 0 ;i < c -> n_playlists;i ++)
forinit	37:9	37:14	3	i = 0 ;
water	37:9	0:0	4	i
op	37:11	0:0	4	=
water	37:13	0:0	4	0
water	37:14	0:0	4	;
cond	37:16	37:23	3	i < c -> n_playlists
water	37:16	0:0	4	i
op	37:18	0:0	4	<
water	37:20	0:0	4	c
op	37:21	0:0	4	->
water	37:23	0:0	4	n_playlists
forexpr	37:36	37:37	3	i ++
water	37:36	0:0	4	i
op	37:37	0:0	4	++
stmts	37:41	64:4	3	
water	37:41	0:0	4	{
decl	39:8	39:46	4	struct playlist	*pls
op	39:29	0:0	4	=
water	39:31	0:0	4	c
op	39:32	0:0	4	->
water	39:34	0:0	4	playlists
op	39:43	0:0	4	[
water	39:44	0:0	4	i
op	39:45	0:0	4	]
if	40:8	43:8	4	(pls -> input)
cond	40:12	40:17	5	pls -> input
water	40:12	0:0	6	pls
op	40:15	0:0	6	->
water	40:17	0:0	6	input
stmts	40:24	43:8	5	
water	40:24	0:0	6	{
call	41:12	41:34	6	ffurl_close
arg	41:24	41:34	7	pls->input
water	41:24	0:0	8	pls
op	41:27	0:0	8	->
water	41:29	0:0	8	input
water	41:35	0:0	6	;
water	42:12	0:0	6	pls
op	42:15	0:0	6	->
water	42:17	0:0	6	input
op	42:23	0:0	6	=
water	42:25	0:0	6	NULL
water	42:29	0:0	6	;
water	43:8	0:0	6	}
call	44:8	44:32	4	av_free_packet
arg	44:23	44:32	5	&pls->pkt
op	44:23	0:0	6	&
water	44:24	0:0	6	pls
op	44:27	0:0	6	->
water	44:29	0:0	6	pkt
water	44:33	0:0	4	;
call	45:8	45:30	4	reset_packet
arg	45:21	45:30	5	&pls->pkt
op	45:21	0:0	6	&
water	45:22	0:0	6	pls
op	45:25	0:0	6	->
water	45:27	0:0	6	pkt
water	45:31	0:0	4	;
water	46:8	0:0	4	pls
op	46:11	0:0	4	->
water	46:13	0:0	4	pb
op	46:15	0:0	4	.
water	46:16	0:0	4	eof_reached
op	46:28	0:0	4	=
water	46:30	0:0	4	0
water	46:31	0:0	4	;
water	48:8	0:0	4	pls
op	48:11	0:0	4	->
water	48:13	0:0	4	pb
op	48:15	0:0	4	.
water	48:16	0:0	4	buf_end
op	48:24	0:0	4	=
water	48:26	0:0	4	pls
op	48:29	0:0	4	->
water	48:31	0:0	4	pb
op	48:33	0:0	4	.
water	48:34	0:0	4	buf_ptr
op	48:42	0:0	4	=
water	48:44	0:0	4	pls
op	48:47	0:0	4	->
water	48:49	0:0	4	pb
op	48:51	0:0	4	.
water	48:52	0:0	4	buffer
water	48:58	0:0	4	;
water	50:8	0:0	4	pls
op	50:11	0:0	4	->
water	50:13	0:0	4	pb
op	50:15	0:0	4	.
water	50:16	0:0	4	pos
op	50:20	0:0	4	=
water	50:22	0:0	4	0
water	50:23	0:0	4	;
call	52:8	52:36	4	ff_read_frame_flush
arg	52:28	52:36	5	pls->ctx
water	52:28	0:0	6	pls
op	52:31	0:0	6	->
water	52:33	0:0	6	ctx
water	52:37	0:0	4	;
water	53:8	0:0	4	pls
op	53:11	0:0	4	->
water	53:13	0:0	4	seek_timestamp
op	53:28	0:0	4	=
water	53:30	0:0	4	seek_timestamp
water	53:44	0:0	4	;
water	54:8	0:0	4	pls
op	54:11	0:0	4	->
water	54:13	0:0	4	seek_flags
op	54:24	0:0	4	=
water	54:26	0:0	4	flags
water	54:31	0:0	4	;
if	55:8	63:8	4	(pls != seek_pls)
cond	55:12	55:19	5	pls != seek_pls
water	55:12	0:0	6	pls
op	55:16	0:0	6	!=
water	55:19	0:0	6	seek_pls
stmts	55:29	63:8	5	
water	55:29	0:0	6	{
call	57:12	57:79	6	find_timestamp_in_playlist
arg	57:39	57:40	7	c
water	57:39	0:0	8	c
arg	57:42	57:45	7	pls
water	57:42	0:0	8	pls
arg	57:47	57:61	7	seek_timestamp
water	57:47	0:0	8	seek_timestamp
arg	57:63	57:79	7	&pls->cur_seq_no
op	57:63	0:0	8	&
water	57:64	0:0	8	pls
op	57:67	0:0	8	->
water	57:69	0:0	8	cur_seq_no
water	57:80	0:0	6	;
water	61:12	0:0	6	pls
op	61:15	0:0	6	->
water	61:17	0:0	6	seek_stream_index
op	61:35	0:0	6	=
op	61:37	0:0	6	-
water	61:38	0:0	6	1
water	61:39	0:0	6	;
water	62:12	0:0	6	pls
op	62:15	0:0	6	->
water	62:17	0:0	6	seek_flags
op	62:28	0:0	6	|=
water	62:31	0:0	6	AVSEEK_FLAG_ANY
water	62:46	0:0	6	;
water	63:8	0:0	6	}
water	64:4	0:0	4	}
water	65:4	0:0	2	c
op	65:5	0:0	2	->
water	65:7	0:0	2	cur_timestamp
op	65:21	0:0	2	=
water	65:23	0:0	2	seek_timestamp
water	65:37	0:0	2	;
return	66:4	66:12	2	0
water	66:11	0:0	3	0
