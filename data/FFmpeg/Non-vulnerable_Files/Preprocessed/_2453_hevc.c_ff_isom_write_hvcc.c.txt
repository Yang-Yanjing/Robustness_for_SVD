func	1:0	50:0	0	int	ff_isom_write_hvcc
params	1:22	0:0	1	
param	1:23	1:38	2	AVIOContext *	pb
param	1:40	1:59	2	const uint8_t *	data
param	2:23	2:31	2	int	size
param	2:33	2:58	2	int	ps_array_completeness
stmnts	0:0	49:14	1	
decl	4:4	4:15	2	int	ret
op	4:12	0:0	2	=
water	4:14	0:0	2	0
decl	5:4	5:37	2	uint8_t	*buf
water	5:16	0:0	2	,
decl	5:4	5:37	2	uint8_t	*end
water	5:22	0:0	2	,
decl	5:4	5:37	2	uint8_t	*start
op	5:31	0:0	2	=
water	5:33	0:0	2	NULL
decl	6:4	6:39	2	HEVCDecoderConfigurationRecord	hvcc
call	7:4	7:19	2	hvcc_init
arg	7:14	7:19	3	&hvcc
op	7:14	0:0	4	&
water	7:15	0:0	4	hvcc
water	7:20	0:0	2	;
if	8:4	12:4	2	(size < 6)
cond	8:8	8:15	3	size < 6
water	8:8	0:0	4	size
op	8:13	0:0	4	<
water	8:15	0:0	4	6
stmts	8:18	12:4	3	
water	8:18	0:0	4	{
water	10:8	0:0	4	ret
op	10:12	0:0	4	=
water	10:14	0:0	4	AVERROR_INVALIDDATA
water	10:33	0:0	4	;
goto	11:8	11:16	4	end
water	11:13	0:0	5	end
water	12:4	0:0	4	}
else	12:6	16:4	2
stmts	12:11	16:4	3	
if	12:11	16:4	4	(* data == 1)
cond	12:15	12:24	5	* data == 1
op	12:15	0:0	6	*
water	12:16	0:0	6	data
op	12:21	0:0	6	==
water	12:24	0:0	6	1
stmts	12:27	16:4	5	
water	12:27	0:0	6	{
call	14:8	14:33	6	avio_write
arg	14:19	14:21	7	pb
water	14:19	0:0	8	pb
arg	14:23	14:27	7	data
water	14:23	0:0	8	data
arg	14:29	14:33	7	size
water	14:29	0:0	8	size
water	14:34	0:0	6	;
goto	15:8	15:16	6	end
water	15:13	0:0	7	end
water	16:4	0:0	6	}
else	16:6	20:4	2
stmts	16:11	20:4	3	
if	16:11	20:4	4	(! (AV_RB24 (data ) == 1 ||AV_RB32 (data ) == 1 ))
cond	16:15	16:57	5	! (AV_RB24 (data ) == 1 ||AV_RB32 (data ) == 1 )
op	16:15	0:0	6	!
water	16:16	0:0	6	(
call	16:17	16:29	6	AV_RB24
arg	16:25	16:29	7	data
water	16:25	0:0	8	data
op	16:31	0:0	6	==
water	16:34	0:0	6	1
op	16:36	0:0	6	||
call	16:39	16:51	6	AV_RB32
arg	16:47	16:51	7	data
water	16:47	0:0	8	data
op	16:53	0:0	6	==
water	16:56	0:0	6	1
water	16:57	0:0	6	)
stmts	16:60	20:4	5	
water	16:60	0:0	6	{
water	18:8	0:0	6	ret
op	18:12	0:0	6	=
water	18:14	0:0	6	AVERROR_INVALIDDATA
water	18:33	0:0	6	;
goto	19:8	19:16	6	end
water	19:13	0:0	7	end
water	20:4	0:0	6	}
water	21:4	0:0	2	ret
op	21:8	0:0	2	=
call	21:10	21:56	2	ff_avc_parse_nal_units_buf
arg	21:37	21:41	3	data
water	21:37	0:0	4	data
arg	21:43	21:49	3	&start
op	21:43	0:0	4	&
water	21:44	0:0	4	start
arg	21:51	21:56	3	&size
op	21:51	0:0	4	&
water	21:52	0:0	4	size
water	21:57	0:0	2	;
if	22:4	23:16	2	(ret < 0)
cond	22:8	22:14	3	ret < 0
water	22:8	0:0	4	ret
op	22:12	0:0	4	<
water	22:14	0:0	4	0
stmts	23:8	23:16	3	
goto	23:8	23:16	4	end
water	23:13	0:0	5	end
water	24:4	0:0	2	buf
op	24:8	0:0	2	=
water	24:10	0:0	2	start
water	24:15	0:0	2	;
water	25:4	0:0	2	end
op	25:8	0:0	2	=
water	25:10	0:0	2	start
op	25:16	0:0	2	+
water	25:18	0:0	2	size
water	25:22	0:0	2	;
while	26:4	44:4	2	(end - buf > 4)
cond	26:11	26:23	3	end - buf > 4
water	26:11	0:0	4	end
op	26:15	0:0	4	-
water	26:17	0:0	4	buf
op	26:21	0:0	4	>
water	26:23	0:0	4	4
stmts	26:26	44:4	3	
water	26:26	0:0	4	{
decl	27:8	27:57	4	uint32_t	len
op	27:21	0:0	4	=
call	27:23	27:56	5	FFMIN
arg	27:29	27:41	6	AV_RB32(buf)
call	27:29	27:40	7	AV_RB32
arg	27:37	27:40	8	buf
water	27:37	0:0	9	buf
arg	27:43	27:56	6	end-buf-4
water	27:43	0:0	7	end
op	27:47	0:0	7	-
water	27:49	0:0	7	buf
op	27:53	0:0	7	-
water	27:55	0:0	7	4
decl	28:8	28:43	4	uint8_t	type
op	28:21	0:0	4	=
water	28:23	0:0	4	(
water	28:24	0:0	4	buf
op	28:27	0:0	4	[
water	28:28	0:0	4	4
op	28:29	0:0	4	]
op	28:31	0:0	4	>>
water	28:34	0:0	4	1
water	28:35	0:0	4	)
op	28:37	0:0	4	&
water	28:39	0:0	4	0
water	28:40	0:0	4	x3f
water	29:8	0:0	4	buf
op	29:12	0:0	4	+=
water	29:15	0:0	4	4
water	29:16	0:0	4	;
switch	30:8	42:8	4	(type)
cond	30:16	30:16	5	type
water	30:16	0:0	6	type
stmts	30:22	42:8	5	
water	30:22	0:0	6	{
label	31:8	31:20	6	case NAL_VPS :
label	32:8	32:20	6	case NAL_SPS :
label	33:8	33:20	6	case NAL_PPS :
label	34:8	34:27	6	case NAL_SEI_PREFIX :
label	35:8	35:27	6	case NAL_SEI_SUFFIX :
water	36:12	0:0	6	ret
op	36:16	0:0	6	=
call	36:18	36:74	6	hvcc_add_nal_unit
arg	36:36	36:39	7	buf
water	36:36	0:0	8	buf
arg	36:41	36:44	7	len
water	36:41	0:0	8	len
arg	36:46	36:67	7	ps_array_completeness
water	36:46	0:0	8	ps_array_completeness
arg	36:69	36:74	7	&hvcc
op	36:69	0:0	8	&
water	36:70	0:0	8	hvcc
water	36:75	0:0	6	;
if	37:12	38:24	6	(ret < 0)
cond	37:16	37:22	7	ret < 0
water	37:16	0:0	8	ret
op	37:20	0:0	8	<
water	37:22	0:0	8	0
stmts	38:16	38:24	7	
goto	38:16	38:24	8	end
water	38:21	0:0	9	end
break	39:12	39:17	6	
label	40:8	40:15	6	default :
break	41:12	41:17	6	
water	42:8	0:0	6	}
water	43:8	0:0	4	buf
op	43:12	0:0	4	+=
water	43:15	0:0	4	len
water	43:18	0:0	4	;
water	44:4	0:0	4	}
water	45:4	0:0	2	ret
op	45:8	0:0	2	=
call	45:10	45:30	2	hvcc_write
arg	45:21	45:23	3	pb
water	45:21	0:0	4	pb
arg	45:25	45:30	3	&hvcc
op	45:25	0:0	4	&
water	45:26	0:0	4	hvcc
water	45:31	0:0	2	;
label	46:0	46:3	2	end :
call	47:4	47:20	2	hvcc_close
arg	47:15	47:20	3	&hvcc
op	47:15	0:0	4	&
water	47:16	0:0	4	hvcc
water	47:21	0:0	2	;
call	48:4	48:17	2	av_free
arg	48:12	48:17	3	start
water	48:12	0:0	4	start
water	48:18	0:0	2	;
return	49:4	49:14	2	ret
water	49:11	0:0	3	ret
