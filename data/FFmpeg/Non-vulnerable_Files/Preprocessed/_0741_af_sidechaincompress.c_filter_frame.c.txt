func	1:0	50:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:42	2	AVFilterLink *	link
param	1:44	1:58	2	AVFrame *	frame
stmnts	0:0	49:14	1	
decl	3:4	3:36	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	link
op	3:31	0:0	2	->
water	3:33	0:0	2	dst
decl	4:4	4:43	2	SidechainCompressContext	*s
op	4:32	0:0	2	=
water	4:34	0:0	2	ctx
op	4:37	0:0	2	->
water	4:39	0:0	2	priv
decl	5:4	5:41	2	AVFilterLink	*sclink
op	5:25	0:0	2	=
water	5:27	0:0	2	ctx
op	5:30	0:0	2	->
water	5:32	0:0	2	inputs
op	5:38	0:0	2	[
water	5:39	0:0	2	1
op	5:40	0:0	2	]
decl	6:4	6:43	2	AVFilterLink	*outlink
op	6:26	0:0	2	=
water	6:28	0:0	2	ctx
op	6:31	0:0	2	->
water	6:33	0:0	2	outputs
op	6:40	0:0	2	[
water	6:41	0:0	2	0
op	6:42	0:0	2	]
decl	7:4	7:35	2	const double	makeup
op	7:24	0:0	2	=
water	7:26	0:0	2	s
op	7:27	0:0	2	->
water	7:29	0:0	2	makeup
decl	8:4	8:23	2	const double	*scsrc
decl	9:4	9:18	2	double	*sample
decl	10:4	10:18	2	int	nb_samples
decl	11:4	11:17	2	int	ret
water	11:11	0:0	2	,
decl	11:4	11:17	2	int	i
water	11:14	0:0	2	,
decl	11:4	11:17	2	int	c
for	12:4	14:17	2	(i = 0 ;i < 2;i ++)
forinit	12:9	12:14	3	i = 0 ;
water	12:9	0:0	4	i
op	12:11	0:0	4	=
water	12:13	0:0	4	0
water	12:14	0:0	4	;
cond	12:16	12:20	3	i < 2
water	12:16	0:0	4	i
op	12:18	0:0	4	<
water	12:20	0:0	4	2
forexpr	12:23	12:24	3	i ++
water	12:23	0:0	4	i
op	12:24	0:0	4	++
stmts	13:8	14:17	3	
if	13:8	14:17	4	(link == ctx -> inputs [ i ])
cond	13:12	13:33	5	link == ctx -> inputs [ i ]
water	13:12	0:0	6	link
op	13:17	0:0	6	==
water	13:20	0:0	6	ctx
op	13:23	0:0	6	->
water	13:25	0:0	6	inputs
op	13:31	0:0	6	[
water	13:32	0:0	6	i
op	13:33	0:0	6	]
stmts	14:12	14:17	5	
break	14:12	14:17	6	
call	15:4	15:42	2	av_assert0
arg	15:15	15:42	3	i<2&&!s->input_frame[i]
water	15:15	0:0	4	i
op	15:17	0:0	4	<
water	15:19	0:0	4	2
op	15:21	0:0	4	&&
op	15:24	0:0	4	!
water	15:25	0:0	4	s
op	15:26	0:0	4	->
water	15:28	0:0	4	input_frame
op	15:39	0:0	4	[
water	15:40	0:0	4	i
op	15:41	0:0	4	]
water	15:43	0:0	2	;
water	16:4	0:0	2	s
op	16:5	0:0	2	->
water	16:7	0:0	2	input_frame
op	16:18	0:0	2	[
water	16:19	0:0	2	i
op	16:20	0:0	2	]
op	16:22	0:0	2	=
water	16:24	0:0	2	frame
water	16:29	0:0	2	;
if	17:4	18:16	2	(! s -> input_frame [ 0 ] || ! s -> input_frame [ 1 ])
cond	17:8	17:47	3	! s -> input_frame [ 0 ] || ! s -> input_frame [ 1 ]
op	17:8	0:0	4	!
water	17:9	0:0	4	s
op	17:10	0:0	4	->
water	17:12	0:0	4	input_frame
op	17:23	0:0	4	[
water	17:24	0:0	4	0
op	17:25	0:0	4	]
op	17:27	0:0	4	||
op	17:30	0:0	4	!
water	17:31	0:0	4	s
op	17:32	0:0	4	->
water	17:34	0:0	4	input_frame
op	17:45	0:0	4	[
water	17:46	0:0	4	1
op	17:47	0:0	4	]
stmts	18:8	18:16	3	
return	18:8	18:16	4	0
water	18:15	0:0	5	0
water	19:4	0:0	2	nb_samples
op	19:15	0:0	2	=
call	19:17	20:52	2	FFMIN
arg	19:23	19:52	3	s->input_frame[0]->nb_samples
water	19:23	0:0	4	s
op	19:24	0:0	4	->
water	19:26	0:0	4	input_frame
op	19:37	0:0	4	[
water	19:38	0:0	4	0
op	19:39	0:0	4	]
op	19:40	0:0	4	->
water	19:42	0:0	4	nb_samples
arg	20:23	20:52	3	s->input_frame[1]->nb_samples
water	20:23	0:0	4	s
op	20:24	0:0	4	->
water	20:26	0:0	4	input_frame
op	20:37	0:0	4	[
water	20:38	0:0	4	1
op	20:39	0:0	4	]
op	20:40	0:0	4	->
water	20:42	0:0	4	nb_samples
water	20:53	0:0	2	;
water	21:4	0:0	2	sample
op	21:11	0:0	2	=
water	21:13	0:0	2	(
water	21:14	0:0	2	double
op	21:21	0:0	2	*
water	21:22	0:0	2	)
water	21:23	0:0	2	s
op	21:24	0:0	2	->
water	21:26	0:0	2	input_frame
op	21:37	0:0	2	[
water	21:38	0:0	2	0
op	21:39	0:0	2	]
op	21:40	0:0	2	->
water	21:42	0:0	2	data
op	21:46	0:0	2	[
water	21:47	0:0	2	0
op	21:48	0:0	2	]
water	21:49	0:0	2	;
water	22:4	0:0	2	scsrc
op	22:10	0:0	2	=
water	22:12	0:0	2	(
water	22:13	0:0	2	const
water	22:19	0:0	2	double
op	22:26	0:0	2	*
water	22:27	0:0	2	)
water	22:28	0:0	2	s
op	22:29	0:0	2	->
water	22:31	0:0	2	input_frame
op	22:42	0:0	2	[
water	22:43	0:0	2	1
op	22:44	0:0	2	]
op	22:45	0:0	2	->
water	22:47	0:0	2	data
op	22:51	0:0	2	[
water	22:52	0:0	2	0
op	22:53	0:0	2	]
water	22:54	0:0	2	;
for	23:4	45:4	2	(i = 0 ;i < nb_samples;i ++)
forinit	23:9	23:14	3	i = 0 ;
water	23:9	0:0	4	i
op	23:11	0:0	4	=
water	23:13	0:0	4	0
water	23:14	0:0	4	;
cond	23:16	23:20	3	i < nb_samples
water	23:16	0:0	4	i
op	23:18	0:0	4	<
water	23:20	0:0	4	nb_samples
forexpr	23:32	23:33	3	i ++
water	23:32	0:0	4	i
op	23:33	0:0	4	++
stmts	23:37	45:4	3	
water	23:37	0:0	4	{
decl	24:8	24:37	4	double	abs_sample
water	24:25	0:0	4	,
decl	24:8	24:37	4	double	gain
op	24:32	0:0	4	=
water	24:34	0:0	4	1
op	24:35	0:0	4	.
water	24:36	0:0	4	0
water	25:8	0:0	4	abs_sample
op	25:19	0:0	4	=
call	25:21	25:35	4	FFABS
arg	25:27	25:35	5	scsrc[0]
water	25:27	0:0	6	scsrc
op	25:32	0:0	6	[
water	25:33	0:0	6	0
op	25:34	0:0	6	]
water	25:36	0:0	4	;
if	26:8	29:8	4	(s -> link == 1)
cond	26:12	26:23	5	s -> link == 1
water	26:12	0:0	6	s
op	26:13	0:0	6	->
water	26:15	0:0	6	link
op	26:20	0:0	6	==
water	26:23	0:0	6	1
stmts	26:26	29:8	5	
water	26:26	0:0	6	{
for	27:12	28:63	6	(c = 1 ;c < sclink -> channels;c ++)
forinit	27:17	27:22	7	c = 1 ;
water	27:17	0:0	8	c
op	27:19	0:0	8	=
water	27:21	0:0	8	1
water	27:22	0:0	8	;
cond	27:24	27:36	7	c < sclink -> channels
water	27:24	0:0	8	c
op	27:26	0:0	8	<
water	27:28	0:0	8	sclink
op	27:34	0:0	8	->
water	27:36	0:0	8	channels
forexpr	27:46	27:47	7	c ++
water	27:46	0:0	8	c
op	27:47	0:0	8	++
stmts	28:16	28:63	7	
water	28:16	0:0	8	abs_sample
op	28:27	0:0	8	=
call	28:29	28:62	8	FFMAX
arg	28:35	28:50	9	FFABS(scsrc[c])
call	28:35	28:49	10	FFABS
arg	28:41	28:49	11	scsrc[c]
water	28:41	0:0	12	scsrc
op	28:46	0:0	12	[
water	28:47	0:0	12	c
op	28:48	0:0	12	]
arg	28:52	28:62	9	abs_sample
water	28:52	0:0	10	abs_sample
water	28:63	0:0	8	;
water	29:8	0:0	6	}
else	29:10	33:8	4
stmts	29:15	33:8	5	
water	29:15	0:0	6	{
for	30:12	31:45	6	(c = 1 ;c < sclink -> channels;c ++)
forinit	30:17	30:22	7	c = 1 ;
water	30:17	0:0	8	c
op	30:19	0:0	8	=
water	30:21	0:0	8	1
water	30:22	0:0	8	;
cond	30:24	30:36	7	c < sclink -> channels
water	30:24	0:0	8	c
op	30:26	0:0	8	<
water	30:28	0:0	8	sclink
op	30:34	0:0	8	->
water	30:36	0:0	8	channels
forexpr	30:46	30:47	7	c ++
water	30:46	0:0	8	c
op	30:47	0:0	8	++
stmts	31:16	31:45	7	
water	31:16	0:0	8	abs_sample
op	31:27	0:0	8	+=
call	31:30	31:44	8	FFABS
arg	31:36	31:44	9	scsrc[c]
water	31:36	0:0	10	scsrc
op	31:41	0:0	10	[
water	31:42	0:0	10	c
op	31:43	0:0	10	]
water	31:45	0:0	8	;
water	32:12	0:0	6	abs_sample
op	32:23	0:0	6	/=
water	32:26	0:0	6	sclink
op	32:32	0:0	6	->
water	32:34	0:0	6	channels
water	32:42	0:0	6	;
water	33:8	0:0	6	}
if	34:8	35:36	4	(s -> detection)
cond	34:12	34:15	5	s -> detection
water	34:12	0:0	6	s
op	34:13	0:0	6	->
water	34:15	0:0	6	detection
stmts	35:12	35:36	5	
water	35:12	0:0	6	abs_sample
op	35:23	0:0	6	*=
water	35:26	0:0	6	abs_sample
water	35:36	0:0	6	;
water	36:8	0:0	4	s
op	36:9	0:0	4	->
water	36:11	0:0	4	lin_slope
op	36:21	0:0	4	+=
water	36:24	0:0	4	(
water	36:25	0:0	4	abs_sample
op	36:36	0:0	4	-
water	36:38	0:0	4	s
op	36:39	0:0	4	->
water	36:41	0:0	4	lin_slope
water	36:50	0:0	4	)
op	36:52	0:0	4	*
water	36:54	0:0	4	(
water	36:55	0:0	4	abs_sample
op	36:66	0:0	4	>
water	36:68	0:0	4	s
op	36:69	0:0	4	->
water	36:71	0:0	4	lin_slope
water	36:81	0:0	4	?
water	36:83	0:0	4	s
op	36:84	0:0	4	->
water	36:86	0:0	4	attack_coeff
water	36:99	0:0	4	:
water	36:101	0:0	4	s
op	36:102	0:0	4	->
water	36:104	0:0	4	release_coeff
water	36:117	0:0	4	)
water	36:118	0:0	4	;
if	37:8	40:69	4	(s -> lin_slope > 0 . 0 && s -> lin_slope > s -> lin_knee_start)
cond	37:12	37:52	5	s -> lin_slope > 0 . 0 && s -> lin_slope > s -> lin_knee_start
water	37:12	0:0	6	s
op	37:13	0:0	6	->
water	37:15	0:0	6	lin_slope
op	37:25	0:0	6	>
water	37:27	0:0	6	0
op	37:28	0:0	6	.
water	37:29	0:0	6	0
op	37:31	0:0	6	&&
water	37:34	0:0	6	s
op	37:35	0:0	6	->
water	37:37	0:0	6	lin_slope
op	37:47	0:0	6	>
water	37:49	0:0	6	s
op	37:50	0:0	6	->
water	37:52	0:0	6	lin_knee_start
stmts	38:12	40:69	5	
water	38:12	0:0	6	gain
op	38:17	0:0	6	=
call	38:19	40:68	6	output_gain
arg	38:31	38:43	7	s->lin_slope
water	38:31	0:0	8	s
op	38:32	0:0	8	->
water	38:34	0:0	8	lin_slope
arg	38:45	38:53	7	s->ratio
water	38:45	0:0	8	s
op	38:46	0:0	8	->
water	38:48	0:0	8	ratio
arg	38:55	38:63	7	s->thres
water	38:55	0:0	8	s
op	38:56	0:0	8	->
water	38:58	0:0	8	thres
arg	38:65	38:72	7	s->knee
water	38:65	0:0	8	s
op	38:66	0:0	8	->
water	38:68	0:0	8	knee
arg	39:31	39:44	7	s->knee_start
water	39:31	0:0	8	s
op	39:32	0:0	8	->
water	39:34	0:0	8	knee_start
arg	39:46	39:58	7	s->knee_stop
water	39:46	0:0	8	s
op	39:47	0:0	8	->
water	39:49	0:0	8	knee_stop
arg	40:31	40:54	7	s->compressed_knee_stop
water	40:31	0:0	8	s
op	40:32	0:0	8	->
water	40:34	0:0	8	compressed_knee_stop
arg	40:56	40:68	7	s->detection
water	40:56	0:0	8	s
op	40:57	0:0	8	->
water	40:59	0:0	8	detection
water	40:69	0:0	6	;
for	41:8	42:38	4	(c = 0 ;c < outlink -> channels;c ++)
forinit	41:13	41:18	5	c = 0 ;
water	41:13	0:0	6	c
op	41:15	0:0	6	=
water	41:17	0:0	6	0
water	41:18	0:0	6	;
cond	41:20	41:33	5	c < outlink -> channels
water	41:20	0:0	6	c
op	41:22	0:0	6	<
water	41:24	0:0	6	outlink
op	41:31	0:0	6	->
water	41:33	0:0	6	channels
forexpr	41:43	41:44	5	c ++
water	41:43	0:0	6	c
op	41:44	0:0	6	++
stmts	42:12	42:38	5	
water	42:12	0:0	6	sample
op	42:18	0:0	6	[
water	42:19	0:0	6	c
op	42:20	0:0	6	]
op	42:22	0:0	6	*=
water	42:25	0:0	6	gain
op	42:30	0:0	6	*
water	42:32	0:0	6	makeup
water	42:38	0:0	6	;
water	43:8	0:0	4	sample
op	43:15	0:0	4	+=
water	43:18	0:0	4	outlink
op	43:25	0:0	4	->
water	43:27	0:0	4	channels
water	43:35	0:0	4	;
water	44:8	0:0	4	scsrc
op	44:14	0:0	4	+=
water	44:17	0:0	4	sclink
op	44:23	0:0	4	->
water	44:25	0:0	4	channels
water	44:33	0:0	4	;
water	45:4	0:0	4	}
water	46:4	0:0	2	ret
op	46:8	0:0	2	=
call	46:10	46:52	2	ff_filter_frame
arg	46:26	46:33	3	outlink
water	46:26	0:0	4	outlink
arg	46:35	46:52	3	s->input_frame[0]
water	46:35	0:0	4	s
op	46:36	0:0	4	->
water	46:38	0:0	4	input_frame
op	46:49	0:0	4	[
water	46:50	0:0	4	0
op	46:51	0:0	4	]
water	46:53	0:0	2	;
water	47:4	0:0	2	s
op	47:5	0:0	2	->
water	47:7	0:0	2	input_frame
op	47:18	0:0	2	[
water	47:19	0:0	2	0
op	47:20	0:0	2	]
op	47:22	0:0	2	=
water	47:24	0:0	2	NULL
water	47:28	0:0	2	;
call	48:4	48:36	2	av_frame_free
arg	48:18	48:36	3	&s->input_frame[1]
op	48:18	0:0	4	&
water	48:19	0:0	4	s
op	48:20	0:0	4	->
water	48:22	0:0	4	input_frame
op	48:33	0:0	4	[
water	48:34	0:0	4	1
op	48:35	0:0	4	]
water	48:37	0:0	2	;
return	49:4	49:14	2	ret
water	49:11	0:0	3	ret
