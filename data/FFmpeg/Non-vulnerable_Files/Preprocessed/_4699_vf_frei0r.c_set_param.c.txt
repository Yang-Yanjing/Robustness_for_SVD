func	1:0	42:0	0	static int	set_param
params	1:20	0:0	1	
param	1:21	1:41	2	AVFilterContext *	ctx
param	1:43	1:64	2	f0r_param_info_t	info
param	1:66	1:75	2	int	index
param	1:77	1:88	2	char *	param
stmnts	0:0	41:26	1	
decl	3:4	3:32	2	Frei0rContext	*s
op	3:21	0:0	2	=
water	3:23	0:0	2	ctx
op	3:26	0:0	2	->
water	3:28	0:0	2	priv
union	4:4	8:4	2	<anonymous_4:4>
decl	5:8	5:16	3	double	d
decl	6:8	6:29	3	f0r_param_color_t	col
decl	7:8	7:32	3	f0r_param_position_t	pos
decl	4:4	8:9	2	<anonymous_4:4>	val
decl	9:4	9:14	2	char	*tail
decl	10:4	10:19	2	uint8_t	rgba[4]
switch	11:4	35:4	2	(info . type)
cond	11:12	11:17	3	info . type
water	11:12	0:0	4	info
op	11:16	0:0	4	.
water	11:17	0:0	4	type
stmts	11:23	35:4	3	
water	11:23	0:0	4	{
label	12:4	12:23	4	case F0R_PARAM_BOOL :
if	13:8	13:49	4	(!strcmp (param ,"y" ))
cond	13:17	13:35	5	!strcmp (param ,"y" )
op	13:17	0:0	6	!
call	13:18	13:35	6	strcmp
arg	13:25	13:30	7	param
water	13:25	0:0	8	param
arg	13:32	13:35	7	"y"
water	13:32	0:0	8	"y"
stmts	13:38	13:49	5	
water	13:38	0:0	6	val
op	13:41	0:0	6	.
water	13:42	0:0	6	d
op	13:44	0:0	6	=
water	13:46	0:0	6	1
op	13:47	0:0	6	.
water	13:48	0:0	6	0
water	13:49	0:0	6	;
else	14:8	14:49	4
stmts	14:13	14:49	5	
if	14:13	14:49	6	(!strcmp (param ,"n" ))
cond	14:17	14:35	7	!strcmp (param ,"n" )
op	14:17	0:0	8	!
call	14:18	14:35	8	strcmp
arg	14:25	14:30	9	param
water	14:25	0:0	10	param
arg	14:32	14:35	9	"n"
water	14:32	0:0	10	"n"
stmts	14:38	14:49	7	
water	14:38	0:0	8	val
op	14:41	0:0	8	.
water	14:42	0:0	8	d
op	14:44	0:0	8	=
water	14:46	0:0	8	0
op	14:47	0:0	8	.
water	14:48	0:0	8	0
water	14:49	0:0	8	;
else	15:8	15:22	4
stmts	15:13	15:22	5	
goto	15:13	15:22	6	fail
water	15:18	0:0	7	fail
break	16:8	16:13	4	
label	17:4	17:25	4	case F0R_PARAM_DOUBLE :
water	18:8	0:0	4	val
op	18:11	0:0	4	.
water	18:12	0:0	4	d
op	18:14	0:0	4	=
call	18:16	18:35	4	strtod
arg	18:23	18:28	5	param
water	18:23	0:0	6	param
arg	18:30	18:35	5	&tail
op	18:30	0:0	6	&
water	18:31	0:0	6	tail
water	18:36	0:0	4	;
if	19:8	20:21	4	(* tail || val . d == HUGE_VAL)
cond	19:12	19:30	5	* tail || val . d == HUGE_VAL
op	19:12	0:0	6	*
water	19:13	0:0	6	tail
op	19:18	0:0	6	||
water	19:21	0:0	6	val
op	19:24	0:0	6	.
water	19:25	0:0	6	d
op	19:27	0:0	6	==
water	19:30	0:0	6	HUGE_VAL
stmts	20:12	20:21	5	
goto	20:12	20:21	6	fail
water	20:17	0:0	7	fail
break	21:8	21:13	4	
label	22:4	22:24	4	case F0R_PARAM_COLOR :
if	23:8	29:8	4	(sscanf (param ,"%f/%f/%f" ,& val . col . r ,& val . col . g ,& val . col . b ) != 3)
cond	23:12	23:77	5	sscanf (param ,"%f/%f/%f" ,& val . col . r ,& val . col . g ,& val . col . b ) != 3
call	23:12	23:72	6	sscanf
arg	23:19	23:24	7	param
water	23:19	0:0	8	param
arg	23:26	23:36	7	"%f/%f/%f"
water	23:26	0:0	8	"%f/%f/%f"
arg	23:38	23:48	7	&val.col.r
op	23:38	0:0	8	&
water	23:39	0:0	8	val
op	23:42	0:0	8	.
water	23:43	0:0	8	col
op	23:46	0:0	8	.
water	23:47	0:0	8	r
arg	23:50	23:60	7	&val.col.g
op	23:50	0:0	8	&
water	23:51	0:0	8	val
op	23:54	0:0	8	.
water	23:55	0:0	8	col
op	23:58	0:0	8	.
water	23:59	0:0	8	g
arg	23:62	23:72	7	&val.col.b
op	23:62	0:0	8	&
water	23:63	0:0	8	val
op	23:66	0:0	8	.
water	23:67	0:0	8	col
op	23:70	0:0	8	.
water	23:71	0:0	8	b
op	23:74	0:0	6	!=
water	23:77	0:0	6	3
stmts	23:80	29:8	5	
water	23:80	0:0	6	{
if	24:12	25:25	6	(av_parse_color (rgba ,param ,- 1 ,ctx ) < 0)
cond	24:16	24:55	7	av_parse_color (rgba ,param ,- 1 ,ctx ) < 0
call	24:16	24:51	8	av_parse_color
arg	24:31	24:35	9	rgba
water	24:31	0:0	10	rgba
arg	24:37	24:42	9	param
water	24:37	0:0	10	param
arg	24:44	24:46	9	-1
op	24:44	0:0	10	-
water	24:45	0:0	10	1
arg	24:48	24:51	9	ctx
water	24:48	0:0	10	ctx
op	24:53	0:0	8	<
water	24:55	0:0	8	0
stmts	25:16	25:25	7	
goto	25:16	25:25	8	fail
water	25:21	0:0	9	fail
water	26:12	0:0	6	val
op	26:15	0:0	6	.
water	26:16	0:0	6	col
op	26:19	0:0	6	.
water	26:20	0:0	6	r
op	26:22	0:0	6	=
water	26:24	0:0	6	rgba
op	26:28	0:0	6	[
water	26:29	0:0	6	0
op	26:30	0:0	6	]
op	26:32	0:0	6	/
water	26:34	0:0	6	255
op	26:37	0:0	6	.
water	26:38	0:0	6	0
water	26:39	0:0	6	;
water	27:12	0:0	6	val
op	27:15	0:0	6	.
water	27:16	0:0	6	col
op	27:19	0:0	6	.
water	27:20	0:0	6	g
op	27:22	0:0	6	=
water	27:24	0:0	6	rgba
op	27:28	0:0	6	[
water	27:29	0:0	6	1
op	27:30	0:0	6	]
op	27:32	0:0	6	/
water	27:34	0:0	6	255
op	27:37	0:0	6	.
water	27:38	0:0	6	0
water	27:39	0:0	6	;
water	28:12	0:0	6	val
op	28:15	0:0	6	.
water	28:16	0:0	6	col
op	28:19	0:0	6	.
water	28:20	0:0	6	b
op	28:22	0:0	6	=
water	28:24	0:0	6	rgba
op	28:28	0:0	6	[
water	28:29	0:0	6	2
op	28:30	0:0	6	]
op	28:32	0:0	6	/
water	28:34	0:0	6	255
op	28:37	0:0	6	.
water	28:38	0:0	6	0
water	28:39	0:0	6	;
water	29:8	0:0	6	}
break	30:8	30:13	4	
label	31:4	31:27	4	case F0R_PARAM_POSITION :
if	32:8	33:21	4	(sscanf (param ,"%lf/%lf" ,& val . pos . x ,& val . pos . y ) != 2)
cond	32:12	32:64	5	sscanf (param ,"%lf/%lf" ,& val . pos . x ,& val . pos . y ) != 2
call	32:12	32:59	6	sscanf
arg	32:19	32:24	7	param
water	32:19	0:0	8	param
arg	32:26	32:35	7	"%lf/%lf"
water	32:26	0:0	8	"%lf/%lf"
arg	32:37	32:47	7	&val.pos.x
op	32:37	0:0	8	&
water	32:38	0:0	8	val
op	32:41	0:0	8	.
water	32:42	0:0	8	pos
op	32:45	0:0	8	.
water	32:46	0:0	8	x
arg	32:49	32:59	7	&val.pos.y
op	32:49	0:0	8	&
water	32:50	0:0	8	val
op	32:53	0:0	8	.
water	32:54	0:0	8	pos
op	32:57	0:0	8	.
water	32:58	0:0	8	y
op	32:61	0:0	6	!=
water	32:64	0:0	6	2
stmts	33:12	33:21	5	
goto	33:12	33:21	6	fail
water	33:17	0:0	7	fail
break	34:8	34:13	4	
water	35:4	0:0	4	}
call	36:4	36:47	2	s->set_param_value
arg	36:23	36:34	3	s->instance
water	36:23	0:0	4	s
op	36:24	0:0	4	->
water	36:26	0:0	4	instance
arg	36:36	36:40	3	&val
op	36:36	0:0	4	&
water	36:37	0:0	4	val
arg	36:42	36:47	3	index
water	36:42	0:0	4	index
water	36:48	0:0	2	;
return	37:4	37:12	2	0
water	37:11	0:0	3	0
label	38:0	38:4	2	fail :
call	39:4	40:27	2	av_log
arg	39:11	39:14	3	ctx
water	39:11	0:0	4	ctx
arg	39:16	39:28	3	AV_LOG_ERROR
water	39:16	0:0	4	AV_LOG_ERROR
arg	39:30	39:72	3	"Invalid value '%s' for parameter '%s'.\n"
water	39:30	0:0	4	"Invalid value '%s' for parameter '%s'.\n"
arg	40:11	40:16	3	param
water	40:11	0:0	4	param
arg	40:18	40:27	3	info.name
water	40:18	0:0	4	info
op	40:22	0:0	4	.
water	40:23	0:0	4	name
water	40:28	0:0	2	;
return	41:4	41:26	2	AVERROR(EINVAL)
call	41:11	41:25	3	AVERROR
arg	41:19	41:25	4	EINVAL
water	41:19	0:0	5	EINVAL
