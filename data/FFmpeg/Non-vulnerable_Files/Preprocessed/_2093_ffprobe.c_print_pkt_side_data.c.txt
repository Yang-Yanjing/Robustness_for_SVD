func	1:0	48:0	0	static void	print_pkt_side_data
params	1:31	0:0	1	
param	1:32	1:48	2	WriterContext *	w
param	2:32	2:54	2	AVCodecParameters *	par
param	3:32	3:65	2	const AVPacketSideData *	side_data
param	4:32	4:48	2	int	nb_side_data
param	5:32	5:54	2	SectionID	id_data_list
param	6:32	6:49	2	SectionID	id_data
stmnts	0:0	47:34	1	
decl	8:4	8:9	2	int	i
call	9:4	9:47	2	writer_print_section_header
arg	9:32	9:33	3	w
water	9:32	0:0	4	w
arg	9:35	9:47	3	id_data_list
water	9:35	0:0	4	id_data_list
water	9:48	0:0	2	;
for	10:4	46:4	2	(i = 0 ;i < nb_side_data;i ++)
forinit	10:9	10:14	3	i = 0 ;
water	10:9	0:0	4	i
op	10:11	0:0	4	=
water	10:13	0:0	4	0
water	10:14	0:0	4	;
cond	10:16	10:20	3	i < nb_side_data
water	10:16	0:0	4	i
op	10:18	0:0	4	<
water	10:20	0:0	4	nb_side_data
forexpr	10:34	10:35	3	i ++
water	10:34	0:0	4	i
op	10:35	0:0	4	++
stmts	10:39	46:4	3	
water	10:39	0:0	4	{
decl	11:8	11:50	4	const AVPacketSideData	*sd
op	11:35	0:0	4	=
op	11:37	0:0	4	&
water	11:38	0:0	4	side_data
op	11:47	0:0	4	[
water	11:48	0:0	4	i
op	11:49	0:0	4	]
decl	12:8	12:61	4	const char	*name
op	12:25	0:0	4	=
call	12:27	12:60	5	av_packet_side_data_name
arg	12:52	12:60	6	sd->type
water	12:52	0:0	7	sd
op	12:54	0:0	7	->
water	12:56	0:0	7	type
call	13:8	13:46	4	writer_print_section_header
arg	13:36	13:37	5	w
water	13:36	0:0	6	w
arg	13:39	13:46	5	id_data
water	13:39	0:0	6	id_data
water	13:47	0:0	4	;
call	14:8	14:59	4	print_str
arg	14:18	14:34	5	"side_data_type"
water	14:18	0:0	6	"side_data_type"
arg	14:36	14:59	5	name?name:"unknown"
water	14:36	0:0	6	name
water	14:41	0:0	6	?
water	14:43	0:0	6	name
water	14:48	0:0	6	:
water	14:50	0:0	6	"unknown"
water	14:60	0:0	4	;
if	15:8	18:8	4	(sd -> type == AV_PKT_DATA_DISPLAYMATRIX && sd -> size >= 9 * 4)
cond	15:12	15:67	5	sd -> type == AV_PKT_DATA_DISPLAYMATRIX && sd -> size >= 9 * 4
water	15:12	0:0	6	sd
op	15:14	0:0	6	->
water	15:16	0:0	6	type
op	15:21	0:0	6	==
water	15:24	0:0	6	AV_PKT_DATA_DISPLAYMATRIX
op	15:50	0:0	6	&&
water	15:53	0:0	6	sd
op	15:55	0:0	6	->
water	15:57	0:0	6	size
op	15:62	0:0	6	>=
water	15:65	0:0	6	9
op	15:66	0:0	6	*
water	15:67	0:0	6	4
stmts	15:70	18:8	5	
water	15:70	0:0	6	{
call	16:12	16:83	6	writer_print_integers
arg	16:34	16:35	7	w
water	16:34	0:0	8	w
arg	16:37	16:52	7	"displaymatrix"
water	16:37	0:0	8	"displaymatrix"
arg	16:54	16:62	7	sd->data
water	16:54	0:0	8	sd
op	16:56	0:0	8	->
water	16:58	0:0	8	data
arg	16:64	16:65	7	9
water	16:64	0:0	8	9
arg	16:67	16:74	7	" %11d"
water	16:67	0:0	8	" %11d"
arg	16:76	16:77	7	3
water	16:76	0:0	8	3
arg	16:79	16:80	7	4
water	16:79	0:0	8	4
arg	16:82	16:83	7	1
water	16:82	0:0	8	1
water	16:84	0:0	6	;
call	17:12	17:78	6	print_int
arg	17:22	17:32	7	"rotation"
water	17:22	0:0	8	"rotation"
arg	17:34	17:78	7	av_display_rotation_get((int32_t*)sd->data)
call	17:34	17:77	8	av_display_rotation_get
arg	17:58	17:77	9	(int32_t*)sd->data
water	17:58	0:0	10	(
water	17:59	0:0	10	int32_t
op	17:67	0:0	10	*
water	17:68	0:0	10	)
water	17:69	0:0	10	sd
op	17:71	0:0	10	->
water	17:73	0:0	10	data
water	17:79	0:0	6	;
water	18:8	0:0	6	}
else	18:10	22:8	4
stmts	18:15	22:8	5	
if	18:15	22:8	6	(sd -> type == AV_PKT_DATA_STEREO3D)
cond	18:19	18:31	7	sd -> type == AV_PKT_DATA_STEREO3D
water	18:19	0:0	8	sd
op	18:21	0:0	8	->
water	18:23	0:0	8	type
op	18:28	0:0	8	==
water	18:31	0:0	8	AV_PKT_DATA_STEREO3D
stmts	18:53	22:8	7	
water	18:53	0:0	8	{
decl	19:12	19:61	8	const AVStereo3D	*stereo
op	19:37	0:0	8	=
water	19:39	0:0	8	(
water	19:40	0:0	8	AVStereo3D
op	19:51	0:0	8	*
water	19:52	0:0	8	)
water	19:53	0:0	8	sd
op	19:55	0:0	8	->
water	19:57	0:0	8	data
call	20:12	20:65	8	print_str
arg	20:22	20:28	9	"type"
water	20:22	0:0	10	"type"
arg	20:30	20:65	9	av_stereo3d_type_name(stereo->type)
call	20:30	20:64	10	av_stereo3d_type_name
arg	20:52	20:64	11	stereo->type
water	20:52	0:0	12	stereo
op	20:58	0:0	12	->
water	20:60	0:0	12	type
water	20:66	0:0	8	;
call	21:12	21:77	8	print_int
arg	21:22	21:32	9	"inverted"
water	21:22	0:0	10	"inverted"
arg	21:34	21:77	9	!!(stereo->flags&AV_STEREO3D_FLAG_INVERT)
op	21:34	0:0	10	!
op	21:35	0:0	10	!
water	21:36	0:0	10	(
water	21:37	0:0	10	stereo
op	21:43	0:0	10	->
water	21:45	0:0	10	flags
op	21:51	0:0	10	&
water	21:53	0:0	10	AV_STEREO3D_FLAG_INVERT
water	21:76	0:0	10	)
water	21:78	0:0	8	;
water	22:8	0:0	8	}
else	22:10	39:8	4
stmts	22:15	39:8	5	
if	22:15	39:8	6	(sd -> type == AV_PKT_DATA_SPHERICAL)
cond	22:19	22:31	7	sd -> type == AV_PKT_DATA_SPHERICAL
water	22:19	0:0	8	sd
op	22:21	0:0	8	->
water	22:23	0:0	8	type
op	22:28	0:0	8	==
water	22:31	0:0	8	AV_PKT_DATA_SPHERICAL
stmts	22:54	39:8	7	
water	22:54	0:0	8	{
decl	23:12	23:80	8	const AVSphericalMapping	*spherical
op	23:48	0:0	8	=
water	23:50	0:0	8	(
water	23:51	0:0	8	AVSphericalMapping
op	23:70	0:0	8	*
water	23:71	0:0	8	)
water	23:72	0:0	8	sd
op	23:74	0:0	8	->
water	23:76	0:0	8	data
call	24:12	24:87	8	print_str
arg	24:22	24:34	9	"projection"
water	24:22	0:0	10	"projection"
arg	24:36	24:87	9	av_spherical_projection_name(spherical->projection)
call	24:36	24:86	10	av_spherical_projection_name
arg	24:65	24:86	11	spherical->projection
water	24:65	0:0	12	spherical
op	24:74	0:0	12	->
water	24:76	0:0	12	projection
water	24:88	0:0	8	;
if	25:12	27:12	8	(spherical -> projection == AV_SPHERICAL_CUBEMAP)
cond	25:16	25:41	9	spherical -> projection == AV_SPHERICAL_CUBEMAP
water	25:16	0:0	10	spherical
op	25:25	0:0	10	->
water	25:27	0:0	10	projection
op	25:38	0:0	10	==
water	25:41	0:0	10	AV_SPHERICAL_CUBEMAP
stmts	25:63	27:12	9	
water	25:63	0:0	10	{
call	26:16	26:55	10	print_int
arg	26:26	26:35	11	"padding"
water	26:26	0:0	12	"padding"
arg	26:37	26:55	11	spherical->padding
water	26:37	0:0	12	spherical
op	26:46	0:0	12	->
water	26:48	0:0	12	padding
water	26:56	0:0	10	;
water	27:12	0:0	10	}
else	27:14	35:12	8
stmts	27:19	35:12	9	
if	27:19	35:12	10	(spherical -> projection == AV_SPHERICAL_EQUIRECTANGULAR_TILE)
cond	27:23	27:48	11	spherical -> projection == AV_SPHERICAL_EQUIRECTANGULAR_TILE
water	27:23	0:0	12	spherical
op	27:32	0:0	12	->
water	27:34	0:0	12	projection
op	27:45	0:0	12	==
water	27:48	0:0	12	AV_SPHERICAL_EQUIRECTANGULAR_TILE
stmts	27:83	35:12	11	
water	27:83	0:0	12	{
decl	28:16	28:33	12	size_t	l
water	28:24	0:0	12	,
decl	28:16	28:33	12	size_t	t
water	28:27	0:0	12	,
decl	28:16	28:33	12	size_t	r
water	28:30	0:0	12	,
decl	28:16	28:33	12	size_t	b
call	29:16	30:55	12	av_spherical_tile_bounds
arg	29:41	29:50	13	spherical
water	29:41	0:0	14	spherical
arg	29:52	29:62	13	par->width
water	29:52	0:0	14	par
op	29:55	0:0	14	->
water	29:57	0:0	14	width
arg	29:64	29:75	13	par->height
water	29:64	0:0	14	par
op	29:67	0:0	14	->
water	29:69	0:0	14	height
arg	30:41	30:43	13	&l
op	30:41	0:0	14	&
water	30:42	0:0	14	l
arg	30:45	30:47	13	&t
op	30:45	0:0	14	&
water	30:46	0:0	14	t
arg	30:49	30:51	13	&r
op	30:49	0:0	14	&
water	30:50	0:0	14	r
arg	30:53	30:55	13	&b
op	30:53	0:0	14	&
water	30:54	0:0	14	b
water	30:56	0:0	12	;
call	31:16	31:41	12	print_int
arg	31:26	31:38	13	"bound_left"
water	31:26	0:0	14	"bound_left"
arg	31:40	31:41	13	l
water	31:40	0:0	14	l
water	31:42	0:0	12	;
call	32:16	32:40	12	print_int
arg	32:26	32:37	13	"bound_top"
water	32:26	0:0	14	"bound_top"
arg	32:39	32:40	13	t
water	32:39	0:0	14	t
water	32:41	0:0	12	;
call	33:16	33:42	12	print_int
arg	33:26	33:39	13	"bound_right"
water	33:26	0:0	14	"bound_right"
arg	33:41	33:42	13	r
water	33:41	0:0	14	r
water	33:43	0:0	12	;
call	34:16	34:43	12	print_int
arg	34:26	34:40	13	"bound_bottom"
water	34:26	0:0	14	"bound_bottom"
arg	34:42	34:43	13	b
water	34:42	0:0	14	b
water	34:44	0:0	12	;
water	35:12	0:0	12	}
call	36:12	36:64	8	print_int
arg	36:22	36:27	9	"yaw"
water	36:22	0:0	10	"yaw"
arg	36:29	36:64	9	(double)spherical->yaw/(1<<16)
water	36:29	0:0	10	(
water	36:30	0:0	10	double
water	36:36	0:0	10	)
water	36:38	0:0	10	spherical
op	36:47	0:0	10	->
water	36:49	0:0	10	yaw
op	36:53	0:0	10	/
water	36:55	0:0	10	(
water	36:56	0:0	10	1
op	36:58	0:0	10	<<
water	36:61	0:0	10	16
water	36:63	0:0	10	)
water	36:65	0:0	8	;
call	37:12	37:68	8	print_int
arg	37:22	37:29	9	"pitch"
water	37:22	0:0	10	"pitch"
arg	37:31	37:68	9	(double)spherical->pitch/(1<<16)
water	37:31	0:0	10	(
water	37:32	0:0	10	double
water	37:38	0:0	10	)
water	37:40	0:0	10	spherical
op	37:49	0:0	10	->
water	37:51	0:0	10	pitch
op	37:57	0:0	10	/
water	37:59	0:0	10	(
water	37:60	0:0	10	1
op	37:62	0:0	10	<<
water	37:65	0:0	10	16
water	37:67	0:0	10	)
water	37:69	0:0	8	;
call	38:12	38:66	8	print_int
arg	38:22	38:28	9	"roll"
water	38:22	0:0	10	"roll"
arg	38:30	38:66	9	(double)spherical->roll/(1<<16)
water	38:30	0:0	10	(
water	38:31	0:0	10	double
water	38:37	0:0	10	)
water	38:39	0:0	10	spherical
op	38:48	0:0	10	->
water	38:50	0:0	10	roll
op	38:55	0:0	10	/
water	38:57	0:0	10	(
water	38:58	0:0	10	1
op	38:60	0:0	10	<<
water	38:63	0:0	10	16
water	38:65	0:0	10	)
water	38:67	0:0	8	;
water	39:8	0:0	8	}
else	39:10	44:8	4
stmts	39:15	44:8	5	
if	39:15	44:8	6	(sd -> type == AV_PKT_DATA_SKIP_SAMPLES && sd -> size == 10)
cond	39:19	39:71	7	sd -> type == AV_PKT_DATA_SKIP_SAMPLES && sd -> size == 10
water	39:19	0:0	8	sd
op	39:21	0:0	8	->
water	39:23	0:0	8	type
op	39:28	0:0	8	==
water	39:31	0:0	8	AV_PKT_DATA_SKIP_SAMPLES
op	39:56	0:0	8	&&
water	39:59	0:0	8	sd
op	39:61	0:0	8	->
water	39:63	0:0	8	size
op	39:68	0:0	8	==
water	39:71	0:0	8	10
stmts	39:75	44:8	7	
water	39:75	0:0	8	{
call	40:12	40:58	8	print_int
arg	40:22	40:36	9	"skip_samples"
water	40:22	0:0	10	"skip_samples"
arg	40:41	40:58	9	AV_RL32(sd->data)
call	40:41	40:57	10	AV_RL32
arg	40:49	40:57	11	sd->data
water	40:49	0:0	12	sd
op	40:51	0:0	12	->
water	40:53	0:0	12	data
water	40:59	0:0	8	;
call	41:12	41:62	8	print_int
arg	41:22	41:39	9	"discard_padding"
water	41:22	0:0	10	"discard_padding"
arg	41:41	41:62	9	AV_RL32(sd->data+4)
call	41:41	41:61	10	AV_RL32
arg	41:49	41:61	11	sd->data+4
water	41:49	0:0	12	sd
op	41:51	0:0	12	->
water	41:53	0:0	12	data
op	41:58	0:0	12	+
water	41:60	0:0	12	4
water	41:63	0:0	8	;
call	42:12	42:61	8	print_int
arg	42:22	42:35	9	"skip_reason"
water	42:22	0:0	10	"skip_reason"
arg	42:41	42:61	9	AV_RL8(sd->data+8)
call	42:41	42:60	10	AV_RL8
arg	42:48	42:60	11	sd->data+8
water	42:48	0:0	12	sd
op	42:50	0:0	12	->
water	42:52	0:0	12	data
op	42:57	0:0	12	+
water	42:59	0:0	12	8
water	42:62	0:0	8	;
call	43:12	43:61	8	print_int
arg	43:22	43:38	9	"discard_reason"
water	43:22	0:0	10	"discard_reason"
arg	43:41	43:61	9	AV_RL8(sd->data+9)
call	43:41	43:60	10	AV_RL8
arg	43:48	43:60	11	sd->data+9
water	43:48	0:0	12	sd
op	43:50	0:0	12	->
water	43:52	0:0	12	data
op	43:57	0:0	12	+
water	43:59	0:0	12	9
water	43:62	0:0	8	;
water	44:8	0:0	8	}
call	45:8	45:37	4	writer_print_section_footer
arg	45:36	45:37	5	w
water	45:36	0:0	6	w
water	45:38	0:0	4	;
water	46:4	0:0	4	}
call	47:4	47:33	2	writer_print_section_footer
arg	47:32	47:33	3	w
water	47:32	0:0	4	w
water	47:34	0:0	2	;
