func	1:0	46:0	0	static int	process_frame
params	1:24	0:0	1	
param	1:25	1:40	2	FFFrameSync *	fs
stmnts	0:0	45:40	1	
decl	3:4	3:37	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	fs
op	3:29	0:0	2	->
water	3:31	0:0	2	parent
decl	4:4	4:43	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	outputs
op	4:40	0:0	2	[
water	4:41	0:0	2	0
op	4:42	0:0	2	]
decl	5:4	5:32	2	StackContext	*s
op	5:20	0:0	2	=
water	5:22	0:0	2	fs
op	5:24	0:0	2	->
water	5:26	0:0	2	opaque
decl	6:4	6:28	2	AVFrame	**in
op	6:17	0:0	2	=
water	6:19	0:0	2	s
op	6:20	0:0	2	->
water	6:22	0:0	2	frames
decl	7:4	7:16	2	AVFrame	*out
decl	8:4	8:36	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:36	2	int	p
water	8:12	0:0	2	,
decl	8:4	8:36	2	int	ret
water	8:17	0:0	2	,
decl	8:4	8:36	2	int	offset[4]
op	8:29	0:0	2	=
water	8:31	0:0	2	{
water	8:33	0:0	2	0
water	8:35	0:0	2	}
for	9:4	12:4	2	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:23	3	i < s -> nb_inputs
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	s
op	9:21	0:0	4	->
water	9:23	0:0	4	nb_inputs
forexpr	9:34	9:35	3	i ++
water	9:34	0:0	4	i
op	9:35	0:0	4	++
stmts	9:39	12:4	3	
water	9:39	0:0	4	{
if	10:8	11:22	4	(( ret =ff_framesync_get_frame (& s -> fs ,i ,& in [ i ] ,0 ) ) < 0)
cond	10:12	10:67	5	( ret =ff_framesync_get_frame (& s -> fs ,i ,& in [ i ] ,0 ) ) < 0
water	10:12	0:0	6	(
water	10:13	0:0	6	ret
op	10:17	0:0	6	=
call	10:19	10:62	6	ff_framesync_get_frame
arg	10:42	10:48	7	&s->fs
op	10:42	0:0	8	&
water	10:43	0:0	8	s
op	10:44	0:0	8	->
water	10:46	0:0	8	fs
arg	10:50	10:51	7	i
water	10:50	0:0	8	i
arg	10:53	10:59	7	&in[i]
op	10:53	0:0	8	&
water	10:54	0:0	8	in
op	10:56	0:0	8	[
water	10:57	0:0	8	i
op	10:58	0:0	8	]
arg	10:61	10:62	7	0
water	10:61	0:0	8	0
water	10:63	0:0	6	)
op	10:65	0:0	6	<
water	10:67	0:0	6	0
stmts	11:12	11:22	5	
return	11:12	11:22	6	ret
water	11:19	0:0	7	ret
water	12:4	0:0	4	}
water	13:4	0:0	2	out
op	13:8	0:0	2	=
call	13:10	13:61	2	ff_get_video_buffer
arg	13:30	13:37	3	outlink
water	13:30	0:0	4	outlink
arg	13:39	13:49	3	outlink->w
water	13:39	0:0	4	outlink
op	13:46	0:0	4	->
water	13:48	0:0	4	w
arg	13:51	13:61	3	outlink->h
water	13:51	0:0	4	outlink
op	13:58	0:0	4	->
water	13:60	0:0	4	h
water	13:62	0:0	2	;
if	14:4	15:30	2	(! out)
cond	14:8	14:9	3	! out
op	14:8	0:0	4	!
water	14:9	0:0	4	out
stmts	15:8	15:30	3	
return	15:8	15:30	4	AVERROR(ENOMEM)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	ENOMEM
water	15:23	0:0	7	ENOMEM
water	16:4	0:0	2	out
op	16:7	0:0	2	->
water	16:9	0:0	2	pts
op	16:13	0:0	2	=
call	16:15	16:74	2	av_rescale_q
arg	16:28	16:37	3	s->fs.pts
water	16:28	0:0	4	s
op	16:29	0:0	4	->
water	16:31	0:0	4	fs
op	16:33	0:0	4	.
water	16:34	0:0	4	pts
arg	16:39	16:54	3	s->fs.time_base
water	16:39	0:0	4	s
op	16:40	0:0	4	->
water	16:42	0:0	4	fs
op	16:44	0:0	4	.
water	16:45	0:0	4	time_base
arg	16:56	16:74	3	outlink->time_base
water	16:56	0:0	4	outlink
op	16:63	0:0	4	->
water	16:65	0:0	4	time_base
water	16:75	0:0	2	;
for	17:4	44:4	2	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	17:9	17:14	3	i = 0 ;
water	17:9	0:0	4	i
op	17:11	0:0	4	=
water	17:13	0:0	4	0
water	17:14	0:0	4	;
cond	17:16	17:23	3	i < s -> nb_inputs
water	17:16	0:0	4	i
op	17:18	0:0	4	<
water	17:20	0:0	4	s
op	17:21	0:0	4	->
water	17:23	0:0	4	nb_inputs
forexpr	17:34	17:35	3	i ++
water	17:34	0:0	4	i
op	17:35	0:0	4	++
stmts	17:39	44:4	3	
water	17:39	0:0	4	{
decl	18:8	18:45	4	AVFilterLink	*inlink
op	18:29	0:0	4	=
water	18:31	0:0	4	ctx
op	18:34	0:0	4	->
water	18:36	0:0	4	inputs
op	18:42	0:0	4	[
water	18:43	0:0	4	i
op	18:44	0:0	4	]
decl	19:8	19:23	4	int	linesize[4]
decl	20:8	20:21	4	int	height[4]
if	21:8	24:8	4	(( ret =av_image_fill_linesizes (linesize ,inlink -> format ,inlink -> w ) ) < 0)
cond	21:12	21:83	5	( ret =av_image_fill_linesizes (linesize ,inlink -> format ,inlink -> w ) ) < 0
water	21:12	0:0	6	(
water	21:13	0:0	6	ret
op	21:17	0:0	6	=
call	21:19	21:78	6	av_image_fill_linesizes
arg	21:43	21:51	7	linesize
water	21:43	0:0	8	linesize
arg	21:53	21:67	7	inlink->format
water	21:53	0:0	8	inlink
op	21:59	0:0	8	->
water	21:61	0:0	8	format
arg	21:69	21:78	7	inlink->w
water	21:69	0:0	8	inlink
op	21:75	0:0	8	->
water	21:77	0:0	8	w
water	21:79	0:0	6	)
op	21:81	0:0	6	<
water	21:83	0:0	6	0
stmts	21:86	24:8	5	
water	21:86	0:0	6	{
call	22:12	22:30	6	av_frame_free
arg	22:26	22:30	7	&out
op	22:26	0:0	8	&
water	22:27	0:0	8	out
water	22:31	0:0	6	;
return	23:12	23:22	6	ret
water	23:19	0:0	7	ret
water	24:8	0:0	6	}
water	25:8	0:0	4	height
op	25:14	0:0	4	[
water	25:15	0:0	4	1
op	25:16	0:0	4	]
op	25:18	0:0	4	=
water	25:20	0:0	4	height
op	25:26	0:0	4	[
water	25:27	0:0	4	2
op	25:28	0:0	4	]
op	25:30	0:0	4	=
call	25:32	25:80	4	FF_CEIL_RSHIFT
arg	25:47	25:56	5	inlink->h
water	25:47	0:0	6	inlink
op	25:53	0:0	6	->
water	25:55	0:0	6	h
arg	25:58	25:80	5	s->desc->log2_chroma_h
water	25:58	0:0	6	s
op	25:59	0:0	6	->
water	25:61	0:0	6	desc
op	25:65	0:0	6	->
water	25:67	0:0	6	log2_chroma_h
water	25:81	0:0	4	;
water	26:8	0:0	4	height
op	26:14	0:0	4	[
water	26:15	0:0	4	0
op	26:16	0:0	4	]
op	26:18	0:0	4	=
water	26:20	0:0	4	height
op	26:26	0:0	4	[
water	26:27	0:0	4	3
op	26:28	0:0	4	]
op	26:30	0:0	4	=
water	26:32	0:0	4	inlink
op	26:38	0:0	4	->
water	26:40	0:0	4	h
water	26:41	0:0	4	;
for	27:8	43:8	4	(p = 0 ;p < s -> nb_planes;p ++)
forinit	27:13	27:18	5	p = 0 ;
water	27:13	0:0	6	p
op	27:15	0:0	6	=
water	27:17	0:0	6	0
water	27:18	0:0	6	;
cond	27:20	27:27	5	p < s -> nb_planes
water	27:20	0:0	6	p
op	27:22	0:0	6	<
water	27:24	0:0	6	s
op	27:25	0:0	6	->
water	27:27	0:0	6	nb_planes
forexpr	27:38	27:39	5	p ++
water	27:38	0:0	6	p
op	27:39	0:0	6	++
stmts	27:43	43:8	5	
water	27:43	0:0	6	{
if	28:12	35:12	6	(s -> is_vertical)
cond	28:16	28:19	7	s -> is_vertical
water	28:16	0:0	8	s
op	28:17	0:0	8	->
water	28:19	0:0	8	is_vertical
stmts	28:32	35:12	7	
water	28:32	0:0	8	{
call	29:16	33:58	8	av_image_copy_plane
arg	29:36	29:79	9	out->data[p]+offset[p]*out->linesize[p]
water	29:36	0:0	10	out
op	29:39	0:0	10	->
water	29:41	0:0	10	data
op	29:45	0:0	10	[
water	29:46	0:0	10	p
op	29:47	0:0	10	]
op	29:49	0:0	10	+
water	29:51	0:0	10	offset
op	29:57	0:0	10	[
water	29:58	0:0	10	p
op	29:59	0:0	10	]
op	29:61	0:0	10	*
water	29:63	0:0	10	out
op	29:66	0:0	10	->
water	29:68	0:0	10	linesize
op	29:76	0:0	10	[
water	29:77	0:0	10	p
op	29:78	0:0	10	]
arg	30:36	30:52	9	out->linesize[p]
water	30:36	0:0	10	out
op	30:39	0:0	10	->
water	30:41	0:0	10	linesize
op	30:49	0:0	10	[
water	30:50	0:0	10	p
op	30:51	0:0	10	]
arg	31:36	31:50	9	in[i]->data[p]
water	31:36	0:0	10	in
op	31:38	0:0	10	[
water	31:39	0:0	10	i
op	31:40	0:0	10	]
op	31:41	0:0	10	->
water	31:43	0:0	10	data
op	31:47	0:0	10	[
water	31:48	0:0	10	p
op	31:49	0:0	10	]
arg	32:36	32:54	9	in[i]->linesize[p]
water	32:36	0:0	10	in
op	32:38	0:0	10	[
water	32:39	0:0	10	i
op	32:40	0:0	10	]
op	32:41	0:0	10	->
water	32:43	0:0	10	linesize
op	32:51	0:0	10	[
water	32:52	0:0	10	p
op	32:53	0:0	10	]
arg	33:36	33:47	9	linesize[p]
water	33:36	0:0	10	linesize
op	33:44	0:0	10	[
water	33:45	0:0	10	p
op	33:46	0:0	10	]
arg	33:49	33:58	9	height[p]
water	33:49	0:0	10	height
op	33:55	0:0	10	[
water	33:56	0:0	10	p
op	33:57	0:0	10	]
water	33:59	0:0	8	;
water	34:16	0:0	8	offset
op	34:22	0:0	8	[
water	34:23	0:0	8	p
op	34:24	0:0	8	]
op	34:26	0:0	8	+=
water	34:29	0:0	8	height
op	34:35	0:0	8	[
water	34:36	0:0	8	p
op	34:37	0:0	8	]
water	34:38	0:0	8	;
water	35:12	0:0	8	}
else	35:14	42:12	6
stmts	35:19	42:12	7	
water	35:19	0:0	8	{
call	36:16	40:58	8	av_image_copy_plane
arg	36:36	36:60	9	out->data[p]+offset[p]
water	36:36	0:0	10	out
op	36:39	0:0	10	->
water	36:41	0:0	10	data
op	36:45	0:0	10	[
water	36:46	0:0	10	p
op	36:47	0:0	10	]
op	36:49	0:0	10	+
water	36:51	0:0	10	offset
op	36:57	0:0	10	[
water	36:58	0:0	10	p
op	36:59	0:0	10	]
arg	37:36	37:52	9	out->linesize[p]
water	37:36	0:0	10	out
op	37:39	0:0	10	->
water	37:41	0:0	10	linesize
op	37:49	0:0	10	[
water	37:50	0:0	10	p
op	37:51	0:0	10	]
arg	38:36	38:50	9	in[i]->data[p]
water	38:36	0:0	10	in
op	38:38	0:0	10	[
water	38:39	0:0	10	i
op	38:40	0:0	10	]
op	38:41	0:0	10	->
water	38:43	0:0	10	data
op	38:47	0:0	10	[
water	38:48	0:0	10	p
op	38:49	0:0	10	]
arg	39:36	39:54	9	in[i]->linesize[p]
water	39:36	0:0	10	in
op	39:38	0:0	10	[
water	39:39	0:0	10	i
op	39:40	0:0	10	]
op	39:41	0:0	10	->
water	39:43	0:0	10	linesize
op	39:51	0:0	10	[
water	39:52	0:0	10	p
op	39:53	0:0	10	]
arg	40:36	40:47	9	linesize[p]
water	40:36	0:0	10	linesize
op	40:44	0:0	10	[
water	40:45	0:0	10	p
op	40:46	0:0	10	]
arg	40:49	40:58	9	height[p]
water	40:49	0:0	10	height
op	40:55	0:0	10	[
water	40:56	0:0	10	p
op	40:57	0:0	10	]
water	40:59	0:0	8	;
water	41:16	0:0	8	offset
op	41:22	0:0	8	[
water	41:23	0:0	8	p
op	41:24	0:0	8	]
op	41:26	0:0	8	+=
water	41:29	0:0	8	linesize
op	41:37	0:0	8	[
water	41:38	0:0	8	p
op	41:39	0:0	8	]
water	41:40	0:0	8	;
water	42:12	0:0	8	}
water	43:8	0:0	6	}
water	44:4	0:0	4	}
return	45:4	45:40	2	ff_filter_frame(outlink,out)
call	45:11	45:39	3	ff_filter_frame
arg	45:27	45:34	4	outlink
water	45:27	0:0	5	outlink
arg	45:36	45:39	4	out
water	45:36	0:0	5	out
