func	1:0	44:0	0	static int	grab_read_header
params	1:27	0:0	1	
param	1:28	1:47	2	AVFormatContext *	s1
stmnts	0:0	43:14	1	
decl	3:4	3:32	2	VideoData	*s
op	3:17	0:0	2	=
water	3:19	0:0	2	s1
op	3:21	0:0	2	->
water	3:23	0:0	2	priv_data
decl	4:4	4:16	2	AVStream	*st
decl	5:4	5:24	2	AVRational	framerate
decl	6:4	6:15	2	int	ret
op	6:12	0:0	2	=
water	6:14	0:0	2	0
if	7:4	16:8	2	(! s -> framerate)
cond	7:8	7:12	3	! s -> framerate
op	7:8	0:0	4	!
water	7:9	0:0	4	s
op	7:10	0:0	4	->
water	7:12	0:0	4	framerate
stmts	8:8	16:8	3	
switch	8:8	16:8	4	(s -> standard)
cond	8:16	8:19	5	s -> standard
water	8:16	0:0	6	s
op	8:17	0:0	6	->
water	8:19	0:0	6	standard
stmts	8:29	16:8	5	
water	8:29	0:0	6	{
label	9:8	9:16	6	case PAL :
water	9:20	0:0	6	s
op	9:21	0:0	6	->
water	9:23	0:0	6	framerate
op	9:33	0:0	6	=
call	9:35	9:50	6	av_strdup
arg	9:45	9:50	7	"pal"
water	9:45	0:0	8	"pal"
water	9:51	0:0	6	;
break	9:54	9:59	6	
label	10:8	10:17	6	case NTSC :
water	10:20	0:0	6	s
op	10:21	0:0	6	->
water	10:23	0:0	6	framerate
op	10:33	0:0	6	=
call	10:35	10:51	6	av_strdup
arg	10:45	10:51	7	"ntsc"
water	10:45	0:0	8	"ntsc"
water	10:52	0:0	6	;
break	10:54	10:59	6	
label	11:8	11:18	6	case SECAM :
water	11:20	0:0	6	s
op	11:21	0:0	6	->
water	11:23	0:0	6	framerate
op	11:33	0:0	6	=
call	11:35	11:49	6	av_strdup
arg	11:45	11:49	7	"25"
water	11:45	0:0	8	"25"
water	11:50	0:0	6	;
break	11:54	11:59	6	
label	12:8	12:15	6	default :
call	13:12	13:58	6	av_log
arg	13:19	13:21	7	s1
water	13:19	0:0	8	s1
arg	13:23	13:35	7	AV_LOG_ERROR
water	13:23	0:0	8	AV_LOG_ERROR
arg	13:37	13:58	7	"Unknown standard.\n"
water	13:37	0:0	8	"Unknown standard.\n"
water	13:59	0:0	6	;
water	14:12	0:0	6	ret
op	14:16	0:0	6	=
call	14:18	14:32	6	AVERROR
arg	14:26	14:32	7	EINVAL
water	14:26	0:0	8	EINVAL
water	14:33	0:0	6	;
goto	15:12	15:20	6	out
water	15:17	0:0	7	out
water	16:8	0:0	6	}
if	17:4	20:4	2	(( ret =av_parse_video_rate (& framerate ,s -> framerate ) ) < 0)
cond	17:8	17:64	3	( ret =av_parse_video_rate (& framerate ,s -> framerate ) ) < 0
water	17:8	0:0	4	(
water	17:9	0:0	4	ret
op	17:13	0:0	4	=
call	17:15	17:59	4	av_parse_video_rate
arg	17:35	17:45	5	&framerate
op	17:35	0:0	6	&
water	17:36	0:0	6	framerate
arg	17:47	17:59	5	s->framerate
water	17:47	0:0	6	s
op	17:48	0:0	6	->
water	17:50	0:0	6	framerate
water	17:60	0:0	4	)
op	17:62	0:0	4	<
water	17:64	0:0	4	0
stmts	17:67	20:4	3	
water	17:67	0:0	4	{
call	18:8	18:82	4	av_log
arg	18:15	18:17	5	s1
water	18:15	0:0	6	s1
arg	18:19	18:31	5	AV_LOG_ERROR
water	18:19	0:0	6	AV_LOG_ERROR
arg	18:33	18:68	5	"Could not parse framerate '%s'.\n"
water	18:33	0:0	6	"Could not parse framerate '%s'.\n"
arg	18:70	18:82	5	s->framerate
water	18:70	0:0	6	s
op	18:71	0:0	6	->
water	18:73	0:0	6	framerate
water	18:83	0:0	4	;
goto	19:8	19:16	4	out
water	19:13	0:0	5	out
water	20:4	0:0	4	}
water	21:4	0:0	2	st
op	21:7	0:0	2	=
call	21:9	21:37	2	avformat_new_stream
arg	21:29	21:31	3	s1
water	21:29	0:0	4	s1
arg	21:33	21:37	3	NULL
water	21:33	0:0	4	NULL
water	21:38	0:0	2	;
if	22:4	25:4	2	(! st)
cond	22:8	22:9	3	! st
op	22:8	0:0	4	!
water	22:9	0:0	4	st
stmts	22:13	25:4	3	
water	22:13	0:0	4	{
water	23:8	0:0	4	ret
op	23:12	0:0	4	=
call	23:14	23:28	4	AVERROR
arg	23:22	23:28	5	ENOMEM
water	23:22	0:0	6	ENOMEM
water	23:29	0:0	4	;
goto	24:8	24:16	4	out
water	24:13	0:0	5	out
water	25:4	0:0	4	}
call	26:4	26:42	2	avpriv_set_pts_info
arg	26:24	26:26	3	st
water	26:24	0:0	4	st
arg	26:28	26:30	3	64
water	26:28	0:0	4	64
arg	26:32	26:33	3	1
water	26:32	0:0	4	1
arg	26:35	26:42	3	1000000
water	26:35	0:0	4	1000000
water	26:43	0:0	2	;
water	27:4	0:0	2	s
op	27:5	0:0	2	->
water	27:7	0:0	2	per_frame
op	27:17	0:0	2	=
water	27:19	0:0	2	(
water	27:20	0:0	2	(
water	27:21	0:0	2	uint64_t
water	27:29	0:0	2	)
water	27:30	0:0	2	1000000
op	27:38	0:0	2	*
water	27:40	0:0	2	framerate
op	27:49	0:0	2	.
water	27:50	0:0	2	den
water	27:53	0:0	2	)
op	27:55	0:0	2	/
water	27:57	0:0	2	framerate
op	27:66	0:0	2	.
water	27:67	0:0	2	num
water	27:70	0:0	2	;
water	28:4	0:0	2	st
op	28:6	0:0	2	->
water	28:8	0:0	2	codec
op	28:13	0:0	2	->
water	28:15	0:0	2	codec_type
op	28:26	0:0	2	=
water	28:28	0:0	2	AVMEDIA_TYPE_VIDEO
water	28:46	0:0	2	;
water	29:4	0:0	2	st
op	29:6	0:0	2	->
water	29:8	0:0	2	codec
op	29:13	0:0	2	->
water	29:15	0:0	2	pix_fmt
op	29:23	0:0	2	=
water	29:25	0:0	2	AV_PIX_FMT_YUV420P
water	29:43	0:0	2	;
water	30:4	0:0	2	st
op	30:6	0:0	2	->
water	30:8	0:0	2	codec
op	30:13	0:0	2	->
water	30:15	0:0	2	codec_id
op	30:24	0:0	2	=
water	30:26	0:0	2	AV_CODEC_ID_RAWVIDEO
water	30:46	0:0	2	;
water	31:4	0:0	2	st
op	31:6	0:0	2	->
water	31:8	0:0	2	codec
op	31:13	0:0	2	->
water	31:15	0:0	2	width
op	31:21	0:0	2	=
water	31:23	0:0	2	s
op	31:24	0:0	2	->
water	31:26	0:0	2	width
water	31:31	0:0	2	;
water	32:4	0:0	2	st
op	32:6	0:0	2	->
water	32:8	0:0	2	codec
op	32:13	0:0	2	->
water	32:15	0:0	2	height
op	32:22	0:0	2	=
water	32:24	0:0	2	s
op	32:25	0:0	2	->
water	32:27	0:0	2	height
water	32:33	0:0	2	;
water	33:4	0:0	2	st
op	33:6	0:0	2	->
water	33:8	0:0	2	codec
op	33:13	0:0	2	->
water	33:15	0:0	2	time_base
op	33:24	0:0	2	.
water	33:25	0:0	2	den
op	33:29	0:0	2	=
water	33:31	0:0	2	framerate
op	33:40	0:0	2	.
water	33:41	0:0	2	num
water	33:44	0:0	2	;
water	34:4	0:0	2	st
op	34:6	0:0	2	->
water	34:8	0:0	2	codec
op	34:13	0:0	2	->
water	34:15	0:0	2	time_base
op	34:24	0:0	2	.
water	34:25	0:0	2	num
op	34:29	0:0	2	=
water	34:31	0:0	2	framerate
op	34:40	0:0	2	.
water	34:41	0:0	2	den
water	34:44	0:0	2	;
if	35:4	39:4	2	(bktr_init (s1 -> filename ,s -> width ,s -> height ,s -> standard ,& s -> video_fd ,& s -> tuner_fd ,- 1 ,0 . 0 ) < 0)
cond	35:8	36:57	3	bktr_init (s1 -> filename ,s -> width ,s -> height ,s -> standard ,& s -> video_fd ,& s -> tuner_fd ,- 1 ,0 . 0 ) < 0
call	35:8	36:53	4	bktr_init
arg	35:18	35:30	5	s1->filename
water	35:18	0:0	6	s1
op	35:20	0:0	6	->
water	35:22	0:0	6	filename
arg	35:32	35:40	5	s->width
water	35:32	0:0	6	s
op	35:33	0:0	6	->
water	35:35	0:0	6	width
arg	35:42	35:51	5	s->height
water	35:42	0:0	6	s
op	35:43	0:0	6	->
water	35:45	0:0	6	height
arg	35:53	35:64	5	s->standard
water	35:53	0:0	6	s
op	35:54	0:0	6	->
water	35:56	0:0	6	standard
arg	36:18	36:30	5	&s->video_fd
op	36:18	0:0	6	&
water	36:19	0:0	6	s
op	36:20	0:0	6	->
water	36:22	0:0	6	video_fd
arg	36:32	36:44	5	&s->tuner_fd
op	36:32	0:0	6	&
water	36:33	0:0	6	s
op	36:34	0:0	6	->
water	36:36	0:0	6	tuner_fd
arg	36:46	36:48	5	-1
op	36:46	0:0	6	-
water	36:47	0:0	6	1
arg	36:50	36:53	5	0.0
water	36:50	0:0	6	0
op	36:51	0:0	6	.
water	36:52	0:0	6	0
op	36:55	0:0	4	<
water	36:57	0:0	4	0
stmts	36:60	39:4	3	
water	36:60	0:0	4	{
water	37:8	0:0	4	ret
op	37:12	0:0	4	=
call	37:14	37:25	4	AVERROR
arg	37:22	37:25	5	EIO
water	37:22	0:0	6	EIO
water	37:26	0:0	4	;
goto	38:8	38:16	4	out
water	38:13	0:0	5	out
water	39:4	0:0	4	}
water	40:4	0:0	2	nsignals
op	40:13	0:0	2	=
water	40:15	0:0	2	0
water	40:16	0:0	2	;
water	41:4	0:0	2	last_frame_time
op	41:20	0:0	2	=
water	41:22	0:0	2	0
water	41:23	0:0	2	;
label	42:0	42:3	2	out :
return	43:4	43:14	2	ret
water	43:11	0:0	3	ret
