func	1:0	36:0	0	static int	output_frame
params	1:23	0:0	1	
param	1:24	1:45	2	AVFilterLink *	outlink
param	1:47	1:61	2	int	nb_samples
stmnts	0:0	35:44	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:34	2	MixContext	*s
op	4:23	0:0	2	=
water	4:25	0:0	2	ctx
op	4:28	0:0	2	->
water	4:30	0:0	2	priv
decl	5:4	5:29	2	AVFrame	*out_buf
water	5:20	0:0	2	,
decl	5:4	5:29	2	AVFrame	*in_buf
decl	6:4	6:9	2	int	i
call	7:4	7:34	2	calculate_scales
arg	7:21	7:22	3	s
water	7:21	0:0	4	s
arg	7:24	7:34	3	nb_samples
water	7:24	0:0	4	nb_samples
water	7:35	0:0	2	;
water	8:4	0:0	2	out_buf
op	8:12	0:0	2	=
call	8:14	8:53	2	ff_get_audio_buffer
arg	8:34	8:41	3	outlink
water	8:34	0:0	4	outlink
arg	8:43	8:53	3	nb_samples
water	8:43	0:0	4	nb_samples
water	8:54	0:0	2	;
if	9:4	10:30	2	(! out_buf)
cond	9:8	9:9	3	! out_buf
op	9:8	0:0	4	!
water	9:9	0:0	4	out_buf
stmts	10:8	10:30	3	
return	10:8	10:30	4	AVERROR(ENOMEM)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	ENOMEM
water	10:23	0:0	7	ENOMEM
water	11:4	0:0	2	in_buf
op	11:11	0:0	2	=
call	11:13	11:52	2	ff_get_audio_buffer
arg	11:33	11:40	3	outlink
water	11:33	0:0	4	outlink
arg	11:42	11:52	3	nb_samples
water	11:42	0:0	4	nb_samples
water	11:53	0:0	2	;
if	12:4	15:4	2	(! in_buf)
cond	12:8	12:9	3	! in_buf
op	12:8	0:0	4	!
water	12:9	0:0	4	in_buf
stmts	12:17	15:4	3	
water	12:17	0:0	4	{
call	13:8	13:30	4	av_frame_free
arg	13:22	13:30	5	&out_buf
op	13:22	0:0	6	&
water	13:23	0:0	6	out_buf
water	13:31	0:0	4	;
return	14:8	14:30	4	AVERROR(ENOMEM)
call	14:15	14:29	5	AVERROR
arg	14:23	14:29	6	ENOMEM
water	14:23	0:0	7	ENOMEM
water	15:4	0:0	4	}
for	16:4	30:4	2	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	16:9	16:14	3	i = 0 ;
water	16:9	0:0	4	i
op	16:11	0:0	4	=
water	16:13	0:0	4	0
water	16:14	0:0	4	;
cond	16:16	16:23	3	i < s -> nb_inputs
water	16:16	0:0	4	i
op	16:18	0:0	4	<
water	16:20	0:0	4	s
op	16:21	0:0	4	->
water	16:23	0:0	4	nb_inputs
forexpr	16:34	16:35	3	i ++
water	16:34	0:0	4	i
op	16:35	0:0	4	++
stmts	16:39	30:4	3	
water	16:39	0:0	4	{
if	17:8	29:8	4	(s -> input_state [ i ] == INPUT_ON)
cond	17:12	17:33	5	s -> input_state [ i ] == INPUT_ON
water	17:12	0:0	6	s
op	17:13	0:0	6	->
water	17:15	0:0	6	input_state
op	17:26	0:0	6	[
water	17:27	0:0	6	i
op	17:28	0:0	6	]
op	17:30	0:0	6	==
water	17:33	0:0	6	INPUT_ON
stmts	17:43	29:8	5	
water	17:43	0:0	6	{
decl	18:12	18:37	6	int	planes
water	18:22	0:0	6	,
decl	18:12	18:37	6	int	plane_size
water	18:34	0:0	6	,
decl	18:12	18:37	6	int	p
call	19:12	20:41	6	av_audio_fifo_read
arg	19:31	19:42	7	s->fifos[i]
water	19:31	0:0	8	s
op	19:32	0:0	8	->
water	19:34	0:0	8	fifos
op	19:39	0:0	8	[
water	19:40	0:0	8	i
op	19:41	0:0	8	]
arg	19:44	19:74	7	(void**)in_buf->extended_data
water	19:44	0:0	8	(
water	19:45	0:0	8	void
op	19:50	0:0	8	*
op	19:51	0:0	8	*
water	19:52	0:0	8	)
water	19:53	0:0	8	in_buf
op	19:59	0:0	8	->
water	19:61	0:0	8	extended_data
arg	20:31	20:41	7	nb_samples
water	20:31	0:0	8	nb_samples
water	20:42	0:0	6	;
water	21:12	0:0	6	planes
op	21:23	0:0	6	=
water	21:25	0:0	6	s
op	21:26	0:0	6	->
water	21:28	0:0	6	planar
water	21:35	0:0	6	?
water	21:37	0:0	6	s
op	21:38	0:0	6	->
water	21:40	0:0	6	nb_channels
water	21:52	0:0	6	:
water	21:54	0:0	6	1
water	21:55	0:0	6	;
water	22:12	0:0	6	plane_size
op	22:23	0:0	6	=
water	22:25	0:0	6	nb_samples
op	22:36	0:0	6	*
water	22:38	0:0	6	(
water	22:39	0:0	6	s
op	22:40	0:0	6	->
water	22:42	0:0	6	planar
water	22:49	0:0	6	?
water	22:51	0:0	6	1
water	22:53	0:0	6	:
water	22:55	0:0	6	s
op	22:56	0:0	6	->
water	22:58	0:0	6	nb_channels
water	22:69	0:0	6	)
water	22:70	0:0	6	;
water	23:12	0:0	6	plane_size
op	23:23	0:0	6	=
call	23:25	23:47	6	FFALIGN
arg	23:33	23:43	7	plane_size
water	23:33	0:0	8	plane_size
arg	23:45	23:47	7	16
water	23:45	0:0	8	16
water	23:48	0:0	6	;
for	24:12	28:12	6	(p = 0 ;p < planes;p ++)
forinit	24:17	24:22	7	p = 0 ;
water	24:17	0:0	8	p
op	24:19	0:0	8	=
water	24:21	0:0	8	0
water	24:22	0:0	8	;
cond	24:24	24:28	7	p < planes
water	24:24	0:0	8	p
op	24:26	0:0	8	<
water	24:28	0:0	8	planes
forexpr	24:36	24:37	7	p ++
water	24:36	0:0	8	p
op	24:37	0:0	8	++
stmts	24:41	28:12	7	
water	24:41	0:0	8	{
call	25:16	27:72	8	s->fdsp->vector_fmac_scalar
arg	25:44	25:78	9	(float*)out_buf->extended_data[p]
water	25:44	0:0	10	(
water	25:45	0:0	10	float
op	25:51	0:0	10	*
water	25:52	0:0	10	)
water	25:53	0:0	10	out_buf
op	25:60	0:0	10	->
water	25:62	0:0	10	extended_data
op	25:75	0:0	10	[
water	25:76	0:0	10	p
op	25:77	0:0	10	]
arg	26:43	26:77	9	(float*)in_buf->extended_data[p]
water	26:43	0:0	10	(
water	26:44	0:0	10	float
op	26:50	0:0	10	*
water	26:51	0:0	10	)
water	26:53	0:0	10	in_buf
op	26:59	0:0	10	->
water	26:61	0:0	10	extended_data
op	26:74	0:0	10	[
water	26:75	0:0	10	p
op	26:76	0:0	10	]
arg	27:43	27:60	9	s->input_scale[i]
water	27:43	0:0	10	s
op	27:44	0:0	10	->
water	27:46	0:0	10	input_scale
op	27:57	0:0	10	[
water	27:58	0:0	10	i
op	27:59	0:0	10	]
arg	27:62	27:72	9	plane_size
water	27:62	0:0	10	plane_size
water	27:73	0:0	8	;
water	28:12	0:0	8	}
water	29:8	0:0	6	}
water	30:4	0:0	4	}
call	31:4	31:25	2	av_frame_free
arg	31:18	31:25	3	&in_buf
op	31:18	0:0	4	&
water	31:19	0:0	4	in_buf
water	31:26	0:0	2	;
water	32:4	0:0	2	out_buf
op	32:11	0:0	2	->
water	32:13	0:0	2	pts
op	32:17	0:0	2	=
water	32:19	0:0	2	s
op	32:20	0:0	2	->
water	32:22	0:0	2	next_pts
water	32:30	0:0	2	;
if	33:4	34:33	2	(s -> next_pts != AV_NOPTS_VALUE)
cond	33:8	33:23	3	s -> next_pts != AV_NOPTS_VALUE
water	33:8	0:0	4	s
op	33:9	0:0	4	->
water	33:11	0:0	4	next_pts
op	33:20	0:0	4	!=
water	33:23	0:0	4	AV_NOPTS_VALUE
stmts	34:8	34:33	3	
water	34:8	0:0	4	s
op	34:9	0:0	4	->
water	34:11	0:0	4	next_pts
op	34:20	0:0	4	+=
water	34:23	0:0	4	nb_samples
water	34:33	0:0	4	;
return	35:4	35:44	2	ff_filter_frame(outlink,out_buf)
call	35:11	35:43	3	ff_filter_frame
arg	35:27	35:34	4	outlink
water	35:27	0:0	5	outlink
arg	35:36	35:43	4	out_buf
water	35:36	0:0	5	out_buf
