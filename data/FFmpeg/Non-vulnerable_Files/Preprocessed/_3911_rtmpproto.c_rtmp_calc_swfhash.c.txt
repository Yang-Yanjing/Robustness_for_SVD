func	1:0	68:0	0	static int	rtmp_calc_swfhash
params	1:28	0:0	1	
param	1:29	1:42	2	URLContext *	s
stmnts	0:0	67:14	1	
decl	3:4	3:34	2	RTMPContext	*rt
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:55	2	uint8_t	*in_data
op	4:21	0:0	2	=
water	4:23	0:0	2	NULL
water	4:27	0:0	2	,
decl	4:4	4:55	2	uint8_t	*out_data
op	4:39	0:0	2	=
water	4:41	0:0	2	NULL
water	4:45	0:0	2	,
decl	4:4	4:55	2	uint8_t	*swfdata
decl	5:4	5:29	2	int64_t	in_size
water	5:19	0:0	2	,
decl	5:4	5:29	2	int64_t	out_size
decl	6:4	6:22	2	URLContext	*stream
decl	7:4	7:20	2	char	swfhash[32]
decl	8:4	8:15	2	int	swfsize
decl	9:4	9:15	2	int	ret
op	9:12	0:0	2	=
water	9:14	0:0	2	0
if	11:4	15:4	2	(( ret =ffurl_open (& stream ,rt -> swfverify ,AVIO_FLAG_READ ,& s -> interrupt_callback ,NULL ) ) < 0)
cond	11:8	12:59	3	( ret =ffurl_open (& stream ,rt -> swfverify ,AVIO_FLAG_READ ,& s -> interrupt_callback ,NULL ) ) < 0
water	11:8	0:0	4	(
water	11:9	0:0	4	ret
op	11:13	0:0	4	=
call	11:15	12:54	4	ffurl_open
arg	11:26	11:33	5	&stream
op	11:26	0:0	6	&
water	11:27	0:0	6	stream
arg	11:35	11:48	5	rt->swfverify
water	11:35	0:0	6	rt
op	11:37	0:0	6	->
water	11:39	0:0	6	swfverify
arg	11:50	11:64	5	AVIO_FLAG_READ
water	11:50	0:0	6	AVIO_FLAG_READ
arg	12:26	12:48	5	&s->interrupt_callback
op	12:26	0:0	6	&
water	12:27	0:0	6	s
op	12:28	0:0	6	->
water	12:30	0:0	6	interrupt_callback
arg	12:50	12:54	5	NULL
water	12:50	0:0	6	NULL
water	12:55	0:0	4	)
op	12:57	0:0	4	<
water	12:59	0:0	4	0
stmts	12:62	15:4	3	
water	12:62	0:0	4	{
call	13:8	13:77	4	av_log
arg	13:15	13:16	5	s
water	13:15	0:0	6	s
arg	13:18	13:30	5	AV_LOG_ERROR
water	13:18	0:0	6	AV_LOG_ERROR
arg	13:32	13:62	5	"Cannot open connection %s.\n"
water	13:32	0:0	6	"Cannot open connection %s.\n"
arg	13:64	13:77	5	rt->swfverify
water	13:64	0:0	6	rt
op	13:66	0:0	6	->
water	13:68	0:0	6	swfverify
water	13:78	0:0	4	;
goto	14:8	14:17	4	fail
water	14:13	0:0	5	fail
water	15:4	0:0	4	}
if	16:4	19:4	2	(( in_size =ffurl_seek (stream ,0 ,AVSEEK_SIZE ) ) < 0)
cond	16:8	16:57	3	( in_size =ffurl_seek (stream ,0 ,AVSEEK_SIZE ) ) < 0
water	16:8	0:0	4	(
water	16:9	0:0	4	in_size
op	16:17	0:0	4	=
call	16:19	16:52	4	ffurl_seek
arg	16:30	16:36	5	stream
water	16:30	0:0	6	stream
arg	16:38	16:39	5	0
water	16:38	0:0	6	0
arg	16:41	16:52	5	AVSEEK_SIZE
water	16:41	0:0	6	AVSEEK_SIZE
water	16:53	0:0	4	)
op	16:55	0:0	4	<
water	16:57	0:0	4	0
stmts	16:60	19:4	3	
water	16:60	0:0	4	{
water	17:8	0:0	4	ret
op	17:12	0:0	4	=
call	17:14	17:25	4	AVERROR
arg	17:22	17:25	5	EIO
water	17:22	0:0	6	EIO
water	17:26	0:0	4	;
goto	18:8	18:17	4	fail
water	18:13	0:0	5	fail
water	19:4	0:0	4	}
if	20:4	23:4	2	(! ( in_data =av_malloc (in_size ) ))
cond	20:8	20:38	3	! ( in_data =av_malloc (in_size ) )
op	20:8	0:0	4	!
water	20:9	0:0	4	(
water	20:10	0:0	4	in_data
op	20:18	0:0	4	=
call	20:20	20:37	4	av_malloc
arg	20:30	20:37	5	in_size
water	20:30	0:0	6	in_size
water	20:38	0:0	4	)
stmts	20:41	23:4	3	
water	20:41	0:0	4	{
water	21:8	0:0	4	ret
op	21:12	0:0	4	=
call	21:14	21:28	4	AVERROR
arg	21:22	21:28	5	ENOMEM
water	21:22	0:0	6	ENOMEM
water	21:29	0:0	4	;
goto	22:8	22:17	4	fail
water	22:13	0:0	5	fail
water	23:4	0:0	4	}
if	24:4	25:17	2	(( ret =ffurl_read_complete (stream ,in_data ,in_size ) ) < 0)
cond	24:8	24:64	3	( ret =ffurl_read_complete (stream ,in_data ,in_size ) ) < 0
water	24:8	0:0	4	(
water	24:9	0:0	4	ret
op	24:13	0:0	4	=
call	24:15	24:59	4	ffurl_read_complete
arg	24:35	24:41	5	stream
water	24:35	0:0	6	stream
arg	24:43	24:50	5	in_data
water	24:43	0:0	6	in_data
arg	24:52	24:59	5	in_size
water	24:52	0:0	6	in_size
water	24:60	0:0	4	)
op	24:62	0:0	4	<
water	24:64	0:0	4	0
stmts	25:8	25:17	3	
goto	25:8	25:17	4	fail
water	25:13	0:0	5	fail
if	26:4	29:4	2	(in_size < 3)
cond	26:8	26:18	3	in_size < 3
water	26:8	0:0	4	in_size
op	26:16	0:0	4	<
water	26:18	0:0	4	3
stmts	26:21	29:4	3	
water	26:21	0:0	4	{
water	27:8	0:0	4	ret
op	27:12	0:0	4	=
water	27:14	0:0	4	AVERROR_INVALIDDATA
water	27:33	0:0	4	;
goto	28:8	28:17	4	fail
water	28:13	0:0	5	fail
water	29:4	0:0	4	}
if	30:4	51:4	2	(!memcmp (in_data ,"CWS" ,3 ))
cond	30:8	30:33	3	!memcmp (in_data ,"CWS" ,3 )
op	30:8	0:0	4	!
call	30:9	30:33	4	memcmp
arg	30:16	30:23	5	in_data
water	30:16	0:0	6	in_data
arg	30:25	30:30	5	"CWS"
water	30:25	0:0	6	"CWS"
arg	30:32	30:33	5	3
water	30:32	0:0	6	3
stmts	30:36	51:4	3	
water	30:36	0:0	4	{
if	32:8	35:8	4	(! ( out_data =av_malloc (8 ) ))
cond	32:12	32:37	5	! ( out_data =av_malloc (8 ) )
op	32:12	0:0	6	!
water	32:13	0:0	6	(
water	32:14	0:0	6	out_data
op	32:23	0:0	6	=
call	32:25	32:36	6	av_malloc
arg	32:35	32:36	7	8
water	32:35	0:0	8	8
water	32:37	0:0	6	)
stmts	32:40	35:8	5	
water	32:40	0:0	6	{
water	33:12	0:0	6	ret
op	33:16	0:0	6	=
call	33:18	33:32	6	AVERROR
arg	33:26	33:32	7	ENOMEM
water	33:26	0:0	8	ENOMEM
water	33:33	0:0	6	;
goto	34:12	34:21	6	fail
water	34:17	0:0	7	fail
water	35:8	0:0	6	}
op	36:8	0:0	4	*
water	36:9	0:0	4	in_data
op	36:17	0:0	4	=
water	36:19	0:0	4	'F'
water	36:22	0:0	4	;
call	37:8	37:35	4	memcpy
arg	37:15	37:23	5	out_data
water	37:15	0:0	6	out_data
arg	37:25	37:32	5	in_data
water	37:25	0:0	6	in_data
arg	37:34	37:35	5	8
water	37:34	0:0	6	8
water	37:36	0:0	4	;
water	38:8	0:0	4	out_size
op	38:17	0:0	4	=
water	38:19	0:0	4	8
water	38:20	0:0	4	;
if	40:8	42:21	4	(( ret =rtmp_uncompress_swfplayer (in_data + 8 ,in_size - 8 ,& out_data ,& out_size ) ) < 0)
cond	40:12	41:70	5	( ret =rtmp_uncompress_swfplayer (in_data + 8 ,in_size - 8 ,& out_data ,& out_size ) ) < 0
water	40:12	0:0	6	(
water	40:13	0:0	6	ret
op	40:17	0:0	6	=
call	40:19	41:65	6	rtmp_uncompress_swfplayer
arg	40:45	40:56	7	in_data+8
water	40:45	0:0	8	in_data
op	40:53	0:0	8	+
water	40:55	0:0	8	8
arg	40:58	40:69	7	in_size-8
water	40:58	0:0	8	in_size
op	40:66	0:0	8	-
water	40:68	0:0	8	8
arg	41:45	41:54	7	&out_data
op	41:45	0:0	8	&
water	41:46	0:0	8	out_data
arg	41:56	41:65	7	&out_size
op	41:56	0:0	8	&
water	41:57	0:0	8	out_size
water	41:66	0:0	6	)
op	41:68	0:0	6	<
water	41:70	0:0	6	0
stmts	42:12	42:21	5	
goto	42:12	42:21	6	fail
water	42:17	0:0	7	fail
call	44:8	45:74	4	av_log
arg	44:15	44:16	5	s
water	44:15	0:0	6	s
arg	44:18	44:30	5	AV_LOG_ERROR
water	44:18	0:0	6	AV_LOG_ERROR
arg	45:15	45:74	5	"Zlib is required for decompressing the SWF player file.\n"
water	45:15	0:0	6	"Zlib is required for decompressing the SWF player file.\n"
water	45:75	0:0	4	;
water	46:8	0:0	4	ret
op	46:12	0:0	4	=
call	46:14	46:28	4	AVERROR
arg	46:22	46:28	5	EINVAL
water	46:22	0:0	6	EINVAL
water	46:29	0:0	4	;
goto	47:8	47:17	4	fail
water	47:13	0:0	5	fail
water	49:8	0:0	4	swfsize
op	49:16	0:0	4	=
water	49:18	0:0	4	out_size
water	49:26	0:0	4	;
water	50:8	0:0	4	swfdata
op	50:16	0:0	4	=
water	50:18	0:0	4	out_data
water	50:26	0:0	4	;
water	51:4	0:0	4	}
else	51:6	54:4	2
stmts	51:11	54:4	3	
water	51:11	0:0	4	{
water	52:8	0:0	4	swfsize
op	52:16	0:0	4	=
water	52:18	0:0	4	in_size
water	52:25	0:0	4	;
water	53:8	0:0	4	swfdata
op	53:16	0:0	4	=
water	53:18	0:0	4	in_data
water	53:25	0:0	4	;
water	54:4	0:0	4	}
if	56:4	59:17	2	(( ret =ff_rtmp_calc_digest (swfdata ,swfsize ,0 ,"Genuine Adobe Flash Player 001" ,30 ,swfhash ) ) < 0)
cond	56:8	58:47	3	( ret =ff_rtmp_calc_digest (swfdata ,swfsize ,0 ,"Genuine Adobe Flash Player 001" ,30 ,swfhash ) ) < 0
water	56:8	0:0	4	(
water	56:9	0:0	4	ret
op	56:13	0:0	4	=
call	56:15	58:42	4	ff_rtmp_calc_digest
arg	56:35	56:42	5	swfdata
water	56:35	0:0	6	swfdata
arg	56:44	56:51	5	swfsize
water	56:44	0:0	6	swfsize
arg	56:53	56:54	5	0
water	56:53	0:0	6	0
arg	57:35	57:67	5	"Genuine Adobe Flash Player 001"
water	57:35	0:0	6	"Genuine Adobe Flash Player 001"
arg	57:69	57:71	5	30
water	57:69	0:0	6	30
arg	58:35	58:42	5	swfhash
water	58:35	0:0	6	swfhash
water	58:43	0:0	4	)
op	58:45	0:0	4	<
water	58:47	0:0	4	0
stmts	59:8	59:17	3	
goto	59:8	59:17	4	fail
water	59:13	0:0	5	fail
call	61:4	61:53	2	av_opt_set_bin
arg	61:19	61:21	3	rt
water	61:19	0:0	4	rt
arg	61:23	61:37	3	"rtmp_swfhash"
water	61:23	0:0	4	"rtmp_swfhash"
arg	61:39	61:46	3	swfhash
water	61:39	0:0	4	swfhash
arg	61:48	61:50	3	32
water	61:48	0:0	4	32
arg	61:52	61:53	3	0
water	61:52	0:0	4	0
water	61:54	0:0	2	;
water	62:4	0:0	2	rt
op	62:6	0:0	2	->
water	62:8	0:0	2	swfsize
op	62:16	0:0	2	=
water	62:18	0:0	2	swfsize
water	62:25	0:0	2	;
label	63:0	63:4	2	fail :
call	64:4	64:21	2	av_freep
arg	64:13	64:21	3	&in_data
op	64:13	0:0	4	&
water	64:14	0:0	4	in_data
water	64:22	0:0	2	;
call	65:4	65:22	2	av_freep
arg	65:13	65:22	3	&out_data
op	65:13	0:0	4	&
water	65:14	0:0	4	out_data
water	65:23	0:0	2	;
call	66:4	66:22	2	ffurl_close
arg	66:16	66:22	3	stream
water	66:16	0:0	4	stream
water	66:23	0:0	2	;
return	67:4	67:14	2	ret
water	67:11	0:0	3	ret
