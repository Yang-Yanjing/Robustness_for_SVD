func	1:0	48:0	0	static int	areverse_request_frame
params	1:33	0:0	1	
param	1:34	1:55	2	AVFilterLink *	outlink
stmnts	0:0	47:14	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:33	2	ReverseContext	*s
op	4:22	0:0	2	=
water	4:24	0:0	2	ctx
op	4:27	0:0	2	->
water	4:29	0:0	2	priv
decl	5:4	5:20	2	int	ret
water	5:11	0:0	2	,
decl	5:4	5:20	2	int	p
water	5:14	0:0	2	,
decl	5:4	5:20	2	int	i
water	5:17	0:0	2	,
decl	5:4	5:20	2	int	j
water	6:4	0:0	2	ret
op	6:8	0:0	2	=
call	6:10	6:41	2	ff_request_frame
arg	6:27	6:41	3	ctx->inputs[0]
water	6:27	0:0	4	ctx
op	6:30	0:0	4	->
water	6:32	0:0	4	inputs
op	6:38	0:0	4	[
water	6:39	0:0	4	0
op	6:40	0:0	4	]
water	6:42	0:0	2	;
if	7:4	46:4	2	(ret == AVERROR_EOF && s -> nb_frames > 0)
cond	7:8	7:45	3	ret == AVERROR_EOF && s -> nb_frames > 0
water	7:8	0:0	4	ret
op	7:12	0:0	4	==
water	7:15	0:0	4	AVERROR_EOF
op	7:27	0:0	4	&&
water	7:30	0:0	4	s
op	7:31	0:0	4	->
water	7:33	0:0	4	nb_frames
op	7:43	0:0	4	>
water	7:45	0:0	4	0
stmts	7:48	46:4	3	
water	7:48	0:0	4	{
decl	8:8	8:50	4	AVFrame	*out
op	8:21	0:0	4	=
water	8:23	0:0	4	s
op	8:24	0:0	4	->
water	8:26	0:0	4	frames
op	8:32	0:0	4	[
water	8:33	0:0	4	s
op	8:34	0:0	4	->
water	8:36	0:0	4	nb_frames
op	8:46	0:0	4	-
water	8:48	0:0	4	1
op	8:49	0:0	4	]
water	9:8	0:0	4	out
op	9:11	0:0	4	->
water	9:13	0:0	4	pts
op	9:21	0:0	4	=
water	9:23	0:0	4	s
op	9:24	0:0	4	->
water	9:26	0:0	4	pts
op	9:29	0:0	4	[
water	9:30	0:0	4	s
op	9:31	0:0	4	->
water	9:33	0:0	4	flush_idx
op	9:42	0:0	4	++
op	9:44	0:0	4	]
water	9:45	0:0	4	;
for	10:8	43:8	4	(p = 0 ;p < outlink -> channels;p ++)
forinit	10:13	10:18	5	p = 0 ;
water	10:13	0:0	6	p
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:20	10:33	5	p < outlink -> channels
water	10:20	0:0	6	p
op	10:22	0:0	6	<
water	10:24	0:0	6	outlink
op	10:31	0:0	6	->
water	10:33	0:0	6	channels
forexpr	10:43	10:44	5	p ++
water	10:43	0:0	6	p
op	10:44	0:0	6	++
stmts	10:48	43:8	5	
water	10:48	0:0	6	{
switch	11:12	42:12	6	(outlink -> format)
cond	11:20	11:29	7	outlink -> format
water	11:20	0:0	8	outlink
op	11:27	0:0	8	->
water	11:29	0:0	8	format
stmts	11:37	42:12	7	
water	11:37	0:0	8	{
label	12:12	12:34	8	case AV_SAMPLE_FMT_U8P :
water	12:36	0:0	8	{
decl	13:16	13:63	8	uint8_t	*dst
op	13:29	0:0	8	=
water	13:31	0:0	8	(
water	13:32	0:0	8	uint8_t
op	13:40	0:0	8	*
water	13:41	0:0	8	)
water	13:42	0:0	8	out
op	13:45	0:0	8	->
water	13:47	0:0	8	extended_data
op	13:60	0:0	8	[
water	13:61	0:0	8	p
op	13:62	0:0	8	]
for	14:16	15:51	8	(i = 0 , j = out -> nb_samples - 1 ;i < j;i ++ , j --)
forinit	14:21	14:51	9	i = 0 , j = out -> nb_samples - 1 ;
water	14:21	0:0	10	i
op	14:23	0:0	10	=
water	14:25	0:0	10	0
water	14:26	0:0	10	,
water	14:28	0:0	10	j
op	14:30	0:0	10	=
water	14:32	0:0	10	out
op	14:35	0:0	10	->
water	14:37	0:0	10	nb_samples
op	14:48	0:0	10	-
water	14:50	0:0	10	1
water	14:51	0:0	10	;
cond	14:53	14:57	9	i < j
water	14:53	0:0	10	i
op	14:55	0:0	10	<
water	14:57	0:0	10	j
forexpr	14:60	14:66	9	i ++ , j --
water	14:60	0:0	10	i
op	14:61	0:0	10	++
water	14:63	0:0	10	,
water	14:65	0:0	10	j
op	14:66	0:0	10	--
stmts	15:20	15:51	9	
call	15:20	15:50	10	FFSWAP
arg	15:27	15:34	11	uint8_t
water	15:27	0:0	12	uint8_t
arg	15:36	15:42	11	dst[i]
water	15:36	0:0	12	dst
op	15:39	0:0	12	[
water	15:40	0:0	12	i
op	15:41	0:0	12	]
arg	15:44	15:50	11	dst[j]
water	15:44	0:0	12	dst
op	15:47	0:0	12	[
water	15:48	0:0	12	j
op	15:49	0:0	12	]
water	15:51	0:0	10	;
water	16:12	0:0	8	}
break	17:16	17:21	8	
label	18:12	18:35	8	case AV_SAMPLE_FMT_S16P :
water	18:37	0:0	8	{
decl	19:16	19:63	8	int16_t	*dst
op	19:29	0:0	8	=
water	19:31	0:0	8	(
water	19:32	0:0	8	int16_t
op	19:40	0:0	8	*
water	19:41	0:0	8	)
water	19:42	0:0	8	out
op	19:45	0:0	8	->
water	19:47	0:0	8	extended_data
op	19:60	0:0	8	[
water	19:61	0:0	8	p
op	19:62	0:0	8	]
for	20:16	21:51	8	(i = 0 , j = out -> nb_samples - 1 ;i < j;i ++ , j --)
forinit	20:21	20:51	9	i = 0 , j = out -> nb_samples - 1 ;
water	20:21	0:0	10	i
op	20:23	0:0	10	=
water	20:25	0:0	10	0
water	20:26	0:0	10	,
water	20:28	0:0	10	j
op	20:30	0:0	10	=
water	20:32	0:0	10	out
op	20:35	0:0	10	->
water	20:37	0:0	10	nb_samples
op	20:48	0:0	10	-
water	20:50	0:0	10	1
water	20:51	0:0	10	;
cond	20:53	20:57	9	i < j
water	20:53	0:0	10	i
op	20:55	0:0	10	<
water	20:57	0:0	10	j
forexpr	20:60	20:66	9	i ++ , j --
water	20:60	0:0	10	i
op	20:61	0:0	10	++
water	20:63	0:0	10	,
water	20:65	0:0	10	j
op	20:66	0:0	10	--
stmts	21:20	21:51	9	
call	21:20	21:50	10	FFSWAP
arg	21:27	21:34	11	int16_t
water	21:27	0:0	12	int16_t
arg	21:36	21:42	11	dst[i]
water	21:36	0:0	12	dst
op	21:39	0:0	12	[
water	21:40	0:0	12	i
op	21:41	0:0	12	]
arg	21:44	21:50	11	dst[j]
water	21:44	0:0	12	dst
op	21:47	0:0	12	[
water	21:48	0:0	12	j
op	21:49	0:0	12	]
water	21:51	0:0	10	;
water	22:12	0:0	8	}
break	23:16	23:21	8	
label	24:12	24:35	8	case AV_SAMPLE_FMT_S32P :
water	24:37	0:0	8	{
decl	25:16	25:63	8	int32_t	*dst
op	25:29	0:0	8	=
water	25:31	0:0	8	(
water	25:32	0:0	8	int32_t
op	25:40	0:0	8	*
water	25:41	0:0	8	)
water	25:42	0:0	8	out
op	25:45	0:0	8	->
water	25:47	0:0	8	extended_data
op	25:60	0:0	8	[
water	25:61	0:0	8	p
op	25:62	0:0	8	]
for	26:16	27:51	8	(i = 0 , j = out -> nb_samples - 1 ;i < j;i ++ , j --)
forinit	26:21	26:51	9	i = 0 , j = out -> nb_samples - 1 ;
water	26:21	0:0	10	i
op	26:23	0:0	10	=
water	26:25	0:0	10	0
water	26:26	0:0	10	,
water	26:28	0:0	10	j
op	26:30	0:0	10	=
water	26:32	0:0	10	out
op	26:35	0:0	10	->
water	26:37	0:0	10	nb_samples
op	26:48	0:0	10	-
water	26:50	0:0	10	1
water	26:51	0:0	10	;
cond	26:53	26:57	9	i < j
water	26:53	0:0	10	i
op	26:55	0:0	10	<
water	26:57	0:0	10	j
forexpr	26:60	26:66	9	i ++ , j --
water	26:60	0:0	10	i
op	26:61	0:0	10	++
water	26:63	0:0	10	,
water	26:65	0:0	10	j
op	26:66	0:0	10	--
stmts	27:20	27:51	9	
call	27:20	27:50	10	FFSWAP
arg	27:27	27:34	11	int32_t
water	27:27	0:0	12	int32_t
arg	27:36	27:42	11	dst[i]
water	27:36	0:0	12	dst
op	27:39	0:0	12	[
water	27:40	0:0	12	i
op	27:41	0:0	12	]
arg	27:44	27:50	11	dst[j]
water	27:44	0:0	12	dst
op	27:47	0:0	12	[
water	27:48	0:0	12	j
op	27:49	0:0	12	]
water	27:51	0:0	10	;
water	28:12	0:0	8	}
break	29:16	29:21	8	
label	30:12	30:35	8	case AV_SAMPLE_FMT_FLTP :
water	30:37	0:0	8	{
decl	31:16	31:59	8	float	*dst
op	31:27	0:0	8	=
water	31:29	0:0	8	(
water	31:30	0:0	8	float
op	31:36	0:0	8	*
water	31:37	0:0	8	)
water	31:38	0:0	8	out
op	31:41	0:0	8	->
water	31:43	0:0	8	extended_data
op	31:56	0:0	8	[
water	31:57	0:0	8	p
op	31:58	0:0	8	]
for	32:16	33:49	8	(i = 0 , j = out -> nb_samples - 1 ;i < j;i ++ , j --)
forinit	32:21	32:51	9	i = 0 , j = out -> nb_samples - 1 ;
water	32:21	0:0	10	i
op	32:23	0:0	10	=
water	32:25	0:0	10	0
water	32:26	0:0	10	,
water	32:28	0:0	10	j
op	32:30	0:0	10	=
water	32:32	0:0	10	out
op	32:35	0:0	10	->
water	32:37	0:0	10	nb_samples
op	32:48	0:0	10	-
water	32:50	0:0	10	1
water	32:51	0:0	10	;
cond	32:53	32:57	9	i < j
water	32:53	0:0	10	i
op	32:55	0:0	10	<
water	32:57	0:0	10	j
forexpr	32:60	32:66	9	i ++ , j --
water	32:60	0:0	10	i
op	32:61	0:0	10	++
water	32:63	0:0	10	,
water	32:65	0:0	10	j
op	32:66	0:0	10	--
stmts	33:20	33:49	9	
call	33:20	33:48	10	FFSWAP
arg	33:27	33:32	11	float
water	33:27	0:0	12	float
arg	33:34	33:40	11	dst[i]
water	33:34	0:0	12	dst
op	33:37	0:0	12	[
water	33:38	0:0	12	i
op	33:39	0:0	12	]
arg	33:42	33:48	11	dst[j]
water	33:42	0:0	12	dst
op	33:45	0:0	12	[
water	33:46	0:0	12	j
op	33:47	0:0	12	]
water	33:49	0:0	10	;
water	34:12	0:0	8	}
break	35:16	35:21	8	
label	36:12	36:35	8	case AV_SAMPLE_FMT_DBLP :
water	36:37	0:0	8	{
decl	37:16	37:61	8	double	*dst
op	37:28	0:0	8	=
water	37:30	0:0	8	(
water	37:31	0:0	8	double
op	37:38	0:0	8	*
water	37:39	0:0	8	)
water	37:40	0:0	8	out
op	37:43	0:0	8	->
water	37:45	0:0	8	extended_data
op	37:58	0:0	8	[
water	37:59	0:0	8	p
op	37:60	0:0	8	]
for	38:16	39:50	8	(i = 0 , j = out -> nb_samples - 1 ;i < j;i ++ , j --)
forinit	38:21	38:51	9	i = 0 , j = out -> nb_samples - 1 ;
water	38:21	0:0	10	i
op	38:23	0:0	10	=
water	38:25	0:0	10	0
water	38:26	0:0	10	,
water	38:28	0:0	10	j
op	38:30	0:0	10	=
water	38:32	0:0	10	out
op	38:35	0:0	10	->
water	38:37	0:0	10	nb_samples
op	38:48	0:0	10	-
water	38:50	0:0	10	1
water	38:51	0:0	10	;
cond	38:53	38:57	9	i < j
water	38:53	0:0	10	i
op	38:55	0:0	10	<
water	38:57	0:0	10	j
forexpr	38:60	38:66	9	i ++ , j --
water	38:60	0:0	10	i
op	38:61	0:0	10	++
water	38:63	0:0	10	,
water	38:65	0:0	10	j
op	38:66	0:0	10	--
stmts	39:20	39:50	9	
call	39:20	39:49	10	FFSWAP
arg	39:27	39:33	11	double
water	39:27	0:0	12	double
arg	39:35	39:41	11	dst[i]
water	39:35	0:0	12	dst
op	39:38	0:0	12	[
water	39:39	0:0	12	i
op	39:40	0:0	12	]
arg	39:43	39:49	11	dst[j]
water	39:43	0:0	12	dst
op	39:46	0:0	12	[
water	39:47	0:0	12	j
op	39:48	0:0	12	]
water	39:50	0:0	10	;
water	40:12	0:0	8	}
break	41:16	41:21	8	
water	42:12	0:0	8	}
water	43:8	0:0	6	}
water	44:8	0:0	4	ret
op	44:12	0:0	4	=
call	44:14	44:42	4	ff_filter_frame
arg	44:30	44:37	5	outlink
water	44:30	0:0	6	outlink
arg	44:39	44:42	5	out
water	44:39	0:0	6	out
water	44:43	0:0	4	;
water	45:8	0:0	4	s
op	45:9	0:0	4	->
water	45:11	0:0	4	nb_frames
op	45:20	0:0	4	--
water	45:22	0:0	4	;
water	46:4	0:0	4	}
return	47:4	47:14	2	ret
water	47:11	0:0	3	ret
