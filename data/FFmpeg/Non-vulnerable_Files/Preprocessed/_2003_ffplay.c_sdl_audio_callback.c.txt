func	1:0	40:0	0	static void	sdl_audio_callback
params	1:30	0:0	1	
param	1:31	1:43	2	void *	opaque
param	1:45	1:58	2	Uint8 *	stream
param	1:60	1:67	2	int	len
stmnts	0:0	39:4	1	
decl	3:4	3:27	2	VideoState	*is
op	3:19	0:0	2	=
water	3:21	0:0	2	opaque
decl	4:4	4:24	2	int	audio_size
water	4:18	0:0	2	,
decl	4:4	4:24	2	int	len1
water	5:4	0:0	2	audio_callback_time
op	5:24	0:0	2	=
call	5:26	5:46	2	av_gettime_relative
water	5:47	0:0	2	;
while	6:4	33:4	2	(len > 0)
cond	6:11	6:17	3	len > 0
water	6:11	0:0	4	len
op	6:15	0:0	4	>
water	6:17	0:0	4	0
stmts	6:20	33:4	3	
water	6:20	0:0	4	{
if	7:8	19:8	4	(is -> audio_buf_index >= is -> audio_buf_size)
cond	7:12	7:39	5	is -> audio_buf_index >= is -> audio_buf_size
water	7:12	0:0	6	is
op	7:14	0:0	6	->
water	7:16	0:0	6	audio_buf_index
op	7:32	0:0	6	>=
water	7:35	0:0	6	is
op	7:37	0:0	6	->
water	7:39	0:0	6	audio_buf_size
stmts	7:55	19:8	5	
water	7:55	0:0	6	{
water	8:11	0:0	6	audio_size
op	8:22	0:0	6	=
call	8:24	8:45	6	audio_decode_frame
arg	8:43	8:45	7	is
water	8:43	0:0	8	is
water	8:46	0:0	6	;
if	9:11	13:11	6	(audio_size < 0)
cond	9:15	9:28	7	audio_size < 0
water	9:15	0:0	8	audio_size
op	9:26	0:0	8	<
water	9:28	0:0	8	0
stmts	9:31	13:11	7	
water	9:31	0:0	8	{
water	11:15	0:0	8	is
op	11:17	0:0	8	->
water	11:19	0:0	8	audio_buf
op	11:29	0:0	8	=
water	11:31	0:0	8	NULL
water	11:35	0:0	8	;
water	12:15	0:0	8	is
op	12:17	0:0	8	->
water	12:19	0:0	8	audio_buf_size
op	12:34	0:0	8	=
water	12:36	0:0	8	SDL_AUDIO_MIN_BUFFER_SIZE
op	12:62	0:0	8	/
water	12:64	0:0	8	is
op	12:66	0:0	8	->
water	12:68	0:0	8	audio_tgt
op	12:77	0:0	8	.
water	12:78	0:0	8	frame_size
op	12:89	0:0	8	*
water	12:91	0:0	8	is
op	12:93	0:0	8	->
water	12:95	0:0	8	audio_tgt
op	12:104	0:0	8	.
water	12:105	0:0	8	frame_size
water	12:115	0:0	8	;
water	13:11	0:0	8	}
else	13:13	17:11	6
stmts	13:18	17:11	7	
water	13:18	0:0	8	{
if	14:15	15:82	8	(is -> show_mode != SHOW_MODE_VIDEO)
cond	14:19	14:36	9	is -> show_mode != SHOW_MODE_VIDEO
water	14:19	0:0	10	is
op	14:21	0:0	10	->
water	14:23	0:0	10	show_mode
op	14:33	0:0	10	!=
water	14:36	0:0	10	SHOW_MODE_VIDEO
stmts	15:19	15:82	9	
call	15:19	15:81	10	update_sample_display
arg	15:41	15:43	11	is
water	15:41	0:0	12	is
arg	15:45	15:69	11	(int16_t*)is->audio_buf
water	15:45	0:0	12	(
water	15:46	0:0	12	int16_t
op	15:54	0:0	12	*
water	15:55	0:0	12	)
water	15:56	0:0	12	is
op	15:58	0:0	12	->
water	15:60	0:0	12	audio_buf
arg	15:71	15:81	11	audio_size
water	15:71	0:0	12	audio_size
water	15:82	0:0	10	;
water	16:15	0:0	8	is
op	16:17	0:0	8	->
water	16:19	0:0	8	audio_buf_size
op	16:34	0:0	8	=
water	16:36	0:0	8	audio_size
water	16:46	0:0	8	;
water	17:11	0:0	8	}
water	18:11	0:0	6	is
op	18:13	0:0	6	->
water	18:15	0:0	6	audio_buf_index
op	18:31	0:0	6	=
water	18:33	0:0	6	0
water	18:34	0:0	6	;
water	19:8	0:0	6	}
water	20:8	0:0	4	len1
op	20:13	0:0	4	=
water	20:15	0:0	4	is
op	20:17	0:0	4	->
water	20:19	0:0	4	audio_buf_size
op	20:34	0:0	4	-
water	20:36	0:0	4	is
op	20:38	0:0	4	->
water	20:40	0:0	4	audio_buf_index
water	20:55	0:0	4	;
if	21:8	22:22	4	(len1 > len)
cond	21:12	21:19	5	len1 > len
water	21:12	0:0	6	len1
op	21:17	0:0	6	>
water	21:19	0:0	6	len
stmts	22:12	22:22	5	
water	22:12	0:0	6	len1
op	22:17	0:0	6	=
water	22:19	0:0	6	len
water	22:22	0:0	6	;
if	23:8	24:80	4	(! is -> muted && is -> audio_buf && is -> audio_volume == SDL_MIX_MAXVOLUME)
cond	23:12	23:63	5	! is -> muted && is -> audio_buf && is -> audio_volume == SDL_MIX_MAXVOLUME
op	23:12	0:0	6	!
water	23:13	0:0	6	is
op	23:15	0:0	6	->
water	23:17	0:0	6	muted
op	23:23	0:0	6	&&
water	23:26	0:0	6	is
op	23:28	0:0	6	->
water	23:30	0:0	6	audio_buf
op	23:40	0:0	6	&&
water	23:43	0:0	6	is
op	23:45	0:0	6	->
water	23:47	0:0	6	audio_volume
op	23:60	0:0	6	==
water	23:63	0:0	6	SDL_MIX_MAXVOLUME
stmts	24:12	24:80	5	
call	24:12	24:79	6	memcpy
arg	24:19	24:25	7	stream
water	24:19	0:0	8	stream
arg	24:27	24:73	7	(uint8_t*)is->audio_buf+is->audio_buf_index
water	24:27	0:0	8	(
water	24:28	0:0	8	uint8_t
op	24:36	0:0	8	*
water	24:37	0:0	8	)
water	24:38	0:0	8	is
op	24:40	0:0	8	->
water	24:42	0:0	8	audio_buf
op	24:52	0:0	8	+
water	24:54	0:0	8	is
op	24:56	0:0	8	->
water	24:58	0:0	8	audio_buf_index
arg	24:75	24:79	7	len1
water	24:75	0:0	8	len1
water	24:80	0:0	6	;
else	25:8	29:8	4
stmts	25:13	29:8	5	
water	25:13	0:0	6	{
call	26:12	26:34	6	memset
arg	26:19	26:25	7	stream
water	26:19	0:0	8	stream
arg	26:27	26:28	7	0
water	26:27	0:0	8	0
arg	26:30	26:34	7	len1
water	26:30	0:0	8	len1
water	26:35	0:0	6	;
if	27:12	28:108	6	(! is -> muted && is -> audio_buf)
cond	27:16	27:34	7	! is -> muted && is -> audio_buf
op	27:16	0:0	8	!
water	27:17	0:0	8	is
op	27:19	0:0	8	->
water	27:21	0:0	8	muted
op	27:27	0:0	8	&&
water	27:30	0:0	8	is
op	27:32	0:0	8	->
water	27:34	0:0	8	audio_buf
stmts	28:16	28:108	7	
call	28:16	28:107	8	SDL_MixAudio
arg	28:29	28:35	9	stream
water	28:29	0:0	10	stream
arg	28:37	28:83	9	(uint8_t*)is->audio_buf+is->audio_buf_index
water	28:37	0:0	10	(
water	28:38	0:0	10	uint8_t
op	28:46	0:0	10	*
water	28:47	0:0	10	)
water	28:48	0:0	10	is
op	28:50	0:0	10	->
water	28:52	0:0	10	audio_buf
op	28:62	0:0	10	+
water	28:64	0:0	10	is
op	28:66	0:0	10	->
water	28:68	0:0	10	audio_buf_index
arg	28:85	28:89	9	len1
water	28:85	0:0	10	len1
arg	28:91	28:107	9	is->audio_volume
water	28:91	0:0	10	is
op	28:93	0:0	10	->
water	28:95	0:0	10	audio_volume
water	28:108	0:0	8	;
water	29:8	0:0	6	}
water	30:8	0:0	4	len
op	30:12	0:0	4	-=
water	30:15	0:0	4	len1
water	30:19	0:0	4	;
water	31:8	0:0	4	stream
op	31:15	0:0	4	+=
water	31:18	0:0	4	len1
water	31:22	0:0	4	;
water	32:8	0:0	4	is
op	32:10	0:0	4	->
water	32:12	0:0	4	audio_buf_index
op	32:28	0:0	4	+=
water	32:31	0:0	4	len1
water	32:35	0:0	4	;
water	33:4	0:0	4	}
water	34:4	0:0	2	is
op	34:6	0:0	2	->
water	34:8	0:0	2	audio_write_buf_size
op	34:29	0:0	2	=
water	34:31	0:0	2	is
op	34:33	0:0	2	->
water	34:35	0:0	2	audio_buf_size
op	34:50	0:0	2	-
water	34:52	0:0	2	is
op	34:54	0:0	2	->
water	34:56	0:0	2	audio_buf_index
water	34:71	0:0	2	;
if	36:4	39:4	2	(!isnan (is -> audio_clock ))
cond	36:8	36:30	3	!isnan (is -> audio_clock )
op	36:8	0:0	4	!
call	36:9	36:30	4	isnan
arg	36:15	36:30	5	is->audio_clock
water	36:15	0:0	6	is
op	36:17	0:0	6	->
water	36:19	0:0	6	audio_clock
stmts	36:33	39:4	3	
water	36:33	0:0	4	{
call	37:8	37:201	4	set_clock_at
arg	37:21	37:32	5	&is->audclk
op	37:21	0:0	6	&
water	37:22	0:0	6	is
op	37:24	0:0	6	->
water	37:26	0:0	6	audclk
arg	37:34	37:144	5	is->audio_clock-(double)(2*is->audio_hw_buf_size+is->audio_write_buf_size)/is->audio_tgt.bytes_per_sec
water	37:34	0:0	6	is
op	37:36	0:0	6	->
water	37:38	0:0	6	audio_clock
op	37:50	0:0	6	-
call	37:52	37:113	6	(double)
arg	37:61	37:113	7	2*is->audio_hw_buf_size+is->audio_write_buf_size
water	37:61	0:0	8	2
op	37:63	0:0	8	*
water	37:65	0:0	8	is
op	37:67	0:0	8	->
water	37:69	0:0	8	audio_hw_buf_size
op	37:87	0:0	8	+
water	37:89	0:0	8	is
op	37:91	0:0	8	->
water	37:93	0:0	8	audio_write_buf_size
op	37:115	0:0	6	/
water	37:117	0:0	6	is
op	37:119	0:0	6	->
water	37:121	0:0	6	audio_tgt
op	37:130	0:0	6	.
water	37:131	0:0	6	bytes_per_sec
arg	37:146	37:168	5	is->audio_clock_serial
water	37:146	0:0	6	is
op	37:148	0:0	6	->
water	37:150	0:0	6	audio_clock_serial
arg	37:170	37:201	5	audio_callback_time/1000000.0
water	37:170	0:0	6	audio_callback_time
op	37:190	0:0	6	/
water	37:192	0:0	6	1000000
op	37:199	0:0	6	.
water	37:200	0:0	6	0
water	37:202	0:0	4	;
call	38:8	38:52	4	sync_clock_to_slave
arg	38:28	38:39	5	&is->extclk
op	38:28	0:0	6	&
water	38:29	0:0	6	is
op	38:31	0:0	6	->
water	38:33	0:0	6	extclk
arg	38:41	38:52	5	&is->audclk
op	38:41	0:0	6	&
water	38:42	0:0	6	is
op	38:44	0:0	6	->
water	38:46	0:0	6	audclk
water	38:53	0:0	4	;
water	39:4	0:0	4	}
