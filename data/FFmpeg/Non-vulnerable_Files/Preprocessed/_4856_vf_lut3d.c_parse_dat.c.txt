func	1:0	29:0	0	static int	parse_dat
params	1:20	0:0	1	
param	1:21	1:41	2	AVFilterContext *	ctx
param	1:43	1:50	2	FILE *	f
stmnts	0:0	28:12	1	
decl	3:4	3:35	2	LUT3DContext	*lut3d
op	3:24	0:0	2	=
water	3:26	0:0	2	ctx
op	3:29	0:0	2	->
water	3:31	0:0	2	priv
decl	4:4	4:28	2	char	line[MAX_LINE_SIZE]
decl	5:4	5:21	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:21	2	int	j
water	5:12	0:0	2	,
decl	5:4	5:21	2	int	k
water	5:15	0:0	2	,
decl	5:4	5:21	2	int	size
water	6:4	0:0	2	lut3d
op	6:9	0:0	2	->
water	6:11	0:0	2	lutsize
op	6:19	0:0	2	=
water	6:21	0:0	2	size
op	6:26	0:0	2	=
water	6:28	0:0	2	33
water	6:30	0:0	2	;
call	7:4	7:29	2	NEXT_LINE
arg	7:14	7:29	3	skip_line(line)
call	7:14	7:28	4	skip_line
arg	7:24	7:28	5	line
water	7:24	0:0	6	line
water	7:30	0:0	2	;
if	8:4	16:4	2	(!strncmp (line ,"3DLUTSIZE " ,10 ))
cond	8:8	8:39	3	!strncmp (line ,"3DLUTSIZE " ,10 )
op	8:8	0:0	4	!
call	8:9	8:39	4	strncmp
arg	8:17	8:21	5	line
water	8:17	0:0	6	line
arg	8:23	8:35	5	"3DLUTSIZE "
water	8:23	0:0	6	"3DLUTSIZE "
arg	8:37	8:39	5	10
water	8:37	0:0	6	10
stmts	8:42	16:4	3	
water	8:42	0:0	4	{
water	9:8	0:0	4	size
op	9:13	0:0	4	=
call	9:15	9:40	4	strtol
arg	9:22	9:31	5	line+10
water	9:22	0:0	6	line
op	9:27	0:0	6	+
water	9:29	0:0	6	10
arg	9:33	9:37	5	NULL
water	9:33	0:0	6	NULL
arg	9:39	9:40	5	0
water	9:39	0:0	6	0
water	9:41	0:0	4	;
if	10:8	13:8	4	(size < 2 || size > MAX_LEVEL)
cond	10:12	10:31	5	size < 2 || size > MAX_LEVEL
water	10:12	0:0	6	size
op	10:17	0:0	6	<
water	10:19	0:0	6	2
op	10:21	0:0	6	||
water	10:24	0:0	6	size
op	10:29	0:0	6	>
water	10:31	0:0	6	MAX_LEVEL
stmts	10:42	13:8	5	
water	10:42	0:0	6	{
call	11:12	11:74	6	av_log
arg	11:19	11:22	7	ctx
water	11:19	0:0	8	ctx
arg	11:24	11:36	7	AV_LOG_ERROR
water	11:24	0:0	8	AV_LOG_ERROR
arg	11:38	11:74	7	"Too large or invalid 3D LUT size\n"
water	11:38	0:0	8	"Too large or invalid 3D LUT size\n"
water	11:75	0:0	6	;
return	12:12	12:34	6	AVERROR(EINVAL)
call	12:19	12:33	7	AVERROR
arg	12:27	12:33	8	EINVAL
water	12:27	0:0	9	EINVAL
water	13:8	0:0	6	}
water	14:8	0:0	4	lut3d
op	14:13	0:0	4	->
water	14:15	0:0	4	lutsize
op	14:23	0:0	4	=
water	14:25	0:0	4	size
water	14:29	0:0	4	;
call	15:8	15:33	4	NEXT_LINE
arg	15:18	15:33	5	skip_line(line)
call	15:18	15:32	6	skip_line
arg	15:28	15:32	7	line
water	15:28	0:0	8	line
water	15:34	0:0	4	;
water	16:4	0:0	4	}
for	17:4	27:4	2	(k = 0 ;k < size;k ++)
forinit	17:9	17:14	3	k = 0 ;
water	17:9	0:0	4	k
op	17:11	0:0	4	=
water	17:13	0:0	4	0
water	17:14	0:0	4	;
cond	17:16	17:20	3	k < size
water	17:16	0:0	4	k
op	17:18	0:0	4	<
water	17:20	0:0	4	size
forexpr	17:26	17:27	3	k ++
water	17:26	0:0	4	k
op	17:27	0:0	4	++
stmts	17:31	27:4	3	
water	17:31	0:0	4	{
for	18:8	26:8	4	(j = 0 ;j < size;j ++)
forinit	18:13	18:18	5	j = 0 ;
water	18:13	0:0	6	j
op	18:15	0:0	6	=
water	18:17	0:0	6	0
water	18:18	0:0	6	;
cond	18:20	18:24	5	j < size
water	18:20	0:0	6	j
op	18:22	0:0	6	<
water	18:24	0:0	6	size
forexpr	18:30	18:31	5	j ++
water	18:30	0:0	6	j
op	18:31	0:0	6	++
stmts	18:35	26:8	5	
water	18:35	0:0	6	{
for	19:12	25:12	6	(i = 0 ;i < size;i ++)
forinit	19:17	19:22	7	i = 0 ;
water	19:17	0:0	8	i
op	19:19	0:0	8	=
water	19:21	0:0	8	0
water	19:22	0:0	8	;
cond	19:24	19:28	7	i < size
water	19:24	0:0	8	i
op	19:26	0:0	8	<
water	19:28	0:0	8	size
forexpr	19:34	19:35	7	i ++
water	19:34	0:0	8	i
op	19:35	0:0	8	++
stmts	19:39	25:12	7	
water	19:39	0:0	8	{
decl	20:16	20:57	8	struct rgbvec	*vec
op	20:35	0:0	8	=
op	20:37	0:0	8	&
water	20:38	0:0	8	lut3d
op	20:43	0:0	8	->
water	20:45	0:0	8	lut
op	20:48	0:0	8	[
water	20:49	0:0	8	k
op	20:50	0:0	8	]
op	20:51	0:0	8	[
water	20:52	0:0	8	j
op	20:53	0:0	8	]
op	20:54	0:0	8	[
water	20:55	0:0	8	i
op	20:56	0:0	8	]
if	21:16	22:46	8	(k != 0 || j != 0 || i != 0)
cond	21:20	21:45	9	k != 0 || j != 0 || i != 0
water	21:20	0:0	10	k
op	21:22	0:0	10	!=
water	21:25	0:0	10	0
op	21:27	0:0	10	||
water	21:30	0:0	10	j
op	21:32	0:0	10	!=
water	21:35	0:0	10	0
op	21:37	0:0	10	||
water	21:40	0:0	10	i
op	21:42	0:0	10	!=
water	21:45	0:0	10	0
stmts	22:20	22:46	9	
call	22:20	22:45	10	NEXT_LINE
arg	22:30	22:45	11	skip_line(line)
call	22:30	22:44	12	skip_line
arg	22:40	22:44	13	line
water	22:40	0:0	14	line
water	22:46	0:0	10	;
if	23:16	24:46	8	(sscanf (line ,"%f %f %f" ,& vec -> r ,& vec -> g ,& vec -> b ) != 3)
cond	23:20	23:75	9	sscanf (line ,"%f %f %f" ,& vec -> r ,& vec -> g ,& vec -> b ) != 3
call	23:20	23:70	10	sscanf
arg	23:27	23:31	11	line
water	23:27	0:0	12	line
arg	23:33	23:43	11	"%f %f %f"
water	23:33	0:0	12	"%f %f %f"
arg	23:45	23:52	11	&vec->r
op	23:45	0:0	12	&
water	23:46	0:0	12	vec
op	23:49	0:0	12	->
water	23:51	0:0	12	r
arg	23:54	23:61	11	&vec->g
op	23:54	0:0	12	&
water	23:55	0:0	12	vec
op	23:58	0:0	12	->
water	23:60	0:0	12	g
arg	23:63	23:70	11	&vec->b
op	23:63	0:0	12	&
water	23:64	0:0	12	vec
op	23:67	0:0	12	->
water	23:69	0:0	12	b
op	23:72	0:0	10	!=
water	23:75	0:0	10	3
stmts	24:20	24:46	9	
return	24:20	24:46	10	AVERROR_INVALIDDATA
water	24:27	0:0	11	AVERROR_INVALIDDATA
water	25:12	0:0	8	}
water	26:8	0:0	6	}
water	27:4	0:0	4	}
return	28:4	28:12	2	0
water	28:11	0:0	3	0
