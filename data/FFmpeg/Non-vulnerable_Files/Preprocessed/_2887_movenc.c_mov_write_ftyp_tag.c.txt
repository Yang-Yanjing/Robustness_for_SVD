func	1:0	65:0	0	static int	mov_write_ftyp_tag
params	1:29	0:0	1	
param	1:30	1:45	2	AVIOContext *	pb
param	1:47	1:65	2	AVFormatContext *	s
stmnts	0:0	64:31	1	
decl	3:4	3:37	2	MOVMuxContext	*mov
op	3:23	0:0	2	=
water	3:25	0:0	2	s
op	3:26	0:0	2	->
water	3:28	0:0	2	priv_data
decl	4:4	4:31	2	int64_t	pos
op	4:16	0:0	2	=
call	4:18	4:30	3	avio_tell
arg	4:28	4:30	4	pb
water	4:28	0:0	5	pb
decl	5:4	5:35	2	int	has_h264
op	5:17	0:0	2	=
water	5:19	0:0	2	0
water	5:20	0:0	2	,
decl	5:4	5:35	2	int	has_video
op	5:32	0:0	2	=
water	5:34	0:0	2	0
decl	6:4	6:21	2	int	minor
op	6:14	0:0	2	=
water	6:16	0:0	2	0
water	6:17	0:0	2	x200
decl	7:4	7:9	2	int	i
for	8:4	14:4	2	(i = 0 ;i < s -> nb_streams;i ++)
forinit	8:9	8:14	3	i = 0 ;
water	8:9	0:0	4	i
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:23	3	i < s -> nb_streams
water	8:16	0:0	4	i
op	8:18	0:0	4	<
water	8:20	0:0	4	s
op	8:21	0:0	4	->
water	8:23	0:0	4	nb_streams
forexpr	8:35	8:36	3	i ++
water	8:35	0:0	4	i
op	8:36	0:0	4	++
stmts	8:40	14:4	3	
water	8:40	0:0	4	{
decl	9:8	9:36	4	AVStream	*st
op	9:21	0:0	4	=
water	9:23	0:0	4	s
op	9:24	0:0	4	->
water	9:26	0:0	4	streams
op	9:33	0:0	4	[
water	9:34	0:0	4	i
op	9:35	0:0	4	]
if	10:8	11:25	4	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	10:12	10:37	5	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	10:12	0:0	6	st
op	10:14	0:0	6	->
water	10:16	0:0	6	codec
op	10:21	0:0	6	->
water	10:23	0:0	6	codec_type
op	10:34	0:0	6	==
water	10:37	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	11:12	11:25	5	
water	11:12	0:0	6	has_video
op	11:22	0:0	6	=
water	11:24	0:0	6	1
water	11:25	0:0	6	;
if	12:8	13:24	4	(st -> codec -> codec_id == AV_CODEC_ID_H264)
cond	12:12	12:35	5	st -> codec -> codec_id == AV_CODEC_ID_H264
water	12:12	0:0	6	st
op	12:14	0:0	6	->
water	12:16	0:0	6	codec
op	12:21	0:0	6	->
water	12:23	0:0	6	codec_id
op	12:32	0:0	6	==
water	12:35	0:0	6	AV_CODEC_ID_H264
stmts	13:12	13:24	5	
water	13:12	0:0	6	has_h264
op	13:21	0:0	6	=
water	13:23	0:0	6	1
water	13:24	0:0	6	;
water	14:4	0:0	4	}
call	15:4	15:19	2	avio_wb32
arg	15:14	15:16	3	pb
water	15:14	0:0	4	pb
arg	15:18	15:19	3	0
water	15:18	0:0	4	0
water	15:20	0:0	2	;
call	16:4	16:27	2	ffio_wfourcc
arg	16:17	16:19	3	pb
water	16:17	0:0	4	pb
arg	16:21	16:27	3	"ftyp"
water	16:21	0:0	4	"ftyp"
water	16:28	0:0	2	;
if	17:4	18:42	2	(mov -> major_brand &&strlen (mov -> major_brand ) >= 4)
cond	17:8	17:56	3	mov -> major_brand &&strlen (mov -> major_brand ) >= 4
water	17:8	0:0	4	mov
op	17:11	0:0	4	->
water	17:13	0:0	4	major_brand
op	17:25	0:0	4	&&
call	17:28	17:51	4	strlen
arg	17:35	17:51	5	mov->major_brand
water	17:35	0:0	6	mov
op	17:38	0:0	6	->
water	17:40	0:0	6	major_brand
op	17:53	0:0	4	>=
water	17:56	0:0	4	4
stmts	18:8	18:42	3	
call	18:8	18:41	4	ffio_wfourcc
arg	18:21	18:23	5	pb
water	18:21	0:0	6	pb
arg	18:25	18:41	5	mov->major_brand
water	18:25	0:0	6	mov
op	18:28	0:0	6	->
water	18:30	0:0	6	major_brand
water	18:42	0:0	4	;
else	19:4	22:4	2
stmts	19:9	22:4	3	
if	19:9	22:4	4	(mov -> mode == MODE_3GP)
cond	19:13	19:26	5	mov -> mode == MODE_3GP
water	19:13	0:0	6	mov
op	19:16	0:0	6	->
water	19:18	0:0	6	mode
op	19:23	0:0	6	==
water	19:26	0:0	6	MODE_3GP
stmts	19:36	22:4	5	
water	19:36	0:0	6	{
call	20:8	20:52	6	ffio_wfourcc
arg	20:21	20:23	7	pb
water	20:21	0:0	8	pb
arg	20:25	20:52	7	has_h264?"3gp6":"3gp4"
water	20:25	0:0	8	has_h264
water	20:34	0:0	8	?
water	20:36	0:0	8	"3gp6"
water	20:44	0:0	8	:
water	20:46	0:0	8	"3gp4"
water	20:53	0:0	6	;
water	21:8	0:0	6	minor
op	21:14	0:0	6	=
water	21:20	0:0	6	has_h264
water	21:29	0:0	6	?
water	21:33	0:0	6	0
water	21:34	0:0	6	x100
water	21:39	0:0	6	:
water	21:43	0:0	6	0
water	21:44	0:0	6	x200
water	21:48	0:0	6	;
water	22:4	0:0	6	}
else	22:6	25:4	2
stmts	22:11	25:4	3	
if	22:11	25:4	4	(mov -> mode & MODE_3G2)
cond	22:15	22:27	5	mov -> mode & MODE_3G2
water	22:15	0:0	6	mov
op	22:18	0:0	6	->
water	22:20	0:0	6	mode
op	22:25	0:0	6	&
water	22:27	0:0	6	MODE_3G2
stmts	22:37	25:4	5	
water	22:37	0:0	6	{
call	23:8	23:52	6	ffio_wfourcc
arg	23:21	23:23	7	pb
water	23:21	0:0	8	pb
arg	23:25	23:52	7	has_h264?"3g2b":"3g2a"
water	23:25	0:0	8	has_h264
water	23:34	0:0	8	?
water	23:36	0:0	8	"3g2b"
water	23:44	0:0	8	:
water	23:46	0:0	8	"3g2a"
water	23:53	0:0	6	;
water	24:8	0:0	6	minor
op	24:14	0:0	6	=
water	24:20	0:0	6	has_h264
water	24:29	0:0	6	?
water	24:31	0:0	6	0
water	24:32	0:0	6	x20000
water	24:39	0:0	6	:
water	24:41	0:0	6	0
water	24:42	0:0	6	x10000
water	24:48	0:0	6	;
water	25:4	0:0	6	}
else	25:6	26:32	2
stmts	25:11	26:32	3	
if	25:11	26:32	4	(mov -> mode == MODE_PSP)
cond	25:15	25:28	5	mov -> mode == MODE_PSP
water	25:15	0:0	6	mov
op	25:18	0:0	6	->
water	25:20	0:0	6	mode
op	25:25	0:0	6	==
water	25:28	0:0	6	MODE_PSP
stmts	26:8	26:32	5	
call	26:8	26:31	6	ffio_wfourcc
arg	26:21	26:23	7	pb
water	26:21	0:0	8	pb
arg	26:25	26:31	7	"MSNV"
water	26:25	0:0	8	"MSNV"
water	26:32	0:0	6	;
else	27:4	28:32	2
stmts	27:9	28:32	3	
if	27:9	28:32	4	(mov -> mode == MODE_MP4 && mov -> flags & FF_MOV_FLAG_DEFAULT_BASE_MOOF)
cond	27:13	27:51	5	mov -> mode == MODE_MP4 && mov -> flags & FF_MOV_FLAG_DEFAULT_BASE_MOOF
water	27:13	0:0	6	mov
op	27:16	0:0	6	->
water	27:18	0:0	6	mode
op	27:23	0:0	6	==
water	27:26	0:0	6	MODE_MP4
op	27:35	0:0	6	&&
water	27:38	0:0	6	mov
op	27:41	0:0	6	->
water	27:43	0:0	6	flags
op	27:49	0:0	6	&
water	27:51	0:0	6	FF_MOV_FLAG_DEFAULT_BASE_MOOF
stmts	28:8	28:32	5	
call	28:8	28:31	6	ffio_wfourcc
arg	28:21	28:23	7	pb
water	28:21	0:0	8	pb
arg	28:25	28:31	7	"iso5"
water	28:25	0:0	8	"iso5"
water	28:32	0:0	6	;
else	29:4	30:32	2
stmts	29:9	30:32	3	
if	29:9	30:32	4	(mov -> mode == MODE_MP4)
cond	29:13	29:26	5	mov -> mode == MODE_MP4
water	29:13	0:0	6	mov
op	29:16	0:0	6	->
water	29:18	0:0	6	mode
op	29:23	0:0	6	==
water	29:26	0:0	6	MODE_MP4
stmts	30:8	30:32	5	
call	30:8	30:31	6	ffio_wfourcc
arg	30:21	30:23	7	pb
water	30:21	0:0	8	pb
arg	30:25	30:31	7	"isom"
water	30:25	0:0	8	"isom"
water	30:32	0:0	6	;
else	31:4	32:51	2
stmts	31:9	32:51	3	
if	31:9	32:51	4	(mov -> mode == MODE_IPOD)
cond	31:13	31:26	5	mov -> mode == MODE_IPOD
water	31:13	0:0	6	mov
op	31:16	0:0	6	->
water	31:18	0:0	6	mode
op	31:23	0:0	6	==
water	31:26	0:0	6	MODE_IPOD
stmts	32:8	32:51	5	
call	32:8	32:50	6	ffio_wfourcc
arg	32:21	32:23	7	pb
water	32:21	0:0	8	pb
arg	32:25	32:50	7	has_video?"M4V ":"M4A "
water	32:25	0:0	8	has_video
water	32:35	0:0	8	?
water	32:37	0:0	8	"M4V "
water	32:43	0:0	8	:
water	32:44	0:0	8	"M4A "
water	32:51	0:0	6	;
else	33:4	34:32	2
stmts	33:9	34:32	3	
if	33:9	34:32	4	(mov -> mode == MODE_ISM)
cond	33:13	33:26	5	mov -> mode == MODE_ISM
water	33:13	0:0	6	mov
op	33:16	0:0	6	->
water	33:18	0:0	6	mode
op	33:23	0:0	6	==
water	33:26	0:0	6	MODE_ISM
stmts	34:8	34:32	5	
call	34:8	34:31	6	ffio_wfourcc
arg	34:21	34:23	7	pb
water	34:21	0:0	8	pb
arg	34:25	34:31	7	"isml"
water	34:25	0:0	8	"isml"
water	34:32	0:0	6	;
else	35:4	36:32	2
stmts	35:9	36:32	3	
if	35:9	36:32	4	(mov -> mode == MODE_F4V)
cond	35:13	35:26	5	mov -> mode == MODE_F4V
water	35:13	0:0	6	mov
op	35:16	0:0	6	->
water	35:18	0:0	6	mode
op	35:23	0:0	6	==
water	35:26	0:0	6	MODE_F4V
stmts	36:8	36:32	5	
call	36:8	36:31	6	ffio_wfourcc
arg	36:21	36:23	7	pb
water	36:21	0:0	8	pb
arg	36:25	36:31	7	"f4v "
water	36:25	0:0	8	"f4v "
water	36:32	0:0	6	;
else	37:4	38:32	2
stmts	38:8	38:32	3	
call	38:8	38:31	4	ffio_wfourcc
arg	38:21	38:23	5	pb
water	38:21	0:0	6	pb
arg	38:25	38:31	5	"qt  "
water	38:25	0:0	6	"qt  "
water	38:32	0:0	4	;
call	39:4	39:23	2	avio_wb32
arg	39:14	39:16	3	pb
water	39:14	0:0	4	pb
arg	39:18	39:23	3	minor
water	39:18	0:0	4	minor
water	39:24	0:0	2	;
if	40:4	41:32	2	(mov -> mode == MODE_MOV)
cond	40:8	40:21	3	mov -> mode == MODE_MOV
water	40:8	0:0	4	mov
op	40:11	0:0	4	->
water	40:13	0:0	4	mode
op	40:18	0:0	4	==
water	40:21	0:0	4	MODE_MOV
stmts	41:8	41:32	3	
call	41:8	41:31	4	ffio_wfourcc
arg	41:21	41:23	5	pb
water	41:21	0:0	6	pb
arg	41:25	41:31	5	"qt  "
water	41:25	0:0	6	"qt  "
water	41:32	0:0	4	;
else	42:4	44:4	2
stmts	42:9	44:4	3	
if	42:9	44:4	4	(mov -> mode == MODE_ISM)
cond	42:13	42:26	5	mov -> mode == MODE_ISM
water	42:13	0:0	6	mov
op	42:16	0:0	6	->
water	42:18	0:0	6	mode
op	42:23	0:0	6	==
water	42:26	0:0	6	MODE_ISM
stmts	42:36	44:4	5	
water	42:36	0:0	6	{
call	43:8	43:31	6	ffio_wfourcc
arg	43:21	43:23	7	pb
water	43:21	0:0	8	pb
arg	43:25	43:31	7	"piff"
water	43:25	0:0	8	"piff"
water	43:32	0:0	6	;
water	44:4	0:0	6	}
else	44:6	49:4	2
stmts	44:11	49:4	3	
if	44:11	49:4	4	(! ( mov -> flags & FF_MOV_FLAG_DEFAULT_BASE_MOOF ))
cond	44:15	44:59	5	! ( mov -> flags & FF_MOV_FLAG_DEFAULT_BASE_MOOF )
op	44:15	0:0	6	!
water	44:16	0:0	6	(
water	44:17	0:0	6	mov
op	44:20	0:0	6	->
water	44:22	0:0	6	flags
op	44:28	0:0	6	&
water	44:30	0:0	6	FF_MOV_FLAG_DEFAULT_BASE_MOOF
water	44:59	0:0	6	)
stmts	44:62	49:4	5	
water	44:62	0:0	6	{
call	45:8	45:31	6	ffio_wfourcc
arg	45:21	45:23	7	pb
water	45:21	0:0	8	pb
arg	45:25	45:31	7	"isom"
water	45:25	0:0	8	"isom"
water	45:32	0:0	6	;
call	46:8	46:31	6	ffio_wfourcc
arg	46:21	46:23	7	pb
water	46:21	0:0	8	pb
arg	46:25	46:31	7	"iso2"
water	46:25	0:0	8	"iso2"
water	46:32	0:0	6	;
if	47:8	48:36	6	(has_h264)
cond	47:12	47:12	7	has_h264
water	47:12	0:0	8	has_h264
stmts	48:12	48:36	7	
call	48:12	48:35	8	ffio_wfourcc
arg	48:25	48:27	9	pb
water	48:25	0:0	10	pb
arg	48:29	48:35	9	"avc1"
water	48:29	0:0	10	"avc1"
water	48:36	0:0	8	;
water	49:4	0:0	6	}
if	52:4	53:32	2	(mov -> flags & FF_MOV_FLAG_FRAGMENT && mov -> mode != MODE_ISM)
cond	52:8	52:58	3	mov -> flags & FF_MOV_FLAG_FRAGMENT && mov -> mode != MODE_ISM
water	52:8	0:0	4	mov
op	52:11	0:0	4	->
water	52:13	0:0	4	flags
op	52:19	0:0	4	&
water	52:21	0:0	4	FF_MOV_FLAG_FRAGMENT
op	52:42	0:0	4	&&
water	52:45	0:0	4	mov
op	52:48	0:0	4	->
water	52:50	0:0	4	mode
op	52:55	0:0	4	!=
water	52:58	0:0	4	MODE_ISM
stmts	53:8	53:32	3	
call	53:8	53:31	4	ffio_wfourcc
arg	53:21	53:23	5	pb
water	53:21	0:0	6	pb
arg	53:25	53:31	5	"iso6"
water	53:25	0:0	6	"iso6"
water	53:32	0:0	4	;
if	54:4	55:50	2	(mov -> mode == MODE_3GP)
cond	54:8	54:21	3	mov -> mode == MODE_3GP
water	54:8	0:0	4	mov
op	54:11	0:0	4	->
water	54:13	0:0	4	mode
op	54:18	0:0	4	==
water	54:21	0:0	4	MODE_3GP
stmts	55:8	55:50	3	
call	55:8	55:49	4	ffio_wfourcc
arg	55:21	55:23	5	pb
water	55:21	0:0	6	pb
arg	55:25	55:49	5	has_h264?"3gp6":"3gp4"
water	55:25	0:0	6	has_h264
water	55:34	0:0	6	?
water	55:36	0:0	6	"3gp6"
water	55:42	0:0	6	:
water	55:43	0:0	6	"3gp4"
water	55:50	0:0	4	;
else	56:4	57:50	2
stmts	56:9	57:50	3	
if	56:9	57:50	4	(mov -> mode & MODE_3G2)
cond	56:13	56:25	5	mov -> mode & MODE_3G2
water	56:13	0:0	6	mov
op	56:16	0:0	6	->
water	56:18	0:0	6	mode
op	56:23	0:0	6	&
water	56:25	0:0	6	MODE_3G2
stmts	57:8	57:50	5	
call	57:8	57:49	6	ffio_wfourcc
arg	57:21	57:23	7	pb
water	57:21	0:0	8	pb
arg	57:25	57:49	7	has_h264?"3g2b":"3g2a"
water	57:25	0:0	8	has_h264
water	57:34	0:0	8	?
water	57:36	0:0	8	"3g2b"
water	57:42	0:0	8	:
water	57:43	0:0	8	"3g2a"
water	57:50	0:0	6	;
else	58:4	59:32	2
stmts	58:9	59:32	3	
if	58:9	59:32	4	(mov -> mode == MODE_PSP)
cond	58:13	58:26	5	mov -> mode == MODE_PSP
water	58:13	0:0	6	mov
op	58:16	0:0	6	->
water	58:18	0:0	6	mode
op	58:23	0:0	6	==
water	58:26	0:0	6	MODE_PSP
stmts	59:8	59:32	5	
call	59:8	59:31	6	ffio_wfourcc
arg	59:21	59:23	7	pb
water	59:21	0:0	8	pb
arg	59:25	59:31	7	"MSNV"
water	59:25	0:0	8	"MSNV"
water	59:32	0:0	6	;
else	60:4	61:32	2
stmts	60:9	61:32	3	
if	60:9	61:32	4	(mov -> mode == MODE_MP4)
cond	60:13	60:26	5	mov -> mode == MODE_MP4
water	60:13	0:0	6	mov
op	60:16	0:0	6	->
water	60:18	0:0	6	mode
op	60:23	0:0	6	==
water	60:26	0:0	6	MODE_MP4
stmts	61:8	61:32	5	
call	61:8	61:31	6	ffio_wfourcc
arg	61:21	61:23	7	pb
water	61:21	0:0	8	pb
arg	61:25	61:31	7	"mp41"
water	61:25	0:0	8	"mp41"
water	61:32	0:0	6	;
if	62:4	63:32	2	(mov -> flags & FF_MOV_FLAG_DASH && mov -> flags & FF_MOV_FLAG_GLOBAL_SIDX)
cond	62:8	62:54	3	mov -> flags & FF_MOV_FLAG_DASH && mov -> flags & FF_MOV_FLAG_GLOBAL_SIDX
water	62:8	0:0	4	mov
op	62:11	0:0	4	->
water	62:13	0:0	4	flags
op	62:19	0:0	4	&
water	62:21	0:0	4	FF_MOV_FLAG_DASH
op	62:38	0:0	4	&&
water	62:41	0:0	4	mov
op	62:44	0:0	4	->
water	62:46	0:0	4	flags
op	62:52	0:0	4	&
water	62:54	0:0	4	FF_MOV_FLAG_GLOBAL_SIDX
stmts	63:8	63:32	3	
call	63:8	63:31	4	ffio_wfourcc
arg	63:21	63:23	5	pb
water	63:21	0:0	6	pb
arg	63:25	63:31	5	"dash"
water	63:25	0:0	6	"dash"
water	63:32	0:0	4	;
return	64:4	64:31	2	update_size(pb,pos)
call	64:11	64:30	3	update_size
arg	64:23	64:25	4	pb
water	64:23	0:0	5	pb
arg	64:27	64:30	4	pos
water	64:27	0:0	5	pos
