func	1:0	38:0	0	static int	mov_create_timecode_track
params	1:36	0:0	1	
param	1:37	1:55	2	AVFormatContext *	s
param	1:57	1:66	2	int	index
param	1:68	1:81	2	int	src_index
param	1:83	1:100	2	const char *	tcstr
stmnts	0:0	37:14	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:38	2	MOVMuxContext	*mov
op	4:24	0:0	2	=
water	4:26	0:0	2	s
op	4:27	0:0	2	->
water	4:29	0:0	2	priv_data
decl	5:4	5:45	2	MOVTrack	*track
op	5:24	0:0	2	=
op	5:26	0:0	2	&
water	5:27	0:0	2	mov
op	5:30	0:0	2	->
water	5:32	0:0	2	tracks
op	5:38	0:0	2	[
water	5:39	0:0	2	index
op	5:44	0:0	2	]
decl	6:4	6:47	2	AVStream	*src_st
op	6:24	0:0	2	=
water	6:26	0:0	2	s
op	6:27	0:0	2	->
water	6:29	0:0	2	streams
op	6:36	0:0	2	[
water	6:37	0:0	2	src_index
op	6:46	0:0	2	]
decl	7:4	7:17	2	AVTimecode	tc
decl	8:4	8:82	2	AVPacket	pkt
op	8:20	0:0	2	=
water	8:22	0:0	2	{
op	8:23	0:0	2	.
water	8:24	0:0	2	stream_index
op	8:37	0:0	2	=
water	8:39	0:0	2	index
water	8:44	0:0	2	,
op	8:46	0:0	2	.
water	8:47	0:0	2	flags
op	8:53	0:0	2	=
water	8:55	0:0	2	AV_PKT_FLAG_KEY
water	8:70	0:0	2	,
op	8:72	0:0	2	.
water	8:73	0:0	2	size
op	8:78	0:0	2	=
water	8:80	0:0	2	4
water	8:81	0:0	2	}
decl	9:4	9:41	2	AVRational	rate
op	9:20	0:0	2	=
call	9:22	9:40	3	find_fps
arg	9:31	9:32	4	s
water	9:31	0:0	5	s
arg	9:34	9:40	4	src_st
water	9:34	0:0	5	src_st
water	11:4	0:0	2	ret
op	11:8	0:0	2	=
call	11:10	11:58	2	av_timecode_init_from_string
arg	11:39	11:42	3	&tc
op	11:39	0:0	4	&
water	11:40	0:0	4	tc
arg	11:44	11:48	3	rate
water	11:44	0:0	4	rate
arg	11:50	11:55	3	tcstr
water	11:50	0:0	4	tcstr
arg	11:57	11:58	3	s
water	11:57	0:0	4	s
water	11:59	0:0	2	;
if	12:4	13:18	2	(ret < 0)
cond	12:8	12:14	3	ret < 0
water	12:8	0:0	4	ret
op	12:12	0:0	4	<
water	12:14	0:0	4	0
stmts	13:8	13:18	3	
return	13:8	13:18	4	ret
water	13:15	0:0	5	ret
water	15:4	0:0	2	track
op	15:9	0:0	2	->
water	15:11	0:0	2	mode
op	15:21	0:0	2	=
water	15:23	0:0	2	mov
op	15:26	0:0	2	->
water	15:28	0:0	2	mode
water	15:32	0:0	2	;
water	16:4	0:0	2	track
op	16:9	0:0	2	->
water	16:11	0:0	2	tag
op	16:21	0:0	2	=
call	16:23	16:44	2	MKTAG
arg	16:29	16:32	3	't'
water	16:29	0:0	4	't'
arg	16:33	16:36	3	'm'
water	16:33	0:0	4	'm'
arg	16:37	16:40	3	'c'
water	16:37	0:0	4	'c'
arg	16:41	16:44	3	'd'
water	16:41	0:0	4	'd'
water	16:45	0:0	2	;
water	17:4	0:0	2	track
op	17:9	0:0	2	->
water	17:11	0:0	2	src_track
op	17:21	0:0	2	=
water	17:23	0:0	2	src_index
water	17:32	0:0	2	;
water	18:4	0:0	2	track
op	18:9	0:0	2	->
water	18:11	0:0	2	timescale
op	18:21	0:0	2	=
water	18:23	0:0	2	mov
op	18:26	0:0	2	->
water	18:28	0:0	2	tracks
op	18:34	0:0	2	[
water	18:35	0:0	2	src_index
op	18:44	0:0	2	]
op	18:45	0:0	2	.
water	18:46	0:0	2	timescale
water	18:55	0:0	2	;
if	19:4	20:60	2	(tc . flags & AV_TIMECODE_FLAG_DROPFRAME)
cond	19:8	19:19	3	tc . flags & AV_TIMECODE_FLAG_DROPFRAME
water	19:8	0:0	4	tc
op	19:10	0:0	4	.
water	19:11	0:0	4	flags
op	19:17	0:0	4	&
water	19:19	0:0	4	AV_TIMECODE_FLAG_DROPFRAME
stmts	20:8	20:60	3	
water	20:8	0:0	4	track
op	20:13	0:0	4	->
water	20:15	0:0	4	timecode_flags
op	20:30	0:0	4	|=
water	20:33	0:0	4	MOV_TIMECODE_FLAG_DROPFRAME
water	20:60	0:0	4	;
water	22:4	0:0	2	track
op	22:9	0:0	2	->
water	22:11	0:0	2	st
op	22:14	0:0	2	=
water	22:16	0:0	2	src_st
water	22:22	0:0	2	;
water	24:4	0:0	2	track
op	24:9	0:0	2	->
water	24:11	0:0	2	enc
op	24:15	0:0	2	=
call	24:17	24:44	2	avcodec_alloc_context3
arg	24:40	24:44	3	NULL
water	24:40	0:0	4	NULL
water	24:45	0:0	2	;
if	25:4	26:30	2	(! track -> enc)
cond	25:8	25:16	3	! track -> enc
op	25:8	0:0	4	!
water	25:9	0:0	4	track
op	25:14	0:0	4	->
water	25:16	0:0	4	enc
stmts	26:8	26:30	3	
return	26:8	26:30	4	AVERROR(ENOMEM)
call	26:15	26:29	5	AVERROR
arg	26:23	26:29	6	ENOMEM
water	26:23	0:0	7	ENOMEM
water	27:4	0:0	2	track
op	27:9	0:0	2	->
water	27:11	0:0	2	enc
op	27:14	0:0	2	->
water	27:16	0:0	2	codec_type
op	27:27	0:0	2	=
water	27:29	0:0	2	AVMEDIA_TYPE_DATA
water	27:46	0:0	2	;
water	28:4	0:0	2	track
op	28:9	0:0	2	->
water	28:11	0:0	2	enc
op	28:14	0:0	2	->
water	28:16	0:0	2	codec_tag
op	28:27	0:0	2	=
water	28:29	0:0	2	track
op	28:34	0:0	2	->
water	28:36	0:0	2	tag
water	28:39	0:0	2	;
water	29:4	0:0	2	track
op	29:9	0:0	2	->
water	29:11	0:0	2	enc
op	29:14	0:0	2	->
water	29:16	0:0	2	time_base
op	29:27	0:0	2	=
call	29:29	29:42	2	av_inv_q
arg	29:38	29:42	3	rate
water	29:38	0:0	4	rate
water	29:43	0:0	2	;
water	31:4	0:0	2	pkt
op	31:7	0:0	2	.
water	31:8	0:0	2	data
op	31:13	0:0	2	=
call	31:15	31:33	2	av_malloc
arg	31:25	31:33	3	pkt.size
water	31:25	0:0	4	pkt
op	31:28	0:0	4	.
water	31:29	0:0	4	size
water	31:34	0:0	2	;
if	32:4	33:30	2	(! pkt . data)
cond	32:8	32:13	3	! pkt . data
op	32:8	0:0	4	!
water	32:9	0:0	4	pkt
op	32:12	0:0	4	.
water	32:13	0:0	4	data
stmts	33:8	33:30	3	
return	33:8	33:30	4	AVERROR(ENOMEM)
call	33:15	33:29	5	AVERROR
arg	33:23	33:29	6	ENOMEM
water	33:23	0:0	7	ENOMEM
call	34:4	34:30	2	AV_WB32
arg	34:12	34:20	3	pkt.data
water	34:12	0:0	4	pkt
op	34:15	0:0	4	.
water	34:16	0:0	4	data
arg	34:22	34:30	3	tc.start
water	34:22	0:0	4	tc
op	34:24	0:0	4	.
water	34:25	0:0	4	start
water	34:31	0:0	2	;
water	35:4	0:0	2	ret
op	35:8	0:0	2	=
call	35:10	35:37	2	ff_mov_write_packet
arg	35:30	35:31	3	s
water	35:30	0:0	4	s
arg	35:33	35:37	3	&pkt
op	35:33	0:0	4	&
water	35:34	0:0	4	pkt
water	35:38	0:0	2	;
call	36:4	36:20	2	av_free
arg	36:12	36:20	3	pkt.data
water	36:12	0:0	4	pkt
op	36:15	0:0	4	.
water	36:16	0:0	4	data
water	36:21	0:0	2	;
return	37:4	37:14	2	ret
water	37:11	0:0	3	ret
