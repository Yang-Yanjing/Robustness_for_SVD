func	1:0	109:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:57	2	AVFrame *	in
stmnts	0:0	108:59	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:35	2	DrawGraphContext	*s
op	4:24	0:0	2	=
water	4:26	0:0	2	ctx
op	4:29	0:0	2	->
water	4:31	0:0	2	priv
decl	5:4	5:43	2	AVFilterLink	*outlink
op	5:26	0:0	2	=
water	5:28	0:0	2	ctx
op	5:31	0:0	2	->
water	5:33	0:0	2	outputs
op	5:40	0:0	2	[
water	5:41	0:0	2	0
op	5:42	0:0	2	]
decl	6:4	6:26	2	AVDictionary	*metadata
decl	7:4	7:24	2	AVDictionaryEntry	*e
decl	8:4	8:25	2	AVFrame	*out
op	8:17	0:0	2	=
water	8:19	0:0	2	s
op	8:20	0:0	2	->
water	8:22	0:0	2	out
decl	9:4	9:9	2	int	i
if	10:4	20:4	2	(! s -> out || s -> out -> width != outlink -> w || s -> out -> height != outlink -> h)
cond	10:8	11:46	3	! s -> out || s -> out -> width != outlink -> w || s -> out -> height != outlink -> h
op	10:8	0:0	4	!
water	10:9	0:0	4	s
op	10:10	0:0	4	->
water	10:12	0:0	4	out
op	10:16	0:0	4	||
water	10:19	0:0	4	s
op	10:20	0:0	4	->
water	10:22	0:0	4	out
op	10:25	0:0	4	->
water	10:27	0:0	4	width
op	10:34	0:0	4	!=
water	10:37	0:0	4	outlink
op	10:44	0:0	4	->
water	10:46	0:0	4	w
op	10:48	0:0	4	||
water	11:19	0:0	4	s
op	11:20	0:0	4	->
water	11:22	0:0	4	out
op	11:25	0:0	4	->
water	11:27	0:0	4	height
op	11:34	0:0	4	!=
water	11:37	0:0	4	outlink
op	11:44	0:0	4	->
water	11:46	0:0	4	h
stmts	11:49	20:4	3	
water	11:49	0:0	4	{
call	12:8	12:29	4	av_frame_free
arg	12:22	12:29	5	&s->out
op	12:22	0:0	6	&
water	12:23	0:0	6	s
op	12:24	0:0	6	->
water	12:26	0:0	6	out
water	12:30	0:0	4	;
water	13:8	0:0	4	s
op	13:9	0:0	4	->
water	13:11	0:0	4	out
op	13:15	0:0	4	=
call	13:17	13:68	4	ff_get_video_buffer
arg	13:37	13:44	5	outlink
water	13:37	0:0	6	outlink
arg	13:46	13:56	5	outlink->w
water	13:46	0:0	6	outlink
op	13:53	0:0	6	->
water	13:55	0:0	6	w
arg	13:58	13:68	5	outlink->h
water	13:58	0:0	6	outlink
op	13:65	0:0	6	->
water	13:67	0:0	6	h
water	13:69	0:0	4	;
water	14:8	0:0	4	out
op	14:12	0:0	4	=
water	14:14	0:0	4	s
op	14:15	0:0	4	->
water	14:17	0:0	4	out
water	14:20	0:0	4	;
if	15:8	18:8	4	(! s -> out)
cond	15:12	15:16	5	! s -> out
op	15:12	0:0	6	!
water	15:13	0:0	6	s
op	15:14	0:0	6	->
water	15:16	0:0	6	out
stmts	15:21	18:8	5	
water	15:21	0:0	6	{
call	16:12	16:29	6	av_frame_free
arg	16:26	16:29	7	&in
op	16:26	0:0	8	&
water	16:27	0:0	8	in
water	16:30	0:0	6	;
return	17:12	17:34	6	AVERROR(ENOMEM)
call	17:19	17:33	7	AVERROR
arg	17:27	17:33	8	ENOMEM
water	17:27	0:0	9	ENOMEM
water	18:8	0:0	6	}
call	19:8	19:35	4	clear_image
arg	19:20	19:21	5	s
water	19:20	0:0	6	s
arg	19:23	19:26	5	out
water	19:23	0:0	6	out
arg	19:28	19:35	5	outlink
water	19:28	0:0	6	outlink
water	19:36	0:0	4	;
water	20:4	0:0	4	}
call	21:4	21:31	2	av_frame_copy_props
arg	21:24	21:27	3	out
water	21:24	0:0	4	out
arg	21:29	21:31	3	in
water	21:29	0:0	4	in
water	21:32	0:0	2	;
water	22:4	0:0	2	metadata
op	22:13	0:0	2	=
call	22:15	22:39	2	av_frame_get_metadata
arg	22:37	22:39	3	in
water	22:37	0:0	4	in
water	22:40	0:0	2	;
for	23:4	105:4	2	(i = 0 ;i < 4;i ++)
forinit	23:9	23:14	3	i = 0 ;
water	23:9	0:0	4	i
op	23:11	0:0	4	=
water	23:13	0:0	4	0
water	23:14	0:0	4	;
cond	23:16	23:20	3	i < 4
water	23:16	0:0	4	i
op	23:18	0:0	4	<
water	23:20	0:0	4	4
forexpr	23:23	23:24	3	i ++
water	23:23	0:0	4	i
op	23:24	0:0	4	++
stmts	23:28	105:4	3	
water	23:28	0:0	4	{
decl	24:8	24:34	4	double	values[VAR_VARS_NB]
decl	25:8	25:24	4	int	j
water	25:13	0:0	4	,
decl	25:8	25:24	4	int	y
water	25:16	0:0	4	,
decl	25:8	25:24	4	int	x
water	25:19	0:0	4	,
decl	25:8	25:24	4	int	old
decl	26:8	26:23	4	uint32_t	fg
water	26:19	0:0	4	,
decl	26:8	26:23	4	uint32_t	bg
decl	27:8	27:16	4	float	vf
water	28:8	0:0	4	e
op	28:10	0:0	4	=
call	28:12	28:52	4	av_dict_get
arg	28:24	28:32	5	metadata
water	28:24	0:0	6	metadata
arg	28:34	28:43	5	s->key[i]
water	28:34	0:0	6	s
op	28:35	0:0	6	->
water	28:37	0:0	6	key
op	28:40	0:0	6	[
water	28:41	0:0	6	i
op	28:42	0:0	6	]
arg	28:45	28:49	5	NULL
water	28:45	0:0	6	NULL
arg	28:51	28:52	5	0
water	28:51	0:0	6	0
water	28:53	0:0	4	;
if	29:8	30:20	4	(! e || ! e -> value)
cond	29:12	29:22	5	! e || ! e -> value
op	29:12	0:0	6	!
water	29:13	0:0	6	e
op	29:15	0:0	6	||
op	29:18	0:0	6	!
water	29:19	0:0	6	e
op	29:20	0:0	6	->
water	29:22	0:0	6	value
stmts	30:12	30:20	5	
continue	30:12	30:20	6	
if	31:8	32:20	4	(sscanf (e -> value ,"%f" ,& vf ) != 1)
cond	31:12	31:43	5	sscanf (e -> value ,"%f" ,& vf ) != 1
call	31:12	31:38	6	sscanf
arg	31:19	31:27	7	e->value
water	31:19	0:0	8	e
op	31:20	0:0	8	->
water	31:22	0:0	8	value
arg	31:29	31:33	7	"%f"
water	31:29	0:0	8	"%f"
arg	31:35	31:38	7	&vf
op	31:35	0:0	8	&
water	31:36	0:0	8	vf
op	31:40	0:0	6	!=
water	31:43	0:0	6	1
stmts	32:12	32:20	5	
continue	32:12	32:20	6	
water	33:8	0:0	4	vf
op	33:11	0:0	4	=
call	33:13	33:40	4	av_clipf
arg	33:22	33:24	5	vf
water	33:22	0:0	6	vf
arg	33:26	33:32	5	s->min
water	33:26	0:0	6	s
op	33:27	0:0	6	->
water	33:29	0:0	6	min
arg	33:34	33:40	5	s->max
water	33:34	0:0	6	s
op	33:35	0:0	6	->
water	33:37	0:0	6	max
water	33:41	0:0	4	;
water	34:8	0:0	4	values
op	34:14	0:0	4	[
water	34:15	0:0	4	VAR_MIN
op	34:22	0:0	4	]
op	34:24	0:0	4	=
water	34:26	0:0	4	s
op	34:27	0:0	4	->
water	34:29	0:0	4	min
water	34:32	0:0	4	;
water	35:8	0:0	4	values
op	35:14	0:0	4	[
water	35:15	0:0	4	VAR_MAX
op	35:22	0:0	4	]
op	35:24	0:0	4	=
water	35:26	0:0	4	s
op	35:27	0:0	4	->
water	35:29	0:0	4	max
water	35:32	0:0	4	;
water	36:8	0:0	4	values
op	36:14	0:0	4	[
water	36:15	0:0	4	VAR_VAL
op	36:22	0:0	4	]
op	36:24	0:0	4	=
water	36:26	0:0	4	vf
water	36:28	0:0	4	;
water	37:8	0:0	4	fg
op	37:11	0:0	4	=
call	37:13	37:53	4	av_expr_eval
arg	37:26	37:39	5	s->fg_expr[i]
water	37:26	0:0	6	s
op	37:27	0:0	6	->
water	37:29	0:0	6	fg_expr
op	37:36	0:0	6	[
water	37:37	0:0	6	i
op	37:38	0:0	6	]
arg	37:41	37:47	5	values
water	37:41	0:0	6	values
arg	37:49	37:53	5	NULL
water	37:49	0:0	6	NULL
water	37:54	0:0	4	;
water	38:8	0:0	4	bg
op	38:11	0:0	4	=
call	38:13	38:26	4	AV_RN32
arg	38:21	38:26	5	s->bg
water	38:21	0:0	6	s
op	38:22	0:0	6	->
water	38:24	0:0	6	bg
water	38:27	0:0	4	;
if	39:8	59:8	4	(i == 0 && ( s -> x >= outlink -> w || s -> slide == 3 ))
cond	39:12	39:58	5	i == 0 && ( s -> x >= outlink -> w || s -> slide == 3 )
water	39:12	0:0	6	i
op	39:14	0:0	6	==
water	39:17	0:0	6	0
op	39:19	0:0	6	&&
water	39:22	0:0	6	(
water	39:23	0:0	6	s
op	39:24	0:0	6	->
water	39:26	0:0	6	x
op	39:28	0:0	6	>=
water	39:31	0:0	6	outlink
op	39:38	0:0	6	->
water	39:40	0:0	6	w
op	39:42	0:0	6	||
water	39:45	0:0	6	s
op	39:46	0:0	6	->
water	39:48	0:0	6	slide
op	39:54	0:0	6	==
water	39:57	0:0	6	3
water	39:58	0:0	6	)
stmts	39:61	59:8	5	
water	39:61	0:0	6	{
if	40:12	41:24	6	(s -> slide == 0 || s -> slide == 1)
cond	40:16	40:45	7	s -> slide == 0 || s -> slide == 1
water	40:16	0:0	8	s
op	40:17	0:0	8	->
water	40:19	0:0	8	slide
op	40:25	0:0	8	==
water	40:28	0:0	8	0
op	40:30	0:0	8	||
water	40:33	0:0	8	s
op	40:34	0:0	8	->
water	40:36	0:0	8	slide
op	40:42	0:0	8	==
water	40:45	0:0	8	1
stmts	41:16	41:24	7	
water	41:16	0:0	8	s
op	41:17	0:0	8	->
water	41:19	0:0	8	x
op	41:21	0:0	8	=
water	41:23	0:0	8	0
water	41:24	0:0	8	;
if	42:12	49:12	6	(s -> slide == 2)
cond	42:16	42:28	7	s -> slide == 2
water	42:16	0:0	8	s
op	42:17	0:0	8	->
water	42:19	0:0	8	slide
op	42:25	0:0	8	==
water	42:28	0:0	8	2
stmts	42:31	49:12	7	
water	42:31	0:0	8	{
water	43:16	0:0	8	s
op	43:17	0:0	8	->
water	43:19	0:0	8	x
op	43:21	0:0	8	=
water	43:23	0:0	8	outlink
op	43:30	0:0	8	->
water	43:32	0:0	8	w
op	43:34	0:0	8	-
water	43:36	0:0	8	1
water	43:37	0:0	8	;
for	44:16	48:16	8	(j = 0 ;j < outlink -> h;j ++)
forinit	44:21	44:26	9	j = 0 ;
water	44:21	0:0	10	j
op	44:23	0:0	10	=
water	44:25	0:0	10	0
water	44:26	0:0	10	;
cond	44:28	44:41	9	j < outlink -> h
water	44:28	0:0	10	j
op	44:30	0:0	10	<
water	44:32	0:0	10	outlink
op	44:39	0:0	10	->
water	44:41	0:0	10	h
forexpr	44:44	44:45	9	j ++
water	44:44	0:0	10	j
op	44:45	0:0	10	++
stmts	44:49	48:16	9	
water	44:49	0:0	10	{
call	45:20	47:48	10	memmove
arg	45:28	45:64	11	out->data[0]+j*out->linesize[0]
water	45:28	0:0	12	out
op	45:31	0:0	12	->
water	45:33	0:0	12	data
op	45:37	0:0	12	[
water	45:38	0:0	12	0
op	45:39	0:0	12	]
op	45:41	0:0	12	+
water	45:43	0:0	12	j
op	45:45	0:0	12	*
water	45:47	0:0	12	out
op	45:50	0:0	12	->
water	45:52	0:0	12	linesize
op	45:60	0:0	12	[
water	45:61	0:0	12	0
op	45:62	0:0	12	]
arg	46:28	46:67	11	out->data[0]+j*out->linesize[0]+4
water	46:28	0:0	12	out
op	46:31	0:0	12	->
water	46:33	0:0	12	data
op	46:37	0:0	12	[
water	46:38	0:0	12	0
op	46:39	0:0	12	]
op	46:41	0:0	12	+
water	46:43	0:0	12	j
op	46:45	0:0	12	*
water	46:47	0:0	12	out
op	46:50	0:0	12	->
water	46:52	0:0	12	linesize
op	46:60	0:0	12	[
water	46:61	0:0	12	0
op	46:62	0:0	12	]
op	46:64	0:0	12	+
water	46:66	0:0	12	4
arg	47:28	47:48	11	(outlink->w-1)*4
water	47:28	0:0	12	(
water	47:29	0:0	12	outlink
op	47:36	0:0	12	->
water	47:38	0:0	12	w
op	47:40	0:0	12	-
water	47:42	0:0	12	1
water	47:43	0:0	12	)
op	47:45	0:0	12	*
water	47:47	0:0	12	4
water	47:49	0:0	10	;
water	48:16	0:0	10	}
water	49:12	0:0	8	}
else	49:14	56:12	6
stmts	49:19	56:12	7	
if	49:19	56:12	8	(s -> slide == 3)
cond	49:23	49:35	9	s -> slide == 3
water	49:23	0:0	10	s
op	49:24	0:0	10	->
water	49:26	0:0	10	slide
op	49:32	0:0	10	==
water	49:35	0:0	10	3
stmts	49:38	56:12	9	
water	49:38	0:0	10	{
water	50:16	0:0	10	s
op	50:17	0:0	10	->
water	50:19	0:0	10	x
op	50:21	0:0	10	=
water	50:23	0:0	10	0
water	50:24	0:0	10	;
for	51:16	55:16	10	(j = 0 ;j < outlink -> h;j ++)
forinit	51:21	51:26	11	j = 0 ;
water	51:21	0:0	12	j
op	51:23	0:0	12	=
water	51:25	0:0	12	0
water	51:26	0:0	12	;
cond	51:28	51:41	11	j < outlink -> h
water	51:28	0:0	12	j
op	51:30	0:0	12	<
water	51:32	0:0	12	outlink
op	51:39	0:0	12	->
water	51:41	0:0	12	h
forexpr	51:44	51:45	11	j ++
water	51:44	0:0	12	j
op	51:45	0:0	12	++
stmts	51:49	55:16	11	
water	51:49	0:0	12	{
call	52:20	54:48	12	memmove
arg	52:28	52:67	13	out->data[0]+j*out->linesize[0]+4
water	52:28	0:0	14	out
op	52:31	0:0	14	->
water	52:33	0:0	14	data
op	52:37	0:0	14	[
water	52:38	0:0	14	0
op	52:39	0:0	14	]
op	52:41	0:0	14	+
water	52:43	0:0	14	j
op	52:45	0:0	14	*
water	52:47	0:0	14	out
op	52:50	0:0	14	->
water	52:52	0:0	14	linesize
op	52:60	0:0	14	[
water	52:61	0:0	14	0
op	52:62	0:0	14	]
op	52:64	0:0	14	+
water	52:66	0:0	14	4
arg	53:28	53:63	13	out->data[0]+j*out->linesize[0]
water	53:28	0:0	14	out
op	53:31	0:0	14	->
water	53:33	0:0	14	data
op	53:37	0:0	14	[
water	53:38	0:0	14	0
op	53:39	0:0	14	]
op	53:41	0:0	14	+
water	53:43	0:0	14	j
op	53:45	0:0	14	*
water	53:47	0:0	14	out
op	53:50	0:0	14	->
water	53:52	0:0	14	linesize
op	53:60	0:0	14	[
water	53:61	0:0	14	0
op	53:62	0:0	14	]
arg	54:28	54:48	13	(outlink->w-1)*4
water	54:28	0:0	14	(
water	54:29	0:0	14	outlink
op	54:36	0:0	14	->
water	54:38	0:0	14	w
op	54:40	0:0	14	-
water	54:42	0:0	14	1
water	54:43	0:0	14	)
op	54:45	0:0	14	*
water	54:47	0:0	14	4
water	54:49	0:0	12	;
water	55:16	0:0	12	}
water	56:12	0:0	10	}
else	56:14	58:12	6
stmts	56:19	58:12	7	
if	56:19	58:12	8	(s -> slide == 0)
cond	56:23	56:35	9	s -> slide == 0
water	56:23	0:0	10	s
op	56:24	0:0	10	->
water	56:26	0:0	10	slide
op	56:32	0:0	10	==
water	56:35	0:0	10	0
stmts	56:38	58:12	9	
water	56:38	0:0	10	{
call	57:16	57:43	10	clear_image
arg	57:28	57:29	11	s
water	57:28	0:0	12	s
arg	57:31	57:34	11	out
water	57:31	0:0	12	out
arg	57:36	57:43	11	outlink
water	57:36	0:0	12	outlink
water	57:44	0:0	10	;
water	58:12	0:0	10	}
water	59:8	0:0	6	}
water	60:8	0:0	4	x
op	60:10	0:0	4	=
water	60:12	0:0	4	s
op	60:13	0:0	4	->
water	60:15	0:0	4	x
water	60:16	0:0	4	;
water	61:8	0:0	4	y
op	61:10	0:0	4	=
water	61:12	0:0	4	(
water	61:13	0:0	4	outlink
op	61:20	0:0	4	->
water	61:22	0:0	4	h
op	61:24	0:0	4	-
water	61:26	0:0	4	1
water	61:27	0:0	4	)
op	61:29	0:0	4	*
water	61:31	0:0	4	(
water	61:32	0:0	4	1
op	61:34	0:0	4	-
water	61:36	0:0	4	(
water	61:37	0:0	4	(
water	61:38	0:0	4	vf
op	61:41	0:0	4	-
water	61:43	0:0	4	s
op	61:44	0:0	4	->
water	61:46	0:0	4	min
water	61:49	0:0	4	)
op	61:51	0:0	4	/
water	61:53	0:0	4	(
water	61:54	0:0	4	s
op	61:55	0:0	4	->
water	61:57	0:0	4	max
op	61:61	0:0	4	-
water	61:63	0:0	4	s
op	61:64	0:0	4	->
water	61:66	0:0	4	min
water	61:69	0:0	4	)
water	61:70	0:0	4	)
water	61:71	0:0	4	)
water	61:72	0:0	4	;
switch	62:8	104:8	4	(s -> mode)
cond	62:16	62:19	5	s -> mode
water	62:16	0:0	6	s
op	62:17	0:0	6	->
water	62:19	0:0	6	mode
stmts	62:25	104:8	5	
water	62:25	0:0	6	{
label	63:8	63:14	6	case 0 :
if	64:12	66:43	6	(i == 0 && ( s -> slide > 0 ))
cond	64:16	64:39	7	i == 0 && ( s -> slide > 0 )
water	64:16	0:0	8	i
op	64:18	0:0	8	==
water	64:21	0:0	8	0
op	64:23	0:0	8	&&
water	64:26	0:0	8	(
water	64:27	0:0	8	s
op	64:28	0:0	8	->
water	64:30	0:0	8	slide
op	64:36	0:0	8	>
water	64:38	0:0	8	0
water	64:39	0:0	8	)
stmts	65:16	66:43	7	
for	65:16	66:43	8	(j = 0 ;j < outlink -> h;j ++)
forinit	65:21	65:26	9	j = 0 ;
water	65:21	0:0	10	j
op	65:23	0:0	10	=
water	65:25	0:0	10	0
water	65:26	0:0	10	;
cond	65:28	65:41	9	j < outlink -> h
water	65:28	0:0	10	j
op	65:30	0:0	10	<
water	65:32	0:0	10	outlink
op	65:39	0:0	10	->
water	65:41	0:0	10	h
forexpr	65:44	65:45	9	j ++
water	65:44	0:0	10	j
op	65:45	0:0	10	++
stmts	66:20	66:43	9	
call	66:20	66:42	10	draw_dot
arg	66:29	66:31	11	bg
water	66:29	0:0	12	bg
arg	66:33	66:34	11	x
water	66:33	0:0	12	x
arg	66:36	66:37	11	j
water	66:36	0:0	12	j
arg	66:39	66:42	11	out
water	66:39	0:0	12	out
water	66:43	0:0	10	;
water	67:12	0:0	6	old
op	67:16	0:0	6	=
call	67:18	67:69	6	AV_RN32
arg	67:26	67:69	7	out->data[0]+y*out->linesize[0]+x*4
water	67:26	0:0	8	out
op	67:29	0:0	8	->
water	67:31	0:0	8	data
op	67:35	0:0	8	[
water	67:36	0:0	8	0
op	67:37	0:0	8	]
op	67:39	0:0	8	+
water	67:41	0:0	8	y
op	67:43	0:0	8	*
water	67:45	0:0	8	out
op	67:48	0:0	8	->
water	67:50	0:0	8	linesize
op	67:58	0:0	8	[
water	67:59	0:0	8	0
op	67:60	0:0	8	]
op	67:62	0:0	8	+
water	67:64	0:0	8	x
op	67:66	0:0	8	*
water	67:68	0:0	8	4
water	67:70	0:0	6	;
for	68:12	76:12	6	(j = y ;j < outlink -> h;j ++)
forinit	68:17	68:22	7	j = y ;
water	68:17	0:0	8	j
op	68:19	0:0	8	=
water	68:21	0:0	8	y
water	68:22	0:0	8	;
cond	68:24	68:37	7	j < outlink -> h
water	68:24	0:0	8	j
op	68:26	0:0	8	<
water	68:28	0:0	8	outlink
op	68:35	0:0	8	->
water	68:37	0:0	8	h
forexpr	68:40	68:41	7	j ++
water	68:40	0:0	8	j
op	68:41	0:0	8	++
stmts	68:45	76:12	7	
water	68:45	0:0	8	{
if	69:16	74:16	8	(old != bg && (AV_RN32 (out -> data [ 0 ] + j * out -> linesize [ 0 ] + x * 4 ) != old ) ||AV_RN32 (out -> data [ 0 ] +FFMIN (j + 1 ,outlink -> h - 1 ) * out -> linesize [ 0 ] + x * 4 ) != old)
cond	69:20	71:101	9	old != bg && (AV_RN32 (out -> data [ 0 ] + j * out -> linesize [ 0 ] + x * 4 ) != old ) ||AV_RN32 (out -> data [ 0 ] +FFMIN (j + 1 ,outlink -> h - 1 ) * out -> linesize [ 0 ] + x * 4 ) != old
water	69:20	0:0	10	old
op	69:24	0:0	10	!=
water	69:27	0:0	10	bg
op	69:30	0:0	10	&&
water	70:20	0:0	10	(
call	70:21	70:72	10	AV_RN32
arg	70:29	70:72	11	out->data[0]+j*out->linesize[0]+x*4
water	70:29	0:0	12	out
op	70:32	0:0	12	->
water	70:34	0:0	12	data
op	70:38	0:0	12	[
water	70:39	0:0	12	0
op	70:40	0:0	12	]
op	70:42	0:0	12	+
water	70:44	0:0	12	j
op	70:46	0:0	12	*
water	70:48	0:0	12	out
op	70:51	0:0	12	->
water	70:53	0:0	12	linesize
op	70:61	0:0	12	[
water	70:62	0:0	12	0
op	70:63	0:0	12	]
op	70:65	0:0	12	+
water	70:67	0:0	12	x
op	70:69	0:0	12	*
water	70:71	0:0	12	4
op	70:74	0:0	10	!=
water	70:77	0:0	10	old
water	70:80	0:0	10	)
op	70:82	0:0	10	||
call	71:20	71:96	10	AV_RN32
arg	71:28	71:96	11	out->data[0]+FFMIN(j+1,outlink->h-1)*out->linesize[0]+x*4
water	71:28	0:0	12	out
op	71:31	0:0	12	->
water	71:33	0:0	12	data
op	71:37	0:0	12	[
water	71:38	0:0	12	0
op	71:39	0:0	12	]
op	71:41	0:0	12	+
call	71:43	71:68	12	FFMIN
arg	71:49	71:52	13	j+1
water	71:49	0:0	14	j
op	71:50	0:0	14	+
water	71:51	0:0	14	1
arg	71:54	71:68	13	outlink->h-1
water	71:54	0:0	14	outlink
op	71:61	0:0	14	->
water	71:63	0:0	14	h
op	71:65	0:0	14	-
water	71:67	0:0	14	1
op	71:70	0:0	12	*
water	71:72	0:0	12	out
op	71:75	0:0	12	->
water	71:77	0:0	12	linesize
op	71:85	0:0	12	[
water	71:86	0:0	12	0
op	71:87	0:0	12	]
op	71:89	0:0	12	+
water	71:91	0:0	12	x
op	71:93	0:0	12	*
water	71:95	0:0	12	4
op	71:98	0:0	10	!=
water	71:101	0:0	10	old
stmts	71:106	74:16	9	
water	71:106	0:0	10	{
call	72:20	72:42	10	draw_dot
arg	72:29	72:31	11	fg
water	72:29	0:0	12	fg
arg	72:33	72:34	11	x
water	72:33	0:0	12	x
arg	72:36	72:37	11	j
water	72:36	0:0	12	j
arg	72:39	72:42	11	out
water	72:39	0:0	12	out
water	72:43	0:0	10	;
break	73:20	73:25	10	
water	74:16	0:0	10	}
call	75:16	75:38	8	draw_dot
arg	75:25	75:27	9	fg
water	75:25	0:0	10	fg
arg	75:29	75:30	9	x
water	75:29	0:0	10	x
arg	75:32	75:33	9	j
water	75:32	0:0	10	j
arg	75:35	75:38	9	out
water	75:35	0:0	10	out
water	75:39	0:0	8	;
water	76:12	0:0	8	}
break	77:12	77:17	6	
label	78:8	78:14	6	case 1 :
if	79:12	81:43	6	(i == 0 && ( s -> slide > 0 ))
cond	79:16	79:39	7	i == 0 && ( s -> slide > 0 )
water	79:16	0:0	8	i
op	79:18	0:0	8	==
water	79:21	0:0	8	0
op	79:23	0:0	8	&&
water	79:26	0:0	8	(
water	79:27	0:0	8	s
op	79:28	0:0	8	->
water	79:30	0:0	8	slide
op	79:36	0:0	8	>
water	79:38	0:0	8	0
water	79:39	0:0	8	)
stmts	80:16	81:43	7	
for	80:16	81:43	8	(j = 0 ;j < outlink -> h;j ++)
forinit	80:21	80:26	9	j = 0 ;
water	80:21	0:0	10	j
op	80:23	0:0	10	=
water	80:25	0:0	10	0
water	80:26	0:0	10	;
cond	80:28	80:41	9	j < outlink -> h
water	80:28	0:0	10	j
op	80:30	0:0	10	<
water	80:32	0:0	10	outlink
op	80:39	0:0	10	->
water	80:41	0:0	10	h
forexpr	80:44	80:45	9	j ++
water	80:44	0:0	10	j
op	80:45	0:0	10	++
stmts	81:20	81:43	9	
call	81:20	81:42	10	draw_dot
arg	81:29	81:31	11	bg
water	81:29	0:0	12	bg
arg	81:33	81:34	11	x
water	81:33	0:0	12	x
arg	81:36	81:37	11	j
water	81:36	0:0	12	j
arg	81:39	81:42	11	out
water	81:39	0:0	12	out
water	81:43	0:0	10	;
call	82:12	82:34	6	draw_dot
arg	82:21	82:23	7	fg
water	82:21	0:0	8	fg
arg	82:25	82:26	7	x
water	82:25	0:0	8	x
arg	82:28	82:29	7	y
water	82:28	0:0	8	y
arg	82:31	82:34	7	out
water	82:31	0:0	8	out
water	82:35	0:0	6	;
break	83:12	83:17	6	
label	84:8	84:14	6	case 2 :
if	85:12	88:12	6	(s -> first)
cond	85:16	85:19	7	s -> first
water	85:16	0:0	8	s
op	85:17	0:0	8	->
water	85:19	0:0	8	first
stmts	85:26	88:12	7	
water	85:26	0:0	8	{
water	86:16	0:0	8	s
op	86:17	0:0	8	->
water	86:19	0:0	8	first
op	86:25	0:0	8	=
water	86:27	0:0	8	0
water	86:28	0:0	8	;
water	87:16	0:0	8	s
op	87:17	0:0	8	->
water	87:19	0:0	8	prev_y
op	87:25	0:0	8	[
water	87:26	0:0	8	i
op	87:27	0:0	8	]
op	87:29	0:0	8	=
water	87:31	0:0	8	y
water	87:32	0:0	8	;
water	88:12	0:0	8	}
if	89:12	94:12	6	(i == 0 && ( s -> slide > 0 ))
cond	89:16	89:39	7	i == 0 && ( s -> slide > 0 )
water	89:16	0:0	8	i
op	89:18	0:0	8	==
water	89:21	0:0	8	0
op	89:23	0:0	8	&&
water	89:26	0:0	8	(
water	89:27	0:0	8	s
op	89:28	0:0	8	->
water	89:30	0:0	8	slide
op	89:36	0:0	8	>
water	89:38	0:0	8	0
water	89:39	0:0	8	)
stmts	89:42	94:12	7	
water	89:42	0:0	8	{
for	90:16	91:43	8	(j = 0 ;j < y;j ++)
forinit	90:21	90:26	9	j = 0 ;
water	90:21	0:0	10	j
op	90:23	0:0	10	=
water	90:25	0:0	10	0
water	90:26	0:0	10	;
cond	90:28	90:32	9	j < y
water	90:28	0:0	10	j
op	90:30	0:0	10	<
water	90:32	0:0	10	y
forexpr	90:35	90:36	9	j ++
water	90:35	0:0	10	j
op	90:36	0:0	10	++
stmts	91:20	91:43	9	
call	91:20	91:42	10	draw_dot
arg	91:29	91:31	11	bg
water	91:29	0:0	12	bg
arg	91:33	91:34	11	x
water	91:33	0:0	12	x
arg	91:36	91:37	11	j
water	91:36	0:0	12	j
arg	91:39	91:42	11	out
water	91:39	0:0	12	out
water	91:43	0:0	10	;
for	92:16	93:43	8	(j = outlink -> h - 1 ;j > y;j --)
forinit	92:21	92:39	9	j = outlink -> h - 1 ;
water	92:21	0:0	10	j
op	92:23	0:0	10	=
water	92:25	0:0	10	outlink
op	92:32	0:0	10	->
water	92:34	0:0	10	h
op	92:36	0:0	10	-
water	92:38	0:0	10	1
water	92:39	0:0	10	;
cond	92:41	92:45	9	j > y
water	92:41	0:0	10	j
op	92:43	0:0	10	>
water	92:45	0:0	10	y
forexpr	92:48	92:49	9	j --
water	92:48	0:0	10	j
op	92:49	0:0	10	--
stmts	93:20	93:43	9	
call	93:20	93:42	10	draw_dot
arg	93:29	93:31	11	bg
water	93:29	0:0	12	bg
arg	93:33	93:34	11	x
water	93:33	0:0	12	x
arg	93:36	93:37	11	j
water	93:36	0:0	12	j
arg	93:39	93:42	11	out
water	93:39	0:0	12	out
water	93:43	0:0	10	;
water	94:12	0:0	8	}
if	95:12	98:12	6	(y <= s -> prev_y [ i ])
cond	95:16	95:32	7	y <= s -> prev_y [ i ]
water	95:16	0:0	8	y
op	95:18	0:0	8	<=
water	95:21	0:0	8	s
op	95:22	0:0	8	->
water	95:24	0:0	8	prev_y
op	95:30	0:0	8	[
water	95:31	0:0	8	i
op	95:32	0:0	8	]
stmts	95:35	98:12	7	
water	95:35	0:0	8	{
for	96:16	97:43	8	(j = y ;j <= s -> prev_y [ i ];j ++)
forinit	96:21	96:26	9	j = y ;
water	96:21	0:0	10	j
op	96:23	0:0	10	=
water	96:25	0:0	10	y
water	96:26	0:0	10	;
cond	96:28	96:44	9	j <= s -> prev_y [ i ]
water	96:28	0:0	10	j
op	96:30	0:0	10	<=
water	96:33	0:0	10	s
op	96:34	0:0	10	->
water	96:36	0:0	10	prev_y
op	96:42	0:0	10	[
water	96:43	0:0	10	i
op	96:44	0:0	10	]
forexpr	96:47	96:48	9	j ++
water	96:47	0:0	10	j
op	96:48	0:0	10	++
stmts	97:20	97:43	9	
call	97:20	97:42	10	draw_dot
arg	97:29	97:31	11	fg
water	97:29	0:0	12	fg
arg	97:33	97:34	11	x
water	97:33	0:0	12	x
arg	97:36	97:37	11	j
water	97:36	0:0	12	j
arg	97:39	97:42	11	out
water	97:39	0:0	12	out
water	97:43	0:0	10	;
water	98:12	0:0	8	}
else	98:14	101:12	6
stmts	98:19	101:12	7	
water	98:19	0:0	8	{
for	99:16	100:43	8	(j = s -> prev_y [ i ] ;j <= y;j ++)
forinit	99:21	99:37	9	j = s -> prev_y [ i ] ;
water	99:21	0:0	10	j
op	99:23	0:0	10	=
water	99:25	0:0	10	s
op	99:26	0:0	10	->
water	99:28	0:0	10	prev_y
op	99:34	0:0	10	[
water	99:35	0:0	10	i
op	99:36	0:0	10	]
water	99:37	0:0	10	;
cond	99:39	99:44	9	j <= y
water	99:39	0:0	10	j
op	99:41	0:0	10	<=
water	99:44	0:0	10	y
forexpr	99:47	99:48	9	j ++
water	99:47	0:0	10	j
op	99:48	0:0	10	++
stmts	100:20	100:43	9	
call	100:20	100:42	10	draw_dot
arg	100:29	100:31	11	fg
water	100:29	0:0	12	fg
arg	100:33	100:34	11	x
water	100:33	0:0	12	x
arg	100:36	100:37	11	j
water	100:36	0:0	12	j
arg	100:39	100:42	11	out
water	100:39	0:0	12	out
water	100:43	0:0	10	;
water	101:12	0:0	8	}
water	102:12	0:0	6	s
op	102:13	0:0	6	->
water	102:15	0:0	6	prev_y
op	102:21	0:0	6	[
water	102:22	0:0	6	i
op	102:23	0:0	6	]
op	102:25	0:0	6	=
water	102:27	0:0	6	y
water	102:28	0:0	6	;
break	103:12	103:17	6	
water	104:8	0:0	6	}
water	105:4	0:0	4	}
water	106:4	0:0	2	s
op	106:5	0:0	2	->
water	106:7	0:0	2	x
op	106:8	0:0	2	++
water	106:10	0:0	2	;
call	107:4	107:21	2	av_frame_free
arg	107:18	107:21	3	&in
op	107:18	0:0	4	&
water	107:19	0:0	4	in
water	107:22	0:0	2	;
return	108:4	108:59	2	ff_filter_frame(outlink,av_frame_clone(s->out))
call	108:11	108:58	3	ff_filter_frame
arg	108:27	108:34	4	outlink
water	108:27	0:0	5	outlink
arg	108:36	108:58	4	av_frame_clone(s->out)
call	108:36	108:57	5	av_frame_clone
arg	108:51	108:57	6	s->out
water	108:51	0:0	7	s
op	108:52	0:0	7	->
water	108:54	0:0	7	out
