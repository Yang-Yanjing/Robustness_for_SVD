func	1:0	166:0	0	static void	search_for_quantizers_faac
params	1:38	0:0	1	
param	1:39	1:60	2	AVCodecContext *	avctx
param	1:62	1:78	2	AACEncContext *	s
param	2:39	2:64	2	SingleChannelElement *	sce
param	3:39	3:57	2	const float	lambda
stmnts	0:0	165:4	1	
decl	5:4	5:30	2	int	start
op	5:14	0:0	2	=
water	5:16	0:0	2	0
water	5:17	0:0	2	,
decl	5:4	5:30	2	int	i
water	5:20	0:0	2	,
decl	5:4	5:30	2	int	w
water	5:23	0:0	2	,
decl	5:4	5:30	2	int	w2
water	5:27	0:0	2	,
decl	5:4	5:30	2	int	g
decl	6:4	6:31	2	float	uplim[128]
water	6:20	0:0	2	,
decl	6:4	6:31	2	float	maxq[128]
decl	7:4	7:19	2	int	minq
water	7:12	0:0	2	,
decl	7:4	7:19	2	int	maxsf
decl	8:4	8:75	2	float	distfact
op	8:19	0:0	2	=
water	8:21	0:0	2	(
water	8:22	0:0	2	(
water	8:23	0:0	2	sce
op	8:26	0:0	2	->
water	8:28	0:0	2	ics
op	8:31	0:0	2	.
water	8:32	0:0	2	num_windows
op	8:44	0:0	2	>
water	8:46	0:0	2	1
water	8:47	0:0	2	)
water	8:49	0:0	2	?
water	8:51	0:0	2	85
op	8:53	0:0	2	.
water	8:54	0:0	2	80
water	8:57	0:0	2	:
water	8:59	0:0	2	147
op	8:62	0:0	2	.
water	8:63	0:0	2	84
water	8:65	0:0	2	)
op	8:67	0:0	2	/
water	8:69	0:0	2	lambda
decl	9:4	9:43	2	int	last
op	9:13	0:0	2	=
water	9:15	0:0	2	0
water	9:16	0:0	2	,
decl	9:4	9:43	2	int	lastband
op	9:27	0:0	2	=
water	9:29	0:0	2	0
water	9:30	0:0	2	,
decl	9:4	9:43	2	int	curband
op	9:40	0:0	2	=
water	9:42	0:0	2	0
decl	10:4	10:26	2	float	avg_energy
op	10:21	0:0	2	=
water	10:23	0:0	2	0
op	10:24	0:0	2	.
water	10:25	0:0	2	0
if	11:4	24:4	2	(sce -> ics . num_windows == 1)
cond	11:8	11:32	3	sce -> ics . num_windows == 1
water	11:8	0:0	4	sce
op	11:11	0:0	4	->
water	11:13	0:0	4	ics
op	11:16	0:0	4	.
water	11:17	0:0	4	num_windows
op	11:29	0:0	4	==
water	11:32	0:0	4	1
stmts	11:35	24:4	3	
water	11:35	0:0	4	{
water	12:8	0:0	4	start
op	12:14	0:0	4	=
water	12:16	0:0	4	0
water	12:17	0:0	4	;
for	13:8	23:8	4	(i = 0 ;i < 1024;i ++)
forinit	13:13	13:18	5	i = 0 ;
water	13:13	0:0	6	i
op	13:15	0:0	6	=
water	13:17	0:0	6	0
water	13:18	0:0	6	;
cond	13:20	13:24	5	i < 1024
water	13:20	0:0	6	i
op	13:22	0:0	6	<
water	13:24	0:0	6	1024
forexpr	13:30	13:31	5	i ++
water	13:30	0:0	6	i
op	13:31	0:0	6	++
stmts	13:35	23:8	5	
water	13:35	0:0	6	{
if	14:12	17:12	6	(i - start >= sce -> ics . swb_sizes [ curband ])
cond	14:16	14:55	7	i - start >= sce -> ics . swb_sizes [ curband ]
water	14:16	0:0	8	i
op	14:18	0:0	8	-
water	14:20	0:0	8	start
op	14:26	0:0	8	>=
water	14:29	0:0	8	sce
op	14:32	0:0	8	->
water	14:34	0:0	8	ics
op	14:37	0:0	8	.
water	14:38	0:0	8	swb_sizes
op	14:47	0:0	8	[
water	14:48	0:0	8	curband
op	14:55	0:0	8	]
stmts	14:58	17:12	7	
water	14:58	0:0	8	{
water	15:16	0:0	8	start
op	15:22	0:0	8	+=
water	15:25	0:0	8	sce
op	15:28	0:0	8	->
water	15:30	0:0	8	ics
op	15:33	0:0	8	.
water	15:34	0:0	8	swb_sizes
op	15:43	0:0	8	[
water	15:44	0:0	8	curband
op	15:51	0:0	8	]
water	15:52	0:0	8	;
water	16:16	0:0	8	curband
op	16:23	0:0	8	++
water	16:25	0:0	8	;
water	17:12	0:0	8	}
if	18:12	22:12	6	(sce -> coeffs [ i ])
cond	18:16	18:29	7	sce -> coeffs [ i ]
water	18:16	0:0	8	sce
op	18:19	0:0	8	->
water	18:21	0:0	8	coeffs
op	18:27	0:0	8	[
water	18:28	0:0	8	i
op	18:29	0:0	8	]
stmts	18:32	22:12	7	
water	18:32	0:0	8	{
water	19:16	0:0	8	avg_energy
op	19:27	0:0	8	+=
water	19:30	0:0	8	sce
op	19:33	0:0	8	->
water	19:35	0:0	8	coeffs
op	19:41	0:0	8	[
water	19:42	0:0	8	i
op	19:43	0:0	8	]
op	19:45	0:0	8	*
water	19:47	0:0	8	sce
op	19:50	0:0	8	->
water	19:52	0:0	8	coeffs
op	19:58	0:0	8	[
water	19:59	0:0	8	i
op	19:60	0:0	8	]
water	19:61	0:0	8	;
water	20:16	0:0	8	last
op	20:21	0:0	8	=
water	20:23	0:0	8	i
water	20:24	0:0	8	;
water	21:16	0:0	8	lastband
op	21:25	0:0	8	=
water	21:27	0:0	8	curband
water	21:34	0:0	8	;
water	22:12	0:0	8	}
water	23:8	0:0	6	}
water	24:4	0:0	4	}
else	24:6	40:4	2
stmts	24:11	40:4	3	
water	24:11	0:0	4	{
for	25:8	39:8	4	(w = 0 ;w < 8;w ++)
forinit	25:13	25:18	5	w = 0 ;
water	25:13	0:0	6	w
op	25:15	0:0	6	=
water	25:17	0:0	6	0
water	25:18	0:0	6	;
cond	25:20	25:24	5	w < 8
water	25:20	0:0	6	w
op	25:22	0:0	6	<
water	25:24	0:0	6	8
forexpr	25:27	25:28	5	w ++
water	25:27	0:0	6	w
op	25:28	0:0	6	++
stmts	25:32	39:8	5	
water	25:32	0:0	6	{
decl	26:12	26:53	6	const float	*coeffs
op	26:32	0:0	6	=
op	26:34	0:0	6	&
water	26:35	0:0	6	sce
op	26:38	0:0	6	->
water	26:40	0:0	6	coeffs
op	26:46	0:0	6	[
water	26:47	0:0	6	w
op	26:48	0:0	6	*
water	26:49	0:0	6	128
op	26:52	0:0	6	]
water	27:12	0:0	6	curband
op	27:20	0:0	6	=
water	27:22	0:0	6	start
op	27:28	0:0	6	=
water	27:30	0:0	6	0
water	27:31	0:0	6	;
for	28:12	38:12	6	(i = 0 ;i < 128;i ++)
forinit	28:17	28:22	7	i = 0 ;
water	28:17	0:0	8	i
op	28:19	0:0	8	=
water	28:21	0:0	8	0
water	28:22	0:0	8	;
cond	28:24	28:28	7	i < 128
water	28:24	0:0	8	i
op	28:26	0:0	8	<
water	28:28	0:0	8	128
forexpr	28:33	28:34	7	i ++
water	28:33	0:0	8	i
op	28:34	0:0	8	++
stmts	28:38	38:12	7	
water	28:38	0:0	8	{
if	29:16	32:16	8	(i - start >= sce -> ics . swb_sizes [ curband ])
cond	29:20	29:59	9	i - start >= sce -> ics . swb_sizes [ curband ]
water	29:20	0:0	10	i
op	29:22	0:0	10	-
water	29:24	0:0	10	start
op	29:30	0:0	10	>=
water	29:33	0:0	10	sce
op	29:36	0:0	10	->
water	29:38	0:0	10	ics
op	29:41	0:0	10	.
water	29:42	0:0	10	swb_sizes
op	29:51	0:0	10	[
water	29:52	0:0	10	curband
op	29:59	0:0	10	]
stmts	29:62	32:16	9	
water	29:62	0:0	10	{
water	30:20	0:0	10	start
op	30:26	0:0	10	+=
water	30:29	0:0	10	sce
op	30:32	0:0	10	->
water	30:34	0:0	10	ics
op	30:37	0:0	10	.
water	30:38	0:0	10	swb_sizes
op	30:47	0:0	10	[
water	30:48	0:0	10	curband
op	30:55	0:0	10	]
water	30:56	0:0	10	;
water	31:20	0:0	10	curband
op	31:27	0:0	10	++
water	31:29	0:0	10	;
water	32:16	0:0	10	}
if	33:16	37:16	8	(coeffs [ i ])
cond	33:20	33:28	9	coeffs [ i ]
water	33:20	0:0	10	coeffs
op	33:26	0:0	10	[
water	33:27	0:0	10	i
op	33:28	0:0	10	]
stmts	33:31	37:16	9	
water	33:31	0:0	10	{
water	34:20	0:0	10	avg_energy
op	34:31	0:0	10	+=
water	34:34	0:0	10	coeffs
op	34:40	0:0	10	[
water	34:41	0:0	10	i
op	34:42	0:0	10	]
op	34:44	0:0	10	*
water	34:46	0:0	10	coeffs
op	34:52	0:0	10	[
water	34:53	0:0	10	i
op	34:54	0:0	10	]
water	34:55	0:0	10	;
water	35:20	0:0	10	last
op	35:25	0:0	10	=
call	35:27	35:40	10	FFMAX
arg	35:33	35:37	11	last
water	35:33	0:0	12	last
arg	35:39	35:40	11	i
water	35:39	0:0	12	i
water	35:41	0:0	10	;
water	36:20	0:0	10	lastband
op	36:29	0:0	10	=
call	36:31	36:54	10	FFMAX
arg	36:37	36:45	11	lastband
water	36:37	0:0	12	lastband
arg	36:47	36:54	11	curband
water	36:47	0:0	12	curband
water	36:55	0:0	10	;
water	37:16	0:0	10	}
water	38:12	0:0	8	}
water	39:8	0:0	6	}
water	40:4	0:0	4	}
water	41:4	0:0	2	last
op	41:8	0:0	2	++
water	41:10	0:0	2	;
water	42:4	0:0	2	avg_energy
op	42:15	0:0	2	/=
water	42:18	0:0	2	last
water	42:22	0:0	2	;
if	43:4	47:4	2	(avg_energy == 0 . 0 f)
cond	43:8	43:25	3	avg_energy == 0 . 0 f
water	43:8	0:0	4	avg_energy
op	43:19	0:0	4	==
water	43:22	0:0	4	0
op	43:23	0:0	4	.
water	43:24	0:0	4	0
water	43:25	0:0	4	f
stmts	43:28	47:4	3	
water	43:28	0:0	4	{
for	44:8	45:42	4	(i = 0 ;i <FF_ARRAY_ELEMS (sce -> sf_idx );i ++)
forinit	44:13	44:18	5	i = 0 ;
water	44:13	0:0	6	i
op	44:15	0:0	6	=
water	44:17	0:0	6	0
water	44:18	0:0	6	;
cond	44:20	44:50	5	i <FF_ARRAY_ELEMS (sce -> sf_idx )
water	44:20	0:0	6	i
op	44:22	0:0	6	<
call	44:24	44:50	6	FF_ARRAY_ELEMS
arg	44:39	44:50	7	sce->sf_idx
water	44:39	0:0	8	sce
op	44:42	0:0	8	->
water	44:44	0:0	8	sf_idx
forexpr	44:53	44:54	5	i ++
water	44:53	0:0	6	i
op	44:54	0:0	6	++
stmts	45:12	45:42	5	
water	45:12	0:0	6	sce
op	45:15	0:0	6	->
water	45:17	0:0	6	sf_idx
op	45:23	0:0	6	[
water	45:24	0:0	6	i
op	45:25	0:0	6	]
op	45:27	0:0	6	=
water	45:29	0:0	6	SCALE_ONE_POS
water	45:42	0:0	6	;
return	46:8	46:14	4	
water	47:4	0:0	4	}
for	48:4	86:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	48:9	48:14	3	w = 0 ;
water	48:9	0:0	4	w
op	48:11	0:0	4	=
water	48:13	0:0	4	0
water	48:14	0:0	4	;
cond	48:16	48:29	3	w < sce -> ics . num_windows
water	48:16	0:0	4	w
op	48:18	0:0	4	<
water	48:20	0:0	4	sce
op	48:23	0:0	4	->
water	48:25	0:0	4	ics
op	48:28	0:0	4	.
water	48:29	0:0	4	num_windows
forexpr	48:42	48:67	3	w += sce -> ics . group_len [ w ]
water	48:42	0:0	4	w
op	48:44	0:0	4	+=
water	48:47	0:0	4	sce
op	48:50	0:0	4	->
water	48:52	0:0	4	ics
op	48:55	0:0	4	.
water	48:56	0:0	4	group_len
op	48:65	0:0	4	[
water	48:66	0:0	4	w
op	48:67	0:0	4	]
stmts	48:70	86:4	3	
water	48:70	0:0	4	{
water	49:8	0:0	4	start
op	49:14	0:0	4	=
water	49:16	0:0	4	w
op	49:17	0:0	4	*
water	49:18	0:0	4	128
water	49:21	0:0	4	;
for	50:8	85:8	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	50:13	50:18	5	g = 0 ;
water	50:13	0:0	6	g
op	50:15	0:0	6	=
water	50:17	0:0	6	0
water	50:18	0:0	6	;
cond	50:20	50:33	5	g < sce -> ics . num_swb
water	50:20	0:0	6	g
op	50:22	0:0	6	<
water	50:24	0:0	6	sce
op	50:27	0:0	6	->
water	50:29	0:0	6	ics
op	50:32	0:0	6	.
water	50:33	0:0	6	num_swb
forexpr	50:42	50:43	5	g ++
water	50:42	0:0	6	g
op	50:43	0:0	6	++
stmts	50:47	85:8	5	
water	50:47	0:0	6	{
decl	51:12	51:48	6	float	*coefs
op	51:27	0:0	6	=
op	51:29	0:0	6	&
water	51:30	0:0	6	sce
op	51:33	0:0	6	->
water	51:35	0:0	6	coeffs
op	51:41	0:0	6	[
water	51:42	0:0	6	start
op	51:47	0:0	6	]
decl	52:12	52:50	6	const int	size
op	52:27	0:0	6	=
water	52:29	0:0	6	sce
op	52:32	0:0	6	->
water	52:34	0:0	6	ics
op	52:37	0:0	6	.
water	52:38	0:0	6	swb_sizes
op	52:47	0:0	6	[
water	52:48	0:0	6	g
op	52:49	0:0	6	]
decl	53:12	53:68	6	int	start2
op	53:23	0:0	6	=
water	53:25	0:0	6	start
water	53:30	0:0	6	,
decl	53:12	53:68	6	int	end2
op	53:37	0:0	6	=
water	53:39	0:0	6	start
op	53:45	0:0	6	+
water	53:47	0:0	6	size
water	53:51	0:0	6	,
decl	53:12	53:68	6	int	peakpos
op	53:61	0:0	6	=
water	53:63	0:0	6	start
decl	54:12	54:44	6	float	maxval
op	54:25	0:0	6	=
op	54:27	0:0	6	-
water	54:28	0:0	6	1
water	54:29	0:0	6	,
decl	54:12	54:44	6	float	thr
op	54:35	0:0	6	=
water	54:37	0:0	6	0
op	54:38	0:0	6	.
water	54:39	0:0	6	0
water	54:40	0:0	6	f
water	54:41	0:0	6	,
decl	54:12	54:44	6	float	t
water	55:12	0:0	6	maxq
op	55:16	0:0	6	[
water	55:17	0:0	6	w
op	55:18	0:0	6	*
water	55:19	0:0	6	16
op	55:21	0:0	6	+
water	55:22	0:0	6	g
op	55:23	0:0	6	]
op	55:25	0:0	6	=
water	55:27	0:0	6	0
op	55:28	0:0	6	.
water	55:29	0:0	6	0
water	55:30	0:0	6	f
water	55:31	0:0	6	;
if	56:12	62:12	6	(g > lastband)
cond	56:16	56:20	7	g > lastband
water	56:16	0:0	8	g
op	56:18	0:0	8	>
water	56:20	0:0	8	lastband
stmts	56:30	62:12	7	
water	56:30	0:0	8	{
water	57:16	0:0	8	maxq
op	57:20	0:0	8	[
water	57:21	0:0	8	w
op	57:22	0:0	8	*
water	57:23	0:0	8	16
op	57:25	0:0	8	+
water	57:26	0:0	8	g
op	57:27	0:0	8	]
op	57:29	0:0	8	=
water	57:31	0:0	8	0
op	57:32	0:0	8	.
water	57:33	0:0	8	0
water	57:34	0:0	8	f
water	57:35	0:0	8	;
water	58:16	0:0	8	start
op	58:22	0:0	8	+=
water	58:25	0:0	8	size
water	58:29	0:0	8	;
for	59:16	60:68	8	(w2 = 0 ;w2 < sce -> ics . group_len [ w ];w2 ++)
forinit	59:21	59:27	9	w2 = 0 ;
water	59:21	0:0	10	w2
op	59:24	0:0	10	=
water	59:26	0:0	10	0
water	59:27	0:0	10	;
cond	59:29	59:54	9	w2 < sce -> ics . group_len [ w ]
water	59:29	0:0	10	w2
op	59:32	0:0	10	<
water	59:34	0:0	10	sce
op	59:37	0:0	10	->
water	59:39	0:0	10	ics
op	59:42	0:0	10	.
water	59:43	0:0	10	group_len
op	59:52	0:0	10	[
water	59:53	0:0	10	w
op	59:54	0:0	10	]
forexpr	59:57	59:59	9	w2 ++
water	59:57	0:0	10	w2
op	59:59	0:0	10	++
stmts	60:20	60:68	9	
call	60:20	60:67	10	memset
arg	60:27	60:41	11	coefs+w2*128
water	60:27	0:0	12	coefs
op	60:33	0:0	12	+
water	60:35	0:0	12	w2
op	60:37	0:0	12	*
water	60:38	0:0	12	128
arg	60:43	60:44	11	0
water	60:43	0:0	12	0
arg	60:46	60:67	11	sizeof(coefs[0])*size
op	60:46	0:0	12	sizeof
water	60:52	0:0	12	(
water	60:53	0:0	12	coefs
op	60:58	0:0	12	[
water	60:59	0:0	12	0
op	60:60	0:0	12	]
water	60:61	0:0	12	)
op	60:62	0:0	12	*
water	60:63	0:0	12	size
water	60:68	0:0	10	;
continue	61:16	61:24	8	
water	62:12	0:0	8	}
for	63:12	73:12	6	(w2 = 0 ;w2 < sce -> ics . group_len [ w ];w2 ++)
forinit	63:17	63:23	7	w2 = 0 ;
water	63:17	0:0	8	w2
op	63:20	0:0	8	=
water	63:22	0:0	8	0
water	63:23	0:0	8	;
cond	63:25	63:50	7	w2 < sce -> ics . group_len [ w ]
water	63:25	0:0	8	w2
op	63:28	0:0	8	<
water	63:30	0:0	8	sce
op	63:33	0:0	8	->
water	63:35	0:0	8	ics
op	63:38	0:0	8	.
water	63:39	0:0	8	group_len
op	63:48	0:0	8	[
water	63:49	0:0	8	w
op	63:50	0:0	8	]
forexpr	63:53	63:55	7	w2 ++
water	63:53	0:0	8	w2
op	63:55	0:0	8	++
stmts	63:59	73:12	7	
water	63:59	0:0	8	{
for	64:16	72:16	8	(i = 0 ;i < size;i ++)
forinit	64:21	64:26	9	i = 0 ;
water	64:21	0:0	10	i
op	64:23	0:0	10	=
water	64:25	0:0	10	0
water	64:26	0:0	10	;
cond	64:28	64:32	9	i < size
water	64:28	0:0	10	i
op	64:30	0:0	10	<
water	64:32	0:0	10	size
forexpr	64:38	64:39	9	i ++
water	64:38	0:0	10	i
op	64:39	0:0	10	++
stmts	64:43	72:16	9	
water	64:43	0:0	10	{
decl	65:20	65:61	10	float	t
op	65:28	0:0	10	=
water	65:30	0:0	10	coefs
op	65:35	0:0	10	[
water	65:36	0:0	10	w2
op	65:38	0:0	10	*
water	65:39	0:0	10	128
op	65:42	0:0	10	+
water	65:43	0:0	10	i
op	65:44	0:0	10	]
op	65:45	0:0	10	*
water	65:46	0:0	10	coefs
op	65:51	0:0	10	[
water	65:52	0:0	10	w2
op	65:54	0:0	10	*
water	65:55	0:0	10	128
op	65:58	0:0	10	+
water	65:59	0:0	10	i
op	65:60	0:0	10	]
water	66:20	0:0	10	maxq
op	66:24	0:0	10	[
water	66:25	0:0	10	w
op	66:26	0:0	10	*
water	66:27	0:0	10	16
op	66:29	0:0	10	+
water	66:30	0:0	10	g
op	66:31	0:0	10	]
op	66:33	0:0	10	=
call	66:35	66:79	10	FFMAX
arg	66:41	66:53	11	maxq[w*16+g]
water	66:41	0:0	12	maxq
op	66:45	0:0	12	[
water	66:46	0:0	12	w
op	66:47	0:0	12	*
water	66:48	0:0	12	16
op	66:50	0:0	12	+
water	66:51	0:0	12	g
op	66:52	0:0	12	]
arg	66:55	66:79	11	fabsf(coefs[w2*128+i])
call	66:55	66:78	12	fabsf
arg	66:61	66:78	13	coefs[w2*128+i]
water	66:61	0:0	14	coefs
op	66:66	0:0	14	[
water	66:67	0:0	14	w2
op	66:69	0:0	14	*
water	66:70	0:0	14	128
op	66:74	0:0	14	+
water	66:76	0:0	14	i
op	66:77	0:0	14	]
water	66:80	0:0	10	;
water	67:20	0:0	10	thr
op	67:24	0:0	10	+=
water	67:27	0:0	10	t
water	67:28	0:0	10	;
if	68:20	71:20	10	(sce -> ics . num_windows == 1 && maxval < t)
cond	68:24	68:62	11	sce -> ics . num_windows == 1 && maxval < t
water	68:24	0:0	12	sce
op	68:27	0:0	12	->
water	68:29	0:0	12	ics
op	68:32	0:0	12	.
water	68:33	0:0	12	num_windows
op	68:45	0:0	12	==
water	68:48	0:0	12	1
op	68:50	0:0	12	&&
water	68:53	0:0	12	maxval
op	68:60	0:0	12	<
water	68:62	0:0	12	t
stmts	68:65	71:20	11	
water	68:65	0:0	12	{
water	69:24	0:0	12	maxval
op	69:32	0:0	12	=
water	69:34	0:0	12	t
water	69:35	0:0	12	;
water	70:24	0:0	12	peakpos
op	70:32	0:0	12	=
water	70:34	0:0	12	start
op	70:39	0:0	12	+
water	70:40	0:0	12	i
water	70:41	0:0	12	;
water	71:20	0:0	12	}
water	72:16	0:0	10	}
water	73:12	0:0	8	}
if	74:12	77:12	6	(sce -> ics . num_windows == 1)
cond	74:16	74:40	7	sce -> ics . num_windows == 1
water	74:16	0:0	8	sce
op	74:19	0:0	8	->
water	74:21	0:0	8	ics
op	74:24	0:0	8	.
water	74:25	0:0	8	num_windows
op	74:37	0:0	8	==
water	74:40	0:0	8	1
stmts	74:43	77:12	7	
water	74:43	0:0	8	{
water	75:16	0:0	8	start2
op	75:23	0:0	8	=
call	75:25	75:50	8	FFMAX
arg	75:31	75:42	9	peakpos-2
water	75:31	0:0	10	peakpos
op	75:39	0:0	10	-
water	75:41	0:0	10	2
arg	75:44	75:50	9	start2
water	75:44	0:0	10	start2
water	75:51	0:0	8	;
water	76:16	0:0	8	end2
op	76:23	0:0	8	=
call	76:25	76:48	8	FFMIN
arg	76:31	76:42	9	peakpos+3
water	76:31	0:0	10	peakpos
op	76:39	0:0	10	+
water	76:41	0:0	10	3
arg	76:44	76:48	9	end2
water	76:44	0:0	10	end2
water	76:49	0:0	8	;
water	77:12	0:0	8	}
else	77:14	80:12	6
stmts	77:19	80:12	7	
water	77:19	0:0	8	{
water	78:16	0:0	8	start2
op	78:23	0:0	8	-=
water	78:26	0:0	8	start
water	78:31	0:0	8	;
water	79:16	0:0	8	end2
op	79:23	0:0	8	-=
water	79:26	0:0	8	start
water	79:31	0:0	8	;
water	80:12	0:0	8	}
water	81:12	0:0	6	start
op	81:18	0:0	6	+=
water	81:21	0:0	6	size
water	81:25	0:0	6	;
water	82:12	0:0	6	thr
op	82:16	0:0	6	=
call	82:18	82:95	6	pow
arg	82:22	82:58	7	thr/(avg_energy*(end2-start2))
water	82:22	0:0	8	thr
op	82:26	0:0	8	/
water	82:28	0:0	8	(
water	82:29	0:0	8	avg_energy
op	82:40	0:0	8	*
water	82:42	0:0	8	(
water	82:43	0:0	8	end2
op	82:48	0:0	8	-
water	82:50	0:0	8	start2
water	82:56	0:0	8	)
water	82:57	0:0	8	)
arg	82:60	82:95	7	0.3+0.1*(lastband-g)/lastband
water	82:60	0:0	8	0
op	82:61	0:0	8	.
water	82:62	0:0	8	3
op	82:64	0:0	8	+
water	82:66	0:0	8	0
op	82:67	0:0	8	.
water	82:68	0:0	8	1
op	82:69	0:0	8	*
water	82:70	0:0	8	(
water	82:71	0:0	8	lastband
op	82:80	0:0	8	-
water	82:82	0:0	8	g
water	82:83	0:0	8	)
op	82:85	0:0	8	/
water	82:87	0:0	8	lastband
water	82:96	0:0	6	;
water	83:12	0:0	6	t
op	83:16	0:0	6	=
water	83:18	0:0	6	1
op	83:19	0:0	6	.
water	83:20	0:0	6	0
op	83:22	0:0	6	-
water	83:24	0:0	6	(
water	83:25	0:0	6	1
op	83:26	0:0	6	.
water	83:27	0:0	6	0
op	83:29	0:0	6	*
water	83:31	0:0	6	start2
op	83:38	0:0	6	/
water	83:40	0:0	6	last
water	83:44	0:0	6	)
water	83:45	0:0	6	;
water	84:12	0:0	6	uplim
op	84:17	0:0	6	[
water	84:18	0:0	6	w
op	84:19	0:0	6	*
water	84:20	0:0	6	16
op	84:22	0:0	6	+
water	84:23	0:0	6	g
op	84:24	0:0	6	]
op	84:26	0:0	6	=
water	84:28	0:0	6	distfact
op	84:37	0:0	6	/
water	84:39	0:0	6	(
water	84:40	0:0	6	1
op	84:41	0:0	6	.
water	84:42	0:0	6	4
op	84:44	0:0	6	*
water	84:46	0:0	6	thr
op	84:50	0:0	6	+
water	84:52	0:0	6	t
op	84:53	0:0	6	*
water	84:54	0:0	6	t
op	84:55	0:0	6	*
water	84:56	0:0	6	t
op	84:58	0:0	6	+
water	84:60	0:0	6	0
op	84:61	0:0	6	.
water	84:62	0:0	6	075
water	84:65	0:0	6	)
water	84:66	0:0	6	;
water	85:8	0:0	6	}
water	86:4	0:0	4	}
call	87:4	87:46	2	memset
arg	87:11	87:22	3	sce->sf_idx
water	87:11	0:0	4	sce
op	87:14	0:0	4	->
water	87:16	0:0	4	sf_idx
arg	87:24	87:25	3	0
water	87:24	0:0	4	0
arg	87:27	87:46	3	sizeof(sce->sf_idx)
op	87:27	0:0	4	sizeof
water	87:33	0:0	4	(
water	87:34	0:0	4	sce
op	87:37	0:0	4	->
water	87:39	0:0	4	sf_idx
water	87:45	0:0	4	)
water	87:47	0:0	2	;
call	88:4	88:44	2	abs_pow34_v
arg	88:16	88:25	3	s->scoefs
water	88:16	0:0	4	s
op	88:17	0:0	4	->
water	88:19	0:0	4	scoefs
arg	88:27	88:38	3	sce->coeffs
water	88:27	0:0	4	sce
op	88:30	0:0	4	->
water	88:32	0:0	4	coeffs
arg	88:40	88:44	3	1024
water	88:40	0:0	4	1024
water	88:45	0:0	2	;
for	89:4	149:4	2	(w = 0 ;w < sce -> ics . num_windows;w += sce -> ics . group_len [ w ])
forinit	89:9	89:14	3	w = 0 ;
water	89:9	0:0	4	w
op	89:11	0:0	4	=
water	89:13	0:0	4	0
water	89:14	0:0	4	;
cond	89:16	89:29	3	w < sce -> ics . num_windows
water	89:16	0:0	4	w
op	89:18	0:0	4	<
water	89:20	0:0	4	sce
op	89:23	0:0	4	->
water	89:25	0:0	4	ics
op	89:28	0:0	4	.
water	89:29	0:0	4	num_windows
forexpr	89:42	89:67	3	w += sce -> ics . group_len [ w ]
water	89:42	0:0	4	w
op	89:44	0:0	4	+=
water	89:47	0:0	4	sce
op	89:50	0:0	4	->
water	89:52	0:0	4	ics
op	89:55	0:0	4	.
water	89:56	0:0	4	group_len
op	89:65	0:0	4	[
water	89:66	0:0	4	w
op	89:67	0:0	4	]
stmts	89:70	149:4	3	
water	89:70	0:0	4	{
water	90:8	0:0	4	start
op	90:14	0:0	4	=
water	90:16	0:0	4	w
op	90:17	0:0	4	*
water	90:18	0:0	4	128
water	90:21	0:0	4	;
for	91:8	148:8	4	(g = 0 ;g < sce -> ics . num_swb;g ++)
forinit	91:13	91:18	5	g = 0 ;
water	91:13	0:0	6	g
op	91:15	0:0	6	=
water	91:17	0:0	6	0
water	91:18	0:0	6	;
cond	91:21	91:34	5	g < sce -> ics . num_swb
water	91:21	0:0	6	g
op	91:23	0:0	6	<
water	91:25	0:0	6	sce
op	91:28	0:0	6	->
water	91:30	0:0	6	ics
op	91:33	0:0	6	.
water	91:34	0:0	6	num_swb
forexpr	91:43	91:44	5	g ++
water	91:43	0:0	6	g
op	91:44	0:0	6	++
stmts	91:48	148:8	5	
water	91:48	0:0	6	{
decl	92:12	92:53	6	const float	*coefs
op	92:32	0:0	6	=
op	92:34	0:0	6	&
water	92:35	0:0	6	sce
op	92:38	0:0	6	->
water	92:40	0:0	6	coeffs
op	92:46	0:0	6	[
water	92:47	0:0	6	start
op	92:52	0:0	6	]
decl	93:12	93:51	6	const float	*scaled
op	93:32	0:0	6	=
op	93:34	0:0	6	&
water	93:35	0:0	6	s
op	93:36	0:0	6	->
water	93:38	0:0	6	scoefs
op	93:44	0:0	6	[
water	93:45	0:0	6	start
op	93:50	0:0	6	]
decl	94:12	94:55	6	const int	size
op	94:32	0:0	6	=
water	94:34	0:0	6	sce
op	94:37	0:0	6	->
water	94:39	0:0	6	ics
op	94:42	0:0	6	.
water	94:43	0:0	6	swb_sizes
op	94:52	0:0	6	[
water	94:53	0:0	6	g
op	94:54	0:0	6	]
decl	95:12	95:35	6	int	scf
water	95:19	0:0	6	,
decl	95:12	95:35	6	int	prev_scf
water	95:29	0:0	6	,
decl	95:12	95:35	6	int	step
decl	96:12	96:43	6	int	min_scf
op	96:24	0:0	6	=
op	96:26	0:0	6	-
water	96:27	0:0	6	1
water	96:28	0:0	6	,
decl	96:12	96:43	6	int	max_scf
op	96:38	0:0	6	=
water	96:40	0:0	6	256
decl	97:12	97:25	6	float	curdiff
if	98:12	102:12	6	(maxq [ w * 16 + g ] < 21 . 544)
cond	98:16	98:34	7	maxq [ w * 16 + g ] < 21 . 544
water	98:16	0:0	8	maxq
op	98:20	0:0	8	[
water	98:21	0:0	8	w
op	98:22	0:0	8	*
water	98:23	0:0	8	16
op	98:25	0:0	8	+
water	98:26	0:0	8	g
op	98:27	0:0	8	]
op	98:29	0:0	8	<
water	98:31	0:0	8	21
op	98:33	0:0	8	.
water	98:34	0:0	8	544
stmts	98:39	102:12	7	
water	98:39	0:0	8	{
water	99:16	0:0	8	sce
op	99:19	0:0	8	->
water	99:21	0:0	8	zeroes
op	99:27	0:0	8	[
water	99:28	0:0	8	w
op	99:29	0:0	8	*
water	99:30	0:0	8	16
op	99:32	0:0	8	+
water	99:33	0:0	8	g
op	99:34	0:0	8	]
op	99:36	0:0	8	=
water	99:38	0:0	8	1
water	99:39	0:0	8	;
water	100:16	0:0	8	start
op	100:22	0:0	8	+=
water	100:25	0:0	8	size
water	100:29	0:0	8	;
continue	101:16	101:24	8	
water	102:12	0:0	8	}
water	103:12	0:0	6	sce
op	103:15	0:0	6	->
water	103:17	0:0	6	zeroes
op	103:23	0:0	6	[
water	103:24	0:0	6	w
op	103:25	0:0	6	*
water	103:26	0:0	6	16
op	103:28	0:0	6	+
water	103:29	0:0	6	g
op	103:30	0:0	6	]
op	103:32	0:0	6	=
water	103:34	0:0	6	0
water	103:35	0:0	6	;
water	104:12	0:0	6	scf
op	104:17	0:0	6	=
water	104:19	0:0	6	prev_scf
op	104:28	0:0	6	=
call	104:30	104:105	6	av_clip
arg	104:38	104:96	7	SCALE_ONE_POS-SCALE_DIV_512-log2f(1/maxq[w*16+g])*16/3
water	104:38	0:0	8	SCALE_ONE_POS
op	104:52	0:0	8	-
water	104:54	0:0	8	SCALE_DIV_512
op	104:68	0:0	8	-
call	104:70	104:90	8	log2f
arg	104:76	104:90	9	1/maxq[w*16+g]
water	104:76	0:0	10	1
op	104:77	0:0	10	/
water	104:78	0:0	10	maxq
op	104:82	0:0	10	[
water	104:83	0:0	10	w
op	104:84	0:0	10	*
water	104:85	0:0	10	16
op	104:87	0:0	10	+
water	104:88	0:0	10	g
op	104:89	0:0	10	]
op	104:91	0:0	8	*
water	104:92	0:0	8	16
op	104:94	0:0	8	/
water	104:95	0:0	8	3
arg	104:98	104:100	7	60
water	104:98	0:0	8	60
arg	104:102	104:105	7	218
water	104:102	0:0	8	218
water	104:106	0:0	6	;
for	105:12	146:12	6	(;;)
forinit	105:17	105:17	7	;
water	105:17	0:0	8	;
cond	0:0	0:0	7	
forexpr	0:0	0:0	7	
stmts	105:21	146:12	7	
water	105:21	0:0	8	{
decl	106:16	106:33	8	float	dist
op	106:27	0:0	8	=
water	106:29	0:0	8	0
op	106:30	0:0	8	.
water	106:31	0:0	8	0
water	106:32	0:0	8	f
decl	107:16	107:29	8	int	quant_max
for	108:16	120:16	8	(w2 = 0 ;w2 < sce -> ics . group_len [ w ];w2 ++)
forinit	108:21	108:27	9	w2 = 0 ;
water	108:21	0:0	10	w2
op	108:24	0:0	10	=
water	108:26	0:0	10	0
water	108:27	0:0	10	;
cond	108:29	108:54	9	w2 < sce -> ics . group_len [ w ]
water	108:29	0:0	10	w2
op	108:32	0:0	10	<
water	108:34	0:0	10	sce
op	108:37	0:0	10	->
water	108:39	0:0	10	ics
op	108:42	0:0	10	.
water	108:43	0:0	10	group_len
op	108:52	0:0	10	[
water	108:53	0:0	10	w
op	108:54	0:0	10	]
forexpr	108:57	108:59	9	w2 ++
water	108:57	0:0	10	w2
op	108:59	0:0	10	++
stmts	108:63	120:16	9	
water	108:63	0:0	10	{
decl	109:20	109:25	10	int	b
water	110:20	0:0	10	dist
op	110:25	0:0	10	+=
call	110:28	118:48	10	quantize_band_cost
arg	110:47	110:48	11	s
water	110:47	0:0	12	s
arg	110:50	110:64	11	coefs+w2*128
water	110:50	0:0	12	coefs
op	110:56	0:0	12	+
water	110:58	0:0	12	w2
op	110:60	0:0	12	*
water	110:61	0:0	12	128
arg	111:47	111:62	11	scaled+w2*128
water	111:47	0:0	12	scaled
op	111:54	0:0	12	+
water	111:56	0:0	12	w2
op	111:58	0:0	12	*
water	111:59	0:0	12	128
arg	112:47	112:68	11	sce->ics.swb_sizes[g]
water	112:47	0:0	12	sce
op	112:50	0:0	12	->
water	112:52	0:0	12	ics
op	112:55	0:0	12	.
water	112:56	0:0	12	swb_sizes
op	112:65	0:0	12	[
water	112:66	0:0	12	g
op	112:67	0:0	12	]
arg	113:47	113:50	11	scf
water	113:47	0:0	12	scf
arg	114:47	114:53	11	ESC_BT
water	114:47	0:0	12	ESC_BT
arg	115:47	115:53	11	lambda
water	115:47	0:0	12	lambda
arg	116:47	116:55	11	INFINITY
water	116:47	0:0	12	INFINITY
arg	117:47	117:49	11	&b
op	117:47	0:0	12	&
water	117:48	0:0	12	b
arg	118:47	118:48	11	0
water	118:47	0:0	12	0
water	118:49	0:0	10	;
water	119:20	0:0	10	dist
op	119:25	0:0	10	-=
water	119:28	0:0	10	b
water	119:29	0:0	10	;
water	120:16	0:0	10	}
water	121:16	0:0	8	dist
op	121:21	0:0	8	*=
water	121:24	0:0	8	1
op	121:25	0:0	8	.
water	121:26	0:0	8	0
water	121:27	0:0	8	f
op	121:29	0:0	8	/
water	121:31	0:0	8	512
op	121:34	0:0	8	.
water	121:35	0:0	8	0
water	121:36	0:0	8	f
op	121:38	0:0	8	/
water	121:40	0:0	8	lambda
water	121:46	0:0	8	;
water	122:16	0:0	8	quant_max
op	122:26	0:0	8	=
call	122:28	122:133	8	quant
arg	122:34	122:46	9	maxq[w*16+g]
water	122:34	0:0	10	maxq
op	122:38	0:0	10	[
water	122:39	0:0	10	w
op	122:40	0:0	10	*
water	122:41	0:0	10	16
op	122:43	0:0	10	+
water	122:44	0:0	10	g
op	122:45	0:0	10	]
arg	122:48	122:117	9	ff_aac_pow2sf_tab[POW_SF2_ZERO-scf+SCALE_ONE_POS-SCALE_DIV_512]
water	122:48	0:0	10	ff_aac_pow2sf_tab
op	122:65	0:0	10	[
water	122:66	0:0	10	POW_SF2_ZERO
op	122:79	0:0	10	-
water	122:81	0:0	10	scf
op	122:85	0:0	10	+
water	122:87	0:0	10	SCALE_ONE_POS
op	122:101	0:0	10	-
water	122:103	0:0	10	SCALE_DIV_512
op	122:116	0:0	10	]
arg	122:119	122:133	9	ROUND_STANDARD
water	122:119	0:0	10	ROUND_STANDARD
water	122:134	0:0	8	;
if	123:16	126:16	8	(quant_max >= 8191)
cond	123:20	123:33	9	quant_max >= 8191
water	123:20	0:0	10	quant_max
op	123:30	0:0	10	>=
water	123:33	0:0	10	8191
stmts	123:39	126:16	9	
water	123:39	0:0	10	{
water	124:20	0:0	10	sce
op	124:23	0:0	10	->
water	124:25	0:0	10	sf_idx
op	124:31	0:0	10	[
water	124:32	0:0	10	w
op	124:33	0:0	10	*
water	124:34	0:0	10	16
op	124:36	0:0	10	+
water	124:37	0:0	10	g
op	124:38	0:0	10	]
op	124:40	0:0	10	=
water	124:42	0:0	10	prev_scf
water	124:50	0:0	10	;
break	125:20	125:25	10	
water	126:16	0:0	10	}
water	127:16	0:0	8	prev_scf
op	127:25	0:0	8	=
water	127:27	0:0	8	scf
water	127:30	0:0	8	;
water	128:16	0:0	8	curdiff
op	128:24	0:0	8	=
call	128:26	128:52	8	fabsf
arg	128:32	128:52	9	dist-uplim[w*16+g]
water	128:32	0:0	10	dist
op	128:37	0:0	10	-
water	128:39	0:0	10	uplim
op	128:44	0:0	10	[
water	128:45	0:0	10	w
op	128:46	0:0	10	*
water	128:47	0:0	10	16
op	128:49	0:0	10	+
water	128:50	0:0	10	g
op	128:51	0:0	10	]
water	128:53	0:0	8	;
if	129:16	130:28	8	(curdiff <= 1 . 0 f)
cond	129:20	129:34	9	curdiff <= 1 . 0 f
water	129:20	0:0	10	curdiff
op	129:28	0:0	10	<=
water	129:31	0:0	10	1
op	129:32	0:0	10	.
water	129:33	0:0	10	0
water	129:34	0:0	10	f
stmts	130:20	130:28	9	
water	130:20	0:0	10	step
op	130:25	0:0	10	=
water	130:27	0:0	10	0
water	130:28	0:0	10	;
else	131:16	132:41	8
stmts	132:20	132:41	9	
water	132:20	0:0	10	step
op	132:25	0:0	10	=
call	132:27	132:40	10	log2f
arg	132:33	132:40	11	curdiff
water	132:33	0:0	12	curdiff
water	132:41	0:0	10	;
if	133:16	134:32	8	(dist > uplim [ w * 16 + g ])
cond	133:20	133:39	9	dist > uplim [ w * 16 + g ]
water	133:20	0:0	10	dist
op	133:25	0:0	10	>
water	133:27	0:0	10	uplim
op	133:32	0:0	10	[
water	133:33	0:0	10	w
op	133:34	0:0	10	*
water	133:35	0:0	10	16
op	133:37	0:0	10	+
water	133:38	0:0	10	g
op	133:39	0:0	10	]
stmts	134:20	134:32	9	
water	134:20	0:0	10	step
op	134:25	0:0	10	=
op	134:27	0:0	10	-
water	134:28	0:0	10	step
water	134:32	0:0	10	;
water	135:16	0:0	8	scf
op	135:20	0:0	8	+=
water	135:23	0:0	8	step
water	135:27	0:0	8	;
water	136:16	0:0	8	scf
op	136:20	0:0	8	=
call	136:22	136:39	8	av_clip_uint8
arg	136:36	136:39	9	scf
water	136:36	0:0	10	scf
water	136:40	0:0	8	;
water	137:16	0:0	8	step
op	137:21	0:0	8	=
water	137:23	0:0	8	scf
op	137:27	0:0	8	-
water	137:29	0:0	8	prev_scf
water	137:37	0:0	8	;
if	138:16	141:16	8	(FFABS (step ) <= 1 || ( step > 0 && scf >= max_scf ) || ( step < 0 && scf <= min_scf ))
cond	138:20	138:99	9	FFABS (step ) <= 1 || ( step > 0 && scf >= max_scf ) || ( step < 0 && scf <= min_scf )
call	138:20	138:30	10	FFABS
arg	138:26	138:30	11	step
water	138:26	0:0	12	step
op	138:32	0:0	10	<=
water	138:35	0:0	10	1
op	138:37	0:0	10	||
water	138:40	0:0	10	(
water	138:41	0:0	10	step
op	138:46	0:0	10	>
water	138:48	0:0	10	0
op	138:50	0:0	10	&&
water	138:53	0:0	10	scf
op	138:57	0:0	10	>=
water	138:60	0:0	10	max_scf
water	138:67	0:0	10	)
op	138:69	0:0	10	||
water	138:72	0:0	10	(
water	138:73	0:0	10	step
op	138:78	0:0	10	<
water	138:80	0:0	10	0
op	138:82	0:0	10	&&
water	138:85	0:0	10	scf
op	138:89	0:0	10	<=
water	138:92	0:0	10	min_scf
water	138:99	0:0	10	)
stmts	138:102	141:16	9	
water	138:102	0:0	10	{
water	139:20	0:0	10	sce
op	139:23	0:0	10	->
water	139:25	0:0	10	sf_idx
op	139:31	0:0	10	[
water	139:32	0:0	10	w
op	139:33	0:0	10	*
water	139:34	0:0	10	16
op	139:36	0:0	10	+
water	139:37	0:0	10	g
op	139:38	0:0	10	]
op	139:40	0:0	10	=
call	139:42	139:71	10	av_clip
arg	139:50	139:53	11	scf
water	139:50	0:0	12	scf
arg	139:55	139:62	11	min_scf
water	139:55	0:0	12	min_scf
arg	139:64	139:71	11	max_scf
water	139:64	0:0	12	max_scf
water	139:72	0:0	10	;
break	140:20	140:25	10	
water	141:16	0:0	10	}
if	142:16	143:38	8	(step > 0)
cond	142:20	142:27	9	step > 0
water	142:20	0:0	10	step
op	142:25	0:0	10	>
water	142:27	0:0	10	0
stmts	143:20	143:38	9	
water	143:20	0:0	10	min_scf
op	143:28	0:0	10	=
water	143:30	0:0	10	prev_scf
water	143:38	0:0	10	;
else	144:16	145:38	8
stmts	145:20	145:38	9	
water	145:20	0:0	10	max_scf
op	145:28	0:0	10	=
water	145:30	0:0	10	prev_scf
water	145:38	0:0	10	;
water	146:12	0:0	8	}
water	147:12	0:0	6	start
op	147:18	0:0	6	+=
water	147:21	0:0	6	size
water	147:25	0:0	6	;
water	148:8	0:0	6	}
water	149:4	0:0	4	}
water	150:4	0:0	2	minq
op	150:9	0:0	2	=
water	150:11	0:0	2	sce
op	150:14	0:0	2	->
water	150:16	0:0	2	sf_idx
op	150:22	0:0	2	[
water	150:23	0:0	2	0
op	150:24	0:0	2	]
water	150:26	0:0	2	?
water	150:28	0:0	2	sce
op	150:31	0:0	2	->
water	150:33	0:0	2	sf_idx
op	150:39	0:0	2	[
water	150:40	0:0	2	0
op	150:41	0:0	2	]
water	150:43	0:0	2	:
water	150:45	0:0	2	INT_MAX
water	150:52	0:0	2	;
for	151:4	156:4	2	(i = 1 ;i < 128;i ++)
forinit	151:9	151:14	3	i = 1 ;
water	151:9	0:0	4	i
op	151:11	0:0	4	=
water	151:13	0:0	4	1
water	151:14	0:0	4	;
cond	151:16	151:20	3	i < 128
water	151:16	0:0	4	i
op	151:18	0:0	4	<
water	151:20	0:0	4	128
forexpr	151:25	151:26	3	i ++
water	151:25	0:0	4	i
op	151:26	0:0	4	++
stmts	151:30	156:4	3	
water	151:30	0:0	4	{
if	152:8	153:45	4	(! sce -> sf_idx [ i ])
cond	152:12	152:26	5	! sce -> sf_idx [ i ]
op	152:12	0:0	6	!
water	152:13	0:0	6	sce
op	152:16	0:0	6	->
water	152:18	0:0	6	sf_idx
op	152:24	0:0	6	[
water	152:25	0:0	6	i
op	152:26	0:0	6	]
stmts	153:12	153:45	5	
water	153:12	0:0	6	sce
op	153:15	0:0	6	->
water	153:17	0:0	6	sf_idx
op	153:23	0:0	6	[
water	153:24	0:0	6	i
op	153:25	0:0	6	]
op	153:27	0:0	6	=
water	153:29	0:0	6	sce
op	153:32	0:0	6	->
water	153:34	0:0	6	sf_idx
op	153:40	0:0	6	[
water	153:41	0:0	6	i
op	153:42	0:0	6	-
water	153:43	0:0	6	1
op	153:44	0:0	6	]
water	153:45	0:0	6	;
else	154:8	155:46	4
stmts	155:12	155:46	5	
water	155:12	0:0	6	minq
op	155:17	0:0	6	=
call	155:19	155:45	6	FFMIN
arg	155:25	155:29	7	minq
water	155:25	0:0	8	minq
arg	155:31	155:45	7	sce->sf_idx[i]
water	155:31	0:0	8	sce
op	155:34	0:0	8	->
water	155:36	0:0	8	sf_idx
op	155:42	0:0	8	[
water	155:43	0:0	8	i
op	155:44	0:0	8	]
water	155:46	0:0	6	;
water	156:4	0:0	4	}
if	157:4	158:16	2	(minq == INT_MAX)
cond	157:8	157:16	3	minq == INT_MAX
water	157:8	0:0	4	minq
op	157:13	0:0	4	==
water	157:16	0:0	4	INT_MAX
stmts	158:8	158:16	3	
water	158:8	0:0	4	minq
op	158:13	0:0	4	=
water	158:15	0:0	4	0
water	158:16	0:0	4	;
water	159:4	0:0	2	minq
op	159:9	0:0	2	=
call	159:11	159:36	2	FFMIN
arg	159:17	159:21	3	minq
water	159:17	0:0	4	minq
arg	159:23	159:36	3	SCALE_MAX_POS
water	159:23	0:0	4	SCALE_MAX_POS
water	159:37	0:0	2	;
water	160:4	0:0	2	maxsf
op	160:10	0:0	2	=
call	160:12	160:54	2	FFMIN
arg	160:18	160:39	3	minq+SCALE_MAX_DIFF
water	160:18	0:0	4	minq
op	160:23	0:0	4	+
water	160:25	0:0	4	SCALE_MAX_DIFF
arg	160:41	160:54	3	SCALE_MAX_POS
water	160:41	0:0	4	SCALE_MAX_POS
water	160:55	0:0	2	;
for	161:4	165:4	2	(i = 126 ;i >= 0;i --)
forinit	161:9	161:16	3	i = 126 ;
water	161:9	0:0	4	i
op	161:11	0:0	4	=
water	161:13	0:0	4	126
water	161:16	0:0	4	;
cond	161:18	161:23	3	i >= 0
water	161:18	0:0	4	i
op	161:20	0:0	4	>=
water	161:23	0:0	4	0
forexpr	161:26	161:27	3	i --
water	161:26	0:0	4	i
op	161:27	0:0	4	--
stmts	161:31	165:4	3	
water	161:31	0:0	4	{
if	162:8	163:45	4	(! sce -> sf_idx [ i ])
cond	162:12	162:26	5	! sce -> sf_idx [ i ]
op	162:12	0:0	6	!
water	162:13	0:0	6	sce
op	162:16	0:0	6	->
water	162:18	0:0	6	sf_idx
op	162:24	0:0	6	[
water	162:25	0:0	6	i
op	162:26	0:0	6	]
stmts	163:12	163:45	5	
water	163:12	0:0	6	sce
op	163:15	0:0	6	->
water	163:17	0:0	6	sf_idx
op	163:23	0:0	6	[
water	163:24	0:0	6	i
op	163:25	0:0	6	]
op	163:27	0:0	6	=
water	163:29	0:0	6	sce
op	163:32	0:0	6	->
water	163:34	0:0	6	sf_idx
op	163:40	0:0	6	[
water	163:41	0:0	6	i
op	163:42	0:0	6	+
water	163:43	0:0	6	1
op	163:44	0:0	6	]
water	163:45	0:0	6	;
water	164:8	0:0	4	sce
op	164:11	0:0	4	->
water	164:13	0:0	4	sf_idx
op	164:19	0:0	4	[
water	164:20	0:0	4	i
op	164:21	0:0	4	]
op	164:23	0:0	4	=
call	164:25	164:60	4	av_clip
arg	164:33	164:47	5	sce->sf_idx[i]
water	164:33	0:0	6	sce
op	164:36	0:0	6	->
water	164:38	0:0	6	sf_idx
op	164:44	0:0	6	[
water	164:45	0:0	6	i
op	164:46	0:0	6	]
arg	164:49	164:53	5	minq
water	164:49	0:0	6	minq
arg	164:55	164:60	5	maxsf
water	164:55	0:0	6	maxsf
water	164:61	0:0	4	;
water	165:4	0:0	4	}
