func	1:0	53:0	0	static void	apply_dependent_coupling_fixed
params	1:42	0:0	1	
param	1:43	1:57	2	AACContext *	ac
param	2:37	2:65	2	SingleChannelElement *	target
param	3:37	3:56	2	ChannelElement *	cce
param	3:58	3:67	2	int	index
stmnts	0:0	52:4	1	
decl	5:4	5:50	2	IndividualChannelStream	*ics
op	5:33	0:0	2	=
op	5:35	0:0	2	&
water	5:36	0:0	2	cce
op	5:39	0:0	2	->
water	5:41	0:0	2	ch
op	5:43	0:0	2	[
water	5:44	0:0	2	0
op	5:45	0:0	2	]
op	5:46	0:0	2	.
water	5:47	0:0	2	ics
decl	6:4	6:45	2	const uint16_t	*offsets
op	6:28	0:0	2	=
water	6:30	0:0	2	ics
op	6:33	0:0	2	->
water	6:35	0:0	2	swb_offset
decl	7:4	7:30	2	int	*dest
op	7:14	0:0	2	=
water	7:16	0:0	2	target
op	7:22	0:0	2	->
water	7:24	0:0	2	coeffs
decl	8:4	8:38	2	const int	*src
op	8:19	0:0	2	=
water	8:21	0:0	2	cce
op	8:24	0:0	2	->
water	8:26	0:0	2	ch
op	8:28	0:0	2	[
water	8:29	0:0	2	0
op	8:30	0:0	2	]
op	8:31	0:0	2	.
water	8:32	0:0	2	coeffs
decl	9:4	9:31	2	int	g
water	9:9	0:0	2	,
decl	9:4	9:31	2	int	i
water	9:12	0:0	2	,
decl	9:4	9:31	2	int	group
water	9:19	0:0	2	,
decl	9:4	9:31	2	int	k
water	9:22	0:0	2	,
decl	9:4	9:31	2	int	idx
op	9:28	0:0	2	=
water	9:30	0:0	2	0
if	10:4	14:4	2	(ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP)
cond	10:8	10:38	3	ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP
water	10:8	0:0	4	ac
op	10:10	0:0	4	->
water	10:12	0:0	4	oc
op	10:14	0:0	4	[
water	10:15	0:0	4	1
op	10:16	0:0	4	]
op	10:17	0:0	4	.
water	10:18	0:0	4	m4ac
op	10:22	0:0	4	.
water	10:23	0:0	4	object_type
op	10:35	0:0	4	==
water	10:38	0:0	4	AOT_AAC_LTP
stmts	10:51	14:4	3	
water	10:51	0:0	4	{
call	11:8	12:72	4	av_log
arg	11:15	11:24	5	ac->avctx
water	11:15	0:0	6	ac
op	11:17	0:0	6	->
water	11:19	0:0	6	avctx
arg	11:26	11:38	5	AV_LOG_ERROR
water	11:26	0:0	6	AV_LOG_ERROR
arg	12:15	12:72	5	"Dependent coupling is not supported together with LTP\n"
water	12:15	0:0	6	"Dependent coupling is not supported together with LTP\n"
water	12:73	0:0	4	;
return	13:8	13:14	4	
water	14:4	0:0	4	}
for	15:4	52:4	2	(g = 0 ;g < ics -> num_window_groups;g ++)
forinit	15:9	15:14	3	g = 0 ;
water	15:9	0:0	4	g
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:25	3	g < ics -> num_window_groups
water	15:16	0:0	4	g
op	15:18	0:0	4	<
water	15:20	0:0	4	ics
op	15:23	0:0	4	->
water	15:25	0:0	4	num_window_groups
forexpr	15:44	15:45	3	g ++
water	15:44	0:0	4	g
op	15:45	0:0	4	++
stmts	15:49	52:4	3	
water	15:49	0:0	4	{
for	16:8	49:8	4	(i = 0 ;i < ics -> max_sfb;i ++ , idx ++)
forinit	16:13	16:18	5	i = 0 ;
water	16:13	0:0	6	i
op	16:15	0:0	6	=
water	16:17	0:0	6	0
water	16:18	0:0	6	;
cond	16:20	16:29	5	i < ics -> max_sfb
water	16:20	0:0	6	i
op	16:22	0:0	6	<
water	16:24	0:0	6	ics
op	16:27	0:0	6	->
water	16:29	0:0	6	max_sfb
forexpr	16:38	16:46	5	i ++ , idx ++
water	16:38	0:0	6	i
op	16:39	0:0	6	++
water	16:41	0:0	6	,
water	16:43	0:0	6	idx
op	16:46	0:0	6	++
stmts	16:50	49:8	5	
water	16:50	0:0	6	{
if	17:12	48:12	6	(cce -> ch [ 0 ] . band_type [ idx ] != ZERO_BT)
cond	17:16	17:45	7	cce -> ch [ 0 ] . band_type [ idx ] != ZERO_BT
water	17:16	0:0	8	cce
op	17:19	0:0	8	->
water	17:21	0:0	8	ch
op	17:23	0:0	8	[
water	17:24	0:0	8	0
op	17:25	0:0	8	]
op	17:26	0:0	8	.
water	17:27	0:0	8	band_type
op	17:36	0:0	8	[
water	17:37	0:0	8	idx
op	17:40	0:0	8	]
op	17:42	0:0	8	!=
water	17:45	0:0	8	ZERO_BT
stmts	17:54	48:12	7	
water	17:54	0:0	8	{
decl	18:16	18:59	8	const int	gain
op	18:31	0:0	8	=
water	18:33	0:0	8	cce
op	18:36	0:0	8	->
water	18:38	0:0	8	coup
op	18:42	0:0	8	.
water	18:43	0:0	8	gain
op	18:47	0:0	8	[
water	18:48	0:0	8	index
op	18:53	0:0	8	]
op	18:54	0:0	8	[
water	18:55	0:0	8	idx
op	18:58	0:0	8	]
decl	19:16	19:40	8	int	shift
water	19:25	0:0	8	,
decl	19:16	19:40	8	int	round
water	19:32	0:0	8	,
decl	19:16	19:40	8	int	c
water	19:35	0:0	8	,
decl	19:16	19:40	8	int	tmp
if	20:16	23:16	8	(gain < 0)
cond	20:20	20:27	9	gain < 0
water	20:20	0:0	10	gain
op	20:25	0:0	10	<
water	20:27	0:0	10	0
stmts	20:30	23:16	9	
water	20:30	0:0	10	{
water	21:20	0:0	10	c
op	21:22	0:0	10	=
op	21:24	0:0	10	-
water	21:25	0:0	10	cce_scale_fixed
op	21:40	0:0	10	[
op	21:41	0:0	10	-
water	21:42	0:0	10	gain
op	21:47	0:0	10	&
water	21:49	0:0	10	7
op	21:50	0:0	10	]
water	21:51	0:0	10	;
water	22:20	0:0	10	shift
op	22:26	0:0	10	=
water	22:28	0:0	10	(
op	22:29	0:0	10	-
water	22:30	0:0	10	gain
op	22:34	0:0	10	-
water	22:35	0:0	10	1024
water	22:39	0:0	10	)
op	22:41	0:0	10	>>
water	22:44	0:0	10	3
water	22:45	0:0	10	;
water	23:16	0:0	10	}
else	24:16	27:16	8
stmts	24:21	27:16	9	
water	24:21	0:0	10	{
water	25:20	0:0	10	c
op	25:22	0:0	10	=
water	25:24	0:0	10	cce_scale_fixed
op	25:39	0:0	10	[
water	25:40	0:0	10	gain
op	25:45	0:0	10	&
water	25:47	0:0	10	7
op	25:48	0:0	10	]
water	25:49	0:0	10	;
water	26:20	0:0	10	shift
op	26:26	0:0	10	=
water	26:28	0:0	10	(
water	26:29	0:0	10	gain
op	26:33	0:0	10	-
water	26:34	0:0	10	1024
water	26:38	0:0	10	)
op	26:40	0:0	10	>>
water	26:43	0:0	10	3
water	26:44	0:0	10	;
water	27:16	0:0	10	}
if	28:16	38:16	8	(shift < 0)
cond	28:20	28:28	9	shift < 0
water	28:20	0:0	10	shift
op	28:26	0:0	10	<
water	28:28	0:0	10	0
stmts	28:31	38:16	9	
water	28:31	0:0	10	{
water	29:20	0:0	10	shift
op	29:26	0:0	10	=
op	29:28	0:0	10	-
water	29:29	0:0	10	shift
water	29:34	0:0	10	;
water	30:20	0:0	10	round
op	30:26	0:0	10	=
water	30:28	0:0	10	1
op	30:30	0:0	10	<<
water	30:33	0:0	10	(
water	30:34	0:0	10	shift
op	30:40	0:0	10	-
water	30:42	0:0	10	1
water	30:43	0:0	10	)
water	30:44	0:0	10	;
for	31:20	37:20	10	(group = 0 ;group < ics -> group_len [ g ];group ++)
forinit	31:25	31:34	11	group = 0 ;
water	31:25	0:0	12	group
op	31:31	0:0	12	=
water	31:33	0:0	12	0
water	31:34	0:0	12	;
cond	31:36	31:60	11	group < ics -> group_len [ g ]
water	31:36	0:0	12	group
op	31:42	0:0	12	<
water	31:44	0:0	12	ics
op	31:47	0:0	12	->
water	31:49	0:0	12	group_len
op	31:58	0:0	12	[
water	31:59	0:0	12	g
op	31:60	0:0	12	]
forexpr	31:63	31:68	11	group ++
water	31:63	0:0	12	group
op	31:68	0:0	12	++
stmts	31:72	37:20	11	
water	31:72	0:0	12	{
for	32:24	36:24	12	(k = offsets [ i ] ;k < offsets [ i + 1 ];k ++)
forinit	32:29	32:43	13	k = offsets [ i ] ;
water	32:29	0:0	14	k
op	32:31	0:0	14	=
water	32:33	0:0	14	offsets
op	32:40	0:0	14	[
water	32:41	0:0	14	i
op	32:42	0:0	14	]
water	32:43	0:0	14	;
cond	32:45	32:62	13	k < offsets [ i + 1 ]
water	32:45	0:0	14	k
op	32:47	0:0	14	<
water	32:49	0:0	14	offsets
op	32:56	0:0	14	[
water	32:57	0:0	14	i
op	32:59	0:0	14	+
water	32:61	0:0	14	1
op	32:62	0:0	14	]
forexpr	32:65	32:66	13	k ++
water	32:65	0:0	14	k
op	32:66	0:0	14	++
stmts	32:70	36:24	13	
water	32:70	0:0	14	{
water	33:28	0:0	14	tmp
op	33:32	0:0	14	=
call	33:34	34:67	14	(int)
arg	33:40	34:67	15	((int64_t)src[group*128+k]*c+(int64_t)0x1000000000)>>37
water	33:40	0:0	16	(
water	33:41	0:0	16	(
water	33:42	0:0	16	int64_t
water	33:49	0:0	16	)
water	33:50	0:0	16	src
op	33:53	0:0	16	[
water	33:54	0:0	16	group
op	33:60	0:0	16	*
water	33:62	0:0	16	128
op	33:66	0:0	16	+
water	33:68	0:0	16	k
op	33:69	0:0	16	]
op	33:71	0:0	16	*
water	33:73	0:0	16	c
op	33:75	0:0	16	+
water	34:39	0:0	16	(
water	34:40	0:0	16	int64_t
water	34:47	0:0	16	)
water	34:48	0:0	16	0
water	34:49	0:0	16	x1000000000
water	34:60	0:0	16	)
op	34:62	0:0	16	>>
water	34:65	0:0	16	37
water	34:68	0:0	14	;
water	35:28	0:0	14	dest
op	35:32	0:0	14	[
water	35:33	0:0	14	group
op	35:39	0:0	14	*
water	35:41	0:0	14	128
op	35:45	0:0	14	+
water	35:47	0:0	14	k
op	35:48	0:0	14	]
op	35:50	0:0	14	+=
water	35:53	0:0	14	(
water	35:54	0:0	14	tmp
op	35:58	0:0	14	+
water	35:60	0:0	14	round
water	35:65	0:0	14	)
op	35:67	0:0	14	>>
water	35:70	0:0	14	shift
water	35:75	0:0	14	;
water	36:24	0:0	14	}
water	37:20	0:0	12	}
water	38:16	0:0	10	}
else	39:16	47:16	8
stmts	39:21	47:16	9	
water	39:21	0:0	10	{
for	40:20	46:20	10	(group = 0 ;group < ics -> group_len [ g ];group ++)
forinit	40:25	40:34	11	group = 0 ;
water	40:25	0:0	12	group
op	40:31	0:0	12	=
water	40:33	0:0	12	0
water	40:34	0:0	12	;
cond	40:36	40:60	11	group < ics -> group_len [ g ]
water	40:36	0:0	12	group
op	40:42	0:0	12	<
water	40:44	0:0	12	ics
op	40:47	0:0	12	->
water	40:49	0:0	12	group_len
op	40:58	0:0	12	[
water	40:59	0:0	12	g
op	40:60	0:0	12	]
forexpr	40:63	40:68	11	group ++
water	40:63	0:0	12	group
op	40:68	0:0	12	++
stmts	40:72	46:20	11	
water	40:72	0:0	12	{
for	41:24	45:24	12	(k = offsets [ i ] ;k < offsets [ i + 1 ];k ++)
forinit	41:29	41:43	13	k = offsets [ i ] ;
water	41:29	0:0	14	k
op	41:31	0:0	14	=
water	41:33	0:0	14	offsets
op	41:40	0:0	14	[
water	41:41	0:0	14	i
op	41:42	0:0	14	]
water	41:43	0:0	14	;
cond	41:45	41:62	13	k < offsets [ i + 1 ]
water	41:45	0:0	14	k
op	41:47	0:0	14	<
water	41:49	0:0	14	offsets
op	41:56	0:0	14	[
water	41:57	0:0	14	i
op	41:59	0:0	14	+
water	41:61	0:0	14	1
op	41:62	0:0	14	]
forexpr	41:65	41:66	13	k ++
water	41:65	0:0	14	k
op	41:66	0:0	14	++
stmts	41:70	45:24	13	
water	41:70	0:0	14	{
water	42:28	0:0	14	tmp
op	42:32	0:0	14	=
call	42:34	43:68	14	(int)
arg	42:40	43:68	15	((int64_t)src[group*128+k]*c+(int64_t)0x1000000000)>>37
water	42:40	0:0	16	(
water	42:41	0:0	16	(
water	42:42	0:0	16	int64_t
water	42:49	0:0	16	)
water	42:50	0:0	16	src
op	42:53	0:0	16	[
water	42:54	0:0	16	group
op	42:60	0:0	16	*
water	42:62	0:0	16	128
op	42:66	0:0	16	+
water	42:68	0:0	16	k
op	42:69	0:0	16	]
op	42:71	0:0	16	*
water	42:73	0:0	16	c
op	42:75	0:0	16	+
water	43:40	0:0	16	(
water	43:41	0:0	16	int64_t
water	43:48	0:0	16	)
water	43:49	0:0	16	0
water	43:50	0:0	16	x1000000000
water	43:61	0:0	16	)
op	43:63	0:0	16	>>
water	43:66	0:0	16	37
water	43:69	0:0	14	;
water	44:28	0:0	14	dest
op	44:32	0:0	14	[
water	44:33	0:0	14	group
op	44:39	0:0	14	*
water	44:41	0:0	14	128
op	44:45	0:0	14	+
water	44:47	0:0	14	k
op	44:48	0:0	14	]
op	44:50	0:0	14	+=
water	44:53	0:0	14	tmp
op	44:57	0:0	14	<<
water	44:60	0:0	14	shift
water	44:65	0:0	14	;
water	45:24	0:0	14	}
water	46:20	0:0	12	}
water	47:16	0:0	10	}
water	48:12	0:0	8	}
water	49:8	0:0	6	}
water	50:8	0:0	4	dest
op	50:13	0:0	4	+=
water	50:16	0:0	4	ics
op	50:19	0:0	4	->
water	50:21	0:0	4	group_len
op	50:30	0:0	4	[
water	50:31	0:0	4	g
op	50:32	0:0	4	]
op	50:34	0:0	4	*
water	50:36	0:0	4	128
water	50:39	0:0	4	;
water	51:8	0:0	4	src
op	51:13	0:0	4	+=
water	51:16	0:0	4	ics
op	51:19	0:0	4	->
water	51:21	0:0	4	group_len
op	51:30	0:0	4	[
water	51:31	0:0	4	g
op	51:32	0:0	4	]
op	51:34	0:0	4	*
water	51:36	0:0	4	128
water	51:39	0:0	4	;
water	52:4	0:0	4	}
