func	1:0	31:0	0	static inline int	check_codec_match
params	2:21	0:0	1	
param	2:22	2:42	2	LayeredAVStream *	ccf
param	2:44	2:57	2	AVStream *	ccs
param	2:59	2:69	2	int	stream
stmnts	0:0	30:18	1	
decl	4:4	4:19	2	int	matches
op	4:16	0:0	2	=
water	4:18	0:0	2	1
if	7:4	10:4	2	(CHECK_CODEC (codec_id ) ||CHECK_CODEC (codec_type ))
cond	7:8	7:55	3	CHECK_CODEC (codec_id ) ||CHECK_CODEC (codec_type )
call	7:8	7:28	4	CHECK_CODEC
arg	7:20	7:28	5	codec_id
water	7:20	0:0	6	codec_id
op	7:30	0:0	4	||
call	7:33	7:55	4	CHECK_CODEC
arg	7:45	7:55	5	codec_type
water	7:45	0:0	6	codec_type
stmts	7:58	10:4	3	
water	7:58	0:0	4	{
call	8:8	8:62	4	http_log
arg	8:17	8:54	5	"Codecs do not match for stream %d\n"
water	8:17	0:0	6	"Codecs do not match for stream %d\n"
arg	8:56	8:62	5	stream
water	8:56	0:0	6	stream
water	8:63	0:0	4	;
water	9:8	0:0	4	matches
op	9:16	0:0	4	=
water	9:18	0:0	4	0
water	9:19	0:0	4	;
water	10:4	0:0	4	}
else	10:6	13:4	2
stmts	10:11	13:4	3	
if	10:11	13:4	4	(CHECK_CODEC (bit_rate ))
cond	10:15	10:35	5	CHECK_CODEC (bit_rate )
call	10:15	10:35	6	CHECK_CODEC
arg	10:27	10:35	7	bit_rate
water	10:27	0:0	8	bit_rate
stmts	10:38	13:4	5	
water	10:38	0:0	6	{
call	11:8	11:70	6	http_log
arg	11:17	11:62	7	"Codec bitrates do not match for stream %d\n"
water	11:17	0:0	8	"Codec bitrates do not match for stream %d\n"
arg	11:64	11:70	7	stream
water	11:64	0:0	8	stream
water	11:71	0:0	6	;
water	12:8	0:0	6	matches
op	12:16	0:0	6	=
water	12:18	0:0	6	0
water	12:19	0:0	6	;
water	13:4	0:0	6	}
else	13:6	19:4	2
stmts	13:11	19:4	3	
if	13:11	19:4	4	(ccf -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	13:15	13:44	5	ccf -> codecpar -> codec_type == AVMEDIA_TYPE_VIDEO
water	13:15	0:0	6	ccf
op	13:18	0:0	6	->
water	13:20	0:0	6	codecpar
op	13:28	0:0	6	->
water	13:30	0:0	6	codec_type
op	13:41	0:0	6	==
water	13:44	0:0	6	AVMEDIA_TYPE_VIDEO
stmts	13:64	19:4	5	
water	13:64	0:0	6	{
if	14:8	18:8	6	(av_cmp_q (ccf -> time_base ,ccs -> time_base ) ||CHECK_CODEC (width ) ||CHECK_CODEC (height ))
cond	14:12	15:52	7	av_cmp_q (ccf -> time_base ,ccs -> time_base ) ||CHECK_CODEC (width ) ||CHECK_CODEC (height )
call	14:12	14:51	8	av_cmp_q
arg	14:21	14:35	9	ccf->time_base
water	14:21	0:0	10	ccf
op	14:24	0:0	10	->
water	14:26	0:0	10	time_base
arg	14:37	14:51	9	ccs->time_base
water	14:37	0:0	10	ccs
op	14:40	0:0	10	->
water	14:42	0:0	10	time_base
op	14:53	0:0	8	||
call	15:12	15:29	8	CHECK_CODEC
arg	15:24	15:29	9	width
water	15:24	0:0	10	width
op	15:31	0:0	8	||
call	15:34	15:52	8	CHECK_CODEC
arg	15:46	15:52	9	height
water	15:46	0:0	10	height
stmts	15:55	18:8	7	
water	15:55	0:0	8	{
call	16:12	16:92	8	http_log
arg	16:21	16:84	9	"Codec width, height or framerate do not match for stream %d\n"
water	16:21	0:0	10	"Codec width, height or framerate do not match for stream %d\n"
arg	16:86	16:92	9	stream
water	16:86	0:0	10	stream
water	16:93	0:0	8	;
water	17:12	0:0	8	matches
op	17:20	0:0	8	=
water	17:22	0:0	8	0
water	17:23	0:0	8	;
water	18:8	0:0	8	}
water	19:4	0:0	6	}
else	19:6	26:4	2
stmts	19:11	26:4	3	
if	19:11	26:4	4	(ccf -> codecpar -> codec_type == AVMEDIA_TYPE_AUDIO)
cond	19:15	19:44	5	ccf -> codecpar -> codec_type == AVMEDIA_TYPE_AUDIO
water	19:15	0:0	6	ccf
op	19:18	0:0	6	->
water	19:20	0:0	6	codecpar
op	19:28	0:0	6	->
water	19:30	0:0	6	codec_type
op	19:41	0:0	6	==
water	19:44	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	19:64	26:4	5	
water	19:64	0:0	6	{
if	20:8	25:8	6	(CHECK_CODEC (sample_rate ) ||CHECK_CODEC (channels ) ||CHECK_CODEC (frame_size ))
cond	20:12	22:34	7	CHECK_CODEC (sample_rate ) ||CHECK_CODEC (channels ) ||CHECK_CODEC (frame_size )
call	20:12	20:35	8	CHECK_CODEC
arg	20:24	20:35	9	sample_rate
water	20:24	0:0	10	sample_rate
op	20:37	0:0	8	||
call	21:12	21:32	8	CHECK_CODEC
arg	21:24	21:32	9	channels
water	21:24	0:0	10	channels
op	21:34	0:0	8	||
call	22:12	22:34	8	CHECK_CODEC
arg	22:24	22:34	9	frame_size
water	22:24	0:0	10	frame_size
stmts	22:37	25:8	7	
water	22:37	0:0	8	{
call	23:12	23:99	8	http_log
arg	23:21	23:91	9	"Codec sample_rate, channels, frame_size do not match for stream %d\n"
water	23:21	0:0	10	"Codec sample_rate, channels, frame_size do not match for stream %d\n"
arg	23:93	23:99	9	stream
water	23:93	0:0	10	stream
water	23:100	0:0	8	;
water	24:12	0:0	8	matches
op	24:20	0:0	8	=
water	24:22	0:0	8	0
water	24:23	0:0	8	;
water	25:8	0:0	8	}
water	26:4	0:0	6	}
else	26:6	29:4	2
stmts	26:11	29:4	3	
water	26:11	0:0	4	{
call	27:8	27:61	4	http_log
arg	27:17	27:53	5	"Unknown codec type for stream %d\n"
water	27:17	0:0	6	"Unknown codec type for stream %d\n"
arg	27:55	27:61	5	stream
water	27:55	0:0	6	stream
water	27:62	0:0	4	;
water	28:8	0:0	4	matches
op	28:16	0:0	4	=
water	28:18	0:0	4	0
water	28:19	0:0	4	;
water	29:4	0:0	4	}
return	30:4	30:18	2	matches
water	30:11	0:0	3	matches
