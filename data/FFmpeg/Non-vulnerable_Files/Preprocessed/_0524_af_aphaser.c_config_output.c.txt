func	2:0	32:0	0	static int	config_output
params	2:24	0:0	1	
param	2:25	2:46	2	AVFilterLink *	outlink
stmnts	0:0	31:12	1	
decl	4:4	4:46	2	AudioPhaserContext	*s
op	4:26	0:0	2	=
water	4:28	0:0	2	outlink
op	4:35	0:0	2	->
water	4:37	0:0	2	src
op	4:40	0:0	2	->
water	4:42	0:0	2	priv
decl	5:4	5:50	2	AVFilterLink	*inlink
op	5:25	0:0	2	=
water	5:27	0:0	2	outlink
op	5:34	0:0	2	->
water	5:36	0:0	2	src
op	5:39	0:0	2	->
water	5:41	0:0	2	inputs
op	5:47	0:0	2	[
water	5:48	0:0	2	0
op	5:49	0:0	2	]
water	6:4	0:0	2	s
op	6:5	0:0	2	->
water	6:7	0:0	2	delay_buffer_length
op	6:27	0:0	2	=
water	6:29	0:0	2	s
op	6:30	0:0	2	->
water	6:32	0:0	2	delay
op	6:38	0:0	2	*
water	6:40	0:0	2	0
op	6:41	0:0	2	.
water	6:42	0:0	2	001
op	6:46	0:0	2	*
water	6:48	0:0	2	inlink
op	6:54	0:0	2	->
water	6:56	0:0	2	sample_rate
op	6:68	0:0	2	+
water	6:70	0:0	2	0
op	6:71	0:0	2	.
water	6:72	0:0	2	5
water	6:73	0:0	2	;
if	7:4	10:4	2	(s -> delay_buffer_length <= 0)
cond	7:8	7:34	3	s -> delay_buffer_length <= 0
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	delay_buffer_length
op	7:31	0:0	4	<=
water	7:34	0:0	4	0
stmts	7:37	10:4	3	
water	7:37	0:0	4	{
call	8:8	8:65	4	av_log
arg	8:15	8:27	5	outlink->src
water	8:15	0:0	6	outlink
op	8:22	0:0	6	->
water	8:24	0:0	6	src
arg	8:29	8:41	5	AV_LOG_ERROR
water	8:29	0:0	6	AV_LOG_ERROR
arg	8:43	8:65	5	"delay is too small\n"
water	8:43	0:0	6	"delay is too small\n"
water	8:66	0:0	4	;
return	9:8	9:30	4	AVERROR(EINVAL)
call	9:15	9:29	5	AVERROR
arg	9:23	9:29	6	EINVAL
water	9:23	0:0	7	EINVAL
water	10:4	0:0	4	}
water	11:4	0:0	2	s
op	11:5	0:0	2	->
water	11:7	0:0	2	delay_buffer
op	11:20	0:0	2	=
call	11:22	11:99	2	av_calloc
arg	11:32	11:54	3	s->delay_buffer_length
water	11:32	0:0	4	s
op	11:33	0:0	4	->
water	11:35	0:0	4	delay_buffer_length
arg	11:56	11:99	3	sizeof(*s->delay_buffer)*inlink->channels
op	11:56	0:0	4	sizeof
water	11:62	0:0	4	(
op	11:63	0:0	4	*
water	11:64	0:0	4	s
op	11:65	0:0	4	->
water	11:67	0:0	4	delay_buffer
water	11:79	0:0	4	)
op	11:81	0:0	4	*
water	11:83	0:0	4	inlink
op	11:89	0:0	4	->
water	11:91	0:0	4	channels
water	11:100	0:0	2	;
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	modulation_buffer_length
op	12:32	0:0	2	=
water	12:34	0:0	2	inlink
op	12:40	0:0	2	->
water	12:42	0:0	2	sample_rate
op	12:54	0:0	2	/
water	12:56	0:0	2	s
op	12:57	0:0	2	->
water	12:59	0:0	2	speed
op	12:65	0:0	2	+
water	12:67	0:0	2	0
op	12:68	0:0	2	.
water	12:69	0:0	2	5
water	12:70	0:0	2	;
water	13:4	0:0	2	s
op	13:5	0:0	2	->
water	13:7	0:0	2	modulation_buffer
op	13:25	0:0	2	=
call	13:27	13:101	2	av_malloc_array
arg	13:43	13:70	3	s->modulation_buffer_length
water	13:43	0:0	4	s
op	13:44	0:0	4	->
water	13:46	0:0	4	modulation_buffer_length
arg	13:72	13:101	3	sizeof(*s->modulation_buffer)
op	13:72	0:0	4	sizeof
water	13:78	0:0	4	(
op	13:79	0:0	4	*
water	13:80	0:0	4	s
op	13:81	0:0	4	->
water	13:83	0:0	4	modulation_buffer
water	13:100	0:0	4	)
water	13:102	0:0	2	;
if	14:4	15:30	2	(! s -> modulation_buffer || ! s -> delay_buffer)
cond	14:8	14:37	3	! s -> modulation_buffer || ! s -> delay_buffer
op	14:8	0:0	4	!
water	14:9	0:0	4	s
op	14:10	0:0	4	->
water	14:12	0:0	4	modulation_buffer
op	14:30	0:0	4	||
op	14:33	0:0	4	!
water	14:34	0:0	4	s
op	14:35	0:0	4	->
water	14:37	0:0	4	delay_buffer
stmts	15:8	15:30	3	
return	15:8	15:30	4	AVERROR(ENOMEM)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	ENOMEM
water	15:23	0:0	7	ENOMEM
call	16:4	18:65	2	ff_generate_wave_table
arg	16:27	16:34	3	s->type
water	16:27	0:0	4	s
op	16:28	0:0	4	->
water	16:30	0:0	4	type
arg	16:36	16:53	3	AV_SAMPLE_FMT_S32
water	16:36	0:0	4	AV_SAMPLE_FMT_S32
arg	17:27	17:47	3	s->modulation_buffer
water	17:27	0:0	4	s
op	17:28	0:0	4	->
water	17:30	0:0	4	modulation_buffer
arg	17:49	17:76	3	s->modulation_buffer_length
water	17:49	0:0	4	s
op	17:50	0:0	4	->
water	17:52	0:0	4	modulation_buffer_length
arg	18:27	18:29	3	1.
water	18:27	0:0	4	1
op	18:28	0:0	4	.
arg	18:31	18:53	3	s->delay_buffer_length
water	18:31	0:0	4	s
op	18:32	0:0	4	->
water	18:34	0:0	4	delay_buffer_length
arg	18:55	18:65	3	M_PI/2.0
water	18:55	0:0	4	M_PI
op	18:60	0:0	4	/
water	18:62	0:0	4	2
op	18:63	0:0	4	.
water	18:64	0:0	4	0
water	18:66	0:0	2	;
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	delay_pos
op	19:17	0:0	2	=
water	19:19	0:0	2	s
op	19:20	0:0	2	->
water	19:22	0:0	2	modulation_pos
op	19:37	0:0	2	=
water	19:39	0:0	2	0
water	19:40	0:0	2	;
switch	20:4	30:4	2	(inlink -> format)
cond	20:12	20:20	3	inlink -> format
water	20:12	0:0	4	inlink
op	20:18	0:0	4	->
water	20:20	0:0	4	format
stmts	20:28	30:4	3	
water	20:28	0:0	4	{
label	21:4	21:26	4	case AV_SAMPLE_FMT_DBL :
water	21:29	0:0	4	s
op	21:30	0:0	4	->
water	21:32	0:0	4	phaser
op	21:39	0:0	4	=
water	21:41	0:0	4	phaser_dbl
water	21:51	0:0	4	;
break	21:54	21:59	4	
label	22:4	22:27	4	case AV_SAMPLE_FMT_DBLP :
water	22:29	0:0	4	s
op	22:30	0:0	4	->
water	22:32	0:0	4	phaser
op	22:39	0:0	4	=
water	22:41	0:0	4	phaser_dblp
water	22:52	0:0	4	;
break	22:54	22:59	4	
label	23:4	23:26	4	case AV_SAMPLE_FMT_FLT :
water	23:29	0:0	4	s
op	23:30	0:0	4	->
water	23:32	0:0	4	phaser
op	23:39	0:0	4	=
water	23:41	0:0	4	phaser_flt
water	23:51	0:0	4	;
break	23:54	23:59	4	
label	24:4	24:27	4	case AV_SAMPLE_FMT_FLTP :
water	24:29	0:0	4	s
op	24:30	0:0	4	->
water	24:32	0:0	4	phaser
op	24:39	0:0	4	=
water	24:41	0:0	4	phaser_fltp
water	24:52	0:0	4	;
break	24:54	24:59	4	
label	25:4	25:26	4	case AV_SAMPLE_FMT_S16 :
water	25:29	0:0	4	s
op	25:30	0:0	4	->
water	25:32	0:0	4	phaser
op	25:39	0:0	4	=
water	25:41	0:0	4	phaser_s16
water	25:51	0:0	4	;
break	25:54	25:59	4	
label	26:4	26:27	4	case AV_SAMPLE_FMT_S16P :
water	26:29	0:0	4	s
op	26:30	0:0	4	->
water	26:32	0:0	4	phaser
op	26:39	0:0	4	=
water	26:41	0:0	4	phaser_s16p
water	26:52	0:0	4	;
break	26:54	26:59	4	
label	27:4	27:26	4	case AV_SAMPLE_FMT_S32 :
water	27:29	0:0	4	s
op	27:30	0:0	4	->
water	27:32	0:0	4	phaser
op	27:39	0:0	4	=
water	27:41	0:0	4	phaser_s32
water	27:51	0:0	4	;
break	27:54	27:59	4	
label	28:4	28:27	4	case AV_SAMPLE_FMT_S32P :
water	28:29	0:0	4	s
op	28:30	0:0	4	->
water	28:32	0:0	4	phaser
op	28:39	0:0	4	=
water	28:41	0:0	4	phaser_s32p
water	28:52	0:0	4	;
break	28:54	28:59	4	
label	29:4	29:11	4	default :
call	29:13	29:25	4	av_assert0
arg	29:24	29:25	5	0
water	29:24	0:0	6	0
water	29:26	0:0	4	;
water	30:4	0:0	4	}
return	31:4	31:12	2	0
water	31:11	0:0	3	0
