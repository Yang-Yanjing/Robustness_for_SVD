func	1:0	28:0	0	static int	config_output
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	27:12	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:32	2	AMergeContext	*s
op	4:21	0:0	2	=
water	4:23	0:0	2	ctx
op	4:26	0:0	2	->
water	4:28	0:0	2	priv
decl	5:4	5:15	2	AVBPrint	bp
decl	6:4	6:9	2	int	i
for	7:4	15:4	2	(i = 1 ;i < s -> nb_inputs;i ++)
forinit	7:9	7:14	3	i = 1 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	1
water	7:14	0:0	4	;
cond	7:16	7:23	3	i < s -> nb_inputs
water	7:16	0:0	4	i
op	7:18	0:0	4	<
water	7:20	0:0	4	s
op	7:21	0:0	4	->
water	7:23	0:0	4	nb_inputs
forexpr	7:34	7:35	3	i ++
water	7:34	0:0	4	i
op	7:35	0:0	4	++
stmts	7:39	15:4	3	
water	7:39	0:0	4	{
if	8:8	14:8	4	(ctx -> inputs [ i ] -> sample_rate != ctx -> inputs [ 0 ] -> sample_rate)
cond	8:12	8:59	5	ctx -> inputs [ i ] -> sample_rate != ctx -> inputs [ 0 ] -> sample_rate
water	8:12	0:0	6	ctx
op	8:15	0:0	6	->
water	8:17	0:0	6	inputs
op	8:23	0:0	6	[
water	8:24	0:0	6	i
op	8:25	0:0	6	]
op	8:26	0:0	6	->
water	8:28	0:0	6	sample_rate
op	8:40	0:0	6	!=
water	8:43	0:0	6	ctx
op	8:46	0:0	6	->
water	8:48	0:0	6	inputs
op	8:54	0:0	6	[
water	8:55	0:0	6	0
op	8:56	0:0	6	]
op	8:57	0:0	6	->
water	8:59	0:0	6	sample_rate
stmts	8:72	14:8	5	
water	8:72	0:0	6	{
call	9:12	12:78	6	av_log
arg	9:19	9:22	7	ctx
water	9:19	0:0	8	ctx
arg	9:24	9:36	7	AV_LOG_ERROR
water	9:24	0:0	8	AV_LOG_ERROR
arg	10:19	11:40	7	"Inputs must have the same sample rate ""%d for in%d vs %d\n"
water	10:19	0:0	8	"Inputs must have the same sample rate "
water	11:19	0:0	8	"%d for in%d vs %d\n"
arg	12:19	12:46	7	ctx->inputs[i]->sample_rate
water	12:19	0:0	8	ctx
op	12:22	0:0	8	->
water	12:24	0:0	8	inputs
op	12:30	0:0	8	[
water	12:31	0:0	8	i
op	12:32	0:0	8	]
op	12:33	0:0	8	->
water	12:35	0:0	8	sample_rate
arg	12:48	12:49	7	i
water	12:48	0:0	8	i
arg	12:51	12:78	7	ctx->inputs[0]->sample_rate
water	12:51	0:0	8	ctx
op	12:54	0:0	8	->
water	12:56	0:0	8	inputs
op	12:62	0:0	8	[
water	12:63	0:0	8	0
op	12:64	0:0	8	]
op	12:65	0:0	8	->
water	12:67	0:0	8	sample_rate
water	12:79	0:0	6	;
return	13:12	13:34	6	AVERROR(EINVAL)
call	13:19	13:33	7	AVERROR
arg	13:27	13:33	8	EINVAL
water	13:27	0:0	9	EINVAL
water	14:8	0:0	6	}
water	15:4	0:0	4	}
water	16:4	0:0	2	s
op	16:5	0:0	2	->
water	16:7	0:0	2	bps
op	16:11	0:0	2	=
call	16:13	16:60	2	av_get_bytes_per_sample
arg	16:37	16:60	3	ctx->outputs[0]->format
water	16:37	0:0	4	ctx
op	16:40	0:0	4	->
water	16:42	0:0	4	outputs
op	16:49	0:0	4	[
water	16:50	0:0	4	0
op	16:51	0:0	4	]
op	16:52	0:0	4	->
water	16:54	0:0	4	format
water	16:61	0:0	2	;
water	17:4	0:0	2	outlink
op	17:11	0:0	2	->
water	17:13	0:0	2	sample_rate
op	17:25	0:0	2	=
water	17:27	0:0	2	ctx
op	17:30	0:0	2	->
water	17:32	0:0	2	inputs
op	17:38	0:0	2	[
water	17:39	0:0	2	0
op	17:40	0:0	2	]
op	17:41	0:0	2	->
water	17:43	0:0	2	sample_rate
water	17:54	0:0	2	;
water	18:4	0:0	2	outlink
op	18:11	0:0	2	->
water	18:13	0:0	2	time_base
op	18:25	0:0	2	=
water	18:27	0:0	2	ctx
op	18:30	0:0	2	->
water	18:32	0:0	2	inputs
op	18:38	0:0	2	[
water	18:39	0:0	2	0
op	18:40	0:0	2	]
op	18:41	0:0	2	->
water	18:43	0:0	2	time_base
water	18:52	0:0	2	;
call	19:4	19:28	2	av_bprint_init
arg	19:19	19:22	3	&bp
op	19:19	0:0	4	&
water	19:20	0:0	4	bp
arg	19:24	19:25	3	0
water	19:24	0:0	4	0
arg	19:27	19:28	3	1
water	19:27	0:0	4	1
water	19:29	0:0	2	;
for	20:4	23:4	2	(i = 0 ;i < s -> nb_inputs;i ++)
forinit	20:9	20:14	3	i = 0 ;
water	20:9	0:0	4	i
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:23	3	i < s -> nb_inputs
water	20:16	0:0	4	i
op	20:18	0:0	4	<
water	20:20	0:0	4	s
op	20:21	0:0	4	->
water	20:23	0:0	4	nb_inputs
forexpr	20:34	20:35	3	i ++
water	20:34	0:0	4	i
op	20:35	0:0	4	++
stmts	20:39	23:4	3	
water	20:39	0:0	4	{
call	21:8	21:52	4	av_bprintf
arg	21:19	21:22	5	&bp
op	21:19	0:0	6	&
water	21:20	0:0	6	bp
arg	21:24	21:33	5	"%sin%d:"
water	21:24	0:0	6	"%sin%d:"
arg	21:35	21:49	5	i?" + ":""
water	21:35	0:0	6	i
water	21:37	0:0	6	?
water	21:39	0:0	6	" + "
water	21:45	0:0	6	:
water	21:47	0:0	6	""
arg	21:51	21:52	5	i
water	21:51	0:0	6	i
water	21:53	0:0	4	;
call	22:8	22:72	4	av_bprint_channel_layout
arg	22:33	22:36	5	&bp
op	22:33	0:0	6	&
water	22:34	0:0	6	bp
arg	22:38	22:40	5	-1
op	22:38	0:0	6	-
water	22:39	0:0	6	1
arg	22:42	22:72	5	ctx->inputs[i]->channel_layout
water	22:42	0:0	6	ctx
op	22:45	0:0	6	->
water	22:47	0:0	6	inputs
op	22:53	0:0	6	[
water	22:54	0:0	6	i
op	22:55	0:0	6	]
op	22:56	0:0	6	->
water	22:58	0:0	6	channel_layout
water	22:73	0:0	4	;
water	23:4	0:0	4	}
call	24:4	24:30	2	av_bprintf
arg	24:15	24:18	3	&bp
op	24:15	0:0	4	&
water	24:16	0:0	4	bp
arg	24:20	24:30	3	" -> out:"
water	24:20	0:0	4	" -> out:"
water	24:31	0:0	2	;
call	25:4	25:69	2	av_bprint_channel_layout
arg	25:29	25:32	3	&bp
op	25:29	0:0	4	&
water	25:30	0:0	4	bp
arg	25:34	25:36	3	-1
op	25:34	0:0	4	-
water	25:35	0:0	4	1
arg	25:38	25:69	3	ctx->outputs[0]->channel_layout
water	25:38	0:0	4	ctx
op	25:41	0:0	4	->
water	25:43	0:0	4	outputs
op	25:50	0:0	4	[
water	25:51	0:0	4	0
op	25:52	0:0	4	]
op	25:53	0:0	4	->
water	25:55	0:0	4	channel_layout
water	25:70	0:0	2	;
call	26:4	26:46	2	av_log
arg	26:11	26:14	3	ctx
water	26:11	0:0	4	ctx
arg	26:16	26:30	3	AV_LOG_VERBOSE
water	26:16	0:0	4	AV_LOG_VERBOSE
arg	26:32	26:38	3	"%s\n"
water	26:32	0:0	4	"%s\n"
arg	26:40	26:46	3	bp.str
water	26:40	0:0	4	bp
op	26:42	0:0	4	.
water	26:43	0:0	4	str
water	26:47	0:0	2	;
return	27:4	27:12	2	0
water	27:11	0:0	3	0
