func	1:0	66:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	65:11	1	
decl	3:4	3:11	2	int	ret
decl	4:4	4:19	2	AVPacket	packet
decl	5:4	5:37	2	AVFrame	*frame
op	5:19	0:0	2	=
call	5:21	5:36	3	av_frame_alloc
decl	6:4	6:42	2	AVFrame	*filt_frame
op	6:24	0:0	2	=
call	6:26	6:41	3	av_frame_alloc
decl	7:4	7:17	2	int	got_frame
if	8:4	11:4	2	(! frame || ! filt_frame)
cond	8:8	8:19	3	! frame || ! filt_frame
op	8:8	0:0	4	!
water	8:9	0:0	4	frame
op	8:15	0:0	4	||
op	8:18	0:0	4	!
water	8:19	0:0	4	filt_frame
stmts	8:31	11:4	3	
water	8:31	0:0	4	{
call	9:8	9:41	4	perror
arg	9:15	9:41	5	"Could not allocate frame"
water	9:15	0:0	6	"Could not allocate frame"
water	9:42	0:0	4	;
call	10:8	10:14	4	exit
arg	10:13	10:14	5	1
water	10:13	0:0	6	1
water	10:15	0:0	4	;
water	11:4	0:0	4	}
if	12:4	15:4	2	(argc != 2)
cond	12:8	12:16	3	argc != 2
water	12:8	0:0	4	argc
op	12:13	0:0	4	!=
water	12:16	0:0	4	2
stmts	12:19	15:4	3	
water	12:19	0:0	4	{
call	13:8	13:51	4	fprintf
arg	13:16	13:22	5	stderr
water	13:16	0:0	6	stderr
arg	13:24	13:42	5	"Usage: %s file\n"
water	13:24	0:0	6	"Usage: %s file\n"
arg	13:44	13:51	5	argv[0]
water	13:44	0:0	6	argv
op	13:48	0:0	6	[
water	13:49	0:0	6	0
op	13:50	0:0	6	]
water	13:52	0:0	4	;
call	14:8	14:14	4	exit
arg	14:13	14:14	5	1
water	14:13	0:0	6	1
water	14:15	0:0	4	;
water	15:4	0:0	4	}
call	16:4	16:20	2	av_register_all
water	16:21	0:0	2	;
call	17:4	17:26	2	avfilter_register_all
water	17:27	0:0	2	;
if	18:4	19:16	2	(( ret =open_input_file (argv [ 1 ] ) ) < 0)
cond	18:8	18:43	3	( ret =open_input_file (argv [ 1 ] ) ) < 0
water	18:8	0:0	4	(
water	18:9	0:0	4	ret
op	18:13	0:0	4	=
call	18:15	18:38	4	open_input_file
arg	18:31	18:38	5	argv[1]
water	18:31	0:0	6	argv
op	18:35	0:0	6	[
water	18:36	0:0	6	1
op	18:37	0:0	6	]
water	18:39	0:0	4	)
op	18:41	0:0	4	<
water	18:43	0:0	4	0
stmts	19:8	19:16	3	
goto	19:8	19:16	4	end
water	19:13	0:0	5	end
if	20:4	21:16	2	(( ret =init_filters (filter_descr ) ) < 0)
cond	20:8	20:45	3	( ret =init_filters (filter_descr ) ) < 0
water	20:8	0:0	4	(
water	20:9	0:0	4	ret
op	20:13	0:0	4	=
call	20:15	20:40	4	init_filters
arg	20:28	20:40	5	filter_descr
water	20:28	0:0	6	filter_descr
water	20:41	0:0	4	)
op	20:43	0:0	4	<
water	20:45	0:0	4	0
stmts	21:8	21:16	3	
goto	21:8	21:16	4	end
water	21:13	0:0	5	end
while	23:4	54:4	2	(1)
cond	23:11	23:11	3	1
water	23:11	0:0	4	1
stmts	23:14	54:4	3	
water	23:14	0:0	4	{
if	24:8	25:17	4	(( ret =av_read_frame (fmt_ctx ,& packet ) ) < 0)
cond	24:12	24:54	5	( ret =av_read_frame (fmt_ctx ,& packet ) ) < 0
water	24:12	0:0	6	(
water	24:13	0:0	6	ret
op	24:17	0:0	6	=
call	24:19	24:49	6	av_read_frame
arg	24:33	24:40	7	fmt_ctx
water	24:33	0:0	8	fmt_ctx
arg	24:42	24:49	7	&packet
op	24:42	0:0	8	&
water	24:43	0:0	8	packet
water	24:50	0:0	6	)
op	24:52	0:0	6	<
water	24:54	0:0	6	0
stmts	25:12	25:17	5	
break	25:12	25:17	6	
if	26:8	52:8	4	(packet . stream_index == video_stream_index)
cond	26:12	26:35	5	packet . stream_index == video_stream_index
water	26:12	0:0	6	packet
op	26:18	0:0	6	.
water	26:19	0:0	6	stream_index
op	26:32	0:0	6	==
water	26:35	0:0	6	video_stream_index
stmts	26:55	52:8	5	
water	26:55	0:0	6	{
water	27:12	0:0	6	got_frame
op	27:22	0:0	6	=
water	27:24	0:0	6	0
water	27:25	0:0	6	;
water	28:12	0:0	6	ret
op	28:16	0:0	6	=
call	28:18	28:75	6	avcodec_decode_video2
arg	28:40	28:47	7	dec_ctx
water	28:40	0:0	8	dec_ctx
arg	28:49	28:54	7	frame
water	28:49	0:0	8	frame
arg	28:56	28:66	7	&got_frame
op	28:56	0:0	8	&
water	28:57	0:0	8	got_frame
arg	28:68	28:75	7	&packet
op	28:68	0:0	8	&
water	28:69	0:0	8	packet
water	28:76	0:0	6	;
if	29:12	32:12	6	(ret < 0)
cond	29:16	29:22	7	ret < 0
water	29:16	0:0	8	ret
op	29:20	0:0	8	<
water	29:22	0:0	8	0
stmts	29:25	32:12	7	
water	29:25	0:0	8	{
call	30:16	30:67	8	av_log
arg	30:23	30:27	9	NULL
water	30:23	0:0	10	NULL
arg	30:29	30:41	9	AV_LOG_ERROR
water	30:29	0:0	10	AV_LOG_ERROR
arg	30:43	30:67	9	"Error decoding video\n"
water	30:43	0:0	10	"Error decoding video\n"
water	30:68	0:0	8	;
break	31:16	31:21	8	
water	32:12	0:0	8	}
if	33:12	51:12	6	(got_frame)
cond	33:16	33:16	7	got_frame
water	33:16	0:0	8	got_frame
stmts	33:27	51:12	7	
water	33:27	0:0	8	{
water	34:16	0:0	8	frame
op	34:21	0:0	8	->
water	34:23	0:0	8	pts
op	34:27	0:0	8	=
call	34:29	34:69	8	av_frame_get_best_effort_timestamp
arg	34:64	34:69	9	frame
water	34:64	0:0	10	frame
water	34:70	0:0	8	;
if	36:16	39:16	8	(av_buffersrc_add_frame_flags (buffersrc_ctx ,frame ,AV_BUFFERSRC_FLAG_KEEP_REF ) < 0)
cond	36:20	36:101	9	av_buffersrc_add_frame_flags (buffersrc_ctx ,frame ,AV_BUFFERSRC_FLAG_KEEP_REF ) < 0
call	36:20	36:97	10	av_buffersrc_add_frame_flags
arg	36:49	36:62	11	buffersrc_ctx
water	36:49	0:0	12	buffersrc_ctx
arg	36:64	36:69	11	frame
water	36:64	0:0	12	frame
arg	36:71	36:97	11	AV_BUFFERSRC_FLAG_KEEP_REF
water	36:71	0:0	12	AV_BUFFERSRC_FLAG_KEEP_REF
op	36:99	0:0	10	<
water	36:101	0:0	10	0
stmts	36:104	39:16	9	
water	36:104	0:0	10	{
call	37:20	37:86	10	av_log
arg	37:27	37:31	11	NULL
water	37:27	0:0	12	NULL
arg	37:33	37:45	11	AV_LOG_ERROR
water	37:33	0:0	12	AV_LOG_ERROR
arg	37:47	37:86	11	"Error while feeding the filtergraph\n"
water	37:47	0:0	12	"Error while feeding the filtergraph\n"
water	37:87	0:0	10	;
break	38:20	38:25	10	
water	39:16	0:0	10	}
while	41:16	49:16	8	(1)
cond	41:23	41:23	9	1
water	41:23	0:0	10	1
stmts	41:26	49:16	9	
water	41:26	0:0	10	{
water	42:20	0:0	10	ret
op	42:24	0:0	10	=
call	42:26	42:76	10	av_buffersink_get_frame
arg	42:50	42:64	11	buffersink_ctx
water	42:50	0:0	12	buffersink_ctx
arg	42:66	42:76	11	filt_frame
water	42:66	0:0	12	filt_frame
water	42:77	0:0	10	;
if	43:20	44:29	10	(ret ==AVERROR (EAGAIN ) || ret == AVERROR_EOF)
cond	43:24	43:57	11	ret ==AVERROR (EAGAIN ) || ret == AVERROR_EOF
water	43:24	0:0	12	ret
op	43:28	0:0	12	==
call	43:31	43:45	12	AVERROR
arg	43:39	43:45	13	EAGAIN
water	43:39	0:0	14	EAGAIN
op	43:47	0:0	12	||
water	43:50	0:0	12	ret
op	43:54	0:0	12	==
water	43:57	0:0	12	AVERROR_EOF
stmts	44:24	44:29	11	
break	44:24	44:29	12	
if	45:20	46:32	10	(ret < 0)
cond	45:24	45:30	11	ret < 0
water	45:24	0:0	12	ret
op	45:28	0:0	12	<
water	45:30	0:0	12	0
stmts	46:24	46:32	11	
goto	46:24	46:32	12	end
water	46:29	0:0	13	end
call	47:20	47:82	10	display_frame
arg	47:34	47:44	11	filt_frame
water	47:34	0:0	12	filt_frame
arg	47:46	47:82	11	buffersink_ctx->inputs[0]->time_base
water	47:46	0:0	12	buffersink_ctx
op	47:60	0:0	12	->
water	47:62	0:0	12	inputs
op	47:68	0:0	12	[
water	47:69	0:0	12	0
op	47:70	0:0	12	]
op	47:71	0:0	12	->
water	47:73	0:0	12	time_base
water	47:83	0:0	10	;
call	48:20	48:45	10	av_frame_unref
arg	48:35	48:45	11	filt_frame
water	48:35	0:0	12	filt_frame
water	48:46	0:0	10	;
water	49:16	0:0	10	}
call	50:16	50:36	8	av_frame_unref
arg	50:31	50:36	9	frame
water	50:31	0:0	10	frame
water	50:37	0:0	8	;
water	51:12	0:0	8	}
water	52:8	0:0	6	}
call	53:8	53:30	4	av_free_packet
arg	53:23	53:30	5	&packet
op	53:23	0:0	6	&
water	53:24	0:0	6	packet
water	53:31	0:0	4	;
water	54:4	0:0	4	}
label	55:0	55:3	2	end :
call	56:4	56:37	2	avfilter_graph_free
arg	56:24	56:37	3	&filter_graph
op	56:24	0:0	4	&
water	56:25	0:0	4	filter_graph
water	56:38	0:0	2	;
call	57:4	57:25	2	avcodec_close
arg	57:18	57:25	3	dec_ctx
water	57:18	0:0	4	dec_ctx
water	57:26	0:0	2	;
call	58:4	58:33	2	avformat_close_input
arg	58:25	58:33	3	&fmt_ctx
op	58:25	0:0	4	&
water	58:26	0:0	4	fmt_ctx
water	58:34	0:0	2	;
call	59:4	59:24	2	av_frame_free
arg	59:18	59:24	3	&frame
op	59:18	0:0	4	&
water	59:19	0:0	4	frame
water	59:25	0:0	2	;
call	60:4	60:29	2	av_frame_free
arg	60:18	60:29	3	&filt_frame
op	60:18	0:0	4	&
water	60:19	0:0	4	filt_frame
water	60:30	0:0	2	;
if	61:4	64:4	2	(ret < 0 && ret != AVERROR_EOF)
cond	61:8	61:26	3	ret < 0 && ret != AVERROR_EOF
water	61:8	0:0	4	ret
op	61:12	0:0	4	<
water	61:14	0:0	4	0
op	61:16	0:0	4	&&
water	61:19	0:0	4	ret
op	61:23	0:0	4	!=
water	61:26	0:0	4	AVERROR_EOF
stmts	61:39	64:4	3	
water	61:39	0:0	4	{
call	62:8	62:63	4	fprintf
arg	62:16	62:22	5	stderr
water	62:16	0:0	6	stderr
arg	62:24	62:46	5	"Error occurred: %s\n"
water	62:24	0:0	6	"Error occurred: %s\n"
arg	62:48	62:63	5	av_err2str(ret)
call	62:48	62:62	6	av_err2str
arg	62:59	62:62	7	ret
water	62:59	0:0	8	ret
water	62:64	0:0	4	;
call	63:8	63:14	4	exit
arg	63:13	63:14	5	1
water	63:13	0:0	6	1
water	63:15	0:0	4	;
water	64:4	0:0	4	}
call	65:4	65:10	2	exit
arg	65:9	65:10	3	0
water	65:9	0:0	4	0
water	65:11	0:0	2	;
